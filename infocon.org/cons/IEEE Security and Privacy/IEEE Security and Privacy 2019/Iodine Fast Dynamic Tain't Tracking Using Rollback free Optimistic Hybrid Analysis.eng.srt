1
00:00:10,290 --> 00:00:15,849
it is 2019 and we still hear such news

2
00:00:13,720 --> 00:00:17,680
as Facebook accidentally realizing they

3
00:00:15,850 --> 00:00:20,170
had been storing plaintext passwords for

4
00:00:17,680 --> 00:00:22,360
millions of users Google closing its

5
00:00:20,170 --> 00:00:24,340
social network platform last month after

6
00:00:22,360 --> 00:00:26,350
data leaks among other concerns and last

7
00:00:24,340 --> 00:00:28,869
year records of the Indian national

8
00:00:26,350 --> 00:00:31,000
identity database being exposed every

9
00:00:28,869 --> 00:00:33,100
year hackers managed to be breached

10
00:00:31,000 --> 00:00:35,170
through security differences and access

11
00:00:33,100 --> 00:00:35,710
valuable information of millions of

12
00:00:35,170 --> 00:00:38,350
people

13
00:00:35,710 --> 00:00:40,150
a study from IBM estimated that the cost

14
00:00:38,350 --> 00:00:42,220
of data breaches was around 2 billion

15
00:00:40,150 --> 00:00:45,850
u.s. dollars among 500 companies

16
00:00:42,220 --> 00:00:47,739
worldwide just in the last year tame

17
00:00:45,850 --> 00:00:50,290
tracking is a solution that detects and

18
00:00:47,739 --> 00:00:52,540
defends against information leaks by

19
00:00:50,290 --> 00:00:55,510
monitoring dynamic executions so it

20
00:00:52,540 --> 00:00:57,610
tames sensitive user data tracks teams

21
00:00:55,510 --> 00:00:59,349
throughout execution and then prevents

22
00:00:57,610 --> 00:01:01,600
stains from flowing in to untrusted

23
00:00:59,350 --> 00:01:03,969
channels train tracking has three

24
00:01:01,600 --> 00:01:06,820
components sources propagation and syncs

25
00:01:03,969 --> 00:01:08,890
sources identify well sensitive data

26
00:01:06,820 --> 00:01:11,080
enter the program state and mark them

27
00:01:08,890 --> 00:01:13,690
with tapes so for example program

28
00:01:11,080 --> 00:01:15,310
arguments input from keyboard or data

29
00:01:13,690 --> 00:01:17,679
from the file system of the network can

30
00:01:15,310 --> 00:01:19,509
be typically tamed sources the

31
00:01:17,679 --> 00:01:21,670
propagation policy defines how to

32
00:01:19,509 --> 00:01:22,990
compute paints for values that are

33
00:01:21,670 --> 00:01:27,190
derived from sensitive data

34
00:01:22,990 --> 00:01:29,500
so typically taints explains propagate

35
00:01:27,190 --> 00:01:32,440
explicitly via operations that are data

36
00:01:29,500 --> 00:01:34,899
dependent on tainted data so for example

37
00:01:32,440 --> 00:01:37,810
x equals HX + y here X will be tainted

38
00:01:34,899 --> 00:01:40,209
by secret and white but taints can also

39
00:01:37,810 --> 00:01:42,369
propagate implicitly for example by a

40
00:01:40,209 --> 00:01:44,679
control flow dependence so here we see

41
00:01:42,369 --> 00:01:46,720
operations that are control dependent on

42
00:01:44,679 --> 00:01:48,729
the tainted secret and with implicit

43
00:01:46,720 --> 00:01:50,860
propagation distant also flows to the

44
00:01:48,729 --> 00:01:53,590
result of all operations inside the

45
00:01:50,860 --> 00:01:55,330
condition well implicit propagations are

46
00:01:53,590 --> 00:01:56,920
rarely used in practice because they

47
00:01:55,330 --> 00:01:59,349
lead to over tainting and so we only

48
00:01:56,920 --> 00:02:01,569
focus on explicit flows and finally

49
00:01:59,349 --> 00:02:03,489
sinks our program locations where we

50
00:02:01,569 --> 00:02:05,530
check the taint state so for example

51
00:02:03,489 --> 00:02:08,170
data being sent over the network should

52
00:02:05,530 --> 00:02:10,119
not contain certain types of things by

53
00:02:08,169 --> 00:02:12,250
adapting the source sink and propagation

54
00:02:10,119 --> 00:02:14,220
policies taint tracking has been useful

55
00:02:12,250 --> 00:02:16,450
in several domains for example

56
00:02:14,220 --> 00:02:17,769
preventing buffer overflow command

57
00:02:16,450 --> 00:02:20,230
injection of cross-site scripting

58
00:02:17,769 --> 00:02:22,540
attacks detecting information leaks and

59
00:02:20,230 --> 00:02:25,510
also in software engineering for testing

60
00:02:22,540 --> 00:02:27,909
debugging and other program analysis but

61
00:02:25,510 --> 00:02:29,280
despite is useful applications live

62
00:02:27,909 --> 00:02:31,260
train tracking on production

63
00:02:29,280 --> 00:02:34,560
systems has been challenging due to its

64
00:02:31,260 --> 00:02:36,329
performance overheads so a nice dynamic

65
00:02:34,560 --> 00:02:38,580
monitoring approach would have to

66
00:02:36,330 --> 00:02:40,950
instrument each instruction to look up

67
00:02:38,580 --> 00:02:42,750
the taint of its operands compute the

68
00:02:40,950 --> 00:02:45,329
taint propagation and then modify the

69
00:02:42,750 --> 00:02:47,520
taint state so in our example here for

70
00:02:45,330 --> 00:02:50,130
the first instruction X equals Z plus 3

71
00:02:47,520 --> 00:02:51,920
we monitor taint of x equals taint of Si

72
00:02:50,130 --> 00:02:54,600
and constants are never really tainted

73
00:02:51,920 --> 00:02:57,089
next secret is a taint source in our

74
00:02:54,600 --> 00:02:59,069
example and for the assignment y equals

75
00:02:57,090 --> 00:03:02,400
secret we explicitly transfer the taint

76
00:02:59,069 --> 00:03:04,530
of secret to taint of Y next inside the

77
00:03:02,400 --> 00:03:06,810
F block where we compute Z as C

78
00:03:04,530 --> 00:03:09,510
multiplied by Y we monitor taint of Z

79
00:03:06,810 --> 00:03:11,610
equals taint of C or taint of Y meaning

80
00:03:09,510 --> 00:03:13,380
Z can be tainted by both C and y and

81
00:03:11,610 --> 00:03:15,900
again for the assignment we explicitly

82
00:03:13,380 --> 00:03:18,420
transfer the tails so these are all our

83
00:03:15,900 --> 00:03:20,370
taint tracking monitors additionally

84
00:03:18,420 --> 00:03:22,500
since the tainted value out can reach

85
00:03:20,370 --> 00:03:24,269
the sink that is the print statement the

86
00:03:22,500 --> 00:03:27,060
analysis has to check the taint of out

87
00:03:24,269 --> 00:03:28,950
before performing this operation so all

88
00:03:27,060 --> 00:03:31,230
this additional work amounts to huge

89
00:03:28,950 --> 00:03:34,619
slowdowns primarily due to the metadata

90
00:03:31,230 --> 00:03:36,570
tracking operations now most programs

91
00:03:34,620 --> 00:03:38,280
are mostly correct and a majority of

92
00:03:36,570 --> 00:03:40,590
instructions would not propagate in

93
00:03:38,280 --> 00:03:43,049
streams in their correct dynamic

94
00:03:40,590 --> 00:03:45,660
executions so many of these taint

95
00:03:43,049 --> 00:03:47,670
monitors are actually unnecessary and a

96
00:03:45,660 --> 00:03:49,859
static analysis can alight some of the

97
00:03:47,670 --> 00:03:51,630
unnecessary monitors so for example here

98
00:03:49,860 --> 00:03:53,610
it can reason that the first instruction

99
00:03:51,630 --> 00:03:56,250
would never propagate think because

100
00:03:53,610 --> 00:03:57,570
because both its operands C and the

101
00:03:56,250 --> 00:03:58,170
constant value are never going to be

102
00:03:57,570 --> 00:04:00,358
tainted

103
00:03:58,170 --> 00:04:02,160
so if static analysis can prove that an

104
00:04:00,359 --> 00:04:04,620
instruction never propagate stains using

105
00:04:02,160 --> 00:04:07,560
dataflow analysis we can elect tracking

106
00:04:04,620 --> 00:04:09,600
teams for such operate operations the

107
00:04:07,560 --> 00:04:10,230
static analysis is sound but as I will

108
00:04:09,600 --> 00:04:12,780
show you next

109
00:04:10,230 --> 00:04:14,488
it is imprecise unscalable and

110
00:04:12,780 --> 00:04:17,970
ineffective in reducing the overall

111
00:04:14,489 --> 00:04:20,039
dynamic overheads now in order to be

112
00:04:17,970 --> 00:04:22,530
sound static analysis needs to consider

113
00:04:20,039 --> 00:04:24,450
all possible program states but

114
00:04:22,530 --> 00:04:26,820
computing this exact set of possible

115
00:04:24,450 --> 00:04:28,740
behaviors is undecidable so it

116
00:04:26,820 --> 00:04:30,060
conservatively considers an over

117
00:04:28,740 --> 00:04:32,940
approximation of the possible States

118
00:04:30,060 --> 00:04:34,650
including many infeasible States as a

119
00:04:32,940 --> 00:04:37,289
result the analysis becomes very

120
00:04:34,650 --> 00:04:39,210
imprecise and unscalable this is a

121
00:04:37,289 --> 00:04:42,180
fundamental limitation of traditional

122
00:04:39,210 --> 00:04:42,810
sound static analysis optimistic hybrid

123
00:04:42,180 --> 00:04:44,370
analysis

124
00:04:42,810 --> 00:04:47,720
a new technique that attempts to

125
00:04:44,370 --> 00:04:50,700
mitigate this imposition problem so it

126
00:04:47,720 --> 00:04:53,280
it observes a few tested program states

127
00:04:50,700 --> 00:04:55,979
and then predicates the static analysis

128
00:04:53,280 --> 00:04:58,289
by using invariants learnt on those

129
00:04:55,980 --> 00:04:59,820
states these invariants are properties

130
00:04:58,290 --> 00:05:02,010
that are otherwise very hard to prove

131
00:04:59,820 --> 00:05:04,889
statically but almost always hold

132
00:05:02,010 --> 00:05:06,780
dynamically and by assuming them the

133
00:05:04,889 --> 00:05:08,700
static analysis significantly reduces

134
00:05:06,780 --> 00:05:11,489
its state space thereby making it

135
00:05:08,700 --> 00:05:13,380
precise and scalable but careful design

136
00:05:11,490 --> 00:05:16,110
is still needed for soundness when a

137
00:05:13,380 --> 00:05:19,110
case when a state outside the predicated

138
00:05:16,110 --> 00:05:21,840
analysis is encountered so looking back

139
00:05:19,110 --> 00:05:24,000
at our example if the variable P always

140
00:05:21,840 --> 00:05:26,369
takes non-negative values in all useful

141
00:05:24,000 --> 00:05:28,860
executions the static analysis can

142
00:05:26,370 --> 00:05:31,020
assume this invariant to induce more

143
00:05:28,860 --> 00:05:33,240
aggressive optimizations so assuming the

144
00:05:31,020 --> 00:05:35,190
if block never executes it can reason

145
00:05:33,240 --> 00:05:39,030
that why stain would never flow forward

146
00:05:35,190 --> 00:05:41,400
to Z and then out and so on so it can

147
00:05:39,030 --> 00:05:43,138
alight those taint monitors further

148
00:05:41,400 --> 00:05:44,909
using backward reach ability it can

149
00:05:43,139 --> 00:05:46,830
reason that why stain would never reach

150
00:05:44,910 --> 00:05:49,470
the sink that is the print statement and

151
00:05:46,830 --> 00:05:51,479
illite tracking that as well so this

152
00:05:49,470 --> 00:05:54,090
simple assumption allows us to alight

153
00:05:51,479 --> 00:05:55,860
all the taint monitors in our example so

154
00:05:54,090 --> 00:05:58,140
this predicated analysis is much more

155
00:05:55,860 --> 00:06:01,680
precise targeted to the common case

156
00:05:58,140 --> 00:06:04,020
behavior and scalable optimistic hybrid

157
00:06:01,680 --> 00:06:06,360
analysis works as follows it profiles

158
00:06:04,020 --> 00:06:08,940
the target program to gather invariants

159
00:06:06,360 --> 00:06:10,650
that hold in most dynamic runs the

160
00:06:08,940 --> 00:06:12,750
static analysis then assumes these

161
00:06:10,650 --> 00:06:14,929
invariants predicating its state space

162
00:06:12,750 --> 00:06:17,190
thereby improving precision and

163
00:06:14,930 --> 00:06:19,620
delighting many more dynamic monitors

164
00:06:17,190 --> 00:06:22,590
and the optimized dynamic analysis then

165
00:06:19,620 --> 00:06:24,479
executes so the property that we assumed

166
00:06:22,590 --> 00:06:26,190
in our example translates to the

167
00:06:24,479 --> 00:06:28,710
highlighted code block not being

168
00:06:26,190 --> 00:06:30,419
executed this is in fact our simplest

169
00:06:28,710 --> 00:06:33,330
type of lightly invariant unreachable

170
00:06:30,419 --> 00:06:34,979
code views to other types of invariants

171
00:06:33,330 --> 00:06:37,710
that deal with function pointed Colley's

172
00:06:34,979 --> 00:06:39,300
and function call contexts as long as

173
00:06:37,710 --> 00:06:41,489
these invariants do not fail in an

174
00:06:39,300 --> 00:06:41,880
execution the analysis outcome is the

175
00:06:41,490 --> 00:06:44,039
same

176
00:06:41,880 --> 00:06:47,159
as the conservative sound approach but

177
00:06:44,039 --> 00:06:49,260
what happens if an invariant fails so in

178
00:06:47,160 --> 00:06:51,510
our example we started with the tainted

179
00:06:49,260 --> 00:06:54,599
secret shown here in the taint set and

180
00:06:51,510 --> 00:06:55,150
after we execute yko secret originally

181
00:06:54,599 --> 00:06:57,820
we

182
00:06:55,150 --> 00:06:59,289
Tainted why as well but using the

183
00:06:57,820 --> 00:07:01,659
optimistic assumptions we alighted

184
00:06:59,290 --> 00:07:03,850
tracking one if the invariant table

185
00:07:01,660 --> 00:07:07,000
failed and we execute Z equals Z times y

186
00:07:03,850 --> 00:07:08,740
now we have no idea if Y is tainted as a

187
00:07:07,000 --> 00:07:12,100
result we lose tracking the stain flow

188
00:07:08,740 --> 00:07:14,890
and Y can now propagate to Z and out and

189
00:07:12,100 --> 00:07:16,780
leak without being detected so when the

190
00:07:14,890 --> 00:07:19,479
invariant failed the problem is that

191
00:07:16,780 --> 00:07:22,119
eliding y stained monitor resulted in

192
00:07:19,480 --> 00:07:24,100
losing y's tainted State and that would

193
00:07:22,120 --> 00:07:26,560
require us to roll back to recover this

194
00:07:24,100 --> 00:07:28,180
last analysis metadata state so the

195
00:07:26,560 --> 00:07:30,040
dynamic analysis needs to be able to

196
00:07:28,180 --> 00:07:32,230
detect when an invariant violates and

197
00:07:30,040 --> 00:07:35,620
then recover the analysis in order to be

198
00:07:32,230 --> 00:07:37,390
sound so we need to add dynamic

199
00:07:35,620 --> 00:07:39,760
invariant validation checks for the

200
00:07:37,390 --> 00:07:40,990
detection and a recovery mechanism that

201
00:07:39,760 --> 00:07:42,969
can correct the effect of the

202
00:07:40,990 --> 00:07:44,260
incorrectly lighted monitors and then

203
00:07:42,970 --> 00:07:46,600
resume will be correctly optimized

204
00:07:44,260 --> 00:07:48,909
analysis so the question is how do we

205
00:07:46,600 --> 00:07:50,590
recover the analysis well because you

206
00:07:48,910 --> 00:07:52,660
could have lost essential metadata state

207
00:07:50,590 --> 00:07:54,460
anywhere in your program prior work

208
00:07:52,660 --> 00:07:56,320
conservatively rolls back and reacts

209
00:07:54,460 --> 00:07:58,150
Acutes from the beginning well this

210
00:07:56,320 --> 00:08:00,640
approach works for offline postmortem

211
00:07:58,150 --> 00:08:03,210
kind of analysis we cannot tolerate roll

212
00:08:00,640 --> 00:08:05,919
backs on live production systems

213
00:08:03,210 --> 00:08:08,409
bounding the roll back window is hard

214
00:08:05,920 --> 00:08:10,240
for whole program analysis because an

215
00:08:08,410 --> 00:08:12,100
invariant failure anywhere could have

216
00:08:10,240 --> 00:08:14,320
affected in missing metadata state as

217
00:08:12,100 --> 00:08:16,180
early as at the beginning of the program

218
00:08:14,320 --> 00:08:18,400
so you have unbounded roll backs and you

219
00:08:16,180 --> 00:08:19,810
end up going back to the beginning but

220
00:08:18,400 --> 00:08:21,940
even if you could bound it all back

221
00:08:19,810 --> 00:08:23,470
window supporting roll backs incurs

222
00:08:21,940 --> 00:08:25,390
additional check pointing and logging

223
00:08:23,470 --> 00:08:27,520
overhead even during normal execution

224
00:08:25,390 --> 00:08:28,090
other than the actual roll back replay

225
00:08:27,520 --> 00:08:31,510
costs

226
00:08:28,090 --> 00:08:33,610
so to recap pure dynamic monitoring is

227
00:08:31,510 --> 00:08:35,620
obviously very expensive conservative

228
00:08:33,610 --> 00:08:38,020
hybrid analysis is imprecise and

229
00:08:35,620 --> 00:08:40,060
therefore inefficient optimistic hybrid

230
00:08:38,020 --> 00:08:42,789
analysis improves precision by assuming

231
00:08:40,059 --> 00:08:44,920
likely program invariants but roll back

232
00:08:42,789 --> 00:08:46,810
in case an invariant violates remains

233
00:08:44,920 --> 00:08:49,329
challenging for live production systems

234
00:08:46,810 --> 00:08:51,010
so we need to eliminate roll backs in

235
00:08:49,330 --> 00:08:54,610
order to apply or a child to live

236
00:08:51,010 --> 00:08:56,290
systems so the role that issue has

237
00:08:54,610 --> 00:08:59,200
essentially due to potentially missing

238
00:08:56,290 --> 00:09:00,730
metadata state instead if we make sure

239
00:08:59,200 --> 00:09:03,040
that we never miss any metadata that is

240
00:09:00,730 --> 00:09:04,810
somehow we correctly maintain the exact

241
00:09:03,040 --> 00:09:07,329
metadata state as in a conservative

242
00:09:04,810 --> 00:09:08,099
sound analysis upon an invariant

243
00:09:07,330 --> 00:09:09,930
violation

244
00:09:08,100 --> 00:09:11,310
the recovery mechanism can simply switch

245
00:09:09,930 --> 00:09:14,910
to the conservative analysis and

246
00:09:11,310 --> 00:09:17,609
continue forward if the predicated

247
00:09:14,910 --> 00:09:19,649
analysis can prove that a monitor does

248
00:09:17,610 --> 00:09:22,470
not update the analysis metadata state

249
00:09:19,649 --> 00:09:24,149
it essentially becomes unknown so for

250
00:09:22,470 --> 00:09:26,399
example if we have a tenth monitor of

251
00:09:24,149 --> 00:09:28,980
this type tenth of Y constant of public

252
00:09:26,399 --> 00:09:31,350
where the value public is never really

253
00:09:28,980 --> 00:09:33,750
tainted this taint monitor would not

254
00:09:31,350 --> 00:09:35,970
modify the taint State if we were to

255
00:09:33,750 --> 00:09:38,310
alight this monitor even if we encounter

256
00:09:35,970 --> 00:09:40,500
a subsequent invariant violation that

257
00:09:38,310 --> 00:09:42,959
would not affect the elation of this no

258
00:09:40,500 --> 00:09:45,180
op monitor because the taint State is

259
00:09:42,959 --> 00:09:48,300
unaffected we would not need a rollback

260
00:09:45,180 --> 00:09:49,888
to correct the effect of the solution so

261
00:09:48,300 --> 00:09:52,529
by restricting the predicated static

262
00:09:49,889 --> 00:09:55,410
analysis to only perform safe Elysion of

263
00:09:52,529 --> 00:09:57,420
no op monitors guarantees that the

264
00:09:55,410 --> 00:09:59,279
analysis metadata state is exactly the

265
00:09:57,420 --> 00:10:01,439
same as in a conservative sound analysis

266
00:09:59,279 --> 00:10:03,360
and that in turn guarantees that the

267
00:10:01,440 --> 00:10:06,540
outcome of all analysis checks are

268
00:10:03,360 --> 00:10:08,579
correct this is our key insight so

269
00:10:06,540 --> 00:10:10,230
looking back at our example remember we

270
00:10:08,579 --> 00:10:12,569
had assumed the invariant that the if

271
00:10:10,230 --> 00:10:15,329
block never executes so if Z is not

272
00:10:12,569 --> 00:10:17,550
tainted the taint monitor for out will

273
00:10:15,329 --> 00:10:19,739
not add tame to out and we still only

274
00:10:17,550 --> 00:10:21,750
have secret and wiring the taint set if

275
00:10:19,740 --> 00:10:24,089
we were to alight the state monitor

276
00:10:21,750 --> 00:10:26,610
people end up with exactly the same time

277
00:10:24,089 --> 00:10:29,370
set and that is the reason this elation

278
00:10:26,610 --> 00:10:31,260
is safe under the assumed in very and if

279
00:10:29,370 --> 00:10:33,029
the invariant table failed we would have

280
00:10:31,260 --> 00:10:35,040
detected so and switched to the

281
00:10:33,029 --> 00:10:37,829
conservative analysis without missing

282
00:10:35,040 --> 00:10:40,110
any metadata so Alicia's induced using

283
00:10:37,829 --> 00:10:43,229
predicated forward analysis are safe and

284
00:10:40,110 --> 00:10:44,639
they keep the correct metadata state now

285
00:10:43,230 --> 00:10:46,829
we could have also elided the taint

286
00:10:44,639 --> 00:10:49,110
monitor for y because we reasoned it did

287
00:10:46,829 --> 00:10:51,479
not reach the sink but while having this

288
00:10:49,110 --> 00:10:53,730
taint monitor adds secret and Y to the

289
00:10:51,480 --> 00:10:56,069
taint set if we were to alight this

290
00:10:53,730 --> 00:10:58,079
taint monitor the metadata state would

291
00:10:56,069 --> 00:11:00,149
diverge and we would lose the taint of Y

292
00:10:58,079 --> 00:11:02,219
if there was an invariant failure at

293
00:11:00,149 --> 00:11:04,380
this point the analysis would have to

294
00:11:02,220 --> 00:11:07,889
roll back to recover this last analysis

295
00:11:04,380 --> 00:11:11,459
state so this illusion is unsafe and we

296
00:11:07,889 --> 00:11:13,110
have to keep this taint monitor so the

297
00:11:11,459 --> 00:11:15,060
forward recovery mechanism essentially

298
00:11:13,110 --> 00:11:17,279
leads to reactivate the monitors that

299
00:11:15,060 --> 00:11:19,949
were optimistically elided this works as

300
00:11:17,279 --> 00:11:22,110
follows we have two versions of the

301
00:11:19,950 --> 00:11:23,850
program instrumented in separate control

302
00:11:22,110 --> 00:11:25,860
flow domains the fast path with the

303
00:11:23,850 --> 00:11:28,050
optimistic analysis and the slow path

304
00:11:25,860 --> 00:11:30,270
with the conservative analysis execution

305
00:11:28,050 --> 00:11:32,160
begins in the fast path domain and upon

306
00:11:30,270 --> 00:11:33,870
an invariant violation simply switches

307
00:11:32,160 --> 00:11:36,360
to the conservative slow path domain and

308
00:11:33,870 --> 00:11:38,520
continues forward this switching is safe

309
00:11:36,360 --> 00:11:41,250
because the two versions only differ in

310
00:11:38,520 --> 00:11:43,439
their analysis logic and moreover safe

311
00:11:41,250 --> 00:11:45,470
elations guarantee the correct metadata

312
00:11:43,440 --> 00:11:47,430
state at the point of invariant failure

313
00:11:45,470 --> 00:11:49,170
additionally when returning from a

314
00:11:47,430 --> 00:11:50,939
function call if there was an invariant

315
00:11:49,170 --> 00:11:52,560
violation in the callee the caller

316
00:11:50,940 --> 00:11:56,340
should also switch to be conservative

317
00:11:52,560 --> 00:11:58,199
slow path so we implement iodine using

318
00:11:56,340 --> 00:12:00,300
the LLVM compiler infrastructure for c

319
00:11:58,200 --> 00:12:02,520
programs it implements two variants of

320
00:12:00,300 --> 00:12:04,709
hybrid plain cracking the conservative

321
00:12:02,520 --> 00:12:06,930
analysis uses pointer and data flow

322
00:12:04,710 --> 00:12:09,420
analysis to identify instructions that

323
00:12:06,930 --> 00:12:11,250
propagate times and only instrument them

324
00:12:09,420 --> 00:12:12,900
using a state-of-the-art pure dynamic

325
00:12:11,250 --> 00:12:14,940
tracking framework LLVM state of flow

326
00:12:12,900 --> 00:12:16,890
sanitizer and the rollback free

327
00:12:14,940 --> 00:12:19,170
optimistic variant performs profiling

328
00:12:16,890 --> 00:12:21,630
followed by predicated pointer analysis

329
00:12:19,170 --> 00:12:23,280
and the taint analysis uses predicated

330
00:12:21,630 --> 00:12:26,100
forward reach ability combined with

331
00:12:23,280 --> 00:12:27,600
conservative backward corage ability the

332
00:12:26,100 --> 00:12:29,580
resulting dynamic analysis is more

333
00:12:27,600 --> 00:12:32,430
optimized and we also had the invariant

334
00:12:29,580 --> 00:12:34,710
checks as a recovery mechanism we

335
00:12:32,430 --> 00:12:36,780
evaluate for two different information

336
00:12:34,710 --> 00:12:38,580
flow security policies for email

337
00:12:36,780 --> 00:12:40,740
integrity on the post fix mail servers

338
00:12:38,580 --> 00:12:42,930
for example the DML body is sanitized

339
00:12:40,740 --> 00:12:45,000
and encrypted and against overwrite

340
00:12:42,930 --> 00:12:46,380
attacks on the nginx web server so for

341
00:12:45,000 --> 00:12:48,690
example that derivatives of user

342
00:12:46,380 --> 00:12:51,240
provided values and not used as return

343
00:12:48,690 --> 00:12:53,460
address ease function pointers format

344
00:12:51,240 --> 00:12:55,920
strings we observe cadres of magnitude

345
00:12:53,460 --> 00:12:57,240
speed-up over pure dynamic monitoring in

346
00:12:55,920 --> 00:13:00,000
an average of four point four times

347
00:12:57,240 --> 00:13:01,770
speed up over conservative tracking now

348
00:13:00,000 --> 00:13:03,270
this improvement really comes from the

349
00:13:01,770 --> 00:13:05,270
precision of the predicated static

350
00:13:03,270 --> 00:13:08,819
analysis and we look at a few more eggs

351
00:13:05,270 --> 00:13:10,530
using generic policy this graph here

352
00:13:08,820 --> 00:13:11,880
shows the fraction of instructions that

353
00:13:10,530 --> 00:13:14,100
are instrumented by the stack

354
00:13:11,880 --> 00:13:16,200
conservative static analysis and after

355
00:13:14,100 --> 00:13:18,000
assuming the likely invariants iodine

356
00:13:16,200 --> 00:13:19,010
elides instrumenting almost half of the

357
00:13:18,000 --> 00:13:21,870
monitors

358
00:13:19,010 --> 00:13:24,060
finally a key question is how much

359
00:13:21,870 --> 00:13:26,300
profiling is needed in order to see the

360
00:13:24,060 --> 00:13:28,949
optimistic benefits and we observe that

361
00:13:26,300 --> 00:13:31,500
profiling on existing software test

362
00:13:28,950 --> 00:13:34,380
suits is adequate for reducing the

363
00:13:31,500 --> 00:13:36,720
analysis overheads so these graphs show

364
00:13:34,380 --> 00:13:39,570
how the dynamic analysis time varies

365
00:13:36,720 --> 00:13:40,920
with more time spent in profiling and we

366
00:13:39,570 --> 00:13:42,720
observe that the dynamic overheads

367
00:13:40,920 --> 00:13:45,120
reduced generally with more profiling

368
00:13:42,720 --> 00:13:46,770
and the reason is that the numbers on

369
00:13:45,120 --> 00:13:49,350
the graph indicating the total number of

370
00:13:46,770 --> 00:13:51,180
invariant violations encountered reduces

371
00:13:49,350 --> 00:13:53,730
significantly with more profiling

372
00:13:51,180 --> 00:13:56,219
now our profiling methodology is split

373
00:13:53,730 --> 00:13:58,680
in two phases first in the left unshaded

374
00:13:56,220 --> 00:14:00,810
part of the graphs we run on existing

375
00:13:58,680 --> 00:14:04,160
regulation test suits to learn

376
00:14:00,810 --> 00:14:06,119
invariance this alone turns out to be

377
00:14:04,160 --> 00:14:08,250
yielding most of the performance

378
00:14:06,120 --> 00:14:09,930
benefits that is so because testing

379
00:14:08,250 --> 00:14:12,270
ideally attempts to exercise most

380
00:14:09,930 --> 00:14:14,219
realistic program behaviors and then we

381
00:14:12,270 --> 00:14:17,069
also further run on a few more profile

382
00:14:14,220 --> 00:14:18,540
inputs representing beta tests to see

383
00:14:17,070 --> 00:14:22,380
the full benefits of our optimistic

384
00:14:18,540 --> 00:14:24,420
analysis so to conclude iodine enables

385
00:14:22,380 --> 00:14:27,540
practical low overhead pain tracking

386
00:14:24,420 --> 00:14:29,370
using optimistic hybrid analysis which

387
00:14:27,540 --> 00:14:31,589
can make such expensive dynamic analysis

388
00:14:29,370 --> 00:14:33,810
much faster by assuming likely program

389
00:14:31,590 --> 00:14:36,030
invariance but this leads to a major

390
00:14:33,810 --> 00:14:38,550
problem that is unbounded rollbacks in

391
00:14:36,030 --> 00:14:40,470
case the invariants fail this is

392
00:14:38,550 --> 00:14:43,050
critical for running on life executions

393
00:14:40,470 --> 00:14:45,630
we fix this by restricting to only safe

394
00:14:43,050 --> 00:14:47,609
elations thereby enabling fast aim

395
00:14:45,630 --> 00:14:48,600
cracking with correct semantics without

396
00:14:47,610 --> 00:14:51,089
requiring rollbacks

397
00:14:48,600 --> 00:14:53,190
we also show that profiling on existing

398
00:14:51,089 --> 00:14:55,980
test suits is adequate for most of the

399
00:14:53,190 --> 00:14:57,240
performance benefits thank you for

400
00:14:55,980 --> 00:14:58,940
listening and I will answer your

401
00:14:57,240 --> 00:15:03,110
questions now

402
00:14:58,940 --> 00:15:06,500
[Applause]

403
00:15:03,110 --> 00:15:09,350
a very nice talk and we have plenty time

404
00:15:06,500 --> 00:15:10,700
for questions so please you favor if you

405
00:15:09,350 --> 00:15:13,660
have questions please come to the

406
00:15:10,700 --> 00:15:13,660
microphone

407
00:15:14,890 --> 00:15:22,220
Herbert boslough SEC Amsterdam nice talk

408
00:15:18,800 --> 00:15:24,410
I have a few questions and comments

409
00:15:22,220 --> 00:15:27,920
perhaps so first of all I I'm always a

410
00:15:24,410 --> 00:15:31,520
little concerned when the case for taint

411
00:15:27,920 --> 00:15:35,030
analysis is made from the viewpoint of

412
00:15:31,520 --> 00:15:37,189
data leak it's by attackers I think this

413
00:15:35,030 --> 00:15:39,020
is really problematic right because as

414
00:15:37,190 --> 00:15:41,180
you mentioned you don't take into

415
00:15:39,020 --> 00:15:42,920
account implicit flows and if you have

416
00:15:41,180 --> 00:15:45,109
an attacker it's actually really easy to

417
00:15:42,920 --> 00:15:46,760
create implicit flows or you know

418
00:15:45,110 --> 00:15:49,100
pointer pointer tracking or what have

419
00:15:46,760 --> 00:15:51,650
you so I'm a little concerned there

420
00:15:49,100 --> 00:15:54,890
always and the other thing is perhaps a

421
00:15:51,650 --> 00:15:57,650
comment or a question did you compare it

422
00:15:54,890 --> 00:16:00,350
to some of the the faster taint analysis

423
00:15:57,650 --> 00:16:02,420
approaches so you compare it to one that

424
00:16:00,350 --> 00:16:05,120
has an overhead of I think between five

425
00:16:02,420 --> 00:16:07,640
or eight acts or so but even on binary

426
00:16:05,120 --> 00:16:10,670
ones are faster ones right

427
00:16:07,640 --> 00:16:12,590
did you actually look at those okay so

428
00:16:10,670 --> 00:16:16,430
today's point in your first question

429
00:16:12,590 --> 00:16:17,750
about implicit propagation our technique

430
00:16:16,430 --> 00:16:19,969
is broadly applicable to implicit

431
00:16:17,750 --> 00:16:22,910
provocations as well but we do not

432
00:16:19,970 --> 00:16:25,700
explore them because it turns out that

433
00:16:22,910 --> 00:16:28,579
if you have a large fraction of your

434
00:16:25,700 --> 00:16:30,290
program state tainted the benefits of

435
00:16:28,580 --> 00:16:32,440
optimistic analysis and even a

436
00:16:30,290 --> 00:16:35,839
conservative static analysis it reduces

437
00:16:32,440 --> 00:16:38,330
that is true with even conservative

438
00:16:35,840 --> 00:16:41,960
sound static analysis oh you know it

439
00:16:38,330 --> 00:16:43,550
would explode anyway yes yes it would be

440
00:16:41,960 --> 00:16:45,340
impractical and that is the reason we do

441
00:16:43,550 --> 00:16:48,469
not look at implicit propagations

442
00:16:45,340 --> 00:16:51,340
regarding your question so there are

443
00:16:48,470 --> 00:16:54,380
broadly two ways that you can reduce the

444
00:16:51,340 --> 00:16:56,150
overhead of dynamic gain cracking first

445
00:16:54,380 --> 00:16:59,380
is by reducing the number of actual

446
00:16:56,150 --> 00:17:01,760
monitors that you execute and the second

447
00:16:59,380 --> 00:17:04,220
completely orthogonal direction would be

448
00:17:01,760 --> 00:17:06,980
to reduce the that overhead of each

449
00:17:04,220 --> 00:17:10,300
individual monitor so our focus is on

450
00:17:06,980 --> 00:17:13,130
the first problem if we could prove that

451
00:17:10,300 --> 00:17:14,569
monitor is unnecessary we would

452
00:17:13,130 --> 00:17:17,630
remove that but it turns out that

453
00:17:14,569 --> 00:17:20,750
proving that statically is hard so we

454
00:17:17,630 --> 00:17:22,940
make assumptions that let me lead us

455
00:17:20,750 --> 00:17:25,339
prove this property for most of the

456
00:17:22,940 --> 00:17:27,290
instructions and we also handle those

457
00:17:25,339 --> 00:17:29,510
cases where those assumptions go wrong

458
00:17:27,290 --> 00:17:33,500
we take care of the recovery mechanisms

459
00:17:29,510 --> 00:17:35,900
so existing techniques that improve the

460
00:17:33,500 --> 00:17:38,510
overhead of each individual monitors

461
00:17:35,900 --> 00:17:39,980
would be orthogonal to our work and we

462
00:17:38,510 --> 00:17:42,830
could combine those techniques to

463
00:17:39,980 --> 00:17:44,720
further improve the overhead of pain

464
00:17:42,830 --> 00:17:47,860
tracking but but I think that would have

465
00:17:44,720 --> 00:17:47,860
been a good baseline yes

466
00:17:53,030 --> 00:17:58,100
Munich I have a question and the

467
00:17:56,450 --> 00:18:04,490
question is actually quite technical

468
00:17:58,100 --> 00:18:05,419
time if if it's very time-consuming to

469
00:18:04,490 --> 00:18:07,750
answer we should take it offline

470
00:18:05,420 --> 00:18:10,400
afterwards but the question is basically

471
00:18:07,750 --> 00:18:12,530
the solution should require all the

472
00:18:10,400 --> 00:18:15,860
analysis that you already need to

473
00:18:12,530 --> 00:18:19,399
basically add the code that you would

474
00:18:15,860 --> 00:18:22,429
alight into the paths that you're

475
00:18:19,400 --> 00:18:24,680
excluding so in your example do you for

476
00:18:22,430 --> 00:18:26,900
instance you alight a check that you

477
00:18:24,680 --> 00:18:29,420
could easily move into the if statement

478
00:18:26,900 --> 00:18:33,310
so that seems to me would be the easiest

479
00:18:29,420 --> 00:18:37,670
thing to avoid going back to another

480
00:18:33,310 --> 00:18:39,379
safe analyzed version and so either my

481
00:18:37,670 --> 00:18:41,750
idea is so stupid that you already

482
00:18:39,380 --> 00:18:43,190
thought about it and it doesn't work in

483
00:18:41,750 --> 00:18:44,960
case I would be interested in your

484
00:18:43,190 --> 00:18:48,740
answer or there may be an interesting

485
00:18:44,960 --> 00:18:51,140
optimization opportunity there so I

486
00:18:48,740 --> 00:18:53,510
think for the simple example that I had

487
00:18:51,140 --> 00:18:55,340
on my slides as you pointed out you

488
00:18:53,510 --> 00:18:57,500
could have easily merged the paint

489
00:18:55,340 --> 00:18:58,639
monitor for the following instructions

490
00:18:57,500 --> 00:19:01,520
inside the f-block

491
00:18:58,640 --> 00:19:03,110
and if that is the case we are assuming

492
00:19:01,520 --> 00:19:05,830
the invariant that the if block is never

493
00:19:03,110 --> 00:19:08,929
executed so it it is meaningless to

494
00:19:05,830 --> 00:19:10,460
alight that paint monitor but in general

495
00:19:08,930 --> 00:19:14,330
with the whole program analysis you

496
00:19:10,460 --> 00:19:17,090
would not be able to bound the effect of

497
00:19:14,330 --> 00:19:19,879
an invariant assumption so if you make

498
00:19:17,090 --> 00:19:22,159
an assumption it could enable you to

499
00:19:19,880 --> 00:19:23,480
induce optimizations much earlier in

500
00:19:22,160 --> 00:19:27,230
your

501
00:19:23,480 --> 00:19:31,250
Flo so you could have optimizations

502
00:19:27,230 --> 00:19:33,980
induced using invariant that take effect

503
00:19:31,250 --> 00:19:34,429
much earlier in your program so in that

504
00:19:33,980 --> 00:19:38,779
case

505
00:19:34,429 --> 00:19:40,460
the ability to merge the program the

506
00:19:38,779 --> 00:19:44,480
ability to merge monitors would no

507
00:19:40,460 --> 00:19:46,100
longer be cool I think it's a different

508
00:19:44,480 --> 00:19:48,019
question but it's probably good to take

509
00:19:46,100 --> 00:19:50,189
it offline okay all right thank you

510
00:19:48,019 --> 00:19:54,269
let's thank the speaker one more time

511
00:19:50,190 --> 00:19:54,269
[Applause]

