1
00:00:08,620 --> 00:00:17,409
thanks Matias let's start all right prep

2
00:00:15,580 --> 00:00:19,470
rows provide us ubiquitous access to

3
00:00:17,410 --> 00:00:22,840
different functionality and have become

4
00:00:19,470 --> 00:00:24,700
an integral part of our daily life now

5
00:00:22,840 --> 00:00:27,970
although the kinds and the functionality

6
00:00:24,700 --> 00:00:29,950
varies these devices the protocol used

7
00:00:27,970 --> 00:00:32,619
to support this devices start to

8
00:00:29,950 --> 00:00:37,510
converge into a couple field including

9
00:00:32,619 --> 00:00:39,640
USB Bluetooth NFC the recent app helps

10
00:00:37,510 --> 00:00:42,580
laptops have replaced their power supply

11
00:00:39,640 --> 00:00:44,650
Thunderbolt and HDMI ports with USB

12
00:00:42,580 --> 00:00:46,810
type-c ports and we have seen the

13
00:00:44,650 --> 00:00:49,480
traditional 3.5 millimeter jack audio

14
00:00:46,810 --> 00:00:53,440
port is merging into single USB port on

15
00:00:49,480 --> 00:00:55,269
smartphones now if you are not using USB

16
00:00:53,440 --> 00:00:57,370
then it's likely that you are using

17
00:00:55,270 --> 00:01:01,180
bluetooth such as Bluetooth speaker

18
00:00:57,370 --> 00:01:03,339
Amazon echo and Google home and you

19
00:01:01,180 --> 00:01:06,460
might have heard of or even used Google

20
00:01:03,340 --> 00:01:08,799
pay Apple pay and Samsung pay now under

21
00:01:06,460 --> 00:01:10,750
the hood it is the NFC technology which

22
00:01:08,799 --> 00:01:13,659
supports all this Wireless payment and

23
00:01:10,750 --> 00:01:16,509
all we need is to connect with whatever

24
00:01:13,659 --> 00:01:19,329
we can find the table and have fun what

25
00:01:16,509 --> 00:01:22,229
could possibly go around right it turns

26
00:01:19,329 --> 00:01:25,240
out these preference can be malicious

27
00:01:22,229 --> 00:01:27,609
value SP attacks allows attackers to

28
00:01:25,240 --> 00:01:30,158
reprogram the device firmware to add

29
00:01:27,609 --> 00:01:32,890
extra functionality now for example a

30
00:01:30,159 --> 00:01:34,840
malicious USB flash drive can type like

31
00:01:32,890 --> 00:01:37,329
a keyboard injecting malicious case

32
00:01:34,840 --> 00:01:40,119
strokes automatically to compromise the

33
00:01:37,329 --> 00:01:42,369
target operating system or there is a

34
00:01:40,119 --> 00:01:44,770
device called USB rubber ducky which

35
00:01:42,369 --> 00:01:48,069
looks like a USB flash drive but it is

36
00:01:44,770 --> 00:01:50,319
the keyboard now even worse attackers

37
00:01:48,069 --> 00:01:52,990
can compromise our phone by sending out

38
00:01:50,319 --> 00:01:54,420
80 commands from a malicious USB

39
00:01:52,990 --> 00:01:57,639
charging station

40
00:01:54,420 --> 00:01:59,469
now what about Wireless peripherals Blue

41
00:01:57,639 --> 00:02:02,048
Boar attacks allows a malicious

42
00:01:59,469 --> 00:02:04,240
Bluetooth device to inject warmth into

43
00:02:02,049 --> 00:02:06,490
the target operating system by singing

44
00:02:04,240 --> 00:02:09,459
out specially crafted Bluetooth package

45
00:02:06,490 --> 00:02:13,030
and this vulnerability has affected 5.3

46
00:02:09,459 --> 00:02:15,459
billion devices battle booth attacks

47
00:02:13,030 --> 00:02:19,080
allows a malicious Bluetooth device to

48
00:02:15,459 --> 00:02:22,390
change ace functionality after pairing a

49
00:02:19,080 --> 00:02:26,200
recent fc0 D allows a malicious and

50
00:02:22,390 --> 00:02:28,029
device to compromise the target operon

51
00:02:26,200 --> 00:02:31,269
assistant by singing out simply

52
00:02:28,030 --> 00:02:34,000
malformed NFC packets and we have seen

53
00:02:31,270 --> 00:02:36,640
this tapping and ghost ghost typing and

54
00:02:34,000 --> 00:02:38,590
typing ghost attacks which allows a

55
00:02:36,640 --> 00:02:42,130
Malaysian FC device to compromise our

56
00:02:38,590 --> 00:02:44,050
work cell phones so now we have our

57
00:02:42,130 --> 00:02:45,880
vulnerable host machine on the Left we

58
00:02:44,050 --> 00:02:47,950
have different preference connected on

59
00:02:45,880 --> 00:02:50,829
the right they could be wireline or

60
00:02:47,950 --> 00:02:53,170
Wireless more importantly they could be

61
00:02:50,830 --> 00:02:56,670
malicious by singing out for example

62
00:02:53,170 --> 00:02:58,988
functional but unexpected USB packets

63
00:02:56,670 --> 00:03:02,170
specially crafted Bluetooth packet or

64
00:02:58,989 --> 00:03:04,000
simply malformed FC packets so the

65
00:03:02,170 --> 00:03:05,589
question is what are we going to do to

66
00:03:04,000 --> 00:03:07,989
defend against attacks from this

67
00:03:05,590 --> 00:03:10,209
malicious preference the firewall is a

68
00:03:07,989 --> 00:03:12,660
pretty material technology used by a

69
00:03:10,209 --> 00:03:14,890
networking security so our intuition is

70
00:03:12,660 --> 00:03:17,650
that's beautifier war for peripherals

71
00:03:14,890 --> 00:03:21,309
right problem solved and I conclude my

72
00:03:17,650 --> 00:03:24,040
talk it turns out it's not easy to build

73
00:03:21,310 --> 00:03:27,880
a wall either within an operating system

74
00:03:24,040 --> 00:03:29,410
or somewhere on the earth it turns out

75
00:03:27,880 --> 00:03:31,540
that a couple of challenges we need to

76
00:03:29,410 --> 00:03:34,840
fix the including prayer for diversity

77
00:03:31,540 --> 00:03:37,120
and the filtering complexity we have

78
00:03:34,840 --> 00:03:40,060
seen the previous works trying to build

79
00:03:37,120 --> 00:03:41,890
packet layer firewalls for ESB but what

80
00:03:40,060 --> 00:03:45,250
about other peripherals like Bluetooth

81
00:03:41,890 --> 00:03:47,859
NFC we also need to balance between the

82
00:03:45,250 --> 00:03:50,230
programmability and usability now for

83
00:03:47,860 --> 00:03:52,630
example we're familiar with IP tables is

84
00:03:50,230 --> 00:03:56,170
friendly to use but provides limited

85
00:03:52,630 --> 00:03:58,540
programmability another problem is how

86
00:03:56,170 --> 00:04:01,780
easy it is to exempt the existing

87
00:03:58,540 --> 00:04:04,929
existing filtering framework if new

88
00:04:01,780 --> 00:04:07,600
features are needed now with all the

89
00:04:04,930 --> 00:04:10,989
challenges in mind we proposed the linux

90
00:04:07,600 --> 00:04:13,540
EP 4 module aka lbm a generic is

91
00:04:10,989 --> 00:04:16,660
security framework for peripherals now

92
00:04:13,540 --> 00:04:19,510
lbm is prayer for agnostic it can be

93
00:04:16,660 --> 00:04:22,090
used to instantiate a peculiar firewall

94
00:04:19,510 --> 00:04:24,940
for any preffer within the kernel to

95
00:04:22,089 --> 00:04:26,650
achieve that lbm provides hooks which

96
00:04:24,940 --> 00:04:28,719
can be placed into different IO

97
00:04:26,650 --> 00:04:30,330
subsystem instead of hacking the

98
00:04:28,720 --> 00:04:33,970
existing code base directly

99
00:04:30,330 --> 00:04:35,260
lbm uses the extended PPF as the backend

100
00:04:33,970 --> 00:04:37,900
packet of filter engine

101
00:04:35,260 --> 00:04:40,150
now BPF is an internal virtual machine

102
00:04:37,900 --> 00:04:43,330
designed for packet filtering comparing

103
00:04:40,150 --> 00:04:45,969
to the classic vpf EPF architecture as a

104
00:04:43,330 --> 00:04:48,520
new call instruction allowing EPM

105
00:04:45,970 --> 00:04:51,430
program to call kernel api's via PPF

106
00:04:48,520 --> 00:04:54,190
helpers we also design a new filter

107
00:04:51,430 --> 00:04:56,980
determine specific language which

108
00:04:54,190 --> 00:04:59,320
support arithmetic operation logical

109
00:04:56,980 --> 00:05:02,800
comparison and operation precedents

110
00:04:59,320 --> 00:05:05,530
defined by say 89 mojo extensions also

111
00:05:02,800 --> 00:05:10,780
supported we have extended lbm to cover

112
00:05:05,530 --> 00:05:13,359
USB Bluetooth NFC now lbm hooks and EPP

113
00:05:10,780 --> 00:05:16,090
help tackle the proper peripheral

114
00:05:13,360 --> 00:05:18,460
diversity issue and the filter DSL and

115
00:05:16,090 --> 00:05:21,969
mulch extension tackle the filtering

116
00:05:18,460 --> 00:05:24,310
complexity now this is what lbm looks

117
00:05:21,970 --> 00:05:26,590
like in high-level the weeding the

118
00:05:24,310 --> 00:05:28,530
bottom we have lbm hooks which are

119
00:05:26,590 --> 00:05:31,450
placed into different i/o subsystem

120
00:05:28,530 --> 00:05:35,679
covering both the transmission path TX

121
00:05:31,450 --> 00:05:37,360
and the receiving path RX the elbe

122
00:05:35,680 --> 00:05:39,040
important work is structured as a

123
00:05:37,360 --> 00:05:41,560
generic security framework

124
00:05:39,040 --> 00:05:46,750
besides connecting with LPM hooks it

125
00:05:41,560 --> 00:05:48,400
runs EPP of programs as filters multi

126
00:05:46,750 --> 00:05:51,100
extensions can also be loaded into the

127
00:05:48,400 --> 00:05:53,830
lbm core framework each module then has

128
00:05:51,100 --> 00:05:58,060
a chance to inspect every packet from

129
00:05:53,830 --> 00:05:59,800
any preference within the user space we

130
00:05:58,060 --> 00:06:02,800
design a new packet of filter language

131
00:05:59,800 --> 00:06:06,640
which compiles into EP PFA instructions

132
00:06:02,800 --> 00:06:10,360
by lbm tool LPM to then lose this filter

133
00:06:06,640 --> 00:06:12,580
into the lbm core framework now hoaxes

134
00:06:10,360 --> 00:06:13,900
of themselves can be complicated and

135
00:06:12,580 --> 00:06:15,849
we're not first one thinking about

136
00:06:13,900 --> 00:06:18,370
leveraging hooks if you look at the

137
00:06:15,850 --> 00:06:21,040
classic learn excuse module cooks it has

138
00:06:18,370 --> 00:06:23,410
over 100 hooks across different places

139
00:06:21,040 --> 00:06:25,300
with the kernel new hooks are still

140
00:06:23,410 --> 00:06:26,830
being added the number and the

141
00:06:25,300 --> 00:06:29,020
complexity of this hooks impose

142
00:06:26,830 --> 00:06:31,659
challenges for verifiability now

143
00:06:29,020 --> 00:06:35,409
comparing to LSM hooks lbm has only one

144
00:06:31,660 --> 00:06:37,690
and it looks like this the substance

145
00:06:35,410 --> 00:06:40,990
parameters specified the subsystem the

146
00:06:37,690 --> 00:06:44,230
dir or Direction parameter spice fie the

147
00:06:40,990 --> 00:06:46,180
filtering path is either TX or rx the

148
00:06:44,230 --> 00:06:48,490
packet parameter points to the package

149
00:06:46,180 --> 00:06:51,099
structure defined by this substance

150
00:06:48,490 --> 00:06:53,530
the same hook will be placed into

151
00:06:51,099 --> 00:06:56,800
different IO subsystems with different

152
00:06:53,530 --> 00:06:59,969
parameters y example is their hooks we

153
00:06:56,800 --> 00:07:02,710
place the into the USB subsystem to

154
00:06:59,970 --> 00:07:04,380
achieve completely mediation we want to

155
00:07:02,710 --> 00:07:07,359
place these hooks as low as possible

156
00:07:04,380 --> 00:07:09,759
within a purple stack now this figure

157
00:07:07,360 --> 00:07:12,550
shows the USB protocol stack within the

158
00:07:09,759 --> 00:07:14,680
kernel and we place the hooks next to

159
00:07:12,550 --> 00:07:16,120
the host controller device which is

160
00:07:14,680 --> 00:07:19,680
responsible for sending and receiving

161
00:07:16,120 --> 00:07:23,020
every USB packet within the system

162
00:07:19,680 --> 00:07:24,940
similarly for Bluetooth we place lbm

163
00:07:23,020 --> 00:07:26,919
hooks next to the host controller

164
00:07:24,940 --> 00:07:29,860
interface which is the bottom part of

165
00:07:26,919 --> 00:07:32,198
the Bluetooth protocol stack now note

166
00:07:29,860 --> 00:07:34,810
that packets at the host controller

167
00:07:32,199 --> 00:07:37,090
interface layer follows simple TLV

168
00:07:34,810 --> 00:07:39,009
format rather than exposing well no

169
00:07:37,090 --> 00:07:42,130
important fields such as Bluetooth MAC

170
00:07:39,009 --> 00:07:44,530
address Blue Boar attacks also happened

171
00:07:42,130 --> 00:07:46,360
within higher layer so to make sure end

172
00:07:44,530 --> 00:07:48,460
users can write filtering rules using

173
00:07:46,360 --> 00:07:50,740
well-known protocol fields we continue

174
00:07:48,460 --> 00:07:55,210
placing lbm hooks into the outer cap

175
00:07:50,740 --> 00:07:57,909
layer now imagine you need to filter

176
00:07:55,210 --> 00:08:00,070
some USB packets from a suspicious USB

177
00:07:57,909 --> 00:08:02,770
device you can write this filter using

178
00:08:00,070 --> 00:08:04,630
PPF assembly and if you do that it's

179
00:08:02,770 --> 00:08:07,810
going to look like this with more than

180
00:08:04,630 --> 00:08:10,389
20 instructions now with the help of our

181
00:08:07,810 --> 00:08:13,870
filtered DSL all you need is simple one

182
00:08:10,389 --> 00:08:16,690
line and then our lbm 2 takes that

183
00:08:13,870 --> 00:08:18,580
expression follows the syntactic and

184
00:08:16,690 --> 00:08:20,530
semantic analysis to generate the

185
00:08:18,580 --> 00:08:23,318
abstract syntax tree now based on the

186
00:08:20,530 --> 00:08:25,119
ast and internal IR is also generated

187
00:08:23,319 --> 00:08:28,630
which is viewed upon three address code

188
00:08:25,120 --> 00:08:30,669
and finally lb m2m is EPP of

189
00:08:28,630 --> 00:08:34,120
instructions which look like the one you

190
00:08:30,669 --> 00:08:36,309
have seen now note that some protocol

191
00:08:34,120 --> 00:08:38,770
fields may require the usage of BPF

192
00:08:36,309 --> 00:08:41,708
helpers to retrieve their values from

193
00:08:38,770 --> 00:08:43,598
the kernel space nevertheless and users

194
00:08:41,708 --> 00:08:47,050
do not need to know the existence of

195
00:08:43,599 --> 00:08:49,420
this VP of helpers lbm to automatically

196
00:08:47,050 --> 00:08:52,149
translate these protocol fields into

197
00:08:49,420 --> 00:08:56,010
their corresponding PPF helpers and this

198
00:08:52,149 --> 00:08:59,620
filter is finally loaded via PFC Skol

199
00:08:56,010 --> 00:09:02,290
now as I approve of concept will will

200
00:08:59,620 --> 00:09:05,139
use LBM to implement a minimum

201
00:09:02,290 --> 00:09:07,230
peculiar firewall for FC and see how

202
00:09:05,139 --> 00:09:10,600
many lines of code we need to do that

203
00:09:07,230 --> 00:09:13,029
step one we need to place the album

204
00:09:10,600 --> 00:09:14,860
hooks into the bottom part of the FC

205
00:09:13,029 --> 00:09:17,980
protocol stack which is the AFC

206
00:09:14,860 --> 00:09:20,199
controller interface then we need to

207
00:09:17,980 --> 00:09:23,079
expose some protocol fields from the

208
00:09:20,199 --> 00:09:26,050
kernel space to the user space now here

209
00:09:23,079 --> 00:09:30,370
we write a BPF helper to expose the

210
00:09:26,050 --> 00:09:33,250
message type of an NFC packet step three

211
00:09:30,370 --> 00:09:35,319
we need to extend lbm 2 to recognize

212
00:09:33,250 --> 00:09:38,139
this new protocol and its corresponding

213
00:09:35,319 --> 00:09:40,860
protocol fuels now here we add support

214
00:09:38,139 --> 00:09:43,569
for packet length and message type

215
00:09:40,860 --> 00:09:46,000
that's it and the end users can write

216
00:09:43,569 --> 00:09:48,699
simple rules like this to drop NFC

217
00:09:46,000 --> 00:09:53,170
packets the total number of changes is

218
00:09:48,699 --> 00:09:55,209
within 100 lines to test the ability of

219
00:09:53,170 --> 00:09:58,479
lbm to defend against malformed packets

220
00:09:55,209 --> 00:10:01,119
we use fist answer which is a USB

221
00:09:58,480 --> 00:10:04,060
Hardware faster now after connecting

222
00:10:01,120 --> 00:10:06,459
face dancer with target were able to

223
00:10:04,060 --> 00:10:09,430
send out mail from USB packets to the

224
00:10:06,459 --> 00:10:12,040
target to defend against exploitation

225
00:10:09,430 --> 00:10:14,888
from malformed packets we can write a

226
00:10:12,040 --> 00:10:17,019
filter to drop this package before they

227
00:10:14,889 --> 00:10:19,209
hate the protocol stack now here we

228
00:10:17,019 --> 00:10:22,480
write a filter to drop malformed packets

229
00:10:19,209 --> 00:10:25,329
during the USB enumeration what we are

230
00:10:22,480 --> 00:10:28,420
doing here is to check all the USB

231
00:10:25,329 --> 00:10:30,579
protocol fields within the packet making

232
00:10:28,420 --> 00:10:33,040
sure that all the values are reading the

233
00:10:30,579 --> 00:10:36,010
range defined by the USB specification

234
00:10:33,040 --> 00:10:37,930
and that the packet itself has a minimum

235
00:10:36,010 --> 00:10:40,389
length of payload now after plugging

236
00:10:37,930 --> 00:10:42,849
this filter into LPM were able to defend

237
00:10:40,389 --> 00:10:45,310
against from the US from the fist answer

238
00:10:42,850 --> 00:10:47,439
we also implement a similar protocol

239
00:10:45,310 --> 00:10:51,609
stack protection for the Bluetooth HZ

240
00:10:47,439 --> 00:10:54,399
layer to defend the classic HIV based

241
00:10:51,610 --> 00:10:56,649
Val USB attacks we can write a filter to

242
00:10:54,399 --> 00:10:58,810
allow only the trusted e input device to

243
00:10:56,649 --> 00:11:01,449
inject keystrokes in within our system

244
00:10:58,810 --> 00:11:04,719
now this filter says only my keyboard

245
00:11:01,449 --> 00:11:06,819
can type within the machine or even

246
00:11:04,720 --> 00:11:09,459
better we can write a future to turn

247
00:11:06,819 --> 00:11:11,889
certain physical USB ports into charging

248
00:11:09,459 --> 00:11:14,109
only mode by dropping any USB traffic

249
00:11:11,889 --> 00:11:15,490
now this filter is particularly useful

250
00:11:14,110 --> 00:11:18,100
if you need to

251
00:11:15,490 --> 00:11:20,290
Oh laptop in public charging station or

252
00:11:18,100 --> 00:11:24,279
someone asked to charge her phone or

253
00:11:20,290 --> 00:11:28,149
your laptop not recalled that believing

254
00:11:24,279 --> 00:11:30,130
a blue boring attacks allows a malicious

255
00:11:28,149 --> 00:11:32,170
device to exploit a kernel stack

256
00:11:30,130 --> 00:11:34,779
overflow by singling out a specially

257
00:11:32,170 --> 00:11:37,300
crafted Bluetooth packet to defend

258
00:11:34,779 --> 00:11:39,700
against the blue boy attacks all we need

259
00:11:37,300 --> 00:11:41,740
is to drop that offending l2 cab

260
00:11:39,700 --> 00:11:45,370
configuration response packet we'd

261
00:11:41,740 --> 00:11:48,399
laughs be honest 66 bytes now after our

262
00:11:45,370 --> 00:11:50,529
paper was accepted bleeding beat attacks

263
00:11:48,399 --> 00:11:53,410
were also disclosed there were similar

264
00:11:50,529 --> 00:11:58,089
attacks a like blue boring but targeting

265
00:11:53,410 --> 00:12:00,790
ble stack by disabling ble connections

266
00:11:58,089 --> 00:12:03,220
using this filter we provide a temporary

267
00:12:00,790 --> 00:12:05,469
workaround to defend against bleeding

268
00:12:03,220 --> 00:12:08,320
beat attacks while maintaining the

269
00:12:05,470 --> 00:12:10,720
classic Bluetooth connections now notice

270
00:12:08,320 --> 00:12:13,029
that both blue boring and bleeding beat

271
00:12:10,720 --> 00:12:16,270
are vulnerabilities within the Bluetooth

272
00:12:13,029 --> 00:12:18,850
software stack and LBM provide us a way

273
00:12:16,270 --> 00:12:20,230
to dynamically patch the kernel without

274
00:12:18,850 --> 00:12:23,529
waiting for kernel patching and

275
00:12:20,230 --> 00:12:26,470
rebooting to understand that we had

276
00:12:23,529 --> 00:12:28,380
introduced by lbm we use foul bench to

277
00:12:26,470 --> 00:12:32,529
measure the overhead of i/o operations

278
00:12:28,380 --> 00:12:35,860
on external USB 3.0 hard disk with main

279
00:12:32,529 --> 00:12:39,670
file size 128 kilobytes and 1 megabyte

280
00:12:35,860 --> 00:12:42,430
which roughly generate 1 gig and 10 gig

281
00:12:39,670 --> 00:12:44,800
workload we compare among different

282
00:12:42,430 --> 00:12:47,709
kernel configurations including the

283
00:12:44,800 --> 00:12:49,750
stock kernel the lbm kernel and LB MJ

284
00:12:47,709 --> 00:12:53,529
kernel which enables just-in-time

285
00:12:49,750 --> 00:12:56,380
compilation for EBP instructions now

286
00:12:53,529 --> 00:12:59,079
regardless of the main file size both lb

287
00:12:56,380 --> 00:13:01,060
m and L BMG have demonstrated a minimum

288
00:12:59,079 --> 00:13:03,430
overhead compared to the stock kernel

289
00:13:01,060 --> 00:13:07,149
and in the worst case that we had is

290
00:13:03,430 --> 00:13:09,160
still less than 1.8 percent to

291
00:13:07,149 --> 00:13:12,940
understand the scalability of lb m

292
00:13:09,160 --> 00:13:14,920
filters we load 110 and 100 filters into

293
00:13:12,940 --> 00:13:17,860
lb m and measure the overhead of

294
00:13:14,920 --> 00:13:19,199
receiving tank a package using a USB

295
00:13:17,860 --> 00:13:21,850
Wi-Fi adapter

296
00:13:19,200 --> 00:13:24,550
now the general overhead increases as

297
00:13:21,850 --> 00:13:26,650
the number of filters increases and LB

298
00:13:24,550 --> 00:13:28,990
MJ it has better performance than l BM

299
00:13:26,650 --> 00:13:31,990
thanks to the acceleration from JIT

300
00:13:28,990 --> 00:13:34,360
nevertheless in the worst case per

301
00:13:31,990 --> 00:13:36,630
packet per filter filtering is still

302
00:13:34,360 --> 00:13:39,520
within one or a second

303
00:13:36,630 --> 00:13:42,790
now if other security frameworks within

304
00:13:39,520 --> 00:13:45,640
Colonel lbm is not perfect right now as

305
00:13:42,790 --> 00:13:48,250
the lbm does not allow BPA memory rights

306
00:13:45,640 --> 00:13:50,220
for security considerations now in the

307
00:13:48,250 --> 00:13:53,170
future we probably will enable that

308
00:13:50,220 --> 00:13:55,540
allowing modifying the packet in the fly

309
00:13:53,170 --> 00:13:57,780
for example redirecting a suspicious

310
00:13:55,540 --> 00:14:01,810
package into a honeypot

311
00:13:57,780 --> 00:14:05,050
unlike other PPF programs lbm does not

312
00:14:01,810 --> 00:14:07,660
support a LVM we argue that our filter

313
00:14:05,050 --> 00:14:10,750
DSL is more friendly than typical c

314
00:14:07,660 --> 00:14:12,160
programming the Albion filters are

315
00:14:10,750 --> 00:14:16,000
essentially stateless

316
00:14:12,160 --> 00:14:18,040
however BPF maps can be used to store

317
00:14:16,000 --> 00:14:20,440
this state for information for example

318
00:14:18,040 --> 00:14:23,050
counting how many packets we have

319
00:14:20,440 --> 00:14:25,420
received so far and some filters can

320
00:14:23,050 --> 00:14:27,969
also have protocol fields which are

321
00:14:25,420 --> 00:14:31,750
essentially stateful for example l to

322
00:14:27,970 --> 00:14:34,990
cap connection field now i OBM supports

323
00:14:31,750 --> 00:14:37,870
USB Bluetooth NFC but what about other

324
00:14:34,990 --> 00:14:40,750
protocols such as HDMI discipling port

325
00:14:37,870 --> 00:14:43,020
and even found a boat now in theory as

326
00:14:40,750 --> 00:14:45,880
long as a protocol has the

327
00:14:43,020 --> 00:14:48,880
conceptualization of packet lbm is a

328
00:14:45,880 --> 00:14:50,710
boater supported now both hdmi and the

329
00:14:48,880 --> 00:14:53,320
discipline port have the concept of

330
00:14:50,710 --> 00:14:55,210
packet we're not sure about thunder boat

331
00:14:53,320 --> 00:14:58,900
because it's proprietary and a closed

332
00:14:55,210 --> 00:15:01,780
source at this moment so inclusion we

333
00:14:58,900 --> 00:15:04,150
design and implement lbm a generic

334
00:15:01,780 --> 00:15:07,600
script framework for peripherals we have

335
00:15:04,150 --> 00:15:09,610
extended lbm to cover USB Bluetooth NFC

336
00:15:07,600 --> 00:15:11,830
and our evaluation shows these

337
00:15:09,610 --> 00:15:13,750
effectiveness against different attacks

338
00:15:11,830 --> 00:15:15,330
from malicious peripherals and a minimum

339
00:15:13,750 --> 00:15:18,340
warhead comparing to the stalker

340
00:15:15,330 --> 00:15:24,990
thank you I'm able to take questions now

341
00:15:18,340 --> 00:15:29,340
[Applause]

342
00:15:24,990 --> 00:15:32,710
okay questions Peter diamond yessir I

343
00:15:29,340 --> 00:15:34,780
your original title was withheld for a

344
00:15:32,710 --> 00:15:37,930
responsible disclosure you didn't talk

345
00:15:34,780 --> 00:15:41,620
about that at all in the in the talk at

346
00:15:37,930 --> 00:15:45,219
all the title in the program seems to be

347
00:15:41,620 --> 00:15:48,400
the wrong title so I'm a little

348
00:15:45,220 --> 00:15:50,650
interested in what's really going on

349
00:15:48,400 --> 00:15:53,560
here from the point of view of the

350
00:15:50,650 --> 00:15:56,770
responsible disclosure the other comment

351
00:15:53,560 --> 00:16:01,209
is have you looked at our thunderclap

352
00:15:56,770 --> 00:16:03,090
paper at all men DSS all right so there

353
00:16:01,210 --> 00:16:06,100
are two questions the first question is

354
00:16:03,090 --> 00:16:09,130
because one of the world funding source

355
00:16:06,100 --> 00:16:12,190
required us to submit this paper before

356
00:16:09,130 --> 00:16:15,189
disclosure and somehow like we screwed a

357
00:16:12,190 --> 00:16:17,950
little bit so we're trying we're still

358
00:16:15,190 --> 00:16:20,980
working on it so that is the disclosure

359
00:16:17,950 --> 00:16:25,060
thing second question yes

360
00:16:20,980 --> 00:16:28,510
so lbm is not designed for defending

361
00:16:25,060 --> 00:16:31,089
against DMA attacks because I assume we

362
00:16:28,510 --> 00:16:35,319
probably need Iowa my view although I

363
00:16:31,090 --> 00:16:37,120
think thunderclap paper tells that there

364
00:16:35,320 --> 00:16:39,370
could be something wrong with in MMA you

365
00:16:37,120 --> 00:16:41,770
especially on the configuration side but

366
00:16:39,370 --> 00:16:45,460
in general I think to defend against DMA

367
00:16:41,770 --> 00:16:47,260
attacks and iommu is the basic unit and

368
00:16:45,460 --> 00:16:51,490
we probably can build something upon

369
00:16:47,260 --> 00:16:53,860
that thank you hi I'm Paul culture I'm

370
00:16:51,490 --> 00:16:55,630
independent super interesting work had a

371
00:16:53,860 --> 00:16:57,820
question which is have you thought about

372
00:16:55,630 --> 00:17:00,790
what the most malicious things somebody

373
00:16:57,820 --> 00:17:01,780
can do with lbm scripts and particularly

374
00:17:00,790 --> 00:17:03,610
in the cases where they're being

375
00:17:01,780 --> 00:17:06,220
submitted from user mode thank you

376
00:17:03,610 --> 00:17:08,079
okay cool I haven't thought about that

377
00:17:06,220 --> 00:17:10,240
because you know a threat model the

378
00:17:08,079 --> 00:17:12,010
whole kernel is trusted and apparently

379
00:17:10,240 --> 00:17:14,440
you need rude permission to some meet

380
00:17:12,010 --> 00:17:16,780
some EP a-- programs from the user space

381
00:17:14,440 --> 00:17:19,780
to the kernel space so if the user is

382
00:17:16,780 --> 00:17:23,649
malicious yeah and basically he could do

383
00:17:19,780 --> 00:17:25,149
a lot of stuff so I haven't thought

384
00:17:23,650 --> 00:17:29,140
about that really good question thank

385
00:17:25,150 --> 00:17:31,000
you hi Alex Olynyk from Boston

386
00:17:29,140 --> 00:17:33,310
University one of the things you showed

387
00:17:31,000 --> 00:17:34,600
is filtering based on the product ID and

388
00:17:33,310 --> 00:17:35,360
the vendor ID and have you thought about

389
00:17:34,600 --> 00:17:37,639
how difficult

390
00:17:35,360 --> 00:17:39,110
it would be for an attacker who knows

391
00:17:37,640 --> 00:17:42,350
that you have these filters installed on

392
00:17:39,110 --> 00:17:45,229
the system to to modify their attack in

393
00:17:42,350 --> 00:17:48,139
order to bypass your rules for example

394
00:17:45,230 --> 00:17:48,919
by spoofing the IDS yeah this is really

395
00:17:48,140 --> 00:17:50,720
good question

396
00:17:48,919 --> 00:17:53,510
so apparently attackers can reprogram

397
00:17:50,720 --> 00:17:54,740
the firmware to bypass these like vendor

398
00:17:53,510 --> 00:17:57,169
ID PID based

399
00:17:54,740 --> 00:17:59,029
checking that's the reason why we need

400
00:17:57,169 --> 00:18:01,940
the USP filter we also have another

401
00:17:59,029 --> 00:18:03,470
field called a plugging time which is

402
00:18:01,940 --> 00:18:05,600
used to defend against these kind of

403
00:18:03,470 --> 00:18:07,340
attacks and in the worst case you could

404
00:18:05,600 --> 00:18:08,990
leave reach the physical USB port

405
00:18:07,340 --> 00:18:11,240
information to build your filtering

406
00:18:08,990 --> 00:18:14,450
rules seeing that anything plug into

407
00:18:11,240 --> 00:18:17,510
this USB port have to be non keyboard or

408
00:18:14,450 --> 00:18:19,580
something like that but yes attackers

409
00:18:17,510 --> 00:18:21,590
can reprogram the firmware to to bypass

410
00:18:19,580 --> 00:18:23,629
some of the rules it always depends on

411
00:18:21,590 --> 00:18:25,610
how you construct these rules to defend

412
00:18:23,630 --> 00:18:28,750
against these attacks thank you thank

413
00:18:25,610 --> 00:18:32,240
you I also have a question actually sure

414
00:18:28,750 --> 00:18:33,679
so I wondered USB and Bluetooth and all

415
00:18:32,240 --> 00:18:36,919
these other protocols are massively

416
00:18:33,679 --> 00:18:39,559
complex and they have a massive amount

417
00:18:36,919 --> 00:18:41,450
of state a little bit and you mentioned

418
00:18:39,559 --> 00:18:44,539
in one of the slides under was a

419
00:18:41,450 --> 00:18:47,299
Bluetooth stack overview that you had

420
00:18:44,539 --> 00:18:49,879
hooks at different levels of this thing

421
00:18:47,299 --> 00:18:52,399
yeah yeah did you look at the complexity

422
00:18:49,880 --> 00:18:55,429
of these protocols and what you could do

423
00:18:52,399 --> 00:18:57,918
to make this easier to manage or handle

424
00:18:55,429 --> 00:19:00,649
because there will be limitations yeah

425
00:18:57,919 --> 00:19:02,510
yeah I mean fairly speaking comparing to

426
00:19:00,649 --> 00:19:05,719
Bluetooth USB sees kind of like

427
00:19:02,510 --> 00:19:07,789
reasonable Bluetooth is super crazy if

428
00:19:05,720 --> 00:19:10,789
you look at a Bluetooth 5.0 spec it has

429
00:19:07,789 --> 00:19:13,510
almost 3000 pages that does not include

430
00:19:10,789 --> 00:19:17,740
all those high-level application layers

431
00:19:13,510 --> 00:19:20,720
if we take Bluetooth as an example our

432
00:19:17,740 --> 00:19:22,789
original design plan was to put these

433
00:19:20,720 --> 00:19:25,610
hooks as low as possible but then we

434
00:19:22,789 --> 00:19:28,039
realize any users are not familiar with

435
00:19:25,610 --> 00:19:30,500
those like fields within this layer

436
00:19:28,039 --> 00:19:32,149
that's reason why we tried to a place

437
00:19:30,500 --> 00:19:34,549
who've seen the higher higher level

438
00:19:32,149 --> 00:19:37,219
layers but again if some attacks happens

439
00:19:34,549 --> 00:19:39,620
even with the higher layer such as SDP

440
00:19:37,220 --> 00:19:42,950
or some other things which means either

441
00:19:39,620 --> 00:19:45,080
we need to pass the application level of

442
00:19:42,950 --> 00:19:47,360
the application level protocol and lower

443
00:19:45,080 --> 00:19:48,179
layers or we need to place hooks into

444
00:19:47,360 --> 00:19:50,699
the higher layer

445
00:19:48,180 --> 00:19:54,000
so I think that could be a trade off

446
00:19:50,700 --> 00:19:56,340
here and for us bu focused mostly on the

447
00:19:54,000 --> 00:19:57,780
USB core on just a message yes signaling

448
00:19:56,340 --> 00:19:59,220
or did you also look at individual

449
00:19:57,780 --> 00:20:01,620
drivers and protocols that are running

450
00:19:59,220 --> 00:20:03,230
on top we're focusing on us before okay

451
00:20:01,620 --> 00:20:07,919
cool

452
00:20:03,230 --> 00:20:09,170
any other questions okay let's thank you

453
00:20:07,920 --> 00:20:13,229
Steve thank you

454
00:20:09,170 --> 00:20:13,229
[Applause]

