1
00:00:09,620 --> 00:00:15,090
thank you so much for that introduction

2
00:00:13,260 --> 00:00:16,149
my name is Marcela Hastings and this is

3
00:00:15,090 --> 00:00:17,320
an S okay

4
00:00:16,149 --> 00:00:21,490
so I'm gonna be talking about the

5
00:00:17,320 --> 00:00:23,110
results of our survey so the tool we

6
00:00:21,490 --> 00:00:25,720
were looking at was secure multi-party

7
00:00:23,110 --> 00:00:27,730
computation this is a cryptographic tool

8
00:00:25,720 --> 00:00:29,799
that allows a group of mutually

9
00:00:27,730 --> 00:00:31,810
distrustful parties to compute an

10
00:00:29,800 --> 00:00:34,150
arbitrary function on their joint inputs

11
00:00:31,810 --> 00:00:37,629
without revealing anything beyond the

12
00:00:34,150 --> 00:00:39,460
output of the computation so the most

13
00:00:37,629 --> 00:00:42,040
famous example of this in practice is

14
00:00:39,460 --> 00:00:44,290
the Danish beat auction in this setting

15
00:00:42,040 --> 00:00:46,690
we have sellers who are Danish beat

16
00:00:44,290 --> 00:00:49,780
farmers and a single buy or the only

17
00:00:46,690 --> 00:00:51,369
beat processing facility in Denmark the

18
00:00:49,780 --> 00:00:52,629
sellers have prices at which they're

19
00:00:51,369 --> 00:00:54,220
willing to sell their beats and the

20
00:00:52,629 --> 00:00:59,349
buyer wants to find a market clearing

21
00:00:54,220 --> 00:01:00,879
price but the sellers might not want to

22
00:00:59,350 --> 00:01:02,830
reveal their bids because it could

23
00:01:00,879 --> 00:01:04,539
reveal information about their

24
00:01:02,830 --> 00:01:07,330
businesses and their farms especially

25
00:01:04,540 --> 00:01:09,640
over several years so they use secure

26
00:01:07,330 --> 00:01:11,048
multi-party computation to find an

27
00:01:09,640 --> 00:01:12,580
appropriate market clearing price

28
00:01:11,049 --> 00:01:17,380
without revealing the value of their

29
00:01:12,580 --> 00:01:19,030
bids another example is a collaboration

30
00:01:17,380 --> 00:01:21,130
with the Boston Women's workforce

31
00:01:19,030 --> 00:01:24,520
Council which is studying the gender and

32
00:01:21,130 --> 00:01:27,490
racial wage gap companies might not wish

33
00:01:24,520 --> 00:01:29,949
to reveal or might be legally prevented

34
00:01:27,490 --> 00:01:32,080
from revealing financial information

35
00:01:29,950 --> 00:01:33,820
about their employees but by using

36
00:01:32,080 --> 00:01:35,679
secure multi-party computation they're

37
00:01:33,820 --> 00:01:38,289
able to compute the relevant statistics

38
00:01:35,680 --> 00:01:41,290
and analytics without giving up that

39
00:01:38,290 --> 00:01:43,480
data now all of this is to say that

40
00:01:41,290 --> 00:01:45,400
secure multi-party computation is a tool

41
00:01:43,480 --> 00:01:48,280
that's efficient and practical enough to

42
00:01:45,400 --> 00:01:50,229
be used in real situations however many

43
00:01:48,280 --> 00:01:51,790
of the practical examples we've seen in

44
00:01:50,229 --> 00:01:53,830
the past have required a team of

45
00:01:51,790 --> 00:01:56,320
cryptographers to implement a

46
00:01:53,830 --> 00:01:58,870
special-purpose MPC engine for that

47
00:01:56,320 --> 00:02:01,779
specific use case and if we want to see

48
00:01:58,870 --> 00:02:03,250
NPC it have more widespread adoption we

49
00:02:01,780 --> 00:02:08,169
need tools that are usable by the

50
00:02:03,250 --> 00:02:10,239
layperson so although algorithms for MPC

51
00:02:08,169 --> 00:02:11,920
have been around since the 1980s they

52
00:02:10,239 --> 00:02:13,510
were assumed to be too inefficient for

53
00:02:11,920 --> 00:02:16,809
practical use until the fair play

54
00:02:13,510 --> 00:02:18,670
compiler was presented in 2004 this was

55
00:02:16,810 --> 00:02:20,440
the first general-purpose framework

56
00:02:18,670 --> 00:02:23,920
which could take an arbitrary function

57
00:02:20,440 --> 00:02:26,230
and execute MPC on it and it started the

58
00:02:23,920 --> 00:02:28,399
beginning of a huge and fruitful field

59
00:02:26,230 --> 00:02:30,590
performance improvements over the

60
00:02:28,400 --> 00:02:32,870
decades rapidly advanced the state of

61
00:02:30,590 --> 00:02:36,890
the art both algorithmic and in the

62
00:02:32,870 --> 00:02:38,629
implementations and the number of end to

63
00:02:36,890 --> 00:02:43,059
end frameworks exploded in the past

64
00:02:38,629 --> 00:02:45,439
decade so in this work we're looking at

65
00:02:43,060 --> 00:02:48,590
general-purpose end to end frameworks

66
00:02:45,439 --> 00:02:49,700
and so end end frameworks looks

67
00:02:48,590 --> 00:02:52,250
something like this

68
00:02:49,700 --> 00:02:54,439
they have two phases a compiler and a

69
00:02:52,250 --> 00:02:56,599
runtime this is because most MPC

70
00:02:54,439 --> 00:02:58,220
algorithms operate on only a limited set

71
00:02:56,599 --> 00:03:00,500
of primitives like addition and

72
00:02:58,220 --> 00:03:01,879
multiplication Mata Prime and it's hard

73
00:03:00,500 --> 00:03:04,099
for a developer to reason about

74
00:03:01,879 --> 00:03:06,230
interesting computations using that very

75
00:03:04,099 --> 00:03:07,909
limited model so we looked for

76
00:03:06,230 --> 00:03:11,030
frameworks that have a compiler which

77
00:03:07,909 --> 00:03:12,679
takes a function description in a

78
00:03:11,030 --> 00:03:14,750
high-level language and converts it into

79
00:03:12,680 --> 00:03:17,359
a representation that can be executed by

80
00:03:14,750 --> 00:03:20,239
the algorithm then the runtime phases

81
00:03:17,359 --> 00:03:21,859
the actual execution of the protocol it

82
00:03:20,239 --> 00:03:25,010
is run simultaneously by multiple

83
00:03:21,859 --> 00:03:27,049
parties and who each take the output of

84
00:03:25,010 --> 00:03:29,659
the compiler and the private inputs of

85
00:03:27,049 --> 00:03:32,090
each party and compute the function

86
00:03:29,659 --> 00:03:33,888
output and of course the architecture

87
00:03:32,090 --> 00:03:35,180
varies a lot based on different

88
00:03:33,889 --> 00:03:38,209
frameworks but they're all taking this

89
00:03:35,180 --> 00:03:41,900
general shape so in this survey we

90
00:03:38,209 --> 00:03:44,329
wanted to ask some questions about where

91
00:03:41,900 --> 00:03:46,250
we are where the frameworks are you know

92
00:03:44,329 --> 00:03:47,750
who can use them are they ready for real

93
00:03:46,250 --> 00:03:50,959
computations can they express

94
00:03:47,750 --> 00:03:54,470
interesting functions and you know can

95
00:03:50,959 --> 00:03:55,849
they be used for real situations in

96
00:03:54,470 --> 00:03:58,250
order to answer these questions we

97
00:03:55,849 --> 00:04:00,319
surveyed nine frameworks and to end

98
00:03:58,250 --> 00:04:02,750
frameworks and to circuit only compilers

99
00:04:00,319 --> 00:04:04,190
we recorded different features of them

100
00:04:02,750 --> 00:04:08,209
based on the protocol that they

101
00:04:04,190 --> 00:04:09,829
implement the data types and operations

102
00:04:08,209 --> 00:04:11,930
that they support and other details of

103
00:04:09,829 --> 00:04:14,319
the implementations and we evaluated

104
00:04:11,930 --> 00:04:17,418
them on a variety of usability criteria

105
00:04:14,319 --> 00:04:19,339
in order to collect all this data we

106
00:04:17,418 --> 00:04:23,210
implemented three sample programs in

107
00:04:19,339 --> 00:04:25,549
every framework so we collected our

108
00:04:23,210 --> 00:04:28,280
sample programs plus complete build

109
00:04:25,550 --> 00:04:30,530
environments for every framework that we

110
00:04:28,280 --> 00:04:32,599
used and put them into an open source

111
00:04:30,530 --> 00:04:34,580
framework repository this also has

112
00:04:32,599 --> 00:04:36,740
additional documentation based on our

113
00:04:34,580 --> 00:04:39,500
experiences using the framework we

114
00:04:36,740 --> 00:04:42,199
estimate this repository took about 750

115
00:04:39,500 --> 00:04:44,660
person hours to produce

116
00:04:42,199 --> 00:04:46,550
and it is open source and we're actively

117
00:04:44,660 --> 00:04:48,530
maintaining it so I encourage anyone to

118
00:04:46,550 --> 00:04:50,000
check it out now I'd like to talk a

119
00:04:48,530 --> 00:04:52,698
little bit about what we found after

120
00:04:50,000 --> 00:04:55,520
doing all this work over almost

121
00:04:52,699 --> 00:04:56,960
frameworks are in good shape we have a

122
00:04:55,520 --> 00:04:58,460
diverse set of threat models and

123
00:04:56,960 --> 00:05:00,500
protocols that they implement so

124
00:04:58,460 --> 00:05:02,448
depending on a year use case there are

125
00:05:00,500 --> 00:05:04,460
different options we are able to

126
00:05:02,449 --> 00:05:06,740
implement our sample programs and almost

127
00:05:04,460 --> 00:05:08,630
every framework which means that the

128
00:05:06,740 --> 00:05:11,780
high level languages are expressive for

129
00:05:08,630 --> 00:05:13,550
many situations and overall most of them

130
00:05:11,780 --> 00:05:16,190
were open source and compilable and

131
00:05:13,550 --> 00:05:18,680
usable however we did find two major

132
00:05:16,190 --> 00:05:20,570
areas for improvement one is that there

133
00:05:18,680 --> 00:05:22,910
were significant engineering limitations

134
00:05:20,570 --> 00:05:25,009
for example complicated build systems

135
00:05:22,910 --> 00:05:27,289
and the other is significant barriers to

136
00:05:25,009 --> 00:05:30,710
usability which are mostly rooted in a

137
00:05:27,289 --> 00:05:32,509
lack of documentation so before I go

138
00:05:30,710 --> 00:05:35,840
into those issues I'd like to give you a

139
00:05:32,509 --> 00:05:37,280
higher level picture of what we found so

140
00:05:35,840 --> 00:05:39,469
these are the nine frameworks we looked

141
00:05:37,280 --> 00:05:41,179
at and the two circuit compilers at the

142
00:05:39,470 --> 00:05:43,099
bottom you can see the number of parties

143
00:05:41,180 --> 00:05:44,599
they support in the threat model we have

144
00:05:43,099 --> 00:05:47,810
two threat models here in the semi

145
00:05:44,599 --> 00:05:49,550
honest model and adversary is going to

146
00:05:47,810 --> 00:05:51,349
execute the protocol correctly but we'll

147
00:05:49,550 --> 00:05:54,020
try to learn something about other

148
00:05:51,349 --> 00:05:56,840
parties in put in the malicious model a

149
00:05:54,020 --> 00:06:00,500
party the adversary may not stick to the

150
00:05:56,840 --> 00:06:05,330
protocol and will try to induce an

151
00:06:00,500 --> 00:06:07,009
incorrect output we also created a loose

152
00:06:05,330 --> 00:06:08,150
taxonomy of three different protocol

153
00:06:07,009 --> 00:06:10,370
families which I'm going to talk a

154
00:06:08,150 --> 00:06:12,198
little bit about the first is garbled

155
00:06:10,370 --> 00:06:14,449
circuit protocols these are first

156
00:06:12,199 --> 00:06:16,490
introduced in the 1980s by Andrew Yau

157
00:06:14,449 --> 00:06:18,349
and work have been essentially

158
00:06:16,490 --> 00:06:20,389
continuously developed since then

159
00:06:18,349 --> 00:06:22,250
well theorists have produced a wide

160
00:06:20,389 --> 00:06:26,120
variety of settings in the garbled

161
00:06:22,250 --> 00:06:28,099
circuit model we found in practice that

162
00:06:26,120 --> 00:06:31,009
they're almost all implemented as semi

163
00:06:28,099 --> 00:06:33,289
honest two-party protocols where one

164
00:06:31,009 --> 00:06:34,969
party garbles are encrypts the circuit

165
00:06:33,289 --> 00:06:36,949
and sends it to the other party who

166
00:06:34,969 --> 00:06:39,020
evaluates it based on their input and

167
00:06:36,949 --> 00:06:42,680
these typically represent functions

168
00:06:39,020 --> 00:06:44,719
using boolean circuits the second type

169
00:06:42,680 --> 00:06:46,699
encompasses a wide variety of protocols

170
00:06:44,719 --> 00:06:51,919
which we call multi-party circuit based

171
00:06:46,699 --> 00:06:53,449
protocols now these are protocols that

172
00:06:51,919 --> 00:06:55,680
have two things in common the first is

173
00:06:53,449 --> 00:06:57,870
that they implement they represent

174
00:06:55,680 --> 00:07:00,090
functions using a circuit either

175
00:06:57,870 --> 00:07:01,560
arithmetic or boolean and the second is

176
00:07:00,090 --> 00:07:04,799
that data is represented as linear

177
00:07:01,560 --> 00:07:06,600
secret shares so the linear secret

178
00:07:04,800 --> 00:07:08,340
sharing means that these protocols can

179
00:07:06,600 --> 00:07:11,310
typically support an arbitrary number of

180
00:07:08,340 --> 00:07:13,560
parties where the parties work together

181
00:07:11,310 --> 00:07:15,180
going gate through gate gate by gate

182
00:07:13,560 --> 00:07:16,919
through the circuit to convert secret

183
00:07:15,180 --> 00:07:19,320
shows of the inputs to secret shows of

184
00:07:16,919 --> 00:07:21,479
the outputs however within this model

185
00:07:19,320 --> 00:07:23,340
the way that they do this conversion can

186
00:07:21,479 --> 00:07:24,719
be executed in different ways may be

187
00:07:23,340 --> 00:07:28,258
information theoretic or

188
00:07:24,720 --> 00:07:31,169
cryptographically secure models now we

189
00:07:28,259 --> 00:07:34,520
expected these two protocol families to

190
00:07:31,169 --> 00:07:39,150
cover the majority of implementations

191
00:07:34,520 --> 00:07:41,940
however so in theory most theoreticians

192
00:07:39,150 --> 00:07:44,370
define MPC protocols again on a very

193
00:07:41,940 --> 00:07:47,009
limited set of functions of operations

194
00:07:44,370 --> 00:07:53,580
either addition and multiplication mod

195
00:07:47,009 --> 00:07:55,860
an integer or bitwise and an XOR however

196
00:07:53,580 --> 00:07:57,990
in practice and these are universal

197
00:07:55,860 --> 00:08:00,599
representations so you can express any

198
00:07:57,990 --> 00:08:02,310
function using that however in practice

199
00:08:00,599 --> 00:08:04,349
you can often define optimized sub

200
00:08:02,310 --> 00:08:06,479
protocols for common functions that you

201
00:08:04,349 --> 00:08:09,449
have like division or comparison in an

202
00:08:06,479 --> 00:08:10,800
arithmetic model that are more efficient

203
00:08:09,449 --> 00:08:13,830
than reducing all the way that these

204
00:08:10,800 --> 00:08:15,599
very low level primitives so we found

205
00:08:13,830 --> 00:08:18,150
three protocols that improve that

206
00:08:15,599 --> 00:08:20,610
implement certain sub protocols and we

207
00:08:18,150 --> 00:08:22,080
call these hybrid protocols and then at

208
00:08:20,610 --> 00:08:26,610
the bottom you can see our two circuit

209
00:08:22,080 --> 00:08:28,440
compilers now one major thing that

210
00:08:26,610 --> 00:08:30,330
people need to consider when they're

211
00:08:28,440 --> 00:08:33,719
choosing an appropriate framework for

212
00:08:30,330 --> 00:08:35,958
their use case is the level of

213
00:08:33,719 --> 00:08:38,760
abstraction of the high level language

214
00:08:35,958 --> 00:08:41,010
so we saw a variety of these and I want

215
00:08:38,760 --> 00:08:42,450
to walk through a couple of them the

216
00:08:41,010 --> 00:08:43,799
example we're gonna use as one of our

217
00:08:42,450 --> 00:08:45,990
sample programs which is the inner

218
00:08:43,799 --> 00:08:50,160
product it takes the sum of the pairwise

219
00:08:45,990 --> 00:08:51,899
product of two vectors so frigate is a

220
00:08:50,160 --> 00:08:54,390
circuit compiler and it uses a pretty

221
00:08:51,899 --> 00:08:56,310
traditional C style abstraction you can

222
00:08:54,390 --> 00:08:58,620
see a implementation of the inner

223
00:08:56,310 --> 00:09:00,569
product here you take a result and then

224
00:08:58,620 --> 00:09:02,579
you loop over your vectors for each

225
00:09:00,570 --> 00:09:04,829
element in your vector you multiply them

226
00:09:02,579 --> 00:09:06,209
together and add them to your sum now

227
00:09:04,829 --> 00:09:07,739
this is pretty straightforward and makes

228
00:09:06,209 --> 00:09:08,430
a lot of sense however if you're

229
00:09:07,740 --> 00:09:10,830
familiar

230
00:09:08,430 --> 00:09:13,229
MPC you might recognize that in a linear

231
00:09:10,830 --> 00:09:16,230
secret sharing based model you can

232
00:09:13,230 --> 00:09:19,290
paralyze all the multiplications into a

233
00:09:16,230 --> 00:09:21,810
single round of communication so if you

234
00:09:19,290 --> 00:09:23,490
want to have that optimization and you

235
00:09:21,810 --> 00:09:25,410
might use something like pico pico

236
00:09:23,490 --> 00:09:28,560
recognize that you can do this

237
00:09:25,410 --> 00:09:30,660
optimized multiplication step and so

238
00:09:28,560 --> 00:09:32,760
they implement a custom primitive this

239
00:09:30,660 --> 00:09:35,250
is one of our hybrid languages for the

240
00:09:32,760 --> 00:09:37,140
inter product operation and you can see

241
00:09:35,250 --> 00:09:40,080
you just use this very simple infix

242
00:09:37,140 --> 00:09:43,230
custom infix operator to execute an

243
00:09:40,080 --> 00:09:44,760
inner product on any size vectors now

244
00:09:43,230 --> 00:09:46,260
this is really good if you're not super

245
00:09:44,760 --> 00:09:47,580
familiar with the cryptography and you

246
00:09:46,260 --> 00:09:49,260
don't really care what's happening under

247
00:09:47,580 --> 00:09:50,700
the hood however if you are a

248
00:09:49,260 --> 00:09:53,520
photographer and you're working on

249
00:09:50,700 --> 00:09:55,020
perhaps a more complicated function than

250
00:09:53,520 --> 00:09:57,390
the inner product you might want to have

251
00:09:55,020 --> 00:09:59,970
more control over exactly the circuit

252
00:09:57,390 --> 00:10:01,650
that you're gonna have produced in that

253
00:09:59,970 --> 00:10:05,760
case you might prefer a framework like

254
00:10:01,650 --> 00:10:07,650
ABY ABY is implemented as a is an

255
00:10:05,760 --> 00:10:10,890
end-to-end framework it's implemented as

256
00:10:07,650 --> 00:10:13,079
a library in C so you can see we have a

257
00:10:10,890 --> 00:10:16,920
share type that holds our private data

258
00:10:13,080 --> 00:10:19,350
we put a multiplication gate in and ABY

259
00:10:16,920 --> 00:10:21,120
does implement these parallel parallel

260
00:10:19,350 --> 00:10:23,700
eyes multiplications so you need a

261
00:10:21,120 --> 00:10:25,350
single multiplication gate to do pair

262
00:10:23,700 --> 00:10:27,540
wise multiplication across your whole

263
00:10:25,350 --> 00:10:29,760
vectors and then you sort of break apart

264
00:10:27,540 --> 00:10:32,219
your vector representation to add up the

265
00:10:29,760 --> 00:10:34,290
individual elements now this gives you a

266
00:10:32,220 --> 00:10:36,120
lot more freedom to do exactly the thing

267
00:10:34,290 --> 00:10:37,949
that you want to do but if you have less

268
00:10:36,120 --> 00:10:40,680
cryptographic familiarity you might not

269
00:10:37,950 --> 00:10:42,600
want this much power so that's sort of

270
00:10:40,680 --> 00:10:46,020
the range of front end high-level

271
00:10:42,600 --> 00:10:47,100
languages that we saw the next thing I

272
00:10:46,020 --> 00:10:50,670
want to talk about some of the

273
00:10:47,100 --> 00:10:52,740
limitations as I mentioned software

274
00:10:50,670 --> 00:10:53,969
engineering was a major issue you have

275
00:10:52,740 --> 00:10:55,980
to keep in mind that most of these

276
00:10:53,970 --> 00:10:57,630
frameworks were developed in academic

277
00:10:55,980 --> 00:10:59,640
settings and are therefore subject to

278
00:10:57,630 --> 00:11:04,110
the engineering constraints of such a

279
00:10:59,640 --> 00:11:06,540
setting so keep that in mind as I go

280
00:11:04,110 --> 00:11:08,970
through the next couple of things one

281
00:11:06,540 --> 00:11:10,680
major pain point was the build systems

282
00:11:08,970 --> 00:11:14,100
which tended to be extremely complicated

283
00:11:10,680 --> 00:11:16,140
you often had to compile a specific open

284
00:11:14,100 --> 00:11:18,990
SSL version from source which takes a

285
00:11:16,140 --> 00:11:21,150
long time or set up a custom certificate

286
00:11:18,990 --> 00:11:21,300
authority to ensure private channels and

287
00:11:21,150 --> 00:11:23,550
your

288
00:11:21,300 --> 00:11:25,290
communication an average it took us one

289
00:11:23,550 --> 00:11:28,829
to two weeks just to compile the

290
00:11:25,290 --> 00:11:30,810
existing frameworks this is very

291
00:11:28,830 --> 00:11:32,580
frustrating but luckily for everyone

292
00:11:30,810 --> 00:11:34,500
else we've put this all in our doctor

293
00:11:32,580 --> 00:11:39,029
repository so no one should ever have to

294
00:11:34,500 --> 00:11:41,040
do this again beyond these build systems

295
00:11:39,029 --> 00:11:42,750
though these are significant software

296
00:11:41,040 --> 00:11:44,760
projects that require a lot of software

297
00:11:42,750 --> 00:11:46,410
development in addition to implementing

298
00:11:44,760 --> 00:11:49,459
cryptographic protocols which is

299
00:11:46,410 --> 00:11:51,870
notoriously difficult to do correctly

300
00:11:49,459 --> 00:11:53,939
programmers have to implement a variety

301
00:11:51,870 --> 00:11:56,610
of supporting systems like distributed

302
00:11:53,940 --> 00:12:01,529
communication and interfacing with other

303
00:11:56,610 --> 00:12:05,040
systems that you no other communication

304
00:12:01,529 --> 00:12:07,709
systems and insecure languages this

305
00:12:05,040 --> 00:12:09,599
results in just small but frustrating

306
00:12:07,709 --> 00:12:11,069
things for example in Oblivion we

307
00:12:09,600 --> 00:12:14,459
weren't able to write a computation that

308
00:12:11,070 --> 00:12:15,930
returned more than 32 bits you know this

309
00:12:14,459 --> 00:12:17,760
is a problem that could be solved with

310
00:12:15,930 --> 00:12:19,800
more hands on keyboards and some time

311
00:12:17,760 --> 00:12:21,540
but given the constraints of the

312
00:12:19,800 --> 00:12:24,560
academic setting not all the frameworks

313
00:12:21,540 --> 00:12:28,890
have these kinds of engineering

314
00:12:24,560 --> 00:12:30,959
perfection the other major issue we saw

315
00:12:28,890 --> 00:12:33,060
was Muse ability and especially in

316
00:12:30,959 --> 00:12:34,920
documentation we defined five types of

317
00:12:33,060 --> 00:12:36,569
documentation which you can see here

318
00:12:34,920 --> 00:12:39,360
half the frameworks had no more than

319
00:12:36,570 --> 00:12:41,550
three of these I'm not gonna go through

320
00:12:39,360 --> 00:12:43,560
all these different types in detail but

321
00:12:41,550 --> 00:12:45,209
I do want to give you a few examples of

322
00:12:43,560 --> 00:12:46,920
places where there were limited language

323
00:12:45,209 --> 00:12:50,279
documentation that made it more

324
00:12:46,920 --> 00:12:52,050
difficult to use the frameworks the

325
00:12:50,279 --> 00:12:53,880
language documentation is anything that

326
00:12:52,050 --> 00:13:00,240
describes how the high-level language

327
00:12:53,880 --> 00:13:02,939
works so CBM CGC is a circuit compiler

328
00:13:00,240 --> 00:13:05,220
that consumes it compiles a subset of an

329
00:13:02,940 --> 00:13:06,720
zc so most people are familiar with

330
00:13:05,220 --> 00:13:08,640
seeing you'd assume that a simple

331
00:13:06,720 --> 00:13:11,490
program like this which multiplies two

332
00:13:08,640 --> 00:13:13,350
numbers together would just work however

333
00:13:11,490 --> 00:13:15,899
we get an error that says did you forget

334
00:13:13,350 --> 00:13:18,240
to return a value it turns out that in

335
00:13:15,899 --> 00:13:20,279
CBM cgc all private inputs of the

336
00:13:18,240 --> 00:13:23,850
computation have to have variable names

337
00:13:20,279 --> 00:13:25,649
that start with input and this isn't an

338
00:13:23,850 --> 00:13:28,170
issue but it wasn't written down so we

339
00:13:25,649 --> 00:13:31,300
had to sort of figure it out another

340
00:13:28,170 --> 00:13:33,370
examples from oblivion again we this is

341
00:13:31,300 --> 00:13:37,109
an end-to-end framework that consumes a

342
00:13:33,370 --> 00:13:39,340
Java like language and again we have our

343
00:13:37,110 --> 00:13:41,470
program to multiply two numbers together

344
00:13:39,340 --> 00:13:43,150
and it encounters a parsing error it

345
00:13:41,470 --> 00:13:44,950
turns out that Alice and Bob are

346
00:13:43,150 --> 00:13:48,600
reserved key words in the language and

347
00:13:44,950 --> 00:13:52,600
so you can't use them as variable names

348
00:13:48,600 --> 00:13:55,000
wisteria is an end-to-end framework that

349
00:13:52,600 --> 00:13:56,950
was developed by programming languages

350
00:13:55,000 --> 00:13:59,800
people and so it uses a novel functional

351
00:13:56,950 --> 00:14:01,690
representation and they include an

352
00:13:59,800 --> 00:14:04,530
extensive language guide for people who

353
00:14:01,690 --> 00:14:07,270
might not be as familiar with that

354
00:14:04,530 --> 00:14:10,209
functional style however the language

355
00:14:07,270 --> 00:14:11,829
Doc's this tutorial doesn't account for

356
00:14:10,210 --> 00:14:13,060
the limitations in the parser so

357
00:14:11,830 --> 00:14:15,820
developer has to put a lot more

358
00:14:13,060 --> 00:14:18,489
parentheses and then the tutorial would

359
00:14:15,820 --> 00:14:20,050
imply and then EMP toolkit is a

360
00:14:18,490 --> 00:14:22,030
framework we really liked using it's a

361
00:14:20,050 --> 00:14:24,310
garbled circuit based framework however

362
00:14:22,030 --> 00:14:25,959
we found an average one comment for 600

363
00:14:24,310 --> 00:14:29,790
lines of code with no additional

364
00:14:25,960 --> 00:14:32,680
documentation in separate places so

365
00:14:29,790 --> 00:14:34,500
these are all things that make it more

366
00:14:32,680 --> 00:14:36,310
difficult to use these frameworks

367
00:14:34,500 --> 00:14:37,990
however there were some frameworks that

368
00:14:36,310 --> 00:14:40,420
did a really good job with documentation

369
00:14:37,990 --> 00:14:42,580
I just like to thank them here we do

370
00:14:40,420 --> 00:14:44,560
have two major takeaways for anyone who

371
00:14:42,580 --> 00:14:47,080
maintains a large open source project

372
00:14:44,560 --> 00:14:49,089
like this first is that having multiple

373
00:14:47,080 --> 00:14:50,950
types of documentation even if it's

374
00:14:49,090 --> 00:14:53,020
mediocre can drastically increase the

375
00:14:50,950 --> 00:14:54,400
usability of your framework this could

376
00:14:53,020 --> 00:14:55,750
be something like one document that

377
00:14:54,400 --> 00:14:58,209
explains the architecture of your

378
00:14:55,750 --> 00:15:01,450
framework and then a commented example

379
00:14:58,210 --> 00:15:03,910
file that demonstrates some features of

380
00:15:01,450 --> 00:15:06,040
your high-level language the other thing

381
00:15:03,910 --> 00:15:08,050
we recommend is an online resource for

382
00:15:06,040 --> 00:15:11,290
example a mailing list or a github issue

383
00:15:08,050 --> 00:15:13,030
tracker these are a super sustainable

384
00:15:11,290 --> 00:15:15,339
way to produce documentation for your

385
00:15:13,030 --> 00:15:16,750
framework it creates a living FAQ so you

386
00:15:15,340 --> 00:15:19,120
don't have to repeatedly answer

387
00:15:16,750 --> 00:15:21,490
questions by a private email and it also

388
00:15:19,120 --> 00:15:22,540
allows a place for users to interact so

389
00:15:21,490 --> 00:15:24,910
they can answer each other's questions

390
00:15:22,540 --> 00:15:26,920
and if you end up not maintaining your

391
00:15:24,910 --> 00:15:28,510
framework users can still talk to each

392
00:15:26,920 --> 00:15:34,630
other and find solutions to their issues

393
00:15:28,510 --> 00:15:36,910
so looking forward even given these

394
00:15:34,630 --> 00:15:39,939
engineering and usability challenges MVC

395
00:15:36,910 --> 00:15:42,520
is in pretty good shape we were able to

396
00:15:39,940 --> 00:15:45,089
implement lots of examples example

397
00:15:42,520 --> 00:15:47,279
programs and you know overall things

398
00:15:45,089 --> 00:15:49,379
pretty good these usability challenges

399
00:15:47,279 --> 00:15:51,029
are acknowledged by the community the IR

400
00:15:49,379 --> 00:15:53,399
per hectare program is funding the next

401
00:15:51,029 --> 00:15:55,290
generation of MPC frameworks and they

402
00:15:53,399 --> 00:15:58,350
have specific usability criteria

403
00:15:55,290 --> 00:16:00,300
included in the grant we do recommend

404
00:15:58,350 --> 00:16:02,100
that future developers consider working

405
00:16:00,300 --> 00:16:03,959
with programming languages researchers

406
00:16:02,100 --> 00:16:06,209
most of these frameworks were developed

407
00:16:03,959 --> 00:16:08,040
by cryptographers and therefore the

408
00:16:06,209 --> 00:16:10,170
front-end languages are perhaps not as

409
00:16:08,040 --> 00:16:12,540
principled as they might be with if

410
00:16:10,170 --> 00:16:15,300
somebody with extensive compiler

411
00:16:12,540 --> 00:16:17,459
experience helped develop them and then

412
00:16:15,300 --> 00:16:18,959
one last plug our repository is actively

413
00:16:17,459 --> 00:16:20,309
maintained and we're accepting pull

414
00:16:18,959 --> 00:16:22,739
requests from new and existing

415
00:16:20,309 --> 00:16:26,189
frameworks if you maintain one of these

416
00:16:22,740 --> 00:16:28,230
or would like to use this as a starting

417
00:16:26,189 --> 00:16:31,050
point for your academic project we

418
00:16:28,230 --> 00:16:35,370
encourage you to check it out and then

419
00:16:31,050 --> 00:16:37,979
one last plug I am looking for projects

420
00:16:35,370 --> 00:16:39,449
related to MPC in practice so if you are

421
00:16:37,980 --> 00:16:40,920
a potential collaborator and you have an

422
00:16:39,449 --> 00:16:48,870
interesting project please come talk to

423
00:16:40,920 --> 00:16:52,819
me later thank you very much any

424
00:16:48,870 --> 00:16:52,819
questions please come to the microphone

425
00:16:56,509 --> 00:17:02,009
hello first thank you very much for all

426
00:17:00,089 --> 00:17:03,749
this this was very much needed for the

427
00:17:02,009 --> 00:17:07,589
community and I think it's a pretty

428
00:17:03,749 --> 00:17:09,539
amazing work so I know that you did all

429
00:17:07,589 --> 00:17:10,859
these great compendium of things and

430
00:17:09,539 --> 00:17:14,579
then you got the good things and the bad

431
00:17:10,859 --> 00:17:18,000
things of each but you didn't really

432
00:17:14,579 --> 00:17:20,309
like give like a sort of like this is

433
00:17:18,000 --> 00:17:22,529
the framework like this is the one we

434
00:17:20,309 --> 00:17:24,000
say the community should continue we

435
00:17:22,529 --> 00:17:25,859
didn't build it on top of this one or

436
00:17:24,000 --> 00:17:28,260
something like that and I think it's

437
00:17:25,859 --> 00:17:30,449
important like if you have some some

438
00:17:28,260 --> 00:17:31,919
word than that because if not like what

439
00:17:30,450 --> 00:17:33,179
people end up doing is like oh no there

440
00:17:31,919 --> 00:17:34,380
are 12 standards let's try to

441
00:17:33,179 --> 00:17:39,659
standardize this and of course you end

442
00:17:34,380 --> 00:17:41,399
up with 13 sure so in the paper we do

443
00:17:39,659 --> 00:17:44,669
give stronger recommendations as to

444
00:17:41,399 --> 00:17:46,770
which frameworks we recommend if you're

445
00:17:44,669 --> 00:17:48,360
looking for a specific recommendation

446
00:17:46,770 --> 00:17:50,158
for a setting there are sort of four

447
00:17:48,360 --> 00:17:53,039
that I would say stand out above the

448
00:17:50,159 --> 00:17:55,230
rest for garbled circuit frameworks of

449
00:17:53,039 --> 00:17:57,510
live C is a good general purpose

450
00:17:55,230 --> 00:17:58,080
framework and EMP to look at is really

451
00:17:57,510 --> 00:17:59,190
good

452
00:17:58,080 --> 00:18:03,418
if you have a little more cryptographic

453
00:17:59,190 --> 00:18:08,279
expertise and then scale Mamba is sort

454
00:18:03,419 --> 00:18:09,960
of the best of the multi party or it's

455
00:18:08,279 --> 00:18:11,340
actually a hybrid protocol so it's sort

456
00:18:09,960 --> 00:18:14,549
of the best of these linear secret

457
00:18:11,340 --> 00:18:15,928
sharing based protocols it's really

458
00:18:14,549 --> 00:18:18,389
extensive and it's actively being

459
00:18:15,929 --> 00:18:21,539
developed and then if you are a person

460
00:18:18,390 --> 00:18:23,250
who has actual security needs you might

461
00:18:21,539 --> 00:18:25,260
be interested in share mind this is the

462
00:18:23,250 --> 00:18:27,630
only framework that has paid developers

463
00:18:25,260 --> 00:18:30,330
working on it who are in academics so

464
00:18:27,630 --> 00:18:35,250
those would be the sort of strong

465
00:18:30,330 --> 00:18:36,960
recommendations I have so I'm actually

466
00:18:35,250 --> 00:18:38,669
absolutely going to develop a

467
00:18:36,960 --> 00:18:41,070
programming language in which Alice and

468
00:18:38,669 --> 00:18:45,740
Bob are reserved words that's that's

469
00:18:41,070 --> 00:18:45,740
cool okay thank you very much again

470
00:18:46,150 --> 00:18:50,159
[Applause]

