1
00:00:08,970 --> 00:00:14,500
yes so thanks for the introduction and

2
00:00:12,639 --> 00:00:16,180
welcome to my presentation my name is

3
00:00:14,500 --> 00:00:19,119
Pierre Thomas Amy and together with

4
00:00:16,180 --> 00:00:20,860
Daniel fete and Golf crystals I did a

5
00:00:19,119 --> 00:00:22,300
formal security analysis of the open

6
00:00:20,860 --> 00:00:25,090
Heidi financial grid API

7
00:00:22,300 --> 00:00:27,250
the financial read API is an

8
00:00:25,090 --> 00:00:30,600
authorization and authentication scheme

9
00:00:27,250 --> 00:00:34,030
for high risk environments for example

10
00:00:30,600 --> 00:00:35,830
for financial applications and currently

11
00:00:34,030 --> 00:00:37,840
there are many activities to open

12
00:00:35,830 --> 00:00:40,210
especially financial services to

13
00:00:37,840 --> 00:00:42,910
third-party providers so on a high level

14
00:00:40,210 --> 00:00:45,520
this looks like the following Ellis

15
00:00:42,910 --> 00:00:47,500
wants to authorize some application this

16
00:00:45,520 --> 00:00:50,200
can also be a website for having access

17
00:00:47,500 --> 00:00:52,510
to our banking account for example for

18
00:00:50,200 --> 00:00:54,129
initiating payments and this can be

19
00:00:52,510 --> 00:00:57,280
achieved by using the financial grade

20
00:00:54,129 --> 00:01:00,489
API the financial aid API is already

21
00:00:57,280 --> 00:01:02,379
adopted by major banks in the UK and is

22
00:01:00,489 --> 00:01:04,780
one of the most promising candidates for

23
00:01:02,379 --> 00:01:07,390
implementing the new European payment

24
00:01:04,780 --> 00:01:10,000
services directive which requires by law

25
00:01:07,390 --> 00:01:14,459
that financial institutions offer open

26
00:01:10,000 --> 00:01:16,869
banking api's for third-party providers

27
00:01:14,459 --> 00:01:19,440
so the financial grade API is

28
00:01:16,869 --> 00:01:22,569
essentially a hardened version of OAuth

29
00:01:19,440 --> 00:01:24,429
for high risk environments now for

30
00:01:22,569 --> 00:01:27,130
achieving the degree of security that is

31
00:01:24,429 --> 00:01:29,709
needed here there are many new security

32
00:01:27,130 --> 00:01:34,330
mechanisms incorporated into the basic

33
00:01:29,709 --> 00:01:38,050
Hoth flow now what we did is we formally

34
00:01:34,330 --> 00:01:40,209
analyzed the financial grade API using

35
00:01:38,050 --> 00:01:42,780
the web infrastructure model which was

36
00:01:40,209 --> 00:01:45,490
which was developed by our working group

37
00:01:42,780 --> 00:01:48,310
based on this we created a formal model

38
00:01:45,490 --> 00:01:51,699
of the financial gate API we defined

39
00:01:48,310 --> 00:01:53,770
security properties then during the

40
00:01:51,700 --> 00:01:55,569
analysis we found several attacks not

41
00:01:53,770 --> 00:01:58,270
only on the financial grade API itself

42
00:01:55,569 --> 00:02:00,459
but also on some of its new security

43
00:01:58,270 --> 00:02:04,479
mechanisms which are independent of the

44
00:02:00,459 --> 00:02:06,509
financial grade API we also provide

45
00:02:04,479 --> 00:02:09,098
fixes for all attacks that we found and

46
00:02:06,509 --> 00:02:13,780
finally prove that the financial grade

47
00:02:09,098 --> 00:02:15,910
API within our model is secure we are

48
00:02:13,780 --> 00:02:19,450
also working with the of my D foundation

49
00:02:15,910 --> 00:02:22,000
for fixing the standard

50
00:02:19,450 --> 00:02:24,429
so during my presentation we will take a

51
00:02:22,000 --> 00:02:26,110
look into all of these points and we

52
00:02:24,430 --> 00:02:32,140
start with OAuth on which the financial

53
00:02:26,110 --> 00:02:33,849
grade API is based and here we start

54
00:02:32,140 --> 00:02:35,980
with an example so you'll find both on

55
00:02:33,849 --> 00:02:38,260
many different web pages for example if

56
00:02:35,980 --> 00:02:40,690
you have login with Facebook or log in

57
00:02:38,260 --> 00:02:42,010
with Google here we have as an example

58
00:02:40,690 --> 00:02:44,200
if this then that

59
00:02:42,010 --> 00:02:46,840
which is a popular service that

60
00:02:44,200 --> 00:02:49,810
automates tasks across multiple other

61
00:02:46,840 --> 00:02:51,880
services for example it lets you save

62
00:02:49,810 --> 00:02:55,810
your new Instagram photos to your

63
00:02:51,880 --> 00:02:57,970
Dropbox which of course means that if

64
00:02:55,810 --> 00:03:00,850
this then that needs access to your

65
00:02:57,970 --> 00:03:03,609
Dropbox account now for giving this

66
00:03:00,850 --> 00:03:07,870
access the browser opens a new web page

67
00:03:03,610 --> 00:03:09,819
a web page of Dropbox and now at this

68
00:03:07,870 --> 00:03:12,519
point Dropbox is called the

69
00:03:09,819 --> 00:03:15,609
authorization server and if this then

70
00:03:12,519 --> 00:03:18,130
that is called the OAuth client so what

71
00:03:15,610 --> 00:03:21,310
happens now is that L is essentially

72
00:03:18,130 --> 00:03:24,160
logged in into Dropbox and then Dropbox

73
00:03:21,310 --> 00:03:29,590
asks if she wants to give if this than

74
00:03:24,160 --> 00:03:31,060
that access to her files and folders so

75
00:03:29,590 --> 00:03:34,989
now in the background the following

76
00:03:31,060 --> 00:03:37,150
happens we have the browser which Ennis

77
00:03:34,989 --> 00:03:40,720
is using then we have the client for

78
00:03:37,150 --> 00:03:42,209
example if this then that and we have

79
00:03:40,720 --> 00:03:47,380
the authorization server for example

80
00:03:42,209 --> 00:03:49,180
Dropbox now the flow is started at the

81
00:03:47,380 --> 00:03:52,230
client by sending the so called

82
00:03:49,180 --> 00:03:54,820
authorization request which is

83
00:03:52,230 --> 00:03:57,910
redirected by the browser to the

84
00:03:54,820 --> 00:04:01,299
authorization server and here Alice logs

85
00:03:57,910 --> 00:04:04,780
in and at this point the authorization

86
00:04:01,299 --> 00:04:08,819
server creates a so-called authorization

87
00:04:04,780 --> 00:04:12,100
code and this is sent back to the client

88
00:04:08,819 --> 00:04:15,429
using this authorization code the client

89
00:04:12,100 --> 00:04:18,548
gets an access token and finally using

90
00:04:15,430 --> 00:04:22,060
this access token the client gets access

91
00:04:18,548 --> 00:04:24,460
to Alice's resources often the

92
00:04:22,060 --> 00:04:26,289
authorization and resource server belong

93
00:04:24,460 --> 00:04:30,250
to the same organization but in general

94
00:04:26,289 --> 00:04:33,919
these can be two unrelated servers so

95
00:04:30,250 --> 00:04:36,439
that's basic auth as I said

96
00:04:33,919 --> 00:04:38,120
the financial-aid api offers a flow for

97
00:04:36,439 --> 00:04:40,009
high-risk environments and the attacker

98
00:04:38,120 --> 00:04:42,469
model that is considered here is very

99
00:04:40,009 --> 00:04:44,990
strong so now we come to the attacker

100
00:04:42,469 --> 00:04:48,680
model according to the specification of

101
00:04:44,990 --> 00:04:50,449
the financial grade API of course the

102
00:04:48,680 --> 00:04:52,550
first difference that you see here is

103
00:04:50,449 --> 00:04:55,039
that the authorization server is

104
00:04:52,550 --> 00:04:57,379
typically a bank and the resource server

105
00:04:55,039 --> 00:05:01,460
provides access to your financial data

106
00:04:57,379 --> 00:05:04,360
and banking account so according to the

107
00:05:01,460 --> 00:05:08,388
specification of the financial grade API

108
00:05:04,360 --> 00:05:11,360
it is assumed that the attacker can read

109
00:05:08,389 --> 00:05:13,249
the authorization request then it is

110
00:05:11,360 --> 00:05:17,060
assumed that also the authorization

111
00:05:13,249 --> 00:05:19,639
response leaks to the attacker then that

112
00:05:17,060 --> 00:05:21,710
the attacker can miss configure some

113
00:05:19,639 --> 00:05:25,069
endpoints at the client which means that

114
00:05:21,710 --> 00:05:26,979
the request in step 5 is also sent to

115
00:05:25,069 --> 00:05:30,439
the attacker and therefore leaks and

116
00:05:26,979 --> 00:05:33,680
finally it is assumed that the attacker

117
00:05:30,439 --> 00:05:36,469
can still access tokens so this is a

118
00:05:33,680 --> 00:05:38,479
very strong attacker model but also

119
00:05:36,469 --> 00:05:40,339
needed because as I said the financial

120
00:05:38,479 --> 00:05:44,300
grade API is designed for high risk

121
00:05:40,339 --> 00:05:47,360
environments now for achieving this

122
00:05:44,300 --> 00:05:50,750
degree of security there are many new

123
00:05:47,360 --> 00:05:52,939
security mechanisms used due to timing

124
00:05:50,750 --> 00:05:55,180
constraints we won't look into all of

125
00:05:52,939 --> 00:05:59,060
them but we'll take a brief look into

126
00:05:55,180 --> 00:06:03,289
Roth mutual TLS which let's see which

127
00:05:59,060 --> 00:06:05,719
let's which leads to some authorize it

128
00:06:03,289 --> 00:06:10,039
so some access token to be bound to some

129
00:06:05,719 --> 00:06:12,050
clients so in the end yes so I will give

130
00:06:10,039 --> 00:06:15,199
you the the high-level overview so we

131
00:06:12,050 --> 00:06:17,240
have this in this step when sending the

132
00:06:15,199 --> 00:06:20,870
authorization code for getting an access

133
00:06:17,240 --> 00:06:23,479
token the client is required to do TLS

134
00:06:20,870 --> 00:06:26,539
client authentication so at this point

135
00:06:23,479 --> 00:06:29,719
we have client authentication at the TLS

136
00:06:26,539 --> 00:06:34,310
level and now the authorization server

137
00:06:29,719 --> 00:06:36,080
just remembers the client certificate so

138
00:06:34,310 --> 00:06:38,330
the authorization server remembers that

139
00:06:36,080 --> 00:06:42,649
for this access token this client

140
00:06:38,330 --> 00:06:44,508
certificate was created and what happens

141
00:06:42,649 --> 00:06:46,759
now is when sending the access token for

142
00:06:44,509 --> 00:06:49,279
getting access to resources

143
00:06:46,759 --> 00:06:51,559
the client is required to use again the

144
00:06:49,279 --> 00:06:55,129
same certificate for TLS kind

145
00:06:51,559 --> 00:06:58,599
authentication and this means that well

146
00:06:55,129 --> 00:07:01,069
if the attacker steals an access token

147
00:06:58,599 --> 00:07:06,558
he cannot use it because he does not

148
00:07:01,069 --> 00:07:09,020
know the corresponding private key so

149
00:07:06,559 --> 00:07:12,770
later we will see how this mechanism can

150
00:07:09,020 --> 00:07:14,659
be bypassed by the attacker next we take

151
00:07:12,770 --> 00:07:18,650
a look into the formal analysis that we

152
00:07:14,659 --> 00:07:20,808
did and as I said we use the web

153
00:07:18,650 --> 00:07:23,089
infrastructure model which was developed

154
00:07:20,809 --> 00:07:25,999
by our working group and this is a

155
00:07:23,089 --> 00:07:27,620
detailed comprehensive formal model of

156
00:07:25,999 --> 00:07:29,990
the web infrastructure it contains

157
00:07:27,620 --> 00:07:32,919
details about communication about

158
00:07:29,990 --> 00:07:36,770
attacker behavior and many more aspects

159
00:07:32,919 --> 00:07:39,049
on a high level the model is a toll

160
00:07:36,770 --> 00:07:42,080
every hour based model which contains

161
00:07:39,050 --> 00:07:44,089
several components like browsers web

162
00:07:42,080 --> 00:07:47,539
servers DNS servers of course the

163
00:07:44,089 --> 00:07:53,509
network then we might have several web

164
00:07:47,539 --> 00:07:55,039
attackers or one network attacker now we

165
00:07:53,509 --> 00:08:00,259
also take a brief look into the browser

166
00:07:55,039 --> 00:08:01,938
model so the browser model contains many

167
00:08:00,259 --> 00:08:04,310
different features for example different

168
00:08:01,939 --> 00:08:07,069
message types like HTTP or HTTPS

169
00:08:04,310 --> 00:08:09,830
messages it also models a complex window

170
00:08:07,069 --> 00:08:12,620
and document structure there are scripts

171
00:08:09,830 --> 00:08:15,109
that run on the browser which can be

172
00:08:12,620 --> 00:08:18,020
honest or malicious and there are many

173
00:08:15,110 --> 00:08:23,360
more features modeled for example web

174
00:08:18,020 --> 00:08:26,779
messaging or WebRTC now the overall

175
00:08:23,360 --> 00:08:29,149
approach works as follows the web

176
00:08:26,779 --> 00:08:32,179
infrastructure model is the basis of our

177
00:08:29,149 --> 00:08:34,490
formal analysis and this is by itself

178
00:08:32,179 --> 00:08:37,638
independent of the applications we are

179
00:08:34,490 --> 00:08:39,948
analyzing now based on the web

180
00:08:37,639 --> 00:08:42,829
infrastructure model we create a formal

181
00:08:39,948 --> 00:08:44,839
model of the application we are looking

182
00:08:42,828 --> 00:08:46,699
at so we have the application specific

183
00:08:44,839 --> 00:08:50,089
model for example of the financial grade

184
00:08:46,699 --> 00:08:52,310
API then once we have this we can

185
00:08:50,089 --> 00:08:55,010
precisely define security properties and

186
00:08:52,310 --> 00:08:57,229
in the end we want to prove that these

187
00:08:55,010 --> 00:09:00,480
security properties hold true within the

188
00:08:57,230 --> 00:09:02,100
model at this point it might be that

189
00:09:00,480 --> 00:09:05,070
the proof does not go through and you

190
00:09:02,100 --> 00:09:07,770
find attacks for which you have to find

191
00:09:05,070 --> 00:09:10,320
fixes you have to incorporate these

192
00:09:07,770 --> 00:09:12,750
fixes into the model and repeat the

193
00:09:10,320 --> 00:09:18,780
whole process until your proof goes

194
00:09:12,750 --> 00:09:20,880
through so as I said we model the

195
00:09:18,780 --> 00:09:23,579
financial grade API which has many

196
00:09:20,880 --> 00:09:26,880
different options and configurations you

197
00:09:23,580 --> 00:09:29,580
can see the convey possible options and

198
00:09:26,880 --> 00:09:33,090
configurations here so the financial

199
00:09:29,580 --> 00:09:35,220
grade API offers a a profile for it only

200
00:09:33,090 --> 00:09:37,670
access and the most second and a more

201
00:09:35,220 --> 00:09:42,270
secure profile for readwrite access

202
00:09:37,670 --> 00:09:43,740
there might be web so the flow depends

203
00:09:42,270 --> 00:09:46,770
on whether for example you have web

204
00:09:43,740 --> 00:09:48,000
server or application clients there are

205
00:09:46,770 --> 00:09:49,890
multiple methods of client

206
00:09:48,000 --> 00:09:55,050
authentication and multiple methods of

207
00:09:49,890 --> 00:09:58,400
holder of key mechanisms so we model all

208
00:09:55,050 --> 00:10:01,290
possible methods that are shown here and

209
00:09:58,400 --> 00:10:05,060
next we take a look into the security

210
00:10:01,290 --> 00:10:05,060
properties that we use for our analysis

211
00:10:05,240 --> 00:10:09,990
so the the central security properties

212
00:10:09,060 --> 00:10:13,530
are the following

213
00:10:09,990 --> 00:10:17,610
we have authentication which intuitively

214
00:10:13,530 --> 00:10:20,730
means that well the attacker should not

215
00:10:17,610 --> 00:10:23,610
be able to log in at some client using

216
00:10:20,730 --> 00:10:25,710
Alice's identity then we have

217
00:10:23,610 --> 00:10:27,870
authorization which is probably the most

218
00:10:25,710 --> 00:10:30,810
important property for the financial-aid

219
00:10:27,870 --> 00:10:33,180
API and this states that the attacker

220
00:10:30,810 --> 00:10:35,010
should not be able to access Alice's

221
00:10:33,180 --> 00:10:38,819
resources for example Alice's banking

222
00:10:35,010 --> 00:10:41,430
account and finally we have session

223
00:10:38,820 --> 00:10:43,860
integrity which states that when any

224
00:10:41,430 --> 00:10:45,989
logs in somewhere she should be logged

225
00:10:43,860 --> 00:10:49,620
in under her own account and using her

226
00:10:45,990 --> 00:10:52,890
own resources of course this is very

227
00:10:49,620 --> 00:10:55,490
informally here more formally for

228
00:10:52,890 --> 00:10:58,350
example authorization looks like this I

229
00:10:55,490 --> 00:11:01,890
won't go to details here but this

230
00:10:58,350 --> 00:11:03,840
essentially means whenever the resource

231
00:11:01,890 --> 00:11:06,180
server provides access to Alice's

232
00:11:03,840 --> 00:11:08,640
resources this access is not given to

233
00:11:06,180 --> 00:11:10,800
the attacker neither directly by the

234
00:11:08,640 --> 00:11:14,850
resource server nor indirectly by some

235
00:11:10,800 --> 00:11:16,979
client so as already

236
00:11:14,850 --> 00:11:19,949
we wanted to prove that these properties

237
00:11:16,980 --> 00:11:22,170
hold true however we were not able to do

238
00:11:19,949 --> 00:11:24,628
so initially and we found several

239
00:11:22,170 --> 00:11:27,660
attacks not only on the financial grade

240
00:11:24,629 --> 00:11:33,660
API itself but also on some of the basic

241
00:11:27,660 --> 00:11:36,209
security mechanisms so we found four

242
00:11:33,660 --> 00:11:38,639
attacks and in this presentation I will

243
00:11:36,209 --> 00:11:42,118
show you the first attack that a cuckoo

244
00:11:38,639 --> 00:11:45,420
stoking attack so just a quick recap we

245
00:11:42,119 --> 00:11:47,910
saw that by token binding for example

246
00:11:45,420 --> 00:11:50,399
using mutual TLS an access token can be

247
00:11:47,910 --> 00:11:52,350
bound to a client which means that in

248
00:11:50,399 --> 00:11:56,069
the end only this client can use this

249
00:11:52,350 --> 00:11:58,049
access token now the following is taken

250
00:11:56,069 --> 00:12:01,259
from the specification of the financial

251
00:11:58,049 --> 00:12:03,269
grade API it essentially says well when

252
00:12:01,259 --> 00:12:05,339
the financial read API client uses

253
00:12:03,269 --> 00:12:08,459
mutual TLS or auth token binding an

254
00:12:05,339 --> 00:12:11,249
access token is access token phishing

255
00:12:08,459 --> 00:12:15,179
resistant as the fish access tokens

256
00:12:11,249 --> 00:12:17,339
cannot be used however we will see that

257
00:12:15,179 --> 00:12:19,169
this is not true so it is true that the

258
00:12:17,339 --> 00:12:23,249
attacker cannot directly use the access

259
00:12:19,169 --> 00:12:26,279
token as it is shown on the slide but

260
00:12:23,249 --> 00:12:28,589
the attacker can use the client for it

261
00:12:26,279 --> 00:12:32,069
for using the access token by injecting

262
00:12:28,589 --> 00:12:35,279
it into another flow so on the next

263
00:12:32,069 --> 00:12:37,529
slide we continue with step sticks so

264
00:12:35,279 --> 00:12:40,399
what happens now is that the attacker

265
00:12:37,529 --> 00:12:44,220
just starts a new flow a second flow in

266
00:12:40,399 --> 00:12:47,040
which he is using the client and now the

267
00:12:44,220 --> 00:12:49,290
main part of the attack is that booth

268
00:12:47,040 --> 00:12:51,540
has no limits or restrictions on

269
00:12:49,290 --> 00:12:53,610
authorization servers so for one client

270
00:12:51,540 --> 00:12:57,199
you might have Google Facebook Dropbox

271
00:12:53,610 --> 00:13:00,350
and many more authorization servers and

272
00:12:57,199 --> 00:13:02,609
these can also be dynamically registered

273
00:13:00,350 --> 00:13:05,040
this is even more interesting for the

274
00:13:02,610 --> 00:13:07,739
financial-aid api because just in Europe

275
00:13:05,040 --> 00:13:09,988
we can expect to have many thousand

276
00:13:07,739 --> 00:13:11,549
banking authorization servers and of

277
00:13:09,989 --> 00:13:15,899
course you cannot assume that all of

278
00:13:11,549 --> 00:13:17,160
them are honest so in the following we

279
00:13:15,899 --> 00:13:19,429
assume that just one of these

280
00:13:17,160 --> 00:13:22,949
authorization service is malicious and

281
00:13:19,429 --> 00:13:24,990
this is the complete setting so the

282
00:13:22,949 --> 00:13:27,579
attacker is using the client and his own

283
00:13:24,990 --> 00:13:31,209
authorization server

284
00:13:27,580 --> 00:13:32,830
so this is again a basic or flow so the

285
00:13:31,209 --> 00:13:35,260
client starts the flow by sending the

286
00:13:32,830 --> 00:13:37,560
authorization request the attacker logs

287
00:13:35,260 --> 00:13:40,209
in into his own authorization server and

288
00:13:37,560 --> 00:13:45,510
essentially sends back an authorization

289
00:13:40,209 --> 00:13:49,089
code and what happens now at this point

290
00:13:45,510 --> 00:13:51,069
when sending the authorization code the

291
00:13:49,089 --> 00:13:54,220
attacker has to send some access token

292
00:13:51,070 --> 00:13:57,459
and here instead of creating a fresh

293
00:13:54,220 --> 00:14:01,320
access token the attacker simply injects

294
00:13:57,459 --> 00:14:01,319
the stolen access token into this flow

295
00:14:01,829 --> 00:14:05,829
well we said that this excess talk is

296
00:14:04,390 --> 00:14:09,160
bound to the client which means the

297
00:14:05,829 --> 00:14:12,760
client can use it for getting access to

298
00:14:09,160 --> 00:14:15,430
Alice's resources and of course through

299
00:14:12,760 --> 00:14:20,890
this client the attacker also gets

300
00:14:15,430 --> 00:14:22,660
access to Alice's banking account now

301
00:14:20,890 --> 00:14:26,019
the mitigation that we proposed for this

302
00:14:22,660 --> 00:14:28,290
attack looks as follows the client

303
00:14:26,019 --> 00:14:30,940
should be required in the last step to

304
00:14:28,290 --> 00:14:34,300
send the expected issue of the access

305
00:14:30,940 --> 00:14:36,250
token to the resource server so just say

306
00:14:34,300 --> 00:14:40,209
ok I got the access token from the

307
00:14:36,250 --> 00:14:42,010
attacker authorization server and at

308
00:14:40,209 --> 00:14:44,979
this point the resource server can stop

309
00:14:42,010 --> 00:14:47,110
the flow because typically in orth one

310
00:14:44,980 --> 00:14:49,779
resource server manages resources of one

311
00:14:47,110 --> 00:14:53,079
authorization server which means that

312
00:14:49,779 --> 00:14:55,029
the resource server can detect that this

313
00:14:53,079 --> 00:14:59,349
access token was injected into this flow

314
00:14:55,029 --> 00:15:02,640
and can stop the flow so we proposed

315
00:14:59,350 --> 00:15:05,680
fixes for all attacks that we found and

316
00:15:02,640 --> 00:15:11,040
then we're able to prove that within our

317
00:15:05,680 --> 00:15:11,040
model the financial grade API is secure

318
00:15:11,760 --> 00:15:15,839
now I come to the last point as

319
00:15:14,140 --> 00:15:18,730
mentioned in the beginning we are

320
00:15:15,839 --> 00:15:21,910
collaborating with the working group to

321
00:15:18,730 --> 00:15:24,399
fix the standard and we even initiated

322
00:15:21,910 --> 00:15:26,949
an OAuth security workshop for regular

323
00:15:24,399 --> 00:15:29,079
meetings with the IETF and the open ID

324
00:15:26,949 --> 00:15:31,719
foundation to improve the standards

325
00:15:29,079 --> 00:15:35,500
related to OAuth for example the

326
00:15:31,720 --> 00:15:36,800
financial grade API that's it thank you

327
00:15:35,500 --> 00:15:43,839
very much

328
00:15:36,800 --> 00:15:43,839
[Applause]

329
00:15:58,070 --> 00:16:05,660
so speaking of someone who works for a

330
00:16:01,490 --> 00:16:09,259
bank token binding is this fantastic

331
00:16:05,660 --> 00:16:13,339
idea you know that Google pulled support

332
00:16:09,259 --> 00:16:16,190
for it last October and also was in a

333
00:16:13,339 --> 00:16:20,000
bank there are a couple of problems with

334
00:16:16,190 --> 00:16:22,459
token binding outbound token binding

335
00:16:20,000 --> 00:16:26,209
breaks reverse proxies and banks like to

336
00:16:22,459 --> 00:16:31,339
do traffic inspection inbound nobody

337
00:16:26,209 --> 00:16:34,638
wants to trust the API gateway and so

338
00:16:31,339 --> 00:16:36,740
you basically are stuck that you cannot

339
00:16:34,639 --> 00:16:39,230
use token binding in either direction so

340
00:16:36,740 --> 00:16:42,470
listening to you I'm a little surprised

341
00:16:39,230 --> 00:16:44,389
that there is a financial services API

342
00:16:42,470 --> 00:16:46,190
that is promoting something that banks

343
00:16:44,389 --> 00:16:50,149
will actually deploy do actually know

344
00:16:46,190 --> 00:16:52,699
anything about that so so sorry so you

345
00:16:50,149 --> 00:16:54,740
mean that banks would not support it or

346
00:16:52,699 --> 00:16:56,359
what do you mean exactly because the

347
00:16:54,740 --> 00:17:00,500
financial bread API is already adopted

348
00:16:56,360 --> 00:17:03,520
so open bank in UK is or will be using

349
00:17:00,500 --> 00:17:06,520
it that's already a final thing for

350
00:17:03,520 --> 00:17:06,520
example

351
00:17:13,450 --> 00:17:17,050
rush if there are no more questions

352
00:17:15,520 --> 00:17:18,310
let's thank the speaker and all the

353
00:17:17,050 --> 00:17:22,450
speakers of this session

354
00:17:18,310 --> 00:17:22,450
[Applause]

