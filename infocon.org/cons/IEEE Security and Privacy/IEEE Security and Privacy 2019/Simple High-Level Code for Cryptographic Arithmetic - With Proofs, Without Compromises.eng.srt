1
00:00:08,580 --> 00:00:14,250
hi throughout this talk I'm

2
00:00:12,330 --> 00:00:16,379
 proof assistant to generate fast

3
00:00:14,250 --> 00:00:19,350
code for field replicas but first let's

4
00:00:16,379 --> 00:00:21,240
take a look at how it is done today it

5
00:00:19,350 --> 00:00:22,680
is quite common for field errific to be

6
00:00:21,240 --> 00:00:24,930
implemented from scratch for each

7
00:00:22,680 --> 00:00:27,930
modulus and separately for 32-bit and

8
00:00:24,930 --> 00:00:29,460
64-bit CPUs at the very least each

9
00:00:27,930 --> 00:00:31,769
modern web browser includes

10
00:00:29,460 --> 00:00:33,300
implementations of the P 256 and Kurt to

11
00:00:31,769 --> 00:00:35,670
her nine elliptic curves and the

12
00:00:33,300 --> 00:00:37,410
underlying finite fields this

13
00:00:35,670 --> 00:00:39,540
duplication of security-critical code

14
00:00:37,410 --> 00:00:41,190
has led to a good amount of concern

15
00:00:39,540 --> 00:00:42,809
amongst cryptographic library maintainer

16
00:00:41,190 --> 00:00:45,839
is about how to make sure that all of

17
00:00:42,809 --> 00:00:47,580
this is correct and let's just look at a

18
00:00:45,839 --> 00:00:50,220
concrete example of how this plays out

19
00:00:47,580 --> 00:00:51,960
in the field this is a recorded

20
00:00:50,220 --> 00:00:53,909
conversation on the open SSL bug tracker

21
00:00:51,960 --> 00:00:56,010
and everything starts with the studious

22
00:00:53,909 --> 00:00:57,809
user noticing that some comments in the

23
00:00:56,010 --> 00:00:59,519
source code are not entirely accurate in

24
00:00:57,809 --> 00:01:00,809
particular some integer overflows that

25
00:00:59,519 --> 00:01:02,970
they're not supposed to be happening are

26
00:01:00,809 --> 00:01:05,548
in fact happening quickly a

27
00:01:02,970 --> 00:01:07,229
counterexample is produced and some

28
00:01:05,549 --> 00:01:08,850
contributor points out the paper that

29
00:01:07,229 --> 00:01:10,979
shows how to attack a similar bug in a

30
00:01:08,850 --> 00:01:12,750
different implementation of course

31
00:01:10,979 --> 00:01:14,429
nobody has time to actually see but an

32
00:01:12,750 --> 00:01:16,710
attack is applicable here so people just

33
00:01:14,430 --> 00:01:18,480
throw some propose some patches fix them

34
00:01:16,710 --> 00:01:20,279
up and only after a couple of iterations

35
00:01:18,480 --> 00:01:22,290
later the batches are committed with a

36
00:01:20,280 --> 00:01:23,760
ringing endorsement that they pass 6

37
00:01:22,290 --> 00:01:27,900
billion random tests and there are no

38
00:01:23,760 --> 00:01:29,880
low hanging bars left what we do is

39
00:01:27,900 --> 00:01:31,620
write a different we write one

40
00:01:29,880 --> 00:01:35,460
implementation for each general

41
00:01:31,620 --> 00:01:37,230
algorithm for module reduction we use

42
00:01:35,460 --> 00:01:38,910
compile time specialization to generate

43
00:01:37,230 --> 00:01:41,220
code that is quite similar to what an

44
00:01:38,910 --> 00:01:43,408
expert would write and we prove each

45
00:01:41,220 --> 00:01:45,300
implementation correct in Cocke once and

46
00:01:43,409 --> 00:01:47,220
for all so with one proof applies for

47
00:01:45,300 --> 00:01:48,780
all compile time specializations and all

48
00:01:47,220 --> 00:01:52,620
runtime inputs including those not

49
00:01:48,780 --> 00:01:54,330
included in the six billion and this

50
00:01:52,620 --> 00:01:56,280
last feature was convincing enough that

51
00:01:54,330 --> 00:01:57,240
the maintainer of pouring SSL replaced

52
00:01:56,280 --> 00:01:59,070
some of their handwritten

53
00:01:57,240 --> 00:02:00,809
implementations with our generated code

54
00:01:59,070 --> 00:02:02,369
even though at the time it came with a

55
00:02:00,810 --> 00:02:05,610
slight performance felt it has now been

56
00:02:02,370 --> 00:02:08,069
fixed I will show you a concrete demo of

57
00:02:05,610 --> 00:02:09,690
what our framework looks like from their

58
00:02:08,068 --> 00:02:12,899
cryptographic library maintains

59
00:02:09,690 --> 00:02:15,000
perspective you start by specifying the

60
00:02:12,900 --> 00:02:16,590
implementation strategy the name for the

61
00:02:15,000 --> 00:02:18,959
code this is not relevant to what

62
00:02:16,590 --> 00:02:20,580
actually gets generated the number of

63
00:02:18,959 --> 00:02:23,940
digits to use per field element the

64
00:02:20,580 --> 00:02:25,770
modules of the finite field and there

65
00:02:23,940 --> 00:02:26,160
are a number of bits in the multiplier

66
00:02:25,770 --> 00:02:27,810
input

67
00:02:26,160 --> 00:02:30,060
the cpu and the operation you want to

68
00:02:27,810 --> 00:02:32,910
synthesize and outcomes code in fact

69
00:02:30,060 --> 00:02:34,380
outcomes quite a bit of code and I am

70
00:02:32,910 --> 00:02:35,880
quite glad that I was not the one who

71
00:02:34,380 --> 00:02:37,350
had to write this out by hand and to

72
00:02:35,880 --> 00:02:40,590
have the opportunity to get math ROM in

73
00:02:37,350 --> 00:02:42,210
it and it runs as fast as expert written

74
00:02:40,590 --> 00:02:43,680
code it is essentially the same code

75
00:02:42,210 --> 00:02:46,470
just generator pair tool so the

76
00:02:43,680 --> 00:02:48,870
performance difference is a tiny

77
00:02:46,470 --> 00:02:51,540
fraction of the overall execution time

78
00:02:48,870 --> 00:02:54,390
but it is still much faster than using a

79
00:02:51,540 --> 00:02:57,000
generic library that uses a generic

80
00:02:54,390 --> 00:02:58,470
algorithm at runtime however that

81
00:02:57,000 --> 00:03:00,330
specialized assembly code is even

82
00:02:58,470 --> 00:03:03,240
slightly faster than either expert

83
00:03:00,330 --> 00:03:05,610
written C code or our secant and this

84
00:03:03,240 --> 00:03:07,170
picture is essentially similar for other

85
00:03:05,610 --> 00:03:11,700
elliptic curves as well this here is

86
00:03:07,170 --> 00:03:13,049
curved roof of r19 the key difference

87
00:03:11,700 --> 00:03:15,060
that makes specialized implementations

88
00:03:13,050 --> 00:03:16,560
fast is that the implementer gets to

89
00:03:15,060 --> 00:03:19,290
match the representation of field

90
00:03:16,560 --> 00:03:21,570
elements to the modules in question for

91
00:03:19,290 --> 00:03:23,760
example with 64-bit integers we might

92
00:03:21,570 --> 00:03:27,390
represent the 256 bit field element

93
00:03:23,760 --> 00:03:30,209
using four digits and this way the

94
00:03:27,390 --> 00:03:32,700
weight of the fifth digit hypothetically

95
00:03:30,210 --> 00:03:35,790
would line up with the modulus to 356 is

96
00:03:32,700 --> 00:03:38,880
quite close to 2 to 255 so this enables

97
00:03:35,790 --> 00:03:40,049
speeding up module reduction however the

98
00:03:38,880 --> 00:03:42,359
thing of the digits in an unconventional

99
00:03:40,050 --> 00:03:44,940
manner can give even bigger speed ups

100
00:03:42,360 --> 00:03:46,500
for example if we have a 127 bit field

101
00:03:44,940 --> 00:03:48,990
element we can split it into three

102
00:03:46,500 --> 00:03:50,520
digits without using all the bits in

103
00:03:48,990 --> 00:03:52,440
each of the registers so one digit gets

104
00:03:50,520 --> 00:03:54,780
on lead 42 bits the second one also gets

105
00:03:52,440 --> 00:03:55,950
42 and the third one gets 43 there's not

106
00:03:54,780 --> 00:03:57,090
even a normal basis then there are

107
00:03:55,950 --> 00:03:58,950
different numbers of bits in different

108
00:03:57,090 --> 00:04:00,690
digits and yet this ends up being faster

109
00:03:58,950 --> 00:04:05,130
because it matches the modules closer

110
00:04:00,690 --> 00:04:08,280
200 200 200 200 127 is very close to 2

111
00:04:05,130 --> 00:04:10,140
to the 1.27 minus 1 and the key

112
00:04:08,280 --> 00:04:12,180
challenge in our library is to figure

113
00:04:10,140 --> 00:04:13,649
out how to encode the algorithms of

114
00:04:12,180 --> 00:04:15,320
module reduction in a way that they can

115
00:04:13,650 --> 00:04:17,310
be used on multiple representations and

116
00:04:15,320 --> 00:04:18,779
fixing the representation at compile

117
00:04:17,310 --> 00:04:20,010
time should give us back the code that

118
00:04:18,779 --> 00:04:22,229
an expert would have written when they

119
00:04:20,010 --> 00:04:26,820
would be writing an implementation using

120
00:04:22,230 --> 00:04:28,080
that same representation so this is the

121
00:04:26,820 --> 00:04:30,840
overall architectural diagram of our

122
00:04:28,080 --> 00:04:32,130
library all of our code is written the

123
00:04:30,840 --> 00:04:33,599
code proof assistant and we do make

124
00:04:32,130 --> 00:04:35,180
heavy use of it it would be non-trivial

125
00:04:33,600 --> 00:04:37,650
to replicate in a different environment

126
00:04:35,180 --> 00:04:39,480
the specification of each operation is

127
00:04:37,650 --> 00:04:42,659
rather simple in terms of Cox standard

128
00:04:39,480 --> 00:04:44,490
every integer bignum functions and each

129
00:04:42,660 --> 00:04:46,050
generic cauldron we rape is proven

130
00:04:44,490 --> 00:04:49,100
correct against that specification

131
00:04:46,050 --> 00:04:52,320
before any specialization takes place

132
00:04:49,100 --> 00:04:54,300
now the demo I showed earlier had some

133
00:04:52,320 --> 00:04:56,130
experts chosen parameters that were fed

134
00:04:54,300 --> 00:04:58,260
were fed into the code generation and

135
00:04:56,130 --> 00:04:59,700
these are irrelevant for correctness but

136
00:04:58,260 --> 00:05:02,400
of course if you pick wrong values the

137
00:04:59,700 --> 00:05:03,690
code will be slow and after the

138
00:05:02,400 --> 00:05:05,429
parameters have been specified we'll

139
00:05:03,690 --> 00:05:07,320
have a certified compiler we built

140
00:05:05,430 --> 00:05:08,730
improved correcting clock that takes the

141
00:05:07,320 --> 00:05:11,940
generic code and the parameters to

142
00:05:08,730 --> 00:05:14,010
produce specialized code the focus for

143
00:05:11,940 --> 00:05:15,780
today will be the generic algorithms for

144
00:05:14,010 --> 00:05:18,000
finite field or in vik that we extracted

145
00:05:15,780 --> 00:05:20,789
from examples of extra special ice code

146
00:05:18,000 --> 00:05:23,010
and that we have not seen presented in

147
00:05:20,790 --> 00:05:25,560
this general form before however we will

148
00:05:23,010 --> 00:05:27,000
walk through a an example of how this

149
00:05:25,560 --> 00:05:29,100
code gets compiled to specific state

150
00:05:27,000 --> 00:05:30,570
code as well if you are interested in

151
00:05:29,100 --> 00:05:35,340
more details of the compilation pipeline

152
00:05:30,570 --> 00:05:37,050
these are present in your paper at the

153
00:05:35,340 --> 00:05:38,580
center of our library is a compiled time

154
00:05:37,050 --> 00:05:40,770
representation of field elements which

155
00:05:38,580 --> 00:05:42,390
is somewhat similar to the grade-school

156
00:05:40,770 --> 00:05:44,640
positional representation but there is a

157
00:05:42,390 --> 00:05:47,370
key difference so please play pay close

158
00:05:44,640 --> 00:05:48,810
attention to this slide each field

159
00:05:47,370 --> 00:05:50,850
element is represented as a sum of

160
00:05:48,810 --> 00:05:52,770
products so there is a list the list

161
00:05:50,850 --> 00:05:54,810
contains weights this is the left part

162
00:05:52,770 --> 00:05:57,270
of each pair and digits is the right

163
00:05:54,810 --> 00:05:59,790
part and one field element can be

164
00:05:57,270 --> 00:06:02,430
represented in many equivalent ways for

165
00:05:59,790 --> 00:06:04,920
example here we break up the number 876

166
00:06:02,430 --> 00:06:07,230
into five digits even though it is only

167
00:06:04,920 --> 00:06:10,430
three digits long normally the first

168
00:06:07,230 --> 00:06:12,870
digit is of value for with weight 200

169
00:06:10,430 --> 00:06:14,220
second digit is of value five with

170
00:06:12,870 --> 00:06:15,960
weight ten and then there is a third

171
00:06:14,220 --> 00:06:18,480
digit also with weight ten and value one

172
00:06:15,960 --> 00:06:20,430
and then there is a digit with value 16

173
00:06:18,480 --> 00:06:21,750
even though it is placed it just weight

174
00:06:20,430 --> 00:06:24,030
10 and even though weight 10 is

175
00:06:21,750 --> 00:06:26,580
separately present and 16 is at weight

176
00:06:24,030 --> 00:06:28,169
one and this is allowed in our library

177
00:06:26,580 --> 00:06:30,150
at compile time representations like

178
00:06:28,170 --> 00:06:31,770
this might occur and this in fact makes

179
00:06:30,150 --> 00:06:32,429
it significantly simpler to implement

180
00:06:31,770 --> 00:06:37,200
some of the fast

181
00:06:32,430 --> 00:06:38,280
tricks for module reduction here is an

182
00:06:37,200 --> 00:06:40,320
example code that uses this

183
00:06:38,280 --> 00:06:42,059
representation and it is not a toy

184
00:06:40,320 --> 00:06:43,620
example this implementation of

185
00:06:42,060 --> 00:06:45,380
schoolbook multiplication was actually

186
00:06:43,620 --> 00:06:48,240
used in the demo that I showed earlier

187
00:06:45,380 --> 00:06:49,170
for lines of code the proof is also on

188
00:06:48,240 --> 00:06:50,850
this slide even though it's grayed out

189
00:06:49,170 --> 00:06:53,070
and I do not recommend trying to read it

190
00:06:50,850 --> 00:06:54,660
but it's that short

191
00:06:53,070 --> 00:06:56,940
let's instead look at the example on the

192
00:06:54,660 --> 00:06:58,950
right-hand side of the slide the input

193
00:06:56,940 --> 00:07:01,380
dish two numbers one of them has three

194
00:06:58,950 --> 00:07:02,969
digits the other has two digits and this

195
00:07:01,380 --> 00:07:04,890
implementation generates the table of

196
00:07:02,970 --> 00:07:07,560
partial products as we learn in grade

197
00:07:04,890 --> 00:07:09,240
school and it does not even compact the

198
00:07:07,560 --> 00:07:10,500
partial partial products so if there are

199
00:07:09,240 --> 00:07:12,690
two partial products with weight n

200
00:07:10,500 --> 00:07:15,210
multiplication just leaves them as is

201
00:07:12,690 --> 00:07:17,400
the deduplication step will be performed

202
00:07:15,210 --> 00:07:19,890
later and the detailed implementation

203
00:07:17,400 --> 00:07:21,950
that is actually more general than what

204
00:07:19,890 --> 00:07:25,740
we see here so we do not get to that yet

205
00:07:21,950 --> 00:07:27,510
however it is not obvious how fast this

206
00:07:25,740 --> 00:07:29,580
code will execute because looking at it

207
00:07:27,510 --> 00:07:31,670
lately it looks like it might use

208
00:07:29,580 --> 00:07:33,930
dynamically allocated linked lists and

209
00:07:31,670 --> 00:07:35,520
perhaps even big numbers to represent

210
00:07:33,930 --> 00:07:38,690
the individual digits so we will need to

211
00:07:35,520 --> 00:07:42,950
step-by-step get rid of those concerns

212
00:07:38,690 --> 00:07:47,330
first let's get two straight line code

213
00:07:42,950 --> 00:07:49,890
so we will need to unroll this loop and

214
00:07:47,330 --> 00:07:51,359
we want to have for the values of the

215
00:07:49,890 --> 00:07:53,370
digits which I'm not sure my laser

216
00:07:51,360 --> 00:07:55,140
pointer is actually pointing to we'll

217
00:07:53,370 --> 00:07:56,550
hand instead of 18 here we would want to

218
00:07:55,140 --> 00:07:59,760
have a symbolic expression in terms of

219
00:07:56,550 --> 00:08:00,840
input variables and cork has this great

220
00:07:59,760 --> 00:08:02,849
built-in functionality called

221
00:08:00,840 --> 00:08:04,289
call-by-value evaluation with a black

222
00:08:02,850 --> 00:08:05,850
list so we can just specify which

223
00:08:04,290 --> 00:08:09,000
functions we do not want to be unfolded

224
00:08:05,850 --> 00:08:11,040
and in fact we go in and we find this

225
00:08:09,000 --> 00:08:12,830
implementation and see how this

226
00:08:11,040 --> 00:08:15,390
syntactic location in the template

227
00:08:12,830 --> 00:08:17,099
represents runtime multiplication and we

228
00:08:15,390 --> 00:08:18,479
just insert the wrapper definition there

229
00:08:17,100 --> 00:08:21,600
so that star is no different from the

230
00:08:18,480 --> 00:08:23,910
star underlined and then we call CB me

231
00:08:21,600 --> 00:08:27,540
with the runtime multiplication in the

232
00:08:23,910 --> 00:08:31,290
black list and here is a specialized

233
00:08:27,540 --> 00:08:33,360
version for 3x3 digit multiplication now

234
00:08:31,290 --> 00:08:34,860
we're not still all the way there

235
00:08:33,360 --> 00:08:36,780
because there even though there is a

236
00:08:34,860 --> 00:08:39,060
digit with weight one there are multiple

237
00:08:36,780 --> 00:08:41,429
digits with weight ten and even three

238
00:08:39,059 --> 00:08:44,250
digits with weight 100 and what we would

239
00:08:41,429 --> 00:08:47,520
like to have would be one digit for it

240
00:08:44,250 --> 00:08:48,540
per each weight however the problem is

241
00:08:47,520 --> 00:08:50,250
actually slightly harder than that

242
00:08:48,540 --> 00:08:52,020
because not only do we want to get rid

243
00:08:50,250 --> 00:08:55,140
of duplicates we want to have digits

244
00:08:52,020 --> 00:08:58,230
with compile time known weights so if

245
00:08:55,140 --> 00:09:00,360
your crypto library outputs a five

246
00:08:58,230 --> 00:09:02,430
element array you would expect that this

247
00:09:00,360 --> 00:09:03,810
array it represents a number in the

248
00:09:02,430 --> 00:09:06,089
manner that the first digit has weight

249
00:09:03,810 --> 00:09:06,989
one and the second one has some known

250
00:09:06,090 --> 00:09:09,180
weight to the third one

251
00:09:06,990 --> 00:09:10,440
some known weight and you don't want to

252
00:09:09,180 --> 00:09:12,660
need to look up at run-time what those

253
00:09:10,440 --> 00:09:14,430
weights are so instead of deduplication

254
00:09:12,660 --> 00:09:17,279
we actually need to perform an operation

255
00:09:14,430 --> 00:09:20,550
that gathers the way the weights that

256
00:09:17,279 --> 00:09:21,720
are desired in the output and does

257
00:09:20,550 --> 00:09:23,579
something with the weights that are in

258
00:09:21,720 --> 00:09:25,320
the input but not in doubt so for

259
00:09:23,580 --> 00:09:28,080
example if the input contains a digit

260
00:09:25,320 --> 00:09:30,630
with weight 500 but the output based

261
00:09:28,080 --> 00:09:32,550
system only contains weights 10 1 and

262
00:09:30,630 --> 00:09:34,470
hundred we need to do something with

263
00:09:32,550 --> 00:09:35,760
that 500 to get rid of it and we could

264
00:09:34,470 --> 00:09:37,410
rule it out we could say our codes

265
00:09:35,760 --> 00:09:39,180
should never generate this and therefore

266
00:09:37,410 --> 00:09:41,040
it's okay if we don't handle it but we

267
00:09:39,180 --> 00:09:42,540
tried that and it was a lot of work to

268
00:09:41,040 --> 00:09:45,420
rule it out in our proofs so instead we

269
00:09:42,540 --> 00:09:48,300
support it and turns out the reason nice

270
00:09:45,420 --> 00:09:50,490
fate is for it simply to place the value

271
00:09:48,300 --> 00:09:53,130
X that weighed 500 we multiply X by 5

272
00:09:50,490 --> 00:09:56,010
and stick it in 100 smiled proof is very

273
00:09:53,130 --> 00:09:57,570
simple and furthermore it actually adds

274
00:09:56,010 --> 00:10:00,779
more power to our library as other

275
00:09:57,570 --> 00:10:02,550
algorithms don't need to pay attention

276
00:10:00,779 --> 00:10:07,380
to what weights they generate in their

277
00:10:02,550 --> 00:10:09,510
output on this slide I have risked

278
00:10:07,380 --> 00:10:11,520
listed three famous tricks for module

279
00:10:09,510 --> 00:10:13,230
reduction so the first one is pretty old

280
00:10:11,520 --> 00:10:15,569
at least a couple hundred years the last

281
00:10:13,230 --> 00:10:18,120
one is from 2004 it was introduced in

282
00:10:15,570 --> 00:10:20,730
the paper that introduced curve to 255 1

283
00:10:18,120 --> 00:10:23,190
9 and all three of them rely on this

284
00:10:20,730 --> 00:10:24,750
insight that if your modulus is close to

285
00:10:23,190 --> 00:10:26,850
a weight that appears in the pace system

286
00:10:24,750 --> 00:10:29,430
then it is possible to speed up muscle

287
00:10:26,850 --> 00:10:32,190
reduction the way I like to think of

288
00:10:29,430 --> 00:10:34,170
this is that if the modulus is only C

289
00:10:32,190 --> 00:10:36,120
away from a power of two then that power

290
00:10:34,170 --> 00:10:39,000
of two is congruent to see in the field

291
00:10:36,120 --> 00:10:40,980
in question so we can perform özil

292
00:10:39,000 --> 00:10:43,170
reduction by just replacing the power of

293
00:10:40,980 --> 00:10:44,399
two in question with C and C going to be

294
00:10:43,170 --> 00:10:46,199
an arbitrary field element it might

295
00:10:44,399 --> 00:10:50,070
consist of multiple digits or it might

296
00:10:46,200 --> 00:10:53,670
just be one and in fact these three

297
00:10:50,070 --> 00:10:55,410
tricks are all the same so far the only

298
00:10:53,670 --> 00:10:57,329
difference comes in in how your

299
00:10:55,410 --> 00:10:59,300
represent C and which cases of the

300
00:10:57,329 --> 00:11:01,920
deduplication algorithm get triggered

301
00:10:59,300 --> 00:11:04,859
when gathering the digits for the

302
00:11:01,920 --> 00:11:06,660
desired output weights now I'm going to

303
00:11:04,860 --> 00:11:12,029
jump into a rather large example which

304
00:11:06,660 --> 00:11:13,260
will dissect step by step but first all

305
00:11:12,029 --> 00:11:15,620
the steps that we're going to dissect

306
00:11:13,260 --> 00:11:15,620
heart

307
00:11:15,649 --> 00:11:20,779
this steps represent their parts of the

308
00:11:17,990 --> 00:11:22,220
demo we are originally showed there is

309
00:11:20,779 --> 00:11:24,380
no other coat then where is describing

310
00:11:22,220 --> 00:11:28,010
this light in producing the C code there

311
00:11:24,380 --> 00:11:30,170
was a on the black screen so the module

312
00:11:28,010 --> 00:11:31,910
multiplication starts out with the two

313
00:11:30,170 --> 00:11:33,529
inputs and the module reduction

314
00:11:31,910 --> 00:11:35,930
coefficient C in associational

315
00:11:33,529 --> 00:11:37,699
representation as described earlier we

316
00:11:35,930 --> 00:11:40,550
use schoolbook multiplication whose code

317
00:11:37,699 --> 00:11:42,139
was on the slide then to perform module

318
00:11:40,550 --> 00:11:44,209
reduction we find all the weights

319
00:11:42,139 --> 00:11:46,399
divisible by 2 to the K which is

320
00:11:44,209 --> 00:11:49,399
congruent to see and replace them with a

321
00:11:46,399 --> 00:11:52,699
schoolbook multiplication by C this step

322
00:11:49,399 --> 00:11:53,930
works 1 1 weight at the time and again

323
00:11:52,699 --> 00:11:55,639
is very easy to prove correct for this

324
00:11:53,930 --> 00:11:57,199
reason and then we just run

325
00:11:55,639 --> 00:11:59,060
deduplication and the digital fixation

326
00:11:57,199 --> 00:12:02,560
actually has to done quite a bit of work

327
00:11:59,060 --> 00:12:05,719
at least in the case of cart over nn-19

328
00:12:02,560 --> 00:12:08,119
most commonly it will replace weights of

329
00:12:05,720 --> 00:12:09,949
the form C times B where C came from

330
00:12:08,120 --> 00:12:11,959
loss or reduction with digits of the

331
00:12:09,949 --> 00:12:14,810
form C times X at weight B because

332
00:12:11,959 --> 00:12:18,319
probably C is not present in an output

333
00:12:14,810 --> 00:12:20,689
list of desired weights and for this to

334
00:12:18,320 --> 00:12:23,209
be fast C and K need to be picked in a

335
00:12:20,690 --> 00:12:25,339
clever fashion there have been quite a

336
00:12:23,209 --> 00:12:26,810
bit of study about what are good values

337
00:12:25,339 --> 00:12:28,670
of C and K but for correctness is

338
00:12:26,810 --> 00:12:30,260
irrelevant if you put in bad values we

339
00:12:28,670 --> 00:12:34,729
got slow code even though it is

340
00:12:30,260 --> 00:12:38,839
technically still correct this picture

341
00:12:34,730 --> 00:12:41,360
is our generate code for 255 1 9 on

342
00:12:38,839 --> 00:12:42,949
32-bit machines and the same picture has

343
00:12:41,360 --> 00:12:44,990
also appeared in several papers

344
00:12:42,949 --> 00:12:46,790
discussing implementation of Kerr 255 1

345
00:12:44,990 --> 00:12:48,410
9 and handwritten code as an

346
00:12:46,790 --> 00:12:50,810
intermediate result on the way to the

347
00:12:48,410 --> 00:12:52,519
final code we will now explain the

348
00:12:50,810 --> 00:12:54,410
different coefficients appearing in this

349
00:12:52,519 --> 00:12:56,269
figure in terms of our deduplication

350
00:12:54,410 --> 00:12:59,589
order first

351
00:12:56,269 --> 00:13:01,880
the entries below the diagonal have a

352
00:12:59,589 --> 00:13:04,730
factor of 19 in front of each partial

353
00:13:01,880 --> 00:13:07,699
product this is there because reducing

354
00:13:04,730 --> 00:13:10,190
to to the 255 modulo 2 to the 255 minus

355
00:13:07,699 --> 00:13:12,680
19 gives you 19 and since there is no

356
00:13:10,190 --> 00:13:15,050
weight with say 2 through 26 times 19

357
00:13:12,680 --> 00:13:16,760
instead the value of the partial product

358
00:13:15,050 --> 00:13:20,689
is multiplied by 19 and the weight to

359
00:13:16,760 --> 00:13:22,550
226 gets used further there are some pre

360
00:13:20,690 --> 00:13:24,740
factors that are have nothing to do with

361
00:13:22,550 --> 00:13:27,260
module reduction at all in this

362
00:13:24,740 --> 00:13:30,620
checkerboard pattern we see well

363
00:13:27,260 --> 00:13:32,900
that either all or even indices have a

364
00:13:30,620 --> 00:13:34,790
brief factor of two and this is because

365
00:13:32,900 --> 00:13:36,260
the underlying based system is a

366
00:13:34,790 --> 00:13:38,329
non-uniform radius

367
00:13:36,260 --> 00:13:41,390
so the first digit gets 26 bits the

368
00:13:38,330 --> 00:13:43,400
second one gets 25 and so on so when you

369
00:13:41,390 --> 00:13:45,740
multiply two digits at weights two

370
00:13:43,400 --> 00:13:48,140
through 26 the resulting weight is two

371
00:13:45,740 --> 00:13:49,880
to the fifty-two but the positional

372
00:13:48,140 --> 00:13:53,689
system only includes the way to to the

373
00:13:49,880 --> 00:13:55,760
51 so the value of the digit gets scaled

374
00:13:53,690 --> 00:13:58,180
by two to compensate for the lack of the

375
00:13:55,760 --> 00:14:00,290
factor of the two in the weight and

376
00:13:58,180 --> 00:14:01,910
these happen to appear in this

377
00:14:00,290 --> 00:14:03,680
checkerboard pattern that I believe has

378
00:14:01,910 --> 00:14:06,520
also been independent independently

379
00:14:03,680 --> 00:14:09,380
derived but in our case we don't have to

380
00:14:06,520 --> 00:14:11,390
that's the final step before calling it

381
00:14:09,380 --> 00:14:12,890
done we need to assign fixed with

382
00:14:11,390 --> 00:14:14,330
integers for each intermediate result

383
00:14:12,890 --> 00:14:16,040
because so far we have been working

384
00:14:14,330 --> 00:14:18,350
under the assumption that each digit is

385
00:14:16,040 --> 00:14:19,310
represented as a big enough however this

386
00:14:18,350 --> 00:14:22,250
is actually pretty simple

387
00:14:19,310 --> 00:14:24,979
we simply guess some values within which

388
00:14:22,250 --> 00:14:28,430
the inputs lie and then track the bounds

389
00:14:24,980 --> 00:14:30,070
throughout the code adding up the upper

390
00:14:28,430 --> 00:14:33,140
and lower bounds as they accumulate

391
00:14:30,070 --> 00:14:34,880
until we reach a bound on the output and

392
00:14:33,140 --> 00:14:36,050
there is some carrying step which I'm

393
00:14:34,880 --> 00:14:37,939
not covering here but it's covered in

394
00:14:36,050 --> 00:14:40,339
the paper and this proved incorrect that

395
00:14:37,940 --> 00:14:42,620
then reduces the values of individual

396
00:14:40,340 --> 00:14:43,970
digits to within their starting ranges

397
00:14:42,620 --> 00:14:50,720
without changing the value of the field

398
00:14:43,970 --> 00:14:52,130
element now the thing that surprised me

399
00:14:50,720 --> 00:14:54,530
the most about this project was what

400
00:14:52,130 --> 00:14:56,930
took time in the beginning we spent

401
00:14:54,530 --> 00:14:58,970
several months working directly in the

402
00:14:56,930 --> 00:15:00,920
positional representation and we did

403
00:14:58,970 --> 00:15:02,390
manage to prove the first one of the

404
00:15:00,920 --> 00:15:05,420
three module reduction algorithms that I

405
00:15:02,390 --> 00:15:07,100
showed and it was still not quite

406
00:15:05,420 --> 00:15:08,540
complete because there was a case that

407
00:15:07,100 --> 00:15:10,040
it didn't handle optimally and we were

408
00:15:08,540 --> 00:15:11,870
rather dissatisfied with it and then we

409
00:15:10,040 --> 00:15:13,189
just essentially happened on to the

410
00:15:11,870 --> 00:15:15,710
associational representation and

411
00:15:13,190 --> 00:15:19,040
everything suddenly worked out in fact

412
00:15:15,710 --> 00:15:20,330
we had already implemented the second

413
00:15:19,040 --> 00:15:25,069
two Oren's by the time we started to

414
00:15:20,330 --> 00:15:26,630
considered some time was spent trying to

415
00:15:25,070 --> 00:15:28,790
get the built in partial production

416
00:15:26,630 --> 00:15:30,380
to evaluate fast enough for our purposes

417
00:15:28,790 --> 00:15:32,390
because coccus normally been used for

418
00:15:30,380 --> 00:15:34,430
pure mathematics or at least abstract

419
00:15:32,390 --> 00:15:40,110
study of algorithms and speak terms are

420
00:15:34,430 --> 00:15:41,459
rarely encountered and the same pattern

421
00:15:40,110 --> 00:15:43,050
Peet's for other algorithms that i did

422
00:15:41,459 --> 00:15:45,719
not cover today our library includes

423
00:15:43,050 --> 00:15:49,529
includes montgomery reduction it first

424
00:15:45,720 --> 00:15:50,970
took us more than a week to find out all

425
00:15:49,529 --> 00:15:52,890
the necessary invariants for proving

426
00:15:50,970 --> 00:15:55,320
montgomery reduction from various pieces

427
00:15:52,890 --> 00:15:57,689
of literature discussing it but once we

428
00:15:55,320 --> 00:15:58,920
got it we at one time decided to nuke

429
00:15:57,690 --> 00:16:00,570
our library and rewrite it from scratch

430
00:15:58,920 --> 00:16:02,040
and it took only a couple of hours to do

431
00:16:00,570 --> 00:16:06,390
the proof based on pencil and paper

432
00:16:02,040 --> 00:16:08,519
notes who had made the last time overall

433
00:16:06,390 --> 00:16:10,380
as for the technical deliverable in this

434
00:16:08,519 --> 00:16:12,149
project I am pretty satisfied with the

435
00:16:10,380 --> 00:16:15,240
shape of the code and the proofs they're

436
00:16:12,149 --> 00:16:16,680
surprisingly simple I would feel okay

437
00:16:15,240 --> 00:16:17,910
comfortable assigning some of them as

438
00:16:16,680 --> 00:16:21,420
homework assignments in undergraduate

439
00:16:17,910 --> 00:16:22,829
introductory class to caulk it is pretty

440
00:16:21,420 --> 00:16:26,819
cool that we can use one implementation

441
00:16:22,829 --> 00:16:28,800
for multiple primes and the performance

442
00:16:26,820 --> 00:16:30,540
is pretty good it is in fact as good as

443
00:16:28,800 --> 00:16:33,029
experts can get try writing in C of

444
00:16:30,540 --> 00:16:34,529
course it could be better if C compilers

445
00:16:33,029 --> 00:16:37,320
did a better job of register allocation

446
00:16:34,529 --> 00:16:39,839
and instruction scheduling maybe one day

447
00:16:37,320 --> 00:16:42,570
but not a part of this work and of

448
00:16:39,839 --> 00:16:44,699
course if clock was built for a compiler

449
00:16:42,570 --> 00:16:47,089
execution environment it would have run

450
00:16:44,699 --> 00:16:54,420
faster for us but so far we managed

451
00:16:47,089 --> 00:16:57,029
thank you very much and thanks for

452
00:16:54,420 --> 00:17:01,010
staying it's a time window any questions

453
00:16:57,029 --> 00:17:01,010
can you please come up to the microphone

454
00:17:03,679 --> 00:17:11,160
no questions at all I guess they're

455
00:17:06,750 --> 00:17:13,470
still all digesting do you want to tell

456
00:17:11,160 --> 00:17:18,660
us anything else that using the one

457
00:17:13,470 --> 00:17:20,309
minute you have extra we also proved

458
00:17:18,660 --> 00:17:21,959
correct some elliptic curve algorithms

459
00:17:20,309 --> 00:17:23,760
using this library but fortunately it

460
00:17:21,959 --> 00:17:25,230
did not fit in this paper so maybe one

461
00:17:23,760 --> 00:17:29,959
day we'll talk in a separate context

462
00:17:25,230 --> 00:17:29,959
mm-hmm okay well thank you very much

463
00:17:30,260 --> 00:17:32,320
you

