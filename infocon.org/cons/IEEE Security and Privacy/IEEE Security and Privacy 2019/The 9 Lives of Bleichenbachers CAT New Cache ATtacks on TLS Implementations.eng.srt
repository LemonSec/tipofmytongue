1
00:00:10,340 --> 00:00:13,610
good afternoon everyone thank you for

2
00:00:12,080 --> 00:00:15,670
the introduction it's a pleasure to be

3
00:00:13,610 --> 00:00:19,300
here

4
00:00:15,670 --> 00:00:23,140
work this work was done mainly by Al

5
00:00:19,300 --> 00:00:26,050
Ronan with some help with a David Wong

6
00:00:23,140 --> 00:00:28,320
and a robot Gillham and non-interference

7
00:00:26,050 --> 00:00:32,320
with of the rest

8
00:00:28,320 --> 00:00:34,690
unfortunately al couldn't make it to the

9
00:00:32,320 --> 00:00:39,460
conference nothing to do with the US

10
00:00:34,690 --> 00:00:47,070
administration so I drew the short straw

11
00:00:39,460 --> 00:00:50,280
and I will present the talk today so

12
00:00:47,070 --> 00:00:50,280
doesn't work

13
00:00:52,920 --> 00:01:00,549
beautiful how do we move thank you

14
00:00:57,519 --> 00:01:06,158
so we are going to talk about our psyche

15
00:01:00,549 --> 00:01:09,940
exchange in TLS and I'll read I'll

16
00:01:06,159 --> 00:01:12,640
repeat some of the concepts later but

17
00:01:09,940 --> 00:01:16,298
basically in TLS RSA uses what's called

18
00:01:12,640 --> 00:01:20,649
pkcs number one version 1.5 padding

19
00:01:16,299 --> 00:01:24,880
scheme and it was once the most popular

20
00:01:20,649 --> 00:01:27,850
TLS key exchange option but it is fallen

21
00:01:24,880 --> 00:01:30,939
out of a favor because first there were

22
00:01:27,850 --> 00:01:34,719
several attacks against RSA key exchange

23
00:01:30,939 --> 00:01:38,309
and it has no forward secrecy but it is

24
00:01:34,719 --> 00:01:42,369
still used being used so about 6% of the

25
00:01:38,310 --> 00:01:47,549
of the connections we're using RSA key

26
00:01:42,369 --> 00:01:51,749
exchange in in 2000 anything and because

27
00:01:47,549 --> 00:01:54,100
6% of the connection used it the

28
00:01:51,749 --> 00:01:56,880
browser's contain a several continue to

29
00:01:54,100 --> 00:02:00,280
support it there are better alternatives

30
00:01:56,880 --> 00:02:05,199
but there are not they're not everyone

31
00:02:00,280 --> 00:02:06,100
uses those so what have we done we

32
00:02:05,200 --> 00:02:08,800
investigated

33
00:02:06,100 --> 00:02:13,060
nine different implementation to see if

34
00:02:08,800 --> 00:02:15,660
we can attack the implementation using

35
00:02:13,060 --> 00:02:18,750
cash attacks if they have

36
00:02:15,660 --> 00:02:20,340
vulnerabilities that allow us to

37
00:02:18,750 --> 00:02:23,490
to create what's called the padding

38
00:02:20,340 --> 00:02:27,020
Oracle we found out that out of these

39
00:02:23,490 --> 00:02:30,240
nine seven were vulnerable to we're not

40
00:02:27,020 --> 00:02:35,190
vulnerable ''tis are in all phases of

41
00:02:30,240 --> 00:02:38,550
the RSA of the padding scheme a and Link

42
00:02:35,190 --> 00:02:40,620
and this is not good particularly

43
00:02:38,550 --> 00:02:44,040
because most of these implementations

44
00:02:40,620 --> 00:02:45,720
try to protect against this specific

45
00:02:44,040 --> 00:02:48,690
attack so they try to protect against

46
00:02:45,720 --> 00:02:53,040
Blankenbaker attacks and most of them

47
00:02:48,690 --> 00:02:54,720
failed so we broke 6% of the connections

48
00:02:53,040 --> 00:02:58,200
on the Internet does that really matter

49
00:02:54,720 --> 00:02:58,890
and the answer is that yes it does

50
00:02:58,200 --> 00:03:01,950
matter

51
00:02:58,890 --> 00:03:04,470
we also show a downgrade attack so we

52
00:03:01,950 --> 00:03:07,320
take a connection that was not supposed

53
00:03:04,470 --> 00:03:09,690
to run RSA key exchange and we don't

54
00:03:07,320 --> 00:03:13,440
really need to use a RSA key exchange

55
00:03:09,690 --> 00:03:17,640
and every server that supports this and

56
00:03:13,440 --> 00:03:19,500
runs till it's a vulnerable

57
00:03:17,640 --> 00:03:22,920
implementation is vulnerable to the

58
00:03:19,500 --> 00:03:24,930
attack for that we created a new

59
00:03:22,920 --> 00:03:27,530
parallelization technique that allows to

60
00:03:24,930 --> 00:03:30,510
run our say padding Oracle attacks in

61
00:03:27,530 --> 00:03:34,350
parallel and that's the main thing I

62
00:03:30,510 --> 00:03:36,090
will talk about today we do assume that

63
00:03:34,350 --> 00:03:39,109
we have the ability to do a cache attack

64
00:03:36,090 --> 00:03:43,940
on multiple TLS servers which is

65
00:03:39,110 --> 00:03:47,010
realistic under certain scenarios but

66
00:03:43,940 --> 00:03:50,160
frankly not many and we use this to

67
00:03:47,010 --> 00:03:51,000
boost success probability but this is

68
00:03:50,160 --> 00:03:53,640
something I don't know talk it's

69
00:03:51,000 --> 00:03:57,989
standard technique in a

70
00:03:53,640 --> 00:04:01,980
man-in-the-middle attacks so a bit of

71
00:03:57,989 --> 00:04:05,489
background on the RSA should be known

72
00:04:01,980 --> 00:04:08,399
are say we choose a pray private key

73
00:04:05,489 --> 00:04:12,780
select a two prime numbers multiply them

74
00:04:08,400 --> 00:04:19,108
to get a public modulus we have a public

75
00:04:12,780 --> 00:04:22,320
encryption public exponent e which is

76
00:04:19,108 --> 00:04:24,690
usually a fixed we have a public a

77
00:04:22,320 --> 00:04:26,849
private exponent D we do the encryption

78
00:04:24,690 --> 00:04:31,469
by taking a message raising it to the

79
00:04:26,849 --> 00:04:32,490
power of E modulo M now this is nice

80
00:04:31,470 --> 00:04:34,919
mass that's what

81
00:04:32,490 --> 00:04:37,139
we see in first-year a course on

82
00:04:34,919 --> 00:04:40,440
computer science can we really use it

83
00:04:37,139 --> 00:04:44,009
and the answer is no we have some issues

84
00:04:40,440 --> 00:04:46,889
and the issues are one of them it's an

85
00:04:44,009 --> 00:04:52,069
example if we have E as 3 which was once

86
00:04:46,889 --> 00:04:55,080
a popular choice and M message M a 1000

87
00:04:52,069 --> 00:04:58,979
raised m to the power of E this is still

88
00:04:55,080 --> 00:05:01,198
less than 2 to the 4 to the of less than

89
00:04:58,979 --> 00:05:05,340
the size of n we can easily do a

90
00:05:01,199 --> 00:05:09,630
logarithm on real so we can find M so we

91
00:05:05,340 --> 00:05:12,388
need to use larger messages also if we

92
00:05:09,630 --> 00:05:14,400
have a very simple set of messages that

93
00:05:12,389 --> 00:05:16,409
we send if we use this approach we get

94
00:05:14,400 --> 00:05:19,169
the same message equipped at the same

95
00:05:16,409 --> 00:05:21,659
way every time so we are vulnerable to

96
00:05:19,169 --> 00:05:24,840
dictionary attacks it's easier to detect

97
00:05:21,659 --> 00:05:29,039
repetitions and we want to to make sure

98
00:05:24,840 --> 00:05:33,060
that our M is a at least partly random

99
00:05:29,039 --> 00:05:36,419
and that's what pkcs number one version

100
00:05:33,060 --> 00:05:39,990
1.5 padding scheme tries to to do it

101
00:05:36,419 --> 00:05:43,289
basically pets the plaintext and

102
00:05:39,990 --> 00:05:46,740
encrypted the encrypted after padding so

103
00:05:43,289 --> 00:05:49,440
padding increases the size to the RSA

104
00:05:46,740 --> 00:05:53,330
key length and its edge randomization

105
00:05:49,440 --> 00:05:55,860
the example using TLS 1.2 we have a

106
00:05:53,330 --> 00:06:00,318
preamble that is always 2 bytes that

107
00:05:55,860 --> 00:06:03,330
values 0 0 0 2 then we have a set of

108
00:06:00,319 --> 00:06:07,080
random numbers a random bytes that are

109
00:06:03,330 --> 00:06:09,630
nonzero minimum number of 8 bytes then

110
00:06:07,080 --> 00:06:12,270
we have one byte that is 0 which signals

111
00:06:09,630 --> 00:06:14,759
the end of deep padding and then

112
00:06:12,270 --> 00:06:17,818
whatever is left is the original message

113
00:06:14,759 --> 00:06:24,719
which until s 1.2 will always be 42 48

114
00:06:17,819 --> 00:06:26,460
bytes now pedagogical attacks I will not

115
00:06:24,719 --> 00:06:30,389
go into the details it's too much maths

116
00:06:26,460 --> 00:06:33,030
for a talk like that the idea is that we

117
00:06:30,389 --> 00:06:35,130
have an Oracle which is some sort of a

118
00:06:33,030 --> 00:06:36,679
mythical creature that gives us answers

119
00:06:35,130 --> 00:06:39,840
to questions that we cannot answer

120
00:06:36,680 --> 00:06:42,060
ourselves and in this case we give the

121
00:06:39,840 --> 00:06:45,539
Oracle a ciphertext and what the Oracle

122
00:06:42,060 --> 00:06:46,139
tells us is whether the in plain text

123
00:06:45,539 --> 00:06:49,620
that matter

124
00:06:46,139 --> 00:06:52,129
this ciphertext is at the format the

125
00:06:49,620 --> 00:06:54,689
correct format for our padding scheme so

126
00:06:52,129 --> 00:06:56,610
we'll have multiple Oracle's and in the

127
00:06:54,689 --> 00:06:58,620
paper we investigate multiple Oracle's

128
00:06:56,610 --> 00:07:01,560
to the level of how much they match to

129
00:06:58,620 --> 00:07:03,360
the to the scheme we can match on the

130
00:07:01,560 --> 00:07:05,069
first byte we can match to see that we

131
00:07:03,360 --> 00:07:09,330
have at least eight random bytes all

132
00:07:05,069 --> 00:07:12,360
sort of tests we can do and the idea

133
00:07:09,330 --> 00:07:14,688
with the attack now that we have this

134
00:07:12,360 --> 00:07:17,520
Oracle we start sending it every

135
00:07:14,689 --> 00:07:19,229
ciphertext that we generate and check

136
00:07:17,520 --> 00:07:21,779
the answers and try to guess the message

137
00:07:19,229 --> 00:07:23,250
from this answer from these answers so

138
00:07:21,779 --> 00:07:27,919
we're not breaking the key were just

139
00:07:23,250 --> 00:07:31,080
breaking the decrypting the message and

140
00:07:27,919 --> 00:07:34,378
the typical attack is two steps the

141
00:07:31,080 --> 00:07:37,800
first we find the blinding factor so if

142
00:07:34,379 --> 00:07:42,240
we multiply M by s modulo n we get to a

143
00:07:37,800 --> 00:07:44,909
small interval and the second step what

144
00:07:42,240 --> 00:07:48,839
we do is we iteratively reduce this

145
00:07:44,909 --> 00:07:51,509
range so each with each query our range

146
00:07:48,839 --> 00:07:55,800
gets smaller and smaller and after

147
00:07:51,509 --> 00:07:57,830
roughly 2048 queries we'll get the range

148
00:07:55,800 --> 00:08:02,159
of size 1 and that will give us the

149
00:07:57,830 --> 00:08:03,990
message or to give the message x by a

150
00:08:02,159 --> 00:08:05,789
number and we just need to multiply by

151
00:08:03,990 --> 00:08:08,430
the inverse of that number and we find

152
00:08:05,789 --> 00:08:11,729
everything find the number so this is

153
00:08:08,430 --> 00:08:16,800
how it works the maths is a bit more a

154
00:08:11,729 --> 00:08:18,930
complex but we will ignore it for now so

155
00:08:16,800 --> 00:08:21,270
now what we want to do with that we want

156
00:08:18,930 --> 00:08:24,960
cookies why do we want cookies because

157
00:08:21,270 --> 00:08:27,839
if we get the cookie that of a session a

158
00:08:24,960 --> 00:08:29,549
session cookie for the user for the

159
00:08:27,839 --> 00:08:32,640
connection to it back we can use that to

160
00:08:29,550 --> 00:08:34,229
masquerade the user and these cookies

161
00:08:32,640 --> 00:08:36,088
are sent the beginning of every TLS

162
00:08:34,229 --> 00:08:40,050
connection so we have a simple attack

163
00:08:36,089 --> 00:08:41,459
against that we take we listen to the

164
00:08:40,049 --> 00:08:43,319
network so we have our attacker

165
00:08:41,458 --> 00:08:46,319
listening to the network they get the

166
00:08:43,320 --> 00:08:48,630
TLS handshake first message they use

167
00:08:46,320 --> 00:08:50,399
Blake and backer to decrypt this and

168
00:08:48,630 --> 00:08:52,769
decrypt the premaster secret which is

169
00:08:50,399 --> 00:08:55,890
used to decorate to encrypt the and the

170
00:08:52,769 --> 00:08:57,510
whole community exchange and then the

171
00:08:55,890 --> 00:08:59,439
Crypt is use it to decrypt the first

172
00:08:57,510 --> 00:09:03,339
message and we go to cook

173
00:08:59,440 --> 00:09:04,660
and that's beautiful and as I said it

174
00:09:03,339 --> 00:09:06,430
allows us oh sorry

175
00:09:04,660 --> 00:09:09,850
let's see graphically because it looks

176
00:09:06,430 --> 00:09:12,149
nice and thanks to it yeah so we have

177
00:09:09,850 --> 00:09:14,199
our bank we have our used there

178
00:09:12,149 --> 00:09:17,139
Cookie Monster listens to the

179
00:09:14,199 --> 00:09:19,628
communication runs the Blake and Bukka

180
00:09:17,139 --> 00:09:23,199
attack it's two thousand messages there

181
00:09:19,629 --> 00:09:25,480
and we need to have of course our cat

182
00:09:23,199 --> 00:09:32,319
listening to the cache to get the Oracle

183
00:09:25,480 --> 00:09:34,269
and we got the cookie now we got only 6%

184
00:09:32,319 --> 00:09:37,029
of the connections this way so now we

185
00:09:34,269 --> 00:09:39,399
want to get more of their more of those

186
00:09:37,029 --> 00:09:42,100
so we use done with the attack and the

187
00:09:39,399 --> 00:09:43,810
idea is very simple we have our Cookie

188
00:09:42,100 --> 00:09:46,449
Monster instead of passing the messages

189
00:09:43,810 --> 00:09:49,959
it changes in the messages it tells the

190
00:09:46,449 --> 00:09:52,029
server our client only support RSA key

191
00:09:49,959 --> 00:09:53,800
exchange please use our say key exchange

192
00:09:52,029 --> 00:09:57,939
and the server will comply with that and

193
00:09:53,800 --> 00:10:00,370
we'll get everything working so as long

194
00:09:57,939 --> 00:10:04,269
as the server supports our say it works

195
00:10:00,370 --> 00:10:08,130
we can do the downgrade for a TLS 1.3

196
00:10:04,269 --> 00:10:10,389
it's not our ID but it can be done

197
00:10:08,130 --> 00:10:13,209
require active man in the middle but

198
00:10:10,389 --> 00:10:17,139
that's an i if it's plausible a attack

199
00:10:13,209 --> 00:10:19,959
model so do we have the cookie and the

200
00:10:17,139 --> 00:10:21,579
answer is unfortunately not the reason

201
00:10:19,959 --> 00:10:25,239
that we don't have the cookie is that

202
00:10:21,579 --> 00:10:26,949
our browsers wait for 30 seconds for

203
00:10:25,240 --> 00:10:28,839
connection creation if the connection

204
00:10:26,949 --> 00:10:31,689
doesn't happen in 30 seconds they will

205
00:10:28,839 --> 00:10:35,949
drop it but with most proud browsers do

206
00:10:31,689 --> 00:10:39,420
it in these 30 seconds we need to have

207
00:10:35,949 --> 00:10:41,859
to 2048 sequential queries and

208
00:10:39,420 --> 00:10:44,680
unfortunately we have time for about 600

209
00:10:41,860 --> 00:10:47,290
if we are lucky so we need to do

210
00:10:44,680 --> 00:10:48,939
something better so what's something

211
00:10:47,290 --> 00:10:50,860
better is to do parallel downgrade

212
00:10:48,939 --> 00:10:53,889
attack we assume that we have multiple

213
00:10:50,860 --> 00:10:56,620
servers and some companies will reuse

214
00:10:53,889 --> 00:10:58,839
our their certificates on all the

215
00:10:56,620 --> 00:11:00,879
servers because they want to have the

216
00:10:58,839 --> 00:11:04,449
same they want to be able to shift a

217
00:11:00,879 --> 00:11:06,309
communication between those so we have

218
00:11:04,449 --> 00:11:10,959
that working and we now attack all of

219
00:11:06,309 --> 00:11:12,110
them so the I didn't want to paralyze

220
00:11:10,959 --> 00:11:16,189
this on

221
00:11:12,110 --> 00:11:18,920
all across all these servers and we

222
00:11:16,190 --> 00:11:21,290
treat each servers in Oracle and we know

223
00:11:18,920 --> 00:11:24,530
that we can do parallelization so do we

224
00:11:21,290 --> 00:11:28,040
have the cookie and the answer is again

225
00:11:24,530 --> 00:11:30,350
unfortunately no because we need 2048

226
00:11:28,040 --> 00:11:32,870
sequential queries each query depends on

227
00:11:30,350 --> 00:11:35,060
the results of the earlier result you

228
00:11:32,870 --> 00:11:39,160
can't just divide these two 20 servers

229
00:11:35,060 --> 00:11:43,339
and get them in 200 queries each and

230
00:11:39,160 --> 00:11:45,230
again we have time for 600 so now what

231
00:11:43,340 --> 00:11:49,400
we want to do is a parallel padding

232
00:11:45,230 --> 00:11:51,380
Oracle attack and the idea is that if

233
00:11:49,400 --> 00:11:55,990
they lease based on if we start this

234
00:11:51,380 --> 00:11:55,990
padding Oracle attack and we start a

235
00:11:56,830 --> 00:12:02,450
bounding the bar the interval we get at

236
00:11:59,990 --> 00:12:05,390
some stage to a small interval it is not

237
00:12:02,450 --> 00:12:07,190
large enough to break a small enough to

238
00:12:05,390 --> 00:12:10,400
break it to brute forcing but it's

239
00:12:07,190 --> 00:12:13,850
smaller than the full the full Aria and

240
00:12:10,400 --> 00:12:16,579
we run it in parallel multiple attacks

241
00:12:13,850 --> 00:12:19,760
what we'll have is multiple different

242
00:12:16,580 --> 00:12:22,790
intervals and the beautiful with the

243
00:12:19,760 --> 00:12:25,370
mathematics there is that this fits well

244
00:12:22,790 --> 00:12:27,939
within the bond even catice on a hidden

245
00:12:25,370 --> 00:12:30,200
number problem so what we have is

246
00:12:27,940 --> 00:12:32,480
basically is an instance of the hidden

247
00:12:30,200 --> 00:12:33,980
number problem we take this hidden

248
00:12:32,480 --> 00:12:35,540
number probe we create the instance of

249
00:12:33,980 --> 00:12:37,430
hidden number problem convert it to a

250
00:12:35,540 --> 00:12:43,130
lattice problem standard technique and

251
00:12:37,430 --> 00:12:46,849
solve and we get the results so again we

252
00:12:43,130 --> 00:12:48,500
have our Cookie Monster listening to the

253
00:12:46,850 --> 00:12:52,610
connection between the server and the

254
00:12:48,500 --> 00:12:54,950
client it breaks this connection instead

255
00:12:52,610 --> 00:12:57,530
of returning the response to the client

256
00:12:54,950 --> 00:13:01,850
to the client it runs multiple queries

257
00:12:57,530 --> 00:13:05,270
on multiple servers at the end puts

258
00:13:01,850 --> 00:13:10,640
everything into a lattice and we have a

259
00:13:05,270 --> 00:13:12,829
cookie so we have new techniques for

260
00:13:10,640 --> 00:13:14,750
doing micro architectural padding Oracle

261
00:13:12,830 --> 00:13:17,260
attacks I'm not talking I haven't talked

262
00:13:14,750 --> 00:13:20,740
about the cache attacks in themselves so

263
00:13:17,260 --> 00:13:24,160
if you are interested look at the paper

264
00:13:20,740 --> 00:13:29,560
we have a new parallelization technique

265
00:13:24,160 --> 00:13:32,650
that they down downgrades a the

266
00:13:29,560 --> 00:13:37,089
connection to IRSA and manages to do it

267
00:13:32,650 --> 00:13:39,730
within the time and we disclosed it to

268
00:13:37,090 --> 00:13:44,050
everyone everyone patches their code

269
00:13:39,730 --> 00:13:45,820
with some level of success everyone

270
00:13:44,050 --> 00:13:50,589
created the CV so it looks like a

271
00:13:45,820 --> 00:13:52,780
fastened paper now and the other issue

272
00:13:50,590 --> 00:13:55,090
that remains is that everyone tried to

273
00:13:52,780 --> 00:13:56,470
solve these cache attacks or protect

274
00:13:55,090 --> 00:14:00,550
against cache attacks create constant

275
00:13:56,470 --> 00:14:04,570
time code for RSA padding schemes most

276
00:14:00,550 --> 00:14:07,180
of them did not get it the rest you can

277
00:14:04,570 --> 00:14:09,480
find in the paper and I will be happy to

278
00:14:07,180 --> 00:14:09,479
take questions

279
00:14:11,010 --> 00:14:16,850
[Applause]

280
00:14:27,890 --> 00:14:31,069
I just wanted to get you to say a couple

281
00:14:29,840 --> 00:14:32,840
of words about the active man in the

282
00:14:31,070 --> 00:14:35,420
middle attack does it have a particular

283
00:14:32,840 --> 00:14:37,220
signature that could be looked for to

284
00:14:35,420 --> 00:14:40,310
see if somebody's trying to employ that

285
00:14:37,220 --> 00:14:42,290
the active man in the middle attack well

286
00:14:40,310 --> 00:14:44,500
for the active menu in the middle attack

287
00:14:42,290 --> 00:14:47,150
what we'll get you'll get a client that

288
00:14:44,500 --> 00:14:51,830
wants only to connect communicate over

289
00:14:47,150 --> 00:14:55,640
RSA key exchange which is not standard

290
00:14:51,830 --> 00:14:57,200
or not supported by many the problem

291
00:14:55,640 --> 00:15:00,230
with that is that if people were willing

292
00:14:57,200 --> 00:15:01,580
to not accept these connections then we

293
00:15:00,230 --> 00:15:04,870
wouldn't have had this problem in the

294
00:15:01,580 --> 00:15:07,790
first place the other thing is that

295
00:15:04,870 --> 00:15:10,460
again for the client we rely on the

296
00:15:07,790 --> 00:15:12,439
beast attack so we still have a SAM site

297
00:15:10,460 --> 00:15:14,780
trying to run this connection at the

298
00:15:12,440 --> 00:15:16,520
client you'll get many many many of

299
00:15:14,780 --> 00:15:20,000
those failing connection at the servers

300
00:15:16,520 --> 00:15:25,910
so there are some indications if anyone

301
00:15:20,000 --> 00:15:28,190
wants to look for those I'll ask a

302
00:15:25,910 --> 00:15:31,069
question can you say a little bit about

303
00:15:28,190 --> 00:15:38,450
where you see the colocation on the

304
00:15:31,070 --> 00:15:41,960
server side as possible scenario well

305
00:15:38,450 --> 00:15:45,680
this is a difficult problem to solve

306
00:15:41,960 --> 00:15:49,540
we've seen many papers even recently

307
00:15:45,680 --> 00:15:53,089
showing that colocation is possible and

308
00:15:49,540 --> 00:15:57,130
I can't say what the likelihood is to

309
00:15:53,090 --> 00:16:02,390
get five or six say collocations

310
00:15:57,130 --> 00:16:05,240
concurrently and so yes it's it's

311
00:16:02,390 --> 00:16:09,470
difficult it's not an easy it's not an

312
00:16:05,240 --> 00:16:12,230
easy attack oh I I assume that most

313
00:16:09,470 --> 00:16:14,000
servers will have problems that are more

314
00:16:12,230 --> 00:16:19,280
pressing and more important to solve

315
00:16:14,000 --> 00:16:22,610
before we try these addresses I briefly

316
00:16:19,280 --> 00:16:25,670
you said that there was a way you could

317
00:16:22,610 --> 00:16:29,800
do this in TLS 1.3 as far as I

318
00:16:25,670 --> 00:16:32,990
understood in TLS 1.3 the the set of

319
00:16:29,800 --> 00:16:34,760
supported encryption schemes are signed

320
00:16:32,990 --> 00:16:37,420
by both sides so I was wondering

321
00:16:34,760 --> 00:16:40,580
wouldn't that stop the downgrade attack

322
00:16:37,420 --> 00:16:41,160
in most cases the its assigned by both

323
00:16:40,580 --> 00:16:44,100
sigh

324
00:16:41,160 --> 00:16:50,910
and pls 1.3 doesn't support I say key

325
00:16:44,100 --> 00:16:56,310
exchange so now I know that's why we

326
00:16:50,910 --> 00:16:58,529
need the Yale here is I don't remember

327
00:16:56,310 --> 00:17:02,849
what we did was download downgrade to

328
00:16:58,529 --> 00:17:06,000
1.2 or we use the same certificate for

329
00:17:02,850 --> 00:17:08,039
that we break with RSA one with a TLS

330
00:17:06,000 --> 00:17:10,169
1.2 and under the assumption that they

331
00:17:08,039 --> 00:17:19,608
use the same certificate for our sake

332
00:17:10,169 --> 00:17:24,179
signing right let's thank you

333
00:17:19,608 --> 00:17:24,178
[Applause]

