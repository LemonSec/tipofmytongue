1
00:00:09,139 --> 00:00:17,539
all right things it's my mic okay

2
00:00:13,429 --> 00:00:22,070
all right so thank you for attending my

3
00:00:17,539 --> 00:00:25,849
talk myself I am a PhD student of Robert

4
00:00:22,070 --> 00:00:28,730
University my my research focuses mainly

5
00:00:25,849 --> 00:00:29,990
on cryptographic systems in the wild and

6
00:00:28,730 --> 00:00:34,519
I'm also an independent security

7
00:00:29,990 --> 00:00:37,339
researcher at midnight blue labs Michael

8
00:00:34,519 --> 00:00:39,830
assists my this was a collaboration with

9
00:00:37,339 --> 00:00:41,540
benefi host o is an assistant professor

10
00:00:39,830 --> 00:00:43,460
at the Open University also in the

11
00:00:41,540 --> 00:00:48,920
Netherlands and he focuses mainly on

12
00:00:43,460 --> 00:00:51,260
correct on correctness of systems so

13
00:00:48,920 --> 00:00:53,210
what is the self encrypting drive well

14
00:00:51,260 --> 00:00:56,869
this is supposed to be obvious but it's

15
00:00:53,210 --> 00:00:58,820
just just a handful of slides so in

16
00:00:56,869 --> 00:01:00,680
traditional and Christian you have like

17
00:00:58,820 --> 00:01:03,530
an encryption key and algorithm and some

18
00:01:00,680 --> 00:01:05,360
some plaintext coming in and ciphertext

19
00:01:03,530 --> 00:01:08,360
going out which then stored in a storage

20
00:01:05,360 --> 00:01:11,119
medium and obviously you're not supposed

21
00:01:08,360 --> 00:01:13,039
to be able to recover anything from that

22
00:01:11,119 --> 00:01:16,340
ciphertext you store in a storage medium

23
00:01:13,040 --> 00:01:18,440
the difference is here in self

24
00:01:16,340 --> 00:01:22,210
encrypting approach is that everything's

25
00:01:18,440 --> 00:01:25,940
integrated into a single say device so

26
00:01:22,210 --> 00:01:27,770
so although all the hassle of encrypting

27
00:01:25,940 --> 00:01:29,259
is all done for you so basically

28
00:01:27,770 --> 00:01:32,090
everything that you store in the drive

29
00:01:29,260 --> 00:01:34,430
will end up encrypted and become

30
00:01:32,090 --> 00:01:36,710
decrypted once you unlock the drive so

31
00:01:34,430 --> 00:01:38,570
basically you start up your PC you enter

32
00:01:36,710 --> 00:01:48,280
a password and then all the encryption

33
00:01:38,570 --> 00:01:51,500
is done for you yes okay so these things

34
00:01:48,280 --> 00:01:54,260
aren't magical devices the earth these

35
00:01:51,500 --> 00:01:58,490
are just ARM cores in fact which runs

36
00:01:54,260 --> 00:02:01,820
software and you can see that from data

37
00:01:58,490 --> 00:02:04,509
sheets and here's another and in fact

38
00:02:01,820 --> 00:02:07,158
even these things have like JTAG

39
00:02:04,510 --> 00:02:09,440
connectors like lots of them not all of

40
00:02:07,159 --> 00:02:12,739
them and and there's another example of

41
00:02:09,440 --> 00:02:15,409
one of those and if marketing deserves

42
00:02:12,739 --> 00:02:17,180
any credibility you should run to your

43
00:02:15,409 --> 00:02:18,950
hardware store today and ditch all your

44
00:02:17,180 --> 00:02:20,360
software encryption and change it with

45
00:02:18,950 --> 00:02:22,720
hardware because it's supposed to be

46
00:02:20,360 --> 00:02:22,720
superior

47
00:02:23,080 --> 00:02:28,240
like in in a management point of view a

48
00:02:26,170 --> 00:02:31,030
key management that that may make some

49
00:02:28,240 --> 00:02:34,300
sense but in terms of security there's

50
00:02:31,030 --> 00:02:35,650
there's definitely not true but we'll

51
00:02:34,300 --> 00:02:38,950
get to that later oh by the way

52
00:02:35,650 --> 00:02:41,320
BitLocker the full disk encryption to

53
00:02:38,950 --> 00:02:41,859
integrated into Microsoft Windows by

54
00:02:41,320 --> 00:02:44,950
default

55
00:02:41,860 --> 00:02:46,870
trustees drives to do a good job so if

56
00:02:44,950 --> 00:02:49,359
it detects that your Drive supports self

57
00:02:46,870 --> 00:02:52,140
encryption it will actually delegate it

58
00:02:49,360 --> 00:02:54,220
to the drive and do nothing on its own

59
00:02:52,140 --> 00:02:56,950
so what are the actual security

60
00:02:54,220 --> 00:02:58,480
guarantees of these things first we'll

61
00:02:56,950 --> 00:03:01,179
take theoretical approach you'll dive

62
00:02:58,480 --> 00:03:03,280
into the practice later so there's

63
00:03:01,180 --> 00:03:05,050
typically three attacker models in full

64
00:03:03,280 --> 00:03:08,890
disk encryption and all of them involve

65
00:03:05,050 --> 00:03:13,480
physical access by an adversary so the

66
00:03:08,890 --> 00:03:15,790
first one your PC is on second the PCs

67
00:03:13,480 --> 00:03:21,100
off and the victim is not aware that

68
00:03:15,790 --> 00:03:23,500
there's been physical access and PCs and

69
00:03:21,100 --> 00:03:26,290
the third is a PC is off and the victim

70
00:03:23,500 --> 00:03:28,510
is actually aware so you cannot rely on

71
00:03:26,290 --> 00:03:31,179
the victim entering any secret key

72
00:03:28,510 --> 00:03:32,859
information whatsoever or the drivers

73
00:03:31,180 --> 00:03:36,640
lost or stolen which ends up in the same

74
00:03:32,860 --> 00:03:39,160
situation and so let's first look on at

75
00:03:36,640 --> 00:03:41,519
this scenario so software encryption is

76
00:03:39,160 --> 00:03:43,930
inherently weak if the PC is on and

77
00:03:41,520 --> 00:03:47,140
that's because the secret key is kept in

78
00:03:43,930 --> 00:03:49,150
RAM and it it needs that to operate so

79
00:03:47,140 --> 00:03:51,760
in this situation there's cold boot

80
00:03:49,150 --> 00:03:54,580
attack so basically reboot the PC and

81
00:03:51,760 --> 00:03:58,239
then run a custom OS and extract the key

82
00:03:54,580 --> 00:04:02,050
from RAM or DMA attack so some some DMA

83
00:03:58,240 --> 00:04:04,690
interface and hardware encryption is not

84
00:04:02,050 --> 00:04:07,060
as immune to this in in theory because

85
00:04:04,690 --> 00:04:10,060
the key is not supposed to be stored in

86
00:04:07,060 --> 00:04:12,160
RAM however in practice it is almost

87
00:04:10,060 --> 00:04:14,590
always stored in RAM and that's in order

88
00:04:12,160 --> 00:04:17,409
to support suspend to RAM so that's a

89
00:04:14,590 --> 00:04:20,290
standby mode and basically if you if you

90
00:04:17,410 --> 00:04:21,820
put your PC into this mode then the PC

91
00:04:20,290 --> 00:04:24,100
will turn off all the peripheral devices

92
00:04:21,820 --> 00:04:25,599
and when you turn it back on then the

93
00:04:24,100 --> 00:04:27,580
drive is locked and needs to be unlocked

94
00:04:25,600 --> 00:04:30,040
again and as a user you don't have to

95
00:04:27,580 --> 00:04:32,229
enter a key so guess where the key came

96
00:04:30,040 --> 00:04:35,110
from exactly that was all the time it

97
00:04:32,230 --> 00:04:36,230
wasn't ran another thing is that the

98
00:04:35,110 --> 00:04:37,700
keys main

99
00:04:36,230 --> 00:04:39,800
not necessarily being the realm of the

100
00:04:37,700 --> 00:04:43,880
host PC but it needs to be in the

101
00:04:39,800 --> 00:04:45,560
controller and those aren't secure heart

102
00:04:43,880 --> 00:04:48,310
that's not secure Hardware about any

103
00:04:45,560 --> 00:04:51,200
standard like in fact there's even

104
00:04:48,310 --> 00:04:53,960
debugging interfaces on the PCB for for

105
00:04:51,200 --> 00:04:56,930
many of them and finally you can always

106
00:04:53,960 --> 00:04:58,310
just hold pull up the drive if the PC is

107
00:04:56,930 --> 00:04:59,840
on the drives unlocked you can hold

108
00:04:58,310 --> 00:05:01,910
block to drive and that's that's not

109
00:04:59,840 --> 00:05:03,130
just a theoretical thing that's been

110
00:05:01,910 --> 00:05:05,870
that's been done before

111
00:05:03,130 --> 00:05:08,360
so overall the air attack opportunities

112
00:05:05,870 --> 00:05:11,380
are pretty much equivalent it doesn't

113
00:05:08,360 --> 00:05:16,430
really add anything a hardware approach

114
00:05:11,380 --> 00:05:19,219
so the other attack model species often

115
00:05:16,430 --> 00:05:21,920
the victim is unaware so this calls for

116
00:05:19,220 --> 00:05:23,930
Eva made attack you can install backdoor

117
00:05:21,920 --> 00:05:25,910
functionality wait for the victim to

118
00:05:23,930 --> 00:05:28,790
enter the the secret key and then

119
00:05:25,910 --> 00:05:30,680
extract all the data that you want like

120
00:05:28,790 --> 00:05:32,660
there's a hardware key logger for

121
00:05:30,680 --> 00:05:35,030
example or a backdoor in a bootloader

122
00:05:32,660 --> 00:05:37,160
but like when you look at hardware

123
00:05:35,030 --> 00:05:39,559
encryption when it enters the game it

124
00:05:37,160 --> 00:05:42,890
doesn't change anything all these things

125
00:05:39,560 --> 00:05:45,290
are still possible and so it's not it's

126
00:05:42,890 --> 00:05:48,380
still it's pretty much equivalent so

127
00:05:45,290 --> 00:05:51,170
finally there's the PC off and the

128
00:05:48,380 --> 00:05:52,880
victim is unaware scenario and when we

129
00:05:51,170 --> 00:05:54,920
look at that we see that software

130
00:05:52,880 --> 00:05:57,620
encryption provides pretty much full

131
00:05:54,920 --> 00:06:01,460
confidentiality of the data assuming

132
00:05:57,620 --> 00:06:02,660
that that the implementation is sound so

133
00:06:01,460 --> 00:06:04,729
they have a couple of options you can

134
00:06:02,660 --> 00:06:07,310
choose open source preferably audited

135
00:06:04,730 --> 00:06:09,290
software you can use proprietary

136
00:06:07,310 --> 00:06:12,350
software with public implementation

137
00:06:09,290 --> 00:06:15,140
details or you can live on the edge and

138
00:06:12,350 --> 00:06:17,060
use a black box implementation but for

139
00:06:15,140 --> 00:06:17,840
Hardware that's pretty much the only

140
00:06:17,060 --> 00:06:21,770
option that you have

141
00:06:17,840 --> 00:06:24,710
so no open source auditing fanciness

142
00:06:21,770 --> 00:06:26,780
just the black box and there's even

143
00:06:24,710 --> 00:06:28,370
additional and it's extremely hard to

144
00:06:26,780 --> 00:06:30,080
audit and there's even additional

145
00:06:28,370 --> 00:06:32,690
pitfalls that apply to hardware

146
00:06:30,080 --> 00:06:35,260
encryption only and not to software so

147
00:06:32,690 --> 00:06:37,910
the takeaway message from this is

148
00:06:35,260 --> 00:06:41,750
security guarantees are equivalent at

149
00:06:37,910 --> 00:06:43,790
best and the reason I'm standing here is

150
00:06:41,750 --> 00:06:46,760
that it's probably not it's probably

151
00:06:43,790 --> 00:06:48,520
worse so with that I will go through

152
00:06:46,760 --> 00:06:51,280
some standards for full

153
00:06:48,520 --> 00:06:54,128
encryption so there's two actually one

154
00:06:51,280 --> 00:06:56,830
is from the from from ages back that's

155
00:06:54,129 --> 00:07:00,909
the 80s security feature set and another

156
00:06:56,830 --> 00:07:03,250
is teach do pal but before I do that

157
00:07:00,909 --> 00:07:05,229
let's let's first dive into how you

158
00:07:03,250 --> 00:07:07,750
would probably implement implement this

159
00:07:05,229 --> 00:07:10,389
so on the left you have a user supply

160
00:07:07,750 --> 00:07:14,110
password you store two salts and the

161
00:07:10,389 --> 00:07:17,400
hash and if you take a keyed hash with

162
00:07:14,110 --> 00:07:19,629
one of the salts and result of it you

163
00:07:17,400 --> 00:07:20,919
compare that to the stored hash and if

164
00:07:19,629 --> 00:07:23,470
that matches should take the same

165
00:07:20,919 --> 00:07:26,229
password and then with the second

166
00:07:23,470 --> 00:07:32,130
solvent that becomes your key so far

167
00:07:26,229 --> 00:07:36,310
this is easy now if you look at ata it's

168
00:07:32,130 --> 00:07:39,069
yeah the original it originated from the

169
00:07:36,310 --> 00:07:40,449
the pre self encrypting drive era so the

170
00:07:39,069 --> 00:07:43,289
word encryption isn't mentioned in the

171
00:07:40,449 --> 00:07:45,699
standard whatsoever there's two

172
00:07:43,289 --> 00:07:48,729
authentication types the user and master

173
00:07:45,699 --> 00:07:50,440
password and both are user settable but

174
00:07:48,729 --> 00:07:52,599
the master password has an additional

175
00:07:50,440 --> 00:07:55,569
official value set by the during the

176
00:07:52,599 --> 00:07:57,039
manufacturing process and there's a

177
00:07:55,569 --> 00:07:59,680
setting called master password

178
00:07:57,039 --> 00:08:01,810
capability which is either high or max I

179
00:07:59,680 --> 00:08:04,270
didn't come up with these names and high

180
00:08:01,810 --> 00:08:07,060
means both user and master password can

181
00:08:04,270 --> 00:08:08,919
unlock the drive and max means only the

182
00:08:07,060 --> 00:08:11,259
user can unlock the drive but the master

183
00:08:08,919 --> 00:08:14,409
may still factory reset or it ways to

184
00:08:11,259 --> 00:08:17,169
drive bottom line you should change that

185
00:08:14,409 --> 00:08:19,090
thing or set this setting to max

186
00:08:17,169 --> 00:08:21,340
otherwise you have a master password

187
00:08:19,090 --> 00:08:23,679
that's factory default that can actually

188
00:08:21,340 --> 00:08:26,590
get access to your data and also in

189
00:08:23,680 --> 00:08:29,770
practice even that will will bite you so

190
00:08:26,590 --> 00:08:31,239
but we'll get to that later so on the

191
00:08:29,770 --> 00:08:33,578
left there's that you supply password

192
00:08:31,240 --> 00:08:35,349
you go.you that you put that to H Mac or

193
00:08:33,578 --> 00:08:36,939
that keyed hash or whatever and then you

194
00:08:35,349 --> 00:08:38,919
get a hash result and you compare that

195
00:08:36,940 --> 00:08:41,260
to check the validity of your password

196
00:08:38,919 --> 00:08:43,000
and then you do the same thing with

197
00:08:41,260 --> 00:08:45,760
another salt you get a key and with that

198
00:08:43,000 --> 00:08:47,380
key you decrypt some shared key and with

199
00:08:45,760 --> 00:08:49,569
that key you decrypt another key and you

200
00:08:47,380 --> 00:08:51,399
need this indirection in order to be

201
00:08:49,570 --> 00:08:52,800
able to change the user master password

202
00:08:51,399 --> 00:08:56,560
independently

203
00:08:52,800 --> 00:08:58,449
now there's also T to do pal and that's

204
00:08:56,560 --> 00:09:00,630
that's sort of the that's actually

205
00:08:58,449 --> 00:09:03,019
designed for full disk encryption

206
00:09:00,630 --> 00:09:06,240
it's the de facto for heart were

207
00:09:03,019 --> 00:09:08,220
defective standard there's multiple

208
00:09:06,240 --> 00:09:10,110
partitions which I call walking ranges

209
00:09:08,220 --> 00:09:12,360
and there's multiple passwords which

210
00:09:10,110 --> 00:09:14,190
they refer to as credentials and a

211
00:09:12,360 --> 00:09:16,649
single crenshaw can unlock multiple

212
00:09:14,190 --> 00:09:19,829
ranges and a single range can be

213
00:09:16,649 --> 00:09:23,100
unlocked by multiple credentials and so

214
00:09:19,829 --> 00:09:25,589
this means many to many and also one

215
00:09:23,100 --> 00:09:27,449
range should be able to be scrambled

216
00:09:25,589 --> 00:09:29,940
that means we generate the encryption

217
00:09:27,449 --> 00:09:31,859
key independently of all the others and

218
00:09:29,940 --> 00:09:35,339
without knowing all the keys that unlock

219
00:09:31,860 --> 00:09:36,779
that particular range so if you look at

220
00:09:35,339 --> 00:09:38,490
this it shouldn't come out as a price

221
00:09:36,779 --> 00:09:40,380
that it's really hard to implement this

222
00:09:38,490 --> 00:09:42,089
it's not impossible but it's just really

223
00:09:40,380 --> 00:09:42,779
hard and every manufacturer has to do it

224
00:09:42,089 --> 00:09:46,170
all over again

225
00:09:42,779 --> 00:09:48,180
so BitLocker fully relies on this if

226
00:09:46,170 --> 00:09:51,979
your drive supports this then BitLocker

227
00:09:48,180 --> 00:09:54,870
will delegate in trust to this drive

228
00:09:51,980 --> 00:09:57,959
there's a bit few bits and buts and ifs

229
00:09:54,870 --> 00:10:00,300
but that that's it that's that's

230
00:09:57,959 --> 00:10:03,329
basically the takeaway message it

231
00:10:00,300 --> 00:10:05,790
doesn't rely on ATS security though so

232
00:10:03,329 --> 00:10:09,089
what are possible pitfalls implementing

233
00:10:05,790 --> 00:10:12,660
this scheme so the first one and it's

234
00:10:09,089 --> 00:10:14,250
actually most important on the left you

235
00:10:12,660 --> 00:10:18,060
see password coming from the host PC

236
00:10:14,250 --> 00:10:21,240
that you enter and then on the right the

237
00:10:18,060 --> 00:10:22,619
data is encrypted with some key but how

238
00:10:21,240 --> 00:10:23,699
they are related that's unknown so

239
00:10:22,620 --> 00:10:26,399
there's a black box in the middle that

240
00:10:23,699 --> 00:10:27,660
does the key management but you also

241
00:10:26,399 --> 00:10:30,420
don't know whether these things are

242
00:10:27,660 --> 00:10:32,370
related at all they might not be and in

243
00:10:30,420 --> 00:10:34,860
that case you can just then the key

244
00:10:32,370 --> 00:10:36,329
doesn't depend on the password so all

245
00:10:34,860 --> 00:10:37,829
the information that you need to decrypt

246
00:10:36,329 --> 00:10:39,888
the data is already stored in the drive

247
00:10:37,829 --> 00:10:44,160
and this is so this is really bad and

248
00:10:39,889 --> 00:10:45,839
the second is take a naive approach you

249
00:10:44,160 --> 00:10:47,670
encrypt everything with a single key and

250
00:10:45,839 --> 00:10:50,399
you encrypt that key with all the

251
00:10:47,670 --> 00:10:53,329
passwords then the weakest password in

252
00:10:50,399 --> 00:10:56,339
theory allows access to everything and

253
00:10:53,329 --> 00:10:58,370
even even if there's no actual

254
00:10:56,339 --> 00:11:00,839
permission for that particular range and

255
00:10:58,370 --> 00:11:02,579
there's no cryptographic enforcement for

256
00:11:00,839 --> 00:11:04,529
this just if statements which you can

257
00:11:02,579 --> 00:11:07,258
get around it and by messing with the

258
00:11:04,529 --> 00:11:09,329
firmware and bit lock BitLocker makes

259
00:11:07,259 --> 00:11:11,610
things worse because it actually leaves

260
00:11:09,329 --> 00:11:12,719
a single range unprotected always and

261
00:11:11,610 --> 00:11:14,490
that's the partition table

262
00:11:12,720 --> 00:11:16,200
so in that case you

263
00:11:14,490 --> 00:11:18,030
and sometimes you can actually access

264
00:11:16,200 --> 00:11:22,680
the whole contents of the drive without

265
00:11:18,030 --> 00:11:25,470
a password okay so there's the third bit

266
00:11:22,680 --> 00:11:29,310
pitfall this 18 master password we

267
00:11:25,470 --> 00:11:31,050
enable attack so bear with me you should

268
00:11:29,310 --> 00:11:35,790
change the master password capability

269
00:11:31,050 --> 00:11:38,280
bits to max and but if you do that this

270
00:11:35,790 --> 00:11:40,199
should do away with the key material

271
00:11:38,280 --> 00:11:41,490
that allows you to derive the actual

272
00:11:40,200 --> 00:11:45,480
encryption key from a master password

273
00:11:41,490 --> 00:11:48,810
ideally but the standard allows for

274
00:11:45,480 --> 00:11:51,900
resetting that bit back to high so the

275
00:11:48,810 --> 00:11:53,729
end it allows you to do so with the user

276
00:11:51,900 --> 00:11:55,439
fashions only so you need to be able to

277
00:11:53,730 --> 00:11:57,750
reconstruct that data that you just

278
00:11:55,440 --> 00:12:00,090
delete it without having the password

279
00:11:57,750 --> 00:12:03,990
that that's supposed to be used for that

280
00:12:00,090 --> 00:12:06,420
so that's hard and it practice this key

281
00:12:03,990 --> 00:12:08,400
material is just left there so if you

282
00:12:06,420 --> 00:12:10,949
don't change the master password then

283
00:12:08,400 --> 00:12:13,189
this allows your data to be recovered

284
00:12:10,950 --> 00:12:16,440
with the factory default master password

285
00:12:13,190 --> 00:12:19,470
okay so a final pitfall there's a wear

286
00:12:16,440 --> 00:12:21,150
leveling issue so wear leveling means

287
00:12:19,470 --> 00:12:23,790
that multiple writes the same logical

288
00:12:21,150 --> 00:12:26,310
sector ends up in rights to different

289
00:12:23,790 --> 00:12:28,709
physical sectors so that can also be

290
00:12:26,310 --> 00:12:30,719
applied to key material so first you

291
00:12:28,710 --> 00:12:33,870
have you get to drive from the factory

292
00:12:30,720 --> 00:12:35,760
there's no encryption key set but it

293
00:12:33,870 --> 00:12:38,580
does encrypt everything with a factory

294
00:12:35,760 --> 00:12:40,890
default key well it's randomized but the

295
00:12:38,580 --> 00:12:43,050
factory default and then suppose you set

296
00:12:40,890 --> 00:12:46,560
a password it overrides that key with an

297
00:12:43,050 --> 00:12:50,040
encrypted variant and so that that

298
00:12:46,560 --> 00:12:51,300
variant may actually end up in in a

299
00:12:50,040 --> 00:12:52,980
different physical sector and therefore

300
00:12:51,300 --> 00:12:56,550
the original might still be there so you

301
00:12:52,980 --> 00:12:57,840
might use that to decrypt the data all

302
00:12:56,550 --> 00:12:59,880
the pitfalls that we looked at but

303
00:12:57,840 --> 00:13:02,730
didn't really find is random entropy

304
00:12:59,880 --> 00:13:05,660
generation power saving mode and so you

305
00:13:02,730 --> 00:13:08,940
sometimes drive may vendor may choose to

306
00:13:05,660 --> 00:13:11,250
do some sort of a hibernation so all the

307
00:13:08,940 --> 00:13:13,200
key material will end up in non-volatile

308
00:13:11,250 --> 00:13:14,820
storage in that case but we didn't find

309
00:13:13,200 --> 00:13:16,410
this in practice and general

310
00:13:14,820 --> 00:13:18,660
implementation issues so motif

311
00:13:16,410 --> 00:13:20,880
operations right channels and key

312
00:13:18,660 --> 00:13:22,500
derivation mistakes all that stuff

313
00:13:20,880 --> 00:13:26,460
that's in software still there and

314
00:13:22,500 --> 00:13:28,290
hardware methodology so a general

315
00:13:26,460 --> 00:13:31,560
approach we try to fit it in

316
00:13:28,290 --> 00:13:33,810
it's pretty ad-hoc actually so first

317
00:13:31,560 --> 00:13:35,400
step is to obtain a firmware image gain

318
00:13:33,810 --> 00:13:37,650
low-level control over the device for

319
00:13:35,400 --> 00:13:39,780
dynamic analysis and then analyze the

320
00:13:37,650 --> 00:13:42,329
firmware so how do you obtain a firmware

321
00:13:39,780 --> 00:13:44,910
image well you download it that seems

322
00:13:42,330 --> 00:13:47,100
easy but it's hard there's usually

323
00:13:44,910 --> 00:13:48,839
obfuscation applied and you have to

324
00:13:47,100 --> 00:13:51,090
capture SSL traffic some reverse

325
00:13:48,840 --> 00:13:53,550
engineering etc and the image may

326
00:13:51,090 --> 00:13:55,920
actually be encrypted and decryption can

327
00:13:53,550 --> 00:13:57,959
be done on the unit itself so that's a

328
00:13:55,920 --> 00:14:01,199
dead end you need to do you need to do

329
00:13:57,960 --> 00:14:03,060
something else second possibility is to

330
00:14:01,200 --> 00:14:05,280
pull the firmware from from ram through

331
00:14:03,060 --> 00:14:08,130
JTAG that's next it's gaining low-level

332
00:14:05,280 --> 00:14:11,520
control JTAG allows you to control the

333
00:14:08,130 --> 00:14:14,070
device completely and so you can hold a

334
00:14:11,520 --> 00:14:15,569
cpu set registers read right into the

335
00:14:14,070 --> 00:14:17,930
address space whatever you want some

336
00:14:15,570 --> 00:14:20,400
models have like this on the PCB and

337
00:14:17,930 --> 00:14:23,400
others need some figuring out they

338
00:14:20,400 --> 00:14:25,890
obfuscated the pin layout and and an

339
00:14:23,400 --> 00:14:27,630
alternative if it's not enabled and you

340
00:14:25,890 --> 00:14:29,340
can get unsigned code execution for

341
00:14:27,630 --> 00:14:32,120
example through some undocumented

342
00:14:29,340 --> 00:14:34,650
command exploiting vulnerability

343
00:14:32,120 --> 00:14:37,070
modifying code and the memory chips and

344
00:14:34,650 --> 00:14:42,030
if all the last weeks you can try some

345
00:14:37,070 --> 00:14:44,730
fault injection attack so now that you

346
00:14:42,030 --> 00:14:46,380
have to firmware let's analyze it you

347
00:14:44,730 --> 00:14:47,640
have to figure out what it does so first

348
00:14:46,380 --> 00:14:49,620
in order to do this you have to figure

349
00:14:47,640 --> 00:14:51,330
out the section information section

350
00:14:49,620 --> 00:14:53,580
information is typically stored in the

351
00:14:51,330 --> 00:14:55,470
from your header you have to figure it

352
00:14:53,580 --> 00:14:57,210
out manually or through some reverse

353
00:14:55,470 --> 00:14:59,280
engineering then load it into this

354
00:14:57,210 --> 00:15:02,490
assembler and check out what it does

355
00:14:59,280 --> 00:15:04,589
well this might be like a big thing to

356
00:15:02,490 --> 00:15:08,220
look at so what you probably want to do

357
00:15:04,590 --> 00:15:10,680
is for as a first thing to do is find

358
00:15:08,220 --> 00:15:13,920
the ATA dispatch table which is a table

359
00:15:10,680 --> 00:15:16,050
with opcode function pointer for every

360
00:15:13,920 --> 00:15:19,229
ATA opcode and cross-reference that with

361
00:15:16,050 --> 00:15:21,959
the ATA standard and if you find it and

362
00:15:19,230 --> 00:15:23,610
you can look at interesting op codes and

363
00:15:21,960 --> 00:15:27,780
check out the implementation of that

364
00:15:23,610 --> 00:15:31,890
particular command results so we studied

365
00:15:27,780 --> 00:15:36,000
models from 2014 to 2018 and different

366
00:15:31,890 --> 00:15:38,250
form factors SATA nvme USB and most of

367
00:15:36,000 --> 00:15:41,450
them have very severe weaknesses I refer

368
00:15:38,250 --> 00:15:44,100
to the paper for the actual results

369
00:15:41,450 --> 00:15:45,600
best-case scenario the security

370
00:15:44,100 --> 00:15:47,580
guarantees are equivalent to software

371
00:15:45,600 --> 00:15:50,190
full disk encryption and not better and

372
00:15:47,580 --> 00:15:52,230
worst case it's actually it all relies

373
00:15:50,190 --> 00:15:55,140
on if statements so something that you

374
00:15:52,230 --> 00:15:57,630
can easily do away with and BitLocker

375
00:15:55,140 --> 00:16:02,939
amplifies the issue by delegating trust

376
00:15:57,630 --> 00:16:05,400
to this further more TCO pie was pretty

377
00:16:02,940 --> 00:16:07,950
terrible it's over engineered you have

378
00:16:05,400 --> 00:16:10,770
so many features that nobody will end up

379
00:16:07,950 --> 00:16:13,980
using and security goals are not clear

380
00:16:10,770 --> 00:16:16,170
because they didn't even manage to to be

381
00:16:13,980 --> 00:16:18,360
better than just software encryption and

382
00:16:16,170 --> 00:16:21,569
there's also no reference implementation

383
00:16:18,360 --> 00:16:24,030
for this and implementation is not part

384
00:16:21,570 --> 00:16:26,070
of the compliance test which is also

385
00:16:24,030 --> 00:16:28,890
important and yeah so there's a

386
00:16:26,070 --> 00:16:30,720
structural changes needed and this is

387
00:16:28,890 --> 00:16:35,340
the timeline so we started actually

388
00:16:30,720 --> 00:16:39,630
researching part time in October 2016 in

389
00:16:35,340 --> 00:16:42,590
the meantime until April 2018 we we did

390
00:16:39,630 --> 00:16:45,870
some attempts to contact offenders and

391
00:16:42,590 --> 00:16:47,340
we actually disclosed stuff to Samsung

392
00:16:45,870 --> 00:16:51,810
and micron and we had a meeting with

393
00:16:47,340 --> 00:16:54,570
Samsung in The Hague in April of 2018 we

394
00:16:51,810 --> 00:16:58,189
had a draft paper published in November

395
00:16:54,570 --> 00:17:01,410
2018 and there were software updates

396
00:16:58,190 --> 00:17:05,340
released from vendors presentation at

397
00:17:01,410 --> 00:17:07,770
GCC and December 2018 and actually

398
00:17:05,339 --> 00:17:11,879
during that time we also discovered some

399
00:17:07,770 --> 00:17:14,250
new SanDisk issues so that's what we're

400
00:17:11,880 --> 00:17:16,830
going to disclose today and there's a

401
00:17:14,250 --> 00:17:18,750
couple of C is released that were became

402
00:17:16,829 --> 00:17:20,730
public today Western Digital released

403
00:17:18,750 --> 00:17:23,369
firmware updates available at that

404
00:17:20,730 --> 00:17:26,460
address and also they audited their new

405
00:17:23,369 --> 00:17:29,520
firmware updates but by by this company

406
00:17:26,460 --> 00:17:32,190
called twelve bits and their squad from

407
00:17:29,520 --> 00:17:34,410
personnage so they thank us and the NCC

408
00:17:32,190 --> 00:17:36,840
in the cert CC for participating in

409
00:17:34,410 --> 00:17:39,210
coordinating disclosure process and for

410
00:17:36,840 --> 00:17:41,530
more information please see that alright

411
00:17:39,210 --> 00:17:50,359
so thank you

412
00:17:41,530 --> 00:17:50,359
[Applause]

413
00:17:53,759 --> 00:18:03,639
all right questions move to the center

414
00:17:56,409 --> 00:18:05,620
please hey ma noelia get in Boston

415
00:18:03,639 --> 00:18:07,508
University it's pretty amazing stuff so

416
00:18:05,620 --> 00:18:08,799
I was wondering from the methodology

417
00:18:07,509 --> 00:18:10,450
section that you explained you can do

418
00:18:08,799 --> 00:18:12,668
this this this and this going all the

419
00:18:10,450 --> 00:18:13,929
way deeper level how far actually did

420
00:18:12,669 --> 00:18:16,500
you have to go with judging from the

421
00:18:13,929 --> 00:18:18,730
images it looks like at least until the

422
00:18:16,500 --> 00:18:20,500
p'chai tech stuff did you have to do

423
00:18:18,730 --> 00:18:22,059
glitching attacks no we didn't do

424
00:18:20,500 --> 00:18:25,480
glitching attacks we did everything else

425
00:18:22,059 --> 00:18:28,120
so we even found a zero-day in a boot

426
00:18:25,480 --> 00:18:31,059
loader or from Marvel in order to bypass

427
00:18:28,120 --> 00:18:33,189
secure boot but that's as far as we went

428
00:18:31,059 --> 00:18:40,299
but that was through manual analysis in

429
00:18:33,190 --> 00:18:44,169
Ida yeah yeah any other questions

430
00:18:40,299 --> 00:18:46,690
questions okay so what's the way forward

431
00:18:44,169 --> 00:18:48,460
that you see I mean you kind of a spouse

432
00:18:46,690 --> 00:18:50,559
software not hardware in the paper or

433
00:18:48,460 --> 00:18:53,309
layering it I guess you're compromised

434
00:18:50,559 --> 00:18:57,879
what do you see is the way forward like

435
00:18:53,309 --> 00:19:01,178
given this like basically delegating

436
00:18:57,879 --> 00:19:03,668
trust 2d to these drives these people

437
00:19:01,179 --> 00:19:04,929
aren't security engineers and we

438
00:19:03,669 --> 00:19:06,639
shouldn't give them the task of

439
00:19:04,929 --> 00:19:08,919
engineering security like this can be

440
00:19:06,639 --> 00:19:10,719
done in software it has been done in

441
00:19:08,919 --> 00:19:12,669
software and you can just have this

442
00:19:10,720 --> 00:19:15,730
simplistic approached and you can

443
00:19:12,669 --> 00:19:17,679
publish details and therefore then you

444
00:19:15,730 --> 00:19:19,000
can rely on that without having like all

445
00:19:17,679 --> 00:19:20,830
these different implementations from

446
00:19:19,000 --> 00:19:23,080
different vendors that you cannot audit

447
00:19:20,830 --> 00:19:28,149
I think the way forward would be to just

448
00:19:23,080 --> 00:19:29,860
go for trusted software encryption I'd

449
00:19:28,149 --> 00:19:32,199
say your work has great impact because

450
00:19:29,860 --> 00:19:34,658
Western Digital because of your work

451
00:19:32,200 --> 00:19:36,370
audited there at trail bits audit their

452
00:19:34,659 --> 00:19:38,350
work and now you're making them more

453
00:19:36,370 --> 00:19:40,299
security aware so maybe you are now

454
00:19:38,350 --> 00:19:42,279
creating more trustworthy self

455
00:19:40,299 --> 00:19:44,710
encrypting drives let's hope so if you

456
00:19:42,279 --> 00:19:46,330
if you depend on these drives then then

457
00:19:44,710 --> 00:19:48,340
yeah I mean from a managed from a

458
00:19:46,330 --> 00:19:52,059
security management point of view it

459
00:19:48,340 --> 00:19:54,399
could make sense although like I I don't

460
00:19:52,059 --> 00:19:56,678
think in a security perspective this

461
00:19:54,399 --> 00:19:57,699
would be the way forward let's thank our

462
00:19:56,679 --> 00:19:59,760
speaker

463
00:19:57,700 --> 00:19:59,760
you

