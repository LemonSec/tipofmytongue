1
00:00:08,580 --> 00:00:13,740
thank you for the introduction good

2
00:00:11,130 --> 00:00:16,590
afternoon everyone today I'm going to

3
00:00:13,740 --> 00:00:19,619
talk about why does your data leak in

4
00:00:16,590 --> 00:00:22,230
the cloud from the perspective of mobile

5
00:00:19,619 --> 00:00:24,779
apps and this is a joint work with my

6
00:00:22,230 --> 00:00:28,860
adviser dr. Duchin Lee and our

7
00:00:24,779 --> 00:00:31,919
collaborator talking change on and fold

8
00:00:28,860 --> 00:00:35,460
up for the past a few years we have

9
00:00:31,919 --> 00:00:39,960
witnessed numerous data bridges for

10
00:00:35,460 --> 00:00:43,019
instance in 2017 six million Verizon

11
00:00:39,960 --> 00:00:47,640
user data got leaked from Amazon s3

12
00:00:43,019 --> 00:00:51,210
storage and Pentagon also exposed some

13
00:00:47,640 --> 00:00:54,390
secret data from um no server and data

14
00:00:51,210 --> 00:00:57,379
leakages didn't get stopped and we keep

15
00:00:54,390 --> 00:01:01,530
observing them recently

16
00:00:57,379 --> 00:01:04,550
why does data leakage keep happening to

17
00:01:01,530 --> 00:01:07,080
answer this question we start from

18
00:01:04,550 --> 00:01:11,130
understanding the relationship between

19
00:01:07,080 --> 00:01:15,270
mobile apps and their backends and as of

20
00:01:11,130 --> 00:01:18,810
today many apps use cloud services as

21
00:01:15,270 --> 00:01:22,320
their backers and those cloud services

22
00:01:18,810 --> 00:01:26,120
are known as the mobile back back end as

23
00:01:22,320 --> 00:01:30,770
a service in short and bus beckons and

24
00:01:26,120 --> 00:01:35,460
there are many mbus cloud providers like

25
00:01:30,770 --> 00:01:40,860
Amazon AWS Google firebase and Microsoft

26
00:01:35,460 --> 00:01:43,410
Azure in our view data leakage is

27
00:01:40,860 --> 00:01:46,890
essentially an access control problem

28
00:01:43,410 --> 00:01:50,670
which regulates which user can access

29
00:01:46,890 --> 00:01:54,270
which resource such as Bob or can only

30
00:01:50,670 --> 00:01:58,200
access his own data but cannot access

31
00:01:54,270 --> 00:02:01,280
Alice's data and in particularly access

32
00:01:58,200 --> 00:02:04,560
control consists two procedures here

33
00:02:01,280 --> 00:02:07,710
authentication that verifies the

34
00:02:04,560 --> 00:02:11,910
identity of a user typically by username

35
00:02:07,710 --> 00:02:14,849
and password and all tradition that it

36
00:02:11,910 --> 00:02:19,980
defines the relationship between users

37
00:02:14,849 --> 00:02:22,350
and the resources so how does access

38
00:02:19,980 --> 00:02:25,049
control works for mobile

39
00:02:22,350 --> 00:02:28,799
beckoned particularly for the emboss

40
00:02:25,050 --> 00:02:32,340
card back-end and for cloud back-end

41
00:02:28,800 --> 00:02:35,420
that there are two types of users and no

42
00:02:32,340 --> 00:02:40,410
more customers for the mobile app and

43
00:02:35,420 --> 00:02:44,579
Apple developers for no more customer

44
00:02:40,410 --> 00:02:47,579
for the mobile app C user a she need to

45
00:02:44,580 --> 00:02:51,030
provide the app key to tell the cloud

46
00:02:47,580 --> 00:02:54,230
which app since this request as well as

47
00:02:51,030 --> 00:02:57,780
her credential for authentication and

48
00:02:54,230 --> 00:03:00,840
the cloud will grant her permission

49
00:02:57,780 --> 00:03:03,210
based on the configuration file that are

50
00:03:00,840 --> 00:03:07,410
defined by the developer to access

51
00:03:03,210 --> 00:03:11,010
resources and since this Apple key is

52
00:03:07,410 --> 00:03:15,600
used for the cloud to dispatch a request

53
00:03:11,010 --> 00:03:19,670
to the crest bonding back end so the C

54
00:03:15,600 --> 00:03:22,739
another user for the sim app C user B

55
00:03:19,670 --> 00:03:25,880
she need to provide this the same a

56
00:03:22,740 --> 00:03:30,000
perky but with her own credential and

57
00:03:25,880 --> 00:03:33,420
when a developer tries to manage the

58
00:03:30,000 --> 00:03:35,390
cloud she need to provide a root key to

59
00:03:33,420 --> 00:03:39,690
tell the cloud that she is the manager

60
00:03:35,390 --> 00:03:44,700
so in short there are two types of keys

61
00:03:39,690 --> 00:03:47,070
boo-ki and the root key in this study we

62
00:03:44,700 --> 00:03:51,420
focus on three main stream cloud

63
00:03:47,070 --> 00:03:54,060
providers Amazon AWS Google firebase and

64
00:03:51,420 --> 00:03:56,880
the Microsoft area and we have

65
00:03:54,060 --> 00:04:01,110
discovered two root causes of data

66
00:03:56,880 --> 00:04:03,990
leakage first is misuse of various keys

67
00:04:01,110 --> 00:04:07,530
in authentication which has been

68
00:04:03,990 --> 00:04:11,580
discovered in Microsoft Azure and Amazon

69
00:04:07,530 --> 00:04:14,810
AWS in the not voice miss configuration

70
00:04:11,580 --> 00:04:18,420
of user permissions in author Edition

71
00:04:14,810 --> 00:04:22,950
which has been discovered in Google

72
00:04:18,420 --> 00:04:26,190
firebase and Amazon AWS let me explain

73
00:04:22,950 --> 00:04:29,190
them in the following the first key

74
00:04:26,190 --> 00:04:33,120
misuse please recall that there are two

75
00:04:29,190 --> 00:04:35,370
types of keys for mobile backend epic

76
00:04:33,120 --> 00:04:36,360
key and the root key let me show you

77
00:04:35,370 --> 00:04:40,110
some examples

78
00:04:36,360 --> 00:04:43,650
about those keys the first example is

79
00:04:40,110 --> 00:04:47,250
for Microsoft Azure storage and the

80
00:04:43,650 --> 00:04:51,960
first time in yellow is a rootkit and

81
00:04:47,250 --> 00:04:54,810
the second line is a AB key and

82
00:04:51,960 --> 00:04:57,930
developers should have put this as a s

83
00:04:54,810 --> 00:05:01,199
key into the mobile app and keep the

84
00:04:57,930 --> 00:05:05,000
account key privately the second example

85
00:05:01,199 --> 00:05:09,180
is for Microsoft error notification hub

86
00:05:05,000 --> 00:05:12,449
the first line in gray is AB key and the

87
00:05:09,180 --> 00:05:14,909
last why is the root key and we can see

88
00:05:12,449 --> 00:05:19,080
that the AB key and the root key they

89
00:05:14,909 --> 00:05:22,310
are in different formats but so are four

90
00:05:19,080 --> 00:05:24,900
other cloud providers like Amazon AWS

91
00:05:22,310 --> 00:05:28,879
the Apple key and the root key are the

92
00:05:24,900 --> 00:05:30,810
same regardless of the format's of

93
00:05:28,879 --> 00:05:34,139
applicant root key there is a

94
00:05:30,810 --> 00:05:37,710
possibility that developers may misuse

95
00:05:34,139 --> 00:05:40,560
of these keys they may put the root key

96
00:05:37,710 --> 00:05:42,888
into the mobile app which means with

97
00:05:40,560 --> 00:05:45,930
reverse engineering on the mobile app

98
00:05:42,889 --> 00:05:48,509
developers can easily get the root key

99
00:05:45,930 --> 00:05:51,569
to access all the resources of this

100
00:05:48,509 --> 00:05:54,240
back-end and the second root cause is

101
00:05:51,569 --> 00:05:58,069
miss configuration of user permissions

102
00:05:54,240 --> 00:06:01,310
in all tradition after authentication

103
00:05:58,069 --> 00:06:05,069
the cloud will grant user permissions

104
00:06:01,310 --> 00:06:08,810
based on the configuration file that

105
00:06:05,069 --> 00:06:13,020
defines by developers and lack of

106
00:06:08,810 --> 00:06:16,289
configuration or in creditor will lead

107
00:06:13,020 --> 00:06:20,089
to data leakage let me show you an

108
00:06:16,289 --> 00:06:24,509
example of crack the configuration for

109
00:06:20,089 --> 00:06:28,469
google firebase database please imagine

110
00:06:24,509 --> 00:06:32,460
the database as a GSM file the name of V

111
00:06:28,469 --> 00:06:35,610
of the root node is users and the name

112
00:06:32,460 --> 00:06:38,489
of each house node is a UID and the

113
00:06:35,610 --> 00:06:42,080
content of the child node is users

114
00:06:38,490 --> 00:06:46,169
private data and this configuration file

115
00:06:42,080 --> 00:06:50,248
enforces that a user can read and read

116
00:06:46,169 --> 00:06:53,339
the child not only when her UID

117
00:06:50,249 --> 00:06:57,269
cause to the no name which means Bob can

118
00:06:53,339 --> 00:07:01,259
only access Bob's data and here are two

119
00:06:57,269 --> 00:07:04,169
examples of incorrect configurations the

120
00:07:01,259 --> 00:07:06,719
the left Hawaii indicates anyone can

121
00:07:04,169 --> 00:07:10,378
read and write to the database even

122
00:07:06,719 --> 00:07:13,949
without a login and the Ottawa indicates

123
00:07:10,379 --> 00:07:14,699
any authenticated user can access the

124
00:07:13,949 --> 00:07:17,399
database

125
00:07:14,699 --> 00:07:21,449
no matter Bob or Alice they can directly

126
00:07:17,399 --> 00:07:23,939
access the entire database obviously

127
00:07:21,449 --> 00:07:27,989
miss configuration can lead to serious

128
00:07:23,939 --> 00:07:30,949
data linkages given those upper division

129
00:07:27,989 --> 00:07:34,229
our next question is how to

130
00:07:30,949 --> 00:07:37,709
automatically detect the cloud leakage

131
00:07:34,229 --> 00:07:41,938
vulnerability at a large scale and to do

132
00:07:37,709 --> 00:07:45,059
so for given app first we need to get

133
00:07:41,939 --> 00:07:47,699
the keys from the mobile app otherwise

134
00:07:45,059 --> 00:07:52,289
we are unable to locate the crest

135
00:07:47,699 --> 00:07:53,399
bonding back in the instance to do so so

136
00:07:52,289 --> 00:07:56,849
the first question is how to

137
00:07:53,399 --> 00:08:00,989
systematically identify various keys

138
00:07:56,849 --> 00:08:04,378
used by mobile apps since we know the

139
00:08:00,989 --> 00:08:07,649
the app talks to the cloud by invoking

140
00:08:04,379 --> 00:08:12,239
cloud API is that provided by the cloud

141
00:08:07,649 --> 00:08:16,709
providers as DK so in their SDK there

142
00:08:12,239 --> 00:08:20,039
must exist a cloud API that takes a key

143
00:08:16,709 --> 00:08:25,019
as parameter so we can identify the keys

144
00:08:20,039 --> 00:08:28,068
by locating such API but we cannot

145
00:08:25,019 --> 00:08:30,719
directly get the value of the parameter

146
00:08:28,069 --> 00:08:34,558
so the second question is how to

147
00:08:30,719 --> 00:08:38,639
identify the relevant key students that

148
00:08:34,558 --> 00:08:41,458
are used by the mobile app and we know

149
00:08:38,639 --> 00:08:44,309
the keys are strings so we can apply

150
00:08:41,458 --> 00:08:47,339
velocity analysis try to alter the

151
00:08:44,309 --> 00:08:51,329
content but there is a considerable

152
00:08:47,339 --> 00:08:53,759
number of apps above a skeeted so we

153
00:08:51,329 --> 00:08:57,750
have to make our to above a squishy

154
00:08:53,759 --> 00:09:00,059
resilient finally to detect the

155
00:08:57,750 --> 00:09:01,950
vulnerability the most straightforward

156
00:09:00,059 --> 00:09:04,829
way is used

157
00:09:01,950 --> 00:09:08,160
he to access other users data but

158
00:09:04,830 --> 00:09:11,310
obviously that wireless ethics so well

159
00:09:08,160 --> 00:09:13,860
to these design approach to detect the

160
00:09:11,310 --> 00:09:19,619
vulnerability without access any others

161
00:09:13,860 --> 00:09:21,960
other users data so to deal with those

162
00:09:19,620 --> 00:09:25,350
questions we have designed and

163
00:09:21,960 --> 00:09:28,830
implemented a system leak scope and this

164
00:09:25,350 --> 00:09:32,790
is the overview of our system and it

165
00:09:28,830 --> 00:09:35,700
consists of three components cloud API

166
00:09:32,790 --> 00:09:39,839
identification that it takes ap caid's

167
00:09:35,700 --> 00:09:42,630
and the cloud API as input to identify

168
00:09:39,840 --> 00:09:46,950
the cloud API that used in the mobile

169
00:09:42,630 --> 00:09:51,360
app an extreme value analysis that tries

170
00:09:46,950 --> 00:09:54,510
to get the content of the key and the

171
00:09:51,360 --> 00:09:57,270
vulnerability identification that you

172
00:09:54,510 --> 00:10:00,689
use the key to detect to detect the

173
00:09:57,270 --> 00:10:03,990
viability and let me go through those

174
00:10:00,690 --> 00:10:07,530
components one by one first the cloud EP

175
00:10:03,990 --> 00:10:10,350
identification the cloud the API that it

176
00:10:07,530 --> 00:10:13,050
takes a key as parameter are well

177
00:10:10,350 --> 00:10:14,880
documented we carefully read all the

178
00:10:13,050 --> 00:10:17,670
documentation from all the cloud

179
00:10:14,880 --> 00:10:21,600
providers and found all those cloud

180
00:10:17,670 --> 00:10:24,349
areas each of them will take a key as

181
00:10:21,600 --> 00:10:27,630
parameter and to deal with the

182
00:10:24,350 --> 00:10:31,560
obfuscation problem we have implemented

183
00:10:27,630 --> 00:10:35,880
a hash function to generate a signatures

184
00:10:31,560 --> 00:10:38,670
for those cloud APs and all the

185
00:10:35,880 --> 00:10:41,400
functions in the mobile app and match

186
00:10:38,670 --> 00:10:44,729
those cloud EPS with the function in the

187
00:10:41,400 --> 00:10:48,270
mobile app by comparing their hash value

188
00:10:44,730 --> 00:10:50,430
the algorithm is works plenty in the

189
00:10:48,270 --> 00:10:54,930
paper please take a look if you are

190
00:10:50,430 --> 00:10:58,380
interested having identified the cloud

191
00:10:54,930 --> 00:11:02,430
ApS that use the key as a parameter next

192
00:10:58,380 --> 00:11:05,340
we need to get the value of the key to

193
00:11:02,430 --> 00:11:08,609
do so there is a popular technical name

194
00:11:05,340 --> 00:11:11,880
the value set analysis but in our case

195
00:11:08,610 --> 00:11:15,810
we only care about streams so we have

196
00:11:11,880 --> 00:11:18,630
implemented a value set analysis and

197
00:11:15,810 --> 00:11:22,560
I will not go to details here at her

198
00:11:18,630 --> 00:11:27,090
level these components works first by

199
00:11:22,560 --> 00:11:29,250
performing backward slicing to get all

200
00:11:27,090 --> 00:11:32,220
the information that used the two

201
00:11:29,250 --> 00:11:35,520
January to the parameter here is the v1

202
00:11:32,220 --> 00:11:40,410
and then repeat the generation procedure

203
00:11:35,520 --> 00:11:43,170
to get the streams after we got the key

204
00:11:40,410 --> 00:11:46,850
we have to detect the vulnerability

205
00:11:43,170 --> 00:11:50,880
without access you out there users data

206
00:11:46,850 --> 00:11:54,540
here we will use set channel approach by

207
00:11:50,880 --> 00:11:57,810
requesting an existing data since this

208
00:11:54,540 --> 00:11:59,880
detection is called specific we have to

209
00:11:57,810 --> 00:12:02,869
design we have to apply different

210
00:11:59,880 --> 00:12:05,510
strategy for different cloud providers

211
00:12:02,870 --> 00:12:09,450
but the basic idea is the same

212
00:12:05,510 --> 00:12:12,720
we will use the key Center request to

213
00:12:09,450 --> 00:12:15,330
access an existing data and identify the

214
00:12:12,720 --> 00:12:19,529
vulnerability based on the written error

215
00:12:15,330 --> 00:12:22,140
if it says an authorized operation then

216
00:12:19,529 --> 00:12:25,140
there is no vulnerability and if it says

217
00:12:22,140 --> 00:12:27,180
data does not exist which means we have

218
00:12:25,140 --> 00:12:29,730
passed the key check all the permission

219
00:12:27,180 --> 00:12:33,410
check then there is the one ability and

220
00:12:29,730 --> 00:12:36,390
please be aware that before launch this

221
00:12:33,410 --> 00:12:39,540
test we first collect all the written

222
00:12:36,390 --> 00:12:42,120
errors and so give my return we know

223
00:12:39,540 --> 00:12:46,410
it's an authorized operation all data

224
00:12:42,120 --> 00:12:50,190
does not exist to evaluate our system we

225
00:12:46,410 --> 00:12:53,910
applied it our 1.6 million mobile apps

226
00:12:50,190 --> 00:12:57,530
and fund more than 100,000 of them I

227
00:12:53,910 --> 00:13:01,439
used those three cloud providers and

228
00:12:57,530 --> 00:13:05,100
around the 20% of those mobile apps are

229
00:13:01,440 --> 00:13:07,800
above us skated and here are some

230
00:13:05,100 --> 00:13:10,830
results of the cloud EP identification

231
00:13:07,800 --> 00:13:13,319
and string value analysis from the last

232
00:13:10,830 --> 00:13:17,900
column we can see that this River

233
00:13:13,320 --> 00:13:21,480
analysis module can get most of the keys

234
00:13:17,900 --> 00:13:24,270
for the vulnerability detection in total

235
00:13:21,480 --> 00:13:28,050
we detected 6 different kind of

236
00:13:24,270 --> 00:13:29,610
vulnerabilities and the first 3 in

237
00:13:28,050 --> 00:13:31,920
yellow are chemists

238
00:13:29,610 --> 00:13:35,460
and abilities and the rest a miss

239
00:13:31,920 --> 00:13:38,670
configuration and in total we found the

240
00:13:35,460 --> 00:13:41,880
more than 15,000 the mobile apps are

241
00:13:38,670 --> 00:13:46,110
vulnerable and some of them are very

242
00:13:41,880 --> 00:13:48,180
popular you can see that the even the

243
00:13:46,110 --> 00:13:50,430
one of the vulnerable apps even have

244
00:13:48,180 --> 00:13:53,250
more than 100 million installs from

245
00:13:50,430 --> 00:13:56,819
Google Play having identified those

246
00:13:53,250 --> 00:14:00,720
vulnerabilities we first disclosed them

247
00:13:56,820 --> 00:14:01,830
to the cloud providers and they all took

248
00:14:00,720 --> 00:14:04,650
this seriously

249
00:14:01,830 --> 00:14:07,430
further they notified that all the

250
00:14:04,650 --> 00:14:10,800
related developers in particular

251
00:14:07,430 --> 00:14:14,430
Microsoft immediately corrected the run

252
00:14:10,800 --> 00:14:16,829
documentation actually we used the root

253
00:14:14,430 --> 00:14:20,910
key in there any example in the document

254
00:14:16,830 --> 00:14:23,700
and for google he plans to provide a

255
00:14:20,910 --> 00:14:26,969
more user-friendly hood when configuring

256
00:14:23,700 --> 00:14:29,580
user permissions and interestingly for

257
00:14:26,970 --> 00:14:32,610
Amazon they added a new permission

258
00:14:29,580 --> 00:14:37,230
checks which is a three storage before

259
00:14:32,610 --> 00:14:39,600
we disclose our details to them and here

260
00:14:37,230 --> 00:14:43,950
is how Microsoft cracked their

261
00:14:39,600 --> 00:14:46,650
documentation and this is the new

262
00:14:43,950 --> 00:14:49,950
updates from Google last month and you

263
00:14:46,650 --> 00:14:53,189
can see they already provided some

264
00:14:49,950 --> 00:14:58,500
useful tools to help the developers make

265
00:14:53,190 --> 00:14:58,680
their apps more secure for the sixth

266
00:14:58,500 --> 00:15:01,590
time

267
00:14:58,680 --> 00:15:05,760
I will skip the related work please fund

268
00:15:01,590 --> 00:15:09,240
them in our paper to summarize in this

269
00:15:05,760 --> 00:15:12,569
work we have designed and implemented a

270
00:15:09,240 --> 00:15:16,410
static analysis system to automatically

271
00:15:12,570 --> 00:15:20,460
detect vulnerability the potato leakage

272
00:15:16,410 --> 00:15:23,130
vulnerability by performing a cloud API

273
00:15:20,460 --> 00:15:25,800
identification stream value analysis and

274
00:15:23,130 --> 00:15:28,170
the vulnerability identification in

275
00:15:25,800 --> 00:15:30,990
total we found more than 15,000 the

276
00:15:28,170 --> 00:15:32,640
mobile apps are vulnerable responsible

277
00:15:30,990 --> 00:15:35,460
this clora were made it to the cloud

278
00:15:32,640 --> 00:15:39,449
providers and we have open sourced our

279
00:15:35,460 --> 00:15:42,819
system please check it on github and in

280
00:15:39,450 --> 00:15:45,100
this work we only scratched the tip

281
00:15:42,819 --> 00:15:48,368
of the ass work of the security of

282
00:15:45,100 --> 00:15:51,489
cloud-based back-end which is the emboss

283
00:15:48,369 --> 00:15:54,609
back-end and what about others what

284
00:15:51,489 --> 00:15:56,939
about their software stacks lack of

285
00:15:54,609 --> 00:15:59,229
renew systems or Network steps

286
00:15:56,939 --> 00:16:01,329
furthermore what about other

287
00:15:59,229 --> 00:16:03,819
vulnerabilities like sticker injection

288
00:16:01,329 --> 00:16:05,679
or crisis gripping fully in this

289
00:16:03,819 --> 00:16:08,169
direction we did another work recently

290
00:16:05,679 --> 00:16:10,689
and found much more security issues and

291
00:16:08,169 --> 00:16:13,179
we are going to present this work in the

292
00:16:10,689 --> 00:16:16,949
upcoming snicks thank you for the

293
00:16:13,179 --> 00:16:16,949
attention I'm ready for the questions

294
00:16:19,559 --> 00:16:23,350
thank you very much we have two mics up

295
00:16:22,239 --> 00:16:26,279
front if anybody has any questions

296
00:16:23,350 --> 00:16:26,279
please come forward

297
00:16:29,249 --> 00:16:34,179
Luke desert house from Samsung Research

298
00:16:31,899 --> 00:16:38,910
America thank you for the talk this is a

299
00:16:34,179 --> 00:16:43,269
very important problem I'm a little

300
00:16:38,910 --> 00:16:46,299
let's see so you sort of push this blame

301
00:16:43,269 --> 00:16:47,889
on to the cloud providers but as my

302
00:16:46,299 --> 00:16:49,899
understanding is that the the app

303
00:16:47,889 --> 00:16:51,850
developers really should not be putting

304
00:16:49,899 --> 00:16:53,039
any key of any sort in the app in the

305
00:16:51,850 --> 00:16:56,679
first place

306
00:16:53,039 --> 00:16:57,879
and I just wanted to clarify that or if

307
00:16:56,679 --> 00:17:00,059
you could explain what they should be

308
00:16:57,879 --> 00:17:05,378
doing as a best practice is this really

309
00:17:00,059 --> 00:17:07,898
I don't know my awareness is that AWS it

310
00:17:05,378 --> 00:17:09,219
tells people not to do this and the

311
00:17:07,898 --> 00:17:11,109
developers are doing it anyway

312
00:17:09,220 --> 00:17:13,329
can you clarify what the developer

313
00:17:11,109 --> 00:17:15,158
should do instead yes they all read so

314
00:17:13,329 --> 00:17:18,039
the fundamental problem of this

315
00:17:15,159 --> 00:17:22,959
vulnerability our developers are make

316
00:17:18,039 --> 00:17:25,628
mistakes but the the cloud providers

317
00:17:22,959 --> 00:17:28,509
they can provide more useful tools to

318
00:17:25,628 --> 00:17:30,759
shrink the space that developers can be

319
00:17:28,509 --> 00:17:34,269
the mistake of course we hope a

320
00:17:30,759 --> 00:17:37,629
developers can have secure mind but that

321
00:17:34,269 --> 00:17:44,639
depends the way we have to try our best

322
00:17:37,629 --> 00:17:44,639
to make the system more secure thank you

323
00:17:45,990 --> 00:17:48,549
we have time for one more question thank

324
00:17:48,340 --> 00:17:51,840
you

325
00:17:48,549 --> 00:17:55,210
I have a second question hmm let's see

326
00:17:51,840 --> 00:17:56,439
we looked into the these three popular

327
00:17:55,210 --> 00:17:59,290
cloud service providers

328
00:17:56,440 --> 00:18:01,090
yes but if you look for other services

329
00:17:59,290 --> 00:18:03,659
you're gonna find a lot more keys I'm

330
00:18:01,090 --> 00:18:06,669
sure this is happening on a huge scale

331
00:18:03,660 --> 00:18:08,530
do you have plans to do more generic

332
00:18:06,670 --> 00:18:09,850
searches where you don't have a specific

333
00:18:08,530 --> 00:18:11,710
cloud provider in mind you're just

334
00:18:09,850 --> 00:18:14,800
looking for the key and then maybe

335
00:18:11,710 --> 00:18:17,200
seeing which keys or most popular and I

336
00:18:14,800 --> 00:18:21,550
guess a more general way to find this

337
00:18:17,200 --> 00:18:25,000
problem for unknown API providers yes in

338
00:18:21,550 --> 00:18:28,270
this one we identified the cloud API by

339
00:18:25,000 --> 00:18:30,250
the SDK in the mobile app so to do so

340
00:18:28,270 --> 00:18:33,340
first we have to class correct

341
00:18:30,250 --> 00:18:35,950
as many as Tiki as possible about those

342
00:18:33,340 --> 00:18:40,389
providers so if we can manually do that

343
00:18:35,950 --> 00:18:44,050
is it of course it can be done just add

344
00:18:40,390 --> 00:18:47,310
the the target cloud ApS with the keys

345
00:18:44,050 --> 00:18:48,580
then we can got all the the content

346
00:18:47,310 --> 00:18:50,600
thank you

347
00:18:48,580 --> 00:18:55,149
oh just thankful speaker one more time

348
00:18:50,600 --> 00:18:55,149
[Applause]

