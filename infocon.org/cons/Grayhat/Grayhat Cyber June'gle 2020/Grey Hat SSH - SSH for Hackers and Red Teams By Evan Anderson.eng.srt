1
00:00:05,340 --> 00:00:12,699
[Music]

2
00:00:16,070 --> 00:00:20,130
all right gray hat SSH or SSH for

3
00:00:20,130 --> 00:00:22,890
hackers and red teams this talk is

4
00:00:22,890 --> 00:00:24,630
intended to be a bunch of practical

5
00:00:24,630 --> 00:00:28,160
examples of stuff you can do with SSH

6
00:00:28,160 --> 00:00:30,930
specifically that are kind of red team

7
00:00:30,930 --> 00:00:34,290
II or hacker related I want to thank the

8
00:00:34,290 --> 00:00:37,110
Texas cyber summit and Red Team Village

9
00:00:37,110 --> 00:00:39,270
for hosting this awesome jingle event

10
00:00:39,270 --> 00:00:41,910
and for accepting my talk and letting me

11
00:00:41,910 --> 00:00:46,550
come and do this so let's get into it

12
00:00:46,550 --> 00:00:49,020
first off my name is Evan I'm the

13
00:00:49,020 --> 00:00:51,860
director of offense at randori

14
00:00:51,860 --> 00:00:57,830
outside of doing red teaming and offense

15
00:00:57,830 --> 00:01:00,660
oriented engagements professionally I'm

16
00:01:00,660 --> 00:01:03,150
also active in CCDC

17
00:01:03,150 --> 00:01:06,270
I'm one of the founding Red Team members

18
00:01:06,270 --> 00:01:09,780
for the National CCDC as well as I am

19
00:01:09,780 --> 00:01:14,670
pretty avid CTF ER and kind of into all

20
00:01:14,670 --> 00:01:16,680
the puzzles and games and cool stuff you

21
00:01:16,680 --> 00:01:20,100
can do that are attack related my

22
00:01:20,100 --> 00:01:24,630
twitter is at syndrome and come come

23
00:01:24,630 --> 00:01:27,390
check it out in the randori channel i'm

24
00:01:27,390 --> 00:01:28,590
going to be in and out of there all day

25
00:01:28,590 --> 00:01:33,290
long so come say hi and yeah that's me

26
00:01:33,290 --> 00:01:36,270
so outline for the talk first we're

27
00:01:36,270 --> 00:01:37,830
gonna go over the basics because I can't

28
00:01:37,830 --> 00:01:39,450
really explain a bunch of the command

29
00:01:39,450 --> 00:01:41,549
lines without covering some of what you

30
00:01:41,549 --> 00:01:44,220
see then we're gonna go over all the fun

31
00:01:44,220 --> 00:01:45,900
stuff you can do with functionality

32
00:01:45,900 --> 00:01:48,900
that's just built into SSH then after

33
00:01:48,900 --> 00:01:50,460
that we're gonna go over how you can

34
00:01:50,460 --> 00:01:53,400
customize SSH and trick users into doing

35
00:01:53,400 --> 00:01:56,580
some fun things for you and in general

36
00:01:56,580 --> 00:01:58,439
just what some of the config files are

37
00:01:58,439 --> 00:02:00,869
where they live how they work

38
00:02:00,869 --> 00:02:02,939
and then finally what probably most

39
00:02:02,939 --> 00:02:04,470
people are here for we're going to go

40
00:02:04,470 --> 00:02:05,670
through a few different scenarios where

41
00:02:05,670 --> 00:02:09,590
you can actually get plaintext creds by

42
00:02:09,590 --> 00:02:12,209
tricking users into doing things that

43
00:02:12,209 --> 00:02:13,769
they are probably not intending to do

44
00:02:13,769 --> 00:02:16,409
you do or kind of taking advantage of

45
00:02:16,409 --> 00:02:23,400
just how the SSH process works so right

46
00:02:23,400 --> 00:02:23,999
from the start

47
00:02:23,999 --> 00:02:26,219
just what is SSH let's kind of start at

48
00:02:26,219 --> 00:02:28,800
the beginning so SSH is act

49
00:02:28,800 --> 00:02:33,120
a secure shell it is both the daemon and

50
00:02:33,120 --> 00:02:36,420
the client so there's an SSH service

51
00:02:36,420 --> 00:02:40,110
that runs on a server sshd that would be

52
00:02:40,110 --> 00:02:41,760
the daemon side and then the client

53
00:02:41,760 --> 00:02:44,070
which is the command-line utility or the

54
00:02:44,070 --> 00:02:47,910
GUI or some other client side that

55
00:02:47,910 --> 00:02:50,340
speaks SSH that lets me connect to that

56
00:02:50,340 --> 00:02:52,890
server and do this functionality

57
00:02:52,890 --> 00:02:55,440
the most common SSH that you're going to

58
00:02:55,440 --> 00:02:57,960
run into is OpenSSH but there's also

59
00:02:57,960 --> 00:03:01,290
dropped bear win ssh there's a bunch of

60
00:03:01,290 --> 00:03:03,630
different libraries that implement SSH

61
00:03:03,630 --> 00:03:08,240
it's actually pretty common ssh get

62
00:03:08,240 --> 00:03:10,760
originally ssh was intended to replace

63
00:03:10,760 --> 00:03:14,670
telnet and rsh which were both remote

64
00:03:14,670 --> 00:03:17,280
administration tools that were plaintext

65
00:03:17,280 --> 00:03:19,260
that's obviously problematic if you're

66
00:03:19,260 --> 00:03:20,610
connecting to something over the network

67
00:03:20,610 --> 00:03:22,770
in plaintext it's really easy to see

68
00:03:22,770 --> 00:03:25,500
what's going on and steal passwords

69
00:03:25,500 --> 00:03:32,400
sniffing etc so SSH is used to remotely

70
00:03:32,400 --> 00:03:35,130
administer systems is a replacement for

71
00:03:35,130 --> 00:03:37,620
telling RS age additionally you can use

72
00:03:37,620 --> 00:03:41,150
SSH to upload and download files

73
00:03:41,150 --> 00:03:44,400
everything is encrypted which is the

74
00:03:44,400 --> 00:03:46,020
goal right make sure that we can

75
00:03:46,020 --> 00:03:48,410
securely administer these systems and

76
00:03:48,410 --> 00:03:52,410
the way the SSH protocol was implemented

77
00:03:52,410 --> 00:03:54,209
there's a bunch of encrypted channels

78
00:03:54,209 --> 00:03:55,980
that you can open and close and this

79
00:03:55,980 --> 00:03:58,230
allows additional functionality such as

80
00:03:58,230 --> 00:04:00,870
port forwarding x11 forwarding and then

81
00:04:00,870 --> 00:04:03,780
of course the full PTY shell that you

82
00:04:03,780 --> 00:04:06,000
get that's exactly like you're running

83
00:04:06,000 --> 00:04:08,970
on the system console you can do

84
00:04:08,970 --> 00:04:09,989
everything that you could do on the

85
00:04:09,989 --> 00:04:13,739
console VI pseudo control C all that

86
00:04:13,739 --> 00:04:15,660
kind of stuff and you don't have to

87
00:04:15,660 --> 00:04:17,190
worry about your session getting killed

88
00:04:17,190 --> 00:04:21,358
or anything like that so the next

89
00:04:21,358 --> 00:04:23,520
obvious question I hear people ask is

90
00:04:23,520 --> 00:04:26,090
well why is this useful for an attacker

91
00:04:26,090 --> 00:04:29,760
I'm always going after anything that can

92
00:04:29,760 --> 00:04:31,800
be used to remotely administer systems

93
00:04:31,800 --> 00:04:35,310
so anything an admin can do I probably

94
00:04:35,310 --> 00:04:38,460
also want to do so that remote shell

95
00:04:38,460 --> 00:04:41,469
access is huge

96
00:04:41,469 --> 00:04:44,069
port forwarding here is super useful

97
00:04:44,069 --> 00:04:46,629
we'll see some examples how I can use

98
00:04:46,629 --> 00:04:48,429
that to get around network security

99
00:04:48,429 --> 00:04:52,089
controls downloading and uploading files

100
00:04:52,089 --> 00:04:54,999
is kind of obvious and then the fact

101
00:04:54,999 --> 00:04:56,709
that the whole thing is encrypted while

102
00:04:56,709 --> 00:04:59,939
it does protect administrators and

103
00:04:59,939 --> 00:05:03,009
people wanting to access systems from

104
00:05:03,009 --> 00:05:05,679
getting their information sniffed it

105
00:05:05,679 --> 00:05:07,059
also protects me from getting my

106
00:05:07,059 --> 00:05:09,189
information sniffed so if I'm crossing

107
00:05:09,189 --> 00:05:10,569
some sort of boundary that I know it's

108
00:05:10,569 --> 00:05:12,639
monitored all of my communications are

109
00:05:12,639 --> 00:05:14,169
now encrypted which makes it that much

110
00:05:14,169 --> 00:05:16,689
harder for defenders to be able to watch

111
00:05:16,689 --> 00:05:20,800
what I'm doing this this little meme

112
00:05:20,800 --> 00:05:23,439
here is kind of perfect is it all you

113
00:05:23,439 --> 00:05:25,930
need well I do need water and food but

114
00:05:25,930 --> 00:05:27,879
other than that if I can get access to

115
00:05:27,879 --> 00:05:30,279
SSH I kind of have access to everything

116
00:05:30,279 --> 00:05:36,099
I need to do I just want to call out

117
00:05:36,099 --> 00:05:38,889
here so the SSH clients right that

118
00:05:38,889 --> 00:05:40,300
you're gonna run into commonly or

119
00:05:40,300 --> 00:05:43,029
OpenSSH is the one you're gonna run into

120
00:05:43,029 --> 00:05:45,039
and almost all of the Linux is some of

121
00:05:45,039 --> 00:05:47,050
the smaller embedded systems use a thing

122
00:05:47,050 --> 00:05:51,279
called drop bear and there are other SSH

123
00:05:51,279 --> 00:05:53,979
kind of gooeys and then for Windows most

124
00:05:53,979 --> 00:05:55,930
of the time you're going to see what's

125
00:05:55,930 --> 00:05:59,259
called putty or which is the GUI and

126
00:05:59,259 --> 00:06:01,149
then produced by the same people that

127
00:06:01,149 --> 00:06:03,309
make putty is a command-line tool called

128
00:06:03,309 --> 00:06:06,490
plink that is very similar to the SSE of

129
00:06:06,490 --> 00:06:09,069
the Linux SSH command line tool and that

130
00:06:09,069 --> 00:06:11,139
a lot of these arguments either the

131
00:06:11,139 --> 00:06:12,789
command lines are actually the same or

132
00:06:12,789 --> 00:06:14,769
it can do the same functionality that

133
00:06:14,769 --> 00:06:16,659
will be going over here and then

134
00:06:16,659 --> 00:06:18,219
additionally we're gonna go over some

135
00:06:18,219 --> 00:06:20,139
stuff that you can do with a Python

136
00:06:20,139 --> 00:06:23,800
project called param eco which is a pure

137
00:06:23,800 --> 00:06:26,289
Python implementation of both the client

138
00:06:26,289 --> 00:06:31,919
and the server side of the SSH protocol

139
00:06:33,899 --> 00:06:36,939
one thing to point out here is SSH is

140
00:06:36,939 --> 00:06:39,159
also great because it's really easy to

141
00:06:39,159 --> 00:06:41,769
enumerate so in this top example I'm

142
00:06:41,769 --> 00:06:43,749
just using a pretty simple nut cat

143
00:06:43,749 --> 00:06:46,029
command to connect to the default SSH

144
00:06:46,029 --> 00:06:49,329
port and I can see that that service is

145
00:06:49,329 --> 00:06:50,649
running SSA

146
00:06:50,649 --> 00:06:53,159
and it's the 2.0 version of the protocol

147
00:06:53,159 --> 00:06:57,879
it is the OpenSSH server 8.3 and this is

148
00:06:57,879 --> 00:07:01,479
running on a debian system since ssh is

149
00:07:01,479 --> 00:07:03,789
so simple to enumerate there is all

150
00:07:03,789 --> 00:07:06,849
sorts of awesome scripts and one of

151
00:07:06,849 --> 00:07:08,499
those that I'm showing an example here

152
00:07:08,499 --> 00:07:11,110
of is nmap where we're running the

153
00:07:11,110 --> 00:07:13,269
discovery scripts you can see kind of

154
00:07:13,269 --> 00:07:14,739
the same information we got from netcat

155
00:07:14,739 --> 00:07:16,959
but there's a banner all the information

156
00:07:16,959 --> 00:07:18,729
for that and then it's also going out

157
00:07:18,729 --> 00:07:20,499
and enumerate all the different

158
00:07:20,499 --> 00:07:22,989
algorithms the ssh supports for doing

159
00:07:22,989 --> 00:07:29,229
the encryption compressing etc so that's

160
00:07:29,229 --> 00:07:32,889
kind of the what is ssh now let's go

161
00:07:32,889 --> 00:07:36,369
over some of the basics or how you use

162
00:07:36,369 --> 00:07:40,749
SSH so the first example here is how I

163
00:07:40,749 --> 00:07:43,209
use SSH to just connect to a remote

164
00:07:43,209 --> 00:07:45,819
system so let's say I have Bob's

165
00:07:45,819 --> 00:07:49,569
password and or maybe I am Bob but more

166
00:07:49,569 --> 00:07:53,559
likely I have Bob's password so here and

167
00:07:53,559 --> 00:07:58,149
Bob has an account on 1010 1010 so here

168
00:07:58,149 --> 00:08:01,539
I say I would like to SSH from my local

169
00:08:01,539 --> 00:08:05,649
system to connect as Bob to 10 10 10 10

170
00:08:05,649 --> 00:08:08,379
so that pretty straightforward SSH Bob

171
00:08:08,379 --> 00:08:13,179
at 10 10 10 10 and then I have a full

172
00:08:13,179 --> 00:08:15,579
shell and I can run Who am I and you can

173
00:08:15,579 --> 00:08:17,349
see Who I am I can run any command that

174
00:08:17,349 --> 00:08:21,099
Bob has access to run the next example

175
00:08:21,099 --> 00:08:23,889
here is me running a single command so

176
00:08:23,889 --> 00:08:26,019
this is connecting out as Bob to that

177
00:08:26,019 --> 00:08:28,689
same server running Who am I and then

178
00:08:28,689 --> 00:08:31,869
I'm just back on my local system now why

179
00:08:31,869 --> 00:08:35,679
is that useful well in the top example

180
00:08:35,679 --> 00:08:37,839
if there's someone watching this system

181
00:08:37,839 --> 00:08:40,509
or logged into this system and they are

182
00:08:40,509 --> 00:08:43,509
watching who is logged in for instance

183
00:08:43,509 --> 00:08:45,399
there's a command called who will show

184
00:08:45,399 --> 00:08:46,899
you all of the users that are logged in

185
00:08:46,899 --> 00:08:49,629
they're gonna see Bob login they're

186
00:08:49,629 --> 00:08:51,279
gonna see the IP address that Bob logged

187
00:08:51,279 --> 00:08:54,399
in from and they might say hey why is

188
00:08:54,399 --> 00:08:56,319
Bob logging in at 2 o'clock in the

189
00:08:56,319 --> 00:09:00,370
morning from some IP address in AWS that

190
00:09:00,370 --> 00:09:01,350
doesn't seem right

191
00:09:01,350 --> 00:09:03,399
and then they're going to catch me and

192
00:09:03,399 --> 00:09:03,950
I'm gonna

193
00:09:03,950 --> 00:09:06,980
really sad so one of the things I can do

194
00:09:06,980 --> 00:09:08,810
here and this isn't foolproof but it

195
00:09:08,810 --> 00:09:10,760
does make it a little bit harder if I

196
00:09:10,760 --> 00:09:13,220
just run these one-off commands then

197
00:09:13,220 --> 00:09:15,230
someone has to run that who command at

198
00:09:15,230 --> 00:09:17,150
the exact time that my commands are

199
00:09:17,150 --> 00:09:19,730
running or there are other commands that

200
00:09:19,730 --> 00:09:21,500
can watch like last and that kind of

201
00:09:21,500 --> 00:09:24,920
stuff but the real takeaway here is this

202
00:09:24,920 --> 00:09:28,130
doesn't just show up in WHO and you

203
00:09:28,130 --> 00:09:29,870
don't unless you're looking at it at the

204
00:09:29,870 --> 00:09:31,640
exact right time you don't even see the

205
00:09:31,640 --> 00:09:33,680
nets in netstat you can't even see that

206
00:09:33,680 --> 00:09:36,830
there is a connection established so

207
00:09:36,830 --> 00:09:40,940
this is kind of a bit of OPSEC thing you

208
00:09:40,940 --> 00:09:42,500
can do to make it a little bit harder

209
00:09:42,500 --> 00:09:47,330
for defenders to find you next up we

210
00:09:47,330 --> 00:09:50,750
have copying files so there's all sorts

211
00:09:50,750 --> 00:09:52,190
of reasons why you would want to get a

212
00:09:52,190 --> 00:09:54,650
file onto a system or get a file off of

213
00:09:54,650 --> 00:09:57,020
the system but here are just a couple

214
00:09:57,020 --> 00:10:01,550
real basic ones so I'm going to use the

215
00:10:01,550 --> 00:10:05,000
utility called SCP so this is secure

216
00:10:05,000 --> 00:10:08,480
copy and I'm going to SCP from my system

217
00:10:08,480 --> 00:10:11,420
the file called malware and then I'm

218
00:10:11,420 --> 00:10:13,910
once again connecting as Bob to 1010

219
00:10:13,910 --> 00:10:17,120
1010 and I'm gonna store that file in

220
00:10:17,120 --> 00:10:20,690
the super non-obvious not malicious

221
00:10:20,690 --> 00:10:24,200
looking at all path of bin not malware

222
00:10:24,200 --> 00:10:26,810
so I'm putting this in a folder that Bob

223
00:10:26,810 --> 00:10:30,050
probably runs executables out of you can

224
00:10:30,050 --> 00:10:31,490
tell it's totally not malware because

225
00:10:31,490 --> 00:10:32,890
that's what it is

226
00:10:32,890 --> 00:10:35,840
in the next example from my local system

227
00:10:35,840 --> 00:10:40,430
I want to copy a file from the remote

228
00:10:40,430 --> 00:10:45,050
system that Bob has access to and that

229
00:10:45,050 --> 00:10:46,550
didn't actually say the beginning but

230
00:10:46,550 --> 00:10:50,390
the SCP syntax is SCP source and then

231
00:10:50,390 --> 00:10:52,820
destination so in the first example it's

232
00:10:52,820 --> 00:10:55,940
SCP source is the malware file on my

233
00:10:55,940 --> 00:10:59,060
local system and the destination is the

234
00:10:59,060 --> 00:11:02,480
bin not malware as Bob on 10.10 dot then

235
00:11:02,480 --> 00:11:05,930
dot n here in the second exit back to

236
00:11:05,930 --> 00:11:07,030
the second example

237
00:11:07,030 --> 00:11:09,410
same thing it's still source and

238
00:11:09,410 --> 00:11:11,750
destination so I want to copy from the

239
00:11:11,750 --> 00:11:14,990
remote system to my system so I want to

240
00:11:14,990 --> 00:11:16,870
copy from Bob at

241
00:11:16,870 --> 00:11:22,279
ten Etsy secret sauce to my local system

242
00:11:22,279 --> 00:11:26,120
in loot secret and then the other thing

243
00:11:26,120 --> 00:11:27,740
to point out here is that you can do

244
00:11:27,740 --> 00:11:30,890
this recursively so say Etsy secret

245
00:11:30,890 --> 00:11:32,779
doesn't just have sauce it has a bunch

246
00:11:32,779 --> 00:11:34,610
of different files in it that I want to

247
00:11:34,610 --> 00:11:38,300
get all of them I can do SCP - are Bob

248
00:11:38,300 --> 00:11:40,610
and same thing source and destination so

249
00:11:40,610 --> 00:11:44,360
Bob at ten ten ten ten at Z secret and

250
00:11:44,360 --> 00:11:47,019
then copy it down into the loop folder

251
00:11:47,019 --> 00:11:49,850
there's actually two ways here to copy

252
00:11:49,850 --> 00:11:53,420
SSH that come kind of by default here so

253
00:11:53,420 --> 00:11:54,290
I'm going to go through the other

254
00:11:54,290 --> 00:11:58,070
example here which is SFTP so this is

255
00:11:58,070 --> 00:12:01,000
just like the other one is secure copy

256
00:12:01,000 --> 00:12:05,540
this is secure FTP so this is actually a

257
00:12:05,540 --> 00:12:07,339
different mechanism if you get into the

258
00:12:07,339 --> 00:12:10,610
SSH protocol SFTP actually does this a

259
00:12:10,610 --> 00:12:12,649
little differently than what s SCP is

260
00:12:12,649 --> 00:12:16,100
doing but kind of how you use this as

261
00:12:16,100 --> 00:12:19,430
you SFTP Bob at 10.10

262
00:12:19,430 --> 00:12:23,329
10 and then I want to get from / secret

263
00:12:23,329 --> 00:12:27,500
sauce to slash loot the secret sauce so

264
00:12:27,500 --> 00:12:29,540
that is from the remote system to my

265
00:12:29,540 --> 00:12:33,470
local system and then in the next

266
00:12:33,470 --> 00:12:36,529
example is uploading a file so I'm going

267
00:12:36,529 --> 00:12:40,699
to put from artifacts on malware on my

268
00:12:40,699 --> 00:12:43,040
system to not malware so that's totally

269
00:12:43,040 --> 00:12:44,630
secret and no one would ever catch that

270
00:12:44,630 --> 00:12:46,790
and then just like in the previous

271
00:12:46,790 --> 00:12:48,980
example if you want to do something

272
00:12:48,980 --> 00:12:51,230
recursively it's a little different like

273
00:12:51,230 --> 00:12:54,140
I said these are SFTP and SCP are

274
00:12:54,140 --> 00:12:55,610
implemented a little differently so the

275
00:12:55,610 --> 00:12:56,899
command-line options are slightly

276
00:12:56,899 --> 00:12:59,810
different this is - capital R I don't

277
00:12:59,810 --> 00:13:02,480
know why they didn't use the same you'll

278
00:13:02,480 --> 00:13:04,760
actually notice that SSH has a bunch of

279
00:13:04,760 --> 00:13:06,529
command-line options and SCP has a bunch

280
00:13:06,529 --> 00:13:07,910
of command-line options and those don't

281
00:13:07,910 --> 00:13:10,399
all match up perfectly either but it's

282
00:13:10,399 --> 00:13:13,570
just something to kind of keep an eye on

283
00:13:13,930 --> 00:13:18,740
so that is kind of the bit or that is

284
00:13:18,740 --> 00:13:20,810
completely the basics so you can log in

285
00:13:20,810 --> 00:13:23,180
and you can copy files so now let's

286
00:13:23,180 --> 00:13:26,149
start looking at the fun stuff you can

287
00:13:26,149 --> 00:13:28,520
do with the different function

288
00:13:28,520 --> 00:13:33,260
you have to forward ports and various

289
00:13:33,260 --> 00:13:38,690
other things here with SSH so I'm going

290
00:13:38,690 --> 00:13:41,360
to start out here with the really basic

291
00:13:41,360 --> 00:13:43,340
example here but you kind of got to

292
00:13:43,340 --> 00:13:44,930
understand what's happening

293
00:13:44,930 --> 00:13:47,810
so I am on my little laptop there on the

294
00:13:47,810 --> 00:13:48,170
left

295
00:13:48,170 --> 00:13:52,700
I happen to know that the Bob's server

296
00:13:52,700 --> 00:13:55,780
of 10.10

297
00:13:57,700 --> 00:14:00,650
canary cannery now I can assume there's

298
00:14:00,650 --> 00:14:02,240
a bunch of servers inside there

299
00:14:02,240 --> 00:14:04,670
potentially so I want to see what's

300
00:14:04,670 --> 00:14:09,070
actually going on inside that network so

301
00:14:09,070 --> 00:14:11,000
unfortunately there's a firewall that's

302
00:14:11,000 --> 00:14:12,890
blocking me I can only see this one

303
00:14:12,890 --> 00:14:15,650
system but maybe from that system I can

304
00:14:15,650 --> 00:14:18,770
see other things so I want to do what's

305
00:14:18,770 --> 00:14:21,470
called a local forward so for instance

306
00:14:21,470 --> 00:14:23,720
maybe I know inside that canary cannery

307
00:14:23,720 --> 00:14:26,270
there's a system in there that's a web

308
00:14:26,270 --> 00:14:27,740
server and that there's some sort of

309
00:14:27,740 --> 00:14:29,780
cool secret on that web server that I

310
00:14:29,780 --> 00:14:32,780
would like to get access to I'm going to

311
00:14:32,780 --> 00:14:36,020
use SSH to set up a local port on my

312
00:14:36,020 --> 00:14:39,620
system that's port 8080 on the Left I'm

313
00:14:39,620 --> 00:14:43,070
going to tunnel that over SSH so it will

314
00:14:43,070 --> 00:14:45,830
send it over the SSH tunnel to that

315
00:14:45,830 --> 00:14:47,570
10.10 dot

316
00:14:47,570 --> 00:14:52,790
and the requests will then come out of

317
00:14:52,790 --> 00:14:54,890
that system connect to that server on

318
00:14:54,890 --> 00:14:56,980
the inside and look like from that

319
00:14:56,980 --> 00:14:59,000
systems point of view look like it's

320
00:14:59,000 --> 00:15:02,230
coming from 10.10 done that ten so I am

321
00:15:02,230 --> 00:15:05,420
forwarding a port of local port from my

322
00:15:05,420 --> 00:15:08,780
system to a port on the other side of

323
00:15:08,780 --> 00:15:13,070
that SSH box what that looks like here

324
00:15:13,070 --> 00:15:18,350
is in the top here's the syntax so minus

325
00:15:18,350 --> 00:15:21,350
capital L and then that bind address is

326
00:15:21,350 --> 00:15:23,300
optional so we don't have to actually

327
00:15:23,300 --> 00:15:24,590
put that part that's why that's in

328
00:15:24,590 --> 00:15:26,840
brackets like that and then I want to

329
00:15:26,840 --> 00:15:28,910
put the local port that I'm going to use

330
00:15:28,910 --> 00:15:31,520
the host I would like that local port to

331
00:15:31,520 --> 00:15:34,310
connect to and the host port that I

332
00:15:34,310 --> 00:15:36,890
would like that to connect to so that is

333
00:15:36,890 --> 00:15:39,770
going there the in the command line that

334
00:15:39,770 --> 00:15:41,420
looks like SSH mine

335
00:15:41,420 --> 00:15:44,120
CEL port 8080 for the local port on my

336
00:15:44,120 --> 00:15:48,800
system 192 168 1.10 which is the IP

337
00:15:48,800 --> 00:15:50,870
address on the remote side and then port

338
00:15:50,870 --> 00:15:53,150
80 because that's the webserver then I'm

339
00:15:53,150 --> 00:15:57,200
gonna do that as Bob at 10.10 10.10 and

340
00:15:57,200 --> 00:15:58,550
one thing I want to point out here is

341
00:15:58,550 --> 00:16:03,200
that - capital n that's telling my ssh

342
00:16:03,200 --> 00:16:05,660
client to not request a shell on that

343
00:16:05,660 --> 00:16:08,810
remote system just like before I was

344
00:16:08,810 --> 00:16:10,880
running single commands so that someone

345
00:16:10,880 --> 00:16:12,800
wouldn't be able to just see me in the

346
00:16:12,800 --> 00:16:16,400
whoo output this - capital n doesn't

347
00:16:16,400 --> 00:16:18,260
request a shell so you don't actually

348
00:16:18,260 --> 00:16:20,390
see that access the only way you see

349
00:16:20,390 --> 00:16:23,840
this is by looking at the ssh logs or by

350
00:16:23,840 --> 00:16:25,430
looking at net stat and seeing that

351
00:16:25,430 --> 00:16:29,260
there's a weird connection to port 22

352
00:16:29,260 --> 00:16:31,640
once i have established that connection

353
00:16:31,640 --> 00:16:33,560
so for this example i just kind of run

354
00:16:33,560 --> 00:16:35,120
it in the background with that ampersand

355
00:16:35,120 --> 00:16:38,840
and now I can connect to port 8080 on my

356
00:16:38,840 --> 00:16:41,750
local system and make an HTTP request

357
00:16:41,750 --> 00:16:44,090
just with coral for this example and

358
00:16:44,090 --> 00:16:48,710
grab that secret dot txt and then as is

359
00:16:48,710 --> 00:16:51,350
kind of always how it works for the red

360
00:16:51,350 --> 00:16:54,430
team we went

361
00:16:56,270 --> 00:16:59,540
that's super neat right that I can go to

362
00:16:59,540 --> 00:17:02,390
one system in there alright I've

363
00:17:02,390 --> 00:17:04,369
bypassed a firewall that's pretty great

364
00:17:04,369 --> 00:17:08,089
with kind of minimal effort but I don't

365
00:17:08,089 --> 00:17:09,530
want to do that for each of these

366
00:17:09,530 --> 00:17:11,720
systems there's all sorts of systems

367
00:17:11,720 --> 00:17:13,520
back behind there I don't know what they

368
00:17:13,520 --> 00:17:15,109
were all doing and if I have to set up

369
00:17:15,109 --> 00:17:17,950
this for every single port that happens

370
00:17:17,950 --> 00:17:20,960
I'm gonna be sad and be typing quite a

371
00:17:20,960 --> 00:17:24,500
bit so luckily SSH just thought of that

372
00:17:24,500 --> 00:17:27,290
for us and given us this dynamic port

373
00:17:27,290 --> 00:17:30,920
forwarding feature so I can set up with

374
00:17:30,920 --> 00:17:34,280
one SSH command on my system a socks

375
00:17:34,280 --> 00:17:38,450
proxy which is a socks is just a TCP

376
00:17:38,450 --> 00:17:41,960
forwarding protocol so I can set that up

377
00:17:41,960 --> 00:17:44,510
so that on my system there is a port I

378
00:17:44,510 --> 00:17:46,730
use 1080 generally because that's kind

379
00:17:46,730 --> 00:17:50,510
of the default socks proxy port and I

380
00:17:50,510 --> 00:17:52,820
can set that up Tunnel that just like

381
00:17:52,820 --> 00:17:54,020
the local forward

382
00:17:54,020 --> 00:17:57,260
through that SSH tunnel over the SSH

383
00:17:57,260 --> 00:17:59,870
server and then connect out to any of

384
00:17:59,870 --> 00:18:01,370
the systems that are on the other side

385
00:18:01,370 --> 00:18:06,260
of that SSH server so I'm going from if

386
00:18:06,260 --> 00:18:09,050
I can act to this 1080 with something

387
00:18:09,050 --> 00:18:11,390
that knows how to speak the Sox protocol

388
00:18:11,390 --> 00:18:13,790
all of my connections actually wind up

389
00:18:13,790 --> 00:18:15,650
coming out over here and I could connect

390
00:18:15,650 --> 00:18:17,690
to all these different servers on there

391
00:18:17,690 --> 00:18:21,320
TCP ports and browse whatever they have

392
00:18:21,320 --> 00:18:25,100
so for instance a lot of times when I'm

393
00:18:25,100 --> 00:18:26,990
doing engagements against an

394
00:18:26,990 --> 00:18:28,400
organization and I don't know anything

395
00:18:28,400 --> 00:18:30,140
about that organization I'm going to be

396
00:18:30,140 --> 00:18:34,040
looking for wiki's or other sources of

397
00:18:34,040 --> 00:18:36,290
information about that org so I can

398
00:18:36,290 --> 00:18:38,210
figure out what their password schemes

399
00:18:38,210 --> 00:18:39,740
are and all that kind of stuff

400
00:18:39,740 --> 00:18:42,440
so it's really useful for me to be able

401
00:18:42,440 --> 00:18:45,170
to instead of just running curl maybe

402
00:18:45,170 --> 00:18:47,180
point a browser at one of these web

403
00:18:47,180 --> 00:18:49,250
servers and get access to the

404
00:18:49,250 --> 00:18:51,020
information that is on the other side of

405
00:18:51,020 --> 00:18:54,350
there so what does that look like from

406
00:18:54,350 --> 00:18:55,940
the command line it's actually easier

407
00:18:55,940 --> 00:18:57,140
than the other thing that I was doing

408
00:18:57,140 --> 00:19:01,120
and that I just needed to use minus D so

409
00:19:01,120 --> 00:19:04,220
dynamic right and then same thing the

410
00:19:04,220 --> 00:19:05,570
bind address is optional I don't

411
00:19:05,570 --> 00:19:08,030
actually have to say that and then the

412
00:19:08,030 --> 00:19:09,710
port that I want to open up on my system

413
00:19:09,710 --> 00:19:11,870
and then tell it where I'm connecting to

414
00:19:11,870 --> 00:19:17,360
so this is SSH - D 1080 is the port like

415
00:19:17,360 --> 00:19:19,160
I said that's a pretty common socks

416
00:19:19,160 --> 00:19:22,850
proxy port and then Bob at ten ten ten

417
00:19:22,850 --> 00:19:26,630
ten and then on my system I will see

418
00:19:26,630 --> 00:19:32,450
1080 as a port that is open and say I

419
00:19:32,450 --> 00:19:35,270
want to use my browser so this is an

420
00:19:35,270 --> 00:19:36,310
example of how you would configure

421
00:19:36,310 --> 00:19:40,370
Firefox to use a proxy like that chrome

422
00:19:40,370 --> 00:19:42,620
is can also pretty much any web browser

423
00:19:42,620 --> 00:19:44,990
can use proxies like this but for

424
00:19:44,990 --> 00:19:45,680
Firefox

425
00:19:45,680 --> 00:19:48,950
just for simplicity you get preferences

426
00:19:48,950 --> 00:19:52,370
network settings and then you select

427
00:19:52,370 --> 00:19:55,910
manual proxy conf configuration here and

428
00:19:55,910 --> 00:19:57,950
then you tell it hey this is a socks

429
00:19:57,950 --> 00:20:00,320
proxy this is the port there it's on my

430
00:20:00,320 --> 00:20:05,820
local host and this is on 1080 and then

431
00:20:05,820 --> 00:20:08,400
just the default here socks5 I leave it

432
00:20:08,400 --> 00:20:09,150
at this

433
00:20:09,150 --> 00:20:12,140
SSH can actually do Sox for and Sox five

434
00:20:12,140 --> 00:20:14,820
but Sox five is kind of the newer and

435
00:20:14,820 --> 00:20:17,040
does some cool stuff for you like DNS

436
00:20:17,040 --> 00:20:21,480
resolution and that kind of stuff so now

437
00:20:21,480 --> 00:20:24,450
once this configuration is set anything

438
00:20:24,450 --> 00:20:26,640
I try to go to in this browser will

439
00:20:26,640 --> 00:20:30,830
actually go through this system here and

440
00:20:30,830 --> 00:20:34,140
come out right sorry this system here

441
00:20:34,140 --> 00:20:36,900
and come out over here so that you can

442
00:20:36,900 --> 00:20:39,450
see that traffic and get access to all

443
00:20:39,450 --> 00:20:41,550
of these systems that are here behind

444
00:20:41,550 --> 00:20:44,820
this firewall so I've used this dynamic

445
00:20:44,820 --> 00:20:47,660
forwarding to actually get past all this

446
00:20:47,660 --> 00:20:50,370
firewall stuff and essentially hop that

447
00:20:50,370 --> 00:20:53,210
boundary into this network which is

448
00:20:53,210 --> 00:20:58,050
obviously pretty useful hopefully and

449
00:20:58,050 --> 00:21:00,240
then so that's cool I have a browser

450
00:21:00,240 --> 00:21:02,010
doing it but maybe I have all sorts of

451
00:21:02,010 --> 00:21:04,110
other tools that I want to be able to do

452
00:21:04,110 --> 00:21:07,110
like I don't know something with

453
00:21:07,110 --> 00:21:10,680
Metasploit or some sort of craziness one

454
00:21:10,680 --> 00:21:12,270
of the other things that you can do here

455
00:21:12,270 --> 00:21:14,220
is there are a few different tools but I

456
00:21:14,220 --> 00:21:16,290
like to use this proxy change tool it's

457
00:21:16,290 --> 00:21:19,560
pretty easy to configure so proxy chains

458
00:21:19,560 --> 00:21:22,350
has a configuration file the same thing

459
00:21:22,350 --> 00:21:24,570
here there's a proxy list I just tell it

460
00:21:24,570 --> 00:21:28,520
hey do socks5 to localhost at 1080 and

461
00:21:28,520 --> 00:21:33,900
then I can here run proxy chains bash

462
00:21:33,900 --> 00:21:36,180
now that's gonna drop me into an

463
00:21:36,180 --> 00:21:38,520
interactive bash shell and then anything

464
00:21:38,520 --> 00:21:40,770
I do in that bass show will also be sent

465
00:21:40,770 --> 00:21:43,680
out over that proxy so I can use curl I

466
00:21:43,680 --> 00:21:45,630
can use my netcat anything that's going

467
00:21:45,630 --> 00:21:48,840
to talk TCP you can do proxy chains on

468
00:21:48,840 --> 00:21:51,000
just individual commands but I find I

469
00:21:51,000 --> 00:21:52,470
actually like to just have a shell

470
00:21:52,470 --> 00:21:54,950
that's just everything is forwarded

471
00:21:54,950 --> 00:21:59,010
proxy chains is doing that by kind of

472
00:21:59,010 --> 00:22:02,010
hijacking the networking of any of the

473
00:22:02,010 --> 00:22:03,960
protocol or any of the binaries that run

474
00:22:03,960 --> 00:22:08,220
and injecting the proxy part of that to

475
00:22:08,220 --> 00:22:12,450
speak to that proxy for you so if you do

476
00:22:12,450 --> 00:22:13,980
have something that's like a statically

477
00:22:13,980 --> 00:22:16,110
compiled binary it's probably not going

478
00:22:16,110 --> 00:22:17,420
to work but from

479
00:22:17,420 --> 00:22:20,370
things this will work out pretty good so

480
00:22:20,370 --> 00:22:21,520
[Music]

481
00:22:21,520 --> 00:22:26,480
that's local forwarding and dynamic port

482
00:22:26,480 --> 00:22:30,290
forwarding that's pretty neat but maybe

483
00:22:30,290 --> 00:22:33,020
say I need to get outside so let's say

484
00:22:33,020 --> 00:22:35,780
this time I'm actually inside of canary

485
00:22:35,780 --> 00:22:39,440
cannery maybe I fished someone and I

486
00:22:39,440 --> 00:22:41,330
have access to this server here on the

487
00:22:41,330 --> 00:22:43,490
right and they have really good egress

488
00:22:43,490 --> 00:22:45,350
filtering so I can't actually get to the

489
00:22:45,350 --> 00:22:47,210
internet and I'm just completely blocked

490
00:22:47,210 --> 00:22:51,140
here but I can't get to this 10.10 box

491
00:22:51,140 --> 00:22:54,560
where I have SSH access so I want to

492
00:22:54,560 --> 00:22:57,890
download a file say on this system that

493
00:22:57,890 --> 00:23:00,470
I have compromised but I don't want to

494
00:23:00,470 --> 00:23:04,040
just copy it up to the SSH server and

495
00:23:04,040 --> 00:23:06,410
then have it like on the file system so

496
00:23:06,410 --> 00:23:08,480
somebody else can find it or get caught

497
00:23:08,480 --> 00:23:10,550
in the middle of doing that I just want

498
00:23:10,550 --> 00:23:13,640
this all to happen in one shot so now I

499
00:23:13,640 --> 00:23:15,830
can do what's called a remote port

500
00:23:15,830 --> 00:23:19,670
forward so from me on my box I will set

501
00:23:19,670 --> 00:23:25,520
up where port 8080 on this SSH box

502
00:23:25,520 --> 00:23:28,940
actually forwards instead of this way

503
00:23:28,940 --> 00:23:31,580
fords this way so if you go to port 8080

504
00:23:31,580 --> 00:23:34,730
here it actually comes and hits my box

505
00:23:34,730 --> 00:23:37,910
on port 8080 so anything that hits this

506
00:23:37,910 --> 00:23:41,210
can now hit my system and then once

507
00:23:41,210 --> 00:23:43,550
again I'll be bypassing those that

508
00:23:43,550 --> 00:23:48,110
firewall this time for the egress so

509
00:23:48,110 --> 00:23:50,870
what does that look like well thankfully

510
00:23:50,870 --> 00:23:52,940
SSH makes it kind of obvious for us

511
00:23:52,940 --> 00:23:56,450
there's a minus R for a remote and then

512
00:23:56,450 --> 00:23:58,340
same things buying address is optional I

513
00:23:58,340 --> 00:24:01,250
can give it here port host and then host

514
00:24:01,250 --> 00:24:06,080
port one thing to point out here is most

515
00:24:06,080 --> 00:24:09,140
SSH servers modern SSH servers are going

516
00:24:09,140 --> 00:24:11,630
to have this it's called gateway ports

517
00:24:11,630 --> 00:24:14,150
disabled by default so this will say no

518
00:24:14,150 --> 00:24:17,690
in the config file and all you have to

519
00:24:17,690 --> 00:24:19,550
do is change this to yes and then

520
00:24:19,550 --> 00:24:23,210
restart SSH the nice thing about SSH

521
00:24:23,210 --> 00:24:25,310
when you restarted it is it doesn't kill

522
00:24:25,310 --> 00:24:28,750
your existing SSH

523
00:24:28,750 --> 00:24:31,330
processes so if you're logged in via SSH

524
00:24:31,330 --> 00:24:35,020
you can still restart the SSH server but

525
00:24:35,020 --> 00:24:37,419
that lets you bind to what's called the

526
00:24:37,419 --> 00:24:40,840
any address which is 0.0.0.0 so that

527
00:24:40,840 --> 00:24:44,049
makes it look like por AE or it doesn't

528
00:24:44,049 --> 00:24:45,309
make it look like it just actually is

529
00:24:45,309 --> 00:24:49,600
port 8080 is open on that server just

530
00:24:49,600 --> 00:24:51,580
like it's running a service on that

531
00:24:51,580 --> 00:24:54,190
server instead its port forwarded

532
00:24:54,190 --> 00:24:59,169
through to your laptop now so here in

533
00:24:59,169 --> 00:25:01,630
the example I now just set this up so I

534
00:25:01,630 --> 00:25:06,039
say SSH - capital R port 8080 I want to

535
00:25:06,039 --> 00:25:08,710
bind to that any address and then it's

536
00:25:08,710 --> 00:25:11,830
also port 8080 on the remote system that

537
00:25:11,830 --> 00:25:14,409
I want to open up and then it is Bob at

538
00:25:14,409 --> 00:25:18,429
ten ten ten ten I used that same - n

539
00:25:18,429 --> 00:25:20,679
arguments that I don't actually request

540
00:25:20,679 --> 00:25:22,809
a shell once again just don't want to

541
00:25:22,809 --> 00:25:24,490
make it easy for defenders to find me

542
00:25:24,490 --> 00:25:28,350
and then I set that into the background

543
00:25:28,350 --> 00:25:31,120
for this example I just started a simple

544
00:25:31,120 --> 00:25:33,100
HTTP server because I just want to serve

545
00:25:33,100 --> 00:25:36,130
a file from my local system and then on

546
00:25:36,130 --> 00:25:39,549
the remote system so if you remember let

547
00:25:39,549 --> 00:25:41,860
me go back one here so this is the

548
00:25:41,860 --> 00:25:44,380
remote system now if I run that curl

549
00:25:44,380 --> 00:25:46,659
command it's gonna hit here and then hit

550
00:25:46,659 --> 00:25:51,400
my laptop so you can see here curl 10.10

551
00:25:51,400 --> 00:25:53,320
done 10 - 10 is that remote system and

552
00:25:53,320 --> 00:25:56,260
then I hit that port 8080 I grab the

553
00:25:56,260 --> 00:25:59,470
secret and then once again we get to win

554
00:25:59,470 --> 00:26:02,580
which is pretty awesome

555
00:26:02,580 --> 00:26:06,880
so that is local dynamic and remote port

556
00:26:06,880 --> 00:26:08,409
forwarding kind of anything you want to

557
00:26:08,409 --> 00:26:10,750
do with TCP ports you can make up here

558
00:26:10,750 --> 00:26:12,789
so you can combine these in all sorts of

559
00:26:12,789 --> 00:26:15,539
different and interesting combinations

560
00:26:15,539 --> 00:26:19,960
and it is super useful to be able to get

561
00:26:19,960 --> 00:26:21,760
around firewalls hop through networks

562
00:26:21,760 --> 00:26:25,870
you can actually local forward across

563
00:26:25,870 --> 00:26:28,000
multiple systems as long as you align

564
00:26:28,000 --> 00:26:29,610
all the ports right and get everything

565
00:26:29,610 --> 00:26:31,780
pointed in the right direction so you

566
00:26:31,780 --> 00:26:33,309
could actually hop through multiple

567
00:26:33,309 --> 00:26:34,840
different firewalls if you wanted to

568
00:26:34,840 --> 00:26:36,850
proxy them all together all the way

569
00:26:36,850 --> 00:26:39,209
through

570
00:26:39,850 --> 00:26:42,070
the other type of one of the other type

571
00:26:42,070 --> 00:26:43,420
of warnings that you can do here is

572
00:26:43,420 --> 00:26:48,250
what's called x11 forwarding so x11 is

573
00:26:48,250 --> 00:26:50,950
what the graphical interface is called

574
00:26:50,950 --> 00:26:53,710
on a UNIX system there are two

575
00:26:53,710 --> 00:26:55,570
command-line options you can do this

576
00:26:55,570 --> 00:26:59,760
with an SSH there's minus X and minus y

577
00:26:59,760 --> 00:27:03,610
minus y is the secure version minus X is

578
00:27:03,610 --> 00:27:06,880
kind of an older version at any rate

579
00:27:06,880 --> 00:27:08,860
they work almost exactly the same from a

580
00:27:08,860 --> 00:27:11,800
user point of view but what you can do

581
00:27:11,800 --> 00:27:14,620
here is I can run a process on the

582
00:27:14,620 --> 00:27:17,020
remote system and if it has a GUI

583
00:27:17,020 --> 00:27:19,950
component it will actually show up on my

584
00:27:19,950 --> 00:27:24,970
Linux box you can do this with on Mac OS

585
00:27:24,970 --> 00:27:26,950
you can install what's called exports on

586
00:27:26,950 --> 00:27:28,720
Windows there's a couple of different

587
00:27:28,720 --> 00:27:31,720
tools you can install that are x11

588
00:27:31,720 --> 00:27:34,540
servers you have to have your own x11

589
00:27:34,540 --> 00:27:37,420
server running locally and then once you

590
00:27:37,420 --> 00:27:40,240
do this SSH minus X that tells it to

591
00:27:40,240 --> 00:27:42,310
forward any of that GUI component back

592
00:27:42,310 --> 00:27:45,580
to your system here in the example just

593
00:27:45,580 --> 00:27:47,200
for kind of simplicity and put it on the

594
00:27:47,200 --> 00:27:51,070
slide I watched this excise tool so this

595
00:27:51,070 --> 00:27:52,690
is a little GUI tool that you can launch

596
00:27:52,690 --> 00:27:54,880
in UNIX systems and if this was actually

597
00:27:54,880 --> 00:27:58,270
live you would see the pupils follow my

598
00:27:58,270 --> 00:28:03,280
cursor around here but why this is

599
00:28:03,280 --> 00:28:06,130
useful there's a couple different use

600
00:28:06,130 --> 00:28:10,930
cases for this that are actually really

601
00:28:10,930 --> 00:28:11,950
really useful

602
00:28:11,950 --> 00:28:14,700
the first is say that I know that Bob

603
00:28:14,700 --> 00:28:18,220
logs into this system and uses the GUI

604
00:28:18,220 --> 00:28:20,740
components on the system to do something

605
00:28:20,740 --> 00:28:23,650
like browse internal network resources

606
00:28:23,650 --> 00:28:25,600
or something that I don't generally have

607
00:28:25,600 --> 00:28:30,610
access to if I have access to a shell on

608
00:28:30,610 --> 00:28:33,040
this system as Bob and I do this x11

609
00:28:33,040 --> 00:28:36,220
forward and I can forward back any of

610
00:28:36,220 --> 00:28:39,760
those graphical interfaces to me with

611
00:28:39,760 --> 00:28:41,350
the process running on the remote system

612
00:28:41,350 --> 00:28:43,900
so say for instance it's a web browser

613
00:28:43,900 --> 00:28:46,570
and Bob I know is logged in and stores

614
00:28:46,570 --> 00:28:49,450
his cookies to access an internal wiki

615
00:28:49,450 --> 00:28:51,140
page or

616
00:28:51,140 --> 00:28:54,190
the internal git repo or whatever

617
00:28:54,190 --> 00:28:57,200
internal system that Bob is storing is

618
00:28:57,200 --> 00:28:59,269
credentials for I can launch that

619
00:28:59,269 --> 00:29:01,580
browser as Bob and have it come back to

620
00:29:01,580 --> 00:29:04,130
me and if that browse are storing those

621
00:29:04,130 --> 00:29:05,659
credentials then I can just use that

622
00:29:05,659 --> 00:29:09,460
browser like I am logged in as Bob

623
00:29:10,539 --> 00:29:12,559
another thing you can do with this

624
00:29:12,559 --> 00:29:14,390
that's kind of fun is you can launch

625
00:29:14,390 --> 00:29:18,260
something like X term or genome terminal

626
00:29:18,260 --> 00:29:21,320
or any of those and then you have once

627
00:29:21,320 --> 00:29:23,240
again instead of just the SSH session

628
00:29:23,240 --> 00:29:25,909
you have like a full you know mean

629
00:29:25,909 --> 00:29:30,350
terminal running on your x11 server so

630
00:29:30,350 --> 00:29:31,639
it's a little bit harder and more

631
00:29:31,639 --> 00:29:33,830
confusing for defenders to figure out

632
00:29:33,830 --> 00:29:36,789
what's going on because you have

633
00:29:36,789 --> 00:29:39,320
essentially like the graphic component

634
00:29:39,320 --> 00:29:43,309
of that SSH or that shell running in

635
00:29:43,309 --> 00:29:46,789
your local system which is pretty fun

636
00:29:46,789 --> 00:29:50,630
and can be a cool way to keep access to

637
00:29:50,630 --> 00:29:52,389
a system when they're killing all of the

638
00:29:52,389 --> 00:29:54,590
shells and stuff that you have on the

639
00:29:54,590 --> 00:30:00,200
system so that is the forwarding stuff

640
00:30:00,200 --> 00:30:03,350
that I have up next we're going to take

641
00:30:03,350 --> 00:30:05,960
a look at some fun that you can have

642
00:30:05,960 --> 00:30:09,200
with the config files that work for SSH

643
00:30:09,200 --> 00:30:12,139
so like most UNIX systems there are a

644
00:30:12,139 --> 00:30:14,120
bunch of different config files that can

645
00:30:14,120 --> 00:30:16,639
do all sorts of craziness craziness with

646
00:30:16,639 --> 00:30:21,200
SSH and it's a little more interesting

647
00:30:21,200 --> 00:30:23,419
because there is a server and a client

648
00:30:23,419 --> 00:30:25,610
side component to this so there are

649
00:30:25,610 --> 00:30:27,380
configurations that can change the way

650
00:30:27,380 --> 00:30:29,960
the server works and configuration files

651
00:30:29,960 --> 00:30:31,460
that can change the way that client

652
00:30:31,460 --> 00:30:35,059
works the first thing I want to take a

653
00:30:35,059 --> 00:30:38,630
look at here is what's called authorized

654
00:30:38,630 --> 00:30:44,539
keys so SSH has two ways that you that

655
00:30:44,539 --> 00:30:48,380
it can authenticate users one is through

656
00:30:48,380 --> 00:30:50,630
a username and password so your SSH and

657
00:30:50,630 --> 00:30:52,610
then you type in your password the other

658
00:30:52,610 --> 00:30:57,350
is public and private key so on my local

659
00:30:57,350 --> 00:31:01,010
system I generate a public and private

660
00:31:01,010 --> 00:31:03,420
key so here as

661
00:31:03,420 --> 00:31:06,030
which is not the best example but you

662
00:31:06,030 --> 00:31:08,190
know I run this command called

663
00:31:08,190 --> 00:31:10,559
ssh-keygen and that's going to generate

664
00:31:10,559 --> 00:31:13,110
the public and private key pair for me

665
00:31:13,110 --> 00:31:17,760
and put them in my home directory if I

666
00:31:17,760 --> 00:31:22,380
put the public side of that SSH key into

667
00:31:22,380 --> 00:31:25,830
the authorized keys file on the remote

668
00:31:25,830 --> 00:31:29,429
system then during the ssh negotiation

669
00:31:29,429 --> 00:31:31,049
when it's trying to figure out if i'm

670
00:31:31,049 --> 00:31:35,760
allowed to log in or not the its this is

671
00:31:35,760 --> 00:31:37,110
like a really dumbed down version of

672
00:31:37,110 --> 00:31:39,660
this but the the client side says hey i

673
00:31:39,660 --> 00:31:42,210
have this secret and the server says i

674
00:31:42,210 --> 00:31:44,280
don't believe you encrypted this with it

675
00:31:44,280 --> 00:31:47,850
and you say ok or the client says ok and

676
00:31:47,850 --> 00:31:49,590
Cripps it and sends it back and then the

677
00:31:49,590 --> 00:31:51,450
server decrypt it with the public key

678
00:31:51,450 --> 00:31:53,850
and says ok cool that's you you did it

679
00:31:53,850 --> 00:31:56,070
right and lets you log in no password

680
00:31:56,070 --> 00:32:01,710
necessary this is very useful for a

681
00:32:01,710 --> 00:32:05,040
bunch of reasons so say I am on the

682
00:32:05,040 --> 00:32:07,440
remote system as Bob because I fish Bob

683
00:32:07,440 --> 00:32:11,370
or I got access to a web server that has

684
00:32:11,370 --> 00:32:17,340
a vulnerability in it or maybe Bob just

685
00:32:17,340 --> 00:32:19,200
ran a command for me that has my

686
00:32:19,200 --> 00:32:20,880
malicious payload in it and I want to

687
00:32:20,880 --> 00:32:23,520
get access to this system in a more full

688
00:32:23,520 --> 00:32:27,990
manner I can put a put an SSH key in

689
00:32:27,990 --> 00:32:30,059
this authorized keys file and then I

690
00:32:30,059 --> 00:32:31,980
don't even need to know Bob's password

691
00:32:31,980 --> 00:32:34,830
but log in as long as I can control that

692
00:32:34,830 --> 00:32:38,330
authorized keys file I can get in

693
00:32:38,330 --> 00:32:40,140
additionally if you were wanting to

694
00:32:40,140 --> 00:32:43,650
persist say someone is watching you do

695
00:32:43,650 --> 00:32:45,090
this and there's like hey Bob is account

696
00:32:45,090 --> 00:32:47,160
is compromised and changes his password

697
00:32:47,160 --> 00:32:49,230
once again if you have that authorized

698
00:32:49,230 --> 00:32:50,790
Keys file you don't actually need Bob's

699
00:32:50,790 --> 00:32:55,260
password to log in this is very useful

700
00:32:55,260 --> 00:32:58,530
for CTF and challenge type games or you

701
00:32:58,530 --> 00:33:00,419
get shell access to someone and you want

702
00:33:00,419 --> 00:33:03,120
to escalate that shell and then try to

703
00:33:03,120 --> 00:33:05,549
find other privileges this is also just

704
00:33:05,549 --> 00:33:08,130
super useful in general there's any way

705
00:33:08,130 --> 00:33:10,470
I can get access to that SSH authorize

706
00:33:10,470 --> 00:33:13,910
keys then I can get access to

707
00:33:13,910 --> 00:33:15,710
remote system without having to really

708
00:33:15,710 --> 00:33:17,750
change anything or know anybody's

709
00:33:17,750 --> 00:33:19,940
password the other thing to point out

710
00:33:19,940 --> 00:33:22,070
here is there is an authorized keys file

711
00:33:22,070 --> 00:33:26,050
that is global which is in Etsy SSH so

712
00:33:26,050 --> 00:33:28,580
you can actually set up authorized keys

713
00:33:28,580 --> 00:33:30,860
that let you log in it's any user or as

714
00:33:30,860 --> 00:33:35,000
individual users and they're in a couple

715
00:33:35,000 --> 00:33:36,650
of different places so it's a little bit

716
00:33:36,650 --> 00:33:41,870
harder to track down what's going on the

717
00:33:41,870 --> 00:33:44,540
next file here that is very interesting

718
00:33:44,540 --> 00:33:48,530
is the known hosts file so kind of once

719
00:33:48,530 --> 00:33:51,320
again there's it's kind of a overarching

720
00:33:51,320 --> 00:33:53,720
how they implement stuff in SSH there's

721
00:33:53,720 --> 00:33:55,970
a global file which applies to everybody

722
00:33:55,970 --> 00:33:59,180
and then a local file that is just for

723
00:33:59,180 --> 00:34:02,720
that user so once I have access to a

724
00:34:02,720 --> 00:34:06,170
system I can look at these known hosts

725
00:34:06,170 --> 00:34:08,418
files and what they are is their lists

726
00:34:08,418 --> 00:34:11,929
of all of the public key keys for

727
00:34:11,929 --> 00:34:14,090
systems that have been logged into from

728
00:34:14,090 --> 00:34:19,760
this system so I get access to the

729
00:34:19,760 --> 00:34:22,340
system is Bob I only know about that one

730
00:34:22,340 --> 00:34:24,320
system so now I can go and look through

731
00:34:24,320 --> 00:34:26,060
these known hosts files and see the

732
00:34:26,060 --> 00:34:28,760
other systems that bob has access to log

733
00:34:28,760 --> 00:34:31,699
into now if I know Bob's password or if

734
00:34:31,699 --> 00:34:34,550
and Bob is reusing passwords which we

735
00:34:34,550 --> 00:34:36,139
know is bad but happens all the time

736
00:34:36,139 --> 00:34:40,340
still or if bob has that public private

737
00:34:40,340 --> 00:34:42,409
key stuff set up and I can get access to

738
00:34:42,409 --> 00:34:44,900
that private key now I can log into any

739
00:34:44,900 --> 00:34:46,580
of the systems that bob is logged into

740
00:34:46,580 --> 00:34:48,949
this is just a list of those systems for

741
00:34:48,949 --> 00:34:52,190
me so really good situational awareness

742
00:34:52,190 --> 00:34:55,030
for when I get access to a system and

743
00:34:55,030 --> 00:34:57,560
trying to figure out what other systems

744
00:34:57,560 --> 00:34:59,990
I have access to I can just go and look

745
00:34:59,990 --> 00:35:02,570
at this file and then I don't even have

746
00:35:02,570 --> 00:35:04,160
to try its credentials on a bunch of

747
00:35:04,160 --> 00:35:08,210
different systems and make a bunch of

748
00:35:08,210 --> 00:35:11,420
log files that say log and failed and

749
00:35:11,420 --> 00:35:12,200
all that kind of stuff

750
00:35:12,200 --> 00:35:14,360
I can just go log in to these systems

751
00:35:14,360 --> 00:35:16,160
that he has access to log into and it

752
00:35:16,160 --> 00:35:17,540
doesn't even look weird from this point

753
00:35:17,540 --> 00:35:20,300
cuz I'm just logging in as him from a

754
00:35:20,300 --> 00:35:23,490
system that he has logged into before

755
00:35:23,490 --> 00:35:26,940
and that is known a house there's one

756
00:35:26,940 --> 00:35:28,950
thing to point out a lot of modern

757
00:35:28,950 --> 00:35:33,390
systems actually have this so that IP

758
00:35:33,390 --> 00:35:35,790
address is hashed you can actually turn

759
00:35:35,790 --> 00:35:36,630
that off though

760
00:35:36,630 --> 00:35:40,200
so in Etsy SSH SSH config there is an

761
00:35:40,200 --> 00:35:45,990
option to turn that off so let's talk

762
00:35:45,990 --> 00:35:50,730
about SSH SSH config a little bit this

763
00:35:50,730 --> 00:35:55,350
lets us tell SSH the command line what

764
00:35:55,350 --> 00:35:59,040
to do so there's kind of two file

765
00:35:59,040 --> 00:36:02,100
structures here there's Etsy SSH SSH

766
00:36:02,100 --> 00:36:04,380
config and then you'll actually see Etsy

767
00:36:04,380 --> 00:36:09,030
SSH SSH Dee config SSH D is for the

768
00:36:09,030 --> 00:36:11,160
daemon and ssh configures for the

769
00:36:11,160 --> 00:36:13,500
command-line argument most the time

770
00:36:13,500 --> 00:36:17,670
you're going to see ssh D and SSH just

771
00:36:17,670 --> 00:36:19,860
the client installed the side-by-side so

772
00:36:19,860 --> 00:36:23,670
that can be a little confusing it it

773
00:36:23,670 --> 00:36:25,980
lets us do a bunch of cool things so we

774
00:36:25,980 --> 00:36:27,810
can configure all sorts of stuff with

775
00:36:27,810 --> 00:36:31,050
the SSH config both for us to not have

776
00:36:31,050 --> 00:36:33,450
to type stuff a lot and if you want to

777
00:36:33,450 --> 00:36:35,550
do interesting things for the user or

778
00:36:35,550 --> 00:36:36,960
really kind of trick the user and their

779
00:36:36,960 --> 00:36:39,359
new interesting things for you once

780
00:36:39,359 --> 00:36:41,280
again there's a global version of this

781
00:36:41,280 --> 00:36:44,100
which is at sea SSH SSH config and then

782
00:36:44,100 --> 00:36:45,840
there's the user version of this which

783
00:36:45,840 --> 00:36:52,020
is the dot SSH config so the obvious

784
00:36:52,020 --> 00:36:53,820
question here what are some of the

785
00:36:53,820 --> 00:36:55,440
things some of those cool things that

786
00:36:55,440 --> 00:36:57,660
you can do with SSH so let's kind of

787
00:36:57,660 --> 00:37:03,869
start with a simple version here or

788
00:37:03,869 --> 00:37:05,460
really like this is how you'll see this

789
00:37:05,460 --> 00:37:08,369
used a lot so maybe I now want to call

790
00:37:08,369 --> 00:37:11,580
that hostname 10.10 just bounce so I'm

791
00:37:11,580 --> 00:37:14,490
gonna say hey this host is bounce and I

792
00:37:14,490 --> 00:37:18,090
want to log in as the user Bob the

793
00:37:18,090 --> 00:37:20,520
hostname like I said is 10.10 dot ten

794
00:37:20,520 --> 00:37:23,010
dot ten I want to do a local forward of

795
00:37:23,010 --> 00:37:26,960
ten dot eighty to 192 168 ten eighty I

796
00:37:26,960 --> 00:37:29,880
want to do a dynamic forward so these

797
00:37:29,880 --> 00:37:31,680
are all forwards that we saw before of

798
00:37:31,680 --> 00:37:36,210
1080 and I want to do a remote forward

799
00:37:36,210 --> 00:37:37,590
of 8080

800
00:37:37,590 --> 00:37:48,270
192 168 1.10 on 80 80 so if I just did

801
00:37:48,270 --> 00:37:50,460
ssh bounce now it would go through and

802
00:37:50,460 --> 00:37:52,980
look up all of these configs and just do

803
00:37:52,980 --> 00:37:54,840
all this for me so all I have to type is

804
00:37:54,840 --> 00:37:58,020
ssh bounce and i don't have to type in

805
00:37:58,020 --> 00:37:59,610
any of those command-line options or

806
00:37:59,610 --> 00:38:01,770
knew that this the ssh will just figure

807
00:38:01,770 --> 00:38:03,060
out that that's actually what I wanted

808
00:38:03,060 --> 00:38:09,210
to do it's kind of neat right little

809
00:38:09,210 --> 00:38:13,650
less typing but that's not really really

810
00:38:13,650 --> 00:38:15,180
all that useful for getting more access

811
00:38:15,180 --> 00:38:23,160
to stuff is it you know so let's use SSH

812
00:38:23,160 --> 00:38:26,790
config to do something cool let's say

813
00:38:26,790 --> 00:38:30,210
that I know someone is going to log in

814
00:38:30,210 --> 00:38:32,490
or Bob is going to log into this SSH

815
00:38:32,490 --> 00:38:35,760
server or from SSH server to another

816
00:38:35,760 --> 00:38:38,670
system on that on that canary cannery

817
00:38:38,670 --> 00:38:42,990
network I want to use the SSH config and

818
00:38:42,990 --> 00:38:45,630
what I can do here is configure it such

819
00:38:45,630 --> 00:38:48,990
that other commands get run when Bob

820
00:38:48,990 --> 00:38:52,070
runs SSH to connect to that system in

821
00:38:52,070 --> 00:38:57,150
canary canary so what that would look

822
00:38:57,150 --> 00:39:00,330
like here is when he SSH is out then I

823
00:39:00,330 --> 00:39:03,030
run another command to give me a shell

824
00:39:03,030 --> 00:39:05,550
that connects back to me and now I have

825
00:39:05,550 --> 00:39:09,090
a shell as Bob on the 10.10 doctor say I

826
00:39:09,090 --> 00:39:11,670
lost access to the system they decided

827
00:39:11,670 --> 00:39:15,090
to remove the authorized keys maybe they

828
00:39:15,090 --> 00:39:16,950
missed that I have this set up in the

829
00:39:16,950 --> 00:39:20,130
SSH config for Bob and once again you

830
00:39:20,130 --> 00:39:22,230
can put it in either the user's config

831
00:39:22,230 --> 00:39:24,570
or the global config so as long as I

832
00:39:24,570 --> 00:39:27,390
have that 4141 listener set up on my box

833
00:39:27,390 --> 00:39:30,030
whenever Bob SSH is out to that other

834
00:39:30,030 --> 00:39:32,190
system I get a shell from his original

835
00:39:32,190 --> 00:39:35,070
system and how I would do that in the

836
00:39:35,070 --> 00:39:38,330
SSH config is pretty straightforward

837
00:39:38,330 --> 00:39:40,980
here I'm doing it for any of the systems

838
00:39:40,980 --> 00:39:43,530
that Bob tries to log into the first

839
00:39:43,530 --> 00:39:46,380
thing I have to do it is - I don't know

840
00:39:46,380 --> 00:39:47,850
why this is set up like this but you

841
00:39:47,850 --> 00:39:49,100
have to set

842
00:39:49,100 --> 00:39:51,620
permit it to run local commands which is

843
00:39:51,620 --> 00:39:54,920
also a configuration and then the local

844
00:39:54,920 --> 00:39:56,630
command that I would like to run is just

845
00:39:56,630 --> 00:40:03,650
a netcat - II for BIM bash and to my

846
00:40:03,650 --> 00:40:06,230
listener IP on 4141 and then i

847
00:40:06,230 --> 00:40:09,380
background that so it's just going in

848
00:40:09,380 --> 00:40:12,110
bob's world view he asked the sages to

849
00:40:12,110 --> 00:40:14,180
any of his systems doesn't see anything

850
00:40:14,180 --> 00:40:16,610
else happen and then I get an cat

851
00:40:16,610 --> 00:40:18,770
listener that has spawned and connected

852
00:40:18,770 --> 00:40:23,570
back to me so that's actually pretty

853
00:40:23,570 --> 00:40:27,650
useful another very useful config file

854
00:40:27,650 --> 00:40:31,640
here is what's called the RC file this

855
00:40:31,640 --> 00:40:34,220
there's a global which is Etsy SSH SSH

856
00:40:34,220 --> 00:40:37,490
RC or there's the user version with you

857
00:40:37,490 --> 00:40:41,090
which is dot SSHRC and this runs a

858
00:40:41,090 --> 00:40:44,780
command on the system when right before

859
00:40:44,780 --> 00:40:47,660
it drops to shell as the user so when I

860
00:40:47,660 --> 00:40:50,120
login to a remote system with SSH this

861
00:40:50,120 --> 00:40:52,580
command runs on that remote system and

862
00:40:52,580 --> 00:40:56,180
gives me a shell or runs the commands

863
00:40:56,180 --> 00:40:57,680
and then drops to a shell for the user

864
00:40:57,680 --> 00:41:01,270
so what I want to do is use this to

865
00:41:01,270 --> 00:41:03,770
spawn a shell so what that looks like

866
00:41:03,770 --> 00:41:06,320
here is same thing say bob is logging

867
00:41:06,320 --> 00:41:08,270
into this system here on the top and

868
00:41:08,270 --> 00:41:10,130
i've had access to that system on the

869
00:41:10,130 --> 00:41:13,160
top I set up that our C file such that

870
00:41:13,160 --> 00:41:16,610
whenever Bob logs in its gonna spawn a

871
00:41:16,610 --> 00:41:19,580
netcat shell back to me on my listener

872
00:41:19,580 --> 00:41:21,800
and I don't have to do anything it

873
00:41:21,800 --> 00:41:23,920
actually gets triggered when Bob logs in

874
00:41:23,920 --> 00:41:29,390
and that is also a pretty simple thing

875
00:41:29,390 --> 00:41:30,920
to accomplish and that looks like this

876
00:41:30,920 --> 00:41:34,730
so in the SSH for whatever user

877
00:41:34,730 --> 00:41:36,890
I just specify the command that I want

878
00:41:36,890 --> 00:41:38,720
to run and then at the end I am purse

879
00:41:38,720 --> 00:41:43,250
and it so when Bob SSH is via the blue

880
00:41:43,250 --> 00:41:46,880
line to that top server then before Bob

881
00:41:46,880 --> 00:41:50,480
gets his shell but blind to Bob a shell

882
00:41:50,480 --> 00:41:53,420
gets spun back to me as Bob and then it

883
00:41:53,420 --> 00:41:57,420
drops into Bob's environment

884
00:41:57,420 --> 00:41:59,950
so those are some of the cool things you

885
00:41:59,950 --> 00:42:01,630
can do with the config files there's a

886
00:42:01,630 --> 00:42:04,180
bunch of other stuff you can do I always

887
00:42:04,180 --> 00:42:05,619
recommend going and checking out the man

888
00:42:05,619 --> 00:42:08,680
pages and playing around with it but

889
00:42:08,680 --> 00:42:11,760
let's get into kind of the fun here so

890
00:42:11,760 --> 00:42:16,920
how would I steal creds so now I am

891
00:42:16,920 --> 00:42:19,180
there's a couple different things that I

892
00:42:19,180 --> 00:42:21,160
want to steal creds from let's say up

893
00:42:21,160 --> 00:42:24,790
first I know that Bob is SSA Qing to

894
00:42:24,790 --> 00:42:27,190
other systems in the network I just want

895
00:42:27,190 --> 00:42:29,319
to know what his password is okay I

896
00:42:29,319 --> 00:42:30,849
don't even want to spawn anymore shells

897
00:42:30,849 --> 00:42:32,500
I don't have access to any of this those

898
00:42:32,500 --> 00:42:34,480
systems he doesn't have SSH keys set up

899
00:42:34,480 --> 00:42:36,760
anything like that she'd get what Bob's

900
00:42:36,760 --> 00:42:38,950
password is when he's doing this there's

901
00:42:38,950 --> 00:42:42,579
actually a pretty fun way that I have

902
00:42:42,579 --> 00:42:45,670
done this in the past and it works

903
00:42:45,670 --> 00:42:49,089
surprisingly well which is I'm just

904
00:42:49,089 --> 00:42:52,809
gonna make a little shell script so this

905
00:42:52,809 --> 00:42:55,450
is kind of a probably the most basic

906
00:42:55,450 --> 00:42:57,970
version of this this is really just so I

907
00:42:57,970 --> 00:42:59,559
can fit this on the slide but this

908
00:42:59,559 --> 00:43:01,720
actually would work if you wanted to do

909
00:43:01,720 --> 00:43:06,670
this so when I'm putting this in user

910
00:43:06,670 --> 00:43:08,410
local bin because I happen to know from

911
00:43:08,410 --> 00:43:10,569
the web Bob's environment is set up that

912
00:43:10,569 --> 00:43:13,299
this comes before user been in his path

913
00:43:13,299 --> 00:43:16,630
so I make a file that's just called user

914
00:43:16,630 --> 00:43:18,790
local bin SSH I'm just going to go

915
00:43:18,790 --> 00:43:20,500
through this line by line real quick so

916
00:43:20,500 --> 00:43:22,450
after the shebang the first thing I'm

917
00:43:22,450 --> 00:43:25,119
gonna do is when someone runs this is

918
00:43:25,119 --> 00:43:27,880
prompt them for the first argument to

919
00:43:27,880 --> 00:43:32,589
this file and then say password and try

920
00:43:32,589 --> 00:43:34,299
to get that password and whatever they

921
00:43:34,299 --> 00:43:36,190
give me I'm gonna take the first

922
00:43:36,190 --> 00:43:38,020
argument and that password and echo it

923
00:43:38,020 --> 00:43:41,290
just into a file called temp creds this

924
00:43:41,290 --> 00:43:43,089
is super secret and then drop a new line

925
00:43:43,089 --> 00:43:44,710
and then just rerun it with the original

926
00:43:44,710 --> 00:43:48,160
SSH command and what this looks like to

927
00:43:48,160 --> 00:43:55,480
the user is Bob is going to try to SSH

928
00:43:55,480 --> 00:43:58,359
out to the remote system and then it's

929
00:43:58,359 --> 00:44:00,670
just gonna get prompted twice so hey Bob

930
00:44:00,670 --> 00:44:02,650
what's your password nope what's your

931
00:44:02,650 --> 00:44:03,880
password and then it's going to look

932
00:44:03,880 --> 00:44:06,790
exactly the same to Bob so you'll see

933
00:44:06,790 --> 00:44:07,589
hey

934
00:44:07,589 --> 00:44:09,119
come to whatever system he's logged in

935
00:44:09,119 --> 00:44:11,460
and now if we were to exit that then we

936
00:44:11,460 --> 00:44:14,609
can see in temp dot creds we have Bob's

937
00:44:14,609 --> 00:44:17,549
password me so it's a pretty simple way

938
00:44:17,549 --> 00:44:19,890
but super effective to steal the

939
00:44:19,890 --> 00:44:22,049
credentials for plaintext credentials

940
00:44:22,049 --> 00:44:24,029
for user I'll have to crack anything or

941
00:44:24,029 --> 00:44:29,160
do anything crazy and depending on how

942
00:44:29,160 --> 00:44:30,509
they have their path set up and all of

943
00:44:30,509 --> 00:44:33,450
that stuff that's going on then just get

944
00:44:33,450 --> 00:44:35,640
get plaintext creds and that's kind of

945
00:44:35,640 --> 00:44:38,640
always the goal so the other the other

946
00:44:38,640 --> 00:44:41,039
the next scenario here that I want to go

947
00:44:41,039 --> 00:44:43,109
over is how do I get creds when I know

948
00:44:43,109 --> 00:44:45,150
someone's logging into a system that I

949
00:44:45,150 --> 00:44:48,630
have full access to so once I have full

950
00:44:48,630 --> 00:44:51,509
access to a system you can't trust any

951
00:44:51,509 --> 00:44:53,160
of the processes or anything that's

952
00:44:53,160 --> 00:44:55,950
going on here so this is one example of

953
00:44:55,950 --> 00:44:58,920
when I know someone is SSH into the

954
00:44:58,920 --> 00:45:01,559
system that I'm on i can use debugging

955
00:45:01,559 --> 00:45:05,190
tools so here in this example I'm going

956
00:45:05,190 --> 00:45:06,839
to go ahead and find the process for

957
00:45:06,839 --> 00:45:09,690
sshd and I'm gonna do what's called s

958
00:45:09,690 --> 00:45:14,249
trace which looks for all of the the SIS

959
00:45:14,249 --> 00:45:16,650
calls that happen in that binary and

960
00:45:16,650 --> 00:45:20,489
just spits out what they are I'm gonna

961
00:45:20,489 --> 00:45:22,440
filter on the s trace because I happen

962
00:45:22,440 --> 00:45:24,329
just from knowing how the SSH protocol

963
00:45:24,329 --> 00:45:26,549
works I'm looking for reads so it's

964
00:45:26,549 --> 00:45:28,559
reading the password from whoever is on

965
00:45:28,559 --> 00:45:31,200
the remote side and then I'm going to go

966
00:45:31,200 --> 00:45:34,589
ahead and grep for this little special

967
00:45:34,589 --> 00:45:37,259
magic here which is slash F / 0 slash 0

968
00:45:37,259 --> 00:45:43,369
0 so that is carriage return or its

969
00:45:43,369 --> 00:45:46,019
carriage forward I think and then it's

970
00:45:46,019 --> 00:45:50,489
no no no this is the way that it's kind

971
00:45:50,489 --> 00:45:52,769
of not showing you the thing as the user

972
00:45:52,769 --> 00:45:57,569
types in so this is there's in full

973
00:45:57,569 --> 00:45:59,099
disclosure here there's a lot of info

974
00:45:59,099 --> 00:46:00,749
here and you have to kind of dig through

975
00:46:00,749 --> 00:46:02,489
to find these passwords but once again

976
00:46:02,489 --> 00:46:04,319
you'll find that plaintext password of

977
00:46:04,319 --> 00:46:08,369
the user and or the the password nothing

978
00:46:08,369 --> 00:46:11,479
to crack just full passwords so be very

979
00:46:11,479 --> 00:46:14,219
reticent to login to systems that you

980
00:46:14,219 --> 00:46:19,619
know are compromised another version of

981
00:46:19,619 --> 00:46:20,020
this

982
00:46:20,020 --> 00:46:23,380
here so I was talking about paramiku

983
00:46:23,380 --> 00:46:26,530
paramiku is a full Python implementation

984
00:46:26,530 --> 00:46:30,880
of SSH both the server and the client so

985
00:46:30,880 --> 00:46:33,370
let's say I'm on a system and SSH is not

986
00:46:33,370 --> 00:46:35,590
running on that system but I know that

987
00:46:35,590 --> 00:46:36,880
people are logging into things

988
00:46:36,880 --> 00:46:37,600
willy-nilly

989
00:46:37,600 --> 00:46:40,390
or maybe processes or logging into

990
00:46:40,390 --> 00:46:43,270
things willy-nilly on a network I can

991
00:46:43,270 --> 00:46:46,150
write my own SSH server and then

992
00:46:46,150 --> 00:46:47,320
everyone have to go through there with

993
00:46:47,320 --> 00:46:49,300
all that nonsense so that's trace and

994
00:46:49,300 --> 00:46:51,640
digging through log files or anything so

995
00:46:51,640 --> 00:46:54,610
this is the most basic example that I

996
00:46:54,610 --> 00:46:56,050
could make of this and you can make this

997
00:46:56,050 --> 00:46:57,640
way more complicated and realistic

998
00:46:57,640 --> 00:47:01,030
looking but for demonstration purposes

999
00:47:01,030 --> 00:47:05,050
here what I'm doing is I have a server

1000
00:47:05,050 --> 00:47:06,760
interface which is a parameter server

1001
00:47:06,760 --> 00:47:08,890
interface and I've made my own check off

1002
00:47:08,890 --> 00:47:11,320
method here and this will get called

1003
00:47:11,320 --> 00:47:13,410
with the username and the password that

1004
00:47:13,410 --> 00:47:17,040
the user is trying to log in with and

1005
00:47:17,040 --> 00:47:22,690
will is responsible for checking that

1006
00:47:22,690 --> 00:47:24,820
that past username and password are

1007
00:47:24,820 --> 00:47:28,570
correct so though then I just go ahead

1008
00:47:28,570 --> 00:47:30,580
and set up a socket I tell to listen on

1009
00:47:30,580 --> 00:47:34,000
port 22 which is the default I listen

1010
00:47:34,000 --> 00:47:36,880
for a connection and then kind of just

1011
00:47:36,880 --> 00:47:38,620
set all of that up and get it ready to

1012
00:47:38,620 --> 00:47:40,780
go but the important here is thing here

1013
00:47:40,780 --> 00:47:44,290
is that check off and that is doing the

1014
00:47:44,290 --> 00:47:45,970
username and password what this looks

1015
00:47:45,970 --> 00:47:48,280
like in practice is you just start the

1016
00:47:48,280 --> 00:47:50,560
Python server and then anything that

1017
00:47:50,560 --> 00:47:52,810
tries to log in to you here I just did a

1018
00:47:52,810 --> 00:47:54,400
bit slow chol host for an example but

1019
00:47:54,400 --> 00:47:55,480
you would probably get an IP address

1020
00:47:55,480 --> 00:47:57,610
from somewhere else you can see I login

1021
00:47:57,610 --> 00:47:59,860
you can see their username you can see

1022
00:47:59,860 --> 00:48:04,330
the password so that is a bunch of the

1023
00:48:04,330 --> 00:48:07,270
fun stuff that you can do with SSH so

1024
00:48:07,270 --> 00:48:10,090
just kind of go over again why SSH is

1025
00:48:10,090 --> 00:48:13,630
useful I get a remote shell to the

1026
00:48:13,630 --> 00:48:15,730
system that I'm interested in it that's

1027
00:48:15,730 --> 00:48:16,720
always going to be useful

1028
00:48:16,720 --> 00:48:18,820
I can port forward and essentially get

1029
00:48:18,820 --> 00:48:21,100
to anything else that that system is on

1030
00:48:21,100 --> 00:48:24,850
the network with and bypass any sort of

1031
00:48:24,850 --> 00:48:26,860
firewall rules and get around any sort

1032
00:48:26,860 --> 00:48:28,720
of egress filtering that kind of stuff I

1033
00:48:28,720 --> 00:48:30,520
can download and upload any kind of

1034
00:48:30,520 --> 00:48:31,830
files that I want

1035
00:48:31,830 --> 00:48:33,690
all of those communications are

1036
00:48:33,690 --> 00:48:37,500
encrypted and pretty hard for defenders

1037
00:48:37,500 --> 00:48:40,140
to be able to see and then additionally

1038
00:48:40,140 --> 00:48:42,810
people seem to trust SSH a lot and we'll

1039
00:48:42,810 --> 00:48:45,660
just log into it and as you saw give it

1040
00:48:45,660 --> 00:48:50,550
their passwords and the only thing SSH

1041
00:48:50,550 --> 00:48:56,150
doesn't give me is water and food and

1042
00:48:56,150 --> 00:49:02,010
that is why I think SSH is awesome it's

1043
00:49:02,010 --> 00:49:04,590
kind of just the check us out

1044
00:49:04,590 --> 00:49:06,450
randori we've got our twitter account

1045
00:49:06,450 --> 00:49:09,870
for the randori attack team renderer

1046
00:49:09,870 --> 00:49:12,300
comm careers we are looking for people

1047
00:49:12,300 --> 00:49:13,740
that are interested in that kind of

1048
00:49:13,740 --> 00:49:20,270
stuff and then our blog render HTTPS and

1049
00:49:20,270 --> 00:49:22,820
yeah check it out

1050
00:49:22,820 --> 00:49:27,830
and then last I will leave you with this

1051
00:49:27,830 --> 00:49:31,770
did my webcam make me look fat feeling a

1052
00:49:31,770 --> 00:49:33,180
little out of shape of been sitting in

1053
00:49:33,180 --> 00:49:36,420
my house a long time so let's make this

1054
00:49:36,420 --> 00:49:41,420
Red Team fit alright thanks

