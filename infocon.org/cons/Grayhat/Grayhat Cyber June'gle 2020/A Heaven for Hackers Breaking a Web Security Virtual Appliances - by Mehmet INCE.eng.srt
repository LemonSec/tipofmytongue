1
00:00:00,030 --> 00:00:02,610
all right we're back live so thank you

2
00:00:02,610 --> 00:00:04,980
so much Matt Matt for supporting the

3
00:00:04,980 --> 00:00:07,440
team and the Texas cyber summit as well

4
00:00:07,440 --> 00:00:10,830
as the DEF CON red team village we're

5
00:00:10,830 --> 00:00:13,019
very excited to have you and without any

6
00:00:13,019 --> 00:00:15,269
further ado I pass it back to you yeah

7
00:00:15,269 --> 00:00:17,940
thank you very much I'm very happy to be

8
00:00:17,940 --> 00:00:21,240
in here as well guys all right let's

9
00:00:21,240 --> 00:00:22,980
talk about finding a zero-day

10
00:00:22,980 --> 00:00:25,619
vulnerabilities and in that presentation

11
00:00:25,619 --> 00:00:28,260
I'm trying to take you all to the

12
00:00:28,260 --> 00:00:31,160
journey with me to finding different

13
00:00:31,160 --> 00:00:34,110
vulnerabilities in a security solutions

14
00:00:34,110 --> 00:00:36,600
and combination of them will give us a

15
00:00:36,600 --> 00:00:39,239
remote code execution with a root user

16
00:00:39,239 --> 00:00:43,140
um this is Matt Matt I've been doing

17
00:00:43,140 --> 00:00:46,710
vulnerable to researching since 2005 and

18
00:00:46,710 --> 00:00:49,739
I'm working for a company in Victor's

19
00:00:49,739 --> 00:00:52,199
cyber security and intelligence and this

20
00:00:52,199 --> 00:00:54,440
is my twitter address and the isaac and

21
00:00:54,440 --> 00:00:57,719
fantastic blog is a web page where me

22
00:00:57,719 --> 00:01:01,469
and my teammates sharing our technical

23
00:01:01,469 --> 00:01:06,420
research in here ok so hello for hackers

24
00:01:06,420 --> 00:01:08,670
cert edition actually there's a story

25
00:01:08,670 --> 00:01:12,180
behind of that title and it has started

26
00:01:12,180 --> 00:01:16,020
back in 2017 and I was doing a pan

27
00:01:16,020 --> 00:01:18,689
testing for a company and there was a

28
00:01:18,689 --> 00:01:21,030
blue team members and they were telling

29
00:01:21,030 --> 00:01:23,970
me you are doing things etc etc and I

30
00:01:23,970 --> 00:01:26,759
was start thinking about what happens if

31
00:01:26,759 --> 00:01:30,360
we somehow managed to break in to your

32
00:01:30,360 --> 00:01:33,479
seems product of that that they are

33
00:01:33,479 --> 00:01:36,869
using and write a custom rule in order

34
00:01:36,869 --> 00:01:39,479
to become a totally invisible but sure

35
00:01:39,479 --> 00:01:41,369
because they are telling us what they

36
00:01:41,369 --> 00:01:43,259
are seeing in the product and if we

37
00:01:43,259 --> 00:01:45,750
become invisible that would be so nice

38
00:01:45,750 --> 00:01:48,869
so they thought that idea led me to

39
00:01:48,869 --> 00:01:50,909
defining a remote code execution on a

40
00:01:50,909 --> 00:01:52,799
various different seem and the log

41
00:01:52,799 --> 00:01:55,350
management solutions back in the 2017

42
00:01:55,350 --> 00:01:59,040
and after one year I was trying to send

43
00:01:59,040 --> 00:02:01,799
an email to a friend of mine and that

44
00:02:01,799 --> 00:02:04,469
dude was not receiving any email from me

45
00:02:04,469 --> 00:02:07,290
at all and it turned out that if that

46
00:02:07,290 --> 00:02:09,330
was a problem on the email security

47
00:02:09,330 --> 00:02:11,760
gateways and they managed to solve the

48
00:02:11,760 --> 00:02:12,870
problem

49
00:02:12,870 --> 00:02:14,940
usually we start sending an email to

50
00:02:14,940 --> 00:02:17,730
each others and I was thinking that all

51
00:02:17,730 --> 00:02:19,890
right there is a email secure to get a

52
00:02:19,890 --> 00:02:22,920
product and what happens if I manage to

53
00:02:22,920 --> 00:02:25,080
break in into your email security

54
00:02:25,080 --> 00:02:28,200
gateways so that I can read all the

55
00:02:28,200 --> 00:02:30,780
emails incoming can the earthquake so

56
00:02:30,780 --> 00:02:33,590
that idea

57
00:02:33,590 --> 00:02:36,060
motivated me to finding a zero-day

58
00:02:36,060 --> 00:02:38,849
remote code execution weldable trees on

59
00:02:38,849 --> 00:02:41,549
simon tech macro focus and the track

60
00:02:41,549 --> 00:02:45,900
macro and previous year I was working at

61
00:02:45,900 --> 00:02:48,980
another client and the project was

62
00:02:48,980 --> 00:02:51,780
hardening the clients network in order

63
00:02:51,780 --> 00:02:56,010
to finding data exfiltration scenarios

64
00:02:56,010 --> 00:02:59,760
and they were telling me we have the web

65
00:02:59,760 --> 00:03:02,459
security solutions and only that device

66
00:03:02,459 --> 00:03:04,920
can connect to the internet so all the

67
00:03:04,920 --> 00:03:07,079
clients has to go through that box and

68
00:03:07,079 --> 00:03:09,209
if you find a different way to

69
00:03:09,209 --> 00:03:11,610
accelerate the data that would be nice

70
00:03:11,610 --> 00:03:15,720
and I was like ok so what happens if you

71
00:03:15,720 --> 00:03:17,850
find another zero day vulnerability

72
00:03:17,850 --> 00:03:19,859
especially the best security and the

73
00:03:19,859 --> 00:03:23,670
content filtering solutions so when the

74
00:03:23,670 --> 00:03:27,060
attacker managed to execute the code on

75
00:03:27,060 --> 00:03:29,069
the client network for the data

76
00:03:29,069 --> 00:03:31,049
exfiltration and see to communication

77
00:03:31,049 --> 00:03:33,540
phase they can exploit the content

78
00:03:33,540 --> 00:03:36,000
filtering solution so this is the

79
00:03:36,000 --> 00:03:37,799
today's topic we are going to talk about

80
00:03:37,799 --> 00:03:40,380
is really vulnerable T's that I found on

81
00:03:40,380 --> 00:03:45,239
a very very interesting product and I

82
00:03:45,239 --> 00:03:48,959
have a case study for you there is a

83
00:03:48,959 --> 00:03:51,480
product from the track microbe in turf

84
00:03:51,480 --> 00:03:53,579
interest account web security virtual

85
00:03:53,579 --> 00:03:56,370
advice and I held under one able to

86
00:03:56,370 --> 00:03:59,190
research on specifically dat solutions

87
00:03:59,190 --> 00:04:01,319
and we are going to see what kind of

88
00:04:01,319 --> 00:04:03,299
vulnerabilities that I managed to find

89
00:04:03,299 --> 00:04:05,959
and using all of those vulnerabilities

90
00:04:05,959 --> 00:04:09,510
together we are going to see some sort

91
00:04:09,510 --> 00:04:12,030
of code executions in the ends but

92
00:04:12,030 --> 00:04:14,760
before diving into the case study I

93
00:04:14,760 --> 00:04:16,649
would like to be able to talk about what

94
00:04:16,649 --> 00:04:18,779
is the content filtering in order to

95
00:04:18,779 --> 00:04:21,209
make it crystal clear to everyone as you

96
00:04:21,209 --> 00:04:22,860
can see in the picture there is a

97
00:04:22,860 --> 00:04:25,630
computer on the left which represents a

98
00:04:25,630 --> 00:04:28,710
network of the company and those devices

99
00:04:28,710 --> 00:04:33,430
doesn't don't have a direct internet

100
00:04:33,430 --> 00:04:35,770
access they have to go to the proxy

101
00:04:35,770 --> 00:04:38,290
service first and that proxy service

102
00:04:38,290 --> 00:04:40,540
goes the internet so that the

103
00:04:40,540 --> 00:04:43,810
organization can do some sort of

104
00:04:43,810 --> 00:04:46,300
analysis and the rules on the clients

105
00:04:46,300 --> 00:04:48,880
network so content filtering is

106
00:04:48,880 --> 00:04:51,160
happening in here right now we can

107
00:04:51,160 --> 00:04:52,630
imagine that the content filtering

108
00:04:52,630 --> 00:04:56,400
solutions they are kind of spatially

109
00:04:56,400 --> 00:04:59,770
implemented proxy service and that term

110
00:04:59,770 --> 00:05:02,140
is given to do controlling the type of

111
00:05:02,140 --> 00:05:05,430
web content that employees ghast

112
00:05:05,430 --> 00:05:07,780
customers can access while they are

113
00:05:07,780 --> 00:05:09,880
connected to the business wild or

114
00:05:09,880 --> 00:05:12,280
wireless network so that the business

115
00:05:12,280 --> 00:05:15,430
may want to apply control over the type

116
00:05:15,430 --> 00:05:18,010
of content that can be accessed to stop

117
00:05:18,010 --> 00:05:20,260
employees by restricting you know

118
00:05:20,260 --> 00:05:23,680
accesses a certain type of web pages and

119
00:05:23,680 --> 00:05:26,170
on top of that also the content

120
00:05:26,170 --> 00:05:29,050
filtering is a quite a good place to

121
00:05:29,050 --> 00:05:32,950
ensure malicious web pages cannot be

122
00:05:32,950 --> 00:05:36,310
accessed such as those used for fishing

123
00:05:36,310 --> 00:05:39,640
malicious distributing malware etc etc

124
00:05:39,640 --> 00:05:44,080
so we are targeting that kind of

125
00:05:44,080 --> 00:05:48,790
products in in this presentation so at

126
00:05:48,790 --> 00:05:51,370
the beginning I was like I had a two

127
00:05:51,370 --> 00:05:53,770
main motivation like a targeting raffle

128
00:05:53,770 --> 00:05:56,080
two solutions why would what what why we

129
00:05:56,080 --> 00:05:59,010
are doing this and first and foremost

130
00:05:59,010 --> 00:06:01,450
obviously you know all the constants

131
00:06:01,450 --> 00:06:03,490
work at going to the Internet through

132
00:06:03,490 --> 00:06:06,340
that solutions that means if you manage

133
00:06:06,340 --> 00:06:08,440
to break in we're gonna see the world

134
00:06:08,440 --> 00:06:10,750
clients not from Internet traffic of the

135
00:06:10,750 --> 00:06:14,170
organization and second motivation is as

136
00:06:14,170 --> 00:06:16,390
I told you before Christ computers don't

137
00:06:16,390 --> 00:06:18,280
have a network access to the Internet

138
00:06:18,280 --> 00:06:20,140
they must go they must go through the

139
00:06:20,140 --> 00:06:20,950
Web Filter

140
00:06:20,950 --> 00:06:24,580
so we need to find a better way to city

141
00:06:24,580 --> 00:06:26,410
communication in the red teaming

142
00:06:26,410 --> 00:06:29,380
scenarios and I believe we're filter

143
00:06:29,380 --> 00:06:32,440
solutions is a quite secure and stout

144
00:06:32,440 --> 00:06:36,070
way to make a city communication I of

145
00:06:36,070 --> 00:06:37,750
course there is a lot of difference

146
00:06:37,750 --> 00:06:39,139
approach like a DNS

147
00:06:39,139 --> 00:06:42,889
etc etc but I believe that is a very

148
00:06:42,889 --> 00:06:47,719
secure in stealth way so alright that is

149
00:06:47,719 --> 00:06:51,319
the brief introduction to do idea and

150
00:06:51,319 --> 00:06:53,810
main motivation and this is the

151
00:06:53,810 --> 00:06:56,389
methodology that I usually follow for my

152
00:06:56,389 --> 00:06:59,449
one able to research projects and it

153
00:06:59,449 --> 00:07:01,909
there is a seven steps and we're gonna

154
00:07:01,909 --> 00:07:04,069
see every single step in details

155
00:07:04,069 --> 00:07:07,460
throughout the case study and first and

156
00:07:07,460 --> 00:07:09,439
foremost we have to find a way to get a

157
00:07:09,439 --> 00:07:11,479
free trial of product that we are going

158
00:07:11,479 --> 00:07:13,750
to do one will do research on it because

159
00:07:13,750 --> 00:07:17,419
you have to you know break into your

160
00:07:17,419 --> 00:07:19,909
protein system level and you need to

161
00:07:19,909 --> 00:07:21,919
find all the source code and etc except

162
00:07:21,919 --> 00:07:23,810
then you have to test your

163
00:07:23,810 --> 00:07:25,639
vulnerabilities and eventually you can

164
00:07:25,639 --> 00:07:28,370
implement X fleet for the one of these

165
00:07:28,370 --> 00:07:31,759
you found so you have to find a way to

166
00:07:31,759 --> 00:07:33,889
get the free trial and it's not quite

167
00:07:33,889 --> 00:07:35,509
easy guys always it's not quite easy

168
00:07:35,509 --> 00:07:37,849
it's sometimes and most of the times if

169
00:07:37,849 --> 00:07:39,710
you call use to have a lots of meeting

170
00:07:39,710 --> 00:07:43,759
with the sales team and if you find if

171
00:07:43,759 --> 00:07:45,949
you find the free trial of the product i

172
00:07:45,949 --> 00:07:47,960
strictly suggest you start by reading

173
00:07:47,960 --> 00:07:49,940
the documentation because there is an

174
00:07:49,940 --> 00:07:51,560
administrative documentation of these

175
00:07:51,560 --> 00:07:53,629
type of solutions and there's a huge

176
00:07:53,629 --> 00:07:56,029
technical information about the product

177
00:07:56,029 --> 00:08:00,250
itself so after that we are going to

178
00:08:00,250 --> 00:08:04,580
find a way to have a root SSH access to

179
00:08:04,580 --> 00:08:06,740
the box because we are going to do the

180
00:08:06,740 --> 00:08:08,930
vulnerability research and most of the

181
00:08:08,930 --> 00:08:12,500
case there is operating level hardening

182
00:08:12,500 --> 00:08:14,240
and we need to get rid of all of those

183
00:08:14,240 --> 00:08:17,569
you know hardening self and after that

184
00:08:17,569 --> 00:08:20,000
you know you are in a situation where

185
00:08:20,000 --> 00:08:22,159
you manage to install software I mean

186
00:08:22,159 --> 00:08:24,259
the solution you read the documentation

187
00:08:24,259 --> 00:08:27,589
and you manage to overcome the operating

188
00:08:27,589 --> 00:08:31,669
level system hardening and that is the

189
00:08:31,669 --> 00:08:33,469
moment that you need to start using

190
00:08:33,469 --> 00:08:36,279
product itself like a regular user

191
00:08:36,279 --> 00:08:39,349
because you have to understand all the

192
00:08:39,349 --> 00:08:41,779
features because those information will

193
00:08:41,779 --> 00:08:45,560
be come so handy when you need to define

194
00:08:45,560 --> 00:08:48,410
a possible attack vectors so after that

195
00:08:48,410 --> 00:08:50,810
we are going to talk about enumeration

196
00:08:50,810 --> 00:08:52,070
and the configure

197
00:08:52,070 --> 00:08:55,860
step and the most important phase is the

198
00:08:55,860 --> 00:08:58,050
defining possible attack vectors because

199
00:08:58,050 --> 00:09:01,050
you got all the information you need it

200
00:09:01,050 --> 00:09:03,810
is a time to building attack scenarios

201
00:09:03,810 --> 00:09:06,420
and then find a vulnerability the final

202
00:09:06,420 --> 00:09:08,310
step we are going to see every single

203
00:09:08,310 --> 00:09:11,760
step throughout our case and in that

204
00:09:11,760 --> 00:09:14,850
case I mean the tranq macro interest can

205
00:09:14,850 --> 00:09:18,150
web security virtual appliance 6.5

206
00:09:18,150 --> 00:09:20,100
version you can dole out it from the

207
00:09:20,100 --> 00:09:23,700
vendor web page so getting a free trial

208
00:09:23,700 --> 00:09:26,550
was quite easy in specifically in that

209
00:09:26,550 --> 00:09:29,580
case if you go to the Google and looking

210
00:09:29,580 --> 00:09:31,590
for the administrative documentation is

211
00:09:31,590 --> 00:09:33,330
the important keyword in here for the

212
00:09:33,330 --> 00:09:36,720
goggle search you can directly find the

213
00:09:36,720 --> 00:09:39,480
administrator file which is usually like

214
00:09:39,480 --> 00:09:44,100
a 300 pages I'm still suggest you to

215
00:09:44,100 --> 00:09:46,830
read administrative documentation

216
00:09:46,830 --> 00:09:49,700
because you're gonna see is very very

217
00:09:49,700 --> 00:09:53,550
helpful information about the product as

218
00:09:53,550 --> 00:09:56,610
you can see in here administrator

219
00:09:56,610 --> 00:09:59,160
documentations tells us there is at

220
00:09:59,160 --> 00:10:01,650
different modes of the product it can be

221
00:10:01,650 --> 00:10:03,680
transferred breach mode it can be

222
00:10:03,680 --> 00:10:06,540
transferred big breach mode with high

223
00:10:06,540 --> 00:10:09,210
availability forward proxy reverse

224
00:10:09,210 --> 00:10:12,060
probes here I cap WCC free except for

225
00:10:12,060 --> 00:10:14,730
acceptor so and that product can be

226
00:10:14,730 --> 00:10:17,550
installed very different modes and on

227
00:10:17,550 --> 00:10:18,930
the right side you are seeing the

228
00:10:18,930 --> 00:10:21,300
forward proxy mode which tells you you

229
00:10:21,300 --> 00:10:23,910
know this that product can participate

230
00:10:23,910 --> 00:10:26,130
in a proxy training is for all the

231
00:10:26,130 --> 00:10:28,470
traffic to the upstream proxy servers

232
00:10:28,470 --> 00:10:31,890
and you will be seeing lots of graphics

233
00:10:31,890 --> 00:10:33,570
on the administrative documentation

234
00:10:33,570 --> 00:10:36,750
which will help you to understand about

235
00:10:36,750 --> 00:10:40,050
the product itself so we are reading the

236
00:10:40,050 --> 00:10:44,280
funny manual as well and we of course

237
00:10:44,280 --> 00:10:46,890
for the third step after the reading the

238
00:10:46,890 --> 00:10:48,720
documentation you need to install the

239
00:10:48,720 --> 00:10:50,820
solution into your visualization and

240
00:10:50,820 --> 00:10:54,690
visualization system during the

241
00:10:54,690 --> 00:10:55,380
installation

242
00:10:55,380 --> 00:10:57,870
there was a admin user and password has

243
00:10:57,870 --> 00:11:00,450
been set during the installation and the

244
00:11:00,450 --> 00:11:04,920
product gives you opportunity to do SSH

245
00:11:04,920 --> 00:11:05,970
action to the box with the

246
00:11:05,970 --> 00:11:08,370
administrative user but the problem is

247
00:11:08,370 --> 00:11:11,339
there was a restricted shell on the SSH

248
00:11:11,339 --> 00:11:14,820
there is a very very limited tools that

249
00:11:14,820 --> 00:11:17,459
you can use in the SH interface of the

250
00:11:17,459 --> 00:11:20,360
product and we need to find a way to

251
00:11:20,360 --> 00:11:24,300
have a directly SSH connection with the

252
00:11:24,300 --> 00:11:26,670
root user because we are going to do

253
00:11:26,670 --> 00:11:30,029
remote debugging we wanna try to find

254
00:11:30,029 --> 00:11:33,440
out all the source codes and we gonna do

255
00:11:33,440 --> 00:11:37,410
further analysis etc etc so there's a

256
00:11:37,410 --> 00:11:39,870
little bit and step before starting to

257
00:11:39,870 --> 00:11:42,720
the one able to research and in that

258
00:11:42,720 --> 00:11:45,810
case it was like a quite easy because

259
00:11:45,810 --> 00:11:49,320
the product was distributed by the

260
00:11:49,320 --> 00:11:52,170
vendor as ISO file so you can directly

261
00:11:52,170 --> 00:11:54,630
install it into your realm little ritual

262
00:11:54,630 --> 00:11:57,500
box and then you finish the installation

263
00:11:57,500 --> 00:12:01,260
the idea is you can detach the VM take a

264
00:12:01,260 --> 00:12:03,449
disk from the virtual machine that you

265
00:12:03,449 --> 00:12:05,610
just installed and then you can attach

266
00:12:05,610 --> 00:12:07,820
it to the difference in expression and

267
00:12:07,820 --> 00:12:11,640
then you're gonna mount new disk and you

268
00:12:11,640 --> 00:12:13,829
are going to find a graph file because

269
00:12:13,829 --> 00:12:15,990
there was a password protection on the

270
00:12:15,990 --> 00:12:17,990
graph file and I want to get rid of that

271
00:12:17,990 --> 00:12:21,630
protection as well and you just need to

272
00:12:21,630 --> 00:12:23,610
remove the password protection line on

273
00:12:23,610 --> 00:12:26,760
the graph file and after that in order

274
00:12:26,760 --> 00:12:29,880
to get rid of drastic the shell thing

275
00:12:29,880 --> 00:12:32,730
you can go to the sshd config file and

276
00:12:32,730 --> 00:12:34,529
you can enable through moods root

277
00:12:34,529 --> 00:12:36,870
logging and if you do that you need to

278
00:12:36,870 --> 00:12:38,790
go to the e.t.c pass video file and add

279
00:12:38,790 --> 00:12:40,709
in bash for the root user which will

280
00:12:40,709 --> 00:12:43,380
give us a direct SSH connection with the

281
00:12:43,380 --> 00:12:46,140
root user without having any restricted

282
00:12:46,140 --> 00:12:49,560
shell at all and we have to own the undo

283
00:12:49,560 --> 00:12:51,510
every single thing that we have done so

284
00:12:51,510 --> 00:12:54,120
far so that means you need to unmount to

285
00:12:54,120 --> 00:12:56,730
this detach to be embed code file and

286
00:12:56,730 --> 00:12:58,709
attach it back to the original VM and

287
00:12:58,709 --> 00:13:01,829
reboot the machine actually and in that

288
00:13:01,829 --> 00:13:04,110
case you are going to have the direct

289
00:13:04,110 --> 00:13:09,750
route SSH connection to the box this is

290
00:13:09,750 --> 00:13:11,699
important we need to get rid of you know

291
00:13:11,699 --> 00:13:14,610
operating level hardening so we are

292
00:13:14,610 --> 00:13:17,430
kinda ready to start using product

293
00:13:17,430 --> 00:13:18,650
itself

294
00:13:18,650 --> 00:13:21,320
in that case I choose reverse proxy mode

295
00:13:21,320 --> 00:13:23,630
but I believe all the vulnerabilities

296
00:13:23,630 --> 00:13:27,050
that we have found its exists no matter

297
00:13:27,050 --> 00:13:31,190
what is the installation mode at all for

298
00:13:31,190 --> 00:13:34,250
the fourth tab I suggest you to use app

299
00:13:34,250 --> 00:13:37,820
for that for a day to get used to about

300
00:13:37,820 --> 00:13:40,310
the features itself because there is a

301
00:13:40,310 --> 00:13:42,380
lot of functional tests you can see in

302
00:13:42,380 --> 00:13:45,170
the picture there is a Ural access

303
00:13:45,170 --> 00:13:48,020
control HTTP decryption you know we

304
00:13:48,020 --> 00:13:50,000
right now we know that for that can

305
00:13:50,000 --> 00:13:52,760
offload SSL at all that means we can

306
00:13:52,760 --> 00:13:54,800
deploy SSL through the administrator

307
00:13:54,800 --> 00:13:57,860
interface and there is an advanced track

308
00:13:57,860 --> 00:14:00,740
protection on the left side of the menu

309
00:14:00,740 --> 00:14:03,050
as you can see I hope you are seeing my

310
00:14:03,050 --> 00:14:05,270
mouse pointer in here there is an

311
00:14:05,270 --> 00:14:07,370
advanced rest protection that means all

312
00:14:07,370 --> 00:14:11,030
the HTTP or HTTPS traffic will be

313
00:14:11,030 --> 00:14:13,280
analyzed by the product in order to find

314
00:14:13,280 --> 00:14:16,550
out malicious activities because of that

315
00:14:16,550 --> 00:14:19,790
feature so lighter of toast later of

316
00:14:19,790 --> 00:14:21,920
that presentation guys we are going to

317
00:14:21,920 --> 00:14:24,230
see how important it is to understand

318
00:14:24,230 --> 00:14:26,090
and getting familiar with the product

319
00:14:26,090 --> 00:14:28,670
interface it's quite important just use

320
00:14:28,670 --> 00:14:32,390
it like a normal user so we have a such

321
00:14:32,390 --> 00:14:33,830
access with a root user

322
00:14:33,830 --> 00:14:36,170
so the initial step is always a

323
00:14:36,170 --> 00:14:37,910
numerating the services this is what I'm

324
00:14:37,910 --> 00:14:39,730
doing of course that would be a you know

325
00:14:39,730 --> 00:14:42,710
better way to do it but this is my way

326
00:14:42,710 --> 00:14:45,710
to do so I always looking for the nest

327
00:14:45,710 --> 00:14:47,690
at command to find out what kind of

328
00:14:47,690 --> 00:14:51,410
services we have in the in the product

329
00:14:51,410 --> 00:14:54,800
itself as you can see in here that is a

330
00:14:54,800 --> 00:14:58,700
you SS GI which listens for 6011

331
00:14:58,700 --> 00:15:01,400
that means you know we are doing some

332
00:15:01,400 --> 00:15:03,650
sort of assumptions in that face so that

333
00:15:03,650 --> 00:15:06,830
most probably means there is a Titan

334
00:15:06,830 --> 00:15:09,320
project running in the internal system

335
00:15:09,320 --> 00:15:12,050
and there is a Java process which

336
00:15:12,050 --> 00:15:15,170
listings exact port of the administrator

337
00:15:15,170 --> 00:15:18,110
interface that means we are going to

338
00:15:18,110 --> 00:15:20,690
deal with the Java when the time's comes

339
00:15:20,690 --> 00:15:22,610
to you doing a research on the

340
00:15:22,610 --> 00:15:25,400
administrator interface there's another

341
00:15:25,400 --> 00:15:28,850
u SS GI in here and that is another

342
00:15:28,850 --> 00:15:31,270
important thing because as I said before

343
00:15:31,270 --> 00:15:32,460
that

344
00:15:32,460 --> 00:15:35,400
product acts as a proxy service so that

345
00:15:35,400 --> 00:15:38,460
must be as some service on product

346
00:15:38,460 --> 00:15:41,940
itself in order to handle incoming HTTP

347
00:15:41,940 --> 00:15:45,210
connections from the user so I ask I

348
00:15:45,210 --> 00:15:48,420
double the SSD process you are that you

349
00:15:48,420 --> 00:15:50,880
are seeing in here which distance for 80

350
00:15:50,880 --> 00:15:56,190
80 81 this is responsible for all the

351
00:15:56,190 --> 00:15:57,810
incoming connection from the clients

352
00:15:57,810 --> 00:16:00,960
that verb so this is the majority part

353
00:16:00,960 --> 00:16:04,230
of the product itself because that is

354
00:16:04,230 --> 00:16:06,030
the one who is communicating with the

355
00:16:06,030 --> 00:16:10,410
clients all right so those are the

356
00:16:10,410 --> 00:16:13,020
services that we have in the product but

357
00:16:13,020 --> 00:16:16,830
we need to find which of those services

358
00:16:16,830 --> 00:16:19,800
are enough to communicate with the

359
00:16:19,800 --> 00:16:22,320
different computers in the network

360
00:16:22,320 --> 00:16:25,950
because in the end we need to explain at

361
00:16:25,950 --> 00:16:29,700
least one of those services the what I'm

362
00:16:29,700 --> 00:16:32,370
doing for to find out that information I

363
00:16:32,370 --> 00:16:35,370
usually run an nmap scan from the from

364
00:16:35,370 --> 00:16:39,030
my main host to the product IP address

365
00:16:39,030 --> 00:16:41,790
or you can just use the IP tables - -

366
00:16:41,790 --> 00:16:45,900
this command to find out you know the IP

367
00:16:45,900 --> 00:16:49,110
tables rules so according to that rule

368
00:16:49,110 --> 00:16:51,720
you know most of the internal services

369
00:16:51,720 --> 00:16:55,530
has been forbidden you know to a network

370
00:16:55,530 --> 00:16:58,070
traffic from the outside of the machine

371
00:16:58,070 --> 00:17:03,420
um you guys are remembering you know the

372
00:17:03,420 --> 00:17:08,250
is i SS GI service you know if you keep

373
00:17:08,250 --> 00:17:10,680
doing a numeration we are seeing very

374
00:17:10,680 --> 00:17:13,290
interesting information in here as you

375
00:17:13,290 --> 00:17:16,290
can see in here there is a supervisor D

376
00:17:16,290 --> 00:17:18,359
which is responsible for starting the

377
00:17:18,359 --> 00:17:21,540
solar service so we right now B now

378
00:17:21,540 --> 00:17:23,970
there is a patch a solar and lots of

379
00:17:23,970 --> 00:17:28,980
vital services in the box so what is a

380
00:17:28,980 --> 00:17:32,760
purchase solar it is a open source and

381
00:17:32,760 --> 00:17:36,540
price search platform written in Java is

382
00:17:36,540 --> 00:17:39,180
a major feature is include a full text

383
00:17:39,180 --> 00:17:43,200
search highlighting the time indexing

384
00:17:43,200 --> 00:17:44,670
dynamic clustering

385
00:17:44,670 --> 00:17:48,540
cetera et cetera so that means that

386
00:17:48,540 --> 00:17:51,720
title project that we are seeing in here

387
00:17:51,720 --> 00:17:54,270
is responsible reading and writing the

388
00:17:54,270 --> 00:17:57,570
log file into the Apache Solr service so

389
00:17:57,570 --> 00:17:59,790
most probably whatever the request comes

390
00:17:59,790 --> 00:18:01,710
to the proxy service from the clients

391
00:18:01,710 --> 00:18:04,260
that verb that that proxy service is

392
00:18:04,260 --> 00:18:06,630
sending some sort of signals to the

393
00:18:06,630 --> 00:18:08,820
Python project that we have seen in here

394
00:18:08,820 --> 00:18:11,220
it's something like a you know internal

395
00:18:11,220 --> 00:18:14,430
micro service so that title project is

396
00:18:14,430 --> 00:18:16,470
taking the information and writing it

397
00:18:16,470 --> 00:18:19,890
into the Apache Solr service so whenever

398
00:18:19,890 --> 00:18:22,230
the administrator user try to query

399
00:18:22,230 --> 00:18:23,820
something through the administrative

400
00:18:23,820 --> 00:18:25,800
interface that request will be coming to

401
00:18:25,800 --> 00:18:28,530
the Python project as well because the

402
00:18:28,530 --> 00:18:30,660
naming convention in here it says the

403
00:18:30,660 --> 00:18:34,380
dashboard parse mains starts parse

404
00:18:34,380 --> 00:18:36,180
summary reports you know there's a lots

405
00:18:36,180 --> 00:18:37,950
of log parsing and writing to those

406
00:18:37,950 --> 00:18:40,320
Apaches all the service and whenever it

407
00:18:40,320 --> 00:18:43,470
needs to be it needs to be accessed by

408
00:18:43,470 --> 00:18:45,110
the administrator interface and that

409
00:18:45,110 --> 00:18:47,040
party project is taking the

410
00:18:47,040 --> 00:18:49,140
responsibility again sure it is quite

411
00:18:49,140 --> 00:18:51,990
important to know there is a partial

412
00:18:51,990 --> 00:18:53,910
solar service within the box but

413
00:18:53,910 --> 00:18:57,150
unfortunately due to the iptables rule

414
00:18:57,150 --> 00:18:59,100
that we have in here we're not gonna be

415
00:18:59,100 --> 00:19:01,080
able to directly communicate it up as a

416
00:19:01,080 --> 00:19:04,500
solar in the at the beginning but later

417
00:19:04,500 --> 00:19:07,170
of the presentation we will find a way

418
00:19:07,170 --> 00:19:07,890
to do it

419
00:19:07,890 --> 00:19:11,850
so alright let's talk about iOS I double

420
00:19:11,850 --> 00:19:15,690
the SSD process if you grab it from the

421
00:19:15,690 --> 00:19:17,940
process tree you are seeing the full

422
00:19:17,940 --> 00:19:20,490
path of the binary and if you look for

423
00:19:20,490 --> 00:19:22,770
the file type it is a symbolic link to

424
00:19:22,770 --> 00:19:26,180
do is I double the SS process which is

425
00:19:26,180 --> 00:19:30,570
sui the other five binary and there is a

426
00:19:30,570 --> 00:19:33,750
64 module in that pioneer so it's a very

427
00:19:33,750 --> 00:19:38,460
huge binary and we can of course target

428
00:19:38,460 --> 00:19:42,660
that process target that process but it

429
00:19:42,660 --> 00:19:44,340
will be requiring lots of yours

430
00:19:44,340 --> 00:19:46,650
engineering so of course we are going to

431
00:19:46,650 --> 00:19:50,490
do that at some point but one of the

432
00:19:50,490 --> 00:19:52,500
most important attack surfers as you can

433
00:19:52,500 --> 00:19:54,510
imagine it is a process service itself

434
00:19:54,510 --> 00:19:58,650
so so far I believe I just

435
00:19:58,650 --> 00:20:02,850
to an ominous I guess and we managed to

436
00:20:02,850 --> 00:20:07,760
collect enough level of information

437
00:20:07,760 --> 00:20:11,220
about product itself so it is time to

438
00:20:11,220 --> 00:20:14,070
define attack vectors in a light of

439
00:20:14,070 --> 00:20:17,370
those information that we got so far so

440
00:20:17,370 --> 00:20:20,130
we know that administrator interface is

441
00:20:20,130 --> 00:20:22,800
written with Java and there is a proxy

442
00:20:22,800 --> 00:20:26,059
service which is written with C++ I

443
00:20:26,059 --> 00:20:29,100
haven't told that before but it is a C++

444
00:20:29,100 --> 00:20:32,100
guys is my bad sorry and there is a lot

445
00:20:32,100 --> 00:20:35,130
of internal services but most of them

446
00:20:35,130 --> 00:20:37,020
are not accessible from outside of the

447
00:20:37,020 --> 00:20:40,920
box and you guys are remembering you

448
00:20:40,920 --> 00:20:43,080
know SSL decryption and adverse

449
00:20:43,080 --> 00:20:45,420
advancetrac protection features of the

450
00:20:45,420 --> 00:20:47,760
administrative interface so we know that

451
00:20:47,760 --> 00:20:51,780
it does offloading the SSL it pours HTML

452
00:20:51,780 --> 00:20:57,030
content scan files etc etc so my idea at

453
00:20:57,030 --> 00:21:00,030
that phase my idea was okay

454
00:21:00,030 --> 00:21:01,380
let's start with the administrative

455
00:21:01,380 --> 00:21:05,550
interface and we can go after proxy

456
00:21:05,550 --> 00:21:09,120
service if it needs to be you know let's

457
00:21:09,120 --> 00:21:11,010
stuff it administrator interface at the

458
00:21:11,010 --> 00:21:13,910
beginning but there is a lots of

459
00:21:13,910 --> 00:21:17,370
possible I'll talk scenarios as you can

460
00:21:17,370 --> 00:21:21,690
imagine you know one of the if you want

461
00:21:21,690 --> 00:21:24,480
to let's say target the HTML parser of

462
00:21:24,480 --> 00:21:27,420
the product like a browser exploitation

463
00:21:27,420 --> 00:21:30,450
you can just send that phishing email to

464
00:21:30,450 --> 00:21:33,000
the one of the convoy one of the

465
00:21:33,000 --> 00:21:35,370
employees of the company that contains a

466
00:21:35,370 --> 00:21:37,530
link whenever the user clicks on that

467
00:21:37,530 --> 00:21:40,830
link that rock routes will be sounded to

468
00:21:40,830 --> 00:21:42,929
the proxy service and processor is going

469
00:21:42,929 --> 00:21:44,970
to take that records from the clients is

470
00:21:44,970 --> 00:21:47,370
gonna send exactly same request to do a

471
00:21:47,370 --> 00:21:49,860
destination server which is a web page

472
00:21:49,860 --> 00:21:52,770
that attacker can control and whenever

473
00:21:52,770 --> 00:21:56,179
the proxy service gets the response it

474
00:21:56,179 --> 00:21:59,460
performs analysis it has to parse HTML

475
00:21:59,460 --> 00:22:02,400
content that scans a scandal file so

476
00:22:02,400 --> 00:22:05,340
that means you can directly attack to

477
00:22:05,340 --> 00:22:08,040
the HTML parsing engine of the product

478
00:22:08,040 --> 00:22:10,679
you know there is a lots of different

479
00:22:10,679 --> 00:22:12,580
possible attack vectors you know

480
00:22:12,580 --> 00:22:15,130
was just one example that just popped in

481
00:22:15,130 --> 00:22:16,330
my mind right now

482
00:22:16,330 --> 00:22:19,299
during the presentation and we are going

483
00:22:19,299 --> 00:22:20,559
to talk about the administrator

484
00:22:20,559 --> 00:22:21,970
interface and then you're gonna talk

485
00:22:21,970 --> 00:22:26,649
about the proxy service you know as you

486
00:22:26,649 --> 00:22:29,890
know it is a Java project and I love I

487
00:22:29,890 --> 00:22:32,169
like to working on the Java project and

488
00:22:32,169 --> 00:22:33,340
every single time

489
00:22:33,340 --> 00:22:35,200
whenever I facing with a java

490
00:22:35,200 --> 00:22:37,510
application I always start by reading

491
00:22:37,510 --> 00:22:40,659
the configuration file because know the

492
00:22:40,659 --> 00:22:42,070
web.xml

493
00:22:42,070 --> 00:22:43,899
trans fact example you know all of those

494
00:22:43,899 --> 00:22:47,440
example files contains a very good high

495
00:22:47,440 --> 00:22:50,559
level of understanding information about

496
00:22:50,559 --> 00:22:54,399
the software that we are going to do one

497
00:22:54,399 --> 00:22:57,309
able to research and I don't want to

498
00:22:57,309 --> 00:23:00,639
live in an SSH connection during bull

499
00:23:00,639 --> 00:23:03,370
run able to research so we need to find

500
00:23:03,370 --> 00:23:05,980
out all the location of the jar file by

501
00:23:05,980 --> 00:23:08,769
using just fine comment on step two and

502
00:23:08,769 --> 00:23:11,230
then you can copy all of them to your

503
00:23:11,230 --> 00:23:16,419
main host to further analysis because we

504
00:23:16,419 --> 00:23:18,700
are going to deal with lots of jar files

505
00:23:18,700 --> 00:23:23,669
and I strongly suggest you to use I des

506
00:23:23,669 --> 00:23:28,809
I used to use GD y for the compiling or

507
00:23:28,809 --> 00:23:31,720
the jar files but those kind of project

508
00:23:31,720 --> 00:23:34,870
has hundreds of different jar files and

509
00:23:34,870 --> 00:23:37,510
if you put all of those jar files into

510
00:23:37,510 --> 00:23:40,659
the GD y it wasn't working for me it was

511
00:23:40,659 --> 00:23:43,450
just crashing or freezing because it has

512
00:23:43,450 --> 00:23:45,639
to compile all the class and the

513
00:23:45,639 --> 00:23:47,649
functions and they need to find all the

514
00:23:47,649 --> 00:23:52,840
cross calls so i strictly suggest you to

515
00:23:52,840 --> 00:23:55,990
use IntelliJ or eclipse for that purpose

516
00:23:55,990 --> 00:23:59,110
and if you are if you are up to use the

517
00:23:59,110 --> 00:24:01,990
IntelliJ IDE there is a Java the

518
00:24:01,990 --> 00:24:05,860
compiler that jar file under the the

519
00:24:05,860 --> 00:24:07,960
compiler library which comes by default

520
00:24:07,960 --> 00:24:13,870
in ontology I guess and you can compile

521
00:24:13,870 --> 00:24:17,019
all the jar files under the Lib folder

522
00:24:17,019 --> 00:24:19,750
you can change the name of course and we

523
00:24:19,750 --> 00:24:21,880
are going to put all the compiled files

524
00:24:21,880 --> 00:24:23,750
under the lip

525
00:24:23,750 --> 00:24:27,139
the compiled folder and if you go to the

526
00:24:27,139 --> 00:24:29,960
Intelligencer face and look for the

527
00:24:29,960 --> 00:24:32,149
projects add things there is a library

528
00:24:32,149 --> 00:24:35,480
section in here you can import those

529
00:24:35,480 --> 00:24:39,860
libraries and sources all together which

530
00:24:39,860 --> 00:24:43,129
will tell the Intelligencer this is my

531
00:24:43,129 --> 00:24:46,429
you know shower so fair and intelligent

532
00:24:46,429 --> 00:24:48,740
ake the rest of the job is gonna process

533
00:24:48,740 --> 00:24:51,019
all the classes and you're gonna be able

534
00:24:51,019 --> 00:24:53,450
to just you know finding a function that

535
00:24:53,450 --> 00:24:55,759
you are interested and you will be just

536
00:24:55,759 --> 00:24:59,659
clicking it to go to definition and also

537
00:24:59,659 --> 00:25:01,940
you can find a very interesting function

538
00:25:01,940 --> 00:25:04,490
that might be at some problem in the

539
00:25:04,490 --> 00:25:07,639
definition you can just by using the ID

540
00:25:07,639 --> 00:25:09,980
ease you can find all the difference

541
00:25:09,980 --> 00:25:12,289
location where the specific the function

542
00:25:12,289 --> 00:25:14,570
has been called so I certainly suggest

543
00:25:14,570 --> 00:25:16,340
you to be a friend via - you know

544
00:25:16,340 --> 00:25:20,179
intelligence if you are up to wonderful

545
00:25:20,179 --> 00:25:25,509
research on java application guys so I

546
00:25:25,509 --> 00:25:29,960
beg your pardon so we have when access

547
00:25:29,960 --> 00:25:31,970
to the source code of the administrator

548
00:25:31,970 --> 00:25:37,070
interface so we are ready to do for the

549
00:25:37,070 --> 00:25:39,559
last step which was fine again

550
00:25:39,559 --> 00:25:41,809
vulnerability there is a different

551
00:25:41,809 --> 00:25:44,360
approach to do it like you know top to

552
00:25:44,360 --> 00:25:46,580
bottom or bottom to top you know but on

553
00:25:46,580 --> 00:25:49,759
the top means you know the potentially

554
00:25:49,759 --> 00:25:53,659
vulnerable functions on the Java let's

555
00:25:53,659 --> 00:25:56,600
say and you can directly search those

556
00:25:56,600 --> 00:25:58,850
function within the code base and if you

557
00:25:58,850 --> 00:26:01,340
find if you believe that you just find a

558
00:26:01,340 --> 00:26:04,730
very interesting very easy security use

559
00:26:04,730 --> 00:26:07,850
those potential vulnerable function you

560
00:26:07,850 --> 00:26:09,919
can start from the bottom to go to the

561
00:26:09,919 --> 00:26:12,529
top in order to find out whether you are

562
00:26:12,529 --> 00:26:15,559
control to parameter that passed through

563
00:26:15,559 --> 00:26:18,409
all the function calls or you can start

564
00:26:18,409 --> 00:26:20,690
from top to bottom which is like you

565
00:26:20,690 --> 00:26:23,779
know start by reading the filter or the

566
00:26:23,779 --> 00:26:26,240
middle layer definitions and the classes

567
00:26:26,240 --> 00:26:28,610
look for the authentication mechanism

568
00:26:28,610 --> 00:26:31,370
and then search for all the controller

569
00:26:31,370 --> 00:26:32,450
or the

570
00:26:32,450 --> 00:26:36,160
request handler definition which will

571
00:26:36,160 --> 00:26:39,410
which will be in important because that

572
00:26:39,410 --> 00:26:41,660
is the location where you can see the

573
00:26:41,660 --> 00:26:45,380
user control parameters etc etc in that

574
00:26:45,380 --> 00:26:48,559
case I was the top to bottom approach I

575
00:26:48,559 --> 00:26:52,370
choose that approach for because of not

576
00:26:52,370 --> 00:26:54,830
very specific reason I was like you know

577
00:26:54,830 --> 00:26:58,700
doing fun funny time on the Sunday and I

578
00:26:58,700 --> 00:27:00,350
was just start reading the source code

579
00:27:00,350 --> 00:27:02,929
and it was like a top-to-bottom approach

580
00:27:02,929 --> 00:27:07,309
and I wish I could show you all the code

581
00:27:07,309 --> 00:27:09,919
bases and everything but I believe I

582
00:27:09,919 --> 00:27:11,780
don't have enough time to do it so I

583
00:27:11,780 --> 00:27:14,809
just grab a very specific function

584
00:27:14,809 --> 00:27:19,780
definition which name is a mount device

585
00:27:19,780 --> 00:27:25,190
it has to be a post request to be able

586
00:27:25,190 --> 00:27:27,530
to execute the function definition and

587
00:27:27,530 --> 00:27:31,460
that is a very interesting if statement

588
00:27:31,460 --> 00:27:34,250
in here it tells you if the Red Cross is

589
00:27:34,250 --> 00:27:37,669
coming from the localhost it is okay but

590
00:27:37,669 --> 00:27:39,410
if the request is not coming from the

591
00:27:39,410 --> 00:27:41,360
local O's I'm gonna validate your

592
00:27:41,360 --> 00:27:45,020
session and your privilege as well since

593
00:27:45,020 --> 00:27:46,669
we don't have the username the password

594
00:27:46,669 --> 00:27:49,820
you know this is going to be a problem

595
00:27:49,820 --> 00:27:51,830
for us because it is a password

596
00:27:51,830 --> 00:27:54,559
protections if the records is not coming

597
00:27:54,559 --> 00:27:56,990
from look close and there is a one

598
00:27:56,990 --> 00:27:59,390
function call in here get token which

599
00:27:59,390 --> 00:28:02,360
will be have a very important role on

600
00:28:02,360 --> 00:28:04,760
our exploitation we will come back in

601
00:28:04,760 --> 00:28:09,049
later so that was the important part of

602
00:28:09,049 --> 00:28:11,720
the function and we are moving to do

603
00:28:11,720 --> 00:28:15,410
more important stuff so it tastes it

604
00:28:15,410 --> 00:28:17,870
tells us that the request must be a post

605
00:28:17,870 --> 00:28:20,120
request and the post body it is taken

606
00:28:20,120 --> 00:28:22,070
from the request and it is a JSON object

607
00:28:22,070 --> 00:28:24,710
and we're gonna get the one device to

608
00:28:24,710 --> 00:28:28,330
drink from the Jeju assume that data and

609
00:28:28,330 --> 00:28:31,190
that part is quite interesting because

610
00:28:31,190 --> 00:28:35,090
it performs some sort of escaping so if

611
00:28:35,090 --> 00:28:37,700
the one device contains a double cold it

612
00:28:37,700 --> 00:28:39,510
will be escaped

613
00:28:39,510 --> 00:28:43,380
if it contains a backtick dollar sign it

614
00:28:43,380 --> 00:28:46,890
will be escaped by the backslash but the

615
00:28:46,890 --> 00:28:50,340
problem is if it contains backslash it

616
00:28:50,340 --> 00:28:52,980
will escape backslash one more time so

617
00:28:52,980 --> 00:28:54,870
if we have the double code it will be

618
00:28:54,870 --> 00:28:57,390
escaped one time and it will be escaping

619
00:28:57,390 --> 00:28:59,550
backslash one more time in here there is

620
00:28:59,550 --> 00:29:03,120
some sort of problem in here and after

621
00:29:03,120 --> 00:29:05,430
that there is a function call which is

622
00:29:05,430 --> 00:29:08,760
at Israel at Mount device and it takes

623
00:29:08,760 --> 00:29:11,760
our parameter that we can control and if

624
00:29:11,760 --> 00:29:14,550
you manage to post that if statement we

625
00:29:14,550 --> 00:29:17,580
are going to see as a UI how to CMD

626
00:29:17,580 --> 00:29:20,940
which is tempt to execute operating

627
00:29:20,940 --> 00:29:25,710
system command with a parameter that we

628
00:29:25,710 --> 00:29:28,350
are control so we need to skip that if

629
00:29:28,350 --> 00:29:30,450
statement it has to be returned to you

630
00:29:30,450 --> 00:29:34,590
and so let's have a look at that one is

631
00:29:34,590 --> 00:29:37,830
valid mount device it is just like our

632
00:29:37,830 --> 00:29:40,320
very weak blacklisting it tells you it

633
00:29:40,320 --> 00:29:42,510
cannot be contained in bash finish

634
00:29:42,510 --> 00:29:47,309
fighting slash Perl Python etc etc it

635
00:29:47,309 --> 00:29:50,910
validates it performs some sort of black

636
00:29:50,910 --> 00:29:53,309
listing on that box but the problem is

637
00:29:53,309 --> 00:29:57,000
it has the white space at the beginning

638
00:29:57,000 --> 00:29:59,340
of the Pearl and the Python command in

639
00:29:59,340 --> 00:30:02,070
here it's the very weak blacklist ink we

640
00:30:02,070 --> 00:30:03,660
can bypass that without having any

641
00:30:03,660 --> 00:30:06,660
problem so we have to keep that email in

642
00:30:06,660 --> 00:30:08,790
our mind if you've managed to find a

643
00:30:08,790 --> 00:30:12,360
vulnerability so all right we can pass

644
00:30:12,360 --> 00:30:16,050
that part and we can reach in here so it

645
00:30:16,050 --> 00:30:17,760
is time to read the eggs at you I have

646
00:30:17,760 --> 00:30:22,860
christian D exit why how PCM D it is

647
00:30:22,860 --> 00:30:26,130
going to execute your helper binary with

648
00:30:26,130 --> 00:30:29,490
a sub C and E which is a command that we

649
00:30:29,490 --> 00:30:32,790
can control so what is your helper it

650
00:30:32,790 --> 00:30:36,990
easy located in here and it has a root

651
00:30:36,990 --> 00:30:39,870
privilege and there is Sui DBH so all

652
00:30:39,870 --> 00:30:41,550
the commands will be executed with a

653
00:30:41,550 --> 00:30:44,130
root user so if you find a way to

654
00:30:44,130 --> 00:30:47,280
execute our command that command will be

655
00:30:47,280 --> 00:30:49,080
executed with their root privileges

656
00:30:49,080 --> 00:30:51,330
which is something very very important

657
00:30:51,330 --> 00:30:52,620
for us

658
00:30:52,620 --> 00:30:55,620
and finally that function calls exit CMD

659
00:30:55,620 --> 00:31:00,300
which is basically calls run time dot

660
00:31:00,300 --> 00:31:04,050
get fronted that's exact so obviously we

661
00:31:04,050 --> 00:31:06,120
have comment injection vulnerability in

662
00:31:06,120 --> 00:31:09,630
here so whether we have we believe that

663
00:31:09,630 --> 00:31:11,730
we have the vulnerability in here and we

664
00:31:11,730 --> 00:31:14,070
need to do the proof-of-concept thanks

665
00:31:14,070 --> 00:31:15,540
to the reading of fundamental and the

666
00:31:15,540 --> 00:31:18,990
product feature steps of methodology P V

667
00:31:18,990 --> 00:31:22,770
now where is which administrator

668
00:31:22,770 --> 00:31:26,250
interface I mean which many of them it

669
00:31:26,250 --> 00:31:29,100
is going to execute that specific am

670
00:31:29,100 --> 00:31:30,660
point of course you can build it from

671
00:31:30,660 --> 00:31:34,970
scratch but this is more easier for me

672
00:31:34,970 --> 00:31:37,679
as you can see that is the post request

673
00:31:37,679 --> 00:31:40,110
and there is a month device and we can

674
00:31:40,110 --> 00:31:44,070
inject our command in here because the

675
00:31:44,070 --> 00:31:46,800
dollar sign it is will be used for the

676
00:31:46,800 --> 00:31:49,470
execution and the dollar sign escape one

677
00:31:49,470 --> 00:31:51,600
time and the backslash okay one more

678
00:31:51,600 --> 00:31:53,640
time which means there is no escaping at

679
00:31:53,640 --> 00:31:56,250
all that backslash escaping did another

680
00:31:56,250 --> 00:31:58,230
one and there is nothing related with

681
00:31:58,230 --> 00:32:00,480
the dollar sign which will helping us to

682
00:32:00,480 --> 00:32:03,150
inject our command so basically we are

683
00:32:03,150 --> 00:32:05,870
executing sleep command with a fifteen

684
00:32:05,870 --> 00:32:09,420
seconds with administrator with a root

685
00:32:09,420 --> 00:32:12,179
privilege so let's talk about the

686
00:32:12,179 --> 00:32:13,920
exploitation of that vulnerability as

687
00:32:13,920 --> 00:32:16,640
well I'm one of the Metasploit

688
00:32:16,640 --> 00:32:21,900
contributors and I are usually you know

689
00:32:21,900 --> 00:32:24,990
using the Python dropper for the

690
00:32:24,990 --> 00:32:27,300
exploitation when I specially exploiting

691
00:32:27,300 --> 00:32:29,309
the Linux machines and but there's a

692
00:32:29,309 --> 00:32:32,309
problem about the Python dropper from

693
00:32:32,309 --> 00:32:35,040
the MSF venom of the matters plate it

694
00:32:35,040 --> 00:32:38,760
has to be include the double code that

695
00:32:38,760 --> 00:32:41,490
wraps up our dropper command in order to

696
00:32:41,490 --> 00:32:44,010
pass it to the Python process so that

697
00:32:44,010 --> 00:32:45,240
means we not going to be able to

698
00:32:45,240 --> 00:32:48,929
directly use it because as you know the

699
00:32:48,929 --> 00:32:51,000
double cost has been escaped on the

700
00:32:51,000 --> 00:32:54,420
backend service so the idea is that we

701
00:32:54,420 --> 00:32:58,080
can use pearl because pearl can take a

702
00:32:58,080 --> 00:33:00,510
parameter with the single codes which is

703
00:33:00,510 --> 00:33:04,860
allowed to use and basically the idea is

704
00:33:04,860 --> 00:33:06,390
simple

705
00:33:06,390 --> 00:33:08,700
I want to execute pythons wrapper but

706
00:33:08,700 --> 00:33:13,260
I'm gonna put that poison comment into

707
00:33:13,260 --> 00:33:15,720
the Perl command so basically during

708
00:33:15,720 --> 00:33:17,520
text validation we are going to execute

709
00:33:17,520 --> 00:33:20,490
Perl which is going to execute the first

710
00:33:20,490 --> 00:33:22,830
step of the Python dropper when the

711
00:33:22,830 --> 00:33:24,870
Python executed it communicates with the

712
00:33:24,870 --> 00:33:27,090
handler and hallor sends the second

713
00:33:27,090 --> 00:33:28,950
stage so there is a you know lots of

714
00:33:28,950 --> 00:33:31,800
execution when and after and there is a

715
00:33:31,800 --> 00:33:34,920
ruby code as you can see in here that we

716
00:33:34,920 --> 00:33:38,490
can build a Perl command which includes

717
00:33:38,490 --> 00:33:40,830
which contains our Python commands it's

718
00:33:40,830 --> 00:33:42,470
a quite nice trick

719
00:33:42,470 --> 00:33:45,480
so I reported that vulnerabilities to

720
00:33:45,480 --> 00:33:48,390
the CDI and of course either I told me

721
00:33:48,390 --> 00:33:50,580
that it authentication is required to

722
00:33:50,580 --> 00:33:52,800
exploit that vulnerability but we are

723
00:33:52,800 --> 00:33:55,680
going to see that the exploitation can

724
00:33:55,680 --> 00:34:01,560
be bypassed guys so we have to bypass

725
00:34:01,560 --> 00:34:03,420
authentication that those are the

726
00:34:03,420 --> 00:34:05,760
initial ideas we can find a stored

727
00:34:05,760 --> 00:34:07,320
cross-site scripting vulnerability

728
00:34:07,320 --> 00:34:10,199
because we can't force authenticated

729
00:34:10,199 --> 00:34:13,920
user to send HTTP requests to Dumont

730
00:34:13,920 --> 00:34:15,840
device at point where we have the

731
00:34:15,840 --> 00:34:18,840
command injection and since the users

732
00:34:18,840 --> 00:34:22,830
are going to be manipulated by Java

733
00:34:22,830 --> 00:34:26,850
Script that request will be sent to the

734
00:34:26,850 --> 00:34:29,429
endpoint with the authenticated user so

735
00:34:29,429 --> 00:34:31,170
we don't have to be thinking about

736
00:34:31,170 --> 00:34:33,600
authentication requests authentication

737
00:34:33,600 --> 00:34:37,770
stuff and another idea is it would be

738
00:34:37,770 --> 00:34:40,469
handy to find something as a selfish

739
00:34:40,469 --> 00:34:42,540
vulnerable to some sort of some type of

740
00:34:42,540 --> 00:34:45,659
SSR unable to quite could be handy in

741
00:34:45,659 --> 00:34:47,370
order to communicate with internal

742
00:34:47,370 --> 00:34:49,650
services so that we can send a request

743
00:34:49,650 --> 00:34:53,239
from the local O's to the endpoint or

744
00:34:53,239 --> 00:34:55,560
you can go directly after the

745
00:34:55,560 --> 00:34:59,100
authentication bypass I don't have a too

746
00:34:59,100 --> 00:35:01,950
much time I'm just gonna show you how I

747
00:35:01,950 --> 00:35:05,220
find a store cross-site scripting on the

748
00:35:05,220 --> 00:35:08,250
administrative interface so as you can

749
00:35:08,250 --> 00:35:11,670
see in here that is a very basic HTTP

750
00:35:11,670 --> 00:35:13,950
request to the proxy service it tells to

751
00:35:13,950 --> 00:35:16,080
the proxy service that I'm gonna you

752
00:35:16,080 --> 00:35:16,859
know

753
00:35:16,859 --> 00:35:19,049
that I want to send a gasser across the

754
00:35:19,049 --> 00:35:22,079
Penta stop below and proxy service does

755
00:35:22,079 --> 00:35:24,990
the job and sends the response back to

756
00:35:24,990 --> 00:35:28,380
the user so that activities is being

757
00:35:28,380 --> 00:35:30,170
written into the administrator interface

758
00:35:30,170 --> 00:35:33,089
guys remember the Python and a bunch of

759
00:35:33,089 --> 00:35:34,799
other stuff that we hold that they have

760
00:35:34,799 --> 00:35:38,400
talked 15 minutes ago and you know that

761
00:35:38,400 --> 00:35:41,520
activities has been written to the

762
00:35:41,520 --> 00:35:44,700
Apache Solr database which is presented

763
00:35:44,700 --> 00:35:46,859
in to the administrator interface so the

764
00:35:46,859 --> 00:35:49,319
idea is that we control that data in

765
00:35:49,319 --> 00:35:51,539
here because we can tell anything we

766
00:35:51,539 --> 00:35:54,329
want to that process service so the idea

767
00:35:54,329 --> 00:35:57,270
is quite simple as an attacker we are

768
00:35:57,270 --> 00:35:59,789
going to intentionally Doland

769
00:35:59,789 --> 00:36:02,819
a very very known malware through the

770
00:36:02,819 --> 00:36:06,450
proxy service so proxy product can

771
00:36:06,450 --> 00:36:08,880
detect it and produce a loop violent

772
00:36:08,880 --> 00:36:11,099
will be like you know ringing all the

773
00:36:11,099 --> 00:36:13,079
alarms you know I call them all away

774
00:36:13,079 --> 00:36:16,230
except for excel but the data will be

775
00:36:16,230 --> 00:36:19,020
written into the Apache Solr

776
00:36:19,020 --> 00:36:21,599
which is being used in the

777
00:36:21,599 --> 00:36:23,700
administrative interface and very well

778
00:36:23,700 --> 00:36:27,000
specifically in here so when this is my

779
00:36:27,000 --> 00:36:29,549
administrator logs in and checks what's

780
00:36:29,549 --> 00:36:32,670
happening we can execute JavaScript code

781
00:36:32,670 --> 00:36:36,619
on the system administrator browser and

782
00:36:36,619 --> 00:36:39,089
thanks to that JavaScript code we can

783
00:36:39,089 --> 00:36:41,099
send IX requests to the wonderful the

784
00:36:41,099 --> 00:36:43,410
endpoint that we have found in the first

785
00:36:43,410 --> 00:36:47,039
place so you know there was a quite

786
00:36:47,039 --> 00:36:49,529
interesting XSS vulnerability because

787
00:36:49,529 --> 00:36:51,779
whenever the browser sending requests

788
00:36:51,779 --> 00:36:53,760
the proxy they are performing the full

789
00:36:53,760 --> 00:36:56,160
URL encoding in here but I'm manually

790
00:36:56,160 --> 00:36:58,589
crafting two HTTP request to the proxy

791
00:36:58,589 --> 00:37:01,140
service that means there will be no

792
00:37:01,140 --> 00:37:03,569
encoding and that data is not being

793
00:37:03,569 --> 00:37:06,329
encoded on the administrator interface

794
00:37:06,329 --> 00:37:09,990
basically we have a cross-site scripting

795
00:37:09,990 --> 00:37:12,150
spatial distorted supporting

796
00:37:12,150 --> 00:37:14,369
vulnerability in here so instead of

797
00:37:14,369 --> 00:37:17,250
popping up other parts we are just we

798
00:37:17,250 --> 00:37:20,430
can just call ix request to the endpoint

799
00:37:20,430 --> 00:37:22,740
that we have a command injection

800
00:37:22,740 --> 00:37:25,109
so that was I reported that

801
00:37:25,109 --> 00:37:27,940
vulnerability to the CDI as well

802
00:37:27,940 --> 00:37:30,309
as you can see in the valley with the

803
00:37:30,309 --> 00:37:32,710
description attacker can leverage this

804
00:37:32,710 --> 00:37:34,150
in a conjunction with other

805
00:37:34,150 --> 00:37:36,579
vulnerabilities to execute code in the

806
00:37:36,579 --> 00:37:40,180
context of the of the root user but lies

807
00:37:40,180 --> 00:37:43,030
you know cross-site scripting is a cool

808
00:37:43,030 --> 00:37:45,160
I'm not under estimating any kind of

809
00:37:45,160 --> 00:37:48,549
vulnerabilities but it is just not

810
00:37:48,549 --> 00:37:51,520
enough for me because there is a huge

811
00:37:51,520 --> 00:37:53,710
setback which requires the user

812
00:37:53,710 --> 00:37:56,530
interaction for the exploitation I was

813
00:37:56,530 --> 00:37:58,930
like okay I just find something very

814
00:37:58,930 --> 00:38:00,940
cool you know intentional doning of

815
00:38:00,940 --> 00:38:03,220
malware except for I accepted that idea

816
00:38:03,220 --> 00:38:06,490
what's simple and cool but I need to

817
00:38:06,490 --> 00:38:08,380
find a better way to continue the

818
00:38:08,380 --> 00:38:12,819
exploitation but you know I got another

819
00:38:12,819 --> 00:38:16,960
idea while I was planning a time to find

820
00:38:16,960 --> 00:38:19,030
the exorcists through the proxy service

821
00:38:19,030 --> 00:38:21,549
so the idea is targeted processors

822
00:38:21,549 --> 00:38:24,940
itself so as you can remember from the

823
00:38:24,940 --> 00:38:26,890
previous slides that is the HTTP request

824
00:38:26,890 --> 00:38:29,650
very simplest OOP request the proxy

825
00:38:29,650 --> 00:38:32,619
services cell it tells the proxy service

826
00:38:32,619 --> 00:38:34,599
that I want to communicate with the

827
00:38:34,599 --> 00:38:36,730
Panthers not vlog processor versus

828
00:38:36,730 --> 00:38:38,559
rocker scatter responds and sends back

829
00:38:38,559 --> 00:38:43,150
to the user right so what happens if I

830
00:38:43,150 --> 00:38:46,119
tell the processor was that I want you

831
00:38:46,119 --> 00:38:49,450
to communicate with yourself in that

832
00:38:49,450 --> 00:38:51,900
case it told me there is a you know

833
00:38:51,900 --> 00:38:54,309
self-referential request Brooks you are

834
00:38:54,309 --> 00:38:57,309
forbidden and I was like alright that

835
00:38:57,309 --> 00:39:00,549
means there is some sort of controls and

836
00:39:00,549 --> 00:39:03,160
lots of ifs Titans in the process of the

837
00:39:03,160 --> 00:39:05,589
cell what happens if I manage the trick

838
00:39:05,589 --> 00:39:08,140
the proxy service to communicate with a

839
00:39:08,140 --> 00:39:10,770
internal service that was the main idea

840
00:39:10,770 --> 00:39:14,740
so that is the function get ant user

841
00:39:14,740 --> 00:39:16,990
order notification function I set a

842
00:39:16,990 --> 00:39:19,270
breakpoint in here which produced

843
00:39:19,270 --> 00:39:21,730
exactly same error message that we have

844
00:39:21,730 --> 00:39:25,180
seen in here and I just sent the same

845
00:39:25,180 --> 00:39:28,089
request and it hit the breakpoint and it

846
00:39:28,089 --> 00:39:31,150
tells you that get user notification all

847
00:39:31,150 --> 00:39:33,670
the notification has been cooled by the

848
00:39:33,670 --> 00:39:36,609
preparer Proulx a loop rejection which

849
00:39:36,609 --> 00:39:38,140
has been called by the Heather perks

850
00:39:38,140 --> 00:39:39,849
loop which has been called by the due

851
00:39:39,849 --> 00:39:41,440
process itself

852
00:39:41,440 --> 00:39:43,170
we're gonna read all of those functions

853
00:39:43,170 --> 00:39:47,460
so we did do processing there E is a

854
00:39:47,460 --> 00:39:50,740
pump function call which is a easy bus

855
00:39:50,740 --> 00:39:53,320
proxy and the function is the member of

856
00:39:53,320 --> 00:39:55,900
the HT proxy conflict cache so basically

857
00:39:55,900 --> 00:39:58,360
product try to understand like I am I

858
00:39:58,360 --> 00:40:00,640
being prices and world's proxy and in

859
00:40:00,640 --> 00:40:02,950
that case hand approach the loop has

860
00:40:02,950 --> 00:40:05,710
been called this function that we have

861
00:40:05,710 --> 00:40:07,840
seen on the previous slide and that

862
00:40:07,840 --> 00:40:11,800
function calls TM socket address is same

863
00:40:11,800 --> 00:40:15,910
addr that is the important part because

864
00:40:15,910 --> 00:40:18,820
that function performs full URL

865
00:40:18,820 --> 00:40:22,330
comparison with a URL of the proxy

866
00:40:22,330 --> 00:40:26,170
service with a URL of the user try to

867
00:40:26,170 --> 00:40:29,590
communicate so if it is a same address

868
00:40:29,590 --> 00:40:34,030
it calls prepare proxy Roo projection

869
00:40:34,030 --> 00:40:36,070
Pole and we are seeing that error

870
00:40:36,070 --> 00:40:39,460
message so I just changed the port

871
00:40:39,460 --> 00:40:42,360
number to the Apache Solr service and

872
00:40:42,360 --> 00:40:45,070
these are that changes there will be a

873
00:40:45,070 --> 00:40:47,620
no match in the fully our compression on

874
00:40:47,620 --> 00:40:50,020
the proxy servers and there is

875
00:40:50,020 --> 00:40:52,960
administrator interface after a purchase

876
00:40:52,960 --> 00:40:56,680
all the servers I'm just can communicate

877
00:40:56,680 --> 00:40:59,830
with it because of a very interesting

878
00:40:59,830 --> 00:41:02,950
bug in the apart in the proxy server so

879
00:41:02,950 --> 00:41:05,920
I as you can see in here and I love to

880
00:41:05,920 --> 00:41:08,860
communicate with the Apache Solr service

881
00:41:08,860 --> 00:41:12,460
administrator interface so all right

882
00:41:12,460 --> 00:41:15,970
that was another very very very

883
00:41:15,970 --> 00:41:18,670
important one ER ability because we can

884
00:41:18,670 --> 00:41:21,760
we are going to leverage this

885
00:41:21,760 --> 00:41:23,350
vulnerability to the bypass

886
00:41:23,350 --> 00:41:26,140
authentication on systems and then we're

887
00:41:26,140 --> 00:41:27,790
gonna change all of them together guys

888
00:41:27,790 --> 00:41:33,610
so a purchase order service in the box

889
00:41:33,610 --> 00:41:35,740
I mean the product was very old version

890
00:41:35,740 --> 00:41:38,230
because it's not quite easy to upgrade

891
00:41:38,230 --> 00:41:40,060
your third-party dependencies like a

892
00:41:40,060 --> 00:41:43,090
purchase order order to buy servers in

893
00:41:43,090 --> 00:41:45,670
these type of solutions it's quite hard

894
00:41:45,670 --> 00:41:48,820
to upgrade to newer version so there was

895
00:41:48,820 --> 00:41:52,150
a very very old one ability in Apache

896
00:41:52,150 --> 00:41:54,880
Solr service but it is exactly

897
00:41:54,880 --> 00:41:57,970
what I need it is I will try to file

898
00:41:57,970 --> 00:42:01,930
reads one ability so there that is the

899
00:42:01,930 --> 00:42:03,700
name of the collection and there is a

900
00:42:03,700 --> 00:42:06,819
replication endpoint and the comet has

901
00:42:06,819 --> 00:42:10,000
to be a file content and you can travel

902
00:42:10,000 --> 00:42:13,660
back to the root folder and then you can

903
00:42:13,660 --> 00:42:15,579
call whatever you want and that will

904
00:42:15,579 --> 00:42:18,009
gives you two reading any content of the

905
00:42:18,009 --> 00:42:23,589
file so at the beginning I wasn't there

906
00:42:23,589 --> 00:42:25,390
was no way to communicate with the

907
00:42:25,390 --> 00:42:27,640
Apache Solr service but we find out very

908
00:42:27,640 --> 00:42:29,920
interesting bulk and by exploiting the

909
00:42:29,920 --> 00:42:33,099
part we are going to read anything we

910
00:42:33,099 --> 00:42:38,529
want so far so good I want you to remind

911
00:42:38,529 --> 00:42:40,839
the github home function you know it was

912
00:42:40,839 --> 00:42:43,720
like a way behind of our presentation

913
00:42:43,720 --> 00:42:47,559
guys all right do you remember that

914
00:42:47,559 --> 00:42:51,039
catacomb function it is going to help us

915
00:42:51,039 --> 00:42:53,140
what baboons are achieving here

916
00:42:53,140 --> 00:42:59,009
because let me yeah because that

917
00:42:59,009 --> 00:43:04,329
function takes cookies from the HTTP

918
00:43:04,329 --> 00:43:07,029
request and it returns to volume but the

919
00:43:07,029 --> 00:43:10,059
problem is it's print out the value and

920
00:43:10,059 --> 00:43:13,630
the name of the cookies but job

921
00:43:13,630 --> 00:43:18,339
application is running by the Tomcat

922
00:43:18,339 --> 00:43:21,759
process so those standard outputs data

923
00:43:21,759 --> 00:43:23,980
will be written into the log file which

924
00:43:23,980 --> 00:43:27,819
is a catalina dot out file so due to

925
00:43:27,819 --> 00:43:31,539
that little function all of those valid

926
00:43:31,539 --> 00:43:34,390
station IDs written into the log file

927
00:43:34,390 --> 00:43:36,970
and we have arbitrary file read

928
00:43:36,970 --> 00:43:39,940
vulnerability so what we are going to do

929
00:43:39,940 --> 00:43:43,000
that we can exploit to one able to

930
00:43:43,000 --> 00:43:45,460
together in order to get the content of

931
00:43:45,460 --> 00:43:47,559
the catalan a dot out file which

932
00:43:47,559 --> 00:43:51,220
contains a valid session IDs and we are

933
00:43:51,220 --> 00:43:53,529
going to collect all the session IDs

934
00:43:53,529 --> 00:43:56,529
together and we are we can go to

935
00:43:56,529 --> 00:43:59,079
administrator interface in order to

936
00:43:59,079 --> 00:44:01,809
actually command injection vulnerability

937
00:44:01,809 --> 00:44:06,490
with the active session IDs so the idea

938
00:44:06,490 --> 00:44:08,349
is actually quite simple that is

939
00:44:08,349 --> 00:44:10,359
we are going to in the first step we are

940
00:44:10,359 --> 00:44:13,750
going to exploit a comparative bug in

941
00:44:13,750 --> 00:44:16,869
the proxy servers which help us to

942
00:44:16,869 --> 00:44:19,599
communicate with the Apache Solr service

943
00:44:19,599 --> 00:44:21,700
that is running within the product

944
00:44:21,700 --> 00:44:25,180
itself and this is a very old software

945
00:44:25,180 --> 00:44:27,910
which has a vulnerability and it is

946
00:44:27,910 --> 00:44:30,880
arbitrary file reads and combination of

947
00:44:30,880 --> 00:44:33,280
that vulnerability we are going to read

948
00:44:33,280 --> 00:44:36,520
Catalina dot out file and we gonna by

949
00:44:36,520 --> 00:44:38,680
using reg X we're gonna extract all the

950
00:44:38,680 --> 00:44:42,220
session IDs that we have and that is a

951
00:44:42,220 --> 00:44:44,859
chec session end point I have talked

952
00:44:44,859 --> 00:44:46,650
about it and because it was quite easy

953
00:44:46,650 --> 00:44:49,240
that is a chec session I am pointing

954
00:44:49,240 --> 00:44:52,000
them for that we are going to test all

955
00:44:52,000 --> 00:44:55,000
the session IDs we have in order to find

956
00:44:55,000 --> 00:44:57,070
out whether it is still active or not

957
00:44:57,070 --> 00:44:59,980
and if you find an active session we are

958
00:44:59,980 --> 00:45:03,390
going to exploit the command injection

959
00:45:03,390 --> 00:45:06,849
vulnerability and we are going to be

960
00:45:06,849 --> 00:45:10,000
executing operating system commands with

961
00:45:10,000 --> 00:45:13,210
a root curtilage which will give us as

962
00:45:13,210 --> 00:45:16,000
c2 reverse shell to our command and

963
00:45:16,000 --> 00:45:19,780
control server that is the idea and of

964
00:45:19,780 --> 00:45:22,510
course I have implemented amethyst fleet

965
00:45:22,510 --> 00:45:25,240
module that performs all of those type

966
00:45:25,240 --> 00:45:27,849
automatically and I have a video for it

967
00:45:27,849 --> 00:45:30,640
I would like to I guess yeah that time

968
00:45:30,640 --> 00:45:35,010
is good I guess I still have a minute so

969
00:45:35,010 --> 00:45:41,530
let's see and by the

970
00:45:41,530 --> 00:45:43,510
that matters played module has been

971
00:45:43,510 --> 00:45:46,600
merged to do master branch of the

972
00:45:46,600 --> 00:45:48,850
metasploit project you are just you know

973
00:45:48,850 --> 00:45:52,510
can go and fetch the module and install

974
00:45:52,510 --> 00:45:54,550
the product on your lab and you know

975
00:45:54,550 --> 00:45:58,870
have fun so let me run as you can see in

976
00:45:58,870 --> 00:46:01,750
here is try to its exploits reverse

977
00:46:01,750 --> 00:46:04,210
proxy service and extract the cutting a

978
00:46:04,210 --> 00:46:07,510
dot out file and that was of course this

979
00:46:07,510 --> 00:46:08,920
is demonstration there is only one

980
00:46:08,920 --> 00:46:10,870
session IDs in the log file and it's an

981
00:46:10,870 --> 00:46:13,960
active and by using the session IDs it

982
00:46:13,960 --> 00:46:15,790
goes to the kamati injection

983
00:46:15,790 --> 00:46:18,250
vulnerability and its execute operating

984
00:46:18,250 --> 00:46:20,530
system command which is a procurement

985
00:46:20,530 --> 00:46:22,990
program out contains a fighting command

986
00:46:22,990 --> 00:46:25,090
you know and all of those stuff has been

987
00:46:25,090 --> 00:46:27,700
automatically done and as you can see in

988
00:46:27,700 --> 00:46:32,350
here we have root session on the

989
00:46:32,350 --> 00:46:34,980
backfill to solution of two company guys

990
00:46:34,980 --> 00:46:38,350
that's it thank you very much for

991
00:46:38,350 --> 00:46:40,780
joining me and you know if you have a

992
00:46:40,780 --> 00:46:45,750
question I'm on the discord and you know

993
00:46:45,750 --> 00:46:49,210
in the tracking briefing section if you

994
00:46:49,210 --> 00:46:51,340
have a connection questions feel free to

995
00:46:51,340 --> 00:46:56,280
ask and I will try to you answer it

