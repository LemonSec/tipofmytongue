1
00:00:00,960 --> 00:00:02,560
hey welcome welcome welcome this is jake

2
00:00:02,560 --> 00:00:04,160
williams for audition infosec

3
00:00:04,160 --> 00:00:06,240
uh we're going to do today a little bit

4
00:00:06,240 --> 00:00:08,880
of introduction to malware reversing all

5
00:00:08,880 --> 00:00:09,599
right

6
00:00:09,599 --> 00:00:11,360
now a couple of things right off the bat

7
00:00:11,360 --> 00:00:13,759
all right you're seeing the desktop of

8
00:00:13,759 --> 00:00:16,400
my windows virtual machine that i use

9
00:00:16,400 --> 00:00:17,199
for malware

10
00:00:17,199 --> 00:00:19,119
you'll notice the desktop background is

11
00:00:19,119 --> 00:00:20,320
super unique

12
00:00:20,320 --> 00:00:22,560
while unique in that it's bright orange

13
00:00:22,560 --> 00:00:24,480
uh almost like the uh if you ever grew

14
00:00:24,480 --> 00:00:25,359
up in the country i

15
00:00:25,359 --> 00:00:26,960
i certainly did you know that when

16
00:00:26,960 --> 00:00:28,560
you're out hunting uh you were blaze

17
00:00:28,560 --> 00:00:29,760
orange right so somebody doesn't shoot

18
00:00:29,760 --> 00:00:30,240
you

19
00:00:30,240 --> 00:00:32,320
hopefully at least actually where i come

20
00:00:32,320 --> 00:00:34,160
from uh in the mountains uh

21
00:00:34,160 --> 00:00:36,160
why i say mountains uh blue ridge and

22
00:00:36,160 --> 00:00:37,440
appalachian area um

23
00:00:37,440 --> 00:00:40,480
of virginia very often we have uh folks

24
00:00:40,480 --> 00:00:42,000
that will spray paint using bright

25
00:00:42,000 --> 00:00:43,920
orange paint the word cow

26
00:00:43,920 --> 00:00:45,840
on the side of their cows so they don't

27
00:00:45,840 --> 00:00:47,600
get shot by drunk hunters right so

28
00:00:47,600 --> 00:00:48,960
kind of the same things going on here

29
00:00:48,960 --> 00:00:51,680
right we want a bright uh background

30
00:00:51,680 --> 00:00:53,280
that immediately distinguishes at least

31
00:00:53,280 --> 00:00:54,719
for me immediately distinguishes the

32
00:00:54,719 --> 00:00:55,520
difference between

33
00:00:55,520 --> 00:00:58,239
my regular desktop working environment

34
00:00:58,239 --> 00:00:58,879
versus

35
00:00:58,879 --> 00:01:01,520
my virtual machine that i have while

36
00:01:01,520 --> 00:01:02,239
malware

37
00:01:02,239 --> 00:01:03,840
right this stuff is difficult enough to

38
00:01:03,840 --> 00:01:05,360
uh to keep control of

39
00:01:05,360 --> 00:01:08,799
without yeah without without endangering

40
00:01:08,799 --> 00:01:09,520
uh yeah

41
00:01:09,520 --> 00:01:10,960
creating all kinds of problems let's

42
00:01:10,960 --> 00:01:12,640
just go there so what are we going to

43
00:01:12,640 --> 00:01:14,240
cover today all right so so we're doing

44
00:01:14,240 --> 00:01:16,240
a very basic intro

45
00:01:16,240 --> 00:01:18,560
to now we're reversing i don't have time

46
00:01:18,560 --> 00:01:19,439
to cover everything

47
00:01:19,439 --> 00:01:20,960
obviously right so a couple of things

48
00:01:20,960 --> 00:01:22,479
we're going to we're going to do here

49
00:01:22,479 --> 00:01:24,640
very very abbreviated uh very very

50
00:01:24,640 --> 00:01:26,240
abbreviated course uh very

51
00:01:26,240 --> 00:01:28,159
abbreviated kind of session we're going

52
00:01:28,159 --> 00:01:30,880
to walk through just a couple of high

53
00:01:30,880 --> 00:01:33,200
points i want to really wet your what's

54
00:01:33,200 --> 00:01:34,799
your appetite for this right

55
00:01:34,799 --> 00:01:36,880
what i'm not going to do is i'm not

56
00:01:36,880 --> 00:01:38,560
going to do the standard trope of

57
00:01:38,560 --> 00:01:41,840
let's run red shot and uh procmon

58
00:01:41,840 --> 00:01:44,079
and maybe process hacker i love doing

59
00:01:44,079 --> 00:01:44,960
this right but

60
00:01:44,960 --> 00:01:46,479
but i feel like we want to go a little

61
00:01:46,479 --> 00:01:48,240
bit beyond maybe not a little bit let's

62
00:01:48,240 --> 00:01:48,560
go

63
00:01:48,560 --> 00:01:52,399
just beyond where we would ordinarily

64
00:01:52,399 --> 00:01:55,840
stop with a sandbox type tool right so

65
00:01:55,840 --> 00:01:57,119
sandbox type tool

66
00:01:57,119 --> 00:01:59,439
will detonate the malware and we'll run

67
00:01:59,439 --> 00:02:00,719
it under a number of conditions now

68
00:02:00,719 --> 00:02:02,320
that's not to say that we should never

69
00:02:02,320 --> 00:02:05,040
need redshot and procmod and those other

70
00:02:05,040 --> 00:02:06,960
tools but i prefer to get something a

71
00:02:06,960 --> 00:02:08,720
little bit more a little bit more in

72
00:02:08,720 --> 00:02:09,280
depth i

73
00:02:09,280 --> 00:02:12,080
prefer to find some things that maybe my

74
00:02:12,080 --> 00:02:12,560
uh

75
00:02:12,560 --> 00:02:15,520
maybe my sandbox tool wouldn't otherwise

76
00:02:15,520 --> 00:02:16,879
wouldn't otherwise pick up or wouldn't

77
00:02:16,879 --> 00:02:17,760
otherwise see

78
00:02:17,760 --> 00:02:21,840
right um so okay um so uh let's uh let's

79
00:02:21,840 --> 00:02:23,440
get it on then right uh first thing

80
00:02:23,440 --> 00:02:24,879
we're gonna do here and by the way

81
00:02:24,879 --> 00:02:27,520
uh you'll be provided a download link

82
00:02:27,520 --> 00:02:29,040
for these uh download link for these

83
00:02:29,040 --> 00:02:29,760
samples

84
00:02:29,760 --> 00:02:32,720
uh sample one two three and four now i

85
00:02:32,720 --> 00:02:34,000
have to tell you that one of these

86
00:02:34,000 --> 00:02:35,120
samples is one

87
00:02:35,120 --> 00:02:37,599
that was passed to me i'm not convinced

88
00:02:37,599 --> 00:02:39,040
that it's malicious right now

89
00:02:39,040 --> 00:02:41,519
um and i'll mention which one it is as

90
00:02:41,519 --> 00:02:43,519
we as we begin some of our analysis

91
00:02:43,519 --> 00:02:45,360
um but but i'll tell you that's actually

92
00:02:45,360 --> 00:02:47,360
a a very common thing that we deal with

93
00:02:47,360 --> 00:02:47,760
right

94
00:02:47,760 --> 00:02:49,760
um you know when we begin threat hunting

95
00:02:49,760 --> 00:02:51,200
or doing incident response

96
00:02:51,200 --> 00:02:53,200
uh very often things are kicked to us uh

97
00:02:53,200 --> 00:02:54,640
passed to us as malware reverse

98
00:02:54,640 --> 00:02:56,560
engineers that may or may not be malware

99
00:02:56,560 --> 00:02:58,480
right and very frequently uh they may or

100
00:02:58,480 --> 00:02:59,680
may not ends up being

101
00:02:59,680 --> 00:03:02,159
not it's just not malware right so so

102
00:03:02,159 --> 00:03:02,720
how do we

103
00:03:02,720 --> 00:03:04,400
how do we identify that well let's let's

104
00:03:04,400 --> 00:03:06,239
start out by by walking through

105
00:03:06,239 --> 00:03:08,480
uh by walking through some of uh some of

106
00:03:08,480 --> 00:03:09,760
those techniques now

107
00:03:09,760 --> 00:03:12,159
before we do any of that right i would

108
00:03:12,159 --> 00:03:13,040
be remiss

109
00:03:13,040 --> 00:03:15,599
not to mention that don't do this on

110
00:03:15,599 --> 00:03:17,120
your host machine i started by talking

111
00:03:17,120 --> 00:03:18,560
about the orange i was like man use

112
00:03:18,560 --> 00:03:20,000
orange right and i do or

113
00:03:20,000 --> 00:03:21,920
or something that's distinguishable to

114
00:03:21,920 --> 00:03:23,760
you my regular desktop doesn't look this

115
00:03:23,760 --> 00:03:24,080
way

116
00:03:24,080 --> 00:03:26,560
it's got the nice rendition logo and

117
00:03:26,560 --> 00:03:28,000
that's that's my regular desktop

118
00:03:28,000 --> 00:03:29,920
this is not this is very distinct from

119
00:03:29,920 --> 00:03:31,760
that and this helps me

120
00:03:31,760 --> 00:03:34,799
avoid not uh dragging and dropping

121
00:03:34,799 --> 00:03:36,879
malware onto my analysis

122
00:03:36,879 --> 00:03:39,680
or sorry onto my my host machine now uh

123
00:03:39,680 --> 00:03:41,120
look best practices

124
00:03:41,120 --> 00:03:43,280
uh would indicate that you should always

125
00:03:43,280 --> 00:03:44,480
study malware

126
00:03:44,480 --> 00:03:46,319
in a uh you know basically on a

127
00:03:46,319 --> 00:03:47,760
dedicated host machine

128
00:03:47,760 --> 00:03:49,120
uh you know that you're because of

129
00:03:49,120 --> 00:03:50,799
course we have hypervisor escapes

130
00:03:50,799 --> 00:03:52,159
i'll just mention your hypervisor

131
00:03:52,159 --> 00:03:54,000
escapes are exceedingly rare

132
00:03:54,000 --> 00:03:56,239
um i've looked at this malware or

133
00:03:56,239 --> 00:03:57,599
suspected malware before

134
00:03:57,599 --> 00:03:59,120
i'm convincing them as a hypervisor

135
00:03:59,120 --> 00:04:01,360
escape i feel pretty confident i stay

136
00:04:01,360 --> 00:04:01,920
convinced

137
00:04:01,920 --> 00:04:04,080
i feel confident run this at your own

138
00:04:04,080 --> 00:04:04,959
risk

139
00:04:04,959 --> 00:04:07,040
again best practices state that to

140
00:04:07,040 --> 00:04:08,480
protect against a hypervisor escape this

141
00:04:08,480 --> 00:04:10,560
should be a dedicated host

142
00:04:10,560 --> 00:04:12,959
for looking at malware second thing i

143
00:04:12,959 --> 00:04:14,799
have a clean snapshot so the state that

144
00:04:14,799 --> 00:04:16,399
we're in now i have a snapshot that i

145
00:04:16,399 --> 00:04:17,440
can revert back to

146
00:04:17,440 --> 00:04:19,358
if you don't have vmware workstation pro

147
00:04:19,358 --> 00:04:20,880
um i highly recommend that

148
00:04:20,880 --> 00:04:23,120
uh virtualbox a lot of people talk all

149
00:04:23,120 --> 00:04:24,080
about virtualbox

150
00:04:24,080 --> 00:04:25,600
like man you do everything you can with

151
00:04:25,600 --> 00:04:28,000
vmware listen um you know i i've been

152
00:04:28,000 --> 00:04:29,199
around for a while

153
00:04:29,199 --> 00:04:30,400
i've done a lot of this stuff in the

154
00:04:30,400 --> 00:04:31,759
past and i'm just going to tell you i've

155
00:04:31,759 --> 00:04:33,440
never been impressed with virtualbox

156
00:04:33,440 --> 00:04:34,080
right

157
00:04:34,080 --> 00:04:35,919
for for lots and lots of reasons but the

158
00:04:35,919 --> 00:04:37,199
tldr here is

159
00:04:37,199 --> 00:04:39,040
now we're reversing as hard enough as it

160
00:04:39,040 --> 00:04:41,360
is before i get into

161
00:04:41,360 --> 00:04:43,520
dealing with uh you know dealing with

162
00:04:43,520 --> 00:04:45,280
weird virtualization problems

163
00:04:45,280 --> 00:04:47,680
vmware has my back uh virtualbox has

164
00:04:47,680 --> 00:04:49,440
less than a single fte

165
00:04:49,440 --> 00:04:50,720
working at numerous security

166
00:04:50,720 --> 00:04:52,560
vulnerabilities that are open and i'll

167
00:04:52,560 --> 00:04:53,520
just leave it there

168
00:04:53,520 --> 00:04:55,600
anywho call that for whatever it's worth

169
00:04:55,600 --> 00:04:57,680
i've gone to vmware workstation pro more

170
00:04:57,680 --> 00:04:59,759
for usability honestly than security

171
00:04:59,759 --> 00:05:02,160
um but uh also here this is a windows 10

172
00:05:02,160 --> 00:05:03,280
uh x64

173
00:05:03,280 --> 00:05:05,840
virtual machine um i have it set on my

174
00:05:05,840 --> 00:05:07,039
trial mode don't really care

175
00:05:07,039 --> 00:05:08,960
where the other um but uh you know as

176
00:05:08,960 --> 00:05:10,960
far as that goes i don't need a

177
00:05:10,960 --> 00:05:13,759
uh a a licensed i say a license

178
00:05:13,759 --> 00:05:15,199
obviously if i'm using it for an

179
00:05:15,199 --> 00:05:16,479
enterprise evaluation

180
00:05:16,479 --> 00:05:18,720
i'm of course evaluating the stability

181
00:05:18,720 --> 00:05:20,240
of the software my point here is you

182
00:05:20,240 --> 00:05:21,039
don't need a

183
00:05:21,039 --> 00:05:24,320
a fully licensed vm to do to do any

184
00:05:24,320 --> 00:05:26,160
malware reversing you can certainly

185
00:05:26,160 --> 00:05:28,720
use one of your trial vms or a an

186
00:05:28,720 --> 00:05:29,919
enterprise trial

187
00:05:29,919 --> 00:05:32,479
to do so all right um so the final thing

188
00:05:32,479 --> 00:05:33,600
i'm going to mention here

189
00:05:33,600 --> 00:05:36,720
again is certainly practice good drag

190
00:05:36,720 --> 00:05:38,560
and drop discipline have a good snapshot

191
00:05:38,560 --> 00:05:40,560
practice good drag and drop discipline

192
00:05:40,560 --> 00:05:42,479
there are malware reversers who have

193
00:05:42,479 --> 00:05:44,240
accidentally dragged and dropped

194
00:05:44,240 --> 00:05:45,759
drag dropped and executed malware on

195
00:05:45,759 --> 00:05:47,440
their host machines and

196
00:05:47,440 --> 00:05:49,039
there are those that haven't done it yet

197
00:05:49,039 --> 00:05:50,800
right so i'm just going to go ahead and

198
00:05:50,800 --> 00:05:51,680
tell you that

199
00:05:51,680 --> 00:05:53,600
in most cases uh people will go ahead

200
00:05:53,600 --> 00:05:55,039
and do this eventually

201
00:05:55,039 --> 00:05:57,759
anyway um so please practice good drag

202
00:05:57,759 --> 00:05:58,960
and drop discipline i haven't done it

203
00:05:58,960 --> 00:05:59,520
for this

204
00:05:59,520 --> 00:06:00,880
um but i will tell you that one of my

205
00:06:00,880 --> 00:06:03,039
secret weapons in avoiding this and it's

206
00:06:03,039 --> 00:06:04,240
something that i do

207
00:06:04,240 --> 00:06:06,800
that i do in my most of my classes that

208
00:06:06,800 --> 00:06:07,360
i teach

209
00:06:07,360 --> 00:06:09,440
is i will actually change uh if you note

210
00:06:09,440 --> 00:06:11,120
here as we go into the sample

211
00:06:11,120 --> 00:06:13,840
i'll change to ex dollar sign right now

212
00:06:13,840 --> 00:06:15,039
the reason that i do this is you'll

213
00:06:15,039 --> 00:06:16,960
notice the icon goes away all right now

214
00:06:16,960 --> 00:06:18,880
what why is that well the actual icon

215
00:06:18,880 --> 00:06:20,479
that we have there if there's an icon at

216
00:06:20,479 --> 00:06:22,400
all is embedded in the resources section

217
00:06:22,400 --> 00:06:24,400
and if the file extension isn't an

218
00:06:24,400 --> 00:06:26,080
executable file extension even though it

219
00:06:26,080 --> 00:06:27,520
is an executable file we haven't changed

220
00:06:27,520 --> 00:06:28,720
the file itself

221
00:06:28,720 --> 00:06:31,360
we've only changed the extension if the

222
00:06:31,360 --> 00:06:32,000
file

223
00:06:32,000 --> 00:06:35,120
is a executable extension and then it'll

224
00:06:35,120 --> 00:06:36,080
go ahead and process

225
00:06:36,080 --> 00:06:38,160
it explorer we'll go ahead and process

226
00:06:38,160 --> 00:06:40,400
the resources section grab the icon

227
00:06:40,400 --> 00:06:42,319
and go ahead and populate it there we

228
00:06:42,319 --> 00:06:43,840
don't have that here right so okay so

229
00:06:43,840 --> 00:06:45,520
i'm going to take that off there

230
00:06:45,520 --> 00:06:48,000
sample exe but again just know that

231
00:06:48,000 --> 00:06:49,759
that's uh that's a way that i can avoid

232
00:06:49,759 --> 00:06:50,160
double

233
00:06:50,160 --> 00:06:51,360
or worrying about double click because

234
00:06:51,360 --> 00:06:53,599
there's no double click handle handler

235
00:06:53,599 --> 00:06:54,800
for ex dollar sign

236
00:06:54,800 --> 00:06:57,039
whereas the windows loader the the

237
00:06:57,039 --> 00:06:58,319
basically

238
00:06:58,319 --> 00:07:01,840
the setup there is zx or sorry the exe

239
00:07:01,840 --> 00:07:03,120
windows loader is going to go ahead and

240
00:07:03,120 --> 00:07:04,800
take that and run with it right so it's

241
00:07:04,800 --> 00:07:06,000
okay the first thing that we want to do

242
00:07:06,000 --> 00:07:06,880
here is do some

243
00:07:06,880 --> 00:07:09,919
basic basic metadata analysis and i'll

244
00:07:09,919 --> 00:07:11,360
tell you that one of my favorite tools

245
00:07:11,360 --> 00:07:11,919
for this

246
00:07:11,919 --> 00:07:13,680
is pe studio i'm also going to show you

247
00:07:13,680 --> 00:07:15,840
cff explorer but these are two things

248
00:07:15,840 --> 00:07:17,520
that i do before i start

249
00:07:17,520 --> 00:07:19,759
any other analysis now i also want to be

250
00:07:19,759 --> 00:07:21,120
very clear here again

251
00:07:21,120 --> 00:07:23,520
i'm not covering soup to nuts malware

252
00:07:23,520 --> 00:07:24,960
reversing right this is a

253
00:07:24,960 --> 00:07:27,440
very short class this is an intro and

254
00:07:27,440 --> 00:07:28,720
hopefully is going to give you some

255
00:07:28,720 --> 00:07:30,880
ideas for some actionable things

256
00:07:30,880 --> 00:07:32,479
that you can find so what i'm going to

257
00:07:32,479 --> 00:07:34,039
do here first i'm going to drag

258
00:07:34,039 --> 00:07:35,199
sample1.exe

259
00:07:35,199 --> 00:07:38,319
onto pe studio pd studio

260
00:07:38,319 --> 00:07:41,280
is kind of my expert knowledge system

261
00:07:41,280 --> 00:07:42,479
the way i describe it is

262
00:07:42,479 --> 00:07:45,199
my expert knowledge system uh for uh

263
00:07:45,199 --> 00:07:46,080
basically for

264
00:07:46,080 --> 00:07:48,400
malware reversing now you'll notice here

265
00:07:48,400 --> 00:07:50,000
that it has a virus total score that's

266
00:07:50,000 --> 00:07:51,360
because i'm online

267
00:07:51,360 --> 00:07:53,120
and it is indeed querying antivirus

268
00:07:53,120 --> 00:07:54,800
total if this is a security issue for

269
00:07:54,800 --> 00:07:56,400
you or an opposition either disconnect

270
00:07:56,400 --> 00:07:57,759
your vm

271
00:07:57,759 --> 00:08:00,720
from the net or you know and honestly

272
00:08:00,720 --> 00:08:02,560
for best reversing when you go live

273
00:08:02,560 --> 00:08:03,919
analysis should probably disconnect this

274
00:08:03,919 --> 00:08:05,440
from the net because you're making

275
00:08:05,440 --> 00:08:07,440
calls out but again if there's an opsec

276
00:08:07,440 --> 00:08:09,039
issue here by all means

277
00:08:09,039 --> 00:08:10,720
certainly disable that feature or you

278
00:08:10,720 --> 00:08:12,400
can go or sorry disable your network or

279
00:08:12,400 --> 00:08:13,759
you can go in

280
00:08:13,759 --> 00:08:15,680
and i feel like there's a config box

281
00:08:15,680 --> 00:08:17,520
someplace where we can change that i

282
00:08:17,520 --> 00:08:18,879
just don't remember right off the uh

283
00:08:18,879 --> 00:08:20,800
right off the bat what that is anyway

284
00:08:20,800 --> 00:08:22,639
so it's going to go out and take a look

285
00:08:22,639 --> 00:08:25,039
at basically take a look at what

286
00:08:25,039 --> 00:08:27,360
what's there what's not now of course

287
00:08:27,360 --> 00:08:28,400
this is going to take a second to

288
00:08:28,400 --> 00:08:28,960
process

289
00:08:28,960 --> 00:08:31,680
uh but as it does i want to look at i

290
00:08:31,680 --> 00:08:33,039
want to look at a couple of things here

291
00:08:33,039 --> 00:08:33,519
all right

292
00:08:33,519 --> 00:08:35,440
um so a couple of things right off the

293
00:08:35,440 --> 00:08:36,958
bat here one of the things i like to

294
00:08:36,958 --> 00:08:38,479
look at here is what is the compiler

295
00:08:38,479 --> 00:08:40,000
timestamp right now this

296
00:08:40,000 --> 00:08:41,599
is this may or may not be super

297
00:08:41,599 --> 00:08:43,519
interesting to you um one of the things

298
00:08:43,519 --> 00:08:43,919
that

299
00:08:43,919 --> 00:08:45,920
that we find is that some attackers will

300
00:08:45,920 --> 00:08:47,040
change the

301
00:08:47,040 --> 00:08:48,800
back date the time stamp you may have

302
00:08:48,800 --> 00:08:50,720
maybe familiar with time stomping

303
00:08:50,720 --> 00:08:52,320
they may backdate the time stamp on the

304
00:08:52,320 --> 00:08:54,000
system based on the file

305
00:08:54,000 --> 00:08:55,519
system but then they leave the compiler

306
00:08:55,519 --> 00:08:56,800
timestamp well this is an embedded

307
00:08:56,800 --> 00:08:57,680
timestamp

308
00:08:57,680 --> 00:08:59,760
in the executable we also occasionally

309
00:08:59,760 --> 00:09:01,440
see uh what we might call

310
00:09:01,440 --> 00:09:04,000
vanity time stamps in the compilation

311
00:09:04,000 --> 00:09:04,959
time stamp and

312
00:09:04,959 --> 00:09:07,200
and a vanity time stamp an example of a

313
00:09:07,200 --> 00:09:09,200
vanity time stamp in action

314
00:09:09,200 --> 00:09:12,240
would be the ukraine russia lights out

315
00:09:12,240 --> 00:09:14,000
attack right so when ukraine

316
00:09:14,000 --> 00:09:16,000
uh or sorry when russia took ukraine

317
00:09:16,000 --> 00:09:17,519
took ukraine offline

318
00:09:17,519 --> 00:09:19,440
with the lights out attack they actually

319
00:09:19,440 --> 00:09:21,040
used a custom

320
00:09:21,040 --> 00:09:24,320
a custom goodness time stamp there

321
00:09:24,320 --> 00:09:25,760
i'll tell you i i didn't really make a

322
00:09:25,760 --> 00:09:28,399
lot of it right i i did some analysis um

323
00:09:28,399 --> 00:09:29,760
i may have been the first to publish on

324
00:09:29,760 --> 00:09:31,200
that one in particular i'm not i'm not

325
00:09:31,200 --> 00:09:32,320
sure if i was

326
00:09:32,320 --> 00:09:33,360
i haven't seen anyone else that

327
00:09:33,360 --> 00:09:35,600
published on it before but in any case

328
00:09:35,600 --> 00:09:37,200
i'll just mention there that you know

329
00:09:37,200 --> 00:09:38,160
that was one of the things i found

330
00:09:38,160 --> 00:09:39,440
really interesting about it is they had

331
00:09:39,440 --> 00:09:40,320
intentionally

332
00:09:40,320 --> 00:09:42,560
um backdated the timestamp and and

333
00:09:42,560 --> 00:09:44,160
backdated might be an interesting word

334
00:09:44,160 --> 00:09:46,640
there i i might even go so far as to say

335
00:09:46,640 --> 00:09:48,320
rather than backdated

336
00:09:48,320 --> 00:09:51,680
maybe the way to say would be that uh

337
00:09:51,680 --> 00:09:54,000
maybe the way to say uh would be that

338
00:09:54,000 --> 00:09:55,040
instead of backdated

339
00:09:55,040 --> 00:09:57,600
um they modified specifically and in

340
00:09:57,600 --> 00:09:59,200
this case it was backdated but it was

341
00:09:59,200 --> 00:10:00,000
modified

342
00:10:00,000 --> 00:10:01,519
uh and then we step back and say okay

343
00:10:01,519 --> 00:10:03,519
well why what what is significant about

344
00:10:03,519 --> 00:10:04,240
this date

345
00:10:04,240 --> 00:10:05,920
um and as we did a little bit more

346
00:10:05,920 --> 00:10:08,480
analysis um we found out that indeed

347
00:10:08,480 --> 00:10:10,720
this was uh the date that was used um

348
00:10:10,720 --> 00:10:12,000
was actually a date

349
00:10:12,000 --> 00:10:14,800
when some albanians uh were fighting

350
00:10:14,800 --> 00:10:15,440
some uh

351
00:10:15,440 --> 00:10:17,200
basically an albanian security guard was

352
00:10:17,200 --> 00:10:19,760
killed in uh basically protecting a

353
00:10:19,760 --> 00:10:22,480
a substation power substation right so

354
00:10:22,480 --> 00:10:24,000
you tie that with like lights out

355
00:10:24,000 --> 00:10:25,519
and it was kind of sending we think

356
00:10:25,519 --> 00:10:27,920
maybe sending a a coded message it could

357
00:10:27,920 --> 00:10:29,200
be that i mean it could be any a number

358
00:10:29,200 --> 00:10:31,120
of other things right there's only 365

359
00:10:31,120 --> 00:10:32,079
days in a year

360
00:10:32,079 --> 00:10:33,600
um and of course if we're taking the

361
00:10:33,600 --> 00:10:34,959
year out right that creates more

362
00:10:34,959 --> 00:10:35,920
collision attacks

363
00:10:35,920 --> 00:10:38,000
in any given day though lots of stuff

364
00:10:38,000 --> 00:10:39,360
happens that may or may not be

365
00:10:39,360 --> 00:10:40,720
significant to to us

366
00:10:40,720 --> 00:10:42,320
um you know did the intended target get

367
00:10:42,320 --> 00:10:44,079
the message or or was it even a message

368
00:10:44,079 --> 00:10:45,760
was just random and i'm inferring

369
00:10:45,760 --> 00:10:46,720
something for nothing

370
00:10:46,720 --> 00:10:49,120
hard to say bottom line i'll mention

371
00:10:49,120 --> 00:10:50,399
that this is a useful

372
00:10:50,399 --> 00:10:52,640
uh we find this to be a useful uh useful

373
00:10:52,640 --> 00:10:54,480
tool uh to use

374
00:10:54,480 --> 00:10:57,920
sometimes again i'll mention that we

375
00:10:57,920 --> 00:10:59,519
sometimes i'll mention that as we're

376
00:10:59,519 --> 00:11:01,519
performing these uh performing these

377
00:11:01,519 --> 00:11:02,399
analyses

378
00:11:02,399 --> 00:11:04,480
um with the uh basically with time stamp

379
00:11:04,480 --> 00:11:06,079
analysis uh that we'll find

380
00:11:06,079 --> 00:11:08,320
that a particular post post compilation

381
00:11:08,320 --> 00:11:09,200
tool is

382
00:11:09,200 --> 00:11:10,640
modifying the time stamp so it's

383
00:11:10,640 --> 00:11:11,920
something static right we've seen that

384
00:11:11,920 --> 00:11:12,480
in the past

385
00:11:12,480 --> 00:11:13,839
in any case take a look at this right

386
00:11:13,839 --> 00:11:15,279
it's something a lot of tools don't pull

387
00:11:15,279 --> 00:11:16,640
out and it's something that you probably

388
00:11:16,640 --> 00:11:17,680
want to see

389
00:11:17,680 --> 00:11:19,120
now a couple other things that i want to

390
00:11:19,120 --> 00:11:20,640
take a look at here right off the bat we

391
00:11:20,640 --> 00:11:22,320
have this indicators tab now

392
00:11:22,320 --> 00:11:24,480
some folks will say hey why don't we

393
00:11:24,480 --> 00:11:26,320
look at these indicators what are these

394
00:11:26,320 --> 00:11:28,640
um you know how important are these and

395
00:11:28,640 --> 00:11:30,240
and look the reality here

396
00:11:30,240 --> 00:11:32,880
is these are purely expert knowledge

397
00:11:32,880 --> 00:11:33,680
pieces that

398
00:11:33,680 --> 00:11:36,560
the creator of pe studio has said hey

399
00:11:36,560 --> 00:11:38,480
look uh this is the kind of thing i look

400
00:11:38,480 --> 00:11:39,519
for so for instance here

401
00:11:39,519 --> 00:11:41,920
the file references url pattern the url

402
00:11:41,920 --> 00:11:44,079
is 127.001 right

403
00:11:44,079 --> 00:11:46,480
we've seen uh that basically you may

404
00:11:46,480 --> 00:11:47,440
have noticed as

405
00:11:47,440 --> 00:11:50,639
we went in uh to the executable a second

406
00:11:50,639 --> 00:11:52,000
here

407
00:11:52,000 --> 00:11:53,600
so just went into the executable you

408
00:11:53,600 --> 00:11:55,360
might notice a little uac

409
00:11:55,360 --> 00:11:57,519
check mark there i mean that uac check

410
00:11:57,519 --> 00:11:59,360
mark of course means that the manifest

411
00:11:59,360 --> 00:12:01,120
says go run that as administrator

412
00:12:01,120 --> 00:12:02,880
um and you see indeed that there right

413
00:12:02,880 --> 00:12:04,079
and that's another one of those spots

414
00:12:04,079 --> 00:12:04,480
where

415
00:12:04,480 --> 00:12:06,480
is that necessarily malware does it mean

416
00:12:06,480 --> 00:12:07,519
it's malware no

417
00:12:07,519 --> 00:12:09,200
none of these mean that any of this is

418
00:12:09,200 --> 00:12:10,959
malware what it does mean

419
00:12:10,959 --> 00:12:12,959
is that these are things that are very

420
00:12:12,959 --> 00:12:14,639
typically seen in malware and the way

421
00:12:14,639 --> 00:12:15,920
that i like to

422
00:12:15,920 --> 00:12:17,920
note these or the way that i word these

423
00:12:17,920 --> 00:12:20,240
is i say hey these are my malware gang

424
00:12:20,240 --> 00:12:20,800
signs

425
00:12:20,800 --> 00:12:23,200
right the idea there being that a single

426
00:12:23,200 --> 00:12:25,519
one of these isn't going to make me go

427
00:12:25,519 --> 00:12:27,600
oh my gosh right kind of thing but but

428
00:12:27,600 --> 00:12:29,519
enough of them together

429
00:12:29,519 --> 00:12:31,120
are going to convince me that indeed

430
00:12:31,120 --> 00:12:32,720
something is uh something is a miss

431
00:12:32,720 --> 00:12:34,560
the way that i kind of word this is you

432
00:12:34,560 --> 00:12:36,160
know the way that i explain this is

433
00:12:36,160 --> 00:12:37,519
sharing an experience i grew up in the

434
00:12:37,519 --> 00:12:40,079
country largely in the country um and

435
00:12:40,079 --> 00:12:42,160
backwoods of virginia um and after

436
00:12:42,160 --> 00:12:44,560
joining the army the army sent me tdy

437
00:12:44,560 --> 00:12:47,600
out to los angeles um i'm a whopping i

438
00:12:47,600 --> 00:12:49,600
believe it was 21 years old at the time

439
00:12:49,600 --> 00:12:50,880
22 something like that

440
00:12:50,880 --> 00:12:53,519
i land in los angeles and like a good

441
00:12:53,519 --> 00:12:55,360
farm boy i'm wearing a red bandana i had

442
00:12:55,360 --> 00:12:56,639
to keep the sweat out of my eyes

443
00:12:56,639 --> 00:12:58,240
a gentleman kind of stopped me in the

444
00:12:58,240 --> 00:13:00,240
taxi line and said hey now that does not

445
00:13:00,240 --> 00:13:02,079
mean what you think it means here

446
00:13:02,079 --> 00:13:03,920
i can tell that you probably are

447
00:13:03,920 --> 00:13:05,839
ignorant of uh you know that whole red

448
00:13:05,839 --> 00:13:07,040
bandana thing now mind you

449
00:13:07,040 --> 00:13:08,880
i mean as i talk about this too this is

450
00:13:08,880 --> 00:13:10,160
uh this is in the 90s

451
00:13:10,160 --> 00:13:12,079
i'm in los angeles right so los angeles

452
00:13:12,079 --> 00:13:13,519
very different place today than it was

453
00:13:13,519 --> 00:13:14,160
then

454
00:13:14,160 --> 00:13:16,240
and i'll just leave it there alas the

455
00:13:16,240 --> 00:13:17,920
reason i suspect he felt comfortable

456
00:13:17,920 --> 00:13:19,360
coming up and saying hey that's not what

457
00:13:19,360 --> 00:13:20,079
you think it is

458
00:13:20,079 --> 00:13:23,120
um is because i only had one sign as as

459
00:13:23,120 --> 00:13:25,120
it were right um if i had other things

460
00:13:25,120 --> 00:13:26,560
that might typically be equated with

461
00:13:26,560 --> 00:13:27,839
that type of behavior

462
00:13:27,839 --> 00:13:30,000
maybe a couple of teardrop tattoos uh

463
00:13:30,000 --> 00:13:30,959
you know on on

464
00:13:30,959 --> 00:13:33,440
on my face maybe uh you know some other

465
00:13:33,440 --> 00:13:35,360
uh some other gang paraphernalia

466
00:13:35,360 --> 00:13:37,839
um you know and some maybe uh you know

467
00:13:37,839 --> 00:13:39,120
you can see that i've got a

468
00:13:39,120 --> 00:13:40,720
pistol stuffed into my sideband those

469
00:13:40,720 --> 00:13:42,000
are all things together that

470
00:13:42,000 --> 00:13:42,880
individually

471
00:13:42,880 --> 00:13:44,160
might not mean a lot although the

472
00:13:44,160 --> 00:13:46,000
teardrop tattoos let's be fair pretty

473
00:13:46,000 --> 00:13:46,560
damning

474
00:13:46,560 --> 00:13:48,959
uh you know combine that all together

475
00:13:48,959 --> 00:13:51,440
and maybe then we now have enough to say

476
00:13:51,440 --> 00:13:52,160
hey

477
00:13:52,160 --> 00:13:54,639
that now together is suspicious enough

478
00:13:54,639 --> 00:13:56,320
that we want to take a deeper look at

479
00:13:56,320 --> 00:13:58,079
that's really what these iocs are these

480
00:13:58,079 --> 00:13:59,519
indicators now take these for whatever

481
00:13:59,519 --> 00:14:00,240
they're worth

482
00:14:00,240 --> 00:14:02,000
if you're brand new to malware i highly

483
00:14:02,000 --> 00:14:04,160
recommend you take a look at pe studio

484
00:14:04,160 --> 00:14:06,240
and kind of take a look and say why now

485
00:14:06,240 --> 00:14:07,440
you're going to use google at this point

486
00:14:07,440 --> 00:14:07,839
and say

487
00:14:07,839 --> 00:14:09,839
why do they identify these things as

488
00:14:09,839 --> 00:14:10,959
potentially malicious

489
00:14:10,959 --> 00:14:12,560
this one's a great tab to take a look at

490
00:14:12,560 --> 00:14:14,160
our libraries right i want to talk about

491
00:14:14,160 --> 00:14:15,360
this for just a minute

492
00:14:15,360 --> 00:14:17,839
before we continue on each one of these

493
00:14:17,839 --> 00:14:18,959
dlls

494
00:14:18,959 --> 00:14:20,639
is imported by the malware each one of

495
00:14:20,639 --> 00:14:22,560
these dlls does

496
00:14:22,560 --> 00:14:24,880
something for the malware provides some

497
00:14:24,880 --> 00:14:27,279
functionality from the operating system

498
00:14:27,279 --> 00:14:29,199
to the to the malware or should i say to

499
00:14:29,199 --> 00:14:30,480
the executable right because we've

500
00:14:30,480 --> 00:14:31,680
already determined that

501
00:14:31,680 --> 00:14:33,920
and identified that this may indeed not

502
00:14:33,920 --> 00:14:35,600
be uh not be malware right now

503
00:14:35,600 --> 00:14:36,959
this one is i'll just go ahead and throw

504
00:14:36,959 --> 00:14:39,199
it out there uh you can see 37 out of 70

505
00:14:39,199 --> 00:14:39,519
of

506
00:14:39,519 --> 00:14:41,040
you know look at this negatively in

507
00:14:41,040 --> 00:14:42,880
virus total and uh for whatever it's

508
00:14:42,880 --> 00:14:44,560
worth it just it just is malicious

509
00:14:44,560 --> 00:14:47,440
um that said um why are some of these in

510
00:14:47,440 --> 00:14:48,880
a blacklisted uh

511
00:14:48,880 --> 00:14:50,720
or block listed i think is is kind of

512
00:14:50,720 --> 00:14:52,240
becoming the more the more appropriate

513
00:14:52,240 --> 00:14:52,959
term there

514
00:14:52,959 --> 00:14:55,120
but why are these uh block listed right

515
00:14:55,120 --> 00:14:57,279
uh why are these identified as

516
00:14:57,279 --> 00:14:59,839
as potentially bad now look all of these

517
00:14:59,839 --> 00:15:01,040
each one of these is a

518
00:15:01,040 --> 00:15:03,279
windows dll right so i have to throw out

519
00:15:03,279 --> 00:15:04,079
here and say

520
00:15:04,079 --> 00:15:07,199
it's a windows dll it must there has to

521
00:15:07,199 --> 00:15:07,920
be

522
00:15:07,920 --> 00:15:09,680
we can't just say oh my gosh it's

523
00:15:09,680 --> 00:15:12,320
negative it's a bad dll it's a windows

524
00:15:12,320 --> 00:15:12,880
dealer

525
00:15:12,880 --> 00:15:14,560
the reason they throw these out here is

526
00:15:14,560 --> 00:15:16,560
these are very frequently seen being

527
00:15:16,560 --> 00:15:17,600
used by malware

528
00:15:17,600 --> 00:15:18,880
one important one that i want to mention

529
00:15:18,880 --> 00:15:20,880
here are actually two important ones ws2

530
00:15:20,880 --> 00:15:23,519
underscore 32.dll is winsock all right

531
00:15:23,519 --> 00:15:24,959
so the winsock dll

532
00:15:24,959 --> 00:15:26,880
this is what provides us low level

533
00:15:26,880 --> 00:15:29,199
socket access right so if i wanted to

534
00:15:29,199 --> 00:15:32,480
uh do any tcp or udp i would use

535
00:15:32,480 --> 00:15:37,360
winsock ws2 ws2 underscore 32.dll

536
00:15:37,360 --> 00:15:40,320
to perform that to perform that action

537
00:15:40,320 --> 00:15:40,880
now

538
00:15:40,880 --> 00:15:42,480
you can imagine most malware is command

539
00:15:42,480 --> 00:15:44,560
and control hence most malware needs

540
00:15:44,560 --> 00:15:45,199
networking

541
00:15:45,199 --> 00:15:48,320
um hence ws2 underscore 32.dll

542
00:15:48,320 --> 00:15:51,600
is one of the interesting dlls that we

543
00:15:51,600 --> 00:15:52,160
should

544
00:15:52,160 --> 00:15:54,160
at least be interested in taking a look

545
00:15:54,160 --> 00:15:55,680
at right

546
00:15:55,680 --> 00:15:59,360
um okay so

547
00:15:59,360 --> 00:16:01,920
what next when inet dot dll right um we

548
00:16:01,920 --> 00:16:03,600
ninenet dot dll actually

549
00:16:03,600 --> 00:16:05,839
it provides a super set of the

550
00:16:05,839 --> 00:16:07,839
functionality uh maybe supers that's the

551
00:16:07,839 --> 00:16:08,720
wrong way to word it

552
00:16:08,720 --> 00:16:12,399
more advanced functionality than ws200

553
00:16:12,399 --> 00:16:14,959
32. dll now anytime you see when i not

554
00:16:14,959 --> 00:16:16,320
loaded you're going to see ws2

555
00:16:16,320 --> 00:16:18,959
underscore 32 winsock loaded as well

556
00:16:18,959 --> 00:16:22,480
when inet actually provides http https

557
00:16:22,480 --> 00:16:25,759
ftp and gopher right yes gopher believe

558
00:16:25,759 --> 00:16:26,399
it or not

559
00:16:26,399 --> 00:16:28,880
windows microsoft has included gopher

560
00:16:28,880 --> 00:16:29,839
all the way up through

561
00:16:29,839 --> 00:16:31,920
windows 10 and server 2019 in fact i'll

562
00:16:31,920 --> 00:16:33,600
show that to you in just a minute

563
00:16:33,600 --> 00:16:35,279
it's absolutely wild that that's still

564
00:16:35,279 --> 00:16:36,880
there but but alas

565
00:16:36,880 --> 00:16:38,959
what do i expect then well i expect by

566
00:16:38,959 --> 00:16:40,800
seeing this immediately before we've

567
00:16:40,800 --> 00:16:42,639
gone any further i expect this is using

568
00:16:42,639 --> 00:16:44,880
http https or ftp

569
00:16:44,880 --> 00:16:46,880
as a command and control protocol now

570
00:16:46,880 --> 00:16:48,800
could you use http

571
00:16:48,800 --> 00:16:51,759
let's say or ftp without uh winning it

572
00:16:51,759 --> 00:16:53,440
you can as it turns out

573
00:16:53,440 --> 00:16:54,880
but you would have to conduct or

574
00:16:54,880 --> 00:16:56,720
construct all your protocol headers

575
00:16:56,720 --> 00:16:59,199
using the low level functions in winsock

576
00:16:59,199 --> 00:17:01,120
most attackers don't want to do this

577
00:17:01,120 --> 00:17:02,560
you know honestly the easy button is

578
00:17:02,560 --> 00:17:04,799
using the win inept functionality anyway

579
00:17:04,799 --> 00:17:06,799
and you get another benefit here and

580
00:17:06,799 --> 00:17:07,919
that benefit is

581
00:17:07,919 --> 00:17:11,199
that you get to automatically use the uh

582
00:17:11,199 --> 00:17:14,079
use the victim's proxy settings for free

583
00:17:14,079 --> 00:17:15,199
when inet just

584
00:17:15,199 --> 00:17:16,640
communicates across that proxy ever

585
00:17:16,640 --> 00:17:18,000
notice in windows when you go into the

586
00:17:18,000 --> 00:17:19,439
internet explorer settings and you

587
00:17:19,439 --> 00:17:20,559
change your proxy

588
00:17:20,559 --> 00:17:22,720
like everything else just magically

589
00:17:22,720 --> 00:17:24,319
knows how to get out to the internet

590
00:17:24,319 --> 00:17:25,760
well that's because there's a single

591
00:17:25,760 --> 00:17:28,240
proxy setting it's it's when inat night

592
00:17:28,240 --> 00:17:30,160
certain applications can you know use

593
00:17:30,160 --> 00:17:32,400
their own separate proxies dedicated

594
00:17:32,400 --> 00:17:34,880
proxy configs but but generally it's a

595
00:17:34,880 --> 00:17:36,960
single proxy uh configuration

596
00:17:36,960 --> 00:17:38,320
and again that's controlled through when

597
00:17:38,320 --> 00:17:40,559
inet all right um so

598
00:17:40,559 --> 00:17:41,919
not a bunch of other dlls here but i

599
00:17:41,919 --> 00:17:43,280
just wanted to highlight here this is a

600
00:17:43,280 --> 00:17:44,160
great spot where

601
00:17:44,160 --> 00:17:45,440
i don't want to call these false

602
00:17:45,440 --> 00:17:46,880
positives right there's a reason that

603
00:17:46,880 --> 00:17:48,720
every one of these is called out right

604
00:17:48,720 --> 00:17:51,039
i mean again by all means google and and

605
00:17:51,039 --> 00:17:52,640
what i would google is not what is url

606
00:17:52,640 --> 00:17:53,679
mondo dll

607
00:17:53,679 --> 00:17:56,640
but how might malware use urlmon.dll for

608
00:17:56,640 --> 00:17:58,240
instance i'll tell you with url mon it's

609
00:17:58,240 --> 00:17:59,679
almost certainly an api

610
00:17:59,679 --> 00:18:02,559
an api called url download to file url

611
00:18:02,559 --> 00:18:04,240
download the file does exactly what it

612
00:18:04,240 --> 00:18:05,760
sounds like it is the easy button for

613
00:18:05,760 --> 00:18:06,720
attackers

614
00:18:06,720 --> 00:18:08,400
to go drop additional malware to the

615
00:18:08,400 --> 00:18:10,799
machine

616
00:18:11,120 --> 00:18:12,080
now we're going to go a little more

617
00:18:12,080 --> 00:18:13,679
granular here by clicking on the imports

618
00:18:13,679 --> 00:18:14,640
tab

619
00:18:14,640 --> 00:18:17,760
because in addition to having the in

620
00:18:17,760 --> 00:18:18,880
addition to having

621
00:18:18,880 --> 00:18:21,840
the uh basically the dlls loaded all

622
00:18:21,840 --> 00:18:24,000
these dlls export functionality

623
00:18:24,000 --> 00:18:26,000
and we've now imported that

624
00:18:26,000 --> 00:18:27,520
functionality and you'll notice here i'm

625
00:18:27,520 --> 00:18:28,640
going to go ahead and sort on the

626
00:18:28,640 --> 00:18:30,320
blacklist or block list however you want

627
00:18:30,320 --> 00:18:31,360
to word that

628
00:18:31,360 --> 00:18:34,400
and you can see some of these api names

629
00:18:34,400 --> 00:18:36,000
right that have been that have been

630
00:18:36,000 --> 00:18:37,600
mounted here now or some mounted excuse

631
00:18:37,600 --> 00:18:38,400
me that have been

632
00:18:38,400 --> 00:18:40,080
uh that have been imported now i'll

633
00:18:40,080 --> 00:18:41,760
mention here that anything you see

634
00:18:41,760 --> 00:18:44,320
imported is is imported for a reason

635
00:18:44,320 --> 00:18:46,880
right we know that it's going to be used

636
00:18:46,880 --> 00:18:49,200
in the malware in some capacity we don't

637
00:18:49,200 --> 00:18:50,480
necessarily know what

638
00:18:50,480 --> 00:18:52,720
that's what our job is reverse engineers

639
00:18:52,720 --> 00:18:53,840
is is to do

640
00:18:53,840 --> 00:18:56,320
now there are some of these that some of

641
00:18:56,320 --> 00:18:57,600
these imports

642
00:18:57,600 --> 00:19:00,640
that we are basically that how do i want

643
00:19:00,640 --> 00:19:02,320
to work this here some of these imports

644
00:19:02,320 --> 00:19:04,960
uh that we may not see executed in a

645
00:19:04,960 --> 00:19:05,600
given

646
00:19:05,600 --> 00:19:07,360
uh basically any given run of the

647
00:19:07,360 --> 00:19:08,720
malware that this is a problem we have

648
00:19:08,720 --> 00:19:10,240
with sandboxes right

649
00:19:10,240 --> 00:19:12,320
so if let's say for instance i have a

650
00:19:12,320 --> 00:19:13,520
piece of malware

651
00:19:13,520 --> 00:19:15,760
and that malware only executes a

652
00:19:15,760 --> 00:19:17,600
particular piece of functionality

653
00:19:17,600 --> 00:19:20,080
let's say stealing contacts when outlook

654
00:19:20,080 --> 00:19:20,640
is open

655
00:19:20,640 --> 00:19:23,600
if my sandbox doesn't have outlook open

656
00:19:23,600 --> 00:19:24,960
it doesn't have outlook at all outlook

657
00:19:24,960 --> 00:19:26,960
installed or outlook running

658
00:19:26,960 --> 00:19:28,240
then we're not going to see that

659
00:19:28,240 --> 00:19:29,600
particular functionality that's one of

660
00:19:29,600 --> 00:19:31,039
the reasons that i'm starting with this

661
00:19:31,039 --> 00:19:32,160
with pe studio

662
00:19:32,160 --> 00:19:34,240
because this is what we would call a

663
00:19:34,240 --> 00:19:36,720
static properties analysis right

664
00:19:36,720 --> 00:19:38,400
so a static properties analysis we're

665
00:19:38,400 --> 00:19:39,840
able to come in

666
00:19:39,840 --> 00:19:42,000
and see basically the functionality

667
00:19:42,000 --> 00:19:43,600
available now you'll notice here that

668
00:19:43,600 --> 00:19:46,080
even though these are blacklisted apis

669
00:19:46,080 --> 00:19:48,559
they are not necessarily malicious apis

670
00:19:48,559 --> 00:19:50,240
right for instance reg set value

671
00:19:50,240 --> 00:19:53,280
x right exw by the way the the w

672
00:19:53,280 --> 00:19:55,520
stands for wide character and an a

673
00:19:55,520 --> 00:19:57,840
stands for ascii right so a lot of these

674
00:19:57,840 --> 00:20:00,320
apis that take uh that take a string

675
00:20:00,320 --> 00:20:01,840
argument have both an ascii and a

676
00:20:01,840 --> 00:20:03,440
unicode a wide character

677
00:20:03,440 --> 00:20:05,520
equivalent all right so i just bear that

678
00:20:05,520 --> 00:20:07,360
uh maybe bear that in mind where's red

679
00:20:07,360 --> 00:20:08,320
set value x

680
00:20:08,320 --> 00:20:10,559
um obviously not malicious we set values

681
00:20:10,559 --> 00:20:11,919
in the registry all the time

682
00:20:11,919 --> 00:20:14,559
uh so why why is this one marked as

683
00:20:14,559 --> 00:20:15,200
malicious

684
00:20:15,200 --> 00:20:16,799
um the answer is well it's very often

685
00:20:16,799 --> 00:20:19,039
seen used in malware just likewise git

686
00:20:19,039 --> 00:20:20,400
host by name right

687
00:20:20,400 --> 00:20:22,799
git host by name is is literally just a

688
00:20:22,799 --> 00:20:23,440
uh

689
00:20:23,440 --> 00:20:25,840
just a dns lookup effectively a dns

690
00:20:25,840 --> 00:20:27,760
lookup although it's not always the ns

691
00:20:27,760 --> 00:20:30,000
if it's in the resolver cache or the uh

692
00:20:30,000 --> 00:20:30,799
the host file

693
00:20:30,799 --> 00:20:32,159
that certainly takes precedence but you

694
00:20:32,159 --> 00:20:34,400
get the idea there uh basically resolve

695
00:20:34,400 --> 00:20:37,280
a uh resolve oh sorry that was good host

696
00:20:37,280 --> 00:20:38,400
by value not by

697
00:20:38,400 --> 00:20:40,720
uh not by name uh anyway um so

698
00:20:40,720 --> 00:20:42,480
regardless here uh basically we wanted

699
00:20:42,480 --> 00:20:43,360
to highlight here

700
00:20:43,360 --> 00:20:46,159
that uh this number over here this 52

701
00:20:46,159 --> 00:20:47,840
that's what we call an ordinal

702
00:20:47,840 --> 00:20:50,880
and basically the dlls uh have

703
00:20:50,880 --> 00:20:52,559
they're basically exporting either by

704
00:20:52,559 --> 00:20:54,880
name or by the position

705
00:20:54,880 --> 00:20:56,400
in their export address table so if you

706
00:20:56,400 --> 00:20:58,960
picture a picture an array

707
00:20:58,960 --> 00:21:00,320
basically that's all you have a table

708
00:21:00,320 --> 00:21:01,520
with a bunch of entries in it they're

709
00:21:01,520 --> 00:21:02,159
saying go

710
00:21:02,159 --> 00:21:05,200
grab element number 52. so this is a way

711
00:21:05,200 --> 00:21:08,080
to get a little crafty microsoft does a

712
00:21:08,080 --> 00:21:09,840
lot of this importing by ordinal

713
00:21:09,840 --> 00:21:11,760
because they don't publish the names for

714
00:21:11,760 --> 00:21:13,679
a lot of their internal functions

715
00:21:13,679 --> 00:21:15,440
and they don't because they don't have

716
00:21:15,440 --> 00:21:17,280
the names published there's no way to

717
00:21:17,280 --> 00:21:18,480
then go look that

718
00:21:18,480 --> 00:21:20,720
look that export up by name right so now

719
00:21:20,720 --> 00:21:21,760
this particular case these are

720
00:21:21,760 --> 00:21:23,039
well-known ordinals

721
00:21:23,039 --> 00:21:24,799
it's a fairly rare thing by the way

722
00:21:24,799 --> 00:21:26,720
outside of microsoft system software

723
00:21:26,720 --> 00:21:27,760
where they have these

724
00:21:27,760 --> 00:21:30,559
internal use only apis it's fairly rare

725
00:21:30,559 --> 00:21:32,159
for software to

726
00:21:32,159 --> 00:21:33,600
import by ordinal so the fact that

727
00:21:33,600 --> 00:21:35,440
that's happening at all here

728
00:21:35,440 --> 00:21:37,840
tells me i say tells me it certainly

729
00:21:37,840 --> 00:21:39,440
kicks off some malware gang signs but

730
00:21:39,440 --> 00:21:41,120
let's talk about a couple of these apis

731
00:21:41,120 --> 00:21:42,159
as we go

732
00:21:42,159 --> 00:21:45,360
we've got certainly the uh basically get

733
00:21:45,360 --> 00:21:46,559
volume information

734
00:21:46,559 --> 00:21:48,400
sometimes this is used as an

735
00:21:48,400 --> 00:21:50,720
anti-debugging uh type tool or anti

736
00:21:50,720 --> 00:21:53,440
uh analysis tool uh so for instance i

737
00:21:53,440 --> 00:21:54,880
get volume information will tell you

738
00:21:54,880 --> 00:21:55,600
things like

739
00:21:55,600 --> 00:21:58,080
uh what is the size of the size of the

740
00:21:58,080 --> 00:21:58,960
volume

741
00:21:58,960 --> 00:22:01,039
that obviously could be interesting

742
00:22:01,039 --> 00:22:02,640
certainly the the serial number of the

743
00:22:02,640 --> 00:22:04,559
volume vmware does some very interesting

744
00:22:04,559 --> 00:22:05,600
things with the

745
00:22:05,600 --> 00:22:07,360
with that and so there's a few different

746
00:22:07,360 --> 00:22:09,120
uh pieces we can use there

747
00:22:09,120 --> 00:22:11,360
to identify or get volume information

748
00:22:11,360 --> 00:22:12,640
and that could be it it could just be a

749
00:22:12,640 --> 00:22:13,919
system profiling tool

750
00:22:13,919 --> 00:22:15,039
we don't know that yet but i'm going to

751
00:22:15,039 --> 00:22:16,720
think about that a little bit i'm also

752
00:22:16,720 --> 00:22:17,520
going to note here

753
00:22:17,520 --> 00:22:19,280
the control service and delete service

754
00:22:19,280 --> 00:22:21,039
right so what services

755
00:22:21,039 --> 00:22:23,440
is this uh what services is this

756
00:22:23,440 --> 00:22:24,159
deleting

757
00:22:24,159 --> 00:22:25,679
uh we don't know yet but certainly i

758
00:22:25,679 --> 00:22:28,000
want to think about that and keep that

759
00:22:28,000 --> 00:22:30,400
keep that really in in front of mind

760
00:22:30,400 --> 00:22:31,440
that indeed there's going to be

761
00:22:31,440 --> 00:22:33,520
potentially some service deletion

762
00:22:33,520 --> 00:22:35,679
notice here a call to our resource lock

763
00:22:35,679 --> 00:22:37,200
resource resources

764
00:22:37,200 --> 00:22:40,240
are embedded uh into the binary and so

765
00:22:40,240 --> 00:22:42,480
with that lock resource we might have

766
00:22:42,480 --> 00:22:45,360
some i might have some data being

767
00:22:45,360 --> 00:22:46,159
dropped

768
00:22:46,159 --> 00:22:48,320
etc all right a couple other things i

769
00:22:48,320 --> 00:22:50,320
know that i expected to set and possibly

770
00:22:50,320 --> 00:22:52,400
delete values and keys so setting values

771
00:22:52,400 --> 00:22:54,400
uh probably persistence uh deleting

772
00:22:54,400 --> 00:22:55,840
values and deleting keys that's

773
00:22:55,840 --> 00:22:57,120
interesting we want to take a look at

774
00:22:57,120 --> 00:22:57,440
that

775
00:22:57,440 --> 00:22:59,919
certainly we also see here a good old

776
00:22:59,919 --> 00:23:02,080
url download the file right exactly we

777
00:23:02,080 --> 00:23:02,720
expected

778
00:23:02,720 --> 00:23:05,120
we also see some internet connect right

779
00:23:05,120 --> 00:23:06,880
and there's an internet read file this

780
00:23:06,880 --> 00:23:08,000
is where we read the data

781
00:23:08,000 --> 00:23:10,080
back for command and control so

782
00:23:10,080 --> 00:23:11,440
certainly interested in that as well

783
00:23:11,440 --> 00:23:13,039
the reason i'm bringing this up here is

784
00:23:13,039 --> 00:23:14,960
that if i run this in a sandbox and i

785
00:23:14,960 --> 00:23:16,320
don't see for instance setting a

786
00:23:16,320 --> 00:23:17,200
register value

787
00:23:17,200 --> 00:23:19,120
i haven't seen all the functionality

788
00:23:19,120 --> 00:23:20,799
that the malware has right

789
00:23:20,799 --> 00:23:22,880
write process memory this sounds a lot

790
00:23:22,880 --> 00:23:24,240
like code injection to me

791
00:23:24,240 --> 00:23:27,039
read process memory sounds a lot like uh

792
00:23:27,039 --> 00:23:29,039
possibly hooking right uh which may uh

793
00:23:29,039 --> 00:23:30,880
go hand in hand with code injection

794
00:23:30,880 --> 00:23:32,960
right so i'm kind of looking around that

795
00:23:32,960 --> 00:23:34,320
notice here i said hooking and sure

796
00:23:34,320 --> 00:23:35,840
enough what do you have here call next

797
00:23:35,840 --> 00:23:36,240
hook

798
00:23:36,240 --> 00:23:38,400
set windows hook x and unhook windows

799
00:23:38,400 --> 00:23:39,520
hook ax sometimes used for

800
00:23:39,520 --> 00:23:41,440
anti-debugging but very often as well

801
00:23:41,440 --> 00:23:43,440
used for key logging right

802
00:23:43,440 --> 00:23:45,520
so we have things here like move file

803
00:23:45,520 --> 00:23:46,880
this one's interesting here uh

804
00:23:46,880 --> 00:23:49,279
find first file and find next file right

805
00:23:49,279 --> 00:23:50,720
so these are basically doing

806
00:23:50,720 --> 00:23:52,960
uh directory listings right now as i

807
00:23:52,960 --> 00:23:54,159
start putting all this together i want

808
00:23:54,159 --> 00:23:55,679
you to think about this right we've got

809
00:23:55,679 --> 00:23:56,320
uh

810
00:23:56,320 --> 00:23:58,080
the all the tools used for command and

811
00:23:58,080 --> 00:24:00,159
control we have something that wants to

812
00:24:00,159 --> 00:24:01,120
run as admin

813
00:24:01,120 --> 00:24:03,360
we have something that is doing

814
00:24:03,360 --> 00:24:05,279
cross-process modification with write

815
00:24:05,279 --> 00:24:07,440
process and read process memory

816
00:24:07,440 --> 00:24:10,080
we have basically directory listings we

817
00:24:10,080 --> 00:24:10,640
have

818
00:24:10,640 --> 00:24:12,720
leading services if i combine all that

819
00:24:12,720 --> 00:24:15,039
together is it possible but a legitimate

820
00:24:15,039 --> 00:24:16,480
tool remember i said one of my first

821
00:24:16,480 --> 00:24:19,279
jobs is is it malware or not right

822
00:24:19,279 --> 00:24:21,600
and you know i said one of my first jobs

823
00:24:21,600 --> 00:24:22,640
there's figuring that out

824
00:24:22,640 --> 00:24:24,159
i'm gonna go and call this probably

825
00:24:24,159 --> 00:24:25,679
malware right based on

826
00:24:25,679 --> 00:24:27,039
all of these different malware gang

827
00:24:27,039 --> 00:24:29,440
signs uh creating additional processes

828
00:24:29,440 --> 00:24:32,000
a process 32 first right as well as

829
00:24:32,000 --> 00:24:33,279
process 32 next

830
00:24:33,279 --> 00:24:35,520
uh is going to walk the process list

831
00:24:35,520 --> 00:24:37,360
i've got a lot of things here that look

832
00:24:37,360 --> 00:24:39,120
really bad terminate process one final

833
00:24:39,120 --> 00:24:40,000
one that i'll mention

834
00:24:40,000 --> 00:24:42,000
uh this reaches out and kills a remote

835
00:24:42,000 --> 00:24:43,039
process right so

836
00:24:43,039 --> 00:24:44,799
again as i put all this together are the

837
00:24:44,799 --> 00:24:46,720
legitimate tools that need this

838
00:24:46,720 --> 00:24:49,039
uh the answer is sure there are but

839
00:24:49,039 --> 00:24:50,720
they're probably few and far between

840
00:24:50,720 --> 00:24:51,600
right so i

841
00:24:51,600 --> 00:24:53,840
should go in with the expectation that

842
00:24:53,840 --> 00:24:54,640
this indeed

843
00:24:54,640 --> 00:24:57,440
is probably malware final thing i say

844
00:24:57,440 --> 00:24:58,640
final thing let's do a couple more

845
00:24:58,640 --> 00:24:59,919
things here i want to go take a look at

846
00:24:59,919 --> 00:25:01,120
my strings now

847
00:25:01,120 --> 00:25:02,799
you won't always have this some malware

848
00:25:02,799 --> 00:25:04,480
is packed a lot of malware is packed i

849
00:25:04,480 --> 00:25:06,080
very intentionally grab some samples

850
00:25:06,080 --> 00:25:07,360
here that aren't packed because we don't

851
00:25:07,360 --> 00:25:08,080
have time

852
00:25:08,080 --> 00:25:09,600
to go through how to de-obfuscate the

853
00:25:09,600 --> 00:25:12,799
malware or lots of different malware

854
00:25:12,799 --> 00:25:15,440
malware types and packer types to get in

855
00:25:15,440 --> 00:25:17,200
and do analysis i wanted to do something

856
00:25:17,200 --> 00:25:18,480
where we could get you up and going

857
00:25:18,480 --> 00:25:19,200
quickly

858
00:25:19,200 --> 00:25:20,960
um and i'll mention too that some

859
00:25:20,960 --> 00:25:22,400
malware isn't packed right

860
00:25:22,400 --> 00:25:23,440
you know this is kind of one of these

861
00:25:23,440 --> 00:25:25,520
things that cycles back and forth uh

862
00:25:25,520 --> 00:25:29,120
where you know some uh some antiviruses

863
00:25:29,120 --> 00:25:31,200
will penalize in their heuristic scoring

864
00:25:31,200 --> 00:25:33,039
um anything that's uh basically anything

865
00:25:33,039 --> 00:25:33,919
that's packed right

866
00:25:33,919 --> 00:25:36,080
and so when that happens uh we see you

867
00:25:36,080 --> 00:25:36,960
know kind of that

868
00:25:36,960 --> 00:25:38,960
that float back to let's let's not pack

869
00:25:38,960 --> 00:25:41,120
stuff right in any case here you get an

870
00:25:41,120 --> 00:25:42,480
idea of well

871
00:25:42,480 --> 00:25:44,320
some stuff that's here i'm interested in

872
00:25:44,320 --> 00:25:45,760
all these strings that are

873
00:25:45,760 --> 00:25:48,480
uh is ascii strings uh you know what

874
00:25:48,480 --> 00:25:49,840
what are these specifically

875
00:25:49,840 --> 00:25:51,600
i i don't know yet but certainly we'll

876
00:25:51,600 --> 00:25:53,760
put that uh put that all together

877
00:25:53,760 --> 00:25:56,240
and or you know may work all that may

878
00:25:56,240 --> 00:25:57,200
work all that out

879
00:25:57,200 --> 00:25:58,880
and so as we start looking around here

880
00:25:58,880 --> 00:26:00,480
again just some of our some of our

881
00:26:00,480 --> 00:26:01,120
strings

882
00:26:01,120 --> 00:26:03,679
um again just want to kind of throw this

883
00:26:03,679 --> 00:26:04,799
out around here

884
00:26:04,799 --> 00:26:06,799
uninstall here's our current version run

885
00:26:06,799 --> 00:26:09,039
grandma god rest her soul knew all about

886
00:26:09,039 --> 00:26:10,320
the run key all right

887
00:26:10,320 --> 00:26:11,760
uh by the way here very interestingly

888
00:26:11,760 --> 00:26:12,960
you may notice here that there's two

889
00:26:12,960 --> 00:26:14,159
versions of the run key

890
00:26:14,159 --> 00:26:17,600
uh one of them says wow 64 32 node now

891
00:26:17,600 --> 00:26:19,520
what i want to mention here by the way

892
00:26:19,520 --> 00:26:21,760
is that with this wow 64

893
00:26:21,760 --> 00:26:24,159
wow 64 basically what you're dealing

894
00:26:24,159 --> 00:26:25,919
with here is the windows on windows

895
00:26:25,919 --> 00:26:29,919
64 subsystem wow 64 allows you to run a

896
00:26:29,919 --> 00:26:31,120
32-bit

897
00:26:31,120 --> 00:26:32,799
uh basically allows you to go run a

898
00:26:32,799 --> 00:26:34,799
32-bit uh

899
00:26:34,799 --> 00:26:38,320
32-bit executable on a 64-bit subsystem

900
00:26:38,320 --> 00:26:42,080
now because there may be issues between

901
00:26:42,080 --> 00:26:44,960
configurations let's say for a 32-bit

902
00:26:44,960 --> 00:26:46,080
software installation

903
00:26:46,080 --> 00:26:48,240
and a 64-bit software installation of

904
00:26:48,240 --> 00:26:49,200
the same name

905
00:26:49,200 --> 00:26:52,400
there's a separate software hive for

906
00:26:52,400 --> 00:26:54,320
32-bit right so anything running that's

907
00:26:54,320 --> 00:26:56,559
32-bit is running in wow 64.

908
00:26:56,559 --> 00:26:58,240
and when it queries the registry it's

909
00:26:58,240 --> 00:27:00,559
going to do so i'm out of microsoft uh

910
00:27:00,559 --> 00:27:02,880
basically i'm sorry out of the wow 64-32

911
00:27:02,880 --> 00:27:04,960
i'll demonstrate this real quick here

912
00:27:04,960 --> 00:27:06,640
and then we'll get we'll get back to

913
00:27:06,640 --> 00:27:08,880
get back to moving i've got my command

914
00:27:08,880 --> 00:27:10,480
my command prompt here and then i'm

915
00:27:10,480 --> 00:27:11,200
going to go grab

916
00:27:11,200 --> 00:27:13,760
one other command prompt um and let's do

917
00:27:13,760 --> 00:27:14,480
ac

918
00:27:14,480 --> 00:27:21,240
windows uh windows assist file 64.

919
00:27:21,240 --> 00:27:26,399
syswire64 and command.exe

920
00:27:26,399 --> 00:27:28,960
so notice up here one of these says

921
00:27:28,960 --> 00:27:29,679
command

922
00:27:29,679 --> 00:27:31,600
sorry says syswire64 the other says

923
00:27:31,600 --> 00:27:32,720
system32

924
00:27:32,720 --> 00:27:34,080
but notice that and i'm going to go and

925
00:27:34,080 --> 00:27:35,760
change directory over here to windows

926
00:27:35,760 --> 00:27:38,640
system32

927
00:27:40,080 --> 00:27:42,640
i'm going to duracalc.exe because it's

928
00:27:42,640 --> 00:27:43,840
let's be fair right

929
00:27:43,840 --> 00:27:46,080
anything in security has to pop calc uh

930
00:27:46,080 --> 00:27:47,919
we'll go to calc.exe here as

931
00:27:47,919 --> 00:27:51,760
well now listen i don't need any fancy

932
00:27:51,760 --> 00:27:53,039
hashing software to see these are

933
00:27:53,039 --> 00:27:55,640
different right so 27 648

934
00:27:55,640 --> 00:27:57,760
26112 but notice they're both in system

935
00:27:57,760 --> 00:27:59,679
32. what's going on here right

936
00:27:59,679 --> 00:28:01,679
well the reality is that this is

937
00:28:01,679 --> 00:28:02,880
actually uh

938
00:28:02,880 --> 00:28:05,760
really the one in syswow 64 right but

939
00:28:05,760 --> 00:28:07,600
we're doing file system redirection here

940
00:28:07,600 --> 00:28:08,880
right so there's a file system and a

941
00:28:08,880 --> 00:28:10,320
registry redirection done

942
00:28:10,320 --> 00:28:13,039
in wow 64. all right so if i come back

943
00:28:13,039 --> 00:28:13,600
to

944
00:28:13,600 --> 00:28:16,799
my basically my 64-bit version if i say

945
00:28:16,799 --> 00:28:17,360
dur

946
00:28:17,360 --> 00:28:22,640
dot dot sis wow 64 calc.exe

947
00:28:22,640 --> 00:28:25,200
all right now we see the 26112 it's the

948
00:28:25,200 --> 00:28:26,159
same thing right

949
00:28:26,159 --> 00:28:27,919
let's do a quick registry query since

950
00:28:27,919 --> 00:28:29,919
that's how we started originally so reg

951
00:28:29,919 --> 00:28:31,039
query

952
00:28:31,039 --> 00:28:35,440
right so reg query hklm

953
00:28:35,440 --> 00:28:38,960
software i'm just going to copy this

954
00:28:38,960 --> 00:28:40,559
because i'm a lazy typer you've already

955
00:28:40,559 --> 00:28:41,279
seen

956
00:28:41,279 --> 00:28:43,600
some of my miraculous typing already

957
00:28:43,600 --> 00:28:44,799
notice that these two things are

958
00:28:44,799 --> 00:28:45,279
different

959
00:28:45,279 --> 00:28:47,120
right but you'll notice down here at the

960
00:28:47,120 --> 00:28:48,640
bottom in my

961
00:28:48,640 --> 00:28:52,399
64-bit version i have a wow 64-32 note

962
00:28:52,399 --> 00:28:53,679
all right now you'll notice that some of

963
00:28:53,679 --> 00:28:55,440
these things are identical right i've

964
00:28:55,440 --> 00:28:55,840
got

965
00:28:55,840 --> 00:28:57,600
let's see do i have something for python

966
00:28:57,600 --> 00:28:59,520
on both i don't what do i have that's in

967
00:28:59,520 --> 00:29:00,960
both

968
00:29:00,960 --> 00:29:03,760
but there's some stuff in both and i'm

969
00:29:03,760 --> 00:29:04,799
just going to call it there

970
00:29:04,799 --> 00:29:06,799
because i'm sure let's say microsoft

971
00:29:06,799 --> 00:29:08,320
mozilla plugins right

972
00:29:08,320 --> 00:29:10,240
so we've got a couple of odbc right

973
00:29:10,240 --> 00:29:11,440
there are a few of these that are

974
00:29:11,440 --> 00:29:12,000
identical

975
00:29:12,000 --> 00:29:14,559
across both but but most often uh not so

976
00:29:14,559 --> 00:29:15,200
much right

977
00:29:15,200 --> 00:29:17,840
now if i want to see the wow 6432 node

978
00:29:17,840 --> 00:29:21,840
here i can literally then query that

979
00:29:24,159 --> 00:29:25,279
and you'll notice here these are

980
00:29:25,279 --> 00:29:27,360
identical why is this of interest to us

981
00:29:27,360 --> 00:29:27,760
well

982
00:29:27,760 --> 00:29:30,320
if i've got a 32-bit malware sample and

983
00:29:30,320 --> 00:29:33,279
it just specifies the software hive

984
00:29:33,279 --> 00:29:35,600
right it's going to then query the

985
00:29:35,600 --> 00:29:36,640
software hive

986
00:29:36,640 --> 00:29:40,240
under wow 64 32 node the fact that this

987
00:29:40,240 --> 00:29:41,679
is here at all

988
00:29:41,679 --> 00:29:43,840
tells me that uh this was at least

989
00:29:43,840 --> 00:29:46,080
identified as or sorry identified excuse

990
00:29:46,080 --> 00:29:48,159
me uh the sample was uh at least

991
00:29:48,159 --> 00:29:51,039
considered uh or the the running of this

992
00:29:51,039 --> 00:29:52,480
on a 64-bit system was at least

993
00:29:52,480 --> 00:29:53,520
considered right

994
00:29:53,520 --> 00:29:54,880
um you'll notice here as well a bunch of

995
00:29:54,880 --> 00:29:57,520
select statements um these are uh not

996
00:29:57,520 --> 00:29:59,120
sql actually as it turns out this is

997
00:29:59,120 --> 00:30:01,520
um let's see it's windows query language

998
00:30:01,520 --> 00:30:02,880
or windows hardware query language

999
00:30:02,880 --> 00:30:04,000
something along those lines window

1000
00:30:04,000 --> 00:30:05,120
i think it's windows query language

1001
00:30:05,120 --> 00:30:07,360
remember correctly runs a lot like sql

1002
00:30:07,360 --> 00:30:09,039
now basically the idea here is

1003
00:30:09,039 --> 00:30:12,080
that they're grabbing data uh probably

1004
00:30:12,080 --> 00:30:12,480
for

1005
00:30:12,480 --> 00:30:14,960
uh profiling the system uh but not a

1006
00:30:14,960 --> 00:30:16,640
hundred percent sure there right so like

1007
00:30:16,640 --> 00:30:18,320
for instance grabbing the process on the

1008
00:30:18,320 --> 00:30:19,440
video controller

1009
00:30:19,440 --> 00:30:21,360
um you know sometimes is used to

1010
00:30:21,360 --> 00:30:23,679
identify uh virtual machines

1011
00:30:23,679 --> 00:30:25,679
and then just not run in those in those

1012
00:30:25,679 --> 00:30:27,600
sandbox environments right so i'm not

1013
00:30:27,600 --> 00:30:28,880
100 sure there

1014
00:30:28,880 --> 00:30:30,640
i'm out dot text i want to take a look

1015
00:30:30,640 --> 00:30:33,039
at you know do i have an out.txt file

1016
00:30:33,039 --> 00:30:34,960
that that kind of that kind of stuff

1017
00:30:34,960 --> 00:30:36,640
right so again yeah that's what i'm

1018
00:30:36,640 --> 00:30:38,080
starting with the strings here right

1019
00:30:38,080 --> 00:30:39,279
this is why i'm starting static

1020
00:30:39,279 --> 00:30:40,720
properties analysis by the way these

1021
00:30:40,720 --> 00:30:41,279
strings

1022
00:30:41,279 --> 00:30:43,919
i have a strong suspicion um this is a

1023
00:30:43,919 --> 00:30:45,600
base64 encoded

1024
00:30:45,600 --> 00:30:49,760
thanks for that google base64 encoded um

1025
00:30:49,760 --> 00:30:53,120
you know basically uh file that's uh

1026
00:30:53,120 --> 00:30:54,799
that's basically jammed into and by the

1027
00:30:54,799 --> 00:30:56,399
way the base 64 you'll notice here a

1028
00:30:56,399 --> 00:30:58,159
base 64 alphabet

1029
00:30:58,159 --> 00:31:00,159
if you're not familiar with base64 it

1030
00:31:00,159 --> 00:31:02,159
the default base64 alphabet are the

1031
00:31:02,159 --> 00:31:04,000
capital letters lowercase letters zero

1032
00:31:04,000 --> 00:31:04,559
through nine

1033
00:31:04,559 --> 00:31:06,559
the plus and the forward slash sign um

1034
00:31:06,559 --> 00:31:07,760
so i'm kind of

1035
00:31:07,760 --> 00:31:09,600
yeah i'll shoot in the dark here by the

1036
00:31:09,600 --> 00:31:11,440
way too also looks like there might be a

1037
00:31:11,440 --> 00:31:12,799
batch script being dropped we don't know

1038
00:31:12,799 --> 00:31:14,080
that a hundred percent but

1039
00:31:14,080 --> 00:31:15,840
but fairly a fairly reasonable

1040
00:31:15,840 --> 00:31:17,279
reasonable assertion so i've got a few

1041
00:31:17,279 --> 00:31:18,799
things that i'm going to be looking for

1042
00:31:18,799 --> 00:31:20,240
as i start the static properties

1043
00:31:20,240 --> 00:31:22,640
analysis by the way i'm typically then

1044
00:31:22,640 --> 00:31:24,960
also going to uh i'm also going to start

1045
00:31:24,960 --> 00:31:26,399
taking notes about what should i be

1046
00:31:26,399 --> 00:31:27,039
looking for

1047
00:31:27,039 --> 00:31:28,799
right so i'll typically have a notepad

1048
00:31:28,799 --> 00:31:30,640
up and then the what should i be looking

1049
00:31:30,640 --> 00:31:33,279
for as i go into dynamic analysis

1050
00:31:33,279 --> 00:31:34,480
we're not going to do all the dynamic

1051
00:31:34,480 --> 00:31:36,640
analysis of the runtime analysis

1052
00:31:36,640 --> 00:31:37,760
we're going to walk through a couple of

1053
00:31:37,760 --> 00:31:39,840
different samples here and

1054
00:31:39,840 --> 00:31:41,919
enroll there a couple other things i

1055
00:31:41,919 --> 00:31:43,600
want to note here

1056
00:31:43,600 --> 00:31:46,240
as we get in right off the uh basically

1057
00:31:46,240 --> 00:31:47,600
right off the bat you can see

1058
00:31:47,600 --> 00:31:49,760
again we're looking at a 32-bit 30 grid

1059
00:31:49,760 --> 00:31:51,440
executable i showed you the compiler

1060
00:31:51,440 --> 00:31:52,720
time stamp already

1061
00:31:52,720 --> 00:31:54,640
let's take a look here at my sections

1062
00:31:54,640 --> 00:31:55,840
right so

1063
00:31:55,840 --> 00:31:57,600
with my sections you can see the

1064
00:31:57,600 --> 00:31:59,440
individual names of the sections

1065
00:31:59,440 --> 00:32:00,880
these names can be anything and you may

1066
00:32:00,880 --> 00:32:02,559
have more than four sections

1067
00:32:02,559 --> 00:32:04,760
you may have different section names by

1068
00:32:04,760 --> 00:32:06,720
convention.txt is the code

1069
00:32:06,720 --> 00:32:08,159
and of course the code is going to be

1070
00:32:08,159 --> 00:32:10,080
marked as code is going to be marked as

1071
00:32:10,080 --> 00:32:11,440
executable

1072
00:32:11,440 --> 00:32:13,360
and our data section as you can imagine

1073
00:32:13,360 --> 00:32:14,880
we've marked writable it's rare to have

1074
00:32:14,880 --> 00:32:17,120
one that's both writable and executable

1075
00:32:17,120 --> 00:32:19,440
as i'm sure you can imagine rsrc is the

1076
00:32:19,440 --> 00:32:20,559
resources section

1077
00:32:20,559 --> 00:32:21,840
uh one of the things that we're looking

1078
00:32:21,840 --> 00:32:23,279
at here a couple of things we're looking

1079
00:32:23,279 --> 00:32:23,840
at

1080
00:32:23,840 --> 00:32:25,519
right off the bat one of them is entropy

1081
00:32:25,519 --> 00:32:27,600
right so basically this is a measure of

1082
00:32:27,600 --> 00:32:29,440
randomness in bits per byte

1083
00:32:29,440 --> 00:32:31,760
right so higher is is higher entropy

1084
00:32:31,760 --> 00:32:32,880
right so a higher number

1085
00:32:32,880 --> 00:32:34,960
approaching eight um is a is a higher

1086
00:32:34,960 --> 00:32:36,799
entropy um and when i see

1087
00:32:36,799 --> 00:32:39,039
a high entropy um a very very high

1088
00:32:39,039 --> 00:32:40,480
energy by the way a high

1089
00:32:40,480 --> 00:32:42,640
uh in a scale of zero to eight high is

1090
00:32:42,640 --> 00:32:44,880
like 7.8 plus right so if it's better

1091
00:32:44,880 --> 00:32:45,279
than

1092
00:32:45,279 --> 00:32:47,519
better than 7.8 i'm typically going to

1093
00:32:47,519 --> 00:32:48,880
be a little suspicious of it

1094
00:32:48,880 --> 00:32:50,159
something i'm going to want to take a

1095
00:32:50,159 --> 00:32:52,159
take a hard harder look at all right so

1096
00:32:52,159 --> 00:32:53,440
7.8 plus

1097
00:32:53,440 --> 00:32:55,200
i'm going to suspect that that sample

1098
00:32:55,200 --> 00:32:56,480
then is packed

1099
00:32:56,480 --> 00:32:59,679
um and uh will likely take a uh take a

1100
00:32:59,679 --> 00:33:00,559
hard look

1101
00:33:00,559 --> 00:33:02,559
a hard look at the at the sample all

1102
00:33:02,559 --> 00:33:04,640
right okay so

1103
00:33:04,640 --> 00:33:06,880
so 7.8 bits per byte none of it is that

1104
00:33:06,880 --> 00:33:08,000
i don't think it's pack i mentioned

1105
00:33:08,000 --> 00:33:10,399
already it's not we see a lot of strings

1106
00:33:10,399 --> 00:33:11,600
and we're not going to get into how to

1107
00:33:11,600 --> 00:33:13,760
unpack malware here because again just

1108
00:33:13,760 --> 00:33:15,200
just time and

1109
00:33:15,200 --> 00:33:18,159
time and space right okay so dot text

1110
00:33:18,159 --> 00:33:19,519
section

1111
00:33:19,519 --> 00:33:22,320
um again is our code data section again

1112
00:33:22,320 --> 00:33:23,200
data

1113
00:33:23,200 --> 00:33:25,519
resource i data typically is imports and

1114
00:33:25,519 --> 00:33:27,360
then the rsrc these are resources

1115
00:33:27,360 --> 00:33:29,279
section right so this is any arbitrary

1116
00:33:29,279 --> 00:33:30,640
data that we need to

1117
00:33:30,640 --> 00:33:33,519
uh need to jam into the executable uh we

1118
00:33:33,519 --> 00:33:35,279
oftentimes see additional executables

1119
00:33:35,279 --> 00:33:36,000
packed here

1120
00:33:36,000 --> 00:33:37,360
and i'll go to the resources here in

1121
00:33:37,360 --> 00:33:39,279
just a second but before i do that i

1122
00:33:39,279 --> 00:33:40,480
want to mention here

1123
00:33:40,480 --> 00:33:43,440
that we have section hashes right now

1124
00:33:43,440 --> 00:33:44,720
what are section hashes

1125
00:33:44,720 --> 00:33:46,960
well what's happening here is that pe

1126
00:33:46,960 --> 00:33:49,039
studio is going through and it is

1127
00:33:49,039 --> 00:33:51,200
individually calculated on a per section

1128
00:33:51,200 --> 00:33:52,080
basis

1129
00:33:52,080 --> 00:33:54,159
that the hash the md5 hash of the

1130
00:33:54,159 --> 00:33:55,200
executable now

1131
00:33:55,200 --> 00:33:57,600
some folks are like md5 is old right

1132
00:33:57,600 --> 00:33:58,320
yeah it is

1133
00:33:58,320 --> 00:34:00,720
but it's fast right um and and hash

1134
00:34:00,720 --> 00:34:01,679
collisions here

1135
00:34:01,679 --> 00:34:03,279
don't really happen right when we talk

1136
00:34:03,279 --> 00:34:05,120
about is md5 too old to use

1137
00:34:05,120 --> 00:34:06,960
uh really we mean that from a from a

1138
00:34:06,960 --> 00:34:08,639
security standpoint a hash collision

1139
00:34:08,639 --> 00:34:09,040
here

1140
00:34:09,040 --> 00:34:10,719
doesn't hurt us right as opposed to like

1141
00:34:10,719 --> 00:34:13,040
in a certificate where a hash collision

1142
00:34:13,040 --> 00:34:14,960
undermines the entirety of of that

1143
00:34:14,960 --> 00:34:16,719
security control right of that security

1144
00:34:16,719 --> 00:34:17,520
mechanism

1145
00:34:17,520 --> 00:34:20,000
so here we do very much not care about

1146
00:34:20,000 --> 00:34:21,679
the hash collisions whereas in

1147
00:34:21,679 --> 00:34:26,399
a uh whereas in a uh certainly in a uh

1148
00:34:26,399 --> 00:34:28,399
another environment we would care we

1149
00:34:28,399 --> 00:34:29,760
care a little more again like a

1150
00:34:29,760 --> 00:34:31,520
a certificate based recipient

1151
00:34:31,520 --> 00:34:33,440
authentication some along those lines

1152
00:34:33,440 --> 00:34:35,280
basically though with this hashed value

1153
00:34:35,280 --> 00:34:36,480
i want you to think about for a minute

1154
00:34:36,480 --> 00:34:38,879
suppose that a malware author

1155
00:34:38,879 --> 00:34:41,199
wants to go change their executable they

1156
00:34:41,199 --> 00:34:42,800
need to change the callback domain

1157
00:34:42,800 --> 00:34:45,280
they could recompile the executable but

1158
00:34:45,280 --> 00:34:46,239
but they may not

1159
00:34:46,239 --> 00:34:48,480
alright what they may do instead is and

1160
00:34:48,480 --> 00:34:50,159
even if they do recompile the executable

1161
00:34:50,159 --> 00:34:51,599
right recompiling it

1162
00:34:51,599 --> 00:34:53,440
is likely not going to change the text

1163
00:34:53,440 --> 00:34:55,119
section right what's going to change

1164
00:34:55,119 --> 00:34:56,560
though is the data section

1165
00:34:56,560 --> 00:34:58,320
and so then i would have multiple

1166
00:34:58,320 --> 00:34:59,920
samples let's say it's just the callback

1167
00:34:59,920 --> 00:35:01,680
domain that's a piece of data as opposed

1168
00:35:01,680 --> 00:35:03,040
to a piece of code

1169
00:35:03,040 --> 00:35:04,560
right the code does something with the

1170
00:35:04,560 --> 00:35:05,920
callback knowing none of the code is

1171
00:35:05,920 --> 00:35:06,720
changed though

1172
00:35:06,720 --> 00:35:08,079
for about i use the same compiler

1173
00:35:08,079 --> 00:35:10,000
settings i'll likely have that same hash

1174
00:35:10,000 --> 00:35:11,599
also it's very common that attackers

1175
00:35:11,599 --> 00:35:13,599
won't recompile at all they'll simply

1176
00:35:13,599 --> 00:35:15,839
basically hand jam or use a binary

1177
00:35:15,839 --> 00:35:18,240
patching uh to go binary patch that

1178
00:35:18,240 --> 00:35:19,920
that callback domain changing the

1179
00:35:19,920 --> 00:35:22,240
callback domain and then we roll forward

1180
00:35:22,240 --> 00:35:24,240
right so so okay

1181
00:35:24,240 --> 00:35:26,400
what about that what about that the text

1182
00:35:26,400 --> 00:35:29,359
value the data value

1183
00:35:29,599 --> 00:35:31,200
again it's very likely that that would

1184
00:35:31,200 --> 00:35:32,720
have a different

1185
00:35:32,720 --> 00:35:33,920
a very like that would have different

1186
00:35:33,920 --> 00:35:36,400
section hash mind you changing anything

1187
00:35:36,400 --> 00:35:38,480
in the file changes the overall hash of

1188
00:35:38,480 --> 00:35:40,000
the file right and of course we can see

1189
00:35:40,000 --> 00:35:40,800
that up here

1190
00:35:40,800 --> 00:35:42,800
uh the hashes are calculated out here of

1191
00:35:42,800 --> 00:35:45,200
course md5 shaw one shot 256

1192
00:35:45,200 --> 00:35:46,800
but it's a very common thing that on the

1193
00:35:46,800 --> 00:35:48,960
sections to only have section hashes and

1194
00:35:48,960 --> 00:35:51,359
md5 because the collision here is is is

1195
00:35:51,359 --> 00:35:53,920
so ridiculously unlikely and and again

1196
00:35:53,920 --> 00:35:55,920
not not really used from a security

1197
00:35:55,920 --> 00:35:57,760
from a security perspective but what i

1198
00:35:57,760 --> 00:35:59,440
can do then is track and say okay even

1199
00:35:59,440 --> 00:36:01,680
though the the hash of the file overall

1200
00:36:01,680 --> 00:36:02,400
is different

1201
00:36:02,400 --> 00:36:04,400
that because the dot text section has

1202
00:36:04,400 --> 00:36:06,160
the same hash or text sections

1203
00:36:06,160 --> 00:36:09,200
have the same hashes these are likely

1204
00:36:09,200 --> 00:36:10,880
share a common lineage or a common

1205
00:36:10,880 --> 00:36:12,079
source code

1206
00:36:12,079 --> 00:36:14,640
common source code base right and then

1207
00:36:14,640 --> 00:36:15,680
final thing that i'll mention here is

1208
00:36:15,680 --> 00:36:17,520
resources right so coming to resources

1209
00:36:17,520 --> 00:36:18,880
there's only one resource

1210
00:36:18,880 --> 00:36:20,240
and in fact you can even see the first

1211
00:36:20,240 --> 00:36:22,400
few bytes over here neat right

1212
00:36:22,400 --> 00:36:24,079
notice here it shows the first few bytes

1213
00:36:24,079 --> 00:36:25,520
in text okay cool

1214
00:36:25,520 --> 00:36:26,880
by the way if you wanted to get rid of

1215
00:36:26,880 --> 00:36:28,640
that resource or i say get rid of excuse

1216
00:36:28,640 --> 00:36:29,920
me if you wanted to

1217
00:36:29,920 --> 00:36:31,839
see what that resource actually is and

1218
00:36:31,839 --> 00:36:33,520
inspect that using a hex editor or

1219
00:36:33,520 --> 00:36:34,079
whatever

1220
00:36:34,079 --> 00:36:35,839
you can just say dump raw and save it

1221
00:36:35,839 --> 00:36:37,440
out to disk

1222
00:36:37,440 --> 00:36:39,119
now i want to show you one other tool

1223
00:36:39,119 --> 00:36:42,480
here with that sample1.exe

1224
00:36:42,480 --> 00:36:45,280
and that's going to be cff explorer

1225
00:36:45,280 --> 00:36:46,240
that's one that looks like a little

1226
00:36:46,240 --> 00:36:47,119
chili pepper now

1227
00:36:47,119 --> 00:36:48,960
these are free tools to download

1228
00:36:48,960 --> 00:36:50,720
obviously you'll have to download these

1229
00:36:50,720 --> 00:36:52,160
and put these on a vm

1230
00:36:52,160 --> 00:36:53,760
now we're not executing the malware yet

1231
00:36:53,760 --> 00:36:56,560
so this is kind of safe-ish

1232
00:36:56,560 --> 00:36:58,720
sometimes cff's a little bit weird with

1233
00:36:58,720 --> 00:37:00,320
uh sometimes a little bit weird with

1234
00:37:00,320 --> 00:37:01,920
opening let's give this one more shot

1235
00:37:01,920 --> 00:37:02,640
here

1236
00:37:02,640 --> 00:37:06,800
um and we'll drop this onto the desktop

1237
00:37:06,800 --> 00:37:09,119
grab okay cool don't know what's up with

1238
00:37:09,119 --> 00:37:11,040
cff today but rock on of course

1239
00:37:11,040 --> 00:37:13,520
demo fail for the win or demos for the

1240
00:37:13,520 --> 00:37:14,400
uh for the win

1241
00:37:14,400 --> 00:37:16,560
um okay so we've got cff explorer um

1242
00:37:16,560 --> 00:37:18,720
it's running uh running sample one here

1243
00:37:18,720 --> 00:37:20,320
uh or so running excuse it's loaded

1244
00:37:20,320 --> 00:37:21,839
sample one the thing that i really

1245
00:37:21,839 --> 00:37:23,200
wanted to highlight here the thing i

1246
00:37:23,200 --> 00:37:24,240
wanted to show you

1247
00:37:24,240 --> 00:37:26,960
that i'm a big big fan of here is the

1248
00:37:26,960 --> 00:37:27,680
resource

1249
00:37:27,680 --> 00:37:29,440
editor all right so the resource editor

1250
00:37:29,440 --> 00:37:31,760
here doesn't really do anything

1251
00:37:31,760 --> 00:37:34,800
uh you know snappy that our

1252
00:37:34,800 --> 00:37:37,520
resources section in basically in pe

1253
00:37:37,520 --> 00:37:38,800
studio does

1254
00:37:38,800 --> 00:37:40,800
but uh you know notice here like we've

1255
00:37:40,800 --> 00:37:42,079
got some information

1256
00:37:42,079 --> 00:37:44,000
that cff explorer doesn't provide us

1257
00:37:44,000 --> 00:37:45,280
when i come over here to the resource

1258
00:37:45,280 --> 00:37:45,839
editor

1259
00:37:45,839 --> 00:37:48,240
i've got a hex dump or a string dump

1260
00:37:48,240 --> 00:37:50,000
like an entire string or hex dump

1261
00:37:50,000 --> 00:37:52,240
and so if this is arbitrary binary data

1262
00:37:52,240 --> 00:37:54,000
uh and there may be more files

1263
00:37:54,000 --> 00:37:56,320
in the uh basically the resources again

1264
00:37:56,320 --> 00:37:58,400
we'd have all that to have all that here

1265
00:37:58,400 --> 00:38:01,119
right so i i'm a big fan of cff explorer

1266
00:38:01,119 --> 00:38:02,800
for that i don't have to dump it and

1267
00:38:02,800 --> 00:38:04,000
then move over into

1268
00:38:04,000 --> 00:38:06,960
a into a hex editor it's it's just all

1269
00:38:06,960 --> 00:38:08,000
right here for me

1270
00:38:08,000 --> 00:38:09,440
all right so i'm going to go ahead and

1271
00:38:09,440 --> 00:38:11,040
close out sample one

1272
00:38:11,040 --> 00:38:13,200
and we've taken a taking a look at that

1273
00:38:13,200 --> 00:38:14,400
and i'm going to drop sample

1274
00:38:14,400 --> 00:38:16,480
two in actually which one was the one

1275
00:38:16,480 --> 00:38:17,680
that i want to make sure that i'm

1276
00:38:17,680 --> 00:38:19,200
grabbing there yeah let's grab sample

1277
00:38:19,200 --> 00:38:20,960
two okay sample two is a winner

1278
00:38:20,960 --> 00:38:23,040
right um so i thought it was sample two

1279
00:38:23,040 --> 00:38:24,480
those my winner i mean there's they're

1280
00:38:24,480 --> 00:38:25,599
all winners right

1281
00:38:25,599 --> 00:38:27,359
um but again like i said i'll provide

1282
00:38:27,359 --> 00:38:28,800
you a download link for these

1283
00:38:28,800 --> 00:38:31,440
uh if you uh if you so desire i say

1284
00:38:31,440 --> 00:38:33,200
we'll provide you it'll be there

1285
00:38:33,200 --> 00:38:35,040
for you to download and of course it's

1286
00:38:35,040 --> 00:38:36,640
running through pe studio let's also go

1287
00:38:36,640 --> 00:38:38,880
ahead and drop this into cff explorer as

1288
00:38:38,880 --> 00:38:40,640
it rolls

1289
00:38:40,640 --> 00:38:44,720
see survey says come on cff explorer

1290
00:38:44,720 --> 00:38:47,040
come on baby oh no no it's going to be

1291
00:38:47,040 --> 00:38:48,640
cantankerous again

1292
00:38:48,640 --> 00:38:50,640
surprise right okay cool we'll open up

1293
00:38:50,640 --> 00:38:52,560
here

1294
00:38:52,560 --> 00:38:54,079
and let's take a look at nothing in the

1295
00:38:54,079 --> 00:38:55,440
resources right so if i don't have

1296
00:38:55,440 --> 00:38:56,880
anything over in resources

1297
00:38:56,880 --> 00:38:59,440
uh nothing right now again i'll say that

1298
00:38:59,440 --> 00:38:59,920
cf

1299
00:38:59,920 --> 00:39:02,000
explorer does a great job of pulling out

1300
00:39:02,000 --> 00:39:03,599
uh some of the data you'll notice here

1301
00:39:03,599 --> 00:39:05,280
like the time stamp right it shows it as

1302
00:39:05,280 --> 00:39:06,800
a d word value and doesn't convert it

1303
00:39:06,800 --> 00:39:07,920
right is that useful

1304
00:39:07,920 --> 00:39:10,079
meh um i i don't know i mean it shows

1305
00:39:10,079 --> 00:39:11,280
that over here it does

1306
00:39:11,280 --> 00:39:14,400
actually uh is just the compile time

1307
00:39:14,400 --> 00:39:16,640
and take it back it doesn't um i thought

1308
00:39:16,640 --> 00:39:18,320
it was in here somewhere alas

1309
00:39:18,320 --> 00:39:20,320
bottom line different tool a different

1310
00:39:20,320 --> 00:39:21,599
way to display data

1311
00:39:21,599 --> 00:39:23,280
uh call it for whatever it's worth

1312
00:39:23,280 --> 00:39:24,880
notice here there's a t there's a

1313
00:39:24,880 --> 00:39:25,440
section

1314
00:39:25,440 --> 00:39:27,760
called dot x right well that's a weird

1315
00:39:27,760 --> 00:39:28,560
section name

1316
00:39:28,560 --> 00:39:29,920
although you know what what is what a

1317
00:39:29,920 --> 00:39:31,599
weird even mean right we had one

1318
00:39:31,599 --> 00:39:33,920
uh that we saw while one uh file we saw

1319
00:39:33,920 --> 00:39:34,800
a while back

1320
00:39:34,800 --> 00:39:36,880
um where it was cursing brian krebs

1321
00:39:36,880 --> 00:39:38,640
right so like the actual section names

1322
00:39:38,640 --> 00:39:39,599
were something like f

1323
00:39:39,599 --> 00:39:42,400
brian krebs you so i can't remember

1324
00:39:42,400 --> 00:39:43,920
there was there was some vulgarity

1325
00:39:43,920 --> 00:39:45,440
either i think they talked about his mom

1326
00:39:45,440 --> 00:39:47,359
a little bit too and meh anyway

1327
00:39:47,359 --> 00:39:48,800
um so i know there's not a lot of love

1328
00:39:48,800 --> 00:39:50,320
for krebs out there but whatever don't

1329
00:39:50,320 --> 00:39:52,160
talk bad about krebs mom all right

1330
00:39:52,160 --> 00:39:54,320
anywho um so what what about this right

1331
00:39:54,320 --> 00:39:56,240
well virustotal hits yeah says it's

1332
00:39:56,240 --> 00:39:57,839
malicious don't take that always because

1333
00:39:57,839 --> 00:39:58,880
a lot of those

1334
00:39:58,880 --> 00:40:00,400
i'll mention that a lot of the engines

1335
00:40:00,400 --> 00:40:02,480
the antivirus engines pivot off of one

1336
00:40:02,480 --> 00:40:03,359
another meaning

1337
00:40:03,359 --> 00:40:05,119
if antivirus engine number one says

1338
00:40:05,119 --> 00:40:06,560
something's bad um

1339
00:40:06,560 --> 00:40:08,960
then av engines two three and four

1340
00:40:08,960 --> 00:40:10,640
looking like well av engine one says it

1341
00:40:10,640 --> 00:40:11,119
was bad

1342
00:40:11,119 --> 00:40:13,839
therefore it's bad and it's like time

1343
00:40:13,839 --> 00:40:14,640
out that's

1344
00:40:14,640 --> 00:40:16,480
that may not be may not be a good uh

1345
00:40:16,480 --> 00:40:17,760
good assertion there

1346
00:40:17,760 --> 00:40:19,119
it may be that we want to go ahead and

1347
00:40:19,119 --> 00:40:20,880
follow up on that uh follow up on that

1348
00:40:20,880 --> 00:40:21,520
ourselves

1349
00:40:21,520 --> 00:40:23,760
um rather than just trusting a trusting

1350
00:40:23,760 --> 00:40:24,720
virus total now

1351
00:40:24,720 --> 00:40:26,720
i'm not saying don't trust virustotal

1352
00:40:26,720 --> 00:40:28,160
i'm just saying think for yourself

1353
00:40:28,160 --> 00:40:30,000
and be aware that a high percentage

1354
00:40:30,000 --> 00:40:31,760
there may just be an example of

1355
00:40:31,760 --> 00:40:32,640
groupthink right

1356
00:40:32,640 --> 00:40:34,880
very frequently is right so uh so for

1357
00:40:34,880 --> 00:40:36,640
whatever that's worth just bear that

1358
00:40:36,640 --> 00:40:39,680
bear that in mind as as you proceed with

1359
00:40:39,680 --> 00:40:40,720
your analysis

1360
00:40:40,720 --> 00:40:43,200
okay um so let's take a look at our

1361
00:40:43,200 --> 00:40:44,480
imports here and then we'll drop into

1362
00:40:44,480 --> 00:40:45,200
the debugger

1363
00:40:45,200 --> 00:40:46,560
and take a look there now you don't see

1364
00:40:46,560 --> 00:40:48,240
a whole lot of imports here

1365
00:40:48,240 --> 00:40:51,520
we see a few here from some networking

1366
00:40:51,520 --> 00:40:52,000
uh

1367
00:40:52,000 --> 00:40:54,000
some heap alloy keep free whatever take

1368
00:40:54,000 --> 00:40:55,040
a look at strings

1369
00:40:55,040 --> 00:40:57,520
all right let's see we've got over here

1370
00:40:57,520 --> 00:41:00,560
uh hostname password

1371
00:41:00,560 --> 00:41:02,400
something something or some program

1372
00:41:02,400 --> 00:41:04,319
files typed urls i love this

1373
00:41:04,319 --> 00:41:06,079
right so it turns out here that with

1374
00:41:06,079 --> 00:41:08,079
typed urls um there's actually a

1375
00:41:08,079 --> 00:41:09,839
registry key there where you can see

1376
00:41:09,839 --> 00:41:11,839
what has somebody typed in versus and if

1377
00:41:11,839 --> 00:41:13,680
you paste url and that's considered a

1378
00:41:13,680 --> 00:41:15,839
typed url as well for internet explorer

1379
00:41:15,839 --> 00:41:17,440
this looks to me like an info stealer

1380
00:41:17,440 --> 00:41:18,720
and i see a lot of stuff here around

1381
00:41:18,720 --> 00:41:20,160
grabbing profiles and

1382
00:41:20,160 --> 00:41:21,520
let's take a look at some of this and

1383
00:41:21,520 --> 00:41:23,520
see how this see how this tool works

1384
00:41:23,520 --> 00:41:24,160
right

1385
00:41:24,160 --> 00:41:26,560
see if we can find uh find some some

1386
00:41:26,560 --> 00:41:27,359
interesting uh

1387
00:41:27,359 --> 00:41:30,160
portions around the uh basically around

1388
00:41:30,160 --> 00:41:31,119
the around the tool

1389
00:41:31,119 --> 00:41:34,480
right um so now let's see we see some

1390
00:41:34,480 --> 00:41:34,800
other

1391
00:41:34,800 --> 00:41:36,800
uh let's see there's a create file a

1392
00:41:36,800 --> 00:41:38,480
write file now you don't see this in

1393
00:41:38,480 --> 00:41:39,839
imports by the way if we come over to

1394
00:41:39,839 --> 00:41:41,599
import chancy create and write file

1395
00:41:41,599 --> 00:41:43,200
this thing is i don't want to call it

1396
00:41:43,200 --> 00:41:44,880
packed necessarily but it does some

1397
00:41:44,880 --> 00:41:45,520
runtime

1398
00:41:45,520 --> 00:41:48,000
loading of imports right we see those uh

1399
00:41:48,000 --> 00:41:49,839
see those in the strings here right

1400
00:41:49,839 --> 00:41:52,000
uh so we might for instance sort here by

1401
00:41:52,000 --> 00:41:53,839
uh sort here by string name

1402
00:41:53,839 --> 00:41:55,520
um you know once you've done a little

1403
00:41:55,520 --> 00:41:57,200
bit of this work you'll start to see the

1404
00:41:57,200 --> 00:41:58,000
import uh

1405
00:41:58,000 --> 00:42:00,400
or be familiar with uh what is and isn't

1406
00:42:00,400 --> 00:42:01,520
an import name

1407
00:42:01,520 --> 00:42:03,200
uh but let's say that i come up here to

1408
00:42:03,200 --> 00:42:05,440
create because creates a pretty common

1409
00:42:05,440 --> 00:42:08,319
uh common tool or common name um so i'm

1410
00:42:08,319 --> 00:42:10,000
looking here at create file well that i

1411
00:42:10,000 --> 00:42:10,640
said

1412
00:42:10,640 --> 00:42:13,680
common right could be regret key would

1413
00:42:13,680 --> 00:42:15,680
be another another one to go look for i

1414
00:42:15,680 --> 00:42:16,079
create

1415
00:42:16,079 --> 00:42:17,920
file i always think create process

1416
00:42:17,920 --> 00:42:20,240
potentially i didn't see that

1417
00:42:20,240 --> 00:42:22,160
let's see here's get proc address is

1418
00:42:22,160 --> 00:42:23,520
actually going to help us

1419
00:42:23,520 --> 00:42:26,960
resolve some of these apis at runtime

1420
00:42:26,960 --> 00:42:28,800
okay so what are we going to do now

1421
00:42:28,800 --> 00:42:30,880
right well i've got some idea about

1422
00:42:30,880 --> 00:42:33,040
this thing being an info stealer looking

1423
00:42:33,040 --> 00:42:34,880
at email address we saw

1424
00:42:34,880 --> 00:42:37,760
the the reg uh sort of sorry i saw some

1425
00:42:37,760 --> 00:42:38,640
of the registry

1426
00:42:38,640 --> 00:42:41,440
registered functions functions there

1427
00:42:41,440 --> 00:42:42,839
let's go ahead now

1428
00:42:42,839 --> 00:42:45,839
and let's go ahead and uh

1429
00:42:45,839 --> 00:42:48,400
drop this bad boy into first obviously

1430
00:42:48,400 --> 00:42:51,040
x32 x64 is a 32-bit

1431
00:42:51,040 --> 00:42:52,960
okay cool i'm gonna go and take this and

1432
00:42:52,960 --> 00:42:54,720
i'm gonna drag and drop him into x32

1433
00:42:54,720 --> 00:42:55,520
debug

1434
00:42:55,520 --> 00:42:58,240
and this is the spot where at this point

1435
00:42:58,240 --> 00:42:59,440
you darn sure

1436
00:42:59,440 --> 00:43:02,079
better have a snapshot because the delta

1437
00:43:02,079 --> 00:43:03,440
between what we're doing a second ago

1438
00:43:03,440 --> 00:43:04,560
what we're doing now

1439
00:43:04,560 --> 00:43:06,400
is we're running the malware right so

1440
00:43:06,400 --> 00:43:08,160
the fact that we are in a

1441
00:43:08,160 --> 00:43:09,839
in a debugger means the malware is

1442
00:43:09,839 --> 00:43:12,160
executing this is the spot where if this

1443
00:43:12,160 --> 00:43:13,359
is on your host machine

1444
00:43:13,359 --> 00:43:16,240
stop now stop now stop now by the way if

1445
00:43:16,240 --> 00:43:17,599
you're thinking like hey jake wouldn't

1446
00:43:17,599 --> 00:43:19,200
give us live malware

1447
00:43:19,200 --> 00:43:21,920
wrong jake did give you live malware it

1448
00:43:21,920 --> 00:43:24,640
is uh you are 100 responsible i am not

1449
00:43:24,640 --> 00:43:27,119
responsible all that stuff right

1450
00:43:27,119 --> 00:43:30,560
okay all right so um

1451
00:43:30,560 --> 00:43:31,839
what do we have going on here all right

1452
00:43:31,839 --> 00:43:33,760
well first off if you've never been any

1453
00:43:33,760 --> 00:43:35,520
debugger i want to call out a few things

1454
00:43:35,520 --> 00:43:36,800
here and again remember this is supposed

1455
00:43:36,800 --> 00:43:38,160
to be super basic

1456
00:43:38,160 --> 00:43:40,079
intro to malware um if you've been in a

1457
00:43:40,079 --> 00:43:42,079
debugger before this is probably nothing

1458
00:43:42,079 --> 00:43:42,720
new to you

1459
00:43:42,720 --> 00:43:44,400
um and in fact if you've done lots of

1460
00:43:44,400 --> 00:43:46,240
malware before you probably shouldn't be

1461
00:43:46,240 --> 00:43:47,680
uh attending this because

1462
00:43:47,680 --> 00:43:50,319
uh yes this is super basic anyway that

1463
00:43:50,319 --> 00:43:50,880
said

1464
00:43:50,880 --> 00:43:53,119
let's get in and kind of walk through

1465
00:43:53,119 --> 00:43:54,720
kind of what we're seeing here right now

1466
00:43:54,720 --> 00:43:56,560
i want you to notice down here if you

1467
00:43:56,560 --> 00:43:58,319
follow my cursor down here in the bottom

1468
00:43:58,319 --> 00:43:59,920
left you see the word paused

1469
00:43:59,920 --> 00:44:02,079
that is because we are indeed paused

1470
00:44:02,079 --> 00:44:03,440
that means we're not running any of the

1471
00:44:03,440 --> 00:44:04,079
malware

1472
00:44:04,079 --> 00:44:07,680
um so but the second you drop this thing

1473
00:44:07,680 --> 00:44:09,359
into a debugger you have your malware

1474
00:44:09,359 --> 00:44:10,560
under debugger understand

1475
00:44:10,560 --> 00:44:13,040
that um there are there exists the

1476
00:44:13,040 --> 00:44:14,000
possibility

1477
00:44:14,000 --> 00:44:17,119
that the malware um evades the debugger

1478
00:44:17,119 --> 00:44:20,720
in some novel fashion um that causes

1479
00:44:20,720 --> 00:44:23,520
uh let's call it catastrophic failure

1480
00:44:23,520 --> 00:44:25,520
right so catastrophic failure meaning

1481
00:44:25,520 --> 00:44:28,240
that it executes without us and i said

1482
00:44:28,240 --> 00:44:29,280
excuse that

1483
00:44:29,280 --> 00:44:32,319
executes without our permission and

1484
00:44:32,319 --> 00:44:33,599
anything executed of course without our

1485
00:44:33,599 --> 00:44:35,760
permission that continues to go execute

1486
00:44:35,760 --> 00:44:36,560
that is a

1487
00:44:36,560 --> 00:44:39,040
that is a huge bag of a huge bag of fail

1488
00:44:39,040 --> 00:44:41,119
right um so i never trust that

1489
00:44:41,119 --> 00:44:42,800
in fact we've seen practical attacks on

1490
00:44:42,800 --> 00:44:44,319
debuggers where

1491
00:44:44,319 --> 00:44:46,480
execution begins before we intended it

1492
00:44:46,480 --> 00:44:47,520
so again

1493
00:44:47,520 --> 00:44:49,520
this should be on your virtual machine

1494
00:44:49,520 --> 00:44:50,720
if it's not

1495
00:44:50,720 --> 00:44:53,760
bail bail now okay we're in our cpu tab

1496
00:44:53,760 --> 00:44:55,200
notice up here on the top of the tabs

1497
00:44:55,200 --> 00:44:57,280
here with x32 debug

1498
00:44:57,280 --> 00:44:59,760
that i have a cpu tab this is where

1499
00:44:59,760 --> 00:45:01,280
we're going to start out and we have

1500
00:45:01,280 --> 00:45:02,720
multiple different panels

1501
00:45:02,720 --> 00:45:05,520
inside of or windows inside of our cpu

1502
00:45:05,520 --> 00:45:06,480
tab

1503
00:45:06,480 --> 00:45:07,920
i call these panes generally that's

1504
00:45:07,920 --> 00:45:09,119
something that's been it's kind of

1505
00:45:09,119 --> 00:45:09,920
worked for me

1506
00:45:09,920 --> 00:45:11,200
i'm going to start up here in my

1507
00:45:11,200 --> 00:45:13,680
disassembly pane this is in the top left

1508
00:45:13,680 --> 00:45:16,319
and this over here in this far left this

1509
00:45:16,319 --> 00:45:17,680
is control flow you'll notice some

1510
00:45:17,680 --> 00:45:19,920
dashed arrows over here or dashed lines

1511
00:45:19,920 --> 00:45:21,920
uh these show jumps and notice here the

1512
00:45:21,920 --> 00:45:24,079
jle jump if less than or equal

1513
00:45:24,079 --> 00:45:26,160
and then the second panel over so our

1514
00:45:26,160 --> 00:45:27,839
second column over here these are the

1515
00:45:27,839 --> 00:45:29,520
memory addresses right so the virtual

1516
00:45:29,520 --> 00:45:30,960
memory addresses

1517
00:45:30,960 --> 00:45:33,680
of a particular instruction as we move

1518
00:45:33,680 --> 00:45:34,079
over

1519
00:45:34,079 --> 00:45:37,119
another one to the another uh another

1520
00:45:37,119 --> 00:45:38,480
column to the right

1521
00:45:38,480 --> 00:45:41,839
we have the op codes now uh the reality

1522
00:45:41,839 --> 00:45:42,240
here

1523
00:45:42,240 --> 00:45:44,319
is that uh disassembly and that's what

1524
00:45:44,319 --> 00:45:45,359
you're really looking at here is

1525
00:45:45,359 --> 00:45:46,240
disassembly

1526
00:45:46,240 --> 00:45:48,319
uh disassembly is a one-for-one

1527
00:45:48,319 --> 00:45:49,680
translation between

1528
00:45:49,680 --> 00:45:53,040
the binary op code um and this common

1529
00:45:53,040 --> 00:45:54,800
language or english language if you want

1530
00:45:54,800 --> 00:45:56,079
to call it assembly code here it's a

1531
00:45:56,079 --> 00:45:57,200
one-for-one

1532
00:45:57,200 --> 00:45:59,599
basically a one-for-one uh translation

1533
00:45:59,599 --> 00:46:00,240
right

1534
00:46:00,240 --> 00:46:01,599
the only reason you would need this is

1535
00:46:01,599 --> 00:46:03,280
if you wanted to go create

1536
00:46:03,280 --> 00:46:06,000
a different uh or binary patch and do

1537
00:46:06,000 --> 00:46:07,920
some there's even easier ways to do that

1538
00:46:07,920 --> 00:46:09,680
i'll just mention that this is a a

1539
00:46:09,680 --> 00:46:11,599
column that i go ahead and i drag over

1540
00:46:11,599 --> 00:46:12,960
here and i get rid of because i

1541
00:46:12,960 --> 00:46:15,040
i value my screen space i don't need it

1542
00:46:15,040 --> 00:46:16,640
that much right but before i do that

1543
00:46:16,640 --> 00:46:19,280
i do want to highlight here that the x86

1544
00:46:19,280 --> 00:46:20,720
and certainly x64

1545
00:46:20,720 --> 00:46:22,720
instruction set is a variable length

1546
00:46:22,720 --> 00:46:24,160
instruction set right

1547
00:46:24,160 --> 00:46:25,599
and when i say variable length what do i

1548
00:46:25,599 --> 00:46:27,359
mean by that what i mean is that

1549
00:46:27,359 --> 00:46:30,000
these instructions each have a different

1550
00:46:30,000 --> 00:46:31,520
length they see each other

1551
00:46:31,520 --> 00:46:32,720
maybe a different length you know some

1552
00:46:32,720 --> 00:46:34,160
of these are one byte instructions some

1553
00:46:34,160 --> 00:46:35,520
of these push instructions or single

1554
00:46:35,520 --> 00:46:36,000
byte

1555
00:46:36,000 --> 00:46:37,680
um and some of these other instructions

1556
00:46:37,680 --> 00:46:39,520
uh are five bytes

1557
00:46:39,520 --> 00:46:41,040
do i have any six byte instructions i

1558
00:46:41,040 --> 00:46:43,200
don't see any six bytes here um but uh

1559
00:46:43,200 --> 00:46:44,560
you know i think the longest one i've

1560
00:46:44,560 --> 00:46:45,760
seen in x86

1561
00:46:45,760 --> 00:46:47,760
is like a 13 byte floating point

1562
00:46:47,760 --> 00:46:49,359
instruction there's some other weird

1563
00:46:49,359 --> 00:46:51,040
ones that i've seen in x64 but

1564
00:46:51,040 --> 00:46:53,119
they they go up to be pretty humongous

1565
00:46:53,119 --> 00:46:54,079
your average here

1566
00:46:54,079 --> 00:46:55,680
generally somewhere in that two to six

1567
00:46:55,680 --> 00:46:57,760
i'm sorry one to six uh one to six bytes

1568
00:46:57,760 --> 00:46:59,599
is usually we see on average here's a

1569
00:46:59,599 --> 00:47:01,119
you know here for instance an example of

1570
00:47:01,119 --> 00:47:03,520
a six byte six byte instruction right

1571
00:47:03,520 --> 00:47:06,319
okay so again i don't really care too

1572
00:47:06,319 --> 00:47:08,560
much about the op codes because i i

1573
00:47:08,560 --> 00:47:10,160
yes i have a few of them memorized but

1574
00:47:10,160 --> 00:47:12,400
there's no reason to honestly other than

1575
00:47:12,400 --> 00:47:13,599
just seeing them a lot

1576
00:47:13,599 --> 00:47:16,960
um and so and also i i'm not neo i don't

1577
00:47:16,960 --> 00:47:18,960
see the matrix right i can read this

1578
00:47:18,960 --> 00:47:21,520
all right this disassembly um i can't

1579
00:47:21,520 --> 00:47:23,119
always simply look at a bunch of op

1580
00:47:23,119 --> 00:47:24,000
codes and be like oh

1581
00:47:24,000 --> 00:47:26,000
let me let me follow that code right

1582
00:47:26,000 --> 00:47:27,760
there there are some absolute rain men

1583
00:47:27,760 --> 00:47:28,720
out there that can do it

1584
00:47:28,720 --> 00:47:31,680
it's not me okay so next tab over here

1585
00:47:31,680 --> 00:47:33,280
or next column over we have the actual

1586
00:47:33,280 --> 00:47:34,960
assembly instructions right now

1587
00:47:34,960 --> 00:47:36,559
how much assembly do you need to know

1588
00:47:36,559 --> 00:47:38,079
the answer is the more you know

1589
00:47:38,079 --> 00:47:39,680
the better at this you're going to be

1590
00:47:39,680 --> 00:47:41,440
that's there's just no question about

1591
00:47:41,440 --> 00:47:42,000
this

1592
00:47:42,000 --> 00:47:44,079
but i'll also mention that i routinely

1593
00:47:44,079 --> 00:47:45,200
teach people to do

1594
00:47:45,200 --> 00:47:48,400
basic level analysis um with very little

1595
00:47:48,400 --> 00:47:49,119
if any

1596
00:47:49,119 --> 00:47:51,599
uh assembly experience right so so what

1597
00:47:51,599 --> 00:47:52,559
what what does that

1598
00:47:52,559 --> 00:47:54,800
say what uh you know how do we do that

1599
00:47:54,800 --> 00:47:56,319
right with very little uh to know

1600
00:47:56,319 --> 00:47:57,599
assembly experience

1601
00:47:57,599 --> 00:48:01,040
and the answer is that basically

1602
00:48:01,040 --> 00:48:02,800
we simply don't worry about what the

1603
00:48:02,800 --> 00:48:04,880
assembly is saying we focus on api calls

1604
00:48:04,880 --> 00:48:05,280
right

1605
00:48:05,280 --> 00:48:06,559
all the imports that we're talking about

1606
00:48:06,559 --> 00:48:08,319
before those are apis i'm going to show

1607
00:48:08,319 --> 00:48:10,160
you how to go take a hard look

1608
00:48:10,160 --> 00:48:13,119
hard look at those so um notice here

1609
00:48:13,119 --> 00:48:14,319
again we've got a lot of these

1610
00:48:14,319 --> 00:48:14,960
instructions

1611
00:48:14,960 --> 00:48:16,319
i don't have time to walk you through

1612
00:48:16,319 --> 00:48:18,800
this normally when i teach malware

1613
00:48:18,800 --> 00:48:21,520
at rendition we run a five-day course

1614
00:48:21,520 --> 00:48:22,160
and a

1615
00:48:22,160 --> 00:48:25,200
solid day of that is is like deep dive

1616
00:48:25,200 --> 00:48:26,559
into assembly now obviously we then

1617
00:48:26,559 --> 00:48:28,160
continue to reinforce that

1618
00:48:28,160 --> 00:48:29,760
throughout the course learning how to

1619
00:48:29,760 --> 00:48:31,680
reverse again um you know i'm looking at

1620
00:48:31,680 --> 00:48:33,280
my timer here and it looks like i've got

1621
00:48:33,280 --> 00:48:34,880
about

1622
00:48:34,880 --> 00:48:37,040
uh somewhere in that 45 minutes to an

1623
00:48:37,040 --> 00:48:38,559
hour left on the clock

1624
00:48:38,559 --> 00:48:41,440
um and so here here we sit right so

1625
00:48:41,440 --> 00:48:43,920
let's be real um i'm not going to uh not

1626
00:48:43,920 --> 00:48:44,800
going to get into

1627
00:48:44,800 --> 00:48:48,079
the the assembly right okay um so but we

1628
00:48:48,079 --> 00:48:48,559
will

1629
00:48:48,559 --> 00:48:50,240
highlight again that the more of this

1630
00:48:50,240 --> 00:48:51,920
you know the better off you are

1631
00:48:51,920 --> 00:48:53,440
now i'm sure that there's one or two

1632
00:48:53,440 --> 00:48:55,680
folks on you know gatekeeping generally

1633
00:48:55,680 --> 00:48:56,160
folks

1634
00:48:56,160 --> 00:48:58,319
uh here they're you can't do malware

1635
00:48:58,319 --> 00:49:00,559
reversing without assembly and look i'll

1636
00:49:00,559 --> 00:49:01,680
be the first to tell you

1637
00:49:01,680 --> 00:49:04,559
you can't do the best malware analysis

1638
00:49:04,559 --> 00:49:05,920
without knowing some assembly

1639
00:49:05,920 --> 00:49:08,079
but you can get targeted bindings

1640
00:49:08,079 --> 00:49:09,440
without knowing assembly all right and

1641
00:49:09,440 --> 00:49:10,720
that's what i want to show you today

1642
00:49:10,720 --> 00:49:13,359
okay this next column over here the one

1643
00:49:13,359 --> 00:49:13,920
that i'm

1644
00:49:13,920 --> 00:49:16,240
moving the mouse through here um this is

1645
00:49:16,240 --> 00:49:18,000
the uh removing the cursor through uh

1646
00:49:18,000 --> 00:49:20,079
these are details right so so basically

1647
00:49:20,079 --> 00:49:22,160
it's trying to say hey i recognize um

1648
00:49:22,160 --> 00:49:23,119
this is what

1649
00:49:23,119 --> 00:49:25,200
uh these uh basically these details uh

1650
00:49:25,200 --> 00:49:26,960
these details are so right here it says

1651
00:49:26,960 --> 00:49:27,839
push esi

1652
00:49:27,839 --> 00:49:29,920
it says hey esi points right now to the

1653
00:49:29,920 --> 00:49:31,440
entry point or the entry point being the

1654
00:49:31,440 --> 00:49:33,200
first instruction to be executed that

1655
00:49:33,200 --> 00:49:34,000
address now

1656
00:49:34,000 --> 00:49:35,440
by the time we get here it may point

1657
00:49:35,440 --> 00:49:37,520
somewhere else so be bear in mind here

1658
00:49:37,520 --> 00:49:38,000
that

1659
00:49:38,000 --> 00:49:41,200
these are these as they are may

1660
00:49:41,200 --> 00:49:43,760
dynamically update as as we progress um

1661
00:49:43,760 --> 00:49:45,200
in the code right so

1662
00:49:45,200 --> 00:49:46,559
just be aware of that here right that

1663
00:49:46,559 --> 00:49:48,160
you may look you're like oh okay as we

1664
00:49:48,160 --> 00:49:49,359
scroll down here right

1665
00:49:49,359 --> 00:49:50,800
we're like oh okay well it's messing

1666
00:49:50,800 --> 00:49:52,640
with the entry point here well no

1667
00:49:52,640 --> 00:49:54,400
what's happening is the eip the

1668
00:49:54,400 --> 00:49:56,160
instruction pointer right

1669
00:49:56,160 --> 00:49:59,040
so the instruction pointer at this time

1670
00:49:59,040 --> 00:49:59,599
right

1671
00:49:59,599 --> 00:50:02,880
has these values and in x6 x32 and x64

1672
00:50:02,880 --> 00:50:04,800
debugger dynamically updating

1673
00:50:04,800 --> 00:50:07,920
uh these uh these details over by the

1674
00:50:07,920 --> 00:50:09,359
time we get here by the time the

1675
00:50:09,359 --> 00:50:11,280
instruction pointer is here

1676
00:50:11,280 --> 00:50:12,880
right by the time we're executing here

1677
00:50:12,880 --> 00:50:14,640
we haven't executed anything yet other

1678
00:50:14,640 --> 00:50:15,839
than the loader

1679
00:50:15,839 --> 00:50:17,839
by the time we execute to here we may

1680
00:50:17,839 --> 00:50:18,960
end up in

1681
00:50:18,960 --> 00:50:20,480
basically esi is going to point

1682
00:50:20,480 --> 00:50:22,480
somewhere else so just be aware of that

1683
00:50:22,480 --> 00:50:24,319
it's not a false positive it's just a

1684
00:50:24,319 --> 00:50:25,760
matter of know your tools know what

1685
00:50:25,760 --> 00:50:26,960
they're actually telling you right a lot

1686
00:50:26,960 --> 00:50:27,520
of people

1687
00:50:27,520 --> 00:50:29,040
it generates a bunch of junk and i'm

1688
00:50:29,040 --> 00:50:30,880
like no it's not generating junk it's

1689
00:50:30,880 --> 00:50:32,319
just a matter of understanding

1690
00:50:32,319 --> 00:50:34,079
what is the tool trying to tell you in

1691
00:50:34,079 --> 00:50:35,680
the first place okay

1692
00:50:35,680 --> 00:50:37,760
this next as we i'm going to move to the

1693
00:50:37,760 --> 00:50:39,119
right over here and these are our

1694
00:50:39,119 --> 00:50:40,160
registers right

1695
00:50:40,160 --> 00:50:42,319
um registers i like to think about these

1696
00:50:42,319 --> 00:50:43,359
as just buckets

1697
00:50:43,359 --> 00:50:45,520
you may remember a tw i may remember a

1698
00:50:45,520 --> 00:50:46,800
little logic puzzle and if you don't

1699
00:50:46,800 --> 00:50:48,720
remember this um by the way go look this

1700
00:50:48,720 --> 00:50:50,000
up it's pretty cute

1701
00:50:50,000 --> 00:50:52,559
basically there's a there's a man who

1702
00:50:52,559 --> 00:50:54,000
has a canoe

1703
00:50:54,000 --> 00:50:56,800
and he has a grain or half bag of grain

1704
00:50:56,800 --> 00:50:58,160
a hand and a fox

1705
00:50:58,160 --> 00:51:01,280
and his goal is to move these across the

1706
00:51:01,280 --> 00:51:02,319
river

1707
00:51:02,319 --> 00:51:03,680
and he can only carry one of them in the

1708
00:51:03,680 --> 00:51:05,599
canoe he needs to move these

1709
00:51:05,599 --> 00:51:08,400
all three across the river but he can't

1710
00:51:08,400 --> 00:51:10,000
leave the grain with the fog or can't

1711
00:51:10,000 --> 00:51:11,119
leave the grain with the hand

1712
00:51:11,119 --> 00:51:12,640
and can't leave the hen with the vox

1713
00:51:12,640 --> 00:51:14,319
right or the grain only

1714
00:51:14,319 --> 00:51:16,400
the hen will eat the grain or the fox

1715
00:51:16,400 --> 00:51:18,319
will eat the fox will eat the

1716
00:51:18,319 --> 00:51:20,720
the the hen well in order to do this we

1717
00:51:20,720 --> 00:51:22,240
really have this canoe with like

1718
00:51:22,240 --> 00:51:24,160
one bucket we have a temporary storage

1719
00:51:24,160 --> 00:51:26,319
location and we have to be very tactical

1720
00:51:26,319 --> 00:51:28,960
about how we shift data in and out of

1721
00:51:28,960 --> 00:51:30,400
that one spot

1722
00:51:30,400 --> 00:51:31,839
well that's very much like what we're

1723
00:51:31,839 --> 00:51:33,520
dealing with here except we have more

1724
00:51:33,520 --> 00:51:34,319
than one spot

1725
00:51:34,319 --> 00:51:35,839
right now what we have here now of

1726
00:51:35,839 --> 00:51:38,000
course are our multiple spots uh each

1727
00:51:38,000 --> 00:51:40,240
one of these registers being a spot if

1728
00:51:40,240 --> 00:51:42,480
you will these these registers here eax

1729
00:51:42,480 --> 00:51:44,000
down through edi

1730
00:51:44,000 --> 00:51:47,119
now eip's special e flags the special

1731
00:51:47,119 --> 00:51:50,319
flags basically control or log the

1732
00:51:50,319 --> 00:51:52,240
the output of instructions or the

1733
00:51:52,240 --> 00:51:54,079
results of computations

1734
00:51:54,079 --> 00:51:55,200
but the rest of these here are just

1735
00:51:55,200 --> 00:51:57,599
buckets right so the compiler is doing

1736
00:51:57,599 --> 00:51:59,359
and ultimately then happens at runtime

1737
00:51:59,359 --> 00:52:00,800
the compiler is saying okay

1738
00:52:00,800 --> 00:52:02,480
you've given me a bunch of code and i

1739
00:52:02,480 --> 00:52:04,400
know that i have to take this high level

1740
00:52:04,400 --> 00:52:06,240
code and i have to output this in a way

1741
00:52:06,240 --> 00:52:06,960
that can

1742
00:52:06,960 --> 00:52:09,599
be executed on the executed on the

1743
00:52:09,599 --> 00:52:10,240
processor

1744
00:52:10,240 --> 00:52:11,920
that only has eight buckets and what i'm

1745
00:52:11,920 --> 00:52:13,280
gonna have to do is i'm gonna have to

1746
00:52:13,280 --> 00:52:15,280
create a logic puzzle or solve

1747
00:52:15,280 --> 00:52:17,440
a logic puzzle that only allows me to

1748
00:52:17,440 --> 00:52:18,319
execute

1749
00:52:18,319 --> 00:52:20,319
and store x number of these in this case

1750
00:52:20,319 --> 00:52:23,200
eight at a time now as we move into x64

1751
00:52:23,200 --> 00:52:26,720
uh x64 processors uh running an x64 mode

1752
00:52:26,720 --> 00:52:28,559
this of course is an x64 processor

1753
00:52:28,559 --> 00:52:30,400
running in 32-bit mode

1754
00:52:30,400 --> 00:52:33,359
or a 32-bit emulation of but the x64

1755
00:52:33,359 --> 00:52:35,200
processors they have an additional eight

1756
00:52:35,200 --> 00:52:38,240
general purpose registers r8 through r15

1757
00:52:38,240 --> 00:52:40,640
um so again it makes the logic puzzle a

1758
00:52:40,640 --> 00:52:41,520
little easier

1759
00:52:41,520 --> 00:52:44,000
to move down here the uh where my cursor

1760
00:52:44,000 --> 00:52:45,599
is highlighting below the registers

1761
00:52:45,599 --> 00:52:47,280
uh oh actually before i move on let me

1762
00:52:47,280 --> 00:52:48,559
mention here that you can double click

1763
00:52:48,559 --> 00:52:50,240
on a register you're on god mode in a

1764
00:52:50,240 --> 00:52:50,960
debugger

1765
00:52:50,960 --> 00:52:53,040
and you can modify the values all day

1766
00:52:53,040 --> 00:52:54,720
long right now this is all the same

1767
00:52:54,720 --> 00:52:56,319
value interpreter different ways but if

1768
00:52:56,319 --> 00:52:57,680
i wanted to make this zero

1769
00:52:57,680 --> 00:52:59,119
i can do that all right now i'm going to

1770
00:52:59,119 --> 00:53:00,240
cancel this because i'm going to break

1771
00:53:00,240 --> 00:53:00,960
anything

1772
00:53:00,960 --> 00:53:02,640
but you can change you're in god mode

1773
00:53:02,640 --> 00:53:04,160
you can change anything you want here

1774
00:53:04,160 --> 00:53:07,520
go go down here we have the function

1775
00:53:07,520 --> 00:53:09,040
arguments right so this is the

1776
00:53:09,040 --> 00:53:10,880
next piece here now we're not calling a

1777
00:53:10,880 --> 00:53:12,079
function so right now this has no

1778
00:53:12,079 --> 00:53:12,880
meaning

1779
00:53:12,880 --> 00:53:14,160
but what we're looking at here is

1780
00:53:14,160 --> 00:53:15,920
effectively interpreting

1781
00:53:15,920 --> 00:53:18,720
at the time of a function call what

1782
00:53:18,720 --> 00:53:20,079
arguments are being passed to the

1783
00:53:20,079 --> 00:53:20,800
function

1784
00:53:20,800 --> 00:53:22,640
right so that's something to look at

1785
00:53:22,640 --> 00:53:24,079
there as well i'll take a look at that

1786
00:53:24,079 --> 00:53:25,440
as we get into a function call and then

1787
00:53:25,440 --> 00:53:26,880
i'll have a little more meaning

1788
00:53:26,880 --> 00:53:29,440
down here in let's come over here next

1789
00:53:29,440 --> 00:53:30,880
as we move over

1790
00:53:30,880 --> 00:53:34,559
this is our details or hints pain

1791
00:53:34,559 --> 00:53:37,040
the details pane here shows us indeed

1792
00:53:37,040 --> 00:53:39,200
notice here says push ebp well because

1793
00:53:39,200 --> 00:53:41,760
ebp the ebp register is being placed

1794
00:53:41,760 --> 00:53:43,119
onto the stack which we'll talk about in

1795
00:53:43,119 --> 00:53:44,079
just a minute

1796
00:53:44,079 --> 00:53:45,839
because it's being placed onto the stack

1797
00:53:45,839 --> 00:53:48,240
uh it shows us the actual value of ebp

1798
00:53:48,240 --> 00:53:49,920
currently right so it's like oh hey so

1799
00:53:49,920 --> 00:53:51,200
you don't have to go cross reference and

1800
00:53:51,200 --> 00:53:52,319
go look it up here

1801
00:53:52,319 --> 00:53:54,160
now this one's pretty easy so i may not

1802
00:53:54,160 --> 00:53:55,359
have needed this but when it's

1803
00:53:55,359 --> 00:53:56,960
dereferencing something elsewhere in

1804
00:53:56,960 --> 00:53:58,480
memory i don't have to like change my

1805
00:53:58,480 --> 00:54:00,480
dump location and go jump there and read

1806
00:54:00,480 --> 00:54:00,800
it

1807
00:54:00,800 --> 00:54:03,040
and this handles that for me right and

1808
00:54:03,040 --> 00:54:04,480
so i like that

1809
00:54:04,480 --> 00:54:06,480
down here beneath that we have our dump

1810
00:54:06,480 --> 00:54:07,839
panes all right and our dump pane

1811
00:54:07,839 --> 00:54:10,960
basically is just a hex dump of a random

1812
00:54:10,960 --> 00:54:12,160
area i say random

1813
00:54:12,160 --> 00:54:13,599
of an area in memory all right in this

1814
00:54:13,599 --> 00:54:15,040
particular case i think it's sitting in

1815
00:54:15,040 --> 00:54:16,160
ntdl

1816
00:54:16,160 --> 00:54:18,079
but any memory location that i want to

1817
00:54:18,079 --> 00:54:20,000
go to i can simply control g

1818
00:54:20,000 --> 00:54:22,319
and i can say hey go over to this memory

1819
00:54:22,319 --> 00:54:24,000
location right so if i wanted to go to

1820
00:54:24,000 --> 00:54:27,359
let's say 413

1821
00:54:27,359 --> 00:54:30,558
i don't know 8 0 0.

1822
00:54:31,040 --> 00:54:32,880
we can simply jump there and we can see

1823
00:54:32,880 --> 00:54:34,400
the actual data here now this doesn't

1824
00:54:34,400 --> 00:54:36,160
make a whole lot of sense right now

1825
00:54:36,160 --> 00:54:38,160
because well i just jumped somewhere

1826
00:54:38,160 --> 00:54:40,240
randomly but you can see indeed that we

1827
00:54:40,240 --> 00:54:40,720
can go

1828
00:54:40,720 --> 00:54:43,040
see both the hex values as well as the

1829
00:54:43,040 --> 00:54:44,079
ascii values and

1830
00:54:44,079 --> 00:54:45,920
if you right click inside here um you

1831
00:54:45,920 --> 00:54:47,440
can see then that maybe for instance

1832
00:54:47,440 --> 00:54:48,880
let's say that you wanted to go in

1833
00:54:48,880 --> 00:54:51,040
and change these to addresses right

1834
00:54:51,040 --> 00:54:52,640
let's say that you're looking at

1835
00:54:52,640 --> 00:54:54,480
uh let's say you're looking unsigned

1836
00:54:54,480 --> 00:54:56,559
right let me convert these in addresses

1837
00:54:56,559 --> 00:54:58,400
or maybe hex addresses is a better uh

1838
00:54:58,400 --> 00:54:59,520
better plan there

1839
00:54:59,520 --> 00:55:02,559
go integer and we'll just say hexalong

1840
00:55:02,559 --> 00:55:03,119
all right so

1841
00:55:03,119 --> 00:55:04,240
this takes care of all the little

1842
00:55:04,240 --> 00:55:06,160
indian-ness for us again it's all the

1843
00:55:06,160 --> 00:55:07,119
same data

1844
00:55:07,119 --> 00:55:08,960
just looking at uh just looking at a

1845
00:55:08,960 --> 00:55:10,880
different different way to a way to

1846
00:55:10,880 --> 00:55:11,599
interpret it

1847
00:55:11,599 --> 00:55:13,599
i typically have it on hex ascii notice

1848
00:55:13,599 --> 00:55:14,960
here though again right if you're

1849
00:55:14,960 --> 00:55:16,319
familiar with a little endian you're the

1850
00:55:16,319 --> 00:55:17,599
most significant versus at least

1851
00:55:17,599 --> 00:55:19,520
anywhere in byte notice here uh

1852
00:55:19,520 --> 00:55:22,240
f9 at four zero zero zero six a right so

1853
00:55:22,240 --> 00:55:23,920
if i drop back over here and i say hey

1854
00:55:23,920 --> 00:55:24,480
make these

1855
00:55:24,480 --> 00:55:26,240
uh make these addresses notice here that

1856
00:55:26,240 --> 00:55:28,079
it's flipped right so it's actually gone

1857
00:55:28,079 --> 00:55:29,040
through and flipped the

1858
00:55:29,040 --> 00:55:31,520
flip the addresses for us all right i've

1859
00:55:31,520 --> 00:55:33,280
done a little indian right

1860
00:55:33,280 --> 00:55:36,000
so again six a zero zero four zero f9

1861
00:55:36,000 --> 00:55:37,200
and if you're not familiar with that

1862
00:55:37,200 --> 00:55:38,880
don't worry about it little ndns for

1863
00:55:38,880 --> 00:55:40,799
for the win google that down the road

1864
00:55:40,799 --> 00:55:42,319
and then finally over here on the right

1865
00:55:42,319 --> 00:55:44,079
side we have our stack the stack

1866
00:55:44,079 --> 00:55:47,440
is tracked by esp esp stands for the

1867
00:55:47,440 --> 00:55:48,079
extended

1868
00:55:48,079 --> 00:55:50,480
stack pointer right so sp stack pointer

1869
00:55:50,480 --> 00:55:51,680
the stack is a

1870
00:55:51,680 --> 00:55:54,160
temporary uh scratch space a temporary

1871
00:55:54,160 --> 00:55:56,079
storage or scratch space

1872
00:55:56,079 --> 00:55:59,440
for the for the processor right so

1873
00:55:59,440 --> 00:56:01,839
and the stack stores a very temporary

1874
00:56:01,839 --> 00:56:02,640
data

1875
00:56:02,640 --> 00:56:05,119
that we might that we might need and

1876
00:56:05,119 --> 00:56:05,760
it's a last

1877
00:56:05,760 --> 00:56:08,319
in first out buffer right so push places

1878
00:56:08,319 --> 00:56:09,520
something on the stack

1879
00:56:09,520 --> 00:56:12,079
um a pop removes something from the

1880
00:56:12,079 --> 00:56:13,119
stack right so

1881
00:56:13,119 --> 00:56:15,200
typically if we i mentioned before here

1882
00:56:15,200 --> 00:56:17,359
that we have a fixed number of buckets

1883
00:56:17,359 --> 00:56:19,359
if we need to go save a piece of data

1884
00:56:19,359 --> 00:56:22,000
for uh you know immediate reuse or

1885
00:56:22,000 --> 00:56:24,160
reuse in the very short term we're going

1886
00:56:24,160 --> 00:56:25,839
to put it on the stack local variables

1887
00:56:25,839 --> 00:56:27,200
if you're a programmer and you remember

1888
00:56:27,200 --> 00:56:29,200
local versus global variables

1889
00:56:29,200 --> 00:56:31,599
local variables go on a stack and global

1890
00:56:31,599 --> 00:56:32,559
variables

1891
00:56:32,559 --> 00:56:34,160
go elsewhere in memory typically on a

1892
00:56:34,160 --> 00:56:36,240
heap right so

1893
00:56:36,240 --> 00:56:37,520
something to mention something to

1894
00:56:37,520 --> 00:56:39,520
mention there okay a couple of things i

1895
00:56:39,520 --> 00:56:41,200
want to highlight here before we get or

1896
00:56:41,200 --> 00:56:42,400
as we get going right

1897
00:56:42,400 --> 00:56:44,000
i'm going to go right click here and one

1898
00:56:44,000 --> 00:56:46,400
of my go-to functions here

1899
00:56:46,400 --> 00:56:48,559
in the uh basically in the malware or

1900
00:56:48,559 --> 00:56:49,599
sorry in the debugger

1901
00:56:49,599 --> 00:56:51,599
is when analyzing malware is i'm going

1902
00:56:51,599 --> 00:56:53,200
to say let's go ahead

1903
00:56:53,200 --> 00:56:57,200
and search for and i want to say

1904
00:56:57,200 --> 00:56:59,280
current uh current or sorry current

1905
00:56:59,280 --> 00:57:00,319
module

1906
00:57:00,319 --> 00:57:02,640
and i say then show me intermodular

1907
00:57:02,640 --> 00:57:03,440
calls right

1908
00:57:03,440 --> 00:57:05,359
so what are we doing here right well

1909
00:57:05,359 --> 00:57:06,799
everything interesting in malware

1910
00:57:06,799 --> 00:57:08,000
happens via an api

1911
00:57:08,000 --> 00:57:10,000
windows api in fact we're looking at

1912
00:57:10,000 --> 00:57:12,000
some api names some interesting api

1913
00:57:12,000 --> 00:57:14,160
names and what i'm interested in knowing

1914
00:57:14,160 --> 00:57:15,280
here is what

1915
00:57:15,280 --> 00:57:18,000
calls are happening that go outside of

1916
00:57:18,000 --> 00:57:18,480
this

1917
00:57:18,480 --> 00:57:20,240
basically outside of this malware right

1918
00:57:20,240 --> 00:57:21,920
so i'm going to right click here and

1919
00:57:21,920 --> 00:57:23,839
you'll see then some of these calls now

1920
00:57:23,839 --> 00:57:24,960
this one's an interesting piece of

1921
00:57:24,960 --> 00:57:26,000
malware because

1922
00:57:26,000 --> 00:57:29,040
of course it has some has some

1923
00:57:29,040 --> 00:57:31,440
obfuscation where we can see the names

1924
00:57:31,440 --> 00:57:32,319
of apis

1925
00:57:32,319 --> 00:57:34,000
we don't see them directly imported i'm

1926
00:57:34,000 --> 00:57:35,920
going to drag this is currently sample

1927
00:57:35,920 --> 00:57:36,319
2.

1928
00:57:36,319 --> 00:57:37,920
i'm going to drag sample 1 in because it

1929
00:57:37,920 --> 00:57:39,599
doesn't have as much of that

1930
00:57:39,599 --> 00:57:42,000
and we're going to drop that into x32

1931
00:57:42,000 --> 00:57:43,040
debug

1932
00:57:43,040 --> 00:57:45,760
so that so that i can show show you

1933
00:57:45,760 --> 00:57:47,920
another example of this right

1934
00:57:47,920 --> 00:57:51,200
okay so here's x32 debug

1935
00:57:51,200 --> 00:57:54,240
with sample one and i'm going to right

1936
00:57:54,240 --> 00:57:55,680
click over here and say hey

1937
00:57:55,680 --> 00:57:59,440
inside the current module show me

1938
00:57:59,440 --> 00:58:01,440
intermodular calls it calls to another

1939
00:58:01,440 --> 00:58:03,280
module like 2a dll

1940
00:58:03,280 --> 00:58:05,280
right again my goal here is to try to

1941
00:58:05,280 --> 00:58:06,319
identify

1942
00:58:06,319 --> 00:58:08,400
how particular uh basically how

1943
00:58:08,400 --> 00:58:09,920
particular portions of

1944
00:58:09,920 --> 00:58:12,960
uh portions of an api uh or sorry uh how

1945
00:58:12,960 --> 00:58:14,400
malware is using certain portions of

1946
00:58:14,400 --> 00:58:15,440
this api

1947
00:58:15,440 --> 00:58:16,960
all right so now that i've got a bunch

1948
00:58:16,960 --> 00:58:18,480
of these i could say for instance

1949
00:58:18,480 --> 00:58:20,400
uh come down here to the search bar and

1950
00:58:20,400 --> 00:58:22,319
i could say hey show me anything that

1951
00:58:22,319 --> 00:58:24,000
contains the word create all right so

1952
00:58:24,000 --> 00:58:25,440
create process well i'm interested in

1953
00:58:25,440 --> 00:58:25,920
that

1954
00:58:25,920 --> 00:58:27,680
right why are the two create processes

1955
00:58:27,680 --> 00:58:29,599
create process a and w well one of these

1956
00:58:29,599 --> 00:58:31,119
uses an ascii argument the other one

1957
00:58:31,119 --> 00:58:32,640
uses a unicode argument

1958
00:58:32,640 --> 00:58:34,000
why are they both on the same piece of

1959
00:58:34,000 --> 00:58:36,240
malware maybe they're sharing code

1960
00:58:36,240 --> 00:58:37,920
maybe somebody wrote one piece somebody

1961
00:58:37,920 --> 00:58:39,520
wrote another i don't know but i'm going

1962
00:58:39,520 --> 00:58:40,880
to double click on this and i can say

1963
00:58:40,880 --> 00:58:42,640
hey let's go take a look

1964
00:58:42,640 --> 00:58:45,040
around create process right so i'm going

1965
00:58:45,040 --> 00:58:46,880
to adjust my windows here a little bit

1966
00:58:46,880 --> 00:58:48,079
to get some

1967
00:58:48,079 --> 00:58:51,200
better a little bit better fuel

1968
00:58:51,200 --> 00:58:52,799
and here's create process all right so

1969
00:58:52,799 --> 00:58:55,040
let's take a look create process a

1970
00:58:55,040 --> 00:58:56,400
what's going on here well that first

1971
00:58:56,400 --> 00:58:58,480
argument to create process

1972
00:58:58,480 --> 00:58:59,599
and by the way if you're not familiar

1973
00:58:59,599 --> 00:59:01,599
with this uh we can simply uh

1974
00:59:01,599 --> 00:59:05,200
go to the googles why did i open

1975
00:59:05,200 --> 00:59:06,960
internet explorer what a horrible

1976
00:59:06,960 --> 00:59:07,839
horrible plan

1977
00:59:07,839 --> 00:59:11,280
don't do that right okay so let's try

1978
00:59:11,280 --> 00:59:12,720
this instead

1979
00:59:12,720 --> 00:59:14,799
and we'll use firefox and i'm going to

1980
00:59:14,799 --> 00:59:17,040
say create process

1981
00:59:17,040 --> 00:59:18,559
and you can use the a or you can leave

1982
00:59:18,559 --> 00:59:20,079
the a off i don't really care

1983
00:59:20,079 --> 00:59:22,240
uh it's this is an entirely up to you

1984
00:59:22,240 --> 00:59:24,240
kind of uh kind of thing right

1985
00:59:24,240 --> 00:59:26,400
okay so uh if you leave the a off it's

1986
00:59:26,400 --> 00:59:27,359
still going to get you to the create

1987
00:59:27,359 --> 00:59:28,640
process function

1988
00:59:28,640 --> 00:59:30,559
that's the reality and i just go over to

1989
00:59:30,559 --> 00:59:32,160
the microsoft documentation

1990
00:59:32,160 --> 00:59:34,559
it's funny because people gripe all the

1991
00:59:34,559 --> 00:59:36,319
time about how bad the microsoft

1992
00:59:36,319 --> 00:59:37,599
documentation is

1993
00:59:37,599 --> 00:59:39,760
honestly it's really not that bad people

1994
00:59:39,760 --> 00:59:41,040
uh yeah i

1995
00:59:41,040 --> 00:59:42,720
i actually think it's pretty good what i

1996
00:59:42,720 --> 00:59:44,319
will mention is you know a lot of these

1997
00:59:44,319 --> 00:59:45,839
folks that gripe about microsoft's

1998
00:59:45,839 --> 00:59:47,280
documentation

1999
00:59:47,280 --> 00:59:48,720
they're big open source buffs right

2000
00:59:48,720 --> 00:59:50,000
they're like well i can't go read the

2001
00:59:50,000 --> 00:59:51,760
source i'm like well you can't but

2002
00:59:51,760 --> 00:59:53,359
wow they give you a lot of stuff here

2003
00:59:53,359 --> 00:59:55,440
right so i notice here the application

2004
00:59:55,440 --> 00:59:56,880
name and the command line

2005
00:59:56,880 --> 00:59:58,960
those are parameters one and two as i

2006
00:59:58,960 --> 01:00:00,400
look back at these pushes

2007
01:00:00,400 --> 01:00:01,599
that's really what i'm looking at here

2008
01:00:01,599 --> 01:00:03,440
right so eix and ecx

2009
01:00:03,440 --> 01:00:05,599
what's loaded in those right well look

2010
01:00:05,599 --> 01:00:07,280
over here ecx um

2011
01:00:07,280 --> 01:00:10,480
we have a let's see

2012
01:00:10,480 --> 01:00:12,799
that gets xor with itself right xoring

2013
01:00:12,799 --> 01:00:14,960
anything with itself sets it to zero

2014
01:00:14,960 --> 01:00:17,599
um so the command line isn't used um and

2015
01:00:17,599 --> 01:00:18,319
in which case

2016
01:00:18,319 --> 01:00:19,920
all right if we read the documentation

2017
01:00:19,920 --> 01:00:23,119
the rtfm right read the find manual

2018
01:00:23,119 --> 01:00:25,119
we would see then that the application

2019
01:00:25,119 --> 01:00:26,240
name

2020
01:00:26,240 --> 01:00:28,400
um can be null right but if it is if it

2021
01:00:28,400 --> 01:00:30,160
is null then the command line string i

2022
01:00:30,160 --> 01:00:31,599
can't be null well we already know the

2023
01:00:31,599 --> 01:00:33,040
command line string is null

2024
01:00:33,040 --> 01:00:36,160
and i say we know this because right i'm

2025
01:00:36,160 --> 01:00:38,160
looking here and i'm backing up from

2026
01:00:38,160 --> 01:00:40,559
the call right so uh anytime and again

2027
01:00:40,559 --> 01:00:42,079
this is going to get deep into assembly

2028
01:00:42,079 --> 01:00:43,520
we i mentioned before i don't have time

2029
01:00:43,520 --> 01:00:45,280
to get into all the reasons for and all

2030
01:00:45,280 --> 01:00:45,680
the

2031
01:00:45,680 --> 01:00:47,520
you know all the pieces around assembly

2032
01:00:47,520 --> 01:00:49,200
here but what i will say

2033
01:00:49,200 --> 01:00:51,520
is that here we're going to back up

2034
01:00:51,520 --> 01:00:53,119
pushes from a call

2035
01:00:53,119 --> 01:00:55,599
so this is argument 1 argument two three

2036
01:00:55,599 --> 01:00:57,280
or if you count from zero whatever i'm

2037
01:00:57,280 --> 01:00:58,640
not going to get into that debate here

2038
01:00:58,640 --> 01:01:00,240
it's the first argument second argument

2039
01:01:00,240 --> 01:01:01,680
third fourth etc

2040
01:01:01,680 --> 01:01:04,400
right okay so to come back here like i

2041
01:01:04,400 --> 01:01:05,280
said i'm trying to find out what the

2042
01:01:05,280 --> 01:01:06,400
process name is

2043
01:01:06,400 --> 01:01:08,079
i have command line i have application

2044
01:01:08,079 --> 01:01:09,920
name right so both of those can't be

2045
01:01:09,920 --> 01:01:10,319
null

2046
01:01:10,319 --> 01:01:12,640
when i read the redefine manual i know

2047
01:01:12,640 --> 01:01:14,720
that anything xor with itself is 0

2048
01:01:14,720 --> 01:01:16,640
meaning null so i know that the command

2049
01:01:16,640 --> 01:01:18,559
line is null hence the

2050
01:01:18,559 --> 01:01:20,480
application name can't be so now i'm

2051
01:01:20,480 --> 01:01:21,920
literally just going to back up and say

2052
01:01:21,920 --> 01:01:22,400
hey

2053
01:01:22,400 --> 01:01:25,680
where did eax last get set right now

2054
01:01:25,680 --> 01:01:27,760
before i do this or as i do this let's

2055
01:01:27,760 --> 01:01:28,720
go ahead then

2056
01:01:28,720 --> 01:01:31,200
and let's go ahead and take a look at

2057
01:01:31,200 --> 01:01:32,000
ida pro

2058
01:01:32,000 --> 01:01:34,319
yet another tool that we can that we can

2059
01:01:34,319 --> 01:01:36,720
use ida pro is obscenely expensive

2060
01:01:36,720 --> 01:01:37,920
well worth the money if you're doing a

2061
01:01:37,920 --> 01:01:39,839
lot of this work though we're just going

2062
01:01:39,839 --> 01:01:41,599
to drop into the freeware version

2063
01:01:41,599 --> 01:01:43,520
and take a take a quick look freeware is

2064
01:01:43,520 --> 01:01:45,119
not licensed for commercial use this of

2065
01:01:45,119 --> 01:01:46,640
course is not commercial use

2066
01:01:46,640 --> 01:01:50,240
and my regular malware vm has all that

2067
01:01:50,240 --> 01:01:51,760
you know has the license and all that

2068
01:01:51,760 --> 01:01:54,000
anyway um i want to show you in the same

2069
01:01:54,000 --> 01:01:55,520
version you're going to use

2070
01:01:55,520 --> 01:01:58,000
um and so what i want to drop back or

2071
01:01:58,000 --> 01:01:59,520
the same version that you might use

2072
01:01:59,520 --> 01:02:00,880
um and so i'm just going to drop back

2073
01:02:00,880 --> 01:02:02,720
here and give you an example of taking a

2074
01:02:02,720 --> 01:02:04,240
look at that create process a

2075
01:02:04,240 --> 01:02:06,319
and how much easier it makes here by the

2076
01:02:06,319 --> 01:02:07,520
way i'm going to go and change my font

2077
01:02:07,520 --> 01:02:09,039
just to make it just a little bit bigger

2078
01:02:09,039 --> 01:02:09,920
here

2079
01:02:09,920 --> 01:02:12,079
and you draw back over to eye to view

2080
01:02:12,079 --> 01:02:14,559
and then options font comes up

2081
01:02:14,559 --> 01:02:16,880
and sadly with ida it only allows you to

2082
01:02:16,880 --> 01:02:17,680
go change

2083
01:02:17,680 --> 01:02:20,079
the the font in the big window the

2084
01:02:20,079 --> 01:02:21,680
assembly window but that's fine

2085
01:02:21,680 --> 01:02:23,280
it's still good for us but as i come

2086
01:02:23,280 --> 01:02:24,400
over here to my imports window

2087
01:02:24,400 --> 01:02:25,760
everything's still the same right so i'm

2088
01:02:25,760 --> 01:02:27,280
going to control f over here

2089
01:02:27,280 --> 01:02:28,960
and i'm going to say hey show me create

2090
01:02:28,960 --> 01:02:31,440
process

2091
01:02:32,799 --> 01:02:34,960
right so create i'll need to spell

2092
01:02:34,960 --> 01:02:36,000
create correctly

2093
01:02:36,000 --> 01:02:37,760
as it turns out uh so i'm going to go

2094
01:02:37,760 --> 01:02:39,039
grab this

2095
01:02:39,039 --> 01:02:42,640
create process great process a i believe

2096
01:02:42,640 --> 01:02:43,680
is what we're looking at

2097
01:02:43,680 --> 01:02:45,760
and then i'm going to use an x to cross

2098
01:02:45,760 --> 01:02:47,119
reference i'm going to say hey show me

2099
01:02:47,119 --> 01:02:48,799
my cross references where is this thing

2100
01:02:48,799 --> 01:02:49,839
referenced from it

2101
01:02:49,839 --> 01:02:51,440
this is very much like this is a

2102
01:02:51,440 --> 01:02:54,240
two-step process that basically got us

2103
01:02:54,240 --> 01:02:55,680
the same date or gets us to the same

2104
01:02:55,680 --> 01:02:57,599
place that basically

2105
01:02:57,599 --> 01:03:00,960
the search for intermodular calls got us

2106
01:03:00,960 --> 01:03:02,000
right now this gets

2107
01:03:02,000 --> 01:03:03,440
us to the same spot all right so i click

2108
01:03:03,440 --> 01:03:05,039
okay over here one of the things i like

2109
01:03:05,039 --> 01:03:06,559
about ida that's super useful

2110
01:03:06,559 --> 01:03:08,799
is i simply press here and i highlight

2111
01:03:08,799 --> 01:03:09,680
eax

2112
01:03:09,680 --> 01:03:12,000
and then you can see uh okay i highlight

2113
01:03:12,000 --> 01:03:12,799
eax

2114
01:03:12,799 --> 01:03:16,480
and game on um we are uh we're go go go

2115
01:03:16,480 --> 01:03:17,440
here all right

2116
01:03:17,440 --> 01:03:19,920
okay so uh notice here then it shows the

2117
01:03:19,920 --> 01:03:22,000
highlights of what happened eax before

2118
01:03:22,000 --> 01:03:23,599
this so i see this being moved into an

2119
01:03:23,599 --> 01:03:24,640
offset with a structure

2120
01:03:24,640 --> 01:03:27,760
right before call i also see a push um

2121
01:03:27,760 --> 01:03:28,400
which is

2122
01:03:28,400 --> 01:03:30,640
very frequently uh push uh sending an

2123
01:03:30,640 --> 01:03:31,599
argument uh

2124
01:03:31,599 --> 01:03:34,960
to a basically sent an argument um to a

2125
01:03:34,960 --> 01:03:35,520
function

2126
01:03:35,520 --> 01:03:37,440
now let's see some other pushes here

2127
01:03:37,440 --> 01:03:38,640
right so we see the push

2128
01:03:38,640 --> 01:03:41,599
and it says com spec right what is uh

2129
01:03:41,599 --> 01:03:43,200
what is com spec well let's google home

2130
01:03:43,200 --> 01:03:44,640
spec if we're not familiar with it

2131
01:03:44,640 --> 01:03:46,880
or now it's a google com spec but we'll

2132
01:03:46,880 --> 01:03:48,079
do that i don't want to use any dirty

2133
01:03:48,079 --> 01:03:49,039
knowledge here

2134
01:03:49,039 --> 01:03:51,920
all right it's a comma spec while we're

2135
01:03:51,920 --> 01:03:53,280
doing that i'm going to go ahead and i'm

2136
01:03:53,280 --> 01:03:55,359
going to come over to a set

2137
01:03:55,359 --> 01:03:58,160
what i meant was a set and i'm going to

2138
01:03:58,160 --> 01:03:59,440
take a look at my

2139
01:03:59,440 --> 01:04:01,280
variables and you'll notice here there's

2140
01:04:01,280 --> 01:04:03,280
a com spec

2141
01:04:03,280 --> 01:04:04,880
notice here there's a comma spec and it

2142
01:04:04,880 --> 01:04:06,960
is the command prompt right

2143
01:04:06,960 --> 01:04:08,880
com spec is environment variable and dos

2144
01:04:08,880 --> 01:04:10,319
windows et cetera points the command

2145
01:04:10,319 --> 01:04:11,440
line interpreter

2146
01:04:11,440 --> 01:04:12,960
why i might use the word commas back

2147
01:04:12,960 --> 01:04:15,359
here right so well the answer is that

2148
01:04:15,359 --> 01:04:17,359
if i simply expand my environment

2149
01:04:17,359 --> 01:04:18,480
strings first

2150
01:04:18,480 --> 01:04:20,559
right and i suspect if we drop into this

2151
01:04:20,559 --> 01:04:22,000
call here we will see

2152
01:04:22,000 --> 01:04:24,880
a oh maybe not i was going to say an

2153
01:04:24,880 --> 01:04:27,039
expand environment strings we'll see

2154
01:04:27,039 --> 01:04:29,200
was expecting to see that here basically

2155
01:04:29,200 --> 01:04:30,559
uh typically what we're going to expect

2156
01:04:30,559 --> 01:04:31,200
to see is

2157
01:04:31,200 --> 01:04:33,599
is the com spec is going to uh basically

2158
01:04:33,599 --> 01:04:34,480
be resolved

2159
01:04:34,480 --> 01:04:36,640
to the command prompt right okay so

2160
01:04:36,640 --> 01:04:38,079
again we're not executing ida pro but i

2161
01:04:38,079 --> 01:04:39,440
just wanted to highlight kind of some

2162
01:04:39,440 --> 01:04:41,200
some thoughts around thoughts around

2163
01:04:41,200 --> 01:04:43,119
that i'm going to go ahead now and

2164
01:04:43,119 --> 01:04:46,400
let's go ahead and set in my let's say

2165
01:04:46,400 --> 01:04:47,280
my sample

2166
01:04:47,280 --> 01:04:48,480
sample one this is the one we were

2167
01:04:48,480 --> 01:04:50,319
looking at with create process a i'm

2168
01:04:50,319 --> 01:04:51,599
going to go ahead and set a breakpoint

2169
01:04:51,599 --> 01:04:52,559
here all right so

2170
01:04:52,559 --> 01:04:55,280
f2 set a breakpoint i'm also going to

2171
01:04:55,280 --> 01:04:57,359
drop back over here my references tab

2172
01:04:57,359 --> 01:04:59,359
this is where the remember when i said

2173
01:04:59,359 --> 01:05:00,960
hey let's go try to find

2174
01:05:00,960 --> 01:05:02,799
intermodular calls this is where they

2175
01:05:02,799 --> 01:05:04,640
all went right we'll create processes do

2176
01:05:04,640 --> 01:05:05,920
i want to know when a process gets

2177
01:05:05,920 --> 01:05:07,599
created oh heck yes right

2178
01:05:07,599 --> 01:05:09,119
so i'm going to press f2 and set a

2179
01:05:09,119 --> 01:05:10,799
breakpoint there as well then i'm going

2180
01:05:10,799 --> 01:05:11,920
to delete this and i'm going to take a

2181
01:05:11,920 --> 01:05:13,680
look at some of my other intermodular

2182
01:05:13,680 --> 01:05:15,200
calls anything else that i'm interested

2183
01:05:15,200 --> 01:05:16,160
in here right

2184
01:05:16,160 --> 01:05:17,680
and the answer is yeah i bet there

2185
01:05:17,680 --> 01:05:20,000
probably is uh let's see

2186
01:05:20,000 --> 01:05:21,520
just kind of scroll around here a little

2187
01:05:21,520 --> 01:05:24,640
bit what else do i see

2188
01:05:25,119 --> 01:05:27,119
it might be i mean there's all kinds of

2189
01:05:27,119 --> 01:05:28,480
stuff here that might be interesting

2190
01:05:28,480 --> 01:05:30,240
right but like what is the most

2191
01:05:30,240 --> 01:05:32,319
interesting

2192
01:05:32,319 --> 01:05:36,160
let's see lots of stuff going here

2193
01:05:36,160 --> 01:05:39,440
how about i look at it right yeah

2194
01:05:39,440 --> 01:05:42,640
let's do this all right so actually is

2195
01:05:42,640 --> 01:05:50,160
there a creeps

2196
01:05:50,160 --> 01:05:52,880
yeah so let's do this um we'll go ahead

2197
01:05:52,880 --> 01:05:54,720
this is our process list basically we're

2198
01:05:54,720 --> 01:05:56,319
walking a process list

2199
01:05:56,319 --> 01:05:59,440
let's see your tool help

2200
01:05:59,599 --> 01:06:02,240
okay so that process 32 first and next

2201
01:06:02,240 --> 01:06:03,280
if you google that

2202
01:06:03,280 --> 01:06:06,319
it's going to then basically

2203
01:06:06,319 --> 01:06:09,359
it's going to basically look at the

2204
01:06:09,359 --> 01:06:10,000
return

2205
01:06:10,000 --> 01:06:13,280
from a basically return from a

2206
01:06:13,280 --> 01:06:15,200
call call to create tool help 32

2207
01:06:15,200 --> 01:06:17,039
snapshot right again if you just read

2208
01:06:17,039 --> 01:06:18,480
the manual on this if you googled

2209
01:06:18,480 --> 01:06:20,240
process 32 first or next

2210
01:06:20,240 --> 01:06:22,079
you would see this create tool help 32

2211
01:06:22,079 --> 01:06:24,079
snapshot

2212
01:06:24,079 --> 01:06:29,680
create tool help 32 snapshot

2213
01:06:30,839 --> 01:06:33,039
right isn't it cool that google just

2214
01:06:33,039 --> 01:06:34,319
auto completed they were like

2215
01:06:34,319 --> 01:06:35,920
malware did you mean how is it used in

2216
01:06:35,920 --> 01:06:37,599
malware of course it is right

2217
01:06:37,599 --> 01:06:39,359
um okay so what i'm going to do here

2218
01:06:39,359 --> 01:06:40,720
then is i'm going to say set

2219
01:06:40,720 --> 01:06:43,119
vpx right and what i'm saying here is

2220
01:06:43,119 --> 01:06:44,480
set a breakpoint

2221
01:06:44,480 --> 01:06:48,559
and this is going to be on kernel 32

2222
01:06:48,559 --> 01:06:52,400
chrono 32 dot create 1232 snapshot

2223
01:06:52,400 --> 01:06:56,799
and it says ah fail it wants the

2224
01:06:56,960 --> 01:07:01,839
dum dum dum dum set vpx

2225
01:07:02,079 --> 01:07:05,520
kernel 32

2226
01:07:12,559 --> 01:07:14,400
so notice there um that there are very

2227
01:07:14,400 --> 01:07:15,680
few things in windows that are case

2228
01:07:15,680 --> 01:07:17,200
sensitive and it turns out that

2229
01:07:17,200 --> 01:07:20,160
um in uh certainly um in the debugger

2230
01:07:20,160 --> 01:07:22,160
here uh it actually is case sensor so

2231
01:07:22,160 --> 01:07:23,039
okay cool

2232
01:07:23,039 --> 01:07:25,920
um pre-1232 snapshot with the proper

2233
01:07:25,920 --> 01:07:26,960
camel case

2234
01:07:26,960 --> 01:07:29,440
uh got us there in fact you'll note here

2235
01:07:29,440 --> 01:07:31,280
uh indeed the camel case i had it all

2236
01:07:31,280 --> 01:07:33,680
lower case uh like a lazy bum

2237
01:07:33,680 --> 01:07:35,599
um and indeed uh not not so much right

2238
01:07:35,599 --> 01:07:36,799
so now we have a break point there and

2239
01:07:36,799 --> 01:07:38,079
in fact we can view all of our break

2240
01:07:38,079 --> 01:07:38,799
points here

2241
01:07:38,799 --> 01:07:40,640
you'll notice that several of these are

2242
01:07:40,640 --> 01:07:43,280
set in several of these are set in the

2243
01:07:43,280 --> 01:07:44,160
malware

2244
01:07:44,160 --> 01:07:46,559
whereas one of these is actually set not

2245
01:07:46,559 --> 01:07:48,640
in the malware it's set in

2246
01:07:48,640 --> 01:07:51,440
set in the dll itself right now the

2247
01:07:51,440 --> 01:07:53,119
reason i did that here is that i don't

2248
01:07:53,119 --> 01:07:54,960
see a call to this right but

2249
01:07:54,960 --> 01:07:57,359
i know that because there's a process 32

2250
01:07:57,359 --> 01:07:58,640
first and again this is a lot of

2251
01:07:58,640 --> 01:08:00,160
experience that goes into this

2252
01:08:00,160 --> 01:08:01,760
um and reading you don't have to be a

2253
01:08:01,760 --> 01:08:03,599
dev to reverse engineer malware but the

2254
01:08:03,599 --> 01:08:04,240
more

2255
01:08:04,240 --> 01:08:06,319
developer documentation you read and

2256
01:08:06,319 --> 01:08:07,280
understand

2257
01:08:07,280 --> 01:08:08,319
the better you're going to be at

2258
01:08:08,319 --> 01:08:09,440
reversing malware because you're going

2259
01:08:09,440 --> 01:08:11,680
to understand how these apis are used

2260
01:08:11,680 --> 01:08:12,000
right

2261
01:08:12,000 --> 01:08:13,680
and you can't do interesting stuff in

2262
01:08:13,680 --> 01:08:15,599
windows without calling apis

2263
01:08:15,599 --> 01:08:17,759
the system calls uh you know do all the

2264
01:08:17,759 --> 01:08:21,040
interesting stuff for us so

2265
01:08:21,359 --> 01:08:22,319
i'm gonna go ahead now and run the

2266
01:08:22,319 --> 01:08:25,120
malware now i don't know what's going to

2267
01:08:25,120 --> 01:08:26,158
happen here right

2268
01:08:26,158 --> 01:08:27,679
and so i'm going to go ahead and take a

2269
01:08:27,679 --> 01:08:30,000
snapshot and i'm going to say

2270
01:08:30,000 --> 01:08:33,520
pre-exec all right so pre-execution

2271
01:08:33,520 --> 01:08:35,439
reason i do this is i can jump back to

2272
01:08:35,439 --> 01:08:37,359
this point i can go play with this

2273
01:08:37,359 --> 01:08:38,880
maybe i wanted to set some other break

2274
01:08:38,880 --> 01:08:40,479
points and i just didn't just wasn't

2275
01:08:40,479 --> 01:08:41,920
sure about those yet so i'm going to go

2276
01:08:41,920 --> 01:08:42,719
run now

2277
01:08:42,719 --> 01:08:44,719
and basically this is going to run the

2278
01:08:44,719 --> 01:08:46,000
malware in a controlled

2279
01:08:46,000 --> 01:08:47,759
controlled environment so that i can

2280
01:08:47,759 --> 01:08:50,238
inspect how these apis are being used

2281
01:08:50,238 --> 01:08:51,279
this is the stuff we

2282
01:08:51,279 --> 01:08:54,560
can't do with a with a sandbox right

2283
01:08:54,560 --> 01:08:56,238
first off i want to see do these ever

2284
01:08:56,238 --> 01:08:58,399
get hit and then secondarily like if

2285
01:08:58,399 --> 01:08:59,279
they do get hit

2286
01:08:59,279 --> 01:09:01,279
how are they being used right and again

2287
01:09:01,279 --> 01:09:02,399
this lets us be a little bit more

2288
01:09:02,399 --> 01:09:03,759
surgical so i'm going to go ahead and

2289
01:09:03,759 --> 01:09:04,399
run

2290
01:09:04,399 --> 01:09:06,238
or press f9 all right so you can do a

2291
01:09:06,238 --> 01:09:07,520
debug run

2292
01:09:07,520 --> 01:09:09,920
f9 is the hotkey f2 is the hotkey to go

2293
01:09:09,920 --> 01:09:12,640
set a breakpoint i'm gonna go and run

2294
01:09:12,640 --> 01:09:15,719
and we're running running running

2295
01:09:15,719 --> 01:09:18,719
services

2296
01:09:18,880 --> 01:09:20,799
okay sometimes by the way i'm gonna

2297
01:09:20,799 --> 01:09:22,880
throw this out here sometimes you run

2298
01:09:22,880 --> 01:09:25,600
uh the uh you run malware and it just

2299
01:09:25,600 --> 01:09:27,120
does its thing

2300
01:09:27,120 --> 01:09:29,040
and we don't get a pause right this is

2301
01:09:29,040 --> 01:09:30,238
one of the great reasons that we have a

2302
01:09:30,238 --> 01:09:31,600
snapshot right

2303
01:09:31,600 --> 01:09:34,640
um so i may hop over to sample sample 2

2304
01:09:34,640 --> 01:09:36,319
here because that's more fun

2305
01:09:36,319 --> 01:09:38,080
also i believe this does some injection

2306
01:09:38,080 --> 01:09:39,759
i just saw my screen flash there which

2307
01:09:39,759 --> 01:09:41,279
is never a good thing

2308
01:09:41,279 --> 01:09:42,719
i know it does some hooking i remember

2309
01:09:42,719 --> 01:09:46,319
that and

2310
01:09:47,359 --> 01:09:51,440
that i don't see the call to

2311
01:09:51,920 --> 01:09:54,238
create 1232 snapshot would be a

2312
01:09:54,238 --> 01:09:56,080
prerequisite to hooking

2313
01:09:56,080 --> 01:09:58,400
typically although there's another call

2314
01:09:58,400 --> 01:09:59,840
there are other calls like nt query

2315
01:09:59,840 --> 01:10:01,120
system information

2316
01:10:01,120 --> 01:10:02,960
that could also be used and we took a

2317
01:10:02,960 --> 01:10:04,800
guess here we may not

2318
01:10:04,800 --> 01:10:07,600
get a win

2319
01:10:08,640 --> 01:10:10,159
i grabbed some samples here that i

2320
01:10:10,159 --> 01:10:11,679
remember being fun

2321
01:10:11,679 --> 01:10:13,600
but i couldn't uh right off the bat

2322
01:10:13,600 --> 01:10:15,199
wasn't pulling reports for those

2323
01:10:15,199 --> 01:10:18,000
um so you're watching uh a live uh i'm

2324
01:10:18,000 --> 01:10:19,840
gonna say a live debug fail live demo

2325
01:10:19,840 --> 01:10:21,120
fail i'm gonna do here i'm gonna

2326
01:10:21,120 --> 01:10:23,199
snapshot revert

2327
01:10:23,199 --> 01:10:24,960
all right so let's do this we'll drop

2328
01:10:24,960 --> 01:10:27,520
back to 3x pretty exact

2329
01:10:27,520 --> 01:10:28,800
we're not gonna run this we'll drop in a

2330
01:10:28,800 --> 01:10:32,719
sample too because because

2331
01:10:34,080 --> 01:10:37,760
come on slowness okay so as this as this

2332
01:10:37,760 --> 01:10:38,800
restores

2333
01:10:38,800 --> 01:10:40,400
i will drop on a sample too and take a

2334
01:10:40,400 --> 01:10:44,080
look at that debugger

2335
01:10:44,080 --> 01:10:46,159
sample one there's certainly you may let

2336
01:10:46,159 --> 01:10:48,159
this run longer and and get there

2337
01:10:48,159 --> 01:10:50,159
i i don't want to be in a position where

2338
01:10:50,159 --> 01:10:51,920
it's sleeping to avoid analysis or

2339
01:10:51,920 --> 01:10:52,960
something along those lines

2340
01:10:52,960 --> 01:10:54,480
by the way if you think that's happening

2341
01:10:54,480 --> 01:10:55,840
uh one of the things you can do here is

2342
01:10:55,840 --> 01:10:57,440
set bpx

2343
01:10:57,440 --> 01:10:58,719
i just said i wasn't going to do

2344
01:10:58,719 --> 01:11:00,239
anything else with this but i am now set

2345
01:11:00,239 --> 01:11:03,519
vpx chrono 32

2346
01:11:04,960 --> 01:11:07,360
ah

2347
01:11:08,159 --> 01:11:11,440
epx kernel 32 dot sleep with a capital

2348
01:11:11,440 --> 01:11:12,159
house

2349
01:11:12,159 --> 01:11:13,520
that is the most one of the most

2350
01:11:13,520 --> 01:11:15,520
maddening things for me there that

2351
01:11:15,520 --> 01:11:18,800
okay let's go run up cancel

2352
01:11:18,800 --> 01:11:21,840
cpu and run ah so here we go

2353
01:11:21,840 --> 01:11:25,280
okay so we're sleeping right um okay so

2354
01:11:25,280 --> 01:11:27,440
uh let's see that's a jump to sleep

2355
01:11:27,440 --> 01:11:29,440
what's the argument that's being passed

2356
01:11:29,440 --> 01:11:31,520
uh it looks like it's sleeping a very

2357
01:11:31,520 --> 01:11:33,360
very very short time here

2358
01:11:33,360 --> 01:11:35,600
uh it looks like sleeping and i'm the

2359
01:11:35,600 --> 01:11:36,960
way i say a very short time these are

2360
01:11:36,960 --> 01:11:38,080
milliseconds

2361
01:11:38,080 --> 01:11:40,880
uh sometimes this is used in anti-debug

2362
01:11:40,880 --> 01:11:42,320
all right so sleep only takes

2363
01:11:42,320 --> 01:11:45,040
one one argument i'm an f8 and a single

2364
01:11:45,040 --> 01:11:45,360
step

2365
01:11:45,360 --> 01:11:48,880
into a single step into the sleep call

2366
01:11:48,880 --> 01:11:51,120
and again you can see here in the uh

2367
01:11:51,120 --> 01:11:52,480
basically the single argument on the

2368
01:11:52,480 --> 01:11:53,840
stack is what the function arguments

2369
01:11:53,840 --> 01:11:54,480
become

2370
01:11:54,480 --> 01:11:56,080
interesting it just slept for one

2371
01:11:56,080 --> 01:11:58,640
millisecond right i'm going to say debug

2372
01:11:58,640 --> 01:12:02,000
and execute until user code right a run

2373
01:12:02,000 --> 01:12:03,120
to user code

2374
01:12:03,120 --> 01:12:05,600
and here we see then the basically the

2375
01:12:05,600 --> 01:12:06,320
call

2376
01:12:06,320 --> 01:12:09,280
esi uh currently holds the value of

2377
01:12:09,280 --> 01:12:11,520
sleep and by the way how interesting edi

2378
01:12:11,520 --> 01:12:14,320
holds the value uh the value hello or a

2379
01:12:14,320 --> 01:12:15,760
pointer to hello world

2380
01:12:15,760 --> 01:12:17,600
uh that doesn't seem uh or say it

2381
01:12:17,600 --> 01:12:19,360
doesn't seem it seems interesting to me

2382
01:12:19,360 --> 01:12:19,920
but hey

2383
01:12:19,920 --> 01:12:23,360
uh whatever right um so okay so we're

2384
01:12:23,360 --> 01:12:25,600
gonna then take a an unconditional jump

2385
01:12:25,600 --> 01:12:27,760
and we're gonna jump back up here until

2386
01:12:27,760 --> 01:12:29,440
we call uh esi

2387
01:12:29,440 --> 01:12:32,480
which is also our let's see asleep

2388
01:12:32,480 --> 01:12:35,520
all right so ebx and then call

2389
01:12:35,520 --> 01:12:38,800
uh call esi so push ebx ebx

2390
01:12:38,800 --> 01:12:41,120
is uh one millisecond okay so what are

2391
01:12:41,120 --> 01:12:41,920
we doing here

2392
01:12:41,920 --> 01:12:44,239
we are thrashing and entering an

2393
01:12:44,239 --> 01:12:45,760
infinite loop right so that's what we're

2394
01:12:45,760 --> 01:12:46,640
looking at here

2395
01:12:46,640 --> 01:12:48,480
how do we get here right what i suspect

2396
01:12:48,480 --> 01:12:50,239
has happened is by the way

2397
01:12:50,239 --> 01:12:52,640
since it says this whole hello hello

2398
01:12:52,640 --> 01:12:53,760
world thing

2399
01:12:53,760 --> 01:12:56,239
i i don't know for sure what's happening

2400
01:12:56,239 --> 01:12:57,920
uh without backing up here and i'm

2401
01:12:57,920 --> 01:12:59,679
beginning to think like

2402
01:12:59,679 --> 01:13:02,719
did what did they do here that was

2403
01:13:02,719 --> 01:13:04,400
i think they detect the debugging i

2404
01:13:04,400 --> 01:13:06,000
don't have anti-debugging features

2405
01:13:06,000 --> 01:13:08,480
uh anti-debugging features on uh on the

2406
01:13:08,480 --> 01:13:09,199
debugger

2407
01:13:09,199 --> 01:13:11,120
i'm meaning like the hide my debugger

2408
01:13:11,120 --> 01:13:13,440
features i don't have those enabled here

2409
01:13:13,440 --> 01:13:15,760
um because i wanted to have a clean

2410
01:13:15,760 --> 01:13:17,360
debugger to uh to walk

2411
01:13:17,360 --> 01:13:18,880
kind of walk through some of this with

2412
01:13:18,880 --> 01:13:20,320
but it looks like and again this is a

2413
01:13:20,320 --> 01:13:22,159
great example of

2414
01:13:22,159 --> 01:13:23,760
something detecting its analysis

2415
01:13:23,760 --> 01:13:25,440
environment because what you have here

2416
01:13:25,440 --> 01:13:26,480
effectively and

2417
01:13:26,480 --> 01:13:27,520
i think i'm pretty sure that's what's

2418
01:13:27,520 --> 01:13:29,360
happening here i will drop into another

2419
01:13:29,360 --> 01:13:30,239
sample to

2420
01:13:30,239 --> 01:13:32,719
sample two to play with that that was

2421
01:13:32,719 --> 01:13:34,159
the one i intended to play with the most

2422
01:13:34,159 --> 01:13:34,960
anyway but

2423
01:13:34,960 --> 01:13:37,760
but alas here uh you know great example

2424
01:13:37,760 --> 01:13:38,320
of

2425
01:13:38,320 --> 01:13:40,480
us basically in an infinite loop where

2426
01:13:40,480 --> 01:13:42,159
we're just gonna sleep right so we could

2427
01:13:42,159 --> 01:13:43,199
wait forever

2428
01:13:43,199 --> 01:13:45,679
and short of another thread breaking

2429
01:13:45,679 --> 01:13:46,480
away

2430
01:13:46,480 --> 01:13:48,159
this thing is just going to go run

2431
01:13:48,159 --> 01:13:50,320
constantly calling the sleep api now

2432
01:13:50,320 --> 01:13:52,480
why call the sleep api with a one

2433
01:13:52,480 --> 01:13:54,000
millisecond every time

2434
01:13:54,000 --> 01:13:57,760
the answer is that the answer is that

2435
01:13:57,760 --> 01:14:00,239
we we routinely uh you know see our

2436
01:14:00,239 --> 01:14:01,199
sandboxes

2437
01:14:01,199 --> 01:14:03,199
looking for the number of apis that are

2438
01:14:03,199 --> 01:14:04,560
being called also

2439
01:14:04,560 --> 01:14:06,719
uh you know calls for very long sleeps

2440
01:14:06,719 --> 01:14:08,239
may set off a

2441
01:14:08,239 --> 01:14:12,239
may set off some kind of some kind of

2442
01:14:12,239 --> 01:14:14,480
what am i looking for here um a uh kind

2443
01:14:14,480 --> 01:14:15,360
of a heuristic

2444
01:14:15,360 --> 01:14:17,600
detection um so another thing that may

2445
01:14:17,600 --> 01:14:19,280
note you know worth noting here is there

2446
01:14:19,280 --> 01:14:21,120
may have been a a timer set

2447
01:14:21,120 --> 01:14:24,000
uh basically to interrupt uh so

2448
01:14:24,000 --> 01:14:24,640
basically

2449
01:14:24,640 --> 01:14:27,760
a some other uh kernel event or kernel

2450
01:14:27,760 --> 01:14:29,679
timer as a kernel battery format an

2451
01:14:29,679 --> 01:14:31,280
event or or timer set

2452
01:14:31,280 --> 01:14:33,440
uh basically to to exit this code so it

2453
01:14:33,440 --> 01:14:34,960
may sleep for some period of time before

2454
01:14:34,960 --> 01:14:36,320
that event fires

2455
01:14:36,320 --> 01:14:37,840
and breaks it out of this loop again i

2456
01:14:37,840 --> 01:14:38,880
don't have time for all that it's

2457
01:14:38,880 --> 01:14:40,080
supposed to be basic

2458
01:14:40,080 --> 01:14:41,679
and i feel like i'm getting this this

2459
01:14:41,679 --> 01:14:43,280
example these examples are supposed to

2460
01:14:43,280 --> 01:14:44,719
be basic i pulled one here

2461
01:14:44,719 --> 01:14:46,719
uh that may be uh maybe out of uh out of

2462
01:14:46,719 --> 01:14:48,320
our depth what we're trying to do

2463
01:14:48,320 --> 01:14:49,760
but hopefully you now have some more

2464
01:14:49,760 --> 01:14:51,040
experience the debugger and you're

2465
01:14:51,040 --> 01:14:52,880
seeing me work through kind of a uh

2466
01:14:52,880 --> 01:14:54,480
what called an interesting problem but a

2467
01:14:54,480 --> 01:14:55,600
problem in the last i'm gonna go and

2468
01:14:55,600 --> 01:14:56,080
close this

2469
01:14:56,080 --> 01:14:59,040
out um and and let that let that be um

2470
01:14:59,040 --> 01:15:00,640
let's hop back over now

2471
01:15:00,640 --> 01:15:03,920
to the other x32 debug this is our uh

2472
01:15:03,920 --> 01:15:06,719
this is our other x32 debug um and what

2473
01:15:06,719 --> 01:15:07,600
i wanna do here

2474
01:15:07,600 --> 01:15:09,520
is i wanna take a look back with sample

2475
01:15:09,520 --> 01:15:10,960
2 and

2476
01:15:10,960 --> 01:15:12,480
take a look at our strings right and we

2477
01:15:12,480 --> 01:15:14,320
have a lot of strings

2478
01:15:14,320 --> 01:15:17,520
that themselves are are apparently api

2479
01:15:17,520 --> 01:15:18,000
names

2480
01:15:18,000 --> 01:15:19,280
i'm going to go ahead and go back to the

2481
01:15:19,280 --> 01:15:21,120
blacklisted strings right just to

2482
01:15:21,120 --> 01:15:23,199
highlight those very quickly here

2483
01:15:23,199 --> 01:15:25,520
and as we go to blacklisted strings um

2484
01:15:25,520 --> 01:15:27,520
you know it helps to know that some of

2485
01:15:27,520 --> 01:15:28,000
these

2486
01:15:28,000 --> 01:15:29,760
uh you know that some of these actually

2487
01:15:29,760 --> 01:15:31,679
are

2488
01:15:31,679 --> 01:15:34,000
actually our api names let's see some of

2489
01:15:34,000 --> 01:15:35,840
these like for instance these zw

2490
01:15:35,840 --> 01:15:37,840
allocate virtual memory zw query

2491
01:15:37,840 --> 01:15:39,840
information process read virtual memory

2492
01:15:39,840 --> 01:15:40,320
resume

2493
01:15:40,320 --> 01:15:43,520
thread etc these are all uh

2494
01:15:43,520 --> 01:15:45,840
these are all api names right so seeing

2495
01:15:45,840 --> 01:15:47,760
these certainly helpful uh helpful to

2496
01:15:47,760 --> 01:15:48,640
know

2497
01:15:48,640 --> 01:15:50,080
i also see a lot of things here that

2498
01:15:50,080 --> 01:15:52,880
look like basically look like directory

2499
01:15:52,880 --> 01:15:55,360
directory lists a fine first file as

2500
01:15:55,360 --> 01:15:56,400
well as

2501
01:15:56,400 --> 01:15:57,840
certainly things that look like registry

2502
01:15:57,840 --> 01:16:00,560
keys and those registry keys

2503
01:16:00,560 --> 01:16:03,840
i would expect to be registered keys i

2504
01:16:03,840 --> 01:16:05,760
would expect to be

2505
01:16:05,760 --> 01:16:07,840
certainly being queried and let's see if

2506
01:16:07,840 --> 01:16:08,880
we have any of the reg

2507
01:16:08,880 --> 01:16:12,480
calls and the r's reg calls r's

2508
01:16:12,480 --> 01:16:15,840
reg we don't right okay so

2509
01:16:15,840 --> 01:16:18,239
um okay so what am i going to do well i

2510
01:16:18,239 --> 01:16:19,440
think with this one

2511
01:16:19,440 --> 01:16:21,360
i'm actually going to go ahead and set

2512
01:16:21,360 --> 01:16:23,360
and you see some other registry keys and

2513
01:16:23,360 --> 01:16:25,199
and all that i'm going to go ahead here

2514
01:16:25,199 --> 01:16:27,040
um no no no no

2515
01:16:27,040 --> 01:16:28,960
i tried to uh try to go away on us there

2516
01:16:28,960 --> 01:16:31,600
let's not do that

2517
01:16:31,600 --> 01:16:33,280
oh i see what's happening here i tried

2518
01:16:33,280 --> 01:16:35,840
to drop in vmware try to take over my

2519
01:16:35,840 --> 01:16:37,199
minimize there right

2520
01:16:37,199 --> 01:16:39,040
okay so what i'm going to do here is i'm

2521
01:16:39,040 --> 01:16:41,840
going to go ahead and set bpx

2522
01:16:41,840 --> 01:16:44,560
and it happens to be advappy32 right so

2523
01:16:44,560 --> 01:16:45,840
bappy

2524
01:16:45,840 --> 01:16:50,800
and i'm going to say reg open key

2525
01:16:51,280 --> 01:16:54,400
reg open key a

2526
01:16:55,120 --> 01:16:56,320
we're going to copy that because we're

2527
01:16:56,320 --> 01:16:58,880
going to use it again here in a second

2528
01:16:58,880 --> 01:17:03,120
uh reg open key i have happy 32

2529
01:17:03,120 --> 01:17:08,000
sorry that's what i'm invalid address

2530
01:17:08,000 --> 01:17:11,040
reg open key

2531
01:17:13,040 --> 01:17:14,880
ah it's gonna be one of those days i can

2532
01:17:14,880 --> 01:17:17,040
see it now set vpx to what we're gonna

2533
01:17:17,040 --> 01:17:17,440
do

2534
01:17:17,440 --> 01:17:21,040
let's go over to our symbols

2535
01:17:21,040 --> 01:17:24,320
and we'll go to is avapi32 loaded

2536
01:17:24,320 --> 01:17:26,640
okay so that'll do it so vapi32 isn't

2537
01:17:26,640 --> 01:17:27,520
loaded yet

2538
01:17:27,520 --> 01:17:29,199
that is a great reason why we can't set

2539
01:17:29,199 --> 01:17:30,880
a break point there okay

2540
01:17:30,880 --> 01:17:33,120
um so i'm going to do here is i'm going

2541
01:17:33,120 --> 01:17:34,480
to change over here my preferences and

2542
01:17:34,480 --> 01:17:35,600
i'm going to say hey

2543
01:17:35,600 --> 01:17:38,640
i want you to break anytime you do a dll

2544
01:17:38,640 --> 01:17:40,159
load this is probably a good thing since

2545
01:17:40,159 --> 01:17:40,560
we

2546
01:17:40,560 --> 01:17:43,679
are going to dynamically resolve uh

2547
01:17:43,679 --> 01:17:46,080
some of our dynamically resolved uh some

2548
01:17:46,080 --> 01:17:46,960
of our apis

2549
01:17:46,960 --> 01:17:48,880
i'm going to go ahead now and run so i'm

2550
01:17:48,880 --> 01:17:50,880
going to press f9 here

2551
01:17:50,880 --> 01:17:53,840
and oh debugging stopped man this may be

2552
01:17:53,840 --> 01:17:55,280
a giant fail here

2553
01:17:55,280 --> 01:17:57,440
for the samples that i have the samples

2554
01:17:57,440 --> 01:17:58,640
that i picked out let's go ahead and

2555
01:17:58,640 --> 01:18:00,719
revert to snapshot

2556
01:18:00,719 --> 01:18:02,320
this is why you always have snapshots

2557
01:18:02,320 --> 01:18:06,320
running or snapshots of your stuff

2558
01:18:06,320 --> 01:18:08,080
also probably should have grabbed or run

2559
01:18:08,080 --> 01:18:09,520
through some samples here i grabbed a

2560
01:18:09,520 --> 01:18:11,120
couple of samples that i remember being

2561
01:18:11,120 --> 01:18:11,760
fun

2562
01:18:11,760 --> 01:18:14,400
i thought they were fairly easy and of

2563
01:18:14,400 --> 01:18:15,520
course

2564
01:18:15,520 --> 01:18:17,199
i may be shooting myself on the foot

2565
01:18:17,199 --> 01:18:18,800
here all of these are ones that we

2566
01:18:18,800 --> 01:18:20,640
reversed in the past i just as

2567
01:18:20,640 --> 01:18:24,480
as a like yeah i'm trying to keep this

2568
01:18:24,480 --> 01:18:26,400
as as relatively simple as possible so

2569
01:18:26,400 --> 01:18:27,920
i'm going to drop into plug-ins

2570
01:18:27,920 --> 01:18:29,840
um and they're still a hide let's see

2571
01:18:29,840 --> 01:18:32,239
what i have set in silhouette

2572
01:18:32,239 --> 01:18:35,520
nothing okay um so yeah loaded let's go

2573
01:18:35,520 --> 01:18:37,120
ahead then and i'm going to drop in

2574
01:18:37,120 --> 01:18:40,239
and basically the the basic uh the basic

2575
01:18:40,239 --> 01:18:40,880
runs

2576
01:18:40,880 --> 01:18:44,080
uh the idea here with silihide um is

2577
01:18:44,080 --> 01:18:46,719
that uh it allows you to go in and hide

2578
01:18:46,719 --> 01:18:47,199
from

2579
01:18:47,199 --> 01:18:48,560
uh hide from your debuggers all right

2580
01:18:48,560 --> 01:18:50,320
you'll notice here that like you have

2581
01:18:50,320 --> 01:18:51,760
different profiles set up

2582
01:18:51,760 --> 01:18:53,840
uh and uh you know vm protect and

2583
01:18:53,840 --> 01:18:55,920
thermita check for different things and

2584
01:18:55,920 --> 01:18:57,840
generally all this stuff a lot of folks

2585
01:18:57,840 --> 01:18:59,280
like let me check all the boxes the

2586
01:18:59,280 --> 01:19:00,080
problem is

2587
01:19:00,080 --> 01:19:01,600
every one of these boxes that you check

2588
01:19:01,600 --> 01:19:03,840
is modifying how the operating system

2589
01:19:03,840 --> 01:19:04,480
works

2590
01:19:04,480 --> 01:19:06,560
um and the underlying os works and so

2591
01:19:06,560 --> 01:19:08,000
you don't want to check stuff that

2592
01:19:08,000 --> 01:19:09,840
you don't necessarily need all right so

2593
01:19:09,840 --> 01:19:11,840
that that obviously can be uh

2594
01:19:11,840 --> 01:19:13,520
anything that you check uh that's

2595
01:19:13,520 --> 01:19:15,600
modifying the os uh you know can

2596
01:19:15,600 --> 01:19:16,400
obviously cause

2597
01:19:16,400 --> 01:19:19,360
problems um if uh you know basically i

2598
01:19:19,360 --> 01:19:20,080
wanna

2599
01:19:20,080 --> 01:19:22,560
use the minimum number of uh basically

2600
01:19:22,560 --> 01:19:23,840
the minimum number of

2601
01:19:23,840 --> 01:19:26,080
uh selections that i can to go hide my

2602
01:19:26,080 --> 01:19:26,960
hide my debugger

2603
01:19:26,960 --> 01:19:29,440
frame okay notice it'll say here whether

2604
01:19:29,440 --> 01:19:30,080
it's

2605
01:19:30,080 --> 01:19:31,920
necessary to restart the program or not

2606
01:19:31,920 --> 01:19:33,199
so in this case based on what we're

2607
01:19:33,199 --> 01:19:34,000
selecting

2608
01:19:34,000 --> 01:19:36,480
it's not necessary all right um so what

2609
01:19:36,480 --> 01:19:37,520
i'm going to do here again is i'm going

2610
01:19:37,520 --> 01:19:39,199
to come back to options

2611
01:19:39,199 --> 01:19:41,280
and preferences and i'm going to ask it

2612
01:19:41,280 --> 01:19:42,560
then to

2613
01:19:42,560 --> 01:19:45,679
uh go ahead and break on a dll load i'm

2614
01:19:45,679 --> 01:19:46,800
also going to ask it to go ahead now

2615
01:19:46,800 --> 01:19:47,679
that i'm thinking about we're going to

2616
01:19:47,679 --> 01:19:48,800
go ahead and break on a

2617
01:19:48,800 --> 01:19:50,560
start of a new thread all right so i'm

2618
01:19:50,560 --> 01:19:52,320
going to go ahead and run

2619
01:19:52,320 --> 01:19:54,400
okay notice down here it says hey

2620
01:19:54,400 --> 01:19:55,840
there's a thread started

2621
01:19:55,840 --> 01:19:58,159
uh and the entries in ntdl not really

2622
01:19:58,159 --> 01:19:59,040
interested

2623
01:19:59,040 --> 01:20:00,800
for the moment there let's run again and

2624
01:20:00,800 --> 01:20:02,320
debugging stop okay

2625
01:20:02,320 --> 01:20:04,480
i'm going to go ahead now and and bail

2626
01:20:04,480 --> 01:20:06,000
on this sample we're going to sample

2627
01:20:06,000 --> 01:20:06,400
three

2628
01:20:06,400 --> 01:20:08,960
right um and i hate to be that guy um

2629
01:20:08,960 --> 01:20:10,639
but but i've got it looks like about

2630
01:20:10,639 --> 01:20:12,880
20-ish minutes left 25 minutes left i'm

2631
01:20:12,880 --> 01:20:14,239
gonna drop back here to one

2632
01:20:14,239 --> 01:20:17,280
that is uh to a sampler a space where

2633
01:20:17,280 --> 01:20:18,159
we've got

2634
01:20:18,159 --> 01:20:21,440
uh a clean set up let's drop in a sample

2635
01:20:21,440 --> 01:20:22,800
three and we'll roll there

2636
01:20:22,800 --> 01:20:24,000
i really wanted to give you some

2637
01:20:24,000 --> 01:20:25,679
targeted findings right that were easy

2638
01:20:25,679 --> 01:20:26,560
to run through

2639
01:20:26,560 --> 01:20:28,560
without having to explain a whole lot uh

2640
01:20:28,560 --> 01:20:30,239
bear in mind here i'll mention that

2641
01:20:30,239 --> 01:20:32,000
you know there's a lot of iterative here

2642
01:20:32,000 --> 01:20:33,360
um where i'll kick something into a

2643
01:20:33,360 --> 01:20:34,000
debugger

2644
01:20:34,000 --> 01:20:36,080
get some targeted findings rinse lather

2645
01:20:36,080 --> 01:20:37,679
repeat obviously it's detecting my

2646
01:20:37,679 --> 01:20:39,120
debugger somewhere there

2647
01:20:39,120 --> 01:20:41,360
um i i just i'm not attacking my

2648
01:20:41,360 --> 01:20:42,880
debugger or my virtual machine

2649
01:20:42,880 --> 01:20:44,080
i can't remember what we did with that

2650
01:20:44,080 --> 01:20:46,000
sample and just again for the sake

2651
01:20:46,000 --> 01:20:47,840
of time here let me drop and grab sample

2652
01:20:47,840 --> 01:20:50,719
three here and we will put this into

2653
01:20:50,719 --> 01:20:54,239
uh for this indoor debugger

2654
01:20:55,120 --> 01:20:58,159
drop that x32 debug

2655
01:20:58,159 --> 01:20:59,280
we haven't done anything with this one

2656
01:20:59,280 --> 01:21:02,000
yet so game on and hopefully get lucky

2657
01:21:02,000 --> 01:21:04,239
with

2658
01:21:04,320 --> 01:21:06,480
some easy because i would normally do

2659
01:21:06,480 --> 01:21:08,159
metadata analysis right it's a static

2660
01:21:08,159 --> 01:21:09,360
properties analysis

2661
01:21:09,360 --> 01:21:10,880
um i don't have time to run back through

2662
01:21:10,880 --> 01:21:12,400
that here we're going to start with a

2663
01:21:12,400 --> 01:21:13,040
search for

2664
01:21:13,040 --> 01:21:15,760
current module enter modular calls again

2665
01:21:15,760 --> 01:21:17,360
i remember this one being interesting or

2666
01:21:17,360 --> 01:21:19,440
we wouldn't have it here

2667
01:21:19,440 --> 01:21:23,678
let's let's go for creates

2668
01:21:25,440 --> 01:21:28,080
uh oh create mutex for the win okay so

2669
01:21:28,080 --> 01:21:29,600
we're gonna go ahead and set

2670
01:21:29,600 --> 01:21:33,040
f2 f2 f2 okay

2671
01:21:33,040 --> 01:21:34,239
so i'm going to go ahead and set break

2672
01:21:34,239 --> 01:21:36,320
points here using the f2 key

2673
01:21:36,320 --> 01:21:38,800
i'm setting these on uh basically three

2674
01:21:38,800 --> 01:21:39,440
of these

2675
01:21:39,440 --> 01:21:42,080
i'm going to take another snapshot and

2676
01:21:42,080 --> 01:21:44,159
let's take a new one here

2677
01:21:44,159 --> 01:21:47,280
pre-exec 2 because now i can just drop

2678
01:21:47,280 --> 01:21:48,480
right back to this

2679
01:21:48,480 --> 01:21:50,080
this show pollution should give us some

2680
01:21:50,080 --> 01:21:51,600
some targeted findings very quickly i

2681
01:21:51,600 --> 01:21:52,960
want to talk about mutexes

2682
01:21:52,960 --> 01:21:55,920
mutex is a mutual exclusion and a mutual

2683
01:21:55,920 --> 01:21:57,040
exclusion

2684
01:21:57,040 --> 01:21:59,280
allows us uh basically a mutual

2685
01:21:59,280 --> 01:22:00,239
exclusion

2686
01:22:00,239 --> 01:22:03,520
allows us to create a uh a tool

2687
01:22:03,520 --> 01:22:06,880
or a uh a tool mark that's only visible

2688
01:22:06,880 --> 01:22:09,360
in memory right only visible memory

2689
01:22:09,360 --> 01:22:11,679
and so when i take that the tool mark

2690
01:22:11,679 --> 01:22:13,280
that's only visible in memory

2691
01:22:13,280 --> 01:22:16,239
this is a great ioc now what malware

2692
01:22:16,239 --> 01:22:17,679
uses this for is to prevent multiple

2693
01:22:17,679 --> 01:22:19,760
reinfection in fact we saw this in

2694
01:22:19,760 --> 01:22:22,800
uh wannacry so we produced a tool

2695
01:22:22,800 --> 01:22:24,800
rendition called tear stopper that

2696
01:22:24,800 --> 01:22:26,800
basically used the mutax that wannacry

2697
01:22:26,800 --> 01:22:28,159
was using to know whether or not it was

2698
01:22:28,159 --> 01:22:29,360
in the middle of encryption

2699
01:22:29,360 --> 01:22:30,880
and so by throwing that mutex by

2700
01:22:30,880 --> 01:22:32,960
planting that flag and creating that

2701
01:22:32,960 --> 01:22:34,960
mutex before wannacry got there

2702
01:22:34,960 --> 01:22:37,600
we were able on some of our very

2703
01:22:37,600 --> 01:22:39,920
obscenely expensive lab machines uh that

2704
01:22:39,920 --> 01:22:41,760
a couple of customers and other uh

2705
01:22:41,760 --> 01:22:44,080
operational technology machines um that

2706
01:22:44,080 --> 01:22:45,760
they had concerns about patching

2707
01:22:45,760 --> 01:22:47,440
um we were able to say okay look you

2708
01:22:47,440 --> 01:22:49,199
know like this is our best bad

2709
01:22:49,199 --> 01:22:52,320
plan is to go create this mutex that

2710
01:22:52,320 --> 01:22:55,840
wannacry believes is is it already there

2711
01:22:55,840 --> 01:22:57,040
on the system right

2712
01:22:57,040 --> 01:22:59,760
um so okay so that's a mutex and we're

2713
01:22:59,760 --> 01:23:00,719
always interested in that

2714
01:23:00,719 --> 01:23:02,320
uh certainly any process is being

2715
01:23:02,320 --> 01:23:04,000
created and then any files uh

2716
01:23:04,000 --> 01:23:06,320
create file means create or open a file

2717
01:23:06,320 --> 01:23:08,080
now let's also take a look at reg

2718
01:23:08,080 --> 01:23:11,040
let's see do any regis no nothing there

2719
01:23:11,040 --> 01:23:12,719
let's see

2720
01:23:12,719 --> 01:23:14,080
that's obviously nothing's done with the

2721
01:23:14,080 --> 01:23:15,920
registry please don't think that for a

2722
01:23:15,920 --> 01:23:16,560
minute

2723
01:23:16,560 --> 01:23:19,040
it may simply be that the registry calls

2724
01:23:19,040 --> 01:23:20,320
aren't

2725
01:23:20,320 --> 01:23:22,639
the registry calls aren't explicitly

2726
01:23:22,639 --> 01:23:23,840
imported

2727
01:23:23,840 --> 01:23:27,440
and maybe maybe imported at runtime

2728
01:23:27,440 --> 01:23:28,800
here's a write file let's actually take

2729
01:23:28,800 --> 01:23:31,920
a look at rights as well

2730
01:23:32,080 --> 01:23:34,960
lots of write files all right so let's

2731
01:23:34,960 --> 01:23:37,440
see here

2732
01:23:40,080 --> 01:23:42,239
okay and we'll use these and kind of run

2733
01:23:42,239 --> 01:23:43,360
through some uh run through some

2734
01:23:43,360 --> 01:23:44,800
examples here okay so i'm gonna go ahead

2735
01:23:44,800 --> 01:23:45,520
and run

2736
01:23:45,520 --> 01:23:48,159
and uh i may shake the chicken bones

2737
01:23:48,159 --> 01:23:49,280
here and hope that

2738
01:23:49,280 --> 01:23:51,120
hope that we have a good good successful

2739
01:23:51,120 --> 01:23:54,320
run um and we run

2740
01:23:54,320 --> 01:23:57,360
uh we are now at the uh uh basically at

2741
01:23:57,360 --> 01:23:59,520
and it's called an m3 break point let's

2742
01:23:59,520 --> 01:24:01,199
hop back over to the cpu

2743
01:24:01,199 --> 01:24:03,280
into three by the way as a as a software

2744
01:24:03,280 --> 01:24:04,560
uh software breakpoint

2745
01:24:04,560 --> 01:24:06,880
right and so we can now see that we are

2746
01:24:06,880 --> 01:24:09,120
writing to a file this is call

2747
01:24:09,120 --> 01:24:11,440
uh d word uh called the word right file

2748
01:24:11,440 --> 01:24:12,960
right okay well what file we're writing

2749
01:24:12,960 --> 01:24:13,440
to

2750
01:24:13,440 --> 01:24:14,560
well i need to know what file we're

2751
01:24:14,560 --> 01:24:16,080
writing to and by the way our arguments

2752
01:24:16,080 --> 01:24:17,440
over here you can see these

2753
01:24:17,440 --> 01:24:19,600
i see these arguments over here in the

2754
01:24:19,600 --> 01:24:20,560
arguments pane

2755
01:24:20,560 --> 01:24:22,560
it would help to know what right file uh

2756
01:24:22,560 --> 01:24:24,000
what write file is and again we're just

2757
01:24:24,000 --> 01:24:25,840
going to google that

2758
01:24:25,840 --> 01:24:27,440
i know what the arguments write file are

2759
01:24:27,440 --> 01:24:29,120
supposed to be we're simply going to

2760
01:24:29,120 --> 01:24:30,480
google those

2761
01:24:30,480 --> 01:24:33,520
and when we do uh we're able to see then

2762
01:24:33,520 --> 01:24:36,400
that right file

2763
01:24:36,719 --> 01:24:39,040
come on slowness all right so the right

2764
01:24:39,040 --> 01:24:41,840
file its first argument is a handle

2765
01:24:41,840 --> 01:24:44,080
basically to the to the file to right

2766
01:24:44,080 --> 01:24:46,159
now that handle here is handle

2767
01:24:46,159 --> 01:24:48,400
8c all right so i can hop over to

2768
01:24:48,400 --> 01:24:50,159
handles notice here they're all empty

2769
01:24:50,159 --> 01:24:51,520
but if you right click over here and say

2770
01:24:51,520 --> 01:24:52,320
refresh

2771
01:24:52,320 --> 01:24:54,320
they show you the actual handle values

2772
01:24:54,320 --> 01:24:55,920
right and what those handles are

2773
01:24:55,920 --> 01:24:57,920
and so handle 8c is the one that we were

2774
01:24:57,920 --> 01:24:59,520
writing to and now i'm like okay well

2775
01:24:59,520 --> 01:25:01,120
what is that well it's device

2776
01:25:01,120 --> 01:25:02,639
con drive right well now i'm going to

2777
01:25:02,639 --> 01:25:04,080
have to go and look and say what is

2778
01:25:04,080 --> 01:25:04,719
device and

2779
01:25:04,719 --> 01:25:07,120
google what is what is device con drive

2780
01:25:07,120 --> 01:25:07,920
is it interesting

2781
01:25:07,920 --> 01:25:10,639
con drv is interest to us or not in this

2782
01:25:10,639 --> 01:25:11,760
case i'm going to tell you that it's

2783
01:25:11,760 --> 01:25:12,000
less

2784
01:25:12,000 --> 01:25:14,000
interesting we're going to keep keep

2785
01:25:14,000 --> 01:25:16,080
right on keep right on rolling but i now

2786
01:25:16,080 --> 01:25:16,719
know

2787
01:25:16,719 --> 01:25:18,800
what file is being written to if you

2788
01:25:18,800 --> 01:25:20,320
want to know how the rest of that's

2789
01:25:20,320 --> 01:25:20,880
working

2790
01:25:20,880 --> 01:25:23,120
i notice here the rest of the arguments

2791
01:25:23,120 --> 01:25:24,480
here right so

2792
01:25:24,480 --> 01:25:27,840
basically our buffer um and basically

2793
01:25:27,840 --> 01:25:28,080
the

2794
01:25:28,080 --> 01:25:31,040
the buffer is the uh pointer you scroll

2795
01:25:31,040 --> 01:25:32,159
down here a little bit says hey there's

2796
01:25:32,159 --> 01:25:33,360
a pointer to the buffer containing the

2797
01:25:33,360 --> 01:25:34,400
data to be written

2798
01:25:34,400 --> 01:25:36,239
how much data we're writing right so

2799
01:25:36,239 --> 01:25:37,920
basically the number of bytes to write

2800
01:25:37,920 --> 01:25:39,520
and then we have an output parameter the

2801
01:25:39,520 --> 01:25:40,560
number of bytes that were written

2802
01:25:40,560 --> 01:25:42,159
because you may request 100 bytes to be

2803
01:25:42,159 --> 01:25:43,840
written but maybe only 50 actually get

2804
01:25:43,840 --> 01:25:44,239
written

2805
01:25:44,239 --> 01:25:47,280
right um okay um so

2806
01:25:47,280 --> 01:25:48,880
okay this one's not interesting let's

2807
01:25:48,880 --> 01:25:50,560
let's continue all right so we're going

2808
01:25:50,560 --> 01:25:51,760
to run again

2809
01:25:51,760 --> 01:25:53,679
pause at the same break point by the way

2810
01:25:53,679 --> 01:25:55,679
uh nothing changed here right so 8c

2811
01:25:55,679 --> 01:25:57,280
right is that interesting i don't know

2812
01:25:57,280 --> 01:25:59,679
yet we we think no condor

2813
01:25:59,679 --> 01:26:01,280
not really interesting if i run this a

2814
01:26:01,280 --> 01:26:02,639
few times i'm like man you know what

2815
01:26:02,639 --> 01:26:04,159
this one's really not interesting to me

2816
01:26:04,159 --> 01:26:05,760
i can do one of two things i can go

2817
01:26:05,760 --> 01:26:06,880
ahead and i can

2818
01:26:06,880 --> 01:26:08,639
press f2 again and clear the breakpoint

2819
01:26:08,639 --> 01:26:10,800
right now that takes it out completely

2820
01:26:10,800 --> 01:26:12,880
alternatively i can hop back over here

2821
01:26:12,880 --> 01:26:15,120
and i can say you know what instead of

2822
01:26:15,120 --> 01:26:16,000
clearing it

2823
01:26:16,000 --> 01:26:17,679
i may want to re-enable it i press the

2824
01:26:17,679 --> 01:26:19,199
space bar here and notice the change is

2825
01:26:19,199 --> 01:26:20,320
disabled right

2826
01:26:20,320 --> 01:26:21,440
because now i'm going to be able to go

2827
01:26:21,440 --> 01:26:23,520
see another call to write file somewhere

2828
01:26:23,520 --> 01:26:24,960
else now i'm set at a different break

2829
01:26:24,960 --> 01:26:25,520
point

2830
01:26:25,520 --> 01:26:27,440
let's go examine that well it's a call

2831
01:26:27,440 --> 01:26:29,600
to write file and notice again it's 8c

2832
01:26:29,600 --> 01:26:30,719
all right i'm going to go ahead and just

2833
01:26:30,719 --> 01:26:31,440
clear this

2834
01:26:31,440 --> 01:26:34,000
clear this breakpoint let's see where we

2835
01:26:34,000 --> 01:26:37,840
go next we're running

2836
01:26:37,920 --> 01:26:40,000
come on give us some targeted analysis

2837
01:26:40,000 --> 01:26:42,719
here some targeted findings right

2838
01:26:42,719 --> 01:26:45,040
um

2839
01:26:46,239 --> 01:26:47,520
we've gone through a lot of how to use a

2840
01:26:47,520 --> 01:26:49,440
debugger and some of the stuff to look

2841
01:26:49,440 --> 01:26:51,760
for but wow would it be cool to have a

2842
01:26:51,760 --> 01:26:52,320
sample

2843
01:26:52,320 --> 01:26:55,120
that getting ready to do here is i'm

2844
01:26:55,120 --> 01:26:56,480
getting ready to drop back to one of my

2845
01:26:56,480 --> 01:26:59,360
oldies but goodies

2846
01:27:02,840 --> 01:27:05,840
hmm

2847
01:27:07,760 --> 01:27:10,239
yeah not pausing there at all okay um so

2848
01:27:10,239 --> 01:27:12,239
we got lots of right files initially

2849
01:27:12,239 --> 01:27:13,920
again this this may be that i just need

2850
01:27:13,920 --> 01:27:15,679
to wait longer i don't have that kind of

2851
01:27:15,679 --> 01:27:16,159
time

2852
01:27:16,159 --> 01:27:19,120
in this particular scenario and you know

2853
01:27:19,120 --> 01:27:19,840
again

2854
01:27:19,840 --> 01:27:21,440
want to keep this keep this fairly

2855
01:27:21,440 --> 01:27:23,199
simple so let's do this we're going to

2856
01:27:23,199 --> 01:27:24,639
drop back to a snapshot

2857
01:27:24,639 --> 01:27:26,320
i'm going to go grab a sample that we

2858
01:27:26,320 --> 01:27:28,000
know works

2859
01:27:28,000 --> 01:27:31,520
and instead of grabbing some

2860
01:27:31,520 --> 01:27:33,600
grab one from our course i grabbed some

2861
01:27:33,600 --> 01:27:35,360
stuff that we had uh reversed recently

2862
01:27:35,360 --> 01:27:36,960
for for different reasons uh i say

2863
01:27:36,960 --> 01:27:38,719
recently like in the last year

2864
01:27:38,719 --> 01:27:41,120
for different reasons um as opposed to

2865
01:27:41,120 --> 01:27:42,719
uh just going to the stuff that's in

2866
01:27:42,719 --> 01:27:46,000
the malware course that we teach and i'm

2867
01:27:46,000 --> 01:27:47,280
just going to grab one out of there i

2868
01:27:47,280 --> 01:27:48,960
don't stay out of desperation but that's

2869
01:27:48,960 --> 01:27:49,520
about

2870
01:27:49,520 --> 01:27:51,360
where where we're at because i got about

2871
01:27:51,360 --> 01:27:53,120
20 minutes

2872
01:27:53,120 --> 01:27:56,400
20 minutes ish left and i want to get

2873
01:27:56,400 --> 01:28:01,839
to a spot that we can

2874
01:28:02,320 --> 01:28:05,520
let's see here let's jump

2875
01:28:05,520 --> 01:28:08,080
over to c

2876
01:28:12,840 --> 01:28:14,639
knobs

2877
01:28:14,639 --> 01:28:16,800
so they all are executable executable

2878
01:28:16,800 --> 01:28:18,560
for the win okay cool

2879
01:28:18,560 --> 01:28:20,719
um so let me do this what i'm going to

2880
01:28:20,719 --> 01:28:24,159
do i'm just going to copy this

2881
01:28:25,679 --> 01:28:29,840
let's call this dot mutex.exe

2882
01:28:36,080 --> 01:28:39,440
okay okay

2883
01:28:39,440 --> 01:28:43,120
and fun fun and it has neat even has a

2884
01:28:43,120 --> 01:28:43,920
neat icon

2885
01:28:43,920 --> 01:28:47,040
all right so okay let's go ahead then

2886
01:28:47,040 --> 01:28:57,840
and we'll drop the x32 debug

2887
01:29:02,400 --> 01:29:04,639
well that's fun of course all right of

2888
01:29:04,639 --> 01:29:05,440
course uh

2889
01:29:05,440 --> 01:29:08,719
let's see i'm gonna grab

2890
01:29:08,719 --> 01:29:11,360
you can see things are not just not

2891
01:29:11,360 --> 01:29:12,880
going my way today

2892
01:29:12,880 --> 01:29:14,800
um i should have grabbed again one that

2893
01:29:14,800 --> 01:29:17,280
i know uh or some stuff that i know 100

2894
01:29:17,280 --> 01:29:20,320
is not going to fail

2895
01:29:20,320 --> 01:29:25,840
that one what me

2896
01:29:33,199 --> 01:29:39,839
let's grab one of these here

2897
01:29:40,639 --> 01:29:42,480
you notice i didn't change the uh change

2898
01:29:42,480 --> 01:29:44,239
the name of the executable here

2899
01:29:44,239 --> 01:29:46,239
um and it doesn't actually have an exe

2900
01:29:46,239 --> 01:29:48,480
extension okay cool so this one

2901
01:29:48,480 --> 01:29:50,960
hopefully this is a easy win let's go

2902
01:29:50,960 --> 01:29:53,520
find references there's our search for

2903
01:29:53,520 --> 01:29:56,560
current module intermodular calls

2904
01:29:56,560 --> 01:29:59,840
okay more ridges

2905
01:29:59,840 --> 01:30:01,280
let's go ahead and set some break points

2906
01:30:01,280 --> 01:30:04,239
here around the reg create key reg open

2907
01:30:04,239 --> 01:30:05,600
i'm going to go ahead and search for reg

2908
01:30:05,600 --> 01:30:06,239
here

2909
01:30:06,239 --> 01:30:08,480
just to get those uh you know those uh

2910
01:30:08,480 --> 01:30:09,520
those keys

2911
01:30:09,520 --> 01:30:12,080
uh or sorry those apis i'm gonna set

2912
01:30:12,080 --> 01:30:13,760
some break points around here

2913
01:30:13,760 --> 01:30:15,520
this one's interesting reg notify change

2914
01:30:15,520 --> 01:30:17,440
key value uh this basically sets up a

2915
01:30:17,440 --> 01:30:18,719
callback routine so you don't have to

2916
01:30:18,719 --> 01:30:19,120
check

2917
01:30:19,120 --> 01:30:20,800
to see if something's been changed this

2918
01:30:20,800 --> 01:30:22,159
is i don't want to say always use by

2919
01:30:22,159 --> 01:30:23,360
malware but very often

2920
01:30:23,360 --> 01:30:25,760
used by malware alright so i'll set some

2921
01:30:25,760 --> 01:30:27,360
breakpoints around here you have to set

2922
01:30:27,360 --> 01:30:28,400
them on all these

2923
01:30:28,400 --> 01:30:30,719
ordinarily i would right um and by the

2924
01:30:30,719 --> 01:30:32,320
way too you can go set these actually

2925
01:30:32,320 --> 01:30:34,400
in the api itself rather than in the

2926
01:30:34,400 --> 01:30:36,400
malware there's advantages to doing each

2927
01:30:36,400 --> 01:30:38,080
uh one of the big advantages setting in

2928
01:30:38,080 --> 01:30:39,120
the api

2929
01:30:39,120 --> 01:30:41,120
or in the dll is that you don't have to

2930
01:30:41,120 --> 01:30:43,679
deal with uh hitting f2 a bunch of times

2931
01:30:43,679 --> 01:30:46,159
like this right so basically you do it

2932
01:30:46,159 --> 01:30:46,800
once and

2933
01:30:46,800 --> 01:30:48,320
and that's uh that's it our answer

2934
01:30:48,320 --> 01:30:52,480
references orange2

2935
01:30:53,920 --> 01:30:58,159
again sure will delete value

2936
01:30:58,159 --> 01:31:00,719
value okay so i got a bunch of these set

2937
01:31:00,719 --> 01:31:01,920
and then i'm also going to look to see

2938
01:31:01,920 --> 01:31:03,920
was there a mutex in this there is

2939
01:31:03,920 --> 01:31:05,199
we'll go ahead and whack after you there

2940
01:31:05,199 --> 01:31:08,000
and let's go ahead and run

2941
01:31:08,239 --> 01:31:11,440
okay um we are sitting at a breakpoint

2942
01:31:11,440 --> 01:31:13,040
i'm going to hop back over to cpu notice

2943
01:31:13,040 --> 01:31:14,719
it's create mutex a

2944
01:31:14,719 --> 01:31:17,280
okay let's now come back good to go now

2945
01:31:17,280 --> 01:31:18,639
we have some targeted findings

2946
01:31:18,639 --> 01:31:21,280
wow it's been one of those days right

2947
01:31:21,280 --> 01:31:21,679
okay

2948
01:31:21,679 --> 01:31:24,800
so um and again like i said it was one

2949
01:31:24,800 --> 01:31:26,719
of those i i'm gonna call mia culpa here

2950
01:31:26,719 --> 01:31:28,320
and say that i wanted to go grab some

2951
01:31:28,320 --> 01:31:29,120
brand new

2952
01:31:29,120 --> 01:31:31,360
i say brand new stuff that we've done

2953
01:31:31,360 --> 01:31:32,239
but uh

2954
01:31:32,239 --> 01:31:35,520
forgot uh again from a how beginner

2955
01:31:35,520 --> 01:31:36,960
friendly some of this was and again i'm

2956
01:31:36,960 --> 01:31:38,719
on a short time period here to

2957
01:31:38,719 --> 01:31:40,320
to get you to spot you got some targeted

2958
01:31:40,320 --> 01:31:42,159
findings so targeted finding

2959
01:31:42,159 --> 01:31:44,960
right create new tax right so microsoft

2960
01:31:44,960 --> 01:31:45,520
dreams

2961
01:31:45,520 --> 01:31:47,120
is the name of the mutex is good bad and

2962
01:31:47,120 --> 01:31:49,280
different well the deal here is that by

2963
01:31:49,280 --> 01:31:51,520
creating this uh the malware is able to

2964
01:31:51,520 --> 01:31:52,960
go and see

2965
01:31:52,960 --> 01:31:55,600
uh basically is it already uh basically

2966
01:31:55,600 --> 01:31:56,960
is it already there it's able to go

2967
01:31:56,960 --> 01:31:57,600
plant a

2968
01:31:57,600 --> 01:32:00,719
plant to flag some malware we can abuse

2969
01:32:00,719 --> 01:32:03,440
the logic for it or as well as some

2970
01:32:03,440 --> 01:32:05,040
malware doesn't want to run

2971
01:32:05,040 --> 01:32:07,679
if a another particular malware sample

2972
01:32:07,679 --> 01:32:09,679
that it may identify by mutex is also

2973
01:32:09,679 --> 01:32:10,480
already running

2974
01:32:10,480 --> 01:32:13,440
and so we may be able there uh to uh you

2975
01:32:13,440 --> 01:32:14,480
know basically to

2976
01:32:14,480 --> 01:32:16,239
to to get some uh get some useful

2977
01:32:16,239 --> 01:32:18,320
insight i'll mention that if you're edr

2978
01:32:18,320 --> 01:32:21,520
i can't show mutexes right no problem

2979
01:32:21,520 --> 01:32:23,520
um you have a tool from microsoft

2980
01:32:23,520 --> 01:32:24,880
sysinternals or

2981
01:32:24,880 --> 01:32:27,520
used to be uh just direct system

2982
01:32:27,520 --> 01:32:29,199
journals now microsoft owns system

2983
01:32:29,199 --> 01:32:30,000
journals

2984
01:32:30,000 --> 01:32:31,440
but there's a tool from sysinternals

2985
01:32:31,440 --> 01:32:34,000
called handle.exe

2986
01:32:34,000 --> 01:32:36,960
and you can download a handle and

2987
01:32:36,960 --> 01:32:39,040
download handle and certainly use that

2988
01:32:39,040 --> 01:32:41,920
uh to uh to query handles on your

2989
01:32:41,920 --> 01:32:44,400
machine's assistant terminals

2990
01:32:44,400 --> 01:32:47,920
i don't know what that's going for there

2991
01:32:47,920 --> 01:32:50,159
garbage took a week and a half for

2992
01:32:50,159 --> 01:32:51,679
firefox to start i've got a bunch

2993
01:32:51,679 --> 01:32:55,040
running on this vm sadly and not

2994
01:32:55,040 --> 01:32:58,080
enough memory apparently so let's do

2995
01:32:58,080 --> 01:33:00,880
sysinternals

2996
01:33:01,440 --> 01:33:04,480
assistant draws handle

2997
01:33:05,199 --> 01:33:08,639
so okay um

2998
01:33:08,639 --> 01:33:10,639
so the handle uh tool here i'll just

2999
01:33:10,639 --> 01:33:12,239
mention i'm not going to go over there

3000
01:33:12,239 --> 01:33:12,800
but uh

3001
01:33:12,800 --> 01:33:14,320
i'll mention that you can use this to go

3002
01:33:14,320 --> 01:33:16,800
query mutexes you can use other tools

3003
01:33:16,800 --> 01:33:20,080
like process hacker certainly to see uh

3004
01:33:20,080 --> 01:33:21,199
to see mutex's

3005
01:33:21,199 --> 01:33:23,920
mutexes as well if i wanted to go look

3006
01:33:23,920 --> 01:33:25,199
at a particular

3007
01:33:25,199 --> 01:33:27,440
particular process here and in my case

3008
01:33:27,440 --> 01:33:30,320
here i've got this weird uh

3009
01:33:30,320 --> 01:33:32,800
this basically this weird sample let's

3010
01:33:32,800 --> 01:33:36,000
see which one do we have

3011
01:33:36,000 --> 01:33:39,040
it's our guy yeah so uh basically

3012
01:33:39,040 --> 01:33:41,120
uh oh i take it back so what we got here

3013
01:33:41,120 --> 01:33:42,800
is that uh dll loader

3014
01:33:42,800 --> 01:33:51,040
uh basically what's happening here is

3015
01:33:51,040 --> 01:33:53,600
yeah um so we're looking at uh basically

3016
01:33:53,600 --> 01:33:55,199
the uh the copy of that uh

3017
01:33:55,199 --> 01:33:58,480
copy of that executable um okay so

3018
01:33:58,480 --> 01:34:00,639
and it's uh of course of course running

3019
01:34:00,639 --> 01:34:02,159
here if we wanted to go take a look at

3020
01:34:02,159 --> 01:34:03,280
the handles here

3021
01:34:03,280 --> 01:34:05,840
we can come over and notice here access

3022
01:34:05,840 --> 01:34:09,040
denied because i need to be admin

3023
01:34:09,040 --> 01:34:12,960
just double click on that run as admin

3024
01:34:13,679 --> 01:34:16,719
i'm watching my time here got about 10

3025
01:34:16,719 --> 01:34:19,120
15 minutes left um okay so very quickly

3026
01:34:19,120 --> 01:34:20,480
here just want to show you kind of that

3027
01:34:20,480 --> 01:34:21,120
uh

3028
01:34:21,120 --> 01:34:22,800
a piece uh so if i go take a look at

3029
01:34:22,800 --> 01:34:24,560
handles here you'll notice that

3030
01:34:24,560 --> 01:34:26,400
um we don't have any mutexes or

3031
01:34:26,400 --> 01:34:28,159
sometimes they're referred as mutants

3032
01:34:28,159 --> 01:34:30,800
here i'm going to go ahead and inside my

3033
01:34:30,800 --> 01:34:31,600
debugger

3034
01:34:31,600 --> 01:34:33,520
all right so remember here we're broken

3035
01:34:33,520 --> 01:34:36,719
on and haven't actually continued past

3036
01:34:36,719 --> 01:34:38,400
this create mutex sorry but but now i'm

3037
01:34:38,400 --> 01:34:40,800
going to press f8 and say hey i want to

3038
01:34:40,800 --> 01:34:42,239
go ahead and execute this create mutex

3039
01:34:42,239 --> 01:34:43,520
and what i'm going to do is

3040
01:34:43,520 --> 01:34:45,679
then i'm going to hop over to process

3041
01:34:45,679 --> 01:34:47,040
hacker right

3042
01:34:47,040 --> 01:34:48,719
and you'll notice here that there's now

3043
01:34:48,719 --> 01:34:51,119
a mutant right now notice here the api

3044
01:34:51,119 --> 01:34:52,960
calls mutex but in the microsoft

3045
01:34:52,960 --> 01:34:54,400
internal documentation they call it a

3046
01:34:54,400 --> 01:34:55,119
mutant

3047
01:34:55,119 --> 01:34:56,960
uh the kind of like x-men mutants and

3048
01:34:56,960 --> 01:34:58,480
you see your microsoft dreams

3049
01:34:58,480 --> 01:35:00,639
now this is a hard thing for an attacker

3050
01:35:00,639 --> 01:35:01,840
to change right because

3051
01:35:01,840 --> 01:35:03,360
the whole purpose of a mutex is to

3052
01:35:03,360 --> 01:35:05,199
prevent multiple reinfection

3053
01:35:05,199 --> 01:35:07,760
or to plant a flag by a name saying hey

3054
01:35:07,760 --> 01:35:08,800
i am here so

3055
01:35:08,800 --> 01:35:10,800
other things i can see that you're there

3056
01:35:10,800 --> 01:35:12,639
configure did this very successfully as

3057
01:35:12,639 --> 01:35:14,800
do lots of other pieces of malware

3058
01:35:14,800 --> 01:35:17,040
that want to randomize the name of the

3059
01:35:17,040 --> 01:35:18,719
executable or dll

3060
01:35:18,719 --> 01:35:20,400
on the system right so if you think

3061
01:35:20,400 --> 01:35:22,239
about executable or dll in the system if

3062
01:35:22,239 --> 01:35:23,840
we wanted to randomize the name i can't

3063
01:35:23,840 --> 01:35:26,239
then go query the process list and say

3064
01:35:26,239 --> 01:35:28,400
am i running right i would see random

3065
01:35:28,400 --> 01:35:30,159
executables running but i wouldn't know

3066
01:35:30,159 --> 01:35:31,760
maybe random executable names

3067
01:35:31,760 --> 01:35:33,360
but i couldn't tell for sure that it's

3068
01:35:33,360 --> 01:35:34,960
me right without doing more

3069
01:35:34,960 --> 01:35:37,040
more analysis well the mutex helps me

3070
01:35:37,040 --> 01:35:38,880
with that now if i find one of these

3071
01:35:38,880 --> 01:35:40,400
this means that it's very difficult for

3072
01:35:40,400 --> 01:35:42,080
the attacker to change because changing

3073
01:35:42,080 --> 01:35:42,719
it

3074
01:35:42,719 --> 01:35:44,560
will negate the functionality right now

3075
01:35:44,560 --> 01:35:46,320
all the old malware checking for the old

3076
01:35:46,320 --> 01:35:48,080
mutex right before we change it

3077
01:35:48,080 --> 01:35:49,520
no longer works with the new malware

3078
01:35:49,520 --> 01:35:51,199
that drops the new mutax you see the

3079
01:35:51,199 --> 01:35:52,239
problem here right

3080
01:35:52,239 --> 01:35:53,760
um so we generally want to look for

3081
01:35:53,760 --> 01:35:55,440
things that are hard for the attackers

3082
01:35:55,440 --> 01:35:56,880
to change this is one of them so i'm

3083
01:35:56,880 --> 01:35:58,639
going to list microsoft dreams

3084
01:35:58,639 --> 01:36:01,280
as an ioc for this particular malware an

3085
01:36:01,280 --> 01:36:02,880
indicator of compromise right

3086
01:36:02,880 --> 01:36:04,560
and it's a fairly reliable one right

3087
01:36:04,560 --> 01:36:06,639
because well i mean it's hard coded into

3088
01:36:06,639 --> 01:36:07,920
the mail where we see it being created

3089
01:36:07,920 --> 01:36:09,119
here with create mutex

3090
01:36:09,119 --> 01:36:10,719
i'm going to go and log that as one of

3091
01:36:10,719 --> 01:36:13,199
my as one of my uh

3092
01:36:13,199 --> 01:36:15,360
one of my go-to's right i go to ioc's

3093
01:36:15,360 --> 01:36:16,960
i'm going to go and run again

3094
01:36:16,960 --> 01:36:18,960
and now it says debugging soft okay well

3095
01:36:18,960 --> 01:36:21,280
so we got one targeted finding here

3096
01:36:21,280 --> 01:36:24,080
without getting uh too deep into the

3097
01:36:24,080 --> 01:36:25,119
debugger let's see

3098
01:36:25,119 --> 01:36:28,880
snapshot i didn't take a snapshot before

3099
01:36:28,880 --> 01:36:30,280
this one right so i'm going back to

3100
01:36:30,280 --> 01:36:32,400
preexact2

3101
01:36:32,400 --> 01:36:34,799
blah

3102
01:36:36,239 --> 01:36:39,199
that's fine we'll go grab another i

3103
01:36:39,199 --> 01:36:40,480
think it may have again detected my

3104
01:36:40,480 --> 01:36:42,880
debugger i'm not 100 sure

3105
01:36:42,880 --> 01:36:44,639
i didn't have debugger detection set up

3106
01:36:44,639 --> 01:36:47,920
because i heard anti-anti-detection set

3107
01:36:47,920 --> 01:36:48,639
up

3108
01:36:48,639 --> 01:36:49,920
because i wanted to kind of walk through

3109
01:36:49,920 --> 01:36:52,560
some of that but

3110
01:36:52,560 --> 01:36:54,800
again teaching something for days uh

3111
01:36:54,800 --> 01:36:56,400
with a whole lesson plan

3112
01:36:56,400 --> 01:36:58,560
versus teaching something over uh you

3113
01:36:58,560 --> 01:37:00,000
know basically doing a seminar over an

3114
01:37:00,000 --> 01:37:01,440
hour and a half or two hours

3115
01:37:01,440 --> 01:37:03,360
uh kind of a different different play

3116
01:37:03,360 --> 01:37:04,480
there

3117
01:37:04,480 --> 01:37:06,719
and let's see let's go ahead then i'm

3118
01:37:06,719 --> 01:37:08,560
gonna hop back over here to

3119
01:37:08,560 --> 01:37:13,040
labs closing our explorer because it's a

3120
01:37:18,840 --> 01:37:20,320
devil uh

3121
01:37:20,320 --> 01:37:22,799
let's see

3122
01:37:24,000 --> 01:37:25,840
i think we're in a registry let's go

3123
01:37:25,840 --> 01:37:27,840
grab this other one here the 45k

3124
01:37:27,840 --> 01:37:29,840
and i'll drop that into the x32 bug

3125
01:37:29,840 --> 01:37:35,119
let's see what that one says

3126
01:37:35,119 --> 01:37:36,239
we'll see if we can find another

3127
01:37:36,239 --> 01:37:37,679
targeted or get some more targeted

3128
01:37:37,679 --> 01:37:38,560
findings here

3129
01:37:38,560 --> 01:37:40,480
um again i'll drop the samples that

3130
01:37:40,480 --> 01:37:41,760
we've used up to this point

3131
01:37:41,760 --> 01:37:44,000
in our uh i'll drop the samples you've

3132
01:37:44,000 --> 01:37:45,440
used up to this point

3133
01:37:45,440 --> 01:37:47,679
in a basically in a zip file that you

3134
01:37:47,679 --> 01:37:49,040
can download

3135
01:37:49,040 --> 01:37:51,520
and again we're gonna search for current

3136
01:37:51,520 --> 01:37:53,280
module intermodular calls

3137
01:37:53,280 --> 01:37:54,880
while i'm doing this this is probably a

3138
01:37:54,880 --> 01:37:56,880
great time to mention that uh you know

3139
01:37:56,880 --> 01:37:57,360
we have

3140
01:37:57,360 --> 01:37:59,600
barely scratched the surface just barely

3141
01:37:59,600 --> 01:38:00,960
scratched the surface here

3142
01:38:00,960 --> 01:38:03,920
right um you really need to uh to do uh

3143
01:38:03,920 --> 01:38:05,360
you know spend time with the debugger

3144
01:38:05,360 --> 01:38:06,960
even like on the debugger you may notice

3145
01:38:06,960 --> 01:38:08,480
that i'm doing kind of the same thing

3146
01:38:08,480 --> 01:38:10,400
um it's not that i'm a one-trick pony

3147
01:38:10,400 --> 01:38:11,840
it's that i don't have time to go into

3148
01:38:11,840 --> 01:38:12,400
like hey

3149
01:38:12,400 --> 01:38:13,920
here's how to do a bunch of analysis

3150
01:38:13,920 --> 01:38:15,360
that will you know get you to i was

3151
01:38:15,360 --> 01:38:16,639
trying to show you how to get some

3152
01:38:16,639 --> 01:38:18,159
targeted findings this is the way that i

3153
01:38:18,159 --> 01:38:19,679
show a lot of my folks to

3154
01:38:19,679 --> 01:38:21,600
to go get some of these but i see some

3155
01:38:21,600 --> 01:38:23,440
resource related api calls

3156
01:38:23,440 --> 01:38:25,760
so let's go and take a look at uh look

3157
01:38:25,760 --> 01:38:26,880
at this in

3158
01:38:26,880 --> 01:38:31,840
cff explorer

3159
01:38:32,719 --> 01:38:35,920
come on buddy

3160
01:38:35,920 --> 01:38:37,679
i mentioned before i really like cff

3161
01:38:37,679 --> 01:38:39,840
explorer because of the resources

3162
01:38:39,840 --> 01:38:43,840
right um let's see okay so we do have a

3163
01:38:43,840 --> 01:38:45,280
couple of resources here

3164
01:38:45,280 --> 01:38:48,320
uh one is named 102 and one is named 103

3165
01:38:48,320 --> 01:38:50,320
under the word file all right well i

3166
01:38:50,320 --> 01:38:52,159
don't recognize the code here like i

3167
01:38:52,159 --> 01:38:53,199
can't step back

3168
01:38:53,199 --> 01:38:55,360
oh i recognize that that's obviously

3169
01:38:55,360 --> 01:38:57,040
whatever i don't know what that is

3170
01:38:57,040 --> 01:38:58,800
um i don't see a file header there or an

3171
01:38:58,800 --> 01:39:00,480
mz header or maybe i dump those out

3172
01:39:00,480 --> 01:39:02,400
maybe i just look at how they're being

3173
01:39:02,400 --> 01:39:04,400
how they're ultimately being used right

3174
01:39:04,400 --> 01:39:05,760
okay so

3175
01:39:05,760 --> 01:39:07,920
i wanted to see if there's any uh very

3176
01:39:07,920 --> 01:39:09,360
easy to to run with

3177
01:39:09,360 --> 01:39:11,440
piece there let's take a look at what

3178
01:39:11,440 --> 01:39:12,480
we've got here

3179
01:39:12,480 --> 01:39:14,000
first off i'm going to go ahead and set

3180
01:39:14,000 --> 01:39:15,920
some anti-debugging options since this

3181
01:39:15,920 --> 01:39:17,600
is going to be our last ride

3182
01:39:17,600 --> 01:39:20,000
sociehide and i'm going to go ahead and

3183
01:39:20,000 --> 01:39:20,960
load uh

3184
01:39:20,960 --> 01:39:24,159
i'm going to do the basic cool

3185
01:39:24,159 --> 01:39:28,879
and let's do this let's do creates

3186
01:39:29,520 --> 01:39:32,080
okay so we definitely have a i

3187
01:39:32,080 --> 01:39:33,440
definitely have some possibility for

3188
01:39:33,440 --> 01:39:35,119
code injection that's a tool hub 32

3189
01:39:35,119 --> 01:39:37,119
snapshot walk on the process list

3190
01:39:37,119 --> 01:39:38,639
i'm going to take a look at services too

3191
01:39:38,639 --> 01:39:40,080
because it's got to create service why

3192
01:39:40,080 --> 01:39:41,440
wouldn't i want to see that

3193
01:39:41,440 --> 01:39:45,679
here's a reg create key no cancel

3194
01:39:45,679 --> 01:39:49,040
f2 and i'm going to leave the create

3195
01:39:49,040 --> 01:39:50,400
files out

3196
01:39:50,400 --> 01:39:52,960
for for a moment but the regis create

3197
01:39:52,960 --> 01:39:54,159
key seems interesting

3198
01:39:54,159 --> 01:39:57,040
and we'll look at the create 1232

3199
01:39:57,040 --> 01:39:59,040
snapshot and create service right

3200
01:39:59,040 --> 01:40:01,040
so i'm going to go and run and see if we

3201
01:40:01,040 --> 01:40:04,239
get a pause here

3202
01:40:04,480 --> 01:40:06,400
here we go pause okay so we hit a break

3203
01:40:06,400 --> 01:40:08,719
point uh let's hop back over to the cpu

3204
01:40:08,719 --> 01:40:10,080
pane and see which one it is

3205
01:40:10,080 --> 01:40:12,080
here we've got a create service awesome

3206
01:40:12,080 --> 01:40:14,320
okay so

3207
01:40:14,320 --> 01:40:16,080
this create service right you notice

3208
01:40:16,080 --> 01:40:18,000
here that we have a number of different

3209
01:40:18,000 --> 01:40:19,520
number of different arguments i'm down

3210
01:40:19,520 --> 01:40:21,040
here on my stack window and i said

3211
01:40:21,040 --> 01:40:22,560
before these are our

3212
01:40:22,560 --> 01:40:25,119
our arguments over here in the in the

3213
01:40:25,119 --> 01:40:26,320
top right

3214
01:40:26,320 --> 01:40:28,159
so i say top right it's using the middle

3215
01:40:28,159 --> 01:40:30,159
right pane our function arguments

3216
01:40:30,159 --> 01:40:32,400
but realistically here create service

3217
01:40:32,400 --> 01:40:33,760
takes too many arguments

3218
01:40:33,760 --> 01:40:35,600
to show all of them in fact we'll just

3219
01:40:35,600 --> 01:40:37,760
do this one last internet search

3220
01:40:37,760 --> 01:40:38,960
i think this can be our last internet

3221
01:40:38,960 --> 01:40:42,000
search together but create

3222
01:40:42,000 --> 01:40:45,040
create service and we'll take a look at

3223
01:40:45,040 --> 01:40:46,719
the arguments there you'll notice that

3224
01:40:46,719 --> 01:40:48,639
there's only five arguments here in fact

3225
01:40:48,639 --> 01:40:50,159
you can change this right if you wanted

3226
01:40:50,159 --> 01:40:51,760
to have more arguments here

3227
01:40:51,760 --> 01:40:53,360
right just typically that they aren't

3228
01:40:53,360 --> 01:40:55,440
needed right so um in this particular

3229
01:40:55,440 --> 01:40:57,199
case i think create service takes nine

3230
01:40:57,199 --> 01:40:59,360
but but don't don't hold me to that

3231
01:40:59,360 --> 01:41:02,320
we'll see in just a second

3232
01:41:03,600 --> 01:41:05,199
but basically here we're looking at are

3233
01:41:05,199 --> 01:41:07,119
the arguments uh and basically how do

3234
01:41:07,119 --> 01:41:07,600
those

3235
01:41:07,600 --> 01:41:09,520
uh play out together more than nine one

3236
01:41:09,520 --> 01:41:10,960
two three four

3237
01:41:10,960 --> 01:41:13,920
five six seven eight nine ten eleven

3238
01:41:13,920 --> 01:41:15,199
twelve thirteen okay so

3239
01:41:15,199 --> 01:41:17,360
so bad on bad on me for that right

3240
01:41:17,360 --> 01:41:18,639
basically here though you see the

3241
01:41:18,639 --> 01:41:20,400
arguments passed to or the actual

3242
01:41:20,400 --> 01:41:21,679
arguments would be passed to create

3243
01:41:21,679 --> 01:41:22,239
service

3244
01:41:22,239 --> 01:41:24,960
so i'm looking here at the uh the binary

3245
01:41:24,960 --> 01:41:25,840
path name

3246
01:41:25,840 --> 01:41:28,080
now look you can see here right that the

3247
01:41:28,080 --> 01:41:30,080
binary path name there's only one thing

3248
01:41:30,080 --> 01:41:30,800
on the stack

3249
01:41:30,800 --> 01:41:32,800
that even matches that in in this area

3250
01:41:32,800 --> 01:41:34,960
here right uh but arguments uh two and

3251
01:41:34,960 --> 01:41:36,560
three are the service name

3252
01:41:36,560 --> 01:41:39,040
right so you're looking at the service

3253
01:41:39,040 --> 01:41:41,040
name i'm sorry service name and display

3254
01:41:41,040 --> 01:41:42,400
name those are two and three

3255
01:41:42,400 --> 01:41:44,080
and then argument eight the binary path

3256
01:41:44,080 --> 01:41:45,600
name right so we count up

3257
01:41:45,600 --> 01:41:48,639
all right so we're looking at 1

3258
01:41:48,639 --> 01:41:52,400
2 and 3 right so fgsm is used right so 4

3259
01:41:52,400 --> 01:41:56,159
5 6 7 8 then is our binary path right

3260
01:41:56,159 --> 01:41:59,119
so fgsm dot sis this is probably

3261
01:41:59,119 --> 01:42:00,480
something i want to go take a look at

3262
01:42:00,480 --> 01:42:01,199
all right so

3263
01:42:01,199 --> 01:42:04,320
that's my syswire 64.

3264
01:42:04,320 --> 01:42:14,159
let's do this durr

3265
01:42:14,159 --> 01:42:17,920
system 32 drivers oh system 32

3266
01:42:17,920 --> 01:42:21,040
um fgsm dot cis right

3267
01:42:21,040 --> 01:42:22,800
it says not found what's going on here

3268
01:42:22,800 --> 01:42:24,800
right well remember this is

3269
01:42:24,800 --> 01:42:28,239
a uh remember that this is a 32-bit

3270
01:42:28,239 --> 01:42:30,239
malware sample or an x32 debug

3271
01:42:30,239 --> 01:42:31,440
all right so what i need to do is i need

3272
01:42:31,440 --> 01:42:34,080
to go take a look at syswire64

3273
01:42:34,080 --> 01:42:35,440
right remember i talked about file

3274
01:42:35,440 --> 01:42:36,960
system redirection earlier that's what

3275
01:42:36,960 --> 01:42:40,159
you're looking at here right so fgsm.cis

3276
01:42:40,159 --> 01:42:42,480
right and now you see indeed fgsm.sys

3277
01:42:42,480 --> 01:42:44,800
now obviously then this malware uh

3278
01:42:44,800 --> 01:42:46,800
dropped this here right um so i'm

3279
01:42:46,800 --> 01:42:48,159
interested there right and

3280
01:42:48,159 --> 01:42:50,000
of course the dropping mechanism i might

3281
01:42:50,000 --> 01:42:52,880
go take a look at fgsm.cis i might copy

3282
01:42:52,880 --> 01:42:54,840
uh you know for instance this over to my

3283
01:42:54,840 --> 01:42:57,840
desktop

3284
01:43:00,000 --> 01:43:04,800
and actually i'll just put it in labs

3285
01:43:04,800 --> 01:43:06,560
so i now have a copy of this that i

3286
01:43:06,560 --> 01:43:08,239
might then go take a look at

3287
01:43:08,239 --> 01:43:10,960
for instance here i can come back in to

3288
01:43:10,960 --> 01:43:11,360
my

3289
01:43:11,360 --> 01:43:14,400
labs directory and grab fgsm

3290
01:43:14,400 --> 01:43:17,440
and drop it into

3291
01:43:17,600 --> 01:43:20,480
pe studio and go take a look at what

3292
01:43:20,480 --> 01:43:22,000
does pe studio know about this right

3293
01:43:22,000 --> 01:43:23,440
what going to tell me about this

3294
01:43:23,440 --> 01:43:25,520
this this service because what i have an

3295
01:43:25,520 --> 01:43:27,679
idea or this uh this this dot sys file

3296
01:43:27,679 --> 01:43:29,520
which may or may not be a driver

3297
01:43:29,520 --> 01:43:31,280
one of the things that i say may or may

3298
01:43:31,280 --> 01:43:33,600
not be by convention it is a driver but

3299
01:43:33,600 --> 01:43:35,119
that doesn't mean that it is actually a

3300
01:43:35,119 --> 01:43:36,560
driver right

3301
01:43:36,560 --> 01:43:38,880
although here it seems to indeed

3302
01:43:38,880 --> 01:43:39,840
indicate that

3303
01:43:39,840 --> 01:43:41,440
at least for the few things that detect

3304
01:43:41,440 --> 01:43:43,520
it as malicious i notice here though a

3305
01:43:43,520 --> 01:43:44,719
lot of things don't detect this is

3306
01:43:44,719 --> 01:43:45,840
malicious right

3307
01:43:45,840 --> 01:43:47,280
um so kind of the delta that you're

3308
01:43:47,280 --> 01:43:48,880
looking at here is kind of the payload

3309
01:43:48,880 --> 01:43:50,080
versus the dropper

3310
01:43:50,080 --> 01:43:51,840
this might be the payload versus the

3311
01:43:51,840 --> 01:43:53,199
thing that we're analyzing the debugger

3312
01:43:53,199 --> 01:43:55,119
right now being the uh being the dropper

3313
01:43:55,119 --> 01:43:56,480
okay so i gotta create service i'm gonna

3314
01:43:56,480 --> 01:43:57,840
go ahead and run again here and see if

3315
01:43:57,840 --> 01:43:59,280
we get another break point

3316
01:43:59,280 --> 01:44:02,800
uh sure enough here uh it says

3317
01:44:02,800 --> 01:44:07,840
no let's go run again

3318
01:44:08,159 --> 01:44:12,239
ctrl shift now okay um so

3319
01:44:12,239 --> 01:44:14,639
this actually is not unexpected um we're

3320
01:44:14,639 --> 01:44:15,600
trying to uh

3321
01:44:15,600 --> 01:44:18,080
start a 32-bit or sorry create a 32-bit

3322
01:44:18,080 --> 01:44:19,040
service

3323
01:44:19,040 --> 01:44:22,560
on a 64-bit 32-bit driver on a 64-bit

3324
01:44:22,560 --> 01:44:23,920
machine i don't

3325
01:44:23,920 --> 01:44:25,920
i'm not surprised that this is uh

3326
01:44:25,920 --> 01:44:28,159
causing causing a violation here

3327
01:44:28,159 --> 01:44:29,920
um so this malware would have been

3328
01:44:29,920 --> 01:44:31,440
targeted for a 32-bit machine we're

3329
01:44:31,440 --> 01:44:33,600
analyzing a 64-bit right

3330
01:44:33,600 --> 01:44:35,920
now i'll tell you that a lot of malware

3331
01:44:35,920 --> 01:44:37,679
today and this one's an older sample

3332
01:44:37,679 --> 01:44:38,880
it's one of the reasons i grabbed some

3333
01:44:38,880 --> 01:44:39,600
recent ones

3334
01:44:39,600 --> 01:44:40,880
but then we were getting immediate

3335
01:44:40,880 --> 01:44:42,639
targeted findings that i could show you

3336
01:44:42,639 --> 01:44:44,159
uh to kind of highlight some of the

3337
01:44:44,159 --> 01:44:45,920
debugger stuff that some of the debugger

3338
01:44:45,920 --> 01:44:47,199
theory that we walked through

3339
01:44:47,199 --> 01:44:48,880
and hence that's why that's why we're

3340
01:44:48,880 --> 01:44:51,440
here so

3341
01:44:52,400 --> 01:44:55,040
um i'm looking here and we've run about

3342
01:44:55,040 --> 01:44:56,480
an hour and 45

3343
01:44:56,480 --> 01:44:58,719
about an hour and 45 minutes right um

3344
01:44:58,719 --> 01:44:59,920
and so

3345
01:44:59,920 --> 01:45:03,040
this is a spot where um i think is

3346
01:45:03,040 --> 01:45:05,760
probably a good time to do a a wrap up

3347
01:45:05,760 --> 01:45:06,159
um

3348
01:45:06,159 --> 01:45:08,000
and then leave a couple of minutes for

3349
01:45:08,000 --> 01:45:09,199
questions intermission

3350
01:45:09,199 --> 01:45:11,679
whatever uh here uh here at the end um

3351
01:45:11,679 --> 01:45:12,239
so

3352
01:45:12,239 --> 01:45:14,560
uh let's see a couple of high points

3353
01:45:14,560 --> 01:45:15,360
right um

3354
01:45:15,360 --> 01:45:17,040
you know one you don't need to know a

3355
01:45:17,040 --> 01:45:18,560
lot of assembly to

3356
01:45:18,560 --> 01:45:21,440
uh to do analysis to do basic analysis

3357
01:45:21,440 --> 01:45:21,920
you know

3358
01:45:21,920 --> 01:45:24,800
we've seen here how uh some google foo

3359
01:45:24,800 --> 01:45:26,560
with intermodular calls

3360
01:45:26,560 --> 01:45:29,040
can get us to at least some in some

3361
01:45:29,040 --> 01:45:29,760
cases

3362
01:45:29,760 --> 01:45:31,280
obviously you saw some cases where we

3363
01:45:31,280 --> 01:45:32,880
didn't get good targeted findings

3364
01:45:32,880 --> 01:45:34,639
um and and why didn't we get good

3365
01:45:34,639 --> 01:45:36,239
targeted binds that is going to require

3366
01:45:36,239 --> 01:45:38,080
some deeper analysis and some assembly

3367
01:45:38,080 --> 01:45:41,119
i'm sorry um but uh but in other cases

3368
01:45:41,119 --> 01:45:42,960
um we are able for instance to find a

3369
01:45:42,960 --> 01:45:44,639
mutex name being created we're able to

3370
01:45:44,639 --> 01:45:45,119
find

3371
01:45:45,119 --> 01:45:47,360
uh you know registry calls and and see

3372
01:45:47,360 --> 01:45:49,440
how those uh see how those work

3373
01:45:49,440 --> 01:45:51,520
and i'm a big fan of uh you know upping

3374
01:45:51,520 --> 01:45:52,880
your game by learning how to use

3375
01:45:52,880 --> 01:45:53,600
debugger

3376
01:45:53,600 --> 01:45:56,080
you will not regret again learning how

3377
01:45:56,080 --> 01:45:57,199
to do this

3378
01:45:57,199 --> 01:45:58,560
and learning how to get some some

3379
01:45:58,560 --> 01:46:00,719
debugger experience hopefully

3380
01:46:00,719 --> 01:46:02,000
at least that first piece kind of

3381
01:46:02,000 --> 01:46:03,679
walking you through some of the and by

3382
01:46:03,679 --> 01:46:04,960
the way too you'll notice there's tabs

3383
01:46:04,960 --> 01:46:06,320
that we haven't even touched here right

3384
01:46:06,320 --> 01:46:08,080
normally i teach a malware course

3385
01:46:08,080 --> 01:46:10,719
i'm a big memory fanatic memory memory

3386
01:46:10,719 --> 01:46:11,920
forensics and

3387
01:46:11,920 --> 01:46:13,920
and memory manipulation in general and i

3388
01:46:13,920 --> 01:46:15,199
dive through the memory

3389
01:46:15,199 --> 01:46:17,040
uh the memory map and how the paging

3390
01:46:17,040 --> 01:46:18,800
system i just have that kind of time so

3391
01:46:18,800 --> 01:46:20,719
but but i do recommend that you take a

3392
01:46:20,719 --> 01:46:22,560
look at uh you know really some of these

3393
01:46:22,560 --> 01:46:24,000
other tabs and the features that are

3394
01:46:24,000 --> 01:46:25,679
available in the debugger and

3395
01:46:25,679 --> 01:46:27,040
and and some of the stuff that debugger

3396
01:46:27,040 --> 01:46:28,719
can can do for you because really all we

3397
01:46:28,719 --> 01:46:29,040
hit

3398
01:46:29,040 --> 01:46:32,080
uh see we had the cpu pane uh we looked

3399
01:46:32,080 --> 01:46:32,480
very

3400
01:46:32,480 --> 01:46:34,960
briefly at break points uh symbols uh

3401
01:46:34,960 --> 01:46:36,560
certainly and then references and i

3402
01:46:36,560 --> 01:46:38,239
think uh we were briefly in handles

3403
01:46:38,239 --> 01:46:39,440
right but but again there's

3404
01:46:39,440 --> 01:46:41,520
there's so much more up here and so many

3405
01:46:41,520 --> 01:46:43,360
more features uh to look at

3406
01:46:43,360 --> 01:46:44,719
uh but the other thing i'll mention is

3407
01:46:44,719 --> 01:46:46,400
don't be intimidated right um

3408
01:46:46,400 --> 01:46:48,400
this is the kind of thing now reversing

3409
01:46:48,400 --> 01:46:49,840
and malware analysis is the kind of

3410
01:46:49,840 --> 01:46:50,960
thing that can be

3411
01:46:50,960 --> 01:46:54,480
extraordinarily frustrating to deal with

3412
01:46:54,480 --> 01:46:56,560
and frustrating to learn and a lot of

3413
01:46:56,560 --> 01:46:57,679
people like well i don't know

3414
01:46:57,679 --> 01:46:59,760
everything about this debugger so i'm

3415
01:46:59,760 --> 01:47:01,199
just not gonna deal with it i'm just i'm

3416
01:47:01,199 --> 01:47:02,480
just gonna ignore it or any kind of

3417
01:47:02,480 --> 01:47:03,280
thing i'm not gonna

3418
01:47:03,280 --> 01:47:04,960
i'm not even gonna try right it's like

3419
01:47:04,960 --> 01:47:07,199
no no get in there slog through it

3420
01:47:07,199 --> 01:47:09,040
uh it's gonna suck initially because it

3421
01:47:09,040 --> 01:47:10,320
just is um and

3422
01:47:10,320 --> 01:47:12,159
as you learn more and become this chain

3423
01:47:12,159 --> 01:47:13,440
learning experience and

3424
01:47:13,440 --> 01:47:15,840
and generally uh folks over time get get

3425
01:47:15,840 --> 01:47:17,360
much better at this all right so

3426
01:47:17,360 --> 01:47:18,960
anyway um that's where i'm gonna leave

3427
01:47:18,960 --> 01:47:20,719
you here um i appreciate everybody's

3428
01:47:20,719 --> 01:47:21,520
time uh

3429
01:47:21,520 --> 01:47:24,880
today and uh you know again certainly uh

3430
01:47:24,880 --> 01:47:26,080
examples could have been a little bit

3431
01:47:26,080 --> 01:47:28,080
less disjointed i grabbed

3432
01:47:28,080 --> 01:47:30,960
again some samples here to uh samples to

3433
01:47:30,960 --> 01:47:31,920
walk through

3434
01:47:31,920 --> 01:47:34,239
but again i'll provide a download link

3435
01:47:34,239 --> 01:47:35,040
to all those

3436
01:47:35,040 --> 01:47:37,520
all those samples here as we as we go

3437
01:47:37,520 --> 01:47:39,280
live so anyway appreciate everybody's

3438
01:47:39,280 --> 01:47:40,880
time thank you so much for coming out

3439
01:47:40,880 --> 01:47:42,560
uh and again my name is jake williams

3440
01:47:42,560 --> 01:47:44,080
from audition infosec

3441
01:47:44,080 --> 01:47:48,080
peace out

