1
00:00:00,080 --> 00:00:04,000
that response malware triage so even

2
00:00:04,000 --> 00:00:06,560
as i read currently focusing more on the

3
00:00:06,560 --> 00:00:08,240
red team side i really enjoy

4
00:00:08,240 --> 00:00:10,240
leaning in and helping uplift detections

5
00:00:10,240 --> 00:00:11,920
and collaborating

6
00:00:11,920 --> 00:00:13,519
with blue teamers especially since i

7
00:00:13,519 --> 00:00:14,960
have that background

8
00:00:14,960 --> 00:00:17,119
um a personal area of interest of mine

9
00:00:17,119 --> 00:00:19,199
is mac os post exploitation

10
00:00:19,199 --> 00:00:21,520
so that's usually where i spend my free

11
00:00:21,520 --> 00:00:22,880
time where if i'm not

12
00:00:22,880 --> 00:00:25,039
playing a zelda breath of the wild with

13
00:00:25,039 --> 00:00:26,640
with my kids i'm doing that

14
00:00:26,640 --> 00:00:29,199
i will caveat and say that i am trash at

15
00:00:29,199 --> 00:00:31,119
uh zelda breath of the wild i pretty

16
00:00:31,119 --> 00:00:32,640
much have to ask my kids and they tell

17
00:00:32,640 --> 00:00:33,520
me where to go and

18
00:00:33,520 --> 00:00:35,760
i just go and it works but uh when i'm

19
00:00:35,760 --> 00:00:37,440
not doing breath of the wild i'm usually

20
00:00:37,440 --> 00:00:39,840
working on some sci project around

21
00:00:39,840 --> 00:00:43,200
mac os post exploitation um i enjoy

22
00:00:43,200 --> 00:00:45,680
80s and 90s nostalgia so i'll have

23
00:00:45,680 --> 00:00:46,559
little pictures throughout the

24
00:00:46,559 --> 00:00:48,320
presentation reflecting that

25
00:00:48,320 --> 00:00:50,800
and i am on twitter with the handle at

26
00:00:50,800 --> 00:00:51,840
said owens

27
00:00:51,840 --> 00:00:54,320
i also want to shout out uh chris ross

28
00:00:54,320 --> 00:00:57,360
uh also goes by zorier at spectreops

29
00:00:57,360 --> 00:00:59,199
i consider him to be what i call like

30
00:00:59,199 --> 00:01:00,480
the forefather

31
00:01:00,480 --> 00:01:03,760
of mac os security research uh well both

32
00:01:03,760 --> 00:01:07,680
chris ross and um uh patrick wordle

33
00:01:07,680 --> 00:01:09,280
and uh so i just wanted to shout both of

34
00:01:09,280 --> 00:01:11,040
them out and just thank them for the

35
00:01:11,040 --> 00:01:12,720
groundwork that they have laid and how

36
00:01:12,720 --> 00:01:13,920
they have opened the door for people

37
00:01:13,920 --> 00:01:15,680
like myself to come behind them years

38
00:01:15,680 --> 00:01:16,320
later

39
00:01:16,320 --> 00:01:17,840
and build and innovate on the work that

40
00:01:17,840 --> 00:01:20,159
they've done

41
00:01:20,159 --> 00:01:22,159
so just kind of looking at the agenda of

42
00:01:22,159 --> 00:01:23,520
what i plan to go through

43
00:01:23,520 --> 00:01:25,520
plan to briefly talk about what i call

44
00:01:25,520 --> 00:01:27,600
the state of the union for mac os

45
00:01:27,600 --> 00:01:29,840
look at some common deployments and

46
00:01:29,840 --> 00:01:31,840
attack opportunities associated with

47
00:01:31,840 --> 00:01:32,960
those deployments

48
00:01:32,960 --> 00:01:35,759
then i also plan to look at the attack

49
00:01:35,759 --> 00:01:37,280
the kill chain from the attacker's

50
00:01:37,280 --> 00:01:38,400
perspective

51
00:01:38,400 --> 00:01:40,159
and what that looks like in the mac os

52
00:01:40,159 --> 00:01:42,479
environment also i plan to discuss

53
00:01:42,479 --> 00:01:44,000
adversary emulations

54
00:01:44,000 --> 00:01:46,000
simulations along with some challenges

55
00:01:46,000 --> 00:01:48,240
and opportunities unique to mac os

56
00:01:48,240 --> 00:01:49,920
and then i plan to close out with

57
00:01:49,920 --> 00:01:53,280
defensive recommendations

58
00:01:53,520 --> 00:01:56,000
so from a state of union perspective if

59
00:01:56,000 --> 00:01:56,960
you look at the

60
00:01:56,960 --> 00:01:59,040
the world outside of the little sliver

61
00:01:59,040 --> 00:02:00,719
of the san francisco bay area

62
00:02:00,719 --> 00:02:02,320
you'll notice that in those most of

63
00:02:02,320 --> 00:02:04,960
those environments uh the vast majority

64
00:02:04,960 --> 00:02:07,360
of desktop operating systems are windows

65
00:02:07,360 --> 00:02:08,318
with very

66
00:02:08,318 --> 00:02:11,200
small percentage of windows uh of mac os

67
00:02:11,200 --> 00:02:12,720
so you can see stats here at the bottom

68
00:02:12,720 --> 00:02:14,080
that kind of reflects

69
00:02:14,080 --> 00:02:15,680
the world outside of the bay where

70
00:02:15,680 --> 00:02:17,200
you're probably around 80

71
00:02:17,200 --> 00:02:20,400
windows and just under 20 mac os

72
00:02:20,400 --> 00:02:23,040
however if you look in at the tech

73
00:02:23,040 --> 00:02:25,040
companies specific to the bay area

74
00:02:25,040 --> 00:02:27,040
those numbers actually flip where you

75
00:02:27,040 --> 00:02:28,560
may it's very

76
00:02:28,560 --> 00:02:31,040
very common where you may see mac os

77
00:02:31,040 --> 00:02:31,920
makes

78
00:02:31,920 --> 00:02:34,959
80 to 90 of endpoints with windows

79
00:02:34,959 --> 00:02:38,560
only being 10. and so uh that's uh

80
00:02:38,560 --> 00:02:41,120
that that part has been uh interesting

81
00:02:41,120 --> 00:02:42,560
interesting facet for me and kind of

82
00:02:42,560 --> 00:02:44,319
what drove me into

83
00:02:44,319 --> 00:02:45,680
digging and spending more time on the

84
00:02:45,680 --> 00:02:47,599
mac os side and from

85
00:02:47,599 --> 00:02:49,200
endpoint detection and response over the

86
00:02:49,200 --> 00:02:51,680
years i noticed when edr initially came

87
00:02:51,680 --> 00:02:53,200
out years ago

88
00:02:53,200 --> 00:02:55,280
it was mostly windows support with very

89
00:02:55,280 --> 00:02:56,959
little linux or mac

90
00:02:56,959 --> 00:02:59,200
and then over time linux and mac started

91
00:02:59,200 --> 00:03:00,560
to become supported

92
00:03:00,560 --> 00:03:02,800
initially those were really just kind of

93
00:03:02,800 --> 00:03:04,720
like raw logs with no

94
00:03:04,720 --> 00:03:07,519
intelligence or analysis around it but

95
00:03:07,519 --> 00:03:09,280
if you fast forward to today

96
00:03:09,280 --> 00:03:11,760
edr even for mac os has come a long way

97
00:03:11,760 --> 00:03:12,879
and

98
00:03:12,879 --> 00:03:14,560
even has some decent detections out of

99
00:03:14,560 --> 00:03:16,239
the box some of them are even pulling

100
00:03:16,239 --> 00:03:18,000
threat intelligence data sources

101
00:03:18,000 --> 00:03:20,159
so there's definitely room for

102
00:03:20,159 --> 00:03:21,599
opportunity but i definitely wanted to

103
00:03:21,599 --> 00:03:23,360
mention as well the progress that i

104
00:03:23,360 --> 00:03:25,599
personally have seen with edr products

105
00:03:25,599 --> 00:03:26,879
as they relate to mac

106
00:03:26,879 --> 00:03:28,480
and of course you also have more malware

107
00:03:28,480 --> 00:03:30,400
that's targeting mac endpoints

108
00:03:30,400 --> 00:03:32,720
and you can look at patrick wardle's mac

109
00:03:32,720 --> 00:03:34,720
malware of 2019 report

110
00:03:34,720 --> 00:03:37,440
it's a great example of looking at um

111
00:03:37,440 --> 00:03:38,720
examples of real world

112
00:03:38,720 --> 00:03:41,200
instances where mac macs are being

113
00:03:41,200 --> 00:03:44,560
targeted and what that looks like

114
00:03:45,040 --> 00:03:47,920
so given what the world looks like

115
00:03:47,920 --> 00:03:49,519
outside of the bay there's still a lot

116
00:03:49,519 --> 00:03:51,360
of discomfort with targeting

117
00:03:51,360 --> 00:03:54,319
mac os a lot of questions on both the

118
00:03:54,319 --> 00:03:56,080
red and blue side some of the offensive

119
00:03:56,080 --> 00:03:57,840
questions include like what payloads

120
00:03:57,840 --> 00:03:58,959
should i use

121
00:03:58,959 --> 00:04:00,560
how do you build those payloads what

122
00:04:00,560 --> 00:04:02,080
languages do i need to learn

123
00:04:02,080 --> 00:04:04,879
how do you get access to a mac uh once

124
00:04:04,879 --> 00:04:06,640
you get access what do you do

125
00:04:06,640 --> 00:04:08,000
is there any relationship to active

126
00:04:08,000 --> 00:04:10,400
directory endpoint detection

127
00:04:10,400 --> 00:04:11,840
and security products what should i be

128
00:04:11,840 --> 00:04:14,239
worried about and so for this talk

129
00:04:14,239 --> 00:04:16,639
plan to cover as much as i can i won't

130
00:04:16,639 --> 00:04:18,320
be able to go as deep as i want because

131
00:04:18,320 --> 00:04:19,839
i'm trying to cover

132
00:04:19,839 --> 00:04:23,040
a large like array of topics but i hope

133
00:04:23,040 --> 00:04:23,360
to

134
00:04:23,360 --> 00:04:24,960
answer as many of these as possible

135
00:04:24,960 --> 00:04:27,440
during the presentation

136
00:04:27,440 --> 00:04:29,600
uh before i jump in just wanted to share

137
00:04:29,600 --> 00:04:31,759
my perspective on what i consider to be

138
00:04:31,759 --> 00:04:34,080
some goals of red team operations

139
00:04:34,080 --> 00:04:35,280
so you can see a picture there of jiu

140
00:04:35,280 --> 00:04:37,120
jitsu i'm actually a white belt in jiu

141
00:04:37,120 --> 00:04:37,919
jitsu

142
00:04:37,919 --> 00:04:39,840
and so this this picture resonated with

143
00:04:39,840 --> 00:04:41,199
me and i think about

144
00:04:41,199 --> 00:04:43,120
uh kind of the relationship that guys

145
00:04:43,120 --> 00:04:45,280
like to malcolm vetter and others in red

146
00:04:45,280 --> 00:04:46,240
team space

147
00:04:46,240 --> 00:04:48,320
and how they've compared uh cyber

148
00:04:48,320 --> 00:04:49,919
security blue versus red

149
00:04:49,919 --> 00:04:52,479
to jiu jitsu and i think it's a very

150
00:04:52,479 --> 00:04:52,960
great

151
00:04:52,960 --> 00:04:55,040
um analogy because as a student in jiu

152
00:04:55,040 --> 00:04:56,000
jitsu

153
00:04:56,000 --> 00:04:57,680
i was often taught moves and i was

154
00:04:57,680 --> 00:04:59,199
taught both how to

155
00:04:59,199 --> 00:05:01,280
like execute the moves and how to defend

156
00:05:01,280 --> 00:05:03,600
the moves and you have to know both to

157
00:05:03,600 --> 00:05:05,039
really be successful

158
00:05:05,039 --> 00:05:07,039
and i think that really ties over well

159
00:05:07,039 --> 00:05:09,440
into like red blue operations where red

160
00:05:09,440 --> 00:05:11,280
teams really need to understand

161
00:05:11,280 --> 00:05:13,120
defenses and detections and the

162
00:05:13,120 --> 00:05:14,960
artifacts you're leaving on the system

163
00:05:14,960 --> 00:05:16,479
and i think blue teams really need to

164
00:05:16,479 --> 00:05:18,080
understand offense and

165
00:05:18,080 --> 00:05:19,680
what those capabilities are what the

166
00:05:19,680 --> 00:05:21,759
attacker mindset are it's like the two

167
00:05:21,759 --> 00:05:22,880
are kind of merging

168
00:05:22,880 --> 00:05:25,680
and through challenging and working

169
00:05:25,680 --> 00:05:26,240
together

170
00:05:26,240 --> 00:05:28,080
with each other's skill sets so some of

171
00:05:28,080 --> 00:05:30,080
the specific goals i think about for red

172
00:05:30,080 --> 00:05:31,680
team ops i think about the goal of

173
00:05:31,680 --> 00:05:33,199
testing detections right you want to

174
00:05:33,199 --> 00:05:35,520
make sure the efficacy of detections

175
00:05:35,520 --> 00:05:37,600
is high quality you also want to look at

176
00:05:37,600 --> 00:05:39,440
testing your response and not just the

177
00:05:39,440 --> 00:05:40,800
ability to respond

178
00:05:40,800 --> 00:05:43,520
but how adequately can the response lead

179
00:05:43,520 --> 00:05:45,440
to remediation

180
00:05:45,440 --> 00:05:47,199
also thinking about testing preventions

181
00:05:47,199 --> 00:05:48,479
that have been put in place and making

182
00:05:48,479 --> 00:05:50,960
sure those are working as expected

183
00:05:50,960 --> 00:05:52,800
one question i like to answer personally

184
00:05:52,800 --> 00:05:55,360
is if an adversary with these types of

185
00:05:55,360 --> 00:05:56,560
capabilities

186
00:05:56,560 --> 00:05:59,039
went after our organization how would we

187
00:05:59,039 --> 00:06:01,360
fare how far would the adversary get

188
00:06:01,360 --> 00:06:02,479
how long could they stay in the

189
00:06:02,479 --> 00:06:04,720
environment before blue team sees them

190
00:06:04,720 --> 00:06:06,240
how long would it take blue team to

191
00:06:06,240 --> 00:06:07,759
completely eradicate them

192
00:06:07,759 --> 00:06:09,039
things like that i think that gives a

193
00:06:09,039 --> 00:06:10,880
lot of good contextual

194
00:06:10,880 --> 00:06:13,199
perspective to the operation and then as

195
00:06:13,199 --> 00:06:14,720
i mentioned before i really enjoy

196
00:06:14,720 --> 00:06:16,479
collaboration with blue to actually

197
00:06:16,479 --> 00:06:18,000
uplift detection so instead of just

198
00:06:18,000 --> 00:06:19,360
throwing a report over

199
00:06:19,360 --> 00:06:21,280
with detection recommendations actually

200
00:06:21,280 --> 00:06:22,800
enjoy getting in

201
00:06:22,800 --> 00:06:25,199
digging into splunk or edr consoles and

202
00:06:25,199 --> 00:06:25,840
just

203
00:06:25,840 --> 00:06:27,919
actually working side by side to build

204
00:06:27,919 --> 00:06:30,720
and validate detections

205
00:06:30,720 --> 00:06:33,120
so let's look at some common deployments

206
00:06:33,120 --> 00:06:34,000
in mac os

207
00:06:34,000 --> 00:06:36,400
environments so i do want to reference

208
00:06:36,400 --> 00:06:37,120
one source

209
00:06:37,120 --> 00:06:38,560
that i thought was really good and i

210
00:06:38,560 --> 00:06:39,759
think you should read on it if you're

211
00:06:39,759 --> 00:06:40,960
interested in this space

212
00:06:40,960 --> 00:06:42,960
but uh luke roberts and caleb hall they

213
00:06:42,960 --> 00:06:44,880
did a talk at objective by the sea

214
00:06:44,880 --> 00:06:47,120
where they talked about uh jamf from an

215
00:06:47,120 --> 00:06:48,720
attacker's perspective

216
00:06:48,720 --> 00:06:50,400
definitely check that out um i just

217
00:06:50,400 --> 00:06:51,759
pulled a few points

218
00:06:51,759 --> 00:06:54,080
from their presentation around common

219
00:06:54,080 --> 00:06:55,599
management methods that i personally

220
00:06:55,599 --> 00:06:57,360
have seen in my experience

221
00:06:57,360 --> 00:06:59,280
uh so the first group is what i would

222
00:06:59,280 --> 00:07:00,479
call one offs

223
00:07:00,479 --> 00:07:02,800
so those are uh environments where

224
00:07:02,800 --> 00:07:03,520
you'll find

225
00:07:03,520 --> 00:07:05,919
mac os hosts but they're not they're not

226
00:07:05,919 --> 00:07:07,440
managed by the it department so there

227
00:07:07,440 --> 00:07:09,599
may be some engineers or developers

228
00:07:09,599 --> 00:07:12,240
who are allowed to purchase macs through

229
00:07:12,240 --> 00:07:14,080
the company for different reasons

230
00:07:14,080 --> 00:07:16,240
but those macs are not managed by the

231
00:07:16,240 --> 00:07:17,759
i.t organization

232
00:07:17,759 --> 00:07:19,759
so then you have a second group that's

233
00:07:19,759 --> 00:07:21,520
more custom and those are your very

234
00:07:21,520 --> 00:07:22,240
mature

235
00:07:22,240 --> 00:07:24,319
large well-funded organizations like

236
00:07:24,319 --> 00:07:26,880
your apples facebook's googles

237
00:07:26,880 --> 00:07:29,360
those organizations will have a large

238
00:07:29,360 --> 00:07:31,120
presence of max but they'll have custom

239
00:07:31,120 --> 00:07:31,919
infrastructure

240
00:07:31,919 --> 00:07:34,800
like their own ldap infrastructure they

241
00:07:34,800 --> 00:07:35,680
may have their own

242
00:07:35,680 --> 00:07:38,720
custom mobile device management which is

243
00:07:38,720 --> 00:07:40,720
like tied to the ldap and is used to

244
00:07:40,720 --> 00:07:42,160
manage the mac endpoints

245
00:07:42,160 --> 00:07:45,039
so again very well resourced but uh

246
00:07:45,039 --> 00:07:45,680
given

247
00:07:45,680 --> 00:07:47,599
the amount of funding and bodies you

248
00:07:47,599 --> 00:07:49,759
need that's usually not the most common

249
00:07:49,759 --> 00:07:51,520
method you see the most common i

250
00:07:51,520 --> 00:07:53,120
typically tend to see is the

251
00:07:53,120 --> 00:07:54,720
third group there which is managed with

252
00:07:54,720 --> 00:07:56,560
commercial tools

253
00:07:56,560 --> 00:07:58,560
the specific commercial tools i'm most

254
00:07:58,560 --> 00:08:00,639
familiar with is jeff pro

255
00:08:00,639 --> 00:08:02,720
but i've also been reading about kanji

256
00:08:02,720 --> 00:08:03,759
that's up and coming

257
00:08:03,759 --> 00:08:05,520
so that's one i'm going to keep an eye

258
00:08:05,520 --> 00:08:07,840
on but uh jamf pro is very common and

259
00:08:07,840 --> 00:08:09,840
they even purchased uh patrick wortl's

260
00:08:09,840 --> 00:08:11,440
company which i think is amazing

261
00:08:11,440 --> 00:08:13,280
because uh patrick world's company's

262
00:08:13,280 --> 00:08:14,720
been doing a lot of

263
00:08:14,720 --> 00:08:16,160
bleeding edge research so it's going to

264
00:08:16,160 --> 00:08:18,080
be really cool to see how they how

265
00:08:18,080 --> 00:08:20,240
jamf pro brings in the security aspect

266
00:08:20,240 --> 00:08:22,720
over time

267
00:08:22,720 --> 00:08:26,000
so common jam deployments you have your

268
00:08:26,000 --> 00:08:28,960
jamf admin server you have and that's

269
00:08:28,960 --> 00:08:30,639
pretty much where the admins that

270
00:08:30,639 --> 00:08:32,640
that run the jam infrastructure can

271
00:08:32,640 --> 00:08:35,360
configure policies apps packages

272
00:08:35,360 --> 00:08:38,240
that will in turn manage the jamf agents

273
00:08:38,240 --> 00:08:40,399
which is your mac endpoint and each

274
00:08:40,399 --> 00:08:41,679
endpoint will have an agent

275
00:08:41,679 --> 00:08:43,839
it communicates with the server and then

276
00:08:43,839 --> 00:08:44,800
of course

277
00:08:44,800 --> 00:08:46,560
on the manage endpoint you also have

278
00:08:46,560 --> 00:08:48,080
self-service which

279
00:08:48,080 --> 00:08:51,279
is where users can install packages or

280
00:08:51,279 --> 00:08:51,920
apps that

281
00:08:51,920 --> 00:08:54,320
it has already vetted so it's a really

282
00:08:54,320 --> 00:08:55,680
neat infrastructure

283
00:08:55,680 --> 00:08:57,440
again this is at a 10 000 foot view

284
00:08:57,440 --> 00:08:58,800
there's definitely some other components

285
00:08:58,800 --> 00:09:00,080
but just want to show you some of the

286
00:09:00,080 --> 00:09:01,600
main pieces

287
00:09:01,600 --> 00:09:05,120
for jamf infrastructure and so as i

288
00:09:05,120 --> 00:09:05,680
mentioned

289
00:09:05,680 --> 00:09:08,640
you can see how the mac and points are

290
00:09:08,640 --> 00:09:11,360
managed by the jamf server what policies

291
00:09:11,360 --> 00:09:14,640
packages scripts and then what's what's

292
00:09:14,640 --> 00:09:15,760
also common is

293
00:09:15,760 --> 00:09:17,360
the jamf server will have active

294
00:09:17,360 --> 00:09:20,080
directory binding often on the back end

295
00:09:20,080 --> 00:09:22,480
which will allow uh like synchronization

296
00:09:22,480 --> 00:09:23,680
with passwords

297
00:09:23,680 --> 00:09:25,440
what often also happens with active

298
00:09:25,440 --> 00:09:26,720
directory is

299
00:09:26,720 --> 00:09:29,120
the groups that basically the access to

300
00:09:29,120 --> 00:09:31,279
the jam server is often controlled by an

301
00:09:31,279 --> 00:09:33,839
ad group such as like jamf admins or

302
00:09:33,839 --> 00:09:35,200
casper admins

303
00:09:35,200 --> 00:09:36,880
and so what's interesting is you think

304
00:09:36,880 --> 00:09:39,200
about some of the reasons why

305
00:09:39,200 --> 00:09:41,360
people often cite moving from windows to

306
00:09:41,360 --> 00:09:43,120
mac which is to reduce the

307
00:09:43,120 --> 00:09:45,360
threat surface but when you tie in

308
00:09:45,360 --> 00:09:47,120
active directory on the back end

309
00:09:47,120 --> 00:09:48,959
a lot of those same threats are kind of

310
00:09:48,959 --> 00:09:50,160
or attack vectors are

311
00:09:50,160 --> 00:09:51,839
really much pretty much reintroduced

312
00:09:51,839 --> 00:09:53,760
into your environment it's just that now

313
00:09:53,760 --> 00:09:55,440
the front end like the front door might

314
00:09:55,440 --> 00:09:56,640
be a little different like there's

315
00:09:56,640 --> 00:09:58,000
probably a higher chance

316
00:09:58,000 --> 00:09:59,360
you'll land on a mac and you'll have to

317
00:09:59,360 --> 00:10:01,279
navigate that but once you

318
00:10:01,279 --> 00:10:03,440
do so you still will then have access to

319
00:10:03,440 --> 00:10:05,120
active directory and a lot of those

320
00:10:05,120 --> 00:10:08,560
attacks will uh still apply

321
00:10:08,720 --> 00:10:10,320
another aspect for jamf that's

322
00:10:10,320 --> 00:10:12,000
interesting is the remote management

323
00:10:12,000 --> 00:10:12,720
aspect

324
00:10:12,720 --> 00:10:14,160
so in some environments remote

325
00:10:14,160 --> 00:10:16,000
management might be set up by the jamf

326
00:10:16,000 --> 00:10:18,079
admin for things like screen sharing

327
00:10:18,079 --> 00:10:20,240
on the manage endpoints and if that's

328
00:10:20,240 --> 00:10:22,160
set up then there's often

329
00:10:22,160 --> 00:10:25,360
an admin account that has ssh access to

330
00:10:25,360 --> 00:10:27,600
those managed endpoints

331
00:10:27,600 --> 00:10:29,920
for those specific purposes and so one

332
00:10:29,920 --> 00:10:31,680
thing i always think about is if remote

333
00:10:31,680 --> 00:10:33,200
management is enabled

334
00:10:33,200 --> 00:10:35,680
is there a static password being used so

335
00:10:35,680 --> 00:10:36,720
that brings back

336
00:10:36,720 --> 00:10:39,360
very similar to like um local admin

337
00:10:39,360 --> 00:10:41,040
password management on a windows side

338
00:10:41,040 --> 00:10:43,040
where lapse is used to randomize that

339
00:10:43,040 --> 00:10:44,160
password so

340
00:10:44,160 --> 00:10:45,920
you can't just get one password and use

341
00:10:45,920 --> 00:10:47,680
it on every endpoint

342
00:10:47,680 --> 00:10:50,160
uh that same thing would apply here

343
00:10:50,160 --> 00:10:51,920
where if you're just using a

344
00:10:51,920 --> 00:10:53,920
static password for remote management

345
00:10:53,920 --> 00:10:55,519
that password gets compromised

346
00:10:55,519 --> 00:10:57,920
and you can now access any um

347
00:10:57,920 --> 00:11:00,320
organization managed mac that has ssh

348
00:11:00,320 --> 00:11:02,800
exposed

349
00:11:03,279 --> 00:11:07,200
also the jamf api is is very interesting

350
00:11:07,200 --> 00:11:09,279
and again access is often controlled by

351
00:11:09,279 --> 00:11:12,079
the jf80 group so it's usually like jff

352
00:11:12,079 --> 00:11:13,760
admins or casper admins whatever the

353
00:11:13,760 --> 00:11:15,279
name of that group is

354
00:11:15,279 --> 00:11:18,560
and as you can see here by default

355
00:11:18,560 --> 00:11:20,640
um in most environments or a lot of

356
00:11:20,640 --> 00:11:22,000
environments you'll see it listening on

357
00:11:22,000 --> 00:11:23,200
8443

358
00:11:23,200 --> 00:11:25,519
and then you can hit like jss resource

359
00:11:25,519 --> 00:11:27,279
accounts to list out accounts or

360
00:11:27,279 --> 00:11:28,000
computers

361
00:11:28,000 --> 00:11:30,800
policies one interesting thing too is uh

362
00:11:30,800 --> 00:11:32,320
you can now also

363
00:11:32,320 --> 00:11:34,640
once you once you uh are enumerating on

364
00:11:34,640 --> 00:11:35,920
a specific computer

365
00:11:35,920 --> 00:11:37,760
you can actually check for remote

366
00:11:37,760 --> 00:11:39,440
management as you can see here in the

367
00:11:39,440 --> 00:11:41,200
red box and you can see if

368
00:11:41,200 --> 00:11:43,040
remote management is set to true and if

369
00:11:43,040 --> 00:11:44,320
it is you can see

370
00:11:44,320 --> 00:11:47,200
the account name and it's the sha-256

371
00:11:47,200 --> 00:11:48,160
hash stream

372
00:11:48,160 --> 00:11:50,160
and so if you check like multiple

373
00:11:50,160 --> 00:11:52,399
computers and you're seeing that same

374
00:11:52,399 --> 00:11:55,440
shot 256 hash string and account name

375
00:11:55,440 --> 00:11:57,040
then there's a good chance that there is

376
00:11:57,040 --> 00:11:58,639
a static password

377
00:11:58,639 --> 00:12:02,480
being used on every endpoint

378
00:12:03,200 --> 00:12:05,040
so uh next i'm going to jump into some

379
00:12:05,040 --> 00:12:06,959
common points of interest from a red

380
00:12:06,959 --> 00:12:08,160
team perspective

381
00:12:08,160 --> 00:12:11,360
and modern i.t environments

382
00:12:11,360 --> 00:12:13,760
so of course one is going to be the cicd

383
00:12:13,760 --> 00:12:14,639
pipeline

384
00:12:14,639 --> 00:12:17,760
just because it's such a consistent

385
00:12:17,760 --> 00:12:20,639
way to deploy code and images in an

386
00:12:20,639 --> 00:12:21,760
environment

387
00:12:21,760 --> 00:12:23,920
and it's so common and it's built on

388
00:12:23,920 --> 00:12:25,920
trust relationships and dependencies

389
00:12:25,920 --> 00:12:26,480
across

390
00:12:26,480 --> 00:12:29,200
various components so using this very

391
00:12:29,200 --> 00:12:31,440
basic example like a developer commits

392
00:12:31,440 --> 00:12:32,000
code

393
00:12:32,000 --> 00:12:34,320
which triggers a jenkins build to create

394
00:12:34,320 --> 00:12:36,000
and push an image which eventually gets

395
00:12:36,000 --> 00:12:38,480
rolled out to kubernetes so if you look

396
00:12:38,480 --> 00:12:39,360
at this flow

397
00:12:39,360 --> 00:12:42,880
let's say the kubernetes pods and nodes

398
00:12:42,880 --> 00:12:45,760
and containers are all configured well

399
00:12:45,760 --> 00:12:47,920
by best practice like system anonymous

400
00:12:47,920 --> 00:12:49,680
access for the nodes is not

401
00:12:49,680 --> 00:12:51,360
it's not set up there's no

402
00:12:51,360 --> 00:12:53,279
vulnerabilities no attack paths that i

403
00:12:53,279 --> 00:12:54,079
could leverage

404
00:12:54,079 --> 00:12:57,040
to compromise uh there however let's say

405
00:12:57,040 --> 00:12:58,160
we look upstream

406
00:12:58,160 --> 00:13:00,800
and let's say jenkins is misconfigured

407
00:13:00,800 --> 00:13:02,880
right it's on a vulnerable host or it's

408
00:13:02,880 --> 00:13:04,800
set up without authentication

409
00:13:04,800 --> 00:13:06,720
or even if we go further upstream and

410
00:13:06,720 --> 00:13:09,040
compromise the developer's laptop

411
00:13:09,040 --> 00:13:10,880
and we get access and we find a jenkins

412
00:13:10,880 --> 00:13:12,079
key or

413
00:13:12,079 --> 00:13:15,120
other tokens or ssh keys things like

414
00:13:15,120 --> 00:13:16,800
that that are on their machine that we

415
00:13:16,800 --> 00:13:18,079
can leverage

416
00:13:18,079 --> 00:13:20,320
then we can follow the flow of the cicd

417
00:13:20,320 --> 00:13:23,040
pipeline and still get access to those

418
00:13:23,040 --> 00:13:25,519
uh those containers so even though we

419
00:13:25,519 --> 00:13:27,279
can't directly attack them

420
00:13:27,279 --> 00:13:30,160
we can kind of walk upstream and find

421
00:13:30,160 --> 00:13:32,000
misconfigurations and still get access

422
00:13:32,000 --> 00:13:33,519
to the ci cd pipeline

423
00:13:33,519 --> 00:13:35,600
what's so interesting about that too is

424
00:13:35,600 --> 00:13:37,600
depends on the environment but that cicd

425
00:13:37,600 --> 00:13:38,480
pipeline

426
00:13:38,480 --> 00:13:40,160
could also carry you from one

427
00:13:40,160 --> 00:13:41,760
environment over to the other so if

428
00:13:41,760 --> 00:13:42,240
you're in

429
00:13:42,240 --> 00:13:44,800
corp you could possibly ride it into

430
00:13:44,800 --> 00:13:45,440
prod

431
00:13:45,440 --> 00:13:46,560
you know it all depends on the

432
00:13:46,560 --> 00:13:48,480
environment and best practices and what

433
00:13:48,480 --> 00:13:50,320
what's being done but it's a very

434
00:13:50,320 --> 00:13:53,199
interesting attack point

435
00:13:53,199 --> 00:13:56,240
another one is secrets uh secrets i

436
00:13:56,240 --> 00:13:57,120
think are just

437
00:13:57,120 --> 00:13:59,279
as a red team or i enjoy secrets because

438
00:13:59,279 --> 00:14:01,839
they're pretty hard to detect and

439
00:14:01,839 --> 00:14:03,839
there's not a lot of analytics and a lot

440
00:14:03,839 --> 00:14:06,720
of environments around abuse of secrets

441
00:14:06,720 --> 00:14:09,120
um and so you've got secrets in a lot of

442
00:14:09,120 --> 00:14:10,959
different places like you have hashicorp

443
00:14:10,959 --> 00:14:12,240
vault which is

444
00:14:12,240 --> 00:14:14,320
what i consider to be the standard in a

445
00:14:14,320 --> 00:14:16,000
lot of tech companies now for

446
00:14:16,000 --> 00:14:18,240
application secrets management and so

447
00:14:18,240 --> 00:14:20,160
you may find an environment where

448
00:14:20,160 --> 00:14:22,160
they have hashicorp vault but they took

449
00:14:22,160 --> 00:14:24,959
the image from hashicorp modified it or

450
00:14:24,959 --> 00:14:25,920
they put it

451
00:14:25,920 --> 00:14:28,639
on a vulnerable server that introduces

452
00:14:28,639 --> 00:14:30,639
attack paths where you can leverage that

453
00:14:30,639 --> 00:14:31,519
as an attacker

454
00:14:31,519 --> 00:14:34,560
get access to application secrets you

455
00:14:34,560 --> 00:14:36,000
also have your endpoints

456
00:14:36,000 --> 00:14:37,600
and of course especially for engineers

457
00:14:37,600 --> 00:14:39,199
and developers it's very likely you're

458
00:14:39,199 --> 00:14:40,240
going to find

459
00:14:40,240 --> 00:14:43,680
ssh keys or aws secret and access key

460
00:14:43,680 --> 00:14:46,160
gcp credentials azure creds

461
00:14:46,160 --> 00:14:48,800
and and the good thing from an

462
00:14:48,800 --> 00:14:50,160
attacker's perspective with those is

463
00:14:50,160 --> 00:14:52,480
that they're often going to be stored

464
00:14:52,480 --> 00:14:54,240
clear text with no protection on them

465
00:14:54,240 --> 00:14:55,839
and so you can just easily pivot to

466
00:14:55,839 --> 00:14:58,560
those grab those and start moving

467
00:14:58,560 --> 00:15:01,680
to other hosts you also have your github

468
00:15:01,680 --> 00:15:04,000
where of course code secrets can be

469
00:15:04,000 --> 00:15:05,360
committed to code

470
00:15:05,360 --> 00:15:07,760
of course kubernetes where if you happen

471
00:15:07,760 --> 00:15:08,639
to land in

472
00:15:08,639 --> 00:15:11,440
in a managed container it's a good

473
00:15:11,440 --> 00:15:13,199
chance that that container like you may

474
00:15:13,199 --> 00:15:14,399
land in is root

475
00:15:14,399 --> 00:15:16,240
because a lot of packages are installed

476
00:15:16,240 --> 00:15:17,760
that way to make it easy

477
00:15:17,760 --> 00:15:19,600
and once you have root you could then

478
00:15:19,600 --> 00:15:21,440
possibly find a master secret

479
00:15:21,440 --> 00:15:24,240
and leverage that elsewhere so uh long

480
00:15:24,240 --> 00:15:26,639
story short there's a lot of different

481
00:15:26,639 --> 00:15:28,560
places that secrets can be stored and

482
00:15:28,560 --> 00:15:30,160
those are definitely things that

483
00:15:30,160 --> 00:15:33,920
red teamers come after good old file

484
00:15:33,920 --> 00:15:34,959
shares

485
00:15:34,959 --> 00:15:38,160
so into today's day and age it's

486
00:15:38,160 --> 00:15:40,000
i'd say most commonly files are probably

487
00:15:40,000 --> 00:15:41,759
stored in the cloud so

488
00:15:41,759 --> 00:15:44,480
like google drive or enterprise dropbox

489
00:15:44,480 --> 00:15:45,519
or box

490
00:15:45,519 --> 00:15:47,360
um but there's still lots of

491
00:15:47,360 --> 00:15:49,040
environments where legacy file shares

492
00:15:49,040 --> 00:15:50,399
still exist

493
00:15:50,399 --> 00:15:52,639
and they're still there for legacy

494
00:15:52,639 --> 00:15:54,480
reasons or they're one-off reasons where

495
00:15:54,480 --> 00:15:55,920
people don't want to put that stuff in

496
00:15:55,920 --> 00:15:57,440
the cloud and so they stand up a file

497
00:15:57,440 --> 00:15:58,000
share

498
00:15:58,000 --> 00:15:59,920
and so this attack path still becomes

499
00:15:59,920 --> 00:16:01,360
very relevant from an attacker's

500
00:16:01,360 --> 00:16:02,240
perspective

501
00:16:02,240 --> 00:16:04,959
where you can sleep for port 445 find

502
00:16:04,959 --> 00:16:06,240
every host that's listening and then

503
00:16:06,240 --> 00:16:07,600
once you find a host that's listening

504
00:16:07,600 --> 00:16:08,800
you start to enumerate

505
00:16:08,800 --> 00:16:11,279
what can what shares can you see either

506
00:16:11,279 --> 00:16:13,040
um unauthenticated or

507
00:16:13,040 --> 00:16:15,360
via credentials that you have and

508
00:16:15,360 --> 00:16:16,720
there's all sorts of stuff that you can

509
00:16:16,720 --> 00:16:18,000
find there you may find

510
00:16:18,000 --> 00:16:20,000
like scripts with credentials built in

511
00:16:20,000 --> 00:16:21,120
you may find

512
00:16:21,120 --> 00:16:24,399
sensitive pii or financial data

513
00:16:24,399 --> 00:16:26,399
just a lot of a lot of sensitive data

514
00:16:26,399 --> 00:16:28,639
that can be of use during a red team

515
00:16:28,639 --> 00:16:30,160
operation so

516
00:16:30,160 --> 00:16:32,000
this is an area that i definitely

517
00:16:32,000 --> 00:16:34,240
recommend that blue teams proactively

518
00:16:34,240 --> 00:16:34,959
search for

519
00:16:34,959 --> 00:16:38,720
find and remediate like long before an

520
00:16:38,720 --> 00:16:41,360
assessment happens

521
00:16:41,360 --> 00:16:43,199
and then of course uh you have active

522
00:16:43,199 --> 00:16:44,399
directory

523
00:16:44,399 --> 00:16:46,160
which going back to the earlier slide

524
00:16:46,160 --> 00:16:48,399
about how jamf a lot of jf environments

525
00:16:48,399 --> 00:16:50,720
have ad bindings and that introduces

526
00:16:50,720 --> 00:16:52,639
your active directory attacks

527
00:16:52,639 --> 00:16:54,720
so i'm just kind of walking through the

528
00:16:54,720 --> 00:16:57,040
common attack path which is

529
00:16:57,040 --> 00:16:59,680
you find a misconfigured adjoin server

530
00:16:59,680 --> 00:17:00,959
so it could be

531
00:17:00,959 --> 00:17:03,680
jenkins as an example without a password

532
00:17:03,680 --> 00:17:04,480
set

533
00:17:04,480 --> 00:17:07,760
or with a remote code execution

534
00:17:07,760 --> 00:17:11,839
vulnerability or also your

535
00:17:11,839 --> 00:17:13,439
your tomcat but going back to jenkins

536
00:17:13,439 --> 00:17:15,039
once you compromise jenkins you could

537
00:17:15,039 --> 00:17:17,119
get on and find a jenkins ssh key and

538
00:17:17,119 --> 00:17:18,480
even though that's not the master

539
00:17:18,480 --> 00:17:19,439
jenkins

540
00:17:19,439 --> 00:17:21,919
you may find the jenkins ssh key that's

541
00:17:21,919 --> 00:17:23,199
used for master

542
00:17:23,199 --> 00:17:25,679
um jenkins on like other test hosts in

543
00:17:25,679 --> 00:17:26,720
the environment so

544
00:17:26,720 --> 00:17:28,960
that can present an attack path i've got

545
00:17:28,960 --> 00:17:30,799
tomcat which is also stood up

546
00:17:30,799 --> 00:17:33,280
oftentimes with default credentials

547
00:17:33,280 --> 00:17:35,039
which will allow an attacker to upload a

548
00:17:35,039 --> 00:17:37,200
war file with a web shell and get access

549
00:17:37,200 --> 00:17:40,160
dump credentials same thing for worksuit

550
00:17:40,160 --> 00:17:42,240
which is a python server

551
00:17:42,240 --> 00:17:44,880
which a lot of times is stood up with in

552
00:17:44,880 --> 00:17:46,640
debug mode which will allow you to run

553
00:17:46,640 --> 00:17:49,440
python code on the console page itself

554
00:17:49,440 --> 00:17:52,240
and get access to the host and there's

555
00:17:52,240 --> 00:17:53,440
several other examples

556
00:17:53,440 --> 00:17:55,840
i just wanted to call those out once you

557
00:17:55,840 --> 00:17:57,600
have access you then kind of move into

558
00:17:57,600 --> 00:17:58,320
the recon

559
00:17:58,320 --> 00:18:00,320
where you can actually run bloodhound

560
00:18:00,320 --> 00:18:02,240
and what's cool is fox it

561
00:18:02,240 --> 00:18:04,480
released a python collector for

562
00:18:04,480 --> 00:18:05,600
bloodhounds so

563
00:18:05,600 --> 00:18:07,679
now you can run the bloodhound collector

564
00:18:07,679 --> 00:18:10,160
from mac or linux as opposed to

565
00:18:10,160 --> 00:18:13,280
needing powershell or like be able to

566
00:18:13,280 --> 00:18:14,160
run um

567
00:18:14,160 --> 00:18:16,400
sharp hound then of course you have your

568
00:18:16,400 --> 00:18:18,400
password sprays so

569
00:18:18,400 --> 00:18:20,000
in mac environments and linux

570
00:18:20,000 --> 00:18:21,679
environments like it'll be ssh

571
00:18:21,679 --> 00:18:22,799
you could spray the username and

572
00:18:22,799 --> 00:18:26,320
password username and ssh key

573
00:18:26,320 --> 00:18:27,679
you could also spray against active

574
00:18:27,679 --> 00:18:29,120
directory once you have a set of

575
00:18:29,120 --> 00:18:30,160
credentials any

576
00:18:30,160 --> 00:18:32,799
authenticated user can dump a list of

577
00:18:32,799 --> 00:18:33,600
current 80

578
00:18:33,600 --> 00:18:35,600
users and then you can try a single

579
00:18:35,600 --> 00:18:36,880
password against

580
00:18:36,880 --> 00:18:40,160
every user such as summer 2020 and see

581
00:18:40,160 --> 00:18:42,320
which accounts you get access to

582
00:18:42,320 --> 00:18:44,080
alternatively you could also spray

583
00:18:44,080 --> 00:18:46,160
against windows servers

584
00:18:46,160 --> 00:18:48,559
so basically checking smb with a set of

585
00:18:48,559 --> 00:18:51,120
credentials and seeing what hosts

586
00:18:51,120 --> 00:18:53,120
smb will give me access to so there's a

587
00:18:53,120 --> 00:18:54,160
lot of tools like

588
00:18:54,160 --> 00:18:56,000
crack map exec that can do those kinds

589
00:18:56,000 --> 00:18:57,280
of things

590
00:18:57,280 --> 00:18:59,600
um and then it kind of brings you to the

591
00:18:59,600 --> 00:19:01,120
last part of it where you have your

592
00:19:01,120 --> 00:19:01,679
domain

593
00:19:01,679 --> 00:19:03,360
compromise where you find a privileged

594
00:19:03,360 --> 00:19:05,200
set of credentials cached

595
00:19:05,200 --> 00:19:07,760
you dump those credentials and then you

596
00:19:07,760 --> 00:19:09,360
start your impersonation where you

597
00:19:09,360 --> 00:19:11,840
do pass the hash pass the ticket pass

598
00:19:11,840 --> 00:19:13,440
the cash etc

599
00:19:13,440 --> 00:19:15,679
eventually like you get domain admin

600
00:19:15,679 --> 00:19:17,280
creds and then you move to your forage

601
00:19:17,280 --> 00:19:18,799
tickets like your gold in a silver

602
00:19:18,799 --> 00:19:19,440
ticket

603
00:19:19,440 --> 00:19:21,039
which then moves you to the next step

604
00:19:21,039 --> 00:19:22,880
where you basically dump

605
00:19:22,880 --> 00:19:25,760
all employee passwords or hashes and

606
00:19:25,760 --> 00:19:27,039
start cracking them looking for

607
00:19:27,039 --> 00:19:28,720
clear text credentials and then that

608
00:19:28,720 --> 00:19:30,480
brings you to the last box there of

609
00:19:30,480 --> 00:19:31,280
pivoting

610
00:19:31,280 --> 00:19:34,240
so usually in mac os environments like

611
00:19:34,240 --> 00:19:36,080
compromising active directory is not

612
00:19:36,080 --> 00:19:37,440
going to be the end goal

613
00:19:37,440 --> 00:19:39,360
usually it's just a step that you may

614
00:19:39,360 --> 00:19:41,039
need let's say you need a certain

615
00:19:41,039 --> 00:19:42,640
account in order to pivot

616
00:19:42,640 --> 00:19:44,240
to another environment in order for you

617
00:19:44,240 --> 00:19:46,400
to accomplish your objectives

618
00:19:46,400 --> 00:19:48,160
and so that's your usually your main

619
00:19:48,160 --> 00:19:49,840
reason for coming after ad it's usually

620
00:19:49,840 --> 00:19:51,679
not to say all right i've compromised ad

621
00:19:51,679 --> 00:19:54,160
exercise is done usually it's more like

622
00:19:54,160 --> 00:19:55,679
we needed a d

623
00:19:55,679 --> 00:19:58,640
a step b in order to get to c d and e in

624
00:19:58,640 --> 00:20:01,280
our operation

625
00:20:01,520 --> 00:20:04,000
another aspect i wanted to point out in

626
00:20:04,000 --> 00:20:04,799
modern

627
00:20:04,799 --> 00:20:06,559
i.t environments in the bay is the

628
00:20:06,559 --> 00:20:08,240
concept of different

629
00:20:08,240 --> 00:20:10,080
uh environments so i'll quickly walk

630
00:20:10,080 --> 00:20:11,919
through my common setup you have your

631
00:20:11,919 --> 00:20:13,200
corporate environment and that's where

632
00:20:13,200 --> 00:20:14,400
your users live

633
00:20:14,400 --> 00:20:16,000
that's where you have your mac your

634
00:20:16,000 --> 00:20:17,440
windows endpoints

635
00:20:17,440 --> 00:20:19,600
your chromebooks and a lot of the

636
00:20:19,600 --> 00:20:20,720
services that

637
00:20:20,720 --> 00:20:22,720
users and our employees interact with

638
00:20:22,720 --> 00:20:24,480
such as you'll have

639
00:20:24,480 --> 00:20:27,039
octa there salesforce active directory

640
00:20:27,039 --> 00:20:28,960
various it application servers

641
00:20:28,960 --> 00:20:30,960
confluence jira

642
00:20:30,960 --> 00:20:32,559
all of those kind of things live in a

643
00:20:32,559 --> 00:20:34,000
corporate environment

644
00:20:34,000 --> 00:20:35,679
and then you have your dev environment

645
00:20:35,679 --> 00:20:37,520
and that definitely looks different

646
00:20:37,520 --> 00:20:40,159
um per organization like you may have a

647
00:20:40,159 --> 00:20:41,919
one and one company a dev environment

648
00:20:41,919 --> 00:20:43,200
might just be a dedicated

649
00:20:43,200 --> 00:20:46,240
like subnet and uh like you

650
00:20:46,240 --> 00:20:47,520
may or may not have a separate set of

651
00:20:47,520 --> 00:20:49,200
credentials to get to that subnet

652
00:20:49,200 --> 00:20:50,799
whereas in another environment you may

653
00:20:50,799 --> 00:20:52,640
need a separate complete separate

654
00:20:52,640 --> 00:20:54,640
set of credentials and maybe you need to

655
00:20:54,640 --> 00:20:56,720
jump like a jump host in order to get to

656
00:20:56,720 --> 00:20:58,400
dev so it kind of depends on what the

657
00:20:58,400 --> 00:20:59,520
environment is

658
00:20:59,520 --> 00:21:00,559
and then of course you have your

659
00:21:00,559 --> 00:21:02,400
production environment where a lot of

660
00:21:02,400 --> 00:21:04,240
your microservices and your backend

661
00:21:04,240 --> 00:21:04,960
services

662
00:21:04,960 --> 00:21:07,360
are oftentimes you'll find customer data

663
00:21:07,360 --> 00:21:08,640
stored here

664
00:21:08,640 --> 00:21:11,120
um and you'll find various various

665
00:21:11,120 --> 00:21:12,240
things here like

666
00:21:12,240 --> 00:21:14,159
be mostly linux but you may have a like

667
00:21:14,159 --> 00:21:16,080
a tiny share of windows there

668
00:21:16,080 --> 00:21:18,159
you may have some rabbitmq and

669
00:21:18,159 --> 00:21:20,400
kubernetes and aws gcp

670
00:21:20,400 --> 00:21:22,480
so you have all those environments and

671
00:21:22,480 --> 00:21:24,080
then you have your jump hosts in the

672
00:21:24,080 --> 00:21:24,559
middle

673
00:21:24,559 --> 00:21:27,280
where the like a typical path would be a

674
00:21:27,280 --> 00:21:30,080
certain limited number of of employees

675
00:21:30,080 --> 00:21:32,080
will have access to jump hosts in order

676
00:21:32,080 --> 00:21:34,159
to get to the production environment to

677
00:21:34,159 --> 00:21:35,600
do their jobs

678
00:21:35,600 --> 00:21:37,840
and then uh so from a red team

679
00:21:37,840 --> 00:21:40,000
perspective you start to think about

680
00:21:40,000 --> 00:21:42,400
like what the stated controls are versus

681
00:21:42,400 --> 00:21:43,280
what the

682
00:21:43,280 --> 00:21:45,039
what the reality of those controls

683
00:21:45,039 --> 00:21:47,200
really are so one example is

684
00:21:47,200 --> 00:21:49,520
you think like well are there any direct

685
00:21:49,520 --> 00:21:50,720
connections from our corporate

686
00:21:50,720 --> 00:21:51,360
environment

687
00:21:51,360 --> 00:21:54,480
into production um like it says we're

688
00:21:54,480 --> 00:21:55,520
supposed to only

689
00:21:55,520 --> 00:21:57,440
the policy is only go through jump holes

690
00:21:57,440 --> 00:21:59,039
but are there exceptions

691
00:21:59,039 --> 00:22:01,200
you also think about how the jump holes

692
00:22:01,200 --> 00:22:02,400
are configured

693
00:22:02,400 --> 00:22:04,080
and you start thinking well are there

694
00:22:04,080 --> 00:22:05,919
any exceptions to how those hosts are

695
00:22:05,919 --> 00:22:07,520
configured maybe you've got three jump

696
00:22:07,520 --> 00:22:08,240
hosts

697
00:22:08,240 --> 00:22:10,559
that have 2fa enabled and a separate set

698
00:22:10,559 --> 00:22:11,440
of credentials

699
00:22:11,440 --> 00:22:13,120
and then maybe there's a fourth one that

700
00:22:13,120 --> 00:22:14,559
doesn't have 2fa on it

701
00:22:14,559 --> 00:22:16,960
which presents an easier attack path so

702
00:22:16,960 --> 00:22:18,320
you kind of question that

703
00:22:18,320 --> 00:22:20,720
you definitely assess that or even

704
00:22:20,720 --> 00:22:22,799
around your dev environment

705
00:22:22,799 --> 00:22:24,640
are there any relationships between dev

706
00:22:24,640 --> 00:22:26,640
and prod so if you happen to compromise

707
00:22:26,640 --> 00:22:29,440
like a ci cd pipeline or

708
00:22:29,440 --> 00:22:32,240
like a jenkins host and dev will that

709
00:22:32,240 --> 00:22:34,559
that ssh key or will those tokens

710
00:22:34,559 --> 00:22:36,640
work over in prod are there shared

711
00:22:36,640 --> 00:22:38,559
credentials between the two environments

712
00:22:38,559 --> 00:22:40,640
so these are things that uh from a red

713
00:22:40,640 --> 00:22:42,320
team perspective that

714
00:22:42,320 --> 00:22:44,080
we're constantly thinking about as well

715
00:22:44,080 --> 00:22:45,679
it's like what we know what the stated

716
00:22:45,679 --> 00:22:47,520
controls are but what's the reality of

717
00:22:47,520 --> 00:22:48,400
the relationship

718
00:22:48,400 --> 00:22:50,559
and and flow between the different

719
00:22:50,559 --> 00:22:53,120
environments

720
00:22:53,200 --> 00:22:54,799
um also just wanted to point out some

721
00:22:54,799 --> 00:22:56,960
common low-hanging fruit that

722
00:22:56,960 --> 00:23:00,400
red teamers enjoy abusing uh one is apis

723
00:23:00,400 --> 00:23:03,120
and apis are everywhere now especially

724
00:23:03,120 --> 00:23:03,679
with uh

725
00:23:03,679 --> 00:23:07,039
cloud services and a couple examples

726
00:23:07,039 --> 00:23:08,240
with docker

727
00:23:08,240 --> 00:23:10,400
so uh cardinal ownage chris gates did a

728
00:23:10,400 --> 00:23:11,520
really good write-up

729
00:23:11,520 --> 00:23:14,159
on how docker can be misconfigured to

730
00:23:14,159 --> 00:23:14,559
allow

731
00:23:14,559 --> 00:23:17,679
anonymous um api uh api

732
00:23:17,679 --> 00:23:20,480
execution on containers and if so you'll

733
00:23:20,480 --> 00:23:22,360
be able to navigate to this host on port

734
00:23:22,360 --> 00:23:24,440
2375 or 70

735
00:23:24,440 --> 00:23:27,280
2376 and if you can list out the

736
00:23:27,280 --> 00:23:28,400
containers

737
00:23:28,400 --> 00:23:30,240
then uh there's other commands that you

738
00:23:30,240 --> 00:23:32,080
can likely run in order to

739
00:23:32,080 --> 00:23:34,240
like execute shell commands and even

740
00:23:34,240 --> 00:23:35,679
read secrets

741
00:23:35,679 --> 00:23:38,400
unauthenticated same for kubernetes

742
00:23:38,400 --> 00:23:39,360
nodes

743
00:23:39,360 --> 00:23:42,400
where if system anonymous access

744
00:23:42,400 --> 00:23:44,559
for the api is enabled then you'll be

745
00:23:44,559 --> 00:23:48,559
able to hit port 10250 or 10251

746
00:23:48,559 --> 00:23:50,400
and if you can hit that port and see

747
00:23:50,400 --> 00:23:52,480
running pods or pods

748
00:23:52,480 --> 00:23:56,799
then you can also like make a certain

749
00:23:56,799 --> 00:23:59,840
curl request externally in order to

750
00:23:59,840 --> 00:24:02,720
basically do exact api commands and get

751
00:24:02,720 --> 00:24:03,760
shell access

752
00:24:03,760 --> 00:24:05,520
and as i mentioned earlier it's not

753
00:24:05,520 --> 00:24:07,520
uncommon to find that

754
00:24:07,520 --> 00:24:09,039
once you get access to a container

755
00:24:09,039 --> 00:24:10,799
you're running is root

756
00:24:10,799 --> 00:24:12,880
just because of ease of use with how a

757
00:24:12,880 --> 00:24:14,480
lot of things are packaged

758
00:24:14,480 --> 00:24:16,080
and so then that presents other

759
00:24:16,080 --> 00:24:17,919
opportunities where you can take secrets

760
00:24:17,919 --> 00:24:18,480
and

761
00:24:18,480 --> 00:24:21,200
like pivot to other hosts of course

762
00:24:21,200 --> 00:24:23,360
you've got cloud apis or just apis in

763
00:24:23,360 --> 00:24:24,400
general

764
00:24:24,400 --> 00:24:26,240
one thing that's interesting that i've

765
00:24:26,240 --> 00:24:27,679
done in the past is

766
00:24:27,679 --> 00:24:29,760
if i have a service that uses an api and

767
00:24:29,760 --> 00:24:31,360
it's a commercial tool

768
00:24:31,360 --> 00:24:33,279
i'll read the developer documentation

769
00:24:33,279 --> 00:24:35,200
and they'll have a sample key there

770
00:24:35,200 --> 00:24:37,039
and i think well let me just try it see

771
00:24:37,039 --> 00:24:38,320
if it works and there's

772
00:24:38,320 --> 00:24:40,080
been instances where that sample key

773
00:24:40,080 --> 00:24:41,440
actually works

774
00:24:41,440 --> 00:24:43,919
you know so there's definitely a lot of

775
00:24:43,919 --> 00:24:46,000
opportunity around apis even if you have

776
00:24:46,000 --> 00:24:47,840
some custom back-end apis you could

777
00:24:47,840 --> 00:24:49,120
totally

778
00:24:49,120 --> 00:24:50,799
kind of probe them see what kind of data

779
00:24:50,799 --> 00:24:52,720
you can get back if there's a number at

780
00:24:52,720 --> 00:24:53,200
the end

781
00:24:53,200 --> 00:24:54,960
of the api seeing if you could use

782
00:24:54,960 --> 00:24:56,720
something like burp intruder and

783
00:24:56,720 --> 00:24:58,159
increment on that number see what kind

784
00:24:58,159 --> 00:25:00,960
of data you get back but you have other

785
00:25:00,960 --> 00:25:03,440
areas of low hanging fruit like default

786
00:25:03,440 --> 00:25:04,320
credentials or

787
00:25:04,320 --> 00:25:07,679
stuff with no authentication like vnc

788
00:25:07,679 --> 00:25:09,760
servers with browseable content whereas

789
00:25:09,760 --> 00:25:11,600
you're doing directory brute forcing you

790
00:25:11,600 --> 00:25:13,520
may find script with credentials

791
00:25:13,520 --> 00:25:17,918
or even unpatched or unmonitored systems

792
00:25:18,640 --> 00:25:20,240
so next i'm going to just quickly look

793
00:25:20,240 --> 00:25:22,000
at some initial

794
00:25:22,000 --> 00:25:23,919
common initial access vectors that are

795
00:25:23,919 --> 00:25:25,360
used

796
00:25:25,360 --> 00:25:27,279
the first example is just your typical

797
00:25:27,279 --> 00:25:30,080
external payload fish and pivot so

798
00:25:30,080 --> 00:25:31,919
you send an email with a payload

799
00:25:31,919 --> 00:25:33,120
attached so it could be

800
00:25:33,120 --> 00:25:36,080
like a dot app package or a macro

801
00:25:36,080 --> 00:25:38,480
enabled document for

802
00:25:38,480 --> 00:25:40,799
mac os and the user detonates it and

803
00:25:40,799 --> 00:25:43,440
then you have post exploitation

804
00:25:43,440 --> 00:25:46,880
access to their mac host one thing you

805
00:25:46,880 --> 00:25:47,840
could do is

806
00:25:47,840 --> 00:25:49,600
if jeff is enabled you could check to

807
00:25:49,600 --> 00:25:51,039
see if the jf binary

808
00:25:51,039 --> 00:25:53,039
or in order to check to see if jamf is

809
00:25:53,039 --> 00:25:54,720
there you can check to see if the jamf

810
00:25:54,720 --> 00:25:56,799
binary is present and if it is present

811
00:25:56,799 --> 00:25:59,039
you can do things like chess check jss

812
00:25:59,039 --> 00:26:00,159
connection

813
00:26:00,159 --> 00:26:03,200
um which will basically return the uh

814
00:26:03,200 --> 00:26:05,840
url of the jamf server the jamf admin

815
00:26:05,840 --> 00:26:07,120
server which may become

816
00:26:07,120 --> 00:26:09,279
may come in handy later when you get the

817
00:26:09,279 --> 00:26:11,200
credentials to access it

818
00:26:11,200 --> 00:26:13,440
jamf version you can list users from

819
00:26:13,440 --> 00:26:15,360
jaff as well

820
00:26:15,360 --> 00:26:17,760
you can also do your other host recon

821
00:26:17,760 --> 00:26:19,120
typical things that you'll want to do

822
00:26:19,120 --> 00:26:19,760
like what

823
00:26:19,760 --> 00:26:21,919
input detection response or antivirus

824
00:26:21,919 --> 00:26:23,039
products are running

825
00:26:23,039 --> 00:26:25,520
are there any secrets on the host that

826
00:26:25,520 --> 00:26:26,720
type of information

827
00:26:26,720 --> 00:26:28,000
could also prompt the user for

828
00:26:28,000 --> 00:26:29,760
credentials with like a fake apple

829
00:26:29,760 --> 00:26:31,440
looking prompt

830
00:26:31,440 --> 00:26:35,039
tunneling to other hosts password sprays

831
00:26:35,039 --> 00:26:36,720
you know your typical post exploitation

832
00:26:36,720 --> 00:26:37,760
that you'll basically

833
00:26:37,760 --> 00:26:40,080
rinse and repeat over and over until you

834
00:26:40,080 --> 00:26:41,279
basically until you accomplish your

835
00:26:41,279 --> 00:26:42,320
objectives

836
00:26:42,320 --> 00:26:46,320
so that's one example another example

837
00:26:46,320 --> 00:26:49,360
is external credential harvest fish

838
00:26:49,360 --> 00:26:51,120
i personally think this is a very

839
00:26:51,120 --> 00:26:53,760
interesting example given

840
00:26:53,760 --> 00:26:55,840
the state of things today and how a lot

841
00:26:55,840 --> 00:26:58,720
of stuff is federated or cloud-based

842
00:26:58,720 --> 00:27:00,960
but in this example i'm just showing an

843
00:27:00,960 --> 00:27:02,960
example using evil jinx 2 which was

844
00:27:02,960 --> 00:27:03,919
written by kuba

845
00:27:03,919 --> 00:27:06,960
gretzky it does what what's called 2fa

846
00:27:06,960 --> 00:27:08,240
man in the middle phishing where it

847
00:27:08,240 --> 00:27:09,039
presents

848
00:27:09,039 --> 00:27:11,279
a page that a fake page that looks like

849
00:27:11,279 --> 00:27:12,960
your actual target login page

850
00:27:12,960 --> 00:27:15,440
and as the user interacts and logs into

851
00:27:15,440 --> 00:27:17,360
this fake page it basically proxies

852
00:27:17,360 --> 00:27:18,559
their login

853
00:27:18,559 --> 00:27:21,520
uh to the actual api authentication

854
00:27:21,520 --> 00:27:22,159
backend

855
00:27:22,159 --> 00:27:24,320
points so basically practice proxy's

856
00:27:24,320 --> 00:27:25,760
your login including

857
00:27:25,760 --> 00:27:29,360
the 2fa process and so um

858
00:27:29,360 --> 00:27:32,000
using this this methodology here you

859
00:27:32,000 --> 00:27:33,919
could actually even with 2fa enabled as

860
00:27:33,919 --> 00:27:35,360
long as it's not

861
00:27:35,360 --> 00:27:37,919
u2f like if it's just a simple push to

862
00:27:37,919 --> 00:27:39,600
your phone

863
00:27:39,600 --> 00:27:41,520
this process still works we're using

864
00:27:41,520 --> 00:27:42,880
evil jinx 2

865
00:27:42,880 --> 00:27:45,039
let's say you were targeting office 365

866
00:27:45,039 --> 00:27:45,919
or octa

867
00:27:45,919 --> 00:27:48,240
you can get access remotely to someone's

868
00:27:48,240 --> 00:27:49,039
octa

869
00:27:49,039 --> 00:27:51,039
and then you can uh you have access to

870
00:27:51,039 --> 00:27:52,880
things like email access which you could

871
00:27:52,880 --> 00:27:54,720
then use for internal fishing and

872
00:27:54,720 --> 00:27:56,080
internal fishing

873
00:27:56,080 --> 00:27:57,760
has a much higher success rate than

874
00:27:57,760 --> 00:27:59,360
external fishing because it's actually

875
00:27:59,360 --> 00:28:01,120
coming from an employee's account

876
00:28:01,120 --> 00:28:03,440
and it bypasses certain controls that

877
00:28:03,440 --> 00:28:05,600
external phishing emails go through

878
00:28:05,600 --> 00:28:09,200
of course potentially file access so if

879
00:28:09,200 --> 00:28:11,919
vpn is not required for things like

880
00:28:11,919 --> 00:28:12,399
google

881
00:28:12,399 --> 00:28:15,039
apps or google drive files then if it's

882
00:28:15,039 --> 00:28:17,039
not required to access that in your end

883
00:28:17,039 --> 00:28:18,960
and you'll have access to those files

884
00:28:18,960 --> 00:28:19,440
and

885
00:28:19,440 --> 00:28:21,200
you may end up finding very sensitive

886
00:28:21,200 --> 00:28:22,960
things maybe data that should be in

887
00:28:22,960 --> 00:28:24,480
production that's actually there in

888
00:28:24,480 --> 00:28:25,919
their google drive or

889
00:28:25,919 --> 00:28:29,200
dropbox or box folders and you have

890
00:28:29,200 --> 00:28:31,039
access to other services like slack

891
00:28:31,039 --> 00:28:33,360
sales force and so what's interesting

892
00:28:33,360 --> 00:28:34,880
about this attack path is you could

893
00:28:34,880 --> 00:28:36,640
actually as a red teamer accomplish your

894
00:28:36,640 --> 00:28:38,720
mission objectives without ever

895
00:28:38,720 --> 00:28:41,919
landing a payload on a mac host

896
00:28:41,919 --> 00:28:43,600
and i think this is a very interesting

897
00:28:43,600 --> 00:28:46,000
attack path that both i think blue teams

898
00:28:46,000 --> 00:28:46,480
should

899
00:28:46,480 --> 00:28:47,919
should check out like what does that

900
00:28:47,919 --> 00:28:49,760
look like in our environment if

901
00:28:49,760 --> 00:28:53,600
someone has um if the same octa token

902
00:28:53,600 --> 00:28:56,640
is being used for multiple places

903
00:28:56,640 --> 00:28:58,559
like especially over a short period of

904
00:28:58,559 --> 00:29:00,000
time what does that look like

905
00:29:00,000 --> 00:29:01,520
do we have detections for that that we

906
00:29:01,520 --> 00:29:03,039
have the ability to

907
00:29:03,039 --> 00:29:05,679
revoke those those tokens things like

908
00:29:05,679 --> 00:29:07,840
that

909
00:29:07,840 --> 00:29:09,039
another example that's really

910
00:29:09,039 --> 00:29:11,039
interesting is being able to test

911
00:29:11,039 --> 00:29:14,000
your externally facing business units so

912
00:29:14,000 --> 00:29:15,760
just about every company has some kind

913
00:29:15,760 --> 00:29:17,679
of externally facing business unit

914
00:29:17,679 --> 00:29:19,600
like it could be inbound sales or

915
00:29:19,600 --> 00:29:20,960
customer support

916
00:29:20,960 --> 00:29:22,399
some part of your organization that

917
00:29:22,399 --> 00:29:24,000
interfaces with the public

918
00:29:24,000 --> 00:29:27,360
in order to uh like start an intake for

919
00:29:27,360 --> 00:29:28,559
some kind of process

920
00:29:28,559 --> 00:29:30,720
so like in this example let's say you're

921
00:29:30,720 --> 00:29:31,679
dealing with

922
00:29:31,679 --> 00:29:34,640
like an inbound or i guess a sales

923
00:29:34,640 --> 00:29:36,720
organization that that takes calls

924
00:29:36,720 --> 00:29:38,240
you could actually from a red team

925
00:29:38,240 --> 00:29:40,240
perspective inject into that process

926
00:29:40,240 --> 00:29:42,720
and see like as an attacker if they were

927
00:29:42,720 --> 00:29:44,480
to leverage that process how far could

928
00:29:44,480 --> 00:29:45,039
they get

929
00:29:45,039 --> 00:29:46,480
what are our controls do we have

930
00:29:46,480 --> 00:29:48,640
visibility do we have

931
00:29:48,640 --> 00:29:51,279
adequate response procedures for that so

932
00:29:51,279 --> 00:29:52,720
in this example

933
00:29:52,720 --> 00:29:54,880
like you could call in and like purport

934
00:29:54,880 --> 00:29:56,000
to be some business

935
00:29:56,000 --> 00:29:58,159
kind of social engineer your way in uh

936
00:29:58,159 --> 00:29:59,039
talk to the rep

937
00:29:59,039 --> 00:30:00,960
build rapport get their contact

938
00:30:00,960 --> 00:30:02,080
information

939
00:30:02,080 --> 00:30:04,240
uh once you hang up like follow up with

940
00:30:04,240 --> 00:30:05,279
a benign email

941
00:30:05,279 --> 00:30:07,360
and then follow up after that with an

942
00:30:07,360 --> 00:30:09,520
actual email with your payload

943
00:30:09,520 --> 00:30:12,080
and then you get initial access like to

944
00:30:12,080 --> 00:30:12,640
the host

945
00:30:12,640 --> 00:30:14,240
and and then you kind of what i

946
00:30:14,240 --> 00:30:16,240
mentioned earlier your post exploitation

947
00:30:16,240 --> 00:30:18,080
so what's interesting about this attack

948
00:30:18,080 --> 00:30:19,360
path is

949
00:30:19,360 --> 00:30:20,880
sometimes like especially if it's a

950
00:30:20,880 --> 00:30:22,960
support team that you're doing this for

951
00:30:22,960 --> 00:30:25,120
and they're externally facing uh their

952
00:30:25,120 --> 00:30:26,320
mail may sit

953
00:30:26,320 --> 00:30:27,919
right the mail actually if it's in

954
00:30:27,919 --> 00:30:29,520
zendesk as an example may

955
00:30:29,520 --> 00:30:31,200
get monitored differently than your

956
00:30:31,200 --> 00:30:32,960
corporate email and so there may be

957
00:30:32,960 --> 00:30:34,640
looser controls there that

958
00:30:34,640 --> 00:30:37,919
may not um that basically where your

959
00:30:37,919 --> 00:30:39,360
corporate environment those controls may

960
00:30:39,360 --> 00:30:40,640
not necessarily apply to this

961
00:30:40,640 --> 00:30:41,279
environment

962
00:30:41,279 --> 00:30:43,200
so it's a good way to kind of test your

963
00:30:43,200 --> 00:30:45,279
visibility and your response here

964
00:30:45,279 --> 00:30:48,240
and also kind of uplift uh the people

965
00:30:48,240 --> 00:30:49,679
involved with that process since they're

966
00:30:49,679 --> 00:30:51,520
externally facing just to help

967
00:30:51,520 --> 00:30:53,520
with that security awareness and make

968
00:30:53,520 --> 00:30:54,640
sure everybody knows what their

969
00:30:54,640 --> 00:30:55,840
procedures are

970
00:30:55,840 --> 00:30:59,039
in the event of an incident

971
00:30:59,360 --> 00:31:00,880
and then of course you have your soon

972
00:31:00,880 --> 00:31:02,799
breach model where you have

973
00:31:02,799 --> 00:31:05,840
um like payload execution by a trusted

974
00:31:05,840 --> 00:31:06,240
agent

975
00:31:06,240 --> 00:31:08,159
so it could be an employee that you have

976
00:31:08,159 --> 00:31:09,760
a relationship with in a company who's

977
00:31:09,760 --> 00:31:10,480
agreed to

978
00:31:10,480 --> 00:31:12,559
to basically run your payload and maybe

979
00:31:12,559 --> 00:31:14,320
they've run it on a separate mac that

980
00:31:14,320 --> 00:31:15,919
doesn't when they're not doing business

981
00:31:15,919 --> 00:31:16,559
work

982
00:31:16,559 --> 00:31:18,960
um and they execute your payload and

983
00:31:18,960 --> 00:31:20,559
then you kind of go down your your

984
00:31:20,559 --> 00:31:22,000
typical attack path

985
00:31:22,000 --> 00:31:23,840
um you could also do like assumed

986
00:31:23,840 --> 00:31:25,600
physical access where maybe you come in

987
00:31:25,600 --> 00:31:27,760
with a rogue device plug it in

988
00:31:27,760 --> 00:31:29,840
and then have that rogue device tunnel

989
00:31:29,840 --> 00:31:30,799
out to

990
00:31:30,799 --> 00:31:32,640
like digital ocean and then you tunnel

991
00:31:32,640 --> 00:31:34,399
into digital ocean in order to access

992
00:31:34,399 --> 00:31:35,120
the

993
00:31:35,120 --> 00:31:36,720
device so there's a lot of different

994
00:31:36,720 --> 00:31:38,559
ways you could do that but assume breach

995
00:31:38,559 --> 00:31:39,679
model

996
00:31:39,679 --> 00:31:41,840
may also allow you to test things like

997
00:31:41,840 --> 00:31:42,880
other aspects like

998
00:31:42,880 --> 00:31:44,720
people who leave their computers

999
00:31:44,720 --> 00:31:46,000
unlocked being able to

1000
00:31:46,000 --> 00:31:48,640
walk by and pop in bash money or

1001
00:31:48,640 --> 00:31:50,320
something on their machine

1002
00:31:50,320 --> 00:31:53,200
so definitely it's a very interesting

1003
00:31:53,200 --> 00:31:55,519
test path here

1004
00:31:55,519 --> 00:31:57,360
so in a nutshell there's a lot of

1005
00:31:57,360 --> 00:31:59,120
similarities to windows environments

1006
00:31:59,120 --> 00:32:01,440
really except for the initial how

1007
00:32:01,440 --> 00:32:04,320
since it's mac versus windows again you

1008
00:32:04,320 --> 00:32:05,120
really don't need

1009
00:32:05,120 --> 00:32:07,039
domain admin to meet your operational

1010
00:32:07,039 --> 00:32:09,200
objectives and most instances i probably

1011
00:32:09,200 --> 00:32:10,159
say you don't need it

1012
00:32:10,159 --> 00:32:13,120
unless like your the path that you're

1013
00:32:13,120 --> 00:32:14,480
going on requires

1014
00:32:14,480 --> 00:32:16,399
domain admin in order to get an account

1015
00:32:16,399 --> 00:32:18,080
and pivot

1016
00:32:18,080 --> 00:32:19,519
but there's a lot of different paths you

1017
00:32:19,519 --> 00:32:21,039
could take and really depends on what

1018
00:32:21,039 --> 00:32:23,440
your objectives are

1019
00:32:23,440 --> 00:32:24,960
so now i'm going to do a more detailed

1020
00:32:24,960 --> 00:32:26,880
look on the attack side of what the

1021
00:32:26,880 --> 00:32:28,399
different phases are

1022
00:32:28,399 --> 00:32:30,960
so starting with recon here's some

1023
00:32:30,960 --> 00:32:32,880
useful recon sources that i personally

1024
00:32:32,880 --> 00:32:33,760
enjoy using

1025
00:32:33,760 --> 00:32:35,440
the first one is internet registries

1026
00:32:35,440 --> 00:32:38,000
like aaron apnik

1027
00:32:38,000 --> 00:32:39,840
for example you can actually query your

1028
00:32:39,840 --> 00:32:41,360
company's name

1029
00:32:41,360 --> 00:32:44,000
and then get as numbers and then query

1030
00:32:44,000 --> 00:32:46,159
the as numbers and get ip ranges and

1031
00:32:46,159 --> 00:32:49,039
that's a quick way to find out what

1032
00:32:49,039 --> 00:32:51,840
publicly facing ip ranges your company

1033
00:32:51,840 --> 00:32:52,880
owns

1034
00:32:52,880 --> 00:32:54,799
and then one of my personal favorites is

1035
00:32:54,799 --> 00:32:56,480
dns text records

1036
00:32:56,480 --> 00:32:58,320
and just doing something something as

1037
00:32:58,320 --> 00:33:01,679
simple as hostdesk-t

1038
00:33:01,679 --> 00:33:04,640
txt and then your domain that will

1039
00:33:04,640 --> 00:33:06,720
basically return your dns text records

1040
00:33:06,720 --> 00:33:07,919
and what you might find

1041
00:33:07,919 --> 00:33:10,320
especially in today's time where a lot

1042
00:33:10,320 --> 00:33:12,240
of companies have authorized certain

1043
00:33:12,240 --> 00:33:14,000
organizations to send mail on their

1044
00:33:14,000 --> 00:33:16,080
behalf when you look at text records

1045
00:33:16,080 --> 00:33:17,360
they may show up there in the text

1046
00:33:17,360 --> 00:33:18,159
records where

1047
00:33:18,159 --> 00:33:20,880
you may find something like docusign is

1048
00:33:20,880 --> 00:33:21,600
there or

1049
00:33:21,600 --> 00:33:24,080
zendesk as an example and so what that

1050
00:33:24,080 --> 00:33:25,919
does for me as an attacker is it gives

1051
00:33:25,919 --> 00:33:28,320
me insight that all right if docusign is

1052
00:33:28,320 --> 00:33:30,000
listed in your text records

1053
00:33:30,000 --> 00:33:31,279
that gives me indication that you're

1054
00:33:31,279 --> 00:33:33,760
using docusign so if i use that

1055
00:33:33,760 --> 00:33:36,159
as a phishing phishing pretext in one of

1056
00:33:36,159 --> 00:33:37,200
my campaigns

1057
00:33:37,200 --> 00:33:39,120
then i can have at least some assurance

1058
00:33:39,120 --> 00:33:40,640
that is going to resonate because the

1059
00:33:40,640 --> 00:33:41,600
employees there

1060
00:33:41,600 --> 00:33:44,000
use docusign so it probably would be

1061
00:33:44,000 --> 00:33:45,519
something that i would use

1062
00:33:45,519 --> 00:33:48,799
uh shoden is excellent as well where you

1063
00:33:48,799 --> 00:33:51,039
can feed in those ip ranges that you get

1064
00:33:51,039 --> 00:33:52,640
that you got from your

1065
00:33:52,640 --> 00:33:54,480
internet registries and as numbers you

1066
00:33:54,480 --> 00:33:56,399
can feed all that stuff into showdown

1067
00:33:56,399 --> 00:33:57,200
and search

1068
00:33:57,200 --> 00:33:58,799
another thing i like to do with showdown

1069
00:33:58,799 --> 00:34:01,200
is i'll also search ssl certificates

1070
00:34:01,200 --> 00:34:03,519
uh by the domain name and that will

1071
00:34:03,519 --> 00:34:04,960
actually help you find

1072
00:34:04,960 --> 00:34:07,360
infrastructure that an organization owns

1073
00:34:07,360 --> 00:34:09,440
but that's actually cloud hosted instead

1074
00:34:09,440 --> 00:34:10,800
of on-prem

1075
00:34:10,800 --> 00:34:13,440
of course you have github and just about

1076
00:34:13,440 --> 00:34:15,119
every tech organization now has an

1077
00:34:15,119 --> 00:34:15,839
organization

1078
00:34:15,839 --> 00:34:18,239
github page and then under the

1079
00:34:18,239 --> 00:34:20,079
organization's github page they'll often

1080
00:34:20,079 --> 00:34:21,679
have employees listed

1081
00:34:21,679 --> 00:34:23,520
and what's interesting for that is if my

1082
00:34:23,520 --> 00:34:24,800
objective is

1083
00:34:24,800 --> 00:34:27,359
to like compromise the build pipeline or

1084
00:34:27,359 --> 00:34:28,639
access source code

1085
00:34:28,639 --> 00:34:30,239
then i could easily go to github look at

1086
00:34:30,239 --> 00:34:31,839
the organization and

1087
00:34:31,839 --> 00:34:34,719
the employees there and and identify

1088
00:34:34,719 --> 00:34:35,760
like who the

1089
00:34:35,760 --> 00:34:37,199
engineers are that i might want to

1090
00:34:37,199 --> 00:34:39,040
target who may have certain keys on

1091
00:34:39,040 --> 00:34:40,079
their machines

1092
00:34:40,079 --> 00:34:42,480
that i would want to leverage um of

1093
00:34:42,480 --> 00:34:44,159
course you got certificate transparency

1094
00:34:44,159 --> 00:34:45,918
logs that are also interesting with new

1095
00:34:45,918 --> 00:34:47,679
ssl certs that are stood up

1096
00:34:47,679 --> 00:34:50,000
like could also show some test hosts

1097
00:34:50,000 --> 00:34:51,760
that maybe aren't properly configured

1098
00:34:51,760 --> 00:34:53,040
that were stood up

1099
00:34:53,040 --> 00:34:55,040
that you may want to poke around with

1100
00:34:55,040 --> 00:34:56,639
various open source tools like the

1101
00:34:56,639 --> 00:34:58,720
harvester that you can dig on domains or

1102
00:34:58,720 --> 00:34:59,839
even do domain

1103
00:34:59,839 --> 00:35:01,680
or subdomain enumeration or brute

1104
00:35:01,680 --> 00:35:02,960
forcing

1105
00:35:02,960 --> 00:35:05,520
truffle hog and tools like that you

1106
00:35:05,520 --> 00:35:06,240
could search

1107
00:35:06,240 --> 00:35:08,480
and point it to github repo and look for

1108
00:35:08,480 --> 00:35:10,720
secrets that may have been committed

1109
00:35:10,720 --> 00:35:13,280
hunter.io is one of my favorites for

1110
00:35:13,280 --> 00:35:14,400
getting uh

1111
00:35:14,400 --> 00:35:16,320
target email addresses and really you

1112
00:35:16,320 --> 00:35:18,480
just have to create an account log in

1113
00:35:18,480 --> 00:35:19,440
and you search for

1114
00:35:19,440 --> 00:35:22,560
the domain and it returns basically it's

1115
00:35:22,560 --> 00:35:25,920
basically like a marketing source for um

1116
00:35:25,920 --> 00:35:28,320
basically aggregating various marketing

1117
00:35:28,320 --> 00:35:30,000
sources for email addresses so you could

1118
00:35:30,000 --> 00:35:31,280
use that

1119
00:35:31,280 --> 00:35:34,079
um also you could look for just by using

1120
00:35:34,079 --> 00:35:36,560
the company's name dot octa.com or dot

1121
00:35:36,560 --> 00:35:37,599
zoom that us

1122
00:35:37,599 --> 00:35:40,000
or dot slack like in order to see if

1123
00:35:40,000 --> 00:35:42,000
those technologies are present and if so

1124
00:35:42,000 --> 00:35:44,560
like they may play a part in your

1125
00:35:44,560 --> 00:35:47,599
social engineering campaign

1126
00:35:47,599 --> 00:35:49,520
uh from a weaponization and delivery

1127
00:35:49,520 --> 00:35:52,640
perspective i'm a huge fan of go fish

1128
00:35:52,640 --> 00:35:55,920
i will say when using goldfish just make

1129
00:35:55,920 --> 00:35:56,640
sure you

1130
00:35:56,640 --> 00:35:58,320
go through the code and you change the

1131
00:35:58,320 --> 00:36:00,320
static go fish

1132
00:36:00,320 --> 00:36:02,720
mail header that's in there otherwise

1133
00:36:02,720 --> 00:36:04,640
like mature organizations that do flag

1134
00:36:04,640 --> 00:36:05,200
on that

1135
00:36:05,200 --> 00:36:08,160
like you'll you'll get seen and get

1136
00:36:08,160 --> 00:36:09,680
stopped pretty early in the campaign so

1137
00:36:09,680 --> 00:36:10,640
just make sure you do

1138
00:36:10,640 --> 00:36:12,400
like those types of checks and changes

1139
00:36:12,400 --> 00:36:13,680
for go fish

1140
00:36:13,680 --> 00:36:15,200
but outside of that i think it's an

1141
00:36:15,200 --> 00:36:17,200
awesome tool and

1142
00:36:17,200 --> 00:36:19,040
because it has the ability to do pixel

1143
00:36:19,040 --> 00:36:20,960
tracking you can do a couple rounds of

1144
00:36:20,960 --> 00:36:22,160
fishing where you do

1145
00:36:22,160 --> 00:36:24,560
like a recon fish where you have some

1146
00:36:24,560 --> 00:36:25,359
kind of

1147
00:36:25,359 --> 00:36:28,480
like burnable throwaway email could be

1148
00:36:28,480 --> 00:36:31,520
a gift card or something with a link and

1149
00:36:31,520 --> 00:36:32,960
as people click that link

1150
00:36:32,960 --> 00:36:34,640
you're just collecting user agent

1151
00:36:34,640 --> 00:36:36,800
information in order to fingerprint like

1152
00:36:36,800 --> 00:36:38,160
what types of hosts are in the

1153
00:36:38,160 --> 00:36:39,119
environment

1154
00:36:39,119 --> 00:36:41,440
then you take that data figure out what

1155
00:36:41,440 --> 00:36:43,119
those what those types of hosts are and

1156
00:36:43,119 --> 00:36:44,800
then you build your payload and then you

1157
00:36:44,800 --> 00:36:45,520
do your

1158
00:36:45,520 --> 00:36:47,599
your follow on like actual targeted

1159
00:36:47,599 --> 00:36:49,520
fishing

1160
00:36:49,520 --> 00:36:51,280
and as i mentioned earlier for since

1161
00:36:51,280 --> 00:36:52,800
most environments have 2fa

1162
00:36:52,800 --> 00:36:55,040
enabled if you're looking for credential

1163
00:36:55,040 --> 00:36:55,920
capturing

1164
00:36:55,920 --> 00:36:59,040
evil jinx 2 and cred sniper by mike

1165
00:36:59,040 --> 00:37:00,880
filch

1166
00:37:00,880 --> 00:37:03,359
those are really really cool tools that

1167
00:37:03,359 --> 00:37:03,920
um

1168
00:37:03,920 --> 00:37:06,160
can still be successful as long as it's

1169
00:37:06,160 --> 00:37:08,320
not u2f um

1170
00:37:08,320 --> 00:37:11,359
example payloads again mac fish is a

1171
00:37:11,359 --> 00:37:12,000
good

1172
00:37:12,000 --> 00:37:14,240
example of uh of a tool that you can use

1173
00:37:14,240 --> 00:37:15,599
to generate a

1174
00:37:15,599 --> 00:37:19,040
macro for mac and um it even does

1175
00:37:19,040 --> 00:37:21,040
produces your macro where it's like if

1176
00:37:21,040 --> 00:37:22,800
it's if statement where it's if mac

1177
00:37:22,800 --> 00:37:24,720
then execute this code else if it's

1178
00:37:24,720 --> 00:37:26,079
windows basically

1179
00:37:26,079 --> 00:37:27,920
you can have a separate set of macro

1180
00:37:27,920 --> 00:37:30,000
code there so really neat

1181
00:37:30,000 --> 00:37:32,320
app fail by cody thomas is probably my

1182
00:37:32,320 --> 00:37:33,440
favorite

1183
00:37:33,440 --> 00:37:36,320
because it it's very flexible with jxa

1184
00:37:36,320 --> 00:37:37,920
which we'll talk about later javascript

1185
00:37:37,920 --> 00:37:39,040
for automation

1186
00:37:39,040 --> 00:37:42,000
and it also has payloads like um chrome

1187
00:37:42,000 --> 00:37:43,760
extensions that chris ross

1188
00:37:43,760 --> 00:37:47,040
zawyer uh wrote and contributed to that

1189
00:37:47,040 --> 00:37:49,599
you have shell scripts my tool max shell

1190
00:37:49,599 --> 00:37:50,160
swift

1191
00:37:50,160 --> 00:37:52,480
does macro binaries currently so there's

1192
00:37:52,480 --> 00:37:54,000
a lot of different options of different

1193
00:37:54,000 --> 00:37:55,520
payloads that you could select and we'll

1194
00:37:55,520 --> 00:37:57,359
talk a little bit more about those

1195
00:37:57,359 --> 00:38:01,119
as well but going back to jxa

1196
00:38:01,119 --> 00:38:04,320
so javascript for automation was really

1197
00:38:04,320 --> 00:38:05,920
supposed to be a replacement

1198
00:38:05,920 --> 00:38:08,400
so to speak for applescript because

1199
00:38:08,400 --> 00:38:10,640
applescript can get very convoluted for

1200
00:38:10,640 --> 00:38:11,040
com

1201
00:38:11,040 --> 00:38:13,599
for very complex tasks and so um

1202
00:38:13,599 --> 00:38:15,520
javascript for automation

1203
00:38:15,520 --> 00:38:17,680
was a way to basically replace or

1204
00:38:17,680 --> 00:38:19,280
supplement

1205
00:38:19,280 --> 00:38:21,920
those limitations and so it was brought

1206
00:38:21,920 --> 00:38:23,760
to light by cody thomas

1207
00:38:23,760 --> 00:38:26,079
at spectreops a while back around the

1208
00:38:26,079 --> 00:38:28,160
benefits from an attacker perspective of

1209
00:38:28,160 --> 00:38:29,119
jxa

1210
00:38:29,119 --> 00:38:31,119
and the things i like about jxa is it's

1211
00:38:31,119 --> 00:38:33,280
hosted the code the post exploitation

1212
00:38:33,280 --> 00:38:35,520
code itself is hosted on a server

1213
00:38:35,520 --> 00:38:37,119
and your app that you're going to run on

1214
00:38:37,119 --> 00:38:38,640
your target clients

1215
00:38:38,640 --> 00:38:40,720
basically has very few lines of code

1216
00:38:40,720 --> 00:38:42,880
because really all it's doing is evaling

1217
00:38:42,880 --> 00:38:43,680
the code

1218
00:38:43,680 --> 00:38:45,520
the post exploitation code on a server

1219
00:38:45,520 --> 00:38:47,359
and is running it in memory

1220
00:38:47,359 --> 00:38:49,680
and because of that it passes

1221
00:38:49,680 --> 00:38:51,359
notarization and so

1222
00:38:51,359 --> 00:38:53,359
a while back i was trying to figure out

1223
00:38:53,359 --> 00:38:54,880
like how can we launch

1224
00:38:54,880 --> 00:38:57,119
how can i build an application like a

1225
00:38:57,119 --> 00:38:58,240
dot app package

1226
00:38:58,240 --> 00:39:00,960
to basically execute jxa without using

1227
00:39:00,960 --> 00:39:02,480
the osa script binary

1228
00:39:02,480 --> 00:39:04,640
and so that's what that's how i came up

1229
00:39:04,640 --> 00:39:07,119
with the jxa app concept of doing it all

1230
00:39:07,119 --> 00:39:08,320
programmatically

1231
00:39:08,320 --> 00:39:09,839
in order to avoid command line

1232
00:39:09,839 --> 00:39:11,760
detections and still

1233
00:39:11,760 --> 00:39:15,119
take advantage of um the jxa benefits on

1234
00:39:15,119 --> 00:39:16,560
the red team side

1235
00:39:16,560 --> 00:39:18,240
so around the notarization piece i have

1236
00:39:18,240 --> 00:39:19,839
shared that with apple in the past and

1237
00:39:19,839 --> 00:39:20,960
it's possible that

1238
00:39:20,960 --> 00:39:23,040
that they're making changes or we'll

1239
00:39:23,040 --> 00:39:24,800
make changes soon

1240
00:39:24,800 --> 00:39:27,280
but as of the last time i've tested this

1241
00:39:27,280 --> 00:39:28,000
still does

1242
00:39:28,000 --> 00:39:31,520
pass their notarization check

1243
00:39:32,400 --> 00:39:34,800
so here's an example of what a jxa app

1244
00:39:34,800 --> 00:39:36,720
looks like that i wrote a while back

1245
00:39:36,720 --> 00:39:40,000
and this one here you can see like this

1246
00:39:40,000 --> 00:39:40,400
is it

1247
00:39:40,400 --> 00:39:43,280
is not a lot very few lines of code and

1248
00:39:43,280 --> 00:39:44,960
you can see the apple script

1249
00:39:44,960 --> 00:39:47,440
command there in the first rare box

1250
00:39:47,440 --> 00:39:49,359
where he's doing an eval statement

1251
00:39:49,359 --> 00:39:51,760
and it's uh evaling the javascript file

1252
00:39:51,760 --> 00:39:52,640
that you would put in

1253
00:39:52,640 --> 00:39:55,119
at the ipn file parameters there and

1254
00:39:55,119 --> 00:39:56,960
it's basically executing that that post

1255
00:39:56,960 --> 00:39:58,720
exploitation code that's on the server

1256
00:39:58,720 --> 00:39:59,680
side so

1257
00:39:59,680 --> 00:40:02,000
as you can see here even sending it in

1258
00:40:02,000 --> 00:40:04,000
for notarization there's really not much

1259
00:40:04,000 --> 00:40:06,480
for notarization scanners to key in on

1260
00:40:06,480 --> 00:40:07,040
because it's

1261
00:40:07,040 --> 00:40:10,480
everything's on the server side

1262
00:40:10,480 --> 00:40:13,200
so looking at command and control i just

1263
00:40:13,200 --> 00:40:14,800
quickly wanted to point out a good read

1264
00:40:14,800 --> 00:40:16,480
from tim malcolm vetter around

1265
00:40:16,480 --> 00:40:18,240
simple safe red team attack

1266
00:40:18,240 --> 00:40:19,520
infrastructure

1267
00:40:19,520 --> 00:40:22,800
so at a high level 10 000 foot view

1268
00:40:22,800 --> 00:40:24,560
what it's basically saying is you want

1269
00:40:24,560 --> 00:40:26,319
to be responsible with your red team

1270
00:40:26,319 --> 00:40:27,119
infrastructure

1271
00:40:27,119 --> 00:40:29,440
as a as a red teamer you not only don't

1272
00:40:29,440 --> 00:40:31,040
you want blue team to be able to find it

1273
00:40:31,040 --> 00:40:31,680
crawl it

1274
00:40:31,680 --> 00:40:33,440
pick it apart but you also don't want to

1275
00:40:33,440 --> 00:40:35,119
have your stuff your infrastructure out

1276
00:40:35,119 --> 00:40:36,240
and expose

1277
00:40:36,240 --> 00:40:37,920
where it can get compromised and then

1278
00:40:37,920 --> 00:40:39,280
your

1279
00:40:39,280 --> 00:40:41,839
environment that you're assessing like

1280
00:40:41,839 --> 00:40:43,280
that environment gets compromised

1281
00:40:43,280 --> 00:40:44,640
through your infrastructure

1282
00:40:44,640 --> 00:40:46,960
so that would be a terrible scenario and

1283
00:40:46,960 --> 00:40:47,920
so

1284
00:40:47,920 --> 00:40:49,440
he has some real good points there on

1285
00:40:49,440 --> 00:40:51,440
how to make sure your c2 environment

1286
00:40:51,440 --> 00:40:52,960
remains protected

1287
00:40:52,960 --> 00:40:55,359
and also around how to how to be

1288
00:40:55,359 --> 00:40:57,359
flexible with your c2 so that

1289
00:40:57,359 --> 00:40:59,040
as things get burned on the blue team

1290
00:40:59,040 --> 00:41:00,800
side you don't have to completely stand

1291
00:41:00,800 --> 00:41:02,480
down your infrastructure stand it back

1292
00:41:02,480 --> 00:41:04,720
up maybe you just replace a redirector

1293
00:41:04,720 --> 00:41:05,520
and keep moving

1294
00:41:05,520 --> 00:41:07,760
right so really good article both for

1295
00:41:07,760 --> 00:41:10,880
blue i think and red in order to

1296
00:41:10,880 --> 00:41:12,400
kind of understand what that safe and

1297
00:41:12,400 --> 00:41:15,200
flexible infrastructure looks like

1298
00:41:15,200 --> 00:41:16,880
also around the command and control side

1299
00:41:16,880 --> 00:41:18,400
of things

1300
00:41:18,400 --> 00:41:19,760
as i mentioned earlier there's a lot of

1301
00:41:19,760 --> 00:41:22,160
different options so jorge or chias and

1302
00:41:22,160 --> 00:41:23,920
company have done a good job at the c2

1303
00:41:23,920 --> 00:41:24,720
matrix

1304
00:41:24,720 --> 00:41:26,240
of testing and evaluating different

1305
00:41:26,240 --> 00:41:28,079
command and controls including

1306
00:41:28,079 --> 00:41:30,480
mac os based ones um some of the ones

1307
00:41:30,480 --> 00:41:32,800
here like empire 3.0 still lives

1308
00:41:32,800 --> 00:41:35,920
lives on is still maintained you have

1309
00:41:35,920 --> 00:41:36,640
apfel

1310
00:41:36,640 --> 00:41:38,800
you have evil os x of course you have

1311
00:41:38,800 --> 00:41:40,319
metasploit

1312
00:41:40,319 --> 00:41:42,480
so lots of different options and there's

1313
00:41:42,480 --> 00:41:44,400
lots of different payloads like right we

1314
00:41:44,400 --> 00:41:46,319
talked about office macros and browser

1315
00:41:46,319 --> 00:41:48,400
browser extensions and you have apple

1316
00:41:48,400 --> 00:41:49,920
script python

1317
00:41:49,920 --> 00:41:52,000
and each of those has their own pluses

1318
00:41:52,000 --> 00:41:53,440
and minuses that you'll want to pick

1319
00:41:53,440 --> 00:41:55,280
based on your operational needs

1320
00:41:55,280 --> 00:41:58,560
for instance python has the benefit of

1321
00:41:58,560 --> 00:42:00,880
currently it's up to this point is still

1322
00:42:00,880 --> 00:42:02,560
included by default on mac os

1323
00:42:02,560 --> 00:42:04,000
even though that that's supposed to

1324
00:42:04,000 --> 00:42:05,680
change in the near future

1325
00:42:05,680 --> 00:42:07,599
but uh python scripts aren't run through

1326
00:42:07,599 --> 00:42:09,040
gatekeeper so you don't have to deal

1327
00:42:09,040 --> 00:42:09,680
with

1328
00:42:09,680 --> 00:42:11,520
the whole signing and notarization the

1329
00:42:11,520 --> 00:42:13,599
downside however is is super easy to

1330
00:42:13,599 --> 00:42:14,560
detect

1331
00:42:14,560 --> 00:42:17,119
so each of these has that kind of pro

1332
00:42:17,119 --> 00:42:19,119
and con to it that you'll pick based on

1333
00:42:19,119 --> 00:42:20,160
what you're looking to do in the

1334
00:42:20,160 --> 00:42:22,240
environment what your operational goals

1335
00:42:22,240 --> 00:42:22,800
are

1336
00:42:22,800 --> 00:42:24,319
and then you have of course you have

1337
00:42:24,319 --> 00:42:25,839
different c2 types like

1338
00:42:25,839 --> 00:42:27,920
you may have your typical beaconing over

1339
00:42:27,920 --> 00:42:30,319
http or https dns

1340
00:42:30,319 --> 00:42:32,319
or you just may have a consistent tcp

1341
00:42:32,319 --> 00:42:33,359
socket

1342
00:42:33,359 --> 00:42:35,599
to an ipm port where your c2 happens so

1343
00:42:35,599 --> 00:42:36,960
it all depends on what you're looking to

1344
00:42:36,960 --> 00:42:40,160
do for your objectives

1345
00:42:40,160 --> 00:42:42,400
around the post exploitation side i just

1346
00:42:42,400 --> 00:42:44,319
wanted to point out a few things uh by

1347
00:42:44,319 --> 00:42:45,599
zarya chris ross

1348
00:42:45,599 --> 00:42:48,240
um he just released on his github site

1349
00:42:48,240 --> 00:42:49,440
uh a set of

1350
00:42:49,440 --> 00:42:51,200
mac os security tools to definitely

1351
00:42:51,200 --> 00:42:54,000
check out um it's got things like

1352
00:42:54,000 --> 00:42:57,599
shell code runners and here's an example

1353
00:42:57,599 --> 00:42:58,000
of

1354
00:42:58,000 --> 00:43:00,480
a key logger for mac os that works and

1355
00:43:00,480 --> 00:43:01,200
um

1356
00:43:01,200 --> 00:43:02,640
what's cool about it is if you're just

1357
00:43:02,640 --> 00:43:04,640
looking to get common user keystrokes

1358
00:43:04,640 --> 00:43:06,319
you don't even need sudo for it

1359
00:43:06,319 --> 00:43:07,760
you do need sudo if you're looking to

1360
00:43:07,760 --> 00:43:09,440
get like protected fill

1361
00:43:09,440 --> 00:43:12,240
values like passwords um but that's

1362
00:43:12,240 --> 00:43:14,400
something to definitely check out also

1363
00:43:14,400 --> 00:43:16,079
malware unicorn at facebook did a

1364
00:43:16,079 --> 00:43:18,800
workshop on die lib injection techniques

1365
00:43:18,800 --> 00:43:20,240
kind of what that looks like what the

1366
00:43:20,240 --> 00:43:22,319
flow looks like with an example payload

1367
00:43:22,319 --> 00:43:22,960
is

1368
00:43:22,960 --> 00:43:24,319
so that's something you could do and

1369
00:43:24,319 --> 00:43:26,160
it's it's a it's really a hands-on

1370
00:43:26,160 --> 00:43:27,839
workshop that you can follow along

1371
00:43:27,839 --> 00:43:30,640
um so you can check that out um you can

1372
00:43:30,640 --> 00:43:32,560
also pull data of interest from

1373
00:43:32,560 --> 00:43:35,040
like a host you have access to so this

1374
00:43:35,040 --> 00:43:36,560
is a tool that i wrote

1375
00:43:36,560 --> 00:43:39,520
called swift belt and it's written in

1376
00:43:39,520 --> 00:43:40,000
swift

1377
00:43:40,000 --> 00:43:42,319
so it's native to mac os and i called it

1378
00:43:42,319 --> 00:43:44,079
swift belt because i was inspired by

1379
00:43:44,079 --> 00:43:46,240
harm joy at spectre ops like his

1380
00:43:46,240 --> 00:43:48,560
seat belt tool on the windows side and

1381
00:43:48,560 --> 00:43:49,520
so

1382
00:43:49,520 --> 00:43:51,359
this is basically an enumerator that

1383
00:43:51,359 --> 00:43:53,760
uses api calls does not use any command

1384
00:43:53,760 --> 00:43:54,000
line

1385
00:43:54,000 --> 00:43:55,839
utilities and they can do things like

1386
00:43:55,839 --> 00:43:58,079
enumerate security tools on a system

1387
00:43:58,079 --> 00:43:59,920
look for your bash history browser

1388
00:43:59,920 --> 00:44:03,040
history launch agents clipboard content

1389
00:44:03,040 --> 00:44:04,800
see if slack is present and if it is

1390
00:44:04,800 --> 00:44:06,640
extract some slack data

1391
00:44:06,640 --> 00:44:09,040
and so uh you could actually for your op

1392
00:44:09,040 --> 00:44:09,839
have

1393
00:44:09,839 --> 00:44:11,599
this this type of capability

1394
00:44:11,599 --> 00:44:12,960
automatically execute

1395
00:44:12,960 --> 00:44:15,520
as soon as you get access um and have

1396
00:44:15,520 --> 00:44:17,440
that have it pull back for the operator

1397
00:44:17,440 --> 00:44:17,920
so

1398
00:44:17,920 --> 00:44:20,319
definitely take a look blue teams even

1399
00:44:20,319 --> 00:44:21,680
check it out and

1400
00:44:21,680 --> 00:44:23,599
see if there's anything like that the

1401
00:44:23,599 --> 00:44:25,040
only thing i saw that

1402
00:44:25,040 --> 00:44:27,440
that really detected is the apple

1403
00:44:27,440 --> 00:44:29,119
endpoint security framework

1404
00:44:29,119 --> 00:44:31,839
uh which definitely can log like file

1405
00:44:31,839 --> 00:44:33,760
accesses and reads

1406
00:44:33,760 --> 00:44:35,520
so it's all out of that activity but i

1407
00:44:35,520 --> 00:44:37,040
definitely recommend playing around with

1408
00:44:37,040 --> 00:44:39,680
it and getting familiar with it

1409
00:44:39,680 --> 00:44:42,319
also on a post exploitation side you can

1410
00:44:42,319 --> 00:44:43,920
see if os query is present

1411
00:44:43,920 --> 00:44:45,839
and if it's present you can use it from

1412
00:44:45,839 --> 00:44:47,839
an attacker perspective so

1413
00:44:47,839 --> 00:44:50,079
i also have a blog on this where i was

1414
00:44:50,079 --> 00:44:51,280
curious about this and

1415
00:44:51,280 --> 00:44:53,119
played around with it and built the

1416
00:44:53,119 --> 00:44:54,880
example into mac shell swift

1417
00:44:54,880 --> 00:44:56,800
where uh because i'm a big fan of

1418
00:44:56,800 --> 00:44:58,560
facebook's os query project

1419
00:44:58,560 --> 00:45:00,160
and for those that are not familiar it's

1420
00:45:00,160 --> 00:45:02,640
a way to ask questions of your remote

1421
00:45:02,640 --> 00:45:03,040
host

1422
00:45:03,040 --> 00:45:05,119
is cross-platform and it allows you to

1423
00:45:05,119 --> 00:45:07,040
ask questions such as like who last

1424
00:45:07,040 --> 00:45:07,839
logged in

1425
00:45:07,839 --> 00:45:10,240
or what running processes are on the

1426
00:45:10,240 --> 00:45:11,200
system or what's

1427
00:45:11,200 --> 00:45:13,599
the uh bash history things like that and

1428
00:45:13,599 --> 00:45:15,119
so i was curious like well i wonder if

1429
00:45:15,119 --> 00:45:17,520
an attacker could actually leverage it

1430
00:45:17,520 --> 00:45:20,640
just by invoking it remotely so i played

1431
00:45:20,640 --> 00:45:22,240
around with it and was able to get that

1432
00:45:22,240 --> 00:45:23,280
going

1433
00:45:23,280 --> 00:45:25,280
it does use command line utilities in

1434
00:45:25,280 --> 00:45:27,440
order to invoke it so it's detectable

1435
00:45:27,440 --> 00:45:28,079
that way

1436
00:45:28,079 --> 00:45:30,319
however my personal guess is that most

1437
00:45:30,319 --> 00:45:32,400
environments probably are not monitoring

1438
00:45:32,400 --> 00:45:34,560
os query invocations so probably will

1439
00:45:34,560 --> 00:45:35,920
not go detected

1440
00:45:35,920 --> 00:45:38,400
even though it's easily detectable but

1441
00:45:38,400 --> 00:45:39,520
my general rule

1442
00:45:39,520 --> 00:45:42,319
is it's pretty safe and uh the mac os

1443
00:45:42,319 --> 00:45:43,599
world as long as you stay off the

1444
00:45:43,599 --> 00:45:44,880
command line

1445
00:45:44,880 --> 00:45:48,640
you're pretty safe at this at this stage

1446
00:45:48,720 --> 00:45:51,440
um in terms of credentials you could uh

1447
00:45:51,440 --> 00:45:52,079
prompt

1448
00:45:52,079 --> 00:45:53,680
like for credentials using the osa

1449
00:45:53,680 --> 00:45:55,119
script binary which again

1450
00:45:55,119 --> 00:45:57,359
feeds into command line history or

1451
00:45:57,359 --> 00:45:58,880
alternatively you can

1452
00:45:58,880 --> 00:46:01,359
call the osa script or the ns apple

1453
00:46:01,359 --> 00:46:03,280
script class or even the osa kit

1454
00:46:03,280 --> 00:46:07,359
class in order to prompt without using

1455
00:46:07,359 --> 00:46:10,560
the osa script binary

1456
00:46:11,359 --> 00:46:14,079
around persistence a lot of techniques

1457
00:46:14,079 --> 00:46:15,920
out so sentinel one i'll just reference

1458
00:46:15,920 --> 00:46:16,800
their blog posts

1459
00:46:16,800 --> 00:46:19,760
as they step through a lot of the common

1460
00:46:19,760 --> 00:46:20,560
methods for

1461
00:46:20,560 --> 00:46:23,040
for uh persistence on mac os so i won't

1462
00:46:23,040 --> 00:46:24,480
jump through too many of these because i

1463
00:46:24,480 --> 00:46:25,680
know a lot of us are familiar with

1464
00:46:25,680 --> 00:46:27,280
launch agents and launch daemons and

1465
00:46:27,280 --> 00:46:28,319
cron jobs

1466
00:46:28,319 --> 00:46:30,880
uh configuration profiles is often i

1467
00:46:30,880 --> 00:46:32,960
learned this from thomas reed but a lot

1468
00:46:32,960 --> 00:46:34,400
of adware is using

1469
00:46:34,400 --> 00:46:36,319
config has been up to this point using

1470
00:46:36,319 --> 00:46:38,079
configuration profiles

1471
00:46:38,079 --> 00:46:41,119
in order to accomplish their objectives

1472
00:46:41,119 --> 00:46:44,240
so uh one of one of the aspects of

1473
00:46:44,240 --> 00:46:45,839
persistence i wanted to point out was

1474
00:46:45,839 --> 00:46:48,960
folder actions in a blog by cody thomas

1475
00:46:48,960 --> 00:46:50,480
that was the first place i'd heard about

1476
00:46:50,480 --> 00:46:52,400
it where you can basically

1477
00:46:52,400 --> 00:46:54,319
pick a folder and once the user

1478
00:46:54,319 --> 00:46:56,160
interacts with that folder you can set

1479
00:46:56,160 --> 00:46:58,240
it to run an applescript from disk

1480
00:46:58,240 --> 00:46:59,200
somewhere

1481
00:46:59,200 --> 00:47:01,440
so there's a lot of little caveats and

1482
00:47:01,440 --> 00:47:02,720
nuances to it but

1483
00:47:02,720 --> 00:47:04,880
it's a very interesting persistence

1484
00:47:04,880 --> 00:47:06,400
technique that i definitely recommend

1485
00:47:06,400 --> 00:47:08,960
you check out

1486
00:47:09,359 --> 00:47:10,960
um i won't spend too much time here

1487
00:47:10,960 --> 00:47:12,400
because we kind of talked about these as

1488
00:47:12,400 --> 00:47:13,040
well

1489
00:47:13,040 --> 00:47:14,960
what lateral movement tends to look like

1490
00:47:14,960 --> 00:47:16,319
in a mac os environment

1491
00:47:16,319 --> 00:47:19,280
via creds that are stolen or spraying

1492
00:47:19,280 --> 00:47:22,240
usernames and keys or passwords

1493
00:47:22,240 --> 00:47:24,720
so yeah we kind of covered this already

1494
00:47:24,720 --> 00:47:26,880
so next i'm going to talk to adversary

1495
00:47:26,880 --> 00:47:28,960
simulation and emulation uh the best

1496
00:47:28,960 --> 00:47:30,720
example that i've heard is from tim

1497
00:47:30,720 --> 00:47:32,079
malcolm vetter where

1498
00:47:32,079 --> 00:47:35,119
he um explained adversary emulation is

1499
00:47:35,119 --> 00:47:38,000
having a very specific threat profile

1500
00:47:38,000 --> 00:47:39,359
so it's like based on a threat

1501
00:47:39,359 --> 00:47:42,480
intelligence report a specific apt

1502
00:47:42,480 --> 00:47:45,440
actor and taking their ttps and

1503
00:47:45,440 --> 00:47:46,960
emulating them in your environment

1504
00:47:46,960 --> 00:47:49,280
basically being that adversary in your

1505
00:47:49,280 --> 00:47:50,559
environment and seeing how your

1506
00:47:50,559 --> 00:47:52,000
detections and response hold

1507
00:47:52,000 --> 00:47:54,559
up whereas adversary simulation does not

1508
00:47:54,559 --> 00:47:56,400
have a specific threat profile but a

1509
00:47:56,400 --> 00:47:56,800
more

1510
00:47:56,800 --> 00:47:59,440
general threat profile of what a capable

1511
00:47:59,440 --> 00:48:01,119
adversary would likely do

1512
00:48:01,119 --> 00:48:03,440
like what types of tactics and ttps

1513
00:48:03,440 --> 00:48:04,559
might they run

1514
00:48:04,559 --> 00:48:05,680
so i thought that was a really good

1515
00:48:05,680 --> 00:48:08,160
example and

1516
00:48:08,160 --> 00:48:11,599
even though today most threat intel data

1517
00:48:11,599 --> 00:48:12,720
is on windows

1518
00:48:12,720 --> 00:48:15,440
ttps i do believe that we can run

1519
00:48:15,440 --> 00:48:17,599
adversary emulations and simulations

1520
00:48:17,599 --> 00:48:20,960
for mac as well an example for an

1521
00:48:20,960 --> 00:48:23,440
emulation is i think you can emulate the

1522
00:48:23,440 --> 00:48:25,359
activity of known mac os malware

1523
00:48:25,359 --> 00:48:27,040
families like schlayer

1524
00:48:27,040 --> 00:48:28,800
even uh thomas reed has done a lot of

1525
00:48:28,800 --> 00:48:31,040
analysis around some adware campaigns

1526
00:48:31,040 --> 00:48:31,839
that

1527
00:48:31,839 --> 00:48:33,520
do some pretty nasty things that you may

1528
00:48:33,520 --> 00:48:35,280
want to emulate

1529
00:48:35,280 --> 00:48:36,880
so those are examples of what you could

1530
00:48:36,880 --> 00:48:38,160
pull from you could pull from patrick

1531
00:48:38,160 --> 00:48:38,800
wortl's

1532
00:48:38,800 --> 00:48:41,440
mac malware 2019 report and then in

1533
00:48:41,440 --> 00:48:42,880
terms of simulations

1534
00:48:42,880 --> 00:48:45,200
you can take thread intel reports and

1535
00:48:45,200 --> 00:48:46,319
basically create

1536
00:48:46,319 --> 00:48:48,640
a mac os equivalent as close as possible

1537
00:48:48,640 --> 00:48:51,200
to simulate that activity

1538
00:48:51,200 --> 00:48:52,880
so here's an example with the schlayer

1539
00:48:52,880 --> 00:48:54,880
campaign and this is actually from june

1540
00:48:54,880 --> 00:48:56,960
of this year from an integral report

1541
00:48:56,960 --> 00:48:58,960
but users were or people were getting

1542
00:48:58,960 --> 00:49:01,440
affected by google searching for videos

1543
00:49:01,440 --> 00:49:03,280
where they would find like a fake flash

1544
00:49:03,280 --> 00:49:04,960
outdated page

1545
00:49:04,960 --> 00:49:07,040
which would download a dmg it would have

1546
00:49:07,040 --> 00:49:09,839
like a picture with instructions on it

1547
00:49:09,839 --> 00:49:12,720
and basically instructions for them to

1548
00:49:12,720 --> 00:49:15,200
execute this file that looks like a an

1549
00:49:15,200 --> 00:49:16,160
app it has an app

1550
00:49:16,160 --> 00:49:18,800
like a flash app image but it's really a

1551
00:49:18,800 --> 00:49:19,680
shell script

1552
00:49:19,680 --> 00:49:22,559
and then once that script is executed it

1553
00:49:22,559 --> 00:49:24,079
drops a zip locally

1554
00:49:24,079 --> 00:49:26,240
in the temp directory and then inside of

1555
00:49:26,240 --> 00:49:27,280
that zip there is an

1556
00:49:27,280 --> 00:49:29,359
app that basically downloads the real

1557
00:49:29,359 --> 00:49:32,160
flash and downloads uh follow on malware

1558
00:49:32,160 --> 00:49:33,839
so you can see examples here of

1559
00:49:33,839 --> 00:49:36,240
what that looks like so if you were to

1560
00:49:36,240 --> 00:49:37,359
emulate that

1561
00:49:37,359 --> 00:49:40,319
exact uh malware family this is kind of

1562
00:49:40,319 --> 00:49:41,760
what one way you could do it you could

1563
00:49:41,760 --> 00:49:45,040
send an email with a link to a dmg

1564
00:49:45,040 --> 00:49:47,119
like entice the user to download the dmg

1565
00:49:47,119 --> 00:49:48,800
which and include like a picture with

1566
00:49:48,800 --> 00:49:49,760
instructions

1567
00:49:49,760 --> 00:49:52,079
have your shell script masquerading with

1568
00:49:52,079 --> 00:49:54,480
the flash icon and i think mdsec labs

1569
00:49:54,480 --> 00:49:56,000
did a really good write-up

1570
00:49:56,000 --> 00:49:59,200
on like file icon and file extension

1571
00:49:59,200 --> 00:50:01,520
tricks on mac os

1572
00:50:01,520 --> 00:50:04,000
so you could uh have them execute that

1573
00:50:04,000 --> 00:50:04,880
shell script

1574
00:50:04,880 --> 00:50:07,760
masqueraded as flash then have it

1575
00:50:07,760 --> 00:50:08,960
download a zip

1576
00:50:08,960 --> 00:50:11,440
locally to the machine which includes an

1577
00:50:11,440 --> 00:50:12,240
app package

1578
00:50:12,240 --> 00:50:14,559
that runs that downloads real flash and

1579
00:50:14,559 --> 00:50:15,839
then maybe you download

1580
00:50:15,839 --> 00:50:19,119
like some other c2 framework or some

1581
00:50:19,119 --> 00:50:20,720
other malware so that's an example you

1582
00:50:20,720 --> 00:50:22,319
could use to emulate

1583
00:50:22,319 --> 00:50:25,839
schlayer and then on the simulation side

1584
00:50:25,839 --> 00:50:27,200
as i mentioned

1585
00:50:27,200 --> 00:50:29,839
um since most threat until reports are

1586
00:50:29,839 --> 00:50:31,200
windows based

1587
00:50:31,200 --> 00:50:32,800
uh what i like to do is just try to

1588
00:50:32,800 --> 00:50:34,800
figure out how close on the mac side can

1589
00:50:34,800 --> 00:50:35,839
we get to it so

1590
00:50:35,839 --> 00:50:38,160
on the windows example might be like

1591
00:50:38,160 --> 00:50:40,000
office to cmd to powershell

1592
00:50:40,000 --> 00:50:42,640
maybe in mac you have office spawn then

1593
00:50:42,640 --> 00:50:43,359
sh

1594
00:50:43,359 --> 00:50:46,079
which then runs python or like prompting

1595
00:50:46,079 --> 00:50:47,119
with a fake prompt

1596
00:50:47,119 --> 00:50:49,040
on the windows side you're using a logon

1597
00:50:49,040 --> 00:50:51,359
screen api call but maybe

1598
00:50:51,359 --> 00:50:53,280
on the mac side you use osa script

1599
00:50:53,280 --> 00:50:55,280
basically to do the same thing

1600
00:50:55,280 --> 00:50:57,119
same with password spraying whereas in

1601
00:50:57,119 --> 00:50:59,119
windows environment you may spray over s

1602
00:50:59,119 --> 00:50:59,920
and b

1603
00:50:59,920 --> 00:51:02,319
here you'll spray over ssh so just very

1604
00:51:02,319 --> 00:51:03,839
rudimentary examples but

1605
00:51:03,839 --> 00:51:05,680
that's kind of my mentality when it

1606
00:51:05,680 --> 00:51:07,040
comes to simulation

1607
00:51:07,040 --> 00:51:10,160
like take these ttps and do a mac os

1608
00:51:10,160 --> 00:51:13,920
equivalent as close as possible to those

1609
00:51:13,920 --> 00:51:15,839
so next i'll look at some challenges and

1610
00:51:15,839 --> 00:51:18,400
opportunities specific to mac os

1611
00:51:18,400 --> 00:51:20,079
so here's a really cool chart from

1612
00:51:20,079 --> 00:51:21,839
howard oakley

1613
00:51:21,839 --> 00:51:24,000
he writes a lot of cool stuff from uh

1614
00:51:24,000 --> 00:51:25,920
for mac os from time to time so

1615
00:51:25,920 --> 00:51:27,280
here's a link where you can dig in

1616
00:51:27,280 --> 00:51:29,200
deeper also phil stokes

1617
00:51:29,200 --> 00:51:31,119
at sentinel one did a blog post and

1618
00:51:31,119 --> 00:51:32,880
essentially there's three components

1619
00:51:32,880 --> 00:51:35,119
three security components for mac os you

1620
00:51:35,119 --> 00:51:36,559
have your protect side which is your

1621
00:51:36,559 --> 00:51:39,200
signing your notarization gatekeeper

1622
00:51:39,200 --> 00:51:42,240
you have detect which is around uh like

1623
00:51:42,240 --> 00:51:44,480
yara rules for certain things blacklist

1624
00:51:44,480 --> 00:51:45,280
hashes

1625
00:51:45,280 --> 00:51:48,480
other stuff that apple threat analysts

1626
00:51:48,480 --> 00:51:49,520
are seeing

1627
00:51:49,520 --> 00:51:52,079
in a while and then you have your remove

1628
00:51:52,079 --> 00:51:52,800
which is your

1629
00:51:52,800 --> 00:51:56,000
malware removal tool application so it's

1630
00:51:56,000 --> 00:51:57,119
interesting you've got those three

1631
00:51:57,119 --> 00:51:57,920
components

1632
00:51:57,920 --> 00:51:59,760
and i will say for the detect side for

1633
00:51:59,760 --> 00:52:01,040
xprotect

1634
00:52:01,040 --> 00:52:03,040
that tends to be like stuff that they

1635
00:52:03,040 --> 00:52:04,319
have seen in a while so if you're

1636
00:52:04,319 --> 00:52:05,760
writing your own malware

1637
00:52:05,760 --> 00:52:07,440
i've never had any issues personally

1638
00:52:07,440 --> 00:52:09,200
with xprotect because again

1639
00:52:09,200 --> 00:52:11,440
it's not in wild so there's nothing for

1640
00:52:11,440 --> 00:52:14,480
it to really key in on

1641
00:52:15,040 --> 00:52:16,880
so let's talk a little bit quickly about

1642
00:52:16,880 --> 00:52:18,720
gatekeeper since i know time is running

1643
00:52:18,720 --> 00:52:19,520
short

1644
00:52:19,520 --> 00:52:21,920
the com.apple.quarantine attribute is

1645
00:52:21,920 --> 00:52:22,880
appended

1646
00:52:22,880 --> 00:52:24,720
by the operating system to any file

1647
00:52:24,720 --> 00:52:26,559
that's downloaded via the browser

1648
00:52:26,559 --> 00:52:28,640
and then gatekeeper checks certain file

1649
00:52:28,640 --> 00:52:30,960
types for that attribute and if that

1650
00:52:30,960 --> 00:52:32,559
attribute is present

1651
00:52:32,559 --> 00:52:34,880
it will check to see if that file has

1652
00:52:34,880 --> 00:52:37,359
been signed with a valid developer id

1653
00:52:37,359 --> 00:52:39,920
and for recent versions of mac it will

1654
00:52:39,920 --> 00:52:40,960
also check to see

1655
00:52:40,960 --> 00:52:44,079
if that file has been submitted and

1656
00:52:44,079 --> 00:52:44,480
passed

1657
00:52:44,480 --> 00:52:46,400
notarization or has like a ticket

1658
00:52:46,400 --> 00:52:48,400
notarization ticket staple to it

1659
00:52:48,400 --> 00:52:50,240
and if it passes both of those then it

1660
00:52:50,240 --> 00:52:52,480
will actually give the user a prompt to

1661
00:52:52,480 --> 00:52:53,440
say are you

1662
00:52:53,440 --> 00:52:55,599
um like do you want to run it or i

1663
00:52:55,599 --> 00:52:57,440
forgot the exact contents of the message

1664
00:52:57,440 --> 00:52:58,640
but um

1665
00:52:58,640 --> 00:53:00,079
so that's kind of a nutshell how

1666
00:53:00,079 --> 00:53:02,160
gatekeeper operates and it poses

1667
00:53:02,160 --> 00:53:03,200
challenges

1668
00:53:03,200 --> 00:53:05,119
for for red teams because eventually

1669
00:53:05,119 --> 00:53:07,040
like scripting languages that have been

1670
00:53:07,040 --> 00:53:08,640
exempt from gatekeeper

1671
00:53:08,640 --> 00:53:10,240
are are eventually going to be removed

1672
00:53:10,240 --> 00:53:12,160
from mac os and so you're going to have

1673
00:53:12,160 --> 00:53:14,000
to basically come with like objective

1674
00:53:14,000 --> 00:53:17,520
c base code or swift based tool um

1675
00:53:17,520 --> 00:53:19,599
which is gonna most likely if you're

1676
00:53:19,599 --> 00:53:21,200
looking to get a payload on the system

1677
00:53:21,200 --> 00:53:22,640
have to go through that process

1678
00:53:22,640 --> 00:53:24,480
which is why earlier i thought it was

1679
00:53:24,480 --> 00:53:26,240
very interesting about targeting

1680
00:53:26,240 --> 00:53:28,480
sas and federated apps where you don't

1681
00:53:28,480 --> 00:53:29,440
even need to touch

1682
00:53:29,440 --> 00:53:32,880
mac endpoints so

1683
00:53:32,880 --> 00:53:34,480
around the signing process here's an

1684
00:53:34,480 --> 00:53:36,240
example of what it might look like on a

1685
00:53:36,240 --> 00:53:37,520
red team side where

1686
00:53:37,520 --> 00:53:39,119
you create or use an email that you

1687
00:53:39,119 --> 00:53:41,040
already have create an apple id

1688
00:53:41,040 --> 00:53:43,040
use a phone number for two factor

1689
00:53:43,040 --> 00:53:44,800
verification or a device

1690
00:53:44,800 --> 00:53:46,400
uh separate device for two factor

1691
00:53:46,400 --> 00:53:48,640
authentication then you

1692
00:53:48,640 --> 00:53:50,000
get your apple developer account that

1693
00:53:50,000 --> 00:53:52,000
you pay 99 for

1694
00:53:52,000 --> 00:53:53,760
so you have two options there when

1695
00:53:53,760 --> 00:53:55,040
you're paying for that

1696
00:53:55,040 --> 00:53:56,800
if you're using a like a credit card

1697
00:53:56,800 --> 00:53:58,319
that's not tied to your username

1698
00:53:58,319 --> 00:54:01,040
apple will take your money yes they will

1699
00:54:01,040 --> 00:54:01,760
and uh

1700
00:54:01,760 --> 00:54:03,680
and still kind of hold your process and

1701
00:54:03,680 --> 00:54:04,880
ask that you send in

1702
00:54:04,880 --> 00:54:07,440
like a valid uh identification like

1703
00:54:07,440 --> 00:54:09,119
driver's license

1704
00:54:09,119 --> 00:54:11,839
the other side of it is you use a bank

1705
00:54:11,839 --> 00:54:13,520
issue card with your identity

1706
00:54:13,520 --> 00:54:15,839
you get it signed but you run your op

1707
00:54:15,839 --> 00:54:16,640
blue team

1708
00:54:16,640 --> 00:54:18,800
finds it they analyze it and then they

1709
00:54:18,800 --> 00:54:20,480
see your developer id so they know it's

1710
00:54:20,480 --> 00:54:20,800
you

1711
00:54:20,800 --> 00:54:22,480
so it's kind of a lose-lose scenario

1712
00:54:22,480 --> 00:54:25,359
here another approach is you could

1713
00:54:25,359 --> 00:54:29,040
register an llc and use that for your

1714
00:54:29,040 --> 00:54:31,040
signing which you could do but it's a

1715
00:54:31,040 --> 00:54:32,480
lot of work up front

1716
00:54:32,480 --> 00:54:35,520
and you still may hit the same like

1717
00:54:35,520 --> 00:54:38,400
snafu with it around the identity part

1718
00:54:38,400 --> 00:54:40,000
if the identities don't match

1719
00:54:40,000 --> 00:54:42,000
so it just has got to be real careful

1720
00:54:42,000 --> 00:54:43,680
with that but that's this is another

1721
00:54:43,680 --> 00:54:46,000
option as well

1722
00:54:46,000 --> 00:54:48,000
so again you have to sign and notarize

1723
00:54:48,000 --> 00:54:49,520
and then there's other challenges too

1724
00:54:49,520 --> 00:54:50,079
like

1725
00:54:50,079 --> 00:54:52,079
hardened runtime is required for

1726
00:54:52,079 --> 00:54:53,440
notarization

1727
00:54:53,440 --> 00:54:56,079
um sandboxing app transport security

1728
00:54:56,079 --> 00:54:57,119
kind of determines

1729
00:54:57,119 --> 00:54:58,960
once your app is running what it can

1730
00:54:58,960 --> 00:55:00,400
communicate out to

1731
00:55:00,400 --> 00:55:02,000
so there's different layers there that

1732
00:55:02,000 --> 00:55:03,680
are challenging

1733
00:55:03,680 --> 00:55:05,920
so a real quick area around notarization

1734
00:55:05,920 --> 00:55:07,040
testing

1735
00:55:07,040 --> 00:55:10,160
so i did a couple tests and um i just

1736
00:55:10,160 --> 00:55:11,280
want to share the results with those

1737
00:55:11,280 --> 00:55:12,000
with you

1738
00:55:12,000 --> 00:55:13,920
of those tests one i built the red team

1739
00:55:13,920 --> 00:55:15,440
app that stole creds and launched

1740
00:55:15,440 --> 00:55:16,319
appfail

1741
00:55:16,319 --> 00:55:17,839
submitted it for notarization it was

1742
00:55:17,839 --> 00:55:20,079
successfully notarized in five minutes

1743
00:55:20,079 --> 00:55:24,000
but it was revoked about a week later so

1744
00:55:24,000 --> 00:55:26,079
basically i had a week to use it which

1745
00:55:26,079 --> 00:55:27,520
was really interesting and it showed me

1746
00:55:27,520 --> 00:55:29,359
about the notarization process about

1747
00:55:29,359 --> 00:55:30,480
basically how

1748
00:55:30,480 --> 00:55:32,160
stuff's notarized up front and there's

1749
00:55:32,160 --> 00:55:34,319
some kind of back-end check after the

1750
00:55:34,319 --> 00:55:36,160
notarization

1751
00:55:36,160 --> 00:55:38,079
here's an example of the code so you can

1752
00:55:38,079 --> 00:55:40,079
see it's clearly a credential stealer

1753
00:55:40,079 --> 00:55:43,359
username and password a second app i

1754
00:55:43,359 --> 00:55:44,480
wrote this time

1755
00:55:44,480 --> 00:55:46,000
took out the credential stealing code

1756
00:55:46,000 --> 00:55:48,559
and just had to execute app fail in

1757
00:55:48,559 --> 00:55:50,079
other words just the jxa

1758
00:55:50,079 --> 00:55:53,680
app this time submitted for notarization

1759
00:55:53,680 --> 00:55:55,599
notarized in minutes developer account

1760
00:55:55,599 --> 00:55:57,520
was never revoked so this is that same

1761
00:55:57,520 --> 00:55:58,960
screenshot from earlier

1762
00:55:58,960 --> 00:56:00,400
where there's not much to key in on

1763
00:56:00,400 --> 00:56:02,079
because all the code post exploitation

1764
00:56:02,079 --> 00:56:03,920
code is server side

1765
00:56:03,920 --> 00:56:06,240
so again jxa apps just wanted to show

1766
00:56:06,240 --> 00:56:07,440
you an example there

1767
00:56:07,440 --> 00:56:09,839
and um and basically if you want to

1768
00:56:09,839 --> 00:56:10,960
build your own

1769
00:56:10,960 --> 00:56:14,079
like jxa c2 application and not use what

1770
00:56:14,079 --> 00:56:16,000
app fill has you'll need to be strong

1771
00:56:16,000 --> 00:56:18,000
or pretty good in objective c because

1772
00:56:18,000 --> 00:56:19,119
right now

1773
00:56:19,119 --> 00:56:21,200
there is a bridge between javascript and

1774
00:56:21,200 --> 00:56:23,119
objective c but a similar bridge with

1775
00:56:23,119 --> 00:56:24,400
swift has not yet been

1776
00:56:24,400 --> 00:56:27,680
established to my knowledge so some

1777
00:56:27,680 --> 00:56:28,240
general

1778
00:56:28,240 --> 00:56:30,319
defensive recommendations as we close

1779
00:56:30,319 --> 00:56:32,480
out uh some people just i wanted to

1780
00:56:32,480 --> 00:56:33,200
recommend you

1781
00:56:33,200 --> 00:56:35,040
keep an eye on patrick ward over chi

1782
00:56:35,040 --> 00:56:36,319
cyrus thomas reed

1783
00:56:36,319 --> 00:56:38,400
sarah edwards on the defensive side

1784
00:56:38,400 --> 00:56:40,160
they're doing a lot of cool work

1785
00:56:40,160 --> 00:56:41,599
definitely check them out on the

1786
00:56:41,599 --> 00:56:44,799
offensive side the evil bit chris ross

1787
00:56:44,799 --> 00:56:48,640
cody thomas phil stokes check them out

1788
00:56:48,640 --> 00:56:50,960
i have blog that i put up earlier this

1789
00:56:50,960 --> 00:56:52,960
year on mac os detections like some bass

1790
00:56:52,960 --> 00:56:54,319
level detections

1791
00:56:54,319 --> 00:56:56,559
um that thing should be in any mac os

1792
00:56:56,559 --> 00:56:58,640
environment so check that out i also did

1793
00:56:58,640 --> 00:57:00,400
a test with apple endpoint security

1794
00:57:00,400 --> 00:57:01,040
framework

1795
00:57:01,040 --> 00:57:02,640
where i ran the tool that i wrote mac

1796
00:57:02,640 --> 00:57:04,640
shield swift against it and did various

1797
00:57:04,640 --> 00:57:06,400
post exploitation tasks

1798
00:57:06,400 --> 00:57:08,319
just to see what was captured so you can

1799
00:57:08,319 --> 00:57:09,839
see that blog there

1800
00:57:09,839 --> 00:57:11,839
i also recommend monitoring jamf 80

1801
00:57:11,839 --> 00:57:14,640
groups ensuring you have 80 second

1802
00:57:14,640 --> 00:57:17,040
segmentation or segregation where i'd

1803
00:57:17,040 --> 00:57:19,119
assume your ads gonna get compromised

1804
00:57:19,119 --> 00:57:20,559
but when it does get compromised you

1805
00:57:20,559 --> 00:57:22,559
don't want everything else all the other

1806
00:57:22,559 --> 00:57:24,079
cards to fall

1807
00:57:24,079 --> 00:57:27,200
also if not uh needed don't enable ssh

1808
00:57:27,200 --> 00:57:30,720
on every managed mac by default

1809
00:57:30,720 --> 00:57:32,319
if you're using remote management i

1810
00:57:32,319 --> 00:57:34,480
recommend randomizing the password as we

1811
00:57:34,480 --> 00:57:35,680
talked about earlier

1812
00:57:35,680 --> 00:57:37,520
and then separating your keys and tokens

1813
00:57:37,520 --> 00:57:39,200
between your environments

1814
00:57:39,200 --> 00:57:41,839
also getting visibility into cloud abuse

1815
00:57:41,839 --> 00:57:42,720
so like if

1816
00:57:42,720 --> 00:57:45,200
certain very powerful cloud permissions

1817
00:57:45,200 --> 00:57:46,559
are assigned

1818
00:57:46,559 --> 00:57:48,000
like make sure you can detect that in

1819
00:57:48,000 --> 00:57:51,119
your environment so in summary

1820
00:57:51,119 --> 00:57:53,359
edr is getting better for mac os but

1821
00:57:53,359 --> 00:57:54,880
gatekeeper

1822
00:57:54,880 --> 00:57:56,559
continues to pose challenges on the red

1823
00:57:56,559 --> 00:57:58,720
team side which is good

1824
00:57:58,720 --> 00:58:01,119
swift is easier to learn but i'd say

1825
00:58:01,119 --> 00:58:01,920
objective c

1826
00:58:01,920 --> 00:58:03,839
is more beneficial for the time being

1827
00:58:03,839 --> 00:58:05,760
especially around a reason for

1828
00:58:05,760 --> 00:58:08,799
jxa and objective c having a bridge with

1829
00:58:08,799 --> 00:58:10,880
javascript where swift is not even

1830
00:58:10,880 --> 00:58:12,960
though i enjoy the swift syntax a bit

1831
00:58:12,960 --> 00:58:14,480
better

1832
00:58:14,480 --> 00:58:16,640
again targeting federated login services

1833
00:58:16,640 --> 00:58:18,000
can be even more impactful than

1834
00:58:18,000 --> 00:58:19,680
targeting mac endpoints

1835
00:58:19,680 --> 00:58:21,599
and you can do emulations and

1836
00:58:21,599 --> 00:58:24,000
simulations in mac os environments

1837
00:58:24,000 --> 00:58:25,760
basically just as you can in windows

1838
00:58:25,760 --> 00:58:27,119
environments as well

1839
00:58:27,119 --> 00:58:29,520
just have to kind of change it and adopt

1840
00:58:29,520 --> 00:58:31,599
it

1841
00:58:31,920 --> 00:58:34,400
see here resources a bunch of different

1842
00:58:34,400 --> 00:58:36,079
resources so check these out when you

1843
00:58:36,079 --> 00:58:37,280
have time

1844
00:58:37,280 --> 00:58:38,720
a lot of different articles a lot of

1845
00:58:38,720 --> 00:58:40,480
cool people doing

1846
00:58:40,480 --> 00:58:42,160
some interesting work in the mac os

1847
00:58:42,160 --> 00:58:43,680
space

1848
00:58:43,680 --> 00:58:46,079
so thank you for your time again omar i

1849
00:58:46,079 --> 00:58:47,680
appreciate you and the team

1850
00:58:47,680 --> 00:58:50,079
giving me the opportunity and i'll be on

1851
00:58:50,079 --> 00:58:50,880
twitter

1852
00:58:50,880 --> 00:58:52,640
and on discord for anybody who has

1853
00:58:52,640 --> 00:58:56,240
questions feel free to reach out

