1
00:00:19,519 --> 00:00:21,990
okay thank you very much

2
00:00:21,990 --> 00:00:25,380
appreciate you tuning in for this this

3
00:00:25,380 --> 00:00:27,240
is a little bit about me to start off

4
00:00:27,240 --> 00:00:31,230
with I've been working in computers for

5
00:00:31,230 --> 00:00:32,460
a really long time

6
00:00:32,460 --> 00:00:35,310
basically when I was 15 years old I ran

7
00:00:35,310 --> 00:00:37,320
tape backup on all tricks and VMs

8
00:00:37,320 --> 00:00:39,750
systems and basically had this kid that

9
00:00:39,750 --> 00:00:42,300
they brought in after you know the work

10
00:00:42,300 --> 00:00:45,000
day was over to run tape literally run

11
00:00:45,000 --> 00:00:48,450
tape to make backups I've been working

12
00:00:48,450 --> 00:00:51,240
in operating systems and other

13
00:00:51,240 --> 00:00:54,390
components of information security for a

14
00:00:54,390 --> 00:00:57,720
a while and this is entailed a number of

15
00:00:57,720 --> 00:00:59,280
different platforms initially was

16
00:00:59,280 --> 00:01:01,410
blackberry there were no Kia Symbian

17
00:01:01,410 --> 00:01:05,218
stuff dealt with iOS platforms a little

18
00:01:05,218 --> 00:01:07,499
bit of Windows Phone that was kind of a

19
00:01:07,499 --> 00:01:10,049
flash in the pan anyway Android as well

20
00:01:10,049 --> 00:01:13,380
I've worked in the educational sector US

21
00:01:13,380 --> 00:01:15,560
government US Department of Defense

22
00:01:15,560 --> 00:01:17,700
development environments financial

23
00:01:17,700 --> 00:01:21,350
companies software development basically

24
00:01:21,350 --> 00:01:24,929
telecommunications providers ISPs you've

25
00:01:24,929 --> 00:01:26,390
worked for a lot of different companies

26
00:01:26,390 --> 00:01:28,770
essentially always as a consultant

27
00:01:28,770 --> 00:01:31,289
that's pretty much the environment that

28
00:01:31,289 --> 00:01:34,530
I've always been in I wrote a class on

29
00:01:34,530 --> 00:01:36,780
security operations and mobile is just a

30
00:01:36,780 --> 00:01:38,009
small part of that but it's an area

31
00:01:38,009 --> 00:01:40,139
where I've consistently done some some

32
00:01:40,139 --> 00:01:44,159
work basically for sans I teach a number

33
00:01:44,159 --> 00:01:46,259
of classes of taught at varying times

34
00:01:46,259 --> 00:01:49,950
their 401 their 503 their 504 or their

35
00:01:49,950 --> 00:01:53,729
560 the 511 and if you don't know what

36
00:01:53,729 --> 00:01:55,469
these numbers mean it doesn't matter as

37
00:01:55,469 --> 00:01:57,749
much the most important one and relevant

38
00:01:57,749 --> 00:01:59,490
to this particular class is the sec

39
00:01:59,490 --> 00:02:02,999
security of 575 which is mobile device

40
00:02:02,999 --> 00:02:05,219
pentesting I've also taught the mobile

41
00:02:05,219 --> 00:02:08,158
forensics class you know essentially

42
00:02:08,158 --> 00:02:10,378
that the reason why I'm telling you

43
00:02:10,378 --> 00:02:12,720
these things about me is to to explain

44
00:02:12,720 --> 00:02:13,770
why I've got some pretty

45
00:02:13,770 --> 00:02:15,930
strong opinions on the topic and some of

46
00:02:15,930 --> 00:02:17,790
the various aspects of what I'm going to

47
00:02:17,790 --> 00:02:19,680
talk about and maybe don't always

48
00:02:19,680 --> 00:02:22,800
exactly substantiate my opinion I tried

49
00:02:22,800 --> 00:02:24,630
to I tried to provide references and

50
00:02:24,630 --> 00:02:25,620
there's a lot of references in the

51
00:02:25,620 --> 00:02:26,820
material and you'd be able to download

52
00:02:26,820 --> 00:02:29,040
this content they also did a different

53
00:02:29,040 --> 00:02:31,080
talk which is kind of like the opposite

54
00:02:31,080 --> 00:02:32,420
side of this and it was more or

55
00:02:32,420 --> 00:02:34,530
institutionally focused and if you're

56
00:02:34,530 --> 00:02:38,490
interested in what the the defensive

57
00:02:38,490 --> 00:02:40,440
typography is of the mobile device

58
00:02:40,440 --> 00:02:42,900
infrastructure you can go to this sock

59
00:02:42,900 --> 00:02:47,160
class.com slash Prez and the the link

60
00:02:47,160 --> 00:02:49,800
there at the this time because I changed

61
00:02:49,800 --> 00:02:51,390
this particular directory pretty

62
00:02:51,390 --> 00:02:53,730
frequently as I do new presentations but

63
00:02:53,730 --> 00:02:56,490
the current link for this is the idea of

64
00:02:56,490 --> 00:03:01,110
the defensive mobile typography and so I

65
00:03:01,110 --> 00:03:02,730
talked about the attack surface and this

66
00:03:02,730 --> 00:03:04,470
is basically an excerpt from this

67
00:03:04,470 --> 00:03:06,210
particular slide is an excerpt from that

68
00:03:06,210 --> 00:03:08,370
talk just so you get an understanding of

69
00:03:08,370 --> 00:03:11,070
the full attack surface it's the

70
00:03:11,070 --> 00:03:12,660
hardware itself all the firmware the

71
00:03:12,660 --> 00:03:14,550
operating system component of it the

72
00:03:14,550 --> 00:03:16,620
multihomed network connectivity as you

73
00:03:16,620 --> 00:03:19,620
move from Wi-Fi on to cellular networks

74
00:03:19,620 --> 00:03:22,280
and then all the other components of the

75
00:03:22,280 --> 00:03:26,730
device in terms of you know NFC USB

76
00:03:26,730 --> 00:03:28,470
connections lightning bolt connections

77
00:03:28,470 --> 00:03:30,420
they're all the different radio of

78
00:03:30,420 --> 00:03:33,870
frequency connections bluetooth included

79
00:03:33,870 --> 00:03:35,700
in that the operating system of the

80
00:03:35,700 --> 00:03:38,580
device itself the applications which are

81
00:03:38,580 --> 00:03:42,180
installed on the device and the user

82
00:03:42,180 --> 00:03:45,000
operating the device that's the attack

83
00:03:45,000 --> 00:03:47,160
surface now for this particular talk I'm

84
00:03:47,160 --> 00:03:50,660
really focusing more on a very specific

85
00:03:50,660 --> 00:03:53,760
component of that attack surface related

86
00:03:53,760 --> 00:03:58,440
to to to applications and the title of

87
00:03:58,440 --> 00:04:00,090
this talk is kind of strange vampirism

88
00:04:00,090 --> 00:04:02,400
and the donut economy the idea of that

89
00:04:02,400 --> 00:04:06,480
is you have mobile devices because

90
00:04:06,480 --> 00:04:08,010
they're very useful to you

91
00:04:08,010 --> 00:04:10,260
they've been constructed to be useful to

92
00:04:10,260 --> 00:04:12,450
you but they've also been constructed in

93
00:04:12,450 --> 00:04:14,810
order to put you on a treadmill of

94
00:04:14,810 --> 00:04:18,329
providing your data to the platform and

95
00:04:18,329 --> 00:04:21,149
the infrastructure for these mobile

96
00:04:21,149 --> 00:04:24,410
devices so that you are fueling that

97
00:04:24,410 --> 00:04:27,360
particular system okay and that's

98
00:04:27,360 --> 00:04:29,849
fine so long as you're aware of that so

99
00:04:29,849 --> 00:04:31,379
long as you you know that that's what it

100
00:04:31,379 --> 00:04:34,319
is that's fine don't eat all the

101
00:04:34,319 --> 00:04:38,099
doughnuts right just have one I mean be

102
00:04:38,099 --> 00:04:40,349
careful about eating too many because

103
00:04:40,349 --> 00:04:42,270
they taste really good but if you eat

104
00:04:42,270 --> 00:04:44,969
too many doughnuts you're going to make

105
00:04:44,969 --> 00:04:46,949
yourself sick you're going to end up

106
00:04:46,949 --> 00:04:48,780
causing a problem for yourself it's not

107
00:04:48,780 --> 00:04:50,639
the one doughnut one day it's the every

108
00:04:50,639 --> 00:04:52,680
doughnut every day that ends up being

109
00:04:52,680 --> 00:04:55,169
unhealthy okay and they taste great and

110
00:04:55,169 --> 00:04:57,479
if you're at all like me having one

111
00:04:57,479 --> 00:04:59,039
doughnuts actually kind of an impossible

112
00:04:59,039 --> 00:05:01,680
thing I can have zero doughnuts or I can

113
00:05:01,680 --> 00:05:04,319
have twelve to twenty eight it's like

114
00:05:04,319 --> 00:05:06,810
very hard for me to to have only one

115
00:05:06,810 --> 00:05:08,669
doughnut if there's a box of doughnuts

116
00:05:08,669 --> 00:05:11,879
there so this talk is really about the

117
00:05:11,879 --> 00:05:13,680
not-so-good habits that come along with

118
00:05:13,680 --> 00:05:15,569
mobile devices right the idea of being

119
00:05:15,569 --> 00:05:17,789
always connected is an incredible

120
00:05:17,789 --> 00:05:19,620
enabler for a lot of people and and at

121
00:05:19,620 --> 00:05:21,419
the same time it creates circumstances

122
00:05:21,419 --> 00:05:25,680
of distraction from focus a human

123
00:05:25,680 --> 00:05:27,870
experience of isolation human experience

124
00:05:27,870 --> 00:05:31,460
and expression of narcissism the idea of

125
00:05:31,460 --> 00:05:33,779
inconsistency of people adopt different

126
00:05:33,779 --> 00:05:36,060
personas depending upon the context or

127
00:05:36,060 --> 00:05:38,639
use that they're actually expressing for

128
00:05:38,639 --> 00:05:40,560
that particular mobile device which also

129
00:05:40,560 --> 00:05:42,479
potentially lends itself to fraud and

130
00:05:42,479 --> 00:05:46,490
theft and other sort of bad behaviors

131
00:05:46,490 --> 00:05:49,379
morally I consider you know fraud and

132
00:05:49,379 --> 00:05:53,699
theft morally objectionable in terms of

133
00:05:53,699 --> 00:05:57,750
this you also have governments and

134
00:05:57,750 --> 00:06:01,139
corporations who are leveraging mobile

135
00:06:01,139 --> 00:06:04,409
devices and the rich amount of data that

136
00:06:04,409 --> 00:06:06,990
they have present in order to to watch

137
00:06:06,990 --> 00:06:09,659
you to track you this is eavesdropping

138
00:06:09,659 --> 00:06:11,849
on your communication in order to

139
00:06:11,849 --> 00:06:15,599
deliver targeted advertisements because

140
00:06:15,599 --> 00:06:17,520
that's part of what this ecosystem is

141
00:06:17,520 --> 00:06:21,419
okay and so that behavior is encouraged

142
00:06:21,419 --> 00:06:23,250
in many ways by a lot of these

143
00:06:23,250 --> 00:06:25,789
corporations and governmental entities

144
00:06:25,789 --> 00:06:27,779
the other part of this is that it

145
00:06:27,779 --> 00:06:30,870
creates an opportunity for social or

146
00:06:30,870 --> 00:06:34,500
societal manipulation which ultimately

147
00:06:34,500 --> 00:06:37,139
actually factors into geopolitical

148
00:06:37,139 --> 00:06:39,750
stability now hopefully what's being

149
00:06:39,750 --> 00:06:40,390
created

150
00:06:40,390 --> 00:06:42,370
is geopolitical stability and equality

151
00:06:42,370 --> 00:06:44,860
and people having the assets that they

152
00:06:44,860 --> 00:06:47,430
need in order to do the things that

153
00:06:47,430 --> 00:06:50,020
everybody wants to do that's sort of my

154
00:06:50,020 --> 00:06:51,640
optimistic view of the way that the

155
00:06:51,640 --> 00:06:52,990
world should be you can disagree with

156
00:06:52,990 --> 00:06:56,410
that that's fine but this is the the

157
00:06:56,410 --> 00:06:58,000
approach that I have is that hopefully

158
00:06:58,000 --> 00:06:59,590
these things are being used for good

159
00:06:59,590 --> 00:07:01,480
however the danger is that they might be

160
00:07:01,480 --> 00:07:04,060
used for bad and so I'm explaining a lot

161
00:07:04,060 --> 00:07:07,270
of this stuff to you with the intention

162
00:07:07,270 --> 00:07:08,980
that you use it at least to defend

163
00:07:08,980 --> 00:07:11,380
yourself and your own interests and

164
00:07:11,380 --> 00:07:14,170
honestly even if those interests are you

165
00:07:14,170 --> 00:07:16,180
know contrary to what I think is the

166
00:07:16,180 --> 00:07:17,650
right thing I don't presume to know

167
00:07:17,650 --> 00:07:20,470
what's good for you good so my opinion

168
00:07:20,470 --> 00:07:22,420
and I'm going to start off with some

169
00:07:22,420 --> 00:07:23,890
opinion based things before I get into

170
00:07:23,890 --> 00:07:25,450
the factual details of how to actually

171
00:07:25,450 --> 00:07:27,340
do some of the work that I'm encouraging

172
00:07:27,340 --> 00:07:30,610
you to do my opinion is iOS has a

173
00:07:30,610 --> 00:07:33,850
superior security architecture and this

174
00:07:33,850 --> 00:07:36,850
is based on the fact that the iOS

175
00:07:36,850 --> 00:07:40,690
ecosystem is more restrictive than

176
00:07:40,690 --> 00:07:45,490
Android so the restrictions also entail

177
00:07:45,490 --> 00:07:47,620
the fact that the the company which

178
00:07:47,620 --> 00:07:50,800
controls this ecosystem Apple really

179
00:07:50,800 --> 00:07:53,890
supports only about ten devices for iOS

180
00:07:53,890 --> 00:07:56,260
at any given moment in time and you can

181
00:07:56,260 --> 00:07:58,150
go look at iOS support matrix and see

182
00:07:58,150 --> 00:07:59,980
the see the currently supported devices

183
00:07:59,980 --> 00:08:02,200
but rough water of magnitude and it's

184
00:08:02,200 --> 00:08:04,420
it's pretty close to this about ten

185
00:08:04,420 --> 00:08:07,090
mobile devices are supported at any

186
00:08:07,090 --> 00:08:09,130
given time whereas the Android operating

187
00:08:09,130 --> 00:08:12,100
system supports about a thousand

188
00:08:12,100 --> 00:08:14,680
different devices ref word of magnitude

189
00:08:14,680 --> 00:08:16,420
if I had a count I could probably come

190
00:08:16,420 --> 00:08:17,770
up with a thousand but it would take me

191
00:08:17,770 --> 00:08:19,930
a while terms of different hardware's

192
00:08:19,930 --> 00:08:22,990
which are supported by the Android

193
00:08:22,990 --> 00:08:25,060
operating system at any given moment in

194
00:08:25,060 --> 00:08:27,580
time now in addition to the fact that we

195
00:08:27,580 --> 00:08:29,410
have a restriction of the amount of

196
00:08:29,410 --> 00:08:31,480
hardware that it runs on there's

197
00:08:31,480 --> 00:08:33,130
actually a single company which largely

198
00:08:33,130 --> 00:08:35,350
controls the ecosystem Apple does and

199
00:08:35,350 --> 00:08:37,570
they actually have a very restrictive

200
00:08:37,570 --> 00:08:39,280
security posture this is part of their

201
00:08:39,280 --> 00:08:41,289
approach to things and I'll explain why

202
00:08:41,289 --> 00:08:43,030
I think that is in a couple of slides

203
00:08:43,030 --> 00:08:45,400
and they basically control the hardware

204
00:08:45,400 --> 00:08:47,230
design the hardware manufacturer the

205
00:08:47,230 --> 00:08:48,970
operating system production and yes I

206
00:08:48,970 --> 00:08:50,470
know it's based on a open source

207
00:08:50,470 --> 00:08:52,210
operating system but they implemented

208
00:08:52,210 --> 00:08:53,670
specifically

209
00:08:53,670 --> 00:08:55,680
and all of the apps need to be vetted

210
00:08:55,680 --> 00:08:57,180
before they're delivered and you can

211
00:08:57,180 --> 00:09:02,370
only get an app from them and case in

212
00:09:02,370 --> 00:09:05,340
point it is in based on the research

213
00:09:05,340 --> 00:09:07,310
that I've done the world's largest

214
00:09:07,310 --> 00:09:11,670
application whitelisting deployment from

215
00:09:11,670 --> 00:09:14,070
an operating system perspective 1.5

216
00:09:14,070 --> 00:09:16,800
billion devices globally which actually

217
00:09:16,800 --> 00:09:19,020
deploy digital signature restriction for

218
00:09:19,020 --> 00:09:21,540
execution for any application which

219
00:09:21,540 --> 00:09:23,460
attempts to run on that particular

220
00:09:23,460 --> 00:09:25,140
operating system I don't know of any

221
00:09:25,140 --> 00:09:27,540
other and I've looked I don't know of

222
00:09:27,540 --> 00:09:30,600
any other instances of an operating

223
00:09:30,600 --> 00:09:33,930
system with 1.5 billion devices which is

224
00:09:33,930 --> 00:09:36,590
currently using digital signatures to

225
00:09:36,590 --> 00:09:41,030
extremely restrictive lis control which

226
00:09:41,030 --> 00:09:43,200
programs are authorized to instantiate

227
00:09:43,200 --> 00:09:45,390
on that particular instance now Android

228
00:09:45,390 --> 00:09:47,520
provides greater Liberty and that comes

229
00:09:47,520 --> 00:09:50,640
with more responsibility you have to be

230
00:09:50,640 --> 00:09:52,200
much more careful when you're running op

231
00:09:52,200 --> 00:09:53,940
or Android if you choose to run that as

232
00:09:53,940 --> 00:09:55,710
your operating system there are some

233
00:09:55,710 --> 00:09:57,630
vendors who will provide a phone which

234
00:09:57,630 --> 00:09:59,630
is compiled with security restrictions

235
00:09:59,630 --> 00:10:01,890
available to you Copperhead OS and

236
00:10:01,890 --> 00:10:05,040
silent circle are two of them that are

237
00:10:05,040 --> 00:10:08,910
you know largely consumer oriented there

238
00:10:08,910 --> 00:10:10,440
are others that are out there that are

239
00:10:10,440 --> 00:10:12,810
only exclusively focused on businesses

240
00:10:12,810 --> 00:10:15,300
but you could go by the Copperhead os

241
00:10:15,300 --> 00:10:17,760
pixel you know whatever the latest is

242
00:10:17,760 --> 00:10:19,260
that they're supporting same for the

243
00:10:19,260 --> 00:10:21,750
silent circle now what's also

244
00:10:21,750 --> 00:10:23,340
interesting about the Zico system for

245
00:10:23,340 --> 00:10:25,650
Android is that the Android open source

246
00:10:25,650 --> 00:10:27,630
project and it really isn't an open

247
00:10:27,630 --> 00:10:29,790
source project but it's it's something

248
00:10:29,790 --> 00:10:32,880
that is in their name they don't

249
00:10:32,880 --> 00:10:34,620
actually control the operating system to

250
00:10:34,620 --> 00:10:36,300
degree to the degree that it would

251
00:10:36,300 --> 00:10:37,920
prevent someone else from co-opting the

252
00:10:37,920 --> 00:10:40,620
operating system and redeploying it in a

253
00:10:40,620 --> 00:10:42,720
different channel and Amazon is a good

254
00:10:42,720 --> 00:10:45,510
example of this right and so they Amazon

255
00:10:45,510 --> 00:10:47,460
supports their version and flavor of it

256
00:10:47,460 --> 00:10:49,140
they cut out all the Google Play Store

257
00:10:49,140 --> 00:10:50,970
stuff and you know what that's part of

258
00:10:50,970 --> 00:10:52,380
the ecosystem that's the way that it's

259
00:10:52,380 --> 00:10:54,630
designed and this allows for substantial

260
00:10:54,630 --> 00:10:57,870
variation and a lot of development for

261
00:10:57,870 --> 00:10:59,430
the hardware because if someone says

262
00:10:59,430 --> 00:11:01,050
well I need this thing to change in the

263
00:11:01,050 --> 00:11:02,490
operating system to be able to run that

264
00:11:02,490 --> 00:11:03,900
Android on this particular piece of

265
00:11:03,900 --> 00:11:07,040
hardware good go ahead and do it

266
00:11:07,040 --> 00:11:09,470
it isn't truly open-source it's pretty

267
00:11:09,470 --> 00:11:11,000
close it leverages a lot of open-source

268
00:11:11,000 --> 00:11:12,980
products but there are things which are

269
00:11:12,980 --> 00:11:15,199
not truly open-source and if you go look

270
00:11:15,199 --> 00:11:17,329
at the source there's a lot of binary

271
00:11:17,329 --> 00:11:22,820
blob type stuff that isn't open now that

272
00:11:22,820 --> 00:11:24,860
being said there is a lot of open source

273
00:11:24,860 --> 00:11:26,420
in there it's just not a hundred percent

274
00:11:26,420 --> 00:11:29,870
open source from a project so my opinion

275
00:11:29,870 --> 00:11:31,790
still in the Christmas opinions section

276
00:11:31,790 --> 00:11:33,949
my opinion is that Apple is a media

277
00:11:33,949 --> 00:11:35,720
company whereas Google is an

278
00:11:35,720 --> 00:11:37,399
advertisement company in the second part

279
00:11:37,399 --> 00:11:39,139
you probably will grant me without any

280
00:11:39,139 --> 00:11:41,779
you know any further consideration but

281
00:11:41,779 --> 00:11:43,790
here's why I think Apple is a media

282
00:11:43,790 --> 00:11:46,100
company and this is why I think that

283
00:11:46,100 --> 00:11:47,509
they came up with such a restrictive

284
00:11:47,509 --> 00:11:51,350
platform as it actually makes sense for

285
00:11:51,350 --> 00:11:54,170
a media company to provide a piece of

286
00:11:54,170 --> 00:11:56,990
hardware for delivery of media which is

287
00:11:56,990 --> 00:11:59,389
tamper resistant which is difficult to

288
00:11:59,389 --> 00:12:02,269
extract data off of and which is in many

289
00:12:02,269 --> 00:12:05,540
ways bound to a single individual okay

290
00:12:05,540 --> 00:12:07,819
and so this makes it really hard for the

291
00:12:07,819 --> 00:12:10,130
user to steal the music and the videos

292
00:12:10,130 --> 00:12:11,540
and whatever other media they're

293
00:12:11,540 --> 00:12:14,660
actually buying and as a corollary it

294
00:12:14,660 --> 00:12:16,490
makes it really hard for other people

295
00:12:16,490 --> 00:12:18,560
who want to steal your data to do the

296
00:12:18,560 --> 00:12:21,800
same good but I think that that the the

297
00:12:21,800 --> 00:12:24,920
notion of this originated from the

298
00:12:24,920 --> 00:12:28,069
notion of having a digital rights

299
00:12:28,069 --> 00:12:30,380
management platform in order to deliver

300
00:12:30,380 --> 00:12:33,260
the media I think the Google ecosystem

301
00:12:33,260 --> 00:12:37,519
is largely driven by marketing share 75%

302
00:12:37,519 --> 00:12:39,769
of the global distribution of mobile

303
00:12:39,769 --> 00:12:43,130
devices runs Android it's a much lower

304
00:12:43,130 --> 00:12:47,420
cost of entry for consumers hardware

305
00:12:47,420 --> 00:12:50,839
manufacturers can can use the OS if they

306
00:12:50,839 --> 00:12:53,930
want to unlike iOS it's not an option to

307
00:12:53,930 --> 00:12:56,839
do it on your own hardware also

308
00:12:56,839 --> 00:12:58,699
important to realize is that the iOS

309
00:12:58,699 --> 00:13:01,430
applications are delivered as compiled

310
00:13:01,430 --> 00:13:03,709
executables it's either objective-c or

311
00:13:03,709 --> 00:13:06,339
Swift where they've actually been come

312
00:13:06,339 --> 00:13:09,529
written and then they're compiled in

313
00:13:09,529 --> 00:13:12,860
order to have an application on your iOS

314
00:13:12,860 --> 00:13:16,399
device that application must come from

315
00:13:16,399 --> 00:13:19,730
Apple with a digital signature and even

316
00:13:19,730 --> 00:13:20,420
the two prime

317
00:13:20,420 --> 00:13:22,430
exceptions which are granted which are

318
00:13:22,430 --> 00:13:24,200
Enterprise certificates and developer

319
00:13:24,200 --> 00:13:27,410
certificates both of which are actually

320
00:13:27,410 --> 00:13:30,019
still signed by Apple it's just that the

321
00:13:30,019 --> 00:13:33,519
enterprise or developers certificates

322
00:13:33,519 --> 00:13:35,899
authorize you to further sign

323
00:13:35,899 --> 00:13:38,540
applications so it still actually got

324
00:13:38,540 --> 00:13:40,639
digital signatures in place in order to

325
00:13:40,639 --> 00:13:42,199
have code signing for things to run a

326
00:13:42,199 --> 00:13:45,139
couple interesting examples of ways that

327
00:13:45,139 --> 00:13:48,079
these were circumvented if you go back

328
00:13:48,079 --> 00:13:49,970
and look at Charlie Miller's insta stock

329
00:13:49,970 --> 00:13:51,560
there's a very clever implementation

330
00:13:51,560 --> 00:13:54,529
where he actually identified a way that

331
00:13:54,529 --> 00:13:57,880
an application could circumvent the

332
00:13:57,880 --> 00:14:00,680
executable restrictions using some

333
00:14:00,680 --> 00:14:01,510
just-in-time

334
00:14:01,510 --> 00:14:04,760
memory space for basically being able to

335
00:14:04,760 --> 00:14:06,230
execute code

336
00:14:06,230 --> 00:14:08,199
he didn't include the malicious code

337
00:14:08,199 --> 00:14:11,300
when he sent his app to Apple for

338
00:14:11,300 --> 00:14:13,100
vetting it just saw that there was a

339
00:14:13,100 --> 00:14:15,380
download and then he downloaded it

340
00:14:15,380 --> 00:14:17,540
marshaled some executable memory space

341
00:14:17,540 --> 00:14:19,519
violating the writable X or executable

342
00:14:19,519 --> 00:14:21,649
Depp type protections that are in place

343
00:14:21,649 --> 00:14:23,839
for applications and then was able to

344
00:14:23,839 --> 00:14:25,850
download this code and then execute it

345
00:14:25,850 --> 00:14:26,209
later

346
00:14:26,209 --> 00:14:28,579
which is exactly what Apple tries to

347
00:14:28,579 --> 00:14:30,560
avoid by making it so that it's a

348
00:14:30,560 --> 00:14:32,930
compiled executable you shouldn't be

349
00:14:32,930 --> 00:14:35,360
able to download more code later and run

350
00:14:35,360 --> 00:14:37,820
it it's part of what they have created

351
00:14:37,820 --> 00:14:40,579
in terms of the restrictive architecture

352
00:14:40,579 --> 00:14:42,649
another example of this was Xcode ghost

353
00:14:42,649 --> 00:14:44,810
you can go do a search on this get more

354
00:14:44,810 --> 00:14:46,339
details on it but the interesting thing

355
00:14:46,339 --> 00:14:48,730
about this is it was actually the

356
00:14:48,730 --> 00:14:52,640
malleus was introduced by a manipulated

357
00:14:52,640 --> 00:14:54,529
version of Xcode the development

358
00:14:54,529 --> 00:14:56,630
environment which automatically included

359
00:14:56,630 --> 00:15:00,589
a dy Lib which included the library

360
00:15:00,589 --> 00:15:02,570
which kind of looked like an ad library

361
00:15:02,570 --> 00:15:05,000
only they also had the ability to

362
00:15:05,000 --> 00:15:07,220
download additional code and execute it

363
00:15:07,220 --> 00:15:10,399
again circumventing restrictions by

364
00:15:10,399 --> 00:15:12,199
Apple which were intended to be in place

365
00:15:12,199 --> 00:15:14,839
now Android apps have digital signatures

366
00:15:14,839 --> 00:15:16,399
but they don't function in terms of

367
00:15:16,399 --> 00:15:19,040
preventing things from running what

368
00:15:19,040 --> 00:15:20,510
they're really supposed to do is provide

369
00:15:20,510 --> 00:15:22,760
it so that a developer can give updates

370
00:15:22,760 --> 00:15:27,769
to his own or her own application but

371
00:15:27,769 --> 00:15:29,779
another developer can't inject a

372
00:15:29,779 --> 00:15:33,769
malicious update the Android apps are

373
00:15:33,769 --> 00:15:34,520
actually

374
00:15:34,520 --> 00:15:37,190
to be installed from anywhere now there

375
00:15:37,190 --> 00:15:39,050
have been restrictions put in place for

376
00:15:39,050 --> 00:15:42,170
that so you on modern modern Android you

377
00:15:42,170 --> 00:15:46,130
can specify per application whether that

378
00:15:46,130 --> 00:15:48,500
application is allowed to download apks

379
00:15:48,500 --> 00:15:50,690
and install them but there's really no

380
00:15:50,690 --> 00:15:53,360
single Authority that verifies the

381
00:15:53,360 --> 00:15:55,460
identity of any developer they're all

382
00:15:55,460 --> 00:15:58,490
basically self-signed cert and a user

383
00:15:58,490 --> 00:16:00,800
can choose to install an apk from

384
00:16:00,800 --> 00:16:03,500
anywhere largely different than the the

385
00:16:03,500 --> 00:16:06,980
iOS components of app install the

386
00:16:06,980 --> 00:16:10,490
application itself on Android includes

387
00:16:10,490 --> 00:16:11,990
the potential for some compiled

388
00:16:11,990 --> 00:16:13,910
components and we call this the NDK

389
00:16:13,910 --> 00:16:16,400
there's their libraries which are

390
00:16:16,400 --> 00:16:19,790
shipped in elf format but most of the

391
00:16:19,790 --> 00:16:22,340
code is usually the the dalvik bytecode

392
00:16:22,340 --> 00:16:25,010
which is written in Java even though

393
00:16:25,010 --> 00:16:26,540
there was a big lawsuit between Oracle

394
00:16:26,540 --> 00:16:28,010
and Google about this

395
00:16:28,010 --> 00:16:30,470
basically it's Java but it's not Java

396
00:16:30,470 --> 00:16:33,620
and so Oracle sued Google around the

397
00:16:33,620 --> 00:16:35,690
fact that they were Google was using

398
00:16:35,690 --> 00:16:37,430
something that was largely like the Java

399
00:16:37,430 --> 00:16:39,140
programming language but then not paying

400
00:16:39,140 --> 00:16:43,030
Oracle for their for their licensing

401
00:16:43,030 --> 00:16:45,710
Google as a result of that has changed

402
00:16:45,710 --> 00:16:47,000
to a different programming language

403
00:16:47,000 --> 00:16:49,010
called Kotlin which is now available

404
00:16:49,010 --> 00:16:51,350
both of which get compiled into dalvik

405
00:16:51,350 --> 00:16:53,060
bytecode and then that dalvik bytecode

406
00:16:53,060 --> 00:16:55,690
is included in a file called classes.dex

407
00:16:55,690 --> 00:16:58,460
inside of the APK file which is just a

408
00:16:58,460 --> 00:17:03,650
zip file so it's actually I think harder

409
00:17:03,650 --> 00:17:05,359
for the Google security people who are

410
00:17:05,359 --> 00:17:07,099
supposed to be doing the inspection of

411
00:17:07,099 --> 00:17:08,599
the apps that are being delivered to

412
00:17:08,599 --> 00:17:10,819
them and Maddie stone one of the

413
00:17:10,819 --> 00:17:13,459
security researchers at Google actually

414
00:17:13,459 --> 00:17:15,709
gave a really good talk at blackhat 2018

415
00:17:15,709 --> 00:17:19,220
where she talks about unpiloted up act

416
00:17:19,220 --> 00:17:20,839
unpacker or something like that I can't

417
00:17:20,839 --> 00:17:22,010
even remember the name of it but if you

418
00:17:22,010 --> 00:17:23,390
look for wedding cake and Maddie stone

419
00:17:23,390 --> 00:17:25,760
and black hat 2018 you can get that it's

420
00:17:25,760 --> 00:17:28,000
like unpacking the packed unpacker and

421
00:17:28,000 --> 00:17:30,230
she talks about the difficulty of

422
00:17:30,230 --> 00:17:32,900
dealing with these with these obfuscated

423
00:17:32,900 --> 00:17:35,000
libraries that are provided in the NDK

424
00:17:35,000 --> 00:17:37,370
in order to basically hide the presence

425
00:17:37,370 --> 00:17:39,830
of the malicious code the developer

426
00:17:39,830 --> 00:17:42,050
policies in android are a little bit

427
00:17:42,050 --> 00:17:43,730
more permissive than they are an apple

428
00:17:43,730 --> 00:17:46,250
it's a little less expensive for

429
00:17:46,250 --> 00:17:47,570
developers to just

430
00:17:47,570 --> 00:17:51,889
create and move to a new profile because

431
00:17:51,889 --> 00:17:53,389
you don't have to pay for the developer

432
00:17:53,389 --> 00:17:56,269
licensing you can basically submit apps

433
00:17:56,269 --> 00:18:00,110
pretty quickly in addition to this the

434
00:18:00,110 --> 00:18:01,850
other component of this is that the

435
00:18:01,850 --> 00:18:05,779
system apps which are installed as part

436
00:18:05,779 --> 00:18:07,580
of the operating system frequently have

437
00:18:07,580 --> 00:18:09,320
some of the same attack surface that I'm

438
00:18:09,320 --> 00:18:11,750
going to talk about when I talk about

439
00:18:11,750 --> 00:18:14,149
you actually doing assessments of

440
00:18:14,149 --> 00:18:16,220
applications and these system apps

441
00:18:16,220 --> 00:18:19,210
actually sometimes have flaws that are

442
00:18:19,210 --> 00:18:21,769
unaddressed and the user can't do

443
00:18:21,769 --> 00:18:22,730
anything about it

444
00:18:22,730 --> 00:18:25,480
they can install updates but they can't

445
00:18:25,480 --> 00:18:29,870
fundamentally disable the system apps so

446
00:18:29,870 --> 00:18:31,159
let's look on the bright side in terms

447
00:18:31,159 --> 00:18:33,610
of what we're dealing with this little

448
00:18:33,610 --> 00:18:36,080
image is something that I use to

449
00:18:36,080 --> 00:18:40,820
understand how attackers attack us this

450
00:18:40,820 --> 00:18:44,179
is actually adapted from a paper written

451
00:18:44,179 --> 00:18:46,129
by the US Department of Defense defense

452
00:18:46,129 --> 00:18:47,299
Science Board it's a really good

453
00:18:47,299 --> 00:18:49,070
articulation of the problem they said

454
00:18:49,070 --> 00:18:51,019
there's the $10.00 Club the million

455
00:18:51,019 --> 00:18:52,220
dollar Club in the billion dollar club

456
00:18:52,220 --> 00:18:54,049
$10.00 Club we uses existing

457
00:18:54,049 --> 00:18:56,299
vulnerabilities the million dollar club

458
00:18:56,299 --> 00:18:58,129
discovers new vulnerabilities and the

459
00:18:58,129 --> 00:19:00,080
billion dollar club is able to leverage

460
00:19:00,080 --> 00:19:02,600
the full spectrum of capability in order

461
00:19:02,600 --> 00:19:04,820
to introduce vulnerabilities into the

462
00:19:04,820 --> 00:19:07,100
environment and so I'm not even dealing

463
00:19:07,100 --> 00:19:08,210
with the billion dollar club in this

464
00:19:08,210 --> 00:19:10,580
particular talk that may be a problem

465
00:19:10,580 --> 00:19:11,809
that you need to deal with

466
00:19:11,809 --> 00:19:14,840
if you individually are being targeted

467
00:19:14,840 --> 00:19:17,149
by that level of attacker which which

468
00:19:17,149 --> 00:19:19,070
happens I understand it um if you

469
00:19:19,070 --> 00:19:20,929
individually are being targeted by that

470
00:19:20,929 --> 00:19:23,299
level of attacker maintain hyper

471
00:19:23,299 --> 00:19:26,659
vigilance and look at the citizen lab

472
00:19:26,659 --> 00:19:28,879
resources and citizen lab actually is a

473
00:19:28,879 --> 00:19:31,250
place where if I was an individual who

474
00:19:31,250 --> 00:19:33,379
was targeted by a governmental entity or

475
00:19:33,379 --> 00:19:35,149
a billion dollar club entity they're not

476
00:19:35,149 --> 00:19:36,950
always governments but they usually are

477
00:19:36,950 --> 00:19:39,440
I would basically go to citizen labs if

478
00:19:39,440 --> 00:19:41,570
I needed help like I think that's your

479
00:19:41,570 --> 00:19:44,720
best bet if you are that individual who

480
00:19:44,720 --> 00:19:46,820
needs that help and here's an example if

481
00:19:46,820 --> 00:19:49,610
you do this this search sequence mansoor

482
00:19:49,610 --> 00:19:51,919
Pegasus citizen NSO look out and look

483
00:19:51,919 --> 00:19:53,870
out it doesn't look how Mobile's now

484
00:19:53,870 --> 00:19:55,009
doesn't look out

485
00:19:55,009 --> 00:19:58,429
this is circumstance of some individual

486
00:19:58,429 --> 00:20:00,370
being attacked with some

487
00:20:00,370 --> 00:20:02,140
every sophisticated malware and citizen

488
00:20:02,140 --> 00:20:03,550
labs and look how mobile actually

489
00:20:03,550 --> 00:20:05,200
basically did the investigation

490
00:20:05,200 --> 00:20:07,690
associated with him if you are an

491
00:20:07,690 --> 00:20:09,280
individual who works for a company that

492
00:20:09,280 --> 00:20:11,290
is being targeted by the billion dollar

493
00:20:11,290 --> 00:20:13,660
club again this talk doesn't really deal

494
00:20:13,660 --> 00:20:15,700
with that level of considerations I

495
00:20:15,700 --> 00:20:17,380
would suggest that you go look at the

496
00:20:17,380 --> 00:20:18,700
available threat intelligence look at

497
00:20:18,700 --> 00:20:19,890
all the resources that are available

498
00:20:19,890 --> 00:20:23,620
from whatever your country cert is or

499
00:20:23,620 --> 00:20:25,809
your regional cert for that sort of

500
00:20:25,809 --> 00:20:29,740
state-sponsored activity and if you are

501
00:20:29,740 --> 00:20:32,320
really mostly concerned about your

502
00:20:32,320 --> 00:20:34,150
country where you live

503
00:20:34,150 --> 00:20:36,309
being the threat then do a google search

504
00:20:36,309 --> 00:20:39,309
for that one privacy guy VPN comparison

505
00:20:39,309 --> 00:20:42,130
he has phenomenal resources in terms of

506
00:20:42,130 --> 00:20:45,030
how you can actually consider this so

507
00:20:45,030 --> 00:20:48,550
your mobile device is being used to

508
00:20:48,550 --> 00:20:50,679
target you at least for advertising at

509
00:20:50,679 --> 00:20:53,040
least for some privacy violations so

510
00:20:53,040 --> 00:20:57,250
what I'm about to suggest to you is the

511
00:20:57,250 --> 00:20:59,860
little bit that you individually can do

512
00:20:59,860 --> 00:21:02,050
in order to address that particular

513
00:21:02,050 --> 00:21:05,980
problem so all these different actors

514
00:21:05,980 --> 00:21:08,260
need to evade detection and if one

515
00:21:08,260 --> 00:21:11,080
individual actually find something

516
00:21:11,080 --> 00:21:13,300
interesting that individual can usually

517
00:21:13,300 --> 00:21:15,190
share that with other individuals and

518
00:21:15,190 --> 00:21:18,520
the problem gets addressed so I want you

519
00:21:18,520 --> 00:21:20,820
to be vigilant in inspecting the mobile

520
00:21:20,820 --> 00:21:23,650
applications that you're using on your

521
00:21:23,650 --> 00:21:25,600
devices so one should remain maintain

522
00:21:25,600 --> 00:21:27,850
sort of situational awareness I want you

523
00:21:27,850 --> 00:21:29,950
to also realize that the Android space

524
00:21:29,950 --> 00:21:32,130
largely depends on community policing

525
00:21:32,130 --> 00:21:34,150
okay there's a lot of work being done

526
00:21:34,150 --> 00:21:38,110
within the the Google security team but

527
00:21:38,110 --> 00:21:40,300
there is a larger need for community

528
00:21:40,300 --> 00:21:42,070
vigilance and this is why one of the

529
00:21:42,070 --> 00:21:43,510
reasons why I'm doing this particular

530
00:21:43,510 --> 00:21:45,130
talk you can still do all these same

531
00:21:45,130 --> 00:21:46,990
things on iOS it's just harder there's a

532
00:21:46,990 --> 00:21:49,360
there's a greater barrier of entry

533
00:21:49,360 --> 00:21:52,090
whereas the Android stuff is relatively

534
00:21:52,090 --> 00:21:54,520
simple so I'm gonna walk through I'm

535
00:21:54,520 --> 00:21:56,980
sort of my suggested assessment steps

536
00:21:56,980 --> 00:21:58,420
there are a lot of different Forks that

537
00:21:58,420 --> 00:22:00,160
you can go down in terms of what you

538
00:22:00,160 --> 00:22:02,050
actually care about there is stuff

539
00:22:02,050 --> 00:22:04,570
available on iOS to do these same things

540
00:22:04,570 --> 00:22:07,679
this talk largely focuses on Android

541
00:22:07,679 --> 00:22:11,140
jailbreak jailbroken iOS --is iOS

542
00:22:11,140 --> 00:22:13,530
devices is essentially a prerequisite

543
00:22:13,530 --> 00:22:17,070
for doing this sort of work on on the

544
00:22:17,070 --> 00:22:22,320
Apple side and thanks to axiom X sorry

545
00:22:22,320 --> 00:22:25,010
if I pronounced it wrong you can tell me

546
00:22:25,010 --> 00:22:29,370
and the released checkmate tool actually

547
00:22:29,370 --> 00:22:32,730
a lot of people can jailbreak in Apple

548
00:22:32,730 --> 00:22:34,890
devices really phenomenal opportunity

549
00:22:34,890 --> 00:22:38,120
that's been basically developed

550
00:22:38,120 --> 00:22:40,530
extensively by the check-rein developers

551
00:22:40,530 --> 00:22:42,000
you can go take a look at those

552
00:22:42,000 --> 00:22:44,700
resources in order to see how to how to

553
00:22:44,700 --> 00:22:51,630
jailbreak iOS the the sequence that I

554
00:22:51,630 --> 00:22:53,220
think that you should do to get the most

555
00:22:53,220 --> 00:22:56,670
value is initial behavioral analysis use

556
00:22:56,670 --> 00:23:00,230
of some of the automated tools using app

557
00:23:00,230 --> 00:23:02,280
manipulation and I'll talk about what

558
00:23:02,280 --> 00:23:04,230
that is and then doing static code

559
00:23:04,230 --> 00:23:06,150
analysis there starts to be some

560
00:23:06,150 --> 00:23:07,950
iteration and backtracking once you

561
00:23:07,950 --> 00:23:09,510
start to go down a certain thread with

562
00:23:09,510 --> 00:23:12,240
automated tools it actually is is useful

563
00:23:12,240 --> 00:23:13,650
to then jump into a little bit of

564
00:23:13,650 --> 00:23:15,180
manipulation and a little bit of static

565
00:23:15,180 --> 00:23:17,250
code analysis and then maybe you go back

566
00:23:17,250 --> 00:23:19,200
into some of the behavioral stuff now

567
00:23:19,200 --> 00:23:20,670
that you've gained deeper insight into

568
00:23:20,670 --> 00:23:23,910
what the tool actually does so I want

569
00:23:23,910 --> 00:23:25,470
you to realize that this is all fairly

570
00:23:25,470 --> 00:23:27,060
technically involved none of it is

571
00:23:27,060 --> 00:23:29,880
really beyond you but it's really tough

572
00:23:29,880 --> 00:23:33,270
and actually both Apple and Google with

573
00:23:33,270 --> 00:23:36,180
dedicated staff doing this work every

574
00:23:36,180 --> 00:23:39,060
single day they make mistakes too okay

575
00:23:39,060 --> 00:23:41,850
they've missed circumstances where this

576
00:23:41,850 --> 00:23:44,370
has actually been gotten by the people

577
00:23:44,370 --> 00:23:47,130
who are specifically intended to be

578
00:23:47,130 --> 00:23:49,470
looking for this sort of attack type

579
00:23:49,470 --> 00:23:53,340
stuff so if you want to do this you want

580
00:23:53,340 --> 00:23:55,590
to do it well I would suggest that you

581
00:23:55,590 --> 00:23:58,280
focus on methodology start with

582
00:23:58,280 --> 00:24:00,480
everything that you do being repeatable

583
00:24:00,480 --> 00:24:01,980
and taking good notes and I know that

584
00:24:01,980 --> 00:24:04,230
that's super lame from the perspective I

585
00:24:04,230 --> 00:24:06,510
just want a hack on stuff but it

586
00:24:06,510 --> 00:24:08,580
actually will get you farther in the

587
00:24:08,580 --> 00:24:11,220
long run then going fast or trying to

588
00:24:11,220 --> 00:24:14,070
get really far right because when you

589
00:24:14,070 --> 00:24:16,440
start to encounter little errors and you

590
00:24:16,440 --> 00:24:18,510
cannot reproduce the sequence then all

591
00:24:18,510 --> 00:24:19,830
of a sudden you're gonna have to end up

592
00:24:19,830 --> 00:24:21,870
with lots of additional work and it's

593
00:24:21,870 --> 00:24:23,610
gonna be very frustrating take it from

594
00:24:23,610 --> 00:24:26,190
me it's very very frustrating when you

595
00:24:26,190 --> 00:24:27,180
have something

596
00:24:27,180 --> 00:24:28,890
that you thought that you had it stable

597
00:24:28,890 --> 00:24:30,630
and then it wasn't and then you go back

598
00:24:30,630 --> 00:24:32,850
and you can't repeat the circumstance of

599
00:24:32,850 --> 00:24:35,550
how you got there in the amount of time

600
00:24:35,550 --> 00:24:36,810
that I've been working on this sort of

601
00:24:36,810 --> 00:24:39,090
stuff I've realized it's actually better

602
00:24:39,090 --> 00:24:42,090
to go slow and track things because

603
00:24:42,090 --> 00:24:45,150
that's how I can get further faster so

604
00:24:45,150 --> 00:24:47,880
every single step matters even better if

605
00:24:47,880 --> 00:24:49,500
you can script the stuff so that I can

606
00:24:49,500 --> 00:24:51,060
just rerun the script and recreate the

607
00:24:51,060 --> 00:24:52,650
circumstance of where I'm coming to and

608
00:24:52,650 --> 00:24:54,060
most of the good tools that are out

609
00:24:54,060 --> 00:24:56,910
there help us to do that in addition to

610
00:24:56,910 --> 00:24:58,770
all the technical stuff I have to warn

611
00:24:58,770 --> 00:25:01,470
you some of the stuff that you do based

612
00:25:01,470 --> 00:25:03,480
on this could potentially be illegal in

613
00:25:03,480 --> 00:25:04,820
the jurisdiction where you're doing him

614
00:25:04,820 --> 00:25:06,870
sometimes the difference between it

615
00:25:06,870 --> 00:25:08,550
being legal or illegal is the way that

616
00:25:08,550 --> 00:25:10,230
you acquired it and the intention of

617
00:25:10,230 --> 00:25:12,390
what you're doing so you should make

618
00:25:12,390 --> 00:25:13,920
sure that you consult with your lawyer

619
00:25:13,920 --> 00:25:16,440
and also make sure that you do this only

620
00:25:16,440 --> 00:25:18,330
on networks and with assets where you

621
00:25:18,330 --> 00:25:20,940
have written permission but if you own

622
00:25:20,940 --> 00:25:23,310
the assets and it's the network that you

623
00:25:23,310 --> 00:25:26,190
manage and you can give yourself written

624
00:25:26,190 --> 00:25:28,050
permission I don't know how to talk to

625
00:25:28,050 --> 00:25:32,580
your the hoarder sir if that works so

626
00:25:32,580 --> 00:25:34,920
the idea here is that there is a bunch

627
00:25:34,920 --> 00:25:36,390
of guidance that is out there that you

628
00:25:36,390 --> 00:25:38,730
could just go and look at I'm going to

629
00:25:38,730 --> 00:25:40,560
summarize some of those things but if

630
00:25:40,560 --> 00:25:42,690
you want a reference go look at the MAS

631
00:25:42,690 --> 00:25:44,670
V s and the M s T G mobile security

632
00:25:44,670 --> 00:25:47,400
testing guide and the mobile application

633
00:25:47,400 --> 00:25:49,440
security verification standard great

634
00:25:49,440 --> 00:25:51,690
resources produced by OWASP they're

635
00:25:51,690 --> 00:25:54,450
imperfect but everything is right this

636
00:25:54,450 --> 00:25:56,580
Android app pentesting guide is another

637
00:25:56,580 --> 00:25:59,120
one where basically is in specific

638
00:25:59,120 --> 00:26:02,580
implementation of the MST G the person

639
00:26:02,580 --> 00:26:05,520
took the list went down the list and

640
00:26:05,520 --> 00:26:06,930
said here's how I do this here's how I

641
00:26:06,930 --> 00:26:08,550
do this here's how I do this with

642
00:26:08,550 --> 00:26:10,350
specific tools and in some cases the

643
00:26:10,350 --> 00:26:12,270
tool and the switches in order to

644
00:26:12,270 --> 00:26:13,950
actually implement that particular check

645
00:26:13,950 --> 00:26:16,680
it's got some some gaps but it's really

646
00:26:16,680 --> 00:26:19,620
good it's like 8090 percent complete in

647
00:26:19,620 --> 00:26:22,170
terms of M s T G so if you just want a

648
00:26:22,170 --> 00:26:25,890
sequence of steps to do go to the AAPG

649
00:26:25,890 --> 00:26:30,030
and execute that stuff and if you feel

650
00:26:30,030 --> 00:26:31,860
totally comfortable with this I'd go

651
00:26:31,860 --> 00:26:34,410
look at that and basically say yeah I

652
00:26:34,410 --> 00:26:35,850
know that tool yeah I know that tool

653
00:26:35,850 --> 00:26:37,890
yeah I know that tool and if you do for

654
00:26:37,890 --> 00:26:39,900
every single one great but you might

655
00:26:39,900 --> 00:26:40,860
pick up one or two

656
00:26:40,860 --> 00:26:43,140
tools out of a list of 50 tools and say

657
00:26:43,140 --> 00:26:44,730
oh there's something I can remember for

658
00:26:44,730 --> 00:26:46,320
if I encountered that particular thing

659
00:26:46,320 --> 00:26:48,660
another thing that you need to think

660
00:26:48,660 --> 00:26:50,850
about in terms of setting stuff up is do

661
00:26:50,850 --> 00:26:52,770
I use a virtual device or do I use an

662
00:26:52,770 --> 00:26:55,410
actual thumb so there's some benefits

663
00:26:55,410 --> 00:26:57,809
with using a virtual device it's much

664
00:26:57,809 --> 00:27:00,570
easier in terms of having snapshots to

665
00:27:00,570 --> 00:27:03,990
much lower cost of entry you have to

666
00:27:03,990 --> 00:27:05,340
download some software in order to

667
00:27:05,340 --> 00:27:07,860
create the virtual device you do also

668
00:27:07,860 --> 00:27:09,960
need to have a Play Store circumstance

669
00:27:09,960 --> 00:27:12,270
where if you want to install apps on a

670
00:27:12,270 --> 00:27:13,919
virtual device you need to have a place

671
00:27:13,919 --> 00:27:16,260
to already operating system to do this

672
00:27:16,260 --> 00:27:18,540
I'll show you that in just a second it's

673
00:27:18,540 --> 00:27:20,600
also super easy network interception

674
00:27:20,600 --> 00:27:22,830
basically you start the emulator with

675
00:27:22,830 --> 00:27:25,020
the HTTP proxy push it in to burp or

676
00:27:25,020 --> 00:27:26,400
whatever you going to use for inspection

677
00:27:26,400 --> 00:27:27,900
and then there's your traffic right

678
00:27:27,900 --> 00:27:30,150
there coming off of the emulator the

679
00:27:30,150 --> 00:27:33,299
hardware it's faster it's more costly

680
00:27:33,299 --> 00:27:36,600
though the downside the biggest downside

681
00:27:36,600 --> 00:27:38,130
I feel in terms of the hardware is no

682
00:27:38,130 --> 00:27:39,870
snapshot it's really nice to be able to

683
00:27:39,870 --> 00:27:41,250
take a snapshot go back to it take

684
00:27:41,250 --> 00:27:43,290
snapshot go back to it have a standard

685
00:27:43,290 --> 00:27:44,760
sort of test harness that's ready to go

686
00:27:44,760 --> 00:27:47,130
where I can drop the thing in and repeat

687
00:27:47,130 --> 00:27:49,500
test multiple times can't really do that

688
00:27:49,500 --> 00:27:51,270
on hardware there's no revert type

689
00:27:51,270 --> 00:27:54,240
button for that in some circumstances

690
00:27:54,240 --> 00:27:55,740
the apps will check to see if you're

691
00:27:55,740 --> 00:27:58,260
running on a virtual instance and if you

692
00:27:58,260 --> 00:28:00,540
don't want to basically manipulate that

693
00:28:00,540 --> 00:28:02,370
at runtime you just put it on a phone

694
00:28:02,370 --> 00:28:03,809
and then you don't have to manipulate

695
00:28:03,809 --> 00:28:07,919
that at runtime okay so the the Play

696
00:28:07,919 --> 00:28:09,720
Store options are really good this is

697
00:28:09,720 --> 00:28:11,490
actually out of the Android virtual

698
00:28:11,490 --> 00:28:13,890
device manager where you can see that

699
00:28:13,890 --> 00:28:15,929
the Play Store image is available and

700
00:28:15,929 --> 00:28:17,700
you have to pick that particular one if

701
00:28:17,700 --> 00:28:19,620
that's what you want you can go through

702
00:28:19,620 --> 00:28:22,020
all sorts of trouble in order to make

703
00:28:22,020 --> 00:28:24,000
that work but it's much harder than just

704
00:28:24,000 --> 00:28:25,770
saying okay here's the here's the one

705
00:28:25,770 --> 00:28:28,260
that I want so let's get into some of

706
00:28:28,260 --> 00:28:29,760
the aspects of what we're actually going

707
00:28:29,760 --> 00:28:31,440
to assess the first one was the idea of

708
00:28:31,440 --> 00:28:33,090
behavioral analysis and I'll talk about

709
00:28:33,090 --> 00:28:34,559
a couple different things and I'm going

710
00:28:34,559 --> 00:28:36,480
to start with network analysis for this

711
00:28:36,480 --> 00:28:39,210
this is actually the easiest to perform

712
00:28:39,210 --> 00:28:41,820
without any real specialized tools you

713
00:28:41,820 --> 00:28:43,080
put the mobile device on our network

714
00:28:43,080 --> 00:28:44,820
where your man-in-the-middle and watch

715
00:28:44,820 --> 00:28:46,890
the communication there are some

716
00:28:46,890 --> 00:28:49,230
challenges to this the traffic should be

717
00:28:49,230 --> 00:28:51,660
TLS protected and that should be

718
00:28:51,660 --> 00:28:54,559
protecting you also realize that it's

719
00:28:54,559 --> 00:28:56,870
protecting you from a network that's

720
00:28:56,870 --> 00:28:58,490
eavesdropping on you but there may be an

721
00:28:58,490 --> 00:29:01,279
attack against the TLS and so that is a

722
00:29:01,279 --> 00:29:03,830
negative thing so I want to attack that

723
00:29:03,830 --> 00:29:06,649
myself to verify that even if I get

724
00:29:06,649 --> 00:29:09,049
inside of the TLS there might be ways

725
00:29:09,049 --> 00:29:10,730
that they're actually obfuscating the

726
00:29:10,730 --> 00:29:12,649
data or encrypting it or doing other

727
00:29:12,649 --> 00:29:14,450
things at runtime to make it hard for me

728
00:29:14,450 --> 00:29:16,879
to see so if I break open TLS and I see

729
00:29:16,879 --> 00:29:18,169
some data I'm gonna still have other

730
00:29:18,169 --> 00:29:20,419
work to do in order to see that I might

731
00:29:20,419 --> 00:29:22,070
also have an application that has a

732
00:29:22,070 --> 00:29:23,509
trigger condition that I haven't met

733
00:29:23,509 --> 00:29:26,419
this is time this is you know have to do

734
00:29:26,419 --> 00:29:28,669
X number of things maybe there's a GPS

735
00:29:28,669 --> 00:29:31,220
specification in the app that says you

736
00:29:31,220 --> 00:29:33,980
don't start this bad behavior until them

737
00:29:33,980 --> 00:29:36,499
within this range of this building in

738
00:29:36,499 --> 00:29:39,200
the app and if you haven't satisfied the

739
00:29:39,200 --> 00:29:41,240
trigger condition then the behavioral

740
00:29:41,240 --> 00:29:42,820
analysis will never identify the

741
00:29:42,820 --> 00:29:46,669
objectionable behavior okay so if you do

742
00:29:46,669 --> 00:29:48,379
have a physical device because I already

743
00:29:48,379 --> 00:29:49,669
showed you how to do it with the virtual

744
00:29:49,669 --> 00:29:51,889
device with the emulator or HTTP proxy

745
00:29:51,889 --> 00:29:53,179
option if you do have a physical device

746
00:29:53,179 --> 00:29:56,360
there are two basic options you have the

747
00:29:56,360 --> 00:30:00,379
host provide an access point and then be

748
00:30:00,379 --> 00:30:02,029
the man in the middle or you have a

749
00:30:02,029 --> 00:30:03,619
virtual machine where you take a USB

750
00:30:03,619 --> 00:30:07,429
connected network card that or access

751
00:30:07,429 --> 00:30:09,679
point which then creates the access

752
00:30:09,679 --> 00:30:11,509
point that becomes man in the middle

753
00:30:11,509 --> 00:30:13,190
because that USB is passed into the

754
00:30:13,190 --> 00:30:15,470
virtual device I tend to do the latter

755
00:30:15,470 --> 00:30:18,080
that is I have an access point connected

756
00:30:18,080 --> 00:30:20,240
to a virtual machine the virtual machine

757
00:30:20,240 --> 00:30:22,190
is almost always Linux when I'm doing

758
00:30:22,190 --> 00:30:24,710
this it's just easier for me to use

759
00:30:24,710 --> 00:30:27,320
Linux to do the network manipulations I

760
00:30:27,320 --> 00:30:30,379
can use Windows as an example if I'm

761
00:30:30,379 --> 00:30:32,299
doing a host circumstance and I'll

762
00:30:32,299 --> 00:30:34,340
explain this just so if you want to set

763
00:30:34,340 --> 00:30:38,710
this up you have a host windows system

764
00:30:38,710 --> 00:30:42,259
you're going to get a USB NIC plug it

765
00:30:42,259 --> 00:30:44,840
into the host you configure the USB card

766
00:30:44,840 --> 00:30:46,279
as an access point and I'll show you how

767
00:30:46,279 --> 00:30:48,259
to do that in a second but you're going

768
00:30:48,259 --> 00:30:51,679
to use the the Wi-Fi card that's built

769
00:30:51,679 --> 00:30:54,830
into the host to be able to connect to

770
00:30:54,830 --> 00:30:56,480
the Internet and then you have to enable

771
00:30:56,480 --> 00:30:58,970
an internet connection sharing for that

772
00:30:58,970 --> 00:31:01,700
built-in Wi-Fi in order to establish the

773
00:31:01,700 --> 00:31:04,610
Wi-Fi man-in-the-middle position then

774
00:31:04,610 --> 00:31:07,009
you're going to associate the mobile

775
00:31:07,009 --> 00:31:08,180
device

776
00:31:08,180 --> 00:31:11,180
with the access point so you will also

777
00:31:11,180 --> 00:31:14,030
want to install burp on the host you'll

778
00:31:14,030 --> 00:31:17,210
want to install the ca cert from the

779
00:31:17,210 --> 00:31:19,370
burp instance that you're using into the

780
00:31:19,370 --> 00:31:22,010
user store of the device so that you can

781
00:31:22,010 --> 00:31:24,500
actually intercept this is something

782
00:31:24,500 --> 00:31:25,940
that you should actually check to see if

783
00:31:25,940 --> 00:31:28,010
cert pinnings in place you want that

784
00:31:28,010 --> 00:31:30,800
right for you to be protected but you

785
00:31:30,800 --> 00:31:32,480
also want to be able to undo it when you

786
00:31:32,480 --> 00:31:34,760
want to and so this takes a bunch of a

787
00:31:34,760 --> 00:31:39,370
bunch of work so TLS interception is

788
00:31:39,370 --> 00:31:42,620
something that if it can be accomplished

789
00:31:42,620 --> 00:31:46,430
basically your ISP can do it a Wi-Fi

790
00:31:46,430 --> 00:31:48,530
network provider you know like in your

791
00:31:48,530 --> 00:31:50,660
hotel could potentially do it in

792
00:31:50,660 --> 00:31:53,060
addition to that a cellular network

793
00:31:53,060 --> 00:31:56,720
provider could also do it okay so if TLS

794
00:31:56,720 --> 00:31:58,250
interception works and you're able to

795
00:31:58,250 --> 00:32:00,320
get that working realize that some

796
00:32:00,320 --> 00:32:02,450
threat actor could actually do that

797
00:32:02,450 --> 00:32:05,240
against you so for the way that we're

798
00:32:05,240 --> 00:32:07,070
going to structure this is that I have a

799
00:32:07,070 --> 00:32:09,770
Windows host I have a connected USB

800
00:32:09,770 --> 00:32:13,190
device so this is my USB device is

801
00:32:13,190 --> 00:32:15,980
basically the WLAN 2 I'm going to in

802
00:32:15,980 --> 00:32:17,860
order to make this work it's easier

803
00:32:17,860 --> 00:32:21,080
disable the built-in Wi-Fi interface

804
00:32:21,080 --> 00:32:24,050
then run this command nsh WLAN set

805
00:32:24,050 --> 00:32:26,780
hostednetwork mode allow SSID equals

806
00:32:26,780 --> 00:32:29,570
your SSID I'm using Montaigne's and then

807
00:32:29,570 --> 00:32:33,050
key equals it isn't really a word and

808
00:32:33,050 --> 00:32:34,970
then this is what I would use is the

809
00:32:34,970 --> 00:32:36,770
passphrase when I connect my mobile

810
00:32:36,770 --> 00:32:40,040
device to the Montaigne's ESS ID you set

811
00:32:40,040 --> 00:32:41,300
it to whatever you want don't use this

812
00:32:41,300 --> 00:32:46,520
so the next command is Ned SH WLAN start

813
00:32:46,520 --> 00:32:50,540
hosted network and actually type hosted

814
00:32:50,540 --> 00:32:53,540
network not Montaigne's there okay that

815
00:32:53,540 --> 00:32:57,230
actually establishes your access point

816
00:32:57,230 --> 00:33:02,000
on windows now go ahead and enable the

817
00:33:02,000 --> 00:33:05,390
other network interface the other Wi-Fi

818
00:33:05,390 --> 00:33:07,460
network interface and now you have

819
00:33:07,460 --> 00:33:09,740
internet connection sharing allowing

820
00:33:09,740 --> 00:33:11,990
that that connection up that's

821
00:33:11,990 --> 00:33:13,940
establishing the routing then you

822
00:33:13,940 --> 00:33:16,040
actually have the mobile device

823
00:33:16,040 --> 00:33:18,080
connected to the Montaigne's or whatever

824
00:33:18,080 --> 00:33:20,450
you call it a SSID and now all the

825
00:33:20,450 --> 00:33:21,510
traffic is routing through

826
00:33:21,510 --> 00:33:23,130
the windows device and you can intercept

827
00:33:23,130 --> 00:33:25,320
and watch that I don't like that I've

828
00:33:25,320 --> 00:33:27,660
only done that when I had to I would

829
00:33:27,660 --> 00:33:31,140
prefer basically a Kali VM USB connected

830
00:33:31,140 --> 00:33:33,390
to the Kali V I'm using my you know my

831
00:33:33,390 --> 00:33:35,310
workstation or whatever software to do

832
00:33:35,310 --> 00:33:38,220
this I connect a Wi-Fi access point I

833
00:33:38,220 --> 00:33:40,500
tend to use my Wi-Fi pineapple for this

834
00:33:40,500 --> 00:33:43,380
and I run the WPE

835
00:33:43,380 --> 00:33:46,170
afford SH script yes it's an old one but

836
00:33:46,170 --> 00:33:48,570
I've modified it so you can go download

837
00:33:48,570 --> 00:33:50,880
my modified one which does the routing

838
00:33:50,880 --> 00:33:52,740
it does some better checks in terms of

839
00:33:52,740 --> 00:33:54,900
the in terms of making sure that the

840
00:33:54,900 --> 00:33:56,400
interface is the right interface name

841
00:33:56,400 --> 00:33:57,930
and all this other all this other stuff

842
00:33:57,930 --> 00:34:00,300
for that and so this basically what it

843
00:34:00,300 --> 00:34:02,130
does is in addition to doing the routing

844
00:34:02,130 --> 00:34:04,890
it also sets up the IP table rules to do

845
00:34:04,890 --> 00:34:06,750
the netting so that you're actually

846
00:34:06,750 --> 00:34:10,110
pushing the traffic from 80 and 443 into

847
00:34:10,110 --> 00:34:13,380
your burp proxy and so I have this as a

848
00:34:13,380 --> 00:34:14,969
separate script available for download

849
00:34:14,969 --> 00:34:16,620
as well simple stuff that does what you

850
00:34:16,620 --> 00:34:18,960
want but basically it checks to see if

851
00:34:18,960 --> 00:34:20,790
you have burp running and then creates

852
00:34:20,790 --> 00:34:22,739
these firewall rules to get the traffic

853
00:34:22,739 --> 00:34:24,770
into burp so that you can actually

854
00:34:24,770 --> 00:34:27,179
actually see it if you don't want to do

855
00:34:27,179 --> 00:34:29,250
it that way you could also configure the

856
00:34:29,250 --> 00:34:31,590
device to send the traffic to a proxy if

857
00:34:31,590 --> 00:34:34,168
you are doing it this way you're doing a

858
00:34:34,168 --> 00:34:36,290
transparent proxy so make sure your burp

859
00:34:36,290 --> 00:34:38,580
realizes that it's being used as a

860
00:34:38,580 --> 00:34:40,050
transparent proxy because what it's

861
00:34:40,050 --> 00:34:41,610
going to do is it's going to inspect the

862
00:34:41,610 --> 00:34:44,159
headers of the network traffic because

863
00:34:44,159 --> 00:34:46,050
the client isn't going to include the

864
00:34:46,050 --> 00:34:47,639
proxy headers because the client doesn't

865
00:34:47,639 --> 00:34:49,530
know it's going through a proxy so you

866
00:34:49,530 --> 00:34:51,330
need to tell burp to be ready for that

867
00:34:51,330 --> 00:34:53,159
burp needs to do extra work for it and

868
00:34:53,159 --> 00:34:55,320
now you start to see traffic going

869
00:34:55,320 --> 00:34:57,660
through the the the burp proxy this is

870
00:34:57,660 --> 00:34:59,280
where you should see the traffic and the

871
00:34:59,280 --> 00:35:01,020
plain text stuff is just available and

872
00:35:01,020 --> 00:35:02,460
there is still plain text stuff coming

873
00:35:02,460 --> 00:35:04,230
off of your mobile device and that would

874
00:35:04,230 --> 00:35:05,820
be an opportunity to attack you if

875
00:35:05,820 --> 00:35:07,470
there's any plain text stuff coming off

876
00:35:07,470 --> 00:35:10,700
if you're on a malicious network okay so

877
00:35:10,700 --> 00:35:12,750
the next thing that we need to do is

878
00:35:12,750 --> 00:35:14,220
basically start dealing with the TLS

879
00:35:14,220 --> 00:35:15,780
because we want to get inside of that as

880
00:35:15,780 --> 00:35:17,580
well we want to do TLS intercept we

881
00:35:17,580 --> 00:35:19,110
don't like it when it works what we want

882
00:35:19,110 --> 00:35:20,700
to do it so that we can see the traffic

883
00:35:20,700 --> 00:35:23,190
inside there now burp actually serves up

884
00:35:23,190 --> 00:35:26,070
a de our format file if you go to the to

885
00:35:26,070 --> 00:35:30,240
the CA directory so what you can do is

886
00:35:30,240 --> 00:35:32,360
after you download that de our file

887
00:35:32,360 --> 00:35:34,470
you're going to run this command open

888
00:35:34,470 --> 00:35:35,369
SSL x5

889
00:35:35,369 --> 00:35:38,940
in form de are out form p.m. in and then

890
00:35:38,940 --> 00:35:40,799
the ca serves up de are whatever the

891
00:35:40,799 --> 00:35:42,180
name of the file is that you downloaded

892
00:35:42,180 --> 00:35:46,170
and then out CA cert em and then you can

893
00:35:46,170 --> 00:35:49,499
basically host this Python 2.7 sorry

894
00:35:49,499 --> 00:35:52,680
- am simple HTTP server 1990 that's the

895
00:35:52,680 --> 00:35:54,680
listening port then you connect to that

896
00:35:54,680 --> 00:35:59,519
that interface download that from the

897
00:35:59,519 --> 00:36:01,799
mobile device save it on the on the

898
00:36:01,799 --> 00:36:05,069
Android and then go to install that

899
00:36:05,069 --> 00:36:06,390
certificate in the settings security

900
00:36:06,390 --> 00:36:09,329
install from storage select that file

901
00:36:09,329 --> 00:36:12,269
that you just downloaded in CA cert and

902
00:36:12,269 --> 00:36:14,670
install it now you installed that into

903
00:36:14,670 --> 00:36:16,920
the user trust store and current Android

904
00:36:16,920 --> 00:36:22,470
devices actually won't allow the cert to

905
00:36:22,470 --> 00:36:26,190
be trusted if you put it in the user

906
00:36:26,190 --> 00:36:28,529
store unless the application

907
00:36:28,529 --> 00:36:31,019
specifically authorizes the user

908
00:36:31,019 --> 00:36:35,119
certificate storage for trusting

909
00:36:35,119 --> 00:36:40,619
certificate CAS for TLS certain it's

910
00:36:40,619 --> 00:36:42,569
confusing but basically on the Android

911
00:36:42,569 --> 00:36:44,519
device there are two different storage

912
00:36:44,519 --> 00:36:46,859
containers for certification authorities

913
00:36:46,859 --> 00:36:48,420
the system container and the user

914
00:36:48,420 --> 00:36:51,749
container and the applications usually

915
00:36:51,749 --> 00:36:54,769
specify only trust the system container

916
00:36:54,769 --> 00:36:57,119
but as it turns out you can change that

917
00:36:57,119 --> 00:36:59,009
and this is one of the manipulation

918
00:36:59,009 --> 00:37:02,130
things that you can do which is take an

919
00:37:02,130 --> 00:37:04,710
APK D compile it using a PK tool and

920
00:37:04,710 --> 00:37:08,339
then change the code you have to rewrite

921
00:37:08,339 --> 00:37:09,809
the damaged byte code but you can also

922
00:37:09,809 --> 00:37:11,390
just rewrite things like the

923
00:37:11,390 --> 00:37:14,009
configuration specifications and if you

924
00:37:14,009 --> 00:37:16,410
apktool decompile there's a directory

925
00:37:16,410 --> 00:37:19,140
called res XML and inside of res XML

926
00:37:19,140 --> 00:37:21,059
there is a specification called Network

927
00:37:21,059 --> 00:37:23,130
underscore security underscore config

928
00:37:23,130 --> 00:37:25,529
dot XML you can go into the network

929
00:37:25,529 --> 00:37:27,509
security config base config trust

930
00:37:27,509 --> 00:37:29,339
anchors and add a line which says

931
00:37:29,339 --> 00:37:32,249
certificates source equals user and now

932
00:37:32,249 --> 00:37:35,099
all of a sudden that apk once you

933
00:37:35,099 --> 00:37:37,230
recompile it and reinstall it but

934
00:37:37,230 --> 00:37:39,839
remember you can sign it with anything

935
00:37:39,839 --> 00:37:41,339
you want because there's no authority

936
00:37:41,339 --> 00:37:43,710
which says that this is truly that

937
00:37:43,710 --> 00:37:46,589
particular apk it's so long as the user

938
00:37:46,589 --> 00:37:48,839
trusts the signature for

939
00:37:48,839 --> 00:37:51,539
the apk this now gets reinstalled

940
00:37:51,539 --> 00:37:56,009
modified and that actually works so the

941
00:37:56,009 --> 00:37:58,410
idea here is that you could on a rooted

942
00:37:58,410 --> 00:38:01,289
phone actually use magic I think that's

943
00:38:01,289 --> 00:38:04,859
how you say magic mask magic which is a

944
00:38:04,859 --> 00:38:08,819
module to mask the presence of a rooted

945
00:38:08,819 --> 00:38:11,039
environment and there's actually a and

946
00:38:11,039 --> 00:38:15,150
vis Oh magic module which will take the

947
00:38:15,150 --> 00:38:18,089
user searched store and copy it into the

948
00:38:18,089 --> 00:38:20,099
system search store at startup so you

949
00:38:20,099 --> 00:38:21,630
don't have to redo that on the apks

950
00:38:21,630 --> 00:38:23,519
because some applications are actually

951
00:38:23,519 --> 00:38:26,099
resistant to being rewritten they

952
00:38:26,099 --> 00:38:27,779
actually do checks because they know

953
00:38:27,779 --> 00:38:29,849
that people like you are doing this

954
00:38:29,849 --> 00:38:33,150
right so this is this is a useful tool

955
00:38:33,150 --> 00:38:34,499
it's one of the other things that you

956
00:38:34,499 --> 00:38:36,390
can do in terms of manipulation and

957
00:38:36,390 --> 00:38:40,170
change I do want to add my opinion about

958
00:38:40,170 --> 00:38:42,479
rooted phones is do not use a rooted

959
00:38:42,479 --> 00:38:44,999
phone as your daily phone okay if you do

960
00:38:44,999 --> 00:38:47,759
this sort of work or if you're

961
00:38:47,759 --> 00:38:49,680
interested in if you're if you're doing

962
00:38:49,680 --> 00:38:51,690
this as sort of a convenience thing have

963
00:38:51,690 --> 00:38:54,779
a separate phone which is for your

964
00:38:54,779 --> 00:38:57,630
research and use for your daily phone

965
00:38:57,630 --> 00:39:00,349
the most protected phone that you can

966
00:39:00,349 --> 00:39:03,479
now that being said that is my guidance

967
00:39:03,479 --> 00:39:06,119
and if you know what you're doing and

968
00:39:06,119 --> 00:39:09,170
you're willing to take risks I actually

969
00:39:09,170 --> 00:39:11,789
understand that I just hope that you

970
00:39:11,789 --> 00:39:13,229
don't hurt yourself and I hope that

971
00:39:13,229 --> 00:39:15,539
someone isn't able to hurt you because

972
00:39:15,539 --> 00:39:17,369
something happens to you that you didn't

973
00:39:17,369 --> 00:39:19,529
anticipate I mean it's sort of like this

974
00:39:19,529 --> 00:39:21,839
you're not aware that that bad thing

975
00:39:21,839 --> 00:39:24,359
could happen until after it happens my

976
00:39:24,359 --> 00:39:26,849
suggestion to you is don't run a rooted

977
00:39:26,849 --> 00:39:29,609
phone as your daily driver and a lot of

978
00:39:29,609 --> 00:39:32,219
other security professionals would not

979
00:39:32,219 --> 00:39:34,140
agree with me on that but a lot would

980
00:39:34,140 --> 00:39:37,890
this is you take my advice and do

981
00:39:37,890 --> 00:39:40,229
whatever you want with it now now that

982
00:39:40,229 --> 00:39:41,789
we've got man in the middle it depends

983
00:39:41,789 --> 00:39:44,430
basically on like what the app does in

984
00:39:44,430 --> 00:39:46,969
terms of in terms of dealing with this

985
00:39:46,969 --> 00:39:48,150
okay

986
00:39:48,150 --> 00:39:50,849
so if there is sir pinning then we need

987
00:39:50,849 --> 00:39:52,469
to do runtime manipulation in order to

988
00:39:52,469 --> 00:39:54,269
disable this and you can I'll talk about

989
00:39:54,269 --> 00:39:56,670
runtime manipulation in a second I would

990
00:39:56,670 --> 00:39:58,349
also suggest that while you're doing

991
00:39:58,349 --> 00:40:00,450
this sort of observation of the network

992
00:40:00,450 --> 00:40:01,440
that you run

993
00:40:01,440 --> 00:40:03,119
some sort of a full packet capture in

994
00:40:03,119 --> 00:40:05,130
order to watch what's there it's hard to

995
00:40:05,130 --> 00:40:09,030
watch this real-time so make it slow

996
00:40:09,030 --> 00:40:11,849
make it easier on yourself and this may

997
00:40:11,849 --> 00:40:13,410
not sound like it's easier but it really

998
00:40:13,410 --> 00:40:16,530
is start up the phone have all your

999
00:40:16,530 --> 00:40:18,780
collection running and then just let the

1000
00:40:18,780 --> 00:40:21,690
phone sit there for 20 minutes go make

1001
00:40:21,690 --> 00:40:24,150
your tea drink your coffee you know look

1002
00:40:24,150 --> 00:40:26,700
at your whatever you look at when you've

1003
00:40:26,700 --> 00:40:30,930
got idle time Instagram duolingo that's

1004
00:40:30,930 --> 00:40:32,550
what I use those are my two main months

1005
00:40:32,550 --> 00:40:35,339
my two main time wasters my donuts that

1006
00:40:35,339 --> 00:40:38,130
I'd love to eat duolingo and and

1007
00:40:38,130 --> 00:40:41,190
Instagram so so with this you basically

1008
00:40:41,190 --> 00:40:44,670
have this the circumstance of let it run

1009
00:40:44,670 --> 00:40:46,500
for a while just give yourself a

1010
00:40:46,500 --> 00:40:48,359
baseline this is useful for when you're

1011
00:40:48,359 --> 00:40:49,770
like do I need to pay attention to this

1012
00:40:49,770 --> 00:40:51,869
or not or what was that from if it was

1013
00:40:51,869 --> 00:40:53,400
in the 20 minutes when you literally

1014
00:40:53,400 --> 00:40:55,140
weren't doing anything went with the

1015
00:40:55,140 --> 00:40:57,089
phone you can basically say okay ignore

1016
00:40:57,089 --> 00:40:57,720
all that traffic

1017
00:40:57,720 --> 00:40:59,430
now you may actually care what that

1018
00:40:59,430 --> 00:41:01,710
traffic is but if you're looking at a

1019
00:41:01,710 --> 00:41:03,630
specific app that helps you to eliminate

1020
00:41:03,630 --> 00:41:06,450
that initially also just as a guidance

1021
00:41:06,450 --> 00:41:07,829
because I've made this mistake before

1022
00:41:07,829 --> 00:41:09,480
when you're going through and doing this

1023
00:41:09,480 --> 00:41:11,819
work don't click click click click click

1024
00:41:11,819 --> 00:41:13,349
click really fast

1025
00:41:13,349 --> 00:41:15,960
do it slowly write down the time of when

1026
00:41:15,960 --> 00:41:18,510
you did a certain thing and wait 15 or

1027
00:41:18,510 --> 00:41:21,240
30 seconds between each action you will

1028
00:41:21,240 --> 00:41:23,520
love yourself later if when you go back

1029
00:41:23,520 --> 00:41:25,380
you actually have the time and you can

1030
00:41:25,380 --> 00:41:28,140
correlate that time to the you know the

1031
00:41:28,140 --> 00:41:29,609
wireshark view of the network traffic

1032
00:41:29,609 --> 00:41:31,530
and you're like oh that's exactly when i

1033
00:41:31,530 --> 00:41:32,970
clicked that that makes perfect sense

1034
00:41:32,970 --> 00:41:35,010
but if you click click click click like

1035
00:41:35,010 --> 00:41:37,140
a normal user would then all of a sudden

1036
00:41:37,140 --> 00:41:38,520
it's like well which one actually

1037
00:41:38,520 --> 00:41:40,650
created this particular network request

1038
00:41:40,650 --> 00:41:43,200
it's much harder to look at it later and

1039
00:41:43,200 --> 00:41:45,900
assess what it's actually doing another

1040
00:41:45,900 --> 00:41:48,560
thing is if you have data entry

1041
00:41:48,560 --> 00:41:51,540
opportunities make it distinct so that

1042
00:41:51,540 --> 00:41:52,980
you can actually go look for those

1043
00:41:52,980 --> 00:41:55,260
things and then take all that stuff that

1044
00:41:55,260 --> 00:41:57,540
you put in and record what you put in

1045
00:41:57,540 --> 00:42:00,500
and then try variations on it base64

1046
00:42:00,500 --> 00:42:02,609
encrypted using you know various

1047
00:42:02,609 --> 00:42:07,530
encryption techniques you know md5 hash

1048
00:42:07,530 --> 00:42:09,780
it and then see if that stuff gets sent

1049
00:42:09,780 --> 00:42:12,240
if you know what you're looking for it's

1050
00:42:12,240 --> 00:42:15,150
easier to look for it so you

1051
00:42:15,150 --> 00:42:16,740
this is what we end up with most of the

1052
00:42:16,740 --> 00:42:18,720
time all these different conversations

1053
00:42:18,720 --> 00:42:20,940
we have to go filter through what app

1054
00:42:20,940 --> 00:42:22,920
was doing what this takes a bunch of

1055
00:42:22,920 --> 00:42:24,240
time so don't expect that you're going

1056
00:42:24,240 --> 00:42:25,530
to like look in Wireshark and all of a

1057
00:42:25,530 --> 00:42:27,600
sudden boom it's super easy I start with

1058
00:42:27,600 --> 00:42:29,610
the conversation to you in order to to

1059
00:42:29,610 --> 00:42:31,410
see what's there this is actually a nice

1060
00:42:31,410 --> 00:42:33,600
way to approach him another thing that

1061
00:42:33,600 --> 00:42:35,160
you can do behaviorally which is really

1062
00:42:35,160 --> 00:42:36,630
interesting is you do the filesystem

1063
00:42:36,630 --> 00:42:39,120
content now if you have a rooted or a

1064
00:42:39,120 --> 00:42:40,770
jailbroken phone and super easy to just

1065
00:42:40,770 --> 00:42:42,630
go grab the entirety the filesystem look

1066
00:42:42,630 --> 00:42:44,340
at it but if you don't have root on an

1067
00:42:44,340 --> 00:42:46,410
Android device you can actually use ADB

1068
00:42:46,410 --> 00:42:48,240
to pull a bunch of the files you'll

1069
00:42:48,240 --> 00:42:49,980
start to run into permission problems

1070
00:42:49,980 --> 00:42:53,670
with this but what you could do is

1071
00:42:53,670 --> 00:42:55,200
actually make a backup of the

1072
00:42:55,200 --> 00:42:57,120
application that you're interested in in

1073
00:42:57,120 --> 00:42:59,430
order to pull the files off of the phone

1074
00:42:59,430 --> 00:43:01,110
in order to be able to restore them

1075
00:43:01,110 --> 00:43:02,790
later but after you pull them off the

1076
00:43:02,790 --> 00:43:04,590
phone then you actually just look at

1077
00:43:04,590 --> 00:43:06,150
them and see what's there and see what's

1078
00:43:06,150 --> 00:43:08,220
dated inside of this and it's a lot

1079
00:43:08,220 --> 00:43:11,150
easier if you get a baseline by

1080
00:43:11,150 --> 00:43:14,540
installing the app completely plain

1081
00:43:14,540 --> 00:43:17,820
making a backup looking at the files

1082
00:43:17,820 --> 00:43:20,190
that are there use it a little bit like

1083
00:43:20,190 --> 00:43:22,950
create an account make a backup look at

1084
00:43:22,950 --> 00:43:24,720
what changed now this is the things

1085
00:43:24,720 --> 00:43:26,580
especially useful if you actually are

1086
00:43:26,580 --> 00:43:29,100
doing it in a predictable way where you

1087
00:43:29,100 --> 00:43:30,860
can then look at the Delta between

1088
00:43:30,860 --> 00:43:33,030
snapshots of the backups to see what's

1089
00:43:33,030 --> 00:43:35,130
actually happening so as an example you

1090
00:43:35,130 --> 00:43:37,980
can do ADB backup - f2 say this is the

1091
00:43:37,980 --> 00:43:39,840
file that I want to put out and then the

1092
00:43:39,840 --> 00:43:44,370
package of the installed application in

1093
00:43:44,370 --> 00:43:47,250
my experience you have to use that - F

1094
00:43:47,250 --> 00:43:50,490
if you're doing individual packages

1095
00:43:50,490 --> 00:43:52,740
otherwise it crashes if you don't

1096
00:43:52,740 --> 00:43:54,990
specify it and you're doing the entire

1097
00:43:54,990 --> 00:43:56,940
phone then that's fine but if you're

1098
00:43:56,940 --> 00:43:59,970
just doing one package the - F seems to

1099
00:43:59,970 --> 00:44:01,950
actually preserve things now the problem

1100
00:44:01,950 --> 00:44:02,880
is you're actually going to end up with

1101
00:44:02,880 --> 00:44:04,590
an encrypted backup it's going to

1102
00:44:04,590 --> 00:44:06,630
challenge you for passcode you have to

1103
00:44:06,630 --> 00:44:09,210
set the passcode and then you end up

1104
00:44:09,210 --> 00:44:10,590
with this data that you can't really do

1105
00:44:10,590 --> 00:44:12,600
anything with this is what the file will

1106
00:44:12,600 --> 00:44:15,330
look like Android backup for 1 AAS 256

1107
00:44:15,330 --> 00:44:16,650
and then there's some some stuff in

1108
00:44:16,650 --> 00:44:19,290
there which represents the the content

1109
00:44:19,290 --> 00:44:22,200
for the for the decryption and then

1110
00:44:22,200 --> 00:44:23,760
after that you've basically got the

1111
00:44:23,760 --> 00:44:25,530
encrypted data of the stuff that's there

1112
00:44:25,530 --> 00:44:27,660
but since you made the backup and you

1113
00:44:27,660 --> 00:44:29,250
know the passcode

1114
00:44:29,250 --> 00:44:31,920
then you can actually just dump the

1115
00:44:31,920 --> 00:44:34,980
stuff out now back up decrypt PL is old

1116
00:44:34,980 --> 00:44:36,960
it doesn't really work in most cases but

1117
00:44:36,960 --> 00:44:38,730
I mentioned it just because if you have

1118
00:44:38,730 --> 00:44:40,650
a much older version that might be a

1119
00:44:40,650 --> 00:44:42,690
tool that you can use for it but Android

1120
00:44:42,690 --> 00:44:45,510
backup extractor a beo jar is actually

1121
00:44:45,510 --> 00:44:46,740
the tool that you can use to get the

1122
00:44:46,740 --> 00:44:50,520
decrypted version of this back in order

1123
00:44:50,520 --> 00:44:52,980
to use a betr to decrypt the Android

1124
00:44:52,980 --> 00:44:55,140
backups you need a aes-256 support

1125
00:44:55,140 --> 00:44:57,870
aes-256 support only comes with an

1126
00:44:57,870 --> 00:44:59,700
additional crypto library read the

1127
00:44:59,700 --> 00:45:01,200
readme it's very straightforward you

1128
00:45:01,200 --> 00:45:02,820
download the crypto library

1129
00:45:02,820 --> 00:45:04,680
you make sure that you agree that you're

1130
00:45:04,680 --> 00:45:06,260
not going to export it to you know

1131
00:45:06,260 --> 00:45:09,870
nations which are and you know listed on

1132
00:45:09,870 --> 00:45:12,450
some list for the US government so don't

1133
00:45:12,450 --> 00:45:15,900
do that and then basically load it into

1134
00:45:15,900 --> 00:45:18,240
the directory and then and then it will

1135
00:45:18,240 --> 00:45:20,910
work with that particular backup so this

1136
00:45:20,910 --> 00:45:23,550
is the syntax of a Java jar a PE jar

1137
00:45:23,550 --> 00:45:24,510
because you're going to use that jar

1138
00:45:24,510 --> 00:45:28,050
file unpack the output is decrypted a B

1139
00:45:28,050 --> 00:45:30,300
and the thing that is the encrypted

1140
00:45:30,300 --> 00:45:35,270
backup file goes first then you can tar

1141
00:45:35,270 --> 00:45:39,210
xvf the decrypted Android backup and you

1142
00:45:39,210 --> 00:45:41,190
have the apps and then underneath apps

1143
00:45:41,190 --> 00:45:43,590
you've got each of the app packages in

1144
00:45:43,590 --> 00:45:46,140
this case they basically only did one so

1145
00:45:46,140 --> 00:45:48,120
you just have that one and then inside

1146
00:45:48,120 --> 00:45:51,230
of there there's a whole bunch of data

1147
00:45:51,230 --> 00:45:54,090
secret like databases or is where most

1148
00:45:54,090 --> 00:45:55,350
of the data is going to be there are

1149
00:45:55,350 --> 00:45:57,360
going to be some XML files as well that

1150
00:45:57,360 --> 00:45:59,550
might have some interesting data I'm

1151
00:45:59,550 --> 00:46:01,350
usually pretty lazy and if I'm just

1152
00:46:01,350 --> 00:46:03,150
looking for stuff I'll pretty much do

1153
00:46:03,150 --> 00:46:05,700
you know like a for loop for all the

1154
00:46:05,700 --> 00:46:07,380
different databases that I find on the

1155
00:46:07,380 --> 00:46:09,900
directory and then I do a dot dump and

1156
00:46:09,900 --> 00:46:11,580
then grep for items that I'm interested

1157
00:46:11,580 --> 00:46:13,740
in because I've usually put in specific

1158
00:46:13,740 --> 00:46:15,630
items that I know are easy to get back

1159
00:46:15,630 --> 00:46:17,670
and then I look what files contain that

1160
00:46:17,670 --> 00:46:21,360
so sequel Lite and then the the name dot

1161
00:46:21,360 --> 00:46:22,890
dump because you can go into an

1162
00:46:22,890 --> 00:46:24,510
interactive shell with sequel Lite but

1163
00:46:24,510 --> 00:46:26,700
you can also issue the Select commands

1164
00:46:26,700 --> 00:46:28,740
or other sequel Lite appropriate

1165
00:46:28,740 --> 00:46:29,970
commands at the command line to just

1166
00:46:29,970 --> 00:46:32,580
dump all the content out okay so that's

1167
00:46:32,580 --> 00:46:34,200
an easy way to start to go through the

1168
00:46:34,200 --> 00:46:35,610
mountain of data that you need to

1169
00:46:35,610 --> 00:46:39,270
inspect it's interesting if the if an

1170
00:46:39,270 --> 00:46:41,910
actor is taking data off by using the

1171
00:46:41,910 --> 00:46:42,520
app too

1172
00:46:42,520 --> 00:46:45,970
actually monitor you in my experience

1173
00:46:45,970 --> 00:46:48,520
most of the time that data gets written

1174
00:46:48,520 --> 00:46:50,800
to the file system in addition to

1175
00:46:50,800 --> 00:46:53,590
actually actual trading it why because

1176
00:46:53,590 --> 00:46:55,150
they don't always know that you're gonna

1177
00:46:55,150 --> 00:46:56,920
have network connectivity so they do

1178
00:46:56,920 --> 00:46:59,140
some sort of transient storage in order

1179
00:46:59,140 --> 00:47:00,610
to actual trade the stuff and they

1180
00:47:00,610 --> 00:47:02,020
figure a hell I'm already here what do I

1181
00:47:02,020 --> 00:47:04,270
care is this you know this you know

1182
00:47:04,270 --> 00:47:06,130
donor dieter doesn't care about this app

1183
00:47:06,130 --> 00:47:07,540
they're they're perfectly happy to keep

1184
00:47:07,540 --> 00:47:10,810
using it so whatever just you know let

1185
00:47:10,810 --> 00:47:14,740
it go so you're looking for trace data

1186
00:47:14,740 --> 00:47:17,590
that they may be extracting it might be

1187
00:47:17,590 --> 00:47:19,030
the data that's coming from this

1188
00:47:19,030 --> 00:47:21,760
specific app itself only but it might

1189
00:47:21,760 --> 00:47:24,520
also be data from other apps that this

1190
00:47:24,520 --> 00:47:27,730
app has used so interesting thing you

1191
00:47:27,730 --> 00:47:29,020
could go and like create a whole bunch

1192
00:47:29,020 --> 00:47:31,510
of fake contacts put them in to your

1193
00:47:31,510 --> 00:47:33,610
contact database and then look to see if

1194
00:47:33,610 --> 00:47:35,670
those contacts removed from the contact

1195
00:47:35,670 --> 00:47:38,610
content provider to this application now

1196
00:47:38,610 --> 00:47:41,920
it's supposed to actually request

1197
00:47:41,920 --> 00:47:42,790
permission for that

1198
00:47:42,790 --> 00:47:44,950
maybe you granted it when you installed

1199
00:47:44,950 --> 00:47:46,570
it and click - click click through it

1200
00:47:46,570 --> 00:47:49,060
text messages other things that are in

1201
00:47:49,060 --> 00:47:51,190
there anything that you typed any sort

1202
00:47:51,190 --> 00:47:53,500
of clips of anything where you were

1203
00:47:53,500 --> 00:47:56,170
speaking near the phone might also be

1204
00:47:56,170 --> 00:47:58,570
interesting to look for look for things

1205
00:47:58,570 --> 00:48:02,140
which look like recordings so other

1206
00:48:02,140 --> 00:48:04,960
things that help to make this easier Bob

1207
00:48:04,960 --> 00:48:07,180
SF is an awesome tool basically you can

1208
00:48:07,180 --> 00:48:08,950
get a docker instance and then just

1209
00:48:08,950 --> 00:48:11,350
start uploading apks into it and it'll

1210
00:48:11,350 --> 00:48:16,030
do static analysis iOS and apks now

1211
00:48:16,030 --> 00:48:19,300
there is a non docker version which will

1212
00:48:19,300 --> 00:48:23,020
allow behavioral analysis where you can

1213
00:48:23,020 --> 00:48:25,480
actually run it that depends on being

1214
00:48:25,480 --> 00:48:27,040
able to virtualize an instance in order

1215
00:48:27,040 --> 00:48:29,950
to run the APK so that is something that

1216
00:48:29,950 --> 00:48:31,990
you cannot do behavioral analysis in the

1217
00:48:31,990 --> 00:48:34,450
docker ice version but if you want to

1218
00:48:34,450 --> 00:48:36,640
try it the docker instance is fantastic

1219
00:48:36,640 --> 00:48:38,080
for it there's a whole bunch of

1220
00:48:38,080 --> 00:48:39,640
documentation that they have it's really

1221
00:48:39,640 --> 00:48:40,960
well maintained they have a very

1222
00:48:40,960 --> 00:48:43,960
inexpensive training class you know for

1223
00:48:43,960 --> 00:48:45,670
you to look at in terms of how to use

1224
00:48:45,670 --> 00:48:48,400
this particular tool andrew warns

1225
00:48:48,400 --> 00:48:51,010
another tool that does some sort of you

1226
00:48:51,010 --> 00:48:52,960
know automated analysis quark is an

1227
00:48:52,960 --> 00:48:54,700
older one that's that's there as well

1228
00:48:54,700 --> 00:48:56,440
next topic I want to talk

1229
00:48:56,440 --> 00:48:58,630
does the idea of runtime manipulation

1230
00:48:58,630 --> 00:49:00,640
there are several tools that I'm going

1231
00:49:00,640 --> 00:49:02,920
to talk about for this but the notion is

1232
00:49:02,920 --> 00:49:05,290
that you were going to change the

1233
00:49:05,290 --> 00:49:06,670
environment on the program while it's

1234
00:49:06,670 --> 00:49:08,440
running in order to facilitate your

1235
00:49:08,440 --> 00:49:10,780
inspection of it in order to basically

1236
00:49:10,780 --> 00:49:12,970
look at this you also have to think

1237
00:49:12,970 --> 00:49:15,099
about how this might be used at runtime

1238
00:49:15,099 --> 00:49:17,410
by malicious application to interact

1239
00:49:17,410 --> 00:49:19,990
with other applications to steal data

1240
00:49:19,990 --> 00:49:22,359
from them on Android inter process

1241
00:49:22,359 --> 00:49:24,550
communication is leveraged doing

1242
00:49:24,550 --> 00:49:27,220
something called an intent and this is

1243
00:49:27,220 --> 00:49:29,859
message passing within an application

1244
00:49:29,859 --> 00:49:32,740
and between applications now iOS

1245
00:49:32,740 --> 00:49:35,500
actually implements a restriction of a

1246
00:49:35,500 --> 00:49:38,230
chroot where the application doesn't

1247
00:49:38,230 --> 00:49:40,390
truly know the entirety the file system

1248
00:49:40,390 --> 00:49:43,510
Android actually the application runs

1249
00:49:43,510 --> 00:49:46,180
with a full view of the file system all

1250
00:49:46,180 --> 00:49:46,800
the time

1251
00:49:46,800 --> 00:49:51,030
iOS provides the different user space

1252
00:49:51,030 --> 00:49:53,380
sharing mechanisms like a document

1253
00:49:53,380 --> 00:49:55,270
picker and other sharing techniques

1254
00:49:55,270 --> 00:49:57,599
where I can do an action and they

1255
00:49:57,599 --> 00:50:00,550
previously supported URL extensions and

1256
00:50:00,550 --> 00:50:02,710
URL handlers so these are the ways that

1257
00:50:02,710 --> 00:50:05,170
you can move data between applications

1258
00:50:05,170 --> 00:50:08,920
on on iOS so if we want to assess the

1259
00:50:08,920 --> 00:50:10,390
inter-process communications that are

1260
00:50:10,390 --> 00:50:11,950
available in android we're probably

1261
00:50:11,950 --> 00:50:13,480
going to use Jarosz or in order to do

1262
00:50:13,480 --> 00:50:17,470
this needle has basically capability for

1263
00:50:17,470 --> 00:50:19,720
doing this on iOS it's not exactly

1264
00:50:19,720 --> 00:50:21,640
automated but it is a way that you can

1265
00:50:21,640 --> 00:50:24,730
actually inspect them your challenge is

1266
00:50:24,730 --> 00:50:26,230
really the amount of time that you have

1267
00:50:26,230 --> 00:50:28,180
to go start passing down through all

1268
00:50:28,180 --> 00:50:30,369
this so what you want to do is enumerate

1269
00:50:30,369 --> 00:50:32,859
the opportunity for interacting with the

1270
00:50:32,859 --> 00:50:35,829
app and then you're going to pass data

1271
00:50:35,829 --> 00:50:38,319
to it or pass no data to it and see if

1272
00:50:38,319 --> 00:50:41,650
it crashes if it crashes then there's an

1273
00:50:41,650 --> 00:50:44,020
opportunity for further investigation

1274
00:50:44,020 --> 00:50:47,079
and if an app crashes you have to know

1275
00:50:47,079 --> 00:50:49,660
that somebody else who's interested in

1276
00:50:49,660 --> 00:50:51,310
stealing data from that particular app

1277
00:50:51,310 --> 00:50:53,710
might be developing write that

1278
00:50:53,710 --> 00:50:56,680
discovering new exploit opportunities is

1279
00:50:56,680 --> 00:50:58,630
what the million dollar Club is now with

1280
00:50:58,630 --> 00:50:59,200
drozer

1281
00:50:59,200 --> 00:51:01,720
basically you don't need a rooted phone

1282
00:51:01,720 --> 00:51:04,270
to do this you will connect to the

1283
00:51:04,270 --> 00:51:06,060
instance out there on the virtual device

1284
00:51:06,060 --> 00:51:09,690
here or the IP address of the phone

1285
00:51:09,690 --> 00:51:11,640
it's actually installed there's tons of

1286
00:51:11,640 --> 00:51:13,500
capability inside of drozer that I'm not

1287
00:51:13,500 --> 00:51:15,270
really going down into the details of

1288
00:51:15,270 --> 00:51:18,090
it's all learn about it all makes sense

1289
00:51:18,090 --> 00:51:20,100
you just need to kind of start exploring

1290
00:51:20,100 --> 00:51:22,920
and have some ideas of what to what to

1291
00:51:22,920 --> 00:51:24,630
look for this is how you start with

1292
00:51:24,630 --> 00:51:26,880
drozer run app package attack surface

1293
00:51:26,880 --> 00:51:28,740
and then the package name that you want

1294
00:51:28,740 --> 00:51:30,630
to interact with this says that seven

1295
00:51:30,630 --> 00:51:32,580
activities are actually exported on this

1296
00:51:32,580 --> 00:51:35,370
particular guitar tuner application that

1297
00:51:35,370 --> 00:51:38,820
I was looking at right and then what I

1298
00:51:38,820 --> 00:51:40,770
can do is look at specific activities

1299
00:51:40,770 --> 00:51:43,620
using run app activity info the first

1300
00:51:43,620 --> 00:51:46,620
one was package attack attack surface

1301
00:51:46,620 --> 00:51:50,100
this one is app activity info and I need

1302
00:51:50,100 --> 00:51:52,800
to specify the activity that I'm

1303
00:51:52,800 --> 00:51:55,980
interested in specifically if I want to

1304
00:51:55,980 --> 00:51:58,380
start to mess with that particular

1305
00:51:58,380 --> 00:52:00,390
activity okay so I can get information

1306
00:52:00,390 --> 00:52:04,650
about the the activity on the on the

1307
00:52:04,650 --> 00:52:06,900
particular app then I have to go to the

1308
00:52:06,900 --> 00:52:08,220
source code and I'll talk about how to

1309
00:52:08,220 --> 00:52:09,810
do that in a second and look for

1310
00:52:09,810 --> 00:52:11,910
opportunities for extras when I can

1311
00:52:11,910 --> 00:52:13,950
start to shove data to that other thing

1312
00:52:13,950 --> 00:52:15,780
and also understand the type and

1313
00:52:15,780 --> 00:52:17,850
variable name that it expresses expects

1314
00:52:17,850 --> 00:52:20,460
me to pass when I send over the extra

1315
00:52:20,460 --> 00:52:23,820
good and the interesting example of this

1316
00:52:23,820 --> 00:52:25,530
came out recently were actually Android

1317
00:52:25,530 --> 00:52:27,780
was vulnerable to one application

1318
00:52:27,780 --> 00:52:31,260
triggering the the camera to actually

1319
00:52:31,260 --> 00:52:34,110
take photos so this is the sort of way

1320
00:52:34,110 --> 00:52:35,580
that an attacker might leverage this if

1321
00:52:35,580 --> 00:52:39,540
I can trigger an AK and a in an intent

1322
00:52:39,540 --> 00:52:42,480
and say hey camera take a photograph for

1323
00:52:42,480 --> 00:52:44,070
me then maybe I could take a photograph

1324
00:52:44,070 --> 00:52:46,080
when the phone sitting on the on the

1325
00:52:46,080 --> 00:52:48,540
desk or I could basically turn on the

1326
00:52:48,540 --> 00:52:49,950
microphone or something like that in

1327
00:52:49,950 --> 00:52:53,580
order to abuse the intent another

1328
00:52:53,580 --> 00:52:56,880
runtime tool is frita it basically

1329
00:52:56,880 --> 00:52:58,740
requires you to have some basic

1330
00:52:58,740 --> 00:53:00,540
programming knowledge a little bit of

1331
00:53:00,540 --> 00:53:02,610
understanding about what's capable for

1332
00:53:02,610 --> 00:53:05,850
for within an application it also is

1333
00:53:05,850 --> 00:53:07,770
useful to have a little bit of how

1334
00:53:07,770 --> 00:53:11,130
android apps are developed this is

1335
00:53:11,130 --> 00:53:12,840
something where you can run it up both

1336
00:53:12,840 --> 00:53:15,060
on an unrooted and a rooted device but

1337
00:53:15,060 --> 00:53:17,010
rooted is actually more powerful

1338
00:53:17,010 --> 00:53:19,980
circumstance another one that's awesome

1339
00:53:19,980 --> 00:53:21,510
in terms of runtime manipulation that's

1340
00:53:21,510 --> 00:53:23,109
a really cool idea is

1341
00:53:23,109 --> 00:53:27,180
artists now artist actually replaces the

1342
00:53:27,180 --> 00:53:31,410
compiled optimized executable which is

1343
00:53:31,410 --> 00:53:34,839
what is created out of the apk

1344
00:53:34,839 --> 00:53:37,809
classes.dex file and it does this after

1345
00:53:37,809 --> 00:53:39,730
the signature verification so you can

1346
00:53:39,730 --> 00:53:43,630
instrument the elf super cool idea so

1347
00:53:43,630 --> 00:53:45,489
you can check out some of the talk at

1348
00:53:45,489 --> 00:53:48,849
blackhat 2018 by Shran Sanh on artists

1349
00:53:48,849 --> 00:53:50,739
other ones that are out there I

1350
00:53:50,739 --> 00:53:53,559
mentioned needle for iOS objection

1351
00:53:53,559 --> 00:53:56,230
basically sits on top of Frida in order

1352
00:53:56,230 --> 00:53:58,359
to do some runtime stuff exposed Cydia

1353
00:53:58,359 --> 00:54:00,309
substrate there a whole bunch of tools

1354
00:54:00,309 --> 00:54:03,249
that help you to to do this I want to

1355
00:54:03,249 --> 00:54:04,509
talk a little bit about static code

1356
00:54:04,509 --> 00:54:07,329
analysis I all I also want to caution

1357
00:54:07,329 --> 00:54:08,980
you at this point like this is where it

1358
00:54:08,980 --> 00:54:10,749
you know before this point is where it

1359
00:54:10,749 --> 00:54:13,269
ends for a lot of people but don't be

1360
00:54:13,269 --> 00:54:15,009
afraid of static code you can actually

1361
00:54:15,009 --> 00:54:16,779
read it read it out loud if it's

1362
00:54:16,779 --> 00:54:18,819
difficult for you to understand this is

1363
00:54:18,819 --> 00:54:20,589
way more complex than the other stuff it

1364
00:54:20,589 --> 00:54:23,079
just takes time so first off you have to

1365
00:54:23,079 --> 00:54:26,200
actually acquire the apk my favorite way

1366
00:54:26,200 --> 00:54:28,509
to do it is to actually install ES File

1367
00:54:28,509 --> 00:54:30,910
Explorer you can also use real apk

1368
00:54:30,910 --> 00:54:32,589
leecher you can download them from the

1369
00:54:32,589 --> 00:54:35,440
internet you can use adb to include the

1370
00:54:35,440 --> 00:54:38,440
the APK file when you do the backup for

1371
00:54:38,440 --> 00:54:39,759
iOS to do this you need a jailbroken

1372
00:54:39,759 --> 00:54:42,130
phone I'm the best way to do it is

1373
00:54:42,130 --> 00:54:44,140
actually to do like dump decrypted on

1374
00:54:44,140 --> 00:54:45,970
the jailbroken phone to extract it out

1375
00:54:45,970 --> 00:54:48,759
what do you end up with assembly so if

1376
00:54:48,759 --> 00:54:50,799
you can read that great but that's what

1377
00:54:50,799 --> 00:54:53,380
you need to do sort of next my method

1378
00:54:53,380 --> 00:54:55,900
that I prefer install ES File Explorer

1379
00:54:55,900 --> 00:54:58,079
inside of there go to the app section

1380
00:54:58,079 --> 00:55:02,170
long press the app of interest then down

1381
00:55:02,170 --> 00:55:03,700
at the bottom I mean you can check

1382
00:55:03,700 --> 00:55:05,950
multiple as well click backup and what

1383
00:55:05,950 --> 00:55:09,609
it does is it actually dumps that apk to

1384
00:55:09,609 --> 00:55:11,980
the SD card backups directory and then

1385
00:55:11,980 --> 00:55:13,960
you have the permissions with adb to

1386
00:55:13,960 --> 00:55:16,599
pull that file off now you have the APK

1387
00:55:16,599 --> 00:55:19,390
write an apk SR just zip files so what

1388
00:55:19,390 --> 00:55:22,150
you can do is basically unzip it don't

1389
00:55:22,150 --> 00:55:23,470
work on the original one just in case

1390
00:55:23,470 --> 00:55:26,430
you screw something up unzip it and then

1391
00:55:26,430 --> 00:55:30,880
use the a XML printer to jar in order to

1392
00:55:30,880 --> 00:55:33,039
look at the Android manifest the Android

1393
00:55:33,039 --> 00:55:34,390
manifest declares a whole bunch of

1394
00:55:34,390 --> 00:55:36,430
permissions it shows what in ten

1395
00:55:36,430 --> 00:55:38,890
are actually available it declares all

1396
00:55:38,890 --> 00:55:40,870
of the activities it declares all the

1397
00:55:40,870 --> 00:55:42,490
services and broadcast receivers and

1398
00:55:42,490 --> 00:55:44,140
content providers that are in there and

1399
00:55:44,140 --> 00:55:45,880
so you should look inside of this to see

1400
00:55:45,880 --> 00:55:47,500
what permissions are declared because

1401
00:55:47,500 --> 00:55:49,870
the permissions actually specify what's

1402
00:55:49,870 --> 00:55:52,810
available for the thing to run okay and

1403
00:55:52,810 --> 00:55:55,390
so with a little bit of sort of

1404
00:55:55,390 --> 00:55:57,970
understanding of what permissions enable

1405
00:55:57,970 --> 00:55:59,620
an app to do you can start to look

1406
00:55:59,620 --> 00:56:01,960
through and see what's there I tend to

1407
00:56:01,960 --> 00:56:03,880
use GX most of the time but bytecode

1408
00:56:03,880 --> 00:56:06,100
viewer is an awesome option for this

1409
00:56:06,100 --> 00:56:07,930
because what bytecode viewer does is it

1410
00:56:07,930 --> 00:56:09,940
uses multiple different D compilers to

1411
00:56:09,940 --> 00:56:13,750
prevent to present the static code as D

1412
00:56:13,750 --> 00:56:15,670
compiled by multiple different ones so

1413
00:56:15,670 --> 00:56:17,500
if one doesn't do a good job you look at

1414
00:56:17,500 --> 00:56:20,140
the other one and so I don't usually use

1415
00:56:20,140 --> 00:56:23,260
decks to jar anymore Jeb I've used a

1416
00:56:23,260 --> 00:56:24,970
couple times Jeb is a commercial tool

1417
00:56:24,970 --> 00:56:27,190
but it makes a lot of the work that you

1418
00:56:27,190 --> 00:56:29,650
would do in static D compilation a lot a

1419
00:56:29,650 --> 00:56:32,860
lot easier simplify is another tool for

1420
00:56:32,860 --> 00:56:35,140
the obfuscated code simplify actually

1421
00:56:35,140 --> 00:56:37,090
removes a bunch of dead and obfuscated

1422
00:56:37,090 --> 00:56:40,600
code by running it in a small e instance

1423
00:56:40,600 --> 00:56:42,940
to see what code actually runs and what

1424
00:56:42,940 --> 00:56:46,080
the simplified version is of the code

1425
00:56:46,080 --> 00:56:48,540
there's also still a whole bunch of

1426
00:56:48,540 --> 00:56:50,680
obfuscated stuff that you may need to

1427
00:56:50,680 --> 00:56:53,470
fight with if you do this with any

1428
00:56:53,470 --> 00:56:56,290
frequency by Jeb it's a great tool but

1429
00:56:56,290 --> 00:56:58,570
if you don't want to pay for it you can

1430
00:56:58,570 --> 00:57:01,030
jad XD compiled at the command line then

1431
00:57:01,030 --> 00:57:03,250
you take the d compiled code and open it

1432
00:57:03,250 --> 00:57:06,420
up in Android studio read the code

1433
00:57:06,420 --> 00:57:10,780
actually refactor it rename it and then

1434
00:57:10,780 --> 00:57:12,580
you end up with comment and and refactor

1435
00:57:12,580 --> 00:57:15,940
code josh Wright has a great webcast on

1436
00:57:15,940 --> 00:57:17,620
how to do this and walks through some of

1437
00:57:17,620 --> 00:57:19,630
them so there's tons of tools that are

1438
00:57:19,630 --> 00:57:22,540
out there I have an old of view of a

1439
00:57:22,540 --> 00:57:24,250
whole bunch of tools I haven't updated

1440
00:57:24,250 --> 00:57:27,490
in a long time sorry there's also this

1441
00:57:27,490 --> 00:57:29,830
mobile app pen test cheat sheet which is

1442
00:57:29,830 --> 00:57:31,990
a really good resource for you to look

1443
00:57:31,990 --> 00:57:34,420
at in terms of what's there santoku

1444
00:57:34,420 --> 00:57:37,360
Colley mobi 2nd and roll AB are

1445
00:57:37,360 --> 00:57:39,160
basically platforms that you can start

1446
00:57:39,160 --> 00:57:40,810
to run the stuff on they don't have

1447
00:57:40,810 --> 00:57:42,340
everything that you need but they're

1448
00:57:42,340 --> 00:57:44,880
actually a really good start so I

1449
00:57:44,880 --> 00:57:47,950
suggest that you do this get better at

1450
00:57:47,950 --> 00:57:49,900
it and share your results with other

1451
00:57:49,900 --> 00:57:50,289
people

1452
00:57:50,289 --> 00:57:52,119
because it actually helps everybody by

1453
00:57:52,119 --> 00:57:54,009
doing this the more you do this the

1454
00:57:54,009 --> 00:57:56,019
better you get at it maybe a little more

1455
00:57:56,019 --> 00:57:58,239
paranoid you get as a result of it but

1456
00:57:58,239 --> 00:58:00,549
eventually you'll start to realize like

1457
00:58:00,549 --> 00:58:02,109
do I really want to give my data to

1458
00:58:02,109 --> 00:58:04,929
these companies or they do are they

1459
00:58:04,929 --> 00:58:06,819
doing things that are right and until

1460
00:58:06,819 --> 00:58:10,029
consumers actually demand that companies

1461
00:58:10,029 --> 00:58:12,549
protect the data appropriately and treat

1462
00:58:12,549 --> 00:58:14,709
their data with due concern and

1463
00:58:14,709 --> 00:58:17,439
consideration they're probably not going

1464
00:58:17,439 --> 00:58:20,589
to change right so more people looking

1465
00:58:20,589 --> 00:58:23,380
at it and addressing this problem is

1466
00:58:23,380 --> 00:58:26,229
actually going to help all of us I have

1467
00:58:26,229 --> 00:58:28,359
a whole bunch of slide decks available

1468
00:58:28,359 --> 00:58:30,609
for download including this one this one

1469
00:58:30,609 --> 00:58:32,859
will be available at this location this

1470
00:58:32,859 --> 00:58:34,839
links to a Google Drive inside of this

1471
00:58:34,839 --> 00:58:36,729
Google Drive are all the publicly shared

1472
00:58:36,729 --> 00:58:39,549
slide decks that I actually have and I

1473
00:58:39,549 --> 00:58:41,739
will say I do really want to hear your

1474
00:58:41,739 --> 00:58:43,150
thoughts on this so if you have things

1475
00:58:43,150 --> 00:58:46,089
that are of interest that you'd like to

1476
00:58:46,089 --> 00:58:48,099
share with me you can tweet it's

1477
00:58:48,099 --> 00:58:50,559
probably the easiest way if you were an

1478
00:58:50,559 --> 00:58:52,239
astute observer you sell my email

1479
00:58:52,239 --> 00:58:53,890
address earlier in the in the

1480
00:58:53,890 --> 00:58:55,599
presentation you can go back and grab

1481
00:58:55,599 --> 00:58:59,140
that and email me another than that

1482
00:58:59,140 --> 00:59:01,059
thanks for your time and intention and

1483
00:59:01,059 --> 00:59:04,589
happy hacking

1484
00:59:09,630 --> 00:59:11,690
you

