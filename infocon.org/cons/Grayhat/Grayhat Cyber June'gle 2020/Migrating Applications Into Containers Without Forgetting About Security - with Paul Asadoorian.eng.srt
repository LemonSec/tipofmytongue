1
00:00:00,240 --> 00:00:02,159
hello everybody and welcome to the third

2
00:00:02,159 --> 00:00:03,280
event or the

3
00:00:03,280 --> 00:00:05,040
second virtual conference of the year

4
00:00:05,040 --> 00:00:07,040
for this joint team

5
00:00:07,040 --> 00:00:08,960
this uh joint conference is uh brought

6
00:00:08,960 --> 00:00:10,480
to you by the red team

7
00:00:10,480 --> 00:00:12,480
village the def con red team village and

8
00:00:12,480 --> 00:00:14,320
texas cyber summit

9
00:00:14,320 --> 00:00:15,920
our goal with these one and two day

10
00:00:15,920 --> 00:00:18,160
events is to first provide quality

11
00:00:18,160 --> 00:00:19,920
training from well-known and respected

12
00:00:19,920 --> 00:00:21,600
cyber security professionals in our

13
00:00:21,600 --> 00:00:22,720
industry

14
00:00:22,720 --> 00:00:24,800
and second to educate as many people as

15
00:00:24,800 --> 00:00:27,439
possible for free

16
00:00:27,439 --> 00:00:29,199
and third to get a better handle on

17
00:00:29,199 --> 00:00:30,960
streaming and collaborative technology

18
00:00:30,960 --> 00:00:32,960
we use in these virtual events

19
00:00:32,960 --> 00:00:34,880
we have def con coming up in august so

20
00:00:34,880 --> 00:00:36,880
we want to be prepared for that as well

21
00:00:36,880 --> 00:00:39,600
and then finally and most importantly um

22
00:00:39,600 --> 00:00:41,280
any money that we raise

23
00:00:41,280 --> 00:00:45,039
goes to charity um and then finally

24
00:00:45,039 --> 00:00:46,640
we're providing these briefings and

25
00:00:46,640 --> 00:00:48,480
workshops for free we have a high

26
00:00:48,480 --> 00:00:51,120
quality of uh standard for ourself

27
00:00:51,120 --> 00:00:52,719
and our mission is to provide you with

28
00:00:52,719 --> 00:00:55,280
the best possible experience

29
00:00:55,280 --> 00:00:57,280
please understand that things may and

30
00:00:57,280 --> 00:00:58,640
will likely go wrong

31
00:00:58,640 --> 00:01:00,480
during the next two days and we ask for

32
00:01:00,480 --> 00:01:02,719
your patience

33
00:01:02,719 --> 00:01:05,199
our lineup over the next two days is 23

34
00:01:05,199 --> 00:01:05,840
briefings

35
00:01:05,840 --> 00:01:09,680
and 16 trainings 16 hands-on trainings

36
00:01:09,680 --> 00:01:11,520
thank you to all of our speakers

37
00:01:11,520 --> 00:01:13,520
trainers and volunteers who helped make

38
00:01:13,520 --> 00:01:14,880
this possible

39
00:01:14,880 --> 00:01:16,640
and now omar will discuss the other

40
00:01:16,640 --> 00:01:18,080
events taking place uh

41
00:01:18,080 --> 00:01:21,040
during this two-day event awesome thank

42
00:01:21,040 --> 00:01:21,600
you

43
00:01:21,600 --> 00:01:24,720
joseph and i'm between you guys and an

44
00:01:24,720 --> 00:01:26,159
amazing speaker so i'm going to be very

45
00:01:26,159 --> 00:01:26,960
very brief

46
00:01:26,960 --> 00:01:30,079
we have a very i guess you know an honor

47
00:01:30,079 --> 00:01:31,360
to have

48
00:01:31,360 --> 00:01:33,600
the lineup of speakers as joseph

49
00:01:33,600 --> 00:01:35,280
mentioned but we also have two amazing

50
00:01:35,280 --> 00:01:36,400
contests today

51
00:01:36,400 --> 00:01:39,119
we have an awesome ctf that if you

52
00:01:39,119 --> 00:01:40,159
haven't registered

53
00:01:40,159 --> 00:01:41,520
please do so i think that actually just

54
00:01:41,520 --> 00:01:43,759
started right now so we've been fairly

55
00:01:43,759 --> 00:01:45,840
little too late we also have an esports

56
00:01:45,840 --> 00:01:48,320
is the first esports event

57
00:01:48,320 --> 00:01:50,880
for uh cyber security you know scenarios

58
00:01:50,880 --> 00:01:51,600
and so those

59
00:01:51,600 --> 00:01:52,960
two are competitions so we're going to

60
00:01:52,960 --> 00:01:55,040
announce the winners tomorrow

61
00:01:55,040 --> 00:01:57,680
at the closest ceremony so stay tuned

62
00:01:57,680 --> 00:01:58,479
throughout

63
00:01:58,479 --> 00:02:00,079
please participate in our discord

64
00:02:00,079 --> 00:02:01,600
channels that's where most of the

65
00:02:01,600 --> 00:02:03,520
conversations are actually going to be

66
00:02:03,520 --> 00:02:04,719
all the speakers are going to be hanging

67
00:02:04,719 --> 00:02:06,719
out in there so thank you again and i'll

68
00:02:06,719 --> 00:02:08,318
pass it back to you joseph

69
00:02:08,318 --> 00:02:11,440
thank you and uh our event is uh named

70
00:02:11,440 --> 00:02:14,720
jungle after june and uh or jungle

71
00:02:14,720 --> 00:02:16,879
misspelled a little bit um and our

72
00:02:16,879 --> 00:02:17,920
keynote uh

73
00:02:17,920 --> 00:02:22,239
for the jungle event um is a headhunter

74
00:02:22,239 --> 00:02:24,800
instead of a keynote get it is none

75
00:02:24,800 --> 00:02:25,680
other than

76
00:02:25,680 --> 00:02:28,720
mr paul essedorian who will not be doing

77
00:02:28,720 --> 00:02:29,440
a keynote

78
00:02:29,440 --> 00:02:32,480
uh but we'll be doing rather a technical

79
00:02:32,480 --> 00:02:34,000
talk on containers

80
00:02:34,000 --> 00:02:36,160
and now i am going to turn it over to

81
00:02:36,160 --> 00:02:38,319
paul thank you paul for joining us

82
00:02:38,319 --> 00:02:40,400
joseph omar thank you so much for having

83
00:02:40,400 --> 00:02:43,200
me today it's a great opportunity to uh

84
00:02:43,200 --> 00:02:44,239
present

85
00:02:44,239 --> 00:02:46,239
uh and share some of the things that

86
00:02:46,239 --> 00:02:48,080
i've learned about containers and spend

87
00:02:48,080 --> 00:02:49,360
some time banging my head against the

88
00:02:49,360 --> 00:02:50,080
wall and

89
00:02:50,080 --> 00:02:53,360
hopefully it helps all of you out there

90
00:02:53,360 --> 00:02:56,800
um so let me just share my screen

91
00:02:56,800 --> 00:02:59,599
get my slides going hopefully i've got

92
00:02:59,599 --> 00:03:00,400
all my

93
00:03:00,400 --> 00:03:02,879
notifications turned off i'm sure we all

94
00:03:02,879 --> 00:03:04,319
go through that

95
00:03:04,319 --> 00:03:07,760
so um this talk actually stemmed from

96
00:03:07,760 --> 00:03:11,599
uh about a year or so ago i committed to

97
00:03:11,599 --> 00:03:12,239
running

98
00:03:12,239 --> 00:03:14,800
with uh myself and matt alderman running

99
00:03:14,800 --> 00:03:16,840
a container security day for infosec

100
00:03:16,840 --> 00:03:18,000
world

101
00:03:18,000 --> 00:03:20,640
and it was originally about migrating

102
00:03:20,640 --> 00:03:22,959
legacy applications into containers

103
00:03:22,959 --> 00:03:24,400
i've kind of changed it into really

104
00:03:24,400 --> 00:03:26,159
migrating any application into

105
00:03:26,159 --> 00:03:27,680
containers and we'll talk a little bit

106
00:03:27,680 --> 00:03:29,840
about the differences between

107
00:03:29,840 --> 00:03:32,400
your own software or your organizations

108
00:03:32,400 --> 00:03:34,400
or enterprises own software being inside

109
00:03:34,400 --> 00:03:35,920
containers

110
00:03:35,920 --> 00:03:38,159
and open source software that you might

111
00:03:38,159 --> 00:03:40,319
configure inside of containers or

112
00:03:40,319 --> 00:03:41,440
containers

113
00:03:41,440 --> 00:03:43,519
oftentimes in my case in most people's

114
00:03:43,519 --> 00:03:46,319
cases i think contain both um

115
00:03:46,319 --> 00:03:48,400
so that's where everything here is kind

116
00:03:48,400 --> 00:03:49,760
of relevant to

117
00:03:49,760 --> 00:03:50,959
what you're doing whether you're writing

118
00:03:50,959 --> 00:03:53,360
custom code or you know deploying other

119
00:03:53,360 --> 00:03:55,840
applications that are open source

120
00:03:55,840 --> 00:03:58,879
or commercial for that matter um

121
00:03:58,879 --> 00:04:02,319
so just a little bit about uh the agenda

122
00:04:02,319 --> 00:04:04,799
so the good the bad about container

123
00:04:04,799 --> 00:04:05,760
deployments

124
00:04:05,760 --> 00:04:08,799
um i've been doing container deployments

125
00:04:08,799 --> 00:04:12,480
uh hands-on i started um

126
00:04:12,480 --> 00:04:16,238
in like 2016 or 17 or so

127
00:04:16,238 --> 00:04:19,358
maybe maybe four years ago uh i took

128
00:04:19,358 --> 00:04:22,320
our internal application uh which we

129
00:04:22,320 --> 00:04:24,560
lovingly call ppworks

130
00:04:24,560 --> 00:04:26,320
that does all of our podcast automation

131
00:04:26,320 --> 00:04:28,560
today uh back then it was largely just

132
00:04:28,560 --> 00:04:29,360
publishing

133
00:04:29,360 --> 00:04:30,479
and i took that and put that in

134
00:04:30,479 --> 00:04:31,759
containers and i've been you know

135
00:04:31,759 --> 00:04:34,000
working on that application ever since

136
00:04:34,000 --> 00:04:36,720
um mediawiki as some of our listeners

137
00:04:36,720 --> 00:04:38,280
may know if you go to

138
00:04:38,280 --> 00:04:39,759
wiki.securityweekly.com

139
00:04:39,759 --> 00:04:42,160
um that's a wiki that we use to host all

140
00:04:42,160 --> 00:04:43,759
of our show notes pages

141
00:04:43,759 --> 00:04:46,960
uh and that's deployed on uh containers

142
00:04:46,960 --> 00:04:47,759
as well

143
00:04:47,759 --> 00:04:50,880
uh so i actively help maintain uh

144
00:04:50,880 --> 00:04:52,800
and develop both of those applications

145
00:04:52,800 --> 00:04:55,199
today and much of what's in here is

146
00:04:55,199 --> 00:04:56,800
really what i've learned

147
00:04:56,800 --> 00:04:59,040
a lot with those two deployments and

148
00:04:59,040 --> 00:05:00,400
some other testing that i've done as

149
00:05:00,400 --> 00:05:01,680
well

150
00:05:01,680 --> 00:05:03,520
i've got six tips for deploying and

151
00:05:03,520 --> 00:05:05,759
securing containers

152
00:05:05,759 --> 00:05:08,800
regardless you know of your deployment

153
00:05:08,800 --> 00:05:10,160
i think it's really important to

154
00:05:10,160 --> 00:05:11,840
understand that the basic building

155
00:05:11,840 --> 00:05:13,440
blocks and fundamentals inside the

156
00:05:13,440 --> 00:05:14,639
container

157
00:05:14,639 --> 00:05:17,680
will stay and be a constant no matter

158
00:05:17,680 --> 00:05:19,759
where you're deploying your containers

159
00:05:19,759 --> 00:05:22,320
now other security layers and options

160
00:05:22,320 --> 00:05:24,080
and configuration need to be added when

161
00:05:24,080 --> 00:05:26,000
you do things such as kubernetes

162
00:05:26,000 --> 00:05:29,120
or you deploy out to ecs i unfortunately

163
00:05:29,120 --> 00:05:31,520
don't have any kubernetes examples

164
00:05:31,520 --> 00:05:33,360
i do have a couple of screens about some

165
00:05:33,360 --> 00:05:35,199
ecs i did a

166
00:05:35,199 --> 00:05:38,800
sample kind of an experiment in amazon's

167
00:05:38,800 --> 00:05:42,160
uh ecs or elastic container service

168
00:05:42,160 --> 00:05:44,560
i've not done much with kubernetes uh

169
00:05:44,560 --> 00:05:45,280
yet but

170
00:05:45,280 --> 00:05:47,520
you know look for future presentations

171
00:05:47,520 --> 00:05:49,039
uh you know later this year

172
00:05:49,039 --> 00:05:53,919
uh as i start to uh evaluate kubernetes

173
00:05:53,919 --> 00:05:56,080
and many examples of some working

174
00:05:56,080 --> 00:05:58,560
configurations and things that i've done

175
00:05:58,560 --> 00:06:00,000
pulling stuff down from docker hub

176
00:06:00,000 --> 00:06:03,199
changing it and making it my own

177
00:06:03,199 --> 00:06:04,960
of course i wish we could all be in the

178
00:06:04,960 --> 00:06:06,720
same room and hanging out together

179
00:06:06,720 --> 00:06:08,960
of course with covet 19 makes that very

180
00:06:08,960 --> 00:06:10,160
difficult

181
00:06:10,160 --> 00:06:11,759
but you know memes and my salt gun and

182
00:06:11,759 --> 00:06:13,919
scotch have been really keeping me going

183
00:06:13,919 --> 00:06:16,960
uh being at home so

184
00:06:16,960 --> 00:06:18,639
um so let's talk about the benefits of

185
00:06:18,639 --> 00:06:20,160
moving to containers why would you

186
00:06:20,160 --> 00:06:21,759
actually want to put something

187
00:06:21,759 --> 00:06:24,479
inside of a container it is becoming

188
00:06:24,479 --> 00:06:25,440
more common

189
00:06:25,440 --> 00:06:28,400
today a lot of people are moving to

190
00:06:28,400 --> 00:06:29,360
containers

191
00:06:29,360 --> 00:06:32,880
and even cloud native services which are

192
00:06:32,880 --> 00:06:35,280
using the cloud provider services to

193
00:06:35,280 --> 00:06:36,880
deploy your applications

194
00:06:36,880 --> 00:06:38,479
just kind of you know and i have a chart

195
00:06:38,479 --> 00:06:39,919
that'll show you some of the options

196
00:06:39,919 --> 00:06:40,479
there

197
00:06:40,479 --> 00:06:42,720
i think from an attacker's perspective

198
00:06:42,720 --> 00:06:44,240
you're probably going to find that

199
00:06:44,240 --> 00:06:46,639
more and more web applications are

200
00:06:46,639 --> 00:06:48,800
living inside of containers

201
00:06:48,800 --> 00:06:50,400
and that's largely because it's very

202
00:06:50,400 --> 00:06:52,160
easy to duplicate environments that's

203
00:06:52,160 --> 00:06:53,599
one of the biggest

204
00:06:53,599 --> 00:06:56,880
pluses from a defender's perspective

205
00:06:56,880 --> 00:06:57,919
because

206
00:06:57,919 --> 00:07:00,160
i can spin up an environment and test it

207
00:07:00,160 --> 00:07:01,520
and then spin it down

208
00:07:01,520 --> 00:07:04,080
i can you know upgrade all my packages

209
00:07:04,080 --> 00:07:05,120
and libraries

210
00:07:05,120 --> 00:07:08,000
spin up a new uh container set or you

211
00:07:08,000 --> 00:07:09,360
know multiple containers

212
00:07:09,360 --> 00:07:11,840
that run the application and see if my

213
00:07:11,840 --> 00:07:13,840
updates actually worked

214
00:07:13,840 --> 00:07:16,160
i think this is really for me my first

215
00:07:16,160 --> 00:07:18,160
initial impression was this is great

216
00:07:18,160 --> 00:07:20,560
for you know applications especially

217
00:07:20,560 --> 00:07:21,680
legacy ones

218
00:07:21,680 --> 00:07:23,440
that are using older frameworks

219
00:07:23,440 --> 00:07:25,440
components libraries and operating

220
00:07:25,440 --> 00:07:26,319
systems

221
00:07:26,319 --> 00:07:28,960
in a way to test that get it up on a

222
00:07:28,960 --> 00:07:30,160
stable platform

223
00:07:30,160 --> 00:07:33,039
and then start to iterate uh on

224
00:07:33,039 --> 00:07:33,680
upgrading

225
00:07:33,680 --> 00:07:35,680
all of those various components that

226
00:07:35,680 --> 00:07:37,280
your application

227
00:07:37,280 --> 00:07:40,400
resides on top of and

228
00:07:40,400 --> 00:07:42,960
be able to test those as you go so if

229
00:07:42,960 --> 00:07:44,960
you're tomcat version 4

230
00:07:44,960 --> 00:07:46,960
you've got a lot of work to do right

231
00:07:46,960 --> 00:07:48,720
containers can really

232
00:07:48,720 --> 00:07:51,360
help you get there now scalability is

233
00:07:51,360 --> 00:07:52,720
another thing i think that

234
00:07:52,720 --> 00:07:55,759
speaks to you know the ecs services

235
00:07:55,759 --> 00:07:57,360
kubernetes

236
00:07:57,360 --> 00:07:59,000
and lots and lots of other

237
00:07:59,000 --> 00:08:00,400
container-based

238
00:08:00,400 --> 00:08:02,800
services but containers do allow you to

239
00:08:02,800 --> 00:08:04,400
break apart your application into

240
00:08:04,400 --> 00:08:05,599
multiple pieces

241
00:08:05,599 --> 00:08:07,840
and afford some scalability as you can

242
00:08:07,840 --> 00:08:09,599
spin up multiple containers

243
00:08:09,599 --> 00:08:11,919
to handle the load i already touched

244
00:08:11,919 --> 00:08:13,759
upon some of the security use cases

245
00:08:13,759 --> 00:08:15,440
inside of you know putting your app

246
00:08:15,440 --> 00:08:16,960
inside of containers

247
00:08:16,960 --> 00:08:19,199
it does really speak to reducing your

248
00:08:19,199 --> 00:08:20,319
attack surface

249
00:08:20,319 --> 00:08:21,759
and i'll show you how to do that at

250
00:08:21,759 --> 00:08:24,240
least in my experience what i've done

251
00:08:24,240 --> 00:08:27,520
to reduce my attack surface now

252
00:08:27,520 --> 00:08:30,000
the downside again you're gonna take an

253
00:08:30,000 --> 00:08:30,800
application

254
00:08:30,800 --> 00:08:33,120
maybe it's a new application maybe it's

255
00:08:33,120 --> 00:08:35,200
an older legacy application

256
00:08:35,200 --> 00:08:36,640
and you're gonna put it inside of a

257
00:08:36,640 --> 00:08:38,240
container and

258
00:08:38,240 --> 00:08:40,159
what i really like to stress with folks

259
00:08:40,159 --> 00:08:41,760
you know whether we're talking about

260
00:08:41,760 --> 00:08:44,480
any type of virtualization in any type

261
00:08:44,480 --> 00:08:47,200
of containerization and or microservice

262
00:08:47,200 --> 00:08:49,680
it really doesn't matter if you've got

263
00:08:49,680 --> 00:08:51,040
an application

264
00:08:51,040 --> 00:08:53,760
that's basically a flaming piece of crap

265
00:08:53,760 --> 00:08:56,080
and you take that flaming piece of crap

266
00:08:56,080 --> 00:08:58,560
and you put it inside of a container you

267
00:08:58,560 --> 00:08:59,920
are still going to be

268
00:08:59,920 --> 00:09:01,600
you're still going to have a flaming

269
00:09:01,600 --> 00:09:03,519
piece of crap it's just running inside

270
00:09:03,519 --> 00:09:04,640
of a container

271
00:09:04,640 --> 00:09:07,600
right so i think a lot of people and

272
00:09:07,600 --> 00:09:08,480
don't get me wrong

273
00:09:08,480 --> 00:09:10,880
it is a good step to take your legacy

274
00:09:10,880 --> 00:09:12,160
application

275
00:09:12,160 --> 00:09:13,760
whether it's a flaming piece of crap or

276
00:09:13,760 --> 00:09:15,680
not i guess is somewhat subjective

277
00:09:15,680 --> 00:09:17,279
put that inside of a container that's a

278
00:09:17,279 --> 00:09:19,760
good first step um but realize there's

279
00:09:19,760 --> 00:09:22,080
there's very little inherent things

280
00:09:22,080 --> 00:09:23,920
inside of containers that

281
00:09:23,920 --> 00:09:26,399
will improve your application natively

282
00:09:26,399 --> 00:09:28,080
you still have to fix

283
00:09:28,080 --> 00:09:31,279
the security holes inside of your

284
00:09:31,279 --> 00:09:33,200
application

285
00:09:33,200 --> 00:09:35,839
legacy code is especially troubling as

286
00:09:35,839 --> 00:09:37,920
often times as many of us know

287
00:09:37,920 --> 00:09:40,320
that developers may have left the

288
00:09:40,320 --> 00:09:41,360
organization

289
00:09:41,360 --> 00:09:43,519
and left behind that code that no one

290
00:09:43,519 --> 00:09:45,920
wants to touch because it works

291
00:09:45,920 --> 00:09:48,000
so some of the downsides are security

292
00:09:48,000 --> 00:09:49,680
actually

293
00:09:49,680 --> 00:09:52,720
docker hub is getting better um some of

294
00:09:52,720 --> 00:09:54,240
the examples on the internet

295
00:09:54,240 --> 00:09:56,880
are getting better but when you're a

296
00:09:56,880 --> 00:09:59,279
developer or ops person

297
00:09:59,279 --> 00:10:00,880
or whatever and you're looking to deploy

298
00:10:00,880 --> 00:10:02,399
something on a container

299
00:10:02,399 --> 00:10:04,720
if you don't pay attention to where your

300
00:10:04,720 --> 00:10:06,800
configuration's coming from

301
00:10:06,800 --> 00:10:10,240
it very well may work great right but

302
00:10:10,240 --> 00:10:12,320
there are underlying security issues

303
00:10:12,320 --> 00:10:13,360
inside uh

304
00:10:13,360 --> 00:10:16,000
of a lot of those configurations and i

305
00:10:16,000 --> 00:10:17,200
think as developers

306
00:10:17,200 --> 00:10:19,279
especially you're like oh i just need a

307
00:10:19,279 --> 00:10:21,279
linux environment with node to run my

308
00:10:21,279 --> 00:10:22,560
application so

309
00:10:22,560 --> 00:10:24,079
i'll go to the internet in the first

310
00:10:24,079 --> 00:10:25,440
couple of results i can build my

311
00:10:25,440 --> 00:10:26,240
container

312
00:10:26,240 --> 00:10:27,519
that's going to give you a container

313
00:10:27,519 --> 00:10:30,079
with thousands of vulnerabilities

314
00:10:30,079 --> 00:10:32,079
and that's just in some of the packages

315
00:10:32,079 --> 00:10:33,360
and dependencies

316
00:10:33,360 --> 00:10:36,079
inside the operating system and inside

317
00:10:36,079 --> 00:10:38,160
of node as well

318
00:10:38,160 --> 00:10:40,480
so there's also a complexity standpoint

319
00:10:40,480 --> 00:10:41,519
as well

320
00:10:41,519 --> 00:10:43,040
it is more complex working with

321
00:10:43,040 --> 00:10:44,720
containers because

322
00:10:44,720 --> 00:10:47,279
you have to know the configuration of

323
00:10:47,279 --> 00:10:48,480
all your containers

324
00:10:48,480 --> 00:10:51,120
your application then may spread out

325
00:10:51,120 --> 00:10:53,040
into multiple containers

326
00:10:53,040 --> 00:10:56,000
you may um have configuration of you

327
00:10:56,000 --> 00:10:56,320
know

328
00:10:56,320 --> 00:11:00,000
your github account over to your jenkins

329
00:11:00,000 --> 00:11:02,640
build automation you've got if you're in

330
00:11:02,640 --> 00:11:04,959
amazon or some other cloud you've got

331
00:11:04,959 --> 00:11:07,200
their code to worry about their

332
00:11:07,200 --> 00:11:08,399
configuration

333
00:11:08,399 --> 00:11:10,480
you may write code you may use ansible

334
00:11:10,480 --> 00:11:12,720
scripts to generate terraform

335
00:11:12,720 --> 00:11:15,040
scripts to generate your environment you

336
00:11:15,040 --> 00:11:16,640
know inside of amazon

337
00:11:16,640 --> 00:11:18,560
and all that gets really complex really

338
00:11:18,560 --> 00:11:20,800
fast

339
00:11:20,800 --> 00:11:24,240
also containers heavily favor linux and

340
00:11:24,240 --> 00:11:25,680
you know i've done a little bit of

341
00:11:25,680 --> 00:11:27,200
reading and talking with folks about

342
00:11:27,200 --> 00:11:28,880
windows containers

343
00:11:28,880 --> 00:11:30,399
they do have to run in a windows

344
00:11:30,399 --> 00:11:31,920
environment

345
00:11:31,920 --> 00:11:34,880
the last i heard like late last year a

346
00:11:34,880 --> 00:11:36,880
lot of the feedback i was getting was

347
00:11:36,880 --> 00:11:38,480
you know people are using windows

348
00:11:38,480 --> 00:11:40,240
containers but not really using them in

349
00:11:40,240 --> 00:11:41,600
production it still

350
00:11:41,600 --> 00:11:43,680
wasn't quite ready for some in prime

351
00:11:43,680 --> 00:11:44,800
time uh

352
00:11:44,800 --> 00:11:47,040
of course if you are using a mixture of

353
00:11:47,040 --> 00:11:48,560
different uh

354
00:11:48,560 --> 00:11:50,959
containers and some of those are windows

355
00:11:50,959 --> 00:11:52,320
uh and you're doing that really well i'd

356
00:11:52,320 --> 00:11:54,000
love i'd love to hear from you

357
00:11:54,000 --> 00:11:55,440
as most of the feedback i've gotten is

358
00:11:55,440 --> 00:11:57,120
it's not it's not quite ready

359
00:11:57,120 --> 00:11:58,959
um so this presentation will very

360
00:11:58,959 --> 00:12:01,360
heavily uh focus on linux in the in

361
00:12:01,360 --> 00:12:04,079
linux based containers

362
00:12:04,079 --> 00:12:06,160
okay then it comes down to who's

363
00:12:06,160 --> 00:12:08,160
responsible for security

364
00:12:08,160 --> 00:12:10,480
and once you start uh building

365
00:12:10,480 --> 00:12:11,279
containers

366
00:12:11,279 --> 00:12:12,959
you're gonna need a place to host those

367
00:12:12,959 --> 00:12:14,720
containers and you're gonna have to make

368
00:12:14,720 --> 00:12:15,760
decisions

369
00:12:15,760 --> 00:12:18,000
and this isn't just one decision about

370
00:12:18,000 --> 00:12:19,200
one application

371
00:12:19,200 --> 00:12:21,920
every application might have a different

372
00:12:21,920 --> 00:12:23,200
deployment path

373
00:12:23,200 --> 00:12:26,399
your application may have

374
00:12:26,399 --> 00:12:28,959
some components that live on premise

375
00:12:28,959 --> 00:12:30,480
some components that live in

376
00:12:30,480 --> 00:12:32,399
infrastructure as a service

377
00:12:32,399 --> 00:12:34,639
some components that live in platform as

378
00:12:34,639 --> 00:12:35,680
a service

379
00:12:35,680 --> 00:12:37,760
some that live in functions ever as a

380
00:12:37,760 --> 00:12:40,160
service and some may even be

381
00:12:40,160 --> 00:12:43,200
in software as a service um you know our

382
00:12:43,200 --> 00:12:46,000
own application that we use today for

383
00:12:46,000 --> 00:12:47,680
security weekly to publish every single

384
00:12:47,680 --> 00:12:48,959
one of our shows

385
00:12:48,959 --> 00:12:50,720
and do all the business automation about

386
00:12:50,720 --> 00:12:52,079
which hosts and guests

387
00:12:52,079 --> 00:12:54,480
and stories and all that is really a

388
00:12:54,480 --> 00:12:57,040
combination of all these columns

389
00:12:57,040 --> 00:12:58,240
we use different pieces of

390
00:12:58,240 --> 00:13:00,720
infrastructure we rely on other

391
00:13:00,720 --> 00:13:03,839
api services that are sas based we've

392
00:13:03,839 --> 00:13:05,760
got on-premise infrastructure to be able

393
00:13:05,760 --> 00:13:09,120
to record all of our stuff as well

394
00:13:09,120 --> 00:13:12,079
so the responsibility for security

395
00:13:12,079 --> 00:13:13,040
shifts

396
00:13:13,040 --> 00:13:16,160
and you know as you rely on other

397
00:13:16,160 --> 00:13:18,000
people's infrastructure

398
00:13:18,000 --> 00:13:21,040
the further right you go on this chart

399
00:13:21,040 --> 00:13:24,079
the more of the security is really

400
00:13:24,079 --> 00:13:27,519
on the provider however you still have

401
00:13:27,519 --> 00:13:28,320
some

402
00:13:28,320 --> 00:13:30,240
responsibility for security even when we

403
00:13:30,240 --> 00:13:33,040
look at at sas based applications

404
00:13:33,040 --> 00:13:35,519
um when we look at functions of as a

405
00:13:35,519 --> 00:13:37,519
service and software as a service

406
00:13:37,519 --> 00:13:39,760
we lose that container security layer

407
00:13:39,760 --> 00:13:41,120
you can see that container turns from

408
00:13:41,120 --> 00:13:42,160
blue to

409
00:13:42,160 --> 00:13:45,040
purple we lose that container layer so

410
00:13:45,040 --> 00:13:46,880
we're not necessarily responsible for

411
00:13:46,880 --> 00:13:48,079
the

412
00:13:48,079 --> 00:13:50,160
security of the container we have to

413
00:13:50,160 --> 00:13:51,600
make sure that our application

414
00:13:51,600 --> 00:13:54,079
in our identity in the configuration

415
00:13:54,079 --> 00:13:55,040
inside

416
00:13:55,040 --> 00:13:57,040
of the various cloud and application

417
00:13:57,040 --> 00:13:59,440
providers are configured correctly

418
00:13:59,440 --> 00:14:02,560
so our job doesn't end as security and

419
00:14:02,560 --> 00:14:05,040
you know like i said you're gonna every

420
00:14:05,040 --> 00:14:06,720
everyone chooses a different path for

421
00:14:06,720 --> 00:14:08,800
every application and even pieces of the

422
00:14:08,800 --> 00:14:09,839
application

423
00:14:09,839 --> 00:14:12,000
that go across this chart which makes it

424
00:14:12,000 --> 00:14:13,199
very difficult

425
00:14:13,199 --> 00:14:15,680
for blue teams and uh you know ops

426
00:14:15,680 --> 00:14:16,720
people to

427
00:14:16,720 --> 00:14:19,600
maintain the same security as they did

428
00:14:19,600 --> 00:14:20,320
when

429
00:14:20,320 --> 00:14:22,000
we really only had that column on the

430
00:14:22,000 --> 00:14:25,519
very left for on premise

431
00:14:25,600 --> 00:14:28,000
um so as i said you know one just

432
00:14:28,000 --> 00:14:29,120
doesn't simply

433
00:14:29,120 --> 00:14:32,639
move to the cloud especially in the

434
00:14:32,639 --> 00:14:35,839
times of this global pandemic when

435
00:14:35,839 --> 00:14:38,160
many organizations are now readjusting

436
00:14:38,160 --> 00:14:39,839
priorities and looking to move to the

437
00:14:39,839 --> 00:14:41,040
cloud

438
00:14:41,040 --> 00:14:44,320
more and more folks are recognizing that

439
00:14:44,320 --> 00:14:48,240
this journey is not straightforward

440
00:14:48,240 --> 00:14:50,399
um so you know obviously you have on

441
00:14:50,399 --> 00:14:52,160
premise you could host containers on

442
00:14:52,160 --> 00:14:52,800
premise

443
00:14:52,800 --> 00:14:54,720
some people build basically their own

444
00:14:54,720 --> 00:14:57,440
cloud uh you know on premise

445
00:14:57,440 --> 00:14:59,760
and that's an option as you move into

446
00:14:59,760 --> 00:15:00,480
the cloud

447
00:15:00,480 --> 00:15:02,320
i use amazon as an example because

448
00:15:02,320 --> 00:15:04,320
that's where we're doing a lot of art

449
00:15:04,320 --> 00:15:04,959
development

450
00:15:04,959 --> 00:15:07,279
of course microsoft and google have

451
00:15:07,279 --> 00:15:08,720
options to do

452
00:15:08,720 --> 00:15:10,720
basically all of the same most of the

453
00:15:10,720 --> 00:15:12,880
same things that amazon can offer

454
00:15:12,880 --> 00:15:15,199
inside of the cloud so now you want to

455
00:15:15,199 --> 00:15:16,399
take your container you want to pick it

456
00:15:16,399 --> 00:15:17,920
up you want to move to the cloud

457
00:15:17,920 --> 00:15:20,560
you can run it on amazon's ec2 you can

458
00:15:20,560 --> 00:15:22,800
run it in amazon's ecs

459
00:15:22,800 --> 00:15:25,360
or you can run it in amazon's eks which

460
00:15:25,360 --> 00:15:27,760
is their hosted kubernetes

461
00:15:27,760 --> 00:15:29,360
and again this goes across multiple

462
00:15:29,360 --> 00:15:31,120
cloud providers um

463
00:15:31,120 --> 00:15:32,720
they all three of the major cloud

464
00:15:32,720 --> 00:15:35,920
providers do offer hosted

465
00:15:35,920 --> 00:15:39,120
kubernetes what i've heard is many

466
00:15:39,120 --> 00:15:40,320
enterprises

467
00:15:40,320 --> 00:15:42,320
uh and especially if you're a red teamer

468
00:15:42,320 --> 00:15:43,920
right this is important to learn how

469
00:15:43,920 --> 00:15:45,279
kubernetes works

470
00:15:45,279 --> 00:15:46,880
a lot of people get it wrong because it

471
00:15:46,880 --> 00:15:49,279
makes the configuration very complex

472
00:15:49,279 --> 00:15:51,040
and was not designed in the beginning

473
00:15:51,040 --> 00:15:52,320
for security

474
00:15:52,320 --> 00:15:54,560
but a lot of large enterprises are

475
00:15:54,560 --> 00:15:56,480
deploying kubernetes

476
00:15:56,480 --> 00:15:58,320
and they're going i want to move it to

477
00:15:58,320 --> 00:16:00,160
the cloud and then

478
00:16:00,160 --> 00:16:02,079
they do the deployment and they get the

479
00:16:02,079 --> 00:16:03,519
build they're like wow that's really

480
00:16:03,519 --> 00:16:04,639
expensive

481
00:16:04,639 --> 00:16:06,320
i want to move it back to on premise

482
00:16:06,320 --> 00:16:08,399
where i can control my costs

483
00:16:08,399 --> 00:16:10,320
um but it's still kubernetes and it

484
00:16:10,320 --> 00:16:11,600
still has all of the

485
00:16:11,600 --> 00:16:13,440
you know flaws especially the underlying

486
00:16:13,440 --> 00:16:14,959
ones we'll talk about today

487
00:16:14,959 --> 00:16:17,519
inside of containers um i won't touch

488
00:16:17,519 --> 00:16:19,040
too much on the cloud native stuff

489
00:16:19,040 --> 00:16:20,560
uh if you want to you know know more

490
00:16:20,560 --> 00:16:22,320
about that um

491
00:16:22,320 --> 00:16:24,160
you can ping me afterwards as well and

492
00:16:24,160 --> 00:16:25,839
if you really want to dig into it our

493
00:16:25,839 --> 00:16:27,279
full-time developer here

494
00:16:27,279 --> 00:16:28,959
at security weekly is working on that

495
00:16:28,959 --> 00:16:30,399
deployment very similar

496
00:16:30,399 --> 00:16:33,600
uh to the cloud native one

497
00:16:33,600 --> 00:16:35,920
um so defining your environments right

498
00:16:35,920 --> 00:16:37,759
uh this is largely what we'll be talking

499
00:16:37,759 --> 00:16:38,880
about today

500
00:16:38,880 --> 00:16:40,959
you've got a linux host somewhere maybe

501
00:16:40,959 --> 00:16:42,720
that's an ec2 instance maybe that's

502
00:16:42,720 --> 00:16:43,519
local

503
00:16:43,519 --> 00:16:45,440
you've got docker and you've got your

504
00:16:45,440 --> 00:16:46,880
containers on top of it

505
00:16:46,880 --> 00:16:48,880
you may also have kubernetes thrown into

506
00:16:48,880 --> 00:16:50,800
the mix when you do you still have your

507
00:16:50,800 --> 00:16:52,079
container config

508
00:16:52,079 --> 00:16:55,120
and these containers can be your uh you

509
00:16:55,120 --> 00:16:57,120
know a simple linux box it can be a

510
00:16:57,120 --> 00:16:59,440
pre-packaged mysql server that you're

511
00:16:59,440 --> 00:17:00,320
pulling down

512
00:17:00,320 --> 00:17:01,920
uh some other kind of open source

513
00:17:01,920 --> 00:17:04,240
application such as wordpress or you

514
00:17:04,240 --> 00:17:06,000
could have your own application written

515
00:17:06,000 --> 00:17:08,400
in node or python or some other language

516
00:17:08,400 --> 00:17:10,160
that's being deployed on containers or

517
00:17:10,160 --> 00:17:11,599
you could have a mix of them

518
00:17:11,599 --> 00:17:15,359
that make up your application

519
00:17:15,839 --> 00:17:17,679
i wanted to talk a little bit about this

520
00:17:17,679 --> 00:17:19,760
kind of changing shift into how we do

521
00:17:19,760 --> 00:17:20,880
security

522
00:17:20,880 --> 00:17:22,799
and i think what's more interesting for

523
00:17:22,799 --> 00:17:24,480
me is not so much the indicators of

524
00:17:24,480 --> 00:17:25,599
compromise

525
00:17:25,599 --> 00:17:27,359
um which is interesting but it's how a

526
00:17:27,359 --> 00:17:29,039
lot of the dynamics change

527
00:17:29,039 --> 00:17:31,280
on a lot of the teams we did a great

528
00:17:31,280 --> 00:17:33,200
interview with heather atkins

529
00:17:33,200 --> 00:17:36,480
uh she's uh the lead one of the lead

530
00:17:36,480 --> 00:17:38,000
security engineers

531
00:17:38,000 --> 00:17:41,039
uh at google um awesome awesome

532
00:17:41,039 --> 00:17:42,799
individual she came on the show she

533
00:17:42,799 --> 00:17:43,679
wrote a book

534
00:17:43,679 --> 00:17:46,400
about how engineering basically has

535
00:17:46,400 --> 00:17:47,440
changed

536
00:17:47,440 --> 00:17:49,360
and i can provide a link to that

537
00:17:49,360 --> 00:17:50,559
interview because it was really

538
00:17:50,559 --> 00:17:51,760
eye-opening to see

539
00:17:51,760 --> 00:17:54,480
how you know we're traditionally

540
00:17:54,480 --> 00:17:56,559
responsible for security as security

541
00:17:56,559 --> 00:17:58,720
professionals and we think of

542
00:17:58,720 --> 00:18:01,039
you know indicators of compromise as we

543
00:18:01,039 --> 00:18:03,360
need to gain visibility into the host

544
00:18:03,360 --> 00:18:05,039
we need to gain visibility into the

545
00:18:05,039 --> 00:18:07,520
network logs and maybe have some threat

546
00:18:07,520 --> 00:18:08,320
intelligence

547
00:18:08,320 --> 00:18:10,559
and these are kind of my four what i

548
00:18:10,559 --> 00:18:13,039
call enchanted quadrants that i use

549
00:18:13,039 --> 00:18:14,640
you know to talk about things like

550
00:18:14,640 --> 00:18:16,320
indicators of compromise

551
00:18:16,320 --> 00:18:19,120
and all these things get different and

552
00:18:19,120 --> 00:18:20,880
sometimes more difficult

553
00:18:20,880 --> 00:18:22,559
for example if you're looking to do some

554
00:18:22,559 --> 00:18:24,480
network tapping

555
00:18:24,480 --> 00:18:26,720
it's really some new innovation that

556
00:18:26,720 --> 00:18:29,280
exists inside of amazon's cloud

557
00:18:29,280 --> 00:18:31,039
that allow you to do that in in the

558
00:18:31,039 --> 00:18:32,559
cloud which is really cool

559
00:18:32,559 --> 00:18:34,640
but it's not always available to connect

560
00:18:34,640 --> 00:18:36,880
collect even in amazon's cloud they give

561
00:18:36,880 --> 00:18:38,480
you a great facility

562
00:18:38,480 --> 00:18:40,400
hooking into a vpc hooking into your

563
00:18:40,400 --> 00:18:42,320
network interfaces in the cloud

564
00:18:42,320 --> 00:18:44,559
doing a traffic mirror but when you

565
00:18:44,559 --> 00:18:45,919
start using some of those other cloud

566
00:18:45,919 --> 00:18:47,120
native services

567
00:18:47,120 --> 00:18:50,400
that traffic can be somewhat elusive

568
00:18:50,400 --> 00:18:52,080
so a lot of the traditional security

569
00:18:52,080 --> 00:18:53,840
things are still there they just might

570
00:18:53,840 --> 00:18:56,240
be a little more difficult to access

571
00:18:56,240 --> 00:18:58,160
and again with the host you know going

572
00:18:58,160 --> 00:18:59,840
back to the earlier chart

573
00:18:59,840 --> 00:19:02,000
going to the the host level you may not

574
00:19:02,000 --> 00:19:03,679
have access to the host level

575
00:19:03,679 --> 00:19:04,960
you may just be running a lambda

576
00:19:04,960 --> 00:19:06,160
function which is just running your

577
00:19:06,160 --> 00:19:09,360
python code for example

578
00:19:09,600 --> 00:19:12,559
um so the blue team enchanted quadrants

579
00:19:12,559 --> 00:19:13,120
um

580
00:19:13,120 --> 00:19:14,720
just really briefly this is kind of how

581
00:19:14,720 --> 00:19:16,960
i break down the four major areas

582
00:19:16,960 --> 00:19:20,000
uh for the blue team to apply security

583
00:19:20,000 --> 00:19:20,880
controls

584
00:19:20,880 --> 00:19:22,400
which all get different when we talk

585
00:19:22,400 --> 00:19:24,160
about containers right

586
00:19:24,160 --> 00:19:26,559
specifically asset management and

587
00:19:26,559 --> 00:19:28,320
vulnerability management gets super

588
00:19:28,320 --> 00:19:29,280
difficult

589
00:19:29,280 --> 00:19:32,080
because of the ephemeral nature and the

590
00:19:32,080 --> 00:19:34,000
immutability of containers

591
00:19:34,000 --> 00:19:35,919
means they can spin up and then they can

592
00:19:35,919 --> 00:19:37,440
spin down very easily

593
00:19:37,440 --> 00:19:40,000
they can be replaced by a new version

594
00:19:40,000 --> 00:19:41,679
usually several times a day

595
00:19:41,679 --> 00:19:43,360
if people are using a devops style

596
00:19:43,360 --> 00:19:45,440
approach and that makes things like

597
00:19:45,440 --> 00:19:47,280
vulnerability management

598
00:19:47,280 --> 00:19:49,440
well different i mean somewhat you know

599
00:19:49,440 --> 00:19:50,880
different challenges

600
00:19:50,880 --> 00:19:53,360
but also an opportunity to provide that

601
00:19:53,360 --> 00:19:55,600
continuous loop where i can continuously

602
00:19:55,600 --> 00:19:58,480
update my application that's a big plus

603
00:19:58,480 --> 00:20:00,240
for me in vulnerability management

604
00:20:00,240 --> 00:20:02,240
it makes asset management very very

605
00:20:02,240 --> 00:20:04,480
challenging uh due to the immutable

606
00:20:04,480 --> 00:20:07,679
nature of containers

607
00:20:07,679 --> 00:20:10,400
um where i really wanted to spend a

608
00:20:10,400 --> 00:20:11,600
little bit of time talking about the

609
00:20:11,600 --> 00:20:13,440
security skills because

610
00:20:13,440 --> 00:20:17,120
um i'm like old now right i'm in my 40s

611
00:20:17,120 --> 00:20:18,159
and i've been doing this

612
00:20:18,159 --> 00:20:21,360
you know for my entire career and i have

613
00:20:21,360 --> 00:20:23,039
these like kind of preconceived notions

614
00:20:23,039 --> 00:20:24,799
of what our role should be

615
00:20:24,799 --> 00:20:27,600
inside of it and in programming and

616
00:20:27,600 --> 00:20:29,600
traditionally right you had the security

617
00:20:29,600 --> 00:20:30,480
person

618
00:20:30,480 --> 00:20:33,039
you had you know the platform or the sys

619
00:20:33,039 --> 00:20:34,799
admin or the infrastructure

620
00:20:34,799 --> 00:20:37,600
person you had the network person or

621
00:20:37,600 --> 00:20:39,039
teams of people right

622
00:20:39,039 --> 00:20:40,799
you had the programmers and software

623
00:20:40,799 --> 00:20:42,880
developers and we all kind of worked

624
00:20:42,880 --> 00:20:43,919
independently

625
00:20:43,919 --> 00:20:45,760
and we maybe shared some things as time

626
00:20:45,760 --> 00:20:48,000
went on now when we look

627
00:20:48,000 --> 00:20:50,640
at how we're deploying applications

628
00:20:50,640 --> 00:20:51,440
specifically

629
00:20:51,440 --> 00:20:54,960
containers and devops of devops as

630
00:20:54,960 --> 00:20:58,240
a process containers as a technology

631
00:20:58,240 --> 00:21:00,080
coming together along with a whole bunch

632
00:21:00,080 --> 00:21:02,000
of other things to

633
00:21:02,000 --> 00:21:04,720
string along the continuous integration

634
00:21:04,720 --> 00:21:06,320
and continuous deployment

635
00:21:06,320 --> 00:21:07,840
when you look at how we're deploying

636
00:21:07,840 --> 00:21:10,240
applications today

637
00:21:10,240 --> 00:21:12,320
these four different roles could really

638
00:21:12,320 --> 00:21:13,840
be one role right

639
00:21:13,840 --> 00:21:15,600
now not to say there aren't security

640
00:21:15,600 --> 00:21:17,280
people anymore it won't be security

641
00:21:17,280 --> 00:21:18,400
people in the future there'll always be

642
00:21:18,400 --> 00:21:20,240
security people in my

643
00:21:20,240 --> 00:21:22,799
uh in my mind but a lot of the roles i

644
00:21:22,799 --> 00:21:23,919
think are going to

645
00:21:23,919 --> 00:21:25,760
change heather did a great job of

646
00:21:25,760 --> 00:21:26,960
explaining this

647
00:21:26,960 --> 00:21:28,880
because at google this transformation

648
00:21:28,880 --> 00:21:30,080
has really already happened

649
00:21:30,080 --> 00:21:32,480
and heather and her team were were part

650
00:21:32,480 --> 00:21:33,679
of that and share some of their

651
00:21:33,679 --> 00:21:35,440
knowledge about how

652
00:21:35,440 --> 00:21:37,520
you know they basically had to change

653
00:21:37,520 --> 00:21:38,720
the skills

654
00:21:38,720 --> 00:21:41,840
and change the team dynamics between

655
00:21:41,840 --> 00:21:45,200
security and cis admins and networking

656
00:21:45,200 --> 00:21:48,000
and programming right because as a

657
00:21:48,000 --> 00:21:49,360
software developer

658
00:21:49,360 --> 00:21:50,960
you're going to need to know about

659
00:21:50,960 --> 00:21:52,720
operating system networking and security

660
00:21:52,720 --> 00:21:54,799
stuff because you have control over that

661
00:21:54,799 --> 00:21:57,840
same thing from you know the networking

662
00:21:57,840 --> 00:21:58,559
side

663
00:21:58,559 --> 00:22:00,960
you're in sysadmin side now you're gonna

664
00:22:00,960 --> 00:22:02,320
have to know programming

665
00:22:02,320 --> 00:22:04,000
uh so if you're trying to get into this

666
00:22:04,000 --> 00:22:05,919
field or get into any kind of technology

667
00:22:05,919 --> 00:22:06,559
field

668
00:22:06,559 --> 00:22:08,960
uh we're using cloud technologies you

669
00:22:08,960 --> 00:22:10,960
have to have this diverse skill set

670
00:22:10,960 --> 00:22:12,000
because you're likely going to be

671
00:22:12,000 --> 00:22:13,039
writing code you create the

672
00:22:13,039 --> 00:22:14,159
infrastructure

673
00:22:14,159 --> 00:22:17,200
um so it was a great i think kind of a

674
00:22:17,200 --> 00:22:20,320
awakening to see how that dynamic will

675
00:22:20,320 --> 00:22:21,840
change so as you go through and you

676
00:22:21,840 --> 00:22:22,880
learn about

677
00:22:22,880 --> 00:22:25,600
uh in the next slide about how we

678
00:22:25,600 --> 00:22:26,720
actually start building some of these

679
00:22:26,720 --> 00:22:28,000
containers securely

680
00:22:28,000 --> 00:22:29,600
you know realize that it might be

681
00:22:29,600 --> 00:22:31,280
different people on your team

682
00:22:31,280 --> 00:22:34,320
uh that are doing that so uh

683
00:22:34,320 --> 00:22:36,320
these are my uh now six steps to

684
00:22:36,320 --> 00:22:39,039
securing uh your docker experience

685
00:22:39,039 --> 00:22:42,240
right use docker it'll be fun they said

686
00:22:42,240 --> 00:22:44,000
but they don't always tell you about

687
00:22:44,000 --> 00:22:45,440
some of the security things that you

688
00:22:45,440 --> 00:22:46,880
need to do

689
00:22:46,880 --> 00:22:48,559
such as building your own containers

690
00:22:48,559 --> 00:22:50,640
implementing your own registry

691
00:22:50,640 --> 00:22:53,280
not running containers as root and not

692
00:22:53,280 --> 00:22:54,799
running them with additional privileges

693
00:22:54,799 --> 00:22:56,480
we're going to separate

694
00:22:56,480 --> 00:22:59,360
linux user permissions and privileges

695
00:22:59,360 --> 00:23:00,320
from

696
00:23:00,320 --> 00:23:02,320
kernel and additional privileges that

697
00:23:02,320 --> 00:23:05,760
can be assigned independent of the user

698
00:23:05,760 --> 00:23:07,360
we'll talk about multi-stage builds

699
00:23:07,360 --> 00:23:09,200
protecting secrets and

700
00:23:09,200 --> 00:23:11,200
how to do some vulnerability management

701
00:23:11,200 --> 00:23:13,520
um using open source tools in fact

702
00:23:13,520 --> 00:23:15,520
uh everything i'll talk about in these

703
00:23:15,520 --> 00:23:16,880
there's actually seven i don't know how

704
00:23:16,880 --> 00:23:17,280
i got

705
00:23:17,280 --> 00:23:19,840
i got six uh i guess i'm really bad at

706
00:23:19,840 --> 00:23:20,720
math but

707
00:23:20,720 --> 00:23:22,159
we will talk about vulnerability

708
00:23:22,159 --> 00:23:24,000
management as well

709
00:23:24,000 --> 00:23:25,440
okay we'll start with building your own

710
00:23:25,440 --> 00:23:27,360
containers now certainly you can pull

711
00:23:27,360 --> 00:23:28,240
down

712
00:23:28,240 --> 00:23:30,159
uh you know a container from docker hub

713
00:23:30,159 --> 00:23:31,840
and be off to the races

714
00:23:31,840 --> 00:23:34,799
however if you don't choose your base

715
00:23:34,799 --> 00:23:36,240
image wisely

716
00:23:36,240 --> 00:23:39,440
you could get yourself into trouble

717
00:23:39,440 --> 00:23:42,880
this is a sample from npm

718
00:23:42,880 --> 00:23:45,600
node package manager system that's

719
00:23:45,600 --> 00:23:46,720
installing a node

720
00:23:46,720 --> 00:23:49,360
application and there's a lot of issues

721
00:23:49,360 --> 00:23:51,440
even with just these few lines

722
00:23:51,440 --> 00:23:55,200
inside of this file um for example

723
00:23:55,200 --> 00:23:57,039
that first line right there is one that

724
00:23:57,039 --> 00:23:58,880
i pick on all the time

725
00:23:58,880 --> 00:24:00,799
because you have to choose your base

726
00:24:00,799 --> 00:24:03,039
image where your image is coming from

727
00:24:03,039 --> 00:24:06,159
now node colon 8 will pull down node

728
00:24:06,159 --> 00:24:09,039
version 8 but it's going to make a lot

729
00:24:09,039 --> 00:24:11,120
of decisions for you about what the base

730
00:24:11,120 --> 00:24:13,760
operating system is about what packages

731
00:24:13,760 --> 00:24:15,840
and dependencies are installed

732
00:24:15,840 --> 00:24:17,440
and at the time when i wrote this

733
00:24:17,440 --> 00:24:20,320
presentation uh maybe a couple weeks ago

734
00:24:20,320 --> 00:24:23,640
um to pull these numbers it introduces

735
00:24:23,640 --> 00:24:25,919
2418 vulnerabilities into your

736
00:24:25,919 --> 00:24:26,720
environment

737
00:24:26,720 --> 00:24:29,600
just in that first line now docker hub

738
00:24:29,600 --> 00:24:31,520
is working to

739
00:24:31,520 --> 00:24:34,400
make that experience better but it's

740
00:24:34,400 --> 00:24:35,679
really super hard

741
00:24:35,679 --> 00:24:38,159
due to a lot of different dependencies

742
00:24:38,159 --> 00:24:40,400
to be able to build a clean container

743
00:24:40,400 --> 00:24:41,279
image

744
00:24:41,279 --> 00:24:44,159
that doesn't contain any vulnerabilities

745
00:24:44,159 --> 00:24:46,400
due to dependencies um

746
00:24:46,400 --> 00:24:48,400
however you can get those uh

747
00:24:48,400 --> 00:24:50,640
vulnerabilities down to a manageable

748
00:24:50,640 --> 00:24:54,080
uh number uh by doing a little bit of

749
00:24:54,080 --> 00:24:55,039
research

750
00:24:55,039 --> 00:24:57,279
um sneak puts out some great research

751
00:24:57,279 --> 00:24:59,039
they've got some open source tools and

752
00:24:59,039 --> 00:25:00,559
some free tools out there

753
00:25:00,559 --> 00:25:01,760
which is one of the reasons why i

754
00:25:01,760 --> 00:25:03,120
mentioned them they're also a sponsor of

755
00:25:03,120 --> 00:25:05,440
the network just throwing that out there

756
00:25:05,440 --> 00:25:08,240
as full disclosure however even before

757
00:25:08,240 --> 00:25:09,600
they were sponsored on the network i

758
00:25:09,600 --> 00:25:11,440
used a lot of their research

759
00:25:11,440 --> 00:25:13,600
to make the decision to be able to

760
00:25:13,600 --> 00:25:14,720
choose wisely

761
00:25:14,720 --> 00:25:16,720
as to which container platform i was

762
00:25:16,720 --> 00:25:17,919
going to use

763
00:25:17,919 --> 00:25:19,760
and they look at the number of os

764
00:25:19,760 --> 00:25:21,120
vulnerabilities

765
00:25:21,120 --> 00:25:23,840
by docker image and they publish these

766
00:25:23,840 --> 00:25:24,480
for you

767
00:25:24,480 --> 00:25:26,720
to freely look at all of this data in

768
00:25:26,720 --> 00:25:28,080
fact they're working on

769
00:25:28,080 --> 00:25:30,960
uh the next report which may even be out

770
00:25:30,960 --> 00:25:31,840
by now

771
00:25:31,840 --> 00:25:33,919
uh or or just coming out very soon where

772
00:25:33,919 --> 00:25:35,279
they're analyzing

773
00:25:35,279 --> 00:25:37,919
the open source uh vulnerabilities

774
00:25:37,919 --> 00:25:39,520
inside of open or open

775
00:25:39,520 --> 00:25:40,880
vulnerabilities inside of open source

776
00:25:40,880 --> 00:25:43,679
software inside of docker images so

777
00:25:43,679 --> 00:25:44,640
you can just see number of

778
00:25:44,640 --> 00:25:47,200
vulnerabilities by docker image

779
00:25:47,200 --> 00:25:49,440
node of course very very high and then

780
00:25:49,440 --> 00:25:51,840
as we go down you know ubuntu does not

781
00:25:51,840 --> 00:25:52,559
have

782
00:25:52,559 --> 00:25:54,400
clearly as many vulnerabilities so this

783
00:25:54,400 --> 00:25:56,159
is your first step uh

784
00:25:56,159 --> 00:25:59,200
into choosing wisely also

785
00:25:59,200 --> 00:26:01,679
there was a great article um you know

786
00:26:01,679 --> 00:26:03,520
that was published last year

787
00:26:03,520 --> 00:26:05,679
that basically shows some of the ways in

788
00:26:05,679 --> 00:26:07,840
which these default

789
00:26:07,840 --> 00:26:10,960
docker images are vulnerable in why you

790
00:26:10,960 --> 00:26:13,039
shouldn't use some of the defaults

791
00:26:13,039 --> 00:26:14,640
and that's a great article as well and

792
00:26:14,640 --> 00:26:16,400
these are two articles that are used

793
00:26:16,400 --> 00:26:21,039
as a basis for some of my my research

794
00:26:21,120 --> 00:26:23,679
so what i've done is you know in my

795
00:26:23,679 --> 00:26:25,520
choosing wisely

796
00:26:25,520 --> 00:26:26,559
you can go in a couple different

797
00:26:26,559 --> 00:26:28,960
directions here you can

798
00:26:28,960 --> 00:26:30,400
you know build your own linux

799
00:26:30,400 --> 00:26:32,480
distribution and that is certainly an

800
00:26:32,480 --> 00:26:33,120
option

801
00:26:33,120 --> 00:26:34,960
right so you have to pick a starting

802
00:26:34,960 --> 00:26:38,400
point uh inside of docker um

803
00:26:38,400 --> 00:26:41,840
in your from line can be like basically

804
00:26:41,840 --> 00:26:43,679
start from scratch i can't remember the

805
00:26:43,679 --> 00:26:45,360
exact term because we don't actually use

806
00:26:45,360 --> 00:26:47,279
it here at security weekly

807
00:26:47,279 --> 00:26:50,080
and that basically requires like you can

808
00:26:50,080 --> 00:26:50,840
build your

809
00:26:50,840 --> 00:26:54,240
own docker image in linux distro

810
00:26:54,240 --> 00:26:57,120
inside of docker now with that great

811
00:26:57,120 --> 00:26:58,960
power comes great responsibility because

812
00:26:58,960 --> 00:27:00,640
you're now responsible for all the

813
00:27:00,640 --> 00:27:02,400
dependencies and all of the security

814
00:27:02,400 --> 00:27:03,600
fixes

815
00:27:03,600 --> 00:27:06,240
so it's a lot to take on i agree from a

816
00:27:06,240 --> 00:27:07,039
configuration

817
00:27:07,039 --> 00:27:09,200
perspective you know if you're a gen 2

818
00:27:09,200 --> 00:27:10,640
user for example

819
00:27:10,640 --> 00:27:13,440
that might be a place where you start

820
00:27:13,440 --> 00:27:14,880
just realize that there's a lot of

821
00:27:14,880 --> 00:27:16,880
maintenance associated with that

822
00:27:16,880 --> 00:27:18,880
where i tend now you can also go the

823
00:27:18,880 --> 00:27:20,240
other end of the spectrum and choose

824
00:27:20,240 --> 00:27:21,039
note 8.

825
00:27:21,039 --> 00:27:22,159
that's going to get you into trouble

826
00:27:22,159 --> 00:27:23,520
it's going to get you lots of

827
00:27:23,520 --> 00:27:25,200
vulnerabilities because they're trying

828
00:27:25,200 --> 00:27:27,279
to give you so much software in there

829
00:27:27,279 --> 00:27:29,360
there's so many dependencies and it just

830
00:27:29,360 --> 00:27:31,279
breeds a lot of vulnerabilities

831
00:27:31,279 --> 00:27:33,919
where i like to go is somewhere in the

832
00:27:33,919 --> 00:27:34,720
ubuntu

833
00:27:34,720 --> 00:27:37,360
2004 which is a very slimmed down latest

834
00:27:37,360 --> 00:27:38,640
version of ubuntu

835
00:27:38,640 --> 00:27:41,520
a good slim image to start with and then

836
00:27:41,520 --> 00:27:44,559
i also use a lot of debian buster slim

837
00:27:44,559 --> 00:27:46,799
the slim images are great because you

838
00:27:46,799 --> 00:27:47,919
don't have to build your own linux

839
00:27:47,919 --> 00:27:48,720
distro

840
00:27:48,720 --> 00:27:50,240
but they give you a really slimmed down

841
00:27:50,240 --> 00:27:52,000
version of linux to start with

842
00:27:52,000 --> 00:27:54,159
which is where i i usually use debian

843
00:27:54,159 --> 00:27:55,120
buster slim

844
00:27:55,120 --> 00:27:57,919
ubuntu 2004 still has a lot of newer

845
00:27:57,919 --> 00:27:59,919
like really newer things that can

846
00:27:59,919 --> 00:28:02,240
break some dependencies but i think in

847
00:28:02,240 --> 00:28:03,760
time that might be something that i

848
00:28:03,760 --> 00:28:06,559
play around with a lot more so make sure

849
00:28:06,559 --> 00:28:07,760
you choose wisely

850
00:28:07,760 --> 00:28:10,080
again i like the slim image i like

851
00:28:10,080 --> 00:28:11,760
debbie and buster slim and i'll show you

852
00:28:11,760 --> 00:28:12,240
just

853
00:28:12,240 --> 00:28:14,720
you know some comparisons later on as to

854
00:28:14,720 --> 00:28:16,000
how many vulnerabilities are

855
00:28:16,000 --> 00:28:19,120
in uh debian buster slim versus

856
00:28:19,120 --> 00:28:21,440
some of the other ones that have a lot

857
00:28:21,440 --> 00:28:24,240
more vulnerabilities

858
00:28:24,240 --> 00:28:25,919
um so when i build something like a

859
00:28:25,919 --> 00:28:27,840
python container for example

860
00:28:27,840 --> 00:28:32,159
i don't do from python colon 3.5 or 3.7

861
00:28:32,159 --> 00:28:34,000
or whatever you want to use

862
00:28:34,000 --> 00:28:36,000
because that is leaving it up to someone

863
00:28:36,000 --> 00:28:38,240
else to determine what i need for tools

864
00:28:38,240 --> 00:28:38,720
and

865
00:28:38,720 --> 00:28:41,840
dependencies and all of that stuff so

866
00:28:41,840 --> 00:28:43,200
what i do is i build a

867
00:28:43,200 --> 00:28:46,559
and buster slim i define which packages

868
00:28:46,559 --> 00:28:47,440
to install

869
00:28:47,440 --> 00:28:49,360
and these are requirements based on my

870
00:28:49,360 --> 00:28:50,880
application

871
00:28:50,880 --> 00:28:52,799
now in some of these other images if

872
00:28:52,799 --> 00:28:54,720
you're just installing a generic python

873
00:28:54,720 --> 00:28:56,080
3.5

874
00:28:56,080 --> 00:28:58,320
you may see a lot more packages in this

875
00:28:58,320 --> 00:28:59,600
package list because they're trying to

876
00:28:59,600 --> 00:29:01,279
make it work for more people

877
00:29:01,279 --> 00:29:02,399
which in turn leads to more

878
00:29:02,399 --> 00:29:03,600
vulnerabilities because you have more

879
00:29:03,600 --> 00:29:04,960
packages and you have more attack

880
00:29:04,960 --> 00:29:05,840
surface

881
00:29:05,840 --> 00:29:08,880
so i customize my package list to

882
00:29:08,880 --> 00:29:09,600
support

883
00:29:09,600 --> 00:29:12,159
my application and i know exactly which

884
00:29:12,159 --> 00:29:13,279
packages

885
00:29:13,279 --> 00:29:16,720
i need and i pair them back as i go

886
00:29:16,720 --> 00:29:18,399
see what breaks so that i come up with a

887
00:29:18,399 --> 00:29:19,840
nice succinct list

888
00:29:19,840 --> 00:29:22,880
of packages i then also i like to create

889
00:29:22,880 --> 00:29:25,039
a python virtual environment inside of

890
00:29:25,039 --> 00:29:26,080
my container

891
00:29:26,080 --> 00:29:28,720
i think it's a much cleaner uh method so

892
00:29:28,720 --> 00:29:29,360
that uh

893
00:29:29,360 --> 00:29:31,120
when i install my pip requirements

894
00:29:31,120 --> 00:29:32,399
they're going inside of a virtual

895
00:29:32,399 --> 00:29:33,600
environment

896
00:29:33,600 --> 00:29:35,200
and it's just a much cleaner way to do

897
00:29:35,200 --> 00:29:37,440
that and then of course i

898
00:29:37,440 --> 00:29:39,679
uh install my packages from the

899
00:29:39,679 --> 00:29:40,799
operating system

900
00:29:40,799 --> 00:29:42,640
without installing recommended packages

901
00:29:42,640 --> 00:29:45,360
so i get a slimmer image

902
00:29:45,360 --> 00:29:47,600
i put it in a virtual environment and

903
00:29:47,600 --> 00:29:49,360
then i do my pip install and i

904
00:29:49,360 --> 00:29:51,840
install my pip requirements which goes

905
00:29:51,840 --> 00:29:55,840
inside of that virtual environment

906
00:29:56,880 --> 00:29:59,679
so that's how i i get uh what i feel is

907
00:29:59,679 --> 00:30:01,679
the best kind of balance

908
00:30:01,679 --> 00:30:04,159
of a nice clean uh small footprint

909
00:30:04,159 --> 00:30:06,000
container image to run something like a

910
00:30:06,000 --> 00:30:08,240
python application

911
00:30:08,240 --> 00:30:09,360
the next thing you're going to want to

912
00:30:09,360 --> 00:30:11,279
do is since you're building your own

913
00:30:11,279 --> 00:30:13,600
containers and container images you're

914
00:30:13,600 --> 00:30:14,799
going to want to go out and build your

915
00:30:14,799 --> 00:30:16,080
own registry

916
00:30:16,080 --> 00:30:18,000
now you can build that in docker

917
00:30:18,000 --> 00:30:19,279
yourself

918
00:30:19,279 --> 00:30:21,120
and and i've done that and it works fine

919
00:30:21,120 --> 00:30:22,640
and you can host it yourself and it's

920
00:30:22,640 --> 00:30:25,840
not really that bad the one thing to

921
00:30:25,840 --> 00:30:27,440
really pay attention to when you have

922
00:30:27,440 --> 00:30:29,679
your own docker registry

923
00:30:29,679 --> 00:30:32,720
is make sure that

924
00:30:32,720 --> 00:30:34,320
in that red circle down the bottom of

925
00:30:34,320 --> 00:30:36,000
the slide make sure you apply

926
00:30:36,000 --> 00:30:38,000
security to it make sure you put

927
00:30:38,000 --> 00:30:41,039
authentication configure tls correctly

928
00:30:41,039 --> 00:30:42,880
if you're going to do that a lot of the

929
00:30:42,880 --> 00:30:44,320
examples on the internet

930
00:30:44,320 --> 00:30:46,640
the internet gives bad advice sometimes

931
00:30:46,640 --> 00:30:48,480
most of the time your mileage varies

932
00:30:48,480 --> 00:30:50,399
you can get bad advice on the internet

933
00:30:50,399 --> 00:30:52,080
and a lot of the tutorials will show you

934
00:30:52,080 --> 00:30:54,159
hey stand up your own you know local

935
00:30:54,159 --> 00:30:55,600
docker registry

936
00:30:55,600 --> 00:30:58,960
and not configure tls and that

937
00:30:58,960 --> 00:31:01,760
may be okay from your perspective

938
00:31:01,760 --> 00:31:03,200
running it internally

939
00:31:03,200 --> 00:31:04,799
but then you may realize that you need

940
00:31:04,799 --> 00:31:06,399
to put it up in the cloud or move it

941
00:31:06,399 --> 00:31:08,320
around and now it doesn't have security

942
00:31:08,320 --> 00:31:11,200
and basically if you're leaving your

943
00:31:11,200 --> 00:31:12,159
docker

944
00:31:12,159 --> 00:31:14,480
instance with via the api like a docker

945
00:31:14,480 --> 00:31:16,960
api exposed port or a docker registry

946
00:31:16,960 --> 00:31:18,159
exposed port

947
00:31:18,159 --> 00:31:20,399
it's pretty much like having cleartext

948
00:31:20,399 --> 00:31:21,840
telnet protocol

949
00:31:21,840 --> 00:31:24,240
open with no username or password and it

950
00:31:24,240 --> 00:31:26,320
lets anyone do anything on your registry

951
00:31:26,320 --> 00:31:30,320
or your docker instances apis for the

952
00:31:30,320 --> 00:31:32,320
docker server

953
00:31:32,320 --> 00:31:34,399
so don't do that make sure that you

954
00:31:34,399 --> 00:31:36,880
spend the time and configure tls

955
00:31:36,880 --> 00:31:39,360
correctly for both of those in this case

956
00:31:39,360 --> 00:31:41,120
it's the registry

957
00:31:41,120 --> 00:31:44,080
amazon's ecr is actually pretty cool if

958
00:31:44,080 --> 00:31:46,320
you're doing an aws deployment i really

959
00:31:46,320 --> 00:31:47,679
like it

960
00:31:47,679 --> 00:31:49,200
you do have to pay attention to the

961
00:31:49,200 --> 00:31:50,880
security there as well

962
00:31:50,880 --> 00:31:53,600
there are rules to configure in amazon's

963
00:31:53,600 --> 00:31:54,480
ecr

964
00:31:54,480 --> 00:31:56,399
there is a specific policy so you have

965
00:31:56,399 --> 00:31:58,640
to configure aws

966
00:31:58,640 --> 00:32:01,120
roles you have to configure policies and

967
00:32:01,120 --> 00:32:02,320
then there's like a

968
00:32:02,320 --> 00:32:05,440
firewall rule manager for ecr

969
00:32:05,440 --> 00:32:06,880
that you kind of have to work your way

970
00:32:06,880 --> 00:32:09,039
through and read the documentation

971
00:32:09,039 --> 00:32:11,760
and make sure that it's locked down um

972
00:32:11,760 --> 00:32:12,320
so that

973
00:32:12,320 --> 00:32:15,360
you're the only one that's updating and

974
00:32:15,360 --> 00:32:20,159
adding uh images into your repositories

975
00:32:20,159 --> 00:32:22,480
docker hub is also a great option as

976
00:32:22,480 --> 00:32:23,519
well

977
00:32:23,519 --> 00:32:25,200
we actually use docker hub for some of

978
00:32:25,200 --> 00:32:26,640
our deployments

979
00:32:26,640 --> 00:32:28,960
and it's a great way it's not expensive

980
00:32:28,960 --> 00:32:30,480
and you can basically have private

981
00:32:30,480 --> 00:32:32,320
repositories if you give them

982
00:32:32,320 --> 00:32:34,559
you know a small amount uh per month is

983
00:32:34,559 --> 00:32:36,080
the basic uh you know we have

984
00:32:36,080 --> 00:32:38,960
five repositories up there um and it's a

985
00:32:38,960 --> 00:32:40,000
great way to get

986
00:32:40,000 --> 00:32:41,519
you know a secure registry without

987
00:32:41,519 --> 00:32:43,200
building yourself or

988
00:32:43,200 --> 00:32:45,200
um you know if you're not in amazon's

989
00:32:45,200 --> 00:32:46,320
cloud for example

990
00:32:46,320 --> 00:32:48,320
you know maybe you're not gonna use ecr

991
00:32:48,320 --> 00:32:51,760
so docker hub is a good one as well

992
00:32:51,760 --> 00:32:53,760
okay this is the like one of my biggest

993
00:32:53,760 --> 00:32:55,760
pet peeves

994
00:32:55,760 --> 00:32:58,000
from an attacker's perspective it's

995
00:32:58,000 --> 00:32:59,360
really great because people run

996
00:32:59,360 --> 00:33:00,799
containers as root

997
00:33:00,799 --> 00:33:02,799
so once you get a command shell you know

998
00:33:02,799 --> 00:33:04,320
on the web application or some kind of

999
00:33:04,320 --> 00:33:06,559
command execution

1000
00:33:06,559 --> 00:33:08,640
you're just root and it's awesome and

1001
00:33:08,640 --> 00:33:10,320
you can have an easier time of

1002
00:33:10,320 --> 00:33:12,080
escalating from there basically take

1003
00:33:12,080 --> 00:33:13,840
over the docker host

1004
00:33:13,840 --> 00:33:15,919
um because they're running as root which

1005
00:33:15,919 --> 00:33:18,880
makes you know your job much easier

1006
00:33:18,880 --> 00:33:20,320
um you know of course you shouldn't do

1007
00:33:20,320 --> 00:33:22,320
everything as root and

1008
00:33:22,320 --> 00:33:25,360
we know this yet so many

1009
00:33:25,360 --> 00:33:28,080
examples from docker hub uh when you

1010
00:33:28,080 --> 00:33:28,720
pull down

1011
00:33:28,720 --> 00:33:31,440
uh container images run is root by

1012
00:33:31,440 --> 00:33:32,240
default

1013
00:33:32,240 --> 00:33:34,559
and again i think this stems from that

1014
00:33:34,559 --> 00:33:36,880
balance between usability and security

1015
00:33:36,880 --> 00:33:39,279
making it more usable for people to just

1016
00:33:39,279 --> 00:33:41,360
pull down that image and have stuff work

1017
00:33:41,360 --> 00:33:43,600
versus making them work a little harder

1018
00:33:43,600 --> 00:33:45,440
to not run as root which could break

1019
00:33:45,440 --> 00:33:45,840
their

1020
00:33:45,840 --> 00:33:48,080
application in their deployment so you

1021
00:33:48,080 --> 00:33:49,200
know if you don't believe me here's a

1022
00:33:49,200 --> 00:33:50,799
little exercise we can do

1023
00:33:50,799 --> 00:33:52,399
create this very simple docker file

1024
00:33:52,399 --> 00:33:54,000
which pulls php

1025
00:33:54,000 --> 00:33:57,039
7.4 fpm which is the application server

1026
00:33:57,039 --> 00:33:58,080
for php

1027
00:33:58,080 --> 00:34:00,720
i use it in one of my builds and when i

1028
00:34:00,720 --> 00:34:03,200
was evaluating what i wanted to use for

1029
00:34:03,200 --> 00:34:04,720
a container image

1030
00:34:04,720 --> 00:34:06,640
i was like wow like they just straight

1031
00:34:06,640 --> 00:34:08,079
up run it as root

1032
00:34:08,079 --> 00:34:10,399
and so you can build this container you

1033
00:34:10,399 --> 00:34:11,199
can run it

1034
00:34:11,199 --> 00:34:13,839
and then you can execute as that third

1035
00:34:13,839 --> 00:34:14,320
line

1036
00:34:14,320 --> 00:34:16,879
uh there docker exec and when you get a

1037
00:34:16,879 --> 00:34:19,119
bachelor you can see that you're rude

1038
00:34:19,119 --> 00:34:21,040
i'm like well that's not going to work i

1039
00:34:21,040 --> 00:34:22,560
can't be running these containers as

1040
00:34:22,560 --> 00:34:23,599
root

1041
00:34:23,599 --> 00:34:26,399
and i hope that as we start evangelizing

1042
00:34:26,399 --> 00:34:27,520
this more and more

1043
00:34:27,520 --> 00:34:29,599
that more of these projects open source

1044
00:34:29,599 --> 00:34:31,679
projects that are maintaining

1045
00:34:31,679 --> 00:34:34,800
these docker images really come around

1046
00:34:34,800 --> 00:34:36,399
to not running them as root and really

1047
00:34:36,399 --> 00:34:39,520
make them run is not root by default

1048
00:34:39,520 --> 00:34:43,760
um so to not run as root for php fpm

1049
00:34:43,760 --> 00:34:45,199
you've got to jump through some hoops

1050
00:34:45,199 --> 00:34:46,560
right it's a little bit of work it's not

1051
00:34:46,560 --> 00:34:47,679
bad for php

1052
00:34:47,679 --> 00:34:49,760
fpm it's actually not that bad right

1053
00:34:49,760 --> 00:34:51,760
you've got to create some directories

1054
00:34:51,760 --> 00:34:55,839
change the user permissions so the www

1055
00:34:55,839 --> 00:34:58,560
group i believe exists in that in my

1056
00:34:58,560 --> 00:35:00,240
container image by default or in

1057
00:35:00,240 --> 00:35:02,079
a container image by default or

1058
00:35:02,079 --> 00:35:03,680
previously in the docker file

1059
00:35:03,680 --> 00:35:06,400
you're creating that user www along with

1060
00:35:06,400 --> 00:35:07,200
the group

1061
00:35:07,200 --> 00:35:09,359
assigning the permissions you have to

1062
00:35:09,359 --> 00:35:11,440
create the log files the pid files

1063
00:35:11,440 --> 00:35:12,960
change those permissions

1064
00:35:12,960 --> 00:35:14,480
and then the most important line is

1065
00:35:14,480 --> 00:35:16,079
right before you execute

1066
00:35:16,079 --> 00:35:18,720
what's going to run inside the container

1067
00:35:18,720 --> 00:35:20,800
drop your user permissions down to your

1068
00:35:20,800 --> 00:35:21,839
www

1069
00:35:21,839 --> 00:35:25,680
user and run your application

1070
00:35:25,680 --> 00:35:27,520
again it's really not that hard to you

1071
00:35:27,520 --> 00:35:29,280
know some extra steps in there

1072
00:35:29,280 --> 00:35:32,320
to be able to run things not as root

1073
00:35:32,320 --> 00:35:34,800
now nginx is a little tricky and i know

1074
00:35:34,800 --> 00:35:36,800
that the master process

1075
00:35:36,800 --> 00:35:40,079
for engine x runs as root

1076
00:35:40,079 --> 00:35:41,839
right and then you've got all the child

1077
00:35:41,839 --> 00:35:43,680
processes that run off of that that run

1078
00:35:43,680 --> 00:35:46,240
not as root but what happens inside of a

1079
00:35:46,240 --> 00:35:47,280
container

1080
00:35:47,280 --> 00:35:50,240
is you know if that one process is

1081
00:35:50,240 --> 00:35:52,400
running as root it means that container

1082
00:35:52,400 --> 00:35:54,320
is essentially running as root

1083
00:35:54,320 --> 00:35:56,640
which means someone could gain root

1084
00:35:56,640 --> 00:35:58,560
level user permissions inside that

1085
00:35:58,560 --> 00:35:59,359
container

1086
00:35:59,359 --> 00:36:02,240
so why not drop the whole thing down to

1087
00:36:02,240 --> 00:36:04,240
a lower level permission

1088
00:36:04,240 --> 00:36:07,920
and be able to run nginx not as rude at

1089
00:36:07,920 --> 00:36:08,960
all because

1090
00:36:08,960 --> 00:36:10,400
inside of containers especially it

1091
00:36:10,400 --> 00:36:12,400
doesn't need to run as root really

1092
00:36:12,400 --> 00:36:14,240
the reason it needs to run as root

1093
00:36:14,240 --> 00:36:15,680
primarily is

1094
00:36:15,680 --> 00:36:17,920
to be able to listen on port 80 and 443

1095
00:36:17,920 --> 00:36:20,400
because they're less than 10 25

1096
00:36:20,400 --> 00:36:22,880
and in linux you need to be root to

1097
00:36:22,880 --> 00:36:24,640
listen on those ports but

1098
00:36:24,640 --> 00:36:27,760
in container world um you can just

1099
00:36:27,760 --> 00:36:29,760
make those port mappings you can see in

1100
00:36:29,760 --> 00:36:31,119
the box i have there

1101
00:36:31,119 --> 00:36:33,920
basically you know the the docker engine

1102
00:36:33,920 --> 00:36:35,839
is running as root and it has those

1103
00:36:35,839 --> 00:36:38,000
permissions it can listen on port 80

1104
00:36:38,000 --> 00:36:40,320
map 480 into port 8080 inside the

1105
00:36:40,320 --> 00:36:41,040
container

1106
00:36:41,040 --> 00:36:42,640
which means now your containers don't

1107
00:36:42,640 --> 00:36:44,240
need to run as

1108
00:36:44,240 --> 00:36:47,599
root and again doing that basically

1109
00:36:47,599 --> 00:36:48,960
adding a user

1110
00:36:48,960 --> 00:36:50,640
changing some permissions creating the

1111
00:36:50,640 --> 00:36:53,119
pid file changing its permissions

1112
00:36:53,119 --> 00:36:55,599
um and you know you're basically off to

1113
00:36:55,599 --> 00:36:56,720
the races there

1114
00:36:56,720 --> 00:36:58,240
the documentation is actually on the

1115
00:36:58,240 --> 00:37:01,119
nginx uh docker hub page

1116
00:37:01,119 --> 00:37:04,480
they just don't do it by default

1117
00:37:04,640 --> 00:37:06,960
um allowing nginx to read from the

1118
00:37:06,960 --> 00:37:08,000
environment and we'll talk

1119
00:37:08,000 --> 00:37:10,640
a little bit about some tricks to you

1120
00:37:10,640 --> 00:37:12,079
know get your secrets and

1121
00:37:12,079 --> 00:37:13,440
usernames and passwords out of your

1122
00:37:13,440 --> 00:37:15,359
configuration files and minimize your

1123
00:37:15,359 --> 00:37:16,720
risk of those getting checked into

1124
00:37:16,720 --> 00:37:18,000
github

1125
00:37:18,000 --> 00:37:21,200
i had to do some uh interesting things

1126
00:37:21,200 --> 00:37:23,440
in the nginx config and again this is

1127
00:37:23,440 --> 00:37:25,119
documented on their on their docker hub

1128
00:37:25,119 --> 00:37:26,640
documentation

1129
00:37:26,640 --> 00:37:28,960
and i just made some modifications to

1130
00:37:28,960 --> 00:37:29,760
that

1131
00:37:29,760 --> 00:37:32,480
um but you know essentially you've got

1132
00:37:32,480 --> 00:37:34,240
to

1133
00:37:34,240 --> 00:37:38,079
have a template that has

1134
00:37:38,079 --> 00:37:41,440
uh variable names in it you can see

1135
00:37:41,440 --> 00:37:44,160
down the bottom listen uh you know nginx

1136
00:37:44,160 --> 00:37:45,359
http port

1137
00:37:45,359 --> 00:37:47,200
is an environment variable so that's my

1138
00:37:47,200 --> 00:37:50,000
template and then i run a command called

1139
00:37:50,000 --> 00:37:54,320
env substitute or env subst

1140
00:37:54,320 --> 00:37:58,160
right and i take what's in my template i

1141
00:37:58,160 --> 00:38:01,599
substitute environment variables from uh

1142
00:38:01,599 --> 00:38:04,880
the linux shell environment and i create

1143
00:38:04,880 --> 00:38:07,839
the nginx config on the fly so this

1144
00:38:07,839 --> 00:38:08,720
allows me

1145
00:38:08,720 --> 00:38:12,160
to put my credentials and other things

1146
00:38:12,160 --> 00:38:14,240
that i may want to specify in the build

1147
00:38:14,240 --> 00:38:15,200
process

1148
00:38:15,200 --> 00:38:16,800
that are expressed as environment

1149
00:38:16,800 --> 00:38:18,480
variables that end up

1150
00:38:18,480 --> 00:38:22,560
as configuration inside of nginx

1151
00:38:22,560 --> 00:38:24,320
so that's how i'm doing that right there

1152
00:38:24,320 --> 00:38:26,160
so there's a little bit of trickiness

1153
00:38:26,160 --> 00:38:27,680
to get that to work but it's not that

1154
00:38:27,680 --> 00:38:29,280
bad

1155
00:38:29,280 --> 00:38:30,880
now let's talk a little bit about

1156
00:38:30,880 --> 00:38:32,880
additional privileges i was explaining

1157
00:38:32,880 --> 00:38:34,079
this to one of our folks here as

1158
00:38:34,079 --> 00:38:35,280
learning linux

1159
00:38:35,280 --> 00:38:37,119
uh and learning about pseudo and i

1160
00:38:37,119 --> 00:38:38,640
finally got to tell him the

1161
00:38:38,640 --> 00:38:40,240
pseudo make me a sandwich joke and he

1162
00:38:40,240 --> 00:38:42,079
got it

1163
00:38:42,079 --> 00:38:44,640
but there are privileges inside of linux

1164
00:38:44,640 --> 00:38:45,200
that go

1165
00:38:45,200 --> 00:38:49,040
beyond your user permissions

1166
00:38:49,040 --> 00:38:51,040
and these are very applicable to

1167
00:38:51,040 --> 00:38:52,960
containers

1168
00:38:52,960 --> 00:38:55,119
the first one is setcomp which is kind

1169
00:38:55,119 --> 00:38:57,119
of interesting

1170
00:38:57,119 --> 00:39:00,480
these are secure computing filters if

1171
00:39:00,480 --> 00:39:01,520
you will

1172
00:39:01,520 --> 00:39:05,280
um inside of linux that allow you

1173
00:39:05,280 --> 00:39:08,640
is one mechanism that essentially allows

1174
00:39:08,640 --> 00:39:11,760
applications to have privileges that are

1175
00:39:11,760 --> 00:39:14,880
outside of their user privileges now

1176
00:39:14,880 --> 00:39:17,040
where i found this very interesting in

1177
00:39:17,040 --> 00:39:17,920
particular

1178
00:39:17,920 --> 00:39:19,440
and again you can go read the technical

1179
00:39:19,440 --> 00:39:22,320
details and uh they're really awesome

1180
00:39:22,320 --> 00:39:24,640
uh and if you're getting into container

1181
00:39:24,640 --> 00:39:25,440
breakout

1182
00:39:25,440 --> 00:39:26,560
you know you're definitely going to want

1183
00:39:26,560 --> 00:39:28,560
to read through some of those things

1184
00:39:28,560 --> 00:39:30,880
because it's you know basically some

1185
00:39:30,880 --> 00:39:33,680
syscall filtering

1186
00:39:33,680 --> 00:39:36,079
and you can remove those filters when

1187
00:39:36,079 --> 00:39:36,800
you

1188
00:39:36,800 --> 00:39:38,560
initiate containers and instantiate a

1189
00:39:38,560 --> 00:39:40,480
container on a system you can say

1190
00:39:40,480 --> 00:39:41,520
basically

1191
00:39:41,520 --> 00:39:45,040
run it without any set com filters and

1192
00:39:45,040 --> 00:39:46,880
one individual wrote a great article

1193
00:39:46,880 --> 00:39:48,640
that i linked to in that great box right

1194
00:39:48,640 --> 00:39:49,280
there

1195
00:39:49,280 --> 00:39:51,200
that was basically did some performance

1196
00:39:51,200 --> 00:39:52,880
testing and said hey

1197
00:39:52,880 --> 00:39:55,520
when i run docker in set setcomp

1198
00:39:55,520 --> 00:39:56,800
unconfined which means

1199
00:39:56,800 --> 00:40:00,079
i don't apply any setcom filters um

1200
00:40:00,079 --> 00:40:02,240
you know i see some great performance

1201
00:40:02,240 --> 00:40:05,040
improvements which kind of interesting

1202
00:40:05,040 --> 00:40:08,960
and when i optimize my code i also see

1203
00:40:08,960 --> 00:40:12,240
performance uh benefits so uh

1204
00:40:12,240 --> 00:40:14,319
there are some definite you know

1205
00:40:14,319 --> 00:40:15,760
performance improvements

1206
00:40:15,760 --> 00:40:17,359
and they say that which gets me really

1207
00:40:17,359 --> 00:40:19,359
concerned that this article exists

1208
00:40:19,359 --> 00:40:21,119
the developer is gonna go off and

1209
00:40:21,119 --> 00:40:22,720
they're gonna start you know

1210
00:40:22,720 --> 00:40:24,960
removing these security controls to gain

1211
00:40:24,960 --> 00:40:25,920
performance

1212
00:40:25,920 --> 00:40:28,400
rather than optimizing their code you

1213
00:40:28,400 --> 00:40:30,560
know which has a very similar

1214
00:40:30,560 --> 00:40:33,200
performance uh increase by optimizing

1215
00:40:33,200 --> 00:40:34,640
your code

1216
00:40:34,640 --> 00:40:37,040
all documented in the article um all

1217
00:40:37,040 --> 00:40:38,079
great stuff

1218
00:40:38,079 --> 00:40:41,680
uh and so linux capabilities

1219
00:40:41,680 --> 00:40:44,880
is the next kind of um

1220
00:40:44,880 --> 00:40:46,880
filtering if you will and it's

1221
00:40:46,880 --> 00:40:48,240
capabilities i'm sorry it really isn't

1222
00:40:48,240 --> 00:40:49,200
just filtering

1223
00:40:49,200 --> 00:40:52,319
it's basically granting these kernel

1224
00:40:52,319 --> 00:40:53,119
privileges

1225
00:40:53,119 --> 00:40:56,240
to an application a great way to think

1226
00:40:56,240 --> 00:40:57,920
about this most of us have probably used

1227
00:40:57,920 --> 00:40:58,880
nmap right

1228
00:40:58,880 --> 00:41:00,560
and you know that when you do certain

1229
00:41:00,560 --> 00:41:02,240
types of port scanning lower case

1230
00:41:02,240 --> 00:41:05,280
s capital s for syn scan

1231
00:41:05,280 --> 00:41:08,160
nmap says i need to be root to do that

1232
00:41:08,160 --> 00:41:09,760
the reason it needs to be

1233
00:41:09,760 --> 00:41:13,280
root is because it needs a certain linux

1234
00:41:13,280 --> 00:41:17,040
capability um af packet i believe is the

1235
00:41:17,040 --> 00:41:20,240
uh the kernel function that it needs to

1236
00:41:20,240 --> 00:41:21,520
be able to create

1237
00:41:21,520 --> 00:41:24,079
raw packets well that's just the linux

1238
00:41:24,079 --> 00:41:25,760
capability to say i can

1239
00:41:25,760 --> 00:41:28,880
grant this process the ability to create

1240
00:41:28,880 --> 00:41:30,000
raw packets

1241
00:41:30,000 --> 00:41:32,800
even though it does not have root

1242
00:41:32,800 --> 00:41:34,640
privileges or as running as root

1243
00:41:34,640 --> 00:41:35,760
privileges

1244
00:41:35,760 --> 00:41:37,200
and so what you can do it's actually

1245
00:41:37,200 --> 00:41:38,960
documented on the nmap wiki

1246
00:41:38,960 --> 00:41:41,040
you can run some commands you can grant

1247
00:41:41,040 --> 00:41:42,480
the nmap

1248
00:41:42,480 --> 00:41:46,480
binary the privileges to create raw

1249
00:41:46,480 --> 00:41:47,599
packets there's actually some other

1250
00:41:47,599 --> 00:41:49,599
capabilities you need to grant it

1251
00:41:49,599 --> 00:41:51,839
and then you can run nmap without being

1252
00:41:51,839 --> 00:41:52,640
rude

1253
00:41:52,640 --> 00:41:55,119
now obviously i don't recommend that

1254
00:41:55,119 --> 00:41:55,920
people do that

1255
00:41:55,920 --> 00:41:57,920
because we want to have these

1256
00:41:57,920 --> 00:41:59,839
restrictions on processes we want to

1257
00:41:59,839 --> 00:42:01,440
have the barrier of

1258
00:42:01,440 --> 00:42:03,680
you know knowledge of uh the root

1259
00:42:03,680 --> 00:42:04,720
password or or

1260
00:42:04,720 --> 00:42:08,240
the identity uh to be able to protect

1261
00:42:08,240 --> 00:42:10,480
uh our system because it is a security

1262
00:42:10,480 --> 00:42:12,400
exposure it basically means any user on

1263
00:42:12,400 --> 00:42:13,280
the system now

1264
00:42:13,280 --> 00:42:15,359
doesn't need to be root to access a

1265
00:42:15,359 --> 00:42:17,200
binary that has

1266
00:42:17,200 --> 00:42:19,440
escalated privileges inside of the

1267
00:42:19,440 --> 00:42:20,800
kernel

1268
00:42:20,800 --> 00:42:24,160
so when you run containers containers

1269
00:42:24,160 --> 00:42:24,960
have a certain

1270
00:42:24,960 --> 00:42:27,520
set of privileges and you can add to

1271
00:42:27,520 --> 00:42:29,440
those privileges you can drop them

1272
00:42:29,440 --> 00:42:30,960
and this is where we get the concept of

1273
00:42:30,960 --> 00:42:32,800
a privileged container which means this

1274
00:42:32,800 --> 00:42:33,760
container

1275
00:42:33,760 --> 00:42:37,119
is running with all of the linux kernel

1276
00:42:37,119 --> 00:42:38,160
privileges

1277
00:42:38,160 --> 00:42:40,640
which essentially means it's running as

1278
00:42:40,640 --> 00:42:41,599
root or as

1279
00:42:41,599 --> 00:42:46,160
close to root as you could conceive

1280
00:42:46,480 --> 00:42:49,520
um and that comes into play uh

1281
00:42:49,520 --> 00:42:51,440
very shortly too but first just app

1282
00:42:51,440 --> 00:42:52,720
armor um

1283
00:42:52,720 --> 00:42:54,400
i and i love the description of app

1284
00:42:54,400 --> 00:42:56,240
armor is essentially another

1285
00:42:56,240 --> 00:42:58,960
facility with inside of linux to you

1286
00:42:58,960 --> 00:42:59,280
know

1287
00:42:59,280 --> 00:43:02,480
limit what can happen on a system in

1288
00:43:02,480 --> 00:43:06,240
access to um these uh more sensitive

1289
00:43:06,240 --> 00:43:07,760
areas of linux basically

1290
00:43:07,760 --> 00:43:10,240
so basically it controls attributes of

1291
00:43:10,240 --> 00:43:12,160
programs rather than users

1292
00:43:12,160 --> 00:43:14,960
and confinement is loaded into the

1293
00:43:14,960 --> 00:43:15,599
kernel

1294
00:43:15,599 --> 00:43:18,079
to further confine a process that's

1295
00:43:18,079 --> 00:43:19,599
independent of

1296
00:43:19,599 --> 00:43:23,040
the user but specific to the program so

1297
00:43:23,040 --> 00:43:24,880
armor profiles can be assigned to

1298
00:43:24,880 --> 00:43:26,480
containers in fact one gets assigned by

1299
00:43:26,480 --> 00:43:27,359
default

1300
00:43:27,359 --> 00:43:29,440
every time you spin up a new container

1301
00:43:29,440 --> 00:43:30,960
on a linux system

1302
00:43:30,960 --> 00:43:32,960
uh and i believe that is the template

1303
00:43:32,960 --> 00:43:34,720
default template that

1304
00:43:34,720 --> 00:43:37,920
docker has chosen to use when they're

1305
00:43:37,920 --> 00:43:39,680
spinning it up and you know you can

1306
00:43:39,680 --> 00:43:40,960
change the profile or

1307
00:43:40,960 --> 00:43:43,119
disable it all together so you have to

1308
00:43:43,119 --> 00:43:44,960
be careful that your developers and ops

1309
00:43:44,960 --> 00:43:45,359
people

1310
00:43:45,359 --> 00:43:47,839
aren't manipulating any of these things

1311
00:43:47,839 --> 00:43:49,520
because

1312
00:43:49,520 --> 00:43:51,119
basically what these will lead to are

1313
00:43:51,119 --> 00:43:54,240
container breakout vulnerabilities these

1314
00:43:54,240 --> 00:43:55,839
are really super

1315
00:43:55,839 --> 00:43:59,040
awesome and super nerdy uh and i love

1316
00:43:59,040 --> 00:44:00,079
them for that

1317
00:44:00,079 --> 00:44:01,440
uh i do want to give a shout out to

1318
00:44:01,440 --> 00:44:03,280
pentester academy i'm sure some of you

1319
00:44:03,280 --> 00:44:04,319
have probably been

1320
00:44:04,319 --> 00:44:07,839
uh in the uh attack lab inside of um

1321
00:44:07,839 --> 00:44:09,280
pentester academy

1322
00:44:09,280 --> 00:44:10,640
and inside of there there's actually

1323
00:44:10,640 --> 00:44:12,880
some container breakout exercises which

1324
00:44:12,880 --> 00:44:14,880
is where i got some of this information

1325
00:44:14,880 --> 00:44:16,640
which is why i wanted to recognize vivek

1326
00:44:16,640 --> 00:44:18,640
and his awesome team of folks

1327
00:44:18,640 --> 00:44:20,880
um that he has at penn tester pentester

1328
00:44:20,880 --> 00:44:22,240
academy

1329
00:44:22,240 --> 00:44:24,880
and so there's basically like these are

1330
00:44:24,880 --> 00:44:26,480
based on capabilities

1331
00:44:26,480 --> 00:44:29,839
um you can for example

1332
00:44:29,839 --> 00:44:32,319
if the container is running in privilege

1333
00:44:32,319 --> 00:44:33,119
mode let's say

1334
00:44:33,119 --> 00:44:35,440
and it has all of the capabilities that

1335
00:44:35,440 --> 00:44:37,040
are accessible inside of the linux

1336
00:44:37,040 --> 00:44:37,680
kernel

1337
00:44:37,680 --> 00:44:40,079
and it's not running as root but it's

1338
00:44:40,079 --> 00:44:41,440
running in privilege mode

1339
00:44:41,440 --> 00:44:44,560
essentially one of those privileges is i

1340
00:44:44,560 --> 00:44:45,680
can

1341
00:44:45,680 --> 00:44:49,520
create a kernel module load that kernel

1342
00:44:49,520 --> 00:44:50,160
module

1343
00:44:50,160 --> 00:44:53,200
into the kernel that basically gets run

1344
00:44:53,200 --> 00:44:54,400
as root

1345
00:44:54,400 --> 00:44:57,359
and that kernel module can shovel me

1346
00:44:57,359 --> 00:44:58,880
back a root shell

1347
00:44:58,880 --> 00:45:01,839
uh and that's some of the dangers and

1348
00:45:01,839 --> 00:45:03,200
fears that i have of people running

1349
00:45:03,200 --> 00:45:03,839
containers

1350
00:45:03,839 --> 00:45:06,560
is we can circumvent this another great

1351
00:45:06,560 --> 00:45:08,240
medium article that talks about

1352
00:45:08,240 --> 00:45:11,599
a different type of capability that

1353
00:45:11,599 --> 00:45:13,440
could be granted to containers

1354
00:45:13,440 --> 00:45:15,200
that abuses the file system to

1355
00:45:15,200 --> 00:45:16,960
essentially gain

1356
00:45:16,960 --> 00:45:20,160
root access and break out into the host

1357
00:45:20,160 --> 00:45:22,319
operating system

1358
00:45:22,319 --> 00:45:24,480
so some great reading there uh and again

1359
00:45:24,480 --> 00:45:26,640
great exercises you can actually do some

1360
00:45:26,640 --> 00:45:27,520
of this stuff

1361
00:45:27,520 --> 00:45:29,599
uh inside of the attack labs at

1362
00:45:29,599 --> 00:45:32,800
pentester academy

1363
00:45:32,800 --> 00:45:36,160
okay multi-stage builds um

1364
00:45:36,160 --> 00:45:39,760
this is a a really great capability and

1365
00:45:39,760 --> 00:45:42,160
in function inside of docker that i wish

1366
00:45:42,160 --> 00:45:43,280
more people used

1367
00:45:43,280 --> 00:45:45,839
essentially you can create a staging

1368
00:45:45,839 --> 00:45:46,640
environment

1369
00:45:46,640 --> 00:45:48,079
in your build process so it's like a

1370
00:45:48,079 --> 00:45:49,839
staging environment inside of a staging

1371
00:45:49,839 --> 00:45:50,880
environment

1372
00:45:50,880 --> 00:45:54,319
and what this means is i might need to

1373
00:45:54,319 --> 00:45:56,160
compile some things configure some

1374
00:45:56,160 --> 00:45:56,960
things

1375
00:45:56,960 --> 00:45:59,040
that require some additional tools to be

1376
00:45:59,040 --> 00:46:00,319
installed

1377
00:46:00,319 --> 00:46:03,440
but those tools don't need to exist when

1378
00:46:03,440 --> 00:46:05,920
i push my container out into production

1379
00:46:05,920 --> 00:46:07,440
well you can do this right inside the

1380
00:46:07,440 --> 00:46:09,760
build process and do a multi-stage build

1381
00:46:09,760 --> 00:46:13,040
and what happens is in my from line at

1382
00:46:13,040 --> 00:46:13,680
the top

1383
00:46:13,680 --> 00:46:15,520
you can see i'm going to build a buster

1384
00:46:15,520 --> 00:46:18,000
slim and i'm going to name it my compile

1385
00:46:18,000 --> 00:46:20,480
image so you basically start

1386
00:46:20,480 --> 00:46:22,400
a docker image build you start building

1387
00:46:22,400 --> 00:46:24,480
layers and you give it a name called

1388
00:46:24,480 --> 00:46:25,520
compile image

1389
00:46:25,520 --> 00:46:27,040
now in this one it happens to come from

1390
00:46:27,040 --> 00:46:28,880
my media wiki

1391
00:46:28,880 --> 00:46:31,040
build and now when i did this media wiki

1392
00:46:31,040 --> 00:46:33,119
did not have a multi-stage build

1393
00:46:33,119 --> 00:46:35,680
in order to build media wiki so i

1394
00:46:35,680 --> 00:46:37,520
created my own that did a multi-stage

1395
00:46:37,520 --> 00:46:38,480
build

1396
00:46:38,480 --> 00:46:40,960
and you can see when i run these

1397
00:46:40,960 --> 00:46:42,720
commands down at the bottom

1398
00:46:42,720 --> 00:46:46,160
i'm installing curl i'm installing git

1399
00:46:46,160 --> 00:46:49,119
i'm installing some unzip utilities and

1400
00:46:49,119 --> 00:46:50,800
some php libraries

1401
00:46:50,800 --> 00:46:53,200
these are required for me to build all

1402
00:46:53,200 --> 00:46:55,520
of my stuff

1403
00:46:55,520 --> 00:46:59,599
and when i go to oops

1404
00:46:59,599 --> 00:47:02,720
sorry um so this was the next slide so

1405
00:47:02,720 --> 00:47:04,720
when i go to now build

1406
00:47:04,720 --> 00:47:07,359
my actual built image or my production

1407
00:47:07,359 --> 00:47:08,319
image

1408
00:47:08,319 --> 00:47:11,760
there is a line in here uh the uh

1409
00:47:11,760 --> 00:47:14,640
third line down not including the space

1410
00:47:14,640 --> 00:47:16,079
other empty line rather

1411
00:47:16,079 --> 00:47:18,960
where it says copy dash dash from

1412
00:47:18,960 --> 00:47:19,680
compile

1413
00:47:19,680 --> 00:47:22,559
dash image what that's doing is taking

1414
00:47:22,559 --> 00:47:24,000
the result

1415
00:47:24,000 --> 00:47:27,200
of my compile commands all of my

1416
00:47:27,200 --> 00:47:30,880
curling down a plug-in and using

1417
00:47:30,880 --> 00:47:33,760
uh you know gcc to compile something and

1418
00:47:33,760 --> 00:47:35,119
it's taking the result of that

1419
00:47:35,119 --> 00:47:36,559
and it's just copying it into a

1420
00:47:36,559 --> 00:47:38,640
directory in essentially my new

1421
00:47:38,640 --> 00:47:40,160
container or my build image

1422
00:47:40,160 --> 00:47:41,520
so i'm taking the results from the

1423
00:47:41,520 --> 00:47:43,440
previous stage copying it into my

1424
00:47:43,440 --> 00:47:44,640
current image

1425
00:47:44,640 --> 00:47:47,040
i'm reducing my privileges down to a

1426
00:47:47,040 --> 00:47:48,480
non-root user

1427
00:47:48,480 --> 00:47:51,920
and i don't need to install git and curl

1428
00:47:51,920 --> 00:47:54,640
and wget and some other php libraries

1429
00:47:54,640 --> 00:47:55,839
because i only need those during the

1430
00:47:55,839 --> 00:47:58,160
build stage so multi-stage builds are

1431
00:47:58,160 --> 00:47:58,960
awesome

1432
00:47:58,960 --> 00:48:00,720
you should absolutely use them and

1433
00:48:00,720 --> 00:48:02,640
they're a lot of fun to uh to configure

1434
00:48:02,640 --> 00:48:06,079
and code actually

1435
00:48:06,079 --> 00:48:07,599
okay so the next thing you'll you'll

1436
00:48:07,599 --> 00:48:09,599
need to worry about is

1437
00:48:09,599 --> 00:48:11,760
managing and protecting secrets and a

1438
00:48:11,760 --> 00:48:13,440
lot of people get this wrong

1439
00:48:13,440 --> 00:48:15,520
right you see a lot of your pen tester

1440
00:48:15,520 --> 00:48:17,040
out there um

1441
00:48:17,040 --> 00:48:19,599
or your developer right and you just

1442
00:48:19,599 --> 00:48:20,319
know

1443
00:48:20,319 --> 00:48:23,359
that sometimes a key leaks into your git

1444
00:48:23,359 --> 00:48:24,640
repository

1445
00:48:24,640 --> 00:48:27,920
and that's bad or your secrets are not

1446
00:48:27,920 --> 00:48:29,520
being protected and they're in clear

1447
00:48:29,520 --> 00:48:31,599
text files that people can read

1448
00:48:31,599 --> 00:48:34,480
and this is bad and trying to protect

1449
00:48:34,480 --> 00:48:35,359
these

1450
00:48:35,359 --> 00:48:38,559
is somewhat difficult now the right way

1451
00:48:38,559 --> 00:48:40,319
to do this is using a vault

1452
00:48:40,319 --> 00:48:42,960
of some kind and i'll show you an

1453
00:48:42,960 --> 00:48:43,760
example

1454
00:48:43,760 --> 00:48:47,119
where um the amazon aws service for

1455
00:48:47,119 --> 00:48:49,839
a protected store uh is what i'm using

1456
00:48:49,839 --> 00:48:50,400
in their

1457
00:48:50,400 --> 00:48:53,760
like sis sys admin sys something module

1458
00:48:53,760 --> 00:48:56,079
it's on an upcoming slide and that's one

1459
00:48:56,079 --> 00:48:57,920
way so basically you can store

1460
00:48:57,920 --> 00:49:00,319
your credentials inside of a vault

1461
00:49:00,319 --> 00:49:02,240
inside your cloud provider right aws

1462
00:49:02,240 --> 00:49:03,839
secrets manager

1463
00:49:03,839 --> 00:49:05,359
and there's a couple of other facilities

1464
00:49:05,359 --> 00:49:06,880
in aws

1465
00:49:06,880 --> 00:49:08,559
and other cloud providers have a similar

1466
00:49:08,559 --> 00:49:10,800
facility in the concept of a vault

1467
00:49:10,800 --> 00:49:13,440
you can also use a hashicorp vault and

1468
00:49:13,440 --> 00:49:14,880
store your secrets in the hashicorp

1469
00:49:14,880 --> 00:49:15,520
vault

1470
00:49:15,520 --> 00:49:17,520
those are much better ways to do that

1471
00:49:17,520 --> 00:49:20,880
however if you're doing development

1472
00:49:21,040 --> 00:49:24,079
or you don't have a vault deployment yet

1473
00:49:24,079 --> 00:49:25,839
and you just want to work to store your

1474
00:49:25,839 --> 00:49:27,920
secrets if you look at this particular

1475
00:49:27,920 --> 00:49:29,440
configuration right

1476
00:49:29,440 --> 00:49:31,280
i've got some ssl search i need to

1477
00:49:31,280 --> 00:49:33,680
protect and i've got database usernames

1478
00:49:33,680 --> 00:49:34,640
and passwords

1479
00:49:34,640 --> 00:49:37,599
that i need to protect as well and maybe

1480
00:49:37,599 --> 00:49:39,760
i've only got my vault that's up in the

1481
00:49:39,760 --> 00:49:41,760
cloud but i'm developing locally and i

1482
00:49:41,760 --> 00:49:43,760
still want to protect my secrets

1483
00:49:43,760 --> 00:49:45,440
so this is a pretty good use case to do

1484
00:49:45,440 --> 00:49:47,200
that basically

1485
00:49:47,200 --> 00:49:50,319
you store your secrets only in your

1486
00:49:50,319 --> 00:49:52,640
env file which stores environment

1487
00:49:52,640 --> 00:49:54,160
variables that are automatically

1488
00:49:54,160 --> 00:49:58,000
read by docker compose at execution time

1489
00:49:58,000 --> 00:50:01,119
i get ignore all of my env files so

1490
00:50:01,119 --> 00:50:02,960
they're local to

1491
00:50:02,960 --> 00:50:05,119
my system again not the best approach

1492
00:50:05,119 --> 00:50:06,880
the better approach is to use a vault

1493
00:50:06,880 --> 00:50:10,079
um but using this workaround

1494
00:50:10,079 --> 00:50:12,800
what it allows me to do is not have my

1495
00:50:12,800 --> 00:50:13,680
clear text

1496
00:50:13,680 --> 00:50:16,079
database username and password inside of

1497
00:50:16,079 --> 00:50:17,520
the configuration file

1498
00:50:17,520 --> 00:50:19,200
right that may exist inside of the

1499
00:50:19,200 --> 00:50:20,960
environment um

1500
00:50:20,960 --> 00:50:22,559
but which is again the use case for the

1501
00:50:22,559 --> 00:50:24,720
vault but to just get it out of my file

1502
00:50:24,720 --> 00:50:26,880
so that if i check in my configuration

1503
00:50:26,880 --> 00:50:27,440
file

1504
00:50:27,440 --> 00:50:29,920
it's not in my configuration file and

1505
00:50:29,920 --> 00:50:31,599
it's not just hanging around as a

1506
00:50:31,599 --> 00:50:34,319
you know in all different iterations of

1507
00:50:34,319 --> 00:50:35,920
a configuration file

1508
00:50:35,920 --> 00:50:37,680
basically the credentials only exist in

1509
00:50:37,680 --> 00:50:39,280
your env

1510
00:50:39,280 --> 00:50:41,359
then when docker compose runs it reads

1511
00:50:41,359 --> 00:50:42,480
those into

1512
00:50:42,480 --> 00:50:45,040
arguments inside of the compose file

1513
00:50:45,040 --> 00:50:46,640
those arguments are then passed to the

1514
00:50:46,640 --> 00:50:47,760
docker file

1515
00:50:47,760 --> 00:50:50,079
the docker file then takes those and

1516
00:50:50,079 --> 00:50:51,520
writes them

1517
00:50:51,520 --> 00:50:54,480
into the container image actually writes

1518
00:50:54,480 --> 00:50:55,440
the

1519
00:50:55,440 --> 00:50:57,920
environment variables into the

1520
00:50:57,920 --> 00:50:59,119
configuration

1521
00:50:59,119 --> 00:51:01,280
files inside of the container image and

1522
00:51:01,280 --> 00:51:02,880
that's read from the environment at

1523
00:51:02,880 --> 00:51:04,800
runtime so there is a piece where

1524
00:51:04,800 --> 00:51:06,240
you have to inject these into the

1525
00:51:06,240 --> 00:51:08,880
environment at build time and that's

1526
00:51:08,880 --> 00:51:12,079
exists on the build server so this does

1527
00:51:12,079 --> 00:51:12,960
help

1528
00:51:12,960 --> 00:51:15,680
reduce the amount of credentials and

1529
00:51:15,680 --> 00:51:16,960
where they are

1530
00:51:16,960 --> 00:51:18,480
again a better solution is to use a

1531
00:51:18,480 --> 00:51:20,400
vault

1532
00:51:20,400 --> 00:51:23,359
and aws gives you a much better uh in

1533
00:51:23,359 --> 00:51:24,079
aws

1534
00:51:24,079 --> 00:51:27,359
systems manager which is an aws service

1535
00:51:27,359 --> 00:51:29,040
there is the concept of a parameter

1536
00:51:29,040 --> 00:51:31,280
store inside of the parameter store you

1537
00:51:31,280 --> 00:51:33,119
can store things such as your database

1538
00:51:33,119 --> 00:51:35,200
username and password

1539
00:51:35,200 --> 00:51:38,000
and then if you're deploying your

1540
00:51:38,000 --> 00:51:38,960
containers

1541
00:51:38,960 --> 00:51:42,079
in amazon's ecs instead of putting the

1542
00:51:42,079 --> 00:51:43,760
clear text username and password to your

1543
00:51:43,760 --> 00:51:45,760
database inside of ecs

1544
00:51:45,760 --> 00:51:48,400
you just point it at the parameter store

1545
00:51:48,400 --> 00:51:49,040
and through

1546
00:51:49,040 --> 00:51:52,720
aws uh policies and roles

1547
00:51:52,720 --> 00:51:55,839
you grant that ecs access to that uh

1548
00:51:55,839 --> 00:51:56,880
credential

1549
00:51:56,880 --> 00:51:59,839
which gives it a much better way to

1550
00:51:59,839 --> 00:52:00,559
protect

1551
00:52:00,559 --> 00:52:03,440
your secrets uh so it is essentially

1552
00:52:03,440 --> 00:52:05,440
this is sort of like using a vault

1553
00:52:05,440 --> 00:52:07,040
uh although it is not a traditional

1554
00:52:07,040 --> 00:52:08,720
fault as we would think of from

1555
00:52:08,720 --> 00:52:12,079
hashicorp uh or uh conjurer

1556
00:52:12,079 --> 00:52:15,440
uh from cyber arc

1557
00:52:16,160 --> 00:52:19,359
um so now to manage some of these uh

1558
00:52:19,359 --> 00:52:22,319
secrets uh it's kind of interesting um

1559
00:52:22,319 --> 00:52:24,400
so we show an initial configuration

1560
00:52:24,400 --> 00:52:26,480
that we're using randomly generated

1561
00:52:26,480 --> 00:52:28,559
passwords uh which i think is uh

1562
00:52:28,559 --> 00:52:30,480
actually cut off on the slide

1563
00:52:30,480 --> 00:52:33,280
essentially at build time

1564
00:52:33,280 --> 00:52:36,240
what i'm doing is injecting the username

1565
00:52:36,240 --> 00:52:37,680
and password

1566
00:52:37,680 --> 00:52:41,119
into the container system if i'm

1567
00:52:41,119 --> 00:52:44,160
also building the database container and

1568
00:52:44,160 --> 00:52:47,200
resulting image in my build process i

1569
00:52:47,200 --> 00:52:48,480
can build a new

1570
00:52:48,480 --> 00:52:51,520
database image give it new credentials

1571
00:52:51,520 --> 00:52:53,680
put those new credentials inside of my

1572
00:52:53,680 --> 00:52:54,960
application server

1573
00:52:54,960 --> 00:52:56,559
and every time i build i can have a

1574
00:52:56,559 --> 00:52:58,319
different set of credentials so my

1575
00:52:58,319 --> 00:53:00,000
credentials do become compromised in

1576
00:53:00,000 --> 00:53:00,800
some way

1577
00:53:00,800 --> 00:53:02,480
it doesn't matter because i'm basically

1578
00:53:02,480 --> 00:53:04,079
randomly generating those

1579
00:53:04,079 --> 00:53:05,920
at every iteration and that's

1580
00:53:05,920 --> 00:53:07,680
configuration dependent

1581
00:53:07,680 --> 00:53:10,160
um in really means like uh you're not

1582
00:53:10,160 --> 00:53:11,200
using rds

1583
00:53:11,200 --> 00:53:14,319
right or the database management service

1584
00:53:14,319 --> 00:53:16,720
from a cloud provider such as amazon

1585
00:53:16,720 --> 00:53:18,559
that i have an actual container that's

1586
00:53:18,559 --> 00:53:19,839
running my database

1587
00:53:19,839 --> 00:53:22,000
if you do that locally for our builds

1588
00:53:22,000 --> 00:53:23,839
this is what we do and we just randomly

1589
00:53:23,839 --> 00:53:25,280
generate the passwords

1590
00:53:25,280 --> 00:53:28,480
again that minimizes that an attacker

1591
00:53:28,480 --> 00:53:30,880
who does gain access to a credential

1592
00:53:30,880 --> 00:53:33,040
has the keys to your kingdom or all of

1593
00:53:33,040 --> 00:53:34,160
your kingdoms right

1594
00:53:34,160 --> 00:53:36,400
uh if it's randomly generated every time

1595
00:53:36,400 --> 00:53:38,160
and there's basically just an open ssl

1596
00:53:38,160 --> 00:53:38,800
command

1597
00:53:38,800 --> 00:53:41,520
which got caught off here i apologize

1598
00:53:41,520 --> 00:53:44,800
that generates a random password

1599
00:53:44,800 --> 00:53:47,680
and it does this at build time so every

1600
00:53:47,680 --> 00:53:49,280
time i rebuild my environment

1601
00:53:49,280 --> 00:53:52,640
i can generate new credentials

1602
00:53:52,960 --> 00:53:54,720
you will need to customize some of your

1603
00:53:54,720 --> 00:53:56,480
applications this could be your own

1604
00:53:56,480 --> 00:53:58,559
locally written application or

1605
00:53:58,559 --> 00:54:00,960
someone else's in the case of mediawiki

1606
00:54:00,960 --> 00:54:02,720
it's nice because their configuration is

1607
00:54:02,720 --> 00:54:04,400
actually a php file

1608
00:54:04,400 --> 00:54:07,440
and so um and there's a great example on

1609
00:54:07,440 --> 00:54:08,640
the internet that i probably should have

1610
00:54:08,640 --> 00:54:10,000
linked to as well where i got this

1611
00:54:10,000 --> 00:54:12,079
from um but essentially you can write

1612
00:54:12,079 --> 00:54:13,839
some code inside of that configuration

1613
00:54:13,839 --> 00:54:14,960
file that

1614
00:54:14,960 --> 00:54:18,000
rather than statically defining your

1615
00:54:18,000 --> 00:54:20,000
database username and password

1616
00:54:20,000 --> 00:54:24,000
you can read it from uh the environment

1617
00:54:24,000 --> 00:54:26,160
uh which means that your resulting

1618
00:54:26,160 --> 00:54:28,720
config file doesn't actually contain

1619
00:54:28,720 --> 00:54:30,640
uh those passwords it's just read

1620
00:54:30,640 --> 00:54:31,839
randomly

1621
00:54:31,839 --> 00:54:34,319
at runtime uh so again minimizes the

1622
00:54:34,319 --> 00:54:37,599
risk of exposure of your credentials

1623
00:54:37,599 --> 00:54:40,799
okay vulnerability management

1624
00:54:40,799 --> 00:54:42,640
uh is is somewhat interesting when we

1625
00:54:42,640 --> 00:54:44,079
talk about containers

1626
00:54:44,079 --> 00:54:47,280
um in there's a lot of great open source

1627
00:54:47,280 --> 00:54:48,160
tools

1628
00:54:48,160 --> 00:54:51,280
um i've tested several uh

1629
00:54:51,280 --> 00:54:53,760
hedolin is one that i really like uh and

1630
00:54:53,760 --> 00:54:54,640
then and i'm

1631
00:54:54,640 --> 00:54:57,760
incorporating into my build process

1632
00:54:57,760 --> 00:54:59,680
the cat in the litter box is not just

1633
00:54:59,680 --> 00:55:01,359
like a funny random image that i found

1634
00:55:01,359 --> 00:55:02,880
on the internet it's actually the logo

1635
00:55:02,880 --> 00:55:04,000
for hadolin

1636
00:55:04,000 --> 00:55:06,640
uh which i think is really awesome um

1637
00:55:06,640 --> 00:55:07,280
but

1638
00:55:07,280 --> 00:55:10,480
uh what it does is it basically uh will

1639
00:55:10,480 --> 00:55:11,839
analyze your doctor file

1640
00:55:11,839 --> 00:55:13,920
and tell you about any potential

1641
00:55:13,920 --> 00:55:15,240
security

1642
00:55:15,240 --> 00:55:16,960
misconfigurations you might have inside

1643
00:55:16,960 --> 00:55:19,040
your docker file great thing it's free

1644
00:55:19,040 --> 00:55:20,240
it's open source

1645
00:55:20,240 --> 00:55:21,680
you can look at all of its list of

1646
00:55:21,680 --> 00:55:23,599
things it's checking for one of the

1647
00:55:23,599 --> 00:55:25,040
things it does check for

1648
00:55:25,040 --> 00:55:27,119
uh gets back to actually uh you know

1649
00:55:27,119 --> 00:55:28,640
previously in the presentation when i

1650
00:55:28,640 --> 00:55:29,599
talked about

1651
00:55:29,599 --> 00:55:30,799
you know how much control you want to

1652
00:55:30,799 --> 00:55:32,240
have do you want to build your own linux

1653
00:55:32,240 --> 00:55:33,359
distribution

1654
00:55:33,359 --> 00:55:35,839
or do you want to use a slimmer image or

1655
00:55:35,839 --> 00:55:36,640
do you want to just

1656
00:55:36,640 --> 00:55:38,400
inherit all those vulnerabilities from

1657
00:55:38,400 --> 00:55:40,640
using uh you know something like

1658
00:55:40,640 --> 00:55:44,079
from node colon a in here

1659
00:55:44,079 --> 00:55:46,079
adolen's saying look when you install a

1660
00:55:46,079 --> 00:55:49,040
package you should pin it to a version

1661
00:55:49,040 --> 00:55:51,920
right and to me that's a double-edged

1662
00:55:51,920 --> 00:55:52,880
sword because

1663
00:55:52,880 --> 00:55:55,839
yes you could pin it to a version that

1664
00:55:55,839 --> 00:55:57,200
you know does not have

1665
00:55:57,200 --> 00:56:00,480
any vulnerabilities at the time however

1666
00:56:00,480 --> 00:56:02,640
when that package updates it's up to you

1667
00:56:02,640 --> 00:56:04,240
to go into your configuration and your

1668
00:56:04,240 --> 00:56:05,280
build scripts

1669
00:56:05,280 --> 00:56:08,319
and change that version um so

1670
00:56:08,319 --> 00:56:12,160
i i mean this can prevent you from maybe

1671
00:56:12,160 --> 00:56:14,720
you know version four of a particular

1672
00:56:14,720 --> 00:56:15,680
project

1673
00:56:15,680 --> 00:56:17,920
had a back door because a developer

1674
00:56:17,920 --> 00:56:19,119
leaked a key or

1675
00:56:19,119 --> 00:56:22,319
or password spraying or whatever but uh

1676
00:56:22,319 --> 00:56:22,799
and i

1677
00:56:22,799 --> 00:56:24,799
pinned my version to version three so i

1678
00:56:24,799 --> 00:56:27,119
didn't automatically update to the newer

1679
00:56:27,119 --> 00:56:27,839
version

1680
00:56:27,839 --> 00:56:29,920
that had that vulnerability is a use

1681
00:56:29,920 --> 00:56:31,280
case however

1682
00:56:31,280 --> 00:56:33,200
you know version four fixes a really

1683
00:56:33,200 --> 00:56:34,400
heinous flaw

1684
00:56:34,400 --> 00:56:35,760
and you've pinned your package to

1685
00:56:35,760 --> 00:56:37,200
version three you're gonna have the

1686
00:56:37,200 --> 00:56:39,040
heinous flaw until you fix it so

1687
00:56:39,040 --> 00:56:41,760
to me that's a double-edged sword um but

1688
00:56:41,760 --> 00:56:42,799
certainly available

1689
00:56:42,799 --> 00:56:45,040
in in your build process in flag by by

1690
00:56:45,040 --> 00:56:47,760
hadron it's pretty cool utility

1691
00:56:47,760 --> 00:56:51,200
um there's lots of software out there

1692
00:56:51,200 --> 00:56:52,720
commercial and open source

1693
00:56:52,720 --> 00:56:54,079
that's going to scan your docker

1694
00:56:54,079 --> 00:56:56,000
configuration scan your source code

1695
00:56:56,000 --> 00:56:56,880
configuration

1696
00:56:56,880 --> 00:57:00,240
look for what packages libraries and

1697
00:57:00,240 --> 00:57:02,079
dependencies that you have

1698
00:57:02,079 --> 00:57:04,400
in your source code in your operating

1699
00:57:04,400 --> 00:57:05,359
system

1700
00:57:05,359 --> 00:57:08,079
that exist inside of your container

1701
00:57:08,079 --> 00:57:10,160
anchor's got a pretty cool open source

1702
00:57:10,160 --> 00:57:11,119
one

1703
00:57:11,119 --> 00:57:12,720
that i really like to use and there's

1704
00:57:12,720 --> 00:57:14,319
lots of them out there there's claire

1705
00:57:14,319 --> 00:57:14,960
and

1706
00:57:14,960 --> 00:57:16,799
many others there's commercial ones

1707
00:57:16,799 --> 00:57:18,160
sneak has a free one

1708
00:57:18,160 --> 00:57:20,960
and a commercial one as well and really

1709
00:57:20,960 --> 00:57:22,480
some of the differences between the free

1710
00:57:22,480 --> 00:57:23,280
and open source

1711
00:57:23,280 --> 00:57:26,400
are i mean between commercial

1712
00:57:26,400 --> 00:57:29,760
and or free and open source are the

1713
00:57:29,760 --> 00:57:32,160
transient dependencies so the dependency

1714
00:57:32,160 --> 00:57:33,200
of a dependency

1715
00:57:33,200 --> 00:57:37,200
i might pull in some python library xyz

1716
00:57:37,200 --> 00:57:39,440
and that python library xyz pulls in

1717
00:57:39,440 --> 00:57:40,799
three more libraries

1718
00:57:40,799 --> 00:57:43,040
and one of those is vulnerable and the

1719
00:57:43,040 --> 00:57:45,040
other one has a back door in it

1720
00:57:45,040 --> 00:57:47,520
the commercial products do a much better

1721
00:57:47,520 --> 00:57:48,640
job at

1722
00:57:48,640 --> 00:57:51,920
what we call transient dependencies

1723
00:57:51,920 --> 00:57:54,079
but the open source tools work great for

1724
00:57:54,079 --> 00:57:55,200
analyzing

1725
00:57:55,200 --> 00:57:56,880
an image that you might be using or one

1726
00:57:56,880 --> 00:57:58,559
that you created yourself

1727
00:57:58,559 --> 00:58:00,799
um so this is just a cheat sheet i won't

1728
00:58:00,799 --> 00:58:02,319
go through every command on here but

1729
00:58:02,319 --> 00:58:03,599
this is basically

1730
00:58:03,599 --> 00:58:05,119
you know how you get anchor up and

1731
00:58:05,119 --> 00:58:06,880
running it's a cheat sheet i created for

1732
00:58:06,880 --> 00:58:08,319
myself

1733
00:58:08,319 --> 00:58:12,000
the last three lines are important

1734
00:58:12,000 --> 00:58:13,599
you have to make sure that you add your

1735
00:58:13,599 --> 00:58:15,680
image then you have to wait

1736
00:58:15,680 --> 00:58:17,680
while that image gets scanned and then

1737
00:58:17,680 --> 00:58:20,000
you can report on the vulnerabilities

1738
00:58:20,000 --> 00:58:22,960
and what that does for you uh is just an

1739
00:58:22,960 --> 00:58:24,079
example of it running

1740
00:58:24,079 --> 00:58:26,160
when you run the wait command it says oh

1741
00:58:26,160 --> 00:58:27,680
i'm still analyzing that image for

1742
00:58:27,680 --> 00:58:28,880
vulnerabilities

1743
00:58:28,880 --> 00:58:31,839
then it spits out uh that hey i'm done

1744
00:58:31,839 --> 00:58:33,839
uh and your report is ready

1745
00:58:33,839 --> 00:58:36,240
and if you look at the report and this

1746
00:58:36,240 --> 00:58:38,319
is using node 8 as an example

1747
00:58:38,319 --> 00:58:40,839
you know all of those 2 400 or more

1748
00:58:40,839 --> 00:58:42,240
vulnerabilities

1749
00:58:42,240 --> 00:58:43,680
you know there are some severity

1750
00:58:43,680 --> 00:58:45,680
criticals and highs in there

1751
00:58:45,680 --> 00:58:48,079
that are in that image that you just

1752
00:58:48,079 --> 00:58:49,520
inherited right and that

1753
00:58:49,520 --> 00:58:52,640
that could be from uh any number of

1754
00:58:52,640 --> 00:58:54,160
different packages right

1755
00:58:54,160 --> 00:58:55,520
but you can see you've inherited some

1756
00:58:55,520 --> 00:58:57,520
vulnerabilities now

1757
00:58:57,520 --> 00:58:59,680
what i like to do is look at debbie and

1758
00:58:59,680 --> 00:59:01,440
buster slim which is what i one of my

1759
00:59:01,440 --> 00:59:02,720
favorites to use

1760
00:59:02,720 --> 00:59:04,000
and you can see the severity is

1761
00:59:04,000 --> 00:59:06,000
negligible it does have some cves

1762
00:59:06,000 --> 00:59:07,200
associated with it

1763
00:59:07,200 --> 00:59:09,119
but the severity is negligible if i go

1764
00:59:09,119 --> 00:59:11,359
back and look at node 8

1765
00:59:11,359 --> 00:59:13,920
you know there's critical high and low

1766
00:59:13,920 --> 00:59:15,920
and medium vulnerabilities in there

1767
00:59:15,920 --> 00:59:18,480
whereas buster 10 only has negligible

1768
00:59:18,480 --> 00:59:19,520
vulnerabilities

1769
00:59:19,520 --> 00:59:22,400
and if you look at the total number uh

1770
00:59:22,400 --> 00:59:23,839
at the time when i ran that command it

1771
00:59:23,839 --> 00:59:24,640
was actually

1772
00:59:24,640 --> 00:59:28,079
uh 2386 it

1773
00:59:28,079 --> 00:59:31,440
grew to 22 400 and something

1774
00:59:31,440 --> 00:59:32,799
i'd be curious to see if i ran that

1775
00:59:32,799 --> 00:59:35,760
command today if we're surpassing 2500

1776
00:59:35,760 --> 00:59:37,920
vulnerabilities that are just inherit

1777
00:59:37,920 --> 00:59:39,920
inside of that image

1778
00:59:39,920 --> 00:59:42,960
when i look at buster slim they're 75

1779
00:59:42,960 --> 00:59:44,960
and the severity because i'm using

1780
00:59:44,960 --> 00:59:46,720
anchor to look at the severity not just

1781
00:59:46,720 --> 00:59:47,680
the number

1782
00:59:47,680 --> 00:59:49,680
is negligible and that's one of the ways

1783
00:59:49,680 --> 00:59:50,720
that i like to choose

1784
00:59:50,720 --> 00:59:53,200
my images using open source tools to

1785
00:59:53,200 --> 00:59:55,839
evaluate those vulnerabilities

1786
00:59:55,839 --> 00:59:57,680
the other kind of thing in here too is i

1787
00:59:57,680 --> 01:00:00,240
only use trusted images or you know as

1788
01:00:00,240 --> 01:00:01,119
best we can

1789
01:00:01,119 --> 01:00:03,200
basically it makes sure that that image

1790
01:00:03,200 --> 01:00:04,400
has been signed

1791
01:00:04,400 --> 01:00:06,799
inside of docker hub that someone hasn't

1792
01:00:06,799 --> 01:00:09,680
poisoned that image with a back door

1793
01:00:09,680 --> 01:00:12,400
which is a good thing to do inside of

1794
01:00:12,400 --> 01:00:13,440
your environment

1795
01:00:13,440 --> 01:00:15,599
in all of your build scripts if you set

1796
01:00:15,599 --> 01:00:17,839
docker content trust equal to one

1797
01:00:17,839 --> 01:00:21,040
it will only pull signed images which

1798
01:00:21,040 --> 01:00:21,760
just helps

1799
01:00:21,760 --> 01:00:25,200
reduce the likelihood that you'll pull

1800
01:00:25,200 --> 01:00:27,599
down an image that someone has purposely

1801
01:00:27,599 --> 01:00:28,880
put a backdoor

1802
01:00:28,880 --> 01:00:30,480
inside of that doesn't mean someone

1803
01:00:30,480 --> 01:00:32,960
can't compromise the build process for a

1804
01:00:32,960 --> 01:00:34,480
trusted image and put it back door in

1805
01:00:34,480 --> 01:00:34,960
there

1806
01:00:34,960 --> 01:00:36,640
that's certainly still on the table but

1807
01:00:36,640 --> 01:00:38,079
it does reduce

1808
01:00:38,079 --> 01:00:42,319
the the risk of that happening um

1809
01:00:42,319 --> 01:00:44,160
make sure that you build uh up-to-date

1810
01:00:44,160 --> 01:00:46,240
versions of all of your components

1811
01:00:46,240 --> 01:00:47,839
um you know on the subject of

1812
01:00:47,839 --> 01:00:49,440
vulnerability management

1813
01:00:49,440 --> 01:00:52,160
um when i pull in other components so in

1814
01:00:52,160 --> 01:00:55,119
mediawiki i use a couple of extensions

1815
01:00:55,119 --> 01:00:58,160
every time i build mediawiki i go out

1816
01:00:58,160 --> 01:01:01,440
to the extension website

1817
01:01:01,440 --> 01:01:04,799
i pull down the latest version of that

1818
01:01:04,799 --> 01:01:05,920
extension

1819
01:01:05,920 --> 01:01:08,400
and i build it and if it breaks i want

1820
01:01:08,400 --> 01:01:10,000
to get an alert this is hey

1821
01:01:10,000 --> 01:01:12,240
i tried to pull down the embed video

1822
01:01:12,240 --> 01:01:14,319
extension and it broke your build

1823
01:01:14,319 --> 01:01:16,160
you have to go fix that before we can

1824
01:01:16,160 --> 01:01:18,240
push this new version of production

1825
01:01:18,240 --> 01:01:21,280
um so this means that any code changes

1826
01:01:21,280 --> 01:01:21,839
including

1827
01:01:21,839 --> 01:01:24,400
vulnerability fixes will automatically

1828
01:01:24,400 --> 01:01:26,799
be inside of our build process

1829
01:01:26,799 --> 01:01:29,119
which is just awesome in you know that

1830
01:01:29,119 --> 01:01:31,520
happens natively inside of the container

1831
01:01:31,520 --> 01:01:34,000
right most of the time in terms of you

1832
01:01:34,000 --> 01:01:36,000
know building out the latest version of

1833
01:01:36,000 --> 01:01:37,520
libraries if you've got a pip

1834
01:01:37,520 --> 01:01:40,000
requirements file that doesn't pin it to

1835
01:01:40,000 --> 01:01:40,880
a version

1836
01:01:40,880 --> 01:01:43,520
those get updated but also be mindful of

1837
01:01:43,520 --> 01:01:44,880
any components like this one that i'm

1838
01:01:44,880 --> 01:01:45,839
pulling in

1839
01:01:45,839 --> 01:01:47,839
and i'm building the latest version

1840
01:01:47,839 --> 01:01:48,960
always

1841
01:01:48,960 --> 01:01:52,400
at runtime

1842
01:01:52,400 --> 01:01:55,039
using a small uh base image actually at

1843
01:01:55,039 --> 01:01:56,480
one time this did have a high

1844
01:01:56,480 --> 01:01:58,880
uh vulnerability that they fixed but not

1845
01:01:58,880 --> 01:02:00,480
one of the nice things about amazon's

1846
01:02:00,480 --> 01:02:01,680
ecr

1847
01:02:01,680 --> 01:02:04,880
uh as well as uh github will do

1848
01:02:04,880 --> 01:02:07,440
some of this as well is that both these

1849
01:02:07,440 --> 01:02:08,240
registries

1850
01:02:08,240 --> 01:02:09,839
and github natively in your source code

1851
01:02:09,839 --> 01:02:12,000
repository if that's what you're using

1852
01:02:12,000 --> 01:02:15,039
will discover vulnerabilities so when i

1853
01:02:15,039 --> 01:02:16,880
check some of these images it or push

1854
01:02:16,880 --> 01:02:20,000
these images uh container images up to

1855
01:02:20,000 --> 01:02:23,359
my amazon ecr registry make sure your

1856
01:02:23,359 --> 01:02:25,200
scan on push is enabled in your

1857
01:02:25,200 --> 01:02:26,640
configuration when you create the

1858
01:02:26,640 --> 01:02:27,839
repository

1859
01:02:27,839 --> 01:02:29,200
and it'll automatically get a

1860
01:02:29,200 --> 01:02:31,200
vulnerability scan from

1861
01:02:31,200 --> 01:02:34,400
amazon's service which which is nice

1862
01:02:34,400 --> 01:02:35,920
again it doesn't handle a ton of

1863
01:02:35,920 --> 01:02:37,520
transient dependencies

1864
01:02:37,520 --> 01:02:39,680
um and you know it doesn't do a lot of

1865
01:02:39,680 --> 01:02:41,440
the advanced things such as

1866
01:02:41,440 --> 01:02:44,160
like what if i never used curl or i took

1867
01:02:44,160 --> 01:02:46,000
carl out of my build process

1868
01:02:46,000 --> 01:02:48,319
in a second stage is it still saying

1869
01:02:48,319 --> 01:02:49,760
carl's there i guess it would if it's in

1870
01:02:49,760 --> 01:02:50,160
the

1871
01:02:50,160 --> 01:02:52,319
in the container image um but you know

1872
01:02:52,319 --> 01:02:54,079
some of the other libraries

1873
01:02:54,079 --> 01:02:56,720
when we talk about code i may never call

1874
01:02:56,720 --> 01:02:57,599
the function

1875
01:02:57,599 --> 01:03:00,079
in the vulnerable library but since that

1876
01:03:00,079 --> 01:03:02,799
library is inside of my container

1877
01:03:02,799 --> 01:03:04,240
these systems will flag it as being

1878
01:03:04,240 --> 01:03:06,400
vulnerable so that that's some of the

1879
01:03:06,400 --> 01:03:07,200
differences

1880
01:03:07,200 --> 01:03:09,039
uh between these vulnerability

1881
01:03:09,039 --> 01:03:11,280
management uh tools when we talk about

1882
01:03:11,280 --> 01:03:12,480
containers

1883
01:03:12,480 --> 01:03:16,160
so i think i did good on time um

1884
01:03:16,160 --> 01:03:17,599
and of course we can't say thank you

1885
01:03:17,599 --> 01:03:19,440
without a meme i thought that was that

1886
01:03:19,440 --> 01:03:20,640
was pretty funny

1887
01:03:20,640 --> 01:03:24,160
um i will be in the discord channel um

1888
01:03:24,160 --> 01:03:26,319
for a while after this if uh if folks

1889
01:03:26,319 --> 01:03:27,839
have questions so

1890
01:03:27,839 --> 01:03:29,680
i'll turn it back over to uh to omar and

1891
01:03:29,680 --> 01:03:32,078
joseph

1892
01:03:32,960 --> 01:03:35,200
thank you very much paul for presenting

1893
01:03:35,200 --> 01:03:36,799
today amazing presentation

1894
01:03:36,799 --> 01:03:38,720
and now of course i'm losing my voice

1895
01:03:38,720 --> 01:03:40,400
thank you so much for supporting the

1896
01:03:40,400 --> 01:03:42,000
defcon red team village and

1897
01:03:42,000 --> 01:03:44,480
texas cyber and for all the attendees

1898
01:03:44,480 --> 01:03:45,839
out there please please feel free to

1899
01:03:45,839 --> 01:03:47,359
join the conversation at the discord

1900
01:03:47,359 --> 01:03:48,319
servers

1901
01:03:48,319 --> 01:03:50,799
we will go in a brief break and the next

1902
01:03:50,799 --> 01:03:52,559
presenter will be live in around

1903
01:03:52,559 --> 01:03:54,720
15 minutes or so so again thank you

1904
01:03:54,720 --> 01:03:55,680
again paul

1905
01:03:55,680 --> 01:04:00,960
and have a good day thanks omar youtube

