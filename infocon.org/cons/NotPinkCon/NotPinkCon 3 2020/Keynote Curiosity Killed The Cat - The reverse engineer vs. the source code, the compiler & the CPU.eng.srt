1
00:00:01,120 --> 00:00:39,800
[Music]

2
00:00:40,559 --> 00:00:42,840
welcome

3
00:00:42,840 --> 00:00:45,840
everybody

4
00:00:49,020 --> 00:00:52,279
[Music]

5
00:00:56,840 --> 00:00:59,840
yes

6
00:01:24,840 --> 00:01:27,840
uh

7
00:01:49,160 --> 00:01:57,179
[Music]

8
00:02:13,890 --> 00:02:20,489
[Music]

9
00:02:20,840 --> 00:02:21,960
um

10
00:02:21,960 --> 00:02:25,089
[Music]

11
00:02:34,840 --> 00:02:37,840
foreign

12
00:03:43,220 --> 00:03:46,300
[Music]

13
00:04:29,390 --> 00:04:32,479
[Music]

14
00:05:50,840 --> 00:05:52,080
is

15
00:05:52,080 --> 00:05:55,320
[Music]

16
00:06:32,840 --> 00:06:35,840
foreign

17
00:06:46,840 --> 00:06:49,840
foreign

18
00:07:08,900 --> 00:07:12,000
[Music]

19
00:07:46,440 --> 00:07:49,529
[Music]

20
00:08:17,420 --> 00:08:20,529
[Music]

21
00:08:46,540 --> 00:08:49,780
[Music]

22
00:09:27,750 --> 00:09:31,379
[Music]

23
00:10:11,040 --> 00:10:14,260
[Music]

24
00:10:58,839 --> 00:11:01,839
welcome

25
00:11:21,279 --> 00:11:26,399
hello is it my time to speak

26
00:11:27,600 --> 00:11:30,880
okay hello hi um good morning everybody

27
00:11:30,880 --> 00:11:34,000
um my name is marion and

28
00:11:34,000 --> 00:11:36,800
i welcome you to the kinder today about

29
00:11:36,800 --> 00:11:39,360
how curiosity killed the cat

30
00:11:39,360 --> 00:11:42,079
i'm a reverse engineer and over the past

31
00:11:42,079 --> 00:11:43,279
10 years i

32
00:11:43,279 --> 00:11:45,120
fought a lot with source code and

33
00:11:45,120 --> 00:11:46,399
recently with compilers

34
00:11:46,399 --> 00:11:49,200
and with cpus and there's lots of

35
00:11:49,200 --> 00:11:51,839
peculiar learnings to be found when you

36
00:11:51,839 --> 00:11:53,839
go down that rabbit hole and that's what

37
00:11:53,839 --> 00:11:56,000
i'm going to be talking about today

38
00:11:56,000 --> 00:11:58,720
also i want to use this opportunity and

39
00:11:58,720 --> 00:12:00,240
say thank you for the invitation to

40
00:12:00,240 --> 00:12:02,079
speak here i'm super excited actually to

41
00:12:02,079 --> 00:12:02,959
be

42
00:12:02,959 --> 00:12:05,279
at or to be speaking in the first place

43
00:12:05,279 --> 00:12:06,959
and thank you for for the invite to the

44
00:12:06,959 --> 00:12:08,399
kina that's a big honor

45
00:12:08,399 --> 00:12:10,399
and also i'm excited this is an

46
00:12:10,399 --> 00:12:11,600
argentinian event

47
00:12:11,600 --> 00:12:13,839
um i have to tell you i love argentina

48
00:12:13,839 --> 00:12:15,120
um when i was a student

49
00:12:15,120 --> 00:12:17,839
about 10 years ago i did an exchange in

50
00:12:17,839 --> 00:12:19,440
argentina i lived in buenos aires

51
00:12:19,440 --> 00:12:22,639
for um eight months

52
00:12:23,040 --> 00:12:25,519
and i i forgot most of my spanish but it

53
00:12:25,519 --> 00:12:27,120
was a it was a wonderful time to

54
00:12:27,120 --> 00:12:29,440
to be there so yeah i'm happy to be here

55
00:12:29,440 --> 00:12:31,440
with you today

56
00:12:31,440 --> 00:12:34,720
all right let's get started let's see um

57
00:12:34,720 --> 00:12:39,120
first of all since i work for

58
00:12:39,120 --> 00:12:41,279
a large corporation of course i have to

59
00:12:41,279 --> 00:12:43,120
tell you that the opinions and positions

60
00:12:43,120 --> 00:12:44,000
expressed in

61
00:12:44,000 --> 00:12:45,760
are mine only and do not represent the

62
00:12:45,760 --> 00:12:47,279
use of any current

63
00:12:47,279 --> 00:12:49,279
or previous employer including intel

64
00:12:49,279 --> 00:12:52,320
corporation affiliates

65
00:12:52,320 --> 00:12:55,360
fun um who am i why am i here

66
00:12:55,360 --> 00:12:58,560
um as mentioned i'm a reverse engineer i

67
00:12:58,560 --> 00:12:59,920
started my career

68
00:12:59,920 --> 00:13:02,480
in the uh threat detection industry i

69
00:13:02,480 --> 00:13:04,160
worked in an antivirus and

70
00:13:04,160 --> 00:13:06,079
in advance threat detection from there

71
00:13:06,079 --> 00:13:08,720
changed into incident response from

72
00:13:08,720 --> 00:13:11,440
there became a contractor and then moved

73
00:13:11,440 --> 00:13:13,519
into offensive security and now i work

74
00:13:13,519 --> 00:13:18,959
for a microchip producer

75
00:13:18,959 --> 00:13:22,160
and yeah on that path i learned

76
00:13:22,160 --> 00:13:24,639
a lot about how to analyze binaries

77
00:13:24,639 --> 00:13:26,240
about how to look at the bytecode

78
00:13:26,240 --> 00:13:28,800
how how by code is produced and about

79
00:13:28,800 --> 00:13:30,240
how by code is

80
00:13:30,240 --> 00:13:32,800
processed by the cpu i thought that's

81
00:13:32,800 --> 00:13:33,440
super

82
00:13:33,440 --> 00:13:37,040
fascinating um how did i how did i think

83
00:13:37,040 --> 00:13:39,360
this was so interesting though um

84
00:13:39,360 --> 00:13:42,720
um like like i learned many reverse

85
00:13:42,720 --> 00:13:44,800
engineers many people who are in

86
00:13:44,800 --> 00:13:49,360
binary research um i i started out

87
00:13:49,360 --> 00:13:53,519
figuring out i have ocd i'm um

88
00:13:53,519 --> 00:13:56,639
i'm really really interested in sorting

89
00:13:56,639 --> 00:13:57,440
things and

90
00:13:57,440 --> 00:14:00,399
ordering things and figuring things out

91
00:14:00,399 --> 00:14:02,320
and bringing things to an end

92
00:14:02,320 --> 00:14:05,440
and that that

93
00:14:05,440 --> 00:14:09,440
um yeah i would call it a talent um

94
00:14:09,440 --> 00:14:10,959
i have a i have a little exercise here

95
00:14:10,959 --> 00:14:14,479
so ocd is

96
00:14:14,800 --> 00:14:17,680
a compulsive disorder where uh you want

97
00:14:17,680 --> 00:14:18,160
to

98
00:14:18,160 --> 00:14:19,920
to see things in order you cannot look

99
00:14:19,920 --> 00:14:21,199
at

100
00:14:21,199 --> 00:14:24,320
like for example a stash of

101
00:14:24,320 --> 00:14:28,079
colored pencils and not see the rainbow

102
00:14:28,079 --> 00:14:29,440
so if you look at the picture i posted

103
00:14:29,440 --> 00:14:31,839
on this slide here um

104
00:14:31,839 --> 00:14:34,800
if you if you share the feeling for or

105
00:14:34,800 --> 00:14:35,839
order and process

106
00:14:35,839 --> 00:14:39,519
um you'll figure out that there is a

107
00:14:39,519 --> 00:14:41,760
skin colored pink pencil that's right in

108
00:14:41,760 --> 00:14:43,120
the middle it just doesn't fit the

109
00:14:43,120 --> 00:14:44,160
rainbow

110
00:14:44,160 --> 00:14:46,240
right the ocd means that i would go and

111
00:14:46,240 --> 00:14:48,160
pick that pencil up and put it in

112
00:14:48,160 --> 00:14:49,760
the right position where it has to be

113
00:14:49,760 --> 00:14:51,360
because i can't look at it

114
00:14:51,360 --> 00:14:54,959
the way it's just there in the middle

115
00:14:54,959 --> 00:14:58,160
and that is uh

116
00:14:58,160 --> 00:15:01,040
that is something that

117
00:15:01,360 --> 00:15:04,240
next year on a daily basis and then um

118
00:15:04,240 --> 00:15:06,240
when i started analyzing binaries i

119
00:15:06,240 --> 00:15:07,199
found

120
00:15:07,199 --> 00:15:13,519
my passion um that sounds stupid but um

121
00:15:13,519 --> 00:15:15,440
literally in in reverse engineering i

122
00:15:15,440 --> 00:15:17,519
found the cathartic effect of just

123
00:15:17,519 --> 00:15:20,240
staring you can stare at code all day

124
00:15:20,240 --> 00:15:22,000
and try and figure it out and you will

125
00:15:22,000 --> 00:15:24,079
learn so many little things like you

126
00:15:24,079 --> 00:15:25,920
will learn so many little details and

127
00:15:25,920 --> 00:15:27,360
this keeps you content

128
00:15:27,360 --> 00:15:30,000
all day i'm not kidding i have

129
00:15:30,000 --> 00:15:31,839
co-workers who

130
00:15:31,839 --> 00:15:34,560
open up ido pro at the end of the day

131
00:15:34,560 --> 00:15:35,120
because

132
00:15:35,120 --> 00:15:37,360
it helps them keep um it helps them calm

133
00:15:37,360 --> 00:15:38,399
down

134
00:15:38,399 --> 00:15:42,160
after really exhausting the work and

135
00:15:42,160 --> 00:15:45,839
um yeah if yoga isn't your thing i

136
00:15:45,839 --> 00:15:46,320
really

137
00:15:46,320 --> 00:15:48,560
i really recommend get the dissembler it

138
00:15:48,560 --> 00:15:50,880
helps

139
00:15:51,120 --> 00:15:53,759
um fun side what did i want to talk

140
00:15:53,759 --> 00:15:55,680
about today so the first topic i want to

141
00:15:55,680 --> 00:15:57,120
bring to you is marble research

142
00:15:57,120 --> 00:16:00,240
and actually explain why i left milk

143
00:16:00,240 --> 00:16:00,800
research

144
00:16:00,800 --> 00:16:02,560
and yeah so if we start looking at the

145
00:16:02,560 --> 00:16:04,399
slide on the left side you will see

146
00:16:04,399 --> 00:16:07,440
um a beautiful beautiful

147
00:16:07,440 --> 00:16:10,000
dump of disassembly out of the radar

148
00:16:10,000 --> 00:16:10,800
dude

149
00:16:10,800 --> 00:16:14,480
there too tool by the way yeah it is six

150
00:16:14,480 --> 00:16:15,600
o'clock in the morning here in

151
00:16:15,600 --> 00:16:20,320
in portland um this is hard

152
00:16:20,320 --> 00:16:23,600
um the disassembly we see here is is

153
00:16:23,600 --> 00:16:27,199
the the typical subject of addiction

154
00:16:27,199 --> 00:16:29,199
that i mentioned before like if i look

155
00:16:29,199 --> 00:16:31,360
at this slide i have to start

156
00:16:31,360 --> 00:16:33,040
reading the code i have to start

157
00:16:33,040 --> 00:16:34,560
analyzing and

158
00:16:34,560 --> 00:16:36,880
i'm sure some of you feel the same way

159
00:16:36,880 --> 00:16:38,399
anyhow we're not going to talk about the

160
00:16:38,399 --> 00:16:40,959
details of this this is something today

161
00:16:40,959 --> 00:16:43,279
um when i started out in melbourne

162
00:16:43,279 --> 00:16:44,480
research

163
00:16:44,480 --> 00:16:46,639
i thought that malware must be super

164
00:16:46,639 --> 00:16:48,839
complicated

165
00:16:48,839 --> 00:16:51,759
because yeah reverse engineering is hard

166
00:16:51,759 --> 00:16:52,639
and

167
00:16:52,639 --> 00:16:55,040
malware is dangerous that's what what i

168
00:16:55,040 --> 00:16:55,759
was told

169
00:16:55,759 --> 00:16:59,759
and essentially i found out um after

170
00:16:59,759 --> 00:17:02,480
after some time doing the job that it

171
00:17:02,480 --> 00:17:04,319
has to do a lot with guessing

172
00:17:04,319 --> 00:17:07,839
and building a hypothesis and

173
00:17:07,839 --> 00:17:10,480
constructing a picture about what what

174
00:17:10,480 --> 00:17:12,000
people

175
00:17:12,000 --> 00:17:14,000
what what one sees inside of a binary

176
00:17:14,000 --> 00:17:16,160
and and bringing that to a higher level

177
00:17:16,160 --> 00:17:17,599
where you can explain that information

178
00:17:17,599 --> 00:17:19,520
to other people that's essentially what

179
00:17:19,520 --> 00:17:20,959
with threat research

180
00:17:20,959 --> 00:17:23,119
like what reverse engineering and threat

181
00:17:23,119 --> 00:17:24,480
research entails

182
00:17:24,480 --> 00:17:27,119
you you figure out what the binary's

183
00:17:27,119 --> 00:17:28,480
intentions are

184
00:17:28,480 --> 00:17:32,559
and you try to explain this in a human

185
00:17:32,559 --> 00:17:34,559
understandable way

186
00:17:34,559 --> 00:17:37,760
so far so good um i thought

187
00:17:37,760 --> 00:17:39,840
that is very very challenging and turns

188
00:17:39,840 --> 00:17:41,120
out it is

189
00:17:41,120 --> 00:17:43,120
except if people tell you the dirty

190
00:17:43,120 --> 00:17:45,120
dirty tricks that are hidden in there

191
00:17:45,120 --> 00:17:48,320
and um that's what i wanted to do today

192
00:17:48,320 --> 00:17:49,919
uh with here i wanted to show you two of

193
00:17:49,919 --> 00:17:51,520
my favorite tricks in my research and

194
00:17:51,520 --> 00:17:52,960
how to

195
00:17:52,960 --> 00:17:55,520
analyze a piece of marvel rapidly um

196
00:17:55,520 --> 00:17:56,080
first of all

197
00:17:56,080 --> 00:17:57,200
the question like how much reverse

198
00:17:57,200 --> 00:17:58,640
engineering do threat researchers

199
00:17:58,640 --> 00:17:59,360
actually do

200
00:17:59,360 --> 00:18:01,679
um i spent a lot of time in that in the

201
00:18:01,679 --> 00:18:02,720
industry

202
00:18:02,720 --> 00:18:05,840
and i only ever really learned how to

203
00:18:05,840 --> 00:18:06,960
analyze

204
00:18:06,960 --> 00:18:10,320
binary code properly after i left that

205
00:18:10,320 --> 00:18:12,160
industry

206
00:18:12,160 --> 00:18:14,000
um i was rather disappointed as a

207
00:18:14,000 --> 00:18:16,799
malevolent researcher figuring out that

208
00:18:16,799 --> 00:18:19,679
it doesn't matter that much whether my

209
00:18:19,679 --> 00:18:21,200
my results are

210
00:18:21,200 --> 00:18:23,200
uh detailed and whether my results are

211
00:18:23,200 --> 00:18:25,120
100 correct

212
00:18:25,120 --> 00:18:26,960
most modern research actually wants to

213
00:18:26,960 --> 00:18:29,200
get as mentioned the bigger picture of

214
00:18:29,200 --> 00:18:30,799
what does the malware intend to do

215
00:18:30,799 --> 00:18:33,039
where does development tend to go but

216
00:18:33,039 --> 00:18:35,120
not necessarily

217
00:18:35,120 --> 00:18:37,840
what kind of buffer size does it use for

218
00:18:37,840 --> 00:18:39,360
sending its

219
00:18:39,360 --> 00:18:42,480
communication back to the remote server

220
00:18:42,480 --> 00:18:44,559
like how much data is actually

221
00:18:44,559 --> 00:18:46,160
exfiltrated

222
00:18:46,160 --> 00:18:49,200
um how exactly does the encryption work

223
00:18:49,200 --> 00:18:52,000
with which it encrypts files and disk if

224
00:18:52,000 --> 00:18:52,799
we're talking about

225
00:18:52,799 --> 00:18:54,960
where and and so on and so forth so lots

226
00:18:54,960 --> 00:18:56,640
of lots of detail is now actually

227
00:18:56,640 --> 00:19:00,799
spotted by our research and

228
00:19:00,799 --> 00:19:03,840
yeah as promised things that people

229
00:19:03,840 --> 00:19:07,360
didn't tell me when i started is that

230
00:19:07,360 --> 00:19:10,400
it mellower analyzing malware um for the

231
00:19:10,400 --> 00:19:11,520
most part like the

232
00:19:11,520 --> 00:19:14,160
the the large mass of malware is not

233
00:19:14,160 --> 00:19:15,840
horribly complicated and it's not

234
00:19:15,840 --> 00:19:17,280
horribly difficult to

235
00:19:17,280 --> 00:19:20,320
to analyze there is two major skills

236
00:19:20,320 --> 00:19:21,679
that i learned over the years

237
00:19:21,679 --> 00:19:23,440
that are essential which is first of all

238
00:19:23,440 --> 00:19:25,039
you need to be able to unpack it

239
00:19:25,039 --> 00:19:28,160
because most malware like most

240
00:19:28,160 --> 00:19:32,240
um um like

241
00:19:32,240 --> 00:19:35,919
average number is uh heavily packed

242
00:19:35,919 --> 00:19:37,360
so if you can figure out how to unpack

243
00:19:37,360 --> 00:19:39,760
it um you have much easier time to

244
00:19:39,760 --> 00:19:42,799
to analyze and a trick

245
00:19:42,799 --> 00:19:45,520
like unpacking seemed so hard to me

246
00:19:45,520 --> 00:19:46,240
until

247
00:19:46,240 --> 00:19:48,080
literally i was sitting in a bar in las

248
00:19:48,080 --> 00:19:50,240
vegas after defcon

249
00:19:50,240 --> 00:19:53,120
with another male analyst who said no no

250
00:19:53,120 --> 00:19:54,720
look unpacking is actually super easy

251
00:19:54,720 --> 00:19:55,039
like

252
00:19:55,039 --> 00:19:57,039
you find you find memory right you you

253
00:19:57,039 --> 00:19:58,640
set break points on the buffers that you

254
00:19:58,640 --> 00:19:59,520
write to you and

255
00:19:59,520 --> 00:20:01,520
you let the thing run and you try this a

256
00:20:01,520 --> 00:20:02,880
couple times eventually

257
00:20:02,880 --> 00:20:04,880
you you find the buffer where it's where

258
00:20:04,880 --> 00:20:06,240
it's unpacking too

259
00:20:06,240 --> 00:20:08,960
i was like what it's that easy and it

260
00:20:08,960 --> 00:20:09,919
turns out yes

261
00:20:09,919 --> 00:20:13,039
it i mean i'm having a hard time here

262
00:20:13,039 --> 00:20:14,799
calling it easy because it's still it's

263
00:20:14,799 --> 00:20:15,280
not

264
00:20:15,280 --> 00:20:18,960
it's not like a piece of cake but

265
00:20:18,960 --> 00:20:22,559
it's not that hard either so if you

266
00:20:22,559 --> 00:20:25,280
want to try to unpack a piece of malware

267
00:20:25,280 --> 00:20:26,240
um

268
00:20:26,240 --> 00:20:27,760
yeah contact me afterwards i'll send you

269
00:20:27,760 --> 00:20:29,120
a heavily packed piece of malware and

270
00:20:29,120 --> 00:20:30,159
you could go and

271
00:20:30,159 --> 00:20:32,400
and start your luck like find where

272
00:20:32,400 --> 00:20:34,480
where actual memory rights are happening

273
00:20:34,480 --> 00:20:36,000
if you look at that slide in the center

274
00:20:36,000 --> 00:20:38,480
like the the assembly

275
00:20:38,480 --> 00:20:41,919
uh that i posted here the bottom

276
00:20:41,919 --> 00:20:43,919
shows you what what i mean with memory

277
00:20:43,919 --> 00:20:45,440
right there is one byte

278
00:20:45,440 --> 00:20:47,919
that is written to the buffer the buffer

279
00:20:47,919 --> 00:20:50,080
is pointed to the esi plus edi

280
00:20:50,080 --> 00:20:51,360
that's what i mean with memory rights

281
00:20:51,360 --> 00:20:53,840
like something is written somewhere

282
00:20:53,840 --> 00:20:56,400
and if you want to figure out how the

283
00:20:56,400 --> 00:20:58,159
empire works you need to figure out

284
00:20:58,159 --> 00:21:01,280
where it is writing to the big

285
00:21:01,280 --> 00:21:03,120
the big work starts afterwards once it's

286
00:21:03,120 --> 00:21:04,320
unpacked and you actually have to

287
00:21:04,320 --> 00:21:05,919
analyze the code that's being written or

288
00:21:05,919 --> 00:21:06,799
like the

289
00:21:06,799 --> 00:21:10,480
data that's being unpacked into memory

290
00:21:10,480 --> 00:21:14,240
but honestly the packers aren't

291
00:21:14,240 --> 00:21:17,280
the biggest problem now this is one

292
00:21:17,280 --> 00:21:17,760
trick

293
00:21:17,760 --> 00:21:18,880
the second trick that i learned in

294
00:21:18,880 --> 00:21:21,360
threat research is that

295
00:21:21,360 --> 00:21:23,440
people writing malware are developers so

296
00:21:23,440 --> 00:21:25,919
they are using

297
00:21:25,919 --> 00:21:28,159
code like they're using the the regular

298
00:21:28,159 --> 00:21:31,440
development methods and a lot of them

299
00:21:31,440 --> 00:21:34,880
a lot of them actually use

300
00:21:34,880 --> 00:21:36,799
just like most of us stack overflow for

301
00:21:36,799 --> 00:21:38,400
for figuring out how to solve specific

302
00:21:38,400 --> 00:21:40,080
problems

303
00:21:40,080 --> 00:21:43,120
i kid you not um you won't believe how

304
00:21:43,120 --> 00:21:44,960
much malware i analyzed by just

305
00:21:44,960 --> 00:21:47,360
copy-pasting apis that i found

306
00:21:47,360 --> 00:21:49,679
in the malware into google and google

307
00:21:49,679 --> 00:21:50,559
would point me

308
00:21:50,559 --> 00:21:53,760
to like your preferred search engine and

309
00:21:53,760 --> 00:21:55,679
the search engine would point me to

310
00:21:55,679 --> 00:21:58,400
pieces of codes that other people

311
00:21:58,400 --> 00:21:59,440
published on the internet and they're

312
00:21:59,440 --> 00:22:00,159
like hey

313
00:22:00,159 --> 00:22:02,960
if you want to implement the keylogger

314
00:22:02,960 --> 00:22:05,440
here's what you need to do

315
00:22:05,440 --> 00:22:07,039
so reverse engineering in those cases

316
00:22:07,039 --> 00:22:08,640
essentially turned out

317
00:22:08,640 --> 00:22:12,320
was reading source code from the

318
00:22:12,320 --> 00:22:14,240
world wide web that ended up in this

319
00:22:14,240 --> 00:22:16,240
piece of malware

320
00:22:16,240 --> 00:22:20,880
and it says easy if i say it here um

321
00:22:20,880 --> 00:22:22,480
not all malware is that simple not all

322
00:22:22,480 --> 00:22:23,919
problems are easily solved

323
00:22:23,919 --> 00:22:27,760
but a lot of them so yeah if you want to

324
00:22:27,760 --> 00:22:29,760
go ahead and speed reverse engineer

325
00:22:29,760 --> 00:22:31,840
a piece of malware look for memory

326
00:22:31,840 --> 00:22:33,600
rights at breakpoints

327
00:22:33,600 --> 00:22:35,200
dump the buffer that's being written

328
00:22:35,200 --> 00:22:37,679
afterwards

329
00:22:37,919 --> 00:22:39,840
loaded into a disassembler that can

330
00:22:39,840 --> 00:22:41,280
parse

331
00:22:41,280 --> 00:22:43,840
that can find you the the the symbols

332
00:22:43,840 --> 00:22:45,440
that are being used in there

333
00:22:45,440 --> 00:22:46,880
like the the apis that are being used in

334
00:22:46,880 --> 00:22:49,039
there and punishment to google and see

335
00:22:49,039 --> 00:22:50,720
what comes out

336
00:22:50,720 --> 00:22:53,600
i i bet fifty percent of malware symbols

337
00:22:53,600 --> 00:22:55,039
that you can find you can analyze that

338
00:22:55,039 --> 00:22:56,720
way

339
00:22:56,720 --> 00:23:00,880
all right um but

340
00:23:00,880 --> 00:23:02,400
i'm talking here like it's all that easy

341
00:23:02,400 --> 00:23:04,799
and everything's smooth and

342
00:23:04,799 --> 00:23:08,400
and shiny and it is not there is

343
00:23:08,400 --> 00:23:11,600
complex model rather there is lots of

344
00:23:11,600 --> 00:23:13,200
abstractions that make reverse

345
00:23:13,200 --> 00:23:15,840
engineering malware difficult

346
00:23:15,840 --> 00:23:19,679
but i ask you think about one thing

347
00:23:19,679 --> 00:23:21,840
so imagine for example you look at an

348
00:23:21,840 --> 00:23:22,799
average browser

349
00:23:22,799 --> 00:23:25,360
you go ahead and try to reverse engineer

350
00:23:25,360 --> 00:23:26,640
firefox

351
00:23:26,640 --> 00:23:29,760
so this is a random example you will be

352
00:23:29,760 --> 00:23:33,200
busy for the next years um

353
00:23:33,200 --> 00:23:35,280
there is like like most commercial

354
00:23:35,280 --> 00:23:36,480
software is either almost

355
00:23:36,480 --> 00:23:40,000
as i call it real software is

356
00:23:40,000 --> 00:23:42,799
built to last built to scale there's

357
00:23:42,799 --> 00:23:44,640
lots of different features in there

358
00:23:44,640 --> 00:23:46,880
there is a user interface there is a

359
00:23:46,880 --> 00:23:47,679
back end

360
00:23:47,679 --> 00:23:50,880
there is i don't know so much stuff in

361
00:23:50,880 --> 00:23:52,320
inside of the software

362
00:23:52,320 --> 00:23:53,760
that knowledge just doesn't have and the

363
00:23:53,760 --> 00:23:55,279
moment just doesn't need most male

364
00:23:55,279 --> 00:23:57,360
resembles a rather small

365
00:23:57,360 --> 00:23:59,760
and you might have noticed in the last

366
00:23:59,760 --> 00:24:01,200
slide most malware developers

367
00:24:01,200 --> 00:24:03,360
are not actual software developers so

368
00:24:03,360 --> 00:24:05,039
like they don't build really big

369
00:24:05,039 --> 00:24:06,080
applications they

370
00:24:06,080 --> 00:24:09,600
they don't build lots of error handling

371
00:24:09,600 --> 00:24:12,960
functionality they they don't stash a

372
00:24:12,960 --> 00:24:14,559
million features in there because

373
00:24:14,559 --> 00:24:16,320
they don't interact with the user most

374
00:24:16,320 --> 00:24:19,039
of the time malware by itself

375
00:24:19,039 --> 00:24:22,480
is not as complex as real software and

376
00:24:22,480 --> 00:24:24,720
if you look at the at the classical

377
00:24:24,720 --> 00:24:25,600
business model

378
00:24:25,600 --> 00:24:28,559
of a malware user like someone who who

379
00:24:28,559 --> 00:24:31,360
uses malware to to bridge other people

380
00:24:31,360 --> 00:24:33,679
they also have no interest in building

381
00:24:33,679 --> 00:24:35,919
highly complicated software

382
00:24:35,919 --> 00:24:38,080
granted there's some malware users out

383
00:24:38,080 --> 00:24:39,840
there who are interested

384
00:24:39,840 --> 00:24:42,400
in proper software development and and

385
00:24:42,400 --> 00:24:43,279
build

386
00:24:43,279 --> 00:24:46,480
like complex things but

387
00:24:46,480 --> 00:24:49,760
your 95 percent of malware is not

388
00:24:49,760 --> 00:24:52,080
great software as mentioned it doesn't

389
00:24:52,080 --> 00:24:53,200
need to be

390
00:24:53,200 --> 00:24:54,880
if you look at the return of investment

391
00:24:54,880 --> 00:24:56,400
in the malware business um

392
00:24:56,400 --> 00:24:59,600
if melbourne developers would spend

393
00:24:59,600 --> 00:25:01,039
a year and a half on developing one

394
00:25:01,039 --> 00:25:02,799
piece of malware

395
00:25:02,799 --> 00:25:04,080
they would need to make a lot of money

396
00:25:04,080 --> 00:25:07,360
as well as to pay the bills right

397
00:25:08,720 --> 00:25:12,960
oh yeah um stupid example but um

398
00:25:13,520 --> 00:25:15,360
it's it's not in there in our interest

399
00:25:15,360 --> 00:25:16,799
to spend a lot of time

400
00:25:16,799 --> 00:25:18,720
in in writing really really complex

401
00:25:18,720 --> 00:25:22,159
number that's one thing

402
00:25:22,320 --> 00:25:25,360
other peculiar learnings um

403
00:25:25,360 --> 00:25:27,840
that you come across when when looking

404
00:25:27,840 --> 00:25:28,480
at

405
00:25:28,480 --> 00:25:31,279
binaries it feels a lot like looking at

406
00:25:31,279 --> 00:25:34,000
other people's code

407
00:25:34,000 --> 00:25:36,880
this is something i i i found a couple

408
00:25:36,880 --> 00:25:38,159
years into the job that like i'm

409
00:25:38,159 --> 00:25:39,520
essentially looking at

410
00:25:39,520 --> 00:25:41,120
something someone else came up with like

411
00:25:41,120 --> 00:25:43,039
their brainchild and i need to figure

412
00:25:43,039 --> 00:25:44,720
out like what they thought when they

413
00:25:44,720 --> 00:25:45,440
wrote this

414
00:25:45,440 --> 00:25:46,799
this piece of code that i'm trying to

415
00:25:46,799 --> 00:25:49,200
figure out and that is very weird it

416
00:25:49,200 --> 00:25:51,919
becomes like

417
00:25:52,480 --> 00:25:55,520
yeah peculiar um

418
00:25:55,520 --> 00:25:58,159
some of the melbourne authors will start

419
00:25:58,159 --> 00:25:59,520
implementing a feature and not actually

420
00:25:59,520 --> 00:26:00,480
finish it

421
00:26:00,480 --> 00:26:04,559
they will build and debug prints

422
00:26:04,559 --> 00:26:06,960
that of course aren't printed when the

423
00:26:06,960 --> 00:26:08,559
metal really executes but as a reverse

424
00:26:08,559 --> 00:26:10,000
engineer you see like everything

425
00:26:10,000 --> 00:26:12,320
that goes into this piece of binary so

426
00:26:12,320 --> 00:26:14,000
sometimes you find really funny things

427
00:26:14,000 --> 00:26:15,760
in there

428
00:26:15,760 --> 00:26:18,880
and uh one of the one of the rabbit

429
00:26:18,880 --> 00:26:20,320
holes i wanted to share with you today

430
00:26:20,320 --> 00:26:22,080
was uh if you if you ever

431
00:26:22,080 --> 00:26:24,880
like run into a binary analyst like

432
00:26:24,880 --> 00:26:27,120
preferably male 1 list

433
00:26:27,120 --> 00:26:29,520
walk up to them and whisper delphi in

434
00:26:29,520 --> 00:26:30,480
their ear

435
00:26:30,480 --> 00:26:33,679
it's it's a thing um fun story a couple

436
00:26:33,679 --> 00:26:35,440
years ago when i was working as a

437
00:26:35,440 --> 00:26:35,840
reverse

438
00:26:35,840 --> 00:26:38,640
engineer for an insulin response company

439
00:26:38,640 --> 00:26:39,520
um

440
00:26:39,520 --> 00:26:41,120
i was sitting there in the room with my

441
00:26:41,120 --> 00:26:43,200
my co-workers and were happily

442
00:26:43,200 --> 00:26:45,760
working away and all of a sudden our our

443
00:26:45,760 --> 00:26:46,880
team comes in

444
00:26:46,880 --> 00:26:48,400
i'm sorry stuck we have a new case

445
00:26:48,400 --> 00:26:50,400
coming in and

446
00:26:50,400 --> 00:26:52,559
yeah we need you guys to to figure out a

447
00:26:52,559 --> 00:26:54,240
binary really quick

448
00:26:54,240 --> 00:26:56,159
and it was written in delphi and the

449
00:26:56,159 --> 00:26:58,080
whole room like

450
00:26:58,080 --> 00:27:00,320
goes and stares at him and it's like

451
00:27:00,320 --> 00:27:01,360
what like

452
00:27:01,360 --> 00:27:04,159
no some people start laughing some

453
00:27:04,159 --> 00:27:05,440
people like

454
00:27:05,440 --> 00:27:09,279
quietly sneak out of the room and

455
00:27:09,279 --> 00:27:13,360
it yeah it's hilarious uh why though um

456
00:27:13,360 --> 00:27:16,320
delphi duffy's not the only programming

457
00:27:16,320 --> 00:27:18,240
language that does that but definitely

458
00:27:18,240 --> 00:27:21,039
in particular produces really really

459
00:27:21,039 --> 00:27:22,799
awkward binaries

460
00:27:22,799 --> 00:27:24,480
there's tools that help people analyze

461
00:27:24,480 --> 00:27:26,559
them of course if you've written delphi

462
00:27:26,559 --> 00:27:28,159
before you have an easier time

463
00:27:28,159 --> 00:27:31,760
breathing those those binaries but

464
00:27:31,760 --> 00:27:34,880
all together delphi is just not nice and

465
00:27:34,880 --> 00:27:37,520
again there's there's a couple of uh

466
00:27:37,520 --> 00:27:38,799
peculiarities

467
00:27:38,799 --> 00:27:40,720
that you come across in binary research

468
00:27:40,720 --> 00:27:42,960
that's just like delphi

469
00:27:42,960 --> 00:27:46,320
visual basic 6 byte code

470
00:27:46,320 --> 00:27:50,159
anyhow let's move on um

471
00:27:50,159 --> 00:27:52,640
the next thing i i stuck my nose in

472
00:27:52,640 --> 00:27:54,720
after after threat research was i ended

473
00:27:54,720 --> 00:27:55,279
up

474
00:27:55,279 --> 00:27:57,200
working in incident response and being a

475
00:27:57,200 --> 00:27:59,760
reverse engineer and insulin response

476
00:27:59,760 --> 00:28:03,200
is quite a lot different than in thread

477
00:28:03,200 --> 00:28:04,559
research because all of a sudden your

478
00:28:04,559 --> 00:28:05,760
results matter

479
00:28:05,760 --> 00:28:07,679
um what do i mean by that of course

480
00:28:07,679 --> 00:28:09,600
write research as results are important

481
00:28:09,600 --> 00:28:12,240
too but initial response the the

482
00:28:12,240 --> 00:28:14,080
questions that you get are just much

483
00:28:14,080 --> 00:28:15,520
more specific

484
00:28:15,520 --> 00:28:17,679
which means as a reverse engineer you

485
00:28:17,679 --> 00:28:20,640
need to really really care about detail

486
00:28:20,640 --> 00:28:22,559
and i love that all of a sudden there

487
00:28:22,559 --> 00:28:24,480
were requests like could you extract

488
00:28:24,480 --> 00:28:25,039
this

489
00:28:25,039 --> 00:28:27,120
this compression algorithm from from

490
00:28:27,120 --> 00:28:28,320
this piece of malware you want to figure

491
00:28:28,320 --> 00:28:31,120
out how it unpacks but can you

492
00:28:31,120 --> 00:28:33,200
can you analyze this ransomware like

493
00:28:33,200 --> 00:28:34,880
really really quickly we need to figure

494
00:28:34,880 --> 00:28:35,440
out

495
00:28:35,440 --> 00:28:38,640
how how it spreads across our shares or

496
00:28:38,640 --> 00:28:39,039
how

497
00:28:39,039 --> 00:28:42,320
come that this malware is all over our

498
00:28:42,320 --> 00:28:45,440
network and different machines

499
00:28:45,440 --> 00:28:47,360
and then yes all of a sudden you need to

500
00:28:47,360 --> 00:28:50,480
look very very closely

501
00:28:50,480 --> 00:28:53,520
um again in threat research detailed

502
00:28:53,520 --> 00:28:55,200
reverse engineering isn't

503
00:28:55,200 --> 00:28:56,559
isn't really much of interest because it

504
00:28:56,559 --> 00:28:58,559
takes a lot of time reverse engineers

505
00:28:58,559 --> 00:29:01,919
are expensive and but what matters

506
00:29:01,919 --> 00:29:04,320
mostly is to understand the big picture

507
00:29:04,320 --> 00:29:06,399
and an instant response all of a sudden

508
00:29:06,399 --> 00:29:08,240
small pictures matter to you which i

509
00:29:08,240 --> 00:29:10,960
loved one of my favorite questions there

510
00:29:10,960 --> 00:29:12,000
was

511
00:29:12,000 --> 00:29:14,720
um to prove that something was being

512
00:29:14,720 --> 00:29:15,039
done

513
00:29:15,039 --> 00:29:16,640
or to prove that something was not being

514
00:29:16,640 --> 00:29:20,000
done like we have a piece of malware

515
00:29:20,000 --> 00:29:22,240
and we want to know is it the only one

516
00:29:22,240 --> 00:29:23,679
that we have here so we see certain

517
00:29:23,679 --> 00:29:24,799
activities that happen

518
00:29:24,799 --> 00:29:26,480
on machines in the network and we have

519
00:29:26,480 --> 00:29:29,039
this one binary and can this one binary

520
00:29:29,039 --> 00:29:29,360
do

521
00:29:29,360 --> 00:29:32,080
all these activities that's a very

522
00:29:32,080 --> 00:29:33,279
important question that's usually

523
00:29:33,279 --> 00:29:34,720
something people want to have answered

524
00:29:34,720 --> 00:29:36,320
quickly so then people

525
00:29:36,320 --> 00:29:39,120
reverse engineers have to work like fast

526
00:29:39,120 --> 00:29:40,000
which is

527
00:29:40,000 --> 00:29:42,399
a very different work environment too

528
00:29:42,399 --> 00:29:43,679
and all of a sudden you find yourself in

529
00:29:43,679 --> 00:29:45,360
the position where you have to

530
00:29:45,360 --> 00:29:47,840
be sure that this one piece of malware

531
00:29:47,840 --> 00:29:48,720
can do all these

532
00:29:48,720 --> 00:29:51,039
malicious things which is very very

533
00:29:51,039 --> 00:29:51,919
different from just

534
00:29:51,919 --> 00:29:55,039
creating a big picture analysis

535
00:29:55,039 --> 00:29:58,480
so much fun anyhow

536
00:29:58,880 --> 00:30:03,600
let's close the malware chapter um

537
00:30:03,679 --> 00:30:05,840
over the years and now i don't do all

538
00:30:05,840 --> 00:30:07,039
that much

539
00:30:07,039 --> 00:30:08,640
reverse engineering anymore or look at

540
00:30:08,640 --> 00:30:10,559
malware but i still get people asking me

541
00:30:10,559 --> 00:30:10,960
like

542
00:30:10,960 --> 00:30:13,200
how how did you get in there and once

543
00:30:13,200 --> 00:30:15,760
and for all i wanted to document that

544
00:30:15,760 --> 00:30:18,720
you need to practice a lot there's a lot

545
00:30:18,720 --> 00:30:20,159
of things to read

546
00:30:20,159 --> 00:30:22,320
then you need like 10 times as much

547
00:30:22,320 --> 00:30:23,840
practice and then you'll be a reverse

548
00:30:23,840 --> 00:30:24,880
engineer

549
00:30:24,880 --> 00:30:27,200
unless there's a slide put a list that i

550
00:30:27,200 --> 00:30:28,960
sent to all these people so people will

551
00:30:28,960 --> 00:30:30,720
ask me how how do you get into that it's

552
00:30:30,720 --> 00:30:32,159
like no problem i can

553
00:30:32,159 --> 00:30:35,200
give you things to read and exercises so

554
00:30:35,200 --> 00:30:36,960
i sent them exactly this list you need

555
00:30:36,960 --> 00:30:38,880
to study some some assembly like without

556
00:30:38,880 --> 00:30:40,399
reading assembling without understanding

557
00:30:40,399 --> 00:30:41,760
assembly of the architecture you're on a

558
00:30:41,760 --> 00:30:42,640
release engineer

559
00:30:42,640 --> 00:30:44,399
you're gonna have a very hard time you

560
00:30:44,399 --> 00:30:45,840
need to understand functions and stack

561
00:30:45,840 --> 00:30:47,200
interaction you need to understand

562
00:30:47,200 --> 00:30:48,720
executable file formats

563
00:30:48,720 --> 00:30:52,080
and a bit about loaders like you work

564
00:30:52,080 --> 00:30:53,360
with your disassembler then you work

565
00:30:53,360 --> 00:30:54,720
with a debugger and there's something

566
00:30:54,720 --> 00:30:55,760
happening in between

567
00:30:55,760 --> 00:30:57,360
and it might be good to understand uh

568
00:30:57,360 --> 00:30:59,200
the basics of that then of course you

569
00:30:59,200 --> 00:31:00,320
need to understand something about the

570
00:31:00,320 --> 00:31:01,679
operating system you work on about

571
00:31:01,679 --> 00:31:02,880
process and threats and

572
00:31:02,880 --> 00:31:05,200
memory management basics and os api and

573
00:31:05,200 --> 00:31:06,559
basic os services

574
00:31:06,559 --> 00:31:10,159
like if the the binary calls like

575
00:31:10,159 --> 00:31:12,240
f open what exactly happens on on the

576
00:31:12,240 --> 00:31:13,679
operating system side

577
00:31:13,679 --> 00:31:16,000
is good to actually understand and now

578
00:31:16,000 --> 00:31:17,360
we have the analysis tools

579
00:31:17,360 --> 00:31:20,000
and that's pretty much it it's a lot but

580
00:31:20,000 --> 00:31:21,360
the list sounds very

581
00:31:21,360 --> 00:31:24,399
cute right and yeah

582
00:31:24,399 --> 00:31:26,000
you read about that stuff and then you

583
00:31:26,000 --> 00:31:27,279
go practice and in reality it's of

584
00:31:27,279 --> 00:31:29,120
course not that simple um

585
00:31:29,120 --> 00:31:30,559
there's a lot of time that goes in there

586
00:31:30,559 --> 00:31:33,600
there's a lot of nitpicky little details

587
00:31:33,600 --> 00:31:36,880
that are necessary to understand if you

588
00:31:36,880 --> 00:31:38,080
look

589
00:31:38,080 --> 00:31:40,159
at a specific binary that comes out of a

590
00:31:40,159 --> 00:31:41,760
specific compiler

591
00:31:41,760 --> 00:31:45,600
and wants to run in a specific context

592
00:31:45,600 --> 00:31:50,320
and the learning curve is very steep

593
00:31:50,320 --> 00:31:54,240
but it's fun i'm telling you

594
00:31:54,240 --> 00:31:59,440
and it's very very relaxing

595
00:31:59,760 --> 00:32:03,120
good let's move on eventually i left my

596
00:32:03,120 --> 00:32:03,840
research

597
00:32:03,840 --> 00:32:06,880
that was when the big search of uh

598
00:32:06,880 --> 00:32:08,080
ransomware came up

599
00:32:08,080 --> 00:32:09,679
and all of a sudden i found myself

600
00:32:09,679 --> 00:32:12,399
looking at tons and tons of ransomware

601
00:32:12,399 --> 00:32:13,120
and

602
00:32:13,120 --> 00:32:15,440
if you've seen one i promise you they're

603
00:32:15,440 --> 00:32:18,080
not getting any more exciting

604
00:32:18,080 --> 00:32:22,399
so i eventually

605
00:32:22,399 --> 00:32:25,919
got an offer from from intel to work on

606
00:32:25,919 --> 00:32:28,960
micro architectural security of course i

607
00:32:28,960 --> 00:32:29,679
couldn't

608
00:32:29,679 --> 00:32:32,880
just not go there

609
00:32:32,880 --> 00:32:35,919
because i mean

610
00:32:35,919 --> 00:32:38,159
i was an x86 reverse engineer and all of

611
00:32:38,159 --> 00:32:40,159
a sudden the

612
00:32:40,159 --> 00:32:43,039
mother company of x86 telling me to do

613
00:32:43,039 --> 00:32:44,799
security research so this is how i ended

614
00:32:44,799 --> 00:32:45,519
up doing

615
00:32:45,519 --> 00:32:48,640
offensive security research and got to

616
00:32:48,640 --> 00:32:50,399
look a lot and how

617
00:32:50,399 --> 00:32:52,799
instructions first of all are being

618
00:32:52,799 --> 00:32:54,399
produced and second of all are being

619
00:32:54,399 --> 00:32:55,519
processed

620
00:32:55,519 --> 00:32:59,279
and i thought that was so fascinating

621
00:32:59,279 --> 00:33:03,120
so let's have a look at that um

622
00:33:03,279 --> 00:33:05,760
working at intel i spent some time on

623
00:33:05,760 --> 00:33:07,519
compiler internals more specifically in

624
00:33:07,519 --> 00:33:09,840
gcc

625
00:33:09,840 --> 00:33:12,320
she says now uh she's assuming i have

626
00:33:12,320 --> 00:33:13,600
some sort of hate love

627
00:33:13,600 --> 00:33:15,760
going on like i love the compiler

628
00:33:15,760 --> 00:33:17,440
because i understand this little bit of

629
00:33:17,440 --> 00:33:17,679
it

630
00:33:17,679 --> 00:33:19,360
and i hate the compiler because it still

631
00:33:19,360 --> 00:33:20,799
doesn't actually exactly do what i

632
00:33:20,799 --> 00:33:22,799
wanted to do

633
00:33:22,799 --> 00:33:26,159
but that's a different story um gcc by

634
00:33:26,159 --> 00:33:27,200
itself

635
00:33:27,200 --> 00:33:30,640
accounted once at the time of where i

636
00:33:30,640 --> 00:33:31,360
was

637
00:33:31,360 --> 00:33:33,919
working on it was a total of about 14

638
00:33:33,919 --> 00:33:34,480
million

639
00:33:34,480 --> 00:33:37,200
lines of code and if that sounds a lot

640
00:33:37,200 --> 00:33:38,320
it's because it really

641
00:33:38,320 --> 00:33:41,760
is it's huge humongous

642
00:33:41,760 --> 00:33:43,600
and it's been organically grown since

643
00:33:43,600 --> 00:33:44,880
1984

644
00:33:44,880 --> 00:33:48,480
which makes it huge and complicated

645
00:33:48,480 --> 00:33:51,360
um gcc like most compilers has the front

646
00:33:51,360 --> 00:33:52,720
end the middle end on the back end

647
00:33:52,720 --> 00:33:54,799
and this view of the compiler is like

648
00:33:54,799 --> 00:33:56,320
from very very very very

649
00:33:56,320 --> 00:33:59,679
this distant view and

650
00:33:59,679 --> 00:34:01,600
what's interesting about that what i

651
00:34:01,600 --> 00:34:03,840
wanted to be talking about today

652
00:34:03,840 --> 00:34:08,000
is how the compiler parses

653
00:34:08,000 --> 00:34:11,520
uh the representation that it has of the

654
00:34:11,520 --> 00:34:13,359
of the source code into the actual

655
00:34:13,359 --> 00:34:15,280
bytecode like how is the machine code

656
00:34:15,280 --> 00:34:16,560
produced

657
00:34:16,560 --> 00:34:18,000
this is something that that i was

658
00:34:18,000 --> 00:34:19,440
looking at for a long time and it's

659
00:34:19,440 --> 00:34:21,440
super fascinating

660
00:34:21,440 --> 00:34:23,119
honestly i could be talking about gcc

661
00:34:23,119 --> 00:34:24,639
for hours i'm not going to do that now

662
00:34:24,639 --> 00:34:27,199
but we're going to go into details very

663
00:34:27,199 --> 00:34:27,839
soon

664
00:34:27,839 --> 00:34:30,879
um just two

665
00:34:30,879 --> 00:34:35,199
just to have you see like how

666
00:34:35,199 --> 00:34:38,399
uh how the compiler looks from inside

667
00:34:38,399 --> 00:34:40,560
it's it's not very pretty it's um a lot

668
00:34:40,560 --> 00:34:42,079
of different paths as the cheese is

669
00:34:42,079 --> 00:34:43,359
organized in passes

670
00:34:43,359 --> 00:34:45,839
this slide do not try to read it all um

671
00:34:45,839 --> 00:34:47,520
it shows you a list of passes that are

672
00:34:47,520 --> 00:34:49,679
executed inside a compiler

673
00:34:49,679 --> 00:34:52,879
and if you try to interact with the

674
00:34:52,879 --> 00:34:54,960
compiler from from inside like

675
00:34:54,960 --> 00:34:58,960
modify the compiler or insert the plugin

676
00:34:58,960 --> 00:35:01,440
what you essentially do is you figure

677
00:35:01,440 --> 00:35:02,400
out a pass where

678
00:35:02,400 --> 00:35:03,839
the things that you're interested in are

679
00:35:03,839 --> 00:35:05,520
happening and work

680
00:35:05,520 --> 00:35:07,520
in that past or before or after that

681
00:35:07,520 --> 00:35:09,759
path

682
00:35:10,000 --> 00:35:13,599
which makes it sort of approachable

683
00:35:13,599 --> 00:35:15,359
to put it like that it's not easy but

684
00:35:15,359 --> 00:35:16,960
it's it's it's an approachable

685
00:35:16,960 --> 00:35:19,599
uh topic

686
00:35:20,480 --> 00:35:23,280
and yeah as mentioned what i wanted to

687
00:35:23,280 --> 00:35:24,240
be talking about today is how

688
00:35:24,240 --> 00:35:26,800
instructions are made

689
00:35:26,800 --> 00:35:28,480
so yeah as a melbourne researcher i

690
00:35:28,480 --> 00:35:30,560
spend a lot of time looking instructions

691
00:35:30,560 --> 00:35:33,119
but it never occurred to me to just go

692
00:35:33,119 --> 00:35:35,200
and figure out like how did he end up

693
00:35:35,200 --> 00:35:37,359
inside of a binary it turns out it's a

694
00:35:37,359 --> 00:35:39,920
very fascinating process

695
00:35:39,920 --> 00:35:41,440
basically what happens when you compile

696
00:35:41,440 --> 00:35:43,359
a binary is that your source code is

697
00:35:43,359 --> 00:35:44,160
translated

698
00:35:44,160 --> 00:35:46,240
to one or more intermediate

699
00:35:46,240 --> 00:35:47,680
representations

700
00:35:47,680 --> 00:35:49,920
and from there the compiler produces

701
00:35:49,920 --> 00:35:50,960
assembly and from

702
00:35:50,960 --> 00:35:53,040
assembly the byte code and the byte code

703
00:35:53,040 --> 00:35:55,520
eventually ends up in an executable

704
00:35:55,520 --> 00:35:57,280
it's a very high level view the

705
00:35:57,280 --> 00:35:58,960
interesting part about that is that

706
00:35:58,960 --> 00:36:01,599
before the intermediate representation

707
00:36:01,599 --> 00:36:03,200
we're architecture agnostic

708
00:36:03,200 --> 00:36:05,680
more or less so if you have c codes you

709
00:36:05,680 --> 00:36:07,440
can compile c codes to arm you can

710
00:36:07,440 --> 00:36:07,920
compile

711
00:36:07,920 --> 00:36:11,520
c code to active v6 you can

712
00:36:11,520 --> 00:36:13,040
elevate that seeker into a different

713
00:36:13,040 --> 00:36:15,440
representation and make it

714
00:36:15,440 --> 00:36:17,200
something else i don't know what's going

715
00:36:17,200 --> 00:36:18,800
with that but anyway like before

716
00:36:18,800 --> 00:36:21,280
you you parse it into ir it's slowly

717
00:36:21,280 --> 00:36:22,320
architectural agnostic

718
00:36:22,320 --> 00:36:26,000
and after that ar process all of a

719
00:36:26,000 --> 00:36:27,520
sudden we have something architecture

720
00:36:27,520 --> 00:36:28,640
specific

721
00:36:28,640 --> 00:36:31,440
so from the different intermediate

722
00:36:31,440 --> 00:36:32,320
presentations

723
00:36:32,320 --> 00:36:34,720
at the end what comes out is binary that

724
00:36:34,720 --> 00:36:36,560
runs on this one machine we compile it

725
00:36:36,560 --> 00:36:37,440
for

726
00:36:37,440 --> 00:36:38,720
or possibly a different machine if you

727
00:36:38,720 --> 00:36:40,320
go for cross compilation but that's a

728
00:36:40,320 --> 00:36:41,520
whole different story too

729
00:36:41,520 --> 00:36:45,119
um so the the process that

730
00:36:45,119 --> 00:36:48,320
that's so interesting about that is

731
00:36:48,320 --> 00:36:50,720
in gcc most of the intermediate

732
00:36:50,720 --> 00:36:52,960
representations that there are

733
00:36:52,960 --> 00:36:55,680
are still language specific if you look

734
00:36:55,680 --> 00:36:56,160
at the

735
00:36:56,160 --> 00:36:58,079
the first two groups like the generic

736
00:36:58,079 --> 00:37:00,400
representation the chimp representation

737
00:37:00,400 --> 00:37:02,240
they kind of more or less look a bit

738
00:37:02,240 --> 00:37:03,440
c-ish

739
00:37:03,440 --> 00:37:06,480
um they're more or less human-readable

740
00:37:06,480 --> 00:37:07,920
but then there comes the fascinating

741
00:37:07,920 --> 00:37:09,520
part which is rtl the registered

742
00:37:09,520 --> 00:37:11,359
transfer language

743
00:37:11,359 --> 00:37:14,480
which is not readable um

744
00:37:14,480 --> 00:37:16,960
it's it's nothing like c it looks a bit

745
00:37:16,960 --> 00:37:17,839
like

746
00:37:17,839 --> 00:37:20,320
a descriptive language that tries to

747
00:37:20,320 --> 00:37:20,960
describe

748
00:37:20,960 --> 00:37:24,000
the bytecode that is produced afterwards

749
00:37:24,000 --> 00:37:27,440
and that's fascinating um so rtl is a

750
00:37:27,440 --> 00:37:29,680
number of passes in gcc's compilation

751
00:37:29,680 --> 00:37:30,560
process

752
00:37:30,560 --> 00:37:33,200
and the language itself changes as the

753
00:37:33,200 --> 00:37:35,119
compilation process steps along

754
00:37:35,119 --> 00:37:37,040
if you're interested you can tell gcc to

755
00:37:37,040 --> 00:37:39,280
dump the intermediate presentations

756
00:37:39,280 --> 00:37:40,720
there is a

757
00:37:40,720 --> 00:37:43,599
debug flag for the compiler which makes

758
00:37:43,599 --> 00:37:44,640
it dump

759
00:37:44,640 --> 00:37:47,599
all of the different representations in

760
00:37:47,599 --> 00:37:48,640
the different paths

761
00:37:48,640 --> 00:37:51,280
it's a lot of files um anyhow so

762
00:37:51,280 --> 00:37:52,560
artillery itself the language that

763
00:37:52,560 --> 00:37:55,520
changes as execution continues

764
00:37:55,520 --> 00:37:59,599
or the representation of your rtl

765
00:37:59,599 --> 00:38:02,960
uh view changes and

766
00:38:02,960 --> 00:38:04,480
if you look at the different retail

767
00:38:04,480 --> 00:38:06,720
stages you can see how the language

768
00:38:06,720 --> 00:38:11,200
massages the uh very abstract

769
00:38:11,200 --> 00:38:14,079
machine language into very specific

770
00:38:14,079 --> 00:38:16,160
machine language

771
00:38:16,160 --> 00:38:19,040
the eventual translation stage into into

772
00:38:19,040 --> 00:38:19,920
assembly

773
00:38:19,920 --> 00:38:22,000
which is by the way text based in in in

774
00:38:22,000 --> 00:38:23,599
gcc so

775
00:38:23,599 --> 00:38:26,800
gcc produces ascii files their

776
00:38:26,800 --> 00:38:29,839
temporary assembly listings which are

777
00:38:29,839 --> 00:38:32,320
then compiled by code

778
00:38:32,320 --> 00:38:35,119
and gcc translates the rtl into the

779
00:38:35,119 --> 00:38:36,320
text-based by code

780
00:38:36,320 --> 00:38:39,280
and text-based op-codes using machine

781
00:38:39,280 --> 00:38:40,680
definitions that are very

782
00:38:40,680 --> 00:38:42,400
architecture-specific

783
00:38:42,400 --> 00:38:45,760
how does it look like rtl is fun

784
00:38:45,760 --> 00:38:49,599
it's it's it's kind of it looks lispy

785
00:38:49,599 --> 00:38:52,880
like it's uh it looks like like

786
00:38:52,880 --> 00:38:54,720
lisp i personally have never worked with

787
00:38:54,720 --> 00:38:56,960
lisp and tries to describe

788
00:38:56,960 --> 00:39:02,160
how uh assembly needs to look like

789
00:39:02,160 --> 00:39:05,119
for a specific architecture if you look

790
00:39:05,119 --> 00:39:06,640
at the splash attacks it won't tell you

791
00:39:06,640 --> 00:39:07,680
much but

792
00:39:07,680 --> 00:39:10,160
i mark the important things which says

793
00:39:10,160 --> 00:39:11,359
set

794
00:39:11,359 --> 00:39:14,480
di in our case here there will be rdi

795
00:39:14,480 --> 00:39:18,079
uh to hold a certain pointer to a string

796
00:39:18,079 --> 00:39:20,960
and then call put string like the

797
00:39:20,960 --> 00:39:22,160
library function

798
00:39:22,160 --> 00:39:23,760
so this is literally printing hello

799
00:39:23,760 --> 00:39:26,079
world

800
00:39:26,839 --> 00:39:30,480
and yeah i i lost any of those listings

801
00:39:30,480 --> 00:39:31,440
it's

802
00:39:31,440 --> 00:39:34,800
it's my thing the

803
00:39:34,800 --> 00:39:37,920
machine definitions that gcc uses to

804
00:39:37,920 --> 00:39:41,440
translate this um

805
00:39:41,440 --> 00:39:43,280
this representation of assembly to

806
00:39:43,280 --> 00:39:44,640
machine code

807
00:39:44,640 --> 00:39:47,359
uh look as follows so like there's a

808
00:39:47,359 --> 00:39:47,839
huge

809
00:39:47,839 --> 00:39:50,160
file for for each architecture that she

810
00:39:50,160 --> 00:39:51,040
understands

811
00:39:51,040 --> 00:39:54,240
that literally define how a certain

812
00:39:54,240 --> 00:39:57,440
rtl instruction is supposed to

813
00:39:57,440 --> 00:40:01,440
look like in the assembly listing

814
00:40:01,680 --> 00:40:04,560
and yeah that's fascinating as well then

815
00:40:04,560 --> 00:40:05,520
from

816
00:40:05,520 --> 00:40:09,200
from this stage what you get is

817
00:40:09,200 --> 00:40:12,000
a text file i was i was surprised

818
00:40:12,000 --> 00:40:13,839
looking at gcc and eventually finding

819
00:40:13,839 --> 00:40:14,319
myself

820
00:40:14,319 --> 00:40:15,920
looking at the text file so once the

821
00:40:15,920 --> 00:40:17,520
compiler is done

822
00:40:17,520 --> 00:40:19,920
it produces a temp file it's very very

823
00:40:19,920 --> 00:40:20,960
much rc based

824
00:40:20,960 --> 00:40:23,520
and looks as you can see on this on this

825
00:40:23,520 --> 00:40:24,640
slide

826
00:40:24,640 --> 00:40:26,560
there is some assembly in there and a

827
00:40:26,560 --> 00:40:28,319
lot of

828
00:40:28,319 --> 00:40:30,800
instructions for the assembler on how to

829
00:40:30,800 --> 00:40:32,560
produce the assembly

830
00:40:32,560 --> 00:40:35,440
eventually this text is being read by us

831
00:40:35,440 --> 00:40:37,119
like the gnu assembler

832
00:40:37,119 --> 00:40:39,040
which then produces the buy code which

833
00:40:39,040 --> 00:40:41,920
you see on the right side

834
00:40:42,079 --> 00:40:45,440
isn't that awesome i i spent

835
00:40:45,440 --> 00:40:48,400
a lot of time in gcc and couldn't stop

836
00:40:48,400 --> 00:40:50,160
staring at this process

837
00:40:50,160 --> 00:40:52,720
and yeah i eventually understood how how

838
00:40:52,720 --> 00:40:54,319
the byte code ends up in the binary but

839
00:40:54,319 --> 00:40:55,839
then the disassembler picks up and tries

840
00:40:55,839 --> 00:40:56,400
to

841
00:40:56,400 --> 00:40:59,119
to disassemble and three percent as

842
00:40:59,119 --> 00:41:00,720
opcodes again

843
00:41:00,720 --> 00:41:04,319
um yeah that was

844
00:41:04,560 --> 00:41:07,599
my personal favorite rabbit hole but

845
00:41:07,599 --> 00:41:10,000
then um now we have bytecode what

846
00:41:10,000 --> 00:41:11,839
happens with bytecode

847
00:41:11,839 --> 00:41:13,280
eventually we'll have to feed the

848
00:41:13,280 --> 00:41:14,880
bytecode to someone right and

849
00:41:14,880 --> 00:41:17,599
that happens to be the cpu so once you

850
00:41:17,599 --> 00:41:19,440
execute the binary

851
00:41:19,440 --> 00:41:21,280
of course there's lots that the the

852
00:41:21,280 --> 00:41:23,920
operating system does and

853
00:41:23,920 --> 00:41:25,680
a lot that happens in between but

854
00:41:25,680 --> 00:41:27,520
eventually these

855
00:41:27,520 --> 00:41:30,000
um bytes the byte codes that you see in

856
00:41:30,000 --> 00:41:31,119
the binary

857
00:41:31,119 --> 00:41:34,079
ends up being fetched by the cpu and

858
00:41:34,079 --> 00:41:34,960
eventually

859
00:41:34,960 --> 00:41:36,720
causing the state of the architecture to

860
00:41:36,720 --> 00:41:39,040
change

861
00:41:39,200 --> 00:41:42,400
what am i talking about um on the next

862
00:41:42,400 --> 00:41:43,599
slide here

863
00:41:43,599 --> 00:41:46,720
you'll see a very very simplified

864
00:41:46,720 --> 00:41:48,400
block diagram of the intel core

865
00:41:48,400 --> 00:41:50,960
architecture

866
00:41:53,680 --> 00:41:56,720
you can imagine intel won't like it much

867
00:41:56,720 --> 00:41:59,359
if i talk in great detail about this

868
00:41:59,359 --> 00:42:01,359
the architecture but i'm very happy they

869
00:42:01,359 --> 00:42:02,400
allowed me to show you

870
00:42:02,400 --> 00:42:05,599
this simplified image um essentially

871
00:42:05,599 --> 00:42:07,280
what the cpu does is

872
00:42:07,280 --> 00:42:09,839
it goes ahead and fetches instructions

873
00:42:09,839 --> 00:42:11,839
from the instruction cache

874
00:42:11,839 --> 00:42:14,560
which is usually in the in the l1 cache

875
00:42:14,560 --> 00:42:14,960
and

876
00:42:14,960 --> 00:42:16,960
are always in the l1 cache on intel

877
00:42:16,960 --> 00:42:18,480
architecture

878
00:42:18,480 --> 00:42:21,839
um it decodes this instruction

879
00:42:21,839 --> 00:42:25,119
it executes this instruction uh

880
00:42:25,119 --> 00:42:26,960
it might or might not interact with with

881
00:42:26,960 --> 00:42:28,560
the memory subsystem

882
00:42:28,560 --> 00:42:31,119
and eventually reports back the the

883
00:42:31,119 --> 00:42:32,800
results

884
00:42:32,800 --> 00:42:34,480
this is like a 10 million foot few and

885
00:42:34,480 --> 00:42:37,200
what the what the cpu exactly does

886
00:42:37,200 --> 00:42:40,000
there is a lot going on in this process

887
00:42:40,000 --> 00:42:41,280
um

888
00:42:41,280 --> 00:42:43,920
most importantly most architectures

889
00:42:43,920 --> 00:42:46,400
nowadays work with

890
00:42:46,400 --> 00:42:48,079
parallel execution which means there's

891
00:42:48,079 --> 00:42:49,599
more than one core in in the

892
00:42:49,599 --> 00:42:50,720
architecture that can

893
00:42:50,720 --> 00:42:52,400
execute things and the instructions are

894
00:42:52,400 --> 00:42:54,240
reordered so that they

895
00:42:54,240 --> 00:42:59,839
slip through the execution phase faster

896
00:42:59,920 --> 00:43:03,119
and on the next slide i have a picture

897
00:43:03,119 --> 00:43:05,200
that's even a little more

898
00:43:05,200 --> 00:43:08,560
detailed uh

899
00:43:08,560 --> 00:43:11,680
cpus advanced a lot

900
00:43:11,680 --> 00:43:14,800
over the past decades like a lot a lot

901
00:43:14,800 --> 00:43:17,359
and these graphics you see here are very

902
00:43:17,359 --> 00:43:18,640
very high level

903
00:43:18,640 --> 00:43:20,480
essentially every component that you see

904
00:43:20,480 --> 00:43:21,680
in this picture

905
00:43:21,680 --> 00:43:24,160
is really complicated there is teams of

906
00:43:24,160 --> 00:43:24,880
people

907
00:43:24,880 --> 00:43:28,319
working on implementing

908
00:43:28,400 --> 00:43:30,160
how a single buffer is handled by the

909
00:43:30,160 --> 00:43:34,078
cpu i i kid you not

910
00:43:34,400 --> 00:43:36,079
for us as reverse engineers was

911
00:43:36,079 --> 00:43:37,920
interesting

912
00:43:37,920 --> 00:43:42,160
if we look at these graphics is

913
00:43:42,480 --> 00:43:44,640
if you if you reverse engineer a binary

914
00:43:44,640 --> 00:43:46,000
you look at one instruction

915
00:43:46,000 --> 00:43:47,440
after the other right and you try to

916
00:43:47,440 --> 00:43:49,599
figure out what's their context and how

917
00:43:49,599 --> 00:43:50,079
they

918
00:43:50,079 --> 00:43:51,520
they interact with each other and what

919
00:43:51,520 --> 00:43:54,400
happens after what and so on so forth

920
00:43:54,400 --> 00:43:57,440
and in reality the cpu is not much

921
00:43:57,440 --> 00:43:59,280
invested in

922
00:43:59,280 --> 00:44:02,800
in law and order of

923
00:44:02,800 --> 00:44:06,319
which instruction falls after which

924
00:44:07,280 --> 00:44:08,240
as mentioned there's a lot of

925
00:44:08,240 --> 00:44:10,880
parallelization going on in the core so

926
00:44:10,880 --> 00:44:14,000
essentially our instructions are

927
00:44:14,000 --> 00:44:15,599
taken from the instruction stream

928
00:44:15,599 --> 00:44:17,119
they're mingled and reordered and

929
00:44:17,119 --> 00:44:18,880
restored the cpu figures out

930
00:44:18,880 --> 00:44:21,760
like which dependencies exist and which

931
00:44:21,760 --> 00:44:23,040
don't and

932
00:44:23,040 --> 00:44:24,960
then takes the stream and basically puts

933
00:44:24,960 --> 00:44:26,400
it into buckets and executes the

934
00:44:26,400 --> 00:44:29,040
different buckets at different stages

935
00:44:29,040 --> 00:44:32,000
and it's beautiful that at the end of

936
00:44:32,000 --> 00:44:32,640
this

937
00:44:32,640 --> 00:44:34,400
we we still have the binary executed

938
00:44:34,400 --> 00:44:36,480
like instruction by instruction

939
00:44:36,480 --> 00:44:38,000
while in reality that's not actually

940
00:44:38,000 --> 00:44:40,319
what's happening it's really really

941
00:44:40,319 --> 00:44:41,599
fascinating

942
00:44:41,599 --> 00:44:43,040
and if you're interested in that i can

943
00:44:43,040 --> 00:44:46,079
recommend you go to wikichip.org

944
00:44:46,079 --> 00:44:48,960
um wikiship.org explains in much greater

945
00:44:48,960 --> 00:44:50,880
detail than

946
00:44:50,880 --> 00:44:54,240
i can tell you today about how how

947
00:44:54,240 --> 00:44:56,720
these different components inside of the

948
00:44:56,720 --> 00:44:57,440
core

949
00:44:57,440 --> 00:44:59,440
function it's it's a very very

950
00:44:59,440 --> 00:45:04,160
fascinating field

951
00:45:04,160 --> 00:45:07,280
personally um in my

952
00:45:07,280 --> 00:45:09,119
my career i spent less time on the

953
00:45:09,119 --> 00:45:10,640
different components in the core

954
00:45:10,640 --> 00:45:12,000
and more time with the individual

955
00:45:12,000 --> 00:45:13,760
instructions and

956
00:45:13,760 --> 00:45:15,040
one thing that i can just really

957
00:45:15,040 --> 00:45:17,119
recommend is if you're interested in how

958
00:45:17,119 --> 00:45:19,760
instructions are processed by the cpu

959
00:45:19,760 --> 00:45:20,400
patch the

960
00:45:20,400 --> 00:45:24,000
intel software developers manual

961
00:45:24,000 --> 00:45:25,839
and look at the documentation of an

962
00:45:25,839 --> 00:45:27,119
individual instruction

963
00:45:27,119 --> 00:45:29,599
that's really fascinating because these

964
00:45:29,599 --> 00:45:31,359
instructions come with

965
00:45:31,359 --> 00:45:33,599
with high level descriptions of how the

966
00:45:33,599 --> 00:45:34,400
core

967
00:45:34,400 --> 00:45:36,800
executes them if you look on the on the

968
00:45:36,800 --> 00:45:38,240
left side of the slide

969
00:45:38,240 --> 00:45:40,400
i posted the screenshot of the stm

970
00:45:40,400 --> 00:45:42,319
showing the the vmaxon

971
00:45:42,319 --> 00:45:44,400
instruction i actually spent a lot of

972
00:45:44,400 --> 00:45:46,560
time looking at the instruction and

973
00:45:46,560 --> 00:45:48,960
inside of the instruction

974
00:45:48,960 --> 00:45:50,560
it's very fascinating because it helps

975
00:45:50,560 --> 00:45:52,400
you understand the different modes that

976
00:45:52,400 --> 00:45:53,280
the next

977
00:45:53,280 --> 00:45:56,720
cpu executes in and understand the

978
00:45:56,720 --> 00:45:58,160
language in which the

979
00:45:58,160 --> 00:46:01,839
the manual is written

980
00:46:02,480 --> 00:46:05,599
um the important things you can see in

981
00:46:05,599 --> 00:46:08,560
in vmx on or specifically in intel

982
00:46:08,560 --> 00:46:10,240
intel's virtualization

983
00:46:10,240 --> 00:46:14,160
is the concept of cpu execution modes

984
00:46:14,160 --> 00:46:18,000
vmx on enables virtualization

985
00:46:18,000 --> 00:46:22,240
on the machine or enables the hypervisor

986
00:46:22,240 --> 00:46:25,440
and in that action

987
00:46:25,440 --> 00:46:28,079
the cpu switches into a different mode

988
00:46:28,079 --> 00:46:29,280
and

989
00:46:29,280 --> 00:46:31,040
different modes and cpus mean like

990
00:46:31,040 --> 00:46:32,880
entirely different worlds for

991
00:46:32,880 --> 00:46:34,160
instructions that execute

992
00:46:34,160 --> 00:46:35,200
and what they're allowed to do and what

993
00:46:35,200 --> 00:46:37,680
they're not allowed to do

994
00:46:37,680 --> 00:46:40,319
this is how

995
00:46:40,960 --> 00:46:43,599
polish separation is is implemented in

996
00:46:43,599 --> 00:46:44,000
the

997
00:46:44,000 --> 00:46:47,040
in the core and

998
00:46:47,040 --> 00:46:49,520
yeah it's fascinating also what i needed

999
00:46:49,520 --> 00:46:51,359
to learn

1000
00:46:51,359 --> 00:46:52,960
looking at the individual instructions

1001
00:46:52,960 --> 00:46:56,319
is that nowadays on

1002
00:46:56,319 --> 00:46:59,599
x86 instructions

1003
00:47:00,000 --> 00:47:02,240
operate more like functions if you've

1004
00:47:02,240 --> 00:47:03,839
ever executed the cpu

1005
00:47:03,839 --> 00:47:06,720
id instruction you have noticed that you

1006
00:47:06,720 --> 00:47:08,240
have to give it an argument you have to

1007
00:47:08,240 --> 00:47:10,000
tell which leaf of that instruction you

1008
00:47:10,000 --> 00:47:11,440
want executed

1009
00:47:11,440 --> 00:47:13,359
and the instruction behaves a certain

1010
00:47:13,359 --> 00:47:14,800
way uh

1011
00:47:14,800 --> 00:47:16,880
given different input operands and turns

1012
00:47:16,880 --> 00:47:18,319
out that many many instructions have

1013
00:47:18,319 --> 00:47:18,640
this

1014
00:47:18,640 --> 00:47:20,800
this behavior so depending on which

1015
00:47:20,800 --> 00:47:22,480
context they're executed in they will

1016
00:47:22,480 --> 00:47:24,960
exhibit different uh different behavior

1017
00:47:24,960 --> 00:47:27,040
and this is because the core interprets

1018
00:47:27,040 --> 00:47:28,559
an instruction differently in different

1019
00:47:28,559 --> 00:47:30,079
execution modes and given different

1020
00:47:30,079 --> 00:47:31,839
arguments

1021
00:47:31,839 --> 00:47:35,440
that's really really fascinating too

1022
00:47:35,440 --> 00:47:37,760
all right this much about cpu interns

1023
00:47:37,760 --> 00:47:38,960
finally the last topic i want to talk

1024
00:47:38,960 --> 00:47:40,000
about and i think i'm running out of

1025
00:47:40,000 --> 00:47:41,680
time anyway

1026
00:47:41,680 --> 00:47:44,800
it's fuzzing um after all these

1027
00:47:44,800 --> 00:47:45,760
adventures in

1028
00:47:45,760 --> 00:47:48,480
in compilers and cpu internals a

1029
00:47:48,480 --> 00:47:50,240
different topic landed on my table and

1030
00:47:50,240 --> 00:47:51,680
i'm telling you my manager loves to

1031
00:47:51,680 --> 00:47:53,280
throw different topics in me because i'm

1032
00:47:53,280 --> 00:47:55,359
like oh my god what's this it's new

1033
00:47:55,359 --> 00:47:57,760
and eventually this year i started

1034
00:47:57,760 --> 00:47:59,040
looking into fuzzing and i've never

1035
00:47:59,040 --> 00:48:00,960
fuzzed anything before so that was

1036
00:48:00,960 --> 00:48:03,200
really interesting um the thing i can

1037
00:48:03,200 --> 00:48:04,079
recommend you is

1038
00:48:04,079 --> 00:48:07,359
if you work for a cpu manufacturer is

1039
00:48:07,359 --> 00:48:11,200
buzzing is fun because you can get cpus

1040
00:48:11,200 --> 00:48:13,760
i have two z on boards and as you can

1041
00:48:13,760 --> 00:48:15,520
see on the screenshot

1042
00:48:15,520 --> 00:48:18,480
these dm boards have a lot of cores and

1043
00:48:18,480 --> 00:48:20,319
the more cores you have the more fun

1044
00:48:20,319 --> 00:48:24,400
buzzing actually is and yeah

1045
00:48:24,400 --> 00:48:28,160
just recommend it a quick one minute

1046
00:48:28,160 --> 00:48:30,720
introduction to lip buzzer

1047
00:48:30,720 --> 00:48:33,920
lip feather picked my interest because

1048
00:48:33,920 --> 00:48:34,240
it

1049
00:48:34,240 --> 00:48:37,760
is so flexible you can modify it in

1050
00:48:37,760 --> 00:48:39,520
many different ways and it's rather easy

1051
00:48:39,520 --> 00:48:42,000
it's rather straightforward

1052
00:48:42,000 --> 00:48:43,280
essentially what you want to do if you

1053
00:48:43,280 --> 00:48:45,040
first something with a fuzzer is you you

1054
00:48:45,040 --> 00:48:46,319
pick a target of course you need

1055
00:48:46,319 --> 00:48:47,520
something to fuzz

1056
00:48:47,520 --> 00:48:49,760
this thing you you want to fuzz needs to

1057
00:48:49,760 --> 00:48:50,559
be able

1058
00:48:50,559 --> 00:48:53,800
to interact with something

1059
00:48:53,800 --> 00:48:56,559
outside i put the big if you fuzz the

1060
00:48:56,559 --> 00:48:58,400
library you have lots of

1061
00:48:58,400 --> 00:49:01,119
apis that you can fizz lots of exported

1062
00:49:01,119 --> 00:49:03,280
functions

1063
00:49:03,280 --> 00:49:06,000
if you fuzz a piece of firmware you

1064
00:49:06,000 --> 00:49:06,559
still

1065
00:49:06,559 --> 00:49:08,559
have interfaces you can interact with

1066
00:49:08,559 --> 00:49:10,079
it's just a little bit more difficult to

1067
00:49:10,079 --> 00:49:10,960
get there

1068
00:49:10,960 --> 00:49:13,359
i'll just leave that here anyhow once we

1069
00:49:13,359 --> 00:49:14,960
have the the target we need to write a

1070
00:49:14,960 --> 00:49:16,720
hardness we need to have

1071
00:49:16,720 --> 00:49:18,880
some piece of code that as mentioned as

1072
00:49:18,880 --> 00:49:19,920
this interaction with

1073
00:49:19,920 --> 00:49:21,760
the target we want to fizz you need to

1074
00:49:21,760 --> 00:49:23,520
compile things appropriately and

1075
00:49:23,520 --> 00:49:24,400
honestly

1076
00:49:24,400 --> 00:49:26,640
you won't believe how much time i spent

1077
00:49:26,640 --> 00:49:28,839
lately on compiling

1078
00:49:28,839 --> 00:49:31,359
things that can't

1079
00:49:31,359 --> 00:49:34,480
turn out fairly complicated i'll just

1080
00:49:34,480 --> 00:49:35,520
leave this here too

1081
00:49:35,520 --> 00:49:37,119
and yeah eventually you run your fuzzer

1082
00:49:37,119 --> 00:49:38,800
and you start collecting crash terms

1083
00:49:38,800 --> 00:49:40,880
and while this sounds very easy it might

1084
00:49:40,880 --> 00:49:42,480
as well take a couple weeks until you

1085
00:49:42,480 --> 00:49:43,599
get going and

1086
00:49:43,599 --> 00:49:45,839
productive in the scene but yeah the

1087
00:49:45,839 --> 00:49:47,680
interesting part

1088
00:49:47,680 --> 00:49:49,710
is collecting the questions and that's

1089
00:49:49,710 --> 00:49:51,359
[Music]

1090
00:49:51,359 --> 00:49:54,240
a lot of fun too

1091
00:49:55,040 --> 00:49:58,160
i wouldn't be i wouldn't be who i am

1092
00:49:58,160 --> 00:49:59,599
if i wouldn't want to look at the

1093
00:49:59,599 --> 00:50:01,359
internals of lip pleasure as well

1094
00:50:01,359 --> 00:50:03,839
because my inner squirrel can just not

1095
00:50:03,839 --> 00:50:05,440
know how exactly

1096
00:50:05,440 --> 00:50:07,839
lip fuzzer works so i spent a little bit

1097
00:50:07,839 --> 00:50:09,760
of time on reverse engineering it

1098
00:50:09,760 --> 00:50:11,280
i think i'm running out of time so i'm

1099
00:50:11,280 --> 00:50:12,640
not actually going to go into details

1100
00:50:12,640 --> 00:50:13,440
here

1101
00:50:13,440 --> 00:50:15,280
but i can't just really recommend if

1102
00:50:15,280 --> 00:50:17,119
you're interested in fuzzing

1103
00:50:17,119 --> 00:50:19,520
don't just go and use the tools go and

1104
00:50:19,520 --> 00:50:20,400
understand

1105
00:50:20,400 --> 00:50:22,319
the details of how these tools work and

1106
00:50:22,319 --> 00:50:24,079
it's magnificent

1107
00:50:24,079 --> 00:50:26,079
i promise you what what i find so

1108
00:50:26,079 --> 00:50:27,680
fascinating about le fuzzer is it's

1109
00:50:27,680 --> 00:50:28,319
essentially

1110
00:50:28,319 --> 00:50:30,880
instrumenting your compiler so you're

1111
00:50:30,880 --> 00:50:32,400
compiling with blip buzzer

1112
00:50:32,400 --> 00:50:35,839
and tells the compiler to put certain

1113
00:50:35,839 --> 00:50:38,960
callbacks into the binary to

1114
00:50:38,960 --> 00:50:40,720
report back to the fuzzer what what

1115
00:50:40,720 --> 00:50:42,400
exactly is happening while the binary is

1116
00:50:42,400 --> 00:50:43,440
executing

1117
00:50:43,440 --> 00:50:45,520
that's not just lip fuzzer that's also

1118
00:50:45,520 --> 00:50:48,000
the sanitizers that come with lldm

1119
00:50:48,000 --> 00:50:49,680
many many thanks the people who wrote

1120
00:50:49,680 --> 00:50:51,760
those are amazing

1121
00:50:51,760 --> 00:50:54,079
and yeah once your your binary is

1122
00:50:54,079 --> 00:50:55,359
properly instrumented

1123
00:50:55,359 --> 00:50:57,839
it literally talks to lip fuzzer it

1124
00:50:57,839 --> 00:50:59,440
reports back to the

1125
00:50:59,440 --> 00:51:01,520
the fuzzer of of what exactly is

1126
00:51:01,520 --> 00:51:03,040
happening when a certain input

1127
00:51:03,040 --> 00:51:04,880
hits a certain function like which edges

1128
00:51:04,880 --> 00:51:07,839
are executed or not

1129
00:51:07,839 --> 00:51:09,839
what i found very interesting is like if

1130
00:51:09,839 --> 00:51:11,119
you compile a binary

1131
00:51:11,119 --> 00:51:14,160
with the sanitizers and the coverage

1132
00:51:14,160 --> 00:51:17,359
set to in direct

1133
00:51:17,359 --> 00:51:18,800
where's the function that's green you

1134
00:51:18,800 --> 00:51:20,400
can see right now but

1135
00:51:20,400 --> 00:51:23,839
um if you tell the sanitizer to

1136
00:51:23,839 --> 00:51:26,160
cover all the indirect calls in your

1137
00:51:26,160 --> 00:51:27,440
binary

1138
00:51:27,440 --> 00:51:29,680
then with cross references to that

1139
00:51:29,680 --> 00:51:31,359
sanitizer callback

1140
00:51:31,359 --> 00:51:33,680
you can find all the indirect calls like

1141
00:51:33,680 --> 00:51:35,200
with one click

1142
00:51:35,200 --> 00:51:38,400
inside of idle pro i if i had known that

1143
00:51:38,400 --> 00:51:40,800
as a model reverse engineer

1144
00:51:40,800 --> 00:51:42,720
that would have been very very

1145
00:51:42,720 --> 00:51:44,240
interesting to

1146
00:51:44,240 --> 00:51:48,160
to study how indirect calls are actually

1147
00:51:48,160 --> 00:51:50,400
landing in a binary and where does the

1148
00:51:50,400 --> 00:51:52,079
compiler decide to put them and where

1149
00:51:52,079 --> 00:51:53,040
does the compiler site

1150
00:51:53,040 --> 00:51:56,240
not yeah that's

1151
00:51:56,240 --> 00:51:58,720
another interesting rabbit hole i never

1152
00:51:58,720 --> 00:52:01,200
went down but would like to

1153
00:52:01,200 --> 00:52:02,720
and of course yeah they help you to to

1154
00:52:02,720 --> 00:52:04,559
profile binaries

1155
00:52:04,559 --> 00:52:07,359
and it's it's really interesting to to

1156
00:52:07,359 --> 00:52:08,960
try to visualize

1157
00:52:08,960 --> 00:52:11,680
the the profiler to analyze your inputs

1158
00:52:11,680 --> 00:52:12,480
and

1159
00:52:12,480 --> 00:52:14,160
yeah i can only recommend that as a

1160
00:52:14,160 --> 00:52:16,839
project for someone who's interested as

1161
00:52:16,839 --> 00:52:18,079
well

1162
00:52:18,079 --> 00:52:20,480
finally um i think that's my last two

1163
00:52:20,480 --> 00:52:21,599
slides here coming up here

1164
00:52:21,599 --> 00:52:23,440
inspectability automation tooling and

1165
00:52:23,440 --> 00:52:24,720
the things that i learned are

1166
00:52:24,720 --> 00:52:26,960
the most important things in binary

1167
00:52:26,960 --> 00:52:29,440
analysis and overall in infosec research

1168
00:52:29,440 --> 00:52:32,160
um if you can't inspect something you

1169
00:52:32,160 --> 00:52:34,160
can't analyze it if you can't analyze it

1170
00:52:34,160 --> 00:52:36,000
you can tell people what it does you

1171
00:52:36,000 --> 00:52:36,480
can't

1172
00:52:36,480 --> 00:52:39,839
tell people where the bugs are you can't

1173
00:52:39,839 --> 00:52:43,040
learn and that's essentially

1174
00:52:43,040 --> 00:52:47,599
just a lose-lose for for all of us

1175
00:52:47,599 --> 00:52:49,680
so you want to inspect automation is

1176
00:52:49,680 --> 00:52:50,800
important too

1177
00:52:50,800 --> 00:52:53,119
we can't scale humans but we can scale

1178
00:52:53,119 --> 00:52:54,640
computers

1179
00:52:54,640 --> 00:52:59,200
and yeah tooling um

1180
00:52:59,200 --> 00:53:01,200
for me most of my experience in defense

1181
00:53:01,200 --> 00:53:02,480
of security research was

1182
00:53:02,480 --> 00:53:05,440
tooling like writing compiler plugins

1183
00:53:05,440 --> 00:53:07,520
writing fuzzers

1184
00:53:07,520 --> 00:53:09,760
writing scripts to to automate and

1185
00:53:09,760 --> 00:53:10,880
essentially that's that's a very

1186
00:53:10,880 --> 00:53:12,000
important part that's

1187
00:53:12,000 --> 00:53:15,920
heavily under appreciated

1188
00:53:15,920 --> 00:53:18,000
of course eventually it's defense but we

1189
00:53:18,000 --> 00:53:19,599
have very

1190
00:53:19,599 --> 00:53:22,000
very lively proof of concept culture and

1191
00:53:22,000 --> 00:53:23,359
the proof of concept

1192
00:53:23,359 --> 00:53:27,119
is not the same as an actual attack

1193
00:53:27,359 --> 00:53:29,200
things are hard to verify the more

1194
00:53:29,200 --> 00:53:31,119
complicated or more complex environment

1195
00:53:31,119 --> 00:53:31,440
is

1196
00:53:31,440 --> 00:53:33,680
the harder it is to verify something the

1197
00:53:33,680 --> 00:53:35,599
harder it is to be sure about something

1198
00:53:35,599 --> 00:53:36,960
the more important it is to write a

1199
00:53:36,960 --> 00:53:40,880
proof of concept that actually works

1200
00:53:40,880 --> 00:53:42,480
interdependencies human error and

1201
00:53:42,480 --> 00:53:44,319
confirmation biases are issues we all

1202
00:53:44,319 --> 00:53:45,920
fight about and the more people working

1203
00:53:45,920 --> 00:53:46,400
on

1204
00:53:46,400 --> 00:53:48,319
topic the more human error there is and

1205
00:53:48,319 --> 00:53:51,839
more confirmation bias that comes up

1206
00:53:51,920 --> 00:53:53,760
and yeah something about security

1207
00:53:53,760 --> 00:53:56,319
research that's like

1208
00:53:56,319 --> 00:53:58,000
had to learn as well as that if you look

1209
00:53:58,000 --> 00:53:59,839
at something and there isn't a book

1210
00:53:59,839 --> 00:54:01,920
yet then that could be it back tomorrow

1211
00:54:01,920 --> 00:54:04,160
which again is why

1212
00:54:04,160 --> 00:54:07,040
we need more automation proper tooling

1213
00:54:07,040 --> 00:54:07,839
in

1214
00:54:07,839 --> 00:54:10,319
our sector finally wisdom condensed

1215
00:54:10,319 --> 00:54:11,680
complexity is a real assumption that

1216
00:54:11,680 --> 00:54:12,400
toxic

1217
00:54:12,400 --> 00:54:13,839
inspectability is important that's just

1218
00:54:13,839 --> 00:54:16,240
mission tooling is hard

1219
00:54:16,240 --> 00:54:17,680
that's the four important pieces that i

1220
00:54:17,680 --> 00:54:19,920
learned over the the past 10 years

1221
00:54:19,920 --> 00:54:24,000
that i really learned to

1222
00:54:24,000 --> 00:54:27,119
embrace finally the ocd

1223
00:54:27,119 --> 00:54:29,520
10 years in i still can't stop sorting

1224
00:54:29,520 --> 00:54:31,040
things

1225
00:54:31,040 --> 00:54:35,680
that's a damage for a lifetime anyhow

1226
00:54:35,680 --> 00:54:38,000
i'm done with my presentation i thank

1227
00:54:38,000 --> 00:54:39,119
you all very much for

1228
00:54:39,119 --> 00:54:40,720
for your attention it's kind of weird

1229
00:54:40,720 --> 00:54:42,079
not seeing an audience in front of me i

1230
00:54:42,079 --> 00:54:43,760
think i went over time

1231
00:54:43,760 --> 00:54:46,240
by about five minutes i'm sorry for that

1232
00:54:46,240 --> 00:54:48,720
i don't think we have time for questions

1233
00:54:48,720 --> 00:54:50,720
but if you want to ask something hit me

1234
00:54:50,720 --> 00:54:53,119
up my twitter messages are open or ask

1235
00:54:53,119 --> 00:54:56,880
in the discord and i'll answer in there

1236
00:54:56,880 --> 00:55:07,839
thanks so much

1237
00:55:09,920 --> 00:55:21,839
yeah thank you so much

1238
00:55:27,119 --> 00:55:29,200
technical stuff we love signing all the

1239
00:55:29,200 --> 00:55:31,440
stuff and i'm sure a lot of people in

1240
00:55:31,440 --> 00:55:32,960
the audience loves

1241
00:55:32,960 --> 00:55:35,680
reversing and assembling so we will

1242
00:55:35,680 --> 00:55:37,040
really enjoy

1243
00:55:37,040 --> 00:55:39,760
your talk and checking the chat right

1244
00:55:39,760 --> 00:55:40,319
now

1245
00:55:40,319 --> 00:55:43,920
a lot of those people is just say see

1246
00:55:43,920 --> 00:55:46,839
thank you so much i'm looking for

1247
00:55:46,839 --> 00:55:48,799
questions

1248
00:55:48,799 --> 00:55:52,079
um i have one here matt

1249
00:55:52,079 --> 00:55:54,319
asked if you could pick only one

1250
00:55:54,319 --> 00:55:55,680
resource to learn

1251
00:55:55,680 --> 00:55:59,280
about reversing and malware analysis and

1252
00:55:59,280 --> 00:56:03,839
what which one it will be

1253
00:56:04,799 --> 00:56:07,200
install an old version of visual studio

1254
00:56:07,200 --> 00:56:09,680
preferably visual studio 2012 that's my

1255
00:56:09,680 --> 00:56:12,000
favorite

1256
00:56:12,000 --> 00:56:14,559
write a few simple applications with

1257
00:56:14,559 --> 00:56:16,400
simple control structures like an if

1258
00:56:16,400 --> 00:56:16,880
else

1259
00:56:16,880 --> 00:56:18,960
on the switch statement and a few

1260
00:56:18,960 --> 00:56:21,359
different loops

1261
00:56:21,359 --> 00:56:23,280
compile these without optimization

1262
00:56:23,280 --> 00:56:24,960
settings

1263
00:56:24,960 --> 00:56:29,119
get a disassembler and start staring

1264
00:56:29,119 --> 00:56:31,440
there is nothing you can read that will

1265
00:56:31,440 --> 00:56:32,720
get you there quickly

1266
00:56:32,720 --> 00:56:35,839
there's no tutorial that can teach you

1267
00:56:35,839 --> 00:56:37,040
the skills

1268
00:56:37,040 --> 00:56:39,599
in a quick and comprehensive manner it's

1269
00:56:39,599 --> 00:56:40,079
really

1270
00:56:40,079 --> 00:56:42,839
it's you need to start on the practical

1271
00:56:42,839 --> 00:56:45,040
side and from there figure out what you

1272
00:56:45,040 --> 00:56:46,960
don't know and then you go and look for

1273
00:56:46,960 --> 00:56:48,640
stuff where you can read about things

1274
00:56:48,640 --> 00:56:51,118
you don't know

1275
00:56:53,280 --> 00:56:56,319
yeah yeah that's that's absolutely true

1276
00:56:56,319 --> 00:56:58,319
the practice is just really

1277
00:56:58,319 --> 00:57:01,119
really important so thank you so much i

1278
00:57:01,119 --> 00:57:02,559
believe there are no more

1279
00:57:02,559 --> 00:57:05,280
questions or at least i'm not seeing

1280
00:57:05,280 --> 00:57:06,000
them

1281
00:57:06,000 --> 00:57:08,960
neither in the discord nor the the

1282
00:57:08,960 --> 00:57:10,000
twitch chats

1283
00:57:10,000 --> 00:57:12,799
but as marion said uh you can just go to

1284
00:57:12,799 --> 00:57:15,200
this score and ask some questions there

1285
00:57:15,200 --> 00:57:17,280
and also i believe that the slides are

1286
00:57:17,280 --> 00:57:19,440
going to be available for you

1287
00:57:19,440 --> 00:57:22,640
um so i hope you enjoy this talk and

1288
00:57:22,640 --> 00:57:25,680
we are just moving to the next track in

1289
00:57:25,680 --> 00:57:41,839
a few minutes

1290
00:57:44,080 --> 00:57:55,989
[Music]

1291
00:58:00,060 --> 00:58:15,130
[Music]

1292
00:58:15,130 --> 00:58:17,110
[Applause]

1293
00:58:17,110 --> 00:58:26,400
[Music]

1294
00:58:26,400 --> 00:58:28,480
you

