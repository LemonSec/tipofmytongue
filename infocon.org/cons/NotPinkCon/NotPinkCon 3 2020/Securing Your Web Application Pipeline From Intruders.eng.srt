1
00:00:03,670 --> 00:00:07,218
[Music]

2
00:00:07,839 --> 00:00:08,160
hi

3
00:00:08,160 --> 00:00:11,679
everyone welcome back from our

4
00:00:11,679 --> 00:00:14,559
small break let's say technical issues

5
00:00:14,559 --> 00:00:16,320
we had some technical issues i'm gonna

6
00:00:16,320 --> 00:00:17,600
admit it but

7
00:00:17,600 --> 00:00:20,400
we are back that's the important part as

8
00:00:20,400 --> 00:00:22,320
you may notice i'm speaking english so

9
00:00:22,320 --> 00:00:24,080
the next talk it's in english

10
00:00:24,080 --> 00:00:26,080
be aware that you can use our live

11
00:00:26,080 --> 00:00:27,599
translation channels on

12
00:00:27,599 --> 00:00:31,039
the discord server um i'm so excited

13
00:00:31,039 --> 00:00:32,320
again about this talk

14
00:00:32,320 --> 00:00:34,000
because it's really interesting it's a

15
00:00:34,000 --> 00:00:36,000
topic that you may not see

16
00:00:36,000 --> 00:00:37,520
everywhere when it comes to information

17
00:00:37,520 --> 00:00:40,320
security and i think it's very good that

18
00:00:40,320 --> 00:00:42,480
we got the speaker to

19
00:00:42,480 --> 00:00:45,280
to participate in nothing for you guys

20
00:00:45,280 --> 00:00:46,320
just for you

21
00:00:46,320 --> 00:00:50,960
so um she is has a very interesting bio

22
00:00:50,960 --> 00:00:54,480
actually um she's a computer uh

23
00:00:54,480 --> 00:00:56,640
engineer actually a software engineer

24
00:00:56,640 --> 00:00:58,480
senior software engineer

25
00:00:58,480 --> 00:01:00,800
but she also has a master in degree in

26
00:01:00,800 --> 00:01:02,719
mechanical and

27
00:01:02,719 --> 00:01:05,920
aerospace engineering and it has many

28
00:01:05,920 --> 00:01:08,560
published research and papers when it

29
00:01:08,560 --> 00:01:10,400
comes to machine learning and also

30
00:01:10,400 --> 00:01:11,600
robotics

31
00:01:11,600 --> 00:01:13,840
and now she's going to talk about how

32
00:01:13,840 --> 00:01:14,720
you can secure

33
00:01:14,720 --> 00:01:17,360
your own web application pipeline when

34
00:01:17,360 --> 00:01:18,400
it comes to

35
00:01:18,400 --> 00:01:20,320
continuous integration and continuous

36
00:01:20,320 --> 00:01:21,439
delivery

37
00:01:21,439 --> 00:01:23,920
so she's going to talk about how can an

38
00:01:23,920 --> 00:01:25,040
attacker

39
00:01:25,040 --> 00:01:27,119
compromise these pipelines and also how

40
00:01:27,119 --> 00:01:28,640
can you what can you do

41
00:01:28,640 --> 00:01:31,439
to to secure this i think it's a very

42
00:01:31,439 --> 00:01:32,799
interesting topic

43
00:01:32,799 --> 00:01:35,040
and without further to say i'm just

44
00:01:35,040 --> 00:01:36,560
gonna present to you

45
00:01:36,560 --> 00:01:41,520
malicious mcgregor

46
00:01:41,520 --> 00:01:43,920
hey everybody my name is melisha

47
00:01:43,920 --> 00:01:45,040
mcgregor

48
00:01:45,040 --> 00:01:48,079
and i'm a developer advocate at conducto

49
00:01:48,079 --> 00:01:50,880
but today i'll be talking to you about

50
00:01:50,880 --> 00:01:53,520
securing your web application pipeline

51
00:01:53,520 --> 00:01:55,280
from intruders

52
00:01:55,280 --> 00:01:57,360
if you're interested in more things like

53
00:01:57,360 --> 00:01:59,040
this you can follow me

54
00:01:59,040 --> 00:02:02,399
on twitter at flippedcoding and i post

55
00:02:02,399 --> 00:02:05,040
about cool tech stuff all the time

56
00:02:05,040 --> 00:02:07,759
so to jump right into it i'll give you a

57
00:02:07,759 --> 00:02:08,239
brief

58
00:02:08,239 --> 00:02:10,160
overview of what we'll be talking about

59
00:02:10,160 --> 00:02:12,400
today

60
00:02:12,400 --> 00:02:15,040
first we'll go over some common best

61
00:02:15,040 --> 00:02:15,920
practices

62
00:02:15,920 --> 00:02:18,959
in devops and just ci cd pipeline

63
00:02:18,959 --> 00:02:21,200
creation

64
00:02:21,200 --> 00:02:22,879
then we'll talk about some of the

65
00:02:22,879 --> 00:02:26,160
reasons why cicd security gets

66
00:02:26,160 --> 00:02:30,000
overlooked and why that's such a problem

67
00:02:30,000 --> 00:02:32,640
we'll get into how intruders work which

68
00:02:32,640 --> 00:02:33,760
is probably

69
00:02:33,760 --> 00:02:35,920
the most interesting part because you

70
00:02:35,920 --> 00:02:37,280
get to see

71
00:02:37,280 --> 00:02:40,560
just how attackers think and learn about

72
00:02:40,560 --> 00:02:44,080
some of the tools that they use

73
00:02:44,239 --> 00:02:46,239
then we'll go over some of the things

74
00:02:46,239 --> 00:02:48,879
you can do to prevent your pipeline from

75
00:02:48,879 --> 00:02:50,560
getting attacked

76
00:02:50,560 --> 00:02:54,000
and we'll go over a few real examples

77
00:02:54,000 --> 00:02:58,400
in circle ci conducto and travis ci

78
00:02:58,400 --> 00:03:01,120
personally it always helps me when i see

79
00:03:01,120 --> 00:03:01,760
a tool

80
00:03:01,760 --> 00:03:04,879
in action so when it's actually being

81
00:03:04,879 --> 00:03:07,920
used in another tool that's commonly

82
00:03:07,920 --> 00:03:08,640
used

83
00:03:08,640 --> 00:03:10,959
on a work process that helps me out a

84
00:03:10,959 --> 00:03:12,800
lot so i'm hoping it'll help you guys

85
00:03:12,800 --> 00:03:15,120
out too

86
00:03:15,120 --> 00:03:17,599
nope i said you guys wow that's so

87
00:03:17,599 --> 00:03:18,560
ingrained

88
00:03:18,560 --> 00:03:22,000
i mean you all we're not all guys here

89
00:03:22,000 --> 00:03:24,640
but then we'll get into the key

90
00:03:24,640 --> 00:03:25,840
takeaways

91
00:03:25,840 --> 00:03:27,840
of what you should learn from this talk

92
00:03:27,840 --> 00:03:30,080
and just some of the things you can do

93
00:03:30,080 --> 00:03:34,319
to take security going forward forward

94
00:03:34,319 --> 00:03:37,599
so some of the best practices for just

95
00:03:37,599 --> 00:03:40,799
general cicd pipelines include

96
00:03:40,799 --> 00:03:42,799
keeping your build size small because

97
00:03:42,799 --> 00:03:44,879
you don't want your build

98
00:03:44,879 --> 00:03:47,680
to run for a really long time when

99
00:03:47,680 --> 00:03:48,959
you're trying to deploy

100
00:03:48,959 --> 00:03:52,400
different feature changes and bug fixes

101
00:03:52,400 --> 00:03:55,599
to production possibly multiple times a

102
00:03:55,599 --> 00:03:56,159
day

103
00:03:56,159 --> 00:03:58,319
you want to make sure that these builds

104
00:03:58,319 --> 00:04:00,560
run really fast

105
00:04:00,560 --> 00:04:03,760
and you also want to make sure

106
00:04:03,760 --> 00:04:06,959
that the pipeline is the only way to

107
00:04:06,959 --> 00:04:07,519
deploy

108
00:04:07,519 --> 00:04:10,959
changes to pride so part of the devops

109
00:04:10,959 --> 00:04:12,159
philosophy

110
00:04:12,159 --> 00:04:15,360
is having this automated

111
00:04:15,360 --> 00:04:18,798
process that any developer or user can

112
00:04:18,798 --> 00:04:19,759
come through

113
00:04:19,759 --> 00:04:22,639
and deploy a code change to production

114
00:04:22,639 --> 00:04:24,320
for customers to see

115
00:04:24,320 --> 00:04:28,080
you don't want any hidden processes or

116
00:04:28,080 --> 00:04:30,400
secret scripts that only one person

117
00:04:30,400 --> 00:04:31,840
knows how to use

118
00:04:31,840 --> 00:04:35,280
so just make it a good practice to only

119
00:04:35,280 --> 00:04:39,040
deploy changes through the pipeline

120
00:04:39,040 --> 00:04:40,720
and something else you really want to

121
00:04:40,720 --> 00:04:42,800
make sure you do just for testing

122
00:04:42,800 --> 00:04:43,919
purposes

123
00:04:43,919 --> 00:04:46,800
is keep all of your environments in

124
00:04:46,800 --> 00:04:47,440
parity

125
00:04:47,440 --> 00:04:49,680
with production so if that means you

126
00:04:49,680 --> 00:04:50,880
have to

127
00:04:50,880 --> 00:04:53,919
update databases overnight or

128
00:04:53,919 --> 00:04:57,040
you need to include different services

129
00:04:57,040 --> 00:04:59,520
in your app as it goes through different

130
00:04:59,520 --> 00:05:00,560
environments

131
00:05:00,560 --> 00:05:02,639
just try to keep it as close to

132
00:05:02,639 --> 00:05:04,400
production as possible

133
00:05:04,400 --> 00:05:06,639
because this is how you'll get the most

134
00:05:06,639 --> 00:05:08,960
value out of all of the testing

135
00:05:08,960 --> 00:05:11,280
and security checks that you do in your

136
00:05:11,280 --> 00:05:14,638
ci cd pipeline

137
00:05:14,800 --> 00:05:17,120
and something else this is one that a

138
00:05:17,120 --> 00:05:19,199
lot of devs are guilty of myself

139
00:05:19,199 --> 00:05:22,320
included is that we don't always run

140
00:05:22,320 --> 00:05:24,160
tests locally first

141
00:05:24,160 --> 00:05:26,639
i'm sure a lot of you have typed that

142
00:05:26,639 --> 00:05:27,360
dash dash

143
00:05:27,360 --> 00:05:30,960
no verify on a get push but

144
00:05:30,960 --> 00:05:32,880
try to make sure you run your test

145
00:05:32,880 --> 00:05:34,400
locally first

146
00:05:34,400 --> 00:05:36,800
not only does that save you a lot of

147
00:05:36,800 --> 00:05:37,440
time

148
00:05:37,440 --> 00:05:39,759
you know going through the build process

149
00:05:39,759 --> 00:05:42,160
and spinning up a new node or a new

150
00:05:42,160 --> 00:05:43,120
server

151
00:05:43,120 --> 00:05:46,160
it just helps you find those bugs

152
00:05:46,160 --> 00:05:48,720
a lot earlier so that nobody else has to

153
00:05:48,720 --> 00:05:49,680
know about them

154
00:05:49,680 --> 00:05:51,280
and you can fix them and look like the

155
00:05:51,280 --> 00:05:53,680
hero

156
00:05:53,680 --> 00:05:57,280
and then documentation so

157
00:05:57,280 --> 00:05:59,039
this is something that a lot of

158
00:05:59,039 --> 00:06:00,880
developers don't really

159
00:06:00,880 --> 00:06:04,560
enjoy but it's so crucial

160
00:06:04,560 --> 00:06:07,840
to keeping a pipeline that's

161
00:06:07,840 --> 00:06:10,960
maintainable because there's it's not

162
00:06:10,960 --> 00:06:12,400
very often you'll go

163
00:06:12,400 --> 00:06:14,560
into your pipeline config and make

164
00:06:14,560 --> 00:06:15,520
updates

165
00:06:15,520 --> 00:06:18,880
so you might want to make sure that even

166
00:06:18,880 --> 00:06:20,400
if it's just comments

167
00:06:20,400 --> 00:06:23,680
in the pipeline config itself you want

168
00:06:23,680 --> 00:06:24,800
to make sure

169
00:06:24,800 --> 00:06:27,360
that the process is well documented so

170
00:06:27,360 --> 00:06:29,840
that other developers or other devops

171
00:06:29,840 --> 00:06:31,600
engineers can come in

172
00:06:31,600 --> 00:06:34,479
and figure out where to make changes and

173
00:06:34,479 --> 00:06:34,880
why

174
00:06:34,880 --> 00:06:37,759
certain variables are set a certain way

175
00:06:37,759 --> 00:06:38,240
just

176
00:06:38,240 --> 00:06:41,440
make some good documentation it doesn't

177
00:06:41,440 --> 00:06:43,280
have to be really long

178
00:06:43,280 --> 00:06:46,720
it just has to be there

179
00:06:46,720 --> 00:06:48,639
but now we'll switch gears a little bit

180
00:06:48,639 --> 00:06:50,080
and talk about why

181
00:06:50,080 --> 00:06:53,840
cicd security is overlooked so

182
00:06:53,840 --> 00:06:57,199
often so one of the big reasons is that

183
00:06:57,199 --> 00:06:59,520
there's just time restrictions

184
00:06:59,520 --> 00:07:02,639
remember we kind of talked about how a

185
00:07:02,639 --> 00:07:03,919
good cicd

186
00:07:03,919 --> 00:07:06,400
pipeline should have a small build and

187
00:07:06,400 --> 00:07:08,000
be really fast

188
00:07:08,000 --> 00:07:09,520
well when you're trying to get all of

189
00:07:09,520 --> 00:07:13,120
those things done in a sprint or

190
00:07:13,120 --> 00:07:16,160
as a hot fix it's really

191
00:07:16,160 --> 00:07:20,080
hard to justify including extra steps

192
00:07:20,080 --> 00:07:23,120
so that's why security gets left out a

193
00:07:23,120 --> 00:07:23,520
lot

194
00:07:23,520 --> 00:07:26,800
is because it's just seen as this big

195
00:07:26,800 --> 00:07:28,160
time constraint

196
00:07:28,160 --> 00:07:30,319
if we go through security testing it

197
00:07:30,319 --> 00:07:32,800
means that the app gets delayed

198
00:07:32,800 --> 00:07:36,240
for deployment by who knows maybe hours

199
00:07:36,240 --> 00:07:38,960
if they find bugs it could get deployed

200
00:07:38,960 --> 00:07:41,360
by days or even weeks depending on how

201
00:07:41,360 --> 00:07:42,000
long

202
00:07:42,000 --> 00:07:45,520
it takes to address those security

203
00:07:45,520 --> 00:07:46,639
concerns

204
00:07:46,639 --> 00:07:49,520
so a big reason security gets overlooked

205
00:07:49,520 --> 00:07:50,960
in ci cd

206
00:07:50,960 --> 00:07:55,120
just has to do with time restrictions

207
00:07:55,120 --> 00:07:57,360
and then something else that's kind of

208
00:07:57,360 --> 00:07:58,879
an interesting problem

209
00:07:58,879 --> 00:08:01,599
is that it can be really hard to find

210
00:08:01,599 --> 00:08:03,039
answers

211
00:08:03,039 --> 00:08:06,639
so when your pipeline breaks or there's

212
00:08:06,639 --> 00:08:08,000
some kind of

213
00:08:08,000 --> 00:08:11,520
bug it's detected it can stop

214
00:08:11,520 --> 00:08:13,840
at any point in that process and if

215
00:08:13,840 --> 00:08:15,680
you've tried to trace through

216
00:08:15,680 --> 00:08:19,759
circle ci like their visual

217
00:08:19,759 --> 00:08:22,319
visualization of all of your notes it

218
00:08:22,319 --> 00:08:24,639
can get a little bit confusing if you're

219
00:08:24,639 --> 00:08:26,000
working with something really

220
00:08:26,000 --> 00:08:28,639
complex like deploying a lot of micro

221
00:08:28,639 --> 00:08:29,759
services

222
00:08:29,759 --> 00:08:32,640
so you run into these cases where you're

223
00:08:32,640 --> 00:08:33,839
trying to debug

224
00:08:33,839 --> 00:08:37,200
the pipeline and when you finally get it

225
00:08:37,200 --> 00:08:38,559
working

226
00:08:38,559 --> 00:08:42,479
most people have done hours of just

227
00:08:42,479 --> 00:08:46,000
googling so when you feel like

228
00:08:46,000 --> 00:08:48,640
building the pipeline itself is just

229
00:08:48,640 --> 00:08:49,040
that

230
00:08:49,040 --> 00:08:52,080
difficult adding more tools to it

231
00:08:52,080 --> 00:08:55,200
makes it even harder to find answers

232
00:08:55,200 --> 00:08:57,920
when things break or when things don't

233
00:08:57,920 --> 00:09:01,680
run or deploy like you expect

234
00:09:01,839 --> 00:09:05,120
something else is that most of the cicd

235
00:09:05,120 --> 00:09:07,600
configs are written in yaml and that's

236
00:09:07,600 --> 00:09:08,160
fine

237
00:09:08,160 --> 00:09:10,800
it's a really structured language but

238
00:09:10,800 --> 00:09:12,000
it's not something

239
00:09:12,000 --> 00:09:15,680
that developers or even devops engineers

240
00:09:15,680 --> 00:09:16,080
just

241
00:09:16,080 --> 00:09:19,120
use all the time so it might be a little

242
00:09:19,120 --> 00:09:20,160
bit harder to

243
00:09:20,160 --> 00:09:23,440
remember what the syntax is or to even

244
00:09:23,440 --> 00:09:26,000
remember which questions to google

245
00:09:26,000 --> 00:09:30,640
you really get this situation where

246
00:09:30,640 --> 00:09:33,600
people know what they want to do but

247
00:09:33,600 --> 00:09:34,399
finding

248
00:09:34,399 --> 00:09:37,519
the right syntax in the language

249
00:09:37,519 --> 00:09:40,480
just makes it a little bit trickier and

250
00:09:40,480 --> 00:09:41,200
that

251
00:09:41,200 --> 00:09:45,040
extra layer of trickiness

252
00:09:45,040 --> 00:09:47,360
is just one of the reasons security can

253
00:09:47,360 --> 00:09:50,480
get overlooked

254
00:09:50,480 --> 00:09:53,920
another thing is that how often do you

255
00:09:53,920 --> 00:09:58,160
actually update a cicd pipeline

256
00:09:58,160 --> 00:10:00,000
most of the time that doesn't get

257
00:10:00,000 --> 00:10:02,880
touched until there's some kind of

258
00:10:02,880 --> 00:10:06,240
new service added or there's a huge

259
00:10:06,240 --> 00:10:09,519
feature update and you need to update

260
00:10:09,519 --> 00:10:12,399
where certain artifacts are getting

261
00:10:12,399 --> 00:10:13,680
deployed

262
00:10:13,680 --> 00:10:16,959
those type of changes don't happen

263
00:10:16,959 --> 00:10:20,399
super often so when you're just not

264
00:10:20,399 --> 00:10:22,320
looking at the pipeline all the time you

265
00:10:22,320 --> 00:10:24,240
tend to forget about it

266
00:10:24,240 --> 00:10:26,240
and when you forget about it all of

267
00:10:26,240 --> 00:10:28,480
those updates and all of those

268
00:10:28,480 --> 00:10:31,360
fancy little widgets you were gonna add

269
00:10:31,360 --> 00:10:32,079
well you forget

270
00:10:32,079 --> 00:10:35,600
about those two and usually security is

271
00:10:35,600 --> 00:10:38,240
lumped into those nice little widgets

272
00:10:38,240 --> 00:10:41,519
and that's also how security falls along

273
00:10:41,519 --> 00:10:44,320
the wayside

274
00:10:44,320 --> 00:10:46,800
and something else which is a little bit

275
00:10:46,800 --> 00:10:48,160
more subtle

276
00:10:48,160 --> 00:10:51,440
is that now there has been more of a

277
00:10:51,440 --> 00:10:52,000
push

278
00:10:52,000 --> 00:10:55,360
for developers to own the pipeline

279
00:10:55,360 --> 00:10:58,079
and to get more involved in the devops

280
00:10:58,079 --> 00:10:59,279
area

281
00:10:59,279 --> 00:11:02,079
but the problem with that is not all

282
00:11:02,079 --> 00:11:02,959
developers

283
00:11:02,959 --> 00:11:06,480
are familiar with pipeline flows some of

284
00:11:06,480 --> 00:11:09,279
us haven't touched a pipeline we just

285
00:11:09,279 --> 00:11:11,519
worry about the bug fixes

286
00:11:11,519 --> 00:11:14,560
the feature requests and making sure

287
00:11:14,560 --> 00:11:16,880
that our unit tests pass

288
00:11:16,880 --> 00:11:20,000
but as far as going in and updating a

289
00:11:20,000 --> 00:11:21,760
circle ci config

290
00:11:21,760 --> 00:11:25,360
is just not something that developers do

291
00:11:25,360 --> 00:11:28,399
often or really at all

292
00:11:28,399 --> 00:11:31,120
a lot of companies have dedicated devops

293
00:11:31,120 --> 00:11:32,160
engineers

294
00:11:32,160 --> 00:11:35,600
and shout out to you all because

295
00:11:35,600 --> 00:11:39,040
that is just something so different from

296
00:11:39,040 --> 00:11:39,839
what we do

297
00:11:39,839 --> 00:11:42,000
every day that it's a little bit

298
00:11:42,000 --> 00:11:43,120
overwhelming

299
00:11:43,120 --> 00:11:46,399
so if you task a developer with adding

300
00:11:46,399 --> 00:11:48,480
security to your pipeline

301
00:11:48,480 --> 00:11:52,240
you'll get something but it might not be

302
00:11:52,240 --> 00:11:55,600
as optimized as it should be for a good

303
00:11:55,600 --> 00:11:56,000
ci

304
00:11:56,000 --> 00:11:59,120
cd pipeline

305
00:11:59,120 --> 00:12:02,160
now the fun part so we get to talk about

306
00:12:02,160 --> 00:12:02,560
how

307
00:12:02,560 --> 00:12:06,320
intruders work basically what they do

308
00:12:06,320 --> 00:12:11,519
is really simple they use attacker tools

309
00:12:11,519 --> 00:12:14,240
yup there's no guy just sitting in some

310
00:12:14,240 --> 00:12:15,440
dark room

311
00:12:15,440 --> 00:12:18,160
trying to hack into the mainframe there

312
00:12:18,160 --> 00:12:18,560
are

313
00:12:18,560 --> 00:12:21,920
tools that are sophisticated and very

314
00:12:21,920 --> 00:12:23,440
user friendly now

315
00:12:23,440 --> 00:12:26,800
if you guys ah i did it again if you all

316
00:12:26,800 --> 00:12:29,920
are familiar with kali linux then

317
00:12:29,920 --> 00:12:33,600
you've probably seen a lot of the tools

318
00:12:33,600 --> 00:12:37,519
that just come installed there are tools

319
00:12:37,519 --> 00:12:39,120
to scan ports

320
00:12:39,120 --> 00:12:42,480
there are tools to automatically run sql

321
00:12:42,480 --> 00:12:43,920
injection attacks

322
00:12:43,920 --> 00:12:46,560
there's tools to run cross scripting

323
00:12:46,560 --> 00:12:47,760
texts

324
00:12:47,760 --> 00:12:50,959
really easily like i'll show you a few

325
00:12:50,959 --> 00:12:52,480
of them because we're going to use the

326
00:12:52,480 --> 00:12:53,839
same tools they do

327
00:12:53,839 --> 00:12:58,399
to try and keep them out of our pipeline

328
00:12:58,399 --> 00:13:01,920
but they aren't doing anything that you

329
00:13:01,920 --> 00:13:05,200
probably don't already know how to do

330
00:13:05,200 --> 00:13:08,160
if you know how to set up any new

331
00:13:08,160 --> 00:13:08,800
project

332
00:13:08,800 --> 00:13:12,560
on the computer on any operating system

333
00:13:12,560 --> 00:13:15,040
then you probably know how to use

334
00:13:15,040 --> 00:13:17,519
attacker tools or it wouldn't be

335
00:13:17,519 --> 00:13:19,680
too big of a jump for you to get up and

336
00:13:19,680 --> 00:13:22,399
running with them

337
00:13:23,120 --> 00:13:25,760
something else that they do that we

338
00:13:25,760 --> 00:13:27,279
typically don't do is

339
00:13:27,279 --> 00:13:30,480
check for misconfigurations so

340
00:13:30,480 --> 00:13:34,480
when is the last time you check to see

341
00:13:34,480 --> 00:13:37,040
if new developers automatically have

342
00:13:37,040 --> 00:13:38,720
admin permissions

343
00:13:38,720 --> 00:13:41,600
or when's the last time you actually

344
00:13:41,600 --> 00:13:42,240
deleted

345
00:13:42,240 --> 00:13:45,120
those user permissions for employees

346
00:13:45,120 --> 00:13:47,920
that don't work at the company anymore

347
00:13:47,920 --> 00:13:48,560
they just

348
00:13:48,560 --> 00:13:50,959
poke around and try to find these little

349
00:13:50,959 --> 00:13:51,680
holes

350
00:13:51,680 --> 00:13:54,240
in your application in your pipeline

351
00:13:54,240 --> 00:13:56,959
just throughout your entire process

352
00:13:56,959 --> 00:13:58,360
and they're looking for

353
00:13:58,360 --> 00:14:01,839
misconfigurations like maybe

354
00:14:01,839 --> 00:14:04,880
an environment variable isn't encrypted

355
00:14:04,880 --> 00:14:05,279
or

356
00:14:05,279 --> 00:14:09,199
maybe you left some kind of secret

357
00:14:09,199 --> 00:14:12,480
in your version control but they're

358
00:14:12,480 --> 00:14:14,000
looking for things like

359
00:14:14,000 --> 00:14:17,279
that you things that you might normally

360
00:14:17,279 --> 00:14:18,480
just overlook

361
00:14:18,480 --> 00:14:22,240
in a rush to get it deployed

362
00:14:22,720 --> 00:14:25,279
so kind of like i mentioned you'd be

363
00:14:25,279 --> 00:14:26,160
surprised

364
00:14:26,160 --> 00:14:29,199
how many repos just have secrets

365
00:14:29,199 --> 00:14:32,079
in their version control and of course

366
00:14:32,079 --> 00:14:34,480
you can go in and delete it

367
00:14:34,480 --> 00:14:37,680
but it's in version control so anybody

368
00:14:37,680 --> 00:14:40,000
that wants to take the time to dig

369
00:14:40,000 --> 00:14:42,000
around through your code

370
00:14:42,000 --> 00:14:45,360
can and they will find those secrets

371
00:14:45,360 --> 00:14:48,160
if they're in there that's something

372
00:14:48,160 --> 00:14:49,120
that you really

373
00:14:49,120 --> 00:14:52,399
want to keep an eye out for

374
00:14:52,399 --> 00:14:55,440
so when you're about to commit changes

375
00:14:55,440 --> 00:14:57,440
and i know that we do this for testing

376
00:14:57,440 --> 00:14:58,880
sometimes

377
00:14:58,880 --> 00:15:01,199
try to make sure that you aren't leaving

378
00:15:01,199 --> 00:15:02,639
any production

379
00:15:02,639 --> 00:15:05,680
level secrets in your code

380
00:15:05,680 --> 00:15:08,320
it it's not really okay to do it with

381
00:15:08,320 --> 00:15:09,920
the development environment

382
00:15:09,920 --> 00:15:12,399
especially if you are keeping parity

383
00:15:12,399 --> 00:15:14,000
with production

384
00:15:14,000 --> 00:15:18,000
but before you commit any changes

385
00:15:18,000 --> 00:15:21,760
ever make sure that you did that double

386
00:15:21,760 --> 00:15:22,480
check

387
00:15:22,480 --> 00:15:24,720
and that there aren't any secrets in

388
00:15:24,720 --> 00:15:26,240
your version control

389
00:15:26,240 --> 00:15:28,800
because if there are somebody will

390
00:15:28,800 --> 00:15:31,758
eventually find them

391
00:15:32,320 --> 00:15:35,120
this is also another tricky one

392
00:15:35,120 --> 00:15:36,160
sometimes

393
00:15:36,160 --> 00:15:40,240
we leave ports open that we forget about

394
00:15:40,240 --> 00:15:44,199
so maybe you moved a service from port

395
00:15:44,199 --> 00:15:49,279
3400 to port 7500 but you still left

396
00:15:49,279 --> 00:15:52,639
all of the 3400s open

397
00:15:52,639 --> 00:15:55,120
the that's a way that they can just get

398
00:15:55,120 --> 00:15:57,279
access to your server

399
00:15:57,279 --> 00:15:59,920
and you potentially not even know about

400
00:15:59,920 --> 00:16:01,680
it because you aren't listening for

401
00:16:01,680 --> 00:16:03,440
anything on that port

402
00:16:03,440 --> 00:16:06,560
and because that port is just open there

403
00:16:06,560 --> 00:16:08,399
is a chance you don't have

404
00:16:08,399 --> 00:16:10,880
any type of security around it like

405
00:16:10,880 --> 00:16:12,800
maybe you don't even need

406
00:16:12,800 --> 00:16:15,759
a user login to access whatever is

407
00:16:15,759 --> 00:16:17,360
running on that port

408
00:16:17,360 --> 00:16:19,279
this is just one of the ways that they

409
00:16:19,279 --> 00:16:21,680
can start poking holes into your

410
00:16:21,680 --> 00:16:22,880
application

411
00:16:22,880 --> 00:16:25,920
and find ways in

412
00:16:25,920 --> 00:16:28,320
so make sure that you don't have any

413
00:16:28,320 --> 00:16:29,920
extra open ports

414
00:16:29,920 --> 00:16:32,000
when you deploy your app to the server

415
00:16:32,000 --> 00:16:34,880
you've provisioned

416
00:16:35,519 --> 00:16:38,560
and this is a big favorite for

417
00:16:38,560 --> 00:16:41,920
developers you know those github

418
00:16:41,920 --> 00:16:45,040
messages where they're like hey this

419
00:16:45,040 --> 00:16:46,160
package you're using

420
00:16:46,160 --> 00:16:49,600
has these vulnerabilities or when you do

421
00:16:49,600 --> 00:16:52,240
an mpm or a yarn install

422
00:16:52,240 --> 00:16:55,279
you'll see those hey you need to fix

423
00:16:55,279 --> 00:16:57,120
some of these because they have

424
00:16:57,120 --> 00:16:59,759
really bad security problems but they're

425
00:16:59,759 --> 00:17:00,880
patched

426
00:17:00,880 --> 00:17:04,079
so something that hackers and other

427
00:17:04,079 --> 00:17:05,760
attackers count on

428
00:17:05,760 --> 00:17:08,480
is that you don't keep all of those

429
00:17:08,480 --> 00:17:10,480
packages up to date

430
00:17:10,480 --> 00:17:13,520
they know what the weaknesses are so

431
00:17:13,520 --> 00:17:14,720
they'll just check

432
00:17:14,720 --> 00:17:17,280
all of your code to see if that package

433
00:17:17,280 --> 00:17:18,480
is included

434
00:17:18,480 --> 00:17:21,280
and if it's not the right version number

435
00:17:21,280 --> 00:17:23,760
they already know how to attack you

436
00:17:23,760 --> 00:17:26,799
so they can just go in to

437
00:17:26,799 --> 00:17:30,320
that specific library and have

438
00:17:30,320 --> 00:17:33,120
some form of access into your code that

439
00:17:33,120 --> 00:17:35,039
you don't want them to

440
00:17:35,039 --> 00:17:37,840
so make sure that when you're going

441
00:17:37,840 --> 00:17:40,559
through all of your security auditing

442
00:17:40,559 --> 00:17:43,840
you do take the time to look at

443
00:17:43,840 --> 00:17:46,160
the third party packages you're

444
00:17:46,160 --> 00:17:46,880
importing

445
00:17:46,880 --> 00:17:50,400
into your application or else they will

446
00:17:50,400 --> 00:17:52,799
find it

447
00:17:52,799 --> 00:17:54,880
so now i want to share with you some of

448
00:17:54,880 --> 00:17:56,480
the tools you can use

449
00:17:56,480 --> 00:17:59,039
at different phases in your devops

450
00:17:59,039 --> 00:18:00,160
process

451
00:18:00,160 --> 00:18:02,559
to get some of that security coverage

452
00:18:02,559 --> 00:18:04,320
that'll keep your application

453
00:18:04,320 --> 00:18:07,760
safe and less hackable

454
00:18:07,760 --> 00:18:11,120
so there are four phases four main

455
00:18:11,120 --> 00:18:11,840
phases

456
00:18:11,840 --> 00:18:14,960
in the devops process you have the build

457
00:18:14,960 --> 00:18:16,559
phase the test phase

458
00:18:16,559 --> 00:18:19,679
delivery and deployment so with the

459
00:18:19,679 --> 00:18:20,480
build phase

460
00:18:20,480 --> 00:18:23,120
this is when you get your application

461
00:18:23,120 --> 00:18:25,280
code it's been committed with all of the

462
00:18:25,280 --> 00:18:27,280
nice shiny changes

463
00:18:27,280 --> 00:18:31,760
and it's ready to build an artifact

464
00:18:31,760 --> 00:18:34,240
that you'll send to the production

465
00:18:34,240 --> 00:18:36,080
server

466
00:18:36,080 --> 00:18:38,640
so before you get that artifact that

467
00:18:38,640 --> 00:18:40,559
you're going to ship to production

468
00:18:40,559 --> 00:18:43,440
these are a few tools that you can use

469
00:18:43,440 --> 00:18:43,840
to

470
00:18:43,840 --> 00:18:46,960
do some security checks

471
00:18:46,960 --> 00:18:50,080
owasp zed is a really great tool

472
00:18:50,080 --> 00:18:52,160
if you're trying to do just some general

473
00:18:52,160 --> 00:18:53,200
attacks

474
00:18:53,200 --> 00:18:55,520
just to see if like there's any

475
00:18:55,520 --> 00:18:58,240
cross-site scripting allowed or

476
00:18:58,240 --> 00:19:01,919
if there's any sql injection

477
00:19:01,919 --> 00:19:04,320
that can happen in your app this is a

478
00:19:04,320 --> 00:19:06,480
pretty comprehensive tool

479
00:19:06,480 --> 00:19:08,799
and you should definitely check out

480
00:19:08,799 --> 00:19:10,720
their website

481
00:19:10,720 --> 00:19:15,200
so let me show you guys

482
00:19:15,200 --> 00:19:19,520
show you all this

483
00:19:20,559 --> 00:19:23,600
you know even recording this before

484
00:19:23,600 --> 00:19:26,000
the conference it's always just a little

485
00:19:26,000 --> 00:19:27,440
bit

486
00:19:27,440 --> 00:19:30,880
tricky so

487
00:19:30,880 --> 00:19:34,080
sorry don't have that tool open

488
00:19:34,080 --> 00:19:36,640
apparently so i'll just jump back into

489
00:19:36,640 --> 00:19:39,280
the presentation

490
00:19:39,280 --> 00:19:41,679
hopefully you guys didn't see too much

491
00:19:41,679 --> 00:19:42,559
but

492
00:19:42,559 --> 00:19:45,600
you can google any of these and just go

493
00:19:45,600 --> 00:19:49,120
to the home page and check them out

494
00:19:49,360 --> 00:19:52,880
sql map is perfect if you're

495
00:19:52,880 --> 00:19:55,600
specifically worried about sql injection

496
00:19:55,600 --> 00:19:56,320
attacks

497
00:19:56,320 --> 00:19:59,120
so it'll go through your app and find

498
00:19:59,120 --> 00:20:00,160
any places

499
00:20:00,160 --> 00:20:03,360
it thinks it could possibly

500
00:20:03,360 --> 00:20:06,159
do a sql injection attack on and it'll

501
00:20:06,159 --> 00:20:07,360
just try it

502
00:20:07,360 --> 00:20:09,600
and if it finds anything it'll give you

503
00:20:09,600 --> 00:20:13,360
a little report of what happened

504
00:20:13,760 --> 00:20:16,400
next is arachne and it's probably my

505
00:20:16,400 --> 00:20:17,840
personal favorite

506
00:20:17,840 --> 00:20:21,840
just because it does the vulnerability

507
00:20:21,840 --> 00:20:23,840
the vulnerability checks

508
00:20:23,840 --> 00:20:27,440
for your packages it does some

509
00:20:27,440 --> 00:20:31,120
automatic s cross site scripting checks

510
00:20:31,120 --> 00:20:34,559
on i think all of your input fields

511
00:20:34,559 --> 00:20:38,240
and it just does a lot of

512
00:20:38,240 --> 00:20:41,360
brute force attacking that also

513
00:20:41,360 --> 00:20:44,240
a hacker would do so this is a tool that

514
00:20:44,240 --> 00:20:45,760
a hacker would use

515
00:20:45,760 --> 00:20:48,159
to just test your website and see if

516
00:20:48,159 --> 00:20:49,840
they could get access to

517
00:20:49,840 --> 00:20:52,959
anything on it

518
00:20:53,360 --> 00:20:55,760
and then next is burp which is probably

519
00:20:55,760 --> 00:20:58,480
one of the more popular tools

520
00:20:58,480 --> 00:21:00,960
and it's another one of those tools

521
00:21:00,960 --> 00:21:02,240
where you can pretty much

522
00:21:02,240 --> 00:21:04,720
check for everything in the build phase

523
00:21:04,720 --> 00:21:05,520
if you haven't

524
00:21:05,520 --> 00:21:08,480
noticed you want to check for everything

525
00:21:08,480 --> 00:21:10,880
that you can possibly find

526
00:21:10,880 --> 00:21:13,280
that way you don't get an artifact you

527
00:21:13,280 --> 00:21:14,400
can't use

528
00:21:14,400 --> 00:21:17,600
you can send this report list back to

529
00:21:17,600 --> 00:21:18,799
the developers

530
00:21:18,799 --> 00:21:21,120
and they can work on security patches

531
00:21:21,120 --> 00:21:24,240
for whatever issues you find

532
00:21:24,240 --> 00:21:26,880
and another tool that helps to automate

533
00:21:26,880 --> 00:21:27,600
all of this

534
00:21:27,600 --> 00:21:30,720
is called gauntlet and it actually

535
00:21:30,720 --> 00:21:34,080
lets you use multiple

536
00:21:34,080 --> 00:21:37,520
tools to do security checks in this

537
00:21:37,520 --> 00:21:40,159
phase of it and in other phases of the

538
00:21:40,159 --> 00:21:40,880
devops

539
00:21:40,880 --> 00:21:44,080
process but with

540
00:21:44,080 --> 00:21:47,520
gauntlet you can use any of the tools

541
00:21:47,520 --> 00:21:48,880
you see

542
00:21:48,880 --> 00:21:52,240
and automate them in your

543
00:21:52,240 --> 00:21:55,600
pipeline so now that you know about some

544
00:21:55,600 --> 00:21:57,280
of the stuff you can use in the build

545
00:21:57,280 --> 00:21:58,400
phase let's

546
00:21:58,400 --> 00:22:01,600
go ahead and add one more because this

547
00:22:01,600 --> 00:22:03,280
is the one i'm going to show you in the

548
00:22:03,280 --> 00:22:04,320
demo

549
00:22:04,320 --> 00:22:06,960
so sneak is another one that i really

550
00:22:06,960 --> 00:22:07,360
like

551
00:22:07,360 --> 00:22:09,919
especially for javascript projects

552
00:22:09,919 --> 00:22:10,400
because

553
00:22:10,400 --> 00:22:13,200
it does pretty much the same thing as

554
00:22:13,200 --> 00:22:14,240
arachne

555
00:22:14,240 --> 00:22:17,280
but with a javascript focus

556
00:22:17,280 --> 00:22:20,480
so we'll see what that looks like in a

557
00:22:20,480 --> 00:22:21,760
real

558
00:22:21,760 --> 00:22:23,679
pipeline configuration a little bit

559
00:22:23,679 --> 00:22:26,240
later but now let's talk about some of

560
00:22:26,240 --> 00:22:26,640
the

561
00:22:26,640 --> 00:22:30,000
testing phase tools

562
00:22:30,159 --> 00:22:33,200
so the owasp dependency check is a

563
00:22:33,200 --> 00:22:34,240
really good one

564
00:22:34,240 --> 00:22:37,360
because it's going to go through

565
00:22:37,360 --> 00:22:40,960
and just recheck everything so

566
00:22:40,960 --> 00:22:43,760
this is particularly looking for things

567
00:22:43,760 --> 00:22:45,520
like

568
00:22:45,520 --> 00:22:48,240
packages that have been identified in

569
00:22:48,240 --> 00:22:52,559
the owasp10 and stuff like that

570
00:22:52,679 --> 00:22:55,200
retire.js is another one that's just

571
00:22:55,200 --> 00:22:56,240
gonna go through

572
00:22:56,240 --> 00:23:00,159
and look at packages that are known to

573
00:23:00,159 --> 00:23:01,200
be

574
00:23:01,200 --> 00:23:04,000
either vulnerable or they've been

575
00:23:04,000 --> 00:23:05,039
deprecated

576
00:23:05,039 --> 00:23:07,600
things like that and it's specific for

577
00:23:07,600 --> 00:23:08,640
just

578
00:23:08,640 --> 00:23:12,240
javascript applications

579
00:23:12,480 --> 00:23:14,320
then if you want to get into more

580
00:23:14,320 --> 00:23:16,240
enterprise level tools

581
00:23:16,240 --> 00:23:19,520
sonotype nexus and varicode are

582
00:23:19,520 --> 00:23:22,159
also really good tools for checking in

583
00:23:22,159 --> 00:23:24,000
this test phase

584
00:23:24,000 --> 00:23:27,520
so if you have a large application

585
00:23:27,520 --> 00:23:30,400
that multiple developer teams are

586
00:23:30,400 --> 00:23:31,280
working on

587
00:23:31,280 --> 00:23:34,480
with different deploy and release cycles

588
00:23:34,480 --> 00:23:36,720
one of the enterprise level tools might

589
00:23:36,720 --> 00:23:37,840
be a better choice

590
00:23:37,840 --> 00:23:41,120
just because they give you more fine

591
00:23:41,120 --> 00:23:44,400
control over how and when

592
00:23:44,400 --> 00:23:48,159
tests are executed and they let you

593
00:23:48,159 --> 00:23:50,720
check for specific security things

594
00:23:50,720 --> 00:23:51,840
regardless of

595
00:23:51,840 --> 00:23:53,520
what program and language your

596
00:23:53,520 --> 00:23:56,559
application is in

597
00:23:56,799 --> 00:23:59,600
then in the delivery phase this one is a

598
00:23:59,600 --> 00:24:00,640
lot smaller

599
00:24:00,640 --> 00:24:03,279
and a lot of people just lump it in into

600
00:24:03,279 --> 00:24:04,320
the deploy

601
00:24:04,320 --> 00:24:07,840
phase that's why you just see cicd

602
00:24:07,840 --> 00:24:11,200
because the d in cd

603
00:24:11,200 --> 00:24:14,320
stands for delivery and deploy

604
00:24:14,320 --> 00:24:17,200
but not all organizations follow that

605
00:24:17,200 --> 00:24:18,640
process

606
00:24:18,640 --> 00:24:22,000
even though most of them really do so

607
00:24:22,000 --> 00:24:25,039
the delivery phase is when you're

608
00:24:25,039 --> 00:24:27,440
taking the artifact you've built after

609
00:24:27,440 --> 00:24:29,279
it's gone through all of those unit

610
00:24:29,279 --> 00:24:30,159
tests

611
00:24:30,159 --> 00:24:33,360
and you deploy it to other environments

612
00:24:33,360 --> 00:24:35,039
that aren't production

613
00:24:35,039 --> 00:24:37,679
so this is when you're deploying to

614
00:24:37,679 --> 00:24:38,480
staging

615
00:24:38,480 --> 00:24:42,159
or to a qa environment it

616
00:24:42,159 --> 00:24:46,000
should deploy to environments that are

617
00:24:46,000 --> 00:24:49,200
close to pride and maybe you have

618
00:24:49,200 --> 00:24:51,760
specific things that you test for

619
00:24:51,760 --> 00:24:55,440
in each environment but either way

620
00:24:55,440 --> 00:24:58,640
you can add a few different things to

621
00:24:58,640 --> 00:24:59,679
this phase

622
00:24:59,679 --> 00:25:02,799
that'll help you get through some

623
00:25:02,799 --> 00:25:04,320
security testing

624
00:25:04,320 --> 00:25:07,520
faster so the first

625
00:25:07,520 --> 00:25:10,559
tool is actually not a tool

626
00:25:10,559 --> 00:25:13,279
it's a pdf that walks you through some

627
00:25:13,279 --> 00:25:14,000
of the steps

628
00:25:14,000 --> 00:25:16,080
you can take to make sure your

629
00:25:16,080 --> 00:25:18,720
application is ready for an audit

630
00:25:18,720 --> 00:25:21,760
so if you have an app that's

631
00:25:21,760 --> 00:25:24,960
in medicine or you take

632
00:25:24,960 --> 00:25:27,919
customer billing information you might

633
00:25:27,919 --> 00:25:29,840
have to comply with

634
00:25:29,840 --> 00:25:33,600
hipaa or pci or if you're running

635
00:25:33,600 --> 00:25:36,799
ads you might need to deal with the gdpr

636
00:25:36,799 --> 00:25:40,000
compliance these are some tools that

637
00:25:40,000 --> 00:25:40,799
help you

638
00:25:40,799 --> 00:25:43,520
figure out the process for doing that as

639
00:25:43,520 --> 00:25:46,000
you get closer to production

640
00:25:46,000 --> 00:25:48,640
so chef has a really really good tool

641
00:25:48,640 --> 00:25:49,760
for this too

642
00:25:49,760 --> 00:25:53,039
and it's called inspec and the way that

643
00:25:53,039 --> 00:25:57,039
they describe it it's like security as

644
00:25:57,039 --> 00:26:00,320
code or compliance as code and it lets

645
00:26:00,320 --> 00:26:01,279
you

646
00:26:01,279 --> 00:26:04,640
it basically lets you reassure

647
00:26:04,640 --> 00:26:07,760
yourself your team and the company that

648
00:26:07,760 --> 00:26:08,159
when

649
00:26:08,159 --> 00:26:11,679
this application goes to production

650
00:26:11,679 --> 00:26:14,080
you don't have any worries about

651
00:26:14,080 --> 00:26:14,960
compliance

652
00:26:14,960 --> 00:26:17,520
to whatever regulations your app is

653
00:26:17,520 --> 00:26:20,158
governed by

654
00:26:20,799 --> 00:26:24,159
and then lastly we get to the deploy

655
00:26:24,159 --> 00:26:26,720
phase so this is when you've gone

656
00:26:26,720 --> 00:26:28,080
through all of the build

657
00:26:28,080 --> 00:26:30,240
checks this is when you've tested

658
00:26:30,240 --> 00:26:31,279
everything

659
00:26:31,279 --> 00:26:34,480
because we all love unit tests so much

660
00:26:34,480 --> 00:26:37,600
this is when you've done the soft deploy

661
00:26:37,600 --> 00:26:38,559
to staging

662
00:26:38,559 --> 00:26:41,679
and qa where you can check for things

663
00:26:41,679 --> 00:26:43,840
like you can run your integration test

664
00:26:43,840 --> 00:26:46,960
to see how your third-party services

665
00:26:46,960 --> 00:26:50,720
are working with your tool

666
00:26:50,720 --> 00:26:54,400
this is where you check for those

667
00:26:54,400 --> 00:26:58,159
last minute things in the deploy phase

668
00:26:58,159 --> 00:27:00,720
you are testing directly against

669
00:27:00,720 --> 00:27:01,840
production

670
00:27:01,840 --> 00:27:04,960
so you're trying to make sure that your

671
00:27:04,960 --> 00:27:08,400
production application is as secure as

672
00:27:08,400 --> 00:27:10,480
it can possibly be

673
00:27:10,480 --> 00:27:13,039
so this is when a lot of companies bring

674
00:27:13,039 --> 00:27:13,679
in pin

675
00:27:13,679 --> 00:27:16,640
testers and try to have hackathons to

676
00:27:16,640 --> 00:27:17,120
see

677
00:27:17,120 --> 00:27:21,520
if there are any um security holes

678
00:27:21,520 --> 00:27:24,640
but a few services that

679
00:27:24,640 --> 00:27:27,039
one of you all could even go sign up for

680
00:27:27,039 --> 00:27:28,080
right now would be

681
00:27:28,080 --> 00:27:32,080
hacker one and bug crowd these are just

682
00:27:32,080 --> 00:27:35,760
communities where companies put bounties

683
00:27:35,760 --> 00:27:39,120
out for anybody that can find some kind

684
00:27:39,120 --> 00:27:41,600
of security flaw

685
00:27:41,600 --> 00:27:43,760
so if you're interested in trying to

686
00:27:43,760 --> 00:27:44,720
hack

687
00:27:44,720 --> 00:27:46,799
i don't know i've seen some from

688
00:27:46,799 --> 00:27:48,159
microsoft i saw

689
00:27:48,159 --> 00:27:51,520
one really big one from apple but

690
00:27:51,520 --> 00:27:53,760
if you're not interested in the big name

691
00:27:53,760 --> 00:27:55,039
companies

692
00:27:55,039 --> 00:27:58,080
you'll find a lot of other companies

693
00:27:58,080 --> 00:28:01,840
that will give you exposure to how

694
00:28:01,840 --> 00:28:02,559
hackers

695
00:28:02,559 --> 00:28:05,919
really work or you can use one of these

696
00:28:05,919 --> 00:28:08,320
services to get somebody to try to hack

697
00:28:08,320 --> 00:28:09,120
your app

698
00:28:09,120 --> 00:28:11,520
and see if you've made all of the

699
00:28:11,520 --> 00:28:15,200
security fixes you needed to

700
00:28:15,679 --> 00:28:18,320
and something else you can use is called

701
00:28:18,320 --> 00:28:19,919
signal sciences

702
00:28:19,919 --> 00:28:23,520
and it's a different service so

703
00:28:23,520 --> 00:28:25,840
what this one does is kind of more of a

704
00:28:25,840 --> 00:28:27,039
monitoring thing

705
00:28:27,039 --> 00:28:30,240
it makes sure that nothing

706
00:28:30,240 --> 00:28:32,559
you're not getting any weird hacky

707
00:28:32,559 --> 00:28:35,200
activity

708
00:28:35,279 --> 00:28:37,600
and then threat stack is pretty similar

709
00:28:37,600 --> 00:28:39,600
to signal sciences

710
00:28:39,600 --> 00:28:42,559
it just makes sure that if there are any

711
00:28:42,559 --> 00:28:43,679
threats

712
00:28:43,679 --> 00:28:46,880
which it's actively checking for it will

713
00:28:46,880 --> 00:28:48,880
send notifications to

714
00:28:48,880 --> 00:28:51,120
your development team to your devops

715
00:28:51,120 --> 00:28:53,760
team to anybody that needs to know

716
00:28:53,760 --> 00:28:56,000
hey there's something that needs to be

717
00:28:56,000 --> 00:28:59,279
fixed because this is a security hole

718
00:28:59,279 --> 00:29:02,159
but now we'll talk about some of the

719
00:29:02,159 --> 00:29:03,760
other things you can do

720
00:29:03,760 --> 00:29:07,120
since you've seen the tools

721
00:29:07,520 --> 00:29:10,080
keep your user permissions up to date

722
00:29:10,080 --> 00:29:11,440
please

723
00:29:11,440 --> 00:29:14,480
there have been a few old clients that i

724
00:29:14,480 --> 00:29:15,760
won't name

725
00:29:15,760 --> 00:29:18,720
that even though i haven't worked for

726
00:29:18,720 --> 00:29:20,960
them for three or four years

727
00:29:20,960 --> 00:29:24,320
i still have admin permissions

728
00:29:24,320 --> 00:29:26,720
to pretty much everything i did when i

729
00:29:26,720 --> 00:29:28,080
worked there

730
00:29:28,080 --> 00:29:30,640
i'm not sure if they've deleted it since

731
00:29:30,640 --> 00:29:32,720
because i'm a little bit scared to go

732
00:29:32,720 --> 00:29:34,240
try and log in

733
00:29:34,240 --> 00:29:37,200
but if you have new people come on the

734
00:29:37,200 --> 00:29:37,760
team

735
00:29:37,760 --> 00:29:39,760
make sure you give them the permissions

736
00:29:39,760 --> 00:29:42,159
they need as soon as they start

737
00:29:42,159 --> 00:29:44,000
and when you have people leaving the

738
00:29:44,000 --> 00:29:46,399
team make sure you delete those

739
00:29:46,399 --> 00:29:47,120
permissions

740
00:29:47,120 --> 00:29:49,279
as soon as you know they don't need them

741
00:29:49,279 --> 00:29:51,760
anymore

742
00:29:52,640 --> 00:29:55,840
and try to pay attention to the security

743
00:29:55,840 --> 00:29:58,320
patches from the services you use

744
00:29:58,320 --> 00:30:01,440
because those are third-party services

745
00:30:01,440 --> 00:30:03,840
you don't control their code you can

746
00:30:03,840 --> 00:30:05,279
only

747
00:30:05,279 --> 00:30:08,720
do what they let you do so when they

748
00:30:08,720 --> 00:30:09,120
push

749
00:30:09,120 --> 00:30:12,159
a security fix in a new version you want

750
00:30:12,159 --> 00:30:13,520
to make sure that you

751
00:30:13,520 --> 00:30:16,960
update to that version even if it causes

752
00:30:16,960 --> 00:30:19,279
some breaking changes to your code

753
00:30:19,279 --> 00:30:22,880
because you rather have to deal with

754
00:30:22,880 --> 00:30:26,799
a few broken i don't know a few broken

755
00:30:26,799 --> 00:30:30,080
components or maybe some api responses

756
00:30:30,080 --> 00:30:32,640
don't return like you expected but it's

757
00:30:32,640 --> 00:30:33,120
much

758
00:30:33,120 --> 00:30:35,919
better to deal with that than to deal

759
00:30:35,919 --> 00:30:37,840
with being a headline on the news

760
00:30:37,840 --> 00:30:38,320
because

761
00:30:38,320 --> 00:30:40,880
all of your customers data is leaked to

762
00:30:40,880 --> 00:30:43,760
who knows who

763
00:30:45,120 --> 00:30:47,200
again make sure you don't have

764
00:30:47,200 --> 00:30:49,760
unnecessary ports open

765
00:30:49,760 --> 00:30:52,320
there are so many port scanning tools

766
00:30:52,320 --> 00:30:54,559
available that are just free

767
00:30:54,559 --> 00:30:57,360
and hackers really do use those to get

768
00:30:57,360 --> 00:30:59,919
access to your servers

769
00:30:59,919 --> 00:31:02,480
don't don't make it that easy for them

770
00:31:02,480 --> 00:31:04,000
because you probably aren't

771
00:31:04,000 --> 00:31:06,960
watching an open port that you don't

772
00:31:06,960 --> 00:31:09,440
know about

773
00:31:10,080 --> 00:31:13,760
another thing is that whatever cicd

774
00:31:13,760 --> 00:31:16,320
tool or pipeline thing you choose to

775
00:31:16,320 --> 00:31:17,519
build in

776
00:31:17,519 --> 00:31:20,559
check out their security features like

777
00:31:20,559 --> 00:31:23,760
do they have tools that are built in

778
00:31:23,760 --> 00:31:26,000
that help you run some of these things

779
00:31:26,000 --> 00:31:27,120
automatically

780
00:31:27,120 --> 00:31:29,679
so that you don't have to add them or do

781
00:31:29,679 --> 00:31:30,840
they have

782
00:31:30,840 --> 00:31:34,399
different packages or different

783
00:31:34,399 --> 00:31:37,760
plans that include security audits

784
00:31:37,760 --> 00:31:41,039
so be mindful of what you're using to

785
00:31:41,039 --> 00:31:43,120
build your pipeline in because it might

786
00:31:43,120 --> 00:31:47,840
have everything that you need

787
00:31:48,159 --> 00:31:52,240
then you can also use an iast

788
00:31:52,240 --> 00:31:55,600
securities tool to push any

789
00:31:55,600 --> 00:31:58,480
type of security issues it finds to a

790
00:31:58,480 --> 00:31:59,600
tracking system

791
00:31:59,600 --> 00:32:03,519
so maybe during your testing phase

792
00:32:03,519 --> 00:32:08,000
it finds out that you have this really

793
00:32:08,000 --> 00:32:11,200
really deeply hidden input field

794
00:32:11,200 --> 00:32:14,720
that does allow for cross-site scripting

795
00:32:14,720 --> 00:32:17,279
as soon as it finds that it's gonna take

796
00:32:17,279 --> 00:32:18,320
that issue

797
00:32:18,320 --> 00:32:21,360
and push it into jira or

798
00:32:21,360 --> 00:32:24,799
it'll make a github issue or it'll send

799
00:32:24,799 --> 00:32:26,159
a text message

800
00:32:26,159 --> 00:32:29,279
whatever it does use something that

801
00:32:29,279 --> 00:32:32,320
actually lets you know there's a problem

802
00:32:32,320 --> 00:32:34,720
it's fine if you have to skip the

803
00:32:34,720 --> 00:32:36,080
security test

804
00:32:36,080 --> 00:32:38,320
like if you don't want to stop the

805
00:32:38,320 --> 00:32:40,480
deploy to production because of a

806
00:32:40,480 --> 00:32:42,559
security issue

807
00:32:42,559 --> 00:32:45,760
but you should have a way in place to

808
00:32:45,760 --> 00:32:46,159
get

809
00:32:46,159 --> 00:32:48,880
all of this information to your

810
00:32:48,880 --> 00:32:51,360
developers or the respective team that

811
00:32:51,360 --> 00:32:54,080
handles them

812
00:32:55,039 --> 00:32:57,840
then make sure everything is encrypted

813
00:32:57,840 --> 00:32:58,159
so

814
00:32:58,159 --> 00:33:00,320
at this point i'm pretty sure everyone's

815
00:33:00,320 --> 00:33:02,880
using https

816
00:33:02,880 --> 00:33:05,360
and that helps a lot but behind the

817
00:33:05,360 --> 00:33:06,320
scenes

818
00:33:06,320 --> 00:33:08,720
if you do have any secrets or

819
00:33:08,720 --> 00:33:10,880
environmental variables

820
00:33:10,880 --> 00:33:13,679
make sure that they're being encrypted

821
00:33:13,679 --> 00:33:14,159
there

822
00:33:14,159 --> 00:33:17,600
have been so many stories about

823
00:33:17,600 --> 00:33:20,000
just different databases getting hacked

824
00:33:20,000 --> 00:33:20,640
because

825
00:33:20,640 --> 00:33:24,000
all of the passwords were stored in just

826
00:33:24,000 --> 00:33:27,039
plain text you want to at least

827
00:33:27,039 --> 00:33:30,080
make sure that that sensitive data is

828
00:33:30,080 --> 00:33:31,279
encrypted

829
00:33:31,279 --> 00:33:36,399
in a place that is not easily accessible

830
00:33:37,039 --> 00:33:39,679
then if you want to stay on top of the

831
00:33:39,679 --> 00:33:42,320
really really big security issues

832
00:33:42,320 --> 00:33:45,360
just follow the oasp top 10 list

833
00:33:45,360 --> 00:33:49,360
i think the last time i saw it

834
00:33:49,360 --> 00:33:51,600
i want to say cross-site scripting was

835
00:33:51,600 --> 00:33:52,960
still one of those

836
00:33:52,960 --> 00:33:56,799
top 10 issues that and sequel injection

837
00:33:56,799 --> 00:33:59,279
which is kind of wild because we've

838
00:33:59,279 --> 00:34:00,320
known about those

839
00:34:00,320 --> 00:34:03,120
issues for so long but they're just hard

840
00:34:03,120 --> 00:34:04,399
to guard against

841
00:34:04,399 --> 00:34:07,519
so make sure that at the bare minimum

842
00:34:07,519 --> 00:34:10,639
your pipeline tries to address

843
00:34:10,639 --> 00:34:13,599
all of those top 10 issues if they apply

844
00:34:13,599 --> 00:34:16,720
to your application

845
00:34:17,359 --> 00:34:19,679
and then use the same tools that the

846
00:34:19,679 --> 00:34:21,119
hackers are using

847
00:34:21,119 --> 00:34:24,399
there's no better way to figure out how

848
00:34:24,399 --> 00:34:27,839
secure your application is than to use

849
00:34:27,839 --> 00:34:30,800
the exact same thing that hackers are

850
00:34:30,800 --> 00:34:31,520
going to use

851
00:34:31,520 --> 00:34:34,960
to try to get in so when you run across

852
00:34:34,960 --> 00:34:35,599
a tool

853
00:34:35,599 --> 00:34:37,839
or you have a hacker friend that tells

854
00:34:37,839 --> 00:34:40,320
you about this cool thing they found

855
00:34:40,320 --> 00:34:42,719
go use it see if it's something that you

856
00:34:42,719 --> 00:34:45,520
can integrate into your ci cd pipeline

857
00:34:45,520 --> 00:34:46,480
somehow

858
00:34:46,480 --> 00:34:49,280
because regardless of whether you do or

859
00:34:49,280 --> 00:34:50,399
you don't

860
00:34:50,399 --> 00:34:53,040
it's good to know about them so that you

861
00:34:53,040 --> 00:34:55,359
can try and prepare your code

862
00:34:55,359 --> 00:34:57,680
and your infrastructure for any attacks

863
00:34:57,680 --> 00:34:59,920
that could come

864
00:34:59,920 --> 00:35:03,920
and now we're going to get into the real

865
00:35:03,920 --> 00:35:07,440
world application of this

866
00:35:07,440 --> 00:35:09,680
so i'm gonna show you a little code and

867
00:35:09,680 --> 00:35:11,440
i will go ahead and say this

868
00:35:11,440 --> 00:35:14,480
is like just some skeleton code

869
00:35:14,480 --> 00:35:16,720
because i can't show you the super

870
00:35:16,720 --> 00:35:18,640
sensitive information

871
00:35:18,640 --> 00:35:22,160
that does go into a config file but

872
00:35:22,160 --> 00:35:24,480
basically in this case we're just going

873
00:35:24,480 --> 00:35:26,079
to pretend we're deploying

874
00:35:26,079 --> 00:35:28,839
some kind of javascript app to

875
00:35:28,839 --> 00:35:31,119
production and we're using

876
00:35:31,119 --> 00:35:35,920
sneak as our security check

877
00:35:35,920 --> 00:35:38,640
but basically the way that this works in

878
00:35:38,640 --> 00:35:40,160
circle ci

879
00:35:40,160 --> 00:35:43,760
is you get this sneak orb and

880
00:35:43,760 --> 00:35:47,760
you use it right before

881
00:35:47,760 --> 00:35:50,880
you get into all of the build

882
00:35:50,880 --> 00:35:54,160
phase things so in this case

883
00:35:54,160 --> 00:35:57,359
we're checking for any

884
00:35:57,359 --> 00:36:01,119
high severity vulnerabilities

885
00:36:01,119 --> 00:36:03,040
so this is going through and checking

886
00:36:03,040 --> 00:36:05,280
all of our packages

887
00:36:05,280 --> 00:36:08,320
to make sure that none of them have this

888
00:36:08,320 --> 00:36:11,359
super high severity threshold and

889
00:36:11,359 --> 00:36:14,960
if they do then we're not

890
00:36:14,960 --> 00:36:17,520
going to stop the build because it

891
00:36:17,520 --> 00:36:19,760
doesn't fail whenever it finds an

892
00:36:19,760 --> 00:36:23,200
issue but we will know

893
00:36:23,200 --> 00:36:26,640
that if they find if it finds a package

894
00:36:26,640 --> 00:36:28,880
that has a high security threat

895
00:36:28,880 --> 00:36:32,480
it will let us know like in the console

896
00:36:32,480 --> 00:36:35,359
it'll output some stuff for us

897
00:36:35,359 --> 00:36:38,240
and once it's gone through this scan you

898
00:36:38,240 --> 00:36:40,160
just continue through

899
00:36:40,160 --> 00:36:42,960
if you want to include more tests a good

900
00:36:42,960 --> 00:36:45,520
place would be after the build

901
00:36:45,520 --> 00:36:48,800
or even up here before you run more

902
00:36:48,800 --> 00:36:49,839
tests

903
00:36:49,839 --> 00:36:52,079
just to see if there's any changes you

904
00:36:52,079 --> 00:36:53,680
need to make in the code

905
00:36:53,680 --> 00:36:56,160
before it gets further into the deploy

906
00:36:56,160 --> 00:36:56,960
process

907
00:36:56,960 --> 00:36:59,119
and it starts triggering other nodes to

908
00:36:59,119 --> 00:37:01,680
execute

909
00:37:01,760 --> 00:37:04,320
so that was circle now we're going to

910
00:37:04,320 --> 00:37:07,760
look at an example in conductor

911
00:37:07,760 --> 00:37:09,520
this one is a little bit different from

912
00:37:09,520 --> 00:37:11,280
the others because

913
00:37:11,280 --> 00:37:13,920
it doesn't use yaml you can actually

914
00:37:13,920 --> 00:37:15,359
write your pipeline in

915
00:37:15,359 --> 00:37:18,400
python which honestly is really awesome

916
00:37:18,400 --> 00:37:20,400
because you can run unit tests

917
00:37:20,400 --> 00:37:23,440
on your pipeline like there's no other

918
00:37:23,440 --> 00:37:25,440
tool where you can do that

919
00:37:25,440 --> 00:37:28,880
so on top of making sure that your

920
00:37:28,880 --> 00:37:32,000
application is secure you can make sure

921
00:37:32,000 --> 00:37:35,280
that your deploy pipeline is

922
00:37:35,280 --> 00:37:37,359
still up to the standards you expect it

923
00:37:37,359 --> 00:37:39,760
still has all of the pieces you need

924
00:37:39,760 --> 00:37:42,000
and you can write your unit test with

925
00:37:42,000 --> 00:37:43,760
python like you would for any other

926
00:37:43,760 --> 00:37:45,440
piece of code

927
00:37:45,440 --> 00:37:48,640
but in here you see where we install

928
00:37:48,640 --> 00:37:51,839
like we set up our container then we go

929
00:37:51,839 --> 00:37:54,960
in here and we make our different nodes

930
00:37:54,960 --> 00:37:58,000
where we run our install phase

931
00:37:58,000 --> 00:38:01,280
and we go ahead and do our sneak test

932
00:38:01,280 --> 00:38:03,440
and that's gonna return whether there's

933
00:38:03,440 --> 00:38:05,839
any vulnerabilities or not

934
00:38:05,839 --> 00:38:08,480
but after that we go ahead and run our

935
00:38:08,480 --> 00:38:09,280
regular

936
00:38:09,280 --> 00:38:12,000
unit tests then we go through the build

937
00:38:12,000 --> 00:38:12,480
again

938
00:38:12,480 --> 00:38:15,280
you can do more tests here or you can do

939
00:38:15,280 --> 00:38:16,880
more tests before

940
00:38:16,880 --> 00:38:19,359
just as long as you test before the

941
00:38:19,359 --> 00:38:21,839
artifacts are deployed

942
00:38:21,839 --> 00:38:24,079
but the cool thing about conducto is

943
00:38:24,079 --> 00:38:27,599
that you can just see everything

944
00:38:27,599 --> 00:38:29,440
just how everything is working you can

945
00:38:29,440 --> 00:38:31,200
define what goes

946
00:38:31,200 --> 00:38:34,079
into your node and you can see the

947
00:38:34,079 --> 00:38:36,320
different steps in your pipeline really

948
00:38:36,320 --> 00:38:38,079
easily

949
00:38:38,079 --> 00:38:40,079
but that's how you would include

950
00:38:40,079 --> 00:38:42,000
security testing

951
00:38:42,000 --> 00:38:46,000
in conductor so now the last one we'll

952
00:38:46,000 --> 00:38:46,560
look at

953
00:38:46,560 --> 00:38:50,240
is travis ci which is really similar to

954
00:38:50,240 --> 00:38:53,839
circle but slightly different in this

955
00:38:53,839 --> 00:38:54,560
case

956
00:38:54,560 --> 00:38:57,599
we're still deploying some kind of crazy

957
00:38:57,599 --> 00:39:01,760
node.js app and we're going to go ahead

958
00:39:01,760 --> 00:39:02,400
and do

959
00:39:02,400 --> 00:39:05,040
whatever install stuff needs to happen

960
00:39:05,040 --> 00:39:07,280
but then we get here to the sneak

961
00:39:07,280 --> 00:39:11,599
test and we've added a different

962
00:39:11,599 --> 00:39:14,320
sneak command here and basically what

963
00:39:14,320 --> 00:39:14,640
this

964
00:39:14,640 --> 00:39:17,920
does is if there are any vulnerabilities

965
00:39:17,920 --> 00:39:18,640
found

966
00:39:18,640 --> 00:39:21,760
it tries to fix them

967
00:39:21,760 --> 00:39:24,960
basically but this

968
00:39:24,960 --> 00:39:28,000
is how you would include sneak testing

969
00:39:28,000 --> 00:39:32,560
in a travis ci pipeline

970
00:39:32,720 --> 00:39:35,280
so i know that those were really short

971
00:39:35,280 --> 00:39:36,880
simple examples

972
00:39:36,880 --> 00:39:40,320
but i wanted to show you that including

973
00:39:40,320 --> 00:39:40,720
these

974
00:39:40,720 --> 00:39:43,119
tests in your pipeline doesn't have to

975
00:39:43,119 --> 00:39:44,880
be super complicated

976
00:39:44,880 --> 00:39:48,000
it is often as easy as adding an

977
00:39:48,000 --> 00:39:51,040
extra command into one of the nodes

978
00:39:51,040 --> 00:39:54,160
so the main thing that happens is when

979
00:39:54,160 --> 00:39:54,480
you

980
00:39:54,480 --> 00:39:57,359
add these commands is it changes the run

981
00:39:57,359 --> 00:39:57,839
time

982
00:39:57,839 --> 00:40:00,240
for the builds because you have extra

983
00:40:00,240 --> 00:40:01,920
tests to run

984
00:40:01,920 --> 00:40:04,800
so you have to find that balance of

985
00:40:04,800 --> 00:40:06,880
adding security tests

986
00:40:06,880 --> 00:40:09,680
versus how long it should take a bill to

987
00:40:09,680 --> 00:40:10,560
run

988
00:40:10,560 --> 00:40:13,760
so the common metric

989
00:40:13,760 --> 00:40:16,400
for how long a bill should be is the

990
00:40:16,400 --> 00:40:18,319
coffee test

991
00:40:18,319 --> 00:40:21,119
can your pipeline finish running in the

992
00:40:21,119 --> 00:40:23,680
time it takes you to go make a fresh cup

993
00:40:23,680 --> 00:40:24,800
of coffee

994
00:40:24,800 --> 00:40:27,839
if it does then it's probably fine if it

995
00:40:27,839 --> 00:40:29,839
takes longer than that

996
00:40:29,839 --> 00:40:32,160
that's where that balance really comes

997
00:40:32,160 --> 00:40:34,640
in because you'll have to figure out

998
00:40:34,640 --> 00:40:37,280
whether it's worth the extra time to run

999
00:40:37,280 --> 00:40:38,079
those tests

1000
00:40:38,079 --> 00:40:40,319
or not because that's going to slow down

1001
00:40:40,319 --> 00:40:41,440
your time to

1002
00:40:41,440 --> 00:40:45,040
production so i'm going to go ahead and

1003
00:40:45,040 --> 00:40:45,359
wrap

1004
00:40:45,359 --> 00:40:48,640
up with some key takeaways

1005
00:40:48,640 --> 00:40:51,680
keep your secret safe is just like those

1006
00:40:51,680 --> 00:40:53,760
secrets you're hiding from childhood you

1007
00:40:53,760 --> 00:40:55,760
would never tell your parents

1008
00:40:55,760 --> 00:40:58,160
you don't want those things in version

1009
00:40:58,160 --> 00:40:59,040
control

1010
00:40:59,040 --> 00:41:00,880
where people can just come through and

1011
00:41:00,880 --> 00:41:03,680
do a quick search and find it

1012
00:41:03,680 --> 00:41:07,119
keep those secrets encrypted in maybe

1013
00:41:07,119 --> 00:41:10,160
an environment file or

1014
00:41:10,160 --> 00:41:13,200
hopefully inside of the cicd

1015
00:41:13,200 --> 00:41:16,240
tool you're using so like in conducto or

1016
00:41:16,240 --> 00:41:18,319
in circle ci just go in there

1017
00:41:18,319 --> 00:41:20,960
and define your environment variables

1018
00:41:20,960 --> 00:41:22,240
and they should be

1019
00:41:22,240 --> 00:41:24,880
good to go as long as nobody hacks into

1020
00:41:24,880 --> 00:41:27,680
those accounts

1021
00:41:27,839 --> 00:41:30,240
and then whenever you do some kind of

1022
00:41:30,240 --> 00:41:32,560
major update to a project whether it's

1023
00:41:32,560 --> 00:41:34,480
adding another feature

1024
00:41:34,480 --> 00:41:37,839
or you're adding another service

1025
00:41:37,839 --> 00:41:39,839
go through your pipelines and just do a

1026
00:41:39,839 --> 00:41:42,240
quick audit of the configs

1027
00:41:42,240 --> 00:41:45,280
do you see any nodes that

1028
00:41:45,280 --> 00:41:48,560
aren't being used anymore that happens

1029
00:41:48,560 --> 00:41:52,079
a lot when you're switching to different

1030
00:41:52,079 --> 00:41:56,400
services or you're updating your code

1031
00:41:57,280 --> 00:42:00,560
and then again check that your

1032
00:42:00,560 --> 00:42:03,280
application tools have been patched for

1033
00:42:03,280 --> 00:42:06,400
any known vulnerabilities they're going

1034
00:42:06,400 --> 00:42:08,720
to check for this low hanging fruit

1035
00:42:08,720 --> 00:42:12,960
first so make sure that you're covered

1036
00:42:12,960 --> 00:42:15,440
and lastly don't be afraid to try new

1037
00:42:15,440 --> 00:42:16,640
tools

1038
00:42:16,640 --> 00:42:19,200
sometimes the ones you pick when you

1039
00:42:19,200 --> 00:42:21,119
initially start a project

1040
00:42:21,119 --> 00:42:23,280
just don't grow with you in the way that

1041
00:42:23,280 --> 00:42:25,040
you thought it would

1042
00:42:25,040 --> 00:42:28,079
and that's okay there are no really

1043
00:42:28,079 --> 00:42:31,200
right answers for the tools you should

1044
00:42:31,200 --> 00:42:33,040
use or the devops process

1045
00:42:33,040 --> 00:42:36,560
you should go through just do what works

1046
00:42:36,560 --> 00:42:37,359
the best

1047
00:42:37,359 --> 00:42:40,319
for your application and your company

1048
00:42:40,319 --> 00:42:40,720
but

1049
00:42:40,720 --> 00:42:43,440
always try to include some kind of

1050
00:42:43,440 --> 00:42:45,040
security check

1051
00:42:45,040 --> 00:42:48,240
in your pipeline and i hope that those

1052
00:42:48,240 --> 00:42:50,560
examples really helped explain some

1053
00:42:50,560 --> 00:42:51,440
stuff

1054
00:42:51,440 --> 00:42:54,319
and maybe clear up where you add those

1055
00:42:54,319 --> 00:42:56,400
tests in your pipeline

1056
00:42:56,400 --> 00:42:59,200
and i really hope this was a good talk

1057
00:42:59,200 --> 00:42:59,920
for you all

1058
00:42:59,920 --> 00:43:02,480
if you have any questions for me you can

1059
00:43:02,480 --> 00:43:03,520
always

1060
00:43:03,520 --> 00:43:06,079
get in contact with me on twitter at

1061
00:43:06,079 --> 00:43:07,599
flippedcoding

1062
00:43:07,599 --> 00:43:11,680
or on twitter at conductotech either one

1063
00:43:11,680 --> 00:43:12,400
of those

1064
00:43:12,400 --> 00:43:15,839
i'm available and yeah

1065
00:43:15,839 --> 00:43:18,319
security and pipelines is important

1066
00:43:18,319 --> 00:43:19,359
because you can just

1067
00:43:19,359 --> 00:43:23,680
automate it who doesn't like more

1068
00:43:24,839 --> 00:43:27,839
automation

1069
00:43:45,599 --> 00:43:48,400
well i promised you an interesting talk

1070
00:43:48,400 --> 00:43:49,280
and in fact this

1071
00:43:49,280 --> 00:43:52,160
was such an interesting talk and now i

1072
00:43:52,160 --> 00:43:54,240
have for a live q a with

1073
00:43:54,240 --> 00:43:58,880
me uh militia welcome to nothing con

1074
00:43:58,880 --> 00:44:01,760
hey i hope you guys like the talk do you

1075
00:44:01,760 --> 00:44:04,400
have any questions for me

1076
00:44:04,400 --> 00:44:06,960
well we have over 200 people in the

1077
00:44:06,960 --> 00:44:07,599
audience

1078
00:44:07,599 --> 00:44:09,599
so if you have any questions feel free

1079
00:44:09,599 --> 00:44:10,800
to ask them

1080
00:44:10,800 --> 00:44:13,599
same as we did before using this uh

1081
00:44:13,599 --> 00:44:14,400
twitch

1082
00:44:14,400 --> 00:44:17,520
chat or you can also do it uh using the

1083
00:44:17,520 --> 00:44:19,359
discord server i see some people are

1084
00:44:19,359 --> 00:44:22,319
actually writing on discord

1085
00:44:22,319 --> 00:44:24,319
while we wait for these questions to to

1086
00:44:24,319 --> 00:44:26,160
pop up um

1087
00:44:26,160 --> 00:44:28,160
i was wondering and this is kind of a

1088
00:44:28,160 --> 00:44:29,359
personal questions

1089
00:44:29,359 --> 00:44:31,359
but do you really have a master's degree

1090
00:44:31,359 --> 00:44:32,720
in mechanical and

1091
00:44:32,720 --> 00:44:34,960
aerospace engineering i mean that is so

1092
00:44:34,960 --> 00:44:37,200
interesting we didn't talk about this

1093
00:44:37,200 --> 00:44:40,000
on our previous meetings but i mean wow

1094
00:44:40,000 --> 00:44:40,720
tell us more

1095
00:44:40,720 --> 00:44:43,839
more about it it's so interesting so

1096
00:44:43,839 --> 00:44:44,800
yeah i have

1097
00:44:44,800 --> 00:44:47,359
my master's in mechanical and aerospace

1098
00:44:47,359 --> 00:44:48,079
engineering

1099
00:44:48,079 --> 00:44:51,119
and i did my thesis project on an

1100
00:44:51,119 --> 00:44:51,839
autonomous

1101
00:44:51,839 --> 00:44:54,640
golf cart and teaching it how to

1102
00:44:54,640 --> 00:44:55,599
interpret

1103
00:44:55,599 --> 00:44:58,880
like pedestrian and passenger intent

1104
00:44:58,880 --> 00:45:02,480
and based on how people were moving in

1105
00:45:02,480 --> 00:45:05,359
like the algorithms we used we were able

1106
00:45:05,359 --> 00:45:07,520
to get the golf cart to like

1107
00:45:07,520 --> 00:45:09,680
move around people in non-threatening

1108
00:45:09,680 --> 00:45:10,880
ways

1109
00:45:10,880 --> 00:45:14,079
it was fun wow oh my god i mean that

1110
00:45:14,079 --> 00:45:16,640
was like my dream job when i was a kid

1111
00:45:16,640 --> 00:45:17,680
so i kind of

1112
00:45:17,680 --> 00:45:21,118
envy you where did you get it

1113
00:45:21,200 --> 00:45:24,240
to oklahoma state university and

1114
00:45:24,240 --> 00:45:26,800
we just had some really cool projects at

1115
00:45:26,800 --> 00:45:27,760
the time

1116
00:45:27,760 --> 00:45:31,040
like we got the veladan the lidar that

1117
00:45:31,040 --> 00:45:34,400
google uses on their like autonomous

1118
00:45:34,400 --> 00:45:35,280
vehicles

1119
00:45:35,280 --> 00:45:38,319
so working with that was really cool

1120
00:45:38,319 --> 00:45:41,280
my god i really want to research that

1121
00:45:41,280 --> 00:45:42,800
i'm going to start

1122
00:45:42,800 --> 00:45:47,280
and i may start a new career from now on

1123
00:45:47,280 --> 00:45:50,560
okay we got some questions here

1124
00:45:50,560 --> 00:45:52,720
what resources do you recommend to learn

1125
00:45:52,720 --> 00:45:53,599
more on

1126
00:45:53,599 --> 00:45:57,839
circle circle ci and conducto

1127
00:45:57,839 --> 00:46:01,359
um honestly for both of them just

1128
00:46:01,359 --> 00:46:04,000
to get started with anyways the

1129
00:46:04,000 --> 00:46:05,599
documentation

1130
00:46:05,599 --> 00:46:07,599
they have pretty straightforward

1131
00:46:07,599 --> 00:46:09,359
examples to make

1132
00:46:09,359 --> 00:46:12,160
basic pipelines and then you can just

1133
00:46:12,160 --> 00:46:14,240
add different nodes and

1134
00:46:14,240 --> 00:46:18,240
whatever processes you need from there

1135
00:46:18,640 --> 00:46:21,680
that's great um we got another one for

1136
00:46:21,680 --> 00:46:24,079
the cicd sect talk

1137
00:46:24,079 --> 00:46:27,200
how would you integrate sonarqueen into

1138
00:46:27,200 --> 00:46:31,598
it does it compare it with sneak

1139
00:46:32,400 --> 00:46:35,440
that it kind of is

1140
00:46:35,440 --> 00:46:39,839
like sonar cube is kind of like sneak

1141
00:46:39,839 --> 00:46:41,680
it goes through and checks for the

1142
00:46:41,680 --> 00:46:43,040
vulnerabilities but

1143
00:46:43,040 --> 00:46:46,400
i haven't personally used it before

1144
00:46:46,400 --> 00:46:49,119
so i'm assuming it would be really

1145
00:46:49,119 --> 00:46:49,760
similar

1146
00:46:49,760 --> 00:46:52,960
like there's just a certain maybe an orb

1147
00:46:52,960 --> 00:46:53,280
in

1148
00:46:53,280 --> 00:46:55,920
circle ci or there's some package you

1149
00:46:55,920 --> 00:46:57,680
can download for conducto

1150
00:46:57,680 --> 00:47:01,520
to get sonar cube

1151
00:47:01,520 --> 00:47:04,880
like set up in it

1152
00:47:07,760 --> 00:47:11,040
i have a lilly lily you

1153
00:47:11,040 --> 00:47:14,240
are writing a question that's so long

1154
00:47:14,240 --> 00:47:16,880
that's taking so long

1155
00:47:16,880 --> 00:47:19,599
i've seen her writing soon it's like 10

1156
00:47:19,599 --> 00:47:21,440
minutes it's so funny

1157
00:47:21,440 --> 00:47:25,680
we got another people writing as well um

1158
00:47:25,680 --> 00:47:28,000
while we wait for these questions oh

1159
00:47:28,000 --> 00:47:29,040
okay here

1160
00:47:29,040 --> 00:47:30,800
uh for people who are university

1161
00:47:30,800 --> 00:47:33,680
students uh can you give us tips

1162
00:47:33,680 --> 00:47:37,520
to venture into cicd oh

1163
00:47:37,520 --> 00:47:41,520
um honestly the best advice is just

1164
00:47:41,520 --> 00:47:44,480
to go try to build the pipeline even if

1165
00:47:44,480 --> 00:47:46,640
you don't have a super fancy

1166
00:47:46,640 --> 00:47:50,160
web app or data science project

1167
00:47:50,160 --> 00:47:53,040
just try to put something together and

1168
00:47:53,040 --> 00:47:54,000
see if you can

1169
00:47:54,000 --> 00:47:57,599
push your local code to github

1170
00:47:57,599 --> 00:48:00,800
and trigger a pipeline build and i don't

1171
00:48:00,800 --> 00:48:02,559
know maybe try to deploy like

1172
00:48:02,559 --> 00:48:06,000
a react app to netlify with conducto

1173
00:48:06,000 --> 00:48:09,359
or with circle ci or something

1174
00:48:09,359 --> 00:48:13,599
just try to do some kind of real project

1175
00:48:13,599 --> 00:48:17,280
it doesn't have to be big as usual

1176
00:48:17,280 --> 00:48:21,760
just get practical with it hands-on

1177
00:48:21,760 --> 00:48:23,680
do you also have recommendations for

1178
00:48:23,680 --> 00:48:26,800
understanding bug bounties for nuis

1179
00:48:26,800 --> 00:48:29,760
um honestly the hacker one little

1180
00:48:29,760 --> 00:48:30,960
tutorial course

1181
00:48:30,960 --> 00:48:34,319
is really good because that's why i

1182
00:48:34,319 --> 00:48:36,000
learned a lot about hacking

1183
00:48:36,000 --> 00:48:37,599
like they break down some of the

1184
00:48:37,599 --> 00:48:39,359
concepts really easy

1185
00:48:39,359 --> 00:48:42,480
so if you aren't quite sure of what

1186
00:48:42,480 --> 00:48:43,440
approach to take

1187
00:48:43,440 --> 00:48:45,280
that's that's a really good place to

1188
00:48:45,280 --> 00:48:47,040
start

1189
00:48:47,040 --> 00:48:50,319
that's great yes i i totally agree

1190
00:48:50,319 --> 00:48:52,800
um we got another one coming in uh any

1191
00:48:52,800 --> 00:48:54,960
tips for integrating snake

1192
00:48:54,960 --> 00:48:58,160
with container registries how fast is it

1193
00:48:58,160 --> 00:49:01,839
for this type of task that is a really

1194
00:49:01,839 --> 00:49:04,720
good question

1195
00:49:06,960 --> 00:49:09,760
congratulations

1196
00:49:11,119 --> 00:49:16,240
yes i guess if you put the i guess if

1197
00:49:16,240 --> 00:49:18,000
you integrated sneak

1198
00:49:18,000 --> 00:49:21,200
in maybe like a docker file

1199
00:49:21,200 --> 00:49:25,040
you could put it in a container registry

1200
00:49:25,040 --> 00:49:28,319
but it kind of depends on

1201
00:49:28,319 --> 00:49:30,720
what checks you're doing like sneak has

1202
00:49:30,720 --> 00:49:32,800
it where it can do some surface level

1203
00:49:32,800 --> 00:49:35,520
scans or it can go a little bit deeper

1204
00:49:35,520 --> 00:49:37,839
if you need the test to run really fast

1205
00:49:37,839 --> 00:49:39,520
in your pipeline you might just want to

1206
00:49:39,520 --> 00:49:40,160
do

1207
00:49:40,160 --> 00:49:41,920
like the surface level check for

1208
00:49:41,920 --> 00:49:44,160
vulnerabilities instead of the deeper

1209
00:49:44,160 --> 00:49:45,520
dive for

1210
00:49:45,520 --> 00:49:48,720
like cross-site scripting checks or sql

1211
00:49:48,720 --> 00:49:51,759
injection checks

1212
00:49:53,680 --> 00:49:58,079
i get it um how effective is the use

1213
00:49:58,079 --> 00:50:01,760
of containerized servers

1214
00:50:01,760 --> 00:50:05,599
you guys have some really good questions

1215
00:50:05,599 --> 00:50:08,480
honestly they are super effective just

1216
00:50:08,480 --> 00:50:09,599
because you can

1217
00:50:09,599 --> 00:50:12,480
deploy the same code that you've been

1218
00:50:12,480 --> 00:50:14,160
working on locally

1219
00:50:14,160 --> 00:50:17,520
to production without worrying about any

1220
00:50:17,520 --> 00:50:20,720
weird os

1221
00:50:20,720 --> 00:50:24,400
changes or any packages that you don't

1222
00:50:24,400 --> 00:50:25,119
know about

1223
00:50:25,119 --> 00:50:29,680
getting included into it but

1224
00:50:29,680 --> 00:50:32,000
that's that's the biggest thing with

1225
00:50:32,000 --> 00:50:34,079
containerized servers is they just give

1226
00:50:34,079 --> 00:50:36,160
you that consistency the whole way

1227
00:50:36,160 --> 00:50:38,399
through

1228
00:50:38,720 --> 00:50:41,440
that's great um we got i think one more

1229
00:50:41,440 --> 00:50:42,960
question coming in

1230
00:50:42,960 --> 00:50:44,880
i'm not sure i'm waiting for it because

1231
00:50:44,880 --> 00:50:47,760
i see him typing

1232
00:50:48,880 --> 00:50:51,920
louise if you want another chance to

1233
00:50:51,920 --> 00:50:54,160
to ask another question this is your

1234
00:50:54,160 --> 00:50:56,240
chance i'm giving you the chance right

1235
00:50:56,240 --> 00:50:58,479
now

1236
00:50:58,640 --> 00:51:02,000
um well if not i think we have finished

1237
00:51:02,000 --> 00:51:02,880
the q a but

1238
00:51:02,880 --> 00:51:05,680
still you can linger on on the channel

1239
00:51:05,680 --> 00:51:06,000
and

1240
00:51:06,000 --> 00:51:08,559
answer these questions via text melissa

1241
00:51:08,559 --> 00:51:09,920
is going to stay with us for the rest of

1242
00:51:09,920 --> 00:51:11,440
the conference i guess

1243
00:51:11,440 --> 00:51:13,040
if you want to of course i want to i

1244
00:51:13,040 --> 00:51:15,280
don't want to pressure you um

1245
00:51:15,280 --> 00:51:17,920
but thank you so much for joining

1246
00:51:17,920 --> 00:51:19,040
nothing con

1247
00:51:19,040 --> 00:51:21,839
and thank you so much for joining to

1248
00:51:21,839 --> 00:51:24,000
this live q a which is so important to

1249
00:51:24,000 --> 00:51:25,839
clarify all these questions that we all

1250
00:51:25,839 --> 00:51:27,440
have when it comes to

1251
00:51:27,440 --> 00:51:30,480
like uh so such important topics and hot

1252
00:51:30,480 --> 00:51:31,280
topics

1253
00:51:31,280 --> 00:51:33,280
like this one so thank you so much for

1254
00:51:33,280 --> 00:51:35,520
your research truly

1255
00:51:35,520 --> 00:51:39,280
thanks for having me it's an honor

1256
00:51:39,280 --> 00:51:42,720
likewise let's go to a

1257
00:51:42,720 --> 00:51:44,640
short break and we'll be back with

1258
00:51:44,640 --> 00:51:50,080
another talk

1259
00:51:50,080 --> 00:52:20,840
[Music]

1260
00:52:20,840 --> 00:52:22,830
[Applause]

1261
00:52:22,830 --> 00:52:43,599
[Music]

1262
00:52:43,599 --> 00:52:45,680
you

