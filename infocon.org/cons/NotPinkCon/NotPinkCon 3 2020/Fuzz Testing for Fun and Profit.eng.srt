1
00:00:01,060 --> 00:00:08,320
[Music]

2
00:00:08,320 --> 00:00:09,280
hi everyone

3
00:00:09,280 --> 00:00:12,480
we are back for another talk we are

4
00:00:12,480 --> 00:00:13,120
coming to

5
00:00:13,120 --> 00:00:15,920
the last of the last talks of the day

6
00:00:15,920 --> 00:00:17,840
this is the second to last talk

7
00:00:17,840 --> 00:00:20,320
unfortunately i hope you're enjoying the

8
00:00:20,320 --> 00:00:21,039
conference

9
00:00:21,039 --> 00:00:23,680
we certainly are enjoying the conference

10
00:00:23,680 --> 00:00:24,480
ourselves

11
00:00:24,480 --> 00:00:27,680
we have some amazing lineup

12
00:00:27,680 --> 00:00:30,960
such cool speakers and this talk is not

13
00:00:30,960 --> 00:00:31,279
an

14
00:00:31,279 --> 00:00:33,280
exception in this talk we're going to

15
00:00:33,280 --> 00:00:34,480
talk about uh

16
00:00:34,480 --> 00:00:36,719
buzzing but not me but the speaker is

17
00:00:36,719 --> 00:00:38,320
going to talk about buzzing

18
00:00:38,320 --> 00:00:40,320
which is something that i'm quite sure

19
00:00:40,320 --> 00:00:42,320
most people in the audience have

20
00:00:42,320 --> 00:00:45,520
has had at some point in time some

21
00:00:45,520 --> 00:00:46,480
experience with

22
00:00:46,480 --> 00:00:49,360
it's a great way a practical way to find

23
00:00:49,360 --> 00:00:49,760
a

24
00:00:49,760 --> 00:00:53,520
buggy code or flaws in your code and

25
00:00:53,520 --> 00:00:56,320
our next speaker is going to tell us how

26
00:00:56,320 --> 00:00:57,360
can we

27
00:00:57,360 --> 00:01:01,120
how we can integrate this uh different

28
00:01:01,120 --> 00:01:03,920
fussing strategies into our testing

29
00:01:03,920 --> 00:01:04,799
strategies

30
00:01:04,799 --> 00:01:07,840
in the best efficient way so

31
00:01:07,840 --> 00:01:12,240
uh let me introduce to you melissa venua

32
00:01:12,240 --> 00:01:15,040
hello everybody i'm excited to be here

33
00:01:15,040 --> 00:01:16,400
and talk to you today about

34
00:01:16,400 --> 00:01:19,759
fuzz testing so fuzz testing is one of

35
00:01:19,759 --> 00:01:21,280
probably the favorite

36
00:01:21,280 --> 00:01:22,880
things i've done over the course of my

37
00:01:22,880 --> 00:01:25,119
career

38
00:01:25,119 --> 00:01:28,159
and so i started many many years ago

39
00:01:28,159 --> 00:01:30,479
as an s den at microsoft now i am a

40
00:01:30,479 --> 00:01:32,720
director of engineering at imparticle

41
00:01:32,720 --> 00:01:35,040
i've done a little bit of everything but

42
00:01:35,040 --> 00:01:36,799
like i said being when i was in estet

43
00:01:36,799 --> 00:01:38,240
and then a developer working on

44
00:01:38,240 --> 00:01:40,159
networking on bing was one of my

45
00:01:40,159 --> 00:01:41,840
very favorite things because i had so

46
00:01:41,840 --> 00:01:43,920
much freedom to explore

47
00:01:43,920 --> 00:01:45,920
and one of the very first things that i

48
00:01:45,920 --> 00:01:47,840
ever explored

49
00:01:47,840 --> 00:01:50,960
was this thing called the forking

50
00:01:50,960 --> 00:01:52,479
service

51
00:01:52,479 --> 00:01:54,320
so i'm going to be very careful here

52
00:01:54,320 --> 00:01:56,399
throughout this talk while i talk about

53
00:01:56,399 --> 00:01:59,280
the forking service because it was known

54
00:01:59,280 --> 00:01:59,680
by

55
00:01:59,680 --> 00:02:02,159
a lot of uh a lot of different names as

56
00:02:02,159 --> 00:02:03,280
you might guess

57
00:02:03,280 --> 00:02:06,240
sometimes it was known as that forking

58
00:02:06,240 --> 00:02:07,200
service

59
00:02:07,200 --> 00:02:08,800
when it annoyed dabs and brought down

60
00:02:08,800 --> 00:02:11,200
traffic sometimes it was also called

61
00:02:11,200 --> 00:02:13,120
that service that forked all my test

62
00:02:13,120 --> 00:02:14,400
environments

63
00:02:14,400 --> 00:02:17,680
um but you get the idea about

64
00:02:17,680 --> 00:02:20,160
my forking service and so what it does

65
00:02:20,160 --> 00:02:21,040
was

66
00:02:21,040 --> 00:02:22,480
something that's also known as traffic

67
00:02:22,480 --> 00:02:24,959
teeing um the basics of it is that it

68
00:02:24,959 --> 00:02:25,680
would send

69
00:02:25,680 --> 00:02:28,080
actual copies of sanitized production

70
00:02:28,080 --> 00:02:28,959
traffic

71
00:02:28,959 --> 00:02:31,519
um from production uh make a copy of it

72
00:02:31,519 --> 00:02:33,280
and then federate it out across a couple

73
00:02:33,280 --> 00:02:34,560
of different parallel production

74
00:02:34,560 --> 00:02:36,959
environments in order to validate

75
00:02:36,959 --> 00:02:39,920
um to validate that the services were

76
00:02:39,920 --> 00:02:40,879
operating correctly

77
00:02:40,879 --> 00:02:43,760
under prod light conditions with prod

78
00:02:43,760 --> 00:02:45,440
like traffic

79
00:02:45,440 --> 00:02:46,879
i know what you're thinking of course

80
00:02:46,879 --> 00:02:48,480
there was anonymization in place we were

81
00:02:48,480 --> 00:02:50,000
always very careful not to be

82
00:02:50,000 --> 00:02:51,760
leaking customer data from production

83
00:02:51,760 --> 00:02:54,080
into um into our test environments also

84
00:02:54,080 --> 00:02:55,200
this was many

85
00:02:55,200 --> 00:02:57,200
many many years ago they have moved on

86
00:02:57,200 --> 00:02:58,480
beyond this

87
00:02:58,480 --> 00:03:01,120
um but anyway so when i joined bing you

88
00:03:01,120 --> 00:03:02,400
know i didn't invent this

89
00:03:02,400 --> 00:03:05,200
forking service when i joined it was

90
00:03:05,200 --> 00:03:07,280
already considered a pretty critical

91
00:03:07,280 --> 00:03:09,200
part of the whole release process if a

92
00:03:09,200 --> 00:03:10,480
release candidate could go

93
00:03:10,480 --> 00:03:13,040
24 to 48 hours without any crashes or

94
00:03:13,040 --> 00:03:15,440
any memory leaks or any weird metrics

95
00:03:15,440 --> 00:03:17,200
then the code was probably able to be

96
00:03:17,200 --> 00:03:19,760
considered stable enough for production

97
00:03:19,760 --> 00:03:21,120
but obviously there were still issues

98
00:03:21,120 --> 00:03:23,120
that were missed um and i wanted to know

99
00:03:23,120 --> 00:03:24,560
how could i take this data

100
00:03:24,560 --> 00:03:26,239
you know this very good production-like

101
00:03:26,239 --> 00:03:28,319
data and how could i use it to drive out

102
00:03:28,319 --> 00:03:29,840
any more issues

103
00:03:29,840 --> 00:03:32,080
so at the time we had an internal

104
00:03:32,080 --> 00:03:34,159
security team who was publishing you

105
00:03:34,159 --> 00:03:35,760
know internal microsoft who published a

106
00:03:35,760 --> 00:03:37,840
set of fuzzing libraries uh especially

107
00:03:37,840 --> 00:03:39,280
with attacks

108
00:03:39,280 --> 00:03:41,280
um and this library was pretty cool it

109
00:03:41,280 --> 00:03:42,879
was a you know i was able to access the

110
00:03:42,879 --> 00:03:44,640
source code to it it was in c

111
00:03:44,640 --> 00:03:47,920
plus and i worked on.net not a big deal

112
00:03:47,920 --> 00:03:49,200
but i thought well if they've already

113
00:03:49,200 --> 00:03:51,280
got you know put together this expertise

114
00:03:51,280 --> 00:03:53,040
to create this library of attacks i

115
00:03:53,040 --> 00:03:54,799
wonder how i could apply these

116
00:03:54,799 --> 00:03:57,599
libraries on top of the pretty good data

117
00:03:57,599 --> 00:04:00,319
that we already have

118
00:04:00,319 --> 00:04:02,239
and then combine that also with the

119
00:04:02,239 --> 00:04:04,400
model of our domain-specific http

120
00:04:04,400 --> 00:04:04,879
traffic

121
00:04:04,879 --> 00:04:07,360
and create a thing called the fuzzing

122
00:04:07,360 --> 00:04:08,720
service

123
00:04:08,720 --> 00:04:10,560
and so the fuzzing service was just the

124
00:04:10,560 --> 00:04:12,000
forking service but

125
00:04:12,000 --> 00:04:13,920
with the layer fuzzing applied on top

126
00:04:13,920 --> 00:04:16,560
and able to run at scale as well

127
00:04:16,560 --> 00:04:18,160
so basically it would just take our

128
00:04:18,160 --> 00:04:20,560
existing good traffic and inject

129
00:04:20,560 --> 00:04:23,759
you know inject an excess attack into it

130
00:04:23,759 --> 00:04:26,000
um anything that he could think of it

131
00:04:26,000 --> 00:04:27,520
had some security specific attacks and

132
00:04:27,520 --> 00:04:29,360
non-security specific attacks we'll talk

133
00:04:29,360 --> 00:04:30,479
more about what those look like in a

134
00:04:30,479 --> 00:04:31,360
minute

135
00:04:31,360 --> 00:04:32,720
um but it would just transform our

136
00:04:32,720 --> 00:04:35,199
traffic into something exciting

137
00:04:35,199 --> 00:04:38,160
um and so let me tell you so the first

138
00:04:38,160 --> 00:04:40,560
time i turned it on

139
00:04:40,560 --> 00:04:43,600
i you know went i was sitting at my desk

140
00:04:43,600 --> 00:04:44,960
and i was typing type of typing and i

141
00:04:44,960 --> 00:04:46,720
sent everybody email and said hey

142
00:04:46,720 --> 00:04:48,240
the release for you know the next

143
00:04:48,240 --> 00:04:49,759
release that's coming up just know

144
00:04:49,759 --> 00:04:51,120
if you see anything weird on the test

145
00:04:51,120 --> 00:04:52,639
beds that i've turned on the small

146
00:04:52,639 --> 00:04:54,720
fuzzing addition to your fork traffic

147
00:04:54,720 --> 00:04:56,240
i don't think it should cause anything

148
00:04:56,240 --> 00:04:57,919
any problems i'm not concerned about it

149
00:04:57,919 --> 00:04:59,120
with the release but

150
00:04:59,120 --> 00:05:01,440
just let me know if there's an issue um

151
00:05:01,440 --> 00:05:03,440
then i locked my he locked my desk got

152
00:05:03,440 --> 00:05:04,800
up and went and grabbed

153
00:05:04,800 --> 00:05:06,960
a t and as i was walking back down the

154
00:05:06,960 --> 00:05:07,919
hallways

155
00:05:07,919 --> 00:05:11,120
i could hear

156
00:05:11,120 --> 00:05:13,919
what this forking service what the heck

157
00:05:13,919 --> 00:05:15,600
happened with the forking service the

158
00:05:15,600 --> 00:05:16,800
beds are down

159
00:05:16,800 --> 00:05:18,639
um i could hear complaints popping up

160
00:05:18,639 --> 00:05:20,560
all up and down the hallways

161
00:05:20,560 --> 00:05:22,320
and so by the time i got back to my desk

162
00:05:22,320 --> 00:05:24,720
i had a bunch of red bang emails saying

163
00:05:24,720 --> 00:05:26,560
what did you do why are all the beds

164
00:05:26,560 --> 00:05:28,479
down can you make it stop

165
00:05:28,479 --> 00:05:30,560
uh so i scrambled and turned you know

166
00:05:30,560 --> 00:05:32,080
turned the traffic off

167
00:05:32,080 --> 00:05:33,759
and lo and behold we started triaging

168
00:05:33,759 --> 00:05:35,280
there were something like eight

169
00:05:35,280 --> 00:05:37,919
different crashing bugs encode that had

170
00:05:37,919 --> 00:05:39,520
been running stably under production

171
00:05:39,520 --> 00:05:40,720
like traffic for

172
00:05:40,720 --> 00:05:42,960
days to weeks there were these eight

173
00:05:42,960 --> 00:05:44,240
different bugs that were brand new

174
00:05:44,240 --> 00:05:45,759
crashes

175
00:05:45,759 --> 00:05:47,680
and so the devs of course scrambled to

176
00:05:47,680 --> 00:05:50,320
fix them in order to save the release

177
00:05:50,320 --> 00:05:52,320
fix them got them out again and then i

178
00:05:52,320 --> 00:05:54,800
came the request came in hey can you

179
00:05:54,800 --> 00:05:57,440
melissa please put that fuzz traffic

180
00:05:57,440 --> 00:05:59,680
back on we want to validate our fixes

181
00:05:59,680 --> 00:06:02,000
so i said sure okay i turned the traffic

182
00:06:02,000 --> 00:06:03,039
back on

183
00:06:03,039 --> 00:06:04,800
and within 10 minutes all the beds were

184
00:06:04,800 --> 00:06:06,319
down again

185
00:06:06,319 --> 00:06:08,240
and so i turned it back off and after

186
00:06:08,240 --> 00:06:09,600
those eight crashing issues have been

187
00:06:09,600 --> 00:06:11,120
fixed there were there were a few more

188
00:06:11,120 --> 00:06:13,440
to be driven out they had been uh

189
00:06:13,440 --> 00:06:16,160
um less frequent than the earlier

190
00:06:16,160 --> 00:06:19,120
crashes but they were still crashes

191
00:06:19,120 --> 00:06:20,319
and a lot of these were crashes that

192
00:06:20,319 --> 00:06:21,919
were in production already they weren't

193
00:06:21,919 --> 00:06:23,520
even in that new code

194
00:06:23,520 --> 00:06:25,120
um so there's more scrambling and more

195
00:06:25,120 --> 00:06:26,639
fixing um

196
00:06:26,639 --> 00:06:28,639
we turned it turned turned it back on

197
00:06:28,639 --> 00:06:30,880
again and this time the beds didn't

198
00:06:30,880 --> 00:06:32,160
crash

199
00:06:32,160 --> 00:06:35,039
for a while uh until they ran out of

200
00:06:35,039 --> 00:06:36,000
memory

201
00:06:36,000 --> 00:06:37,280
because we turned out we had driven out

202
00:06:37,280 --> 00:06:38,720
some memory leaks as well and so once

203
00:06:38,720 --> 00:06:40,639
the machines were stable enough to run

204
00:06:40,639 --> 00:06:41,120
for

205
00:06:41,120 --> 00:06:43,199
seven eight nine ten hours we could see

206
00:06:43,199 --> 00:06:45,360
their memory ramp was doing that

207
00:06:45,360 --> 00:06:47,520
and that they had memory leaks in them

208
00:06:47,520 --> 00:06:48,639
so again there was more

209
00:06:48,639 --> 00:06:52,080
frantic frantic fixes going out

210
00:06:52,080 --> 00:06:54,960
um i don't even i don't remember exactly

211
00:06:54,960 --> 00:06:56,720
how long it took for us to stabilize the

212
00:06:56,720 --> 00:06:58,800
beds again but there were

213
00:06:58,800 --> 00:07:01,039
more than a dozen bugs in code that had

214
00:07:01,039 --> 00:07:02,639
been living in production some of it for

215
00:07:02,639 --> 00:07:04,960
years some of them were very old weird

216
00:07:04,960 --> 00:07:06,720
ghost crashes that would happen you know

217
00:07:06,720 --> 00:07:08,000
1 in 100

218
00:07:08,000 --> 00:07:10,240
million requests we had no idea nobody's

219
00:07:10,240 --> 00:07:11,599
going to chase down that nobody's got

220
00:07:11,599 --> 00:07:12,639
time

221
00:07:12,639 --> 00:07:14,880
um that we were able to reproduce very

222
00:07:14,880 --> 00:07:17,919
quickly with the fuzzer

223
00:07:17,919 --> 00:07:19,440
we had issues all over the place we had

224
00:07:19,440 --> 00:07:21,440
issues in our c-plus plus web service we

225
00:07:21,440 --> 00:07:23,199
had javascript vulnerabilities rendering

226
00:07:23,199 --> 00:07:24,960
on the page we had memory leaks we had

227
00:07:24,960 --> 00:07:26,800
crashes we had deadlocks

228
00:07:26,800 --> 00:07:29,840
we had actual vulnerabilities and we

229
00:07:29,840 --> 00:07:31,599
found all of these things just by making

230
00:07:31,599 --> 00:07:32,560
our traffic look

231
00:07:32,560 --> 00:07:36,400
really really weird um

232
00:07:36,400 --> 00:07:39,440
we had at least one pretty nasty bug in

233
00:07:39,440 --> 00:07:41,039
there there was one buffer overflow that

234
00:07:41,039 --> 00:07:42,319
was causing cross

235
00:07:42,319 --> 00:07:44,240
cross process memory contamination that

236
00:07:44,240 --> 00:07:46,639
took hours to track down and fix

237
00:07:46,639 --> 00:07:47,520
um and who knows what would have

238
00:07:47,520 --> 00:07:48,720
happened if that bug had actually made

239
00:07:48,720 --> 00:07:50,080
it live into production

240
00:07:50,080 --> 00:07:52,160
there were all kinds of really serious

241
00:07:52,160 --> 00:07:54,160
interesting issues that we found

242
00:07:54,160 --> 00:07:56,000
with fuzzing that we wouldn't have never

243
00:07:56,000 --> 00:07:57,759
never found no human would have ever

244
00:07:57,759 --> 00:07:58,000
come

245
00:07:58,000 --> 00:07:59,440
up with the combinations doesn't matter

246
00:07:59,440 --> 00:08:01,599
how many you know doesn't matter how

247
00:08:01,599 --> 00:08:03,280
many teams we put on it we never would

248
00:08:03,280 --> 00:08:05,840
have found it

249
00:08:06,240 --> 00:08:10,000
so let's back up a step here

250
00:08:10,720 --> 00:08:13,599
and let's lay down some definitions so

251
00:08:13,599 --> 00:08:14,080
what

252
00:08:14,080 --> 00:08:18,318
exactly is fuzzing

253
00:08:18,400 --> 00:08:21,120
so the definition of fuzzing is just

254
00:08:21,120 --> 00:08:23,039
generating random inputs to explore the

255
00:08:23,039 --> 00:08:24,960
bounds of a system under test

256
00:08:24,960 --> 00:08:26,479
and these are my definitions that i'm

257
00:08:26,479 --> 00:08:28,160
going to work with here i'm sure if

258
00:08:28,160 --> 00:08:30,000
you're looking online you may see

259
00:08:30,000 --> 00:08:31,599
slightly different definitions but they

260
00:08:31,599 --> 00:08:34,559
should be pretty pretty standard here

261
00:08:34,559 --> 00:08:36,240
so the fuzz testing is just to explore

262
00:08:36,240 --> 00:08:37,519
the boundaries of our system that's

263
00:08:37,519 --> 00:08:39,200
under test so that we can understand

264
00:08:39,200 --> 00:08:40,640
what it's doing

265
00:08:40,640 --> 00:08:44,560
um and and figure out

266
00:08:44,560 --> 00:08:46,000
all kinds of interesting test cases we

267
00:08:46,000 --> 00:08:47,920
wouldn't have come up with on our own

268
00:08:47,920 --> 00:08:49,600
um so what is an attack so can we talk

269
00:08:49,600 --> 00:08:51,839
about an attack an attack is a

270
00:08:51,839 --> 00:08:53,920
as a specific type of data meant to

271
00:08:53,920 --> 00:08:56,000
drive out a very specific class of bugs

272
00:08:56,000 --> 00:08:57,600
so you may have an xss

273
00:08:57,600 --> 00:09:00,880
attack you may have a

274
00:09:00,880 --> 00:09:03,519
xsrf attack you may have a sql injection

275
00:09:03,519 --> 00:09:04,880
attack

276
00:09:04,880 --> 00:09:06,480
you may just have a buffer overflow

277
00:09:06,480 --> 00:09:08,160
attack right is it designed to cause

278
00:09:08,160 --> 00:09:10,000
some specific type of vulnerability or

279
00:09:10,000 --> 00:09:11,600
bug

280
00:09:11,600 --> 00:09:13,120
the manipulation which we'll talk about

281
00:09:13,120 --> 00:09:14,800
is going to be the combination of an

282
00:09:14,800 --> 00:09:15,600
input

283
00:09:15,600 --> 00:09:18,480
with an attack so taking your known good

284
00:09:18,480 --> 00:09:19,760
input or known bad input and then

285
00:09:19,760 --> 00:09:22,320
layering an attack upon it

286
00:09:22,320 --> 00:09:23,760
and then there's three specific types of

287
00:09:23,760 --> 00:09:25,200
manipulations we're going to talk about

288
00:09:25,200 --> 00:09:25,680
the first

289
00:09:25,680 --> 00:09:27,920
is a creation manipulation which is just

290
00:09:27,920 --> 00:09:29,440
a de novo

291
00:09:29,440 --> 00:09:32,160
generated input inserted in place of

292
00:09:32,160 --> 00:09:33,200
your text

293
00:09:33,200 --> 00:09:34,880
so imagine if you have the value of a

294
00:09:34,880 --> 00:09:36,959
header and it goes from you know

295
00:09:36,959 --> 00:09:38,560
your accept header being application

296
00:09:38,560 --> 00:09:41,279
json to

297
00:09:41,279 --> 00:09:45,040
semicolon drop tables

298
00:09:45,040 --> 00:09:46,880
meanwhile an insertion manipulation

299
00:09:46,880 --> 00:09:48,560
would be modifying a known input to

300
00:09:48,560 --> 00:09:50,080
include an attack so

301
00:09:50,080 --> 00:09:51,760
in an example of our header we might

302
00:09:51,760 --> 00:09:53,360
have application slash

303
00:09:53,360 --> 00:09:58,000
j semicolon drop tables son

304
00:09:58,000 --> 00:10:00,160
and finally genetic manipulation is

305
00:10:00,160 --> 00:10:02,079
successively modifying an input based on

306
00:10:02,079 --> 00:10:03,600
system behavior we're not going to talk

307
00:10:03,600 --> 00:10:04,000
about that

308
00:10:04,000 --> 00:10:06,160
too much today because that's kind of a

309
00:10:06,160 --> 00:10:07,440
solved problem

310
00:10:07,440 --> 00:10:10,800
so if you have the ability

311
00:10:10,800 --> 00:10:12,640
to monitor coverage right to monitor

312
00:10:12,640 --> 00:10:14,560
branch coverage of your application

313
00:10:14,560 --> 00:10:16,560
then you can do genetic manipulation to

314
00:10:16,560 --> 00:10:18,399
continue to explore all of the branches

315
00:10:18,399 --> 00:10:20,000
and that's what things like fuzzy lock

316
00:10:20,000 --> 00:10:21,040
do

317
00:10:21,040 --> 00:10:24,000
as they allow you to they have insight

318
00:10:24,000 --> 00:10:25,440
into what they're accessing and they can

319
00:10:25,440 --> 00:10:27,200
intelligently modify the inputs for

320
00:10:27,200 --> 00:10:29,040
successive attacks to try to drive all

321
00:10:29,040 --> 00:10:33,839
the way through your code

322
00:10:34,320 --> 00:10:36,959
so what are the keys to a successful

323
00:10:36,959 --> 00:10:37,519
fuzzing

324
00:10:37,519 --> 00:10:40,640
run so we've got to have a model

325
00:10:40,640 --> 00:10:41,839
right where we'll look at what models

326
00:10:41,839 --> 00:10:43,360
look like you have to have the attack

327
00:10:43,360 --> 00:10:44,880
set which is some of what we just talked

328
00:10:44,880 --> 00:10:45,519
about

329
00:10:45,519 --> 00:10:48,959
you have to have a plan and so

330
00:10:48,959 --> 00:10:51,360
your model is what you care about right

331
00:10:51,360 --> 00:10:53,680
if you are on the http level your model

332
00:10:53,680 --> 00:10:55,680
is the http model if your application

333
00:10:55,680 --> 00:10:56,959
has some json

334
00:10:56,959 --> 00:10:58,959
your model is whatever you're defined in

335
00:10:58,959 --> 00:11:00,880
json

336
00:11:00,880 --> 00:11:02,880
the attack set is all of the bad things

337
00:11:02,880 --> 00:11:04,480
you're going to do to yourself

338
00:11:04,480 --> 00:11:05,839
and your plan is how you're going to

339
00:11:05,839 --> 00:11:07,760
apply that attack set intelligently to

340
00:11:07,760 --> 00:11:11,439
your model to get the best bang for your

341
00:11:12,839 --> 00:11:15,839
buck

342
00:11:18,160 --> 00:11:19,360
so the first thing we're going to want

343
00:11:19,360 --> 00:11:22,959
to do here is define our data model

344
00:11:22,959 --> 00:11:25,920
because again if we're talking about if

345
00:11:25,920 --> 00:11:27,040
you're talking about a simple input

346
00:11:27,040 --> 00:11:28,000
output program

347
00:11:28,000 --> 00:11:29,120
if you're talking about something that's

348
00:11:29,120 --> 00:11:32,000
command line based there's tools for you

349
00:11:32,000 --> 00:11:34,240
you're not going to need to define or

350
00:11:34,240 --> 00:11:35,839
invent anything here you can just go

351
00:11:35,839 --> 00:11:37,440
grab afl hook it up

352
00:11:37,440 --> 00:11:40,320
it'll just walk you walk through you

353
00:11:40,320 --> 00:11:41,519
walk through your application

354
00:11:41,519 --> 00:11:43,839
and you're solved you're good to go um

355
00:11:43,839 --> 00:11:45,920
but if you're talking a service

356
00:11:45,920 --> 00:11:47,440
if you're talking something with a with

357
00:11:47,440 --> 00:11:49,519
a highly structured input model

358
00:11:49,519 --> 00:11:50,959
if you're stuck in something that can't

359
00:11:50,959 --> 00:11:53,760
be easily watched for coverage which not

360
00:11:53,760 --> 00:11:55,600
every language and application

361
00:11:55,600 --> 00:11:57,760
lends itself to do so you're going to

362
00:11:57,760 --> 00:11:59,519
want to be very crisp about defining

363
00:11:59,519 --> 00:12:01,440
your data model so that you can

364
00:12:01,440 --> 00:12:03,360
customize what you're going to do next

365
00:12:03,360 --> 00:12:06,240
to your specific input case

366
00:12:06,240 --> 00:12:07,920
and every day every piece of data is

367
00:12:07,920 --> 00:12:09,040
going to have a model where we don't

368
00:12:09,040 --> 00:12:10,959
just have unstructured data nobody

369
00:12:10,959 --> 00:12:13,440
nobody runs a service that way so for

370
00:12:13,440 --> 00:12:15,920
talking http for example there's a data

371
00:12:15,920 --> 00:12:16,959
model here

372
00:12:16,959 --> 00:12:20,160
right http always contains these pieces

373
00:12:20,160 --> 00:12:23,200
http right has a method it has a uri and

374
00:12:23,200 --> 00:12:25,440
that uri has a specific format

375
00:12:25,440 --> 00:12:27,440
and in that form is for example query

376
00:12:27,440 --> 00:12:29,360
parameters query parameters also have a

377
00:12:29,360 --> 00:12:30,880
separate format which is separate from

378
00:12:30,880 --> 00:12:33,440
the format of the overall uri

379
00:12:33,440 --> 00:12:35,360
likewise headers right are key value

380
00:12:35,360 --> 00:12:36,800
pairs they have a format

381
00:12:36,800 --> 00:12:38,560
some headers are comma separated but if

382
00:12:38,560 --> 00:12:40,399
you get down into the cookie header for

383
00:12:40,399 --> 00:12:42,160
example it's actually a totally

384
00:12:42,160 --> 00:12:43,920
different format right it's

385
00:12:43,920 --> 00:12:47,600
semicolon and ampersand separated

386
00:12:47,600 --> 00:12:48,800
and so the important thing about

387
00:12:48,800 --> 00:12:50,240
defining our model is we need to know

388
00:12:50,240 --> 00:12:52,320
what's important to us

389
00:12:52,320 --> 00:12:53,920
right if i'm interested and i'm running

390
00:12:53,920 --> 00:12:56,000
an application at the http layer that

391
00:12:56,000 --> 00:12:56,639
has

392
00:12:56,639 --> 00:12:58,160
you know say it's reading data off of

393
00:12:58,160 --> 00:13:00,560
query parameters i'm not particularly

394
00:13:00,560 --> 00:13:02,720
interested in fuzzing my web server

395
00:13:02,720 --> 00:13:03,680
not because there couldn't be

396
00:13:03,680 --> 00:13:05,200
vulnerabilities in my web server of

397
00:13:05,200 --> 00:13:06,320
course there could

398
00:13:06,320 --> 00:13:08,720
uh but that's not my job right if i work

399
00:13:08,720 --> 00:13:09,519
for

400
00:13:09,519 --> 00:13:12,000
company x i'm supposed to be testing and

401
00:13:12,000 --> 00:13:14,800
validating company x's application

402
00:13:14,800 --> 00:13:16,480
it's not as much of interest to me to

403
00:13:16,480 --> 00:13:18,240
make sure that that if i'm running on

404
00:13:18,240 --> 00:13:19,839
apache that apache has done their due

405
00:13:19,839 --> 00:13:20,480
diligence

406
00:13:20,480 --> 00:13:23,440
in in um making sure their service is

407
00:13:23,440 --> 00:13:25,040
secure

408
00:13:25,040 --> 00:13:26,560
and i'm not saying we shouldn't nobody

409
00:13:26,560 --> 00:13:28,000
should be testing apache i'm saying it

410
00:13:28,000 --> 00:13:30,160
may not be your primary job to ensure

411
00:13:30,160 --> 00:13:31,519
that apache works right

412
00:13:31,519 --> 00:13:33,440
your primary job is validating that your

413
00:13:33,440 --> 00:13:34,720
application

414
00:13:34,720 --> 00:13:37,760
is behaving as it's supposed to

415
00:13:37,760 --> 00:13:39,920
it's not a good use of my time to be

416
00:13:39,920 --> 00:13:41,760
dealing with apache at the tcp level if

417
00:13:41,760 --> 00:13:43,360
my application is js

418
00:13:43,360 --> 00:13:48,639
is json layered over http

419
00:13:48,639 --> 00:13:50,079
and so the first part is understanding

420
00:13:50,079 --> 00:13:51,680
the fundamentals of your data model and

421
00:13:51,680 --> 00:13:53,519
then understanding what your application

422
00:13:53,519 --> 00:13:55,760
is going to do with that

423
00:13:55,760 --> 00:13:58,160
data model and the specifics of it so

424
00:13:58,160 --> 00:14:00,160
for example if we actually are reading

425
00:14:00,160 --> 00:14:03,279
json post bodies on top of http then

426
00:14:03,279 --> 00:14:04,639
that's going to define what's actually

427
00:14:04,639 --> 00:14:07,760
of interest to us

428
00:14:08,320 --> 00:14:09,680
more specifically it's going to define

429
00:14:09,680 --> 00:14:11,680
what is not of interest to us

430
00:14:11,680 --> 00:14:14,160
because if i'm on json on http then i

431
00:14:14,160 --> 00:14:15,360
don't really care about xml

432
00:14:15,360 --> 00:14:16,959
vulnerabilities

433
00:14:16,959 --> 00:14:19,760
if i'm a purely nosql shop i'm not going

434
00:14:19,760 --> 00:14:21,680
to be all that worried about

435
00:14:21,680 --> 00:14:24,160
about oracle db vulnerabilities injected

436
00:14:24,160 --> 00:14:25,120
in either because

437
00:14:25,120 --> 00:14:28,079
it's not likely to be relevant to me so

438
00:14:28,079 --> 00:14:29,040
understanding

439
00:14:29,040 --> 00:14:31,279
your data model and understanding your

440
00:14:31,279 --> 00:14:32,720
risk layer is going to be

441
00:14:32,720 --> 00:14:34,880
a big deal in helping you figure out

442
00:14:34,880 --> 00:14:36,639
what's going to be really important

443
00:14:36,639 --> 00:14:38,959
right json also has a format all its own

444
00:14:38,959 --> 00:14:40,399
json has

445
00:14:40,399 --> 00:14:41,760
you know specific layering of

446
00:14:41,760 --> 00:14:44,240
parentheses and quotes and then your

447
00:14:44,240 --> 00:14:45,760
application is probably going to have a

448
00:14:45,760 --> 00:14:46,959
specific type of

449
00:14:46,959 --> 00:14:48,800
data model layered on top of that again

450
00:14:48,800 --> 00:14:50,560
right it's going to have required fields

451
00:14:50,560 --> 00:14:51,920
optional fields it's going to have

452
00:14:51,920 --> 00:14:53,920
structures of those fields this one's an

453
00:14:53,920 --> 00:14:56,240
int this one is a string this one is an

454
00:14:56,240 --> 00:14:58,079
array of objects

455
00:14:58,079 --> 00:15:00,399
um you're going to have your own

456
00:15:00,399 --> 00:15:01,760
specific things that you're going to

457
00:15:01,760 --> 00:15:02,480
want to

458
00:15:02,480 --> 00:15:05,120
test for

459
00:15:06,880 --> 00:15:08,560
and so with that in mind we're going to

460
00:15:08,560 --> 00:15:09,920
want to be very

461
00:15:09,920 --> 00:15:13,360
cognizant of our tax election

462
00:15:13,360 --> 00:15:15,839
and so attack selection is is a fun

463
00:15:15,839 --> 00:15:16,959
thing

464
00:15:16,959 --> 00:15:18,560
and it's it's sort of a solved problem

465
00:15:18,560 --> 00:15:20,320
when i say a solved problem i don't mean

466
00:15:20,320 --> 00:15:21,839
that new attacks aren't being invented

467
00:15:21,839 --> 00:15:23,760
all the time because they are

468
00:15:23,760 --> 00:15:25,279
i just mean that if you find that you

469
00:15:25,279 --> 00:15:27,279
are having to invent

470
00:15:27,279 --> 00:15:31,120
attacks you should stop and look around

471
00:15:31,120 --> 00:15:32,880
for example i'm going to show you all

472
00:15:32,880 --> 00:15:35,279
some sample code later that uses fuzzdb

473
00:15:35,279 --> 00:15:36,800
which is an open source solution to

474
00:15:36,800 --> 00:15:39,360
generate attacks out of

475
00:15:39,360 --> 00:15:41,839
my full-time job is not investigating

476
00:15:41,839 --> 00:15:42,720
and

477
00:15:42,720 --> 00:15:44,240
exploiting vulnerabilities that some

478
00:15:44,240 --> 00:15:45,759
people's full-time jobs and that's an

479
00:15:45,759 --> 00:15:47,279
awesome job but those are the people who

480
00:15:47,279 --> 00:15:48,639
should be then

481
00:15:48,639 --> 00:15:51,920
helping to craft attacks my job is

482
00:15:51,920 --> 00:15:53,519
helping to take those attacks and apply

483
00:15:53,519 --> 00:15:55,360
them at scale to ensure that my services

484
00:15:55,360 --> 00:15:56,959
are behaving

485
00:15:56,959 --> 00:16:00,479
as well as can be expected

486
00:16:02,320 --> 00:16:05,360
so lots of things can be attacks

487
00:16:05,360 --> 00:16:06,800
right of course sql injection

488
00:16:06,800 --> 00:16:08,560
everybody's everybody wants to drop

489
00:16:08,560 --> 00:16:09,920
tables that's the old

490
00:16:09,920 --> 00:16:13,120
that's the old best standby um but

491
00:16:13,120 --> 00:16:14,240
control characters

492
00:16:14,240 --> 00:16:16,959
are also an interesting attack just this

493
00:16:16,959 --> 00:16:17,920
um

494
00:16:17,920 --> 00:16:19,839
just this uh this piece here you don't

495
00:16:19,839 --> 00:16:21,680
want to know that i basically crashed

496
00:16:21,680 --> 00:16:22,720
powerpoint twice

497
00:16:22,720 --> 00:16:24,240
trying to put it in right i fuzzed

498
00:16:24,240 --> 00:16:26,720
powerpoint for them they're welcome

499
00:16:26,720 --> 00:16:30,480
um xss obviously it's a set of attacks

500
00:16:30,480 --> 00:16:31,920
more useful if you're going to be

501
00:16:31,920 --> 00:16:33,519
rendering in javascript in some way or

502
00:16:33,519 --> 00:16:34,320
the other but

503
00:16:34,320 --> 00:16:36,240
it can be a useful set of attacks

504
00:16:36,240 --> 00:16:39,199
integer overflows redirect attacks

505
00:16:39,199 --> 00:16:41,440
but don't neglect the benefit of trying

506
00:16:41,440 --> 00:16:43,920
to do buffer overflows with just some

507
00:16:43,920 --> 00:16:46,480
random strings you'll see a little bit

508
00:16:46,480 --> 00:16:48,800
later

509
00:16:48,800 --> 00:16:50,880
that the most mileage out of any attack

510
00:16:50,880 --> 00:16:52,560
i've ever gotten has just been a lot of

511
00:16:52,560 --> 00:16:53,440
a's

512
00:16:53,440 --> 00:16:54,959
and i don't mean you know the seven or

513
00:16:54,959 --> 00:16:56,320
eight a's that are on the screen which

514
00:16:56,320 --> 00:16:57,920
is this is fine

515
00:16:57,920 --> 00:17:01,120
um but you know 20 000 a's

516
00:17:01,120 --> 00:17:04,400
50 000 a's 128 000 a's

517
00:17:04,400 --> 00:17:07,679
lots and lots of a's

518
00:17:08,079 --> 00:17:09,599
we'll start to tell you very interesting

519
00:17:09,599 --> 00:17:11,520
things about where you may have buffer

520
00:17:11,520 --> 00:17:13,199
overflows where you're not cleaning up

521
00:17:13,199 --> 00:17:16,240
buffers where you may

522
00:17:17,599 --> 00:17:20,000
or you may get very interesting emergent

523
00:17:20,000 --> 00:17:21,359
behaviors where things are you know if

524
00:17:21,359 --> 00:17:22,559
you're in a managed language where you

525
00:17:22,559 --> 00:17:23,520
may be

526
00:17:23,520 --> 00:17:24,720
pushing something into garbage

527
00:17:24,720 --> 00:17:26,000
collection you're going to be vulnerable

528
00:17:26,000 --> 00:17:27,919
to being ddosed

529
00:17:27,919 --> 00:17:32,080
or just dost for that matter um

530
00:17:32,080 --> 00:17:33,919
you can get a lot of mileage out of some

531
00:17:33,919 --> 00:17:35,919
very very simple

532
00:17:35,919 --> 00:17:39,039
attack test cases

533
00:17:39,360 --> 00:17:41,120
so we've got our attacks we've got our

534
00:17:41,120 --> 00:17:42,720
data model

535
00:17:42,720 --> 00:17:44,960
um and so great let's generate a fuzz

536
00:17:44,960 --> 00:17:46,960
request and so this

537
00:17:46,960 --> 00:17:49,360
this one to some random website is

538
00:17:49,360 --> 00:17:50,160
fuzzed

539
00:17:50,160 --> 00:17:52,799
and it is you know it's it's very fuzzed

540
00:17:52,799 --> 00:17:54,160
but it's not going to be very useful for

541
00:17:54,160 --> 00:17:56,080
testing and why is that

542
00:17:56,080 --> 00:17:58,000
uh for a number of reasons it's so

543
00:17:58,000 --> 00:17:59,840
fuzzed that it's unlikely to go anywhere

544
00:17:59,840 --> 00:18:00,640
useful

545
00:18:00,640 --> 00:18:02,640
it's unlikely to even leave the machine

546
00:18:02,640 --> 00:18:03,760
upon which you're trying to generate

547
00:18:03,760 --> 00:18:05,679
traffic from much less go to the machine

548
00:18:05,679 --> 00:18:07,200
that you care about much less trigger

549
00:18:07,200 --> 00:18:08,720
the application upon that machine that

550
00:18:08,720 --> 00:18:09,919
you care about

551
00:18:09,919 --> 00:18:12,080
right for one part the verb is the verb

552
00:18:12,080 --> 00:18:13,360
is messed up

553
00:18:13,360 --> 00:18:15,760
for another uri also these not correct

554
00:18:15,760 --> 00:18:16,799
so you're not going to go to the

555
00:18:16,799 --> 00:18:18,160
endpoint you even wanted to get to to

556
00:18:18,160 --> 00:18:20,320
begin with and even if you did

557
00:18:20,320 --> 00:18:22,720
we've injected an attack into uh into

558
00:18:22,720 --> 00:18:23,440
our path

559
00:18:23,440 --> 00:18:25,120
so if we're testing a specific feature

560
00:18:25,120 --> 00:18:26,799
under our application we're just going

561
00:18:26,799 --> 00:18:28,559
to get four or four

562
00:18:28,559 --> 00:18:30,240
if you're testing the 404 that's great

563
00:18:30,240 --> 00:18:33,120
but if you're not testing the 404 then

564
00:18:33,120 --> 00:18:34,559
that's not going to be all that useful

565
00:18:34,559 --> 00:18:36,480
to you um

566
00:18:36,480 --> 00:18:38,799
likewise you know we're missing headers

567
00:18:38,799 --> 00:18:40,160
all together our cookie header is gone

568
00:18:40,160 --> 00:18:41,520
so if we care about the data in the

569
00:18:41,520 --> 00:18:42,799
cookie header well that's not going to

570
00:18:42,799 --> 00:18:44,480
go anywhere useful again

571
00:18:44,480 --> 00:18:48,640
we're still um we've basic is basically

572
00:18:48,640 --> 00:18:50,320
a wasted test case

573
00:18:50,320 --> 00:18:52,559
so without a plan your fuzzing is going

574
00:18:52,559 --> 00:18:55,280
to be extremely scatter shot

575
00:18:55,280 --> 00:18:58,080
it's not likely to get anywhere useful

576
00:18:58,080 --> 00:18:59,360
you're gonna have to spend

577
00:18:59,360 --> 00:19:01,679
a ton of requests trying to get you know

578
00:19:01,679 --> 00:19:03,520
a small fraction of them even to be

579
00:19:03,520 --> 00:19:05,440
acceptable enough to hit the application

580
00:19:05,440 --> 00:19:06,720
under test never mind actually do

581
00:19:06,720 --> 00:19:09,520
anything interesting to it

582
00:19:09,520 --> 00:19:10,960
if you fuzz too many things it's going

583
00:19:10,960 --> 00:19:12,559
to be difficult to find a repro you're

584
00:19:12,559 --> 00:19:13,760
going to have a lot of things that are

585
00:19:13,760 --> 00:19:15,280
just summarily rejected because they

586
00:19:15,280 --> 00:19:16,640
don't even get to the application that

587
00:19:16,640 --> 00:19:18,480
you're interested in

588
00:19:18,480 --> 00:19:20,480
meanwhile if you don't fuzz enough

589
00:19:20,480 --> 00:19:22,320
things right if you fuzz

590
00:19:22,320 --> 00:19:24,240
you know one teeny tiny thing at a time

591
00:19:24,240 --> 00:19:26,480
it may take too long to get a repro for

592
00:19:26,480 --> 00:19:27,039
anything

593
00:19:27,039 --> 00:19:29,120
right one crash out of a hundred million

594
00:19:29,120 --> 00:19:30,640
is unlikely to be something that gets

595
00:19:30,640 --> 00:19:33,360
investigated

596
00:19:33,440 --> 00:19:36,320
and so what you need to do is you need

597
00:19:36,320 --> 00:19:37,200
to make

598
00:19:37,200 --> 00:19:41,440
a plan so the plan can be pretty simple

599
00:19:41,440 --> 00:19:44,080
um here we have a very simple example of

600
00:19:44,080 --> 00:19:45,440
a plan

601
00:19:45,440 --> 00:19:49,280
for fuzzing uh fuzzing an http request

602
00:19:49,280 --> 00:19:51,600
so it says you know the basics here we

603
00:19:51,600 --> 00:19:53,360
want no more than three attacks we want

604
00:19:53,360 --> 00:19:54,960
to use a specific attack set

605
00:19:54,960 --> 00:19:56,640
um we want to fails our method very

606
00:19:56,640 --> 00:19:58,080
infrequently um

607
00:19:58,080 --> 00:19:59,679
remember i'm not saying you should never

608
00:19:59,679 --> 00:20:01,760
fuzz your web server but it shouldn't be

609
00:20:01,760 --> 00:20:03,520
the primary goal of your

610
00:20:03,520 --> 00:20:06,080
of your um if your of your operation

611
00:20:06,080 --> 00:20:06,799
here

612
00:20:06,799 --> 00:20:08,720
so we want to fuzz the method but very

613
00:20:08,720 --> 00:20:10,799
rarely um we never want to fuzz the host

614
00:20:10,799 --> 00:20:12,080
header because if we fuzz the host

615
00:20:12,080 --> 00:20:14,000
header then we're just not

616
00:20:14,000 --> 00:20:15,600
we're not going to get any routing it's

617
00:20:15,600 --> 00:20:17,120
not going to go where it needs to go um

618
00:20:17,120 --> 00:20:18,480
in this specific case

619
00:20:18,480 --> 00:20:19,760
obviously there's ways there's ways

620
00:20:19,760 --> 00:20:22,000
around that um

621
00:20:22,000 --> 00:20:23,280
we don't really want to fuzz our path

622
00:20:23,280 --> 00:20:24,559
that much either because we're trying to

623
00:20:24,559 --> 00:20:26,320
test a specific sub path

624
00:20:26,320 --> 00:20:28,080
uh we want to fuzz our query line like

625
00:20:28,080 --> 00:20:30,720
crazy let's say we know our application

626
00:20:30,720 --> 00:20:31,760
we know that

627
00:20:31,760 --> 00:20:33,280
the path you know the path is not an

628
00:20:33,280 --> 00:20:34,559
interesting host another they're

629
00:20:34,559 --> 00:20:35,440
interesting but

630
00:20:35,440 --> 00:20:37,120
the things on the quarry line are

631
00:20:37,120 --> 00:20:38,880
extremely interesting

632
00:20:38,880 --> 00:20:41,919
so we want to fuzz those like crazy um

633
00:20:41,919 --> 00:20:43,200
likewise we'll take a look at our

634
00:20:43,200 --> 00:20:44,480
headers right we don't want to fuzz

635
00:20:44,480 --> 00:20:45,280
necessarily

636
00:20:45,280 --> 00:20:47,039
the name of the header because we fuzz

637
00:20:47,039 --> 00:20:48,400
the name of the header as we all know

638
00:20:48,400 --> 00:20:50,400
that's just a key value per dictionary

639
00:20:50,400 --> 00:20:51,840
again it's not going to be that

640
00:20:51,840 --> 00:20:53,919
interesting but fuzzing the values of

641
00:20:53,919 --> 00:20:56,720
that headers could be very interesting

642
00:20:56,720 --> 00:20:58,159
especially your authorization header if

643
00:20:58,159 --> 00:21:00,720
you need to be logged in and you

644
00:21:00,720 --> 00:21:02,720
you know we never want to get rid of the

645
00:21:02,720 --> 00:21:04,159
authorization header altogether but

646
00:21:04,159 --> 00:21:05,840
sometimes we may want to fuzz it we

647
00:21:05,840 --> 00:21:07,200
don't want to buzz it as frequently as

648
00:21:07,200 --> 00:21:09,200
the other things because

649
00:21:09,200 --> 00:21:11,039
we're fuzzing you know our authorization

650
00:21:11,039 --> 00:21:12,480
system

651
00:21:12,480 --> 00:21:14,240
and so if we know for a fact that if we

652
00:21:14,240 --> 00:21:16,400
don't off then we can't access the rest

653
00:21:16,400 --> 00:21:17,919
of our request then we don't want to do

654
00:21:17,919 --> 00:21:19,120
it that often

655
00:21:19,120 --> 00:21:20,640
right it's not the most important thing

656
00:21:20,640 --> 00:21:22,240
we could be checking we know it's going

657
00:21:22,240 --> 00:21:23,520
to be an artificial limiter on the

658
00:21:23,520 --> 00:21:26,960
amount of traffic that gets to somewhere

659
00:21:28,840 --> 00:21:31,840
interesting

660
00:21:33,120 --> 00:21:36,000
okay and so

661
00:21:37,840 --> 00:21:40,320
if we take a well-crafted plan and we

662
00:21:40,320 --> 00:21:42,000
apply it here

663
00:21:42,000 --> 00:21:44,480
all of a sudden an interesting request

664
00:21:44,480 --> 00:21:45,520
emerges

665
00:21:45,520 --> 00:21:47,919
so take this one this is very likely to

666
00:21:47,919 --> 00:21:49,120
get where it needs to go

667
00:21:49,120 --> 00:21:51,039
it's on the right it's got the right

668
00:21:51,039 --> 00:21:52,559
method it's got the right

669
00:21:52,559 --> 00:21:55,440
ghost name it's got the right path um

670
00:21:55,440 --> 00:21:57,120
and we've injected you know pretend

671
00:21:57,120 --> 00:21:58,000
there's more a's there

672
00:21:58,000 --> 00:21:59,919
because my screen is only so big we've

673
00:21:59,919 --> 00:22:01,760
injected some a's into potentially an

674
00:22:01,760 --> 00:22:04,159
interesting field on the query line

675
00:22:04,159 --> 00:22:05,919
um likewise we've fuzzed one of the

676
00:22:05,919 --> 00:22:07,679
cookies you fuzz it in a very

677
00:22:07,679 --> 00:22:09,200
interesting way

678
00:22:09,200 --> 00:22:10,640
especially if you have awareness of how

679
00:22:10,640 --> 00:22:12,240
your application is using cookies you

680
00:22:12,240 --> 00:22:13,440
may know that

681
00:22:13,440 --> 00:22:16,000
oh this part of the application has this

682
00:22:16,000 --> 00:22:16,640
you know this

683
00:22:16,640 --> 00:22:18,320
cookie layout and this cookie for

684
00:22:18,320 --> 00:22:20,720
example i know is always used

685
00:22:20,720 --> 00:22:22,720
um as a user identifier and sometimes it

686
00:22:22,720 --> 00:22:24,720
shows up right sometimes it shows up on

687
00:22:24,720 --> 00:22:26,159
javascript page

688
00:22:26,159 --> 00:22:28,559
that's interesting right using your

689
00:22:28,559 --> 00:22:30,559
knowledge of your system to help guide

690
00:22:30,559 --> 00:22:31,520
the fuzzer

691
00:22:31,520 --> 00:22:33,280
so that it can generate attacks well

692
00:22:33,280 --> 00:22:34,480
beyond what your knowledge and

693
00:22:34,480 --> 00:22:35,760
creativity could come up

694
00:22:35,760 --> 00:22:39,200
is the key to crashing your application

695
00:22:39,200 --> 00:22:42,320
12 times in an hour

696
00:22:42,559 --> 00:22:44,480
right this is also a very good fuzz

697
00:22:44,480 --> 00:22:46,559
request it's respecting uh first and

698
00:22:46,559 --> 00:22:49,600
foremost that we have to authorize or

699
00:22:49,600 --> 00:22:50,640
nothing's going to happen you're just

700
00:22:50,640 --> 00:22:52,159
going to be testing your testing your

701
00:22:52,159 --> 00:22:53,360
authorization handler

702
00:22:53,360 --> 00:22:55,280
it's going again to the right url with

703
00:22:55,280 --> 00:22:56,720
the right method

704
00:22:56,720 --> 00:22:59,200
um and it's most important it's json

705
00:22:59,200 --> 00:22:59,919
aware

706
00:22:59,919 --> 00:23:01,360
and if you notice we're not we don't

707
00:23:01,360 --> 00:23:03,280
want to fuzz our json parser

708
00:23:03,280 --> 00:23:04,880
which you know could be interesting

709
00:23:04,880 --> 00:23:06,880
sometimes but that's not

710
00:23:06,880 --> 00:23:09,360
usually the most interesting thing we

711
00:23:09,360 --> 00:23:10,640
could do

712
00:23:10,640 --> 00:23:14,400
and so this is a json aware fuzz output

713
00:23:14,400 --> 00:23:17,039
that says ah this is a number great i've

714
00:23:17,039 --> 00:23:19,919
inserted integer.max

715
00:23:19,919 --> 00:23:22,400
or you know this is a string great i've

716
00:23:22,400 --> 00:23:23,440
injected some

717
00:23:23,440 --> 00:23:27,200
extra xss into the string

718
00:23:27,760 --> 00:23:30,240
and so this request is also very likely

719
00:23:30,240 --> 00:23:31,600
to cause some

720
00:23:31,600 --> 00:23:34,080
very interesting behavior if interesting

721
00:23:34,080 --> 00:23:34,960
behave you know

722
00:23:34,960 --> 00:23:36,400
if there's interesting code to be

723
00:23:36,400 --> 00:23:38,400
explored much more interesting than if

724
00:23:38,400 --> 00:23:39,760
you're trying to fuzz you know

725
00:23:39,760 --> 00:23:43,840
newton's soft jsof json parser

726
00:23:47,679 --> 00:23:50,159
and so let's say you've got your attack

727
00:23:50,159 --> 00:23:50,799
set

728
00:23:50,799 --> 00:23:53,760
you've got your plan um you've got your

729
00:23:53,760 --> 00:23:55,279
data model

730
00:23:55,279 --> 00:23:56,880
now the next and most important thing is

731
00:23:56,880 --> 00:23:58,320
knowing that you've actually found

732
00:23:58,320 --> 00:24:00,799
something

733
00:24:02,000 --> 00:24:03,760
this is actually a pretty hard problem

734
00:24:03,760 --> 00:24:05,440
and if it's you know something beyond

735
00:24:05,440 --> 00:24:06,960
just a straight-up crash and a bunch of

736
00:24:06,960 --> 00:24:08,559
core dumps it can be quite tricky to

737
00:24:08,559 --> 00:24:09,600
know that you've found something

738
00:24:09,600 --> 00:24:11,360
interesting with your fuzzer

739
00:24:11,360 --> 00:24:14,320
um there's a little bit of an art so

740
00:24:14,320 --> 00:24:16,080
first of all it involves knowing

741
00:24:16,080 --> 00:24:18,159
um knowing what your baseline metrics

742
00:24:18,159 --> 00:24:19,919
look like right what do your metrics

743
00:24:19,919 --> 00:24:20,559
look like

744
00:24:20,559 --> 00:24:22,320
in production what does the deviation

745
00:24:22,320 --> 00:24:24,400
from those metrics look like

746
00:24:24,400 --> 00:24:26,559
um especially memory usage that's a big

747
00:24:26,559 --> 00:24:28,080
one

748
00:24:28,080 --> 00:24:29,840
and then being able to isolate and

749
00:24:29,840 --> 00:24:31,279
reproduce down to see

750
00:24:31,279 --> 00:24:33,120
you know do we have an actual memory

751
00:24:33,120 --> 00:24:34,799
leak or is it just that we've allocated

752
00:24:34,799 --> 00:24:36,320
more buffers and so we're using more

753
00:24:36,320 --> 00:24:37,520
memory

754
00:24:37,520 --> 00:24:39,039
right because those are both are both

755
00:24:39,039 --> 00:24:40,640
are potentially valid and both

756
00:24:40,640 --> 00:24:42,799
may look the same in your metrics to an

757
00:24:42,799 --> 00:24:44,799
untrained eye

758
00:24:44,799 --> 00:24:46,559
likewise being able to scan through your

759
00:24:46,559 --> 00:24:48,640
logs look for look for anomalous log

760
00:24:48,640 --> 00:24:50,320
readouts especially if you've got

761
00:24:50,320 --> 00:24:53,360
um really good logger logging or

762
00:24:53,360 --> 00:24:55,520
observability wired in

763
00:24:55,520 --> 00:24:57,039
you can also look for side effects

764
00:24:57,039 --> 00:24:58,480
that's especially good when you're

765
00:24:58,480 --> 00:24:59,760
trying to do

766
00:24:59,760 --> 00:25:01,200
if you've got a bunch of sql injections

767
00:25:01,200 --> 00:25:03,039
or you've got a bunch of xss

768
00:25:03,039 --> 00:25:06,080
xss is unlikely to crash your box

769
00:25:06,080 --> 00:25:08,159
sql injection may or may not right can

770
00:25:08,159 --> 00:25:09,440
be hard

771
00:25:09,440 --> 00:25:11,120
but you can craft your fuzzer with side

772
00:25:11,120 --> 00:25:13,039
effects so that you know

773
00:25:13,039 --> 00:25:16,799
um you know if

774
00:25:16,799 --> 00:25:18,640
uh you know if a certain table gets

775
00:25:18,640 --> 00:25:20,000
written to well then there was a

776
00:25:20,000 --> 00:25:21,279
successful

777
00:25:21,279 --> 00:25:24,159
a successful sql injection um or if you

778
00:25:24,159 --> 00:25:25,679
log a specific message

779
00:25:25,679 --> 00:25:28,559
only if you manage to trigger an xss an

780
00:25:28,559 --> 00:25:30,559
xss exploit

781
00:25:30,559 --> 00:25:35,360
so you can craft side effects or hooks

782
00:25:37,600 --> 00:25:39,279
and once you've got those you could also

783
00:25:39,279 --> 00:25:41,760
use an oracle to help you figure out

784
00:25:41,760 --> 00:25:43,760
what was good and what was bad

785
00:25:43,760 --> 00:25:46,400
um an oracle is just an automated way of

786
00:25:46,400 --> 00:25:47,919
making judgment calls about the things

787
00:25:47,919 --> 00:25:49,279
you found in case you don't want to

788
00:25:49,279 --> 00:25:50,960
spend the rest of your life staring at a

789
00:25:50,960 --> 00:25:52,159
dashboard of

790
00:25:52,159 --> 00:25:54,640
graph go up graph go down um and

791
00:25:54,640 --> 00:25:56,000
entailing log lines like you're in the

792
00:25:56,000 --> 00:25:57,279
matrix

793
00:25:57,279 --> 00:25:59,279
so the oracle will help you set

794
00:25:59,279 --> 00:26:01,919
thresholds on alerts that says ah

795
00:26:01,919 --> 00:26:04,400
this is bad right memory ramp like this

796
00:26:04,400 --> 00:26:05,279
this is okay

797
00:26:05,279 --> 00:26:08,000
remember ramp like this this is not okay

798
00:26:08,000 --> 00:26:11,840
uh somebody a human needs to go look

799
00:26:14,720 --> 00:26:15,919
so we talked a little bit about how you

800
00:26:15,919 --> 00:26:17,840
can find it and here's you know some of

801
00:26:17,840 --> 00:26:19,279
the things you can find

802
00:26:19,279 --> 00:26:21,440
and these are things that i have in the

803
00:26:21,440 --> 00:26:22,880
over the over the many

804
00:26:22,880 --> 00:26:24,559
uh the many many years of my career

805
00:26:24,559 --> 00:26:26,720
these are things i have actually found

806
00:26:26,720 --> 00:26:29,440
i found lots of crashes uh whether it's

807
00:26:29,440 --> 00:26:31,440
buffer overflow or just you know top

808
00:26:31,440 --> 00:26:33,120
level exceptions

809
00:26:33,120 --> 00:26:34,880
uh depending on your language set i

810
00:26:34,880 --> 00:26:36,799
found crashes du jour

811
00:26:36,799 --> 00:26:39,760
so many crashes also a lot of memory

812
00:26:39,760 --> 00:26:41,200
problems because both because you're

813
00:26:41,200 --> 00:26:43,440
doing large allocations and also because

814
00:26:43,440 --> 00:26:45,919
um you're doing strange allocations you

815
00:26:45,919 --> 00:26:47,200
can find leaks

816
00:26:47,200 --> 00:26:48,400
um you can also find thread

817
00:26:48,400 --> 00:26:51,360
contaminations right buffer overflows

818
00:26:51,360 --> 00:26:54,559
um you can find actual exploits right

819
00:26:54,559 --> 00:26:56,559
you can find sql injection xss code

820
00:26:56,559 --> 00:26:57,200
injection

821
00:26:57,200 --> 00:26:59,200
redirect you can find all kinds of

822
00:26:59,200 --> 00:27:02,799
exploits with some well-crafted fuzz

823
00:27:04,840 --> 00:27:07,840
attacks

824
00:27:13,679 --> 00:27:16,320
so there is if you are interested there

825
00:27:16,320 --> 00:27:17,919
is an open source rebound that's at this

826
00:27:17,919 --> 00:27:19,600
github link and i'll post about it as

827
00:27:19,600 --> 00:27:20,640
well

828
00:27:20,640 --> 00:27:24,399
in the chat it's a it's net core based

829
00:27:24,399 --> 00:27:25,600
it's extremely lightweight

830
00:27:25,600 --> 00:27:30,000
it's a library that's meant to be used

831
00:27:30,000 --> 00:27:31,760
to make it very easy to define your data

832
00:27:31,760 --> 00:27:33,679
model we use it actually as a part of

833
00:27:33,679 --> 00:27:36,000
unit testing because it has

834
00:27:36,000 --> 00:27:38,320
it has reusable seeds so you can

835
00:27:38,320 --> 00:27:39,919
generate the same seed and have

836
00:27:39,919 --> 00:27:43,360
reusable test case runs um but there's a

837
00:27:43,360 --> 00:27:45,039
simple fuzzing library that you can use

838
00:27:45,039 --> 00:27:46,159
it's open source you're welcome to

839
00:27:46,159 --> 00:27:48,399
contribute play around with it

840
00:27:48,399 --> 00:27:51,199
no problems

841
00:27:52,159 --> 00:27:55,600
and we are going actually to take a look

842
00:27:55,600 --> 00:27:58,559
at what that looks like

843
00:27:58,559 --> 00:28:01,760
so here let's see here there we go

844
00:28:01,760 --> 00:28:05,360
here is our fuzzer so you can see here

845
00:28:05,360 --> 00:28:08,159
um i've got a very simple program that's

846
00:28:08,159 --> 00:28:10,240
using the fuzzing library to define

847
00:28:10,240 --> 00:28:13,360
a data model and i apologize maybe it's

848
00:28:13,360 --> 00:28:17,840
maybe a little small

849
00:28:18,559 --> 00:28:21,279
there we go so you can see here that we

850
00:28:21,279 --> 00:28:23,200
have a very simple default strategy

851
00:28:23,200 --> 00:28:24,559
which is the plan we're going to use to

852
00:28:24,559 --> 00:28:25,919
fuzz this http

853
00:28:25,919 --> 00:28:29,440
um this this very simple http method

854
00:28:29,440 --> 00:28:32,159
uh a simple http message we're not

855
00:28:32,159 --> 00:28:33,760
fuzzing the method

856
00:28:33,760 --> 00:28:35,039
we're gonna set some very simple

857
00:28:35,039 --> 00:28:37,440
probabilities define our model

858
00:28:37,440 --> 00:28:39,360
we're gonna send some requests here so

859
00:28:39,360 --> 00:28:45,840
let's actually take a look at that

860
00:28:49,360 --> 00:28:51,600
so here we go we've generated some very

861
00:28:51,600 --> 00:28:52,559
simple requests

862
00:28:52,559 --> 00:28:54,480
just a random website on the internet

863
00:28:54,480 --> 00:28:56,320
just you know whatever

864
00:28:56,320 --> 00:28:57,760
you can see they're extremely simple

865
00:28:57,760 --> 00:28:59,120
they've got a count on them we've got a

866
00:28:59,120 --> 00:29:00,159
quarry line they got some

867
00:29:00,159 --> 00:29:02,480
got some headers got a cookie but it's a

868
00:29:02,480 --> 00:29:04,480
really simple cookie

869
00:29:04,480 --> 00:29:08,320
so great now we're gonna fuzz them

870
00:29:10,880 --> 00:29:13,600
so we generated some a's and this is a

871
00:29:13,600 --> 00:29:14,480
random seed

872
00:29:14,480 --> 00:29:17,200
so every run is different never know

873
00:29:17,200 --> 00:29:18,480
what you're going to get

874
00:29:18,480 --> 00:29:19,760
but it looks like it did a pretty good

875
00:29:19,760 --> 00:29:23,039
job here we can see we fuzzed within the

876
00:29:23,039 --> 00:29:24,640
accept encoding header so it's still a

877
00:29:24,640 --> 00:29:26,080
valid header it just has

878
00:29:26,080 --> 00:29:29,600
this uh this

879
00:29:29,600 --> 00:29:30,960
i'm not sure what attack it is but it's

880
00:29:30,960 --> 00:29:33,120
definitely a fuzz db attack injected in

881
00:29:33,120 --> 00:29:34,000
here

882
00:29:34,000 --> 00:29:36,240
um we can also see that there's so many

883
00:29:36,240 --> 00:29:38,240
a's and it's got oh look there's a

884
00:29:38,240 --> 00:29:40,880
exercise vulnerability in here looks

885
00:29:40,880 --> 00:29:43,440
like uh

886
00:29:45,360 --> 00:29:47,440
so this is one request here and we can

887
00:29:47,440 --> 00:29:48,799
see the query line

888
00:29:48,799 --> 00:29:52,559
uh is massive with some additional

889
00:29:52,559 --> 00:29:54,399
injections in there see if we can find

890
00:29:54,399 --> 00:29:57,520
anything else interesting in here

891
00:29:57,520 --> 00:30:00,799
so many a's it's full of a's ah here we

892
00:30:00,799 --> 00:30:02,559
can see that it looks like there's a sql

893
00:30:02,559 --> 00:30:04,799
vulnerability in here

894
00:30:04,799 --> 00:30:08,880
um access alert in here

895
00:30:08,880 --> 00:30:10,720
but for the most part the requests are

896
00:30:10,720 --> 00:30:13,440
actually pretty well formed they're just

897
00:30:13,440 --> 00:30:16,720
uh they're just full of a's so if we

898
00:30:16,720 --> 00:30:18,720
were to actually send these requests

899
00:30:18,720 --> 00:30:22,799
i want you all the way down

900
00:30:22,799 --> 00:30:25,760
where did you go here if we're gonna

901
00:30:25,760 --> 00:30:28,320
actually send these requests now

902
00:30:28,320 --> 00:30:31,840
here we go two of them had bad paths one

903
00:30:31,840 --> 00:30:32,399
of them

904
00:30:32,399 --> 00:30:34,240
interesting right uri too long that's an

905
00:30:34,240 --> 00:30:36,000
interesting test case

906
00:30:36,000 --> 00:30:39,279
and then two of them 503

907
00:30:41,279 --> 00:30:46,960
so if we want to change our seed

908
00:30:49,200 --> 00:30:52,480
you can see something else happen

909
00:31:00,000 --> 00:31:01,760
here we go we're going to fuzz some new

910
00:31:01,760 --> 00:31:04,559
requests maybe we'll see less a's yeah

911
00:31:04,559 --> 00:31:04,880
see

912
00:31:04,880 --> 00:31:07,440
less a's here so let's see let's see

913
00:31:07,440 --> 00:31:10,240
what happened here

914
00:31:11,760 --> 00:31:12,880
let's see this one

915
00:31:12,880 --> 00:31:16,080
[Music]

916
00:31:16,080 --> 00:31:17,600
might not have had anything bad happen

917
00:31:17,600 --> 00:31:20,240
to it this one did right we got a very

918
00:31:20,240 --> 00:31:24,159
modest amount of a's injected in here

919
00:31:29,679 --> 00:31:31,360
interesting things happen so if we send

920
00:31:31,360 --> 00:31:32,880
these requests

921
00:31:32,880 --> 00:31:34,240
totally different thing right probably

922
00:31:34,240 --> 00:31:35,679
one of them had their path found and the

923
00:31:35,679 --> 00:31:37,200
other ones were accepted

924
00:31:37,200 --> 00:31:40,799
the other ones were okay and so imagine

925
00:31:40,799 --> 00:31:42,880
this reproduce not over you know five

926
00:31:42,880 --> 00:31:44,320
requests at a time

927
00:31:44,320 --> 00:31:46,960
five requests per second right five

928
00:31:46,960 --> 00:31:48,080
requests per second

929
00:31:48,080 --> 00:31:51,519
is 300 requests per minute um

930
00:31:51,519 --> 00:31:52,880
i'm not going to keep doing math here

931
00:31:52,880 --> 00:31:54,880
but you can see how this can add up very

932
00:31:54,880 --> 00:31:55,440
quickly

933
00:31:55,440 --> 00:31:58,240
when you're fuzzing at scale so no now

934
00:31:58,240 --> 00:31:59,600
imagine not five requests per second but

935
00:31:59,600 --> 00:32:01,760
50 requests per second that's 300

936
00:32:01,760 --> 00:32:05,039
or 30 000 test cases per minute

937
00:32:05,039 --> 00:32:06,799
that's a lot of that's a lot of room for

938
00:32:06,799 --> 00:32:08,320
ace that's a lot of room for

939
00:32:08,320 --> 00:32:10,159
vulnerabilities uh but more importantly

940
00:32:10,159 --> 00:32:11,919
you have the scale in order to drive out

941
00:32:11,919 --> 00:32:13,600
interesting behavior

942
00:32:13,600 --> 00:32:16,720
because oftentimes bugs are not just

943
00:32:16,720 --> 00:32:18,559
dependent upon a bad code path but

944
00:32:18,559 --> 00:32:19,840
they're a bad

945
00:32:19,840 --> 00:32:21,279
driving them out can be a combination of

946
00:32:21,279 --> 00:32:22,960
a bad code path at scale right

947
00:32:22,960 --> 00:32:23,600
especially when you've got

948
00:32:23,600 --> 00:32:25,039
multi-threading going on

949
00:32:25,039 --> 00:32:27,120
and you've got interactions of you know

950
00:32:27,120 --> 00:32:28,640
thread deadlocks you've got interactions

951
00:32:28,640 --> 00:32:29,840
with different threads one against the

952
00:32:29,840 --> 00:32:30,880
other you've got

953
00:32:30,880 --> 00:32:32,960
memory cross contamination all of those

954
00:32:32,960 --> 00:32:34,399
things are much much more

955
00:32:34,399 --> 00:32:37,120
interesting when you're operating at

956
00:32:37,120 --> 00:32:38,640
some sort of scale

957
00:32:38,640 --> 00:32:43,840
memory pressure cpu pressure etc

958
00:32:45,440 --> 00:32:49,519
so that's that's a very simple fuzzer

959
00:32:49,519 --> 00:32:57,840
does very simple things

960
00:32:57,840 --> 00:33:00,320
yeah so if you want to explore a little

961
00:33:00,320 --> 00:33:01,440
more

962
00:33:01,440 --> 00:33:03,120
of course you're welcome to go grab that

963
00:33:03,120 --> 00:33:05,518
repo

964
00:33:07,519 --> 00:33:11,840
but likewise

965
00:33:12,159 --> 00:33:14,720
there are some other further readings

966
00:33:14,720 --> 00:33:16,880
reading hints here for you

967
00:33:16,880 --> 00:33:18,880
um the fuzzy book is actually a really

968
00:33:18,880 --> 00:33:20,320
great entry level

969
00:33:20,320 --> 00:33:23,440
um entry to introduction to fuzzing uses

970
00:33:23,440 --> 00:33:25,279
a lot of python uses a lot of actual

971
00:33:25,279 --> 00:33:26,320
code examples

972
00:33:26,320 --> 00:33:29,120
um in python uh walks you through sort

973
00:33:29,120 --> 00:33:30,640
of setting up fuzzing from beginning to

974
00:33:30,640 --> 00:33:31,679
end

975
00:33:31,679 --> 00:33:33,519
uh you heard me mention afl before

976
00:33:33,519 --> 00:33:35,760
american fuzzy lop

977
00:33:35,760 --> 00:33:37,760
i believe google puts took it over yeah

978
00:33:37,760 --> 00:33:39,440
google's got it um

979
00:33:39,440 --> 00:33:40,799
uses code coverage for genetic

980
00:33:40,799 --> 00:33:42,799
algorithms really great if you've got

981
00:33:42,799 --> 00:33:44,480
input output based application or a

982
00:33:44,480 --> 00:33:46,240
single box application

983
00:33:46,240 --> 00:33:47,919
especially one in a language that it can

984
00:33:47,919 --> 00:33:50,559
parse mostly c

985
00:33:50,559 --> 00:33:52,000
fantastic solve your problem you don't

986
00:33:52,000 --> 00:33:53,679
need you don't need me for that

987
00:33:53,679 --> 00:33:55,120
you can just go grab the tool and

988
00:33:55,120 --> 00:33:56,960
install it and run with it

989
00:33:56,960 --> 00:33:58,880
uh fuzz db is actually where my

990
00:33:58,880 --> 00:34:00,720
dictionary of useful attacks

991
00:34:00,720 --> 00:34:02,720
came from and i will show you a little

992
00:34:02,720 --> 00:34:07,200
bit about what that looks like

993
00:34:07,200 --> 00:34:10,320
here and so fuzz db

994
00:34:10,320 --> 00:34:13,359
is an open source

995
00:34:13,359 --> 00:34:16,560
set of things so

996
00:34:16,560 --> 00:34:21,119
for example it's just a list of proven

997
00:34:21,119 --> 00:34:23,359
um proven vulnerabilities so for example

998
00:34:23,359 --> 00:34:25,520
here's a stat of things that have been

999
00:34:25,520 --> 00:34:27,599
proven to drive the cause problems in

1000
00:34:27,599 --> 00:34:34,239
mongodb likewise here is some

1001
00:34:34,239 --> 00:34:38,320
db2 sql injection my sequel local file

1002
00:34:38,320 --> 00:34:41,119
read vulnerabilities

1003
00:34:41,119 --> 00:34:43,679
here's some

1004
00:34:44,320 --> 00:34:48,000
good old xss

1005
00:34:48,000 --> 00:34:49,679
look pretty familiar to anybody who's

1006
00:34:49,679 --> 00:34:51,679
ever played with xss even once

1007
00:34:51,679 --> 00:34:55,679
this is yeah this is standard

1008
00:34:55,839 --> 00:34:59,520
um but yeah so that's fuzz tv

1009
00:34:59,760 --> 00:35:02,240
free for anybody to go and look up uh

1010
00:35:02,240 --> 00:35:03,920
use attacks that have been proven to be

1011
00:35:03,920 --> 00:35:04,880
useful

1012
00:35:04,880 --> 00:35:06,720
um likewise on blackguard there's a list

1013
00:35:06,720 --> 00:35:08,640
of fuss testing and of course if you use

1014
00:35:08,640 --> 00:35:09,280
kali

1015
00:35:09,280 --> 00:35:12,160
um kali has lots and lots of built-in

1016
00:35:12,160 --> 00:35:14,160
security cools one uh several of which

1017
00:35:14,160 --> 00:35:15,599
are to enable you to do fuzzing on your

1018
00:35:15,599 --> 00:35:16,880
own

1019
00:35:16,880 --> 00:35:19,200
whether that's via a proxy or a couple

1020
00:35:19,200 --> 00:35:20,320
other tools there's a bunch of stuff on

1021
00:35:20,320 --> 00:35:23,200
there that's useful

1022
00:35:27,200 --> 00:35:31,839
so let's see here

1023
00:35:34,079 --> 00:35:37,359
that's about it thank you all so much

1024
00:35:37,359 --> 00:35:39,520
i'm excited to answer questions

1025
00:35:39,520 --> 00:35:41,520
we can deep dive through plenty through

1026
00:35:41,520 --> 00:35:43,359
some code i've got no problems showing

1027
00:35:43,359 --> 00:35:45,440
code or showing some more test cases

1028
00:35:45,440 --> 00:35:47,280
we can run some more fuzzing paths we

1029
00:35:47,280 --> 00:35:48,560
are back here

1030
00:35:48,560 --> 00:35:51,440
i i told you this was going to be a very

1031
00:35:51,440 --> 00:35:52,480
interesting talk

1032
00:35:52,480 --> 00:35:55,520
and now is the time for q a so let me

1033
00:35:55,520 --> 00:35:57,839
welcome

1034
00:35:57,839 --> 00:36:01,440
hi thank you hey everybody

1035
00:36:01,440 --> 00:36:03,920
enjoy yes we already have some questions

1036
00:36:03,920 --> 00:36:06,640
like is your sample code in c sharp

1037
00:36:06,640 --> 00:36:09,119
yes the sample code is in c sharp the

1038
00:36:09,119 --> 00:36:11,119
library itself is in dot net standard

1039
00:36:11,119 --> 00:36:13,599
2-1 so it's compatible with.net core or

1040
00:36:13,599 --> 00:36:16,480
net framework i loved your talk we were

1041
00:36:16,480 --> 00:36:18,480
talking backstage that it's so

1042
00:36:18,480 --> 00:36:21,440
interesting uh so technical and you are

1043
00:36:21,440 --> 00:36:22,079
very

1044
00:36:22,079 --> 00:36:23,680
uh you explain very well what you're

1045
00:36:23,680 --> 00:36:26,320
doing so it was amazing so

1046
00:36:26,320 --> 00:36:29,280
i want to thank you uh publicly again

1047
00:36:29,280 --> 00:36:30,000
once more

1048
00:36:30,000 --> 00:36:31,520
for everything that you're doing for us

1049
00:36:31,520 --> 00:36:33,599
and for for participating enough uh

1050
00:36:33,599 --> 00:36:36,400
now pink on um for the audience if you

1051
00:36:36,400 --> 00:36:37,680
have any questions

1052
00:36:37,680 --> 00:36:41,040
again you know you can post them in here

1053
00:36:41,040 --> 00:36:42,320
on twitch or

1054
00:36:42,320 --> 00:36:45,680
using our discord channel uh so i'm

1055
00:36:45,680 --> 00:36:46,400
gonna be

1056
00:36:46,400 --> 00:36:50,079
waiting for those questions in case you

1057
00:36:50,079 --> 00:36:53,920
you wanna ask melissa something so um

1058
00:36:53,920 --> 00:36:55,520
yeah

1059
00:36:55,520 --> 00:36:57,200
yeah thank you you know first for having

1060
00:36:57,200 --> 00:36:59,280
me i was really excited to

1061
00:36:59,280 --> 00:37:01,040
to speak today i love talking about

1062
00:37:01,040 --> 00:37:02,480
buzzing um

1063
00:37:02,480 --> 00:37:04,000
i don't get to do nearly as much as i

1064
00:37:04,000 --> 00:37:05,920
used to once upon a time when i wrote

1065
00:37:05,920 --> 00:37:10,240
a lot of code in my day job uh-huh

1066
00:37:10,240 --> 00:37:12,640
yeah so it's it's so interesting and i

1067
00:37:12,640 --> 00:37:13,920
think it it's

1068
00:37:13,920 --> 00:37:17,040
so uh interesting talk about i'm sorry

1069
00:37:17,040 --> 00:37:18,800
it's it's very interesting to talk about

1070
00:37:18,800 --> 00:37:19,680
security

1071
00:37:19,680 --> 00:37:21,920
when it comes to development because uh

1072
00:37:21,920 --> 00:37:23,359
there there's so much

1073
00:37:23,359 --> 00:37:26,800
improvement that we have to apply yet

1074
00:37:26,800 --> 00:37:29,119
uh for many companies and developers

1075
00:37:29,119 --> 00:37:31,839
that don't take security into account

1076
00:37:31,839 --> 00:37:34,000
so it's good to create awareness and

1077
00:37:34,000 --> 00:37:36,320
public events like this one um

1078
00:37:36,320 --> 00:37:38,400
about how you can secure your code and

1079
00:37:38,400 --> 00:37:40,160
find different uh flaws

1080
00:37:40,160 --> 00:37:43,440
using uh very uh i think intuitive

1081
00:37:43,440 --> 00:37:46,960
uh tools uh other that's uh

1082
00:37:46,960 --> 00:37:50,400
up for discussion so i'm not

1083
00:37:50,400 --> 00:37:52,000
sure that the audience thinks the same

1084
00:37:52,000 --> 00:37:55,599
but uh they are very easy to to use and

1085
00:37:55,599 --> 00:37:58,160
following your methodology you can

1086
00:37:58,160 --> 00:37:59,440
integrate this

1087
00:37:59,440 --> 00:38:02,800
testing tools to the the testing

1088
00:38:02,800 --> 00:38:04,240
strategy that you have already

1089
00:38:04,240 --> 00:38:06,000
implemented so

1090
00:38:06,000 --> 00:38:08,800
it's a it's a public service that you're

1091
00:38:08,800 --> 00:38:09,280
doing

1092
00:38:09,280 --> 00:38:13,040
here to secure apps everywhere

1093
00:38:13,040 --> 00:38:16,240
yes i'm a huge fan of integrating

1094
00:38:16,240 --> 00:38:18,960
uh develop integrating testing and

1095
00:38:18,960 --> 00:38:19,760
security

1096
00:38:19,760 --> 00:38:22,079
as part of the first like first party

1097
00:38:22,079 --> 00:38:23,520
process of getting code out with the

1098
00:38:23,520 --> 00:38:25,040
rest of the development pipeline

1099
00:38:25,040 --> 00:38:27,280
um like like in the cicd talk earlier

1100
00:38:27,280 --> 00:38:29,280
right everything that i do and that my

1101
00:38:29,280 --> 00:38:29,920
teams do

1102
00:38:29,920 --> 00:38:32,480
has to happen as a part of the cicd

1103
00:38:32,480 --> 00:38:33,760
pipeline is to happen as early as

1104
00:38:33,760 --> 00:38:34,880
possible so

1105
00:38:34,880 --> 00:38:36,480
security right happens built into the

1106
00:38:36,480 --> 00:38:38,480
cicd pipeline happens

1107
00:38:38,480 --> 00:38:40,640
certainly no later than code building

1108
00:38:40,640 --> 00:38:42,000
but um

1109
00:38:42,000 --> 00:38:44,160
earlier the better the same with all

1110
00:38:44,160 --> 00:38:45,200
testing right

1111
00:38:45,200 --> 00:38:48,880
security is is a type of testing

1112
00:38:48,880 --> 00:38:51,280
exactly totally um we have a question

1113
00:38:51,280 --> 00:38:53,760
here how did you get started in buzzing

1114
00:38:53,760 --> 00:38:57,040
you are truly a queen of code as your

1115
00:38:57,040 --> 00:38:57,680
twitter

1116
00:38:57,680 --> 00:38:59,920
handle says so you have so much

1117
00:38:59,920 --> 00:39:01,599
experience uh perhaps you can tell

1118
00:39:01,599 --> 00:39:02,880
something about your journey

1119
00:39:02,880 --> 00:39:06,320
towards buzzing yeah so i

1120
00:39:06,320 --> 00:39:08,480
started with fuzzing um by actually

1121
00:39:08,480 --> 00:39:10,160
going to a talk

1122
00:39:10,160 --> 00:39:11,920
through it was an internal company talk

1123
00:39:11,920 --> 00:39:13,599
presenting what fuzzing was

1124
00:39:13,599 --> 00:39:16,400
um and presenting you know the the types

1125
00:39:16,400 --> 00:39:17,520
of things that you could find with

1126
00:39:17,520 --> 00:39:18,240
fuzzing very

1127
00:39:18,240 --> 00:39:19,599
you know very similar to my talk but

1128
00:39:19,599 --> 00:39:21,599
given you 10 years ago

1129
00:39:21,599 --> 00:39:24,800
um and so from there i found some

1130
00:39:24,800 --> 00:39:26,720
resources and i explored with it i

1131
00:39:26,720 --> 00:39:29,280
made a proposal to my manager at the

1132
00:39:29,280 --> 00:39:30,160
time that i

1133
00:39:30,160 --> 00:39:31,839
was responsible for this system and i

1134
00:39:31,839 --> 00:39:34,000
wanted to do an experiment to see what

1135
00:39:34,000 --> 00:39:35,599
would happen and that's

1136
00:39:35,599 --> 00:39:37,200
that's you know the basis for the tool

1137
00:39:37,200 --> 00:39:39,119
that we talked about that i talked about

1138
00:39:39,119 --> 00:39:40,000
first

1139
00:39:40,000 --> 00:39:43,200
today so i just started with learning a

1140
00:39:43,200 --> 00:39:44,720
little bit and then experimenting and

1141
00:39:44,720 --> 00:39:46,880
that's pretty much how i started with

1142
00:39:46,880 --> 00:39:48,480
everything which is learn a little bit

1143
00:39:48,480 --> 00:39:50,079
and then experiment and then you learn a

1144
00:39:50,079 --> 00:39:51,440
little more

1145
00:39:51,440 --> 00:39:54,640
that's a great advice um someone here is

1146
00:39:54,640 --> 00:39:57,920
asking for the link and github um

1147
00:39:57,920 --> 00:40:01,200
for the sample code so oh

1148
00:40:01,200 --> 00:40:04,640
someone shared it afterwards but if you

1149
00:40:04,640 --> 00:40:06,000
have any other resources that you want

1150
00:40:06,000 --> 00:40:06,560
to share

1151
00:40:06,560 --> 00:40:10,400
you cannot do it later on on the discord

1152
00:40:10,400 --> 00:40:13,520
channel via text we have some people

1153
00:40:13,520 --> 00:40:14,319
that's right

1154
00:40:14,319 --> 00:40:17,280
are writing questions right now so let

1155
00:40:17,280 --> 00:40:18,800
me

1156
00:40:18,800 --> 00:40:20,960
paste the uh uh or they already got it

1157
00:40:20,960 --> 00:40:22,319
never mind

1158
00:40:22,319 --> 00:40:26,480
yes uh you're fast

1159
00:40:26,480 --> 00:40:28,400
if you come next year to nothing con we

1160
00:40:28,400 --> 00:40:31,920
will gift you a t-shirt full of aaa's

1161
00:40:31,920 --> 00:40:33,839
i would be delighted to come next year

1162
00:40:33,839 --> 00:40:35,680
to not think

1163
00:40:35,680 --> 00:40:38,400
we'd be delighted to have you back yes

1164
00:40:38,400 --> 00:40:39,200
those of you

1165
00:40:39,200 --> 00:40:41,119
i'm sure nobody knows my family is from

1166
00:40:41,119 --> 00:40:42,480
buenos aires so

1167
00:40:42,480 --> 00:40:46,079
i'm always happy to come to you

1168
00:40:46,079 --> 00:40:47,440
please don't make me give my buzzing

1169
00:40:47,440 --> 00:40:52,160
talk in spanish you won't like it it's

1170
00:40:52,160 --> 00:40:54,480
better than my english that's for sure

1171
00:40:54,480 --> 00:40:59,280
no no i'm doing my best

1172
00:40:59,280 --> 00:41:00,640
you're doing much better than i would be

1173
00:41:00,640 --> 00:41:04,000
doing in spanish i promise

1174
00:41:04,319 --> 00:41:06,400
okay um we have another question what is

1175
00:41:06,400 --> 00:41:09,599
your opinion on cis certifications

1176
00:41:09,599 --> 00:41:11,760
um that is a good question i am not a

1177
00:41:11,760 --> 00:41:12,960
good person to give

1178
00:41:12,960 --> 00:41:15,440
an answer i don't tend to evaluate

1179
00:41:15,440 --> 00:41:17,920
people based on their certifications

1180
00:41:17,920 --> 00:41:21,119
um i tend to get more practical tests

1181
00:41:21,119 --> 00:41:22,560
when i'm hiring so

1182
00:41:22,560 --> 00:41:24,560
i cannot give you an opinion either way

1183
00:41:24,560 --> 00:41:25,680
i know lots of people

1184
00:41:25,680 --> 00:41:28,720
feel very strongly about certifications

1185
00:41:28,720 --> 00:41:30,720
yeah i know and it's kind of like a

1186
00:41:30,720 --> 00:41:32,880
trend i see people are obsessed with

1187
00:41:32,880 --> 00:41:34,960
certifications security certifications

1188
00:41:34,960 --> 00:41:35,280
but

1189
00:41:35,280 --> 00:41:37,920
uh there are other types of um courses

1190
00:41:37,920 --> 00:41:39,839
and certifications that are so much

1191
00:41:39,839 --> 00:41:42,720
more interesting perhaps than um

1192
00:41:42,720 --> 00:41:44,079
security ones but

1193
00:41:44,079 --> 00:41:48,640
i'm talking about myself

1194
00:41:48,640 --> 00:41:50,240
right when i was coming up and starting

1195
00:41:50,240 --> 00:41:53,119
in the industry certifications were not

1196
00:41:53,119 --> 00:41:56,240
it was different than it is now so

1197
00:41:56,240 --> 00:41:57,760
it was it wasn't a thing for me so i'm

1198
00:41:57,760 --> 00:42:00,720
just not as fluent with than you know

1199
00:42:00,720 --> 00:42:03,839
the needs of a certification yes

1200
00:42:03,839 --> 00:42:06,640
totally i get it um some people are kind

1201
00:42:06,640 --> 00:42:07,359
of obsessed

1202
00:42:07,359 --> 00:42:10,160
with them there are other ways to prove

1203
00:42:10,160 --> 00:42:11,200
knowledge

1204
00:42:11,200 --> 00:42:12,480
yeah there's lots of ways to prove

1205
00:42:12,480 --> 00:42:13,359
knowledge you can do certain the

1206
00:42:13,359 --> 00:42:14,960
certification route you can do

1207
00:42:14,960 --> 00:42:17,359
the open source repo route you can do

1208
00:42:17,359 --> 00:42:19,280
just proving it in an interview group

1209
00:42:19,280 --> 00:42:21,520
there's lots of different ways

1210
00:42:21,520 --> 00:42:24,720
totally i agree uh we have a another

1211
00:42:24,720 --> 00:42:25,359
question here

1212
00:42:25,359 --> 00:42:27,520
are there any online platforms for

1213
00:42:27,520 --> 00:42:28,720
learning uh

1214
00:42:28,720 --> 00:42:31,839
that you recommend

1215
00:42:31,839 --> 00:42:34,720
um online platforms for learning so it

1216
00:42:34,720 --> 00:42:36,480
sort of depends on how you like to learn

1217
00:42:36,480 --> 00:42:37,119
so

1218
00:42:37,119 --> 00:42:40,480
um i will say my friend tanya janka has

1219
00:42:40,480 --> 00:42:41,119
a

1220
00:42:41,119 --> 00:42:42,800
she hacks purple is her twitter account

1221
00:42:42,800 --> 00:42:44,560
she has um

1222
00:42:44,560 --> 00:42:45,760
a website i think is called we

1223
00:42:45,760 --> 00:42:47,440
hackpurple.dev that she's putting

1224
00:42:47,440 --> 00:42:49,280
together a learning

1225
00:42:49,280 --> 00:42:51,520
a learning platform specifically for

1226
00:42:51,520 --> 00:42:53,680
people who want to get into infosec

1227
00:42:53,680 --> 00:42:55,440
so i i definitely approve of that and

1228
00:42:55,440 --> 00:42:57,200
not just because i was on her podcast

1229
00:42:57,200 --> 00:42:58,319
the other day

1230
00:42:58,319 --> 00:43:01,440
um and she that's a pretty good place to

1231
00:43:01,440 --> 00:43:02,720
start she's got a lot of good resources

1232
00:43:02,720 --> 00:43:04,400
for people who want to start

1233
00:43:04,400 --> 00:43:08,000
um in infosec um otherwise i just

1234
00:43:08,000 --> 00:43:10,240
tend to float around and see you know

1235
00:43:10,240 --> 00:43:13,040
see who see who

1236
00:43:13,040 --> 00:43:14,800
see what talks are being recommended out

1237
00:43:14,800 --> 00:43:17,040
of my network because

1238
00:43:17,040 --> 00:43:18,960
it changes so quickly as a field that

1239
00:43:18,960 --> 00:43:20,720
the platform that was the best platform

1240
00:43:20,720 --> 00:43:22,319
last year is not the best platform this

1241
00:43:22,319 --> 00:43:24,640
year oh totally

1242
00:43:24,640 --> 00:43:29,200
target a year ago

1243
00:43:29,200 --> 00:43:31,599
yes totally i totally agree the

1244
00:43:31,599 --> 00:43:32,800
technology changes

1245
00:43:32,800 --> 00:43:36,079
so fast um

1246
00:43:36,079 --> 00:43:39,359
if you feel free you feel free to

1247
00:43:39,359 --> 00:43:41,119
share those links uh afterwards on our

1248
00:43:41,119 --> 00:43:43,200
discord channel because i'm sure many of

1249
00:43:43,200 --> 00:43:45,599
these people in the audience are really

1250
00:43:45,599 --> 00:43:46,800
very interesting

1251
00:43:46,800 --> 00:43:50,079
in checking them out yeah so i will put

1252
00:43:50,079 --> 00:43:52,319
those in the discord

1253
00:43:52,319 --> 00:43:55,520
since well um does anybody else have a

1254
00:43:55,520 --> 00:43:56,800
question

1255
00:43:56,800 --> 00:44:01,520
yes someone says so yes please

1256
00:44:01,680 --> 00:44:05,520
exactly everybody's asking foolings

1257
00:44:05,520 --> 00:44:08,079
so yes we will share them with you yeah

1258
00:44:08,079 --> 00:44:10,880
i will share them i promise

1259
00:44:10,880 --> 00:44:13,440
okay melissa it has been so good to have

1260
00:44:13,440 --> 00:44:14,160
you here

1261
00:44:14,160 --> 00:44:16,560
uh thank you again we are so grateful

1262
00:44:16,560 --> 00:44:18,640
for your talk you have made this event

1263
00:44:18,640 --> 00:44:19,520
even better

1264
00:44:19,520 --> 00:44:21,760
uh you and all the speakers who are so

1265
00:44:21,760 --> 00:44:23,040
we are so thankful

1266
00:44:23,040 --> 00:44:26,000
um so uh if you have anything else to

1267
00:44:26,000 --> 00:44:26,480
say

1268
00:44:26,480 --> 00:44:28,640
if you want to comment on uh fuzzing

1269
00:44:28,640 --> 00:44:29,680
something else

1270
00:44:29,680 --> 00:44:32,319
feel free to do it otherwise uh we just

1271
00:44:32,319 --> 00:44:34,480
want to thank you for your participation

1272
00:44:34,480 --> 00:44:37,520
and i think that'll be all

1273
00:44:37,520 --> 00:44:39,440
yeah thanks a lot if you're interested

1274
00:44:39,440 --> 00:44:41,280
of course to learn more there's the the

1275
00:44:41,280 --> 00:44:43,040
github repos open source feel free to

1276
00:44:43,040 --> 00:44:45,200
open issues or make pull requests or

1277
00:44:45,200 --> 00:44:47,920
just make commentary um and i'll see you

1278
00:44:47,920 --> 00:44:50,720
all see you on the discord

1279
00:44:50,720 --> 00:44:53,760
great we will so i'll leave you

1280
00:44:53,760 --> 00:44:57,680
uh i'll leave the audience and uh

1281
00:44:57,680 --> 00:45:00,560
and uh every one of you with uh sheila

1282
00:45:00,560 --> 00:45:01,359
next

1283
00:45:01,359 --> 00:45:04,800
because we have the last talk coming on

1284
00:45:04,800 --> 00:45:09,359
unfortunately this event is coming to an

1285
00:45:09,390 --> 00:45:15,098
[Music]

1286
00:45:16,839 --> 00:45:19,839
end

1287
00:45:30,839 --> 00:45:33,839
so

1288
00:45:39,820 --> 00:45:42,800
[Music]

1289
00:45:42,800 --> 00:45:44,790
[Applause]

1290
00:45:44,790 --> 00:46:08,400
[Music]

1291
00:46:08,400 --> 00:46:10,480
you

