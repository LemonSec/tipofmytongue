1
00:00:14,760 --> 00:00:16,759
ah

2
00:00:27,420 --> 00:00:30,790
um yeah I'm having this talk in English

3
00:00:30,790 --> 00:00:33,160
I hope there is nobody who expected in

4
00:00:33,160 --> 00:00:38,670
German yeah I want to talk a bit about

5
00:00:38,670 --> 00:00:41,530
own cloud and the encryption module in

6
00:00:41,530 --> 00:00:44,890
it but it's more like I want to talk

7
00:00:44,890 --> 00:00:47,770
about crypto design in general and this

8
00:00:47,770 --> 00:00:50,019
is just an example and what I'm looking

9
00:00:50,019 --> 00:00:53,500
at here but it's the the message is much

10
00:00:53,500 --> 00:00:56,500
more general it's not any this the back

11
00:00:56,500 --> 00:00:58,870
i'm going to show you is not i think it

12
00:00:58,870 --> 00:01:01,660
doesn't have a very high impact but it

13
00:01:01,660 --> 00:01:03,309
tells you a lot about how to design a

14
00:01:03,309 --> 00:01:07,960
cryptosystem a quick introduction about

15
00:01:07,960 --> 00:01:12,220
me I'm Hannah Burke I work part time as

16
00:01:12,220 --> 00:01:15,270
a freelance journalist you may

17
00:01:15,270 --> 00:01:18,280
occasionally read my articles on ghulam

18
00:01:18,280 --> 00:01:23,170
and I also do a fuzzing which I is

19
00:01:23,170 --> 00:01:25,450
supported by the linux foundation's core

20
00:01:25,450 --> 00:01:27,910
infrastructure initiative and yeah i had

21
00:01:27,910 --> 00:01:31,210
to talk about that earlier today and and

22
00:01:31,210 --> 00:01:33,909
occasionally but this is just like my

23
00:01:33,909 --> 00:01:37,350
private interest i do things with crypto

24
00:01:37,350 --> 00:01:43,600
and i hope you all have heard this in

25
00:01:43,600 --> 00:01:47,890
one way or another that if you do crypto

26
00:01:47,890 --> 00:01:49,600
what what you should never do is that

27
00:01:49,600 --> 00:01:52,270
inventing your own crypto algorithms

28
00:01:52,270 --> 00:01:54,479
like if you think you invented a

29
00:01:54,479 --> 00:01:56,860
super-secure cipher that nobody can

30
00:01:56,860 --> 00:02:02,280
break then it's probably not very secure

31
00:02:02,460 --> 00:02:06,220
but I want to ask you a bit like how do

32
00:02:06,220 --> 00:02:08,549
exactly do we interpret that rule

33
00:02:08,549 --> 00:02:10,360
because I think there are some

34
00:02:10,360 --> 00:02:13,079
subtleties that are not entirely clear

35
00:02:13,079 --> 00:02:16,780
and I mean this is an obvious example

36
00:02:16,780 --> 00:02:20,470
this came up on the IETF crypto working

37
00:02:20,470 --> 00:02:22,660
group list where someone presented in

38
00:02:22,660 --> 00:02:25,380
new cipher the crystalline cipher and

39
00:02:25,380 --> 00:02:28,510
there are a number of things like a yeah

40
00:02:28,510 --> 00:02:30,160
it's designed to be as secure as a

41
00:02:30,160 --> 00:02:31,870
one-time pad that's your real are

42
00:02:31,870 --> 00:02:33,910
already a sign that something might be

43
00:02:33,910 --> 00:02:36,329
strange

44
00:02:38,060 --> 00:02:40,590
yeah random source is based upon

45
00:02:40,590 --> 00:02:43,110
radioactive decay okay maybe a bit

46
00:02:43,110 --> 00:02:46,260
complicated in your smartphone hopes to

47
00:02:46,260 --> 00:02:50,130
set a new standard in security and then

48
00:02:50,130 --> 00:02:54,590
the key sizes 16 kilobyte keys and salt

49
00:02:54,590 --> 00:02:58,620
that's I think 128 kilobytes and you

50
00:02:58,620 --> 00:03:00,120
should get them from a truly random

51
00:03:00,120 --> 00:03:03,420
sauce and you can if you don't know

52
00:03:03,420 --> 00:03:05,550
where to get your randomness here's a

53
00:03:05,550 --> 00:03:07,380
URL where you can download your

54
00:03:07,380 --> 00:03:14,850
randomness is so this I mean this is

55
00:03:14,850 --> 00:03:17,160
obvious yeah that's not a serious

56
00:03:17,160 --> 00:03:21,120
project that it but you have these

57
00:03:21,120 --> 00:03:23,850
people come up every now and then on

58
00:03:23,850 --> 00:03:25,830
some crypto mailing list someone comes

59
00:03:25,830 --> 00:03:29,040
with oh I have invented a new cipher and

60
00:03:29,040 --> 00:03:31,320
then like people point out some obvious

61
00:03:31,320 --> 00:03:33,210
flaws and then they don't understand it

62
00:03:33,210 --> 00:03:38,100
and okay that's not how we do crypto but

63
00:03:38,100 --> 00:03:40,350
that's another thing and it's like okay

64
00:03:40,350 --> 00:03:42,240
we all know we should use standard

65
00:03:42,240 --> 00:03:44,220
algorithms we should use algorithms that

66
00:03:44,220 --> 00:03:46,350
a lot of people have looked at like for

67
00:03:46,350 --> 00:03:51,450
example AES or RS a or sha-256 but the

68
00:03:51,450 --> 00:03:53,280
problem is even if you use these secure

69
00:03:53,280 --> 00:03:55,140
algorithms and put them together into

70
00:03:55,140 --> 00:03:57,660
some kind of protocol that doesn't

71
00:03:57,660 --> 00:04:00,360
automatically make a secure protocol

72
00:04:00,360 --> 00:04:03,120
like we learned a lot in the past

73
00:04:03,120 --> 00:04:06,270
decades about how to put together things

74
00:04:06,270 --> 00:04:09,330
and get a bad protocol like ssl version

75
00:04:09,330 --> 00:04:12,420
3 as is ever and three the building

76
00:04:12,420 --> 00:04:15,660
blocks are mostly quite okay it uses RSA

77
00:04:15,660 --> 00:04:17,820
you can use it with AES or triple des

78
00:04:17,820 --> 00:04:20,608
that are all secure algorithms but the

79
00:04:20,608 --> 00:04:24,330
whole protocol together there are many

80
00:04:24,330 --> 00:04:26,310
subtleties like how do you do padding

81
00:04:26,310 --> 00:04:29,040
what kind of modes are you using from

82
00:04:29,040 --> 00:04:34,500
those ciphers so I would say we need to

83
00:04:34,500 --> 00:04:36,330
interpret this rule in a way that you

84
00:04:36,330 --> 00:04:37,830
should not build your own crypto

85
00:04:37,830 --> 00:04:39,810
algorithms but you also should not build

86
00:04:39,810 --> 00:04:41,850
your own crypto protocols at least not

87
00:04:41,850 --> 00:04:45,230
if you don't know what you're doing

88
00:04:46,280 --> 00:04:50,060
yeah and that brings me to own cloud now

89
00:04:50,060 --> 00:04:52,370
this catch my interest this was a press

90
00:04:52,370 --> 00:04:54,500
release they later removed it from the

91
00:04:54,500 --> 00:04:57,710
web page but there was luckily avoiders

92
00:04:57,710 --> 00:05:00,889
news message which reproduce this press

93
00:05:00,889 --> 00:05:03,440
release where they say okay they have an

94
00:05:03,440 --> 00:05:06,020
encryption module and this modular

95
00:05:06,020 --> 00:05:08,410
approach you can swap out the existing

96
00:05:08,410 --> 00:05:11,419
aes-256 encryption with the new RSA

97
00:05:11,419 --> 00:05:15,830
algorithm um RSA is from the 1970s I

98
00:05:15,830 --> 00:05:20,419
think an Aes is from 2001 so um also I

99
00:05:20,419 --> 00:05:23,480
mean RSA and AES are very different

100
00:05:23,480 --> 00:05:25,790
algorithms RSA is the public key

101
00:05:25,790 --> 00:05:28,250
algorithm and a SSM symmetric algorithm

102
00:05:28,250 --> 00:05:31,490
so this doesn't make a lot of sense to

103
00:05:31,490 --> 00:05:35,000
swap them out so okay we know on cloud

104
00:05:35,000 --> 00:05:37,820
has written a press release obviously by

105
00:05:37,820 --> 00:05:39,380
someone who doesn't know a lot about

106
00:05:39,380 --> 00:05:42,740
crypto um and that kind of got me

107
00:05:42,740 --> 00:05:44,479
interested in looking at what this

108
00:05:44,479 --> 00:05:50,360
encryption module actually does so to

109
00:05:50,360 --> 00:05:53,479
understand here is what act what this

110
00:05:53,479 --> 00:05:57,470
module does is maybe not one what one

111
00:05:57,470 --> 00:05:59,300
would expect so the threat model is a

112
00:05:59,300 --> 00:06:02,270
bit unusual the idea is you have own

113
00:06:02,270 --> 00:06:06,530
cloud installed on one server and you

114
00:06:06,530 --> 00:06:10,280
trust that server but you include some

115
00:06:10,280 --> 00:06:13,130
storage space maybe from some cloud

116
00:06:13,130 --> 00:06:17,000
provider or something that you embed and

117
00:06:17,000 --> 00:06:19,880
and you don't trust that storage space

118
00:06:19,880 --> 00:06:22,280
for example if you want to upload very

119
00:06:22,280 --> 00:06:25,580
big files you don't have enough space on

120
00:06:25,580 --> 00:06:27,289
your web server and then you have some

121
00:06:27,289 --> 00:06:29,330
external web space that you don't trust

122
00:06:29,330 --> 00:06:32,600
and so you use encryption and your keys

123
00:06:32,600 --> 00:06:34,520
are on the server where your own cloud

124
00:06:34,520 --> 00:06:37,460
itself runs but the files should be safe

125
00:06:37,460 --> 00:06:41,419
on some some potentially untrusted a

126
00:06:41,419 --> 00:06:45,950
storage space so I'd like today okay

127
00:06:45,950 --> 00:06:48,710
they are probably not a lot of people

128
00:06:48,710 --> 00:06:53,720
who need this scenario so I assume this

129
00:06:53,720 --> 00:06:55,849
is probably not used by a whole lot of

130
00:06:55,849 --> 00:06:59,620
people or so i think the

131
00:06:59,620 --> 00:07:01,520
vulnerability i'm going to show you is

132
00:07:01,520 --> 00:07:05,210
not that big of a deal but yeah as I

133
00:07:05,210 --> 00:07:07,219
said I want that you learned something

134
00:07:07,219 --> 00:07:12,379
about crypto so so the first thing I did

135
00:07:12,379 --> 00:07:14,839
is just look how do these encrypted

136
00:07:14,839 --> 00:07:18,229
files look like what's in them and they

137
00:07:18,229 --> 00:07:21,710
start with this text which says

138
00:07:21,710 --> 00:07:23,539
something H begins something about

139
00:07:23,539 --> 00:07:26,569
encryption module and now we have a

140
00:07:26,569 --> 00:07:30,169
problem with the screen resolution the

141
00:07:30,169 --> 00:07:34,219
thing on the right is a ES and then 256

142
00:07:34,219 --> 00:07:37,699
cfb okay so we know something about the

143
00:07:37,699 --> 00:07:39,560
cipher they are using they're using AES

144
00:07:39,560 --> 00:07:46,159
and they're using it in cfb mode so what

145
00:07:46,159 --> 00:07:48,919
you have to learn a bit about modes so

146
00:07:48,919 --> 00:07:52,460
AES is a block cipher that means you

147
00:07:52,460 --> 00:07:56,270
have a block off which is for AES 128

148
00:07:56,270 --> 00:07:59,300
bits and you only encrypt the block so

149
00:07:59,300 --> 00:08:01,520
the algorithm itself you cannot say

150
00:08:01,520 --> 00:08:04,099
please encrypt this text you can only

151
00:08:04,099 --> 00:08:06,710
encrypt the block so if you want to use

152
00:08:06,710 --> 00:08:09,110
AES in practice you need some kind of

153
00:08:09,110 --> 00:08:12,979
mode to use this block cipher for longer

154
00:08:12,979 --> 00:08:16,879
inputs and they're different kind of

155
00:08:16,879 --> 00:08:21,189
modes ECB so ECB is where you just

156
00:08:21,189 --> 00:08:24,770
encrypt one block by another and this is

157
00:08:24,770 --> 00:08:27,199
not really an encryption note this is

158
00:08:27,199 --> 00:08:29,029
totally insecure you should just never

159
00:08:29,029 --> 00:08:31,430
use that it's more or less just an

160
00:08:31,430 --> 00:08:34,669
example to explain block modes then

161
00:08:34,669 --> 00:08:38,568
there are quite common modes are cbc and

162
00:08:38,568 --> 00:08:46,660
CTR they are for example used in cbc is

163
00:08:46,660 --> 00:08:50,750
still used quite a lot in TLS although

164
00:08:50,750 --> 00:08:54,110
we probably shouldn't be used and CTR is

165
00:08:54,110 --> 00:08:58,910
in more modern products these modes only

166
00:08:58,910 --> 00:09:00,500
encrypt something but they don't

167
00:09:00,500 --> 00:09:04,279
guarantee you that that any authenticity

168
00:09:04,279 --> 00:09:07,339
that means if an attacker can manipulate

169
00:09:07,339 --> 00:09:09,949
your cipher text he may be able to

170
00:09:09,949 --> 00:09:11,690
change it in a

171
00:09:11,690 --> 00:09:14,080
and change it in a specific way that

172
00:09:14,080 --> 00:09:18,590
like flipping a bit things like that so

173
00:09:18,590 --> 00:09:20,750
you flip a bit in the ciphertext and the

174
00:09:20,750 --> 00:09:23,330
pit gets also flipped in the decrypted

175
00:09:23,330 --> 00:09:26,870
text and then there are modes like GCM

176
00:09:26,870 --> 00:09:29,690
or poorly 1305 or ocb these are

177
00:09:29,690 --> 00:09:32,980
so-called authenticated encryption or

178
00:09:32,980 --> 00:09:35,510
more detailed authenticated encryption

179
00:09:35,510 --> 00:09:38,240
with additional data and these modes

180
00:09:38,240 --> 00:09:40,430
also guarantee you that unless you have

181
00:09:40,430 --> 00:09:44,120
the the secret key you cannot change the

182
00:09:44,120 --> 00:09:46,850
content so if you change something then

183
00:09:46,850 --> 00:09:49,520
the recipient of the message will notice

184
00:09:49,520 --> 00:09:52,070
it the algorithm will just say okay here

185
00:09:52,070 --> 00:09:55,010
happened an error this ciphertext is not

186
00:09:55,010 --> 00:09:57,320
correct and then there are some special

187
00:09:57,320 --> 00:10:00,440
modes for hard disk encryption which is

188
00:10:00,440 --> 00:10:03,260
a bit messy but that's not the topic

189
00:10:03,260 --> 00:10:06,680
today and as a rule of sample you can

190
00:10:06,680 --> 00:10:08,240
say usually you want to use

191
00:10:08,240 --> 00:10:10,610
authenticated encryption there's almost

192
00:10:10,610 --> 00:10:13,130
never a good reason not to use

193
00:10:13,130 --> 00:10:19,520
authenticated encryption so what's the

194
00:10:19,520 --> 00:10:22,790
cfp mode so it's a bit more unusual it's

195
00:10:22,790 --> 00:10:26,690
not a very common mode the feature of

196
00:10:26,690 --> 00:10:28,850
cfb mode is that it's self correcting

197
00:10:28,850 --> 00:10:31,160
that if you you can start the decryption

198
00:10:31,160 --> 00:10:33,830
in the middle of a cipher text and then

199
00:10:33,830 --> 00:10:37,100
the you get one bad block and the next

200
00:10:37,100 --> 00:10:40,370
block is correct again so what this

201
00:10:40,370 --> 00:10:41,990
enables is that you can do things like

202
00:10:41,990 --> 00:10:44,950
seeking I only want to download the

203
00:10:44,950 --> 00:10:47,720
middle of a file or address the second

204
00:10:47,720 --> 00:10:51,470
half or things like that and it's not

205
00:10:51,470 --> 00:10:55,700
authenticated you can flip a in

206
00:10:55,700 --> 00:10:57,620
the ciphertext and what happens then is

207
00:10:57,620 --> 00:11:00,470
that this bit will be flipped in the

208
00:11:00,470 --> 00:11:03,589
decrypted text and it will change the

209
00:11:03,589 --> 00:11:06,400
next block to something basically random

210
00:11:06,400 --> 00:11:10,760
so so as an attacker okay we cannot

211
00:11:10,760 --> 00:11:12,920
decrypt the ciphertext but we can change

212
00:11:12,920 --> 00:11:17,630
the content and so okay what does what

213
00:11:17,630 --> 00:11:19,670
does how does this matter now let's

214
00:11:19,670 --> 00:11:22,460
assume someone has an uncloudy instance

215
00:11:22,460 --> 00:11:23,370
and

216
00:11:23,370 --> 00:11:25,440
they are uploading some piece of

217
00:11:25,440 --> 00:11:28,170
software for their colleagues like an

218
00:11:28,170 --> 00:11:32,839
installer or are just a small X file

219
00:11:32,839 --> 00:11:36,510
then can we can we maybe back door that

220
00:11:36,510 --> 00:11:38,610
exif I'll if we're in a checker that can

221
00:11:38,610 --> 00:11:43,050
access this space now if we look at an

222
00:11:43,050 --> 00:11:48,000
exit file you will see this this program

223
00:11:48,000 --> 00:11:53,490
cannot be run in DOS mode so even on

224
00:11:53,490 --> 00:11:55,710
modern systems every Windows executable

225
00:11:55,710 --> 00:11:59,490
still has a dose program embedded that

226
00:11:59,490 --> 00:12:02,640
usually just displaced this text and the

227
00:12:02,640 --> 00:12:04,350
interesting thing is that this is always

228
00:12:04,350 --> 00:12:07,589
the same at least if you're using a

229
00:12:07,589 --> 00:12:10,170
standard Microsoft compiler so we have

230
00:12:10,170 --> 00:12:12,720
something here even if we don't know

231
00:12:12,720 --> 00:12:15,870
what this XO file does we have some some

232
00:12:15,870 --> 00:12:18,210
bites here where we know what they are

233
00:12:18,210 --> 00:12:21,360
doing or where we know what they are so

234
00:12:21,360 --> 00:12:25,050
we can manipulate them baby in the way

235
00:12:25,050 --> 00:12:29,610
we want and this is yeah i created a

236
00:12:29,610 --> 00:12:34,830
proof of concept here so we can just um

237
00:12:34,830 --> 00:12:38,279
yeah and another thing is like the in

238
00:12:38,279 --> 00:12:42,560
the fourth line there's this 0 0 0 1 0

239
00:12:42,560 --> 00:12:46,170
this is the offset of the windows

240
00:12:46,170 --> 00:12:50,880
executable header and so what windows

241
00:12:50,880 --> 00:12:53,610
does is it checks this offset if there's

242
00:12:53,610 --> 00:12:56,580
a PE header which is like the modern X a

243
00:12:56,580 --> 00:12:59,250
header and if it's not there then it

244
00:12:59,250 --> 00:13:03,300
assumes it's a das program so okay what

245
00:13:03,300 --> 00:13:05,700
we could do here is and what I did the

246
00:13:05,700 --> 00:13:08,330
proof of concept is that if you're just

247
00:13:08,330 --> 00:13:11,970
and yeah and also for the block length

248
00:13:11,970 --> 00:13:13,980
the block length is exactly one line

249
00:13:13,980 --> 00:13:18,000
here it's 128 bits which is 16 bytes

250
00:13:18,000 --> 00:13:21,570
which is exactly one line here so if we

251
00:13:21,570 --> 00:13:24,120
change anything in the third line then

252
00:13:24,120 --> 00:13:26,510
this will scramble the fourth line

253
00:13:26,510 --> 00:13:29,550
because we had cfb mode you change

254
00:13:29,550 --> 00:13:32,700
something next block has random content

255
00:13:32,700 --> 00:13:35,339
so if we change a single bit in the

256
00:13:35,339 --> 00:13:36,570
third line

257
00:13:36,570 --> 00:13:39,750
the P the offset of the windows PE

258
00:13:39,750 --> 00:13:42,720
header will be destroyed and it will be

259
00:13:42,720 --> 00:13:46,440
a dose program for windows and in the

260
00:13:46,440 --> 00:13:49,290
fifth line this this step does program

261
00:13:49,290 --> 00:13:53,370
is always the same so we can change that

262
00:13:53,370 --> 00:13:55,110
at least we can change one block of it

263
00:13:55,110 --> 00:14:00,870
now yeah that's what I did and created a

264
00:14:00,870 --> 00:14:03,810
proof-of-concept code so you're just

265
00:14:03,810 --> 00:14:06,030
flipping one bit in the third block then

266
00:14:06,030 --> 00:14:09,570
your ex or in this dust-up code with the

267
00:14:09,570 --> 00:14:12,420
code you want to inject and then your ex

268
00:14:12,420 --> 00:14:16,380
or the ciphertext with it and then yeah

269
00:14:16,380 --> 00:14:18,030
we have changed the executable to

270
00:14:18,030 --> 00:14:20,910
execute some code that we want now I

271
00:14:20,910 --> 00:14:26,700
have a demo for this here's an uncloudy

272
00:14:26,700 --> 00:14:43,390
instance and we upload some and

273
00:14:43,390 --> 00:14:49,270
driver and I had a pretty executable

274
00:14:49,270 --> 00:14:56,830
prepared here we'll just download putty

275
00:14:56,830 --> 00:15:05,050
then I'm just using putty because it's a

276
00:15:05,050 --> 00:15:14,440
small executable and ya know we don't

277
00:15:14,440 --> 00:15:29,740
want to start it yep ok and now now we

278
00:15:29,740 --> 00:15:33,610
we look on this server storage space now

279
00:15:33,610 --> 00:15:36,010
we have the directory for the user admin

280
00:15:36,010 --> 00:15:40,360
and we have the XE here now the

281
00:15:40,360 --> 00:15:42,040
first interesting thing is the file name

282
00:15:42,040 --> 00:15:44,620
is is still the same so we're already

283
00:15:44,620 --> 00:15:49,770
leaking some information to our attic ok

284
00:15:49,770 --> 00:15:57,220
better yeah and if you look into it as

285
00:15:57,220 --> 00:16:00,550
we so before this H begin and uncloudy

286
00:16:00,550 --> 00:16:05,800
encryption module stuff and now we run

287
00:16:05,800 --> 00:16:13,590
this exploit code on put exe ok so we

288
00:16:13,590 --> 00:16:19,570
yeah and now we download it again yes a

289
00:16:19,570 --> 00:16:28,180
file and no now this so the Pooh TX is

290
00:16:28,180 --> 00:16:30,910
the one we had before and to put a 1

291
00:16:30,910 --> 00:16:35,220
access the one we just downloaded and

292
00:16:35,220 --> 00:16:39,850
with so if we start the original with

293
00:16:39,850 --> 00:16:42,520
those box because it's now a dose

294
00:16:42,520 --> 00:16:46,000
executable it will say ok this cannot be

295
00:16:46,000 --> 00:16:48,150
run in DOS mode and if we start

296
00:16:48,150 --> 00:16:53,110
manipulated one ok it prints spoon

297
00:16:53,110 --> 00:16:59,050
so that's on the screen right yeah so

298
00:16:59,050 --> 00:17:01,440
what we did was yeah we we had an

299
00:17:01,440 --> 00:17:04,209
executable online and we could inject

300
00:17:04,209 --> 00:17:06,699
some code under our control now this is

301
00:17:06,699 --> 00:17:09,069
only 16 bytes of code that doesn't

302
00:17:09,069 --> 00:17:11,140
really give us a whole lot but we will

303
00:17:11,140 --> 00:17:13,270
find other places in the executable that

304
00:17:13,270 --> 00:17:15,819
usually have zeros or have other stuff

305
00:17:15,819 --> 00:17:18,130
that we can predict and then we can jump

306
00:17:18,130 --> 00:17:20,230
around and back draw many parts of the

307
00:17:20,230 --> 00:17:22,349
files so this is definitely possible to

308
00:17:22,349 --> 00:17:29,799
create something exploitable here yeah

309
00:17:29,799 --> 00:17:34,480
then I reported this to own cloud the

310
00:17:34,480 --> 00:17:39,370
first fix they proposed was that there

311
00:17:39,370 --> 00:17:42,130
were now using counter mode and they are

312
00:17:42,130 --> 00:17:44,520
so they are always encrypting blocks of

313
00:17:44,520 --> 00:17:48,760
8 kilobytes and then use an H mega

314
00:17:48,760 --> 00:17:53,080
authentication this is better but it

315
00:17:53,080 --> 00:17:55,419
still has a problem that you can still

316
00:17:55,419 --> 00:17:58,000
operate the blocks inside a file because

317
00:17:58,000 --> 00:18:01,990
every block is is encrypted in the same

318
00:18:01,990 --> 00:18:05,110
way and still the problem that the fine

319
00:18:05,110 --> 00:18:10,090
aims are leaked is still there then then

320
00:18:10,090 --> 00:18:12,370
the second fix they deployed is that

321
00:18:12,370 --> 00:18:14,530
they they embedded a number for the

322
00:18:14,530 --> 00:18:17,440
block so now you can no longer swap that

323
00:18:17,440 --> 00:18:19,570
blocks around the filename leak is still

324
00:18:19,570 --> 00:18:21,940
there this is what they shipped in

325
00:18:21,940 --> 00:18:25,110
version 9 which was recently released

326
00:18:25,110 --> 00:18:28,660
and now you might ask is this secure and

327
00:18:28,660 --> 00:18:31,510
I can just say I don't know it's secure

328
00:18:31,510 --> 00:18:33,340
enough that I did not find anything

329
00:18:33,340 --> 00:18:39,309
obvious in it anymore but I'm yeah I

330
00:18:39,309 --> 00:18:41,980
know a bit about crypto but I'm not like

331
00:18:41,980 --> 00:18:44,200
an expert to audit these kinds of things

332
00:18:44,200 --> 00:18:49,270
so in my opinion this module either

333
00:18:49,270 --> 00:18:51,700
should get a professional audit from

334
00:18:51,700 --> 00:18:54,010
someone who knows this stuff and I mean

335
00:18:54,010 --> 00:18:56,500
also there are other potential issues

336
00:18:56,500 --> 00:18:58,169
like how do they generate their keys and

337
00:18:58,169 --> 00:19:00,700
that's this orbit the key storage makes

338
00:19:00,700 --> 00:19:04,390
sense either this needs a professional

339
00:19:04,390 --> 00:19:06,830
audit or the module should be

340
00:19:06,830 --> 00:19:09,320
moved that's what I said told the own

341
00:19:09,320 --> 00:19:12,140
cloud developers obviously they decided

342
00:19:12,140 --> 00:19:15,470
otherwise they ship this now maybe fixed

343
00:19:15,470 --> 00:19:21,370
version i don't know if it's secure yeah

344
00:19:21,370 --> 00:19:23,929
then you might wonder why don't they use

345
00:19:23,929 --> 00:19:26,149
authenticated encryption that's also

346
00:19:26,149 --> 00:19:29,090
what I asked like just use GCM I mean

347
00:19:29,090 --> 00:19:31,220
GCM is it's not perfect but it's

348
00:19:31,220 --> 00:19:33,380
definitely better than building your own

349
00:19:33,380 --> 00:19:37,190
combination of various modes the problem

350
00:19:37,190 --> 00:19:40,070
with that is that on cloud is written in

351
00:19:40,070 --> 00:19:43,399
PHP and PHP doesn't support GCM mode so

352
00:19:43,399 --> 00:19:45,649
you currently cannot use authenticated

353
00:19:45,649 --> 00:19:49,220
encryption modes from PHP they plan to

354
00:19:49,220 --> 00:19:52,970
change that in PHP 7.1 the problem with

355
00:19:52,970 --> 00:19:55,490
that is then you can maybe use it in 15

356
00:19:55,490 --> 00:19:58,399
years because people tend to use PHP

357
00:19:58,399 --> 00:20:01,100
versions which are 10 years old I don't

358
00:20:01,100 --> 00:20:03,980
know I think the most common PHP version

359
00:20:03,980 --> 00:20:08,929
is the 5.3 which I mean 5.4 is already

360
00:20:08,929 --> 00:20:18,470
out of security support yeah hmm yeah

361
00:20:18,470 --> 00:20:23,029
maybe I mean a PHP 7.1 is not released

362
00:20:23,029 --> 00:20:25,909
yet so I think it will be released in

363
00:20:25,909 --> 00:20:31,279
summer then okay you might how would you

364
00:20:31,279 --> 00:20:34,669
do better what would I propose and it's

365
00:20:34,669 --> 00:20:37,190
a bit difficult because the for this

366
00:20:37,190 --> 00:20:39,909
scenario i think there's no ready-made

367
00:20:39,909 --> 00:20:42,740
protocol or construction that you can

368
00:20:42,740 --> 00:20:45,980
easily use and i think this is a problem

369
00:20:45,980 --> 00:20:48,080
there should be something like i want to

370
00:20:48,080 --> 00:20:49,659
encrypt a file and store it somewhere

371
00:20:49,659 --> 00:20:52,850
with a key that is a pretty standard

372
00:20:52,850 --> 00:20:55,429
scenario but there's no no really good

373
00:20:55,429 --> 00:20:59,029
solution for it and you solve some

374
00:20:59,029 --> 00:21:00,950
problems if you just use authenticated

375
00:21:00,950 --> 00:21:03,500
encryption but like then if you want to

376
00:21:03,500 --> 00:21:05,389
start like I want to be able to download

377
00:21:05,389 --> 00:21:08,029
a part of a file then you need to check

378
00:21:08,029 --> 00:21:10,010
that and this tracking there's no

379
00:21:10,010 --> 00:21:13,399
standard for it and write with

380
00:21:13,399 --> 00:21:15,320
authenticated encryption also has like

381
00:21:15,320 --> 00:21:17,929
some traps where you have to get things

382
00:21:17,929 --> 00:21:19,820
right so I think this is really a lack

383
00:21:19,820 --> 00:21:20,390
of

384
00:21:20,390 --> 00:21:23,720
some kind of protocol or standard for

385
00:21:23,720 --> 00:21:29,450
this use scenario I thought about one

386
00:21:29,450 --> 00:21:32,030
possibility but I'm not sure if I would

387
00:21:32,030 --> 00:21:35,480
recommend it it was but I will present

388
00:21:35,480 --> 00:21:38,870
it anyway I thought okay we have we have

389
00:21:38,870 --> 00:21:41,450
standard for message encryption like

390
00:21:41,450 --> 00:21:46,460
four emails like PGP or CMS which is as

391
00:21:46,460 --> 00:21:50,450
my technology we could say okay we use

392
00:21:50,450 --> 00:21:52,640
that I mean this is with public key

393
00:21:52,640 --> 00:21:54,920
cryptography but we could say okay let's

394
00:21:54,920 --> 00:21:57,770
use a public key cryptography it's it's

395
00:21:57,770 --> 00:22:00,620
lower than the symmetric key but maybe

396
00:22:00,620 --> 00:22:02,630
that we don't care we just want

397
00:22:02,630 --> 00:22:04,340
something secure and this is maybe well

398
00:22:04,340 --> 00:22:08,330
audited but then I looked how would I do

399
00:22:08,330 --> 00:22:11,330
cryptographic message syntax in PHP and

400
00:22:11,330 --> 00:22:14,210
in the documentation this was the

401
00:22:14,210 --> 00:22:17,630
example and it's using hace 2 with 40

402
00:22:17,630 --> 00:22:23,840
bits yeah that's kind of a yeah expert

403
00:22:23,840 --> 00:22:29,480
mode crypto history from the 90s so it's

404
00:22:29,480 --> 00:22:31,250
also not straightforward to get this

405
00:22:31,250 --> 00:22:33,290
secure so and I don't know if this is a

406
00:22:33,290 --> 00:22:37,090
good idea for this scenario so but yeah

407
00:22:37,090 --> 00:22:40,580
yeah so takeaways don't invent your own

408
00:22:40,580 --> 00:22:43,100
crypto don't invent crypto algorithms

409
00:22:43,100 --> 00:22:46,120
don't invent crypto protocols

410
00:22:46,120 --> 00:22:48,170
authenticated encryption should be used

411
00:22:48,170 --> 00:22:50,480
Yuri whenever possible and unless

412
00:22:50,480 --> 00:22:51,950
there's a very good reason not to do

413
00:22:51,950 --> 00:22:55,730
that's the way to do it and I think we

414
00:22:55,730 --> 00:22:57,950
lack some proper standards for these

415
00:22:57,950 --> 00:23:00,470
kind of use scenarios although it's I

416
00:23:00,470 --> 00:23:02,300
think quite a common thing there's no

417
00:23:02,300 --> 00:23:04,460
standard solution where you can say here

418
00:23:04,460 --> 00:23:07,580
put in your key here put in your thing

419
00:23:07,580 --> 00:23:09,860
to encrypt that's something that should

420
00:23:09,860 --> 00:23:13,100
be there and isn't there and yeah you

421
00:23:13,100 --> 00:23:15,080
probably should not trust the unplowed

422
00:23:15,080 --> 00:23:21,100
encryption module yeah thanks

423
00:23:28,960 --> 00:23:43,790
other questions I'm just asking about

424
00:23:43,790 --> 00:23:45,920
about your opinion do you consider ank

425
00:23:45,920 --> 00:23:48,950
FS or a crypt of s for this use case as

426
00:23:48,950 --> 00:23:53,270
a better alternative um what was the

427
00:23:53,270 --> 00:23:55,430
first one and it was it's just one

428
00:23:55,430 --> 00:23:58,040
question do you can see ya yeah I didn't

429
00:23:58,040 --> 00:24:00,050
understand the first one so it was just

430
00:24:00,050 --> 00:24:02,660
this question yeah you will consider an

431
00:24:02,660 --> 00:24:05,780
gfs or equipped if s as a good at I

432
00:24:05,780 --> 00:24:07,760
don't kill the first one I I know

433
00:24:07,760 --> 00:24:11,810
equipped FS but the problem is that

434
00:24:11,810 --> 00:24:16,850
these disk encryption things they do a

435
00:24:16,850 --> 00:24:19,130
lot of trade-offs between security and

436
00:24:19,130 --> 00:24:21,830
practicality and it's not really nice

437
00:24:21,830 --> 00:24:24,200
what they're using either as encryption

438
00:24:24,200 --> 00:24:28,220
modes so it's probably not a good

439
00:24:28,220 --> 00:24:35,600
alternative either okay and also I mean

440
00:24:35,600 --> 00:24:38,810
this is probably not available in PHP to

441
00:24:38,810 --> 00:24:44,960
may include in your web application and

442
00:24:44,960 --> 00:24:47,000
yeah I mean you're laughing but I think

443
00:24:47,000 --> 00:24:50,000
I mean PHP whether you not like it or

444
00:24:50,000 --> 00:24:52,340
not it's a standard programming language

445
00:24:52,340 --> 00:24:53,630
that's used for a lot of applications

446
00:24:53,630 --> 00:24:55,970
and I think there should be encryption

447
00:24:55,970 --> 00:25:00,640
technology that's just usable and works

448
00:25:08,020 --> 00:25:15,879
okay um does not

449
00:25:20,720 --> 00:25:24,960
I think the the scenario that when

450
00:25:24,960 --> 00:25:28,650
you're looking at clouds having a disk

451
00:25:28,650 --> 00:25:32,220
you don't trust is not that exotic so it

452
00:25:32,220 --> 00:25:34,170
says something you would recommend

453
00:25:34,170 --> 00:25:36,600
actually a few your friendted space

454
00:25:36,600 --> 00:25:38,910
somewhere in the cloud until you don't

455
00:25:38,910 --> 00:25:45,870
want I mean it depends what you want to

456
00:25:45,870 --> 00:25:50,220
do if I know that they're like backup

457
00:25:50,220 --> 00:25:53,850
solutions that encrypt like ethic and

458
00:25:53,850 --> 00:25:56,310
stuff but that dependent that matches

459
00:25:56,310 --> 00:25:59,790
your use case because the that's not a

460
00:25:59,790 --> 00:26:03,600
web applications oh yeah but I don't

461
00:26:03,600 --> 00:26:20,340
have a good recommendation okay yeah

462
00:26:20,340 --> 00:26:22,400
thanks

463
00:26:22,400 --> 00:26:24,460
you

464
00:26:30,700 --> 00:26:32,760
you

