1
00:00:27,510 --> 00:00:29,570
you

2
00:11:40,889 --> 00:11:44,009
and this second one was what an older

3
00:11:44,009 --> 00:11:46,019
version of optimises are produced as a

4
00:11:46,019 --> 00:11:48,949
result so you had a back where this

5
00:11:48,949 --> 00:11:51,209
mathematical function in a very rare

6
00:11:51,209 --> 00:11:53,609
corner case produced a wrong result and

7
00:11:53,609 --> 00:11:56,459
I found quite a couple of these kind of

8
00:11:56,459 --> 00:12:01,169
bugs with this strategy yeah this is the

9
00:12:01,169 --> 00:12:03,569
patch where this was introduced it's an

10
00:12:03,569 --> 00:12:10,319
assembly I have no idea what it does and

11
00:12:10,319 --> 00:12:13,709
now another tool that is very good to

12
00:12:13,709 --> 00:12:16,019
combine with fuzzing is address

13
00:12:16,019 --> 00:12:18,959
sanitizer and this is really something I

14
00:12:18,959 --> 00:12:21,359
am currently running around and trying

15
00:12:21,359 --> 00:12:23,399
to tell free software developers that

16
00:12:23,399 --> 00:12:25,139
they make use of this tool because it's

17
00:12:25,139 --> 00:12:29,269
really really simple and it it can

18
00:12:29,269 --> 00:12:32,129
assign sometimes quite easily find bugs

19
00:12:32,129 --> 00:12:35,790
so address sanitizer is a feature in the

20
00:12:35,790 --> 00:12:38,579
compiler it's available both in GCC and

21
00:12:38,579 --> 00:12:40,829
si lang and it can be enabled with this

22
00:12:40,829 --> 00:12:46,470
flag - eff sanitized address so if you

23
00:12:46,470 --> 00:12:48,059
only want to take one thing away from

24
00:12:48,059 --> 00:12:50,220
this talk if you write software and C

25
00:12:50,220 --> 00:12:52,679
then use this flag to test your software

26
00:12:52,679 --> 00:13:00,959
and here's a little code example so

27
00:13:00,959 --> 00:13:04,829
we're allocating a buffer and then just

28
00:13:04,829 --> 00:13:06,689
writing zeros into it and then we're

29
00:13:06,689 --> 00:13:08,970
freeing the buffer and then we're trying

30
00:13:08,970 --> 00:13:11,970
to read from the buffer so it's a use

31
00:13:11,970 --> 00:13:14,730
after free back kind of standard use

32
00:13:14,730 --> 00:13:16,919
after free back you're freeing a buffer

33
00:13:16,919 --> 00:13:18,569
and then still trying to read from it

34
00:13:18,569 --> 00:13:20,819
and this is I mean this is a very simple

35
00:13:20,819 --> 00:13:23,369
example but this is usually the kind of

36
00:13:23,369 --> 00:13:25,230
pack you have in applications like

37
00:13:25,230 --> 00:13:26,970
browsers these days when you have

38
00:13:26,970 --> 00:13:34,799
security issues now here I have this

39
00:13:34,799 --> 00:13:36,080
code

40
00:13:36,080 --> 00:13:48,730
and now if I compile it okay yeah yeah

41
00:13:48,730 --> 00:13:53,350
so what happens if I run this is is

42
00:13:53,350 --> 00:13:56,060
essentially unpredictable so in this

43
00:13:56,060 --> 00:13:58,430
case I have a zero and this will also

44
00:13:58,430 --> 00:14:00,230
usually happen because we're not doing

45
00:14:00,230 --> 00:14:02,150
anything between the freeing and the

46
00:14:02,150 --> 00:14:06,800
reading of it but we we cannot rely that

47
00:14:06,800 --> 00:14:08,510
the compiler will do anything

48
00:14:08,510 --> 00:14:12,320
predictable in this situation now if we

49
00:14:12,320 --> 00:14:16,310
add address and it either to it and also

50
00:14:16,310 --> 00:14:18,800
I add G which just gives us some

51
00:14:18,800 --> 00:14:24,080
debugging information then and I have to

52
00:14:24,080 --> 00:14:38,510
do this then okay

53
00:14:38,510 --> 00:14:45,680
repeat then we get a very nice error

54
00:14:45,680 --> 00:14:48,880
message with this heap use after free

55
00:14:48,880 --> 00:14:51,770
tells us in which line in the code it

56
00:14:51,770 --> 00:14:55,010
happened and it tells us okay this is in

57
00:14:55,010 --> 00:14:57,620
some memory region that was freed in

58
00:14:57,620 --> 00:15:00,290
this line and it was allocated in this

59
00:15:00,290 --> 00:15:02,870
line so we get a lot of information that

60
00:15:02,870 --> 00:15:08,690
will help us to analyze this bug and the

61
00:15:08,690 --> 00:15:11,330
thing is with use after free most of the

62
00:15:11,330 --> 00:15:12,980
time these bugs don't crash your

63
00:15:12,980 --> 00:15:15,710
application also if you have out of

64
00:15:15,710 --> 00:15:17,660
one's memory reads they also usually

65
00:15:17,660 --> 00:15:19,580
just your application continues running

66
00:15:19,580 --> 00:15:21,740
and something strange may have happened

67
00:15:21,740 --> 00:15:25,610
and so it's hard to find these bugs

68
00:15:25,610 --> 00:15:28,310
without such a tool so address sanitizer

69
00:15:28,310 --> 00:15:30,860
is very helpful that it allows you to

70
00:15:30,860 --> 00:15:33,710
find these kinds of bugs yeah this is

71
00:15:33,710 --> 00:15:39,590
again the error message and it's maybe

72
00:15:39,590 --> 00:15:42,170
maybe you know wor grind which does

73
00:15:42,170 --> 00:15:46,220
similar things but well grind is quite

74
00:15:46,220 --> 00:15:48,980
limited because it works on the already

75
00:15:48,980 --> 00:15:49,699
compiled

76
00:15:49,699 --> 00:15:51,889
beautiful and some classes of parks

77
00:15:51,889 --> 00:15:54,319
cannot be found with that strategy so

78
00:15:54,319 --> 00:15:56,119
it's a bit like address sanitizer is a

79
00:15:56,119 --> 00:15:58,189
more advanced version of walk around and

80
00:15:58,189 --> 00:16:01,429
it's also much faster because it

81
00:16:01,429 --> 00:16:05,809
operates at compile time so yeah and

82
00:16:05,809 --> 00:16:07,790
what you ideally want to do is you're

83
00:16:07,790 --> 00:16:10,279
combining fuzzing with address sanitizer

84
00:16:10,279 --> 00:16:12,439
because then you will just find more

85
00:16:12,439 --> 00:16:14,239
bugs and find these subtle bugs that are

86
00:16:14,239 --> 00:16:19,429
otherwise very hard to find you probably

87
00:16:19,429 --> 00:16:22,389
all remember this one the hot lead back

88
00:16:22,389 --> 00:16:26,119
which was essentially an out-of-bounds

89
00:16:26,119 --> 00:16:28,699
read back you had some buffer and and

90
00:16:28,699 --> 00:16:32,209
the length and if you gave server length

91
00:16:32,209 --> 00:16:34,040
that was longer than this buffer it

92
00:16:34,040 --> 00:16:35,929
would just read that and send it back to

93
00:16:35,929 --> 00:16:39,919
the user and I did a little experiment

94
00:16:39,919 --> 00:16:43,730
with that I created a small tool that

95
00:16:43,730 --> 00:16:46,309
was doing a handshake with open SSL with

96
00:16:46,309 --> 00:16:49,519
itself and then added the possibility

97
00:16:49,519 --> 00:16:52,279
that you could just swap out one of the

98
00:16:52,279 --> 00:16:54,410
TLS packages with something you gave it

99
00:16:54,410 --> 00:16:56,959
on the command line and by that I was

100
00:16:56,959 --> 00:16:59,089
able to fast the handshake of open SSL

101
00:16:59,089 --> 00:17:01,850
and then using that with an older

102
00:17:01,850 --> 00:17:03,410
version that was vulnerable to

103
00:17:03,410 --> 00:17:06,349
heartbleed after a couple of hours it

104
00:17:06,349 --> 00:17:09,799
we've discovered the heartbleed bug now

105
00:17:09,799 --> 00:17:13,010
you can say okay it's it's easy to find

106
00:17:13,010 --> 00:17:14,720
it back if you already know where it is

107
00:17:14,720 --> 00:17:17,898
but I would argue that in this

108
00:17:17,898 --> 00:17:20,510
experiment I didn't use any information

109
00:17:20,510 --> 00:17:23,269
that was very specific to heartbleed it

110
00:17:23,269 --> 00:17:26,359
was just a handshake it was just a

111
00:17:26,359 --> 00:17:28,189
normal fasting how I would have done it

112
00:17:28,189 --> 00:17:33,789
otherwise if yeah I took it six hours

113
00:17:33,789 --> 00:17:36,919
and another tool called lip father which

114
00:17:36,919 --> 00:17:40,600
I will also talk about later a bit more

115
00:17:40,600 --> 00:17:43,190
the developer of lip father wrote me

116
00:17:43,190 --> 00:17:44,690
then an email and said he has replicated

117
00:17:44,690 --> 00:17:46,850
this experiment with lip father and it

118
00:17:46,850 --> 00:17:54,309
only took it five minutes so yeah then

119
00:17:54,309 --> 00:17:58,129
something else I tried was I asked okay

120
00:17:58,129 --> 00:18:00,350
if you have address sanitizer and it

121
00:18:00,350 --> 00:18:02,840
finds all these marks can you compile a

122
00:18:02,840 --> 00:18:03,170
whole

123
00:18:03,170 --> 00:18:05,330
system with address sanitizer in a bird

124
00:18:05,330 --> 00:18:07,370
so usually you use it for testing for

125
00:18:07,370 --> 00:18:09,710
one application but if you compile the

126
00:18:09,710 --> 00:18:13,820
whole system okay that may may find some

127
00:18:13,820 --> 00:18:18,080
more subtle bugs and I created a gentle

128
00:18:18,080 --> 00:18:20,540
system where everything except some

129
00:18:20,540 --> 00:18:23,060
co-op packages was compiled with address

130
00:18:23,060 --> 00:18:27,500
sanitizer so for you have some problems

131
00:18:27,500 --> 00:18:29,270
if you want to compile GFC with it

132
00:18:29,270 --> 00:18:31,730
because what essentially it is doing is

133
00:18:31,730 --> 00:18:34,580
it is intercepting the memory allocation

134
00:18:34,580 --> 00:18:37,400
functions of tree Lipsy and if you use

135
00:18:37,400 --> 00:18:40,100
it jealously with it then you will get

136
00:18:40,100 --> 00:18:43,010
some weird dependency conflicts and GCC

137
00:18:43,010 --> 00:18:46,610
also didn't work because it's compiling

138
00:18:46,610 --> 00:18:49,370
these these base functions entities in

139
00:18:49,370 --> 00:18:51,950
executables so I had to exclude those

140
00:18:51,950 --> 00:18:55,190
and a few more core dependencies but the

141
00:18:55,190 --> 00:18:56,750
rest of the system everything was

142
00:18:56,750 --> 00:18:59,990
compiled with address sanitizer it is

143
00:18:59,990 --> 00:19:02,540
slow and it takes a lot of memory but it

144
00:19:02,540 --> 00:19:09,530
is possible to run yeah and what was to

145
00:19:09,530 --> 00:19:11,720
be expected is that just by doing this I

146
00:19:11,720 --> 00:19:13,580
found a lot of parks in a lot of

147
00:19:13,580 --> 00:19:17,120
packages and I have a list here I I made

148
00:19:17,120 --> 00:19:19,490
it a bit longer this morning this is

149
00:19:19,490 --> 00:19:22,850
stuff I found recently so you see a lot

150
00:19:22,850 --> 00:19:26,830
of stuff that like bash or Python syslog

151
00:19:26,830 --> 00:19:30,590
and also things where you say ok maybe

152
00:19:30,590 --> 00:19:32,480
this is security critical like the

153
00:19:32,480 --> 00:19:34,610
picture in OTR plugin there was a use

154
00:19:34,610 --> 00:19:37,550
after free just by using it so no

155
00:19:37,550 --> 00:19:39,200
fuzzing involved right anything just

156
00:19:39,200 --> 00:19:41,870
starting it and if you opened a certain

157
00:19:41,870 --> 00:19:44,000
dialog it would crash with the use after

158
00:19:44,000 --> 00:19:47,770
free bug was fixed in the last version

159
00:19:47,770 --> 00:19:53,180
yeah so yeah I think this was quite

160
00:19:53,180 --> 00:19:56,030
worth it it led to a lot of bug fixes

161
00:19:56,030 --> 00:20:01,790
and yeah there were some challenges with

162
00:20:01,790 --> 00:20:04,760
it so the one thing with address

163
00:20:04,760 --> 00:20:08,780
sanitizer is you can you can use a an

164
00:20:08,780 --> 00:20:11,240
executable with address sanitizer with a

165
00:20:11,240 --> 00:20:13,520
normal library that's not using address

166
00:20:13,520 --> 00:20:15,830
sanitizer but if you do it the other way

167
00:20:15,830 --> 00:20:16,850
around

168
00:20:16,850 --> 00:20:18,590
it does not work so if you have a

169
00:20:18,590 --> 00:20:21,230
library like let's say you compile your

170
00:20:21,230 --> 00:20:23,810
system OpenSSL with address sanitizer

171
00:20:23,810 --> 00:20:26,810
then all the binaries that are not

172
00:20:26,810 --> 00:20:28,460
compiled with address sanitizer will

173
00:20:28,460 --> 00:20:29,150
stop working

174
00:20:29,150 --> 00:20:32,270
so if you re compiling your system with

175
00:20:32,270 --> 00:20:34,340
address sanitizer you have to check in

176
00:20:34,340 --> 00:20:36,890
which order you do it that nothing that

177
00:20:36,890 --> 00:20:38,960
breaks and you also cannot easily just

178
00:20:38,960 --> 00:20:42,320
include exclude one package if you want

179
00:20:42,320 --> 00:20:43,850
to exclude something you also have to

180
00:20:43,850 --> 00:20:47,330
exclude all the dependencies then there

181
00:20:47,330 --> 00:20:49,730
are some build system if you one was

182
00:20:49,730 --> 00:20:52,640
with Lib tool that when Lib tool is

183
00:20:52,640 --> 00:20:55,340
compiling a library and it filters out

184
00:20:55,340 --> 00:20:57,470
all compiler flags that it doesn't know

185
00:20:57,470 --> 00:21:01,310
about and it didn't know about address

186
00:21:01,310 --> 00:21:05,150
analyzer so that broke it's now fixed in

187
00:21:05,150 --> 00:21:06,980
the get code of Lib tool but they have

188
00:21:06,980 --> 00:21:10,250
not made a new release yet and then and

189
00:21:10,250 --> 00:21:11,630
if you have some custom memory

190
00:21:11,630 --> 00:21:14,210
allocation in an application that

191
00:21:14,210 --> 00:21:20,690
usually also doesn't work yeah then one

192
00:21:20,690 --> 00:21:24,350
in past talks I had about this I said ok

193
00:21:24,350 --> 00:21:26,240
maybe this is something you may want to

194
00:21:26,240 --> 00:21:28,040
use if you want to have a very secure

195
00:21:28,040 --> 00:21:30,410
system but this is probably not a good

196
00:21:30,410 --> 00:21:32,780
idea we had address analyzer was

197
00:21:32,780 --> 00:21:34,910
designed as a testing tool and not as a

198
00:21:34,910 --> 00:21:37,670
production tool and this introduces some

199
00:21:37,670 --> 00:21:41,270
problems and someone on the security

200
00:21:41,270 --> 00:21:43,820
list showed a way where how you could

201
00:21:43,820 --> 00:21:46,880
use address sanitizer to become route if

202
00:21:46,880 --> 00:21:49,040
you have a Seward executable compiled

203
00:21:49,040 --> 00:21:51,140
with address sanitizer so this

204
00:21:51,140 --> 00:21:55,130
introduces security issues so at least

205
00:21:55,130 --> 00:21:57,260
in the way it's currently working it is

206
00:21:57,260 --> 00:22:00,710
not usable practically as a as a

207
00:22:00,710 --> 00:22:04,130
production protection mechanism so it's

208
00:22:04,130 --> 00:22:05,810
a good testing tool but it's not

209
00:22:05,810 --> 00:22:07,310
something you want to run in the real

210
00:22:07,310 --> 00:22:14,090
world yeah but yeah it works I had half

211
00:22:14,090 --> 00:22:16,250
a server running with it for I can serve

212
00:22:16,250 --> 00:22:20,360
a pages and yeah found a lot of parks

213
00:22:20,360 --> 00:22:22,700
with it I still have a large number of

214
00:22:22,700 --> 00:22:26,660
locked files of bugs from that that I

215
00:22:26,660 --> 00:22:29,330
have not I have not reported yet I

216
00:22:29,330 --> 00:22:30,150
haven't gone

217
00:22:30,150 --> 00:22:33,000
yet I probably somehow I have to

218
00:22:33,000 --> 00:22:35,340
crowdsource that because there's so many

219
00:22:35,340 --> 00:22:41,820
of them yeah but if you are involved in

220
00:22:41,820 --> 00:22:44,190
any free software project please please

221
00:22:44,190 --> 00:22:46,860
just compile it with address sanitizer

222
00:22:46,860 --> 00:22:49,140
once and run the test suite and see if

223
00:22:49,140 --> 00:22:53,210
something turns out what's up with that

224
00:22:53,870 --> 00:22:57,360
okay um some other tools that are worth

225
00:22:57,360 --> 00:22:58,140
mentioning

226
00:22:58,140 --> 00:23:00,570
I'm lip father I already mentioned

227
00:23:00,570 --> 00:23:03,300
earlier is it works similar than

228
00:23:03,300 --> 00:23:06,030
American fuzzy lot but it works on the

229
00:23:06,030 --> 00:23:08,490
function level so it's not calling an

230
00:23:08,490 --> 00:23:10,560
application it's calling a function so

231
00:23:10,560 --> 00:23:13,290
you're writing a wrapper function that

232
00:23:13,290 --> 00:23:16,890
takes a buffer and the length and then

233
00:23:16,890 --> 00:23:19,230
you feed that into the whatever function

234
00:23:19,230 --> 00:23:22,050
you want to test the advantage of that

235
00:23:22,050 --> 00:23:25,020
is first of all it's it's targeting

236
00:23:25,020 --> 00:23:26,880
different things like it's a function in

237
00:23:26,880 --> 00:23:29,340
other software and it's it's much faster

238
00:23:29,340 --> 00:23:32,910
than a FL because FL has to like fork a

239
00:23:32,910 --> 00:23:35,580
new process for every tested input and

240
00:23:35,580 --> 00:23:38,550
this just is running in one process so

241
00:23:38,550 --> 00:23:41,700
it's much faster but it it's a bit

242
00:23:41,700 --> 00:23:43,620
tricky to use because you have to be

243
00:23:43,620 --> 00:23:45,480
very careful that you're not for example

244
00:23:45,480 --> 00:23:47,130
that you're not leaking any memory

245
00:23:47,130 --> 00:23:50,880
inside your test function because then

246
00:23:50,880 --> 00:23:53,220
just the memory of the process will grow

247
00:23:53,220 --> 00:23:55,230
till it's too much because it's

248
00:23:55,230 --> 00:23:57,120
executing this function millions of

249
00:23:57,120 --> 00:24:01,350
times and so it's not as straightforward

250
00:24:01,350 --> 00:24:03,660
to use but it's also very useful tool

251
00:24:03,660 --> 00:24:05,910
especially if you integrate that in the

252
00:24:05,910 --> 00:24:08,010
development process of a software I

253
00:24:08,010 --> 00:24:09,870
think then it's a very powerful tool and

254
00:24:09,870 --> 00:24:17,640
it's part of LLVM so yeah and this case

255
00:24:17,640 --> 00:24:20,910
on which is like address sanitizer in

256
00:24:20,910 --> 00:24:23,400
the linux kernel and this is just an

257
00:24:23,400 --> 00:24:25,620
option you can in make menu config and a

258
00:24:25,620 --> 00:24:28,490
debugging you can just enable that and

259
00:24:28,490 --> 00:24:31,260
yeah when I tried this the first time

260
00:24:31,260 --> 00:24:33,450
then I immediately got some warnings

261
00:24:33,450 --> 00:24:36,210
that my graphics driver was accessing

262
00:24:36,210 --> 00:24:40,320
some invalid memory so yeah it's

263
00:24:40,320 --> 00:24:42,480
probably not not used as often as it

264
00:24:42,480 --> 00:24:43,860
should be

265
00:24:43,860 --> 00:24:47,850
and death now after a tool called sis

266
00:24:47,850 --> 00:24:51,210
Cola which is adapting a strategy

267
00:24:51,210 --> 00:24:53,520
similar what Lib father and Ava are

268
00:24:53,520 --> 00:24:56,250
using with this coverage based fuzzing

269
00:24:56,250 --> 00:25:00,300
to the kernel with Cisco fuzzing and I'm

270
00:25:00,300 --> 00:25:01,770
also read that there are people trying

271
00:25:01,770 --> 00:25:05,100
to fast other kernel inputs with similar

272
00:25:05,100 --> 00:25:11,220
strategies yeah so then there are other

273
00:25:11,220 --> 00:25:14,340
sanitizer features in the compilers so

274
00:25:14,340 --> 00:25:18,150
one is UV Sun which detects undefined

275
00:25:18,150 --> 00:25:20,940
behavior so maybe you know that in C

276
00:25:20,940 --> 00:25:23,070
there are some things like if you have a

277
00:25:23,070 --> 00:25:25,590
signed integer overflow or if you have a

278
00:25:25,590 --> 00:25:28,830
shift left by a negative value these

279
00:25:28,830 --> 00:25:31,020
things the standard says that they are

280
00:25:31,020 --> 00:25:34,050
undefined so you cannot rely that they

281
00:25:34,050 --> 00:25:37,320
do anything predictable and UV son finds

282
00:25:37,320 --> 00:25:40,230
these things a bit of a problem with

283
00:25:40,230 --> 00:25:41,760
that is that there are so many of these

284
00:25:41,760 --> 00:25:44,490
bugs and usually they don't do anything

285
00:25:44,490 --> 00:25:46,650
bad because most of the time the

286
00:25:46,650 --> 00:25:48,870
compiler will just do what you expect it

287
00:25:48,870 --> 00:25:52,290
to do like an integer overflow just okay

288
00:25:52,290 --> 00:25:54,720
if you have int max plus 1 it gives it

289
00:25:54,720 --> 00:25:57,059
mean that usually happens but you cannot

290
00:25:57,059 --> 00:26:02,910
rely on it so yeah and there's also a

291
00:26:02,910 --> 00:26:05,550
thread sanitizer and memory sanitizer

292
00:26:05,550 --> 00:26:08,340
but these are a bit more tricky to use

293
00:26:08,340 --> 00:26:10,860
so the really nice thing with address

294
00:26:10,860 --> 00:26:13,260
sanitizer is that it's just your enable

295
00:26:13,260 --> 00:26:20,880
it and it usually just works so yeah and

296
00:26:20,880 --> 00:26:24,450
there's some work done to to adapt FL to

297
00:26:24,450 --> 00:26:27,300
networking because the the standard a FL

298
00:26:27,300 --> 00:26:30,410
is trust testing file inputs so you have

299
00:26:30,410 --> 00:26:32,760
executable and give it some file and

300
00:26:32,760 --> 00:26:37,080
yeah there's a patch for it to true let

301
00:26:37,080 --> 00:26:41,010
it fast TCP inputs and there's also

302
00:26:41,010 --> 00:26:43,350
another attempt where you're using a

303
00:26:43,350 --> 00:26:46,890
preload library that will take something

304
00:26:46,890 --> 00:26:49,200
from standard in and feed it into a TCP

305
00:26:49,200 --> 00:26:51,960
port but these things are quite brittle

306
00:26:51,960 --> 00:26:54,480
and it's not as straightforward to use

307
00:26:54,480 --> 00:26:56,220
so you have to play around with it a bit

308
00:26:56,220 --> 00:26:57,220
and

309
00:26:57,220 --> 00:26:59,290
there's certainly room for improvement

310
00:26:59,290 --> 00:27:06,550
here so and there's a part of American

311
00:27:06,550 --> 00:27:08,920
fuzzy look to Android I have not tested

312
00:27:08,920 --> 00:27:12,700
this myself but yeah if you know about

313
00:27:12,700 --> 00:27:15,880
Android security it's probably a good

314
00:27:15,880 --> 00:27:18,760
thing it is needed they should fast test

315
00:27:18,760 --> 00:27:21,790
their stuff and what's interesting is

316
00:27:21,790 --> 00:27:23,590
like I mentioned earlier that some of

317
00:27:23,590 --> 00:27:25,870
the stage fright bugs were found with a

318
00:27:25,870 --> 00:27:28,690
FL and what happened there is that the

319
00:27:28,690 --> 00:27:31,480
guy who found them ported stage fright

320
00:27:31,480 --> 00:27:34,900
library to standard Linux so he could

321
00:27:34,900 --> 00:27:44,590
facets so yeah yeah and as a at the end

322
00:27:44,590 --> 00:27:47,710
I want to ask you like who is involved

323
00:27:47,710 --> 00:27:50,260
in some kind of C development or C++

324
00:27:50,260 --> 00:27:53,680
development his hands up that's yeah

325
00:27:53,680 --> 00:27:57,850
maybe a third and are you already using

326
00:27:57,850 --> 00:28:00,340
fuzzing or are you using address

327
00:28:00,340 --> 00:28:04,240
sanitizer or and who is not using both

328
00:28:04,240 --> 00:28:06,460
fuzzing and address sanitizer from the

329
00:28:06,460 --> 00:28:09,160
future okay so now you know what you

330
00:28:09,160 --> 00:28:14,110
have to do next it will improve yourself

331
00:28:14,110 --> 00:28:19,390
to a quality definitely yeah thanks for

332
00:28:19,390 --> 00:28:20,500
listening

333
00:28:20,500 --> 00:28:23,950
yeah and I'm I think we have time for

334
00:28:23,950 --> 00:28:26,160
questions

335
00:28:33,040 --> 00:28:35,960
all right so my first question would be

336
00:28:35,960 --> 00:28:39,440
like what what is your attitude to

337
00:28:39,440 --> 00:28:41,660
static code analysis maybe model

338
00:28:41,660 --> 00:28:49,400
checking static code analysis okay it's

339
00:28:49,400 --> 00:28:51,920
actually I have not used it a whole lot

340
00:28:51,920 --> 00:28:58,130
and my impression was that it will

341
00:28:58,130 --> 00:28:59,990
usually not find the most interesting

342
00:28:59,990 --> 00:29:03,020
bugs but I don't have a lot of

343
00:29:03,020 --> 00:29:04,670
experience with it so maybe I am wrong

344
00:29:04,670 --> 00:29:17,080
on that no more questions

345
00:29:29,929 --> 00:29:33,770
how did you find the OTR know the the

346
00:29:33,770 --> 00:29:36,830
pigeon OTR plugin titude do you really

347
00:29:36,830 --> 00:29:40,400
click on the you are yes I just I had

348
00:29:40,400 --> 00:29:42,230
the general system built with retro

349
00:29:42,230 --> 00:29:44,750
sanitizer and then I started the pigeon

350
00:29:44,750 --> 00:29:48,260
and started a chat session and so the

351
00:29:48,260 --> 00:29:49,429
back happened when you try to

352
00:29:49,429 --> 00:29:53,320
authenticate your the other contact and

353
00:29:53,320 --> 00:29:55,580
another interesting thing about that one

354
00:29:55,580 --> 00:29:57,800
is it was already reported six months

355
00:29:57,800 --> 00:29:59,630
earlier in their Park tracker but it was

356
00:29:59,630 --> 00:30:04,040
ignored so this house also shows up that

357
00:30:04,040 --> 00:30:07,820
your fuzzing project or your initiative

358
00:30:07,820 --> 00:30:13,160
many targets file input systems or the

359
00:30:13,160 --> 00:30:16,490
the attack surfaces is file input but

360
00:30:16,490 --> 00:30:18,710
there's a whole whole lot Geron from

361
00:30:18,710 --> 00:30:21,260
user input or on embedded systems where

362
00:30:21,260 --> 00:30:24,710
you can't do this file stuff thingy yeah

363
00:30:24,710 --> 00:30:29,420
so I mean that the patron back was there

364
00:30:29,420 --> 00:30:32,690
was no fuzzing involved it was just yeah

365
00:30:32,690 --> 00:30:34,700
I mean I talked about these two tools

366
00:30:34,700 --> 00:30:37,309
AFL and address sanitizer and this was

367
00:30:37,309 --> 00:30:39,980
just address sanitizer so this is just

368
00:30:39,980 --> 00:30:42,350
use this to compile your software and

369
00:30:42,350 --> 00:30:47,140
test it with it but there was also but

370
00:30:47,140 --> 00:30:51,620
the developers from repo office they did

371
00:30:51,620 --> 00:30:54,679
something where they emulated the clicks

372
00:30:54,679 --> 00:30:57,920
on their GUI by based on an input and

373
00:30:57,920 --> 00:31:00,290
use that for fuzzing which is also quite

374
00:31:00,290 --> 00:31:02,990
interesting approach yeah I think the

375
00:31:02,990 --> 00:31:05,510
the file input should be extended to all

376
00:31:05,510 --> 00:31:08,450
using yeah definitely I wasn't but they

377
00:31:08,450 --> 00:31:10,880
recognized STEM fields and and fill them

378
00:31:10,880 --> 00:31:12,770
and because almost no user interface

379
00:31:12,770 --> 00:31:15,920
today uses only file input yeah I mean

380
00:31:15,920 --> 00:31:18,290
it's a rant class is the easiest thing

381
00:31:18,290 --> 00:31:20,990
yes yes it's the low-hanging fruit you

382
00:31:20,990 --> 00:31:23,530
know start

383
00:31:29,580 --> 00:31:31,840
what kind of information do you need to

384
00:31:31,840 --> 00:31:33,880
provide to FL about the structure of

385
00:31:33,880 --> 00:31:37,960
files that nothing you give it a an

386
00:31:37,960 --> 00:31:41,740
example file and the rest it does by

387
00:31:41,740 --> 00:31:58,780
itself okay okay if there are no more

388
00:31:58,780 --> 00:32:03,420
questions then yeah thanks for listening

389
00:32:15,130 --> 00:32:17,190
you

