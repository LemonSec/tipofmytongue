1
00:00:06,190 --> 00:00:14,820
[Music]

2
00:00:13,459 --> 00:00:17,130
all right

3
00:00:14,820 --> 00:00:20,480
I hope the announcement was correct I

4
00:00:17,130 --> 00:00:23,580
didn't understand sorry for that so I

5
00:00:20,480 --> 00:00:27,090
work in a relatively large company and

6
00:00:23,580 --> 00:00:29,720
this company releases quite a few web

7
00:00:27,090 --> 00:00:34,170
products and updates them all the time

8
00:00:29,720 --> 00:00:36,510
and that's such a large code base so

9
00:00:34,170 --> 00:00:38,489
surely you have to secure it so that

10
00:00:36,510 --> 00:00:41,550
company employs quite a few security

11
00:00:38,489 --> 00:00:43,470
engineers so people who you know look at

12
00:00:41,550 --> 00:00:48,180
the code and try to make our products

13
00:00:43,470 --> 00:00:50,550
secure and I work in such a team so we

14
00:00:48,180 --> 00:00:54,000
do several things to secure our

15
00:00:50,550 --> 00:00:57,180
applications first of all we try to

16
00:00:54,000 --> 00:00:59,670
write hardened libraries and make our

17
00:00:57,180 --> 00:01:01,739
front-end developers of which there's

18
00:00:59,670 --> 00:01:05,780
we're talking about you know thousands

19
00:01:01,739 --> 00:01:08,579
of developers use them then we try to

20
00:01:05,780 --> 00:01:10,290
make sure that they are using only those

21
00:01:08,579 --> 00:01:15,059
security eyes and not something with

22
00:01:10,290 --> 00:01:16,560
codes on their own so we use for example

23
00:01:15,060 --> 00:01:21,090
all those static analysis or dynamic

24
00:01:16,560 --> 00:01:22,950
analysis of our code base and we also do

25
00:01:21,090 --> 00:01:24,420
security reviews so some people look

26
00:01:22,950 --> 00:01:27,210
manually at the code and make sure

27
00:01:24,420 --> 00:01:30,810
before launch that's it's not vulnerable

28
00:01:27,210 --> 00:01:33,600
and finally we also run our bug bounty

29
00:01:30,810 --> 00:01:37,049
program in case we actually miss some

30
00:01:33,600 --> 00:01:39,750
vulnerabilities so we think about

31
00:01:37,049 --> 00:01:42,180
security from the very early stage of

32
00:01:39,750 --> 00:01:43,740
the application to even after the launch

33
00:01:42,180 --> 00:01:46,200
right so we try to protect our users

34
00:01:43,740 --> 00:01:51,119
using multiple multiple mean multiple

35
00:01:46,200 --> 00:01:53,369
means and that surely means that our

36
00:01:51,119 --> 00:01:55,890
applications end up being secure right

37
00:01:53,369 --> 00:01:58,560
well unfortunately this is not the case

38
00:01:55,890 --> 00:02:00,930
and especially it's not the case for the

39
00:01:58,560 --> 00:02:02,909
cross site scripting bones so this is

40
00:02:00,930 --> 00:02:07,350
the data from our vulnerability rewards

41
00:02:02,909 --> 00:02:10,739
program in last year half of the

42
00:02:07,350 --> 00:02:12,180
payments that we give our external

43
00:02:10,739 --> 00:02:15,389
researchers for finding bugs in our

44
00:02:12,180 --> 00:02:18,150
software is about web bugs in specific

45
00:02:15,389 --> 00:02:19,120
and out of those wet box cross-site

46
00:02:18,150 --> 00:02:22,540
scripting remain

47
00:02:19,120 --> 00:02:24,640
it's the best rewarded let's say

48
00:02:22,540 --> 00:02:28,599
vulnerability type right so it still is

49
00:02:24,640 --> 00:02:30,429
a problem not even for say a simple web

50
00:02:28,599 --> 00:02:32,980
applications but even for applications

51
00:02:30,430 --> 00:02:35,200
written by companies that you know

52
00:02:32,980 --> 00:02:36,819
employ multiple people who are whose

53
00:02:35,200 --> 00:02:40,709
sole job is to protect you those

54
00:02:36,819 --> 00:02:44,109
applications from bugs like this and

55
00:02:40,709 --> 00:02:46,239
yeah I imagine this is also the problem

56
00:02:44,110 --> 00:02:48,310
in our applications in the data other

57
00:02:46,239 --> 00:02:50,950
applications and the data surely shows

58
00:02:48,310 --> 00:02:53,440
that as well so this is I believe from

59
00:02:50,950 --> 00:02:56,140
hacker 1 yes this is from hacker 1 XSS

60
00:02:53,440 --> 00:02:58,750
is a top vulnerability type being being

61
00:02:56,140 --> 00:03:00,700
reported and then rewarded by by those

62
00:02:58,750 --> 00:03:02,230
respective companies also Mozilla

63
00:03:00,700 --> 00:03:04,238
cross-site scripting it's a top

64
00:03:02,230 --> 00:03:08,980
vulnerability now surely there is a

65
00:03:04,239 --> 00:03:11,170
problem now what is this problem in

66
00:03:08,980 --> 00:03:12,909
specific first of all I would like to

67
00:03:11,170 --> 00:03:14,798
narrow down the conversation a little

68
00:03:12,909 --> 00:03:17,620
bit because I'm only talking about the

69
00:03:14,799 --> 00:03:19,209
one subs subset of exercising abilities

70
00:03:17,620 --> 00:03:21,310
which is the Dom base vulnerabilities

71
00:03:19,209 --> 00:03:26,139
the ones let's say introduced on the

72
00:03:21,310 --> 00:03:29,200
client and after looking at this data

73
00:03:26,139 --> 00:03:31,569
after trying to you know reason about

74
00:03:29,200 --> 00:03:33,250
that after trying to understand what is

75
00:03:31,569 --> 00:03:37,208
the landscape that we are talking about

76
00:03:33,250 --> 00:03:40,000
we think we know why democracy still

77
00:03:37,209 --> 00:03:43,090
happens even if you try really hard to

78
00:03:40,000 --> 00:03:44,889
eliminate it first of all don't base

79
00:03:43,090 --> 00:03:47,470
cross-site scripting is very easy to

80
00:03:44,889 --> 00:03:50,109
introduce and second of all it is very

81
00:03:47,470 --> 00:03:51,669
hard to detect especially when we are

82
00:03:50,109 --> 00:03:55,030
talking about complex code bases loud

83
00:03:51,669 --> 00:03:58,599
applications now first a little bit of

84
00:03:55,030 --> 00:04:00,099
refresher if you don't know Dom base

85
00:03:58,599 --> 00:04:01,629
cross-site scripting it's essentially a

86
00:04:00,099 --> 00:04:03,488
property of a JavaScript code so

87
00:04:01,629 --> 00:04:05,828
everything is there in the client in the

88
00:04:03,489 --> 00:04:08,949
browser and you have some flaw

89
00:04:05,829 --> 00:04:12,280
essentially there's data that comes from

90
00:04:08,949 --> 00:04:15,129
the user who can be the attacker so this

91
00:04:12,280 --> 00:04:18,820
data is usually in some strings within

92
00:04:15,129 --> 00:04:21,010
your code base and this data gets passed

93
00:04:18,820 --> 00:04:25,090
around to one of the functions that are

94
00:04:21,010 --> 00:04:26,830
called the Dom XSS things and as soon as

95
00:04:25,090 --> 00:04:29,140
you can you have a chain like that so

96
00:04:26,830 --> 00:04:32,560
data comes from this attacker control

97
00:04:29,140 --> 00:04:34,570
source to the sink that same will call

98
00:04:32,560 --> 00:04:36,190
your web application - well essentially

99
00:04:34,570 --> 00:04:38,980
executes JavaScript right so we have a

100
00:04:36,190 --> 00:04:41,139
remote code execution equivalent in

101
00:04:38,980 --> 00:04:43,180
JavaScript and this is an example right

102
00:04:41,139 --> 00:04:45,370
so a location hash is something that the

103
00:04:43,180 --> 00:04:50,260
attacker can control it's a very common

104
00:04:45,370 --> 00:04:53,320
source of Dom XSS payloads and the inner

105
00:04:50,260 --> 00:04:56,590
HTML property of an element is the same

106
00:04:53,320 --> 00:04:59,080
and once you know this data this data

107
00:04:56,590 --> 00:05:05,500
gets connected the full variable in this

108
00:04:59,080 --> 00:05:09,300
case we have a Dom XSS now I would say

109
00:05:05,500 --> 00:05:11,380
that don't exercise is very very easy to

110
00:05:09,300 --> 00:05:13,960
introduce in your web application this

111
00:05:11,380 --> 00:05:17,169
is part of the problem right first of

112
00:05:13,960 --> 00:05:20,080
all this is obvious as soon as anything

113
00:05:17,169 --> 00:05:22,359
user consult gets passed to this inner

114
00:05:20,080 --> 00:05:24,669
HTML property of the element then you

115
00:05:22,360 --> 00:05:29,169
very clearly you have like this textbook

116
00:05:24,669 --> 00:05:30,789
example of of XSS right but so you could

117
00:05:29,169 --> 00:05:33,099
tell your developers for example well

118
00:05:30,790 --> 00:05:34,660
maybe don't ask user data to in HTML and

119
00:05:33,100 --> 00:05:36,729
then the problem is solved maybe you

120
00:05:34,660 --> 00:05:40,240
want to grab your source code for inner

121
00:05:36,729 --> 00:05:43,150
HTML and make sure that you review every

122
00:05:40,240 --> 00:05:45,100
time something is passed in HTML and

123
00:05:43,150 --> 00:05:46,870
then you have clearly solved on exercise

124
00:05:45,100 --> 00:05:48,850
right well not really because there's

125
00:05:46,870 --> 00:05:52,810
it's not just in HTML right there's a

126
00:05:48,850 --> 00:05:55,360
lot of other things and in each of those

127
00:05:52,810 --> 00:05:57,940
things user data should never have been

128
00:05:55,360 --> 00:06:00,669
passed to them unless it was properly

129
00:05:57,940 --> 00:06:04,270
let's say treated sanitized or escaped

130
00:06:00,669 --> 00:06:07,270
however you want to call it now is this

131
00:06:04,270 --> 00:06:11,159
even a feasible problem to solve like

132
00:06:07,270 --> 00:06:15,340
can you teach your site developers to

133
00:06:11,160 --> 00:06:18,520
you know take special care when

134
00:06:15,340 --> 00:06:21,159
interacting with those sources I would

135
00:06:18,520 --> 00:06:23,859
say it's not really a very easy task and

136
00:06:21,160 --> 00:06:26,050
it is obvious mistakes will happen even

137
00:06:23,860 --> 00:06:28,630
if you do some sort of you know even

138
00:06:26,050 --> 00:06:31,870
gripping some automation around checking

139
00:06:28,630 --> 00:06:34,030
for those things but there's also a

140
00:06:31,870 --> 00:06:37,539
second part of the problem which is it's

141
00:06:34,030 --> 00:06:40,090
not just easy to introduce which can be

142
00:06:37,539 --> 00:06:41,590
exemplified by the fact that probably

143
00:06:40,090 --> 00:06:44,590
the very first web application that you

144
00:06:41,590 --> 00:06:46,239
have ever written as soon as it does any

145
00:06:44,590 --> 00:06:48,849
sort of user data interpolation

146
00:06:46,240 --> 00:06:51,310
you probably have just written an XSS in

147
00:06:48,849 --> 00:06:55,330
your web application right this the web

148
00:06:51,310 --> 00:06:57,580
is full of examples like that but the

149
00:06:55,330 --> 00:06:59,740
second part of the problem is it is very

150
00:06:57,580 --> 00:07:02,139
hard to detect for security

151
00:06:59,740 --> 00:07:06,430
professionals even and let's do a very

152
00:07:02,139 --> 00:07:09,699
short quiz show of hands do you think

153
00:07:06,430 --> 00:07:11,020
this code snippet is introducing a dumb

154
00:07:09,699 --> 00:07:16,000
exercise like raise your hand do you

155
00:07:11,020 --> 00:07:17,740
think it is yes at least one person is

156
00:07:16,000 --> 00:07:20,590
paying attention so yes this is a very

157
00:07:17,740 --> 00:07:22,360
clear example of Dom XSS of course but

158
00:07:20,590 --> 00:07:28,090
what about this one like is this one I

159
00:07:22,360 --> 00:07:29,229
don't exercise yes exactly and this is

160
00:07:28,090 --> 00:07:31,359
actually the coordinate problem

161
00:07:29,229 --> 00:07:32,770
maybe it isn't of exercise you have to

162
00:07:31,360 --> 00:07:35,229
pay additional attention there's some

163
00:07:32,770 --> 00:07:36,880
additional analysis to to figure that

164
00:07:35,229 --> 00:07:39,729
out right you need to know where the bar

165
00:07:36,880 --> 00:07:43,599
comes from now what about this one is

166
00:07:39,729 --> 00:07:44,440
this one of them exercise and the kids

167
00:07:43,599 --> 00:07:46,539
were you wrong

168
00:07:44,440 --> 00:07:48,130
it depends what foo means because if

169
00:07:46,539 --> 00:07:51,099
food for example is a script element

170
00:07:48,130 --> 00:07:52,750
then surely inserting interest into you

171
00:07:51,099 --> 00:07:55,030
know the text body on the script element

172
00:07:52,750 --> 00:07:57,099
you have an equivalent of eval isms

173
00:07:55,030 --> 00:08:00,520
right so yeah this is also problematic

174
00:07:57,099 --> 00:08:02,710
how about this one then can you tell

175
00:08:00,520 --> 00:08:03,520
anything about this line of codes in

176
00:08:02,710 --> 00:08:05,289
isolation

177
00:08:03,520 --> 00:08:07,539
you have no idea right because if buses

178
00:08:05,289 --> 00:08:09,280
use a console or bus is somehow sets to

179
00:08:07,539 --> 00:08:12,009
say inner HTML then you have the

180
00:08:09,280 --> 00:08:14,080
original first problem and obviously

181
00:08:12,009 --> 00:08:16,810
these are just very simplified example

182
00:08:14,080 --> 00:08:20,318
but the problem I'm trying to show is

183
00:08:16,810 --> 00:08:22,509
that to find it on XSS you need to

184
00:08:20,319 --> 00:08:25,060
understand the entirety of the

185
00:08:22,509 --> 00:08:28,449
application every potential line of code

186
00:08:25,060 --> 00:08:30,669
can possibly be using a chain of between

187
00:08:28,449 --> 00:08:32,709
sources and I think that introduces an

188
00:08:30,669 --> 00:08:35,199
XSS so in order to make sure that you do

189
00:08:32,708 --> 00:08:38,228
not have dome exercises you need to

190
00:08:35,200 --> 00:08:43,920
review all of it like you can't just

191
00:08:38,229 --> 00:08:47,740
ignore parts of your code base but that

192
00:08:43,919 --> 00:08:50,199
brings us to a question how do we make

193
00:08:47,740 --> 00:08:52,390
it easier how do we maybe even eliminate

194
00:08:50,200 --> 00:08:55,089
the exercise from the web platform can

195
00:08:52,390 --> 00:08:58,720
we even do it and I would say that yes

196
00:08:55,089 --> 00:08:59,889
we can do it it won't be easy that we

197
00:08:58,720 --> 00:09:02,910
already have

198
00:08:59,889 --> 00:09:07,619
a proposal in place let's say and

199
00:09:02,910 --> 00:09:10,179
solving this requires us to think about

200
00:09:07,619 --> 00:09:12,609
introducing an API that first of all

201
00:09:10,179 --> 00:09:14,949
reduces this attack surface such that

202
00:09:12,609 --> 00:09:16,689
not every line in your codebase is

203
00:09:14,949 --> 00:09:20,639
potentially introducing a dumb exercise

204
00:09:16,689 --> 00:09:23,139
but only you know small parts of it

205
00:09:20,639 --> 00:09:26,679
should be for example reviewed or

206
00:09:23,139 --> 00:09:27,759
analyzed deeply and you could completely

207
00:09:26,679 --> 00:09:30,608
ignore those other parts of the

208
00:09:27,759 --> 00:09:34,049
application and second of all is also

209
00:09:30,609 --> 00:09:38,019
crucial which is making security

210
00:09:34,049 --> 00:09:39,699
explicit so the rules that you use for

211
00:09:38,019 --> 00:09:41,889
example for sanitizing the data or

212
00:09:39,699 --> 00:09:44,589
processing it somehow or filtering it

213
00:09:41,889 --> 00:09:47,199
are parts of your application code you

214
00:09:44,589 --> 00:09:50,319
have to write them essentially and then

215
00:09:47,199 --> 00:09:53,229
they could be reviewed right such that

216
00:09:50,319 --> 00:09:55,299
no no magic is happening for example you

217
00:09:53,230 --> 00:09:57,279
can't pretend that well this data is

218
00:09:55,299 --> 00:09:59,049
actually sanitized because it's very

219
00:09:57,279 --> 00:10:01,749
apparent by just looking at the code

220
00:09:59,049 --> 00:10:06,029
base that some escaping for example is

221
00:10:01,749 --> 00:10:08,739
not being done and the API that is

222
00:10:06,029 --> 00:10:10,749
designed around those principles is

223
00:10:08,739 --> 00:10:13,959
essentially what I wanted to talk to you

224
00:10:10,749 --> 00:10:16,929
about and this is trusted types so

225
00:10:13,959 --> 00:10:18,729
what's the main idea the main idea is we

226
00:10:16,929 --> 00:10:22,480
take a look at all those things that I

227
00:10:18,730 --> 00:10:25,809
mentioned before and we make them

228
00:10:22,480 --> 00:10:26,709
strongly-typed before in the Dom all

229
00:10:25,809 --> 00:10:29,618
those dumb things

230
00:10:26,709 --> 00:10:32,559
say for example in HTML accepted strings

231
00:10:29,619 --> 00:10:34,839
and the strings the problem of strengths

232
00:10:32,559 --> 00:10:36,459
is that you do not know where do they

233
00:10:34,839 --> 00:10:38,379
come from right you need to analyze this

234
00:10:36,459 --> 00:10:41,040
whole code base to make sure that you

235
00:10:38,379 --> 00:10:44,499
know they were not attacker consult here

236
00:10:41,040 --> 00:10:46,599
we shift this problem we make an

237
00:10:44,499 --> 00:10:48,429
abstraction of this problem and we are

238
00:10:46,600 --> 00:10:50,649
trying to address new democracies

239
00:10:48,429 --> 00:10:53,559
through this abstraction so first of all

240
00:10:50,649 --> 00:10:55,809
we make sure that the for example in

241
00:10:53,559 --> 00:11:00,789
HTML doesn't accept strings anymore and

242
00:10:55,809 --> 00:11:05,289
instead we could use object objects to

243
00:11:00,789 --> 00:11:07,839
to pass to inner HTML function the fun

244
00:11:05,289 --> 00:11:10,600
part is that the Dom API already behaves

245
00:11:07,839 --> 00:11:13,389
like that for well years since probably

246
00:11:10,600 --> 00:11:13,780
its inception and you can see a code

247
00:11:13,389 --> 00:11:16,270
exam

248
00:11:13,780 --> 00:11:18,250
of that so for example if you pass an

249
00:11:16,270 --> 00:11:20,829
object that happens to have a two string

250
00:11:18,250 --> 00:11:23,080
function to innerhtml this two string

251
00:11:20,830 --> 00:11:25,000
function will get executed and then the

252
00:11:23,080 --> 00:11:29,110
resulting string will be actually

253
00:11:25,000 --> 00:11:31,900
assigned to to the innerhtml property so

254
00:11:29,110 --> 00:11:33,850
we use this trick essentially but we

255
00:11:31,900 --> 00:11:36,250
introduce those trusted objects those

256
00:11:33,850 --> 00:11:38,650
special types of of the objects that

257
00:11:36,250 --> 00:11:41,590
embed the security information with them

258
00:11:38,650 --> 00:11:43,390
and those three objects depend on the

259
00:11:41,590 --> 00:11:45,610
context because exercise is a very

260
00:11:43,390 --> 00:11:47,260
contextual problem because you need to

261
00:11:45,610 --> 00:11:51,040
sanitize for example URLs you need to

262
00:11:47,260 --> 00:11:52,900
sanitize HTML differently and you may be

263
00:11:51,040 --> 00:11:54,610
you want to control what gets passed -

264
00:11:52,900 --> 00:11:56,829
for example - evil or the script bodies

265
00:11:54,610 --> 00:11:59,560
right so with at least three contexts

266
00:11:56,830 --> 00:12:02,890
that we are talking about so what we

267
00:11:59,560 --> 00:12:05,050
propose is that there will be three new

268
00:12:02,890 --> 00:12:07,240
types of the objects the trusted HTML

269
00:12:05,050 --> 00:12:10,120
for inner HTML and say for example

270
00:12:07,240 --> 00:12:12,370
iframe source doc trusted script which

271
00:12:10,120 --> 00:12:15,550
is something that you usually pass to

272
00:12:12,370 --> 00:12:18,790
for example eval or that you make a

273
00:12:15,550 --> 00:12:20,410
script body from an trusted strip URL

274
00:12:18,790 --> 00:12:22,000
which is fairly obvious this is the URLs

275
00:12:20,410 --> 00:12:25,750
of the script that your application is

276
00:12:22,000 --> 00:12:29,710
loading and once we have introduced

277
00:12:25,750 --> 00:12:33,180
those types you can put all the security

278
00:12:29,710 --> 00:12:39,360
rules and all this meta data around

279
00:12:33,180 --> 00:12:42,760
those types let's see how first of all

280
00:12:39,360 --> 00:12:44,890
we can look at the situation of how a

281
00:12:42,760 --> 00:12:46,990
web application would behave is trusted

282
00:12:44,890 --> 00:12:49,990
types are not enforced right so there is

283
00:12:46,990 --> 00:12:52,180
a support in the browser for trusted

284
00:12:49,990 --> 00:12:55,420
types but the application didn't opt

285
00:12:52,180 --> 00:12:57,609
into being secured by them so what

286
00:12:55,420 --> 00:13:00,040
happens is thanks to this trick that I

287
00:12:57,610 --> 00:13:02,770
showed earlier that you can still use

288
00:13:00,040 --> 00:13:05,469
strings with the things obviously in

289
00:13:02,770 --> 00:13:07,930
this particular case having an XSS but

290
00:13:05,470 --> 00:13:10,300
you can also just as well use those

291
00:13:07,930 --> 00:13:13,689
trusted objects so a trusted HTML

292
00:13:10,300 --> 00:13:16,540
instance can be passed to in HTML and it

293
00:13:13,690 --> 00:13:19,690
will be silently or implicitly unwrapped

294
00:13:16,540 --> 00:13:21,730
by the browser and you will get whatever

295
00:13:19,690 --> 00:13:24,100
was stored in the instance of the object

296
00:13:21,730 --> 00:13:26,980
instead right so your application still

297
00:13:24,100 --> 00:13:29,680
works if you introduce the types

298
00:13:26,980 --> 00:13:31,990
- you're dumb six but you could also

299
00:13:29,680 --> 00:13:34,420
just as well start enforcing it to

300
00:13:31,990 --> 00:13:37,690
actually maybe get some protection so

301
00:13:34,420 --> 00:13:38,829
the way you control trusted type-c is by

302
00:13:37,690 --> 00:13:42,820
integrating with the content security

303
00:13:38,830 --> 00:13:44,890
policy header and there's something in

304
00:13:42,820 --> 00:13:46,120
the CSP lingo it's called the directive

305
00:13:44,890 --> 00:13:48,130
right so you have a trusted text

306
00:13:46,120 --> 00:13:50,230
directive and then there's some data

307
00:13:48,130 --> 00:13:52,390
ignore the data for now but essentially

308
00:13:50,230 --> 00:13:56,980
what happens once your application uses

309
00:13:52,390 --> 00:13:59,500
this CSP header is that while it still

310
00:13:56,980 --> 00:14:02,950
accepts those typed objects it stops

311
00:13:59,500 --> 00:14:06,820
accepting strings right so what happens

312
00:14:02,950 --> 00:14:08,620
is there will be a safety violation sent

313
00:14:06,820 --> 00:14:10,510
to your reporting server for example but

314
00:14:08,620 --> 00:14:12,130
also you will simply get a type error in

315
00:14:10,510 --> 00:14:14,290
your application this is actually a

316
00:14:12,130 --> 00:14:15,790
pretty big property of trusted types

317
00:14:14,290 --> 00:14:17,620
meaning that you can start treating

318
00:14:15,790 --> 00:14:19,750
security bugs in your program in your

319
00:14:17,620 --> 00:14:21,730
program similarly to all other

320
00:14:19,750 --> 00:14:23,170
programming parts you can debug them

321
00:14:21,730 --> 00:14:25,330
using the same tools you can for example

322
00:14:23,170 --> 00:14:27,910
set up a chrome debugger and you know

323
00:14:25,330 --> 00:14:33,510
try to find out why does this error

324
00:14:27,910 --> 00:14:37,060
happens in my application so this is how

325
00:14:33,510 --> 00:14:40,319
trusted types in practice get enforced

326
00:14:37,060 --> 00:14:43,150
in in the browser and thanks to being in

327
00:14:40,320 --> 00:14:44,980
or integrating with the CSP we could

328
00:14:43,150 --> 00:14:49,120
also have a property that is called the

329
00:14:44,980 --> 00:14:52,090
record only mode right so you can get

330
00:14:49,120 --> 00:14:53,710
warnings when strings get assigned to

331
00:14:52,090 --> 00:14:55,420
things that do not break your

332
00:14:53,710 --> 00:14:58,470
application but you still get some

333
00:14:55,420 --> 00:15:01,510
visibility and you can progressively

334
00:14:58,470 --> 00:15:05,520
migrate it to using the only trusted

335
00:15:01,510 --> 00:15:08,680
types but here obviously comes a very

336
00:15:05,520 --> 00:15:10,360
crucial question okay so yeah types cool

337
00:15:08,680 --> 00:15:12,099
idea but how do I actually create those

338
00:15:10,360 --> 00:15:15,400
types right this is this is what the

339
00:15:12,100 --> 00:15:18,520
secret sources and the way you create

340
00:15:15,400 --> 00:15:21,790
types stay with me for a second is you

341
00:15:18,520 --> 00:15:24,040
create policies so we added policies in

342
00:15:21,790 --> 00:15:28,900
your content security policy so we have

343
00:15:24,040 --> 00:15:31,150
like two layers of policies now what

344
00:15:28,900 --> 00:15:32,770
does it mean first of all you use the

345
00:15:31,150 --> 00:15:37,180
trusted types that create policy

346
00:15:32,770 --> 00:15:40,270
function and each policy has first of

347
00:15:37,180 --> 00:15:42,219
all a name more on that later but

348
00:15:40,270 --> 00:15:44,829
a set of functions and those set of

349
00:15:42,220 --> 00:15:47,650
functions define the rules of converting

350
00:15:44,830 --> 00:15:50,380
a string into a given trusted type

351
00:15:47,650 --> 00:15:53,040
object so in this particular case I have

352
00:15:50,380 --> 00:15:55,990
created a policy that will run my custom

353
00:15:53,040 --> 00:15:58,060
sanitizer on the data and only when that

354
00:15:55,990 --> 00:16:00,160
sanitizer says the data is ok and you

355
00:15:58,060 --> 00:16:02,800
know I removed for example all whatever

356
00:16:00,160 --> 00:16:05,380
in line even hunters and whatnot then

357
00:16:02,800 --> 00:16:08,079
you will get an instance of a trusted

358
00:16:05,380 --> 00:16:09,640
object and this happens like this so you

359
00:16:08,080 --> 00:16:13,000
have a reference to the sanitizing

360
00:16:09,640 --> 00:16:15,130
policy variable you call its create HTML

361
00:16:13,000 --> 00:16:17,770
function the sanitizer gets called and

362
00:16:15,130 --> 00:16:21,640
whatever object gets returned from this

363
00:16:17,770 --> 00:16:24,010
policy has the sanitize data inside it

364
00:16:21,640 --> 00:16:26,920
right so the security rules are solely

365
00:16:24,010 --> 00:16:29,560
in the body of this of this policy in

366
00:16:26,920 --> 00:16:32,439
the first example and later on of course

367
00:16:29,560 --> 00:16:35,530
you can use this trusted HTML with the

368
00:16:32,440 --> 00:16:39,570
innerhtml function and now the crucial

369
00:16:35,530 --> 00:16:42,550
part in your application using this

370
00:16:39,570 --> 00:16:44,320
whitelist at the very bottom you can

371
00:16:42,550 --> 00:16:50,319
simply say that in my application and

372
00:16:44,320 --> 00:16:53,890
only accept trusted type policies of the

373
00:16:50,320 --> 00:16:58,240
given names what that means is that only

374
00:16:53,890 --> 00:17:00,430
the code within those two policies has a

375
00:16:58,240 --> 00:17:04,060
capability of introducing Dom XSS to my

376
00:17:00,430 --> 00:17:06,040
application everything the rest of the

377
00:17:04,060 --> 00:17:10,409
application code base cannot possibly

378
00:17:06,040 --> 00:17:13,510
create trusted types so cannot possibly

379
00:17:10,410 --> 00:17:16,200
call the dongsaeng's and therefore

380
00:17:13,510 --> 00:17:18,879
cannot possibly have or cause Dom XSS

381
00:17:16,200 --> 00:17:21,100
there's a couple of caveats

382
00:17:18,880 --> 00:17:24,490
the talk is really short so I will just

383
00:17:21,099 --> 00:17:26,290
ignore them but feel free to you know

384
00:17:24,490 --> 00:17:29,260
talk to me afterwards there are some

385
00:17:26,290 --> 00:17:34,360
questions I can show you describe it in

386
00:17:29,260 --> 00:17:36,430
more details now this becomes a problem

387
00:17:34,360 --> 00:17:39,010
right because this approach means that

388
00:17:36,430 --> 00:17:40,750
you have to migrate all of your

389
00:17:39,010 --> 00:17:45,580
application or at least all of the parts

390
00:17:40,750 --> 00:17:49,330
that use or write - Dom - trusted types

391
00:17:45,580 --> 00:17:50,740
and that's simply a large task now can

392
00:17:49,330 --> 00:17:54,159
we do something to make it simpler to

393
00:17:50,740 --> 00:17:57,490
migrate yes we can first of all

394
00:17:54,160 --> 00:17:58,900
policy but second of all we have created

395
00:17:57,490 --> 00:18:01,030
a concept that is called the default

396
00:17:58,900 --> 00:18:03,340
policy so this is a policy that you can

397
00:18:01,030 --> 00:18:06,760
create on your own and it will be

398
00:18:03,340 --> 00:18:08,470
implicitly called by the browser the

399
00:18:06,760 --> 00:18:09,940
moment you are actually still using

400
00:18:08,470 --> 00:18:14,560
strings with the sink so this is like

401
00:18:09,940 --> 00:18:16,150
this last last best efforts to convert a

402
00:18:14,560 --> 00:18:19,419
string into a type and obviously this

403
00:18:16,150 --> 00:18:21,400
policy better be secure because this is

404
00:18:19,420 --> 00:18:23,590
probably where at least in the beginning

405
00:18:21,400 --> 00:18:27,400
of the migration most of the data will

406
00:18:23,590 --> 00:18:29,230
come through but the logic here is

407
00:18:27,400 --> 00:18:31,780
arbitrary right so for example you may

408
00:18:29,230 --> 00:18:33,970
decide say for example you develop an

409
00:18:31,780 --> 00:18:36,190
environment that I only wants to log

410
00:18:33,970 --> 00:18:39,460
what is happening what is going through

411
00:18:36,190 --> 00:18:42,840
the default policy and fix it as as it

412
00:18:39,460 --> 00:18:45,790
goes right as ID bug this problem and

413
00:18:42,840 --> 00:18:47,110
yeah you can also just whitelist default

414
00:18:45,790 --> 00:18:52,120
policy in the content security policy

415
00:18:47,110 --> 00:18:54,360
and there's also one other thing we

416
00:18:52,120 --> 00:18:56,919
noticed that while a lot of

417
00:18:54,360 --> 00:18:59,020
vulnerabilities Dom XSS vulnerabilities

418
00:18:56,920 --> 00:19:01,270
are being exploited by using the

419
00:18:59,020 --> 00:19:03,400
JavaScript arrays payload it just so

420
00:19:01,270 --> 00:19:10,389
happens that the web applications use

421
00:19:03,400 --> 00:19:11,980
URLs a lot who knew and not a lot of

422
00:19:10,390 --> 00:19:14,620
applications are actually using

423
00:19:11,980 --> 00:19:16,300
javascript to arise in their code bases

424
00:19:14,620 --> 00:19:19,389
at least the modern applications tend

425
00:19:16,300 --> 00:19:21,580
not to depend on them and use other

426
00:19:19,390 --> 00:19:25,330
means of well executing code when

427
00:19:21,580 --> 00:19:26,679
someone clicks on a link so we decided

428
00:19:25,330 --> 00:19:30,909
to just get rid of the JavaScript URLs

429
00:19:26,680 --> 00:19:33,100
and by default if your browser wants to

430
00:19:30,910 --> 00:19:35,560
navigate your JavaScript URL and you

431
00:19:33,100 --> 00:19:38,350
want you are trusted types compliant so

432
00:19:35,560 --> 00:19:41,679
you have this content security policy

433
00:19:38,350 --> 00:19:43,389
header with trusted types then a default

434
00:19:41,680 --> 00:19:45,700
policy will be called on the value of

435
00:19:43,390 --> 00:19:47,200
this JavaScript URL and if the default

436
00:19:45,700 --> 00:19:49,720
policy for example doesn't exist or

437
00:19:47,200 --> 00:19:52,210
doesn't allow for creating trusted

438
00:19:49,720 --> 00:19:54,730
script objects then nothing bad will

439
00:19:52,210 --> 00:19:58,770
happen but this is also a very nice way

440
00:19:54,730 --> 00:20:01,960
of introducing some potential

441
00:19:58,770 --> 00:20:03,610
carving out of certain URLs from from

442
00:20:01,960 --> 00:20:05,890
this policy like for example here I

443
00:20:03,610 --> 00:20:07,959
allow javascript:void 0 which is

444
00:20:05,890 --> 00:20:15,070
harmless but no other payload can

445
00:20:07,960 --> 00:20:16,860
we execute so this is present in the

446
00:20:15,070 --> 00:20:19,330
browsers now this is this is in Chrome

447
00:20:16,860 --> 00:20:21,669
hidden behind the flag and we started

448
00:20:19,330 --> 00:20:25,810
using it in our applications and it the

449
00:20:21,670 --> 00:20:28,210
results are fairly optimistic so how can

450
00:20:25,810 --> 00:20:34,450
you deploy trusted types in a web

451
00:20:28,210 --> 00:20:36,160
application well first of all you try to

452
00:20:34,450 --> 00:20:38,050
migrate the libraries that actually

453
00:20:36,160 --> 00:20:39,610
write to the Dom in your in your web

454
00:20:38,050 --> 00:20:42,370
application that's not a lot of code

455
00:20:39,610 --> 00:20:43,629
that usually is somewhere around where

456
00:20:42,370 --> 00:20:47,250
you have client-side templating

457
00:20:43,630 --> 00:20:50,140
libraries maybe some HTML sanitization

458
00:20:47,250 --> 00:20:53,640
sometimes dynamic script loading only a

459
00:20:50,140 --> 00:20:57,490
couple of places of the web application

460
00:20:53,640 --> 00:21:00,040
actually touch the Dom or process the

461
00:20:57,490 --> 00:21:02,230
data that later on reaches into the Dom

462
00:21:00,040 --> 00:21:05,440
most of the application code is actually

463
00:21:02,230 --> 00:21:08,410
business logic that has no need of

464
00:21:05,440 --> 00:21:10,480
writing to the Dom in practice so first

465
00:21:08,410 --> 00:21:13,270
you migrate those individual libraries

466
00:21:10,480 --> 00:21:14,380
to that that's right to the Dom and up

467
00:21:13,270 --> 00:21:17,110
trusted types to them

468
00:21:14,380 --> 00:21:20,400
second of all trying to do some static

469
00:21:17,110 --> 00:21:22,360
analysis more elaborate or less terrible

470
00:21:20,400 --> 00:21:24,280
elaborate in Google for example we

471
00:21:22,360 --> 00:21:29,139
compile our JavaScript so this becomes

472
00:21:24,280 --> 00:21:32,080
very easy to ascertain but you can also

473
00:21:29,140 --> 00:21:34,090
just as well use some graphing or some

474
00:21:32,080 --> 00:21:37,449
code lenders to make sure that no one is

475
00:21:34,090 --> 00:21:40,689
calling in HTML for example with with a

476
00:21:37,450 --> 00:21:42,580
string right so you know that to the

477
00:21:40,690 --> 00:21:44,200
best of your abilities to the best of

478
00:21:42,580 --> 00:21:46,870
your knowledge your application is

479
00:21:44,200 --> 00:21:49,330
trusted type compliant and then you

480
00:21:46,870 --> 00:21:52,179
start checking that in the browser so

481
00:21:49,330 --> 00:21:54,550
you are the report only policy with some

482
00:21:52,180 --> 00:21:57,220
trusted types directive that star allows

483
00:21:54,550 --> 00:22:00,970
for any any policy names to be created

484
00:21:57,220 --> 00:22:02,470
and then you observe violations because

485
00:22:00,970 --> 00:22:05,920
maybe you missed something and then you

486
00:22:02,470 --> 00:22:08,470
debug and once you debug you actually go

487
00:22:05,920 --> 00:22:11,020
to two so you have to migrate additional

488
00:22:08,470 --> 00:22:13,330
libraries a little bit and then as it

489
00:22:11,020 --> 00:22:15,670
narrows down the violations dropped and

490
00:22:13,330 --> 00:22:19,179
finally what you end up with you can

491
00:22:15,670 --> 00:22:21,270
start enforcing trusted types and what

492
00:22:19,180 --> 00:22:22,980
is a very nice property of it

493
00:22:21,270 --> 00:22:27,320
that maybe you have reviewed this

494
00:22:22,980 --> 00:22:30,440
application for security at say tomorrow

495
00:22:27,320 --> 00:22:33,929
it will also be secure the next year

496
00:22:30,440 --> 00:22:35,640
because no matter what new code gets

497
00:22:33,930 --> 00:22:37,620
introduced to your web application

498
00:22:35,640 --> 00:22:39,030
without changing a cotton security

499
00:22:37,620 --> 00:22:41,129
policy the policy header

500
00:22:39,030 --> 00:22:42,720
no one can add a new policy to your

501
00:22:41,130 --> 00:22:45,180
application therefore no one can even

502
00:22:42,720 --> 00:22:46,430
have the capability of introducing Dom

503
00:22:45,180 --> 00:22:52,590
XSS

504
00:22:46,430 --> 00:22:54,390
let's see some demo so as I said this is

505
00:22:52,590 --> 00:22:56,100
already implemented in the browsers so

506
00:22:54,390 --> 00:22:59,400
this is a chromium the Chrome Canary

507
00:22:56,100 --> 00:23:01,620
browser and this is very simple example

508
00:22:59,400 --> 00:23:04,710
application right so we have an input

509
00:23:01,620 --> 00:23:07,199
text field and you know some buttons

510
00:23:04,710 --> 00:23:10,350
that will use either jump unified HTML

511
00:23:07,200 --> 00:23:12,840
sanitizer or just inner HTML something

512
00:23:10,350 --> 00:23:16,850
right so obviously if you click in HTML

513
00:23:12,840 --> 00:23:22,409
there's a personality cuz this payload

514
00:23:16,850 --> 00:23:26,760
contains JavaScript let's see now if I

515
00:23:22,410 --> 00:23:29,070
sanitize obviously don't purify is very

516
00:23:26,760 --> 00:23:32,220
nice of removing the actual value right

517
00:23:29,070 --> 00:23:32,939
the scientist oh well more on that later

518
00:23:32,220 --> 00:23:35,130
actually

519
00:23:32,940 --> 00:23:38,250
but essentially what don't care if I did

520
00:23:35,130 --> 00:23:40,320
is it removed this on error equals alert

521
00:23:38,250 --> 00:23:45,450
and the data is safe to include into the

522
00:23:40,320 --> 00:23:47,909
Dom now but that happens without the

523
00:23:45,450 --> 00:23:51,080
trusted ties now the problem we are

524
00:23:47,910 --> 00:23:53,670
facing with I want to ascertain that

525
00:23:51,080 --> 00:23:55,889
every time something writes a string

526
00:23:53,670 --> 00:23:57,600
into the Dom don't purify will be called

527
00:23:55,890 --> 00:24:00,240
to sanitize it because I really trust

528
00:23:57,600 --> 00:24:01,770
say Mario hydrate too it will have

529
00:24:00,240 --> 00:24:04,680
written don't purify in a way that you

530
00:24:01,770 --> 00:24:06,389
know Ramon JavaScript so let's start

531
00:24:04,680 --> 00:24:08,660
enforcing this just reloads the page

532
00:24:06,390 --> 00:24:14,220
with the content security policy header

533
00:24:08,660 --> 00:24:15,960
and the moment I call inner HTML or get

534
00:24:14,220 --> 00:24:20,040
a type error right so in the console I

535
00:24:15,960 --> 00:24:24,410
can see that you know inner HTML was

536
00:24:20,040 --> 00:24:27,420
just with a string a little bit so

537
00:24:24,410 --> 00:24:30,180
therefore a vulnerability exploitation

538
00:24:27,420 --> 00:24:31,800
has just been prevented but also my

539
00:24:30,180 --> 00:24:34,950
application kinda broke so that's not

540
00:24:31,800 --> 00:24:38,520
ideal right just to demonstrate if I

541
00:24:34,950 --> 00:24:41,280
sanitize it it's still okay now why is

542
00:24:38,520 --> 00:24:44,220
it okay because I used on purify with

543
00:24:41,280 --> 00:24:45,990
this special mode that we added a couple

544
00:24:44,220 --> 00:24:46,800
of months ago which is called Vita and

545
00:24:45,990 --> 00:24:50,220
trusted type

546
00:24:46,800 --> 00:24:52,169
so don't purify uses its own policy to

547
00:24:50,220 --> 00:24:54,750
create trusted HTML values on the

548
00:24:52,170 --> 00:24:57,090
sanitize data and this is exactly the

549
00:24:54,750 --> 00:25:01,290
property that we are using here so as

550
00:24:57,090 --> 00:25:04,139
you can see it does work with we've done

551
00:25:01,290 --> 00:25:07,350
purify let's say out of the box now if I

552
00:25:04,140 --> 00:25:09,570
try to install a default policy and try

553
00:25:07,350 --> 00:25:11,189
to call this inner HTML function what

554
00:25:09,570 --> 00:25:14,669
happens this is this callback gets

555
00:25:11,190 --> 00:25:16,710
called and I can do any custom logic I

556
00:25:14,670 --> 00:25:19,980
want in this particular case I call Don

557
00:25:16,710 --> 00:25:23,100
purify so let's see that in action

558
00:25:19,980 --> 00:25:25,890
yes the output is actually you know

559
00:25:23,100 --> 00:25:28,469
sanitizing every string data that is

560
00:25:25,890 --> 00:25:30,120
passed in HTML and similar things in my

561
00:25:28,470 --> 00:25:33,210
application so I know for sure that as

562
00:25:30,120 --> 00:25:37,649
long as don't purify is okay with

563
00:25:33,210 --> 00:25:39,540
regards to sanitizing for Dom XSS I have

564
00:25:37,650 --> 00:25:43,050
no no mitosis problems in this very

565
00:25:39,540 --> 00:25:46,110
simple application but obviously this is

566
00:25:43,050 --> 00:25:48,030
not this is just a toy example right so

567
00:25:46,110 --> 00:25:50,879
let me show you something on our actual

568
00:25:48,030 --> 00:25:52,740
application so contacts that google.com

569
00:25:50,880 --> 00:25:55,650
already has some JavaScript code that

570
00:25:52,740 --> 00:26:00,300
uses trusted types and we can see that

571
00:25:55,650 --> 00:26:02,880
in action here right so I can see what

572
00:26:00,300 --> 00:26:04,290
policies were actually created in this

573
00:26:02,880 --> 00:26:08,660
application well there's like seven

574
00:26:04,290 --> 00:26:12,000
policies of various name a little bit

575
00:26:08,660 --> 00:26:14,070
and we think everything is correct we

576
00:26:12,000 --> 00:26:16,230
spent a couple of months migrating all

577
00:26:14,070 --> 00:26:17,580
this code base to tuning HTML and you

578
00:26:16,230 --> 00:26:22,590
could click around for the application

579
00:26:17,580 --> 00:26:24,929
everything seems to work but one part so

580
00:26:22,590 --> 00:26:28,110
if you take a look let's try to edit

581
00:26:24,930 --> 00:26:32,160
something and it some contacts show more

582
00:26:28,110 --> 00:26:33,750
here and try to use it's in report only

583
00:26:32,160 --> 00:26:37,860
mode right so I'm not actually breaking

584
00:26:33,750 --> 00:26:39,960
any code but once I try to do this you

585
00:26:37,860 --> 00:26:43,620
can see that there's a report on the

586
00:26:39,960 --> 00:26:45,810
violations sent and thankfully trusted

587
00:26:43,620 --> 00:26:47,760
types is you know part of your program

588
00:26:45,810 --> 00:26:48,840
now so you can debug it as your regular

589
00:26:47,760 --> 00:26:51,629
violation

590
00:26:48,840 --> 00:26:52,759
so I can click through this and see

591
00:26:51,629 --> 00:26:55,289
what's going on

592
00:26:52,759 --> 00:26:56,909
it seems this function was actually

593
00:26:55,289 --> 00:26:58,259
causing the violation like here I I

594
00:26:56,909 --> 00:27:01,139
guess creating a script and just

595
00:26:58,259 --> 00:27:03,929
assigning any string value to its source

596
00:27:01,139 --> 00:27:05,939
property but I can immediately see that

597
00:27:03,929 --> 00:27:08,549
this is some part of the Google Maps API

598
00:27:05,940 --> 00:27:10,200
based on the address of the script so I

599
00:27:08,549 --> 00:27:12,269
know that we have to now migrate a

600
00:27:10,200 --> 00:27:13,889
Google Maps API into trusted trusted

601
00:27:12,269 --> 00:27:17,279
types which is what we are actually

602
00:27:13,889 --> 00:27:19,949
doing behind the scenes data and of

603
00:27:17,279 --> 00:27:22,649
course on top of all of this you also

604
00:27:19,950 --> 00:27:25,019
have the content security policy reports

605
00:27:22,649 --> 00:27:30,359
being sent in this particular case you

606
00:27:25,019 --> 00:27:32,639
can see that yeah there was something on

607
00:27:30,359 --> 00:27:34,499
this page that violated it just a type

608
00:27:32,639 --> 00:27:37,408
directive which looks like this there's

609
00:27:34,499 --> 00:27:39,359
quite a few names here but it actually

610
00:27:37,409 --> 00:27:42,599
will get simpler later on this is only

611
00:27:39,359 --> 00:27:46,949
the first stages but you know that inner

612
00:27:42,599 --> 00:27:48,840
HTML was assigned this value and this

613
00:27:46,950 --> 00:27:50,369
was the origin of the script let's post

614
00:27:48,840 --> 00:27:53,999
the violation and you know line number

615
00:27:50,369 --> 00:27:56,459
number what so trusted types are usable

616
00:27:53,999 --> 00:27:58,080
on real web applications just as well

617
00:27:56,460 --> 00:28:03,629
and they seem to give really nice

618
00:27:58,080 --> 00:28:06,029
properties with trusted types you get

619
00:28:03,629 --> 00:28:07,559
very nice control over the policies so

620
00:28:06,029 --> 00:28:10,409
first of all you can control the policy

621
00:28:07,559 --> 00:28:12,499
creation and again only by creating the

622
00:28:10,409 --> 00:28:15,299
policy you even have the possibility of

623
00:28:12,499 --> 00:28:18,899
introducing Dom access and by default

624
00:28:15,299 --> 00:28:21,299
you do not have that possibility so you

625
00:28:18,899 --> 00:28:22,949
can control who gets to create the

626
00:28:21,299 --> 00:28:24,899
policy by just using the whities of the

627
00:28:22,950 --> 00:28:27,419
names and of course no duplicates are

628
00:28:24,899 --> 00:28:29,459
allowed by default in this white least

629
00:28:27,419 --> 00:28:31,289
such that no one can just you know

630
00:28:29,460 --> 00:28:33,509
create the policy that whose name was

631
00:28:31,289 --> 00:28:35,158
already allowed but you can also control

632
00:28:33,509 --> 00:28:36,419
the policy usage which is also a very

633
00:28:35,159 --> 00:28:39,090
nice property for JavaScript code

634
00:28:36,419 --> 00:28:42,929
especially which means that even if you

635
00:28:39,090 --> 00:28:45,149
have a policy that's let's say insecure

636
00:28:42,929 --> 00:28:46,619
you can lock it down to only certain

637
00:28:45,149 --> 00:28:50,219
parts of your application and then you

638
00:28:46,619 --> 00:28:52,199
only know that only only the parts of

639
00:28:50,220 --> 00:28:54,210
the code that actually have a reference

640
00:28:52,200 --> 00:28:57,059
to the variable representing the policy

641
00:28:54,210 --> 00:28:59,009
only those parts can introduce Dom

642
00:28:57,059 --> 00:29:01,859
bicycles and scripting so we can lock it

643
00:28:59,009 --> 00:29:02,460
down in a mascot module or inside some

644
00:29:01,859 --> 00:29:05,730
local function

645
00:29:02,460 --> 00:29:07,560
so you can definitely narrow down which

646
00:29:05,730 --> 00:29:09,570
parts of your application can

647
00:29:07,560 --> 00:29:12,540
potentially be vulnerable right and by

648
00:29:09,570 --> 00:29:16,500
reviewing the code of the policies you

649
00:29:12,540 --> 00:29:20,250
can realistically ascertain that your

650
00:29:16,500 --> 00:29:21,900
application is actually secure so what

651
00:29:20,250 --> 00:29:24,270
are the benefits of this approach first

652
00:29:21,900 --> 00:29:27,080
of all it is

653
00:29:24,270 --> 00:29:31,530
it makes web application security fault

654
00:29:27,080 --> 00:29:34,169
and you get tremendously reduced the

655
00:29:31,530 --> 00:29:37,200
attack surface and also review surface

656
00:29:34,170 --> 00:29:39,600
essentially because every data flow that

657
00:29:37,200 --> 00:29:42,500
potentially comes from you know attacker

658
00:29:39,600 --> 00:29:44,909
control sauce and reaches the Dom sink

659
00:29:42,500 --> 00:29:46,410
now has to pass through the policy

660
00:29:44,910 --> 00:29:48,630
because this is the only way you can

661
00:29:46,410 --> 00:29:51,540
reach the don't sink and that makes it

662
00:29:48,630 --> 00:29:53,340
very natural to limit access to creation

663
00:29:51,540 --> 00:29:55,470
of the policies and limit access to the

664
00:29:53,340 --> 00:29:57,240
policies in the first place and helps

665
00:29:55,470 --> 00:29:59,940
you restructure the application in a way

666
00:29:57,240 --> 00:30:01,950
that makes it super easy to review and

667
00:29:59,940 --> 00:30:03,510
this is sort of natural to the

668
00:30:01,950 --> 00:30:05,820
developers and this is what we see

669
00:30:03,510 --> 00:30:07,980
happening already in our code base so it

670
00:30:05,820 --> 00:30:10,080
does isolate the security sensitive code

671
00:30:07,980 --> 00:30:12,360
from the rest of the application and

672
00:30:10,080 --> 00:30:15,330
makes it very easy to support it and

673
00:30:12,360 --> 00:30:16,709
review it for security but also looking

674
00:30:15,330 --> 00:30:19,230
at the offensive side it makes it very

675
00:30:16,710 --> 00:30:23,010
easy of spotting it and reviewing it for

676
00:30:19,230 --> 00:30:25,290
bugs which is cool so you get this very

677
00:30:23,010 --> 00:30:26,580
nice properties and that lets you reduce

678
00:30:25,290 --> 00:30:30,210
the attack surface which I believe is

679
00:30:26,580 --> 00:30:33,870
the main advantage of this and similar

680
00:30:30,210 --> 00:30:35,820
api's we you can already start using the

681
00:30:33,870 --> 00:30:37,469
trusted types with say react you just

682
00:30:35,820 --> 00:30:40,169
have to recompile it essentially

683
00:30:37,470 --> 00:30:42,140
changing one one property you can use it

684
00:30:40,170 --> 00:30:44,130
moved on purify worse many other

685
00:30:42,140 --> 00:30:47,550
libraries that we are working on

686
00:30:44,130 --> 00:30:49,790
integrating and this feature is

687
00:30:47,550 --> 00:30:52,669
implemented in chromium you have to use

688
00:30:49,790 --> 00:30:55,620
enabling features with trusted Dom types

689
00:30:52,670 --> 00:30:57,870
there's you know w3c specification draft

690
00:30:55,620 --> 00:31:00,659
so we are you know working on getting

691
00:30:57,870 --> 00:31:04,020
this adopted as a web standard there's a

692
00:31:00,660 --> 00:31:07,410
polyfill burst documentation so I think

693
00:31:04,020 --> 00:31:10,220
by now we have a chance of stopping Dom

694
00:31:07,410 --> 00:31:13,110
XSS as a vulnerable class completely and

695
00:31:10,220 --> 00:31:15,870
our early results show that this

696
00:31:13,110 --> 00:31:16,350
approach actually works so take a look

697
00:31:15,870 --> 00:31:19,590
at the

698
00:31:16,350 --> 00:31:21,570
repository on github find some bugs some

699
00:31:19,590 --> 00:31:24,389
of them that were reported by the bug

700
00:31:21,570 --> 00:31:25,009
hunters were really amazing so do take a

701
00:31:24,389 --> 00:31:27,719
look

702
00:31:25,009 --> 00:31:30,870
start maybe using it in Chrome and see

703
00:31:27,720 --> 00:31:32,610
how it goes give us feedback maybe we

704
00:31:30,870 --> 00:31:35,340
can work on something maybe we can

705
00:31:32,610 --> 00:31:37,830
improve this API but so far it looks

706
00:31:35,340 --> 00:31:40,678
like for the first time since 18 years

707
00:31:37,830 --> 00:31:42,990
we actually have a chance of fixing Dom

708
00:31:40,679 --> 00:31:44,309
XSS which is nice and this is the end of

709
00:31:42,990 --> 00:31:46,610
the presentation I will happily take

710
00:31:44,309 --> 00:31:46,610
some questions

711
00:31:47,150 --> 00:31:50,349
[Applause]

