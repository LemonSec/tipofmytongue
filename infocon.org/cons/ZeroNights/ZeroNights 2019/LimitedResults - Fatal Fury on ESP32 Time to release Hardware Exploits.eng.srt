1
00:00:06,190 --> 00:00:14,710
[Music]

2
00:00:15,619 --> 00:00:23,039
so hello I'm in which is result and I

3
00:00:19,949 --> 00:00:28,070
will present some other exploits today

4
00:00:23,039 --> 00:00:28,070
on SB such too and I hope you will enjoy

5
00:00:28,160 --> 00:00:39,480
so I'm almost always limited by the time

6
00:00:35,899 --> 00:00:45,530
the money and sometimes my skills too

7
00:00:39,480 --> 00:00:49,140
and I try to publish some results here I

8
00:00:45,530 --> 00:00:52,430
come from the offensive side and I will

9
00:00:49,140 --> 00:00:56,670
focus on other and lot of Elvan urology

10
00:00:52,430 --> 00:01:03,570
no affiliations of course so it's time

11
00:00:56,670 --> 00:01:07,439
to play now so Jen three points few

12
00:01:03,570 --> 00:01:12,049
months ago I decide to investigate into

13
00:01:07,439 --> 00:01:15,630
the ESP search tool it's a well-known

14
00:01:12,049 --> 00:01:20,070
system on chips today release in 2016 by

15
00:01:15,630 --> 00:01:22,189
a specific angle company it's widely

16
00:01:20,070 --> 00:01:27,240
deployed today as I sold a lot of

17
00:01:22,189 --> 00:01:29,669
devices more than 100 millions they

18
00:01:27,240 --> 00:01:32,729
became the market leader of wireless

19
00:01:29,670 --> 00:01:35,220
seems us free market and they claim to

20
00:01:32,729 --> 00:01:37,619
have state of gia security and they

21
00:01:35,220 --> 00:01:42,890
support obvious longevity commitment so

22
00:01:37,619 --> 00:01:46,640
it's quite nice and you can find these

23
00:01:42,890 --> 00:01:49,350
chips in a lot of IOT devices and

24
00:01:46,640 --> 00:01:51,079
sometimes you can also find these chips

25
00:01:49,350 --> 00:01:55,619
as wireless peripheral to add

26
00:01:51,079 --> 00:01:58,979
connectivity to existing devices so

27
00:01:55,619 --> 00:02:01,049
target is this one it's ESP search tool

28
00:01:58,979 --> 00:02:04,259
they manufacture the chip in 40

29
00:02:01,049 --> 00:02:09,209
nanometer technology packages - 6 basis

30
00:02:04,259 --> 00:02:10,919
millimetre 48 pins and this is some some

31
00:02:09,209 --> 00:02:12,030
features I will not detail all of the

32
00:02:10,919 --> 00:02:14,208
features of course

33
00:02:12,030 --> 00:02:16,440
but you have an integrated modem

34
00:02:14,209 --> 00:02:19,380
supporting Wi-Fi and Bluetooth

35
00:02:16,440 --> 00:02:23,160
it's ultra-low power it's based on

36
00:02:19,380 --> 00:02:27,569
extensors Jolla cost LX 6 you can rent

37
00:02:23,160 --> 00:02:31,410
until 240 minutes a lot you have roam of

38
00:02:27,569 --> 00:02:33,750
course as RAM but no CPU caches and then

39
00:02:31,410 --> 00:02:39,450
they support a lot of interfaces GPIO

40
00:02:33,750 --> 00:02:44,390
touch sensors different the SPI a lot of

41
00:02:39,450 --> 00:02:48,600
you are to even internet can but no USB

42
00:02:44,390 --> 00:02:52,200
so you will find this platform most of

43
00:02:48,600 --> 00:02:55,650
the time in a system in package module

44
00:02:52,200 --> 00:02:57,390
so it's very easy to integrate in any

45
00:02:55,650 --> 00:03:00,900
design you just need to footprint your

46
00:02:57,390 --> 00:03:02,850
PCB and then you solve that this it's

47
00:03:00,900 --> 00:03:06,239
nice because you have already the flash

48
00:03:02,850 --> 00:03:09,750
storage which is integrated its FCC

49
00:03:06,239 --> 00:03:11,970
certified and it costs maybe two dollars

50
00:03:09,750 --> 00:03:18,180
if you just buy one so you can imagine

51
00:03:11,970 --> 00:03:21,239
if you buy 10,000 something Island but

52
00:03:18,180 --> 00:03:23,730
for for the test I will prefer to work

53
00:03:21,239 --> 00:03:26,400
typically on different kits so because

54
00:03:23,730 --> 00:03:29,040
you just plug a micro USB and then you

55
00:03:26,400 --> 00:03:33,350
provide the chip you have a little sail

56
00:03:29,040 --> 00:03:37,140
to USB interface you have also some

57
00:03:33,350 --> 00:03:39,359
expose pin pin eaters it's quite quite

58
00:03:37,140 --> 00:03:45,958
useful and it's really low cost it's

59
00:03:39,360 --> 00:03:48,959
about just $15 about software now there

60
00:03:45,959 --> 00:03:51,239
from Rocky is open source on github they

61
00:03:48,959 --> 00:03:54,810
based the attention on extensive ESP

62
00:03:51,239 --> 00:03:57,120
such 12 they provide also a set of

63
00:03:54,810 --> 00:04:01,140
Python tools to to deal with the

64
00:03:57,120 --> 00:04:03,299
firmware to flash it easily so it's

65
00:04:01,140 --> 00:04:04,858
quite convenient quality of

66
00:04:03,299 --> 00:04:06,810
documentation is pretty good

67
00:04:04,859 --> 00:04:10,670
you have the datasheet technical

68
00:04:06,810 --> 00:04:13,350
reference manual available so quite nice

69
00:04:10,670 --> 00:04:14,578
they support Arduino core but I don't

70
00:04:13,350 --> 00:04:19,168
use it because I don't like a

71
00:04:14,579 --> 00:04:22,620
pre-compiled libraries and this chip is

72
00:04:19,168 --> 00:04:24,400
also unofficial amazing iws IOT platform

73
00:04:22,620 --> 00:04:26,979
so you can run free

74
00:04:24,400 --> 00:04:32,729
yes mongoose was everything you want to

75
00:04:26,979 --> 00:04:36,520
us and let's talk about the agenda today

76
00:04:32,729 --> 00:04:38,050
we will focus on built-in security so to

77
00:04:36,520 --> 00:04:43,570
do that I just grabbed the data sheet

78
00:04:38,050 --> 00:04:47,050
and then I can see four points stop it's

79
00:04:43,570 --> 00:04:47,469
about crypto of an engine or oxalate

80
00:04:47,050 --> 00:04:49,389
sauce

81
00:04:47,470 --> 00:04:54,639
it's about secure boot it's about flash

82
00:04:49,389 --> 00:04:57,430
encryption and it's also about OTP so we

83
00:04:54,639 --> 00:05:03,430
will try to focus on these points so

84
00:04:57,430 --> 00:05:07,449
let's start real things now but before

85
00:05:03,430 --> 00:05:11,560
starts of course we need a plan so

86
00:05:07,449 --> 00:05:12,570
context it's yeah I mean I will spend

87
00:05:11,560 --> 00:05:15,240
three months to investigate

88
00:05:12,570 --> 00:05:20,380
approximately during my spare times and

89
00:05:15,240 --> 00:05:23,410
along nights sometimes my object chief

90
00:05:20,380 --> 00:05:25,330
is very simple to break one by one

91
00:05:23,410 --> 00:05:31,889
two security features previously listed

92
00:05:25,330 --> 00:05:34,359
I will use physical access I bought the

93
00:05:31,889 --> 00:05:36,550
government kits and today it's plausible

94
00:05:34,360 --> 00:05:40,360
attacks a nice to have physical access

95
00:05:36,550 --> 00:05:42,099
in IOT devices so yeah I will probably

96
00:05:40,360 --> 00:05:45,280
use all the techniques like Fault

97
00:05:42,099 --> 00:05:47,620
injections side channel maybe my cross

98
00:05:45,280 --> 00:05:51,099
of the rings maybe some view

99
00:05:47,620 --> 00:05:55,930
modifications reverse of course and code

100
00:05:51,099 --> 00:05:58,060
review so let's talk about Fault

101
00:05:55,930 --> 00:06:02,169
injections I mean I will not detail too

102
00:05:58,060 --> 00:06:04,210
much but I will I choose to focus on

103
00:06:02,169 --> 00:06:04,870
very simple techniques which is voltage

104
00:06:04,210 --> 00:06:07,419
glitching

105
00:06:04,870 --> 00:06:09,340
it's a well known still efficient today

106
00:06:07,419 --> 00:06:11,530
and very low cost for the injection

107
00:06:09,340 --> 00:06:14,260
techniques you have a lot of public

108
00:06:11,530 --> 00:06:18,039
resources about voltage increasing today

109
00:06:14,260 --> 00:06:22,120
on on the web so I put some reference at

110
00:06:18,039 --> 00:06:23,740
the end of the presentation for you the

111
00:06:22,120 --> 00:06:27,550
goal of a voltage breaching is to

112
00:06:23,740 --> 00:06:31,690
perturb the power of the chip during is

113
00:06:27,550 --> 00:06:35,680
critical operations to inject a fault to

114
00:06:31,690 --> 00:06:38,469
inject a false behavior

115
00:06:35,680 --> 00:06:40,630
and you can expect the different things

116
00:06:38,470 --> 00:06:42,729
for example you can skip an instructions

117
00:06:40,630 --> 00:06:45,190
this is pretty common to to bypass a

118
00:06:42,729 --> 00:06:48,008
checks for example you can also modify

119
00:06:45,190 --> 00:06:51,490
data modify instructions this is very

120
00:06:48,009 --> 00:06:54,690
cool to to attack a branch for example

121
00:06:51,490 --> 00:06:57,550
and sometimes you can have a very very

122
00:06:54,690 --> 00:06:59,530
unpredictable behavior so especially

123
00:06:57,550 --> 00:07:02,320
with the complexity of architecture

124
00:06:59,530 --> 00:07:04,559
today's we talked about cache is

125
00:07:02,320 --> 00:07:07,780
different you can have different effects

126
00:07:04,560 --> 00:07:10,139
it's also about CPU pipelines so yeah

127
00:07:07,780 --> 00:07:15,758
it's hard to predict and it's why this

128
00:07:10,139 --> 00:07:18,280
techniques is quite powerful so when we

129
00:07:15,759 --> 00:07:22,630
talk about voltage pinching we have to

130
00:07:18,280 --> 00:07:24,130
talk about power domains and in into DSP

131
00:07:22,630 --> 00:07:27,669
such - we have three different power

132
00:07:24,130 --> 00:07:29,530
domains so as the i/o power domains is

133
00:07:27,669 --> 00:07:32,049
not interesting for us we will focus on

134
00:07:29,530 --> 00:07:35,349
air to see real time clock domain and

135
00:07:32,050 --> 00:07:38,770
the CPU domains of course CPU domains

136
00:07:35,349 --> 00:07:43,000
each has two different power signals VDD

137
00:07:38,770 --> 00:07:47,289
CPU and VDD RTC and this is quite not

138
00:07:43,000 --> 00:07:50,800
not common way to power up the port the

139
00:07:47,289 --> 00:07:55,389
chip but it's that design so I mean I

140
00:07:50,800 --> 00:07:58,300
will do with that and then we can also

141
00:07:55,389 --> 00:08:01,090
see some low dropout regulators this

142
00:07:58,300 --> 00:08:05,110
kind of little blocks they are used to

143
00:08:01,090 --> 00:08:07,719
stabilize internal voltage and this

144
00:08:05,110 --> 00:08:12,180
maybe can have some filter effects

145
00:08:07,720 --> 00:08:15,610
against my glitches I don't know and in

146
00:08:12,180 --> 00:08:19,000
documentation they also specify a pro

147
00:08:15,610 --> 00:08:21,880
now detectors this is typically used to

148
00:08:19,000 --> 00:08:26,590
detect voltage under voltage or over

149
00:08:21,880 --> 00:08:29,050
voltage values and they clearly indicate

150
00:08:26,590 --> 00:08:31,780
if the beauty detects voltage drop it

151
00:08:29,050 --> 00:08:36,789
will trigger a signal shutdown and even

152
00:08:31,780 --> 00:08:38,708
a message on UART so yeah maybe this can

153
00:08:36,789 --> 00:08:41,260
detect the glitches I don't know so I

154
00:08:38,708 --> 00:08:46,280
did some tests of course and then yeah I

155
00:08:41,260 --> 00:08:49,340
mean I received this message so

156
00:08:46,280 --> 00:08:52,400
is it effective but it's only effective

157
00:08:49,340 --> 00:08:56,480
on VDD RTC so consequently I will I

158
00:08:52,400 --> 00:09:02,000
decide to glitch from VDD CP only to

159
00:08:56,480 --> 00:09:04,040
avoid this detection so now I will

160
00:09:02,000 --> 00:09:08,740
prepare the target it's really easy

161
00:09:04,040 --> 00:09:12,680
I took the module I remove the shield

162
00:09:08,740 --> 00:09:14,960
and then we can see DSP 32 and need to

163
00:09:12,680 --> 00:09:17,479
do SP 32 a little SPI flash is the

164
00:09:14,960 --> 00:09:23,990
external memory storing the firmware and

165
00:09:17,480 --> 00:09:26,420
also configuration I mean yeah PC PC

166
00:09:23,990 --> 00:09:28,070
screen is not it's not present but the

167
00:09:26,420 --> 00:09:31,729
schematics are available so it's quite

168
00:09:28,070 --> 00:09:34,040
easy to reverse so I decide to remove

169
00:09:31,730 --> 00:09:37,070
the capacitors connected to vdd CPU and

170
00:09:34,040 --> 00:09:38,390
the VDD at C so we can see if you

171
00:09:37,070 --> 00:09:42,770
compare the two figures you will see

172
00:09:38,390 --> 00:09:46,370
some missing little components and then

173
00:09:42,770 --> 00:09:50,090
I have to modify the PCB a little bit so

174
00:09:46,370 --> 00:09:52,820
three steps to that first I have to

175
00:09:50,090 --> 00:09:58,100
expose the VDD CPU tresses it spins such

176
00:09:52,820 --> 00:10:01,730
is seven I kept the trace using little

177
00:09:58,100 --> 00:10:04,400
scalpel and then I sold on my glitch

178
00:10:01,730 --> 00:10:07,550
output to be disputing and of course to

179
00:10:04,400 --> 00:10:13,459
gng and then I can control the dis this

180
00:10:07,550 --> 00:10:16,459
power signal now so at the end the ad

181
00:10:13,460 --> 00:10:22,160
was set up I did my own major glitcher

182
00:10:16,460 --> 00:10:25,010
it's based on max 46 19 I had some

183
00:10:22,160 --> 00:10:29,060
passive components and also some SMA

184
00:10:25,010 --> 00:10:33,520
connectors to to be able to to plug and

185
00:10:29,060 --> 00:10:37,099
unplug of easily some some cables I

186
00:10:33,520 --> 00:10:39,350
synchronize that by by scope and also I

187
00:10:37,100 --> 00:10:41,990
trigger that by a signal generators so

188
00:10:39,350 --> 00:10:45,320
then I can send USB commands using my

189
00:10:41,990 --> 00:10:48,410
scripts to set the delays that weeds to

190
00:10:45,320 --> 00:10:51,740
save voltage so it's really easy to do

191
00:10:48,410 --> 00:10:54,589
that and again it looks like that I mean

192
00:10:51,740 --> 00:10:57,350
it's a little setup no nothing nothing

193
00:10:54,589 --> 00:11:00,019
too much important but yeah man I have

194
00:10:57,350 --> 00:11:02,420
full control it's fully automatized

195
00:11:00,019 --> 00:11:14,269
and then I can run that during days it's

196
00:11:02,420 --> 00:11:16,219
it's very cool so we I need to be sure

197
00:11:14,269 --> 00:11:19,239
about the effect of voltage glitching of

198
00:11:16,220 --> 00:11:22,929
course before to to pay for my test and

199
00:11:19,239 --> 00:11:26,720
we can see on the on this cup screen a

200
00:11:22,929 --> 00:11:32,470
very very load bigger drop out on you at

201
00:11:26,720 --> 00:11:36,139
0 P and you are 0 this channel one

202
00:11:32,470 --> 00:11:38,449
monitoring signal it's powered directly

203
00:11:36,139 --> 00:11:40,850
by the V dispute so it's mention inside

204
00:11:38,449 --> 00:11:44,389
the chip I have the same effect than I

205
00:11:40,850 --> 00:11:48,470
saw in the scope so it's I mean it's the

206
00:11:44,389 --> 00:11:52,279
effects is looks pretty good so it's

207
00:11:48,470 --> 00:11:55,429
time now to to choose an easy target

208
00:11:52,279 --> 00:11:58,129
so it's why we are going to to begins by

209
00:11:55,429 --> 00:12:02,329
the cryptic or cryptic also called

210
00:11:58,129 --> 00:12:04,160
sometimes crypto accelerators that in

211
00:12:02,329 --> 00:12:08,359
fact is just a peripheral to speed up

212
00:12:04,160 --> 00:12:11,379
the competition like yes che ever say so

213
00:12:08,360 --> 00:12:15,079
I mean what is interesting to pawn

214
00:12:11,379 --> 00:12:17,720
because to accelerator is used by the

215
00:12:15,079 --> 00:12:20,299
crypto lip of the vendor but it's also

216
00:12:17,720 --> 00:12:22,339
used by default by a embed GLS and

217
00:12:20,299 --> 00:12:26,029
bachelors today is the ungrate or

218
00:12:22,339 --> 00:12:29,480
library and all IOT are using this

219
00:12:26,029 --> 00:12:34,549
library it's open source and is done by

220
00:12:29,480 --> 00:12:38,929
a PI arm so principle to investigate I

221
00:12:34,549 --> 00:12:42,319
think my goal is to focus on the CPU

222
00:12:38,929 --> 00:12:45,470
crypto interface so typically the crypto

223
00:12:42,319 --> 00:12:47,540
driver and I don't find I don't expect

224
00:12:45,470 --> 00:12:50,269
to find pure software vulnerability

225
00:12:47,540 --> 00:12:52,339
because I mean it's open source and it's

226
00:12:50,269 --> 00:12:54,709
well it was reviewed since a long time

227
00:12:52,339 --> 00:12:57,709
by also security researchers so it's why

228
00:12:54,709 --> 00:12:59,299
I'm I'm going to look by and to find

229
00:12:57,709 --> 00:13:03,018
vulnerabilities trigger by fault

230
00:12:59,299 --> 00:13:05,319
injections so yeah it's time for code

231
00:13:03,019 --> 00:13:05,319
review

232
00:13:05,480 --> 00:13:12,050
so first time in the datasheet I look

233
00:13:08,840 --> 00:13:14,990
for the details about an IES operation

234
00:13:12,050 --> 00:13:17,810
by the chip we can see four four steps

235
00:13:14,990 --> 00:13:21,290
one is to initialize the different

236
00:13:17,810 --> 00:13:25,099
registers load the keys loaded the

237
00:13:21,290 --> 00:13:29,150
plaintext and then you start your your

238
00:13:25,100 --> 00:13:31,430
is Anja engine you wait until the end

239
00:13:29,150 --> 00:13:37,730
and then you read the result on these

240
00:13:31,430 --> 00:13:40,339
IES text registers but yeah it's a

241
00:13:37,730 --> 00:13:44,300
little weakness inside the larva design

242
00:13:40,340 --> 00:13:46,010
because the the registers are used to

243
00:13:44,300 --> 00:13:48,740
store the plaintext but also the

244
00:13:46,010 --> 00:13:51,200
ciphertext this is called encrypt in

245
00:13:48,740 --> 00:13:54,950
place and sometimes it can be risky

246
00:13:51,200 --> 00:13:57,320
because if something goes wrong during

247
00:13:54,950 --> 00:13:59,480
the AES call ordering the die as

248
00:13:57,320 --> 00:14:02,600
competition I'm pretty sure I can retry

249
00:13:59,480 --> 00:14:04,880
what you acquitted the input and I mean

250
00:14:02,600 --> 00:14:09,050
it's pretty cool and a very simple proof

251
00:14:04,880 --> 00:14:15,050
of concept to exploit so let's try to

252
00:14:09,050 --> 00:14:19,069
bypass this is we look in the in the in

253
00:14:15,050 --> 00:14:22,060
the code and we saw exactly the same the

254
00:14:19,070 --> 00:14:29,060
same the same than the four previous

255
00:14:22,060 --> 00:14:31,640
steps I mean they use man block array to

256
00:14:29,060 --> 00:14:33,949
store input and also output so I mean

257
00:14:31,640 --> 00:14:37,670
the previous weakness is confirmed

258
00:14:33,950 --> 00:14:41,000
and now I have multiple spot to trigger

259
00:14:37,670 --> 00:14:43,640
for fault injections I can I can try to

260
00:14:41,000 --> 00:14:46,100
fall to the the call I can try to fall

261
00:14:43,640 --> 00:14:51,199
to the the while condition at the end

262
00:14:46,100 --> 00:14:54,560
and I can also target the for loop so

263
00:14:51,200 --> 00:14:58,520
yeah here is the proof of concept so we

264
00:14:54,560 --> 00:15:00,589
can see the first one is a good one but

265
00:14:58,520 --> 00:15:04,610
the second one is not a good one because

266
00:15:00,590 --> 00:15:05,930
the output is equal to the input so this

267
00:15:04,610 --> 00:15:10,190
was a very very simple

268
00:15:05,930 --> 00:15:13,729
venerability so convenient relief is

269
00:15:10,190 --> 00:15:17,690
about yes that key salsas very cool and

270
00:15:13,730 --> 00:15:22,910
simple to exploit so here is the coda

271
00:15:17,690 --> 00:15:25,960
and we can see the load two keys inside

272
00:15:22,910 --> 00:15:29,780
the crypto engine without a security

273
00:15:25,960 --> 00:15:32,660
it's a very naive implementation so the

274
00:15:29,780 --> 00:15:35,569
loop isn't protected so typically using

275
00:15:32,660 --> 00:15:39,319
fault injection I mean I'm pretty sure I

276
00:15:35,570 --> 00:15:43,360
can I can bypass the lot of the key so

277
00:15:39,320 --> 00:15:46,190
consequently I obtain a wrong cipher and

278
00:15:43,360 --> 00:15:51,020
with the little Python script I verify

279
00:15:46,190 --> 00:15:52,760
the value of the key I use to obtain

280
00:15:51,020 --> 00:15:55,130
this ciphertext

281
00:15:52,760 --> 00:15:57,230
and we can see when the key is set to

282
00:15:55,130 --> 00:15:59,810
zero I obtained the same ciphertext so

283
00:15:57,230 --> 00:16:02,450
it means the is that she was a setter to

284
00:15:59,810 --> 00:16:06,079
all zero and this is pretty cool because

285
00:16:02,450 --> 00:16:08,900
the key is arised and it's a persistent

286
00:16:06,080 --> 00:16:12,320
fault and the K will stay until the next

287
00:16:08,900 --> 00:16:17,900
set functions and this is really nice to

288
00:16:12,320 --> 00:16:22,310
exploit is CBC for example so crypto

289
00:16:17,900 --> 00:16:24,890
code conclusion yes crypto engine

290
00:16:22,310 --> 00:16:26,780
doesn't not improve our security to

291
00:16:24,890 --> 00:16:30,500
match of course we we know that already

292
00:16:26,780 --> 00:16:35,720
so I found six or seven volts with wisp

293
00:16:30,500 --> 00:16:37,940
you see yes sure so I am to the to do

294
00:16:35,720 --> 00:16:41,360
trillion library with rare impacted of

295
00:16:37,940 --> 00:16:46,580
course the liberty of the vendor but

296
00:16:41,360 --> 00:16:50,270
also am crap talib I went to responsible

297
00:16:46,580 --> 00:16:53,090
disclosure because I mean today we go to

298
00:16:50,270 --> 00:16:55,130
responsible disclosure and I didn't

299
00:16:53,090 --> 00:16:59,390
obtain too much transfer from expression

300
00:16:55,130 --> 00:17:02,930
harm during one month the bug duty of a

301
00:16:59,390 --> 00:17:05,660
member jealous is a fake one so I was I

302
00:17:02,930 --> 00:17:09,319
decided to not sharp inner ability with

303
00:17:05,660 --> 00:17:11,600
them of course and during this time as I

304
00:17:09,319 --> 00:17:14,448
try to salon patch into the van der try

305
00:17:11,599 --> 00:17:18,349
to silently patch me and this I don't

306
00:17:14,449 --> 00:17:25,449
like that too much and now I'm a little

307
00:17:18,349 --> 00:17:25,448
bit in furry and I'm going to

308
00:17:26,420 --> 00:17:29,660
super nada

309
00:17:29,690 --> 00:17:38,970
so level two is secure boots the rollers

310
00:17:35,130 --> 00:17:40,590
the secure boot today I mean the

311
00:17:38,970 --> 00:17:45,390
well-known functions is to protect the

312
00:17:40,590 --> 00:17:47,250
fill my authenticity it's to avoid a few

313
00:17:45,390 --> 00:17:49,770
more modifications because it's easy to

314
00:17:47,250 --> 00:17:52,410
flush a new film where to to to an

315
00:17:49,770 --> 00:17:54,540
external SPI flash of course are you we

316
00:17:52,410 --> 00:17:58,860
can talk about here see protections but

317
00:17:54,540 --> 00:18:00,420
just is not sufficient today so the

318
00:17:58,860 --> 00:18:02,639
secure boot is here to create a chain of

319
00:18:00,420 --> 00:18:06,120
trust from the patron which is the first

320
00:18:02,640 --> 00:18:07,380
code executed by DSP 32 to load the

321
00:18:06,120 --> 00:18:10,709
bootloader until the final application

322
00:18:07,380 --> 00:18:12,900
done by the developer it guarantees the

323
00:18:10,710 --> 00:18:16,110
code running on the device is genuine

324
00:18:12,900 --> 00:18:22,050
and of course it will not boot if images

325
00:18:16,110 --> 00:18:24,179
are not properly signed so first secure

326
00:18:22,050 --> 00:18:27,659
boot is normally set during the

327
00:18:24,180 --> 00:18:30,420
production in the SP 32 they define a

328
00:18:27,660 --> 00:18:33,330
key called the secure boot key this key

329
00:18:30,420 --> 00:18:35,670
is burning to infuse this block number

330
00:18:33,330 --> 00:18:37,860
two it's a special memory inside y es

331
00:18:35,670 --> 00:18:42,240
Posada - I will talk about that a bit

332
00:18:37,860 --> 00:18:45,090
later and this secure boot key cannot be

333
00:18:42,240 --> 00:18:48,450
read out or modified because it's a read

334
00:18:45,090 --> 00:18:50,429
write protect protected memory and it's

335
00:18:48,450 --> 00:18:56,610
also of course this key is used by the

336
00:18:50,430 --> 00:19:00,180
boot ROM to perform is 256 GB and then

337
00:18:56,610 --> 00:19:04,229
the developer has to also create ECDSA

338
00:19:00,180 --> 00:19:07,350
kata he will use the private key to to

339
00:19:04,230 --> 00:19:08,610
sign up and you will integrate the

340
00:19:07,350 --> 00:19:11,699
public key to the bootloader

341
00:19:08,610 --> 00:19:16,139
images consequently if you reverse

342
00:19:11,700 --> 00:19:20,400
little bit the boot Rogerson signature

343
00:19:16,140 --> 00:19:23,720
it's a 192 Eaters located at 0-0 in the

344
00:19:20,400 --> 00:19:28,320
in the flash memory layout and the first

345
00:19:23,720 --> 00:19:32,720
128 bytes are pure random and the 64

346
00:19:28,320 --> 00:19:37,159
bytes are the just the digest is a shove

347
00:19:32,720 --> 00:19:41,900
512 of the encrypted

348
00:19:37,160 --> 00:19:46,190
images of the bootloader plus the CGS

349
00:19:41,900 --> 00:19:51,320
al-baqi encrypted by the security of

350
00:19:46,190 --> 00:19:53,179
course so now once the the ESP sata2 is

351
00:19:51,320 --> 00:19:56,950
on the field the boot process is the

352
00:19:53,179 --> 00:20:01,090
following so reset vector the run starts

353
00:19:56,950 --> 00:20:05,470
load and checks the boot images

354
00:20:01,090 --> 00:20:08,120
bootloader starts below the load and

355
00:20:05,470 --> 00:20:12,460
verify the application images and then

356
00:20:08,120 --> 00:20:15,469
the application is running is running so

357
00:20:12,460 --> 00:20:19,460
we have yeah to verification mechanism

358
00:20:15,470 --> 00:20:22,280
one is the stage level done by the boot

359
00:20:19,460 --> 00:20:24,770
rom it computer digesta with the secure

360
00:20:22,280 --> 00:20:26,960
boot key and it compares with the 64g

361
00:20:24,770 --> 00:20:30,200
just you previously flash in the

362
00:20:26,960 --> 00:20:32,809
external memory and then it will it will

363
00:20:30,200 --> 00:20:36,110
compound if the iPod they will go to the

364
00:20:32,809 --> 00:20:38,270
stage one and the stage one is an ECG sa

365
00:20:36,110 --> 00:20:40,780
verification done by the boot roller for

366
00:20:38,270 --> 00:20:46,280
that they use micro ECC it's open-source

367
00:20:40,780 --> 00:20:48,530
elliptic curve cryptography of course my

368
00:20:46,280 --> 00:20:51,710
goal is to focus on stage zero because

369
00:20:48,530 --> 00:20:56,450
it's a symmetric cryptography bootloader

370
00:20:51,710 --> 00:20:59,200
and this is not very very secure today

371
00:20:56,450 --> 00:21:03,440
to use a symmetric cryptography for

372
00:20:59,200 --> 00:21:05,240
signature and as a critical asset of

373
00:21:03,440 --> 00:21:06,830
course is to secure boot key because if

374
00:21:05,240 --> 00:21:10,220
you have to secure boot key you will

375
00:21:06,830 --> 00:21:13,189
break the secure boot but this key

376
00:21:10,220 --> 00:21:15,890
unfortunately for attackers they are

377
00:21:13,190 --> 00:21:20,480
storing in fuses and it is protected you

378
00:21:15,890 --> 00:21:22,580
cannot read out so I decided to set the

379
00:21:20,480 --> 00:21:24,919
secure boot so it can be done

380
00:21:22,580 --> 00:21:28,370
automatically by abide by the framework

381
00:21:24,919 --> 00:21:32,809
but I prefer to do that manually so I

382
00:21:28,370 --> 00:21:35,360
send some commands using the vendor

383
00:21:32,809 --> 00:21:39,230
tools to burn the secure boot key and

384
00:21:35,360 --> 00:21:43,789
also to set the secure boot by a burning

385
00:21:39,230 --> 00:21:46,309
one if uses ugliest own agenda I read

386
00:21:43,789 --> 00:21:48,740
out a diffuse map and we can see now we

387
00:21:46,309 --> 00:21:50,680
cannot read you cannot have access to

388
00:21:48,740 --> 00:21:53,440
the data inside the

389
00:21:50,680 --> 00:21:56,980
lk 2 because it's read white protected

390
00:21:53,440 --> 00:22:02,260
by the by by the platform and then of

391
00:21:56,980 --> 00:22:05,710
course we can see here if you look at

392
00:22:02,260 --> 00:22:07,990
the shiitake fuses I didn't burn in

393
00:22:05,710 --> 00:22:10,390
purpose we will see that later I mean

394
00:22:07,990 --> 00:22:13,900
it's always it's always a good thing to

395
00:22:10,390 --> 00:22:17,620
have the burger interface so now in

396
00:22:13,900 --> 00:22:21,250
action secure boot very simple I develop

397
00:22:17,620 --> 00:22:24,989
a sign hub very simple a low water and I

398
00:22:21,250 --> 00:22:29,170
of course I use the secure boot key I

399
00:22:24,990 --> 00:22:33,010
flash it and then it runs of course I do

400
00:22:29,170 --> 00:22:34,870
the same but with an unsigned a hub and

401
00:22:33,010 --> 00:22:38,740
I modified it a bit of code you can see

402
00:22:34,870 --> 00:22:41,260
the printf yeah I flush and then it

403
00:22:38,740 --> 00:22:44,170
fails on stage zero because the

404
00:22:41,260 --> 00:22:46,510
bootloader is not signed by the secure

405
00:22:44,170 --> 00:22:49,210
boot key so typically the boot ROM will

406
00:22:46,510 --> 00:22:51,970
refuse to to jump to the bootloader to

407
00:22:49,210 --> 00:22:58,660
be executed but for me it's quite a

408
00:22:51,970 --> 00:23:01,300
perfect situation here so bypass out to

409
00:22:58,660 --> 00:23:03,220
bypass the secure boot and why first but

410
00:23:01,300 --> 00:23:08,770
I mean it's a real simple is to have a

411
00:23:03,220 --> 00:23:10,960
codec section today if you want to face

412
00:23:08,770 --> 00:23:15,250
this you have to you have to obtain code

413
00:23:10,960 --> 00:23:17,680
execution how my goal is to first USB

414
00:23:15,250 --> 00:23:22,060
SATA to to execute and then sign boot

415
00:23:17,680 --> 00:23:24,010
loader to load and in sign hub ok to do

416
00:23:22,060 --> 00:23:26,020
that I have to focus on the boot rom

417
00:23:24,010 --> 00:23:29,830
because boot ROM is always nice to

418
00:23:26,020 --> 00:23:34,629
exploits and it's always a difficult to

419
00:23:29,830 --> 00:23:36,909
fix boot ROM vulnerability so I need to

420
00:23:34,630 --> 00:23:41,170
reverse the boot rom but first I need to

421
00:23:36,910 --> 00:23:45,160
dump it because without them you cannot

422
00:23:41,170 --> 00:23:47,050
read us so to them the boot ROM I look

423
00:23:45,160 --> 00:23:52,270
at the boot ROM in the memory map it's

424
00:23:47,050 --> 00:23:55,450
some 4000 0 0 0 0 but now you remember I

425
00:23:52,270 --> 00:23:59,560
didn't burn the G tacky fuses so I use a

426
00:23:55,450 --> 00:24:03,880
little border $20 based on FTDI chip I

427
00:23:59,560 --> 00:24:07,299
use a pen ocg I use also extensor gdb

428
00:24:03,880 --> 00:24:09,070
and then I have full table access and I

429
00:24:07,299 --> 00:24:13,990
can land it directly on the reset vector

430
00:24:09,070 --> 00:24:17,200
so I have I have I can step in in the

431
00:24:13,990 --> 00:24:20,610
boot from I can do whenever I want and I

432
00:24:17,200 --> 00:24:23,980
can of of course them to put from easily

433
00:24:20,610 --> 00:24:27,309
so now I have the binary of the boot ROM

434
00:24:23,980 --> 00:24:29,140
and it's based on extensor extensa is a

435
00:24:27,309 --> 00:24:31,600
very exotic architecture they have the

436
00:24:29,140 --> 00:24:33,280
system of register windowing I will not

437
00:24:31,600 --> 00:24:40,689
enter into much detail that is quite

438
00:24:33,280 --> 00:24:42,309
quite crazy stuff and they evolve says

439
00:24:40,690 --> 00:24:44,440
they have also different the lengths of

440
00:24:42,309 --> 00:24:48,270
instructions and it's quite painful to

441
00:24:44,440 --> 00:24:50,380
reverse but unfortunately the

442
00:24:48,270 --> 00:24:54,210
instruction set architecture is

443
00:24:50,380 --> 00:24:58,659
available so I will use either of course

444
00:24:54,210 --> 00:25:01,809
plus an plugin from the mad inventors

445
00:24:58,659 --> 00:25:02,230
called the iodide sensor and was really

446
00:25:01,809 --> 00:25:07,539
helpful

447
00:25:02,230 --> 00:25:10,419
I also a grep and found a secure boot

448
00:25:07,539 --> 00:25:12,760
edge which is listing all the ROM

449
00:25:10,419 --> 00:25:20,080
functions this is very useful but they

450
00:25:12,760 --> 00:25:21,789
deprecated since I call my my friend to

451
00:25:20,080 --> 00:25:23,189
check my mass of course always always

452
00:25:21,789 --> 00:25:27,549
good to have friends

453
00:25:23,190 --> 00:25:30,280
Disgaea and then at the end it's not

454
00:25:27,549 --> 00:25:32,799
perfect but it's curly to able to

455
00:25:30,280 --> 00:25:35,049
reverse extensor and as you can see in

456
00:25:32,799 --> 00:25:39,490
the images I start in the beginning of

457
00:25:35,049 --> 00:25:41,168
the boot ROM as expected so I will not

458
00:25:39,490 --> 00:25:45,280
tell too much a reverse of the boot ROM

459
00:25:41,169 --> 00:25:47,860
I will just agitate the view and then I

460
00:25:45,280 --> 00:25:52,030
located the ETS secure boot to check

461
00:25:47,860 --> 00:25:54,639
finish functions I mean it's quite the

462
00:25:52,030 --> 00:25:59,918
name of the function is quite useful and

463
00:25:54,640 --> 00:26:02,350
just after that of course we can see we

464
00:25:59,919 --> 00:26:04,630
have to branch the left branch is the

465
00:26:02,350 --> 00:26:08,918
sexual boot check failure printf we saw

466
00:26:04,630 --> 00:26:11,620
we saw we saw previously and on the on

467
00:26:08,919 --> 00:26:14,900
the right side we will have a product

468
00:26:11,620 --> 00:26:17,090
section we locate the

469
00:26:14,900 --> 00:26:20,360
this little instruction the branch if

470
00:26:17,090 --> 00:26:23,030
not equal immediate and the result will

471
00:26:20,360 --> 00:26:26,750
be a tip and will depends on the on the

472
00:26:23,030 --> 00:26:30,440
sec boot check finish return value so

473
00:26:26,750 --> 00:26:34,790
and this is tour in a ten registers so

474
00:26:30,440 --> 00:26:37,390
my goal is to make the PC jump to the

475
00:26:34,790 --> 00:26:41,300
right side at the 4000

476
00:26:37,390 --> 00:26:46,460
75 c5 to execute the bootloader of

477
00:26:41,300 --> 00:26:48,889
course so first I have G tag access so I

478
00:26:46,460 --> 00:26:52,010
will develop a little exploit based on G

479
00:26:48,890 --> 00:26:56,150
tag just a little script to set the a-10

480
00:26:52,010 --> 00:27:00,920
register to 0 and then I will execute

481
00:26:56,150 --> 00:27:06,230
this branch not call imitate instruction

482
00:27:00,920 --> 00:27:12,110
so here's the demo yeah

483
00:27:06,230 --> 00:27:16,550
so I'll uh I launch open Oct then I send

484
00:27:12,110 --> 00:27:18,649
a little script to gdb and then I wait a

485
00:27:16,550 --> 00:27:21,760
little bit and then we can see on the on

486
00:27:18,650 --> 00:27:27,020
the upper left side my code is executed

487
00:27:21,760 --> 00:27:30,290
so I validate the neighbor ability using

488
00:27:27,020 --> 00:27:32,660
G tag of course but now it's time to

489
00:27:30,290 --> 00:27:34,430
pawn for real because in real life you

490
00:27:32,660 --> 00:27:38,240
don't have it she tagged G tag is

491
00:27:34,430 --> 00:27:41,270
normally disabled on secure device and I

492
00:27:38,240 --> 00:27:45,920
could not find a way to exploit this Vil

493
00:27:41,270 --> 00:27:49,670
by a software-only so ya fault injection

494
00:27:45,920 --> 00:27:52,880
is my only way so I decide to modify a

495
00:27:49,670 --> 00:27:56,120
little bit my setup to glitch on VDD CPU

496
00:27:52,880 --> 00:27:58,700
and on VDD a 3 because V DD RTC is used

497
00:27:56,120 --> 00:28:03,379
when the chip is a blue chip app so on

498
00:27:58,700 --> 00:28:05,810
and I also promised BMOC signal to have

499
00:28:03,380 --> 00:28:07,730
a timing information because the fault

500
00:28:05,810 --> 00:28:14,780
injection will be will be very very

501
00:28:07,730 --> 00:28:19,070
dependent about the timing now so I do

502
00:28:14,780 --> 00:28:23,070
some some some tester we can see here on

503
00:28:19,070 --> 00:28:25,710
on a scope screen of course

504
00:28:23,070 --> 00:28:28,290
previous petrm reverse is really full to

505
00:28:25,710 --> 00:28:31,950
determine the timing and where you have

506
00:28:28,290 --> 00:28:36,570
to glitch exactly so I assume in the

507
00:28:31,950 --> 00:28:39,720
specific windows we can see the you are

508
00:28:36,570 --> 00:28:42,179
signals providing information and then

509
00:28:39,720 --> 00:28:46,790
on the channel 2 we have the SPI frame

510
00:28:42,180 --> 00:28:46,790
which indicate the end of the bootloader

511
00:28:47,810 --> 00:28:55,050
load the the end of the load of the

512
00:28:51,180 --> 00:28:57,480
bootloader ok but as a result we can see

513
00:28:55,050 --> 00:28:59,850
that the secure boot to check fail so it

514
00:28:57,480 --> 00:29:05,670
means that the secure boot was not was

515
00:28:59,850 --> 00:29:07,919
not bypass during this this attempts but

516
00:29:05,670 --> 00:29:15,270
with a little bit of time a little bit

517
00:29:07,920 --> 00:29:19,260
of of settings yeah yeah is another

518
00:29:15,270 --> 00:29:23,520
screen of course I assume inside the

519
00:29:19,260 --> 00:29:28,580
Maya interesting windows and here we can

520
00:29:23,520 --> 00:29:31,470
see on the CL the the reservatrol puta

521
00:29:28,580 --> 00:29:35,179
it has been modified by the by the

522
00:29:31,470 --> 00:29:41,010
glitch effect and then we can see the

523
00:29:35,180 --> 00:29:42,840
the bootloader and repo entry point of

524
00:29:41,010 --> 00:29:44,100
the Buddha so the CPU is jumping to the

525
00:29:42,840 --> 00:29:49,379
entry point and the bootloader has

526
00:29:44,100 --> 00:29:53,459
executed so I mean it's done and of

527
00:29:49,380 --> 00:29:55,770
course for concept is important and then

528
00:29:53,460 --> 00:29:57,930
we can see that on the on the on the

529
00:29:55,770 --> 00:30:03,990
shell directly so you wait a little bit

530
00:29:57,930 --> 00:30:06,990
then at one moment I have my own sign

531
00:30:03,990 --> 00:30:09,660
hub which is executed because I load an

532
00:30:06,990 --> 00:30:14,810
ensign bootloader using voltage

533
00:30:09,660 --> 00:30:14,810
glitching thank you

534
00:30:16,539 --> 00:30:28,100
so sorry for the children it was a it

535
00:30:21,230 --> 00:30:30,500
was late so suitable conclusion so it's

536
00:30:28,100 --> 00:30:33,610
a sexual would bypass exploit in stage

537
00:30:30,500 --> 00:30:36,320
zero trigger sugar by fault injection

538
00:30:33,610 --> 00:30:38,629
good from good from a vulnerability of

539
00:30:36,320 --> 00:30:42,379
course it's not persistent if the reset

540
00:30:38,630 --> 00:30:47,269
occurs but the good things is you have

541
00:30:42,380 --> 00:30:50,450
no way to fix without Rama revision so I

542
00:30:47,269 --> 00:30:53,570
went to responsible disclosure I sent

543
00:30:50,450 --> 00:30:56,149
puck in June they release the security

544
00:30:53,570 --> 00:31:01,850
wizardry on September 2 they request the

545
00:30:56,149 --> 00:31:05,029
CV mean ok no problem and they decided

546
00:31:01,850 --> 00:31:07,639
to patch by a flash encryption always

547
00:31:05,029 --> 00:31:09,440
enabled so then you cannot use secure

548
00:31:07,639 --> 00:31:13,149
boot only you will also use flash

549
00:31:09,440 --> 00:31:15,799
encryption plus secure boot I mean it's

550
00:31:13,149 --> 00:31:18,590
it's a valuable patch I think and

551
00:31:15,799 --> 00:31:21,260
another security lab called the risk you

552
00:31:18,590 --> 00:31:26,120
found the same vulnerability so it was a

553
00:31:21,260 --> 00:31:31,158
join a disclosure so no silent patch

554
00:31:26,120 --> 00:31:36,469
attempts at this time so was a good good

555
00:31:31,159 --> 00:31:41,179
progress but of course now I go to flash

556
00:31:36,470 --> 00:31:44,149
encryption because I mean it was on my

557
00:31:41,179 --> 00:31:45,710
to-do list the role of the flash

558
00:31:44,149 --> 00:31:47,768
encryption is to protect the former

559
00:31:45,710 --> 00:31:51,880
confidentiality is to protect against

560
00:31:47,769 --> 00:31:54,559
binary instructions and the reverse

561
00:31:51,880 --> 00:31:57,289
without flash encryption it's really

562
00:31:54,559 --> 00:32:01,879
easy to extract a sensitive data for

563
00:31:57,289 --> 00:32:06,019
example I did that a little bit late

564
00:32:01,880 --> 00:32:07,880
earlier this year on light bulbs so it's

565
00:32:06,019 --> 00:32:10,340
really easy to dump and then you have

566
00:32:07,880 --> 00:32:10,940
access to sensitive data after of the

567
00:32:10,340 --> 00:32:13,760
vendors

568
00:32:10,940 --> 00:32:17,000
sensitive that of the users I mean it's

569
00:32:13,760 --> 00:32:21,740
not really good to to toast this kind of

570
00:32:17,000 --> 00:32:24,200
devices today and few more encryptions

571
00:32:21,740 --> 00:32:26,960
is become more and more present today in

572
00:32:24,200 --> 00:32:28,910
IOT but also on other devices and it's

573
00:32:26,960 --> 00:32:33,260
really security by obscurity but

574
00:32:28,910 --> 00:32:36,830
I mean it says it's a choice of funnels

575
00:32:33,260 --> 00:32:39,530
as perceive recommend secure boot and

576
00:32:36,830 --> 00:32:42,040
fresh an option for maximum security so

577
00:32:39,530 --> 00:32:45,139
let's review the flash encryption now

578
00:32:42,040 --> 00:32:47,389
it's pure hardware is encryption

579
00:32:45,140 --> 00:32:50,960
decryption block in flash memory contra

580
00:32:47,390 --> 00:32:54,680
so this block will fetch the key from

581
00:32:50,960 --> 00:32:57,700
infuses and also the parameters and it

582
00:32:54,680 --> 00:33:00,770
will use IES to decrypt and encrypt

583
00:32:57,700 --> 00:33:04,430
instructions and data into into caches

584
00:33:00,770 --> 00:33:07,810
and the discussion you don't have access

585
00:33:04,430 --> 00:33:16,160
by software so you cannot you cannot

586
00:33:07,810 --> 00:33:17,810
read the values of course so yeah the my

587
00:33:16,160 --> 00:33:20,330
main focus is the flash encryption key

588
00:33:17,810 --> 00:33:22,669
of course because if you can obtain this

589
00:33:20,330 --> 00:33:26,120
flash encryption key you can decrypt the

590
00:33:22,670 --> 00:33:30,560
firmware and then of course these

591
00:33:26,120 --> 00:33:33,649
critical assets so how to set the flash

592
00:33:30,560 --> 00:33:36,919
encryption in SP 32 you bound the flash

593
00:33:33,650 --> 00:33:38,780
encryption key into BL k1 this time you

594
00:33:36,920 --> 00:33:41,330
activate the flash encryption doing some

595
00:33:38,780 --> 00:33:44,090
settings flash click config and then

596
00:33:41,330 --> 00:33:47,689
also you enable the the flash go to

597
00:33:44,090 --> 00:33:50,389
content which fuses you flash the

598
00:33:47,690 --> 00:33:53,270
unencrypted firmware into USB SATA to

599
00:33:50,390 --> 00:33:55,340
previously a compiled and then you of

600
00:33:53,270 --> 00:33:57,680
course you verify to issues a map and we

601
00:33:55,340 --> 00:34:02,629
can see now block number one and block

602
00:33:57,680 --> 00:34:04,520
number two impossible to to read out of

603
00:34:02,630 --> 00:34:07,700
course because it's requite protected

604
00:34:04,520 --> 00:34:11,690
and you can also see a digit a ger is

605
00:34:07,700 --> 00:34:16,429
disabled here I don't

606
00:34:11,690 --> 00:34:21,010
and yeah I verify my firmware is a

607
00:34:16,429 --> 00:34:24,830
pretty well encrypted so yeah it was

608
00:34:21,010 --> 00:34:27,290
prettier to see maybe a good how to

609
00:34:24,830 --> 00:34:30,409
break the flash encryption so I did a

610
00:34:27,290 --> 00:34:32,480
lot of tests and but I did not find a

611
00:34:30,409 --> 00:34:35,020
unfortunately particular weakness to

612
00:34:32,480 --> 00:34:37,730
access the key it was pretty well design

613
00:34:35,020 --> 00:34:39,379
how to attack by differential fault

614
00:34:37,730 --> 00:34:41,320
analysis which is a common technique to

615
00:34:39,379 --> 00:34:47,150
break first encryption

616
00:34:41,320 --> 00:34:50,180
so I was a little bit sad and my last

617
00:34:47,150 --> 00:34:52,130
hope was a side channel analysis to

618
00:34:50,179 --> 00:34:54,949
target the bootloader decryption during

619
00:34:52,130 --> 00:35:00,650
the during the bootloader process and

620
00:34:54,949 --> 00:35:04,910
then so I achieve a little such a new

621
00:35:00,650 --> 00:35:07,550
set up but I found some difficulties

622
00:35:04,910 --> 00:35:11,029
because spi bus is producing a lot of

623
00:35:07,550 --> 00:35:14,830
noise during my acquisitions and I

624
00:35:11,030 --> 00:35:19,780
cannot control the SPI frame properly I

625
00:35:14,830 --> 00:35:22,250
try to use a SPI emulator from from

626
00:35:19,780 --> 00:35:26,060
Vanderpool but it was a big fail I mean

627
00:35:22,250 --> 00:35:29,660
I was not was not was not good I tried

628
00:35:26,060 --> 00:35:33,140
different such an analysis attacked the

629
00:35:29,660 --> 00:35:36,040
PSP a but I didn't have a very nice SNS

630
00:35:33,140 --> 00:35:41,390
not noise ratio I didn't find a nice

631
00:35:36,040 --> 00:35:45,529
good spot to twelve leakage so I find I

632
00:35:41,390 --> 00:35:53,690
spend a tonight and nights but for zero

633
00:35:45,530 --> 00:35:56,450
results and yeah I mean I was a cow so

634
00:35:53,690 --> 00:35:59,420
the conclusion here

635
00:35:56,450 --> 00:36:03,770
it came is clear I lost I mean sometimes

636
00:35:59,420 --> 00:36:08,360
you don't success but I mean I decided

637
00:36:03,770 --> 00:36:11,570
to to read some advices about fatal fury

638
00:36:08,360 --> 00:36:13,100
and and to follow that because if you

639
00:36:11,570 --> 00:36:16,150
watch your opponent techniques very

640
00:36:13,100 --> 00:36:19,250
carefully you can find that the witness

641
00:36:16,150 --> 00:36:22,850
so in the weakness I found it in the

642
00:36:19,250 --> 00:36:27,020
mode in the OTP fuses and this is I'm

643
00:36:22,850 --> 00:36:29,839
going to disclose today so OTP Hughes's

644
00:36:27,020 --> 00:36:32,300
is the sexual memory it's a one-time

645
00:36:29,840 --> 00:36:35,750
program programmable memory based on

646
00:36:32,300 --> 00:36:39,470
infuses it's like electrical fuses in

647
00:36:35,750 --> 00:36:42,080
your house I mean but this is inside the

648
00:36:39,470 --> 00:36:44,629
ESP such - and infuses can be programmed

649
00:36:42,080 --> 00:36:47,720
just one time from zero to one

650
00:36:44,630 --> 00:36:50,840
once burn you cannot change the values

651
00:36:47,720 --> 00:36:53,828
of that you cannot wipe it because it's

652
00:36:50,840 --> 00:36:57,380
physically done it's

653
00:36:53,829 --> 00:36:59,720
the organization is the following 1 BLK

654
00:36:57,380 --> 00:37:02,809
zero is for SES passatti to

655
00:36:59,720 --> 00:37:05,930
configuration lk 1 flashing shonky of

656
00:37:02,809 --> 00:37:07,940
course lk to take your boot key and the

657
00:37:05,930 --> 00:37:10,848
belicus who is reserved for user

658
00:37:07,940 --> 00:37:15,799
applications or custom max for example

659
00:37:10,849 --> 00:37:18,980
other data and according to 2 expressive

660
00:37:15,799 --> 00:37:22,038
DC fuses they are retried protected and

661
00:37:18,980 --> 00:37:25,849
cannot be read out modified once

662
00:37:22,039 --> 00:37:27,890
protection bits are set and about the

663
00:37:25,849 --> 00:37:29,960
fuses they are managed by your nephew's

664
00:37:27,890 --> 00:37:32,930
controllers it's a dedicated piece of

665
00:37:29,960 --> 00:37:35,750
hardware inside the ESP SATA 2 which is

666
00:37:32,930 --> 00:37:41,660
in charge to manage the load the program

667
00:37:35,750 --> 00:37:45,109
nation of this uses array so let's

668
00:37:41,660 --> 00:37:47,299
reverse the fuses if we can and then it

669
00:37:45,109 --> 00:37:51,170
really because it's only treated to two

670
00:37:47,299 --> 00:37:53,359
functions reading and program but these

671
00:37:51,170 --> 00:37:56,809
functions they are just used during a

672
00:37:53,359 --> 00:38:00,200
special a boot mode and this is I found

673
00:37:56,809 --> 00:38:02,599
that a little bit interesting because

674
00:38:00,200 --> 00:38:07,189
the boot from during the normal good

675
00:38:02,599 --> 00:38:09,319
model doesn't touch OTP values so it

676
00:38:07,190 --> 00:38:10,880
means only the issue this controller has

677
00:38:09,319 --> 00:38:13,480
access to this one-time programmable

678
00:38:10,880 --> 00:38:16,609
memory is the pure hardware process and

679
00:38:13,480 --> 00:38:18,140
of course he has to be set before the

680
00:38:16,609 --> 00:38:23,930
boot rom because the boot ROM used the

681
00:38:18,140 --> 00:38:25,879
secure boot key so let's talk about the

682
00:38:23,930 --> 00:38:28,700
special boot model this model is a

683
00:38:25,880 --> 00:38:32,119
management model to flash the firmware

684
00:38:28,700 --> 00:38:35,509
to set fuses to set configuration of the

685
00:38:32,119 --> 00:38:38,049
of the of the platform and this you can

686
00:38:35,509 --> 00:38:41,119
enter in this special mode by a ground

687
00:38:38,049 --> 00:38:43,369
grunting the usual okay and then you

688
00:38:41,119 --> 00:38:47,630
pull up and you will obtain this message

689
00:38:43,369 --> 00:38:51,140
on the you are 0 ok and now you can use

690
00:38:47,630 --> 00:38:55,069
some Python utility tools done by the

691
00:38:51,140 --> 00:38:58,069
vendors to talk to the boot rom directly

692
00:38:55,069 --> 00:39:01,839
and to deal with the fuses with the two

693
00:38:58,069 --> 00:39:01,839
previous functions we saw

694
00:39:01,980 --> 00:39:08,520
so let's talk about the fuse protection

695
00:39:04,530 --> 00:39:10,619
as we as we know any attempts to read

696
00:39:08,520 --> 00:39:11,250
the BL k1 and relocate to return a zero

697
00:39:10,619 --> 00:39:14,970
accessible

698
00:39:11,250 --> 00:39:21,079
I try to Road amp this and you as we can

699
00:39:14,970 --> 00:39:23,549
see bill K 1 and BN k - it's all 0 but I

700
00:39:21,079 --> 00:39:29,490
need to identify the right protection

701
00:39:23,550 --> 00:39:32,550
bit and this I found it in blk 0 in the

702
00:39:29,490 --> 00:39:34,979
security configuration of the chip after

703
00:39:32,550 --> 00:39:38,490
little bit of reverse I identified two

704
00:39:34,980 --> 00:39:40,070
bits and these bits are the read

705
00:39:38,490 --> 00:39:44,970
protection bits

706
00:39:40,070 --> 00:39:47,820
so here where is the room I mean I'm

707
00:39:44,970 --> 00:39:50,459
sorry but I have no film yeah but I know

708
00:39:47,820 --> 00:39:53,220
the boot from does not manage the fuses

709
00:39:50,460 --> 00:39:56,579
and obviously the issues contrast was

710
00:39:53,220 --> 00:40:00,930
the job before I know I can use a

711
00:39:56,579 --> 00:40:04,500
special boot model and I also locate the

712
00:40:00,930 --> 00:40:05,940
heat protection bit so the idea is to

713
00:40:04,500 --> 00:40:09,000
glitch the if use controller

714
00:40:05,940 --> 00:40:11,849
initialization to change to modify the

715
00:40:09,000 --> 00:40:14,339
readwrite protections and then I send

716
00:40:11,849 --> 00:40:17,369
dump commands in special boot model and

717
00:40:14,339 --> 00:40:22,470
if I'm lucky I get back

718
00:40:17,369 --> 00:40:27,800
BL k1 and be ok too so let's see that

719
00:40:22,470 --> 00:40:32,098
now on the screen so here's the scope

720
00:40:27,800 --> 00:40:34,020
scope visualization and then I do little

721
00:40:32,099 --> 00:40:37,500
bit of simple power analysis and I

722
00:40:34,020 --> 00:40:43,339
identify a very very interesting process

723
00:40:37,500 --> 00:40:46,859
it's pure process I assume inside and

724
00:40:43,339 --> 00:40:49,410
yeah I mean I saw the current

725
00:40:46,859 --> 00:40:55,009
consumptions and I decide to glitch

726
00:40:49,410 --> 00:40:59,609
inside this identified our process and

727
00:40:55,010 --> 00:41:03,240
after some some attempts I can obtain

728
00:40:59,609 --> 00:41:06,960
this kind of stuff and this is a full

729
00:41:03,240 --> 00:41:10,740
readout of bill k1 and k2 so typically

730
00:41:06,960 --> 00:41:12,210
as we can see these two keys are

731
00:41:10,740 --> 00:41:15,089
critical

732
00:41:12,210 --> 00:41:19,859
I send that to the vendors on July 24

733
00:41:15,089 --> 00:41:22,130
and I was pretty happy about my my

734
00:41:19,859 --> 00:41:22,130
attack

735
00:41:24,319 --> 00:41:35,190
thank you but subtly I need to do one

736
00:41:32,579 --> 00:41:37,980
more step because when I look the dump

737
00:41:35,190 --> 00:41:40,349
values they are not exactly the good one

738
00:41:37,980 --> 00:41:44,609
and I I know that because I found the

739
00:41:40,349 --> 00:41:47,930
key so I do a little bit of offline

740
00:41:44,609 --> 00:41:52,589
statistical analysis on a certificate

741
00:41:47,930 --> 00:41:55,770
template values and then I just keep the

742
00:41:52,589 --> 00:41:57,779
most recurrent by T is the for the

743
00:41:55,770 --> 00:42:00,450
security analysis which is the same for

744
00:41:57,780 --> 00:42:02,280
fresh encryption key and at the end I

745
00:42:00,450 --> 00:42:05,848
mean one byte is still unknown

746
00:42:02,280 --> 00:42:10,859
and as we brute force I mean when we

747
00:42:05,849 --> 00:42:11,369
talk about is 256 key brute forcing one

748
00:42:10,859 --> 00:42:15,180
byte

749
00:42:11,369 --> 00:42:16,980
I mean it's not so bad so the food the

750
00:42:15,180 --> 00:42:19,200
full exploit is the following one first

751
00:42:16,980 --> 00:42:21,359
we have to decrypt the firmware so we

752
00:42:19,200 --> 00:42:26,339
dump the encrypted firmware in a maximum

753
00:42:21,359 --> 00:42:28,819
security - we can dump that by the

754
00:42:26,339 --> 00:42:35,308
download mode can dump by directly

755
00:42:28,819 --> 00:42:38,520
probing the flash spi flash and then we

756
00:42:35,309 --> 00:42:41,400
have to perform this fatal glitch to

757
00:42:38,520 --> 00:42:43,799
extract a set of fresh and efficiently

758
00:42:41,400 --> 00:42:46,170
and secure boot key values we run the

759
00:42:43,799 --> 00:42:49,170
statistical analysis and then we confirm

760
00:42:46,170 --> 00:42:51,119
the true flash encryption key by

761
00:42:49,170 --> 00:42:58,400
decrypting the firmware of course I mean

762
00:42:51,119 --> 00:43:02,819
and once the family decree decrypted

763
00:42:58,400 --> 00:43:04,740
nicely we found out this fresh

764
00:43:02,819 --> 00:43:05,220
conclusions it's a really important to

765
00:43:04,740 --> 00:43:09,180
respect

766
00:43:05,220 --> 00:43:12,240
despite order when you write this this

767
00:43:09,180 --> 00:43:16,200
software commands because as I change

768
00:43:12,240 --> 00:43:18,868
the the organization of the of the of

769
00:43:16,200 --> 00:43:22,049
the bytes but it's not a big deal you

770
00:43:18,869 --> 00:43:23,790
have to know just that and then the

771
00:43:22,049 --> 00:43:26,670
second step is to sign now your code so

772
00:43:23,790 --> 00:43:31,420
now the film where is decrypt

773
00:43:26,670 --> 00:43:33,219
we had we extracted the 128 bytes from

774
00:43:31,420 --> 00:43:36,249
the flash because it's the random bytes

775
00:43:33,219 --> 00:43:39,849
we have to keep that we extract the

776
00:43:36,249 --> 00:43:44,919
bootloader images at the 0 X 1000 in a

777
00:43:39,849 --> 00:43:47,289
flash memory of course and we confirm

778
00:43:44,920 --> 00:43:51,670
the true a secure boot key by computed

779
00:43:47,289 --> 00:43:55,059
by computing the digest and yeah yeah I

780
00:43:51,670 --> 00:43:57,849
located the rotor to the previously just

781
00:43:55,059 --> 00:43:59,799
and when I obtained the same I mean it's

782
00:43:57,849 --> 00:44:02,559
because I used the real secure boot key

783
00:43:59,799 --> 00:44:04,410
and then I would I put false like that

784
00:44:02,559 --> 00:44:08,079
the last bytes

785
00:44:04,410 --> 00:44:11,078
now I write my code so maybe a little

786
00:44:08,079 --> 00:44:14,799
while back though I don't know and then

787
00:44:11,079 --> 00:44:16,749
I compile a G's I use fresh encryption

788
00:44:14,799 --> 00:44:20,589
key secure boot key and then I can

789
00:44:16,749 --> 00:44:25,959
Russian ephemera and this is a really

790
00:44:20,589 --> 00:44:32,619
odd to detect on the field so here's the

791
00:44:25,959 --> 00:44:34,660
conclusion of this fatale attack yeah it

792
00:44:32,619 --> 00:44:36,160
leads to an expression of the secure

793
00:44:34,660 --> 00:44:37,928
boot key and the flashing shonky

794
00:44:36,160 --> 00:44:40,328
breaking secure boot impression crucian

795
00:44:37,929 --> 00:44:42,249
an attacker can decrypted the firmware

796
00:44:40,329 --> 00:44:45,939
so it can access all the IP and

797
00:44:42,249 --> 00:44:49,149
sensitive data it can sign and run is

798
00:44:45,939 --> 00:44:53,348
all 9 cryptid code persistently because

799
00:44:49,150 --> 00:44:57,699
you know the keys and then it's it's a

800
00:44:53,349 --> 00:45:00,369
persistent ephemeral modification it's

801
00:44:57,699 --> 00:45:05,489
low cost low complexity it's really easy

802
00:45:00,369 --> 00:45:09,729
to reproduce no way to fix

803
00:45:05,489 --> 00:45:15,359
so although SP via such two versions of

804
00:45:09,729 --> 00:45:17,529
venerable but Van Doren reacts of course

805
00:45:15,359 --> 00:45:24,848
so I went to responsible disclosure

806
00:45:17,529 --> 00:45:26,650
again I send on July 24 CVE requested by

807
00:45:24,849 --> 00:45:31,479
the vendors I just closed today

808
00:45:26,650 --> 00:45:34,900
but they say they were faster than me

809
00:45:31,479 --> 00:45:38,899
and they they provide security edges are

810
00:45:34,900 --> 00:45:41,930
number one and it's funny because

811
00:45:38,900 --> 00:45:46,360
the expense they cannot fix but they

812
00:45:41,930 --> 00:45:50,540
propose to pay a new cheap version so

813
00:45:46,360 --> 00:45:54,590
pretty cool if you have already a lot of

814
00:45:50,540 --> 00:45:57,800
devices on the field yeah

815
00:45:54,590 --> 00:45:59,180
so it leads to a lot of venerable

816
00:45:57,800 --> 00:46:04,190
devices on the field for the Comenius

817
00:45:59,180 --> 00:46:08,540
and so yeah I mean we're going to buy

818
00:46:04,190 --> 00:46:15,380
this now I mean the previous one we want

819
00:46:08,540 --> 00:46:17,660
broken platforms so final conclusion so

820
00:46:15,380 --> 00:46:20,360
I I do this disclosure for the

821
00:46:17,660 --> 00:46:22,399
developers because I mean if you have a

822
00:46:20,360 --> 00:46:25,670
start-up and you have a business model

823
00:46:22,400 --> 00:46:27,170
you can you can be aware about that

824
00:46:25,670 --> 00:46:28,160
occur with physical access can

825
00:46:27,170 --> 00:46:34,040
compromise

826
00:46:28,160 --> 00:46:37,279
yes p32 pretty badly so the you have no

827
00:46:34,040 --> 00:46:41,060
current fix on ESP 32 the chip will be

828
00:46:37,280 --> 00:46:43,250
broken forever but you can also buy the

829
00:46:41,060 --> 00:46:46,390
next version which will be protected

830
00:46:43,250 --> 00:46:48,770
maybe I don't know I didn't test it

831
00:46:46,390 --> 00:46:50,930
identifies the world companies using the

832
00:46:48,770 --> 00:46:53,300
ESP such two security features in the

833
00:46:50,930 --> 00:46:57,230
product I will not disclose the name of

834
00:46:53,300 --> 00:46:59,420
course yeah general message for vendors

835
00:46:57,230 --> 00:47:02,600
I mean you don't palette on patch

836
00:46:59,420 --> 00:47:06,770
silently it's not good and it's better

837
00:47:02,600 --> 00:47:10,540
to reward and security researchers so

838
00:47:06,770 --> 00:47:16,550
new results coming soon so stay tuned

839
00:47:10,540 --> 00:47:19,730
the other reference and thank you thank

840
00:47:16,550 --> 00:47:22,510
you for raising the lady thank you for

841
00:47:19,730 --> 00:47:22,510
your presentation

