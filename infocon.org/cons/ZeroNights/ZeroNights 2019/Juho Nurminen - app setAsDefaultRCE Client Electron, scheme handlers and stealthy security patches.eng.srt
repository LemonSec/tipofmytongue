1
00:00:06,190 --> 00:00:19,320
[Music]

2
00:00:13,129 --> 00:00:23,668
hi hello everyone my name is Johan or

3
00:00:19,320 --> 00:00:28,470
minin and this is app set as default RC

4
00:00:23,669 --> 00:00:30,419
client for the next 45 minutes or so I'm

5
00:00:28,470 --> 00:00:36,000
going to be talking to you a little bit

6
00:00:30,419 --> 00:00:39,510
about electron scheme handlers and how

7
00:00:36,000 --> 00:00:44,070
to exploit those in apps to gain remote

8
00:00:39,510 --> 00:00:46,678
code execution this talk is based on

9
00:00:44,070 --> 00:00:50,309
research I started working on in early

10
00:00:46,679 --> 00:00:55,980
2019 and this is the first time I'm able

11
00:00:50,309 --> 00:00:57,300
to talk about it publicly but most of

12
00:00:55,980 --> 00:01:00,300
the vulnerabilities you'll be seeing

13
00:00:57,300 --> 00:01:04,530
here have already been fixed some of

14
00:01:00,300 --> 00:01:06,870
them even before I ran into them the

15
00:01:04,530 --> 00:01:09,960
interesting thing about that is though

16
00:01:06,870 --> 00:01:12,690
that electron hasn't really published

17
00:01:09,960 --> 00:01:15,300
any advisories about them so developers

18
00:01:12,690 --> 00:01:18,480
mostly aren't aware that there are any

19
00:01:15,300 --> 00:01:24,090
issues and there's no incentive to fix

20
00:01:18,480 --> 00:01:27,630
those outdated apps and so old versions

21
00:01:24,090 --> 00:01:29,700
of electron are still being used in the

22
00:01:27,630 --> 00:01:32,429
name of transparency I should also

23
00:01:29,700 --> 00:01:35,670
mention that literally a week ago I

24
00:01:32,430 --> 00:01:38,540
joined one of the companies building one

25
00:01:35,670 --> 00:01:44,010
of the apps named in these slides so

26
00:01:38,540 --> 00:01:46,320
they're sort of a sort of a conflict or

27
00:01:44,010 --> 00:01:50,510
potential potential conflict of interest

28
00:01:46,320 --> 00:01:56,070
there but all the research was made

29
00:01:50,510 --> 00:01:57,810
before I joined the company and that

30
00:01:56,070 --> 00:02:03,750
hasn't really affected anything I'll be

31
00:01:57,810 --> 00:02:05,400
presenting here today let's start off

32
00:02:03,750 --> 00:02:09,530
with a quick introduction to electron

33
00:02:05,400 --> 00:02:13,110
and neuron now that may sound like

34
00:02:09,530 --> 00:02:15,060
nuclear physics or something really the

35
00:02:13,110 --> 00:02:17,099
only thing these two have in common with

36
00:02:15,060 --> 00:02:19,980
nuclear physics is the end result if you

37
00:02:17,099 --> 00:02:23,010
don't know what you're doing I'll

38
00:02:19,980 --> 00:02:24,840
demonstrate that a bit later on but

39
00:02:23,010 --> 00:02:29,459
basically no one likes a nuclear

40
00:02:24,840 --> 00:02:32,099
meltdown so anyway if you're not

41
00:02:29,459 --> 00:02:34,680
familiar with electron what it is what

42
00:02:32,099 --> 00:02:41,149
it essentially is is just a hybrid

43
00:02:34,680 --> 00:02:44,810
desktop app framework it lets you write

44
00:02:41,150 --> 00:02:47,159
HTML and JavaScript and make web make

45
00:02:44,810 --> 00:02:51,420
desktop applications using those web

46
00:02:47,159 --> 00:02:55,230
technologies without going into too much

47
00:02:51,420 --> 00:02:57,420
detail it's technically just the Chrome

48
00:02:55,230 --> 00:03:01,709
browser bundled with no js' and some

49
00:02:57,420 --> 00:03:06,089
custom API is then there's also mirin

50
00:03:01,709 --> 00:03:09,329
which is well originally started as an

51
00:03:06,090 --> 00:03:11,459
electron fork with better security but

52
00:03:09,329 --> 00:03:13,340
it's just a fork of electron and the

53
00:03:11,459 --> 00:03:16,560
unfortunate thing about that is that

54
00:03:13,340 --> 00:03:16,940
even though the original intentions were

55
00:03:16,560 --> 00:03:23,099
good

56
00:03:16,940 --> 00:03:27,139
they wanted to hold an electron the muon

57
00:03:23,099 --> 00:03:30,149
fork is no longer now maintained and

58
00:03:27,139 --> 00:03:33,049
that means it's hopelessly on outdated

59
00:03:30,150 --> 00:03:37,379
and vulnerable to all kinds of things

60
00:03:33,049 --> 00:03:39,540
so while electron is certainly more

61
00:03:37,379 --> 00:03:43,858
popular of the two new and still has its

62
00:03:39,540 --> 00:03:50,310
users also and those users aren't

63
00:03:43,859 --> 00:03:56,599
getting any security patches so a while

64
00:03:50,310 --> 00:03:58,919
ago in 2018 electron patched a CVE I

65
00:03:56,599 --> 00:04:03,179
conveniently named CVE

66
00:03:58,919 --> 00:04:05,629
2018 1 million and 6 and this was a

67
00:04:03,180 --> 00:04:10,290
remote code execution vulnerability that

68
00:04:05,629 --> 00:04:13,500
was affecting Windows and at the root of

69
00:04:10,290 --> 00:04:19,139
it was an API call named app dot set as

70
00:04:13,500 --> 00:04:21,449
default protocol client invoking that

71
00:04:19,139 --> 00:04:25,289
function app set as default protocol

72
00:04:21,449 --> 00:04:27,389
client would register your application

73
00:04:25,289 --> 00:04:32,099
as the default scheme handler for a

74
00:04:27,389 --> 00:04:35,159
particular URI scheme and you could use

75
00:04:32,099 --> 00:04:36,719
it for example to set your application

76
00:04:35,159 --> 00:04:40,230
as the default mail to handler

77
00:04:36,720 --> 00:04:42,930
for your email or you could use a custom

78
00:04:40,230 --> 00:04:48,990
scheme to support deep linking in your

79
00:04:42,930 --> 00:04:53,430
chat app that actually seems like a

80
00:04:48,990 --> 00:04:54,840
fairly common use case deep linking but

81
00:04:53,430 --> 00:04:59,040
the way they play actually does its

82
00:04:54,840 --> 00:05:01,469
trick is by looking up a tee in the

83
00:04:59,040 --> 00:05:04,140
Windows registry based on the scheme

84
00:05:01,470 --> 00:05:07,650
handler that's being registered or the

85
00:05:04,140 --> 00:05:09,810
scheme itself and then it sets a value

86
00:05:07,650 --> 00:05:12,929
to point to the executable that should

87
00:05:09,810 --> 00:05:18,630
be executed when one of those types of

88
00:05:12,930 --> 00:05:22,980
links is clicked in order to pass the

89
00:05:18,630 --> 00:05:27,270
actual uri to the the executable it uses

90
00:05:22,980 --> 00:05:30,510
a simple format string where here you

91
00:05:27,270 --> 00:05:34,010
have percentage one which would just end

92
00:05:30,510 --> 00:05:37,710
up end up being replaced with uri itself

93
00:05:34,010 --> 00:05:42,990
so that actually means that because it's

94
00:05:37,710 --> 00:05:44,640
sort of naive replacements if you

95
00:05:42,990 --> 00:05:49,470
include any special characters like

96
00:05:44,640 --> 00:05:51,150
double quotes or spaces in that URI you

97
00:05:49,470 --> 00:05:57,000
end up injecting additional command-line

98
00:05:51,150 --> 00:05:58,919
parameters a switch is what that

99
00:05:57,000 --> 00:06:00,720
actually entails for your application

100
00:05:58,919 --> 00:06:02,789
depends on the command lines which is

101
00:06:00,720 --> 00:06:06,330
your application supports but in the

102
00:06:02,790 --> 00:06:08,700
case of CDE 2018 one million and six it

103
00:06:06,330 --> 00:06:11,310
turned out that Chrome which is bundled

104
00:06:08,700 --> 00:06:13,050
with electrum natively supported

105
00:06:11,310 --> 00:06:15,990
launching arbitrary commands from the

106
00:06:13,050 --> 00:06:17,580
command line so you would have a remote

107
00:06:15,990 --> 00:06:22,919
code execution vulnerability simply by

108
00:06:17,580 --> 00:06:27,210
clicking a link in practice the way it

109
00:06:22,919 --> 00:06:30,740
would work you'd have crafted URI URI

110
00:06:27,210 --> 00:06:34,979
like this one which points to the

111
00:06:30,740 --> 00:06:38,900
vulnerable URI scheme and it contains a

112
00:06:34,979 --> 00:06:44,099
double quote space and the dash dash GPU

113
00:06:38,900 --> 00:06:47,510
launcher switch all that needs to happen

114
00:06:44,100 --> 00:06:49,760
is for the user to click on this link on

115
00:06:47,510 --> 00:06:51,170
on

116
00:06:49,760 --> 00:06:54,230
a machine that has the vulnerable

117
00:06:51,170 --> 00:06:57,190
application installed and you know

118
00:06:54,230 --> 00:07:03,890
electron just does the rest that happens

119
00:06:57,190 --> 00:07:13,300
so really simple this would obviously

120
00:07:03,890 --> 00:07:17,570
back patched already way back in 2018

121
00:07:13,300 --> 00:07:20,440
but the way electron decided to approach

122
00:07:17,570 --> 00:07:23,030
the patching was somewhat interesting

123
00:07:20,440 --> 00:07:26,090
the original patch was actually nothing

124
00:07:23,030 --> 00:07:28,010
more than a blacklist of all known

125
00:07:26,090 --> 00:07:31,760
command lines which is that chromium

126
00:07:28,010 --> 00:07:34,940
supported natively that was over

127
00:07:31,760 --> 00:07:37,159
thirteen hundred switches and it's just

128
00:07:34,940 --> 00:07:42,050
a list of those switches in the source

129
00:07:37,160 --> 00:07:44,840
code and that was obviously very easy to

130
00:07:42,050 --> 00:07:48,440
bypass there were plenty of bypasses and

131
00:07:44,840 --> 00:07:54,530
have been already and some have some

132
00:07:48,440 --> 00:07:59,020
have been found later let's look at some

133
00:07:54,530 --> 00:07:59,020
of those bypasses in just a moment

134
00:08:02,969 --> 00:08:09,849
just a second my slides froze yeah let's

135
00:08:08,050 --> 00:08:11,860
look at some of those in just a moment

136
00:08:09,849 --> 00:08:15,639
but before I get to the actual meat of

137
00:08:11,860 --> 00:08:17,710
this presentation I just want to credit

138
00:08:15,639 --> 00:08:22,539
some other folks who have done research

139
00:08:17,710 --> 00:08:25,479
in this area so Dorian SiC were probably

140
00:08:22,539 --> 00:08:31,019
the first ones to actually bypass CV

141
00:08:25,479 --> 00:08:33,760
2018 1 million and 6 they have a public

142
00:08:31,019 --> 00:08:36,940
write-up of it of the bypass on their

143
00:08:33,760 --> 00:08:39,279
blog they also published this tool

144
00:08:36,940 --> 00:08:43,779
called electronegativity that's

145
00:08:39,279 --> 00:08:49,029
available available also online it's

146
00:08:43,779 --> 00:08:51,550
open source there was also a very

147
00:08:49,029 --> 00:08:56,200
interesting talk by Thomas Shadwell at

148
00:08:51,550 --> 00:08:58,899
infiltrate 2019 he talked about modern

149
00:08:56,200 --> 00:09:00,880
desktop applications so the scope of

150
00:08:58,899 --> 00:09:03,730
that talk was a bit wider than mine is

151
00:09:00,880 --> 00:09:06,610
here but it's worth looking it's

152
00:09:03,730 --> 00:09:10,060
available on vimeo if you like to see it

153
00:09:06,610 --> 00:09:13,089
afterwards and then there's talk from

154
00:09:10,060 --> 00:09:14,949
Andrea's link from security fest 2016

155
00:09:13,089 --> 00:09:16,630
where he talked about hacking matter

156
00:09:14,949 --> 00:09:17,800
most which is actually actually one of

157
00:09:16,630 --> 00:09:20,459
the applications are this talking

158
00:09:17,800 --> 00:09:20,459
talking about

159
00:09:23,860 --> 00:09:31,510
anyway back to the matter at hand as it

160
00:09:28,210 --> 00:09:34,750
turns out in February 2019 when I

161
00:09:31,510 --> 00:09:36,550
started looking at these apps plenty of

162
00:09:34,750 --> 00:09:40,270
them were still vulnerable to something

163
00:09:36,550 --> 00:09:43,870
awfully similar to CV 28:28 in 1 million

164
00:09:40,270 --> 00:09:46,540
and six and what I have for you is three

165
00:09:43,870 --> 00:09:48,940
separate cases sort of examples

166
00:09:46,540 --> 00:09:52,660
two of them are specific to certain

167
00:09:48,940 --> 00:09:57,310
applications and one is more generic

168
00:09:52,660 --> 00:10:00,120
affecting electron as a whole so let's

169
00:09:57,310 --> 00:10:00,119
start from the top

170
00:10:00,900 --> 00:10:09,970
the first one is matter most matter most

171
00:10:05,620 --> 00:10:12,270
is a chat app sort of like slack but

172
00:10:09,970 --> 00:10:15,970
open source and self hosted and whatever

173
00:10:12,270 --> 00:10:19,900
and like slack it has a desktop client

174
00:10:15,970 --> 00:10:22,030
that's built on top of electron there

175
00:10:19,900 --> 00:10:27,400
were three things in that desktop client

176
00:10:22,030 --> 00:10:30,430
that led to RC when combined first of

177
00:10:27,400 --> 00:10:32,410
all the matter most desktop app has a

178
00:10:30,430 --> 00:10:36,540
command-line switch that allows you to

179
00:10:32,410 --> 00:10:39,550
specify a custom user data directory

180
00:10:36,540 --> 00:10:41,680
this is where the application stores all

181
00:10:39,550 --> 00:10:45,310
all its local data including

182
00:10:41,680 --> 00:10:47,530
configuration files and and anything

183
00:10:45,310 --> 00:10:50,349
that's stored locally there was no bug

184
00:10:47,530 --> 00:10:53,890
here but it's an important part of the

185
00:10:50,350 --> 00:10:56,980
export chain anyway secondly because

186
00:10:53,890 --> 00:10:59,949
we're talking about Windows here UNC

187
00:10:56,980 --> 00:11:03,070
paths are supported universal naming

188
00:10:59,950 --> 00:11:08,650
convention or UNC is just a different

189
00:11:03,070 --> 00:11:11,710
way of specifying file system parts but

190
00:11:08,650 --> 00:11:15,790
their twist to that which is that unlike

191
00:11:11,710 --> 00:11:21,870
local paths UNC supports network paths

192
00:11:15,790 --> 00:11:24,910
so SMB shares on remote servers and

193
00:11:21,870 --> 00:11:30,810
Microsoft even often refers to UNC

194
00:11:24,910 --> 00:11:33,040
process as network paths thirdly the

195
00:11:30,810 --> 00:11:37,609
application was loading configuration

196
00:11:33,040 --> 00:11:42,230
files in an insecure way so that

197
00:11:37,610 --> 00:11:44,000
you if you're able to to inject

198
00:11:42,230 --> 00:11:46,959
malicious stuff into your configuration

199
00:11:44,000 --> 00:11:49,519
files then you could gain code execution

200
00:11:46,959 --> 00:11:52,510
this was actually a bug and this has

201
00:11:49,519 --> 00:11:54,950
been fixed and matter most has also

202
00:11:52,510 --> 00:11:57,589
implemented some additional mitigation

203
00:11:54,950 --> 00:12:08,899
but I won't go into those in too much

204
00:11:57,589 --> 00:12:12,050
detail so these are screenshots from the

205
00:12:08,899 --> 00:12:15,589
source code of the matter most desktop

206
00:12:12,050 --> 00:12:20,930
clients these are from the same source

207
00:12:15,589 --> 00:12:23,480
file from a piece of code that loads a

208
00:12:20,930 --> 00:12:26,569
configuration file and tries to restore

209
00:12:23,480 --> 00:12:30,920
the options of a previously closed

210
00:12:26,570 --> 00:12:32,630
window so at the top you can see how

211
00:12:30,920 --> 00:12:36,250
it's accessing the file system and

212
00:12:32,630 --> 00:12:39,170
loading a bound info that JSON file and

213
00:12:36,250 --> 00:12:42,829
then parsing that using the JavaScript

214
00:12:39,170 --> 00:12:46,069
native JSON parser at the top at the

215
00:12:42,829 --> 00:12:48,529
bottom you can see how it's then passing

216
00:12:46,070 --> 00:12:52,940
that object directly to the browser

217
00:12:48,529 --> 00:12:55,220
window constructor there's no validation

218
00:12:52,940 --> 00:12:56,480
in between it's just being read from the

219
00:12:55,220 --> 00:12:58,699
file and then being passed to the

220
00:12:56,480 --> 00:13:00,560
constructor the idea here is to set the

221
00:12:58,699 --> 00:13:03,260
dimensions of a window that's been

222
00:13:00,560 --> 00:13:08,719
previously closed so that you can always

223
00:13:03,260 --> 00:13:11,089
have the same sized windows but if you

224
00:13:08,720 --> 00:13:12,800
look at the electron documentation this

225
00:13:11,089 --> 00:13:15,560
is from the browser window API

226
00:13:12,800 --> 00:13:19,819
documentation there's something that's

227
00:13:15,560 --> 00:13:21,979
rather concerning namely that the

228
00:13:19,820 --> 00:13:24,290
options parameter here which was just

229
00:13:21,980 --> 00:13:26,180
read from a file and then being passed

230
00:13:24,290 --> 00:13:29,029
into the constructor without any

231
00:13:26,180 --> 00:13:32,689
validation it supports plenty of other

232
00:13:29,029 --> 00:13:38,449
options besides just window width and

233
00:13:32,690 --> 00:13:42,890
height so for example there's web

234
00:13:38,449 --> 00:13:44,990
preferences and web preferences is an

235
00:13:42,890 --> 00:13:48,829
object that contains another property

236
00:13:44,990 --> 00:13:51,260
which is called preload and the preload

237
00:13:48,829 --> 00:13:51,469
property while the documentation for

238
00:13:51,260 --> 00:13:56,390
that

239
00:13:51,470 --> 00:13:59,990
says that any script that the preload

240
00:13:56,390 --> 00:14:02,900
property refers to is loaded

241
00:13:59,990 --> 00:14:07,150
automatically and executed which is sort

242
00:14:02,900 --> 00:14:10,900
of really bad but then it also has

243
00:14:07,150 --> 00:14:13,400
automatically access to all no jsap eyes

244
00:14:10,900 --> 00:14:14,240
regardless of your sandboxing settings

245
00:14:13,400 --> 00:14:17,060
or anything else

246
00:14:14,240 --> 00:14:20,710
so these preload scripts always have

247
00:14:17,060 --> 00:14:23,780
access to to the privilege shape the ice

248
00:14:20,710 --> 00:14:31,330
and nodejs means native code execution

249
00:14:23,780 --> 00:14:37,130
as well so to put it all together

250
00:14:31,330 --> 00:14:39,470
we started in we be crafted URI the URL

251
00:14:37,130 --> 00:14:42,320
contains a double quote space and then

252
00:14:39,470 --> 00:14:49,240
the injected command-line switch which

253
00:14:42,320 --> 00:14:54,020
is attached - data dir but then the

254
00:14:49,240 --> 00:14:57,980
value of the lease which refers to a UNC

255
00:14:54,020 --> 00:15:01,430
path on a remote server on a on an

256
00:14:57,980 --> 00:15:06,350
attacker controlled SMB share so when a

257
00:15:01,430 --> 00:15:08,359
user clicks on this link the application

258
00:15:06,350 --> 00:15:10,040
starts up and starts loading

259
00:15:08,360 --> 00:15:11,960
configuration files and writing

260
00:15:10,040 --> 00:15:14,000
configuration files that those aren't

261
00:15:11,960 --> 00:15:19,190
local those are actually on the network

262
00:15:14,000 --> 00:15:22,280
on someone else's SMB share and the

263
00:15:19,190 --> 00:15:25,430
boundary info Jason file is loaded the

264
00:15:22,280 --> 00:15:29,270
bouncing for file refers to a preload

265
00:15:25,430 --> 00:15:33,140
script named payload Egeus and that's

266
00:15:29,270 --> 00:15:36,760
automatically executed which means you

267
00:15:33,140 --> 00:15:36,760
know you just got owned

268
00:15:40,340 --> 00:15:49,310
the next app example number two I

269
00:15:44,920 --> 00:15:52,390
unfortunately can't name this one they

270
00:15:49,310 --> 00:15:55,520
didn't fix their vulnerabilities in time

271
00:15:52,390 --> 00:15:58,580
mainly because they're still using muon

272
00:15:55,520 --> 00:16:04,880
which is an unmaintained fork and it's a

273
00:15:58,580 --> 00:16:07,730
pain to migrate away from that so yeah I

274
00:16:04,880 --> 00:16:09,050
can't name the application but I still

275
00:16:07,730 --> 00:16:17,210
talk about the interesting technical

276
00:16:09,050 --> 00:16:22,609
details here so the attack starts with a

277
00:16:17,210 --> 00:16:25,130
fairly similar pattern the executable

278
00:16:22,610 --> 00:16:27,530
supports a command-line switch to

279
00:16:25,130 --> 00:16:31,939
specify the user data directory just

280
00:16:27,530 --> 00:16:34,900
like the previous app and it accepts UNC

281
00:16:31,940 --> 00:16:40,430
paths so you can specify a network path

282
00:16:34,900 --> 00:16:42,829
but what's different here is that there

283
00:16:40,430 --> 00:16:44,810
wasn't anything in the configuration

284
00:16:42,830 --> 00:16:47,870
files that could be used to trigger code

285
00:16:44,810 --> 00:16:48,680
execution directly so I had to come up

286
00:16:47,870 --> 00:16:54,530
with something else

287
00:16:48,680 --> 00:16:56,599
I turned out interesting was that the

288
00:16:54,530 --> 00:17:00,589
developers had made some assumptions

289
00:16:56,600 --> 00:17:03,980
related to how Windows processes local

290
00:17:00,589 --> 00:17:06,589
paths so Windows is fairly restrictive

291
00:17:03,980 --> 00:17:08,510
when it comes to file system paths you

292
00:17:06,589 --> 00:17:11,720
can't can't have too many special

293
00:17:08,510 --> 00:17:16,790
characters in directory names for

294
00:17:11,720 --> 00:17:21,079
example but when you have UNC paths you

295
00:17:16,790 --> 00:17:23,659
can have files that are somewhere remote

296
00:17:21,079 --> 00:17:27,050
and the remote server doesn't have to be

297
00:17:23,660 --> 00:17:30,320
a Windows so what if you have a Linux

298
00:17:27,050 --> 00:17:33,500
server that's naming files in a Linux

299
00:17:30,320 --> 00:17:35,570
way and then you have a Windows client

300
00:17:33,500 --> 00:17:38,870
that's loading those files and are so

301
00:17:35,570 --> 00:17:44,350
assuming that your files can't have any

302
00:17:38,870 --> 00:17:44,350
funny names that's where things go wrong

303
00:17:45,580 --> 00:17:57,699
so yeah suddenly the developers

304
00:17:49,570 --> 00:17:59,740
assumptions no longer held here's again

305
00:17:57,700 --> 00:18:04,540
a screenshot of the source code this is

306
00:17:59,740 --> 00:18:06,670
from the debugger I've had to alter it a

307
00:18:04,540 --> 00:18:10,000
little bit so that I wouldn't reveal the

308
00:18:06,670 --> 00:18:12,490
name of the application but it's pretty

309
00:18:10,000 --> 00:18:15,970
easy to spot where the actual injection

310
00:18:12,490 --> 00:18:18,460
here happens the code is calling

311
00:18:15,970 --> 00:18:20,980
PowerShell directly and then passing the

312
00:18:18,460 --> 00:18:25,420
user data directory into a PowerShell

313
00:18:20,980 --> 00:18:28,780
command as is without any validation but

314
00:18:25,420 --> 00:18:32,620
the interesting part is that before this

315
00:18:28,780 --> 00:18:35,160
code was executed there was there were

316
00:18:32,620 --> 00:18:40,149
file system operations happening locally

317
00:18:35,160 --> 00:18:44,560
that were using this path so if that

318
00:18:40,150 --> 00:18:50,500
path wasn't the valid part then the

319
00:18:44,560 --> 00:18:52,929
application would crash earlier on and

320
00:18:50,500 --> 00:18:56,260
that meant that you couldn't inject for

321
00:18:52,930 --> 00:18:59,170
example double quotes or the dollar

322
00:18:56,260 --> 00:19:02,770
symbol because those aren't valid as

323
00:18:59,170 --> 00:19:05,530
local path names but they are valid as

324
00:19:02,770 --> 00:19:11,800
UNC path names because UNC paths can

325
00:19:05,530 --> 00:19:17,340
refer to Linux servers so let's exploit

326
00:19:11,800 --> 00:19:21,700
this one again we have a crafted URI and

327
00:19:17,340 --> 00:19:23,770
we inject the user data path but now

328
00:19:21,700 --> 00:19:27,160
also the user data path contains an

329
00:19:23,770 --> 00:19:31,180
injection it's referring to a remote

330
00:19:27,160 --> 00:19:37,200
server and it contains a dollar symbol

331
00:19:31,180 --> 00:19:40,810
and parentheses and a character exe so

332
00:19:37,200 --> 00:19:43,300
when a user clicks on this link config

333
00:19:40,810 --> 00:19:47,290
files are being loaded I know written

334
00:19:43,300 --> 00:19:50,340
into but there's no actual injection

335
00:19:47,290 --> 00:19:50,340
there or anything like that

336
00:19:50,370 --> 00:19:55,989
only if it can't write the config files

337
00:19:53,530 --> 00:19:58,530
then the application crashes those sort

338
00:19:55,990 --> 00:20:00,830
of server still has to be there

339
00:19:58,530 --> 00:20:05,700
but there's no injection happening there

340
00:20:00,830 --> 00:20:08,970
instead later on the application does a

341
00:20:05,700 --> 00:20:16,080
separate call to PowerShell which then

342
00:20:08,970 --> 00:20:25,710
you know this happens so yeah be careful

343
00:20:16,080 --> 00:20:29,760
with UNC paths going forward case number

344
00:20:25,710 --> 00:20:34,890
three this one was a bigger problem

345
00:20:29,760 --> 00:20:36,390
because this is all of electron so it's

346
00:20:34,890 --> 00:20:38,550
fairly common convention for

347
00:20:36,390 --> 00:20:40,440
command-line utilities and everything

348
00:20:38,550 --> 00:20:46,649
that can be called from the command line

349
00:20:40,440 --> 00:20:50,430
to support this sort of - - syntax for

350
00:20:46,650 --> 00:20:52,920
separating or rather ending the

351
00:20:50,430 --> 00:20:55,320
processing of command-line switches so

352
00:20:52,920 --> 00:20:57,450
if you end your command with - - and

353
00:20:55,320 --> 00:21:00,060
space than anything you enter after that

354
00:20:57,450 --> 00:21:03,660
isn't considered a command-line switch

355
00:21:00,060 --> 00:21:08,240
and electron supports that supports that

356
00:21:03,660 --> 00:21:12,210
as well and actually one of the main

357
00:21:08,240 --> 00:21:16,380
workarounds mentioned by Electra and

358
00:21:12,210 --> 00:21:19,410
developers - as a workaround to CVD 2081

359
00:21:16,380 --> 00:21:22,200
1 million and 6 the official workaround

360
00:21:19,410 --> 00:21:24,990
was to include this double - in your

361
00:21:22,200 --> 00:21:27,600
invocation of the app set as default

362
00:21:24,990 --> 00:21:30,900
protocol client API that way you

363
00:21:27,600 --> 00:21:37,800
wouldn't allow an attacker to pass any

364
00:21:30,900 --> 00:21:43,260
additional parameters but because the

365
00:21:37,800 --> 00:21:47,190
original touch was based on comparing

366
00:21:43,260 --> 00:21:51,420
command-line switches a list of command

367
00:21:47,190 --> 00:21:55,140
lines which is against the invocation of

368
00:21:51,420 --> 00:21:58,980
the app it would also make sense to stop

369
00:21:55,140 --> 00:22:02,790
processing that blacklist once it found

370
00:21:58,980 --> 00:22:04,620
the once you found the double - that's

371
00:22:02,790 --> 00:22:07,290
supposed to end your processing of

372
00:22:04,620 --> 00:22:09,570
command-line switches so that's what

373
00:22:07,290 --> 00:22:11,830
they actually did the only problem was

374
00:22:09,570 --> 00:22:15,090
that well

375
00:22:11,830 --> 00:22:17,740
electron sort of supports those dashes

376
00:22:15,090 --> 00:22:20,800
because chromium supports those dashes

377
00:22:17,740 --> 00:22:24,280
but electron consists of chromium and

378
00:22:20,800 --> 00:22:28,750
nodejs and no js' didn't support those

379
00:22:24,280 --> 00:22:36,070
dashes so no js' parsing continued after

380
00:22:28,750 --> 00:22:39,100
the delimiter which meant that well bad

381
00:22:36,070 --> 00:22:41,409
things happened this is from the

382
00:22:39,100 --> 00:22:44,560
screenshot of the back list earlier on

383
00:22:41,410 --> 00:22:48,070
and you can see the blacklist

384
00:22:44,560 --> 00:22:52,330
starts with two very dangerous notes

385
00:22:48,070 --> 00:22:56,409
which is these two switches enable

386
00:22:52,330 --> 00:22:59,560
remote debugging so a remote attacker

387
00:22:56,410 --> 00:23:03,700
would be able to remotely enable remote

388
00:22:59,560 --> 00:23:12,639
debugging so yeah that's way too many

389
00:23:03,700 --> 00:23:16,000
remotes this was patched in electron 3.0

390
00:23:12,640 --> 00:23:23,800
and the patch was also back ported to

391
00:23:16,000 --> 00:23:26,320
two point something we decide thing

392
00:23:23,800 --> 00:23:31,149
about that is that electron doesn't

393
00:23:26,320 --> 00:23:35,320
mention effects in the 3.0 release notes

394
00:23:31,150 --> 00:23:40,960
at all it's actually tagged as no notes

395
00:23:35,320 --> 00:23:45,360
the release and the 2.0 point 9 release

396
00:23:40,960 --> 00:23:48,660
notes only mention this patch has

397
00:23:45,360 --> 00:23:53,260
something related to DNS rebinding which

398
00:23:48,660 --> 00:23:55,210
doesn't really make sense at all so it's

399
00:23:53,260 --> 00:24:00,160
not surprising that you'll still find

400
00:23:55,210 --> 00:24:05,170
these applications using 33.0 you know

401
00:24:00,160 --> 00:24:07,360
electron so yeah there's no public

402
00:24:05,170 --> 00:24:09,930
signal that would indicate that there's

403
00:24:07,360 --> 00:24:09,929
something wrong

404
00:24:10,880 --> 00:24:18,500
and yeah boy was disease eg exploits I

405
00:24:14,710 --> 00:24:21,220
went through the electron application

406
00:24:18,500 --> 00:24:23,120
directory they published this list of

407
00:24:21,220 --> 00:24:25,850
applications that are built on top of

408
00:24:23,120 --> 00:24:28,760
electron I went through that and looked

409
00:24:25,850 --> 00:24:32,659
at some of the more popular ones some of

410
00:24:28,760 --> 00:24:37,670
the more big-name ones I ended up with

411
00:24:32,660 --> 00:24:41,870
our Series in VK messenger in postman in

412
00:24:37,670 --> 00:24:45,110
the epic remain yet in hyper which is an

413
00:24:41,870 --> 00:24:51,949
election based terminal emulator and in

414
00:24:45,110 --> 00:24:56,020
missive which is an email app and by no

415
00:24:51,950 --> 00:24:56,020
means did I comb through everything so

416
00:24:57,130 --> 00:25:02,270
there's hundreds of apps in the

417
00:24:59,870 --> 00:25:09,560
application directory I only looked at

418
00:25:02,270 --> 00:25:11,810
maybe 20 of them and I found five apps

419
00:25:09,560 --> 00:25:14,290
that were vulnerable to this out of

420
00:25:11,810 --> 00:25:14,290
twenty

421
00:25:20,400 --> 00:25:25,510
for for one last time let's go through

422
00:25:23,110 --> 00:25:31,110
the exploit flow here's the crafted you

423
00:25:25,510 --> 00:25:35,020
arrived this one's for became messenger

424
00:25:31,110 --> 00:25:41,439
there's the double quote a space two

425
00:25:35,020 --> 00:25:45,370
dashes and then the inspects which we

426
00:25:41,440 --> 00:25:50,610
are binding to zero zero zero zero in

427
00:25:45,370 --> 00:25:54,010
order to make the debugger public and

428
00:25:50,610 --> 00:25:58,300
once you click on this the value of

429
00:25:54,010 --> 00:26:04,570
inspects gets passed to the no GAF

430
00:25:58,300 --> 00:26:07,270
debugger so that starts listening on TCP

431
00:26:04,570 --> 00:26:10,689
port five eight five eight which comes

432
00:26:07,270 --> 00:26:12,700
from the command line and just waiting

433
00:26:10,690 --> 00:26:15,660
for the connections to arrive the

434
00:26:12,700 --> 00:26:19,780
attacker who has a remote machine

435
00:26:15,660 --> 00:26:23,320
connects to the IP address of the victim

436
00:26:19,780 --> 00:26:29,200
and uses the chrome dev tools protocol

437
00:26:23,320 --> 00:26:31,710
to launch an arbitrary command it's just

438
00:26:29,200 --> 00:26:31,710
that simple

439
00:26:35,650 --> 00:26:40,490
now I have a couple of demos let's see

440
00:26:38,810 --> 00:26:42,820
if those work because this is a live

441
00:26:40,490 --> 00:26:42,820
demo

442
00:26:57,300 --> 00:27:07,560
I have them here so this is a Linux

443
00:27:04,620 --> 00:27:09,449
server or rather a representation of a

444
00:27:07,560 --> 00:27:12,929
Linux server virtual machine it's

445
00:27:09,450 --> 00:27:15,720
actually Kali Linux and then I have

446
00:27:12,930 --> 00:27:21,240
another virtual machine which is the

447
00:27:15,720 --> 00:27:25,830
Windows victim let's start off with the

448
00:27:21,240 --> 00:27:31,980
matter most exploit I have here my SMB

449
00:27:25,830 --> 00:27:34,830
configuration I'm setting defining a

450
00:27:31,980 --> 00:27:38,870
share here in the matter most directory

451
00:27:34,830 --> 00:27:38,870
making it public and making it writable

452
00:27:39,350 --> 00:27:50,340
I also have here if I look into the

453
00:27:44,390 --> 00:27:52,290
maximals directory if I look into the

454
00:27:50,340 --> 00:27:54,929
matter most type directory I have a

455
00:27:52,290 --> 00:28:01,350
balance Jason puncheon for JSON file and

456
00:27:54,930 --> 00:28:06,720
I have a payload file I can also look at

457
00:28:01,350 --> 00:28:11,340
the balancing for JSON file so you can

458
00:28:06,720 --> 00:28:16,470
see it's referring to the payload file

459
00:28:11,340 --> 00:28:19,620
and the payload is nothing complicated

460
00:28:16,470 --> 00:28:27,300
it's just requiring the child process

461
00:28:19,620 --> 00:28:31,020
and executing dot exe so the way

462
00:28:27,300 --> 00:28:34,860
this works is I have a malicious web

463
00:28:31,020 --> 00:28:39,600
page here on the victims machine it has

464
00:28:34,860 --> 00:28:43,800
a link a link pointing to a matter most

465
00:28:39,600 --> 00:28:45,919
URI which when I click on it edge will

466
00:28:43,800 --> 00:28:50,040
ask me if I want to open matter most

467
00:28:45,920 --> 00:28:54,740
sure I'm just trying to visit some chat

468
00:28:50,040 --> 00:28:58,860
window or whatever let's open that and

469
00:28:54,740 --> 00:29:02,730
it pops up the calculator in the

470
00:28:58,860 --> 00:29:04,350
background it's making a SMB call to the

471
00:29:02,730 --> 00:29:08,180
server and loading configuration files

472
00:29:04,350 --> 00:29:10,459
and then executing from there

473
00:29:08,180 --> 00:29:15,440
the victim would never know that

474
00:29:10,460 --> 00:29:23,060
anything like this happened the other

475
00:29:15,440 --> 00:29:27,290
demo I have is for VK messenger this one

476
00:29:23,060 --> 00:29:30,110
works a bit differently so the way this

477
00:29:27,290 --> 00:29:33,530
one works is I start with the link I

478
00:29:30,110 --> 00:29:40,040
click on the link first and launch VK

479
00:29:33,530 --> 00:29:42,200
messenger and now it's already silently

480
00:29:40,040 --> 00:29:47,870
in the background listening for incoming

481
00:29:42,200 --> 00:29:59,270
connections from my malicious server so

482
00:29:47,870 --> 00:30:03,729
let's let's make that happen I have here

483
00:29:59,270 --> 00:30:11,080
a tool which I've written I have node

484
00:30:03,730 --> 00:30:11,080
dev exit which takes as its parameters a

485
00:30:12,400 --> 00:30:22,610
domain name or rather a host name let's

486
00:30:18,200 --> 00:30:31,790
specify that and then a port and a

487
00:30:22,610 --> 00:30:38,629
payload and when I call but suddenly

488
00:30:31,790 --> 00:30:40,750
here B okay something's not working as

489
00:30:38,630 --> 00:30:40,750
expected

490
00:30:42,640 --> 00:30:46,180
demo effects

491
00:30:52,070 --> 00:30:56,979
let's try that again

492
00:31:03,310 --> 00:31:06,720
demo effect

493
00:31:08,150 --> 00:31:17,090
oh yes the hostname was wrong yeah five

494
00:31:14,690 --> 00:31:21,800
eight five eight and Kappa the exit now

495
00:31:17,090 --> 00:31:29,600
that should work suddenly we have the

496
00:31:21,800 --> 00:31:37,310
calculator popping up here so that's as

497
00:31:29,600 --> 00:31:45,340
simple as that now let's go back to

498
00:31:37,310 --> 00:31:45,340
these slides if we can somehow

499
00:31:55,190 --> 00:31:57,940
yes

500
00:32:17,150 --> 00:32:24,060
okay so you saw there was a command-line

501
00:32:20,940 --> 00:32:26,220
tool I was using that's actually just a

502
00:32:24,060 --> 00:32:28,520
simple wrapper for a chrome remote

503
00:32:26,220 --> 00:32:33,780
interface which is a publicly available

504
00:32:28,520 --> 00:32:35,520
client for the dev tools protocol you

505
00:32:33,780 --> 00:32:38,639
could obviously do the same thing using

506
00:32:35,520 --> 00:32:43,200
the dev tools integrated with the Chrome

507
00:32:38,640 --> 00:32:44,820
browser but using the command line is a

508
00:32:43,200 --> 00:32:48,660
bit quicker especially when you're

509
00:32:44,820 --> 00:32:52,290
testing multiple apps in a row the tool

510
00:32:48,660 --> 00:32:54,690
is available on github already so if you

511
00:32:52,290 --> 00:32:56,550
memorize the URL URL at the bottom of

512
00:32:54,690 --> 00:33:01,200
the screen you can actually go there and

513
00:32:56,550 --> 00:33:02,909
download it now but if you don't want to

514
00:33:01,200 --> 00:33:05,100
start memorizing that you can just

515
00:33:02,910 --> 00:33:08,220
remember eyes my username instead and

516
00:33:05,100 --> 00:33:10,620
I'll make the gist public after this

517
00:33:08,220 --> 00:33:14,090
talk it's private at the moment but I'll

518
00:33:10,620 --> 00:33:14,090
make it public after afterwards

519
00:33:20,590 --> 00:33:31,669
anyway my work obviously didn't end when

520
00:33:28,880 --> 00:33:32,810
I managed to hack all the apps that's

521
00:33:31,670 --> 00:33:35,870
not how it works

522
00:33:32,810 --> 00:33:38,389
someone had to fix those bugs and that

523
00:33:35,870 --> 00:33:41,709
meant coordinating disclosure and

524
00:33:38,390 --> 00:33:44,540
talking with vendors and you know I

525
00:33:41,710 --> 00:33:46,850
tried to find the easy way out and just

526
00:33:44,540 --> 00:33:50,389
that just ended up with me doing twice

527
00:33:46,850 --> 00:33:55,070
the amount of work here's a few lessons

528
00:33:50,390 --> 00:34:00,140
from that so I haven't been in contact

529
00:33:55,070 --> 00:34:04,189
with electron but they've done quite a

530
00:34:00,140 --> 00:34:06,830
bit sorry

531
00:34:04,190 --> 00:34:11,990
okay let's yeah let's go through this

532
00:34:06,830 --> 00:34:18,170
one first so as I mentioned all of this

533
00:34:11,989 --> 00:34:20,540
started in February 2000 19 I was

534
00:34:18,170 --> 00:34:23,480
casually poking at one of the apps when

535
00:34:20,540 --> 00:34:27,469
suddenly all hell broke loose and I had

536
00:34:23,480 --> 00:34:30,800
seven arsons on my hands disclosing all

537
00:34:27,469 --> 00:34:35,689
of those privately one by one would have

538
00:34:30,800 --> 00:34:39,530
been a huge effort especially when many

539
00:34:35,690 --> 00:34:42,020
vendors still today don't publish proper

540
00:34:39,530 --> 00:34:44,630
security conducts and don't you know

541
00:34:42,020 --> 00:34:47,750
even behave politely towards researchers

542
00:34:44,630 --> 00:34:50,270
I wanted to come up with some better

543
00:34:47,750 --> 00:34:54,460
strategy so the obvious solution was

544
00:34:50,270 --> 00:34:58,700
Trend Micro's zero day initiative they

545
00:34:54,460 --> 00:35:03,320
by research and reports vulnerabilities

546
00:34:58,700 --> 00:35:05,390
responsibly to vendors so that would

547
00:35:03,320 --> 00:35:09,460
allow me to have a single point of

548
00:35:05,390 --> 00:35:15,560
contact and let them take care of

549
00:35:09,460 --> 00:35:15,950
contacting the vendors so that's what I

550
00:35:15,560 --> 00:35:19,250
did

551
00:35:15,950 --> 00:35:21,740
if I connect contacted CDI and reported

552
00:35:19,250 --> 00:35:25,430
these two to CBI

553
00:35:21,740 --> 00:35:28,310
I submitted my reports near the end of

554
00:35:25,430 --> 00:35:33,169
February and just a couple of days later

555
00:35:28,310 --> 00:35:38,330
I got a response already it just wasn't

556
00:35:33,170 --> 00:35:40,820
quite what I had hoped for so without

557
00:35:38,330 --> 00:35:42,860
even looking at the exploits or the

558
00:35:40,820 --> 00:35:45,530
vulnerabilities GDI had already

559
00:35:42,860 --> 00:35:50,510
determined that they weren't interested

560
00:35:45,530 --> 00:35:52,190
in five out of the six apps they just

561
00:35:50,510 --> 00:35:56,920
didn't want any anything to do with

562
00:35:52,190 --> 00:35:56,920
those so they wouldn't buy those

563
00:35:57,430 --> 00:36:03,319
anyway the usual response was super

564
00:36:00,080 --> 00:36:06,049
quick but one app was still remaining

565
00:36:03,320 --> 00:36:08,480
but they didn't comment on they didn't

566
00:36:06,050 --> 00:36:10,280
say anything about being a messenger so

567
00:36:08,480 --> 00:36:15,080
apparently they were interested in that

568
00:36:10,280 --> 00:36:20,360
one unfortunately the process from there

569
00:36:15,080 --> 00:36:25,340
onwards was not as quick as the start

570
00:36:20,360 --> 00:36:28,520
had been so it was basically complete

571
00:36:25,340 --> 00:36:32,960
radio silence from zdi for the next

572
00:36:28,520 --> 00:36:35,210
three whole months what was more

573
00:36:32,960 --> 00:36:37,550
disappointing was the response I finally

574
00:36:35,210 --> 00:36:41,240
got so in in June

575
00:36:37,550 --> 00:36:43,250
GDI emailed me and told me that they had

576
00:36:41,240 --> 00:36:44,810
tested the VK messenger exploits and

577
00:36:43,250 --> 00:36:47,780
they had come to the conclusion that

578
00:36:44,810 --> 00:36:48,380
this doesn't work it's not a valid

579
00:36:47,780 --> 00:36:50,990
exploit

580
00:36:48,380 --> 00:36:54,370
it's not working and what had happened

581
00:36:50,990 --> 00:36:56,660
is that three months had gone by and

582
00:36:54,370 --> 00:36:57,950
became messenger had already upgraded

583
00:36:56,660 --> 00:37:02,270
the version of a lecture and they were

584
00:36:57,950 --> 00:37:04,009
using it was no longer exploitable CDI

585
00:37:02,270 --> 00:37:07,330
was testing the latest version and that

586
00:37:04,010 --> 00:37:07,330
had one ability anymore

587
00:37:08,140 --> 00:37:13,700
so since ZT I wasn't interested in any

588
00:37:11,720 --> 00:37:15,439
of my exploits I had to report them

589
00:37:13,700 --> 00:37:19,279
individually to all the vendors anyway

590
00:37:15,440 --> 00:37:21,800
and I had to retest everything because

591
00:37:19,280 --> 00:37:24,050
it had been so long since I originally

592
00:37:21,800 --> 00:37:28,730
found them that others might have six

593
00:37:24,050 --> 00:37:31,580
tears as well luckily VK wasn't the only

594
00:37:28,730 --> 00:37:34,160
only one who had implemented fixes so I

595
00:37:31,580 --> 00:37:35,269
didn't have to contact all six different

596
00:37:34,160 --> 00:37:37,219
vendors

597
00:37:35,269 --> 00:37:40,968
I just had to contact a couple of couple

598
00:37:37,219 --> 00:37:44,659
of them and they ended up with me

599
00:37:40,969 --> 00:37:47,239
working on one of those apps full-time

600
00:37:44,659 --> 00:37:50,569
as a security security professional

601
00:37:47,239 --> 00:37:52,989
product security engineer so all's well

602
00:37:50,569 --> 00:37:52,989
that ends well

603
00:37:56,709 --> 00:38:08,598
so since since 2018 since even 20 18

604
00:38:05,329 --> 00:38:10,809
months 1 million and 6 electron has done

605
00:38:08,599 --> 00:38:13,399
a whole bunch of things

606
00:38:10,809 --> 00:38:18,679
the original blacklist

607
00:38:13,399 --> 00:38:22,399
they implemented is well it's been

608
00:38:18,679 --> 00:38:26,659
updated and it's been updated again and

609
00:38:22,399 --> 00:38:28,999
now it's you know it's no longer 1300

610
00:38:26,659 --> 00:38:30,229
items it's zero items now they're no

611
00:38:28,999 --> 00:38:33,890
longer using the back listing of

612
00:38:30,229 --> 00:38:36,890
approach at all they've also twice

613
00:38:33,890 --> 00:38:41,629
changed the way they handle command

614
00:38:36,890 --> 00:38:44,179
lines which is the good thing is that

615
00:38:41,630 --> 00:38:50,839
I'm not currently aware of any any way

616
00:38:44,179 --> 00:38:53,659
to exploit the origin ability so I think

617
00:38:50,839 --> 00:38:56,089
they have it in sort of a good order at

618
00:38:53,659 --> 00:38:57,949
the moment the bad thing is that they

619
00:38:56,089 --> 00:39:01,729
still haven't published any advisories

620
00:38:57,949 --> 00:39:06,259
about this after CV 2018 1 million and 6

621
00:39:01,729 --> 00:39:08,928
and URI handlers are still being

622
00:39:06,259 --> 00:39:11,119
registered in the same way so they

623
00:39:08,929 --> 00:39:14,630
haven't addressed the root cause of the

624
00:39:11,119 --> 00:39:17,449
issue they've just changed the way

625
00:39:14,630 --> 00:39:19,899
they're sort of mitigating the issue on

626
00:39:17,449 --> 00:39:19,899
top of that

627
00:39:21,960 --> 00:39:26,550
but anyway developers still don't know

628
00:39:24,359 --> 00:39:31,049
that there was something wrong in the

629
00:39:26,550 --> 00:39:36,960
original touch Microsoft has also done

630
00:39:31,050 --> 00:39:39,450
some things so the major thing that you

631
00:39:36,960 --> 00:39:43,349
might notice that if is that if you try

632
00:39:39,450 --> 00:39:46,529
one of my exploits here on an up-to-date

633
00:39:43,349 --> 00:39:48,930
Windows 10 machine you can no longer

634
00:39:46,530 --> 00:39:51,359
open any of the malicious links from

635
00:39:48,930 --> 00:39:54,629
Internet Explorer or Microsoft edge

636
00:39:51,359 --> 00:39:58,640
because those no longer allow special

637
00:39:54,630 --> 00:40:03,119
characters in URLs instead they

638
00:39:58,640 --> 00:40:05,910
automatically silently escape percentage

639
00:40:03,119 --> 00:40:12,270
encode special characters so that for

640
00:40:05,910 --> 00:40:13,950
example space becomes percentage 20 you

641
00:40:12,270 --> 00:40:17,369
can still open those types of links from

642
00:40:13,950 --> 00:40:24,270
other apps though so so the windows

643
00:40:17,369 --> 00:40:25,920
patch isn't foolproof for the developers

644
00:40:24,270 --> 00:40:28,559
and security people who are probably

645
00:40:25,920 --> 00:40:31,829
here in the audience there's a couple of

646
00:40:28,559 --> 00:40:34,680
interesting takeaways from this so first

647
00:40:31,829 --> 00:40:38,520
of all the app got set as default

648
00:40:34,680 --> 00:40:40,710
protocol client is a very dangerous API

649
00:40:38,520 --> 00:40:42,750
and scheme handlers in general are a

650
00:40:40,710 --> 00:40:47,760
very dangerous attack surface it's

651
00:40:42,750 --> 00:40:49,440
difficult to even spot all the things

652
00:40:47,760 --> 00:40:52,319
that can go wrong with them

653
00:40:49,440 --> 00:40:55,530
and if you find find yourself using one

654
00:40:52,319 --> 00:40:57,900
of those or looking at the code base

655
00:40:55,530 --> 00:41:00,540
that does use one of those those you

656
00:40:57,900 --> 00:41:02,309
should probably think twice that he says

657
00:41:00,540 --> 00:41:04,950
this be something that really has to be

658
00:41:02,309 --> 00:41:06,540
here is it actually necessary and if

659
00:41:04,950 --> 00:41:14,220
it's necessary is it being used

660
00:41:06,540 --> 00:41:19,980
correctly secondly platform features

661
00:41:14,220 --> 00:41:22,410
like Windows support of UNC can have

662
00:41:19,980 --> 00:41:26,849
really unexpected side effects if you're

663
00:41:22,410 --> 00:41:29,670
not accounting for them even if you're

664
00:41:26,849 --> 00:41:32,220
working on a cross-platform application

665
00:41:29,670 --> 00:41:33,450
on the platform in ten independent

666
00:41:32,220 --> 00:41:35,609
framework

667
00:41:33,450 --> 00:41:37,290
you should also aim to know the

668
00:41:35,610 --> 00:41:40,470
platform you're actually shipping those

669
00:41:37,290 --> 00:41:43,160
applications on otherwise you might end

670
00:41:40,470 --> 00:41:47,669
up shooting yourself in the foot

671
00:41:43,160 --> 00:41:51,230
and finally electron has this bad habit

672
00:41:47,670 --> 00:41:53,820
of not publishing security issues and

673
00:41:51,230 --> 00:41:58,830
sufficiently informing the developers

674
00:41:53,820 --> 00:42:01,470
about them so it's critical to keep your

675
00:41:58,830 --> 00:42:04,020
frameworks up to date even if there's no

676
00:42:01,470 --> 00:42:09,180
publicly documented vulnerability in

677
00:42:04,020 --> 00:42:12,870
that framework since May electron has

678
00:42:09,180 --> 00:42:15,060
also adopted this 12-week release cycle

679
00:42:12,870 --> 00:42:18,150
whether release a new major version of

680
00:42:15,060 --> 00:42:20,430
electron every - every 12 12 weeks in

681
00:42:18,150 --> 00:42:26,340
order to keep up with six weeks cycle of

682
00:42:20,430 --> 00:42:29,009
chromium and so that means that because

683
00:42:26,340 --> 00:42:33,180
they only support the last three major

684
00:42:29,010 --> 00:42:35,820
releases if you're deploying an

685
00:42:33,180 --> 00:42:39,629
application now you're going to have to

686
00:42:35,820 --> 00:42:43,560
upgrade the framework in around eight

687
00:42:39,630 --> 00:42:45,890
months or you end up with an unsupported

688
00:42:43,560 --> 00:42:45,890
version

689
00:42:47,840 --> 00:42:52,750
that's all I had thanks for your time

690
00:42:53,230 --> 00:42:58,120
amazing thank you you have poured the

691
00:42:55,490 --> 00:42:58,120
presentation

