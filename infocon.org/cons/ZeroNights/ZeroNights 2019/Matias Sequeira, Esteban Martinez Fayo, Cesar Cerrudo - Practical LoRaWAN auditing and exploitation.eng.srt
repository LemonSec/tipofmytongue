1
00:00:06,190 --> 00:00:09,599
[Music]

2
00:00:12,580 --> 00:00:20,060
hello as it says there I'm going now to

3
00:00:17,510 --> 00:00:23,660
talk about hacking and auditing Lauren

4
00:00:20,060 --> 00:00:25,369
on networks first of all I want to think

5
00:00:23,660 --> 00:00:27,860
of organization for a cabin except

6
00:00:25,369 --> 00:00:30,050
disease research and I want also to

7
00:00:27,860 --> 00:00:32,479
mention that this research was made with

8
00:00:30,050 --> 00:00:37,070
self-serve cerrado and several medina

9
00:00:32,479 --> 00:00:41,030
fire who who worked for octave so let's

10
00:00:37,070 --> 00:00:43,879
start with the talk so now I'm going to

11
00:00:41,030 --> 00:00:47,269
introduce Laura one what Laura one it's

12
00:00:43,879 --> 00:00:51,349
an IOT protocol which is built on top of

13
00:00:47,269 --> 00:00:51,890
the Laura layer as we can see in that in

14
00:00:51,350 --> 00:00:54,289
that picture

15
00:00:51,890 --> 00:00:57,129
the loader layer is the physical layer

16
00:00:54,289 --> 00:01:00,109
and Laura one is like the mug layer so

17
00:00:57,129 --> 00:01:04,339
Laura itself has been like many benefits

18
00:01:00,109 --> 00:01:06,680
or advantages over its competitors first

19
00:01:04,339 --> 00:01:09,770
of all it's a low-power protocol and

20
00:01:06,680 --> 00:01:11,900
their implementations that like use

21
00:01:09,770 --> 00:01:14,920
we're devices used like two double-a

22
00:01:11,900 --> 00:01:18,829
batteries for a whole year for example

23
00:01:14,920 --> 00:01:21,799
another good feature is a high range it

24
00:01:18,829 --> 00:01:25,309
provides in series we can have like more

25
00:01:21,799 --> 00:01:29,210
or less 2.5 kilometres and in rural

26
00:01:25,310 --> 00:01:31,790
areas we have like more or less 10 to 15

27
00:01:29,210 --> 00:01:34,030
kilometers it will always depend on the

28
00:01:31,790 --> 00:01:36,560
outside we have between the devices and

29
00:01:34,030 --> 00:01:42,439
the antennas and of course there is a

30
00:01:36,560 --> 00:01:44,390
record now of 70 kilometers another cool

31
00:01:42,439 --> 00:01:47,869
feature and this is important is that we

32
00:01:44,390 --> 00:01:51,380
don't need a license to use laura1 the I

33
00:01:47,869 --> 00:01:54,649
mean the RF spectrum so we don't need to

34
00:01:51,380 --> 00:01:57,710
pay to choose Laura one nor as a permit

35
00:01:54,649 --> 00:02:00,439
for example and the only downside of

36
00:01:57,710 --> 00:02:05,298
using Laura one is the one we can see

37
00:02:00,439 --> 00:02:07,100
there so with that data rate this is not

38
00:02:05,299 --> 00:02:13,430
a suitable technology for using for

39
00:02:07,100 --> 00:02:15,650
multimedia implementation for example so

40
00:02:13,430 --> 00:02:18,260
there we have like a picture of the

41
00:02:15,650 --> 00:02:19,819
basic infrastructure of Laura one at

42
00:02:18,260 --> 00:02:22,670
first we have like the devices which

43
00:02:19,819 --> 00:02:25,190
which send messages back and forth

44
00:02:22,670 --> 00:02:28,130
between the network server then we have

45
00:02:25,190 --> 00:02:31,010
the the antennas which in laura1 are

46
00:02:28,130 --> 00:02:34,160
called Edwards here we have one this is

47
00:02:31,010 --> 00:02:37,010
a semi-professional gateway which

48
00:02:34,160 --> 00:02:40,760
gateways acts as a bridge between the

49
00:02:37,010 --> 00:02:42,590
Laura chronology and a tcp/ip stack then

50
00:02:40,760 --> 00:02:43,730
we have a network server which is in

51
00:02:42,590 --> 00:02:47,900
charge of the authentication

52
00:02:43,730 --> 00:02:50,530
authorization the network management and

53
00:02:47,900 --> 00:02:52,840
so on and finally we have like the

54
00:02:50,530 --> 00:02:56,480
applications which are defined by the

55
00:02:52,840 --> 00:03:01,489
implementation itself so now I'm going

56
00:02:56,480 --> 00:03:03,829
to comment a few I'm going to comment

57
00:03:01,489 --> 00:03:06,380
about the background of laura1 nowadays

58
00:03:03,830 --> 00:03:08,950
we have like more than a career on

59
00:03:06,380 --> 00:03:11,060
network operators which include like

60
00:03:08,950 --> 00:03:16,160
telecommunication companies service

61
00:03:11,060 --> 00:03:19,090
providers and so on more companies last

62
00:03:16,160 --> 00:03:23,840
year we had a 60 percent growth this

63
00:03:19,090 --> 00:03:26,200
implementation and implementation in

64
00:03:23,840 --> 00:03:29,510
Brazil last year they deployed like

65
00:03:26,200 --> 00:03:32,238
400,000 devices by the end of this year

66
00:03:29,510 --> 00:03:35,450
they're thinking deploying like 2

67
00:03:32,239 --> 00:03:37,120
million of them and there is another big

68
00:03:35,450 --> 00:03:39,890
implementation in France for example

69
00:03:37,120 --> 00:03:43,310
where they implemented for smart meter

70
00:03:39,890 --> 00:03:45,130
for water in particular it was a

71
00:03:43,310 --> 00:03:47,720
partnership with the orange and

72
00:03:45,130 --> 00:03:52,730
telecommunication company that for the

73
00:03:47,720 --> 00:03:54,560
cell phones we know and ok so we know

74
00:03:52,730 --> 00:04:01,190
this we have laura1 in more than a

75
00:03:54,560 --> 00:04:03,680
hundred countries there is also a lower

76
00:04:01,190 --> 00:04:05,989
alliance which is intership for example

77
00:04:03,680 --> 00:04:08,690
in case in the protocol like improving

78
00:04:05,989 --> 00:04:12,290
it and that this Laura Lyon is composed

79
00:04:08,690 --> 00:04:14,840
by manufacturers vendors and developers

80
00:04:12,290 --> 00:04:18,168
and these telecommunication companies

81
00:04:14,840 --> 00:04:20,950
and many other members of the Laura one

82
00:04:18,168 --> 00:04:25,820
community so we have like more than

83
00:04:20,950 --> 00:04:28,310
65,000 developers and nowadays we have

84
00:04:25,820 --> 00:04:32,360
like more or less 80 million devices

85
00:04:28,310 --> 00:04:36,250
deploying in more than 10k Laura violent

86
00:04:32,360 --> 00:04:36,250
works so

87
00:04:36,760 --> 00:04:43,969
projection thought for the year 2021

88
00:04:40,190 --> 00:04:46,400
it is thought to be like deployed more

89
00:04:43,970 --> 00:04:49,310
or less ten million devices per year

90
00:04:46,400 --> 00:04:52,729
starting from from Nadia and there we

91
00:04:49,310 --> 00:04:54,979
have an image of the Laura Lyons which

92
00:04:52,729 --> 00:04:57,500
we can see it was started by IBM and

93
00:04:54,979 --> 00:05:00,080
CENTAC which I didn't mention something

94
00:04:57,500 --> 00:05:03,470
is the the company that developed Laura

95
00:05:00,080 --> 00:05:05,539
Laura is a proprietary protocol but its

96
00:05:03,470 --> 00:05:08,150
use is not proprietary I mean we can

97
00:05:05,540 --> 00:05:10,490
just use a gateway and we don't have to

98
00:05:08,150 --> 00:05:14,120
pay a license to to use it and nowadays

99
00:05:10,490 --> 00:05:18,440
these Laura Lyons is composed by many

100
00:05:14,120 --> 00:05:21,860
companies most of them very important as

101
00:05:18,440 --> 00:05:25,039
we can see in the picture so now let's

102
00:05:21,860 --> 00:05:27,289
go to to the most important I'm going to

103
00:05:25,039 --> 00:05:30,199
talk about the security features of

104
00:05:27,289 --> 00:05:32,479
Laura one and before starting I want to

105
00:05:30,199 --> 00:05:34,940
mention that it's in its version once

106
00:05:32,479 --> 00:05:38,090
she Rafi nowadays there is an uber one

107
00:05:34,940 --> 00:05:39,889
which I have a slide for that but now

108
00:05:38,090 --> 00:05:45,010
let's focus on this version which is

109
00:05:39,889 --> 00:05:46,880
nowadays a most deployed so the first

110
00:05:45,010 --> 00:05:49,610
security feature Allah will have is

111
00:05:46,880 --> 00:05:51,950
counters for messages for both uplink

112
00:05:49,610 --> 00:05:54,080
and downlink traffic when I say I'll

113
00:05:51,950 --> 00:05:56,440
uplink is the traffic which is sent from

114
00:05:54,080 --> 00:05:58,789
devices to the network server and

115
00:05:56,440 --> 00:06:01,910
downlink is the other thing these

116
00:05:58,789 --> 00:06:04,190
counters are of 16 bits which goes from

117
00:06:01,910 --> 00:06:06,680
0 to I'm in the counter guv

118
00:06:04,190 --> 00:06:10,280
front zero to sixty five thousand more

119
00:06:06,680 --> 00:06:14,330
or less and once the overflow they are

120
00:06:10,280 --> 00:06:16,070
reset to zero another security feature

121
00:06:14,330 --> 00:06:21,260
which is optional is the possibility to

122
00:06:16,070 --> 00:06:23,990
confirm messages sent by devices now we

123
00:06:21,260 --> 00:06:26,740
have this the feature which is the

124
00:06:23,990 --> 00:06:32,270
internet control that is provided to

125
00:06:26,740 --> 00:06:36,620
form messages we can see there that for

126
00:06:32,270 --> 00:06:39,039
internet control we we have this session

127
00:06:36,620 --> 00:06:41,539
key which is the network session key and

128
00:06:39,039 --> 00:06:43,820
you should know that we have internet

129
00:06:41,539 --> 00:06:45,710
control only between devices and there

130
00:06:43,820 --> 00:06:47,330
were several Laura one doesn't define

131
00:06:45,710 --> 00:06:49,008
integrity control between the network

132
00:06:47,330 --> 00:06:51,878
server and application

133
00:06:49,009 --> 00:06:54,650
we later see that it derives into a

134
00:06:51,879 --> 00:06:57,050
vulnerability so another cool feature

135
00:06:54,650 --> 00:06:59,719
which is also the ways of the security

136
00:06:57,050 --> 00:07:01,999
in laura1 is it is the encryption of

137
00:06:59,719 --> 00:07:04,339
messages and the encryption is made

138
00:07:01,999 --> 00:07:07,249
between devices and the application of

139
00:07:04,339 --> 00:07:08,839
the user and this is done with another

140
00:07:07,249 --> 00:07:14,719
session key which is called the

141
00:07:08,839 --> 00:07:17,719
obsession key so the way this session

142
00:07:14,719 --> 00:07:20,659
keys are derived or retrieved it depends

143
00:07:17,719 --> 00:07:24,439
on the on the activation method that was

144
00:07:20,659 --> 00:07:27,379
chosen for each device laura1 defines or

145
00:07:24,439 --> 00:07:30,529
provides like to add activation methods

146
00:07:27,379 --> 00:07:32,719
one is VP which stands for activation by

147
00:07:30,529 --> 00:07:39,469
personalization and the other one is

148
00:07:32,719 --> 00:07:41,659
over deactivation so ABP as I mention is

149
00:07:39,469 --> 00:07:44,479
activation by personalization is the

150
00:07:41,659 --> 00:07:47,180
easiest one it only requires two car

151
00:07:44,479 --> 00:07:48,979
code the session keys into devices into

152
00:07:47,180 --> 00:07:53,899
the devices and of course into the

153
00:07:48,979 --> 00:07:56,058
network server - it's a beeping

154
00:07:53,899 --> 00:07:59,089
activation method is not suitable for

155
00:07:56,059 --> 00:08:02,889
productive environments it's not a good

156
00:07:59,089 --> 00:08:06,439
practice to to implement a bb-because

157
00:08:02,889 --> 00:08:08,120
the same we'll see later that if we use

158
00:08:06,439 --> 00:08:09,800
the same session keys throughout the

159
00:08:08,120 --> 00:08:11,629
whole life of the device

160
00:08:09,800 --> 00:08:13,789
we'll be repeating the same

161
00:08:11,629 --> 00:08:18,339
cryptographic blocks and we don't want

162
00:08:13,789 --> 00:08:22,459
that so on the other hand we have like

163
00:08:18,339 --> 00:08:26,180
over there activation and in this method

164
00:08:22,459 --> 00:08:29,059
session keys are generated dynamically

165
00:08:26,180 --> 00:08:34,360
each the device each time the devices

166
00:08:29,059 --> 00:08:37,639
are reset so and this session keys are

167
00:08:34,360 --> 00:08:39,949
retrieved by a procedure which is called

168
00:08:37,639 --> 00:08:42,289
this joint procedure which we can see as

169
00:08:39,948 --> 00:08:45,439
a handshake between the between the

170
00:08:42,289 --> 00:08:47,630
device and another server and the ways

171
00:08:45,440 --> 00:08:49,970
of this joint procedure is the AB key

172
00:08:47,630 --> 00:08:52,040
and this key is the one that scar coded

173
00:08:49,970 --> 00:08:54,680
into the device and into the network

174
00:08:52,040 --> 00:08:57,920
server and session keys are derived

175
00:08:54,680 --> 00:09:00,290
using this app team so the same

176
00:08:57,920 --> 00:09:02,870
procedure is started by the device as we

177
00:09:00,290 --> 00:09:06,230
can see there which sends a on request

178
00:09:02,870 --> 00:09:09,020
message well it travel many data but the

179
00:09:06,230 --> 00:09:12,640
most important and are the ones show

180
00:09:09,020 --> 00:09:15,170
show here one is the Device Identifier

181
00:09:12,640 --> 00:09:19,220
and the other one is the DEP knowns

182
00:09:15,170 --> 00:09:22,459
which knows means never used one so

183
00:09:19,220 --> 00:09:25,190
these DEP known C sub is used to avoid

184
00:09:22,460 --> 00:09:28,970
replay attacks for example it's a random

185
00:09:25,190 --> 00:09:32,450
number that's generated once per person

186
00:09:28,970 --> 00:09:35,960
so once the the the network server

187
00:09:32,450 --> 00:09:37,940
receives this message it first of all it

188
00:09:35,960 --> 00:09:40,040
checks that the device is properly part

189
00:09:37,940 --> 00:09:43,490
of the Laurent Network and so on and

190
00:09:40,040 --> 00:09:48,020
then it replies back with a shown accept

191
00:09:43,490 --> 00:09:50,990
message and this one accept message we

192
00:09:48,020 --> 00:09:53,779
have like many data to but the most

193
00:09:50,990 --> 00:09:56,270
important are this one is the device

194
00:09:53,779 --> 00:09:58,850
address which is an identifier that the

195
00:09:56,270 --> 00:10:01,670
device will use throughout the whole

196
00:09:58,850 --> 00:10:05,600
session I mean while the session keys

197
00:10:01,670 --> 00:10:08,060
are still valid the other one is the app

198
00:10:05,600 --> 00:10:11,720
nodes which is the same as the DEP nodes

199
00:10:08,060 --> 00:10:14,329
but this one is generated by the by the

200
00:10:11,720 --> 00:10:16,610
network server and the last one is an

201
00:10:14,330 --> 00:10:19,670
Edward NT fire which is an identifier

202
00:10:16,610 --> 00:10:21,620
but by all the devices across the Dell

203
00:10:19,670 --> 00:10:25,040
or even at work and this is important

204
00:10:21,620 --> 00:10:28,160
that this message is encrypted using the

205
00:10:25,040 --> 00:10:31,250
app team so if we sniff for example or

206
00:10:28,160 --> 00:10:35,329
seanix a packet of India will see only a

207
00:10:31,250 --> 00:10:37,700
chunk of encrypted data so once these

208
00:10:35,330 --> 00:10:40,010
these two messages are exchanged between

209
00:10:37,700 --> 00:10:41,390
the device and the world server now both

210
00:10:40,010 --> 00:10:43,310
they can derive the session keys

211
00:10:41,390 --> 00:10:46,279
properly and once they derive the

212
00:10:43,310 --> 00:10:52,069
session keys they can start exchanging

213
00:10:46,279 --> 00:10:53,779
messages between each other now I'm

214
00:10:52,070 --> 00:10:56,660
going to explain a little bit more about

215
00:10:53,779 --> 00:10:58,160
the integrity and the confidentiality in

216
00:10:56,660 --> 00:11:01,459
laura1 which are the base of each

217
00:10:58,160 --> 00:11:03,050
security so today I mention that we have

218
00:11:01,459 --> 00:11:06,619
in charity between the device and

219
00:11:03,050 --> 00:11:08,900
anniversary so the way the internet is

220
00:11:06,620 --> 00:11:10,490
achieved is by appending message

221
00:11:08,900 --> 00:11:14,449
integrity code at the end of each

222
00:11:10,490 --> 00:11:16,050
message and to like compute this this

223
00:11:14,450 --> 00:11:18,390
make

224
00:11:16,050 --> 00:11:24,510
we have like two big steps the first one

225
00:11:18,390 --> 00:11:29,010
is to compute a cache in doing a YES on

226
00:11:24,510 --> 00:11:32,310
Korean 20 on inseam and a hobby and 28

227
00:11:29,010 --> 00:11:35,100
inseam at mold taking like the whole lot

228
00:11:32,310 --> 00:11:37,109
of one pocket and encrypting it with the

229
00:11:35,100 --> 00:11:40,589
network session key which we should

230
00:11:37,110 --> 00:11:43,829
remember that's used for integrity so

231
00:11:40,589 --> 00:11:45,990
once we have this hash we only take the

232
00:11:43,829 --> 00:11:50,540
first four bytes and we append it to to

233
00:11:45,990 --> 00:11:54,720
the to the message that we are we could

234
00:11:50,540 --> 00:11:57,390
meet we are we are computing so for the

235
00:11:54,720 --> 00:11:59,850
confidentiality today I mention that we

236
00:11:57,390 --> 00:12:02,220
have like end-to-end encryption between

237
00:11:59,850 --> 00:12:04,380
the device and and the application of

238
00:12:02,220 --> 00:12:07,920
the user what I didn't mention is that

239
00:12:04,380 --> 00:12:10,620
only the data payload of the messages is

240
00:12:07,920 --> 00:12:13,800
the one that's encrypted so the rest of

241
00:12:10,620 --> 00:12:17,160
the laura1 headers are sent in in plain

242
00:12:13,800 --> 00:12:17,719
text but that's not a problem for a

243
00:12:17,160 --> 00:12:20,579
moment

244
00:12:17,720 --> 00:12:23,339
so for come for doing the encryption we

245
00:12:20,579 --> 00:12:27,000
have like also like two big steps the

246
00:12:23,339 --> 00:12:29,760
first one is to create fixed polar bytes

247
00:12:27,000 --> 00:12:33,779
plus the counter of the message that we

248
00:12:29,760 --> 00:12:36,620
are signing with the obsession key the

249
00:12:33,779 --> 00:12:41,000
one that's intended to be used for

250
00:12:36,620 --> 00:12:43,950
confidentiality so the result of this

251
00:12:41,000 --> 00:12:48,630
comment is calculation is the is let's

252
00:12:43,950 --> 00:12:52,170
say an S block which is now used in an

253
00:12:48,630 --> 00:12:54,959
XOR operation with the data that we are

254
00:12:52,170 --> 00:12:57,510
signing the the with the data that we

255
00:12:54,959 --> 00:13:01,349
are encrypting and in order to get the

256
00:12:57,510 --> 00:13:05,790
cipher text and I want you to remind you

257
00:13:01,350 --> 00:13:08,040
I want you to remind of it that we have

258
00:13:05,790 --> 00:13:10,680
an X block with depend directly on the

259
00:13:08,040 --> 00:13:14,310
on the counter and on the application

260
00:13:10,680 --> 00:13:16,529
session key and this s block is used to

261
00:13:14,310 --> 00:13:18,420
cipher the text because now I'm going to

262
00:13:16,529 --> 00:13:19,439
speak about the vulnerabilities that

263
00:13:18,420 --> 00:13:21,209
were found

264
00:13:19,440 --> 00:13:24,630
there's plenty of material on the

265
00:13:21,209 --> 00:13:27,839
internet and we'll see that this this

266
00:13:24,630 --> 00:13:29,439
the the use of this s block may derive

267
00:13:27,839 --> 00:13:31,389
into upon our ability

268
00:13:29,440 --> 00:13:34,120
so the first of all foreign abilities

269
00:13:31,389 --> 00:13:36,940
that we do have is a replay attack and

270
00:13:34,120 --> 00:13:39,569
this is this vulnerability is done in

271
00:13:36,940 --> 00:13:41,470
the scenarios where we have a device

272
00:13:39,569 --> 00:13:44,050
which counter

273
00:13:41,470 --> 00:13:47,680
whose counter was overflowing and was

274
00:13:44,050 --> 00:13:49,300
reset to zero and in that moment let's

275
00:13:47,680 --> 00:13:52,388
suppose that the device doesn't

276
00:13:49,300 --> 00:13:54,310
regenerate the session keys so if the

277
00:13:52,389 --> 00:13:57,240
device doesn't regenerate the session

278
00:13:54,310 --> 00:13:59,800
keys will be reusing the same as vlog

279
00:13:57,240 --> 00:14:02,379
which you should remember that depends

280
00:13:59,800 --> 00:14:04,599
on the app app session key and on the

281
00:14:02,379 --> 00:14:07,509
counter so the counter is going to be

282
00:14:04,600 --> 00:14:11,470
reused like from 0 to 65 south and again

283
00:14:07,509 --> 00:14:14,470
and the the up key the obsession key

284
00:14:11,470 --> 00:14:17,800
remains the same so we will be reusing

285
00:14:14,470 --> 00:14:19,629
the same as block so this allows an

286
00:14:17,800 --> 00:14:22,990
attacker that could have captured a

287
00:14:19,629 --> 00:14:25,569
bunch of messages to replay one of them

288
00:14:22,990 --> 00:14:27,939
which would take like two effects on the

289
00:14:25,569 --> 00:14:30,009
network server the first one is at the

290
00:14:27,939 --> 00:14:33,129
inner doors nanniversary would be

291
00:14:30,009 --> 00:14:35,560
accepting and previous data as if it

292
00:14:33,129 --> 00:14:38,079
were an ID like now because it has a

293
00:14:35,560 --> 00:14:40,180
bollock crypto and the other effect it

294
00:14:38,079 --> 00:14:42,250
will it will check will be a denial of

295
00:14:40,180 --> 00:14:45,519
service into the device and this is

296
00:14:42,250 --> 00:14:48,720
because a definition of laura1 which

297
00:14:45,519 --> 00:14:52,300
says that network service should only

298
00:14:48,720 --> 00:14:54,430
must only accept messages with a higher

299
00:14:52,300 --> 00:14:57,000
counter than the last message that was

300
00:14:54,430 --> 00:14:59,500
received so putting this in practice

301
00:14:57,000 --> 00:15:03,670
let's suppose that we have a device with

302
00:14:59,500 --> 00:15:07,569
the counter number 10 we are we as

303
00:15:03,670 --> 00:15:08,769
attackers we have capture a message with

304
00:15:07,569 --> 00:15:12,069
the counter America read

305
00:15:08,769 --> 00:15:15,220
so we now replay this message and the

306
00:15:12,069 --> 00:15:18,250
device now we have to send like 90 more

307
00:15:15,220 --> 00:15:23,019
messages until the server restart to to

308
00:15:18,250 --> 00:15:25,839
accept messages from the device another

309
00:15:23,019 --> 00:15:28,059
vulnerability with which is derived or

310
00:15:25,839 --> 00:15:31,959
related to the same problem that session

311
00:15:28,059 --> 00:15:35,649
keys are originated in when the counter

312
00:15:31,959 --> 00:15:38,649
is reset is eavesdropping which allows

313
00:15:35,649 --> 00:15:40,449
an attacker that has captured a bunch of

314
00:15:38,649 --> 00:15:43,810
messages and has a little bit of

315
00:15:40,449 --> 00:15:46,540
knowledge on the application payload

316
00:15:43,810 --> 00:15:49,498
to start to guess certain bits and thus

317
00:15:46,540 --> 00:15:52,329
to decrypt the whole application payload

318
00:15:49,499 --> 00:15:54,069
so the third Bernal ability is a bit

319
00:15:52,329 --> 00:15:56,319
flipping which is related to what I

320
00:15:54,069 --> 00:15:58,269
mentioned today that laura1 doesn't

321
00:15:56,319 --> 00:16:01,779
define integrity between the network

322
00:15:58,269 --> 00:16:05,199
server and the app and the application

323
00:16:01,779 --> 00:16:08,019
of the user so supposing that we don't

324
00:16:05,199 --> 00:16:10,748
have in I mean that the user didn't

325
00:16:08,019 --> 00:16:12,699
implemented other internetting method

326
00:16:10,749 --> 00:16:14,949
between the network server and the

327
00:16:12,699 --> 00:16:17,378
application and supposing that we have

328
00:16:14,949 --> 00:16:20,589
an attacker that has access to that

329
00:16:17,379 --> 00:16:23,470
channel she would be able for example to

330
00:16:20,589 --> 00:16:25,809
flip certain bits which at the Krypton

331
00:16:23,470 --> 00:16:28,689
time will be unnoticed by the end-user

332
00:16:25,809 --> 00:16:30,969
and that will be the Krypton incorrect

333
00:16:28,689 --> 00:16:34,930
data different from the one that was

334
00:16:30,970 --> 00:16:39,040
formerly sent by the device and the last

335
00:16:34,930 --> 00:16:41,050
vulnerability for this version is the

336
00:16:39,040 --> 00:16:45,459
possibility to spoof acknowledge

337
00:16:41,050 --> 00:16:48,128
messages and this is because these

338
00:16:45,459 --> 00:16:51,339
messages don't specify which message

339
00:16:48,129 --> 00:16:54,209
they are confirming so the attacker

340
00:16:51,339 --> 00:16:56,740
would come only to capture at least one

341
00:16:54,209 --> 00:16:59,829
acknowledged message and could start to

342
00:16:56,740 --> 00:17:03,899
replace so two devices and thus it will

343
00:16:59,829 --> 00:17:03,899
cause denial of service to two devices

344
00:17:04,919 --> 00:17:13,899
so until here I've been talking about

345
00:17:10,020 --> 00:17:16,780
lure one is false on 1:03 nowadays we

346
00:17:13,898 --> 00:17:20,289
have this version which is laura1 1.1 as

347
00:17:16,780 --> 00:17:23,230
we can see there the base infrastructure

348
00:17:20,289 --> 00:17:25,439
has like many other components than than

349
00:17:23,230 --> 00:17:27,909
the version I've been talking about for

350
00:17:25,439 --> 00:17:30,820
example we have this joint several whose

351
00:17:27,909 --> 00:17:32,830
responsibility now is to derive the

352
00:17:30,820 --> 00:17:35,408
session keys instead of doing so the

353
00:17:32,830 --> 00:17:38,110
session server for example instead of

354
00:17:35,409 --> 00:17:40,750
having one root key which instead of

355
00:17:38,110 --> 00:17:44,080
having the up key we have like two good

356
00:17:40,750 --> 00:17:47,470
kids now instead of having two session

357
00:17:44,080 --> 00:17:49,299
keys we have six of them now so the

358
00:17:47,470 --> 00:17:52,059
security in this version was pretty much

359
00:17:49,299 --> 00:17:53,889
in case it's pretty good their

360
00:17:52,059 --> 00:17:55,809
vulnerabilities I mentioned later were

361
00:17:53,890 --> 00:17:57,700
pretty much mitigated I think that three

362
00:17:55,809 --> 00:18:01,690
of them were like fully meta

363
00:17:57,700 --> 00:18:03,460
but there's a problem and it's not with

364
00:18:01,690 --> 00:18:06,129
the protocol itself is with the

365
00:18:03,460 --> 00:18:08,700
environment is that the vendors aren't

366
00:18:06,129 --> 00:18:11,350
still embracing this this new version

367
00:18:08,700 --> 00:18:13,720
aren't still implementing so yeah we

368
00:18:11,350 --> 00:18:17,139
have a pretty cool secure version of

369
00:18:13,720 --> 00:18:19,870
laura1 which is not being deployed so

370
00:18:17,139 --> 00:18:22,269
now I'm going we are going to we are

371
00:18:19,870 --> 00:18:29,580
starting to get into the what was our

372
00:18:22,269 --> 00:18:33,490
research what we most find is that

373
00:18:29,580 --> 00:18:36,850
usually implementations have a poor key

374
00:18:33,490 --> 00:18:39,309
management I mean the up key is that I

375
00:18:36,850 --> 00:18:42,279
showed today that they derive into the

376
00:18:39,309 --> 00:18:47,470
session keys we have like many problems

377
00:18:42,279 --> 00:18:50,259
in its management so we found that it

378
00:18:47,470 --> 00:18:52,749
was it's possible to get up keys like

379
00:18:50,259 --> 00:18:55,320
from everywhere so I'm going to comment

380
00:18:52,749 --> 00:18:58,600
where we found session key abacus sorry

381
00:18:55,320 --> 00:19:00,820
so a common scenario is to have like

382
00:18:58,600 --> 00:19:04,389
devices deployed like everywhere where

383
00:19:00,820 --> 00:19:06,340
it's supposed or most of the time as

384
00:19:04,389 --> 00:19:08,830
users we have physical access to these

385
00:19:06,340 --> 00:19:12,610
devices and usually these devices come

386
00:19:08,830 --> 00:19:15,820
with a tag for example and in that tag

387
00:19:12,610 --> 00:19:17,830
we have the up key so as users we can

388
00:19:15,820 --> 00:19:19,570
read the up key and then for example we

389
00:19:17,830 --> 00:19:21,158
can generate the session keys and we can

390
00:19:19,570 --> 00:19:24,939
insured packets udel or on one network

391
00:19:21,159 --> 00:19:26,980
and of course these types are removed

392
00:19:24,940 --> 00:19:30,639
but at the implementation time value

393
00:19:26,980 --> 00:19:33,210
technicians for example also we found up

394
00:19:30,639 --> 00:19:36,969
keys are coded in an open source code

395
00:19:33,210 --> 00:19:39,399
usually people download the github and

396
00:19:36,970 --> 00:19:42,570
install the decoding to the device and

397
00:19:39,399 --> 00:19:46,689
they usually don't change the key so

398
00:19:42,570 --> 00:19:48,549
that's another source of up key we also

399
00:19:46,690 --> 00:19:50,249
found because there are devices that can

400
00:19:48,549 --> 00:19:54,309
be activated with a mobile application

401
00:19:50,249 --> 00:19:58,240
using bluetooth and I'll show an example

402
00:19:54,309 --> 00:20:01,690
later that we have the the the the

403
00:19:58,240 --> 00:20:04,840
mobile application which says the the

404
00:20:01,690 --> 00:20:08,980
app key that is using are using those

405
00:20:04,840 --> 00:20:10,870
devices we also know that for example

406
00:20:08,980 --> 00:20:14,350
when we buy

407
00:20:10,870 --> 00:20:17,080
a bunch of message a bunch of devices

408
00:20:14,350 --> 00:20:20,860
Wendall's usually send the D up Keys use

409
00:20:17,080 --> 00:20:23,320
in Excel sheets so if we gain access to

410
00:20:20,860 --> 00:20:27,729
those Excel sheets then we have like we

411
00:20:23,320 --> 00:20:30,490
can own a lot of devices we have also

412
00:20:27,730 --> 00:20:34,420
seen people saying okay I have this

413
00:20:30,490 --> 00:20:36,760
device and I try to use to use this up

414
00:20:34,420 --> 00:20:39,220
key and I can connected so here people

415
00:20:36,760 --> 00:20:41,320
Chaz is just divulging the there are

416
00:20:39,220 --> 00:20:44,320
kids on the internet in support forums

417
00:20:41,320 --> 00:20:47,139
for example so they are we have like

418
00:20:44,320 --> 00:20:49,780
like a couple of examples and the first

419
00:20:47,140 --> 00:20:51,970
one is is from the mobile application

420
00:20:49,780 --> 00:20:55,210
that I mentioned and the other one trust

421
00:20:51,970 --> 00:20:58,179
me it's written really small the the up

422
00:20:55,210 --> 00:21:03,850
key of the device and that's that's from

423
00:20:58,179 --> 00:21:08,260
a device level so yeah we have keys

424
00:21:03,850 --> 00:21:12,490
Laura Wong up keys everywhere so besides

425
00:21:08,260 --> 00:21:15,460
having like when monkeys I mean we have

426
00:21:12,490 --> 00:21:18,480
Rico pyla we have a dictionary of up

427
00:21:15,460 --> 00:21:22,330
keys we found that people usually use

428
00:21:18,480 --> 00:21:26,020
wiki's instead of like well no so with

429
00:21:22,330 --> 00:21:29,620
what water wiki's I mean we have found

430
00:21:26,020 --> 00:21:33,760
that people are using keys only composed

431
00:21:29,620 --> 00:21:37,209
by PI zeros or 0 0 1 1 and thus to reach

432
00:21:33,760 --> 00:21:42,129
in FF for example using all the the

433
00:21:37,210 --> 00:21:45,120
characters in a second X we and this is

434
00:21:42,130 --> 00:21:47,830
another problem we also found that

435
00:21:45,120 --> 00:21:50,919
implementations are every made with I

436
00:21:47,830 --> 00:21:53,949
mean people choose the same add key for

437
00:21:50,920 --> 00:21:56,950
a whole group of devices so if we hug

438
00:21:53,950 --> 00:22:01,500
only one device then we have the whole

439
00:21:56,950 --> 00:22:05,380
lot of a network we have also seen that

440
00:22:01,500 --> 00:22:08,290
people choose or derive the D up Keys

441
00:22:05,380 --> 00:22:11,950
using the combination of this data which

442
00:22:08,290 --> 00:22:14,740
is this data is public and is sent in a

443
00:22:11,950 --> 00:22:16,960
variation request so yeah we can try to

444
00:22:14,740 --> 00:22:18,880
combine those data for example to form

445
00:22:16,960 --> 00:22:23,890
an app key and then we can try to

446
00:22:18,880 --> 00:22:24,470
correct assuring procedure using that

447
00:22:23,890 --> 00:22:30,080
app

448
00:22:24,470 --> 00:22:32,960
and besides this week is we found many

449
00:22:30,080 --> 00:22:36,889
vendors not all of them that don't allow

450
00:22:32,960 --> 00:22:40,310
you to change the D up key so if our

451
00:22:36,890 --> 00:22:43,130
devices got had the only possible

452
00:22:40,310 --> 00:22:45,370
solution is to or hack the device to

453
00:22:43,130 --> 00:22:49,010
change the key or to trust it because

454
00:22:45,370 --> 00:22:54,770
your device got compromised and yeah you

455
00:22:49,010 --> 00:22:57,860
won't be able to use it so besides all

456
00:22:54,770 --> 00:23:01,280
these key management issue we have

457
00:22:57,860 --> 00:23:05,959
detected another threats for Laura one

458
00:23:01,280 --> 00:23:08,480
and and the first one is that given the

459
00:23:05,960 --> 00:23:10,700
features of Laura one we have the

460
00:23:08,480 --> 00:23:13,070
possibility to sniff packets from many

461
00:23:10,700 --> 00:23:16,190
kilometers away as I mention in the city

462
00:23:13,070 --> 00:23:19,970
we have like a 2.5 kilometres range so

463
00:23:16,190 --> 00:23:25,250
if we get like a gateway of this we can

464
00:23:19,970 --> 00:23:27,770
start to sniff packets and last like two

465
00:23:25,250 --> 00:23:30,380
months ago we saw I knew that like

466
00:23:27,770 --> 00:23:33,740
gateways in space were being developed

467
00:23:30,380 --> 00:23:37,010
so this this price is the death threat

468
00:23:33,740 --> 00:23:42,950
because we can for example would be able

469
00:23:37,010 --> 00:23:45,640
to sniff packets from the space thread

470
00:23:42,950 --> 00:23:50,900
is the possibility to crack up kiss

471
00:23:45,640 --> 00:23:53,060
using I mean it's enough to to capture a

472
00:23:50,900 --> 00:23:57,020
genre quest and a showing except to

473
00:23:53,060 --> 00:24:00,800
start cracking the up key and this can

474
00:23:57,020 --> 00:24:04,730
be done offline and even though the the

475
00:24:00,800 --> 00:24:07,520
newer version has one more key we can

476
00:24:04,730 --> 00:24:09,290
still crack one of them and that at

477
00:24:07,520 --> 00:24:13,310
least I've been I love service into the

478
00:24:09,290 --> 00:24:15,139
Laura one network so as I mentioned

479
00:24:13,310 --> 00:24:19,280
today the possibility to steal the key

480
00:24:15,140 --> 00:24:21,470
is a big issue in Laura one at least for

481
00:24:19,280 --> 00:24:24,560
for when we have the physical access to

482
00:24:21,470 --> 00:24:26,630
devices and that's really common so we

483
00:24:24,560 --> 00:24:30,159
can for example reverse engineer our

484
00:24:26,630 --> 00:24:33,670
device and still the key we can also

485
00:24:30,160 --> 00:24:36,590
steal the key through bluetooth because

486
00:24:33,670 --> 00:24:38,350
many devices use Bluetooth Low Energy

487
00:24:36,590 --> 00:24:40,510
which is known for

488
00:24:38,350 --> 00:24:43,750
like many authentication I mean

489
00:24:40,510 --> 00:24:46,750
authentication is not defined by by by

490
00:24:43,750 --> 00:24:49,110
Bluetooth low-energy so yeah people we

491
00:24:46,750 --> 00:24:54,610
can just call Nancy is this problem and

492
00:24:49,110 --> 00:24:56,918
get the up key for example also if we

493
00:24:54,610 --> 00:25:00,100
have if we tag the manufacturer or the

494
00:24:56,919 --> 00:25:02,799
vendor or the telecommunication company

495
00:25:00,100 --> 00:25:05,168
or the technicians or if we hack the

496
00:25:02,799 --> 00:25:11,650
network server we'll be able to get a

497
00:25:05,169 --> 00:25:13,450
lot of up keys too so they ensure that

498
00:25:11,650 --> 00:25:15,789
the denial of service and the

499
00:25:13,450 --> 00:25:18,250
possibility to inject data fact they tie

500
00:25:15,789 --> 00:25:20,710
into Intolerable network is one of the

501
00:25:18,250 --> 00:25:23,860
biggest problem or of threats which

502
00:25:20,710 --> 00:25:27,970
sometimes or most time can be detected

503
00:25:23,860 --> 00:25:31,240
unless you are using a software to do to

504
00:25:27,970 --> 00:25:34,299
take these attacks and this last

505
00:25:31,240 --> 00:25:36,780
scenario that it was like we have been

506
00:25:34,299 --> 00:25:38,918
thinking about it like this last month

507
00:25:36,780 --> 00:25:41,799
because Laura one offered you the

508
00:25:38,919 --> 00:25:44,049
possibility to update the firmware of

509
00:25:41,799 --> 00:25:46,840
the devices over there using Laura one

510
00:25:44,049 --> 00:25:49,059
so what could happen for example if we

511
00:25:46,840 --> 00:25:53,080
if we take advantage of that mechanism

512
00:25:49,059 --> 00:25:57,600
we can for example instead of injecting

513
00:25:53,080 --> 00:26:00,309
in check the firmware we can check

514
00:25:57,600 --> 00:26:06,070
ransomware and that's something we were

515
00:26:00,309 --> 00:26:09,340
thinking about so when we started this

516
00:26:06,070 --> 00:26:12,340
research of course we had to to read the

517
00:26:09,340 --> 00:26:15,158
protocol and so on and we started to see

518
00:26:12,340 --> 00:26:18,129
which tools were available available to

519
00:26:15,159 --> 00:26:21,370
us like to start to pin tests for

520
00:26:18,130 --> 00:26:24,429
example an open source network server or

521
00:26:21,370 --> 00:26:27,059
a lower one infrastructure and we

522
00:26:24,429 --> 00:26:31,390
realized that there was nothing so

523
00:26:27,059 --> 00:26:33,789
someone who has to do one a bit for

524
00:26:31,390 --> 00:26:36,539
example would have to do everything from

525
00:26:33,789 --> 00:26:39,100
scratch as the same as we do with it and

526
00:26:36,539 --> 00:26:42,158
for example if you have a lot of a

527
00:26:39,100 --> 00:26:44,039
network you can't know if your keys the

528
00:26:42,159 --> 00:26:48,280
keys you had that you're using

529
00:26:44,039 --> 00:26:51,730
well-known or our non random or or many

530
00:26:48,280 --> 00:26:52,120
other things and you can for example it

531
00:26:51,730 --> 00:26:55,179
take

532
00:26:52,120 --> 00:26:58,689
if someone is attacking you all free and

533
00:26:55,179 --> 00:27:02,890
what's worse you can detect if you are

534
00:26:58,690 --> 00:27:05,500
already compromised so then we came with

535
00:27:02,890 --> 00:27:08,440
the idea of like starting we came up

536
00:27:05,500 --> 00:27:11,559
with the idea of starting like tools for

537
00:27:08,440 --> 00:27:14,950
for auditing laura1 this solely started

538
00:27:11,559 --> 00:27:19,000
with the offensive part so as I said we

539
00:27:14,950 --> 00:27:23,529
we made a set of micro tools which were

540
00:27:19,000 --> 00:27:26,289
written in Python 2 in order to fantasy

541
00:27:23,529 --> 00:27:29,230
a lot of an infrastructure so with these

542
00:27:26,289 --> 00:27:33,070
tools we can sniff traffic using this

543
00:27:29,230 --> 00:27:36,460
guide ways we can spoof child traffic in

544
00:27:33,070 --> 00:27:39,460
the case we we obtain the up key and we

545
00:27:36,460 --> 00:27:42,419
so we can share a decision keys and we

546
00:27:39,460 --> 00:27:44,649
come fast traffic we can send it to the

547
00:27:42,419 --> 00:27:49,029
to the Lord one server using our

548
00:27:44,649 --> 00:27:50,889
computer we can grab the keys as I

549
00:27:49,029 --> 00:27:55,390
mentioned today using the shown requests

550
00:27:50,890 --> 00:27:59,470
and they shown except and so once we

551
00:27:55,390 --> 00:28:01,480
have the this set of micro tools to top

552
00:27:59,470 --> 00:28:06,309
and test the the low run infrastructure

553
00:28:01,480 --> 00:28:08,679
we can we we posit the idea ok so what

554
00:28:06,309 --> 00:28:11,980
can we do to detect for example an

555
00:28:08,679 --> 00:28:13,899
attack so first of all we needed to

556
00:28:11,980 --> 00:28:18,299
collect the data to collect laura1

557
00:28:13,899 --> 00:28:22,830
messages so we developed a set of

558
00:28:18,299 --> 00:28:25,029
messages collectors from different

559
00:28:22,830 --> 00:28:28,678
infrastructures or four different

560
00:28:25,029 --> 00:28:33,039
network servers we can get for example

561
00:28:28,679 --> 00:28:36,279
Lauren packets from this Laura survey o

562
00:28:33,039 --> 00:28:40,240
network 0 which is a well known number

563
00:28:36,279 --> 00:28:42,309
source network server we can get lot of

564
00:28:40,240 --> 00:28:45,340
one packets using this gateway for

565
00:28:42,309 --> 00:28:47,320
example so we have to adapt many

566
00:28:45,340 --> 00:28:50,709
collectors to with through different

567
00:28:47,320 --> 00:28:52,570
formats in order to save them to the

568
00:28:50,710 --> 00:28:55,360
database and what's more important with

569
00:28:52,570 --> 00:28:59,320
more or less I have hundred Python lines

570
00:28:55,360 --> 00:29:03,280
someone will be able to to generate

571
00:28:59,320 --> 00:29:05,450
their own collector so once we we have

572
00:29:03,280 --> 00:29:09,830
these collectors and we have a lot

573
00:29:05,450 --> 00:29:13,399
of messages into our database we started

574
00:29:09,830 --> 00:29:14,840
to think what checks could we do - for

575
00:29:13,399 --> 00:29:19,250
example the tech an attack

576
00:29:14,840 --> 00:29:21,649
so we with or now the the these tools

577
00:29:19,250 --> 00:29:25,220
have offers the possibility to detect

578
00:29:21,649 --> 00:29:27,289
shall replace terribly attacks we can

579
00:29:25,220 --> 00:29:29,480
detect for example a BP activated

580
00:29:27,289 --> 00:29:32,029
devices which is the activation method

581
00:29:29,480 --> 00:29:37,010
that is not recommended for productive

582
00:29:32,029 --> 00:29:39,470
environments we can also look for when

583
00:29:37,010 --> 00:29:42,740
non-kiss using this dictionary that I

584
00:29:39,470 --> 00:29:45,559
mentioned or non-random keys by like

585
00:29:42,740 --> 00:29:49,610
cracking the key so we use this

586
00:29:45,559 --> 00:29:52,340
dictionary and we also generate em on

587
00:29:49,610 --> 00:29:57,408
the on the er like more or less to

588
00:29:52,340 --> 00:29:59,178
southern courage keys yeah you can it

589
00:29:57,409 --> 00:30:02,440
can be modified we are looking just for

590
00:29:59,179 --> 00:30:05,240
certain patterns we can also detect

591
00:30:02,440 --> 00:30:08,840
duplicated sessions like I mean if

592
00:30:05,240 --> 00:30:11,450
someone shares or derives let's suppose

593
00:30:08,840 --> 00:30:14,029
that someone stole the this D up key and

594
00:30:11,450 --> 00:30:16,460
generated the session keys and it's now

595
00:30:14,029 --> 00:30:20,990
injecting packets into our Laura one

596
00:30:16,460 --> 00:30:22,940
network so that in now we have like a

597
00:30:20,990 --> 00:30:25,970
duplicate this session and we can detect

598
00:30:22,940 --> 00:30:29,120
that and we can detect or we can now did

599
00:30:25,970 --> 00:30:32,299
something as simple as like telling how

600
00:30:29,120 --> 00:30:36,979
many devices are sending data into our

601
00:30:32,299 --> 00:30:39,350
Laura one network so there is a the the

602
00:30:36,980 --> 00:30:41,840
architecture of the framework we have

603
00:30:39,350 --> 00:30:44,269
like we have the collectors which say

604
00:30:41,840 --> 00:30:47,779
point messages into the database and

605
00:30:44,269 --> 00:30:51,950
those messages are fed by an alt with

606
00:30:47,779 --> 00:30:54,409
the analyzers who which like for look

607
00:30:51,950 --> 00:30:57,350
for certain patterns in the traffic and

608
00:30:54,409 --> 00:30:59,840
raise different alerts and at the end we

609
00:30:57,350 --> 00:31:01,399
have like they said this set of micro

610
00:30:59,840 --> 00:31:03,470
tools that they mentioned that are

611
00:31:01,399 --> 00:31:06,590
intended more for for the offensive part

612
00:31:03,470 --> 00:31:08,090
so as I mentioned today these tools were

613
00:31:06,590 --> 00:31:10,850
written in Python

614
00:31:08,090 --> 00:31:14,480
maybe the 90% in Python and resting

615
00:31:10,850 --> 00:31:18,649
golang we decided to use sequel alchemy

616
00:31:14,480 --> 00:31:21,710
to the database access so that

617
00:31:18,650 --> 00:31:25,610
people can choose for example between

618
00:31:21,710 --> 00:31:29,720
using seek light or PostgreSQL according

619
00:31:25,610 --> 00:31:32,060
the the intended use I mean if if they

620
00:31:29,720 --> 00:31:34,220
use the intended use is for offensive or

621
00:31:32,060 --> 00:31:36,620
defensive part and of course this is

622
00:31:34,220 --> 00:31:39,920
shipped in in a container now docker

623
00:31:36,620 --> 00:31:43,879
container in order to solve the or the

624
00:31:39,920 --> 00:31:45,710
years of the dependencies management so

625
00:31:43,880 --> 00:31:48,650
about the hard work that we have been

626
00:31:45,710 --> 00:31:52,640
using for for this research and we are

627
00:31:48,650 --> 00:31:57,370
currently using so choose a cement to

628
00:31:52,640 --> 00:32:00,590
treat to sniff packets we can we can use

629
00:31:57,370 --> 00:32:02,629
this Laura one gateway which is composed

630
00:32:00,590 --> 00:32:05,360
by a transceiver allotment and Sybil

631
00:32:02,630 --> 00:32:09,350
analyst filter by and cost approximately

632
00:32:05,360 --> 00:32:11,870
two current dollars this this gateway

633
00:32:09,350 --> 00:32:14,840
has like two software components and we

634
00:32:11,870 --> 00:32:17,600
managed to modify one of the end so that

635
00:32:14,840 --> 00:32:20,720
in that way we can get the behavior or

636
00:32:17,600 --> 00:32:23,360
we can make the gateway to behave as if

637
00:32:20,720 --> 00:32:27,110
it were a device so that way we can send

638
00:32:23,360 --> 00:32:30,620
messages to other gateways and that this

639
00:32:27,110 --> 00:32:32,810
way we can inject the other one message

640
00:32:30,620 --> 00:32:36,949
messages in a valid lot of an

641
00:32:32,810 --> 00:32:39,290
infrastructure and this this component

642
00:32:36,950 --> 00:32:43,040
the model this modified component is

643
00:32:39,290 --> 00:32:45,470
already uploaded in Indian github so by

644
00:32:43,040 --> 00:32:47,840
using this year we will realize that it

645
00:32:45,470 --> 00:32:50,570
has like two limitations the first one

646
00:32:47,840 --> 00:32:52,159
is that we cannot sleep sniff down in

647
00:32:50,570 --> 00:32:56,689
traffic and the most important only

648
00:32:52,160 --> 00:32:59,480
traffic that we need is a shown accept

649
00:32:56,690 --> 00:33:02,360
because that with the traffic we can for

650
00:32:59,480 --> 00:33:04,250
example crack the the up key and the

651
00:33:02,360 --> 00:33:08,149
other limitation that we detected is

652
00:33:04,250 --> 00:33:11,000
that the element the limitation that we

653
00:33:08,150 --> 00:33:16,850
have is that we can only sniff 8 out of

654
00:33:11,000 --> 00:33:19,040
8 64 channels although this that's a

655
00:33:16,850 --> 00:33:22,490
limitation of this guy we nowadays we

656
00:33:19,040 --> 00:33:25,280
have like more professional gateways but

657
00:33:22,490 --> 00:33:29,030
cause the more times than than this

658
00:33:25,280 --> 00:33:31,760
gateway so then we started to think

659
00:33:29,030 --> 00:33:32,539
about workaround to solve this

660
00:33:31,760 --> 00:33:34,609
limitation

661
00:33:32,539 --> 00:33:37,190
and we came up with the idea of you seen

662
00:33:34,609 --> 00:33:42,019
an SEO for those who don't know an SEO

663
00:33:37,190 --> 00:33:44,359
is a device that provides us an

664
00:33:42,019 --> 00:33:48,019
interface between our computer and the

665
00:33:44,359 --> 00:33:49,879
RF world and the easier that we found

666
00:33:48,019 --> 00:33:52,909
most suitable for our needs

667
00:33:49,879 --> 00:33:56,389
what was the alignment year because it's

668
00:33:52,909 --> 00:33:59,269
bandwidth at this for the for the record

669
00:33:56,389 --> 00:34:02,958
like RF requirement in Argentina

670
00:33:59,269 --> 00:34:05,239
it was it it's bandwidth it's big enough

671
00:34:02,959 --> 00:34:08,299
to cover like the whole bandwidth that

672
00:34:05,239 --> 00:34:10,460
we need there and these GL cost

673
00:34:08,299 --> 00:34:14,690
approximately three hundred dollars and

674
00:34:10,460 --> 00:34:19,509
there are available many plugins to to

675
00:34:14,690 --> 00:34:25,759
encode and decode laura1 traffic so now

676
00:34:19,509 --> 00:34:28,190
I'm going to show a little demo this - -

677
00:34:25,759 --> 00:34:33,500
in this demo I will run the analyzers I

678
00:34:28,190 --> 00:34:39,859
have like a traffic which was captured

679
00:34:33,500 --> 00:34:42,379
in in our environment and so this

680
00:34:39,859 --> 00:34:45,288
traffic is like in normal operations and

681
00:34:42,379 --> 00:34:48,828
we then injected like messages I mean

682
00:34:45,289 --> 00:34:51,289
that suppose we stole the up key and we

683
00:34:48,829 --> 00:34:54,349
generated the session keys and we now

684
00:34:51,289 --> 00:34:57,799
injected a few packets and let's see how

685
00:34:54,349 --> 00:35:00,789
we were able to to detect these is

686
00:34:57,799 --> 00:35:00,788
injected packets

687
00:35:09,130 --> 00:35:12,150
you do

688
00:35:12,460 --> 00:35:18,190
okay so now I'm going to run the one of

689
00:35:15,460 --> 00:35:22,450
the analyzers which this one looks for

690
00:35:18,190 --> 00:35:25,020
patterns in the traffic and let's see

691
00:35:22,450 --> 00:35:25,020
the alerts

692
00:35:39,250 --> 00:35:44,320
so for example there is detected that

693
00:35:41,920 --> 00:35:47,380
adept knowns that they want they known

694
00:35:44,320 --> 00:35:50,290
that is generated to ball replay attacks

695
00:35:47,380 --> 00:35:52,060
was repeated so and this way we can

696
00:35:50,290 --> 00:35:56,410
infer that someone was trying to

697
00:35:52,060 --> 00:36:02,170
generate a showing procedure using like

698
00:35:56,410 --> 00:36:10,330
the device identifier another alert that

699
00:36:02,170 --> 00:36:13,119
is right there so this alert for example

700
00:36:10,330 --> 00:36:17,170
it says that I received a small counter

701
00:36:13,119 --> 00:36:21,930
for that device address so this way for

702
00:36:17,170 --> 00:36:26,349
example we can infer that someone stole

703
00:36:21,930 --> 00:36:29,680
have stolen our up key and it generated

704
00:36:26,349 --> 00:36:33,220
the session key and is now injecting

705
00:36:29,680 --> 00:36:39,399
fake data into our network server so

706
00:36:33,220 --> 00:36:41,649
that way for and our device keep on

707
00:36:39,400 --> 00:36:44,290
sending messages so yeah we have a

708
00:36:41,650 --> 00:36:48,070
difference in the counters and the alarm

709
00:36:44,290 --> 00:36:50,080
is raised so now I'm going to run the

710
00:36:48,070 --> 00:36:53,020
the brute force err on the traffic we

711
00:36:50,080 --> 00:37:02,589
can write the we can run both analyzers

712
00:36:53,020 --> 00:37:06,099
at the same times so on purpose I like

713
00:37:02,589 --> 00:37:10,779
made like a lot of showing of showing

714
00:37:06,099 --> 00:37:13,750
there we see that that key was found for

715
00:37:10,780 --> 00:37:17,619
the device using the device RS and it

716
00:37:13,750 --> 00:37:21,220
says in which idea of the message ID in

717
00:37:17,619 --> 00:37:25,089
the database it was so if we found for

718
00:37:21,220 --> 00:37:28,180
example the if we found for example the

719
00:37:25,089 --> 00:37:29,920
D up key we can now look for that turn

720
00:37:28,180 --> 00:37:32,230
request and that join accept and the

721
00:37:29,920 --> 00:37:34,900
rebbe decision keys who using that up

722
00:37:32,230 --> 00:37:37,570
key so I'm going to go over like really

723
00:37:34,900 --> 00:37:39,910
fast about the demo first I had a lot of

724
00:37:37,570 --> 00:37:46,060
one dataset in my DB that was capturing

725
00:37:39,910 --> 00:37:49,240
in our offices then the first step was

726
00:37:46,060 --> 00:37:52,089
to run the analysis and see that the

727
00:37:49,240 --> 00:37:53,680
alarms that it raised then we launched

728
00:37:52,089 --> 00:37:57,279
the the brute

729
00:37:53,680 --> 00:38:00,960
and there you have the D commands that I

730
00:37:57,280 --> 00:38:04,690
used and as I mentioned as I mentioned

731
00:38:00,960 --> 00:38:07,780
seconds ago we can now be we are now

732
00:38:04,690 --> 00:38:09,790
able to retrieve the Shawn requests they

733
00:38:07,780 --> 00:38:12,070
should accept and the up key from the

734
00:38:09,790 --> 00:38:14,740
database and they have the session keys

735
00:38:12,070 --> 00:38:17,440
and now we are able to inject fake data

736
00:38:14,740 --> 00:38:19,509
for example into a database or we can

737
00:38:17,440 --> 00:38:28,270
perform a denial of service into the

738
00:38:19,510 --> 00:38:31,420
entry device so about the the attacker

739
00:38:28,270 --> 00:38:33,610
scenarios that can be we can have for

740
00:38:31,420 --> 00:38:37,720
example it's really common to have

741
00:38:33,610 --> 00:38:39,700
laura1 devices that measure or sense

742
00:38:37,720 --> 00:38:44,709
different data let's suppose for example

743
00:38:39,700 --> 00:38:48,359
we have a device that is sensing co2 in

744
00:38:44,710 --> 00:38:52,450
a room and let's now suppose that we

745
00:38:48,360 --> 00:38:55,330
that the co2 levels in the room rest and

746
00:38:52,450 --> 00:38:57,759
now we've spoofed the data that is

747
00:38:55,330 --> 00:39:01,660
sending the device so that we can fool

748
00:38:57,760 --> 00:39:05,530
the server and the server never tries

749
00:39:01,660 --> 00:39:09,700
the the co2 allowed alarm for example so

750
00:39:05,530 --> 00:39:12,490
that way we can put human lives at risk

751
00:39:09,700 --> 00:39:17,290
another common scenario is to have the

752
00:39:12,490 --> 00:39:20,279
the smart meters so let's suppose that

753
00:39:17,290 --> 00:39:24,220
we can perform the native service into

754
00:39:20,280 --> 00:39:26,680
millions of devices in the

755
00:39:24,220 --> 00:39:29,259
implementation I mentioned so that at

756
00:39:26,680 --> 00:39:33,190
the end of the month the utilities

757
00:39:29,260 --> 00:39:35,710
companies wouldn't be able to to charge

758
00:39:33,190 --> 00:39:39,550
the bills because yeah they can retrieve

759
00:39:35,710 --> 00:39:42,790
the the measures from from devices so

760
00:39:39,550 --> 00:39:45,820
about the solutions that that we see

761
00:39:42,790 --> 00:39:49,120
that are possible we can divide them in

762
00:39:45,820 --> 00:39:53,470
the key management and in active methods

763
00:39:49,120 --> 00:39:55,630
so related to key management we can use

764
00:39:53,470 --> 00:40:00,310
this secure element which is a chip that

765
00:39:55,630 --> 00:40:05,140
we can stick on into the device and so

766
00:40:00,310 --> 00:40:06,610
the secure element or if you we use the

767
00:40:05,140 --> 00:40:09,730
security element we

768
00:40:06,610 --> 00:40:13,000
for example say start the up key in

769
00:40:09,730 --> 00:40:15,880
there we can perform the crypto

770
00:40:13,000 --> 00:40:18,010
operations with that element but the

771
00:40:15,880 --> 00:40:23,130
only downside of the secure element is

772
00:40:18,010 --> 00:40:25,990
that it's costly and it's not maybe

773
00:40:23,130 --> 00:40:29,650
buying a secure element is not

774
00:40:25,990 --> 00:40:32,350
acceptable for many implementations then

775
00:40:29,650 --> 00:40:36,210
we can do something really simple as

776
00:40:32,350 --> 00:40:40,839
replacing the keys that vendors gives us

777
00:40:36,210 --> 00:40:45,490
we can we should we must also change the

778
00:40:40,840 --> 00:40:49,210
keys change the use different keys from

779
00:40:45,490 --> 00:40:51,939
from for different devices so that if we

780
00:40:49,210 --> 00:40:55,900
have one device card we don't have like

781
00:40:51,940 --> 00:40:58,570
the whole lot of a network hug and as I

782
00:40:55,900 --> 00:41:01,360
mentioned we the other possible

783
00:40:58,570 --> 00:41:05,410
solutions are more related to to active

784
00:41:01,360 --> 00:41:08,080
stuff so the first thing that we should

785
00:41:05,410 --> 00:41:12,600
do is to update our door one network

786
00:41:08,080 --> 00:41:15,850
looking for well-known nab keys or or

787
00:41:12,600 --> 00:41:18,100
old version of Laura bans and so on and

788
00:41:15,850 --> 00:41:20,650
the other thing that we can use is to

789
00:41:18,100 --> 00:41:23,890
use third parties of word in order to

790
00:41:20,650 --> 00:41:27,760
monitor and actively they lower the

791
00:41:23,890 --> 00:41:30,730
Laura one traffic so the the framework

792
00:41:27,760 --> 00:41:34,330
as I mentioned it's uploaded already

793
00:41:30,730 --> 00:41:36,970
uploaded in github you can download it

794
00:41:34,330 --> 00:41:39,759
and you can play with it if you have any

795
00:41:36,970 --> 00:41:41,740
question you can text us or if you want

796
00:41:39,760 --> 00:41:44,620
to contribute or to write a collector

797
00:41:41,740 --> 00:41:46,870
you can text us and I will ready to

798
00:41:44,620 --> 00:41:50,200
we'll be happy to help you

799
00:41:46,870 --> 00:41:54,339
so that was my presentation and thank

800
00:41:50,200 --> 00:41:56,879
you so much for for listening thank you

801
00:41:54,340 --> 00:41:56,880
thank you

