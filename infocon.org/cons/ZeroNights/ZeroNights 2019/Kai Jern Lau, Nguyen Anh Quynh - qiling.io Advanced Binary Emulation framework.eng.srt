1
00:00:07,960 --> 00:00:17,840
[Music]

2
00:00:13,119 --> 00:00:22,689
okay I'm gonna speak Russian no I'm just

3
00:00:17,840 --> 00:00:25,939
joking okay ah

4
00:00:22,689 --> 00:00:28,250
before I forget I always forget this all

5
00:00:25,939 --> 00:00:30,290
right so right after the talk we'll give

6
00:00:28,250 --> 00:00:33,050
out the speakers and I don't want to

7
00:00:30,290 --> 00:00:35,059
carry back so please look for me as for

8
00:00:33,050 --> 00:00:38,149
the stickers and we gonna be the

9
00:00:35,059 --> 00:00:41,748
stickers and one t-shirt so ya

10
00:00:38,149 --> 00:00:49,269
understand why you're flipping back nine

11
00:00:41,749 --> 00:00:53,539
slides don't do that very bad okay I am

12
00:00:49,269 --> 00:00:56,899
x-wings I work for Chinese based company

13
00:00:53,539 --> 00:01:00,140
I'm also the designer for hanging the

14
00:00:56,899 --> 00:01:02,929
box uh electronic badge so we have this

15
00:01:00,140 --> 00:01:05,780
patch for the past couple of hanging the

16
00:01:02,929 --> 00:01:08,780
box we have this patch of course I'm the

17
00:01:05,780 --> 00:01:11,000
founder of a chilling framework which

18
00:01:08,780 --> 00:01:12,409
what we are going to talk today and yeah

19
00:01:11,000 --> 00:01:14,719
these are the batch that we designed for

20
00:01:12,409 --> 00:01:16,850
the past are hanging the box okay down

21
00:01:14,719 --> 00:01:19,189
there is all crap or the conference's

22
00:01:16,850 --> 00:01:20,839
that I spoke to and I just want to fill

23
00:01:19,189 --> 00:01:25,029
up the page so that is the reason why

24
00:01:20,840 --> 00:01:26,299
these things are there okay so quit

25
00:01:25,030 --> 00:01:29,270
hello

26
00:01:26,299 --> 00:01:30,799
okay so my name is Alan King and I'm

27
00:01:29,270 --> 00:01:34,939
working in Nanyang Technological

28
00:01:30,799 --> 00:01:38,270
University in Singapore and recently my

29
00:01:34,939 --> 00:01:41,559
research mainly focus on binary analysis

30
00:01:38,270 --> 00:01:44,119
and I'm the founder and maintain the

31
00:01:41,560 --> 00:01:46,939
reversing frameworks like capstone

32
00:01:44,119 --> 00:01:50,810
Easter Samba in the cone emulator and

33
00:01:46,939 --> 00:01:54,350
Keystone assembler so this is the second

34
00:01:50,810 --> 00:01:57,049
time I give a talk in in geo nice the

35
00:01:54,350 --> 00:02:03,949
first one was two years ago in 2017 and

36
00:01:57,049 --> 00:02:06,020
I'm very happy to be back okay this

37
00:02:03,950 --> 00:02:07,969
ex-queen me as the founder for this

38
00:02:06,020 --> 00:02:10,669
project we still have summer guys

39
00:02:07,969 --> 00:02:13,400
one two three four guys that helped us

40
00:02:10,669 --> 00:02:15,589
to wrote the code and then helped us to

41
00:02:13,400 --> 00:02:19,790
do to write one few of them are from

42
00:02:15,590 --> 00:02:22,310
this Chinese University CTF group called

43
00:02:19,790 --> 00:02:25,579
up here and

44
00:02:22,310 --> 00:02:28,340
one of my colleague from from my company

45
00:02:25,580 --> 00:02:33,890
so these are the few of us that managed

46
00:02:28,340 --> 00:02:35,570
to run this project so before we start

47
00:02:33,890 --> 00:02:37,880
we would like to talk about how we get

48
00:02:35,570 --> 00:02:40,730
this project started and then how we get

49
00:02:37,880 --> 00:02:43,579
ourselves end up in this whole situation

50
00:02:40,730 --> 00:02:46,549
and of course the talk today the only

51
00:02:43,580 --> 00:02:47,870
thing it's we will go through the slides

52
00:02:46,550 --> 00:02:50,930
a little bit faster

53
00:02:47,870 --> 00:02:53,780
so please you know let us know if you

54
00:02:50,930 --> 00:02:56,320
have any questions later we will focus a

55
00:02:53,780 --> 00:03:00,709
little bit more time on the demo some

56
00:02:56,320 --> 00:03:02,540
screenshots some live demo ok if demo is

57
00:03:00,709 --> 00:03:04,280
not life it's not a demo so we're gonna

58
00:03:02,540 --> 00:03:06,500
do live demo and keep our fingers

59
00:03:04,280 --> 00:03:07,880
crossed we don't crash because until

60
00:03:06,500 --> 00:03:10,280
this morning before we go for our

61
00:03:07,880 --> 00:03:12,950
breakfast one of the very important demo

62
00:03:10,280 --> 00:03:16,660
crash and we fix it so hopefully it

63
00:03:12,950 --> 00:03:16,660
doesn't crash again pretty hard

64
00:03:17,050 --> 00:03:21,800
ok shellcodes

65
00:03:19,910 --> 00:03:24,200
so during the first slide just now you

66
00:03:21,800 --> 00:03:27,590
saw some shell codes and some binary

67
00:03:24,200 --> 00:03:30,380
execution so our original idea is we

68
00:03:27,590 --> 00:03:32,810
wanted to have a software a framework a

69
00:03:30,380 --> 00:03:34,880
tools okay during that time we don't

70
00:03:32,810 --> 00:03:38,390
have any idea yet we just want something

71
00:03:34,880 --> 00:03:40,850
to be run from a tools that can run all

72
00:03:38,390 --> 00:03:44,839
kind of shell code it doesn't matter

73
00:03:40,850 --> 00:03:46,820
it's a Windows or Linux or BSD or Apple

74
00:03:44,840 --> 00:03:49,340
shell code that we need to run on this

75
00:03:46,820 --> 00:03:52,340
was your platform alright so that is the

76
00:03:49,340 --> 00:03:54,830
reason why we look at shell code and

77
00:03:52,340 --> 00:03:58,700
then payload is one of the most

78
00:03:54,830 --> 00:04:01,850
important criteria okay for security

79
00:03:58,700 --> 00:04:07,070
research as Enterprise that's the reason

80
00:04:01,850 --> 00:04:09,109
why we dig into our shell code so the

81
00:04:07,070 --> 00:04:11,810
reason why we wanted this shell code

82
00:04:09,110 --> 00:04:14,330
execution software or tools or framework

83
00:04:11,810 --> 00:04:16,810
it simply means shell code is getting

84
00:04:14,330 --> 00:04:19,430
more complicated okay compared to

85
00:04:16,810 --> 00:04:23,630
previously so you can see from your from

86
00:04:19,430 --> 00:04:25,370
my right your left okay it's a shell

87
00:04:23,630 --> 00:04:27,110
code used to be very simple alright and

88
00:04:25,370 --> 00:04:30,110
then it move on to a way more

89
00:04:27,110 --> 00:04:31,729
complicated shell good so the reason why

90
00:04:30,110 --> 00:04:34,099
shell code is getting more complicated

91
00:04:31,729 --> 00:04:35,840
it's just simply because detection is

92
00:04:34,099 --> 00:04:38,120
getting more complicated os

93
00:04:35,840 --> 00:04:39,679
getting more complicated people writing

94
00:04:38,120 --> 00:04:44,740
software paper I think OS is getting

95
00:04:39,680 --> 00:04:46,910
most metal compared to our hackers so

96
00:04:44,740 --> 00:04:49,400
these are the things that are changed

97
00:04:46,910 --> 00:04:53,690
inside the entire network or the entire

98
00:04:49,400 --> 00:04:57,429
PC or as an enterprise ok it's not only

99
00:04:53,690 --> 00:05:00,199
OS protection all right I do

100
00:04:57,430 --> 00:05:01,850
looks like a Chinese I am Chinese but

101
00:05:00,199 --> 00:05:05,060
I'm from Malaysia ok I didn't spell

102
00:05:01,850 --> 00:05:07,940
firewall wrongly but now we keep on

103
00:05:05,060 --> 00:05:11,150
saying firewall is a joke ok antivirus

104
00:05:07,940 --> 00:05:13,719
is a joke so Enterprise started to add

105
00:05:11,150 --> 00:05:15,859
in different layers of our firewall

106
00:05:13,720 --> 00:05:19,780
Enterprise started to add in different

107
00:05:15,860 --> 00:05:23,450
layers of law analysis

108
00:05:19,780 --> 00:05:26,900
correlations ok content filtering second

109
00:05:23,450 --> 00:05:28,849
layer firewall busybody second layer IPs

110
00:05:26,900 --> 00:05:31,609
this is what people added into the

111
00:05:28,850 --> 00:05:34,940
entire enterprise

112
00:05:31,610 --> 00:05:37,669
it must be effective ok I would not say

113
00:05:34,940 --> 00:05:41,479
it's not effective it must be effective

114
00:05:37,669 --> 00:05:43,669
for shellcode to become so complicated

115
00:05:41,479 --> 00:05:46,039
to this all right for exploitation to

116
00:05:43,669 --> 00:05:47,810
become so complicated to this ok and

117
00:05:46,039 --> 00:05:52,460
then of course that the last thing is

118
00:05:47,810 --> 00:05:57,050
anti-malware you know anti-virus and the

119
00:05:52,460 --> 00:05:59,239
apt or NTPC the reason why I say NTPC is

120
00:05:57,050 --> 00:06:01,550
once you started to install antivirus

121
00:05:59,240 --> 00:06:03,560
into your PC your PC would not be able

122
00:06:01,550 --> 00:06:07,190
to put up who have that kind of

123
00:06:03,560 --> 00:06:11,389
experience know you guys are laughing so

124
00:06:07,190 --> 00:06:13,610
must be right somehow I must be right ok

125
00:06:11,389 --> 00:06:17,060
so yeah these are the things that been

126
00:06:13,610 --> 00:06:18,650
changed from from normal shellcode

127
00:06:17,060 --> 00:06:23,360
what makes shellcode changes this is

128
00:06:18,650 --> 00:06:25,820
part of the very important criteria so

129
00:06:23,360 --> 00:06:28,270
when we started to build this this

130
00:06:25,820 --> 00:06:32,630
entire project okay we wanted to be

131
00:06:28,270 --> 00:06:35,389
cross-platform we wanted to be a cross

132
00:06:32,630 --> 00:06:37,520
OS so different platform different

133
00:06:35,389 --> 00:06:39,110
architecture and then one single piece

134
00:06:37,520 --> 00:06:41,690
of software that can analyze shellcode

135
00:06:39,110 --> 00:06:43,880
that is what we wanted initially so

136
00:06:41,690 --> 00:06:45,680
because when we started to do testing we

137
00:06:43,880 --> 00:06:47,930
knows that you know MIPS we need MIPS

138
00:06:45,680 --> 00:06:49,790
pot we can use a Raspberry Pi

139
00:06:47,930 --> 00:06:52,820
x86 is rather simple

140
00:06:49,790 --> 00:06:55,280
because the bank Windows virtual

141
00:06:52,820 --> 00:06:57,200
machines okay so when we started to do

142
00:06:55,280 --> 00:06:59,710
this we were thinking can we have a

143
00:06:57,200 --> 00:07:05,420
lightweight system to run everything

144
00:06:59,710 --> 00:07:07,520
okay so we were thinking about what your

145
00:07:05,420 --> 00:07:09,620
machine of course okay so from motion

146
00:07:07,520 --> 00:07:12,609
machine we pick this this is a time line

147
00:07:09,620 --> 00:07:14,780
draft is not our selection process you

148
00:07:12,610 --> 00:07:16,280
know of course of people like us we

149
00:07:14,780 --> 00:07:19,460
cannot draw a proper graph so we copy

150
00:07:16,280 --> 00:07:21,289
this from the internet so uh our

151
00:07:19,460 --> 00:07:25,700
selection is all the way from a vmware

152
00:07:21,290 --> 00:07:29,480
to zen to to microsoft hypervisor QEMU

153
00:07:25,700 --> 00:07:30,710
parallel or the whatever supporting the

154
00:07:29,480 --> 00:07:33,860
hot belly okay

155
00:07:30,710 --> 00:07:36,409
and we discovered if we wanted to run a

156
00:07:33,860 --> 00:07:39,140
shellcode or we wanted to do a shot

157
00:07:36,410 --> 00:07:41,680
could analyze to build from scratch all

158
00:07:39,140 --> 00:07:44,000
these things are over email it to

159
00:07:41,680 --> 00:07:46,550
analyze the shellcode we don't need a

160
00:07:44,000 --> 00:07:47,750
monitor to analyze the shellcode we

161
00:07:46,550 --> 00:07:50,210
don't need a keyboard we don't need a

162
00:07:47,750 --> 00:07:53,150
sound cut we don't need or a different

163
00:07:50,210 --> 00:07:54,979
kind of of our driver so this is what we

164
00:07:53,150 --> 00:07:58,070
were thinking that we should go back to

165
00:07:54,980 --> 00:08:01,030
whatever things that Quinn had design

166
00:07:58,070 --> 00:08:03,560
last time okay we are from avi insec so

167
00:08:01,030 --> 00:08:06,229
last time we were talking about you know

168
00:08:03,560 --> 00:08:09,080
a unicorn and then we should go back to

169
00:08:06,230 --> 00:08:10,880
unicorn and on the waste searching we

170
00:08:09,080 --> 00:08:12,919
discovered that to run shell code there

171
00:08:10,880 --> 00:08:15,290
is there is a possible solution out

172
00:08:12,920 --> 00:08:20,750
there okay the solution is called

173
00:08:15,290 --> 00:08:24,650
unicorn from this very see from yeah no

174
00:08:20,750 --> 00:08:26,630
other okay I think is from you okay

175
00:08:24,650 --> 00:08:29,270
he claimed is from UK I didn't claim

176
00:08:26,630 --> 00:08:31,670
that okay so this user comm project they

177
00:08:29,270 --> 00:08:33,380
can execute our code but the only

178
00:08:31,670 --> 00:08:35,479
problem that we have with the current

179
00:08:33,380 --> 00:08:38,870
solutions that you can be able to

180
00:08:35,479 --> 00:08:43,720
discuss to to get from Internet is use

181
00:08:38,870 --> 00:08:47,690
the corn can run only UNIX based OS

182
00:08:43,720 --> 00:08:50,270
partially OSX okay partially freebsd

183
00:08:47,690 --> 00:08:53,420
alright and then of course not Windows

184
00:08:50,270 --> 00:08:55,670
that is what our major concern we wanted

185
00:08:53,420 --> 00:08:57,439
something that kinda runs on the eunuchs

186
00:08:55,670 --> 00:09:01,069
were Linux BSD

187
00:08:57,440 --> 00:09:03,470
iOS and something that can run window

188
00:09:01,070 --> 00:09:06,500
space Shou code that is what we wanted

189
00:09:03,470 --> 00:09:08,690
and the thing that make us no one to

190
00:09:06,500 --> 00:09:12,020
work on this project is they are using

191
00:09:08,690 --> 00:09:14,290
goal goal like it's a wonderful language

192
00:09:12,020 --> 00:09:17,090
okay but it's not designed for hackers

193
00:09:14,290 --> 00:09:17,540
nobody use it but no hackers to use go

194
00:09:17,090 --> 00:09:21,380
okay

195
00:09:17,540 --> 00:09:25,699
anybody use go over here oh sorry I

196
00:09:21,380 --> 00:09:27,980
don't mean that all right but anyway the

197
00:09:25,700 --> 00:09:31,580
main the main the main language of a

198
00:09:27,980 --> 00:09:34,160
user con is you can go the API is using

199
00:09:31,580 --> 00:09:36,080
a Louis scream I got no idea why I

200
00:09:34,160 --> 00:09:38,750
haven't spoke with this guy yet okay and

201
00:09:36,080 --> 00:09:40,820
they are doing a Cisco forwarding Cisco

202
00:09:38,750 --> 00:09:43,510
forwarding is one of our very important

203
00:09:40,820 --> 00:09:45,980
topic in our in our entire research and

204
00:09:43,510 --> 00:09:48,319
Queen later we'll explain why Cisco

205
00:09:45,980 --> 00:09:50,000
forwarding it's important in our entire

206
00:09:48,320 --> 00:09:54,980
selection process and how it is should

207
00:09:50,000 --> 00:09:56,960
process okay and we build everything

208
00:09:54,980 --> 00:09:59,780
from scratch okay we decided not to use

209
00:09:56,960 --> 00:10:00,710
user code and then we decided to build

210
00:09:59,780 --> 00:10:02,600
everything from scratch

211
00:10:00,710 --> 00:10:06,110
so the first thing is we wanted to

212
00:10:02,600 --> 00:10:09,260
support at least Windows Mac OS

213
00:10:06,110 --> 00:10:12,140
including iOS I've had worse you know

214
00:10:09,260 --> 00:10:15,770
whatever thing there is bsd at least

215
00:10:12,140 --> 00:10:18,890
freebsd and then linux okay so these are

216
00:10:15,770 --> 00:10:20,930
the four OS that we wanted to focus on

217
00:10:18,890 --> 00:10:23,150
all right and then of course we need a

218
00:10:20,930 --> 00:10:25,430
assembler will explain why we need

219
00:10:23,150 --> 00:10:26,870
assembler and we need a disassembler so

220
00:10:25,430 --> 00:10:27,739
these are a few things that we wanted to

221
00:10:26,870 --> 00:10:33,950
put in together

222
00:10:27,740 --> 00:10:36,020
alright to execute the shell code so the

223
00:10:33,950 --> 00:10:37,070
system should look like this originally

224
00:10:36,020 --> 00:10:38,900
phase one okay

225
00:10:37,070 --> 00:10:42,710
the system should look like this alright

226
00:10:38,900 --> 00:10:43,970
so the origin a name was Julie you can

227
00:10:42,710 --> 00:10:47,300
see inside the bracket

228
00:10:43,970 --> 00:10:50,120
alright so it's a combination of our

229
00:10:47,300 --> 00:10:52,160
Keystone which designed by design and

230
00:10:50,120 --> 00:10:54,620
implement by a queen Keystone capstone

231
00:10:52,160 --> 00:10:57,100
and a unicorn engine alright so the

232
00:10:54,620 --> 00:11:00,920
entire system should be able to take in

233
00:10:57,100 --> 00:11:03,860
assembly file not ESM able to take in

234
00:11:00,920 --> 00:11:05,420
binary able to take in hex when you see

235
00:11:03,860 --> 00:11:07,520
the exploitation good nobody comes in

236
00:11:05,420 --> 00:11:10,459
tags okay with your payload before

237
00:11:07,520 --> 00:11:13,040
shellcode okay or hex SF our hex as

238
00:11:10,460 --> 00:11:15,320
argument and hex as a farm so we will be

239
00:11:13,040 --> 00:11:16,800
able to do the pre-processing okay

240
00:11:15,320 --> 00:11:19,319
preparing the

241
00:11:16,800 --> 00:11:22,550
then it should be execute on top of

242
00:11:19,319 --> 00:11:27,240
whatever we have designed all right so

243
00:11:22,550 --> 00:11:28,469
then it will put into our butcher okay

244
00:11:27,240 --> 00:11:30,569
it's not a virtual machine anymore

245
00:11:28,470 --> 00:11:33,720
it's about your Lee nuts which are Mac

246
00:11:30,569 --> 00:11:36,300
OS virtual windows or what your BSD all

247
00:11:33,720 --> 00:11:38,220
right and then on a unicorn engine on

248
00:11:36,300 --> 00:11:43,319
top of in Econ engine we should be able

249
00:11:38,220 --> 00:11:45,779
to simulate an x86 series MIPS all right

250
00:11:43,319 --> 00:11:47,339
and then these are a few our CPU

251
00:11:45,779 --> 00:11:49,620
architecture that we are focusing and

252
00:11:47,339 --> 00:11:54,600
then it should be executed automatically

253
00:11:49,620 --> 00:12:00,569
so the advantage over here is we will be

254
00:11:54,600 --> 00:12:04,410
able to rank on BST on Linux even from a

255
00:12:00,569 --> 00:12:06,839
small eater this far way back to me that

256
00:12:04,410 --> 00:12:08,309
I having and right okay it should be

257
00:12:06,839 --> 00:12:10,740
this platform should be able to run

258
00:12:08,309 --> 00:12:13,199
anywhere all right a different OS

259
00:12:10,740 --> 00:12:16,290
different architecture and it should be

260
00:12:13,199 --> 00:12:18,269
able to execute different OSS and all

261
00:12:16,290 --> 00:12:19,980
these OS you don't have to put up you

262
00:12:18,269 --> 00:12:22,470
don't have to do a preparation

263
00:12:19,980 --> 00:12:25,439
everything will be overly nuts over your

264
00:12:22,470 --> 00:12:26,939
windows or watch a VSD ok and it should

265
00:12:25,439 --> 00:12:29,849
come up with certain type of a report

266
00:12:26,939 --> 00:12:31,860
that required ok it can be a complicated

267
00:12:29,850 --> 00:12:34,410
report it can be a simple report for

268
00:12:31,860 --> 00:12:37,110
anybody else and the language that we

269
00:12:34,410 --> 00:12:39,420
choose of course is Python lazy people

270
00:12:37,110 --> 00:12:43,110
like us we go for Python and that's it

271
00:12:39,420 --> 00:12:45,149
no lazy people like me not him a doctor

272
00:12:43,110 --> 00:12:48,809
cannot be lazy a PhD cannot be lazy so

273
00:12:45,149 --> 00:12:53,670
it's only me okay we have some

274
00:12:48,809 --> 00:12:56,040
screenshots over here so we designed

275
00:12:53,670 --> 00:13:00,750
these things called QL tools that able

276
00:12:56,040 --> 00:13:03,360
to run inside x86 ok this is the x86 and

277
00:13:00,750 --> 00:13:06,629
then we are able to run predefined our

278
00:13:03,360 --> 00:13:09,569
arm 64 architecture OS is a Linux and

279
00:13:06,629 --> 00:13:12,600
then it able to run a shellcode which we

280
00:13:09,569 --> 00:13:15,569
put it on top so that's the shellcode

281
00:13:12,600 --> 00:13:18,410
that's the execution and then I listen

282
00:13:15,569 --> 00:13:22,229
on our it connects to port 1 2 3 4 and

283
00:13:18,410 --> 00:13:25,559
then it will execute be message that is

284
00:13:22,230 --> 00:13:30,300
the first part of the screenshot we will

285
00:13:25,559 --> 00:13:32,850
show or we can run a dot ESM

286
00:13:30,300 --> 00:13:35,310
okay a dot ASM with the assembly

287
00:13:32,850 --> 00:13:37,740
language then we put this is a Windows

288
00:13:35,310 --> 00:13:43,770
shell code then we'll be able to execute

289
00:13:37,740 --> 00:13:46,710
the dot yes and far okay

290
00:13:43,770 --> 00:13:49,550
and then was it a bit no show just now

291
00:13:46,710 --> 00:13:54,560
no it's a it's a Linux 32-bit uh

292
00:13:49,550 --> 00:13:57,060
SM then we have a Windows shell code so

293
00:13:54,560 --> 00:14:02,040
OS is our Windows the first straight

294
00:13:57,060 --> 00:14:05,280
square box windows are 86 ok dot SM and

295
00:14:02,040 --> 00:14:09,209
then a dot SM foul running a calculator

296
00:14:05,280 --> 00:14:12,089
so when you look at the execution it

297
00:14:09,210 --> 00:14:14,400
actually executes not all the Windows

298
00:14:12,090 --> 00:14:16,620
setup we were talks about how we are

299
00:14:14,400 --> 00:14:20,670
figuring out how Windows writes later

300
00:14:16,620 --> 00:14:23,010
so the separate area for for x86 and

301
00:14:20,670 --> 00:14:24,479
then how we prep the environment for

302
00:14:23,010 --> 00:14:26,700
Windows how we prepare the environment

303
00:14:24,480 --> 00:14:30,900
for Windows and how do we manage to

304
00:14:26,700 --> 00:14:33,960
recognize the shell to run a CA else EDX

305
00:14:30,900 --> 00:14:36,449
calculator all right and then the

306
00:14:33,960 --> 00:14:39,120
content of the da TSM file is somewhere

307
00:14:36,450 --> 00:14:41,100
down there so if you convert this

308
00:14:39,120 --> 00:14:44,190
directly it can convert to hex convert

309
00:14:41,100 --> 00:14:47,910
to a binary then we still can execute ok

310
00:14:44,190 --> 00:14:54,690
it doesn't mean a SM or whatever format

311
00:14:47,910 --> 00:15:01,469
that we try to put in so yeah that no no

312
00:14:54,690 --> 00:15:05,610
no no no thanks ok good yes ok so what

313
00:15:01,470 --> 00:15:08,880
is shorter shellcode executor is just on

314
00:15:05,610 --> 00:15:11,100
a very simple as a pole that we do and

315
00:15:08,880 --> 00:15:12,570
actually is that one was view on top and

316
00:15:11,100 --> 00:15:15,960
as a picture of a book named cheating

317
00:15:12,570 --> 00:15:19,550
and next we explain how we view this one

318
00:15:15,960 --> 00:15:21,840
so I think the thing that we means is uh

319
00:15:19,550 --> 00:15:23,880
after we build a shellcode and then now

320
00:15:21,840 --> 00:15:27,720
we had the discussion which we build

321
00:15:23,880 --> 00:15:30,720
thinking we should run a proper file yes

322
00:15:27,720 --> 00:15:33,300
if I explain on the motivation behind it

323
00:15:30,720 --> 00:15:36,780
so we know that we have in the corner

324
00:15:33,300 --> 00:15:39,329
engine which can emulate the native

325
00:15:36,780 --> 00:15:41,670
contra native machine code so first of

326
00:15:39,330 --> 00:15:43,070
all you keep in the cone engine like 100

327
00:15:41,670 --> 00:15:44,990
miles it can

328
00:15:43,070 --> 00:15:49,610
immediately on the ejection in that one

329
00:15:44,990 --> 00:15:51,380
advice however if you in in the hundred

330
00:15:49,610 --> 00:15:54,920
bytes you have some attractions that

331
00:15:51,380 --> 00:15:56,480
cone to opt-in system or rely on some

332
00:15:54,920 --> 00:15:59,300
external dependency

333
00:15:56,480 --> 00:16:01,670
you can't cannot do that because it can

334
00:15:59,300 --> 00:16:05,900
only relate injections by simple

335
00:16:01,670 --> 00:16:09,770
instructions so we'd be chillin to view

336
00:16:05,900 --> 00:16:12,380
the gap so the written in Econ could not

337
00:16:09,770 --> 00:16:14,540
handle the completed code because it

338
00:16:12,380 --> 00:16:18,980
doesn't understand the concept the

339
00:16:14,540 --> 00:16:21,620
high-level consent lie function

340
00:16:18,980 --> 00:16:24,110
dependency library fan system or

341
00:16:21,620 --> 00:16:26,030
operating system so if you chilly to

342
00:16:24,110 --> 00:16:30,260
understand all those higher-level

343
00:16:26,030 --> 00:16:34,310
concepts on top of a unicorn so given

344
00:16:30,260 --> 00:16:36,439
the input binary we chilling provide all

345
00:16:34,310 --> 00:16:39,199
those environment orbiting system

346
00:16:36,440 --> 00:16:42,110
environment file system OS system cone

347
00:16:39,200 --> 00:16:47,030
and so on so can actually execute the

348
00:16:42,110 --> 00:16:50,630
binary properly not as native raw

349
00:16:47,030 --> 00:16:53,290
instructions and we building as a proper

350
00:16:50,630 --> 00:16:56,060
framework so you can view many as a

351
00:16:53,290 --> 00:17:00,079
analysis tools on top which chilli lies

352
00:16:56,060 --> 00:17:01,910
upon you just saw before and it's an

353
00:17:00,080 --> 00:17:08,949
exceptionally explained how it builds

354
00:17:01,910 --> 00:17:14,359
 okay so we look at some

355
00:17:08,949 --> 00:17:16,459
existing abilities and own up the tools

356
00:17:14,359 --> 00:17:17,839
you saw you see on the screen open

357
00:17:16,459 --> 00:17:22,370
source but nothing's perfect

358
00:17:17,839 --> 00:17:25,339
so like key mu is a mod it's a tool this

359
00:17:22,369 --> 00:17:27,530
one doesn't support Windows which means

360
00:17:25,339 --> 00:17:30,620
you cannot emulate Windows minor II

361
00:17:27,530 --> 00:17:32,870
which give user mode it doesn't run on

362
00:17:30,620 --> 00:17:35,449
Windows it doesn't provide

363
00:17:32,870 --> 00:17:37,790
instrumentation and it use our system

364
00:17:35,450 --> 00:17:40,870
cone 14 as the nature which is has some

365
00:17:37,790 --> 00:17:44,000
limitation that I explain later

366
00:17:40,870 --> 00:17:46,159
the cone is another tool and as we

367
00:17:44,000 --> 00:17:50,060
already explained it has a support

368
00:17:46,160 --> 00:17:52,910
Windows it is to go and lower we thing

369
00:17:50,060 --> 00:17:56,149
is not very friendly and it also use

370
00:17:52,910 --> 00:17:57,150
assist corner for the thinnest the next

371
00:17:56,150 --> 00:18:01,680
one is why

372
00:17:57,150 --> 00:18:04,230
you can is why to run Linux binary we

373
00:18:01,680 --> 00:18:08,430
don't spend any on Linux but why only

374
00:18:04,230 --> 00:18:10,050
support our Intel CPU and it only

375
00:18:08,430 --> 00:18:10,380
support in DOS it doesn't support in ten

376
00:18:10,050 --> 00:18:14,070
years

377
00:18:10,380 --> 00:18:17,730
lightly look so we VST or Mac OS it

378
00:18:14,070 --> 00:18:23,090
doesn't provide accommodation so you

379
00:18:17,730 --> 00:18:26,280
cannot do much with that WUSA which is a

380
00:18:23,090 --> 00:18:28,530
linux of system for Windows you can use

381
00:18:26,280 --> 00:18:32,210
this one to run Linux binaries on

382
00:18:28,530 --> 00:18:35,700
Windows but again just many limitation

383
00:18:32,210 --> 00:18:39,840
WUSA only support our Intel CPU memory

384
00:18:35,700 --> 00:18:42,300
and it only can support Linux binary it

385
00:18:39,840 --> 00:18:43,740
doesn't support line mac OS and of

386
00:18:42,300 --> 00:18:47,340
course we have no accommodation no

387
00:18:43,740 --> 00:18:51,360
sandbox and so on by D is a latest

388
00:18:47,340 --> 00:18:55,169
project which he wants of view on top of

389
00:18:51,360 --> 00:18:58,889
in the corn but many only focus on

390
00:18:55,170 --> 00:19:02,100
Windows panelist so it doesn't know you

391
00:18:58,890 --> 00:19:05,640
cannot emulate Linux or BSD or Mac OS

392
00:19:02,100 --> 00:19:09,179
binaries and actually I think that my

393
00:19:05,640 --> 00:19:11,940
knee is not really a favor is a tool so

394
00:19:09,180 --> 00:19:15,420
you cannot really be your analysis and

395
00:19:11,940 --> 00:19:17,880
resistant october pending and finally

396
00:19:15,420 --> 00:19:23,790
two years ago so we prefer something

397
00:19:17,880 --> 00:19:28,290
else which is more friendly okay so

398
00:19:23,790 --> 00:19:30,690
siscon forwarding so two of those to

399
00:19:28,290 --> 00:19:33,690
Nashua for kimu is mode and user

400
00:19:30,690 --> 00:19:37,530
currently use Siskin forwarding what

401
00:19:33,690 --> 00:19:41,190
does it means so given binary input

402
00:19:37,530 --> 00:19:45,450
binary and this tool can emulate those

403
00:19:41,190 --> 00:19:49,200
binaries now if the binary make a cone

404
00:19:45,450 --> 00:19:53,130
to OS that is system Condren how this

405
00:19:49,200 --> 00:19:55,650
tool handle the system so the way this

406
00:19:53,130 --> 00:19:57,780
tune they use the same technique they

407
00:19:55,650 --> 00:20:00,930
take the system would be request from

408
00:19:57,780 --> 00:20:02,670
the binary after that it they do not do

409
00:20:00,930 --> 00:20:05,550
anything but they forward the request to

410
00:20:02,670 --> 00:20:08,000
the house arrest and after that it take

411
00:20:05,550 --> 00:20:12,560
back the reaso and send it back to the

412
00:20:08,000 --> 00:20:16,930
to the program so the limitation of this

413
00:20:12,560 --> 00:20:20,389
technique is that you need to have the

414
00:20:16,930 --> 00:20:24,170
program binary and the host OS to be in

415
00:20:20,390 --> 00:20:25,400
the same OS which means if you the house

416
00:20:24,170 --> 00:20:29,630
OS is Windows

417
00:20:25,400 --> 00:20:33,830
you cannot emulate Linux binaries right

418
00:20:29,630 --> 00:20:38,600
you cannot build a same if you the host

419
00:20:33,830 --> 00:20:43,970
is is Linux you cannot do Cisco 14 for

420
00:20:38,600 --> 00:20:48,879
Windows by doing so you want something

421
00:20:43,970 --> 00:20:52,520
better so here's a hole full of chilling

422
00:20:48,880 --> 00:20:56,750
so before the input is a executable

423
00:20:52,520 --> 00:21:00,889
matter it can be EF from Linux or BSD it

424
00:20:56,750 --> 00:21:03,340
can be PE for windows 32-bit or in DotA

425
00:21:00,890 --> 00:21:06,230
super bit it can be much over for Mac OS

426
00:21:03,340 --> 00:21:09,919
so shielding will load the input

427
00:21:06,230 --> 00:21:14,180
binaries to the memory using our loader

428
00:21:09,920 --> 00:21:17,180
and after that we also have our own than

429
00:21:14,180 --> 00:21:19,610
the building code to map everything into

430
00:21:17,180 --> 00:21:23,320
the memory to resolve on the dependency

431
00:21:19,610 --> 00:21:23,320
and to fix all the important function

432
00:21:24,220 --> 00:21:31,160
more than that chilling on supervisor OS

433
00:21:27,800 --> 00:21:33,590
services to the memory so it provides a

434
00:21:31,160 --> 00:21:36,170
file system surface system conceived is

435
00:21:33,590 --> 00:21:40,879
so the binary can be loaded and run

436
00:21:36,170 --> 00:21:43,640
properly and on this system run on top

437
00:21:40,880 --> 00:21:46,730
of our CPU emulator on using in Econ

438
00:21:43,640 --> 00:21:48,920
engine and finally we have a lot of

439
00:21:46,730 --> 00:21:52,070
curve accommodation so when the program

440
00:21:48,920 --> 00:21:55,420
is emulated inside ceiling you can watch

441
00:21:52,070 --> 00:21:59,929
its behavior and you can even manipulate

442
00:21:55,420 --> 00:22:04,060
the execution if you want to and after

443
00:21:59,930 --> 00:22:04,060
that we can output ariza

444
00:22:07,370 --> 00:22:14,100
okay so we see that we support own cab

445
00:22:10,800 --> 00:22:16,950
CPUs you support own computing system

446
00:22:14,100 --> 00:22:19,379
which is a lot of work so remember that

447
00:22:16,950 --> 00:22:22,590
cheating has done is all nota

448
00:22:19,380 --> 00:22:27,230
right so you can see some code on the

449
00:22:22,590 --> 00:22:31,470
screen we have we have e LF not for EFI

450
00:22:27,230 --> 00:22:35,160
happy loader for Windows File you have a

451
00:22:31,470 --> 00:22:37,950
much a lot for Mikasa and Enzo slaughter

452
00:22:35,160 --> 00:22:40,110
you can see that we do I took the same

453
00:22:37,950 --> 00:22:45,750
thing as iOS what we do so first of all

454
00:22:40,110 --> 00:22:48,090
for EF paksa we load equal binary into

455
00:22:45,750 --> 00:22:50,910
the memory after that we check the first

456
00:22:48,090 --> 00:22:53,040
few files for first few bars in the

457
00:22:50,910 --> 00:22:56,700
inter header to see the distance

458
00:22:53,040 --> 00:22:59,250
actually is really the EF and after that

459
00:22:56,700 --> 00:23:01,740
we try to detect this face that touches

460
00:22:59,250 --> 00:23:05,480
with our city copied and we'll try to

461
00:23:01,740 --> 00:23:07,920
see this honest it an Indian or pequeña

462
00:23:05,480 --> 00:23:11,790
same thing for Windows we have lot of

463
00:23:07,920 --> 00:23:15,320
windows we do all kappa setup for OS

464
00:23:11,790 --> 00:23:15,320
environment and so on

465
00:23:17,630 --> 00:23:24,150
ok next part we need to emulate the

466
00:23:20,640 --> 00:23:26,550
system condi so for the post system of

467
00:23:24,150 --> 00:23:29,510
post opening system which is quite

468
00:23:26,550 --> 00:23:34,230
similar between Linux and BSD and Mac OS

469
00:23:29,510 --> 00:23:36,000
we do our emulation for all those system

470
00:23:34,230 --> 00:23:40,080
code because we do not want to forward

471
00:23:36,000 --> 00:23:42,060
the Cisco request to the house so what

472
00:23:40,080 --> 00:23:45,510
you do is that we emulate the Cystic on

473
00:23:42,060 --> 00:23:49,260
in the exact least the same way that the

474
00:23:45,510 --> 00:23:52,410
native OS hand had on the system first

475
00:23:49,260 --> 00:23:55,920
of all you can see on the screenshot we

476
00:23:52,410 --> 00:24:01,200
hand on the read system call so first we

477
00:23:55,920 --> 00:24:04,560
read in the the input buffer the part of

478
00:24:01,200 --> 00:24:07,550
the file and after that we check we make

479
00:24:04,560 --> 00:24:13,290
sure that files already open the file

480
00:24:07,550 --> 00:24:15,330
the Foresters is very after that we see

481
00:24:13,290 --> 00:24:18,560
if this one is from socket or from the

482
00:24:15,330 --> 00:24:19,870
noble fir and depending li you can

483
00:24:18,560 --> 00:24:21,610
conceive

484
00:24:19,870 --> 00:24:25,179
we can complete function from the hostel

485
00:24:21,610 --> 00:24:28,360
with the data from the file to the

486
00:24:25,180 --> 00:24:30,910
buffer provided by the system core and

487
00:24:28,360 --> 00:24:32,439
we write to the buffer and we read so

488
00:24:30,910 --> 00:24:38,220
yeah we need to access the same thing at

489
00:24:32,440 --> 00:24:38,220
a native Cisco hand on the request

490
00:24:38,820 --> 00:24:44,320
windows vita is more connected services

491
00:24:42,220 --> 00:24:47,110
you can see here's actually Windows

492
00:24:44,320 --> 00:24:49,179
memory they do not really actually cone

493
00:24:47,110 --> 00:24:54,129
to the degree cone to the system cone

494
00:24:49,180 --> 00:24:56,650
but they come to the library imported by

495
00:24:54,130 --> 00:25:00,190
the operating system by the windows so

496
00:24:56,650 --> 00:25:03,610
here because the windows binary easily

497
00:25:00,190 --> 00:25:07,420
except to some register to some segment

498
00:25:03,610 --> 00:25:10,449
visitor and to the seminar memory in our

499
00:25:07,420 --> 00:25:13,210
emulator we need to match some memory

500
00:25:10,450 --> 00:25:17,020
into the memory and use the memory as a

501
00:25:13,210 --> 00:25:20,500
semi memory so others on the screen you

502
00:25:17,020 --> 00:25:23,530
can see that we do own capital to set up

503
00:25:20,500 --> 00:25:30,490
the segment registers for the windows

504
00:25:23,530 --> 00:25:32,190
memory to to be iterated properly more

505
00:25:30,490 --> 00:25:34,480
than that because we know binary would

506
00:25:32,190 --> 00:25:36,520
also say asset to some previous

507
00:25:34,480 --> 00:25:40,000
structure like TB structure or pin

508
00:25:36,520 --> 00:25:44,320
structure we have to do the same thing

509
00:25:40,000 --> 00:25:47,380
we need to set up all obstructions to

510
00:25:44,320 --> 00:25:51,189
the memory and provide some structure to

511
00:25:47,380 --> 00:25:53,530
the to the to the tutor program so they

512
00:25:51,190 --> 00:26:01,630
can accept without such an S they can do

513
00:25:53,530 --> 00:26:04,870
with the Orion system Windows say hey

514
00:26:01,630 --> 00:26:06,610
okay something more completed so she

515
00:26:04,870 --> 00:26:11,020
says something when you need the power

516
00:26:06,610 --> 00:26:14,770
runs they frequently accept to some link

517
00:26:11,020 --> 00:26:17,110
list provided by the Windows OS in the

518
00:26:14,770 --> 00:26:20,770
memory so cheating need to provide the

519
00:26:17,110 --> 00:26:22,990
same link list right so here what do we

520
00:26:20,770 --> 00:26:26,679
do is that we set up zones within this

521
00:26:22,990 --> 00:26:29,620
we pass a dependency right around and

522
00:26:26,679 --> 00:26:31,929
you get also a function and put all

523
00:26:29,620 --> 00:26:33,020
those extra strategy into equals those

524
00:26:31,929 --> 00:26:37,940
doubling

525
00:26:33,020 --> 00:26:43,100
and you so well - own captain slides are

526
00:26:37,940 --> 00:26:46,210
like the windows dynamic linker - and

527
00:26:43,100 --> 00:26:50,539
also he hooks some windows API so can

528
00:26:46,210 --> 00:26:54,340
probably handle the dynamic loading

529
00:26:50,539 --> 00:26:54,340
model at runtime

530
00:26:54,700 --> 00:27:01,100
okay that's a operating system and next

531
00:26:58,730 --> 00:27:04,039
we need to handle the CPUs because we

532
00:27:01,100 --> 00:27:06,189
need to support all cast abuse so

533
00:27:04,039 --> 00:27:08,830
different CPU has different ways to

534
00:27:06,190 --> 00:27:11,240
initialize and cheating need to

535
00:27:08,830 --> 00:27:11,689
initialize the CPU before we can

536
00:27:11,240 --> 00:27:16,700
properly

537
00:27:11,690 --> 00:27:20,090
excu emulate the program memories so

538
00:27:16,700 --> 00:27:27,669
here for support for a Linux we need to

539
00:27:20,090 --> 00:27:31,250
set up on those GTT segments for DES CS

540
00:27:27,669 --> 00:27:34,340
SS same thing for Windows but a bit

541
00:27:31,250 --> 00:27:36,980
different with ourselves this of the

542
00:27:34,340 --> 00:27:39,559
seminary more infos and did map in and

543
00:27:36,980 --> 00:27:46,960
its own cap things for for Windows

544
00:27:39,559 --> 00:27:51,559
vanillish M is quite different from

545
00:27:46,960 --> 00:27:54,080
accessing because on those modern memory

546
00:27:51,559 --> 00:27:56,539
they rely on some special features of

547
00:27:54,080 --> 00:28:00,949
CPUs which is not in the code by default

548
00:27:56,539 --> 00:28:04,669
by in Econ engine so for chile we need

549
00:28:00,950 --> 00:28:08,270
to do some special setup life to

550
00:28:04,669 --> 00:28:13,340
initialize the CPU for em like 40 rs4 m

551
00:28:08,270 --> 00:28:15,889
to initialize the floating point 4 mm 64

552
00:28:13,340 --> 00:28:23,168
so the model Mallory can rely on those

553
00:28:15,890 --> 00:28:27,500
CP features miss we're committed because

554
00:28:23,169 --> 00:28:30,380
which has a skill named CP 0 and the CPU

555
00:28:27,500 --> 00:28:35,150
need to be properly initialized so the

556
00:28:30,380 --> 00:28:38,360
binary can rely on that and I thought

557
00:28:35,150 --> 00:28:40,700
how it'd be chilly we realize that you

558
00:28:38,360 --> 00:28:43,639
can doesn't allow

559
00:28:40,700 --> 00:28:45,840
program to set up the signal zero so our

560
00:28:43,640 --> 00:28:48,210
team has been a lot have to

561
00:28:45,840 --> 00:28:50,909
to figure out the home and we had to

562
00:28:48,210 --> 00:28:53,280
patch in the carnation to support this

563
00:28:50,910 --> 00:29:00,450
feature so we can run time cheating can

564
00:28:53,280 --> 00:29:07,850
turn on this CPU zero ok here's somebody

565
00:29:00,450 --> 00:29:07,850
most didn't suspect over Beijing ok

566
00:29:09,080 --> 00:29:19,080
thus like Caesar is VMware we open two

567
00:29:13,190 --> 00:29:22,800
we find our XPS and I didn't bring my

568
00:29:19,080 --> 00:29:25,260
Dell XPS I put all my trust and my faith

569
00:29:22,800 --> 00:29:28,110
into this small little pet that I bought

570
00:29:25,260 --> 00:29:31,590
two weeks ago so keep our finger crossed

571
00:29:28,110 --> 00:29:34,699
the demo will work all right yeah I know

572
00:29:31,590 --> 00:29:39,300
just nice you did a good job this time

573
00:29:34,700 --> 00:29:44,760
ok we will run some Linux demo on some

574
00:29:39,300 --> 00:29:48,180
hello world I will try to run this is

575
00:29:44,760 --> 00:29:51,810
I'm 64 pet we will try to run a um

576
00:29:48,180 --> 00:29:54,090
router firmware a mix router firmware it

577
00:29:51,810 --> 00:29:56,070
will not work hundred percent as we wish

578
00:29:54,090 --> 00:29:58,679
ok there are still some images that we

579
00:29:56,070 --> 00:30:04,080
couldn't show yet but it managed to run

580
00:29:58,680 --> 00:30:07,200
and then we do have some credit

581
00:30:04,080 --> 00:30:08,669
challenges in the repo I'm not too sure

582
00:30:07,200 --> 00:30:13,440
whether we can run it right now not it

583
00:30:08,670 --> 00:30:17,550
could take quite a fair bit of time yes

584
00:30:13,440 --> 00:30:19,470
some hello whoo we do ha after all

585
00:30:17,550 --> 00:30:22,860
different kind of hollow work and then

586
00:30:19,470 --> 00:30:24,420
if you go to github and look at the repo

587
00:30:22,860 --> 00:30:26,639
right now we just open source it a

588
00:30:24,420 --> 00:30:30,270
couple of minutes ago before our talk

589
00:30:26,640 --> 00:30:33,030
the binary that actually we provide

590
00:30:30,270 --> 00:30:36,930
comes with a static compiled binary and

591
00:30:33,030 --> 00:30:40,290
dynamically compiled binary and then a

592
00:30:36,930 --> 00:30:42,900
some IOT so what makes a chilling

593
00:30:40,290 --> 00:30:48,300
different from everybody is we can

594
00:30:42,900 --> 00:30:50,640
actually patch files library on the fly

595
00:30:48,300 --> 00:30:52,230
you don't have to patch your ass off you

596
00:30:50,640 --> 00:30:52,920
don't have to patch on your L you don't

597
00:30:52,230 --> 00:30:56,100
have to patch it

598
00:30:52,920 --> 00:30:58,350
actually you can just require you to

599
00:30:56,100 --> 00:30:59,360
patch on the fly on the memory so when

600
00:30:58,350 --> 00:31:01,879
the thing execute

601
00:30:59,360 --> 00:31:03,740
we patch we run so this is the few

602
00:31:01,880 --> 00:31:05,720
things that kept we can do so this is

603
00:31:03,740 --> 00:31:07,520
very this feature is very useful number

604
00:31:05,720 --> 00:31:09,650
one you can just patch whichever memory

605
00:31:07,520 --> 00:31:11,960
that it could let's say you're running a

606
00:31:09,650 --> 00:31:14,540
LT from where you're looking for camera

607
00:31:11,960 --> 00:31:16,610
so you want the camera always with and

608
00:31:14,540 --> 00:31:18,379
yes you don't you don't know your father

609
00:31:16,610 --> 00:31:20,570
II don't know then as you can use this

610
00:31:18,380 --> 00:31:23,360
feature to patch your elf to say that

611
00:31:20,570 --> 00:31:25,220
always written you're true to your to

612
00:31:23,360 --> 00:31:27,530
your file this is one of the thing you

613
00:31:25,220 --> 00:31:30,640
can patch and this particular example

614
00:31:27,530 --> 00:31:35,059
which is by default they are looking for

615
00:31:30,640 --> 00:31:36,470
dr0 interface br0 and we patch it by

616
00:31:35,059 --> 00:31:40,850
using Schilling not patching the file

617
00:31:36,470 --> 00:31:45,590
again so when we run the httpd the HTTP

618
00:31:40,850 --> 00:31:48,199
V the Lord lip CH I API slip chip API

619
00:31:45,590 --> 00:31:52,129
dot s o so it will patch that particular

620
00:31:48,200 --> 00:31:55,340
segment and then I change BR 0 to e NS

621
00:31:52,130 --> 00:31:57,500
33 by default Ubuntu the interface then

622
00:31:55,340 --> 00:31:59,240
we will run it on the spot this is fully

623
00:31:57,500 --> 00:32:01,429
announced the same features you can use

624
00:31:59,240 --> 00:32:05,030
of Windows just just imagine you want to

625
00:32:01,429 --> 00:32:07,400
patch something inside a pack malware

626
00:32:05,030 --> 00:32:09,730
you want to patch a pacman web without

627
00:32:07,400 --> 00:32:14,390
unpacking it this is totally possible

628
00:32:09,730 --> 00:32:17,690
okay so you can do that we gonna run

629
00:32:14,390 --> 00:32:19,370
wanna try on a ceiling not completely

630
00:32:17,690 --> 00:32:23,179
wanna cry but such sudden part of our

631
00:32:19,370 --> 00:32:25,129
wanna cry we will try to run crack me

632
00:32:23,179 --> 00:32:28,429
and see I don't think we can run the

633
00:32:25,130 --> 00:32:31,940
crack me you updated the Qod me we can

634
00:32:28,429 --> 00:32:33,020
try later okay and then we are not going

635
00:32:31,940 --> 00:32:38,240
to run this okay

636
00:32:33,020 --> 00:32:40,418
wanna cry correct me okay so time to

637
00:32:38,240 --> 00:32:40,419
free

638
00:32:44,910 --> 00:32:49,190
everybody can see oh good

639
00:32:55,370 --> 00:33:05,739
so we do have some you don't need this

640
00:33:03,440 --> 00:33:05,740
anyway

641
00:33:15,020 --> 00:33:25,690
so this is a wanna cry just in case you

642
00:33:19,400 --> 00:33:25,690
say I'm lying okay

643
00:33:31,250 --> 00:33:35,630
take a picture of this nb5 go to virus

644
00:33:33,860 --> 00:33:47,209
Delta and verified I'm running a real

645
00:33:35,630 --> 00:33:49,360
wanna cry and uh what five oh you're

646
00:33:47,210 --> 00:33:49,360
right

647
00:33:57,520 --> 00:34:09,820
okay and this is a true Windows Exe file

648
00:34:01,779 --> 00:34:12,570
again I didn't lie so this will that's

649
00:34:09,820 --> 00:34:12,570
clear all these things

650
00:34:17,940 --> 00:34:23,309
so you can see it set the CBO cetera

651
00:34:20,819 --> 00:34:27,199
area for the CBO and then in Lautner or

652
00:34:23,309 --> 00:34:31,530
the DLL required for wanna cry and then

653
00:34:27,199 --> 00:34:35,609
it will run when a cry and it stopped at

654
00:34:31,530 --> 00:34:39,690
the internet open URL that is the

655
00:34:35,609 --> 00:34:42,089
coolest reach for when I cry alright we

656
00:34:39,690 --> 00:34:44,639
didn't implement the that the reason why

657
00:34:42,089 --> 00:34:47,129
we wanted to stop here is we don't do it

658
00:34:44,639 --> 00:34:50,609
purposely we don't have the expertise

659
00:34:47,129 --> 00:34:52,799
and the time to finish all the windows

660
00:34:50,609 --> 00:34:55,409
API that we'll be able to run on Linux

661
00:34:52,799 --> 00:34:57,599
ok so we were thinking of a couple of

662
00:34:55,409 --> 00:35:01,890
our alternatives one of them is can be

663
00:34:57,599 --> 00:35:03,930
wrapped around wine - run - run chilling

664
00:35:01,890 --> 00:35:05,788
on top of together with wine to get the

665
00:35:03,930 --> 00:35:08,190
windows API running that is option

666
00:35:05,789 --> 00:35:11,030
number one and the other one is os

667
00:35:08,190 --> 00:35:14,670
what's there the open source windows the

668
00:35:11,030 --> 00:35:18,869
react oh s but we discovered their DLL

669
00:35:14,670 --> 00:35:22,980
inside real us is not as genuine as as a

670
00:35:18,869 --> 00:35:24,359
as the original windows so that will be

671
00:35:22,980 --> 00:35:26,880
another option and we are still thinking

672
00:35:24,359 --> 00:35:29,670
of do we have another option or we need

673
00:35:26,880 --> 00:35:36,559
to write most of the API ourselves so

674
00:35:29,670 --> 00:35:40,770
this is completely um base I'm 64 base

675
00:35:36,559 --> 00:35:42,720
Android running a Windows Exe ok and we

676
00:35:40,770 --> 00:35:44,910
can do instrumentation so we can stop at

677
00:35:42,720 --> 00:35:50,038
which path we won we can replace a

678
00:35:44,910 --> 00:35:53,029
certain part we won all right so uh we

679
00:35:50,039 --> 00:35:53,029
have this thing caller

680
00:36:00,450 --> 00:36:05,259
do you have this router

681
00:36:02,320 --> 00:36:08,380
Oh in Russia called tender Chinese make

682
00:36:05,260 --> 00:36:11,350
OS a chinese-made bit router apparently

683
00:36:08,380 --> 00:36:13,870
it's very famous in China so what do we

684
00:36:11,350 --> 00:36:16,299
have is uh we took the air from where we

685
00:36:13,870 --> 00:36:20,049
extract it and we discovered it only

686
00:36:16,300 --> 00:36:22,150
runs httpd and then at the httpd will

687
00:36:20,050 --> 00:36:23,950
connects to a mb ram and we Ram is the

688
00:36:22,150 --> 00:36:26,230
place that store configuration if you

689
00:36:23,950 --> 00:36:28,299
are playing with IOT and you you should

690
00:36:26,230 --> 00:36:30,310
be familiar with a nvram and we

691
00:36:28,300 --> 00:36:33,130
discovered the mb ram is not a real

692
00:36:30,310 --> 00:36:34,840
nvram they are running on the UDS UNIX

693
00:36:33,130 --> 00:36:36,460
domain sockets so we just need to

694
00:36:34,840 --> 00:36:39,700
emulate the unique size of in socket

695
00:36:36,460 --> 00:36:42,370
this particular part of code that you

696
00:36:39,700 --> 00:36:43,149
have seen it's it's pretty much same

697
00:36:42,370 --> 00:36:45,580
like the slides

698
00:36:43,150 --> 00:36:47,920
the only thing difference is just now I

699
00:36:45,580 --> 00:36:52,090
show you the screenshot it was ENS 33

700
00:36:47,920 --> 00:36:53,590
open to default interface and this

701
00:36:52,090 --> 00:36:56,380
machine over here it running

702
00:36:53,590 --> 00:36:58,600
they only have one interface called W

703
00:36:56,380 --> 00:37:05,260
land 0 so I have to patch it with either

704
00:36:58,600 --> 00:37:06,940
pure land 0 so we need to run two files

705
00:37:05,260 --> 00:37:09,760
together in order to make a distinct

706
00:37:06,940 --> 00:37:11,110
work so you can see inside this shell

707
00:37:09,760 --> 00:37:13,450
script they they actually run two

708
00:37:11,110 --> 00:37:15,940
commands one is the shell script to

709
00:37:13,450 --> 00:37:17,890
simulate the nvram okay which is a

710
00:37:15,940 --> 00:37:29,860
unique set of in socket and one is to

711
00:37:17,890 --> 00:37:32,529
run the httpd again binary 32-bit

712
00:37:29,860 --> 00:37:39,010
together with my machine is ARMA 64-bit

713
00:37:32,530 --> 00:37:40,690
so we still able to run it so once we

714
00:37:39,010 --> 00:37:42,250
execute it will goes into all the

715
00:37:40,690 --> 00:37:44,860
different parts so what you can see over

716
00:37:42,250 --> 00:37:46,870
here is a HTTP request so that we

717
00:37:44,860 --> 00:37:49,240
managed to run the library actually

718
00:37:46,870 --> 00:37:53,069
because on a certain interface and it's

719
00:37:49,240 --> 00:37:53,069
running on a 480 so

720
00:37:59,070 --> 00:38:05,340
so if I go to localhost right now I will

721
00:38:03,090 --> 00:38:11,910
be able to see cannot interface which

722
00:38:05,340 --> 00:38:19,340
Iran okay originally originally it

723
00:38:11,910 --> 00:38:19,339
should listen on port 80 but this is bad

724
00:38:26,230 --> 00:38:33,410
okay so right now we should lost some of

725
00:38:30,460 --> 00:38:36,469
it anyway okay so

726
00:38:33,410 --> 00:38:36,469
[Music]

727
00:38:45,839 --> 00:38:49,459
there's no more patent okay

728
00:38:56,610 --> 00:39:01,280
now sometimes you must be stood there

729
00:38:58,350 --> 00:39:01,279
okay so uh

730
00:39:08,550 --> 00:39:19,020
so we have this uh can we draw here no

731
00:39:13,430 --> 00:39:22,339
no okay down there the mindset box and

732
00:39:19,020 --> 00:39:25,110
then QL chilling down there you can see

733
00:39:22,340 --> 00:39:28,380
QLD goes to sauce there is option that

734
00:39:25,110 --> 00:39:30,450
we added in so if anything that required

735
00:39:28,380 --> 00:39:32,730
root and we can simulate root then we

736
00:39:30,450 --> 00:39:35,720
will change it on the spot so by default

737
00:39:32,730 --> 00:39:40,470
the binary for httpd is listening on 80

738
00:39:35,720 --> 00:39:42,569
so if we add in this option any any tcp

739
00:39:40,470 --> 00:39:45,089
port that listens less than 1 0 to 4

740
00:39:42,570 --> 00:39:47,280
which requires good we will add 8,000 on

741
00:39:45,090 --> 00:39:49,020
top of the pot so that is why you can

742
00:39:47,280 --> 00:39:55,260
see what 8080 over there

743
00:39:49,020 --> 00:39:59,759
alright that is a one part and uh what

744
00:39:55,260 --> 00:40:03,720
was that again thank you we can try

745
00:39:59,760 --> 00:40:07,680
later okay that gear is a little bit

746
00:40:03,720 --> 00:40:10,020
complicated okay it's meet so during the

747
00:40:07,680 --> 00:40:12,750
entire project makes is one of the

748
00:40:10,020 --> 00:40:16,740
Seaview that gives us most of the issue

749
00:40:12,750 --> 00:40:19,050
so we discovered this Netgear this

750
00:40:16,740 --> 00:40:21,689
firmware requires two binary they have

751
00:40:19,050 --> 00:40:24,300
one binary called mini httpd and they

752
00:40:21,690 --> 00:40:26,940
wrap around another binary so apparently

753
00:40:24,300 --> 00:40:29,340
a mini httpd it's a it's an open-source

754
00:40:26,940 --> 00:40:33,300
project and then I wrap around the seti

755
00:40:29,340 --> 00:40:36,720
so binary within a binary that gives six

756
00:40:33,300 --> 00:40:38,960
two two zero one of the nicer outer its

757
00:40:36,720 --> 00:40:42,410
meat so let's do this

758
00:40:38,960 --> 00:40:42,410
there's four more minutes

759
00:40:45,730 --> 00:40:54,190
okay this is a MIPS again we are running

760
00:40:48,710 --> 00:40:54,190
in arm and uh

761
00:40:59,690 --> 00:41:04,520
okay no 80 not a DVD we shouldn't have

762
00:41:04,039 --> 00:41:06,670
ready

763
00:41:04,520 --> 00:41:06,670
No

764
00:41:09,980 --> 00:41:17,050
keep finger cross it's multi-threaded so

765
00:41:13,579 --> 00:41:17,050
it's supposed to be a multi-threaded

766
00:41:22,010 --> 00:41:25,010
okie-dokie

767
00:41:27,920 --> 00:41:35,400
so this is the net gears uh interface

768
00:41:31,860 --> 00:41:40,290
are six two two zero simple localhost we

769
00:41:35,400 --> 00:41:44,280
are running and almost enough from there

770
00:41:40,290 --> 00:41:48,590
for you to do a analysis okay I think we

771
00:41:44,280 --> 00:41:48,590
do have some patching right over there

772
00:41:49,520 --> 00:41:56,630
we should leave the damn thing over

773
00:41:51,450 --> 00:41:56,629
there so we don't have to okay

774
00:41:59,680 --> 00:42:02,580
he does it

775
00:42:04,560 --> 00:42:07,400
which one was it

776
00:42:18,240 --> 00:42:28,828
we have cracked me windows can we run

777
00:42:24,910 --> 00:42:28,828
this that's the present

778
00:42:43,910 --> 00:42:49,529
okay we have this uh small little

779
00:42:47,250 --> 00:42:54,150
cracked me over here this cracked me

780
00:42:49,530 --> 00:42:56,310
it's from this crack me is from this

781
00:42:54,150 --> 00:43:01,230
website called reversing dot K are a

782
00:42:56,310 --> 00:43:03,779
Korean base reverse engineering a game

783
00:43:01,230 --> 00:43:06,830
playing website this is one of the

784
00:43:03,780 --> 00:43:09,480
earliest stage and the flag is easy

785
00:43:06,830 --> 00:43:11,040
reversing with some weird spelling so

786
00:43:09,480 --> 00:43:21,480
what do we have over here at this

787
00:43:11,040 --> 00:43:24,480
windows binary again it's a Microsoft

788
00:43:21,480 --> 00:43:26,940
for Windows and this is a Windows pop-up

789
00:43:24,480 --> 00:43:28,920
binary which means if you get this exe

790
00:43:26,940 --> 00:43:30,510
you double click and then you have a

791
00:43:28,920 --> 00:43:32,850
pop-up and then you have a text box for

792
00:43:30,510 --> 00:43:34,500
you to key in your flag if your fact is

793
00:43:32,850 --> 00:43:36,420
correct than the written congratulation

794
00:43:34,500 --> 00:43:38,730
if your flag is wrong then they will

795
00:43:36,420 --> 00:43:54,600
tell you your flag is wrong so what we

796
00:43:38,730 --> 00:43:56,760
gonna do over here is okay so what we're

797
00:43:54,600 --> 00:43:59,700
gonna do over here it's uh no no this is

798
00:43:56,760 --> 00:44:02,460
just the execution and then why you have

799
00:43:59,700 --> 00:44:05,069
this a stack push that starts that push

800
00:44:02,460 --> 00:44:06,750
thingy it's a this is for us to emulate

801
00:44:05,070 --> 00:44:10,440
the import and then we need to push up

802
00:44:06,750 --> 00:44:18,270
to the stack just to simulate the dialog

803
00:44:10,440 --> 00:44:22,500
box our input so we have this unpatched

804
00:44:18,270 --> 00:44:25,800
version it runs faster right now so

805
00:44:22,500 --> 00:44:30,420
hello so what you can see over here is

806
00:44:25,800 --> 00:44:33,600
uh we run the exe file is simulate the

807
00:44:30,420 --> 00:44:35,460
windows pop up into a text box and then

808
00:44:33,600 --> 00:44:38,730
we put in hello it says a password

809
00:44:35,460 --> 00:44:41,690
incorrect right so we're gonna do this

810
00:44:38,730 --> 00:44:41,690
same thing again

811
00:44:53,870 --> 00:44:56,500
yeah

812
00:44:57,580 --> 00:45:02,460
so one foul and then now we're gonna run

813
00:45:14,200 --> 00:45:17,160
Kahn pitch

814
00:45:24,350 --> 00:45:27,310
we have to patch

815
00:45:29,570 --> 00:45:33,040
I don't have a bachelor with you

816
00:45:38,590 --> 00:45:45,300
I don't have the petrol here it's a

817
00:45:42,880 --> 00:45:45,300
comic

818
00:45:47,330 --> 00:45:57,950
okay okay old times over so initially we

819
00:45:55,850 --> 00:46:01,460
wanted to show the one motion is we

820
00:45:57,950 --> 00:46:03,710
patch on the fly and patch and unpatch

821
00:46:01,460 --> 00:46:08,990
so you can see the difference so if you

822
00:46:03,710 --> 00:46:11,930
go to uh if you go to a shilling dot IO

823
00:46:08,990 --> 00:46:14,720
right now the website is life and the

824
00:46:11,930 --> 00:46:18,379
most important thing it's you don't have

825
00:46:14,720 --> 00:46:22,189
the code that's the code I mean should

826
00:46:18,380 --> 00:46:23,960
we need a code right now okay so and

827
00:46:22,190 --> 00:46:28,930
then if you go to github shilling

828
00:46:23,960 --> 00:46:33,500
framework we just make the source code

829
00:46:28,930 --> 00:46:41,990
public film in itself all our talk

830
00:46:33,500 --> 00:46:49,130
yes thank you very much okay the only

831
00:46:41,990 --> 00:46:52,399
differences is uh decides quit the only

832
00:46:49,130 --> 00:46:54,440
differences is uh we don't put in the

833
00:46:52,400 --> 00:46:57,500
windows DLL so if you wanted to run

834
00:46:54,440 --> 00:46:59,600
Windows do you have to copy we put in

835
00:46:57,500 --> 00:47:01,310
the exact motion of our windows yeah all

836
00:46:59,600 --> 00:47:03,920
that we are immolate so you need to copy

837
00:47:01,310 --> 00:47:05,570
your owner windows DRL and let the Fila

838
00:47:03,920 --> 00:47:07,910
you don't have the panda from the inside

839
00:47:05,570 --> 00:47:09,410
okay we don't get sued it's an open

840
00:47:07,910 --> 00:47:10,670
source project we are poor enough so we

841
00:47:09,410 --> 00:47:12,589
don't get suit

842
00:47:10,670 --> 00:47:16,940
we don't have the annette gear firmware

843
00:47:12,590 --> 00:47:18,440
in there but uh if you want to get all

844
00:47:16,940 --> 00:47:20,750
these of them where you can look for us

845
00:47:18,440 --> 00:47:22,940
that relief and send send us a secret

846
00:47:20,750 --> 00:47:26,420
message so we can send the file to you

847
00:47:22,940 --> 00:47:27,110
secretly we cannot send you the windows

848
00:47:26,420 --> 00:47:28,730
dll file

849
00:47:27,110 --> 00:47:30,230
okay I think we can mess with send out

850
00:47:28,730 --> 00:47:31,970
we can resonate that that year but we

851
00:47:30,230 --> 00:47:34,340
don't mercy for Microsoft okay they are

852
00:47:31,970 --> 00:47:36,950
to reach all right anything else

853
00:47:34,340 --> 00:47:39,340
questions No thank you please applause

854
00:47:36,950 --> 00:47:39,339
the game

