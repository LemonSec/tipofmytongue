1
00:00:07,980 --> 00:00:16,849
[Music]

2
00:00:13,269 --> 00:00:20,029
okay hi hello

3
00:00:16,849 --> 00:00:23,360
so a little forward this is gonna be

4
00:00:20,029 --> 00:00:27,859
some hard core Java research my name is

5
00:00:23,360 --> 00:00:32,689
Ann and I'm gonna be talking about that

6
00:00:27,859 --> 00:00:37,780
size of Java remote protocols so earlier

7
00:00:32,689 --> 00:00:37,780
we conducted a research over several

8
00:00:37,960 --> 00:00:44,750
popular Java remote protocols and found

9
00:00:41,420 --> 00:00:49,370
a lot of overlooked and no except

10
00:00:44,750 --> 00:00:52,339
vectors on it actually from my research

11
00:00:49,370 --> 00:00:55,790
a hundred percent of the products that I

12
00:00:52,339 --> 00:00:58,930
do the research on vulnerable to the

13
00:00:55,790 --> 00:01:03,979
vulnerabilities listed in the slides

14
00:00:58,930 --> 00:01:08,439
about seven or eight of them I can get

15
00:01:03,979 --> 00:01:12,710
RCE on it meaning remote code execution

16
00:01:08,439 --> 00:01:15,710
products of VMware Dell even Apache

17
00:01:12,710 --> 00:01:18,699
Tomcat and IBM WebSphere so wait for it

18
00:01:15,710 --> 00:01:18,699
all right

19
00:01:19,090 --> 00:01:25,789
okay so my name is Anne researcher from

20
00:01:23,060 --> 00:01:28,909
Vietnam a local company convict cyber

21
00:01:25,789 --> 00:01:32,570
security specialized in application

22
00:01:28,909 --> 00:01:36,619
security you may have know me from the

23
00:01:32,570 --> 00:01:42,249
recent remote coast of executions Sega

24
00:01:36,619 --> 00:01:51,219
on the email application name Zimbra and

25
00:01:42,249 --> 00:01:55,068
I also do bug bounties and vulnerability

26
00:01:51,219 --> 00:02:00,109
selling to zbi and I defend and stuff

27
00:01:55,069 --> 00:02:03,409
like that all right so let's go

28
00:02:00,109 --> 00:02:06,408
about every mod remote protocol so in

29
00:02:03,409 --> 00:02:07,009
this talk I will talk about I'm I and

30
00:02:06,409 --> 00:02:12,110
Cova

31
00:02:07,009 --> 00:02:16,400
I'm I in Java meanings its full name is

32
00:02:12,110 --> 00:02:18,410
a my running over GMP protocol so it's a

33
00:02:16,400 --> 00:02:22,150
proprietary protocol

34
00:02:18,410 --> 00:02:25,480
for Java and is used for remote

35
00:02:22,150 --> 00:02:29,840
communications between Java applications

36
00:02:25,480 --> 00:02:34,120
mean why Cola is a specifications that

37
00:02:29,840 --> 00:02:37,580
apply for many many other

38
00:02:34,120 --> 00:02:41,900
object-oriented languages including C++

39
00:02:37,580 --> 00:02:52,030
and Java and the Java version at coba is

40
00:02:41,900 --> 00:02:55,220
named i'm i over i io p alright alright

41
00:02:52,030 --> 00:02:59,720
okay so i'm gonna be talking about i'm i

42
00:02:55,220 --> 00:03:02,870
over GMP and i am i over i io p let's

43
00:02:59,720 --> 00:03:06,609
talk about GMP first because this is by

44
00:03:02,870 --> 00:03:10,400
far the most famous protocol for Java

45
00:03:06,610 --> 00:03:12,460
the architecture is pretty simple it

46
00:03:10,400 --> 00:03:14,740
consists of a client talking with a

47
00:03:12,460 --> 00:03:18,170
registry service

48
00:03:14,740 --> 00:03:20,870
DGC service and the custom services the

49
00:03:18,170 --> 00:03:25,100
custom service is where the main service

50
00:03:20,870 --> 00:03:28,220
the main work is taking place the dredge

51
00:03:25,100 --> 00:03:30,920
history is where is a special service

52
00:03:28,220 --> 00:03:32,840
where it keep a record of all the

53
00:03:30,920 --> 00:03:34,489
service so if you want to talk to a

54
00:03:32,840 --> 00:03:36,860
custom service you have to ask the

55
00:03:34,490 --> 00:03:39,230
registry first the for record and then

56
00:03:36,860 --> 00:03:42,080
you can know you you know knew the

57
00:03:39,230 --> 00:03:43,730
information to connect to the custom

58
00:03:42,080 --> 00:03:47,410
service and did you see it's just

59
00:03:43,730 --> 00:03:53,120
another service for garbage collection

60
00:03:47,410 --> 00:03:58,790
it isn't that important so talking at

61
00:03:53,120 --> 00:04:02,090
the protocol service I it's it's medical

62
00:03:58,790 --> 00:04:06,440
method car in remote remote method

63
00:04:02,090 --> 00:04:10,420
invocation is compare composed of one

64
00:04:06,440 --> 00:04:13,480
pair of TCP requests and response and

65
00:04:10,420 --> 00:04:16,969
methods are reference to another

66
00:04:13,480 --> 00:04:22,039
intermediary object it is from the class

67
00:04:16,970 --> 00:04:24,950
unicast over wrap and it's I must have

68
00:04:22,040 --> 00:04:27,680
it how exactly one class of that type

69
00:04:24,950 --> 00:04:30,560
and that class

70
00:04:27,680 --> 00:04:32,120
map-21 exactly one class and that class

71
00:04:30,560 --> 00:04:34,850
has the remote

72
00:04:32,120 --> 00:04:42,380
method we want to invoke so let's talk

73
00:04:34,850 --> 00:04:45,919
about am i under the wire so this is the

74
00:04:42,380 --> 00:04:48,290
first the beginning of I my pocket it

75
00:04:45,919 --> 00:04:52,039
has the header which is at the magic the

76
00:04:48,290 --> 00:04:54,889
version the protocol and that's the

77
00:04:52,040 --> 00:04:59,120
operation the operation can be caught up

78
00:04:54,889 --> 00:05:01,540
in so if in case we want to invoke the

79
00:04:59,120 --> 00:05:05,419
method we use the operation call but

80
00:05:01,540 --> 00:05:08,330
when we want to just know it exists and

81
00:05:05,419 --> 00:05:12,229
we just invoke the operation pin so this

82
00:05:08,330 --> 00:05:15,500
is you this is where applications like

83
00:05:12,229 --> 00:05:19,430
and map the network scanner used for to

84
00:05:15,500 --> 00:05:22,639
identify I my protocol under the why it

85
00:05:19,430 --> 00:05:25,669
can't use it just invoked a pen call to

86
00:05:22,639 --> 00:05:30,440
the I my service and if it returns and

87
00:05:25,669 --> 00:05:34,159
it if it's not acknowledge the request

88
00:05:30,440 --> 00:05:36,560
then it's a network or code then there's

89
00:05:34,160 --> 00:05:38,900
the object ID this will be the main

90
00:05:36,560 --> 00:05:43,310
identification for the my service

91
00:05:38,900 --> 00:05:46,760
basically is a unique identifier it has

92
00:05:43,310 --> 00:05:49,220
a random values which will be used to

93
00:05:46,760 --> 00:05:54,200
identify that service among everyone

94
00:05:49,220 --> 00:05:57,910
else everything else cool so here you

95
00:05:54,200 --> 00:06:01,430
can see it under the in the code it's

96
00:05:57,910 --> 00:06:04,220
using the object ID and the TCP socket

97
00:06:01,430 --> 00:06:09,199
the socket that the server is listening

98
00:06:04,220 --> 00:06:13,010
on to and it composed to an object and

99
00:06:09,199 --> 00:06:15,260
you search an hash table

100
00:06:13,010 --> 00:06:19,250
the object has the object typo hash

101
00:06:15,260 --> 00:06:23,900
table to find a matching object of that

102
00:06:19,250 --> 00:06:26,240
type right cool so after the object ID

103
00:06:23,900 --> 00:06:28,880
we have the norm and the house the house

104
00:06:26,240 --> 00:06:31,460
is on the next important identifier that

105
00:06:28,880 --> 00:06:35,740
is used to reference a method house ID

106
00:06:31,460 --> 00:06:39,500
this will be a from a list of predefined

107
00:06:35,740 --> 00:06:42,409
method ID that we define from when we

108
00:06:39,500 --> 00:06:44,690
call it the application of and num

109
00:06:42,409 --> 00:06:45,380
there's also the number the number this

110
00:06:44,690 --> 00:06:47,200
is

111
00:06:45,380 --> 00:06:49,730
and for the number it's actually

112
00:06:47,200 --> 00:06:52,190
deprecated and not being used anymore

113
00:06:49,730 --> 00:06:54,800
but this will be this number will play a

114
00:06:52,190 --> 00:06:57,230
very important part in one one of the

115
00:06:54,800 --> 00:07:03,080
attack vector that will be imagining

116
00:06:57,230 --> 00:07:05,480
nests so we know that therefore the

117
00:07:03,080 --> 00:07:08,539
information needed to invoke the nine my

118
00:07:05,480 --> 00:07:12,890
service is the object ID and target

119
00:07:08,540 --> 00:07:14,810
method house so so how do you invoke the

120
00:07:12,890 --> 00:07:17,900
registry and the digit service so these

121
00:07:14,810 --> 00:07:20,450
are the special services and they have

122
00:07:17,900 --> 00:07:23,780
the pre know that pre known to the

123
00:07:20,450 --> 00:07:25,640
client this have well no object ID and

124
00:07:23,780 --> 00:07:28,760
method has so you Justin can just

125
00:07:25,640 --> 00:07:32,409
compute it beforehand and then invoked

126
00:07:28,760 --> 00:07:35,420
it afterwards

127
00:07:32,410 --> 00:07:41,900
yeah method has can be calculated from

128
00:07:35,420 --> 00:07:45,380
the method description and next the next

129
00:07:41,900 --> 00:07:49,000
most important point is after the it get

130
00:07:45,380 --> 00:07:52,130
the corresponding method it will

131
00:07:49,000 --> 00:07:54,260
construct the arguments and then passed

132
00:07:52,130 --> 00:07:57,230
it to the method invocation the server

133
00:07:54,260 --> 00:08:00,920
then passes then compute the return

134
00:07:57,230 --> 00:08:05,750
value and passes back on the wire so how

135
00:08:00,920 --> 00:08:08,540
how do given this is a network protocol

136
00:08:05,750 --> 00:08:11,330
and this is curry coded in Java how do

137
00:08:08,540 --> 00:08:14,300
you argument and return value are and

138
00:08:11,330 --> 00:08:18,890
masher and mash of meaning to switch

139
00:08:14,300 --> 00:08:22,310
from the from the higher layer point of

140
00:08:18,890 --> 00:08:25,130
view to the wire so yeah this is exactly

141
00:08:22,310 --> 00:08:26,480
what Java syrran serialization is

142
00:08:25,130 --> 00:08:28,850
beautiful

143
00:08:26,480 --> 00:08:32,630
so the that's what I'm gonna be talking

144
00:08:28,850 --> 00:08:35,150
about next the serialization exploits so

145
00:08:32,630 --> 00:08:37,789
past exploit the most well know exploit

146
00:08:35,150 --> 00:08:41,959
in the past is from more it's better

147
00:08:37,789 --> 00:08:45,010
he's released a registry exploit on the

148
00:08:41,960 --> 00:08:48,980
registry service service in 2016 and

149
00:08:45,010 --> 00:08:52,939
explore and save this arises and it has

150
00:08:48,980 --> 00:08:55,160
a couple of dollar signs that in that it

151
00:08:52,940 --> 00:08:57,770
only works with the registry server port

152
00:08:55,160 --> 00:08:59,209
and it is fixed things

153
00:08:57,770 --> 00:09:04,040
gie

154
00:08:59,210 --> 00:09:06,560
a you want to want so there's also the

155
00:09:04,040 --> 00:09:08,810
DGC exploit this is a lesser known than

156
00:09:06,560 --> 00:09:11,000
the registries of it but it is that it's

157
00:09:08,810 --> 00:09:14,660
actually the better one because this

158
00:09:11,000 --> 00:09:17,210
service can we can invoke this service

159
00:09:14,660 --> 00:09:21,290
from every part in the server

160
00:09:17,210 --> 00:09:25,430
application because if the code in the

161
00:09:21,290 --> 00:09:29,420
Java Runtime compared if the object ID

162
00:09:25,430 --> 00:09:32,030
is equal to DG c ID then it will make

163
00:09:29,420 --> 00:09:34,550
the transport into no meaning to skip

164
00:09:32,030 --> 00:09:37,430
the transport check meaning we can

165
00:09:34,550 --> 00:09:40,430
invoke it and on any server part and

166
00:09:37,430 --> 00:09:43,250
this is also fixed in eight version no

167
00:09:40,430 --> 00:09:46,459
one to one so what's special about

168
00:09:43,250 --> 00:09:50,180
wasn't one to one so in version 8 one to

169
00:09:46,460 --> 00:09:56,060
one Java Runtime introduces Jap to 19 so

170
00:09:50,180 --> 00:09:58,760
this is an API an 80 90 AV API built

171
00:09:56,060 --> 00:10:01,250
into object input stream to imposed a

172
00:09:58,760 --> 00:10:04,520
class Wireless check during the

173
00:10:01,250 --> 00:10:08,570
serialization meaning if you you have to

174
00:10:04,520 --> 00:10:10,579
dis your lights only types that are in

175
00:10:08,570 --> 00:10:14,360
the wireless otherwise it will reject

176
00:10:10,580 --> 00:10:16,310
this realization yeah so before this

177
00:10:14,360 --> 00:10:17,900
come came around we have to use a

178
00:10:16,310 --> 00:10:21,829
technique called look ahead the

179
00:10:17,900 --> 00:10:24,860
serialization and it take a lot of

180
00:10:21,830 --> 00:10:29,350
resources to build a look ahead you see

181
00:10:24,860 --> 00:10:32,480
a system that actually works so ok so

182
00:10:29,350 --> 00:10:35,180
this is built in for the registry

183
00:10:32,480 --> 00:10:40,070
service and the digits of it on in Java

184
00:10:35,180 --> 00:10:42,199
runtime version 1 to 1 so the registry

185
00:10:40,070 --> 00:10:45,590
service they basically block they

186
00:10:42,200 --> 00:10:48,620
basically wireless only classes that are

187
00:10:45,590 --> 00:10:52,370
in the IMI packages so this is where the

188
00:10:48,620 --> 00:10:55,840
fun coming in looking for the unknown so

189
00:10:52,370 --> 00:11:02,660
first by first by part on the I my

190
00:10:55,840 --> 00:11:06,830
registry if so it's also another gadget

191
00:11:02,660 --> 00:11:09,829
from Moritz Bela but it's came around

192
00:11:06,830 --> 00:11:12,950
since 2016 it be no it's been a long

193
00:11:09,830 --> 00:11:17,120
time and it's not originally

194
00:11:12,950 --> 00:11:20,180
tended to target this attack scenario it

195
00:11:17,120 --> 00:11:24,170
was all generally intended to get around

196
00:11:20,180 --> 00:11:27,500
about blacklist bypass blacklist class

197
00:11:24,170 --> 00:11:30,680
check for this utilization phone with

198
00:11:27,500 --> 00:11:32,990
this for example the reason or Oracle

199
00:11:30,680 --> 00:11:35,839
WebLogic two-three protocol uses the

200
00:11:32,990 --> 00:11:38,060
this gadget tuba bypass the blacklist

201
00:11:35,840 --> 00:11:42,200
that Oracle built into the WebLogic

202
00:11:38,060 --> 00:11:44,089
application yeah and he has a design it

203
00:11:42,200 --> 00:11:48,380
triggers outside of the serialization

204
00:11:44,090 --> 00:11:51,320
flow meaning you cannot read the respond

205
00:11:48,380 --> 00:11:54,610
from it yeah you can just can read the

206
00:11:51,320 --> 00:11:57,350
return value you have to use an external

207
00:11:54,610 --> 00:11:58,610
communication channel HTTP or DNS or

208
00:11:57,350 --> 00:12:02,060
something like that to read the return

209
00:11:58,610 --> 00:12:04,010
value yeah so we know acumen and return

210
00:12:02,060 --> 00:12:07,969
values are these utilized on the server

211
00:12:04,010 --> 00:12:10,610
side so how about the client side yeah

212
00:12:07,970 --> 00:12:15,260
so this is the first attack vector that

213
00:12:10,610 --> 00:12:18,380
we came up the idea is to turn a server

214
00:12:15,260 --> 00:12:21,050
side I my call to a client cycle so how

215
00:12:18,380 --> 00:12:25,280
do we do that i'm i actually has an

216
00:12:21,050 --> 00:12:28,370
interesting feature it has a proxy proxy

217
00:12:25,280 --> 00:12:34,579
interface so friends anyone who doesn't

218
00:12:28,370 --> 00:12:37,910
know about java proxy it is used to like

219
00:12:34,580 --> 00:12:40,250
to proxy from a method interface an

220
00:12:37,910 --> 00:12:42,589
interface method call to another method

221
00:12:40,250 --> 00:12:45,290
car that is defined in the invocation

222
00:12:42,590 --> 00:12:48,050
handler so in this case we use the

223
00:12:45,290 --> 00:12:51,380
remote object invocation handler from

224
00:12:48,050 --> 00:12:55,280
the java i my package this is in the

225
00:12:51,380 --> 00:12:59,510
wireless of the registry and so the

226
00:12:55,280 --> 00:13:02,270
problem is to is how to get from the

227
00:12:59,510 --> 00:13:06,500
read object call to the remote object

228
00:13:02,270 --> 00:13:08,319
invocation handler yeah so we figure it

229
00:13:06,500 --> 00:13:11,960
out and we will show it to you later and

230
00:13:08,320 --> 00:13:16,100
but it and and it has one upside is that

231
00:13:11,960 --> 00:13:23,450
it it can read the return value because

232
00:13:16,100 --> 00:13:26,070
the exploit is used in the DC Rison flow

233
00:13:23,450 --> 00:13:28,290
so it can be used at the s

234
00:13:26,070 --> 00:13:31,949
these are actually expectation Channel

235
00:13:28,290 --> 00:13:36,839
unlike the previous Explorer so this is

236
00:13:31,949 --> 00:13:40,439
a gadget in action as you can see at the

237
00:13:36,839 --> 00:13:42,930
bottom of the stack trace we are using

238
00:13:40,440 --> 00:13:47,370
the unicast remote object these are all

239
00:13:42,930 --> 00:13:49,500
in the classes of I my packages and we

240
00:13:47,370 --> 00:13:53,100
are using the universe remote object as

241
00:13:49,500 --> 00:13:55,440
a like a trampoline to jump into an

242
00:13:53,100 --> 00:13:57,959
interface method card and at the

243
00:13:55,440 --> 00:14:01,170
interface math car we can use the proxy

244
00:13:57,959 --> 00:14:07,680
the remote invocation editor to proxy it

245
00:14:01,170 --> 00:14:10,920
into an ami clients I call so when it

246
00:14:07,680 --> 00:14:13,949
invokes an my client side then it will

247
00:14:10,920 --> 00:14:17,719
read on it invokes read object on an

248
00:14:13,949 --> 00:14:17,719
unfiltered stream meaning there's no

249
00:14:17,990 --> 00:14:24,569
filter on that stream there's no class

250
00:14:20,970 --> 00:14:28,139
check on the screen yeah so then again

251
00:14:24,569 --> 00:14:31,290
we have a Abbott ready civilization so

252
00:14:28,139 --> 00:14:34,260
this is our correspond this is the issue

253
00:14:31,290 --> 00:14:37,199
is after jab to 90 so there is a way to

254
00:14:34,260 --> 00:14:40,819
prevent the attacks and they call

255
00:14:37,199 --> 00:14:43,920
considered defense in death and they

256
00:14:40,819 --> 00:14:46,260
they citing the officer document and

257
00:14:43,920 --> 00:14:49,889
they require users to manually configure

258
00:14:46,260 --> 00:14:50,490
a stream Fuhrer to block these chains ok

259
00:14:49,889 --> 00:14:53,550
cool

260
00:14:50,490 --> 00:14:57,350
they didn't recognize this world with

261
00:14:53,550 --> 00:15:00,719
the unlimited user responsibility and

262
00:14:57,350 --> 00:15:02,930
we'll see later as how well how well

263
00:15:00,720 --> 00:15:08,060
developed or how well all the vendors

264
00:15:02,930 --> 00:15:13,819
disagree to that to that statement and

265
00:15:08,060 --> 00:15:16,709
before that we we will talk about

266
00:15:13,819 --> 00:15:18,630
actually or what I want the the most

267
00:15:16,709 --> 00:15:20,790
important attack surface that I want to

268
00:15:18,630 --> 00:15:23,579
talk about this is the custom service

269
00:15:20,790 --> 00:15:24,569
way so besides the registry and the

270
00:15:23,579 --> 00:15:26,519
digit service

271
00:15:24,569 --> 00:15:28,290
there's the customs of it where you

272
00:15:26,519 --> 00:15:30,930
invoke the real method call that you

273
00:15:28,290 --> 00:15:34,639
want to invoke at the beginning and this

274
00:15:30,930 --> 00:15:34,638
is a local attack surface

275
00:15:34,720 --> 00:15:42,310
so for this chip soon I T defined that

276
00:15:38,800 --> 00:15:44,890
you have to manually specify a filter on

277
00:15:42,310 --> 00:15:47,920
the input stream or calling the mash or

278
00:15:44,890 --> 00:15:50,140
input stream to validate the invocation

279
00:15:47,920 --> 00:15:52,959
arguments at the M and Marshall

280
00:15:50,140 --> 00:15:54,730
so a little fun fact is that they are

281
00:15:52,959 --> 00:15:57,310
wrong in the statement there's no remote

282
00:15:54,730 --> 00:15:59,860
server Rev they they meant unicast of

283
00:15:57,310 --> 00:16:02,619
reps and seems like that's it there's no

284
00:15:59,860 --> 00:16:05,640
more documents to have developers secure

285
00:16:02,620 --> 00:16:08,649
there are my instances so again users

286
00:16:05,640 --> 00:16:10,660
responsibility so hike lightly a vendor

287
00:16:08,649 --> 00:16:13,690
of a product follows their

288
00:16:10,660 --> 00:16:16,360
recommendations what the answer is none

289
00:16:13,690 --> 00:16:20,170
for every every product we research on

290
00:16:16,360 --> 00:16:24,880
including yeah VMware Delpy water I put

291
00:16:20,170 --> 00:16:26,979
a patch carafe Cassandra EDC EDC there

292
00:16:24,880 --> 00:16:29,020
are so many products that we just can't

293
00:16:26,980 --> 00:16:32,200
download them all and research its

294
00:16:29,020 --> 00:16:35,079
product basically what we did is we just

295
00:16:32,200 --> 00:16:38,230
put a Google Doc on the search engine

296
00:16:35,080 --> 00:16:40,779
and then then buy every available

297
00:16:38,230 --> 00:16:46,000
product that we can find and pour it

298
00:16:40,779 --> 00:16:49,209
down and test it whether it's affected

299
00:16:46,000 --> 00:16:53,560
by the vulnerability and for for anyone

300
00:16:49,209 --> 00:16:56,619
curious there is I got a see in at least

301
00:16:53,560 --> 00:16:59,319
seven or a of them the one I didn't get

302
00:16:56,620 --> 00:17:02,410
ASEAN is because there's no simply then

303
00:16:59,320 --> 00:17:05,709
there's no gap yet there's just too

304
00:17:02,410 --> 00:17:12,579
little get just space to find a working

305
00:17:05,709 --> 00:17:15,670
a see each in yeah so cool but one more

306
00:17:12,579 --> 00:17:20,290
thing is every vendor did not update the

307
00:17:15,670 --> 00:17:23,020
gie version two after jab 290 with this

308
00:17:20,290 --> 00:17:26,740
one to one version so looks like they

309
00:17:23,020 --> 00:17:29,080
are aware of the registry and the digit

310
00:17:26,740 --> 00:17:30,820
exploit but thought that they are the

311
00:17:29,080 --> 00:17:35,320
only way that I might can be exploited

312
00:17:30,820 --> 00:17:37,750
so yeah we achieve I see and most of

313
00:17:35,320 --> 00:17:42,070
them through yeah some more get your

314
00:17:37,750 --> 00:17:44,679
chance so this is very simple Explorer

315
00:17:42,070 --> 00:17:48,350
analysis it sounds complicated but it

316
00:17:44,679 --> 00:17:54,080
when it works another wise very simple

317
00:17:48,350 --> 00:17:56,869
so Rima recalling the the I am my packet

318
00:17:54,080 --> 00:17:59,629
from the beginning you just so in this

319
00:17:56,869 --> 00:18:02,869
case the Agyeman in the real argument is

320
00:17:59,629 --> 00:18:06,649
the hello world string so when you want

321
00:18:02,869 --> 00:18:08,359
to explore it you just simply we replace

322
00:18:06,649 --> 00:18:10,129
the string object with a commons

323
00:18:08,359 --> 00:18:14,840
collection object or something like that

324
00:18:10,129 --> 00:18:17,119
all a commons beauties gadget or GDK

325
00:18:14,840 --> 00:18:19,428
only catch it yet depending on the

326
00:18:17,119 --> 00:18:24,649
caches face yeah and it's really that

327
00:18:19,429 --> 00:18:27,909
simple and this is a fun example this is

328
00:18:24,649 --> 00:18:32,258
where chain where I get a nice e on

329
00:18:27,909 --> 00:18:37,509
VMware your eyes operation manager and

330
00:18:32,259 --> 00:18:43,159
they use the I'm are extensively on pot

331
00:18:37,509 --> 00:18:47,269
ten pots from two in three thousand and

332
00:18:43,159 --> 00:18:50,539
they use a gie one-to-one and they have

333
00:18:47,269 --> 00:18:53,419
the Commons be annuities get it but that

334
00:18:50,539 --> 00:18:57,739
we're execution from it fail because as

335
00:18:53,419 --> 00:19:00,590
you might have known most of the get two

336
00:18:57,739 --> 00:19:01,970
chains publicly available rely on a

337
00:19:00,590 --> 00:19:05,359
feature called

338
00:19:01,970 --> 00:19:09,759
silence template implement class this

339
00:19:05,359 --> 00:19:14,149
will be at use a tan and gadget to

340
00:19:09,759 --> 00:19:19,399
escalate from a simple method call to

341
00:19:14,149 --> 00:19:21,949
the definition of malicious by code so

342
00:19:19,399 --> 00:19:25,340
basically the the class isn't available

343
00:19:21,950 --> 00:19:30,440
in the product because the product use a

344
00:19:25,340 --> 00:19:33,649
Security Manager to harden product so

345
00:19:30,440 --> 00:19:36,979
when the security manager Java Runtime

346
00:19:33,649 --> 00:19:40,488
simply reject series deserialization of

347
00:19:36,979 --> 00:19:43,129
templates implement class so well I

348
00:19:40,489 --> 00:19:47,029
modified the pin silty gadget to invoke

349
00:19:43,129 --> 00:19:50,709
so and and by the way this not from what

350
00:19:47,029 --> 00:19:53,779
I know this is not public before I

351
00:19:50,710 --> 00:19:56,779
modified the be newest gadget to invoke

352
00:19:53,779 --> 00:20:01,280
gdb Rose gdb C rosette implement gather

353
00:19:56,779 --> 00:20:03,530
this is a class in cause Java Renza and

354
00:20:01,280 --> 00:20:10,870
that this cloud has the ability to make

355
00:20:03,530 --> 00:20:14,960
a remote GND I call and for Java version

356
00:20:10,870 --> 00:20:19,340
lower than niver zijn won i won

357
00:20:14,960 --> 00:20:22,730
there will be a CV 2018 three one four

358
00:20:19,340 --> 00:20:26,240
nine which leads to from the gid icon to

359
00:20:22,730 --> 00:20:29,809
the remote class low explosion area but

360
00:20:26,240 --> 00:20:32,000
again but again most of the products as

361
00:20:29,809 --> 00:20:36,649
to you under disclosure products process

362
00:20:32,000 --> 00:20:39,590
so um yeah I I went a little bit too far

363
00:20:36,650 --> 00:20:42,080
there but that's about as far I can get

364
00:20:39,590 --> 00:20:46,760
mmm so let's talk about another

365
00:20:42,080 --> 00:20:51,020
interesting scenario attack scenario GMX

366
00:20:46,760 --> 00:20:54,440
jmx is a java management extensions it

367
00:20:51,020 --> 00:20:57,590
when it used remotely it runs also over

368
00:20:54,440 --> 00:21:01,280
the I my power chords so this is the

369
00:20:57,590 --> 00:21:03,678
flow where the first line fetches GMX I

370
00:21:01,280 --> 00:21:08,030
my record from the dredge registry and

371
00:21:03,679 --> 00:21:12,500
then it caused the new client method to

372
00:21:08,030 --> 00:21:17,450
authenticate so in the past there had

373
00:21:12,500 --> 00:21:20,659
been an exploit on this protocol because

374
00:21:17,450 --> 00:21:23,870
the Java runs habit and implement a

375
00:21:20,659 --> 00:21:28,940
future for the argument string types so

376
00:21:23,870 --> 00:21:31,549
this list do CV and then if the

377
00:21:28,940 --> 00:21:34,909
authentication process was successful it

378
00:21:31,549 --> 00:21:37,400
Fox a new I'm a listener and then it

379
00:21:34,909 --> 00:21:40,400
connects to the I'm a service and

380
00:21:37,400 --> 00:21:43,909
invoke the actual GMX methods that we

381
00:21:40,400 --> 00:21:47,840
want to invoke so oh the Fox Service

382
00:21:43,909 --> 00:21:51,919
random act object ID so as as I said

383
00:21:47,840 --> 00:21:54,230
object ID is what identify an i my

384
00:21:51,919 --> 00:21:56,840
service so if one can boot for that

385
00:21:54,230 --> 00:21:59,360
object ID during the service Sam spent

386
00:21:56,840 --> 00:22:02,149
he can bypass the authentication usually

387
00:21:59,360 --> 00:22:05,870
meaning I see but that's not really

388
00:22:02,150 --> 00:22:10,149
practical because object ID is pre is

389
00:22:05,870 --> 00:22:14,550
random enough not to be able forced Bo

390
00:22:10,149 --> 00:22:18,379
and surprise the for our my service did

391
00:22:14,550 --> 00:22:21,840
does not have any fever implemented so

392
00:22:18,380 --> 00:22:24,390
anyone after authentication can achieve

393
00:22:21,840 --> 00:22:29,010
of the arbitrary the serialization so

394
00:22:24,390 --> 00:22:31,280
this book was acquired by an vendor

395
00:22:29,010 --> 00:22:36,270
called a defense so they booked this

396
00:22:31,280 --> 00:22:38,129
purchased the Burke and but actually it

397
00:22:36,270 --> 00:22:41,550
turns out that after gie

398
00:22:38,130 --> 00:22:44,880
ten there is the attribute that you can

399
00:22:41,550 --> 00:22:49,379
specify this girl to wireless class that

400
00:22:44,880 --> 00:22:52,830
you can dis utilize on the gmx after the

401
00:22:49,380 --> 00:22:55,940
GMA photo gmx services but there's no

402
00:22:52,830 --> 00:22:59,760
document absolutely no document for that

403
00:22:55,940 --> 00:23:02,580
attribute and the latest Gi Gi II

404
00:22:59,760 --> 00:23:05,160
version 8 still has no way to prevent

405
00:23:02,580 --> 00:23:08,100
that it has no it doesn't have that

406
00:23:05,160 --> 00:23:12,720
attribute so it still count as a

407
00:23:08,100 --> 00:23:18,480
vulnerability from what I think yeah so

408
00:23:12,720 --> 00:23:24,870
cool that's about a me of your GMP so

409
00:23:18,480 --> 00:23:28,770
this is a lot more complex that koba

410
00:23:24,870 --> 00:23:32,040
protocol so as I said Java's koba pro

411
00:23:28,770 --> 00:23:35,850
implementation is called i me i my over

412
00:23:32,040 --> 00:23:42,240
i io p IRP is the protocol that it's

413
00:23:35,850 --> 00:23:44,580
running on so co-op provides native API

414
00:23:42,240 --> 00:23:47,670
the kabobs piece of specifications

415
00:23:44,580 --> 00:23:49,860
provide nadie API to and marshal simple

416
00:23:47,670 --> 00:23:52,770
object structures that is only known to

417
00:23:49,860 --> 00:23:56,209
the Cova protocols like primitives in

418
00:23:52,770 --> 00:24:00,240
integer and stuff like that strings and

419
00:23:56,210 --> 00:24:01,860
color objects color object is not to be

420
00:24:00,240 --> 00:24:04,920
confused with Java object they're

421
00:24:01,860 --> 00:24:07,439
different thing and but things version 2

422
00:24:04,920 --> 00:24:11,610
or 3 comma allows more complex language

423
00:24:07,440 --> 00:24:14,580
dependent dependent object types see

424
00:24:11,610 --> 00:24:16,500
what is going on here so there's the

425
00:24:14,580 --> 00:24:19,530
smell of the serialization Explorer

426
00:24:16,500 --> 00:24:21,390
again so this is actually not related to

427
00:24:19,530 --> 00:24:25,530
the object input stream that we usually

428
00:24:21,390 --> 00:24:28,230
see but internally the the koba input

429
00:24:25,530 --> 00:24:31,530
stream we use the same deserialization

430
00:24:28,230 --> 00:24:33,870
serializing mechanism so it's not

431
00:24:31,530 --> 00:24:36,629
related to the object input stream so

432
00:24:33,870 --> 00:24:43,739
they can happen so it's not affected by

433
00:24:36,630 --> 00:24:48,450
the jab 290 update so so meaning this is

434
00:24:43,740 --> 00:24:49,020
not known to any vendor at the time see

435
00:24:48,450 --> 00:24:53,130
reason

436
00:24:49,020 --> 00:24:56,429
yeah so let me show case an interesting

437
00:24:53,130 --> 00:24:59,960
example IBM WebSphere where's the fear

438
00:24:56,429 --> 00:25:04,620
applications over it's a very popular

439
00:24:59,960 --> 00:25:08,910
web application server and its use I my

440
00:25:04,620 --> 00:25:11,629
ILP extensively on before all parts like

441
00:25:08,910 --> 00:25:17,850
the four ports you see on the screen I

442
00:25:11,630 --> 00:25:21,600
am but I am modifying the whole API for

443
00:25:17,850 --> 00:25:26,000
Koba in Java Runtime to its own come

444
00:25:21,600 --> 00:25:28,250
IBM ILP so they did do it for

445
00:25:26,000 --> 00:25:32,100
implementing their own second

446
00:25:28,250 --> 00:25:35,370
authentication mechanism so our goal

447
00:25:32,100 --> 00:25:39,740
here is to find a place that hand rose

448
00:25:35,370 --> 00:25:43,500
Koba 2.3 object and happens before

449
00:25:39,740 --> 00:25:45,590
authentication because we need a result

450
00:25:43,500 --> 00:25:49,140
indication remote code execution

451
00:25:45,590 --> 00:25:52,159
so we reverse the protocol and find some

452
00:25:49,140 --> 00:25:56,580
places that many many places on that

453
00:25:52,160 --> 00:26:00,990
have that behavior so this is the class

454
00:25:56,580 --> 00:26:04,649
that would be an interceptor between the

455
00:26:00,990 --> 00:26:10,320
micro and authentication mechanism it

456
00:26:04,650 --> 00:26:14,760
will so basically it has a additional

457
00:26:10,320 --> 00:26:16,559
few that except and some Batory

458
00:26:14,760 --> 00:26:18,330
all the data all the data doesn't

459
00:26:16,559 --> 00:26:20,879
related the stream and then you will

460
00:26:18,330 --> 00:26:23,280
call later call the input stream not

461
00:26:20,880 --> 00:26:26,760
read any meaning the input stream that

462
00:26:23,280 --> 00:26:32,178
read any later we will be serialized a

463
00:26:26,760 --> 00:26:35,549
COBOL 2.3 object so that's our endpoint

464
00:26:32,179 --> 00:26:37,500
cool so where to go from here

465
00:26:35,549 --> 00:26:40,440
we still need to file suitable suitable

466
00:26:37,500 --> 00:26:41,970
gadget to escalate from here into remote

467
00:26:40,440 --> 00:26:44,640
code execution

468
00:26:41,970 --> 00:26:47,360
but IBM Kuwait is very hardened they

469
00:26:44,640 --> 00:26:50,670
remove the silent templates implement

470
00:26:47,360 --> 00:26:55,080
survival series serializable a

471
00:26:50,670 --> 00:26:56,750
capability completely and have very

472
00:26:55,080 --> 00:27:00,000
strict Club classloader

473
00:26:56,750 --> 00:27:03,240
providing Olynyk classes and run time so

474
00:27:00,000 --> 00:27:06,330
they happen they minimize the Gatos fate

475
00:27:03,240 --> 00:27:10,050
at most as much as possible but still

476
00:27:06,330 --> 00:27:13,280
the library is a huge sum we dig deep

477
00:27:10,050 --> 00:27:16,620
and with our server in interesting get

478
00:27:13,280 --> 00:27:21,990
so this is one of the gadget is this is

479
00:27:16,620 --> 00:27:25,739
a gadget but not actually in IBM Cole

480
00:27:21,990 --> 00:27:29,130
Bates is in the access a patch access

481
00:27:25,740 --> 00:27:31,410
Kuwait it will provide us the ability to

482
00:27:29,130 --> 00:27:33,810
writing do an arbitrary file on the

483
00:27:31,410 --> 00:27:36,510
server but the content can only be

484
00:27:33,810 --> 00:27:39,540
serialized data so I the first thing I

485
00:27:36,510 --> 00:27:42,600
think of is to construct a web shell and

486
00:27:39,540 --> 00:27:46,080
write it on the web directory of what

487
00:27:42,600 --> 00:27:50,449
Sophia but it doesn't work because the

488
00:27:46,080 --> 00:27:54,960
serialize that we have the first byte as

489
00:27:50,450 --> 00:28:00,030
not text data so IBM didn't recognize

490
00:27:54,960 --> 00:28:03,200
this at a valid GSP GSP five so it

491
00:28:00,030 --> 00:28:05,970
rejects handling it so it's kind of

492
00:28:03,200 --> 00:28:09,360
unfortunate but it can still be used to

493
00:28:05,970 --> 00:28:14,610
for example over a web config and then

494
00:28:09,360 --> 00:28:17,189
make the application unusable denial

495
00:28:14,610 --> 00:28:20,250
service I mean okay so another

496
00:28:17,190 --> 00:28:21,210
interesting gadget that can lead to

497
00:28:20,250 --> 00:28:26,160
co-executors

498
00:28:21,210 --> 00:28:29,790
is that it is you can instantiate a

499
00:28:26,160 --> 00:28:34,620
b-tree class in any job package by a

500
00:28:29,790 --> 00:28:40,320
file wrapper palaka so meaning you can

501
00:28:34,620 --> 00:28:42,750
get from any G&E I mean not yen dia

502
00:28:40,320 --> 00:28:47,700
because there are a lot of GNA I cause

503
00:28:42,750 --> 00:28:50,310
in the IBM Kuwait so basically GN we are

504
00:28:47,700 --> 00:28:55,370
loading jndi loading meaning rate object

505
00:28:50,310 --> 00:29:00,290
in a BM cases so you can go from any

506
00:28:55,370 --> 00:29:04,309
object into the instant instantiate a

507
00:29:00,290 --> 00:29:08,600
b-tree class on the server so this is

508
00:29:04,309 --> 00:29:14,780
only for fire protocol so but we want to

509
00:29:08,600 --> 00:29:18,709
load a malicious class from under

510
00:29:14,780 --> 00:29:21,379
attacker control so what did you yeah so

511
00:29:18,710 --> 00:29:24,100
there's the windows UNC Fatih that the

512
00:29:21,380 --> 00:29:29,150
previous researcher that talked about

513
00:29:24,100 --> 00:29:32,659
that's also pretty cool you can wrap the

514
00:29:29,150 --> 00:29:36,170
fire protocol over the windows UNC iPod

515
00:29:32,660 --> 00:29:39,770
and then it will load the class over SMB

516
00:29:36,170 --> 00:29:41,570
4 4 4 5 port and then we can control the

517
00:29:39,770 --> 00:29:46,400
data the classes

518
00:29:41,570 --> 00:29:50,000
it loads and then actually but but still

519
00:29:46,400 --> 00:29:54,500
most of this is they wonder this closer

520
00:29:50,000 --> 00:29:59,240
and it's the Bucs won't go anytime soon

521
00:29:54,500 --> 00:30:02,620
because the IBM Co base is very huge and

522
00:29:59,240 --> 00:30:07,429
it will take a lot of time to fix of the

523
00:30:02,620 --> 00:30:10,669
right object invocations so yeah if the

524
00:30:07,429 --> 00:30:14,260
books gonna be with us for a while cool

525
00:30:10,670 --> 00:30:17,300
so let's move on to another case

526
00:30:14,260 --> 00:30:20,120
security manager or in Security Manager

527
00:30:17,300 --> 00:30:23,480
so there's another previous researcher

528
00:30:20,120 --> 00:30:26,809
talking about this at blackhat 16 on Co

529
00:30:23,480 --> 00:30:29,900
we're also on Cola so when this

530
00:30:26,809 --> 00:30:33,620
utilizing koban ID objects again this is

531
00:30:29,900 --> 00:30:37,309
not a Java object this is for the Cobra

532
00:30:33,620 --> 00:30:40,300
protocol it will allow Java Runtime will

533
00:30:37,309 --> 00:30:44,120
allows remote cloud class loading and

534
00:30:40,300 --> 00:30:48,200
instantiation so basically this is like

535
00:30:44,120 --> 00:30:51,290
this gets a chain but without the fire

536
00:30:48,200 --> 00:30:53,900
protocol so we can lower it over HTTP or

537
00:30:51,290 --> 00:30:58,210
something like that but it only works

538
00:30:53,900 --> 00:31:03,080
with if a security manager is present so

539
00:30:58,210 --> 00:31:05,210
if a security measure is Anibal and it

540
00:31:03,080 --> 00:31:07,939
allows for example about socket

541
00:31:05,210 --> 00:31:09,080
connection this is like turning to

542
00:31:07,940 --> 00:31:13,700
insecure secure

543
00:31:09,080 --> 00:31:19,370
manager and it will lead to remote code

544
00:31:13,700 --> 00:31:22,010
execution yeah cool so let's get the

545
00:31:19,370 --> 00:31:23,540
serialization McCoy aside and moving on

546
00:31:22,010 --> 00:31:25,940
to something more interesting the

547
00:31:23,540 --> 00:31:28,129
registry this is one of the services

548
00:31:25,940 --> 00:31:31,760
that I talked about the special service

549
00:31:28,130 --> 00:31:36,970
that talked about attacking the registry

550
00:31:31,760 --> 00:31:40,940
so the red jabber registry provide many

551
00:31:36,970 --> 00:31:44,450
operations interesting to the client so

552
00:31:40,940 --> 00:31:47,540
of all of them the most important one is

553
00:31:44,450 --> 00:31:52,070
the rebind method so the rebuy method

554
00:31:47,540 --> 00:31:54,800
allows you to to modify an existing

555
00:31:52,070 --> 00:31:57,889
record in the registry into an order

556
00:31:54,800 --> 00:32:01,850
record could be under attacker control

557
00:31:57,890 --> 00:32:03,560
so yeah this is a the create a classic

558
00:32:01,850 --> 00:32:06,500
Mad Men in the Minamata

559
00:32:03,560 --> 00:32:09,110
without any of the human factor or the

560
00:32:06,500 --> 00:32:13,490
LAN factor so and it's fully transparent

561
00:32:09,110 --> 00:32:16,330
and Cline has no way to know it's being

562
00:32:13,490 --> 00:32:19,550
eavesdrop so what do we gain from this

563
00:32:16,330 --> 00:32:23,600
so what do we gain from any man in the

564
00:32:19,550 --> 00:32:27,500
middle attack so for imagine GM

565
00:32:23,600 --> 00:32:30,590
ex-soviet authentication when service

566
00:32:27,500 --> 00:32:39,140
the DMX service passed the Queen's House

567
00:32:30,590 --> 00:32:41,840
over the Y it will most likely passes

568
00:32:39,140 --> 00:32:45,200
the grants all over the why we we can

569
00:32:41,840 --> 00:32:47,360
use this attack to capture the GMX

570
00:32:45,200 --> 00:32:51,260
quenchers and then it would be most

571
00:32:47,360 --> 00:32:54,949
likely actually the details we follow

572
00:32:51,260 --> 00:32:58,100
and the customer services well the web

573
00:32:54,950 --> 00:33:00,170
and vmware vsphere data protection also

574
00:32:58,100 --> 00:33:05,810
passed we and chose over a my connection

575
00:33:00,170 --> 00:33:09,470
so cave yet but that it doesn't it isn't

576
00:33:05,810 --> 00:33:12,290
that easy i my registry dispatcher it

577
00:33:09,470 --> 00:33:15,560
has been protected by a check access

578
00:33:12,290 --> 00:33:18,320
meaning is only accessed from a address

579
00:33:15,560 --> 00:33:21,350
on bible protocol so but actually this

580
00:33:18,320 --> 00:33:22,939
access access could already be of a flaw

581
00:33:21,350 --> 00:33:25,399
in itself because

582
00:33:22,940 --> 00:33:29,900
one if has local connection is can

583
00:33:25,400 --> 00:33:32,090
escalate privileges so yeah but things

584
00:33:29,900 --> 00:33:34,610
doesn't stuff like that there's another

585
00:33:32,090 --> 00:33:37,639
overlooked and interesting one day

586
00:33:34,610 --> 00:33:43,090
meaning a CV that discovered by another

587
00:33:37,640 --> 00:33:46,250
researcher so basically the dispatcher

588
00:33:43,090 --> 00:33:51,379
didn't leaden handles correctly the co

589
00:33:46,250 --> 00:33:56,179
flow meaning if you remind the okay

590
00:33:51,380 --> 00:33:58,130
remember the num num num number field

591
00:33:56,179 --> 00:34:01,730
that I talked about in the I my

592
00:33:58,130 --> 00:34:05,780
structure so it will be used here if the

593
00:34:01,730 --> 00:34:08,570
number which we can control is lower

594
00:34:05,780 --> 00:34:11,600
than zero is lower than zero is will

595
00:34:08,570 --> 00:34:13,970
speak the access check a cow flow and

596
00:34:11,600 --> 00:34:19,250
then excuse the method directly meaning

597
00:34:13,969 --> 00:34:21,319
we can skip the local local check so go

598
00:34:19,250 --> 00:34:24,469
in the bar and robots yeah and other

599
00:34:21,320 --> 00:34:27,800
researchers discover these months

600
00:34:24,469 --> 00:34:29,418
earlier and they assigned the CV but

601
00:34:27,800 --> 00:34:31,629
they were using it for different acts

602
00:34:29,418 --> 00:34:35,868
effector they were using it for an

603
00:34:31,629 --> 00:34:38,210
sandbox tip so which mean this attack

604
00:34:35,869 --> 00:34:41,929
vector is to I believe is they won no at

605
00:34:38,210 --> 00:34:45,770
the time and another interesting feature

606
00:34:41,929 --> 00:34:50,590
an outlet feature one day or feature so

607
00:34:45,770 --> 00:34:54,020
I might allow proxy over HTTP so many if

608
00:34:50,590 --> 00:34:56,750
it detects the protocol to be a TDP it

609
00:34:54,020 --> 00:34:59,270
will turn the remote house into zero

610
00:34:56,750 --> 00:35:01,400
zero zero zero which is available in the

611
00:34:59,270 --> 00:35:05,540
file meaning it coming from local host

612
00:35:01,400 --> 00:35:09,380
and we can bypass the exit check but

613
00:35:05,540 --> 00:35:12,710
then again another researcher reported

614
00:35:09,380 --> 00:35:15,200
as a again a different case they

615
00:35:12,710 --> 00:35:18,710
deposited as clients are request forgery

616
00:35:15,200 --> 00:35:21,080
and it isn't related to this attack

617
00:35:18,710 --> 00:35:24,100
surface yeah so it's one more

618
00:35:21,080 --> 00:35:26,930
interesting scenario that we can use to

619
00:35:24,100 --> 00:35:31,430
exploit it's cool so let's get into

620
00:35:26,930 --> 00:35:34,609
action so this is a the Explorer

621
00:35:31,430 --> 00:35:36,069
analysis so let's just say they're the

622
00:35:34,609 --> 00:35:37,960
alleged client

623
00:35:36,070 --> 00:35:40,750
the registry alleges serve it and the

624
00:35:37,960 --> 00:35:43,120
attacker so first the attacker connect

625
00:35:40,750 --> 00:35:46,950
to the registry and it modifies the

626
00:35:43,120 --> 00:35:51,190
alleged server into it it's a rope agent

627
00:35:46,950 --> 00:35:55,509
cool via the one of the two features I

628
00:35:51,190 --> 00:35:57,610
described earlier and then when the

629
00:35:55,510 --> 00:35:59,710
logic client asks for the gmx I my

630
00:35:57,610 --> 00:36:03,700
service it will be redirected to the

631
00:35:59,710 --> 00:36:06,460
attacker control agent and when the

632
00:36:03,700 --> 00:36:08,319
client connects it will be connecting to

633
00:36:06,460 --> 00:36:11,290
the attacker and then you would present

634
00:36:08,320 --> 00:36:14,680
any free answers Bonilla will be pattern

635
00:36:11,290 --> 00:36:18,009
so this is like basically 90% of how and

636
00:36:14,680 --> 00:36:20,230
I my registry is created is using this

637
00:36:18,010 --> 00:36:23,170
method card so basically any method call

638
00:36:20,230 --> 00:36:27,100
that is you any I my registry is created

639
00:36:23,170 --> 00:36:30,270
using this a pattern is vulnerable so

640
00:36:27,100 --> 00:36:34,120
you can just like Google Doc the the

641
00:36:30,270 --> 00:36:37,360
code here and then report a bunch of CVS

642
00:36:34,120 --> 00:36:39,819
under your name or you can get help get

643
00:36:37,360 --> 00:36:42,520
help dog or something like that because

644
00:36:39,820 --> 00:36:47,770
this is like 90% of how registry is

645
00:36:42,520 --> 00:36:50,980
graded cool so let's get do I see so if

646
00:36:47,770 --> 00:36:55,630
quit actually I don't have much stronger

647
00:36:50,980 --> 00:36:57,730
so let's keep the necessary thing so if

648
00:36:55,630 --> 00:37:01,090
you have the retry privilege which is

649
00:36:57,730 --> 00:37:04,450
the most widely used privilege in gmx

650
00:37:01,090 --> 00:37:05,620
protocol you can you manipulate existing

651
00:37:04,450 --> 00:37:07,990
available mbeans

652
00:37:05,620 --> 00:37:11,130
which is like the available dmx methods

653
00:37:07,990 --> 00:37:16,270
to escalate into remote code execution

654
00:37:11,130 --> 00:37:20,110
so Tomcat about Tomcat the exposed those

655
00:37:16,270 --> 00:37:23,080
exposed one of that type its name it

656
00:37:20,110 --> 00:37:25,480
access lock vow and it can be used to

657
00:37:23,080 --> 00:37:29,740
more mana can be manipulated to ryfi

658
00:37:25,480 --> 00:37:31,740
into a b-tree location so it's the

659
00:37:29,740 --> 00:37:37,000
Explorer in action this is have been

660
00:37:31,740 --> 00:37:39,569
this is a sciencv blah blah blah and it

661
00:37:37,000 --> 00:37:42,370
needs the feature to be enable which is

662
00:37:39,570 --> 00:37:46,120
unfortunately not by default but it's a

663
00:37:42,370 --> 00:37:48,880
cool bug by the way anyway so first you

664
00:37:46,120 --> 00:37:51,069
have to to modify the lock pattern

665
00:37:48,880 --> 00:37:53,769
like we modified the access a tomcat

666
00:37:51,069 --> 00:37:56,650
access lock pattern using gmx after we

667
00:37:53,769 --> 00:38:02,348
get the Korean Soyuz dr. Renzo to modify

668
00:37:56,650 --> 00:38:05,529
the gmx locking login pattern to power

669
00:38:02,349 --> 00:38:09,880
this meaning we lock every power header

670
00:38:05,529 --> 00:38:12,309
into the lock buffer then we invoke an

671
00:38:09,880 --> 00:38:15,369
HTTP request to poison the access law

672
00:38:12,309 --> 00:38:17,589
then as you can see we then curl within

673
00:38:15,369 --> 00:38:20,829
a power we send a power header with the

674
00:38:17,589 --> 00:38:24,038
runtime is our pillow basically our

675
00:38:20,829 --> 00:38:29,859
pillow for the website and then you

676
00:38:24,039 --> 00:38:31,990
invoke the the wrote a access control of

677
00:38:29,859 --> 00:38:36,430
our rotate to write into an arbitrary

678
00:38:31,990 --> 00:38:38,919
location into another yoga your control

679
00:38:36,430 --> 00:38:52,950
so let's get very interesting part let's

680
00:38:38,920 --> 00:38:52,950
see a demo demo all right for a sec

681
00:38:58,640 --> 00:39:09,379
all right so this is a I don't know how

682
00:39:04,800 --> 00:39:09,380
to like hold it too

683
00:39:16,809 --> 00:39:26,869
hey cool okay so this is a it's going

684
00:39:24,650 --> 00:39:31,640
too fast

685
00:39:26,869 --> 00:39:34,280
basically there's a tomcat on the right

686
00:39:31,640 --> 00:39:40,190
side of your screen and then an attacker

687
00:39:34,280 --> 00:39:43,579
screen on the left side and it's - I can

688
00:39:40,190 --> 00:39:46,790
say okay so it's just bad with so

689
00:39:43,579 --> 00:39:49,670
basically on the right side alleged

690
00:39:46,790 --> 00:39:52,130
client so we invoke the explorer on the

691
00:39:49,670 --> 00:39:55,099
left side and this is like the registry

692
00:39:52,130 --> 00:39:57,440
only already bided into another instance

693
00:39:55,099 --> 00:39:59,809
and the attacker control and then the

694
00:39:57,440 --> 00:40:02,510
exploit when we invoke the exploit and

695
00:39:59,809 --> 00:40:07,910
this is a legit client an administrator

696
00:40:02,510 --> 00:40:11,119
for example locking into his pen oh yeah

697
00:40:07,910 --> 00:40:13,848
and then he locked in and then we can

698
00:40:11,119 --> 00:40:16,420
see on the attacker sigh yeah so that's

699
00:40:13,849 --> 00:40:20,000
on the bottom of the screen there's the

700
00:40:16,420 --> 00:40:22,970
password dumping out in plain text but

701
00:40:20,000 --> 00:40:23,530
that is just like too hard to see sorry

702
00:40:22,970 --> 00:40:26,299
about that

703
00:40:23,530 --> 00:40:29,270
alright so we have the Korean source we

704
00:40:26,299 --> 00:40:32,630
have the privilege on Tomcat and the

705
00:40:29,270 --> 00:40:36,410
rest you have to write a web shell on

706
00:40:32,630 --> 00:40:43,670
the tomcat web root using the volume

707
00:40:36,410 --> 00:40:47,930
movies so that's again mix too hard to

708
00:40:43,670 --> 00:40:52,220
see okay so it it works just like in the

709
00:40:47,930 --> 00:40:55,250
slide that I described basically yeah so

710
00:40:52,220 --> 00:40:57,319
I basically IBEW a jar jar pocket that

711
00:40:55,250 --> 00:40:59,869
will be used to exploit that will

712
00:40:57,319 --> 00:41:03,020
connects to the GMX with the credentials

713
00:40:59,869 --> 00:41:06,230
and then it will invoke the gmx methods

714
00:41:03,020 --> 00:41:10,849
to write you a to write to a web shelves

715
00:41:06,230 --> 00:41:12,980
and here you go this way right yeah so

716
00:41:10,849 --> 00:41:16,369
we now invoke the web shell and then

717
00:41:12,980 --> 00:41:20,829
calculate a pop-up on the Tomcat side

718
00:41:16,369 --> 00:41:20,829
yeah cool so we get I see Antonia

719
00:41:22,910 --> 00:41:42,950
oh cool yeah so let's talk about right

720
00:41:37,460 --> 00:41:46,970
so Oracle is actually not prepared for

721
00:41:42,950 --> 00:41:49,460
this because this the simplest fix for

722
00:41:46,970 --> 00:41:51,770
this is to you a packet called the

723
00:41:49,460 --> 00:41:54,410
single entry registry which will prevent

724
00:41:51,770 --> 00:41:56,780
the registry modify a modification but

725
00:41:54,410 --> 00:42:00,220
the API is packets private meaning only

726
00:41:56,780 --> 00:42:04,010
Oracle can use it meaning only the

727
00:42:00,220 --> 00:42:07,629
classes in the packet gmx the remote can

728
00:42:04,010 --> 00:42:11,380
use it and any other client any other

729
00:42:07,630 --> 00:42:17,539
developers can you can use that package

730
00:42:11,380 --> 00:42:20,930
okay so cool that's another interesting

731
00:42:17,539 --> 00:42:25,369
note and another final attack vector we

732
00:42:20,930 --> 00:42:28,430
have on the registries of it so it's

733
00:42:25,369 --> 00:42:31,400
cowed about to the kobani koba koba

734
00:42:28,430 --> 00:42:34,520
protocol is a COBOL naming service so

735
00:42:31,400 --> 00:42:37,670
this is a hello world application I put

736
00:42:34,520 --> 00:42:40,490
up and that's absolutely no except check

737
00:42:37,670 --> 00:42:42,970
no local access check involved so we can

738
00:42:40,490 --> 00:42:46,308
just freely rebind the

739
00:42:42,970 --> 00:42:51,319
koba services so anywhere we like and we

740
00:42:46,309 --> 00:42:55,869
can just achieve the same results that I

741
00:42:51,319 --> 00:43:01,910
demonstrated earlier yeah but this is

742
00:42:55,869 --> 00:43:06,710
actually quite not as popular at the SD

743
00:43:01,910 --> 00:43:12,049
I am i over GI the I my registry class

744
00:43:06,710 --> 00:43:15,170
so I have yet to find a vulnerable

745
00:43:12,049 --> 00:43:18,319
product in my research transmat but I

746
00:43:15,170 --> 00:43:23,510
believe that is that will be one that

747
00:43:18,319 --> 00:43:26,690
used this uses so this is everything

748
00:43:23,510 --> 00:43:29,900
about my attack scenarios so a little

749
00:43:26,690 --> 00:43:33,170
bit about medications from what I think

750
00:43:29,900 --> 00:43:36,559
because I think honestly I think these

751
00:43:33,170 --> 00:43:41,789
are all pretty new to the

752
00:43:36,559 --> 00:43:44,579
developers sigh so you we need to where

753
00:43:41,789 --> 00:43:49,460
you need to extensive review on I my

754
00:43:44,579 --> 00:43:54,799
services that include Bokova and I my GI

755
00:43:49,460 --> 00:43:58,799
mp40 serialization pewter with a jab 290

756
00:43:54,799 --> 00:44:01,799
but however jab 290 as I said do not

757
00:43:58,799 --> 00:44:05,520
provide fewer API for the IO LP object

758
00:44:01,799 --> 00:44:07,619
screen so then maybe you have to I don't

759
00:44:05,520 --> 00:44:12,270
know like really rely on other methods

760
00:44:07,619 --> 00:44:15,960
until Oracle publicist one and you also

761
00:44:12,270 --> 00:44:18,359
should should review the application

762
00:44:15,960 --> 00:44:21,450
model to mini minimize designers like

763
00:44:18,359 --> 00:44:24,359
not letting the Korean chose fly index

764
00:44:21,450 --> 00:44:28,799
under this protocol yeah and keep your

765
00:44:24,359 --> 00:44:31,848
gie of today and thank you as my speech

766
00:44:28,799 --> 00:44:31,849
as my talk

