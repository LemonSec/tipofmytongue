1
00:00:06,190 --> 00:00:17,490
[Music]

2
00:00:14,299 --> 00:00:20,759
no everyone I'm going to present Cisco

3
00:00:17,490 --> 00:00:25,490
sa from zero to ID equal to zero

4
00:00:20,760 --> 00:00:28,439
my name is a kyushu nickname is MD for

5
00:00:25,490 --> 00:00:30,990
I'm walking on to be able to create a

6
00:00:28,439 --> 00:00:34,800
company I made really exploiting and

7
00:00:30,990 --> 00:00:38,030
hunting volleyball for network devices

8
00:00:34,800 --> 00:00:41,849
and the firewall and the IOT devices

9
00:00:38,030 --> 00:00:45,360
this is today's agenda first I will

10
00:00:41,850 --> 00:00:48,600
introduce what Cisco ST is and hunting

11
00:00:45,360 --> 00:00:51,030
one Boeing is KSA and exploits the

12
00:00:48,600 --> 00:00:56,879
runnable we found at last we will

13
00:00:51,030 --> 00:01:00,750
discuss how to purge the world ball so

14
00:00:56,879 --> 00:01:03,300
what Cisco sa is as he says Cisco sa is

15
00:01:00,750 --> 00:01:06,720
one of the most widely used live form

16
00:01:03,300 --> 00:01:09,810
aware and the VPN solution for small to

17
00:01:06,720 --> 00:01:14,850
medium business actually Cisco sa is a

18
00:01:09,810 --> 00:01:19,020
small box with several several network

19
00:01:14,850 --> 00:01:22,740
functions enables comparing to Cisco IOS

20
00:01:19,020 --> 00:01:25,890
there are to have both similar function

21
00:01:22,740 --> 00:01:28,380
and similar interface however the system

22
00:01:25,890 --> 00:01:33,600
are three totally different Cisco sa is

23
00:01:28,380 --> 00:01:39,840
based on x86 system and the Cisco IOS is

24
00:01:33,600 --> 00:01:43,369
based on other system are actually Cisco

25
00:01:39,840 --> 00:01:47,299
ASA can also be described as the big man

26
00:01:43,369 --> 00:01:50,610
named Elena running in the no more Linux

27
00:01:47,299 --> 00:01:54,299
the banner arena including the included

28
00:01:50,610 --> 00:01:57,719
the most her service including where we

29
00:01:54,299 --> 00:02:03,899
hear ASTM SMP under the banner in a bit

30
00:01:57,719 --> 00:02:07,559
a bit larger about 80 MB and an analysis

31
00:02:03,899 --> 00:02:12,500
fire is more larger about 900 MB this is

32
00:02:07,560 --> 00:02:15,930
screenshot screenshot of the tube pan or

33
00:02:12,500 --> 00:02:18,840
Linda monitor is another very important

34
00:02:15,930 --> 00:02:21,599
battering NSA which is the demo process

35
00:02:18,840 --> 00:02:23,579
of the Linda it monitor the status of

36
00:02:21,599 --> 00:02:26,310
Lennar including checking acidity of

37
00:02:23,579 --> 00:02:30,659
Cisco's calling Lena and monitor

38
00:02:26,310 --> 00:02:33,030
supports of a process voting Lena Selena

39
00:02:30,659 --> 00:02:34,620
monitor a sense and assess stigman

40
00:02:33,030 --> 00:02:38,189
afford signal and the reboots the

41
00:02:34,620 --> 00:02:41,359
devices while na was an award recorder

42
00:02:38,189 --> 00:02:47,608
this is this appears result of the

43
00:02:41,359 --> 00:02:51,329
processing a si there is another very

44
00:02:47,609 --> 00:02:58,079
interesting future that all the traffic

45
00:02:51,329 --> 00:03:00,900
are broke in the in the Cisco si accepts

46
00:02:58,079 --> 00:03:05,459
those generated by the Lindo form from

47
00:03:00,900 --> 00:03:07,889
the patrol we have said that we cannot

48
00:03:05,459 --> 00:03:10,680
directly open the gateway and the

49
00:03:07,889 --> 00:03:15,810
network is unreachable it means that we

50
00:03:10,680 --> 00:03:18,569
cannot direct proper share out so it's

51
00:03:15,810 --> 00:03:25,199
in another constraint in Cisco si we

52
00:03:18,569 --> 00:03:27,959
will discuss it later actually there is

53
00:03:25,199 --> 00:03:31,409
a lot of research shall be done for

54
00:03:27,959 --> 00:03:34,650
Cisco in the last three years

55
00:03:31,409 --> 00:03:38,569
a hippie overflowing I cases Cisco

56
00:03:34,650 --> 00:03:42,199
fragmentations have been disclosed in

57
00:03:38,569 --> 00:03:45,030
2016 which we will reward at the birth

58
00:03:42,199 --> 00:03:51,599
pesticide bargaining apply it used on

59
00:03:45,030 --> 00:03:58,609
this 16 a CV 2018 zero one zero one in

60
00:03:51,599 --> 00:03:58,608
the UF in the well Vivian Fraser father

61
00:04:03,410 --> 00:04:11,240
in 2017 the shadowbox reviews the

62
00:04:07,850 --> 00:04:13,489
existence of to exploit as needed to

63
00:04:11,240 --> 00:04:15,740
exploit however both of them only

64
00:04:13,490 --> 00:04:21,940
effects the volume before nine point

65
00:04:15,740 --> 00:04:26,050
zero point nine point zero this is a

66
00:04:21,940 --> 00:04:29,750
study from NCC group say that from a

67
00:04:26,050 --> 00:04:32,380
from version 9.5 point story all the

68
00:04:29,750 --> 00:04:35,000
security prepared all the security

69
00:04:32,380 --> 00:04:36,560
protection mechanism had been enabled

70
00:04:35,000 --> 00:04:43,490
including piee

71
00:04:36,560 --> 00:04:45,440
yes there are and annex this is a check

72
00:04:43,490 --> 00:04:48,830
sector without of the banner arena we

73
00:04:45,440 --> 00:04:52,700
can see from this data X and P ie he'll

74
00:04:48,830 --> 00:04:56,390
be enabled the below picture is the info

75
00:04:52,700 --> 00:05:00,050
proc Max Energy DB the library address

76
00:04:56,390 --> 00:05:07,820
shall be randomized so if there are SLI

77
00:05:00,050 --> 00:05:09,860
is enabled here so which means that all

78
00:05:07,820 --> 00:05:12,890
the protective McKenna that have been

79
00:05:09,860 --> 00:05:15,260
enabled and the optional zerrin not any

80
00:05:12,890 --> 00:05:21,710
public rotations are fine

81
00:05:15,260 --> 00:05:24,080
I know remain available so where is the

82
00:05:21,710 --> 00:05:25,880
world bow we found today actually is a

83
00:05:24,080 --> 00:05:28,640
vulnerable we found today laying the

84
00:05:25,880 --> 00:05:31,070
where appear in the connect service and

85
00:05:28,640 --> 00:05:35,300
they provided a mobility client as well

86
00:05:31,070 --> 00:05:39,430
as the web interface USA while VP the

87
00:05:35,300 --> 00:05:42,320
below Putra is our mobility client the

88
00:05:39,430 --> 00:05:46,580
upper picture the mobile kind and the

89
00:05:42,320 --> 00:05:47,960
blow to our the web interface after

90
00:05:46,580 --> 00:05:50,690
analyzing the Lua

91
00:05:47,960 --> 00:05:52,729
Jelena we found that the one VPN service

92
00:05:50,690 --> 00:05:55,130
is the retaining the Lua and there's a

93
00:05:52,730 --> 00:05:58,040
low whole work on terrorism banded in

94
00:05:55,130 --> 00:06:00,020
arena binary for another people so we

95
00:05:58,040 --> 00:06:03,040
can see that in this function will open

96
00:06:00,020 --> 00:06:08,930
in a space that was function is the

97
00:06:03,040 --> 00:06:11,240
5.0.2 more importantly we found that all

98
00:06:08,930 --> 00:06:14,370
the lucid code a new article are

99
00:06:11,240 --> 00:06:17,400
available in the leaner

100
00:06:14,370 --> 00:06:20,250
about picture in the example of the raw

101
00:06:17,400 --> 00:06:23,780
source code the below picture is example

102
00:06:20,250 --> 00:06:30,870
of wah by decoder and this picture is a

103
00:06:23,780 --> 00:06:34,440
example a list of a source code so I use

104
00:06:30,870 --> 00:06:36,960
a function where we PM content you to

105
00:06:34,440 --> 00:06:41,340
load to initialize the VPN which routes

106
00:06:36,960 --> 00:06:43,979
the URL to specific to our fires here

107
00:06:41,340 --> 00:06:47,640
the function aware we aware well Vivian

108
00:06:43,980 --> 00:06:51,660
content is very huge is a very huge

109
00:06:47,640 --> 00:06:56,099
function however we can found that all

110
00:06:51,660 --> 00:06:59,430
the Lua is defining this structures so

111
00:06:56,100 --> 00:07:01,590
we write some simple script to dump all

112
00:06:59,430 --> 00:07:03,720
the Russell code and bytecode for the

113
00:07:01,590 --> 00:07:06,239
bytecode that we also need to decompile

114
00:07:03,720 --> 00:07:09,000
them we found that there are some

115
00:07:06,240 --> 00:07:11,310
particular script 2d compare them

116
00:07:09,000 --> 00:07:13,169
directly to the there are correct remote

117
00:07:11,310 --> 00:07:16,950
from the battle to the source code and

118
00:07:13,169 --> 00:07:21,150
after all we got about 100 asserted were

119
00:07:16,950 --> 00:07:25,229
fires with more than 50,000 lines it's a

120
00:07:21,150 --> 00:07:32,419
very hard task to odd audit after audit

121
00:07:25,229 --> 00:07:34,289
for several weeks we found several

122
00:07:32,419 --> 00:07:37,310
vulnerabilities and what we care about

123
00:07:34,289 --> 00:07:43,909
is the arbitrary execution with a

124
00:07:37,310 --> 00:07:43,910
authentically with athletically the user

125
00:07:47,000 --> 00:07:52,560
fuller for some reasons the power to

126
00:07:50,550 --> 00:07:55,020
trigger will not be covered here however

127
00:07:52,560 --> 00:08:00,419
this is not other end of story but the

128
00:07:55,020 --> 00:08:02,940
start we we need is a virtual command

129
00:08:00,419 --> 00:08:04,859
execution and the from the arbitral you

130
00:08:02,940 --> 00:08:07,520
are executions you I will command

131
00:08:04,860 --> 00:08:10,710
execution may be when a function like

132
00:08:07,520 --> 00:08:13,830
system execution or P open

133
00:08:10,710 --> 00:08:14,250
however after reverting the whole Lua

134
00:08:13,830 --> 00:08:16,530
banner

135
00:08:14,250 --> 00:08:19,169
compared we found that there are several

136
00:08:16,530 --> 00:08:21,450
constraints for the low i code execution

137
00:08:19,169 --> 00:08:23,789
the functions are limited and none of

138
00:08:21,450 --> 00:08:26,760
the sensitive functions are available if

139
00:08:23,789 --> 00:08:29,599
the execution is not here and a pioppi

140
00:08:26,760 --> 00:08:29,599
is not supported

141
00:08:30,080 --> 00:08:35,130
however there is always a way out the

142
00:08:32,880 --> 00:08:38,039
functional load string left the function

143
00:08:35,130 --> 00:08:40,620
screen down is to transform the Lewises

144
00:08:38,039 --> 00:08:44,099
coded to a lower bytecode why our low

145
00:08:40,620 --> 00:08:48,150
string can be used to load our path code

146
00:08:44,100 --> 00:08:50,700
and execute ISM so with the help of the

147
00:08:48,150 --> 00:08:57,150
low screen we can construct our

148
00:08:50,700 --> 00:08:59,670
arbitrary byte code and excuse them to

149
00:08:57,150 --> 00:09:03,240
construct the Louisville code we need to

150
00:08:59,670 --> 00:09:06,150
get a base knowledge of the decoder you

151
00:09:03,240 --> 00:09:08,730
know do a function by this all the

152
00:09:06,150 --> 00:09:12,840
console will be defined previously here

153
00:09:08,730 --> 00:09:15,450
for example for I equal to 1 to 10 the

154
00:09:12,840 --> 00:09:17,730
step is 1 and the new a wire in the

155
00:09:15,450 --> 00:09:21,120
while prints the value of I this is a

156
00:09:17,730 --> 00:09:24,360
loop and in this in this lua it will

157
00:09:21,120 --> 00:09:27,870
define three constant including one 10

158
00:09:24,360 --> 00:09:32,220
under the screen stream buffer print to

159
00:09:27,870 --> 00:09:34,830
recount constant and the 0 a several or

160
00:09:32,220 --> 00:09:36,930
because we need to know the first one is

161
00:09:34,830 --> 00:09:39,810
the low decay or decay to load a

162
00:09:36,930 --> 00:09:41,489
variable into a stack the first there

163
00:09:39,810 --> 00:09:44,040
are two pyramids of the load okay

164
00:09:41,490 --> 00:09:47,310
the first pyramid is an indexing a stack

165
00:09:44,040 --> 00:09:49,890
and the second one is an index in index

166
00:09:47,310 --> 00:09:53,040
in the console table the jumper will be

167
00:09:49,890 --> 00:09:55,980
coded to add its name to jump to the

168
00:09:53,040 --> 00:09:58,110
offsetting of the second pyramids the

169
00:09:55,980 --> 00:10:00,240
footprint will be coding the start of

170
00:09:58,110 --> 00:10:03,870
the loop and for loop in the end of the

171
00:10:00,240 --> 00:10:07,260
loop and for proof jump to the for loop

172
00:10:03,870 --> 00:10:10,260
and for loop jump to up a body of the

173
00:10:07,260 --> 00:10:18,090
loop and the particle between for prep

174
00:10:10,260 --> 00:10:20,040
and for loop is a man of the loop we

175
00:10:18,090 --> 00:10:22,560
know that the luring Sisko is a the very

176
00:10:20,040 --> 00:10:26,089
outer world and family are 0.2 which was

177
00:10:22,560 --> 00:10:29,250
a release in 2004 about 15 years ago

178
00:10:26,090 --> 00:10:31,830
however it is a very interesting feature

179
00:10:29,250 --> 00:10:35,760
that you are used to have a passcode a

180
00:10:31,830 --> 00:10:38,670
verifier but abandoned after Lua 502 due

181
00:10:35,760 --> 00:10:40,770
to the need for speed so it can be said

182
00:10:38,670 --> 00:10:41,670
that there are more constructs to

183
00:10:40,770 --> 00:10:45,360
execute

184
00:10:41,670 --> 00:10:47,819
bad code you know the were like 5.0.2

185
00:10:45,360 --> 00:10:53,460
because of the existence of the Lua

186
00:10:47,820 --> 00:10:55,710
bytecode verifier so what's the rule

187
00:10:53,460 --> 00:10:57,810
about co2 verified you actually the

188
00:10:55,710 --> 00:11:01,620
check of the rule of particular verifier

189
00:10:57,810 --> 00:11:04,410
is in co2 suitcase for a different code

190
00:11:01,620 --> 00:11:06,420
of the different type of or picota they

191
00:11:04,410 --> 00:11:10,199
are a different kind of check and for

192
00:11:06,420 --> 00:11:11,910
each tab if because they are also some

193
00:11:10,200 --> 00:11:17,430
checks whereas they are pyramids are

194
00:11:11,910 --> 00:11:19,219
auto bound their right to public

195
00:11:17,430 --> 00:11:22,859
attacker gets to do a bytecode verifier

196
00:11:19,220 --> 00:11:25,830
the first is a index out of bounds in

197
00:11:22,860 --> 00:11:28,680
lua load okay at the mentioning

198
00:11:25,830 --> 00:11:31,890
previously the second pyramid of load k

199
00:11:28,680 --> 00:11:34,859
is the index in accountable the first

200
00:11:31,890 --> 00:11:37,670
one use the auto of bounding the index

201
00:11:34,860 --> 00:11:37,670
of countable

202
00:11:37,700 --> 00:11:44,130
however you know verify of 5.0.2 you see

203
00:11:42,150 --> 00:11:48,660
this one is no longer available

204
00:11:44,130 --> 00:11:51,360
Lola K is a type how I ABX front pizza

205
00:11:48,660 --> 00:11:54,360
we can see these things and the four IAB

206
00:11:51,360 --> 00:11:56,780
X its how to check whether the permit is

207
00:11:54,360 --> 00:12:02,100
out of is bigger than the count of the

208
00:11:56,780 --> 00:12:05,310
contain the table the same kinda attack

209
00:12:02,100 --> 00:12:08,400
is the folk type type confusion info

210
00:12:05,310 --> 00:12:12,000
loop the detail can be referenced from

211
00:12:08,400 --> 00:12:13,860
this link and the Saturday it is not

212
00:12:12,000 --> 00:12:16,770
available in 5.0.2

213
00:12:13,860 --> 00:12:18,840
either from future we can see that the

214
00:12:16,770 --> 00:12:21,540
three pyramids had been limited to a

215
00:12:18,840 --> 00:12:26,790
number and if it is not then the luau

216
00:12:21,540 --> 00:12:30,380
throughout her arrow so as a result no

217
00:12:26,790 --> 00:12:37,069
public exploit available

218
00:12:30,380 --> 00:12:37,070
we need to hunt for a new a new escape

219
00:12:38,360 --> 00:12:42,660
luckily we find a one out of bounds in

220
00:12:42,270 --> 00:12:45,360
the

221
00:12:42,660 --> 00:12:48,060
obokata for trip for prepare as

222
00:12:45,360 --> 00:12:51,450
mentioned in previous layer it's a start

223
00:12:48,060 --> 00:12:54,390
of the loop in the other version and we

224
00:12:51,450 --> 00:12:54,880
can see that in here that foolproof the

225
00:12:54,390 --> 00:12:58,420
second

226
00:12:54,880 --> 00:13:02,650
it's foolproof is to control PC to jump

227
00:12:58,420 --> 00:13:04,810
easy to another offset now here we can

228
00:13:02,650 --> 00:13:10,030
see four previews attack-type

229
00:13:04,810 --> 00:13:14,020
i aspx and the photo type i aspx lower

230
00:13:10,030 --> 00:13:17,020
bad code do not have any verifier in the

231
00:13:14,020 --> 00:13:18,790
first which case and now in the second

232
00:13:17,020 --> 00:13:22,210
of two search case they are also no

233
00:13:18,790 --> 00:13:29,010
check so with the autobahn info prep we

234
00:13:22,210 --> 00:13:29,010
can control a virtual pc in lieu of VM

235
00:13:30,690 --> 00:13:37,180
so here our next step is to turn this on

236
00:13:34,810 --> 00:13:42,550
a bit freaking busy controlling Lua VM

237
00:13:37,180 --> 00:13:46,060
to arbitrary code execution let's try it

238
00:13:42,550 --> 00:13:49,359
let's try to exploit the Lua 5.0.2 in

239
00:13:46,060 --> 00:13:50,439
ubuntu first two up to achieve arbitrary

240
00:13:49,360 --> 00:13:52,060
code execution

241
00:13:50,440 --> 00:13:57,700
what we need is I will to address and

242
00:13:52,060 --> 00:14:00,010
read about your address right let's - up

243
00:13:57,700 --> 00:14:01,080
to read arbitral address let's take this

244
00:14:00,010 --> 00:14:04,080
for example

245
00:14:01,080 --> 00:14:10,060
history raw code will be compared as

246
00:14:04,080 --> 00:14:12,250
such Lua bytecode yeah under there are

247
00:14:10,060 --> 00:14:15,189
some trunks we need to know in the loire

248
00:14:12,250 --> 00:14:19,120
first ittle piddy trunk in the PT

249
00:14:15,190 --> 00:14:24,240
Frontera OB codes if it will be called

250
00:14:19,120 --> 00:14:28,360
in 8 bytes and this is the layout of the

251
00:14:24,240 --> 00:14:31,090
pivot funky hip from 0 to 0 extent is

252
00:14:28,360 --> 00:14:35,470
the next metadata previous size and the

253
00:14:31,090 --> 00:14:37,240
size after that in the PD prongs another

254
00:14:35,470 --> 00:14:39,610
trunk we need to know is account strong

255
00:14:37,240 --> 00:14:42,970
comes from is the list of what he

256
00:14:39,610 --> 00:14:47,470
objecting accountant table the size of a

257
00:14:42,970 --> 00:14:50,080
key object a is 16 bytes you can see it

258
00:14:47,470 --> 00:14:52,930
from the definition of the key object

259
00:14:50,080 --> 00:14:58,780
and the first was the first aid body the

260
00:14:52,930 --> 00:15:00,459
type and the next one is the value to

261
00:14:58,780 --> 00:15:02,439
read arbitrary address there are three

262
00:15:00,460 --> 00:15:04,660
questions we need to so how do you

263
00:15:02,440 --> 00:15:08,620
control some trunks in the way that were

264
00:15:04,660 --> 00:15:11,079
control trunk because of the Autobahn

265
00:15:08,620 --> 00:15:13,780
what about in for purposes of relative

266
00:15:11,080 --> 00:15:16,840
offset you jump so we need to know the

267
00:15:13,780 --> 00:15:20,500
distance between our PC and our control

268
00:15:16,840 --> 00:15:24,130
trunk so we can't do - them and then do

269
00:15:20,500 --> 00:15:28,840
the relative of the jump let's so these

270
00:15:24,130 --> 00:15:31,630
questions one by one they did you see

271
00:15:28,840 --> 00:15:34,870
the tripping the lower we can't do any

272
00:15:31,630 --> 00:15:36,850
follicle like this we as I empty table

273
00:15:34,870 --> 00:15:39,430
you have variable a and the printer the

274
00:15:36,850 --> 00:15:43,450
result of the two stream and here we can

275
00:15:39,430 --> 00:15:48,579
see we got the hip address of the empty

276
00:15:43,450 --> 00:15:50,580
table this is a gdb screenshot and the

277
00:15:48,580 --> 00:15:54,550
blue filter in the definition of the

278
00:15:50,580 --> 00:15:59,440
cheap table in the Lua here we can see

279
00:15:54,550 --> 00:16:03,969
that the size of table is 0 X 50 and as

280
00:15:59,440 --> 00:16:06,130
we all know 0 X 15 energy level see heap

281
00:16:03,970 --> 00:16:10,680
is a fast being which means it's the

282
00:16:06,130 --> 00:16:10,680
last thing and the first out fast being

283
00:16:10,710 --> 00:16:22,360
so so when we maroc three trunks whoo

284
00:16:16,930 --> 00:16:24,910
size is 0 X 4 50 + 3 3 it one by one and

285
00:16:22,360 --> 00:16:31,810
we can see that the first trunk we free

286
00:16:24,910 --> 00:16:34,030
round on to the top of the list here we

287
00:16:31,810 --> 00:16:36,819
use a hypnotist skill to control some

288
00:16:34,030 --> 00:16:39,160
trunk first step we assign an activity

289
00:16:36,820 --> 00:16:41,680
empty table to a variable a and the

290
00:16:39,160 --> 00:16:43,839
leaks the table address second we assign

291
00:16:41,680 --> 00:16:47,709
an IO to a variable a and khakhra

292
00:16:43,840 --> 00:16:50,740
krutchkov a dress because the of the m

293
00:16:47,710 --> 00:16:53,200
table is not reference anymore so it

294
00:16:50,740 --> 00:16:58,390
will be freed by o'clock class cupboard

295
00:16:53,200 --> 00:17:02,680
and after that we allocate a 47 hands

296
00:16:58,390 --> 00:17:06,030
buffer whose size is 50 X 50 in the heap

297
00:17:02,680 --> 00:17:09,399
so this buffer will occupy the frida

298
00:17:06,030 --> 00:17:12,220
empty table and it will we have already

299
00:17:09,400 --> 00:17:14,080
know their address of the freedom free

300
00:17:12,220 --> 00:17:18,670
the table so we know the address of our

301
00:17:14,079 --> 00:17:22,099
a we are in our is so up to now we have

302
00:17:18,670 --> 00:17:24,620
a radius of the two questions we have

303
00:17:22,099 --> 00:17:28,459
we are going to malik our dating a

304
00:17:24,619 --> 00:17:30,590
specific trunk and control them there

305
00:17:28,460 --> 00:17:37,730
are wines where is the address of korean

306
00:17:30,590 --> 00:17:40,220
pc in a vm here we use the hip filter

307
00:17:37,730 --> 00:17:43,130
again we know that every time we call a

308
00:17:40,220 --> 00:17:45,080
function who i will try to prepare the

309
00:17:43,130 --> 00:17:48,050
environment and initialize several

310
00:17:45,080 --> 00:17:51,860
trunks including consonant trunk and the

311
00:17:48,050 --> 00:17:53,899
PG trunk as a call code Alou are you

312
00:17:51,860 --> 00:17:59,780
used to do these things in the in the

313
00:17:53,900 --> 00:18:02,030
function lo the function as mentioned in

314
00:17:59,780 --> 00:18:04,780
creation at the layout of PT trunk and

315
00:18:02,030 --> 00:18:09,260
the constant trunk has been introduced

316
00:18:04,780 --> 00:18:12,050
the trunk size depends on account of PC

317
00:18:09,260 --> 00:18:15,470
and account of the constant the size of

318
00:18:12,050 --> 00:18:21,620
the one PC is 8 byte and the size of

319
00:18:15,470 --> 00:18:23,900
each constant is a temp 0x10 byte we

320
00:18:21,620 --> 00:18:28,820
know that the size of empty table in

321
00:18:23,900 --> 00:18:31,340
0x55 so to make the size of the pc trunk

322
00:18:28,820 --> 00:18:34,939
and the constant drunk equal to 0 x 50

323
00:18:31,340 --> 00:18:36,949
we should assert the count of the

324
00:18:34,940 --> 00:18:40,010
content in the function equal to 4 and

325
00:18:36,950 --> 00:18:42,110
the control instructions equal to 8 or 9

326
00:18:40,010 --> 00:18:47,330
here we construct some structural

327
00:18:42,110 --> 00:18:51,110
function satisfy these conditioners in

328
00:18:47,330 --> 00:18:58,399
the red picture there are 4 constant the

329
00:18:51,110 --> 00:19:00,860
900p code here so here we can control

330
00:18:58,400 --> 00:19:03,460
some control PT trunk and come strong

331
00:19:00,860 --> 00:19:06,080
like this we are located for emptied

332
00:19:03,460 --> 00:19:09,310
empty table and the freedom one by one

333
00:19:06,080 --> 00:19:11,929
by the function class carb addressed

334
00:19:09,310 --> 00:19:15,020
when we call the function we constructed

335
00:19:11,930 --> 00:19:17,570
a PD crong crong crong will be allocated

336
00:19:15,020 --> 00:19:19,670
in the free table because the size of

337
00:19:17,570 --> 00:19:22,669
the PD song and the song song equal to

338
00:19:19,670 --> 00:19:24,920
the empty table so we have already known

339
00:19:22,670 --> 00:19:27,170
address of them to the table so then we

340
00:19:24,920 --> 00:19:32,420
can know the address of the pd function

341
00:19:27,170 --> 00:19:34,730
accounts in the trunk here to read

342
00:19:32,420 --> 00:19:35,870
arbitral address we first replace the

343
00:19:34,730 --> 00:19:39,650
Hopi code

344
00:19:35,870 --> 00:19:42,110
- Vernon Volvo trip and use the Autobahn

345
00:19:39,650 --> 00:19:45,410
in the fall prey to jump to the trunk we

346
00:19:42,110 --> 00:19:48,290
control them as in the trunk this trunk

347
00:19:45,410 --> 00:19:50,120
is our control data um trusty the trunk

348
00:19:48,290 --> 00:19:52,340
so in the trunk we can load the

349
00:19:50,120 --> 00:19:56,899
arbitrary addressing use deck and jump

350
00:19:52,340 --> 00:19:59,240
back to the original function this

351
00:19:56,900 --> 00:20:03,400
function is our controller functions and

352
00:19:59,240 --> 00:20:03,400
it returns the rest of the variable a

353
00:20:04,210 --> 00:20:08,540
because the first loader he'll be

354
00:20:06,770 --> 00:20:11,240
modified to the for prep and of the

355
00:20:08,540 --> 00:20:14,210
variable a happy a dying as address we

356
00:20:11,240 --> 00:20:16,820
control them so we can here put a fake

357
00:20:14,210 --> 00:20:20,630
teeth string object and the function

358
00:20:16,820 --> 00:20:23,689
will return the length of our buffer why

359
00:20:20,630 --> 00:20:28,580
were the type of buffer shall be at his

360
00:20:23,690 --> 00:20:31,760
green so the whole process shall be

361
00:20:28,580 --> 00:20:34,340
modified like this load can modify to

362
00:20:31,760 --> 00:20:37,340
four prepare to jump to our untrusted

363
00:20:34,340 --> 00:20:40,428
code and in our untrusted code we try to

364
00:20:37,340 --> 00:20:42,709
load a fake history object and in the

365
00:20:40,429 --> 00:20:46,400
the type of this object is a lower

366
00:20:42,710 --> 00:20:47,960
history the mass of the object point

367
00:20:46,400 --> 00:20:50,900
here to the arbitrator address we need

368
00:20:47,960 --> 00:20:54,200
you we want to read and all this

369
00:20:50,900 --> 00:20:59,600
function is our under our control by hip

370
00:20:54,200 --> 00:21:03,070
surgery techniques so in this process we

371
00:20:59,600 --> 00:21:06,320
can read our bill to address we want

372
00:21:03,070 --> 00:21:10,220
after reading we will try to discuss

373
00:21:06,320 --> 00:21:13,490
arbitrary address right we say power P

374
00:21:10,220 --> 00:21:15,710
code you write arbitrary address into

375
00:21:13,490 --> 00:21:18,920
arbitrary arbitrary value into a base to

376
00:21:15,710 --> 00:21:22,070
address the table you to set value to

377
00:21:18,920 --> 00:21:25,520
table so here the in destined is the

378
00:21:22,070 --> 00:21:27,740
table the index if the table is a

379
00:21:25,520 --> 00:21:30,800
distance between table base and address

380
00:21:27,740 --> 00:21:34,580
you write the indexing I want you know

381
00:21:30,800 --> 00:21:41,570
using that under our control and the

382
00:21:34,580 --> 00:21:44,090
value is our value want to write to

383
00:21:41,570 --> 00:21:46,550
causes table we should fake our table

384
00:21:44,090 --> 00:21:48,500
structures to bypass the checks in the

385
00:21:46,550 --> 00:21:49,340
suitable source code we can find that

386
00:21:48,500 --> 00:21:52,490
there are

387
00:21:49,340 --> 00:21:55,070
to assert here first line in asserted a

388
00:21:52,490 --> 00:21:57,080
type equal to Lu our T table and the

389
00:21:55,070 --> 00:22:02,360
second one is asserts the matter table

390
00:21:57,080 --> 00:22:04,519
at the variant pointer here we construct

391
00:22:02,360 --> 00:22:07,998
our function like this but it was

392
00:22:04,519 --> 00:22:10,759
different here is that we put the X 4 1

393
00:22:07,999 --> 00:22:15,019
4 in the second pyramid of the account

394
00:22:10,759 --> 00:22:19,519
able to read to write arbitrary address

395
00:22:15,019 --> 00:22:22,399
we first replace the 0 of X for f 1 4 2

396
00:22:19,519 --> 00:22:25,759
the value we want to write and I'd like

397
00:22:22,399 --> 00:22:30,350
before we replace the load k2 out of

398
00:22:25,759 --> 00:22:33,110
bound for prep the write process like

399
00:22:30,350 --> 00:22:35,779
this for proof to jump to our own

400
00:22:33,110 --> 00:22:39,678
residual bytecode and in a load K we

401
00:22:35,779 --> 00:22:42,200
load a fake table address it's 50 object

402
00:22:39,679 --> 00:22:45,440
and the in the object the type should be

403
00:22:42,200 --> 00:22:48,769
do at a table and there's a a value to

404
00:22:45,440 --> 00:22:52,909
point here to a new object and in this

405
00:22:48,769 --> 00:22:56,869
object matter table shall be a valid

406
00:22:52,909 --> 00:23:01,610
pointer and address 20 to address we

407
00:22:56,869 --> 00:23:06,199
want to write then load a fake table

408
00:23:01,610 --> 00:23:08,240
object into a stack we also need to set

409
00:23:06,200 --> 00:23:10,820
the index and the value of the state

410
00:23:08,240 --> 00:23:14,779
table the index should the point here to

411
00:23:10,820 --> 00:23:18,799
1 because in the lua the index staff

412
00:23:14,779 --> 00:23:20,840
starts from 1 instead of 0 and the value

413
00:23:18,799 --> 00:23:24,759
should be pointing to the value we want

414
00:23:20,840 --> 00:23:31,789
to write all the index and value 22

415
00:23:24,759 --> 00:23:36,350
content and table so we can after that

416
00:23:31,789 --> 00:23:40,399
we return the function so up to now we

417
00:23:36,350 --> 00:23:45,649
can use our set able to arbitrary arrest

418
00:23:40,399 --> 00:23:48,350
right and there is some disadvantage

419
00:23:45,649 --> 00:23:51,439
here q but who will be affected because

420
00:23:48,350 --> 00:23:55,879
in the definition of the TCA set object

421
00:23:51,440 --> 00:24:00,830
not only the value will be right but

422
00:23:55,879 --> 00:24:02,870
also the type T will be right so but it

423
00:24:00,830 --> 00:24:05,929
didn't didn't affect a lot

424
00:24:02,870 --> 00:24:12,559
here we do not need we do not need to

425
00:24:05,930 --> 00:24:14,900
worry it much here we have already I

426
00:24:12,559 --> 00:24:17,270
will to address and we done right it is

427
00:24:14,900 --> 00:24:20,480
easier to execute arbitrary code in

428
00:24:17,270 --> 00:24:23,660
Ubuntu without P I enabled first we need

429
00:24:20,480 --> 00:24:26,540
our library base and calculate some like

430
00:24:23,660 --> 00:24:29,750
system and hijacking the trio tea table

431
00:24:26,540 --> 00:24:33,440
modify the it getting yummy to a system

432
00:24:29,750 --> 00:24:35,900
for example and the coder OS not getting

433
00:24:33,440 --> 00:24:38,780
yummy and good pyramid is being acid

434
00:24:35,900 --> 00:24:44,030
same we get hourua root a root shell

435
00:24:38,780 --> 00:24:47,139
here however Ubuntu is not our fault

436
00:24:44,030 --> 00:24:49,820
final target we care about in Cisco a sa

437
00:24:47,140 --> 00:24:54,290
since became really the different in

438
00:24:49,820 --> 00:24:59,570
Cisco sa first here the Cisco specific

439
00:24:54,290 --> 00:25:03,710
super metadata we know that from dispute

440
00:24:59,570 --> 00:25:07,820
row from 0 X 2 0 X 10 in the Linux HIPPA

441
00:25:03,710 --> 00:25:12,140
metadata and from 0 X 10 to 0 X 15 6 KO

442
00:25:07,820 --> 00:25:14,178
sa HIPAA metadata I don't keep PC is

443
00:25:12,140 --> 00:25:20,059
very lucky here it can be used to

444
00:25:14,179 --> 00:25:23,800
pointed 2002 it is 22 year yo f and

445
00:25:20,059 --> 00:25:26,780
which can be used to bypass PID later

446
00:25:23,800 --> 00:25:30,260
however because the existence of the

447
00:25:26,780 --> 00:25:32,960
cisco specific heap of metadata the size

448
00:25:30,260 --> 00:25:35,990
of the empty table change from dr x 52 0

449
00:25:32,960 --> 00:25:38,210
x 19 which means it's changed from the

450
00:25:35,990 --> 00:25:40,670
fast being used mobile we all know that

451
00:25:38,210 --> 00:25:44,000
Mobile will be consolidated if previous

452
00:25:40,670 --> 00:25:46,450
or next strongly freedom and smoking

453
00:25:44,000 --> 00:25:55,160
will be spreading to the small pieces

454
00:25:46,450 --> 00:25:57,920
very easily and in cisco is a hippie is

455
00:25:55,160 --> 00:26:01,340
very complicated southern of the malacca

456
00:25:57,920 --> 00:26:04,400
free will be called after a very simple

457
00:26:01,340 --> 00:26:09,110
HTTP request which means order to make

458
00:26:04,400 --> 00:26:13,550
it - tray extremely unstable here we try

459
00:26:09,110 --> 00:26:16,159
to spray hip trunk like this and i look

460
00:26:13,550 --> 00:26:16,760
at all the hip very continuous to each

461
00:26:16,160 --> 00:26:19,520
other too

462
00:26:16,760 --> 00:26:25,010
avoid accommodate by Arnold trunk the

463
00:26:19,520 --> 00:26:26,690
hips spray sport is like this another

464
00:26:25,010 --> 00:26:30,830
problem is that every time we call this

465
00:26:26,690 --> 00:26:34,130
function dumping the Lua it will trigger

466
00:26:30,830 --> 00:26:37,899
the metal consolidate here we use the

467
00:26:34,130 --> 00:26:37,900
physics format to bypass it

468
00:26:38,440 --> 00:26:46,850
so to bypass yes there are only X and P

469
00:26:43,930 --> 00:26:48,070
IASA our stead with you is like this

470
00:26:46,850 --> 00:26:51,169
step 1

471
00:26:48,070 --> 00:26:54,470
Nikolay hippo address by the tooth

472
00:26:51,170 --> 00:26:57,830
screen and we got a hip address that we

473
00:26:54,470 --> 00:27:00,320
can arbitrary de-allocated pc - got a

474
00:26:57,830 --> 00:27:02,540
UAF address and after that we got a

475
00:27:00,320 --> 00:27:05,270
geode here addressed and calculated a

476
00:27:02,540 --> 00:27:07,159
labral base after that which we got an

477
00:27:05,270 --> 00:27:10,190
environment address in the library

478
00:27:07,160 --> 00:27:12,950
between the stack address so up to now

479
00:27:10,190 --> 00:27:16,040
we have written know that UF address hip

480
00:27:12,950 --> 00:27:20,540
address stack address and the library

481
00:27:16,040 --> 00:27:22,820
address we almost know everything I were

482
00:27:20,540 --> 00:27:26,180
finishing away in line system being a

483
00:27:22,820 --> 00:27:29,000
series not available here Lena monitor

484
00:27:26,180 --> 00:27:34,040
will reboot the devices was an instable

485
00:27:29,000 --> 00:27:37,010
process alternative call is made so here

486
00:27:34,040 --> 00:27:40,970
we do water lean are you we found that

487
00:27:37,010 --> 00:27:44,540
leonard execute command by the function

488
00:27:40,970 --> 00:27:48,830
shall execute as you execute so we can

489
00:27:44,540 --> 00:27:50,899
codify execute and get pyramid it's need

490
00:27:48,830 --> 00:27:54,110
like being a search and the command we

491
00:27:50,900 --> 00:27:59,570
want to execute so I'll be necessary

492
00:27:54,110 --> 00:28:01,939
here another problem is the traffic

493
00:27:59,570 --> 00:28:05,720
constraints because of the limited of

494
00:28:01,940 --> 00:28:08,960
the aasa' we cannot directly papa share

495
00:28:05,720 --> 00:28:12,050
out here we can do like this we found a

496
00:28:08,960 --> 00:28:15,110
derivative function named the stop

497
00:28:12,050 --> 00:28:17,000
sprocket in it which is also the

498
00:28:15,110 --> 00:28:20,990
function but it's still useful to open

499
00:28:17,000 --> 00:28:24,230
proxy in 2008 here here we can call it

500
00:28:20,990 --> 00:28:29,000
however to call it I'll be necessary

501
00:28:24,230 --> 00:28:30,350
again so how to ROP we found that all

502
00:28:29,000 --> 00:28:32,899
strand in return for

503
00:28:30,350 --> 00:28:35,990
peace run conditional time no wait and

504
00:28:32,899 --> 00:28:38,330
we already know the stack base so we can

505
00:28:35,990 --> 00:28:41,779
do like this searching this deck to find

506
00:28:38,330 --> 00:28:46,370
the return address of Pete rent and oh

507
00:28:41,779 --> 00:28:48,769
wait and us - text para that you have

508
00:28:46,370 --> 00:28:54,289
written us tag to the heap by the target

509
00:28:48,769 --> 00:28:57,950
likely return another thing we do is how

510
00:28:54,289 --> 00:29:01,370
to keep a stable after LP because after

511
00:28:57,950 --> 00:29:03,620
tech powered ISP he'll be pointed to

512
00:29:01,370 --> 00:29:07,610
heap and the winner will be turned down

513
00:29:03,620 --> 00:29:11,209
after shell so what we do is here is if

514
00:29:07,610 --> 00:29:14,508
the original is pni P and AB as well

515
00:29:11,210 --> 00:29:19,629
either a BP and the power power the

516
00:29:14,509 --> 00:29:24,019
stack back to original place after shell

517
00:29:19,629 --> 00:29:26,269
so the whole process is like this first

518
00:29:24,019 --> 00:29:26,809
arbitral address read I will to address

519
00:29:26,269 --> 00:29:29,509
right

520
00:29:26,809 --> 00:29:32,418
then we leaked the AOF base viper base

521
00:29:29,509 --> 00:29:34,070
and stack base then after that we start

522
00:29:32,419 --> 00:29:36,620
reading their stack for the return

523
00:29:34,070 --> 00:29:39,470
address of the piece run combinational

524
00:29:36,620 --> 00:29:42,979
time the weight after that we put an LP

525
00:29:39,470 --> 00:29:48,340
in the heap in the hip under after that

526
00:29:42,980 --> 00:29:51,289
we modify the VP 2 LP address and then

527
00:29:48,340 --> 00:29:53,570
we modified the return address to the

528
00:29:51,289 --> 00:29:57,049
calories early return to power to the

529
00:29:53,570 --> 00:29:59,960
stack after that we wait any process to

530
00:29:57,049 --> 00:30:03,679
trigger and it will takes about 5 to 10

531
00:29:59,960 --> 00:30:06,559
seconds in the LP we call the sock

532
00:30:03,679 --> 00:30:09,799
sprocket to open a proxy after the

533
00:30:06,559 --> 00:30:14,049
opening process we call the sheriff hood

534
00:30:09,799 --> 00:30:17,960
- real popular shell solar proxy and

535
00:30:14,049 --> 00:30:22,039
after potential we power to the heap

536
00:30:17,960 --> 00:30:28,309
bachelors deck and the cisco sa keep

537
00:30:22,039 --> 00:30:33,740
stable this is the video of how to

538
00:30:28,309 --> 00:30:40,789
exploit you this is a sa running in

539
00:30:33,740 --> 00:30:43,980
human and I and C for for for for you

540
00:30:40,789 --> 00:30:48,419
know for port port and uses a screw

541
00:30:43,980 --> 00:30:51,990
- - after all the lure and here it will

542
00:30:48,419 --> 00:30:54,269
take some seconds to wait any process to

543
00:30:51,990 --> 00:30:58,130
trigger it will may be long it may be

544
00:30:54,269 --> 00:30:58,130
short it depends

545
00:31:06,080 --> 00:31:10,669
yeah we can see that connection

546
00:31:08,030 --> 00:31:19,280
connacher have received from a si and

547
00:31:10,670 --> 00:31:22,880
the Linux kernel would share a Cisco si

548
00:31:19,280 --> 00:31:24,830
and this is yes and we can see you the

549
00:31:22,880 --> 00:31:29,410
spiritual and the design information we

550
00:31:24,830 --> 00:31:29,409
leaked in the during the exploitations

551
00:31:31,600 --> 00:31:34,730
so how to patch the patch really very

552
00:31:34,280 --> 00:31:37,070
simple

553
00:31:34,730 --> 00:31:41,200
I think disable a little screen over a

554
00:31:37,070 --> 00:31:44,530
bad code sound everything became safe

555
00:31:41,200 --> 00:31:44,530
thank you everyone

