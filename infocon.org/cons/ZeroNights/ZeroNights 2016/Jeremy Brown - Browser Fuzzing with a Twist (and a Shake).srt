1
00:00:00,000 --> 00:00:04,680
Jeremy<font color="#CCCCCC"> Browne a pro fashion browser of</font>

2
00:00:02,669 --> 00:00:12,809
traditional to me through<font color="#E5E5E5"> Camille</font>

3
00:00:04,680 --> 00:00:15,450
obvious thing however one thanks<font color="#E5E5E5"> for</font>

4
00:00:12,809 --> 00:00:16,680
<font color="#E5E5E5">coming to my talk and if you call my one</font>

5
00:00:15,450 --> 00:00:19,169
earlier at four<font color="#E5E5E5"> o'clock about hacking</font>

6
00:00:16,680 --> 00:00:21,180
virtual appliances but I'm giving<font color="#CCCCCC"> to</font>

7
00:00:19,170 --> 00:00:23,369
today so probably<font color="#CCCCCC"> the first time doing</font>

8
00:00:21,180 --> 00:00:24,930
that so<font color="#E5E5E5"> hopefully my voice stays with me</font>

9
00:00:23,369 --> 00:00:27,448
and you all can understand pretty well

10
00:00:24,930 --> 00:00:30,330
should go pretty well as you said my

11
00:00:27,449 --> 00:00:32,070
name is Jeremy<font color="#E5E5E5"> brown and today browser</font>

12
00:00:30,330 --> 00:00:34,199
fussing with a twist so this is<font color="#CCCCCC"> a</font>

13
00:00:32,070 --> 00:00:38,160
project that I worked on for a while

14
00:00:34,200 --> 00:00:39,390
past this year and it kind of you know I

15
00:00:38,160 --> 00:00:41,040
had a few different<font color="#E5E5E5"> projects I've been</font>

16
00:00:39,390 --> 00:00:44,969
working on where I've been consulting

17
00:00:41,040 --> 00:00:46,710
and this is one that I didn't I wouldn't

18
00:00:44,969 --> 00:00:48,629
say it's unfinished but there's still a

19
00:00:46,710 --> 00:00:49,950
lot of<font color="#E5E5E5"> work to do around it but I</font>

20
00:00:48,629 --> 00:00:52,468
<font color="#E5E5E5">thought it was important enough to share</font>

21
00:00:49,950 --> 00:00:54,210
and I really wanted to<font color="#E5E5E5"> get the algorithm</font>

22
00:00:52,469 --> 00:00:55,350
out there and get people kind of

23
00:00:54,210 --> 00:00:57,030
interested and if you already have your

24
00:00:55,350 --> 00:00:58,829
own fuzzing framework I think this<font color="#E5E5E5"> could</font>

25
00:00:57,030 --> 00:01:01,949
fit pretty nicely with what you already

26
00:00:58,829 --> 00:01:03,960
have as a mutator so so i want<font color="#E5E5E5"> to show</font>

27
00:01:01,949 --> 00:01:08,670
you today fussing with a twist and a

28
00:01:03,960 --> 00:01:10,500
shake and<font color="#E5E5E5"> i'll get to it so a quick run</font>

29
00:01:08,670 --> 00:01:12,150
through the agenda I'll go through the

30
00:01:10,500 --> 00:01:15,780
introduction talk about some target

31
00:01:12,150 --> 00:01:18,390
architecture infrastructure notes this

32
00:01:15,780 --> 00:01:20,880
talk<font color="#CCCCCC"> is fitting very well with browser</font>

33
00:01:18,390 --> 00:01:22,860
but really it's you can apply it to a

34
00:01:20,880 --> 00:01:24,869
lot<font color="#E5E5E5"> other</font><font color="#CCCCCC"> things to a lot of other PDF</font>

35
00:01:22,860 --> 00:01:26,850
readers things like that and then i'll

36
00:01:24,869 --> 00:01:29,189
talk about shake it the the new tool

37
00:01:26,850 --> 00:01:30,960
that<font color="#E5E5E5"> i've yet to release the</font><font color="#CCCCCC"> stock's</font>

38
00:01:29,189 --> 00:01:32,908
done i'm actually going to upload<font color="#E5E5E5"> it so</font>

39
00:01:30,960 --> 00:01:35,639
you guys<font color="#CCCCCC"> can play around with it but</font>

40
00:01:32,909 --> 00:01:37,650
it's the implementation<font color="#E5E5E5"> of the technique</font>

41
00:01:35,640 --> 00:01:39,420
of came up<font color="#E5E5E5"> with I think</font><font color="#CCCCCC"> it's somewhat</font>

42
00:01:37,650 --> 00:01:40,710
novel<font color="#E5E5E5"> I'm not going to say it's one</font>

43
00:01:39,420 --> 00:01:42,799
hundred percent novel but I think<font color="#CCCCCC"> that</font>

44
00:01:40,710 --> 00:01:45,119
it's definitely<font color="#E5E5E5"> something i haven't seen</font>

45
00:01:42,799 --> 00:01:46,439
so much publicly and<font color="#E5E5E5"> i'll talk about</font>

46
00:01:45,119 --> 00:01:49,619
some of<font color="#E5E5E5"> the things that are related to</font>

47
00:01:46,439 --> 00:01:52,320
it and then talk a lot about that<font color="#E5E5E5"> and</font>

48
00:01:49,619 --> 00:01:57,719
then go in<font color="#CCCCCC"> the conclusion</font><font color="#E5E5E5"> and and go</font>

49
00:01:52,320 --> 00:01:59,219
from there so again you know my<font color="#E5E5E5"> name I'm</font>

50
00:01:57,719 --> 00:02:00,869
an independent research<font color="#E5E5E5"> firm consultant</font>

51
00:01:59,219 --> 00:02:03,600
at<font color="#CCCCCC"> the moment I used</font><font color="#E5E5E5"> to work for</font>

52
00:02:00,869 --> 00:02:06,180
Microsoft doing<font color="#CCCCCC"> Windows Phone Xbox</font>

53
00:02:03,600 --> 00:02:07,710
security I was also<font color="#CCCCCC"> in the malware</font>

54
00:02:06,180 --> 00:02:09,869
protection Center so got a lot of

55
00:02:07,710 --> 00:02:10,590
exposure<font color="#E5E5E5"> to antivirus stuff a little</font>

56
00:02:09,869 --> 00:02:13,140
more than<font color="#E5E5E5"> I wanted</font>

57
00:02:10,590 --> 00:02:15,360
you want to stay more into in software

58
00:02:13,140 --> 00:02:17,940
security so ended up moving<font color="#E5E5E5"> to the</font>

59
00:02:15,360 --> 00:02:20,340
windows team at<font color="#CCCCCC"> that time I also worked</font>

60
00:02:17,940 --> 00:02:22,829
<font color="#CCCCCC">for tenable you've probably met</font><font color="#E5E5E5"> to be</font>

61
00:02:20,340 --> 00:02:25,500
used Nessus before I've read quite a few

62
00:02:22,830 --> 00:02:26,940
<font color="#CCCCCC">Nessus plugins in the past and also did</font>

63
00:02:25,500 --> 00:02:29,040
some reverse engineering wasn't inable

64
00:02:26,940 --> 00:02:34,620
trying to find<font color="#E5E5E5"> more the subtle subtle</font>

65
00:02:29,040 --> 00:02:35,989
patches so that was fun times so to be

66
00:02:34,620 --> 00:02:37,950
<font color="#E5E5E5">clear I'm not covering today</font>

67
00:02:35,989 --> 00:02:40,879
comprehensive browser fundamentals is

68
00:02:37,950 --> 00:02:42,690
wait<font color="#E5E5E5"> to make a topic take way too long</font>

69
00:02:40,879 --> 00:02:44,459
just I<font color="#E5E5E5"> would want</font><font color="#CCCCCC"> to give you enough</font>

70
00:02:42,690 --> 00:02:46,950
just to get your feet wet and to and to

71
00:02:44,459 --> 00:02:49,440
kind<font color="#CCCCCC"> of look at the attack service and</font>

72
00:02:46,950 --> 00:02:50,940
know what's out there oh and<font color="#E5E5E5"> I'm going</font>

73
00:02:49,440 --> 00:02:53,010
to<font color="#E5E5E5"> be focusing on rendering engines</font>

74
00:02:50,940 --> 00:02:54,870
there's tons<font color="#E5E5E5"> of attack services than</font>

75
00:02:53,010 --> 00:02:58,890
that definitely things around the

76
00:02:54,870 --> 00:03:00,360
sandbox and IPC but at for<font color="#E5E5E5"> this talk and</font>

77
00:02:58,890 --> 00:03:02,970
what shake it actually does<font color="#CCCCCC"> that the</font>

78
00:03:00,360 --> 00:03:05,190
fuzzer i'll be talking about it's mostly

79
00:03:02,970 --> 00:03:07,079
unless accidentally attack something

80
00:03:05,190 --> 00:03:14,250
else it's going<font color="#E5E5E5"> to be finding bugs in</font>

81
00:03:07,079 --> 00:03:15,780
the rendering engine most<font color="#E5E5E5"> likely so what</font>

82
00:03:14,250 --> 00:03:17,609
<font color="#CCCCCC">i am going to be covering uh as I said</font>

83
00:03:15,780 --> 00:03:20,609
the fuzzing engine engine part of the

84
00:03:17,609 --> 00:03:24,060
puzzle fuzzing is not you know<font color="#E5E5E5"> you need</font>

85
00:03:20,609 --> 00:03:25,709
a complete system to fuzz the mutator or

86
00:03:24,060 --> 00:03:28,859
the generator or you know whatever

87
00:03:25,709 --> 00:03:29,849
system you have to or whatever technique

88
00:03:28,859 --> 00:03:32,010
you're using it's just part of the

89
00:03:29,849 --> 00:03:34,560
puzzle of<font color="#E5E5E5"> a bigger picture you need</font>

90
00:03:32,010 --> 00:03:37,200
infrastructure you need you know things

91
00:03:34,560 --> 00:03:39,480
around helper things to copy repros and

92
00:03:37,200 --> 00:03:42,089
and try to debug crashes and get things

93
00:03:39,480 --> 00:03:43,980
like that so I'm not talking about<font color="#E5E5E5"> I</font>

94
00:03:42,090 --> 00:03:46,590
wouldn't<font color="#E5E5E5"> say shake</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> shake it is not a</font>

95
00:03:43,980 --> 00:03:49,738
fuzzer lat lon it is a mutator it's a

96
00:03:46,590 --> 00:03:51,239
somewhat novel way to mutate data that

97
00:03:49,739 --> 00:03:53,310
has had a little<font color="#CCCCCC"> bit of success in</font>

98
00:03:51,239 --> 00:03:55,260
incubation fuzzing browsers in

99
00:03:53,310 --> 00:03:57,840
particular but it's not a complete

100
00:03:55,260 --> 00:04:00,989
<font color="#CCCCCC">fessor and of course</font><font color="#E5E5E5"> we working with</font>

101
00:03:57,840 --> 00:04:03,319
grammar based parsing engines so you can

102
00:04:00,989 --> 00:04:06,959
you can sell a lot<font color="#CCCCCC"> of scripting engines</font>

103
00:04:03,319 --> 00:04:09,810
javascript HTML and even<font color="#E5E5E5"> PDFs again PDF</font>

104
00:04:06,959 --> 00:04:11,220
readers interpret<font color="#CCCCCC"> javascript so this</font>

105
00:04:09,810 --> 00:04:15,269
could be applicable in that area as well

106
00:04:11,220 --> 00:04:17,370
and again<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not claiming out fuzz as</font>

107
00:04:15,269 --> 00:04:19,019
good as<font color="#CCCCCC"> Ben naggy he's professional done</font>

108
00:04:17,370 --> 00:04:19,329
a lot of really great talks on it so if

109
00:04:19,019 --> 00:04:21,220
it

110
00:04:19,329 --> 00:04:22,810
you if you want to really great talk

111
00:04:21,220 --> 00:04:25,240
<font color="#CCCCCC">about fussing I would suggest one of his</font>

112
00:04:22,810 --> 00:04:26,530
talks but you're going<font color="#E5E5E5"> to look get going</font>

113
00:04:25,240 --> 00:04:28,990
to get a lot<font color="#CCCCCC"> of hard lessons I've</font>

114
00:04:26,530 --> 00:04:33,849
learned when covering browser fussing

115
00:04:28,990 --> 00:04:36,370
with with with how I'm doing it here so

116
00:04:33,849 --> 00:04:38,560
why again through my introduction I

117
00:04:36,370 --> 00:04:40,210
didn't want the research just to sit on

118
00:04:38,560 --> 00:04:43,150
<font color="#E5E5E5">my box I really felt like this is</font>

119
00:04:40,210 --> 00:04:44,500
something I worked a lot on and you know

120
00:04:43,150 --> 00:04:46,330
there's still<font color="#E5E5E5"> work to be done as i said</font>

121
00:04:44,500 --> 00:04:47,949
but<font color="#E5E5E5"> i think that is worth sharing and I</font>

122
00:04:46,330 --> 00:04:49,990
didn't<font color="#E5E5E5"> want it to just now a lot of</font>

123
00:04:47,949 --> 00:04:51,819
<font color="#E5E5E5">people have products that just you have</font>

124
00:04:49,990 --> 00:04:54,129
a great<font color="#CCCCCC"> idea and you work on it for a</font>

125
00:04:51,819 --> 00:04:55,690
while and<font color="#CCCCCC"> maybe it doesn't go the way</font>

126
00:04:54,129 --> 00:04:57,400
you want it to<font color="#E5E5E5"> go or maybe it goes that</font>

127
00:04:55,690 --> 00:04:59,319
way but you know you just never finish

128
00:04:57,400 --> 00:05:00,549
<font color="#CCCCCC">it or things like that and I didn't want</font>

129
00:04:59,319 --> 00:05:02,560
<font color="#E5E5E5">it to be one of those projects I wanted</font>

130
00:05:00,550 --> 00:05:04,479
to get the<font color="#E5E5E5"> research out there in hopes</font>

131
00:05:02,560 --> 00:05:08,139
that people will be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to take this</font>

132
00:05:04,479 --> 00:05:09,250
and convert it to and put it in places

133
00:05:08,139 --> 00:05:11,050
where maybe they already have

134
00:05:09,250 --> 00:05:15,940
infrastructure in place and this is just

135
00:05:11,050 --> 00:05:18,250
the<font color="#E5E5E5"> easy snap an example but again</font>

136
00:05:15,940 --> 00:05:22,000
there's a lot of the talks to detail the

137
00:05:18,250 --> 00:05:23,229
process of you<font color="#CCCCCC"> know how the fuzzing</font>

138
00:05:22,000 --> 00:05:24,699
process goes<font color="#E5E5E5"> but I want to talk to</font><font color="#CCCCCC"> you</font>

139
00:05:23,229 --> 00:05:29,560
about the engine and talk<font color="#E5E5E5"> about those</font>

140
00:05:24,699 --> 00:05:31,180
details as well so attack surface

141
00:05:29,560 --> 00:05:32,259
overview you guys know the first thing

142
00:05:31,180 --> 00:05:33,400
when you're looking<font color="#CCCCCC"> for bugs in a</font>

143
00:05:32,259 --> 00:05:34,360
<font color="#E5E5E5">product you got to know the attack</font>

144
00:05:33,400 --> 00:05:37,029
service you got to know what you're

145
00:05:34,360 --> 00:05:40,930
<font color="#E5E5E5">trying to find buck Tim so this little</font>

146
00:05:37,029 --> 00:05:42,550
<font color="#E5E5E5">guy a</font><font color="#CCCCCC"> penguin</font><font color="#E5E5E5"> actually becoming one of</font>

147
00:05:40,930 --> 00:05:44,469
<font color="#E5E5E5">my favorite animals because you can see</font>

148
00:05:42,550 --> 00:05:46,979
he's all curled up and you got to<font color="#E5E5E5"> kind</font>

149
00:05:44,469 --> 00:05:50,050
of poke to see where you<font color="#E5E5E5"> can attack him</font>

150
00:05:46,979 --> 00:05:54,250
so that's kind of way out with visual as

151
00:05:50,050 --> 00:05:55,870
an animalistic attack surface so all the

152
00:05:54,250 --> 00:05:58,360
credit here goes to<font color="#E5E5E5"> chris rolfe from</font>

153
00:05:55,870 --> 00:06:00,219
leaf sec now at<font color="#E5E5E5"> yahoo but he had a</font>

154
00:05:58,360 --> 00:06:01,719
really great presentation and<font color="#CCCCCC"> i wish you</font>

155
00:06:00,219 --> 00:06:04,990
<font color="#E5E5E5">could see all</font><font color="#CCCCCC"> the reference well</font><font color="#E5E5E5"> i guess</font>

156
00:06:01,719 --> 00:06:07,839
you can<font color="#E5E5E5"> see it I can about this this is</font>

157
00:06:04,990 --> 00:06:09,639
the text surface for chrome and<font color="#E5E5E5"> I just</font>

158
00:06:07,839 --> 00:06:11,770
<font color="#E5E5E5">want to make</font><font color="#CCCCCC"> it clear what we're looking</font>

159
00:06:09,639 --> 00:06:13,029
at what what we're what the fuzzer is

160
00:06:11,770 --> 00:06:15,279
trying to expose here as bugs in the

161
00:06:13,029 --> 00:06:16,800
rendering<font color="#E5E5E5"> process so that means VA you</font>

162
00:06:15,279 --> 00:06:19,690
know WebKit which is now blink of course

163
00:06:16,800 --> 00:06:21,610
and<font color="#CCCCCC"> you know may incidentally look at</font>

164
00:06:19,690 --> 00:06:23,469
some bugs at ppapi and well I think

165
00:06:21,610 --> 00:06:25,210
<font color="#E5E5E5">that's actually deprecated now and but</font>

166
00:06:23,469 --> 00:06:27,339
<font color="#E5E5E5">the native client as well that also may</font>

167
00:06:25,210 --> 00:06:28,419
be deprecated anyways we're not looking

168
00:06:27,339 --> 00:06:30,550
at the broker process we're not looking

169
00:06:28,419 --> 00:06:32,289
<font color="#E5E5E5">i pc or</font>

170
00:06:30,550 --> 00:06:35,020
some of<font color="#E5E5E5"> that stuff we're looking at the</font>

171
00:06:32,290 --> 00:06:39,400
rendering<font color="#CCCCCC"> process so focus in on that</font>

172
00:06:35,020 --> 00:06:41,830
and for the reader perspective this<font color="#E5E5E5"> is</font>

173
00:06:39,400 --> 00:06:43,539
<font color="#E5E5E5">some slides from Adobe from their</font>

174
00:06:41,830 --> 00:06:45,700
security team about protective mode and

175
00:06:43,540 --> 00:06:47,890
it<font color="#E5E5E5"> does a good good job of detailing</font>

176
00:06:45,700 --> 00:06:49,810
like how they talk<font color="#CCCCCC"> to the filesystem how</font>

177
00:06:47,890 --> 00:06:51,820
they look to the OS reading and writing

178
00:06:49,810 --> 00:06:54,880
and again we're<font color="#CCCCCC"> looking at the render</font>

179
00:06:51,820 --> 00:06:58,840
the reader part the<font color="#E5E5E5"> which is sandboxed</font>

180
00:06:54,880 --> 00:07:00,969
nowadays but not looking at IPC for this

181
00:06:58,840 --> 00:07:04,810
kind of mutation of mutational fuzzing

182
00:07:00,970 --> 00:07:06,520
and buzzer so fuzzing options there's a

183
00:07:04,810 --> 00:07:08,020
few different options<font color="#E5E5E5"> here we can</font><font color="#CCCCCC"> go</font>

184
00:07:06,520 --> 00:07:09,849
back<font color="#CCCCCC"> and forth</font><font color="#E5E5E5"> on it but i think</font><font color="#CCCCCC"> that</font>

185
00:07:08,020 --> 00:07:13,510
the three main general ones is one to

186
00:07:09,850 --> 00:07:15,790
talk<font color="#CCCCCC"> about today briefly generation so</font>

187
00:07:13,510 --> 00:07:17,260
you know you either have a<font color="#CCCCCC"> spec or you</font>

188
00:07:15,790 --> 00:07:19,290
have a file format you have<font color="#E5E5E5"> something</font>

189
00:07:17,260 --> 00:07:21,909
and<font color="#E5E5E5"> you create data based upon that</font>

190
00:07:19,290 --> 00:07:23,200
that's one technique and you can use in

191
00:07:21,910 --> 00:07:25,630
fussing and peach is a really good

192
00:07:23,200 --> 00:07:26,909
example<font color="#CCCCCC"> here you know it can</font><font color="#E5E5E5"> do a</font>

193
00:07:25,630 --> 00:07:28,930
multitude of different things but

194
00:07:26,910 --> 00:07:30,940
generation is really good at you know

195
00:07:28,930 --> 00:07:34,120
you describe a file format it generates

196
00:07:30,940 --> 00:07:37,050
data and you go from there<font color="#CCCCCC"> so Jenner is</font>

197
00:07:34,120 --> 00:07:42,130
kind of the example for generation

198
00:07:37,050 --> 00:07:43,870
mutation zzf canonical example here it's

199
00:07:42,130 --> 00:07:46,480
a pretty interesting fuzzer that does a

200
00:07:43,870 --> 00:07:50,500
lot of bit flips by flipping different

201
00:07:46,480 --> 00:07:51,790
ways<font color="#CCCCCC"> to mutate data and try to output</font>

202
00:07:50,500 --> 00:07:54,220
something that may crash a program

203
00:07:51,790 --> 00:07:55,930
assess so we have generation mutation

204
00:07:54,220 --> 00:07:58,180
and then you have kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> evolutionary</font>

205
00:07:55,930 --> 00:07:59,500
sub evolutionary i'm<font color="#E5E5E5"> calling it</font><font color="#CCCCCC"> i'll</font>

206
00:07:58,180 --> 00:08:02,800
really want to give this example<font color="#E5E5E5"> cause</font>

207
00:07:59,500 --> 00:08:04,750
AFL is an amazing fuzzer found<font color="#CCCCCC"> actually</font>

208
00:08:02,800 --> 00:08:06,880
put a few bugs using it and<font color="#E5E5E5"> i want to</font>

209
00:08:04,750 --> 00:08:09,880
<font color="#E5E5E5">call this one code assisted because it</font>

210
00:08:06,880 --> 00:08:11,440
uses instrumentation to then figure out

211
00:08:09,880 --> 00:08:14,590
you know what the best paths are to go

212
00:08:11,440 --> 00:08:16,719
down and actually really really a kind

213
00:08:14,590 --> 00:08:19,750
of<font color="#E5E5E5"> almost academic buzzer but it</font>

214
00:08:16,720 --> 00:08:21,460
actually works so this is<font color="#E5E5E5"> this is</font>

215
00:08:19,750 --> 00:08:23,650
something you can apply<font color="#E5E5E5"> to and it's this</font>

216
00:08:21,460 --> 00:08:25,239
one's found a ton of crashes that's why

217
00:08:23,650 --> 00:08:27,070
I really want to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it as an example</font><font color="#E5E5E5"> of</font>

218
00:08:25,240 --> 00:08:29,140
the evolutionary code assisted

219
00:08:27,070 --> 00:08:31,139
instrumentation fuzzing minced found

220
00:08:29,140 --> 00:08:34,559
bugs in and

221
00:08:31,139 --> 00:08:39,930
I mean you name it PHP openssl<font color="#E5E5E5"> openssh</font>

222
00:08:34,559 --> 00:08:42,539
even and it's it's kind of<font color="#E5E5E5"> it's more</font>

223
00:08:39,929 --> 00:08:44,010
local right now but you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> I've</font>

224
00:08:42,539 --> 00:08:46,350
actually modified it before and I know

225
00:08:44,010 --> 00:08:48,269
other people have to to fuzz remote

226
00:08:46,350 --> 00:08:51,390
server so<font color="#E5E5E5"> I think a guy did some stuff</font>

227
00:08:48,269 --> 00:08:53,519
fuzzing buying the<font color="#E5E5E5"> dns server i</font><font color="#CCCCCC"> fussed a</font>

228
00:08:51,390 --> 00:08:56,040
little bit of was I<font color="#E5E5E5"> fuzzing dropbear</font>

229
00:08:53,519 --> 00:08:58,440
open ssh daemon so you can modify it and

230
00:08:56,040 --> 00:09:00,719
you know<font color="#CCCCCC"> write some write some harnesses</font>

231
00:08:58,440 --> 00:09:02,430
to do remote fuzzing with it so anyways

232
00:09:00,720 --> 00:09:06,690
I want<font color="#CCCCCC"> to give you an example of today's</font>

233
00:09:02,430 --> 00:09:08,819
modern code assisting fuzzing so those

234
00:09:06,690 --> 00:09:11,010
<font color="#CCCCCC">are the three the three fuzzing options</font>

235
00:09:08,820 --> 00:09:13,290
you know you can<font color="#E5E5E5"> go back and forth on</font><font color="#CCCCCC"> it</font>

236
00:09:11,010 --> 00:09:15,180
but those are<font color="#CCCCCC"> the three main ones so</font>

237
00:09:13,290 --> 00:09:18,269
infrastructure another thing with with

238
00:09:15,180 --> 00:09:19,800
fussing you need infrastructure so like

239
00:09:18,269 --> 00:09:22,440
I said before there's more pieces to the

240
00:09:19,800 --> 00:09:26,910
puzzle than just a mutator or a

241
00:09:22,440 --> 00:09:28,890
generator<font color="#CCCCCC"> or code instrumentation in my</font>

242
00:09:26,910 --> 00:09:30,300
<font color="#E5E5E5">opinion the complete have a more</font>

243
00:09:28,890 --> 00:09:32,339
complete fuzzing framework you know you

244
00:09:30,300 --> 00:09:35,579
need<font color="#CCCCCC"> the engine of course you need</font>

245
00:09:32,339 --> 00:09:37,380
harnesses you need stuff that will allow

246
00:09:35,579 --> 00:09:40,620
you to<font color="#E5E5E5"> get a deeper peek at your target</font>

247
00:09:37,380 --> 00:09:42,720
<font color="#E5E5E5">you need infrastructure you need a you</font>

248
00:09:40,620 --> 00:09:44,070
know<font color="#E5E5E5"> VMs you need physics physical</font>

249
00:09:42,720 --> 00:09:46,829
<font color="#CCCCCC">Hardware whatever it is you need be able</font>

250
00:09:44,070 --> 00:09:49,050
to scale to us you can fuss much more

251
00:09:46,829 --> 00:09:50,640
effectively like that target specific

252
00:09:49,050 --> 00:09:52,319
support I don't know how many<font color="#CCCCCC"> times</font><font color="#E5E5E5"> I</font>

253
00:09:50,640 --> 00:09:54,300
know us it may rent into it before too

254
00:09:52,320 --> 00:09:55,350
we're trying<font color="#E5E5E5"> to find bugs in a program</font>

255
00:09:54,300 --> 00:09:57,959
you're trying to fuzz that you're<font color="#E5E5E5"> trying</font>

256
00:09:55,350 --> 00:10:00,000
<font color="#E5E5E5">to look at its memory and there's just</font>

257
00:09:57,959 --> 00:10:01,380
something you know either blocking you

258
00:10:00,000 --> 00:10:02,910
from doing that either it<font color="#CCCCCC"> has some</font>

259
00:10:01,380 --> 00:10:05,670
special memory manager that you can't

260
00:10:02,910 --> 00:10:08,160
quite<font color="#E5E5E5"> get good crash output for or it</font>

261
00:10:05,670 --> 00:10:10,410
has anti but debug tick debugging

262
00:10:08,160 --> 00:10:12,360
enabled for a bunch of different<font color="#E5E5E5"> options</font>

263
00:10:10,410 --> 00:10:14,069
or there's something<font color="#E5E5E5"> trying to block you</font>

264
00:10:12,360 --> 00:10:18,029
from fuzzing it or<font color="#CCCCCC"> the or</font><font color="#E5E5E5"> maybe it just</font>

265
00:10:14,070 --> 00:10:20,130
really it's just unfriendly to people

266
00:10:18,029 --> 00:10:21,000
finding bugs so a lot of browsers you

267
00:10:20,130 --> 00:10:22,890
got to figure out all these crazy

268
00:10:21,000 --> 00:10:24,779
<font color="#E5E5E5">command-line things to even get them</font>

269
00:10:22,890 --> 00:10:26,250
running correctly and all you want to<font color="#E5E5E5"> do</font>

270
00:10:24,779 --> 00:10:28,680
is the process a<font color="#E5E5E5"> web page you don't care</font>

271
00:10:26,250 --> 00:10:30,750
about plugins or all this other stuff so

272
00:10:28,680 --> 00:10:32,219
target specific report is super

273
00:10:30,750 --> 00:10:33,660
important<font color="#E5E5E5"> and then help our programs</font>

274
00:10:32,220 --> 00:10:34,920
things that will copy repros for you

275
00:10:33,660 --> 00:10:37,560
things that<font color="#E5E5E5"> will talk to a database that</font>

276
00:10:34,920 --> 00:10:39,560
<font color="#E5E5E5">will log things to help you make sense</font>

277
00:10:37,560 --> 00:10:42,300
of the data you get back from fuzzing

278
00:10:39,560 --> 00:10:46,050
super important

279
00:10:42,300 --> 00:10:48,770
the Fed fuzzing engine generator perspex

280
00:10:46,050 --> 00:10:51,569
mutator with different algorithms and

281
00:10:48,770 --> 00:10:53,189
instrumentation the local system

282
00:10:51,570 --> 00:10:54,360
harnesses if you're buzzing locally you

283
00:10:53,190 --> 00:10:57,030
know you<font color="#E5E5E5"> need to bug harness to catch</font>

284
00:10:54,360 --> 00:10:58,530
crashes you know file system monitor

285
00:10:57,030 --> 00:11:00,569
maybe to catch things for interesting

286
00:10:58,530 --> 00:11:04,020
reads and writes and definitely a

287
00:11:00,570 --> 00:11:06,450
dedicated database server buzzing and

288
00:11:04,020 --> 00:11:07,890
copying things locally can work but it's

289
00:11:06,450 --> 00:11:12,300
really not<font color="#E5E5E5"> the best scalable way to do</font>

290
00:11:07,890 --> 00:11:15,120
it and<font color="#CCCCCC"> then scaling infrastructure like</font>

291
00:11:12,300 --> 00:11:17,160
I<font color="#E5E5E5"> said you need</font><font color="#CCCCCC"> beams hypervisors an</font>

292
00:11:15,120 --> 00:11:18,420
army of droids is one of my favorite

293
00:11:17,160 --> 00:11:19,920
ones from<font color="#E5E5E5"> Jay duck he talks about</font>

294
00:11:18,420 --> 00:11:22,500
fuzzing feels like<font color="#E5E5E5"> Android a lot with</font>

295
00:11:19,920 --> 00:11:24,120
those are even utilizing cloud providers

296
00:11:22,500 --> 00:11:27,590
and there's a lot<font color="#CCCCCC"> of like a double yes</font>

297
00:11:24,120 --> 00:11:30,060
you have you know Microsoft Azure stuff

298
00:11:27,590 --> 00:11:31,470
you know if you trust them with your

299
00:11:30,060 --> 00:11:36,630
data then<font color="#E5E5E5"> maybe you can use them for</font>

300
00:11:31,470 --> 00:11:37,980
fuzzing<font color="#E5E5E5"> to tart specific report you need</font>

301
00:11:36,630 --> 00:11:39,390
to have templates another thing

302
00:11:37,980 --> 00:11:42,210
especially for mutation fussing

303
00:11:39,390 --> 00:11:43,949
templates are a must you gotta have

304
00:11:42,210 --> 00:11:45,690
something mutate right you know the<font color="#E5E5E5"> part</font>

305
00:11:43,950 --> 00:11:47,550
mutation you take a good known good foul

306
00:11:45,690 --> 00:11:49,170
and they going to make it possibly a bad

307
00:11:47,550 --> 00:11:51,180
file that will actually parse and

308
00:11:49,170 --> 00:11:54,120
hopefully<font color="#E5E5E5"> find a bug and one of</font><font color="#CCCCCC"> the</font>

309
00:11:51,180 --> 00:11:57,599
targets for support examples I've had

310
00:11:54,120 --> 00:11:59,460
here<font color="#CCCCCC"> Wynn up</font><font color="#E5E5E5"> debug Mario</font><font color="#CCCCCC"> Vilas great guy</font>

311
00:11:57,600 --> 00:12:02,000
<font color="#E5E5E5">great framework put a lot of work in</font>

312
00:11:59,460 --> 00:12:04,740
this Python framework very versatile

313
00:12:02,000 --> 00:12:06,960
tons of options for instrumentation it's

314
00:12:04,740 --> 00:12:08,670
just amazing piece of work but<font color="#CCCCCC"> when I</font>

315
00:12:06,960 --> 00:12:09,960
was using it for to do part<font color="#E5E5E5"> of this</font>

316
00:12:08,670 --> 00:12:13,110
project I was running into some issues

317
00:12:09,960 --> 00:12:15,060
around you know kind of a bottleneck

318
00:12:13,110 --> 00:12:16,200
with a database server so I was<font color="#E5E5E5"> buzzing</font>

319
00:12:15,060 --> 00:12:18,479
so much and I had so many machines

320
00:12:16,200 --> 00:12:19,820
running that the server I had a

321
00:12:18,480 --> 00:12:22,200
dedicated hardware for this as well

322
00:12:19,820 --> 00:12:25,410
actually couldn't process everything on

323
00:12:22,200 --> 00:12:27,750
time so you<font color="#E5E5E5"> know we had either you know</font>

324
00:12:25,410 --> 00:12:29,550
duplication of data or we had just<font color="#E5E5E5"> a ton</font>

325
00:12:27,750 --> 00:12:32,130
of entries that were horrible to sort

326
00:12:29,550 --> 00:12:33,300
through using traditional methods of you

327
00:12:32,130 --> 00:12:35,610
know<font color="#E5E5E5"> using sequel server or something</font>

328
00:12:33,300 --> 00:12:38,640
<font color="#CCCCCC">like that</font><font color="#E5E5E5"> and again like I mentioned</font>

329
00:12:35,610 --> 00:12:41,970
before<font color="#E5E5E5"> if you know there's modern memory</font>

330
00:12:38,640 --> 00:12:44,760
protection memory protections that will

331
00:12:41,970 --> 00:12:47,370
try to make<font color="#CCCCCC"> it harder for you to even to</font>

332
00:12:44,760 --> 00:12:48,930
attach to the process or maybe you know

333
00:12:47,370 --> 00:12:50,400
you got a huge<font color="#E5E5E5"> amount of threads in or</font>

334
00:12:48,930 --> 00:12:52,019
<font color="#CCCCCC">is creates different processes and</font>

335
00:12:50,400 --> 00:12:54,149
<font color="#E5E5E5">you've got to figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> which one it is</font>

336
00:12:52,019 --> 00:12:55,889
so it just becomes a mess and you<font color="#CCCCCC"> can't</font>

337
00:12:54,149 --> 00:12:57,629
expect a you know maybe open source

338
00:12:55,889 --> 00:13:01,350
framework to catch up for that don't

339
00:12:57,629 --> 00:13:03,329
catch up to<font color="#E5E5E5"> big changes like that but</font>

340
00:13:01,350 --> 00:13:05,850
went up to bug XL XL framework totally

341
00:13:03,329 --> 00:13:09,689
recommend it but target specific report

342
00:13:05,850 --> 00:13:11,610
support is hard to keep ahead<font color="#E5E5E5"> with than</font>

343
00:13:09,689 --> 00:13:14,009
you know the major corporations spitting

344
00:13:11,610 --> 00:13:17,730
out all these different targets and then

345
00:13:14,009 --> 00:13:19,410
<font color="#CCCCCC">the helpers uh so be great to have poles</font>

346
00:13:17,730 --> 00:13:20,999
restart support things like that<font color="#CCCCCC"> you</font>

347
00:13:19,410 --> 00:13:23,129
<font color="#CCCCCC">don't want to be fuzzing forever and</font>

348
00:13:20,999 --> 00:13:24,899
then something breaks and then it's<font color="#E5E5E5"> like</font>

349
00:13:23,129 --> 00:13:26,910
oh I<font color="#CCCCCC"> got to start from the first test</font>

350
00:13:24,899 --> 00:13:28,350
case that's you know you can write

351
00:13:26,910 --> 00:13:29,549
different things<font color="#E5E5E5"> to handle that but</font>

352
00:13:28,350 --> 00:13:32,100
definitely that's<font color="#E5E5E5"> a good thing to have</font>

353
00:13:29,549 --> 00:13:33,989
automatic repro and proof concept

354
00:13:32,100 --> 00:13:36,869
generations were my favorite<font color="#E5E5E5"> I actually</font>

355
00:13:33,989 --> 00:13:38,790
wrote a device driver buzzer a few

356
00:13:36,869 --> 00:13:41,160
months<font color="#E5E5E5"> ago and one of favorite features</font>

357
00:13:38,790 --> 00:13:44,998
was not<font color="#E5E5E5"> even the fuzzing part of it but</font>

358
00:13:41,160 --> 00:13:46,100
it was for every crash that occurred it

359
00:13:44,999 --> 00:13:49,110
would create a proof of concept

360
00:13:46,100 --> 00:13:51,929
literally a you know compile it run it

361
00:13:49,110 --> 00:13:53,670
and you can repro the crash so that is

362
00:13:51,929 --> 00:13:54,988
really really important for for complete

363
00:13:53,670 --> 00:13:59,040
fuzzing infrastructure having stuff like

364
00:13:54,989 --> 00:14:01,079
that and makes your life much easier you

365
00:13:59,040 --> 00:14:02,309
know<font color="#E5E5E5"> back at maximum incest support you</font>

366
00:14:01,079 --> 00:14:04,079
know you<font color="#E5E5E5"> don't want to be throwing a 10</font>

367
00:14:02,309 --> 00:14:07,019
megabyte file something when you know

368
00:14:04,079 --> 00:14:09,359
you're only fuzzing 32k of the foul or

369
00:14:07,019 --> 00:14:11,279
1k the foul or you know something like

370
00:14:09,360 --> 00:14:16,259
that so interpretation code coverage

371
00:14:11,279 --> 00:14:19,529
obvious things here so let's go<font color="#CCCCCC"> into</font>

372
00:14:16,259 --> 00:14:23,790
shake<font color="#E5E5E5"> it the mutator I've written I</font>

373
00:14:19,529 --> 00:14:26,459
wants to<font color="#E5E5E5"> discuss but before</font><font color="#CCCCCC"> we go into</font>

374
00:14:23,790 --> 00:14:29,399
it look at the<font color="#E5E5E5"> current tooling around</font>

375
00:14:26,459 --> 00:14:32,008
some browser fuzzing so we have cross

376
00:14:29,399 --> 00:14:34,160
for us across document bonding fuzzer by

377
00:14:32,009 --> 00:14:37,559
elcome tough knock<font color="#CCCCCC"> Wazowski from google</font>

378
00:14:34,160 --> 00:14:39,480
it's<font color="#E5E5E5"> a similar concept to shake it as</font><font color="#CCCCCC"> it</font>

379
00:14:37,559 --> 00:14:41,040
select some reviews reuses input

380
00:14:39,480 --> 00:14:42,629
fragments but does a<font color="#E5E5E5"> little bit</font>

381
00:14:41,040 --> 00:14:44,998
differently and chops files a little

382
00:14:42,629 --> 00:14:47,059
different way so the exact algorithm

383
00:14:44,999 --> 00:14:50,339
with this is is a little different

384
00:14:47,059 --> 00:14:52,259
fascinator tokenized as a<font color="#E5E5E5"> collection of</font>

385
00:14:50,339 --> 00:14:54,480
input and it builds all the test cases

386
00:14:52,259 --> 00:14:56,129
from that another interesting<font color="#E5E5E5"> concept</font>

387
00:14:54,480 --> 00:14:57,250
still use I think<font color="#E5E5E5"> that one's actually</font>

388
00:14:56,129 --> 00:14:59,890
one of the newer ones

389
00:14:57,250 --> 00:15:01,870
maybe an academic project forget which

390
00:14:59,890 --> 00:15:03,370
university came out of but<font color="#CCCCCC"> uh that was</font>

391
00:15:01,870 --> 00:15:08,680
an interesting one that you can use for

392
00:15:03,370 --> 00:15:10,690
browser fuzzing JN fun fuzz is a

393
00:15:08,680 --> 00:15:14,739
JavaScript specific buzzer from Jesse

394
00:15:10,690 --> 00:15:16,180
Ryder<font color="#CCCCCC"> Minh excuse me from Mozilla found</font>

395
00:15:14,740 --> 00:15:18,400
a ton of bugs with this deal in use

396
00:15:16,180 --> 00:15:22,930
today is still relevant that<font color="#E5E5E5"> you wrote</font>

397
00:15:18,400 --> 00:15:24,760
it probably on a few<font color="#CCCCCC"> 45 years ago but it</font>

398
00:15:22,930 --> 00:15:27,520
uses a generational method to create

399
00:15:24,760 --> 00:15:30,700
test cases for<font color="#CCCCCC"> JavaScript so he has a</font>

400
00:15:27,520 --> 00:15:32,410
huge fussing Oracle to to know the

401
00:15:30,700 --> 00:15:34,900
grammar<font color="#CCCCCC"> and to create interesting stuff</font>

402
00:15:32,410 --> 00:15:37,780
from<font color="#CCCCCC"> that and in length us this</font><font color="#E5E5E5"> is one I</font>

403
00:15:34,900 --> 00:15:39,459
looked at really recently and it's kind

404
00:15:37,780 --> 00:15:41,410
of like cross<font color="#E5E5E5"> fuzz again it does reuse</font>

405
00:15:39,460 --> 00:15:43,180
input fragments but the way that it does

406
00:15:41,410 --> 00:15:46,569
it they all do it in a kind<font color="#CCCCCC"> of a</font>

407
00:15:43,180 --> 00:15:49,180
different<font color="#E5E5E5"> way and it is a grammar based</font>

408
00:15:46,570 --> 00:15:50,980
buzzer and that's the one from Mozilla

409
00:15:49,180 --> 00:15:53,560
joint from Mozilla and<font color="#E5E5E5"> Saarland</font>

410
00:15:50,980 --> 00:15:54,580
<font color="#E5E5E5">University so all these are</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> current</font>

411
00:15:53,560 --> 00:15:57,880
tooling I kind of want<font color="#E5E5E5"> to give you a</font>

412
00:15:54,580 --> 00:15:59,860
look at what<font color="#CCCCCC"> tools are available</font><font color="#E5E5E5"> and you</font>

413
00:15:57,880 --> 00:16:01,480
know why why shake it will be different

414
00:15:59,860 --> 00:16:03,700
and i hope you<font color="#CCCCCC"> i know it's kind of hard</font>

415
00:16:01,480 --> 00:16:06,670
to<font color="#CCCCCC"> tell from the brief description but</font>

416
00:16:03,700 --> 00:16:08,140
it does do in a different way and that's

417
00:16:06,670 --> 00:16:10,560
why<font color="#CCCCCC"> i'm presenting it of course does the</font>

418
00:16:08,140 --> 00:16:14,220
same thing I wouldn't be here trust me

419
00:16:10,560 --> 00:16:16,739
so again deviations from<font color="#E5E5E5"> from shake it</font>

420
00:16:14,220 --> 00:16:19,120
so you can have dictionary and nesting

421
00:16:16,740 --> 00:16:21,250
so dictionary defining a dictionary<font color="#E5E5E5"> of</font>

422
00:16:19,120 --> 00:16:23,680
Balon tokens and then replacing them

423
00:16:21,250 --> 00:16:26,800
either by choice by strategy or randomly

424
00:16:23,680 --> 00:16:29,890
and then nesting either duplicating or

425
00:16:26,800 --> 00:16:31,569
multiplying multiplying tokens in a way

426
00:16:29,890 --> 00:16:34,270
you know you can think of<font color="#E5E5E5"> it as like</font>

427
00:16:31,570 --> 00:16:35,920
cascading statements that always you

428
00:16:34,270 --> 00:16:39,850
know are nested nest of statements even

429
00:16:35,920 --> 00:16:42,130
even recursion can work here to find

430
00:16:39,850 --> 00:16:44,140
bugs but<font color="#E5E5E5"> these are both of these are</font>

431
00:16:42,130 --> 00:16:47,410
deviations from the way shake it handles

432
00:16:44,140 --> 00:16:50,290
us two things so here's the high level

433
00:16:47,410 --> 00:16:52,600
algorithm we have I know you guys know

434
00:16:50,290 --> 00:16:56,199
that lady on the<font color="#E5E5E5"> left right Taylor Swift</font>

435
00:16:52,600 --> 00:16:58,510
show her and a shake it that is a high

436
00:16:56,200 --> 00:17:02,110
level logarithm<font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> assume you</font>

437
00:16:58,510 --> 00:17:04,089
guys know that joke but here's an even

438
00:17:02,110 --> 00:17:08,140
higher level diagram if you can tolerate

439
00:17:04,089 --> 00:17:11,079
it so at is very base you know you give

440
00:17:08,140 --> 00:17:12,339
it a for example<font color="#CCCCCC"> we give it HTML file</font>

441
00:17:11,079 --> 00:17:14,889
<font color="#E5E5E5">male file has a bunch of methods</font>

442
00:17:12,339 --> 00:17:16,839
attributes maybe call some functions it

443
00:17:14,890 --> 00:17:18,819
defines things like that<font color="#CCCCCC"> you put it into</font>

444
00:17:16,839 --> 00:17:22,329
<font color="#CCCCCC">the mutator and it spits out something</font>

445
00:17:18,819 --> 00:17:25,000
that<font color="#E5E5E5"> is going to be great hopefully you</font>

446
00:17:22,329 --> 00:17:26,349
know the point here is<font color="#CCCCCC"> to you know if</font>

447
00:17:25,000 --> 00:17:28,510
you can't get it from the<font color="#CCCCCC"> dog shake</font>

448
00:17:26,349 --> 00:17:30,850
things up so I kind of like<font color="#CCCCCC"> to use the</font>

449
00:17:28,510 --> 00:17:32,260
analogy you put something in a jar you

450
00:17:30,850 --> 00:17:34,000
put a<font color="#E5E5E5"> bunch of methods functions</font>

451
00:17:32,260 --> 00:17:34,960
everything in a jar shake them<font color="#E5E5E5"> up and</font>

452
00:17:34,000 --> 00:17:37,120
then replace<font color="#E5E5E5"> them in different</font>

453
00:17:34,960 --> 00:17:39,039
directions<font color="#E5E5E5"> to see what you can get to</font>

454
00:17:37,120 --> 00:17:41,018
maybe have some some interesting memory

455
00:17:39,039 --> 00:17:45,250
access corruption and things from<font color="#CCCCCC"> that</font>

456
00:17:41,019 --> 00:17:47,789
so again how it works shake it takes a

457
00:17:45,250 --> 00:17:51,100
collection of tokens or changeable<font color="#E5E5E5"> 'he's</font>

458
00:17:47,789 --> 00:17:52,269
so changeable again<font color="#E5E5E5"> just another word</font>

459
00:17:51,100 --> 00:17:56,230
for tokens a little bit<font color="#E5E5E5"> more descriptive</font>

460
00:17:52,269 --> 00:17:57,789
in this<font color="#E5E5E5"> case and it's it it parses the</font>

461
00:17:56,230 --> 00:17:59,559
file and creates a list of the

462
00:17:57,789 --> 00:18:02,789
changeable<font color="#CCCCCC"> 'he's with data and position</font>

463
00:17:59,559 --> 00:18:05,260
it switches the data at random positions

464
00:18:02,789 --> 00:18:07,779
and then it fixes it all back up<font color="#E5E5E5"> and</font>

465
00:18:05,260 --> 00:18:09,610
generates a new test case this ideal is

466
00:18:07,779 --> 00:18:11,470
simple<font color="#CCCCCC"> i give you that both the</font>

467
00:18:09,610 --> 00:18:14,979
implementation<font color="#E5E5E5"> of doing that is a little</font>

468
00:18:11,470 --> 00:18:17,110
<font color="#CCCCCC">more complex</font><font color="#E5E5E5"> and having done</font><font color="#CCCCCC"> that over</font>

469
00:18:14,980 --> 00:18:18,600
thousands<font color="#CCCCCC"> of iterations you can find</font>

470
00:18:17,110 --> 00:18:21,129
some you can get some<font color="#E5E5E5"> really good</font>

471
00:18:18,600 --> 00:18:23,830
mutations something that you couldn't do

472
00:18:21,130 --> 00:18:24,940
with a generational fuzzer and that the

473
00:18:23,830 --> 00:18:29,260
other<font color="#CCCCCC"> feathers i mentioned before just</font>

474
00:18:24,940 --> 00:18:32,289
don't do they do do reuse but<font color="#E5E5E5"> it's reuse</font>

475
00:18:29,260 --> 00:18:37,419
it's not necessarily shaking it as as

476
00:18:32,289 --> 00:18:39,490
<font color="#CCCCCC">you will so process how would you check</font>

477
00:18:37,419 --> 00:18:42,010
it for example step<font color="#E5E5E5"> one feed it</font>

478
00:18:39,490 --> 00:18:44,710
templates so it can be HTML<font color="#CCCCCC"> xml</font>

479
00:18:42,010 --> 00:18:46,720
<font color="#CCCCCC">javascript again like I mentioned PDFs</font>

480
00:18:44,710 --> 00:18:49,450
take JavaScript or they can run

481
00:18:46,720 --> 00:18:51,070
JavaScript so you can feed it<font color="#E5E5E5"> the</font>

482
00:18:49,450 --> 00:18:53,799
implementation<font color="#CCCCCC"> I have you can feed it a</font>

483
00:18:51,070 --> 00:18:56,500
PDF file it will find the JavaScript

484
00:18:53,799 --> 00:18:58,600
based on heuristics of course and use

485
00:18:56,500 --> 00:19:02,320
that to collect all the tokens and then

486
00:18:58,600 --> 00:19:05,740
mix them up in the way that works it can

487
00:19:02,320 --> 00:19:08,740
handle simple or complex input so I can

488
00:19:05,740 --> 00:19:10,389
handle as simple as you know to two

489
00:19:08,740 --> 00:19:11,889
tokens for example you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> you got to</font>

490
00:19:10,389 --> 00:19:13,870
<font color="#E5E5E5">have to to be able to switch them</font>

491
00:19:11,889 --> 00:19:16,178
obviously or can handle something that's

492
00:19:13,870 --> 00:19:18,010
<font color="#E5E5E5">just a huge</font><font color="#CCCCCC"> might you can take some huge</font>

493
00:19:16,179 --> 00:19:20,529
page off a random website off the

494
00:19:18,010 --> 00:19:22,000
internet and feed it to take it and it

495
00:19:20,529 --> 00:19:23,820
will spit out mutations it will probably

496
00:19:22,000 --> 00:19:26,310
burn your<font color="#CCCCCC"> CPU up</font>

497
00:19:23,820 --> 00:19:28,350
because it's<font color="#E5E5E5"> actually not that not meant</font>

498
00:19:26,310 --> 00:19:30,360
to handle quite that but uh there's a

499
00:19:28,350 --> 00:19:33,300
threshold but still it will it will

500
00:19:30,360 --> 00:19:36,000
create very very<font color="#E5E5E5"> unique and mutated</font>

501
00:19:33,300 --> 00:19:37,860
examples and as you'll see I'll<font color="#E5E5E5"> go over</font>

502
00:19:36,000 --> 00:19:42,660
has found some few interesting bugs with

503
00:19:37,860 --> 00:19:44,610
it so implementation wise if<font color="#CCCCCC"> you I mean</font>

504
00:19:42,660 --> 00:19:46,590
<font color="#E5E5E5">people in here no c sharp probably don't</font>

505
00:19:44,610 --> 00:19:51,149
care about it after i started using it I

506
00:19:46,590 --> 00:19:53,610
kind<font color="#CCCCCC"> of I kind of</font><font color="#E5E5E5"> liked it a lot so the</font>

507
00:19:51,150 --> 00:19:55,950
the implementation I have has motor HTML

508
00:19:53,610 --> 00:19:58,229
Javascript PDF JavaScript so you call

509
00:19:55,950 --> 00:20:00,390
shake it the<font color="#E5E5E5"> function and it was token</font>

510
00:19:58,230 --> 00:20:01,800
define all<font color="#CCCCCC"> the tokens and of course it</font>

511
00:20:00,390 --> 00:20:04,950
needs at least two to perform mutation

512
00:20:01,800 --> 00:20:06,840
and I<font color="#CCCCCC"> don't want to use regex for this</font>

513
00:20:04,950 --> 00:20:08,820
but you know that it's probably<font color="#E5E5E5"> the most</font>

514
00:20:06,840 --> 00:20:10,350
<font color="#E5E5E5">straightforward way to do it it's been</font>

515
00:20:08,820 --> 00:20:11,939
actually a ton of time coming up with

516
00:20:10,350 --> 00:20:14,340
all<font color="#E5E5E5"> the difference so this is just one</font>

517
00:20:11,940 --> 00:20:16,440
case for regex you can see like<font color="#CCCCCC"> i'm</font>

518
00:20:14,340 --> 00:20:19,199
<font color="#CCCCCC">doing like some crazy negative look</font>

519
00:20:16,440 --> 00:20:20,850
behind and positive<font color="#E5E5E5"> look Ahead's and you</font>

520
00:20:19,200 --> 00:20:22,710
don't want to<font color="#E5E5E5"> learn</font><font color="#CCCCCC"> all that stuff just</font>

521
00:20:20,850 --> 00:20:24,689
<font color="#CCCCCC">copy and paste you want to do this later</font>

522
00:20:22,710 --> 00:20:26,880
on with your<font color="#E5E5E5"> own stuff took way too much</font>

523
00:20:24,690 --> 00:20:28,860
time to to get this correct anyways it

524
00:20:26,880 --> 00:20:31,050
has a bunch of heuristics to find a

525
00:20:28,860 --> 00:20:35,010
bunch of interesting things like you

526
00:20:31,050 --> 00:20:38,580
<font color="#E5E5E5">know things in case statements variables</font>

527
00:20:35,010 --> 00:20:40,260
attributes method calls just anything

528
00:20:38,580 --> 00:20:43,250
<font color="#E5E5E5">that would be interesting if</font><font color="#CCCCCC"> you took it</font>

529
00:20:40,260 --> 00:20:46,500
from<font color="#E5E5E5"> one place and put it in another and</font>

530
00:20:43,250 --> 00:20:49,590
the browser is super super vulnerable to

531
00:20:46,500 --> 00:20:51,600
things like<font color="#E5E5E5"> that it's basically like you</font>

532
00:20:49,590 --> 00:20:53,040
know if you guys ever did any browser

533
00:20:51,600 --> 00:20:54,990
<font color="#E5E5E5">buzzing or browser research at all you</font>

534
00:20:53,040 --> 00:20:57,000
know it's a playground so whatever<font color="#E5E5E5"> you</font>

535
00:20:54,990 --> 00:20:58,170
tell it to do it's going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> at least try</font>

536
00:20:57,000 --> 00:21:00,390
<font color="#E5E5E5">to do it and if they don't have</font><font color="#CCCCCC"> a rule</font>

537
00:20:58,170 --> 00:21:01,830
to say it's<font color="#E5E5E5"> not going to do it you know</font>

538
00:21:00,390 --> 00:21:04,080
then you may get some interesting

539
00:21:01,830 --> 00:21:09,510
results therefore eventually security

540
00:21:04,080 --> 00:21:11,939
bugs hopefully so if token matches

541
00:21:09,510 --> 00:21:14,100
successful I save the token continue and

542
00:21:11,940 --> 00:21:16,590
then we<font color="#E5E5E5"> have shake da shuffle and this</font>

543
00:21:14,100 --> 00:21:20,159
iterates from the end chooses a random

544
00:21:16,590 --> 00:21:22,500
index and removes items from the pool

545
00:21:20,160 --> 00:21:26,700
until exhaustion I know<font color="#E5E5E5"> that makes no</font>

546
00:21:22,500 --> 00:21:28,140
sense when you say<font color="#E5E5E5"> it like that but yeah</font>

547
00:21:26,700 --> 00:21:31,320
just take a moment to consume if you're

548
00:21:28,140 --> 00:21:33,650
really interested in that<font color="#E5E5E5"> in the way</font>

549
00:21:31,320 --> 00:21:33,649
that it works

550
00:21:34,400 --> 00:21:40,410
but it's the approach<font color="#E5E5E5"> I took was a pull</font>

551
00:21:38,400 --> 00:21:44,040
exhaustion mix everything<font color="#E5E5E5"> until you're</font>

552
00:21:40,410 --> 00:21:46,020
done and after shuffle and now we build

553
00:21:44,040 --> 00:21:48,389
<font color="#CCCCCC">up the mutation so for each shuffle</font>

554
00:21:46,020 --> 00:21:50,940
position we take the new data and the

555
00:21:48,390 --> 00:21:54,060
position where is that and we insert it

556
00:21:50,940 --> 00:21:55,830
but also we have a huge other step we

557
00:21:54,060 --> 00:21:57,419
can't just<font color="#E5E5E5"> worried about the tokens we</font>

558
00:21:55,830 --> 00:22:00,780
have to worry about all the<font color="#CCCCCC"> other data</font>

559
00:21:57,420 --> 00:22:04,020
that<font color="#CCCCCC"> was in the was in the you know the</font>

560
00:22:00,780 --> 00:22:05,639
input so we can't just put all mutations

561
00:22:04,020 --> 00:22:07,260
back together because<font color="#E5E5E5"> now you know</font>

562
00:22:05,640 --> 00:22:09,090
<font color="#E5E5E5">that's not very useful we need to fix it</font>

563
00:22:07,260 --> 00:22:11,190
back in a way where it looks legit it

564
00:22:09,090 --> 00:22:13,379
looks<font color="#CCCCCC"> like the original file except</font>

565
00:22:11,190 --> 00:22:19,650
everything is screwed<font color="#E5E5E5"> up in it in a</font>

566
00:22:13,380 --> 00:22:21,420
strategic way so<font color="#E5E5E5"> after that we write two</font>

567
00:22:19,650 --> 00:22:22,620
outputs and repeat as many times as you

568
00:22:21,420 --> 00:22:24,120
want<font color="#E5E5E5"> you can do it a million iterations</font>

569
00:22:22,620 --> 00:22:26,129
<font color="#E5E5E5">I've actually did it a million</font>

570
00:22:24,120 --> 00:22:27,989
iterations depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> your input it</font>

571
00:22:26,130 --> 00:22:30,630
can take a while or not depending<font color="#E5E5E5"> on</font>

572
00:22:27,990 --> 00:22:31,890
your computing power of course<font color="#E5E5E5"> obviously</font>

573
00:22:30,630 --> 00:22:33,750
we don't care about collisions here I

574
00:22:31,890 --> 00:22:35,970
<font color="#E5E5E5">just give</font><font color="#CCCCCC"> her one shot ones this is not</font>

575
00:22:33,750 --> 00:22:37,260
security this program is not security

576
00:22:35,970 --> 00:22:40,250
sensitive so you don't worry about

577
00:22:37,260 --> 00:22:42,320
<font color="#E5E5E5">collisions if we get them it's fine</font>

578
00:22:40,250 --> 00:22:45,090
don't do that otherwise though obviously

579
00:22:42,320 --> 00:22:47,010
so example template again<font color="#E5E5E5"> I was talking</font>

580
00:22:45,090 --> 00:22:49,409
<font color="#CCCCCC">about all the tags attributes functions</font>

581
00:22:47,010 --> 00:22:51,720
objects parameters methods these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> all</font>

582
00:22:49,410 --> 00:22:54,870
really good<font color="#E5E5E5"> stuff because if we make a</font>

583
00:22:51,720 --> 00:22:57,660
function call maybe the function doesn't

584
00:22:54,870 --> 00:23:01,260
exist maybe we redefine the name of the

585
00:22:57,660 --> 00:23:04,050
function maybe the attribute is valid in

586
00:23:01,260 --> 00:23:05,550
one case but not valid another there's

587
00:23:04,050 --> 00:23:07,680
all kinds<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> that go wrong here</font>

588
00:23:05,550 --> 00:23:10,020
and the way the browser is interpreting

589
00:23:07,680 --> 00:23:13,500
it it's kind of looking to<font color="#E5E5E5"> make mistakes</font>

590
00:23:10,020 --> 00:23:15,450
<font color="#CCCCCC">and again HTML all these</font><font color="#E5E5E5"> parsers is</font>

591
00:23:13,500 --> 00:23:16,800
super forgiving so it doesn't matter

592
00:23:15,450 --> 00:23:19,080
<font color="#E5E5E5">what you feed them they're going to try</font>

593
00:23:16,800 --> 00:23:24,389
to render it in<font color="#E5E5E5"> ninety-nine percent of</font>

594
00:23:19,080 --> 00:23:26,639
the cases so uh<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know it's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> okay</font>

595
00:23:24,390 --> 00:23:30,900
<font color="#E5E5E5">this looks better so I and there's lines</font>

596
00:23:26,640 --> 00:23:33,330
in the middle<font color="#CCCCCC"> okay so a little deeper</font>

597
00:23:30,900 --> 00:23:35,280
view so<font color="#E5E5E5"> we get a list of all the</font>

598
00:23:33,330 --> 00:23:37,230
functions methods tags attributes all

599
00:23:35,280 --> 00:23:40,350
that stuff you<font color="#CCCCCC"> know we have to list at</font>

600
00:23:37,230 --> 00:23:42,810
this point<font color="#E5E5E5"> that we found we take those</font>

601
00:23:40,350 --> 00:23:45,449
<font color="#E5E5E5">lists to list and then we fix everything</font>

602
00:23:42,810 --> 00:23:46,679
back up positions data and then we

603
00:23:45,450 --> 00:23:48,930
output it

604
00:23:46,680 --> 00:23:52,200
again to the output file in just a

605
00:23:48,930 --> 00:23:54,770
little deeper microscope on that so hope

606
00:23:52,200 --> 00:23:59,580
everyone's clear how the mutator works

607
00:23:54,770 --> 00:24:02,129
implementation wise at this<font color="#E5E5E5"> point so</font>

608
00:23:59,580 --> 00:24:04,470
again the strategy<font color="#CCCCCC"> here is trying</font><font color="#E5E5E5"> to</font>

609
00:24:02,130 --> 00:24:07,050
confuse the<font color="#E5E5E5"> rendering engine we're</font>

610
00:24:04,470 --> 00:24:08,790
mixing everything we can basically and

611
00:24:07,050 --> 00:24:10,919
we're<font color="#CCCCCC"> trying to put</font><font color="#E5E5E5"> the browser into a</font>

612
00:24:08,790 --> 00:24:13,590
<font color="#E5E5E5">weird state a weird state where it's</font>

613
00:24:10,920 --> 00:24:15,840
likely to make mistakes it's<font color="#CCCCCC"> likely to</font>

614
00:24:13,590 --> 00:24:18,209
access memory in an interesting way it's

615
00:24:15,840 --> 00:24:19,860
likely to read memory interesting way

616
00:24:18,210 --> 00:24:21,810
you know that's what we're looking for

617
00:24:19,860 --> 00:24:24,540
is memory corruption vulnerabilities out

618
00:24:21,810 --> 00:24:30,270
of out of<font color="#E5E5E5"> this technique in it with</font>

619
00:24:24,540 --> 00:24:33,000
fussing with mutating so<font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> mutate</font>

620
00:24:30,270 --> 00:24:35,790
examples i know i gave<font color="#E5E5E5"> you like one a</font>

621
00:24:33,000 --> 00:24:38,370
very contrived example<font color="#E5E5E5"> i'll give</font><font color="#CCCCCC"> you two</font>

622
00:24:35,790 --> 00:24:42,210
or three<font color="#E5E5E5"> of the ones that</font><font color="#CCCCCC"> i actually ran</font>

623
00:24:38,370 --> 00:24:43,500
a<font color="#CCCCCC"> couple days ago so this one I don't</font>

624
00:24:42,210 --> 00:24:45,960
<font color="#CCCCCC">have the originals these are just</font><font color="#E5E5E5"> a</font>

625
00:24:43,500 --> 00:24:47,670
mutated copies but you can see it kind

626
00:24:45,960 --> 00:24:49,380
of looks pretty interesting<font color="#E5E5E5"> you can see</font>

627
00:24:47,670 --> 00:24:53,640
Jerry jquery's making a bunch of crazy

628
00:24:49,380 --> 00:24:55,740
calls with just weird data being passed

629
00:24:53,640 --> 00:24:58,080
in its calling doc click methods I don't

630
00:24:55,740 --> 00:24:59,820
even<font color="#E5E5E5"> know if doc clicks a legit jQuery</font>

631
00:24:58,080 --> 00:25:02,939
method maybe it's not wonder what

632
00:24:59,820 --> 00:25:05,939
happens<font color="#E5E5E5"> if it does you know some of the</font>

633
00:25:02,940 --> 00:25:09,720
attributes are being defined as HTTPS a

634
00:25:05,940 --> 00:25:12,410
HT he's being defined as slow you<font color="#E5E5E5"> know</font>

635
00:25:09,720 --> 00:25:15,480
we have URLs being defined

636
00:25:12,410 --> 00:25:17,940
serendipitously alt tags everything's

637
00:25:15,480 --> 00:25:21,150
just screwed up with<font color="#E5E5E5"> this and we have a</font>

638
00:25:17,940 --> 00:25:22,980
function defined call on the<font color="#CCCCCC"> jQuery for</font>

639
00:25:21,150 --> 00:25:26,730
the<font color="#E5E5E5"> previous call function which is also</font>

640
00:25:22,980 --> 00:25:30,300
passing a member object recipe for bucks

641
00:25:26,730 --> 00:25:33,450
hopefully and this one so this one is

642
00:25:30,300 --> 00:25:34,740
actually JavaScript and this is one<font color="#CCCCCC"> of</font>

643
00:25:33,450 --> 00:25:38,400
my favorite ones messing with<font color="#CCCCCC"> JavaScript</font>

644
00:25:34,740 --> 00:25:39,720
because we can you know in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> CSS</font>

645
00:25:38,400 --> 00:25:40,980
properties which you know this<font color="#CCCCCC"> is</font>

646
00:25:39,720 --> 00:25:42,510
probably gonna be invalid and not<font color="#E5E5E5"> going</font>

647
00:25:40,980 --> 00:25:44,850
to work but we actually<font color="#E5E5E5"> have function</font>

648
00:25:42,510 --> 00:25:47,550
calls in the CSS properties we're

649
00:25:44,850 --> 00:25:50,639
declaring variables that are using

650
00:25:47,550 --> 00:25:53,250
entered HTML who knows<font color="#CCCCCC"> if that's even</font>

651
00:25:50,640 --> 00:25:56,490
valid it could be insert in certain

652
00:25:53,250 --> 00:25:59,299
cases and certain cases not but it may

653
00:25:56,490 --> 00:26:04,039
<font color="#CCCCCC">try to dereference it anyways so</font>

654
00:25:59,299 --> 00:26:06,580
again all fun stuff here<font color="#CCCCCC"> and this one</font>

655
00:26:04,039 --> 00:26:11,509
you know we're trying to<font color="#E5E5E5"> I think this</font><font color="#CCCCCC"> is</font>

656
00:26:06,580 --> 00:26:13,789
yeah we're<font color="#CCCCCC"> doing some</font><font color="#E5E5E5"> XML and our SVG so</font>

657
00:26:11,509 --> 00:26:16,669
this is like<font color="#E5E5E5"> a mutated SVG file where</font>

658
00:26:13,789 --> 00:26:18,320
we're trying<font color="#E5E5E5"> to make we're assigning</font>

659
00:26:16,669 --> 00:26:20,779
variables to function calls and get them

660
00:26:18,320 --> 00:26:21,830
return values we're<font color="#E5E5E5"> getting we're</font>

661
00:26:20,779 --> 00:26:24,610
setting all kinds<font color="#E5E5E5"> of</font><font color="#CCCCCC"> different</font>

662
00:26:21,830 --> 00:26:27,949
attributes and methods to<font color="#E5E5E5"> to wild things</font>

663
00:26:24,610 --> 00:26:29,779
and we're<font color="#E5E5E5"> just creating havoc basically</font>

664
00:26:27,950 --> 00:26:32,539
creating havoc on the renderer and

665
00:26:29,779 --> 00:26:33,830
attempt to find books and these are some

666
00:26:32,539 --> 00:26:39,980
of the interesting examples that can be

667
00:26:33,830 --> 00:26:41,749
generated<font color="#CCCCCC"> using this shake it mutator so</font>

668
00:26:39,980 --> 00:26:44,509
step two in the process once you

669
00:26:41,749 --> 00:26:47,149
generate the however<font color="#CCCCCC"> many you mutated</font>

670
00:26:44,509 --> 00:26:48,529
files you want take that collection put

671
00:26:47,149 --> 00:26:50,570
them<font color="#E5E5E5"> on a web server put on the file</font>

672
00:26:48,529 --> 00:26:52,879
server you know this is<font color="#E5E5E5"> this is where</font>

673
00:26:50,570 --> 00:26:55,489
your debug harness comes in or your your

674
00:26:52,879 --> 00:26:59,748
helper helper files your target specific

675
00:26:55,489 --> 00:27:01,100
support where you're able to make it

676
00:26:59,749 --> 00:27:03,080
<font color="#CCCCCC">accessible to</font><font color="#E5E5E5"> the browser either through</font>

677
00:27:01,100 --> 00:27:05,449
command<font color="#E5E5E5"> line or through maybe you have</font>

678
00:27:03,080 --> 00:27:08,570
some hooking function that just makes it

679
00:27:05,450 --> 00:27:09,679
flip the page to the next<font color="#E5E5E5"> iteration you</font>

680
00:27:08,570 --> 00:27:11,809
know however way you want to<font color="#E5E5E5"> set that up</font>

681
00:27:09,679 --> 00:27:18,320
but the step to the process get it to

682
00:27:11,809 --> 00:27:20,690
the target in step 3 after<font color="#E5E5E5"> either over</font>

683
00:27:18,320 --> 00:27:22,460
the collection again highly recommend

684
00:27:20,690 --> 00:27:24,379
using a database of some sort try<font color="#E5E5E5"> not</font><font color="#CCCCCC"> to</font>

685
00:27:22,460 --> 00:27:25,519
do it locally sequel lights good for

686
00:27:24,379 --> 00:27:26,600
some things but it's just going to

687
00:27:25,519 --> 00:27:28,039
<font color="#E5E5E5">create a bottleneck on your local</font>

688
00:27:26,600 --> 00:27:29,209
machine if<font color="#CCCCCC"> you try to do that</font><font color="#E5E5E5"> and then</font>

689
00:27:28,039 --> 00:27:31,369
you grab to collect all the databases

690
00:27:29,210 --> 00:27:33,889
and merge them could be<font color="#CCCCCC"> a mess so</font>

691
00:27:31,369 --> 00:27:36,230
centralized database reporting when

692
00:27:33,889 --> 00:27:39,908
you're fuzzing is definitely one

693
00:27:36,230 --> 00:27:41,779
approached to do it scale-wise and

694
00:27:39,909 --> 00:27:45,019
hopefully get<font color="#E5E5E5"> some promising crashes</font>

695
00:27:41,779 --> 00:27:46,940
from that so again implementation

696
00:27:45,019 --> 00:27:50,149
written in C sharp algorithm is

697
00:27:46,940 --> 00:27:51,980
completely portable and I will make the

698
00:27:50,149 --> 00:27:55,369
the tool available fully functioning

699
00:27:51,980 --> 00:27:59,359
tool give some input either HTML

700
00:27:55,369 --> 00:28:00,799
Javascript<font color="#E5E5E5"> XML or give it a PDF file let</font>

701
00:27:59,359 --> 00:28:06,139
it mutate that<font color="#CCCCCC"> JavaScript see what</font>

702
00:28:00,799 --> 00:28:07,850
happens so<font color="#E5E5E5"> in incubation so when I first</font>

703
00:28:06,139 --> 00:28:09,498
started<font color="#CCCCCC"> this talk I told you that</font><font color="#E5E5E5"> this</font>

704
00:28:07,850 --> 00:28:11,330
is one of the projects that I kind<font color="#E5E5E5"> of</font>

705
00:28:09,499 --> 00:28:12,080
<font color="#CCCCCC">worked</font><font color="#E5E5E5"> on for a while kind of fell off</font>

706
00:28:11,330 --> 00:28:13,010
the

707
00:28:12,080 --> 00:28:15,710
these are<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the lessons I learned</font>

708
00:28:13,010 --> 00:28:18,019
from<font color="#CCCCCC"> it and there were definitely some</font>

709
00:28:15,710 --> 00:28:19,490
some hard lessons to make actually came

710
00:28:18,019 --> 00:28:23,059
across<font color="#CCCCCC"> some promising crashes for</font>

711
00:28:19,490 --> 00:28:25,399
<font color="#E5E5E5">example in chrome and firefox and</font>

712
00:28:23,059 --> 00:28:28,639
apparently opera collab that logo down

713
00:28:25,399 --> 00:28:30,199
there but<font color="#E5E5E5"> I wasn't able to determine</font>

714
00:28:28,640 --> 00:28:32,299
first of all if the crashes were from

715
00:28:30,200 --> 00:28:34,820
the renderer or if they were from detach

716
00:28:32,299 --> 00:28:38,480
attached or synchronization issues so

717
00:28:34,820 --> 00:28:39,918
kind of a fail there and you can't and

718
00:28:38,480 --> 00:28:42,260
it's<font color="#CCCCCC"> really hard to say because I</font><font color="#E5E5E5"> kept</font>

719
00:28:39,919 --> 00:28:44,179
getting<font color="#E5E5E5"> the bottleneck with the with the</font>

720
00:28:42,260 --> 00:28:45,950
infrastructure i was using database

721
00:28:44,179 --> 00:28:48,169
server but the database server was

722
00:28:45,950 --> 00:28:50,029
getting so overloaded that it was<font color="#E5E5E5"> really</font>

723
00:28:48,169 --> 00:28:52,340
hard<font color="#E5E5E5"> to get repros and when I did</font><font color="#CCCCCC"> get</font>

724
00:28:50,029 --> 00:28:54,380
repros it was hard to determine which

725
00:28:52,340 --> 00:28:56,449
one was affecting the target that which

726
00:28:54,380 --> 00:28:58,549
made it crash so there were actually

727
00:28:56,450 --> 00:28:59,960
some interesting crashes but through

728
00:28:58,549 --> 00:29:03,830
infrastructure problems it was really

729
00:28:59,960 --> 00:29:07,190
hard to to have them and and debug after

730
00:29:03,830 --> 00:29:08,928
that but a few of<font color="#E5E5E5"> them da goodbye for</font>

731
00:29:07,190 --> 00:29:11,510
example there was did find multiple

732
00:29:08,929 --> 00:29:12,440
crashes again this is incubation this I

733
00:29:11,510 --> 00:29:15,620
don't<font color="#CCCCCC"> have the full scale infrastructure</font>

734
00:29:12,440 --> 00:29:17,960
but using this in a minimal

735
00:29:15,620 --> 00:29:22,309
infrastructure these are the<font color="#CCCCCC"> results a</font>

736
00:29:17,960 --> 00:29:24,470
few crashes and WebKit web kit GDK again

737
00:29:22,309 --> 00:29:25,928
some<font color="#E5E5E5"> of them didn't repro there was some</font>

738
00:29:24,470 --> 00:29:30,500
invalid access and garbage collection

739
00:29:25,929 --> 00:29:33,080
sounds interesting unremarkable crashing

740
00:29:30,500 --> 00:29:35,990
k HTML conquer uses that<font color="#CCCCCC"> I was trying to</font>

741
00:29:33,080 --> 00:29:37,760
<font color="#E5E5E5">use I was a dozen conquer a bit but</font>

742
00:29:35,990 --> 00:29:42,169
mostly<font color="#E5E5E5"> just continuous memory allocation</font>

743
00:29:37,760 --> 00:29:44,720
copies not really interesting define an

744
00:29:42,169 --> 00:29:46,220
explodable bug in net surf and never

745
00:29:44,720 --> 00:29:48,700
heard<font color="#E5E5E5"> of it it's fine it's a really</font>

746
00:29:46,220 --> 00:29:52,370
embedded through<font color="#E5E5E5"> really popular embedded</font>

747
00:29:48,700 --> 00:29:54,919
browser for a lot of embedded devices it

748
00:29:52,370 --> 00:29:57,260
was a corruption of internal foreigner

749
00:29:54,919 --> 00:29:59,960
structure and it was triggered by

750
00:29:57,260 --> 00:30:03,049
mutated tag properties so when<font color="#E5E5E5"> fuzz it</font>

751
00:29:59,960 --> 00:30:06,110
<font color="#E5E5E5">re i'm sorry when shaken of mutated the</font>

752
00:30:03,049 --> 00:30:08,658
file and<font color="#CCCCCC"> i used it for fuzzing it</font>

753
00:30:06,110 --> 00:30:10,580
corrupted one of the tags and replaced

754
00:30:08,659 --> 00:30:13,370
it with an invalid one from another part

755
00:30:10,580 --> 00:30:15,918
of the file and and triggered triggered

756
00:30:13,370 --> 00:30:18,018
this<font color="#CCCCCC"> vulnerability another crashing</font>

757
00:30:15,919 --> 00:30:22,279
photon so photons kind of like an<font color="#E5E5E5"> open</font>

758
00:30:18,019 --> 00:30:25,700
<font color="#E5E5E5">source VLC plugin plugin not plug-in for</font>

759
00:30:22,279 --> 00:30:27,500
VLC but VLC plugin for browser and it

760
00:30:25,700 --> 00:30:29,779
was again triggered by parsing

761
00:30:27,500 --> 00:30:31,639
multimedia content tags so you know

762
00:30:29,779 --> 00:30:33,909
where you<font color="#CCCCCC"> put try to put music embed</font>

763
00:30:31,639 --> 00:30:36,168
music and embed videos into a web page

764
00:30:33,909 --> 00:30:41,330
it did some mutation there and was able

765
00:30:36,169 --> 00:30:44,559
to find an interesting crash so

766
00:30:41,330 --> 00:30:47,210
challenge is lesson to learn definitely

767
00:30:44,559 --> 00:30:50,240
having a comprehensive harness something

768
00:30:47,210 --> 00:30:53,139
able to scale give you a much smoother

769
00:30:50,240 --> 00:30:55,309
process smoother than I had at that time

770
00:30:53,139 --> 00:30:56,658
without a complete system is tough to be

771
00:30:55,309 --> 00:30:59,210
successful again these are just

772
00:30:56,659 --> 00:31:00,260
<font color="#E5E5E5">incubation results this is one</font><font color="#CCCCCC"> reason i</font>

773
00:30:59,210 --> 00:31:02,779
really wanted to get out<font color="#E5E5E5"> there i've been</font>

774
00:31:00,260 --> 00:31:04,700
you know a few friends<font color="#CCCCCC"> of mine I've had</font>

775
00:31:02,779 --> 00:31:05,960
a look at<font color="#CCCCCC"> it as well and we're trying</font><font color="#E5E5E5"> to</font>

776
00:31:04,700 --> 00:31:12,710
really get it in a good infrastructure

777
00:31:05,960 --> 00:31:15,529
and oops<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> next or not so future</font>

778
00:31:12,710 --> 00:31:17,389
work so if you have an infrastructure if

779
00:31:15,529 --> 00:31:19,940
you have a fuzzing infrastructure

780
00:31:17,389 --> 00:31:21,918
already and like some<font color="#E5E5E5"> of the ones for</font>

781
00:31:19,940 --> 00:31:23,899
example<font color="#CCCCCC"> whoresons nightmare fuzzer</font>

782
00:31:21,919 --> 00:31:25,450
<font color="#CCCCCC">together were seeing his talk on that</font>

783
00:31:23,899 --> 00:31:27,709
did a bunch of antivirus research

784
00:31:25,450 --> 00:31:29,779
anything<font color="#CCCCCC"> you have at home if you already</font>

785
00:31:27,710 --> 00:31:32,929
have a framework set up for this I'd

786
00:31:29,779 --> 00:31:34,909
love<font color="#E5E5E5"> for you to put either reimplement</font>

787
00:31:32,929 --> 00:31:36,889
shake it and whatever language you're

788
00:31:34,909 --> 00:31:39,230
frameworks in or take shake itself just

789
00:31:36,889 --> 00:31:42,260
use it<font color="#E5E5E5"> as a mutator host the files and</font>

790
00:31:39,230 --> 00:31:44,659
run it through CP having a look and then

791
00:31:42,260 --> 00:31:46,158
<font color="#CCCCCC">even</font><font color="#E5E5E5"> perhaps a medicine Ziller module</font>

792
00:31:44,659 --> 00:31:47,389
there's a<font color="#E5E5E5"> lot of fuzzing modules for</font>

793
00:31:46,159 --> 00:31:51,039
<font color="#CCCCCC">metasploit and it won't think it'd be</font>

794
00:31:47,389 --> 00:31:53,870
that hard<font color="#CCCCCC"> to port it</font><font color="#E5E5E5"> over there as well</font>

795
00:31:51,039 --> 00:31:55,580
so again fuzzing is more than mutation

796
00:31:53,870 --> 00:31:58,070
engine in this case<font color="#CCCCCC"> I'm showing you a</font>

797
00:31:55,580 --> 00:31:59,870
mutation engine because<font color="#E5E5E5"> I believe this</font>

798
00:31:58,070 --> 00:32:00,980
one's somewhat novel but you need more

799
00:31:59,870 --> 00:32:03,350
than that<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> really successful</font>

800
00:32:00,980 --> 00:32:06,379
fussing I think shake it has a ton

801
00:32:03,350 --> 00:32:09,289
potential and but the investment on

802
00:32:06,379 --> 00:32:10,820
tolling is paramount you know the

803
00:32:09,289 --> 00:32:12,950
investment<font color="#E5E5E5"> that put into this and even</font>

804
00:32:10,820 --> 00:32:14,658
even though as an incubation<font color="#E5E5E5"> I got some</font>

805
00:32:12,950 --> 00:32:16,730
interesting results for them for<font color="#E5E5E5"> the for</font>

806
00:32:14,659 --> 00:32:19,070
the work up at<font color="#E5E5E5"> end of this and again</font>

807
00:32:16,730 --> 00:32:21,440
more complexity more bucks that nothing

808
00:32:19,070 --> 00:32:24,230
given<font color="#E5E5E5"> code review can be really</font>

809
00:32:21,440 --> 00:32:26,690
<font color="#CCCCCC">expensive and if it's if it's for</font>

810
00:32:24,230 --> 00:32:28,700
<font color="#E5E5E5">something that's a really parsing</font>

811
00:32:26,690 --> 00:32:29,720
complex data<font color="#CCCCCC"> that's going to</font><font color="#E5E5E5"> be hard</font><font color="#CCCCCC"> to</font>

812
00:32:28,700 --> 00:32:31,280
get right anyways it's going to be

813
00:32:29,720 --> 00:32:34,160
really hard to know

814
00:32:31,280 --> 00:32:36,680
and to study the file in order to get

815
00:32:34,160 --> 00:32:39,020
everything<font color="#CCCCCC"> out of it again logic bugs</font>

816
00:32:36,680 --> 00:32:40,490
manually pin test is great for<font color="#CCCCCC"> that is</font>

817
00:32:39,020 --> 00:32:42,470
anyone<font color="#E5E5E5"> really see software becoming</font>

818
00:32:40,490 --> 00:32:44,600
simpler I mean it<font color="#E5E5E5"> seems like fuzzing is</font>

819
00:32:42,470 --> 00:32:45,890
just going to you know I<font color="#E5E5E5"> keep hearing</font>

820
00:32:44,600 --> 00:32:47,149
<font color="#E5E5E5">all fuzzing said we got all these</font>

821
00:32:45,890 --> 00:32:49,040
companies running running buzzers

822
00:32:47,150 --> 00:32:50,960
there's<font color="#E5E5E5"> still tons of bugs every day I</font>

823
00:32:49,040 --> 00:32:52,040
don't think fuzzing is dead I don't

824
00:32:50,960 --> 00:32:54,080
<font color="#CCCCCC">think it's going anywhere I think</font>

825
00:32:52,040 --> 00:32:56,659
software is getting more complex it's

826
00:32:54,080 --> 00:32:59,179
<font color="#E5E5E5">not getting simpler and I mean maybe</font>

827
00:32:56,660 --> 00:33:00,860
<font color="#E5E5E5">Allah hanging fruits gone but there's</font>

828
00:32:59,180 --> 00:33:07,160
there's<font color="#E5E5E5"> a ton more that's probably</font>

829
00:33:00,860 --> 00:33:08,419
coming<font color="#E5E5E5"> out tomorrow and I</font><font color="#CCCCCC"> would want</font><font color="#E5E5E5"> to</font>

830
00:33:07,160 --> 00:33:09,890
put this point here same boxes cannot

831
00:33:08,420 --> 00:33:11,900
save you<font color="#E5E5E5"> from bugs you just need one</font>

832
00:33:09,890 --> 00:33:14,060
more sdl can't save you from bugs

833
00:33:11,900 --> 00:33:16,490
there's<font color="#E5E5E5"> just too much code not enough</font>

834
00:33:14,060 --> 00:33:18,260
I've mitigations cannot save<font color="#CCCCCC"> you from</font>

835
00:33:16,490 --> 00:33:20,630
bugs they only make you need you know

836
00:33:18,260 --> 00:33:22,550
heart longer longer to write an exploit

837
00:33:20,630 --> 00:33:23,900
for and honestly managed code is a

838
00:33:22,550 --> 00:33:25,490
positive step forward in this direction

839
00:33:23,900 --> 00:33:27,740
you don't have to deal with<font color="#E5E5E5"> a lot of the</font>

840
00:33:25,490 --> 00:33:32,360
issues you do in c and c++ when you're

841
00:33:27,740 --> 00:33:35,030
out managed code so and that is what<font color="#CCCCCC"> i</font>

842
00:33:32,360 --> 00:33:36,320
got so i will go to<font color="#CCCCCC"> i have one guy's</font>

843
00:33:35,030 --> 00:33:38,680
real answer question<font color="#E5E5E5"> i'll go to</font>

844
00:33:36,320 --> 00:33:38,679
questions

845
00:33:41,900 --> 00:33:47,290
I don't think microphones on

846
00:33:51,760 --> 00:33:57,710
I'm sorry maybe I<font color="#CCCCCC"> wasn't really careful</font>

847
00:33:55,190 --> 00:34:00,320
and listening to<font color="#E5E5E5"> you and I couldn't get</font>

848
00:33:57,710 --> 00:34:04,090
<font color="#CCCCCC">up now you joke about Taylor Swift and</font>

849
00:34:00,320 --> 00:34:08,120
shake it but<font color="#E5E5E5"> how you detected bugs</font>

850
00:34:04,090 --> 00:34:11,420
memory roars debugger or some

851
00:34:08,120 --> 00:34:13,909
instrumentation maybe so so when I talk

852
00:34:11,420 --> 00:34:16,700
<font color="#CCCCCC">about</font><font color="#E5E5E5"> when app debug the framework I</font>

853
00:34:13,909 --> 00:34:18,649
talked<font color="#CCCCCC"> about see go back to it real</font>

854
00:34:16,699 --> 00:34:20,600
quick so i use win up the bug as a

855
00:34:18,650 --> 00:34:25,520
framework to do a lot<font color="#CCCCCC"> of things</font><font color="#E5E5E5"> for</font>

856
00:34:20,600 --> 00:34:28,610
attaching to the process to to launch

857
00:34:25,520 --> 00:34:30,800
the process to get crashes to send them

858
00:34:28,610 --> 00:34:34,730
to the database so let<font color="#E5E5E5"> me go</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to</font>

859
00:34:30,800 --> 00:34:37,400
that real quick yeah so win up the bug

860
00:34:34,730 --> 00:34:38,389
that is the framework<font color="#CCCCCC"> i used for the</font>

861
00:34:37,400 --> 00:34:40,550
<font color="#E5E5E5">harness and that's what</font><font color="#CCCCCC"> i was</font><font color="#E5E5E5"> talking</font>

862
00:34:38,389 --> 00:34:43,009
about I did<font color="#E5E5E5"> run into some issues some</font>

863
00:34:40,550 --> 00:34:45,440
bottleneck issues some of the more

864
00:34:43,010 --> 00:34:47,690
modern browsers keep changing the way

865
00:34:45,440 --> 00:34:49,400
they may be<font color="#CCCCCC"> their memory manager or some</font>

866
00:34:47,690 --> 00:34:51,320
kind of anti but debug techniques so

867
00:34:49,400 --> 00:34:52,520
that was it's hard<font color="#E5E5E5"> for the maintainer</font>

868
00:34:51,320 --> 00:34:54,410
for this project even<font color="#E5E5E5"> though it's a</font>

869
00:34:52,520 --> 00:34:56,418
great framework it's hard<font color="#E5E5E5"> for him to</font>

870
00:34:54,409 --> 00:34:58,819
keep up with<font color="#E5E5E5"> the new changes like that</font>

871
00:34:56,418 --> 00:35:00,950
so it doesn't<font color="#E5E5E5"> work for every target it</font>

872
00:34:58,820 --> 00:35:05,270
seems<font color="#CCCCCC"> that too does some binary</font>

873
00:35:00,950 --> 00:35:08,830
instrumentation right um yes it does but

874
00:35:05,270 --> 00:35:12,440
you know own written are some popular

875
00:35:08,830 --> 00:35:15,110
framework be no dena marie oh maybe for

876
00:35:12,440 --> 00:35:16,970
something else yeah so there is there's

877
00:35:15,110 --> 00:35:19,490
potential here<font color="#CCCCCC"> for a pin a pin plug in</font>

878
00:35:16,970 --> 00:35:22,359
for<font color="#E5E5E5"> this again I've worked with pin</font>

879
00:35:19,490 --> 00:35:25,310
before not my favorite one to work with

880
00:35:22,360 --> 00:35:26,930
so that's I guess that<font color="#E5E5E5"> would be the</font>

881
00:35:25,310 --> 00:35:28,790
<font color="#CCCCCC">reason I didn't go with</font><font color="#E5E5E5"> it here is how</font>

882
00:35:26,930 --> 00:35:30,649
it I was<font color="#E5E5E5"> trying to get when I've debug</font>

883
00:35:28,790 --> 00:35:32,870
to work for for the time I had<font color="#E5E5E5"> to work</font>

884
00:35:30,650 --> 00:35:35,690
on this project but yeah pin could be a

885
00:35:32,870 --> 00:35:38,000
<font color="#E5E5E5">solution here for that assuming it's</font>

886
00:35:35,690 --> 00:35:40,160
able to<font color="#E5E5E5"> you know it's able to stand up</font>

887
00:35:38,000 --> 00:35:42,350
to to some of the modern anti debug

888
00:35:40,160 --> 00:35:43,339
stuff that's going on I know a lot<font color="#E5E5E5"> of it</font>

889
00:35:42,350 --> 00:35:44,990
wouldn't affect it but there's still

890
00:35:43,340 --> 00:35:48,020
some really subtle thing's for certain

891
00:35:44,990 --> 00:35:49,490
targets like<font color="#CCCCCC"> chrome for example is kind</font>

892
00:35:48,020 --> 00:35:52,130
of a pain in the butt to debug sometimes

893
00:35:49,490 --> 00:35:53,229
so I'll be interested to hear results

894
00:35:52,130 --> 00:35:57,310
from<font color="#CCCCCC"> pen</font>

895
00:35:53,230 --> 00:36:01,510
on Chrome for<font color="#E5E5E5"> for fuzzing bigger well</font>

896
00:35:57,310 --> 00:36:05,549
thank<font color="#E5E5E5"> you nope Thank</font><font color="#CCCCCC"> okay thank you any</font>

897
00:36:01,510 --> 00:36:05,550
other questions like we have<font color="#E5E5E5"> one here</font>

898
00:36:06,840 --> 00:36:13,810
yeah thank<font color="#E5E5E5"> you for the</font><font color="#CCCCCC"> presentation</font>

899
00:36:09,310 --> 00:36:16,390
<font color="#E5E5E5">thank you Amy</font><font color="#CCCCCC"> writes that what you have</font>

900
00:36:13,810 --> 00:36:19,450
developed already something<font color="#E5E5E5"> like a</font><font color="#CCCCCC"> proof</font>

901
00:36:16,390 --> 00:36:22,690
<font color="#CCCCCC">of concept targeting browsers mainly</font>

902
00:36:19,450 --> 00:36:26,080
browser engines in themselves and you

903
00:36:22,690 --> 00:36:29,830
envision extension of it to any possible

904
00:36:26,080 --> 00:36:34,119
target like<font color="#E5E5E5"> I don't know I have an API</font>

905
00:36:29,830 --> 00:36:37,869
which accepts Jason requests<font color="#E5E5E5"> and we can</font>

906
00:36:34,119 --> 00:36:40,540
shuffle you know properties in situation

907
00:36:37,869 --> 00:36:43,930
in the JSON object I except for example

908
00:36:40,540 --> 00:36:46,180
<font color="#CCCCCC">right yep so I would have two points on</font>

909
00:36:43,930 --> 00:36:48,520
<font color="#E5E5E5">that one I did not mention that yeah</font>

910
00:36:46,180 --> 00:36:50,080
there are some api's where it would<font color="#CCCCCC"> be</font>

911
00:36:48,520 --> 00:36:51,850
make it a<font color="#E5E5E5"> lot easier instead of running</font>

912
00:36:50,080 --> 00:36:53,500
the browser you could just run you know

913
00:36:51,850 --> 00:36:55,509
pass it pass the<font color="#E5E5E5"> data directly to the</font>

914
00:36:53,500 --> 00:36:58,840
API that it does very<font color="#E5E5E5"> good point the</font>

915
00:36:55,510 --> 00:37:00,310
other point i would say<font color="#CCCCCC"> that you that</font>

916
00:36:58,840 --> 00:37:01,720
would work in a lot<font color="#CCCCCC"> of a lot of cases</font>

917
00:37:00,310 --> 00:37:03,670
<font color="#CCCCCC">where you</font><font color="#E5E5E5"> can actually rip out the</font>

918
00:37:01,720 --> 00:37:06,310
render from the process or the target

919
00:37:03,670 --> 00:37:07,869
but some of the clotheshorse ones is

920
00:37:06,310 --> 00:37:10,630
once you can't really<font color="#E5E5E5"> look at from that</font>

921
00:37:07,869 --> 00:37:12,520
so you know you're envisioning where you

922
00:37:10,630 --> 00:37:14,440
have like every browser engine every

923
00:37:12,520 --> 00:37:16,240
render and you can just you know fuzz

924
00:37:14,440 --> 00:37:18,359
all of them<font color="#E5E5E5"> without having</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start the</font>

925
00:37:16,240 --> 00:37:20,618
target things like that they'll be great

926
00:37:18,359 --> 00:37:22,299
but we don't actually have<font color="#E5E5E5"> all the</font>

927
00:37:20,619 --> 00:37:23,710
source code that<font color="#E5E5E5"> i know i don't have the</font>

928
00:37:22,300 --> 00:37:25,150
source code to all these were all the

929
00:37:23,710 --> 00:37:27,250
different browsers so stuff like

930
00:37:25,150 --> 00:37:30,130
<font color="#CCCCCC">Internet Explorer I know chrome</font><font color="#E5E5E5"> open</font>

931
00:37:27,250 --> 00:37:32,920
<font color="#E5E5E5">source firefox open source opera think</font>

932
00:37:30,130 --> 00:37:35,050
is not sure but yeah that would work for

933
00:37:32,920 --> 00:37:36,970
a lot of Brander browser<font color="#E5E5E5"> in browser</font>

934
00:37:35,050 --> 00:37:38,410
rendering engines but<font color="#CCCCCC"> i don't think</font>

935
00:37:36,970 --> 00:37:40,540
<font color="#E5E5E5">there's a universal approach for that</font>

936
00:37:38,410 --> 00:37:43,750
that I'm aware of but they'll be great

937
00:37:40,540 --> 00:37:47,529
that would be<font color="#E5E5E5"> great yeah and kind of</font>

938
00:37:43,750 --> 00:37:49,840
probably idea for for the project

939
00:37:47,530 --> 00:37:54,480
just now we were listening<font color="#E5E5E5"> to another</font>

940
00:37:49,840 --> 00:37:54,480
report<font color="#CCCCCC"> another presentation</font><font color="#E5E5E5"> regarding</font>

941
00:37:54,750 --> 00:38:03,370
like mathematical approach to

942
00:37:57,820 --> 00:38:07,420
structuring the water math on that one

943
00:38:03,370 --> 00:38:11,009
yeah yeah so anyway they they<font color="#CCCCCC"> are</font>

944
00:38:07,420 --> 00:38:14,530
attempting to generalize the concept of

945
00:38:11,010 --> 00:38:17,080
<font color="#E5E5E5">injection so it's not exactly what you</font>

946
00:38:14,530 --> 00:38:21,900
are doing but you probably could reduce

947
00:38:17,080 --> 00:38:26,020
their approach because injection needs

948
00:38:21,900 --> 00:38:30,430
<font color="#E5E5E5">well-defined grammar to define what</font><font color="#CCCCCC"> is</font>

949
00:38:26,020 --> 00:38:32,410
ejection what is not and<font color="#E5E5E5"> shovin needs</font>

950
00:38:30,430 --> 00:38:33,970
the same actually so you'd have my

951
00:38:32,410 --> 00:38:36,520
injection into the like the process

952
00:38:33,970 --> 00:38:37,720
right they were<font color="#E5E5E5"> talking about injecting</font>

953
00:38:36,520 --> 00:38:41,080
code into<font color="#E5E5E5"> the process to hook some</font>

954
00:38:37,720 --> 00:38:43,209
tension and<font color="#CCCCCC"> it's in anywhere okay did</font>

955
00:38:41,080 --> 00:38:46,090
trying<font color="#E5E5E5"> to make it as abstract as</font>

956
00:38:43,210 --> 00:38:47,520
possible okay there's a lot<font color="#CCCCCC"> of new</font>

957
00:38:46,090 --> 00:38:50,260
technologies making that harder though

958
00:38:47,520 --> 00:38:52,210
if you look<font color="#E5E5E5"> at some of the</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> Windows</font>

959
00:38:50,260 --> 00:38:54,490
10 for example a lot of the process<font color="#E5E5E5"> you</font>

960
00:38:52,210 --> 00:38:57,100
can't even keel<font color="#CCCCCC"> you can't even debug</font>

961
00:38:54,490 --> 00:39:00,220
they're like either signed by Microsoft

962
00:38:57,100 --> 00:39:02,140
for example or<font color="#E5E5E5"> there you know there's</font>

963
00:39:00,220 --> 00:39:04,270
some technology that makes it where it's

964
00:39:02,140 --> 00:39:06,370
even harder<font color="#CCCCCC"> to reverse-engineer</font><font color="#E5E5E5"> you</font>

965
00:39:04,270 --> 00:39:08,440
still reverse engineer it but harder to

966
00:39:06,370 --> 00:39:11,290
attach to it and there's got to be

967
00:39:08,440 --> 00:39:14,170
bypasses for that yeah a universal way

968
00:39:11,290 --> 00:39:16,300
to do that I feel like that that could

969
00:39:14,170 --> 00:39:17,890
it needs to overcome some obstacles from

970
00:39:16,300 --> 00:39:21,520
the engineering side of the target as

971
00:39:17,890 --> 00:39:24,160
well yeah but<font color="#CCCCCC"> I meant more the Miss</font>

972
00:39:21,520 --> 00:39:27,490
magical engine behind it so they use

973
00:39:24,160 --> 00:39:30,670
their engine for injections and I think

974
00:39:27,490 --> 00:39:33,310
you can<font color="#CCCCCC"> reuse it were slightly modified</font>

975
00:39:30,670 --> 00:39:36,340
for your purposes yeah definitely

976
00:39:33,310 --> 00:39:39,009
<font color="#E5E5E5">sounded generic enough to to reuse it</font>

977
00:39:36,340 --> 00:39:40,750
for fuzzing definitely no I<font color="#E5E5E5"> thought to</font>

978
00:39:39,010 --> 00:39:42,430
look at that paper up I was half paying

979
00:39:40,750 --> 00:39:46,840
attention and it was in Russian my

980
00:39:42,430 --> 00:39:50,029
<font color="#E5E5E5">Russian this yet so</font><font color="#CCCCCC"> good question thank</font>

981
00:39:46,840 --> 00:39:52,610
you anyone else yes

982
00:39:50,030 --> 00:39:57,350
a simple<font color="#E5E5E5"> question sure</font><font color="#CCCCCC"> do you tell us</font>

983
00:39:52,610 --> 00:40:00,400
which what browser is the<font color="#E5E5E5"> most safe one</font>

984
00:39:57,350 --> 00:40:03,520
to your opinion at the<font color="#E5E5E5"> tempo question I</font>

985
00:40:00,400 --> 00:40:07,190
don't know at the loading patience I

986
00:40:03,520 --> 00:40:09,470
don't know<font color="#E5E5E5"> until knowledge I don't know</font>

987
00:40:07,190 --> 00:40:14,000
if I'm if I'm qualified to answer that I

988
00:40:09,470 --> 00:40:15,259
don't know if<font color="#E5E5E5"> anyone is really um yeah I</font>

989
00:40:14,000 --> 00:40:17,030
don't know I would say the<font color="#CCCCCC"> system</font>

990
00:40:15,260 --> 00:40:19,400
looking at so when I think of like

991
00:40:17,030 --> 00:40:23,120
secure browsing when I look at systems

992
00:40:19,400 --> 00:40:25,160
that are and like I hate to like go to

993
00:40:23,120 --> 00:40:26,569
the tablet way and like all you know the

994
00:40:25,160 --> 00:40:28,190
<font color="#E5E5E5">Apple way of like having everything</font>

995
00:40:26,570 --> 00:40:30,440
isolated and everything where you can't

996
00:40:28,190 --> 00:40:32,620
run your own code but that seems to<font color="#E5E5E5"> be</font>

997
00:40:30,440 --> 00:40:35,120
like<font color="#E5E5E5"> code integrity and you know signing</font>

998
00:40:32,620 --> 00:40:38,450
seems to be a really<font color="#E5E5E5"> good solution for</font>

999
00:40:35,120 --> 00:40:39,589
even if<font color="#E5E5E5"> you have a bug you know being</font>

1000
00:40:38,450 --> 00:40:42,020
able to put different stuff on the

1001
00:40:39,590 --> 00:40:43,610
system to exploit it and making payloads

1002
00:40:42,020 --> 00:40:45,680
that much harder to run in memory

1003
00:40:43,610 --> 00:40:47,960
there's<font color="#E5E5E5"> always some bypass that's going</font>

1004
00:40:45,680 --> 00:40:49,940
to remove that restriction but i would

1005
00:40:47,960 --> 00:40:52,160
say instead of answering what the most

1006
00:40:49,940 --> 00:40:54,590
your browser<font color="#E5E5E5"> i would say look at the</font>

1007
00:40:52,160 --> 00:40:57,290
<font color="#CCCCCC">platform and you won't have to worry</font>

1008
00:40:54,590 --> 00:41:01,700
<font color="#CCCCCC">about it as much it's the best thing</font><font color="#E5E5E5"> i</font>

1009
00:40:57,290 --> 00:41:04,550
can get back yeah<font color="#CCCCCC"> you can follow up if</font>

1010
00:41:01,700 --> 00:41:08,870
you want don't ask me what the<font color="#E5E5E5"> most</font>

1011
00:41:04,550 --> 00:41:13,790
secure platform is so good thank you any

1012
00:41:08,870 --> 00:41:20,529
more questions the box is floating

1013
00:41:13,790 --> 00:41:20,529
around who would<font color="#E5E5E5"> like the box anyone</font>

1014
00:41:21,059 --> 00:41:27,099
all right i'll be around and i'll be

1015
00:41:24,279 --> 00:41:28,989
soon as<font color="#E5E5E5"> i get home whatever time it is</font>

1016
00:41:27,099 --> 00:41:31,509
<font color="#E5E5E5">there</font><font color="#CCCCCC"> i got</font><font color="#E5E5E5"> here today so</font><font color="#CCCCCC"> i'm a little</font>

1017
00:41:28,989 --> 00:41:33,249
<font color="#E5E5E5">confused on circadian rhythms at this</font>

1018
00:41:31,509 --> 00:41:35,529
point but i'm<font color="#CCCCCC"> gonna upload</font><font color="#E5E5E5"> the tool</font>

1019
00:41:33,249 --> 00:41:37,238
since<font color="#E5E5E5"> i get home and let me know if you</font>

1020
00:41:35,529 --> 00:41:38,769
have any more questions and<font color="#CCCCCC"> i'll be</font>

1021
00:41:37,239 --> 00:41:40,089
around and hopefully see you all tonight

1022
00:41:38,769 --> 00:41:42,238
or somewhere tomorrow thank you very

1023
00:41:40,089 --> 00:41:42,239
much

