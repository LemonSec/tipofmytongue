1
00:00:01,230 --> 00:00:05,430
[Music]

2
00:00:09,500 --> 00:00:14,460
<font color="#E5E5E5">good afternoon today</font><font color="#CCCCCC"> I will talk about</font>

3
00:00:12,960 --> 00:00:16,760
our reverse engineering tools that they

4
00:00:14,460 --> 00:00:20,220
have<font color="#E5E5E5"> been writing during</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> last year</font>

5
00:00:16,760 --> 00:00:22,890
<font color="#CCCCCC">that I call Piraeus I would have start</font>

6
00:00:20,220 --> 00:00:24,979
<font color="#E5E5E5">giving out splaining what was my</font>

7
00:00:22,890 --> 00:00:28,650
motivation behind<font color="#CCCCCC"> right in such a tool</font>

8
00:00:24,980 --> 00:00:31,710
<font color="#E5E5E5">then</font><font color="#CCCCCC"> playing how I</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> develop it and</font>

9
00:00:28,650 --> 00:00:34,949
how it works<font color="#E5E5E5"> the tool then talk about</font>

10
00:00:31,710 --> 00:00:38,219
the heuristics<font color="#CCCCCC"> that I'm using in such a</font>

11
00:00:34,950 --> 00:00:40,170
tool<font color="#CCCCCC"> I will talk about some of</font><font color="#E5E5E5"> this so</font>

12
00:00:38,219 --> 00:00:42,860
many problems<font color="#CCCCCC"> that appear</font><font color="#E5E5E5"> swing right in</font>

13
00:00:40,170 --> 00:00:47,309
<font color="#E5E5E5">sweetie till then I will do a small demo</font>

14
00:00:42,860 --> 00:00:50,010
<font color="#CCCCCC">if things go</font><font color="#E5E5E5"> okay and then I will talk</font>

15
00:00:47,309 --> 00:00:55,078
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> future of</font><font color="#CCCCCC"> this tool if it has</font>

16
00:00:50,010 --> 00:00:57,960
<font color="#CCCCCC">any so the motivation then when I in</font>

17
00:00:55,079 --> 00:00:59,460
doing reverse engineering and I know for

18
00:00:57,960 --> 00:01:03,180
<font color="#CCCCCC">a fact that it happens to a lot of</font>

19
00:00:59,460 --> 00:01:05,150
<font color="#E5E5E5">YouTube we open or Target or we start</font>

20
00:01:03,180 --> 00:01:07,500
with or Target<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we have a lot of</font>

21
00:01:05,150 --> 00:01:09,960
statically compiled as<font color="#E5E5E5"> open source</font>

22
00:01:07,500 --> 00:01:11,939
libraries that are being used in<font color="#CCCCCC"> that</font>

23
00:01:09,960 --> 00:01:15,000
database<font color="#E5E5E5"> in that either database that we</font>

24
00:01:11,939 --> 00:01:17,339
have in that winery<font color="#CCCCCC"> and what we want is</font>

25
00:01:15,000 --> 00:01:19,590
to import<font color="#E5E5E5"> as matte symbols as possible</font>

26
00:01:17,340 --> 00:01:22,380
from<font color="#E5E5E5"> this open source projects so we</font>

27
00:01:19,590 --> 00:01:24,780
<font color="#E5E5E5">don't have to reverse engineer open</font>

28
00:01:22,380 --> 00:01:27,149
source software<font color="#CCCCCC"> we don't have to reverse</font>

29
00:01:24,780 --> 00:01:29,520
<font color="#CCCCCC">engineer the</font><font color="#E5E5E5"> phantoms that we don't</font>

30
00:01:27,150 --> 00:01:32,939
really care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> in the target that we</font>

31
00:01:29,520 --> 00:01:36,840
<font color="#E5E5E5">are researching</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> sometimes we might</font>

32
00:01:32,939 --> 00:01:40,020
want<font color="#CCCCCC"> to import symbols or import the</font>

33
00:01:36,840 --> 00:01:42,750
structures enumeration<font color="#CCCCCC"> unions is tough</font>

34
00:01:40,020 --> 00:01:46,710
stuff<font color="#E5E5E5"> from codes that we cannot compile</font>

35
00:01:42,750 --> 00:01:49,350
but somehow we got our<font color="#E5E5E5"> hands on then</font>

36
00:01:46,710 --> 00:01:53,100
source codes<font color="#E5E5E5"> so some random examples</font>

37
00:01:49,350 --> 00:01:55,500
<font color="#CCCCCC">let's say that</font><font color="#E5E5E5"> the Sun malgor code base</font>

38
00:01:53,100 --> 00:01:57,750
gets leaks<font color="#E5E5E5"> somewhere but we cannot</font>

39
00:01:55,500 --> 00:01:59,909
compile it but still<font color="#E5E5E5"> we want to import</font>

40
00:01:57,750 --> 00:02:04,079
the<font color="#E5E5E5"> symbols directly straight from</font><font color="#CCCCCC"> that</font>

41
00:01:59,909 --> 00:02:06,210
source code<font color="#CCCCCC"> to or binary databases</font><font color="#E5E5E5"> so</font>

42
00:02:04,079 --> 00:02:08,098
what I have always done<font color="#E5E5E5"> was to try to</font>

43
00:02:06,210 --> 00:02:11,579
<font color="#E5E5E5">build a binary from the source code</font><font color="#CCCCCC"> that</font>

44
00:02:08,098 --> 00:02:13,339
I have then decide<font color="#E5E5E5"> that to analyze the</font>

45
00:02:11,580 --> 00:02:15,379
binary<font color="#E5E5E5"> then</font>

46
00:02:13,340 --> 00:02:18,410
export it with<font color="#CCCCCC"> bindi</font><font color="#E5E5E5"> back in the day or</font>

47
00:02:15,379 --> 00:02:21,170
the<font color="#E5E5E5"> áfourá as of today and then defeat</font>

48
00:02:18,410 --> 00:02:24,109
against male<font color="#E5E5E5"> real target when you can</font>

49
00:02:21,170 --> 00:02:28,190
<font color="#CCCCCC">bind</font><font color="#E5E5E5"> the source code it works pretty</font>

50
00:02:24,110 --> 00:02:30,049
well<font color="#CCCCCC"> but if</font><font color="#E5E5E5"> you cannot piles it for some</font>

51
00:02:28,190 --> 00:02:32,780
<font color="#E5E5E5">reason there is nothing else</font><font color="#CCCCCC"> that you</font>

52
00:02:30,049 --> 00:02:38,860
can do<font color="#E5E5E5"> unless you use a tool like the</font>

53
00:02:32,780 --> 00:02:41,900
one we will display later so so when

54
00:02:38,860 --> 00:02:45,280
what can we do whenever<font color="#E5E5E5"> we have partial</font>

55
00:02:41,900 --> 00:02:48,769
<font color="#E5E5E5">ants or calls that we cannot compile</font>

56
00:02:45,280 --> 00:02:51,500
either we<font color="#E5E5E5"> build small parts</font><font color="#CCCCCC"> I have has</font>

57
00:02:48,769 --> 00:02:55,569
done that in the past<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> was a pain</font>

58
00:02:51,500 --> 00:02:58,220
in the<font color="#E5E5E5"> ass try to build</font><font color="#CCCCCC"> two object files</font>

59
00:02:55,569 --> 00:03:00,679
file<font color="#E5E5E5"> per file source code per source</font>

60
00:02:58,220 --> 00:03:02,989
code and then<font color="#E5E5E5"> try to import all</font><font color="#CCCCCC"> the</font>

61
00:03:00,680 --> 00:03:05,810
symbols one per one<font color="#E5E5E5"> and it was a huge</font>

62
00:03:02,989 --> 00:03:09,470
<font color="#E5E5E5">pain in the</font><font color="#CCCCCC"> ass and usually the files</font>

63
00:03:05,810 --> 00:03:11,750
<font color="#E5E5E5">the C files that you are able to compile</font>

64
00:03:09,470 --> 00:03:15,440
are actually the less interesting ones

65
00:03:11,750 --> 00:03:19,130
<font color="#E5E5E5">so you lose a lot of time for not</font>

66
00:03:15,440 --> 00:03:20,660
getting anything<font color="#CCCCCC"> real interesting so the</font>

67
00:03:19,130 --> 00:03:22,940
other<font color="#CCCCCC"> option is somebody that is</font>

68
00:03:20,660 --> 00:03:27,290
<font color="#E5E5E5">masochistic</font><font color="#CCCCCC"> that's me right sue settle</font>

69
00:03:22,940 --> 00:03:28,670
so<font color="#E5E5E5"> you have to do it so I had to</font><font color="#CCCCCC"> say</font>

70
00:03:27,290 --> 00:03:31,459
there when I<font color="#CCCCCC"> were reverse engineering</font>

71
00:03:28,670 --> 00:03:33,910
some security product<font color="#E5E5E5"> and I realized</font>

72
00:03:31,459 --> 00:03:37,190
<font color="#E5E5E5">that there was part the source code</font><font color="#CCCCCC"> leak</font>

73
00:03:33,910 --> 00:03:41,510
<font color="#E5E5E5">but</font><font color="#CCCCCC"> it was like 10 years ago</font><font color="#E5E5E5"> before I</font>

74
00:03:37,190 --> 00:03:43,790
<font color="#E5E5E5">started</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> my task with that target</font>

75
00:03:41,510 --> 00:03:45,918
and I<font color="#CCCCCC"> call</font><font color="#E5E5E5"> them obviously compile it</font>

76
00:03:43,790 --> 00:03:47,660
<font color="#E5E5E5">there were many header files at the word</font>

77
00:03:45,919 --> 00:03:49,760
<font color="#CCCCCC">machine there were many library files</font>

78
00:03:47,660 --> 00:03:56,299
that I didn't have so I call<font color="#E5E5E5"> them build</font>

79
00:03:49,760 --> 00:03:59,328
it at all so what I<font color="#CCCCCC"> did was importing by</font>

80
00:03:56,299 --> 00:04:01,099
hand<font color="#CCCCCC"> like finding a string</font><font color="#E5E5E5"> constants in</font>

81
00:03:59,329 --> 00:04:03,290
the database and finding<font color="#CCCCCC"> the string</font>

82
00:04:01,099 --> 00:04:06,470
constants in the source code and then

83
00:04:03,290 --> 00:04:09,108
say in a that string constant is<font color="#CCCCCC"> only</font>

84
00:04:06,470 --> 00:04:11,480
using<font color="#E5E5E5"> that phantom so if that function</font>

85
00:04:09,109 --> 00:04:14,870
<font color="#CCCCCC">is here in the source code</font><font color="#E5E5E5"> I know that</font>

86
00:04:11,480 --> 00:04:18,019
the same name is in that database<font color="#CCCCCC"> I did</font>

87
00:04:14,870 --> 00:04:19,399
the same<font color="#E5E5E5"> with other things like if I</font>

88
00:04:18,019 --> 00:04:21,048
know that that function in the source

89
00:04:19,399 --> 00:04:23,419
code<font color="#E5E5E5"> is actually that's fun tune in the</font>

90
00:04:21,048 --> 00:04:26,060
binary the<font color="#CCCCCC"> fans even</font><font color="#E5E5E5"> prior to that and</font>

91
00:04:23,419 --> 00:04:27,080
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Fontan next to that soul</font><font color="#E5E5E5"> be they</font>

92
00:04:26,060 --> 00:04:30,050
<font color="#CCCCCC">soul be</font>

93
00:04:27,080 --> 00:04:31,849
maybe the same after I don't know how

94
00:04:30,050 --> 00:04:39,469
<font color="#CCCCCC">many days doing</font><font color="#E5E5E5"> that I said to myself</font>

95
00:04:31,849 --> 00:04:41,270
<font color="#E5E5E5">that it was a stupid and I said this is</font>

96
00:04:39,469 --> 00:04:44,449
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> solve</font><font color="#E5E5E5"> be done by</font><font color="#CCCCCC"> Ana</font>

97
00:04:41,270 --> 00:04:46,639
script and not myself<font color="#CCCCCC"> I saw</font><font color="#E5E5E5"> somehow</font>

98
00:04:44,449 --> 00:04:49,099
automate that process because it<font color="#E5E5E5"> is</font>

99
00:04:46,639 --> 00:04:51,710
<font color="#E5E5E5">stupid and I shall not be</font><font color="#CCCCCC"> doing it so I</font>

100
00:04:49,099 --> 00:04:54,080
opened my<font color="#CCCCCC"> never-ending</font><font color="#E5E5E5"> to the list</font><font color="#CCCCCC"> Ike</font>

101
00:04:51,710 --> 00:04:56,780
write<font color="#E5E5E5"> down the idea of automating it</font>

102
00:04:54,080 --> 00:05:01,340
somehow<font color="#E5E5E5"> and two years after</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I</font>

103
00:04:56,780 --> 00:05:04,818
finally<font color="#E5E5E5"> started working on it so the</font>

104
00:05:01,340 --> 00:05:07,460
tool I wrote<font color="#CCCCCC"> espera to explain I started</font>

105
00:05:04,819 --> 00:05:10,370
working<font color="#E5E5E5"> on this tool the last year the</font>

106
00:05:07,460 --> 00:05:14,330
name is big I use which is a source<font color="#CCCCCC"> it's</font>

107
00:05:10,370 --> 00:05:16,280
a<font color="#CCCCCC"> greek for source</font><font color="#E5E5E5"> as in source code the</font>

108
00:05:14,330 --> 00:05:18,919
very first rudimentary version of the

109
00:05:16,280 --> 00:05:21,888
tool took me around one month<font color="#E5E5E5"> but not</font>

110
00:05:18,919 --> 00:05:24,979
because<font color="#E5E5E5"> really the tool is pretty</font>

111
00:05:21,889 --> 00:05:27,500
complex<font color="#E5E5E5"> but because I didn't have the</font>

112
00:05:24,979 --> 00:05:31,490
tools I needed to<font color="#E5E5E5"> start implementing</font>

113
00:05:27,500 --> 00:05:35,090
what I want us so after<font color="#E5E5E5"> I implemented my</font>

114
00:05:31,490 --> 00:05:37,310
basic rudimentary framework to be able

115
00:05:35,090 --> 00:05:39,469
<font color="#CCCCCC">to work with source code</font><font color="#E5E5E5"> because that</font>

116
00:05:37,310 --> 00:05:43,810
was<font color="#E5E5E5"> actually the problem I was able to</font>

117
00:05:39,469 --> 00:05:48,680
<font color="#E5E5E5">write</font><font color="#CCCCCC"> my first prototype pretty fast so</font>

118
00:05:43,810 --> 00:05:50,479
<font color="#CCCCCC">how should how</font><font color="#E5E5E5"> does such a tool work so</font>

119
00:05:48,680 --> 00:05:52,009
the process of porting symbols and or

120
00:05:50,479 --> 00:05:54,620
different source code seconds binaries

121
00:05:52,009 --> 00:05:58,339
<font color="#CCCCCC">summarizes is basically the following</font><font color="#E5E5E5"> we</font>

122
00:05:54,620 --> 00:06:01,190
parse binaries and the source code we

123
00:05:58,339 --> 00:06:05,419
<font color="#E5E5E5">extract features artifacts</font><font color="#CCCCCC"> you name</font><font color="#E5E5E5"> it</font>

124
00:06:01,190 --> 00:06:08,150
<font color="#E5E5E5">for its</font><font color="#CCCCCC"> phantom</font><font color="#E5E5E5"> found in its source</font><font color="#CCCCCC"> code</font>

125
00:06:05,419 --> 00:06:10,729
then we<font color="#CCCCCC"> do the same with</font><font color="#E5E5E5"> the binaries</font>

126
00:06:08,150 --> 00:06:13,878
extracting actually the same features

127
00:06:10,729 --> 00:06:15,889
the same artifacts<font color="#E5E5E5"> and then we simply</font>

128
00:06:13,879 --> 00:06:18,680
<font color="#CCCCCC">finds matches between source codes and</font>

129
00:06:15,889 --> 00:06:22,190
binary<font color="#CCCCCC"> fancy ins basis on the artifacts</font>

130
00:06:18,680 --> 00:06:24,409
on the features that we extract and this

131
00:06:22,190 --> 00:06:26,409
<font color="#E5E5E5">is very problematic</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we calculate an</font>

132
00:06:24,409 --> 00:06:29,330
accuracy ratio between the matches

133
00:06:26,409 --> 00:06:31,129
<font color="#E5E5E5">basically is that it's a bit more</font>

134
00:06:29,330 --> 00:06:32,199
complex than<font color="#E5E5E5"> that</font><font color="#CCCCCC"> but basically</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

135
00:06:31,129 --> 00:06:35,630
all<font color="#E5E5E5"> I did</font>

136
00:06:32,199 --> 00:06:38,709
<font color="#E5E5E5">so</font><font color="#CCCCCC"> parsing we can easily extract</font>

137
00:06:35,630 --> 00:06:41,000
information from binaries using<font color="#CCCCCC"> either</font>

138
00:06:38,709 --> 00:06:43,880
<font color="#CCCCCC">for</font><font color="#E5E5E5"> its</font><font color="#CCCCCC"> phanty on base</font>

139
00:06:41,000 --> 00:06:46,250
<font color="#E5E5E5">look for its instructing whatever but</font>

140
00:06:43,880 --> 00:06:48,890
there is no such tool for<font color="#CCCCCC"> source codes</font>

141
00:06:46,250 --> 00:06:51,410
<font color="#CCCCCC">the most similar</font><font color="#E5E5E5"> tool I think</font><font color="#CCCCCC"> that</font>

142
00:06:48,890 --> 00:06:54,860
probably<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> st tools</font><font color="#E5E5E5"> understands</font>

143
00:06:51,410 --> 00:06:57,260
most<font color="#E5E5E5"> likely many of you here know</font><font color="#CCCCCC"> it but</font>

144
00:06:54,860 --> 00:07:00,650
it's not<font color="#E5E5E5"> even remotely</font><font color="#CCCCCC"> close to</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we</font>

145
00:06:57,260 --> 00:07:03,050
can do in<font color="#E5E5E5"> either and we lack proper</font>

146
00:07:00,650 --> 00:07:06,440
tools<font color="#E5E5E5"> to do static analysis automated</font>

147
00:07:03,050 --> 00:07:07,760
<font color="#CCCCCC">static analysis</font><font color="#E5E5E5"> in source codes so for</font>

148
00:07:06,440 --> 00:07:09,500
passing source code first we need to

149
00:07:07,760 --> 00:07:15,169
<font color="#CCCCCC">build some</font><font color="#E5E5E5"> tool or library to be able</font><font color="#CCCCCC"> to</font>

150
00:07:09,500 --> 00:07:17,330
<font color="#E5E5E5">parse source codes</font><font color="#CCCCCC"> some people might</font>

151
00:07:15,169 --> 00:07:20,090
believe<font color="#E5E5E5"> that</font><font color="#CCCCCC"> parsing source code is an</font>

152
00:07:17,330 --> 00:07:22,609
already<font color="#E5E5E5"> solved project problem but it's</font>

153
00:07:20,090 --> 00:07:27,099
far from<font color="#CCCCCC"> being like that</font><font color="#E5E5E5"> so we can write</font>

154
00:07:22,610 --> 00:07:29,210
a parser for own dialect or for own

155
00:07:27,100 --> 00:07:31,160
programming<font color="#E5E5E5"> language or for some</font>

156
00:07:29,210 --> 00:07:33,859
programming language but it's very

157
00:07:31,160 --> 00:07:37,400
different<font color="#CCCCCC"> to write in a parser for any</font>

158
00:07:33,860 --> 00:07:39,770
and all<font color="#E5E5E5"> dialects of that programming</font>

159
00:07:37,400 --> 00:07:43,489
language that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to support there</font>

160
00:07:39,770 --> 00:07:47,859
<font color="#E5E5E5">is not a single single dialect of the C</font>

161
00:07:43,490 --> 00:07:51,190
<font color="#CCCCCC">language and even if there was only</font><font color="#E5E5E5"> one</font>

162
00:07:47,860 --> 00:07:55,729
dialect there<font color="#E5E5E5"> are many how to say</font>

163
00:07:51,190 --> 00:07:59,150
different<font color="#E5E5E5"> extensions</font><font color="#CCCCCC"> si Lang</font><font color="#E5E5E5"> GCC</font>

164
00:07:55,729 --> 00:08:04,820
Microsoft compilers the Intel C++

165
00:07:59,150 --> 00:08:07,280
compiler they all work differently<font color="#E5E5E5"> some</font>

166
00:08:04,820 --> 00:08:09,620
examples for example compiler extensions

167
00:08:07,280 --> 00:08:13,520
are one of the most common

168
00:08:09,620 --> 00:08:16,940
incompatibilities for differences that

169
00:08:13,520 --> 00:08:17,870
are remarkable pragmas are some of the

170
00:08:16,940 --> 00:08:20,660
best examples

171
00:08:17,870 --> 00:08:23,020
<font color="#CCCCCC">no single</font><font color="#E5E5E5"> pragma is support by all the</font>

172
00:08:20,660 --> 00:08:25,760
most typically used<font color="#CCCCCC"> compilers</font>

173
00:08:23,020 --> 00:08:27,979
precompiled headers<font color="#CCCCCC"> if you are using the</font>

174
00:08:25,760 --> 00:08:30,380
<font color="#E5E5E5">Microsoft compiler where do you put</font>

175
00:08:27,979 --> 00:08:32,330
<font color="#CCCCCC">include your pre compilot header</font><font color="#E5E5E5"> before</font>

176
00:08:30,380 --> 00:08:33,830
that<font color="#E5E5E5"> you can write whatever you</font><font color="#CCCCCC"> want I</font>

177
00:08:32,330 --> 00:08:36,200
mean binary data<font color="#E5E5E5"> it doesn't matter</font>

178
00:08:33,830 --> 00:08:37,450
<font color="#E5E5E5">obviously it is not compatible with</font><font color="#CCCCCC"> GCC</font>

179
00:08:36,200 --> 00:08:40,370
<font color="#CCCCCC">or salon</font>

180
00:08:37,450 --> 00:08:42,650
you can omit the middle operand<font color="#E5E5E5"> off</font>

181
00:08:40,370 --> 00:08:45,050
eternal inspiration with<font color="#E5E5E5"> GCC but you</font>

182
00:08:42,650 --> 00:08:47,180
cannot<font color="#E5E5E5"> talk with the older compilers you</font>

183
00:08:45,050 --> 00:08:50,420
get a wall the embedded assembler if you

184
00:08:47,180 --> 00:08:52,849
have written C or C++ code<font color="#E5E5E5"> with embedded</font>

185
00:08:50,420 --> 00:08:54,979
assembler you will know that it<font color="#E5E5E5"> is</font>

186
00:08:52,850 --> 00:08:57,769
anything but portable

187
00:08:54,980 --> 00:09:01,699
switch cave<font color="#CCCCCC"> wrangles and many many many</font>

188
00:08:57,769 --> 00:09:05,569
<font color="#E5E5E5">other</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> that make very</font><font color="#CCCCCC"> different</font>

189
00:09:01,699 --> 00:09:09,859
<font color="#E5E5E5">it's a dialect of</font><font color="#CCCCCC"> the same talking only</font>

190
00:09:05,569 --> 00:09:12,199
about the<font color="#E5E5E5"> C language anyway you make a</font>

191
00:09:09,860 --> 00:09:14,569
<font color="#E5E5E5">science want to parse or I just want</font><font color="#CCCCCC"> us</font>

192
00:09:12,199 --> 00:09:15,019
<font color="#CCCCCC">to parse Cisco sees source codes at</font>

193
00:09:14,569 --> 00:09:19,250
first

194
00:09:15,019 --> 00:09:21,709
now<font color="#E5E5E5"> I support</font><font color="#CCCCCC"> partially</font><font color="#E5E5E5"> C++</font><font color="#CCCCCC"> and even</font>

195
00:09:19,250 --> 00:09:24,620
objectivity<font color="#CCCCCC"> but I will talk later</font><font color="#E5E5E5"> on</font>

196
00:09:21,709 --> 00:09:27,709
about that<font color="#E5E5E5"> so I said okay I want</font><font color="#CCCCCC"> to</font>

197
00:09:24,620 --> 00:09:30,470
start with something simple I<font color="#E5E5E5"> will start</font>

198
00:09:27,709 --> 00:09:33,109
the<font color="#E5E5E5"> at with C so</font><font color="#CCCCCC"> what can you use you</font>

199
00:09:30,470 --> 00:09:36,649
<font color="#CCCCCC">can use pi c parser or any similarly</font>

200
00:09:33,110 --> 00:09:39,800
limited parser<font color="#E5E5E5"> if it is for a quick tool</font>

201
00:09:36,649 --> 00:09:42,800
or for a<font color="#CCCCCC"> prototype but i don't</font><font color="#E5E5E5"> recommend</font>

202
00:09:39,800 --> 00:09:45,258
you using it for<font color="#CCCCCC"> anything hal series you</font>

203
00:09:42,800 --> 00:09:47,479
can use<font color="#CCCCCC"> flags by sun auntie</font><font color="#E5E5E5"> or whatever</font>

204
00:09:45,259 --> 00:09:49,310
and then hate yourself for<font color="#CCCCCC"> years to go</font>

205
00:09:47,480 --> 00:09:52,300
on while you are<font color="#E5E5E5"> adding</font><font color="#CCCCCC"> new features to</font>

206
00:09:49,310 --> 00:09:55,550
<font color="#E5E5E5">support this or that seemed of the c</font>

207
00:09:52,300 --> 00:09:57,889
language and that specific<font color="#CCCCCC"> compiled</font>

208
00:09:55,550 --> 00:10:01,399
compilers tension or that<font color="#E5E5E5"> the specific</font>

209
00:09:57,889 --> 00:10:03,199
back or whatever<font color="#E5E5E5"> up that compiler</font><font color="#CCCCCC"> i</font>

210
00:10:01,399 --> 00:10:05,509
don't recommend you doing so if it is

211
00:10:03,199 --> 00:10:06,139
<font color="#E5E5E5">for that purpose because your project</font><font color="#CCCCCC"> is</font>

212
00:10:05,509 --> 00:10:08,209
<font color="#E5E5E5">not anymore</font>

213
00:10:06,139 --> 00:10:11,540
analyzing source code is<font color="#CCCCCC"> write in a</font>

214
00:10:08,209 --> 00:10:16,369
parser you<font color="#CCCCCC"> can use a</font><font color="#E5E5E5"> fuzzy parser</font><font color="#CCCCCC"> like</font>

215
00:10:11,540 --> 00:10:18,410
you're from fabian Yamaguchi or wanted

216
00:10:16,370 --> 00:10:21,019
<font color="#E5E5E5">this commercial acetals understand games</font>

217
00:10:18,410 --> 00:10:23,540
with a fuzzy parser but again it's

218
00:10:21,019 --> 00:10:25,579
pretty<font color="#E5E5E5"> much like the previous one you</font>

219
00:10:23,540 --> 00:10:27,769
<font color="#CCCCCC">are</font><font color="#E5E5E5"> writing</font><font color="#CCCCCC"> apart set and your project</font>

220
00:10:25,579 --> 00:10:30,109
most of the time became writing a parser

221
00:10:27,769 --> 00:10:31,630
not the tool that<font color="#E5E5E5"> you want but</font><font color="#CCCCCC"> it you</font>

222
00:10:30,110 --> 00:10:34,399
have<font color="#CCCCCC"> less rules</font>

223
00:10:31,630 --> 00:10:37,880
another<font color="#CCCCCC"> optimum that</font><font color="#E5E5E5"> you can use is like</font>

224
00:10:34,399 --> 00:10:41,360
GCC xml<font color="#CCCCCC"> or</font><font color="#E5E5E5"> sun any order</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> maintain</font>

225
00:10:37,880 --> 00:10:44,540
and probably all and<font color="#E5E5E5"> all tool basis on</font>

226
00:10:41,360 --> 00:10:46,160
GCC<font color="#CCCCCC"> i don't recommend you most</font><font color="#E5E5E5"> more than</font>

227
00:10:44,540 --> 00:10:49,699
anything<font color="#E5E5E5"> because they are pretty complex</font>

228
00:10:46,160 --> 00:10:52,040
and<font color="#CCCCCC"> are maintenance</font><font color="#E5E5E5"> and old if you have</font>

229
00:10:49,699 --> 00:10:54,469
a region<font color="#E5E5E5"> called in</font><font color="#CCCCCC"> america</font><font color="#E5E5E5"> maybe you can</font>

230
00:10:52,040 --> 00:10:57,829
get a license of the<font color="#CCCCCC"> edison</font><font color="#E5E5E5"> dissing rob</font>

231
00:10:54,470 --> 00:11:01,309
compiler naturally<font color="#E5E5E5"> i done and</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> not</font>

232
00:10:57,829 --> 00:11:03,410
rich so any skipping and the only<font color="#CCCCCC"> option</font>

233
00:11:01,309 --> 00:11:07,459
for<font color="#E5E5E5"> most of the people is using</font><font color="#CCCCCC"> ceiling</font>

234
00:11:03,410 --> 00:11:08,000
<font color="#E5E5E5">her class</font><font color="#CCCCCC"> you name</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> they have been the</font>

235
00:11:07,459 --> 00:11:12,170
ends

236
00:11:08,000 --> 00:11:18,050
or api's for C C++ some Python<font color="#E5E5E5"> and it's</font>

237
00:11:12,170 --> 00:11:21,020
pretty<font color="#E5E5E5"> good overall so that</font><font color="#CCCCCC"> was my</font>

238
00:11:18,050 --> 00:11:23,209
choice obviously<font color="#E5E5E5"> just in the salon right</font>

239
00:11:21,020 --> 00:11:25,640
<font color="#E5E5E5">on</font><font color="#CCCCCC"> bendings we</font><font color="#E5E5E5"> have some advantages</font><font color="#CCCCCC"> like</font>

240
00:11:23,210 --> 00:11:29,300
for<font color="#CCCCCC"> example we got support for linux mac</font>

241
00:11:25,640 --> 00:11:33,290
<font color="#CCCCCC">windows freebsd we'll get an abstract</font>

242
00:11:29,300 --> 00:11:36,890
syntax tree<font color="#E5E5E5"> per its function even if</font>

243
00:11:33,290 --> 00:11:41,569
that<font color="#CCCCCC"> function has</font><font color="#E5E5E5"> compliation errors</font>

244
00:11:36,890 --> 00:11:43,819
which is actually what<font color="#E5E5E5"> i want and so we</font>

245
00:11:41,570 --> 00:11:47,300
support anything<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the sealant</font>

246
00:11:43,820 --> 00:11:50,150
<font color="#CCCCCC">front-ends support and they evolve they</font>

247
00:11:47,300 --> 00:11:52,040
are<font color="#CCCCCC"> evolving</font><font color="#E5E5E5"> pretty fast the drawbacks</font>

248
00:11:50,150 --> 00:11:54,439
is that<font color="#CCCCCC"> the developers don't give a</font>

249
00:11:52,040 --> 00:11:57,099
about the bindings<font color="#E5E5E5"> and most of the time</font>

250
00:11:54,440 --> 00:11:59,450
you are greeting<font color="#CCCCCC"> writing hugely</font>

251
00:11:57,100 --> 00:12:02,420
workarounds to<font color="#CCCCCC"> do even the most simple</font>

252
00:11:59,450 --> 00:12:06,320
<font color="#CCCCCC">things like when you're parsing an ast</font>

253
00:12:02,420 --> 00:12:10,790
and<font color="#E5E5E5"> you have something like int I equals</font>

254
00:12:06,320 --> 00:12:14,510
0 that<font color="#E5E5E5"> 0 is an integer literal well</font>

255
00:12:10,790 --> 00:12:16,730
there is no documented way to get that<font color="#E5E5E5"> 0</font>

256
00:12:14,510 --> 00:12:23,390
value<font color="#E5E5E5"> that you are using for initial is</font>

257
00:12:16,730 --> 00:12:26,630
initializing<font color="#E5E5E5"> that variable yeah so in</font>

258
00:12:23,390 --> 00:12:28,850
any case<font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about the artifacts or</font>

259
00:12:26,630 --> 00:12:32,390
the features subtracting<font color="#E5E5E5"> them as I said</font>

260
00:12:28,850 --> 00:12:33,650
we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> using Ceylon Python business to</font>

261
00:12:32,390 --> 00:12:35,900
parse the source code and<font color="#CCCCCC"> instruct the</font>

262
00:12:33,650 --> 00:12:41,329
artifacts then I do the<font color="#CCCCCC"> same with either</font>

263
00:12:35,900 --> 00:12:44,390
Python<font color="#E5E5E5"> to extract I'm using either but</font>

264
00:12:41,330 --> 00:12:46,970
one calls use<font color="#E5E5E5"> an array or binary name</font>

265
00:12:44,390 --> 00:12:49,250
yeah or any other tool that's<font color="#CCCCCC"> make a</font>

266
00:12:46,970 --> 00:12:51,680
<font color="#CCCCCC">sign using either</font><font color="#E5E5E5"> but the important</font>

267
00:12:49,250 --> 00:12:55,010
<font color="#CCCCCC">thing is what features for artifacts</font><font color="#E5E5E5"> I</font>

268
00:12:51,680 --> 00:12:57,949
instructing so in the current<font color="#CCCCCC"> version</font><font color="#E5E5E5"> of</font>

269
00:12:55,010 --> 00:13:01,490
pig is finally extracting distance here

270
00:12:57,950 --> 00:13:03,710
<font color="#E5E5E5">string constants number of loop in that</font>

271
00:13:01,490 --> 00:13:06,110
<font color="#CCCCCC">fantine the number of conditionals</font>

272
00:13:03,710 --> 00:13:07,839
because it doesn't<font color="#E5E5E5"> change dramatically</font>

273
00:13:06,110 --> 00:13:10,370
<font color="#E5E5E5">between the source codes and the binary</font>

274
00:13:07,839 --> 00:13:12,500
<font color="#E5E5E5">the number of phantom calls because</font>

275
00:13:10,370 --> 00:13:15,170
<font color="#CCCCCC">usually doesn't</font><font color="#E5E5E5"> change dramatically</font>

276
00:13:12,500 --> 00:13:17,270
<font color="#E5E5E5">between source and binary the number of</font>

277
00:13:15,170 --> 00:13:19,550
external<font color="#CCCCCC"> stand I made of Global's the</font>

278
00:13:17,270 --> 00:13:21,920
number of<font color="#E5E5E5"> switches and their case values</font>

279
00:13:19,550 --> 00:13:24,258
<font color="#E5E5E5">if the front unit</font><font color="#CCCCCC"> record</font>

280
00:13:21,920 --> 00:13:26,498
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> list of</font><font color="#CCCCCC"> collies</font><font color="#E5E5E5"> not the colors</font>

281
00:13:24,259 --> 00:13:29,290
<font color="#E5E5E5">because let's say</font><font color="#CCCCCC"> that we are trying</font><font color="#E5E5E5"> to</font>

282
00:13:26,499 --> 00:13:33,109
<font color="#E5E5E5">match phantoms from a library function</font>

283
00:13:29,290 --> 00:13:34,459
<font color="#E5E5E5">we will see that many functions doesn't</font>

284
00:13:33,109 --> 00:13:36,499
have any color in the source code

285
00:13:34,459 --> 00:13:38,779
<font color="#E5E5E5">because</font><font color="#CCCCCC"> they are</font><font color="#E5E5E5"> actually a library</font><font color="#CCCCCC"> to</font>

286
00:13:36,499 --> 00:13:40,579
be import in something<font color="#CCCCCC"> that you are</font>

287
00:13:38,779 --> 00:13:42,919
actually<font color="#CCCCCC"> using them</font><font color="#E5E5E5"> and the number of</font>

288
00:13:40,579 --> 00:13:45,969
colors changed dramatically<font color="#E5E5E5"> but the name</font>

289
00:13:42,919 --> 00:13:48,859
of<font color="#CCCCCC"> collies doesn't say that much</font>

290
00:13:45,970 --> 00:13:51,559
so<font color="#CCCCCC"> finding matches this</font><font color="#E5E5E5"> is actually how</font>

291
00:13:48,859 --> 00:13:54,139
I start finding matches<font color="#CCCCCC"> it's just</font>

292
00:13:51,559 --> 00:13:57,139
running SQL queries<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I support</font>

293
00:13:54,139 --> 00:14:00,169
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> to SQLite</font><font color="#E5E5E5"> databases then I</font>

294
00:13:57,139 --> 00:14:04,100
run that query to get<font color="#E5E5E5"> the first initial</font>

295
00:14:00,169 --> 00:14:06,829
results so when I<font color="#E5E5E5"> was writing the</font><font color="#CCCCCC"> first</font>

296
00:14:04,100 --> 00:14:09,589
prototype of<font color="#E5E5E5"> it</font><font color="#CCCCCC"> I found</font><font color="#E5E5E5"> that in that</font>

297
00:14:06,829 --> 00:14:13,309
case<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> for less than five</font>

298
00:14:09,589 --> 00:14:16,699
thousand fountains<font color="#CCCCCC"> I got 90 matches very</font>

299
00:14:13,309 --> 00:14:21,709
<font color="#E5E5E5">few very little but they were a false</font>

300
00:14:16,699 --> 00:14:24,439
positive frame which wasn't<font color="#E5E5E5"> that bad so</font>

301
00:14:21,709 --> 00:14:27,349
once you start<font color="#CCCCCC"> with some</font><font color="#E5E5E5"> results that</font>

302
00:14:24,439 --> 00:14:30,589
<font color="#E5E5E5">they are near serve false positive</font>

303
00:14:27,350 --> 00:14:33,110
results we can<font color="#E5E5E5"> continually dig in from</font>

304
00:14:30,589 --> 00:14:35,899
<font color="#CCCCCC">there</font><font color="#E5E5E5"> Frizzles naturally the matches</font>

305
00:14:33,110 --> 00:14:37,759
<font color="#CCCCCC">basis on the</font><font color="#E5E5E5"> heuristics the ones that we</font>

306
00:14:35,899 --> 00:14:39,799
are<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> from their results will be</font>

307
00:14:37,759 --> 00:14:44,720
less good than the ones that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> found</font>

308
00:14:39,799 --> 00:14:46,959
with the previous SQL queries<font color="#E5E5E5"> but it</font>

309
00:14:44,720 --> 00:14:50,629
means<font color="#CCCCCC"> that we have to write some</font>

310
00:14:46,959 --> 00:14:52,368
Pantheon or<font color="#CCCCCC"> some accuracy rate you to</font>

311
00:14:50,629 --> 00:14:56,419
compare the<font color="#E5E5E5"> phantoms and determine if</font>

312
00:14:52,369 --> 00:14:59,959
the match is<font color="#CCCCCC"> fused or not but first</font>

313
00:14:56,419 --> 00:15:02,660
let's talk about<font color="#CCCCCC"> the heuristics</font><font color="#E5E5E5"> so first</font>

314
00:14:59,959 --> 00:15:04,189
as I said<font color="#CCCCCC"> I find Sony meteor</font><font color="#E5E5E5"> results and</font>

315
00:15:02,660 --> 00:15:14,899
from the<font color="#E5E5E5"> immediate results</font>

316
00:15:04,189 --> 00:15:17,899
what what<font color="#E5E5E5"> the screen got away okay so</font>

317
00:15:14,899 --> 00:15:20,600
first<font color="#E5E5E5"> I find his son in EDR results and</font>

318
00:15:17,899 --> 00:15:23,629
then from<font color="#CCCCCC"> destiny TRS rules</font><font color="#E5E5E5"> I applies on</font>

319
00:15:20,600 --> 00:15:26,149
heuristics<font color="#CCCCCC"> to finds</font><font color="#E5E5E5"> more results what</font>

320
00:15:23,629 --> 00:15:29,779
<font color="#E5E5E5">are the eristic stat I am doing as of</font>

321
00:15:26,149 --> 00:15:32,179
today I only try to say if the<font color="#E5E5E5"> colors</font>

322
00:15:29,779 --> 00:15:35,870
and the colleagues of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sentence that</font>

323
00:15:32,179 --> 00:15:40,459
I'm at are the same then I try<font color="#E5E5E5"> to</font>

324
00:15:35,870 --> 00:15:43,010
<font color="#E5E5E5">nearby phantoms also</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> try to what I</font>

325
00:15:40,460 --> 00:15:44,540
call a<font color="#E5E5E5"> specific</font><font color="#CCCCCC"> collie shirts for</font>

326
00:15:43,010 --> 00:15:47,330
example let's say<font color="#CCCCCC"> that we have one</font>

327
00:15:44,540 --> 00:15:50,060
<font color="#E5E5E5">phantom that yet</font><font color="#CCCCCC"> skull was one single</font>

328
00:15:47,330 --> 00:15:53,120
<font color="#E5E5E5">phantom for example a</font><font color="#CCCCCC"> Malick rapper or a</font>

329
00:15:50,060 --> 00:15:55,430
free rapper or a realloc rapper<font color="#CCCCCC"> we know</font>

330
00:15:53,120 --> 00:15:59,510
that<font color="#E5E5E5"> that</font><font color="#CCCCCC"> function is only</font><font color="#E5E5E5"> : 1 phantom</font>

331
00:15:55,430 --> 00:16:02,120
which is<font color="#CCCCCC"> malik free realloc and also</font>

332
00:15:59,510 --> 00:16:04,339
same growth constant<font color="#CCCCCC"> when a string</font>

333
00:16:02,120 --> 00:16:06,800
constant<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is not common in the</font>

334
00:16:04,339 --> 00:16:09,830
source code<font color="#E5E5E5"> and it only appears in one</font>

335
00:16:06,800 --> 00:16:13,640
or two places<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is how I'm doing it</font>

336
00:16:09,830 --> 00:16:15,339
for now<font color="#E5E5E5"> so a call graph</font><font color="#CCCCCC"> mat or matching</font>

337
00:16:13,640 --> 00:16:18,260
the colors and matching the<font color="#CCCCCC"> coli's</font>

338
00:16:15,339 --> 00:16:20,600
depending on the iteration<font color="#E5E5E5"> so as I said</font>

339
00:16:18,260 --> 00:16:22,160
starting from<font color="#E5E5E5"> one to one match</font><font color="#CCCCCC"> Dionisio</font>

340
00:16:20,600 --> 00:16:24,320
rituals<font color="#E5E5E5"> between a code base and the</font>

341
00:16:22,160 --> 00:16:26,089
<font color="#E5E5E5">binary then I build a list of colors the</font>

342
00:16:24,320 --> 00:16:28,580
call is<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> font and then</font><font color="#E5E5E5"> I try to</font>

343
00:16:26,089 --> 00:16:30,800
match each color and<font color="#E5E5E5"> colleague and then</font>

344
00:16:28,580 --> 00:16:32,960
for<font color="#E5E5E5"> good enough matches</font><font color="#CCCCCC"> I didn't have to</font>

345
00:16:30,800 --> 00:16:36,140
a temporary list<font color="#E5E5E5"> and then after</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

346
00:16:32,960 --> 00:16:38,839
colors and<font color="#CCCCCC"> Col is hair</font><font color="#E5E5E5"> protists</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> remove</font>

347
00:16:36,140 --> 00:16:41,240
<font color="#E5E5E5">the</font><font color="#CCCCCC"> bat matches des that I think our</font>

348
00:16:38,839 --> 00:16:43,040
fans positives or for which the results

349
00:16:41,240 --> 00:16:46,070
the accuracy rate<font color="#E5E5E5"> you what's</font><font color="#CCCCCC"> Tibet and</font>

350
00:16:43,040 --> 00:16:49,640
if there<font color="#E5E5E5"> are multi matches like I have</font>

351
00:16:46,070 --> 00:16:51,350
<font color="#CCCCCC">to goose fun to use candidates between</font>

352
00:16:49,640 --> 00:16:55,459
the source codes and the binary<font color="#E5E5E5"> the one</font>

353
00:16:51,350 --> 00:16:57,440
with the highest<font color="#CCCCCC"> score another</font><font color="#E5E5E5"> one</font>

354
00:16:55,459 --> 00:17:00,079
nearby<font color="#CCCCCC"> font illness I said before</font><font color="#E5E5E5"> let's</font>

355
00:16:57,440 --> 00:17:02,300
say<font color="#E5E5E5"> that we met one font in a to a fan</font>

356
00:17:00,080 --> 00:17:04,939
<font color="#E5E5E5">to be in the source code and in the</font>

357
00:17:02,300 --> 00:17:07,099
binary we know that the functions<font color="#CCCCCC"> before</font>

358
00:17:04,939 --> 00:17:09,020
and the next<font color="#CCCCCC"> phantoms</font><font color="#E5E5E5"> are most likely</font>

359
00:17:07,099 --> 00:17:12,678
going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> nearby in both the source</font>

360
00:17:09,020 --> 00:17:16,099
and the<font color="#E5E5E5"> binary this is one heuristic</font>

361
00:17:12,679 --> 00:17:19,760
<font color="#CCCCCC">that I'm applying specifically search I</font>

362
00:17:16,099 --> 00:17:22,909
already explained it same word constant

363
00:17:19,760 --> 00:17:24,829
simply<font color="#CCCCCC"> one a string constant that</font><font color="#E5E5E5"> only</font>

364
00:17:22,910 --> 00:17:27,589
appears in<font color="#E5E5E5"> one to fund something like</font>

365
00:17:24,829 --> 00:17:28,659
that usually this matches are very very

366
00:17:27,589 --> 00:17:31,220
very good

367
00:17:28,660 --> 00:17:33,170
so unless<font color="#CCCCCC"> hard so</font><font color="#E5E5E5"> far all</font><font color="#CCCCCC"> the you</font>

368
00:17:31,220 --> 00:17:36,110
<font color="#CCCCCC">distict that I'm using in the current</font>

369
00:17:33,170 --> 00:17:39,830
version<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Gaia's I will be</font><font color="#E5E5E5"> adding</font>

370
00:17:36,110 --> 00:17:42,889
more<font color="#CCCCCC"> turistic but well this</font><font color="#E5E5E5"> is these are</font>

371
00:17:39,830 --> 00:17:45,020
<font color="#E5E5E5">the very first version</font><font color="#CCCCCC"> of the tool</font>

372
00:17:42,890 --> 00:17:46,730
the<font color="#CCCCCC"> turistic fiends</font><font color="#E5E5E5"> many matches between</font>

373
00:17:45,020 --> 00:17:50,270
source codes and binaries with a greatly

374
00:17:46,730 --> 00:17:53,059
<font color="#E5E5E5">varying quality and to determine the</font>

375
00:17:50,270 --> 00:17:55,940
quality<font color="#CCCCCC"> of the matches</font><font color="#E5E5E5"> one have</font><font color="#CCCCCC"> to write</font>

376
00:17:53,059 --> 00:17:57,799
a way to<font color="#E5E5E5"> calculate and</font><font color="#CCCCCC"> accurately ratio</font>

377
00:17:55,940 --> 00:18:01,450
and this is one<font color="#CCCCCC"> of the biggest problems</font>

378
00:17:57,799 --> 00:18:06,620
<font color="#CCCCCC">that I'm facing in this program problems</font>

379
00:18:01,450 --> 00:18:08,750
so I'm the author of the afar I know I

380
00:18:06,620 --> 00:18:10,850
<font color="#E5E5E5">don't know if you know it but the</font><font color="#CCCCCC"> fr is</font>

381
00:18:08,750 --> 00:18:13,340
a tool like belief for doing program

382
00:18:10,850 --> 00:18:16,730
<font color="#CCCCCC">tiffin so I have a bit of experience in</font>

383
00:18:13,340 --> 00:18:20,480
this field and I<font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to port from the</font>

384
00:18:16,730 --> 00:18:21,919
áfourá<font color="#E5E5E5"> to</font><font color="#CCCCCC"> pig</font><font color="#E5E5E5"> I use many heuristics but</font>

385
00:18:20,480 --> 00:18:24,440
<font color="#CCCCCC">I</font><font color="#E5E5E5"> found</font><font color="#CCCCCC"> that it was</font><font color="#E5E5E5"> impossible for</font>

386
00:18:21,919 --> 00:18:26,660
example<font color="#CCCCCC"> klahn to control flow graphs</font>

387
00:18:24,440 --> 00:18:29,480
<font color="#E5E5E5">dramatically</font><font color="#CCCCCC"> change between</font><font color="#E5E5E5"> source and</font>

388
00:18:26,660 --> 00:18:32,540
binaries<font color="#E5E5E5"> you cannot compare a control</font>

389
00:18:29,480 --> 00:18:35,120
flow<font color="#E5E5E5"> graph</font><font color="#CCCCCC"> from a</font><font color="#E5E5E5"> program that a human</font>

390
00:18:32,540 --> 00:18:38,149
most likely<font color="#E5E5E5"> wrote to a control flow</font>

391
00:18:35,120 --> 00:18:41,629
graph that<font color="#E5E5E5"> is sown in either after</font><font color="#CCCCCC"> an</font>

392
00:18:38,150 --> 00:18:45,110
optimizing compiler optimizes some

393
00:18:41,630 --> 00:18:47,690
source<font color="#E5E5E5"> ast is abstract syntax</font><font color="#CCCCCC"> trees are</font>

394
00:18:45,110 --> 00:18:51,049
absolutely different<font color="#E5E5E5"> in source code</font><font color="#CCCCCC"> to</font>

395
00:18:47,690 --> 00:18:53,750
<font color="#E5E5E5">binaries absolutely different and even</font>

396
00:18:51,049 --> 00:18:56,809
<font color="#E5E5E5">more if we are</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> as a compiler to</font>

397
00:18:53,750 --> 00:18:58,780
get the<font color="#CCCCCC"> ast from that phantom because it</font>

398
00:18:56,809 --> 00:19:02,330
means<font color="#CCCCCC"> that the source data human growth</font>

399
00:18:58,780 --> 00:19:05,660
got optimized by a compiler<font color="#E5E5E5"> then the</font>

400
00:19:02,330 --> 00:19:08,889
compiler optimizes it again and then<font color="#E5E5E5"> it</font>

401
00:19:05,660 --> 00:19:11,240
generates<font color="#E5E5E5"> on AST it cannot be compared</font>

402
00:19:08,890 --> 00:19:13,760
<font color="#CCCCCC">then there</font><font color="#E5E5E5"> is another</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> which I</font>

403
00:19:11,240 --> 00:19:18,530
call blind -<font color="#E5E5E5"> in some cases - so matches</font>

404
00:19:13,760 --> 00:19:21,169
<font color="#CCCCCC">I letter the</font><font color="#E5E5E5"> reverser so how the source</font>

405
00:19:18,530 --> 00:19:25,820
code to the binary to the<font color="#CCCCCC"> de compilation</font>

406
00:19:21,169 --> 00:19:27,230
<font color="#E5E5E5">to the so the compiler defer but if you</font>

407
00:19:25,820 --> 00:19:29,149
don't have<font color="#E5E5E5"> the compiler for that</font>

408
00:19:27,230 --> 00:19:31,549
<font color="#E5E5E5">architect or let's say</font><font color="#CCCCCC"> say it's 4 or</font>

409
00:19:29,150 --> 00:19:36,830
whatever<font color="#E5E5E5"> then you cannot give to</font>

410
00:19:31,549 --> 00:19:39,320
anything and<font color="#E5E5E5"> another thing that I</font>

411
00:19:36,830 --> 00:19:41,240
<font color="#E5E5E5">realize it's</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> let's say that we want</font>

412
00:19:39,320 --> 00:19:43,820
<font color="#CCCCCC">to determine</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> much the Phantom change</font>

413
00:19:41,240 --> 00:19:45,590
<font color="#E5E5E5">between the source and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary in</font>

414
00:19:43,820 --> 00:19:50,030
most cases it is<font color="#E5E5E5"> simply impossible to</font>

415
00:19:45,590 --> 00:19:50,990
determine this is what I<font color="#E5E5E5"> realize this I</font>

416
00:19:50,030 --> 00:19:53,210
already<font color="#E5E5E5"> explained</font>

417
00:19:50,990 --> 00:19:55,190
<font color="#E5E5E5">comparing</font><font color="#CCCCCC"> contra progress between source</font>

418
00:19:53,210 --> 00:19:56,870
and binaries<font color="#E5E5E5"> they dramatically change</font>

419
00:19:55,190 --> 00:20:01,340
this is

420
00:19:56,870 --> 00:20:04,010
example that is an extreme example<font color="#E5E5E5"> there</font>

421
00:20:01,340 --> 00:20:07,820
is a back here so instead<font color="#CCCCCC"> of Colgate</font>

422
00:20:04,010 --> 00:20:10,160
<font color="#CCCCCC">UUID the programmer</font><font color="#E5E5E5"> growth</font><font color="#CCCCCC"> get GUI D</font>

423
00:20:07,820 --> 00:20:12,260
equals<font color="#E5E5E5"> zero so the compiler knows</font><font color="#CCCCCC"> that</font>

424
00:20:10,160 --> 00:20:16,040
the address of that function will<font color="#CCCCCC"> not</font><font color="#E5E5E5"> be</font>

425
00:20:12,260 --> 00:20:19,490
<font color="#E5E5E5">zero so come it or optimize away all the</font>

426
00:20:16,040 --> 00:20:21,740
<font color="#E5E5E5">scores and what we get finally with the</font>

427
00:20:19,490 --> 00:20:23,600
compiler<font color="#E5E5E5"> for example is that in we only</font>

428
00:20:21,740 --> 00:20:25,240
have<font color="#CCCCCC"> to phantom</font><font color="#E5E5E5"> calls we don't have any</font>

429
00:20:23,600 --> 00:20:30,110
conditional we don't have anything else

430
00:20:25,240 --> 00:20:33,380
<font color="#E5E5E5">this is an extreme example okay papa</font>

431
00:20:30,110 --> 00:20:35,419
comparing abstract syntax trees<font color="#E5E5E5"> well if</font>

432
00:20:33,380 --> 00:20:38,570
we<font color="#E5E5E5"> compare the abstract syntax tree of</font>

433
00:20:35,420 --> 00:20:41,030
that<font color="#E5E5E5"> phantom to that phantom we see that</font>

434
00:20:38,570 --> 00:20:44,090
we cannot compare anything<font color="#CCCCCC"> here but</font>

435
00:20:41,030 --> 00:20:51,020
there are<font color="#E5E5E5"> other examples can</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> read</font>

436
00:20:44,090 --> 00:20:54,169
them<font color="#E5E5E5"> can you say it</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example this</font>

437
00:20:51,020 --> 00:20:56,360
is<font color="#CCCCCC"> a yeah</font><font color="#E5E5E5"> this is the silver calls where</font>

438
00:20:54,170 --> 00:20:58,970
we have the call to accept open for

439
00:20:56,360 --> 00:21:02,000
<font color="#E5E5E5">raise and so another calls and then we</font>

440
00:20:58,970 --> 00:21:07,429
have the same but in the source code how

441
00:21:02,000 --> 00:21:09,710
it was rolled as you can see doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> div</font>

442
00:21:07,429 --> 00:21:12,620
<font color="#CCCCCC">had directive we see a lot of</font>

443
00:21:09,710 --> 00:21:15,100
differences<font color="#E5E5E5"> but they are in properly</font>

444
00:21:12,620 --> 00:21:17,629
<font color="#CCCCCC">Tolkien properly speaking differences</font>

445
00:21:15,100 --> 00:21:20,689
this<font color="#E5E5E5"> is another example which</font><font color="#CCCCCC"> is</font>

446
00:21:17,630 --> 00:21:24,260
actually<font color="#E5E5E5"> a goose</font><font color="#CCCCCC"> mat but you can see how</font>

447
00:21:20,690 --> 00:21:27,200
much from the binary to the original

448
00:21:24,260 --> 00:21:31,610
source<font color="#CCCCCC"> code it chains</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is yes set</font>

449
00:21:27,200 --> 00:21:34,880
<font color="#E5E5E5">lib in this case this</font><font color="#CCCCCC"> is another very</font>

450
00:21:31,610 --> 00:21:37,100
good<font color="#CCCCCC"> mat</font><font color="#E5E5E5"> we still don't have importance</font>

451
00:21:34,880 --> 00:21:39,820
<font color="#E5E5E5">any structure so we just see some</font>

452
00:21:37,100 --> 00:21:42,830
displacements<font color="#CCCCCC"> here over some variable</font>

453
00:21:39,820 --> 00:21:45,678
and here the<font color="#E5E5E5"> problem is that we cannot</font>

454
00:21:42,830 --> 00:21:49,720
match anything in<font color="#E5E5E5"> that case</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> when</font>

455
00:21:45,679 --> 00:21:52,850
that mat is actually a one-to-one match

456
00:21:49,720 --> 00:21:54,320
so blind<font color="#E5E5E5"> even as I said we don't have</font>

457
00:21:52,850 --> 00:21:57,350
had the compiler for that at the

458
00:21:54,320 --> 00:22:01,210
<font color="#CCCCCC">collector and we want to see what we</font>

459
00:21:57,350 --> 00:22:05,240
match it<font color="#E5E5E5"> or how what I do is I simply</font>

460
00:22:01,210 --> 00:22:07,340
sort<font color="#E5E5E5"> some word what things</font><font color="#CCCCCC"> I'm at it</font>

461
00:22:05,240 --> 00:22:08,990
like<font color="#CCCCCC"> okay in that's</font><font color="#E5E5E5"> one team the number</font>

462
00:22:07,340 --> 00:22:10,610
of conditionals is the<font color="#E5E5E5"> same and there</font>

463
00:22:08,990 --> 00:22:12,530
are some switches that are

464
00:22:10,610 --> 00:22:14,840
actually the<font color="#E5E5E5"> same in source codes and</font>

465
00:22:12,530 --> 00:22:19,399
the binary<font color="#CCCCCC"> and also that is one literal</font>

466
00:22:14,840 --> 00:22:23,030
<font color="#CCCCCC">constant</font><font color="#E5E5E5"> so what I do is just let the</font>

467
00:22:19,400 --> 00:22:26,480
<font color="#E5E5E5">reverse engineer display or see what</font>

468
00:22:23,030 --> 00:22:28,670
features what artifacts matches between

469
00:22:26,480 --> 00:22:31,070
the<font color="#E5E5E5"> source and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary and that's it</font>

470
00:22:28,670 --> 00:22:34,549
<font color="#E5E5E5">because honestly there is anything else</font>

471
00:22:31,070 --> 00:22:35,090
<font color="#CCCCCC">we can do this</font><font color="#E5E5E5"> is a the biggest problem</font>

472
00:22:34,549 --> 00:22:36,980
problem

473
00:22:35,090 --> 00:22:39,620
calculating similarity or<font color="#E5E5E5"> accuracy</font>

474
00:22:36,980 --> 00:22:42,410
ratios<font color="#E5E5E5"> so let's say that</font><font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> match</font>

475
00:22:39,620 --> 00:22:44,719
and<font color="#E5E5E5"> we want to determine how</font><font color="#CCCCCC"> good or bad</font>

476
00:22:42,410 --> 00:22:48,710
is that<font color="#CCCCCC"> matte because great interest ik</font>

477
00:22:44,720 --> 00:22:50,900
is pretty easy<font color="#CCCCCC"> lifting</font><font color="#E5E5E5"> the results that</font>

478
00:22:48,710 --> 00:22:54,230
you get<font color="#CCCCCC"> from so nihilistic is not that</font>

479
00:22:50,900 --> 00:22:57,940
good<font color="#CCCCCC"> no it's not</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> easy so what I</font>

480
00:22:54,230 --> 00:23:01,730
started<font color="#CCCCCC"> to</font><font color="#E5E5E5"> him was</font><font color="#CCCCCC"> to great when</font>

481
00:22:57,940 --> 00:23:05,720
<font color="#CCCCCC">compared</font><font color="#E5E5E5"> phantoms</font><font color="#CCCCCC"> Fantini Michaels</font><font color="#E5E5E5"> that</font>

482
00:23:01,730 --> 00:23:07,309
<font color="#CCCCCC">simply takes</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> in put</font><font color="#E5E5E5"> one front</font><font color="#CCCCCC"> engine</font>

483
00:23:05,720 --> 00:23:10,070
from<font color="#E5E5E5"> the source code and one front end</font>

484
00:23:07,309 --> 00:23:13,190
from<font color="#E5E5E5"> the binary then I</font><font color="#CCCCCC"> compare some</font>

485
00:23:10,070 --> 00:23:15,200
things like<font color="#CCCCCC"> okay if there are five</font><font color="#E5E5E5"> a</font>

486
00:23:13,190 --> 00:23:17,450
string<font color="#CCCCCC"> constant here and there are three</font>

487
00:23:15,200 --> 00:23:19,910
here and three matches<font color="#E5E5E5"> but the other</font><font color="#CCCCCC"> two</font>

488
00:23:17,450 --> 00:23:22,100
no<font color="#CCCCCC"> i</font><font color="#E5E5E5"> will last some points because</font><font color="#CCCCCC"> i</font>

489
00:23:19,910 --> 00:23:24,130
have three matches<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> i will</font>

490
00:23:22,100 --> 00:23:26,659
remove some points because<font color="#CCCCCC"> i have two</font>

491
00:23:24,130 --> 00:23:29,330
constants in one that doesn't<font color="#CCCCCC"> match in</font>

492
00:23:26,660 --> 00:23:32,299
the order<font color="#E5E5E5"> yeah horribly handwritten font</font>

493
00:23:29,330 --> 00:23:33,620
analysis<font color="#E5E5E5"> this is not</font><font color="#CCCCCC"> a scientific let's</font>

494
00:23:32,299 --> 00:23:35,679
do something scientific

495
00:23:33,620 --> 00:23:37,668
and then things when having<font color="#E5E5E5"> wronged her</font>

496
00:23:35,679 --> 00:23:41,210
so that's me

497
00:23:37,669 --> 00:23:43,549
I said why not<font color="#CCCCCC"> use machine learning you</font>

498
00:23:41,210 --> 00:23:46,640
know it's a black<font color="#E5E5E5"> box that we throw data</font>

499
00:23:43,549 --> 00:23:48,280
and it magically<font color="#CCCCCC"> answer right yeah that</font>

500
00:23:46,640 --> 00:23:52,240
was me the one who thought<font color="#E5E5E5"> that</font>

501
00:23:48,280 --> 00:23:56,360
obviously<font color="#E5E5E5"> it's not that</font><font color="#CCCCCC"> looked at</font><font color="#E5E5E5"> so I</font>

502
00:23:52,240 --> 00:23:58,610
<font color="#E5E5E5">started creating first data set</font><font color="#CCCCCC"> that I</font>

503
00:23:56,360 --> 00:24:03,439
thought was<font color="#CCCCCC"> cute enough</font><font color="#E5E5E5"> and then I</font>

504
00:23:58,610 --> 00:24:05,750
started<font color="#E5E5E5"> finding or training so on</font>

505
00:24:03,440 --> 00:24:09,950
<font color="#E5E5E5">machine learning algorithms some very</font>

506
00:24:05,750 --> 00:24:15,080
<font color="#E5E5E5">easy ones with that data set to see</font><font color="#CCCCCC"> if I</font>

507
00:24:09,950 --> 00:24:18,650
<font color="#CCCCCC">call get one classifier</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> was better</font>

508
00:24:15,080 --> 00:24:21,590
or<font color="#CCCCCC"> that I call the use as a replacement</font>

509
00:24:18,650 --> 00:24:24,440
<font color="#E5E5E5">for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> horrible</font><font color="#CCCCCC"> fancy</font><font color="#E5E5E5"> on I mentioned</font>

510
00:24:21,590 --> 00:24:29,360
before<font color="#E5E5E5"> so finally I realized that it</font>

511
00:24:24,440 --> 00:24:32,210
<font color="#E5E5E5">was impossible</font><font color="#CCCCCC"> to replace</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> s</font><font color="#E5E5E5"> pert</font><font color="#CCCCCC"> 16</font>

512
00:24:29,360 --> 00:24:36,469
<font color="#CCCCCC">I</font><font color="#E5E5E5"> grout and that it was always better</font>

513
00:24:32,210 --> 00:24:39,140
<font color="#E5E5E5">but in some cases I had better</font><font color="#CCCCCC"> resource</font>

514
00:24:36,470 --> 00:24:41,690
with<font color="#CCCCCC"> the massive learning</font><font color="#E5E5E5"> basis</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> and</font>

515
00:24:39,140 --> 00:24:46,940
in other<font color="#E5E5E5"> cases I have better results</font>

516
00:24:41,690 --> 00:24:51,200
with my horribly<font color="#CCCCCC"> handwritten</font><font color="#E5E5E5"> phantom so</font>

517
00:24:46,940 --> 00:24:55,130
finally what I did is I<font color="#E5E5E5"> use both because</font>

518
00:24:51,200 --> 00:24:59,060
if I remove one<font color="#E5E5E5"> I miss a lot</font><font color="#CCCCCC"> of phantoms</font>

519
00:24:55,130 --> 00:25:03,410
<font color="#E5E5E5">and I cannot only rely in one single one</font>

520
00:24:59,060 --> 00:25:06,050
<font color="#E5E5E5">so what I'm doing</font><font color="#CCCCCC"> right now is I use a</font>

521
00:25:03,410 --> 00:25:07,940
<font color="#CCCCCC">random forest classifier</font><font color="#E5E5E5"> and the</font>

522
00:25:06,050 --> 00:25:08,510
decision tree<font color="#CCCCCC"> classifier</font><font color="#E5E5E5"> and the other</font>

523
00:25:07,940 --> 00:25:11,210
two ones

524
00:25:08,510 --> 00:25:14,570
the Navy bias and the gradient boost are

525
00:25:11,210 --> 00:25:18,410
mostly for removing false positives<font color="#E5E5E5"> it</font>

526
00:25:14,570 --> 00:25:21,950
is a multi classifier and it works

527
00:25:18,410 --> 00:25:23,200
pretty<font color="#CCCCCC"> good overall I will say here you</font>

528
00:25:21,950 --> 00:25:26,240
have to<font color="#E5E5E5"> date them</font>

529
00:25:23,200 --> 00:25:28,940
it is the<font color="#E5E5E5"> total right matches from the</font>

530
00:25:26,240 --> 00:25:33,650
<font color="#E5E5E5">data set that I give for training is</font>

531
00:25:28,940 --> 00:25:37,880
like<font color="#CCCCCC"> 98%</font><font color="#E5E5E5"> usually it works pretty well</font>

532
00:25:33,650 --> 00:25:40,610
<font color="#E5E5E5">usually but as I</font><font color="#CCCCCC"> said I want assets to</font>

533
00:25:37,880 --> 00:25:42,470
replace my horribly handwritten phantom

534
00:25:40,610 --> 00:25:45,469
but guess what<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> impossible to</font>

535
00:25:42,470 --> 00:25:47,000
<font color="#E5E5E5">remove it so I had one problem</font><font color="#CCCCCC"> I use as</font>

536
00:25:45,470 --> 00:25:48,590
<font color="#E5E5E5">much eLearning to get rid of that</font>

537
00:25:47,000 --> 00:25:52,490
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> now I have two problems</font><font color="#E5E5E5"> and I</font>

538
00:25:48,590 --> 00:25:54,980
<font color="#CCCCCC">don't quite understand the other one so</font>

539
00:25:52,490 --> 00:25:59,840
these are the results<font color="#CCCCCC"> finally I</font><font color="#E5E5E5"> just</font>

540
00:25:54,980 --> 00:26:02,660
<font color="#CCCCCC">ended up adding an ml</font><font color="#E5E5E5"> column which says</font>

541
00:25:59,840 --> 00:26:06,199
if the maximal learning system<font color="#E5E5E5"> match</font>

542
00:26:02,660 --> 00:26:08,450
that function or<font color="#E5E5E5"> not usually the good</font>

543
00:26:06,200 --> 00:26:10,280
thing is<font color="#CCCCCC"> that if the ratio which is the</font>

544
00:26:08,450 --> 00:26:13,430
<font color="#E5E5E5">accuracy rate</font><font color="#CCCCCC"> that I calculate by hand</font>

545
00:26:10,280 --> 00:26:15,560
and the<font color="#CCCCCC"> ml</font><font color="#E5E5E5"> they both say that the ritual</font>

546
00:26:13,430 --> 00:26:23,720
is good<font color="#E5E5E5"> it means that the match</font><font color="#CCCCCC"> is very</font>

547
00:26:15,560 --> 00:26:26,210
very very very<font color="#CCCCCC"> good okay so new features</font>

548
00:26:23,720 --> 00:26:29,180
<font color="#CCCCCC">that I have others before coming</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> I</font>

549
00:26:26,210 --> 00:26:32,180
first talked about<font color="#E5E5E5"> this tool in another</font>

550
00:26:29,180 --> 00:26:35,720
conference in activity<font color="#CCCCCC"> in Hungary</font><font color="#E5E5E5"> last</font>

551
00:26:32,180 --> 00:26:38,360
month and in this<font color="#E5E5E5"> days I had a super for</font>

552
00:26:35,720 --> 00:26:42,710
other things<font color="#E5E5E5"> like finally we can import</font>

553
00:26:38,360 --> 00:26:46,129
<font color="#CCCCCC">TIPA devs</font><font color="#E5E5E5"> strokes unions and meridians</font><font color="#CCCCCC"> I</font>

554
00:26:42,710 --> 00:26:50,270
built fake<font color="#CCCCCC"> in Eames I will explain it</font>

555
00:26:46,130 --> 00:26:52,760
<font color="#CCCCCC">later</font><font color="#E5E5E5"> for similarly looking macros</font><font color="#CCCCCC"> we</font>

556
00:26:50,270 --> 00:26:57,860
can now also build condenses<font color="#E5E5E5"> a hitter</font>

557
00:26:52,760 --> 00:27:00,200
files<font color="#E5E5E5"> and I have others heuristic</font><font color="#CCCCCC"> bases</font>

558
00:26:57,860 --> 00:27:04,010
on different pseudocode<font color="#E5E5E5"> to source codes</font>

559
00:27:00,200 --> 00:27:05,750
<font color="#CCCCCC">is</font><font color="#E5E5E5"> prettiest lowest in the problem and I</font>

560
00:27:04,010 --> 00:27:10,490
also added in ETL support for

561
00:27:05,750 --> 00:27:12,290
objective-c<font color="#E5E5E5"> surf codes and C++ so</font>

562
00:27:10,490 --> 00:27:14,870
important definitions<font color="#E5E5E5"> when exporting</font>

563
00:27:12,290 --> 00:27:18,320
<font color="#E5E5E5">source codes biggest</font><font color="#CCCCCC"> exports</font><font color="#E5E5E5"> every</font>

564
00:27:14,870 --> 00:27:21,409
single<font color="#CCCCCC"> deal a type def stroke union or</font>

565
00:27:18,320 --> 00:27:27,590
<font color="#CCCCCC">annum that</font><font color="#E5E5E5"> it is covered in source codes</font>

566
00:27:21,410 --> 00:27:30,590
<font color="#E5E5E5">not in say st the stdio or</font><font color="#CCCCCC"> io strain it</font>

567
00:27:27,590 --> 00:27:34,280
ignores<font color="#CCCCCC"> this files and only in the code</font>

568
00:27:30,590 --> 00:27:35,810
bases<font color="#E5E5E5"> that we are pointing it to after</font>

569
00:27:34,280 --> 00:27:37,550
Matins and<font color="#CCCCCC"> functions between a binary</font>

570
00:27:35,810 --> 00:27:39,620
and source code<font color="#CCCCCC"> it is not possible to</font>

571
00:27:37,550 --> 00:27:43,340
import<font color="#E5E5E5"> both the names of the Phantoms</font>

572
00:27:39,620 --> 00:27:46,699
and all the<font color="#CCCCCC"> truth the</font><font color="#E5E5E5"> typedefs c2 etc</font>

573
00:27:43,340 --> 00:27:49,340
<font color="#E5E5E5">the results are in</font><font color="#CCCCCC"> do but this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> one</font>

574
00:27:46,700 --> 00:27:53,330
<font color="#CCCCCC">explode this</font><font color="#E5E5E5"> is one example</font><font color="#CCCCCC"> what I did</font>

575
00:27:49,340 --> 00:27:55,939
is I opened the mangosteen<font color="#E5E5E5"> kernel these</font>

576
00:27:53,330 --> 00:27:59,770
are the initial structures that you<font color="#E5E5E5"> have</font>

577
00:27:55,940 --> 00:28:04,910
when you open the<font color="#E5E5E5"> macros 10.14 kernel</font>

578
00:27:59,770 --> 00:28:07,520
and this is after dipping with big<font color="#E5E5E5"> I use</font>

579
00:28:04,910 --> 00:28:10,190
against the X and<font color="#E5E5E5"> you colonel</font><font color="#CCCCCC"> so you use</font>

580
00:28:07,520 --> 00:28:12,770
<font color="#CCCCCC">P Gaia's to export everything from the</font>

581
00:28:10,190 --> 00:28:14,720
xnu kernel and then you important you

582
00:28:12,770 --> 00:28:18,410
can import all the<font color="#CCCCCC"> neumes</font><font color="#E5E5E5"> structures</font>

583
00:28:14,720 --> 00:28:19,000
type def is<font color="#CCCCCC"> citrusy tier not bad isn't</font>

584
00:28:18,410 --> 00:28:23,570
it

585
00:28:19,000 --> 00:28:25,160
so creating<font color="#E5E5E5"> contents of headers also we</font>

586
00:28:23,570 --> 00:28:28,550
can build

587
00:28:25,160 --> 00:28:32,330
condenses headers<font color="#E5E5E5"> like let's say</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> from</font>

588
00:28:28,550 --> 00:28:35,240
all this directory with a lot of<font color="#CCCCCC"> C files</font>

589
00:28:32,330 --> 00:28:38,149
and header files<font color="#E5E5E5"> stuff I want to have</font>

590
00:28:35,240 --> 00:28:41,020
one single header file<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I can import</font>

591
00:28:38,150 --> 00:28:45,010
in either<font color="#E5E5E5"> so I can use this numerator</font>

592
00:28:41,020 --> 00:28:49,129
instructor stuff CTR CTR<font color="#E5E5E5"> in my target</font>

593
00:28:45,010 --> 00:28:51,470
<font color="#CCCCCC">this is one example using the create a</font>

594
00:28:49,130 --> 00:28:55,610
and conduct set headers<font color="#E5E5E5"> from</font>

595
00:28:51,470 --> 00:28:59,870
the<font color="#CCCCCC"> iokit directory in the xnu kernel I</font>

596
00:28:55,610 --> 00:29:06,428
will show you I<font color="#E5E5E5"> think it is</font><font color="#CCCCCC"> that No</font><font color="#E5E5E5"> so</font>

597
00:28:59,870 --> 00:29:06,428
maybe<font color="#E5E5E5"> this yeah this is one I will</font><font color="#CCCCCC"> do it</font>

598
00:29:07,990 --> 00:29:11,529
[Music]

599
00:29:12,009 --> 00:29:26,990
<font color="#E5E5E5">okay ah it is already open sorry okay so</font>

600
00:29:22,509 --> 00:29:29,269
after<font color="#E5E5E5"> I pointed to the ioki directory</font>

601
00:29:26,990 --> 00:29:32,240
and I told<font color="#E5E5E5"> his to export it generates a</font>

602
00:29:29,269 --> 00:29:35,120
<font color="#CCCCCC">condensed it</font><font color="#E5E5E5"> hider</font><font color="#CCCCCC"> with all the</font><font color="#E5E5E5"> things</font>

603
00:29:32,240 --> 00:29:38,299
that<font color="#E5E5E5"> they found in the source code</font><font color="#CCCCCC"> now</font>

604
00:29:35,120 --> 00:29:40,699
we can<font color="#E5E5E5"> just import this one this header</font>

605
00:29:38,299 --> 00:29:43,158
file into either<font color="#E5E5E5"> and we have all these</font>

606
00:29:40,700 --> 00:29:46,070
prototypes available so we<font color="#E5E5E5"> can actually</font>

607
00:29:43,159 --> 00:29:49,539
research for target and<font color="#E5E5E5"> not do anything</font>

608
00:29:46,070 --> 00:29:49,539
related<font color="#CCCCCC"> to the i/o kit</font>

609
00:29:49,870 --> 00:29:57,979
continuing this is how it looks on our

610
00:29:53,809 --> 00:30:02,360
property Mo's so first the one I was

611
00:29:57,980 --> 00:30:04,820
talking<font color="#E5E5E5"> about the I okay I will remove</font>

612
00:30:02,360 --> 00:30:05,740
the<font color="#E5E5E5"> preview resource before anything</font>

613
00:30:04,820 --> 00:30:18,200
<font color="#CCCCCC">else</font>

614
00:30:05,740 --> 00:30:20,230
okay<font color="#CCCCCC"> okay just a</font><font color="#E5E5E5"> seconds</font><font color="#CCCCCC"> and I will</font><font color="#E5E5E5"> show</font>

615
00:30:18,200 --> 00:30:20,230
you

616
00:30:22,120 --> 00:30:28,070
yep

617
00:30:23,950 --> 00:30:31,160
okay so for<font color="#CCCCCC"> the sport in sense there is</font>

618
00:30:28,070 --> 00:30:34,490
a<font color="#E5E5E5"> common line to that I wrote</font><font color="#CCCCCC"> a SRC bean</font>

619
00:30:31,160 --> 00:30:37,460
<font color="#CCCCCC">dip source</font><font color="#E5E5E5"> binary to binary different</font>

620
00:30:34,490 --> 00:30:40,190
first we will tell it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a parade</font>

621
00:30:37,460 --> 00:30:41,570
<font color="#E5E5E5">file and I'm also using the</font><font color="#CCCCCC"> minnows</font>

622
00:30:40,190 --> 00:30:43,490
<font color="#CCCCCC">minnows analyze minnows hitters because</font>

623
00:30:41,570 --> 00:30:46,639
<font color="#E5E5E5">otherwise by defaulting it ignores</font>

624
00:30:43,490 --> 00:30:53,420
header files and only scans<font color="#E5E5E5"> C or C++</font>

625
00:30:46,640 --> 00:31:01,640
<font color="#CCCCCC">hitter's files I mean project create</font><font color="#E5E5E5"> and</font>

626
00:30:53,420 --> 00:31:05,450
<font color="#E5E5E5">then just export it it will show</font><font color="#CCCCCC"> a lot</font>

627
00:31:01,640 --> 00:31:07,309
<font color="#CCCCCC">of</font><font color="#E5E5E5"> errors like a lot but we</font><font color="#CCCCCC"> don't really</font>

628
00:31:05,450 --> 00:31:10,280
<font color="#E5E5E5">care</font><font color="#CCCCCC"> about the errors because actually I</font>

629
00:31:07,309 --> 00:31:12,620
<font color="#E5E5E5">wrote this tool so</font><font color="#CCCCCC"> we can use this tool</font>

630
00:31:10,280 --> 00:31:16,129
to<font color="#E5E5E5"> import</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> seven from sources</font><font color="#CCCCCC"> that</font>

631
00:31:12,620 --> 00:31:19,189
we cannot compile and then<font color="#E5E5E5"> it will</font>

632
00:31:16,130 --> 00:31:21,170
<font color="#E5E5E5">generate the condensate header the ioki</font>

633
00:31:19,190 --> 00:31:26,110
<font color="#E5E5E5">the sport</font><font color="#CCCCCC"> rotates which is the one</font><font color="#E5E5E5"> that</font>

634
00:31:21,170 --> 00:31:26,110
<font color="#E5E5E5">I already shown you before one more demo</font>

635
00:31:26,530 --> 00:31:34,799
[Music]

636
00:31:34,900 --> 00:31:44,360
so be pretty far<font color="#CCCCCC"> okay so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

637
00:31:41,690 --> 00:31:47,780
satin lip source code<font color="#E5E5E5"> what I will do is</font>

638
00:31:44,360 --> 00:31:50,928
just parse it generate<font color="#E5E5E5"> 1sq late</font><font color="#CCCCCC"> SQLite</font>

639
00:31:47,780 --> 00:31:54,220
database and then import or math symbols

640
00:31:50,929 --> 00:31:56,380
between<font color="#CCCCCC"> dozen binary Whittle symbols</font>

641
00:31:54,220 --> 00:32:01,700
[Music]

642
00:31:56,380 --> 00:32:06,380
<font color="#CCCCCC">first</font><font color="#E5E5E5"> we create a project</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> then we</font>

643
00:32:01,700 --> 00:32:10,160
export create whatever create then

644
00:32:06,380 --> 00:32:13,160
export by default it uses matter<font color="#E5E5E5"> threads</font>

645
00:32:10,160 --> 00:32:17,390
or as possible depending<font color="#E5E5E5"> on the number</font>

646
00:32:13,160 --> 00:32:20,690
<font color="#CCCCCC">of CPUs that we have and finally its</font>

647
00:32:17,390 --> 00:32:22,460
finances as I said we<font color="#E5E5E5"> will</font><font color="#CCCCCC"> have a lot of</font>

648
00:32:20,690 --> 00:32:24,980
<font color="#CCCCCC">errors or warnings but we don't care</font>

649
00:32:22,460 --> 00:32:27,770
<font color="#CCCCCC">about that</font><font color="#E5E5E5"> it builds the</font><font color="#CCCCCC"> definitions</font>

650
00:32:24,980 --> 00:32:30,200
<font color="#E5E5E5">finds</font><font color="#CCCCCC"> the go grab stuff stuff and</font>

651
00:32:27,770 --> 00:32:33,170
finally generates the header files the

652
00:32:30,200 --> 00:32:36,350
condenses header file and<font color="#E5E5E5"> an SQL SQLite</font>

653
00:32:33,170 --> 00:32:37,760
database now we will go<font color="#E5E5E5"> to either if I</font>

654
00:32:36,350 --> 00:32:42,830
have it<font color="#CCCCCC"> open and somewhere</font>

655
00:32:37,760 --> 00:32:49,410
[Music]

656
00:32:42,830 --> 00:32:54,360
and we will<font color="#E5E5E5"> open that</font><font color="#CCCCCC"> one okay this is a</font>

657
00:32:49,410 --> 00:32:54,930
mini gzip binary<font color="#E5E5E5"> we don't have a</font><font color="#CCCCCC"> font in</font>

658
00:32:54,360 --> 00:33:02,040
names

659
00:32:54,930 --> 00:33:04,770
<font color="#CCCCCC">Nader we do have restrictors we have</font>

660
00:33:02,040 --> 00:33:08,190
some but they are not the one from<font color="#CCCCCC"> set</font>

661
00:33:04,770 --> 00:33:18,900
lip<font color="#E5E5E5"> this is all our sins and now we will</font>

662
00:33:08,190 --> 00:33:22,320
<font color="#CCCCCC">just dip them this is the main dialogue</font>

663
00:33:18,900 --> 00:33:25,170
of the IDA<font color="#CCCCCC"> plugin we can we select the</font>

664
00:33:22,320 --> 00:33:28,620
SQLite<font color="#CCCCCC"> database that we want</font><font color="#E5E5E5"> to match</font>

665
00:33:25,170 --> 00:33:32,300
against the indent command is when you

666
00:33:28,620 --> 00:33:35,699
want<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> sullied</font><font color="#E5E5E5"> if there are many</font>

667
00:33:32,300 --> 00:33:37,980
programming<font color="#E5E5E5"> styles</font><font color="#CCCCCC"> colon</font><font color="#E5E5E5"> styles so I use</font>

668
00:33:35,700 --> 00:33:40,980
the indent command<font color="#CCCCCC"> so when you diff from</font>

669
00:33:37,980 --> 00:33:44,430
<font color="#E5E5E5">source</font><font color="#CCCCCC"> code to the</font><font color="#E5E5E5"> sale the</font><font color="#CCCCCC"> cause</font><font color="#E5E5E5"> they</font>

670
00:33:40,980 --> 00:33:46,110
use the same<font color="#E5E5E5"> programming style and then</font>

671
00:33:44,430 --> 00:33:48,570
the calculations and the display ratio

672
00:33:46,110 --> 00:33:50,909
calculator<font color="#E5E5E5"> right here are the calculate</font>

673
00:33:48,570 --> 00:33:52,250
the mean amount right<font color="#E5E5E5"> here that an</font>

674
00:33:50,910 --> 00:33:56,670
algorithm

675
00:33:52,250 --> 00:33:58,470
<font color="#CCCCCC">to consider that up kinds of good</font><font color="#E5E5E5"> match</font>

676
00:33:56,670 --> 00:34:03,660
and then we have the display<font color="#CCCCCC"> right here</font>

677
00:33:58,470 --> 00:34:08,070
to discard false positives<font color="#CCCCCC"> like</font><font color="#E5E5E5"> if the</font>

678
00:34:03,660 --> 00:34:10,649
results have less than 0.5 of<font color="#CCCCCC"> ratio we</font>

679
00:34:08,070 --> 00:34:13,140
<font color="#E5E5E5">consider then false positives if we left</font>

680
00:34:10,649 --> 00:34:14,719
everything<font color="#E5E5E5"> if we leave everything to</font>

681
00:34:13,139 --> 00:34:17,129
<font color="#E5E5E5">zero it automatically generates</font>

682
00:34:14,719 --> 00:34:22,969
<font color="#E5E5E5">calculates the proper or the most</font>

683
00:34:17,130 --> 00:34:26,730
<font color="#E5E5E5">correct values now it is first exporting</font>

684
00:34:22,969 --> 00:34:29,250
it<font color="#E5E5E5"> already did all the results from the</font>

685
00:34:26,730 --> 00:34:32,909
<font color="#CCCCCC">dis finally</font><font color="#E5E5E5"> and then it starts</font><font color="#CCCCCC"> finding</font>

686
00:34:29,250 --> 00:34:35,040
matches<font color="#CCCCCC"> and her is it so much</font><font color="#E5E5E5"> as that is</font>

687
00:34:32,909 --> 00:34:36,840
found between the<font color="#E5E5E5"> binary and</font><font color="#CCCCCC"> the source</font>

688
00:34:35,040 --> 00:34:40,649
code like the<font color="#CCCCCC"> front ends inflate back</font>

689
00:34:36,840 --> 00:34:47,100
inflate fast<font color="#CCCCCC"> yet cried is</font><font color="#E5E5E5"> at red if we</font>

690
00:34:40,649 --> 00:34:49,469
want we can see some well as<font color="#E5E5E5"> I said</font>

691
00:34:47,100 --> 00:34:51,569
<font color="#E5E5E5">comparing it is basically comparing</font>

692
00:34:49,469 --> 00:34:55,139
Orleans to<font color="#CCCCCC"> april's I mean we</font>

693
00:34:51,570 --> 00:34:58,140
<font color="#CCCCCC">a</font><font color="#E5E5E5"> circus</font><font color="#CCCCCC"> one-two-one mats</font><font color="#E5E5E5"> well there is</font>

694
00:34:55,139 --> 00:35:01,200
very little I can do here and then the

695
00:34:58,140 --> 00:35:02,940
other<font color="#E5E5E5"> thing I will cheat a bit because I</font>

696
00:35:01,200 --> 00:35:05,640
know which ones are<font color="#E5E5E5"> the best</font>

697
00:35:02,940 --> 00:35:07,290
<font color="#E5E5E5">I will</font><font color="#CCCCCC"> select some phantoms that</font><font color="#E5E5E5"> I know</font>

698
00:35:05,640 --> 00:35:10,200
for a<font color="#CCCCCC"> fact that they are very very very</font>

699
00:35:07,290 --> 00:35:16,470
very<font color="#CCCCCC"> good</font><font color="#E5E5E5"> like everything that is</font><font color="#CCCCCC"> high</font>

700
00:35:10,200 --> 00:35:19,230
her<font color="#E5E5E5"> higher than 0.5 or that the</font><font color="#CCCCCC"> ML the</font>

701
00:35:16,470 --> 00:35:22,259
machine learning<font color="#CCCCCC"> or</font><font color="#E5E5E5"> the horribly hundred</font>

702
00:35:19,230 --> 00:35:25,650
and phantom says<font color="#E5E5E5"> one zero is a proper</font>

703
00:35:22,260 --> 00:35:28,800
good one<font color="#CCCCCC"> so then I</font><font color="#E5E5E5"> will select import</font>

704
00:35:25,650 --> 00:35:30,390
selected phantoms<font color="#CCCCCC"> yes I want and also</font><font color="#E5E5E5"> it</font>

705
00:35:28,800 --> 00:35:34,380
asks me<font color="#E5E5E5"> if</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> import the</font>

706
00:35:30,390 --> 00:35:36,690
<font color="#CCCCCC">definitions</font><font color="#E5E5E5"> I will tell</font><font color="#CCCCCC"> to and then we</font>

707
00:35:34,380 --> 00:35:41,460
will have the<font color="#CCCCCC"> phantom names</font><font color="#E5E5E5"> over here</font>

708
00:35:36,690 --> 00:35:48,110
<font color="#E5E5E5">and then we also</font><font color="#CCCCCC"> have all the</font><font color="#E5E5E5"> local</font>

709
00:35:41,460 --> 00:35:48,110
types from satellite<font color="#E5E5E5"> and that's it</font>

710
00:35:48,170 --> 00:35:53,010
[Music]

711
00:35:49,420 --> 00:35:53,010
[Applause]

712
00:35:53,269 --> 00:36:00,660
thank you so the<font color="#E5E5E5"> future</font><font color="#CCCCCC"> the current</font>

713
00:35:58,499 --> 00:36:03,269
status of<font color="#E5E5E5"> this project is</font><font color="#CCCCCC"> production</font>

714
00:36:00,660 --> 00:36:08,308
<font color="#CCCCCC">already I actually inducing</font><font color="#E5E5E5"> I'm actually</font>

715
00:36:03,269 --> 00:36:11,939
using<font color="#E5E5E5"> it for my tasks but I didn't want</font>

716
00:36:08,309 --> 00:36:14,819
to<font color="#CCCCCC"> solve a lot</font><font color="#E5E5E5"> of results</font><font color="#CCCCCC"> flag heads of</font>

717
00:36:11,940 --> 00:36:18,150
<font color="#E5E5E5">false positives</font><font color="#CCCCCC"> so it says very few</font>

718
00:36:14,819 --> 00:36:21,380
<font color="#E5E5E5">results but I try as hard as possible to</font>

719
00:36:18,150 --> 00:36:25,380
not have false<font color="#CCCCCC"> positives the next steps</font>

720
00:36:21,380 --> 00:36:27,239
are<font color="#E5E5E5"> better super for important</font>

721
00:36:25,380 --> 00:36:30,509
structures and enumerations because

722
00:36:27,239 --> 00:36:33,150
sometimes like nested<font color="#E5E5E5"> strokes nested</font>

723
00:36:30,509 --> 00:36:35,969
enumerations and<font color="#CCCCCC"> patty in between</font>

724
00:36:33,150 --> 00:36:38,039
different<font color="#E5E5E5"> architectures causes a lot</font><font color="#CCCCCC"> of</font>

725
00:36:35,969 --> 00:36:40,769
problem you can import an instructor

726
00:36:38,039 --> 00:36:43,650
with yes<font color="#E5E5E5"> to say to members</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are</font>

727
00:36:40,769 --> 00:36:45,808
twins<font color="#CCCCCC"> but in the database there is</font><font color="#E5E5E5"> a lot</font>

728
00:36:43,650 --> 00:36:50,369
<font color="#E5E5E5">of planning</font><font color="#CCCCCC"> and may be that the students</font>

729
00:36:45,809 --> 00:36:55,049
get converted<font color="#E5E5E5"> to double words</font><font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> to</font>

730
00:36:50,369 --> 00:36:57,959
<font color="#CCCCCC">cross words</font><font color="#E5E5E5"> better support for Objective</font>

731
00:36:55,049 --> 00:37:00,690
C and<font color="#E5E5E5"> C++ support for example the</font>

732
00:36:57,959 --> 00:37:04,440
support for templates in C++ is horrible

733
00:37:00,690 --> 00:37:07,109
but I don't know what to do for now then

734
00:37:04,440 --> 00:37:09,390
I want<font color="#E5E5E5"> to integrate it back with the</font>

735
00:37:07,109 --> 00:37:12,029
áfourá<font color="#E5E5E5"> because actually it is yes one</font>

736
00:37:09,390 --> 00:37:14,788
part of the a forum and then exporting

737
00:37:12,029 --> 00:37:17,099
to I want to export<font color="#E5E5E5"> to SQLite databases</font>

738
00:37:14,789 --> 00:37:18,749
many<font color="#CCCCCC"> open source</font><font color="#E5E5E5"> source codes so you</font>

739
00:37:17,099 --> 00:37:21,119
<font color="#E5E5E5">don't have to do it by hand</font><font color="#CCCCCC"> you just</font>

740
00:37:18,749 --> 00:37:25,348
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to download</font><font color="#CCCCCC"> then from some</font><font color="#E5E5E5"> website</font>

741
00:37:21,119 --> 00:37:28,430
<font color="#E5E5E5">from github or whatever and just</font><font color="#CCCCCC"> import</font>

742
00:37:25,349 --> 00:37:34,039
them with the<font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> plug-in and that's it</font>

743
00:37:28,430 --> 00:37:34,038
and that's<font color="#E5E5E5"> all thanks</font>

744
00:37:39,180 --> 00:38:14,709
[Music]

