1
00:00:01,140 --> 00:00:06,090
[Music]

2
00:00:08,119 --> 00:00:15,450
hi everyone

3
00:00:10,530 --> 00:00:21,090
<font color="#E5E5E5">M H</font><font color="#CCCCCC"> dima</font><font color="#E5E5E5"> from the front essence young</font>

4
00:00:15,450 --> 00:00:24,750
<font color="#E5E5E5">lad and from China</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> thank you for your</font>

5
00:00:21,090 --> 00:00:28,680
listening to the to this talk<font color="#CCCCCC"> in this</font>

6
00:00:24,750 --> 00:00:32,369
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> I gonna talk about the how</font><font color="#E5E5E5"> I doing</font>

7
00:00:28,680 --> 00:00:36,420
the massive square<font color="#E5E5E5"> USB Trevor fuzzing</font>

8
00:00:32,369 --> 00:00:45,500
and and how I achieved the<font color="#E5E5E5"> this fuzzing</font>

9
00:00:36,420 --> 00:00:45,500
without any hardware<font color="#E5E5E5"> so here's the oops</font>

10
00:00:46,700 --> 00:00:50,910
yeah

11
00:00:48,000 --> 00:00:55,980
here is the just<font color="#E5E5E5"> a brief introduction of</font>

12
00:00:50,910 --> 00:00:59,429
my experience and<font color="#E5E5E5"> I'm the security</font>

13
00:00:55,980 --> 00:01:03,029
researcher from<font color="#CCCCCC"> tension</font><font color="#E5E5E5"> lab and used to</font>

14
00:00:59,430 --> 00:01:07,920
doing chemistry<font color="#CCCCCC"> but now</font><font color="#E5E5E5"> just trying to</font>

15
00:01:03,030 --> 00:01:10,409
do some coding and hacking<font color="#E5E5E5"> and most of</font>

16
00:01:07,920 --> 00:01:13,680
<font color="#E5E5E5">my</font><font color="#CCCCCC"> work is focused on the hardware</font>

17
00:01:10,409 --> 00:01:19,259
hacking and like the firmware reverse

18
00:01:13,680 --> 00:01:22,500
engineering and the software<font color="#E5E5E5"> hacking and</font>

19
00:01:19,259 --> 00:01:26,369
the council hacking<font color="#E5E5E5"> and I also do some</font>

20
00:01:22,500 --> 00:01:30,570
<font color="#CCCCCC">geek stuff</font><font color="#E5E5E5"> like the RFID and the lock</font>

21
00:01:26,369 --> 00:01:35,280
<font color="#E5E5E5">picking and something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so let's</font>

22
00:01:30,570 --> 00:01:39,689
<font color="#E5E5E5">go to the agenda I devised this talk</font>

23
00:01:35,280 --> 00:01:43,020
<font color="#CCCCCC">into thank you I</font><font color="#E5E5E5"> divide this talking to</font>

24
00:01:39,689 --> 00:01:46,398
fight us for parts and in in the<font color="#E5E5E5"> first</font>

25
00:01:43,020 --> 00:01:49,229
<font color="#CCCCCC">part I was</font><font color="#E5E5E5"> gonna talk</font><font color="#CCCCCC"> about some basic</font>

26
00:01:46,399 --> 00:01:53,360
<font color="#E5E5E5">gifts in some brief introduction of the</font>

27
00:01:49,229 --> 00:01:56,670
USB<font color="#E5E5E5"> protocol and and the drivers</font>

28
00:01:53,360 --> 00:02:01,350
<font color="#CCCCCC">Traverse basics and then I can talk</font>

29
00:01:56,670 --> 00:02:04,920
<font color="#E5E5E5">about how I created the the hardware and</font>

30
00:02:01,350 --> 00:02:08,128
the to trigger the USB<font color="#E5E5E5"> driver loading</font>

31
00:02:04,920 --> 00:02:11,250
<font color="#E5E5E5">and to make it work and then I gonna</font>

32
00:02:08,128 --> 00:02:12,399
talk<font color="#E5E5E5"> about the how I implements the the</font>

33
00:02:11,250 --> 00:02:17,049
fuzzing and

34
00:02:12,400 --> 00:02:26,400
and some results results<font color="#E5E5E5"> show and some</font>

35
00:02:17,049 --> 00:02:26,400
demos just didn't work

36
00:02:26,670 --> 00:02:29,670
oops

37
00:02:30,390 --> 00:02:39,730
okay so<font color="#CCCCCC"> Oh yep this</font><font color="#E5E5E5"> one okay thank you</font>

38
00:02:37,870 --> 00:02:43,329
so the first<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to talk about</font>

39
00:02:39,730 --> 00:02:48,700
the USB<font color="#CCCCCC"> and drivers and</font><font color="#E5E5E5"> as you know I</font>

40
00:02:43,329 --> 00:02:52,810
won't you I<font color="#E5E5E5"> think you you guys quite</font>

41
00:02:48,700 --> 00:02:57,548
familiar<font color="#E5E5E5"> with the with the USB USB and</font>

42
00:02:52,810 --> 00:03:00,450
is very often<font color="#CCCCCC"> used in the normal</font><font color="#E5E5E5"> life</font><font color="#CCCCCC"> so</font>

43
00:02:57,549 --> 00:03:04,019
I<font color="#CCCCCC"> won't dig into too much into the</font>

44
00:03:00,450 --> 00:03:07,988
details of USB<font color="#E5E5E5"> technology has just</font>

45
00:03:04,019 --> 00:03:13,840
<font color="#CCCCCC">summarized some</font><font color="#E5E5E5"> features of the USB bus</font>

46
00:03:07,989 --> 00:03:17,199
and this<font color="#E5E5E5"> is mostly we often use</font><font color="#CCCCCC"> usb</font><font color="#E5E5E5"> to</font>

47
00:03:13,840 --> 00:03:20,530
<font color="#CCCCCC">do some data transfer and</font><font color="#E5E5E5"> also is</font>

48
00:03:17,199 --> 00:03:25,209
include a lot of a device classes like

49
00:03:20,530 --> 00:03:29,470
the HD HDI<font color="#E5E5E5"> USB device and or the camera</font>

50
00:03:25,209 --> 00:03:32,440
and some and<font color="#CCCCCC"> printers so and in</font><font color="#E5E5E5"> the</font>

51
00:03:29,470 --> 00:03:35,859
<font color="#E5E5E5">latest version of the USB protocols is</font>

52
00:03:32,440 --> 00:03:39,069
also<font color="#CCCCCC"> supports the quick charge and you</font>

53
00:03:35,859 --> 00:03:45,159
can just charge your phone or your

54
00:03:39,069 --> 00:03:48,698
<font color="#E5E5E5">laptop with a very</font><font color="#CCCCCC"> quiet very quick very</font>

55
00:03:45,159 --> 00:03:55,690
<font color="#E5E5E5">quickly and you can you can just use a</font>

56
00:03:48,699 --> 00:03:58,989
<font color="#E5E5E5">to just you to do it and the one of the</font>

57
00:03:55,690 --> 00:04:02,530
character rest of the USB<font color="#E5E5E5"> I have to</font>

58
00:03:58,989 --> 00:04:06,280
<font color="#CCCCCC">emphasize this is determined by two IDs</font>

59
00:04:02,530 --> 00:04:09,699
<font color="#E5E5E5">and</font><font color="#CCCCCC"> one IDs v ID and the recoil</font><font color="#E5E5E5"> is</font>

60
00:04:06,280 --> 00:04:13,569
wonder ID<font color="#E5E5E5"> and the other is PID is for a</font>

61
00:04:09,699 --> 00:04:17,829
<font color="#CCCCCC">variety and the the v ID is assigned a</font>

62
00:04:13,569 --> 00:04:22,060
bio<font color="#E5E5E5"> by the USB forum and the PID was</font>

63
00:04:17,829 --> 00:04:23,000
just the<font color="#E5E5E5"> the designed by</font><font color="#CCCCCC"> a each wonders</font>

64
00:04:22,060 --> 00:04:28,130
and

65
00:04:23,000 --> 00:04:30,800
the only on the<font color="#E5E5E5"> right column you</font><font color="#CCCCCC"> can you</font>

66
00:04:28,130 --> 00:04:35,210
can<font color="#CCCCCC"> just see some</font><font color="#E5E5E5"> summarized summarize</font>

67
00:04:30,800 --> 00:04:40,010
the previous research<font color="#CCCCCC"> around the</font><font color="#E5E5E5"> usb on</font>

68
00:04:35,210 --> 00:04:43,580
<font color="#E5E5E5">the</font><font color="#CCCCCC"> USB</font><font color="#E5E5E5"> and the first the first is the</font>

69
00:04:40,010 --> 00:04:46,700
first<font color="#E5E5E5"> project I have to mention is the V</font>

70
00:04:43,580 --> 00:04:50,930
visual USB fuzzing framework and this

71
00:04:46,700 --> 00:04:55,430
was announced<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the I think</font><font color="#CCCCCC"> is 2015</font><font color="#E5E5E5"> the</font>

72
00:04:50,930 --> 00:04:58,430
<font color="#CCCCCC">blackhat USA and the the</font><font color="#E5E5E5"> author's trying</font>

73
00:04:55,430 --> 00:05:02,060
<font color="#E5E5E5">to do the ritual I used to visualize the</font>

74
00:04:58,430 --> 00:05:06,680
<font color="#E5E5E5">the USB device</font><font color="#CCCCCC"> and to do some muscle</font>

75
00:05:02,060 --> 00:05:11,030
fuzzing on Linux like operating system

76
00:05:06,680 --> 00:05:16,490
and this this research<font color="#CCCCCC"> just spare me to</font>

77
00:05:11,030 --> 00:05:20,330
<font color="#E5E5E5">to to do this read today's research</font><font color="#CCCCCC"> and</font>

78
00:05:16,490 --> 00:05:23,240
the second is<font color="#CCCCCC"> most</font><font color="#E5E5E5"> famous use USB</font>

79
00:05:20,330 --> 00:05:28,070
research is about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bad patty recipe</font>

80
00:05:23,240 --> 00:05:31,220
and you can<font color="#E5E5E5"> just use the device to</font>

81
00:05:28,070 --> 00:05:35,150
<font color="#E5E5E5">simulate as a keyboard or a mouse to</font>

82
00:05:31,220 --> 00:05:39,830
just do some<font color="#CCCCCC"> malice work on the victim</font>

83
00:05:35,150 --> 00:05:42,560
PC and and also some guys you<font color="#E5E5E5"> also do</font>

84
00:05:39,830 --> 00:05:45,200
<font color="#E5E5E5">some a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> research around the</font>

85
00:05:42,560 --> 00:05:48,860
USB protocol fuzzing<font color="#E5E5E5"> and they use</font><font color="#CCCCCC"> faced</font>

86
00:05:45,200 --> 00:05:51,710
<font color="#E5E5E5">answer to do the main the middle USB</font>

87
00:05:48,860 --> 00:05:55,520
protocol fuzzing and<font color="#CCCCCC"> to disk up some to</font>

88
00:05:51,710 --> 00:05:58,370
<font color="#E5E5E5">discovered some vulnerabilities but it's</font>

89
00:05:55,520 --> 00:06:01,700
not in large<font color="#E5E5E5"> scale because they have to</font>

90
00:05:58,370 --> 00:06:05,080
<font color="#E5E5E5">use two-faced answers to do</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> fuzzy</font>

91
00:06:01,700 --> 00:06:10,310
and is really<font color="#E5E5E5"> time consuming because the</font>

92
00:06:05,080 --> 00:06:14,330
the<font color="#E5E5E5"> the microcontroller on the fist</font>

93
00:06:10,310 --> 00:06:17,600
answer is not really<font color="#E5E5E5"> high and also the</font>

94
00:06:14,330 --> 00:06:21,020
most ephemeris famous<font color="#E5E5E5"> yes we just</font><font color="#CCCCCC"> be</font>

95
00:06:17,600 --> 00:06:25,790
bugs on on the console hacking is the

96
00:06:21,020 --> 00:06:31,060
PSP PSP PSP<font color="#E5E5E5"> are three USB jailbreak and</font>

97
00:06:25,790 --> 00:06:34,580
there is about<font color="#E5E5E5"> when they process the USB</font>

98
00:06:31,060 --> 00:06:36,670
descriptors<font color="#E5E5E5"> and then they use these bugs</font>

99
00:06:34,580 --> 00:06:40,240
to achieve the

100
00:06:36,670 --> 00:06:43,600
curry execution in in the ps3 and<font color="#CCCCCC"> the</font>

101
00:06:40,240 --> 00:06:46,210
most latest<font color="#E5E5E5"> the</font><font color="#CCCCCC"> latest news the on</font><font color="#E5E5E5"> the</font>

102
00:06:43,600 --> 00:06:52,780
USB research is the Nintendo<font color="#CCCCCC"> switch</font>

103
00:06:46,210 --> 00:06:56,169
<font color="#CCCCCC">jailbreaker and</font><font color="#E5E5E5"> they is</font><font color="#CCCCCC"> USB stack when</font>

104
00:06:52,780 --> 00:06:59,799
they process some<font color="#E5E5E5"> commands and they use</font>

105
00:06:56,170 --> 00:07:04,060
it<font color="#E5E5E5"> cause the buffer</font><font color="#CCCCCC"> overflow</font><font color="#E5E5E5"> and they</font>

106
00:06:59,800 --> 00:07:06,370
can just gain the very<font color="#E5E5E5"> low-level code</font>

107
00:07:04,060 --> 00:07:09,910
execution<font color="#E5E5E5"> and to just bypass any</font>

108
00:07:06,370 --> 00:07:17,200
security features inside the the console

109
00:07:09,910 --> 00:07:20,590
<font color="#E5E5E5">so and then we go to to see some basic</font>

110
00:07:17,200 --> 00:07:23,050
of the windows drivers and the first key

111
00:07:20,590 --> 00:07:26,320
<font color="#CCCCCC">word I have mentioned is the</font><font color="#E5E5E5"> framework</font>

112
00:07:23,050 --> 00:07:28,660
and as you know if you have the

113
00:07:26,320 --> 00:07:30,849
<font color="#CCCCCC">experience on the right developing the</font>

114
00:07:28,660 --> 00:07:33,940
windows drivers<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> might you match</font>

115
00:07:30,850 --> 00:07:38,380
familiar with this worse and the in the

116
00:07:33,940 --> 00:07:42,630
very real agency age<font color="#E5E5E5"> and</font><font color="#CCCCCC"> windows you see</font>

117
00:07:38,380 --> 00:07:47,350
<font color="#CCCCCC">of EXT drivers on the windows 98</font><font color="#E5E5E5"> and</font>

118
00:07:42,630 --> 00:07:52,240
then they they<font color="#E5E5E5"> involve into the</font><font color="#CCCCCC"> windows</font>

119
00:07:47,350 --> 00:07:55,960
driver model and is<font color="#CCCCCC"> WDM from work and</font>

120
00:07:52,240 --> 00:07:58,750
now<font color="#E5E5E5"> now in</font><font color="#CCCCCC"> win windows</font><font color="#E5E5E5"> 7 and they use</font>

121
00:07:55,960 --> 00:08:02,200
the windows<font color="#E5E5E5"> WTF and the windows driver</font>

122
00:07:58,750 --> 00:08:05,920
from work<font color="#CCCCCC"> the</font><font color="#E5E5E5"> framework and</font><font color="#CCCCCC"> to develop</font>

123
00:08:02,200 --> 00:08:08,880
the<font color="#E5E5E5"> the drivers and the windows drivers</font>

124
00:08:05,920 --> 00:08:14,710
had a lot of<font color="#E5E5E5"> types and the likely</font>

125
00:08:08,880 --> 00:08:17,440
<font color="#CCCCCC">audio/video</font><font color="#E5E5E5"> drained streams and some net</font>

126
00:08:14,710 --> 00:08:20,530
<font color="#CCCCCC">medica NetCast drivers</font><font color="#E5E5E5"> and the some</font>

127
00:08:17,440 --> 00:08:24,280
<font color="#E5E5E5">theaters and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> some ports there's a</font>

128
00:08:20,530 --> 00:08:26,890
lot of types and they also and the

129
00:08:24,280 --> 00:08:30,000
second the third the<font color="#E5E5E5"> third key</font><font color="#CCCCCC"> worry</font>

130
00:08:26,890 --> 00:08:34,900
about the windows drivers is they have

131
00:08:30,000 --> 00:08:38,039
developed by both windows<font color="#CCCCCC"> Oh both</font>

132
00:08:34,900 --> 00:08:41,470
Microsoft and third-party developers and

133
00:08:38,039 --> 00:08:45,400
then you had<font color="#E5E5E5"> there are a lot of bugs in</font>

134
00:08:41,470 --> 00:08:48,160
different drivers and if you work with

135
00:08:45,400 --> 00:08:50,939
<font color="#E5E5E5">the upon turn on computation you may</font>

136
00:08:48,160 --> 00:08:54,579
quite familiar with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> we</font>

137
00:08:50,940 --> 00:08:57,610
32k drivers and<font color="#E5E5E5"> the there's a lot of</font>

138
00:08:54,579 --> 00:09:03,250
bugs and to escape<font color="#CCCCCC"> the sandbox of the</font>

139
00:08:57,610 --> 00:09:06,250
the<font color="#E5E5E5"> browsers and and</font><font color="#CCCCCC"> it a lot</font><font color="#E5E5E5"> of</font>

140
00:09:03,250 --> 00:09:12,459
<font color="#E5E5E5">security researcher</font><font color="#CCCCCC"> focus on the</font>

141
00:09:06,250 --> 00:09:15,939
antivirus drivers to gain much much more

142
00:09:12,459 --> 00:09:19,508
<font color="#E5E5E5">privilege on the windows and also if you</font>

143
00:09:15,939 --> 00:09:23,889
<font color="#CCCCCC">are beginner of the trying to discover</font>

144
00:09:19,509 --> 00:09:26,439
the the<font color="#E5E5E5"> chera bugs and you</font><font color="#CCCCCC"> may first</font>

145
00:09:23,889 --> 00:09:29,470
have<font color="#CCCCCC"> focus</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> fussing</font>

146
00:09:26,439 --> 00:09:32,889
and so there's a lot<font color="#CCCCCC"> of bugs in the</font>

147
00:09:29,470 --> 00:09:37,180
<font color="#E5E5E5">windows</font><font color="#CCCCCC"> rubber</font><font color="#E5E5E5"> so here we come</font><font color="#CCCCCC"> the ideas</font>

148
00:09:32,889 --> 00:09:41,980
of<font color="#E5E5E5"> our research so</font><font color="#CCCCCC"> imagine if</font><font color="#E5E5E5"> we inject</font>

149
00:09:37,180 --> 00:09:44,079
<font color="#CCCCCC">a</font><font color="#E5E5E5"> plug a USB device into your host a PC</font>

150
00:09:41,980 --> 00:09:47,860
<font color="#CCCCCC">whatever will be happen and the first</font>

151
00:09:44,079 --> 00:09:51,519
<font color="#E5E5E5">level is the the USB</font><font color="#CCCCCC"> hosted controller</font>

152
00:09:47,860 --> 00:09:53,730
drivers and the USB<font color="#CCCCCC"> hub</font><font color="#E5E5E5"> Trevor will - it</font>

153
00:09:51,519 --> 00:09:57,399
will start a process<font color="#E5E5E5"> called the</font>

154
00:09:53,730 --> 00:09:59,380
<font color="#E5E5E5">enumeration and the enumeration is means</font>

155
00:09:57,399 --> 00:10:02,560
they trying<font color="#E5E5E5"> to collect</font><font color="#CCCCCC"> some basic</font>

156
00:09:59,380 --> 00:10:05,769
<font color="#E5E5E5">information from the USB</font><font color="#CCCCCC"> device</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

157
00:10:02,560 --> 00:10:10,420
<font color="#CCCCCC">- to determine and the to configure rate</font>

158
00:10:05,769 --> 00:10:13,389
to make it work and after<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> this</font>

159
00:10:10,420 --> 00:10:15,430
drivers will trying to load some<font color="#E5E5E5"> class</font>

160
00:10:13,389 --> 00:10:18,339
drivers depending on the information

161
00:10:15,430 --> 00:10:22,719
<font color="#E5E5E5">they they</font><font color="#CCCCCC"> collected before</font><font color="#E5E5E5"> and if the</font>

162
00:10:18,339 --> 00:10:25,449
USB device<font color="#E5E5E5"> is a massive storage like the</font>

163
00:10:22,720 --> 00:10:28,800
flash flash drive is where it will

164
00:10:25,449 --> 00:10:33,089
trying to load the USB store system

165
00:10:28,800 --> 00:10:36,459
drivers and then<font color="#E5E5E5"> and to some further</font>

166
00:10:33,089 --> 00:10:39,970
initialization<font color="#E5E5E5"> and after that the system</font>

167
00:10:36,459 --> 00:10:44,920
<font color="#E5E5E5">cannot use some</font><font color="#CCCCCC"> devices specific driver</font>

168
00:10:39,970 --> 00:10:49,569
<font color="#CCCCCC">travers so and the let it run so if we</font>

169
00:10:44,920 --> 00:10:54,339
just simplify<font color="#CCCCCC"> this per class you will</font>

170
00:10:49,569 --> 00:10:57,699
see this progress<font color="#E5E5E5"> is we plug one device</font>

171
00:10:54,339 --> 00:11:00,939
and gain the code execution<font color="#E5E5E5"> in the</font>

172
00:10:57,699 --> 00:11:03,709
<font color="#E5E5E5">kernel mode so if we can find some bugs</font>

173
00:11:00,939 --> 00:11:06,469
<font color="#E5E5E5">during this</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> will</font>

174
00:11:03,710 --> 00:11:08,149
we give us to control this code

175
00:11:06,470 --> 00:11:13,910
execution in<font color="#CCCCCC"> the kernel mode</font><font color="#E5E5E5"> and again</font>

176
00:11:08,149 --> 00:11:19,730
<font color="#E5E5E5">the the kernel privilege so here's the</font>

177
00:11:13,910 --> 00:11:24,500
attack attack scenario so on the left

178
00:11:19,730 --> 00:11:27,050
<font color="#E5E5E5">side is the your computer and on</font><font color="#CCCCCC"> the red</font>

179
00:11:24,500 --> 00:11:31,130
side is the server<font color="#E5E5E5"> so when you're trying</font>

180
00:11:27,050 --> 00:11:34,699
<font color="#CCCCCC">to collect</font><font color="#E5E5E5"> plaque</font><font color="#CCCCCC"> you're the USB device</font>

181
00:11:31,130 --> 00:11:37,939
<font color="#E5E5E5">into the host PC is trying to</font>

182
00:11:34,700 --> 00:11:40,550
communicate<font color="#E5E5E5"> with the remote server to to</font>

183
00:11:37,940 --> 00:11:44,690
search the<font color="#E5E5E5"> the drivers for</font><font color="#CCCCCC"> the for this</font>

184
00:11:40,550 --> 00:11:49,250
device<font color="#E5E5E5"> once the drivers found was found</font>

185
00:11:44,690 --> 00:11:52,610
in the<font color="#E5E5E5"> remote server is try is is well</font>

186
00:11:49,250 --> 00:11:55,940
<font color="#CCCCCC">deliver the Traverse insert into</font><font color="#E5E5E5"> the PC</font>

187
00:11:52,610 --> 00:11:59,540
and after PC<font color="#E5E5E5"> got</font><font color="#CCCCCC"> this drivers is will</font>

188
00:11:55,940 --> 00:12:02,529
trying to unpack the the Java file the

189
00:11:59,540 --> 00:12:05,180
the<font color="#CCCCCC"> CAD file and then verify</font><font color="#E5E5E5"> the</font>

190
00:12:02,529 --> 00:12:08,420
signature of the each<font color="#E5E5E5"> panel race and</font>

191
00:12:05,180 --> 00:12:11,420
then install the drivers<font color="#E5E5E5"> into the driver</font>

192
00:12:08,420 --> 00:12:14,180
<font color="#E5E5E5">store and then loaded the driver in the</font>

193
00:12:11,420 --> 00:12:17,029
into the kernel<font color="#CCCCCC"> mode and call the entry</font>

194
00:12:14,180 --> 00:12:21,380
point of the<font color="#E5E5E5"> driver and then initial</font>

195
00:12:17,029 --> 00:12:26,270
<font color="#E5E5E5">some IRP message in inside the kernel</font>

196
00:12:21,380 --> 00:12:31,160
<font color="#CCCCCC">mode</font><font color="#E5E5E5"> and call the the corresponding ARP</font>

197
00:12:26,270 --> 00:12:35,930
handler to to<font color="#E5E5E5"> process it so</font><font color="#CCCCCC"> as you can</font>

198
00:12:31,160 --> 00:12:38,839
<font color="#E5E5E5">see we plug a USB device which figure</font>

199
00:12:35,930 --> 00:12:41,089
the two kind of code execution<font color="#CCCCCC"> the first</font>

200
00:12:38,839 --> 00:12:43,670
is the the entry point the code

201
00:12:41,089 --> 00:12:45,170
execution<font color="#E5E5E5"> and the other is corresponding</font>

202
00:12:43,670 --> 00:12:50,719
RP processor

203
00:12:45,170 --> 00:12:54,620
yes handle<font color="#E5E5E5"> discussion so what we can do</font>

204
00:12:50,720 --> 00:12:58,670
<font color="#CCCCCC">T's</font><font color="#E5E5E5"> to trying to find the</font><font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> of these</font>

205
00:12:54,620 --> 00:13:02,420
<font color="#E5E5E5">two process and here is this goal and</font>

206
00:12:58,670 --> 00:13:05,689
we're trying to<font color="#E5E5E5"> find the bugs that</font><font color="#CCCCCC"> was</font>

207
00:13:02,420 --> 00:13:10,189
<font color="#E5E5E5">automatically installed with your during</font>

208
00:13:05,690 --> 00:13:14,630
you install plug in your USB<font color="#E5E5E5"> and then we</font>

209
00:13:10,190 --> 00:13:17,450
trying to<font color="#E5E5E5"> exploit every every code</font>

210
00:13:14,630 --> 00:13:20,710
exclusion process and to see if

211
00:13:17,450 --> 00:13:23,480
during the code execution and

212
00:13:20,710 --> 00:13:28,960
additionally we're trying to find the

213
00:13:23,480 --> 00:13:32,390
error control code<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> and we will</font>

214
00:13:28,960 --> 00:13:35,930
<font color="#E5E5E5">initializing error control code error</font>

215
00:13:32,390 --> 00:13:40,189
control code code<font color="#CCCCCC"> fuzzing during when</font>

216
00:13:35,930 --> 00:13:43,849
the<font color="#E5E5E5"> server is successful loaded and and</font>

217
00:13:40,190 --> 00:13:47,360
the second goal we want<font color="#E5E5E5"> to just achieve</font>

218
00:13:43,850 --> 00:13:51,680
this<font color="#E5E5E5"> tag is plucked upon is means we</font>

219
00:13:47,360 --> 00:13:55,610
trying<font color="#CCCCCC"> to plug a craft</font><font color="#E5E5E5"> USB device and</font>

220
00:13:51,680 --> 00:13:59,870
then gained code execution<font color="#E5E5E5"> and then to</font>

221
00:13:55,610 --> 00:14:03,110
whatever<font color="#E5E5E5"> we want</font><font color="#CCCCCC"> and later we I</font><font color="#E5E5E5"> just</font>

222
00:13:59,870 --> 00:14:07,760
give a demo of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> plug to pawn attack</font>

223
00:14:03,110 --> 00:14:12,050
and so the first<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> question came</font>

224
00:14:07,760 --> 00:14:15,530
<font color="#E5E5E5">up to us is where the</font><font color="#CCCCCC"> earth who is to</font>

225
00:14:12,050 --> 00:14:18,170
get the target<font color="#E5E5E5"> and and we're and</font><font color="#CCCCCC"> how to</font>

226
00:14:15,530 --> 00:14:22,240
get<font color="#CCCCCC"> a target</font><font color="#E5E5E5"> and let's recall</font><font color="#CCCCCC"> the</font>

227
00:14:18,170 --> 00:14:27,020
process<font color="#E5E5E5"> and how Windows to grab the the</font>

228
00:14:22,240 --> 00:14:29,630
<font color="#CCCCCC">corresponding USB drivers and</font><font color="#E5E5E5"> absolutely</font>

229
00:14:27,020 --> 00:14:33,500
<font color="#CCCCCC">the driver is throw</font><font color="#E5E5E5"> down the windows</font>

230
00:14:29,630 --> 00:14:36,560
update drivers and servers and<font color="#E5E5E5"> they when</font>

231
00:14:33,500 --> 00:14:41,030
<font color="#CCCCCC">you're new your USB was plugged into the</font>

232
00:14:36,560 --> 00:14:43,250
PC and trying to search the trying to

233
00:14:41,030 --> 00:14:46,490
submit<font color="#E5E5E5"> the information</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the server</font>

234
00:14:43,250 --> 00:14:49,790
<font color="#E5E5E5">and the server will return back a result</font>

235
00:14:46,490 --> 00:14:53,000
whether they have the driver or not<font color="#CCCCCC"> and</font>

236
00:14:49,790 --> 00:14:55,550
the the information<font color="#CCCCCC"> they</font><font color="#E5E5E5"> submits to</font><font color="#CCCCCC"> the</font>

237
00:14:53,000 --> 00:14:58,220
server is<font color="#CCCCCC"> the variety and PID we</font>

238
00:14:55,550 --> 00:15:02,240
mentioned before<font color="#CCCCCC"> and the protocol is</font>

239
00:14:58,220 --> 00:15:06,710
also<font color="#E5E5E5"> documented and so we the best</font>

240
00:15:02,240 --> 00:15:10,880
choice was is to create it fake client

241
00:15:06,710 --> 00:15:13,910
with some<font color="#E5E5E5"> Python and just a little</font><font color="#CCCCCC"> bit</font>

242
00:15:10,880 --> 00:15:17,140
<font color="#E5E5E5">and a little bit reverse engineering so</font>

243
00:15:13,910 --> 00:15:19,610
we<font color="#CCCCCC"> can you numerate the each</font><font color="#E5E5E5"> command a</font>

244
00:15:17,140 --> 00:15:24,980
combination of the v ID and the parity

245
00:15:19,610 --> 00:15:29,610
so here comes the result<font color="#CCCCCC"> and we do quite</font>

246
00:15:24,980 --> 00:15:32,340
a lot<font color="#E5E5E5"> of work on this for platform of</font>

247
00:15:29,610 --> 00:15:35,700
windows and<font color="#E5E5E5"> the get all the results and</font>

248
00:15:32,340 --> 00:15:38,220
<font color="#E5E5E5">is totally about four thousand four</font>

249
00:15:35,700 --> 00:15:44,010
thousand drivers we have<font color="#CCCCCC"> to analyze in</font>

250
00:15:38,220 --> 00:15:47,220
the<font color="#CCCCCC"> fads</font><font color="#E5E5E5"> so but let's before</font><font color="#CCCCCC"> we go ahead</font>

251
00:15:44,010 --> 00:15:50,250
we have<font color="#E5E5E5"> to just start a bit and to do</font>

252
00:15:47,220 --> 00:15:53,250
some calculation on the<font color="#CCCCCC"> combination of</font>

253
00:15:50,250 --> 00:15:56,160
<font color="#E5E5E5">the VAD and PSD if you do some math on</font>

254
00:15:53,250 --> 00:15:58,020
it<font color="#E5E5E5"> you will find the the combination</font>

255
00:15:56,160 --> 00:16:03,420
numbers is<font color="#CCCCCC"> really huge</font>

256
00:15:58,020 --> 00:16:06,390
we<font color="#CCCCCC"> cannot to finish such enumeration on</font>

257
00:16:03,420 --> 00:16:10,050
<font color="#E5E5E5">these combination in a reasonable time</font>

258
00:16:06,390 --> 00:16:14,939
<font color="#E5E5E5">so the solution is we found a link and</font>

259
00:16:10,050 --> 00:16:19,229
the link is provided by Microsoft and we

260
00:16:14,940 --> 00:16:26,370
have to we can<font color="#CCCCCC"> use these</font><font color="#E5E5E5"> things first we</font>

261
00:16:19,230 --> 00:16:28,740
<font color="#CCCCCC">search about</font><font color="#E5E5E5"> the V ID and we can just we</font>

262
00:16:26,370 --> 00:16:33,330
can<font color="#E5E5E5"> get to make the this number of very</font>

263
00:16:28,740 --> 00:16:38,400
<font color="#E5E5E5">very small and then we got a we we got</font>

264
00:16:33,330 --> 00:16:41,970
about one just one percent of the V IDs

265
00:16:38,400 --> 00:16:45,930
and then we use the V ID and do the

266
00:16:41,970 --> 00:16:49,980
combination<font color="#E5E5E5"> to each</font><font color="#CCCCCC"> PIDs and then we got</font>

267
00:16:45,930 --> 00:16:52,319
the all the results so after we we<font color="#E5E5E5"> get a</font>

268
00:16:49,980 --> 00:16:56,670
<font color="#E5E5E5">target and we have to find a way to</font>

269
00:16:52,320 --> 00:16:59,580
trigger the USB<font color="#CCCCCC"> Driver loading</font><font color="#E5E5E5"> so in</font>

270
00:16:56,670 --> 00:17:05,339
this progress<font color="#CCCCCC"> the essential elements is</font>

271
00:16:59,580 --> 00:17:10,589
<font color="#E5E5E5">to create the hardware so if we recall</font>

272
00:17:05,339 --> 00:17:14,669
<font color="#CCCCCC">the what's consist</font><font color="#E5E5E5"> of the USB USB device</font>

273
00:17:10,589 --> 00:17:17,329
we found is<font color="#E5E5E5"> is consistent of three parts</font>

274
00:17:14,670 --> 00:17:22,970
and<font color="#CCCCCC"> the first part is a USB socket as</font>

275
00:17:17,329 --> 00:17:26,490
obviously and and the second part is<font color="#CCCCCC"> the</font>

276
00:17:22,970 --> 00:17:30,420
microcontroller<font color="#E5E5E5"> inside the device and</font>

277
00:17:26,490 --> 00:17:33,060
then is and<font color="#CCCCCC"> wizard is a corresponding</font>

278
00:17:30,420 --> 00:17:35,070
the firmware<font color="#E5E5E5"> and all the information the</font>

279
00:17:33,060 --> 00:17:37,260
function was embedded<font color="#E5E5E5"> into the firmware</font>

280
00:17:35,070 --> 00:17:41,179
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the running</font><font color="#E5E5E5"> by the microcontroller</font>

281
00:17:37,260 --> 00:17:43,879
<font color="#E5E5E5">and the when</font><font color="#CCCCCC"> the device when the</font>

282
00:17:41,180 --> 00:17:46,640
<font color="#E5E5E5">your USB host</font><font color="#CCCCCC"> they tried trying to</font>

283
00:17:43,880 --> 00:17:49,460
<font color="#E5E5E5">gather some</font><font color="#CCCCCC"> information of the USB</font>

284
00:17:46,640 --> 00:17:51,770
<font color="#CCCCCC">device the</font><font color="#E5E5E5"> microcontroller just do some</font>

285
00:17:49,460 --> 00:17:58,070
calculation and the send that data back

286
00:17:51,770 --> 00:18:03,590
<font color="#E5E5E5">so but we cannot prepare for a prepare</font>

287
00:17:58,070 --> 00:18:07,639
the every USB device for each USB

288
00:18:03,590 --> 00:18:10,030
drivers<font color="#E5E5E5"> is impossible and costly so we</font>

289
00:18:07,640 --> 00:18:16,850
have to some find a way to make it<font color="#CCCCCC"> and</font>

290
00:18:10,030 --> 00:18:20,540
we do the emulation so so let's<font color="#E5E5E5"> see how</font>

291
00:18:16,850 --> 00:18:24,469
we emulate the USB socket<font color="#E5E5E5"> and here is</font>

292
00:18:20,540 --> 00:18:28,370
the protocol<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> call is is USB</font>

293
00:18:24,470 --> 00:18:30,670
<font color="#E5E5E5">redirection protocol and the the is</font>

294
00:18:28,370 --> 00:18:34,010
trying to<font color="#E5E5E5"> this protocol is trying to</font>

295
00:18:30,670 --> 00:18:37,310
redirect the physical USB device into

296
00:18:34,010 --> 00:18:40,310
the from<font color="#E5E5E5"> virtual machine and</font><font color="#CCCCCC"> the one is</font>

297
00:18:37,310 --> 00:18:45,190
enabled and<font color="#CCCCCC"> you can just redirect the</font>

298
00:18:40,310 --> 00:18:50,419
the the visual visual USB socket into a

299
00:18:45,190 --> 00:18:53,900
into a<font color="#E5E5E5"> Linux socket a UNIX socket so</font>

300
00:18:50,420 --> 00:18:58,790
when<font color="#CCCCCC"> you</font><font color="#E5E5E5"> trying to connect the UNIX</font>

301
00:18:53,900 --> 00:19:02,480
socket<font color="#E5E5E5"> you can just act as the</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> plug</font>

302
00:18:58,790 --> 00:19:04,820
or USB device into the<font color="#E5E5E5"> u.s.</font><font color="#CCCCCC"> Casto</font>

303
00:19:02,480 --> 00:19:09,440
machine<font color="#E5E5E5"> so that's the way we we do in</font>

304
00:19:04,820 --> 00:19:12,649
these emulation so let's see how we

305
00:19:09,440 --> 00:19:18,230
emulate the<font color="#E5E5E5"> and</font><font color="#CCCCCC"> micro controller and</font><font color="#E5E5E5"> the</font>

306
00:19:12,650 --> 00:19:22,400
firmware<font color="#E5E5E5"> so as I mentioned the video USB</font>

307
00:19:18,230 --> 00:19:24,980
fuzzing from work is the the the<font color="#CCCCCC"> project</font>

308
00:19:22,400 --> 00:19:28,880
<font color="#CCCCCC">that inspired me to doing this work</font>

309
00:19:24,980 --> 00:19:33,860
so some of the the code I just<font color="#E5E5E5"> copied</font>

310
00:19:28,880 --> 00:19:38,330
<font color="#E5E5E5">from that that's that</font><font color="#CCCCCC"> work and we had</font>

311
00:19:33,860 --> 00:19:44,000
<font color="#CCCCCC">some actual code to complete complete</font>

312
00:19:38,330 --> 00:19:48,649
these<font color="#E5E5E5"> these simulation and</font><font color="#CCCCCC"> to just to</font>

313
00:19:44,000 --> 00:19:52,490
make<font color="#CCCCCC"> it work</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> better and to apply it</font>

314
00:19:48,650 --> 00:19:54,320
and in in in<font color="#E5E5E5"> our case we have to switch</font>

315
00:19:52,490 --> 00:19:56,779
the

316
00:19:54,320 --> 00:20:01,490
nation of<font color="#CCCCCC"> Eid</font><font color="#E5E5E5"> and the parodies</font><font color="#CCCCCC"> in each</font>

317
00:19:56,779 --> 00:20:04,880
<font color="#CCCCCC">buzzing so we just apply the run the run</font>

318
00:20:01,490 --> 00:20:08,419
this code in<font color="#CCCCCC"> separates thread and then</font>

319
00:20:04,880 --> 00:20:12,529
apply the new PID and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> PIDs</font><font color="#E5E5E5"> so here</font>

320
00:20:08,419 --> 00:20:16,070
<font color="#E5E5E5">is a result we</font><font color="#CCCCCC"> emulate</font><font color="#E5E5E5"> the USB device</font>

321
00:20:12,529 --> 00:20:20,690
and we<font color="#E5E5E5"> test it and it works for about</font>

322
00:20:16,070 --> 00:20:23,178
<font color="#CCCCCC">ninety</font><font color="#E5E5E5"> ninety drivers so this gives us a</font>

323
00:20:20,690 --> 00:20:27,190
reasonable<font color="#E5E5E5"> result to continue our</font>

324
00:20:23,179 --> 00:20:31,220
research<font color="#E5E5E5"> so let's do in some fuzzing</font><font color="#CCCCCC"> and</font>

325
00:20:27,190 --> 00:20:35,360
here is<font color="#E5E5E5"> just a schematic of the fuzzing</font>

326
00:20:31,220 --> 00:20:40,029
system I designed and on the above<font color="#E5E5E5"> you</font>

327
00:20:35,360 --> 00:20:44,658
can see<font color="#E5E5E5"> is VM</font><font color="#CCCCCC"> Poe that's the place we</font>

328
00:20:40,029 --> 00:20:50,269
replace and store the store the each

329
00:20:44,659 --> 00:20:53,389
<font color="#E5E5E5">virtual machine of two of the USB</font>

330
00:20:50,269 --> 00:20:56,269
drivers<font color="#E5E5E5"> and in the</font><font color="#CCCCCC"> center in the center</font>

331
00:20:53,389 --> 00:21:01,428
<font color="#E5E5E5">we can see it's just a main control unit</font>

332
00:20:56,269 --> 00:21:06,460
and we have in this unit we have<font color="#CCCCCC"> the VM</font>

333
00:21:01,429 --> 00:21:10,549
manager<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have these every sentence</font>

334
00:21:06,460 --> 00:21:16,340
<font color="#E5E5E5">monitors and we also have the visual</font>

335
00:21:10,549 --> 00:21:19,100
device monitor<font color="#E5E5E5"> managers and so and at</font>

336
00:21:16,340 --> 00:21:24,049
the bottom<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see there are driver</font>

337
00:21:19,100 --> 00:21:27,769
pools<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> store our driver target we</font>

338
00:21:24,049 --> 00:21:31,879
<font color="#CCCCCC">want to fighting and the and the on</font><font color="#E5E5E5"> the</font>

339
00:21:27,769 --> 00:21:35,299
<font color="#CCCCCC">red</font><font color="#E5E5E5"> side is</font><font color="#CCCCCC"> the just straw storage to</font>

340
00:21:31,879 --> 00:21:40,610
store the first result and we<font color="#E5E5E5"> can use it</font>

341
00:21:35,299 --> 00:21:43,820
for<font color="#CCCCCC"> later analysis and so let's go dip</font>

342
00:21:40,610 --> 00:21:48,049
into this system so let's talk about the

343
00:21:43,820 --> 00:21:53,509
VM management and I divide<font color="#E5E5E5"> I</font><font color="#CCCCCC"> divides the</font>

344
00:21:48,049 --> 00:21:55,970
the<font color="#E5E5E5"> life circle of of went into three</font>

345
00:21:53,509 --> 00:22:03,019
stage and the<font color="#CCCCCC"> first stage is we trying</font>

346
00:21:55,970 --> 00:22:07,400
to to evolve the the the<font color="#CCCCCC"> visual machine</font>

347
00:22:03,019 --> 00:22:11,700
into from the<font color="#E5E5E5"> initial state</font><font color="#CCCCCC"> to the</font>

348
00:22:07,400 --> 00:22:14,580
environment<font color="#E5E5E5"> prepared and then install</font>

349
00:22:11,700 --> 00:22:19,770
the<font color="#E5E5E5"> targets driver in it and after</font><font color="#CCCCCC"> that</font>

350
00:22:14,580 --> 00:22:22,679
we take a snapshot<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> visual machine</font>

351
00:22:19,770 --> 00:22:26,610
<font color="#E5E5E5">to accelerate to</font><font color="#CCCCCC"> the phasing progress in</font>

352
00:22:22,680 --> 00:22:30,810
the later<font color="#CCCCCC"> and so after after</font><font color="#E5E5E5"> that we</font>

353
00:22:26,610 --> 00:22:34,379
just<font color="#E5E5E5"> initial the to wake up</font><font color="#CCCCCC"> the with the</font>

354
00:22:30,810 --> 00:22:37,350
<font color="#CCCCCC">Machine and the plug our visual visual</font>

355
00:22:34,380 --> 00:22:40,860
USB device and then waiting for the

356
00:22:37,350 --> 00:22:43,500
<font color="#CCCCCC">virtual USB</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> reach of waiting</font><font color="#E5E5E5"> for the</font>

357
00:22:40,860 --> 00:22:46,889
target the driver be<font color="#CCCCCC"> install the purple</font>

358
00:22:43,500 --> 00:22:49,430
<font color="#E5E5E5">probably and the running after that we</font>

359
00:22:46,890 --> 00:22:52,830
do in the passing<font color="#E5E5E5"> and monitor each the</font>

360
00:22:49,430 --> 00:22:58,130
device the standards of the virtual

361
00:22:52,830 --> 00:23:03,090
machine and<font color="#E5E5E5"> then we collect</font><font color="#CCCCCC"> a the</font><font color="#E5E5E5"> result</font>

362
00:22:58,130 --> 00:23:06,450
so in this first stage we prepare the

363
00:23:03,090 --> 00:23:09,330
the environment for the<font color="#E5E5E5"> fuzzing and we</font>

364
00:23:06,450 --> 00:23:13,800
also pre install each the target driver

365
00:23:09,330 --> 00:23:17,760
into the<font color="#E5E5E5"> virtual machine and so in this</font>

366
00:23:13,800 --> 00:23:20,310
stage we<font color="#CCCCCC"> have to - task - to make to</font>

367
00:23:17,760 --> 00:23:23,490
achieve<font color="#E5E5E5"> and the first is</font><font color="#CCCCCC"> skew the</font>

368
00:23:20,310 --> 00:23:25,740
program<font color="#E5E5E5"> inside the VM and the second is</font>

369
00:23:23,490 --> 00:23:28,470
collect as much as possible<font color="#E5E5E5"> information</font>

370
00:23:25,740 --> 00:23:32,220
<font color="#CCCCCC">for the target driver - for the further</font>

371
00:23:28,470 --> 00:23:36,330
analysis<font color="#E5E5E5"> so how to execute the program</font>

372
00:23:32,220 --> 00:23:38,760
inside the<font color="#CCCCCC"> pen and we use the qga</font><font color="#E5E5E5"> is</font>

373
00:23:36,330 --> 00:23:42,240
<font color="#E5E5E5">kill me against the agent and it's just</font>

374
00:23:38,760 --> 00:23:44,520
much much like the<font color="#CCCCCC"> women women tools but</font>

375
00:23:42,240 --> 00:23:48,270
<font color="#CCCCCC">you can customize it you can add your</font>

376
00:23:44,520 --> 00:23:51,030
own feature<font color="#E5E5E5"> and into it and so and also</font>

377
00:23:48,270 --> 00:23:53,940
<font color="#CCCCCC">you suppose some regular socket and</font><font color="#E5E5E5"> you</font>

378
00:23:51,030 --> 00:23:57,629
<font color="#CCCCCC">can connect it in the host host machine</font>

379
00:23:53,940 --> 00:24:01,410
<font color="#CCCCCC">so in this do by using this feature</font><font color="#E5E5E5"> we</font>

380
00:23:57,630 --> 00:24:04,700
can<font color="#E5E5E5"> achieve the read read</font><font color="#CCCCCC"> and write file</font>

381
00:24:01,410 --> 00:24:08,730
files<font color="#E5E5E5"> excuse programs and and so</font><font color="#CCCCCC"> on and</font>

382
00:24:04,700 --> 00:24:11,700
after<font color="#CCCCCC"> that we have to do some pre pre</font>

383
00:24:08,730 --> 00:24:16,200
install the<font color="#CCCCCC"> driver installed</font><font color="#E5E5E5"> pre</font><font color="#CCCCCC"> install</font>

384
00:24:11,700 --> 00:24:19,470
<font color="#E5E5E5">the driver into the</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> because if you</font>

385
00:24:16,200 --> 00:24:20,970
<font color="#CCCCCC">trying to</font><font color="#E5E5E5"> plug your USB device into your</font>

386
00:24:19,470 --> 00:24:24,179
<font color="#CCCCCC">host</font>

387
00:24:20,970 --> 00:24:27,120
<font color="#CCCCCC">you take quite a long time and</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> click</font>

388
00:24:24,179 --> 00:24:29,940
<font color="#E5E5E5">the</font><font color="#CCCCCC"> drivers back from from the remote</font>

389
00:24:27,120 --> 00:24:34,500
server<font color="#CCCCCC"> so that's time consuming we</font>

390
00:24:29,940 --> 00:24:37,230
cannot if you if we just using this

391
00:24:34,500 --> 00:24:40,679
<font color="#E5E5E5">progress and we we cannot control the</font>

392
00:24:37,230 --> 00:24:44,010
<font color="#E5E5E5">extra time to achieve this</font><font color="#CCCCCC"> buzzing</font><font color="#E5E5E5"> so</font>

393
00:24:40,679 --> 00:24:46,679
the the best<font color="#E5E5E5"> solution is to priest or</font>

394
00:24:44,010 --> 00:24:49,919
the<font color="#CCCCCC"> discoverers into the operating</font>

395
00:24:46,679 --> 00:24:56,280
<font color="#CCCCCC">system and then we can just speed up</font>

396
00:24:49,919 --> 00:24:59,250
this<font color="#E5E5E5"> progress so in this per when we</font>

397
00:24:56,280 --> 00:25:01,530
trying to<font color="#E5E5E5"> install the drivers and we</font>

398
00:24:59,250 --> 00:25:06,169
just collect some information<font color="#CCCCCC"> of it and</font>

399
00:25:01,530 --> 00:25:11,428
about how<font color="#E5E5E5"> many life files was in it and</font>

400
00:25:06,169 --> 00:25:15,270
<font color="#E5E5E5">how and dynamically passing the</font><font color="#CCCCCC"> ni file</font>

401
00:25:11,429 --> 00:25:18,840
to detect the behavior when they<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font>

402
00:25:15,270 --> 00:25:21,929
do the installation and then<font color="#CCCCCC"> collecti</font>

403
00:25:18,840 --> 00:25:25,980
the drivers they are actually doing<font color="#E5E5E5"> with</font>

404
00:25:21,929 --> 00:25:32,179
during the installation<font color="#E5E5E5"> so and here is</font>

405
00:25:25,980 --> 00:25:32,179
just workflow and how<font color="#E5E5E5"> this installation</font>

406
00:25:33,020 --> 00:25:39,629
<font color="#E5E5E5">analysis system work so up to in the in</font>

407
00:25:37,770 --> 00:25:43,080
the second stage<font color="#CCCCCC"> we're trying</font><font color="#E5E5E5"> to restore</font>

408
00:25:39,630 --> 00:25:47,460
the<font color="#CCCCCC"> vm from the snack shop and and the</font>

409
00:25:43,080 --> 00:25:50,100
gets the USB<font color="#E5E5E5"> a visual USB plugged in and</font>

410
00:25:47,460 --> 00:25:52,260
then make sure the target<font color="#CCCCCC"> reveries</font><font color="#E5E5E5"> is</font>

411
00:25:50,100 --> 00:25:54,860
running in this stage<font color="#CCCCCC"> we have the two</font>

412
00:25:52,260 --> 00:25:58,350
tasks<font color="#E5E5E5"> and the first</font><font color="#CCCCCC"> tag</font><font color="#E5E5E5"> is lunch in the</font>

413
00:25:54,860 --> 00:26:02,039
virtual USB device<font color="#E5E5E5"> and then monitor</font><font color="#CCCCCC"> the</font>

414
00:25:58,350 --> 00:26:03,120
driver device standards is if the driver

415
00:26:02,039 --> 00:26:07,740
is running<font color="#E5E5E5"> properly</font>

416
00:26:03,120 --> 00:26:11,639
<font color="#E5E5E5">so first is as</font><font color="#CCCCCC"> I mentioned that is</font><font color="#E5E5E5"> I I</font>

417
00:26:07,740 --> 00:26:15,630
<font color="#E5E5E5">just run the the</font><font color="#CCCCCC"> virtual yes we device</font>

418
00:26:11,640 --> 00:26:19,320
<font color="#E5E5E5">in separate thread and just connected</font>

419
00:26:15,630 --> 00:26:22,190
<font color="#E5E5E5">the to the corresponding socket and then</font>

420
00:26:19,320 --> 00:26:24,990
after<font color="#CCCCCC"> that is just waiting for the</font>

421
00:26:22,190 --> 00:26:30,000
<font color="#E5E5E5">waiting</font><font color="#CCCCCC"> for the packets from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> casteth</font>

422
00:26:24,990 --> 00:26:33,960
<font color="#CCCCCC">vm and so here is come see</font><font color="#E5E5E5"> another task</font>

423
00:26:30,000 --> 00:26:34,710
and we have to monitor the<font color="#E5E5E5"> devices</font>

424
00:26:33,960 --> 00:26:41,179
standards

425
00:26:34,710 --> 00:26:47,220
and<font color="#CCCCCC"> to because if when when the when the</font>

426
00:26:41,179 --> 00:26:52,110
driver<font color="#CCCCCC"> is running</font><font color="#E5E5E5"> properly in the UK you</font>

427
00:26:47,220 --> 00:26:54,809
<font color="#CCCCCC">can just access to</font><font color="#E5E5E5"> the to this device so</font>

428
00:26:52,110 --> 00:26:57,870
we have to monitor<font color="#CCCCCC"> that it the the</font>

429
00:26:54,809 --> 00:27:00,990
device<font color="#E5E5E5"> tenders and here is just a little</font>

430
00:26:57,870 --> 00:27:06,270
<font color="#E5E5E5">bit code for how to do in</font><font color="#CCCCCC"> this monitor</font>

431
00:27:00,990 --> 00:27:11,220
so in the third stage we were doing the

432
00:27:06,270 --> 00:27:13,559
actual fuzzing and actually the<font color="#E5E5E5"> the</font>

433
00:27:11,220 --> 00:27:17,669
entry point occurred passing and the RP

434
00:27:13,559 --> 00:27:21,210
RP handle<font color="#E5E5E5"> fuzzing was is was occurred</font>

435
00:27:17,669 --> 00:27:24,120
when<font color="#CCCCCC"> winch as</font><font color="#E5E5E5"> you initial in the in the</font>

436
00:27:21,210 --> 00:27:28,289
second stage<font color="#E5E5E5"> so in this stage we want to</font>

437
00:27:24,120 --> 00:27:33,418
to initialize the<font color="#CCCCCC"> our</font><font color="#E5E5E5"> control code</font>

438
00:27:28,289 --> 00:27:36,179
<font color="#CCCCCC">fuzzing so and here is just some some</font>

439
00:27:33,419 --> 00:27:39,179
tasks we want to achieve and<font color="#CCCCCC"> here is the</font>

440
00:27:36,179 --> 00:27:43,080
<font color="#CCCCCC">error control codes</font><font color="#E5E5E5"> facing and we want</font>

441
00:27:39,179 --> 00:27:46,070
to want<font color="#E5E5E5"> to design we have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> design a</font>

442
00:27:43,080 --> 00:27:49,049
father to run inside<font color="#CCCCCC"> the VM</font><font color="#E5E5E5"> and</font>

443
00:27:46,070 --> 00:27:53,059
enumerate<font color="#E5E5E5"> the each error control code</font>

444
00:27:49,049 --> 00:27:58,168
and do some random fuzzing and also we

445
00:27:53,059 --> 00:28:01,980
need to<font color="#E5E5E5"> record some buffer</font><font color="#CCCCCC"> data when the</font>

446
00:27:58,169 --> 00:28:05,460
fuzzing<font color="#CCCCCC"> and that may we results into</font>

447
00:28:01,980 --> 00:28:09,270
<font color="#E5E5E5">some information leak or</font><font color="#CCCCCC"> if the kernel</font>

448
00:28:05,460 --> 00:28:12,539
<font color="#CCCCCC">mode</font><font color="#E5E5E5"> so here is just summarized just a</font>

449
00:28:09,270 --> 00:28:15,059
little bit of<font color="#CCCCCC"> cold snap of how I do it</font>

450
00:28:12,539 --> 00:28:18,690
the fuzzing the<font color="#CCCCCC"> father was written in</font>

451
00:28:15,059 --> 00:28:22,649
<font color="#CCCCCC">the in person and the core the core</font>

452
00:28:18,690 --> 00:28:26,100
fuzzing<font color="#CCCCCC"> unit</font><font color="#E5E5E5"> is written in C capsules</font>

453
00:28:22,649 --> 00:28:29,428
<font color="#CCCCCC">sip</font><font color="#E5E5E5"> C language and compared to the</font>

454
00:28:26,100 --> 00:28:33,658
native memory and that give us<font color="#E5E5E5"> a speed</font>

455
00:28:29,429 --> 00:28:36,919
up the the fuzzing process so after that

456
00:28:33,659 --> 00:28:39,960
we have to<font color="#CCCCCC"> monitor</font><font color="#E5E5E5"> the the for iris</font>

457
00:28:36,919 --> 00:28:43,320
standards of the when when when<font color="#CCCCCC"> during</font>

458
00:28:39,960 --> 00:28:46,200
<font color="#CCCCCC">the</font><font color="#E5E5E5"> fuzzy and we just collect the</font>

459
00:28:43,320 --> 00:28:47,480
<font color="#E5E5E5">process file and the monitor and</font><font color="#CCCCCC"> the</font>

460
00:28:46,200 --> 00:28:50,480
recorded the

461
00:28:47,480 --> 00:28:54,529
the process and the<font color="#E5E5E5"> monitor the every</font>

462
00:28:50,480 --> 00:29:01,340
standards of the<font color="#E5E5E5"> VM and then just do</font><font color="#CCCCCC"> it</font>

463
00:28:54,529 --> 00:29:04,130
and<font color="#CCCCCC"> then after we got some VI so these</font>

464
00:29:01,340 --> 00:29:06,820
were some<font color="#E5E5E5"> crashes</font><font color="#CCCCCC"> we have to copy out</font>

465
00:29:04,130 --> 00:29:09,470
the cross cross<font color="#CCCCCC"> stamp and the</font>

466
00:29:06,820 --> 00:29:12,559
corresponding test<font color="#E5E5E5"> case out of the VM</font>

467
00:29:09,470 --> 00:29:16,250
and after that we<font color="#E5E5E5"> can just save it for</font>

468
00:29:12,559 --> 00:29:18,769
<font color="#CCCCCC">the later analysis and after that we</font>

469
00:29:16,250 --> 00:29:22,130
restore the<font color="#E5E5E5"> VM back to the snap</font><font color="#CCCCCC"> shop and</font>

470
00:29:18,769 --> 00:29:26,419
the reapply the process file to continue

471
00:29:22,130 --> 00:29:29,409
the<font color="#E5E5E5"> passing so that's just some trivial</font>

472
00:29:26,419 --> 00:29:35,899
work to do so

473
00:29:29,409 --> 00:29:39,590
here we come<font color="#E5E5E5"> the result and as this is</font>

474
00:29:35,899 --> 00:29:43,639
<font color="#E5E5E5">just a first demo for the how the system</font>

475
00:29:39,590 --> 00:29:47,870
work and in this were<font color="#E5E5E5"> a unit my trying</font>

476
00:29:43,639 --> 00:29:52,760
<font color="#E5E5E5">to</font><font color="#CCCCCC"> demonstrate and the how I collect how</font>

477
00:29:47,870 --> 00:29:57,189
the system work and how they the<font color="#CCCCCC"> COS the</font>

478
00:29:52,760 --> 00:30:04,100
<font color="#CCCCCC">pairs all day so as you can see the is</font>

479
00:29:57,190 --> 00:30:08,630
trying to just a bit<font color="#E5E5E5"> it's moving and you</font>

480
00:30:04,100 --> 00:30:11,510
can see suggest some is trying to

481
00:30:08,630 --> 00:30:16,010
install the<font color="#E5E5E5"> drivers and it's just</font>

482
00:30:11,510 --> 00:30:19,850
showing<font color="#E5E5E5"> the is</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> yeah yes some let's</font>

483
00:30:16,010 --> 00:30:22,190
<font color="#E5E5E5">integrate hit the the driver sees is is</font>

484
00:30:19,850 --> 00:30:26,840
<font color="#CCCCCC">running</font><font color="#E5E5E5"> and then the systems that</font>

485
00:30:22,190 --> 00:30:30,620
<font color="#CCCCCC">occurred start</font><font color="#E5E5E5"> fuzzing and after a bit</font>

486
00:30:26,840 --> 00:30:34,870
<font color="#E5E5E5">you can see</font><font color="#CCCCCC"> BSOD one of the visual</font>

487
00:30:30,620 --> 00:30:38,658
machine shows<font color="#CCCCCC"> bsod and the second third</font>

488
00:30:34,870 --> 00:30:43,299
<font color="#E5E5E5">virtual machine just crashed</font><font color="#CCCCCC"> and after</font>

489
00:30:38,659 --> 00:30:43,299
that<font color="#E5E5E5"> and the system starts to</font><font color="#CCCCCC"> collect</font><font color="#E5E5E5"> a</font>

490
00:30:43,360 --> 00:30:51,860
the crash information of each virtual

491
00:30:46,580 --> 00:30:58,000
machine<font color="#E5E5E5"> and then that's it so let's</font><font color="#CCCCCC"> move</font>

492
00:30:51,860 --> 00:31:00,469
on so before<font color="#CCCCCC"> after</font><font color="#E5E5E5"> we we got all the</font>

493
00:30:58,000 --> 00:31:02,990
fuzzing result we have to<font color="#E5E5E5"> guess</font>

494
00:31:00,470 --> 00:31:05,630
reasonable<font color="#E5E5E5"> result because it's a quite a</font>

495
00:31:02,990 --> 00:31:09,049
lot<font color="#CCCCCC"> of crashes and that we have to do</font>

496
00:31:05,630 --> 00:31:11,659
some<font color="#E5E5E5"> automatic analysis on these all of</font>

497
00:31:09,049 --> 00:31:14,600
the<font color="#CCCCCC"> day's result</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have to recruit</font>

498
00:31:11,659 --> 00:31:18,159
the first we have to recruit reproduce

499
00:31:14,600 --> 00:31:20,959
the bug because not all the<font color="#E5E5E5"> bugs is</font>

500
00:31:18,159 --> 00:31:26,030
reproducible<font color="#CCCCCC"> so we have to repair this</font>

501
00:31:20,960 --> 00:31:27,940
<font color="#E5E5E5">so for for this purpose I</font><font color="#CCCCCC"> designed a</font>

502
00:31:26,030 --> 00:31:31,549
system for the<font color="#E5E5E5"> park</font><font color="#CCCCCC"> very cute</font>

503
00:31:27,940 --> 00:31:33,830
<font color="#E5E5E5">verification system and because out</font>

504
00:31:31,549 --> 00:31:37,039
because our<font color="#E5E5E5"> reporting system is running</font>

505
00:31:33,830 --> 00:31:41,210
<font color="#E5E5E5">on the linux to enable the</font><font color="#CCCCCC"> KVM kernel</font>

506
00:31:37,039 --> 00:31:44,570
<font color="#E5E5E5">cave-in so we we cannot support this</font>

507
00:31:41,210 --> 00:31:47,750
system<font color="#E5E5E5"> into the windows host</font><font color="#CCCCCC"> so we have</font>

508
00:31:44,570 --> 00:31:50,149
to launch two VMs<font color="#E5E5E5"> to develop to do the</font>

509
00:31:47,750 --> 00:31:52,549
kernel kernel debugging<font color="#E5E5E5"> and we launched</font>

510
00:31:50,150 --> 00:31:54,530
<font color="#CCCCCC">to Williams and the first is for the</font>

511
00:31:52,549 --> 00:31:59,750
<font color="#CCCCCC">debugger</font><font color="#E5E5E5"> and the other is for the</font>

512
00:31:54,530 --> 00:32:05,750
<font color="#CCCCCC">debugger</font><font color="#E5E5E5"> and we redirect the the</font><font color="#CCCCCC"> serial</font>

513
00:31:59,750 --> 00:32:09,950
<font color="#CCCCCC">port</font><font color="#E5E5E5"> to host TC tcp/ip port and to just</font>

514
00:32:05,750 --> 00:32:13,340
to connect to these two<font color="#E5E5E5"> virtual machine</font>

515
00:32:09,950 --> 00:32:18,080
together<font color="#E5E5E5"> and to do the kernel kernel</font>

516
00:32:13,340 --> 00:32:21,350
debugging<font color="#E5E5E5"> on a Linux host and the it's</font>

517
00:32:18,080 --> 00:32:25,428
really small<font color="#E5E5E5"> slow and stick time to</font>

518
00:32:21,350 --> 00:32:28,969
debug to<font color="#CCCCCC"> finally</font><font color="#E5E5E5"> a vulnerability the the</font>

519
00:32:25,429 --> 00:32:33,620
root cause of vulnerability but this is

520
00:32:28,970 --> 00:32:37,940
the only solution<font color="#E5E5E5"> we can and so after</font>

521
00:32:33,620 --> 00:32:41,239
that we have to do some<font color="#CCCCCC"> custom auto</font>

522
00:32:37,940 --> 00:32:45,590
<font color="#E5E5E5">analysis because as hundreds of the</font>

523
00:32:41,240 --> 00:32:47,720
cross<font color="#E5E5E5"> terms we cannot just drag the the</font>

524
00:32:45,590 --> 00:32:50,570
cross dumping into the<font color="#CCCCCC"> win debug and to</font>

525
00:32:47,720 --> 00:32:53,450
see the to wait for the analysis and

526
00:32:50,570 --> 00:32:56,928
<font color="#E5E5E5">then we got the result is good time</font>

527
00:32:53,450 --> 00:33:02,360
consuming<font color="#E5E5E5"> and it's hideous so I wrote</font>

528
00:32:56,929 --> 00:33:07,250
<font color="#E5E5E5">just</font><font color="#CCCCCC"> a page script to</font><font color="#E5E5E5"> acceleracers</font>

529
00:33:02,360 --> 00:33:11,229
progress and then just<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really easy</font>

530
00:33:07,250 --> 00:33:13,520
<font color="#E5E5E5">to read</font><font color="#CCCCCC"> the code so after that we we got</font>

531
00:33:11,230 --> 00:33:17,230
all the

532
00:33:13,520 --> 00:33:23,530
<font color="#CCCCCC">Kristen</font><font color="#E5E5E5"> be analysis</font><font color="#CCCCCC"> analyze that</font><font color="#E5E5E5"> so</font>

533
00:33:17,230 --> 00:33:26,840
after that we have to we have to do some

534
00:33:23,530 --> 00:33:29,000
<font color="#E5E5E5">because it's a lot of bugs in the in the</font>

535
00:33:26,840 --> 00:33:31,730
drivers we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to locate the the</font>

536
00:33:29,000 --> 00:33:35,870
<font color="#E5E5E5">exactly the</font><font color="#CCCCCC"> location of the bugs in the</font>

537
00:33:31,730 --> 00:33:38,540
in the<font color="#CCCCCC"> boundaries so but it's to cut</font><font color="#E5E5E5"> its</font>

538
00:33:35,870 --> 00:33:42,050
<font color="#E5E5E5">cut ends of the</font><font color="#CCCCCC"> traversing</font><font color="#E5E5E5"> needs to be</font>

539
00:33:38,540 --> 00:33:46,720
analysis so it is also time<font color="#CCCCCC"> consuming</font>

540
00:33:42,050 --> 00:33:49,790
<font color="#E5E5E5">and then in in this case</font><font color="#CCCCCC"> I wrote at a</font>

541
00:33:46,720 --> 00:33:53,320
plug in to just make life easier

542
00:33:49,790 --> 00:33:57,139
so here is<font color="#CCCCCC"> just a comparison</font><font color="#E5E5E5"> of the when</font>

543
00:33:53,320 --> 00:34:01,428
<font color="#E5E5E5">before and you have to apply the</font><font color="#CCCCCC"> plug-in</font>

544
00:33:57,140 --> 00:34:04,429
<font color="#E5E5E5">so if you have any experience on analyze</font>

545
00:34:01,429 --> 00:34:07,690
the<font color="#CCCCCC"> windows windows</font><font color="#E5E5E5"> driver framework</font>

546
00:34:04,429 --> 00:34:11,750
drivers you<font color="#E5E5E5"> will find that they are the</font>

547
00:34:07,690 --> 00:34:16,429
when you load it into either<font color="#E5E5E5"> and there</font>

548
00:34:11,750 --> 00:34:19,580
<font color="#E5E5E5">won't be any symbols and to indicate how</font>

549
00:34:16,429 --> 00:34:24,320
many which which<font color="#CCCCCC"> API is they are using</font>

550
00:34:19,580 --> 00:34:26,779
<font color="#CCCCCC">and how many</font><font color="#E5E5E5"> ApS they are using so in</font>

551
00:34:24,320 --> 00:34:30,050
this case I just<font color="#E5E5E5"> you can see just</font>

552
00:34:26,780 --> 00:34:34,460
crapped on the on the<font color="#E5E5E5"> left side and</font><font color="#CCCCCC"> I</font>

553
00:34:30,050 --> 00:34:38,869
wrote<font color="#E5E5E5"> a wrote a plug-in and then we we</font>

554
00:34:34,460 --> 00:34:44,030
got reasonable result<font color="#E5E5E5"> and drew to</font>

555
00:34:38,869 --> 00:34:49,090
recover the the API names and<font color="#CCCCCC"> two API</font>

556
00:34:44,030 --> 00:34:51,830
names and every structures and every

557
00:34:49,090 --> 00:34:55,609
definite definition of the each

558
00:34:51,830 --> 00:35:00,529
structures so that's the make the code

559
00:34:55,609 --> 00:35:04,609
very readable so here is<font color="#CCCCCC"> its as example</font>

560
00:35:00,530 --> 00:35:07,160
<font color="#E5E5E5">I I found the during the our control</font>

561
00:35:04,609 --> 00:35:11,270
<font color="#CCCCCC">phasing</font><font color="#E5E5E5"> and as you can</font><font color="#CCCCCC"> see is trying to</font>

562
00:35:07,160 --> 00:35:14,569
call the the<font color="#E5E5E5"> tries that stores in the</font>

563
00:35:11,270 --> 00:35:17,720
<font color="#CCCCCC">Oratory access register</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> it is</font>

564
00:35:14,570 --> 00:35:22,490
list to the code execution<font color="#E5E5E5"> in in the</font>

565
00:35:17,720 --> 00:35:26,029
kernel mode<font color="#E5E5E5"> so here's the result and we</font>

566
00:35:22,490 --> 00:35:27,350
applied or we submit all the bugs<font color="#E5E5E5"> to</font>

567
00:35:26,030 --> 00:35:31,550
<font color="#E5E5E5">this request</font>

568
00:35:27,350 --> 00:35:35,120
and the<font color="#CCCCCC"> finally regatta about 112 civvy</font>

569
00:35:31,550 --> 00:35:38,510
<font color="#CCCCCC">a tease</font><font color="#E5E5E5"> of all of these folks</font><font color="#CCCCCC"> and I also</font>

570
00:35:35,120 --> 00:35:41,120
submit all the this stuff to Microsoft

571
00:35:38,510 --> 00:35:43,730
and<font color="#CCCCCC"> Heather</font>

572
00:35:41,120 --> 00:35:46,670
this has<font color="#E5E5E5"> been three months first they</font>

573
00:35:43,730 --> 00:35:54,620
haven't finished<font color="#E5E5E5"> the analyzed each box</font>

574
00:35:46,670 --> 00:35:58,730
so and still have to wait so and if you

575
00:35:54,620 --> 00:36:00,910
and the all<font color="#E5E5E5"> the previous pages</font><font color="#CCCCCC"> are</font>

576
00:35:58,730 --> 00:36:05,720
talking<font color="#CCCCCC"> about how the back of a</font>

577
00:36:00,910 --> 00:36:08,540
discovery<font color="#E5E5E5"> so here is just the second</font>

578
00:36:05,720 --> 00:36:11,450
demo and and trying to exploit one<font color="#CCCCCC"> of</font>

579
00:36:08,540 --> 00:36:14,270
the<font color="#CCCCCC"> Box</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> I found that during this</font>

580
00:36:11,450 --> 00:36:18,140
<font color="#CCCCCC">fuzzing</font><font color="#E5E5E5"> and in this demos we're trying</font>

581
00:36:14,270 --> 00:36:21,100
to<font color="#E5E5E5"> exploit the box and then kind just</font>

582
00:36:18,140 --> 00:36:27,170
bypass the authentication<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the windows</font>

583
00:36:21,100 --> 00:36:29,360
lock screen<font color="#E5E5E5"> so let's see so the</font>

584
00:36:27,170 --> 00:36:32,270
researcher just<font color="#E5E5E5"> trying to random typing</font>

585
00:36:29,360 --> 00:36:35,300
on on this to unlock the lock the

586
00:36:32,270 --> 00:36:39,200
windows but is<font color="#E5E5E5"> obviously is</font><font color="#CCCCCC"> will failed</font>

587
00:36:35,300 --> 00:36:42,770
<font color="#E5E5E5">and then this is</font><font color="#CCCCCC"> just tiny device I made</font>

588
00:36:39,200 --> 00:36:48,470
it<font color="#E5E5E5"> and trying</font><font color="#CCCCCC"> to plug into the USB USB</font>

589
00:36:42,770 --> 00:36:52,240
socket and on it and wait for<font color="#CCCCCC"> the shell</font>

590
00:36:48,470 --> 00:36:57,490
code to be executed in in some way and

591
00:36:52,240 --> 00:37:03,410
and and<font color="#E5E5E5"> then we have</font><font color="#CCCCCC"> to wait for for bit</font>

592
00:36:57,490 --> 00:37:07,009
<font color="#CCCCCC">yep just just a little bit and then</font>

593
00:37:03,410 --> 00:37:09,140
trying to do another<font color="#E5E5E5"> random typing for</font>

594
00:37:07,010 --> 00:37:14,680
the<font color="#E5E5E5"> world and the</font><font color="#CCCCCC"> to trying to unlock</font>

595
00:37:09,140 --> 00:37:14,680
the the screen and<font color="#E5E5E5"> state</font>

596
00:37:18,810 --> 00:37:27,670
<font color="#E5E5E5">okay so we come we come to the summary</font>

597
00:37:24,220 --> 00:37:31,839
and we we found<font color="#E5E5E5"> a novel attack service</font>

598
00:37:27,670 --> 00:37:35,200
of Windows and we had a whole<font color="#E5E5E5"> working</font>

599
00:37:31,840 --> 00:37:37,930
<font color="#E5E5E5">fuzzy system to this discovery the the</font>

600
00:37:35,200 --> 00:37:42,100
bugs and then and we<font color="#E5E5E5"> found the third</font>

601
00:37:37,930 --> 00:37:43,240
<font color="#E5E5E5">party Trevor developers</font><font color="#CCCCCC"> differed in the</font>

602
00:37:42,100 --> 00:37:46,660
code qualities

603
00:37:43,240 --> 00:37:49,810
so it's introduce a lot of bugs<font color="#E5E5E5"> even the</font>

604
00:37:46,660 --> 00:37:54,990
<font color="#E5E5E5">stack overflow and</font><font color="#CCCCCC"> hip overflow and some</font>

605
00:37:49,810 --> 00:37:59,410
non pointer reference so yeah<font color="#E5E5E5"> but</font>

606
00:37:54,990 --> 00:38:02,890
Microsoft design<font color="#E5E5E5"> is so is it's just the</font>

607
00:37:59,410 --> 00:38:07,180
Microsoft default<font color="#E5E5E5"> right</font><font color="#CCCCCC"> okay</font>

608
00:38:02,890 --> 00:38:10,589
so yeah<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> also found some way to to</font>

609
00:38:07,180 --> 00:38:14,230
do the fuzzing without any hardware so

610
00:38:10,590 --> 00:38:16,510
to the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> to thank my leader</font><font color="#CCCCCC"> 2k</font>

611
00:38:14,230 --> 00:38:20,170
<font color="#CCCCCC">you to</font><font color="#E5E5E5"> support my researcher on this</font>

612
00:38:16,510 --> 00:38:24,610
topic and<font color="#CCCCCC"> finally</font><font color="#E5E5E5"> I also got</font><font color="#CCCCCC"> a lot of</font>

613
00:38:20,170 --> 00:38:27,940
<font color="#E5E5E5">results of it and also a yeah I you can</font>

614
00:38:24,610 --> 00:38:31,120
the in the in the<font color="#E5E5E5"> demo to and the guy is</font>

615
00:38:27,940 --> 00:38:37,150
winching<font color="#CCCCCC"> Wang</font><font color="#E5E5E5"> and he just doing all the</font>

616
00:38:31,120 --> 00:38:40,560
exploit and<font color="#E5E5E5"> to and make the videos so</font>

617
00:38:37,150 --> 00:38:40,560
thank you for attention

618
00:38:42,170 --> 00:39:15,510
[Music]

