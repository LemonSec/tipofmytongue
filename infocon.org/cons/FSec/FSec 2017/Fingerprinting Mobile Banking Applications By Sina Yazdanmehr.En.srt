1
00:00:00,000 --> 00:00:02,060
<font color="#E5E5E5">you</font>

2
00:00:04,069 --> 00:00:08,039
hello<font color="#E5E5E5"> everybody</font>

3
00:00:05,760 --> 00:00:09,170
<font color="#E5E5E5">good afternoon</font><font color="#CCCCCC"> I hope you had a good day</font>

4
00:00:08,039 --> 00:00:12,360
so far

5
00:00:09,170 --> 00:00:14,309
I'm<font color="#CCCCCC"> sinaia on Mir and</font><font color="#E5E5E5"> I'm gonna talk</font>

6
00:00:12,360 --> 00:00:19,769
<font color="#CCCCCC">about fingerprint identification</font><font color="#E5E5E5"> in</font>

7
00:00:14,309 --> 00:00:22,169
mobile banking apps<font color="#CCCCCC"> I'm a patreon tester</font>

8
00:00:19,769 --> 00:00:25,488
and information<font color="#E5E5E5"> security consultant with</font>

9
00:00:22,169 --> 00:00:28,800
about<font color="#E5E5E5"> seven years of experience my main</font>

10
00:00:25,489 --> 00:00:31,829
<font color="#E5E5E5">area of interest</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> work is web and</font>

11
00:00:28,800 --> 00:00:33,660
mobile application security<font color="#E5E5E5"> currently</font>

12
00:00:31,829 --> 00:00:36,030
I'm working<font color="#CCCCCC"> in in</font><font color="#E5E5E5"> figure information</font>

13
00:00:33,660 --> 00:00:40,038
security as penetration<font color="#E5E5E5"> tester and</font>

14
00:00:36,030 --> 00:00:44,460
consultants<font color="#E5E5E5"> okay in this presentation</font>

15
00:00:40,039 --> 00:00:47,940
<font color="#E5E5E5">first I will talk about the root cause</font>

16
00:00:44,460 --> 00:00:49,500
of this<font color="#CCCCCC"> problem</font><font color="#E5E5E5"> then I will elaborate on</font>

17
00:00:47,940 --> 00:00:52,019
<font color="#CCCCCC">the traditional</font><font color="#E5E5E5"> approach which is</font>

18
00:00:49,500 --> 00:00:55,800
<font color="#CCCCCC">pincode on education and talk about</font><font color="#E5E5E5"> its</font>

19
00:00:52,019 --> 00:00:58,769
<font color="#E5E5E5">security challenges after that</font><font color="#CCCCCC"> I will</font>

20
00:00:55,800 --> 00:01:00,468
<font color="#E5E5E5">review how currently the developer are</font>

21
00:00:58,769 --> 00:01:04,400
using the fingerprint identification

22
00:01:00,469 --> 00:01:09,930
<font color="#E5E5E5">beside</font><font color="#CCCCCC"> a traditional way with pincode</font>

23
00:01:04,400 --> 00:01:13,050
finally we<font color="#E5E5E5"> will see what</font><font color="#CCCCCC"> are problems of</font>

24
00:01:09,930 --> 00:01:17,700
the wrong implementation of fingerprint

25
00:01:13,050 --> 00:01:23,340
<font color="#E5E5E5">and finally I would talk about a better</font>

26
00:01:17,700 --> 00:01:28,830
<font color="#CCCCCC">solution for these before I start our</font>

27
00:01:23,340 --> 00:01:30,780
main topic<font color="#CCCCCC"> I need to introduce plain how</font>

28
00:01:28,830 --> 00:01:34,289
the major security of a mobile

29
00:01:30,780 --> 00:01:37,260
<font color="#E5E5E5">application basically the basis</font>

30
00:01:34,290 --> 00:01:40,260
impatient is that an attacker has full

31
00:01:37,260 --> 00:01:43,200
access to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> device</font><font color="#CCCCCC"> I mean physical</font>

32
00:01:40,260 --> 00:01:46,650
<font color="#E5E5E5">access the device is routed there is no</font>

33
00:01:43,200 --> 00:01:51,750
screen lock<font color="#E5E5E5"> attacker is able to plug the</font>

34
00:01:46,650 --> 00:01:53,970
device into his own<font color="#E5E5E5"> computer and under</font>

35
00:01:51,750 --> 00:01:56,610
that circumstances<font color="#CCCCCC"> a security</font>

36
00:01:53,970 --> 00:02:00,560
application<font color="#E5E5E5"> must be able to protect its</font>

37
00:01:56,610 --> 00:02:04,340
data confidential and secure so we

38
00:02:00,560 --> 00:02:08,580
<font color="#CCCCCC">assume that all security mechanisms of</font>

39
00:02:04,340 --> 00:02:11,310
operation system are already disabled

40
00:02:08,580 --> 00:02:13,670
and application is responsible for<font color="#E5E5E5"> its</font>

41
00:02:11,310 --> 00:02:13,670
security

42
00:02:13,709 --> 00:02:20,489
and please keep in the<font color="#CCCCCC"> mind that I'm</font>

43
00:02:16,829 --> 00:02:23,519
talking just<font color="#E5E5E5"> about a storage part in the</font>

44
00:02:20,489 --> 00:02:26,640
client side<font color="#E5E5E5"> but the</font><font color="#CCCCCC"> network part is</font>

45
00:02:23,519 --> 00:02:29,819
already<font color="#CCCCCC"> is as well important to be safe</font>

46
00:02:26,640 --> 00:02:34,200
<font color="#CCCCCC">it should be done over secure channels</font>

47
00:02:29,819 --> 00:02:37,798
like TLS or SSL<font color="#CCCCCC"> and some security</font>

48
00:02:34,200 --> 00:02:40,349
mechanisms like certificate<font color="#E5E5E5"> pinning or</font>

49
00:02:37,799 --> 00:02:42,569
proxy detection should<font color="#E5E5E5"> be implemented in</font>

50
00:02:40,349 --> 00:02:45,510
<font color="#CCCCCC">order to again in order</font><font color="#E5E5E5"> to protect data</font>

51
00:02:42,569 --> 00:02:48,060
<font color="#E5E5E5">over the network against network based</font>

52
00:02:45,510 --> 00:02:52,078
attacks like man-in-the-middle or stuff

53
00:02:48,060 --> 00:02:56,750
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> ok let's first</font><font color="#E5E5E5"> see what's</font>

54
00:02:52,079 --> 00:03:00,299
problem<font color="#CCCCCC"> almost all mobile applications</font>

55
00:02:56,750 --> 00:03:02,870
<font color="#E5E5E5">use OTP in order to</font><font color="#CCCCCC"> authenticate the</font>

56
00:03:00,299 --> 00:03:07,049
<font color="#CCCCCC">user</font><font color="#E5E5E5"> take along</font><font color="#CCCCCC"> with other information</font>

57
00:03:02,870 --> 00:03:09,269
<font color="#E5E5E5">the that is used as a</font><font color="#CCCCCC"> username for</font>

58
00:03:07,049 --> 00:03:12,900
<font color="#E5E5E5">example it might be a token ID it might</font>

59
00:03:09,269 --> 00:03:16,919
be account number or<font color="#CCCCCC"> ID</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> stuff</font>

60
00:03:12,900 --> 00:03:19,620
like that<font color="#E5E5E5"> but in order to generate OTP</font>

61
00:03:16,919 --> 00:03:22,139
the application the mobile application

62
00:03:19,620 --> 00:03:24,449
needs<font color="#E5E5E5"> to use a secret key which is</font>

63
00:03:22,139 --> 00:03:27,389
<font color="#CCCCCC">coming and</font><font color="#E5E5E5"> shared between the server</font>

64
00:03:24,449 --> 00:03:31,049
apps and their client app in order<font color="#E5E5E5"> to</font>

65
00:03:27,389 --> 00:03:33,139
generate one-time password this<font color="#CCCCCC"> Paddy's</font>

66
00:03:31,049 --> 00:03:36,060
secret key is the most important thing

67
00:03:33,139 --> 00:03:38,849
in a mobile<font color="#E5E5E5"> application mobile banking</font>

68
00:03:36,060 --> 00:03:41,310
application<font color="#CCCCCC"> of course because if someone</font>

69
00:03:38,849 --> 00:03:44,069
a third party can access the secret key

70
00:03:41,310 --> 00:03:50,449
<font color="#CCCCCC">we'll be able to</font><font color="#E5E5E5"> generate a valid OTP</font>

71
00:03:44,069 --> 00:03:53,849
<font color="#CCCCCC">and authenticated</font><font color="#E5E5E5"> system illegally so</font>

72
00:03:50,449 --> 00:03:56,129
<font color="#CCCCCC">this secret key should be encrypted</font><font color="#E5E5E5"> safe</font>

73
00:03:53,849 --> 00:03:59,668
and securely and<font color="#E5E5E5"> get stored on the</font>

74
00:03:56,129 --> 00:04:02,220
device<font color="#E5E5E5"> for</font><font color="#CCCCCC"> future</font><font color="#E5E5E5"> uses and it should be</font>

75
00:03:59,669 --> 00:04:05,989
<font color="#E5E5E5">just decrypted by an authorized user</font>

76
00:04:02,220 --> 00:04:10,470
which is<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> of the application</font>

77
00:04:05,989 --> 00:04:12,120
it's<font color="#CCCCCC"> alright so far</font><font color="#E5E5E5"> but the same secret</font>

78
00:04:10,470 --> 00:04:14,790
key<font color="#CCCCCC"> should be used</font><font color="#E5E5E5"> for any type</font><font color="#CCCCCC"> of</font>

79
00:04:12,120 --> 00:04:16,978
<font color="#E5E5E5">authentication</font><font color="#CCCCCC"> it can be fingerprint</font>

80
00:04:14,790 --> 00:04:19,259
authentication<font color="#E5E5E5"> face recognizing face</font>

81
00:04:16,978 --> 00:04:21,719
recognition authentication any other

82
00:04:19,259 --> 00:04:23,570
type of<font color="#E5E5E5"> biometric</font><font color="#CCCCCC"> authentication</font><font color="#E5E5E5"> or the</font>

83
00:04:21,719 --> 00:04:27,990
traditional<font color="#CCCCCC"> one Pinkel identification</font>

84
00:04:23,570 --> 00:04:29,729
<font color="#E5E5E5">why because the OTP</font><font color="#CCCCCC"> is based on this</font>

85
00:04:27,990 --> 00:04:31,950
<font color="#E5E5E5">secret key and if you use different</font>

86
00:04:29,729 --> 00:04:36,419
<font color="#E5E5E5">secret key that</font><font color="#CCCCCC"> means the server-side</font>

87
00:04:31,950 --> 00:04:38,940
<font color="#CCCCCC">app cannot validate the generated OTP</font><font color="#E5E5E5"> so</font>

88
00:04:36,419 --> 00:04:41,039
for any type of<font color="#E5E5E5"> authentication the</font>

89
00:04:38,940 --> 00:04:44,219
sacred key must be<font color="#E5E5E5"> the same in your</font>

90
00:04:41,039 --> 00:04:46,919
application definitely all<font color="#E5E5E5"> banks already</font>

91
00:04:44,219 --> 00:04:50,580
<font color="#E5E5E5">have their own mobile banking app and</font>

92
00:04:46,919 --> 00:04:54,930
<font color="#CCCCCC">just want</font><font color="#E5E5E5"> to upgrades it with new type</font>

93
00:04:50,580 --> 00:04:57,599
<font color="#CCCCCC">of authentication</font><font color="#E5E5E5"> so we need a way</font><font color="#CCCCCC"> in</font>

94
00:04:54,930 --> 00:05:00,539
order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> upgrade your application with</font>

95
00:04:57,599 --> 00:05:03,000
the last chance<font color="#E5E5E5"> in the database in the</font>

96
00:05:00,539 --> 00:05:09,330
code and<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to use</font>

97
00:05:03,000 --> 00:05:12,599
approach<font color="#E5E5E5"> for upgrading</font><font color="#CCCCCC"> in the current</font>

98
00:05:09,330 --> 00:05:15,029
situation<font color="#CCCCCC"> but the user wants to</font><font color="#E5E5E5"> start</font>

99
00:05:12,599 --> 00:05:17,880
using a<font color="#E5E5E5"> mobile banking application</font><font color="#CCCCCC"> after</font>

100
00:05:15,029 --> 00:05:21,029
installation<font color="#CCCCCC"> and getting the activation</font>

101
00:05:17,880 --> 00:05:23,639
<font color="#CCCCCC">information from the bank first the user</font>

102
00:05:21,029 --> 00:05:25,289
<font color="#E5E5E5">enters the data and the application</font>

103
00:05:23,639 --> 00:05:28,440
<font color="#CCCCCC">managed to send</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to the server side</font>

104
00:05:25,289 --> 00:05:31,620
applications after validation the mobile

105
00:05:28,440 --> 00:05:35,510
app will receive<font color="#CCCCCC"> a secret key maybe with</font>

106
00:05:31,620 --> 00:05:38,490
other<font color="#CCCCCC"> information about the Ekans then</font>

107
00:05:35,510 --> 00:05:41,490
mobile application ask the<font color="#E5E5E5"> user to enter</font>

108
00:05:38,490 --> 00:05:44,729
<font color="#E5E5E5">a pin in order</font><font color="#CCCCCC"> to use that as an</font>

109
00:05:41,490 --> 00:05:48,089
encryption key<font color="#E5E5E5"> and then the mobile app</font>

110
00:05:44,729 --> 00:05:50,580
will store<font color="#E5E5E5"> encrypted secret key and the</font>

111
00:05:48,089 --> 00:05:55,889
device<font color="#E5E5E5"> now the</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> is ready in</font>

112
00:05:50,580 --> 00:05:58,469
order<font color="#E5E5E5"> to use in the future so in</font><font color="#CCCCCC"> two</font>

113
00:05:55,889 --> 00:06:01,320
other situation the secret key will<font color="#CCCCCC"> be</font>

114
00:05:58,469 --> 00:06:05,070
used<font color="#E5E5E5"> by the app first</font><font color="#CCCCCC"> when the user</font>

115
00:06:01,320 --> 00:06:10,919
wants<font color="#CCCCCC"> to</font><font color="#E5E5E5"> log into the</font><font color="#CCCCCC"> system and the</font>

116
00:06:05,070 --> 00:06:14,760
second one time when a user<font color="#E5E5E5"> wish to sign</font>

117
00:06:10,919 --> 00:06:17,400
a<font color="#E5E5E5"> transaction in that case the user</font>

118
00:06:14,760 --> 00:06:19,560
needs<font color="#E5E5E5"> to first insert a pink pink code</font>

119
00:06:17,400 --> 00:06:22,729
<font color="#CCCCCC">the right thing code the application</font>

120
00:06:19,560 --> 00:06:25,339
managed to<font color="#CCCCCC"> fetch the secret key in</font>

121
00:06:22,729 --> 00:06:28,099
<font color="#CCCCCC">that's a Kripke from the device the</font>

122
00:06:25,339 --> 00:06:30,919
creeps<font color="#E5E5E5"> that with the user</font><font color="#CCCCCC"> pincode in</font>

123
00:06:28,099 --> 00:06:33,589
case of successful decryption<font color="#E5E5E5"> use the</font>

124
00:06:30,919 --> 00:06:39,099
<font color="#E5E5E5">plaintext of secret key as a seat for</font>

125
00:06:33,589 --> 00:06:43,610
<font color="#E5E5E5">the OTP algorithm generates new OTP and</font>

126
00:06:39,099 --> 00:06:46,400
use for the current task<font color="#E5E5E5"> it might be</font>

127
00:06:43,610 --> 00:06:51,129
<font color="#CCCCCC">logging</font><font color="#E5E5E5"> or it might be signing</font><font color="#CCCCCC"> a</font>

128
00:06:46,400 --> 00:06:55,089
transaction<font color="#E5E5E5"> or other confidential tasks</font>

129
00:06:51,129 --> 00:06:59,389
<font color="#E5E5E5">okay it seems everything is encrypted</font>

130
00:06:55,089 --> 00:07:02,509
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> alright but this part even</font>

131
00:06:59,389 --> 00:07:05,569
<font color="#E5E5E5">has some security challenges and in case</font>

132
00:07:02,509 --> 00:07:06,860
of<font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> information or</font><font color="#E5E5E5"> wrong type</font><font color="#CCCCCC"> of</font>

133
00:07:05,569 --> 00:07:11,479
secret<font color="#E5E5E5"> key</font>

134
00:07:06,860 --> 00:07:15,710
it might make an attacker enabled to

135
00:07:11,479 --> 00:07:18,020
<font color="#E5E5E5">brute-force pincode</font><font color="#CCCCCC"> locally let me</font>

136
00:07:15,710 --> 00:07:20,930
<font color="#E5E5E5">explain</font><font color="#CCCCCC"> this here usually a brute-force</font>

137
00:07:18,020 --> 00:07:25,219
<font color="#E5E5E5">detection is implemented in the</font><font color="#CCCCCC"> server</font>

138
00:07:20,930 --> 00:07:27,740
<font color="#CCCCCC">side application</font><font color="#E5E5E5"> and for example after a</font>

139
00:07:25,219 --> 00:07:30,498
number<font color="#CCCCCC"> a certain number of at throwing</font>

140
00:07:27,740 --> 00:07:34,009
attempts the<font color="#E5E5E5"> server-side application</font>

141
00:07:30,499 --> 00:07:39,319
<font color="#CCCCCC">locks</font><font color="#E5E5E5"> the user and forbidden for another</font>

142
00:07:34,009 --> 00:07:41,330
trying but in the local part<font color="#CCCCCC"> there won't</font>

143
00:07:39,319 --> 00:07:43,729
be we won't be able<font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> any</font>

144
00:07:41,330 --> 00:07:47,919
<font color="#E5E5E5">brute force detection mechanism because</font>

145
00:07:43,729 --> 00:07:51,110
<font color="#E5E5E5">an attacker will access to the</font>

146
00:07:47,919 --> 00:07:56,479
<font color="#CCCCCC">ciphertext</font><font color="#E5E5E5"> and unfortunately there is no</font>

147
00:07:51,110 --> 00:07:59,959
way the only<font color="#CCCCCC"> thing we can do is to use a</font>

148
00:07:56,479 --> 00:08:03,339
<font color="#E5E5E5">good algorithm</font><font color="#CCCCCC"> strong algorithm and a</font>

149
00:07:59,959 --> 00:08:08,419
really random<font color="#E5E5E5"> and secure secret key</font>

150
00:08:03,339 --> 00:08:11,059
<font color="#E5E5E5">let's take a look at its challenges the</font>

151
00:08:08,419 --> 00:08:13,430
sacred key<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be through the random</font>

152
00:08:11,059 --> 00:08:15,889
and unpredictable<font color="#CCCCCC"> there shouldn't be any</font>

153
00:08:13,430 --> 00:08:17,719
<font color="#E5E5E5">fixed pattern in order</font><font color="#CCCCCC"> to generating new</font>

154
00:08:15,889 --> 00:08:20,120
secret key for<font color="#CCCCCC"> each user it should be</font>

155
00:08:17,719 --> 00:08:22,339
totally<font color="#E5E5E5"> random</font><font color="#CCCCCC"> should be long enough and</font>

156
00:08:20,120 --> 00:08:24,169
it should be<font color="#CCCCCC"> unique I said the same</font>

157
00:08:22,339 --> 00:08:26,839
secret key shouldn't be used for two

158
00:08:24,169 --> 00:08:31,399
users<font color="#E5E5E5"> each user needs to have a unique</font>

159
00:08:26,839 --> 00:08:33,169
<font color="#CCCCCC">and enough long secret key keeping the</font>

160
00:08:31,399 --> 00:08:35,630
mind it should<font color="#CCCCCC"> be random bytes</font><font color="#E5E5E5"> not</font>

161
00:08:33,169 --> 00:08:37,848
characters not alphabets not numbers

162
00:08:35,630 --> 00:08:42,039
it should be<font color="#E5E5E5"> bites exactly random bytes</font>

163
00:08:37,849 --> 00:08:47,180
and unpredictable<font color="#E5E5E5"> make sure you use a</font>

164
00:08:42,039 --> 00:08:49,400
secure algorithm for<font color="#CCCCCC"> encryption</font><font color="#E5E5E5"> and just</font>

165
00:08:47,180 --> 00:08:52,069
stores<font color="#E5E5E5"> the</font><font color="#CCCCCC"> secret key</font>

166
00:08:49,400 --> 00:08:55,790
don't<font color="#E5E5E5"> append anything else to the secret</font>

167
00:08:52,070 --> 00:08:57,950
key<font color="#E5E5E5"> as a plane takes for example I</font>

168
00:08:55,790 --> 00:09:00,560
<font color="#E5E5E5">encountered</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of cases that</font>

169
00:08:57,950 --> 00:09:03,530
mobile applications before encrypt the

170
00:09:00,560 --> 00:09:06,170
secret key<font color="#E5E5E5"> append some predictable for</font>

171
00:09:03,530 --> 00:09:09,920
example<font color="#CCCCCC"> I booked time or some fixed data</font>

172
00:09:06,170 --> 00:09:12,640
like<font color="#E5E5E5"> device ID to the secret key that's</font>

173
00:09:09,920 --> 00:09:15,319
a clue for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Ithaca</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to</font>

174
00:09:12,640 --> 00:09:17,170
perform<font color="#CCCCCC"> a local brute-force attack</font>

175
00:09:15,320 --> 00:09:22,270
against the secret against of<font color="#E5E5E5"> the</font>

176
00:09:17,170 --> 00:09:26,839
ciphertext<font color="#CCCCCC"> and try to find</font><font color="#E5E5E5"> the right</font>

177
00:09:22,270 --> 00:09:30,590
<font color="#E5E5E5">pink out and make sure</font><font color="#CCCCCC"> your secret key</font>

178
00:09:26,840 --> 00:09:33,410
size is exact multiple<font color="#CCCCCC"> of your cipher</font>

179
00:09:30,590 --> 00:09:37,070
block size<font color="#E5E5E5"> then you don't need to use</font>

180
00:09:33,410 --> 00:09:39,170
padding scams<font color="#E5E5E5"> why padding again is a</font>

181
00:09:37,070 --> 00:09:42,710
clue<font color="#CCCCCC"> for the attacker in order to</font>

182
00:09:39,170 --> 00:09:46,339
<font color="#E5E5E5">recognize in a brute-force attack</font><font color="#CCCCCC"> if the</font>

183
00:09:42,710 --> 00:09:52,270
tried<font color="#CCCCCC"> pincode is the right</font><font color="#E5E5E5"> pin code or</font>

184
00:09:46,340 --> 00:09:56,120
is the wrong pin code<font color="#CCCCCC"> in a case that's</font><font color="#E5E5E5"> a</font>

185
00:09:52,270 --> 00:09:59,930
couple<font color="#CCCCCC"> of weeks ago I in concrete</font><font color="#E5E5E5"> the</font>

186
00:09:56,120 --> 00:10:03,440
application use it use the sequence of

187
00:09:59,930 --> 00:10:08,839
<font color="#E5E5E5">characters not bytes and the problem was</font>

188
00:10:03,440 --> 00:10:11,990
when you use<font color="#E5E5E5"> the crypto algorithm</font><font color="#CCCCCC"> in any</font>

189
00:10:08,840 --> 00:10:15,470
case with any encryption<font color="#E5E5E5"> key finally the</font>

190
00:10:11,990 --> 00:10:18,020
decrypt or returns you<font color="#E5E5E5"> output its might</font>

191
00:10:15,470 --> 00:10:20,600
garbage<font color="#E5E5E5"> bus or it might be the</font><font color="#CCCCCC"> right</font>

192
00:10:18,020 --> 00:10:25,790
plane takes the<font color="#E5E5E5"> only way to recognize</font>

193
00:10:20,600 --> 00:10:29,690
that in this case<font color="#E5E5E5"> for</font><font color="#CCCCCC"> rank</font><font color="#E5E5E5"> encryption</font>

194
00:10:25,790 --> 00:10:32,420
key which was the<font color="#E5E5E5"> pin code application</font>

195
00:10:29,690 --> 00:10:35,420
turned the Decrypter algorithm turns

196
00:10:32,420 --> 00:10:39,020
back some garbage bytes but in case of

197
00:10:35,420 --> 00:10:41,030
successful decryption<font color="#E5E5E5"> the algorithm</font>

198
00:10:39,020 --> 00:10:43,910
would turn back the screens of

199
00:10:41,030 --> 00:10:46,910
characters and in practice it's<font color="#E5E5E5"> almost</font>

200
00:10:43,910 --> 00:10:49,520
impossible to receive full sequence<font color="#E5E5E5"> of</font>

201
00:10:46,910 --> 00:10:53,750
characters<font color="#E5E5E5"> in case of using around</font>

202
00:10:49,520 --> 00:10:56,020
pink<font color="#E5E5E5"> herbs so keeping the mind those</font>

203
00:10:53,750 --> 00:10:58,790
parameters and<font color="#E5E5E5"> try to you</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to</font>

204
00:10:56,020 --> 00:11:03,890
implement<font color="#E5E5E5"> your secret key generating</font>

205
00:10:58,790 --> 00:11:06,829
<font color="#E5E5E5">process with these parameters okay</font>

206
00:11:03,890 --> 00:11:09,860
let's take a look<font color="#E5E5E5"> at current way of</font>

207
00:11:06,830 --> 00:11:15,260
<font color="#E5E5E5">using fingerprint identification by the</font>

208
00:11:09,860 --> 00:11:17,540
developer<font color="#CCCCCC"> the three</font><font color="#E5E5E5"> first steps are the</font>

209
00:11:15,260 --> 00:11:20,569
<font color="#CCCCCC">same as pass</font><font color="#E5E5E5"> user improves the</font>

210
00:11:17,540 --> 00:11:22,640
activation information gets back some

211
00:11:20,570 --> 00:11:30,020
secret key<font color="#CCCCCC"> and information from</font><font color="#E5E5E5"> server</font>

212
00:11:22,640 --> 00:11:33,170
side and here<font color="#CCCCCC"> tries to encrypt the data</font>

213
00:11:30,020 --> 00:11:38,180
<font color="#E5E5E5">the secret key with a ping code which</font>

214
00:11:33,170 --> 00:11:40,839
user determine after<font color="#E5E5E5"> that</font><font color="#CCCCCC"> ask the</font><font color="#E5E5E5"> user</font>

215
00:11:38,180 --> 00:11:43,280
of course<font color="#E5E5E5"> it depends on the hardware</font>

216
00:11:40,840 --> 00:11:45,260
availability and first checks if<font color="#E5E5E5"> the</font>

217
00:11:43,280 --> 00:11:47,630
device<font color="#CCCCCC"> supports fingerprint or not in</font>

218
00:11:45,260 --> 00:11:50,300
case of supporting the fingerprint the

219
00:11:47,630 --> 00:11:52,490
application asks<font color="#CCCCCC"> the user</font><font color="#E5E5E5"> if you want to</font>

220
00:11:50,300 --> 00:11:55,310
enable<font color="#E5E5E5"> the fingerprint authentication</font>

221
00:11:52,490 --> 00:12:00,350
feature<font color="#E5E5E5"> or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> in case the user will</font>

222
00:11:55,310 --> 00:12:04,400
<font color="#CCCCCC">still use fingerprint the application</font>

223
00:12:00,350 --> 00:12:07,360
generates a<font color="#CCCCCC"> random key in order</font><font color="#E5E5E5"> to use</font>

224
00:12:04,400 --> 00:12:11,750
as an encryption key then<font color="#CCCCCC"> managed to</font>

225
00:12:07,360 --> 00:12:15,160
encrypt<font color="#E5E5E5"> the</font><font color="#CCCCCC"> user's pin code and stored</font>

226
00:12:11,750 --> 00:12:18,560
the encrypted<font color="#CCCCCC"> pin code on the device and</font>

227
00:12:15,160 --> 00:12:21,050
<font color="#E5E5E5">Esther that random key into</font><font color="#CCCCCC"> the key</font>

228
00:12:18,560 --> 00:12:23,589
store which will be available<font color="#CCCCCC"> to the</font>

229
00:12:21,050 --> 00:12:28,750
application in case users authenticate

230
00:12:23,590 --> 00:12:32,240
<font color="#E5E5E5">himself by the</font><font color="#CCCCCC"> fingerprint after that</font>

231
00:12:28,750 --> 00:12:36,740
when user wants<font color="#CCCCCC"> to log in</font><font color="#E5E5E5"> or sign</font><font color="#CCCCCC"> to the</font>

232
00:12:32,240 --> 00:12:38,450
assignment transaction first application

233
00:12:36,740 --> 00:12:42,130
asks the user which<font color="#E5E5E5"> way of</font>

234
00:12:38,450 --> 00:12:44,769
authentication<font color="#CCCCCC"> you would like to use</font>

235
00:12:42,130 --> 00:12:46,750
if the user wants<font color="#CCCCCC"> to wants</font><font color="#E5E5E5"> to use the</font>

236
00:12:44,769 --> 00:12:49,300
<font color="#CCCCCC">ping code everything will be the same as</font>

237
00:12:46,750 --> 00:12:52,240
past application receives the pin code

238
00:12:49,300 --> 00:12:56,979
<font color="#CCCCCC">he</font><font color="#E5E5E5"> creeps the cipher takes</font><font color="#CCCCCC"> a secret key</font>

239
00:12:52,240 --> 00:13:00,490
<font color="#E5E5E5">and managed</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> plaintext of secret</font>

240
00:12:56,980 --> 00:13:06,310
key order to generate<font color="#CCCCCC"> OTP and other</font>

241
00:13:00,490 --> 00:13:08,800
stuffs<font color="#CCCCCC"> but if the user wish to use the</font>

242
00:13:06,310 --> 00:13:11,829
fingerprint authentication<font color="#E5E5E5"> first</font>

243
00:13:08,800 --> 00:13:14,170
application uses the fingerprint API in

244
00:13:11,829 --> 00:13:16,660
<font color="#E5E5E5">order to authenticate</font><font color="#CCCCCC"> the user by his</font>

245
00:13:14,170 --> 00:13:19,300
fingerprint in case of successful

246
00:13:16,660 --> 00:13:22,410
authentication<font color="#E5E5E5"> the operation system</font>

247
00:13:19,300 --> 00:13:27,579
<font color="#E5E5E5">gives permission to that application</font><font color="#CCCCCC"> to</font>

248
00:13:22,410 --> 00:13:30,550
<font color="#E5E5E5">use the</font><font color="#CCCCCC"> keystore now</font><font color="#E5E5E5"> the application</font><font color="#CCCCCC"> can</font>

249
00:13:27,579 --> 00:13:34,810
<font color="#CCCCCC">retrieves the encryption key</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font>

250
00:13:30,550 --> 00:13:37,540
<font color="#E5E5E5">key store and use that to decrypt the</font>

251
00:13:34,810 --> 00:13:41,258
encrypted<font color="#CCCCCC"> pin code</font><font color="#E5E5E5"> and the device</font><font color="#CCCCCC"> know</font>

252
00:13:37,540 --> 00:13:45,699
in this<font color="#E5E5E5"> situation the application has</font>

253
00:13:41,259 --> 00:13:48,180
<font color="#CCCCCC">the</font><font color="#E5E5E5"> users pin code in its memory so now</font>

254
00:13:45,699 --> 00:13:52,779
can use the<font color="#E5E5E5"> pin code in order to decrypt</font>

255
00:13:48,180 --> 00:13:57,699
<font color="#CCCCCC">the secret key</font><font color="#E5E5E5"> and again use the secrets</font>

256
00:13:52,779 --> 00:14:03,250
key for generating the OTP and proceed

257
00:13:57,699 --> 00:14:08,109
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> rest of process okay those are</font>

258
00:14:03,250 --> 00:14:10,800
<font color="#E5E5E5">two remaining steps everything is</font>

259
00:14:08,110 --> 00:14:14,079
encrypted<font color="#CCCCCC"> everything is confidential and</font>

260
00:14:10,800 --> 00:14:16,269
needs permission by the user fingerprint

261
00:14:14,079 --> 00:14:19,180
on the pinko<font color="#CCCCCC"> so while I'm talking</font><font color="#E5E5E5"> here</font>

262
00:14:16,269 --> 00:14:23,439
for you definitely<font color="#CCCCCC"> there are some</font>

263
00:14:19,180 --> 00:14:26,258
security<font color="#E5E5E5"> issues here first of all the</font>

264
00:14:23,439 --> 00:14:29,529
<font color="#E5E5E5">software back key stores are freely</font>

265
00:14:26,259 --> 00:14:32,860
<font color="#CCCCCC">accessible to the root user</font><font color="#E5E5E5"> that means</font>

266
00:14:29,529 --> 00:14:36,220
the way<font color="#E5E5E5"> this key store works if an</font>

267
00:14:32,860 --> 00:14:39,410
application uses the<font color="#CCCCCC"> secret</font><font color="#E5E5E5"> uses the key</font>

268
00:14:36,220 --> 00:14:42,410
store and it stores<font color="#E5E5E5"> some data in that</font>

269
00:14:39,410 --> 00:14:46,579
that data is isolated and is<font color="#E5E5E5"> accessible</font>

270
00:14:42,410 --> 00:14:49,939
just<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> Creator</font><font color="#E5E5E5"> application but the</font>

271
00:14:46,579 --> 00:14:52,459
root user has the full access to<font color="#E5E5E5"> the key</font>

272
00:14:49,939 --> 00:14:55,399
<font color="#E5E5E5">store that means in a rooted</font><font color="#CCCCCC"> device</font><font color="#E5E5E5"> the</font>

273
00:14:52,459 --> 00:14:58,069
root user can raise all data in the key

274
00:14:55,399 --> 00:15:03,769
store<font color="#E5E5E5"> and definitely there are millions</font>

275
00:14:58,069 --> 00:15:07,098
of all devices being used<font color="#E5E5E5"> so</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> secure</font>

276
00:15:03,769 --> 00:15:10,369
application<font color="#E5E5E5"> must be able</font><font color="#CCCCCC"> to be safe even</font>

277
00:15:07,099 --> 00:15:12,619
<font color="#CCCCCC">on the old device of</font><font color="#E5E5E5"> course the hardware</font>

278
00:15:10,369 --> 00:15:15,079
backed key stores are more secure<font color="#E5E5E5"> and</font>

279
00:15:12,619 --> 00:15:18,649
they are in fully accessible<font color="#CCCCCC"> even to the</font>

280
00:15:15,079 --> 00:15:20,839
root user<font color="#E5E5E5"> I'm not sure about hardware</font>

281
00:15:18,649 --> 00:15:24,829
attacks against of the hardware backed

282
00:15:20,839 --> 00:15:28,129
<font color="#CCCCCC">key</font><font color="#E5E5E5"> store but according to the what</font>

283
00:15:24,829 --> 00:15:31,399
Google says it's fully secure<font color="#E5E5E5"> I'm not</font>

284
00:15:28,129 --> 00:15:33,019
really sure to be honest when it<font color="#E5E5E5"> comes</font>

285
00:15:31,399 --> 00:15:36,049
to the mobile banking that means it's

286
00:15:33,019 --> 00:15:38,359
<font color="#E5E5E5">dealing</font><font color="#CCCCCC"> with your money</font><font color="#E5E5E5"> so it has a</font><font color="#CCCCCC"> real</font>

287
00:15:36,049 --> 00:15:40,519
<font color="#E5E5E5">high</font><font color="#CCCCCC"> priority for</font><font color="#E5E5E5"> you and it should be</font>

288
00:15:38,359 --> 00:15:44,689
really really confidential<font color="#CCCCCC"> and safe</font><font color="#E5E5E5"> of</font>

289
00:15:40,519 --> 00:15:47,269
course definitely<font color="#CCCCCC"> you know lots of</font>

290
00:15:44,689 --> 00:15:50,809
people<font color="#E5E5E5"> who use the same pin code for</font>

291
00:15:47,269 --> 00:15:52,909
<font color="#CCCCCC">everywhere</font><font color="#E5E5E5"> exactly everywhere for credit</font>

292
00:15:50,809 --> 00:15:55,039
card for debit<font color="#E5E5E5"> card for mobile</font>

293
00:15:52,909 --> 00:15:57,769
<font color="#E5E5E5">application for online application and</font>

294
00:15:55,039 --> 00:16:00,279
<font color="#E5E5E5">even he has different bank accounts</font>

295
00:15:57,769 --> 00:16:03,079
<font color="#CCCCCC">maybe use the same pin code for</font>

296
00:16:00,279 --> 00:16:08,029
<font color="#CCCCCC">everywhere</font><font color="#E5E5E5"> any applications on any card</font>

297
00:16:03,079 --> 00:16:09,498
so in case<font color="#E5E5E5"> of a insecure application by</font>

298
00:16:08,029 --> 00:16:12,529
using<font color="#CCCCCC"> this type of fingerprint</font>

299
00:16:09,499 --> 00:16:15,139
implementation and if an attacker can

300
00:16:12,529 --> 00:16:18,289
access to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> key store and decrypts the</font>

301
00:16:15,139 --> 00:16:22,369
<font color="#E5E5E5">pin code that means the</font><font color="#CCCCCC"> attacker has a</font>

302
00:16:18,289 --> 00:16:25,159
pin code which is valid<font color="#E5E5E5"> everywhere</font><font color="#CCCCCC"> for</font>

303
00:16:22,369 --> 00:16:28,339
<font color="#E5E5E5">that target maybe that pin code</font><font color="#CCCCCC"> is used</font>

304
00:16:25,159 --> 00:16:30,739
even for<font color="#E5E5E5"> the targets credit card or a</font>

305
00:16:28,339 --> 00:16:35,959
debit card<font color="#CCCCCC"> or any other online</font>

306
00:16:30,739 --> 00:16:37,879
applications of course if you can

307
00:16:35,959 --> 00:16:41,689
combine<font color="#E5E5E5"> the fingerprint authentication</font>

308
00:16:37,879 --> 00:16:43,849
<font color="#E5E5E5">and the pin code authentication you can</font>

309
00:16:41,689 --> 00:16:47,149
make it<font color="#CCCCCC"> two factor identifications</font><font color="#E5E5E5"> in</font>

310
00:16:43,849 --> 00:16:48,859
your application it means<font color="#E5E5E5"> this way has</font>

311
00:16:47,149 --> 00:16:52,600
more capabilities that you can use

312
00:16:48,859 --> 00:16:56,000
<font color="#CCCCCC">easily okay</font>

313
00:16:52,600 --> 00:16:58,840
we should find<font color="#CCCCCC"> it really easy to</font><font color="#E5E5E5"> be</font>

314
00:16:56,000 --> 00:17:02,480
implemented way<font color="#E5E5E5"> because other approach</font>

315
00:16:58,840 --> 00:17:04,910
needs lots of<font color="#CCCCCC"> chains</font><font color="#E5E5E5"> in the database in</font>

316
00:17:02,480 --> 00:17:09,349
the<font color="#CCCCCC"> server-side</font><font color="#E5E5E5"> application maybe in</font>

317
00:17:04,910 --> 00:17:14,330
your network structure so sometimes in

318
00:17:09,349 --> 00:17:17,810
this case developer avoid to<font color="#E5E5E5"> upgrade the</font>

319
00:17:14,329 --> 00:17:20,389
application or<font color="#E5E5E5"> maybe use insecure way</font>

320
00:17:17,810 --> 00:17:23,210
but there is<font color="#CCCCCC"> definitely a better</font>

321
00:17:20,390 --> 00:17:25,820
<font color="#E5E5E5">solution for that and definitely it's</font>

322
00:17:23,210 --> 00:17:30,070
easy to be implemented<font color="#E5E5E5"> and it's secure</font>

323
00:17:25,819 --> 00:17:32,990
<font color="#CCCCCC">and safe</font><font color="#E5E5E5"> what's that you can easily</font>

324
00:17:30,070 --> 00:17:36,590
<font color="#E5E5E5">display the secret key in two different</font>

325
00:17:32,990 --> 00:17:40,660
in equivalent parts and use each part

326
00:17:36,590 --> 00:17:45,250
for each type of<font color="#CCCCCC"> identification</font><font color="#E5E5E5"> how</font>

327
00:17:40,660 --> 00:17:48,650
let's have a quick overview<font color="#CCCCCC"> first</font><font color="#E5E5E5"> to the</font>

328
00:17:45,250 --> 00:17:52,070
<font color="#CCCCCC">OAuth algorithm which are used for</font>

329
00:17:48,650 --> 00:17:55,190
generating the OTP<font color="#CCCCCC"> there are three</font>

330
00:17:52,070 --> 00:17:57,649
famous algorithms<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> mac base or</font>

331
00:17:55,190 --> 00:18:01,480
<font color="#E5E5E5">time-based which usually is used for</font>

332
00:17:57,650 --> 00:18:04,940
<font color="#E5E5E5">logging and based on some factors or</font>

333
00:18:01,480 --> 00:18:09,350
<font color="#CCCCCC">challenge/response which usually is used</font>

334
00:18:04,940 --> 00:18:12,440
for<font color="#E5E5E5"> mac authentication and generating</font>

335
00:18:09,350 --> 00:18:16,510
response your to sign a transaction<font color="#E5E5E5"> all</font>

336
00:18:12,440 --> 00:18:19,400
these algorithms<font color="#E5E5E5"> needs three main</font>

337
00:18:16,510 --> 00:18:22,490
parameters first<font color="#E5E5E5"> is secret key which we</font>

338
00:18:19,400 --> 00:18:25,070
are<font color="#E5E5E5"> talking about the second is moving</font>

339
00:18:22,490 --> 00:18:28,940
factor and the moving factor causes the

340
00:18:25,070 --> 00:18:31,280
OTP<font color="#E5E5E5"> to be unique</font><font color="#CCCCCC"> each time</font><font color="#E5E5E5"> it in each</font>

341
00:18:28,940 --> 00:18:34,310
generating<font color="#CCCCCC"> its might with the time</font>

342
00:18:31,280 --> 00:18:38,170
current epoch time or a contour contour

343
00:18:34,310 --> 00:18:41,450
is a random<font color="#E5E5E5"> number</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is getting</font>

344
00:18:38,170 --> 00:18:45,290
increased<font color="#E5E5E5"> each time</font><font color="#CCCCCC"> after generating</font><font color="#E5E5E5"> an</font>

345
00:18:41,450 --> 00:18:48,860
OTP<font color="#E5E5E5"> and finally a coefficients because</font>

346
00:18:45,290 --> 00:18:51,740
those algorithms output will be a<font color="#E5E5E5"> number</font>

347
00:18:48,860 --> 00:18:54,260
<font color="#CCCCCC">between will be a float number between 0</font>

348
00:18:51,740 --> 00:18:56,060
<font color="#CCCCCC">and</font><font color="#E5E5E5"> 1 so</font><font color="#CCCCCC"> we can use a coefficient to</font>

349
00:18:54,260 --> 00:18:59,570
<font color="#E5E5E5">generates bigger number for</font><font color="#CCCCCC"> example if</font>

350
00:18:56,060 --> 00:19:02,919
you use<font color="#E5E5E5"> 10,000 as a</font><font color="#CCCCCC"> coefficient</font><font color="#E5E5E5"> you're</font>

351
00:18:59,570 --> 00:19:04,490
pretty your OTP will be<font color="#E5E5E5"> four digits</font>

352
00:19:02,920 --> 00:19:12,740
<font color="#E5E5E5">100,000 give</font>

353
00:19:04,490 --> 00:19:16,700
you<font color="#E5E5E5"> five digits of OTP</font><font color="#CCCCCC"> and so on</font><font color="#E5E5E5"> okay</font>

354
00:19:12,740 --> 00:19:19,970
how can we play<font color="#CCCCCC"> with</font><font color="#E5E5E5"> these parameters in</font>

355
00:19:16,700 --> 00:19:22,130
order<font color="#E5E5E5"> to implement a secure</font>

356
00:19:19,970 --> 00:19:26,870
authentication<font color="#E5E5E5"> and multi-level</font>

357
00:19:22,130 --> 00:19:30,230
authentication imagine your secret key

358
00:19:26,870 --> 00:19:34,309
is 30 bytes<font color="#CCCCCC"> this is just an S imputation</font>

359
00:19:30,230 --> 00:19:37,520
<font color="#E5E5E5">it can be any length when the mobile</font>

360
00:19:34,309 --> 00:19:41,178
application receives<font color="#E5E5E5"> the secret key</font><font color="#CCCCCC"> it</font>

361
00:19:37,520 --> 00:19:45,110
can explai the secret key<font color="#CCCCCC"> into different</font>

362
00:19:41,179 --> 00:19:47,929
<font color="#E5E5E5">size in this case</font><font color="#CCCCCC"> I implement</font><font color="#E5E5E5"> I exploit</font>

363
00:19:45,110 --> 00:19:51,350
<font color="#CCCCCC">the secret key in 20 bytes and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ten</font>

364
00:19:47,929 --> 00:19:54,740
bytes and use the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> 20 bars in</font><font color="#E5E5E5"> order</font>

365
00:19:51,350 --> 00:19:56,840
to pink identification<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 10 bytes for</font>

366
00:19:54,740 --> 00:19:59,870
<font color="#E5E5E5">the fingerprint identification and if</font>

367
00:19:56,840 --> 00:20:00,889
the user wishes to do a two-factor

368
00:19:59,870 --> 00:20:04,360
<font color="#E5E5E5">authentication</font>

369
00:20:00,890 --> 00:20:08,420
I will concatenate again<font color="#E5E5E5"> two parts of</font>

370
00:20:04,360 --> 00:20:11,620
secret key and use<font color="#CCCCCC"> the whole</font><font color="#E5E5E5"> bytes in</font>

371
00:20:08,420 --> 00:20:16,150
order to<font color="#E5E5E5"> generates an OTP for two-way</font>

372
00:20:11,620 --> 00:20:20,000
two-factor authentication<font color="#E5E5E5"> and if user</font>

373
00:20:16,150 --> 00:20:23,750
wants to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> pin code the lengths</font><font color="#E5E5E5"> of</font>

374
00:20:20,000 --> 00:20:26,059
final OTP in my<font color="#E5E5E5"> case it's really</font>

375
00:20:23,750 --> 00:20:28,790
<font color="#CCCCCC">optional you can use any links will be</font>

376
00:20:26,059 --> 00:20:31,940
<font color="#E5E5E5">seven digits 20 bytes of secret key will</font>

377
00:20:28,790 --> 00:20:35,409
be<font color="#E5E5E5"> used and the user will have a will</font>

378
00:20:31,940 --> 00:20:39,530
have permission to sign to the

379
00:20:35,410 --> 00:20:41,660
application<font color="#E5E5E5"> and sign the transaction if</font>

380
00:20:39,530 --> 00:20:44,660
the you if the user wants<font color="#CCCCCC"> to just use</font>

381
00:20:41,660 --> 00:20:47,240
the fingerprint the OTP links will<font color="#CCCCCC"> be</font>

382
00:20:44,660 --> 00:20:50,420
six digits<font color="#CCCCCC"> 10 bytes</font><font color="#E5E5E5"> of secret key will</font>

383
00:20:47,240 --> 00:20:51,980
<font color="#CCCCCC">be used and user can just log in to the</font>

384
00:20:50,420 --> 00:20:54,380
system<font color="#E5E5E5"> that means by fingerprint</font>

385
00:20:51,980 --> 00:20:56,480
authentication<font color="#E5E5E5"> the user will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

386
00:20:54,380 --> 00:21:00,200
just for example check the<font color="#CCCCCC"> backup</font><font color="#E5E5E5"> bank</font>

387
00:20:56,480 --> 00:21:02,900
<font color="#E5E5E5">the account plants checks the reports</font>

388
00:21:00,200 --> 00:21:06,920
itself like that<font color="#CCCCCC"> and cannot make any</font>

389
00:21:02,900 --> 00:21:09,370
<font color="#E5E5E5">transaction or sign</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> sanctions and if</font>

390
00:21:06,920 --> 00:21:12,470
the user uses<font color="#E5E5E5"> two-factor authentication</font>

391
00:21:09,370 --> 00:21:15,199
<font color="#CCCCCC">the whole secret key will be</font><font color="#E5E5E5"> used the</font>

392
00:21:12,470 --> 00:21:18,180
OTP links will<font color="#CCCCCC"> be eight digits</font><font color="#E5E5E5"> and the</font>

393
00:21:15,200 --> 00:21:19,590
user will<font color="#CCCCCC"> have full authority to</font><font color="#E5E5E5"> do</font>

394
00:21:18,180 --> 00:21:24,000
everything with the mobile<font color="#E5E5E5"> banking</font>

395
00:21:19,590 --> 00:21:29,429
application<font color="#CCCCCC"> is able to do let's dig into</font>

396
00:21:24,000 --> 00:21:31,710
it<font color="#E5E5E5"> and see how we can</font><font color="#CCCCCC"> use this way let's</font>

397
00:21:29,430 --> 00:21:35,880
again review<font color="#E5E5E5"> their steps of using a</font>

398
00:21:31,710 --> 00:21:38,730
mobile app first was<font color="#E5E5E5"> activation to</font>

399
00:21:35,880 --> 00:21:41,700
<font color="#CCCCCC">accepts are at the beginning</font><font color="#E5E5E5"> the same as</font>

400
00:21:38,730 --> 00:21:46,640
the past when the applications<font color="#E5E5E5"> received</font>

401
00:21:41,700 --> 00:21:51,120
secret<font color="#E5E5E5"> key first it split that into two</font>

402
00:21:46,640 --> 00:21:53,310
parts<font color="#CCCCCC"> the bigger part will be used for</font>

403
00:21:51,120 --> 00:21:56,760
<font color="#E5E5E5">pin code identification and the</font>

404
00:21:53,310 --> 00:21:59,639
application asks<font color="#CCCCCC"> the user to enter a</font><font color="#E5E5E5"> pin</font>

405
00:21:56,760 --> 00:22:02,670
<font color="#E5E5E5">then application encrypts the bigger</font>

406
00:21:59,640 --> 00:22:06,600
part with the user pin code<font color="#CCCCCC"> it</font><font color="#E5E5E5"> stores</font>

407
00:22:02,670 --> 00:22:10,740
that<font color="#E5E5E5"> on the device then</font><font color="#CCCCCC"> the application</font>

408
00:22:06,600 --> 00:22:14,159
generates a random encryption key insert

409
00:22:10,740 --> 00:22:18,900
encrypt the smaller part of secret key

410
00:22:14,160 --> 00:22:22,140
by that random<font color="#E5E5E5"> encryption key stores the</font>

411
00:22:18,900 --> 00:22:24,390
encrypted<font color="#E5E5E5"> part and the device and it</font>

412
00:22:22,140 --> 00:22:35,280
stores the encryption key in the key

413
00:22:24,390 --> 00:22:37,290
store<font color="#CCCCCC"> okay no login process by</font>

414
00:22:35,280 --> 00:22:41,010
fingerprint authentication if user wish

415
00:22:37,290 --> 00:22:44,370
to use application authenticate the user

416
00:22:41,010 --> 00:22:47,190
<font color="#E5E5E5">by his fingerprint in case of successful</font>

417
00:22:44,370 --> 00:22:49,649
authentication<font color="#E5E5E5"> the application the</font>

418
00:22:47,190 --> 00:22:52,500
mobile app is able to fetch the

419
00:22:49,650 --> 00:22:53,030
encryption key from the key store the

420
00:22:52,500 --> 00:22:56,450
<font color="#CCCCCC">crips</font>

421
00:22:53,030 --> 00:23:00,510
the smaller parts of the secret key

422
00:22:56,450 --> 00:23:04,110
generates<font color="#CCCCCC"> OCP and logging the user to</font>

423
00:23:00,510 --> 00:23:08,280
<font color="#CCCCCC">the system all other steps</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be the</font>

424
00:23:04,110 --> 00:23:11,879
same as pass if user wants to<font color="#E5E5E5"> enter the</font>

425
00:23:08,280 --> 00:23:15,750
pin<font color="#CCCCCC"> code</font><font color="#E5E5E5"> application asks the user to</font>

426
00:23:11,880 --> 00:23:18,210
input his pin code<font color="#E5E5E5"> managed to decrypt</font>

427
00:23:15,750 --> 00:23:20,910
<font color="#E5E5E5">the larger part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> secret key from their</font>

428
00:23:18,210 --> 00:23:24,630
storage and<font color="#E5E5E5"> use the larger part of</font>

429
00:23:20,910 --> 00:23:27,480
secret key in order<font color="#CCCCCC"> to generate OTP with</font>

430
00:23:24,630 --> 00:23:30,810
the<font color="#E5E5E5"> suitable length for pin code</font>

431
00:23:27,480 --> 00:23:32,669
authentication and proceed with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> rest</font>

432
00:23:30,810 --> 00:23:37,049
of process

433
00:23:32,669 --> 00:23:40,480
but what about two-factor authentication

434
00:23:37,049 --> 00:23:44,139
first application asks the user to<font color="#CCCCCC"> enter</font>

435
00:23:40,480 --> 00:23:48,160
<font color="#E5E5E5">the pin managed to decrypt</font><font color="#CCCCCC"> a bigger part</font>

436
00:23:44,140 --> 00:23:50,230
<font color="#E5E5E5">of secret key after that asks user to</font>

437
00:23:48,160 --> 00:23:53,410
authenticate himself with his pink

438
00:23:50,230 --> 00:23:55,720
fingerprints<font color="#E5E5E5"> now application can</font>

439
00:23:53,410 --> 00:23:59,380
<font color="#CCCCCC">retrieves</font><font color="#E5E5E5"> the encryption key from the</font>

440
00:23:55,720 --> 00:24:03,250
<font color="#E5E5E5">Kiester managed to decrypt the smaller</font>

441
00:23:59,380 --> 00:24:05,830
part of<font color="#E5E5E5"> secret key no application has</font>

442
00:24:03,250 --> 00:24:08,500
two parts of secret key in<font color="#E5E5E5"> a plain text</font>

443
00:24:05,830 --> 00:24:11,500
mode so application can again

444
00:24:08,500 --> 00:24:16,390
join two parts and have<font color="#E5E5E5"> has the</font><font color="#CCCCCC"> whole</font>

445
00:24:11,500 --> 00:24:20,760
<font color="#E5E5E5">secret key and use that as the seat for</font>

446
00:24:16,390 --> 00:24:23,980
<font color="#CCCCCC">the OTP algorithm generates OTP with the</font>

447
00:24:20,760 --> 00:24:27,809
suitable length<font color="#E5E5E5"> and send the data to the</font>

448
00:24:23,980 --> 00:24:31,270
server side up everything is done in the

449
00:24:27,809 --> 00:24:35,490
<font color="#E5E5E5">client side no let's take</font><font color="#CCCCCC"> a look at</font>

450
00:24:31,270 --> 00:24:37,539
<font color="#E5E5E5">server side application in the server</font>

451
00:24:35,490 --> 00:24:41,490
<font color="#E5E5E5">definitely you have</font><font color="#CCCCCC"> database</font><font color="#E5E5E5"> and a</font>

452
00:24:37,539 --> 00:24:44,530
<font color="#E5E5E5">storage</font><font color="#CCCCCC"> for storing the</font><font color="#E5E5E5"> user data</font><font color="#CCCCCC"> and</font>

453
00:24:41,490 --> 00:24:47,890
you<font color="#E5E5E5"> have a process</font><font color="#CCCCCC"> in order to</font>

454
00:24:44,530 --> 00:24:50,770
<font color="#E5E5E5">generating a secret key for each user as</font>

455
00:24:47,890 --> 00:24:51,970
I told you at the beginning<font color="#E5E5E5"> you have</font>

456
00:24:50,770 --> 00:24:54,220
<font color="#E5E5E5">nothing</font><font color="#CCCCCC"> to do here</font>

457
00:24:51,970 --> 00:24:55,840
<font color="#E5E5E5">because you're just generating OTP</font>

458
00:24:54,220 --> 00:24:59,010
generating the secret key the<font color="#CCCCCC"> same as</font>

459
00:24:55,840 --> 00:25:03,639
the<font color="#CCCCCC"> pastor's that</font><font color="#E5E5E5"> on the database and</font>

460
00:24:59,010 --> 00:25:07,870
almost all process<font color="#E5E5E5"> changing process is</font>

461
00:25:03,640 --> 00:25:10,090
in the<font color="#E5E5E5"> client side but for OTP</font>

462
00:25:07,870 --> 00:25:13,750
verification<font color="#E5E5E5"> when the server app</font>

463
00:25:10,090 --> 00:25:16,510
receives data for authenticating<font color="#E5E5E5"> or</font>

464
00:25:13,750 --> 00:25:18,039
<font color="#E5E5E5">signing transactions based on the</font>

465
00:25:16,510 --> 00:25:23,200
<font color="#CCCCCC">lengths of receive it</font>

466
00:25:18,039 --> 00:25:26,590
OTP it decides which part or maybe<font color="#CCCCCC"> the</font>

467
00:25:23,200 --> 00:25:28,150
whole secret<font color="#E5E5E5"> key should be used based on</font>

468
00:25:26,590 --> 00:25:31,928
<font color="#CCCCCC">this length</font><font color="#E5E5E5"> of secret key</font>

469
00:25:28,150 --> 00:25:36,100
it fits<font color="#E5E5E5"> the secret key based on the</font>

470
00:25:31,929 --> 00:25:38,669
lengths of OTP<font color="#E5E5E5"> it fits the whole secret</font>

471
00:25:36,100 --> 00:25:41,469
key<font color="#E5E5E5"> from the database might use whole</font>

472
00:25:38,669 --> 00:25:45,190
secret key for two-factor authentication

473
00:25:41,470 --> 00:25:49,170
or one part for any<font color="#E5E5E5"> type</font>

474
00:25:45,190 --> 00:25:54,760
authentication reproduces the<font color="#CCCCCC"> OTP</font><font color="#E5E5E5"> and</font>

475
00:25:49,170 --> 00:25:58,300
<font color="#CCCCCC">validates the Authenticator</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> odds of</font>

476
00:25:54,760 --> 00:26:01,930
user<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the steps will be</font><font color="#E5E5E5"> the same as</font>

477
00:25:58,300 --> 00:26:06,970
current<font color="#E5E5E5"> authentication based on the</font>

478
00:26:01,930 --> 00:26:12,820
<font color="#E5E5E5">validity of OTP but there are a couple</font>

479
00:26:06,970 --> 00:26:15,850
<font color="#CCCCCC">of old phones which don't support the</font>

480
00:26:12,820 --> 00:26:18,780
fingerprint sensor yet and the good

481
00:26:15,850 --> 00:26:23,139
application<font color="#E5E5E5"> must support even old</font>

482
00:26:18,780 --> 00:26:25,600
devices<font color="#E5E5E5"> so just imagine</font><font color="#CCCCCC"> there is no</font>

483
00:26:23,140 --> 00:26:29,080
fingerprint sensor in the world<font color="#CCCCCC"> and you</font>

484
00:26:25,600 --> 00:26:30,730
can just use the pin code<font color="#CCCCCC"> proceed</font>

485
00:26:29,080 --> 00:26:33,399
everything like two-factor

486
00:26:30,730 --> 00:26:35,890
authentication mode<font color="#E5E5E5"> when you receive the</font>

487
00:26:33,400 --> 00:26:40,450
secret<font color="#E5E5E5"> key just encrypt holy secret key</font>

488
00:26:35,890 --> 00:26:43,450
as they with the<font color="#CCCCCC"> ping code</font><font color="#E5E5E5"> and is stored</font>

489
00:26:40,450 --> 00:26:46,570
<font color="#E5E5E5">at on the device the same as way you do</font>

490
00:26:43,450 --> 00:26:48,910
it before fingerprint sensor comes to

491
00:26:46,570 --> 00:26:51,610
the mobile<font color="#E5E5E5"> phone nothing has changed</font>

492
00:26:48,910 --> 00:26:53,740
so again<font color="#E5E5E5"> you don't need to change</font>

493
00:26:51,610 --> 00:27:00,219
anything in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> server-side</font><font color="#CCCCCC"> app database</font>

494
00:26:53,740 --> 00:27:03,280
or in your<font color="#E5E5E5"> mobile app too much but after</font>

495
00:27:00,220 --> 00:27:07,110
what after<font color="#E5E5E5"> all these</font><font color="#CCCCCC"> talks</font><font color="#E5E5E5"> you should</font>

496
00:27:03,280 --> 00:27:09,879
need<font color="#E5E5E5"> we should see if this way can</font>

497
00:27:07,110 --> 00:27:13,330
search out everything all security

498
00:27:09,880 --> 00:27:16,200
challenges again<font color="#CCCCCC"> on a software bag key</font>

499
00:27:13,330 --> 00:27:21,189
<font color="#E5E5E5">store if an attacker gets access to the</font>

500
00:27:16,200 --> 00:27:24,070
device<font color="#E5E5E5"> finally he can manage</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> retrieve</font>

501
00:27:21,190 --> 00:27:28,030
<font color="#E5E5E5">a smaller part of secret key in that</font>

502
00:27:24,070 --> 00:27:29,950
<font color="#E5E5E5">case first of all your PIN code won't be</font>

503
00:27:28,030 --> 00:27:32,200
<font color="#CCCCCC">revealed to the attacker that means your</font>

504
00:27:29,950 --> 00:27:36,370
<font color="#E5E5E5">pin code will remain secret</font>

505
00:27:32,200 --> 00:27:38,170
<font color="#E5E5E5">and if attacker can generates OTP with</font>

506
00:27:36,370 --> 00:27:41,979
the smaller part<font color="#E5E5E5"> of secret key and</font>

507
00:27:38,170 --> 00:27:44,470
logins<font color="#E5E5E5"> to your bank account of course</font>

508
00:27:41,980 --> 00:27:47,050
some of<font color="#CCCCCC"> your confidential information</font>

509
00:27:44,470 --> 00:27:50,560
might be<font color="#CCCCCC"> revealed</font><font color="#E5E5E5"> like your account</font>

510
00:27:47,050 --> 00:27:54,610
<font color="#E5E5E5">plans your transaction reports but at</font>

511
00:27:50,560 --> 00:27:56,740
least the attacker<font color="#CCCCCC"> won't be able</font><font color="#E5E5E5"> to make</font>

512
00:27:54,610 --> 00:27:59,199
any transaction<font color="#E5E5E5"> he cannot sign</font>

513
00:27:56,740 --> 00:28:02,049
transactions can just

514
00:27:59,200 --> 00:28:03,850
your information<font color="#CCCCCC"> as I told you at</font><font color="#E5E5E5"> the</font>

515
00:28:02,049 --> 00:28:06,879
<font color="#E5E5E5">beginning there</font><font color="#CCCCCC"> are a couple of better</font>

516
00:28:03,850 --> 00:28:08,590
ways<font color="#E5E5E5"> in order to implement fingerprint</font>

517
00:28:06,880 --> 00:28:11,769
<font color="#CCCCCC">authentication beside the pincode</font>

518
00:28:08,590 --> 00:28:14,709
authentication securely and safe<font color="#E5E5E5"> but</font>

519
00:28:11,769 --> 00:28:17,740
those ways<font color="#E5E5E5"> needs lots of chains in the</font>

520
00:28:14,710 --> 00:28:20,380
code and<font color="#E5E5E5"> the database this way is the</font>

521
00:28:17,740 --> 00:28:27,870
<font color="#CCCCCC">easiest way to be implemented</font><font color="#E5E5E5"> and of</font>

522
00:28:20,380 --> 00:28:27,870
course<font color="#CCCCCC"> secure ok</font><font color="#E5E5E5"> any question</font><font color="#CCCCCC"> maybe</font>

523
00:28:27,899 --> 00:28:46,658
cutting this on it is<font color="#CCCCCC"> okay so you</font>

524
00:28:43,059 --> 00:28:48,639
mentioned<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> that our primary risk</font>

525
00:28:46,659 --> 00:28:50,289
was due to the<font color="#E5E5E5"> fact that we have to</font>

526
00:28:48,639 --> 00:28:54,010
charge the operating system<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's</font>

527
00:28:50,289 --> 00:28:57,340
subroutines<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to check the scan</font>

528
00:28:54,010 --> 00:29:00,820
the fingerprint<font color="#E5E5E5"> and retrieve it from</font><font color="#CCCCCC"> the</font>

529
00:28:57,340 --> 00:29:03,750
<font color="#E5E5E5">key store if our app could have a</font>

530
00:29:00,820 --> 00:29:06,610
<font color="#CCCCCC">low-level</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the scanning device</font>

531
00:29:03,750 --> 00:29:08,889
so<font color="#E5E5E5"> you could</font><font color="#CCCCCC"> bypass the whole operating</font>

532
00:29:06,610 --> 00:29:10,360
system in<font color="#E5E5E5"> that</font><font color="#CCCCCC"> case the risk</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font>

533
00:29:08,889 --> 00:29:14,860
greatly reduced

534
00:29:10,360 --> 00:29:18,279
am I correct<font color="#CCCCCC"> second if we</font><font color="#E5E5E5"> could use some</font>

535
00:29:14,860 --> 00:29:21,580
kind<font color="#E5E5E5"> of a say TPM device on the mobile</font>

536
00:29:18,279 --> 00:29:25,029
phone<font color="#E5E5E5"> could that reduce further the risk</font>

537
00:29:21,580 --> 00:29:28,539
of<font color="#E5E5E5"> compromise if case the device is</font>

538
00:29:25,029 --> 00:29:31,960
rooted yes you are right<font color="#CCCCCC"> but I'm talking</font>

539
00:29:28,539 --> 00:29:35,139
about<font color="#E5E5E5"> general situation general device</font>

540
00:29:31,960 --> 00:29:38,049
<font color="#E5E5E5">is a normal situation and all type of</font>

541
00:29:35,139 --> 00:29:40,299
<font color="#E5E5E5">hard words because you know device to</font>

542
00:29:38,049 --> 00:29:43,090
device<font color="#CCCCCC"> based on the different</font><font color="#E5E5E5"> hardware's</font>

543
00:29:40,299 --> 00:29:45,070
and version of operation system<font color="#E5E5E5"> there</font>

544
00:29:43,090 --> 00:29:48,990
might be different vulnerabilities<font color="#E5E5E5"> there</font>

545
00:29:45,070 --> 00:29:52,000
might be different security issues and

546
00:29:48,990 --> 00:29:54,669
generally an application should take

547
00:29:52,000 --> 00:29:56,860
care<font color="#E5E5E5"> of its security</font><font color="#CCCCCC"> I told you that</font>

548
00:29:54,669 --> 00:29:59,380
without<font color="#E5E5E5"> relying to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> operation system</font>

549
00:29:56,860 --> 00:30:01,269
or other mechanism so it should<font color="#E5E5E5"> be</font>

550
00:29:59,380 --> 00:30:06,240
something general not based on<font color="#E5E5E5"> the</font>

551
00:30:01,269 --> 00:30:06,240
difference<font color="#E5E5E5"> third party of mechanisms</font>

552
00:30:09,020 --> 00:30:23,139
other Christian<font color="#E5E5E5"> okay thank you</font><font color="#CCCCCC"> very much</font>

553
00:30:19,880 --> 00:30:23,140
for<font color="#CCCCCC"> your thinking Thanks</font>

