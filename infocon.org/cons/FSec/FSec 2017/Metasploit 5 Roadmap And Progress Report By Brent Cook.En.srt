1
00:00:02,490 --> 00:00:06,990
but hi everybody it's good to be here

2
00:00:05,790 --> 00:00:10,740
I'm sorry I'm the last thing before

3
00:00:06,990 --> 00:00:12,059
lunch I'll try not to go too long but I

4
00:00:10,740 --> 00:00:16,049
really appreciate everyone turning out

5
00:00:12,059 --> 00:00:18,060
today as you said I'm Brent cook I

6
00:00:16,049 --> 00:00:19,019
worked on a lot of interesting stuff

7
00:00:18,060 --> 00:00:21,150
because you could say I'm a

8
00:00:19,019 --> 00:00:25,080
jack-of-all-trades maybe a master of

9
00:00:21,150 --> 00:00:26,130
none but actually some kind of cool

10
00:00:25,080 --> 00:00:28,409
stuff that I've worked on it in the past

11
00:00:26,130 --> 00:00:31,019
I worked at breaking point systems I

12
00:00:28,410 --> 00:00:32,850
worked on the the networking stack all

13
00:00:31,019 --> 00:00:34,620
the firmware the tcp/ip stack we were

14
00:00:32,850 --> 00:00:37,470
one of the first people to be able to do

15
00:00:34,620 --> 00:00:39,599
10,000,000 simultaneous connections in a

16
00:00:37,470 --> 00:00:40,949
single box at a rate of over a million

17
00:00:39,600 --> 00:00:44,010
per second and this was over 10 years

18
00:00:40,950 --> 00:00:45,840
ago I've also worked at Cal Zeta I've

19
00:00:44,010 --> 00:00:46,379
worked on the IPMI firmware so if you've

20
00:00:45,840 --> 00:00:48,600
ever hacked

21
00:00:46,380 --> 00:00:50,340
ipmi and found vulnerabilities that

22
00:00:48,600 --> 00:00:52,260
might be a little bit my code

23
00:00:50,340 --> 00:00:53,430
unfortunately they they actually went

24
00:00:52,260 --> 00:00:55,260
out of business about three months after

25
00:00:53,430 --> 00:00:57,600
I started working for them but um

26
00:00:55,260 --> 00:00:59,220
was fun while it lasted also I work on

27
00:00:57,600 --> 00:01:00,690
the Metasploit project which I've

28
00:00:59,220 --> 00:01:03,180
actually kind of been tangentially

29
00:01:00,690 --> 00:01:04,500
involved with for over 10 years but I

30
00:01:03,180 --> 00:01:07,200
really got started about three years ago

31
00:01:04,500 --> 00:01:11,100
when I joined rapid7 and became the

32
00:01:07,200 --> 00:01:14,939
manager for the metalic project oh my

33
00:01:11,100 --> 00:01:17,250
gosh it's so dark let's see so if you

34
00:01:14,939 --> 00:01:19,169
don't know what Metasploit is Metasploit

35
00:01:17,250 --> 00:01:22,170
is basically an exploitation

36
00:01:19,170 --> 00:01:24,840
payload management pin testing tool red

37
00:01:22,170 --> 00:01:27,479
teaming tool a research tool it does a

38
00:01:24,840 --> 00:01:29,159
lot of different things there's a lot of

39
00:01:27,479 --> 00:01:32,280
sort of key components to Metasploit

40
00:01:29,159 --> 00:01:33,840
that make it work this is actually if

41
00:01:32,280 --> 00:01:36,960
you can if you can't tell it's a

42
00:01:33,840 --> 00:01:39,780
screenshot of a Metasploit running it's

43
00:01:36,960 --> 00:01:40,740
got a command line prompt and it can do

44
00:01:39,780 --> 00:01:42,210
a lot of different things it can

45
00:01:40,740 --> 00:01:44,818
simulate all kinds of servers all kinds

46
00:01:42,210 --> 00:01:46,619
of network protocols it can also of

47
00:01:44,819 --> 00:01:49,079
course do exploitation meaning of it can

48
00:01:46,619 --> 00:01:50,429
target vulnerable software get remote

49
00:01:49,079 --> 00:01:52,949
code execution and then allow you to

50
00:01:50,429 --> 00:01:54,929
pivot and do extra things like extract

51
00:01:52,950 --> 00:01:58,850
data from remote system move further

52
00:01:54,929 --> 00:02:02,069
into a network that sort of thing and

53
00:01:58,850 --> 00:02:02,939
this is basically a talk about what

54
00:02:02,069 --> 00:02:04,380
we're doing

55
00:02:02,939 --> 00:02:06,779
towards the future to sort of take that

56
00:02:04,380 --> 00:02:08,728
big monolith application and break it up

57
00:02:06,780 --> 00:02:10,259
into something that can be used in a lot

58
00:02:08,729 --> 00:02:12,690
of different a lot more scenarios than

59
00:02:10,258 --> 00:02:14,040
we're doing today ways that we're trying

60
00:02:12,690 --> 00:02:16,109
to help people who use Metasploit

61
00:02:14,040 --> 00:02:17,910
whether it's a security researcher or

62
00:02:16,110 --> 00:02:20,280
if it's someone who is just doing a red

63
00:02:17,910 --> 00:02:21,870
team or a pen test or something like

64
00:02:20,280 --> 00:02:23,250
that basically we're trying to make a

65
00:02:21,870 --> 00:02:27,150
mess boy a lot easier for our users to

66
00:02:23,250 --> 00:02:30,690
to utilize to scale and to to make it

67
00:02:27,150 --> 00:02:32,910
better talking a little bit about the

68
00:02:30,690 --> 00:02:34,920
Menace white monolith the idea that

69
00:02:32,910 --> 00:02:36,930
we've got here moving forward is to

70
00:02:34,920 --> 00:02:39,089
bracele break Metasploit into lots of

71
00:02:36,930 --> 00:02:40,290
little pieces you can't really tell this

72
00:02:39,090 --> 00:02:41,460
at the moment but those are little

73
00:02:40,290 --> 00:02:42,959
hearts around each of those little

74
00:02:41,460 --> 00:02:46,050
Metasploit so there's not a whole lot of

75
00:02:42,960 --> 00:02:47,490
greyscale in the projector but basically

76
00:02:46,050 --> 00:02:49,740
what's going on here is we're going to

77
00:02:47,490 --> 00:02:53,100
be breaking Metasploit into a lot of

78
00:02:49,740 --> 00:02:54,690
little pieces not to worry it pretty

79
00:02:53,100 --> 00:02:55,560
much manages itself but I'm gonna be

80
00:02:54,690 --> 00:02:57,540
talking a little bit about some of the

81
00:02:55,560 --> 00:02:58,800
progress we've been making breaking

82
00:02:57,540 --> 00:03:02,459
Metasploit into different pieces that

83
00:02:58,800 --> 00:03:04,140
can be better reused better developed

84
00:03:02,459 --> 00:03:07,650
and basically make the whole thing work

85
00:03:04,140 --> 00:03:09,149
a lot better and easier talk a little

86
00:03:07,650 --> 00:03:10,709
bit what's like to work on the mess

87
00:03:09,150 --> 00:03:13,350
white project is kind of interesting the

88
00:03:10,709 --> 00:03:15,720
project has been around over 13 years so

89
00:03:13,350 --> 00:03:17,430
it means that it's gained a lot of let's

90
00:03:15,720 --> 00:03:20,010
say loyal followers and a lot of

91
00:03:17,430 --> 00:03:22,230
interesting quirks and this is a comic I

92
00:03:20,010 --> 00:03:23,760
like a lot where basically someone was

93
00:03:22,230 --> 00:03:25,679
talking about fixing a bug where the CPU

94
00:03:23,760 --> 00:03:27,690
overheats every time they you hit the

95
00:03:25,680 --> 00:03:30,030
spacebar and then someone basically use

96
00:03:27,690 --> 00:03:34,410
that as part of their workflow to to be

97
00:03:30,030 --> 00:03:35,880
Emacs control character and so this kind

98
00:03:34,410 --> 00:03:37,799
of like what it's like working for

99
00:03:35,880 --> 00:03:39,480
Metasploit almost every bug that we have

100
00:03:37,800 --> 00:03:41,970
is actually part of someone's workflow

101
00:03:39,480 --> 00:03:43,920
so we have to sometimes be careful and

102
00:03:41,970 --> 00:03:45,900
sort of get an idea for like alright so

103
00:03:43,920 --> 00:03:47,549
you're using it this way but we really

104
00:03:45,900 --> 00:03:48,720
wanted you to just that way how can we

105
00:03:47,550 --> 00:03:50,790
sort of meet in the middle and in

106
00:03:48,720 --> 00:03:53,010
compromising and improve things while

107
00:03:50,790 --> 00:03:56,190
still not breaking everyone every time

108
00:03:53,010 --> 00:03:57,929
we make a change so I'm gonna talk a

109
00:03:56,190 --> 00:04:00,690
little bit about some of the key key

110
00:03:57,930 --> 00:04:03,180
features that we're trying to improve

111
00:04:00,690 --> 00:04:05,700
within Metasploit and some stories

112
00:04:03,180 --> 00:04:07,709
around what we're why we're trying to

113
00:04:05,700 --> 00:04:09,630
make these sort of changes whether

114
00:04:07,709 --> 00:04:12,570
that's around collaboration within

115
00:04:09,630 --> 00:04:14,700
rapid7 we actually have a big pin

116
00:04:12,570 --> 00:04:16,228
testing organization they you know are

117
00:04:14,700 --> 00:04:17,789
basically customers will pay us to go

118
00:04:16,228 --> 00:04:20,700
and break into their networks and see

119
00:04:17,790 --> 00:04:22,019
how far we can go one of the biggest

120
00:04:20,700 --> 00:04:23,849
issues that our pen testers have is

121
00:04:22,019 --> 00:04:25,770
around how do they share information

122
00:04:23,850 --> 00:04:28,289
between each other they use a lot of

123
00:04:25,770 --> 00:04:28,840
different tools not necessarily just

124
00:04:28,289 --> 00:04:30,580
Metasploit

125
00:04:28,840 --> 00:04:33,520
but sometimes it's custom things that

126
00:04:30,580 --> 00:04:35,289
they build themselves sometimes it is of

127
00:04:33,520 --> 00:04:37,479
course Metasploit itself sometimes it's

128
00:04:35,290 --> 00:04:39,220
like in map and Python responder and

129
00:04:37,479 --> 00:04:40,719
stuff like that and the question is how

130
00:04:39,220 --> 00:04:42,880
do they share all the information that

131
00:04:40,720 --> 00:04:46,410
they've collected over time these days

132
00:04:42,880 --> 00:04:49,389
you use things like spreadsheets shared

133
00:04:46,410 --> 00:04:51,370
chat rooms things like that and it's

134
00:04:49,389 --> 00:04:52,780
kind of cool that they're using the sort

135
00:04:51,370 --> 00:04:54,130
of collaboration tools but does mean

136
00:04:52,780 --> 00:04:55,690
that sometimes data gets lost and

137
00:04:54,130 --> 00:04:58,389
there's not always a good way to know

138
00:04:55,690 --> 00:04:59,650
who's doing what when and what what

139
00:04:58,389 --> 00:05:03,280
basically happens when things go wrong

140
00:04:59,650 --> 00:05:04,750
as well so basically so the workarounds

141
00:05:03,280 --> 00:05:06,580
people have been doing have been you

142
00:05:04,750 --> 00:05:08,590
know just writing log files having some

143
00:05:06,580 --> 00:05:09,669
one sort of monitor what's going on but

144
00:05:08,590 --> 00:05:11,530
it doesn't really pray that kind of

145
00:05:09,669 --> 00:05:12,909
real-time assurance about what's

146
00:05:11,530 --> 00:05:15,070
happening like during a pin test or a

147
00:05:12,910 --> 00:05:17,229
red team engagement another thing that

148
00:05:15,070 --> 00:05:18,820
sometimes people run into is you'll be

149
00:05:17,229 --> 00:05:22,060
inside of a network and you'll touch

150
00:05:18,820 --> 00:05:23,800
that one box that was really critical to

151
00:05:22,060 --> 00:05:25,660
an organization you didn't know about it

152
00:05:23,800 --> 00:05:27,310
and it just blew up and then they go oh

153
00:05:25,660 --> 00:05:28,690
my god what were you guys doing and

154
00:05:27,310 --> 00:05:30,729
maybe there's two or three pen testers

155
00:05:28,690 --> 00:05:32,350
working at the same time and they're all

156
00:05:30,729 --> 00:05:33,400
like oh I don't know I would just scan

157
00:05:32,350 --> 00:05:34,510
another network and I was like oh I

158
00:05:33,400 --> 00:05:36,010
don't know I was just on the domain

159
00:05:34,510 --> 00:05:37,860
controller extracting all the hashes and

160
00:05:36,010 --> 00:05:39,789
so there's a lot of stuff going on and

161
00:05:37,860 --> 00:05:41,320
allowing people to basically have

162
00:05:39,789 --> 00:05:43,240
visibility into like what's happening

163
00:05:41,320 --> 00:05:45,880
during an engagement is really important

164
00:05:43,240 --> 00:05:47,740
and you don't want losing that data so

165
00:05:45,880 --> 00:05:49,630
basically and I forgot to mention this

166
00:05:47,740 --> 00:05:51,490
earlier a lot of the projects that we've

167
00:05:49,630 --> 00:05:53,830
been building within Metasploit have

168
00:05:51,490 --> 00:05:56,099
code names based after gargoyles you

169
00:05:53,830 --> 00:05:58,150
guys know the gargoyles TV series but

170
00:05:56,099 --> 00:06:02,020
basically we've been using them to sort

171
00:05:58,150 --> 00:06:03,638
of give us give us working names for the

172
00:06:02,020 --> 00:06:05,080
different projects on the project we've

173
00:06:03,639 --> 00:06:06,310
been working on as far as data

174
00:06:05,080 --> 00:06:08,229
collaboration and sharing it's called

175
00:06:06,310 --> 00:06:11,169
Goliath and so this is actually the

176
00:06:08,229 --> 00:06:12,909
Goliath gargoyle from the TV series and

177
00:06:11,169 --> 00:06:15,789
what we've basically been doing is we

178
00:06:12,910 --> 00:06:17,349
built a distributed database that allows

179
00:06:15,789 --> 00:06:18,969
you to actually store all your results

180
00:06:17,349 --> 00:06:21,250
from all your different tools as they

181
00:06:18,970 --> 00:06:22,750
scan things in real time we've also

182
00:06:21,250 --> 00:06:25,419
built a web interface on top of this

183
00:06:22,750 --> 00:06:27,370
that allows you to immediately see as

184
00:06:25,419 --> 00:06:29,169
soon as something gets collected our box

185
00:06:27,370 --> 00:06:30,729
get shelled or something like that it

186
00:06:29,169 --> 00:06:32,590
actually just pops up an immediate

187
00:06:30,729 --> 00:06:34,180
notification so everyone is always

188
00:06:32,590 --> 00:06:37,330
informed about what's going on all the

189
00:06:34,180 --> 00:06:39,700
time this is a pretty cool thing in that

190
00:06:37,330 --> 00:06:42,039
it also allows multiple Metasploit users

191
00:06:39,700 --> 00:06:42,789
to collaborate over a shared database

192
00:06:42,039 --> 00:06:44,710
gnome as

193
00:06:42,790 --> 00:06:47,620
supported like a Postgres database for a

194
00:06:44,710 --> 00:06:49,150
long time but it's difficult to share

195
00:06:47,620 --> 00:06:50,290
that across multiple machines usually

196
00:06:49,150 --> 00:06:51,969
it's something that that's locally you

197
00:06:50,290 --> 00:06:53,920
want to lock it down you want Postgres

198
00:06:51,970 --> 00:06:57,220
right on the internet but but what this

199
00:06:53,920 --> 00:07:00,250
does it creates a Jason REST API that's

200
00:06:57,220 --> 00:07:02,830
authenticated and not only can you hook

201
00:07:00,250 --> 00:07:04,600
Metasploit up to this database you can

202
00:07:02,830 --> 00:07:06,490
actually hook Metasploit off to multiple

203
00:07:04,600 --> 00:07:09,280
database so let's say you're working

204
00:07:06,490 --> 00:07:10,930
locally on your box and that's why your

205
00:07:09,280 --> 00:07:11,739
PIN tester friend says hey can you help

206
00:07:10,930 --> 00:07:13,510
me out with this thing you can actually

207
00:07:11,740 --> 00:07:15,580
connect to his data source and see what

208
00:07:13,510 --> 00:07:16,240
he's doing at the same time you can

209
00:07:15,580 --> 00:07:17,859
connect to multiple things

210
00:07:16,240 --> 00:07:19,660
simultaneously and actually copy data

211
00:07:17,860 --> 00:07:22,150
between the multiple instances so it's

212
00:07:19,660 --> 00:07:23,380
kind of like the way before getting

213
00:07:22,150 --> 00:07:25,960
before difference distributed version

214
00:07:23,380 --> 00:07:27,520
control systems you usually had so that

215
00:07:25,960 --> 00:07:28,659
single point that single server that

216
00:07:27,520 --> 00:07:30,520
everyone sort of shared for

217
00:07:28,660 --> 00:07:32,350
collaboration or basically doing here is

218
00:07:30,520 --> 00:07:35,560
we're making pin testing a distributed

219
00:07:32,350 --> 00:07:38,650
database type system a distributed pin

220
00:07:35,560 --> 00:07:40,330
testing type of situation so give you

221
00:07:38,650 --> 00:07:43,390
kind of an idea what the block diagram

222
00:07:40,330 --> 00:07:44,530
looks like Goliath is basically around

223
00:07:43,390 --> 00:07:46,000
the notion that you have always a little

224
00:07:44,530 --> 00:07:47,260
sort distributed databases that you can

225
00:07:46,000 --> 00:07:49,120
spin up wherever you want you put them

226
00:07:47,260 --> 00:07:51,280
in AWS you can run them in a cloud you

227
00:07:49,120 --> 00:07:52,330
can run them locally and then of course

228
00:07:51,280 --> 00:07:53,979
you can have multiple methods but

229
00:07:52,330 --> 00:07:56,800
consoles connecting to them all at the

230
00:07:53,980 --> 00:07:58,870
same time I've got a short demo I might

231
00:07:56,800 --> 00:08:02,710
save it to the end that sort of shows

232
00:07:58,870 --> 00:08:04,270
all the stuff in action and I think will

233
00:08:02,710 --> 00:08:05,650
be very interesting but I'm gonna hold

234
00:08:04,270 --> 00:08:08,370
it to the end just to make sure we have

235
00:08:05,650 --> 00:08:10,840
enough time I'll take about four minutes

236
00:08:08,370 --> 00:08:13,150
but I actually do have it on a youtube

237
00:08:10,840 --> 00:08:14,229
page if you guys are interested and want

238
00:08:13,150 --> 00:08:16,659
to sort of watch it in real time

239
00:08:14,230 --> 00:08:18,520
and of course if the projector makes it

240
00:08:16,660 --> 00:08:20,950
kind of hard to look at you can of

241
00:08:18,520 --> 00:08:22,180
course look at it offline here here as

242
00:08:20,950 --> 00:08:25,000
well and I'll pop that up a little bit

243
00:08:22,180 --> 00:08:28,000
later something else we working on

244
00:08:25,000 --> 00:08:29,770
Metasploit five is the notion of being

245
00:08:28,000 --> 00:08:31,900
multilingual and that doesn't just

246
00:08:29,770 --> 00:08:34,329
necessarily mean Unicode support beyond

247
00:08:31,900 --> 00:08:36,098
support you know Chinese or Japanese or

248
00:08:34,330 --> 00:08:37,599
Russian or whatever it is

249
00:08:36,099 --> 00:08:41,130
we of course been doing a lot at work

250
00:08:37,599 --> 00:08:44,080
too but the idea around here is

251
00:08:41,130 --> 00:08:46,150
Metasploit is traditionally well mess

252
00:08:44,080 --> 00:08:48,550
what too was written in Perl that was

253
00:08:46,150 --> 00:08:51,610
about 10 years ago and then Metasploit 3

254
00:08:48,550 --> 00:08:53,079
& 4 were both written in Ruby Ruby is a

255
00:08:51,610 --> 00:08:55,030
really cool language has a lot of really

256
00:08:53,080 --> 00:08:56,230
neat features unfortunately it's not

257
00:08:55,030 --> 00:08:58,449
really the favorite

258
00:08:56,230 --> 00:09:01,150
language of the InfoSec in the research

259
00:08:58,450 --> 00:09:04,240
community I would say probably Python is

260
00:09:01,150 --> 00:09:07,590
is really like 90 95 percent of what

261
00:09:04,240 --> 00:09:10,690
most people write a lot of tools in so

262
00:09:07,590 --> 00:09:11,980
the question is how do we inside

263
00:09:10,690 --> 00:09:13,810
Metasploit which has thousands of

264
00:09:11,980 --> 00:09:15,250
modules written Ruby how do we support

265
00:09:13,810 --> 00:09:17,530
other languages that people want to

266
00:09:15,250 --> 00:09:20,550
write things in if you ever follow like

267
00:09:17,530 --> 00:09:24,189
say exploit DB or other to other

268
00:09:20,550 --> 00:09:25,750
projects that follow ulnar ability the

269
00:09:24,190 --> 00:09:26,830
racially pail has proof concepts a lot

270
00:09:25,750 --> 00:09:28,510
of times the proof of concepts are

271
00:09:26,830 --> 00:09:30,490
written in Python in the first place so

272
00:09:28,510 --> 00:09:32,740
a lot of times the big effort that's

273
00:09:30,490 --> 00:09:34,870
required to get something investable is

274
00:09:32,740 --> 00:09:38,500
first how do you write it in Ruby

275
00:09:34,870 --> 00:09:39,160
sometimes you have to port you have to

276
00:09:38,500 --> 00:09:40,900
reinvent the wheel

277
00:09:39,160 --> 00:09:43,360
sometimes you have to port whole

278
00:09:40,900 --> 00:09:45,819
protocol libraries across to Ruby it can

279
00:09:43,360 --> 00:09:48,100
be kind of a pain the button so what we

280
00:09:45,820 --> 00:09:51,730
basically done is we've added support to

281
00:09:48,100 --> 00:09:54,070
Metasploit we're actually dealing with

282
00:09:51,730 --> 00:09:55,960
any arbitrary language you might want

283
00:09:54,070 --> 00:09:58,060
the project we're using here is called

284
00:09:55,960 --> 00:09:59,950
cold stone cold stone is another one of

285
00:09:58,060 --> 00:10:01,300
the gargoyles I don't actually have a

286
00:09:59,950 --> 00:10:04,090
picture of him right in here but he's

287
00:10:01,300 --> 00:10:06,459
basically a cyborg slash you know

288
00:10:04,090 --> 00:10:07,900
organic sort of a hybrid so that idea

289
00:10:06,460 --> 00:10:09,430
here is that we've basically a hybrid

290
00:10:07,900 --> 00:10:12,490
system where Metasploit can basically

291
00:10:09,430 --> 00:10:16,719
rather than running modules as a in

292
00:10:12,490 --> 00:10:19,450
process Ruby class instead they actually

293
00:10:16,720 --> 00:10:21,250
run as external processes one really

294
00:10:19,450 --> 00:10:22,720
cool thing about that is not only can

295
00:10:21,250 --> 00:10:24,580
you write a module in Python you could

296
00:10:22,720 --> 00:10:27,120
write one in C you can write one in

297
00:10:24,580 --> 00:10:29,260
Erlang you could do whatever you want

298
00:10:27,120 --> 00:10:32,470
the other kind of cool thing about it is

299
00:10:29,260 --> 00:10:33,910
that the modules actually can be easily

300
00:10:32,470 --> 00:10:35,830
ported from proof of concept to

301
00:10:33,910 --> 00:10:37,709
Metasploit in just minutes and I'll show

302
00:10:35,830 --> 00:10:39,730
you guys an example out here in a second

303
00:10:37,710 --> 00:10:42,340
this kind of gives you sort of an idea

304
00:10:39,730 --> 00:10:44,260
about how project Coldstone works and in

305
00:10:42,340 --> 00:10:46,210
fact this code is already in Metasploit

306
00:10:44,260 --> 00:10:47,650
it's been there since about april we

307
00:10:46,210 --> 00:10:49,780
actually had in April for April Fool's

308
00:10:47,650 --> 00:10:51,010
joke we were going to sort of joke that

309
00:10:49,780 --> 00:10:52,750
we had added Python support when we

310
00:10:51,010 --> 00:10:54,010
actually did we decide not to joke about

311
00:10:52,750 --> 00:10:56,800
it since you know people might take it

312
00:10:54,010 --> 00:10:58,780
not take it seriously but the idea here

313
00:10:56,800 --> 00:11:00,520
is we basically have this kind of

314
00:10:58,780 --> 00:11:03,520
architecture Metasploit sits in the

315
00:11:00,520 --> 00:11:06,850
center modules rather than being loaded

316
00:11:03,520 --> 00:11:09,270
in memory as as Ruby classes instead

317
00:11:06,850 --> 00:11:11,130
they run as external processes

318
00:11:09,270 --> 00:11:12,660
and I'll be sharing the slides later but

319
00:11:11,130 --> 00:11:15,300
you can see that this is actually a

320
00:11:12,660 --> 00:11:17,459
separate process basically there's a

321
00:11:15,300 --> 00:11:19,050
JSON RPC interface here over standard

322
00:11:17,459 --> 00:11:20,939
inch standard out so so basically

323
00:11:19,050 --> 00:11:23,160
Metasploit creates a new child talks to

324
00:11:20,940 --> 00:11:25,950
it over a standard process of pipes and

325
00:11:23,160 --> 00:11:27,800
this allows us to effectively pipe to

326
00:11:25,950 --> 00:11:30,720
pretty much any sub process you want

327
00:11:27,800 --> 00:11:32,760
there's a socks5 proxy that we're

328
00:11:30,720 --> 00:11:35,880
building right now that will allow all

329
00:11:32,760 --> 00:11:39,480
the networking data from the module to

330
00:11:35,880 --> 00:11:41,130
be piped over a tunnel so if you want to

331
00:11:39,480 --> 00:11:42,270
pivot a module into a network rather

332
00:11:41,130 --> 00:11:43,439
than hitting it straight from s what

333
00:11:42,270 --> 00:11:44,910
console you can do that if you want to

334
00:11:43,440 --> 00:11:46,410
you know bounce it off some sort of

335
00:11:44,910 --> 00:11:48,779
endpoint or some sort of intermediate

336
00:11:46,410 --> 00:11:49,860
device that'll be possible that's one of

337
00:11:48,779 --> 00:11:51,570
the reasons why I originally had

338
00:11:49,860 --> 00:11:53,070
everything inside of Metasploit propers

339
00:11:51,570 --> 00:11:54,990
because we had the special socket

340
00:11:53,070 --> 00:11:57,510
abstraction that allows a module to be

341
00:11:54,990 --> 00:11:58,800
pivoted through this allows us that the

342
00:11:57,510 --> 00:12:01,670
socks5 proxy allows us to pivot

343
00:11:58,800 --> 00:12:04,680
basically any process that you want

344
00:12:01,670 --> 00:12:06,240
either you can do by by injecting some

345
00:12:04,680 --> 00:12:07,800
sort of like a Sox module into your

346
00:12:06,240 --> 00:12:09,420
language at the lowest level it's

347
00:12:07,800 --> 00:12:11,160
basically sort of monkey patch the Sox

348
00:12:09,420 --> 00:12:13,920
primitives or you could do some sort of

349
00:12:11,160 --> 00:12:15,390
LD preload like shadow Sox and and

350
00:12:13,920 --> 00:12:20,550
basically redirect all the network

351
00:12:15,390 --> 00:12:22,439
traffic at the C library level and so

352
00:12:20,550 --> 00:12:25,339
here a little quick proof of concept of

353
00:12:22,440 --> 00:12:28,770
porting a module straight from bone DB

354
00:12:25,339 --> 00:12:32,209
exploit DB I'm sorry into Metasploit so

355
00:12:28,770 --> 00:12:34,380
this is a module that attacks the Haraka

356
00:12:32,209 --> 00:12:37,560
SMTP server it's an SMP server written

357
00:12:34,380 --> 00:12:39,060
in nodejs someone actually her security

358
00:12:37,560 --> 00:12:41,609
researcher submitted a pull request to

359
00:12:39,060 --> 00:12:43,260
Metasploit we actually didn't realize it

360
00:12:41,610 --> 00:12:45,149
but he but he basically broke both a

361
00:12:43,260 --> 00:12:47,370
Python proof of concept and he wrote one

362
00:12:45,149 --> 00:12:48,690
in Ruby for Metasploit and so that's

363
00:12:47,370 --> 00:12:49,709
actually a pretty good example so I can

364
00:12:48,690 --> 00:12:51,570
sort of show the differences between

365
00:12:49,709 --> 00:12:54,510
writing a module and Metasploit as a

366
00:12:51,570 --> 00:12:56,810
ruby instance or writing in a Python so

367
00:12:54,510 --> 00:13:00,420
this is the original Python version oh

368
00:12:56,810 --> 00:13:03,140
and that looks not so good but basically

369
00:13:00,420 --> 00:13:05,430
what's going on here you can't see it is

370
00:13:03,140 --> 00:13:10,470
we basically just add one line of code

371
00:13:05,430 --> 00:13:13,410
and it's there hey basically we created

372
00:13:10,470 --> 00:13:15,600
a module inside Python that is basically

373
00:13:13,410 --> 00:13:17,339
it's just a module called Metasploit so

374
00:13:15,600 --> 00:13:19,560
you basically say from Metasploit import

375
00:13:17,339 --> 00:13:21,810
module and that's pretty much the first

376
00:13:19,560 --> 00:13:22,650
thing you have to do whenever you run a

377
00:13:21,810 --> 00:13:24,270
python module

378
00:13:22,650 --> 00:13:26,069
that's what it automatically injects the

379
00:13:24,270 --> 00:13:28,710
the library namespace into the search

380
00:13:26,070 --> 00:13:29,820
path so python is able to find it so you

381
00:13:28,710 --> 00:13:31,980
don't have to necessarily install an

382
00:13:29,820 --> 00:13:33,240
extra pip install any Python gems or

383
00:13:31,980 --> 00:13:34,470
anything like that sorry there's not a

384
00:13:33,240 --> 00:13:37,380
Python gem whatever they're called

385
00:13:34,470 --> 00:13:39,390
Python eggs and then you add some

386
00:13:37,380 --> 00:13:42,060
metadata this red stuff is metadata

387
00:13:39,390 --> 00:13:43,860
basically it's just a big hash and

388
00:13:42,060 --> 00:13:46,199
basically you give the description and

389
00:13:43,860 --> 00:13:47,820
like what CVE is it attacks what are the

390
00:13:46,200 --> 00:13:49,620
options it takes that sort of thing

391
00:13:47,820 --> 00:13:52,020
Metasploit will automatically parse this

392
00:13:49,620 --> 00:13:53,310
information and then the final bit is

393
00:13:52,020 --> 00:13:55,079
just this little bit of code here at the

394
00:13:53,310 --> 00:13:57,979
bottom it maybe takes about ten lines of

395
00:13:55,080 --> 00:14:00,450
code to actually implement it and

396
00:13:57,980 --> 00:14:02,790
basically you create a new main method

397
00:14:00,450 --> 00:14:05,160
and it will automatically handle all the

398
00:14:02,790 --> 00:14:06,599
RPC calls between Metasploit and in your

399
00:14:05,160 --> 00:14:09,449
module for you and what I'll do is

400
00:14:06,600 --> 00:14:10,950
basically whenever the exploit needs to

401
00:14:09,450 --> 00:14:12,990
be called the the export method will be

402
00:14:10,950 --> 00:14:14,700
dispatched at the metadata needs to be

403
00:14:12,990 --> 00:14:17,970
extracted that metadata module will be

404
00:14:14,700 --> 00:14:20,310
extract dispatched what it basically

405
00:14:17,970 --> 00:14:21,900
means is we only had to add about 15

406
00:14:20,310 --> 00:14:23,729
lines of code to an already written

407
00:14:21,900 --> 00:14:26,130
Python exploit and suddenly it was

408
00:14:23,730 --> 00:14:29,580
running and Metasploit pretty fantastic

409
00:14:26,130 --> 00:14:32,189
stuff in fact here's kind of a service

410
00:14:29,580 --> 00:14:33,480
summary of what we started with so this

411
00:14:32,190 --> 00:14:37,260
is the original proof of concept that

412
00:14:33,480 --> 00:14:37,620
was off of exploit DB as 167 lines of

413
00:14:37,260 --> 00:14:40,110
code

414
00:14:37,620 --> 00:14:42,900
the the Ruby version for Metasploit was

415
00:14:40,110 --> 00:14:44,880
225 lines of code and then when we

416
00:14:42,900 --> 00:14:46,650
actually ported it to run as a Python

417
00:14:44,880 --> 00:14:47,970
module within Metasploit it was only 106

418
00:14:46,650 --> 00:14:48,990
lines of code because we were able to

419
00:14:47,970 --> 00:14:51,570
delete actually some of the

420
00:14:48,990 --> 00:14:53,010
infrastructure out of the original

421
00:14:51,570 --> 00:14:55,200
proof-of-concept we're doing option

422
00:14:53,010 --> 00:14:57,420
parsing and that sort of stuff so it's

423
00:14:55,200 --> 00:14:59,760
kind of interesting in that the Python

424
00:14:57,420 --> 00:15:02,250
version of the Metasploit module is half

425
00:14:59,760 --> 00:15:04,080
the size of the normal medicine module

426
00:15:02,250 --> 00:15:05,880
so the idea here is it's gonna be a

427
00:15:04,080 --> 00:15:09,210
really nice productivity gain for a lot

428
00:15:05,880 --> 00:15:10,260
of researchers and developers something

429
00:15:09,210 --> 00:15:12,030
else we've been working on it was just

430
00:15:10,260 --> 00:15:13,970
kind of cool is the idea of being able

431
00:15:12,030 --> 00:15:17,339
to share sessions between multiple users

432
00:15:13,970 --> 00:15:19,490
sometimes when you have a we do with all

433
00:15:17,340 --> 00:15:22,650
kinds of customers from you know tins to

434
00:15:19,490 --> 00:15:25,470
you know a quarter of a million people

435
00:15:22,650 --> 00:15:27,150
inside their organizations sometimes

436
00:15:25,470 --> 00:15:28,590
people have millions of boxes within

437
00:15:27,150 --> 00:15:30,990
their networks which is kind of surreal

438
00:15:28,590 --> 00:15:33,150
but sometimes in those kind of big

439
00:15:30,990 --> 00:15:34,320
situations you have an issue where you

440
00:15:33,150 --> 00:15:35,459
actually want to sort of pipeline your

441
00:15:34,320 --> 00:15:36,660
red teaming you

442
00:15:35,459 --> 00:15:38,008
some people who are basically getting

443
00:15:36,660 --> 00:15:39,689
access you have other people who are

444
00:15:38,009 --> 00:15:41,519
then taking that access and going

445
00:15:39,689 --> 00:15:43,319
further within the network sort of like

446
00:15:41,519 --> 00:15:44,610
a pipeline team and we wanted to

447
00:15:43,319 --> 00:15:47,040
basically make it easier for those kind

448
00:15:44,610 --> 00:15:48,779
of people to share sessions so basically

449
00:15:47,040 --> 00:15:50,819
once you get access into the network how

450
00:15:48,779 --> 00:15:52,610
do you hand off those shells to other

451
00:15:50,819 --> 00:15:54,479
people to be able to collaborate with

452
00:15:52,610 --> 00:15:56,100
some of the work rounds people have done

453
00:15:54,480 --> 00:15:58,860
in the past as cars run Metasploit like

454
00:15:56,100 --> 00:16:00,240
a screen session we do have like a

455
00:15:58,860 --> 00:16:02,639
transport command where you can you can

456
00:16:00,240 --> 00:16:04,110
redirect sessions from one Metasploit

457
00:16:02,639 --> 00:16:05,429
instance to another well these are all

458
00:16:04,110 --> 00:16:07,350
kind of awkward and it a little bit

459
00:16:05,429 --> 00:16:09,839
dangerous in that you can easily lose a

460
00:16:07,350 --> 00:16:10,649
session along the way also sometimes you

461
00:16:09,839 --> 00:16:12,230
want to be able to sort of have a

462
00:16:10,649 --> 00:16:14,429
distributed network when you're sort of

463
00:16:12,230 --> 00:16:15,600
simulating a kind of a large-scale

464
00:16:14,429 --> 00:16:17,929
adversary you might want to have

465
00:16:15,600 --> 00:16:19,800
multiple command control servers so

466
00:16:17,929 --> 00:16:22,019
dealing with that is kind of awkward

467
00:16:19,800 --> 00:16:23,368
within Metasploit today but we're

468
00:16:22,019 --> 00:16:25,199
basically done is we created this new

469
00:16:23,369 --> 00:16:28,350
thing called meadow aggregator what it

470
00:16:25,199 --> 00:16:30,929
is is basically a payload proxy it

471
00:16:28,350 --> 00:16:32,970
doesn't have to do a whole lot basically

472
00:16:30,929 --> 00:16:34,379
it does maybe three things one it

473
00:16:32,970 --> 00:16:35,850
listens for incoming payloads so

474
00:16:34,379 --> 00:16:37,949
basically if you you know exploit a box

475
00:16:35,850 --> 00:16:39,119
or you get access in some way maybe it's

476
00:16:37,949 --> 00:16:42,029
through phishing maybe some social

477
00:16:39,119 --> 00:16:43,740
engineering some other mechanism meswick

478
00:16:42,029 --> 00:16:45,959
payloads can actually all connect to the

479
00:16:43,740 --> 00:16:49,769
single endpoint or you can actually have

480
00:16:45,959 --> 00:16:53,748
them distributed and they will basically

481
00:16:49,769 --> 00:16:55,920
Park once they park you can later on

482
00:16:53,749 --> 00:16:57,540
connect a synchronously to the

483
00:16:55,920 --> 00:17:00,029
aggregators through a metal a console

484
00:16:57,540 --> 00:17:01,860
and and see what they're up to

485
00:17:00,029 --> 00:17:03,119
so you basically multiple people can

486
00:17:01,860 --> 00:17:05,909
connect to these aggregators it's

487
00:17:03,119 --> 00:17:08,819
basically like a proxy and see what

488
00:17:05,909 --> 00:17:10,169
sessions have come in you can disconnect

489
00:17:08,819 --> 00:17:12,209
them you can interact with them you can

490
00:17:10,169 --> 00:17:13,919
pass them between users and but from the

491
00:17:12,209 --> 00:17:15,299
outside world they look like they all

492
00:17:13,919 --> 00:17:17,520
are connecting to a single box or

493
00:17:15,299 --> 00:17:18,869
multiple boxes you can actually connect

494
00:17:17,520 --> 00:17:20,819
to multiple aggregators at the same time

495
00:17:18,869 --> 00:17:22,139
to and get sort of a global view of all

496
00:17:20,819 --> 00:17:26,629
the different distributive boxes you've

497
00:17:22,140 --> 00:17:29,370
got running this is kind of an idea of

498
00:17:26,630 --> 00:17:31,169
how the mechanism works and you can of

499
00:17:29,370 --> 00:17:33,989
course check this out

500
00:17:31,169 --> 00:17:35,610
we have this open source as well so you

501
00:17:33,990 --> 00:17:37,289
ideas here you have multiple mess what

502
00:17:35,610 --> 00:17:40,350
consoles they can all connect to the

503
00:17:37,289 --> 00:17:41,760
aggregator and you can have multiple

504
00:17:40,350 --> 00:17:43,770
shells you can have a command-line shell

505
00:17:41,760 --> 00:17:45,059
you have interpreter and aggregator is

506
00:17:43,770 --> 00:17:46,440
basically the single source of truth for

507
00:17:45,059 --> 00:17:47,049
all your sessions that are running

508
00:17:46,440 --> 00:17:50,350
through

509
00:17:47,049 --> 00:17:53,110
I would show you a demo but we added a

510
00:17:50,350 --> 00:17:55,899
really cool new feature about two weeks

511
00:17:53,110 --> 00:17:58,269
ago that broke aggregator and that's

512
00:17:55,899 --> 00:17:59,830
actually a good thing sometimes when we

513
00:17:58,269 --> 00:18:02,559
build features with the Metasploit we

514
00:17:59,830 --> 00:18:04,119
discover that there's actually maybe a

515
00:18:02,559 --> 00:18:06,519
weakness that we discover along the way

516
00:18:04,119 --> 00:18:09,668
in this particular case aggregator was

517
00:18:06,519 --> 00:18:12,100
acting as a man-in-the-middle proxy what

518
00:18:09,669 --> 00:18:13,779
that basically means is it would

519
00:18:12,100 --> 00:18:15,820
intercept all the traffic that would go

520
00:18:13,779 --> 00:18:17,499
- normally - Metasploit men in the

521
00:18:15,820 --> 00:18:20,918
middle it and then would forward it back

522
00:18:17,499 --> 00:18:22,359
to another console in thinking about

523
00:18:20,919 --> 00:18:24,100
that that basically means that all

524
00:18:22,359 --> 00:18:26,129
Metasploit sessions are men in the

525
00:18:24,100 --> 00:18:28,539
middle of all not necessarily good thing

526
00:18:26,129 --> 00:18:30,340
so we actually recently added support

527
00:18:28,539 --> 00:18:33,429
for Enda and encryption between console

528
00:18:30,340 --> 00:18:34,959
and a meterpreter shell what that also

529
00:18:33,429 --> 00:18:37,179
means is that we broke a grater because

530
00:18:34,960 --> 00:18:38,859
now aggregator can't do the end it can't

531
00:18:37,179 --> 00:18:40,779
basically intercept the the session

532
00:18:38,859 --> 00:18:43,689
anymore we're working on ways to make

533
00:18:40,779 --> 00:18:45,489
aggregator actually smarter and able to

534
00:18:43,690 --> 00:18:47,980
actually implement full encryption with

535
00:18:45,489 --> 00:18:49,539
itself as well but in the meantime it's

536
00:18:47,980 --> 00:18:52,090
kind of a fun problem to happen that we

537
00:18:49,539 --> 00:18:54,609
actually broke our own code by making

538
00:18:52,090 --> 00:18:56,738
the other code better I'm gonna talk a

539
00:18:54,609 --> 00:18:59,320
little bit about you know that that sort

540
00:18:56,739 --> 00:19:00,580
of Indian encryption and other things by

541
00:18:59,320 --> 00:19:01,869
source segwaying it's all the

542
00:19:00,580 --> 00:19:03,639
improvements that we've done to payloads

543
00:19:01,869 --> 00:19:05,139
and that we're planning to move forward

544
00:19:03,639 --> 00:19:07,238
with in the future

545
00:19:05,139 --> 00:19:08,439
one of one of the certain oceans index

546
00:19:07,239 --> 00:19:10,600
actually this is the reason why I

547
00:19:08,440 --> 00:19:11,919
started at rapid7 was because they

548
00:19:10,600 --> 00:19:13,988
wanted to get meterpreter payloads

549
00:19:11,919 --> 00:19:16,629
running on everything and by everything

550
00:19:13,989 --> 00:19:20,710
I mean your watch your router your

551
00:19:16,629 --> 00:19:22,269
switch your phone all those sort of

552
00:19:20,710 --> 00:19:23,590
things and I've worked on a lot of

553
00:19:22,269 --> 00:19:26,679
embedded devices I kind of have some

554
00:19:23,590 --> 00:19:29,529
experience with you know building things

555
00:19:26,679 --> 00:19:32,049
that run kind of everywhere and this

556
00:19:29,529 --> 00:19:34,779
year we actually did it I actually have

557
00:19:32,049 --> 00:19:36,009
a talk I gave it no lacan 2017 you can

558
00:19:34,779 --> 00:19:39,070
check it out on youtube there's a video

559
00:19:36,009 --> 00:19:40,450
it takes maybe an hour to watch it but

560
00:19:39,070 --> 00:19:42,850
basically what we did was we created a

561
00:19:40,450 --> 00:19:45,909
fully portable Metasploit payload for

562
00:19:42,850 --> 00:19:51,189
meterpreter that can run on an iWatch it

563
00:19:45,909 --> 00:19:52,960
can run on FreeBSD OpenBSD Solaris we've

564
00:19:51,190 --> 00:19:54,820
actually got binaries for it for OS X

565
00:19:52,960 --> 00:19:56,529
and for I think 11 different

566
00:19:54,820 --> 00:19:57,939
architectures of Linux all the way from

567
00:19:56,529 --> 00:20:00,910
mainframes s/390

568
00:19:57,940 --> 00:20:03,310
to you know oddball arm very

569
00:20:00,910 --> 00:20:04,900
two printers it's kind of cool and we've

570
00:20:03,310 --> 00:20:07,919
had a lot of researchers say it's the

571
00:20:04,900 --> 00:20:13,210
first time bill actually show like the

572
00:20:07,920 --> 00:20:15,550
real working exploit chain with my with

573
00:20:13,210 --> 00:20:16,510
my proof of concept in fact one of the

574
00:20:15,550 --> 00:20:18,100
reasons why we actually got these

575
00:20:16,510 --> 00:20:20,170
payloads pushed out in the first place

576
00:20:18,100 --> 00:20:22,120
was because of stage fright the stage

577
00:20:20,170 --> 00:20:24,190
fright vulnerability that Joshua Drake J

578
00:20:22,120 --> 00:20:26,620
duck discovered I think a couple of

579
00:20:24,190 --> 00:20:28,450
years now years ago now he was actually

580
00:20:26,620 --> 00:20:29,889
trying to build a working proof of

581
00:20:28,450 --> 00:20:31,450
concept because there's a lot of fear

582
00:20:29,890 --> 00:20:32,920
about oh this could be easily exploited

583
00:20:31,450 --> 00:20:35,890
but no one's actually able to get it to

584
00:20:32,920 --> 00:20:37,120
work in kind of a practical sense one of

585
00:20:35,890 --> 00:20:40,570
the reasons why it wouldn't work was

586
00:20:37,120 --> 00:20:43,239
because of SELinux SELinux prevents at

587
00:20:40,570 --> 00:20:45,429
least within the media server context

588
00:20:43,240 --> 00:20:48,940
prevents you from actually doing a fork

589
00:20:45,430 --> 00:20:50,470
x''k traditional shellcode you know you

590
00:20:48,940 --> 00:20:52,630
think Ben Sh you're going to actually

591
00:20:50,470 --> 00:20:53,110
execute Ben Sh connected to a socket and

592
00:20:52,630 --> 00:20:55,030
you're done

593
00:20:53,110 --> 00:20:57,330
that wouldn't work within the media

594
00:20:55,030 --> 00:20:59,980
server context because of the SQ linux

595
00:20:57,330 --> 00:21:02,050
restrictions so so Josh came up to me

596
00:20:59,980 --> 00:21:04,000
and said hey I have to combine this with

597
00:21:02,050 --> 00:21:05,770
a kernel exploit to make it work how do

598
00:21:04,000 --> 00:21:07,030
I could you help me out and build

599
00:21:05,770 --> 00:21:08,470
basically payload that would be able to

600
00:21:07,030 --> 00:21:10,210
do a lot of things but without ever

601
00:21:08,470 --> 00:21:12,220
having to fork or exit

602
00:21:10,210 --> 00:21:14,860
so we basically built this payload and I

603
00:21:12,220 --> 00:21:17,110
talked about a little bit that can be

604
00:21:14,860 --> 00:21:18,459
injected into a process and can do

605
00:21:17,110 --> 00:21:20,199
basically everything you might want to

606
00:21:18,460 --> 00:21:22,540
do within a payload whether it's you

607
00:21:20,200 --> 00:21:24,700
know looking at files taking pictures

608
00:21:22,540 --> 00:21:26,649
with the camera or whatever it's able to

609
00:21:24,700 --> 00:21:29,680
do all these things and it never Forks

610
00:21:26,650 --> 00:21:31,420
it never xyx it never even has to write

611
00:21:29,680 --> 00:21:32,680
the disk so there's actually some pretty

612
00:21:31,420 --> 00:21:35,080
cool stuff if you want to check out this

613
00:21:32,680 --> 00:21:37,000
talk here we go into a lot of detail on

614
00:21:35,080 --> 00:21:38,320
how that all works we even have a

615
00:21:37,000 --> 00:21:40,570
special tool chain that actually builds

616
00:21:38,320 --> 00:21:42,550
magical binaries that are what you call

617
00:21:40,570 --> 00:21:43,750
static PI binaries basically there's

618
00:21:42,550 --> 00:21:46,450
sort of a combination of a dynamic

619
00:21:43,750 --> 00:21:48,190
binary so it can be relocatable but it's

620
00:21:46,450 --> 00:21:49,750
also static in that it's fully self

621
00:21:48,190 --> 00:21:52,330
booting and doesn't have any external

622
00:21:49,750 --> 00:21:54,250
dependencies but that's something we

623
00:21:52,330 --> 00:21:55,689
actually got out this year it's not

624
00:21:54,250 --> 00:21:56,740
necessarily Metasploit five thing but

625
00:21:55,690 --> 00:21:59,770
it's something we hope to continue

626
00:21:56,740 --> 00:22:00,790
expanding in the future of course the

627
00:21:59,770 --> 00:22:03,580
other thing that we're working on is

628
00:22:00,790 --> 00:22:04,780
encrypting everything when you're a pin

629
00:22:03,580 --> 00:22:06,939
tester or you're in a red team or

630
00:22:04,780 --> 00:22:08,410
whatever you want to make sure that even

631
00:22:06,940 --> 00:22:09,940
though you're exploiting vulnerabilities

632
00:22:08,410 --> 00:22:13,060
are you finding weaknesses within your

633
00:22:09,940 --> 00:22:14,210
targets you don't want to yourself

634
00:22:13,060 --> 00:22:16,669
create more vulnerable

635
00:22:14,210 --> 00:22:19,820
you discover it's easy to be careless

636
00:22:16,670 --> 00:22:20,930
and and sort of lose data or you don't

637
00:22:19,820 --> 00:22:23,389
want someone to be able to pass these

638
00:22:20,930 --> 00:22:25,640
sniff it or basically transmitting

639
00:22:23,390 --> 00:22:28,010
things unencrypted so we basically done

640
00:22:25,640 --> 00:22:30,590
recently is we've added this idea of

641
00:22:28,010 --> 00:22:33,879
what called crypto V under the covers

642
00:22:30,590 --> 00:22:36,110
Metasploit interpreter uses a a

643
00:22:33,880 --> 00:22:38,540
transport protocol we call TLB that's

644
00:22:36,110 --> 00:22:41,030
short for type length of a value a kind

645
00:22:38,540 --> 00:22:44,060
of a boring name but the basic idea here

646
00:22:41,030 --> 00:22:46,040
is that everything you say to mentor

647
00:22:44,060 --> 00:22:47,750
Peter sessions or that they respond to

648
00:22:46,040 --> 00:22:49,879
all have the same sort of unified

649
00:22:47,750 --> 00:22:53,390
packetized response normally these

650
00:22:49,880 --> 00:22:55,130
packets are unencrypted what we've

651
00:22:53,390 --> 00:22:57,260
basically done in the most recent

652
00:22:55,130 --> 00:22:59,290
revisions is rather than relying on the

653
00:22:57,260 --> 00:23:02,390
outer transport whether it's HTTPS or

654
00:22:59,290 --> 00:23:04,310
reverse TCP using TLS we've basically

655
00:23:02,390 --> 00:23:06,110
added application level encryption

656
00:23:04,310 --> 00:23:06,950
support so basically the very first

657
00:23:06,110 --> 00:23:08,389
thing now that happens with the

658
00:23:06,950 --> 00:23:11,060
meterpreter session is that there's

659
00:23:08,390 --> 00:23:12,770
actually a key exchange at the

660
00:23:11,060 --> 00:23:14,060
application level and then this can

661
00:23:12,770 --> 00:23:15,950
actually be layered on top of multiple

662
00:23:14,060 --> 00:23:18,350
layer on other encryption as well so you

663
00:23:15,950 --> 00:23:20,590
can basically do application level key

664
00:23:18,350 --> 00:23:23,600
exchange plus aes-256

665
00:23:20,590 --> 00:23:25,790
and then on top of that you can tell

666
00:23:23,600 --> 00:23:27,139
that over at TLS or whatever but the

667
00:23:25,790 --> 00:23:28,879
idea here is that no matter what your

668
00:23:27,140 --> 00:23:31,730
underlying transport protocol is whether

669
00:23:28,880 --> 00:23:33,740
it's plaintext or not you will still

670
00:23:31,730 --> 00:23:35,390
have that sort of confidentiality in

671
00:23:33,740 --> 00:23:38,330
that encryption support built in to

672
00:23:35,390 --> 00:23:39,860
meterpreter sessions and you can if you

673
00:23:38,330 --> 00:23:42,350
check out the pr up here it's pull

674
00:23:39,860 --> 00:23:44,090
request number 86 25 it's got about I

675
00:23:42,350 --> 00:23:46,040
don't know 20 pages of description about

676
00:23:44,090 --> 00:23:47,959
how it works where the caveats and that

677
00:23:46,040 --> 00:23:49,430
sort of thing the other kind of cool

678
00:23:47,960 --> 00:23:52,130
thing here is that we no longer rely on

679
00:23:49,430 --> 00:23:54,290
open ssl within meterpreter payloads we

680
00:23:52,130 --> 00:23:55,430
used to actually bundle it in because we

681
00:23:54,290 --> 00:23:57,080
weren't necessarily able to guarantee

682
00:23:55,430 --> 00:23:58,390
that we would have all the low-level

683
00:23:57,080 --> 00:24:00,830
primitives we need to do TLS encryption

684
00:23:58,390 --> 00:24:01,940
since we're actually kind of rolling our

685
00:24:00,830 --> 00:24:03,500
own encryption not necessary a good

686
00:24:01,940 --> 00:24:06,170
thing but it's kind of the best thing at

687
00:24:03,500 --> 00:24:07,940
the moment for for our use case it also

688
00:24:06,170 --> 00:24:09,350
reduced the size of our Metasploit

689
00:24:07,940 --> 00:24:12,140
payloads or at least windows meterpreter

690
00:24:09,350 --> 00:24:14,689
by 5 times so rather than being a

691
00:24:12,140 --> 00:24:18,470
megabyte I think it's about 150 to 200 K

692
00:24:14,690 --> 00:24:19,730
so pretty cool improvements there pivot

693
00:24:18,470 --> 00:24:21,500
everywhere

694
00:24:19,730 --> 00:24:23,780
traditionally Metasploit payloads have

695
00:24:21,500 --> 00:24:24,840
basically been defined what we call a

696
00:24:23,780 --> 00:24:27,090
session

697
00:24:24,840 --> 00:24:29,459
a connection from point to point so

698
00:24:27,090 --> 00:24:32,370
basically if a TCP connection comes in

699
00:24:29,460 --> 00:24:33,630
that's a single session if you want to

700
00:24:32,370 --> 00:24:35,668
pivot a session which basically means

701
00:24:33,630 --> 00:24:37,770
how do I move from one session to

702
00:24:35,669 --> 00:24:39,000
another session within a network you had

703
00:24:37,770 --> 00:24:41,039
to create what's called a network tunnel

704
00:24:39,000 --> 00:24:42,750
so you'd sort of tunnel that TCP

705
00:24:41,039 --> 00:24:44,279
connection over another TCP connection

706
00:24:42,750 --> 00:24:45,480
if you wanted to tunnel a second time

707
00:24:44,279 --> 00:24:46,919
you'd have to tunnel another TCP

708
00:24:45,480 --> 00:24:49,710
connection over a TCP connection over a

709
00:24:46,919 --> 00:24:53,130
TCP connection and each tunnel would

710
00:24:49,710 --> 00:24:54,750
also independently act and each packet

711
00:24:53,130 --> 00:24:56,340
that goes across the network what this

712
00:24:54,750 --> 00:24:57,870
basically meant was we had a sort of

713
00:24:56,340 --> 00:24:59,639
it's either a geometric or an

714
00:24:57,870 --> 00:25:01,289
exponential increase in the number of

715
00:24:59,640 --> 00:25:03,870
packets sent for each hop that you made

716
00:25:01,289 --> 00:25:05,340
it also meant that if you lost a TCP

717
00:25:03,870 --> 00:25:07,260
connection you'll lose your session you

718
00:25:05,340 --> 00:25:08,668
lose all sort of accounting for it and

719
00:25:07,260 --> 00:25:10,740
this wasn't necessarily good situation

720
00:25:08,669 --> 00:25:14,630
so what we've done is we've actually

721
00:25:10,740 --> 00:25:16,919
made it so that sessions can be pivoted

722
00:25:14,630 --> 00:25:18,809
we basically added enough session

723
00:25:16,919 --> 00:25:20,220
identifier information to the low level

724
00:25:18,809 --> 00:25:21,539
packets the low level messages to go

725
00:25:20,220 --> 00:25:23,340
across that they can actually be

726
00:25:21,539 --> 00:25:25,679
tunneled directly rather than over 80

727
00:25:23,340 --> 00:25:27,000
requiring a specific TCP connection or

728
00:25:25,679 --> 00:25:30,000
some sort of other network connection to

729
00:25:27,000 --> 00:25:32,730
identify them uniquely one kind of neat

730
00:25:30,000 --> 00:25:34,799
side effect of this and this is semi

731
00:25:32,730 --> 00:25:37,110
intentional I'm sorry this is a again

732
00:25:34,799 --> 00:25:39,000
kind of a low-quality screenshot here

733
00:25:37,110 --> 00:25:41,639
but we can actually tunnel over things

734
00:25:39,000 --> 00:25:45,450
that are not tcp now for instance this

735
00:25:41,640 --> 00:25:47,850
sector just landed two days ago but this

736
00:25:45,450 --> 00:25:50,460
is a named pipe session so basically the

737
00:25:47,850 --> 00:25:53,309
idea here is that we've got a a box on

738
00:25:50,460 --> 00:25:55,350
the edge of a network that has a reverse

739
00:25:53,309 --> 00:25:58,139
HTTP connection back to Metasploit and

740
00:25:55,350 --> 00:26:00,779
then from that point you can actually

741
00:25:58,140 --> 00:26:02,220
pivot into other boxes with the network

742
00:26:00,779 --> 00:26:06,029
not using TCP

743
00:26:02,220 --> 00:26:08,340
but using like say s and B or using in

744
00:26:06,029 --> 00:26:09,960
this case we're using a named pipe which

745
00:26:08,340 --> 00:26:12,389
is kind of normal traffic that you'd

746
00:26:09,960 --> 00:26:14,700
expect to see on a Windows network and

747
00:26:12,390 --> 00:26:16,289
so it won't look nearly as weird and

748
00:26:14,700 --> 00:26:17,549
it's using basically all the same

749
00:26:16,289 --> 00:26:20,129
low-level primitives that you'd expect

750
00:26:17,549 --> 00:26:23,279
out of Windows so this is actually an

751
00:26:20,130 --> 00:26:26,130
example of four different materials

752
00:26:23,279 --> 00:26:29,100
being tunneled over a single one with no

753
00:26:26,130 --> 00:26:31,860
extra latency and no extra delay due to

754
00:26:29,100 --> 00:26:33,719
extra tunneling encapsulation so it's

755
00:26:31,860 --> 00:26:35,520
some pretty neat stuff we've been

756
00:26:33,720 --> 00:26:37,679
working on actually over a year to get

757
00:26:35,520 --> 00:26:38,580
all the parameters built in but now that

758
00:26:37,679 --> 00:26:41,700
it's finally a

759
00:26:38,580 --> 00:26:42,960
gonna be really a kind of other people

760
00:26:41,700 --> 00:26:44,340
have done this sort of technique before

761
00:26:42,960 --> 00:26:45,360
but it's the first time we've had it in

762
00:26:44,340 --> 00:26:46,889
Metasploit so I think it's gonna be

763
00:26:45,360 --> 00:26:50,219
really interesting for her pen testers

764
00:26:46,890 --> 00:26:54,210
and red teamers to use extending and

765
00:26:50,220 --> 00:26:59,250
expanding so while a lot of these cool

766
00:26:54,210 --> 00:27:01,080
things are interesting we sort of have a

767
00:26:59,250 --> 00:27:03,809
problem with Metasploit it's not a huge

768
00:27:01,080 --> 00:27:04,320
problem but Mensa plays open source

769
00:27:03,809 --> 00:27:06,240
software

770
00:27:04,320 --> 00:27:09,480
it's basically under like a three clause

771
00:27:06,240 --> 00:27:11,070
BSD license but sometimes we want to use

772
00:27:09,480 --> 00:27:12,029
other software at the same time with

773
00:27:11,070 --> 00:27:15,389
Metasploit and

774
00:27:12,029 --> 00:27:17,820
the bsd license needs to stay bsd but

775
00:27:15,389 --> 00:27:20,490
sometimes we see other software like GPL

776
00:27:17,820 --> 00:27:22,500
or Apache or something that may not be

777
00:27:20,490 --> 00:27:25,019
as compatible as you want the question

778
00:27:22,500 --> 00:27:26,820
is how do we possibly use other sort of

779
00:27:25,019 --> 00:27:28,559
software with Metasploit without sort of

780
00:27:26,820 --> 00:27:30,299
violating license terms or sort of

781
00:27:28,559 --> 00:27:32,668
breaking the spirit of what people want

782
00:27:30,299 --> 00:27:33,570
there's however to be used for the

783
00:27:32,669 --> 00:27:35,519
reason why this is kind of interesting

784
00:27:33,570 --> 00:27:36,840
is because actually came up fairly

785
00:27:35,519 --> 00:27:39,600
recently is we wanted to be able to play

786
00:27:36,840 --> 00:27:41,580
sounds through through Linux and you

787
00:27:39,600 --> 00:27:43,139
think that was easy but it turns out

788
00:27:41,580 --> 00:27:45,990
Linux has had about five or six

789
00:27:43,139 --> 00:27:47,279
different audio api's over the years so

790
00:27:45,990 --> 00:27:48,750
supporting a lot of these all these

791
00:27:47,279 --> 00:27:50,580
api's directly especially when you want

792
00:27:48,750 --> 00:27:51,809
to target serve in a general sense a lot

793
00:27:50,580 --> 00:27:53,490
of different Linux distributions and a

794
00:27:51,809 --> 00:27:55,019
lot of different embedded devices can be

795
00:27:53,490 --> 00:27:56,220
difficult but there are some nice

796
00:27:55,019 --> 00:27:59,549
libraries out there that actually let

797
00:27:56,220 --> 00:28:01,380
you do it but those libraries are GPL so

798
00:27:59,549 --> 00:28:02,820
question is how would you possibly use

799
00:28:01,380 --> 00:28:07,200
some of these things to our advantage

800
00:28:02,820 --> 00:28:08,279
other issues are sometimes we want to be

801
00:28:07,200 --> 00:28:09,600
able to target different api's

802
00:28:08,279 --> 00:28:11,460
especially when it comes in the embedded

803
00:28:09,600 --> 00:28:13,139
space you might have two or three

804
00:28:11,460 --> 00:28:15,570
different C libraries that are actually

805
00:28:13,139 --> 00:28:18,539
in use yet G Lib C you have muscle you

806
00:28:15,570 --> 00:28:19,918
have in micro Lipsy I think there's

807
00:28:18,539 --> 00:28:21,629
probably a couple others that are

808
00:28:19,919 --> 00:28:23,909
available for Linux so just because

809
00:28:21,630 --> 00:28:25,200
you've targeted Linux G Lipsy doesn't

810
00:28:23,909 --> 00:28:27,200
mean you work everywhere so the question

811
00:28:25,200 --> 00:28:30,240
is how do we sort of bridge that gap

812
00:28:27,200 --> 00:28:32,340
well we've come up with is basically the

813
00:28:30,240 --> 00:28:34,559
idea of being able to extend Metasploit

814
00:28:32,340 --> 00:28:37,620
with extensions written against

815
00:28:34,559 --> 00:28:38,850
different Lib CA bis and not just

816
00:28:37,620 --> 00:28:40,110
different Lib C API is but we can

817
00:28:38,850 --> 00:28:41,789
actually sort of cross a license

818
00:28:40,110 --> 00:28:43,439
boundary by being able to build

819
00:28:41,789 --> 00:28:46,080
extensions that are running as child

820
00:28:43,440 --> 00:28:48,450
processes rather than invent it into

821
00:28:46,080 --> 00:28:49,620
memory what this basically means is now

822
00:28:48,450 --> 00:28:51,240
we can actually have a hybrid approach

823
00:28:49,620 --> 00:28:51,689
where we can have a single process or at

824
00:28:51,240 --> 00:28:53,759
least

825
00:28:51,690 --> 00:28:56,490
single tria processes that can talk both

826
00:28:53,759 --> 00:28:57,600
to the native system Lipsey's so like

827
00:28:56,490 --> 00:28:59,460
for instance say you want to talk to

828
00:28:57,600 --> 00:29:00,750
d-bus on a local linux system and sort

829
00:28:59,460 --> 00:29:03,269
of you know snip what traffic's going on

830
00:29:00,750 --> 00:29:06,750
there you could talk to g Lipsy talk to

831
00:29:03,269 --> 00:29:09,059
d bus over a extension based on an

832
00:29:06,750 --> 00:29:13,320
intern injected process that's using

833
00:29:09,059 --> 00:29:15,418
metal and and metal I first mentioned is

834
00:29:13,320 --> 00:29:17,370
actually the embedded payload that we

835
00:29:15,419 --> 00:29:20,159
worked on and it's talked about a lot in

836
00:29:17,370 --> 00:29:21,120
that no account presentation and then of

837
00:29:20,159 --> 00:29:22,950
course you can tunnel that back to the

838
00:29:21,120 --> 00:29:24,658
Metasploit console so there's a lot of

839
00:29:22,950 --> 00:29:26,220
really cool stuff here this one isn't

840
00:29:24,659 --> 00:29:28,169
actually out in public but we should

841
00:29:26,220 --> 00:29:29,490
have it out pretty soon and I think it's

842
00:29:28,169 --> 00:29:31,649
going to be a kind of a really

843
00:29:29,490 --> 00:29:34,559
interesting game changer as far as how

844
00:29:31,649 --> 00:29:36,479
people are able to make use of different

845
00:29:34,559 --> 00:29:37,918
libraries and sort of extending what we

846
00:29:36,480 --> 00:29:42,620
can do from a post exploitation point of

847
00:29:37,919 --> 00:29:45,509
view that's all I have right now we're

848
00:29:42,620 --> 00:29:47,879
14 seconds over so if anyone has any

849
00:29:45,509 --> 00:29:49,379
questions I'm free to take them this is

850
00:29:47,879 --> 00:29:51,389
our last presentation of the day I

851
00:29:49,379 --> 00:29:53,908
believe so you're free of course go to

852
00:29:51,389 --> 00:29:56,969
lunch and everything else but I really

853
00:29:53,909 --> 00:30:06,149
appreciate your time and that's it

854
00:29:56,970 --> 00:30:08,690
so any questions anybody all right cool

855
00:30:06,149 --> 00:30:08,689
well thanks everyone

