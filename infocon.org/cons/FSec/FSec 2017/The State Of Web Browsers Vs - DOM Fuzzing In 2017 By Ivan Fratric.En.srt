1
00:00:02,790 --> 00:00:13,510
thank you thank you so hi I'm Yvonne I

2
00:00:09,850 --> 00:00:15,910
work at Google project zero we do

3
00:00:13,510 --> 00:00:19,150
security research we try to make

4
00:00:15,910 --> 00:00:20,890
zero-day attacks hard now I don't want

5
00:00:19,150 --> 00:00:24,459
to be talking too much about myself

6
00:00:20,890 --> 00:00:28,539
today but if you wanted to know more

7
00:00:24,460 --> 00:00:30,400
about what I do or if perhaps you'd like

8
00:00:28,539 --> 00:00:31,990
to start doing security research but you

9
00:00:30,400 --> 00:00:37,239
don't know how feel free to talk to me

10
00:00:31,990 --> 00:00:40,750
after the after the talk so now let's

11
00:00:37,239 --> 00:00:42,820
talk about web browser security and

12
00:00:40,750 --> 00:00:44,800
before I get started I have a bit of a

13
00:00:42,820 --> 00:00:46,540
confession to make and that is that the

14
00:00:44,800 --> 00:00:49,239
techniques presented in this talk are

15
00:00:46,540 --> 00:00:53,379
not going to be anything new they are in

16
00:00:49,239 --> 00:00:54,849
fact quite old and quite well known but

17
00:00:53,379 --> 00:00:59,949
in my defense that that is kind of the

18
00:00:54,850 --> 00:01:04,629
point of this talk to take to take an

19
00:00:59,949 --> 00:01:06,039
old and end well known bug hunting

20
00:01:04,629 --> 00:01:11,110
technique which is the dumb fuzzing and

21
00:01:06,039 --> 00:01:15,540
see if we can still find good bugs with

22
00:01:11,110 --> 00:01:19,869
it in the model in the modern browsers

23
00:01:15,540 --> 00:01:21,820
so so so while the technique techniques

24
00:01:19,869 --> 00:01:23,680
themselves are going to be old the

25
00:01:21,820 --> 00:01:26,229
issues you're going to see in this

26
00:01:23,680 --> 00:01:28,900
presentation are going to be real issues

27
00:01:26,229 --> 00:01:32,679
affecting real browsers that are being

28
00:01:28,900 --> 00:01:35,439
used today so right so let's talk about

29
00:01:32,680 --> 00:01:37,150
web browser security and why would we

30
00:01:35,439 --> 00:01:39,339
talk about web browser security at all

31
00:01:37,150 --> 00:01:42,909
specifically why would we talk about web

32
00:01:39,340 --> 00:01:46,060
browser zero-days well one possible

33
00:01:42,909 --> 00:01:49,540
reason why is because if you make

34
00:01:46,060 --> 00:01:51,250
yourself or your organization a target

35
00:01:49,540 --> 00:01:53,649
interesting enough for advanced

36
00:01:51,250 --> 00:01:55,180
attackers well then there is a good

37
00:01:53,649 --> 00:02:00,700
chance you're going to get owned by a

38
00:01:55,180 --> 00:02:02,829
browser vulnerability and of course

39
00:02:00,700 --> 00:02:06,159
that's not science fiction we've seen

40
00:02:02,829 --> 00:02:08,228
that happen in the wild so I have a

41
00:02:06,159 --> 00:02:10,780
couple of examples here so for example

42
00:02:08,229 --> 00:02:13,060
we've seen a mobile safari vulnerability

43
00:02:10,780 --> 00:02:16,330
being used against a human rights

44
00:02:13,060 --> 00:02:18,730
activist we've seen fire

45
00:02:16,330 --> 00:02:21,720
but being used against or browser users

46
00:02:18,730 --> 00:02:23,859
we've seen several internet explorer

47
00:02:21,720 --> 00:02:25,870
vulnerabilities being used in targeted

48
00:02:23,860 --> 00:02:27,820
attacks and these are just from from

49
00:02:25,870 --> 00:02:30,220
from the last year or so and these are

50
00:02:27,820 --> 00:02:32,890
just the ones that we actually know

51
00:02:30,220 --> 00:02:34,990
about so in fact what we might be

52
00:02:32,890 --> 00:02:38,529
looking at here is just the tip of the

53
00:02:34,990 --> 00:02:42,250
iceberg so right now let's look at this

54
00:02:38,530 --> 00:02:46,000
at the specific part of web browsers

55
00:02:42,250 --> 00:02:50,380
which is done so what is done well Dom

56
00:02:46,000 --> 00:02:52,660
is is w3c standard which defines a set

57
00:02:50,380 --> 00:02:54,820
of objects that the browser's need need

58
00:02:52,660 --> 00:02:57,220
to implement so if you take if you take

59
00:02:54,820 --> 00:02:59,890
a look at the slide here you're going to

60
00:02:57,220 --> 00:03:01,600
see some of the objects on the in the

61
00:02:59,890 --> 00:03:04,269
image iffy and if you know anything

62
00:03:01,600 --> 00:03:07,450
about HTML then these objects shouldn't

63
00:03:04,270 --> 00:03:10,930
be anything new to you so these are like

64
00:03:07,450 --> 00:03:14,290
your standard HTML elements but the Dom

65
00:03:10,930 --> 00:03:15,730
doesn't really define only those types

66
00:03:14,290 --> 00:03:18,970
of objects there are very various other

67
00:03:15,730 --> 00:03:21,880
types of Dom objects such as attribute

68
00:03:18,970 --> 00:03:26,050
nodes style sheets event no Eve event

69
00:03:21,880 --> 00:03:28,540
objects etc and besides just defining

70
00:03:26,050 --> 00:03:30,250
the objects themselves the Dom also

71
00:03:28,540 --> 00:03:33,190
defines how these objects may be

72
00:03:30,250 --> 00:03:35,620
scripted so at the bottom of the slide

73
00:03:33,190 --> 00:03:38,680
here you have you have a simple example

74
00:03:35,620 --> 00:03:41,290
where we are essentially generating a

75
00:03:38,680 --> 00:03:47,050
new element and then assigning a

76
00:03:41,290 --> 00:03:51,430
property to it right so each browser

77
00:03:47,050 --> 00:03:53,440
basically needs to basically needs to

78
00:03:51,430 --> 00:03:55,989
have a component that implements all of

79
00:03:53,440 --> 00:03:59,140
these Dom objects together with their

80
00:03:55,989 --> 00:04:02,620
properties and methods and this

81
00:03:59,140 --> 00:04:05,380
component of of the browser is called a

82
00:04:02,620 --> 00:04:07,959
Dom engine and historically don't

83
00:04:05,380 --> 00:04:11,530
engines have been a great source of

84
00:04:07,959 --> 00:04:12,940
browser vulnerabilities and that is of

85
00:04:11,530 --> 00:04:14,260
course not to say that they have been

86
00:04:12,940 --> 00:04:16,060
the only source of web browser

87
00:04:14,260 --> 00:04:19,418
vulnerabilities in fact there have been

88
00:04:16,060 --> 00:04:23,470
many others such as plugins scripting

89
00:04:19,418 --> 00:04:24,849
engines etc so keep that in mind

90
00:04:23,470 --> 00:04:26,650
throughout it throughout this

91
00:04:24,850 --> 00:04:28,600
presentation that did you want to really

92
00:04:26,650 --> 00:04:30,169
get the whole picture of a browser

93
00:04:28,600 --> 00:04:35,300
security are going to

94
00:04:30,169 --> 00:04:37,849
get only information about a part of it

95
00:04:35,300 --> 00:04:39,830
so in fact you might not see that the

96
00:04:37,849 --> 00:04:41,870
whole elephant you might see a

97
00:04:39,830 --> 00:04:44,628
significant part of the elephant

98
00:04:41,870 --> 00:04:50,569
perhaps a trunk but not the whole

99
00:04:44,629 --> 00:04:52,879
elephant right so how do these dumb

100
00:04:50,569 --> 00:04:55,310
vulnerabilities actually look like and

101
00:04:52,879 --> 00:04:58,430
here I have a small example which is a

102
00:04:55,310 --> 00:05:00,860
code that that triggers the triggers the

103
00:04:58,430 --> 00:05:06,560
bug that was used against tor browser

104
00:05:00,860 --> 00:05:10,129
users and we won't be going into the

105
00:05:06,560 --> 00:05:11,810
details of off of the vulnerability here

106
00:05:10,129 --> 00:05:14,870
but what I want to draw your attention

107
00:05:11,810 --> 00:05:17,120
to is the general structure of the

108
00:05:14,870 --> 00:05:19,789
sample that triggers the bug so as you

109
00:05:17,120 --> 00:05:22,909
can see here we have a snippet of HTML

110
00:05:19,789 --> 00:05:25,639
code in this case it has an embedded SVG

111
00:05:22,909 --> 00:05:29,599
image in it there is also some

112
00:05:25,639 --> 00:05:35,810
JavaScript code in the one click Handler

113
00:05:29,599 --> 00:05:37,909
and and so this is typically the general

114
00:05:35,810 --> 00:05:39,919
structure of these samples that the

115
00:05:37,909 --> 00:05:42,080
trigger don't warm up well nerble it is

116
00:05:39,919 --> 00:05:45,169
you have you have some HTML code you

117
00:05:42,080 --> 00:05:47,029
have some JavaScript code and in some

118
00:05:45,169 --> 00:05:52,180
cases you also have some CSS code and

119
00:05:47,029 --> 00:05:55,750
none of this is is is actually malformed

120
00:05:52,180 --> 00:05:59,240
it's actually for the most part correct

121
00:05:55,750 --> 00:06:02,449
but it is put together in such a way

122
00:05:59,240 --> 00:06:04,580
that you wouldn't commonly see on a web

123
00:06:02,449 --> 00:06:07,129
page so when we are talking about Dom

124
00:06:04,580 --> 00:06:09,139
fuzzing we're essentially talking about

125
00:06:07,129 --> 00:06:13,659
creating samples such as this that that

126
00:06:09,139 --> 00:06:17,210
create random snippets off of HTML

127
00:06:13,659 --> 00:06:19,759
Javascript and CSS code that isn't

128
00:06:17,210 --> 00:06:22,188
syntactically correct for the most part

129
00:06:19,759 --> 00:06:23,870
also semantically correct but are not

130
00:06:22,189 --> 00:06:29,389
something that you would commonly see in

131
00:06:23,870 --> 00:06:31,550
a web page so how do we do that well my

132
00:06:29,389 --> 00:06:33,860
general approach to fuzzing is to

133
00:06:31,550 --> 00:06:37,310
essentially always create my own father

134
00:06:33,860 --> 00:06:39,500
and that might seem counterintuitive at

135
00:06:37,310 --> 00:06:42,110
first but whenever I create my own

136
00:06:39,500 --> 00:06:42,590
father I'm going to I'm going to do

137
00:06:42,110 --> 00:06:44,540
something

138
00:06:42,590 --> 00:06:46,729
different that then what is already out

139
00:06:44,540 --> 00:06:49,040
there and it might be a very small thing

140
00:06:46,730 --> 00:06:50,660
but that very very small thing might

141
00:06:49,040 --> 00:06:53,240
have a butterfly effect which might

142
00:06:50,660 --> 00:06:55,910
which might cause my father to generate

143
00:06:53,240 --> 00:07:00,170
certain samples with with greater

144
00:06:55,910 --> 00:07:02,840
probability and enable my father to to

145
00:07:00,170 --> 00:07:05,540
discover bugs that other fathers might

146
00:07:02,840 --> 00:07:07,789
have overlooked or it might happen that

147
00:07:05,540 --> 00:07:14,060
I just just like writing father's so

148
00:07:07,790 --> 00:07:16,400
yeah pick the actual reason so for this

149
00:07:14,060 --> 00:07:18,140
project for this piece of research I

150
00:07:16,400 --> 00:07:22,219
created a new phaser which we called

151
00:07:18,140 --> 00:07:23,930
tomato and it is generation based which

152
00:07:22,220 --> 00:07:26,150
means that it always generates a new

153
00:07:23,930 --> 00:07:29,270
sample from scratch and it is also

154
00:07:26,150 --> 00:07:31,520
grammar based which means that it

155
00:07:29,270 --> 00:07:34,820
generates the sample based on a set of

156
00:07:31,520 --> 00:07:38,570
grammars so here you have a small

157
00:07:34,820 --> 00:07:42,409
example simplified example of of a CSS

158
00:07:38,570 --> 00:07:46,790
grammar that well generates CSS code and

159
00:07:42,410 --> 00:07:50,810
and so if you are familiar with with CSS

160
00:07:46,790 --> 00:07:53,510
this should be fairly readable so CSS is

161
00:07:50,810 --> 00:07:58,460
basically CSS code basically consists of

162
00:07:53,510 --> 00:08:01,400
a set of rules and each rule contains a

163
00:07:58,460 --> 00:08:04,010
selector part followed by a declaration

164
00:08:01,400 --> 00:08:06,500
part enclosed in in curly brackets and

165
00:08:04,010 --> 00:08:09,500
then the selector part can can refer to

166
00:08:06,500 --> 00:08:11,690
various HTML elements such as anchor

167
00:08:09,500 --> 00:08:14,450
element or an audio element and the

168
00:08:11,690 --> 00:08:17,480
declaration part consists of a list of

169
00:08:14,450 --> 00:08:19,039
properties and these properties can be

170
00:08:17,480 --> 00:08:21,020
for example background property or

171
00:08:19,040 --> 00:08:24,440
border property and each of them have

172
00:08:21,020 --> 00:08:26,240
their return values so I think the

173
00:08:24,440 --> 00:08:29,420
grammar syntax here should be should be

174
00:08:26,240 --> 00:08:31,250
rather straightforward to read so you

175
00:08:29,420 --> 00:08:34,789
have a set of symbols which I enclosed

176
00:08:31,250 --> 00:08:37,460
in an angle in angle brackets and you

177
00:08:34,789 --> 00:08:40,429
diffuse you tell the father how each of

178
00:08:37,460 --> 00:08:42,920
these symbols may be expanded and one

179
00:08:40,429 --> 00:08:45,530
symbol can can of course include other

180
00:08:42,919 --> 00:08:47,449
symbols in its rules and then those

181
00:08:45,530 --> 00:08:50,030
symbols are basically expanded

182
00:08:47,450 --> 00:08:52,430
recursively

183
00:08:50,030 --> 00:08:55,520
so I showed you a CSS example can be

184
00:08:52,430 --> 00:08:57,410
used the same technique to generate HTML

185
00:08:55,520 --> 00:09:02,840
well yes

186
00:08:57,410 --> 00:09:07,370
only minor minor quirk here is that the

187
00:09:02,840 --> 00:09:09,170
time using angle brackets as as kind of

188
00:09:07,370 --> 00:09:12,530
characters that that have a special

189
00:09:09,170 --> 00:09:15,770
special meaning in the context of my

190
00:09:12,530 --> 00:09:19,069
grammar syntax in HTML does as well so

191
00:09:15,770 --> 00:09:20,650
we need to we need to escape them so in

192
00:09:19,070 --> 00:09:23,840
this case you'll notice that I'm using

193
00:09:20,650 --> 00:09:26,420
alt + GT symbols and these are built in

194
00:09:23,840 --> 00:09:30,230
into the phaser and they evaluate to

195
00:09:26,420 --> 00:09:33,829
greater than and less than and greater

196
00:09:30,230 --> 00:09:36,230
than character respectively and these

197
00:09:33,830 --> 00:09:38,000
are just some of the the built in

198
00:09:36,230 --> 00:09:41,840
symbols there are there are others as

199
00:09:38,000 --> 00:09:44,990
well and interestingly enough we can use

200
00:09:41,840 --> 00:09:47,540
pretty much the same basic principle to

201
00:09:44,990 --> 00:09:52,930
to generate programming language code as

202
00:09:47,540 --> 00:09:57,050
well so how do we do that well we

203
00:09:52,930 --> 00:09:59,150
essentially tell the father hey now I'm

204
00:09:57,050 --> 00:10:02,589
going to write programming language

205
00:09:59,150 --> 00:10:05,120
lines and I'm going to win I'm going to

206
00:10:02,589 --> 00:10:08,380
to write them between the between lines

207
00:10:05,120 --> 00:10:11,210
and then line statement and then

208
00:10:08,380 --> 00:10:14,000
anything in between can be potentially

209
00:10:11,210 --> 00:10:16,040
output bided by the father as a

210
00:10:14,000 --> 00:10:20,020
programming language line the father is

211
00:10:16,040 --> 00:10:25,510
going to select one line and at random

212
00:10:20,020 --> 00:10:29,360
more or less and and and fill it out and

213
00:10:25,510 --> 00:10:31,339
one other addition here is you can see

214
00:10:29,360 --> 00:10:33,680
that some of the symbols have a new

215
00:10:31,339 --> 00:10:36,260
attribute in them and that essentially

216
00:10:33,680 --> 00:10:38,689
instructed instructs the father hey

217
00:10:36,260 --> 00:10:41,210
instead of instead of generate

218
00:10:38,690 --> 00:10:44,900
generating as a symbol of the specified

219
00:10:41,210 --> 00:10:48,080
type instead just create a variable of

220
00:10:44,900 --> 00:10:50,390
the specified type here and then that

221
00:10:48,080 --> 00:10:52,490
variable can be included in subsequent

222
00:10:50,390 --> 00:10:54,890
programming language lines and one

223
00:10:52,490 --> 00:10:58,630
variable can be included in mode in

224
00:10:54,890 --> 00:11:02,300
multiple language lines afterwards which

225
00:10:58,630 --> 00:11:06,970
contributes to to generating more

226
00:11:02,300 --> 00:11:09,709
interesting samples so as you've seen

227
00:11:06,970 --> 00:11:12,740
grammars are kind of big part of my

228
00:11:09,709 --> 00:11:15,170
father so how do we actually create

229
00:11:12,740 --> 00:11:16,940
those grammars well in the past I've

230
00:11:15,170 --> 00:11:20,199
experimented with various approaches

231
00:11:16,940 --> 00:11:22,940
such as manually just writing them or

232
00:11:20,200 --> 00:11:25,310
automatically extracting them but for

233
00:11:22,940 --> 00:11:27,800
this particular project I use the hybrid

234
00:11:25,310 --> 00:11:29,119
approach where I started with the set of

235
00:11:27,800 --> 00:11:32,780
grammars that were automatically

236
00:11:29,120 --> 00:11:34,970
extracted so for example from chrome

237
00:11:32,780 --> 00:11:37,670
ideal file files which contains

238
00:11:34,970 --> 00:11:41,450
information about JavaScript interfaces

239
00:11:37,670 --> 00:11:45,979
and from chrome layout tests which from

240
00:11:41,450 --> 00:11:49,190
which I extracted HTML properties CSS

241
00:11:45,980 --> 00:11:51,530
properties and s which is proper yes SVG

242
00:11:49,190 --> 00:11:53,510
properties as well so I started with

243
00:11:51,530 --> 00:11:55,790
this automatically extracted set of

244
00:11:53,510 --> 00:11:58,100
grammars but then I did manual pass over

245
00:11:55,790 --> 00:12:02,660
them to try to improve them as much as I

246
00:11:58,100 --> 00:12:05,810
can and one one example where this kind

247
00:12:02,660 --> 00:12:07,520
of makes sense is is given here so for

248
00:12:05,810 --> 00:12:09,739
example an automatically extracted

249
00:12:07,520 --> 00:12:13,370
grammar might tell you that HTML input

250
00:12:09,740 --> 00:12:16,670
element has property has a type property

251
00:12:13,370 --> 00:12:19,459
which takes a string but not any random

252
00:12:16,670 --> 00:12:22,780
string makes sense in the context of

253
00:12:19,459 --> 00:12:25,369
this property that there are in fact a

254
00:12:22,780 --> 00:12:27,890
limited limited number of strings which

255
00:12:25,370 --> 00:12:30,920
which makes sense in this context so

256
00:12:27,890 --> 00:12:33,020
that's one example where we're an

257
00:12:30,920 --> 00:12:39,439
automatically extracted grammar might

258
00:12:33,020 --> 00:12:41,480
need improvement and we're not quite

259
00:12:39,440 --> 00:12:43,280
done here there are not a number of

260
00:12:41,480 --> 00:12:45,860
other features that don't father needs

261
00:12:43,280 --> 00:12:48,339
to need to support in this day and age

262
00:12:45,860 --> 00:12:51,620
to be able to find interesting samples

263
00:12:48,339 --> 00:12:54,800
but I won't be going into into each one

264
00:12:51,620 --> 00:12:56,870
of these in detail instead I'm going to

265
00:12:54,800 --> 00:13:00,170
share the good news with you today and

266
00:12:56,870 --> 00:13:02,390
that is that this father is in the

267
00:13:00,170 --> 00:13:04,430
process of being open source it should

268
00:13:02,390 --> 00:13:06,170
be open source really soon I'm aiming

269
00:13:04,430 --> 00:13:08,719
for next week but I can't make any

270
00:13:06,170 --> 00:13:11,360
promises but in any case it's going to

271
00:13:08,720 --> 00:13:13,490
be it's going to be open source fairly

272
00:13:11,360 --> 00:13:14,900
soon and then you would be able to play

273
00:13:13,490 --> 00:13:21,820
with it

274
00:13:14,900 --> 00:13:26,270
modify it as you see fit so how do the

275
00:13:21,820 --> 00:13:28,190
how do the the the samples generated by

276
00:13:26,270 --> 00:13:30,290
my father actually look like visually

277
00:13:28,190 --> 00:13:32,840
well in most cases they don't look like

278
00:13:30,290 --> 00:13:36,140
much I have to admit but it's in some

279
00:13:32,840 --> 00:13:38,450
cases they they they produce samples

280
00:13:36,140 --> 00:13:41,630
that are quite visually appealing once

281
00:13:38,450 --> 00:13:44,210
rendered in the browser so well I guess

282
00:13:41,630 --> 00:13:47,150
if my career in information security

283
00:13:44,210 --> 00:13:51,550
ever fails I might try to frame one of

284
00:13:47,150 --> 00:13:53,870
these and sell it off as modern art and

285
00:13:51,550 --> 00:13:56,420
also if you if you if you ask me how

286
00:13:53,870 --> 00:13:58,220
some of these samples were generated by

287
00:13:56,420 --> 00:14:00,050
by the father I would have absolutely no

288
00:13:58,220 --> 00:14:04,880
idea and I think that's that's the

289
00:14:00,050 --> 00:14:08,750
beauty of fuzzing right so now that we

290
00:14:04,880 --> 00:14:11,840
have a father let's test it right and we

291
00:14:08,750 --> 00:14:14,660
decided to test it against five of the

292
00:14:11,840 --> 00:14:17,210
most commonly used used web browsers out

293
00:14:14,660 --> 00:14:21,140
there and each of the browsers have

294
00:14:17,210 --> 00:14:25,640
their own dimension which you see in the

295
00:14:21,140 --> 00:14:29,270
brackets and we tried to give each of

296
00:14:25,640 --> 00:14:32,090
these browsers an equal treatment so we

297
00:14:29,270 --> 00:14:35,270
decided to give each of the browser one

298
00:14:32,090 --> 00:14:38,420
hundred million iterations of the father

299
00:14:35,270 --> 00:14:42,110
and 100 million iterations might sound

300
00:14:38,420 --> 00:14:44,930
like a lot and in some sense it is for

301
00:14:42,110 --> 00:14:47,480
example if you're just one to fuzz on a

302
00:14:44,930 --> 00:14:49,459
single machine and if you assume that a

303
00:14:47,480 --> 00:14:51,410
single iteration is going to take you

304
00:14:49,460 --> 00:14:53,030
ten seconds and keep in mind that that

305
00:14:51,410 --> 00:14:55,310
that the samples generated by my father

306
00:14:53,030 --> 00:14:59,600
can be quite large then you would come

307
00:14:55,310 --> 00:15:01,250
to a fuzzing time of around 32 years so

308
00:14:59,600 --> 00:15:04,850
of course you wouldn't do it that way

309
00:15:01,250 --> 00:15:07,640
but if you have a fuzzing cluster of say

310
00:15:04,850 --> 00:15:11,930
300 machines then the same number of

311
00:15:07,640 --> 00:15:15,170
iterations would take about a month or a

312
00:15:11,930 --> 00:15:22,050
bit over a month and that's that's more

313
00:15:15,170 --> 00:15:24,699
realistic so how much how much 300

314
00:15:22,050 --> 00:15:28,439
300 machines for a month would cost you

315
00:15:24,699 --> 00:15:31,628
well I did some calculations on on

316
00:15:28,439 --> 00:15:35,969
Google compute engine and and it turns

317
00:15:31,629 --> 00:15:39,389
out that if you use the the weakest the

318
00:15:35,970 --> 00:15:43,269
weakest available virtual machines then

319
00:15:39,389 --> 00:15:45,850
you would be able to it would be able to

320
00:15:43,269 --> 00:15:48,790
do that for about a thousand dollars and

321
00:15:45,850 --> 00:15:51,970
that might be a lot for a hobbyist but

322
00:15:48,790 --> 00:15:54,490
if we are assuming advanced adversaries

323
00:15:51,970 --> 00:15:57,100
whose budget measures in millions or

324
00:15:54,490 --> 00:16:00,459
possibly billions of dollars or if

325
00:15:57,100 --> 00:16:02,800
you're if you're selling exploits for

326
00:16:00,459 --> 00:16:05,498
hundreds of thousands of dollars then a

327
00:16:02,800 --> 00:16:10,839
thousand dollars doesn't seem like such

328
00:16:05,499 --> 00:16:14,470
a large investment at all so how did we

329
00:16:10,839 --> 00:16:16,389
actually test those browsers Google

330
00:16:14,470 --> 00:16:18,610
Chrome was probably the easiest because

331
00:16:16,389 --> 00:16:20,529
Chrome security team has their own

332
00:16:18,610 --> 00:16:25,209
phazon cluster which is called cluster

333
00:16:20,529 --> 00:16:27,069
files and essentially all I needed to do

334
00:16:25,209 --> 00:16:30,518
was upload my father to cluster files

335
00:16:27,069 --> 00:16:33,849
and then it it magically works story

336
00:16:30,519 --> 00:16:36,399
done happy end Firefox and Safari

337
00:16:33,850 --> 00:16:38,439
revised on internal Google

338
00:16:36,399 --> 00:16:41,199
infrastructure which is which is Linux

339
00:16:38,439 --> 00:16:43,719
based and you might be wondering at this

340
00:16:41,199 --> 00:16:45,279
point well how did I find Safari on

341
00:16:43,720 --> 00:16:48,339
Linux because of our it doesn't run on

342
00:16:45,279 --> 00:16:51,069
Linux well essentially what I did

343
00:16:48,339 --> 00:16:54,999
instead of passing Safari was to fast

344
00:16:51,069 --> 00:16:58,569
WebKit gtk+ and WebKit gtk+ uses the

345
00:16:54,999 --> 00:17:05,939
same dimension as Apple Safari and then

346
00:16:58,569 --> 00:17:09,220
I fight each of the crashes I reported

347
00:17:05,939 --> 00:17:16,049
against against a safari bill that was

348
00:17:09,220 --> 00:17:19,299
actually running on Mac ie we fast on on

349
00:17:16,049 --> 00:17:23,339
on Google compute engine on the cluster

350
00:17:19,299 --> 00:17:26,289
of Windows Server 2012 machines and

351
00:17:23,339 --> 00:17:28,780
Microsoft edge was kind of the most

352
00:17:26,289 --> 00:17:30,520
difficult because we couldn't run it

353
00:17:28,780 --> 00:17:40,000
Google infrastructure at least not

354
00:17:30,520 --> 00:17:42,220
easily because because age only runs on

355
00:17:40,000 --> 00:17:45,370
Windows 10 Windows 10 still doesn't run

356
00:17:42,220 --> 00:17:48,460
on at this point one on Google compute

357
00:17:45,370 --> 00:17:51,489
engine and unfortunately windows server

358
00:17:48,460 --> 00:17:54,190
doesn't support edge so what I did

359
00:17:51,490 --> 00:17:57,100
instead was to fast edge on Microsoft's

360
00:17:54,190 --> 00:17:58,780
own cloud which was which was kind of

361
00:17:57,100 --> 00:18:00,879
interesting when when the people from

362
00:17:58,780 --> 00:18:04,690
from Microsoft cloud support called me

363
00:18:00,880 --> 00:18:12,000
and asked me hey what are you what are

364
00:18:04,690 --> 00:18:17,710
you using our our cluster for right so

365
00:18:12,000 --> 00:18:19,660
in addition to that we made some built

366
00:18:17,710 --> 00:18:22,420
or configuration changes to do those

367
00:18:19,660 --> 00:18:24,960
puzzles to be able to talk to to catch

368
00:18:22,420 --> 00:18:27,280
bugs more easily and in the case of

369
00:18:24,960 --> 00:18:29,320
browsers where we could make our own

370
00:18:27,280 --> 00:18:34,240
builds that that basically meant will

371
00:18:29,320 --> 00:18:36,370
the grid sanitizer so so Firefox and and

372
00:18:34,240 --> 00:18:39,490
WebKit were were built using a sand

373
00:18:36,370 --> 00:18:41,439
sanitizer and chrome well on cluster was

374
00:18:39,490 --> 00:18:44,950
already runs built with with various

375
00:18:41,440 --> 00:18:48,580
sanitizers for inh obviously we didn't

376
00:18:44,950 --> 00:18:52,210
have our own bills but what we did was

377
00:18:48,580 --> 00:18:54,070
to enable to enable page heap for for

378
00:18:52,210 --> 00:18:57,070
the relevant processes which kind of

379
00:18:54,070 --> 00:18:59,470
serves the same purpose and we also made

380
00:18:57,070 --> 00:19:03,100
sure that the garbage collector in each

381
00:18:59,470 --> 00:19:05,920
of these each of these browsers gets

382
00:19:03,100 --> 00:19:07,870
called periodically which is important

383
00:19:05,920 --> 00:19:12,970
to catch use after three issues which

384
00:19:07,870 --> 00:19:16,360
are quite common in web browsers so

385
00:19:12,970 --> 00:19:20,170
finally here are the results expressed

386
00:19:16,360 --> 00:19:23,620
as the number of bugs and I'm going to

387
00:19:20,170 --> 00:19:27,010
spend some time on this slide but before

388
00:19:23,620 --> 00:19:30,850
I dive into the results I want to say

389
00:19:27,010 --> 00:19:35,940
two things firstly all the bugs you see

390
00:19:30,850 --> 00:19:39,250
here are security bugs so in case that

391
00:19:35,940 --> 00:19:40,860
the father's found some other type of

392
00:19:39,250 --> 00:19:42,870
issues like issues

393
00:19:40,860 --> 00:19:45,540
that would affect only only the browser

394
00:19:42,870 --> 00:19:47,850
stability but wouldn't necessarily have

395
00:19:45,540 --> 00:19:52,170
a security impact design counted here

396
00:19:47,850 --> 00:19:55,969
and also only the bugs that affected the

397
00:19:52,170 --> 00:19:59,490
real released stable version of of the

398
00:19:55,970 --> 00:20:01,830
browser's mentioned are counted here so

399
00:19:59,490 --> 00:20:05,400
for example if we fast against a

400
00:20:01,830 --> 00:20:10,199
development built off of the browser we

401
00:20:05,400 --> 00:20:12,450
made sure that the let the bugs were

402
00:20:10,200 --> 00:20:14,130
actually working against released

403
00:20:12,450 --> 00:20:17,130
version of the browser before counting

404
00:20:14,130 --> 00:20:21,870
them here right so now let's look at the

405
00:20:17,130 --> 00:20:24,750
results and my general impression is

406
00:20:21,870 --> 00:20:27,959
that most browsers actually did quite

407
00:20:24,750 --> 00:20:30,360
well because if I use the same

408
00:20:27,960 --> 00:20:31,950
methodology three or four years ago my

409
00:20:30,360 --> 00:20:34,260
impression is that I would be getting

410
00:20:31,950 --> 00:20:38,070
probably an order of magnitude more

411
00:20:34,260 --> 00:20:40,460
issues so I think that that shows which

412
00:20:38,070 --> 00:20:45,240
shows a clear progress for the most part

413
00:20:40,460 --> 00:20:47,370
now and also the differences between the

414
00:20:45,240 --> 00:20:50,040
browsers are quite small so you really

415
00:20:47,370 --> 00:20:52,949
can't say that one browser did worse

416
00:20:50,040 --> 00:20:55,649
than the other because one browser had

417
00:20:52,950 --> 00:20:58,440
two more bugs because the difference is

418
00:20:55,650 --> 00:21:00,990
just not statistically distally

419
00:20:58,440 --> 00:21:05,240
significant so please don't don't make

420
00:21:00,990 --> 00:21:09,000
such claims based on based on my talk on

421
00:21:05,240 --> 00:21:11,429
the other hand there is a browser that

422
00:21:09,000 --> 00:21:14,850
kind of clearly stands out from the rest

423
00:21:11,429 --> 00:21:18,840
in terms of number of bugs and that is

424
00:21:14,850 --> 00:21:23,959
Apple Safari that is its WebKit Dom

425
00:21:18,840 --> 00:21:26,399
engine and that is kind of kind of

426
00:21:23,960 --> 00:21:29,570
interesting for several reasons one of

427
00:21:26,400 --> 00:21:32,160
those reasons is that we know that

428
00:21:29,570 --> 00:21:35,340
advanced attackers are very very much

429
00:21:32,160 --> 00:21:37,500
interested in the Apple's platform and

430
00:21:35,340 --> 00:21:42,330
the other reason is that up until a

431
00:21:37,500 --> 00:21:44,460
couple of years ago chrome and web and

432
00:21:42,330 --> 00:21:47,010
Chrome and Safari used the same domain

433
00:21:44,460 --> 00:21:49,500
which was WebKit and then at some point

434
00:21:47,010 --> 00:21:52,530
there was a split

435
00:21:49,500 --> 00:21:54,930
and chrome team created their own fork

436
00:21:52,530 --> 00:21:57,570
which they call blink and now there are

437
00:21:54,930 --> 00:22:02,000
quite significant differences that that

438
00:21:57,570 --> 00:22:05,750
indicates that either in the mean time

439
00:22:02,000 --> 00:22:10,320
the number of of boxing blink got

440
00:22:05,750 --> 00:22:12,300
significantly reduced or that the or

441
00:22:10,320 --> 00:22:15,629
that there was a number of new bugs that

442
00:22:12,300 --> 00:22:22,800
were introduced in WebKit or some

443
00:22:15,630 --> 00:22:24,900
combination of the tomb and but I really

444
00:22:22,800 --> 00:22:27,149
don't want to don't want this

445
00:22:24,900 --> 00:22:31,650
presentation to be scenes as as Apple

446
00:22:27,150 --> 00:22:33,330
bashing so so instead I asked myself

447
00:22:31,650 --> 00:22:36,060
well what can I do to improve the

448
00:22:33,330 --> 00:22:41,280
situation and one thing I did was to

449
00:22:36,060 --> 00:22:44,520
contact Apple as soon as the results the

450
00:22:41,280 --> 00:22:48,990
results sort of started popping in and I

451
00:22:44,520 --> 00:22:52,800
told them hey I'm fuzzing browsers

452
00:22:48,990 --> 00:22:54,720
WebKit is not doing so great I'm

453
00:22:52,800 --> 00:22:56,960
interested in sharing my tools and

454
00:22:54,720 --> 00:23:01,770
interested in sharing my mythology

455
00:22:56,960 --> 00:23:05,580
methodology so so long story short now

456
00:23:01,770 --> 00:23:08,520
they have a copy of my father so I I

457
00:23:05,580 --> 00:23:11,340
really hope they use it to do to make

458
00:23:08,520 --> 00:23:14,940
the situation better and as I said again

459
00:23:11,340 --> 00:23:18,120
I think most most browsers did quite

460
00:23:14,940 --> 00:23:21,300
well and there are various reasons for

461
00:23:18,120 --> 00:23:24,540
that so for example this is kind of

462
00:23:21,300 --> 00:23:26,909
interesting internet explorer and edge

463
00:23:24,540 --> 00:23:28,920
use this mitigation for use after free

464
00:23:26,910 --> 00:23:32,670
vulnerabilities which is called mem GC

465
00:23:28,920 --> 00:23:34,800
and and there is actually a registry

466
00:23:32,670 --> 00:23:36,570
flag with which you can disable this

467
00:23:34,800 --> 00:23:39,659
mitigation and then when you disable

468
00:23:36,570 --> 00:23:42,620
this mitigation what you see is a bunch

469
00:23:39,660 --> 00:23:45,060
of other issues popping up but of course

470
00:23:42,620 --> 00:23:50,090
this mitigation is not disabled in in

471
00:23:45,060 --> 00:23:54,639
the real configuration and there are no

472
00:23:50,090 --> 00:23:57,459
there for for the most part there are no

473
00:23:54,640 --> 00:24:00,250
obvious bypasses so this is kind of the

474
00:23:57,460 --> 00:24:07,690
example of a mitigation that that really

475
00:24:00,250 --> 00:24:10,240
works and is and is really useful so now

476
00:24:07,690 --> 00:24:13,630
when that is over with let's look at the

477
00:24:10,240 --> 00:24:17,070
fun part and the fun part are the actual

478
00:24:13,630 --> 00:24:21,309
bugs so so here I have an example and

479
00:24:17,070 --> 00:24:23,260
it's interesting for a sitter is it's

480
00:24:21,309 --> 00:24:25,389
interesting for a number of reasons one

481
00:24:23,260 --> 00:24:31,779
reason why it's interesting is because

482
00:24:25,390 --> 00:24:33,639
it is is because it is a vulnerability

483
00:24:31,779 --> 00:24:36,519
that affects two browsers which are

484
00:24:33,639 --> 00:24:38,260
Chrome and WebKit and this means that

485
00:24:36,519 --> 00:24:41,190
this is a pretty old vulnerability that

486
00:24:38,260 --> 00:24:45,700
must have been introduced prior to the

487
00:24:41,190 --> 00:24:47,980
prior to the chrome and and and prior to

488
00:24:45,700 --> 00:24:51,940
the sorry prior to the blink and WebKit

489
00:24:47,980 --> 00:24:55,690
split and the other reason why it's

490
00:24:51,940 --> 00:25:00,070
interesting is that there are basically

491
00:24:55,690 --> 00:25:04,419
two separate issues here but before I go

492
00:25:00,070 --> 00:25:07,750
into the into the details I first have

493
00:25:04,419 --> 00:25:09,610
to go over some background so in the Dom

494
00:25:07,750 --> 00:25:12,549
there is something which is called a

495
00:25:09,610 --> 00:25:15,178
shadow Dom and the shadow Dom

496
00:25:12,549 --> 00:25:19,418
essentially enables you to implement one

497
00:25:15,179 --> 00:25:22,960
HTML element using a set of existing

498
00:25:19,419 --> 00:25:26,260
HTML element elements and there is a

499
00:25:22,960 --> 00:25:28,330
special type of shadow Dom which is

500
00:25:26,260 --> 00:25:30,480
called the user-agent shadow Dom now the

501
00:25:28,330 --> 00:25:35,408
property of the user-agent shadow Dom is

502
00:25:30,480 --> 00:25:37,210
that the JavaScript code running on the

503
00:25:35,409 --> 00:25:41,139
webpage should be should never be able

504
00:25:37,210 --> 00:25:44,260
to modify it now what you have here is

505
00:25:41,139 --> 00:25:47,408
you can see in the in the in the sample

506
00:25:44,260 --> 00:25:49,419
code that I have a kitchen element and

507
00:25:47,409 --> 00:25:51,340
if you don't know what the kitchen

508
00:25:49,419 --> 00:25:54,880
element is it doesn't matter I included

509
00:25:51,340 --> 00:25:56,949
a small image on this slide and as you

510
00:25:54,880 --> 00:25:59,679
can see it kind of looks like another

511
00:25:56,950 --> 00:26:03,039
HTML element which is the Select element

512
00:25:59,679 --> 00:26:06,419
and in fact that is exactly how it is

513
00:26:03,039 --> 00:26:08,580
implemented in in in WebKit and blink

514
00:26:06,419 --> 00:26:11,489
you have you have a kitchen element

515
00:26:08,580 --> 00:26:14,129
which has a user agent shadow Dom which

516
00:26:11,489 --> 00:26:16,769
contains a select element and what

517
00:26:14,129 --> 00:26:19,889
happens in the JavaScript code here in

518
00:26:16,769 --> 00:26:22,649
this page is that basically carat range

519
00:26:19,889 --> 00:26:23,789
from point function in this particular

520
00:26:22,649 --> 00:26:32,488
situation

521
00:26:23,789 --> 00:26:35,100
it gets you it gets you an object that

522
00:26:32,489 --> 00:26:37,259
you can use to modify the user agent

523
00:26:35,100 --> 00:26:40,830
shadow Dom which as I said before you

524
00:26:37,259 --> 00:26:43,619
you you never should be able to do and

525
00:26:40,830 --> 00:26:47,359
then what happens after that is that the

526
00:26:43,619 --> 00:26:50,519
father basically prepends a text node

527
00:26:47,359 --> 00:26:52,350
into this shadow Dom and what happens

528
00:26:50,519 --> 00:26:56,519
after that is that the web browser

529
00:26:52,350 --> 00:26:58,350
assumes that the first element inside

530
00:26:56,519 --> 00:27:00,600
the shadow Dom is going to be a select

531
00:26:58,350 --> 00:27:03,509
element so it's just going to take it

532
00:27:00,600 --> 00:27:05,340
and blindly cast it into a select

533
00:27:03,509 --> 00:27:07,559
element but it is no longer select

534
00:27:05,340 --> 00:27:11,070
element because we change it it is now

535
00:27:07,559 --> 00:27:13,350
it is now a text node element so we are

536
00:27:11,070 --> 00:27:15,059
casting a text node element into a

537
00:27:13,350 --> 00:27:19,199
select element so this is a type

538
00:27:15,059 --> 00:27:20,820
confusion vulnerability and so what I

539
00:27:19,200 --> 00:27:23,850
mentioned before is that there are kind

540
00:27:20,820 --> 00:27:26,249
of two separate issues here that the

541
00:27:23,850 --> 00:27:29,070
first one is getting into the user agent

542
00:27:26,249 --> 00:27:31,799
shadow dom the second one is is the type

543
00:27:29,070 --> 00:27:34,049
1 fusion in the type 1 fusion part you

544
00:27:31,799 --> 00:27:38,279
can actually really easily see in the

545
00:27:34,049 --> 00:27:41,190
source code because it is just blind the

546
00:27:38,279 --> 00:27:43,730
casting whatever element to a select

547
00:27:41,190 --> 00:27:46,529
element however you really can't reach

548
00:27:43,730 --> 00:27:49,019
this type confusion vulnerability and

549
00:27:46,529 --> 00:27:53,730
unless you're also able to modify the

550
00:27:49,019 --> 00:27:56,629
the shadow dom and into eye carat range

551
00:27:53,730 --> 00:28:00,570
from point in this particular instance

552
00:27:56,629 --> 00:28:04,498
returns you a shadow dom is very very

553
00:28:00,570 --> 00:28:08,158
not easy to see from by looking at the

554
00:28:04,499 --> 00:28:10,289
source code and in fact there are and

555
00:28:08,159 --> 00:28:11,700
there are a number of other elements

556
00:28:10,289 --> 00:28:14,970
that are implemented using shadow Dom

557
00:28:11,700 --> 00:28:17,200
well it turns out that this only ever

558
00:28:14,970 --> 00:28:19,120
worked in in the combination

559
00:28:17,200 --> 00:28:22,000
with the key gentleman so I think this

560
00:28:19,120 --> 00:28:23,500
is a pretty good case for why fuzzing is

561
00:28:22,000 --> 00:28:25,630
important because you can find this

562
00:28:23,500 --> 00:28:27,670
vulnerabilities data data sometimes

563
00:28:25,630 --> 00:28:29,050
quite difficult to see from the source

564
00:28:27,670 --> 00:28:31,710
code and you can also catch

565
00:28:29,050 --> 00:28:36,389
vulnerabilities that only ever manifest

566
00:28:31,710 --> 00:28:44,110
when when assert when a certain set of

567
00:28:36,390 --> 00:28:46,870
of conditions are are true and I have a

568
00:28:44,110 --> 00:28:48,669
bunch of other bugs here unfortunately

569
00:28:46,870 --> 00:28:51,429
I'm running out of time so I'm going to

570
00:28:48,670 --> 00:28:53,650
have to skip over them but these are all

571
00:28:51,430 --> 00:28:57,760
public you can find all of these in the

572
00:28:53,650 --> 00:28:59,890
project zero bug tracker so if you're

573
00:28:57,760 --> 00:29:01,870
interested in learning more feel free to

574
00:28:59,890 --> 00:29:06,490
look at them feel free to analyze them

575
00:29:01,870 --> 00:29:09,330
see see what issues they trigger it so

576
00:29:06,490 --> 00:29:15,450
right let's jump to the conclusion now

577
00:29:09,330 --> 00:29:19,149
and so despite the Dom fuzzing being

578
00:29:15,450 --> 00:29:21,820
being really old and in quite well-known

579
00:29:19,150 --> 00:29:25,390
technique it can still find interesting

580
00:29:21,820 --> 00:29:29,350
bugs that's kind of the bad part the

581
00:29:25,390 --> 00:29:33,340
good part is that well it does find bugs

582
00:29:29,350 --> 00:29:38,290
it finds less bugs than it then it used

583
00:29:33,340 --> 00:29:45,490
to and also and in that in itself in

584
00:29:38,290 --> 00:29:51,639
itself forces bug hunters to look to do

585
00:29:45,490 --> 00:29:53,710
more manual review and that is a good

586
00:29:51,640 --> 00:29:56,290
thing because my new review has a has a

587
00:29:53,710 --> 00:30:00,430
higher barrier to entry if we're talking

588
00:29:56,290 --> 00:30:04,750
about advanced attackers so so what can

589
00:30:00,430 --> 00:30:06,640
you do if you're if you are a browser

590
00:30:04,750 --> 00:30:09,130
vendor and you're not fuzzing your

591
00:30:06,640 --> 00:30:13,300
browser code you're gonna have a bad

592
00:30:09,130 --> 00:30:15,130
time how not to have such a bad time

593
00:30:13,300 --> 00:30:17,260
well do fuzzing at scale

594
00:30:15,130 --> 00:30:19,500
do fuzzing using multiple fuzzers

595
00:30:17,260 --> 00:30:22,408
because for example I

596
00:30:19,500 --> 00:30:25,049
I really don't believe that WebKit folks

597
00:30:22,409 --> 00:30:27,120
don't face WebKit i I think they do but

598
00:30:25,049 --> 00:30:30,090
either they are not doing it at the

599
00:30:27,120 --> 00:30:33,989
large enough scale or the father's they

600
00:30:30,090 --> 00:30:36,270
are using blind spots and realistically

601
00:30:33,990 --> 00:30:38,669
all fathers do and that you know of

602
00:30:36,270 --> 00:30:41,760
course it extends to mine so if you find

603
00:30:38,669 --> 00:30:46,260
some blind spots in my father please let

604
00:30:41,760 --> 00:30:50,158
me know if you are if you are a browser

605
00:30:46,260 --> 00:30:52,559
user or if you are in a position to

606
00:30:50,159 --> 00:30:55,710
select a browser for your organization

607
00:30:52,559 --> 00:30:59,399
please try to make an informed decision

608
00:30:55,710 --> 00:31:03,210
which I realize is very very difficult

609
00:30:59,400 --> 00:31:07,710
because there is just not that much

610
00:31:03,210 --> 00:31:10,549
objective information out there and I

611
00:31:07,710 --> 00:31:12,780
think this is this is an area where

612
00:31:10,549 --> 00:31:16,710
security community can do a better job

613
00:31:12,780 --> 00:31:19,950
by by by by sharing that kind of

614
00:31:16,710 --> 00:31:21,870
information and of course if you if you

615
00:31:19,950 --> 00:31:24,690
are a security researcher you can help

616
00:31:21,870 --> 00:31:28,620
by by by reporting bugs to to the

617
00:31:24,690 --> 00:31:30,240
vendors and as I said my father is

618
00:31:28,620 --> 00:31:32,100
getting open-source so feel free to play

619
00:31:30,240 --> 00:31:35,460
with it feel free to modify it and if

620
00:31:32,100 --> 00:31:37,408
you find if you find something that that

621
00:31:35,460 --> 00:31:39,059
that enables you to find more bugs

622
00:31:37,409 --> 00:31:46,289
please report them to the browser

623
00:31:39,059 --> 00:31:52,470
vendors so with that I'm I kind of ran

624
00:31:46,289 --> 00:31:54,690
out of time I'm I'm going to defer to do

625
00:31:52,470 --> 00:31:56,970
organizers whether we have time for

626
00:31:54,690 --> 00:31:58,180
questions or not but in any case thank

627
00:31:56,970 --> 00:32:06,650
you very much for listening

628
00:31:58,180 --> 00:32:08,910
[Applause]

629
00:32:06,650 --> 00:32:22,170
okay seems like we have time for

630
00:32:08,910 --> 00:32:24,030
questions on what tor browser my

631
00:32:22,170 --> 00:32:29,550
insights my my insights on the tor

632
00:32:24,030 --> 00:32:32,040
browser well so this is kind of complex

633
00:32:29,550 --> 00:32:34,560
questions a question and I think there

634
00:32:32,040 --> 00:32:36,930
are kind of two issues you should be

635
00:32:34,560 --> 00:32:44,159
very careful with with the with the tor

636
00:32:36,930 --> 00:32:50,310
browser one issue is that that it is it

637
00:32:44,160 --> 00:32:56,610
is based on Firefox and in Firefox at

638
00:32:50,310 --> 00:33:01,230
this time doesn't have a good good

639
00:32:56,610 --> 00:33:04,879
sandbox so in fact you pretty much at

640
00:33:01,230 --> 00:33:07,950
this point need need only only one

641
00:33:04,880 --> 00:33:10,400
vulnerability to own Firefox whereas for

642
00:33:07,950 --> 00:33:14,520
firfer the other browsers you need to

643
00:33:10,400 --> 00:33:16,620
III know that Firefox folks did do some

644
00:33:14,520 --> 00:33:18,540
work on the sandbox but I'm not sure at

645
00:33:16,620 --> 00:33:21,209
which stage it is and they also know

646
00:33:18,540 --> 00:33:28,280
that that the data tor browser folks

647
00:33:21,210 --> 00:33:32,670
kind of created a sandbox of their own

648
00:33:28,280 --> 00:33:35,940
but it was kind of easily breakable at

649
00:33:32,670 --> 00:33:40,770
that point so it's kind of young give it

650
00:33:35,940 --> 00:33:46,380
more time and perhaps it improves now

651
00:33:40,770 --> 00:33:51,680
now the second the second issue I have

652
00:33:46,380 --> 00:33:51,680
with the with the tor browser is well

653
00:33:52,100 --> 00:33:59,699
how how difficult it is to find a bypass

654
00:33:56,910 --> 00:34:02,430
which which will not be a browser

655
00:33:59,700 --> 00:34:07,920
vulnerability but which which will be

656
00:34:02,430 --> 00:34:10,820
something that would that would that

657
00:34:07,920 --> 00:34:14,880
will basically allow the browser to

658
00:34:10,820 --> 00:34:20,730
to bypass store and contact or resource

659
00:34:14,880 --> 00:34:23,430
directly so that's that's kind of my

660
00:34:20,730 --> 00:34:28,500
varies with regards to the tor browser

661
00:34:23,429 --> 00:34:31,290
and if you're running the tor browser my

662
00:34:28,500 --> 00:34:33,989
my advice would be to to run it inside

663
00:34:31,290 --> 00:34:39,150
the virtual machine which which both

664
00:34:33,989 --> 00:34:41,009
adds another layer on top of the browser

665
00:34:39,150 --> 00:34:45,120
assuming of course your virtual machine

666
00:34:41,010 --> 00:34:46,590
is up-to-date and and also that the

667
00:34:45,120 --> 00:34:48,359
virtual machine if you configure the

668
00:34:46,590 --> 00:34:51,000
virtual machine that it did so that it

669
00:34:48,360 --> 00:34:54,840
can't access anything other than the

670
00:34:51,000 --> 00:34:57,450
tour then it kind of might might might

671
00:34:54,840 --> 00:35:01,910
add to your protection against these

672
00:34:57,450 --> 00:35:01,910
turbines bypasses that I mentioned so

673
00:35:14,270 --> 00:35:21,300
I'm not I'm not an expert on tails I'm I

674
00:35:19,260 --> 00:35:23,940
don't know how vulnerable it is so I

675
00:35:21,300 --> 00:35:28,520
wouldn't make any any claims whether to

676
00:35:23,940 --> 00:35:28,520
to to support it or not support it

677
00:35:55,990 --> 00:35:59,830
that is a great question so how did I

678
00:35:57,730 --> 00:36:01,570
triage crashes and how did they

679
00:35:59,830 --> 00:36:05,740
determine which are security bugs and

680
00:36:01,570 --> 00:36:09,790
which are not well in the cases where

681
00:36:05,740 --> 00:36:11,709
where I had the sanitizer builds it's

682
00:36:09,790 --> 00:36:15,310
quite easy because the sanitizer

683
00:36:11,710 --> 00:36:18,010
actually is actually able to recognize

684
00:36:15,310 --> 00:36:19,810
what type of issue it is so for example

685
00:36:18,010 --> 00:36:21,700
you have used after three issues which

686
00:36:19,810 --> 00:36:24,910
are potentially which potentially have

687
00:36:21,700 --> 00:36:27,790
security impact you have you have out

688
00:36:24,910 --> 00:36:29,940
keep out of buffer out of bound issues

689
00:36:27,790 --> 00:36:33,310
which potentially have security impact

690
00:36:29,940 --> 00:36:35,890
so it's pretty easy to recognize this

691
00:36:33,310 --> 00:36:40,810
just from the sanitizer report in the

692
00:36:35,890 --> 00:36:45,600
case of of browsers where that weren't

693
00:36:40,810 --> 00:36:49,480
run with sanitizers well in those cases

694
00:36:45,600 --> 00:36:51,279
well what you in what you end up getting

695
00:36:49,480 --> 00:36:55,600
in practice when you when you fast

696
00:36:51,280 --> 00:36:58,150
browsers are essentially a large number

697
00:36:55,600 --> 00:37:02,940
of null pointer dereferences and these

698
00:36:58,150 --> 00:37:06,810
are kind of kind of easy to spot and and

699
00:37:02,940 --> 00:37:09,369
automatically triage as well and then

700
00:37:06,810 --> 00:37:11,500
anything that isn't an you know pointer

701
00:37:09,369 --> 00:37:14,230
dereference but that is only going to be

702
00:37:11,500 --> 00:37:16,780
a relatively small number of issues you

703
00:37:14,230 --> 00:37:27,359
can you can essentially triage manually

704
00:37:16,780 --> 00:37:27,359
to determine the security impact sorry

705
00:37:29,490 --> 00:37:35,890
well I use a summation because I I think

706
00:37:33,730 --> 00:37:45,600
it is a it's a de facto standard for it

707
00:37:35,890 --> 00:37:45,600
for these things of course

708
00:38:05,440 --> 00:38:12,860
right so that's that that's a great

709
00:38:08,930 --> 00:38:14,690
question as well so if we can so

710
00:38:12,860 --> 00:38:17,090
considering that we've have fought buds

711
00:38:14,690 --> 00:38:22,400
that that affect multiple browsers can

712
00:38:17,090 --> 00:38:24,560
can we can we use tests to to find BOTS

713
00:38:22,400 --> 00:38:29,320
in win one browsers using tests from

714
00:38:24,560 --> 00:38:34,340
tests from the other ones and well yes

715
00:38:29,320 --> 00:38:37,610
that that happens and I'm not sure if

716
00:38:34,340 --> 00:38:40,730
the way if the if the if the browser

717
00:38:37,610 --> 00:38:43,730
vendors do it though if not they

718
00:38:40,730 --> 00:38:45,890
probably should but I am aware of a

719
00:38:43,730 --> 00:38:47,810
couple of security researchers who could

720
00:38:45,890 --> 00:38:49,790
it could it exactly that and were able

721
00:38:47,810 --> 00:38:54,830
to find interesting issues is issues

722
00:38:49,790 --> 00:38:56,810
that way by taking by taking by taking

723
00:38:54,830 --> 00:39:00,250
essentially tests from one browser and

724
00:38:56,810 --> 00:39:00,250
then running it against another browser

725
00:39:13,450 --> 00:39:23,359
well okay so the first question is how

726
00:39:19,310 --> 00:39:27,380
to get into the browser phasing and well

727
00:39:23,360 --> 00:39:31,040
you can you can you can I guess I guess

728
00:39:27,380 --> 00:39:32,870
a good way to start is that that

729
00:39:31,040 --> 00:39:35,750
question would kind of take a long time

730
00:39:32,870 --> 00:39:37,670
but but I guess how you can start is is

731
00:39:35,750 --> 00:39:40,610
looking at what other people are doing

732
00:39:37,670 --> 00:39:42,290
and as I mentioned the browser fuzzing

733
00:39:40,610 --> 00:39:44,570
is not a new technique and other people

734
00:39:42,290 --> 00:39:46,430
are doing it as well so you would be

735
00:39:44,570 --> 00:39:47,720
able to find other presentations on Dom

736
00:39:46,430 --> 00:39:49,940
phasing as well so take a look what

737
00:39:47,720 --> 00:39:51,890
other people are doing take a look at

738
00:39:49,940 --> 00:39:55,130
their father's if they're if they are

739
00:39:51,890 --> 00:39:56,660
available and in by just looking at what

740
00:39:55,130 --> 00:39:58,580
they do and looking at vulnerabilities

741
00:39:56,660 --> 00:40:02,359
you might have some ideas of your own so

742
00:39:58,580 --> 00:40:07,720
it's try to implement them and and try

743
00:40:02,360 --> 00:40:08,980
to see how how well it works

744
00:40:07,720 --> 00:40:12,040
what was

745
00:40:08,980 --> 00:40:16,119
the second question sorry Jeannette

746
00:40:12,040 --> 00:40:18,130
genetic algorithms so I didn't I didn't

747
00:40:16,119 --> 00:40:20,770
really experiment with genetic algorithm

748
00:40:18,130 --> 00:40:24,070
algorithms what I did experiment with

749
00:40:20,770 --> 00:40:26,470
and what I think is kind of might happen

750
00:40:24,070 --> 00:40:31,530
in the future I experimented with

751
00:40:26,470 --> 00:40:34,450
coverage guided Dom fuzzing so basically

752
00:40:31,530 --> 00:40:36,790
kind of a FLE principle but but with

753
00:40:34,450 --> 00:40:39,279
mutations that are specific that are

754
00:40:36,790 --> 00:40:43,270
specific to don unfortunately in my

755
00:40:39,280 --> 00:40:45,280
experiments I didn't really find bugs

756
00:40:43,270 --> 00:40:49,150
that I wouldn't find using your ordinary

757
00:40:45,280 --> 00:40:52,240
Dom fuzzing but it is perhaps possible

758
00:40:49,150 --> 00:40:55,560
to do it in a better way that I then

759
00:40:52,240 --> 00:41:00,310
that I have been doing it and I think

760
00:40:55,560 --> 00:41:04,480
whoever finds a way to include coverage

761
00:41:00,310 --> 00:41:06,250
information into in the meaning in the

762
00:41:04,480 --> 00:41:09,310
meaningful freeway in don't fuzzing

763
00:41:06,250 --> 00:41:16,810
might be the next thing of donor

764
00:41:09,310 --> 00:41:19,240
abilities we are out of time okay we are

765
00:41:16,810 --> 00:41:19,610
way probably way out of time but thank

766
00:41:19,240 --> 00:41:21,140
you

767
00:41:19,610 --> 00:41:24,320
[Applause]

768
00:41:21,140 --> 00:41:24,319
[Music]

