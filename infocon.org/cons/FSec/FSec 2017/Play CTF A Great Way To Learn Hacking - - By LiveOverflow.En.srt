1
00:00:02,560 --> 00:00:08,170
very much and thank you for being up

2
00:00:05,830 --> 00:00:11,110
this early in the morning the title of

3
00:00:08,170 --> 00:00:13,300
my talk is play CTF because I believe

4
00:00:11,110 --> 00:00:15,518
it's a really great way to learn more

5
00:00:13,300 --> 00:00:18,690
about hacking and just improve your

6
00:00:15,519 --> 00:00:28,029
skills and what you know about it yeah

7
00:00:18,690 --> 00:00:29,830
so okay so my name is Fabian I'm still a

8
00:00:28,029 --> 00:00:31,539
student at the Technical University of

9
00:00:29,830 --> 00:00:33,550
Berlin still haven't finished my

10
00:00:31,539 --> 00:00:35,980
master's degree and I also work as a

11
00:00:33,550 --> 00:00:38,440
freelancer doing penetration testing

12
00:00:35,980 --> 00:00:40,750
most of the time things like code audit

13
00:00:38,440 --> 00:00:43,149
and I'm doing a lot of application

14
00:00:40,750 --> 00:00:44,590
security web app security and it's kind

15
00:00:43,149 --> 00:00:48,219
of important to keep in mind because

16
00:00:44,590 --> 00:00:49,809
this is my bias on to the topic this is

17
00:00:48,219 --> 00:00:52,210
where I'm from in the industry because

18
00:00:49,809 --> 00:00:54,039
as you know there are a wide variety of

19
00:00:52,210 --> 00:00:57,340
different kind of jobs and skill sets

20
00:00:54,039 --> 00:00:59,739
required I also have a youtube channel

21
00:00:57,340 --> 00:01:04,420
called Life overflow where I create

22
00:00:59,739 --> 00:01:06,610
hacking tutorials and you know also CTF

23
00:01:04,420 --> 00:01:08,590
write-ups and so this talk is kind of a

24
00:01:06,610 --> 00:01:11,020
little bit related to what I do with the

25
00:01:08,590 --> 00:01:12,490
YouTube channel it's not a big channel

26
00:01:11,020 --> 00:01:14,140
but it's possible that you have maybe

27
00:01:12,490 --> 00:01:16,839
come across one of these videos these

28
00:01:14,140 --> 00:01:19,600
were kind of like my viral videos they

29
00:01:16,840 --> 00:01:21,220
were linked in some of the new sites

30
00:01:19,600 --> 00:01:24,070
that were reporting about the Nintendo

31
00:01:21,220 --> 00:01:26,560
switch vulnerability and the dirty

32
00:01:24,070 --> 00:01:30,059
calico root exploit just in case you've

33
00:01:26,560 --> 00:01:32,920
seen those then you can connect the dots

34
00:01:30,060 --> 00:01:35,740
so before we start I just quickly want

35
00:01:32,920 --> 00:01:37,390
to recap what CTFs are because I assume

36
00:01:35,740 --> 00:01:39,570
that most of you know what it is but I

37
00:01:37,390 --> 00:01:42,700
just don't want to lose anybody already

38
00:01:39,570 --> 00:01:47,139
so what is capture the Flex capture the

39
00:01:42,700 --> 00:01:49,979
Flex are security competitions where you

40
00:01:47,140 --> 00:01:53,020
can solve challenges hacking challenges

41
00:01:49,979 --> 00:01:55,390
to you know get a good ranking and

42
00:01:53,020 --> 00:01:57,399
here's an example challenge the

43
00:01:55,390 --> 00:01:59,500
challenge crater would create a piece of

44
00:01:57,399 --> 00:02:01,570
software and it makes it intentionally

45
00:01:59,500 --> 00:02:03,909
insecure puts it back in there so that

46
00:02:01,570 --> 00:02:06,669
it can be exploited in this case the

47
00:02:03,909 --> 00:02:08,560
Creator are named this challenge follow

48
00:02:06,670 --> 00:02:10,780
the rabbit it's a web challenge and

49
00:02:08,560 --> 00:02:13,930
assigned to it 200 points based on the

50
00:02:10,780 --> 00:02:15,940
difficulty the challenge crater also

51
00:02:13,930 --> 00:02:20,560
places a secret file on the same

52
00:02:15,940 --> 00:02:22,510
/ and then you as a player you have to

53
00:02:20,560 --> 00:02:25,180
access this website and you try to find

54
00:02:22,510 --> 00:02:26,890
this vulnerability this bug and when you

55
00:02:25,180 --> 00:02:29,350
are able to exploit this vulnerability

56
00:02:26,890 --> 00:02:32,859
and for example get a remote code

57
00:02:29,350 --> 00:02:36,130
execution this allows you then to read

58
00:02:32,860 --> 00:02:38,050
out this secret file and this file has

59
00:02:36,130 --> 00:02:39,519
been a secret code inside that's what we

60
00:02:38,050 --> 00:02:42,100
call the flag that's why it's captured a

61
00:02:39,520 --> 00:02:44,380
flag and that serves as proof that you

62
00:02:42,100 --> 00:02:46,570
hack the that you hack the server and

63
00:02:44,380 --> 00:02:48,220
then you can hand this in to the

64
00:02:46,570 --> 00:02:51,430
challenge platform and you are awarded

65
00:02:48,220 --> 00:02:53,560
points accordingly ok so to the

66
00:02:51,430 --> 00:02:55,510
structure of this talk because we only

67
00:02:53,560 --> 00:02:58,930
have 30 minutes it will probably more

68
00:02:55,510 --> 00:03:00,880
look like this that we talked mostly

69
00:02:58,930 --> 00:03:03,490
about a bit blah blah blah a little bit

70
00:03:00,880 --> 00:03:05,980
try make an argument why CTFs are great

71
00:03:03,490 --> 00:03:08,680
for you and then in the end I hope we

72
00:03:05,980 --> 00:03:11,980
can look at an example vulnerability

73
00:03:08,680 --> 00:03:15,690
that you can find in CTF possibly maybe

74
00:03:11,980 --> 00:03:15,690
more depending on how fast I'm talking

75
00:03:18,060 --> 00:03:24,730
so let's take a step back and think

76
00:03:20,650 --> 00:03:26,709
about how different jobs in our industry

77
00:03:24,730 --> 00:03:29,019
are there are so many different kind of

78
00:03:26,709 --> 00:03:31,000
jobs a hacker could go into so for

79
00:03:29,020 --> 00:03:33,630
example there's classic Red Team pen

80
00:03:31,000 --> 00:03:35,530
testing where you maybe target

81
00:03:33,630 --> 00:03:37,630
corporations with thousands of employees

82
00:03:35,530 --> 00:03:39,610
you send out fishing campaigns and you

83
00:03:37,630 --> 00:03:41,829
go on site try to get access to their

84
00:03:39,610 --> 00:03:44,650
networks and you scan services with

85
00:03:41,830 --> 00:03:46,239
Metasploit and necess and whatnot you

86
00:03:44,650 --> 00:03:47,530
kind of have also this opposite where

87
00:03:46,239 --> 00:03:50,530
you're going to back bounties where you

88
00:03:47,530 --> 00:03:53,860
target very single applications and you

89
00:03:50,530 --> 00:03:55,720
test them thoroughly you could also do

90
00:03:53,860 --> 00:03:59,350
code audits that's kind of what I'm

91
00:03:55,720 --> 00:04:02,350
doing a lot so just reading a lot of

92
00:03:59,350 --> 00:04:04,209
code there's also a possibility for just

93
00:04:02,350 --> 00:04:07,510
doing consultant in general where you

94
00:04:04,209 --> 00:04:11,080
help companies designs a cure software

95
00:04:07,510 --> 00:04:12,790
before they even get implemented and you

96
00:04:11,080 --> 00:04:14,380
can also be mathematical in the crypto

97
00:04:12,790 --> 00:04:16,959
reviews and build those complex

98
00:04:14,380 --> 00:04:20,918
protocols that are running on our secure

99
00:04:16,959 --> 00:04:22,540
messenger applications you could also be

100
00:04:20,918 --> 00:04:24,669
somebody who just sits in front of EXO

101
00:04:22,540 --> 00:04:26,440
and us risk analysis and pushing around

102
00:04:24,669 --> 00:04:27,680
some numbers to see how much damage

103
00:04:26,440 --> 00:04:30,020
could be done or

104
00:04:27,680 --> 00:04:32,030
what the probabilities are or you are

105
00:04:30,020 --> 00:04:34,219
just a developer who has to write secure

106
00:04:32,030 --> 00:04:36,590
code and that's good if you identify as

107
00:04:34,220 --> 00:04:39,680
a hacker and you are developer hopefully

108
00:04:36,590 --> 00:04:43,190
you write you know not as insecure code

109
00:04:39,680 --> 00:04:46,280
and I believe even though these jobs in

110
00:04:43,190 --> 00:04:48,139
our industry are so different you would

111
00:04:46,280 --> 00:04:49,880
be better in all of them the more

112
00:04:48,139 --> 00:04:52,789
technical knowledge you have the more

113
00:04:49,880 --> 00:04:55,969
detailed knowledge you have and for for

114
00:04:52,789 --> 00:04:59,479
example a Red Team pen tester who uses

115
00:04:55,970 --> 00:05:01,130
Metasploit might not have to ever write

116
00:04:59,479 --> 00:05:03,159
the buffer overflow themselves or

117
00:05:01,130 --> 00:05:06,229
understand it there are just too many

118
00:05:03,160 --> 00:05:09,710
exploits in Metasploit to understand

119
00:05:06,229 --> 00:05:12,440
each one of them but I believe that if

120
00:05:09,710 --> 00:05:14,659
you would know at least a few of them or

121
00:05:12,440 --> 00:05:17,240
if you at least have an intuition for

122
00:05:14,660 --> 00:05:21,410
how binary exploitation works and if you

123
00:05:17,240 --> 00:05:23,030
have seen basic heap exploit then you

124
00:05:21,410 --> 00:05:24,919
are better at it you develop a better

125
00:05:23,030 --> 00:05:26,869
intuition for it you are maybe you

126
00:05:24,919 --> 00:05:28,849
probably make better decisions when to

127
00:05:26,870 --> 00:05:31,190
use certain exploits and when not to

128
00:05:28,849 --> 00:05:32,780
when the same goes for somebody who just

129
00:05:31,190 --> 00:05:35,180
sits in front of excellent does risk

130
00:05:32,780 --> 00:05:37,520
analysis if you understand how

131
00:05:35,180 --> 00:05:40,190
complicated certain attacks are and how

132
00:05:37,520 --> 00:05:43,250
easy other attacks are you will be able

133
00:05:40,190 --> 00:05:44,900
to look at the news about security and

134
00:05:43,250 --> 00:05:46,970
you will be able to identify the snake

135
00:05:44,900 --> 00:05:49,370
or the snake well stuff and you

136
00:05:46,970 --> 00:05:53,960
identify the stuff that is actually a

137
00:05:49,370 --> 00:05:56,090
real risk so how do we even get there

138
00:05:53,960 --> 00:05:58,599
how do we get even this technical

139
00:05:56,090 --> 00:06:01,270
knowledge to get one of these jobs

140
00:05:58,599 --> 00:06:03,740
generally I mean this is not meant to be

141
00:06:01,270 --> 00:06:05,900
these are all just examples doesn't mean

142
00:06:03,740 --> 00:06:07,639
to be complete but maybe you have just

143
00:06:05,900 --> 00:06:10,070
been part of a community you find very

144
00:06:07,639 --> 00:06:11,870
early in your life some online community

145
00:06:10,070 --> 00:06:13,909
so you've been part of hacker spaces and

146
00:06:11,870 --> 00:06:15,370
just you know learned it well while

147
00:06:13,909 --> 00:06:18,550
being part of it

148
00:06:15,370 --> 00:06:20,810
maybe he also nowadays you just study it

149
00:06:18,550 --> 00:06:23,120
universities often our classes on

150
00:06:20,810 --> 00:06:26,900
security and some universities even

151
00:06:23,120 --> 00:06:28,669
offer degrees in this field or maybe you

152
00:06:26,900 --> 00:06:31,159
have for example transition from an

153
00:06:28,669 --> 00:06:32,960
entirely different job into the security

154
00:06:31,159 --> 00:06:34,820
field by doing by investing into

155
00:06:32,960 --> 00:06:38,090
trainings and going to conferences and

156
00:06:34,820 --> 00:06:40,190
maybe also doing certifications or maybe

157
00:06:38,090 --> 00:06:41,239
you have also just been a developer who

158
00:06:40,190 --> 00:06:43,759
realizes

159
00:06:41,240 --> 00:06:46,190
wait I built these systems I know how to

160
00:06:43,759 --> 00:06:48,229
break them to this kind of where I'm

161
00:06:46,190 --> 00:06:50,509
coming from I was a web developer and I

162
00:06:48,229 --> 00:06:52,550
created websites and then at some point

163
00:06:50,509 --> 00:06:54,949
I realized I always wanted to be a

164
00:06:52,550 --> 00:06:56,270
hacker and then I realized oh wait with

165
00:06:54,949 --> 00:06:59,360
all the knowledge I acquired being a

166
00:06:56,270 --> 00:07:03,469
developer I can also you know abuse this

167
00:06:59,360 --> 00:07:05,449
knowledge and I believe that generally

168
00:07:03,470 --> 00:07:07,759
the traditional way of learning and how

169
00:07:05,449 --> 00:07:10,190
we get into it you know you will do a

170
00:07:07,759 --> 00:07:12,349
good job you will know enough to raise

171
00:07:10,190 --> 00:07:14,630
the bar for the attacker in a meaningful

172
00:07:12,349 --> 00:07:18,229
way and generally you are a good

173
00:07:14,630 --> 00:07:20,719
investment to have but you all know that

174
00:07:18,229 --> 00:07:22,969
we all of all of us don't know

175
00:07:20,720 --> 00:07:24,770
everything we know that there are people

176
00:07:22,970 --> 00:07:27,500
that are way better than us they have

177
00:07:24,770 --> 00:07:29,750
just a lot more skill and if you would

178
00:07:27,500 --> 00:07:31,039
let them do the job they may be better

179
00:07:29,750 --> 00:07:33,139
at it than you are

180
00:07:31,039 --> 00:07:36,349
so we understand that there's a margin

181
00:07:33,139 --> 00:07:38,810
upwards and depends on you personally

182
00:07:36,349 --> 00:07:41,500
but I do want to you know always take a

183
00:07:38,810 --> 00:07:45,800
step forward or was try to improve and

184
00:07:41,500 --> 00:07:50,750
not be stuck at you know a basic level

185
00:07:45,800 --> 00:07:53,419
and even and with all this there are

186
00:07:50,750 --> 00:07:58,250
still educational challenges in in this

187
00:07:53,419 --> 00:08:00,080
field for example to not even fall back

188
00:07:58,250 --> 00:08:02,810
you need to constantly evolve with the

189
00:08:00,080 --> 00:08:05,000
field when I started out professionally

190
00:08:02,810 --> 00:08:07,909
as doing web pentesting three or four

191
00:08:05,000 --> 00:08:10,759
years ago we our clients had a lot of

192
00:08:07,909 --> 00:08:12,919
PHP applications and nowadays they all

193
00:08:10,759 --> 00:08:16,400
just come with no GS JavaScript web apps

194
00:08:12,919 --> 00:08:18,440
to us so if you have you know been

195
00:08:16,400 --> 00:08:21,049
really really good at auditing PHP

196
00:08:18,440 --> 00:08:22,969
applications four years ago then you are

197
00:08:21,050 --> 00:08:25,130
kind of just a newb again and a trainee

198
00:08:22,969 --> 00:08:26,930
at this point even though maybe your

199
00:08:25,130 --> 00:08:30,639
role is a senior penetration tester

200
00:08:26,930 --> 00:08:33,950
because you did so well four years ago

201
00:08:30,639 --> 00:08:36,380
also maybe you need to learn entirely

202
00:08:33,950 --> 00:08:38,029
new fields what if a client comes to you

203
00:08:36,380 --> 00:08:40,250
and has a website that is interfacing

204
00:08:38,029 --> 00:08:41,958
with some kind of binary maybe some

205
00:08:40,250 --> 00:08:44,179
audio processing or something like this

206
00:08:41,958 --> 00:08:47,449
are you able to audit this will you

207
00:08:44,179 --> 00:08:50,239
ignore that part or what will you do so

208
00:08:47,450 --> 00:08:52,540
that's generally you know a broad field

209
00:08:50,240 --> 00:08:54,040
of knowledge is very beneficial

210
00:08:52,540 --> 00:08:56,349
a lot of interesting vulnerabilities

211
00:08:54,040 --> 00:08:58,300
happen exactly where those different

212
00:08:56,350 --> 00:09:00,490
fields are intersecting with each other

213
00:08:58,300 --> 00:09:02,229
and if you have knowledge on many

214
00:09:00,490 --> 00:09:04,290
different fields you have a lot more

215
00:09:02,230 --> 00:09:08,949
interesting attack ideas and ways to

216
00:09:04,290 --> 00:09:11,199
hopefully exploit the stuff and then we

217
00:09:08,949 --> 00:09:13,170
shouldn't also forget that hacking in

218
00:09:11,199 --> 00:09:15,550
its essence is something very creative

219
00:09:13,170 --> 00:09:19,029
hacking has always been something to

220
00:09:15,550 --> 00:09:21,849
play with technology bent the system's

221
00:09:19,029 --> 00:09:24,370
you know to the rules that were

222
00:09:21,850 --> 00:09:26,350
unintentionally implemented and we

223
00:09:24,370 --> 00:09:28,089
shouldn't forget that because especially

224
00:09:26,350 --> 00:09:30,370
in the business environment everything

225
00:09:28,089 --> 00:09:32,920
has to be measurable everything has to

226
00:09:30,370 --> 00:09:35,800
be able to assign a number to it but

227
00:09:32,920 --> 00:09:37,899
then we lose this creativity and with a

228
00:09:35,800 --> 00:09:40,810
lot of audits for example you kind of

229
00:09:37,899 --> 00:09:42,610
work through checklists you know this is

230
00:09:40,810 --> 00:09:46,060
what happens in PHP applications so you

231
00:09:42,610 --> 00:09:48,100
check exactly these things but then

232
00:09:46,060 --> 00:09:49,750
there are these weird loner abilities

233
00:09:48,100 --> 00:09:52,060
that are unique to a certain application

234
00:09:49,750 --> 00:09:54,100
that you won't be able to check if you

235
00:09:52,060 --> 00:09:55,449
just follow those checklists and I'm not

236
00:09:54,100 --> 00:09:57,069
saying that checklist are bad everybody

237
00:09:55,449 --> 00:09:59,349
has those checklist in their mind but

238
00:09:57,069 --> 00:10:00,699
you should not be forced to just follow

239
00:09:59,350 --> 00:10:02,410
those checklists and you should be

240
00:10:00,699 --> 00:10:04,209
allowed to be creative and explore

241
00:10:02,410 --> 00:10:08,230
entirely different areas of these

242
00:10:04,209 --> 00:10:11,170
applications and I believe if you are

243
00:10:08,230 --> 00:10:13,089
aware of these things and if you you

244
00:10:11,170 --> 00:10:15,399
know think about these and invest in

245
00:10:13,089 --> 00:10:17,709
these areas then it's then you are

246
00:10:15,399 --> 00:10:20,050
taking steps forwards and become better

247
00:10:17,709 --> 00:10:21,518
and you hopefully get to this point

248
00:10:20,050 --> 00:10:23,290
where people are looking up to you and

249
00:10:21,519 --> 00:10:27,760
think oh my gosh you will do a really

250
00:10:23,290 --> 00:10:30,099
good job and I believe that CTFs are a

251
00:10:27,760 --> 00:10:32,230
way to solve all these challenges at

252
00:10:30,100 --> 00:10:34,180
least for me and it might not be for you

253
00:10:32,230 --> 00:10:38,860
but I want to introduce it to you why I

254
00:10:34,180 --> 00:10:42,459
think it's a good thing and and

255
00:10:38,860 --> 00:10:45,130
hopefully it's for you as well so the

256
00:10:42,459 --> 00:10:47,410
great thing about CTF is that a lot of

257
00:10:45,130 --> 00:10:49,509
the vulnerabilities are just basic

258
00:10:47,410 --> 00:10:52,449
vulnerabilities and those can then be

259
00:10:49,509 --> 00:10:55,300
used to just you know see how well you

260
00:10:52,449 --> 00:10:59,620
are actually with those challenges if

261
00:10:55,300 --> 00:11:02,589
you do web pen testing and and try to

262
00:10:59,620 --> 00:11:04,360
solve a basic web challenge then you can

263
00:11:02,589 --> 00:11:06,060
try to speed on it and see how fast you

264
00:11:04,360 --> 00:11:08,730
are just to see you know I know my

265
00:11:06,060 --> 00:11:12,300
field but you can also use those to get

266
00:11:08,730 --> 00:11:15,480
into entirely new areas with my first

267
00:11:12,300 --> 00:11:17,459
CTF I used it to as an opportunity to go

268
00:11:15,480 --> 00:11:19,770
into binary exploitation I was coming

269
00:11:17,460 --> 00:11:21,780
from web programming and I did my first

270
00:11:19,770 --> 00:11:24,420
buffer overflow was something very basic

271
00:11:21,780 --> 00:11:27,300
just jump into the stack to some shell

272
00:11:24,420 --> 00:11:29,490
code and that took me eight probably

273
00:11:27,300 --> 00:11:31,469
days I think but I googled the hell out

274
00:11:29,490 --> 00:11:33,090
of it and in the end I was able to solve

275
00:11:31,470 --> 00:11:35,730
it and so I used this as an opportunity

276
00:11:33,090 --> 00:11:38,640
to as an entry point in an entirely new

277
00:11:35,730 --> 00:11:42,750
field that seemed so far away and mystic

278
00:11:38,640 --> 00:11:44,850
Ultimo then the other thing is that a

279
00:11:42,750 --> 00:11:47,040
lot of CTF vulnerability or challenges

280
00:11:44,850 --> 00:11:49,110
are kind of about esoteric stuff and

281
00:11:47,040 --> 00:11:51,569
this is what is criticised often about

282
00:11:49,110 --> 00:11:55,140
CTS that they don't reflect the real

283
00:11:51,570 --> 00:11:57,000
life and what's realistic but if I kind

284
00:11:55,140 --> 00:11:59,310
of understand where this is coming from

285
00:11:57,000 --> 00:12:01,080
but I also think those people that held

286
00:11:59,310 --> 00:12:04,109
this belief have never actually audited

287
00:12:01,080 --> 00:12:06,630
clients code because I have seen the

288
00:12:04,110 --> 00:12:08,790
weirdest kind of vulnerabilities in

289
00:12:06,630 --> 00:12:12,150
client code if you are looking for them

290
00:12:08,790 --> 00:12:14,790
and that means being creative and I

291
00:12:12,150 --> 00:12:18,449
agree with you that this particular CTF

292
00:12:14,790 --> 00:12:20,219
vulnerability will probably never be in

293
00:12:18,450 --> 00:12:22,830
an application that you were awed it

294
00:12:20,220 --> 00:12:24,960
ever but that's not the point the point

295
00:12:22,830 --> 00:12:27,240
is these vulnerabilities could

296
00:12:24,960 --> 00:12:30,030
theoretically exist and the question is

297
00:12:27,240 --> 00:12:32,400
not whether it's common or happens a lot

298
00:12:30,030 --> 00:12:34,800
the question is rather would you be able

299
00:12:32,400 --> 00:12:37,050
to identify them if they were in this

300
00:12:34,800 --> 00:12:39,750
kind of code and if you can't do this

301
00:12:37,050 --> 00:12:43,530
then you know you maybe don't do the the

302
00:12:39,750 --> 00:12:45,450
best job you could do and then the third

303
00:12:43,530 --> 00:12:48,420
point that is also very important to me

304
00:12:45,450 --> 00:12:49,710
is that with CTFs you will get a reality

305
00:12:48,420 --> 00:12:52,349
check you will get a punch in the face

306
00:12:49,710 --> 00:12:54,240
and you will fail because these

307
00:12:52,350 --> 00:12:56,970
challenges are really hard especially

308
00:12:54,240 --> 00:12:58,500
the creative esoteric ones is where you

309
00:12:56,970 --> 00:13:01,220
really have to understand a certain

310
00:12:58,500 --> 00:13:04,320
framework a system or language to its

311
00:13:01,220 --> 00:13:06,690
smallest corner that is so uncommon and

312
00:13:04,320 --> 00:13:08,970
this really shows how much knowledge you

313
00:13:06,690 --> 00:13:12,120
don't have or what skill you don't have

314
00:13:08,970 --> 00:13:15,180
and this is good for two reasons first

315
00:13:12,120 --> 00:13:18,540
of all we are often very arrogant we and

316
00:13:15,180 --> 00:13:19,839
I include myself here definitely I'm

317
00:13:18,540 --> 00:13:21,760
laughing at

318
00:13:19,840 --> 00:13:24,100
developers that write shitty code and

319
00:13:21,760 --> 00:13:25,840
the code I ordered that's just how it is

320
00:13:24,100 --> 00:13:27,610
but it kind of shouldn't be it's it's

321
00:13:25,840 --> 00:13:32,310
kind of a shitty thing to do it's very

322
00:13:27,610 --> 00:13:34,390
arrogant the other thing is that when

323
00:13:32,310 --> 00:13:36,699
especially in my line of work where I

324
00:13:34,390 --> 00:13:39,460
write a report an audit code I usually

325
00:13:36,700 --> 00:13:41,920
never get negative feedback of how good

326
00:13:39,460 --> 00:13:43,630
my job was I sent out those tickets they

327
00:13:41,920 --> 00:13:47,349
paid me because I didn't find it

328
00:13:43,630 --> 00:13:49,150
themselves or generally they want to

329
00:13:47,350 --> 00:13:51,040
know how they are doing

330
00:13:49,150 --> 00:13:52,900
so they trust me that I do a good job

331
00:13:51,040 --> 00:13:55,240
and find them and there's no way to

332
00:13:52,900 --> 00:13:57,810
verify if I actually did a good job and

333
00:13:55,240 --> 00:14:01,420
found a good amount of vulnerabilities

334
00:13:57,810 --> 00:14:03,189
and the good thing with CTFs is it's

335
00:14:01,420 --> 00:14:05,589
kind of like an exam where the solution

336
00:14:03,190 --> 00:14:07,720
is known when you know that these

337
00:14:05,590 --> 00:14:10,030
challenges are intentionally insecure

338
00:14:07,720 --> 00:14:13,000
and there there is something in there

339
00:14:10,030 --> 00:14:14,680
and it's kind of also not a huge

340
00:14:13,000 --> 00:14:16,930
application it's a small challenge that

341
00:14:14,680 --> 00:14:20,770
focuses on the small thing and you will

342
00:14:16,930 --> 00:14:23,829
still fail to find this bug and this is

343
00:14:20,770 --> 00:14:27,280
a good reflection yourself okay you know

344
00:14:23,830 --> 00:14:32,110
I may be not that good yet but you know

345
00:14:27,280 --> 00:14:35,709
I'm I'm learning so how do you get into

346
00:14:32,110 --> 00:14:37,810
CTF there's a website called CTF 10 the

347
00:14:35,710 --> 00:14:40,990
orc you can look on the upcoming events

348
00:14:37,810 --> 00:14:43,150
and generally look for the waited events

349
00:14:40,990 --> 00:14:44,620
generally the CTS are running for a few

350
00:14:43,150 --> 00:14:46,689
days like the one here at the conference

351
00:14:44,620 --> 00:14:49,210
just like two or three days maybe over a

352
00:14:46,690 --> 00:14:50,920
weekend and I say you look for the

353
00:14:49,210 --> 00:14:52,690
waited events because this means they

354
00:14:50,920 --> 00:14:54,910
have a score attached because they have

355
00:14:52,690 --> 00:14:57,580
proven themselves in the past obviously

356
00:14:54,910 --> 00:15:00,550
there are a lot of CTF and a lot of also

357
00:14:57,580 --> 00:15:02,410
not that great ones but if you look for

358
00:15:00,550 --> 00:15:05,349
those then you know that you have a high

359
00:15:02,410 --> 00:15:09,040
quality CTF they also might already be a

360
00:15:05,350 --> 00:15:12,010
bit too complicated they are still they

361
00:15:09,040 --> 00:15:13,599
are quite difficult so maybe you have to

362
00:15:12,010 --> 00:15:15,490
look for some other CTS but generally

363
00:15:13,600 --> 00:15:16,840
it's a good advice if you check out for

364
00:15:15,490 --> 00:15:21,490
the first time and want to get your feet

365
00:15:16,840 --> 00:15:23,530
wet look for those then I would suggest

366
00:15:21,490 --> 00:15:25,330
you just take out for example three

367
00:15:23,530 --> 00:15:27,640
hours of your Saturday afternoon and

368
00:15:25,330 --> 00:15:28,970
just pick out one challenge and dedicate

369
00:15:27,640 --> 00:15:31,759
the time to it

370
00:15:28,970 --> 00:15:34,759
don't play this challenge with an

371
00:15:31,759 --> 00:15:36,980
intention to solve it just you know take

372
00:15:34,759 --> 00:15:39,589
a lot of notes Google the hell out of it

373
00:15:36,980 --> 00:15:41,360
and write down everything you can think

374
00:15:39,589 --> 00:15:44,300
of every idea you have even though you

375
00:15:41,360 --> 00:15:46,189
might not be able to implement it you

376
00:15:44,300 --> 00:15:48,170
know if it's a binary you say ah this

377
00:15:46,189 --> 00:15:52,189
could be a buffer overflow but I have no

378
00:15:48,170 --> 00:15:53,599
clue what to do write this down and then

379
00:15:52,189 --> 00:15:56,060
accept that you would didn't solve it

380
00:15:53,600 --> 00:15:58,759
and afterwards and if you solve it great

381
00:15:56,060 --> 00:16:00,709
but you know most likely is be realistic

382
00:15:58,759 --> 00:16:02,480
that they are really hard and you might

383
00:16:00,709 --> 00:16:05,329
not solve them and then you go

384
00:16:02,480 --> 00:16:07,220
afterwards on IRC where the players are

385
00:16:05,329 --> 00:16:09,319
discussing their solutions and this is a

386
00:16:07,220 --> 00:16:11,300
great learning opportunity to just read

387
00:16:09,319 --> 00:16:13,310
the chat what people are sharing their

388
00:16:11,300 --> 00:16:15,410
scripts and write-ups and you can also

389
00:16:13,310 --> 00:16:18,290
look on CTF time and github and Twitter

390
00:16:15,410 --> 00:16:20,839
for those write-ups and then what you

391
00:16:18,290 --> 00:16:23,449
can do is you sit down and compare those

392
00:16:20,839 --> 00:16:25,699
write-ups with your notes that you have

393
00:16:23,449 --> 00:16:28,279
taken and this is then where you can

394
00:16:25,699 --> 00:16:31,370
learn because you can analyze where did

395
00:16:28,279 --> 00:16:33,470
I fail what did what did I miss what did

396
00:16:31,370 --> 00:16:35,750
I not know about was it just a

397
00:16:33,470 --> 00:16:37,189
carelessness that you ignored that you

398
00:16:35,750 --> 00:16:39,620
shouldn't have ignored or was it an

399
00:16:37,189 --> 00:16:41,269
entirely thing that you have never heard

400
00:16:39,620 --> 00:16:43,189
about before that that's even a thing

401
00:16:41,269 --> 00:16:48,170
and this is really where the learning

402
00:16:43,189 --> 00:16:49,699
that happens so that's good that I

403
00:16:48,170 --> 00:16:51,019
talked a bit faster because now we have

404
00:16:49,699 --> 00:16:54,349
a bit more time to look into more

405
00:16:51,019 --> 00:16:59,209
technical stuff it's a technical trick

406
00:16:54,350 --> 00:17:01,160
today after all so I will it's kind of

407
00:16:59,209 --> 00:17:03,410
like now some life over flow many

408
00:17:01,160 --> 00:17:05,178
episodes just we go over some examples

409
00:17:03,410 --> 00:17:07,579
really quickly and it's not meant to be

410
00:17:05,179 --> 00:17:09,949
that you understand them right away I

411
00:17:07,579 --> 00:17:12,740
hope they are not all stuff you already

412
00:17:09,949 --> 00:17:14,510
know and in generally it's just more

413
00:17:12,740 --> 00:17:16,250
like that you know that these kind of

414
00:17:14,510 --> 00:17:18,500
things exist and that you are aware of

415
00:17:16,250 --> 00:17:21,079
those and that when you test

416
00:17:18,500 --> 00:17:22,939
applications or when you play CTF that

417
00:17:21,079 --> 00:17:25,609
you have that in the back of your mind

418
00:17:22,939 --> 00:17:27,679
and when you think that could it be that

419
00:17:25,609 --> 00:17:32,020
that's what it could be then you can

420
00:17:27,679 --> 00:17:34,840
google and learn and read up on it again

421
00:17:32,020 --> 00:17:40,129
so the first example is about how Python

422
00:17:34,840 --> 00:17:42,709
compares objects or data so here's an

423
00:17:40,130 --> 00:17:44,679
example it's a website where there are

424
00:17:42,710 --> 00:17:48,140
you messages you are allowed to read

425
00:17:44,679 --> 00:17:50,210
only the last three messages the message

426
00:17:48,140 --> 00:17:52,279
1 & 2 are hidden already you are not

427
00:17:50,210 --> 00:17:53,570
allowed to read them I don't know what

428
00:17:52,279 --> 00:17:55,820
kind of application it is but that's

429
00:17:53,570 --> 00:17:58,039
that's why how its implemented so you

430
00:17:55,820 --> 00:18:00,289
can read the last three messages and

431
00:17:58,039 --> 00:18:03,140
there's also a JSON API where you can

432
00:18:00,289 --> 00:18:06,620
send in the ID of the message that you

433
00:18:03,140 --> 00:18:10,549
want to read so for example here we see

434
00:18:06,620 --> 00:18:12,469
how this works you send in the ID 5 in

435
00:18:10,549 --> 00:18:15,080
the in the JSON format and then you get

436
00:18:12,470 --> 00:18:17,179
back the message and if you would try to

437
00:18:15,080 --> 00:18:20,689
access the idea 1 it's forbidden

438
00:18:17,179 --> 00:18:22,669
obviously so here's the piece of code

439
00:18:20,690 --> 00:18:24,890
that is implementing this and there's a

440
00:18:22,669 --> 00:18:26,299
back in there and I won't let you take

441
00:18:24,890 --> 00:18:29,120
time to look at this because I don't

442
00:18:26,299 --> 00:18:31,309
want to waste time I'm telling you the

443
00:18:29,120 --> 00:18:32,270
title is already Python compares object

444
00:18:31,309 --> 00:18:35,840
so it has something to do with

445
00:18:32,270 --> 00:18:39,110
comparison in line 8 the post idea that

446
00:18:35,840 --> 00:18:41,990
you send in with the JSON request is

447
00:18:39,110 --> 00:18:43,820
coming in and then there after that is a

448
00:18:41,990 --> 00:18:45,440
comparison that checks if you are

449
00:18:43,820 --> 00:18:47,750
allowed to read the message or if it's

450
00:18:45,440 --> 00:18:51,080
forbidden and the checks if you're super

451
00:18:47,750 --> 00:18:52,640
user but you are not so bad luck but

452
00:18:51,080 --> 00:18:55,639
then it checks if the post ID you

453
00:18:52,640 --> 00:18:57,710
entered is larger than the amount of

454
00:18:55,640 --> 00:19:00,200
messages available minus 3 so you are

455
00:18:57,710 --> 00:19:02,809
only allowed to read the last 3 messages

456
00:19:00,200 --> 00:19:03,440
so we entered 5 and there were 5

457
00:19:02,809 --> 00:19:07,070
messages

458
00:19:03,440 --> 00:19:09,799
5 minus 3 is 2 so 5 is larger than 2 you

459
00:19:07,070 --> 00:19:11,799
are allowed to read it one is not larger

460
00:19:09,799 --> 00:19:14,000
than 2 so you are not allowed to read

461
00:19:11,799 --> 00:19:16,940
now let's have a look how comparison

462
00:19:14,000 --> 00:19:19,250
works in Python 5 is larger than 1

463
00:19:16,940 --> 00:19:22,220
that's true and one is larger than 5

464
00:19:19,250 --> 00:19:23,990
that's false now let's have a look at

465
00:19:22,220 --> 00:19:25,760
this what happens if you compare a

466
00:19:23,990 --> 00:19:28,730
string with an integer

467
00:19:25,760 --> 00:19:31,520
I mean it's nonsensical that that you do

468
00:19:28,730 --> 00:19:33,740
this but python has an answer for it so

469
00:19:31,520 --> 00:19:35,570
the string 5 is larger than 1 that kind

470
00:19:33,740 --> 00:19:38,929
of still makes sense but the string 1 is

471
00:19:35,570 --> 00:19:41,059
larger than 5 it's also true what is

472
00:19:38,929 --> 00:19:44,870
happening has to do with Python how

473
00:19:41,059 --> 00:19:46,879
Python works but what this means is if

474
00:19:44,870 --> 00:19:50,479
you enter obviously the number then the

475
00:19:46,880 --> 00:19:53,059
number 1 is not larger than 2 but the

476
00:19:50,480 --> 00:19:55,380
string 1 is larger than 2 and in this

477
00:19:53,059 --> 00:19:57,600
case the database layer where you

478
00:19:55,380 --> 00:19:59,730
request this ID doesn't care about the

479
00:19:57,600 --> 00:20:02,939
type of it so you are able to request

480
00:19:59,730 --> 00:20:06,420
the one but the Python code that

481
00:20:02,940 --> 00:20:10,680
implements this check is just happy to

482
00:20:06,420 --> 00:20:12,750
bypass that comparison and just for

483
00:20:10,680 --> 00:20:15,180
completeness sake in Python 3 Landry

484
00:20:12,750 --> 00:20:17,760
would throw an exception that you can't

485
00:20:15,180 --> 00:20:21,030
compare string with an integer that I

486
00:20:17,760 --> 00:20:22,410
guess how it should be but anyway if you

487
00:20:21,030 --> 00:20:24,510
didn't get it it's just a general

488
00:20:22,410 --> 00:20:26,430
example of validate your inputs if you

489
00:20:24,510 --> 00:20:28,260
expect a number make sure that it is a

490
00:20:26,430 --> 00:20:31,800
number and especially highlight this

491
00:20:28,260 --> 00:20:34,050
because of the JSON format because in

492
00:20:31,800 --> 00:20:36,389
the basic web post requests that we are

493
00:20:34,050 --> 00:20:38,310
used to with URL encoding we kind of

494
00:20:36,390 --> 00:20:40,410
expect everything to be a string and we

495
00:20:38,310 --> 00:20:42,300
kind of do this automatically but with

496
00:20:40,410 --> 00:20:45,240
Jason you suddenly have different types

497
00:20:42,300 --> 00:20:47,850
you can have numbers you can have

498
00:20:45,240 --> 00:20:50,970
strings you can have lists for example

499
00:20:47,850 --> 00:20:54,360
and so our developer might have the

500
00:20:50,970 --> 00:20:56,220
expectation that a certain number value

501
00:20:54,360 --> 00:20:59,870
that is coming in is from a certain type

502
00:20:56,220 --> 00:21:02,280
and might not do this conversion

503
00:20:59,870 --> 00:21:05,189
automatically how maybe they used to be

504
00:21:02,280 --> 00:21:06,629
and so the story is just here you know

505
00:21:05,190 --> 00:21:09,180
make sure to check everything before you

506
00:21:06,630 --> 00:21:11,820
process it and also I want to be honest

507
00:21:09,180 --> 00:21:14,400
do I have I ever seen this in real life

508
00:21:11,820 --> 00:21:19,950
in a application and I have to be honest

509
00:21:14,400 --> 00:21:22,890
and say no in every Python website or

510
00:21:19,950 --> 00:21:25,380
code that I get to audit I specifically

511
00:21:22,890 --> 00:21:27,960
look for these type confusion kind of

512
00:21:25,380 --> 00:21:30,330
things and I've never seen it but the

513
00:21:27,960 --> 00:21:31,260
point is not if this is is this a likely

514
00:21:30,330 --> 00:21:33,659
vulnerability

515
00:21:31,260 --> 00:21:35,580
the point is would you have noticed this

516
00:21:33,660 --> 00:21:37,920
vulnerability what you have tested for

517
00:21:35,580 --> 00:21:40,199
it would you have tried to enter

518
00:21:37,920 --> 00:21:42,540
different types in this JSON format

519
00:21:40,200 --> 00:21:44,580
which we have tried or would you have

520
00:21:42,540 --> 00:21:46,280
known that these comparisons could be

521
00:21:44,580 --> 00:21:50,340
screwed up like this in Python and

522
00:21:46,280 --> 00:21:51,780
that's kind of the story here and it's

523
00:21:50,340 --> 00:21:54,000
great that we have more time so we can

524
00:21:51,780 --> 00:21:56,310
get more so format string

525
00:21:54,000 --> 00:21:57,960
vulnerabilities if you would do binary

526
00:21:56,310 --> 00:21:59,919
then it's a basic thing and you know

527
00:21:57,960 --> 00:22:03,400
about it if not it's

528
00:21:59,920 --> 00:22:06,100
maybe hopefully interesting so when you

529
00:22:03,400 --> 00:22:08,500
program see for example printf the first

530
00:22:06,100 --> 00:22:10,540
part of printf where you specify how you

531
00:22:08,500 --> 00:22:13,210
want to want the data to be displayed as

532
00:22:10,540 --> 00:22:16,060
a format string and here's another

533
00:22:13,210 --> 00:22:18,280
example with two variables present so

534
00:22:16,060 --> 00:22:20,710
you want this one to be replaced with a

535
00:22:18,280 --> 00:22:25,600
decimal representation of the number and

536
00:22:20,710 --> 00:22:30,130
this one to replace with the hex this

537
00:22:25,600 --> 00:22:31,810
play off of this number here and the

538
00:22:30,130 --> 00:22:36,960
former string vulnerability happens when

539
00:22:31,810 --> 00:22:39,220
you can control this format string and

540
00:22:36,960 --> 00:22:40,720
so here's kind of how this looks like

541
00:22:39,220 --> 00:22:43,660
with a simplified stick in memory

542
00:22:40,720 --> 00:22:45,610
because printf has a variable amount of

543
00:22:43,660 --> 00:22:48,640
parameters and it basically just trusts

544
00:22:45,610 --> 00:22:51,219
that everything is on the stick so if

545
00:22:48,640 --> 00:22:52,960
printf encounters a percentage D it will

546
00:22:51,220 --> 00:22:55,150
take the first number from the stick and

547
00:22:52,960 --> 00:22:57,610
display it and then it encounters the

548
00:22:55,150 --> 00:22:59,950
percent as X takes it from the stack and

549
00:22:57,610 --> 00:23:01,929
displays it and you can imagine that

550
00:22:59,950 --> 00:23:04,600
when you can now control this part of

551
00:23:01,930 --> 00:23:07,330
the string and you enter as an attacker

552
00:23:04,600 --> 00:23:09,580
just a lot of X that you start consuming

553
00:23:07,330 --> 00:23:12,520
a lot of values from the stick and you

554
00:23:09,580 --> 00:23:15,070
will leak a lot of data from it so this

555
00:23:12,520 --> 00:23:17,500
can be used to bypass a SLR for example

556
00:23:15,070 --> 00:23:20,020
because we know that on the stick is for

557
00:23:17,500 --> 00:23:21,970
gamma be return pointer so you have at

558
00:23:20,020 --> 00:23:24,129
least a valid address into valid code

559
00:23:21,970 --> 00:23:26,740
and from based on that you can most

560
00:23:24,130 --> 00:23:29,620
likely get around the a s all a SLR

561
00:23:26,740 --> 00:23:32,230
issue but there are even modifiers that

562
00:23:29,620 --> 00:23:34,030
allows you to write into memory and it

563
00:23:32,230 --> 00:23:38,770
can be even used to completely take over

564
00:23:34,030 --> 00:23:41,260
the control flow of a program but this

565
00:23:38,770 --> 00:23:43,629
is not only the idea the abstract the

566
00:23:41,260 --> 00:23:47,020
idea of controlling the format stuff is

567
00:23:43,630 --> 00:23:48,880
not only an issue for see here's a

568
00:23:47,020 --> 00:23:50,710
Python example and I mean it's a

569
00:23:48,880 --> 00:23:52,420
completely ridiculous example who would

570
00:23:50,710 --> 00:23:54,370
write this kind of code but the question

571
00:23:52,420 --> 00:23:57,040
is would you realize that this is

572
00:23:54,370 --> 00:23:59,379
happening if you would audit it and in

573
00:23:57,040 --> 00:24:02,730
this case we don't look so much into it

574
00:23:59,380 --> 00:24:07,360
there's a global conflict variable and

575
00:24:02,730 --> 00:24:09,400
there with dot so you have a string and

576
00:24:07,360 --> 00:24:11,229
dot format and this is then the format

577
00:24:09,400 --> 00:24:13,380
string part of it and this is prepare

578
00:24:11,230 --> 00:24:16,740
response it's coming from here long

579
00:24:13,380 --> 00:24:19,470
short user can enter format parameters

580
00:24:16,740 --> 00:24:21,180
like curly braces temp or place into

581
00:24:19,470 --> 00:24:25,050
that part and because of format it gets

582
00:24:21,180 --> 00:24:26,850
interpreted and here's the idea that you

583
00:24:25,050 --> 00:24:28,520
do the prepare response because you want

584
00:24:26,850 --> 00:24:31,320
to pre-paint the name of the application

585
00:24:28,520 --> 00:24:33,060
but you also pass in what an attacker

586
00:24:31,320 --> 00:24:34,710
could potentially control and so you can

587
00:24:33,060 --> 00:24:38,310
access other conflict parts I mean it's

588
00:24:34,710 --> 00:24:41,220
a ridiculous example but the point is

589
00:24:38,310 --> 00:24:43,139
that if you have something like this in

590
00:24:41,220 --> 00:24:46,710
Python it's also kind of a format string

591
00:24:43,140 --> 00:24:50,540
vulnerability and you are able to then

592
00:24:46,710 --> 00:24:54,050
just read and print out the secret key

593
00:24:50,540 --> 00:24:56,850
this if you look at this in your web

594
00:24:54,050 --> 00:24:58,379
into web security you might think this

595
00:24:56,850 --> 00:25:00,659
looks very similar to a template

596
00:24:58,380 --> 00:25:03,000
injection and in fact if you think about

597
00:25:00,660 --> 00:25:05,610
it template injection also just kind of

598
00:25:03,000 --> 00:25:09,030
a form of formal string the template

599
00:25:05,610 --> 00:25:10,830
specifies how the site is formatted okay

600
00:25:09,030 --> 00:25:12,660
so if you didn't get it

601
00:25:10,830 --> 00:25:15,030
format strings can be abused make sure

602
00:25:12,660 --> 00:25:16,980
that they are usually not controlled by

603
00:25:15,030 --> 00:25:18,540
an attacker often they are just about

604
00:25:16,980 --> 00:25:20,220
leaking data but sometimes it can be

605
00:25:18,540 --> 00:25:22,470
even worse depending on what kind of

606
00:25:20,220 --> 00:25:25,080
template engine or whatever you have how

607
00:25:22,470 --> 00:25:27,750
to fix this yeah keep those strings of a

608
00:25:25,080 --> 00:25:30,060
static and have you ever seen this kind

609
00:25:27,750 --> 00:25:32,580
of double format string from Python I

610
00:25:30,060 --> 00:25:34,980
have also not seen it again the point is

611
00:25:32,580 --> 00:25:40,500
would you be able to see it if you audit

612
00:25:34,980 --> 00:25:42,150
this kind of application okay another

613
00:25:40,500 --> 00:25:45,960
example has a tightly a cone ski

614
00:25:42,150 --> 00:25:48,090
hierarchy so rising stack is apparently

615
00:25:45,960 --> 00:25:50,160
a company that offers nodejs

616
00:25:48,090 --> 00:25:53,159
trainings and consultant and development

617
00:25:50,160 --> 00:25:55,410
and they have this nodejs module called

618
00:25:53,160 --> 00:25:58,530
protect that apparently protects against

619
00:25:55,410 --> 00:26:01,650
or detects XSS and SQL injections and

620
00:25:58,530 --> 00:26:05,370
they are referencing and based this work

621
00:26:01,650 --> 00:26:07,860
on an article from 2004 by Symantec and

622
00:26:05,370 --> 00:26:09,600
you can imagine if that if it's at an

623
00:26:07,860 --> 00:26:13,320
old an article is probably pretty bad

624
00:26:09,600 --> 00:26:15,959
and that site suggested to use some

625
00:26:13,320 --> 00:26:17,310
regular expressions so this is the

626
00:26:15,960 --> 00:26:20,610
regular expression that is supposed to

627
00:26:17,310 --> 00:26:22,260
detect XSS attacks there's a cool

628
00:26:20,610 --> 00:26:25,469
website called debug X where you can

629
00:26:22,260 --> 00:26:26,879
build the finest state automaton based

630
00:26:25,470 --> 00:26:29,430
on this regular expression so

631
00:26:26,880 --> 00:26:31,440
very easy to see what kind of strings

632
00:26:29,430 --> 00:26:34,020
are matched by this and what strings are

633
00:26:31,440 --> 00:26:37,110
not and so it's pretty clear that for

634
00:26:34,020 --> 00:26:40,139
example script another one the script

635
00:26:37,110 --> 00:26:43,530
parts are matched its opening an

636
00:26:40,140 --> 00:26:46,560
optional slash then some characters and

637
00:26:43,530 --> 00:26:49,080
then closing the tag again and it's also

638
00:26:46,560 --> 00:26:52,110
clear how that can be easily bypassed

639
00:26:49,080 --> 00:26:54,570
you just enter space because this one

640
00:26:52,110 --> 00:26:57,540
doesn't match a space and so it's

641
00:26:54,570 --> 00:26:58,889
useless and the moral of the story here

642
00:26:57,540 --> 00:27:00,960
and where the title is coming from is

643
00:26:58,890 --> 00:27:02,970
the consu key hierarchy because in

644
00:27:00,960 --> 00:27:06,090
formal if you have studied computer

645
00:27:02,970 --> 00:27:08,040
science you are aware that these the

646
00:27:06,090 --> 00:27:10,679
study of formal languages and that

647
00:27:08,040 --> 00:27:12,750
certain grammars languages are more

648
00:27:10,680 --> 00:27:15,090
powerful than others and require more

649
00:27:12,750 --> 00:27:17,400
complicated parsing than others and so

650
00:27:15,090 --> 00:27:19,129
for example regular expression are kind

651
00:27:17,400 --> 00:27:21,300
of a really good example of what a

652
00:27:19,130 --> 00:27:22,800
regular language is because it

653
00:27:21,300 --> 00:27:25,830
implements this finite state automaton

654
00:27:22,800 --> 00:27:29,460
that you just saw from somebody buggies

655
00:27:25,830 --> 00:27:31,590
and the hierarchy also tells you that if

656
00:27:29,460 --> 00:27:34,230
you have a more powerful language then

657
00:27:31,590 --> 00:27:36,720
you can power so implement the lower

658
00:27:34,230 --> 00:27:39,110
less powerful language but never the

659
00:27:36,720 --> 00:27:41,940
reverse a regular language can never

660
00:27:39,110 --> 00:27:44,429
fully implement for example context-free

661
00:27:41,940 --> 00:27:46,170
language and HTML and SQL are so

662
00:27:44,430 --> 00:27:48,630
complicated that they are at least

663
00:27:46,170 --> 00:27:51,030
context-free and not to mention that

664
00:27:48,630 --> 00:27:53,580
browsers are screwing with HTML anyway

665
00:27:51,030 --> 00:27:55,560
you don't even have to write valid HTML

666
00:27:53,580 --> 00:27:59,780
and and still work so you know it's knit

667
00:27:55,560 --> 00:27:59,780
it's a mathematically impossible task

668
00:28:00,170 --> 00:28:06,720
yeah so if you didn't get it well don't

669
00:28:04,050 --> 00:28:08,790
use reg X especially if you want to try

670
00:28:06,720 --> 00:28:10,590
to match very complicated languages and

671
00:28:08,790 --> 00:28:14,760
languages where you have for example

672
00:28:10,590 --> 00:28:17,429
opening and closing records or tags like

673
00:28:14,760 --> 00:28:19,020
XML these are always much more powerful

674
00:28:17,430 --> 00:28:20,760
than what a regular expression could

675
00:28:19,020 --> 00:28:22,860
implement because you would need an

676
00:28:20,760 --> 00:28:25,320
additional stick to remember what is

677
00:28:22,860 --> 00:28:27,389
open and what has to be closed again and

678
00:28:25,320 --> 00:28:30,360
in general how do you fix this well just

679
00:28:27,390 --> 00:28:32,820
don't try to detect XSL or SQL at all

680
00:28:30,360 --> 00:28:34,860
just you know try to fix it that's more

681
00:28:32,820 --> 00:28:37,139
like a defense and death kind of thing

682
00:28:34,860 --> 00:28:39,060
you actually want to focus more on just

683
00:28:37,140 --> 00:28:41,840
making sure that this doesn't have met

684
00:28:39,060 --> 00:28:45,840
on and I can really

685
00:28:41,840 --> 00:28:48,959
recommend debuggers okay so you can

686
00:28:45,840 --> 00:28:51,480
maybe get an one other example here's

687
00:28:48,960 --> 00:28:53,220
like some kind of language sandbox

688
00:28:51,480 --> 00:28:57,090
escape what do i mean by that

689
00:28:53,220 --> 00:29:00,299
so sometimes applications implement some

690
00:28:57,090 --> 00:29:02,908
kind of security sandbox so sometimes

691
00:29:00,299 --> 00:29:06,059
you want an application where people can

692
00:29:02,909 --> 00:29:09,330
run arbitrary code but you want it to be

693
00:29:06,059 --> 00:29:11,850
safe code a good example is the browser

694
00:29:09,330 --> 00:29:13,799
where you run code on your kind of your

695
00:29:11,850 --> 00:29:16,289
machine but you want it to be secure and

696
00:29:13,799 --> 00:29:18,029
especially Java applets for example and

697
00:29:16,289 --> 00:29:20,519
Java is a very powerful language with a

698
00:29:18,029 --> 00:29:22,950
lot of low-level access to the system

699
00:29:20,519 --> 00:29:26,879
and you want this to run securely and

700
00:29:22,950 --> 00:29:28,470
then you have but this comes up in many

701
00:29:26,879 --> 00:29:31,529
different places so for example

702
00:29:28,470 --> 00:29:34,230
angularjs expressions you can define

703
00:29:31,529 --> 00:29:36,750
javascript in these expressions but you

704
00:29:34,230 --> 00:29:40,409
want this not to be fully JavaScript

705
00:29:36,750 --> 00:29:43,169
otherwise people can use it to do XSS so

706
00:29:40,409 --> 00:29:45,389
you want to kind of sandbox that so that

707
00:29:43,169 --> 00:29:46,860
they can only do what you know for the

708
00:29:45,389 --> 00:29:49,139
application and not something very

709
00:29:46,860 --> 00:29:50,939
intrusive and then you can also play

710
00:29:49,139 --> 00:29:53,129
with that there are CTF challenges where

711
00:29:50,940 --> 00:29:55,379
people implement a Python sandbox where

712
00:29:53,129 --> 00:29:57,899
you can submit Python code but you can't

713
00:29:55,379 --> 00:30:01,080
for example import OS and then execute

714
00:29:57,899 --> 00:30:04,350
system so here's the example of

715
00:30:01,080 --> 00:30:05,730
angularjs the expression would be you

716
00:30:04,350 --> 00:30:08,090
would write this and it would be

717
00:30:05,730 --> 00:30:10,669
evaluate like this and in order to

718
00:30:08,090 --> 00:30:13,230
support this complex expression

719
00:30:10,669 --> 00:30:16,289
angularjs kind of just interprets this

720
00:30:13,230 --> 00:30:18,629
as JavaScript it's not just a full eval

721
00:30:16,289 --> 00:30:20,580
because they at least in some versions

722
00:30:18,629 --> 00:30:22,559
try to make sure that it can't be abused

723
00:30:20,580 --> 00:30:26,220
but this is the first version where they

724
00:30:22,559 --> 00:30:28,408
didn't take care of this and so the

725
00:30:26,220 --> 00:30:32,179
bypass for this is to break out and get

726
00:30:28,409 --> 00:30:35,429
access to very interesting functions or

727
00:30:32,179 --> 00:30:37,710
objects on the in the dom is for example

728
00:30:35,429 --> 00:30:39,480
you want to get access to like window or

729
00:30:37,710 --> 00:30:42,720
document or something like this and in

730
00:30:39,480 --> 00:30:44,700
this way we can go from constructor to

731
00:30:42,720 --> 00:30:46,730
constructor and then call alert and if

732
00:30:44,700 --> 00:30:50,250
you look at this how this works

733
00:30:46,730 --> 00:30:51,500
you start by a variable and constructor

734
00:30:50,250 --> 00:30:54,140
of this variable is the number

735
00:30:51,500 --> 00:30:56,090
constructor and

736
00:30:54,140 --> 00:30:59,030
of the number constructor is the

737
00:30:56,090 --> 00:31:01,820
function constructor and you can pass in

738
00:30:59,030 --> 00:31:04,790
a string that is code that you want this

739
00:31:01,820 --> 00:31:06,830
function to be so this now creates a new

740
00:31:04,790 --> 00:31:10,549
function where the code is alert and

741
00:31:06,830 --> 00:31:12,559
then you can just call it here's a

742
00:31:10,549 --> 00:31:15,740
Python sandbox example where you can't

743
00:31:12,559 --> 00:31:19,549
just easily import OS to call system

744
00:31:15,740 --> 00:31:23,630
because that is built-in is disallowed

745
00:31:19,549 --> 00:31:25,460
and it's removed but you can from an

746
00:31:23,630 --> 00:31:27,650
empty Dick you go over the class the

747
00:31:25,460 --> 00:31:29,360
base you list the subclasses you find an

748
00:31:27,650 --> 00:31:32,419
interesting subclass you take its

749
00:31:29,360 --> 00:31:34,309
modules you take its built-ins and then

750
00:31:32,419 --> 00:31:37,730
from that one you can get to the import

751
00:31:34,309 --> 00:31:40,549
and OS and the one that was used here is

752
00:31:37,730 --> 00:31:41,960
the warnings catch warnings object it

753
00:31:40,549 --> 00:31:44,660
mean it looks crazy but the moral of the

754
00:31:41,960 --> 00:31:47,450
story is that you can you know from you

755
00:31:44,660 --> 00:31:49,549
can kind of escape out of this not

756
00:31:47,450 --> 00:31:51,530
allowed object by trying a different

757
00:31:49,549 --> 00:31:54,500
path through the objects to get where

758
00:31:51,530 --> 00:31:56,090
you want to be and this is a kind of the

759
00:31:54,500 --> 00:31:57,770
same thing with Java applets that were

760
00:31:56,090 --> 00:32:00,500
used in drive-by downloads on your

761
00:31:57,770 --> 00:32:01,940
machine they were I mean sometimes they

762
00:32:00,500 --> 00:32:04,429
were a memory corruption but sometimes

763
00:32:01,940 --> 00:32:06,950
they were just bypassing the security

764
00:32:04,429 --> 00:32:09,470
manager kind of thing and in this case

765
00:32:06,950 --> 00:32:12,890
for example this kind this proof of

766
00:32:09,470 --> 00:32:14,690
concept code is loading a class that you

767
00:32:12,890 --> 00:32:16,340
are usually shouldn't be allowed to load

768
00:32:14,690 --> 00:32:20,780
and it's basically doing the same thing

769
00:32:16,340 --> 00:32:24,399
by traversing through all the objects

770
00:32:20,780 --> 00:32:28,639
available and somehow getting to this

771
00:32:24,400 --> 00:32:31,179
fine class method that you shouldn't be

772
00:32:28,640 --> 00:32:33,799
able allow to get access to and

773
00:32:31,179 --> 00:32:36,080
basically the idea behind all of these

774
00:32:33,799 --> 00:32:38,480
sandbox escapes and this can be again be

775
00:32:36,080 --> 00:32:42,500
generalized it doesn't matter if it's

776
00:32:38,480 --> 00:32:44,840
JavaScript or Python or Java itself it's

777
00:32:42,500 --> 00:32:46,610
basically you have these complicated to

778
00:32:44,840 --> 00:32:49,490
object-oriented languages that have

779
00:32:46,610 --> 00:32:51,649
references to all these objects and all

780
00:32:49,490 --> 00:32:53,660
you do is you try to get to this magic

781
00:32:51,650 --> 00:32:56,419
object you are not allowed to access and

782
00:32:53,660 --> 00:32:58,010
you try to find a way through a lot of

783
00:32:56,419 --> 00:33:01,429
different objects to kind of try to

784
00:32:58,010 --> 00:33:03,530
traverse the jungle of objects to get to

785
00:33:01,429 --> 00:33:05,419
these juicy classes and that's basic

786
00:33:03,530 --> 00:33:07,490
what is happening with any sandbox

787
00:33:05,419 --> 00:33:12,020
escape so you can generalize this and

788
00:33:07,490 --> 00:33:13,340
this thinking to any other example okay

789
00:33:12,020 --> 00:33:15,860
so I didn't get it

790
00:33:13,340 --> 00:33:17,959
implementing sandbox is hard generally

791
00:33:15,860 --> 00:33:21,050
don't try to run arbitrary code if you

792
00:33:17,960 --> 00:33:23,660
do it expect a huge overhead that you

793
00:33:21,050 --> 00:33:26,750
have to fix stuff like this

794
00:33:23,660 --> 00:33:29,270
I'm already over my time I'm sorry if

795
00:33:26,750 --> 00:33:30,770
you want to stay in contact you can find

796
00:33:29,270 --> 00:33:32,270
me on Twitter like overflow you can also

797
00:33:30,770 --> 00:33:34,400
subscribe to my youtube channel we have

798
00:33:32,270 --> 00:33:36,320
a lot of technical examples and I'm also

799
00:33:34,400 --> 00:33:38,480
happy to hear by email so if you have

800
00:33:36,320 --> 00:33:41,120
feedback of the stork or generally

801
00:33:38,480 --> 00:33:43,160
questions and stuff I try to answer to

802
00:33:41,120 --> 00:33:47,010
everybody thank you very much for having

803
00:33:43,160 --> 00:33:51,760
me and I guess that's it thank you

804
00:33:47,010 --> 00:33:51,760
[Applause]

