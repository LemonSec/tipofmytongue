1
00:00:02,530 --> 00:00:08,950
he is currently working as a technical

2
00:00:04,840 --> 00:00:11,950
leader with Cisco towels Manya thank you

3
00:00:08,950 --> 00:00:14,230
hi everybody if I knew that they will

4
00:00:11,950 --> 00:00:16,390
read my description that I sent about

5
00:00:14,230 --> 00:00:21,520
like a short biography I'll probably put

6
00:00:16,390 --> 00:00:24,690
that a lot more but like the thing I

7
00:00:21,520 --> 00:00:26,980
would put likely is that I was a

8
00:00:24,690 --> 00:00:30,550
something that I mentioned when you you

9
00:00:26,980 --> 00:00:33,010
need to know some like a curious fact

10
00:00:30,550 --> 00:00:34,839
about a person you know team building

11
00:00:33,010 --> 00:00:38,379
access that kind of thing I used to be

12
00:00:34,839 --> 00:00:41,858
an opera singer as well when I was 12

13
00:00:38,379 --> 00:00:46,089
actually I was part of a Croatian

14
00:00:41,859 --> 00:00:48,760
national theater children's choir but

15
00:00:46,089 --> 00:00:51,579
then I boys when I voice mood mutated

16
00:00:48,760 --> 00:00:55,059
then that's where my opera career ended

17
00:00:51,579 --> 00:00:57,339
and so I had to become like a malva

18
00:00:55,059 --> 00:01:00,539
researcher in the end not that great but

19
00:00:57,339 --> 00:01:05,110
yeah I was hoping so for so much more so

20
00:01:00,539 --> 00:01:06,850
what are we going to cover today we'll

21
00:01:05,110 --> 00:01:08,950
just go into the like a brief

22
00:01:06,850 --> 00:01:13,240
introduction of both outside languages

23
00:01:08,950 --> 00:01:16,210
and then like general idea of how can we

24
00:01:13,240 --> 00:01:18,939
obfuscate the author-it code or how the

25
00:01:16,210 --> 00:01:22,329
malware writers are trying to do it then

26
00:01:18,939 --> 00:01:24,279
we'll talk about classic like a process

27
00:01:22,329 --> 00:01:28,899
injection metals which are required by

28
00:01:24,280 --> 00:01:32,710
by cryptic malware to actually launch a

29
00:01:28,899 --> 00:01:34,990
P payload in the end we'll go through a

30
00:01:32,710 --> 00:01:36,820
cyclone case study which is one of the

31
00:01:34,990 --> 00:01:39,280
case studies just to show you like the

32
00:01:36,820 --> 00:01:41,740
an example in the wild and a couple and

33
00:01:39,280 --> 00:01:45,700
and then I will mention cup a few tools

34
00:01:41,740 --> 00:01:48,130
that if you are into analyzing like

35
00:01:45,700 --> 00:01:50,799
malware and trying to analyze also it

36
00:01:48,130 --> 00:01:54,100
malware that would or could hopefully

37
00:01:50,799 --> 00:01:58,509
help you with the actual analysis

38
00:01:54,100 --> 00:02:02,259
process so what is also a don't know how

39
00:01:58,509 --> 00:02:04,210
many people know about Auto it yeah not

40
00:02:02,259 --> 00:02:05,590
not too many but like I'm sure the

41
00:02:04,210 --> 00:02:08,919
people who analyzed malware are

42
00:02:05,590 --> 00:02:12,459
reasonably familiar with it so this is a

43
00:02:08,919 --> 00:02:14,799
little language that's developed in 1999

44
00:02:12,459 --> 00:02:16,480
by Jonathan Bennett from Birmingham in

45
00:02:14,800 --> 00:02:18,430
the UK

46
00:02:16,480 --> 00:02:21,819
I think at the time they were developing

47
00:02:18,430 --> 00:02:24,790
so to make a better VBS than the VBS was

48
00:02:21,819 --> 00:02:27,010
and largely for automating graphical

49
00:02:24,790 --> 00:02:29,609
user interfaces and some people are

50
00:02:27,010 --> 00:02:32,380
using it even today for let's say

51
00:02:29,610 --> 00:02:34,239
installing installers like automated

52
00:02:32,380 --> 00:02:38,290
installing of some of these like

53
00:02:34,239 --> 00:02:41,680
installers it has a extensive library of

54
00:02:38,290 --> 00:02:43,870
user-defined functions and it's very it

55
00:02:41,680 --> 00:02:46,420
has a very strong community forum based

56
00:02:43,870 --> 00:02:48,370
community that contributes with the

57
00:02:46,420 --> 00:02:51,250
user-defined functions and with bug

58
00:02:48,370 --> 00:02:53,500
reports and so on there's even add

59
00:02:51,250 --> 00:02:57,040
there's even a real ransomware written

60
00:02:53,500 --> 00:02:58,930
in in also it this is an open source

61
00:02:57,040 --> 00:03:01,540
project just to show that although it is

62
00:02:58,930 --> 00:03:03,670
like a fully fully functional language

63
00:03:01,540 --> 00:03:05,590
this is not you know very super grade

64
00:03:03,670 --> 00:03:08,319
but you could see that the prices is

65
00:03:05,590 --> 00:03:10,840
equivalent of $200 in Bitcoin roughly

66
00:03:08,319 --> 00:03:13,298
equivalent put every other brand

67
00:03:10,840 --> 00:03:15,880
somewhere as where we use so what are

68
00:03:13,299 --> 00:03:18,910
the strengths of also it I I kind of

69
00:03:15,880 --> 00:03:21,970
highlighted in orange reddish thing

70
00:03:18,910 --> 00:03:24,070
which the functions are used by Marvel

71
00:03:21,970 --> 00:03:27,280
writers apart for simulating the

72
00:03:24,070 --> 00:03:30,549
keystrokes you cannot manipulate Windows

73
00:03:27,280 --> 00:03:32,950
processes there is a full network stack

74
00:03:30,549 --> 00:03:36,299
you can directly call windows dll's

75
00:03:32,950 --> 00:03:39,730
which will prove to be crucial with the

76
00:03:36,299 --> 00:03:42,640
process injection and it also has a very

77
00:03:39,730 --> 00:03:45,100
well-documented help file which will

78
00:03:42,640 --> 00:03:47,410
help you to develop your own script so

79
00:03:45,100 --> 00:03:50,470
just an example of how the script look

80
00:03:47,410 --> 00:03:52,450
like it's a very much basic language so

81
00:03:50,470 --> 00:03:54,850
it has it also has some some of the

82
00:03:52,450 --> 00:03:56,320
weaknesses from the sort of mal variety

83
00:03:54,850 --> 00:03:58,930
point of view it's an interpreted

84
00:03:56,320 --> 00:04:00,370
language so when you have a when you

85
00:03:58,930 --> 00:04:02,500
have a script code you can obviously

86
00:04:00,370 --> 00:04:04,690
read the code and you can modified it

87
00:04:02,500 --> 00:04:07,720
the way it suits you so for example if

88
00:04:04,690 --> 00:04:10,180
there's anything like a an encrypted a

89
00:04:07,720 --> 00:04:13,150
file embedded in the script then you

90
00:04:10,180 --> 00:04:15,010
could easily change the script so it can

91
00:04:13,150 --> 00:04:17,079
just simply dump the file to the disk

92
00:04:15,010 --> 00:04:21,668
and then you can analyze it as a as a PE

93
00:04:17,079 --> 00:04:24,280
file there's no powerful data structure

94
00:04:21,668 --> 00:04:26,650
so there's no like list or there's no

95
00:04:24,280 --> 00:04:28,840
like associative there are no hashes or

96
00:04:26,650 --> 00:04:30,190
things like that like in other scripting

97
00:04:28,840 --> 00:04:32,679
languages all in that sense it's very

98
00:04:30,190 --> 00:04:35,350
basic and we'll see that they make that

99
00:04:32,680 --> 00:04:37,680
prove to be a bit of a problem with

100
00:04:35,350 --> 00:04:40,150
analyzing in the in the end and then

101
00:04:37,680 --> 00:04:42,699
there's no there are no night native

102
00:04:40,150 --> 00:04:45,010
functions for like standard ASCII type

103
00:04:42,699 --> 00:04:49,240
encoding that I used in in the world

104
00:04:45,010 --> 00:04:51,190
like base 60 64 this is just an example

105
00:04:49,240 --> 00:04:53,320
that I was supposed to be mentioning

106
00:04:51,190 --> 00:04:56,139
before and obviously I've written this

107
00:04:53,320 --> 00:04:58,150
one you could see how the global vary

108
00:04:56,139 --> 00:05:00,130
you have been include at the beginning

109
00:04:58,150 --> 00:05:02,560
to include some of the constant that are

110
00:05:00,130 --> 00:05:06,850
used by some of the functions and then

111
00:05:02,560 --> 00:05:08,830
like you define variable scopes these

112
00:05:06,850 --> 00:05:10,630
are the usual names of the variables

113
00:05:08,830 --> 00:05:12,580
that I used almost every single of my

114
00:05:10,630 --> 00:05:16,570
scripts I don't know why I always use

115
00:05:12,580 --> 00:05:18,760
Cammy impaired or so and and this is

116
00:05:16,570 --> 00:05:21,159
just like an example to tried something

117
00:05:18,760 --> 00:05:23,919
on the screen using cones alright and

118
00:05:21,160 --> 00:05:26,169
you know it gets all the hard drives and

119
00:05:23,919 --> 00:05:30,669
then prints them out to to find so it's

120
00:05:26,169 --> 00:05:33,219
very very very simple so how the MAL

121
00:05:30,669 --> 00:05:35,590
varieties are trying to obfuscate it's

122
00:05:33,220 --> 00:05:39,030
it's a classical like any scripting

123
00:05:35,590 --> 00:05:41,469
language like JavaScript or VB script

124
00:05:39,030 --> 00:05:44,638
PowerShell is being obfuscated by

125
00:05:41,470 --> 00:05:47,740
choosing like a random variable names

126
00:05:44,639 --> 00:05:50,289
inserting John code at the beginning or

127
00:05:47,740 --> 00:05:52,599
anywhere within the code the whole idea

128
00:05:50,289 --> 00:05:56,800
of obfuscating of course is to two folds

129
00:05:52,599 --> 00:05:58,030
one is to make your analysis difficult

130
00:05:56,800 --> 00:06:00,849
so when you read the code is more

131
00:05:58,030 --> 00:06:03,909
difficult to understand and the second

132
00:06:00,849 --> 00:06:06,510
is when you have anti-malware detection

133
00:06:03,910 --> 00:06:10,060
that uses let's say string type patterns

134
00:06:06,510 --> 00:06:13,479
that you want you will be able to let's

135
00:06:10,060 --> 00:06:15,340
say make at the beginning not detected

136
00:06:13,479 --> 00:06:19,570
malware which which would then easily be

137
00:06:15,340 --> 00:06:21,219
easily be detected in the end so those

138
00:06:19,570 --> 00:06:26,139
are the kind of classical way they're

139
00:06:21,220 --> 00:06:28,000
trying to use it and an example is this

140
00:06:26,139 --> 00:06:30,820
like you have like a two lines of code

141
00:06:28,000 --> 00:06:32,950
which just launched and wait for the

142
00:06:30,820 --> 00:06:35,650
winzip to be active that's taken from

143
00:06:32,950 --> 00:06:38,080
the auto if help file that shows how to

144
00:06:35,650 --> 00:06:41,498
automate user interfaces and then you

145
00:06:38,080 --> 00:06:44,560
send alt s

146
00:06:41,499 --> 00:06:46,990
keystroke to continue the setup so if

147
00:06:44,560 --> 00:06:49,539
you if you if you sent if you use an

148
00:06:46,990 --> 00:06:51,249
obfuscator and you you add the same code

149
00:06:49,539 --> 00:06:53,550
through through the obfuscator and I

150
00:06:51,249 --> 00:06:55,719
think this is the from the PE local guy

151
00:06:53,550 --> 00:06:58,900
then you you get something like this

152
00:06:55,719 --> 00:07:01,240
which seems to be very difficult to read

153
00:06:58,900 --> 00:07:05,229
at the beginning except at the end you

154
00:07:01,240 --> 00:07:07,419
you get those two two last lines that

155
00:07:05,229 --> 00:07:11,020
are very much the same as the beginning

156
00:07:07,419 --> 00:07:12,460
so toast can be so much more obfuscated

157
00:07:11,020 --> 00:07:14,068
as well so you won't be able to

158
00:07:12,460 --> 00:07:18,039
recognize that there those lines

159
00:07:14,069 --> 00:07:22,840
including the code at all so that's the

160
00:07:18,039 --> 00:07:26,289
idea of the obfuscation the malware

161
00:07:22,840 --> 00:07:28,419
writers are trying to use there's this

162
00:07:26,289 --> 00:07:32,128
this sort of idea in some of the kind of

163
00:07:28,419 --> 00:07:35,109
script ki this forum of the of the Fudd

164
00:07:32,129 --> 00:07:38,469
mother and I always think it's fear

165
00:07:35,110 --> 00:07:40,419
uncertainty a doubt and I was all saying

166
00:07:38,469 --> 00:07:43,800
what kind of fear uncertainty and doubt

167
00:07:40,419 --> 00:07:46,990
Malory is but it turns out that it's

168
00:07:43,800 --> 00:07:48,849
it's it's a fully undetectable malware

169
00:07:46,990 --> 00:07:50,740
and of course there's no such thing as

170
00:07:48,849 --> 00:07:52,990
fully undetectable model but let these

171
00:07:50,740 --> 00:07:54,939
guys think about that there is sorry

172
00:07:52,990 --> 00:07:56,560
that this screenshot is not great it

173
00:07:54,939 --> 00:08:01,300
seems that the projector is not working

174
00:07:56,560 --> 00:08:03,460
well but this is a like a user interface

175
00:08:01,300 --> 00:08:05,379
of over of an obfuscator called data

176
00:08:03,460 --> 00:08:08,080
scrambler that seems to be very popular

177
00:08:05,379 --> 00:08:13,509
and it's being used by by the example

178
00:08:08,080 --> 00:08:16,000
which will be shown later so this is one

179
00:08:13,509 --> 00:08:19,060
of the pattern of the infection from

180
00:08:16,000 --> 00:08:22,899
left to right we have at the beginning

181
00:08:19,060 --> 00:08:25,330
generally what you get is an email that

182
00:08:22,899 --> 00:08:27,639
has an attachment and and that

183
00:08:25,330 --> 00:08:30,849
attachment may be or may not be a

184
00:08:27,639 --> 00:08:32,769
negative file more commonly these days

185
00:08:30,849 --> 00:08:35,529
it's some kind of document file that

186
00:08:32,769 --> 00:08:37,209
contains an exploit and then then the

187
00:08:35,529 --> 00:08:41,169
next stage is the first let's say first

188
00:08:37,208 --> 00:08:43,359
stage of the author-it which the Mulder

189
00:08:41,169 --> 00:08:46,630
writers are using other self extractable

190
00:08:43,360 --> 00:08:49,810
RAR files or self extractable cab files

191
00:08:46,630 --> 00:08:52,959
which can be configured so that another

192
00:08:49,810 --> 00:08:53,839
file is launched automatically when when

193
00:08:52,959 --> 00:08:56,750
you

194
00:08:53,840 --> 00:09:00,410
a fake and when you open it generally

195
00:08:56,750 --> 00:09:03,290
what they do is they create a randomly

196
00:09:00,410 --> 00:09:06,020
named standard author-it interpreter

197
00:09:03,290 --> 00:09:09,110
they drop dead and they drop several

198
00:09:06,020 --> 00:09:10,910
other files on the tone to the disk one

199
00:09:09,110 --> 00:09:13,280
of the files will be an obfuscated

200
00:09:10,910 --> 00:09:16,400
script which is then used as a parameter

201
00:09:13,280 --> 00:09:20,360
for the author-it interpreter and then

202
00:09:16,400 --> 00:09:24,110
we also have generally the encrypted PE

203
00:09:20,360 --> 00:09:26,770
payload which is then by using for the

204
00:09:24,110 --> 00:09:29,750
input from the obfuscated script is

205
00:09:26,770 --> 00:09:32,150
encrypt decrypted by the shellcode stage

206
00:09:29,750 --> 00:09:33,920
that's that's there's going to be run

207
00:09:32,150 --> 00:09:36,680
within the process space of the

208
00:09:33,920 --> 00:09:39,170
author-it interpreter and then once when

209
00:09:36,680 --> 00:09:43,280
that's done when the b file is decrypted

210
00:09:39,170 --> 00:09:45,560
in memory then another process will be

211
00:09:43,280 --> 00:09:47,990
launched and typically the executable

212
00:09:45,560 --> 00:09:49,760
from that process would be a whole load

213
00:09:47,990 --> 00:09:51,980
so it would be taken out of the process

214
00:09:49,760 --> 00:09:55,160
space and the malware executable we'd be

215
00:09:51,980 --> 00:09:56,690
included into the process space so i

216
00:09:55,160 --> 00:09:59,360
think i don't know why they use this

217
00:09:56,690 --> 00:10:01,610
convoluted convoluted system but I think

218
00:09:59,360 --> 00:10:04,340
the most most likely it is that the

219
00:10:01,610 --> 00:10:07,100
actual people odd only exists in memory

220
00:10:04,340 --> 00:10:08,990
right well exist on the disk as well but

221
00:10:07,100 --> 00:10:11,480
in the format of an encrypted payload so

222
00:10:08,990 --> 00:10:15,980
it's not very easy to detect the other

223
00:10:11,480 --> 00:10:18,110
way up there trying to to use same as

224
00:10:15,980 --> 00:10:20,120
let's say Python to executable where you

225
00:10:18,110 --> 00:10:21,680
can from Python script you can create an

226
00:10:20,120 --> 00:10:23,930
executable file they create an

227
00:10:21,680 --> 00:10:27,739
executable file from the from the auto

228
00:10:23,930 --> 00:10:29,689
it script where typically has two

229
00:10:27,740 --> 00:10:32,690
component ones this is the script itself

230
00:10:29,690 --> 00:10:34,880
and the other one that can also be

231
00:10:32,690 --> 00:10:36,650
embedded within the file and use a

232
00:10:34,880 --> 00:10:39,470
simple script to drop it is this

233
00:10:36,650 --> 00:10:42,050
embedded and again encrypted B payload

234
00:10:39,470 --> 00:10:43,970
and then again we had the process

235
00:10:42,050 --> 00:10:47,780
injection in more more or a similar way

236
00:10:43,970 --> 00:10:53,270
so those are the two most common methods

237
00:10:47,780 --> 00:10:56,390
that have been seen in the wild this is

238
00:10:53,270 --> 00:10:59,210
just to again to show that the same idea

239
00:10:56,390 --> 00:11:01,460
is that the payload only exists as a PE

240
00:10:59,210 --> 00:11:03,040
file in memory rather than on the disk

241
00:11:01,460 --> 00:11:06,279
and this is

242
00:11:03,040 --> 00:11:10,240
his images is like a just to show that a

243
00:11:06,279 --> 00:11:11,889
higher level of entropy on the file so

244
00:11:10,240 --> 00:11:13,630
the file is encrypted you really don't

245
00:11:11,889 --> 00:11:16,529
see any kind of structure that you can

246
00:11:13,630 --> 00:11:19,689
use to detect except if you if you find

247
00:11:16,529 --> 00:11:22,269
let's say a file with a randomly named

248
00:11:19,690 --> 00:11:25,180
filed with a high entropy on the disk

249
00:11:22,269 --> 00:11:27,069
then you may be able to detect it in a

250
00:11:25,180 --> 00:11:29,500
way but generally you don't know what it

251
00:11:27,069 --> 00:11:33,370
is so I don't know if it's a good idea

252
00:11:29,500 --> 00:11:36,180
to detect that kind of thing what are

253
00:11:33,370 --> 00:11:40,540
the functions that that are used in

254
00:11:36,180 --> 00:11:44,258
author-it malvert 4d 4db process

255
00:11:40,540 --> 00:11:48,130
injection well as like I said there's no

256
00:11:44,259 --> 00:11:49,899
great C or C++ like structure that you

257
00:11:48,130 --> 00:11:53,769
can create in memory but there are calls

258
00:11:49,899 --> 00:11:57,069
let's start with DLL DLL struck create

259
00:11:53,769 --> 00:12:01,180
is allows you to create a C++ like

260
00:11:57,069 --> 00:12:03,279
structure so for example you can you

261
00:12:01,180 --> 00:12:05,649
know the how the process environment

262
00:12:03,279 --> 00:12:07,720
block looks like or how the P file looks

263
00:12:05,649 --> 00:12:10,389
like and then you you just define that

264
00:12:07,720 --> 00:12:12,310
in a DLL stroke create call and then

265
00:12:10,389 --> 00:12:15,190
from then on you can address parts of

266
00:12:12,310 --> 00:12:19,149
members of the structure to modify parts

267
00:12:15,190 --> 00:12:21,430
of it with using this structure set and

268
00:12:19,149 --> 00:12:23,500
get data you change the data of the

269
00:12:21,430 --> 00:12:26,439
structure and you get the pointer of the

270
00:12:23,500 --> 00:12:28,600
structure using the call so at the end

271
00:12:26,440 --> 00:12:32,230
the DLL call is the one that's most

272
00:12:28,600 --> 00:12:35,079
important and basically starts running

273
00:12:32,230 --> 00:12:37,920
the process injection process or the the

274
00:12:35,079 --> 00:12:40,750
shell code that does the the actual

275
00:12:37,920 --> 00:12:45,130
decryption so those are the kind of

276
00:12:40,750 --> 00:12:47,410
classic auto it calls the that are used

277
00:12:45,130 --> 00:12:49,689
by the malware and then we also had the

278
00:12:47,410 --> 00:12:50,860
the Windows 32 at the eyes I won't go

279
00:12:49,689 --> 00:12:52,930
through them I think they are all

280
00:12:50,860 --> 00:12:55,000
well-known for people who are analyzing

281
00:12:52,930 --> 00:12:56,649
one of the things that perhaps worth

282
00:12:55,000 --> 00:13:00,339
mentioning is this called Windows

283
00:12:56,649 --> 00:13:03,819
process which is as far as I've seen

284
00:13:00,339 --> 00:13:05,920
used by auto it mother to launch this

285
00:13:03,819 --> 00:13:10,149
first stage of shell code which

286
00:13:05,920 --> 00:13:13,079
basically decrypt the P payload from the

287
00:13:10,149 --> 00:13:16,630
disk to in the to the memory and

288
00:13:13,079 --> 00:13:19,000
basically is one of the parameters it

289
00:13:16,630 --> 00:13:21,340
a callback so what they do is they

290
00:13:19,000 --> 00:13:23,950
create a buffer in memory they poke the

291
00:13:21,340 --> 00:13:26,590
buffer with the shellcode and then they

292
00:13:23,950 --> 00:13:28,510
call call windows broke with the

293
00:13:26,590 --> 00:13:32,830
parameter of a callback and that's very

294
00:13:28,510 --> 00:13:36,069
did the whole process starts running so

295
00:13:32,830 --> 00:13:38,200
we'll go into one of the like a real

296
00:13:36,070 --> 00:13:41,530
cases that I found a couple of months

297
00:13:38,200 --> 00:13:44,620
ago and this is what actually launched

298
00:13:41,530 --> 00:13:48,400
or kick-started the whole more in-depth

299
00:13:44,620 --> 00:13:50,110
look into into also it Malvar and then I

300
00:13:48,400 --> 00:13:53,319
realized there are actually quite a few

301
00:13:50,110 --> 00:13:57,700
of those flying around like any kind of

302
00:13:53,320 --> 00:13:59,890
malware it starts with typically an

303
00:13:57,700 --> 00:14:03,610
email and this is an email which which I

304
00:13:59,890 --> 00:14:06,189
which I found in the telemetry that's

305
00:14:03,610 --> 00:14:10,390
used by the the products like Cisco has

306
00:14:06,190 --> 00:14:13,150
an email gateway product ants and spam

307
00:14:10,390 --> 00:14:14,830
traps and and that's when I saw that

308
00:14:13,150 --> 00:14:17,230
kind of interesting because slightly

309
00:14:14,830 --> 00:14:19,060
different has two attachments one is the

310
00:14:17,230 --> 00:14:22,210
letter of introduction dot doc and the

311
00:14:19,060 --> 00:14:24,339
other one purchase orders dot zip so why

312
00:14:22,210 --> 00:14:26,500
would you have two attachments I had no

313
00:14:24,340 --> 00:14:27,730
idea but that was kind of which was kind

314
00:14:26,500 --> 00:14:29,950
of interesting it looks like a

315
00:14:27,730 --> 00:14:34,360
reasonably legitimate email but of

316
00:14:29,950 --> 00:14:43,270
course it's not so the first stage if we

317
00:14:34,360 --> 00:14:45,850
open the document is an CV 2013 3906 an

318
00:14:43,270 --> 00:14:49,480
expert in word document that basically

319
00:14:45,850 --> 00:14:52,900
it's an exploit in parsing TIF image

320
00:14:49,480 --> 00:14:55,810
files whereby you can modify the image

321
00:14:52,900 --> 00:15:00,189
files so that a function pointer is

322
00:14:55,810 --> 00:15:03,459
overwritten and these active X beam

323
00:15:00,190 --> 00:15:05,020
files are used to spray the memory with

324
00:15:03,460 --> 00:15:06,520
shellcode and then you're hoping that

325
00:15:05,020 --> 00:15:09,340
when you override the function pointer

326
00:15:06,520 --> 00:15:11,170
it will jump into your shellcode and you

327
00:15:09,340 --> 00:15:16,050
could see the typical kind of shellcode

328
00:15:11,170 --> 00:15:22,520
41 statement the what is at X something

329
00:15:16,050 --> 00:15:24,920
and so this is at the end you could see

330
00:15:22,520 --> 00:15:28,010
the the actual URL so it's very easy to

331
00:15:24,920 --> 00:15:29,689
recognize that this is this is a non

332
00:15:28,010 --> 00:15:32,990
encrypted part or shellcode this is a

333
00:15:29,690 --> 00:15:34,580
standard download an execute type of of

334
00:15:32,990 --> 00:15:38,450
shellcode the only thing that I found

335
00:15:34,580 --> 00:15:42,100
kind of more interesting with this that

336
00:15:38,450 --> 00:15:45,290
it also tries to avoid some of the

337
00:15:42,100 --> 00:15:47,420
behavioral type detection so if you if

338
00:15:45,290 --> 00:15:49,699
you try to detect behavior in user mode

339
00:15:47,420 --> 00:15:54,589
then typically you will have function

340
00:15:49,700 --> 00:15:57,020
hooks hooks starting with a call or a

341
00:15:54,590 --> 00:16:00,970
long jump or or a break point

342
00:15:57,020 --> 00:16:03,260
instruction a lot of some of the I guess

343
00:16:00,970 --> 00:16:05,690
anti-malware products using behavioral

344
00:16:03,260 --> 00:16:08,569
type detection will hook those windows

345
00:16:05,690 --> 00:16:10,330
api s-- so what these guys are doing is

346
00:16:08,570 --> 00:16:14,480
if they encounter any of these

347
00:16:10,330 --> 00:16:17,450
presumable hooks they will jump right in

348
00:16:14,480 --> 00:16:19,940
front if they will jump over the five

349
00:16:17,450 --> 00:16:22,790
bytes and they will call the function

350
00:16:19,940 --> 00:16:26,860
hoping that they won't be able to be

351
00:16:22,790 --> 00:16:30,079
detected by by by anti-malware products

352
00:16:26,860 --> 00:16:32,570
so the second stage is auto it it's

353
00:16:30,080 --> 00:16:34,580
basically that when that file is

354
00:16:32,570 --> 00:16:36,140
downloaded the final from the

355
00:16:34,580 --> 00:16:37,970
command-and-control server when you

356
00:16:36,140 --> 00:16:40,340
extract it then you see many many files

357
00:16:37,970 --> 00:16:42,710
on the disk and one of them is is a

358
00:16:40,340 --> 00:16:44,120
hundred and ten megabytes long file so

359
00:16:42,710 --> 00:16:45,980
when you when you start trading through

360
00:16:44,120 --> 00:16:48,350
it you think there's no way you can read

361
00:16:45,980 --> 00:16:51,560
it and the only thing here you could see

362
00:16:48,350 --> 00:16:53,600
is it could be a Unicode file and there

363
00:16:51,560 --> 00:16:55,160
are lots of like Unicode spaces and

364
00:16:53,600 --> 00:16:58,460
there's some kind of garbage characters

365
00:16:55,160 --> 00:17:00,020
and whatever whatnot and and when I

366
00:16:58,460 --> 00:17:02,000
started kind of browsing and looking for

367
00:17:00,020 --> 00:17:04,459
Strings eventually somewhere like down

368
00:17:02,000 --> 00:17:07,520
the bottom of the file you could see

369
00:17:04,459 --> 00:17:09,200
some of the you know potentially

370
00:17:07,520 --> 00:17:11,540
obfuscated code and you could see

371
00:17:09,200 --> 00:17:15,170
execute binary to string blah blah blah

372
00:17:11,540 --> 00:17:18,230
so okay it's an also each file and with

373
00:17:15,170 --> 00:17:21,140
the with the super with with it with the

374
00:17:18,230 --> 00:17:23,959
super binary data structure language

375
00:17:21,140 --> 00:17:27,709
whatever also known as as three regular

376
00:17:23,959 --> 00:17:29,870
expressions here we were I was I was

377
00:17:27,709 --> 00:17:32,150
able to quickly recover the the I

378
00:17:29,870 --> 00:17:34,100
basically the source code remove all the

379
00:17:32,150 --> 00:17:35,430
noise and come up with something that

380
00:17:34,100 --> 00:17:38,969
looks like the

381
00:17:35,430 --> 00:17:40,920
again is not very easy to read and then

382
00:17:38,970 --> 00:17:43,740
the next stage which I'll talk about I

383
00:17:40,920 --> 00:17:45,660
use a tool a base that would allow me to

384
00:17:43,740 --> 00:17:48,660
do a little bit more and now I can see

385
00:17:45,660 --> 00:17:50,370
all these constants and I can see which

386
00:17:48,660 --> 00:17:51,360
function calls are called you could say

387
00:17:50,370 --> 00:17:54,209
DLL called

388
00:17:51,360 --> 00:17:55,830
get the count so one of the things that

389
00:17:54,210 --> 00:17:57,750
guys are doing is that they're trying to

390
00:17:55,830 --> 00:18:00,419
see whether you're running in some kind

391
00:17:57,750 --> 00:18:02,870
of execution environment where if you

392
00:18:00,420 --> 00:18:08,130
take much longer they won't be then

393
00:18:02,870 --> 00:18:10,320
executing the malware to the end the

394
00:18:08,130 --> 00:18:15,200
third stage of the payload was just like

395
00:18:10,320 --> 00:18:18,450
a a PE file that gets decrypted and then

396
00:18:15,200 --> 00:18:21,540
the injected into the process memory of

397
00:18:18,450 --> 00:18:23,820
some of the processes well it was an

398
00:18:21,540 --> 00:18:25,740
officer dotnet assembly file again

399
00:18:23,820 --> 00:18:27,570
there's a whole different topic of how

400
00:18:25,740 --> 00:18:29,520
you do fist get dot net files but I

401
00:18:27,570 --> 00:18:31,950
really don't like to analyze them there

402
00:18:29,520 --> 00:18:33,720
that they can be pretty nasty with with

403
00:18:31,950 --> 00:18:35,790
sound the obfuscation techniques the

404
00:18:33,720 --> 00:18:39,000
only thing that I found is these guys

405
00:18:35,790 --> 00:18:42,000
modified the actual cyclone botnet and

406
00:18:39,000 --> 00:18:45,179
so if you launch it as a file from a

407
00:18:42,000 --> 00:18:47,010
command prompt did you get this message

408
00:18:45,179 --> 00:18:49,050
bauxite this is not meant to be used

409
00:18:47,010 --> 00:18:51,720
this way you know it only has to be

410
00:18:49,050 --> 00:18:54,360
encrypted it only has to be injected in

411
00:18:51,720 --> 00:18:57,660
memory so you need to do some checking

412
00:18:54,360 --> 00:18:59,669
there are well I'll skip this because

413
00:18:57,660 --> 00:19:02,280
this is not really visible but it just

414
00:18:59,670 --> 00:19:05,970
shows the whole line from the email to

415
00:19:02,280 --> 00:19:11,639
several layers and then eventually to a

416
00:19:05,970 --> 00:19:13,590
command and control server so I will

417
00:19:11,640 --> 00:19:17,160
just briefly go through some they are

418
00:19:13,590 --> 00:19:19,770
not useful analysis tools exit two also

419
00:19:17,160 --> 00:19:23,940
it does this reverse of auto it to exist

420
00:19:19,770 --> 00:19:28,200
so executable auto it files have either

421
00:19:23,940 --> 00:19:32,460
a resource section or they have an

422
00:19:28,200 --> 00:19:35,520
overlay that starts with a with a like a

423
00:19:32,460 --> 00:19:37,800
magic string and B you can always

424
00:19:35,520 --> 00:19:39,750
recover the source code which is great

425
00:19:37,800 --> 00:19:42,270
if you analyzing that kind of thing exit

426
00:19:39,750 --> 00:19:44,640
to or do to it those are the two tools

427
00:19:42,270 --> 00:19:46,860
both of them are freely available if you

428
00:19:44,640 --> 00:19:48,780
search you know but good enough

429
00:19:46,860 --> 00:19:51,479
regular expression and scripting with

430
00:19:48,780 --> 00:19:53,940
so that before and then the tool which i

431
00:19:51,480 --> 00:19:57,450
really liked and i found it recently is

432
00:19:53,940 --> 00:20:01,620
old parser and the parser is really

433
00:19:57,450 --> 00:20:03,810
written in it's written in also it again

434
00:20:01,620 --> 00:20:05,520
somebody was trying to write a notary

435
00:20:03,810 --> 00:20:08,129
parser and auto it which is gonna be

436
00:20:05,520 --> 00:20:11,400
interesting exercise and anna sort of

437
00:20:08,130 --> 00:20:12,930
sort of debugger the developers a lot of

438
00:20:11,400 --> 00:20:16,320
it are very careful not to allow

439
00:20:12,930 --> 00:20:18,480
debugging knowing that it's very very

440
00:20:16,320 --> 00:20:20,700
easy to reverse-engineer I guess this

441
00:20:18,480 --> 00:20:23,010
and so the only thing only provision for

442
00:20:20,700 --> 00:20:26,520
debugging in the industry actual auto it

443
00:20:23,010 --> 00:20:28,980
is like console right or something like

444
00:20:26,520 --> 00:20:31,050
print lines and so on but there's

445
00:20:28,980 --> 00:20:32,010
another guy who created the debugger and

446
00:20:31,050 --> 00:20:36,210
it's actually pretty good

447
00:20:32,010 --> 00:20:38,280
so the parser has two functions that one

448
00:20:36,210 --> 00:20:39,720
is to parse the file while two

449
00:20:38,280 --> 00:20:41,310
interesting functions are many many

450
00:20:39,720 --> 00:20:43,740
functions of course the parses are

451
00:20:41,310 --> 00:20:45,090
pretty complex pieces of code and the

452
00:20:43,740 --> 00:20:48,300
other one that's very useful for

453
00:20:45,090 --> 00:20:50,429
analysis is all deep parts so the first

454
00:20:48,300 --> 00:20:53,040
one creates an an abstract abstract

455
00:20:50,430 --> 00:20:55,650
syntax tree basically from some kind of

456
00:20:53,040 --> 00:20:58,649
code it creates in memory representation

457
00:20:55,650 --> 00:21:01,230
of an expression so here we have a

458
00:20:58,650 --> 00:21:07,400
variable and on the right hand side we

459
00:21:01,230 --> 00:21:10,590
have a plus operator multiplication and

460
00:21:07,400 --> 00:21:13,140
division right so it basically allows

461
00:21:10,590 --> 00:21:15,629
you to then traverse the tree and then

462
00:21:13,140 --> 00:21:17,370
go back from this little representation

463
00:21:15,630 --> 00:21:20,370
in memory back to the source code and

464
00:21:17,370 --> 00:21:22,860
this and this is used by the bad guys to

465
00:21:20,370 --> 00:21:25,979
obfuscate the code but it could also be

466
00:21:22,860 --> 00:21:30,689
used by us good guys to the obfuscate

467
00:21:25,980 --> 00:21:33,000
the code so what you can do is like this

468
00:21:30,690 --> 00:21:35,280
is like the weird problem with analysis

469
00:21:33,000 --> 00:21:38,670
is there's no good structures for

470
00:21:35,280 --> 00:21:41,850
creating the abstract syntax tree so an

471
00:21:38,670 --> 00:21:44,040
example that this parse program creates

472
00:21:41,850 --> 00:21:47,399
is it's basically two dimensional array

473
00:21:44,040 --> 00:21:50,970
that by some kind of convention has the

474
00:21:47,400 --> 00:21:53,310
right and left branches of the operation

475
00:21:50,970 --> 00:21:55,710
but we are not that much interested in

476
00:21:53,310 --> 00:21:57,870
that we are really interested in taking

477
00:21:55,710 --> 00:22:01,710
this and converting it back to the

478
00:21:57,870 --> 00:22:02,540
readable source code so for example here

479
00:22:01,710 --> 00:22:04,920
we have the deep

480
00:22:02,540 --> 00:22:08,610
function and the deep parts function

481
00:22:04,920 --> 00:22:11,490
what I tried to do is now some of these

482
00:22:08,610 --> 00:22:13,290
weird function calls like binary to

483
00:22:11,490 --> 00:22:16,200
string which I wouldn't be able to read

484
00:22:13,290 --> 00:22:18,928
I defined them as something that when

485
00:22:16,200 --> 00:22:22,740
they detected in the code I can create

486
00:22:18,929 --> 00:22:25,320
my own emulator emulation or my own

487
00:22:22,740 --> 00:22:27,530
handler for this and then iid office

488
00:22:25,320 --> 00:22:30,510
gate this the script or the string and

489
00:22:27,530 --> 00:22:32,820
return it back to the source code and

490
00:22:30,510 --> 00:22:36,510
then another function that was in one of

491
00:22:32,820 --> 00:22:38,639
the one of the examples and so this is

492
00:22:36,510 --> 00:22:40,650
like a big switch case statement in the

493
00:22:38,640 --> 00:22:42,540
author-it code that basically the most

494
00:22:40,650 --> 00:22:45,300
interesting part for me is when you find

495
00:22:42,540 --> 00:22:48,690
a function call what to do with the

496
00:22:45,300 --> 00:22:51,480
function call so we we also have here if

497
00:22:48,690 --> 00:22:54,030
the function call name is within my own

498
00:22:51,480 --> 00:22:55,950
functions that i defined in that case i

499
00:22:54,030 --> 00:22:58,410
called the function that I call that I

500
00:22:55,950 --> 00:23:00,540
defined as a handler one of the example

501
00:22:58,410 --> 00:23:03,300
here example here is this function that

502
00:23:00,540 --> 00:23:05,280
basically does some kind of decryption

503
00:23:03,300 --> 00:23:08,159
while the creeps a deification of a

504
00:23:05,280 --> 00:23:12,300
character and it returns the character

505
00:23:08,160 --> 00:23:14,730
back as the sound of string so from here

506
00:23:12,300 --> 00:23:17,540
you could see an opposite the string

507
00:23:14,730 --> 00:23:20,370
that it has a global variables that are

508
00:23:17,540 --> 00:23:23,399
pretty much unreadable from here except

509
00:23:20,370 --> 00:23:26,340
you can only see the function calls and

510
00:23:23,400 --> 00:23:31,470
when you parse it first

511
00:23:26,340 --> 00:23:33,270
and then D parse it you got your return

512
00:23:31,470 --> 00:23:36,480
back with the same code except now you

513
00:23:33,270 --> 00:23:39,510
have this sort of the word word D

514
00:23:36,480 --> 00:23:41,820
obfuscated string instead of the

515
00:23:39,510 --> 00:23:44,309
function call so you really have more

516
00:23:41,820 --> 00:23:47,580
information about what's inside this is

517
00:23:44,309 --> 00:23:50,730
the auto it script and then you know

518
00:23:47,580 --> 00:23:53,730
once a very simple regular expression is

519
00:23:50,730 --> 00:23:56,070
like if you search for a quotation space

520
00:23:53,730 --> 00:23:57,960
and space and remove them all then you

521
00:23:56,070 --> 00:24:01,530
you get it and you put together

522
00:23:57,960 --> 00:24:03,870
everything and now it's it's much more

523
00:24:01,530 --> 00:24:07,320
more readable in the way so so I found

524
00:24:03,870 --> 00:24:10,399
also it's very also it alt parts are

525
00:24:07,320 --> 00:24:12,480
very useful the other useful tool is the

526
00:24:10,400 --> 00:24:14,760
debugging and as I mentioned there is

527
00:24:12,480 --> 00:24:16,340
not really the professional kind of

528
00:24:14,760 --> 00:24:19,279
provision for debugging

529
00:24:16,340 --> 00:24:23,120
within Otto it but somebody create a

530
00:24:19,279 --> 00:24:25,429
graphical debugger that basically from

531
00:24:23,120 --> 00:24:27,770
your own script or from the script and

532
00:24:25,429 --> 00:24:33,070
creates an instrumented also it code

533
00:24:27,770 --> 00:24:35,090
then then uses chrome communication to

534
00:24:33,070 --> 00:24:36,500
communicate with the debugger which

535
00:24:35,090 --> 00:24:40,668
communicates with the also it

536
00:24:36,500 --> 00:24:42,740
interpreter so you kind of get break

537
00:24:40,669 --> 00:24:45,470
bones you kind of get inspection of the

538
00:24:42,740 --> 00:24:47,539
variables and and it is pretty useful so

539
00:24:45,470 --> 00:24:51,399
from this the sensory script that I had

540
00:24:47,539 --> 00:24:54,649
at the beginning as an example the

541
00:24:51,399 --> 00:24:58,100
instrumented script is basically this so

542
00:24:54,649 --> 00:25:01,399
every time you every time you skip one

543
00:24:58,100 --> 00:25:03,469
line a new error error is is set which

544
00:25:01,399 --> 00:25:05,330
basically then allow you to to inspect

545
00:25:03,470 --> 00:25:07,789
variables and things like that so it's

546
00:25:05,330 --> 00:25:10,029
not really a debugging provision but

547
00:25:07,789 --> 00:25:14,539
it's it's better than not having

548
00:25:10,029 --> 00:25:18,260
anything so how do we how do we try to

549
00:25:14,539 --> 00:25:20,179
find this auto it type of malware let's

550
00:25:18,260 --> 00:25:21,919
say if you're using virustotal which is

551
00:25:20,179 --> 00:25:24,260
of course the repository that most of

552
00:25:21,919 --> 00:25:29,230
the people are using you can create your

553
00:25:24,260 --> 00:25:31,640
URL rules and look for the RC data type

554
00:25:29,230 --> 00:25:35,029
resource in the P file with the name

555
00:25:31,640 --> 00:25:37,309
script and then check whether the author

556
00:25:35,029 --> 00:25:39,409
is signature is there as a as a part of

557
00:25:37,309 --> 00:25:41,539
the resource or you have an overlay VD

558
00:25:39,409 --> 00:25:44,090
also a signature and you'll be able to

559
00:25:41,539 --> 00:25:46,549
find them for the rar and self

560
00:25:44,090 --> 00:25:49,250
extractable cab files then it's that's a

561
00:25:46,549 --> 00:25:51,918
bit more difficult then I usually use

562
00:25:49,250 --> 00:25:54,289
the import hash file size and the

563
00:25:51,919 --> 00:25:56,270
detection name by by an anti-malware

564
00:25:54,289 --> 00:25:59,059
tools and most of them are detecting

565
00:25:56,270 --> 00:26:01,129
with some kind of troj with something

566
00:25:59,059 --> 00:26:03,529
and that's where you you find these

567
00:26:01,130 --> 00:26:05,179
interesting things and of course you can

568
00:26:03,529 --> 00:26:06,970
also try to use some of the behavioral

569
00:26:05,179 --> 00:26:10,700
rules from the virustotal

570
00:26:06,970 --> 00:26:12,700
when certain temporary file names are

571
00:26:10,700 --> 00:26:15,649
used I think it's used one of the

572
00:26:12,700 --> 00:26:19,070
temporary file names oh taught something

573
00:26:15,649 --> 00:26:22,459
to temp so you could see from from there

574
00:26:19,070 --> 00:26:24,860
as well a bit some of the more common

575
00:26:22,460 --> 00:26:27,740
malware families that that are using are

576
00:26:24,860 --> 00:26:29,219
low key bort and I can encounter a dark

577
00:26:27,740 --> 00:26:33,179
moment which is the

578
00:26:29,220 --> 00:26:35,730
access trojan cyclone is another boat

579
00:26:33,179 --> 00:26:38,850
which is used for like botnets and

580
00:26:35,730 --> 00:26:40,559
denial of service attacks but there are

581
00:26:38,850 --> 00:26:43,020
quite a few of them in if you if you

582
00:26:40,559 --> 00:26:45,899
look for them you will will definitely

583
00:26:43,020 --> 00:26:48,120
find them so now how you know how to

584
00:26:45,900 --> 00:26:52,530
protect against well just as we

585
00:26:48,120 --> 00:26:54,449
recommend for power shell or vbscript or

586
00:26:52,530 --> 00:26:58,379
JavaScript if you don't really use them

587
00:26:54,450 --> 00:26:59,850
then disable them try to prevent from

588
00:26:58,380 --> 00:27:01,380
running if you really don't need and

589
00:26:59,850 --> 00:27:04,020
also it interpreter is it seem you

590
00:27:01,380 --> 00:27:06,120
simply just can say well if anything

591
00:27:04,020 --> 00:27:09,658
tries to run also it interpreter I will

592
00:27:06,120 --> 00:27:11,639
I will block it and if you really need

593
00:27:09,659 --> 00:27:13,770
to run or to it interpreter if you use

594
00:27:11,640 --> 00:27:15,570
it within your own environments then you

595
00:27:13,770 --> 00:27:19,710
could at least detect that that that the

596
00:27:15,570 --> 00:27:22,379
interpreter uses a random name and then

597
00:27:19,710 --> 00:27:28,020
you can again block it same thing with

598
00:27:22,380 --> 00:27:33,210
with the author h2 to XE files so I hope

599
00:27:28,020 --> 00:27:35,490
I didn't kind of make you too much bored

600
00:27:33,210 --> 00:27:39,240
about this this called this topic but I

601
00:27:35,490 --> 00:27:41,490
I found it reasonably interesting for me

602
00:27:39,240 --> 00:27:44,100
it was a useful couple of weeks when I

603
00:27:41,490 --> 00:27:46,470
look at this and and and and I needed a

604
00:27:44,100 --> 00:27:47,789
good topic for for the conference so I

605
00:27:46,470 --> 00:27:52,110
hope I succeeded

606
00:27:47,789 --> 00:27:56,010
the only thing before me and I think the

607
00:27:52,110 --> 00:27:58,678
next presentation and the lunch is is we

608
00:27:56,010 --> 00:28:00,840
maybe we have a break I don't know but I

609
00:27:58,679 --> 00:28:04,140
wanted to invite you the only marketing

610
00:28:00,840 --> 00:28:07,699
slide I have is to invite you to listen

611
00:28:04,140 --> 00:28:10,110
to our beers vitalis podcast which

612
00:28:07,700 --> 00:28:12,539
members of Talas are discussing like

613
00:28:10,110 --> 00:28:14,280
everyday security issues almost on a

614
00:28:12,539 --> 00:28:17,010
weekly basis and it's been very

615
00:28:14,280 --> 00:28:18,750
successful and most of the people say

616
00:28:17,010 --> 00:28:20,908
it's it's very entertaining

617
00:28:18,750 --> 00:28:24,090
unfortunately the free beer is just

618
00:28:20,909 --> 00:28:27,179
upstairs but not not within the podcast

619
00:28:24,090 --> 00:28:28,918
and so with that I think we have maybe a

620
00:28:27,179 --> 00:28:32,669
couple of minutes for questions before

621
00:28:28,919 --> 00:28:35,539
we we break for for something a break or

622
00:28:32,669 --> 00:28:35,539
the next presentation

623
00:28:36,580 --> 00:29:01,629
yep in Mulder in general or well there

624
00:28:59,289 --> 00:29:03,429
are so many different ways for detecting

625
00:29:01,630 --> 00:29:05,679
sandbox but also there are different

626
00:29:03,429 --> 00:29:08,019
ways of trying to prevent against this

627
00:29:05,679 --> 00:29:09,909
sort of detection so typically what

628
00:29:08,019 --> 00:29:11,500
you'll see is you know when when you

629
00:29:09,909 --> 00:29:13,330
have like a virtual machine and you're

630
00:29:11,500 --> 00:29:15,220
executing within the virtual machine you

631
00:29:13,330 --> 00:29:19,120
have certain process name certain types

632
00:29:15,220 --> 00:29:22,470
of devices VMware has its own backdoor

633
00:29:19,120 --> 00:29:25,029
interface so you can also test for that

634
00:29:22,470 --> 00:29:26,799
that there are there are many many

635
00:29:25,029 --> 00:29:28,659
different different techniques that the

636
00:29:26,799 --> 00:29:32,470
malware writers are trying to use so

637
00:29:28,659 --> 00:29:34,860
it's it's is the never-ending race

638
00:29:32,470 --> 00:29:37,510
between the kind of let's say

639
00:29:34,860 --> 00:29:39,490
anti-malware producers who have the same

640
00:29:37,510 --> 00:29:42,340
boxes and like threat intelligence

641
00:29:39,490 --> 00:29:44,590
operations like cisco has red grid so

642
00:29:42,340 --> 00:29:46,449
they're developing all the time new

643
00:29:44,590 --> 00:29:48,580
metals are trying to hide the fact that

644
00:29:46,450 --> 00:29:49,899
something is being run within the

645
00:29:48,580 --> 00:29:52,210
environments like one of the things you

646
00:29:49,899 --> 00:29:54,370
can do is your virtual machines for

647
00:29:52,210 --> 00:29:56,649
analysis typically have smaller hard

648
00:29:54,370 --> 00:29:59,110
drives or look to be smaller hard drives

649
00:29:56,649 --> 00:30:01,029
like 50 gigabytes at most 40 gigabytes

650
00:29:59,110 --> 00:30:03,939
which is not that common this time in

651
00:30:01,029 --> 00:30:06,880
real this this time in like a real

652
00:30:03,940 --> 00:30:08,860
machine right so if you detect that you

653
00:30:06,880 --> 00:30:10,539
have a very small hard drive perhaps you

654
00:30:08,860 --> 00:30:13,049
won't be able to run it you know it's

655
00:30:10,539 --> 00:30:15,970
not a big it's not a big issue for that

656
00:30:13,049 --> 00:30:18,158
on the other hand there are so many more

657
00:30:15,970 --> 00:30:20,230
virtual machines these days and

658
00:30:18,159 --> 00:30:21,940
everybody's using and I don't see why

659
00:30:20,230 --> 00:30:23,830
Marvel writers wouldn't be interested in

660
00:30:21,940 --> 00:30:26,230
affecting virtual machines as well

661
00:30:23,830 --> 00:30:30,399
because they're equally important I

662
00:30:26,230 --> 00:30:32,139
guess as as the real machines I know I

663
00:30:30,399 --> 00:30:34,870
hope that answer your question but we

664
00:30:32,139 --> 00:30:38,100
can always go to discuss a little bit

665
00:30:34,870 --> 00:30:46,139
more after the break

666
00:30:38,100 --> 00:30:47,699
any more questions No

667
00:30:46,140 --> 00:30:49,510
we're done thanks very much for

668
00:30:47,700 --> 00:30:54,099
listening and hope it is in Spain

669
00:30:49,510 --> 00:30:54,099
[Applause]

