1
00:00:15,470 --> 00:00:23,310
yes<font color="#CCCCCC"> so hi everybody thank you for having</font>

2
00:00:21,150 --> 00:00:25,859
me here<font color="#CCCCCC"> I'm Alex</font>

3
00:00:23,310 --> 00:00:27,659
I come from<font color="#CCCCCC"> Palace vulnerability</font>

4
00:00:25,859 --> 00:00:30,510
research team

5
00:00:27,660 --> 00:00:34,309
I'm a senior<font color="#CCCCCC"> security researcher there</font>

6
00:00:30,510 --> 00:00:38,550
these gentlemen left are my<font color="#CCCCCC"> colleagues</font>

7
00:00:34,309 --> 00:00:42,269
<font color="#CCCCCC">my team is led by idea nan and Richard</font>

8
00:00:38,550 --> 00:00:45,180
<font color="#E5E5E5">Johnson and we've grown a</font><font color="#CCCCCC"> bit in</font><font color="#E5E5E5"> the</font>

9
00:00:42,270 --> 00:00:47,879
recent years<font color="#CCCCCC"> I get</font><font color="#E5E5E5"> asked a lot about</font>

10
00:00:45,180 --> 00:00:51,180
<font color="#E5E5E5">what we actually do and most of our</font>

11
00:00:47,879 --> 00:00:52,860
research or<font color="#E5E5E5"> our work is</font><font color="#CCCCCC"> third-party</font>

12
00:00:51,180 --> 00:00:55,289
vulnerability research we find

13
00:00:52,860 --> 00:00:58,109
vulnerabilities in popular commodity

14
00:00:55,289 --> 00:01:02,399
software and in the last<font color="#E5E5E5"> year we</font>

15
00:00:58,109 --> 00:01:06,270
<font color="#CCCCCC">published over 170 vulnerabilities in</font>

16
00:01:02,399 --> 00:01:08,790
different different vendors<font color="#CCCCCC"> beside that</font>

17
00:01:06,270 --> 00:01:11,280
we<font color="#E5E5E5"> obviously do focus on a lot</font><font color="#CCCCCC"> of</font>

18
00:01:08,790 --> 00:01:15,439
fuzzing triaging<font color="#E5E5E5"> vulnerability analysis</font>

19
00:01:11,280 --> 00:01:18,360
and automating those topics in<font color="#CCCCCC"> general</font>

20
00:01:15,439 --> 00:01:22,380
our other branches include mitigation

21
00:01:18,360 --> 00:01:24,990
development<font color="#E5E5E5"> and our whole</font><font color="#CCCCCC"> team focus is</font>

22
00:01:22,380 --> 00:01:28,439
an open source stuff and we tend to<font color="#CCCCCC"> open</font>

23
00:01:24,990 --> 00:01:30,839
<font color="#E5E5E5">source or all tools or research which</font>

24
00:01:28,439 --> 00:01:33,539
<font color="#E5E5E5">you can usually find on our</font><font color="#CCCCCC"> website or</font>

25
00:01:30,840 --> 00:01:37,549
<font color="#E5E5E5">on our github page what I'm going to</font>

26
00:01:33,540 --> 00:01:40,170
<font color="#E5E5E5">talk about today is guided fuzzing and</font>

27
00:01:37,549 --> 00:01:42,780
applying guided<font color="#E5E5E5"> pausing on the binaries</font>

28
00:01:40,170 --> 00:01:44,939
that<font color="#E5E5E5"> we don't have source code for so in</font>

29
00:01:42,780 --> 00:01:47,310
order to<font color="#E5E5E5"> do that</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to give you a</font>

30
00:01:44,939 --> 00:01:49,619
quick<font color="#CCCCCC"> overview of guided fuzzing with</font>

31
00:01:47,310 --> 00:01:51,930
ASL<font color="#E5E5E5"> a quick overview of</font><font color="#CCCCCC"> Guineans</font>

32
00:01:49,619 --> 00:01:55,409
framework which<font color="#CCCCCC"> is sort of</font><font color="#E5E5E5"> tangential to</font>

33
00:01:51,930 --> 00:01:55,979
<font color="#E5E5E5">what we're doing</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> overview of AFL</font>

34
00:01:55,409 --> 00:01:57,659
<font color="#CCCCCC">dillion's</font>

35
00:01:55,979 --> 00:02:00,960
which is a tool<font color="#E5E5E5"> that we've</font><font color="#CCCCCC"> developed to</font>

36
00:01:57,659 --> 00:02:03,630
do so<font color="#CCCCCC"> time permitting</font><font color="#E5E5E5"> a couple of bugs</font>

37
00:02:00,960 --> 00:02:05,548
<font color="#E5E5E5">that I found during the last year and</font>

38
00:02:03,630 --> 00:02:10,109
I'll<font color="#E5E5E5"> conclude with</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of takeaways</font>

39
00:02:05,549 --> 00:02:13,190
for<font color="#CCCCCC"> this talk so AFL or starting with</font>

40
00:02:10,110 --> 00:02:16,220
guided fuzzing<font color="#E5E5E5"> dumb fuzzing is where</font>

41
00:02:13,190 --> 00:02:18,620
<font color="#E5E5E5">just take a sample mutate</font><font color="#CCCCCC"> it away throw</font>

42
00:02:16,220 --> 00:02:20,690
<font color="#CCCCCC">it against</font><font color="#E5E5E5"> the target see if it crashes</font>

43
00:02:18,620 --> 00:02:22,490
<font color="#E5E5E5">take a sample mutated throw it against</font>

44
00:02:20,690 --> 00:02:25,160
target see if it crashes<font color="#CCCCCC"> and doing that</font>

45
00:02:22,490 --> 00:02:27,470
<font color="#E5E5E5">at infinity</font><font color="#CCCCCC"> you don't have any feedback</font>

46
00:02:25,160 --> 00:02:29,660
from<font color="#E5E5E5"> the application to see if</font><font color="#CCCCCC"> you're</font>

47
00:02:27,470 --> 00:02:31,730
advancing in any way or when you<font color="#CCCCCC"> should</font>

48
00:02:29,660 --> 00:02:34,880
actually<font color="#E5E5E5"> stop doing whatever you're</font>

49
00:02:31,730 --> 00:02:37,910
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> early steps in</font><font color="#E5E5E5"> guided fuzzing</font>

50
00:02:34,880 --> 00:02:40,430
includes<font color="#E5E5E5"> corpus distillation</font><font color="#CCCCCC"> so starting</font>

51
00:02:37,910 --> 00:02:42,859
<font color="#E5E5E5">with thousands and thousands of files</font>

52
00:02:40,430 --> 00:02:45,740
how do you know which files<font color="#CCCCCC"> actually</font>

53
00:02:42,860 --> 00:02:47,210
<font color="#E5E5E5">test new paths inside the process that</font>

54
00:02:45,740 --> 00:02:49,010
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> testing which are actually</font>

55
00:02:47,210 --> 00:02:51,470
beneficial to your testing<font color="#E5E5E5"> and which are</font>

56
00:02:49,010 --> 00:02:55,130
not to do<font color="#E5E5E5"> that people have been</font>

57
00:02:51,470 --> 00:02:57,950
developing tools<font color="#E5E5E5"> that work using</font><font color="#CCCCCC"> pen</font>

58
00:02:55,130 --> 00:03:00,740
framework or<font color="#CCCCCC"> dinah Mario</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> usually</font>

59
00:02:57,950 --> 00:03:03,619
just record basic mock coverage and then

60
00:03:00,740 --> 00:03:06,230
use that<font color="#CCCCCC"> to minimize the corpus</font><font color="#E5E5E5"> to the</font>

61
00:03:03,620 --> 00:03:08,930
most interesting files some of the more

62
00:03:06,230 --> 00:03:11,269
interesting fuzzers based on this guided

63
00:03:08,930 --> 00:03:13,820
fuzzing approach early steps<font color="#E5E5E5"> in this</font>

64
00:03:11,270 --> 00:03:16,760
approach for EFS or<font color="#CCCCCC"> evolutionary fuzzing</font>

65
00:03:13,820 --> 00:03:19,760
system which in background used<font color="#CCCCCC"> PIME a</font>

66
00:03:16,760 --> 00:03:23,500
process talker<font color="#E5E5E5"> which in background</font>

67
00:03:19,760 --> 00:03:27,649
relied on debugging<font color="#E5E5E5"> to actually record</font>

68
00:03:23,500 --> 00:03:31,810
the paths taken inside a process

69
00:03:27,650 --> 00:03:33,890
execution<font color="#E5E5E5"> and not to dig too into it</font>

70
00:03:31,810 --> 00:03:36,440
<font color="#CCCCCC">comprehensive overview of Goddess</font>

71
00:03:33,890 --> 00:03:40,458
<font color="#CCCCCC">pausing can be found in my research</font>

72
00:03:36,440 --> 00:03:42,650
leads presentation<font color="#CCCCCC"> go speed tracer which</font>

73
00:03:40,459 --> 00:03:45,350
rich Johnson gave at<font color="#E5E5E5"> hack in the Box</font>

74
00:03:42,650 --> 00:03:47,120
this year and weakened<font color="#E5E5E5"> this summer the</font>

75
00:03:45,350 --> 00:03:49,670
talk is record in<font color="#E5E5E5"> summer so it's a good</font>

76
00:03:47,120 --> 00:03:52,370
reference<font color="#CCCCCC"> for all the guided fighting</font>

77
00:03:49,670 --> 00:03:54,679
moving on to the<font color="#CCCCCC"> actual state of the art</font>

78
00:03:52,370 --> 00:03:57,350
with fuzzing in general and especially

79
00:03:54,680 --> 00:04:00,200
and guided fuzzing<font color="#E5E5E5"> currently the most</font>

80
00:03:57,350 --> 00:04:03,470
popular<font color="#E5E5E5"> tool is American fossil op which</font>

81
00:04:00,200 --> 00:04:06,049
comes with<font color="#E5E5E5"> a nice and courses GUI all</font>

82
00:04:03,470 --> 00:04:07,580
style kind of<font color="#E5E5E5"> gooey and you can see here</font>

83
00:04:06,050 --> 00:04:09,470
in the picture<font color="#E5E5E5"> it has a bunch of</font>

84
00:04:07,580 --> 00:04:13,730
information<font color="#E5E5E5"> that can actually tell you</font>

85
00:04:09,470 --> 00:04:15,620
how<font color="#E5E5E5"> well your father is doing and as Ben</font>

86
00:04:13,730 --> 00:04:17,930
<font color="#E5E5E5">Nyes would say it's a fractal of good</font>

87
00:04:15,620 --> 00:04:21,140
design<font color="#E5E5E5"> decisions</font><font color="#CCCCCC"> so every</font><font color="#E5E5E5"> single design</font>

88
00:04:17,930 --> 00:04:24,800
decision<font color="#E5E5E5"> NFL has taken is good they did</font>

89
00:04:21,140 --> 00:04:26,530
everything<font color="#E5E5E5"> right what it does is compile</font>

90
00:04:24,800 --> 00:04:29,080
<font color="#E5E5E5">time instrumentation so it</font>

91
00:04:26,530 --> 00:04:32,109
the information<font color="#E5E5E5"> that gives you feedback</font>

92
00:04:29,080 --> 00:04:36,010
during<font color="#E5E5E5"> compile time</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> chooses a really</font>

93
00:04:32,110 --> 00:04:39,669
simple genetic algorithm<font color="#CCCCCC"> to to advance</font>

94
00:04:36,010 --> 00:04:43,690
<font color="#E5E5E5">its corpus and find new paths through</font>

95
00:04:39,669 --> 00:04:45,280
the<font color="#E5E5E5"> program</font><font color="#CCCCCC"> zola Viki actually went</font>

96
00:04:43,690 --> 00:04:47,080
<font color="#E5E5E5">through and tested all</font><font color="#CCCCCC"> the mutation</font>

97
00:04:45,280 --> 00:04:49,630
strategies and kept<font color="#CCCCCC"> only the ones that</font>

98
00:04:47,080 --> 00:04:54,250
<font color="#E5E5E5">work and not the tyrannical ones</font><font color="#CCCCCC"> it's</font>

99
00:04:49,630 --> 00:04:55,690
<font color="#E5E5E5">high</font><font color="#CCCCCC"> performance</font><font color="#E5E5E5"> and it's easy to use so</font>

100
00:04:54,250 --> 00:04:58,600
one of the<font color="#E5E5E5"> core of</font><font color="#CCCCCC"> some of the core</font>

101
00:04:55,690 --> 00:05:01,300
<font color="#CCCCCC">ideas of</font><font color="#E5E5E5"> FL are starting with first</font>

102
00:04:58,600 --> 00:05:04,050
<font color="#E5E5E5">compile-time instrumentation first</font>

103
00:05:01,300 --> 00:05:09,720
iteration of this<font color="#E5E5E5"> was</font><font color="#CCCCCC"> implemented as an</font>

104
00:05:04,050 --> 00:05:13,390
added GCC<font color="#CCCCCC"> plugin or added</font><font color="#E5E5E5"> pass with GCC</font>

105
00:05:09,720 --> 00:05:16,000
<font color="#E5E5E5">which instrumented added instrumentation</font>

106
00:05:13,390 --> 00:05:19,120
during assembly<font color="#E5E5E5"> process second iteration</font>

107
00:05:16,000 --> 00:05:19,930
<font color="#E5E5E5">used the</font><font color="#CCCCCC"> Klang Klang instrumentation</font>

108
00:05:19,120 --> 00:05:23,290
<font color="#E5E5E5">related</font>

109
00:05:19,930 --> 00:05:25,960
added<font color="#CCCCCC"> LLVM pass which actually allows</font>

110
00:05:23,290 --> 00:05:31,240
you to<font color="#CCCCCC"> be more to be faster to optimize</font>

111
00:05:25,960 --> 00:05:32,710
your code and whatnot<font color="#E5E5E5"> and main takeaway</font>

112
00:05:31,240 --> 00:05:34,810
from this during the compile time

113
00:05:32,710 --> 00:05:37,450
instrumentation is that it achieves

114
00:05:34,810 --> 00:05:39,669
<font color="#E5E5E5">really really fast execution</font><font color="#CCCCCC"> and a</font>

115
00:05:37,450 --> 00:05:43,450
fraction of the<font color="#E5E5E5"> slowdown compared to</font>

116
00:05:39,669 --> 00:05:45,609
native execution<font color="#CCCCCC"> the second idea</font><font color="#E5E5E5"> is that</font>

117
00:05:43,450 --> 00:05:48,669
instead<font color="#CCCCCC"> of doing just</font><font color="#E5E5E5"> the basic block</font>

118
00:05:45,610 --> 00:05:52,300
coverage here in FL we're doing<font color="#CCCCCC"> edge</font>

119
00:05:48,669 --> 00:05:54,219
transition tracing so whenever we

120
00:05:52,300 --> 00:05:56,830
transition from<font color="#E5E5E5"> one basic block to a</font>

121
00:05:54,220 --> 00:05:58,990
second basic block<font color="#E5E5E5"> we record</font><font color="#CCCCCC"> that as a</font>

122
00:05:56,830 --> 00:06:01,240
transition<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can distinguish how we</font>

123
00:05:58,990 --> 00:06:03,160
got<font color="#E5E5E5"> to the second block because the</font>

124
00:06:01,240 --> 00:06:05,050
block<font color="#CCCCCC"> one block and</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> multiple</font>

125
00:06:03,160 --> 00:06:06,910
targets<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> actually important</font>

126
00:06:05,050 --> 00:06:09,970
here and the instrumentation<font color="#E5E5E5"> that's</font>

127
00:06:06,910 --> 00:06:12,430
being added<font color="#E5E5E5"> into in front of every basic</font>

128
00:06:09,970 --> 00:06:15,070
block to simplify things and the

129
00:06:12,430 --> 00:06:17,530
<font color="#CCCCCC">compiled</font><font color="#E5E5E5"> compiled binary is look</font>

130
00:06:15,070 --> 00:06:19,210
something like this<font color="#CCCCCC"> the</font><font color="#E5E5E5"> current location</font>

131
00:06:17,530 --> 00:06:23,140
<font color="#E5E5E5">the current</font><font color="#CCCCCC"> idea of the basic block is</font>

132
00:06:19,210 --> 00:06:25,359
generated at random<font color="#CCCCCC"> we have a piece of</font>

133
00:06:23,140 --> 00:06:29,530
<font color="#E5E5E5">shared memory which we just mark as a</font>

134
00:06:25,360 --> 00:06:31,780
bitmap with at the value<font color="#E5E5E5"> of the current</font>

135
00:06:29,530 --> 00:06:33,789
location<font color="#CCCCCC"> XOR with the previous location</font>

136
00:06:31,780 --> 00:06:37,479
and in that way we get<font color="#E5E5E5"> the path</font>

137
00:06:33,789 --> 00:06:39,099
transition which is<font color="#E5E5E5"> what we want and the</font>

138
00:06:37,479 --> 00:06:40,050
last<font color="#E5E5E5"> line that says previous location</font>

139
00:06:39,099 --> 00:06:42,690
equals<font color="#E5E5E5"> currently</font>

140
00:06:40,050 --> 00:06:47,099
shifted with one just<font color="#E5E5E5"> lets us have a</font>

141
00:06:42,690 --> 00:06:49,940
sort of<font color="#CCCCCC"> account of how many times we've</font>

142
00:06:47,099 --> 00:06:52,319
entered<font color="#CCCCCC"> the loop or something like that</font>

143
00:06:49,940 --> 00:06:54,199
all of<font color="#CCCCCC"> these are recorded into a</font>

144
00:06:52,319 --> 00:06:57,210
relatively<font color="#E5E5E5"> small bitmap which is</font>

145
00:06:54,199 --> 00:06:58,740
lightning<font color="#CCCCCC"> clasp to compare</font><font color="#E5E5E5"> because you</font>

146
00:06:57,210 --> 00:07:00,750
want<font color="#E5E5E5"> to compare them again and again and</font>

147
00:06:58,740 --> 00:07:02,879
<font color="#E5E5E5">again to know which ones are better and</font>

148
00:07:00,750 --> 00:07:07,349
which<font color="#E5E5E5"> words are not so that's very</font>

149
00:07:02,879 --> 00:07:10,349
important<font color="#E5E5E5"> and another performance bonus</font>

150
00:07:07,349 --> 00:07:12,509
that<font color="#CCCCCC"> AFL has is this thing called fork</font>

151
00:07:10,349 --> 00:07:15,650
server<font color="#E5E5E5"> so what it does when you start</font>

152
00:07:12,509 --> 00:07:18,479
processed in injects forking demon

153
00:07:15,650 --> 00:07:21,060
inside<font color="#E5E5E5"> at the start of the process it</font>

154
00:07:18,479 --> 00:07:23,520
<font color="#E5E5E5">Forks an image and because on</font><font color="#CCCCCC"> Linux</font>

155
00:07:21,060 --> 00:07:27,750
systems<font color="#E5E5E5"> or other systems fork is</font>

156
00:07:23,520 --> 00:07:30,948
implemented as<font color="#E5E5E5"> copy and</font><font color="#CCCCCC"> write it you we</font>

157
00:07:27,750 --> 00:07:33,539
<font color="#E5E5E5">actually get a new process for free</font>

158
00:07:30,949 --> 00:07:36,569
<font color="#E5E5E5">nothing gets copied no memory gets</font>

159
00:07:33,539 --> 00:07:39,419
<font color="#E5E5E5">actually no physical memory gets copied</font>

160
00:07:36,569 --> 00:07:42,870
so we it's pretty fast to create<font color="#E5E5E5"> new</font>

161
00:07:39,419 --> 00:07:45,240
processes<font color="#E5E5E5"> that way</font><font color="#CCCCCC"> how do we</font><font color="#E5E5E5"> actually</font>

162
00:07:42,870 --> 00:07:47,550
use FL<font color="#CCCCCC"> first thing that</font><font color="#E5E5E5"> you want to do</font>

163
00:07:45,240 --> 00:07:51,210
is get a<font color="#E5E5E5"> bunch of files and select</font>

164
00:07:47,550 --> 00:07:53,009
favorites<font color="#CCCCCC"> FL does that by</font><font color="#E5E5E5"> executing each</font>

165
00:07:51,210 --> 00:07:56,130
of the test cases<font color="#E5E5E5"> that you throw at</font><font color="#CCCCCC"> it</font>

166
00:07:53,009 --> 00:07:58,050
<font color="#CCCCCC">against the</font><font color="#E5E5E5"> target records the bitmap</font>

167
00:07:56,130 --> 00:08:01,080
compares the bitmaps and<font color="#E5E5E5"> keeps the only</font>

168
00:07:58,050 --> 00:08:04,469
interesting ones<font color="#CCCCCC"> Dion only keeps</font><font color="#E5E5E5"> the</font>

169
00:08:01,080 --> 00:08:07,198
ones that<font color="#E5E5E5"> actually add</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the process</font>

170
00:08:04,469 --> 00:08:10,110
coverage<font color="#E5E5E5"> add new code</font><font color="#CCCCCC"> to the to the</font>

171
00:08:07,199 --> 00:08:13,440
bitmap<font color="#CCCCCC"> and if the two test cases</font><font color="#E5E5E5"> have</font>

172
00:08:10,110 --> 00:08:15,830
the<font color="#E5E5E5"> same bitmap</font><font color="#CCCCCC"> it takes the smaller one</font>

173
00:08:13,440 --> 00:08:19,680
<font color="#E5E5E5">and the faster one so it prioritizes</font>

174
00:08:15,830 --> 00:08:21,830
<font color="#E5E5E5">small and fast test cases because test</font>

175
00:08:19,680 --> 00:08:24,509
cases that<font color="#E5E5E5"> takes too long can</font><font color="#CCCCCC"> be</font>

176
00:08:21,830 --> 00:08:26,490
somewhat more interesting<font color="#E5E5E5"> but they cost</font>

177
00:08:24,509 --> 00:08:30,210
you a lot because<font color="#E5E5E5"> here we're doing</font>

178
00:08:26,490 --> 00:08:32,450
genetical algorithm and slow test cases

179
00:08:30,210 --> 00:08:35,250
cost you a<font color="#E5E5E5"> lot with</font><font color="#CCCCCC"> each generation</font>

180
00:08:32,450 --> 00:08:37,409
after<font color="#E5E5E5"> it selects the</font><font color="#CCCCCC"> favorites it</font>

181
00:08:35,250 --> 00:08:39,839
mutates favorites<font color="#E5E5E5"> first</font>

182
00:08:37,409 --> 00:08:41,909
deterministically<font color="#E5E5E5"> one by one with their</font>

183
00:08:39,839 --> 00:08:46,320
deterministic algorithms<font color="#E5E5E5"> then then</font>

184
00:08:41,909 --> 00:08:48,300
proceeds<font color="#CCCCCC"> to mutate them with some random</font>

185
00:08:46,320 --> 00:08:51,000
<font color="#CCCCCC">and group algorithms</font><font color="#E5E5E5"> while doing that</font>

186
00:08:48,300 --> 00:08:53,329
<font color="#E5E5E5">new paths</font><font color="#CCCCCC"> inside the process will</font><font color="#E5E5E5"> get</font>

187
00:08:51,000 --> 00:08:56,389
<font color="#E5E5E5">triggered which means we get</font><font color="#CCCCCC"> new</font>

188
00:08:53,329 --> 00:09:00,229
new test cases which<font color="#CCCCCC"> we can then</font><font color="#E5E5E5"> later</font>

189
00:08:56,389 --> 00:09:03,679
<font color="#E5E5E5">later on</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> add to our</font><font color="#CCCCCC"> queue and fuzz</font>

190
00:09:00,230 --> 00:09:06,439
<font color="#E5E5E5">still mutate them spreading the total</font>

191
00:09:03,679 --> 00:09:08,179
coverage of the whole corpus<font color="#CCCCCC"> and getting</font>

192
00:09:06,439 --> 00:09:10,790
a better corpus and better<font color="#CCCCCC"> results</font><font color="#E5E5E5"> and</font>

193
00:09:08,179 --> 00:09:15,920
it<font color="#CCCCCC"> basically does that until you tell it</font>

194
00:09:10,790 --> 00:09:18,139
<font color="#CCCCCC">to stop it just</font><font color="#E5E5E5"> never stopped</font><font color="#CCCCCC"> the main</font>

195
00:09:15,920 --> 00:09:21,019
things that people<font color="#E5E5E5"> have understood from</font>

196
00:09:18,139 --> 00:09:22,579
using FL that<font color="#E5E5E5"> speed is crucial because</font>

197
00:09:21,019 --> 00:09:26,920
<font color="#E5E5E5">here we're doing brute force</font>

198
00:09:22,579 --> 00:09:29,839
vulnerability<font color="#E5E5E5"> a discovery we need to</font>

199
00:09:26,920 --> 00:09:32,029
push as many test cases<font color="#E5E5E5"> as we can per</font>

200
00:09:29,839 --> 00:09:33,889
second to the<font color="#E5E5E5"> target in order to trigger</font>

201
00:09:32,029 --> 00:09:36,410
interesting vulnerabilities<font color="#E5E5E5"> especially</font>

202
00:09:33,889 --> 00:09:41,089
in<font color="#CCCCCC"> complex or complex or ready tested</font>

203
00:09:36,410 --> 00:09:44,238
targets<font color="#CCCCCC"> that can be hard so many many</font>

204
00:09:41,089 --> 00:09:46,670
<font color="#CCCCCC">execution is what we want it's better to</font>

205
00:09:44,239 --> 00:09:48,670
throw<font color="#E5E5E5"> away big and slow inputs as I</font>

206
00:09:46,670 --> 00:09:53,089
already said because they<font color="#E5E5E5"> cost you a lot</font>

207
00:09:48,670 --> 00:09:56,238
<font color="#CCCCCC">also in</font><font color="#E5E5E5"> whole</font><font color="#CCCCCC"> its design and</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> kiss</font>

208
00:09:53,089 --> 00:10:00,019
<font color="#CCCCCC">principle is employed keep it simple</font>

209
00:09:56,239 --> 00:10:02,389
stupid<font color="#CCCCCC"> so it's really easy to</font><font color="#E5E5E5"> use no</font>

210
00:10:00,019 --> 00:10:05,239
fancy algorithms<font color="#E5E5E5"> no symbolic execution</font>

211
00:10:02,389 --> 00:10:08,139
<font color="#E5E5E5">engines</font><font color="#CCCCCC"> the solvers</font><font color="#E5E5E5"> theorem provers or</font>

212
00:10:05,239 --> 00:10:12,470
<font color="#CCCCCC">what not</font><font color="#E5E5E5"> it's just brute force with</font>

213
00:10:08,139 --> 00:10:14,720
really<font color="#E5E5E5"> simple algorithm there is only</font>

214
00:10:12,470 --> 00:10:16,819
one<font color="#E5E5E5"> dumb downside to a FL by itself</font>

215
00:10:14,720 --> 00:10:18,410
<font color="#E5E5E5">though and that is that it only works if</font>

216
00:10:16,819 --> 00:10:20,238
<font color="#E5E5E5">you've got source code</font><font color="#CCCCCC"> to instrument</font><font color="#E5E5E5"> the</font>

217
00:10:18,410 --> 00:10:22,219
application that we're trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> test</font>

218
00:10:20,239 --> 00:10:24,439
which is good<font color="#CCCCCC"> enough there's</font><font color="#E5E5E5"> planning of</font>

219
00:10:22,220 --> 00:10:26,689
open source<font color="#E5E5E5"> software and</font><font color="#CCCCCC"> people having</font>

220
00:10:24,439 --> 00:10:29,929
basically finding vulnerabilities which

221
00:10:26,689 --> 00:10:32,509
<font color="#E5E5E5">I fell in pretty much everything but</font>

222
00:10:29,929 --> 00:10:35,449
there have<font color="#CCCCCC"> been attempts to make it work</font>

223
00:10:32,509 --> 00:10:37,819
against binaries against the binary

224
00:10:35,449 --> 00:10:40,519
blobs<font color="#E5E5E5"> for which we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have any kind</font>

225
00:10:37,819 --> 00:10:42,799
<font color="#E5E5E5">of software</font><font color="#CCCCCC"> or reference or</font><font color="#E5E5E5"> whatnot</font>

226
00:10:40,519 --> 00:10:44,929
while some<font color="#E5E5E5"> of those were first</font>

227
00:10:42,799 --> 00:10:48,009
implemented in pin which is horribly

228
00:10:44,929 --> 00:10:50,059
slow for this kind of purpose<font color="#CCCCCC"> next</font>

229
00:10:48,009 --> 00:10:53,449
iteration with the no<font color="#E5E5E5"> Morea which is</font>

230
00:10:50,059 --> 00:10:55,100
<font color="#E5E5E5">kind of better but still not</font><font color="#CCCCCC"> there at</font>

231
00:10:53,449 --> 00:10:56,389
<font color="#E5E5E5">the problem with these two</font><font color="#CCCCCC"> is that</font>

232
00:10:55,100 --> 00:10:58,369
<font color="#E5E5E5">they're dynamic instrumentation</font>

233
00:10:56,389 --> 00:11:00,739
frameworks and they range from<font color="#E5E5E5"> and the</font>

234
00:10:58,369 --> 00:11:04,009
<font color="#CCCCCC">binaries</font><font color="#E5E5E5"> each</font><font color="#CCCCCC"> time in case of denim or</font>

235
00:11:00,739 --> 00:11:06,430
you can get<font color="#E5E5E5"> to the instrumentation cache</font>

236
00:11:04,009 --> 00:11:08,200
and optimize it<font color="#CCCCCC"> this</font><font color="#E5E5E5"> away but</font>

237
00:11:06,430 --> 00:11:10,479
in the case<font color="#E5E5E5"> of</font><font color="#CCCCCC"> pen that's just not</font>

238
00:11:08,200 --> 00:11:13,920
exposed<font color="#E5E5E5"> to you and the one thing that</font>

239
00:11:10,480 --> 00:11:17,710
<font color="#CCCCCC">did work and does work</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> flq emu which</font>

240
00:11:13,920 --> 00:11:20,469
leverages cue emus<font color="#CCCCCC"> user-mode</font>

241
00:11:17,710 --> 00:11:22,570
instrumentation<font color="#E5E5E5"> so when</font><font color="#CCCCCC"> you run the</font>

242
00:11:20,470 --> 00:11:24,370
binary true community move it adds a

243
00:11:22,570 --> 00:11:27,610
bunch of<font color="#CCCCCC"> instructions</font><font color="#E5E5E5"> during the</font>

244
00:11:24,370 --> 00:11:30,010
translation<font color="#CCCCCC"> right layer there it's fast</font>

245
00:11:27,610 --> 00:11:33,010
faster than<font color="#E5E5E5"> the previous two but it's</font>

246
00:11:30,010 --> 00:11:35,290
still far far away<font color="#E5E5E5"> from native execution</font>

247
00:11:33,010 --> 00:11:39,279
speed and the additional problem<font color="#CCCCCC"> is that</font>

248
00:11:35,290 --> 00:11:43,240
we either<font color="#E5E5E5"> fast or either face only the</font>

249
00:11:39,279 --> 00:11:45,700
main binary or we trace<font color="#E5E5E5"> everything so by</font>

250
00:11:43,240 --> 00:11:49,140
<font color="#E5E5E5">that I mean we trace all</font><font color="#CCCCCC"> the shared</font>

251
00:11:45,700 --> 00:11:51,700
libraries that are<font color="#E5E5E5"> used by</font><font color="#CCCCCC"> the binary</font>

252
00:11:49,140 --> 00:11:54,160
which is sometimes<font color="#E5E5E5"> not what we want we</font>

253
00:11:51,700 --> 00:11:56,890
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> target specifically</font><font color="#E5E5E5"> binary</font><font color="#CCCCCC"> I</font>

254
00:11:54,160 --> 00:12:00,279
really want to<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> fast lead math</font>

255
00:11:56,890 --> 00:12:05,290
or leap see I want to<font color="#E5E5E5"> file a Lib t4 Lib</font>

256
00:12:00,279 --> 00:12:08,560
JPEG or<font color="#CCCCCC"> something like that a small</font>

257
00:12:05,290 --> 00:12:09,969
detour<font color="#CCCCCC"> what I'm actually talking about a</font>

258
00:12:08,560 --> 00:12:12,880
tool that I'm actually<font color="#CCCCCC"> talking about</font>

259
00:12:09,970 --> 00:12:15,430
<font color="#CCCCCC">realize</font><font color="#E5E5E5"> in this</font><font color="#CCCCCC"> didn't strain work which</font>

260
00:12:12,880 --> 00:12:18,189
is similar in vision to pin or<font color="#E5E5E5"> denim</font>

261
00:12:15,430 --> 00:12:20,489
<font color="#CCCCCC">area but with one crucial</font><font color="#E5E5E5"> did crucial</font>

262
00:12:18,190 --> 00:12:23,110
difference<font color="#E5E5E5"> it's also binary</font>

263
00:12:20,490 --> 00:12:26,200
instrumentation analysis modification

264
00:12:23,110 --> 00:12:28,750
performance monitoring tool<font color="#E5E5E5"> it comes out</font>

265
00:12:26,200 --> 00:12:32,709
of University<font color="#CCCCCC"> of Maryland</font><font color="#E5E5E5"> University of</font>

266
00:12:28,750 --> 00:12:35,920
Wisconsin<font color="#CCCCCC"> the main difference with</font>

267
00:12:32,709 --> 00:12:38,380
<font color="#CCCCCC">denimm Aria compared to den and den ins</font>

268
00:12:35,920 --> 00:12:41,050
compared to Dannemora or<font color="#E5E5E5"> pin is that it</font>

269
00:12:38,380 --> 00:12:43,689
does static binary<font color="#E5E5E5"> rewriting for</font><font color="#CCCCCC"> wear</font>

270
00:12:41,050 --> 00:12:46,150
<font color="#CCCCCC">with denim Aria we instrument the</font>

271
00:12:43,690 --> 00:12:48,459
<font color="#CCCCCC">binaries during runtime which</font><font color="#E5E5E5"> then ends</font>

272
00:12:46,150 --> 00:12:50,770
we can lift the binary<font color="#CCCCCC"> analyze it add</font>

273
00:12:48,459 --> 00:12:53,380
the instrumentation<font color="#CCCCCC"> that we want</font><font color="#E5E5E5"> into</font>

274
00:12:50,770 --> 00:12:55,270
<font color="#E5E5E5">places that we want repackage the binary</font>

275
00:12:53,380 --> 00:12:57,700
<font color="#E5E5E5">and write it back to disk what that</font>

276
00:12:55,270 --> 00:12:59,319
allows<font color="#CCCCCC"> us to do is instrument once and</font>

277
00:12:57,700 --> 00:13:03,370
then run the instrumented binary

278
00:12:59,320 --> 00:13:07,779
multiple multiple times<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> really</font>

279
00:13:03,370 --> 00:13:10,329
a lot faster than then<font color="#E5E5E5"> previously it has</font>

280
00:13:07,779 --> 00:13:12,310
<font color="#CCCCCC">a pretty</font><font color="#E5E5E5"> much support for all</font><font color="#CCCCCC"> the</font>

281
00:13:10,329 --> 00:13:16,689
<font color="#CCCCCC">instructions had the whole</font><font color="#E5E5E5"> instruction</font>

282
00:13:12,310 --> 00:13:18,479
set<font color="#CCCCCC"> for x86</font><font color="#E5E5E5"> and MD 64</font>

283
00:13:16,690 --> 00:13:21,000
full Linux

284
00:13:18,480 --> 00:13:22,800
<font color="#CCCCCC">for linux support</font><font color="#E5E5E5"> and parcel in Windows</font>

285
00:13:21,000 --> 00:13:26,779
support<font color="#E5E5E5"> they keep telling me</font><font color="#CCCCCC"> it's</font>

286
00:13:22,800 --> 00:13:26,779
getting<font color="#E5E5E5"> there but it's still not there</font>

287
00:13:28,730 --> 00:13:33,089
<font color="#CCCCCC">the problem with this is that</font><font color="#E5E5E5"> it has</font>

288
00:13:31,649 --> 00:13:37,050
some false positives<font color="#CCCCCC"> and false negatives</font>

289
00:13:33,089 --> 00:13:39,360
<font color="#E5E5E5">because doing the static analysis the</font>

290
00:13:37,050 --> 00:13:41,849
core<font color="#CCCCCC"> problem in doing the static binary</font>

291
00:13:39,360 --> 00:13:43,829
<font color="#E5E5E5">rewriting is recovering the control flow</font>

292
00:13:41,850 --> 00:13:47,760
graph of the<font color="#E5E5E5"> binary so what you want to</font>

293
00:13:43,829 --> 00:13:50,279
<font color="#E5E5E5">do is read the read the binary find all</font>

294
00:13:47,760 --> 00:13:52,380
the code inside<font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary find all the</font>

295
00:13:50,279 --> 00:13:54,540
functions all the basic<font color="#E5E5E5"> box and whatnot</font>

296
00:13:52,380 --> 00:13:57,570
and that's<font color="#E5E5E5"> not a simple simple problem</font>

297
00:13:54,540 --> 00:14:00,329
because we<font color="#E5E5E5"> have in our</font><font color="#CCCCCC"> binaries</font><font color="#E5E5E5"> in our</font>

298
00:13:57,570 --> 00:14:03,000
Intel platform so it's not<font color="#E5E5E5"> we have mixed</font>

299
00:14:00,329 --> 00:14:05,760
code in data and the same in<font color="#E5E5E5"> the same</font>

300
00:14:03,000 --> 00:14:07,920
regions and that's not an easy<font color="#E5E5E5"> easy</font>

301
00:14:05,760 --> 00:14:11,610
problem to solve<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we will sometimes</font>

302
00:14:07,920 --> 00:14:13,829
<font color="#E5E5E5">result in false positives or false</font>

303
00:14:11,610 --> 00:14:16,709
negatives<font color="#CCCCCC"> but it does really good is</font>

304
00:14:13,829 --> 00:14:19,500
that it has a robust instrumentation API

305
00:14:16,709 --> 00:14:24,029
which is really<font color="#CCCCCC"> simple to use</font><font color="#E5E5E5"> and allows</font>

306
00:14:19,500 --> 00:14:26,839
you to has great granularity<font color="#E5E5E5"> to</font><font color="#CCCCCC"> can</font>

307
00:14:24,029 --> 00:14:30,480
basically hook the functions you can do

308
00:14:26,839 --> 00:14:32,550
basic block and<font color="#E5E5E5"> level instrumentation or</font>

309
00:14:30,480 --> 00:14:36,120
<font color="#CCCCCC">even instructional and instrumentation</font>

310
00:14:32,550 --> 00:14:39,479
so<font color="#E5E5E5"> full</font><font color="#CCCCCC"> freedom of what you want to</font><font color="#E5E5E5"> do</font>

311
00:14:36,120 --> 00:14:41,970
in<font color="#E5E5E5"> order to instrument the binary</font><font color="#CCCCCC"> D IDs</font>

312
00:14:39,480 --> 00:14:43,740
to read the binary<font color="#CCCCCC"> you build a control</font>

313
00:14:41,970 --> 00:14:46,140
<font color="#CCCCCC">flow graph of it and then walk</font><font color="#E5E5E5"> that</font>

314
00:14:43,740 --> 00:14:47,519
graph<font color="#E5E5E5"> find a code that you want add the</font>

315
00:14:46,140 --> 00:14:53,430
<font color="#E5E5E5">instrumentation in places</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you want</font>

316
00:14:47,519 --> 00:14:55,920
<font color="#E5E5E5">and write it back to this</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> fast is</font>

317
00:14:53,430 --> 00:14:57,870
faster mostly<font color="#CCCCCC"> because we still get to</font>

318
00:14:55,920 --> 00:14:58,620
use the instruction cache<font color="#E5E5E5"> which doesn't</font>

319
00:14:57,870 --> 00:15:01,800
<font color="#E5E5E5">get evicted</font>

320
00:14:58,620 --> 00:15:05,640
each time we branch to<font color="#CCCCCC"> two instrumented</font>

321
00:15:01,800 --> 00:15:08,849
code or the<font color="#E5E5E5"> principle of code locality</font>

322
00:15:05,640 --> 00:15:12,420
is somewhat more prettier than in other

323
00:15:08,850 --> 00:15:15,329
frameworks<font color="#CCCCCC"> as I mentioned</font><font color="#E5E5E5"> the drawbacks</font>

324
00:15:12,420 --> 00:15:19,610
are that it<font color="#E5E5E5"> can sometimes fail and it's</font>

325
00:15:15,329 --> 00:15:23,849
not<font color="#E5E5E5"> really working well windows code</font>

326
00:15:19,610 --> 00:15:25,769
<font color="#CCCCCC">answer to</font><font color="#E5E5E5"> the AFL didn't so I found out</font>

327
00:15:23,850 --> 00:15:28,740
<font color="#CCCCCC">that dentist</font><font color="#E5E5E5"> would be a perfect</font>

328
00:15:25,769 --> 00:15:31,970
framework to write<font color="#E5E5E5"> and I felt like tool</font>

329
00:15:28,740 --> 00:15:31,970
which would add

330
00:15:32,290 --> 00:15:37,029
similar to<font color="#E5E5E5"> AFL instrumentation into</font>

331
00:15:34,329 --> 00:15:40,089
<font color="#E5E5E5">already compiled binaries which I could</font>

332
00:15:37,029 --> 00:15:46,899
then<font color="#CCCCCC"> use with vanilla I</font><font color="#E5E5E5"> felt if as for</font>

333
00:15:40,089 --> 00:15:49,839
vulnerabilities we get as close<font color="#CCCCCC"> as we</font>

334
00:15:46,899 --> 00:15:53,110
can to<font color="#CCCCCC"> the native speed</font><font color="#E5E5E5"> still slower</font>

335
00:15:49,839 --> 00:15:55,959
than<font color="#CCCCCC"> whenever</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> fell but really</font><font color="#E5E5E5"> really</font>

336
00:15:53,110 --> 00:15:59,199
fast<font color="#E5E5E5"> much</font><font color="#CCCCCC"> faster than killing which we</font>

337
00:15:55,959 --> 00:16:02,050
will see in<font color="#E5E5E5"> the demo</font><font color="#CCCCCC"> it's has support</font>

338
00:15:59,199 --> 00:16:04,089
for fork server and compared<font color="#CCCCCC"> to FL</font><font color="#E5E5E5"> qu</font>

339
00:16:02,050 --> 00:16:05,979
you<font color="#E5E5E5"> can actually pick and choose which</font>

340
00:16:04,089 --> 00:16:09,190
parts of<font color="#E5E5E5"> the code you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to instrument</font>

341
00:16:05,980 --> 00:16:11,259
which libraries which binaries which

342
00:16:09,190 --> 00:16:15,040
comes really useful when fuzzing

343
00:16:11,259 --> 00:16:17,920
different applications we usage example

344
00:16:15,040 --> 00:16:20,349
here shows just<font color="#E5E5E5"> the list of options that</font>

345
00:16:17,920 --> 00:16:22,420
you<font color="#CCCCCC"> can use</font><font color="#E5E5E5"> you have an input and output</font>

346
00:16:20,350 --> 00:16:24,069
binary you<font color="#E5E5E5"> can list libraries that you</font>

347
00:16:22,420 --> 00:16:25,750
want to instrument even<font color="#E5E5E5"> external</font>

348
00:16:24,069 --> 00:16:28,149
libraries which aren't detected

349
00:16:25,750 --> 00:16:30,089
automatically just loaded at runtime<font color="#E5E5E5"> or</font>

350
00:16:28,149 --> 00:16:35,829
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> that and a</font><font color="#E5E5E5"> bunch of</font>

351
00:16:30,089 --> 00:16:39,190
<font color="#E5E5E5">debugging options and inputs</font><font color="#CCCCCC"> see how it</font>

352
00:16:35,829 --> 00:16:42,489
works<font color="#E5E5E5"> it's relatively simple</font><font color="#CCCCCC"> on one hand</font>

353
00:16:39,190 --> 00:16:44,980
we have this<font color="#E5E5E5"> Lib</font><font color="#CCCCCC"> ethylene inst library</font>

354
00:16:42,490 --> 00:16:47,529
which gets injected into<font color="#E5E5E5"> the targets</font>

355
00:16:44,980 --> 00:16:50,980
target binary which has<font color="#CCCCCC"> basically two</font>

356
00:16:47,529 --> 00:16:54,279
functions<font color="#E5E5E5"> one is in it FL fork server</font>

357
00:16:50,980 --> 00:16:56,740
which actually injects the fork server

358
00:16:54,279 --> 00:17:00,550
that<font color="#E5E5E5"> a FL needs to achieve</font><font color="#CCCCCC"> its speed</font>

359
00:16:56,740 --> 00:17:03,910
into the<font color="#E5E5E5"> binary it does that</font><font color="#CCCCCC"> at the</font>

360
00:17:00,550 --> 00:17:05,619
<font color="#CCCCCC">start</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> start of the text segment</font>

361
00:17:03,910 --> 00:17:08,168
<font color="#E5E5E5">so</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> first instruction in the</font>

362
00:17:05,619 --> 00:17:09,729
actual process<font color="#E5E5E5"> it jumps to the fork</font>

363
00:17:08,169 --> 00:17:12,189
server and then Forks from there

364
00:17:09,730 --> 00:17:14,799
from there on you can<font color="#CCCCCC"> actually point</font><font color="#E5E5E5"> it</font>

365
00:17:12,189 --> 00:17:16,929
<font color="#E5E5E5">to main or some other point that you</font>

366
00:17:14,799 --> 00:17:19,179
want<font color="#E5E5E5"> but that kind of tends to get</font>

367
00:17:16,929 --> 00:17:21,189
<font color="#E5E5E5">tricky and the second function is just</font>

368
00:17:19,179 --> 00:17:23,679
<font color="#E5E5E5">the basic block callback this is the</font>

369
00:17:21,189 --> 00:17:26,740
function that gets called<font color="#E5E5E5"> each time a</font>

370
00:17:23,679 --> 00:17:28,830
new basic block is<font color="#E5E5E5"> hit to</font><font color="#CCCCCC"> record that</font>

371
00:17:26,740 --> 00:17:33,570
adds transition that we want<font color="#E5E5E5"> to and</font>

372
00:17:28,830 --> 00:17:35,290
recall<font color="#CCCCCC"> that it's similar</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> the AFL's</font>

373
00:17:33,570 --> 00:17:38,590
instrumentation that<font color="#CCCCCC"> they're previously</font>

374
00:17:35,290 --> 00:17:40,570
shown so that's the shared library and

375
00:17:38,590 --> 00:17:42,280
this<font color="#E5E5E5"> is the excerpt from the</font>

376
00:17:40,570 --> 00:17:46,030
instrumentation tool<font color="#E5E5E5"> I'm not gonna go</font>

377
00:17:42,280 --> 00:17:46,490
<font color="#E5E5E5">into details here much but the point is</font>

378
00:17:46,030 --> 00:17:50,090
<font color="#E5E5E5">that</font>

379
00:17:46,490 --> 00:17:51,530
start with the<font color="#E5E5E5"> app binary you iterate</font>

380
00:17:50,090 --> 00:17:53,899
with the for loop<font color="#E5E5E5"> through all the</font>

381
00:17:51,530 --> 00:17:56,389
<font color="#CCCCCC">modules inside the module you will trade</font>

382
00:17:53,900 --> 00:17:59,870
through all the functions<font color="#CCCCCC"> and then for</font>

383
00:17:56,390 --> 00:18:02,750
each<font color="#CCCCCC"> function you instrument you iterate</font>

384
00:17:59,870 --> 00:18:04,820
through<font color="#CCCCCC"> its</font><font color="#E5E5E5"> basic box instrumenting them</font>

385
00:18:02,750 --> 00:18:09,440
and so<font color="#E5E5E5"> on when you're done with that we</font>

386
00:18:04,820 --> 00:18:12,800
add we insert a call to the fork server

387
00:18:09,440 --> 00:18:15,050
and then just write the binary back to

388
00:18:12,800 --> 00:18:19,309
disk<font color="#E5E5E5"> and this is how we actually add the</font>

389
00:18:15,050 --> 00:18:23,540
instrumentation<font color="#CCCCCC"> we walk the functions</font>

390
00:18:19,309 --> 00:18:28,280
functions flow graph find<font color="#E5E5E5"> each basic</font>

391
00:18:23,540 --> 00:18:31,129
block and get<font color="#E5E5E5"> a random ID for</font><font color="#CCCCCC"> that basic</font>

392
00:18:28,280 --> 00:18:33,470
block<font color="#E5E5E5"> build this kind</font><font color="#CCCCCC"> of function call</font>

393
00:18:31,130 --> 00:18:36,590
expression<font color="#E5E5E5"> which we have here which has</font>

394
00:18:33,470 --> 00:18:38,120
a basic block random ID<font color="#E5E5E5"> as an argument</font>

395
00:18:36,590 --> 00:18:41,240
which is the<font color="#CCCCCC"> only argument to that</font>

396
00:18:38,120 --> 00:18:44,719
<font color="#E5E5E5">function that</font><font color="#CCCCCC"> function being this basic</font>

397
00:18:41,240 --> 00:18:47,630
block<font color="#E5E5E5"> callback</font><font color="#CCCCCC"> we build a call to that</font>

398
00:18:44,720 --> 00:18:51,770
function<font color="#CCCCCC"> and</font><font color="#E5E5E5"> just place it with with</font>

399
00:18:47,630 --> 00:18:55,460
this insert snippet code<font color="#E5E5E5"> into the actual</font>

400
00:18:51,770 --> 00:18:56,929
<font color="#CCCCCC">binary so once that's done you write the</font>

401
00:18:55,460 --> 00:19:04,160
<font color="#CCCCCC">binary back to this</font><font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> run it</font>

402
00:18:56,929 --> 00:19:08,330
<font color="#CCCCCC">as normal so we can try and you see how</font>

403
00:19:04,160 --> 00:19:12,050
it works<font color="#E5E5E5"> how it compares to vanilla</font><font color="#CCCCCC"> IFL</font>

404
00:19:08,330 --> 00:19:20,389
<font color="#E5E5E5">or how it compares to QE moon in terms</font>

405
00:19:12,050 --> 00:19:23,990
of speed what should have it how<font color="#E5E5E5"> will</font>

406
00:19:20,390 --> 00:19:28,429
this work<font color="#E5E5E5"> okay</font>

407
00:19:23,990 --> 00:19:31,550
so first let's<font color="#E5E5E5"> go with vanilla</font><font color="#CCCCCC"> FL I</font>

408
00:19:28,429 --> 00:19:40,790
<font color="#E5E5E5">already have it set it up here and just</font>

409
00:19:31,550 --> 00:19:47,360
start it up<font color="#E5E5E5"> is it starting okay how do i</font>

410
00:19:40,790 --> 00:19:51,350
decrease this size here the resolution

411
00:19:47,360 --> 00:19:53,889
is messed<font color="#E5E5E5"> up with I don't know my</font>

412
00:19:51,350 --> 00:19:53,889
shortcuts

413
00:19:54,740 --> 00:20:11,480
<font color="#E5E5E5">thank you just sick that's not good</font><font color="#CCCCCC"> I</font>

414
00:20:21,800 --> 00:20:29,460
messed up a bit<font color="#E5E5E5"> there it's always the</font>

415
00:20:27,300 --> 00:20:33,270
simple things that mesh up<font color="#CCCCCC"> two demos</font>

416
00:20:29,460 --> 00:20:49,290
<font color="#CCCCCC">like what did</font><font color="#E5E5E5"> I do now kill the thing</font>

417
00:20:33,270 --> 00:20:51,150
<font color="#E5E5E5">yeah bro okay let's do this way then you</font>

418
00:20:49,290 --> 00:20:53,610
<font color="#E5E5E5">can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> use it for other platforms</font>

419
00:20:51,150 --> 00:21:07,890
<font color="#E5E5E5">but I've only used it for Intel so I'm</font>

420
00:20:53,610 --> 00:21:11,300
not too familiar with<font color="#E5E5E5"> it but yeah I'll</font>

421
00:21:07,890 --> 00:21:15,110
know what<font color="#E5E5E5"> we'll do</font><font color="#CCCCCC"> I'll do</font><font color="#E5E5E5"> it this way</font>

422
00:21:11,300 --> 00:21:17,760
here<font color="#E5E5E5"> we have this one let me</font><font color="#CCCCCC"> do the tank</font>

423
00:21:15,110 --> 00:21:20,159
<font color="#E5E5E5">this one is running the</font><font color="#CCCCCC"> denon</font>

424
00:21:17,760 --> 00:21:24,540
<font color="#CCCCCC">instrumented</font><font color="#E5E5E5"> binary and we can see the</font>

425
00:21:20,160 --> 00:21:26,420
<font color="#CCCCCC">execution speed of about thousand six</font>

426
00:21:24,540 --> 00:21:28,800
hundred executions per second

427
00:21:26,420 --> 00:21:31,320
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> think to note is</font>

428
00:21:28,800 --> 00:21:33,960
<font color="#CCCCCC">that we're getting</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> edges on the left</font>

429
00:21:31,320 --> 00:21:36,659
which<font color="#CCCCCC"> is what you want</font><font color="#E5E5E5"> and we have map</font>

430
00:21:33,960 --> 00:21:38,910
density or count coverage increasing

431
00:21:36,660 --> 00:21:40,350
constantly<font color="#E5E5E5"> which actually tells us that</font>

432
00:21:38,910 --> 00:21:44,070
<font color="#E5E5E5">everything is</font><font color="#CCCCCC"> working</font>

433
00:21:40,350 --> 00:21:46,889
so we<font color="#E5E5E5"> bottom up around a thousand and a</font>

434
00:21:44,070 --> 00:21:50,730
half or a thousand six hundred execution

435
00:21:46,890 --> 00:21:56,400
for<font color="#E5E5E5"> a second and compared to</font><font color="#CCCCCC"> flq email</font>

436
00:21:50,730 --> 00:22:00,320
which I hope will let which I hope will

437
00:21:56,400 --> 00:22:00,320
start up again<font color="#CCCCCC"> it's too small</font>

438
00:22:10,790 --> 00:22:18,540
<font color="#E5E5E5">Wyatt</font><font color="#CCCCCC"> it doesn't listen to me at</font><font color="#E5E5E5"> all</font>

439
00:22:13,710 --> 00:22:20,280
<font color="#CCCCCC">yeah let's</font><font color="#E5E5E5"> try again so we really seal</font>

440
00:22:18,540 --> 00:22:22,250
<font color="#E5E5E5">the option</font><font color="#CCCCCC"> that it won't let me do it</font>

441
00:22:20,280 --> 00:22:28,889
but okay I'll get the stats from

442
00:22:22,250 --> 00:22:31,110
<font color="#E5E5E5">different from a</font><font color="#CCCCCC"> different way you'll</font>

443
00:22:28,890 --> 00:22:36,660
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> trust me on this that we can</font>

444
00:22:31,110 --> 00:22:41,070
<font color="#CCCCCC">show the actual</font><font color="#E5E5E5"> but if I cut out the</font>

445
00:22:36,660 --> 00:22:47,070
<font color="#E5E5E5">stats it should have the average speed</font>

446
00:22:41,070 --> 00:22:50,399
<font color="#E5E5E5">which is where is it exactly</font><font color="#CCCCCC"> as</font>

447
00:22:47,070 --> 00:22:55,080
executions per second is<font color="#CCCCCC"> two hundred and</font>

448
00:22:50,400 --> 00:22:59,820
<font color="#CCCCCC">eighty which</font><font color="#E5E5E5"> is five</font><font color="#CCCCCC"> times less</font><font color="#E5E5E5"> than</font>

449
00:22:55,080 --> 00:23:02,030
with<font color="#E5E5E5"> our F of</font><font color="#CCCCCC"> dennings tool so I'll just</font>

450
00:22:59,820 --> 00:23:10,020
go<font color="#E5E5E5"> back to</font><font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> because the</font>

451
00:23:02,030 --> 00:23:11,160
demos are<font color="#CCCCCC"> custom with time so one of the</font>

452
00:23:10,020 --> 00:23:14,280
last things that<font color="#E5E5E5"> I wanted</font><font color="#CCCCCC"> to actually</font>

453
00:23:11,160 --> 00:23:16,350
<font color="#E5E5E5">talk about is some bugs that I found</font>

454
00:23:14,280 --> 00:23:19,139
true true these<font color="#E5E5E5"> tool just</font><font color="#CCCCCC"> ran</font><font color="#E5E5E5"> some</font>

455
00:23:16,350 --> 00:23:20,040
numbers<font color="#CCCCCC"> - for you guys to see</font><font color="#E5E5E5"> actually</font>

456
00:23:19,140 --> 00:23:22,800
<font color="#CCCCCC">it works</font>

457
00:23:20,040 --> 00:23:26,610
I've focused<font color="#E5E5E5"> some time last year on</font>

458
00:23:22,800 --> 00:23:29,129
fuzzing<font color="#E5E5E5"> some forgotten middleware SDKs</font>

459
00:23:26,610 --> 00:23:31,830
<font color="#CCCCCC">two of those</font><font color="#E5E5E5"> being Oracle ops alien</font>

460
00:23:29,130 --> 00:23:34,260
technology<font color="#E5E5E5"> which is just a huge library</font>

461
00:23:31,830 --> 00:23:36,179
or SDK with a bunch of parsers that

462
00:23:34,260 --> 00:23:39,060
<font color="#E5E5E5">actually parse everything you draw</font>

463
00:23:36,180 --> 00:23:41,580
against them hundreds of parsers in

464
00:23:39,060 --> 00:23:44,429
forgotten file formats<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the problem</font>

465
00:23:41,580 --> 00:23:46,919
is<font color="#E5E5E5"> it's found almost everywhere exchange</font>

466
00:23:44,430 --> 00:23:49,380
uses it for PDF<font color="#E5E5E5"> preview</font><font color="#CCCCCC"> depending on the</font>

467
00:23:46,920 --> 00:23:51,750
version<font color="#E5E5E5"> a bunch of</font><font color="#CCCCCC"> IVs use it for PDF</font>

468
00:23:49,380 --> 00:23:52,470
filtering for content extraction<font color="#CCCCCC"> for</font>

469
00:23:51,750 --> 00:23:55,500
stuff<font color="#CCCCCC"> like that</font>

470
00:23:52,470 --> 00:23:58,380
<font color="#E5E5E5">and the same deal is with HP key view</font>

471
00:23:55,500 --> 00:24:01,380
<font color="#E5E5E5">which does the</font><font color="#CCCCCC"> same thing but it's found</font>

472
00:23:58,380 --> 00:24:04,700
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the other hand in IBM dominant or IBM</font>

473
00:24:01,380 --> 00:24:07,560
notes again when a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> IVs and</font>

474
00:24:04,700 --> 00:24:11,550
document<font color="#CCCCCC"> management systems</font><font color="#E5E5E5"> and it's</font>

475
00:24:07,560 --> 00:24:12,330
just<font color="#E5E5E5"> really old C code which no one</font>

476
00:24:11,550 --> 00:24:16,230
<font color="#E5E5E5">actually</font>

477
00:24:12,330 --> 00:24:18,570
looks at a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> given a</font><font color="#E5E5E5"> month of fuzzing</font>

478
00:24:16,230 --> 00:24:20,580
<font color="#E5E5E5">month or two</font><font color="#CCCCCC"> of fuzzing and 12 cores</font><font color="#E5E5E5"> I</font>

479
00:24:18,570 --> 00:24:23,100
ended<font color="#E5E5E5"> up with thousands of crashes in a</font>

480
00:24:20,580 --> 00:24:25,710
different file format<font color="#CCCCCC"> South which I've</font>

481
00:24:23,100 --> 00:24:29,250
<font color="#E5E5E5">never heard before</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is actually what</font>

482
00:24:25,710 --> 00:24:32,460
got<font color="#E5E5E5"> me working on automatic crashes</font>

483
00:24:29,250 --> 00:24:34,470
analysis or automatic triage<font color="#E5E5E5"> because I</font>

484
00:24:32,460 --> 00:24:35,940
want<font color="#E5E5E5"> to sort which bugs to actually look</font>

485
00:24:34,470 --> 00:24:39,750
at<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> look at thousands of</font>

486
00:24:35,940 --> 00:24:43,740
crashes<font color="#CCCCCC"> after spending some time working</font>

487
00:24:39,750 --> 00:24:45,149
on that<font color="#CCCCCC"> I came</font><font color="#E5E5E5"> up with around 20</font>

488
00:24:43,740 --> 00:24:46,889
vulnerabilities which have been patched

489
00:24:45,149 --> 00:24:50,158
throughout the year throughout<font color="#CCCCCC"> the last</font>

490
00:24:46,889 --> 00:24:52,799
<font color="#E5E5E5">year there are more incoming just</font>

491
00:24:50,159 --> 00:24:56,220
waiting for Oracle to<font color="#CCCCCC"> patch them</font><font color="#E5E5E5"> it's a</font>

492
00:24:52,799 --> 00:24:59,039
similar case which give you a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of a</font>

493
00:24:56,220 --> 00:25:00,690
lot<font color="#CCCCCC"> of bugs there it's a moot point with</font>

494
00:24:59,039 --> 00:25:01,919
ownership<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well because a lot of</font>

495
00:25:00,690 --> 00:25:04,200
lenders<font color="#E5E5E5"> are they're actually</font><font color="#CCCCCC"> shipping</font>

496
00:25:01,919 --> 00:25:07,440
their binaries<font color="#CCCCCC"> nor have the new licenses</font>

497
00:25:04,200 --> 00:25:09,570
from<font color="#E5E5E5"> HP and takes a while to update</font><font color="#CCCCCC"> this</font>

498
00:25:07,440 --> 00:25:12,240
<font color="#E5E5E5">is a short list of</font><font color="#CCCCCC"> for mobility</font><font color="#E5E5E5"> that</font>

499
00:25:09,570 --> 00:25:15,418
this tool found in<font color="#E5E5E5"> the last year only in</font>

500
00:25:12,240 --> 00:25:17,669
Oracle IOT<font color="#E5E5E5"> you can see the full</font><font color="#CCCCCC"> list and</font>

501
00:25:15,419 --> 00:25:21,090
our website<font color="#CCCCCC"> I'll be showing</font><font color="#E5E5E5"> it at the</font>

502
00:25:17,669 --> 00:25:23,549
end<font color="#E5E5E5"> so the funny bug that it found to</font>

503
00:25:21,090 --> 00:25:30,029
see<font color="#E5E5E5"> rejection can find relatively</font>

504
00:25:23,549 --> 00:25:31,769
complex bugs<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> one that I</font>

505
00:25:30,029 --> 00:25:36,090
particularly found<font color="#E5E5E5"> particularly funny</font>

506
00:25:31,769 --> 00:25:38,639
was this<font color="#E5E5E5"> Unicode XML integer overflow in</font>

507
00:25:36,090 --> 00:25:41,279
this case I was planning fuzzing PDFs

508
00:25:38,639 --> 00:25:49,289
<font color="#E5E5E5">and the father came up with itself with</font>

509
00:25:41,279 --> 00:25:53,700
a XML file<font color="#E5E5E5"> which was</font><font color="#CCCCCC"> exactly 200,000 24</font>

510
00:25:49,289 --> 00:25:55,169
bytes plus<font color="#E5E5E5"> one long</font><font color="#CCCCCC"> and required</font><font color="#E5E5E5"> this</font>

511
00:25:53,700 --> 00:25:57,750
magic string at<font color="#CCCCCC"> the beginning which</font>

512
00:25:55,169 --> 00:26:03,389
turns out<font color="#CCCCCC"> to be a Unicode for the last n</font>

513
00:25:57,750 --> 00:26:07,500
value which opens<font color="#CCCCCC"> the opens up an XML</font>

514
00:26:03,389 --> 00:26:10,260
tag<font color="#E5E5E5"> and has a bunch of</font><font color="#CCCCCC"> requirements so</font>

515
00:26:07,500 --> 00:26:13,110
it mustn't have any of the less-than<font color="#CCCCCC"> or</font>

516
00:26:10,260 --> 00:26:15,090
greater-than<font color="#CCCCCC"> in plain ASCII</font><font color="#E5E5E5"> anywhere</font>

517
00:26:13,110 --> 00:26:17,309
inside<font color="#E5E5E5"> the file it must be a</font><font color="#CCCCCC"> multiple of</font>

518
00:26:15,090 --> 00:26:18,750
<font color="#E5E5E5">twenty four hundred thousand twenty four</font>

519
00:26:17,309 --> 00:26:22,080
bytes postponed by plunk

520
00:26:18,750 --> 00:26:24,570
<font color="#E5E5E5">and the father was actually seated with</font>

521
00:26:22,080 --> 00:26:26,049
nothing even remotely similar<font color="#E5E5E5"> to this</font>

522
00:26:24,570 --> 00:26:29,379
one

523
00:26:26,049 --> 00:26:31,660
this other example<font color="#E5E5E5"> is some sort of qp6</font>

524
00:26:29,380 --> 00:26:34,210
file format which I have no idea what it

525
00:26:31,660 --> 00:26:38,410
is<font color="#CCCCCC"> I just know that if I draw these</font>

526
00:26:34,210 --> 00:26:42,160
couple<font color="#E5E5E5"> of bites against IOT</font><font color="#CCCCCC"> it will get</font>

527
00:26:38,410 --> 00:26:44,350
<font color="#E5E5E5">my code execution</font><font color="#CCCCCC"> father in this case</font>

528
00:26:42,160 --> 00:26:46,390
was seated<font color="#CCCCCC"> with just an empty file</font><font color="#E5E5E5"> so it</font>

529
00:26:44,350 --> 00:26:50,770
came up<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> sequence of bytes</font><font color="#CCCCCC"> on</font>

530
00:26:46,390 --> 00:26:53,860
its own<font color="#E5E5E5"> just out of the blue and came up</font>

531
00:26:50,770 --> 00:26:58,030
<font color="#CCCCCC">with</font><font color="#E5E5E5"> code execution</font><font color="#CCCCCC"> or some sort of heap</font>

532
00:26:53,860 --> 00:26:59,830
<font color="#CCCCCC">order flow against IT</font><font color="#E5E5E5"> framework which is</font>

533
00:26:58,030 --> 00:27:01,690
<font color="#E5E5E5">just ridiculous</font>

534
00:26:59,830 --> 00:27:03,549
one of my favorite<font color="#CCCCCC"> examples from this</font>

535
00:27:01,690 --> 00:27:07,240
first<font color="#E5E5E5"> run was the</font><font color="#CCCCCC"> teeth extra sample</font>

536
00:27:03,549 --> 00:27:09,370
heap<font color="#CCCCCC"> order flow in order to this is</font><font color="#E5E5E5"> the</font>

537
00:27:07,240 --> 00:27:12,640
<font color="#CCCCCC">original file</font><font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> the first one</font>

538
00:27:09,370 --> 00:27:14,439
<font color="#E5E5E5">so there aren't many</font><font color="#CCCCCC"> differences but the</font>

539
00:27:12,640 --> 00:27:17,110
difference is<font color="#CCCCCC"> that there are in the file</font>

540
00:27:14,440 --> 00:27:19,900
need to be precise<font color="#E5E5E5"> parts need to be in</font>

541
00:27:17,110 --> 00:27:23,620
precise offsets<font color="#E5E5E5"> and in order to trigger</font>

542
00:27:19,900 --> 00:27:26,679
this<font color="#CCCCCC"> vulnerability the father had to</font>

543
00:27:23,620 --> 00:27:28,719
come<font color="#CCCCCC"> up</font><font color="#E5E5E5"> with the extra samples tag which</font>

544
00:27:26,679 --> 00:27:33,510
isn't<font color="#E5E5E5"> present in the original file to</font>

545
00:27:28,720 --> 00:27:33,510
insert it<font color="#E5E5E5"> to make a properly sized</font>

546
00:27:33,540 --> 00:27:41,559
properly<font color="#CCCCCC"> sized tag information and in in</font>

547
00:27:39,429 --> 00:27:43,780
<font color="#E5E5E5">that doing heat</font><font color="#CCCCCC"> a bunch of</font><font color="#E5E5E5"> other</font>

548
00:27:41,559 --> 00:27:46,330
parameters<font color="#CCCCCC"> in order to actually trigger</font>

549
00:27:43,780 --> 00:27:49,030
<font color="#E5E5E5">the overflow because</font><font color="#CCCCCC"> if one</font><font color="#E5E5E5"> of these</font>

550
00:27:46,330 --> 00:27:52,780
<font color="#E5E5E5">parameters like bit per sample or</font>

551
00:27:49,030 --> 00:27:55,120
samples per pixel<font color="#CCCCCC"> do not work out</font><font color="#E5E5E5"> the</font>

552
00:27:52,780 --> 00:27:57,730
<font color="#CCCCCC">integer will just wrap and you</font><font color="#E5E5E5"> won't</font><font color="#CCCCCC"> hit</font>

553
00:27:55,120 --> 00:28:03,699
the<font color="#E5E5E5"> Oracle but if the values</font><font color="#CCCCCC"> are pretty</font>

554
00:27:57,730 --> 00:28:06,910
<font color="#E5E5E5">exact you hit the overflow and and you</font>

555
00:28:03,700 --> 00:28:09,760
get integer overflow<font color="#E5E5E5"> and you can mess up</font>

556
00:28:06,910 --> 00:28:14,049
<font color="#E5E5E5">the the memory and then</font><font color="#CCCCCC"> further on</font><font color="#E5E5E5"> with</font>

557
00:28:09,760 --> 00:28:15,580
<font color="#CCCCCC">two code execution and just to wrap</font>

558
00:28:14,049 --> 00:28:18,190
things up some of the<font color="#E5E5E5"> takeaways that</font>

559
00:28:15,580 --> 00:28:21,010
<font color="#E5E5E5">I've got from the year of using this</font>

560
00:28:18,190 --> 00:28:21,880
tool<font color="#CCCCCC"> and a year</font><font color="#E5E5E5"> of using FL is that</font>

561
00:28:21,010 --> 00:28:24,340
speed is crucial

562
00:28:21,880 --> 00:28:28,990
we just want dump everything<font color="#E5E5E5"> else just</font>

563
00:28:24,340 --> 00:28:31,330
<font color="#E5E5E5">focus on the speed every single Hertz</font><font color="#CCCCCC"> in</font>

564
00:28:28,990 --> 00:28:34,900
your processor needs<font color="#E5E5E5"> to be utilized if</font>

565
00:28:31,330 --> 00:28:37,210
it scans<font color="#E5E5E5"> other thing is good corpus is</font>

566
00:28:34,900 --> 00:28:38,470
golden so with a bunch of<font color="#E5E5E5"> these test</font>

567
00:28:37,210 --> 00:28:40,659
<font color="#CCCCCC">cases I've started</font>

568
00:28:38,470 --> 00:28:42,460
small corpus<font color="#E5E5E5"> piles grew it against</font>

569
00:28:40,659 --> 00:28:45,760
different applications and in<font color="#E5E5E5"> the end</font>

570
00:28:42,460 --> 00:28:48,039
got a<font color="#E5E5E5"> corpus which I just really really</font>

571
00:28:45,760 --> 00:28:49,539
nicely groomed corpus which I can now

572
00:28:48,039 --> 00:28:51,669
just<font color="#CCCCCC"> throw against a new application</font>

573
00:28:49,539 --> 00:28:53,770
<font color="#CCCCCC">without even fussing it and say what</font>

574
00:28:51,669 --> 00:28:56,650
<font color="#E5E5E5">sticks and usually get a bunch of</font>

575
00:28:53,770 --> 00:28:58,270
crashes<font color="#E5E5E5"> that way and the 13 years be</font>

576
00:28:56,650 --> 00:29:00,669
very specific<font color="#E5E5E5"> with instrumentation</font>

577
00:28:58,270 --> 00:29:04,000
<font color="#CCCCCC">I don't want to target a bunch of</font>

578
00:29:00,669 --> 00:29:05,400
libraries<font color="#E5E5E5"> that other people targeting I</font>

579
00:29:04,000 --> 00:29:09,669
want to<font color="#E5E5E5"> target this particular</font>

580
00:29:05,400 --> 00:29:13,840
<font color="#E5E5E5">functionality of the process that I want</font>

581
00:29:09,669 --> 00:29:15,549
to focus on<font color="#CCCCCC"> that would be it</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> my side</font>

582
00:29:13,840 --> 00:29:17,350
thank you<font color="#E5E5E5"> for having me</font><font color="#CCCCCC"> here and thank</font>

583
00:29:15,549 --> 00:29:20,620
<font color="#CCCCCC">you for listening my talk</font><font color="#E5E5E5"> if you have</font>

584
00:29:17,350 --> 00:29:23,490
any questions I'll be<font color="#E5E5E5"> around</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> not</font>

585
00:29:20,620 --> 00:29:23,489
sure how you're<font color="#E5E5E5"> doing on time</font>

