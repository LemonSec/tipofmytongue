1
00:00:03,470 --> 00:00:10,200
hello everybody my name is<font color="#CCCCCC"> sanaya summer</font>

2
00:00:06,899 --> 00:00:13,070
from<font color="#E5E5E5"> information from in figure</font>

3
00:00:10,200 --> 00:00:15,059
information security company I'm

4
00:00:13,070 --> 00:00:18,000
penetration tester as well as

5
00:00:15,059 --> 00:00:20,939
information security council in this

6
00:00:18,000 --> 00:00:26,009
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> I will take about analyzing</font>

7
00:00:20,939 --> 00:00:33,899
alpha<font color="#CCCCCC"> skater JavaScript code first we</font>

8
00:00:26,010 --> 00:00:37,410
will see oh sorry first we will see a

9
00:00:33,899 --> 00:00:41,219
watch the application then<font color="#E5E5E5"> I will talk a</font>

10
00:00:37,410 --> 00:00:43,679
bit about<font color="#E5E5E5"> JavaScript features go to the</font>

11
00:00:41,219 --> 00:00:46,620
time shortage<font color="#E5E5E5"> I won't be able to</font>

12
00:00:43,680 --> 00:00:49,769
complete the elaborate on this part so

13
00:00:46,620 --> 00:00:52,169
just briefly explain some<font color="#E5E5E5"> JavaScript</font>

14
00:00:49,770 --> 00:00:55,800
abilities which are important more

15
00:00:52,170 --> 00:00:58,170
important in obfuscation code so i

16
00:00:55,800 --> 00:01:01,379
assume<font color="#E5E5E5"> you know about concepts and</font>

17
00:00:58,170 --> 00:01:04,409
basics especially in javascript then<font color="#E5E5E5"> i</font>

18
00:01:01,379 --> 00:01:07,048
will focus more on alpha station method

19
00:01:04,409 --> 00:01:14,479
and finally the obfuscation methods as

20
00:01:07,049 --> 00:01:18,860
well as toes first let's find<font color="#E5E5E5"> Joyce</font>

21
00:01:14,479 --> 00:01:22,740
obfuscation obfuscation as word means

22
00:01:18,860 --> 00:01:25,740
obscuring making a message harder<font color="#E5E5E5"> to</font>

23
00:01:22,740 --> 00:01:30,089
breathe or understood in computer

24
00:01:25,740 --> 00:01:34,919
sciences especially in program sense it

25
00:01:30,090 --> 00:01:38,600
means to disallow not to allow reverse

26
00:01:34,920 --> 00:01:41,820
engineering and preventing agents

27
00:01:38,600 --> 00:01:46,110
unauthorized access<font color="#CCCCCC"> to an application</font>

28
00:01:41,820 --> 00:01:50,100
source code can say<font color="#E5E5E5"> this techniques is a</font>

29
00:01:46,110 --> 00:01:53,130
two-edged sword why because it can

30
00:01:50,100 --> 00:01:56,100
brings us some benefits but on the other

31
00:01:53,130 --> 00:01:58,949
<font color="#E5E5E5">hand it has some disadvantages let's</font>

32
00:01:56,100 --> 00:02:02,030
take<font color="#E5E5E5"> a look at this simple JavaScript</font>

33
00:01:58,950 --> 00:02:05,670
code<font color="#CCCCCC"> as a simple function which returns</font>

34
00:02:02,030 --> 00:02:08,640
sum of two inputs and then an alert

35
00:02:05,670 --> 00:02:11,550
which<font color="#CCCCCC"> pop ups a message on the screen</font>

36
00:02:08,639 --> 00:02:15,579
and shows the result of that

37
00:02:11,550 --> 00:02:17,890
but if<font color="#E5E5E5"> we make it up to skate it we</font>

38
00:02:15,580 --> 00:02:20,200
would<font color="#E5E5E5"> have something like disco of</font>

39
00:02:17,890 --> 00:02:23,709
course we have lots of different<font color="#E5E5E5"> methods</font>

40
00:02:20,200 --> 00:02:28,359
in obfuscation that is one of more must

41
00:02:23,710 --> 00:02:30,670
<font color="#E5E5E5">comin of them as you can see it's harder</font>

42
00:02:28,360 --> 00:02:38,190
to be understood obfuscation obfuscated

43
00:02:30,670 --> 00:02:45,190
version nope let's start<font color="#CCCCCC"> with advantages</font>

44
00:02:38,190 --> 00:02:49,540
first since obfuscation makes it harder

45
00:02:45,190 --> 00:02:53,710
to be understood and be read by an

46
00:02:49,540 --> 00:02:57,579
attacker or maybe another person so it's

47
00:02:53,710 --> 00:03:01,990
more it takes more resources and time

48
00:02:57,580 --> 00:03:05,140
for code to be<font color="#CCCCCC"> broken first benefit is</font>

49
00:03:01,990 --> 00:03:07,900
for business purposes for example when

50
00:03:05,140 --> 00:03:12,790
the developer or a company produces a

51
00:03:07,900 --> 00:03:15,250
new library<font color="#CCCCCC"> or application can do</font>

52
00:03:12,790 --> 00:03:18,040
application in<font color="#CCCCCC"> order to prevent</font>

53
00:03:15,250 --> 00:03:23,459
unauthorized access to<font color="#CCCCCC"> its source code</font>

54
00:03:18,040 --> 00:03:25,900
<font color="#E5E5E5">of course maybe for licensing implements</font>

55
00:03:23,459 --> 00:03:29,200
maybe vendors use this application

56
00:03:25,900 --> 00:03:33,940
methods in order to prevent unauthorized

57
00:03:29,200 --> 00:03:37,649
usage of application obfuscation<font color="#E5E5E5"> can</font>

58
00:03:33,940 --> 00:03:40,750
help us<font color="#E5E5E5"> with increasing security since</font>

59
00:03:37,650 --> 00:03:44,080
obfuscation make it harder to analyzing

60
00:03:40,750 --> 00:03:46,300
the code maybe an attacker cannot find

61
00:03:44,080 --> 00:03:48,940
some vulnerabilities in your code of

62
00:03:46,300 --> 00:03:51,850
course<font color="#E5E5E5"> obfuscation can be implemented in</font>

63
00:03:48,940 --> 00:03:53,829
<font color="#E5E5E5">two level in some programming language</font>

64
00:03:51,850 --> 00:03:56,500
interpretable programming language like

65
00:03:53,830 --> 00:04:01,959
<font color="#E5E5E5">java script or for example</font><font color="#CCCCCC"> python perl</font>

66
00:03:56,500 --> 00:04:05,650
and etc on code level and in on the

67
00:04:01,959 --> 00:04:07,870
<font color="#E5E5E5">other hand on for example Java C++ or</font>

68
00:04:05,650 --> 00:04:09,700
for example C can implement it on the

69
00:04:07,870 --> 00:04:12,010
source code kill your source code as

70
00:04:09,700 --> 00:04:14,350
well as unbarred codes for example in

71
00:04:12,010 --> 00:04:20,789
<font color="#CCCCCC">Android application we have big scar</font>

72
00:04:14,350 --> 00:04:24,560
which make takes bytecode obfuscated but

73
00:04:20,789 --> 00:04:30,159
about disadvantages as we saw

74
00:04:24,560 --> 00:04:33,260
here the upgraded version<font color="#CCCCCC"> of our code is</font>

75
00:04:30,160 --> 00:04:38,080
more bigger bigger than the killing

76
00:04:33,260 --> 00:04:45,590
sighs so obfuscation at the<font color="#E5E5E5"> first stage</font>

77
00:04:38,080 --> 00:04:48,260
increases your code size of course you

78
00:04:45,590 --> 00:04:50,539
cannot do anything without booze

79
00:04:48,260 --> 00:04:54,650
occasion<font color="#CCCCCC"> your limited limited to the</font>

80
00:04:50,540 --> 00:04:57,380
programming the for example<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Java you</font>

81
00:04:54,650 --> 00:04:59,539
are limited to the principle of Java you

82
00:04:57,380 --> 00:05:03,229
cannot accept that you cannot cross

83
00:04:59,540 --> 00:05:08,389
borders of course you cannot up to skate

84
00:05:03,229 --> 00:05:11,240
for example some<font color="#CCCCCC"> keywords like maybe</font>

85
00:05:08,389 --> 00:05:14,750
<font color="#E5E5E5">we're for</font><font color="#CCCCCC"> why something like that</font>

86
00:05:11,240 --> 00:05:19,270
keywords are supposed to be clear in any

87
00:05:14,750 --> 00:05:24,110
programming language since we will see

88
00:05:19,270 --> 00:05:27,500
at the<font color="#CCCCCC"> next part of presentation we can</font>

89
00:05:24,110 --> 00:05:30,200
obfuscate our code follow so more

90
00:05:27,500 --> 00:05:33,680
complexity brings us more latency of

91
00:05:30,200 --> 00:05:36,789
course this delay would be under scale

92
00:05:33,680 --> 00:05:39,440
of some milliseconds however it might be

93
00:05:36,789 --> 00:05:43,300
some kind of issues in heavy

94
00:05:39,440 --> 00:05:47,360
applications and heavily obfuscated cut

95
00:05:43,300 --> 00:05:51,050
since nowadays obfuscation<font color="#E5E5E5"> is a common</font>

96
00:05:47,360 --> 00:05:54,350
method<font color="#E5E5E5"> for bypassing for example</font>

97
00:05:51,050 --> 00:05:59,410
antiviruses<font color="#CCCCCC"> vaps ideas and some other</font>

98
00:05:54,350 --> 00:06:05,710
security systems usually antiviruses

99
00:05:59,410 --> 00:06:09,380
alerts when faces some suspicious or

100
00:06:05,710 --> 00:06:13,130
malicious obfuscated code<font color="#E5E5E5"> maybe that</font>

101
00:06:09,380 --> 00:06:16,930
code is clear and without any for

102
00:06:13,130 --> 00:06:20,300
example malicious part of code but AV

103
00:06:16,930 --> 00:06:24,820
usually alerts when they received such

104
00:06:20,300 --> 00:06:28,700
<font color="#CCCCCC">discounts please keep</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> mind</font>

105
00:06:24,820 --> 00:06:33,340
obfuscation makes it just<font color="#E5E5E5"> harder not</font>

106
00:06:28,700 --> 00:06:36,469
impossible because if you because<font color="#CCCCCC"> if</font>

107
00:06:33,340 --> 00:06:38,469
application could make it impossible it

108
00:06:36,470 --> 00:06:41,240
wouldn't be<font color="#CCCCCC"> interpret</font>

109
00:06:38,470 --> 00:06:44,510
interpreted by the compiler or

110
00:06:41,240 --> 00:06:48,130
interpreter of programming language so

111
00:06:44,510 --> 00:06:51,349
maybe you make your code obfuscated an

112
00:06:48,130 --> 00:06:54,590
attacker based<font color="#E5E5E5"> on your value of your</font>

113
00:06:51,350 --> 00:06:57,140
code decided to break it and expense for

114
00:06:54,590 --> 00:06:59,750
example lots of times and lots of

115
00:06:57,140 --> 00:07:02,150
resources maybe money in order to break

116
00:06:59,750 --> 00:07:07,160
that it depends<font color="#CCCCCC"> on your value of</font><font color="#E5E5E5"> your</font>

117
00:07:02,150 --> 00:07:09,739
application we have another definition

118
00:07:07,160 --> 00:07:12,200
minification unfortunately these two

119
00:07:09,740 --> 00:07:15,190
methods usually get confused<font color="#E5E5E5"> and I have</font>

120
00:07:12,200 --> 00:07:17,900
self seen lots of articles which

121
00:07:15,190 --> 00:07:19,580
categorizing minification as a up Fisk

122
00:07:17,900 --> 00:07:24,530
<font color="#CCCCCC">Asian what's the</font><font color="#E5E5E5"> difference</font><font color="#CCCCCC"> between</font>

123
00:07:19,580 --> 00:07:28,490
these two techniques that's our first

124
00:07:24,530 --> 00:07:30,679
example simple<font color="#E5E5E5"> JavaScript code if we</font>

125
00:07:28,490 --> 00:07:34,010
minify that we would<font color="#CCCCCC"> have something like</font>

126
00:07:30,680 --> 00:07:37,790
this line of code the purpose of

127
00:07:34,010 --> 00:07:40,010
minification is optimizing zip up the

128
00:07:37,790 --> 00:07:42,950
code in order to make<font color="#CCCCCC"> it faster and</font>

129
00:07:40,010 --> 00:07:47,200
decrease<font color="#CCCCCC"> the size removing whitespace</font>

130
00:07:42,950 --> 00:07:50,690
remove it for example<font color="#E5E5E5"> a blank line</font>

131
00:07:47,200 --> 00:07:52,729
shorten the functions name and shrink

132
00:07:50,690 --> 00:07:56,260
for example variables<font color="#E5E5E5"> name and the other</font>

133
00:07:52,729 --> 00:07:59,419
hand in obfuscation we don't care about

134
00:07:56,260 --> 00:08:03,680
size we don't care<font color="#CCCCCC"> about latency our</font>

135
00:07:59,419 --> 00:08:05,539
purpose<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> make it uglier than kill</font>

136
00:08:03,680 --> 00:08:11,210
your version and make it harder and

137
00:08:05,540 --> 00:08:15,160
<font color="#E5E5E5">harder</font><font color="#CCCCCC"> as it possible let's take a look</font>

138
00:08:11,210 --> 00:08:19,390
at some<font color="#CCCCCC"> JavaScript features so briefly</font>

139
00:08:15,160 --> 00:08:24,650
which abilities are more important in

140
00:08:19,390 --> 00:08:28,340
application methods first one javascript

141
00:08:24,650 --> 00:08:33,010
is a dynamic and weak typing what are

142
00:08:28,340 --> 00:08:35,348
those mean dynamic typing is referred to

143
00:08:33,010 --> 00:08:39,169
variables in the<font color="#E5E5E5"> programming language</font>

144
00:08:35,349 --> 00:08:43,010
when when a programming language is weak

145
00:08:39,169 --> 00:08:45,949
typed language it means you can cast<font color="#E5E5E5"> ink</font>

146
00:08:43,010 --> 00:08:47,660
variables without any limitation<font color="#CCCCCC"> for</font>

147
00:08:45,950 --> 00:08:50,360
example in C programming language you

148
00:08:47,660 --> 00:08:51,350
cannot convert integer type into the<font color="#CCCCCC"> S</font>

149
00:08:50,360 --> 00:08:55,010
string type

150
00:08:51,350 --> 00:08:58,190
but in JavaScript<font color="#CCCCCC"> you can do it easily</font>

151
00:08:55,010 --> 00:09:00,950
without any limitation you can define a

152
00:08:58,190 --> 00:09:04,820
variable and use it as<font color="#E5E5E5"> a string and</font>

153
00:09:00,950 --> 00:09:08,210
integer object boolean type anything of

154
00:09:04,820 --> 00:09:10,760
course you don't have to clear the

155
00:09:08,210 --> 00:09:16,840
variable first initialize it first and

156
00:09:10,760 --> 00:09:20,300
<font color="#CCCCCC">then use you can use variables so freely</font>

157
00:09:16,840 --> 00:09:25,510
<font color="#E5E5E5">beside of that javascript is a wick</font>

158
00:09:20,300 --> 00:09:28,670
typing<font color="#E5E5E5"> it's different definition let's</font>

159
00:09:25,510 --> 00:09:33,439
explain it with a piece of Python code

160
00:09:28,670 --> 00:09:37,430
<font color="#E5E5E5">Python is a strong typing in contrast of</font>

161
00:09:33,440 --> 00:09:39,770
<font color="#CCCCCC">JavaScript what does</font><font color="#E5E5E5"> it mean you</font><font color="#CCCCCC"> cannot</font>

162
00:09:37,430 --> 00:09:43,189
concatenate two different type of

163
00:09:39,770 --> 00:09:44,960
variable in a strong type programming

164
00:09:43,190 --> 00:09:47,930
language for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> in Python you</font>

165
00:09:44,960 --> 00:09:50,750
cannot concatenate an integer and a

166
00:09:47,930 --> 00:09:52,870
string the interpreter will raise<font color="#CCCCCC"> an</font>

167
00:09:50,750 --> 00:09:55,970
error as you can see here but in

168
00:09:52,870 --> 00:09:58,460
JavaScript you can easily concatenate

169
00:09:55,970 --> 00:09:59,990
each type of variables with each other

170
00:09:58,460 --> 00:10:03,620
for<font color="#E5E5E5"> example you can concatenate an</font>

171
00:09:59,990 --> 00:10:06,470
integer with a string without any row it

172
00:10:03,620 --> 00:10:13,030
simply<font color="#CCCCCC"> means JavaScript don't care about</font>

173
00:10:06,470 --> 00:10:17,290
data<font color="#E5E5E5"> type safety javascript supports</font>

174
00:10:13,030 --> 00:10:21,079
first-class citizen when you can pass a

175
00:10:17,290 --> 00:10:23,930
sign or return a type or an<font color="#CCCCCC"> object in</font>

176
00:10:21,080 --> 00:10:27,290
your program in<font color="#CCCCCC"> your application that</font>

177
00:10:23,930 --> 00:10:30,770
type is called or is considered at the

178
00:10:27,290 --> 00:10:34,990
<font color="#E5E5E5">first class citizen this ability brings</font>

179
00:10:30,770 --> 00:10:39,199
us some other<font color="#E5E5E5"> features</font><font color="#CCCCCC"> and ability first</font>

180
00:10:34,990 --> 00:10:41,660
you can define your function as

181
00:10:39,200 --> 00:10:45,200
variables for example in<font color="#CCCCCC"> JavaScript</font>

182
00:10:41,660 --> 00:10:47,060
without function keyword you can<font color="#E5E5E5"> assign</font>

183
00:10:45,200 --> 00:10:49,910
the type you<font color="#CCCCCC"> can assign a new function</font>

184
00:10:47,060 --> 00:10:52,369
to a variable and use it<font color="#E5E5E5"> as a function</font>

185
00:10:49,910 --> 00:10:56,930
in rest of your code as you can see in

186
00:10:52,370 --> 00:10:59,240
this example another feature is higher

187
00:10:56,930 --> 00:11:02,829
order functions<font color="#E5E5E5"> higher order functions</font>

188
00:10:59,240 --> 00:11:04,149
are those functions which return or

189
00:11:02,830 --> 00:11:09,290
accept

190
00:11:04,149 --> 00:11:12,290
other types as inputs for example in

191
00:11:09,290 --> 00:11:15,829
this<font color="#E5E5E5"> example we have two functions in</font>

192
00:11:12,290 --> 00:11:19,399
<font color="#E5E5E5">the first example we have passed a new</font>

193
00:11:15,829 --> 00:11:24,199
function and new<font color="#E5E5E5"> type as an input to the</font>

194
00:11:19,399 --> 00:11:28,040
previous function and of course<font color="#E5E5E5"> you can</font>

195
00:11:24,199 --> 00:11:31,219
<font color="#E5E5E5">declare your function first then pass it</font>

196
00:11:28,040 --> 00:11:37,699
its definition as an input to other

197
00:11:31,220 --> 00:11:39,680
functions with disability we have<font color="#CCCCCC"> /</font>

198
00:11:37,699 --> 00:11:44,449
<font color="#E5E5E5">field function application what does it</font>

199
00:11:39,680 --> 00:11:47,569
<font color="#E5E5E5">mean as you can see function add returns</font>

200
00:11:44,449 --> 00:11:52,459
a new function as a result as a return

201
00:11:47,569 --> 00:11:55,719
and first function at it requires a as

202
00:11:52,459 --> 00:11:58,459
an input the returns of this function

203
00:11:55,720 --> 00:12:03,079
requires another input which is called

204
00:11:58,459 --> 00:12:06,079
be so you can use<font color="#CCCCCC"> first class citizen</font>

205
00:12:03,079 --> 00:12:10,099
<font color="#E5E5E5">ability in order to pass for example in</font>

206
00:12:06,079 --> 00:12:14,420
this<font color="#E5E5E5"> example 5 to</font><font color="#CCCCCC"> the function be the</font>

207
00:12:10,100 --> 00:12:18,230
new instance of this function stored 5

208
00:12:14,420 --> 00:12:21,920
as a first input so at the rest of your

209
00:12:18,230 --> 00:12:26,139
code you<font color="#E5E5E5"> can use add 5 in order to</font><font color="#CCCCCC"> add 5</font>

210
00:12:21,920 --> 00:12:29,630
to other numbers in this example and you

211
00:12:26,139 --> 00:12:35,300
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> have to pass each time 5 as a</font>

212
00:12:29,630 --> 00:12:38,029
first your input immediately<font color="#CCCCCC"> invoked</font>

213
00:12:35,300 --> 00:12:41,719
function expression or self-executing

214
00:12:38,029 --> 00:12:45,019
animals function is a particular feature

215
00:12:41,720 --> 00:12:49,490
for javascript javascript just has this

216
00:12:45,019 --> 00:12:51,800
feature this feature provides a lexical

217
00:12:49,490 --> 00:12:54,800
scope beside of color a scope of

218
00:12:51,800 --> 00:12:58,370
application developer<font color="#CCCCCC"> maybe developer</font>

219
00:12:54,800 --> 00:13:01,790
needs to have a different scope for his

220
00:12:58,370 --> 00:13:06,639
variable his functions during the run

221
00:13:01,790 --> 00:13:10,550
time code the most common pattern of

222
00:13:06,639 --> 00:13:14,089
immediately<font color="#E5E5E5"> invoked function is using</font>

223
00:13:10,550 --> 00:13:17,030
parentheses if you define your function

224
00:13:14,089 --> 00:13:19,610
inside of<font color="#E5E5E5"> pair of parentheses</font>

225
00:13:17,030 --> 00:13:23,540
and after that<font color="#E5E5E5"> use another pair of</font>

226
00:13:19,610 --> 00:13:25,670
parents<font color="#CCCCCC"> parenthesis your function get</font>

227
00:13:23,540 --> 00:13:27,949
executed immediately after its

228
00:13:25,670 --> 00:13:31,130
definition of course there are lots of

229
00:13:27,950 --> 00:13:36,620
other patterns for this feature for

230
00:13:31,130 --> 00:13:39,740
example<font color="#CCCCCC"> you can use a plus sign negative</font>

231
00:13:36,620 --> 00:13:42,380
sign and other sign before the keyboard

232
00:13:39,740 --> 00:13:45,470
of function for<font color="#CCCCCC"> example the first</font>

233
00:13:42,380 --> 00:13:48,080
example is used usually<font color="#CCCCCC"> by Facebook in</font>

234
00:13:45,470 --> 00:13:50,300
JavaScript codes if you take<font color="#CCCCCC"> a</font><font color="#E5E5E5"> look at</font>

235
00:13:48,080 --> 00:13:54,950
javascript codes of<font color="#CCCCCC"> facebook you will</font>

236
00:13:50,300 --> 00:13:58,189
see<font color="#E5E5E5"> this type of immediately invoked</font>

237
00:13:54,950 --> 00:14:01,010
function of course if you use new

238
00:13:58,190 --> 00:14:04,250
keyboard which is usually used for get a

239
00:14:01,010 --> 00:14:09,160
new instance of object in o.p language

240
00:14:04,250 --> 00:14:14,620
in<font color="#E5E5E5"> javascript means execute the function</font>

241
00:14:09,160 --> 00:14:17,530
immediately after its definition in

242
00:14:14,620 --> 00:14:19,600
<font color="#CCCCCC">javascript since it's usually used in</font>

243
00:14:17,530 --> 00:14:22,790
client-side application of course

244
00:14:19,600 --> 00:14:26,000
javascript can be used in mobile

245
00:14:22,790 --> 00:14:29,209
application as a html5 application or on

246
00:14:26,000 --> 00:14:33,470
the<font color="#CCCCCC"> other type of application or systems</font>

247
00:14:29,210 --> 00:14:37,000
but it usually used in client-side part

248
00:14:33,470 --> 00:14:39,620
of web application so in in a browser

249
00:14:37,000 --> 00:14:42,460
<font color="#E5E5E5">javascript can access to other features</font>

250
00:14:39,620 --> 00:14:47,230
<font color="#CCCCCC">of browser for example can interact with</font>

251
00:14:42,460 --> 00:14:51,200
HTML CSS<font color="#E5E5E5"> dom tree cookies and other</font>

252
00:14:47,230 --> 00:14:54,790
features<font color="#E5E5E5"> so if someone wants to</font>

253
00:14:51,200 --> 00:14:59,210
obfuscate<font color="#CCCCCC"> a</font><font color="#E5E5E5"> javascript application</font>

254
00:14:54,790 --> 00:15:02,599
manually can hidden some part of code

255
00:14:59,210 --> 00:15:06,050
inside of inside<font color="#E5E5E5"> of other element of</font>

256
00:15:02,600 --> 00:15:08,480
<font color="#E5E5E5">Rosa for example can kindle some part of</font>

257
00:15:06,050 --> 00:15:16,750
data inside of<font color="#CCCCCC"> dom tree</font><font color="#E5E5E5"> and access</font><font color="#CCCCCC"> it</font>

258
00:15:08,480 --> 00:15:20,180
from javascript by that features let's

259
00:15:16,750 --> 00:15:22,550
take a look<font color="#E5E5E5"> at application metals we can</font>

260
00:15:20,180 --> 00:15:26,329
divide up<font color="#E5E5E5"> fist occasion methods in two</font>

261
00:15:22,550 --> 00:15:28,370
major<font color="#E5E5E5"> types names syntax and data</font>

262
00:15:26,330 --> 00:15:31,100
obfuscation and on the other<font color="#E5E5E5"> hand</font>

263
00:15:28,370 --> 00:15:34,399
<font color="#CCCCCC">dataflow</font><font color="#E5E5E5"> obfuscation</font>

264
00:15:31,100 --> 00:15:38,640
first example is named obfuscation it

265
00:15:34,399 --> 00:15:42,089
helps with confusing the attacker to mix

266
00:15:38,640 --> 00:15:45,839
up why if you<font color="#E5E5E5"> use strange names for</font>

267
00:15:42,089 --> 00:15:51,480
example in this<font color="#E5E5E5"> example variables name</font>

268
00:15:45,839 --> 00:15:53,640
and functions name cannot be easily be

269
00:15:51,480 --> 00:15:55,800
understood by attacker if you<font color="#E5E5E5"> use for</font>

270
00:15:53,640 --> 00:15:58,439
example creating name instead of<font color="#E5E5E5"> that</font>

271
00:15:55,800 --> 00:16:00,240
Esther ain't name it<font color="#CCCCCC"> would be so easier</font>

272
00:15:58,440 --> 00:16:06,779
for someone to understand the code

273
00:16:00,240 --> 00:16:10,230
fellow maybe a few skater use same names

274
00:16:06,779 --> 00:16:13,740
not completely same but use similar

275
00:16:10,230 --> 00:16:18,120
characters in order to make<font color="#E5E5E5"> it harder</font>

276
00:16:13,740 --> 00:16:22,350
for example I<font color="#E5E5E5"> l and one art have the</font>

277
00:16:18,120 --> 00:16:28,640
same shape or for example 0<font color="#E5E5E5"> and 0 maybe</font>

278
00:16:22,350 --> 00:16:28,640
use in<font color="#E5E5E5"> order to make it harder and hard</font>

279
00:16:29,269 --> 00:16:36,000
maybe a fist greater use the same name

280
00:16:32,640 --> 00:16:38,670
for variables and functions but in the

281
00:16:36,000 --> 00:16:42,089
different scopes for example in a

282
00:16:38,670 --> 00:16:45,750
lexical scope you would have a variable

283
00:16:42,089 --> 00:16:49,680
with name like here in global scope to

284
00:16:45,750 --> 00:16:51,870
and in object is called to so tracking

285
00:16:49,680 --> 00:16:55,489
such these variables and functions would

286
00:16:51,870 --> 00:17:00,839
be hard because you<font color="#CCCCCC"> might mix up during</font>

287
00:16:55,490 --> 00:17:05,900
analyzing this code other metal is a

288
00:17:00,839 --> 00:17:09,569
sophisticated data the simplest one is

289
00:17:05,900 --> 00:17:11,339
encoding for example<font color="#E5E5E5"> base64 URL encoding</font>

290
00:17:09,569 --> 00:17:14,730
<font color="#CCCCCC">asking encoding and other type of</font>

291
00:17:11,339 --> 00:17:19,918
encoding in order to just make<font color="#CCCCCC"> it uglier</font>

292
00:17:14,730 --> 00:17:22,829
and harder and time consuming since

293
00:17:19,919 --> 00:17:27,569
<font color="#CCCCCC">JavaScript supports self excu ting</font>

294
00:17:22,829 --> 00:17:30,149
features<font color="#CCCCCC"> maybe in alpha skating process</font>

295
00:17:27,569 --> 00:17:35,309
you use anonymous function instead of a

296
00:17:30,150 --> 00:17:37,830
shrink this function returns just alert

297
00:17:35,309 --> 00:17:40,470
and called alert function from

298
00:17:37,830 --> 00:17:44,100
<font color="#CCCCCC">JavaScript contents but at the</font><font color="#E5E5E5"> first</font>

299
00:17:40,470 --> 00:17:44,990
sight is not<font color="#E5E5E5"> so clear to you have to</font>

300
00:17:44,100 --> 00:17:46,610
analyze it

301
00:17:44,990 --> 00:17:51,590
check it in<font color="#E5E5E5"> order to find out</font><font color="#CCCCCC"> the</font>

302
00:17:46,610 --> 00:17:55,699
purpose of this function<font color="#E5E5E5"> maybe a</font>

303
00:17:51,590 --> 00:18:01,280
fuskator split reverse or<font color="#CCCCCC"> mental owed</font>

304
00:17:55,700 --> 00:18:04,490
some how the a string just for make it

305
00:18:01,280 --> 00:18:08,870
<font color="#E5E5E5">uglier for example here the same as the</font>

306
00:18:04,490 --> 00:18:11,630
previous example<font color="#CCCCCC"> called just alert but</font>

307
00:18:08,870 --> 00:18:14,419
at the<font color="#E5E5E5"> first sight you cannot understand</font>

308
00:18:11,630 --> 00:18:16,700
<font color="#E5E5E5">it you can you should analyze it and</font>

309
00:18:14,420 --> 00:18:21,550
track the code in order to find out

310
00:18:16,700 --> 00:18:21,550
result of this joint and reversing

311
00:18:22,030 --> 00:18:29,750
usually in obfuscating we use a

312
00:18:25,030 --> 00:18:33,730
mathematical and bitwise operation just

313
00:18:29,750 --> 00:18:39,170
in order to add some large and big

314
00:18:33,730 --> 00:18:41,780
numbers<font color="#CCCCCC"> too skur the attackers</font><font color="#E5E5E5"> maybe all</font>

315
00:18:39,170 --> 00:18:44,870
this example just returns an alert

316
00:18:41,780 --> 00:18:49,610
nothing else a simple alert is generated

317
00:18:44,870 --> 00:18:51,889
by playing with mathematical a bitwise

318
00:18:49,610 --> 00:18:54,830
in order to call different characters

319
00:18:51,890 --> 00:18:59,530
from contest join them<font color="#E5E5E5"> and finally</font>

320
00:18:54,830 --> 00:19:02,870
execute an alert and the<font color="#CCCCCC"> other hand</font>

321
00:18:59,530 --> 00:19:07,370
which is can say more important things

322
00:19:02,870 --> 00:19:11,780
could follow appreciation when you do

323
00:19:07,370 --> 00:19:15,320
refactoring in order to simplify syntax

324
00:19:11,780 --> 00:19:17,928
of an obfuscated code<font color="#E5E5E5"> after that for</font>

325
00:19:15,320 --> 00:19:21,340
understanding<font color="#E5E5E5"> the code follow you need</font>

326
00:19:17,929 --> 00:19:27,410
to simplify code full of fist occasion

327
00:19:21,340 --> 00:19:29,720
the most common tricks in cut follow up

328
00:19:27,410 --> 00:19:34,040
with occasion it's dead codes dead codes

329
00:19:29,720 --> 00:19:36,710
are part of codes which are executed but

330
00:19:34,040 --> 00:19:41,990
the result of them are not important in

331
00:19:36,710 --> 00:19:45,590
the follow of code the very common type

332
00:19:41,990 --> 00:19:48,650
is dead code switch statement DSS in

333
00:19:45,590 --> 00:19:52,939
this<font color="#E5E5E5"> example we have a simple while loop</font>

334
00:19:48,650 --> 00:19:58,460
and the result of this code I will<font color="#E5E5E5"> be</font>

335
00:19:52,940 --> 00:19:58,950
101<font color="#CCCCCC"> has a simple condition simple loop</font>

336
00:19:58,460 --> 00:20:02,520
<font color="#CCCCCC">just for</font>

337
00:19:58,950 --> 00:20:05,190
100 and returns<font color="#CCCCCC"> i but if we make it</font><font color="#E5E5E5"> up</font>

338
00:20:02,520 --> 00:20:09,870
to skated we would have<font color="#E5E5E5"> something like</font>

339
00:20:05,190 --> 00:20:14,160
that combination<font color="#E5E5E5"> of switch why and if</font>

340
00:20:09,870 --> 00:20:18,000
and else so if you want<font color="#E5E5E5"> to analyze this</font>

341
00:20:14,160 --> 00:20:21,450
code finally the result would be the

342
00:20:18,000 --> 00:20:26,360
same of the previous one but it takes

343
00:20:21,450 --> 00:20:30,480
your<font color="#E5E5E5"> time more animal let's analyze</font><font color="#CCCCCC"> it</font>

344
00:20:26,360 --> 00:20:36,409
case 1 just executed for first loop when

345
00:20:30,480 --> 00:20:39,810
the<font color="#E5E5E5"> s bar is equal to</font><font color="#CCCCCC"> 1 after that in</font>

346
00:20:36,410 --> 00:20:43,740
these two case if<font color="#E5E5E5"> you take a look and</font>

347
00:20:39,810 --> 00:20:49,040
read it working like if statement just

348
00:20:43,740 --> 00:20:52,200
extend it and using so much variables so

349
00:20:49,040 --> 00:20:58,649
the look is completely the same as

350
00:20:52,200 --> 00:21:01,950
previous with other statements another

351
00:20:58,650 --> 00:21:05,070
techniques is that store variables which

352
00:21:01,950 --> 00:21:09,540
are not used or is used but are not

353
00:21:05,070 --> 00:21:13,370
important in our code why because for

354
00:21:09,540 --> 00:21:19,080
example in our example function a

355
00:21:13,370 --> 00:21:23,270
variable X and I inside of function the

356
00:21:19,080 --> 00:21:26,610
function uses them but<font color="#E5E5E5"> finally return</font>

357
00:21:23,270 --> 00:21:31,230
multiplies a and<font color="#E5E5E5"> B and returns that</font>

358
00:21:26,610 --> 00:21:38,580
value so<font color="#E5E5E5"> X and I are not important just</font>

359
00:21:31,230 --> 00:21:41,220
for confusing<font color="#E5E5E5"> or in this example can say</font>

360
00:21:38,580 --> 00:21:44,310
they are the same<font color="#E5E5E5"> the final result of</font>

361
00:21:41,220 --> 00:21:47,640
this<font color="#E5E5E5"> function will be sum of a and B but</font>

362
00:21:44,310 --> 00:21:50,929
<font color="#CCCCCC">a void loop and storing the result</font>

363
00:21:47,640 --> 00:21:55,830
multiple time inside of X and finally

364
00:21:50,930 --> 00:22:00,210
returns the same<font color="#E5E5E5"> result unreachable</font>

365
00:21:55,830 --> 00:22:03,540
codes are those part of codes which

366
00:22:00,210 --> 00:22:06,060
never get executed dead codes get

367
00:22:03,540 --> 00:22:08,520
executed but they aren't important the

368
00:22:06,060 --> 00:22:12,090
result is not important but unreachable

369
00:22:08,520 --> 00:22:12,658
codes won't get executed and during the

370
00:22:12,090 --> 00:22:16,709
run

371
00:22:12,659 --> 00:22:22,940
time for example in this example we have

372
00:22:16,710 --> 00:22:28,009
for some if a statement and some dumb

373
00:22:22,940 --> 00:22:31,379
interaction if we take a look deeper

374
00:22:28,009 --> 00:22:37,080
inside of the four look at the<font color="#E5E5E5"> first if</font>

375
00:22:31,379 --> 00:22:41,369
condition this condition won't be true

376
00:22:37,080 --> 00:22:47,759
anymore does anyone<font color="#CCCCCC"> know why can say</font>

377
00:22:41,369 --> 00:22:50,849
it's completely false anytime no<font color="#CCCCCC"> okay</font>

378
00:22:47,759 --> 00:22:53,419
you can think<font color="#E5E5E5"> about it because I don't</font>

379
00:22:50,849 --> 00:22:57,840
<font color="#E5E5E5">have enough time for explain but it's</font>

380
00:22:53,419 --> 00:23:01,320
false always so these parts<font color="#E5E5E5"> of code is</font>

381
00:22:57,840 --> 00:23:03,299
unreachable never get executed in the

382
00:23:01,320 --> 00:23:09,960
body of else we have another if

383
00:23:03,299 --> 00:23:12,179
condition which is always 15 again does

384
00:23:09,960 --> 00:23:15,840
anyone know<font color="#CCCCCC"> why</font><font color="#E5E5E5"> this expression is</font>

385
00:23:12,179 --> 00:23:22,369
written always 15 of course can say in

386
00:23:15,840 --> 00:23:25,309
entire of our life is always 15<font color="#CCCCCC"> okay</font>

387
00:23:22,369 --> 00:23:32,090
these parts of code is unreachable again

388
00:23:25,309 --> 00:23:37,109
finally we have an if here which be

389
00:23:32,090 --> 00:23:40,849
executed after 15 times because is an

390
00:23:37,109 --> 00:23:44,389
equivalence<font color="#E5E5E5"> I instead of a person so</font>

391
00:23:40,849 --> 00:23:50,720
<font color="#E5E5E5">finally after fifteenth time of loop</font>

392
00:23:44,389 --> 00:23:55,049
this function returns window object and

393
00:23:50,720 --> 00:23:58,529
other parts those variables and VAR n is

394
00:23:55,049 --> 00:24:04,470
data store and are not useful just

395
00:23:58,529 --> 00:24:08,429
returning object window other trip is

396
00:24:04,470 --> 00:24:11,970
conditions of possession we have maybe

397
00:24:08,429 --> 00:24:15,179
<font color="#E5E5E5">always fast which means unreachable code</font>

398
00:24:11,970 --> 00:24:18,289
and maybe have always true which means

399
00:24:15,179 --> 00:24:22,369
void condition for example in this

400
00:24:18,289 --> 00:24:22,369
example we have an if

401
00:24:22,440 --> 00:24:30,149
the condition is this part we have empty

402
00:24:26,610 --> 00:24:32,699
string with a replace replace it dead

403
00:24:30,149 --> 00:24:36,719
code because we place a string with a

404
00:24:32,700 --> 00:24:38,279
shrink replacing the same data type so

405
00:24:36,720 --> 00:24:42,480
there is no change after this

406
00:24:38,279 --> 00:24:48,769
replacement and we cast it<font color="#CCCCCC"> to the bolian</font>

407
00:24:42,480 --> 00:24:54,529
<font color="#E5E5E5">and it and make it vice versa so bullion</font>

408
00:24:48,769 --> 00:24:58,620
with empty input is always false<font color="#E5E5E5"> with</font>

409
00:24:54,529 --> 00:25:02,730
anesthetist string is true and empty

410
00:24:58,620 --> 00:25:09,899
string is false<font color="#E5E5E5"> so finally</font><font color="#CCCCCC"> the result of</font>

411
00:25:02,730 --> 00:25:12,029
this condition is<font color="#E5E5E5"> always true just you</font>

412
00:25:09,899 --> 00:25:18,199
need take more time in<font color="#E5E5E5"> order to analyze</font>

413
00:25:12,029 --> 00:25:18,200
it and find out<font color="#CCCCCC"> the</font><font color="#E5E5E5"> said junk if here</font>

414
00:25:18,919 --> 00:25:28,289
non-alphanumeric type is a can say not

415
00:25:26,909 --> 00:25:32,570
<font color="#E5E5E5">common type because of some</font>

416
00:25:28,289 --> 00:25:37,340
disadvantages for<font color="#E5E5E5"> example alert hellos</font>

417
00:25:32,570 --> 00:25:43,799
<font color="#CCCCCC">in this type would be a bunch of</font>

418
00:25:37,340 --> 00:25:49,049
punctuation signs because of limitation

419
00:25:43,799 --> 00:25:51,570
in character ends the size of code will

420
00:25:49,049 --> 00:25:55,019
be so huge so<font color="#E5E5E5"> it's not reasonable to use</font>

421
00:25:51,570 --> 00:25:58,740
this type of obfuscation and the other

422
00:25:55,019 --> 00:26:02,250
hand since it's not normal and just<font color="#E5E5E5"> use</font>

423
00:25:58,740 --> 00:26:05,820
some<font color="#E5E5E5"> punctuation codes it's usually kept</font>

424
00:26:02,250 --> 00:26:11,549
by anti viruses and cause them to rise

425
00:26:05,820 --> 00:26:14,700
and alert but it has a advantage you can

426
00:26:11,549 --> 00:26:18,029
even obfuscate keywords and inside them

427
00:26:14,700 --> 00:26:21,960
in an eval function and again<font color="#E5E5E5"> obfuscate</font>

428
00:26:18,029 --> 00:26:27,389
that ever<font color="#CCCCCC"> french so if</font><font color="#E5E5E5"> we want to take a</font>

429
00:26:21,960 --> 00:26:33,750
brief look at this type we can make a

430
00:26:27,389 --> 00:26:35,969
array with<font color="#CCCCCC"> para pescar</font><font color="#E5E5E5"> we can cast it to</font>

431
00:26:33,750 --> 00:26:42,420
the<font color="#CCCCCC"> bullion we can cast it to</font><font color="#E5E5E5"> the nom</font>

432
00:26:35,970 --> 00:26:46,470
and an empty<font color="#E5E5E5"> array is equal to 0 then if</font>

433
00:26:42,420 --> 00:26:50,330
we sum it with an empty string we will

434
00:26:46,470 --> 00:26:54,270
cast it to the S<font color="#E5E5E5"> rank so easily we can</font>

435
00:26:50,330 --> 00:26:56,760
make a type of false then concatenate it

436
00:26:54,270 --> 00:26:59,820
with an empty string and finally we<font color="#E5E5E5"> will</font>

437
00:26:56,760 --> 00:27:04,580
have a drink with which its value is

438
00:26:59,820 --> 00:27:09,780
false<font color="#E5E5E5"> so we have f a LS and eat crackers</font>

439
00:27:04,580 --> 00:27:12,899
then if we use brackets sign in order to

440
00:27:09,780 --> 00:27:17,820
just extract the index<font color="#CCCCCC"> 1 we will have a</font>

441
00:27:12,900 --> 00:27:20,520
a crater at the<font color="#E5E5E5"> next step with number</font>

442
00:27:17,820 --> 00:27:24,750
five and six we can substitute false

443
00:27:20,520 --> 00:27:28,530
with the expression in number<font color="#CCCCCC"> five so</font>

444
00:27:24,750 --> 00:27:32,550
now<font color="#CCCCCC"> we have one and we have to oppose</font>

445
00:27:28,530 --> 00:27:37,830
skate it again as a<font color="#E5E5E5"> result of number two</font>

446
00:27:32,550 --> 00:27:41,399
and three we can make a true type true

447
00:27:37,830 --> 00:27:45,030
then change it to<font color="#CCCCCC"> the number which is</font>

448
00:27:41,400 --> 00:27:49,800
equivalent one and then casting to the

449
00:27:45,030 --> 00:27:51,780
number again so the final result will be

450
00:27:49,800 --> 00:27:56,070
this expression bunch of punctuation

451
00:27:51,780 --> 00:27:59,940
codes which is going<font color="#CCCCCC"> to the a so if you</font>

452
00:27:56,070 --> 00:28:03,360
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to use this approach we need to</font>

453
00:27:59,940 --> 00:28:06,480
build each character's one by one so

454
00:28:03,360 --> 00:28:10,010
it's the<font color="#E5E5E5"> reason why this method is not</font>

455
00:28:06,480 --> 00:28:13,530
so useful it's really good to<font color="#E5E5E5"> know</font>

456
00:28:10,010 --> 00:28:19,379
common type of obfuscation metal in

457
00:28:13,530 --> 00:28:23,790
<font color="#E5E5E5">JavaScript we have some scripts some</font>

458
00:28:19,380 --> 00:28:27,990
online websites which do application

459
00:28:23,790 --> 00:28:30,060
with<font color="#CCCCCC"> a fixed pattern the result will be</font>

460
00:28:27,990 --> 00:28:32,880
the same if you know them when you<font color="#CCCCCC"> are</font>

461
00:28:30,060 --> 00:28:35,700
<font color="#E5E5E5">going to the obfuscated a JavaScript</font>

462
00:28:32,880 --> 00:28:39,870
code they can help you because you know

463
00:28:35,700 --> 00:28:43,650
them and can easily be obfuscated for

464
00:28:39,870 --> 00:28:46,239
the office<font color="#E5E5E5"> cating the first step would</font>

465
00:28:43,650 --> 00:28:49,570
be pretty print in order to

466
00:28:46,240 --> 00:28:55,920
make it a bit better<font color="#E5E5E5"> and nicer to be</font>

467
00:28:49,570 --> 00:28:58,649
Andre suit then a<font color="#E5E5E5"> star to refactor names</font>

468
00:28:55,920 --> 00:29:01,030
functions and variables name and data

469
00:28:58,650 --> 00:29:05,380
refactoring means the obfuscation the

470
00:29:01,030 --> 00:29:08,370
syntax and data after<font color="#CCCCCC"> that I start to</font>

471
00:29:05,380 --> 00:29:12,630
simplify the code follow for this stage

472
00:29:08,370 --> 00:29:16,360
check conditions and try to use<font color="#E5E5E5"> them</font>

473
00:29:12,630 --> 00:29:18,070
then remove dead and unreachable code

474
00:29:16,360 --> 00:29:21,939
because they aren't important in your

475
00:29:18,070 --> 00:29:25,740
<font color="#E5E5E5">code just make your code</font><font color="#CCCCCC"> eichler then</font>

476
00:29:21,940 --> 00:29:29,380
lighten the loops as we saw loops can be

477
00:29:25,740 --> 00:29:34,150
abused in order to make the code more

478
00:29:29,380 --> 00:29:37,500
animal then reduce any complexities in

479
00:29:34,150 --> 00:29:41,350
each part of code in each condition and

480
00:29:37,500 --> 00:29:42,820
try to recognize common type so if you

481
00:29:41,350 --> 00:29:46,149
know the common types you know the

482
00:29:42,820 --> 00:29:51,428
obfuscation approach and you won't spend

483
00:29:46,150 --> 00:29:56,559
<font color="#E5E5E5">more time in debt for tools for the</font>

484
00:29:51,429 --> 00:29:59,010
obfuscation you need a powerful ID Adam

485
00:29:56,559 --> 00:30:01,420
brackets and light table are

486
00:29:59,010 --> 00:30:03,610
approximately can say they are the same

487
00:30:01,420 --> 00:30:06,850
about structure about<font color="#E5E5E5"> features and</font>

488
00:30:03,610 --> 00:30:10,928
abilities<font color="#E5E5E5"> I would rather use Adam I will</font>

489
00:30:06,850 --> 00:30:13,570
say what sub limit<font color="#CCCCCC"> X is a good option</font>

490
00:30:10,929 --> 00:30:16,950
<font color="#CCCCCC">too as well as</font><font color="#E5E5E5"> you can use other ideas</font>

491
00:30:13,570 --> 00:30:20,950
which suits you for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> you can use</font>

492
00:30:16,950 --> 00:30:24,700
Eclipse NetBeans and etc for analyzing

493
00:30:20,950 --> 00:30:27,610
you would need a debugger for example

494
00:30:24,700 --> 00:30:30,520
you can use Firebug chrome developer

495
00:30:27,610 --> 00:30:32,590
tools or<font color="#CCCCCC"> JavaScript debugger directly</font>

496
00:30:30,520 --> 00:30:35,470
for example you can use v8 debugger no

497
00:30:32,590 --> 00:30:37,480
debugger or etc<font color="#E5E5E5"> I would rather to use</font>

498
00:30:35,470 --> 00:30:39,940
Firebug but if you want to use<font color="#E5E5E5"> Chrome</font>

499
00:30:37,480 --> 00:30:43,570
<font color="#E5E5E5">Google developer tools is a real</font>

500
00:30:39,940 --> 00:30:47,890
powerful tools for this manner Adam

501
00:30:43,570 --> 00:30:50,800
provides<font color="#E5E5E5"> your pretty print to nature</font>

502
00:30:47,890 --> 00:30:54,850
without any package you<font color="#CCCCCC"> can just click</font>

503
00:30:50,800 --> 00:30:58,389
<font color="#CCCCCC">write and</font><font color="#E5E5E5"> create</font><font color="#CCCCCC"> a print it ll selection</font>

504
00:30:54,850 --> 00:31:01,659
for analyzing follow can

505
00:30:58,390 --> 00:31:05,410
could follow you can just select that

506
00:31:01,660 --> 00:31:09,310
part of code and execute it<font color="#E5E5E5"> in a</font>

507
00:31:05,410 --> 00:31:10,960
different<font color="#CCCCCC"> context it provides a</font>

508
00:31:09,310 --> 00:31:13,990
refactoring package for example for

509
00:31:10,960 --> 00:31:17,770
refactoring names and data you select

510
00:31:13,990 --> 00:31:20,080
<font color="#CCCCCC">the variable names rename that and the</font>

511
00:31:17,770 --> 00:31:23,560
variable name gets renamed in hole off

512
00:31:20,080 --> 00:31:25,899
your coat you can run a script in a

513
00:31:23,560 --> 00:31:27,700
different context whole script in a

514
00:31:25,900 --> 00:31:31,330
different context context of your

515
00:31:27,700 --> 00:31:34,690
browser because<font color="#CCCCCC"> if you wanna analyzing</font>

516
00:31:31,330 --> 00:31:37,240
malicious JavaScript code it's not it

517
00:31:34,690 --> 00:31:41,920
doesn't make<font color="#CCCCCC"> sense to run</font><font color="#E5E5E5"> it directly in</font>

518
00:31:37,240 --> 00:31:45,400
your<font color="#E5E5E5"> own browser Firebug it has some</font>

519
00:31:41,920 --> 00:31:49,180
advantages for example highlight change

520
00:31:45,400 --> 00:31:51,430
if javascript or any other elements make

521
00:31:49,180 --> 00:31:53,740
a change in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> Dom tree or in your</font>

522
00:31:51,430 --> 00:31:57,520
HTML code automatically get highlighted

523
00:31:53,740 --> 00:31:58,990
by fire bar you can monitor your network

524
00:31:57,520 --> 00:32:01,660
communication in each type for example

525
00:31:58,990 --> 00:32:05,530
WebSocket communication objects or other

526
00:32:01,660 --> 00:32:09,340
type of communication<font color="#CCCCCC"> you have dumb</font>

527
00:32:05,530 --> 00:32:12,149
exploration you can easily explore your

528
00:32:09,340 --> 00:32:16,179
dumb three functions and variables and

529
00:32:12,150 --> 00:32:19,360
the other hand a Firebug debugger is so

530
00:32:16,180 --> 00:32:23,860
powerful provide you to kind of break

531
00:32:19,360 --> 00:32:26,560
points simple break points view 100%

532
00:32:23,860 --> 00:32:29,469
know what's break<font color="#CCCCCC"> point</font><font color="#E5E5E5"> so I pass up</font>

533
00:32:26,560 --> 00:32:31,929
this conditional break points means the

534
00:32:29,470 --> 00:32:34,930
JavaScript code will be stopped at a

535
00:32:31,930 --> 00:32:37,300
certain condition you define a condition

536
00:32:34,930 --> 00:32:40,930
and debugger<font color="#CCCCCC"> it</font><font color="#E5E5E5"> stop the code if the</font>

537
00:32:37,300 --> 00:32:44,290
condition is true you can trace your

538
00:32:40,930 --> 00:32:49,720
code step by step after stopping the

539
00:32:44,290 --> 00:32:53,230
code by debugger you can you will have a

540
00:32:49,720 --> 00:32:57,630
stack trace Firebug shows you this like

541
00:32:53,230 --> 00:33:01,240
call stack of code till a stopping point

542
00:32:57,630 --> 00:33:03,790
you can set watch expression and use

543
00:33:01,240 --> 00:33:07,270
variable tooltips watch expression you

544
00:33:03,790 --> 00:33:11,290
can<font color="#E5E5E5"> monitor it a special variable or dom</font>

545
00:33:07,270 --> 00:33:12,250
<font color="#E5E5E5">nodes during your execution code or you</font>

546
00:33:11,290 --> 00:33:15,250
can just

547
00:33:12,250 --> 00:33:17,740
pull your mouse pointer<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> variable</font>

548
00:33:15,250 --> 00:33:23,200
and see the decoded value of that

549
00:33:17,740 --> 00:33:26,410
variable you can<font color="#CCCCCC"> look function calls and</font>

550
00:33:23,200 --> 00:33:30,790
a specific function you<font color="#CCCCCC"> can log it and</font>

551
00:33:26,410 --> 00:33:34,210
monitor it or profile all functions lack

552
00:33:30,790 --> 00:33:38,800
for so at the end of execution you would

553
00:33:34,210 --> 00:33:41,970
have a lot which shows<font color="#CCCCCC"> you how many</font>

554
00:33:38,800 --> 00:33:45,220
times which function is called of course

555
00:33:41,970 --> 00:33:47,560
you will have some functions if you

556
00:33:45,220 --> 00:33:49,990
don't know the start point of a function

557
00:33:47,560 --> 00:33:51,730
you just pass the name of function to

558
00:33:49,990 --> 00:33:53,590
the debug function and it will

559
00:33:51,730 --> 00:33:57,900
automatically set a breakpoint at the

560
00:33:53,590 --> 00:34:00,129
first line of that function monitor is

561
00:33:57,900 --> 00:34:02,230
approximately<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> as debug function</font>

562
00:34:00,130 --> 00:34:05,260
you pass the name of function to death

563
00:34:02,230 --> 00:34:09,100
and automatically set lagging for that

564
00:34:05,260 --> 00:34:12,090
function at the end get event listener

565
00:34:09,100 --> 00:34:16,120
since event listener are important in

566
00:34:12,090 --> 00:34:19,450
dom tree and might some event is

567
00:34:16,120 --> 00:34:23,770
assigned to a specific<font color="#CCCCCC"> dine dumb note</font>

568
00:34:19,449 --> 00:34:26,678
you can get a list of given event

569
00:34:23,770 --> 00:34:32,199
listeners by this function and just pass

570
00:34:26,679 --> 00:34:36,850
the<font color="#CCCCCC"> Dom node name to this I so sorry</font><font color="#E5E5E5"> for</font>

571
00:34:32,199 --> 00:35:43,960
speed up my<font color="#E5E5E5"> tax at the end because of so</font>

572
00:34:36,850 --> 00:35:46,360
is there<font color="#E5E5E5"> any when you develop a good as</font>

573
00:35:43,960 --> 00:35:49,090
<font color="#CCCCCC">I said at the first slide you are</font>

574
00:35:46,360 --> 00:35:51,880
limited you are limited for some

575
00:35:49,090 --> 00:35:54,670
principle and<font color="#CCCCCC"> Java and programming</font>

576
00:35:51,880 --> 00:35:57,100
language limitation but when you develop

577
00:35:54,670 --> 00:35:59,320
a code and want<font color="#E5E5E5"> to release</font><font color="#CCCCCC"> that at the</font>

578
00:35:57,100 --> 00:36:01,569
final stage you<font color="#CCCCCC"> will release</font><font color="#E5E5E5"> up to</font>

579
00:35:59,320 --> 00:36:04,000
<font color="#CCCCCC">skated version of your coat you don't</font>

580
00:36:01,570 --> 00:36:06,340
have to remove<font color="#CCCCCC"> your killer code and just</font>

581
00:36:04,000 --> 00:36:08,500
keep the obfuscated version and the

582
00:36:06,340 --> 00:36:12,010
other hand if you use automated tools

583
00:36:08,500 --> 00:36:16,330
yeah at each time you will give a same

584
00:36:12,010 --> 00:36:20,050
pattern at the previous<font color="#E5E5E5"> one if you wanna</font>

585
00:36:16,330 --> 00:36:23,529
do it manually you should to spend more

586
00:36:20,050 --> 00:36:26,740
time<font color="#E5E5E5"> I</font><font color="#CCCCCC"> spent more resources in order to</font>

587
00:36:23,530 --> 00:36:29,560
obfuscate your code part by part so

588
00:36:26,740 --> 00:36:31,990
depends on your codes value it depends

589
00:36:29,560 --> 00:36:34,690
on you if<font color="#E5E5E5"> you want to spend time and</font><font color="#CCCCCC"> oh</font>

590
00:36:31,990 --> 00:36:37,540
for example resources in order to make

591
00:36:34,690 --> 00:36:40,840
your cut obfuscated it or not but

592
00:36:37,540 --> 00:36:43,570
automated tools are not so powerful just

593
00:36:40,840 --> 00:36:45,490
<font color="#CCCCCC">a</font><font color="#E5E5E5"> simple layer of obfuscation which can</font>

594
00:36:43,570 --> 00:36:51,820
be the obfuscation easily maybe by other

595
00:36:45,490 --> 00:36:56,799
type of job tomato obfuscation tools are

596
00:36:51,820 --> 00:36:59,070
<font color="#E5E5E5">your Christian maybe</font><font color="#CCCCCC"> okay thank</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> for</font>

597
00:36:56,800 --> 00:36:59,070
attention

