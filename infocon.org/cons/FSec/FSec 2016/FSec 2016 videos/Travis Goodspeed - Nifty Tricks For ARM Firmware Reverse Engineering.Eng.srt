1
00:00:02,449 --> 00:00:10,440
how do you could everybody<font color="#CCCCCC"> hear me</font><font color="#E5E5E5"> cool</font>

2
00:00:07,980 --> 00:00:12,950
so show of hands<font color="#E5E5E5"> how many of you have</font>

3
00:00:10,440 --> 00:00:15,120
reverse-engineered something from China

4
00:00:12,950 --> 00:00:20,009
<font color="#E5E5E5">all right now put your hand down if it's</font>

5
00:00:15,120 --> 00:00:25,710
malware<font color="#CCCCCC"> the contents of this</font><font color="#E5E5E5"> talk comes</font>

6
00:00:20,010 --> 00:00:27,630
from a 32-bit arm cortex-m for amateur

7
00:00:25,710 --> 00:00:30,269
radio<font color="#E5E5E5"> that I've been reverse engineering</font>

8
00:00:27,630 --> 00:00:31,560
in order<font color="#CCCCCC"> to add</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> features but it's</font>

9
00:00:30,269 --> 00:00:33,210
the same<font color="#E5E5E5"> sort of reverse</font><font color="#CCCCCC"> engineering</font>

10
00:00:31,560 --> 00:00:35,100
that<font color="#E5E5E5"> you would be doing if you wanted to</font>

11
00:00:33,210 --> 00:00:38,329
say break their crappy over-the-air

12
00:00:35,100 --> 00:00:40,500
cryptography<font color="#E5E5E5"> or if you want to</font>

13
00:00:38,329 --> 00:00:42,750
<font color="#E5E5E5">understand how</font><font color="#CCCCCC"> the device works maybe</font>

14
00:00:40,500 --> 00:00:44,700
you'd want to make<font color="#E5E5E5"> a similar device for</font>

15
00:00:42,750 --> 00:00:47,760
the same market<font color="#CCCCCC"> maybe you want to know</font>

16
00:00:44,700 --> 00:00:50,640
<font color="#E5E5E5">if you can feasibly beat their</font>

17
00:00:47,760 --> 00:00:54,629
manufacturing<font color="#E5E5E5"> cost or maybe you just</font>

18
00:00:50,640 --> 00:00:58,289
want to know how something ticks<font color="#CCCCCC"> I'm</font>

19
00:00:54,629 --> 00:01:01,890
joining<font color="#E5E5E5"> this work by</font><font color="#CCCCCC"> paulo DD</font><font color="#E5E5E5"> 4cr alex</font>

20
00:00:58,289 --> 00:01:03,870
<font color="#E5E5E5">is</font><font color="#CCCCCC"> d f8 AV and</font><font color="#E5E5E5"> David who's a</font><font color="#CCCCCC"> b3</font><font color="#E5E5E5"> TL these</font>

21
00:01:01,890 --> 00:01:05,640
are<font color="#E5E5E5"> ham radio call signs these are the</font>

22
00:01:03,870 --> 00:01:07,649
the licenses that<font color="#CCCCCC"> allow us to</font><font color="#E5E5E5"> talk in</font>

23
00:01:05,640 --> 00:01:12,060
the air and here in Croatia

24
00:01:07,650 --> 00:01:14,610
<font color="#E5E5E5">I am 6a</font><font color="#CCCCCC"> /kk for VCC</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is really long</font>

25
00:01:12,060 --> 00:01:16,320
<font color="#E5E5E5">and</font><font color="#CCCCCC"> hard to</font><font color="#E5E5E5"> remember so today we're</font>

26
00:01:14,610 --> 00:01:19,650
going to learn<font color="#E5E5E5"> how to extract firmware</font>

27
00:01:16,320 --> 00:01:22,048
from<font color="#E5E5E5"> a null pointer dereference</font><font color="#CCCCCC"> but one</font>

28
00:01:19,650 --> 00:01:24,540
that's<font color="#E5E5E5"> unindexed</font><font color="#CCCCCC"> so you're only</font><font color="#E5E5E5"> able to</font>

29
00:01:22,049 --> 00:01:28,530
<font color="#E5E5E5">read from address 0</font><font color="#CCCCCC"> this is what happens</font>

30
00:01:24,540 --> 00:01:30,060
when say<font color="#E5E5E5"> malloc doesn't work so it</font>

31
00:01:28,530 --> 00:01:32,040
returns<font color="#CCCCCC"> zero because there's</font><font color="#E5E5E5"> not enough</font>

32
00:01:30,060 --> 00:01:33,210
memory<font color="#E5E5E5"> available but the read happens</font>

33
00:01:32,040 --> 00:01:35,729
anyways

34
00:01:33,210 --> 00:01:37,320
normally the this will hit a guard page

35
00:01:35,729 --> 00:01:39,869
in crash but as you'll see<font color="#CCCCCC"> that does</font><font color="#E5E5E5"> not</font>

36
00:01:37,320 --> 00:01:42,149
happen on<font color="#E5E5E5"> this platform and on many</font>

37
00:01:39,869 --> 00:01:44,610
platforms like it<font color="#E5E5E5"> will also be just</font>

38
00:01:42,150 --> 00:01:48,600
discussing how to reverse<font color="#CCCCCC"> engineer a USB</font>

39
00:01:44,610 --> 00:01:53,850
stack the DMR radio networking protocol

40
00:01:48,600 --> 00:01:55,829
is sort of unique it it<font color="#E5E5E5"> only has 24 bit</font>

41
00:01:53,850 --> 00:01:58,619
addresses instead of say 32-bit

42
00:01:55,829 --> 00:02:01,289
addresses like ipv4<font color="#CCCCCC"> or very long ones</font>

43
00:01:58,619 --> 00:02:03,360
like ipv6<font color="#CCCCCC"> we'll be</font><font color="#E5E5E5"> discussing how to</font>

44
00:02:01,290 --> 00:02:06,020
identify<font color="#E5E5E5"> useful functions in the</font>

45
00:02:03,360 --> 00:02:09,628
firmware image by looking for access<font color="#CCCCCC"> to</font>

46
00:02:06,020 --> 00:02:11,790
digital i/o and we'll also<font color="#E5E5E5"> be discussing</font>

47
00:02:09,628 --> 00:02:12,500
<font color="#E5E5E5">like what's unique about reverse</font>

48
00:02:11,790 --> 00:02:13,850
<font color="#CCCCCC">engineering at</font>

49
00:02:12,500 --> 00:02:15,770
<font color="#CCCCCC">nice product because</font><font color="#E5E5E5"> that's different</font>

50
00:02:13,850 --> 00:02:17,810
<font color="#E5E5E5">from</font><font color="#CCCCCC"> reverse-engineering western product</font>

51
00:02:15,770 --> 00:02:20,380
<font color="#E5E5E5">and while some of the tricks are the</font>

52
00:02:17,810 --> 00:02:24,500
same<font color="#E5E5E5"> other tricks are</font><font color="#CCCCCC"> vary by the</font>

53
00:02:20,380 --> 00:02:26,299
<font color="#CCCCCC">culture</font><font color="#E5E5E5"> that's making the device</font><font color="#CCCCCC"> we'll</font>

54
00:02:24,500 --> 00:02:27,710
also<font color="#E5E5E5"> be discussing some</font><font color="#CCCCCC"> of the things</font>

55
00:02:26,300 --> 00:02:31,310
<font color="#CCCCCC">that only</font><font color="#E5E5E5"> matter when</font><font color="#CCCCCC"> you're trying</font><font color="#E5E5E5"> to</font>

56
00:02:27,710 --> 00:02:35,300
maintain patches against something<font color="#E5E5E5"> so if</font>

57
00:02:31,310 --> 00:02:36,680
you reverse<font color="#CCCCCC"> engineer a single version</font><font color="#E5E5E5"> of</font>

58
00:02:35,300 --> 00:02:38,990
<font color="#E5E5E5">an application</font>

59
00:02:36,680 --> 00:02:41,090
<font color="#CCCCCC">or in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> firmware image it's</font>

60
00:02:38,990 --> 00:02:44,180
very helpful to<font color="#CCCCCC"> be able to move on</font><font color="#E5E5E5"> to</font>

61
00:02:41,090 --> 00:02:46,220
have your same changes<font color="#E5E5E5"> apply to a new</font>

62
00:02:44,180 --> 00:02:48,340
revision<font color="#E5E5E5"> of it and we'll be discussing</font>

63
00:02:46,220 --> 00:02:50,720
<font color="#E5E5E5">how</font><font color="#CCCCCC"> to build tools to do that yourself</font>

64
00:02:48,340 --> 00:02:54,260
<font color="#E5E5E5">and then finally I'll be showing you</font><font color="#CCCCCC"> how</font>

65
00:02:50,720 --> 00:02:56,720
to take an arm firmware image and run it

66
00:02:54,260 --> 00:03:00,109
inside<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Linux as a regular</font>

67
00:02:56,720 --> 00:03:02,600
command-line tool<font color="#E5E5E5"> we do this by wrapping</font>

68
00:03:00,110 --> 00:03:05,360
the<font color="#E5E5E5"> firmware image into an arm elf</font>

69
00:03:02,600 --> 00:03:06,799
executable<font color="#CCCCCC"> and then using qumu user to</font>

70
00:03:05,360 --> 00:03:09,680
run it<font color="#E5E5E5"> and this allows us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> extract</font>

71
00:03:06,800 --> 00:03:12,530
libraries from inside of it in my<font color="#CCCCCC"> case</font>

72
00:03:09,680 --> 00:03:15,320
the md380 has its own proprietary audio

73
00:03:12,530 --> 00:03:17,680
compression algorithm called<font color="#CCCCCC"> mb 2 plus</font>

74
00:03:15,320 --> 00:03:20,900
it's very<font color="#E5E5E5"> valuable to</font><font color="#CCCCCC"> be able to encode</font>

75
00:03:17,680 --> 00:03:24,049
<font color="#CCCCCC">and decode audio in this</font><font color="#E5E5E5"> format but</font>

76
00:03:20,900 --> 00:03:26,150
there are no tools for encoding<font color="#CCCCCC"> it and</font>

77
00:03:24,049 --> 00:03:27,680
there's only<font color="#E5E5E5"> one</font><font color="#CCCCCC"> tool for decoding</font><font color="#E5E5E5"> it so</font>

78
00:03:26,150 --> 00:03:30,140
by wrapping up the the firmware<font color="#E5E5E5"> image</font>

79
00:03:27,680 --> 00:03:33,110
<font color="#E5E5E5">I'm able</font><font color="#CCCCCC"> to use its own audio codec in</font>

80
00:03:30,140 --> 00:03:40,130
my project<font color="#CCCCCC"> without having</font><font color="#E5E5E5"> to fall back</font>

81
00:03:33,110 --> 00:03:42,140
to to the<font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a sketch of</font>

82
00:03:40,130 --> 00:03:44,600
<font color="#E5E5E5">the device it's a handheld ham radio of</font>

83
00:03:42,140 --> 00:03:48,048
<font color="#CCCCCC">the sort that might be used in a</font>

84
00:03:44,600 --> 00:03:50,750
university police department or in a

85
00:03:48,049 --> 00:03:52,489
<font color="#E5E5E5">business there are smaller and more</font>

86
00:03:50,750 --> 00:03:55,400
<font color="#E5E5E5">expensive radios that</font><font color="#CCCCCC"> are manufactured</font>

87
00:03:52,489 --> 00:03:59,660
by<font color="#E5E5E5"> competitors such as Motorola and hi</font>

88
00:03:55,400 --> 00:04:03,019
<font color="#CCCCCC">Terra this brand is</font><font color="#E5E5E5"> hi</font><font color="#CCCCCC"> Terra it's like</font>

89
00:03:59,660 --> 00:04:06,920
the the minimal Hamming distance<font color="#E5E5E5"> without</font>

90
00:04:03,019 --> 00:04:08,989
creating trademark infringement<font color="#E5E5E5"> the</font>

91
00:04:06,920 --> 00:04:12,260
<font color="#E5E5E5">tight</font><font color="#CCCCCC"> arrow radios are a lot cheaper</font>

92
00:04:08,989 --> 00:04:19,160
<font color="#CCCCCC">they're on the order of 120 US dollars</font>

93
00:04:12,260 --> 00:04:21,440
or 140 150 euro<font color="#CCCCCC"> so the within the</font><font color="#E5E5E5"> the</font>

94
00:04:19,160 --> 00:04:23,230
price<font color="#E5E5E5"> range</font><font color="#CCCCCC"> that like a hobbyist can buy</font>

95
00:04:21,440 --> 00:04:26,230
one in order<font color="#CCCCCC"> to</font>

96
00:04:23,230 --> 00:04:28,120
talk to his buddies over<font color="#E5E5E5"> the air and in</font>

97
00:04:26,230 --> 00:04:30,960
several<font color="#E5E5E5"> countries there are repeaters</font>

98
00:04:28,120 --> 00:04:33,100
popping up that allow you<font color="#E5E5E5"> to communicate</font>

99
00:04:30,960 --> 00:04:34,690
<font color="#E5E5E5">between everyone else in the city or</font>

100
00:04:33,100 --> 00:04:37,690
even<font color="#E5E5E5"> connect the repeaters</font><font color="#CCCCCC"> in order to</font>

101
00:04:34,690 --> 00:04:41,250
make international<font color="#E5E5E5"> calls</font><font color="#CCCCCC"> so you can make</font>

102
00:04:37,690 --> 00:04:44,350
a call from say Berlin to New York City

103
00:04:41,250 --> 00:04:46,900
to Knoxville<font color="#CCCCCC"> having all three</font><font color="#E5E5E5"> people</font>

104
00:04:44,350 --> 00:04:48,760
talk<font color="#CCCCCC"> on the same</font><font color="#E5E5E5"> channel without any</font>

105
00:04:46,900 --> 00:04:51,070
other hardware<font color="#E5E5E5"> than buying one of these</font>

106
00:04:48,760 --> 00:04:53,380
radios<font color="#E5E5E5"> and having a radio license in</font>

107
00:04:51,070 --> 00:04:56,590
commercial use<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> replacing the</font>

108
00:04:53,380 --> 00:04:58,810
more expensive<font color="#CCCCCC"> Tutera</font><font color="#E5E5E5"> sorry hi Tara</font>

109
00:04:56,590 --> 00:05:00,729
minimum Hamming distance remember<font color="#E5E5E5"> their</font>

110
00:04:58,810 --> 00:05:02,410
design to be confused they're replacing

111
00:05:00,730 --> 00:05:06,610
the more expensive<font color="#E5E5E5"> German and American</font>

112
00:05:02,410 --> 00:05:08,140
radios<font color="#E5E5E5"> and then they they just drop into</font>

113
00:05:06,610 --> 00:05:10,420
<font color="#CCCCCC">the exact same network so</font><font color="#E5E5E5"> you can buy</font>

114
00:05:08,140 --> 00:05:13,150
this radio and communicate with the

115
00:05:10,420 --> 00:05:16,120
expensive motorola radios<font color="#E5E5E5"> without having</font>

116
00:05:13,150 --> 00:05:18,130
to change<font color="#E5E5E5"> the networking software or the</font>

117
00:05:16,120 --> 00:05:21,490
<font color="#E5E5E5">protocols or the frequencies everything</font>

118
00:05:18,130 --> 00:05:23,860
is<font color="#E5E5E5"> compatible it has a 5 watt UHF</font>

119
00:05:21,490 --> 00:05:28,150
transmitter<font color="#CCCCCC"> there's also a VHF model</font><font color="#E5E5E5"> or</font>

120
00:05:23,860 --> 00:05:32,080
available so this runs right around<font color="#E5E5E5"> 400</font>

121
00:05:28,150 --> 00:05:34,419
<font color="#E5E5E5">450 megahertz</font><font color="#CCCCCC"> it has both digital and</font>

122
00:05:32,080 --> 00:05:39,010
analog modes<font color="#CCCCCC"> so not</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> you connect</font>

123
00:05:34,420 --> 00:05:40,840
to a digital<font color="#CCCCCC"> network</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> this</font>

124
00:05:39,010 --> 00:05:43,300
protocol you<font color="#CCCCCC"> can also connect to</font><font color="#E5E5E5"> the</font>

125
00:05:40,840 --> 00:05:45,969
old-fashioned analog networks<font color="#E5E5E5"> for either</font>

126
00:05:43,300 --> 00:05:48,400
business<font color="#E5E5E5"> or amateur use so you can jump</font>

127
00:05:45,970 --> 00:05:49,840
on to the the<font color="#E5E5E5"> older repeaters and this</font>

128
00:05:48,400 --> 00:05:52,859
allows you<font color="#E5E5E5"> to use the radio in cities</font>

129
00:05:49,840 --> 00:05:57,599
<font color="#E5E5E5">that don't yet have a digital repeater</font>

130
00:05:52,860 --> 00:06:01,240
<font color="#CCCCCC">the</font><font color="#E5E5E5"> CPU of this device is an stm32f4</font><font color="#CCCCCC"> o-5</font>

131
00:05:57,600 --> 00:06:05,440
it has<font color="#E5E5E5"> one megabyte of flash and</font><font color="#CCCCCC"> 192</font>

132
00:06:01,240 --> 00:06:08,830
kilobytes of RAM<font color="#E5E5E5"> internal to it there's</font>

133
00:06:05,440 --> 00:06:11,080
also a<font color="#E5E5E5"> 16 megabyte</font><font color="#CCCCCC"> spi</font><font color="#E5E5E5"> flash which when</font>

134
00:06:08,830 --> 00:06:13,690
they<font color="#E5E5E5"> initially made</font><font color="#CCCCCC"> the design was</font>

135
00:06:11,080 --> 00:06:15,820
expected to<font color="#E5E5E5"> only be</font><font color="#CCCCCC"> one megabyte so 15</font>

136
00:06:13,690 --> 00:06:18,790
megabytes<font color="#E5E5E5"> are unused</font><font color="#CCCCCC"> and that gives</font><font color="#E5E5E5"> us</font>

137
00:06:15,820 --> 00:06:22,330
plenty<font color="#CCCCCC"> of space to</font><font color="#E5E5E5"> store extra things it</font>

138
00:06:18,790 --> 00:06:25,120
also has a<font color="#CCCCCC"> C 5000</font><font color="#E5E5E5"> radio ASIC chip this</font>

139
00:06:22,330 --> 00:06:27,820
chip is what does all of the<font color="#E5E5E5"> actual</font>

140
00:06:25,120 --> 00:06:30,370
radio<font color="#E5E5E5"> stuff so it sends a packet it</font>

141
00:06:27,820 --> 00:06:33,159
receives a packet it modulates that

142
00:06:30,370 --> 00:06:34,900
packet into the radio signal there's a

143
00:06:33,160 --> 00:06:36,550
separate amplifier but this creates the

144
00:06:34,900 --> 00:06:39,460
initial<font color="#CCCCCC"> signal before amplification</font>

145
00:06:36,550 --> 00:06:41,440
and this chip is uniquely<font color="#E5E5E5"> of Chinese</font>

146
00:06:39,460 --> 00:06:46,810
design<font color="#E5E5E5"> there is no Western documentation</font>

147
00:06:41,440 --> 00:06:50,200
for<font color="#E5E5E5"> this chip at all anywhere</font><font color="#CCCCCC"> a given</font>

148
00:06:46,810 --> 00:06:52,720
<font color="#CCCCCC">network for this protocol vol net is the</font>

149
00:06:50,200 --> 00:06:54,370
one<font color="#E5E5E5"> that we use in East Tennessee</font><font color="#CCCCCC"> I know</font>

150
00:06:52,720 --> 00:06:56,890
that none of you know<font color="#E5E5E5"> where Tennessee is</font>

151
00:06:54,370 --> 00:06:58,810
on a map but it's a<font color="#CCCCCC"> lovely place and we</font>

152
00:06:56,890 --> 00:07:04,539
have very good<font color="#CCCCCC"> rocky I have made out of</font>

153
00:06:58,810 --> 00:07:06,760
corn<font color="#CCCCCC"> Vall net is one of I think three</font>

154
00:07:04,540 --> 00:07:08,380
different<font color="#E5E5E5"> DMR networks that we</font><font color="#CCCCCC"> have</font>

155
00:07:06,760 --> 00:07:10,930
within<font color="#E5E5E5"> the</font><font color="#CCCCCC"> state</font>

156
00:07:08,380 --> 00:07:12,969
this map shows six of the networking

157
00:07:10,930 --> 00:07:16,120
towers most of which are<font color="#E5E5E5"> based in the</font>

158
00:07:12,970 --> 00:07:17,680
east<font color="#E5E5E5"> along</font><font color="#CCCCCC"> the mountains and these</font>

159
00:07:16,120 --> 00:07:20,380
<font color="#E5E5E5">mountains give them incredibly long</font>

160
00:07:17,680 --> 00:07:23,860
range<font color="#E5E5E5"> so that you can connect</font><font color="#CCCCCC"> to a tower</font>

161
00:07:20,380 --> 00:07:25,450
that<font color="#CCCCCC"> is more than</font><font color="#E5E5E5"> 100</font><font color="#CCCCCC"> kilometres away</font>

162
00:07:23,860 --> 00:07:27,880
<font color="#CCCCCC">from you</font>

163
00:07:25,450 --> 00:07:29,560
there are also all<font color="#CCCCCC"> networks together</font><font color="#E5E5E5"> so</font>

164
00:07:27,880 --> 00:07:32,050
if you can see any one of<font color="#E5E5E5"> these towers</font>

165
00:07:29,560 --> 00:07:34,780
you can talk to people<font color="#E5E5E5"> on other towers</font>

166
00:07:32,050 --> 00:07:37,180
<font color="#CCCCCC">and there are</font><font color="#E5E5E5"> USB dongles that allow you</font>

167
00:07:34,780 --> 00:07:39,369
<font color="#E5E5E5">to connect to</font><font color="#CCCCCC"> it remotely so you could</font>

168
00:07:37,180 --> 00:07:41,830
plug one into the laptop<font color="#E5E5E5"> here on stage</font>

169
00:07:39,370 --> 00:07:45,640
and I<font color="#E5E5E5"> can make a call through the</font><font color="#CCCCCC"> laptop</font>

170
00:07:41,830 --> 00:07:47,890
over<font color="#CCCCCC"> the Wi-Fi to this network to then</font>

171
00:07:45,640 --> 00:07:52,419
be heard in the mountains<font color="#E5E5E5"> to ask folks</font>

172
00:07:47,890 --> 00:07:53,860
how their<font color="#CCCCCC"> moonshine is distilling one</font>

173
00:07:52,420 --> 00:07:56,920
particularly<font color="#E5E5E5"> nice feature about this</font>

174
00:07:53,860 --> 00:07:59,680
<font color="#E5E5E5">radio is that</font><font color="#CCCCCC"> it has an actual USB port</font>

175
00:07:56,920 --> 00:08:02,400
most radios of this type instead have

176
00:07:59,680 --> 00:08:06,220
low-voltage serial port<font color="#E5E5E5"> and require</font>

177
00:08:02,400 --> 00:08:10,000
conversion electronics here the<font color="#E5E5E5"> CPU</font>

178
00:08:06,220 --> 00:08:11,710
implements USB itself through one<font color="#CCCCCC"> of two</font>

179
00:08:10,000 --> 00:08:14,740
programs<font color="#E5E5E5"> either a bootloader application</font>

180
00:08:11,710 --> 00:08:15,789
or the the second layer application

181
00:08:14,740 --> 00:08:18,040
<font color="#E5E5E5">that's actually running the software</font>

182
00:08:15,790 --> 00:08:22,480
<font color="#E5E5E5">that manages the radio that turns on</font><font color="#CCCCCC"> the</font>

183
00:08:18,040 --> 00:08:27,550
screen so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> reverse engineered the</font>

184
00:08:22,480 --> 00:08:29,920
protocol<font color="#CCCCCC"> that the official</font><font color="#E5E5E5"> programming</font>

185
00:08:27,550 --> 00:08:35,470
software<font color="#E5E5E5"> uses and this allowed me</font><font color="#CCCCCC"> to</font>

186
00:08:29,920 --> 00:08:36,789
read and<font color="#E5E5E5"> write the basics of the radio</font>

187
00:08:35,470 --> 00:08:38,740
configuration so I could add new

188
00:08:36,789 --> 00:08:41,049
channels<font color="#E5E5E5"> there's a phone book that</font>

189
00:08:38,740 --> 00:08:44,049
contains contacts<font color="#E5E5E5"> both for private calls</font>

190
00:08:41,049 --> 00:08:48,520
and<font color="#E5E5E5"> for public</font><font color="#CCCCCC"> calls</font><font color="#E5E5E5"> so for example I</font>

191
00:08:44,049 --> 00:08:49,819
might<font color="#E5E5E5"> have the the number for a single</font>

192
00:08:48,520 --> 00:08:52,819
individual friend or

193
00:08:49,820 --> 00:08:55,940
might have a number<font color="#CCCCCC"> for the entirety</font><font color="#E5E5E5"> of</font>

194
00:08:52,820 --> 00:08:57,380
<font color="#E5E5E5">my home state</font><font color="#CCCCCC"> of Tennessee and by</font>

195
00:08:55,940 --> 00:09:00,650
<font color="#E5E5E5">transmitting to one or the</font><font color="#CCCCCC"> other it gets</font>

196
00:08:57,380 --> 00:09:02,900
<font color="#E5E5E5">routed to the</font><font color="#CCCCCC"> appropriate location but</font>

197
00:09:00,650 --> 00:09:05,300
what I really wanted to<font color="#E5E5E5"> do was dig into</font>

198
00:09:02,900 --> 00:09:09,410
it and reverse engineer<font color="#CCCCCC"> it so I</font><font color="#E5E5E5"> added</font>

199
00:09:05,300 --> 00:09:12,079
raw packet capture<font color="#E5E5E5"> these frames were</font>

200
00:09:09,410 --> 00:09:15,199
taken<font color="#E5E5E5"> directly off the</font><font color="#CCCCCC"> air and these are</font>

201
00:09:12,080 --> 00:09:18,950
the first captured SMS transmissions

202
00:09:15,200 --> 00:09:23,030
<font color="#E5E5E5">over DMR so far as I'm aware</font><font color="#CCCCCC"> I also</font>

203
00:09:18,950 --> 00:09:25,730
implemented<font color="#E5E5E5"> a an Android app that</font><font color="#CCCCCC"> allows</font>

204
00:09:23,030 --> 00:09:27,829
me to<font color="#CCCCCC"> run these extra features</font><font color="#E5E5E5"> as I'm</font>

205
00:09:25,730 --> 00:09:31,130
wandering around<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> has</font>

206
00:09:27,830 --> 00:09:35,210
<font color="#E5E5E5">particularly good USB host mode so it's</font>

207
00:09:31,130 --> 00:09:37,100
able to talk<font color="#CCCCCC"> to any device you</font><font color="#E5E5E5"> like as</font>

208
00:09:35,210 --> 00:09:39,020
long<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the user clicks</font><font color="#CCCCCC"> ok you don't</font>

209
00:09:37,100 --> 00:09:41,780
<font color="#CCCCCC">need a signed driver as you would in</font>

210
00:09:39,020 --> 00:09:43,730
Windows<font color="#CCCCCC"> you don't need to modify</font><font color="#E5E5E5"> the</font>

211
00:09:41,780 --> 00:09:45,550
kernel<font color="#E5E5E5"> or create a loadable module or</font>

212
00:09:43,730 --> 00:09:48,470
run<font color="#E5E5E5"> Python code as you would in Linux</font>

213
00:09:45,550 --> 00:09:51,620
<font color="#CCCCCC">you you</font><font color="#E5E5E5"> just click OK and everything</font>

214
00:09:48,470 --> 00:09:54,890
works it's the the most convenient USB

215
00:09:51,620 --> 00:09:56,540
that's available<font color="#E5E5E5"> for any platform but in</font>

216
00:09:54,890 --> 00:09:58,130
<font color="#E5E5E5">order</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> I first had to get a</font>

217
00:09:56,540 --> 00:10:00,140
copy of<font color="#E5E5E5"> the firmware out of the radio</font>

218
00:09:58,130 --> 00:10:02,590
<font color="#E5E5E5">when you are a reverse engineering</font>

219
00:10:00,140 --> 00:10:05,180
malware or you are reverse engineering

220
00:10:02,590 --> 00:10:06,380
<font color="#E5E5E5">anything running</font><font color="#CCCCCC"> on a PC you have</font><font color="#E5E5E5"> the</font>

221
00:10:05,180 --> 00:10:10,130
advantage that<font color="#E5E5E5"> you have very good</font>

222
00:10:06,380 --> 00:10:12,230
debuggers and you also have the physical

223
00:10:10,130 --> 00:10:14,300
or not physical but<font color="#CCCCCC"> the electronic file</font>

224
00:10:12,230 --> 00:10:16,370
that you can<font color="#E5E5E5"> read so you see the dot exe</font>

225
00:10:14,300 --> 00:10:17,810
file you know that if you start<font color="#CCCCCC"> it it</font>

226
00:10:16,370 --> 00:10:21,080
will do<font color="#E5E5E5"> something to begin the malware</font>

227
00:10:17,810 --> 00:10:23,119
<font color="#E5E5E5">and you have an easy starting point for</font>

228
00:10:21,080 --> 00:10:25,310
<font color="#E5E5E5">reverse engineering</font><font color="#CCCCCC"> you might fight with</font>

229
00:10:23,120 --> 00:10:27,320
a packer but at some point<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> be in</font>

230
00:10:25,310 --> 00:10:30,260
RAM and running<font color="#E5E5E5"> from</font><font color="#CCCCCC"> RAM and you'll have</font>

231
00:10:27,320 --> 00:10:32,150
a copy<font color="#E5E5E5"> of it on embedded systems</font><font color="#CCCCCC"> you're</font>

232
00:10:30,260 --> 00:10:35,120
very often not<font color="#E5E5E5"> allowed to attach a</font>

233
00:10:32,150 --> 00:10:37,520
debugger<font color="#CCCCCC"> this device had JTAG locked out</font>

234
00:10:35,120 --> 00:10:41,210
so that you were<font color="#E5E5E5"> not allowed to begin</font>

235
00:10:37,520 --> 00:10:45,199
<font color="#CCCCCC">debugging it so the way that I dumped</font>

236
00:10:41,210 --> 00:10:48,740
the firmware<font color="#E5E5E5"> was through no pointer</font>

237
00:10:45,200 --> 00:10:51,680
dereference<font color="#E5E5E5"> so in Windows when you have</font>

238
00:10:48,740 --> 00:10:53,390
a no point of dereference you that alone

239
00:10:51,680 --> 00:10:55,430
is<font color="#CCCCCC"> not exploitable because you don't</font>

240
00:10:53,390 --> 00:10:57,860
have anything at<font color="#CCCCCC"> that address you need</font>

241
00:10:55,430 --> 00:10:59,719
to either<font color="#E5E5E5"> create something at address 0</font>

242
00:10:57,860 --> 00:11:02,780
<font color="#E5E5E5">which are very</font><font color="#CCCCCC"> often</font><font color="#E5E5E5"> not allowed to do</font>

243
00:10:59,720 --> 00:11:06,050
or<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have an index to the</font>

244
00:11:02,780 --> 00:11:08,180
allows you to say no no the buffer is<font color="#CCCCCC"> at</font>

245
00:11:06,050 --> 00:11:10,640
address<font color="#CCCCCC"> zero but I want something</font><font color="#E5E5E5"> that</font>

246
00:11:08,180 --> 00:11:12,620
<font color="#CCCCCC">is gigabyte and a half further than that</font>

247
00:11:10,640 --> 00:11:16,580
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> to read off the end of</font><font color="#E5E5E5"> the</font>

248
00:11:12,620 --> 00:11:18,740
buffer<font color="#CCCCCC"> here I don't</font><font color="#E5E5E5"> have an index and</font>

249
00:11:16,580 --> 00:11:20,900
I'm not allowed<font color="#CCCCCC"> to allocate anything</font><font color="#E5E5E5"> new</font>

250
00:11:18,740 --> 00:11:21,430
in memory so I have to go with what's

251
00:11:20,900 --> 00:11:24,020
<font color="#CCCCCC">already there</font>

252
00:11:21,430 --> 00:11:27,199
<font color="#E5E5E5">luckily I'm running on</font><font color="#CCCCCC"> an arm cortex-m</font>

253
00:11:24,020 --> 00:11:30,140
<font color="#E5E5E5">for this is an embedded 32-bit machine</font>

254
00:11:27,200 --> 00:11:34,430
it's running the<font color="#E5E5E5"> thumb instruction set</font>

255
00:11:30,140 --> 00:11:36,620
and inside<font color="#E5E5E5"> of the programming for the</font>

256
00:11:34,430 --> 00:11:39,770
radio<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> specify which</font><font color="#E5E5E5"> memory</font>

257
00:11:36,620 --> 00:11:41,270
you would like to read<font color="#CCCCCC"> or write</font><font color="#E5E5E5"> the idea</font>

258
00:11:39,770 --> 00:11:43,640
is<font color="#CCCCCC"> that you're allowed to</font><font color="#E5E5E5"> read from</font>

259
00:11:41,270 --> 00:11:45,710
<font color="#E5E5E5">external memory or you're allowed to</font>

260
00:11:43,640 --> 00:11:47,390
write to internal memory<font color="#CCCCCC"> and when</font><font color="#E5E5E5"> you</font>

261
00:11:45,710 --> 00:11:48,680
write<font color="#CCCCCC"> to internal memory you're doing a</font>

262
00:11:47,390 --> 00:11:50,540
firmware update and the<font color="#E5E5E5"> firmware updates</font>

263
00:11:48,680 --> 00:11:52,880
are encrypted<font color="#CCCCCC"> I didn't have the</font>

264
00:11:50,540 --> 00:11:54,410
encryption keys<font color="#CCCCCC"> but as always</font>

265
00:11:52,880 --> 00:11:57,770
implementing the code to<font color="#E5E5E5"> load an</font>

266
00:11:54,410 --> 00:12:00,589
encrypted update<font color="#CCCCCC"> I found that</font><font color="#E5E5E5"> it's</font>

267
00:11:57,770 --> 00:12:02,870
<font color="#CCCCCC">fatback at me</font><font color="#E5E5E5"> the beginning of the arm</font>

268
00:12:00,590 --> 00:12:07,250
firmware and the reason why I did that

269
00:12:02,870 --> 00:12:09,500
<font color="#E5E5E5">was that there</font><font color="#CCCCCC"> is no trap page</font><font color="#E5E5E5"> loaded at</font>

270
00:12:07,250 --> 00:12:10,910
address<font color="#E5E5E5"> 0 in this architecture</font><font color="#CCCCCC"> instead</font>

271
00:12:09,500 --> 00:12:13,700
and just<font color="#CCCCCC"> for convenience</font>

272
00:12:10,910 --> 00:12:16,540
they put a duplicate copy of<font color="#E5E5E5"> whatever</font>

273
00:12:13,700 --> 00:12:20,420
memory<font color="#E5E5E5"> you booted</font><font color="#CCCCCC"> from in this case of</font>

274
00:12:16,540 --> 00:12:22,910
internal<font color="#CCCCCC"> flash memory</font><font color="#E5E5E5"> so when it was</font>

275
00:12:20,420 --> 00:12:24,319
reading from<font color="#E5E5E5"> a buffer that wasn't yet</font>

276
00:12:22,910 --> 00:12:26,390
initialized<font color="#E5E5E5"> when I was reading from the</font>

277
00:12:24,320 --> 00:12:28,130
null pointer<font color="#E5E5E5"> it was reading the very</font>

278
00:12:26,390 --> 00:12:31,040
beginning of its bootloader and<font color="#E5E5E5"> giving</font>

279
00:12:28,130 --> 00:12:33,170
me a copy of<font color="#E5E5E5"> it now in the md380</font>

280
00:12:31,040 --> 00:12:35,510
protocol you first specify which memory

281
00:12:33,170 --> 00:12:38,089
and then you read<font color="#CCCCCC"> the pages from it all</font>

282
00:12:35,510 --> 00:12:40,000
I did was forget to<font color="#CCCCCC"> specify the page and</font>

283
00:12:38,090 --> 00:12:42,860
it gave<font color="#E5E5E5"> me back</font><font color="#CCCCCC"> the code accidentally</font>

284
00:12:40,000 --> 00:12:44,150
but I<font color="#E5E5E5"> wasn't allowed to do multiple</font>

285
00:12:42,860 --> 00:12:45,800
reads because<font color="#E5E5E5"> they would all</font><font color="#CCCCCC"> come from</font>

286
00:12:44,150 --> 00:12:48,260
the same place<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> got me the</font>

287
00:12:45,800 --> 00:12:50,260
first<font color="#E5E5E5"> 48 kilobytes of flash memory</font><font color="#CCCCCC"> and</font>

288
00:12:48,260 --> 00:12:54,310
nothing<font color="#E5E5E5"> after that</font>

289
00:12:50,260 --> 00:12:56,600
<font color="#E5E5E5">luckily the first 48 kilobytes</font><font color="#CCCCCC"> are the</font>

290
00:12:54,310 --> 00:12:58,670
<font color="#E5E5E5">the bootloader that decrypts the</font>

291
00:12:56,600 --> 00:13:00,440
<font color="#E5E5E5">firmware updates in order to install</font>

292
00:12:58,670 --> 00:13:02,360
them so not<font color="#E5E5E5"> only does</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> have the keys</font>

293
00:13:00,440 --> 00:13:05,060
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I need to decrypt the firmware</font>

294
00:13:02,360 --> 00:13:06,440
updates it also has the<font color="#E5E5E5"> it symmetric</font>

295
00:13:05,060 --> 00:13:11,239
crypto so it's also what I need to

296
00:13:06,440 --> 00:13:13,220
re-encrypt them and the very first<font color="#E5E5E5"> thing</font>

297
00:13:11,240 --> 00:13:15,620
<font color="#CCCCCC">that it does</font><font color="#E5E5E5"> when it starts up is it</font>

298
00:13:13,220 --> 00:13:16,610
locks out<font color="#CCCCCC"> JTAG so that you're not</font>

299
00:13:15,620 --> 00:13:19,130
allowed to<font color="#E5E5E5"> read</font>

300
00:13:16,610 --> 00:13:21,769
copy of anything<font color="#E5E5E5"> in memory you're not</font>

301
00:13:19,130 --> 00:13:24,620
allowed to<font color="#E5E5E5"> attach a debugger so I</font>

302
00:13:21,769 --> 00:13:28,430
patched it by changing<font color="#CCCCCC"> one byte from a</font>

303
00:13:24,620 --> 00:13:31,610
<font color="#CCCCCC">five to five</font><font color="#E5E5E5"> a and what this did</font><font color="#CCCCCC"> was it</font>

304
00:13:28,430 --> 00:13:33,620
prevented the<font color="#CCCCCC"> chip from locking so now</font>

305
00:13:31,610 --> 00:13:35,600
when it boots<font color="#E5E5E5"> up</font><font color="#CCCCCC"> it runs exactly the</font>

306
00:13:33,620 --> 00:13:36,950
same<font color="#CCCCCC"> software I can</font><font color="#E5E5E5"> install the firmware</font>

307
00:13:35,600 --> 00:13:38,899
<font color="#E5E5E5">update it will decrypt the firmware</font>

308
00:13:36,950 --> 00:13:40,970
<font color="#E5E5E5">update</font><font color="#CCCCCC"> and put it into flash and then I</font>

309
00:13:38,899 --> 00:13:45,260
can<font color="#E5E5E5"> attach a debugger and dump a copy of</font>

310
00:13:40,970 --> 00:13:47,510
it out<font color="#E5E5E5"> so</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> I gave</font><font color="#CCCCCC"> a copy of</font><font color="#E5E5E5"> both the</font>

311
00:13:45,260 --> 00:13:51,709
<font color="#E5E5E5">encrypted and the</font><font color="#CCCCCC"> clear-text</font><font color="#E5E5E5"> firmware</font><font color="#CCCCCC"> to</font>

312
00:13:47,510 --> 00:13:53,540
my friend Paula<font color="#CCCCCC"> D D for CR</font><font color="#E5E5E5"> and what she</font>

313
00:13:51,709 --> 00:13:55,189
discovered<font color="#CCCCCC"> was that they were using</font><font color="#E5E5E5"> a s</font>

314
00:13:53,540 --> 00:13:57,800
counter mode but they were resetting the

315
00:13:55,190 --> 00:14:00,829
nonce for every<font color="#E5E5E5"> single frame for every</font>

316
00:13:57,800 --> 00:14:03,459
block of flash<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> which means</font><font color="#CCCCCC"> that</font>

317
00:14:00,829 --> 00:14:06,380
they were effectively using exclusive-or

318
00:14:03,459 --> 00:14:09,140
and you could just XOR the firmware

319
00:14:06,380 --> 00:14:12,290
update<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> clear-text</font><font color="#E5E5E5"> firmware in</font>

320
00:14:09,140 --> 00:14:14,959
order<font color="#E5E5E5"> to get a copy</font><font color="#CCCCCC"> of the xor string</font>

321
00:14:12,290 --> 00:14:17,120
that they were obfuscating the firmware

322
00:14:14,959 --> 00:14:19,310
<font color="#E5E5E5">with and then you were able to encrypt</font>

323
00:14:17,120 --> 00:14:20,810
and decrypt firmware<font color="#E5E5E5"> so you can now</font><font color="#CCCCCC"> take</font>

324
00:14:19,310 --> 00:14:23,630
any<font color="#E5E5E5"> firmware update and you can go back</font>

325
00:14:20,810 --> 00:14:25,489
<font color="#CCCCCC">to the clear text firmware image change</font>

326
00:14:23,630 --> 00:14:27,079
it and then<font color="#E5E5E5"> write it back as a regular</font>

327
00:14:25,490 --> 00:14:30,470
firmware update to be installed with<font color="#CCCCCC"> the</font>

328
00:14:27,079 --> 00:14:31,849
regular<font color="#CCCCCC"> Windows software so at this</font>

329
00:14:30,470 --> 00:14:33,440
point<font color="#E5E5E5"> you have a copy of the</font><font color="#CCCCCC"> firmware</font>

330
00:14:31,850 --> 00:14:34,699
but you you need to<font color="#E5E5E5"> figure out</font><font color="#CCCCCC"> what it</font>

331
00:14:33,440 --> 00:14:36,829
does<font color="#E5E5E5"> and you need to change things</font>

332
00:14:34,699 --> 00:14:38,420
inside<font color="#CCCCCC"> of it you need to</font><font color="#E5E5E5"> figure out how</font>

333
00:14:36,829 --> 00:14:41,239
<font color="#E5E5E5">to reverse engineer</font><font color="#CCCCCC"> it and</font><font color="#E5E5E5"> separately</font>

334
00:14:38,420 --> 00:14:42,620
how to patch it when you reverse

335
00:14:41,240 --> 00:14:44,510
engineer<font color="#CCCCCC"> it you have the</font><font color="#E5E5E5"> advantage that</font>

336
00:14:42,620 --> 00:14:48,019
<font color="#E5E5E5">even though it's this large chunk of</font>

337
00:14:44,510 --> 00:14:50,390
code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you could automated tools will</font>

338
00:14:48,019 --> 00:14:51,640
sort of<font color="#E5E5E5"> tell you where things begin</font><font color="#CCCCCC"> and</font>

339
00:14:50,390 --> 00:14:54,709
end you need<font color="#E5E5E5"> to know where</font><font color="#CCCCCC"> to place</font><font color="#E5E5E5"> them</font>

340
00:14:51,640 --> 00:14:57,470
so inside of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> datasheet for this chip</font>

341
00:14:54,709 --> 00:15:01,219
<font color="#E5E5E5">and the CPU is a</font><font color="#CCCCCC"> western chip with full</font>

342
00:14:57,470 --> 00:15:04,490
documentation<font color="#E5E5E5"> in English</font><font color="#CCCCCC"> you'll find a</font>

343
00:15:01,220 --> 00:15:06,649
<font color="#E5E5E5">memory map that shows you</font><font color="#CCCCCC"> that at an any</font>

344
00:15:04,490 --> 00:15:08,300
address that begins<font color="#E5E5E5"> with the four well</font>

345
00:15:06,649 --> 00:15:11,420
that's an i/o region anything that

346
00:15:08,300 --> 00:15:14,719
begins<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a two is SRAM which</font><font color="#CCCCCC"> is the</font>

347
00:15:11,420 --> 00:15:16,579
slower<font color="#E5E5E5"> type of</font><font color="#CCCCCC"> Ram anything that begins</font>

348
00:15:14,720 --> 00:15:18,050
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> one is tightly coupled</font><font color="#CCCCCC"> RAM which</font>

349
00:15:16,579 --> 00:15:20,149
are not allowed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> execute but it's a</font>

350
00:15:18,050 --> 00:15:23,269
bit faster than SRAM<font color="#E5E5E5"> because it's</font>

351
00:15:20,149 --> 00:15:26,660
connected<font color="#CCCCCC"> directly to the</font><font color="#E5E5E5"> date to the</font>

352
00:15:23,269 --> 00:15:27,810
data fetch path instead<font color="#CCCCCC"> of to</font><font color="#E5E5E5"> the memory</font>

353
00:15:26,660 --> 00:15:31,259
cache

354
00:15:27,810 --> 00:15:33,719
<font color="#E5E5E5">and you'll also find that at anything</font>

355
00:15:31,259 --> 00:15:36,600
begins with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> zero eight is in flash</font>

356
00:15:33,720 --> 00:15:37,680
memory<font color="#CCCCCC"> and because the</font><font color="#E5E5E5"> four first</font><font color="#CCCCCC"> 48k</font>

357
00:15:36,600 --> 00:15:40,139
are taken by the bootloader

358
00:15:37,680 --> 00:15:45,149
the actual application<font color="#CCCCCC"> begins at</font><font color="#E5E5E5"> zero</font>

359
00:15:40,139 --> 00:15:49,009
<font color="#E5E5E5">eight zero 0</font><font color="#CCCCCC"> C 0 0 0</font><font color="#E5E5E5"> you can then load</font>

360
00:15:45,149 --> 00:15:51,779
it<font color="#E5E5E5"> into Ida Pro as a binary image</font>

361
00:15:49,009 --> 00:15:53,459
<font color="#CCCCCC">beginning at a known address for a known</font>

362
00:15:51,779 --> 00:15:57,689
architecture which is<font color="#CCCCCC"> armed</font>

363
00:15:53,459 --> 00:15:59,489
<font color="#E5E5E5">little-endian 16-bit</font><font color="#CCCCCC"> a 16</font><font color="#E5E5E5"> that refers to</font>

364
00:15:57,689 --> 00:16:02,910
the instruction with not the register

365
00:15:59,490 --> 00:16:06,180
width<font color="#E5E5E5"> so this is still a</font><font color="#CCCCCC"> 32-bit cpu</font><font color="#E5E5E5"> it's</font>

366
00:16:02,910 --> 00:16:08,819
just in the denser instruction mode in

367
00:16:06,180 --> 00:16:11,459
radar<font color="#CCCCCC"> ax 2 which is a free competitor to</font>

368
00:16:08,819 --> 00:16:13,649
<font color="#E5E5E5">Ida Pro you can load</font><font color="#CCCCCC"> it with this</font>

369
00:16:11,459 --> 00:16:16,018
command<font color="#E5E5E5"> line just telling it that it's</font>

370
00:16:13,649 --> 00:16:17,939
armed that it begins at a particular

371
00:16:16,019 --> 00:16:20,910
address<font color="#E5E5E5"> that at</font><font color="#CCCCCC"> 16-bit mode and that</font>

372
00:16:17,939 --> 00:16:22,259
<font color="#E5E5E5">this is the</font><font color="#CCCCCC"> image</font><font color="#E5E5E5"> and then you begin to</font>

373
00:16:20,910 --> 00:16:26,249
<font color="#E5E5E5">reverse</font><font color="#CCCCCC"> engineer what the individual</font>

374
00:16:22,259 --> 00:16:28,889
functions<font color="#E5E5E5"> do now on when</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> reverse</font>

375
00:16:26,249 --> 00:16:30,660
<font color="#E5E5E5">engineering PC software you have</font><font color="#CCCCCC"> Clues</font>

376
00:16:28,889 --> 00:16:33,059
such as system calls so you can look<font color="#E5E5E5"> at</font>

377
00:16:30,660 --> 00:16:35,610
anything that<font color="#E5E5E5"> calls the right system</font>

378
00:16:33,059 --> 00:16:37,709
call<font color="#CCCCCC"> that has to involve</font><font color="#E5E5E5"> i/o you can</font>

379
00:16:35,610 --> 00:16:40,050
also look at<font color="#E5E5E5"> shared libraries so if it's</font>

380
00:16:37,709 --> 00:16:42,329
calling printf<font color="#CCCCCC"> you know that it's going</font>

381
00:16:40,050 --> 00:16:43,889
<font color="#E5E5E5">to print something to the screen</font><font color="#CCCCCC"> you can</font>

382
00:16:42,329 --> 00:16:45,420
then<font color="#E5E5E5"> look for error messages in order</font><font color="#CCCCCC"> to</font>

383
00:16:43,889 --> 00:16:46,800
<font color="#CCCCCC">figure</font><font color="#E5E5E5"> out what</font><font color="#CCCCCC"> particular functions do</font>

384
00:16:45,420 --> 00:16:48,899
and work your<font color="#E5E5E5"> way backwards from that</font>

385
00:16:46,800 --> 00:16:52,128
we're<font color="#E5E5E5"> done an embedded system you can't</font>

386
00:16:48,899 --> 00:16:54,180
do<font color="#E5E5E5"> that because there are</font><font color="#CCCCCC"> no symbols</font>

387
00:16:52,129 --> 00:16:56,220
<font color="#E5E5E5">distributed in the product everything is</font>

388
00:16:54,180 --> 00:16:57,809
perfectly statically linked and there

389
00:16:56,220 --> 00:17:00,899
aren't<font color="#E5E5E5"> any system calls because there is</font>

390
00:16:57,809 --> 00:17:02,550
no operating<font color="#E5E5E5"> system so what you do</font>

391
00:17:00,899 --> 00:17:04,799
instead<font color="#E5E5E5"> is</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> realize that</font><font color="#CCCCCC"> each</font>

392
00:17:02,550 --> 00:17:06,990
register has<font color="#E5E5E5"> a documented address for</font>

393
00:17:04,799 --> 00:17:09,480
example<font color="#CCCCCC"> I'm interested in the code</font><font color="#E5E5E5"> that</font>

394
00:17:06,990 --> 00:17:11,760
reads and<font color="#E5E5E5"> writes the flash memory I know</font>

395
00:17:09,480 --> 00:17:16,130
that the flash controller begins at<font color="#CCCCCC"> four</font>

396
00:17:11,760 --> 00:17:20,398
<font color="#CCCCCC">zero zero two three C</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> zero and that</font>

397
00:17:16,130 --> 00:17:22,020
at<font color="#CCCCCC"> three C 15 you</font><font color="#E5E5E5"> have the actual</font>

398
00:17:20,398 --> 00:17:23,458
protection register that needs a

399
00:17:22,020 --> 00:17:25,889
password written<font color="#E5E5E5"> into</font><font color="#CCCCCC"> it in</font><font color="#E5E5E5"> order to</font>

400
00:17:23,459 --> 00:17:27,600
<font color="#E5E5E5">unlock flash for a right so if I look</font>

401
00:17:25,890 --> 00:17:30,480
for any accesses to<font color="#E5E5E5"> those two addresses</font>

402
00:17:27,599 --> 00:17:32,580
<font color="#CCCCCC">I can find the code</font><font color="#E5E5E5"> that unlocks flash</font>

403
00:17:30,480 --> 00:17:34,409
memory<font color="#E5E5E5"> before writing it</font><font color="#CCCCCC"> and in this way</font>

404
00:17:32,580 --> 00:17:37,830
I can<font color="#E5E5E5"> identify the code that rewrites</font>

405
00:17:34,409 --> 00:17:40,809
the<font color="#E5E5E5"> chips on memory</font><font color="#CCCCCC"> similar addresses</font>

406
00:17:37,830 --> 00:17:44,320
exist for every serial port for every

407
00:17:40,809 --> 00:17:46,029
<font color="#CCCCCC">I owe address of every kind</font><font color="#E5E5E5"> also for</font>

408
00:17:44,320 --> 00:17:48,580
clocks<font color="#E5E5E5"> so you can tell when the thing is</font>

409
00:17:46,029 --> 00:17:50,649
<font color="#E5E5E5">going faster or</font><font color="#CCCCCC"> slower it might speed up</font>

410
00:17:48,580 --> 00:17:52,600
in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do the audio codec</font>

411
00:17:50,649 --> 00:17:54,399
conversion and then slow down<font color="#E5E5E5"> to save</font>

412
00:17:52,600 --> 00:17:57,820
<font color="#E5E5E5">power when it's only idling and</font>

413
00:17:54,399 --> 00:17:59,469
<font color="#E5E5E5">listening and by searching</font><font color="#CCCCCC"> for these</font>

414
00:17:57,820 --> 00:18:01,360
addresses you can<font color="#E5E5E5"> find like the the</font>

415
00:17:59,470 --> 00:18:04,450
functions<font color="#CCCCCC"> that matter</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> also look</font>

416
00:18:01,360 --> 00:18:07,029
for<font color="#E5E5E5"> unique masks so the cortex m3 has</font>

417
00:18:04,450 --> 00:18:09,159
32-bit wide registers but<font color="#E5E5E5"> the DMR</font>

418
00:18:07,029 --> 00:18:12,759
networking protocol has 24 bit wide

419
00:18:09,159 --> 00:18:16,600
addresses<font color="#E5E5E5"> I think of it as like</font><font color="#CCCCCC"> B block</font>

420
00:18:12,759 --> 00:18:19,389
dedicated to the protocol<font color="#E5E5E5"> so there's</font>

421
00:18:16,600 --> 00:18:23,740
this mask<font color="#E5E5E5"> of</font><font color="#CCCCCC"> 0 0 followed by a bunch of</font>

422
00:18:19,389 --> 00:18:25,979
F's<font color="#CCCCCC"> that gets</font><font color="#E5E5E5"> applied to any</font><font color="#CCCCCC"> to any</font>

423
00:18:23,740 --> 00:18:29,019
32-bit value that's read that contains a

424
00:18:25,980 --> 00:18:31,059
<font color="#E5E5E5">24-bit</font><font color="#CCCCCC"> address</font><font color="#E5E5E5"> and if you search</font><font color="#CCCCCC"> for any</font>

425
00:18:29,019 --> 00:18:35,529
<font color="#CCCCCC">function that</font><font color="#E5E5E5"> contains that mask it's</font>

426
00:18:31,059 --> 00:18:37,090
related to<font color="#E5E5E5"> the DMR networking code so</font>

427
00:18:35,529 --> 00:18:40,179
that<font color="#E5E5E5"> lets you sort of separate like all</font>

428
00:18:37,090 --> 00:18:42,720
of the flash<font color="#CCCCCC"> io code from</font><font color="#E5E5E5"> all of the</font>

429
00:18:40,179 --> 00:18:45,999
serial port<font color="#E5E5E5"> io code from all of the</font>

430
00:18:42,720 --> 00:18:47,889
networking<font color="#E5E5E5"> code you then need to find</font>

431
00:18:45,999 --> 00:18:50,549
<font color="#E5E5E5">the audio codec code that actually</font>

432
00:18:47,889 --> 00:18:54,699
compresses and decompresses the<font color="#E5E5E5"> sound so</font>

433
00:18:50,549 --> 00:18:56,950
<font color="#E5E5E5">DMR audio uses the</font><font color="#CCCCCC"> mb plus 2 codec and</font>

434
00:18:54,700 --> 00:18:59,679
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ambi functions use shorts they use</font>

435
00:18:56,950 --> 00:19:02,649
16-bit values even<font color="#E5E5E5"> though the registers</font>

436
00:18:59,679 --> 00:19:05,710
<font color="#E5E5E5">are 32 bits wide</font><font color="#CCCCCC"> and they</font><font color="#E5E5E5"> don't do any</font>

437
00:19:02,649 --> 00:19:07,149
<font color="#E5E5E5">of the bit striping which is a fancy</font>

438
00:19:05,710 --> 00:19:09,340
performance hack that<font color="#E5E5E5"> they could have</font>

439
00:19:07,149 --> 00:19:11,789
<font color="#E5E5E5">used that this platform supports but</font>

440
00:19:09,340 --> 00:19:15,428
that does<font color="#E5E5E5"> not exist in normal</font><font color="#CCCCCC"> C code</font><font color="#E5E5E5"> and</font>

441
00:19:11,789 --> 00:19:17,860
so I dumped all<font color="#CCCCCC"> of the ram out over USB</font>

442
00:19:15,429 --> 00:19:20,710
and then I searched<font color="#E5E5E5"> for large regions</font>

443
00:19:17,860 --> 00:19:24,758
<font color="#E5E5E5">that contained only zero zero zero zero</font>

444
00:19:20,710 --> 00:19:26,980
<font color="#CCCCCC">or zero zero zero one and that gave me</font>

445
00:19:24,759 --> 00:19:29,529
<font color="#CCCCCC">the buffers for all of the audio codec</font>

446
00:19:26,980 --> 00:19:32,200
work and then by finding every function

447
00:19:29,529 --> 00:19:34,600
<font color="#CCCCCC">that accessed those addresses I was able</font>

448
00:19:32,200 --> 00:19:37,600
to identify<font color="#CCCCCC"> the audio codec functions</font>

449
00:19:34,600 --> 00:19:41,259
themselves<font color="#E5E5E5"> later on I'll show you how to</font>

450
00:19:37,600 --> 00:19:43,029
run those<font color="#CCCCCC"> in Linux</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> all of the code</font>

451
00:19:41,259 --> 00:19:45,039
<font color="#CCCCCC">that the targets</font><font color="#E5E5E5"> these buffers is the</font>

452
00:19:43,029 --> 00:19:47,710
audio codec there are no false positives

453
00:19:45,039 --> 00:19:49,840
in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> which was particularly</font><font color="#E5E5E5"> nice when</font>

454
00:19:47,710 --> 00:19:51,360
<font color="#E5E5E5">reversing something that was not yet</font>

455
00:19:49,840 --> 00:19:54,389
<font color="#E5E5E5">running in an</font><font color="#CCCCCC"> emulator</font>

456
00:19:51,360 --> 00:19:58,500
now<font color="#CCCCCC"> I also need</font><font color="#E5E5E5"> to reverse engineer the</font>

457
00:19:54,390 --> 00:20:00,030
USB<font color="#E5E5E5"> stock because having a cable</font>

458
00:19:58,500 --> 00:20:01,980
connected<font color="#CCCCCC"> to this device isn't very</font>

459
00:20:00,030 --> 00:20:04,800
useful until I can<font color="#CCCCCC"> actually give it new</font>

460
00:20:01,980 --> 00:20:08,340
commands and perhaps<font color="#CCCCCC"> modify the old</font>

461
00:20:04,800 --> 00:20:09,870
commands so<font color="#CCCCCC"> radar ax to</font><font color="#E5E5E5"> an Ida Pro can't</font>

462
00:20:08,340 --> 00:20:12,090
automatically<font color="#E5E5E5"> find these functions</font>

463
00:20:09,870 --> 00:20:15,179
because they're never called directly as

464
00:20:12,090 --> 00:20:17,879
functions instead<font color="#CCCCCC"> they're loaded into a</font>

465
00:20:15,180 --> 00:20:22,260
table of function pointers<font color="#E5E5E5"> which get</font>

466
00:20:17,880 --> 00:20:24,720
called by a<font color="#CCCCCC"> USB event handler</font><font color="#E5E5E5"> so I</font>

467
00:20:22,260 --> 00:20:27,420
search<font color="#CCCCCC"> RAM for pointers to flash</font><font color="#E5E5E5"> and</font>

468
00:20:24,720 --> 00:20:31,200
<font color="#CCCCCC">there aren't</font><font color="#E5E5E5"> that many of them then I</font>

469
00:20:27,420 --> 00:20:34,350
find the function in that array that<font color="#CCCCCC"> has</font>

470
00:20:31,200 --> 00:20:36,360
lots of<font color="#CCCCCC"> one-bite comparisons</font><font color="#E5E5E5"> because the</font>

471
00:20:34,350 --> 00:20:39,000
protocol has only a single<font color="#E5E5E5"> byte for the</font>

472
00:20:36,360 --> 00:20:40,860
command field and then<font color="#CCCCCC"> I'd look to see</font>

473
00:20:39,000 --> 00:20:42,960
that<font color="#CCCCCC"> those one byte functions are the</font>

474
00:20:40,860 --> 00:20:45,240
same<font color="#CCCCCC"> as the known commands</font><font color="#E5E5E5"> in my case</font>

475
00:20:42,960 --> 00:20:48,360
<font color="#E5E5E5">two one is a read</font><font color="#CCCCCC"> four one is a write a</font>

476
00:20:45,240 --> 00:20:50,760
two is an erase nine one is unique to

477
00:20:48,360 --> 00:20:52,770
this protocol by finding all of those

478
00:20:50,760 --> 00:20:54,660
I'm able to<font color="#CCCCCC"> then</font><font color="#E5E5E5"> know that</font><font color="#CCCCCC"> I've got</font><font color="#E5E5E5"> the</font>

479
00:20:52,770 --> 00:20:56,910
<font color="#CCCCCC">right handler function which sure enough</font>

480
00:20:54,660 --> 00:21:01,980
pops up<font color="#E5E5E5"> accessing the right regions and</font>

481
00:20:56,910 --> 00:21:04,470
then I'm able to to hook them by

482
00:21:01,980 --> 00:21:06,240
<font color="#E5E5E5">rewriting the function calls for the</font>

483
00:21:04,470 --> 00:21:08,640
ones<font color="#E5E5E5"> that are in RAM the</font><font color="#CCCCCC"> runtime</font>

484
00:21:06,240 --> 00:21:11,190
function pointer is like the USB stack<font color="#CCCCCC"> I</font>

485
00:21:08,640 --> 00:21:13,380
just boot the regular application and

486
00:21:11,190 --> 00:21:16,170
then in some other function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> happens</font>

487
00:21:13,380 --> 00:21:17,880
<font color="#CCCCCC">early on that I've hooked I then rewrite</font>

488
00:21:16,170 --> 00:21:20,400
the pointers to point at my handler

489
00:21:17,880 --> 00:21:23,490
instead of the initial handler in this

490
00:21:20,400 --> 00:21:25,650
way all<font color="#CCCCCC"> of the calls get redirected my</font>

491
00:21:23,490 --> 00:21:27,990
function handler sees if it's a the<font color="#CCCCCC"> a</font>

492
00:21:25,650 --> 00:21:30,180
USB command that<font color="#E5E5E5"> I want overload it and</font>

493
00:21:27,990 --> 00:21:32,670
then it runs<font color="#E5E5E5"> my version or if</font><font color="#CCCCCC"> I don't</font>

494
00:21:30,180 --> 00:21:34,530
<font color="#CCCCCC">want</font><font color="#E5E5E5"> it overloaded it hands control back</font>

495
00:21:32,670 --> 00:21:36,570
<font color="#CCCCCC">to the original function</font><font color="#E5E5E5"> which is</font>

496
00:21:34,530 --> 00:21:39,030
running<font color="#E5E5E5"> a few clock cycles late but is</font>

497
00:21:36,570 --> 00:21:41,010
<font color="#CCCCCC">otherwise unchanged there are also</font>

498
00:21:39,030 --> 00:21:43,760
branch<font color="#E5E5E5"> and</font><font color="#CCCCCC"> link instructions which are</font>

499
00:21:41,010 --> 00:21:46,770
inside of the thumb instruction<font color="#E5E5E5"> set</font>

500
00:21:43,760 --> 00:21:49,740
these are composed of<font color="#CCCCCC"> two instructions</font>

501
00:21:46,770 --> 00:21:52,050
in a row but<font color="#E5E5E5"> they can be rewritten</font><font color="#CCCCCC"> to</font>

502
00:21:49,740 --> 00:21:54,150
point to any<font color="#E5E5E5"> other</font><font color="#CCCCCC"> location that</font><font color="#E5E5E5"> I like</font>

503
00:21:52,050 --> 00:21:56,100
predictably<font color="#E5E5E5"> so I just wrote</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit</font>

504
00:21:54,150 --> 00:21:59,160
of C code and<font color="#E5E5E5"> a little bit of</font><font color="#CCCCCC"> Python</font>

505
00:21:56,100 --> 00:22:01,290
code<font color="#CCCCCC"> that produces</font><font color="#E5E5E5"> these branch and</font><font color="#CCCCCC"> link</font>

506
00:21:59,160 --> 00:22:04,560
instructions and<font color="#E5E5E5"> use that to change the</font>

507
00:22:01,290 --> 00:22:05,190
binary in place I'm using<font color="#E5E5E5"> Ida Pro and</font>

508
00:22:04,560 --> 00:22:07,860
radar to

509
00:22:05,190 --> 00:22:14,310
my analysis but not for my patching<font color="#E5E5E5"> I do</font>

510
00:22:07,860 --> 00:22:17,280
all of that<font color="#E5E5E5"> in C</font><font color="#CCCCCC"> or Python you also need</font>

511
00:22:14,310 --> 00:22:20,389
to carve room for your own code<font color="#E5E5E5"> because</font>

512
00:22:17,280 --> 00:22:22,590
you know<font color="#E5E5E5"> this radio has one megabyte and</font>

513
00:22:20,390 --> 00:22:25,230
the thing about<font color="#E5E5E5"> programmers is that they</font>

514
00:22:22,590 --> 00:22:27,929
always grow their programs to consume

515
00:22:25,230 --> 00:22:30,270
<font color="#E5E5E5">all available</font><font color="#CCCCCC"> resources in this case</font>

516
00:22:27,930 --> 00:22:32,970
<font color="#E5E5E5">they've almost exactly filled their one</font>

517
00:22:30,270 --> 00:22:35,460
megabyte of<font color="#E5E5E5"> space</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> China</font><font color="#CCCCCC"> is number</font>

518
00:22:32,970 --> 00:22:36,060
<font color="#E5E5E5">one and their alphabet is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> largest in</font>

519
00:22:35,460 --> 00:22:38,580
the<font color="#CCCCCC"> world</font>

520
00:22:36,060 --> 00:22:40,800
so they actually<font color="#E5E5E5"> spend 1/5 of all</font>

521
00:22:38,580 --> 00:22:43,949
available<font color="#E5E5E5"> internal flash memory on the</font>

522
00:22:40,800 --> 00:22:46,830
Chinese font<font color="#E5E5E5"> and once you've identified</font>

523
00:22:43,950 --> 00:22:49,280
this region you<font color="#CCCCCC"> can safely overwrite it</font>

524
00:22:46,830 --> 00:22:53,070
as long as<font color="#CCCCCC"> you are using the Latin font</font>

525
00:22:49,280 --> 00:22:55,500
so we retargeted the compiler<font color="#E5E5E5"> to</font><font color="#CCCCCC"> throw</font>

526
00:22:53,070 --> 00:22:57,570
our code in this 200<font color="#E5E5E5"> kilobyte region</font>

527
00:22:55,500 --> 00:22:59,430
blowing away<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original font</font><font color="#E5E5E5"> if you</font>

528
00:22:57,570 --> 00:23:01,649
happen to receive a<font color="#CCCCCC"> text in Chinese</font>

529
00:22:59,430 --> 00:23:03,780
<font color="#E5E5E5">you'll actually see little bits of the</font>

530
00:23:01,650 --> 00:23:07,890
firmware<font color="#E5E5E5"> image on your</font><font color="#CCCCCC"> screen in lieu of</font>

531
00:23:03,780 --> 00:23:11,690
the<font color="#E5E5E5"> Chinese glyphs because</font><font color="#CCCCCC"> China is</font>

532
00:23:07,890 --> 00:23:15,690
<font color="#E5E5E5">number one and mandiant is number two</font>

533
00:23:11,690 --> 00:23:20,520
now you have<font color="#E5E5E5"> you also need</font><font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> because</font>

534
00:23:15,690 --> 00:23:22,580
your code needs to politely coexist with

535
00:23:20,520 --> 00:23:25,110
the original code you're adding new

536
00:23:22,580 --> 00:23:28,889
<font color="#E5E5E5">features but you're not really</font><font color="#CCCCCC"> ripping</font>

537
00:23:25,110 --> 00:23:30,810
out much of<font color="#CCCCCC"> the old ones Ram has a bit</font>

538
00:23:28,890 --> 00:23:33,960
<font color="#E5E5E5">more left</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> but you need to find it</font>

539
00:23:30,810 --> 00:23:36,389
so at this<font color="#E5E5E5"> stage</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> sort of guess</font>

540
00:23:33,960 --> 00:23:38,370
at a region<font color="#CCCCCC"> of</font><font color="#E5E5E5"> RAM and just hope</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it</font>

541
00:23:36,390 --> 00:23:42,780
won't crash if you use very<font color="#CCCCCC"> little</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> it</font>

542
00:23:38,370 --> 00:23:47,580
and then you you fill all<font color="#CCCCCC"> of RAM with</font>

543
00:23:42,780 --> 00:23:50,639
dead beef before<font color="#E5E5E5"> you begin running your</font>

544
00:23:47,580 --> 00:23:51,990
target application then after the

545
00:23:50,640 --> 00:23:54,000
application<font color="#CCCCCC"> has been running for a while</font>

546
00:23:51,990 --> 00:23:56,340
<font color="#CCCCCC">you dump</font><font color="#E5E5E5"> all of it out and you look for</font>

547
00:23:54,000 --> 00:23:59,520
<font color="#E5E5E5">the largest contiguous region of dead</font>

548
00:23:56,340 --> 00:24:04,110
beef and that tells you where the

549
00:23:59,520 --> 00:24:07,550
available<font color="#CCCCCC"> Ram is</font><font color="#E5E5E5"> in my case</font><font color="#CCCCCC"> I found 20</font>

550
00:24:04,110 --> 00:24:11,610
<font color="#E5E5E5">kilobytes of free tightly coupled</font><font color="#CCCCCC"> Ram at</font>

551
00:24:07,550 --> 00:24:13,539
<font color="#E5E5E5">1000 B thousand this tightly coupled Ram</font>

552
00:24:11,610 --> 00:24:18,699
cannot be used<font color="#E5E5E5"> as</font>

553
00:24:13,539 --> 00:24:20,139
executable code so you<font color="#CCCCCC"> have to if you</font>

554
00:24:18,700 --> 00:24:21,759
<font color="#CCCCCC">want to run</font><font color="#E5E5E5"> any code from</font><font color="#CCCCCC"> RAM you have</font>

555
00:24:20,139 --> 00:24:23,769
to load it<font color="#CCCCCC"> in the main ram there is a</font>

556
00:24:21,759 --> 00:24:25,749
smaller region<font color="#E5E5E5"> of about three</font><font color="#CCCCCC"> or four</font>

557
00:24:23,769 --> 00:24:27,369
kilobytes in main ram that can be

558
00:24:25,749 --> 00:24:27,879
separately used as a different linked

559
00:24:27,369 --> 00:24:29,799
region

560
00:24:27,879 --> 00:24:30,939
there's no virtual memory here so

561
00:24:29,799 --> 00:24:33,940
everything<font color="#CCCCCC"> is stuck</font><font color="#E5E5E5"> at a fixed address</font>

562
00:24:30,940 --> 00:24:35,950
<font color="#E5E5E5">but this is</font><font color="#CCCCCC"> actually helpful</font><font color="#E5E5E5"> to you as a</font>

563
00:24:33,940 --> 00:24:38,289
reverse engineer because<font color="#E5E5E5"> things don't</font>

564
00:24:35,950 --> 00:24:39,879
move<font color="#CCCCCC"> around beneath</font><font color="#E5E5E5"> your feet</font><font color="#CCCCCC"> global</font>

565
00:24:38,289 --> 00:24:42,960
variable will always be at the same

566
00:24:39,879 --> 00:24:46,809
<font color="#E5E5E5">position for the same firmware revision</font>

567
00:24:42,960 --> 00:24:50,710
<font color="#E5E5E5">you also want to port symbols so you</font>

568
00:24:46,809 --> 00:24:52,059
have function calls in say<font color="#CCCCCC"> amd64</font><font color="#E5E5E5"> so</font>

569
00:24:50,710 --> 00:24:53,950
let's say<font color="#E5E5E5"> that you've got this function</font>

570
00:24:52,059 --> 00:24:56,710
and<font color="#E5E5E5"> you need to know what other</font>

571
00:24:53,950 --> 00:24:59,109
functions are the<font color="#E5E5E5"> same thing you know</font>

572
00:24:56,710 --> 00:25:02,379
<font color="#E5E5E5">you know do these equal each other by</font>

573
00:24:59,109 --> 00:25:06,340
the machine code unfortunately you have

574
00:25:02,379 --> 00:25:08,559
lots of moving<font color="#CCCCCC"> media instructions</font><font color="#E5E5E5"> so the</font>

575
00:25:06,340 --> 00:25:10,449
you need a full disassembler in order to

576
00:25:08,559 --> 00:25:16,029
know which bytes<font color="#E5E5E5"> in the left</font><font color="#CCCCCC"> column you</font>

577
00:25:10,450 --> 00:25:17,320
<font color="#E5E5E5">can ignore in arm the immediate values</font>

578
00:25:16,029 --> 00:25:20,919
<font color="#E5E5E5">aren't as useful</font>

579
00:25:17,320 --> 00:25:23,379
so they're<font color="#E5E5E5"> not used as often</font><font color="#CCCCCC"> in this</font>

580
00:25:20,919 --> 00:25:27,599
case those<font color="#E5E5E5"> three lines at the bottom</font><font color="#CCCCCC"> are</font>

581
00:25:23,379 --> 00:25:31,299
what's<font color="#E5E5E5"> called a constant pool those are</font>

582
00:25:27,599 --> 00:25:33,609
data addresses that<font color="#E5E5E5"> are being loaded or</font>

583
00:25:31,299 --> 00:25:36,039
values or function pointers<font color="#E5E5E5"> be all sorts</font>

584
00:25:33,609 --> 00:25:38,289
of things<font color="#E5E5E5"> but the special thing</font><font color="#CCCCCC"> about</font>

585
00:25:36,039 --> 00:25:40,570
them is<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> compiler actually</font>

586
00:25:38,289 --> 00:25:42,489
pushes them after the return instruction

587
00:25:40,570 --> 00:25:44,590
<font color="#E5E5E5">so they're not inside</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> function</font>

588
00:25:42,489 --> 00:25:45,879
itself<font color="#CCCCCC"> which means</font><font color="#E5E5E5"> that you don't have</font>

589
00:25:44,590 --> 00:25:49,928
<font color="#E5E5E5">to worry about them when you're</font>

590
00:25:45,879 --> 00:25:51,849
comparing<font color="#E5E5E5"> two functions for</font><font color="#CCCCCC"> equality now</font>

591
00:25:49,929 --> 00:25:54,039
inside<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> function you have a branch</font>

592
00:25:51,849 --> 00:25:55,840
<font color="#E5E5E5">and</font><font color="#CCCCCC"> link</font><font color="#E5E5E5"> statement which is actually</font>

593
00:25:54,039 --> 00:25:58,658
used to do the function call from one

594
00:25:55,840 --> 00:26:02,379
and from<font color="#E5E5E5"> one function</font><font color="#CCCCCC"> to the other those</font>

595
00:25:58,659 --> 00:26:05,619
always<font color="#E5E5E5"> have</font><font color="#CCCCCC"> EB as their most significant</font>

596
00:26:02,379 --> 00:26:08,379
byte<font color="#E5E5E5"> in 32-bit instructions and in thumb</font>

597
00:26:05,619 --> 00:26:11,259
<font color="#CCCCCC">they</font><font color="#E5E5E5"> always begin</font><font color="#CCCCCC"> with an F so you</font><font color="#E5E5E5"> can</font>

598
00:26:08,379 --> 00:26:13,570
<font color="#E5E5E5">just throw away any half any half word</font>

599
00:26:11,259 --> 00:26:16,059
that matches where they both begin with

600
00:26:13,570 --> 00:26:17,678
an F but the other bits<font color="#E5E5E5"> are different</font>

601
00:26:16,059 --> 00:26:19,450
you just throw it away<font color="#E5E5E5"> and you pretend</font>

602
00:26:17,679 --> 00:26:21,519
<font color="#CCCCCC">that they</font><font color="#E5E5E5"> were equal and this allows you</font>

603
00:26:19,450 --> 00:26:25,450
<font color="#E5E5E5">to compare two functions for</font><font color="#CCCCCC"> equality</font>

604
00:26:21,519 --> 00:26:26,659
<font color="#CCCCCC">without a proper disassembler we use it</font>

605
00:26:25,450 --> 00:26:28,159
in<font color="#CCCCCC"> production and</font><font color="#E5E5E5"> it's</font>

606
00:26:26,659 --> 00:26:31,489
just this teeny little do-while loop

607
00:26:28,159 --> 00:26:32,899
here with nothing more<font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> this</font>

608
00:26:31,489 --> 00:26:34,429
function<font color="#E5E5E5"> takes a source</font><font color="#CCCCCC"> address and</font><font color="#E5E5E5"> a</font>

609
00:26:32,899 --> 00:26:38,090
<font color="#CCCCCC">destination address it just tells you if</font>

610
00:26:34,429 --> 00:26:41,899
the<font color="#E5E5E5"> functions are how similar they are</font>

611
00:26:38,090 --> 00:26:46,428
based upon<font color="#E5E5E5"> a score now you also want</font><font color="#CCCCCC"> to</font>

612
00:26:41,899 --> 00:26:48,559
do from our emulation<font color="#E5E5E5"> because when you</font>

613
00:26:46,429 --> 00:26:50,359
have a firmware image and you're

614
00:26:48,559 --> 00:26:53,029
<font color="#E5E5E5">changing it you need test cases</font><font color="#CCCCCC"> or you</font>

615
00:26:50,359 --> 00:26:54,619
<font color="#CCCCCC">will break</font><font color="#E5E5E5"> your features</font><font color="#CCCCCC"> at the same</font>

616
00:26:53,029 --> 00:26:56,539
time you<font color="#CCCCCC"> don't want to have to</font><font color="#E5E5E5"> run it in</font>

617
00:26:54,619 --> 00:26:59,228
the<font color="#E5E5E5"> physical</font><font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> because that</font>

618
00:26:56,539 --> 00:27:01,970
requires<font color="#E5E5E5"> that a human being sit down</font>

619
00:26:59,229 --> 00:27:04,009
<font color="#E5E5E5">take</font><font color="#CCCCCC"> a laptop take a radio plug the</font>

620
00:27:01,970 --> 00:27:05,210
cable in install the firmware<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

621
00:27:04,009 --> 00:27:07,639
repeat<font color="#CCCCCC"> it for each of the other three</font>

622
00:27:05,210 --> 00:27:11,929
revisions<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to find out at</font><font color="#CCCCCC"> the</font>

623
00:27:07,639 --> 00:27:14,119
<font color="#CCCCCC">end that a feature broke a month ago so</font>

624
00:27:11,929 --> 00:27:16,639
what you can do is you can just<font color="#E5E5E5"> relink</font>

625
00:27:14,119 --> 00:27:19,189
it to be a regular<font color="#CCCCCC"> UNIX application in</font>

626
00:27:16,639 --> 00:27:23,209
this<font color="#CCCCCC"> case I've made an executable</font>

627
00:27:19,190 --> 00:27:26,179
program<font color="#CCCCCC"> called</font><font color="#E5E5E5"> md380</font><font color="#CCCCCC"> emu</font><font color="#E5E5E5"> which is the</font>

628
00:27:23,210 --> 00:27:28,879
md380 radio firmware wrapped<font color="#E5E5E5"> into an arm</font>

629
00:27:26,179 --> 00:27:34,129
<font color="#CCCCCC">linux executable</font><font color="#E5E5E5"> running through</font><font color="#CCCCCC"> qmo on</font>

630
00:27:28,879 --> 00:27:36,619
my<font color="#CCCCCC"> AMD 64 laptop there are two ways to</font>

631
00:27:34,129 --> 00:27:39,439
<font color="#E5E5E5">do this you</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> nmap which</font>

632
00:27:36,619 --> 00:27:42,499
conveniently allows you to load a file

633
00:27:39,440 --> 00:27:44,210
<font color="#E5E5E5">into</font><font color="#CCCCCC"> Ram at any particular</font><font color="#E5E5E5"> address so</font>

634
00:27:42,499 --> 00:27:46,820
you can<font color="#E5E5E5"> tell</font><font color="#CCCCCC"> M map that you really want</font>

635
00:27:44,210 --> 00:27:48,590
the firmware loaded into Ram where the

636
00:27:46,820 --> 00:27:51,710
firmware would normally be in<font color="#E5E5E5"> the radio</font>

637
00:27:48,590 --> 00:27:54,949
<font color="#E5E5E5">and you want it to be from the firmware</font>

638
00:27:51,710 --> 00:27:57,859
image and you want<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> be executable</font>

639
00:27:54,950 --> 00:28:01,309
and writable and<font color="#E5E5E5"> then it will load it</font>

640
00:27:57,859 --> 00:28:03,139
<font color="#CCCCCC">into memory at the right location</font><font color="#E5E5E5"> you</font>

641
00:28:01,309 --> 00:28:04,668
are<font color="#CCCCCC"> in an</font><font color="#E5E5E5"> arm Linux environment so you</font>

642
00:28:03,139 --> 00:28:06,949
can<font color="#E5E5E5"> natively run all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the functions</font>

643
00:28:04,669 --> 00:28:08,509
you<font color="#CCCCCC"> can just take the address</font><font color="#E5E5E5"> cast as a</font>

644
00:28:06,950 --> 00:28:11,599
function<font color="#CCCCCC"> pointer and call it and it</font><font color="#E5E5E5"> will</font>

645
00:28:08,509 --> 00:28:15,499
<font color="#E5E5E5">work the other way to do it is through</font>

646
00:28:11,599 --> 00:28:19,070
obj copy you can produce an elf<font color="#CCCCCC"> 0 file</font>

647
00:28:15,499 --> 00:28:21,289
and this dot o file contains<font color="#CCCCCC"> the</font>

648
00:28:19,070 --> 00:28:24,259
firmware or contains a live<font color="#CCCCCC"> Ram image</font>

649
00:28:21,289 --> 00:28:25,908
with the appropriate section name in

650
00:28:24,259 --> 00:28:28,789
this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> I call one of them firmware</font>

651
00:28:25,909 --> 00:28:31,369
<font color="#E5E5E5">and the I call the other SRAM and then I</font>

652
00:28:28,789 --> 00:28:33,259
use<font color="#E5E5E5"> my C compiler to link them together</font>

653
00:28:31,369 --> 00:28:35,539
<font color="#E5E5E5">and I tell the compiler that the</font>

654
00:28:33,259 --> 00:28:38,690
firmware<font color="#E5E5E5"> section needs to be</font><font color="#CCCCCC"> where the</font>

655
00:28:35,539 --> 00:28:40,480
firmware ought to be and also that the

656
00:28:38,690 --> 00:28:44,320
SRAM section needs to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> where the</font>

657
00:28:40,480 --> 00:28:48,850
<font color="#CCCCCC">grama to</font><font color="#E5E5E5"> be this produces of functioning</font>

658
00:28:44,320 --> 00:28:52,870
<font color="#CCCCCC">armed</font><font color="#E5E5E5"> Linux executable and in Linux</font><font color="#CCCCCC"> if</font>

659
00:28:48,850 --> 00:28:54,820
you install qmo user or qmo<font color="#CCCCCC"> FMT</font><font color="#E5E5E5"> Linux</font>

660
00:28:52,870 --> 00:28:56,168
will automatically recognize<font color="#E5E5E5"> that the</font>

661
00:28:54,820 --> 00:28:58,570
thing<font color="#E5E5E5"> you're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run is for</font><font color="#CCCCCC"> a</font>

662
00:28:56,169 --> 00:29:00,400
foreign architecture and call the

663
00:28:58,570 --> 00:29:02,290
appropriate handler<font color="#CCCCCC"> so you can run a</font>

664
00:29:00,400 --> 00:29:04,299
Windows<font color="#CCCCCC"> Exe file from the command line</font>

665
00:29:02,290 --> 00:29:07,629
<font color="#E5E5E5">and wine will automatically emulate</font>

666
00:29:04,299 --> 00:29:10,929
<font color="#CCCCCC">Windows or you can</font><font color="#E5E5E5"> call an armed Linux</font>

667
00:29:07,630 --> 00:29:12,850
executable from<font color="#E5E5E5"> the command line</font><font color="#CCCCCC"> and qmo</font>

668
00:29:10,929 --> 00:29:14,860
will automatically translate<font color="#E5E5E5"> it while</font>

669
00:29:12,850 --> 00:29:16,540
keeping<font color="#CCCCCC"> all the system calls intact so</font>

670
00:29:14,860 --> 00:29:18,149
<font color="#E5E5E5">it's accessing your same</font><font color="#CCCCCC"> filesystem as</font>

671
00:29:16,540 --> 00:29:20,740
the same user from<font color="#CCCCCC"> the same environment</font>

672
00:29:18,150 --> 00:29:24,130
<font color="#E5E5E5">but with armed instructions running the</font>

673
00:29:20,740 --> 00:29:28,780
firmware<font color="#E5E5E5"> and I can use this to reverse</font>

674
00:29:24,130 --> 00:29:30,190
engineer<font color="#E5E5E5"> and port my application in the</font>

675
00:29:28,780 --> 00:29:32,770
case of<font color="#E5E5E5"> this screenshot I'm actually</font>

676
00:29:30,190 --> 00:29:35,110
taking<font color="#E5E5E5"> an audio recording that</font><font color="#CCCCCC"> was taken</font>

677
00:29:32,770 --> 00:29:38,049
as raw packets<font color="#E5E5E5"> off the air with my</font>

678
00:29:35,110 --> 00:29:40,000
packet sniffer<font color="#E5E5E5"> and then I'm converting</font>

679
00:29:38,049 --> 00:29:48,460
it to a normal wave file that I<font color="#E5E5E5"> can play</font>

680
00:29:40,000 --> 00:29:50,260
<font color="#E5E5E5">on</font><font color="#CCCCCC"> my laptop I've gone through</font><font color="#E5E5E5"> this to</font>

681
00:29:48,460 --> 00:29:52,000
<font color="#CCCCCC">fit quickly but I hope that you've all</font>

682
00:29:50,260 --> 00:29:54,610
had<font color="#CCCCCC"> a good time and learn some tricks I</font>

683
00:29:52,000 --> 00:29:58,030
have<font color="#E5E5E5"> some more tricks to share which I</font>

684
00:29:54,610 --> 00:30:01,360
would prefer<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> over beers and a good</font>

685
00:29:58,030 --> 00:30:03,070
conversation in the meantime though does

686
00:30:01,360 --> 00:30:19,540
anyone have a<font color="#E5E5E5"> question that they would</font>

687
00:30:03,070 --> 00:30:21,399
like to<font color="#E5E5E5"> ask ok oh yes yes so we added so</font>

688
00:30:19,540 --> 00:30:24,790
you've got this radio<font color="#CCCCCC"> you've got a phone</font>

689
00:30:21,400 --> 00:30:29,230
<font color="#E5E5E5">book</font><font color="#CCCCCC"> for your</font><font color="#E5E5E5"> own users</font><font color="#CCCCCC"> right so I add</font>

690
00:30:24,790 --> 00:30:31,000
my buddy<font color="#CCCCCC"> Aqsa to it</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> add my buddy Alex</font>

691
00:30:29,230 --> 00:30:33,100
to it I've got all<font color="#CCCCCC"> my buddies loaded</font>

692
00:30:31,000 --> 00:30:35,530
into my<font color="#E5E5E5"> phonebook</font><font color="#CCCCCC"> but that's only</font><font color="#E5E5E5"> like</font>

693
00:30:33,100 --> 00:30:38,409
20 people when I<font color="#E5E5E5"> get a call from a</font>

694
00:30:35,530 --> 00:30:39,850
stranger<font color="#E5E5E5"> an amateur radio is very much</font>

695
00:30:38,410 --> 00:30:42,669
about<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> people that you don't</font>

696
00:30:39,850 --> 00:30:46,600
<font color="#E5E5E5">already know say I get a call</font><font color="#CCCCCC"> from Ralph</font>

697
00:30:42,669 --> 00:30:49,890
and tennessee ralph is insane<font color="#CCCCCC"> so he's</font>

698
00:30:46,600 --> 00:30:52,629
not in<font color="#CCCCCC"> my</font><font color="#E5E5E5"> phonebook he's obsessed with</font>

699
00:30:49,890 --> 00:30:53,919
like ways to use wasp spray in

700
00:30:52,630 --> 00:30:55,480
<font color="#CCCCCC">self-defense</font>

701
00:30:53,919 --> 00:30:58,049
which he<font color="#E5E5E5"> thinks is legal</font><font color="#CCCCCC"> because there</font>

702
00:30:55,480 --> 00:30:58,049
might<font color="#E5E5E5"> be a wasp</font>

703
00:30:58,830 --> 00:31:05,168
so if Ralph calls me and I don't<font color="#E5E5E5"> already</font>

704
00:31:03,220 --> 00:31:07,450
have him in<font color="#E5E5E5"> my phonebook</font><font color="#CCCCCC"> with our</font>

705
00:31:05,169 --> 00:31:11,140
firmware patches we're able to use the

706
00:31:07,450 --> 00:31:13,690
unused region of external spy flash<font color="#E5E5E5"> we</font>

707
00:31:11,140 --> 00:31:17,080
<font color="#E5E5E5">have 15 megabytes free we store the</font>

708
00:31:13,690 --> 00:31:20,559
registration logs of all<font color="#E5E5E5"> 35,000 amateur</font>

709
00:31:17,080 --> 00:31:22,570
users<font color="#E5E5E5"> of this protocol so Ralph's name</font>

710
00:31:20,559 --> 00:31:24,789
will<font color="#CCCCCC"> pop up it'll say this</font><font color="#E5E5E5"> is Ralph his</font>

711
00:31:22,570 --> 00:31:26,439
callsign will pop up his city state in

712
00:31:24,789 --> 00:31:28,629
his country<font color="#CCCCCC"> so I'll know that he's also</font>

713
00:31:26,440 --> 00:31:30,250
from Tennessee so that I can speak

714
00:31:28,630 --> 00:31:33,330
Tennessee and with him instead<font color="#CCCCCC"> of</font>

715
00:31:30,250 --> 00:31:33,330
American television English

716
00:31:33,360 --> 00:31:39,129
similarly<font color="#E5E5E5"> if if someone calls in from</font>

717
00:31:37,029 --> 00:31:42,700
here<font color="#E5E5E5"> in Croatia</font><font color="#CCCCCC"> I'll know that it's</font>

718
00:31:39,130 --> 00:31:44,919
Croatian<font color="#E5E5E5"> by the caller ID record</font><font color="#CCCCCC"> on my</font>

719
00:31:42,700 --> 00:31:46,870
<font color="#E5E5E5">screen without</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to remember that</font>

720
00:31:44,919 --> 00:31:50,140
Croatian amateur radio call signs begin

721
00:31:46,870 --> 00:31:52,719
with<font color="#CCCCCC"> 6a we also</font><font color="#E5E5E5"> added a promiscuous</font><font color="#CCCCCC"> mode</font>

722
00:31:50,140 --> 00:31:55,059
so that<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> able to listen in to</font>

723
00:31:52,720 --> 00:31:57,130
conversations for<font color="#E5E5E5"> groups that you're not</font>

724
00:31:55,059 --> 00:32:00,220
a<font color="#E5E5E5"> part of this is very handy when you're</font>

725
00:31:57,130 --> 00:32:02,110
traveling<font color="#E5E5E5"> and you need to know what</font><font color="#CCCCCC"> chat</font>

726
00:32:00,220 --> 00:32:04,720
room number<font color="#CCCCCC"> the locals use</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

727
00:32:02,110 --> 00:32:07,000
<font color="#E5E5E5">jump in and say hello we also added</font>

728
00:32:04,720 --> 00:32:09,399
<font color="#E5E5E5">promiscuous sniffing for the raw</font><font color="#CCCCCC"> packets</font>

729
00:32:07,000 --> 00:32:11,950
<font color="#E5E5E5">so that you can run a USB cable</font><font color="#CCCCCC"> from</font>

730
00:32:09,399 --> 00:32:14,860
<font color="#CCCCCC">your</font><font color="#E5E5E5"> radio to your laptop</font><font color="#CCCCCC"> and then you</font>

731
00:32:11,950 --> 00:32:18,370
can capture all of the audio and<font color="#E5E5E5"> all of</font>

732
00:32:14,860 --> 00:32:21,039
the data that<font color="#E5E5E5"> comes by to a record on</font>

733
00:32:18,370 --> 00:32:23,168
<font color="#CCCCCC">your disk</font><font color="#E5E5E5"> that you can later analyze you</font>

734
00:32:21,039 --> 00:32:24,700
can see that Ralph talks to Mike so

735
00:32:23,169 --> 00:32:27,100
maybe you<font color="#E5E5E5"> don't want to hang out with</font>

736
00:32:24,700 --> 00:32:29,250
<font color="#E5E5E5">Mike because he might spray you in</font><font color="#CCCCCC"> the</font>

737
00:32:27,100 --> 00:32:32,379
eyes with<font color="#CCCCCC"> wasp spray</font>

738
00:32:29,250 --> 00:32:36,419
I'm kidding Mike is a gentleman<font color="#CCCCCC"> but</font>

739
00:32:32,380 --> 00:32:36,419
<font color="#CCCCCC">Ralph would</font><font color="#E5E5E5"> totally do</font><font color="#CCCCCC"> that yes</font>

740
00:32:37,980 --> 00:32:43,539
so our all<font color="#E5E5E5"> of the code all of the</font>

741
00:32:41,470 --> 00:32:46,390
<font color="#E5E5E5">examples that I've shown you all</font><font color="#CCCCCC"> of this</font>

742
00:32:43,539 --> 00:32:50,919
is<font color="#E5E5E5"> open source we</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> project on</font>

743
00:32:46,390 --> 00:32:54,159
<font color="#E5E5E5">github the manufacturer is aware of this</font>

744
00:32:50,919 --> 00:32:57,370
project but politely remaining and

745
00:32:54,159 --> 00:33:00,370
different to it<font color="#E5E5E5"> so they've not accepted</font>

746
00:32:57,370 --> 00:33:03,100
any<font color="#CCCCCC"> of our patches back into the main</font>

747
00:33:00,370 --> 00:33:06,489
distribution so far as we know they are

748
00:33:03,100 --> 00:33:07,330
of<font color="#CCCCCC"> course welcome</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> it the licensing</font>

749
00:33:06,490 --> 00:33:09,970
for this project

750
00:33:07,330 --> 00:33:14,409
is that if you enjoy<font color="#CCCCCC"> the project</font><font color="#E5E5E5"> you are</font>

751
00:33:09,970 --> 00:33:17,560
required to<font color="#E5E5E5"> buy me a beer</font><font color="#CCCCCC"> it has to be</font>

752
00:33:14,410 --> 00:33:19,330
an IPA though<font color="#E5E5E5"> your license gets</font>

753
00:33:17,560 --> 00:33:23,260
<font color="#CCCCCC">cancelled if you try to make me drink a</font>

754
00:33:19,330 --> 00:33:26,260
pilsner for<font color="#CCCCCC"> a good reason</font>

755
00:33:23,260 --> 00:33:28,260
you know and then I've got to get paid

756
00:33:26,260 --> 00:33:33,640
<font color="#CCCCCC">Greyhound don't run on</font><font color="#E5E5E5"> water</font>

757
00:33:28,260 --> 00:33:35,940
any other questions great<font color="#E5E5E5"> thank you</font>

758
00:33:33,640 --> 00:33:35,940
<font color="#E5E5E5">kindly</font>

