1
00:00:04,339 --> 00:00:09,510
and everyone I am wavelength as he just

2
00:00:07,560 --> 00:00:10,950
said today's topic is hitter

3
00:00:09,510 --> 00:00:13,219
steganography we're gonna be talking

4
00:00:10,950 --> 00:00:18,378
about abusing the ipv6 headers and

5
00:00:13,219 --> 00:00:18,378
prefix delegation for data exfiltration

6
00:00:20,150 --> 00:00:25,259
all right I already first fail

7
00:00:22,260 --> 00:00:27,689
sorry there we go

8
00:00:25,260 --> 00:00:29,599
okay so before we dive in the standard

9
00:00:27,689 --> 00:00:32,009
disclaimers for every presentation apply

10
00:00:29,599 --> 00:00:35,760
especially the one about using anything

11
00:00:32,009 --> 00:00:37,469
I tell you today for illegal second

12
00:00:35,760 --> 00:00:39,510
since we have such a wide range of

13
00:00:37,469 --> 00:00:40,980
people here with different skills and go

14
00:00:39,510 --> 00:00:42,660
try and cover the whole base and give

15
00:00:40,980 --> 00:00:44,760
everybody a bit of information so we'll

16
00:00:42,660 --> 00:00:47,370
have some basic topics and some more

17
00:00:44,760 --> 00:00:48,719
advanced stuff and finally questions are

18
00:00:47,370 --> 00:00:52,949
welcome but if we can hold them to the

19
00:00:48,719 --> 00:00:54,870
end that'd be really good so it's a

20
00:00:52,949 --> 00:00:58,589
little bit about me I am a New Orleans

21
00:00:54,870 --> 00:01:01,410
area native moved here in 2012 I've worn

22
00:00:58,590 --> 00:01:03,420
many hats throughout my career been an

23
00:01:01,410 --> 00:01:05,610
IP engineer for some very large Internet

24
00:01:03,420 --> 00:01:07,640
service providers so that's how I have a

25
00:01:05,610 --> 00:01:10,140
lot of experience with IP version 6

26
00:01:07,640 --> 00:01:16,890
recently transferred over to cyber

27
00:01:10,140 --> 00:01:18,210
security so let's get started so if you

28
00:01:16,890 --> 00:01:22,380
don't know what data exfiltration is

29
00:01:18,210 --> 00:01:24,000
your like data exfil what it's basically

30
00:01:22,380 --> 00:01:25,500
just stealing information that we

31
00:01:24,000 --> 00:01:27,900
shouldn't have access to as a threat

32
00:01:25,500 --> 00:01:29,970
actor there are a couple of different

33
00:01:27,900 --> 00:01:32,640
names for it we've got data theft and

34
00:01:29,970 --> 00:01:35,450
data exportation and my favorite data

35
00:01:32,640 --> 00:01:35,450
extrusion

36
00:01:35,509 --> 00:01:40,350
there are a couple of different

37
00:01:37,259 --> 00:01:43,619
motivations for data exfiltration the

38
00:01:40,350 --> 00:01:46,289
biggest and and most popular one is the

39
00:01:43,619 --> 00:01:48,509
financial crimes these are your Equifax

40
00:01:46,290 --> 00:01:50,399
is your target data breaches these are

41
00:01:48,509 --> 00:01:53,130
geared toward getting your personal

42
00:01:50,399 --> 00:01:55,740
information to open credit in your name

43
00:01:53,130 --> 00:01:58,798
or to get medical information to commit

44
00:01:55,740 --> 00:02:00,750
Medicare and Medicaid fraud we have

45
00:01:58,799 --> 00:02:03,840
industrial and state-sponsored espionage

46
00:02:00,750 --> 00:02:05,820
this is Russia China hacking American

47
00:02:03,840 --> 00:02:08,340
interests to try and get strategic

48
00:02:05,820 --> 00:02:10,679
information military military troop

49
00:02:08,340 --> 00:02:14,360
movements technological information

50
00:02:10,679 --> 00:02:17,030
about us we have

51
00:02:14,360 --> 00:02:18,710
this is the WikiLeaks kind of thing

52
00:02:17,030 --> 00:02:21,920
where where there's a political agenda

53
00:02:18,710 --> 00:02:25,120
behind the data theft to expose it to

54
00:02:21,920 --> 00:02:26,959
the wider wider audience of the world

55
00:02:25,120 --> 00:02:28,280
and then we have a few others

56
00:02:26,960 --> 00:02:30,590
intelligence gathering these are our

57
00:02:28,280 --> 00:02:33,380
three-letter agencies the police trying

58
00:02:30,590 --> 00:02:40,100
to get information on groups like Al

59
00:02:33,380 --> 00:02:41,630
Qaeda Isis and the Taliban so data

60
00:02:40,100 --> 00:02:42,620
exfiltration is really old it's been

61
00:02:41,630 --> 00:02:44,690
around as long as there's been

62
00:02:42,620 --> 00:02:47,959
adversarial relationships between human

63
00:02:44,690 --> 00:02:50,780
beings if any of you watched old World

64
00:02:47,959 --> 00:02:51,980
War 2 films or the eighties spy movies

65
00:02:50,780 --> 00:02:54,830
where the guys are walking around with

66
00:02:51,980 --> 00:02:58,459
microfiche cameras that's these analog

67
00:02:54,830 --> 00:03:01,100
methods so either you know printing

68
00:02:58,459 --> 00:03:04,760
photocopying walking and memorizing a

69
00:03:01,100 --> 00:03:07,100
document and transcribing it these all

70
00:03:04,760 --> 00:03:09,109
require physical access to the data so

71
00:03:07,100 --> 00:03:10,670
there's a higher risk involved in doing

72
00:03:09,110 --> 00:03:13,160
it you're gonna either gonna know you

73
00:03:10,670 --> 00:03:17,030
may get caught imprisoned shot in the

74
00:03:13,160 --> 00:03:19,880
process not really fun once we've moved

75
00:03:17,030 --> 00:03:22,160
into the digital age the sneakernet

76
00:03:19,880 --> 00:03:24,019
methods appeared so those have you hero

77
00:03:22,160 --> 00:03:26,090
old enough to remember you know floppy

78
00:03:24,019 --> 00:03:28,040
disks you walk in you stick it in the

79
00:03:26,090 --> 00:03:31,450
computer copy paste walk out with it

80
00:03:28,040 --> 00:03:36,200
nobody knows nowadays we use USB sticks

81
00:03:31,450 --> 00:03:38,988
as the internet evolved the threat model

82
00:03:36,200 --> 00:03:41,390
changed and the risk went down now we

83
00:03:38,989 --> 00:03:43,880
don't have to go to our enemy or add

84
00:03:41,390 --> 00:03:46,910
this area and copy the data we just do

85
00:03:43,880 --> 00:03:48,829
it from where we are so there is no

86
00:03:46,910 --> 00:03:51,799
longer that risk of being shot or caught

87
00:03:48,830 --> 00:03:53,450
or imprisoned because no China and

88
00:03:51,799 --> 00:03:55,220
Russia are not going to turn their

89
00:03:53,450 --> 00:03:57,619
operatives over to us when they get

90
00:03:55,220 --> 00:04:02,720
caught so there are some obvious

91
00:03:57,620 --> 00:04:04,459
protocols first one being file transfer

92
00:04:02,720 --> 00:04:06,109
the name kind of gives you a hint of

93
00:04:04,459 --> 00:04:08,720
what's going on there

94
00:04:06,110 --> 00:04:10,610
we have HTTP and HTTPS and then we could

95
00:04:08,720 --> 00:04:16,070
just simply mail data to and from

96
00:04:10,610 --> 00:04:18,880
ourselves from our victim in addition to

97
00:04:16,070 --> 00:04:21,380
those we have some more exotic methods

98
00:04:18,880 --> 00:04:24,200
for example the DNS exfiltration

99
00:04:21,380 --> 00:04:26,599
technique is taking data encoding it and

100
00:04:24,200 --> 00:04:27,770
embedding it in a DNS query that will

101
00:04:26,599 --> 00:04:29,690
eventually end up at a

102
00:04:27,770 --> 00:04:31,818
a server that the threat actor controls

103
00:04:29,690 --> 00:04:34,660
and he will just simply log those

104
00:04:31,819 --> 00:04:37,610
transactions and reconstruct the data

105
00:04:34,660 --> 00:04:39,860
ICMP is also embedding data in an ICMP

106
00:04:37,610 --> 00:04:42,500
packet the threat actor would simply

107
00:04:39,860 --> 00:04:44,300
ping a host that he controls log all of

108
00:04:42,500 --> 00:04:49,849
those packets and then reconstruct the

109
00:04:44,300 --> 00:04:53,409
data there is a common thread with all

110
00:04:49,849 --> 00:04:53,409
of these if we look at the OSI model

111
00:04:54,069 --> 00:05:00,289
these protocols tend to cluster around

112
00:04:56,449 --> 00:05:02,270
the top of the OSI model there's a

113
00:05:00,289 --> 00:05:04,190
reason for that but we'll get to that in

114
00:05:02,270 --> 00:05:07,818
a sec but there are risks with using

115
00:05:04,190 --> 00:05:11,259
these if you have firewalls a threat

116
00:05:07,819 --> 00:05:13,490
actor could be detected based on the

117
00:05:11,259 --> 00:05:15,349
based on the sessions that he creates

118
00:05:13,490 --> 00:05:18,380
through the firewall a lot of firewalls

119
00:05:15,349 --> 00:05:20,479
are logging all of the traffic out point

120
00:05:18,380 --> 00:05:23,240
outbound ports or protocols could be

121
00:05:20,479 --> 00:05:25,068
blocked and those failed attempts could

122
00:05:23,240 --> 00:05:28,909
trigger alerts that your sock team is

123
00:05:25,069 --> 00:05:30,710
going to notice there are also ids/ips

124
00:05:28,909 --> 00:05:33,259
signatures that are capable of detecting

125
00:05:30,710 --> 00:05:35,659
a wide array of different DNS data

126
00:05:33,259 --> 00:05:37,340
exfiltration techniques there are just a

127
00:05:35,659 --> 00:05:40,550
few snort SIDS there for you guys to

128
00:05:37,340 --> 00:05:42,289
look at sim correlation rules can detect

129
00:05:40,550 --> 00:05:45,469
a threat actor working in the network to

130
00:05:42,289 --> 00:05:47,539
do data exfiltration techniques so he

131
00:05:45,469 --> 00:05:50,300
could be discovered that way and then

132
00:05:47,539 --> 00:05:52,699
DLP systems can monitor every one of

133
00:05:50,300 --> 00:05:56,719
those protocols we just looked at for

134
00:05:52,699 --> 00:06:00,259
exfiltration activity so why do you

135
00:05:56,719 --> 00:06:02,060
threat actors use them well first threat

136
00:06:00,259 --> 00:06:04,940
actors are pretty lazy they're really

137
00:06:02,060 --> 00:06:07,460
easy to use those protocols you've got a

138
00:06:04,940 --> 00:06:09,889
wealth of utilities already available if

139
00:06:07,460 --> 00:06:11,900
you're writing custom malware you have a

140
00:06:09,889 --> 00:06:14,810
wealth of libraries available for every

141
00:06:11,900 --> 00:06:16,880
language on the planet there's a mature

142
00:06:14,810 --> 00:06:19,550
ecosystem of servers available to

143
00:06:16,880 --> 00:06:21,380
receive and send data to and these

144
00:06:19,550 --> 00:06:23,569
protocols all have flow controls so you

145
00:06:21,380 --> 00:06:25,250
don't have to sit there and manually

146
00:06:23,569 --> 00:06:26,900
worry about your data being lost in

147
00:06:25,250 --> 00:06:29,690
transit they will take care of

148
00:06:26,900 --> 00:06:32,029
retransmitting for you but the biggest

149
00:06:29,690 --> 00:06:33,740
reason is that most networks don't block

150
00:06:32,029 --> 00:06:36,560
all of the protocols we just looked at

151
00:06:33,740 --> 00:06:38,539
if your average user can get on the

152
00:06:36,560 --> 00:06:40,580
network and surf Facebook at lunchtime

153
00:06:38,539 --> 00:06:41,610
you are vulnerable to data exfiltration

154
00:06:40,580 --> 00:06:46,409
through h2

155
00:06:41,610 --> 00:06:48,659
TP second reason we use these higher

156
00:06:46,409 --> 00:06:50,430
layer protocols is simply that there's

157
00:06:48,659 --> 00:06:53,490
no space the further down you go in the

158
00:06:50,430 --> 00:06:56,669
OSI model if we look at an IP version 4

159
00:06:53,490 --> 00:06:58,740
header we see a wide array of fields

160
00:06:56,669 --> 00:07:02,250
that we could use but there's just not

161
00:06:58,740 --> 00:07:05,009
enough room most of them like our source

162
00:07:02,250 --> 00:07:07,770
and destination address fields we can't

163
00:07:05,009 --> 00:07:09,900
really put arbitrary data their total

164
00:07:07,770 --> 00:07:12,539
length fragment offset and header

165
00:07:09,900 --> 00:07:16,620
checksum fields these also can't carry

166
00:07:12,539 --> 00:07:19,199
arbitrary data if we look at the TCP

167
00:07:16,620 --> 00:07:21,930
header we do have some places we could

168
00:07:19,199 --> 00:07:24,050
sneak data in the source port for

169
00:07:21,930 --> 00:07:28,379
example can carry two bytes of data

170
00:07:24,050 --> 00:07:30,330
along with the destination port the

171
00:07:28,379 --> 00:07:33,990
sequence port our sequence number field

172
00:07:30,330 --> 00:07:35,250
can carry four bytes of data and the

173
00:07:33,990 --> 00:07:37,409
acknowledgement number field can also

174
00:07:35,250 --> 00:07:39,539
carry four bytes some of the other

175
00:07:37,409 --> 00:07:44,490
fields are calculated fields and so will

176
00:07:39,539 --> 00:07:48,210
not carry arbitrary data next the UDP

177
00:07:44,490 --> 00:07:50,759
header again just like TCP we have the

178
00:07:48,210 --> 00:07:54,299
source port and destination port that'll

179
00:07:50,759 --> 00:07:56,219
also carry two bytes length and checksum

180
00:07:54,300 --> 00:08:00,930
fields or calculated fields and cannot

181
00:07:56,219 --> 00:08:03,150
carry arbitrary values the biggest

182
00:08:00,930 --> 00:08:05,219
reason we move to the application layer

183
00:08:03,150 --> 00:08:07,679
protocols for data exfiltration is

184
00:08:05,219 --> 00:08:09,539
network address translation or more

185
00:08:07,680 --> 00:08:13,529
specifically network address and port

186
00:08:09,539 --> 00:08:15,479
translation the reason for that is NAT

187
00:08:13,529 --> 00:08:19,229
changes parameters at layer three and

188
00:08:15,479 --> 00:08:20,789
four specifically the source IP and

189
00:08:19,229 --> 00:08:22,469
destination IP if you were to encode

190
00:08:20,789 --> 00:08:24,330
data there during the translation

191
00:08:22,469 --> 00:08:26,729
process those fields would change and

192
00:08:24,330 --> 00:08:28,889
you would lose your data source and

193
00:08:26,729 --> 00:08:31,318
destination ports also change we'll see

194
00:08:28,889 --> 00:08:33,870
that in a moment and some firewalls

195
00:08:31,319 --> 00:08:36,479
specifically aasa firewalls will muck

196
00:08:33,870 --> 00:08:38,190
around with the TCP sequence numbers so

197
00:08:36,479 --> 00:08:40,829
end-to-end integrity of your data is not

198
00:08:38,190 --> 00:08:43,680
guaranteed but why do we put up with

199
00:08:40,828 --> 00:08:46,890
this little historical context

200
00:08:43,679 --> 00:08:48,959
back in the 80s IP version 4 was

201
00:08:46,890 --> 00:08:50,490
formalized and when that happened there

202
00:08:48,959 --> 00:08:53,250
were only a few thousand machines

203
00:08:50,490 --> 00:08:54,839
connected to the global Internet but by

204
00:08:53,250 --> 00:08:55,820
the 90s it was pretty obvious we had a

205
00:08:54,839 --> 00:08:58,590
small

206
00:08:55,820 --> 00:09:00,900
the internet was expanding a thousands

207
00:08:58,590 --> 00:09:05,460
of hosts per day and growing even faster

208
00:09:00,900 --> 00:09:08,699
now IP versions 4 gives us 4.3 billion

209
00:09:05,460 --> 00:09:11,880
addresses until we take out all the IETF

210
00:09:08,700 --> 00:09:14,340
mistakes of reserving wide swaths of

211
00:09:11,880 --> 00:09:18,540
space which reduced it to 3.4 billion

212
00:09:14,340 --> 00:09:21,090
addresses seems like a lot right but if

213
00:09:18,540 --> 00:09:23,099
we look at the numbers in 95 we already

214
00:09:21,090 --> 00:09:25,800
had more people on earth than addresses

215
00:09:23,100 --> 00:09:29,700
and if everybody had one address we were

216
00:09:25,800 --> 00:09:32,819
screwed by 2009 we'd already exceeded IP

217
00:09:29,700 --> 00:09:35,910
for its capacity and by 2020 we're

218
00:09:32,820 --> 00:09:39,840
estimating roughly 75 billion Internet

219
00:09:35,910 --> 00:09:40,949
connected devices so we're screwed well

220
00:09:39,840 --> 00:09:45,120
then we came up with this little idea

221
00:09:40,950 --> 00:09:47,490
that basically what we can do is we can

222
00:09:45,120 --> 00:09:50,190
share a single IP amongst multiple IP

223
00:09:47,490 --> 00:09:52,110
systems behind it so if we can see a B

224
00:09:50,190 --> 00:09:55,140
and C on the left here they're using

225
00:09:52,110 --> 00:09:56,940
private IP space they're behind a router

226
00:09:55,140 --> 00:09:59,130
that has a single public address on it

227
00:09:56,940 --> 00:10:02,640
and they're able to share that address

228
00:09:59,130 --> 00:10:06,210
we can see here for example host a

229
00:10:02,640 --> 00:10:09,439
source port is 22 22 but when it goes

230
00:10:06,210 --> 00:10:11,490
through NAT it's changed to 77 77

231
00:10:09,440 --> 00:10:15,510
illustrating the problem that we have if

232
00:10:11,490 --> 00:10:17,100
we encode data in those port fields so

233
00:10:15,510 --> 00:10:23,819
that force is data into the upper layers

234
00:10:17,100 --> 00:10:26,340
of the OSI model now there is one caveat

235
00:10:23,820 --> 00:10:28,200
to that look I will say that application

236
00:10:26,340 --> 00:10:30,330
layer gateways and server load balancers

237
00:10:28,200 --> 00:10:31,740
and things like that are a concern I

238
00:10:30,330 --> 00:10:36,270
could spend an hour on that we're not

239
00:10:31,740 --> 00:10:40,500
going to go there so if we live in a

240
00:10:36,270 --> 00:10:44,790
world without NAT we do introducing IP V

241
00:10:40,500 --> 00:10:46,320
version 5 I mean six little historical

242
00:10:44,790 --> 00:10:49,680
context for if you ever have a hep

243
00:10:46,320 --> 00:10:51,870
hacker jeopardy question IP version 4 is

244
00:10:49,680 --> 00:10:53,670
not version 4 and version 6 is not

245
00:10:51,870 --> 00:10:55,940
version 6 it's just refers to the

246
00:10:53,670 --> 00:10:59,579
protocol number in the IP header field

247
00:10:55,940 --> 00:11:01,590
we went from 5 4 to 6 because somewhere

248
00:10:59,580 --> 00:11:03,830
in there someone created protocol number

249
00:11:01,590 --> 00:11:05,820
5 and that's why we had to skip a number

250
00:11:03,830 --> 00:11:09,200
down there at the bottom is a Wikipedia

251
00:11:05,820 --> 00:11:09,200
article about that protocol

252
00:11:09,480 --> 00:11:14,230
so IP version 6 what's the history of it

253
00:11:12,399 --> 00:11:16,149
in the 90s when it was obvious we were

254
00:11:14,230 --> 00:11:18,279
going to run out of 4 version 4

255
00:11:16,149 --> 00:11:20,290
addresses an effort was initiated to

256
00:11:18,279 --> 00:11:23,110
replace it two years later the first

257
00:11:20,290 --> 00:11:26,500
experimental protocols appeared and then

258
00:11:23,110 --> 00:11:30,730
in 95 the first RFC appeared the last

259
00:11:26,500 --> 00:11:32,170
one happening in 2017 some of the

260
00:11:30,730 --> 00:11:34,980
changes and this is not an exhaustive

261
00:11:32,170 --> 00:11:37,959
list trust me

262
00:11:34,980 --> 00:11:42,940
first our address space quadrupled from

263
00:11:37,959 --> 00:11:45,189
32 bits to 128 bits so if we compare the

264
00:11:42,940 --> 00:11:48,399
numbers IP version 4 or 4.3 billion

265
00:11:45,190 --> 00:11:50,110
addresses to IP version 6 we now have to

266
00:11:48,399 --> 00:11:54,070
use exponential notation because the

267
00:11:50,110 --> 00:11:56,440
number is so big that's 2 to the 128th

268
00:11:54,070 --> 00:11:58,089
for the math geeks that's 3.4 times 10

269
00:11:56,440 --> 00:12:00,399
to the 38th and for those of you who are

270
00:11:58,089 --> 00:12:05,800
not mathematically inclined that's the

271
00:12:00,399 --> 00:12:08,829
number I can't pronounce it just for

272
00:12:05,800 --> 00:12:10,899
comparison the number of galaxies in the

273
00:12:08,829 --> 00:12:14,199
observable universe is 1 times 10 to the

274
00:12:10,899 --> 00:12:16,870
10 the number of stars in the average

275
00:12:14,200 --> 00:12:18,910
galaxy is 1 times 10 to the 11 which

276
00:12:16,870 --> 00:12:21,670
means there are 1 billion trillion stars

277
00:12:18,910 --> 00:12:23,079
in the observable universe we have more

278
00:12:21,670 --> 00:12:26,920
addresses and stars in the known

279
00:12:23,079 --> 00:12:28,779
universe the number of grains of sand on

280
00:12:26,920 --> 00:12:32,920
earth this is my favorite one is it

281
00:12:28,779 --> 00:12:35,680
estimated at 7.5 times ten to the 18 we

282
00:12:32,920 --> 00:12:40,240
could assign a / 64 subnet to every

283
00:12:35,680 --> 00:12:44,649
grain of sand and have more left let's

284
00:12:40,240 --> 00:12:47,290
get to work next the address format has

285
00:12:44,649 --> 00:12:50,920
changed everyone is familiar with the

286
00:12:47,290 --> 00:12:53,160
familiar dotted quad format there's some

287
00:12:50,920 --> 00:12:57,760
examples right there

288
00:12:53,160 --> 00:13:00,520
IP version 6 changes that to a 8 colon

289
00:12:57,760 --> 00:13:02,790
separated hexadecimal groups let's take

290
00:13:00,520 --> 00:13:02,790
a look

291
00:13:03,690 --> 00:13:08,890
if we notice as I'm going through not

292
00:13:06,520 --> 00:13:11,560
all of them have eight groups

293
00:13:08,890 --> 00:13:13,150
that's because IP version 6 allows you

294
00:13:11,560 --> 00:13:15,910
to truncate an address if you have a

295
00:13:13,150 --> 00:13:17,199
bunch of zeros together so for example

296
00:13:15,910 --> 00:13:20,439
in the first one we only have five

297
00:13:17,200 --> 00:13:22,540
groups but we have a double colon that's

298
00:13:20,440 --> 00:13:24,700
that double colon signifies we have

299
00:13:22,540 --> 00:13:26,920
three groups that were just zeros you

300
00:13:24,700 --> 00:13:32,920
can do that once variety six ipv6

301
00:13:26,920 --> 00:13:33,479
address next subnetting changes none

302
00:13:32,920 --> 00:13:36,280
really

303
00:13:33,480 --> 00:13:39,970
it all sort of works the same with one

304
00:13:36,280 --> 00:13:43,030
exception the / 64 subnet is very

305
00:13:39,970 --> 00:13:44,950
special in IP version 6 if we have

306
00:13:43,030 --> 00:13:47,290
devices like my laptop or your cell

307
00:13:44,950 --> 00:13:49,180
phone or TVs or anything attached to a

308
00:13:47,290 --> 00:13:52,560
subnet running IP version 6

309
00:13:49,180 --> 00:13:56,050
lissa most recommended subnet is a / 64

310
00:13:52,560 --> 00:13:56,530
the reason for that is several key

311
00:13:56,050 --> 00:14:00,430
features

312
00:13:56,530 --> 00:14:04,780
Ricks expect that / 64 subnet for

313
00:14:00,430 --> 00:14:07,540
example UI 64 this is essentially like

314
00:14:04,780 --> 00:14:09,550
the 1 6 9 to 5 for addressing you get in

315
00:14:07,540 --> 00:14:12,520
an IP version 4 when you don't have a

316
00:14:09,550 --> 00:14:15,040
DHCP server each host will generate its

317
00:14:12,520 --> 00:14:17,980
own global unique address based on its

318
00:14:15,040 --> 00:14:19,810
MAC address there's also the neighbor

319
00:14:17,980 --> 00:14:22,120
discovery protocol which has router

320
00:14:19,810 --> 00:14:24,339
advertisement and neighbor discovery

321
00:14:22,120 --> 00:14:25,960
protocols router advertisement is where

322
00:14:24,339 --> 00:14:28,330
the router tells all the hosts this is

323
00:14:25,960 --> 00:14:30,310
the subnet you're on and neighbor

324
00:14:28,330 --> 00:14:35,230
discovery is basically the replacement

325
00:14:30,310 --> 00:14:39,489
for arp and r arp finally prefix

326
00:14:35,230 --> 00:14:40,780
delegation ipv4 had no concept of this

327
00:14:39,490 --> 00:14:43,480
we just didn't have the number of

328
00:14:40,780 --> 00:14:46,390
addresses to do this most people got one

329
00:14:43,480 --> 00:14:48,370
address and that was enough an IP

330
00:14:46,390 --> 00:14:52,680
version 6 this is a scalable way to

331
00:14:48,370 --> 00:14:54,760
assign entire subnet blocks to customers

332
00:14:52,680 --> 00:14:58,719
common way to do it is we assign a

333
00:14:54,760 --> 00:15:02,170
single / 64 to a customer or some are

334
00:14:58,720 --> 00:15:04,540
assigned shorter than / 64 for example a

335
00:15:02,170 --> 00:15:07,060
former employer of mine would assign a /

336
00:15:04,540 --> 00:15:10,030
60 to home users that would give them

337
00:15:07,060 --> 00:15:13,180
about 16 / 64 subnets they could use in

338
00:15:10,030 --> 00:15:16,310
their network another provider provides

339
00:15:13,180 --> 00:15:20,750
a / 56 giving them 250

340
00:15:16,310 --> 00:15:22,969
except notes that they could use here is

341
00:15:20,750 --> 00:15:25,640
prefix delegation Illustrated we see

342
00:15:22,970 --> 00:15:29,720
that the ISP has a prefix of their own

343
00:15:25,640 --> 00:15:32,270
of 2600 colon 1/30 and each site is

344
00:15:29,720 --> 00:15:35,270
given a slash 60 and that business down

345
00:15:32,270 --> 00:15:37,610
there has a slash 52 we'll zoom in a

346
00:15:35,270 --> 00:15:39,740
little bit and we see that most

347
00:15:37,610 --> 00:15:41,900
customers only use one of their prefix

348
00:15:39,740 --> 00:15:47,660
delegated subnets but that's how it

349
00:15:41,900 --> 00:15:50,420
works all right I'm going to stop for a

350
00:15:47,660 --> 00:15:53,180
sec when I talk about IP version 6 to a

351
00:15:50,420 --> 00:15:55,490
lot of people people will say wait this

352
00:15:53,180 --> 00:15:58,279
is not as secure as IP version 4 I don't

353
00:15:55,490 --> 00:16:00,020
have net anymore that was never a

354
00:15:58,279 --> 00:16:02,810
security feature and if you're relying

355
00:16:00,020 --> 00:16:06,140
on that you're doing it wrong and that

356
00:16:02,810 --> 00:16:09,170
exists purely as a address conservation

357
00:16:06,140 --> 00:16:10,760
tool the thing about IP version 6 is now

358
00:16:09,170 --> 00:16:12,650
you have globally routable addresses

359
00:16:10,760 --> 00:16:14,720
everywhere it forces you to do network

360
00:16:12,650 --> 00:16:17,209
security properly so you need to have

361
00:16:14,720 --> 00:16:23,210
the access lists the inspection stuff in

362
00:16:17,210 --> 00:16:25,010
place so nothing about version 6

363
00:16:23,210 --> 00:16:27,310
prevents you from using any of the

364
00:16:25,010 --> 00:16:30,800
techniques we talked about earlier on

365
00:16:27,310 --> 00:16:34,540
but we have a new tool and that gives

366
00:16:30,800 --> 00:16:38,750
threat actors a new way to extract data

367
00:16:34,540 --> 00:16:40,610
let's look at the header it's kind of

368
00:16:38,750 --> 00:16:44,660
spacious there's lots of room in there

369
00:16:40,610 --> 00:16:47,330
for example we have the flow label field

370
00:16:44,660 --> 00:16:50,569
it's 20 bits this is used in IP version

371
00:16:47,330 --> 00:16:53,270
6 to group packets together based on

372
00:16:50,570 --> 00:16:55,910
commonalities so for example if I have a

373
00:16:53,270 --> 00:16:57,410
session to a web server so the routers

374
00:16:55,910 --> 00:16:59,329
and everything in the path treat those

375
00:16:57,410 --> 00:17:05,420
packets the same that would get the same

376
00:16:59,330 --> 00:17:07,640
flow label we also have the source

377
00:17:05,420 --> 00:17:12,310
address and destination address both of

378
00:17:07,640 --> 00:17:12,310
which are 16 bytes that's a lot of room

379
00:17:15,000 --> 00:17:20,079
we talked about how the format of IP

380
00:17:18,460 --> 00:17:23,050
version 6 is addresses are different

381
00:17:20,079 --> 00:17:25,089
from version 4 we use hexadecimal and

382
00:17:23,050 --> 00:17:29,649
another name for hexadecimal is base 16

383
00:17:25,089 --> 00:17:32,530
and you can encode data in a base 16 for

384
00:17:29,650 --> 00:17:34,420
example we have the word hello and natin

385
00:17:32,530 --> 00:17:37,990
and then the encoded string over there

386
00:17:34,420 --> 00:17:41,850
if we have it in an IP V version an IP

387
00:17:37,990 --> 00:17:44,610
version 6 packet we have steganography

388
00:17:41,850 --> 00:17:47,980
if you don't know what steganography is

389
00:17:44,610 --> 00:17:50,500
it's simply the art of placing another

390
00:17:47,980 --> 00:17:52,860
message within another one message

391
00:17:50,500 --> 00:17:55,720
within another so an image with an image

392
00:17:52,860 --> 00:17:58,679
text within an image etc so in this case

393
00:17:55,720 --> 00:18:02,260
we have meat at 10 p.m. converted to hex

394
00:17:58,680 --> 00:18:05,460
we install it in an ipv6 address and it

395
00:18:02,260 --> 00:18:09,129
vanishes just to illustrate this topic

396
00:18:05,460 --> 00:18:11,620
we have three addresses one of them has

397
00:18:09,130 --> 00:18:16,660
a secret message it's not the one that

398
00:18:11,620 --> 00:18:19,270
says dead beef but you can do that it's

399
00:18:16,660 --> 00:18:21,490
the second one but if I put those in

400
00:18:19,270 --> 00:18:23,050
front of any security professional or a

401
00:18:21,490 --> 00:18:24,760
network professional and go I have a

402
00:18:23,050 --> 00:18:26,500
network a message hidden in here they'll

403
00:18:24,760 --> 00:18:28,660
go your batshit crazy

404
00:18:26,500 --> 00:18:35,920
it's an ipv6 address there's nothing

405
00:18:28,660 --> 00:18:37,990
there but there is so when we do

406
00:18:35,920 --> 00:18:40,120
steganography one consideration is just

407
00:18:37,990 --> 00:18:41,830
how much data can I hide inside

408
00:18:40,120 --> 00:18:44,560
something else without being discovered

409
00:18:41,830 --> 00:18:47,050
and because of that / 64 subnet

410
00:18:44,560 --> 00:18:50,530
limitation we can put about 8 bytes of

411
00:18:47,050 --> 00:18:52,300
pack 8 bytes of data per packet if we

412
00:18:50,530 --> 00:18:54,879
use one head one header field if we use

413
00:18:52,300 --> 00:18:57,639
2 we can put 16 bytes obviously so in

414
00:18:54,880 --> 00:18:59,560
this case we put it in the host address

415
00:18:57,640 --> 00:19:05,260
portion can we get that 8 bytes there

416
00:18:59,560 --> 00:19:07,060
and there so if I could put 8 bytes of

417
00:19:05,260 --> 00:19:10,000
data into the host portion of the v6

418
00:19:07,060 --> 00:19:12,639
address where do I need to send it gee

419
00:19:10,000 --> 00:19:15,670
if we only had a spare / 64 floating

420
00:19:12,640 --> 00:19:16,420
around or a couple of them oh yeah

421
00:19:15,670 --> 00:19:20,680
that's right

422
00:19:16,420 --> 00:19:24,160
thank you ISPs so again here we have our

423
00:19:20,680 --> 00:19:27,480
slash 60 prefix delegation to a site we

424
00:19:24,160 --> 00:19:30,850
have an unused prefix delegation subnet

425
00:19:27,480 --> 00:19:33,010
so first we begin by configuring our

426
00:19:30,850 --> 00:19:35,949
router and you need to have a router

427
00:19:33,010 --> 00:19:37,660
capable of routing an arbitrary prefix

428
00:19:35,950 --> 00:19:39,580
delegation subnet that's typically in

429
00:19:37,660 --> 00:19:41,860
this case a Cisco router but anything

430
00:19:39,580 --> 00:19:43,840
more powerful than you know the average

431
00:19:41,860 --> 00:19:46,780
d-link or something should be able to do

432
00:19:43,840 --> 00:19:49,919
this in this case we route that prefix

433
00:19:46,780 --> 00:19:52,000
delegation subnet to an arbitrary host

434
00:19:49,920 --> 00:19:53,590
and there's one small problem with that

435
00:19:52,000 --> 00:19:55,990
though that host has no idea what to do

436
00:19:53,590 --> 00:19:58,300
it those addresses so it'll drop them or

437
00:19:55,990 --> 00:19:59,740
in it's in or it will generate ICMP

438
00:19:58,300 --> 00:20:02,830
error messages which we call back

439
00:19:59,740 --> 00:20:05,590
scatter that's a big deal to a victim

440
00:20:02,830 --> 00:20:08,470
that they start to see back scatter so

441
00:20:05,590 --> 00:20:10,209
we have to fix this problem so on our

442
00:20:08,470 --> 00:20:11,650
hosts we would configure I'm sorry

443
00:20:10,210 --> 00:20:14,020
that's that's what will basically happen

444
00:20:11,650 --> 00:20:16,720
is the packets will be dropped we would

445
00:20:14,020 --> 00:20:19,660
configure a black hole route on that

446
00:20:16,720 --> 00:20:21,280
host what will then happen is every

447
00:20:19,660 --> 00:20:24,220
packet that arise that that host will be

448
00:20:21,280 --> 00:20:26,290
dropped into the ether and vanish we've

449
00:20:24,220 --> 00:20:32,200
gone through all this work why would we

450
00:20:26,290 --> 00:20:33,610
do that we just put a packet sniffer on

451
00:20:32,200 --> 00:20:34,810
there and listen to every packet

452
00:20:33,610 --> 00:20:37,689
destined to that prefix delegation

453
00:20:34,810 --> 00:20:41,710
subnet and now we just log those to a

454
00:20:37,690 --> 00:20:43,240
file and we've got all of our data so

455
00:20:41,710 --> 00:20:44,980
let's go across the system requirements

456
00:20:43,240 --> 00:20:50,920
real quick of how you would set this up

457
00:20:44,980 --> 00:20:54,010
so our source first we need to have

458
00:20:50,920 --> 00:20:56,200
native IP version 6 you could also use

459
00:20:54,010 --> 00:20:58,030
tunneling if that won't trigger alarms

460
00:20:56,200 --> 00:20:59,320
and cause everyone to run around the

461
00:20:58,030 --> 00:21:02,320
building with like their hairs on the

462
00:20:59,320 --> 00:21:04,810
fire transition technologies like Torito

463
00:21:02,320 --> 00:21:07,720
and stuff like that are falling out of

464
00:21:04,810 --> 00:21:11,110
favor and much more obvious to an in

465
00:21:07,720 --> 00:21:12,790
tune sock you'll need compression tools

466
00:21:11,110 --> 00:21:15,010
unless you're sending those small

467
00:21:12,790 --> 00:21:16,780
messages like I just sent up here if

468
00:21:15,010 --> 00:21:18,190
you're gonna send like a 10 Meg file you

469
00:21:16,780 --> 00:21:20,460
really need to shrink it down so you're

470
00:21:18,190 --> 00:21:22,690
not spending weeks sending this data

471
00:21:20,460 --> 00:21:24,460
you'll need to format conversion tools

472
00:21:22,690 --> 00:21:26,800
because once you compress it's now

473
00:21:24,460 --> 00:21:30,130
binary data so we need to get it into a

474
00:21:26,800 --> 00:21:31,750
base 16 format and then you need a tool

475
00:21:30,130 --> 00:21:34,080
like scape II which is a framework that

476
00:21:31,750 --> 00:21:37,060
allows you to craft arbitrary packets or

477
00:21:34,080 --> 00:21:38,560
you could use tools like W get and dig

478
00:21:37,060 --> 00:21:39,559
and just make requests to those

479
00:21:38,560 --> 00:21:44,509
destination address

480
00:21:39,559 --> 00:21:46,850
is the destination configuration is very

481
00:21:44,509 --> 00:21:50,450
similar again we need to have some sort

482
00:21:46,850 --> 00:21:52,100
of ipv6 connectivity a router capable of

483
00:21:50,450 --> 00:21:54,769
statically routing like I Illustrated a

484
00:21:52,100 --> 00:21:57,139
few moments ago compression tools to

485
00:21:54,769 --> 00:21:59,570
undo our compression another format

486
00:21:57,139 --> 00:22:01,879
conversion tool to swap back from

487
00:21:59,570 --> 00:22:04,158
hexadecimal to binary or whatever format

488
00:22:01,879 --> 00:22:06,080
you started with and those packet

489
00:22:04,159 --> 00:22:13,700
capture tools like a Wireshark and TCP

490
00:22:06,080 --> 00:22:15,559
dump so let's send a message I didn't

491
00:22:13,700 --> 00:22:17,210
anticipate being on Sunday so anyway

492
00:22:15,559 --> 00:22:23,779
welcome the calculate con thank you all

493
00:22:17,210 --> 00:22:29,119
for coming so first we would convert

494
00:22:23,779 --> 00:22:36,200
that to a base 16 stream next we will

495
00:22:29,119 --> 00:22:38,240
chop that into 64 bit segments and then

496
00:22:36,200 --> 00:22:39,860
associate a numerical order identifier

497
00:22:38,240 --> 00:22:41,659
to each of those segments so that when

498
00:22:39,860 --> 00:22:45,949
we receive it at the other end we can

499
00:22:41,659 --> 00:22:48,049
reassemble them in the proper order next

500
00:22:45,950 --> 00:22:51,799
we'll put each segment into the host

501
00:22:48,049 --> 00:22:53,299
portion of an ipv6 address and the

502
00:22:51,799 --> 00:22:57,408
numerical identifiers in the flow label

503
00:22:53,299 --> 00:23:00,499
field sorry I changed the color but

504
00:22:57,409 --> 00:23:01,940
green on white looks terrible as we can

505
00:23:00,499 --> 00:23:04,970
see we have the flow label which matches

506
00:23:01,940 --> 00:23:08,019
our identifiers and our data is now

507
00:23:04,970 --> 00:23:10,970
embedded in the destination address

508
00:23:08,019 --> 00:23:12,679
let's go in depth so transmitter

509
00:23:10,970 --> 00:23:15,230
processing here's the in depth way of

510
00:23:12,679 --> 00:23:18,169
doing this first we'd select our target

511
00:23:15,230 --> 00:23:19,879
data as a thread actor optionally

512
00:23:18,169 --> 00:23:23,749
compress it to reduce our transmission

513
00:23:19,879 --> 00:23:27,830
time format convert to base 16 do the

514
00:23:23,749 --> 00:23:29,419
data slicing and sequencing next we

515
00:23:27,830 --> 00:23:30,889
would construct our packet using the

516
00:23:29,419 --> 00:23:32,899
method we just talked about there

517
00:23:30,889 --> 00:23:35,658
against KP is a real good tool to use

518
00:23:32,899 --> 00:23:39,158
that to do that transmit that packet and

519
00:23:35,659 --> 00:23:39,159
repeat for every one in the sequence

520
00:23:40,879 --> 00:23:47,100
sorry got a little hid okay so we do

521
00:23:45,809 --> 00:23:48,690
have a one small problem in the real

522
00:23:47,100 --> 00:23:52,109
world none of our data is gonna always

523
00:23:48,690 --> 00:23:54,179
in on a slap on a 64-bit segment so we

524
00:23:52,109 --> 00:23:56,428
have to do padding how would we handle a

525
00:23:54,179 --> 00:23:58,379
case where we're short well you could

526
00:23:56,429 --> 00:24:00,529
put the padding at the beginning or you

527
00:23:58,379 --> 00:24:02,820
could put the padding at the end

528
00:24:00,529 --> 00:24:04,649
honestly how you do it really doesn't

529
00:24:02,820 --> 00:24:07,049
matter it just needs to be deterministic

530
00:24:04,649 --> 00:24:09,090
and reversible so every time you pad it

531
00:24:07,049 --> 00:24:10,289
needs to be the same so that you can

532
00:24:09,090 --> 00:24:12,299
recognize it when you're doing your

533
00:24:10,289 --> 00:24:15,840
processing it also needs to be something

534
00:24:12,299 --> 00:24:18,359
you can undo so using different patterns

535
00:24:15,840 --> 00:24:20,279
to mark pad bytes and stuff like that

536
00:24:18,359 --> 00:24:25,559
that that's up to the individual who

537
00:24:20,279 --> 00:24:28,409
would want to implement that receiver

538
00:24:25,559 --> 00:24:30,149
processing so on this side we would

539
00:24:28,409 --> 00:24:31,679
start a packet capture and we would just

540
00:24:30,149 --> 00:24:34,289
filter down for that prefix delegation

541
00:24:31,679 --> 00:24:36,480
target subnet that way we're just

542
00:24:34,289 --> 00:24:41,009
capturing and hoovering up the data for

543
00:24:36,480 --> 00:24:42,600
that subnet once the final segment has

544
00:24:41,009 --> 00:24:44,669
finally arrived at our end we would

545
00:24:42,600 --> 00:24:46,619
terminate the packet capture and we

546
00:24:44,669 --> 00:24:48,720
would extract the flow label fields and

547
00:24:46,619 --> 00:24:51,959
host identifier values from each of

548
00:24:48,720 --> 00:24:53,759
those packets and then order them once

549
00:24:51,960 --> 00:24:56,549
that's done we would concatenate all of

550
00:24:53,759 --> 00:24:59,690
the the 64 bit segments together to

551
00:24:56,549 --> 00:25:02,129
return us to the original formatted data

552
00:24:59,690 --> 00:25:04,769
convert it back from hexadecimal and

553
00:25:02,129 --> 00:25:06,498
decompress if needed once we're done

554
00:25:04,769 --> 00:25:12,749
with that we lay it back in our chair

555
00:25:06,499 --> 00:25:15,080
tent our fingers and enjoy our fruits of

556
00:25:12,749 --> 00:25:15,080
our labor

557
00:25:16,190 --> 00:25:20,279
so whenever doing any kind of

558
00:25:18,179 --> 00:25:21,960
theoretical attack like this I like to

559
00:25:20,279 --> 00:25:24,149
look at the weaknesses and challenges

560
00:25:21,960 --> 00:25:26,389
so the first weakness of this type of

561
00:25:24,149 --> 00:25:28,799
attack is that it's extremely traceable

562
00:25:26,389 --> 00:25:31,109
remember we're talking about publicly

563
00:25:28,799 --> 00:25:33,690
routable addresses that are globally

564
00:25:31,109 --> 00:25:35,730
unique for example if you have a phone I

565
00:25:33,690 --> 00:25:39,179
believe on Verizon you have an ipv6

566
00:25:35,730 --> 00:25:41,999
address it's unique to your phone it can

567
00:25:39,179 --> 00:25:43,529
be traced specifically to you what IP

568
00:25:41,999 --> 00:25:45,419
for that was a little bit harder because

569
00:25:43,529 --> 00:25:49,520
we shared address as they move around a

570
00:25:45,419 --> 00:25:51,679
lot hurry up and wait

571
00:25:49,520 --> 00:25:53,779
this is not a particularly fast way of

572
00:25:51,679 --> 00:25:56,960
doing things we're only moving 8 bytes

573
00:25:53,779 --> 00:25:58,820
of data around at a time you could blast

574
00:25:56,960 --> 00:26:00,890
this away but it's probably gonna raise

575
00:25:58,820 --> 00:26:02,600
some some notice you know someone will

576
00:26:00,890 --> 00:26:04,880
notice that there's a lot of traffic on

577
00:26:02,600 --> 00:26:08,090
the network but if you're going for that

578
00:26:04,880 --> 00:26:12,789
good apt level attack really low really

579
00:26:08,090 --> 00:26:12,789
slow and covert this is a way to go

580
00:26:14,860 --> 00:26:21,049
disinformation risk so a threat actor

581
00:26:19,700 --> 00:26:23,539
working against the technically adept

582
00:26:21,049 --> 00:26:25,610
victim could potentially poison the

583
00:26:23,539 --> 00:26:28,039
stream and they wouldn't know until it

584
00:26:25,610 --> 00:26:29,570
was too late because they're just

585
00:26:28,039 --> 00:26:32,629
receiving the data they have to do all

586
00:26:29,570 --> 00:26:34,789
the post-processing so I could simply

587
00:26:32,630 --> 00:26:36,830
load malware into their exfiltration

588
00:26:34,789 --> 00:26:40,850
stream when they exploded at their end

589
00:26:36,830 --> 00:26:43,668
hey I've got you or I can just send data

590
00:26:40,850 --> 00:26:46,158
to you that's garbage for eternity that

591
00:26:43,669 --> 00:26:50,590
gives my guys a time to do I are on our

592
00:26:46,159 --> 00:26:50,590
side alert law enforcement and find you

593
00:26:51,370 --> 00:26:59,090
other weaknesses protocol limitations

594
00:26:55,090 --> 00:27:01,580
that flow label field is only 20 bits

595
00:26:59,090 --> 00:27:03,500
long so that gives us roughly a million

596
00:27:01,580 --> 00:27:06,500
packets that we can send before that

597
00:27:03,500 --> 00:27:09,020
field rolls over to zero that's about

598
00:27:06,500 --> 00:27:11,059
eight bytes I'm sorry eight megabytes so

599
00:27:09,020 --> 00:27:12,408
one of the things you'd have to do is a

600
00:27:11,059 --> 00:27:14,928
thread actor it's determined a way to

601
00:27:12,409 --> 00:27:16,640
track that roll encounter so that when

602
00:27:14,929 --> 00:27:22,279
you reassemble data at the other end you

603
00:27:16,640 --> 00:27:25,580
can you get the same data back packet

604
00:27:22,279 --> 00:27:27,049
loss this is another problem because we

605
00:27:25,580 --> 00:27:29,510
have no flow control and this is a

606
00:27:27,049 --> 00:27:32,570
one-way communication we can detect

607
00:27:29,510 --> 00:27:34,129
packet loss in transit but we can't

608
00:27:32,570 --> 00:27:36,080
really do anything about it until it's

609
00:27:34,130 --> 00:27:38,299
after the fact we'd have to retransmit

610
00:27:36,080 --> 00:27:41,889
so you'd end up with corrupted data

611
00:27:38,299 --> 00:27:45,760
you'd have to restart and retransmit

612
00:27:41,890 --> 00:27:45,760
getting ahead of myself sorry

613
00:27:47,140 --> 00:27:54,400
some potential detection methods NetFlow

614
00:27:51,190 --> 00:27:56,770
anomaly detection so using a technology

615
00:27:54,400 --> 00:27:58,780
called one-to-one net flow where we take

616
00:27:56,770 --> 00:28:00,370
a digest of every packet and extract the

617
00:27:58,780 --> 00:28:02,740
source and destination addresses and

618
00:28:00,370 --> 00:28:04,178
other information about it we can then

619
00:28:02,740 --> 00:28:06,120
data mine that and look for patterns

620
00:28:04,179 --> 00:28:08,559
that look out of the ordinary

621
00:28:06,120 --> 00:28:11,199
low and slow transmission can thwart

622
00:28:08,559 --> 00:28:13,030
this if you if you make transmission

623
00:28:11,200 --> 00:28:15,309
gaps as sufficiently long periods of

624
00:28:13,030 --> 00:28:17,559
time like one packet per half-hour or

625
00:28:15,309 --> 00:28:20,440
one packet per hour again that's that

626
00:28:17,559 --> 00:28:26,649
apt level low ends low stuff that will

627
00:28:20,440 --> 00:28:28,929
thwart that full packet capture a well

628
00:28:26,650 --> 00:28:30,490
resourced victim may have the ability to

629
00:28:28,929 --> 00:28:32,650
capture every packet on their network

630
00:28:30,490 --> 00:28:34,360
and store it for a period of time so not

631
00:28:32,650 --> 00:28:37,179
only can they spot you they can

632
00:28:34,360 --> 00:28:38,610
reconstruct everything you've done at

633
00:28:37,179 --> 00:28:40,480
this point this is where we'd introduce

634
00:28:38,610 --> 00:28:42,070
encryption of the data before we

635
00:28:40,480 --> 00:28:48,400
transmitted it to thwart any kind of

636
00:28:42,070 --> 00:28:51,040
reconstruction efforts so can we detect

637
00:28:48,400 --> 00:28:53,020
this bad behavior and unfortunately for

638
00:28:51,040 --> 00:28:58,240
all the defenders like me out there the

639
00:28:53,020 --> 00:29:02,500
answer is no our ids/ips tools will they

640
00:28:58,240 --> 00:29:04,090
save us probably not not currently they

641
00:29:02,500 --> 00:29:07,360
currently examine source and destination

642
00:29:04,090 --> 00:29:09,459
addresses in very crude ways to do

643
00:29:07,360 --> 00:29:13,030
blacklist lookups to match to known bad

644
00:29:09,460 --> 00:29:15,250
IPs and for rough filtering and that's

645
00:29:13,030 --> 00:29:17,440
it if we're embedding data in these

646
00:29:15,250 --> 00:29:20,290
fields an IDs is not gonna take data

647
00:29:17,440 --> 00:29:22,900
they take those fields and try and you

648
00:29:20,290 --> 00:29:25,270
know decompress them and decode them and

649
00:29:22,900 --> 00:29:27,970
turn them into data to find patterns if

650
00:29:25,270 --> 00:29:30,100
they could it would be you know calm

651
00:29:27,970 --> 00:29:31,929
potentially intensive that's a lot of

652
00:29:30,100 --> 00:29:33,040
processing power required to do that for

653
00:29:31,929 --> 00:29:34,240
every packet that goes through the

654
00:29:33,040 --> 00:29:39,190
network and it's prohibitively expensive

655
00:29:34,240 --> 00:29:40,750
to do it those fancy DLP utility you

656
00:29:39,190 --> 00:29:43,419
know systems you have at your office

657
00:29:40,750 --> 00:29:46,330
those will also fall over they are not

658
00:29:43,419 --> 00:29:48,130
inspecting address header fields for

659
00:29:46,330 --> 00:29:50,110
data they're looking strictly at the

660
00:29:48,130 --> 00:29:52,450
application layer so if you're a highly

661
00:29:50,110 --> 00:29:53,860
regulated environment using IP version 6

662
00:29:52,450 --> 00:29:57,750
this is something you should be aware of

663
00:29:53,860 --> 00:29:57,750
your DLP tools will miss this

664
00:29:59,810 --> 00:30:04,710
other issues that was full packet

665
00:30:02,580 --> 00:30:07,429
capture and one of one net flow anomaly

666
00:30:04,710 --> 00:30:10,500
detection systems are very expensive

667
00:30:07,430 --> 00:30:12,390
only well-resourced companies we're

668
00:30:10,500 --> 00:30:14,490
talking many billions of dollars we'll

669
00:30:12,390 --> 00:30:20,610
have the resources for a system capable

670
00:30:14,490 --> 00:30:22,500
of analyzing all of that data back to

671
00:30:20,610 --> 00:30:24,629
the sticker and ography part the rate of

672
00:30:22,500 --> 00:30:26,990
false positive for detecting any of this

673
00:30:24,630 --> 00:30:29,370
data is going to be extraordinarily high

674
00:30:26,990 --> 00:30:32,280
normal packets are going to look like

675
00:30:29,370 --> 00:30:34,649
they have data encrypted and encoded in

676
00:30:32,280 --> 00:30:37,290
them even if they don't because of the

677
00:30:34,650 --> 00:30:42,270
way the base 16 encoding works you'll

678
00:30:37,290 --> 00:30:45,030
get many false positives additionally

679
00:30:42,270 --> 00:30:47,910
this single source too many destination

680
00:30:45,030 --> 00:30:50,250
addresses is a very common pattern for

681
00:30:47,910 --> 00:30:51,510
example if you were to open several web

682
00:30:50,250 --> 00:30:53,970
pages on your machine you're going to

683
00:30:51,510 --> 00:30:56,040
talk to many hosts this mimics that type

684
00:30:53,970 --> 00:31:01,440
of activity it will not stand out too

685
00:30:56,040 --> 00:31:04,560
much I would like to acknowledge some

686
00:31:01,440 --> 00:31:06,750
people and give them some credit these

687
00:31:04,560 --> 00:31:08,460
guys were also came up with something

688
00:31:06,750 --> 00:31:10,680
similar to this

689
00:31:08,460 --> 00:31:13,140
Barrett Miller at the University of

690
00:31:10,680 --> 00:31:15,420
Arkansas he wrote a paper in 2008 called

691
00:31:13,140 --> 00:31:17,550
steganography an IP version 6 he

692
00:31:15,420 --> 00:31:23,040
discussed embedding data in the source

693
00:31:17,550 --> 00:31:24,570
address fields these folks don't have

694
00:31:23,040 --> 00:31:26,700
the university that they were located at

695
00:31:24,570 --> 00:31:28,470
also did concretion in steganography and

696
00:31:26,700 --> 00:31:32,190
the source address fields of ipv6

697
00:31:28,470 --> 00:31:37,050
addresses this is a valid technique but

698
00:31:32,190 --> 00:31:38,880
there are some drawbacks to it first

699
00:31:37,050 --> 00:31:42,080
these will generate a lot of noise at

700
00:31:38,880 --> 00:31:44,880
your source and so a very well at a

701
00:31:42,080 --> 00:31:47,280
well-tuned IDs in system like that will

702
00:31:44,880 --> 00:31:49,100
detect that you suddenly have a lot more

703
00:31:47,280 --> 00:31:51,480
machines on your network than you should

704
00:31:49,100 --> 00:31:52,709
in fact it's a pretty big giveaway that

705
00:31:51,480 --> 00:31:54,330
when you've got more addresses on a

706
00:31:52,710 --> 00:32:00,210
subnet than actual physical machines

707
00:31:54,330 --> 00:32:02,990
they're okay and that concludes it does

708
00:32:00,210 --> 00:32:02,990
anyone have any questions

709
00:32:03,650 --> 00:32:08,850
suggestion regarding the retransmit

710
00:32:06,720 --> 00:32:10,470
issue where if you didn't get a baguette

711
00:32:08,850 --> 00:32:12,658
through you'd have to find a way to get

712
00:32:10,470 --> 00:32:14,549
that again you could use tools that

713
00:32:12,659 --> 00:32:16,740
would do more air correction so you kind

714
00:32:14,549 --> 00:32:18,360
of spread your spread to bits over

715
00:32:16,740 --> 00:32:20,250
multiple packets and a lot easier

716
00:32:18,360 --> 00:32:21,799
reconstruction on the farther end even

717
00:32:20,250 --> 00:32:25,110
if it didn't get every single packet and

718
00:32:21,799 --> 00:32:28,500
regarding the in encryption possible

719
00:32:25,110 --> 00:32:30,570
step freezing encryption so the GPG tool

720
00:32:28,500 --> 00:32:32,299
will both encrypt and compress at the

721
00:32:30,570 --> 00:32:35,100
same time right so that might be a good

722
00:32:32,299 --> 00:32:38,639
thing to use to kind of take care of the

723
00:32:35,100 --> 00:32:40,379
two birds with one stone however I don't

724
00:32:38,640 --> 00:32:42,240
know if you'd be able to give the board

725
00:32:40,380 --> 00:32:44,280
aircraft and involved with that but if

726
00:32:42,240 --> 00:32:45,600
you do all three in same you could

727
00:32:44,280 --> 00:33:01,139
probably put the for error correction in

728
00:32:45,600 --> 00:33:04,439
afterwards yeah yes sir so the flow

729
00:33:01,140 --> 00:33:05,820
label field is diff you can define that

730
00:33:04,440 --> 00:33:08,880
so we ask if you can manipulate that

731
00:33:05,820 --> 00:33:10,470
using the scapular referenced it's a

732
00:33:08,880 --> 00:33:12,510
it's a tool that allows you to craft

733
00:33:10,470 --> 00:33:14,760
arbitrary packets so if you wanted to

734
00:33:12,510 --> 00:33:17,370
test an IDs and you wanted to send

735
00:33:14,760 --> 00:33:19,530
traffic that would trigger it you would

736
00:33:17,370 --> 00:33:21,600
use a tool like that that allows you to

737
00:33:19,530 --> 00:33:52,379
change that header field to whatever

738
00:33:21,600 --> 00:33:55,260
value you would like that is a potential

739
00:33:52,380 --> 00:33:57,299
the I think the risk with that is is at

740
00:33:55,260 --> 00:34:00,450
the flow label is sort of assigned per

741
00:33:57,299 --> 00:34:02,250
session so if I have like for example if

742
00:34:00,450 --> 00:34:05,460
I have host hey and host be talking to

743
00:34:02,250 --> 00:34:07,289
each other on the web server of Haiti

744
00:34:05,460 --> 00:34:08,879
port 80 for example that might get

745
00:34:07,289 --> 00:34:11,489
flagged with one flow label but then if

746
00:34:08,879 --> 00:34:13,109
they initiate a an SSL connection on 443

747
00:34:11,489 --> 00:34:15,629
that would potentially get a different

748
00:34:13,109 --> 00:34:17,460
full label and there's no deterministic

749
00:34:15,629 --> 00:34:22,469
mechanism for how those were assigned

750
00:34:17,460 --> 00:34:24,829
they're sort of random any other

751
00:34:22,469 --> 00:34:24,828
questions

752
00:34:25,099 --> 00:34:31,530
excellent thank you everyone

753
00:34:27,810 --> 00:34:31,529
[Applause]

