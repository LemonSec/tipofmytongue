1
00:00:00,030 --> 00:00:04,080
so yeah this the sukkah is making Alexa

2
00:00:02,639 --> 00:00:06,240
do your dirty work

3
00:00:04,080 --> 00:00:08,849
proving your toolkit with serverless

4
00:00:06,240 --> 00:00:11,429
computing so it's not anything as far as

5
00:00:08,849 --> 00:00:13,290
like a security audit of blame to

6
00:00:11,429 --> 00:00:15,570
function service functionality in

7
00:00:13,290 --> 00:00:16,830
general this is just how we as

8
00:00:15,570 --> 00:00:18,960
empathetic practitioners could

9
00:00:16,830 --> 00:00:20,849
potentially use serverless computing

10
00:00:18,960 --> 00:00:23,670
which is the new hot thing as you've

11
00:00:20,850 --> 00:00:25,609
probably you've heard how to use it to

12
00:00:23,670 --> 00:00:27,930
improve our daily lives make it easier

13
00:00:25,609 --> 00:00:29,279
most of this will be focused on from a

14
00:00:27,930 --> 00:00:33,090
Red Team perspective but I'm trying to

15
00:00:29,279 --> 00:00:34,920
throw in some insights just what I would

16
00:00:33,090 --> 00:00:36,300
think might be useful from Blue Team

17
00:00:34,920 --> 00:00:38,100
perspective as well but at least

18
00:00:36,300 --> 00:00:40,290
something to maybe get you thinking

19
00:00:38,100 --> 00:00:52,289
about how you could how you could use a

20
00:00:40,290 --> 00:00:54,030
service computing he's already kind of

21
00:00:52,289 --> 00:00:56,699
stole my fire there yet consultant and

22
00:00:54,030 --> 00:00:59,579
CC group red teaming cackalacky in the

23
00:00:56,699 --> 00:01:01,349
flag Wow

24
00:00:59,579 --> 00:01:03,690
all right so here's the agenda where

25
00:01:01,350 --> 00:01:05,610
were you know going over I'm a brief

26
00:01:03,690 --> 00:01:06,990
introduction to what is server lists if

27
00:01:05,610 --> 00:01:10,439
you haven't heard of it before why we

28
00:01:06,990 --> 00:01:13,199
should care how to get started Goosen go

29
00:01:10,439 --> 00:01:15,240
through some use cases for Red Team try

30
00:01:13,200 --> 00:01:16,920
to do some live demos god I don't know

31
00:01:15,240 --> 00:01:19,500
why I'm even like attempting to try this

32
00:01:16,920 --> 00:01:21,479
but we'll see how it goes I'll go over

33
00:01:19,500 --> 00:01:30,470
my short list of ideas for blue team and

34
00:01:21,479 --> 00:01:32,280
have a Q&A so what is server lists it

35
00:01:30,470 --> 00:01:34,950
despite the name there are servers

36
00:01:32,280 --> 00:01:38,009
involved I don't know why they they call

37
00:01:34,950 --> 00:01:39,450
a server list but basically what it is

38
00:01:38,009 --> 00:01:41,130
is you have to worry about the servers

39
00:01:39,450 --> 00:01:43,079
anymore you're just handling the code so

40
00:01:41,130 --> 00:01:44,250
it's kind of like health originally

41
00:01:43,079 --> 00:01:45,600
there was the monolithic large

42
00:01:44,250 --> 00:01:47,939
application you had to deal with the

43
00:01:45,600 --> 00:01:48,780
server every part of it then it was kind

44
00:01:47,939 --> 00:01:51,059
of broken down we have the

45
00:01:48,780 --> 00:01:52,409
containerization to where you're just

46
00:01:51,060 --> 00:01:54,960
dealing with the app itself but you

47
00:01:52,409 --> 00:01:56,549
still have the full codebase serverless

48
00:01:54,960 --> 00:01:59,610
is just breaking that down one step

49
00:01:56,549 --> 00:02:01,740
further to where you are in charge of

50
00:01:59,610 --> 00:02:04,380
the runtime that's going to handle one

51
00:02:01,740 --> 00:02:07,000
specific part of the ideally the entire

52
00:02:04,380 --> 00:02:09,758
like codebase or the application

53
00:02:07,000 --> 00:02:11,930
the work flow of the entire application

54
00:02:09,758 --> 00:02:13,190
so functions and I have that little

55
00:02:11,930 --> 00:02:16,070
lambda symbol there that's just kind of

56
00:02:13,190 --> 00:02:18,109
a popular way to summarize obviously

57
00:02:16,070 --> 00:02:19,579
that's the lambda simple I have that and

58
00:02:18,110 --> 00:02:21,280
slide sometime so if you see that that's

59
00:02:19,580 --> 00:02:23,600
what I'm referring to as a function

60
00:02:21,280 --> 00:02:25,820
they're pretty much like little docker

61
00:02:23,600 --> 00:02:28,130
containers that are short-lived the

62
00:02:25,820 --> 00:02:30,109
amount of time I'm sorry I guess I

63
00:02:28,130 --> 00:02:33,019
should preface that with what I mean by

64
00:02:30,110 --> 00:02:34,970
short-lived is so for example in AWS

65
00:02:33,020 --> 00:02:37,670
lambda there's a max time limit I think

66
00:02:34,970 --> 00:02:39,590
of 15 minutes before the container will

67
00:02:37,670 --> 00:02:42,559
just die and delete everything that was

68
00:02:39,590 --> 00:02:45,110
in memory at the time and there's some

69
00:02:42,560 --> 00:02:48,650
caveats to that if it's like an HTTP

70
00:02:45,110 --> 00:02:51,170
based lambda functions don't only like

71
00:02:48,650 --> 00:02:53,270
five minutes but each provider has their

72
00:02:51,170 --> 00:02:55,429
own rules but essentially yeah these are

73
00:02:53,270 --> 00:02:58,070
like little docker containers with the

74
00:02:55,430 --> 00:03:01,490
purpose of just doing one task finishing

75
00:02:58,070 --> 00:03:05,450
it and then being done but then if that

76
00:03:01,490 --> 00:03:07,430
doesn't really make sense oh oh it's got

77
00:03:05,450 --> 00:03:08,570
to move one thinks so another thing I

78
00:03:07,430 --> 00:03:10,190
want to mention we're me talking a lot

79
00:03:08,570 --> 00:03:12,350
about the service framework so if you

80
00:03:10,190 --> 00:03:14,840
seen this logo before trying to get

81
00:03:12,350 --> 00:03:16,400
confused with the two-bit server lists

82
00:03:14,840 --> 00:03:17,660
is just the idea of like alright we're

83
00:03:16,400 --> 00:03:20,680
gonna like really break down these

84
00:03:17,660 --> 00:03:23,120
functions into isolated little runtimes

85
00:03:20,680 --> 00:03:24,410
the service framework is just one of the

86
00:03:23,120 --> 00:03:26,600
many frameworks out there there's a

87
00:03:24,410 --> 00:03:28,130
bunch of different ones that basically

88
00:03:26,600 --> 00:03:30,560
abstract this even further to make it

89
00:03:28,130 --> 00:03:33,440
simpler for someone like me who's never

90
00:03:30,560 --> 00:03:34,850
done lamed of functions or anything just

91
00:03:33,440 --> 00:03:38,180
make it a little bit easier to get

92
00:03:34,850 --> 00:03:39,560
started and manage deployed deployment

93
00:03:38,180 --> 00:03:44,930
packaging of water code updating your

94
00:03:39,560 --> 00:03:46,400
code stuff like that so so why is this

95
00:03:44,930 --> 00:03:47,000
matter like why would this ever be

96
00:03:46,400 --> 00:03:50,030
useful

97
00:03:47,000 --> 00:03:52,070
it makes your deployment of code super

98
00:03:50,030 --> 00:03:53,150
fast super easy updates again you have

99
00:03:52,070 --> 00:03:55,660
to worry about a server you not forward

100
00:03:53,150 --> 00:03:58,190
about patching that's on someone else's

101
00:03:55,660 --> 00:04:00,500
checklist for the day someone it AWS or

102
00:03:58,190 --> 00:04:02,780
Google what's really great is you only

103
00:04:00,500 --> 00:04:03,980
pay for what you use and what I mean by

104
00:04:02,780 --> 00:04:05,870
that is literally you're only paying

105
00:04:03,980 --> 00:04:07,640
every time a request is made every time

106
00:04:05,870 --> 00:04:09,200
an event happens and what kind of go

107
00:04:07,640 --> 00:04:11,029
into little more detail about that but I

108
00:04:09,200 --> 00:04:14,089
like to compare it to like think about

109
00:04:11,030 --> 00:04:16,339
an s3 bucket I know there is obviously

110
00:04:14,090 --> 00:04:18,709
some pricing like for the persistent

111
00:04:16,339 --> 00:04:20,298
storage but you're paid more by like how

112
00:04:18,709 --> 00:04:22,009
much it's actually being used but that

113
00:04:20,298 --> 00:04:23,210
it's really great about Cerberus and

114
00:04:22,009 --> 00:04:27,129
that's across all the providers you're

115
00:04:23,210 --> 00:04:30,680
only getting charged for what you use

116
00:04:27,129 --> 00:04:32,389
let's see the next thing is the

117
00:04:30,680 --> 00:04:35,270
scalability part it makes scalability

118
00:04:32,389 --> 00:04:36,889
super easy like if I had to scale some

119
00:04:35,270 --> 00:04:38,628
application for a million users I would

120
00:04:36,889 --> 00:04:40,699
just give up and quick so I'm not a

121
00:04:38,629 --> 00:04:42,949
great developer by any means but the

122
00:04:40,699 --> 00:04:45,319
service the way the whole platform works

123
00:04:42,949 --> 00:04:47,449
is that it can it's got that built in so

124
00:04:45,319 --> 00:04:49,280
whether or not you have five users or

125
00:04:47,449 --> 00:04:52,490
million users it's just going to cost

126
00:04:49,280 --> 00:04:54,020
you more based on the users for the most

127
00:04:52,490 --> 00:04:55,250
part I mean obviously depends on the

128
00:04:54,020 --> 00:04:58,359
application you're designing but you

129
00:04:55,250 --> 00:05:01,219
really don't feel worried nearly about

130
00:04:58,360 --> 00:05:05,650
scaling out or if you need to it's gonna

131
00:05:01,219 --> 00:05:08,180
be a lot simpler to implement in general

132
00:05:05,650 --> 00:05:10,698
so before we move on I didn't want to

133
00:05:08,180 --> 00:05:13,340
miss in some previous work kind of in

134
00:05:10,699 --> 00:05:14,629
the service area a friend of mine you

135
00:05:13,340 --> 00:05:16,310
probably know his name Brady oil who's

136
00:05:14,629 --> 00:05:17,949
not here today unfortunately was

137
00:05:16,310 --> 00:05:20,750
probably the first I could find actually

138
00:05:17,949 --> 00:05:22,550
on anything that at the time I wasn't

139
00:05:20,750 --> 00:05:26,990
called serverless it was literally he

140
00:05:22,550 --> 00:05:29,479
wrote a blog about making his Alexa

141
00:05:26,990 --> 00:05:31,520
device do a port scan using some Python

142
00:05:29,479 --> 00:05:34,099
scripts or whatever at the time the

143
00:05:31,520 --> 00:05:36,440
thought was like a land of skill can

144
00:05:34,099 --> 00:05:38,210
only run Python like it's just a Python

145
00:05:36,440 --> 00:05:39,830
runtime some of the examples I want to

146
00:05:38,210 --> 00:05:42,948
show today is like you can literally run

147
00:05:39,830 --> 00:05:44,060
whatever you want to as long as I can

148
00:05:42,949 --> 00:05:47,599
kind like I was saying it's okay it's

149
00:05:44,060 --> 00:05:49,569
like a containerized ec2 instance you

150
00:05:47,599 --> 00:05:51,710
can run any binary if as long as the

151
00:05:49,569 --> 00:05:54,289
libraries are available so like a static

152
00:05:51,710 --> 00:05:56,628
binary will run fine so I'll be showing

153
00:05:54,289 --> 00:06:00,229
some like examples of using in map even

154
00:05:56,629 --> 00:06:01,460
headless chrome stuff like that so yeah

155
00:06:00,229 --> 00:06:03,199
that was the first game block of fine

156
00:06:01,460 --> 00:06:04,638
the next one that's pretty recent thing

157
00:06:03,199 --> 00:06:07,629
in past year is actually a really good

158
00:06:04,639 --> 00:06:12,860
resource elf I've got to show a little

159
00:06:07,629 --> 00:06:14,090
pictures here I don't know why it's not

160
00:06:12,860 --> 00:06:17,150
loading my computer but I'm controlling

161
00:06:14,090 --> 00:06:19,400
this from my phone yep there's this blog

162
00:06:17,150 --> 00:06:20,568
yeah rotten op is the next one that's

163
00:06:19,400 --> 00:06:22,190
one shows list here cuz this is

164
00:06:20,569 --> 00:06:24,349
definitely if there's any web pin tested

165
00:06:22,190 --> 00:06:28,250
out here he's got a lot of very useful

166
00:06:24,349 --> 00:06:31,009
examples specifically if you see over

167
00:06:28,250 --> 00:06:33,580
here the gopher redirect or the server

168
00:06:31,009 --> 00:06:37,539
site request forgery slack notified

169
00:06:33,580 --> 00:06:39,039
slack notifier essentially if you went

170
00:06:37,539 --> 00:06:41,979
if you're doing a wet pin test and you

171
00:06:39,039 --> 00:06:43,330
found let's say potentially in ecstasy

172
00:06:41,979 --> 00:06:46,150
and you want to see if it'll go outbound

173
00:06:43,330 --> 00:06:47,590
but it has to have a valid SSL you don't

174
00:06:46,150 --> 00:06:49,299
wanna spend the time maybe you don't

175
00:06:47,590 --> 00:06:51,280
already have that set up it's really

176
00:06:49,300 --> 00:06:53,969
easy to set this stuff up with service

177
00:06:51,280 --> 00:06:56,650
functions and he's got full source code

178
00:06:53,969 --> 00:06:58,930
which that blog I'll have the link to it

179
00:06:56,650 --> 00:07:00,549
I mean the next one another one more

180
00:06:58,930 --> 00:07:03,129
reason one that's more along the terms

181
00:07:00,550 --> 00:07:06,940
of red teaming was from Dominic from MD

182
00:07:03,129 --> 00:07:08,590
SEC which is about making serverless web

183
00:07:06,940 --> 00:07:10,300
bugs and what he means by some web bugs

184
00:07:08,590 --> 00:07:12,150
not kind of stolen that turn to you is

185
00:07:10,300 --> 00:07:14,379
it's kinda like a honey token but

186
00:07:12,150 --> 00:07:18,460
basically the the purpose is for

187
00:07:14,379 --> 00:07:20,919
tracking either like a target opening up

188
00:07:18,460 --> 00:07:24,159
a efficient email or target open up a

189
00:07:20,919 --> 00:07:26,258
website again using these unique URLs

190
00:07:24,159 --> 00:07:28,569
that will track who's opening what he

191
00:07:26,259 --> 00:07:30,340
goes through an example that it's pretty

192
00:07:28,569 --> 00:07:33,159
good as far as how using it with Python

193
00:07:30,340 --> 00:07:34,840
Minds in a great language of JavaScript

194
00:07:33,159 --> 00:07:40,680
so we'll look into see that here in a

195
00:07:34,840 --> 00:07:40,679
second all right

196
00:07:41,370 --> 00:07:45,430
so how do we get started

197
00:07:43,569 --> 00:07:48,639
what I'm going to go through today just

198
00:07:45,430 --> 00:07:50,849
real quickly actually I don't know if

199
00:07:48,639 --> 00:07:53,740
that's gonna work on here well let's see

200
00:07:50,849 --> 00:07:55,960
essentially all it really takes for the

201
00:07:53,740 --> 00:07:58,360
circles framework is you do have you do

202
00:07:55,960 --> 00:07:59,589
have to have no GS installed that

203
00:07:58,360 --> 00:08:00,759
doesn't mean you have to use neo GS for

204
00:07:59,589 --> 00:08:02,259
any of your skills that's just to use

205
00:08:00,759 --> 00:08:05,379
the surrealist framework it does support

206
00:08:02,259 --> 00:08:08,889
obviously all the different runtimes AWS

207
00:08:05,379 --> 00:08:13,569
for instance sports going Python even

208
00:08:08,889 --> 00:08:15,699
Ruby now no GS bunch of others yeah this

209
00:08:13,569 --> 00:08:22,080
is just me using for the for installing

210
00:08:15,699 --> 00:08:22,080
the service framework see if I can I

211
00:08:22,409 --> 00:08:27,629
might have to skip the installation demo

212
00:08:25,180 --> 00:08:27,629
here but

213
00:08:34,950 --> 00:08:39,219
this isn't working as well as I thought

214
00:08:37,269 --> 00:08:41,880
yeah no one was to see installation

215
00:08:39,219 --> 00:08:45,160
anyway sooo it's a NPM installed

216
00:08:41,880 --> 00:08:47,980
serverless and at that point all it

217
00:08:45,160 --> 00:08:50,889
really is is you'll have your source

218
00:08:47,980 --> 00:08:53,709
code so let's just say already have we

219
00:08:50,889 --> 00:08:58,930
already have that installed I can't find

220
00:08:53,709 --> 00:09:02,018
my mouse over here in this case I'm

221
00:08:58,930 --> 00:09:04,269
using a new GS as my frame the back end

222
00:09:02,019 --> 00:09:07,480
for the source code what service is

223
00:09:04,269 --> 00:09:12,670
doing is the serverless files a yam will

224
00:09:07,480 --> 00:09:14,350
file configures all the options you want

225
00:09:12,670 --> 00:09:17,260
to send the it's basically going to take

226
00:09:14,350 --> 00:09:19,750
care of like if I want to define in this

227
00:09:17,260 --> 00:09:22,329
case the DynamoDB database to set up

228
00:09:19,750 --> 00:09:23,949
that I want to store some data in or set

229
00:09:22,329 --> 00:09:25,300
up an s3 buckets instead of having to

230
00:09:23,949 --> 00:09:28,000
like manually go through the process of

231
00:09:25,300 --> 00:09:29,709
doing that either through the AWS

232
00:09:28,000 --> 00:09:31,620
command line or go through the GUI

233
00:09:29,709 --> 00:09:34,329
serverless can take care of that for you

234
00:09:31,620 --> 00:09:36,730
deploy it delete it update it whatever

235
00:09:34,329 --> 00:09:39,609
whatever you wanted to do all within an

236
00:09:36,730 --> 00:09:42,550
easy config file here so here I'm just

237
00:09:39,610 --> 00:09:45,149
saying name AWS I'm using this is the

238
00:09:42,550 --> 00:09:47,380
provider the runtime here is nodejs

239
00:09:45,149 --> 00:09:49,449
stage the reason why you see this is

240
00:09:47,380 --> 00:09:51,250
typically you'd see stages dev or prod

241
00:09:49,449 --> 00:09:52,990
or whatever but this actually defines

242
00:09:51,250 --> 00:09:55,959
part of the URI path if you're making an

243
00:09:52,990 --> 00:09:57,339
HTTP service so in this example I'm

244
00:09:55,959 --> 00:09:58,989
trying to make something looks like you

245
00:09:57,339 --> 00:10:03,160
know those like UTM trackers or whatever

246
00:09:58,990 --> 00:10:04,930
so this is me saying the stage is UTM is

247
00:10:03,160 --> 00:10:09,279
literally gonna put that in like it'll

248
00:10:04,930 --> 00:10:12,370
be execute dot AWS Amazon in whatever

249
00:10:09,279 --> 00:10:15,490
comm slash UTM then whatever else I

250
00:10:12,370 --> 00:10:18,459
defined some and then here's some other

251
00:10:15,490 --> 00:10:20,680
variables I can you can define custom

252
00:10:18,459 --> 00:10:22,869
variables for the environments what this

253
00:10:20,680 --> 00:10:28,750
is doing is going to do some crappy if

254
00:10:22,870 --> 00:10:30,850
I'm ghetto encryption to make it try to

255
00:10:28,750 --> 00:10:37,540
obscure the fact that I'm tracking users

256
00:10:30,850 --> 00:10:38,800
I guess that's what the point is so yeah

257
00:10:37,540 --> 00:10:41,399
I know if anyone took a screenshot of

258
00:10:38,800 --> 00:10:41,399
that I'm screwed

259
00:10:43,630 --> 00:10:48,740
so I took a bad choice by taking the

260
00:10:46,310 --> 00:10:51,290
wireless mic here we get back to the

261
00:10:48,740 --> 00:10:57,710
slides then for now yeah if you don't

262
00:10:51,290 --> 00:11:13,490
mind if it's possible perfect

263
00:10:57,710 --> 00:11:14,600
whoa we'll check hot mic all right this

264
00:11:13,490 --> 00:11:17,570
is never going on the internet right

265
00:11:14,600 --> 00:11:28,940
like everything I say here's offer I was

266
00:11:17,570 --> 00:11:37,160
kidding he's blessed then he's very

267
00:11:28,940 --> 00:11:41,890
blessed here we go in the building okay

268
00:11:37,160 --> 00:11:43,670
let's see so just to save some time but

269
00:11:41,890 --> 00:11:45,080
essentially once I had my code ready

270
00:11:43,670 --> 00:11:47,780
here and this is just like any standard

271
00:11:45,080 --> 00:11:50,390
no GS package this could be a Python set

272
00:11:47,780 --> 00:11:53,720
of Python scripts which you're ready you

273
00:11:50,390 --> 00:11:55,760
literally just run serverless deploy and

274
00:11:53,720 --> 00:11:57,170
based on that service yam will file F

275
00:11:55,760 --> 00:12:01,040
configured that takes care of everything

276
00:11:57,170 --> 00:12:04,550
and up here you can see once it finished

277
00:12:01,040 --> 00:12:07,550
it has this this is what the base your

278
00:12:04,550 --> 00:12:08,900
URL looks like now obviously from a blue

279
00:12:07,550 --> 00:12:11,660
team perspective you could probably

280
00:12:08,900 --> 00:12:13,310
track them down on the execute - api api

281
00:12:11,660 --> 00:12:15,410
i mean there's gonna be legitimate usage

282
00:12:13,310 --> 00:12:17,180
of this but if some red team's just

283
00:12:15,410 --> 00:12:19,130
consistently consistently using this

284
00:12:17,180 --> 00:12:22,400
that's pulling out the best idea from

285
00:12:19,130 --> 00:12:24,110
Retton perspective but my tip there be

286
00:12:22,400 --> 00:12:27,350
like maybe front this with cloud front

287
00:12:24,110 --> 00:12:28,940
or any other type of redirector to make

288
00:12:27,350 --> 00:12:31,160
it a little more unique but really the

289
00:12:28,940 --> 00:12:33,380
purpose of this is just literally once I

290
00:12:31,160 --> 00:12:35,480
have written the code I can spin this up

291
00:12:33,380 --> 00:12:37,189
take it down making modifications just

292
00:12:35,480 --> 00:12:39,230
so quickly not to worry about that like

293
00:12:37,190 --> 00:12:49,430
long-term management of the

294
00:12:39,230 --> 00:12:50,840
infrastructure so let's see so yeah we

295
00:12:49,430 --> 00:12:53,979
skipped that democrat kind of went off a

296
00:12:50,840 --> 00:12:53,980
trail there a little bit but

297
00:12:55,429 --> 00:13:01,319
so yes I don't get too sidetracked oh

298
00:12:57,959 --> 00:13:02,248
and make sure dude my things in correct

299
00:13:01,319 --> 00:13:04,199
order so yeah we're gonna go over some

300
00:13:02,249 --> 00:13:05,699
common testing how these will be demos

301
00:13:04,199 --> 00:13:08,159
that'll probably not work but it's cool

302
00:13:05,699 --> 00:13:11,309
right some common tasks that I've listed

303
00:13:08,159 --> 00:13:13,289
here from a Red Team perspective one

304
00:13:11,309 --> 00:13:14,759
performing active analysis against the

305
00:13:13,289 --> 00:13:17,609
target so that would be maybe your like

306
00:13:14,759 --> 00:13:20,009
your pre exploitation phase where we're

307
00:13:17,609 --> 00:13:22,469
trying to maybe do some in map scans of

308
00:13:20,009 --> 00:13:24,599
the target environments we're probing at

309
00:13:22,469 --> 00:13:25,739
a vulnerability some service we're not

310
00:13:24,599 --> 00:13:27,539
sure something's vulnerable we're

311
00:13:25,739 --> 00:13:29,579
probing at it stuff that a blue team

312
00:13:27,539 --> 00:13:32,819
could pick up if they're there looking

313
00:13:29,579 --> 00:13:35,299
at it next one is just read deploying

314
00:13:32,819 --> 00:13:37,529
redirector so whether it's for fishing

315
00:13:35,299 --> 00:13:39,299
or your command and control traffic

316
00:13:37,529 --> 00:13:41,489
having multiple domains that are

317
00:13:39,299 --> 00:13:42,749
isolated from each other so that if one

318
00:13:41,489 --> 00:13:44,129
gets burned you're not immediately gonna

319
00:13:42,749 --> 00:13:46,919
burn the rest of your your

320
00:13:44,129 --> 00:13:49,769
infrastructure and then lastly creating

321
00:13:46,919 --> 00:13:51,179
and testing payloads there's always at

322
00:13:49,769 --> 00:13:53,219
least hurry personally in the past I've

323
00:13:51,179 --> 00:13:54,419
had a couple fails were they've got

324
00:13:53,219 --> 00:13:55,829
leave behind my name and one of the

325
00:13:54,419 --> 00:13:58,139
payloads and leave them like the debug

326
00:13:55,829 --> 00:13:59,638
symbols and then instantly like the blue

327
00:13:58,139 --> 00:14:07,169
team members like hey it's the red team

328
00:13:59,639 --> 00:14:10,979
great so so for the first one we're kind

329
00:14:07,169 --> 00:14:13,970
of gonna segments are going to the fails

330
00:14:10,979 --> 00:14:18,689
or examples of fail so while performing

331
00:14:13,970 --> 00:14:20,999
activeanalysis let's see so in this case

332
00:14:18,689 --> 00:14:22,829
this example we're gonna go with a

333
00:14:20,999 --> 00:14:25,439
shared VPN so we have multiple Red Team

334
00:14:22,829 --> 00:14:27,799
operators analyzing a vulnerability and

335
00:14:25,439 --> 00:14:29,909
I like against a target service and

336
00:14:27,799 --> 00:14:31,348
unknowingly - then they get detected by

337
00:14:29,909 --> 00:14:33,439
the by the blue team so the blue team

338
00:14:31,349 --> 00:14:35,339
sees the activity knows it's malicious

339
00:14:33,439 --> 00:14:37,709
whether or not they know it's red team

340
00:14:35,339 --> 00:14:39,689
they decide not to like make themselves

341
00:14:37,709 --> 00:14:44,848
known so they just kind of silently take

342
00:14:39,689 --> 00:14:47,129
note of what happened so then a week

343
00:14:44,849 --> 00:14:49,079
later the red team mistakenly uses the

344
00:14:47,129 --> 00:14:51,409
same buna VPN connection from the same

345
00:14:49,079 --> 00:14:55,079
ip address to exploit that service and

346
00:14:51,409 --> 00:14:57,379
the targets IP the targets response team

347
00:14:55,079 --> 00:14:59,519
immediately detects it shuts him down

348
00:14:57,379 --> 00:15:02,099
ruins epilim like the the vulnerable

349
00:14:59,519 --> 00:15:03,149
services then blocked off because at

350
00:15:02,099 --> 00:15:04,739
that point they know all right they're

351
00:15:03,149 --> 00:15:06,420
definitely going after the service and

352
00:15:04,739 --> 00:15:08,730
it pretty much burns up

353
00:15:06,420 --> 00:15:10,170
that target so obviously that's not

354
00:15:08,730 --> 00:15:12,810
something like a good red team would do

355
00:15:10,170 --> 00:15:15,660
but I mean we all make mistakes so it

356
00:15:12,810 --> 00:15:18,930
can happen the use case here again for

357
00:15:15,660 --> 00:15:24,569
the Surrealists doing something like

358
00:15:18,930 --> 00:15:26,160
what was this one I think I didn't have

359
00:15:24,570 --> 00:15:29,730
a dim array for this one it's all good

360
00:15:26,160 --> 00:15:31,469
but using serverless - let's say I don't

361
00:15:29,730 --> 00:15:33,420
actually you know sorry I'm completely

362
00:15:31,470 --> 00:15:36,570
off this in this case we'll just go with

363
00:15:33,420 --> 00:15:38,130
a running in app scripts and show how

364
00:15:36,570 --> 00:15:39,990
you could just do this to where it look

365
00:15:38,130 --> 00:15:43,470
like it's coming from AWS just some

366
00:15:39,990 --> 00:15:45,390
random like one of the AWS IP addresses

367
00:15:43,470 --> 00:15:57,240
instead of the same VPN server you're

368
00:15:45,390 --> 00:16:04,170
using so let's see that's about that

369
00:15:57,240 --> 00:16:06,960
message all right so in this case I'm

370
00:16:04,170 --> 00:16:08,670
kind of still working on finalizing this

371
00:16:06,960 --> 00:16:09,840
I know I've got a couple of these that I

372
00:16:08,670 --> 00:16:12,930
can actually share out the source code

373
00:16:09,840 --> 00:16:14,430
for that are somewhat working but I was

374
00:16:12,930 --> 00:16:15,660
ideal I was working on kind of like a

375
00:16:14,430 --> 00:16:17,660
server list kit where you'd have all

376
00:16:15,660 --> 00:16:20,000
these different tools within one

377
00:16:17,660 --> 00:16:23,850
framework so here i'm when i'm running

378
00:16:20,000 --> 00:16:26,720
sls kit in map its instead of actually

379
00:16:23,850 --> 00:16:36,690
just straight-up running in map it is

380
00:16:26,720 --> 00:16:38,640
let me get there real quick it's

381
00:16:36,690 --> 00:16:41,490
basically run in this no TS script that

382
00:16:38,640 --> 00:16:44,189
then invokes a surplus function that

383
00:16:41,490 --> 00:16:46,890
already have deployed and that takes

384
00:16:44,190 --> 00:16:48,810
care of obviously performing the scan as

385
00:16:46,890 --> 00:16:50,939
well as whatever the results are it

386
00:16:48,810 --> 00:16:53,339
saves that to an XML file to another

387
00:16:50,940 --> 00:16:54,510
suite bucket temporarily downloads that

388
00:16:53,340 --> 00:16:56,310
to my clients and then deletes

389
00:16:54,510 --> 00:16:57,720
everything so it's a lot of moving

390
00:16:56,310 --> 00:16:59,250
pieces and this is kind of like a

391
00:16:57,720 --> 00:17:01,290
convoluted example but it's just kind of

392
00:16:59,250 --> 00:17:02,490
the point being again just to show you

393
00:17:01,290 --> 00:17:07,199
they're like you can do some cool stuff

394
00:17:02,490 --> 00:17:08,760
with service computing so in this case

395
00:17:07,199 --> 00:17:11,190
I'm gonna be scanning just an IP address

396
00:17:08,760 --> 00:17:13,230
that I own please don't take note of it

397
00:17:11,190 --> 00:17:14,699
and start scanning my websites but I'm

398
00:17:13,230 --> 00:17:16,020
sure Garret who's in the crowd somewhere

399
00:17:14,699 --> 00:17:18,449
is going to do that or he's already

400
00:17:16,020 --> 00:17:19,950
doing that but so here you see

401
00:17:18,449 --> 00:17:22,890
initializing service server

402
00:17:19,950 --> 00:17:27,480
in maps can and comes back and say is

403
00:17:22,890 --> 00:17:30,150
port 80 open you do the same thing I

404
00:17:27,480 --> 00:17:31,800
mean any type of scan one thing that I

405
00:17:30,150 --> 00:17:33,330
found that's kind of limited to the

406
00:17:31,800 --> 00:17:34,950
server list framework is there's no easy

407
00:17:33,330 --> 00:17:38,540
way to just say like alright I wanted to

408
00:17:34,950 --> 00:17:40,680
play this out to every region possible

409
00:17:38,540 --> 00:17:45,960
that's not a feature that's supported

410
00:17:40,680 --> 00:17:47,580
yet so right now I just have like a oops

411
00:17:45,960 --> 00:17:49,650
install script just basically a bash

412
00:17:47,580 --> 00:17:53,610
loop that goes through it says service

413
00:17:49,650 --> 00:17:55,530
deploy to every region so and that

414
00:17:53,610 --> 00:17:57,000
within the script itself if you can tell

415
00:17:55,530 --> 00:17:58,530
how many reasons you have deployed and

416
00:17:57,000 --> 00:18:00,270
then try to randomize that so that every

417
00:17:58,530 --> 00:18:01,410
time you're on a map it's gonna be

418
00:18:00,270 --> 00:18:03,629
coming from a different IP address

419
00:18:01,410 --> 00:18:07,760
instead of just the same same lambda

420
00:18:03,630 --> 00:18:11,330
function so that's the idea there and

421
00:18:07,760 --> 00:18:17,910
just one more example on a scanning side

422
00:18:11,330 --> 00:18:23,580
forded go Buster as well make a prayer

423
00:18:17,910 --> 00:18:25,830
to the demo gods quick and so this is

424
00:18:23,580 --> 00:18:28,020
actually going to take a local word list

425
00:18:25,830 --> 00:18:30,720
that I have on my system uploaded to s3

426
00:18:28,020 --> 00:18:33,510
buckets the remote lambda functions can

427
00:18:30,720 --> 00:18:36,840
retrieve that run it with go Buster save

428
00:18:33,510 --> 00:18:38,190
the results and we're down would in this

429
00:18:36,840 --> 00:18:40,679
case just gonna return to the this

430
00:18:38,190 --> 00:18:45,920
standard out but also has the capability

431
00:18:40,680 --> 00:18:48,540
to download the results as well okay I

432
00:18:45,920 --> 00:18:50,640
had a little error there but you get the

433
00:18:48,540 --> 00:18:54,060
idea it should work I didn't pray long

434
00:18:50,640 --> 00:18:55,320
enough to the demo gods so again the

435
00:18:54,060 --> 00:18:56,820
point what this would be if you were

436
00:18:55,320 --> 00:18:59,100
still performing that work some

437
00:18:56,820 --> 00:19:00,929
reconnaissance portion of engagement and

438
00:18:59,100 --> 00:19:02,790
you didn't want I feel like maybe

439
00:19:00,930 --> 00:19:04,080
someone else is doing something really

440
00:19:02,790 --> 00:19:06,180
low and slow and you just want to like

441
00:19:04,080 --> 00:19:08,220
go all out scan something and or do some

442
00:19:06,180 --> 00:19:10,590
dirt busting trying to kind of like

443
00:19:08,220 --> 00:19:13,640
segment things out serve those competing

444
00:19:10,590 --> 00:19:20,730
is a really good option in that case

445
00:19:13,640 --> 00:19:23,300
alright yep I definitely got that in

446
00:19:20,730 --> 00:19:23,300
wrong order

447
00:19:26,410 --> 00:19:37,750
I'm sorry I just skip ahead just for the

448
00:19:34,900 --> 00:19:41,560
sake of the time I will I guess real

449
00:19:37,750 --> 00:19:43,570
quickly I will mention the redirect errs

450
00:19:41,560 --> 00:19:45,550
so that one I didn't have time to finish

451
00:19:43,570 --> 00:19:46,929
the sample code but it's the same

452
00:19:45,550 --> 00:19:50,919
concept you've seen probably a lot in

453
00:19:46,930 --> 00:19:52,750
different blogs using a simple web

454
00:19:50,920 --> 00:19:56,710
redirect or whether it's like hosted on

455
00:19:52,750 --> 00:19:58,120
Google App Engine or AWS or using cloud

456
00:19:56,710 --> 00:19:59,680
front you can do the same type of thing

457
00:19:58,120 --> 00:20:03,699
with serverless computing it's just one

458
00:19:59,680 --> 00:20:05,170
more option you have as a red teamer so

459
00:20:03,700 --> 00:20:06,790
an example of doing that I think I've

460
00:20:05,170 --> 00:20:09,280
got a screenshot in here at least of the

461
00:20:06,790 --> 00:20:10,840
code that's can be really hard to read

462
00:20:09,280 --> 00:20:13,120
but just base by just point to point a

463
00:20:10,840 --> 00:20:15,699
really simple web server that just says

464
00:20:13,120 --> 00:20:17,199
like if the request is coming to the

465
00:20:15,700 --> 00:20:19,210
intended target then forwarded over to

466
00:20:17,200 --> 00:20:22,750
my c2 server and not actually exposed

467
00:20:19,210 --> 00:20:26,650
like your long-term c2 server's hostname

468
00:20:22,750 --> 00:20:28,600
so that's the idea there if you are a

469
00:20:26,650 --> 00:20:31,180
fan of Note GS serverless framework

470
00:20:28,600 --> 00:20:34,080
supports no just the Express framework

471
00:20:31,180 --> 00:20:37,030
which is really makes it really easy to

472
00:20:34,080 --> 00:20:38,590
make web apps and it supports the proxy

473
00:20:37,030 --> 00:20:40,360
and so it's pretty pretty similar to

474
00:20:38,590 --> 00:20:46,000
like pythons bottle if you've sure

475
00:20:40,360 --> 00:20:48,639
you've use that so all rights and then

476
00:20:46,000 --> 00:20:50,650
the other one going through creating and

477
00:20:48,640 --> 00:20:52,510
testing payloads so this one ayah

478
00:20:50,650 --> 00:20:53,860
probably meant the most time on it's

479
00:20:52,510 --> 00:20:57,840
definitely not like the intended

480
00:20:53,860 --> 00:21:00,899
functionality of service functions but

481
00:20:57,840 --> 00:21:05,169
the scenario here would be the red team

482
00:21:00,900 --> 00:21:06,880
has a c-sharp based toolkits they maybe

483
00:21:05,170 --> 00:21:09,070
have got a short window for engagements

484
00:21:06,880 --> 00:21:10,960
and they're building out their toolkits

485
00:21:09,070 --> 00:21:12,939
and decided not to take the time to

486
00:21:10,960 --> 00:21:16,110
actually like obviate the their payloads

487
00:21:12,940 --> 00:21:18,640
or recompiling or anything like that

488
00:21:16,110 --> 00:21:20,649
which ultimately leads them to getting

489
00:21:18,640 --> 00:21:23,440
burned because the target just deployed

490
00:21:20,650 --> 00:21:25,960
some new EDR product that's made some

491
00:21:23,440 --> 00:21:29,980
easy detection based off a static string

492
00:21:25,960 --> 00:21:32,410
and one of their tools so this is the

493
00:21:29,980 --> 00:21:34,830
the solution of this and there's other

494
00:21:32,410 --> 00:21:37,570
solutions to it as well but using Azure

495
00:21:34,830 --> 00:21:40,090
as sure also has functions that are

496
00:21:37,570 --> 00:21:41,379
windows-based at least the version one

497
00:21:40,090 --> 00:21:45,158
which I'll go into a little more detail

498
00:21:41,380 --> 00:21:47,799
is basically using that to automates

499
00:21:45,159 --> 00:21:49,480
your obfuscation and your compilation of

500
00:21:47,799 --> 00:21:55,270
your payloads is what we're gonna go

501
00:21:49,480 --> 00:21:57,490
through now so yeah so I just mentioned

502
00:21:55,270 --> 00:21:59,500
a second ago about the types of function

503
00:21:57,490 --> 00:22:01,720
there are they call it version 1 person

504
00:21:59,500 --> 00:22:02,799
2 I'm not actually sure what version 2

505
00:22:01,720 --> 00:22:06,549
is other than that it only supports

506
00:22:02,799 --> 00:22:09,940
dotnet core version 1 is literally like

507
00:22:06,549 --> 00:22:13,570
a it's a Windows 10 container that's got

508
00:22:09,940 --> 00:22:15,340
a full installed Windows 10 and full

509
00:22:13,570 --> 00:22:20,220
access to the dotnet framework so I

510
00:22:15,340 --> 00:22:23,408
think it's 4.7 all the way back to 2.0

511
00:22:20,220 --> 00:22:25,090
so it means and you get access to some

512
00:22:23,409 --> 00:22:26,740
of the command line utilities you

513
00:22:25,090 --> 00:22:28,928
commonly use in a pin test or read some

514
00:22:26,740 --> 00:22:32,380
engagement like CSC dot exe msbuild

515
00:22:28,929 --> 00:22:33,730
stuff like that in this demo that it's

516
00:22:32,380 --> 00:22:35,529
an unfinished one so it's a little rough

517
00:22:33,730 --> 00:22:37,980
around the edges but again it's kind of

518
00:22:35,529 --> 00:22:39,850
just to show you that it's possible

519
00:22:37,980 --> 00:22:44,380
we're basically going to be using the

520
00:22:39,850 --> 00:22:46,840
CSE remotely to compile compile payload

521
00:22:44,380 --> 00:22:47,950
then use confuse rx2 obvious get the

522
00:22:46,840 --> 00:22:50,830
payload and then you would want to

523
00:22:47,950 --> 00:22:52,510
retrieve that back and ideally don't

524
00:22:50,830 --> 00:22:53,620
that it would be awesome if you could do

525
00:22:52,510 --> 00:22:55,360
that like every time you're going to use

526
00:22:53,620 --> 00:22:57,250
this tool just obfuscate it at different

527
00:22:55,360 --> 00:22:59,289
times so every time it's getting used

528
00:22:57,250 --> 00:23:04,750
it's going to look different from a blue

529
00:22:59,289 --> 00:23:08,230
team side let's see I'm probably not

530
00:23:04,750 --> 00:23:11,500
logged into Asura's realize that and

531
00:23:08,230 --> 00:23:18,730
dare I risk my credentials being exposed

532
00:23:11,500 --> 00:23:20,799
you guys let's see so I do have this I

533
00:23:18,730 --> 00:23:24,760
think these are way might be just to

534
00:23:20,799 --> 00:23:26,110
kind of do a quick example of a if

535
00:23:24,760 --> 00:23:28,059
anyone takes a screenshot this host name

536
00:23:26,110 --> 00:23:31,770
I will take it down within the day

537
00:23:28,059 --> 00:23:35,500
because it's intentionally vulnerable

538
00:23:31,770 --> 00:23:38,049
let me show you so i basically use this

539
00:23:35,500 --> 00:23:41,980
just to kind of enumerates what was

540
00:23:38,049 --> 00:23:43,450
available for me within within is your

541
00:23:41,980 --> 00:23:48,669
function so here you can see like

542
00:23:43,450 --> 00:23:50,169
literally I just did a dirt running well

543
00:23:48,669 --> 00:23:51,730
actually this part is just saying like

544
00:23:50,169 --> 00:23:53,920
read the contents of whatever folder I

545
00:23:51,730 --> 00:23:55,120
want to see Drive

546
00:23:53,920 --> 00:23:56,650
for some reason and everything is mapped

547
00:23:55,120 --> 00:24:00,750
to the D Drive like everything it's

548
00:23:56,650 --> 00:24:04,930
actually useful within a is repulsion

549
00:24:00,750 --> 00:24:06,640
let's see so whenever you upload your

550
00:24:04,930 --> 00:24:08,830
function it's it's the wager uses it

551
00:24:06,640 --> 00:24:11,620
it's actually like the whole file system

552
00:24:08,830 --> 00:24:15,550
is its own blob storage which is kind of

553
00:24:11,620 --> 00:24:38,919
the same thing as s3 bucket and you can

554
00:24:15,550 --> 00:24:44,399
access that's see you have everything

555
00:24:38,920 --> 00:24:51,940
within the net for and in the demo of

556
00:24:44,400 --> 00:24:53,080
compilation let's see if I have you know

557
00:24:51,940 --> 00:25:05,200
I think actually part of this will work

558
00:24:53,080 --> 00:25:07,689
let's see yeah so the way this would

559
00:25:05,200 --> 00:25:10,090
work is so like I was saying this part

560
00:25:07,690 --> 00:25:11,320
is over very rough ideally be automated

561
00:25:10,090 --> 00:25:14,500
you would first want to upload your

562
00:25:11,320 --> 00:25:16,540
payload the cs file to the remotes blob

563
00:25:14,500 --> 00:25:19,810
storage which that part is already done

564
00:25:16,540 --> 00:25:22,330
in this case then we would compile with

565
00:25:19,810 --> 00:25:25,870
CSC and then obviously a tit then

566
00:25:22,330 --> 00:25:28,870
retrieve it back so just a really early

567
00:25:25,870 --> 00:25:33,120
version of this I have is running node

568
00:25:28,870 --> 00:25:35,679
compile looks this you should see the

569
00:25:33,120 --> 00:25:39,250
the output there's the output of CSC

570
00:25:35,680 --> 00:25:43,300
compiling the payload and then running

571
00:25:39,250 --> 00:25:46,080
node abuse gates this is going to be

572
00:25:43,300 --> 00:25:49,629
running confuse Rex

573
00:25:46,080 --> 00:25:53,110
and there you see the output from that

574
00:25:49,630 --> 00:25:57,750
and to get the contents right now we're

575
00:25:53,110 --> 00:25:57,750
just gonna do this to get away

576
00:26:04,470 --> 00:26:10,390
there you see the payload I see just got

577
00:26:06,940 --> 00:26:12,790
Bobby skated and stored there somehow I

578
00:26:10,390 --> 00:26:14,620
got signed out of moszer so I I would

579
00:26:12,790 --> 00:26:16,120
need to manually download that but it's

580
00:26:14,620 --> 00:26:18,250
kind of out of the scope of this example

581
00:26:16,120 --> 00:26:20,409
anyways but again I know it's really

582
00:26:18,250 --> 00:26:21,550
rough around the edges but the point of

583
00:26:20,410 --> 00:26:22,840
this is just kind of get your minds

584
00:26:21,550 --> 00:26:24,159
thinking about how you could potentially

585
00:26:22,840 --> 00:26:26,530
uh there's probably a billion other

586
00:26:24,160 --> 00:26:29,080
better ways to use this stuff but I mean

587
00:26:26,530 --> 00:26:31,180
all this is just every time I run one of

588
00:26:29,080 --> 00:26:33,580
these commands that's a function that's

589
00:26:31,180 --> 00:26:38,380
being spun up it runs it it goes away

590
00:26:33,580 --> 00:26:40,540
like it's in the only part that's being

591
00:26:38,380 --> 00:26:42,130
persisted here is that storage in s the

592
00:26:40,540 --> 00:26:44,530
sorry I almost said s3 bucket again the

593
00:26:42,130 --> 00:26:46,870
blob storage for reserves part but the

594
00:26:44,530 --> 00:26:48,520
runtime the environment is actually I

595
00:26:46,870 --> 00:26:51,429
mean it's just it's temporary it's going

596
00:26:48,520 --> 00:26:53,080
away the second that it returns this

597
00:26:51,430 --> 00:26:57,940
response you see here so it's it's

598
00:26:53,080 --> 00:27:03,010
pretty pretty fascinating stuff let's

599
00:26:57,940 --> 00:27:05,410
see what we have next before I get poops

600
00:27:03,010 --> 00:27:06,640
lost that Nelson went through well I

601
00:27:05,410 --> 00:27:08,200
know all I people were really hesitant

602
00:27:06,640 --> 00:27:09,940
about using like cloud services there is

603
00:27:08,200 --> 00:27:11,950
I mean if they're still you can use some

604
00:27:09,940 --> 00:27:13,900
of the benefits of servos functionality

605
00:27:11,950 --> 00:27:17,440
and hosting yourself there's a project

606
00:27:13,900 --> 00:27:19,630
called open fast like open function as a

607
00:27:17,440 --> 00:27:21,070
service if you want to deploy this

608
00:27:19,630 --> 00:27:24,130
within your own environments and just

609
00:27:21,070 --> 00:27:26,439
but still offer to your employees your

610
00:27:24,130 --> 00:27:28,540
users but not have them use a cloud

611
00:27:26,440 --> 00:27:32,530
service you would still get the benefits

612
00:27:28,540 --> 00:27:34,180
of scalability of probably cost savings

613
00:27:32,530 --> 00:27:35,950
from just not giving everyone a server

614
00:27:34,180 --> 00:27:38,140
instead of instead you just be letting

615
00:27:35,950 --> 00:27:41,380
them run functions so I just want to

616
00:27:38,140 --> 00:27:42,700
throw that out there as an option some

617
00:27:41,380 --> 00:27:44,260
examples that I really wanted to get

618
00:27:42,700 --> 00:27:47,650
around to making but didn't have enough

619
00:27:44,260 --> 00:27:49,660
time was automating basic like document

620
00:27:47,650 --> 00:27:51,940
analysis using only tools I mean it's

621
00:27:49,660 --> 00:27:54,490
just a set of Python scripts and that's

622
00:27:51,940 --> 00:27:57,430
that was like one of the the first use

623
00:27:54,490 --> 00:27:58,630
cases for lambda was running Python so

624
00:27:57,430 --> 00:28:00,190
that idea would be similar to what we

625
00:27:58,630 --> 00:28:02,410
were just doing with the azure one with

626
00:28:00,190 --> 00:28:05,440
the compilation star excuse me

627
00:28:02,410 --> 00:28:09,280
compiling payloads but instead maybe as

628
00:28:05,440 --> 00:28:10,750
part of your routine workflow whatever

629
00:28:09,280 --> 00:28:12,460
it is how the

630
00:28:10,750 --> 00:28:15,070
however you get your data wherever you

631
00:28:12,460 --> 00:28:17,169
put it have a lambda function that would

632
00:28:15,070 --> 00:28:18,820
not analyze anything that you might

633
00:28:17,169 --> 00:28:21,250
think is suspicious or just analyze

634
00:28:18,820 --> 00:28:24,100
everything I don't know running no lis

635
00:28:21,250 --> 00:28:26,679
tools against all the office documents

636
00:28:24,100 --> 00:28:29,199
that's maybe contain macros stuff like

637
00:28:26,679 --> 00:28:32,520
that another easy one to throw together

638
00:28:29,200 --> 00:28:37,090
would be using clamavi which is no free

639
00:28:32,520 --> 00:28:39,370
malware scanning that could be so a lot

640
00:28:37,090 --> 00:28:41,620
of stuff I tested like in a ec2 VM

641
00:28:39,370 --> 00:28:42,820
locally so I was able to verify that I

642
00:28:41,620 --> 00:28:44,469
could get it to work I have had a chance

643
00:28:42,820 --> 00:28:46,620
to port it to an actual lambda function

644
00:28:44,470 --> 00:28:49,299
but so again the idea would be to

645
00:28:46,620 --> 00:28:53,949
somehow throw in automated claim a V

646
00:28:49,299 --> 00:28:57,908
scans into your 15 pipelines stuff like

647
00:28:53,950 --> 00:29:00,039
that and then another one don't happen

648
00:28:57,909 --> 00:29:02,650
well actually at the moment to use but

649
00:29:00,039 --> 00:29:03,908
it's possible use I don't know if anyone

650
00:29:02,650 --> 00:29:07,840
here is familiar with the puppeteer

651
00:29:03,909 --> 00:29:11,350
project it's a API to control chrome

652
00:29:07,840 --> 00:29:12,879
chromium headless another idea would be

653
00:29:11,350 --> 00:29:15,459
to deploy that and use that whenever

654
00:29:12,880 --> 00:29:17,679
let's say like a you got all your emails

655
00:29:15,460 --> 00:29:19,059
coming in you get some links you

656
00:29:17,679 --> 00:29:21,070
detective domain that's maybe it's a

657
00:29:19,059 --> 00:29:23,530
recent domain haven't seen it before and

658
00:29:21,070 --> 00:29:25,178
there's a URL and domain instead of

659
00:29:23,530 --> 00:29:27,490
having like something internal make a

660
00:29:25,179 --> 00:29:30,100
request to it or have even like a

661
00:29:27,490 --> 00:29:33,039
external service from the same ip

662
00:29:30,100 --> 00:29:35,230
address continually checking for that

663
00:29:33,039 --> 00:29:38,370
you could use service function out

664
00:29:35,230 --> 00:29:41,470
surface functions to maybe pop up a

665
00:29:38,370 --> 00:29:42,760
chromium instance browse to the website

666
00:29:41,470 --> 00:29:45,429
see if it's automatically trying to

667
00:29:42,760 --> 00:29:48,190
download a file do all that type of

668
00:29:45,429 --> 00:29:49,360
analysis and store that there the only

669
00:29:48,190 --> 00:29:51,070
thing I want to throw out like I know

670
00:29:49,360 --> 00:29:52,780
the earlier example we're talking about

671
00:29:51,070 --> 00:29:54,070
is like scanning from the same IP

672
00:29:52,780 --> 00:29:56,379
address that's something the red team's

673
00:29:54,070 --> 00:29:58,899
can mess up from get detected but it

674
00:29:56,380 --> 00:30:01,240
also goes the other way around the Sarge

675
00:29:58,900 --> 00:30:02,590
blue teams I mean sometimes blue teams

676
00:30:01,240 --> 00:30:05,860
get detected by the red team and the red

677
00:30:02,590 --> 00:30:08,730
team doesn't make that immediately

678
00:30:05,860 --> 00:30:12,939
obvious Villa the example would be like

679
00:30:08,730 --> 00:30:14,980
scanning maybe or analyzing the analysis

680
00:30:12,940 --> 00:30:16,030
of a red team website or whatever if

681
00:30:14,980 --> 00:30:19,870
that's coming from the same ip address

682
00:30:16,030 --> 00:30:21,250
with the same user agents all those type

683
00:30:19,870 --> 00:30:23,080
of same here are six you would use from

684
00:30:21,250 --> 00:30:24,410
a blue team side the red team uses that

685
00:30:23,080 --> 00:30:26,570
as well so that's

686
00:30:24,410 --> 00:30:28,970
how it kind of evens the playing field

687
00:30:26,570 --> 00:30:30,830
on both sides if you implement something

688
00:30:28,970 --> 00:30:33,170
like this just to like randomize where

689
00:30:30,830 --> 00:30:35,929
traffic's coming from trying to

690
00:30:33,170 --> 00:30:37,790
randomize everything about everything

691
00:30:35,930 --> 00:30:38,210
about to everything about what you do I

692
00:30:37,790 --> 00:30:41,720
guess

693
00:30:38,210 --> 00:30:44,170
really and then lastly which is similar

694
00:30:41,720 --> 00:30:46,070
to the web bug I recently found this

695
00:30:44,170 --> 00:30:47,540
there's actually a framework somewhere

696
00:30:46,070 --> 00:30:49,760
else someone else came out with recently

697
00:30:47,540 --> 00:30:51,409
called honey lambda which is just

698
00:30:49,760 --> 00:30:52,430
creating honey tokens using lambda

699
00:30:51,410 --> 00:30:54,680
functions

700
00:30:52,430 --> 00:30:56,000
so that's that'll be in here I would

701
00:30:54,680 --> 00:30:57,470
highly recommend checking that out I

702
00:30:56,000 --> 00:30:59,630
really haven't got a chance to dig into

703
00:30:57,470 --> 00:31:01,400
it too much but it's it looks pretty

704
00:30:59,630 --> 00:31:09,050
sophisticated and looks like they spend

705
00:31:01,400 --> 00:31:10,310
a lot of time developing that and I

706
00:31:09,050 --> 00:31:11,720
think that's actually pretty much it I

707
00:31:10,310 --> 00:31:13,940
think we ended a little bit early but

708
00:31:11,720 --> 00:31:26,870
you guys have any questions about server

709
00:31:13,940 --> 00:31:28,610
lists in general or yes I should have I

710
00:31:26,870 --> 00:31:32,120
probably should have prefaced this and

711
00:31:28,610 --> 00:31:34,689
all with that technically all this usage

712
00:31:32,120 --> 00:31:38,989
is within like the the realm of like

713
00:31:34,690 --> 00:31:42,500
what they call at least AWS is yeah well

714
00:31:38,990 --> 00:31:44,660
within their use case policies whatever

715
00:31:42,500 --> 00:31:47,840
it be a you would need if you were gonna

716
00:31:44,660 --> 00:31:48,740
be using at the pin test policy actually

717
00:31:47,840 --> 00:31:49,909
I'm not sure because I know they just

718
00:31:48,740 --> 00:31:53,270
recently updated that they might have

719
00:31:49,910 --> 00:31:55,100
changed but yeah so honestly as long as

720
00:31:53,270 --> 00:31:57,530
you're using this against a target that

721
00:31:55,100 --> 00:31:58,639
you have the rights to scan with Amazon

722
00:31:57,530 --> 00:32:00,080
doesn't really care me it's literally

723
00:31:58,640 --> 00:32:02,480
we're not doing anything different by

724
00:32:00,080 --> 00:32:03,740
using in map it's not that much

725
00:32:02,480 --> 00:32:05,600
different than just making a standard

726
00:32:03,740 --> 00:32:08,050
web across with like curl or I mean

727
00:32:05,600 --> 00:32:10,040
obviously it's gonna make more noise but

728
00:32:08,050 --> 00:32:12,080
at the same time I'm probably not going

729
00:32:10,040 --> 00:32:13,310
to try to spin up masscan and scan the

730
00:32:12,080 --> 00:32:15,470
internet with it I'm a little hesitant

731
00:32:13,310 --> 00:32:17,000
to try that when I mean there's probably

732
00:32:15,470 --> 00:32:18,830
a fine line somewhere so I guess I would

733
00:32:17,000 --> 00:32:25,100
say just use your best judgement

734
00:32:18,830 --> 00:32:27,409
oh no but yeah then it you know I

735
00:32:25,100 --> 00:32:28,520
haven't tried like large scans but it

736
00:32:27,410 --> 00:32:31,700
would be an interesting idea and that's

737
00:32:28,520 --> 00:32:32,840
in my mind one of the ideas like when I

738
00:32:31,700 --> 00:32:34,070
think of scalability like that's

739
00:32:32,840 --> 00:32:35,419
something I would personally like to be

740
00:32:34,070 --> 00:32:37,899
able to do is like set up my own project

741
00:32:35,420 --> 00:32:39,880
to scan but like that's

742
00:32:37,900 --> 00:32:41,380
that's where you have to be like really

743
00:32:39,880 --> 00:32:42,640
actually coding to be able to scale out

744
00:32:41,380 --> 00:32:45,070
like scanning the Internet

745
00:32:42,640 --> 00:32:48,309
unless you're just straight running mass

746
00:32:45,070 --> 00:32:50,350
gambit so yeah that's nothing I've run

747
00:32:48,309 --> 00:33:08,500
into yet but it's a something look out

748
00:32:50,350 --> 00:33:09,820
for sure oh yeah yeah I think I don't

749
00:33:08,500 --> 00:33:11,800
know if top of my head but if you're

750
00:33:09,820 --> 00:33:14,290
using the same reason another cycle it

751
00:33:11,800 --> 00:33:16,928
it's less than every hour I'm pretty

752
00:33:14,290 --> 00:33:19,300
sure but yeah there's not by default

753
00:33:16,929 --> 00:33:20,530
they don't it would be nice if it just

754
00:33:19,300 --> 00:33:21,820
like would come from a different IP

755
00:33:20,530 --> 00:33:23,620
address for each time that that's why I

756
00:33:21,820 --> 00:33:26,590
was trying to figure out a way to like

757
00:33:23,620 --> 00:33:28,389
automatically deploy the function to

758
00:33:26,590 --> 00:33:30,159
every region so then at least you can

759
00:33:28,390 --> 00:33:32,650
randomize the region but as far as the I

760
00:33:30,160 --> 00:33:34,690
piece within the region yeah I think

761
00:33:32,650 --> 00:33:37,080
it's something under an hour I can't

762
00:33:34,690 --> 00:33:39,429
remember off the top of my head but yeah

763
00:33:37,080 --> 00:33:40,750
that's this is just ready to be us it's

764
00:33:39,429 --> 00:33:49,600
probably different for the other

765
00:33:40,750 --> 00:33:52,179
providers as well to see if to see if

766
00:33:49,600 --> 00:33:54,040
it's you know I actually haven't tried

767
00:33:52,179 --> 00:33:54,970
that the question was have I tried

768
00:33:54,040 --> 00:33:56,860
deploying

769
00:33:54,970 --> 00:34:00,730
on deploying rescanning to see if it

770
00:33:56,860 --> 00:34:01,780
changes the IP address I I yeah I

771
00:34:00,730 --> 00:34:03,160
haven't tried that I have a feeling that

772
00:34:01,780 --> 00:34:04,300
wouldn't make a difference but it's

773
00:34:03,160 --> 00:34:06,370
definitely worth looking into him and

774
00:34:04,300 --> 00:34:08,259
who knows that's not sure how they

775
00:34:06,370 --> 00:34:15,549
determine which IP address is being used

776
00:34:08,260 --> 00:34:20,159
but the other questions otherwise thank

777
00:34:15,550 --> 00:34:20,159
everybody and yep

778
00:34:20,659 --> 00:34:23,488
[Applause]

