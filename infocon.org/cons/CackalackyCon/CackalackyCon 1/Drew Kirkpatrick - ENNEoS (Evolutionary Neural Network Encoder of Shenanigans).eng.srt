1
00:00:00,030 --> 00:00:05,490
I will try not to delay you for lunch

2
00:00:02,850 --> 00:00:07,649
too long before we get started I wanted

3
00:00:05,490 --> 00:00:09,269
to thank the organizers of this

4
00:00:07,649 --> 00:00:11,639
conference it's a lot of work to put

5
00:00:09,269 --> 00:00:12,960
these on so you know make sure you you

6
00:00:11,639 --> 00:00:15,059
reach out to them the Red Badgers the

7
00:00:12,960 --> 00:00:17,550
volunteers you know give them a big

8
00:00:15,059 --> 00:00:19,710
round of thanks I personally appreciate

9
00:00:17,550 --> 00:00:21,720
that they have not black t-shirts thank

10
00:00:19,710 --> 00:00:23,029
you for that and a singletrack

11
00:00:21,720 --> 00:00:26,400
conference because you're here you're

12
00:00:23,029 --> 00:00:28,500
obligated to pretty much so I'm going to

13
00:00:26,400 --> 00:00:30,709
talk about hiding neural networks inside

14
00:00:28,500 --> 00:00:33,450
hiding shellcode insider neural networks

15
00:00:30,710 --> 00:00:35,550
I've been I'm calling this project the a

16
00:00:33,450 --> 00:00:37,260
Neos the evolutionary neural network

17
00:00:35,550 --> 00:00:38,459
encoder of shenanigans because it really

18
00:00:37,260 --> 00:00:41,790
annoys my marketing department

19
00:00:38,460 --> 00:00:44,489
department so Who am I I'm a senior

20
00:00:41,790 --> 00:00:46,410
security consultant I do pen testing for

21
00:00:44,489 --> 00:00:50,550
external clients we're a consulting firm

22
00:00:46,410 --> 00:00:54,569
based out of Ohio I'm a computer geek

23
00:00:50,550 --> 00:00:56,550
I'm old I've done lots of things the

24
00:00:54,570 --> 00:00:58,620
agenda in case you want to decide to

25
00:00:56,550 --> 00:01:00,780
bail now I'm gonna talk a little bit

26
00:00:58,620 --> 00:01:02,250
about show code for those of you who

27
00:01:00,780 --> 00:01:03,629
aren't really on the offensive side and

28
00:01:02,250 --> 00:01:05,390
then I'm gonna talk about neural

29
00:01:03,629 --> 00:01:08,548
networks why it's an interesting

30
00:01:05,390 --> 00:01:11,189
technical approach to this that to this

31
00:01:08,549 --> 00:01:13,950
problem we're gonna talk about the

32
00:01:11,189 --> 00:01:15,240
encoder a little bit and then I kind of

33
00:01:13,950 --> 00:01:17,009
want to give you a glimpse under the

34
00:01:15,240 --> 00:01:18,860
hood I'm not gonna lie to you that the

35
00:01:17,009 --> 00:01:20,970
actual encoder is incredibly complex

36
00:01:18,860 --> 00:01:23,100
uses a lot of machine machine learning

37
00:01:20,970 --> 00:01:24,720
techniques you actually don't have to

38
00:01:23,100 --> 00:01:26,789
understand any of that to use this

39
00:01:24,720 --> 00:01:29,039
software although it's a proof of

40
00:01:26,790 --> 00:01:30,479
concept it's not a tool yet but I do

41
00:01:29,040 --> 00:01:31,799
want to give you a peek you can totally

42
00:01:30,479 --> 00:01:34,920
take a nap at this point I'll warn you

43
00:01:31,799 --> 00:01:36,780
when you can done space L there is a

44
00:01:34,920 --> 00:01:38,310
concept though called fitness functions

45
00:01:36,780 --> 00:01:40,530
which are conceptually really really

46
00:01:38,310 --> 00:01:42,180
easy to understand a little hard to

47
00:01:40,530 --> 00:01:44,040
implement but they're very easy if you

48
00:01:42,180 --> 00:01:45,270
were gonna pick up this code and try to

49
00:01:44,040 --> 00:01:46,740
use this that's what you would have to

50
00:01:45,270 --> 00:01:50,250
get so I'm gonna cover that a little bit

51
00:01:46,740 --> 00:01:52,289
more will do the loader which is really

52
00:01:50,250 --> 00:01:54,119
basic that actually executes you and

53
00:01:52,290 --> 00:01:55,649
pops the shell for you we'll have a live

54
00:01:54,119 --> 00:01:56,969
demo which will fail because I don't

55
00:01:55,649 --> 00:01:59,490
have backup videos like all the

56
00:01:56,969 --> 00:02:01,140
intelligent presenters before me and a

57
00:01:59,490 --> 00:02:04,320
chance to ask questions and you know

58
00:02:01,140 --> 00:02:07,110
throw clever insults my way

59
00:02:04,320 --> 00:02:09,419
so show code it's really small bit of

60
00:02:07,110 --> 00:02:10,889
computer instructions this is often we

61
00:02:09,419 --> 00:02:12,420
call it shell code because we'll run

62
00:02:10,889 --> 00:02:13,589
this on a box that we get kind of a way

63
00:02:12,420 --> 00:02:16,260
to execute code on and they'll give

64
00:02:13,590 --> 00:02:18,900
an interactive shell so that's typically

65
00:02:16,260 --> 00:02:20,129
what we're doing with it as a pen tester

66
00:02:18,900 --> 00:02:22,470
I'm not gonna have time to write custom

67
00:02:20,129 --> 00:02:24,540
shell code for an engagement I'm gonna

68
00:02:22,470 --> 00:02:26,940
use pre-made shell codes or tools that

69
00:02:24,540 --> 00:02:29,459
are gonna create it for me now the

70
00:02:26,940 --> 00:02:31,170
antivirus vendors and the Incident

71
00:02:29,459 --> 00:02:33,180
Response of our first engineers know

72
00:02:31,170 --> 00:02:35,129
about these tool as well and they make

73
00:02:33,180 --> 00:02:37,200
signatures for them so if we're gonna

74
00:02:35,129 --> 00:02:38,579
use the easy stuff the tools that

75
00:02:37,200 --> 00:02:40,440
generate it for us we're gonna need to

76
00:02:38,580 --> 00:02:42,269
kind of office skate it in some way

77
00:02:40,440 --> 00:02:46,519
there's a lot of tools that will do this

78
00:02:42,269 --> 00:02:48,989
for you unicorn my company does works on

79
00:02:46,519 --> 00:02:51,989
people there's a bunch of ways of doing

80
00:02:48,989 --> 00:02:54,060
this you can encrypt it and hide it

81
00:02:51,989 --> 00:02:56,190
until you decrypt it in memory that's

82
00:02:54,060 --> 00:02:57,510
that's effective you can change the

83
00:02:56,190 --> 00:03:00,480
shell code just a little bit you know

84
00:02:57,510 --> 00:03:02,010
not change the actual logic of the code

85
00:03:00,480 --> 00:03:03,899
but just change it so it breaks the

86
00:03:02,010 --> 00:03:05,518
signature and of course today I'm

87
00:03:03,900 --> 00:03:10,620
talking about hiding it in in a neural

88
00:03:05,519 --> 00:03:13,440
network so why would I want to use

89
00:03:10,620 --> 00:03:14,670
neural networks for obfuscation so

90
00:03:13,440 --> 00:03:18,109
neural networks are kind of interesting

91
00:03:14,670 --> 00:03:20,910
they're inherently a black box

92
00:03:18,109 --> 00:03:23,370
they're basically incomprehensible to

93
00:03:20,910 --> 00:03:24,660
humans and a lot of our tools which is

94
00:03:23,370 --> 00:03:26,639
kind of funny because a neural network

95
00:03:24,660 --> 00:03:29,940
is basically a simulated brain a very

96
00:03:26,639 --> 00:03:31,410
small scale but are the creation of

97
00:03:29,940 --> 00:03:33,120
neural networks by computer scientists

98
00:03:31,410 --> 00:03:34,799
way back of the day was based on

99
00:03:33,120 --> 00:03:36,030
studying how our brains work and it's

100
00:03:34,799 --> 00:03:37,650
basically a model of that and

101
00:03:36,030 --> 00:03:40,650
interestingly enough a lot of the

102
00:03:37,650 --> 00:03:42,079
attributes of brains come along with the

103
00:03:40,650 --> 00:03:44,549
ride either great for computer vision

104
00:03:42,079 --> 00:03:46,260
they're great for pattern recognition we

105
00:03:44,549 --> 00:03:48,299
can't create algorithms to do this

106
00:03:46,260 --> 00:03:49,319
nearly as well as a neural network but

107
00:03:48,299 --> 00:03:51,450
we also can't really tell you what's

108
00:03:49,319 --> 00:03:54,660
going on inside of it it's literally a

109
00:03:51,450 --> 00:03:56,668
black box and there's a couple of

110
00:03:54,660 --> 00:03:58,380
interesting types of neural networks and

111
00:03:56,669 --> 00:03:59,519
what I'm going to talk about today is a

112
00:03:58,380 --> 00:04:02,910
technique that can create something

113
00:03:59,519 --> 00:04:04,560
called a recurrent neural network now if

114
00:04:02,910 --> 00:04:06,329
you think of a neural network small

115
00:04:04,560 --> 00:04:08,130
brain and I'm going to put in some kind

116
00:04:06,329 --> 00:04:09,569
of input and let's say it's a password

117
00:04:08,130 --> 00:04:11,579
that the passwords right it's gonna drop

118
00:04:09,569 --> 00:04:14,280
my payload if it's wrong it's gonna do

119
00:04:11,579 --> 00:04:16,370
something else a recurrent neural

120
00:04:14,280 --> 00:04:20,279
network has the ability to form memory

121
00:04:16,370 --> 00:04:22,289
which is really unique in neural network

122
00:04:20,279 --> 00:04:24,179
techniques and what that means is that I

123
00:04:22,289 --> 00:04:26,010
could actually train one to only output

124
00:04:24,180 --> 00:04:27,360
my payload after a correct sequence of

125
00:04:26,010 --> 00:04:29,460
inputs because it could

126
00:04:27,360 --> 00:04:32,039
what the previous Simplot was so that's

127
00:04:29,460 --> 00:04:34,318
that's one one ability that this kind of

128
00:04:32,039 --> 00:04:35,610
approach could potentially have is that

129
00:04:34,319 --> 00:04:38,039
ability to form memory and have much

130
00:04:35,610 --> 00:04:40,110
more complex triggering mechanisms to

131
00:04:38,039 --> 00:04:42,090
drop your payload and then of course

132
00:04:40,110 --> 00:04:43,669
neural networks are great for you know

133
00:04:42,090 --> 00:04:45,780
storing data like show code right

134
00:04:43,669 --> 00:04:47,490
they're actually not this is actually a

135
00:04:45,780 --> 00:04:49,739
really stupid application of neural

136
00:04:47,490 --> 00:04:51,539
networks to be honest with you this is

137
00:04:49,740 --> 00:04:53,789
not what they're good at I'm really

138
00:04:51,539 --> 00:04:55,979
using them because they're so hard to

139
00:04:53,789 --> 00:04:58,080
understand they're perfect obfuscation

140
00:04:55,979 --> 00:05:00,060
machines which is usually a problem like

141
00:04:58,080 --> 00:05:02,909
if I'm an engineer and I'm trying to

142
00:05:00,060 --> 00:05:04,949
pitch the use of a neural network even

143
00:05:02,909 --> 00:05:06,688
like a safety critical application trust

144
00:05:04,949 --> 00:05:08,279
me I've tried this it's hard because

145
00:05:06,689 --> 00:05:11,370
people say well what is it gonna do in

146
00:05:08,279 --> 00:05:14,340
all these situations B's baking let's

147
00:05:11,370 --> 00:05:16,860
find out that's not really reassuring to

148
00:05:14,340 --> 00:05:18,719
the QA team especially when you have

149
00:05:16,860 --> 00:05:20,400
recurrent neural networks because you

150
00:05:18,719 --> 00:05:22,740
really can't brute force all the

151
00:05:20,400 --> 00:05:24,659
possible things that I could do we just

152
00:05:22,740 --> 00:05:25,110
don't have a good way of figuring that

153
00:05:24,659 --> 00:05:27,479
out

154
00:05:25,110 --> 00:05:29,969
this is kind of a PhD level problem

155
00:05:27,479 --> 00:05:31,830
there's interesting research trying to

156
00:05:29,969 --> 00:05:32,879
figure out ways of doing this but we're

157
00:05:31,830 --> 00:05:37,460
not there and I don't know if we're

158
00:05:32,879 --> 00:05:40,379
gonna get there anytime soon so I made

159
00:05:37,460 --> 00:05:43,318
the e Neos encoder and what it does is

160
00:05:40,379 --> 00:05:45,870
it uses genetic algorithms to solve the

161
00:05:43,319 --> 00:05:48,659
problem so I'm not designing a neural

162
00:05:45,870 --> 00:05:49,919
network in training I'm creating an

163
00:05:48,659 --> 00:05:52,409
evolutionary system that's going to

164
00:05:49,919 --> 00:05:54,870
evolve the neural network for me that's

165
00:05:52,409 --> 00:05:56,490
hard not be honest with you I'd be

166
00:05:54,870 --> 00:05:58,250
honest with you but the reason why is

167
00:05:56,490 --> 00:06:00,750
because it can do complex things like

168
00:05:58,250 --> 00:06:04,110
create recurrent neural networks which

169
00:06:00,750 --> 00:06:07,529
is not a common sort of solution and

170
00:06:04,110 --> 00:06:09,719
then I do have a really simple loader

171
00:06:07,529 --> 00:06:12,360
just to test it out the show that I can

172
00:06:09,719 --> 00:06:14,460
get that shellcode back out pappa she'll

173
00:06:12,360 --> 00:06:18,389
do you're happy she'll dance all the fun

174
00:06:14,460 --> 00:06:19,979
stuff so I mentioned earlier that there

175
00:06:18,389 --> 00:06:22,050
was gonna be the peek under the hood and

176
00:06:19,979 --> 00:06:24,120
you could just totally spaced out and go

177
00:06:22,050 --> 00:06:27,779
and Twitter and we're at that point you

178
00:06:24,120 --> 00:06:28,860
can completely spaced out right now so

179
00:06:27,779 --> 00:06:31,439
this is what's going on in the

180
00:06:28,860 --> 00:06:32,729
underlying classes of it that's

181
00:06:31,439 --> 00:06:35,669
abstracted away that you don't really

182
00:06:32,729 --> 00:06:39,750
have to understand any Python coders in

183
00:06:35,669 --> 00:06:42,560
here all right this is written in C++ so

184
00:06:39,750 --> 00:06:42,560
I'm really sorry

185
00:06:42,880 --> 00:06:49,010
we'll talk about Python later but I'm

186
00:06:46,280 --> 00:06:50,390
really really sorry in advance but

187
00:06:49,010 --> 00:06:54,409
really the complex stuff is really

188
00:06:50,390 --> 00:06:56,390
abstracted away for you so this is using

189
00:06:54,410 --> 00:06:58,280
a technique called neuro evolution of

190
00:06:56,390 --> 00:07:00,020
augmenting topologies I'm not the only

191
00:06:58,280 --> 00:07:04,340
computer scientist who's really bad at

192
00:07:00,020 --> 00:07:07,190
names okay which is called me and this

193
00:07:04,340 --> 00:07:08,659
was created by dr. Kenneth Stanley at

194
00:07:07,190 --> 00:07:10,910
University of Central Florida a couple

195
00:07:08,660 --> 00:07:13,130
years ago I spent many years of my life

196
00:07:10,910 --> 00:07:15,440
taking into this in grad school a lot of

197
00:07:13,130 --> 00:07:17,390
this software was written but my classes

198
00:07:15,440 --> 00:07:20,300
for this my implementation was from grad

199
00:07:17,390 --> 00:07:22,430
schools that I've repurposed and it does

200
00:07:20,300 --> 00:07:23,690
a couple of neat things I want to give

201
00:07:22,430 --> 00:07:29,630
you a quick little tour of a neural

202
00:07:23,690 --> 00:07:31,880
network yeah okay so this is a really

203
00:07:29,630 --> 00:07:35,120
basic neural network and example of my

204
00:07:31,880 --> 00:07:36,800
terrible OpenGL programming skills so

205
00:07:35,120 --> 00:07:39,110
this is a visualization and what you

206
00:07:36,800 --> 00:07:41,810
have here is these green circles are

207
00:07:39,110 --> 00:07:43,640
neurons these are also neurons these

208
00:07:41,810 --> 00:07:45,770
light blue ones and these are also

209
00:07:43,640 --> 00:07:47,750
neurons so these are this is the input

210
00:07:45,770 --> 00:07:49,430
layer so as an example this will be

211
00:07:47,750 --> 00:07:52,280
where we'd be passing our passphrase our

212
00:07:49,430 --> 00:07:53,750
password and up here would be where the

213
00:07:52,280 --> 00:07:55,840
characters of our shell code would be

214
00:07:53,750 --> 00:07:58,190
popping out in this particular example

215
00:07:55,840 --> 00:08:01,310
now if you think about a neural network

216
00:07:58,190 --> 00:08:03,380
as a virtual machine what I want you to

217
00:08:01,310 --> 00:08:04,940
look at this as is those neurons and the

218
00:08:03,380 --> 00:08:08,510
links between them are the hardware of

219
00:08:04,940 --> 00:08:10,910
that virtual machine in those links and

220
00:08:08,510 --> 00:08:12,980
in those neurons there are activation

221
00:08:10,910 --> 00:08:14,930
responses like weights like floating

222
00:08:12,980 --> 00:08:17,930
point numbers and weights on those links

223
00:08:14,930 --> 00:08:20,600
those numbers those values that's the

224
00:08:17,930 --> 00:08:21,920
software of that virtual machine now

225
00:08:20,600 --> 00:08:23,360
this is a completely different

226
00:08:21,920 --> 00:08:25,460
architecture than what you've got in

227
00:08:23,360 --> 00:08:28,430
your pocket that your laptop is using

228
00:08:25,460 --> 00:08:30,080
this is very different this is we all

229
00:08:28,430 --> 00:08:32,000
using something called a traditional von

230
00:08:30,080 --> 00:08:33,919
Neumann architecture you've got a CPU

231
00:08:32,000 --> 00:08:36,950
and you get your memory bank and your

232
00:08:33,919 --> 00:08:38,120
i/o and Sorge this is very different the

233
00:08:36,950 --> 00:08:41,000
hardware the software is distributed

234
00:08:38,120 --> 00:08:42,440
throughout so if I had to show codes in

235
00:08:41,000 --> 00:08:43,940
here and a reverse engineer was looking

236
00:08:42,440 --> 00:08:45,380
at it they're not going to see the right

237
00:08:43,940 --> 00:08:46,790
side executing when it's dropped in one

238
00:08:45,380 --> 00:08:48,770
shellcode and their left side

239
00:08:46,790 --> 00:08:50,870
the whole thing's executing all the time

240
00:08:48,770 --> 00:08:52,400
this is going to be a real pain in the

241
00:08:50,870 --> 00:08:54,140
ass for reverse engineers there's

242
00:08:52,400 --> 00:08:55,199
reverse engineers in here when this is

243
00:08:54,140 --> 00:08:57,300
ready I'm going to

244
00:08:55,200 --> 00:09:00,240
your beer I'll prepay it this weekend

245
00:08:57,300 --> 00:09:01,920
and go buy you a beer now so it's really

246
00:09:00,240 --> 00:09:04,440
really cool kind of architecture and

247
00:09:01,920 --> 00:09:06,060
again formed on us we're too dumb to

248
00:09:04,440 --> 00:09:07,200
understand our own computer architecture

249
00:09:06,060 --> 00:09:07,589
that's in our ends which is kind of

250
00:09:07,200 --> 00:09:11,970
funny

251
00:09:07,589 --> 00:09:14,370
so this neat algorithm it's not only

252
00:09:11,970 --> 00:09:16,560
going to evolve the weights the software

253
00:09:14,370 --> 00:09:19,410
it's going to evolve the architecture

254
00:09:16,560 --> 00:09:21,779
too which is kind of a nice approach why

255
00:09:19,410 --> 00:09:23,519
I like to use it so it will evolve those

256
00:09:21,779 --> 00:09:26,189
additional neurons that's in between in

257
00:09:23,519 --> 00:09:29,310
the middle there and all those links so

258
00:09:26,190 --> 00:09:32,820
it's a really neat solution or technique

259
00:09:29,310 --> 00:09:39,510
and what you see here is these dashed

260
00:09:32,820 --> 00:09:42,269
lines sorry wrong button I can't

261
00:09:39,510 --> 00:09:44,579
computer these dashed lines are the

262
00:09:42,269 --> 00:09:47,670
recurrent links that it's literally a

263
00:09:44,579 --> 00:09:49,859
loop back in the neural network so the

264
00:09:47,670 --> 00:09:51,689
flow of this is if if I have my inputs

265
00:09:49,860 --> 00:09:53,519
down here and each one of these is these

266
00:09:51,690 --> 00:09:56,550
input neurons as a character of my

267
00:09:53,519 --> 00:09:57,839
password when I push those in that I'm

268
00:09:56,550 --> 00:09:59,189
going to execute the neural network and

269
00:09:57,839 --> 00:10:01,380
it's gonna be pushed up through that

270
00:09:59,190 --> 00:10:02,820
neural network through all the links to

271
00:10:01,380 --> 00:10:05,730
the next round you know the next layer

272
00:10:02,820 --> 00:10:06,899
of neurons and on each each weight each

273
00:10:05,730 --> 00:10:09,600
link it goes through is gonna be

274
00:10:06,899 --> 00:10:11,459
adjusted based on the weight of that

275
00:10:09,600 --> 00:10:14,310
link it's gonna get to the next neuron

276
00:10:11,459 --> 00:10:16,649
and based on the amount of signal coming

277
00:10:14,310 --> 00:10:19,109
across its virtual synapse if it reached

278
00:10:16,649 --> 00:10:20,760
by passes its activation response it'll

279
00:10:19,110 --> 00:10:23,760
fire on to the next level of neurons

280
00:10:20,760 --> 00:10:25,860
kind of like the brain does that

281
00:10:23,760 --> 00:10:28,529
recurrent link is actually gonna let

282
00:10:25,860 --> 00:10:30,300
loop back so that something's gonna be

283
00:10:28,529 --> 00:10:32,010
left over if you have a traditional

284
00:10:30,300 --> 00:10:34,319
neural network that doesn't have those

285
00:10:32,010 --> 00:10:36,260
or current links after it finishes

286
00:10:34,320 --> 00:10:39,149
executing its backs to his base state

287
00:10:36,260 --> 00:10:40,529
the next time you throw something in it

288
00:10:39,149 --> 00:10:42,420
it's not gonna be influenced by any

289
00:10:40,529 --> 00:10:44,010
shape or form what came before cuz

290
00:10:42,420 --> 00:10:45,360
there's nothing left over but with those

291
00:10:44,010 --> 00:10:46,829
recurrent links there's a physical

292
00:10:45,360 --> 00:10:49,290
mechanism that can leave something

293
00:10:46,829 --> 00:10:51,269
behind and that allows it to form memory

294
00:10:49,290 --> 00:10:53,130
so you could train it to say only drop

295
00:10:51,269 --> 00:10:54,930
my payload if I entered this data

296
00:10:53,130 --> 00:10:56,639
followed by this data followed by this

297
00:10:54,930 --> 00:11:01,138
data and this is gonna make

298
00:10:56,639 --> 00:11:03,510
brute-forcing it really hard one other

299
00:11:01,139 --> 00:11:04,890
incredibly dorky thing about this if

300
00:11:03,510 --> 00:11:07,439
you're not already dorte out enough is

301
00:11:04,890 --> 00:11:08,630
that the neat technique has a valid

302
00:11:07,440 --> 00:11:11,899
crossover operation

303
00:11:08,630 --> 00:11:13,490
so I've talked about its a genetic

304
00:11:11,899 --> 00:11:15,230
algorithm I've talked about neural

305
00:11:13,490 --> 00:11:17,110
networks but the system doesn't actually

306
00:11:15,230 --> 00:11:19,610
work on neural networks it works on DNA

307
00:11:17,110 --> 00:11:20,930
so there's a genome for all these neural

308
00:11:19,610 --> 00:11:23,209
networks and that's what the genetic

309
00:11:20,930 --> 00:11:24,829
algorithm works on now there's enough

310
00:11:23,209 --> 00:11:27,859
data in that DNA to create the neural

311
00:11:24,829 --> 00:11:29,630
networks but the fundamental unit is

312
00:11:27,860 --> 00:11:32,360
that DNA and there's genes for neurons

313
00:11:29,630 --> 00:11:33,980
and links and the weights the software

314
00:11:32,360 --> 00:11:36,889
the hardware and we'll see it a little

315
00:11:33,980 --> 00:11:38,660
bit later but the neuro evolution of

316
00:11:36,889 --> 00:11:40,910
augmenting topologies actually has a

317
00:11:38,660 --> 00:11:43,880
crossover operation where it can take

318
00:11:40,910 --> 00:11:46,089
two strings of DNA perform the operation

319
00:11:43,880 --> 00:11:48,350
to come up with a new string of DNA that

320
00:11:46,089 --> 00:11:51,380
meaningfully inherits attributes for the

321
00:11:48,350 --> 00:11:53,180
two contributing strings of DNA and if

322
00:11:51,380 --> 00:11:54,829
you take that out of computer scientists

323
00:11:53,180 --> 00:11:57,050
be what we're talking about is

324
00:11:54,829 --> 00:11:59,180
reproduction it can make babies that

325
00:11:57,050 --> 00:12:01,990
actually have attributes of the two

326
00:11:59,180 --> 00:12:05,420
parents which is really really unique in

327
00:12:01,990 --> 00:12:07,759
this field called neuro evolution and

328
00:12:05,420 --> 00:12:09,290
really is a very powerful mechanism for

329
00:12:07,759 --> 00:12:11,959
making that evolutionary process that

330
00:12:09,290 --> 00:12:15,800
we're simulating work better I can solve

331
00:12:11,959 --> 00:12:19,758
much more complex problems okay

332
00:12:15,800 --> 00:12:20,810
so everybody can wake up everyone this

333
00:12:19,759 --> 00:12:24,980
is the part you'd actually have to get

334
00:12:20,810 --> 00:12:26,329
we're back up at a higher level so the

335
00:12:24,980 --> 00:12:27,980
genetic algorithm is actually gonna

336
00:12:26,329 --> 00:12:29,569
solve the problem for you you don't have

337
00:12:27,980 --> 00:12:31,819
to figure out how to design a neural

338
00:12:29,569 --> 00:12:33,769
network or what weights or neurons to

339
00:12:31,819 --> 00:12:34,880
put in it then the genetic algorithm

340
00:12:33,769 --> 00:12:37,069
will do that for you but you have to

341
00:12:34,880 --> 00:12:39,829
provide it some guidance and that's what

342
00:12:37,069 --> 00:12:41,959
a fitness function is so if you think

343
00:12:39,829 --> 00:12:44,089
back to Darwin's theory of evolution

344
00:12:41,959 --> 00:12:46,160
like I can't remember who actually

345
00:12:44,089 --> 00:12:48,110
penned the phrase survival of the

346
00:12:46,160 --> 00:12:49,790
fittest if you're gonna go grab this

347
00:12:48,110 --> 00:12:52,850
this code and you're gonna run it it's

348
00:12:49,790 --> 00:12:55,279
your evolutionary process you have to

349
00:12:52,850 --> 00:12:57,470
define what is fittest so that's what

350
00:12:55,279 --> 00:12:59,360
kind of is fun about genetic algorithms

351
00:12:57,470 --> 00:13:01,189
because you can do all sorts of fun

352
00:12:59,360 --> 00:13:03,230
experiments as to you know if I drove

353
00:13:01,189 --> 00:13:04,579
evolution with this concept instead of

354
00:13:03,230 --> 00:13:07,970
that concept you can come up with some

355
00:13:04,579 --> 00:13:10,849
so pretty neat solutions but here we

356
00:13:07,970 --> 00:13:11,870
want to basically drive it to create a

357
00:13:10,850 --> 00:13:15,110
neural networks that output the show

358
00:13:11,870 --> 00:13:17,059
code when we want it and it's literally

359
00:13:15,110 --> 00:13:19,610
just a scoring algorithm that's it

360
00:13:17,059 --> 00:13:22,250
Fitness function is literally just take

361
00:13:19,610 --> 00:13:23,840
a neural network look at what I gave

362
00:13:22,250 --> 00:13:25,670
it as an input look at what output and

363
00:13:23,840 --> 00:13:28,400
give that a grade based on how close

364
00:13:25,670 --> 00:13:31,010
that is to the behavior I want that's it

365
00:13:28,400 --> 00:13:34,520
that's all it is of course it's a little

366
00:13:31,010 --> 00:13:36,230
trickier than implementing it we'll talk

367
00:13:34,520 --> 00:13:39,439
a little bit about that later but if you

368
00:13:36,230 --> 00:13:40,610
can provide that that score and the

369
00:13:39,440 --> 00:13:42,050
genetic algorithm have a large

370
00:13:40,610 --> 00:13:43,850
population because evolution doesn't

371
00:13:42,050 --> 00:13:47,060
work with one or two individuals it

372
00:13:43,850 --> 00:13:49,100
needs lots of folks to work and you're

373
00:13:47,060 --> 00:13:51,530
gonna give it a grade for all those and

374
00:13:49,100 --> 00:13:52,670
the populations over time it's gonna be

375
00:13:51,530 --> 00:13:54,680
able to identify the ones that are

376
00:13:52,670 --> 00:13:56,870
performing better they will be able to

377
00:13:54,680 --> 00:13:58,370
reproduce more they will more copies of

378
00:13:56,870 --> 00:13:59,870
it will be made more mutations of it

379
00:13:58,370 --> 00:14:02,870
will be made the ones that perform

380
00:13:59,870 --> 00:14:05,720
poorly over time will die out very

381
00:14:02,870 --> 00:14:07,940
simple stuff you know simulate that in

382
00:14:05,720 --> 00:14:12,760
Mass over time and it's gonna slowly

383
00:14:07,940 --> 00:14:15,080
find its way towards your solution so

384
00:14:12,760 --> 00:14:17,689
the fun thing is is that it is will

385
00:14:15,080 --> 00:14:20,180
actually solve this for you now you

386
00:14:17,690 --> 00:14:23,210
could sit down and just write an

387
00:14:20,180 --> 00:14:25,910
obfuscation system yourself probably

388
00:14:23,210 --> 00:14:27,350
take a couple weeks or you can create an

389
00:14:25,910 --> 00:14:29,110
evolutionary process that will solve it

390
00:14:27,350 --> 00:14:32,120
for you and spend six months to encode

391
00:14:29,110 --> 00:14:33,700
like I did I'm not a good software

392
00:14:32,120 --> 00:14:36,380
engineer I'm a fun computer scientist

393
00:14:33,700 --> 00:14:37,550
but if you think it's fun that the

394
00:14:36,380 --> 00:14:39,470
genetic algorithm will solve this for

395
00:14:37,550 --> 00:14:45,920
you I agree I think it's really really

396
00:14:39,470 --> 00:14:47,750
fun so the problem of course is while

397
00:14:45,920 --> 00:14:50,120
the fitness function concept is really

398
00:14:47,750 --> 00:14:52,730
simple it's really hard to pull off in

399
00:14:50,120 --> 00:14:54,350
practice because you'll make one you're

400
00:14:52,730 --> 00:14:55,610
gonna run it for a long time you're

401
00:14:54,350 --> 00:14:56,930
gonna see what pops out at the end when

402
00:14:55,610 --> 00:14:58,760
you get your solution you're gonna test

403
00:14:56,930 --> 00:15:00,530
it and give you like that's not what I

404
00:14:58,760 --> 00:15:02,300
was expecting and that you look back

405
00:15:00,530 --> 00:15:03,470
your fitness function like well of

406
00:15:02,300 --> 00:15:06,199
course that's what I didn't know doing

407
00:15:03,470 --> 00:15:08,390
you know it's it's the lather hair rinse

408
00:15:06,200 --> 00:15:10,040
repeat and you know you know it makes

409
00:15:08,390 --> 00:15:11,449
sense in hindsight when you see it like

410
00:15:10,040 --> 00:15:13,849
of course that's what I ended up with so

411
00:15:11,450 --> 00:15:15,800
there's a lot of tweaking and retrying

412
00:15:13,850 --> 00:15:17,450
and and unfortunately this takes a while

413
00:15:15,800 --> 00:15:20,680
to run when you doing complicated things

414
00:15:17,450 --> 00:15:25,580
so it's still work in progress for sure

415
00:15:20,680 --> 00:15:27,739
um so let's talk about what I do have

416
00:15:25,580 --> 00:15:30,950
currently in the proof of concept is for

417
00:15:27,740 --> 00:15:33,110
fitness functions the first one which

418
00:15:30,950 --> 00:15:35,620
I'm demoing today was really just to

419
00:15:33,110 --> 00:15:37,960
answer the question can I actually put

420
00:15:35,620 --> 00:15:39,760
evolve a neural network we show code in

421
00:15:37,960 --> 00:15:42,640
it and output it and run it and pop my

422
00:15:39,760 --> 00:15:47,170
shell that's literally all my first step

423
00:15:42,640 --> 00:15:48,400
Fitness function does and it literally

424
00:15:47,170 --> 00:15:50,800
the fitness function doesn't care what

425
00:15:48,400 --> 00:15:53,529
the input is all it's looking for is it

426
00:15:50,800 --> 00:15:55,569
out putting the correct shell code I do

427
00:15:53,529 --> 00:15:58,510
have a second one that's a little bit

428
00:15:55,570 --> 00:16:00,610
more practical in that it's got I call

429
00:15:58,510 --> 00:16:03,339
it the double stuffed Oreo it's got two

430
00:16:00,610 --> 00:16:07,150
shellcodes in it one isn't literally an

431
00:16:03,339 --> 00:16:09,880
op sled if the password is wrong it

432
00:16:07,150 --> 00:16:11,800
outputs an OP sled issue which is not

433
00:16:09,880 --> 00:16:13,360
malicious it just skips to the next

434
00:16:11,800 --> 00:16:15,729
instruction it doesn't pop a shell

435
00:16:13,360 --> 00:16:17,710
doesn't do anything malicious it's kind

436
00:16:15,730 --> 00:16:18,850
of stupid but you know that's that's

437
00:16:17,710 --> 00:16:20,980
what it's gonna do with the passwords

438
00:16:18,850 --> 00:16:23,230
wrong if it's right it drops the

439
00:16:20,980 --> 00:16:25,860
meterpreter shell and pops your show it

440
00:16:23,230 --> 00:16:28,720
drops the real malicious one that one

441
00:16:25,860 --> 00:16:30,310
seems to be working but it appears it's

442
00:16:28,720 --> 00:16:32,770
gonna take about two to three weeks to

443
00:16:30,310 --> 00:16:34,119
encode on my laptop so that one is not

444
00:16:32,770 --> 00:16:36,490
ready for primetime and I've got a lot

445
00:16:34,120 --> 00:16:38,110
of performance issues to solve but my

446
00:16:36,490 --> 00:16:40,390
first one is working and we can get the

447
00:16:38,110 --> 00:16:42,070
show code back out I don't have the back

448
00:16:40,390 --> 00:16:48,130
of video so it'll probably fail on me

449
00:16:42,070 --> 00:16:50,140
but we'll see the encoder what it's

450
00:16:48,130 --> 00:16:52,990
going to do I mentioned that you have to

451
00:16:50,140 --> 00:16:54,670
have a large population right now I've

452
00:16:52,990 --> 00:16:57,250
got it configured for 3,000 the

453
00:16:54,670 --> 00:17:00,160
population size and what it's gonna do

454
00:16:57,250 --> 00:17:02,500
is it's actually gonna chunk the show

455
00:17:00,160 --> 00:17:03,939
code because what I found as I started

456
00:17:02,500 --> 00:17:06,429
writing all this is that I couldn't

457
00:17:03,940 --> 00:17:08,709
create one giant neural network that

458
00:17:06,429 --> 00:17:10,780
held the shell code it was just the

459
00:17:08,709 --> 00:17:12,699
encoding time was exponential but I

460
00:17:10,780 --> 00:17:15,040
could break it into smaller chunks so

461
00:17:12,699 --> 00:17:16,900
literally it takes you know I've got 500

462
00:17:15,040 --> 00:17:18,699
bytes of my shell code and take a couple

463
00:17:16,900 --> 00:17:20,020
of characters at a time break it off and

464
00:17:18,699 --> 00:17:22,240
make a neural network for the first two

465
00:17:20,020 --> 00:17:24,129
bytes and another neural network for the

466
00:17:22,240 --> 00:17:26,859
second two bytes and on and on and that

467
00:17:24,130 --> 00:17:28,329
works a lot better so instead of one

468
00:17:26,859 --> 00:17:30,219
horrific neural network to try to

469
00:17:28,329 --> 00:17:32,770
reverse-engineer someone would have

470
00:17:30,220 --> 00:17:34,330
maybe 500 all with slightly different

471
00:17:32,770 --> 00:17:36,250
architecture because they were evolved

472
00:17:34,330 --> 00:17:38,649
differently so that's still still kind

473
00:17:36,250 --> 00:17:42,340
of a pain in the ass so it's going to

474
00:17:38,650 --> 00:17:44,020
create the bots are a wrapper around the

475
00:17:42,340 --> 00:17:45,639
neural network so neural networks take

476
00:17:44,020 --> 00:17:47,320
floating-point inputs and outputs

477
00:17:45,640 --> 00:17:49,299
between 0 & 1

478
00:17:47,320 --> 00:17:51,610
which is really inconvenient for a lot

479
00:17:49,299 --> 00:17:53,230
of use cases so the the rapper bot

480
00:17:51,610 --> 00:17:56,439
rapper literally just translates like

481
00:17:53,230 --> 00:17:58,960
pass phrases strings back into the zero

482
00:17:56,440 --> 00:18:00,760
one inputs it needs it takes the output

483
00:17:58,960 --> 00:18:03,390
converts it back into the bytes I need

484
00:18:00,760 --> 00:18:06,220
for shellcode so that's it's just rapper

485
00:18:03,390 --> 00:18:08,620
and it gets three thousand role networks

486
00:18:06,220 --> 00:18:11,350
from the genetic algorithm and schedules

487
00:18:08,620 --> 00:18:13,000
the jobs to be run I've got a bunch of

488
00:18:11,350 --> 00:18:16,240
execution threads that are gonna grab

489
00:18:13,000 --> 00:18:18,610
those Tapani own so a couple of folks

490
00:18:16,240 --> 00:18:20,440
out of the population to test it's gonna

491
00:18:18,610 --> 00:18:22,959
stimulate them with some input it's

492
00:18:20,440 --> 00:18:23,769
gonna record the output and then it's

493
00:18:22,960 --> 00:18:24,940
gonna run it through that Fitness

494
00:18:23,769 --> 00:18:28,000
function and get a grade for that

495
00:18:24,940 --> 00:18:29,350
particular neural network at the end of

496
00:18:28,000 --> 00:18:31,720
it when all the 3000 BOTS have been

497
00:18:29,350 --> 00:18:34,269
tested the main thread just takes those

498
00:18:31,720 --> 00:18:36,940
scores first it looks for a solution and

499
00:18:34,269 --> 00:18:38,769
did I actually solve the problem and if

500
00:18:36,940 --> 00:18:40,750
it didn't which it usually doesn't it's

501
00:18:38,769 --> 00:18:43,720
gonna put it into the genetic algorithm

502
00:18:40,750 --> 00:18:46,779
and call evolution so all the neural

503
00:18:43,720 --> 00:18:50,139
networks are deleted their genomes are

504
00:18:46,779 --> 00:18:51,580
mutated there's babies made the weak

505
00:18:50,139 --> 00:18:53,559
ones after a couple generations died off

506
00:18:51,580 --> 00:18:56,110
all this fun stuff a lot of mechanisms

507
00:18:53,559 --> 00:18:58,178
under the hood and then a new generation

508
00:18:56,110 --> 00:19:00,158
is created and you start the cycle over

509
00:18:58,179 --> 00:19:03,279
again and you keep doing this over and

510
00:19:00,159 --> 00:19:05,730
over until the solution is found and it

511
00:19:03,279 --> 00:19:10,570
slowly kind of gets closer and closer to

512
00:19:05,730 --> 00:19:14,139
defining what the solution might be the

513
00:19:10,570 --> 00:19:16,389
loader is much simpler the encoder is

514
00:19:14,139 --> 00:19:18,219
going to when it finds a solution for a

515
00:19:16,389 --> 00:19:21,120
particular chunk of the shellcode it's

516
00:19:18,220 --> 00:19:23,440
gonna save the DNA the genome to a file

517
00:19:21,120 --> 00:19:25,510
the loader simply just reads in those

518
00:19:23,440 --> 00:19:28,029
files it's gonna recreate all those

519
00:19:25,510 --> 00:19:28,779
neural networks from the DNA it's gonna

520
00:19:28,029 --> 00:19:30,940
stimulate them

521
00:19:28,779 --> 00:19:33,100
that's gonna put them in the Bata so it

522
00:19:30,940 --> 00:19:35,200
can use pass phrases a little bit easier

523
00:19:33,100 --> 00:19:37,750
it's gonna push the inputs in the bot

524
00:19:35,200 --> 00:19:39,279
it's gonna take the output from the

525
00:19:37,750 --> 00:19:41,470
neural networks and it's gonna copy it

526
00:19:39,279 --> 00:19:47,440
into executable memory and call it and

527
00:19:41,470 --> 00:19:50,250
then get your shell so let's watch the

528
00:19:47,440 --> 00:19:50,250
demo fail shall we

529
00:19:52,600 --> 00:20:00,299
so to start this off sorry

530
00:19:55,570 --> 00:20:10,450
we need shellcode so we're gonna create

531
00:20:00,299 --> 00:20:12,429
this here real so we're on the cally box

532
00:20:10,450 --> 00:20:16,360
we need some show code that we're going

533
00:20:12,429 --> 00:20:17,950
to encode we're gonna use Metasploit MSF

534
00:20:16,360 --> 00:20:20,709
venom and we're going to create show

535
00:20:17,950 --> 00:20:23,110
code for a Windows box just complete

536
00:20:20,710 --> 00:20:27,159
vanilla meterpreter shell that's

537
00:20:23,110 --> 00:20:29,799
pointing back to the this particular VM

538
00:20:27,159 --> 00:20:31,059
okay so it's gonna this Kalibak will be

539
00:20:29,799 --> 00:20:32,740
our command to control for this shell

540
00:20:31,059 --> 00:20:34,529
code we're gonna go ahead and create

541
00:20:32,740 --> 00:20:37,299
that

542
00:20:34,529 --> 00:20:41,379
we're dumping this out as raw shell code

543
00:20:37,299 --> 00:20:43,330
just the raw binary and there we go and

544
00:20:41,379 --> 00:20:46,689
what I'm gonna do is I'm could convert

545
00:20:43,330 --> 00:20:48,509
this into a a C array that I can include

546
00:20:46,690 --> 00:20:52,120
into a source code I've got this little

547
00:20:48,509 --> 00:20:53,649
script that does that it also will

548
00:20:52,120 --> 00:20:55,149
encrypt it if you want to make custom

549
00:20:53,649 --> 00:20:59,949
motors this all I might get up if you

550
00:20:55,149 --> 00:21:03,549
want it hey

551
00:20:59,950 --> 00:21:07,090
I love Python for little things you know

552
00:21:03,549 --> 00:21:09,370
for big things they have to go fast I'm

553
00:21:07,090 --> 00:21:12,459
a crusty old UNIX guy I literally shave

554
00:21:09,370 --> 00:21:17,309
the beard off this morning so I look

555
00:21:12,460 --> 00:21:17,309
nice no my wife would be impressed

556
00:21:17,700 --> 00:21:24,340
okay so we've converted this binary file

557
00:21:20,590 --> 00:21:26,740
into this this header file and let me

558
00:21:24,340 --> 00:21:29,230
just show you this real quick it's not

559
00:21:26,740 --> 00:21:33,669
encrypted but this little Python script

560
00:21:29,230 --> 00:21:35,379
yes it's Python tough crowd will encrypt

561
00:21:33,669 --> 00:21:37,450
it for you if you want to use this for

562
00:21:35,379 --> 00:21:42,250
writing more traditional may just blow

563
00:21:37,450 --> 00:21:45,269
this up so this is literally that

564
00:21:42,250 --> 00:21:48,100
shellcode that was just generated it's

565
00:21:45,269 --> 00:21:50,230
439 bytes so we're going to take this

566
00:21:48,100 --> 00:21:55,049
and we're going to copy this source code

567
00:21:50,230 --> 00:21:55,049
off to the my encoder directory

568
00:21:56,200 --> 00:22:13,070
yes coder I told it what I've really

569
00:22:08,510 --> 00:22:17,590
hated Mac keyboards I know I'm missing a

570
00:22:13,070 --> 00:22:23,020
lot okay so we should be over there

571
00:22:17,590 --> 00:22:26,060
let's jump over and do some encoding now

572
00:22:23,020 --> 00:22:27,800
the e Neos encoder crashes on Callie I

573
00:22:26,060 --> 00:22:30,980
have no idea why I haven't looked

574
00:22:27,800 --> 00:22:32,330
I don't do dev work on Callie so I

575
00:22:30,980 --> 00:22:35,450
haven't looked into it so I'm gonna do

576
00:22:32,330 --> 00:22:39,590
the encoding on Debian but we should

577
00:22:35,450 --> 00:22:48,920
have our should be our file so we just

578
00:22:39,590 --> 00:22:52,100
brought over so that okay for 39 was

579
00:22:48,920 --> 00:22:53,900
that correct okay so this is our

580
00:22:52,100 --> 00:22:57,709
shellcode is this header file is

581
00:22:53,900 --> 00:22:59,600
included in the the encoder so what

582
00:22:57,710 --> 00:23:05,300
we're gonna do is make sure this is

583
00:22:59,600 --> 00:23:06,500
empty we're gonna build it for those

584
00:23:05,300 --> 00:23:10,760
Python developers this is called a

585
00:23:06,500 --> 00:23:14,120
compiler it catches a lot of your bugs

586
00:23:10,760 --> 00:23:19,610
before you run the code I think it's

587
00:23:14,120 --> 00:23:21,379
like spellcheck okay so we've built our

588
00:23:19,610 --> 00:23:23,479
encoder and I'm gonna go and start this

589
00:23:21,380 --> 00:23:25,280
it's gonna be a little messy like my

590
00:23:23,480 --> 00:23:28,190
code but we're gonna go ahead and start

591
00:23:25,280 --> 00:23:32,870
encoding this and what you're gonna see

592
00:23:28,190 --> 00:23:35,000
once it settles down a little bit you're

593
00:23:32,870 --> 00:23:37,580
gonna see it's a it's chunk the show

594
00:23:35,000 --> 00:23:40,730
code there's 439 chunks so we're doing

595
00:23:37,580 --> 00:23:42,169
one neural network per character the

596
00:23:40,730 --> 00:23:44,810
show code that runs really fast great

597
00:23:42,170 --> 00:23:46,040
for testing and let me let me just go

598
00:23:44,810 --> 00:23:52,669
ahead and kill this we can kind of focus

599
00:23:46,040 --> 00:23:56,210
on a little bit so let me just scroll up

600
00:23:52,670 --> 00:23:58,000
to one that we got a solution to here's

601
00:23:56,210 --> 00:24:02,930
11

602
00:23:58,000 --> 00:24:04,430
okay yep solution found so this the 11th

603
00:24:02,930 --> 00:24:08,270
character of the show code it took ten

604
00:24:04,430 --> 00:24:10,250
generations to solve solution found and

605
00:24:08,270 --> 00:24:11,810
then so it's going it's going to go

606
00:24:10,250 --> 00:24:14,000
through all these and one at a time it's

607
00:24:11,810 --> 00:24:17,870
gonna solve for that particular chunk

608
00:24:14,000 --> 00:24:19,970
and then save that file off it would

609
00:24:17,870 --> 00:24:21,739
take me about 10 to 20 minutes even with

610
00:24:19,970 --> 00:24:23,270
that really basic fitness function of

611
00:24:21,740 --> 00:24:24,560
just can it output the right shell code

612
00:24:23,270 --> 00:24:26,120
so I'm not gonna make you sit through

613
00:24:24,560 --> 00:24:27,409
that that's time better spent like

614
00:24:26,120 --> 00:24:34,280
looking for parking or something like

615
00:24:27,410 --> 00:24:35,990
you know too soon um I've got one pre

616
00:24:34,280 --> 00:24:44,510
saved but I do want to show you what

617
00:24:35,990 --> 00:24:46,670
what it's actually happening so this is

618
00:24:44,510 --> 00:24:48,050
like an index file that the loader will

619
00:24:46,670 --> 00:24:51,950
read so it knows all the different

620
00:24:48,050 --> 00:24:54,770
chunks and where the the individual DNA

621
00:24:51,950 --> 00:24:56,900
strands are and the separate files these

622
00:24:54,770 --> 00:24:59,300
are all very basic just a couple of

623
00:24:56,900 --> 00:25:01,310
neurons they're not too complex yet but

624
00:24:59,300 --> 00:25:03,830
let's look at a let's take a look at

625
00:25:01,310 --> 00:25:10,429
what one of these DNA look like so you

626
00:25:03,830 --> 00:25:12,260
can kind of get an idea let me break

627
00:25:10,430 --> 00:25:15,800
this down a little bit so it's easier to

628
00:25:12,260 --> 00:25:18,590
look at this is a couple some high-level

629
00:25:15,800 --> 00:25:19,520
information about the the neural network

630
00:25:18,590 --> 00:25:21,919
and then we start getting into the

631
00:25:19,520 --> 00:25:29,690
individual components let me see if I

632
00:25:21,920 --> 00:25:32,330
can get down to this neuron is an output

633
00:25:29,690 --> 00:25:35,410
neuron this is the the output neuron

634
00:25:32,330 --> 00:25:37,909
that actually outputs the the character

635
00:25:35,410 --> 00:25:43,250
it is the fifth one and we'll see

636
00:25:37,910 --> 00:25:46,730
there's a lot of stuff in here I just

637
00:25:43,250 --> 00:25:49,640
break this up so this is an output

638
00:25:46,730 --> 00:25:51,890
neuron and we see it's got an activation

639
00:25:49,640 --> 00:25:54,410
response this this is gonna determine

640
00:25:51,890 --> 00:25:55,580
based on the the synapses the links

641
00:25:54,410 --> 00:25:58,220
coming in to it depending on how much

642
00:25:55,580 --> 00:26:03,260
signal it gets it exceeds this threshold

643
00:25:58,220 --> 00:26:06,260
it will fire on something the links

644
00:26:03,260 --> 00:26:09,290
inside of it you see this is a link from

645
00:26:06,260 --> 00:26:11,330
neuron index zero to this one five and

646
00:26:09,290 --> 00:26:13,158
that link that's

647
00:26:11,330 --> 00:26:14,749
has a weight these weights and

648
00:26:13,159 --> 00:26:16,249
activation function that's the software

649
00:26:14,749 --> 00:26:19,489
if you're thinking about this as a

650
00:26:16,249 --> 00:26:20,809
virtual machine the the neuron itself

651
00:26:19,489 --> 00:26:22,729
these links

652
00:26:20,809 --> 00:26:25,158
that's the hardware so this is that

653
00:26:22,729 --> 00:26:27,379
specification this is literally the DNA

654
00:26:25,159 --> 00:26:28,549
data that the genetic algorithm works on

655
00:26:27,379 --> 00:26:33,918
and it gives you enough information to

656
00:26:28,549 --> 00:26:36,649
create that neural network but since I'm

657
00:26:33,919 --> 00:26:51,590
too lazy to do all that right now what

658
00:26:36,649 --> 00:26:53,539
I'm gonna do is copy a premade one and

659
00:26:51,590 --> 00:26:55,039
you see I've got quite a few chunks on

660
00:26:53,539 --> 00:26:59,509
this one but it solved the entire thing

661
00:26:55,039 --> 00:27:01,759
one thing I like to do is when I do this

662
00:26:59,509 --> 00:27:04,639
for a future go ahead and copy that and

663
00:27:01,759 --> 00:27:06,200
code it out put into it because if you

664
00:27:04,639 --> 00:27:07,248
don't you're gonna forget what it is and

665
00:27:06,200 --> 00:27:08,749
you're not gonna be able to reverse

666
00:27:07,249 --> 00:27:10,009
engineer it back out lets you run it and

667
00:27:08,749 --> 00:27:13,179
throw up wireshark to see where it's

668
00:27:10,009 --> 00:27:18,440
calling off to I've made that mistake

669
00:27:13,179 --> 00:27:21,739
but this one is this is an old one

670
00:27:18,440 --> 00:27:24,769
reload it this one's actually a

671
00:27:21,739 --> 00:27:26,809
different size so you run MSF venom

672
00:27:24,769 --> 00:27:28,659
these days it's gonna generate a little

673
00:27:26,809 --> 00:27:32,059
bit differently each time so this one

674
00:27:28,659 --> 00:27:33,080
happened to be slightly smaller so show

675
00:27:32,059 --> 00:27:34,729
goes a little bit different but I

676
00:27:33,080 --> 00:27:36,859
actually copied the command into a

677
00:27:34,729 --> 00:27:38,659
comment it's literally the exact same

678
00:27:36,859 --> 00:27:41,210
command I ran before it's same IP

679
00:27:38,659 --> 00:27:46,070
address and everything so now that we've

680
00:27:41,210 --> 00:27:48,590
got the an encoded show code in neural

681
00:27:46,070 --> 00:27:50,479
network form we want to create the

682
00:27:48,590 --> 00:27:53,449
loader that will execute on Windows tom

683
00:27:50,479 --> 00:27:55,070
so because I'm schizophrenic and I don't

684
00:27:53,450 --> 00:27:56,690
have a good workflow all my

685
00:27:55,070 --> 00:27:58,220
cross-compiling tools are in Cali cuz

686
00:27:56,690 --> 00:28:01,519
that's where he gets them so we're gonna

687
00:27:58,220 --> 00:28:05,409
go back to Cali and I want to show you

688
00:28:01,519 --> 00:28:05,409
the loader it's really basic

689
00:28:09,750 --> 00:28:16,420
you see that so right away it's gonna

690
00:28:14,559 --> 00:28:19,480
look up into that same directory we were

691
00:28:16,420 --> 00:28:21,040
just at to look for those that index

692
00:28:19,480 --> 00:28:23,679
file that's gonna point it to all the

693
00:28:21,040 --> 00:28:27,100
individual kind of DNA strands for the

694
00:28:23,679 --> 00:28:33,250
genomes of the DNA and let's get down to

695
00:28:27,100 --> 00:28:36,070
the fun stuff okay so it's basically a

696
00:28:33,250 --> 00:28:39,820
big loop for all those genome files but

697
00:28:36,070 --> 00:28:41,799
it's got a the DNA the neural network

698
00:28:39,820 --> 00:28:45,189
brain and the the bot wrapper that's

699
00:28:41,799 --> 00:28:47,290
gonna make it easier to use and it's

700
00:28:45,190 --> 00:28:49,630
literally just going to read the DNA in

701
00:28:47,290 --> 00:28:51,220
from the file it's gonna create the

702
00:28:49,630 --> 00:28:53,230
neural network so phenotype is another

703
00:28:51,220 --> 00:28:55,179
word for neural network it's gonna

704
00:28:53,230 --> 00:28:57,900
create the neural network for the DNA

705
00:28:55,179 --> 00:29:00,370
and it's gonna insert it in that bot

706
00:28:57,900 --> 00:29:03,040
it's gonna push in our passphrase and

707
00:29:00,370 --> 00:29:04,510
again this is the first step proof of

708
00:29:03,040 --> 00:29:07,149
concept so it doesn't really care what

709
00:29:04,510 --> 00:29:08,919
the input is it just needs on input it's

710
00:29:07,150 --> 00:29:10,419
gonna call update which is basically run

711
00:29:08,919 --> 00:29:13,270
the neural network flush everything out

712
00:29:10,419 --> 00:29:17,770
and it's gonna get a copy of the brains

713
00:29:13,270 --> 00:29:19,389
outputs and then it's going to kind of

714
00:29:17,770 --> 00:29:21,010
push them onto a vector like an array

715
00:29:19,390 --> 00:29:23,880
just kind of save them up until it

716
00:29:21,010 --> 00:29:27,400
finishes looping through them all and

717
00:29:23,880 --> 00:29:29,830
let's see at the end once it has them

718
00:29:27,400 --> 00:29:31,929
all by the way this is not stealthy at

719
00:29:29,830 --> 00:29:33,580
all like this is not meant to bypass

720
00:29:31,929 --> 00:29:36,220
things this is just to demonstrate it

721
00:29:33,580 --> 00:29:39,129
running it's going to allocate some

722
00:29:36,220 --> 00:29:41,080
executable memory copy that that

723
00:29:39,130 --> 00:29:49,330
shellcode back in and then call it

724
00:29:41,080 --> 00:29:52,689
that's all it's gonna do so and because

725
00:29:49,330 --> 00:29:54,760
I'm too lazy to make this nice and clean

726
00:29:52,690 --> 00:29:57,630
I just wrote a a cheating script it's

727
00:29:54,760 --> 00:29:57,629
not in Python

728
00:29:58,450 --> 00:30:15,610
and it's just going to cross copilot for

729
00:29:59,980 --> 00:30:20,140
Windows and there we have our Windows

730
00:30:15,610 --> 00:30:21,580
executable so in theory demo gods when

731
00:30:20,140 --> 00:30:23,140
we run this in a Windows box it's gonna

732
00:30:21,580 --> 00:30:32,199
call back to our Kali box and we get a

733
00:30:23,140 --> 00:30:34,990
show but first we need our c2 so this is

734
00:30:32,200 --> 00:30:37,390
Metasploit we're using meterpreter which

735
00:30:34,990 --> 00:30:38,950
is a Metasploit payload we're gonna set

736
00:30:37,390 --> 00:30:41,020
up our handler to be listening for the

737
00:30:38,950 --> 00:30:43,090
callback from the windows box it's

738
00:30:41,020 --> 00:30:45,639
configured with the same windows

739
00:30:43,090 --> 00:30:49,179
meterpreter reverse HTTP very vanilla

740
00:30:45,640 --> 00:30:51,160
very basic payload this is our localhost

741
00:30:49,180 --> 00:30:56,350
IP for the Kali box and we're just gonna

742
00:30:51,160 --> 00:30:58,680
go ahead and run that and we can see

743
00:30:56,350 --> 00:31:06,969
that it's running and we'll run over to

744
00:30:58,680 --> 00:31:09,250
everyone's favorite victim windows ok so

745
00:31:06,970 --> 00:31:14,920
there is our executable we're just gonna

746
00:31:09,250 --> 00:31:16,390
share directly between the VMS so theory

747
00:31:14,920 --> 00:31:17,860
we run this we should get a shell now

748
00:31:16,390 --> 00:31:18,820
this is gonna happen fast so I'm gonna

749
00:31:17,860 --> 00:31:20,830
kind of walk through the print

750
00:31:18,820 --> 00:31:22,419
statements that are in the loader just

751
00:31:20,830 --> 00:31:25,360
you kind of know what's going on first

752
00:31:22,420 --> 00:31:27,550
it's gonna read in that that shell code

753
00:31:25,360 --> 00:31:29,679
chunk data index file so you'll see it

754
00:31:27,550 --> 00:31:31,300
like listing out all the the indices of

755
00:31:29,680 --> 00:31:33,610
the the genomes of the different chunks

756
00:31:31,300 --> 00:31:35,260
and then you'll see it looping through

757
00:31:33,610 --> 00:31:36,879
all the different neural network so

758
00:31:35,260 --> 00:31:39,129
you'll start seeing it output print out

759
00:31:36,880 --> 00:31:40,540
the the shell code characters so after

760
00:31:39,130 --> 00:31:43,080
you see all that then it'll actually

761
00:31:40,540 --> 00:31:44,830
copy it into memory and execute it

762
00:31:43,080 --> 00:31:46,270
assuming I remembered to turn off

763
00:31:44,830 --> 00:31:48,129
defender defender has actually picked up

764
00:31:46,270 --> 00:31:51,870
a signature for my loader so it wasn't

765
00:31:48,130 --> 00:31:55,690
very good at not getting that submitted

766
00:31:51,870 --> 00:31:57,250
my ops lock was bad and because it

767
00:31:55,690 --> 00:31:58,960
doesn't take much to stimulate it and

768
00:31:57,250 --> 00:32:00,520
get a meterpreter payload to drop out of

769
00:31:58,960 --> 00:32:01,900
it they actually after a couple weeks

770
00:32:00,520 --> 00:32:06,280
they picked up the signature for it so

771
00:32:01,900 --> 00:32:09,010
thanks for that Microsoft so 300 DNA

772
00:32:06,280 --> 00:32:10,090
through the show code outputs and it's

773
00:32:09,010 --> 00:32:13,540
running

774
00:32:10,090 --> 00:32:22,840
hopefully it worked hey can we get a

775
00:32:13,540 --> 00:32:28,480
session all right

776
00:32:22,840 --> 00:32:35,230
windows drop down to a show Thank You

777
00:32:28,480 --> 00:32:41,380
demo gods so um now I'll probably feel

778
00:32:35,230 --> 00:32:44,710
like working PowerPoint oh okay

779
00:32:41,380 --> 00:32:48,100
so where where does a project stand this

780
00:32:44,710 --> 00:32:50,050
is a really tough researchy project is

781
00:32:48,100 --> 00:32:50,439
definitely not in the practical stages

782
00:32:50,050 --> 00:32:53,110
yet

783
00:32:50,440 --> 00:32:54,160
I started off thinking hey I bet I can

784
00:32:53,110 --> 00:32:54,909
do this in three or four weeks and

785
00:32:54,160 --> 00:32:58,720
figure this out

786
00:32:54,910 --> 00:33:01,030
that was about six seven months ago um

787
00:32:58,720 --> 00:33:02,440
but I have proven my first question was

788
00:33:01,030 --> 00:33:04,899
can I actually do this can I actually

789
00:33:02,440 --> 00:33:07,390
get shellcode into a neural network and

790
00:33:04,900 --> 00:33:10,630
back out again using this really complex

791
00:33:07,390 --> 00:33:11,980
approach there's a lot easier ways of

792
00:33:10,630 --> 00:33:13,990
doing neural networks than this that are

793
00:33:11,980 --> 00:33:16,420
probably a lot computationally faster

794
00:33:13,990 --> 00:33:18,100
but I kind of want to see if I can get

795
00:33:16,420 --> 00:33:21,340
that recurrent link cuz I like the idea

796
00:33:18,100 --> 00:33:22,629
of having a sequence of inputs you know

797
00:33:21,340 --> 00:33:25,060
it doesn't have to be a passphrase maybe

798
00:33:22,630 --> 00:33:26,770
it's a you know the domain it's joined

799
00:33:25,060 --> 00:33:28,570
to followed by the host name followed by

800
00:33:26,770 --> 00:33:29,620
the Windows version and just kind of

801
00:33:28,570 --> 00:33:31,330
randomly throw these in and if

802
00:33:29,620 --> 00:33:33,550
everything just lines up so it drops the

803
00:33:31,330 --> 00:33:34,840
right payload a I like that idea and I'm

804
00:33:33,550 --> 00:33:38,860
gonna keep working that direction as

805
00:33:34,840 --> 00:33:40,449
long as I think I'm making progress next

806
00:33:38,860 --> 00:33:42,399
I need to make it practical I mean I I

807
00:33:40,450 --> 00:33:45,910
think I've got a practical fitness

808
00:33:42,400 --> 00:33:47,680
function written that well put benign

809
00:33:45,910 --> 00:33:48,850
shellcode if the passwords wrong but

810
00:33:47,680 --> 00:33:51,460
again it's gonna take two or three work

811
00:33:48,850 --> 00:33:54,429
two to three weeks to encode I've got a

812
00:33:51,460 --> 00:33:58,090
lot of performance code debt that I have

813
00:33:54,430 --> 00:33:59,230
to pay now and I'm kind of working on

814
00:33:58,090 --> 00:34:01,750
that I'm kind of splitting my time

815
00:33:59,230 --> 00:34:04,180
between working on fixing the

816
00:34:01,750 --> 00:34:05,920
multi-threading and on a private branch

817
00:34:04,180 --> 00:34:09,250
where I'm making CTF challenges for

818
00:34:05,920 --> 00:34:10,630
reverse engineering um a couple of

819
00:34:09,250 --> 00:34:12,969
conferences coming off the need CTF

820
00:34:10,630 --> 00:34:16,120
challenges so I'm gonna try to make some

821
00:34:12,969 --> 00:34:18,779
progress there but next I need to make

822
00:34:16,120 --> 00:34:22,690
this practical a lot of that is make it

823
00:34:18,780 --> 00:34:23,980
significantly faster and then is really

824
00:34:22,690 --> 00:34:26,710
not easy right now you

825
00:34:23,980 --> 00:34:29,379
basically you're compiling C code if I

826
00:34:26,710 --> 00:34:31,359
wanted to make this easy I I think you

827
00:34:29,379 --> 00:34:33,190
know you need to be able to include the

828
00:34:31,359 --> 00:34:35,199
show code basically you don't need to

829
00:34:33,190 --> 00:34:37,450
recompile C to make this work

830
00:34:35,199 --> 00:34:39,609
that's ridiculous it's fine for testing

831
00:34:37,449 --> 00:34:41,739
but I need to solve that if I want to

832
00:34:39,609 --> 00:34:43,960
make this easy if I want to make a tool

833
00:34:41,739 --> 00:34:45,520
that's really easy to use I kind of want

834
00:34:43,960 --> 00:34:48,790
to get some feedback from reverse

835
00:34:45,520 --> 00:34:50,530
engineers first before I do that case

836
00:34:48,790 --> 00:34:53,168
it's really really impossible I'd you

837
00:34:50,530 --> 00:34:55,540
know maybe I don't make it easy

838
00:34:53,168 --> 00:34:57,790
my immediate to do list is to finish off

839
00:34:55,540 --> 00:34:59,440
my CTF challenges branch try to get

840
00:34:57,790 --> 00:35:00,670
something useful out of it and start

841
00:34:59,440 --> 00:35:02,890
getting this in front of reverse

842
00:35:00,670 --> 00:35:04,119
engineers to see what they think see

843
00:35:02,890 --> 00:35:08,799
what this looks like when it's blown up

844
00:35:04,119 --> 00:35:12,010
in ITA Pro the performance improvements

845
00:35:08,800 --> 00:35:13,210
it's right now the multi-threading is

846
00:35:12,010 --> 00:35:14,590
based on the assumption that it was

847
00:35:13,210 --> 00:35:17,140
going to be one giant neural network

848
00:35:14,590 --> 00:35:19,990
which is not where I landed I landed on

849
00:35:17,140 --> 00:35:21,759
the chunking that is actually gonna

850
00:35:19,990 --> 00:35:23,379
scale much much better because I can

851
00:35:21,760 --> 00:35:25,990
actually create they're their

852
00:35:23,380 --> 00:35:28,390
independent chunks they evolved the same

853
00:35:25,990 --> 00:35:30,310
control logic as to what to drop win but

854
00:35:28,390 --> 00:35:32,379
its output is different so I could

855
00:35:30,310 --> 00:35:33,970
actually create a completely separate

856
00:35:32,380 --> 00:35:36,400
evolutionary process for each one and

857
00:35:33,970 --> 00:35:37,899
that scales perfectly there's very

858
00:35:36,400 --> 00:35:39,730
little interprocess communication with

859
00:35:37,900 --> 00:35:41,830
that so I've started working on that

860
00:35:39,730 --> 00:35:43,330
refactor that will make it scale much

861
00:35:41,830 --> 00:35:45,160
better I could go grab at 32 core

862
00:35:43,330 --> 00:35:47,440
droplet and digitalocean and blow

863
00:35:45,160 --> 00:35:48,430
through this stuff pretty quick right

864
00:35:47,440 --> 00:35:51,840
now that doesn't work because it just

865
00:35:48,430 --> 00:35:54,490
doesn't scale very well the code cleanup

866
00:35:51,840 --> 00:35:56,109
now those underlying classes are really

867
00:35:54,490 --> 00:35:57,819
clean because I haven't had to touch

868
00:35:56,109 --> 00:35:59,049
them when I said that's abstracted away

869
00:35:57,820 --> 00:36:00,580
and you don't have to fiddle with it I

870
00:35:59,050 --> 00:36:04,720
mean it I haven't touched that code in

871
00:36:00,580 --> 00:36:07,150
months haven't had to the encoder show

872
00:36:04,720 --> 00:36:08,500
code though however is quite a disaster

873
00:36:07,150 --> 00:36:10,510
because I kept going in this direction

874
00:36:08,500 --> 00:36:12,100
and then redirect this way and it's it's

875
00:36:10,510 --> 00:36:13,780
a mess I won't lie to you it's up there

876
00:36:12,100 --> 00:36:15,990
on my github trust me you can go look at

877
00:36:13,780 --> 00:36:19,270
it laugh at me

878
00:36:15,990 --> 00:36:22,149
the I'd like to implement some more

879
00:36:19,270 --> 00:36:24,130
advanced fitness functions I've got the

880
00:36:22,150 --> 00:36:25,090
second one that just isn't practical

881
00:36:24,130 --> 00:36:27,820
encoding wise

882
00:36:25,090 --> 00:36:29,109
I'd like a third one that drops you know

883
00:36:27,820 --> 00:36:32,350
if the password is wrong it drops

884
00:36:29,109 --> 00:36:34,840
something benign like the hello world if

885
00:36:32,350 --> 00:36:37,328
you drop an easy issue to guess password

886
00:36:34,840 --> 00:36:39,400
it drops some payload but isn't the

887
00:36:37,329 --> 00:36:43,420
Oh payload maybe it points at his sea -

888
00:36:39,400 --> 00:36:45,400
not my sea - and then a sequence of

889
00:36:43,420 --> 00:36:48,519
inputs that drops the real payload I'd

890
00:36:45,400 --> 00:36:49,599
like to I'd like to see that work that's

891
00:36:48,519 --> 00:36:52,029
up good this is gonna take a lot of work

892
00:36:49,599 --> 00:36:53,589
and there are a couple of couple use

893
00:36:52,029 --> 00:36:55,180
cases that I could see being plausible

894
00:36:53,589 --> 00:36:57,549
so maybe I can make some pre-baked

895
00:36:55,180 --> 00:36:59,200
Fitness functions and for your Python

896
00:36:57,549 --> 00:37:01,390
folks it would be really nice if I could

897
00:36:59,200 --> 00:37:02,979
bite off to Python so if one of the

898
00:37:01,390 --> 00:37:04,719
pre-baked Fitness functions didn't fit

899
00:37:02,979 --> 00:37:06,759
what you needed to do you could write

900
00:37:04,719 --> 00:37:08,890
your fitness function in Python there's

901
00:37:06,759 --> 00:37:10,660
really that's not where the computation

902
00:37:08,890 --> 00:37:12,700
is being spent so there's no reason to

903
00:37:10,660 --> 00:37:17,950
do that in something fast and elegant

904
00:37:12,700 --> 00:37:19,450
and timeless ly aged like C++ so um yeah

905
00:37:17,950 --> 00:37:21,968
that's that's pretty much it those are

906
00:37:19,450 --> 00:37:26,169
my plans um my wife would disagree with

907
00:37:21,969 --> 00:37:27,519
this to-do list but that's my plan if

908
00:37:26,170 --> 00:37:30,579
you want to contact me if anyone wants

909
00:37:27,519 --> 00:37:31,959
to try this out that's my work email you

910
00:37:30,579 --> 00:37:35,079
can find me on Twitter slacks and that's

911
00:37:31,959 --> 00:37:37,118
it focus at who do er that's the github

912
00:37:35,079 --> 00:37:39,219
where it's at please you know grab it if

913
00:37:37,119 --> 00:37:40,539
you want to try it out no don't don't

914
00:37:39,219 --> 00:37:42,369
hesitate to contact me if you having

915
00:37:40,539 --> 00:37:45,309
problems I have problems with it too so

916
00:37:42,369 --> 00:37:46,569
I feel your pain and if your reverse

917
00:37:45,309 --> 00:37:48,579
engineer you want to dig into this I'd

918
00:37:46,569 --> 00:37:50,288
be happy to give you some samples you

919
00:37:48,579 --> 00:37:51,910
know I don't think any reverse engineer

920
00:37:50,289 --> 00:37:53,699
should torture themselves getting this

921
00:37:51,910 --> 00:37:56,109
to work just to see what this looks like

922
00:37:53,699 --> 00:38:00,269
under the microscope so I'd be happy to

923
00:37:56,109 --> 00:38:03,848
help folks with that and with that

924
00:38:00,269 --> 00:38:14,288
insults questions quentin comments yes

925
00:38:03,849 --> 00:38:18,699
sir oh yes what the VM but it would it

926
00:38:14,289 --> 00:38:21,400
would crash one of the the tricks with a

927
00:38:18,699 --> 00:38:23,559
fitness function is that it's got to be

928
00:38:21,400 --> 00:38:25,749
continuous like if I have one neural

929
00:38:23,559 --> 00:38:28,209
network that performs just a gnat's hair

930
00:38:25,749 --> 00:38:30,160
better than another one it's got to get

931
00:38:28,209 --> 00:38:32,339
a better score it can't be like an a/b

932
00:38:30,160 --> 00:38:35,499
oh it's in a range that give it a B

933
00:38:32,339 --> 00:38:37,719
you're it's gonna stall your whole

934
00:38:35,499 --> 00:38:39,279
evolutionary process if it works it's

935
00:38:37,719 --> 00:38:42,699
gonna come up with these like just on

936
00:38:39,279 --> 00:38:44,440
the edge and with the size these

937
00:38:42,699 --> 00:38:46,509
floating-point numbers sometimes it'll

938
00:38:44,440 --> 00:38:47,440
be a little bit of variability and it

939
00:38:46,509 --> 00:38:50,360
may output a slightly different

940
00:38:47,440 --> 00:38:53,360
character and you get a crash

941
00:38:50,360 --> 00:38:56,300
so it's it's really all about making

942
00:38:53,360 --> 00:38:58,190
sure you have that continuous gradient

943
00:38:56,300 --> 00:39:00,110
of scores you know you really never want

944
00:38:58,190 --> 00:39:01,640
to have unless unless two neural

945
00:39:00,110 --> 00:39:03,590
networks output exactly performed

946
00:39:01,640 --> 00:39:09,140
exactly the same way they should not

947
00:39:03,590 --> 00:39:11,470
have to exact scores whether they came

948
00:39:09,140 --> 00:39:13,819
up with the exact same output

949
00:39:11,470 --> 00:39:17,120
probably I see where's these solutions

950
00:39:13,820 --> 00:39:18,410
found multiple times it's possible that

951
00:39:17,120 --> 00:39:20,720
two came out with exactly the same

952
00:39:18,410 --> 00:39:22,009
because it's taking that output that's a

953
00:39:20,720 --> 00:39:23,870
floating-point number but it needs to

954
00:39:22,010 --> 00:39:26,090
map it back to like you know a hex value

955
00:39:23,870 --> 00:39:28,220
of the shellcode so if it's in the range

956
00:39:26,090 --> 00:39:30,560
it's gonna the wrapper bottle say oh

957
00:39:28,220 --> 00:39:32,810
that lets you know you know it's 90 or

958
00:39:30,560 --> 00:39:35,000
something so they could be slightly

959
00:39:32,810 --> 00:39:36,380
different but their actual behavior is

960
00:39:35,000 --> 00:39:38,900
the same and the scoring is based on the

961
00:39:36,380 --> 00:39:42,110
floating-point numbers so I it's

962
00:39:38,900 --> 00:39:45,980
unlikely but it's possible so at the end

963
00:39:42,110 --> 00:39:49,040
of the day the scoring is different than

964
00:39:45,980 --> 00:39:50,060
what you want it to do which is kind of

965
00:39:49,040 --> 00:39:52,360
interesting because I've done

966
00:39:50,060 --> 00:39:56,270
experiments where you weren't actually

967
00:39:52,360 --> 00:39:58,610
driving evolution based on the objective

968
00:39:56,270 --> 00:40:00,620
performance of the neural networks

969
00:39:58,610 --> 00:40:02,990
you're actually grading them the novelty

970
00:40:00,620 --> 00:40:04,250
of their behavior because some some

971
00:40:02,990 --> 00:40:06,500
problems that's actually gonna work

972
00:40:04,250 --> 00:40:08,510
better but at the end of the day I care

973
00:40:06,500 --> 00:40:11,240
about the objective performance right so

974
00:40:08,510 --> 00:40:12,980
the check before did I solve it it's not

975
00:40:11,240 --> 00:40:14,720
checking for how novel was its behavior

976
00:40:12,980 --> 00:40:17,300
the check is did it solve the damn

977
00:40:14,720 --> 00:40:19,939
problem right but evolution may have

978
00:40:17,300 --> 00:40:23,690
been driven by some other metric this

979
00:40:19,940 --> 00:40:25,040
problem is very simple it's hard to pull

980
00:40:23,690 --> 00:40:27,260
off but it's conceptually simple

981
00:40:25,040 --> 00:40:29,750
objective performance how close is it is

982
00:40:27,260 --> 00:40:32,960
a perfectly fine an adequate way to

983
00:40:29,750 --> 00:40:34,880
approach it so but yeah you always want

984
00:40:32,960 --> 00:40:36,170
to check to say what did it end up doing

985
00:40:34,880 --> 00:40:38,890
because that's what you're gonna execute

986
00:40:36,170 --> 00:40:38,890
yes sir

987
00:40:46,300 --> 00:40:50,470
so the neural networks themselves don't

988
00:40:48,730 --> 00:40:52,060
take very long to execute it's the fact

989
00:40:50,470 --> 00:40:53,549
that I have like thousands and thousands

990
00:40:52,060 --> 00:40:56,470
of them over generations and generations

991
00:40:53,550 --> 00:40:59,410
the neat technique is really good

992
00:40:56,470 --> 00:41:01,540
it starts minimally and slowly grows the

993
00:40:59,410 --> 00:41:04,270
neural network so it actually ends up

994
00:41:01,540 --> 00:41:06,190
with usually with pretty tight neural

995
00:41:04,270 --> 00:41:07,750
networks um they're still end up pretty

996
00:41:06,190 --> 00:41:10,630
complicated especially you get the

997
00:41:07,750 --> 00:41:12,550
recurrent stuff I think it's more if

998
00:41:10,630 --> 00:41:14,050
you're looking at like maybe a

999
00:41:12,550 --> 00:41:16,540
traditional like back propagation

1000
00:41:14,050 --> 00:41:18,250
technique I think would actually if you

1001
00:41:16,540 --> 00:41:20,020
use just traditional neural networks

1002
00:41:18,250 --> 00:41:21,880
feed-forward but I think this will

1003
00:41:20,020 --> 00:41:23,710
probably be really fast it's a pretty

1004
00:41:21,880 --> 00:41:25,540
simple problem I haven't tried it yet

1005
00:41:23,710 --> 00:41:29,590
but that's kind of my plan B if I can't

1006
00:41:25,540 --> 00:41:31,060
get the the the functionality I want I

1007
00:41:29,590 --> 00:41:34,120
might step back to a more traditional

1008
00:41:31,060 --> 00:41:36,850
technique and just forgo the sequence of

1009
00:41:34,120 --> 00:41:37,990
inputs trigger um probably make

1010
00:41:36,850 --> 00:41:44,890
something practical pretty easy but

1011
00:41:37,990 --> 00:41:54,160
probably left faster - yes if it's false

1012
00:41:44,890 --> 00:41:56,430
positives well this first one doesn't it

1013
00:41:54,160 --> 00:41:58,779
doesn't the the fitness function doesn't

1014
00:41:56,430 --> 00:42:01,390
grade any differently based on the input

1015
00:41:58,780 --> 00:42:04,720
so I have no expectations with the first

1016
00:42:01,390 --> 00:42:09,730
proof of concept that it's going to do

1017
00:42:04,720 --> 00:42:12,879
anything differently so yeah so you

1018
00:42:09,730 --> 00:42:15,010
could have a very robust fitness

1019
00:42:12,880 --> 00:42:16,450
function that's going to have a huge

1020
00:42:15,010 --> 00:42:17,590
password list and if it's not the right

1021
00:42:16,450 --> 00:42:20,620
password that's going to be

1022
00:42:17,590 --> 00:42:22,990
computationally ineffective the one I

1023
00:42:20,620 --> 00:42:25,500
have now you can figure how many loops

1024
00:42:22,990 --> 00:42:28,750
you want to do it'll randomly generate a

1025
00:42:25,500 --> 00:42:31,510
password that's not right and it'll have

1026
00:42:28,750 --> 00:42:33,580
the right one and it does kind of not

1027
00:42:31,510 --> 00:42:35,680
correct password stimulants and correct

1028
00:42:33,580 --> 00:42:37,480
passwords measure them both in it you

1029
00:42:35,680 --> 00:42:39,580
know it's looking for if it's the wrong

1030
00:42:37,480 --> 00:42:41,830
password is outputting an OPS led if

1031
00:42:39,580 --> 00:42:43,960
it's a right app word but you would at

1032
00:42:41,830 --> 00:42:48,310
the end need to do very thorough

1033
00:42:43,960 --> 00:42:51,160
brute-forcing I suspect that it's

1034
00:42:48,310 --> 00:42:52,150
probably gonna be for the first fitness

1035
00:42:51,160 --> 00:42:54,520
functions where you're trying to go very

1036
00:42:52,150 --> 00:42:56,260
fast that you're where you're not doing

1037
00:42:54,520 --> 00:42:58,319
a lot of stimulants that you're gonna

1038
00:42:56,260 --> 00:43:00,479
find that if you get close

1039
00:42:58,319 --> 00:43:02,729
- the password it's probably gonna dump

1040
00:43:00,479 --> 00:43:03,959
the right show code right so I think

1041
00:43:02,729 --> 00:43:05,669
that's gonna take a lot of brute force

1042
00:43:03,959 --> 00:43:07,859
testing because at the end of the day I

1043
00:43:05,670 --> 00:43:09,209
think reverse engineers are only really

1044
00:43:07,859 --> 00:43:11,130
going to be able to approach this from a

1045
00:43:09,209 --> 00:43:13,649
brute-forcing perspective so that's

1046
00:43:11,130 --> 00:43:15,900
gonna be critical but I got to get it to

1047
00:43:13,650 --> 00:43:17,819
practical before I can get to the brute

1048
00:43:15,900 --> 00:43:19,589
forcing to really test that out but yes

1049
00:43:17,819 --> 00:43:21,680
I think absolutely 100%

1050
00:43:19,589 --> 00:43:23,849
I suspect once I have a working but very

1051
00:43:21,680 --> 00:43:26,009
cheap fitness function that's not doing

1052
00:43:23,849 --> 00:43:27,839
too many loops cuz I'm trying to go fast

1053
00:43:26,009 --> 00:43:29,640
and test that I'm gonna have that

1054
00:43:27,839 --> 00:43:30,269
problem that if you got pretty close to

1055
00:43:29,640 --> 00:43:32,279
the password

1056
00:43:30,269 --> 00:43:34,379
that it's gonna dump the right shell

1057
00:43:32,279 --> 00:43:35,849
code my payload that I don't want dumped

1058
00:43:34,380 --> 00:43:38,190
so and then you'll have to refine to

1059
00:43:35,849 --> 00:43:42,529
make it more stringent but right now I'm

1060
00:43:38,190 --> 00:43:46,410
still a little bit in exploratory phase

1061
00:43:42,529 --> 00:43:49,170
yes and I think I think that problem

1062
00:43:46,410 --> 00:43:51,149
would be easier to approach from the

1063
00:43:49,170 --> 00:43:53,910
more traditional like feed for back

1064
00:43:51,150 --> 00:43:56,489
propagation because you it's there's so

1065
00:43:53,910 --> 00:43:58,979
many so fewer computations that I could

1066
00:43:56,489 --> 00:44:00,839
really train the snot out of it to be

1067
00:43:58,979 --> 00:44:03,538
honest with you I could really slam it

1068
00:44:00,839 --> 00:44:05,999
home so I think that Plan B's starting

1069
00:44:03,539 --> 00:44:07,049
to pop up in my background and I've done

1070
00:44:05,999 --> 00:44:09,359
those before and I've got a lot of

1071
00:44:07,049 --> 00:44:10,739
software written for that but I still

1072
00:44:09,359 --> 00:44:11,848
want to kind of keep going this route a

1073
00:44:10,739 --> 00:44:18,769
little while longer I haven't given up

1074
00:44:11,849 --> 00:44:18,769
yet so do ok no time anyone else yes sir

1075
00:44:18,799 --> 00:44:26,369
no no I'm not this is all cpu-bound

1076
00:44:22,410 --> 00:44:30,029
um because I'm old and I'm lazy I'm just

1077
00:44:26,369 --> 00:44:34,920
lazy well I'm old too it's just it's

1078
00:44:30,029 --> 00:44:38,519
easy - I wrote this for grad school and

1079
00:44:34,920 --> 00:44:43,410
I had access to 48 CPU core clusters all

1080
00:44:38,519 --> 00:44:45,238
to myself so I didn't need to I not

1081
00:44:43,410 --> 00:44:47,308
aware of an implementation of neuro

1082
00:44:45,239 --> 00:44:49,440
evolution of augmenting topologies that

1083
00:44:47,309 --> 00:44:51,690
uses GPUs now this is my own

1084
00:44:49,440 --> 00:44:55,799
implementation but it's based on reading

1085
00:44:51,690 --> 00:44:59,339
the algorithms of papers and stuff other

1086
00:44:55,799 --> 00:45:00,538
if I go to another technique a more

1087
00:44:59,339 --> 00:45:02,038
traditional technique I probably could

1088
00:45:00,539 --> 00:45:05,660
find something it's like OpenCL based

1089
00:45:02,039 --> 00:45:08,009
really speed this up I'm not aware of a

1090
00:45:05,660 --> 00:45:10,199
neuro evolution of augmenting topologies

1091
00:45:08,009 --> 00:45:11,820
implementation in open Co that would be

1092
00:45:10,199 --> 00:45:19,170
that would be amazing

1093
00:45:11,820 --> 00:45:21,510
so yes yes once I finished the refactor

1094
00:45:19,170 --> 00:45:24,360
it will scale exceptionally well two

1095
00:45:21,510 --> 00:45:27,360
more cores but it's still CPU cores so

1096
00:45:24,360 --> 00:45:28,620
but now digitalocean droplet so cheap so

1097
00:45:27,360 --> 00:45:32,180
I should be able to make this

1098
00:45:28,620 --> 00:45:32,180
significantly faster than it is now

1099
00:45:32,480 --> 00:45:51,960
anyone else yes sir um you know I keep

1100
00:45:49,410 --> 00:45:54,240
using pass phrases and sequence because

1101
00:45:51,960 --> 00:45:56,900
it's easy to communicate

1102
00:45:54,240 --> 00:46:01,560
I don't do red teaming for trusted SEC

1103
00:45:56,900 --> 00:46:03,360
I'm more in the apps section so I'm not

1104
00:46:01,560 --> 00:46:06,710
really doing stuff like that but I could

1105
00:46:03,360 --> 00:46:09,810
easily see instead of looking at

1106
00:46:06,710 --> 00:46:11,910
necessarily the the right password it

1107
00:46:09,810 --> 00:46:14,160
may be as the conditions are right if

1108
00:46:11,910 --> 00:46:15,629
you had you know completely you're

1109
00:46:14,160 --> 00:46:17,640
deploying this in a network where you

1110
00:46:15,630 --> 00:46:19,170
have no connectivity to an outside

1111
00:46:17,640 --> 00:46:21,420
server where you could load something

1112
00:46:19,170 --> 00:46:24,870
else and you have to package all your

1113
00:46:21,420 --> 00:46:26,430
payloads into one binary you could put

1114
00:46:24,870 --> 00:46:27,750
in multiple payloads in here and the

1115
00:46:26,430 --> 00:46:29,850
control logic could be more along the

1116
00:46:27,750 --> 00:46:32,550
lines of are the conditions right for

1117
00:46:29,850 --> 00:46:35,520
that payload you know dabei enjoined

1118
00:46:32,550 --> 00:46:37,110
hostname things along those lines the

1119
00:46:35,520 --> 00:46:40,290
use cases for that are getting a little

1120
00:46:37,110 --> 00:46:41,490
bit slimmer but i think that could be

1121
00:46:40,290 --> 00:46:44,130
really interesting to get away from

1122
00:46:41,490 --> 00:46:46,379
passphrases look more an environment you

1123
00:46:44,130 --> 00:46:48,840
know is it the right domain is the right

1124
00:46:46,380 --> 00:46:50,880
hostname the right version does USB

1125
00:46:48,840 --> 00:46:54,570
devices have a history you know am i MC

1126
00:46:50,880 --> 00:46:57,060
unboxed you know is there any cash on

1127
00:46:54,570 --> 00:46:57,900
the browser you know you know trying to

1128
00:46:57,060 --> 00:47:07,440
make sure you're in the right place

1129
00:46:57,900 --> 00:47:09,060
oh it's not creating the shellcode it's

1130
00:47:07,440 --> 00:47:11,100
just holding the show code we're

1131
00:47:09,060 --> 00:47:12,960
treating as a USB device it's not

1132
00:47:11,100 --> 00:47:15,240
creating its own show code yeah it's

1133
00:47:12,960 --> 00:47:17,130
it's taking the shell code itself the

1134
00:47:15,240 --> 00:47:20,549
payload and it's taking the control

1135
00:47:17,130 --> 00:47:23,220
logic and putting those into the neural

1136
00:47:20,550 --> 00:47:24,780
network the nice thing is is above and

1137
00:47:23,220 --> 00:47:25,230
beyond just encrypting and decrypting in

1138
00:47:24,780 --> 00:47:28,920
memory

1139
00:47:25,230 --> 00:47:30,030
is a reverse engineer wouldn't

1140
00:47:28,920 --> 00:47:32,310
necessarily know how many payloads are

1141
00:47:30,030 --> 00:47:33,869
in there and that control logic for what

1142
00:47:32,310 --> 00:47:35,070
to drop Wynn is also in the neural

1143
00:47:33,869 --> 00:47:37,560
network that's kind of what makes it

1144
00:47:35,070 --> 00:47:39,240
hard to pull this off but that's kind of

1145
00:47:37,560 --> 00:47:41,130
a nice thing now you can make this a lot

1146
00:47:39,240 --> 00:47:43,439
easier by just having a couple of

1147
00:47:41,130 --> 00:47:45,329
payloads encrypted have your control

1148
00:47:43,440 --> 00:47:46,859
logic and the decryption keys in the

1149
00:47:45,329 --> 00:47:48,450
neural network but then the reverse

1150
00:47:46,859 --> 00:47:49,920
engineer is going to know how many

1151
00:47:48,450 --> 00:47:53,160
payloads there are and they're gonna

1152
00:47:49,920 --> 00:47:54,869
know to keep digging if you put the show

1153
00:47:53,160 --> 00:47:56,399
code in there itself they don't know to

1154
00:47:54,869 --> 00:47:59,520
keep they won't necessarily know to keep

1155
00:47:56,400 --> 00:48:01,589
digging that's kind of mean that's one

1156
00:47:59,520 --> 00:48:02,820
kind of going for like the hard the hard

1157
00:48:01,589 --> 00:48:19,279
way first because I want to get there

1158
00:48:02,820 --> 00:48:19,280
you have to change the loader yeah

1159
00:48:20,060 --> 00:48:23,910
nope no because it's not

1160
00:48:22,410 --> 00:48:27,930
they don't network isn't executing

1161
00:48:23,910 --> 00:48:30,480
really in the community it is its own

1162
00:48:27,930 --> 00:48:33,359
basically its own VM so as long as the

1163
00:48:30,480 --> 00:48:36,349
classes compile on a box and it does

1164
00:48:33,359 --> 00:48:41,369
floating point math correctly

1165
00:48:36,349 --> 00:48:43,710
no no but most of this code has has only

1166
00:48:41,369 --> 00:48:53,520
been running in Linux it's like on the

1167
00:48:43,710 --> 00:48:56,849
next guy so yeah I I Oh Pete why do

1168
00:48:53,520 --> 00:48:59,930
people in this room peers I feel great

1169
00:48:56,849 --> 00:49:03,119
offense has been committed I'm sorry so

1170
00:48:59,930 --> 00:49:05,720
but yeah you know it's literally just

1171
00:49:03,119 --> 00:49:08,250
turning it into a secure lockbox

1172
00:49:05,720 --> 00:49:11,730
what you do with with it once you get it

1173
00:49:08,250 --> 00:49:16,640
out of the lockbox is up to you so do

1174
00:49:11,730 --> 00:49:19,640
good let's go yes sir

1175
00:49:16,640 --> 00:49:19,640
yeah

1176
00:49:40,219 --> 00:49:47,660
it is a possibility it would be really

1177
00:49:43,829 --> 00:49:50,130
hard to pull that off

1178
00:49:47,660 --> 00:49:53,969
giving it the inputs if you could give

1179
00:49:50,130 --> 00:49:56,519
me I am NOT re if you could give me some

1180
00:49:53,969 --> 00:49:58,259
we can sit down front with frosty beer

1181
00:49:56,519 --> 00:50:00,058
and kind of go over what that would look

1182
00:49:58,259 --> 00:50:01,410
like and I know how we could feed that

1183
00:50:00,059 --> 00:50:03,959
as an input into the system

1184
00:50:01,410 --> 00:50:06,450
we could probably automate that but

1185
00:50:03,959 --> 00:50:08,069
again weather becomes computationally

1186
00:50:06,450 --> 00:50:14,959
feasible that's a whole other question

1187
00:50:08,069 --> 00:50:18,719
so anyone else everyone's getting hungry

1188
00:50:14,959 --> 00:50:23,700
okay if that thank you so much for

1189
00:50:18,719 --> 00:50:27,859
coming out so thanks drew

1190
00:50:23,700 --> 00:50:27,859
great talk man all right

