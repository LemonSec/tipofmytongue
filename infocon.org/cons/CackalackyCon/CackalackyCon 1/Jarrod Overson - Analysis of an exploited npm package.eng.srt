1
00:00:00,030 --> 00:00:05,040
well thank you very much so I've never

2
00:00:03,060 --> 00:00:06,990
given a talk right after dinner before I

3
00:00:05,040 --> 00:00:10,019
hope everyone is sufficiently lubricated

4
00:00:06,990 --> 00:00:12,480
I on the other hand am not out of

5
00:00:10,019 --> 00:00:14,009
respect for all you beautiful people but

6
00:00:12,480 --> 00:00:16,260
that means that after this I'll probably

7
00:00:14,009 --> 00:00:18,029
be heading straight to the bar so if you

8
00:00:16,260 --> 00:00:20,609
have any questions then you can find me

9
00:00:18,029 --> 00:00:23,609
down at the bar so I'll be talking about

10
00:00:20,609 --> 00:00:26,580
an NPM exploit that had happened last

11
00:00:23,609 --> 00:00:29,039
November but first off how many people

12
00:00:26,580 --> 00:00:31,080
have felt uncomfortable when presented

13
00:00:29,039 --> 00:00:32,579
with an instruction like this basically

14
00:00:31,080 --> 00:00:34,430
you just you take something from the web

15
00:00:32,579 --> 00:00:37,290
and you run it through something else

16
00:00:34,430 --> 00:00:39,300
you might even have people who jump on

17
00:00:37,290 --> 00:00:40,710
your keyboard and yell at you for doing

18
00:00:39,300 --> 00:00:42,989
something like that or you might

19
00:00:40,710 --> 00:00:45,300
actually even be that person or you

20
00:00:42,989 --> 00:00:47,038
might be motivated enough to actually

21
00:00:45,300 --> 00:00:50,160
put together a page on the internet to

22
00:00:47,039 --> 00:00:51,329
shame other people who do that this is

23
00:00:50,160 --> 00:00:52,919
pretty common it should feel

24
00:00:51,329 --> 00:00:57,030
uncomfortable because it's horrible and

25
00:00:52,920 --> 00:00:59,250
weird and icky and it causes really

26
00:00:57,030 --> 00:01:02,129
scary things to happen your computer may

27
00:00:59,250 --> 00:01:04,170
be right more often than not it probably

28
00:01:02,129 --> 00:01:08,369
doesn't but you still feel terrified

29
00:01:04,170 --> 00:01:11,189
about it but as developers if you are

30
00:01:08,369 --> 00:01:13,820
all developers we're running random code

31
00:01:11,189 --> 00:01:16,320
from the internet all day every day

32
00:01:13,820 --> 00:01:18,779
whenever we do a pip install something

33
00:01:16,320 --> 00:01:20,220
or a gem install something or an NPM

34
00:01:18,780 --> 00:01:22,950
install anything their brew install

35
00:01:20,220 --> 00:01:24,960
anything we're just sucking in code not

36
00:01:22,950 --> 00:01:26,070
auditing it don't know where it comes

37
00:01:24,960 --> 00:01:28,439
don't know what it's doing we're just

38
00:01:26,070 --> 00:01:31,710
trusting that it's okay and sometimes

39
00:01:28,439 --> 00:01:34,110
it's not so last November a package a

40
00:01:31,710 --> 00:01:36,449
very popular package was exploited and

41
00:01:34,110 --> 00:01:38,369
downloaded millions upon millions of

42
00:01:36,450 --> 00:01:41,610
times for a month and a half before

43
00:01:38,369 --> 00:01:44,280
anyone noticed anything so first off Who

44
00:01:41,610 --> 00:01:46,500
am I I'm a generic web dork I've been

45
00:01:44,280 --> 00:01:49,020
talking about JavaScript and breaking

46
00:01:46,500 --> 00:01:50,790
web apps for a very long time director

47
00:01:49,020 --> 00:01:52,140
at shape security if you are old enough

48
00:01:50,790 --> 00:01:54,390
to have played games like fallout

49
00:01:52,140 --> 00:01:55,799
Starcraft a total annihilation and have

50
00:01:54,390 --> 00:01:57,350
broken any of those and you might have

51
00:01:55,799 --> 00:02:00,030
used some of my tools to do that

52
00:01:57,350 --> 00:02:00,780
so let me starting off with how it

53
00:02:00,030 --> 00:02:03,540
happened

54
00:02:00,780 --> 00:02:04,320
it all started with a single package

55
00:02:03,540 --> 00:02:08,910
event

56
00:02:04,320 --> 00:02:10,978
- stream so event stream is one of the

57
00:02:08,910 --> 00:02:13,740
earlier packages to have been created in

58
00:02:10,979 --> 00:02:17,070
the node.js ecosystem base

59
00:02:13,740 --> 00:02:20,370
around the stream architecture streams

60
00:02:17,070 --> 00:02:21,720
are basic primitives in node that

61
00:02:20,370 --> 00:02:24,150
they're very very popular kind of

62
00:02:21,720 --> 00:02:25,800
complex so a tool like this built early

63
00:02:24,150 --> 00:02:28,440
on is going to become very very popular

64
00:02:25,800 --> 00:02:30,990
very very quickly as of right now it has

65
00:02:28,440 --> 00:02:32,700
over 1,500 direct dependence to rip

66
00:02:30,990 --> 00:02:35,910
dependence of those projects certainly

67
00:02:32,700 --> 00:02:38,700
just spiral out of control and has been

68
00:02:35,910 --> 00:02:42,390
downloaded or is downloaded 1.2 million

69
00:02:38,700 --> 00:02:45,060
times every single week event stream was

70
00:02:42,390 --> 00:02:47,459
maintained by prolific developer dominic

71
00:02:45,060 --> 00:02:49,710
tar this is not a no-name sort of guy

72
00:02:47,460 --> 00:02:53,970
this is a very very popular person in

73
00:02:49,710 --> 00:02:57,090
the nodejs and elsewhere ecosystems he

74
00:02:53,970 --> 00:02:59,340
is very very active he has quite a

75
00:02:57,090 --> 00:03:03,150
following on github and otherwise and

76
00:02:59,340 --> 00:03:05,700
has a lot of code to his name hundreds

77
00:03:03,150 --> 00:03:09,330
upon hundreds of repositories hundreds

78
00:03:05,700 --> 00:03:11,609
of modules in the node.js world and he's

79
00:03:09,330 --> 00:03:15,780
not just a random guy who doesn't know

80
00:03:11,610 --> 00:03:18,900
how to develop good software but on one

81
00:03:15,780 --> 00:03:21,510
day in September last year he gave the

82
00:03:18,900 --> 00:03:24,210
control of that repository to some

83
00:03:21,510 --> 00:03:27,390
random user on the internet right nine

84
00:03:24,210 --> 00:03:30,180
control now you might ask why would

85
00:03:27,390 --> 00:03:31,890
somebody do that the whole point of some

86
00:03:30,180 --> 00:03:35,610
of these people trying to put together

87
00:03:31,890 --> 00:03:37,890
an open-source persona is to have the

88
00:03:35,610 --> 00:03:39,330
chance of maybe having a project take

89
00:03:37,890 --> 00:03:40,619
off so they can tie their name to it and

90
00:03:39,330 --> 00:03:42,510
then have that be a brand building

91
00:03:40,620 --> 00:03:44,190
exercise later down in their life why

92
00:03:42,510 --> 00:03:47,220
would this guy give up something like

93
00:03:44,190 --> 00:03:50,010
that to just some random person well he

94
00:03:47,220 --> 00:03:51,900
answered that for us he emailed me and

95
00:03:50,010 --> 00:03:54,989
said he wanted to maintain the module so

96
00:03:51,900 --> 00:03:58,380
I gave it to him and I can't really

97
00:03:54,990 --> 00:04:00,210
blame him he's not getting paid might be

98
00:03:58,380 --> 00:04:02,070
fun at the start to build some of these

99
00:04:00,210 --> 00:04:03,690
projects but at the end of the day after

100
00:04:02,070 --> 00:04:06,209
a couple years you just have people

101
00:04:03,690 --> 00:04:07,740
whining at you to do work for free and

102
00:04:06,210 --> 00:04:11,310
it ends up being kind of a pain in the

103
00:04:07,740 --> 00:04:13,770
ass and this is not unique to Dominic

104
00:04:11,310 --> 00:04:16,560
this is this is prevalent all across

105
00:04:13,770 --> 00:04:18,090
open-source and this is this is what

106
00:04:16,560 --> 00:04:20,100
we're building up on top of right now a

107
00:04:18,089 --> 00:04:21,358
lot of people and projects who just

108
00:04:20,100 --> 00:04:23,280
don't want to work on their stuff

109
00:04:21,358 --> 00:04:24,299
anymore and that that's okay just

110
00:04:23,280 --> 00:04:25,559
because you release something once

111
00:04:24,300 --> 00:04:26,570
doesn't necessarily mean you want to

112
00:04:25,560 --> 00:04:30,050
maintain it

113
00:04:26,570 --> 00:04:32,150
the end of time anyway right 9 control

114
00:04:30,050 --> 00:04:34,520
game trust by committing several

115
00:04:32,150 --> 00:04:36,289
innocent changes updating dependencies

116
00:04:34,520 --> 00:04:37,549
it was a project that hadn't been worked

117
00:04:36,290 --> 00:04:39,350
on in a while

118
00:04:37,550 --> 00:04:41,900
added some examples updated some

119
00:04:39,350 --> 00:04:46,010
documentation it was pretty basic stuff

120
00:04:41,900 --> 00:04:48,590
on September 9th right 9 ctrl added a

121
00:04:46,010 --> 00:04:51,050
new dependency and released version 3 3

122
00:04:48,590 --> 00:04:54,200
6 the dependency was flat map stream

123
00:04:51,050 --> 00:04:56,120
version 0 1 0 this dependency had

124
00:04:54,200 --> 00:04:58,070
nothing weird about it it did something

125
00:04:56,120 --> 00:05:01,060
useful it didn't look like anything was

126
00:04:58,070 --> 00:05:04,700
strange but let's talk about that carrot

127
00:05:01,060 --> 00:05:06,200
so first off Oh quick run-through on

128
00:05:04,700 --> 00:05:08,030
semantic versioning for anyone who's not

129
00:05:06,200 --> 00:05:10,130
up to speed with semantic versioning

130
00:05:08,030 --> 00:05:12,530
semantic versioning is the those three

131
00:05:10,130 --> 00:05:15,350
numbers separated by two dots blanked up

132
00:05:12,530 --> 00:05:18,619
linked up linked it goes my major minor

133
00:05:15,350 --> 00:05:19,850
patch so as you add bug fixes and

134
00:05:18,620 --> 00:05:21,920
patches you increment the patch version

135
00:05:19,850 --> 00:05:23,900
add features you update the middle

136
00:05:21,920 --> 00:05:26,240
version minor version and as you break

137
00:05:23,900 --> 00:05:27,830
API as you update the major version the

138
00:05:26,240 --> 00:05:30,470
thought they are is that the they are

139
00:05:27,830 --> 00:05:32,270
increasing and risk the with those

140
00:05:30,470 --> 00:05:33,760
numbers so that you can get a better

141
00:05:32,270 --> 00:05:36,440
understanding of what you're updating to

142
00:05:33,760 --> 00:05:38,240
so in node and some other languages or

143
00:05:36,440 --> 00:05:40,400
in NPM rather and some other dependency

144
00:05:38,240 --> 00:05:42,320
managers there's this concept of pattern

145
00:05:40,400 --> 00:05:44,390
matching with semantic versioning so

146
00:05:42,320 --> 00:05:46,610
there's a tilde and a caret that'll

147
00:05:44,390 --> 00:05:49,820
match a range of versions so that you

148
00:05:46,610 --> 00:05:52,040
can basically say I'm okay with

149
00:05:49,820 --> 00:05:55,730
automatically updating two versions that

150
00:05:52,040 --> 00:05:57,920
adhere to this sort of risk so with a

151
00:05:55,730 --> 00:05:59,750
tilde you're you're taking in bug packs

152
00:05:57,920 --> 00:06:01,280
bug patches and fixes and things like

153
00:05:59,750 --> 00:06:03,470
that with the caret you're taking in

154
00:06:01,280 --> 00:06:05,210
minor features and bug patches it's a

155
00:06:03,470 --> 00:06:06,350
convenience thing but I think as we've

156
00:06:05,210 --> 00:06:08,479
learned in security

157
00:06:06,350 --> 00:06:10,790
every time you add convenience you you

158
00:06:08,480 --> 00:06:14,570
take away all this other stuff that we

159
00:06:10,790 --> 00:06:17,810
grow to love and enjoy and as an example

160
00:06:14,570 --> 00:06:20,420
so for package 2.00 generic package

161
00:06:17,810 --> 00:06:22,400
depending on generic dependency 1.1.2 so

162
00:06:20,420 --> 00:06:24,530
let's say package 2 0 0 doesn't change

163
00:06:22,400 --> 00:06:27,320
but over the course of its life you've

164
00:06:24,530 --> 00:06:31,280
had other dependencies get published 1 1

165
00:06:27,320 --> 00:06:34,430
3 1 2 0 1 2 1 2 0 0 now the next time

166
00:06:31,280 --> 00:06:36,380
package 2 dot 0 dot 0 is installed it'll

167
00:06:34,430 --> 00:06:39,320
automatically pull down package

168
00:06:36,380 --> 00:06:40,009
dependency 1 2 1 that's because this

169
00:06:39,320 --> 00:06:43,279
carrot

170
00:06:40,009 --> 00:06:46,369
here it'll match the latest version of

171
00:06:43,279 --> 00:06:49,039
the the latest one that matches a minor

172
00:06:46,369 --> 00:06:52,629
and patch version so that would be one

173
00:06:49,039 --> 00:06:55,818
to one in this example so after adding

174
00:06:52,629 --> 00:06:59,240
flatmap stream in three three six right

175
00:06:55,819 --> 00:07:03,039
nine control then remove flatmap stream

176
00:06:59,240 --> 00:07:06,349
and then published four zero zero so

177
00:07:03,039 --> 00:07:08,688
notable so far nothing malicious has

178
00:07:06,349 --> 00:07:10,399
emerged so what we had just a normal guy

179
00:07:08,689 --> 00:07:12,649
updating some dependencies updating some

180
00:07:10,399 --> 00:07:15,199
documents adding a dependency exposing

181
00:07:12,649 --> 00:07:16,520
it as the api taking away that

182
00:07:15,199 --> 00:07:18,050
dependency maybe it didn't work out

183
00:07:16,520 --> 00:07:19,878
maybe it wasn't valuable updating the

184
00:07:18,050 --> 00:07:22,969
major version because the api broke all

185
00:07:19,879 --> 00:07:26,120
normal stuff so far the total time

186
00:07:22,969 --> 00:07:32,479
between first commit in version 4.0 zero

187
00:07:26,120 --> 00:07:35,300
was 12 days so on October 5th 2018 this

188
00:07:32,479 --> 00:07:38,089
is 31 days after ownership of event

189
00:07:35,300 --> 00:07:41,719
stream has changed control flatmap

190
00:07:38,089 --> 00:07:43,699
stream 0.11 was released this is a

191
00:07:41,719 --> 00:07:50,089
package that has malicious code in it

192
00:07:43,699 --> 00:07:53,719
now because event stream 336 had the

193
00:07:50,089 --> 00:07:56,419
carrot in its dependency definition it

194
00:07:53,719 --> 00:07:59,599
would automatically update to 0 1 1

195
00:07:56,419 --> 00:08:03,409
because of that carrot event stream

196
00:07:59,599 --> 00:08:05,269
itself had been stable for 2 plus years

197
00:08:03,409 --> 00:08:07,120
so that means that everyone who had

198
00:08:05,269 --> 00:08:10,039
installed it automatically added

199
00:08:07,120 --> 00:08:12,889
dependency 3 3 5 probably with a carrot

200
00:08:10,039 --> 00:08:15,649
or a tilde so that every time any of

201
00:08:12,889 --> 00:08:17,240
those got installed again anywhere

202
00:08:15,649 --> 00:08:18,649
either a new developer pulling it down

203
00:08:17,240 --> 00:08:20,029
somebody blowing away the dependencies

204
00:08:18,649 --> 00:08:21,649
reinstalling them on a build machine

205
00:08:20,029 --> 00:08:24,159
whatever else it would automatically

206
00:08:21,649 --> 00:08:27,499
suck in that malicious dependency and

207
00:08:24,159 --> 00:08:31,099
this happened 8 million times over the

208
00:08:27,499 --> 00:08:32,959
course of about 5 or 6 weeks so a time

209
00:08:31,099 --> 00:08:36,289
between the malicious control and the

210
00:08:32,958 --> 00:08:39,439
discovery of this 77 days and the time

211
00:08:36,289 --> 00:08:43,250
between flatmap stream 0 1 1 and it

212
00:08:39,440 --> 00:08:44,870
being exposed was 48 days so 48 days in

213
00:08:43,250 --> 00:08:46,760
the while of being able to affect

214
00:08:44,870 --> 00:08:49,790
whenever it wanted to affect in fact and

215
00:08:46,760 --> 00:08:51,380
as you can imagine most developers are

216
00:08:49,790 --> 00:08:53,670
supremely confident people with

217
00:08:51,380 --> 00:08:56,070
supremely privileged computers

218
00:08:53,670 --> 00:08:58,079
in companies that have all sorts of fun

219
00:08:56,070 --> 00:09:01,970
things inside them and this is where

220
00:08:58,080 --> 00:09:05,130
this code is running so what it did

221
00:09:01,970 --> 00:09:07,860
first off want to talk a little bit

222
00:09:05,130 --> 00:09:09,510
about how it was discovered and you'll

223
00:09:07,860 --> 00:09:12,660
all be glad to know that it was just

224
00:09:09,510 --> 00:09:15,270
pure dumb luck and coincidence

225
00:09:12,660 --> 00:09:16,949
it's a payload a I'll talk about in just

226
00:09:15,270 --> 00:09:20,130
a second use the method that was

227
00:09:16,950 --> 00:09:22,350
deprecated in node version 11

228
00:09:20,130 --> 00:09:25,110
it was deprecated by documentation in

229
00:09:22,350 --> 00:09:27,450
version 10 once version 11 was released

230
00:09:25,110 --> 00:09:30,270
it was deprecated at runtime which just

231
00:09:27,450 --> 00:09:32,430
meant that a warning was issued note 11

232
00:09:30,270 --> 00:09:34,290
happened to be released eighteen to

233
00:09:32,430 --> 00:09:36,870
eight days after the exploit was

234
00:09:34,290 --> 00:09:40,050
published so just by pure dumb

235
00:09:36,870 --> 00:09:42,780
coincidence now we had unrelated

236
00:09:40,050 --> 00:09:45,959
projects throwing a warning so things

237
00:09:42,780 --> 00:09:48,060
like node Mon which was a very which is

238
00:09:45,960 --> 00:09:51,690
a very very popular way to run

239
00:09:48,060 --> 00:09:54,390
long-lived nodejs processes started to

240
00:09:51,690 --> 00:09:57,480
get warnings based off of the crypto

241
00:09:54,390 --> 00:09:59,220
package in a node now when you have a

242
00:09:57,480 --> 00:10:00,900
project that shouldn't be doing anything

243
00:09:59,220 --> 00:10:03,150
with crypto packages it starts throwing

244
00:10:00,900 --> 00:10:05,420
errors or warnings about crypto packages

245
00:10:03,150 --> 00:10:07,530
it starts to raise some red flags

246
00:10:05,420 --> 00:10:11,670
finally somebody started putting this

247
00:10:07,530 --> 00:10:13,589
all together November 20th 2018 falling

248
00:10:11,670 --> 00:10:19,099
snow basically opened up an issue on

249
00:10:13,590 --> 00:10:21,630
event stream in many many words Explorer

250
00:10:19,100 --> 00:10:23,370
basically just asking what the what

251
00:10:21,630 --> 00:10:26,340
what's going on this is there's

252
00:10:23,370 --> 00:10:29,310
something very very strange and odd

253
00:10:26,340 --> 00:10:30,810
going on blaming dominic blaming right

254
00:10:29,310 --> 00:10:32,790
now in control wondering why this

255
00:10:30,810 --> 00:10:35,670
malicious dependency was then backed out

256
00:10:32,790 --> 00:10:37,380
without anyone knowing it then caused

257
00:10:35,670 --> 00:10:38,939
the entire community to stir up and then

258
00:10:37,380 --> 00:10:41,970
everyone started to get on this to

259
00:10:38,940 --> 00:10:44,280
figure out what was going on so flat mat

260
00:10:41,970 --> 00:10:47,550
stream version zero one zero looked like

261
00:10:44,280 --> 00:10:50,069
this and for those of you are unfamiliar

262
00:10:47,550 --> 00:10:52,770
with the JavaScript ecosystem it's okay

263
00:10:50,070 --> 00:10:55,920
this should look stupid it's a bunch of

264
00:10:52,770 --> 00:10:58,290
code smashed up together that's normal

265
00:10:55,920 --> 00:11:00,150
in JavaScript world I'm sorry it's just

266
00:10:58,290 --> 00:11:02,730
the way things are due to the way things

267
00:11:00,150 --> 00:11:04,260
have evolved but that's also it's it's

268
00:11:02,730 --> 00:11:07,000
one more problem than JavaScript

269
00:11:04,260 --> 00:11:08,830
ecosystem because it's one more strange

270
00:11:07,000 --> 00:11:11,860
artifact in the in the way between

271
00:11:08,830 --> 00:11:15,040
source and distributable so this is flat

272
00:11:11,860 --> 00:11:17,710
nap stream version 0 1 1 just 352 by

273
00:11:15,040 --> 00:11:23,760
bytes appended to the end of legitimate

274
00:11:17,710 --> 00:11:28,330
flash flat map stream 0 1 0 so this is

275
00:11:23,760 --> 00:11:31,630
the source prettified I don't expect you

276
00:11:28,330 --> 00:11:33,970
to jump too deep into it right now this

277
00:11:31,630 --> 00:11:35,470
is the source flattened a little bit

278
00:11:33,970 --> 00:11:37,840
with some things renamed to make it

279
00:11:35,470 --> 00:11:39,730
easier to actually walk through first

280
00:11:37,840 --> 00:11:42,010
off we've got an unhex function at the

281
00:11:39,730 --> 00:11:44,100
start which does what you probably would

282
00:11:42,010 --> 00:11:47,290
expect it to do it just translates a

283
00:11:44,100 --> 00:11:49,540
hexadecimal string into a string that

284
00:11:47,290 --> 00:11:51,910
you can read and understand very easily

285
00:11:49,540 --> 00:11:53,500
and the first thing that is actually

286
00:11:51,910 --> 00:11:55,449
happening there or the first thing that

287
00:11:53,500 --> 00:11:57,280
is actually a first operation that is

288
00:11:55,450 --> 00:11:58,060
executed is an unhex of this string

289
00:11:57,280 --> 00:11:59,890
right there

290
00:11:58,060 --> 00:12:00,849
because we're not too worried about

291
00:11:59,890 --> 00:12:02,860
what's going on right there we can do

292
00:12:00,850 --> 00:12:05,350
that by hand and then find out that we

293
00:12:02,860 --> 00:12:08,170
are importing a another javascript file

294
00:12:05,350 --> 00:12:10,270
test beta this was a file that was

295
00:12:08,170 --> 00:12:12,579
distributed with flat map stream 0 1 1

296
00:12:10,270 --> 00:12:15,640
go over to check that out it's a bunch

297
00:12:12,580 --> 00:12:18,490
of other hexadecimal strings the first

298
00:12:15,640 --> 00:12:21,220
two are very very long when you try to

299
00:12:18,490 --> 00:12:23,890
unhex them you just get a binary blob of

300
00:12:21,220 --> 00:12:27,670
data it's not very useful yet but the

301
00:12:23,890 --> 00:12:30,850
other ones end up on hexing too readable

302
00:12:27,670 --> 00:12:33,819
strings yeah crypto and NPM package

303
00:12:30,850 --> 00:12:35,230
description AES 256 create decipher a

304
00:12:33,820 --> 00:12:36,790
lot of things that start to look a

305
00:12:35,230 --> 00:12:38,200
little shady which is exactly why

306
00:12:36,790 --> 00:12:40,390
somebody would hide this in another file

307
00:12:38,200 --> 00:12:42,640
and behind something all hexif ID it's

308
00:12:40,390 --> 00:12:44,560
not very difficult obfuscation but what

309
00:12:42,640 --> 00:12:45,880
you're trying to do here is just prevent

310
00:12:44,560 --> 00:12:47,560
those people who are just taking a

311
00:12:45,880 --> 00:12:49,140
cursory glance from getting they're

312
00:12:47,560 --> 00:12:52,780
getting all worked up

313
00:12:49,140 --> 00:12:55,420
so next right here I've replaced all the

314
00:12:52,780 --> 00:12:56,740
references to those hex strings and

315
00:12:55,420 --> 00:13:00,610
renamed some variables so we can go

316
00:12:56,740 --> 00:13:04,000
through this line by line so first line

317
00:13:00,610 --> 00:13:05,980
here is us importing that test data it's

318
00:13:04,000 --> 00:13:08,820
being thrown here in a variable called

319
00:13:05,980 --> 00:13:13,380
test data because why not

320
00:13:08,820 --> 00:13:16,240
next couple lines here we're getting a

321
00:13:13,380 --> 00:13:18,550
variable called npm underscore package

322
00:13:16,240 --> 00:13:20,680
underscore description and we are using

323
00:13:18,550 --> 00:13:24,699
that variable as the key

324
00:13:20,680 --> 00:13:26,439
to a decipher instance that we're going

325
00:13:24,700 --> 00:13:28,120
to be using later so we're pulling the

326
00:13:26,440 --> 00:13:29,560
key from the environment we'll have to

327
00:13:28,120 --> 00:13:30,580
deal with that in a little bit but we'll

328
00:13:29,560 --> 00:13:32,020
go through line by line right now to

329
00:13:30,580 --> 00:13:35,680
understand what's actually happening

330
00:13:32,020 --> 00:13:37,900
next so the next step is here we are

331
00:13:35,680 --> 00:13:41,489
decrypting the data that was found in

332
00:13:37,900 --> 00:13:41,490
the first element of that test data

333
00:13:42,560 --> 00:13:47,939
finally down here we are creating a new

334
00:13:45,330 --> 00:13:49,380
instance of a node.js module you can

335
00:13:47,940 --> 00:13:50,070
ignore the past thing it's it's

336
00:13:49,380 --> 00:13:52,530
irrelevant

337
00:13:50,070 --> 00:13:55,530
really and then we're compiling the

338
00:13:52,530 --> 00:13:57,839
decrypted text and then so that that

339
00:13:55,530 --> 00:13:59,610
will create a JavaScript module in node

340
00:13:57,840 --> 00:14:01,890
that has logic associated with it and

341
00:13:59,610 --> 00:14:05,070
then that module will be exporting the

342
00:14:01,890 --> 00:14:08,970
second element in our test data so now

343
00:14:05,070 --> 00:14:09,870
back to where we're getting the key so

344
00:14:08,970 --> 00:14:11,640
we're getting this from the environment

345
00:14:09,870 --> 00:14:14,640
and this requires us to dive into a

346
00:14:11,640 --> 00:14:15,390
little bit about how NPM works so NPM is

347
00:14:14,640 --> 00:14:18,750
three things

348
00:14:15,390 --> 00:14:21,960
NPM Inc is a company and p.m. the

349
00:14:18,750 --> 00:14:23,580
registry is a registry of NPM packages

350
00:14:21,960 --> 00:14:25,050
and then there's NPM which is a command

351
00:14:23,580 --> 00:14:28,800
line interface which is there's a tool

352
00:14:25,050 --> 00:14:30,599
that that can pull from any registry so

353
00:14:28,800 --> 00:14:32,880
NPM is a dependency manager but it's

354
00:14:30,600 --> 00:14:34,950
also a task runner and you can define

355
00:14:32,880 --> 00:14:37,110
tasks well you define everything that

356
00:14:34,950 --> 00:14:39,090
NPM needs to deal with in a package.json

357
00:14:37,110 --> 00:14:40,830
file if you've ever seen those floating

358
00:14:39,090 --> 00:14:44,370
around they're freaking everywhere now

359
00:14:40,830 --> 00:14:47,250
it started because of this so this is a

360
00:14:44,370 --> 00:14:50,070
a completely separate package Jason I'm

361
00:14:47,250 --> 00:14:51,600
using as an example so the scripts are

362
00:14:50,070 --> 00:14:52,830
defined something like this I eat is

363
00:14:51,600 --> 00:14:55,140
have a property in Jason and then you

364
00:14:52,830 --> 00:14:56,940
have a list of tasks essentially that

365
00:14:55,140 --> 00:14:58,980
you want to run with the commands that

366
00:14:56,940 --> 00:15:01,950
you want to run with that task whenever

367
00:14:58,980 --> 00:15:05,460
that task is invoked so what we're

368
00:15:01,950 --> 00:15:07,650
looking for in that environment is this

369
00:15:05,460 --> 00:15:10,590
description because when we are running

370
00:15:07,650 --> 00:15:12,540
an NPM script with NPM it'll take

371
00:15:10,590 --> 00:15:14,310
everything that's in a package Jason and

372
00:15:12,540 --> 00:15:16,589
throw it into the environment so you can

373
00:15:14,310 --> 00:15:19,770
store data in your package jason 4x

374
00:15:16,590 --> 00:15:22,470
access later in NPM scripts so we know

375
00:15:19,770 --> 00:15:24,630
now that this script needs to be run as

376
00:15:22,470 --> 00:15:28,350
an as an NPM script in order to find

377
00:15:24,630 --> 00:15:30,570
that key so a recap the script decrypts

378
00:15:28,350 --> 00:15:32,610
and compiles a new module and node the

379
00:15:30,570 --> 00:15:34,710
key comes from a package description in

380
00:15:32,610 --> 00:15:36,210
a package jason somewhere the encrypted

381
00:15:34,710 --> 00:15:37,650
java script for the new module comes

382
00:15:36,210 --> 00:15:39,990
from the first element in the test data

383
00:15:37,650 --> 00:15:43,199
and the compiled module then exports the

384
00:15:39,990 --> 00:15:46,620
second element in that data so what does

385
00:15:43,200 --> 00:15:49,920
this mean the script only is useful if

386
00:15:46,620 --> 00:15:51,960
it is being run as an NPM script inside

387
00:15:49,920 --> 00:15:53,439
a directory that has a package jason

388
00:15:51,960 --> 00:15:55,600
that has a decay

389
00:15:53,440 --> 00:15:57,970
in the description that successfully

390
00:15:55,600 --> 00:16:00,040
decrypts the test data we have which

391
00:15:57,970 --> 00:16:01,930
means that this is a very very complex

392
00:16:00,040 --> 00:16:05,560
comprehensive exploit that is targeting

393
00:16:01,930 --> 00:16:07,628
one single package on the internet so

394
00:16:05,560 --> 00:16:08,920
what this means for us if we want to dig

395
00:16:07,629 --> 00:16:11,949
any further is that we have to troll

396
00:16:08,920 --> 00:16:13,389
through a lot of NPM packages well we

397
00:16:11,949 --> 00:16:16,240
need to troll through a lot of package

398
00:16:13,389 --> 00:16:18,970
JSON files the largest consolidated

399
00:16:16,240 --> 00:16:20,230
source of package JSON files is the NPM

400
00:16:18,970 --> 00:16:21,639
registry and there's no guarantee that

401
00:16:20,230 --> 00:16:23,949
it's going to exist there but it's

402
00:16:21,639 --> 00:16:25,569
certainly a good place to start so now

403
00:16:23,949 --> 00:16:27,490
what would we want to use if we needed

404
00:16:25,569 --> 00:16:30,550
to troll through all of the packages in

405
00:16:27,490 --> 00:16:32,529
the NPM NPM registry luckily there's an

406
00:16:30,550 --> 00:16:35,290
NPM package called all the packages

407
00:16:32,529 --> 00:16:37,209
which allows you to take as a stream all

408
00:16:35,290 --> 00:16:39,579
the metadata for all the packages that

409
00:16:37,209 --> 00:16:41,410
exist in the registry and yes of course

410
00:16:39,579 --> 00:16:42,579
that depends on event stream so you'll

411
00:16:41,410 --> 00:16:44,740
probably want to be doing things like

412
00:16:42,579 --> 00:16:46,420
this in a virtual machine or some sort

413
00:16:44,740 --> 00:16:48,730
of environment that's not your your home

414
00:16:46,420 --> 00:16:50,199
machine this is just this is how

415
00:16:48,730 --> 00:16:51,310
javascript has evolved and just

416
00:16:50,199 --> 00:16:54,430
everything depends on everything else

417
00:16:51,310 --> 00:16:56,649
and everything's horrible so strategy

418
00:16:54,430 --> 00:16:59,199
here I iterate through every single

419
00:16:56,649 --> 00:17:01,630
package that exists try to decrypt the

420
00:16:59,199 --> 00:17:03,519
test data because some keys can

421
00:17:01,630 --> 00:17:05,799
successfully decrypt the data but result

422
00:17:03,519 --> 00:17:08,620
in garbled gibberish we're going to want

423
00:17:05,799 --> 00:17:10,000
to pass that decrypted data through to a

424
00:17:08,619 --> 00:17:11,829
JavaScript parser to make sure that it

425
00:17:10,000 --> 00:17:13,349
parses as actual JavaScript just would

426
00:17:11,829 --> 00:17:16,059
have to deal with a lot of visual

427
00:17:13,349 --> 00:17:18,490
handling and then if we are successful

428
00:17:16,059 --> 00:17:20,949
then we have a winner this is one of

429
00:17:18,490 --> 00:17:23,829
those long shots that like I I didn't

430
00:17:20,949 --> 00:17:26,589
expect it to work it worked so quickly

431
00:17:23,829 --> 00:17:29,049
that's just like the fantastic this is

432
00:17:26,589 --> 00:17:32,289
beautiful in 94 seconds we had gone

433
00:17:29,049 --> 00:17:34,330
through every single package in the NPM

434
00:17:32,289 --> 00:17:35,470
registry tested all those things found

435
00:17:34,330 --> 00:17:36,668
out what decrypted and found out exactly

436
00:17:35,470 --> 00:17:39,010
what we're working with it actually

437
00:17:36,669 --> 00:17:39,940
happened much faster 94 seconds I just

438
00:17:39,010 --> 00:17:42,700
went through everything to see if there

439
00:17:39,940 --> 00:17:45,640
were other packages but it worked and

440
00:17:42,700 --> 00:17:51,370
the password was a secure Bitcoin wallet

441
00:17:45,640 --> 00:17:55,120
from the package copay - - copay for

442
00:17:51,370 --> 00:17:58,360
anyone who is up to speed on crypto is a

443
00:17:55,120 --> 00:18:00,070
secure Bitcoin wallet where you can

444
00:17:58,360 --> 00:18:03,280
store your bitcoins and protect them

445
00:18:00,070 --> 00:18:05,799
from hackers so now we know our target

446
00:18:03,280 --> 00:18:07,330
and now we can decrypt our payload be so

447
00:18:05,799 --> 00:18:08,980
payload B does a little bit

448
00:18:07,330 --> 00:18:10,899
more we're not gonna go in through it

449
00:18:08,980 --> 00:18:16,090
line by line we're gonna focus on a

450
00:18:10,900 --> 00:18:17,530
couple so starts here one thing to note

451
00:18:16,090 --> 00:18:21,040
is whatever this is we'll get to in a

452
00:18:17,530 --> 00:18:23,800
second if that is false then we're just

453
00:18:21,040 --> 00:18:25,840
bailing out so this is even further

454
00:18:23,800 --> 00:18:27,399
targeted we're targeting a specific

455
00:18:25,840 --> 00:18:28,419
package and now depending on this

456
00:18:27,400 --> 00:18:29,950
condition right here

457
00:18:28,420 --> 00:18:31,540
we're also bailing out if it's not

458
00:18:29,950 --> 00:18:33,370
exactly right now what we're actually

459
00:18:31,540 --> 00:18:35,950
looking for here is we're testing our

460
00:18:33,370 --> 00:18:39,219
regex against arguments passed on the

461
00:18:35,950 --> 00:18:41,230
command line argue so if you're not

462
00:18:39,220 --> 00:18:43,420
entirely familiar with how NPM scripts

463
00:18:41,230 --> 00:18:46,320
run because we know that we are running

464
00:18:43,420 --> 00:18:51,310
in an NPM script we know what the third

465
00:18:46,320 --> 00:18:52,570
are the third our element in Arg fee is

466
00:18:51,310 --> 00:18:54,399
going to be because we know the first

467
00:18:52,570 --> 00:18:56,560
one is NPM we know the second one is run

468
00:18:54,400 --> 00:18:59,740
script so a third one must be the actual

469
00:18:56,560 --> 00:19:05,980
script that is being run and there is a

470
00:18:59,740 --> 00:19:08,620
circle so what we're looking for in cope

471
00:19:05,980 --> 00:19:12,430
a dash is a script that starts out with

472
00:19:08,620 --> 00:19:15,820
build : blah ends in - release this is

473
00:19:12,430 --> 00:19:18,370
all just falling into place so well it

474
00:19:15,820 --> 00:19:19,960
was such a beautiful days worth of

475
00:19:18,370 --> 00:19:21,850
reverse engineering because it very

476
00:19:19,960 --> 00:19:24,970
rarely happens that everything just

477
00:19:21,850 --> 00:19:28,209
works out so you have access to this

478
00:19:24,970 --> 00:19:30,700
entire Bitcoin wallet because it's open

479
00:19:28,210 --> 00:19:33,310
source and everything is there for you

480
00:19:30,700 --> 00:19:35,380
to see so you have build : iOS release

481
00:19:33,310 --> 00:19:39,730
Android release and desktop desktop

482
00:19:35,380 --> 00:19:41,830
release so this payload only continues

483
00:19:39,730 --> 00:19:43,780
if it is being run as one of these

484
00:19:41,830 --> 00:19:45,730
scripts now if you're familiar at all

485
00:19:43,780 --> 00:19:48,280
with the web world over the course of

486
00:19:45,730 --> 00:19:49,900
the past five to ten years Cordova might

487
00:19:48,280 --> 00:19:52,780
be familiar to you if it's not then

488
00:19:49,900 --> 00:19:54,720
maybe PhoneGap is it's a hybrid web

489
00:19:52,780 --> 00:19:57,850
native framework so you can use

490
00:19:54,720 --> 00:19:59,920
JavaScript HTML CSS whatever else and

491
00:19:57,850 --> 00:20:04,209
then deploy native applications to

492
00:19:59,920 --> 00:20:05,860
Android iOS desktop whatever else it's

493
00:20:04,210 --> 00:20:07,180
the precursor to things like electron

494
00:20:05,860 --> 00:20:09,159
right now which power over it Visual

495
00:20:07,180 --> 00:20:12,430
Studio code slacks Skype things like

496
00:20:09,160 --> 00:20:13,930
that so we know we're running in these

497
00:20:12,430 --> 00:20:16,420
scripts we know that we're targeting a

498
00:20:13,930 --> 00:20:19,120
cordova hybrid build so we can look more

499
00:20:16,420 --> 00:20:21,310
into payload be the only other thing I

500
00:20:19,120 --> 00:20:23,350
want to point out right here is

501
00:20:21,310 --> 00:20:25,330
this line right here so in the node

502
00:20:23,350 --> 00:20:27,760
world all your dependencies in a project

503
00:20:25,330 --> 00:20:30,250
are stored in a node underscore modules

504
00:20:27,760 --> 00:20:31,960
directory so what this is doing is first

505
00:20:30,250 --> 00:20:34,810
of all just pointing to some deep

506
00:20:31,960 --> 00:20:36,490
dependency that exists and the gist of

507
00:20:34,810 --> 00:20:39,040
what's happening here is that this

508
00:20:36,490 --> 00:20:41,440
payload is diving deep into the

509
00:20:39,040 --> 00:20:43,930
dependencies for co-pay - the mobile

510
00:20:41,440 --> 00:20:46,960
application and then appending its

511
00:20:43,930 --> 00:20:49,120
payload C to one of its files that it

512
00:20:46,960 --> 00:20:50,710
know will be hydrated and executed in

513
00:20:49,120 --> 00:20:52,540
the context that needs to be executed in

514
00:20:50,710 --> 00:20:54,480
in the mobile application on a user

515
00:20:52,540 --> 00:20:57,760
device

516
00:20:54,480 --> 00:21:00,100
all right recap so payload B doesn't do

517
00:20:57,760 --> 00:21:03,010
anything unless it is in copays build

518
00:21:00,100 --> 00:21:05,469
stage building on iOS android or desktop

519
00:21:03,010 --> 00:21:07,030
application it decrypts payload C just

520
00:21:05,470 --> 00:21:10,630
like it does payload B and injects

521
00:21:07,030 --> 00:21:12,700
payload C into a dependency that co-pay

522
00:21:10,630 --> 00:21:15,730
will eventually use and then payload C

523
00:21:12,700 --> 00:21:17,470
is is executed in the context of the

524
00:21:15,730 --> 00:21:18,540
mobile application on a mobile users

525
00:21:17,470 --> 00:21:22,120
device

526
00:21:18,540 --> 00:21:24,520
this is payload C which actually keeps

527
00:21:22,120 --> 00:21:26,590
on going down a little bit there it's

528
00:21:24,520 --> 00:21:29,110
actually not very exciting this is the

529
00:21:26,590 --> 00:21:30,939
this is the last payload and when

530
00:21:29,110 --> 00:21:32,320
situations like this the last payload is

531
00:21:30,940 --> 00:21:34,060
just doing what you wanted to do in the

532
00:21:32,320 --> 00:21:35,620
first place the fun ones are the middle

533
00:21:34,060 --> 00:21:37,629
payloads that figure out how to get to

534
00:21:35,620 --> 00:21:40,600
that part at the end it's just a bunch

535
00:21:37,630 --> 00:21:42,100
of web stuff dealing with documents and

536
00:21:40,600 --> 00:21:43,929
local storage and stuff like that but

537
00:21:42,100 --> 00:21:46,480
just of it is it was harvesting private

538
00:21:43,930 --> 00:21:49,020
keys targeting wallets that had hundred

539
00:21:46,480 --> 00:21:51,490
Bitcoin or a thousand Bitcoin cash

540
00:21:49,020 --> 00:21:53,650
sending that stuff off to a third party

541
00:21:51,490 --> 00:21:55,960
server like really just generic Bitcoin

542
00:21:53,650 --> 00:21:58,630
crap I was really kind of disappointed

543
00:21:55,960 --> 00:22:00,520
everything seems Bitcoin e now you get a

544
00:21:58,630 --> 00:22:02,950
minor you get Bitcoin stolen and get

545
00:22:00,520 --> 00:22:07,389
ransomware asking for Bitcoin where's

546
00:22:02,950 --> 00:22:10,810
the creativity so where does this leave

547
00:22:07,390 --> 00:22:13,540
us now first off this is not node an NPM

548
00:22:10,810 --> 00:22:16,899
specific this can happen anywhere that

549
00:22:13,540 --> 00:22:19,090
public source can be distributed node an

550
00:22:16,900 --> 00:22:22,720
NPM are just incredibly popular right

551
00:22:19,090 --> 00:22:24,399
now so it's an easy first first target

552
00:22:22,720 --> 00:22:27,150
there's also no reason to assume that

553
00:22:24,400 --> 00:22:29,880
this this isn't currently happening now

554
00:22:27,150 --> 00:22:34,450
this was found by accident and

555
00:22:29,880 --> 00:22:35,020
coincidence and that's it if it was

556
00:22:34,450 --> 00:22:36,880
never found

557
00:22:35,020 --> 00:22:39,160
if that deprecated method was never

558
00:22:36,880 --> 00:22:41,140
released in node version 11 who knows

559
00:22:39,160 --> 00:22:43,510
when it would have been found so the

560
00:22:41,140 --> 00:22:45,220
good news is that once it was found the

561
00:22:43,510 --> 00:22:47,950
community really really came together

562
00:22:45,220 --> 00:22:52,059
they respond to quickly found the the

563
00:22:47,950 --> 00:22:54,160
depths that that it went to investigated

564
00:22:52,059 --> 00:22:56,050
everything collaboratively and

565
00:22:54,160 --> 00:22:57,460
independently had people backing each

566
00:22:56,050 --> 00:23:00,550
other up helping each other

567
00:22:57,460 --> 00:23:02,800
it was the further damage going forward

568
00:23:00,550 --> 00:23:04,270
was mitigated NPM stepped in took over

569
00:23:02,800 --> 00:23:06,280
that package made sure that it was

570
00:23:04,270 --> 00:23:07,809
addressed there and then people were

571
00:23:06,280 --> 00:23:09,340
building tools that would help each

572
00:23:07,809 --> 00:23:10,510
other figure out whether or not they had

573
00:23:09,340 --> 00:23:12,669
that problem and whether or not they

574
00:23:10,510 --> 00:23:15,040
were infected the bad news is that

575
00:23:12,670 --> 00:23:16,600
virtually nothing else happened everyone

576
00:23:15,040 --> 00:23:19,030
just patted themselves on the back and

577
00:23:16,600 --> 00:23:20,949
went on with their lives and that is

578
00:23:19,030 --> 00:23:24,340
that is the extent of really what has

579
00:23:20,950 --> 00:23:27,190
happened this could have been much much

580
00:23:24,340 --> 00:23:30,939
worse event stream was dependent on by

581
00:23:27,190 --> 00:23:34,929
so much the azure command-line interface

582
00:23:30,940 --> 00:23:36,610
Azure Microsoft's cloud platform anyone

583
00:23:34,929 --> 00:23:38,590
who deployed anything to Azure with

584
00:23:36,610 --> 00:23:41,740
Azure a CL I could have been infected

585
00:23:38,590 --> 00:23:44,230
people developing as your CL I could

586
00:23:41,740 --> 00:23:48,160
have been infected dozens of web build

587
00:23:44,230 --> 00:23:50,170
tools Gump Gump gulp browserify a web

588
00:23:48,160 --> 00:23:52,390
pack all these things depended on things

589
00:23:50,170 --> 00:23:54,370
that depended on event stream now all

590
00:23:52,390 --> 00:23:57,010
those tools are used to build websites

591
00:23:54,370 --> 00:23:59,530
all over the world and can easily be

592
00:23:57,010 --> 00:24:01,870
targeted just like this Microsoft's

593
00:23:59,530 --> 00:24:04,360
Monaco editor the editor used in Visual

594
00:24:01,870 --> 00:24:05,830
Studio code used event stream Visual

595
00:24:04,360 --> 00:24:08,229
Studio code doesn't even necessarily

596
00:24:05,830 --> 00:24:09,550
affect just nodi people anyone who uses

597
00:24:08,230 --> 00:24:11,380
Visual Studio code could have been

598
00:24:09,550 --> 00:24:13,840
infected with something the the reach

599
00:24:11,380 --> 00:24:15,820
was wild and I have to imagine that like

600
00:24:13,840 --> 00:24:18,790
the the beauty in putting all this

601
00:24:15,820 --> 00:24:21,250
together was wasted on this stupid

602
00:24:18,790 --> 00:24:23,129
little Bitcoin application and I have to

603
00:24:21,250 --> 00:24:26,740
imagine that the person who did this

604
00:24:23,130 --> 00:24:28,660
just just they they had a target at the

605
00:24:26,740 --> 00:24:31,360
start and they just they they went

606
00:24:28,660 --> 00:24:34,300
towards that target without recognizing

607
00:24:31,360 --> 00:24:36,939
the amazing potential that they had in

608
00:24:34,300 --> 00:24:39,460
front of them anyway ah this is a

609
00:24:36,940 --> 00:24:40,870
security audience I'm not fully

610
00:24:39,460 --> 00:24:43,419
expecting that any of this is going to

611
00:24:40,870 --> 00:24:45,750
be wildly new to any of you but audit

612
00:24:43,419 --> 00:24:48,790
your dependencies don't trust anything

613
00:24:45,750 --> 00:24:50,530
lock your dependencies if we're using a

614
00:24:48,790 --> 00:24:52,090
dependency manager that can lock them so

615
00:24:50,530 --> 00:24:54,700
you don't actually have things updating

616
00:24:52,090 --> 00:24:56,169
without your without you knowing check

617
00:24:54,700 --> 00:24:57,910
in your dependencies because there's

618
00:24:56,170 --> 00:24:59,470
really no need to continually download

619
00:24:57,910 --> 00:25:01,330
them if you're if you're expecting to

620
00:24:59,470 --> 00:25:04,660
use a particular version retain that

621
00:25:01,330 --> 00:25:06,250
version internally and sure as hell

622
00:25:04,660 --> 00:25:09,400
think twice before adding any new

623
00:25:06,250 --> 00:25:11,440
dependencies the JavaScript world likes

624
00:25:09,400 --> 00:25:13,600
to have modules for just about

625
00:25:11,440 --> 00:25:17,410
everything and every module that you

626
00:25:13,600 --> 00:25:20,199
depend on is one more little bit of risk

627
00:25:17,410 --> 00:25:22,980
that you add to your project alright

628
00:25:20,200 --> 00:25:22,980
thank you

629
00:25:23,910 --> 00:25:27,910
[Applause]

