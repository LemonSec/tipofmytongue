1
00:00:00,000 --> 00:00:02,729
[Music]

2
00:00:11,480 --> 00:00:20,099
I'm Lucas<font color="#E5E5E5"> from Tremec</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> and this person</font>

3
00:00:16,830 --> 00:00:24,990
<font color="#CCCCCC">this presentation is</font><font color="#E5E5E5"> the story of my</font>

4
00:00:20,099 --> 00:00:27,869
facing tour and I finished it<font color="#E5E5E5"> in 2017</font>

5
00:00:24,990 --> 00:00:36,120
<font color="#E5E5E5">and I used the</font><font color="#CCCCCC"> tour to fan box on</font>

6
00:00:27,869 --> 00:00:39,000
<font color="#E5E5E5">Windows - over a year</font><font color="#CCCCCC"> okay here's this</font>

7
00:00:36,120 --> 00:00:41,280
is my introduction<font color="#E5E5E5"> I'm security</font>

8
00:00:39,000 --> 00:00:44,059
researcher from<font color="#CCCCCC"> Jericho</font><font color="#E5E5E5"> and I'm</font>

9
00:00:41,280 --> 00:00:47,039
interested<font color="#E5E5E5"> in</font><font color="#CCCCCC"> when appetit discovery</font>

10
00:00:44,059 --> 00:00:51,120
binary exploitation and we were<font color="#E5E5E5"> so</font>

11
00:00:47,039 --> 00:00:54,780
engineering and<font color="#E5E5E5"> simple execution and in</font>

12
00:00:51,120 --> 00:01:00,420
recent<font color="#CCCCCC"> years I</font><font color="#E5E5E5"> target on Windows</font>

13
00:00:54,780 --> 00:01:02,039
platform and report box<font color="#CCCCCC"> to nsrc and if I</font>

14
00:01:00,420 --> 00:01:05,099
have free time I<font color="#CCCCCC"> would like to praise</font>

15
00:01:02,039 --> 00:01:10,350
<font color="#CCCCCC">CTF games with my team members and we</font>

16
00:01:05,099 --> 00:01:13,860
are from<font color="#CCCCCC"> Hakan city of team so</font><font color="#E5E5E5"> here you</font>

17
00:01:10,350 --> 00:01:16,740
said<font color="#E5E5E5"> is the agenda</font><font color="#CCCCCC"> for today motivation</font>

18
00:01:13,860 --> 00:01:18,930
mentions the reason that why<font color="#E5E5E5"> I create</font>

19
00:01:16,740 --> 00:01:23,039
this tool and talk<font color="#CCCCCC"> about some</font><font color="#E5E5E5"> little</font>

20
00:01:18,930 --> 00:01:26,159
works and my work is<font color="#E5E5E5"> based on a migrant</font>

21
00:01:23,040 --> 00:01:29,280
facility<font color="#E5E5E5"> so some related perk one is</font>

22
00:01:26,159 --> 00:01:33,240
here<font color="#E5E5E5"> an implementation detail what I</font>

23
00:01:29,280 --> 00:01:37,320
have done the focus of this presentation

24
00:01:33,240 --> 00:01:40,770
is<font color="#E5E5E5"> high performance</font><font color="#CCCCCC"> so some simple</font>

25
00:01:37,320 --> 00:01:44,969
benchmarking data here<font color="#CCCCCC"> and demonstration</font>

26
00:01:40,770 --> 00:01:48,840
<font color="#E5E5E5">and for the</font><font color="#CCCCCC"> case study part I only</font><font color="#E5E5E5"> focus</font>

27
00:01:44,969 --> 00:01:53,399
on the Windows kernel<font color="#E5E5E5"> and driver for</font><font color="#CCCCCC"> the</font>

28
00:01:48,840 --> 00:01:57,090
user mode application I think another

29
00:01:53,399 --> 00:01:59,640
tool such as<font color="#E5E5E5"> win a FL have covered it</font>

30
00:01:57,090 --> 00:02:04,439
already so I will not to talk too much

31
00:01:59,640 --> 00:02:06,859
<font color="#E5E5E5">about</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> user mode case and conclusion is</font>

32
00:02:04,439 --> 00:02:06,859
that yet

33
00:02:08,258 --> 00:02:16,450
so AFL is a very great and famous<font color="#E5E5E5"> fossa</font>

34
00:02:13,120 --> 00:02:19,629
many case and data have proof about it

35
00:02:16,450 --> 00:02:21,970
and I want<font color="#E5E5E5"> to use it on the Windows</font>

36
00:02:19,629 --> 00:02:25,810
<font color="#CCCCCC">platform but</font><font color="#E5E5E5"> it does not support Windows</font>

37
00:02:21,970 --> 00:02:31,890
and the main reason<font color="#CCCCCC"> is that most</font><font color="#E5E5E5"> of the</font>

38
00:02:25,810 --> 00:02:35,069
<font color="#CCCCCC">Windows application is closed source am</font>

39
00:02:31,890 --> 00:02:41,260
two years later and someone<font color="#E5E5E5"> from Google</font>

40
00:02:35,069 --> 00:02:44,440
bought the AFL<font color="#CCCCCC"> to Windows</font><font color="#E5E5E5"> and that is</font>

41
00:02:41,260 --> 00:02:47,500
the win AFL project and it used the

42
00:02:44,440 --> 00:02:51,459
<font color="#CCCCCC">Tandy</font><font color="#E5E5E5"> McBurney instrumentation to get a</font>

43
00:02:47,500 --> 00:02:56,310
coverage<font color="#E5E5E5"> so it doesn't need the source</font>

44
00:02:51,459 --> 00:03:00,310
code<font color="#E5E5E5"> of the target</font><font color="#CCCCCC"> application however</font>

45
00:02:56,310 --> 00:03:04,359
<font color="#E5E5E5">is slow down</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> speed on passing and I</font>

46
00:03:00,310 --> 00:03:06,790
hope he came fast<font color="#E5E5E5"> the kernel driver at</font>

47
00:03:04,359 --> 00:03:09,190
that time I<font color="#E5E5E5"> think a static binary</font>

48
00:03:06,790 --> 00:03:14,948
instrumentation is one of the solution

49
00:03:09,190 --> 00:03:19,180
<font color="#E5E5E5">to achieve this</font><font color="#CCCCCC"> two requirement and yes</font>

50
00:03:14,949 --> 00:03:23,489
<font color="#E5E5E5">I know about</font><font color="#CCCCCC"> the project</font><font color="#E5E5E5"> C c/g</font><font color="#CCCCCC"> I'm not</font>

51
00:03:19,180 --> 00:03:26,560
sure about the pronunciation<font color="#E5E5E5"> and it's</font>

52
00:03:23,489 --> 00:03:29,260
the static binary instrumentation on

53
00:03:26,560 --> 00:03:31,799
Chrome browser<font color="#CCCCCC"> and</font><font color="#E5E5E5"> optimize the binary</font>

54
00:03:29,260 --> 00:03:36,760
execution on the<font color="#E5E5E5"> Windows platform</font><font color="#CCCCCC"> I</font>

55
00:03:31,799 --> 00:03:39,819
surveyed<font color="#E5E5E5"> about it but it requires full</font>

56
00:03:36,760 --> 00:03:44,168
symbol which include<font color="#E5E5E5"> profile information</font>

57
00:03:39,819 --> 00:03:47,980
of the target application<font color="#E5E5E5"> so I give up</font>

58
00:03:44,169 --> 00:03:51,480
here and I hope I was working in

59
00:03:47,980 --> 00:03:56,349
Microsoft so that I can get the symbols

60
00:03:51,480 --> 00:04:00,010
<font color="#E5E5E5">later someone from Microsoft wants to do</font>

61
00:03:56,349 --> 00:04:06,608
the similar<font color="#CCCCCC"> thing and put the</font><font color="#E5E5E5"> project</font>

62
00:04:00,010 --> 00:04:08,738
<font color="#CCCCCC">CGG into the wind</font><font color="#E5E5E5"> AFL and</font><font color="#CCCCCC"> I know the</font>

63
00:04:06,609 --> 00:04:11,979
solution<font color="#E5E5E5"> from Cisco it is based on the</font>

64
00:04:08,739 --> 00:04:15,760
Intel<font color="#CCCCCC"> processors trees but it is still</font>

65
00:04:11,979 --> 00:04:19,350
<font color="#E5E5E5">in progress at that time and it cannot</font>

66
00:04:15,760 --> 00:04:22,260
be<font color="#CCCCCC"> scaled</font><font color="#E5E5E5"> up on the virtual machine</font>

67
00:04:19,350 --> 00:04:28,680
and some other feature I still want to

68
00:04:22,260 --> 00:04:32,130
have so people always said you<font color="#CCCCCC"> only know</font>

69
00:04:28,680 --> 00:04:38,700
<font color="#CCCCCC">how to say</font><font color="#E5E5E5"> why not</font><font color="#CCCCCC"> do it</font><font color="#E5E5E5"> yourself</font><font color="#CCCCCC"> so I</font>

70
00:04:32,130 --> 00:04:42,719
finished it what I want and here is some

71
00:04:38,700 --> 00:04:45,030
related<font color="#E5E5E5"> works in static and when</font><font color="#CCCCCC"> AFL is</font>

72
00:04:42,720 --> 00:04:49,160
the project<font color="#E5E5E5"> that</font><font color="#CCCCCC"> just mentioned before</font>

73
00:04:45,030 --> 00:04:51,359
<font color="#E5E5E5">and the limitation is that</font><font color="#CCCCCC"> it required a</font>

74
00:04:49,160 --> 00:04:55,500
full symbol of the target application

75
00:04:51,360 --> 00:04:57,570
<font color="#CCCCCC">and here's source that the two</font><font color="#E5E5E5"> of</font>

76
00:04:55,500 --> 00:05:01,230
<font color="#CCCCCC">Aesthetic binary instrumentation on PD</font>

77
00:04:57,570 --> 00:05:07,950
format is still<font color="#E5E5E5"> not available or limit</font>

78
00:05:01,230 --> 00:05:11,160
by some condition and here is the

79
00:05:07,950 --> 00:05:13,740
<font color="#E5E5E5">related works in dynamic and tuk-tuk oh</font>

80
00:05:11,160 --> 00:05:16,770
I suppose it<font color="#CCCCCC"> is the sub project from</font>

81
00:05:13,740 --> 00:05:18,480
capstone and they have presented<font color="#E5E5E5"> on some</font>

82
00:05:16,770 --> 00:05:23,219
conference and<font color="#CCCCCC"> that is the only</font>

83
00:05:18,480 --> 00:05:26,700
information<font color="#E5E5E5"> and he used the capstone to</font>

84
00:05:23,220 --> 00:05:31,070
finish the static analysis and<font color="#E5E5E5"> use the</font>

85
00:05:26,700 --> 00:05:34,229
Keystone to rewrite a binary at<font color="#E5E5E5"> runtime</font>

86
00:05:31,070 --> 00:05:37,469
<font color="#CCCCCC">benefit from capstone</font><font color="#E5E5E5"> and Keystone it is</font>

87
00:05:34,230 --> 00:05:41,580
<font color="#CCCCCC">cross-platform</font><font color="#E5E5E5"> and architecture but the</font>

88
00:05:37,470 --> 00:05:44,340
project in<font color="#E5E5E5"> our open source in cavas is</font>

89
00:05:41,580 --> 00:05:47,909
an other interesting project the

90
00:05:44,340 --> 00:05:51,570
information is from a blog post<font color="#CCCCCC"> for me</font>

91
00:05:47,910 --> 00:05:56,600
and it mainly<font color="#E5E5E5"> focus on Windows kernel</font>

92
00:05:51,570 --> 00:06:01,590
driver and if we write the driver and

93
00:05:56,600 --> 00:06:04,350
<font color="#E5E5E5">install</font><font color="#CCCCCC"> the hook for each basic block</font><font color="#E5E5E5"> in</font>

94
00:06:01,590 --> 00:06:09,210
Wrentham<font color="#E5E5E5"> to feedback the code coverage</font>

95
00:06:04,350 --> 00:06:12,750
<font color="#CCCCCC">and the hook</font><font color="#E5E5E5"> is a long jump with</font><font color="#CCCCCC"> five</font>

96
00:06:09,210 --> 00:06:16,020
bytes<font color="#E5E5E5"> actually if the basic block is</font>

97
00:06:12,750 --> 00:06:19,470
smaller than<font color="#E5E5E5"> 5</font><font color="#CCCCCC"> pi then there is a</font>

98
00:06:16,020 --> 00:06:22,740
problem so it used the interrupt<font color="#E5E5E5"> instead</font>

99
00:06:19,470 --> 00:06:26,940
of the hook<font color="#E5E5E5"> and install the interrupt</font>

100
00:06:22,740 --> 00:06:30,450
<font color="#E5E5E5">handler to solve this problem there is a</font>

101
00:06:26,940 --> 00:06:32,370
small performance<font color="#E5E5E5"> penalty here but I</font>

102
00:06:30,450 --> 00:06:35,000
think<font color="#E5E5E5"> this is still is</font>

103
00:06:32,370 --> 00:06:35,000
solution

104
00:06:40,710 --> 00:06:46,979
<font color="#E5E5E5">okay and here is a related work on</font>

105
00:06:45,120 --> 00:06:49,230
hardware support and most<font color="#E5E5E5"> of the</font>

106
00:06:46,980 --> 00:06:52,440
solution is based on the Intel

107
00:06:49,230 --> 00:06:56,250
processors<font color="#E5E5E5"> trace and which</font><font color="#CCCCCC"> is a feature</font>

108
00:06:52,440 --> 00:06:59,870
from the new<font color="#CCCCCC"> generation Intel CPU and</font>

109
00:06:56,250 --> 00:07:03,060
when<font color="#CCCCCC"> I fell in her PT is a</font><font color="#E5E5E5"> project from</font>

110
00:06:59,870 --> 00:07:06,120
Cisco and the project was<font color="#CCCCCC"> presented on</font>

111
00:07:03,060 --> 00:07:08,250
many conference and they developed in

112
00:07:06,120 --> 00:07:12,230
her PD driver on Windows platform<font color="#E5E5E5"> and</font>

113
00:07:08,250 --> 00:07:16,170
for the reasons for the current version

114
00:07:12,230 --> 00:07:20,640
<font color="#E5E5E5">they</font><font color="#CCCCCC"> directly used the</font><font color="#E5E5E5"> built-in</font><font color="#CCCCCC"> inter PG</font>

115
00:07:16,170 --> 00:07:24,170
driver in RS<font color="#E5E5E5"> 5 but it does not work in</font>

116
00:07:20,640 --> 00:07:30,229
<font color="#E5E5E5">virtual machine machine currently and</font>

117
00:07:24,170 --> 00:07:35,150
<font color="#CCCCCC">kaff k</font><font color="#E5E5E5"> EF l is</font><font color="#CCCCCC"> the academic</font><font color="#E5E5E5"> project and</font>

118
00:07:30,230 --> 00:07:40,260
it combines<font color="#E5E5E5"> the Kumu k vm and integrity</font>

119
00:07:35,150 --> 00:07:43,739
so it can scale up and with virtual

120
00:07:40,260 --> 00:07:47,250
machines<font color="#E5E5E5"> and cross-platform he also can</font>

121
00:07:43,740 --> 00:07:51,440
filter<font color="#E5E5E5"> the PT trace data with a</font><font color="#CCCCCC"> specific</font>

122
00:07:47,250 --> 00:07:58,050
virtual<font color="#E5E5E5"> machine or usable or and</font>

123
00:07:51,440 --> 00:08:00,990
<font color="#CCCCCC">cannibal PID or</font><font color="#E5E5E5"> erp so in how pretty is</font>

124
00:07:58,050 --> 00:08:04,220
a robust feature<font color="#E5E5E5"> but he</font><font color="#CCCCCC"> cannot finish</font>

125
00:08:00,990 --> 00:08:07,320
<font color="#E5E5E5">some feature which I will explain later</font>

126
00:08:04,220 --> 00:08:11,310
<font color="#E5E5E5">and here is the solution for</font>

127
00:08:07,320 --> 00:08:14,400
virtualization<font color="#E5E5E5"> and apple pie apple pie</font>

128
00:08:11,310 --> 00:08:18,960
<font color="#E5E5E5">is a very new project it came out when I</font>

129
00:08:14,400 --> 00:08:23,539
was<font color="#E5E5E5"> preparing this slide he came by the</font>

130
00:08:18,960 --> 00:08:28,919
box<font color="#E5E5E5"> and</font><font color="#CCCCCC"> windows hyper visor profound</font><font color="#E5E5E5"> APR</font>

131
00:08:23,540 --> 00:08:32,820
so it kept<font color="#CCCCCC"> coverage at</font><font color="#E5E5E5"> hypervisor level</font>

132
00:08:28,920 --> 00:08:36,870
rather than<font color="#E5E5E5"> the emulation level so the</font>

133
00:08:32,820 --> 00:08:40,500
performance is improved a lot it also

134
00:08:36,870 --> 00:08:45,350
support a fast<font color="#E5E5E5"> reset which restored a</font>

135
00:08:40,500 --> 00:08:45,350
snapshot with<font color="#E5E5E5"> the modified</font><font color="#CCCCCC"> pages only</font>

136
00:08:45,970 --> 00:08:52,750
and here is the fracture to explain the

137
00:08:50,110 --> 00:08:55,330
<font color="#E5E5E5">FL and one picture is better than</font>

138
00:08:52,750 --> 00:09:00,550
thousands of works<font color="#E5E5E5"> and at the</font><font color="#CCCCCC"> beginning</font>

139
00:08:55,330 --> 00:09:07,750
in Easter in Easter<font color="#E5E5E5"> initial sample set</font>

140
00:09:00,550 --> 00:09:09,339
<font color="#E5E5E5">as input and start a loop and then ever</font>

141
00:09:07,750 --> 00:09:12,610
choose one<font color="#E5E5E5"> input from the queue and</font>

142
00:09:09,340 --> 00:09:15,640
mutate it and then it<font color="#CCCCCC"> run the target</font>

143
00:09:12,610 --> 00:09:19,180
<font color="#CCCCCC">application with the mutator input if it</font>

144
00:09:15,640 --> 00:09:21,850
<font color="#CCCCCC">generates a new coverage then is saved a</font>

145
00:09:19,180 --> 00:09:26,380
mutated input into the queue otherwise

146
00:09:21,850 --> 00:09:30,790
<font color="#E5E5E5">drop it and look again and you it get</font>

147
00:09:26,380 --> 00:09:38,439
the crash and hang so the key point here

148
00:09:30,790 --> 00:09:40,540
is<font color="#E5E5E5"> the coverage and</font><font color="#CCCCCC"> EFL instrument</font><font color="#E5E5E5"> some</font>

149
00:09:38,440 --> 00:09:43,620
assembly code at the<font color="#E5E5E5"> beginning of each</font>

150
00:09:40,540 --> 00:09:48,750
basic block<font color="#E5E5E5"> during</font><font color="#CCCCCC"> camp our</font><font color="#E5E5E5"> time and</font>

151
00:09:43,620 --> 00:09:52,030
assembly code is used to record<font color="#CCCCCC"> the</font>

152
00:09:48,750 --> 00:09:55,810
<font color="#E5E5E5">coverage during execution time and save</font>

153
00:09:52,030 --> 00:09:58,329
it in the bitmap then<font color="#CCCCCC"> airfare can</font>

154
00:09:55,810 --> 00:10:03,550
collect a<font color="#CCCCCC"> coverage from the bitmap</font>

155
00:09:58,330 --> 00:10:07,480
directly for the<font color="#CCCCCC"> Windows application we</font>

156
00:10:03,550 --> 00:10:11,229
<font color="#E5E5E5">usually don't have</font><font color="#CCCCCC"> the source code so we</font>

157
00:10:07,480 --> 00:10:15,340
cannot instrument the assembly code

158
00:10:11,230 --> 00:10:17,710
<font color="#E5E5E5">during</font><font color="#CCCCCC"> the compile time however we still</font>

159
00:10:15,340 --> 00:10:21,030
can instrument the assembly called

160
00:10:17,710 --> 00:10:24,730
statically it is quite<font color="#CCCCCC"> straightforward</font>

161
00:10:21,030 --> 00:10:27,250
<font color="#E5E5E5">but there is a lot</font><font color="#CCCCCC"> of work to do not</font>

162
00:10:24,730 --> 00:10:30,820
only<font color="#E5E5E5"> on the assembly code but also on</font>

163
00:10:27,250 --> 00:10:37,750
the<font color="#CCCCCC"> PE from it I named this project as a</font>

164
00:10:30,820 --> 00:10:41,080
PE<font color="#CCCCCC"> FL</font><font color="#E5E5E5"> in for the assembly code the</font>

165
00:10:37,750 --> 00:10:44,560
instrument called expand the original

166
00:10:41,080 --> 00:10:49,930
code<font color="#E5E5E5"> so some of the</font><font color="#CCCCCC"> Djem have to update</font>

167
00:10:44,560 --> 00:10:53,439
<font color="#E5E5E5">the new relative address and even some</font>

168
00:10:49,930 --> 00:10:57,370
<font color="#CCCCCC">of the jump have to change from short</font>

169
00:10:53,440 --> 00:11:01,720
jump to long jump<font color="#CCCCCC"> if it is necessary</font>

170
00:10:57,370 --> 00:11:09,100
and sometimes the instruction size

171
00:11:01,720 --> 00:11:13,300
becomes larger<font color="#E5E5E5"> and</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> PD file</font>

172
00:11:09,100 --> 00:11:15,450
format<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> first thing I I do is to</font>

173
00:11:13,300 --> 00:11:18,790
duplicate a<font color="#E5E5E5"> executable section and</font>

174
00:11:15,450 --> 00:11:23,590
instrument the<font color="#CCCCCC"> cart on the new section</font>

175
00:11:18,790 --> 00:11:26,650
in<font color="#CCCCCC"> some data such as</font><font color="#E5E5E5"> importable still</font>

176
00:11:23,590 --> 00:11:29,740
remains on the original section<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font>

177
00:11:26,650 --> 00:11:32,140
possible<font color="#CCCCCC"> to remove</font><font color="#E5E5E5"> the original section</font>

178
00:11:29,740 --> 00:11:35,770
completely<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I think it is in the</font>

179
00:11:32,140 --> 00:11:39,310
<font color="#E5E5E5">future work and then I append a new</font>

180
00:11:35,770 --> 00:11:42,750
<font color="#E5E5E5">session</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> coverage to save the coverage</font>

181
00:11:39,310 --> 00:11:46,810
bitmap and some<font color="#CCCCCC"> variables that</font><font color="#E5E5E5"> are used</font>

182
00:11:42,750 --> 00:11:49,810
then P header and some related tables

183
00:11:46,810 --> 00:11:52,420
have to update such as<font color="#CCCCCC"> section table</font>

184
00:11:49,810 --> 00:11:57,760
exportable<font color="#CCCCCC"> SH window table</font><font color="#E5E5E5"> and</font>

185
00:11:52,420 --> 00:12:04,089
relocation<font color="#E5E5E5"> table</font><font color="#CCCCCC"> m most of the update is</font>

186
00:11:57,760 --> 00:12:08,020
from<font color="#E5E5E5"> OHS to the new one and the picture</font>

187
00:12:04,090 --> 00:12:12,820
<font color="#E5E5E5">of the right hand side shows</font><font color="#CCCCCC"> the before</font>

188
00:12:08,020 --> 00:12:16,600
and after and the yellow part is is the

189
00:12:12,820 --> 00:12:21,760
update<font color="#E5E5E5"> and green part is the appended</font>

190
00:12:16,600 --> 00:12:25,030
part and all the<font color="#E5E5E5"> information</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> and</font>

191
00:12:21,760 --> 00:12:28,780
it is extract from the either such as

192
00:12:25,030 --> 00:12:32,819
basic<font color="#E5E5E5"> block branch and is</font><font color="#CCCCCC"> taki address</font>

193
00:12:28,780 --> 00:12:37,470
and<font color="#E5E5E5"> OPA code and operand stack frame</font>

194
00:12:32,820 --> 00:12:40,300
since it is<font color="#CCCCCC"> static</font><font color="#E5E5E5"> lenses from either</font>

195
00:12:37,470 --> 00:12:43,810
some of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> information may be incorrect</font>

196
00:12:40,300 --> 00:12:48,209
<font color="#E5E5E5">and little to some easel</font><font color="#CCCCCC"> I redid her</font>

197
00:12:43,810 --> 00:12:53,680
<font color="#E5E5E5">toes</font><font color="#CCCCCC"> issue</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> but first we have to</font>

198
00:12:48,210 --> 00:12:55,450
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> about why I need a stack frame and</font>

199
00:12:53,680 --> 00:12:59,050
here is the<font color="#E5E5E5"> reason why I need</font>

200
00:12:55,450 --> 00:13:01,450
information<font color="#E5E5E5"> of</font><font color="#CCCCCC"> a stack frame it</font><font color="#E5E5E5"> can be</font>

201
00:12:59,050 --> 00:13:04,329
used to poison<font color="#CCCCCC"> the stack frame at</font><font color="#E5E5E5"> the</font>

202
00:13:01,450 --> 00:13:08,779
beginning of each function and the stack

203
00:13:04,330 --> 00:13:12,050
is<font color="#CCCCCC"> initialized with some</font><font color="#E5E5E5"> major value</font>

204
00:13:08,779 --> 00:13:15,949
<font color="#CCCCCC">you can use that to detect</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> initialize</font>

205
00:13:12,050 --> 00:13:20,359
<font color="#E5E5E5">spec</font><font color="#CCCCCC"> Vario variable or memory leak from</font>

206
00:13:15,949 --> 00:13:22,790
stack and this<font color="#E5E5E5"> is a case</font><font color="#CCCCCC"> to apply</font><font color="#E5E5E5"> to</font>

207
00:13:20,360 --> 00:13:25,160
<font color="#E5E5E5">aesthetic binary instrumentation not</font>

208
00:13:22,790 --> 00:13:29,449
<font color="#E5E5E5">only on fussing but also on back</font>

209
00:13:25,160 --> 00:13:32,180
detection and<font color="#E5E5E5"> I think the solution based</font>

210
00:13:29,449 --> 00:13:38,779
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> inter</font><font color="#E5E5E5"> process trace cannot do</font>

211
00:13:32,180 --> 00:13:41,719
this<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of feature and unfortunately</font>

212
00:13:38,779 --> 00:13:45,620
Microsoft put some nice<font color="#E5E5E5"> mitigation on</font>

213
00:13:41,720 --> 00:13:50,120
the<font color="#E5E5E5"> windows kernel stack accused related</font>

214
00:13:45,620 --> 00:13:53,439
<font color="#CCCCCC">bug class</font><font color="#E5E5E5"> but it looks like</font><font color="#CCCCCC"> it covered</font>

215
00:13:50,120 --> 00:13:55,730
the PID structure on the stack<font color="#CCCCCC"> only and</font>

216
00:13:53,439 --> 00:13:59,480
it<font color="#CCCCCC"> did</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> cover the</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> more</font>

217
00:13:55,730 --> 00:14:03,430
application<font color="#E5E5E5"> so it seems still effective</font>

218
00:13:59,480 --> 00:14:03,430
on some<font color="#E5E5E5"> specific situation</font>

219
00:14:06,400 --> 00:14:12,280
and I<font color="#E5E5E5"> just mentioned</font><font color="#CCCCCC"> that there is some</font>

220
00:14:09,070 --> 00:14:15,000
easel<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you to the incorrect static</font>

221
00:14:12,280 --> 00:14:18,280
static<font color="#E5E5E5"> information from either and that</font>

222
00:14:15,000 --> 00:14:22,720
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> challenge of static binary</font>

223
00:14:18,280 --> 00:14:25,660
instrumentation<font color="#CCCCCC"> on PE file all the</font>

224
00:14:22,720 --> 00:14:29,380
incorrect information<font color="#E5E5E5"> is because the</font>

225
00:14:25,660 --> 00:14:33,390
<font color="#E5E5E5">data and the court are mixed together in</font>

226
00:14:29,380 --> 00:14:37,420
the executable section for<font color="#CCCCCC"> example and</font>

227
00:14:33,390 --> 00:14:39,510
<font color="#CCCCCC">único string argument in win32 api have</font>

228
00:14:37,420 --> 00:14:43,780
to alight to<font color="#E5E5E5"> two parts</font>

229
00:14:39,510 --> 00:14:49,720
otherwise the<font color="#E5E5E5"> API will return error and</font>

230
00:14:43,780 --> 00:14:52,839
exception<font color="#E5E5E5"> handling</font><font color="#CCCCCC"> sh</font><font color="#E5E5E5"> handle a table</font>

231
00:14:49,720 --> 00:14:55,870
have to<font color="#CCCCCC"> ally to four</font><font color="#E5E5E5"> parts</font>

232
00:14:52,840 --> 00:15:00,850
otherwise the<font color="#CCCCCC"> PG file format is invalid</font>

233
00:14:55,870 --> 00:15:03,760
and it cannot<font color="#E5E5E5"> be executed so we need</font>

234
00:15:00,850 --> 00:15:06,600
some<font color="#CCCCCC"> extra work to take care about</font><font color="#E5E5E5"> data</font>

235
00:15:03,760 --> 00:15:09,220
alignment<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the executable</font><font color="#E5E5E5"> section</font>

236
00:15:06,600 --> 00:15:16,120
<font color="#E5E5E5">anyway this kind of alignment problem is</font>

237
00:15:09,220 --> 00:15:19,060
easy to solve but here is<font color="#CCCCCC"> another kind</font>

238
00:15:16,120 --> 00:15:22,690
of problem<font color="#E5E5E5"> and it is hard to be solved</font>

239
00:15:19,060 --> 00:15:26,920
and<font color="#CCCCCC"> that is the confusion</font><font color="#E5E5E5"> between the</font>

240
00:15:22,690 --> 00:15:31,510
<font color="#E5E5E5">code and the</font><font color="#CCCCCC"> data sometimes</font><font color="#E5E5E5"> either may</font>

241
00:15:26,920 --> 00:15:35,680
assume<font color="#CCCCCC"> the data as caught or assume the</font>

242
00:15:31,510 --> 00:15:42,550
<font color="#E5E5E5">caught as data for</font><font color="#CCCCCC"> example a string</font>

243
00:15:35,680 --> 00:15:45,880
argument<font color="#CCCCCC"> ABC here</font><font color="#E5E5E5"> which is in the</font>

244
00:15:42,550 --> 00:15:49,479
executable section and it is incorrectly

245
00:15:45,880 --> 00:15:52,750
assumed as caught after that the code is

246
00:15:49,480 --> 00:15:56,800
instrument<font color="#E5E5E5"> and actually it is corrupting</font>

247
00:15:52,750 --> 00:16:03,670
the original data<font color="#E5E5E5"> this lead to in club</font>

248
00:15:56,800 --> 00:16:06,579
in incorrect<font color="#CCCCCC"> API argument and the</font><font color="#E5E5E5"> P the</font>

249
00:16:03,670 --> 00:16:10,180
<font color="#E5E5E5">different behavior between the</font><font color="#CCCCCC"> original</font>

250
00:16:06,580 --> 00:16:14,380
one and update binary on the other hand

251
00:16:10,180 --> 00:16:18,260
if there is a branch in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and the</font>

252
00:16:14,380 --> 00:16:21,880
<font color="#CCCCCC">code is assumed as data incorrectly</font>

253
00:16:18,260 --> 00:16:26,390
and we will not update<font color="#CCCCCC"> the branch</font><font color="#E5E5E5"> and</font>

254
00:16:21,880 --> 00:16:29,270
it's<font color="#E5E5E5"> related address so after that the</font>

255
00:16:26,390 --> 00:16:32,270
execution<font color="#CCCCCC"> may vary</font><font color="#E5E5E5"> in here and because</font>

256
00:16:29,270 --> 00:16:39,319
the branch jumped to the over a tip

257
00:16:32,270 --> 00:16:43,060
address but<font color="#E5E5E5"> not a new one sometimes is</font>

258
00:16:39,320 --> 00:16:48,280
it it is<font color="#E5E5E5"> difficult to identify if</font>

259
00:16:43,060 --> 00:16:51,530
whether a binary<font color="#E5E5E5"> data is caught or data</font>

260
00:16:48,280 --> 00:16:54,050
<font color="#E5E5E5">the problem is similar to the picture</font><font color="#CCCCCC"> on</font>

261
00:16:51,530 --> 00:16:55,939
<font color="#E5E5E5">the right hand side it is difficult to</font>

262
00:16:54,050 --> 00:17:02,750
identify<font color="#E5E5E5"> a picture</font>

263
00:16:55,940 --> 00:17:05,540
whether it is a chihuahua<font color="#E5E5E5"> or moving for</font>

264
00:17:02,750 --> 00:17:08,630
this kind of problem<font color="#CCCCCC"> if you have the</font>

265
00:17:05,540 --> 00:17:13,339
<font color="#E5E5E5">public symbol for the binary</font><font color="#CCCCCC"> and it</font>

266
00:17:08,630 --> 00:17:16,490
<font color="#E5E5E5">provide reliable information</font><font color="#CCCCCC"> about which</font>

267
00:17:13,339 --> 00:17:19,449
is<font color="#CCCCCC"> theta and which</font><font color="#E5E5E5"> is called and so the</font>

268
00:17:16,490 --> 00:17:19,450
problem is<font color="#E5E5E5"> solved</font>

269
00:17:21,339 --> 00:17:27,290
otherwise if you<font color="#CCCCCC"> don't have the perfect</font>

270
00:17:23,510 --> 00:17:30,230
<font color="#E5E5E5">symbol and you can wait</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the updated</font>

271
00:17:27,290 --> 00:17:31,430
<font color="#E5E5E5">version of your</font><font color="#CCCCCC"> Ida Pro as</font><font color="#E5E5E5"> I see some</font>

272
00:17:30,230 --> 00:17:36,350
case in the<font color="#E5E5E5"> Ovation</font>

273
00:17:31,430 --> 00:17:41,770
is fixed in<font color="#E5E5E5"> the new version so they are</font>

274
00:17:36,350 --> 00:17:44,060
<font color="#E5E5E5">improving but very very slow</font><font color="#CCCCCC"> and</font>

275
00:17:41,770 --> 00:17:46,610
otherwise if you don't<font color="#E5E5E5"> have the proper</font>

276
00:17:44,060 --> 00:17:49,580
symbol<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> example I have something</font>

277
00:17:46,610 --> 00:17:54,020
wrong here<font color="#CCCCCC"> give it a try to fix the</font>

278
00:17:49,580 --> 00:17:58,220
issue for<font color="#E5E5E5"> the case that assumed theta</font>

279
00:17:54,020 --> 00:18:03,110
<font color="#CCCCCC">ascot I instrument</font><font color="#E5E5E5"> before the branch</font>

280
00:17:58,220 --> 00:18:06,710
instead of the basic block<font color="#E5E5E5"> and then I</font>

281
00:18:03,110 --> 00:18:11,060
validate<font color="#E5E5E5"> the target of the branch if it</font>

282
00:18:06,710 --> 00:18:16,310
is invalid<font color="#CCCCCC"> then</font><font color="#E5E5E5"> I a lot of time and fix</font>

283
00:18:11,060 --> 00:18:20,149
it manually for the case that assumed

284
00:18:16,310 --> 00:18:22,429
caught as theta<font color="#CCCCCC"> I try to</font><font color="#E5E5E5"> look for a</font>

285
00:18:20,150 --> 00:18:26,060
valid branch in the<font color="#CCCCCC"> subspace rest data</font>

286
00:18:22,430 --> 00:18:29,380
and which is usually located<font color="#CCCCCC"> at the end</font>

287
00:18:26,060 --> 00:18:29,379
<font color="#E5E5E5">of a function and</font>

288
00:18:30,260 --> 00:18:38,129
some of the<font color="#E5E5E5"> non data type can be filter</font>

289
00:18:33,230 --> 00:18:42,000
then<font color="#E5E5E5"> I alert the remaining suspicious</font>

290
00:18:38,130 --> 00:18:45,390
data and also fix it manually the

291
00:18:42,000 --> 00:18:48,900
strategy here<font color="#CCCCCC"> is a semi automation</font>

292
00:18:45,390 --> 00:18:52,710
<font color="#CCCCCC">honnestly the solution here did not</font>

293
00:18:48,900 --> 00:18:55,230
cover all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> corner case and some other</font>

294
00:18:52,710 --> 00:18:57,090
case can still be missed<font color="#E5E5E5"> and I did not</font>

295
00:18:55,230 --> 00:19:00,120
<font color="#E5E5E5">put too much time on here to figure out</font>

296
00:18:57,090 --> 00:19:04,889
<font color="#E5E5E5">a</font><font color="#CCCCCC"> better solution maybe some simple</font>

297
00:19:00,120 --> 00:19:09,120
emulation can be used<font color="#E5E5E5"> here or maybe some</font>

298
00:19:04,890 --> 00:19:14,700
academics<font color="#E5E5E5"> solution is</font><font color="#CCCCCC"> available it is</font>

299
00:19:09,120 --> 00:19:19,530
<font color="#E5E5E5">still has room for improvement</font><font color="#CCCCCC"> and here</font>

300
00:19:14,700 --> 00:19:23,100
is an example<font color="#E5E5E5"> for instrumenting mspaint</font>

301
00:19:19,530 --> 00:19:27,180
<font color="#CCCCCC">are easy without</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> symbol as you</font><font color="#E5E5E5"> can see</font>

302
00:19:23,100 --> 00:19:30,030
there is<font color="#E5E5E5"> a some one message</font><font color="#CCCCCC"> while</font>

303
00:19:27,180 --> 00:19:32,790
collecting information from<font color="#E5E5E5"> either and</font>

304
00:19:30,030 --> 00:19:37,760
that<font color="#CCCCCC"> is the list</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the possible</font>

305
00:19:32,790 --> 00:19:40,230
<font color="#E5E5E5">confusion between the data and code and</font>

306
00:19:37,760 --> 00:19:46,950
honestly it this is not a good

307
00:19:40,230 --> 00:19:51,240
workaround and here is a picture<font color="#E5E5E5"> to</font>

308
00:19:46,950 --> 00:19:55,170
describe the<font color="#E5E5E5"> facing scenario the</font>

309
00:19:51,240 --> 00:19:57,980
scenario is<font color="#CCCCCC"> similar to</font><font color="#E5E5E5"> a FL there is a</font>

310
00:19:55,170 --> 00:20:01,830
rapper rapper<font color="#E5E5E5"> a test report</font><font color="#CCCCCC"> or you see</font>

311
00:19:57,980 --> 00:20:05,550
it is used to load an executor<font color="#E5E5E5"> taki</font>

312
00:20:01,830 --> 00:20:08,310
library which to be fast and<font color="#E5E5E5"> named pipe</font>

313
00:20:05,550 --> 00:20:12,240
and share memory is used to<font color="#CCCCCC"> communicate</font>

314
00:20:08,310 --> 00:20:15,960
<font color="#CCCCCC">between the</font><font color="#E5E5E5"> rapper and father after</font>

315
00:20:12,240 --> 00:20:19,950
finishing one execution<font color="#CCCCCC"> and rapper</font>

316
00:20:15,960 --> 00:20:23,160
copied<font color="#CCCCCC"> code the coverage be map from top</font>

317
00:20:19,950 --> 00:20:26,310
coverage<font color="#E5E5E5"> section and to the shared</font>

318
00:20:23,160 --> 00:20:29,300
memory<font color="#E5E5E5"> and then the father can get</font>

319
00:20:26,310 --> 00:20:29,300
coverage

320
00:20:31,160 --> 00:20:40,030
for the kernel-mode facing the scenario

321
00:20:34,760 --> 00:20:44,570
is similar<font color="#E5E5E5"> a helper trophy is used to</font>

322
00:20:40,030 --> 00:20:48,260
finish<font color="#E5E5E5"> some job such as mapping the</font><font color="#CCCCCC"> tour</font>

323
00:20:44,570 --> 00:20:50,689
<font color="#E5E5E5">coverage section into</font><font color="#CCCCCC"> the user</font><font color="#E5E5E5"> mode then</font>

324
00:20:48,260 --> 00:20:59,660
<font color="#CCCCCC">the rapper can assist the</font><font color="#E5E5E5"> tour coverage</font>

325
00:20:50,690 --> 00:21:01,940
section directly and here is he

326
00:20:59,660 --> 00:21:05,600
mentioned different<font color="#E5E5E5"> type</font><font color="#CCCCCC"> of instrument</font>

327
00:21:01,940 --> 00:21:09,290
<font color="#E5E5E5">that you can</font><font color="#CCCCCC"> used on passing</font><font color="#E5E5E5"> for</font>

328
00:21:05,600 --> 00:21:12,469
<font color="#CCCCCC">confessing and PID filtering is used</font>

329
00:21:09,290 --> 00:21:17,590
usually used<font color="#E5E5E5"> to ignore those unnecessary</font>

330
00:21:12,470 --> 00:21:20,420
<font color="#CCCCCC">chord coverage from another process and</font>

331
00:21:17,590 --> 00:21:23,510
for<font color="#E5E5E5"> user</font><font color="#CCCCCC"> mode facing some of the</font>

332
00:21:20,420 --> 00:21:27,710
<font color="#E5E5E5">application is multi thread and so I</font>

333
00:21:23,510 --> 00:21:33,020
locate different<font color="#CCCCCC"> FL previous location</font>

334
00:21:27,710 --> 00:21:36,740
variable for<font color="#E5E5E5"> each thread so the coverage</font>

335
00:21:33,020 --> 00:21:41,200
is keep<font color="#E5E5E5"> deterministic under the multi</font>

336
00:21:36,740 --> 00:21:46,220
thread environment and use only<font color="#E5E5E5"> new</font>

337
00:21:41,200 --> 00:21:51,380
instrument<font color="#E5E5E5"> the assembly code directly</font>

338
00:21:46,220 --> 00:21:54,260
with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> limo for performance paper also</font>

339
00:21:51,380 --> 00:21:57,470
<font color="#CCCCCC">you can instrument</font><font color="#E5E5E5"> the C code for each</font>

340
00:21:54,260 --> 00:22:00,230
basic block to finish some complicated

341
00:21:57,470 --> 00:22:02,950
<font color="#CCCCCC">tasks so</font><font color="#E5E5E5"> you don't need to deal</font><font color="#CCCCCC"> with the</font>

342
00:22:00,230 --> 00:22:05,390
lonely for assembly<font color="#CCCCCC"> and</font><font color="#E5E5E5"> relocation and</font>

343
00:22:02,950 --> 00:22:07,990
the choice<font color="#E5E5E5"> is depends on your</font>

344
00:22:05,390 --> 00:22:07,990
requirement

345
00:22:10,340 --> 00:22:15,399
and here is some benchmarking data and

346
00:22:15,790 --> 00:22:24,050
the benchmark<font color="#CCCCCC"> is based on the passing</font>

347
00:22:19,940 --> 00:22:27,980
the<font color="#CCCCCC"> GDI plus library</font><font color="#E5E5E5"> and the environment</font>

348
00:22:24,050 --> 00:22:32,960
is on Windows 10<font color="#E5E5E5"> virtual machine with 4</font>

349
00:22:27,980 --> 00:22:36,770
<font color="#CCCCCC">gigabytes</font><font color="#E5E5E5"> memory and i7 CPU with one</font>

350
00:22:32,960 --> 00:22:40,310
core as<font color="#E5E5E5"> you see the speed is closer than</font>

351
00:22:36,770 --> 00:22:42,260
native execution and is speed up around

352
00:22:40,310 --> 00:22:47,270
<font color="#E5E5E5">two times</font><font color="#CCCCCC"> over</font>

353
00:22:42,260 --> 00:22:50,270
win<font color="#E5E5E5"> AFL and</font><font color="#CCCCCC"> win</font><font color="#E5E5E5"> airfare</font><font color="#CCCCCC"> states that the</font>

354
00:22:47,270 --> 00:22:54,740
overhead is around<font color="#E5E5E5"> two</font><font color="#CCCCCC"> thumbs over the</font>

355
00:22:50,270 --> 00:22:58,340
<font color="#E5E5E5">native execution</font><font color="#CCCCCC"> our benchmarking data</font>

356
00:22:54,740 --> 00:23:01,960
here shows it is close to<font color="#CCCCCC"> the stamen</font>

357
00:22:58,340 --> 00:23:01,959
what is set

358
00:23:04,910 --> 00:23:10,120
and here is the<font color="#E5E5E5"> demonstration</font>

359
00:23:14,159 --> 00:23:18,750
<font color="#CCCCCC">can</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> switched</font><font color="#E5E5E5"> the screen</font>

360
00:23:28,860 --> 00:23:32,750
<font color="#E5E5E5">okay</font>

361
00:23:30,480 --> 00:23:32,750
and

362
00:23:43,140 --> 00:23:47,040
and here is the demo driver and here is

363
00:23:46,140 --> 00:23:51,860
the source code

364
00:23:47,040 --> 00:23:56,580
let me see the source code first<font color="#E5E5E5"> okay</font>

365
00:23:51,860 --> 00:23:59,149
<font color="#E5E5E5">and user</font><font color="#CCCCCC"> mode application can</font><font color="#E5E5E5"> use the</font>

366
00:23:56,580 --> 00:24:04,500
our control<font color="#E5E5E5"> to call this function</font>

367
00:23:59,150 --> 00:24:08,280
trigger demo here and here is<font color="#E5E5E5"> the user</font>

368
00:24:04,500 --> 00:24:12,530
mode input buffer from here<font color="#E5E5E5"> and then</font>

369
00:24:08,280 --> 00:24:15,870
there is a lot<font color="#E5E5E5"> of if statement here and</font>

370
00:24:12,530 --> 00:24:19,350
it checks the input user mode input

371
00:24:15,870 --> 00:24:24,178
buffer with<font color="#E5E5E5"> blue</font><font color="#CCCCCC"> head</font>

372
00:24:19,350 --> 00:24:29,840
bleh<font color="#CCCCCC"> eighty here and I put a buck shock</font>

373
00:24:24,179 --> 00:24:33,750
here 1 3 3 7<font color="#E5E5E5"> so if the input buffer</font>

374
00:24:29,840 --> 00:24:40,559
<font color="#CCCCCC">passed the first four if statement then</font>

375
00:24:33,750 --> 00:24:42,919
<font color="#E5E5E5">the system will crash</font><font color="#CCCCCC"> 1/4 full screen so</font>

376
00:24:40,559 --> 00:24:42,918
<font color="#E5E5E5">now</font>

377
00:24:45,539 --> 00:24:49,408
start your either

378
00:24:52,059 --> 00:25:01,629
and<font color="#CCCCCC"> analyze the demo driver here I</font>

379
00:24:58,049 --> 00:25:08,580
instrument it without a symbol<font color="#E5E5E5"> so I</font>

380
00:25:01,629 --> 00:25:13,570
<font color="#E5E5E5">choose no and use the script to dump the</font>

381
00:25:08,580 --> 00:25:18,658
static information<font color="#E5E5E5"> here and here is some</font>

382
00:25:13,570 --> 00:25:23,859
highlight the highlight is represent

383
00:25:18,659 --> 00:25:28,779
basic block location here<font color="#E5E5E5"> and then there</font>

384
00:25:23,859 --> 00:25:31,239
should be<font color="#CCCCCC"> a dump file here</font><font color="#E5E5E5"> it will be</font>

385
00:25:28,779 --> 00:25:34,019
small<font color="#E5E5E5"> and now you can do the</font>

386
00:25:31,239 --> 00:25:34,019
<font color="#E5E5E5">instrumentation</font>

387
00:25:43,390 --> 00:25:47,490
<font color="#CCCCCC">size is too</font><font color="#E5E5E5"> small</font>

388
00:25:48,880 --> 00:25:51,630
<font color="#E5E5E5">okay</font>

389
00:25:53,929 --> 00:26:02,090
and now you can<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> PFL</font><font color="#E5E5E5"> with demo</font>

390
00:25:58,159 --> 00:26:10,779
driver and dump of outage you just

391
00:26:02,090 --> 00:26:10,779
create and there should be<font color="#E5E5E5"> a output</font><font color="#CCCCCC"> oh</font>

392
00:26:11,830 --> 00:26:23,869
<font color="#CCCCCC">because the performance of this</font><font color="#E5E5E5"> notebook</font>

393
00:26:16,580 --> 00:26:26,559
<font color="#CCCCCC">is very bad</font><font color="#E5E5E5"> and the output is here as</font>

394
00:26:23,869 --> 00:26:31,730
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can see the size becomes larger and</font>

395
00:26:26,559 --> 00:26:38,139
<font color="#CCCCCC">now you can copy this update binary into</font>

396
00:26:31,730 --> 00:26:38,139
the virtual<font color="#E5E5E5"> machine and ready to</font><font color="#CCCCCC"> fast</font>

397
00:26:38,440 --> 00:26:48,139
actually<font color="#CCCCCC"> I already copy it in here the</font>

398
00:26:44,509 --> 00:26:57,590
screen is a little<font color="#E5E5E5"> bit small and what</font>

399
00:26:48,139 --> 00:27:01,158
you have<font color="#CCCCCC"> to do now is stop the demo</font>

400
00:26:57,590 --> 00:27:03,649
surface and override the<font color="#E5E5E5"> original demo</font>

401
00:27:01,159 --> 00:27:08,419
driver with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> updated binary and then</font>

402
00:27:03,649 --> 00:27:13,869
we start<font color="#E5E5E5"> the demo surface here and then</font>

403
00:27:08,419 --> 00:27:13,869
you can try<font color="#E5E5E5"> to fast he</font>

404
00:27:16,360 --> 00:27:25,080
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> the command is too small I think the</font>

405
00:27:22,059 --> 00:27:25,080
command should<font color="#E5E5E5"> be</font>

406
00:27:46,450 --> 00:27:55,330
<font color="#CCCCCC">and- i is the</font><font color="#E5E5E5"> input directory and you</font>

407
00:27:50,360 --> 00:27:55,330
can check the input thority we here I

408
00:27:55,510 --> 00:28:08,000
only have<font color="#E5E5E5"> one input and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> only</font>

409
00:28:02,090 --> 00:28:12,139
<font color="#E5E5E5">contained a</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> character a and the -</font>

410
00:28:08,000 --> 00:28:17,210
<font color="#CCCCCC">oh is a for oratory</font><font color="#E5E5E5"> a - P is the target</font>

411
00:28:12,140 --> 00:28:21,230
<font color="#E5E5E5">driver that you first and test our</font>

412
00:28:17,210 --> 00:28:25,340
control here is the<font color="#CCCCCC"> rapper that</font><font color="#E5E5E5"> try to</font>

413
00:28:21,230 --> 00:28:29,510
do the memory map and create a device

414
00:28:25,340 --> 00:28:32,780
demo and ice specific our control code

415
00:28:29,510 --> 00:28:35,270
here<font color="#CCCCCC"> for the demos</font><font color="#E5E5E5"> purpose in the real</font>

416
00:28:32,780 --> 00:28:40,780
<font color="#E5E5E5">world case and you can generalize here</font>

417
00:28:35,270 --> 00:28:46,490
<font color="#CCCCCC">and the last one</font><font color="#E5E5E5"> is the input path so</font>

418
00:28:40,780 --> 00:28:50,690
after you execute it and maybe way

419
00:28:46,490 --> 00:28:52,970
around<font color="#CCCCCC"> ten seconds because I Lim the</font>

420
00:28:50,690 --> 00:28:58,429
<font color="#CCCCCC">resource for this</font><font color="#E5E5E5"> virtual machine is</font>

421
00:28:52,970 --> 00:29:02,890
<font color="#CCCCCC">very limited and the speed is</font><font color="#E5E5E5"> around 115</font>

422
00:28:58,429 --> 00:29:02,890
along per second

423
00:29:16,090 --> 00:29:26,290
so<font color="#CCCCCC"> here is the stopcock</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> stocking</font><font color="#E5E5E5"> is</font>

424
00:29:24,190 --> 00:29:31,330
too small here<font color="#CCCCCC"> one two three three seven</font>

425
00:29:26,290 --> 00:29:35,190
<font color="#CCCCCC">sorry</font><font color="#E5E5E5"> about that and now we can switch</font>

426
00:29:31,330 --> 00:29:35,189
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> slide</font>

427
00:29:51,110 --> 00:30:00,799
and here is the first case<font color="#CCCCCC"> study and CFS</font>

428
00:29:57,710 --> 00:30:01,429
is the first try<font color="#E5E5E5"> on Windows kernel</font>

429
00:30:00,799 --> 00:30:05,270
driver

430
00:30:01,429 --> 00:30:08,600
it is very known attack vector<font color="#E5E5E5"> and fully</font>

431
00:30:05,270 --> 00:30:14,900
researched by<font color="#E5E5E5"> project zero</font><font color="#CCCCCC"> Kingdom and</font>

432
00:30:08,600 --> 00:30:16,969
<font color="#CCCCCC">ji-ho three six zero it</font><font color="#E5E5E5"> is also used on</font>

433
00:30:14,900 --> 00:30:22,540
some competitions such as<font color="#CCCCCC"> punto</font><font color="#E5E5E5"> on and</font>

434
00:30:16,970 --> 00:30:25,900
by the<font color="#E5E5E5"> way it was sandbox recent years</font>

435
00:30:22,540 --> 00:30:29,290
the driver<font color="#CCCCCC"> past the undocumented</font><font color="#E5E5E5"> LF</font>

436
00:30:25,900 --> 00:30:33,710
format in kernel so it sounds very

437
00:30:29,290 --> 00:30:39,230
<font color="#E5E5E5">dangerous and</font><font color="#CCCCCC"> the entry</font><font color="#E5E5E5"> point is from</font>

438
00:30:33,710 --> 00:30:44,570
<font color="#E5E5E5">the</font><font color="#CCCCCC"> api</font><font color="#E5E5E5"> create</font><font color="#CCCCCC"> translation</font><font color="#E5E5E5"> manager and</font>

439
00:30:39,230 --> 00:30:46,940
the<font color="#CCCCCC"> PRF format has checksum</font><font color="#E5E5E5"> so I patched</font>

440
00:30:44,570 --> 00:30:51,290
the checksum in the driver manually and

441
00:30:46,940 --> 00:30:54,980
<font color="#E5E5E5">then I applied a PE AFL and first it's</font>

442
00:30:51,290 --> 00:30:58,370
on<font color="#E5E5E5"> eight virtual machines about two</font>

443
00:30:54,980 --> 00:31:02,270
weeks and finally did<font color="#E5E5E5"> implicate some</font>

444
00:30:58,370 --> 00:31:06,080
crash and send them to<font color="#E5E5E5"> nsrc and 2cv is</font>

445
00:31:02,270 --> 00:31:09,350
aside and one is<font color="#E5E5E5"> to overall and another</font>

446
00:31:06,080 --> 00:31:13,699
one is used after<font color="#E5E5E5"> three and</font><font color="#CCCCCC"> by the ways</font>

447
00:31:09,350 --> 00:31:16,428
some<font color="#E5E5E5"> of the crash POC didn't effects so</font>

448
00:31:13,700 --> 00:31:20,740
<font color="#CCCCCC">toast case becomes the anti fast case on</font>

449
00:31:16,429 --> 00:31:20,740
<font color="#E5E5E5">my forcing</font><font color="#CCCCCC"> too</font>

450
00:31:22,059 --> 00:31:29,109
and the second target<font color="#E5E5E5"> is the CNG driver</font>

451
00:31:26,039 --> 00:31:32,049
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> one of the well known one and</font><font color="#E5E5E5"> a</font>

452
00:31:29,109 --> 00:31:36,489
<font color="#E5E5E5">power driver and some of the entry point</font>

453
00:31:32,049 --> 00:31:39,668
is from<font color="#E5E5E5"> our control this scenario is</font>

454
00:31:36,489 --> 00:31:45,129
also<font color="#E5E5E5"> applicable on any kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> i/o</font>

455
00:31:39,669 --> 00:31:48,059
<font color="#E5E5E5">passing when the</font><font color="#CCCCCC"> father stopped the car</font>

456
00:31:45,129 --> 00:31:53,199
coverage<font color="#E5E5E5"> did not increase rapidly and</font>

457
00:31:48,059 --> 00:31:56,830
stuck it doesn't make sense<font color="#CCCCCC"> based on the</font>

458
00:31:53,200 --> 00:32:02,259
complexity of the driver<font color="#E5E5E5"> so it's time to</font>

459
00:31:56,830 --> 00:32:04,330
figure<font color="#E5E5E5"> out the real cost and benefit</font>

460
00:32:02,259 --> 00:32:08,019
from the static binary instrumentation

461
00:32:04,330 --> 00:32:12,129
and it is easy<font color="#E5E5E5"> to dump the execution</font>

462
00:32:08,019 --> 00:32:13,979
trace and see what happened also you can

463
00:32:12,129 --> 00:32:17,978
import the trace<font color="#E5E5E5"> into the lighthouse</font>

464
00:32:13,979 --> 00:32:22,779
which is a<font color="#E5E5E5"> open source at approaching</font>

465
00:32:17,979 --> 00:32:24,519
<font color="#CCCCCC">and so some statistics in either</font><font color="#E5E5E5"> it is</font>

466
00:32:22,779 --> 00:32:28,139
more convenience on reverse engineering

467
00:32:24,519 --> 00:32:28,139
or debugging

468
00:32:39,260 --> 00:32:44,290
<font color="#E5E5E5">okay</font>

469
00:32:40,780 --> 00:32:46,780
and after some investigation the input

470
00:32:44,290 --> 00:32:50,020
for the our control needs some valid

471
00:32:46,780 --> 00:32:54,970
object<font color="#E5E5E5"> such as if an</font><font color="#CCCCCC"> object and a major</font>

472
00:32:50,020 --> 00:32:58,090
header<font color="#E5E5E5"> and after that</font><font color="#CCCCCC"> I slightly adjust</font>

473
00:32:54,970 --> 00:33:01,750
the mutator and the input<font color="#E5E5E5"> and finally</font>

474
00:32:58,090 --> 00:33:05,909
the<font color="#CCCCCC"> core</font><font color="#E5E5E5"> coverage increase</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> after</font>

475
00:33:01,750 --> 00:33:11,050
passing<font color="#CCCCCC"> a week on H virtual machines the</font>

476
00:33:05,910 --> 00:33:16,480
<font color="#CCCCCC">result is</font><font color="#E5E5E5"> 1 CV and that is in our of</font>

477
00:33:11,050 --> 00:33:22,270
<font color="#CCCCCC">Bank read on poor memory and the third</font>

478
00:33:16,480 --> 00:33:24,880
case<font color="#CCCCCC"> study is registry hive file the</font>

479
00:33:22,270 --> 00:33:28,900
registry<font color="#E5E5E5"> hive</font><font color="#CCCCCC"> form it is a document and</font>

480
00:33:24,880 --> 00:33:33,070
is passed in the entire OS kernel the

481
00:33:28,900 --> 00:33:39,240
entry point<font color="#E5E5E5"> here is from the rack low F</font>

482
00:33:33,070 --> 00:33:43,389
key<font color="#E5E5E5"> and this time we have to instrument</font>

483
00:33:39,240 --> 00:33:46,590
<font color="#CCCCCC">the entire OS kernel which is a very</font>

484
00:33:43,390 --> 00:33:49,090
large<font color="#E5E5E5"> executable around</font><font color="#CCCCCC"> seven megabytes</font>

485
00:33:46,590 --> 00:33:52,780
it doesn't make sense to instrument the

486
00:33:49,090 --> 00:33:57,030
<font color="#E5E5E5">whole entire OS kernel so we</font><font color="#CCCCCC"> pass early</font>

487
00:33:52,780 --> 00:34:01,000
instrument the code that we only concern

488
00:33:57,030 --> 00:34:05,170
as you<font color="#CCCCCC"> can see in a picture the entire</font>

489
00:34:01,000 --> 00:34:08,260
OS kernel is<font color="#CCCCCC"> partially half</font><font color="#E5E5E5"> password</font>

490
00:34:05,170 --> 00:34:12,460
instrument with some regular expression

491
00:34:08,260 --> 00:34:14,730
matching the match is on the symbols

492
00:34:12,460 --> 00:34:14,730
name

493
00:34:20,190 --> 00:34:26,940
so<font color="#E5E5E5"> however no result at yet</font><font color="#CCCCCC"> and one</font>

494
00:34:24,510 --> 00:34:30,690
possible reason<font color="#E5E5E5"> is that the</font><font color="#CCCCCC"> gullible</font>

495
00:34:26,940 --> 00:34:35,359
state of registry in anti OS kernel has

496
00:34:30,690 --> 00:34:38,760
changed frequently and the father<font color="#E5E5E5"> run as</font>

497
00:34:35,359 --> 00:34:42,119
persistent<font color="#CCCCCC"> mode so one input registry</font>

498
00:34:38,760 --> 00:34:44,129
file may produce different<font color="#E5E5E5"> coverage and</font>

499
00:34:42,119 --> 00:34:49,440
it<font color="#E5E5E5"> affects the stability and</font>

500
00:34:44,129 --> 00:34:52,649
effectiveness<font color="#E5E5E5"> on fuzzing maybe we have</font>

501
00:34:49,440 --> 00:35:02,369
to pass<font color="#CCCCCC"> holy instrument the pass code</font>

502
00:34:52,649 --> 00:35:03,240
more specifically and he is a post story

503
00:35:02,369 --> 00:35:08,369
about<font color="#E5E5E5"> a</font>

504
00:35:03,240 --> 00:35:10,799
instrumenting ng OS kernel<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> is it</font>

505
00:35:08,369 --> 00:35:14,430
possible to fully instrument the<font color="#E5E5E5"> whole</font>

506
00:35:10,799 --> 00:35:18,509
<font color="#E5E5E5">entire us kernel and puts the operating</font>

507
00:35:14,430 --> 00:35:22,049
system up<font color="#E5E5E5"> and I tried and everything</font>

508
00:35:18,510 --> 00:35:25,410
works except one place and there<font color="#CCCCCC"> is a</font>

509
00:35:22,049 --> 00:35:31,200
<font color="#E5E5E5">self modifying branch in anti OS kernel</font>

510
00:35:25,410 --> 00:35:35,670
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it is updated at runtime and it is</font>

511
00:35:31,200 --> 00:35:37,890
quite<font color="#E5E5E5"> interesting that the read only</font>

512
00:35:35,670 --> 00:35:41,760
text section<font color="#E5E5E5"> is modified at</font><font color="#CCCCCC"> runtime</font>

513
00:35:37,890 --> 00:35:44,990
I'm not sure is<font color="#E5E5E5"> it brick any kind of</font>

514
00:35:41,760 --> 00:35:44,990
security<font color="#E5E5E5"> policy</font>

515
00:35:47,410 --> 00:35:53,859
and the self-modifying code is

516
00:35:50,080 --> 00:35:57,549
<font color="#E5E5E5">detectable from</font><font color="#CCCCCC"> either</font><font color="#E5E5E5"> and then we can</font>

517
00:35:53,860 --> 00:36:01,750
skip<font color="#E5E5E5"> it with puzzle instrumentation but</font>

518
00:35:57,550 --> 00:36:05,850
<font color="#E5E5E5">actually it is</font><font color="#CCCCCC"> just a vector</font><font color="#E5E5E5"> one to skip</font>

519
00:36:01,750 --> 00:36:10,120
it and did not<font color="#CCCCCC"> really soft easil</font><font color="#E5E5E5"> and</font>

520
00:36:05,850 --> 00:36:16,240
this is one of the limitation on<font color="#E5E5E5"> static</font>

521
00:36:10,120 --> 00:36:20,049
binary instrumentation and<font color="#CCCCCC"> here is the</font>

522
00:36:16,240 --> 00:36:23,649
<font color="#CCCCCC">conclusion</font><font color="#E5E5E5"> and we showed a possibility</font>

523
00:36:20,050 --> 00:36:25,630
and a<font color="#E5E5E5"> limitation of static binary</font>

524
00:36:23,650 --> 00:36:30,250
<font color="#E5E5E5">instrumentation or</font><font color="#CCCCCC"> on PD format</font><font color="#E5E5E5"> and</font>

525
00:36:25,630 --> 00:36:33,970
passing what it can instrument and what

526
00:36:30,250 --> 00:36:38,440
<font color="#E5E5E5">it cannot and the challenge is mainly</font>

527
00:36:33,970 --> 00:36:41,680
from the<font color="#CCCCCC"> mix of data and code</font><font color="#E5E5E5"> on the</font>

528
00:36:38,440 --> 00:36:43,900
executable section if you don't have the

529
00:36:41,680 --> 00:36:48,730
<font color="#E5E5E5">public symbol and that</font><font color="#CCCCCC"> would be a</font>

530
00:36:43,900 --> 00:36:53,100
problem<font color="#E5E5E5"> honestly</font><font color="#CCCCCC"> if you are</font><font color="#E5E5E5"> looking for</font>

531
00:36:48,730 --> 00:36:55,780
a reliable or elegant solution I think

532
00:36:53,100 --> 00:36:58,029
<font color="#E5E5E5">static binary instrumentation is not</font>

533
00:36:55,780 --> 00:37:03,520
your choice but it works<font color="#E5E5E5"> and high</font>

534
00:36:58,030 --> 00:37:06,640
<font color="#E5E5E5">performance and benefit from the static</font>

535
00:37:03,520 --> 00:37:11,080
binary instrumentation<font color="#E5E5E5"> and the faster</font>

536
00:37:06,640 --> 00:37:14,319
can be improved so code coverage is<font color="#E5E5E5"> not</font>

537
00:37:11,080 --> 00:37:18,000
only the thing that you can<font color="#E5E5E5"> feed back so</font>

538
00:37:14,320 --> 00:37:22,930
you can also<font color="#CCCCCC"> feed back the data or</font>

539
00:37:18,000 --> 00:37:26,020
memory<font color="#E5E5E5"> SS or stack tip or anything you</font>

540
00:37:22,930 --> 00:37:28,450
want and<font color="#E5E5E5"> the static binary</font>

541
00:37:26,020 --> 00:37:31,930
instrumentation is not only for<font color="#E5E5E5"> fussing</font>

542
00:37:28,450 --> 00:37:37,240
<font color="#E5E5E5">it is also applicable on packet</font>

543
00:37:31,930 --> 00:37:40,299
detection or<font color="#E5E5E5"> execution tracing and I</font>

544
00:37:37,240 --> 00:37:43,180
will release the source code<font color="#E5E5E5"> as soon as</font>

545
00:37:40,300 --> 00:37:46,300
possible if there is no any other

546
00:37:43,180 --> 00:37:48,879
concern and the static binary

547
00:37:46,300 --> 00:37:52,840
<font color="#E5E5E5">instrumentation part can</font><font color="#CCCCCC"> be produced in</font>

548
00:37:48,880 --> 00:37:55,810
<font color="#E5E5E5">many purpose</font><font color="#CCCCCC"> and I hope it can benefit</font>

549
00:37:52,840 --> 00:37:58,600
to someone<font color="#E5E5E5"> or cause something from here</font>

550
00:37:55,810 --> 00:38:02,350
and<font color="#E5E5E5"> especially</font>

551
00:37:58,600 --> 00:38:13,029
there is still<font color="#E5E5E5"> many attack vector and</font>

552
00:38:02,350 --> 00:38:15,460
they did<font color="#E5E5E5"> not</font><font color="#CCCCCC"> test and and I have to say</font>

553
00:38:13,030 --> 00:38:18,850
thank<font color="#E5E5E5"> you for the</font><font color="#CCCCCC"> airfare we never</font>

554
00:38:15,460 --> 00:38:20,470
<font color="#CCCCCC">project and some people here and expects</font>

555
00:38:18,850 --> 00:38:23,770
<font color="#CCCCCC">away for</font><font color="#E5E5E5"> the blue hat conference team</font>

556
00:38:20,470 --> 00:38:28,029
and here is my contact information<font color="#CCCCCC"> and</font>

557
00:38:23,770 --> 00:38:30,990
if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the question</font><font color="#CCCCCC"> you can message</font>

558
00:38:28,030 --> 00:38:30,990
me directly

559
00:38:32,520 --> 00:38:35,719
[Applause]

560
00:38:36,830 --> 00:38:39,340
[Music]

