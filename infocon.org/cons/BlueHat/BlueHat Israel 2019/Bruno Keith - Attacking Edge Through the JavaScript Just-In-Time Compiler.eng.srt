1
00:00:00,000 --> 00:00:02,729
[Music]

2
00:00:12,220 --> 00:00:16,100
<font color="#CCCCCC">thank you very</font><font color="#E5E5E5"> much for</font><font color="#CCCCCC"> coming to my</font>

3
00:00:14,240 --> 00:00:19,520
<font color="#E5E5E5">talk which</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> attacking edge</font><font color="#CCCCCC"> from</font>

4
00:00:16,100 --> 00:00:21,500
<font color="#E5E5E5">the</font><font color="#CCCCCC"> JavaScript compiler so just a</font><font color="#E5E5E5"> quick</font>

5
00:00:19,520 --> 00:00:25,130
words about<font color="#E5E5E5"> me</font><font color="#CCCCCC"> I got</font><font color="#E5E5E5"> started security</font>

6
00:00:21,500 --> 00:00:28,100
<font color="#E5E5E5">three years</font><font color="#CCCCCC"> ago now by paying CTF</font><font color="#E5E5E5"> HD</font>

7
00:00:25,130 --> 00:00:31,038
<font color="#E5E5E5">upon repeat team and I quit</font><font color="#CCCCCC"> my job last</font>

8
00:00:28,100 --> 00:00:32,960
year<font color="#E5E5E5"> to do VR</font><font color="#CCCCCC"> full-time I've mostly been</font>

9
00:00:31,039 --> 00:00:35,690
doing<font color="#CCCCCC"> JavaScript engines focusing on JIT</font>

10
00:00:32,960 --> 00:00:38,420
compilers for<font color="#E5E5E5"> all the engines chakra was</font>

11
00:00:35,690 --> 00:00:41,300
my main target up to a few<font color="#E5E5E5"> months now</font>

12
00:00:38,420 --> 00:00:44,149
<font color="#E5E5E5">and this is my</font><font color="#CCCCCC"> twitter handle if you</font>

13
00:00:41,300 --> 00:00:46,129
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> are intend to risk everything</font>

14
00:00:44,149 --> 00:00:48,560
like the slides and the<font color="#E5E5E5"> exploit code</font>

15
00:00:46,130 --> 00:00:52,399
within<font color="#E5E5E5"> a week or so so</font><font color="#CCCCCC"> i'll</font><font color="#E5E5E5"> probably</font>

16
00:00:48,560 --> 00:00:54,290
publish it on<font color="#E5E5E5"> twitter so the agenda for</font>

17
00:00:52,399 --> 00:00:56,030
today<font color="#E5E5E5"> I try to make the talk accessible</font>

18
00:00:54,290 --> 00:00:57,320
to anyone those that do not<font color="#E5E5E5"> have</font><font color="#CCCCCC"> any</font>

19
00:00:56,030 --> 00:00:59,600
<font color="#CCCCCC">kind of</font><font color="#E5E5E5"> experience with JavaScript</font>

20
00:00:57,320 --> 00:01:03,320
engines and those would<font color="#E5E5E5"> you so we'll do</font>

21
00:00:59,600 --> 00:01:05,570
a quick intro<font color="#CCCCCC"> of what</font><font color="#E5E5E5"> chakra call some</font>

22
00:01:03,320 --> 00:01:07,430
<font color="#E5E5E5">primary</font><font color="#CCCCCC"> about javascript engines</font><font color="#E5E5E5"> and</font>

23
00:01:05,570 --> 00:01:09,580
some of the internals basics<font color="#E5E5E5"> and then</font>

24
00:01:07,430 --> 00:01:12,800
we'll go into just-in-time compilation

25
00:01:09,580 --> 00:01:15,440
and the problematic<font color="#E5E5E5"> of you know just an</font>

26
00:01:12,800 --> 00:01:17,630
incorporation for<font color="#E5E5E5"> JavaScript and then</font>

27
00:01:15,440 --> 00:01:19,880
<font color="#E5E5E5">I'll talk specifically about the</font><font color="#CCCCCC"> JIT</font>

28
00:01:17,630 --> 00:01:23,179
compiler<font color="#E5E5E5"> that's inside chakra and we'll</font>

29
00:01:19,880 --> 00:01:26,360
finish by<font color="#E5E5E5"> working through unexploited I</font>

30
00:01:23,180 --> 00:01:28,640
<font color="#E5E5E5">submitted to a</font><font color="#CCCCCC"> masazi</font><font color="#E5E5E5"> last year so</font>

31
00:01:26,360 --> 00:01:30,170
quickly<font color="#E5E5E5"> what's chakra</font><font color="#CCCCCC"> Co so you</font><font color="#E5E5E5"> probably</font>

32
00:01:28,640 --> 00:01:32,750
know edge is the default browser on

33
00:01:30,170 --> 00:01:34,640
Windows 10 now<font color="#CCCCCC"> chakra is the</font><font color="#E5E5E5"> name of the</font>

34
00:01:32,750 --> 00:01:37,189
<font color="#E5E5E5">JavaScript engine that powers Microsoft</font>

35
00:01:34,640 --> 00:01:39,590
edge and basically chakra<font color="#CCCCCC"> Co is the open</font>

36
00:01:37,189 --> 00:01:42,350
source version of chakra<font color="#E5E5E5"> which as far as</font>

37
00:01:39,590 --> 00:01:44,360
<font color="#E5E5E5">I know is basically</font><font color="#CCCCCC"> 95% of the thing</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> a</font>

38
00:01:42,350 --> 00:01:46,908
few things such as<font color="#CCCCCC"> chrome</font><font color="#E5E5E5"> API edge</font>

39
00:01:44,360 --> 00:01:49,340
bindings and chakra<font color="#CCCCCC"> Co is available in</font>

40
00:01:46,909 --> 00:01:53,869
github<font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> just like look at the</font>

41
00:01:49,340 --> 00:01:55,759
code is written mainly<font color="#E5E5E5"> in C++</font><font color="#CCCCCC"> and</font>

42
00:01:53,869 --> 00:01:58,939
yeah<font color="#E5E5E5"> that's about it</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> to say</font>

43
00:01:55,759 --> 00:02:01,520
about so a quick primer about<font color="#E5E5E5"> JavaScript</font>

44
00:01:58,939 --> 00:02:04,850
engines<font color="#E5E5E5"> so that everyone can be on the</font>

45
00:02:01,520 --> 00:02:06,798
same<font color="#E5E5E5"> page so these days what makes up</font><font color="#CCCCCC"> a</font>

46
00:02:04,850 --> 00:02:08,570
<font color="#CCCCCC">JavaScript engine you have</font><font color="#E5E5E5"> kind of this</font>

47
00:02:06,799 --> 00:02:11,269
five main components<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you will see</font>

48
00:02:08,570 --> 00:02:14,540
in the four major engines or Chrome

49
00:02:11,269 --> 00:02:16,010
Safari<font color="#E5E5E5"> Firefox and edge so the first</font>

50
00:02:14,540 --> 00:02:18,859
thing you have<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> the parser</font>

51
00:02:16,010 --> 00:02:20,388
it's the entry part<font color="#CCCCCC"> of the engine you</font>

52
00:02:18,860 --> 00:02:22,669
basically fitted the source code<font color="#CCCCCC"> it</font>

53
00:02:20,389 --> 00:02:24,370
<font color="#E5E5E5">passes the thing produce an abstract</font>

54
00:02:22,669 --> 00:02:27,970
syntax tree

55
00:02:24,370 --> 00:02:30,519
and<font color="#E5E5E5"> produces custom byte code</font><font color="#CCCCCC"> that</font>

56
00:02:27,970 --> 00:02:32,409
custom byte code which is specific<font color="#CCCCCC"> to</font>

57
00:02:30,519 --> 00:02:33,849
<font color="#CCCCCC">each engine is</font><font color="#E5E5E5"> then fed</font><font color="#CCCCCC"> to the</font>

58
00:02:32,409 --> 00:02:36,840
interpreter which is basically a virtual

59
00:02:33,849 --> 00:02:40,298
<font color="#CCCCCC">machine that</font><font color="#E5E5E5"> will execute that byte code</font>

60
00:02:36,840 --> 00:02:42,099
that relies on what I call the<font color="#CCCCCC"> runtime</font>

61
00:02:40,299 --> 00:02:44,620
<font color="#CCCCCC">which basically provides</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the basic</font>

62
00:02:42,099 --> 00:02:47,859
data<font color="#E5E5E5"> structures implements the</font><font color="#CCCCCC"> built in</font>

63
00:02:44,620 --> 00:02:49,269
functions of JavaScript<font color="#CCCCCC"> etc</font><font color="#E5E5E5"> you of</font>

64
00:02:47,860 --> 00:02:52,360
course<font color="#E5E5E5"> have a garbage collector because</font>

65
00:02:49,269 --> 00:02:54,700
you don't have to free memory and do

66
00:02:52,360 --> 00:02:58,060
memory management in JavaScript<font color="#E5E5E5"> and you</font>

67
00:02:54,700 --> 00:03:01,660
<font color="#E5E5E5">might have one</font><font color="#CCCCCC"> or many JIT compilers</font><font color="#E5E5E5"> so</font>

68
00:02:58,060 --> 00:03:06,400
<font color="#CCCCCC">this varies for each engines but at</font>

69
00:03:01,660 --> 00:03:08,470
least you<font color="#E5E5E5"> you have one these days so so</font>

70
00:03:06,400 --> 00:03:10,709
now quickly<font color="#E5E5E5"> some internals of chakra</font>

71
00:03:08,470 --> 00:03:14,230
code that<font color="#E5E5E5"> we'll need throughout the talk</font>

72
00:03:10,709 --> 00:03:16,480
<font color="#CCCCCC">so</font><font color="#E5E5E5"> in all JavaScript engine these days</font>

73
00:03:14,230 --> 00:03:17,798
<font color="#E5E5E5">basically everything that that you that</font>

74
00:03:16,480 --> 00:03:19,358
you have<font color="#CCCCCC"> in your JavaScript code</font><font color="#E5E5E5"> is</font>

75
00:03:17,799 --> 00:03:22,390
internally represented as something

76
00:03:19,359 --> 00:03:23,920
<font color="#E5E5E5">called a</font><font color="#CCCCCC"> JS value in chakra every value</font>

77
00:03:22,390 --> 00:03:26,470
<font color="#E5E5E5">basically has the</font><font color="#CCCCCC"> same type</font><font color="#E5E5E5"> which is</font>

78
00:03:23,920 --> 00:03:30,280
just like a void pointer<font color="#E5E5E5"> which is called</font>

79
00:03:26,470 --> 00:03:31,720
<font color="#CCCCCC">the</font><font color="#E5E5E5"> vow chakra uses a trick that</font><font color="#CCCCCC"> you</font>

80
00:03:30,280 --> 00:03:33,819
find also<font color="#E5E5E5"> in other engines which is</font>

81
00:03:31,720 --> 00:03:35,950
basically<font color="#CCCCCC"> none boxing it's a trick where</font>

82
00:03:33,819 --> 00:03:37,599
<font color="#CCCCCC">you basically in 8 bytes you can encode</font>

83
00:03:35,950 --> 00:03:40,869
some type some kind<font color="#E5E5E5"> of type information</font>

84
00:03:37,599 --> 00:03:42,700
<font color="#E5E5E5">as well as the as the value itself so</font>

85
00:03:40,870 --> 00:03:45,129
how<font color="#CCCCCC"> that looks like is basically</font><font color="#E5E5E5"> in</font>

86
00:03:42,700 --> 00:03:47,918
<font color="#E5E5E5">chakra if you take the integer X 4 1 4 1</font>

87
00:03:45,129 --> 00:03:50,138
4<font color="#CCCCCC"> & 4</font><font color="#E5E5E5"> 1 it basically it is represented</font>

88
00:03:47,919 --> 00:03:52,930
internally as the thing you have on<font color="#CCCCCC"> the</font>

89
00:03:50,139 --> 00:03:55,720
right<font color="#E5E5E5"> which is 4 1 4 1 4 1 which the 48</font>

90
00:03:52,930 --> 00:03:57,099
bits set and if you take<font color="#E5E5E5"> a double which</font>

91
00:03:55,720 --> 00:04:00,010
has the same hex at the small

92
00:03:57,099 --> 00:04:02,379
<font color="#CCCCCC">representation you have you</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> the</font>

93
00:04:00,010 --> 00:04:05,138
<font color="#CCCCCC">same thing for 1 4 1 4 1 but</font><font color="#E5E5E5"> exhort with</font>

94
00:04:02,379 --> 00:04:07,899
the<font color="#E5E5E5"> fffc so basically they</font><font color="#CCCCCC"> use the fact</font>

95
00:04:05,139 --> 00:04:10,269
<font color="#CCCCCC">that on X 64 the other</font><font color="#E5E5E5"> 17 bits are</font>

96
00:04:07,900 --> 00:04:11,560
cleared for user<font color="#CCCCCC"> space addresses</font><font color="#E5E5E5"> to to</font>

97
00:04:10,269 --> 00:04:14,139
encode<font color="#CCCCCC"> some kind of type information</font>

98
00:04:11,560 --> 00:04:16,180
<font color="#E5E5E5">there and what that</font><font color="#CCCCCC"> means</font><font color="#E5E5E5"> is that if</font>

99
00:04:14,139 --> 00:04:17,859
none of those bits are set<font color="#CCCCCC"> you're</font>

100
00:04:16,180 --> 00:04:19,299
<font color="#E5E5E5">basically dealing with a valid pointer</font>

101
00:04:17,858 --> 00:04:20,858
and<font color="#CCCCCC"> dereference</font>

102
00:04:19,298 --> 00:04:23,109
dereferencing that pointer will

103
00:04:20,858 --> 00:04:26,888
basically lead you to the<font color="#CCCCCC"> actual object</font>

104
00:04:23,110 --> 00:04:28,810
<font color="#E5E5E5">which will contain more</font><font color="#CCCCCC"> information so</font>

105
00:04:26,889 --> 00:04:31,840
those objects

106
00:04:28,810 --> 00:04:33,710
<font color="#E5E5E5">commonly refer to</font><font color="#CCCCCC"> as J subjects in all</font>

107
00:04:31,840 --> 00:04:35,390
the major engines

108
00:04:33,710 --> 00:04:37,370
talk about<font color="#E5E5E5"> them</font><font color="#CCCCCC"> now so javascript</font>

109
00:04:35,390 --> 00:04:38,690
<font color="#E5E5E5">objects</font><font color="#CCCCCC"> are basically a dictionary so</font>

110
00:04:37,370 --> 00:04:40,550
it's a collision of<font color="#E5E5E5"> collection of</font>

111
00:04:38,690 --> 00:04:43,070
<font color="#CCCCCC">key-value</font><font color="#E5E5E5"> pairs that are called</font>

112
00:04:40,550 --> 00:04:45,470
properties the interesting to note is

113
00:04:43,070 --> 00:04:47,930
<font color="#CCCCCC">that</font><font color="#E5E5E5"> each object does</font><font color="#CCCCCC"> not maintain its</font>

114
00:04:45,470 --> 00:04:49,640
own map of property names to property

115
00:04:47,930 --> 00:04:52,790
<font color="#CCCCCC">values</font><font color="#E5E5E5"> and this is something</font><font color="#CCCCCC"> that all</font>

116
00:04:49,640 --> 00:04:54,500
<font color="#E5E5E5">J's engines do these days</font><font color="#CCCCCC"> the object</font>

117
00:04:52,790 --> 00:04:57,890
will only maintain the property values

118
00:04:54,500 --> 00:04:59,600
<font color="#E5E5E5">and as basically a pointer</font><font color="#CCCCCC"> to an object</font>

119
00:04:57,890 --> 00:05:01,400
which will basically describe that

120
00:04:59,600 --> 00:05:04,580
object layout<font color="#E5E5E5"> so in chakra is called the</font>

121
00:05:01,400 --> 00:05:06,919
type and it<font color="#CCCCCC"> will ask for two nice things</font>

122
00:05:04,580 --> 00:05:08,630
the first<font color="#E5E5E5"> one is you</font><font color="#CCCCCC"> save space</font><font color="#E5E5E5"> because</font>

123
00:05:06,920 --> 00:05:10,310
every object of the same type basically

124
00:05:08,630 --> 00:05:12,830
you know<font color="#E5E5E5"> you're only</font><font color="#CCCCCC"> allocated up</font>

125
00:05:10,310 --> 00:05:14,180
allocate the type once and you<font color="#E5E5E5"> have all</font>

126
00:05:12,830 --> 00:05:17,270
the objects<font color="#E5E5E5"> pointing to the same type</font>

127
00:05:14,180 --> 00:05:19,670
and he<font color="#CCCCCC"> also allows for</font><font color="#E5E5E5"> optimization such</font>

128
00:05:17,270 --> 00:05:21,099
as inline caching<font color="#E5E5E5"> and we'll talk more on</font>

129
00:05:19,670 --> 00:05:24,590
<font color="#E5E5E5">that later</font>

130
00:05:21,100 --> 00:05:27,020
so object layouts and chakra so you have

131
00:05:24,590 --> 00:05:29,479
<font color="#CCCCCC">two two objects a</font><font color="#E5E5E5"> arts basically this is</font>

132
00:05:27,020 --> 00:05:30,650
the<font color="#E5E5E5"> most default one</font><font color="#CCCCCC"> I realized this</font>

133
00:05:29,480 --> 00:05:32,060
morning<font color="#CCCCCC"> that the code might be a bit</font>

134
00:05:30,650 --> 00:05:33,500
small for<font color="#E5E5E5"> the ones at the back so I hope</font>

135
00:05:32,060 --> 00:05:34,910
you'll be<font color="#E5E5E5"> able to follow along</font><font color="#CCCCCC"> so</font>

136
00:05:33,500 --> 00:05:39,050
basically here I declare an empty object

137
00:05:34,910 --> 00:05:42,050
and set<font color="#CCCCCC"> two property on it</font><font color="#E5E5E5"> x and y those</font>

138
00:05:39,050 --> 00:05:44,000
are integers X 4 1<font color="#E5E5E5"> 4 1 4 1 and X 4 2 4 2</font>

139
00:05:42,050 --> 00:05:46,010
<font color="#CCCCCC">4 2 and if</font><font color="#E5E5E5"> you look in memory this</font><font color="#CCCCCC"> is</font>

140
00:05:44,000 --> 00:05:48,470
the layout<font color="#E5E5E5"> that you'll have you</font>

141
00:05:46,010 --> 00:05:49,940
basically have the<font color="#CCCCCC"> v table pointer</font><font color="#E5E5E5"> the</font>

142
00:05:48,470 --> 00:05:51,710
type pointer<font color="#E5E5E5"> which is what</font><font color="#CCCCCC"> i talked</font>

143
00:05:49,940 --> 00:05:53,390
<font color="#CCCCCC">about</font><font color="#E5E5E5"> previously and you</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> have</font>

144
00:05:51,710 --> 00:05:55,340
this<font color="#CCCCCC"> ox Lutz pointer and if you</font>

145
00:05:53,390 --> 00:05:56,930
<font color="#CCCCCC">dereference that pointer is basically</font>

146
00:05:55,340 --> 00:05:59,210
where you will find<font color="#E5E5E5"> your property values</font>

147
00:05:56,930 --> 00:06:00,950
in memory so it's basically a pointer to

148
00:05:59,210 --> 00:06:02,870
<font color="#CCCCCC">a contiguous</font><font color="#E5E5E5"> memory region where you</font>

149
00:06:00,950 --> 00:06:05,570
will only<font color="#E5E5E5"> have</font><font color="#CCCCCC"> the property values and</font>

150
00:06:02,870 --> 00:06:07,580
not the<font color="#E5E5E5"> property names</font><font color="#CCCCCC"> so if like here</font>

151
00:06:05,570 --> 00:06:10,909
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> like it points to</font><font color="#CCCCCC"> to</font>

152
00:06:07,580 --> 00:06:12,830
our<font color="#E5E5E5"> properties we also have a another</font>

153
00:06:10,910 --> 00:06:15,680
layout<font color="#E5E5E5"> that's used</font><font color="#CCCCCC"> throughout chakra and</font>

154
00:06:12,830 --> 00:06:17,390
it's also a common optimization<font color="#E5E5E5"> so here</font>

155
00:06:15,680 --> 00:06:18,740
<font color="#CCCCCC">I declare an object but</font><font color="#E5E5E5"> I declare the</font>

156
00:06:17,390 --> 00:06:21,200
properties<font color="#CCCCCC"> directly in it so it's a</font>

157
00:06:18,740 --> 00:06:23,330
scalar object and here they use a layout

158
00:06:21,200 --> 00:06:25,190
<font color="#CCCCCC">that they call object</font><font color="#E5E5E5"> header</font><font color="#CCCCCC"> inlined</font>

159
00:06:23,330 --> 00:06:27,469
<font color="#E5E5E5">and basically what that means is they</font>

160
00:06:25,190 --> 00:06:29,120
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> choose the extra pointer to</font><font color="#E5E5E5"> store</font>

161
00:06:27,470 --> 00:06:35,270
the property values<font color="#E5E5E5"> the story directly</font>

162
00:06:29,120 --> 00:06:37,190
<font color="#CCCCCC">inline</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the object itself so how</font>

163
00:06:35,270 --> 00:06:39,080
property<font color="#CCCCCC"> access basically works</font><font color="#E5E5E5"> well as</font>

164
00:06:37,190 --> 00:06:40,430
I said all the chakra objects<font color="#E5E5E5"> will</font>

165
00:06:39,080 --> 00:06:42,979
basically have something called<font color="#E5E5E5"> the type</font>

166
00:06:40,430 --> 00:06:44,380
and when the<font color="#CCCCCC"> runtime has to deal with</font><font color="#E5E5E5"> a</font>

167
00:06:42,980 --> 00:06:46,180
code<font color="#E5E5E5"> that</font>

168
00:06:44,380 --> 00:06:48,760
certain<font color="#CCCCCC"> property so here I'm setting</font>

169
00:06:46,180 --> 00:06:49,600
property<font color="#CCCCCC"> X on an object and</font><font color="#E5E5E5"> just</font>

170
00:06:48,760 --> 00:06:52,180
printing it

171
00:06:49,600 --> 00:06:54,400
well the runtime will basically call a

172
00:06:52,180 --> 00:06:56,350
class method on the type saying get me

173
00:06:54,400 --> 00:06:58,539
<font color="#CCCCCC">that property for</font><font color="#E5E5E5"> that certain property</font>

174
00:06:56,350 --> 00:07:00,280
name so internally it's called the

175
00:06:58,540 --> 00:07:02,560
<font color="#E5E5E5">property ID if you want to look in the</font>

176
00:07:00,280 --> 00:07:06,369
code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that type is</font><font color="#E5E5E5"> basically able to</font>

177
00:07:02,560 --> 00:07:07,810
say<font color="#E5E5E5"> a property ID is that this certain</font>

178
00:07:06,370 --> 00:07:09,970
index<font color="#E5E5E5"> and we all return the thing so</font>

179
00:07:07,810 --> 00:07:13,000
here if we query<font color="#E5E5E5"> the type it will return</font>

180
00:07:09,970 --> 00:07:17,770
<font color="#E5E5E5">ox</font><font color="#CCCCCC"> lots zero because that's</font><font color="#E5E5E5"> where a dot</font>

181
00:07:13,000 --> 00:07:19,210
X will be so that's<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it for the</font>

182
00:07:17,770 --> 00:07:20,919
intervals that<font color="#CCCCCC"> we'll need there's a lot</font>

183
00:07:19,210 --> 00:07:22,510
more<font color="#E5E5E5"> there's more to talk about</font><font color="#CCCCCC"> of</font>

184
00:07:20,920 --> 00:07:24,040
<font color="#CCCCCC">course but I</font><font color="#E5E5E5"> don't have time to spend</font>

185
00:07:22,510 --> 00:07:26,800
too<font color="#CCCCCC"> much but that's</font><font color="#E5E5E5"> all we'll need going</font>

186
00:07:24,040 --> 00:07:28,630
<font color="#CCCCCC">forward so now we'll go into</font><font color="#E5E5E5"> the core of</font>

187
00:07:26,800 --> 00:07:30,250
the<font color="#E5E5E5"> subject which</font><font color="#CCCCCC"> is a Java Script JIT</font>

188
00:07:28,630 --> 00:07:32,500
compilation<font color="#E5E5E5"> and especially like</font><font color="#CCCCCC"> the</font>

189
00:07:30,250 --> 00:07:36,250
problem<font color="#CCCCCC"> associated with it for</font>

190
00:07:32,500 --> 00:07:38,590
<font color="#E5E5E5">JavaScript so basically what is</font><font color="#CCCCCC"> the goal</font>

191
00:07:36,250 --> 00:07:40,660
of JIT compilation<font color="#E5E5E5"> is it's basically to</font>

192
00:07:38,590 --> 00:07:43,719
generate highly optimized machine code

193
00:07:40,660 --> 00:07:45,880
<font color="#E5E5E5">the upside of it of course is that your</font>

194
00:07:43,720 --> 00:07:47,620
code runs like way faster<font color="#CCCCCC"> than when it</font>

195
00:07:45,880 --> 00:07:48,880
runs in<font color="#E5E5E5"> the interpreter but you have two</font>

196
00:07:47,620 --> 00:07:50,410
<font color="#E5E5E5">problems that you have to deal with</font><font color="#CCCCCC"> the</font>

197
00:07:48,880 --> 00:07:52,270
<font color="#E5E5E5">first one is</font><font color="#CCCCCC"> higher start of time</font>

198
00:07:50,410 --> 00:07:54,330
because you<font color="#CCCCCC"> don't want your webpage</font><font color="#E5E5E5"> to</font>

199
00:07:52,270 --> 00:07:56,380
take like you know<font color="#CCCCCC"> 10 seconds</font><font color="#E5E5E5"> to load</font>

200
00:07:54,330 --> 00:07:58,090
and you also have no type information

201
00:07:56,380 --> 00:07:59,500
<font color="#CCCCCC">javascript doesn't</font><font color="#E5E5E5"> have type into</font>

202
00:07:58,090 --> 00:08:01,690
operation<font color="#E5E5E5"> so we have to deal with that</font>

203
00:07:59,500 --> 00:08:03,880
somehow<font color="#CCCCCC"> and I'll try</font><font color="#E5E5E5"> to shed some light</font>

204
00:08:01,690 --> 00:08:05,469
on that later on<font color="#E5E5E5"> so in practice what you</font>

205
00:08:03,880 --> 00:08:06,969
have<font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically your JavaScript code</font>

206
00:08:05,470 --> 00:08:08,890
will start running<font color="#E5E5E5"> in the interpreter</font>

207
00:08:06,970 --> 00:08:11,740
<font color="#E5E5E5">and if something gets called repeatedly</font>

208
00:08:08,890 --> 00:08:13,659
<font color="#E5E5E5">it will then be scheduled to be compiled</font>

209
00:08:11,740 --> 00:08:19,600
<font color="#E5E5E5">and be compared to machine code</font><font color="#CCCCCC"> and then</font>

210
00:08:13,660 --> 00:08:21,820
<font color="#CCCCCC">your run</font><font color="#E5E5E5"> actual machine code so I try</font><font color="#CCCCCC"> to</font>

211
00:08:19,600 --> 00:08:23,770
be to have a lot<font color="#CCCCCC"> of examples so this is</font>

212
00:08:21,820 --> 00:08:25,990
the first<font color="#E5E5E5"> one we'll look at which is</font>

213
00:08:23,770 --> 00:08:27,609
<font color="#CCCCCC">edition so I have a function that</font>

214
00:08:25,990 --> 00:08:29,560
basically<font color="#E5E5E5"> takes two parameter X and Y</font>

215
00:08:27,610 --> 00:08:31,870
and returned the addition of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two and</font>

216
00:08:29,560 --> 00:08:33,750
you've probably<font color="#E5E5E5"> all seen some of the</font>

217
00:08:31,870 --> 00:08:36,789
memes about<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> edition being</font>

218
00:08:33,750 --> 00:08:38,440
quite obscure and<font color="#E5E5E5"> behaving weirdly and</font>

219
00:08:36,789 --> 00:08:40,750
if you look at the standard that<font color="#E5E5E5"> defines</font>

220
00:08:38,440 --> 00:08:42,729
the JavaScript<font color="#E5E5E5"> edition this is basically</font>

221
00:08:40,750 --> 00:08:45,640
what<font color="#E5E5E5"> you have so you don't have to read</font>

222
00:08:42,729 --> 00:08:48,280
everything but<font color="#E5E5E5"> like</font><font color="#CCCCCC"> something as simple</font>

223
00:08:45,640 --> 00:08:49,900
as<font color="#E5E5E5"> the addition like as all these steps</font>

224
00:08:48,280 --> 00:08:52,510
<font color="#E5E5E5">that you have to take if you want</font><font color="#CCCCCC"> to</font>

225
00:08:49,900 --> 00:08:55,209
<font color="#E5E5E5">implement it</font><font color="#CCCCCC"> so now the question</font><font color="#E5E5E5"> is do</font>

226
00:08:52,510 --> 00:08:57,430
we<font color="#E5E5E5"> really want to generate machine code</font>

227
00:08:55,210 --> 00:08:58,209
<font color="#CCCCCC">that does that</font><font color="#E5E5E5"> well the answer</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> no</font>

228
00:08:57,430 --> 00:08:59,498
because this<font color="#E5E5E5"> is</font>

229
00:08:58,209 --> 00:09:01,959
basically what you already have in<font color="#CCCCCC"> the</font>

230
00:08:59,499 --> 00:09:03,550
interpreter so if you were to have<font color="#E5E5E5"> any</font>

231
00:09:01,959 --> 00:09:06,339
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of performance</font><font color="#E5E5E5"> gain it would be</font>

232
00:09:03,550 --> 00:09:07,889
pretty<font color="#E5E5E5"> marginal so so we need to be</font>

233
00:09:06,339 --> 00:09:11,619
smarter than<font color="#E5E5E5"> that</font>

234
00:09:07,889 --> 00:09:13,290
so the truth is if if you have<font color="#CCCCCC"> a</font>

235
00:09:11,619 --> 00:09:15,459
function called addition like that

236
00:09:13,290 --> 00:09:17,410
<font color="#E5E5E5">realistically like modern likely you're</font>

237
00:09:15,459 --> 00:09:20,559
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> only call it with like integers</font>

238
00:09:17,410 --> 00:09:22,990
<font color="#E5E5E5">like the and that's kind of what the JIT</font>

239
00:09:20,559 --> 00:09:24,490
compiler will rely on so here assuming<font color="#E5E5E5"> I</font>

240
00:09:22,990 --> 00:09:26,139
only<font color="#E5E5E5"> called the function addition with</font>

241
00:09:24,490 --> 00:09:28,179
integers<font color="#CCCCCC"> I probably want something</font>

242
00:09:26,139 --> 00:09:29,769
that's as close<font color="#E5E5E5"> as the assembly code</font>

243
00:09:28,179 --> 00:09:31,449
that I have here<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is basically two</font>

244
00:09:29,769 --> 00:09:33,040
instructions<font color="#CCCCCC"> just like you know add the</font>

245
00:09:31,449 --> 00:09:35,740
two registers that<font color="#CCCCCC"> hold the</font><font color="#E5E5E5"> parameter</font>

246
00:09:33,040 --> 00:09:37,059
values<font color="#E5E5E5"> and just</font><font color="#CCCCCC"> written but</font><font color="#E5E5E5"> we don't</font>

247
00:09:35,740 --> 00:09:38,259
have<font color="#CCCCCC"> type</font><font color="#E5E5E5"> information right we don't</font>

248
00:09:37,059 --> 00:09:39,730
<font color="#E5E5E5">know</font><font color="#CCCCCC"> that those</font><font color="#E5E5E5"> things are going to be</font>

249
00:09:38,259 --> 00:09:41,619
integer which<font color="#CCCCCC"> is like the main problem</font>

250
00:09:39,730 --> 00:09:45,790
<font color="#E5E5E5">of JavaScript come just-in-time</font>

251
00:09:41,619 --> 00:09:47,230
compilation<font color="#E5E5E5"> so the way we the JIT</font>

252
00:09:45,790 --> 00:09:48,459
compilers basically deal with<font color="#CCCCCC"> that is</font>

253
00:09:47,230 --> 00:09:50,439
<font color="#CCCCCC">that while we are running</font><font color="#E5E5E5"> in the</font>

254
00:09:48,459 --> 00:09:52,329
interpreter we will collect profile

255
00:09:50,439 --> 00:09:54,579
<font color="#CCCCCC">information on the type of parameters</font>

256
00:09:52,329 --> 00:09:57,910
<font color="#E5E5E5">and we will generate optimized code</font>

257
00:09:54,579 --> 00:10:01,599
based on that and so more on<font color="#E5E5E5"> that later</font>

258
00:09:57,910 --> 00:10:03,759
<font color="#CCCCCC">I have another oh yes</font><font color="#E5E5E5"> sorry so so here I</font>

259
00:10:01,600 --> 00:10:07,589
I<font color="#CCCCCC"> called the</font><font color="#E5E5E5"> function repeatedly</font><font color="#CCCCCC"> no loop</font>

260
00:10:03,759 --> 00:10:10,119
I is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be an integer</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> thousand</font>

261
00:10:07,589 --> 00:10:12,040
<font color="#E5E5E5">three three seven is also an integer</font><font color="#CCCCCC"> and</font>

262
00:10:10,119 --> 00:10:13,329
every time we<font color="#E5E5E5"> call that function</font><font color="#CCCCCC"> with</font>

263
00:10:12,040 --> 00:10:15,849
the interpreter<font color="#E5E5E5"> collects type</font>

264
00:10:13,329 --> 00:10:17,618
information<font color="#E5E5E5"> saying or X is an integer Y</font>

265
00:10:15,850 --> 00:10:19,689
is an integer<font color="#CCCCCC"> and</font><font color="#E5E5E5"> every time we run the</font>

266
00:10:17,619 --> 00:10:21,160
loop we call that up to the point where

267
00:10:19,689 --> 00:10:23,139
<font color="#E5E5E5">we'll actually say oh this thing has</font>

268
00:10:21,160 --> 00:10:25,839
been called a lot<font color="#E5E5E5"> let's let's</font><font color="#CCCCCC"> JIT</font>

269
00:10:23,139 --> 00:10:28,360
compile it<font color="#E5E5E5"> so the JIT compiler will</font>

270
00:10:25,839 --> 00:10:29,889
basically make<font color="#CCCCCC"> the assumption that we've</font>

271
00:10:28,360 --> 00:10:32,049
only<font color="#E5E5E5"> seen integer parameter for that</font>

272
00:10:29,889 --> 00:10:33,879
<font color="#E5E5E5">function</font><font color="#CCCCCC"> so more</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> likely the</font>

273
00:10:32,049 --> 00:10:36,970
parameters will continue to be of the

274
00:10:33,879 --> 00:10:38,559
same<font color="#CCCCCC"> type</font><font color="#E5E5E5"> and the idea is that the JIT</font>

275
00:10:36,970 --> 00:10:40,209
compiler will check the type of the

276
00:10:38,559 --> 00:10:41,860
parameters at<font color="#CCCCCC"> the beginning to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font>

277
00:10:40,209 --> 00:10:44,529
that it's what<font color="#E5E5E5"> we assume there will be</font>

278
00:10:41,860 --> 00:10:46,389
and the code will<font color="#CCCCCC"> be generated based</font><font color="#E5E5E5"> on</font>

279
00:10:44,529 --> 00:10:48,459
that assumption<font color="#E5E5E5"> which is why it's called</font>

280
00:10:46,389 --> 00:10:51,569
speculative<font color="#E5E5E5"> compilation because</font><font color="#CCCCCC"> we</font>

281
00:10:48,459 --> 00:10:54,969
speculate on<font color="#E5E5E5"> the type of the parameters</font>

282
00:10:51,569 --> 00:10:56,349
so I have another<font color="#E5E5E5"> example</font><font color="#CCCCCC"> here I have</font><font color="#E5E5E5"> a</font>

283
00:10:54,970 --> 00:10:59,139
function<font color="#CCCCCC"> called get X</font>

284
00:10:56,350 --> 00:11:02,170
pretty<font color="#E5E5E5"> simple it takes one parameter and</font>

285
00:10:59,139 --> 00:11:03,309
returns property<font color="#E5E5E5"> X on the thing so more</font>

286
00:11:02,170 --> 00:11:04,520
than<font color="#E5E5E5"> likely if you have this function</font>

287
00:11:03,309 --> 00:11:06,439
you expect to only give it

288
00:11:04,520 --> 00:11:08,420
<font color="#CCCCCC">objects and here</font><font color="#E5E5E5"> I call it in a loop</font>

289
00:11:06,440 --> 00:11:11,420
<font color="#E5E5E5">repeatedly with a scanner object which</font>

290
00:11:08,420 --> 00:11:13,699
<font color="#CCCCCC">only has property</font><font color="#E5E5E5"> X and the key is I</font>

291
00:11:11,420 --> 00:11:15,860
only call it with<font color="#E5E5E5"> the same scanner</font>

292
00:11:13,700 --> 00:11:18,350
object every time so the thing will add

293
00:11:15,860 --> 00:11:20,510
the same layout<font color="#E5E5E5"> in memory but object</font>

294
00:11:18,350 --> 00:11:21,680
<font color="#E5E5E5">look object lookup is a bit complex</font>

295
00:11:20,510 --> 00:11:22,760
right you have to go through<font color="#E5E5E5"> the types</font>

296
00:11:21,680 --> 00:11:24,349
<font color="#E5E5E5">you have to create the type to know</font>

297
00:11:22,760 --> 00:11:26,210
<font color="#E5E5E5">where the property lies and you don't</font>

298
00:11:24,350 --> 00:11:27,920
want<font color="#CCCCCC"> to compile down that whole logic</font>

299
00:11:26,210 --> 00:11:29,120
because then you don't<font color="#E5E5E5"> gain anything</font>

300
00:11:27,920 --> 00:11:33,170
it's basically<font color="#E5E5E5"> code that's</font><font color="#CCCCCC"> already</font>

301
00:11:29,120 --> 00:11:35,060
implemented in the interpreter so here

302
00:11:33,170 --> 00:11:37,490
same thing<font color="#CCCCCC"> we will basically speculate</font>

303
00:11:35,060 --> 00:11:39,709
on<font color="#CCCCCC"> the type of</font><font color="#E5E5E5"> the parameter</font><font color="#CCCCCC"> assume that</font>

304
00:11:37,490 --> 00:11:42,200
if we've only<font color="#CCCCCC"> seen one particular type</font>

305
00:11:39,710 --> 00:11:44,240
then<font color="#E5E5E5"> we will generate code</font><font color="#CCCCCC"> for that</font>

306
00:11:42,200 --> 00:11:45,950
<font color="#CCCCCC">particular type</font><font color="#E5E5E5"> and then we'll be</font><font color="#CCCCCC"> able</font>

307
00:11:44,240 --> 00:11:48,380
<font color="#CCCCCC">to</font><font color="#E5E5E5"> use direct memory access and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

308
00:11:45,950 --> 00:11:50,330
what's<font color="#E5E5E5"> called inline caching</font><font color="#CCCCCC"> I haven't</font>

309
00:11:48,380 --> 00:11:54,410
<font color="#E5E5E5">like will see that in details later</font><font color="#CCCCCC"> on</font>

310
00:11:50,330 --> 00:11:55,970
and if if this if the code gets an

311
00:11:54,410 --> 00:11:57,410
object of a different type<font color="#E5E5E5"> when it's jet</font>

312
00:11:55,970 --> 00:11:59,720
compiled then<font color="#CCCCCC"> we'll basically</font><font color="#E5E5E5"> have to</font>

313
00:11:57,410 --> 00:12:01,459
fall back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> interpreter</font><font color="#CCCCCC"> because the</font>

314
00:11:59,720 --> 00:12:04,100
code won't be valid<font color="#CCCCCC"> for</font><font color="#E5E5E5"> all the types of</font>

315
00:12:01,460 --> 00:12:06,020
<font color="#E5E5E5">objects so that takes us to</font><font color="#CCCCCC"> two key</font>

316
00:12:04,100 --> 00:12:07,940
concepts<font color="#CCCCCC"> that I use in read compilation</font>

317
00:12:06,020 --> 00:12:09,949
the first one is<font color="#CCCCCC"> so-called slow path so</font>

318
00:12:07,940 --> 00:12:12,050
basically as I said speculative

319
00:12:09,950 --> 00:12:14,360
<font color="#CCCCCC">compilation will make assumptions those</font>

320
00:12:12,050 --> 00:12:16,969
assumptions needs to be checked in<font color="#E5E5E5"> the</font>

321
00:12:14,360 --> 00:12:18,080
code and if something does not hold<font color="#E5E5E5"> you</font>

322
00:12:16,970 --> 00:12:19,520
might have to go<font color="#E5E5E5"> back into the</font>

323
00:12:18,080 --> 00:12:21,500
interpreter<font color="#E5E5E5"> so that's true for addition</font>

324
00:12:19,520 --> 00:12:23,150
right like you know<font color="#E5E5E5"> if we generate</font><font color="#CCCCCC"> JIT</font>

325
00:12:21,500 --> 00:12:24,770
code for addition of two integers<font color="#CCCCCC"> and</font>

326
00:12:23,150 --> 00:12:25,520
<font color="#E5E5E5">then we have like two strings then we</font>

327
00:12:24,770 --> 00:12:27,230
need to do<font color="#E5E5E5"> something completely</font>

328
00:12:25,520 --> 00:12:29,990
<font color="#CCCCCC">different so we have to fall back</font><font color="#E5E5E5"> into</font>

329
00:12:27,230 --> 00:12:31,190
the interpreter<font color="#E5E5E5"> via a slow path</font><font color="#CCCCCC"> the bad</font>

330
00:12:29,990 --> 00:12:33,530
news for that<font color="#E5E5E5"> is you get</font><font color="#CCCCCC"> a performance</font>

331
00:12:31,190 --> 00:12:35,420
<font color="#E5E5E5">hit because</font><font color="#CCCCCC"> you you you exit the</font><font color="#E5E5E5"> JIT</font>

332
00:12:33,530 --> 00:12:37,790
code<font color="#E5E5E5"> the good news is that it was</font>

333
00:12:35,420 --> 00:12:39,740
<font color="#CCCCCC">actually intended so for that</font><font color="#E5E5E5"> particular</font>

334
00:12:37,790 --> 00:12:41,360
operation<font color="#E5E5E5"> you you will go back</font><font color="#CCCCCC"> to an</font>

335
00:12:39,740 --> 00:12:45,500
interpreter which is much slower<font color="#E5E5E5"> but you</font>

336
00:12:41,360 --> 00:12:47,780
will still return<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a JIT function the</font>

337
00:12:45,500 --> 00:12:50,330
second key concept is is called bailout

338
00:12:47,780 --> 00:12:51,800
<font color="#E5E5E5">and basically sometimes if your</font>

339
00:12:50,330 --> 00:12:53,300
assumption does not hold while the slow

340
00:12:51,800 --> 00:12:55,130
path is not going to cut<font color="#E5E5E5"> it</font><font color="#CCCCCC"> because your</font>

341
00:12:53,300 --> 00:12:57,410
<font color="#E5E5E5">code is complete garbage so for example</font>

342
00:12:55,130 --> 00:12:59,570
for<font color="#E5E5E5"> my function</font><font color="#CCCCCC"> get X</font><font color="#E5E5E5"> an object is a</font>

343
00:12:57,410 --> 00:13:01,640
pointer what if I give it an integer

344
00:12:59,570 --> 00:13:02,990
<font color="#CCCCCC">well integer</font><font color="#E5E5E5"> are tagged it's never going</font>

345
00:13:01,640 --> 00:13:04,699
to<font color="#E5E5E5"> be a</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> pointer so if we don't</font>

346
00:13:02,990 --> 00:13:06,230
<font color="#E5E5E5">bail out</font><font color="#CCCCCC"> we'll just most likely</font><font color="#E5E5E5"> end</font><font color="#CCCCCC"> up</font>

347
00:13:04,700 --> 00:13:08,870
<font color="#E5E5E5">crashing at some point in the</font><font color="#CCCCCC"> JIT code</font>

348
00:13:06,230 --> 00:13:10,760
so<font color="#E5E5E5"> you don't want that and then in that</font>

349
00:13:08,870 --> 00:13:12,860
case<font color="#E5E5E5"> like the old execution of the</font>

350
00:13:10,760 --> 00:13:15,319
function<font color="#E5E5E5"> has to basically resume into</font>

351
00:13:12,860 --> 00:13:17,400
the<font color="#E5E5E5"> interpreter the the downside of</font><font color="#CCCCCC"> that</font>

352
00:13:15,320 --> 00:13:18,930
<font color="#E5E5E5">is now it's a big performance</font><font color="#CCCCCC"> hit</font>

353
00:13:17,400 --> 00:13:22,500
because<font color="#E5E5E5"> bailing out is a non-trivial</font>

354
00:13:18,930 --> 00:13:24,449
process and the<font color="#E5E5E5"> only upside</font><font color="#CCCCCC"> I can find</font>

355
00:13:22,500 --> 00:13:25,680
is basically<font color="#E5E5E5"> you probably like if you're</font>

356
00:13:24,450 --> 00:13:27,240
<font color="#E5E5E5">not familiar probably never realized</font>

357
00:13:25,680 --> 00:13:29,670
<font color="#E5E5E5">that your engine was actually</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> that</font>

358
00:13:27,240 --> 00:13:31,800
<font color="#E5E5E5">which is a good thing</font><font color="#CCCCCC"> so it actually</font>

359
00:13:29,670 --> 00:13:32,660
<font color="#E5E5E5">works which is like it's pretty insane</font>

360
00:13:31,800 --> 00:13:36,329
to me

361
00:13:32,660 --> 00:13:38,189
so to<font color="#E5E5E5"> summarize JIT compilation of</font>

362
00:13:36,330 --> 00:13:39,390
JavaScript you<font color="#E5E5E5"> you're relying on the</font>

363
00:13:38,190 --> 00:13:40,860
profile<font color="#CCCCCC"> information</font><font color="#E5E5E5"> that you collect</font>

364
00:13:39,390 --> 00:13:43,350
while you're running<font color="#CCCCCC"> into the intern in</font>

365
00:13:40,860 --> 00:13:45,570
the interpreter<font color="#E5E5E5"> the the optimized code</font>

366
00:13:43,350 --> 00:13:48,930
is<font color="#CCCCCC"> generated based on</font><font color="#E5E5E5"> basically that</font>

367
00:13:45,570 --> 00:13:51,029
information and the key takeaway is<font color="#CCCCCC"> that</font>

368
00:13:48,930 --> 00:13:52,560
your JIT code has to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> responsible</font><font color="#CCCCCC"> for</font>

369
00:13:51,029 --> 00:13:54,120
checking<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the assumptions that</font>

370
00:13:52,560 --> 00:13:55,619
you're going<font color="#E5E5E5"> to make actually all true</font>

371
00:13:54,120 --> 00:13:58,080
otherwise<font color="#CCCCCC"> you will have bad surprises</font>

372
00:13:55,620 --> 00:14:00,210
<font color="#CCCCCC">and so basically problems whether it's</font>

373
00:13:58,080 --> 00:14:02,730
<font color="#E5E5E5">security issues or</font><font color="#CCCCCC"> just X random crush</font>

374
00:14:00,210 --> 00:14:04,980
crush will basically<font color="#E5E5E5"> arise when do</font><font color="#CCCCCC"> gene</font>

375
00:14:02,730 --> 00:14:06,990
<font color="#CCCCCC">assume something</font><font color="#E5E5E5"> that that is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> true</font>

376
00:14:04,980 --> 00:14:09,330
<font color="#E5E5E5">and that's the</font><font color="#CCCCCC"> old gamer</font><font color="#E5E5E5"> security</font>

377
00:14:06,990 --> 00:14:16,050
researchers looking for for<font color="#E5E5E5"> back in</font>

378
00:14:09,330 --> 00:14:18,050
<font color="#CCCCCC">those jet engines so now we'll be</font><font color="#E5E5E5"> will</font>

379
00:14:16,050 --> 00:14:22,650
get to talk about chakras<font color="#E5E5E5"> JIT compiler</font>

380
00:14:18,050 --> 00:14:24,180
<font color="#E5E5E5">specifically so so the chakra</font><font color="#CCCCCC"> cheat</font>

381
00:14:22,650 --> 00:14:26,430
pipeline now it looks like<font color="#CCCCCC"> roughly so</font>

382
00:14:24,180 --> 00:14:28,290
nothing crazy you have<font color="#E5E5E5"> an interpreter</font><font color="#CCCCCC"> it</font>

383
00:14:26,430 --> 00:14:30,479
keeps<font color="#E5E5E5"> track of how many times function</font>

384
00:14:28,290 --> 00:14:32,189
<font color="#E5E5E5">has been called and</font><font color="#CCCCCC"> passed a</font><font color="#E5E5E5"> certain</font>

385
00:14:30,480 --> 00:14:33,930
threshold<font color="#E5E5E5"> it</font><font color="#CCCCCC"> will just schedule the</font>

386
00:14:32,190 --> 00:14:35,940
thing for JIT compilation so what that

387
00:14:33,930 --> 00:14:38,069
means is that each function object has

388
00:14:35,940 --> 00:14:39,930
an entry point it will swap<font color="#E5E5E5"> that entry</font>

389
00:14:38,070 --> 00:14:42,690
<font color="#CCCCCC">point for</font><font color="#E5E5E5"> to a func that basically will</font>

390
00:14:39,930 --> 00:14:44,729
schedule JIT compilation<font color="#CCCCCC"> the interesting</font>

391
00:14:42,690 --> 00:14:47,040
note is<font color="#CCCCCC"> that compilation happens</font><font color="#E5E5E5"> out of</font>

392
00:14:44,730 --> 00:14:49,380
<font color="#E5E5E5">process in edge basically they move the</font>

393
00:14:47,040 --> 00:14:50,910
old JIT compiler to its own process so

394
00:14:49,380 --> 00:14:53,490
that the content process can have

395
00:14:50,910 --> 00:14:57,660
<font color="#E5E5E5">arbitrary code guard which prevents</font>

396
00:14:53,490 --> 00:14:59,520
mapping<font color="#E5E5E5"> read write execute memory</font><font color="#CCCCCC"> and</font>

397
00:14:57,660 --> 00:15:01,050
basically when<font color="#E5E5E5"> code generation is done</font>

398
00:14:59,520 --> 00:15:03,420
the JIT server will<font color="#CCCCCC"> basically like</font>

399
00:15:01,050 --> 00:15:04,829
notify the content process and you will

400
00:15:03,420 --> 00:15:06,000
change<font color="#E5E5E5"> the entry point to</font><font color="#CCCCCC"> the native</font>

401
00:15:04,830 --> 00:15:07,440
code address<font color="#E5E5E5"> so the next time the</font>

402
00:15:06,000 --> 00:15:12,660
<font color="#CCCCCC">function is called you will be</font><font color="#E5E5E5"> actually</font>

403
00:15:07,440 --> 00:15:16,440
running<font color="#E5E5E5"> the cheat code</font><font color="#CCCCCC"> chakras only what</font>

404
00:15:12,660 --> 00:15:18,510
one JIT compiler which is two-tiered<font color="#CCCCCC"> so</font>

405
00:15:16,440 --> 00:15:19,830
the two names are simple JIT<font color="#E5E5E5"> and forge</font>

406
00:15:18,510 --> 00:15:21,870
it for the purpose<font color="#E5E5E5"> of this talk will</font>

407
00:15:19,830 --> 00:15:24,029
only<font color="#E5E5E5"> focus on</font><font color="#CCCCCC"> forge</font><font color="#E5E5E5"> it because like</font>

408
00:15:21,870 --> 00:15:26,850
simple JIT<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not super interesting from</font>

409
00:15:24,029 --> 00:15:28,320
a<font color="#E5E5E5"> security researcher point of view</font><font color="#CCCCCC"> it's</font>

410
00:15:26,850 --> 00:15:30,550
pretty standard<font color="#CCCCCC"> it operates</font><font color="#E5E5E5"> on a control</font>

411
00:15:28,320 --> 00:15:33,580
<font color="#E5E5E5">flow graph and crystal</font><font color="#CCCCCC"> maya which is</font>

412
00:15:30,550 --> 00:15:35,050
right infront functions by code<font color="#CCCCCC"> the</font>

413
00:15:33,580 --> 00:15:36,730
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> bit here is that the</font><font color="#CCCCCC"> byte</font>

414
00:15:35,050 --> 00:15:38,319
<font color="#CCCCCC">code</font><font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> as a format that's</font>

415
00:15:36,730 --> 00:15:40,720
optimized for<font color="#E5E5E5"> the interpreter use case</font>

416
00:15:38,320 --> 00:15:43,510
which<font color="#E5E5E5"> might not be the best the best</font>

417
00:15:40,720 --> 00:15:45,010
<font color="#E5E5E5">thing for the JIT compiler so it like</font>

418
00:15:43,510 --> 00:15:46,899
you will find in other<font color="#E5E5E5"> engines that you</font>

419
00:15:45,010 --> 00:15:49,390
might<font color="#E5E5E5"> have a basically or transpiling</font>

420
00:15:46,899 --> 00:15:51,579
face from like<font color="#E5E5E5"> the interpreter bytecode</font>

421
00:15:49,390 --> 00:15:53,589
to<font color="#CCCCCC"> an IR that's most suited for a JIT</font>

422
00:15:51,579 --> 00:15:55,479
compiler and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> made steps</font><font color="#E5E5E5"> of</font>

423
00:15:53,589 --> 00:15:57,790
computation are roughly so I have the

424
00:15:55,480 --> 00:15:59,950
list here<font color="#CCCCCC"> you basically</font><font color="#E5E5E5"> build the IATA</font>

425
00:15:57,790 --> 00:16:02,890
<font color="#CCCCCC">sees ir build the face then you do the</font>

426
00:15:59,950 --> 00:16:04,630
<font color="#E5E5E5">inline phase</font><font color="#CCCCCC"> it always</font><font color="#E5E5E5"> happens quite</font>

427
00:16:02,890 --> 00:16:06,130
early in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> process because inlining</font>

428
00:16:04,630 --> 00:16:07,390
allows for<font color="#E5E5E5"> further</font><font color="#CCCCCC"> optimization</font><font color="#E5E5E5"> so if</font>

429
00:16:06,130 --> 00:16:09,550
you look at<font color="#E5E5E5"> other jet engines</font><font color="#CCCCCC"> you</font>

430
00:16:07,390 --> 00:16:12,970
<font color="#E5E5E5">probably see that</font><font color="#CCCCCC"> happens super early in</font>

431
00:16:09,550 --> 00:16:14,290
<font color="#E5E5E5">the process then the build phase which</font>

432
00:16:12,970 --> 00:16:16,779
basically builds the control flow graph

433
00:16:14,290 --> 00:16:18,699
<font color="#CCCCCC">and then we have the global face so it's</font>

434
00:16:16,779 --> 00:16:20,230
<font color="#CCCCCC">short for</font><font color="#E5E5E5"> global optimizer</font><font color="#CCCCCC"> it's where</font>

435
00:16:18,700 --> 00:16:22,510
most<font color="#E5E5E5"> of the magic happens</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what we'll</font>

436
00:16:20,230 --> 00:16:25,360
<font color="#E5E5E5">be focusing on</font><font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> have other</font>

437
00:16:22,510 --> 00:16:27,189
<font color="#E5E5E5">faces and other phases and which</font>

438
00:16:25,360 --> 00:16:29,529
basically<font color="#E5E5E5"> start to be machine dependent</font>

439
00:16:27,190 --> 00:16:31,360
up until the lower<font color="#CCCCCC"> phase everything is</font>

440
00:16:29,529 --> 00:16:35,100
done independently<font color="#CCCCCC"> of the architecture</font>

441
00:16:31,360 --> 00:16:37,510
we're dealing with<font color="#E5E5E5"> to some extent and</font>

442
00:16:35,100 --> 00:16:38,980
<font color="#CCCCCC">yeah as I said like the global</font><font color="#E5E5E5"> team</font><font color="#CCCCCC"> ISO</font>

443
00:16:37,510 --> 00:16:40,689
<font color="#E5E5E5">is what interests us the most if you're</font>

444
00:16:38,980 --> 00:16:42,250
going to<font color="#E5E5E5"> look for bug I've looked for</font>

445
00:16:40,690 --> 00:16:44,440
<font color="#E5E5E5">work more than likely that's what you</font>

446
00:16:42,250 --> 00:16:45,820
that's<font color="#CCCCCC"> what you've looked at</font><font color="#E5E5E5"> because</font>

447
00:16:44,440 --> 00:16:50,829
that's<font color="#E5E5E5"> where most of the bugs are</font><font color="#CCCCCC"> Sri</font>

448
00:16:45,820 --> 00:16:54,310
lying so I have some example once again

449
00:16:50,829 --> 00:16:55,660
<font color="#CCCCCC">I'm I do apologise for the back for the</font>

450
00:16:54,310 --> 00:16:58,660
back<font color="#CCCCCC"> of the room I hope</font><font color="#E5E5E5"> she'll be</font><font color="#CCCCCC"> able</font>

451
00:16:55,660 --> 00:16:59,890
<font color="#E5E5E5">to foul</font><font color="#CCCCCC"> so here</font><font color="#E5E5E5"> basically we'll see two</font>

452
00:16:58,660 --> 00:17:01,810
<font color="#CCCCCC">examples on the left I have two</font>

453
00:16:59,890 --> 00:17:03,069
JavaScript code<font color="#E5E5E5"> here I have a simple</font>

454
00:17:01,810 --> 00:17:05,379
<font color="#E5E5E5">addition function that we talked about</font>

455
00:17:03,070 --> 00:17:06,939
<font color="#E5E5E5">just</font><font color="#CCCCCC"> returns</font><font color="#E5E5E5"> the sum of the addition of</font>

456
00:17:05,380 --> 00:17:08,709
<font color="#E5E5E5">the</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> you give it</font><font color="#E5E5E5"> x and y</font>

457
00:17:06,939 --> 00:17:10,720
and the function is<font color="#E5E5E5"> called with integer</font>

458
00:17:08,709 --> 00:17:12,459
parameter and on the right we<font color="#CCCCCC"> have</font>

459
00:17:10,720 --> 00:17:13,839
basically what is<font color="#E5E5E5"> generated by the JIT</font>

460
00:17:12,459 --> 00:17:16,630
compiler with some kind<font color="#E5E5E5"> of high-level</font>

461
00:17:13,839 --> 00:17:18,159
assembly and I'll walk<font color="#CCCCCC"> through what is</font>

462
00:17:16,630 --> 00:17:19,510
generated<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> you know I can</font>

463
00:17:18,160 --> 00:17:23,530
highlight some<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> concepts I talked</font>

464
00:17:19,510 --> 00:17:25,000
<font color="#CCCCCC">about so here highlighted in red you</font>

465
00:17:23,530 --> 00:17:27,220
<font color="#CCCCCC">have the intermediate</font><font color="#E5E5E5"> representation of</font>

466
00:17:25,000 --> 00:17:31,000
the<font color="#E5E5E5"> of the instruction that we are</font>

467
00:17:27,220 --> 00:17:32,290
looking<font color="#CCCCCC"> at if you can if you cannot see</font>

468
00:17:31,000 --> 00:17:34,480
<font color="#CCCCCC">on the right the instructions basically</font>

469
00:17:32,290 --> 00:17:37,540
<font color="#E5E5E5">called add a which is basically you know</font>

470
00:17:34,480 --> 00:17:40,300
<font color="#E5E5E5">add those two things s2 and s3 which are</font>

471
00:17:37,540 --> 00:17:42,470
symbols<font color="#E5E5E5"> which basically represents the</font>

472
00:17:40,300 --> 00:17:44,149
<font color="#CCCCCC">parameters x</font><font color="#E5E5E5"> and y</font>

473
00:17:42,470 --> 00:17:46,010
and the addition<font color="#E5E5E5"> of that is put into s0</font>

474
00:17:44,150 --> 00:17:49,280
which is the special symbol for the

475
00:17:46,010 --> 00:17:51,679
return value and I don't<font color="#E5E5E5"> know if you can</font>

476
00:17:49,280 --> 00:17:53,360
see but<font color="#E5E5E5"> like the symbol of an annotation</font>

477
00:17:51,679 --> 00:17:55,400
between brackets<font color="#E5E5E5"> which is likely can be</font>

478
00:17:53,360 --> 00:17:57,110
<font color="#E5E5E5">tagged value integer and this is what</font>

479
00:17:55,400 --> 00:17:58,370
<font color="#E5E5E5">comes from the profiling</font><font color="#CCCCCC"> phase you know</font>

480
00:17:57,110 --> 00:18:01,219
this is the profiling<font color="#E5E5E5"> information</font><font color="#CCCCCC"> that</font>

481
00:17:58,370 --> 00:18:03,289
we<font color="#E5E5E5"> got</font><font color="#CCCCCC"> from the interpreter saying the</font>

482
00:18:01,220 --> 00:18:05,150
thing can be a<font color="#E5E5E5"> tag value and some kind</font>

483
00:18:03,289 --> 00:18:07,789
<font color="#E5E5E5">of hints that says like it should be an</font>

484
00:18:05,150 --> 00:18:09,350
integer<font color="#E5E5E5"> so the first thing that code</font>

485
00:18:07,789 --> 00:18:11,658
does in<font color="#E5E5E5"> terms of assembly it actually</font>

486
00:18:09,350 --> 00:18:13,850
checks<font color="#E5E5E5"> that x and y actually integers</font>

487
00:18:11,659 --> 00:18:15,860
<font color="#E5E5E5">the way</font><font color="#CCCCCC"> it does that</font><font color="#E5E5E5"> is that as I said</font>

488
00:18:13,850 --> 00:18:18,830
integers are represented<font color="#CCCCCC"> with the 48 bit</font>

489
00:18:15,860 --> 00:18:21,139
<font color="#E5E5E5">set so it will just shift the value to</font>

490
00:18:18,830 --> 00:18:23,120
the<font color="#E5E5E5"> right with a certain constant do a</font>

491
00:18:21,140 --> 00:18:24,770
binary or<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> and compare</font><font color="#CCCCCC"> that to</font>

492
00:18:23,120 --> 00:18:26,899
a<font color="#E5E5E5"> constant so it it's a cute</font>

493
00:18:24,770 --> 00:18:30,379
optimization to basically check the<font color="#CCCCCC"> the</font>

494
00:18:26,900 --> 00:18:33,860
two in<font color="#E5E5E5"> one with one one snippet of</font>

495
00:18:30,380 --> 00:18:35,330
assembly<font color="#CCCCCC"> and basically</font><font color="#E5E5E5"> that fails we can</font>

496
00:18:33,860 --> 00:18:37,549
<font color="#E5E5E5">see that we have some jumps to that</font>

497
00:18:35,330 --> 00:18:39,220
<font color="#CCCCCC">label for f---ing and on that table for</font>

498
00:18:37,549 --> 00:18:41,720
we basically see<font color="#CCCCCC"> that does a call</font>

499
00:18:39,220 --> 00:18:43,159
operation<font color="#CCCCCC"> at full and this</font><font color="#E5E5E5"> is the slow</font>

500
00:18:41,720 --> 00:18:44,480
path I was talking about<font color="#E5E5E5"> you know in</font>

501
00:18:43,159 --> 00:18:45,770
case<font color="#E5E5E5"> where nothing</font><font color="#CCCCCC"> which tagged integer</font>

502
00:18:44,480 --> 00:18:47,480
the code we generated is basically

503
00:18:45,770 --> 00:18:49,250
garbage<font color="#E5E5E5"> and not going to</font><font color="#CCCCCC"> be it's</font>

504
00:18:47,480 --> 00:18:51,470
basically<font color="#E5E5E5"> either going to be faulty</font><font color="#CCCCCC"> in</font>

505
00:18:49,250 --> 00:18:53,990
terms of semantics<font color="#E5E5E5"> or you know 14th also</font>

506
00:18:51,470 --> 00:18:55,280
if it will crash the process so here we

507
00:18:53,990 --> 00:18:56,690
have to go back into the interpreter<font color="#CCCCCC"> and</font>

508
00:18:55,280 --> 00:18:59,600
this is exactly<font color="#CCCCCC"> what we're looking at</font>

509
00:18:56,690 --> 00:19:00,559
<font color="#CCCCCC">now calling up at full we'll actually</font><font color="#E5E5E5"> go</font>

510
00:18:59,600 --> 00:19:01,969
back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the interpreter</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that</font>

511
00:19:00,559 --> 00:19:03,530
particular<font color="#CCCCCC"> thing but</font><font color="#E5E5E5"> we see that we</font>

512
00:19:01,970 --> 00:19:05,450
written<font color="#CCCCCC"> afterwards right like you know</font>

513
00:19:03,530 --> 00:19:07,850
so this<font color="#E5E5E5"> is what I was talking</font><font color="#CCCCCC"> about you</font>

514
00:19:05,450 --> 00:19:12,320
<font color="#E5E5E5">know slow path it's not ideal by still</font>

515
00:19:07,850 --> 00:19:13,820
still<font color="#CCCCCC"> okay and here highlighted I</font><font color="#E5E5E5"> had to</font>

516
00:19:12,320 --> 00:19:15,320
code in case the assumption<font color="#E5E5E5"> like the</font>

517
00:19:13,820 --> 00:19:16,399
<font color="#E5E5E5">assumption actually was true which is</font>

518
00:19:15,320 --> 00:19:17,960
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> two things were actually</font>

519
00:19:16,400 --> 00:19:19,610
integer and<font color="#E5E5E5"> then we can see that it's</font>

520
00:19:17,960 --> 00:19:22,850
pretty<font color="#CCCCCC"> straightforward just</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> like an</font>

521
00:19:19,610 --> 00:19:24,620
<font color="#CCCCCC">add operation in</font><font color="#E5E5E5"> X 64 put that into the</font>

522
00:19:22,850 --> 00:19:26,750
<font color="#E5E5E5">return register and we're basically done</font>

523
00:19:24,620 --> 00:19:29,239
so the interesting thing<font color="#CCCCCC"> just here is</font>

524
00:19:26,750 --> 00:19:31,490
<font color="#E5E5E5">basically if the check is successful</font>

525
00:19:29,240 --> 00:19:32,900
then we<font color="#E5E5E5"> basically only have like seven</font>

526
00:19:31,490 --> 00:19:34,970
to eight or<font color="#CCCCCC"> seven years structures that</font>

527
00:19:32,900 --> 00:19:36,350
are<font color="#E5E5E5"> that are being run so you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> from</font>

528
00:19:34,970 --> 00:19:38,419
<font color="#E5E5E5">the addition thing which is like you</font>

529
00:19:36,350 --> 00:19:39,350
<font color="#E5E5E5">know</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> high-level operations in the</font>

530
00:19:38,419 --> 00:19:41,090
standard<font color="#E5E5E5"> we actually have something</font>

531
00:19:39,350 --> 00:19:42,678
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like seven to eight assembly</font>

532
00:19:41,090 --> 00:19:45,189
<font color="#E5E5E5">instructions so so that's why it gets</font>

533
00:19:42,679 --> 00:19:48,080
<font color="#E5E5E5">super fast</font>

534
00:19:45,190 --> 00:19:49,760
<font color="#CCCCCC">now I have the same thing</font><font color="#E5E5E5"> but this time</font>

535
00:19:48,080 --> 00:19:52,370
<font color="#E5E5E5">with an object to illustrate</font><font color="#CCCCCC"> other</font>

536
00:19:49,760 --> 00:19:53,899
concepts I talked about<font color="#E5E5E5"> the function is</font>

537
00:19:52,370 --> 00:19:55,549
<font color="#E5E5E5">also an addition</font><font color="#CCCCCC"> function but this time</font>

538
00:19:53,899 --> 00:19:56,209
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of having two parameters you</font>

539
00:19:55,549 --> 00:19:58,010
only give it

540
00:19:56,210 --> 00:20:01,730
which is an object<font color="#CCCCCC"> and</font><font color="#E5E5E5"> dad's property</font>

541
00:19:58,010 --> 00:20:04,520
X&Y<font color="#E5E5E5"> and I call it repeatedly with an</font>

542
00:20:01,730 --> 00:20:06,410
<font color="#CCCCCC">object</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> those two properties</font><font color="#CCCCCC"> x</font>

543
00:20:04,520 --> 00:20:09,110
<font color="#E5E5E5">and y but the same layout this is the</font>

544
00:20:06,410 --> 00:20:11,720
important<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> so the interpreter will</font>

545
00:20:09,110 --> 00:20:14,629
basically profile<font color="#CCCCCC"> will have profile</font>

546
00:20:11,720 --> 00:20:16,430
information<font color="#E5E5E5"> that those the function was</font>

547
00:20:14,630 --> 00:20:18,110
called with only one type of object<font color="#CCCCCC"> and</font>

548
00:20:16,430 --> 00:20:20,300
will optimize based<font color="#E5E5E5"> on that</font><font color="#CCCCCC"> so we'll</font>

549
00:20:18,110 --> 00:20:22,820
look once again at<font color="#E5E5E5"> what was generated to</font>

550
00:20:20,300 --> 00:20:25,040
illustrate some of the concepts<font color="#E5E5E5"> so the</font>

551
00:20:22,820 --> 00:20:27,260
first thing we do is check<font color="#CCCCCC"> if we are</font>

552
00:20:25,040 --> 00:20:28,850
<font color="#E5E5E5">dealing</font><font color="#CCCCCC"> with with</font><font color="#E5E5E5"> a pointer</font><font color="#CCCCCC"> so once</font>

553
00:20:27,260 --> 00:20:30,680
again it's<font color="#E5E5E5"> pretty simple as I said a</font>

554
00:20:28,850 --> 00:20:32,840
pointer will have the the upper

555
00:20:30,680 --> 00:20:34,550
<font color="#E5E5E5">seventeen bits cleared</font><font color="#CCCCCC"> so the first</font>

556
00:20:32,840 --> 00:20:36,679
thing it does<font color="#E5E5E5"> it's it shifts the value</font>

557
00:20:34,550 --> 00:20:39,889
right by 48 checks that the thing is

558
00:20:36,680 --> 00:20:41,510
<font color="#CCCCCC">actually zero and if it's not then we</font>

559
00:20:39,890 --> 00:20:43,280
<font color="#E5E5E5">see</font><font color="#CCCCCC"> that we have a call</font><font color="#E5E5E5"> to something</font>

560
00:20:41,510 --> 00:20:45,680
called save all registers and<font color="#CCCCCC"> bailout</font>

561
00:20:43,280 --> 00:20:47,780
<font color="#E5E5E5">and that basically means</font><font color="#CCCCCC"> like I'm not</font>

562
00:20:45,680 --> 00:20:49,430
able to<font color="#E5E5E5"> end all that type</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> parameter</font>

563
00:20:47,780 --> 00:20:51,260
like this has<font color="#E5E5E5"> to go back into the</font>

564
00:20:49,430 --> 00:20:53,030
interpreter<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is like the really</font>

565
00:20:51,260 --> 00:20:54,620
<font color="#CCCCCC">really costly thing that you want</font><font color="#E5E5E5"> to</font>

566
00:20:53,030 --> 00:20:58,340
<font color="#CCCCCC">avoid if you like trying to write</font>

567
00:20:54,620 --> 00:21:00,260
performant JavaScript code then

568
00:20:58,340 --> 00:21:01,970
basically like another interesting<font color="#CCCCCC"> thing</font>

569
00:21:00,260 --> 00:21:05,060
to see if you're looking at chakra

570
00:21:01,970 --> 00:21:07,070
specifically<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> the annotation</font><font color="#E5E5E5"> was</font>

571
00:21:05,060 --> 00:21:09,409
the thing<font color="#E5E5E5"> likely can be a tag value with</font>

572
00:21:07,070 --> 00:21:10,939
hint<font color="#CCCCCC"> object</font><font color="#E5E5E5"> but since we actually now</font>

573
00:21:09,410 --> 00:21:12,920
check that<font color="#CCCCCC"> the thing was actually not</font><font color="#E5E5E5"> a</font>

574
00:21:10,940 --> 00:21:14,120
tag value<font color="#E5E5E5"> we can see that the annotation</font>

575
00:21:12,920 --> 00:21:16,400
has changed and<font color="#E5E5E5"> now</font><font color="#CCCCCC"> it's marked</font><font color="#E5E5E5"> as being</font>

576
00:21:14,120 --> 00:21:18,199
<font color="#E5E5E5">likely object so this illustrates the</font>

577
00:21:16,400 --> 00:21:20,660
concept<font color="#E5E5E5"> I will talk a bit more later</font><font color="#CCCCCC"> on</font>

578
00:21:18,200 --> 00:21:23,060
where basically<font color="#E5E5E5"> based on what we've run</font>

579
00:21:20,660 --> 00:21:24,800
so far we have updated type<font color="#E5E5E5"> information</font>

580
00:21:23,060 --> 00:21:26,330
which is<font color="#E5E5E5"> more refined here we know we</font>

581
00:21:24,800 --> 00:21:29,110
are dealing<font color="#E5E5E5"> with pointer</font><font color="#CCCCCC"> which is most</font>

582
00:21:26,330 --> 00:21:31,580
likely<font color="#E5E5E5"> a regular</font><font color="#CCCCCC"> javascript object and</font>

583
00:21:29,110 --> 00:21:33,110
here basically we<font color="#E5E5E5"> basically we have to</font>

584
00:21:31,580 --> 00:21:35,720
<font color="#E5E5E5">check</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the type we basically fetch</font>

585
00:21:33,110 --> 00:21:37,820
the type of the object<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> javascript</font>

586
00:21:35,720 --> 00:21:41,840
object and we check<font color="#CCCCCC"> that its value is</font>

587
00:21:37,820 --> 00:21:44,060
equal<font color="#CCCCCC"> to the one we profile here we have</font>

588
00:21:41,840 --> 00:21:46,189
<font color="#E5E5E5">another slow path as I said which is if</font>

589
00:21:44,060 --> 00:21:48,620
the type is<font color="#CCCCCC"> not the same maybe for</font><font color="#E5E5E5"> some</font>

590
00:21:46,190 --> 00:21:49,880
reason it still it still is equivalent

591
00:21:48,620 --> 00:21:51,260
in<font color="#CCCCCC"> terms of where the properties are</font>

592
00:21:49,880 --> 00:21:53,270
<font color="#CCCCCC">stored so we might have two different</font>

593
00:21:51,260 --> 00:21:55,400
<font color="#E5E5E5">type objects but property X's are</font><font color="#CCCCCC"> top</font>

594
00:21:53,270 --> 00:21:57,830
set<font color="#CCCCCC"> 0 pop two</font><font color="#E5E5E5"> eyes that upset</font><font color="#CCCCCC"> one in</font>

595
00:21:55,400 --> 00:22:00,110
which case we<font color="#E5E5E5"> can use the</font><font color="#CCCCCC"> jet code so we</font>

596
00:21:57,830 --> 00:22:02,270
basically try<font color="#CCCCCC"> to salvage</font><font color="#E5E5E5"> things instead</font>

597
00:22:00,110 --> 00:22:04,939
<font color="#E5E5E5">of painting out if we cannot reach as</font><font color="#CCCCCC"> VR</font>

598
00:22:02,270 --> 00:22:06,590
and<font color="#E5E5E5"> here we get to</font><font color="#CCCCCC"> the real</font><font color="#E5E5E5"> interesting</font>

599
00:22:04,940 --> 00:22:08,960
<font color="#CCCCCC">part which</font><font color="#E5E5E5"> is if the checks</font><font color="#CCCCCC"> were</font>

600
00:22:06,590 --> 00:22:09,830
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> successful</font><font color="#CCCCCC"> then we we know</font>

601
00:22:08,960 --> 00:22:11,480
<font color="#E5E5E5">precisely</font>

602
00:22:09,830 --> 00:22:13,610
property<font color="#CCCCCC"> excess Todd so here we have a</font>

603
00:22:11,480 --> 00:22:15,799
direct memory access to fetch property X

604
00:22:13,610 --> 00:22:20,178
so we<font color="#CCCCCC"> fetch from offset 16 which is</font>

605
00:22:15,799 --> 00:22:22,070
where the property<font color="#E5E5E5"> X will be and now</font>

606
00:22:20,179 --> 00:22:23,809
when we fetch all that<font color="#CCCCCC"> Y we see</font><font color="#E5E5E5"> that we</font>

607
00:22:22,070 --> 00:22:25,850
only<font color="#CCCCCC"> have</font><font color="#E5E5E5"> one assembly instruction which</font>

608
00:22:23,809 --> 00:22:27,260
<font color="#CCCCCC">is this time fetch from up set 24 of the</font>

609
00:22:25,850 --> 00:22:29,149
object which is where property<font color="#CCCCCC"> y will be</font>

610
00:22:27,260 --> 00:22:30,919
<font color="#E5E5E5">so the interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> here is</font><font color="#CCCCCC"> that</font>

611
00:22:29,149 --> 00:22:33,229
once<font color="#E5E5E5"> again if all the assumptions</font>

612
00:22:30,919 --> 00:22:34,850
<font color="#E5E5E5">actually held true then you don't</font>

613
00:22:33,230 --> 00:22:36,110
execute a lot of assembly instruction to

614
00:22:34,850 --> 00:22:38,149
actually check<font color="#CCCCCC"> that the thing is correct</font>

615
00:22:36,110 --> 00:22:39,620
<font color="#E5E5E5">and then you have</font><font color="#CCCCCC"> two memory</font><font color="#E5E5E5"> direct</font>

616
00:22:38,149 --> 00:22:42,168
memory access to fetch the object

617
00:22:39,620 --> 00:22:44,090
property itself<font color="#E5E5E5"> and also we can</font><font color="#CCCCCC"> also</font>

618
00:22:42,169 --> 00:22:46,639
note that for<font color="#CCCCCC"> the second property access</font>

619
00:22:44,090 --> 00:22:48,740
<font color="#CCCCCC">we don't run the checks again which is</font>

620
00:22:46,639 --> 00:22:50,899
pretty<font color="#E5E5E5"> smart right because we know that</font>

621
00:22:48,740 --> 00:22:52,399
in between the two<font color="#E5E5E5"> instructions the</font><font color="#CCCCCC"> type</font>

622
00:22:50,899 --> 00:22:53,689
shouldn't have changed<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we don't have</font>

623
00:22:52,399 --> 00:22:55,129
<font color="#E5E5E5">to recheck again</font><font color="#CCCCCC"> the other thing is</font>

624
00:22:53,690 --> 00:22:56,929
<font color="#CCCCCC">actually a pointer and that</font><font color="#E5E5E5"> this is of</font>

625
00:22:55,130 --> 00:22:58,940
the type repo file and I'll try to

626
00:22:56,929 --> 00:23:01,610
<font color="#CCCCCC">explain a</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> how basically</font><font color="#E5E5E5"> chakra still</font>

627
00:22:58,940 --> 00:23:03,559
does it<font color="#E5E5E5"> so most</font><font color="#CCCCCC"> of the magic</font><font color="#E5E5E5"> magic</font>

628
00:23:01,610 --> 00:23:06,408
happens in<font color="#E5E5E5"> the global optimizer it's a</font>

629
00:23:03,559 --> 00:23:08,360
free pass process on the CFG<font color="#E5E5E5"> one</font>

630
00:23:06,409 --> 00:23:10,039
backward pass one forward path<font color="#E5E5E5"> and</font>

631
00:23:08,360 --> 00:23:12,168
another backward pass which<font color="#E5E5E5"> is called</font>

632
00:23:10,039 --> 00:23:14,480
the<font color="#E5E5E5"> desktop as the</font><font color="#CCCCCC"> backward pass</font>

633
00:23:12,169 --> 00:23:15,830
algorithm is in<font color="#E5E5E5"> a backward pass dot CPP</font>

634
00:23:14,480 --> 00:23:18,260
if you want to<font color="#E5E5E5"> look at it it's about</font>

635
00:23:15,830 --> 00:23:20,090
<font color="#E5E5E5">nine thousand lines of</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and the</font>

636
00:23:18,260 --> 00:23:22,460
<font color="#E5E5E5">forward pass is in a bunch of files that</font>

637
00:23:20,090 --> 00:23:24,529
are prefixed with<font color="#E5E5E5"> glob opt and this</font><font color="#CCCCCC"> is</font>

638
00:23:22,460 --> 00:23:26,980
about<font color="#CCCCCC"> 30,000 lines</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> code so</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

639
00:23:24,529 --> 00:23:29,630
<font color="#CCCCCC">guess this is what we really</font><font color="#E5E5E5"> care about</font>

640
00:23:26,980 --> 00:23:32,269
and the entry point is in globs

641
00:23:29,630 --> 00:23:37,850
<font color="#E5E5E5">optimized if you want to to look at it</font>

642
00:23:32,269 --> 00:23:40,100
<font color="#CCCCCC">yourself so the backward</font><font color="#E5E5E5"> pass is not the</font>

643
00:23:37,850 --> 00:23:41,539
most<font color="#E5E5E5"> interesting for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> the algorithm in</font>

644
00:23:40,100 --> 00:23:43,519
essence is pretty simple<font color="#CCCCCC"> you go over</font>

645
00:23:41,539 --> 00:23:45,590
each block backwards which for each

646
00:23:43,519 --> 00:23:47,750
block you<font color="#E5E5E5"> go</font><font color="#CCCCCC"> with over inch instructions</font>

647
00:23:45,590 --> 00:23:49,340
backward information is gathered for

648
00:23:47,750 --> 00:23:50,929
each block<font color="#CCCCCC"> and every time you start</font>

649
00:23:49,340 --> 00:23:52,610
<font color="#E5E5E5">processing a new block you merge the</font>

650
00:23:50,929 --> 00:23:54,169
information of all the success of block

651
00:23:52,610 --> 00:23:56,149
<font color="#E5E5E5">that show that you've already processed</font>

652
00:23:54,169 --> 00:23:57,769
<font color="#E5E5E5">and it can</font><font color="#CCCCCC"> perform</font><font color="#E5E5E5"> some like simple</font>

653
00:23:56,149 --> 00:23:59,389
optimization like instruction rewriting

654
00:23:57,769 --> 00:24:00,919
<font color="#E5E5E5">and that sort of stuff is not like from</font>

655
00:23:59,389 --> 00:24:05,120
from security<font color="#E5E5E5"> standpoint</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not</font>

656
00:24:00,919 --> 00:24:06,830
important<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us and the forward pass so</font>

657
00:24:05,120 --> 00:24:08,389
I will<font color="#E5E5E5"> spend some</font><font color="#CCCCCC"> time on</font><font color="#E5E5E5"> that because</font>

658
00:24:06,830 --> 00:24:11,120
<font color="#E5E5E5">what we this is what</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> care</font>

659
00:24:08,389 --> 00:24:13,158
about<font color="#CCCCCC"> the algorithm is the reverse so</font>

660
00:24:11,120 --> 00:24:14,570
you go the each block<font color="#CCCCCC"> of the CFG forward</font>

661
00:24:13,159 --> 00:24:17,510
<font color="#CCCCCC">and for each block you</font><font color="#E5E5E5"> go over each</font>

662
00:24:14,570 --> 00:24:18,980
instruction forward and same<font color="#E5E5E5"> thing</font>

663
00:24:17,510 --> 00:24:20,299
data is gathered for each block and

664
00:24:18,980 --> 00:24:21,470
<font color="#CCCCCC">every time you start</font><font color="#E5E5E5"> processing a new</font>

665
00:24:20,299 --> 00:24:22,360
block you basically merge the

666
00:24:21,470 --> 00:24:23,680
information that you<font color="#CCCCCC"> have</font>

667
00:24:22,360 --> 00:24:25,929
from all the success of<font color="#CCCCCC"> luck so</font>

668
00:24:23,680 --> 00:24:27,220
sometimes you have<font color="#E5E5E5"> one one block but</font>

669
00:24:25,930 --> 00:24:29,800
sometimes you have multiples<font color="#E5E5E5"> who have to</font>

670
00:24:27,220 --> 00:24:31,360
you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to merge information and this</font>

671
00:24:29,800 --> 00:24:32,500
is what<font color="#E5E5E5"> basically will perform most of</font>

672
00:24:31,360 --> 00:24:35,740
<font color="#E5E5E5">the</font><font color="#CCCCCC"> magic that will lead to</font><font color="#E5E5E5"> really</font>

673
00:24:32,500 --> 00:24:36,990
<font color="#CCCCCC">optimized code</font><font color="#E5E5E5"> and here I have an</font>

674
00:24:35,740 --> 00:24:39,670
<font color="#E5E5E5">example that</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> walk you</font><font color="#CCCCCC"> through</font>

675
00:24:36,990 --> 00:24:42,100
<font color="#CCCCCC">it's really minimalist based</font><font color="#E5E5E5"> kind of to</font>

676
00:24:39,670 --> 00:24:43,630
give<font color="#E5E5E5"> you a feel of you know how things</font>

677
00:24:42,100 --> 00:24:45,639
are performed<font color="#E5E5E5"> in the forward pass if you</font>

678
00:24:43,630 --> 00:24:47,920
want to look at the code yourself<font color="#E5E5E5"> and</font>

679
00:24:45,640 --> 00:24:49,360
this<font color="#CCCCCC"> is also basically what you will see</font>

680
00:24:47,920 --> 00:24:52,300
in other engines to some extent as well

681
00:24:49,360 --> 00:24:54,280
<font color="#CCCCCC">so here</font><font color="#E5E5E5"> I have the same function</font><font color="#CCCCCC"> edition</font>

682
00:24:52,300 --> 00:24:55,720
with an<font color="#E5E5E5"> object and on the</font><font color="#CCCCCC"> right we have</font>

683
00:24:54,280 --> 00:24:57,399
the<font color="#CCCCCC"> intermediate representation of that</font>

684
00:24:55,720 --> 00:24:59,770
function which is basically<font color="#E5E5E5"> three</font>

685
00:24:57,400 --> 00:25:02,890
intermediate instructions to load fields

686
00:24:59,770 --> 00:25:05,710
<font color="#E5E5E5">so load property</font><font color="#CCCCCC"> X load property</font><font color="#E5E5E5"> Y and</font>

687
00:25:02,890 --> 00:25:07,180
add the two together<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> the</font>

688
00:25:05,710 --> 00:25:09,670
output right before we do the<font color="#E5E5E5"> forward</font>

689
00:25:07,180 --> 00:25:11,110
pass<font color="#E5E5E5"> and after the forward pass we have</font>

690
00:25:09,670 --> 00:25:13,090
this thing on<font color="#E5E5E5"> the right that's totally</font>

691
00:25:11,110 --> 00:25:15,040
unreadable<font color="#CCCCCC"> like took me like four months</font>

692
00:25:13,090 --> 00:25:17,020
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to decipher it</font><font color="#CCCCCC"> and it's</font>

693
00:25:15,040 --> 00:25:20,050
<font color="#CCCCCC">redacted</font><font color="#E5E5E5"> like it's actually even more</font>

694
00:25:17,020 --> 00:25:21,190
obscure<font color="#CCCCCC"> than not in reality</font><font color="#E5E5E5"> the thing</font>

695
00:25:20,050 --> 00:25:23,710
<font color="#CCCCCC">here I want</font><font color="#E5E5E5"> to show you is that</font>

696
00:25:21,190 --> 00:25:25,150
basically<font color="#CCCCCC"> for some reason</font><font color="#E5E5E5"> like the thing</font>

697
00:25:23,710 --> 00:25:26,710
has<font color="#E5E5E5"> been completely transformed and</font><font color="#CCCCCC"> we</font>

698
00:25:25,150 --> 00:25:27,940
have a lot more<font color="#E5E5E5"> of annotations going on</font>

699
00:25:26,710 --> 00:25:29,020
and stuff<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so like</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know a lot</font>

700
00:25:27,940 --> 00:25:31,720
of<font color="#E5E5E5"> things actually took place in the</font>

701
00:25:29,020 --> 00:25:35,500
forward pass<font color="#CCCCCC"> and the question is what</font>

702
00:25:31,720 --> 00:25:37,150
<font color="#E5E5E5">actually happened here so I can't afford</font>

703
00:25:35,500 --> 00:25:38,500
<font color="#E5E5E5">to try to highlight what happens so as I</font>

704
00:25:37,150 --> 00:25:40,690
said<font color="#E5E5E5"> you know the forward pass will go</font>

705
00:25:38,500 --> 00:25:42,160
over each instruction each<font color="#E5E5E5"> instruction</font>

706
00:25:40,690 --> 00:25:45,400
will basically go through<font color="#E5E5E5"> that function</font>

707
00:25:42,160 --> 00:25:46,960
which is<font color="#E5E5E5"> called opt instruction and opt</font>

708
00:25:45,400 --> 00:25:50,490
instruction will<font color="#CCCCCC"> basically call a whole</font>

709
00:25:46,960 --> 00:25:52,690
bunch of function like<font color="#E5E5E5"> 30 to 40</font><font color="#CCCCCC"> faculty</font>

710
00:25:50,490 --> 00:25:54,070
<font color="#E5E5E5">passing that instruction and all the</font>

711
00:25:52,690 --> 00:25:56,740
<font color="#CCCCCC">methods in the forward pass</font><font color="#E5E5E5"> are only</font>

712
00:25:54,070 --> 00:25:58,720
going to<font color="#CCCCCC"> deal</font><font color="#E5E5E5"> with like a subset or for</font>

713
00:25:56,740 --> 00:26:00,660
the<font color="#E5E5E5"> ir instruction that exists so you</font>

714
00:25:58,720 --> 00:26:02,530
have<font color="#E5E5E5"> switch statements everywhere</font><font color="#CCCCCC"> and</font>

715
00:26:00,660 --> 00:26:05,230
one of<font color="#E5E5E5"> those function is called</font>

716
00:26:02,530 --> 00:26:07,389
<font color="#E5E5E5">optimized tag checks and if we look at</font>

717
00:26:05,230 --> 00:26:09,340
<font color="#E5E5E5">the code then we'll see that we</font>

718
00:26:07,390 --> 00:26:11,260
basically<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a switch</font><font color="#E5E5E5"> statement</font><font color="#CCCCCC"> and we</font>

719
00:26:09,340 --> 00:26:12,760
actually<font color="#E5E5E5"> have a case</font><font color="#CCCCCC"> for when the</font><font color="#E5E5E5"> opcode</font>

720
00:26:11,260 --> 00:26:14,530
is<font color="#E5E5E5"> a load field which is what we're</font>

721
00:26:12,760 --> 00:26:16,720
dealing with<font color="#E5E5E5"> now</font><font color="#CCCCCC"> so like that function</font>

722
00:26:14,530 --> 00:26:19,350
actually<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> be able to do some things</font>

723
00:26:16,720 --> 00:26:21,400
on<font color="#E5E5E5"> that on that particular</font><font color="#CCCCCC"> instruction</font>

724
00:26:19,350 --> 00:26:22,570
so if we look further at the code

725
00:26:21,400 --> 00:26:24,460
there's a bunch of<font color="#E5E5E5"> things happening</font>

726
00:26:22,570 --> 00:26:25,990
first<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it retrieves</font><font color="#CCCCCC"> all the type</font>

727
00:26:24,460 --> 00:26:27,960
information<font color="#CCCCCC"> it has for</font><font color="#E5E5E5"> that particular</font>

728
00:26:25,990 --> 00:26:30,310
value<font color="#E5E5E5"> at the block we're dealing</font><font color="#CCCCCC"> with</font>

729
00:26:27,960 --> 00:26:32,320
and then<font color="#E5E5E5"> we can see</font><font color="#CCCCCC"> that highlighted on</font>

730
00:26:30,310 --> 00:26:34,550
on the right we have<font color="#E5E5E5"> a check an if</font>

731
00:26:32,320 --> 00:26:36,830
statement if value type can be<font color="#E5E5E5"> tagged</font>

732
00:26:34,550 --> 00:26:38,360
value and if this is true<font color="#E5E5E5"> then we</font>

733
00:26:36,830 --> 00:26:40,669
execute new code and the first time we

734
00:26:38,360 --> 00:26:43,070
run through<font color="#E5E5E5"> that thing it will actually</font>

735
00:26:40,670 --> 00:26:44,150
<font color="#E5E5E5">be true</font><font color="#CCCCCC"> because we we profiled</font><font color="#E5E5E5"> that the</font>

736
00:26:43,070 --> 00:26:46,669
<font color="#E5E5E5">thing can you know</font>

737
00:26:44,150 --> 00:26:48,800
it's most likely<font color="#E5E5E5"> an object by still can</font>

738
00:26:46,670 --> 00:26:52,790
be a<font color="#CCCCCC"> type value because we we don't</font><font color="#E5E5E5"> have</font>

739
00:26:48,800 --> 00:26:55,250
any certainty<font color="#E5E5E5"> at this stage so the check</font>

740
00:26:52,790 --> 00:26:56,750
is true and<font color="#E5E5E5"> basically execute do two</font>

741
00:26:55,250 --> 00:26:58,640
<font color="#E5E5E5">things which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the first one will</font>

742
00:26:56,750 --> 00:27:00,350
insert a new instruction<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> Baylon</font>

743
00:26:58,640 --> 00:27:01,790
not object this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what we've seen</font>

744
00:27:00,350 --> 00:27:02,929
before<font color="#E5E5E5"> the first check</font><font color="#CCCCCC"> that you saw at</font>

745
00:27:01,790 --> 00:27:04,340
<font color="#E5E5E5">the beginning where you know it checks</font>

746
00:27:02,930 --> 00:27:06,800
that<font color="#E5E5E5"> the thing is an object and if not</font>

747
00:27:04,340 --> 00:27:08,990
<font color="#CCCCCC">just completely</font><font color="#E5E5E5"> bails out and then we</font>

748
00:27:06,800 --> 00:27:10,700
update<font color="#CCCCCC"> the value type</font><font color="#E5E5E5"> because now since</font>

749
00:27:08,990 --> 00:27:12,560
<font color="#CCCCCC">we inserted a check to check that the</font>

750
00:27:10,700 --> 00:27:14,600
thing is actually<font color="#E5E5E5"> an object we know that</font>

751
00:27:12,560 --> 00:27:16,909
going<font color="#E5E5E5"> forward the thing is most likely</font>

752
00:27:14,600 --> 00:27:18,709
<font color="#E5E5E5">like it's</font><font color="#CCCCCC"> definitely a pointer so we</font>

753
00:27:16,910 --> 00:27:22,340
<font color="#E5E5E5">updating the thing it cannot be a tag</font>

754
00:27:18,710 --> 00:27:23,960
value<font color="#E5E5E5"> anymore and now the cool thing</font><font color="#CCCCCC"> is</font>

755
00:27:22,340 --> 00:27:25,730
<font color="#CCCCCC">that</font><font color="#E5E5E5"> when you process the second load</font>

756
00:27:23,960 --> 00:27:27,350
filled instruction you end up following

757
00:27:25,730 --> 00:27:29,090
<font color="#E5E5E5">the same code path but this time the</font>

758
00:27:27,350 --> 00:27:31,370
check will actually return false and

759
00:27:29,090 --> 00:27:32,659
this is to highlight<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fact that the</font>

760
00:27:31,370 --> 00:27:34,820
forward<font color="#CCCCCC"> pass basically every time it</font>

761
00:27:32,660 --> 00:27:37,280
deals with<font color="#E5E5E5"> an instruction all the</font>

762
00:27:34,820 --> 00:27:38,659
methods will be<font color="#CCCCCC"> either</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to refine</font>

763
00:27:37,280 --> 00:27:40,910
the type information<font color="#E5E5E5"> which will lead to</font>

764
00:27:38,660 --> 00:27:42,380
<font color="#CCCCCC">more optimization or in</font><font color="#E5E5E5"> some cases they</font>

765
00:27:40,910 --> 00:27:44,060
will have to loosen type<font color="#E5E5E5"> information</font>

766
00:27:42,380 --> 00:27:45,140
because<font color="#E5E5E5"> you know things can your jaw</font>

767
00:27:44,060 --> 00:27:46,399
<font color="#E5E5E5">receives the complex language you have</font>

768
00:27:45,140 --> 00:27:49,010
<font color="#CCCCCC">callbacks and</font><font color="#E5E5E5"> everything so you have to</font>

769
00:27:46,400 --> 00:27:51,290
be mindful of that so there's of course

770
00:27:49,010 --> 00:27:53,090
a<font color="#CCCCCC"> lot more</font><font color="#E5E5E5"> happening</font><font color="#CCCCCC"> my hope is that</font>

771
00:27:51,290 --> 00:27:55,010
<font color="#E5E5E5">this example</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of gives you gives you</font>

772
00:27:53,090 --> 00:27:57,050
a rough idea<font color="#E5E5E5"> of you know like how things</font>

773
00:27:55,010 --> 00:27:59,180
<font color="#E5E5E5">are done</font><font color="#CCCCCC"> you have to</font><font color="#E5E5E5"> keep in</font><font color="#CCCCCC"> mind that</font>

774
00:27:57,050 --> 00:28:00,470
it's like 30,000 lines of code so<font color="#CCCCCC"> you</font>

775
00:27:59,180 --> 00:28:02,960
know like there's a lot of methods<font color="#E5E5E5"> that</font>

776
00:28:00,470 --> 00:28:05,030
<font color="#E5E5E5">deal with only certain instruction the</font>

777
00:28:02,960 --> 00:28:08,030
load<font color="#E5E5E5"> field one</font><font color="#CCCCCC"> i alighted</font><font color="#E5E5E5"> is probably</font>

778
00:28:05,030 --> 00:28:09,970
one of<font color="#E5E5E5"> the simplest operation and yeah</font>

779
00:28:08,030 --> 00:28:12,470
it's to give a rough<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> basically and</font>

780
00:28:09,970 --> 00:28:14,090
I'll introduce two key concept<font color="#E5E5E5"> that I</font>

781
00:28:12,470 --> 00:28:15,970
use throughout the chakra JIT compiler

782
00:28:14,090 --> 00:28:18,889
to<font color="#E5E5E5"> basically perform the optimization</font>

783
00:28:15,970 --> 00:28:22,490
right now so the first<font color="#E5E5E5"> one is called</font>

784
00:28:18,890 --> 00:28:24,530
<font color="#CCCCCC">symbol liveness</font><font color="#E5E5E5"> if you've done like some</font>

785
00:28:22,490 --> 00:28:25,490
data flow analysis and<font color="#CCCCCC"> surprised you you</font>

786
00:28:24,530 --> 00:28:29,360
<font color="#E5E5E5">probably know that term</font>

787
00:28:25,490 --> 00:28:31,100
it's what the chakra<font color="#CCCCCC"> team uses as lingo</font>

788
00:28:29,360 --> 00:28:33,889
as well so you<font color="#E5E5E5"> will find those words in</font>

789
00:28:31,100 --> 00:28:35,600
the code<font color="#E5E5E5"> and we take the same example</font>

790
00:28:33,890 --> 00:28:38,450
like<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know we we add to object</font>

791
00:28:35,600 --> 00:28:41,179
properties<font color="#CCCCCC"> together</font><font color="#E5E5E5"> and here property X</font>

792
00:28:38,450 --> 00:28:43,100
will be in in my<font color="#CCCCCC"> oak slots</font><font color="#E5E5E5"> array at</font>

793
00:28:41,180 --> 00:28:43,460
offset<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> property I</font><font color="#E5E5E5"> will be in my</font>

794
00:28:43,100 --> 00:28:46,010
<font color="#CCCCCC">Oaks</font>

795
00:28:43,460 --> 00:28:47,540
sorry out<font color="#E5E5E5"> of that one and if what you</font>

796
00:28:46,010 --> 00:28:50,690
expect from your compiler is that the

797
00:28:47,540 --> 00:28:52,610
compiler<font color="#E5E5E5"> will be smart and you will see</font>

798
00:28:50,690 --> 00:28:54,290
that it will<font color="#E5E5E5"> dereference the same array</font>

799
00:28:52,610 --> 00:28:56,449
<font color="#E5E5E5">twice at two</font><font color="#CCCCCC"> different offsets so you</font>

800
00:28:54,290 --> 00:28:58,159
<font color="#E5E5E5">expect that the compiler will only load</font>

801
00:28:56,450 --> 00:29:00,290
the array once the array pointer once

802
00:28:58,160 --> 00:29:01,820
and then just<font color="#CCCCCC"> the reference</font><font color="#E5E5E5"> that two</font>

803
00:29:00,290 --> 00:29:04,340
times so you<font color="#E5E5E5"> probably expect assembly</font>

804
00:29:01,820 --> 00:29:07,070
code that's as close as what I have here

805
00:29:04,340 --> 00:29:08,929
so how does the forward pass is able to

806
00:29:07,070 --> 00:29:10,490
do<font color="#E5E5E5"> that is basically using symbol</font>

807
00:29:08,930 --> 00:29:13,070
lightness when<font color="#CCCCCC"> it's well optimized the</font>

808
00:29:10,490 --> 00:29:15,730
first property<font color="#CCCCCC"> access or dot</font><font color="#E5E5E5"> X it will</font>

809
00:29:13,070 --> 00:29:20,000
<font color="#CCCCCC">basically set the symbol associated with</font>

810
00:29:15,730 --> 00:29:21,920
<font color="#CCCCCC">the odds lots point of oh</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> life going</font>

811
00:29:20,000 --> 00:29:23,750
forward<font color="#CCCCCC"> and what that means</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that with</font>

812
00:29:21,920 --> 00:29:25,790
<font color="#E5E5E5">that information</font><font color="#CCCCCC"> when we are when we</font>

813
00:29:23,750 --> 00:29:27,890
deal with the second instruction<font color="#E5E5E5"> we are</font>

814
00:29:25,790 --> 00:29:29,930
now able to see<font color="#E5E5E5"> oh this thing is live so</font>

815
00:29:27,890 --> 00:29:31,640
when we generate<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> this thing is</font>

816
00:29:29,930 --> 00:29:33,170
live I<font color="#E5E5E5"> don't have to actually read</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> I</font>

817
00:29:31,640 --> 00:29:35,570
can<font color="#E5E5E5"> just reuse the value that was there</font>

818
00:29:33,170 --> 00:29:37,160
already<font color="#E5E5E5"> and this is how the JIT compiler</font>

819
00:29:35,570 --> 00:29:39,169
is able to you know come<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> this</font>

820
00:29:37,160 --> 00:29:41,180
kind<font color="#CCCCCC"> of optimization when you're when</font>

821
00:29:39,170 --> 00:29:42,340
you access<font color="#CCCCCC"> the same memory</font><font color="#E5E5E5"> over over and</font>

822
00:29:41,180 --> 00:29:45,620
<font color="#E5E5E5">over again</font>

823
00:29:42,340 --> 00:29:48,230
<font color="#E5E5E5">now the counterpart to</font><font color="#CCCCCC"> that is that</font><font color="#E5E5E5"> if</font>

824
00:29:45,620 --> 00:29:50,989
we<font color="#E5E5E5"> change the example slightly and in</font>

825
00:29:48,230 --> 00:29:52,460
between<font color="#E5E5E5"> the time we fetch property X and</font>

826
00:29:50,990 --> 00:29:54,680
we fetch property Y we have some

827
00:29:52,460 --> 00:29:57,290
operations and those operations<font color="#CCCCCC"> might</font>

828
00:29:54,680 --> 00:29:59,480
cause you know the the property value

829
00:29:57,290 --> 00:30:01,340
array to be<font color="#E5E5E5"> reallocated</font><font color="#CCCCCC"> what do we have</font>

830
00:29:59,480 --> 00:30:02,840
<font color="#E5E5E5">to do in that</font><font color="#CCCCCC"> case well you don't</font><font color="#E5E5E5"> want</font>

831
00:30:01,340 --> 00:30:04,790
to<font color="#E5E5E5"> use a</font><font color="#CCCCCC"> previously fetched value</font>

832
00:30:02,840 --> 00:30:06,980
because you would then read from free in

833
00:30:04,790 --> 00:30:09,080
memory<font color="#CCCCCC"> on maybe you</font><font color="#E5E5E5"> do if you're</font><font color="#CCCCCC"> looking</font>

834
00:30:06,980 --> 00:30:11,900
for box but the chakra<font color="#E5E5E5"> developers</font>

835
00:30:09,080 --> 00:30:13,310
probably don't want that<font color="#E5E5E5"> and so you have</font>

836
00:30:11,900 --> 00:30:14,930
to use the counterpart mechanism which

837
00:30:13,310 --> 00:30:16,310
is<font color="#CCCCCC"> called the QL mechanism once again</font>

838
00:30:14,930 --> 00:30:19,580
this is chakra lingo<font color="#E5E5E5"> that's what they</font>

839
00:30:16,310 --> 00:30:21,320
use in<font color="#E5E5E5"> the code which basically in</font>

840
00:30:19,580 --> 00:30:23,270
essence is if you deal with an

841
00:30:21,320 --> 00:30:25,220
instruction that might you know for

842
00:30:23,270 --> 00:30:27,410
example<font color="#E5E5E5"> cause that particular object</font><font color="#CCCCCC"> to</font>

843
00:30:25,220 --> 00:30:30,290
be reallocated<font color="#E5E5E5"> then the JIT compiler has</font>

844
00:30:27,410 --> 00:30:32,990
<font color="#CCCCCC">to kill the symbol associated with</font><font color="#E5E5E5"> to</font>

845
00:30:30,290 --> 00:30:34,970
basically say going forward<font color="#E5E5E5"> this thing</font>

846
00:30:32,990 --> 00:30:37,520
might have been<font color="#E5E5E5"> completely</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know</font>

847
00:30:34,970 --> 00:30:39,380
changed<font color="#E5E5E5"> so you cannot reuse what you</font>

848
00:30:37,520 --> 00:30:41,960
<font color="#E5E5E5">previously had so that's basically you</font>

849
00:30:39,380 --> 00:30:43,850
know when you lose<font color="#E5E5E5"> refined information</font>

850
00:30:41,960 --> 00:30:45,380
and<font color="#E5E5E5"> that's basically when you when you</font>

851
00:30:43,850 --> 00:30:47,899
when<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have those situations you will</font>

852
00:30:45,380 --> 00:30:51,410
basically miss some of optimization

853
00:30:47,900 --> 00:30:53,360
opportunities<font color="#E5E5E5"> and this is basically like</font>

854
00:30:51,410 --> 00:30:55,400
those two<font color="#CCCCCC"> mechanisms</font><font color="#E5E5E5"> like this is a real</font>

855
00:30:53,360 --> 00:30:56,379
basic instruction but this is what

856
00:30:55,400 --> 00:30:58,210
you'll see<font color="#E5E5E5"> throughout</font>

857
00:30:56,380 --> 00:31:00,010
God everywhere<font color="#E5E5E5"> and if you foul closely</font>

858
00:30:58,210 --> 00:31:03,190
some of the bugs reported<font color="#E5E5E5"> by Loki art or</font>

859
00:31:00,010 --> 00:31:05,410
sorry my bad<font color="#CCCCCC"> mostly with her</font><font color="#E5E5E5"> raise those</font>

860
00:31:03,190 --> 00:31:07,240
<font color="#E5E5E5">basics</font><font color="#CCCCCC"> did they have</font><font color="#E5E5E5"> to do with that</font>

861
00:31:05,410 --> 00:31:09,490
particular<font color="#E5E5E5"> mechanism of you know type</font>

862
00:31:07,240 --> 00:31:11,860
information<font color="#CCCCCC"> and not being killed</font>

863
00:31:09,490 --> 00:31:14,440
properly under certain conditions<font color="#CCCCCC"> so</font>

864
00:31:11,860 --> 00:31:18,219
maybe if you look at those bugs again<font color="#CCCCCC"> it</font>

865
00:31:14,440 --> 00:31:20,110
won't<font color="#CCCCCC"> make no sense so</font><font color="#E5E5E5"> far</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> does</font>

866
00:31:18,220 --> 00:31:22,419
sounds simple enough

867
00:31:20,110 --> 00:31:23,918
<font color="#CCCCCC">right well the truth is all the examples</font>

868
00:31:22,419 --> 00:31:27,070
<font color="#CCCCCC">I showed you are reefs imple because</font>

869
00:31:23,919 --> 00:31:29,289
there's only one block<font color="#E5E5E5"> in reality</font><font color="#CCCCCC"> g-code</font>

870
00:31:27,070 --> 00:31:31,990
has<font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with complex</font><font color="#E5E5E5"> construct in</font>

871
00:31:29,289 --> 00:31:33,908
terms of CFG so such as loops because

872
00:31:31,990 --> 00:31:35,980
loops have information that that is true

873
00:31:33,909 --> 00:31:37,480
<font color="#E5E5E5">only</font><font color="#CCCCCC"> the first time you run it so</font><font color="#E5E5E5"> before</font>

874
00:31:35,980 --> 00:31:39,549
you run<font color="#CCCCCC"> the</font><font color="#E5E5E5"> loop body and then you have</font>

875
00:31:37,480 --> 00:31:41,169
information<font color="#CCCCCC"> that is also</font><font color="#E5E5E5"> true</font><font color="#CCCCCC"> all the</font>

876
00:31:39,549 --> 00:31:43,059
subsequent<font color="#E5E5E5"> iterations of that loop</font>

877
00:31:41,169 --> 00:31:44,380
because you've run the body once you

878
00:31:43,059 --> 00:31:46,090
have conditional statements which

879
00:31:44,380 --> 00:31:48,640
<font color="#CCCCCC">introduce multiple</font><font color="#E5E5E5"> blocks where only one</font>

880
00:31:46,090 --> 00:31:49,959
is taken and<font color="#E5E5E5"> you have a lot</font><font color="#CCCCCC"> of different</font>

881
00:31:48,640 --> 00:31:53,169
<font color="#CCCCCC">tricks to</font><font color="#E5E5E5"> keep track</font><font color="#CCCCCC"> of track</font><font color="#E5E5E5"> you know</font>

882
00:31:49,960 --> 00:31:55,000
which<font color="#CCCCCC"> viable elias's another viable in</font>

883
00:31:53,169 --> 00:31:56,080
case of<font color="#E5E5E5"> bailout what do you restore for</font>

884
00:31:55,000 --> 00:31:58,720
the interpreter this<font color="#E5E5E5"> is really</font>

885
00:31:56,080 --> 00:32:01,960
non-trivial<font color="#E5E5E5"> the JIT also asks you model</font>

886
00:31:58,720 --> 00:32:03,909
perfectly what will happen in<font color="#CCCCCC"> case of</font><font color="#E5E5E5"> in</font>

887
00:32:01,960 --> 00:32:05,440
situations where<font color="#CCCCCC"> wait you know it might</font>

888
00:32:03,909 --> 00:32:06,940
fall back into<font color="#E5E5E5"> the interpreter</font><font color="#CCCCCC"> because</font>

889
00:32:05,440 --> 00:32:08,500
you don't want the<font color="#E5E5E5"> G to assume that</font>

890
00:32:06,940 --> 00:32:10,030
<font color="#CCCCCC">nothing is going to</font><font color="#E5E5E5"> change when the slow</font>

891
00:32:08,500 --> 00:32:12,669
path might actually change<font color="#E5E5E5"> some internal</font>

892
00:32:10,030 --> 00:32:14,590
data structures it also does some range

893
00:32:12,669 --> 00:32:17,260
analysis for<font color="#CCCCCC"> bounce</font><font color="#E5E5E5"> check removal which</font>

894
00:32:14,590 --> 00:32:19,090
sounds really<font color="#CCCCCC"> scary</font><font color="#E5E5E5"> and a lot more</font>

895
00:32:17,260 --> 00:32:23,140
<font color="#CCCCCC">things happening so there's a lot of</font>

896
00:32:19,090 --> 00:32:24,399
things that can go<font color="#CCCCCC"> wrong and now</font><font color="#E5E5E5"> quick</font>

897
00:32:23,140 --> 00:32:25,809
<font color="#CCCCCC">start about</font><font color="#E5E5E5"> the desktop</font><font color="#CCCCCC"> pass which is</font>

898
00:32:24,400 --> 00:32:27,520
the last<font color="#E5E5E5"> bus that's run by the global</font>

899
00:32:25,809 --> 00:32:29,590
<font color="#E5E5E5">team</font><font color="#CCCCCC"> Iser once again not</font><font color="#E5E5E5"> really</font>

900
00:32:27,520 --> 00:32:31,210
interesting<font color="#CCCCCC"> cross is the same algorithm</font>

901
00:32:29,590 --> 00:32:33,070
as<font color="#E5E5E5"> the first backward pass and it's</font>

902
00:32:31,210 --> 00:32:35,350
mostly there<font color="#CCCCCC"> to read to remove what's</font>

903
00:32:33,070 --> 00:32:36,789
redundant such as like you know<font color="#E5E5E5"> type</font>

904
00:32:35,350 --> 00:32:38,709
checks which might be redundant<font color="#E5E5E5"> because</font>

905
00:32:36,789 --> 00:32:41,320
you know the thing is checked

906
00:32:38,710 --> 00:32:42,850
higher up in the<font color="#E5E5E5"> CFG and it's not super</font>

907
00:32:41,320 --> 00:32:44,500
interesting if you're looking for<font color="#E5E5E5"> bugs</font>

908
00:32:42,850 --> 00:32:46,178
because<font color="#E5E5E5"> most of the bad</font><font color="#CCCCCC"> decisions that</font>

909
00:32:44,500 --> 00:32:49,150
will<font color="#E5E5E5"> be taken in the backward in the</font>

910
00:32:46,179 --> 00:32:51,490
desktop<font color="#CCCCCC"> ass will</font><font color="#E5E5E5"> be as consequence of</font>

911
00:32:49,150 --> 00:32:57,370
you know bad things<font color="#E5E5E5"> happening in forward</font>

912
00:32:51,490 --> 00:33:01,270
us so yeah<font color="#CCCCCC"> so finally we get we get to</font>

913
00:32:57,370 --> 00:33:04,570
to a bug<font color="#E5E5E5"> we'll walk</font><font color="#CCCCCC"> through with you</font>

914
00:33:01,270 --> 00:33:06,580
it's a bug I reported<font color="#E5E5E5"> to</font><font color="#CCCCCC"> msse</font><font color="#E5E5E5"> last year</font>

915
00:33:04,570 --> 00:33:08,260
it's a JIT bug of course<font color="#E5E5E5"> I found it with</font>

916
00:33:06,580 --> 00:33:08,960
fuzzing which like I'm not going to

917
00:33:08,260 --> 00:33:11,539
discuss<font color="#E5E5E5"> the approach</font>

918
00:33:08,960 --> 00:33:13,610
at all because<font color="#CCCCCC"> like it's uh it's</font><font color="#E5E5E5"> it's</font>

919
00:33:11,539 --> 00:33:15,289
<font color="#E5E5E5">took it's too complicated</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will talk</font>

920
00:33:13,610 --> 00:33:17,990
about<font color="#CCCCCC"> that that's infiltrate if you want</font>

921
00:33:15,289 --> 00:33:20,299
to check it out<font color="#CCCCCC"> it was fixed last over</font>

922
00:33:17,990 --> 00:33:23,090
<font color="#CCCCCC">say</font><font color="#E5E5E5"> basically relies on what I talked</font>

923
00:33:20,299 --> 00:33:24,879
about<font color="#E5E5E5"> legit not basically accounting for</font>

924
00:33:23,090 --> 00:33:29,750
certain internal things that can change

925
00:33:24,880 --> 00:33:32,149
<font color="#E5E5E5">in jail with JavaScript operations so</font>

926
00:33:29,750 --> 00:33:34,970
here on the Left I<font color="#CCCCCC"> have a have some</font>

927
00:33:32,149 --> 00:33:38,389
JavaScript<font color="#CCCCCC"> code I hope so quite able</font><font color="#E5E5E5"> to</font>

928
00:33:34,970 --> 00:33:40,130
<font color="#E5E5E5">see at the back</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> basically walk</font>

929
00:33:38,390 --> 00:33:41,450
through walk through<font color="#CCCCCC"> that together</font><font color="#E5E5E5"> but</font>

930
00:33:40,130 --> 00:33:43,520
the thing<font color="#CCCCCC"> is if you</font><font color="#E5E5E5"> if you took that</font>

931
00:33:41,450 --> 00:33:45,380
<font color="#E5E5E5">code run it on a rebuild of chakra</font><font color="#CCCCCC"> core</font>

932
00:33:43,520 --> 00:33:46,730
which is vulnerable<font color="#CCCCCC"> well you're well</font>

933
00:33:45,380 --> 00:33:48,380
basically observe the following crash

934
00:33:46,730 --> 00:33:53,149
<font color="#CCCCCC">well it's basically trying to move</font>

935
00:33:48,380 --> 00:33:54,559
<font color="#CCCCCC">whatever is in</font><font color="#E5E5E5"> RB p inside you know what</font>

936
00:33:53,149 --> 00:33:57,529
looks to be<font color="#E5E5E5"> an array access with like</font>

937
00:33:54,559 --> 00:33:58,639
<font color="#E5E5E5">our ax holding the base of the buffer so</font>

938
00:33:57,529 --> 00:34:01,190
if we look<font color="#E5E5E5"> at the value</font><font color="#CCCCCC"> of the two</font>

939
00:33:58,640 --> 00:34:02,809
registers<font color="#E5E5E5"> it's trying to move one so the</font>

940
00:34:01,190 --> 00:34:04,279
tagged integer one<font color="#E5E5E5"> which is probably</font>

941
00:34:02,809 --> 00:34:05,870
what we<font color="#CCCCCC"> have on the left</font><font color="#E5E5E5"> or dots equals</font>

942
00:34:04,279 --> 00:34:08,780
one so that's<font color="#E5E5E5"> what the one comes from</font>

943
00:34:05,870 --> 00:34:12,199
and the<font color="#CCCCCC"> RX two based on the the base of</font>

944
00:34:08,780 --> 00:34:16,010
the buffer is<font color="#CCCCCC"> X 4 1</font><font color="#E5E5E5"> 4</font><font color="#CCCCCC"> & 4 1 the</font><font color="#E5E5E5"> with the</font>

945
00:34:12,199 --> 00:34:17,509
tag<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> set and we basically see as well</font>

946
00:34:16,010 --> 00:34:20,270
in the JavaScript code<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> actually</font>

947
00:34:17,510 --> 00:34:22,990
set a property<font color="#E5E5E5"> to X 4 1 4 1 4 M so it</font>

948
00:34:20,270 --> 00:34:25,489
seems<font color="#E5E5E5"> to be correlated somehow</font><font color="#CCCCCC"> and</font>

949
00:34:22,989 --> 00:34:26,810
basically what you gain<font color="#E5E5E5"> as information</font>

950
00:34:25,489 --> 00:34:30,199
<font color="#E5E5E5">from that crash if you're familiar with</font>

951
00:34:26,810 --> 00:34:32,000
chakra<font color="#CCCCCC"> it's basically that somehow the</font>

952
00:34:30,199 --> 00:34:33,770
pointer<font color="#CCCCCC"> that holds that points to the</font>

953
00:34:32,000 --> 00:34:37,570
property values has been overwritten by

954
00:34:33,770 --> 00:34:37,570
<font color="#E5E5E5">X</font><font color="#CCCCCC"> 4 1 4 1</font>

955
00:34:44,880 --> 00:34:48,270
so just a quick refresher that's one of

956
00:34:46,949 --> 00:34:50,250
the slides that we saw<font color="#E5E5E5"> right at the</font>

957
00:34:48,270 --> 00:34:51,690
beginning<font color="#CCCCCC"> they have this layer that's</font>

958
00:34:50,250 --> 00:34:52,800
called the<font color="#E5E5E5"> object header in line where</font>

959
00:34:51,690 --> 00:34:53,790
basically<font color="#E5E5E5"> the property values are</font>

960
00:34:52,800 --> 00:34:57,120
<font color="#E5E5E5">stopped directly inside the object</font>

961
00:34:53,790 --> 00:35:00,150
<font color="#E5E5E5">itself and</font><font color="#CCCCCC"> we'll need that because</font><font color="#E5E5E5"> the</font>

962
00:34:57,120 --> 00:35:02,069
<font color="#CCCCCC">debug is actually related to</font><font color="#E5E5E5"> that so</font>

963
00:35:00,150 --> 00:35:04,140
<font color="#CCCCCC">here we'll walk</font><font color="#E5E5E5"> through basically what</font>

964
00:35:02,070 --> 00:35:05,760
happens in the JavaScript code so first

965
00:35:04,140 --> 00:35:07,379
off we see that ridiculous function<font color="#CCCCCC"> opt</font>

966
00:35:05,760 --> 00:35:08,730
and we basically have<font color="#CCCCCC"> a loop where we</font>

967
00:35:07,380 --> 00:35:10,320
call the function<font color="#E5E5E5"> repeatedly with the</font>

968
00:35:08,730 --> 00:35:14,130
<font color="#CCCCCC">same kind of scalar object which has</font>

969
00:35:10,320 --> 00:35:15,540
three<font color="#E5E5E5"> properties ABC and we why we do</font>

970
00:35:14,130 --> 00:35:17,580
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> basically we want to optimize</font>

971
00:35:15,540 --> 00:35:21,150
<font color="#CCCCCC">the</font><font color="#E5E5E5"> code for</font><font color="#CCCCCC"> that particular type of</font>

972
00:35:17,580 --> 00:35:22,740
object<font color="#E5E5E5"> now what happens is that in the</font>

973
00:35:21,150 --> 00:35:24,450
code<font color="#E5E5E5"> we access some properties</font><font color="#CCCCCC"> to set</font>

974
00:35:22,740 --> 00:35:25,770
the symbol as live this is not<font color="#E5E5E5"> super</font>

975
00:35:24,450 --> 00:35:27,270
important just<font color="#CCCCCC"> because you want the</font>

976
00:35:25,770 --> 00:35:29,100
optimization to take place so you need

977
00:35:27,270 --> 00:35:32,490
it but it's not<font color="#E5E5E5"> really relevant to</font><font color="#CCCCCC"> the</font>

978
00:35:29,100 --> 00:35:36,270
<font color="#E5E5E5">to the exploit itself</font><font color="#CCCCCC"> and then we add a</font>

979
00:35:32,490 --> 00:35:38,339
new property property on the object<font color="#CCCCCC"> that</font>

980
00:35:36,270 --> 00:35:41,370
we set<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 1 in the code and we</font>

981
00:35:38,340 --> 00:35:43,230
repeatedly<font color="#E5E5E5"> you know property</font><font color="#CCCCCC"> II set</font><font color="#E5E5E5"> is</font>

982
00:35:41,370 --> 00:35:45,270
in a nonnamous function<font color="#CCCCCC"> I call</font>

983
00:35:43,230 --> 00:35:47,010
repeatedly inside inside<font color="#E5E5E5"> the loop and</font><font color="#CCCCCC"> we</font>

984
00:35:45,270 --> 00:35:49,759
<font color="#CCCCCC">call that function and we set property a</font>

985
00:35:47,010 --> 00:35:51,930
all the<font color="#E5E5E5"> time to</font><font color="#CCCCCC"> X for one for one so</font>

986
00:35:49,760 --> 00:35:53,400
<font color="#CCCCCC">what I want you</font><font color="#E5E5E5"> to take away</font><font color="#CCCCCC"> from that</font>

987
00:35:51,930 --> 00:35:54,960
is<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> like it's not meaningful</font>

988
00:35:53,400 --> 00:35:56,550
<font color="#E5E5E5">JavaScript code I doubt that you would</font>

989
00:35:54,960 --> 00:35:58,410
<font color="#E5E5E5">ever write</font><font color="#CCCCCC"> that if you write</font><font color="#E5E5E5"> JavaScript</font>

990
00:35:56,550 --> 00:36:00,090
<font color="#E5E5E5">for living but it's not</font><font color="#CCCCCC"> ludicrous code</font>

991
00:35:58,410 --> 00:36:02,009
like it does<font color="#E5E5E5"> not rely on any of the</font>

992
00:36:00,090 --> 00:36:06,170
crazy things<font color="#CCCCCC"> that you can have in</font>

993
00:36:02,010 --> 00:36:08,550
JavaScript like proxies and suffered so

994
00:36:06,170 --> 00:36:10,170
why do we<font color="#E5E5E5"> have a bug basically why do we</font>

995
00:36:08,550 --> 00:36:12,480
are crash<font color="#E5E5E5"> well the key is in how these</font>

996
00:36:10,170 --> 00:36:14,310
two objects basically differ and<font color="#E5E5E5"> how</font>

997
00:36:12,480 --> 00:36:17,220
<font color="#CCCCCC">they will behave</font><font color="#E5E5E5"> when you add property</font>

998
00:36:14,310 --> 00:36:19,410
<font color="#CCCCCC">II to it so to</font><font color="#E5E5E5"> highlight that</font><font color="#CCCCCC"> I have</font>

999
00:36:17,220 --> 00:36:21,839
here an object<font color="#E5E5E5"> which is similar to the</font>

1000
00:36:19,410 --> 00:36:23,700
one I pass to<font color="#E5E5E5"> the function we</font><font color="#CCCCCC"> optimize</font>

1001
00:36:21,840 --> 00:36:26,010
it which is an<font color="#E5E5E5"> object with like three</font>

1002
00:36:23,700 --> 00:36:27,689
properties a<font color="#E5E5E5"> scalar object and if you</font>

1003
00:36:26,010 --> 00:36:28,950
look in memory how it looks like<font color="#E5E5E5"> you</font>

1004
00:36:27,690 --> 00:36:31,230
<font color="#E5E5E5">basically see that you have the property</font>

1005
00:36:28,950 --> 00:36:35,189
<font color="#E5E5E5">stored directly in the object so you</font><font color="#CCCCCC"> can</font>

1006
00:36:31,230 --> 00:36:37,950
find the<font color="#E5E5E5"> value in blue and now I had a</font>

1007
00:36:35,190 --> 00:36:39,450
fourth property<font color="#E5E5E5"> property data I said two</font>

1008
00:36:37,950 --> 00:36:41,250
<font color="#E5E5E5">four four four four and if with the</font>

1009
00:36:39,450 --> 00:36:42,509
reference memory<font color="#E5E5E5"> then we can see that</font>

1010
00:36:41,250 --> 00:36:43,830
<font color="#E5E5E5">two things are changed first off we</font><font color="#CCCCCC"> have</font>

1011
00:36:42,510 --> 00:36:46,230
<font color="#E5E5E5">the property four four four four which</font>

1012
00:36:43,830 --> 00:36:48,000
is<font color="#E5E5E5"> which appears where we expect it to</font>

1013
00:36:46,230 --> 00:36:49,350
appear and then<font color="#E5E5E5"> we have the second point</font>

1014
00:36:48,000 --> 00:36:51,270
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the change</font><font color="#E5E5E5"> so this is the type</font>

1015
00:36:49,350 --> 00:36:52,740
pointer and of course it has changed

1016
00:36:51,270 --> 00:36:54,720
because<font color="#E5E5E5"> since we added the property the</font>

1017
00:36:52,740 --> 00:36:56,790
type of<font color="#E5E5E5"> the object has</font><font color="#CCCCCC"> changed but</font>

1018
00:36:54,720 --> 00:36:57,609
nothing<font color="#E5E5E5"> crazy like the key takeaway here</font>

1019
00:36:56,790 --> 00:36:59,049
is<font color="#CCCCCC"> that</font>

1020
00:36:57,609 --> 00:37:01,749
a property<font color="#CCCCCC"> - it actually doesn't change</font>

1021
00:36:59,049 --> 00:37:04,029
the layout of the object<font color="#E5E5E5"> now what</font>

1022
00:37:01,749 --> 00:37:05,589
happens with<font color="#E5E5E5"> this object which is a</font>

1023
00:37:04,029 --> 00:37:07,900
scanner object<font color="#E5E5E5"> but this time has four</font>

1024
00:37:05,589 --> 00:37:09,940
properties<font color="#E5E5E5"> so if we look in memory</font><font color="#CCCCCC"> here</font>

1025
00:37:07,900 --> 00:37:12,069
we have the same thing we see our four

1026
00:37:09,940 --> 00:37:14,230
properties<font color="#E5E5E5"> appearing</font><font color="#CCCCCC"> directly inside the</font>

1027
00:37:12,069 --> 00:37:15,880
object<font color="#E5E5E5"> as you would expect</font><font color="#CCCCCC"> and now we</font>

1028
00:37:14,230 --> 00:37:17,769
add<font color="#E5E5E5"> the fifth property to it so property</font>

1029
00:37:15,880 --> 00:37:20,589
<font color="#CCCCCC">EDA is set to</font><font color="#E5E5E5"> four</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> four five and</font>

1030
00:37:17,769 --> 00:37:22,359
now if<font color="#CCCCCC"> we can if we look in memory how</font>

1031
00:37:20,589 --> 00:37:24,609
it looks like we see that<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> has</font>

1032
00:37:22,359 --> 00:37:26,920
moved<font color="#CCCCCC"> the second pointer has been</font>

1033
00:37:24,609 --> 00:37:29,230
updated as before<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now we have a</font>

1034
00:37:26,920 --> 00:37:31,480
pointer where<font color="#CCCCCC"> x4</font><font color="#E5E5E5"> one-for-one was we have</font>

1035
00:37:29,230 --> 00:37:33,759
a null pointer where x4 - photo was then

1036
00:37:31,480 --> 00:37:37,599
we have X 4<font color="#E5E5E5"> 1 4 1 X 4 2 4 2 so those</font>

1037
00:37:33,759 --> 00:37:39,819
have<font color="#E5E5E5"> been</font><font color="#CCCCCC"> like moved by by 16 bytes and</font>

1038
00:37:37,599 --> 00:37:42,130
if we dereference the pointer<font color="#E5E5E5"> that we</font>

1039
00:37:39,819 --> 00:37:43,869
saw<font color="#CCCCCC"> up here</font><font color="#E5E5E5"> we basically find the rest</font>

1040
00:37:42,130 --> 00:37:45,339
of<font color="#E5E5E5"> the property values so this is the</font><font color="#CCCCCC"> ox</font>

1041
00:37:43,869 --> 00:37:47,650
<font color="#CCCCCC">lost pointer we're looking at the finger</font>

1042
00:37:45,339 --> 00:37:49,749
<font color="#E5E5E5">points or property values and the</font>

1043
00:37:47,650 --> 00:37:51,130
takeaway<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> that we still reuse</font>

1044
00:37:49,749 --> 00:37:53,680
some of<font color="#CCCCCC"> the in life space that we had</font>

1045
00:37:51,130 --> 00:37:55,660
allocated<font color="#E5E5E5"> because let's not waste it but</font>

1046
00:37:53,680 --> 00:37:57,069
the thing has completely changed<font color="#CCCCCC"> instead</font>

1047
00:37:55,660 --> 00:37:59,140
of having all<font color="#E5E5E5"> the property stored in</font>

1048
00:37:57,069 --> 00:38:00,880
line into the object we now rely<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that</font>

1049
00:37:59,140 --> 00:38:05,069
external<font color="#E5E5E5"> storage through the oxfords</font>

1050
00:38:00,880 --> 00:38:07,509
pointer to store the property values so

1051
00:38:05,069 --> 00:38:10,599
maybe you you kind<font color="#E5E5E5"> of guessed like the</font>

1052
00:38:07,509 --> 00:38:12,609
the<font color="#CCCCCC"> problem already so here when</font><font color="#E5E5E5"> I set</font>

1053
00:38:10,599 --> 00:38:14,140
property<font color="#CCCCCC"> II on my object which has</font>

1054
00:38:12,609 --> 00:38:15,400
fourth property<font color="#E5E5E5"> which is just what we</font>

1055
00:38:14,140 --> 00:38:17,558
saw that<font color="#E5E5E5"> will</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> change the layout</font>

1056
00:38:15,400 --> 00:38:19,900
now what happens if<font color="#CCCCCC"> the JIT compiler for</font>

1057
00:38:17,559 --> 00:38:21,670
some reason failed to say<font color="#E5E5E5"> oh this might</font>

1058
00:38:19,900 --> 00:38:23,739
actually change<font color="#E5E5E5"> the layout I better you</font>

1059
00:38:21,670 --> 00:38:25,329
know redo the type check or actually you

1060
00:38:23,739 --> 00:38:27,220
account for that<font color="#CCCCCC"> so what happens is that</font>

1061
00:38:25,329 --> 00:38:29,440
chakra<font color="#E5E5E5"> just like in under this</font>

1062
00:38:27,220 --> 00:38:30,578
<font color="#E5E5E5">particular situation just like</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> okay</font>

1063
00:38:29,440 --> 00:38:33,339
<font color="#E5E5E5">this is fine nothing is going to happen</font>

1064
00:38:30,579 --> 00:38:35,380
<font color="#CCCCCC">well when we come</font><font color="#E5E5E5"> back from the function</font>

1065
00:38:33,339 --> 00:38:37,989
<font color="#E5E5E5">after we change the layout of the object</font>

1066
00:38:35,380 --> 00:38:39,549
this<font color="#CCCCCC"> will just</font><font color="#E5E5E5"> like right at</font><font color="#CCCCCC"> the direct</font>

1067
00:38:37,989 --> 00:38:41,829
offset in memory as we've seen in<font color="#CCCCCC"> your</font>

1068
00:38:39,549 --> 00:38:44,200
example and<font color="#E5E5E5"> that will write well</font>

1069
00:38:41,829 --> 00:38:46,210
<font color="#E5E5E5">although it dot a previously was which</font>

1070
00:38:44,200 --> 00:38:49,149
was which is<font color="#E5E5E5"> where the observed pattern</font>

1071
00:38:46,210 --> 00:38:50,589
now is so so this<font color="#E5E5E5"> is basically the bug</font>

1072
00:38:49,150 --> 00:38:53,739
in<font color="#E5E5E5"> the nature and why we observe the</font>

1073
00:38:50,589 --> 00:38:55,269
<font color="#CCCCCC">crash so the primitive we have is we are</font>

1074
00:38:53,739 --> 00:38:56,859
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> able to corrupt the observes</font>

1075
00:38:55,269 --> 00:38:58,390
pointer of an object with a<font color="#CCCCCC"> JavaScript</font>

1076
00:38:56,859 --> 00:39:00,460
value we<font color="#E5E5E5"> have a couple of problems</font>

1077
00:38:58,390 --> 00:39:02,710
associated with<font color="#E5E5E5"> that first off we cannot</font>

1078
00:39:00,460 --> 00:39:04,749
set it to a raw pointer directly because

1079
00:39:02,710 --> 00:39:06,279
<font color="#E5E5E5">every integer or double that we produce</font>

1080
00:39:04,749 --> 00:39:07,749
<font color="#E5E5E5">from JavaScript will be stopped tagged</font>

1081
00:39:06,279 --> 00:39:09,730
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that's not going to be valid address</font>

1082
00:39:07,749 --> 00:39:11,259
<font color="#E5E5E5">we have the same thing than to write</font>

1083
00:39:09,730 --> 00:39:13,119
<font color="#CCCCCC">arbitrary values</font>

1084
00:39:11,260 --> 00:39:15,250
so we<font color="#CCCCCC"> basically need to further</font><font color="#E5E5E5"> craft</font>

1085
00:39:13,119 --> 00:39:17,980
other objects and if you've looked at

1086
00:39:15,250 --> 00:39:19,930
any<font color="#E5E5E5"> kind of JavaScript destroyed your</font>

1087
00:39:17,980 --> 00:39:22,720
<font color="#CCCCCC">produce in</font><font color="#E5E5E5"> Arriba</font><font color="#CCCCCC"> firs and typed arrays</font>

1088
00:39:19,930 --> 00:39:25,839
which which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> best gift that could</font>

1089
00:39:22,720 --> 00:39:27,310
could have happened<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> so now I walk</font>

1090
00:39:25,840 --> 00:39:28,810
through<font color="#E5E5E5"> basically the full exploit to</font>

1091
00:39:27,310 --> 00:39:30,970
get to<font color="#CCCCCC"> full read/write primitive from</font>

1092
00:39:28,810 --> 00:39:33,190
that<font color="#CCCCCC"> I will</font><font color="#E5E5E5"> raise the exploit code so</font>

1093
00:39:30,970 --> 00:39:36,040
like you if<font color="#E5E5E5"> you want to check it out for</font>

1094
00:39:33,190 --> 00:39:37,810
yourself<font color="#CCCCCC"> later on</font><font color="#E5E5E5"> so here I am an object</font>

1095
00:39:36,040 --> 00:39:39,400
<font color="#E5E5E5">it's a global object I declare it right</font>

1096
00:39:37,810 --> 00:39:41,230
before I even declare<font color="#E5E5E5"> the function</font><font color="#CCCCCC"> I</font>

1097
00:39:39,400 --> 00:39:43,330
said to certain<font color="#CCCCCC"> bunch of property to it</font>

1098
00:39:41,230 --> 00:39:47,680
and I also declare a global array buffer

1099
00:39:43,330 --> 00:39:49,090
so nothing crazy<font color="#CCCCCC"> so far and now I used</font>

1100
00:39:47,680 --> 00:39:50,680
the<font color="#E5E5E5"> trigger that I highlighted before so</font>

1101
00:39:49,090 --> 00:39:52,630
I<font color="#CCCCCC"> just</font><font color="#E5E5E5"> changed to thing instead of</font>

1102
00:39:50,680 --> 00:39:55,240
setting<font color="#CCCCCC"> oh that's a 2x4</font><font color="#E5E5E5"> one for</font><font color="#CCCCCC"> one for</font>

1103
00:39:52,630 --> 00:39:58,060
<font color="#E5E5E5">one</font><font color="#CCCCCC"> I set</font><font color="#E5E5E5"> it to my global object</font>

1104
00:39:55,240 --> 00:39:59,830
so basically when when we trigger<font color="#CCCCCC"> the</font>

1105
00:39:58,060 --> 00:40:01,570
corruption the bug<font color="#E5E5E5"> this is basically the</font>

1106
00:39:59,830 --> 00:40:04,000
memory layout that we achieve<font color="#CCCCCC"> and right</font>

1107
00:40:01,570 --> 00:40:07,630
we have object<font color="#CCCCCC"> oh that basically points</font>

1108
00:40:04,000 --> 00:40:11,500
to the<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the global object itself</font><font color="#CCCCCC"> but</font>

1109
00:40:07,630 --> 00:40:15,340
<font color="#CCCCCC">doughty inside it and now when I run</font>

1110
00:40:11,500 --> 00:40:16,869
<font color="#CCCCCC">auto T equals</font><font color="#E5E5E5"> target I'm not able to</font>

1111
00:40:15,340 --> 00:40:18,880
<font color="#CCCCCC">further crow up the</font><font color="#E5E5E5"> global</font><font color="#CCCCCC"> object and</font>

1112
00:40:16,869 --> 00:40:21,520
make it so close<font color="#E5E5E5"> point a point</font><font color="#CCCCCC"> inside</font>

1113
00:40:18,880 --> 00:40:23,260
the array buffer itself<font color="#E5E5E5"> so all in all</font>

1114
00:40:21,520 --> 00:40:25,090
<font color="#E5E5E5">basically like right after we triggered</font>

1115
00:40:23,260 --> 00:40:26,560
<font color="#E5E5E5">the bug</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the memory layout we</font>

1116
00:40:25,090 --> 00:40:28,960
have on the Left we have our<font color="#E5E5E5"> two global</font>

1117
00:40:26,560 --> 00:40:31,270
<font color="#E5E5E5">objects and my global object points</font>

1118
00:40:28,960 --> 00:40:32,410
directly<font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> array buffer object</font>

1119
00:40:31,270 --> 00:40:34,060
and the array buffer object is very

1120
00:40:32,410 --> 00:40:35,680
interesting<font color="#E5E5E5"> because it has</font><font color="#CCCCCC"> a certain</font>

1121
00:40:34,060 --> 00:40:37,150
<font color="#E5E5E5">field which is like the the</font><font color="#CCCCCC"> buffer</font>

1122
00:40:35,680 --> 00:40:39,520
pointer which points directly to memory

1123
00:40:37,150 --> 00:40:43,030
where<font color="#E5E5E5"> you read and write from when you</font>

1124
00:40:39,520 --> 00:40:44,980
declare<font color="#CCCCCC"> typed array on it but we still</font>

1125
00:40:43,030 --> 00:40:46,480
have the same problem which is even

1126
00:40:44,980 --> 00:40:47,859
though I could corrupt<font color="#E5E5E5"> everything that's</font>

1127
00:40:46,480 --> 00:40:49,570
inside the array buffer<font color="#CCCCCC"> so I can</font>

1128
00:40:47,859 --> 00:40:52,150
<font color="#CCCCCC">overwrite the length field to get an</font><font color="#E5E5E5"> out</font>

1129
00:40:49,570 --> 00:40:53,560
<font color="#E5E5E5">of one</font><font color="#CCCCCC"> we cannot completely control the</font>

1130
00:40:52,150 --> 00:40:55,840
pointer and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to read and write</font>

1131
00:40:53,560 --> 00:40:58,259
from memory arbitrarily not relative to

1132
00:40:55,840 --> 00:41:01,330
to the buffer<font color="#CCCCCC"> its</font><font color="#E5E5E5"> to the buffer itself</font>

1133
00:40:58,260 --> 00:41:03,220
so we need<font color="#E5E5E5"> again another corruption and</font>

1134
00:41:01,330 --> 00:41:05,259
this is really<font color="#CCCCCC"> simple it's only tonight</font>

1135
00:41:03,220 --> 00:41:07,299
<font color="#CCCCCC">two lines of JavaScript</font><font color="#E5E5E5"> I just declare</font>

1136
00:41:05,260 --> 00:41:09,850
another<font color="#E5E5E5"> array buffer</font><font color="#CCCCCC"> and since I have</font>

1137
00:41:07,300 --> 00:41:10,750
the ability<font color="#CCCCCC"> to overwrite whatever is</font>

1138
00:41:09,850 --> 00:41:13,660
inside<font color="#E5E5E5"> the target</font>

1139
00:41:10,750 --> 00:41:15,910
<font color="#CCCCCC">array buffer</font><font color="#E5E5E5"> by just executing</font><font color="#CCCCCC"> op dot H</font>

1140
00:41:13,660 --> 00:41:18,399
equals<font color="#CCCCCC"> hacks which is the</font><font color="#E5E5E5"> new</font><font color="#CCCCCC"> Arbor file</font>

1141
00:41:15,910 --> 00:41:20,379
I created<font color="#CCCCCC"> where basically</font><font color="#E5E5E5"> achieved this</font>

1142
00:41:18,400 --> 00:41:23,109
memory layout which<font color="#CCCCCC"> is we have an</font><font color="#E5E5E5"> an</font>

1143
00:41:20,380 --> 00:41:25,029
array buffer<font color="#CCCCCC"> of which the buffer pointer</font>

1144
00:41:23,109 --> 00:41:27,159
points<font color="#CCCCCC"> to the inside of</font><font color="#E5E5E5"> another</font>

1145
00:41:25,029 --> 00:41:29,439
and what that gives<font color="#CCCCCC"> us as primitive now</font>

1146
00:41:27,159 --> 00:41:32,229
is that we<font color="#E5E5E5"> can create typed array on the</font>

1147
00:41:29,439 --> 00:41:33,969
target or a buffer<font color="#E5E5E5"> to completely corrupt</font>

1148
00:41:32,229 --> 00:41:36,308
the<font color="#CCCCCC"> hack sorry buffer and type</font><font color="#E5E5E5"> Tories</font>

1149
00:41:33,969 --> 00:41:38,499
<font color="#CCCCCC">are really good because we've typed to</font>

1150
00:41:36,309 --> 00:41:40,449
<font color="#E5E5E5">race you're not dealing with tag value</font>

1151
00:41:38,499 --> 00:41:42,249
like the integers or the doubles or the

1152
00:41:40,449 --> 00:41:45,909
<font color="#E5E5E5">floats show you're generating will be</font>

1153
00:41:42,249 --> 00:41:47,229
<font color="#CCCCCC">stalled completely unboxed so that</font>

1154
00:41:45,909 --> 00:41:49,419
<font color="#E5E5E5">basically gives</font><font color="#CCCCCC"> us to read and</font><font color="#E5E5E5"> write</font>

1155
00:41:47,229 --> 00:41:51,428
function so these are<font color="#E5E5E5"> really simple like</font>

1156
00:41:49,419 --> 00:41:54,069
four lines<font color="#CCCCCC"> four</font><font color="#E5E5E5"> five lines of JavaScript</font>

1157
00:41:51,429 --> 00:41:55,329
so if you want<font color="#E5E5E5"> to read and write from</font>

1158
00:41:54,069 --> 00:41:57,609
<font color="#E5E5E5">that point on basically the first thing</font>

1159
00:41:55,329 --> 00:41:59,349
<font color="#CCCCCC">you do is you you write you declare</font><font color="#E5E5E5"> with</font>

1160
00:41:57,609 --> 00:42:01,239
you on the target<font color="#CCCCCC"> array buffer so you</font>

1161
00:41:59,349 --> 00:42:02,529
declare<font color="#E5E5E5"> typed</font><font color="#CCCCCC"> array on it the first</font>

1162
00:42:01,239 --> 00:42:05,259
<font color="#CCCCCC">thing you do is you</font><font color="#E5E5E5"> have a right out of</font>

1163
00:42:02,529 --> 00:42:07,569
set 14 and 15<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is where the buffer</font>

1164
00:42:05,259 --> 00:42:09,339
pointer will be doing<font color="#E5E5E5"> that will</font>

1165
00:42:07,569 --> 00:42:11,499
<font color="#E5E5E5">basically control</font><font color="#CCCCCC"> the buffer point of</font>

1166
00:42:09,339 --> 00:42:13,869
hacks<font color="#CCCCCC"> and now you</font><font color="#E5E5E5"> just have to declare</font>

1167
00:42:11,499 --> 00:42:16,209
<font color="#E5E5E5">type</font><font color="#CCCCCC"> torreón hacks</font><font color="#E5E5E5"> and you can read and</font>

1168
00:42:13,869 --> 00:42:17,559
<font color="#E5E5E5">write from memory anywhere so that</font>

1169
00:42:16,209 --> 00:42:19,719
<font color="#CCCCCC">that's basically</font><font color="#E5E5E5"> a full read/write</font>

1170
00:42:17,559 --> 00:42:21,309
primitive<font color="#CCCCCC"> you're not quite done if</font>

1171
00:42:19,719 --> 00:42:23,709
you're looking to do a full chain but

1172
00:42:21,309 --> 00:42:26,109
this is not to talk about exploitation

1173
00:42:23,709 --> 00:42:28,808
<font color="#CCCCCC">on windows if you want to check that</font><font color="#E5E5E5"> out</font>

1174
00:42:26,109 --> 00:42:30,308
<font color="#CCCCCC">sock</font><font color="#E5E5E5"> gave an amazing talk at</font><font color="#CCCCCC"> ccc that</font>

1175
00:42:28,809 --> 00:42:32,799
you should check<font color="#E5E5E5"> it out which will have</font>

1176
00:42:30,309 --> 00:42:35,349
much more<font color="#E5E5E5"> information</font><font color="#CCCCCC"> i still</font><font color="#E5E5E5"> like</font>

1177
00:42:32,799 --> 00:42:41,099
getting for real right it's pretty<font color="#CCCCCC"> good</font>

1178
00:42:35,349 --> 00:42:41,099
<font color="#E5E5E5">but it's what</font><font color="#CCCCCC"> you want basically so yeah</font>

1179
00:42:44,400 --> 00:42:46,460
you

1180
00:42:47,550 --> 00:42:50,069
[Music]

