1
00:00:00,000 --> 00:00:02,729
[Music]

2
00:00:11,980 --> 00:00:17,020
today I will she be showing practical

3
00:00:14,750 --> 00:00:20,500
uses for<font color="#CCCCCC"> hardware-assisted</font><font color="#E5E5E5"> memory</font>

4
00:00:17,020 --> 00:00:23,360
<font color="#E5E5E5">visualization before I start I have to</font>

5
00:00:20,500 --> 00:00:25,250
point<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that I'm giving this talk as</font>

6
00:00:23,360 --> 00:00:28,460
an individual my employer is<font color="#CCCCCC"> not</font>

7
00:00:25,250 --> 00:00:31,130
involved<font color="#E5E5E5"> in any</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> I'm here today to</font>

8
00:00:28,460 --> 00:00:33,410
show you<font color="#CCCCCC"> the memory process</font><font color="#E5E5E5"> file system</font>

9
00:00:31,130 --> 00:00:36,320
which is a different<font color="#E5E5E5"> way of visualizing</font>

10
00:00:33,410 --> 00:00:38,709
<font color="#CCCCCC">in-memory</font><font color="#E5E5E5"> Windows internals and objects</font>

11
00:00:36,320 --> 00:00:40,879
as files and folders in<font color="#CCCCCC"> a file system</font>

12
00:00:38,710 --> 00:00:43,280
<font color="#CCCCCC">we'll also have a look</font><font color="#E5E5E5"> at two different</font>

13
00:00:40,879 --> 00:00:45,829
use cases<font color="#E5E5E5"> first have I used an early</font>

14
00:00:43,280 --> 00:00:48,440
version of it to<font color="#E5E5E5"> find the total</font><font color="#CCCCCC"> meltem</font>

15
00:00:45,829 --> 00:00:50,809
vulnerability<font color="#E5E5E5"> and then how other people</font>

16
00:00:48,440 --> 00:00:52,849
<font color="#CCCCCC">have been using modified versions of my</font>

17
00:00:50,809 --> 00:00:55,760
software<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to do hardware</font>

18
00:00:52,850 --> 00:00:57,950
<font color="#E5E5E5">assisted cheating in games</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> that</font>

19
00:00:55,760 --> 00:01:00,920
<font color="#E5E5E5">we'll</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> more in depth</font><font color="#CCCCCC"> we'll have a look</font>

20
00:00:57,950 --> 00:01:03,500
at its capabilities its design<font color="#E5E5E5"> the API</font>

21
00:01:00,920 --> 00:01:05,720
and plug-in functionality<font color="#CCCCCC"> throughout the</font>

22
00:01:03,500 --> 00:01:07,580
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will do demos lots of</font>

23
00:01:05,720 --> 00:01:10,490
demos<font color="#CCCCCC"> live demos</font><font color="#E5E5E5"> so let's hope</font>

24
00:01:07,580 --> 00:01:12,590
everything<font color="#CCCCCC"> is</font><font color="#E5E5E5"> working my name is</font><font color="#CCCCCC"> ole</font>

25
00:01:10,490 --> 00:01:14,810
<font color="#CCCCCC">frisk</font><font color="#E5E5E5"> I am working as a pen tester by</font>

26
00:01:12,590 --> 00:01:17,060
day<font color="#CCCCCC"> in the financial sector in Stockholm</font>

27
00:01:14,810 --> 00:01:19,790
<font color="#CCCCCC">Sweden</font><font color="#E5E5E5"> and I also try to do some</font>

28
00:01:17,060 --> 00:01:22,220
<font color="#CCCCCC">security research by night</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

29
00:01:19,790 --> 00:01:24,470
author of the<font color="#CCCCCC"> epistle</font><font color="#E5E5E5"> each direct memory</font>

30
00:01:22,220 --> 00:01:27,020
access attack toolkit which represented

31
00:01:24,470 --> 00:01:29,750
two and a half years ago<font color="#E5E5E5"> at</font><font color="#CCCCCC"> DEFCON at</font>

32
00:01:27,020 --> 00:01:31,580
that point in time<font color="#E5E5E5"> most people</font><font color="#CCCCCC"> thought</font>

33
00:01:29,750 --> 00:01:32,150
the<font color="#CCCCCC"> amay attacks were a thing</font><font color="#E5E5E5"> of the</font>

34
00:01:31,580 --> 00:01:34,340
<font color="#CCCCCC">past</font>

35
00:01:32,150 --> 00:01:37,040
since the<font color="#CCCCCC"> CPU vendors had introduced</font>

36
00:01:34,340 --> 00:01:40,070
there are<font color="#E5E5E5"> you</font><font color="#CCCCCC"> mM use integer CPU designs</font>

37
00:01:37,040 --> 00:01:42,229
<font color="#E5E5E5">a couple of years earlier</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> that was</font>

38
00:01:40,070 --> 00:01:44,210
quite not the case I found<font color="#E5E5E5"> a</font><font color="#CCCCCC"> real a</font>

39
00:01:42,229 --> 00:01:46,369
<font color="#CCCCCC">low-cost high performance piece of</font>

40
00:01:44,210 --> 00:01:49,669
hardware<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> able to do</font><font color="#CCCCCC"> D main</font>

41
00:01:46,369 --> 00:01:52,490
straight into memory below<font color="#CCCCCC"> for gigs over</font>

42
00:01:49,670 --> 00:01:54,890
PCI Express<font color="#E5E5E5"> at that point in time</font><font color="#CCCCCC"> that</font>

43
00:01:52,490 --> 00:01:58,490
<font color="#CCCCCC">was plenty to attack most major</font>

44
00:01:54,890 --> 00:02:01,100
operating systems<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hardware it got</font>

45
00:01:58,490 --> 00:02:03,439
kind of popular<font color="#E5E5E5"> it sold out and also</font>

46
00:02:01,100 --> 00:02:05,658
<font color="#CCCCCC">before jig limit was very boring</font><font color="#E5E5E5"> so</font>

47
00:02:03,439 --> 00:02:08,179
that's why I introduced last year<font color="#E5E5E5"> at the</font>

48
00:02:05,659 --> 00:02:11,959
<font color="#E5E5E5">CCC for one little</font><font color="#CCCCCC"> bit over a year ago</font>

49
00:02:08,179 --> 00:02:14,299
<font color="#E5E5E5">public FPGA based DMA attacking and now</font>

50
00:02:11,959 --> 00:02:17,390
<font color="#E5E5E5">were able</font><font color="#CCCCCC"> to access the</font><font color="#E5E5E5"> whole memory</font>

51
00:02:14,299 --> 00:02:18,970
<font color="#E5E5E5">space</font><font color="#CCCCCC"> of the target system</font><font color="#E5E5E5"> everything</font>

52
00:02:17,390 --> 00:02:22,130
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I've been doing</font><font color="#CCCCCC"> I've been doing as</font>

53
00:02:18,970 --> 00:02:24,230
<font color="#E5E5E5">100% open source and up until</font><font color="#CCCCCC"> now it's</font>

54
00:02:22,130 --> 00:02:25,459
been very<font color="#CCCCCC"> attack focused</font>

55
00:02:24,230 --> 00:02:27,079
but I thought it would<font color="#E5E5E5"> be kind of</font>

56
00:02:25,459 --> 00:02:30,050
Awesome to do something for the<font color="#E5E5E5"> blue</font>

57
00:02:27,080 --> 00:02:33,410
team as well<font color="#E5E5E5"> and that is</font><font color="#CCCCCC"> what the</font><font color="#E5E5E5"> memory</font>

58
00:02:30,050 --> 00:02:35,660
process<font color="#E5E5E5"> file system is it's a memory</font>

59
00:02:33,410 --> 00:02:37,760
analysis tool with a very strong<font color="#CCCCCC"> Windows</font>

60
00:02:35,660 --> 00:02:40,099
<font color="#CCCCCC">Focus which allows you to</font><font color="#E5E5E5"> visualize in</font>

61
00:02:37,760 --> 00:02:43,790
memory objects as files and folders<font color="#CCCCCC"> in a</font>

62
00:02:40,099 --> 00:02:46,790
file system<font color="#CCCCCC"> it comes</font><font color="#E5E5E5"> with a</font><font color="#CCCCCC"> cm Python</font>

63
00:02:43,790 --> 00:02:49,400
API<font color="#E5E5E5"> and if I combined multi-threading</font>

64
00:02:46,790 --> 00:02:51,709
<font color="#E5E5E5">together with a native speaker</font><font color="#CCCCCC"> and some</font>

65
00:02:49,400 --> 00:02:54,799
intelligent person in there it's quite

66
00:02:51,709 --> 00:02:57,590
<font color="#E5E5E5">fast it also comes with a wide</font><font color="#CCCCCC"> range of</font>

67
00:02:54,799 --> 00:03:01,670
memory<font color="#CCCCCC"> acquisition methods both hardware</font>

68
00:02:57,590 --> 00:03:04,010
<font color="#CCCCCC">based ones and software based ones so</font>

69
00:03:01,670 --> 00:03:07,429
<font color="#CCCCCC">let's do our first demo for today</font><font color="#E5E5E5"> let's</font>

70
00:03:04,010 --> 00:03:09,679
mount a memory<font color="#E5E5E5"> crash</font><font color="#CCCCCC"> dump file</font><font color="#E5E5E5"> which I</font>

71
00:03:07,430 --> 00:03:12,140
<font color="#CCCCCC">created with the math swish awesome dump</font>

72
00:03:09,680 --> 00:03:15,650
it<font color="#CCCCCC"> too and let's do some point-and-click</font>

73
00:03:12,140 --> 00:03:19,220
analysis this<font color="#CCCCCC"> memory um it's</font><font color="#E5E5E5"> kind of big</font>

74
00:03:15,650 --> 00:03:22,280
it's almost 32 gigs here so let's mount

75
00:03:19,220 --> 00:03:25,849
it<font color="#E5E5E5"> it's already mounted let's have a</font>

76
00:03:22,280 --> 00:03:27,980
look at it<font color="#E5E5E5"> we can click into its mount</font>

77
00:03:25,849 --> 00:03:29,899
it does the<font color="#E5E5E5"> M</font><font color="#CCCCCC"> Drive</font><font color="#E5E5E5"> it's if we click</font>

78
00:03:27,980 --> 00:03:33,138
into the folder we see<font color="#CCCCCC"> in the root</font>

79
00:03:29,900 --> 00:03:35,900
<font color="#CCCCCC">folder we see</font><font color="#E5E5E5"> a copy of the entire</font>

80
00:03:33,139 --> 00:03:37,760
<font color="#E5E5E5">physical memory this</font><font color="#CCCCCC"> is not really</font>

81
00:03:35,900 --> 00:03:40,459
interesting since we are mounting<font color="#E5E5E5"> a</font>

82
00:03:37,760 --> 00:03:42,590
physical memory<font color="#CCCCCC"> crash dump file but</font>

83
00:03:40,459 --> 00:03:45,459
imagine if you're running<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> fpga</font>

84
00:03:42,590 --> 00:03:48,079
system that is going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> yeah super</font>

85
00:03:45,459 --> 00:03:51,230
nice<font color="#CCCCCC"> to have this file in</font><font color="#E5E5E5"> order to do</font>

86
00:03:48,079 --> 00:03:53,000
memory dumps we have a statist directory

87
00:03:51,230 --> 00:03:54,920
which contains<font color="#E5E5E5"> various configuration</font>

88
00:03:53,000 --> 00:03:56,690
files<font color="#E5E5E5"> and configurations options and</font>

89
00:03:54,920 --> 00:03:59,388
some statistics as<font color="#CCCCCC"> well about</font><font color="#E5E5E5"> the</font>

90
00:03:56,690 --> 00:04:01,760
internals but<font color="#CCCCCC"> more interestingly we do</font>

91
00:03:59,389 --> 00:04:05,180
have a folder which contains all<font color="#E5E5E5"> the</font>

92
00:04:01,760 --> 00:04:07,190
<font color="#E5E5E5">processes on</font><font color="#CCCCCC"> the running system</font><font color="#E5E5E5"> the</font>

93
00:04:05,180 --> 00:04:09,889
<font color="#E5E5E5">information is gained by parsing the</font>

94
00:04:07,190 --> 00:04:12,260
actual physical memory of the physical

95
00:04:09,889 --> 00:04:16,030
<font color="#CCCCCC">memory dump or live memory</font><font color="#E5E5E5"> for if we are</font>

96
00:04:12,260 --> 00:04:18,709
using the<font color="#CCCCCC"> FPGA</font><font color="#E5E5E5"> we can click into a</font>

97
00:04:16,029 --> 00:04:22,760
process and in the<font color="#E5E5E5"> root folder</font><font color="#CCCCCC"> of a</font>

98
00:04:18,709 --> 00:04:25,370
process we do have some<font color="#E5E5E5"> files and also</font>

99
00:04:22,760 --> 00:04:28,460
some directories<font color="#E5E5E5"> for example they had</font>

100
00:04:25,370 --> 00:04:31,760
the base of the page tables itself the

101
00:04:28,460 --> 00:04:33,739
director table base or the<font color="#CCCCCC"> PM l4 if we</font>

102
00:04:31,760 --> 00:04:36,260
<font color="#E5E5E5">are running in 64-bit mode the address</font>

103
00:04:33,740 --> 00:04:38,300
of it<font color="#E5E5E5"> available as</font><font color="#CCCCCC"> files</font>

104
00:04:36,260 --> 00:04:40,969
and since it's<font color="#CCCCCC"> available as files</font><font color="#E5E5E5"> you</font>

105
00:04:38,300 --> 00:04:44,660
can<font color="#E5E5E5"> use your own favorite tool at</font>

106
00:04:40,970 --> 00:04:47,090
parsing this and script against<font color="#CCCCCC"> it'll do</font>

107
00:04:44,660 --> 00:04:50,320
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> we can have a look</font><font color="#E5E5E5"> at the</font>

108
00:04:47,090 --> 00:04:53,450
<font color="#E5E5E5">memory map as</font><font color="#CCCCCC"> role</font><font color="#E5E5E5"> the memory map is</font>

109
00:04:50,320 --> 00:04:56,690
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> created by walking the actual page</font>

110
00:04:53,450 --> 00:04:58,640
tables that<font color="#E5E5E5"> the CPU uses to translate</font>

111
00:04:56,690 --> 00:05:01,400
virtual addresses into<font color="#E5E5E5"> physical</font>

112
00:04:58,640 --> 00:05:03,740
addresses<font color="#E5E5E5"> we also try to find out which</font>

113
00:05:01,400 --> 00:05:06,200
<font color="#E5E5E5">permissions bits the server if it's a</font>

114
00:05:03,740 --> 00:05:08,270
read write read only or read<font color="#E5E5E5"> execute for</font>

115
00:05:06,200 --> 00:05:11,390
example and we also try to author

116
00:05:08,270 --> 00:05:15,159
identify which kind<font color="#E5E5E5"> of memory this is if</font>

117
00:05:11,390 --> 00:05:18,409
it belongs to some modules for example

118
00:05:15,160 --> 00:05:21,740
you also have a virtual<font color="#CCCCCC"> memory file and</font>

119
00:05:18,410 --> 00:05:23,810
this<font color="#E5E5E5"> is a copy of</font><font color="#CCCCCC"> faith's</font><font color="#E5E5E5"> yuge here as</font>

120
00:05:21,740 --> 00:05:26,000
you<font color="#CCCCCC"> can see this is a copy</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the entire</font>

121
00:05:23,810 --> 00:05:28,640
virtual<font color="#E5E5E5"> memory space that is available</font>

122
00:05:26,000 --> 00:05:31,490
to use the<font color="#CCCCCC"> mouse you can open it in your</font>

123
00:05:28,640 --> 00:05:33,890
favorite hex editing tools for example

124
00:05:31,490 --> 00:05:36,560
<font color="#CCCCCC">have a look</font><font color="#E5E5E5"> at it have a look at the</font>

125
00:05:33,890 --> 00:05:38,870
memory in there<font color="#E5E5E5"> or if we're using a</font>

126
00:05:36,560 --> 00:05:40,580
variety<font color="#E5E5E5"> a people device such</font><font color="#CCCCCC"> as the PDI</font>

127
00:05:38,870 --> 00:05:42,320
device<font color="#E5E5E5"> I will be showing in a short</font>

128
00:05:40,580 --> 00:05:45,830
while<font color="#E5E5E5"> you can even do variety to this</font>

129
00:05:42,320 --> 00:05:48,110
memory<font color="#E5E5E5"> we have some subfolders as well</font>

130
00:05:45,830 --> 00:05:50,719
<font color="#E5E5E5">we have a</font><font color="#CCCCCC"> Python</font><font color="#E5E5E5"> subfolder and</font>

131
00:05:48,110 --> 00:05:53,270
everything under here is<font color="#E5E5E5"> generated by</font>

132
00:05:50,720 --> 00:05:53,870
tiny<font color="#E5E5E5"> python plugins that you</font><font color="#CCCCCC"> can create</font>

133
00:05:53,270 --> 00:05:56,599
yourself

134
00:05:53,870 --> 00:05:58,780
for example we<font color="#CCCCCC"> are generating</font><font color="#E5E5E5"> on the fly</font>

135
00:05:56,600 --> 00:06:01,910
when we are clicking<font color="#CCCCCC"> it into the folder</font>

136
00:05:58,780 --> 00:06:03,739
the file that<font color="#E5E5E5"> contains</font><font color="#CCCCCC"> the actual eat</font>

137
00:06:01,910 --> 00:06:06,050
<font color="#CCCCCC">process structure</font><font color="#E5E5E5"> in the Windows kernel</font>

138
00:06:03,740 --> 00:06:10,520
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the process that we are clicking</font><font color="#E5E5E5"> into</font>

139
00:06:06,050 --> 00:06:13,040
it<font color="#CCCCCC"> Explorer DXE in this case we have a</font>

140
00:06:10,520 --> 00:06:16,130
module<font color="#E5E5E5"> subdirectory which contains all</font>

141
00:06:13,040 --> 00:06:18,530
<font color="#E5E5E5">loaded modules as in the process as</font>

142
00:06:16,130 --> 00:06:21,200
files and folders for<font color="#E5E5E5"> example click</font><font color="#CCCCCC"> into</font>

143
00:06:18,530 --> 00:06:22,969
7-zip have a look at<font color="#E5E5E5"> its exported</font>

144
00:06:21,200 --> 00:06:25,580
functions<font color="#E5E5E5"> we can have a look at its</font>

145
00:06:22,970 --> 00:06:27,830
<font color="#CCCCCC">imported functions</font><font color="#E5E5E5"> and by us clicking on</font>

146
00:06:25,580 --> 00:06:29,900
files and here we see where<font color="#E5E5E5"> the memory</font>

147
00:06:27,830 --> 00:06:32,630
address of the function<font color="#CCCCCC"> is the name of</font>

148
00:06:29,900 --> 00:06:35,270
<font color="#CCCCCC">the function</font><font color="#E5E5E5"> and also which module is</font>

149
00:06:32,630 --> 00:06:39,680
loaded<font color="#E5E5E5"> from we can</font><font color="#CCCCCC"> have a look</font><font color="#E5E5E5"> at things</font>

150
00:06:35,270 --> 00:06:41,539
<font color="#E5E5E5">like their sections and it's available</font>

151
00:06:39,680 --> 00:06:44,120
<font color="#CCCCCC">let me see the addresses and the</font>

152
00:06:41,540 --> 00:06:45,800
permissions<font color="#CCCCCC"> and we can if we do wish to</font>

153
00:06:44,120 --> 00:06:48,530
<font color="#CCCCCC">have a look at the sections in our hex</font>

154
00:06:45,800 --> 00:06:49,910
editor we<font color="#E5E5E5"> can even</font><font color="#CCCCCC"> open it in our</font>

155
00:06:48,530 --> 00:06:52,489
favorite tools like

156
00:06:49,910 --> 00:06:55,040
that and if we're running<font color="#E5E5E5"> against the</font>

157
00:06:52,490 --> 00:06:58,640
right capable device<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> even able</font><font color="#CCCCCC"> to</font>

158
00:06:55,040 --> 00:07:01,550
write<font color="#E5E5E5"> to these sections as well so but</font>

159
00:06:58,640 --> 00:07:06,500
the writing is much easier if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are</font>

160
00:07:01,550 --> 00:07:08,450
using the<font color="#E5E5E5"> FPGA board and we can do live</font>

161
00:07:06,500 --> 00:07:14,120
analysis with a hardware<font color="#E5E5E5"> device as well</font>

162
00:07:08,450 --> 00:07:16,520
<font color="#E5E5E5">and I do have my analysis</font><font color="#CCCCCC"> computer here</font>

163
00:07:14,120 --> 00:07:18,650
today it's my presenting computer and<font color="#CCCCCC"> I</font>

164
00:07:16,520 --> 00:07:21,349
do create in<font color="#E5E5E5"> software the PCI Express</font>

165
00:07:18,650 --> 00:07:23,539
<font color="#CCCCCC">transaction layer packets</font><font color="#E5E5E5"> a memory read</font>

166
00:07:21,350 --> 00:07:25,280
packet in this case<font color="#E5E5E5"> wrap it in some</font>

167
00:07:23,540 --> 00:07:27,860
extract metadata which allows me to

168
00:07:25,280 --> 00:07:31,099
transmit it over USB<font color="#CCCCCC"> free onto the FPGA</font>

169
00:07:27,860 --> 00:07:32,540
board once it reaches the FPGA that PJ

170
00:07:31,100 --> 00:07:34,520
takes<font color="#E5E5E5"> the raw piece expression</font>

171
00:07:32,540 --> 00:07:36,830
abstraction layer packet puts it on<font color="#CCCCCC"> the</font>

172
00:07:34,520 --> 00:07:38,659
PCI<font color="#CCCCCC"> Express of the target system</font><font color="#E5E5E5"> today</font>

173
00:07:36,830 --> 00:07:40,849
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> using Express card here for</font>

174
00:07:38,660 --> 00:07:43,850
<font color="#CCCCCC">convenience but you may also use other</font>

175
00:07:40,850 --> 00:07:45,440
<font color="#E5E5E5">things</font><font color="#CCCCCC"> like Thunderbolt for example once</font>

176
00:07:43,850 --> 00:07:47,390
the<font color="#CCCCCC"> piece Express transaction layer</font>

177
00:07:45,440 --> 00:07:50,270
packet reaches the<font color="#E5E5E5"> target system</font><font color="#CCCCCC"> route</font>

178
00:07:47,390 --> 00:07:51,710
complex<font color="#CCCCCC"> it reads the memory of the</font>

179
00:07:50,270 --> 00:07:53,719
target system<font color="#CCCCCC"> and responds with a</font>

180
00:07:51,710 --> 00:07:55,880
complete<font color="#CCCCCC"> - in packet containing the</font>

181
00:07:53,720 --> 00:07:58,010
<font color="#CCCCCC">actual data read transmits it back to</font>

182
00:07:55,880 --> 00:08:00,500
the FPGA<font color="#E5E5E5"> which then forwards</font><font color="#CCCCCC"> its back to</font>

183
00:07:58,010 --> 00:08:02,539
the<font color="#CCCCCC"> analysis computer</font><font color="#E5E5E5"> this way we</font><font color="#CCCCCC"> are</font>

184
00:08:00,500 --> 00:08:06,410
able to<font color="#E5E5E5"> both read and write physical</font>

185
00:08:02,540 --> 00:08:08,660
memory<font color="#E5E5E5"> with a</font><font color="#CCCCCC"> hardware device</font><font color="#E5E5E5"> so let's</font>

186
00:08:06,410 --> 00:08:10,550
do another<font color="#E5E5E5"> demo</font><font color="#CCCCCC"> let's have a look at</font>

187
00:08:08,660 --> 00:08:14,150
that we<font color="#CCCCCC"> can acquire some live memory</font>

188
00:08:10,550 --> 00:08:16,310
<font color="#E5E5E5">with this hardware device</font><font color="#CCCCCC"> and we also</font>

189
00:08:14,150 --> 00:08:21,260
see how<font color="#E5E5E5"> changes on the target is also</font>

190
00:08:16,310 --> 00:08:22,760
detected so I<font color="#E5E5E5"> already if you switch to</font>

191
00:08:21,260 --> 00:08:28,480
<font color="#E5E5E5">the FPGA we have it on the</font><font color="#CCCCCC"> screen</font>

192
00:08:22,760 --> 00:08:31,070
<font color="#E5E5E5">awesome and I am already mounted it and</font>

193
00:08:28,480 --> 00:08:32,659
<font color="#E5E5E5">we are running some background refreshes</font>

194
00:08:31,070 --> 00:08:36,468
here in the<font color="#E5E5E5"> background that allows us</font><font color="#CCCCCC"> to</font>

195
00:08:32,659 --> 00:08:41,089
<font color="#E5E5E5">detect new</font><font color="#CCCCCC"> processes running however</font>

196
00:08:36,469 --> 00:08:44,300
this is<font color="#CCCCCC"> the view of the this</font><font color="#E5E5E5"> system here</font>

197
00:08:41,090 --> 00:08:46,100
<font color="#E5E5E5">and this processes and as you can see</font><font color="#CCCCCC"> in</font>

198
00:08:44,300 --> 00:08:48,500
the process<font color="#CCCCCC"> list if we scroll down to</font><font color="#E5E5E5"> M</font>

199
00:08:46,100 --> 00:08:51,410
here somewhere and we<font color="#CCCCCC"> don't have the</font>

200
00:08:48,500 --> 00:08:55,070
paint process<font color="#E5E5E5"> started</font><font color="#CCCCCC"> for example so</font><font color="#E5E5E5"> we</font>

201
00:08:51,410 --> 00:08:56,780
<font color="#CCCCCC">can start</font><font color="#E5E5E5"> the paint process and it</font>

202
00:08:55,070 --> 00:09:01,150
started and let's see<font color="#E5E5E5"> if we can do a</font>

203
00:08:56,780 --> 00:09:01,150
refresh here<font color="#CCCCCC"> if it appears</font>

204
00:09:10,180 --> 00:09:16,390
if it<font color="#E5E5E5"> appears yes and it appears here so</font>

205
00:09:14,190 --> 00:09:19,420
<font color="#CCCCCC">we</font><font color="#E5E5E5"> are doing background process</font>

206
00:09:16,390 --> 00:09:21,880
refreshes<font color="#CCCCCC"> and everything that this</font>

207
00:09:19,420 --> 00:09:25,060
change in the<font color="#CCCCCC"> system is order reflected</font>

208
00:09:21,880 --> 00:09:26,950
in this file<font color="#CCCCCC"> system this</font><font color="#E5E5E5"> demon file that</font>

209
00:09:25,060 --> 00:09:28,959
we talked<font color="#E5E5E5"> about earlier</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the physical</font>

210
00:09:26,950 --> 00:09:32,200
memory file we can dump the physical

211
00:09:28,960 --> 00:09:34,540
memory of the target system<font color="#E5E5E5"> by just</font>

212
00:09:32,200 --> 00:09:36,490
copying the<font color="#E5E5E5"> file in Windows Explorer</font><font color="#CCCCCC"> and</font>

213
00:09:34,540 --> 00:09:40,360
now we're dumping the physical memory of

214
00:09:36,490 --> 00:09:44,140
this computer here at speeds around<font color="#CCCCCC"> 40</font>

215
00:09:40,360 --> 00:09:50,890
<font color="#CCCCCC">to 50</font><font color="#E5E5E5"> megabytes per second so let's</font>

216
00:09:44,140 --> 00:09:53,770
continue<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> show the</font><font color="#E5E5E5"> first use case</font>

217
00:09:50,890 --> 00:09:56,590
<font color="#CCCCCC">it was me when</font><font color="#E5E5E5"> I was creating this a</font>

218
00:09:53,770 --> 00:09:59,860
really early version<font color="#E5E5E5"> how I came across a</font>

219
00:09:56,590 --> 00:10:01,870
Windows<font color="#E5E5E5"> 7 total meltdown</font><font color="#CCCCCC"> it was a local</font>

220
00:09:59,860 --> 00:10:04,210
privilege escalation vulnerability that

221
00:10:01,870 --> 00:10:07,000
allowed any user to<font color="#E5E5E5"> escalate the kernel</font>

222
00:10:04,210 --> 00:10:10,330
tribulus it allowed arbitrary physical

223
00:10:07,000 --> 00:10:12,700
memory access<font color="#E5E5E5"> and</font><font color="#CCCCCC"> allowed memory reads</font>

224
00:10:10,330 --> 00:10:15,490
and writes at gigabytes per second<font color="#E5E5E5"> it</font>

225
00:10:12,700 --> 00:10:17,320
only affected Windows 7 and 2008 r2 and

226
00:10:15,490 --> 00:10:19,600
<font color="#CCCCCC">it was</font><font color="#E5E5E5"> something that was introduced</font>

227
00:10:17,320 --> 00:10:21,940
last year<font color="#E5E5E5"> in January</font><font color="#CCCCCC"> in the meltdown</font>

228
00:10:19,600 --> 00:10:25,570
patches and it looked<font color="#E5E5E5"> like it was</font>

229
00:10:21,940 --> 00:10:27,310
patched in March last<font color="#E5E5E5"> year but I didn't</font>

230
00:10:25,570 --> 00:10:29,710
see anything about it in the release

231
00:10:27,310 --> 00:10:31,599
<font color="#CCCCCC">notes from</font><font color="#E5E5E5"> nsrc and I thought the issue</font>

232
00:10:29,710 --> 00:10:33,640
was really<font color="#E5E5E5"> interesting so</font><font color="#CCCCCC"> I wanted to</font>

233
00:10:31,600 --> 00:10:36,370
<font color="#E5E5E5">write a blog entry about it so I</font>

234
00:10:33,640 --> 00:10:38,439
contacted<font color="#CCCCCC"> nsrc</font><font color="#E5E5E5"> and they got back to me a</font>

235
00:10:36,370 --> 00:10:41,560
couple of days later on with an<font color="#CCCCCC"> OK to</font>

236
00:10:38,440 --> 00:10:43,840
publish this blog<font color="#CCCCCC"> entry and in order to</font>

237
00:10:41,560 --> 00:10:46,270
make it a little bit more interesting

238
00:10:43,840 --> 00:10:48,490
since<font color="#E5E5E5"> it was fixed right I decided to</font>

239
00:10:46,270 --> 00:10:51,310
publish a<font color="#CCCCCC"> proof-of-concept</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> as</font>

240
00:10:48,490 --> 00:10:53,800
you should<font color="#E5E5E5"> do only problem was it wasn't</font>

241
00:10:51,310 --> 00:10:56,709
<font color="#E5E5E5">fixed and I released a trivalent</font>

242
00:10:53,800 --> 00:10:58,479
exploitable kernel<font color="#CCCCCC"> zero-day</font><font color="#E5E5E5"> it was</font>

243
00:10:56,710 --> 00:11:01,300
actually fixed if<font color="#E5E5E5"> you were</font><font color="#CCCCCC"> running with</font>

244
00:10:58,480 --> 00:11:04,450
<font color="#E5E5E5">them</font><font color="#CCCCCC"> administrator privileges</font><font color="#E5E5E5"> or if you</font>

245
00:11:01,300 --> 00:11:06,040
were<font color="#E5E5E5"> running</font><font color="#CCCCCC"> your process as system but</font>

246
00:11:04,450 --> 00:11:08,560
it was not fixed<font color="#CCCCCC"> if you were running</font>

247
00:11:06,040 --> 00:11:09,449
<font color="#CCCCCC">your process as a normal low privilege</font>

248
00:11:08,560 --> 00:11:12,459
user

249
00:11:09,450 --> 00:11:14,910
luckily<font color="#E5E5E5"> Microsoft was able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> come</font><font color="#CCCCCC"> up</font>

250
00:11:12,460 --> 00:11:17,710
<font color="#CCCCCC">with and after</font><font color="#E5E5E5"> band patch in super fast</font>

251
00:11:14,910 --> 00:11:20,110
time<font color="#CCCCCC"> frames</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> released</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> out-of-band</font>

252
00:11:17,710 --> 00:11:20,770
patch for the memory manager in the

253
00:11:20,110 --> 00:11:23,200
kernel

254
00:11:20,770 --> 00:11:26,319
<font color="#CCCCCC">just two</font><font color="#E5E5E5"> days after</font>

255
00:11:23,200 --> 00:11:29,950
I published my initial blog post so

256
00:11:26,320 --> 00:11:32,950
really thank you<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that I'm going</font><font color="#E5E5E5"> to</font>

257
00:11:29,950 --> 00:11:35,829
demo<font color="#E5E5E5"> do a demo how I came across to find</font>

258
00:11:32,950 --> 00:11:38,430
it and<font color="#CCCCCC"> we'll find it by looking</font><font color="#E5E5E5"> at the</font>

259
00:11:35,829 --> 00:11:41,229
memory<font color="#E5E5E5"> map we had just</font><font color="#CCCCCC"> had a</font><font color="#E5E5E5"> look at and</font>

260
00:11:38,430 --> 00:11:43,959
<font color="#CCCCCC">Darrell</font><font color="#E5E5E5"> will see that the</font><font color="#CCCCCC"> PML for self</font>

261
00:11:41,230 --> 00:11:46,570
referential<font color="#E5E5E5"> entry which is</font><font color="#CCCCCC"> the base of</font>

262
00:11:43,959 --> 00:11:49,149
<font color="#CCCCCC">the page table</font><font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> straight into</font>

263
00:11:46,570 --> 00:11:51,250
user mode<font color="#E5E5E5"> so let's switch back</font><font color="#CCCCCC"> here</font>

264
00:11:49,149 --> 00:11:54,399
<font color="#E5E5E5">they're copying is still going on</font><font color="#CCCCCC"> it can</font>

265
00:11:51,250 --> 00:11:57,160
do<font color="#E5E5E5"> that but here I do have</font><font color="#CCCCCC"> a vulnerable</font>

266
00:11:54,399 --> 00:11:59,620
virtual machine<font color="#CCCCCC"> that is more involved 2d</font>

267
00:11:57,160 --> 00:12:01,300
<font color="#CCCCCC">and it's patch with</font><font color="#E5E5E5"> the general patches</font>

268
00:11:59,620 --> 00:12:04,449
from<font color="#E5E5E5"> last year so</font><font color="#CCCCCC"> it's vulnerable to the</font>

269
00:12:01,300 --> 00:12:07,569
total meltdown vulnerability<font color="#E5E5E5"> so let's</font>

270
00:12:04,449 --> 00:12:10,060
mount the<font color="#E5E5E5"> memory process</font><font color="#CCCCCC"> filesystem</font><font color="#E5E5E5"> and</font>

271
00:12:07,570 --> 00:12:11,529
this<font color="#E5E5E5"> is how</font><font color="#CCCCCC"> I came</font><font color="#E5E5E5"> across it of course</font>

272
00:12:10,060 --> 00:12:13,630
I'm cheated a little<font color="#E5E5E5"> bit here today</font>

273
00:12:11,529 --> 00:12:15,760
<font color="#CCCCCC">system using the actual vulnerability to</font>

274
00:12:13,630 --> 00:12:17,649
mount the<font color="#E5E5E5"> filesystem when I was</font>

275
00:12:15,760 --> 00:12:21,250
initially<font color="#E5E5E5"> researching this I was using</font>

276
00:12:17,649 --> 00:12:25,029
the FPGA<font color="#E5E5E5"> hardware we just showed</font><font color="#CCCCCC"> then</font>

277
00:12:21,250 --> 00:12:27,100
click into<font color="#E5E5E5"> the file system and</font><font color="#CCCCCC"> go into</font>

278
00:12:25,029 --> 00:12:29,610
some process for<font color="#CCCCCC"> example the CMD and</font>

279
00:12:27,100 --> 00:12:33,550
let's have<font color="#E5E5E5"> a look at this memory and map</font>

280
00:12:29,610 --> 00:12:35,800
open it in our favorite text editor<font color="#E5E5E5"> and</font>

281
00:12:33,550 --> 00:12:37,899
it looks pretty<font color="#CCCCCC"> normal here it's lipst</font>

282
00:12:35,800 --> 00:12:41,949
<font color="#E5E5E5">how it should do and we have some memory</font>

283
00:12:37,899 --> 00:12:42,430
addresses and<font color="#E5E5E5"> some modules this is all</font>

284
00:12:41,949 --> 00:12:46,000
normal

285
00:12:42,430 --> 00:12:47,949
until you scroll down at end<font color="#E5E5E5"> and what is</font>

286
00:12:46,000 --> 00:12:50,410
this<font color="#E5E5E5"> this is memory addresses that are</font>

287
00:12:47,949 --> 00:12:53,560
starting with lots of F's<font color="#E5E5E5"> and they are</font>

288
00:12:50,410 --> 00:12:55,930
not<font color="#E5E5E5"> marked as kernel pages so what is</font>

289
00:12:53,560 --> 00:12:57,880
<font color="#E5E5E5">going on here addresses starting with</font>

290
00:12:55,930 --> 00:12:59,739
lots of X<font color="#CCCCCC"> they're supposed</font><font color="#E5E5E5"> to be where</font>

291
00:12:57,880 --> 00:13:03,130
they're normally belonging to the kernel

292
00:12:59,740 --> 00:13:05,680
itself<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is really strange</font><font color="#CCCCCC"> I was</font>

293
00:13:03,130 --> 00:13:07,510
<font color="#CCCCCC">also able to use dump</font><font color="#E5E5E5"> physical memory</font>

294
00:13:05,680 --> 00:13:10,989
from<font color="#E5E5E5"> the system at quite high speeds</font>

295
00:13:07,510 --> 00:13:12,790
around<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Jigga bytes per second and I</font>

296
00:13:10,990 --> 00:13:17,949
was also<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to gain kernel code</font>

297
00:13:12,790 --> 00:13:20,920
execution and here I had kernel code

298
00:13:17,949 --> 00:13:24,399
execution I loaded my backdoor module at

299
00:13:20,920 --> 00:13:26,680
this physical address<font color="#E5E5E5"> so what is going</font>

300
00:13:24,399 --> 00:13:30,399
<font color="#CCCCCC">on here</font><font color="#E5E5E5"> let's have</font><font color="#CCCCCC"> a look at it let's</font>

301
00:13:26,680 --> 00:13:32,910
have<font color="#CCCCCC"> a closer look at it going into the</font>

302
00:13:30,399 --> 00:13:36,510
CMD process

303
00:13:32,910 --> 00:13:38,969
and let's have<font color="#E5E5E5"> a look at the year</font><font color="#CCCCCC"> PML</font>

304
00:13:36,510 --> 00:13:41,430
force or the basis of<font color="#E5E5E5"> the page tables</font>

305
00:13:38,970 --> 00:13:43,350
<font color="#E5E5E5">since the</font><font color="#CCCCCC"> Melton patches in January last</font>

306
00:13:41,430 --> 00:13:47,069
<font color="#E5E5E5">year we do have two different page</font>

307
00:13:43,350 --> 00:13:49,470
tables<font color="#E5E5E5"> that's the actual Melton fix</font><font color="#CCCCCC"> we</font>

308
00:13:47,070 --> 00:13:51,780
<font color="#E5E5E5">have the original</font><font color="#CCCCCC"> PML for which</font><font color="#E5E5E5"> is</font>

309
00:13:49,470 --> 00:13:55,170
nowadays<font color="#E5E5E5"> is reserved for admin processes</font>

310
00:13:51,780 --> 00:13:58,020
and<font color="#CCCCCC"> colonel view of processes and then</font>

311
00:13:55,170 --> 00:14:00,270
we have the user mode<font color="#CCCCCC"> PML for</font><font color="#E5E5E5"> that is a</font>

312
00:13:58,020 --> 00:14:01,680
separate one the new one<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> have a</font>

313
00:14:00,270 --> 00:14:05,280
look at the first one<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> do a hex</font>

314
00:14:01,680 --> 00:14:07,680
dump of it and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the original</font>

315
00:14:05,280 --> 00:14:10,709
<font color="#E5E5E5">primal form and in Windows 7</font><font color="#CCCCCC"> we have a</font>

316
00:14:07,680 --> 00:14:13,670
<font color="#E5E5E5">really special</font><font color="#CCCCCC"> PML for entry in the page</font>

317
00:14:10,710 --> 00:14:16,530
table topmost page table<font color="#E5E5E5"> up offset f68</font>

318
00:14:13,670 --> 00:14:18,319
<font color="#E5E5E5">it's now randomized in Windows 10 I</font>

319
00:14:16,530 --> 00:14:22,680
believe<font color="#E5E5E5"> but in Windows 7 is still</font>

320
00:14:18,320 --> 00:14:25,050
<font color="#E5E5E5">located at offset f68 and it basically</font>

321
00:14:22,680 --> 00:14:27,900
references the<font color="#CCCCCC"> PML for itself</font>

322
00:14:25,050 --> 00:14:32,010
and this<font color="#E5E5E5"> is in little-endian so it</font>

323
00:14:27,900 --> 00:14:34,050
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> ends with</font><font color="#CCCCCC"> 67 and 7 if you read</font>

324
00:14:32,010 --> 00:14:36,870
the internal manual it means that it's

325
00:14:34,050 --> 00:14:39,359
active<font color="#E5E5E5"> it's bright table and it's</font>

326
00:14:36,870 --> 00:14:42,480
accessible<font color="#E5E5E5"> from user mode and that</font>

327
00:14:39,360 --> 00:14:46,290
shouldn't be if you have a look at the

328
00:14:42,480 --> 00:14:49,370
user mode<font color="#CCCCCC"> PML 4 as well we see the</font><font color="#E5E5E5"> same</font>

329
00:14:46,290 --> 00:14:53,069
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> at offset</font><font color="#E5E5E5"> f68</font>

330
00:14:49,370 --> 00:14:58,920
it ends with 67 or ends with a 7 and

331
00:14:53,070 --> 00:15:01,650
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual vulnerability the</font>

332
00:14:58,920 --> 00:15:05,910
actual vulnerability was one<font color="#CCCCCC"> single bit</font>

333
00:15:01,650 --> 00:15:09,090
<font color="#CCCCCC">stepped</font><font color="#E5E5E5"> in error and this allowed any</font>

334
00:15:05,910 --> 00:15:11,610
user mode process to access its own page

335
00:15:09,090 --> 00:15:14,760
tables<font color="#E5E5E5"> and if you could access</font><font color="#CCCCCC"> your own</font>

336
00:15:11,610 --> 00:15:17,430
<font color="#E5E5E5">page tables you could do like a very</font>

337
00:15:14,760 --> 00:15:19,290
trivial<font color="#E5E5E5"> exploit I don't even want to</font>

338
00:15:17,430 --> 00:15:23,880
<font color="#E5E5E5">call it that</font><font color="#CCCCCC"> because it was so simple</font>

339
00:15:19,290 --> 00:15:26,939
<font color="#CCCCCC">and you could insert</font><font color="#E5E5E5"> your own fake page</font>

340
00:15:23,880 --> 00:15:29,400
table entries and<font color="#E5E5E5"> basically do</font><font color="#CCCCCC"> readwrite</font>

341
00:15:26,940 --> 00:15:32,370
<font color="#CCCCCC">to the entire physical memory</font><font color="#E5E5E5"> and in</font>

342
00:15:29,400 --> 00:15:35,790
that way<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can take pretty much total</font>

343
00:15:32,370 --> 00:15:38,130
control<font color="#CCCCCC"> of everything</font><font color="#E5E5E5"> so I didn't even</font>

344
00:15:35,790 --> 00:15:40,949
need to<font color="#E5E5E5"> do any API calls for it</font><font color="#CCCCCC"> just</font>

345
00:15:38,130 --> 00:15:44,130
insert<font color="#CCCCCC"> a page table</font><font color="#E5E5E5"> entry already mapped</font>

346
00:15:40,950 --> 00:15:45,640
in process memory<font color="#E5E5E5"> and read</font><font color="#CCCCCC"> orbitary</font>

347
00:15:44,130 --> 00:15:49,000
physical memory

348
00:15:45,640 --> 00:15:51,670
another use case<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I didn't expect at</font>

349
00:15:49,000 --> 00:15:55,209
all<font color="#E5E5E5"> myself</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> something I became</font>

350
00:15:51,670 --> 00:15:57,939
aware of last summer it was<font color="#E5E5E5"> cheating in</font>

351
00:15:55,209 --> 00:16:00,760
games<font color="#E5E5E5"> it turned out</font><font color="#CCCCCC"> that I didn't know</font>

352
00:15:57,940 --> 00:16:03,220
this but<font color="#CCCCCC"> anti sheets they are</font><font color="#E5E5E5"> quite</font>

353
00:16:00,760 --> 00:16:05,800
powerful pieces<font color="#E5E5E5"> of software they detect</font>

354
00:16:03,220 --> 00:16:09,550
most software based sheets if not wall

355
00:16:05,800 --> 00:16:12,010
and in theory<font color="#CCCCCC"> a horrible sheet it should</font>

356
00:16:09,550 --> 00:16:15,099
only be seen as a<font color="#CCCCCC"> PC Express device on</font>

357
00:16:12,010 --> 00:16:17,890
your gaming<font color="#CCCCCC"> system and then you could do</font>

358
00:16:15,100 --> 00:16:20,350
DMA from this<font color="#CCCCCC"> PCI Express device</font><font color="#E5E5E5"> and</font>

359
00:16:17,890 --> 00:16:23,410
ship the memory to<font color="#E5E5E5"> another computer and</font>

360
00:16:20,350 --> 00:16:25,089
do the<font color="#E5E5E5"> memory analysis in there and in</font>

361
00:16:23,410 --> 00:16:27,339
<font color="#E5E5E5">the NT sheet cannot reach into that</font>

362
00:16:25,089 --> 00:16:29,230
separate computer and you<font color="#CCCCCC"> can you need</font>

363
00:16:27,339 --> 00:16:32,260
<font color="#E5E5E5">to</font><font color="#CCCCCC"> have PCI Express devices in your</font>

364
00:16:29,230 --> 00:16:34,420
gaming system<font color="#E5E5E5"> right graphics cards and</font>

365
00:16:32,260 --> 00:16:35,860
<font color="#E5E5E5">things like that you could do things</font>

366
00:16:34,420 --> 00:16:38,740
like<font color="#CCCCCC"> a read-only</font>

367
00:16:35,860 --> 00:16:41,529
<font color="#E5E5E5">only thing you can do like a map</font><font color="#CCCCCC"> decloak</font>

368
00:16:38,740 --> 00:16:43,810
<font color="#E5E5E5">and spy on</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> opponent's locations in</font>

369
00:16:41,529 --> 00:16:45,820
the<font color="#E5E5E5"> games process for</font><font color="#CCCCCC"> example if there</font>

370
00:16:43,810 --> 00:16:48,339
are<font color="#E5E5E5"> in there and</font><font color="#CCCCCC"> they're quite often in</font>

371
00:16:45,820 --> 00:16:50,709
<font color="#E5E5E5">there since for performance reasons you</font>

372
00:16:48,339 --> 00:16:52,240
could also do<font color="#CCCCCC"> readwrite</font><font color="#E5E5E5"> but the</font><font color="#CCCCCC"> bright</font>

373
00:16:50,709 --> 00:16:55,719
<font color="#CCCCCC">thing might be a little</font><font color="#E5E5E5"> bit more is a</font>

374
00:16:52,240 --> 00:16:57,970
<font color="#E5E5E5">little bit detectable I first became</font>

375
00:16:55,720 --> 00:17:00,130
aware of this last summer<font color="#CCCCCC"> where it was</font>

376
00:16:57,970 --> 00:17:02,529
like a big cheating scandal in the<font color="#CCCCCC"> Year</font>

377
00:17:00,130 --> 00:17:04,809
<font color="#CCCCCC">CES girl community</font><font color="#E5E5E5"> turned out that</font>

378
00:17:02,529 --> 00:17:06,939
<font color="#E5E5E5">people have been cheating at home and</font><font color="#CCCCCC"> on</font>

379
00:17:04,809 --> 00:17:09,639
lands to which it was<font color="#CCCCCC"> ok to</font><font color="#E5E5E5"> bring your</font>

380
00:17:06,939 --> 00:17:12,579
own computer<font color="#CCCCCC"> so you could have this</font><font color="#E5E5E5"> fpga</font>

381
00:17:09,640 --> 00:17:15,309
board<font color="#E5E5E5"> inserted into it and then a couple</font>

382
00:17:12,579 --> 00:17:18,040
<font color="#CCCCCC">of months later on</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> a sheet focused</font>

383
00:17:15,309 --> 00:17:21,520
fork<font color="#E5E5E5"> on my</font><font color="#CCCCCC"> pc</font><font color="#E5E5E5"> a leaf software appeared</font>

384
00:17:18,040 --> 00:17:27,250
on github<font color="#E5E5E5"> and this is how it looks like</font>

385
00:17:21,520 --> 00:17:29,918
if we<font color="#E5E5E5"> look very closely this is the</font><font color="#CCCCCC"> PC</font>

386
00:17:27,250 --> 00:17:34,510
<font color="#CCCCCC">express screamer FPGA board</font><font color="#E5E5E5"> inserted in</font>

387
00:17:29,919 --> 00:17:36,850
<font color="#E5E5E5">this gaming PC and if initially</font><font color="#CCCCCC"> anti</font>

388
00:17:34,510 --> 00:17:39,190
sheets<font color="#E5E5E5"> didn't detect this at all</font><font color="#CCCCCC"> so it</font>

389
00:17:36,850 --> 00:17:41,439
was like touted as the<font color="#CCCCCC"> next generation</font>

390
00:17:39,190 --> 00:17:44,700
of<font color="#CCCCCC"> sheeting the</font><font color="#E5E5E5"> completely undetectable</font>

391
00:17:41,440 --> 00:17:49,030
sheeting<font color="#E5E5E5"> and the future of sheeting and</font>

392
00:17:44,700 --> 00:17:53,410
that was quite not the case for<font color="#CCCCCC"> example</font>

393
00:17:49,030 --> 00:17:56,200
it took<font color="#E5E5E5"> a while but in eventually the</font>

394
00:17:53,410 --> 00:17:58,120
anti sheets caught up<font color="#CCCCCC"> and is here which</font>

395
00:17:56,200 --> 00:17:58,790
<font color="#E5E5E5">has a quite good</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> sheet when they</font>

396
00:17:58,120 --> 00:18:00,620
started

397
00:17:58,790 --> 00:18:02,510
acting it they brought a blog entry

398
00:18:00,620 --> 00:18:04,729
<font color="#CCCCCC">about it geared toward the gaming</font>

399
00:18:02,510 --> 00:18:07,070
community<font color="#CCCCCC"> when they explained on a very</font>

400
00:18:04,730 --> 00:18:10,310
high<font color="#E5E5E5"> level how it looks like that you</font>

401
00:18:07,070 --> 00:18:12,379
have a<font color="#CCCCCC"> DNA device in</font><font color="#E5E5E5"> your gaming PC you</font>

402
00:18:10,310 --> 00:18:15,200
read the<font color="#E5E5E5"> memory to your attack PC and</font>

403
00:18:12,380 --> 00:18:19,370
you somehow<font color="#E5E5E5"> ship the</font><font color="#CCCCCC"> locations</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> your</font>

404
00:18:15,200 --> 00:18:21,110
<font color="#CCCCCC">opponent's to a phone for example they</font>

405
00:18:19,370 --> 00:18:22,850
claim that<font color="#CCCCCC"> cheats have been selling in</font>

406
00:18:21,110 --> 00:18:25,490
the range<font color="#E5E5E5"> fifteen</font><font color="#CCCCCC"> hundred to five</font>

407
00:18:22,850 --> 00:18:28,969
thousand dollars<font color="#CCCCCC"> and of course when they</font>

408
00:18:25,490 --> 00:18:31,100
initially<font color="#CCCCCC"> started doing</font><font color="#E5E5E5"> detection and it</font>

409
00:18:28,970 --> 00:18:33,620
resulted<font color="#CCCCCC"> the ban waivable sheet</font>

410
00:18:31,100 --> 00:18:36,350
customers and developers<font color="#CCCCCC"> initial it was</font>

411
00:18:33,620 --> 00:18:38,570
quite<font color="#E5E5E5"> easy to detect</font><font color="#CCCCCC"> since most people</font>

412
00:18:36,350 --> 00:18:40,820
<font color="#E5E5E5">were actually</font><font color="#CCCCCC"> using my default bit</font>

413
00:18:38,570 --> 00:18:44,300
streams for the<font color="#CCCCCC"> fpga</font><font color="#E5E5E5"> which has some</font>

414
00:18:40,820 --> 00:18:46,040
hard-coded device IDs in there and so

415
00:18:44,300 --> 00:18:48,950
you<font color="#CCCCCC"> just look for those device IDs and</font>

416
00:18:46,040 --> 00:18:50,600
<font color="#E5E5E5">right you're probably</font><font color="#CCCCCC"> a cheater</font><font color="#E5E5E5"> but they</font>

417
00:18:48,950 --> 00:18:52,220
also claim that are<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to detect</font>

418
00:18:50,600 --> 00:18:54,469
<font color="#E5E5E5">hardware-based sheets</font><font color="#CCCCCC"> even when</font>

419
00:18:52,220 --> 00:18:58,370
<font color="#CCCCCC">disguising the sheet as a legitimate</font>

420
00:18:54,470 --> 00:19:01,790
<font color="#E5E5E5">device</font><font color="#CCCCCC"> I'm not 100%</font><font color="#E5E5E5"> sure that's true in</font>

421
00:18:58,370 --> 00:19:05,350
all cases<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> certainly makes</font>

422
00:19:01,790 --> 00:19:08,060
<font color="#CCCCCC">hardware-based</font><font color="#E5E5E5"> cheating a lot harder so</font>

423
00:19:05,350 --> 00:19:11,360
<font color="#CCCCCC">when I</font><font color="#E5E5E5"> was creating the memory process</font>

424
00:19:08,060 --> 00:19:15,830
<font color="#E5E5E5">file system had some overall design</font>

425
00:19:11,360 --> 00:19:17,750
girls<font color="#E5E5E5"> the most important one was to</font><font color="#CCCCCC"> have</font>

426
00:19:15,830 --> 00:19:20,060
<font color="#CCCCCC">it</font><font color="#E5E5E5"> really easy to be easy to</font><font color="#CCCCCC"> use</font>

427
00:19:17,750 --> 00:19:22,310
<font color="#E5E5E5">something that I could use myself</font><font color="#CCCCCC"> I'm</font>

428
00:19:20,060 --> 00:19:23,929
kind of new<font color="#CCCCCC"> into</font><font color="#E5E5E5"> secure to myself and I</font>

429
00:19:22,310 --> 00:19:26,360
<font color="#CCCCCC">don't know my</font><font color="#E5E5E5"> way around all these</font>

430
00:19:23,930 --> 00:19:27,950
<font color="#CCCCCC">command-line tools and so it will</font><font color="#E5E5E5"> be</font>

431
00:19:26,360 --> 00:19:30,439
nice<font color="#CCCCCC"> to have something I</font><font color="#E5E5E5"> could just</font>

432
00:19:27,950 --> 00:19:32,630
click<font color="#E5E5E5"> on file</font><font color="#CCCCCC"> and get</font><font color="#E5E5E5"> it to work but I</font>

433
00:19:30,440 --> 00:19:36,620
needed<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> was quite powerful</font>

434
00:19:32,630 --> 00:19:39,260
<font color="#E5E5E5">as well I wanted to do this design as</font>

435
00:19:36,620 --> 00:19:42,050
modular as possible it<font color="#E5E5E5"> should be able to</font>

436
00:19:39,260 --> 00:19:44,180
<font color="#CCCCCC">yeah users should be able</font><font color="#E5E5E5"> to extend upon</font>

437
00:19:42,050 --> 00:19:47,180
it by<font color="#E5E5E5"> themselves without</font><font color="#CCCCCC"> having to</font>

438
00:19:44,180 --> 00:19:49,700
recompile the whole thing<font color="#E5E5E5"> since</font><font color="#CCCCCC"> people</font>

439
00:19:47,180 --> 00:19:52,700
were already<font color="#CCCCCC"> including my stuff in their</font>

440
00:19:49,700 --> 00:19:56,390
own projects<font color="#CCCCCC"> and it was</font><font color="#E5E5E5"> hell didn't see</font>

441
00:19:52,700 --> 00:19:59,090
<font color="#CCCCCC">I see API was given</font><font color="#E5E5E5"> from the start</font><font color="#CCCCCC"> and I</font>

442
00:19:56,390 --> 00:20:01,250
also thought the Python is super popular

443
00:19:59,090 --> 00:20:02,840
within the<font color="#CCCCCC"> year security community and</font>

444
00:20:01,250 --> 00:20:05,270
also<font color="#E5E5E5"> within the memory forensics</font>

445
00:20:02,840 --> 00:20:08,540
community so<font color="#E5E5E5"> let's add the Python</font>

446
00:20:05,270 --> 00:20:10,340
support as well and<font color="#E5E5E5"> then since I'm doing</font>

447
00:20:08,540 --> 00:20:11,299
it as a file system<font color="#E5E5E5"> when you're clicking</font>

448
00:20:10,340 --> 00:20:13,220
<font color="#E5E5E5">around in this</font>

449
00:20:11,299 --> 00:20:15,739
<font color="#CCCCCC">all system</font><font color="#E5E5E5"> clicking in a folder I'm</font>

450
00:20:13,220 --> 00:20:18,289
doing<font color="#E5E5E5"> on the fly memory analysis you</font>

451
00:20:15,739 --> 00:20:20,600
can't afford<font color="#E5E5E5"> to wait one or</font><font color="#CCCCCC"> two minutes</font>

452
00:20:18,289 --> 00:20:23,299
for some analysis<font color="#CCCCCC"> to</font><font color="#E5E5E5"> take place and then</font>

453
00:20:20,600 --> 00:20:26,449
show the result<font color="#E5E5E5"> so it needs to be really</font>

454
00:20:23,299 --> 00:20:29,690
<font color="#E5E5E5">high performance this</font><font color="#CCCCCC"> is how it looks</font>

455
00:20:26,450 --> 00:20:32,840
<font color="#E5E5E5">like I use a</font><font color="#CCCCCC"> third-party really awesome</font>

456
00:20:29,690 --> 00:20:35,749
<font color="#E5E5E5">file system driver which is</font><font color="#CCCCCC"> called dog</font>

457
00:20:32,840 --> 00:20:37,668
<font color="#CCCCCC">cam</font><font color="#E5E5E5"> it takes care of the</font><font color="#CCCCCC"> hard parts like</font>

458
00:20:35,749 --> 00:20:40,100
having a kernel driver for a file system

459
00:20:37,669 --> 00:20:42,529
<font color="#E5E5E5">all I need to do is to</font><font color="#CCCCCC"> implement some</font>

460
00:20:40,100 --> 00:20:45,109
really simple callbacks<font color="#CCCCCC"> in my memory</font>

461
00:20:42,529 --> 00:20:47,119
process<font color="#E5E5E5"> file system executable which is</font>

462
00:20:45,109 --> 00:20:49,668
pretty<font color="#CCCCCC"> much a very thin wrapper which</font>

463
00:20:47,119 --> 00:20:52,369
forwards calls like this directory read

464
00:20:49,669 --> 00:20:55,759
file and write file to the main analysis

465
00:20:52,369 --> 00:20:58,699
library<font color="#CCCCCC"> and in here every memory</font>

466
00:20:55,759 --> 00:20:59,960
analysis steps are taking place<font color="#E5E5E5"> and I do</font>

467
00:20:58,700 --> 00:21:02,720
<font color="#CCCCCC">live virtual to physical memory</font>

468
00:20:59,960 --> 00:21:05,779
translations for example and I do

469
00:21:02,720 --> 00:21:08,749
support communication<font color="#E5E5E5"> with external</font>

470
00:21:05,779 --> 00:21:11,779
plugins<font color="#CCCCCC"> I record it as native dll's</font>

471
00:21:08,749 --> 00:21:15,019
or Python files if you're doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Python</font>

472
00:21:11,779 --> 00:21:16,879
<font color="#CCCCCC">plug-in you might may want to equal back</font>

473
00:21:15,019 --> 00:21:19,909
into the main<font color="#CCCCCC"> analysis library by using</font>

474
00:21:16,879 --> 00:21:23,689
the Python API<font color="#CCCCCC"> or if you are including</font>

475
00:21:19,909 --> 00:21:25,700
<font color="#CCCCCC">it in your own projects</font><font color="#E5E5E5"> and also in</font>

476
00:21:23,690 --> 00:21:28,609
order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make it even more</font><font color="#E5E5E5"> modular I</font>

477
00:21:25,700 --> 00:21:31,070
decided<font color="#E5E5E5"> to break out the physical memory</font>

478
00:21:28,609 --> 00:21:32,720
acquisition functionality to a separate

479
00:21:31,070 --> 00:21:34,820
library<font color="#E5E5E5"> which I call the</font><font color="#CCCCCC"> lead core</font>

480
00:21:32,720 --> 00:21:38,330
library which is something I'm<font color="#CCCCCC"> releasing</font>

481
00:21:34,820 --> 00:21:40,639
here today it is a small library<font color="#CCCCCC"> that</font>

482
00:21:38,330 --> 00:21:43,730
focuses totally on the physical memory

483
00:21:40,639 --> 00:21:45,619
read and write and this<font color="#CCCCCC"> separate memory</font>

484
00:21:43,730 --> 00:21:48,080
acquisition from analysis in a really

485
00:21:45,619 --> 00:21:50,689
nice<font color="#CCCCCC"> way and it would also allow me to</font>

486
00:21:48,080 --> 00:21:54,139
reuse this component across my projects

487
00:21:50,690 --> 00:21:57,769
<font color="#CCCCCC">I do support</font><font color="#E5E5E5"> the initial USB 3380</font>

488
00:21:54,139 --> 00:21:59,928
hardware but<font color="#CCCCCC"> also the</font><font color="#E5E5E5"> FPGA</font><font color="#CCCCCC"> hardware new</font>

489
00:21:57,769 --> 00:22:01,580
for today<font color="#E5E5E5"> is also that I have some</font>

490
00:21:59,929 --> 00:22:04,070
<font color="#E5E5E5">really awesome integration with</font><font color="#CCCCCC"> Matt's</font>

491
00:22:01,580 --> 00:22:07,039
<font color="#CCCCCC">wish dampe tool which allows</font><font color="#E5E5E5"> us to</font>

492
00:22:04,070 --> 00:22:10,009
capture<font color="#E5E5E5"> live memory</font><font color="#CCCCCC"> from a running live</font>

493
00:22:07,039 --> 00:22:13,580
system and do on-the-fly memory analysis

494
00:22:10,009 --> 00:22:18,169
<font color="#CCCCCC">also to support</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> year equal win pmm</font>

495
00:22:13,580 --> 00:22:20,269
driver<font color="#E5E5E5"> we can also open memory dump</font>

496
00:22:18,169 --> 00:22:21,929
files various types of memory dump files

497
00:22:20,269 --> 00:22:24,450
<font color="#CCCCCC">rule on the</font><font color="#E5E5E5"> air more than</font>

498
00:22:21,929 --> 00:22:26,009
files<font color="#CCCCCC"> full crash</font><font color="#E5E5E5"> dump files and even</font>

499
00:22:24,450 --> 00:22:29,220
<font color="#E5E5E5">hyper-v save files</font>

500
00:22:26,009 --> 00:22:31,860
more recently<font color="#CCCCCC"> selectively also</font>

501
00:22:29,220 --> 00:22:35,279
contributed a quite interesting<font color="#CCCCCC"> patch</font>

502
00:22:31,860 --> 00:22:40,189
for HP<font color="#CCCCCC"> ILO turns out that you</font><font color="#E5E5E5"> have if</font>

503
00:22:35,279 --> 00:22:44,129
you do have a compromised<font color="#CCCCCC"> HP ILO the BMC</font>

504
00:22:40,190 --> 00:22:46,320
<font color="#CCCCCC">you can insert a backdoor</font><font color="#E5E5E5"> into that one</font>

505
00:22:44,129 --> 00:22:49,289
that would<font color="#E5E5E5"> allow you to do DNA straight</font>

506
00:22:46,320 --> 00:22:52,860
into the host<font color="#E5E5E5"> operating system of that</font>

507
00:22:49,289 --> 00:22:56,820
server<font color="#E5E5E5"> and then you can use my tools to</font>

508
00:22:52,860 --> 00:22:58,860
do<font color="#CCCCCC"> that as well and then something new</font>

509
00:22:56,820 --> 00:23:02,100
for today<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> is that I'm releasing</font>

510
00:22:58,860 --> 00:23:04,080
the elite service it's a<font color="#E5E5E5"> thicket it's a</font>

511
00:23:02,100 --> 00:23:08,100
capability<font color="#E5E5E5"> that allows</font><font color="#CCCCCC"> us to basically</font>

512
00:23:04,080 --> 00:23:10,559
connect to a<font color="#E5E5E5"> remote system using this</font>

513
00:23:08,100 --> 00:23:12,629
software<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the remote</font><font color="#E5E5E5"> connection is</font>

514
00:23:10,559 --> 00:23:15,178
secured by a Kerberos mutually

515
00:23:12,629 --> 00:23:17,340
authenticated<font color="#CCCCCC"> RPC</font><font color="#E5E5E5"> and once we are</font>

516
00:23:15,179 --> 00:23:19,110
<font color="#E5E5E5">connected</font><font color="#CCCCCC"> to a remote system we can use</font>

517
00:23:17,340 --> 00:23:25,189
any of the above<font color="#E5E5E5"> memory acquisition</font>

518
00:23:19,110 --> 00:23:27,389
<font color="#CCCCCC">methods I used le</font><font color="#E5E5E5"> I discussed just now</font>

519
00:23:25,190 --> 00:23:29,580
the main analysis leverage<font color="#E5E5E5"> looks</font>

520
00:23:27,389 --> 00:23:31,709
something like this I had the API on<font color="#CCCCCC"> top</font>

521
00:23:29,580 --> 00:23:34,980
<font color="#E5E5E5">which the memory process</font><font color="#CCCCCC"> filesystem</font>

522
00:23:31,710 --> 00:23:37,049
executable is calling<font color="#CCCCCC"> into or other</font>

523
00:23:34,980 --> 00:23:39,149
programs may call<font color="#CCCCCC"> in to it as well and</font>

524
00:23:37,049 --> 00:23:41,279
then I do the physical memory

525
00:23:39,149 --> 00:23:43,619
acquisition<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> separate library and</font>

526
00:23:41,279 --> 00:23:45,659
on very bottom in the analysis library I

527
00:23:43,619 --> 00:23:47,340
<font color="#E5E5E5">have a really simple object manager</font>

528
00:23:45,659 --> 00:23:49,980
which would allow me<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do things like</font>

529
00:23:47,340 --> 00:23:51,629
<font color="#E5E5E5">object reference counting which allows</font>

530
00:23:49,980 --> 00:23:54,600
me<font color="#E5E5E5"> in a really nice nice way</font><font color="#CCCCCC"> to</font>

531
00:23:51,629 --> 00:23:56,580
implement<font color="#E5E5E5"> some caches and for example I</font>

532
00:23:54,600 --> 00:24:00,330
do cache the physical memory<font color="#E5E5E5"> and the</font>

533
00:23:56,580 --> 00:24:02,249
page<font color="#CCCCCC"> table separate and then we need to</font>

534
00:24:00,330 --> 00:24:05,129
have a layer<font color="#CCCCCC"> that takes care</font><font color="#E5E5E5"> of the</font>

535
00:24:02,249 --> 00:24:07,200
virtual to physical memory translations

536
00:24:05,129 --> 00:24:09,539
and in order<font color="#CCCCCC"> to do so we need awareness</font>

537
00:24:07,200 --> 00:24:12,269
of which memory model the target<font color="#CCCCCC"> system</font>

538
00:24:09,539 --> 00:24:14,999
is<font color="#E5E5E5"> using for</font><font color="#CCCCCC"> example if I'm using the</font>

539
00:24:12,269 --> 00:24:18,149
64-bit memory<font color="#E5E5E5"> model physical address</font>

540
00:24:14,999 --> 00:24:21,720
extension<font color="#E5E5E5"> or the standard x86 32-bit</font>

541
00:24:18,149 --> 00:24:24,090
memory<font color="#E5E5E5"> model and then of</font><font color="#CCCCCC"> course we do</font>

542
00:24:21,720 --> 00:24:27,330
lots of analysis<font color="#E5E5E5"> things in here as well</font>

543
00:24:24,090 --> 00:24:28,918
<font color="#CCCCCC">I do also have the</font><font color="#E5E5E5"> concept</font><font color="#CCCCCC"> of a process</font>

544
00:24:27,330 --> 00:24:31,769
<font color="#CCCCCC">object which contains a memory</font><font color="#E5E5E5"> map</font>

545
00:24:28,919 --> 00:24:34,619
object and a<font color="#E5E5E5"> module map object we do</font>

546
00:24:31,769 --> 00:24:35,640
have an<font color="#E5E5E5"> object manager in there which le</font>

547
00:24:34,619 --> 00:24:38,070
<font color="#CCCCCC">plug-in manager in</font>

548
00:24:35,640 --> 00:24:40,890
which allows me to<font color="#E5E5E5"> communicate with</font><font color="#CCCCCC"> the</font>

549
00:24:38,070 --> 00:24:43,080
<font color="#E5E5E5">external plugins</font><font color="#CCCCCC"> either coded in a small</font>

550
00:24:40,890 --> 00:24:47,940
Python files that you draw just drop

551
00:24:43,080 --> 00:24:50,490
into<font color="#E5E5E5"> the directories or native</font><font color="#CCCCCC"> dll skull</font>

552
00:24:47,940 --> 00:24:52,890
didn't see for example<font color="#CCCCCC"> and if you're</font>

553
00:24:50,490 --> 00:24:55,770
running<font color="#E5E5E5"> against the live physical memory</font>

554
00:24:52,890 --> 00:24:57,930
<font color="#E5E5E5">or if you're acquiring memory with dump</font>

555
00:24:55,770 --> 00:24:59,820
it in<font color="#E5E5E5"> its</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> ad mode for example</font><font color="#CCCCCC"> a</font>

556
00:24:57,930 --> 00:25:01,650
memory that<font color="#E5E5E5"> may</font><font color="#CCCCCC"> changed we do have a</font>

557
00:24:59,820 --> 00:25:03,389
small<font color="#E5E5E5"> housekeeper thread in there as</font>

558
00:25:01,650 --> 00:25:07,410
well<font color="#E5E5E5"> that keeps track</font><font color="#CCCCCC"> of things</font><font color="#E5E5E5"> like</font>

559
00:25:03,390 --> 00:25:09,390
background<font color="#E5E5E5"> process refreshes and if we</font>

560
00:25:07,410 --> 00:25:11,550
connect everything together here<font color="#E5E5E5"> we</font>

561
00:25:09,390 --> 00:25:13,410
might have some incident response

562
00:25:11,550 --> 00:25:15,659
scenario<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> you may have</font><font color="#E5E5E5"> a</font>

563
00:25:13,410 --> 00:25:18,120
suspicious process on a computer<font color="#CCCCCC"> disk</font>

564
00:25:15,660 --> 00:25:20,520
<font color="#CCCCCC">warranty to separate VLAN</font><font color="#E5E5E5"> but we might</font>

565
00:25:18,120 --> 00:25:22,770
have<font color="#E5E5E5"> limited bandwidth to that computer</font>

566
00:25:20,520 --> 00:25:25,500
<font color="#CCCCCC">and we might even</font><font color="#E5E5E5"> have some latency</font><font color="#CCCCCC"> of</font>

567
00:25:22,770 --> 00:25:27,720
<font color="#E5E5E5">the network and a full memory dump of a</font>

568
00:25:25,500 --> 00:25:29,670
big system with a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> RAM in it it's</font>

569
00:25:27,720 --> 00:25:33,510
<font color="#E5E5E5">just horrible is slow to do that there</font>

570
00:25:29,670 --> 00:25:35,580
<font color="#E5E5E5">were</font><font color="#CCCCCC"> Network</font><font color="#E5E5E5"> the solution it might be to</font>

571
00:25:33,510 --> 00:25:38,460
retrieve<font color="#CCCCCC"> only the memory you actually</font>

572
00:25:35,580 --> 00:25:41,960
need to<font color="#CCCCCC"> do your analysis and analyze it</font>

573
00:25:38,460 --> 00:25:45,960
<font color="#CCCCCC">mid memory</font><font color="#E5E5E5"> process file system so let's</font>

574
00:25:41,960 --> 00:25:50,280
do another<font color="#E5E5E5"> demo let's analyze some live</font>

575
00:25:45,960 --> 00:25:51,750
malware memory on a remote<font color="#CCCCCC"> system</font><font color="#E5E5E5"> and we</font>

576
00:25:50,280 --> 00:25:58,200
are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do that by</font><font color="#CCCCCC"> clicking</font><font color="#E5E5E5"> on</font>

577
00:25:51,750 --> 00:26:01,140
files so here I do have<font color="#CCCCCC"> a remote</font><font color="#E5E5E5"> system</font>

578
00:25:58,200 --> 00:26:03,300
<font color="#E5E5E5">or it's a virtual</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> here on my</font>

579
00:26:01,140 --> 00:26:06,360
demo computer but<font color="#CCCCCC"> it's remote for this</font>

580
00:26:03,300 --> 00:26:09,540
purpose<font color="#E5E5E5"> and we're starting to</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> this</font>

581
00:26:06,360 --> 00:26:13,620
IP<font color="#CCCCCC"> address here</font><font color="#E5E5E5"> and we're starting the</font>

582
00:26:09,540 --> 00:26:16,440
memory delete service<font color="#E5E5E5"> with dump it in a</font>

583
00:26:13,620 --> 00:26:18,500
<font color="#CCCCCC">slight cady mode which</font><font color="#E5E5E5"> allows us to</font>

584
00:26:16,440 --> 00:26:21,860
capture live memory<font color="#E5E5E5"> from this system</font>

585
00:26:18,500 --> 00:26:23,940
<font color="#E5E5E5">we're starting it in interactive mode</font>

586
00:26:21,860 --> 00:26:27,030
since<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> want to run this as a</font>

587
00:26:23,940 --> 00:26:28,740
service<font color="#E5E5E5"> here and also in</font><font color="#CCCCCC"> insecure mode</font>

588
00:26:27,030 --> 00:26:31,350
which disables the Kerberos

589
00:26:28,740 --> 00:26:33,060
authentication steps is this computer is

590
00:26:31,350 --> 00:26:36,060
<font color="#E5E5E5">not part of a domain in this demo</font>

591
00:26:33,060 --> 00:26:41,179
computer and now it should<font color="#E5E5E5"> be ready to</font>

592
00:26:36,060 --> 00:26:41,179
<font color="#E5E5E5">connect to it so let's do that</font>

593
00:26:43,700 --> 00:26:52,370
so<font color="#CCCCCC"> pyre</font><font color="#E5E5E5"> I'm connecting</font><font color="#CCCCCC"> to it to remote</font>

594
00:26:47,640 --> 00:26:55,230
system using our<font color="#E5E5E5"> PC in the insecure</font>

595
00:26:52,370 --> 00:26:57,120
connection<font color="#CCCCCC"> and the IP address</font><font color="#E5E5E5"> and we are</font>

596
00:26:55,230 --> 00:27:02,040
going<font color="#E5E5E5"> to use the dump it device to</font>

597
00:26:57,120 --> 00:27:05,159
acquire memory so we have it started

598
00:27:02,040 --> 00:27:08,240
here<font color="#E5E5E5"> let's try</font><font color="#CCCCCC"> to click into</font><font color="#E5E5E5"> it can</font>

599
00:27:05,160 --> 00:27:18,390
<font color="#E5E5E5">click into the names folder for example</font>

600
00:27:08,240 --> 00:27:21,570
<font color="#E5E5E5">it's yeah</font><font color="#CCCCCC"> and if we check all the</font>

601
00:27:18,390 --> 00:27:23,910
processes<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the names folder and we</font>

602
00:27:21,570 --> 00:27:24,689
have a really strange<font color="#E5E5E5"> process looking</font><font color="#CCCCCC"> at</font>

603
00:27:23,910 --> 00:27:27,870
the end here

604
00:27:24,690 --> 00:27:30,840
it's an old Citadel<font color="#E5E5E5"> malware sample I</font>

605
00:27:27,870 --> 00:27:32,489
found it's nothing<font color="#CCCCCC"> fancy but it we can</font>

606
00:27:30,840 --> 00:27:35,070
<font color="#E5E5E5">have a look at its memory map for</font>

607
00:27:32,490 --> 00:27:37,560
example<font color="#CCCCCC"> I remember the memory map is</font>

608
00:27:35,070 --> 00:27:40,260
acquired live by walking<font color="#CCCCCC"> to actual page</font>

609
00:27:37,560 --> 00:27:42,659
tables<font color="#E5E5E5"> that the CPU uses to execute code</font>

610
00:27:40,260 --> 00:27:45,450
and read<font color="#E5E5E5"> data there's no really way</font>

611
00:27:42,660 --> 00:27:47,750
around<font color="#E5E5E5"> this memory map</font><font color="#CCCCCC"> if your need to</font>

612
00:27:45,450 --> 00:27:50,520
execute<font color="#E5E5E5"> code you need</font><font color="#CCCCCC"> to be in</font><font color="#E5E5E5"> here and</font>

613
00:27:47,750 --> 00:27:55,080
if you scroll of<font color="#CCCCCC"> amnesty some suspicious</font>

614
00:27:50,520 --> 00:27:57,930
<font color="#E5E5E5">section here and usually</font><font color="#CCCCCC"> a PE</font><font color="#E5E5E5"> section</font>

615
00:27:55,080 --> 00:27:59,790
should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> read execute in one page to</font>

616
00:27:57,930 --> 00:28:01,830
first and<font color="#E5E5E5"> this is a really big read</font>

617
00:27:59,790 --> 00:28:04,409
write execute section so it looks<font color="#E5E5E5"> really</font>

618
00:28:01,830 --> 00:28:07,110
strange<font color="#CCCCCC"> and we can have a look at the</font>

619
00:28:04,410 --> 00:28:10,140
<font color="#CCCCCC">virtual memory of this</font><font color="#E5E5E5"> remote process as</font>

620
00:28:07,110 --> 00:28:19,010
well<font color="#E5E5E5"> and in there we can for example</font><font color="#CCCCCC"> we</font>

621
00:28:10,140 --> 00:28:21,660
can search for<font color="#E5E5E5"> some values and yeah this</font>

622
00:28:19,010 --> 00:28:23,790
this trillion is has some<font color="#CCCCCC"> blacklist</font><font color="#E5E5E5"> for</font>

623
00:28:21,660 --> 00:28:27,690
<font color="#CCCCCC">the antivirus is in here so and you what</font>

624
00:28:23,790 --> 00:28:30,149
to search for for example<font color="#CCCCCC"> and if we are</font>

625
00:28:27,690 --> 00:28:32,220
<font color="#E5E5E5">running with a bright</font><font color="#CCCCCC"> capable device we</font>

626
00:28:30,150 --> 00:28:35,460
can<font color="#CCCCCC"> write backed off to be make changes</font>

627
00:28:32,220 --> 00:28:37,850
here<font color="#E5E5E5"> as well but we are not doing that</font>

628
00:28:35,460 --> 00:28:37,850
<font color="#CCCCCC">right now</font>

629
00:28:40,169 --> 00:28:45,909
so there<font color="#E5E5E5"> are really big advantages with</font>

630
00:28:43,959 --> 00:28:49,269
the physical memory analysis you may

631
00:28:45,909 --> 00:28:54,429
already be<font color="#CCCCCC"> using</font><font color="#E5E5E5"> tools as volatility or</font>

632
00:28:49,269 --> 00:28:55,959
<font color="#E5E5E5">recall and this is not the replacement</font>

633
00:28:54,429 --> 00:28:59,559
for those tools it's more like a

634
00:28:55,959 --> 00:29:02,169
compliment<font color="#CCCCCC"> in some scenarios</font><font color="#E5E5E5"> it's quite</font>

635
00:28:59,559 --> 00:29:05,049
<font color="#E5E5E5">okay performance</font><font color="#CCCCCC"> even over a little bit</font>

636
00:29:02,169 --> 00:29:08,829
laggy networks as long as the latency<font color="#E5E5E5"> is</font>

637
00:29:05,049 --> 00:29:11,319
not too high and focus<font color="#CCCCCC"> for me in the</font>

638
00:29:08,829 --> 00:29:13,749
near future is to add even more core

639
00:29:11,319 --> 00:29:16,119
performance<font color="#E5E5E5"> optimizations with which</font>

640
00:29:13,749 --> 00:29:18,219
would allow me<font color="#CCCCCC"> to</font><font color="#E5E5E5"> parallelize remote</font>

641
00:29:16,119 --> 00:29:21,069
reads even<font color="#E5E5E5"> more in order to reduce</font>

642
00:29:18,219 --> 00:29:23,469
<font color="#E5E5E5">latency impacts and also having a</font>

643
00:29:21,069 --> 00:29:23,859
multi-threaded<font color="#E5E5E5"> this time it's super</font>

644
00:29:23,469 --> 00:29:25,690
<font color="#E5E5E5">awesome</font>

645
00:29:23,859 --> 00:29:27,489
since it allows me to<font color="#E5E5E5"> do things like</font>

646
00:29:25,690 --> 00:29:29,709
<font color="#CCCCCC">background process refreshes and</font>

647
00:29:27,489 --> 00:29:32,499
<font color="#E5E5E5">background refreshes so the user never</font>

648
00:29:29,709 --> 00:29:34,869
<font color="#E5E5E5">notice those things</font><font color="#CCCCCC"> the analysis</font>

649
00:29:32,499 --> 00:29:36,759
<font color="#E5E5E5">capability is a little bit limited at</font>

650
00:29:34,869 --> 00:29:41,228
the moment<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I do plan to add more</font>

651
00:29:36,759 --> 00:29:42,929
analysis<font color="#E5E5E5"> plugins in the future let's</font>

652
00:29:41,229 --> 00:29:45,759
have a look at the Python API as well

653
00:29:42,929 --> 00:29:48,690
<font color="#E5E5E5">let's analyze some live memory in the</font>

654
00:29:45,759 --> 00:29:52,989
Python<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well from</font><font color="#E5E5E5"> this remote system</font>

655
00:29:48,690 --> 00:29:55,629
by using<font color="#E5E5E5"> the API and let's</font><font color="#CCCCCC"> cut a</font><font color="#E5E5E5"> small</font>

656
00:29:52,989 --> 00:29:57,969
<font color="#E5E5E5">program in</font><font color="#CCCCCC"> Python</font><font color="#E5E5E5"> that locates all</font>

657
00:29:55,629 --> 00:30:04,539
read/write/execute<font color="#E5E5E5"> sections in all</font>

658
00:29:57,969 --> 00:30:08,019
<font color="#E5E5E5">processes on</font><font color="#CCCCCC"> the remote system so we</font><font color="#E5E5E5"> are</font>

659
00:30:04,539 --> 00:30:12,729
using<font color="#E5E5E5"> the same remote system and let's</font>

660
00:30:08,019 --> 00:30:17,409
open<font color="#E5E5E5"> Python first we need to import the</font>

661
00:30:12,729 --> 00:30:18,969
<font color="#E5E5E5">analysis library and once it's important</font>

662
00:30:17,409 --> 00:30:22,629
we can have a look at the different

663
00:30:18,969 --> 00:30:24,909
functions in<font color="#E5E5E5"> it we have quite a few of</font>

664
00:30:22,629 --> 00:30:27,248
them in there<font color="#E5E5E5"> and first we need to</font>

665
00:30:24,909 --> 00:30:29,440
<font color="#E5E5E5">initialize the actual library with a</font>

666
00:30:27,249 --> 00:30:32,889
connection<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the system that we wish</font><font color="#CCCCCC"> to</font>

667
00:30:29,440 --> 00:30:35,079
acquire memory from<font color="#E5E5E5"> the remote system in</font>

668
00:30:32,889 --> 00:30:38,639
<font color="#E5E5E5">this case and we are going to use dump</font>

669
00:30:35,079 --> 00:30:41,769
it once again<font color="#CCCCCC"> to acquire that memory</font>

670
00:30:38,639 --> 00:30:44,319
once we initialize the<font color="#E5E5E5"> connection we can</font>

671
00:30:41,769 --> 00:30:46,569
<font color="#E5E5E5">retrieve the pit of a given</font><font color="#CCCCCC"> process in</font>

672
00:30:44,319 --> 00:30:48,759
the remote system for example<font color="#CCCCCC"> to see</font>

673
00:30:46,569 --> 00:30:52,240
<font color="#E5E5E5">indeed of the exe and we are going to</font>

674
00:30:48,759 --> 00:30:54,160
<font color="#E5E5E5">print it on the screen as</font><font color="#CCCCCC"> well</font>

675
00:30:52,240 --> 00:30:56,890
<font color="#E5E5E5">is the ped of the CMD on the remote</font>

676
00:30:54,160 --> 00:30:58,929
system<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> retrieve some process</font>

677
00:30:56,890 --> 00:31:01,809
information<font color="#E5E5E5"> on the remote system</font><font color="#CCCCCC"> will</font>

678
00:30:58,929 --> 00:31:04,000
retrieve it as a dictionary<font color="#E5E5E5"> containing</font>

679
00:31:01,809 --> 00:31:07,960
<font color="#CCCCCC">information for all processes and we are</font>

680
00:31:04,000 --> 00:31:11,710
locating it by using the pit<font color="#CCCCCC"> and if we</font>

681
00:31:07,960 --> 00:31:14,470
<font color="#E5E5E5">check</font><font color="#CCCCCC"> the process information for the</font>

682
00:31:11,710 --> 00:31:16,750
<font color="#CCCCCC">CMD</font><font color="#E5E5E5"> we see</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> like the physical</font>

683
00:31:14,470 --> 00:31:21,610
address<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> PML for the director</font>

684
00:31:16,750 --> 00:31:23,860
<font color="#E5E5E5">cable</font><font color="#CCCCCC"> base we see its name and the e</font>

685
00:31:21,610 --> 00:31:25,629
<font color="#E5E5E5">process virtual address of the e process</font>

686
00:31:23,860 --> 00:31:30,928
<font color="#E5E5E5">structure in the kernel for example and</font>

687
00:31:25,630 --> 00:31:32,890
also<font color="#E5E5E5"> the virtual address of the pet and</font>

688
00:31:30,929 --> 00:31:34,929
we can have a look<font color="#E5E5E5"> at the whole</font>

689
00:31:32,890 --> 00:31:36,720
dictionary<font color="#E5E5E5"> of course but that's a huge</font>

690
00:31:34,929 --> 00:31:38,830
<font color="#E5E5E5">amount of data that's not really</font>

691
00:31:36,720 --> 00:31:41,890
suitable to show you in a screen like

692
00:31:38,830 --> 00:31:43,899
<font color="#E5E5E5">this</font><font color="#CCCCCC"> with a list</font><font color="#E5E5E5"> of all processes in the</font>

693
00:31:41,890 --> 00:31:46,750
remote system again let's do<font color="#CCCCCC"> the same</font>

694
00:31:43,900 --> 00:31:48,790
<font color="#E5E5E5">quote and get to process information for</font>

695
00:31:46,750 --> 00:31:51,940
all processes<font color="#CCCCCC"> but let's iterate over</font><font color="#E5E5E5"> it</font>

696
00:31:48,790 --> 00:31:58,270
<font color="#CCCCCC">and for each process let's print</font><font color="#E5E5E5"> it spit</font>

697
00:31:51,940 --> 00:31:59,860
and its name on<font color="#E5E5E5"> the screen and this</font><font color="#CCCCCC"> is</font>

698
00:31:58,270 --> 00:32:02,470
the complete process listing of the

699
00:31:59,860 --> 00:32:05,979
processes<font color="#CCCCCC"> on the remote system</font><font color="#E5E5E5"> we can</font>

700
00:32:02,470 --> 00:32:08,440
<font color="#E5E5E5">retrieve the memory map for a given</font>

701
00:32:05,980 --> 00:32:10,000
process<font color="#E5E5E5"> the CMD again for this example</font>

702
00:32:08,440 --> 00:32:13,240
and let's<font color="#CCCCCC"> have a look at entry number</font>

703
00:32:10,000 --> 00:32:16,450
300 in this memory<font color="#E5E5E5"> map for</font><font color="#CCCCCC"> example here</font>

704
00:32:13,240 --> 00:32:18,130
we<font color="#CCCCCC"> see</font><font color="#E5E5E5"> the virtual address the base of</font>

705
00:32:16,450 --> 00:32:20,950
the memory map entry in the virtual

706
00:32:18,130 --> 00:32:23,200
<font color="#E5E5E5">address we see</font><font color="#CCCCCC"> it's sizes is like it's</font>

707
00:32:20,950 --> 00:32:25,809
three pages<font color="#E5E5E5"> long in this case seems to</font>

708
00:32:23,200 --> 00:32:29,290
be locked belonging to the<font color="#E5E5E5"> anti</font><font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> and</font>

709
00:32:25,809 --> 00:32:32,678
it seems<font color="#E5E5E5"> to be like a read execute</font><font color="#CCCCCC"> piece</font>

710
00:32:29,290 --> 00:32:34,870
of memory once we have all this

711
00:32:32,679 --> 00:32:38,530
information it's all that we do have to

712
00:32:34,870 --> 00:32:43,169
<font color="#CCCCCC">kotor or small</font><font color="#E5E5E5"> a demo here so let's do</font>

713
00:32:38,530 --> 00:32:45,670
that let's<font color="#CCCCCC"> retrieve be a process</font>

714
00:32:43,170 --> 00:32:48,460
<font color="#E5E5E5">information for all processes</font><font color="#CCCCCC"> and let's</font>

715
00:32:45,670 --> 00:32:51,610
iterate over it<font color="#E5E5E5"> and for each process</font>

716
00:32:48,460 --> 00:32:54,790
let's retrieve its memory map for each

717
00:32:51,610 --> 00:32:56,678
<font color="#E5E5E5">entry in the memory map we are going to</font>

718
00:32:54,790 --> 00:33:00,520
have a look if it's a<font color="#E5E5E5"> read write execute</font>

719
00:32:56,679 --> 00:33:04,120
<font color="#E5E5E5">entry if it is we are going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> print it</font>

720
00:33:00,520 --> 00:33:04,710
on the screen<font color="#CCCCCC"> together with its the pit</font>

721
00:33:04,120 --> 00:33:07,229
and

722
00:33:04,710 --> 00:33:08,730
the name of the<font color="#E5E5E5"> process and in order to</font>

723
00:33:07,230 --> 00:33:10,529
make it a<font color="#E5E5E5"> little bit more</font><font color="#CCCCCC"> readable we</font>

724
00:33:08,730 --> 00:33:15,690
are only going to<font color="#E5E5E5"> print to the Andrus</font>

725
00:33:10,529 --> 00:33:17,820
per process and now as we go we<font color="#CCCCCC"> are</font>

726
00:33:15,690 --> 00:33:20,549
actually making an RPC connection to

727
00:33:17,820 --> 00:33:22,439
remote system and using dumpee<font color="#E5E5E5"> to</font>

728
00:33:20,549 --> 00:33:25,590
acquire<font color="#E5E5E5"> a live memory from</font><font color="#CCCCCC"> the remote</font>

729
00:33:22,440 --> 00:33:27,809
system and return it<font color="#E5E5E5"> to my presenting</font>

730
00:33:25,590 --> 00:33:31,110
computer here in which all the analysis

731
00:33:27,809 --> 00:33:32,970
steps<font color="#E5E5E5"> take place and this is</font><font color="#CCCCCC"> done live</font>

732
00:33:31,110 --> 00:33:36,178
and as you can see<font color="#E5E5E5"> it's quite fast we</font>

733
00:33:32,970 --> 00:33:37,409
are<font color="#E5E5E5"> already done and we have some</font>

734
00:33:36,179 --> 00:33:39,390
read/write/execute

735
00:33:37,409 --> 00:33:41,399
sections in the in the kernel for

736
00:33:39,390 --> 00:33:45,870
example seems<font color="#CCCCCC"> like we have</font><font color="#E5E5E5"> it in the one</font>

737
00:33:41,399 --> 00:33:47,729
<font color="#E5E5E5">drive to Spotify our</font><font color="#CCCCCC"> Trojan and also in</font>

738
00:33:45,870 --> 00:33:52,678
PowerShell it seems that we do have some

739
00:33:47,730 --> 00:33:56,390
one of those we<font color="#E5E5E5"> can also read and write</font>

740
00:33:52,679 --> 00:33:59,760
to<font color="#CCCCCC"> your physical</font><font color="#E5E5E5"> memory you can read and</font>

741
00:33:56,390 --> 00:34:03,570
to virtual<font color="#E5E5E5"> memory as well the first</font>

742
00:33:59,760 --> 00:34:05,908
argument is<font color="#E5E5E5"> the head of the process that</font>

743
00:34:03,570 --> 00:34:09,330
we wish<font color="#CCCCCC"> to read virtual</font><font color="#E5E5E5"> memory from or</font>

744
00:34:05,909 --> 00:34:10,859
if you're using<font color="#CCCCCC"> - one</font><font color="#E5E5E5"> that means that we</font>

745
00:34:09,330 --> 00:34:12,509
are<font color="#E5E5E5"> going to read physical memory</font>

746
00:34:10,859 --> 00:34:16,049
instead of virtual memory<font color="#E5E5E5"> we are reading</font>

747
00:34:12,510 --> 00:34:19,349
<font color="#CCCCCC">from address 1000 in hex</font><font color="#E5E5E5"> I'm reading 256</font>

748
00:34:16,050 --> 00:34:21,330
first bytes and printing<font color="#E5E5E5"> in</font><font color="#CCCCCC"> - no nice</font>

749
00:34:19,349 --> 00:34:28,020
way<font color="#E5E5E5"> on the screen and this</font><font color="#CCCCCC"> is live</font>

750
00:34:21,330 --> 00:34:30,359
memory<font color="#E5E5E5"> from this remote system the</font>

751
00:34:28,020 --> 00:34:32,219
<font color="#CCCCCC">Python API it looks something like this</font>

752
00:34:30,359 --> 00:34:35,339
<font color="#E5E5E5">in addition to you read and write</font>

753
00:34:32,219 --> 00:34:39,959
functionality<font color="#E5E5E5"> we we have read/write</font>

754
00:34:35,339 --> 00:34:41,820
functionality<font color="#E5E5E5"> we have the different</font>

755
00:34:39,960 --> 00:34:44,310
functions related to<font color="#CCCCCC"> listing process</font>

756
00:34:41,820 --> 00:34:46,320
<font color="#E5E5E5">information for example retrieve the</font>

757
00:34:44,310 --> 00:34:49,080
list<font color="#E5E5E5"> of</font><font color="#CCCCCC"> peds retrieve</font><font color="#E5E5E5"> with some process</font>

758
00:34:46,320 --> 00:34:53,550
information retrieve process memory<font color="#E5E5E5"> maps</font>

759
00:34:49,080 --> 00:34:55,710
and module maps and<font color="#CCCCCC"> four modules</font><font color="#E5E5E5"> inside</font>

760
00:34:53,550 --> 00:34:57,420
the processes we can<font color="#E5E5E5"> list</font><font color="#CCCCCC"> its exported</font>

761
00:34:55,710 --> 00:35:01,800
functions<font color="#E5E5E5"> imported functions data</font>

762
00:34:57,420 --> 00:35:03,480
directories and PE sections and<font color="#E5E5E5"> also</font>

763
00:35:01,800 --> 00:35:06,690
even<font color="#E5E5E5"> though the memory process file</font>

764
00:35:03,480 --> 00:35:09,420
system isn't mounted<font color="#E5E5E5"> it still exists in</font>

765
00:35:06,690 --> 00:35:11,609
<font color="#E5E5E5">the main analysis library in a virtual</font>

766
00:35:09,420 --> 00:35:14,130
way sort of<font color="#E5E5E5"> so you can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> list its</font>

767
00:35:11,609 --> 00:35:16,180
directories<font color="#E5E5E5"> read those files and write</font>

768
00:35:14,130 --> 00:35:18,490
to those<font color="#E5E5E5"> files</font>

769
00:35:16,180 --> 00:35:20,890
when I was creating<font color="#CCCCCC"> this I had a big</font>

770
00:35:18,490 --> 00:35:23,220
focus<font color="#E5E5E5"> on performance and I'm really</font>

771
00:35:20,890 --> 00:35:25,660
happy<font color="#E5E5E5"> to have been able to complete</font>

772
00:35:23,220 --> 00:35:28,209
multi-threading just before blue hat it

773
00:35:25,660 --> 00:35:30,250
makes a huge<font color="#CCCCCC"> difference and also</font><font color="#E5E5E5"> in</font>

774
00:35:28,210 --> 00:35:33,039
memory caching<font color="#E5E5E5"> and intelligent parsing</font>

775
00:35:30,250 --> 00:35:35,319
and the goal<font color="#CCCCCC"> is to avoid scanning</font><font color="#E5E5E5"> large</font>

776
00:35:33,039 --> 00:35:37,869
chunks of memory for signatures as much

777
00:35:35,319 --> 00:35:40,150
as possible<font color="#CCCCCC"> one</font><font color="#E5E5E5"> example of this is</font><font color="#CCCCCC"> how</font>

778
00:35:37,869 --> 00:35:41,890
<font color="#CCCCCC">allocate the current director table base</font>

779
00:35:40,150 --> 00:35:46,089
<font color="#CCCCCC">and the current</font><font color="#E5E5E5"> base when I'm starting</font>

780
00:35:41,890 --> 00:35:48,190
<font color="#CCCCCC">this the director table based on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> PML</font>

781
00:35:46,089 --> 00:35:49,720
<font color="#CCCCCC">for as you all know it's required</font><font color="#E5E5E5"> to</font>

782
00:35:48,190 --> 00:35:53,770
translate virtual<font color="#E5E5E5"> addresses to physical</font>

783
00:35:49,720 --> 00:35:56,799
addresses<font color="#E5E5E5"> and we need to get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> hold of</font>

784
00:35:53,770 --> 00:35:58,210
<font color="#E5E5E5">that</font><font color="#CCCCCC"> one at the very</font><font color="#E5E5E5"> beginning it might</font>

785
00:35:56,799 --> 00:36:00,038
already be known<font color="#E5E5E5"> to the underlying</font>

786
00:35:58,210 --> 00:36:01,779
device for<font color="#CCCCCC"> example if you are</font><font color="#E5E5E5"> opening a</font>

787
00:36:00,039 --> 00:36:04,450
<font color="#CCCCCC">crashing file that information is</font>

788
00:36:01,779 --> 00:36:06,010
already<font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> crash dump file or if</font>

789
00:36:04,450 --> 00:36:08,379
you are acquiring memory with<font color="#CCCCCC"> either</font>

790
00:36:06,010 --> 00:36:11,200
<font color="#E5E5E5">dump it or</font><font color="#CCCCCC"> PMM we can</font><font color="#E5E5E5"> use query those</font>

791
00:36:08,380 --> 00:36:11,650
ones for this value and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we are all</font>

792
00:36:11,200 --> 00:36:14,140
done

793
00:36:11,650 --> 00:36:16,119
but if we<font color="#E5E5E5"> are using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> FPGA or a roll</font>

794
00:36:14,140 --> 00:36:17,799
<font color="#E5E5E5">line near memory dump for example we</font>

795
00:36:16,119 --> 00:36:20,190
<font color="#E5E5E5">don't have that luxury</font><font color="#CCCCCC"> so we can look</font>

796
00:36:17,799 --> 00:36:22,630
for something<font color="#CCCCCC"> called Aloha stubble</font>

797
00:36:20,190 --> 00:36:24,430
initially a couple of years ago<font color="#E5E5E5"> I didn't</font>

798
00:36:22,630 --> 00:36:27,849
<font color="#E5E5E5">know what this was</font><font color="#CCCCCC"> I only know</font><font color="#E5E5E5"> it was</font>

799
00:36:24,430 --> 00:36:30,279
<font color="#E5E5E5">super</font><font color="#CCCCCC"> useful</font><font color="#E5E5E5"> for my purposes and it was</font>

800
00:36:27,849 --> 00:36:33,760
a memory structure<font color="#E5E5E5"> that was usually not</font>

801
00:36:30,279 --> 00:36:38,589
always but usually<font color="#E5E5E5"> located at the offset</font>

802
00:36:33,760 --> 00:36:40,599
<font color="#E5E5E5">1000 in physical memory</font><font color="#CCCCCC"> in hex</font><font color="#E5E5E5"> and I</font>

803
00:36:38,589 --> 00:36:43,029
didn't know what it was not until

804
00:36:40,599 --> 00:36:45,579
<font color="#E5E5E5">elección</font><font color="#CCCCCC"> sq did a really</font><font color="#E5E5E5"> nice talk at</font>

805
00:36:43,029 --> 00:36:47,410
<font color="#E5E5E5">the rican brussels</font><font color="#CCCCCC"> two years</font><font color="#E5E5E5"> ago when</font>

806
00:36:45,579 --> 00:36:50,319
they explained that this<font color="#E5E5E5"> is the low stub</font>

807
00:36:47,410 --> 00:36:53,680
<font color="#E5E5E5">this is a memory structure that is there</font>

808
00:36:50,319 --> 00:36:56,109
for<font color="#E5E5E5"> bringing the</font><font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> back up</font><font color="#CCCCCC"> in it and</font>

809
00:36:53,680 --> 00:36:58,899
<font color="#E5E5E5">sleeps the computer recovers from sleep</font>

810
00:36:56,109 --> 00:37:01,750
<font color="#E5E5E5">its</font><font color="#CCCCCC"> CPU storage</font><font color="#E5E5E5"> in 16-bit modes it needs</font>

811
00:36:58,900 --> 00:37:04,480
to go into 32-bit mode and then 64-bit

812
00:37:01,750 --> 00:37:07,180
mode in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> restart</font><font color="#E5E5E5"> the kernel</font>

813
00:37:04,480 --> 00:37:11,260
again and this<font color="#E5E5E5"> is where this memory</font>

814
00:37:07,180 --> 00:37:15,220
structure comes in place at offset<font color="#E5E5E5"> a</font>

815
00:37:11,260 --> 00:37:18,640
<font color="#E5E5E5">zero we have</font><font color="#CCCCCC"> the PM l4 of the kernel</font><font color="#E5E5E5"> and</font>

816
00:37:15,220 --> 00:37:21,578
that<font color="#E5E5E5"> offset 70 we do have an entry in to</font>

817
00:37:18,640 --> 00:37:24,250
<font color="#CCCCCC">the antis kernel it's not the base of</font>

818
00:37:21,579 --> 00:37:26,230
the kernel but it's kind<font color="#E5E5E5"> of fine because</font>

819
00:37:24,250 --> 00:37:28,349
<font color="#E5E5E5">it's not too many pages to scan back a</font>

820
00:37:26,230 --> 00:37:32,369
few pages is not really impact

821
00:37:28,349 --> 00:37:34,109
performance<font color="#E5E5E5"> and as a last resort</font><font color="#CCCCCC"> yeah if</font>

822
00:37:32,369 --> 00:37:37,739
we<font color="#E5E5E5"> don't find it we might have to do</font>

823
00:37:34,109 --> 00:37:40,200
some scanning as well so let's do

824
00:37:37,739 --> 00:37:45,029
another<font color="#E5E5E5"> demo let's do a physical demo</font>

825
00:37:40,200 --> 00:37:48,058
this time as well<font color="#E5E5E5"> let's try to write to</font>

826
00:37:45,029 --> 00:37:49,979
some<font color="#E5E5E5"> memory as well let's hunt for some</font>

827
00:37:48,059 --> 00:37:52,609
data in the process heap and let's

828
00:37:49,979 --> 00:38:01,379
overwrite it on a separate physical

829
00:37:52,609 --> 00:38:08,038
<font color="#E5E5E5">system so here I have</font><font color="#CCCCCC"> a if</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can't</font>

830
00:38:01,380 --> 00:38:10,890
have that<font color="#E5E5E5"> one on there yeah I'm starting</font>

831
00:38:08,039 --> 00:38:15,769
a<font color="#E5E5E5"> notepad on this system with some text</font>

832
00:38:10,890 --> 00:38:23,538
<font color="#CCCCCC">here and let's see if</font><font color="#E5E5E5"> we can find a text</font>

833
00:38:15,769 --> 00:38:27,058
<font color="#E5E5E5">by editing some files I already have the</font>

834
00:38:23,539 --> 00:38:29,519
mounted here<font color="#E5E5E5"> with FPGA since before the</font>

835
00:38:27,059 --> 00:38:34,799
actual file system so let's have a<font color="#E5E5E5"> look</font>

836
00:38:29,519 --> 00:38:37,919
at it let's click into the notepad

837
00:38:34,799 --> 00:38:44,099
process it already appeared here since I

838
00:38:37,920 --> 00:38:47,130
<font color="#CCCCCC">started just a</font><font color="#E5E5E5"> world order and here we</font>

839
00:38:44,099 --> 00:38:50,069
can we<font color="#E5E5E5"> have the memory map and for each</font>

840
00:38:47,130 --> 00:38:53,099
memory map entry we are also<font color="#CCCCCC"> creating a</font>

841
00:38:50,069 --> 00:38:57,569
file in the memory map directory<font color="#E5E5E5"> so</font>

842
00:38:53,099 --> 00:39:03,599
let's edit some files<font color="#E5E5E5"> here let's do it</font>

843
00:38:57,569 --> 00:39:07,589
in<font color="#E5E5E5"> Ubuntu this time</font><font color="#CCCCCC"> I need to mount</font><font color="#E5E5E5"> the</font>

844
00:39:03,599 --> 00:39:13,890
actual drive first<font color="#CCCCCC"> and let's go</font><font color="#E5E5E5"> into</font>

845
00:39:07,589 --> 00:39:15,599
<font color="#E5E5E5">that directory before</font><font color="#CCCCCC"> we start I</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

846
00:39:13,890 --> 00:39:18,690
have<font color="#E5E5E5"> a search for some text let's search</font>

847
00:39:15,599 --> 00:39:20,400
for the hello text<font color="#E5E5E5"> and if we check that</font>

848
00:39:18,690 --> 00:39:24,930
<font color="#E5E5E5">what us in hex ASCII</font>

849
00:39:20,400 --> 00:39:27,180
it's<font color="#E5E5E5"> this value</font><font color="#CCCCCC"> and in this directory</font>

850
00:39:24,930 --> 00:39:29,578
it contains file for each memory map and

851
00:39:27,180 --> 00:39:31,649
trip and the text in notepad it should

852
00:39:29,579 --> 00:39:35,009
probably be stored on<font color="#E5E5E5"> the heap somewhere</font>

853
00:39:31,650 --> 00:39:38,099
so<font color="#E5E5E5"> let's and it should probably be</font>

854
00:39:35,009 --> 00:39:40,229
stored on the primary<font color="#CCCCCC"> heap heap 0 0 in</font>

855
00:39:38,099 --> 00:39:41,560
in my programs let's have a look if we

856
00:39:40,229 --> 00:39:43,450
find some

857
00:39:41,560 --> 00:39:50,740
we need to go<font color="#CCCCCC"> into</font><font color="#E5E5E5"> that directory as</font>

858
00:39:43,450 --> 00:39:54,009
well<font color="#E5E5E5"> of course</font><font color="#CCCCCC"> and better luck now and</font>

859
00:39:50,740 --> 00:39:56,410
let's open some we have a couple<font color="#CCCCCC"> of heap</font>

860
00:39:54,010 --> 00:39:58,450
entries here and<font color="#E5E5E5"> that's open one of them</font>

861
00:39:56,410 --> 00:40:01,210
in<font color="#E5E5E5"> our hex editor</font><font color="#CCCCCC"> one of the larger one</font>

862
00:39:58,450 --> 00:40:03,819
and<font color="#E5E5E5"> tried to search for this text</font>

863
00:40:01,210 --> 00:40:06,460
they had text hello and in notepad

864
00:40:03,820 --> 00:40:09,730
everything is in<font color="#CCCCCC"> utf-16 so we need to 0</font>

865
00:40:06,460 --> 00:40:13,510
pad<font color="#CCCCCC"> every second</font><font color="#E5E5E5"> byte and here I do have</font>

866
00:40:09,730 --> 00:40:16,120
<font color="#E5E5E5">some text that</font><font color="#CCCCCC"> looks it</font><font color="#E5E5E5"> looks promising</font>

867
00:40:13,510 --> 00:40:18,480
at least so let's try to<font color="#E5E5E5"> change that and</font>

868
00:40:16,120 --> 00:40:18,480
<font color="#E5E5E5">see what happens</font>

869
00:40:25,570 --> 00:40:36,910
and<font color="#CCCCCC"> he'd say and nothing</font><font color="#E5E5E5"> changed until I</font>

870
00:40:33,400 --> 00:40:43,690
<font color="#CCCCCC">just click somewhere on this system I</font>

871
00:40:36,910 --> 00:40:45,240
hope<font color="#E5E5E5"> now this was this is</font><font color="#CCCCCC"> not how it's</font>

872
00:40:43,690 --> 00:40:48,660
supposed<font color="#E5E5E5"> to be working</font>

873
00:40:45,240 --> 00:40:48,660
let's try<font color="#E5E5E5"> to</font>

874
00:40:53,290 --> 00:40:57,990
<font color="#E5E5E5">I let the</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> again</font>

875
00:41:02,319 --> 00:41:11,599
<font color="#CCCCCC">that's why I should not one</font><font color="#E5E5E5"> failed them</font>

876
00:41:07,490 --> 00:41:16,279
after the last one search<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think we</font>

877
00:41:11,599 --> 00:41:18,410
<font color="#E5E5E5">don't maybe the text is stored in</font>

878
00:41:16,279 --> 00:41:21,410
multiple<font color="#CCCCCC"> places or another part of</font><font color="#E5E5E5"> the</font>

879
00:41:18,410 --> 00:41:23,740
heap as well so it might<font color="#E5E5E5"> be more places</font>

880
00:41:21,410 --> 00:41:28,000
<font color="#E5E5E5">like we can have a quick</font><font color="#CCCCCC"> look if we find</font>

881
00:41:23,740 --> 00:41:31,609
some<font color="#E5E5E5"> more texts in here probably</font><font color="#CCCCCC"> not</font>

882
00:41:28,000 --> 00:41:33,770
yeah<font color="#CCCCCC"> but anyway</font><font color="#E5E5E5"> one failed them out of</font>

883
00:41:31,609 --> 00:41:37,009
quite a few<font color="#E5E5E5"> ones it's kinda okay</font><font color="#CCCCCC"> I hope</font>

884
00:41:33,770 --> 00:41:39,589
and anyway the memory<font color="#CCCCCC"> process file</font>

885
00:41:37,010 --> 00:41:41,359
<font color="#E5E5E5">system it's a work in progress</font><font color="#CCCCCC"> and a lot</font>

886
00:41:39,589 --> 00:41:43,190
of<font color="#E5E5E5"> future work remains it's a hobby</font>

887
00:41:41,359 --> 00:41:46,339
<font color="#CCCCCC">project of mine so I do have limited</font>

888
00:41:43,190 --> 00:41:48,950
<font color="#CCCCCC">time</font><font color="#E5E5E5"> but I want to add the page hashing</font>

889
00:41:46,339 --> 00:41:51,020
really soon<font color="#CCCCCC"> I want to do be able to</font><font color="#E5E5E5"> do</font>

890
00:41:48,950 --> 00:41:52,609
things like signature<font color="#E5E5E5"> mashing and also</font>

891
00:41:51,020 --> 00:41:55,819
it would allow<font color="#CCCCCC"> me to do things</font><font color="#E5E5E5"> like</font>

892
00:41:52,609 --> 00:41:57,920
<font color="#CCCCCC">remote background low bandwidth cache</font>

893
00:41:55,819 --> 00:42:01,490
coherency updates to make it more<font color="#E5E5E5"> user</font>

894
00:41:57,920 --> 00:42:04,490
<font color="#E5E5E5">friendly</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> I would allow me</font><font color="#CCCCCC"> to</font>

895
00:42:01,490 --> 00:42:08,868
capture remote memory at lower bandwidth

896
00:42:04,490 --> 00:42:12,109
as well<font color="#CCCCCC"> I wish to add more functionality</font>

897
00:42:08,869 --> 00:42:15,710
and features such as<font color="#E5E5E5"> additional analysis</font>

898
00:42:12,109 --> 00:42:17,900
capabilities and also support<font color="#CCCCCC"> for non</font>

899
00:42:15,710 --> 00:42:21,700
Windows operating systems as well<font color="#E5E5E5"> but</font>

900
00:42:17,900 --> 00:42:23,900
that's a<font color="#E5E5E5"> huge work item and of course</font>

901
00:42:21,700 --> 00:42:27,859
additional<font color="#E5E5E5"> memory acquisition methods</font>

902
00:42:23,900 --> 00:42:29,630
and to sum everything<font color="#E5E5E5"> up the memory</font>

903
00:42:27,859 --> 00:42:31,730
process<font color="#E5E5E5"> file system it's a</font>

904
00:42:29,630 --> 00:42:34,369
multi-threaded<font color="#CCCCCC"> library</font><font color="#E5E5E5"> which is a really</font>

905
00:42:31,730 --> 00:42:36,140
easy<font color="#CCCCCC"> pointing clicked file system based</font>

906
00:42:34,369 --> 00:42:39,410
memory analysis tool with a strong

907
00:42:36,140 --> 00:42:42,319
<font color="#CCCCCC">windows focus</font><font color="#E5E5E5"> it has an API for Python C</font>

908
00:42:39,410 --> 00:42:44,690
and C++<font color="#CCCCCC"> it comes with a wide range of</font>

909
00:42:42,319 --> 00:42:46,819
memory acquisition<font color="#CCCCCC"> methods both Hardware</font>

910
00:42:44,690 --> 00:42:49,640
based methods and software<font color="#CCCCCC"> based ones</font>

911
00:42:46,819 --> 00:42:52,430
<font color="#E5E5E5">and it's completely</font><font color="#CCCCCC"> open-source</font><font color="#E5E5E5"> it's</font>

912
00:42:49,640 --> 00:42:54,600
available on my github<font color="#E5E5E5"> and please do</font>

913
00:42:52,430 --> 00:42:58,140
have a look at it thank you

914
00:42:54,600 --> 00:43:00,200
[Applause]

915
00:42:58,140 --> 00:43:00,200
you

916
00:43:00,470 --> 00:43:02,980
[Music]

