1
00:00:00,000 --> 00:00:02,729
[Music]

2
00:00:11,550 --> 00:00:18,010
hello and thank<font color="#CCCCCC"> you all very</font><font color="#E5E5E5"> much for</font>

3
00:00:15,430 --> 00:00:20,560
joining<font color="#E5E5E5"> us today for our talk hardening</font>

4
00:00:18,010 --> 00:00:26,050
<font color="#E5E5E5">secure secure boots on embedded devices</font>

5
00:00:20,560 --> 00:00:28,419
<font color="#E5E5E5">for hostile environments so together the</font>

6
00:00:26,050 --> 00:00:31,180
three of<font color="#CCCCCC"> us Christophe Rowe Niq and I</font>

7
00:00:28,420 --> 00:00:33,309
have a lot of experience breaking secure

8
00:00:31,180 --> 00:00:37,690
boots<font color="#E5E5E5"> analyzing secure boots</font>

9
00:00:33,309 --> 00:00:41,050
evaluating secure boots<font color="#E5E5E5"> and also when we</font>

10
00:00:37,690 --> 00:00:43,360
<font color="#CCCCCC">look at</font><font color="#E5E5E5"> the public talks things people</font>

11
00:00:41,050 --> 00:00:46,629
have<font color="#CCCCCC"> done in public</font><font color="#E5E5E5"> we see for instance</font>

12
00:00:43,360 --> 00:00:50,040
<font color="#E5E5E5">that bunny who gave the previous talk</font>

13
00:00:46,629 --> 00:00:53,049
<font color="#CCCCCC">talks about hacking</font><font color="#E5E5E5"> the Xbox in 2003 and</font>

14
00:00:50,040 --> 00:00:55,780
two hours ago<font color="#E5E5E5"> we had the latest</font>

15
00:00:53,049 --> 00:01:00,820
<font color="#CCCCCC">installment of breaking secure boot from</font>

16
00:00:55,780 --> 00:01:05,680
<font color="#CCCCCC">the CTS Labs guys so after all that time</font>

17
00:01:00,820 --> 00:01:08,950
secure boot is<font color="#E5E5E5"> still often vulnerable so</font>

18
00:01:05,680 --> 00:01:11,369
<font color="#E5E5E5">therefore our goal is to try and create</font>

19
00:01:08,950 --> 00:01:13,990
a secure boot guidance for people

20
00:01:11,369 --> 00:01:16,210
<font color="#E5E5E5">designing secure boot so designing the</font>

21
00:01:13,990 --> 00:01:19,030
hardware<font color="#E5E5E5"> designing the software of</font>

22
00:01:16,210 --> 00:01:21,038
secure boot people<font color="#CCCCCC"> actually creating</font>

23
00:01:19,030 --> 00:01:23,560
<font color="#E5E5E5">this</font><font color="#CCCCCC"> Hardware people actually</font><font color="#E5E5E5"> write in</font>

24
00:01:21,039 --> 00:01:26,350
<font color="#E5E5E5">this code and people</font><font color="#CCCCCC"> who then actually</font>

25
00:01:23,560 --> 00:01:33,219
<font color="#CCCCCC">have to take all</font><font color="#E5E5E5"> that work and put it</font>

26
00:01:26,350 --> 00:01:34,750
into a finished<font color="#E5E5E5"> product so over</font><font color="#CCCCCC"> the in</font>

27
00:01:33,219 --> 00:01:37,178
the<font color="#E5E5E5"> next couple of</font><font color="#CCCCCC"> months</font><font color="#E5E5E5"> we'll try to</font>

28
00:01:34,750 --> 00:01:39,159
release<font color="#CCCCCC"> a white</font><font color="#E5E5E5"> paper which we're still</font>

29
00:01:37,179 --> 00:01:42,820
working on which will hopefully give

30
00:01:39,159 --> 00:01:44,979
<font color="#E5E5E5">quite a bit of guidance there however in</font>

31
00:01:42,820 --> 00:01:46,809
this presentation we will<font color="#E5E5E5"> try to take a</font>

32
00:01:44,979 --> 00:01:50,799
<font color="#E5E5E5">little bit of an offensive focus so</font>

33
00:01:46,810 --> 00:01:53,409
we'll show some<font color="#E5E5E5"> known attacks</font><font color="#CCCCCC"> and some</font>

34
00:01:50,799 --> 00:01:55,569
new attacks and using<font color="#E5E5E5"> those new attacks</font>

35
00:01:53,409 --> 00:01:58,689
<font color="#CCCCCC">we'll try</font><font color="#E5E5E5"> to give some new perspectives</font>

36
00:01:55,569 --> 00:02:05,859
<font color="#E5E5E5">in attacking secure boots but also in</font>

37
00:01:58,689 --> 00:02:07,689
ways to defend<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so I will give the</font>

38
00:02:05,859 --> 00:02:10,600
<font color="#CCCCCC">introduction I will talk a</font><font color="#E5E5E5"> little bit</font>

39
00:02:07,689 --> 00:02:12,430
about secure boot and then<font color="#CCCCCC"> Cristoforo</font>

40
00:02:10,600 --> 00:02:16,030
and<font color="#CCCCCC"> I will talk about</font><font color="#E5E5E5"> some attacks and</font>

41
00:02:12,430 --> 00:02:18,940
some mitigations<font color="#E5E5E5"> and then Nick who's</font>

42
00:02:16,030 --> 00:02:20,860
<font color="#E5E5E5">behind me will give a</font><font color="#CCCCCC"> demonstration a</font>

43
00:02:18,940 --> 00:02:26,129
live demonstration which he's still

44
00:02:20,860 --> 00:02:26,129
trying<font color="#CCCCCC"> to fix I think followed</font><font color="#E5E5E5"> by a</font>

45
00:02:27,150 --> 00:02:35,430
<font color="#E5E5E5">okay so let's imagine a system an</font>

46
00:02:31,300 --> 00:02:37,750
embedded system without secure<font color="#E5E5E5"> boots</font><font color="#CCCCCC"> so</font>

47
00:02:35,430 --> 00:02:40,540
basically there's<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> on the chip</font>

48
00:02:37,750 --> 00:02:43,090
<font color="#E5E5E5">inside one package it has a processor it</font>

49
00:02:40,540 --> 00:02:47,200
has<font color="#E5E5E5"> some memory it has</font><font color="#CCCCCC"> some code and</font>

50
00:02:43,090 --> 00:02:50,520
<font color="#E5E5E5">attached</font><font color="#CCCCCC"> to this package is a piece</font><font color="#E5E5E5"> of</font>

51
00:02:47,200 --> 00:02:54,519
flash memory<font color="#E5E5E5"> containing some code and</font>

52
00:02:50,520 --> 00:02:56,860
there's a DDR chip so this is the state

53
00:02:54,520 --> 00:02:59,310
when the device is<font color="#CCCCCC"> turned off</font><font color="#E5E5E5"> and when</font>

54
00:02:56,860 --> 00:03:03,130
it boots<font color="#E5E5E5"> when it's released from reset</font>

55
00:02:59,310 --> 00:03:06,700
the<font color="#E5E5E5"> ROM code will load the BL 1 into s</font>

56
00:03:03,130 --> 00:03:11,500
<font color="#E5E5E5">Ram and then the</font><font color="#CCCCCC"> B r1 will initialize</font>

57
00:03:06,700 --> 00:03:12,899
DDR<font color="#E5E5E5"> and load the BL 2 into it and so on</font>

58
00:03:11,500 --> 00:03:18,460
and<font color="#E5E5E5"> so forth</font>

59
00:03:12,900 --> 00:03:21,490
okay so<font color="#E5E5E5"> as we</font><font color="#CCCCCC"> already saw this leads us</font>

60
00:03:18,460 --> 00:03:24,430
to<font color="#CCCCCC"> some attacks</font><font color="#E5E5E5"> so there are two major</font>

61
00:03:21,490 --> 00:03:26,980
attack of scenarios and that is<font color="#CCCCCC"> one a</font>

62
00:03:24,430 --> 00:03:29,470
<font color="#CCCCCC">hardware attacker</font><font color="#E5E5E5"> these solders this</font>

63
00:03:26,980 --> 00:03:32,350
flash chip<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> programs it sort of sit</font>

64
00:03:29,470 --> 00:03:37,690
back<font color="#E5E5E5"> on or an attacker with software</font>

65
00:03:32,350 --> 00:03:41,290
control basically reprograms<font color="#CCCCCC"> flash</font><font color="#E5E5E5"> so</font>

66
00:03:37,690 --> 00:03:44,380
that's why we<font color="#E5E5E5"> need secure boots so what</font>

67
00:03:41,290 --> 00:03:46,269
is secure boot and well luckily<font color="#E5E5E5"> today we</font>

68
00:03:44,380 --> 00:03:50,530
<font color="#E5E5E5">already had an explanation from</font><font color="#CCCCCC"> the CTS</font>

69
00:03:46,270 --> 00:03:52,390
<font color="#CCCCCC">labs guys on what's secure boot is but</font>

70
00:03:50,530 --> 00:03:55,330
just<font color="#CCCCCC"> to recap it's basically the</font>

71
00:03:52,390 --> 00:03:57,579
authentication<font color="#CCCCCC"> of loaded images and it</font>

72
00:03:55,330 --> 00:04:00,790
has a root of<font color="#E5E5E5"> trust embedded in hardware</font>

73
00:03:57,580 --> 00:04:04,810
<font color="#CCCCCC">and for us</font><font color="#E5E5E5"> that means that immutable</font>

74
00:04:00,790 --> 00:04:10,149
code and data are<font color="#E5E5E5"> stored in ROM and OTP</font>

75
00:04:04,810 --> 00:04:12,220
<font color="#E5E5E5">so one-time programmable memory so now</font>

76
00:04:10,150 --> 00:04:15,580
let's try to explain secure boot<font color="#E5E5E5"> so here</font>

77
00:04:12,220 --> 00:04:19,988
is the picture<font color="#E5E5E5"> we saw before</font><font color="#CCCCCC"> the ROM has</font>

78
00:04:15,580 --> 00:04:24,250
copied BL 1 into<font color="#E5E5E5"> s Ram</font><font color="#CCCCCC"> but now there are</font>

79
00:04:19,988 --> 00:04:29,020
<font color="#E5E5E5">also signatures so the ROM will first</font>

80
00:04:24,250 --> 00:04:31,000
calculate a hash of the BL<font color="#E5E5E5"> 1 and then</font>

81
00:04:29,020 --> 00:04:33,039
verify<font color="#CCCCCC"> it against the reference</font>

82
00:04:31,000 --> 00:04:35,919
signature so<font color="#E5E5E5"> either an RSA signature or</font>

83
00:04:33,040 --> 00:04:36,780
as we saw with<font color="#E5E5E5"> the PSP</font><font color="#CCCCCC"> may be just a</font>

84
00:04:35,919 --> 00:04:41,099
hash

85
00:04:36,780 --> 00:04:44,280
<font color="#CCCCCC">stole</font><font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> and basically if these</font>

86
00:04:41,100 --> 00:04:48,840
<font color="#CCCCCC">signatures match</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> boots and otherwise</font>

87
00:04:44,280 --> 00:04:52,080
you<font color="#CCCCCC"> don't boots</font><font color="#E5E5E5"> okay</font>

88
00:04:48,840 --> 00:04:53,940
so that's an easy explanation<font color="#E5E5E5"> but you</font>

89
00:04:52,080 --> 00:04:58,950
know the real<font color="#CCCCCC"> world is typically a</font>

90
00:04:53,940 --> 00:05:01,500
<font color="#E5E5E5">little bit more complex so</font><font color="#CCCCCC"> on a</font><font color="#E5E5E5"> better</font>

91
00:04:58,950 --> 00:05:04,469
device<font color="#E5E5E5"> a typical secure boot flow can</font>

92
00:05:01,500 --> 00:05:06,810
look something like this on<font color="#E5E5E5"> one end of</font>

93
00:05:04,470 --> 00:05:08,760
the spectrum<font color="#E5E5E5"> you have hardware and ROM</font>

94
00:05:06,810 --> 00:05:10,620
and at the very other end of the

95
00:05:08,760 --> 00:05:13,620
spectrum<font color="#E5E5E5"> you actually have applications</font>

96
00:05:10,620 --> 00:05:15,210
and as you go<font color="#E5E5E5"> from</font><font color="#CCCCCC"> one end</font><font color="#E5E5E5"> of the</font>

97
00:05:13,620 --> 00:05:18,900
spectrum to<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> end some</font>

98
00:05:15,210 --> 00:05:21,719
properties change so first of<font color="#E5E5E5"> all a lot</font>

99
00:05:18,900 --> 00:05:23,719
<font color="#E5E5E5">of privileges are dropped</font><font color="#CCCCCC"> and we don't</font>

100
00:05:21,720 --> 00:05:26,970
<font color="#E5E5E5">mean just you know hypervisor mode</font>

101
00:05:23,720 --> 00:05:30,060
kernel mode user mode<font color="#E5E5E5"> also</font><font color="#CCCCCC"> things like</font>

102
00:05:26,970 --> 00:05:32,490
<font color="#E5E5E5">access to cryptographic keys access to</font>

103
00:05:30,060 --> 00:05:37,470
the ROM code itself and maybe access to

104
00:05:32,490 --> 00:05:39,510
engines are drops or change another big

105
00:05:37,470 --> 00:05:40,979
<font color="#CCCCCC">difference is that hardware cannot</font>

106
00:05:39,510 --> 00:05:44,039
really be updated in the field<font color="#E5E5E5"> and</font>

107
00:05:40,979 --> 00:05:45,659
neither can<font color="#CCCCCC"> ROM code</font><font color="#E5E5E5"> while at the</font><font color="#CCCCCC"> other</font>

108
00:05:44,040 --> 00:05:48,360
end<font color="#CCCCCC"> of the spectrum the applications</font>

109
00:05:45,660 --> 00:05:54,419
<font color="#E5E5E5">might actually be updated multiple times</font>

110
00:05:48,360 --> 00:05:55,800
a day<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> last big difference is</font>

111
00:05:54,419 --> 00:05:58,530
that<font color="#CCCCCC"> there are actually a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

112
00:05:55,800 --> 00:06:01,169
manufacturers involved so in this

113
00:05:58,530 --> 00:06:03,270
hardware and<font color="#CCCCCC"> ROM stage</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> has a</font>

114
00:06:01,169 --> 00:06:05,340
<font color="#E5E5E5">responsibility of one manufacturer but</font>

115
00:06:03,270 --> 00:06:06,840
<font color="#CCCCCC">within that company</font><font color="#E5E5E5"> maybe another group</font>

116
00:06:05,340 --> 00:06:07,349
is<font color="#E5E5E5"> actually responsible for</font><font color="#CCCCCC"> writing the</font>

117
00:06:06,840 --> 00:06:09,960
bootloader

118
00:06:07,350 --> 00:06:12,930
then a third party may<font color="#E5E5E5"> be responsible</font>

119
00:06:09,960 --> 00:06:14,849
<font color="#E5E5E5">for actually providing te OS and then an</font>

120
00:06:12,930 --> 00:06:16,979
original equipment<font color="#E5E5E5"> manufacturer is</font>

121
00:06:14,850 --> 00:06:18,960
actually<font color="#E5E5E5"> responsible for</font><font color="#CCCCCC"> basically the</font>

122
00:06:16,979 --> 00:06:22,409
<font color="#CCCCCC">normal world</font><font color="#E5E5E5"> bootloader and</font><font color="#CCCCCC"> maybe</font>

123
00:06:18,960 --> 00:06:25,020
<font color="#E5E5E5">something like a Linux OS so they're</font>

124
00:06:22,410 --> 00:06:27,440
<font color="#CCCCCC">actually a lot of</font><font color="#E5E5E5"> different interests in</font>

125
00:06:25,020 --> 00:06:29,490
<font color="#E5E5E5">the secure boot chain and all of these</font>

126
00:06:27,440 --> 00:06:31,289
parties<font color="#CCCCCC"> and all of</font><font color="#E5E5E5"> these interests</font><font color="#CCCCCC"> all</font>

127
00:06:29,490 --> 00:06:37,500
have a<font color="#E5E5E5"> slightly different</font><font color="#CCCCCC"> perspective on</font>

128
00:06:31,289 --> 00:06:39,890
secure boots<font color="#E5E5E5"> okay so the goal of secure</font>

129
00:06:37,500 --> 00:06:41,880
boot<font color="#E5E5E5"> is to</font><font color="#CCCCCC"> mitigate a number of threats</font>

130
00:06:39,890 --> 00:06:44,000
so it's basically to prevent

131
00:06:41,880 --> 00:06:46,380
modification of code<font color="#E5E5E5"> and data in flash</font>

132
00:06:44,000 --> 00:06:49,830
<font color="#CCCCCC">it's to allow you</font><font color="#E5E5E5"> to actually have</font>

133
00:06:46,380 --> 00:06:50,190
secure<font color="#E5E5E5"> updates</font><font color="#CCCCCC"> and it prevents attackers</font>

134
00:06:49,830 --> 00:06:53,280
from

135
00:06:50,190 --> 00:06:56,670
persistent footholds<font color="#E5E5E5"> and it also</font>

136
00:06:53,280 --> 00:06:59,669
prevents<font color="#E5E5E5"> access to</font><font color="#CCCCCC"> assets like keys code</font>

137
00:06:56,670 --> 00:07:01,800
<font color="#E5E5E5">and crypto engines and finally it's an</font>

138
00:06:59,670 --> 00:07:04,440
important<font color="#E5E5E5"> part of preventing attacks</font>

139
00:07:01,800 --> 00:07:11,490
from<font color="#E5E5E5"> escalating for instance from</font><font color="#CCCCCC"> the re</font>

140
00:07:04,440 --> 00:07:12,420
<font color="#CCCCCC">e to the T ok so when we</font><font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> this</font>

141
00:07:11,490 --> 00:07:15,900
attack surface

142
00:07:12,420 --> 00:07:17,970
we<font color="#E5E5E5"> believe that basically you either</font>

143
00:07:15,900 --> 00:07:22,020
have a broken design<font color="#E5E5E5"> or a broken</font>

144
00:07:17,970 --> 00:07:24,210
implementation<font color="#CCCCCC"> and this basically</font>

145
00:07:22,020 --> 00:07:27,090
translates to as well also<font color="#E5E5E5"> translates to</font>

146
00:07:24,210 --> 00:07:32,700
<font color="#E5E5E5">maybe actually having broken software or</font>

147
00:07:27,090 --> 00:07:36,419
actually<font color="#E5E5E5"> having broken hardware</font><font color="#CCCCCC"> yep so</font>

148
00:07:32,700 --> 00:07:39,599
I'll now give some examples of<font color="#E5E5E5"> secure</font>

149
00:07:36,420 --> 00:07:41,970
boots having been publicly broken but

150
00:07:39,600 --> 00:07:43,980
again<font color="#CCCCCC"> the CTS Labs guys did an</font><font color="#E5E5E5"> excellent</font>

151
00:07:41,970 --> 00:07:46,380
job this<font color="#E5E5E5"> morning</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> actually giving us</font>

152
00:07:43,980 --> 00:07:52,830
<font color="#E5E5E5">and other examples so please also take</font>

153
00:07:46,380 --> 00:07:55,409
<font color="#E5E5E5">that</font><font color="#CCCCCC"> one in mind okay so our personal</font>

154
00:07:52,830 --> 00:07:59,300
<font color="#CCCCCC">favourites</font><font color="#E5E5E5"> of a secure boot</font><font color="#CCCCCC"> ROM bypass</font>

155
00:07:55,410 --> 00:08:02,850
is the<font color="#CCCCCC"> am logic so we</font><font color="#E5E5E5"> believe it to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> a</font>

156
00:07:59,300 --> 00:08:04,470
broken software design that is<font color="#E5E5E5"> available</font>

157
00:08:02,850 --> 00:08:08,100
<font color="#E5E5E5">because of</font><font color="#CCCCCC"> weak cryptographic options</font>

158
00:08:04,470 --> 00:08:10,590
<font color="#E5E5E5">and the bypass is basically a downgrade</font>

159
00:08:08,100 --> 00:08:13,680
attack from an RSA signature to a char

160
00:08:10,590 --> 00:08:15,869
signature and as<font color="#CCCCCC"> this char signature</font>

161
00:08:13,680 --> 00:08:17,940
contains no secrets<font color="#CCCCCC"> an attacker can just</font>

162
00:08:15,870 --> 00:08:22,500
modify<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> update the hash and</font>

163
00:08:17,940 --> 00:08:26,160
that's it so how could this have been

164
00:08:22,500 --> 00:08:27,600
mitigated<font color="#CCCCCC"> well first of all they</font>

165
00:08:26,160 --> 00:08:32,130
probably shouldn't<font color="#E5E5E5"> have supported weak</font>

166
00:08:27,600 --> 00:08:34,050
cryptographic<font color="#E5E5E5"> options</font><font color="#CCCCCC"> and in general we</font>

167
00:08:32,130 --> 00:08:36,599
suggest<font color="#E5E5E5"> that limiting the</font><font color="#CCCCCC"> amount of</font>

168
00:08:34,049 --> 00:08:38,760
options<font color="#CCCCCC"> an attacker can choose from is</font>

169
00:08:36,599 --> 00:08:42,979
good<font color="#E5E5E5"> for security because</font><font color="#CCCCCC"> an attacker</font>

170
00:08:38,760 --> 00:08:42,979
will always choose<font color="#E5E5E5"> the weakest option</font>

171
00:08:43,580 --> 00:08:48,780
<font color="#CCCCCC">our second example is an attender switch</font>

172
00:08:46,470 --> 00:08:51,720
<font color="#E5E5E5">bootrom vulnerability and we believe</font>

173
00:08:48,780 --> 00:08:53,760
this to<font color="#E5E5E5"> be a software issue that was</font>

174
00:08:51,720 --> 00:08:55,980
basically due<font color="#CCCCCC"> to a broken implementation</font>

175
00:08:53,760 --> 00:08:58,950
<font color="#E5E5E5">and it's basically a classic buffer</font>

176
00:08:55,980 --> 00:09:00,810
overflow attack so in the<font color="#E5E5E5"> USB recovery</font>

177
00:08:58,950 --> 00:09:02,520
mode<font color="#CCCCCC"> there's this buffer overflow attack</font>

178
00:09:00,810 --> 00:09:04,050
<font color="#E5E5E5">which may actually</font><font color="#CCCCCC"> just be you</font><font color="#E5E5E5"> know</font>

179
00:09:02,520 --> 00:09:08,120
exploited using<font color="#CCCCCC"> nor</font>

180
00:09:04,050 --> 00:09:11,060
all software exploitation techniques so

181
00:09:08,120 --> 00:09:13,019
how could they have mitigated<font color="#CCCCCC"> this well</font>

182
00:09:11,060 --> 00:09:17,339
they could<font color="#CCCCCC"> have just</font><font color="#E5E5E5"> written secure</font>

183
00:09:13,019 --> 00:09:19,860
software so<font color="#E5E5E5"> I got complaints sadly</font>

184
00:09:17,339 --> 00:09:20,880
that's<font color="#E5E5E5"> not an acceptable</font><font color="#CCCCCC"> answer so they</font>

185
00:09:19,860 --> 00:09:24,959
should have tried<font color="#E5E5E5"> to make software</font>

186
00:09:20,880 --> 00:09:27,060
exploitation harder so<font color="#E5E5E5"> they could have</font>

187
00:09:24,959 --> 00:09:30,209
<font color="#E5E5E5">used for instance you know typical</font>

188
00:09:27,060 --> 00:09:32,369
mitigations like<font color="#CCCCCC"> stack cookies</font><font color="#E5E5E5"> s la</font><font color="#CCCCCC"> CFI</font>

189
00:09:30,209 --> 00:09:35,040
<font color="#E5E5E5">they could have used memory protections</font>

190
00:09:32,370 --> 00:09:37,470
to<font color="#E5E5E5"> enforce rights or execute they could</font>

191
00:09:35,040 --> 00:09:45,569
have<font color="#E5E5E5"> used you know MP use</font><font color="#CCCCCC"> mm use IOM</font>

192
00:09:37,470 --> 00:09:47,190
<font color="#CCCCCC">amuse so in 2019 I'm standing onstage at</font>

193
00:09:45,570 --> 00:09:48,540
<font color="#CCCCCC">a security</font><font color="#E5E5E5"> conference and I'm talking</font>

194
00:09:47,190 --> 00:09:52,050
about<font color="#E5E5E5"> you know implementing</font><font color="#CCCCCC"> stack</font>

195
00:09:48,540 --> 00:09:54,149
cookies<font color="#CCCCCC"> aslr</font><font color="#E5E5E5"> and see</font><font color="#CCCCCC"> you fine that</font>

196
00:09:52,050 --> 00:09:56,670
sounds a<font color="#CCCCCC"> bit stupid but you have to</font>

197
00:09:54,149 --> 00:09:58,890
remember that most secure implement

198
00:09:56,670 --> 00:10:06,870
secure boot implementations implement

199
00:09:58,890 --> 00:10:10,170
none of these mitigations<font color="#CCCCCC"> okay so I said</font>

200
00:10:06,870 --> 00:10:12,270
you could write secure software<font color="#E5E5E5"> now even</font>

201
00:10:10,170 --> 00:10:17,219
if you write secure<font color="#CCCCCC"> software you might</font>

202
00:10:12,270 --> 00:10:19,430
<font color="#E5E5E5">still</font><font color="#CCCCCC"> have broken</font><font color="#E5E5E5"> hardware so our next</font>

203
00:10:17,220 --> 00:10:22,140
example<font color="#E5E5E5"> is fault injection on the</font>

204
00:10:19,430 --> 00:10:24,540
<font color="#CCCCCC">Nintendo switch and basically they</font>

205
00:10:22,140 --> 00:10:30,540
skipped<font color="#CCCCCC"> the hash verification stage</font>

206
00:10:24,540 --> 00:10:34,319
using voltage fault injection so what is

207
00:10:30,540 --> 00:10:37,319
fault injection<font color="#E5E5E5"> well basically you try</font>

208
00:10:34,320 --> 00:10:40,200
<font color="#E5E5E5">to make glitches using let's say an</font>

209
00:10:37,320 --> 00:10:43,170
electromagnetic pulse<font color="#CCCCCC"> a laser playing</font>

210
00:10:40,200 --> 00:10:46,110
with the targets<font color="#E5E5E5"> clock or power and you</font>

211
00:10:43,170 --> 00:10:48,540
try<font color="#E5E5E5"> to introduce a glitch</font><font color="#CCCCCC"> so you try</font><font color="#E5E5E5"> to</font>

212
00:10:46,110 --> 00:10:52,350
<font color="#E5E5E5">get that glitch to introduce a fault in</font>

213
00:10:48,540 --> 00:10:55,110
that device<font color="#E5E5E5"> and typically we can model</font>

214
00:10:52,350 --> 00:10:57,380
these faults as let's say something<font color="#E5E5E5"> like</font>

215
00:10:55,110 --> 00:11:00,329
instruction skipping so saying

216
00:10:57,380 --> 00:11:03,209
pretending that this fault<font color="#E5E5E5"> will skip an</font>

217
00:11:00,329 --> 00:11:05,459
instruction so for instance in the hash

218
00:11:03,209 --> 00:11:09,839
bypass case perhaps<font color="#CCCCCC"> the branch</font>

219
00:11:05,459 --> 00:11:11,640
instruction was skipped we have also

220
00:11:09,839 --> 00:11:14,160
<font color="#E5E5E5">another model called instruction</font>

221
00:11:11,640 --> 00:11:17,010
instruction and data corruption<font color="#E5E5E5"> and</font>

222
00:11:14,160 --> 00:11:18,600
basically this means that

223
00:11:17,010 --> 00:11:20,939
perhaps when the instructions are being

224
00:11:18,600 --> 00:11:23,190
<font color="#E5E5E5">fetched from memory one of the bits</font>

225
00:11:20,940 --> 00:11:24,870
falls over and instead<font color="#E5E5E5"> of executing</font><font color="#CCCCCC"> the</font>

226
00:11:23,190 --> 00:11:26,280
original instruction<font color="#E5E5E5"> you're now</font>

227
00:11:24,870 --> 00:11:30,090
<font color="#CCCCCC">executing an entirely different</font>

228
00:11:26,280 --> 00:11:34,740
instruction<font color="#CCCCCC"> Christopher Oh we'll talk a</font>

229
00:11:30,090 --> 00:11:36,390
<font color="#E5E5E5">little bit more about</font><font color="#CCCCCC"> that later</font><font color="#E5E5E5"> so the</font>

230
00:11:34,740 --> 00:11:38,280
key takeaway here is<font color="#CCCCCC"> that fault</font>

231
00:11:36,390 --> 00:11:43,080
injection<font color="#E5E5E5"> alters the intended</font><font color="#CCCCCC"> behavior</font>

232
00:11:38,280 --> 00:11:45,319
of both<font color="#E5E5E5"> hardware and software so you</font>

233
00:11:43,080 --> 00:11:47,220
know how could we keep mitigate this

234
00:11:45,320 --> 00:11:49,530
well

235
00:11:47,220 --> 00:11:51,900
I'll now give some software examples so

236
00:11:49,530 --> 00:11:53,490
<font color="#E5E5E5">perhaps we could add some redundancy so</font>

237
00:11:51,900 --> 00:11:56,520
instead<font color="#CCCCCC"> of checking that hash value once</font>

238
00:11:53,490 --> 00:12:02,010
<font color="#E5E5E5">you check it twice</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that only if both</font>

239
00:11:56,520 --> 00:12:03,680
checks<font color="#CCCCCC"> match</font><font color="#E5E5E5"> you actually</font><font color="#CCCCCC"> boots you</font>

240
00:12:02,010 --> 00:12:05,880
could also add random delays and

241
00:12:03,680 --> 00:12:07,770
basically adding random delays makes it

242
00:12:05,880 --> 00:12:09,660
harder<font color="#CCCCCC"> to pinpoint the exact</font><font color="#E5E5E5"> moments in</font>

243
00:12:07,770 --> 00:12:11,880
time when you need to<font color="#E5E5E5"> introduce a glitch</font>

244
00:12:09,660 --> 00:12:13,680
and<font color="#E5E5E5"> especially when you combine</font><font color="#CCCCCC"> this</font>

245
00:12:11,880 --> 00:12:16,460
with<font color="#E5E5E5"> dolt something like double checks</font>

246
00:12:13,680 --> 00:12:21,780
<font color="#E5E5E5">it makes it that much</font><font color="#CCCCCC"> harder to actually</font>

247
00:12:16,460 --> 00:12:23,400
bypass that check<font color="#CCCCCC"> you could also add</font>

248
00:12:21,780 --> 00:12:25,709
some countermeasures<font color="#CCCCCC"> in</font><font color="#E5E5E5"> hardware for</font>

249
00:12:23,400 --> 00:12:27,420
instance you could again<font color="#CCCCCC"> add redundancy</font>

250
00:12:25,710 --> 00:12:29,670
<font color="#E5E5E5">perhaps you could</font><font color="#CCCCCC"> use a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of check</font>

251
00:12:27,420 --> 00:12:31,439
sums on things perhaps<font color="#E5E5E5"> you could add</font>

252
00:12:29,670 --> 00:12:33,750
<font color="#E5E5E5">glitch detectors so actually for</font>

253
00:12:31,440 --> 00:12:35,880
instance<font color="#E5E5E5"> adding light sensors to detect</font>

254
00:12:33,750 --> 00:12:38,760
<font color="#E5E5E5">that someone is shining a laser on your</font>

255
00:12:35,880 --> 00:12:42,390
die or perhaps<font color="#E5E5E5"> measure the voltage to</font>

256
00:12:38,760 --> 00:12:45,210
ensure no one's playing with it<font color="#CCCCCC"> and</font>

257
00:12:42,390 --> 00:12:46,650
finally<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> also add</font><font color="#CCCCCC"> non constant</font>

258
00:12:45,210 --> 00:12:48,660
timing<font color="#E5E5E5"> for instance using clock</font>

259
00:12:46,650 --> 00:12:50,280
randomization<font color="#E5E5E5"> and again this makes it</font>

260
00:12:48,660 --> 00:12:54,380
harder to<font color="#E5E5E5"> pinpoint the exact moment</font><font color="#CCCCCC"> in</font>

261
00:12:50,280 --> 00:12:54,380
time the glitch needs to be introduced

262
00:12:54,950 --> 00:13:01,110
<font color="#CCCCCC">okay so this is</font><font color="#E5E5E5"> my final example and</font>

263
00:12:58,620 --> 00:13:05,310
it's basically a fault<font color="#CCCCCC"> injection attack</font>

264
00:13:01,110 --> 00:13:07,290
on the PS Vita so we believe that it's

265
00:13:05,310 --> 00:13:10,109
<font color="#E5E5E5">basically a broken implementation on</font>

266
00:13:07,290 --> 00:13:14,819
<font color="#E5E5E5">broken hardware and again using fault</font>

267
00:13:10,110 --> 00:13:18,570
injection so in this<font color="#E5E5E5"> case what they did</font>

268
00:13:14,820 --> 00:13:21,300
is they use<font color="#E5E5E5"> fault injection</font><font color="#CCCCCC"> to bypass a</font>

269
00:13:18,570 --> 00:13:24,540
length check<font color="#CCCCCC"> and that means now more</font>

270
00:13:21,300 --> 00:13:27,810
data is copied<font color="#E5E5E5"> in which again</font><font color="#CCCCCC"> gives you</font>

271
00:13:24,540 --> 00:13:31,959
<font color="#E5E5E5">this classic buffer overflow attack</font>

272
00:13:27,810 --> 00:13:34,089
so how<font color="#E5E5E5"> could you mitigate this well</font><font color="#CCCCCC"> its</font>

273
00:13:31,960 --> 00:13:36,790
fault injection<font color="#E5E5E5"> so you can use all these</font>

274
00:13:34,090 --> 00:13:39,340
fault injection mitigations but on the

275
00:13:36,790 --> 00:13:41,110
other hand it's a software<font color="#E5E5E5"> exploits</font><font color="#CCCCCC"> so</font>

276
00:13:39,340 --> 00:13:48,160
you could use all these exploit

277
00:13:41,110 --> 00:13:50,110
mitigations so I think<font color="#E5E5E5"> at this point</font>

278
00:13:48,160 --> 00:13:53,670
we've realized that<font color="#E5E5E5"> you know designing</font>

279
00:13:50,110 --> 00:13:57,010
secure boots<font color="#CCCCCC"> is not simple it's</font><font color="#E5E5E5"> not easy</font>

280
00:13:53,670 --> 00:13:59,740
but<font color="#E5E5E5"> you know we also have to take</font><font color="#CCCCCC"> into</font>

281
00:13:57,010 --> 00:14:02,050
<font color="#CCCCCC">account all these</font><font color="#E5E5E5"> other constraints so</font>

282
00:13:59,740 --> 00:14:04,540
you know we need to<font color="#E5E5E5"> initialize</font><font color="#CCCCCC"> Hardware</font>

283
00:14:02,050 --> 00:14:07,479
as<font color="#E5E5E5"> well we need to be aware</font><font color="#CCCCCC"> of</font>

284
00:14:04,540 --> 00:14:11,589
performance constraints we need to keep

285
00:14:07,480 --> 00:14:14,680
engineering costs low<font color="#E5E5E5"> and we may need to</font>

286
00:14:11,589 --> 00:14:15,970
recover devices in the field<font color="#CCCCCC"> and you</font>

287
00:14:14,680 --> 00:14:21,819
<font color="#CCCCCC">know additionally sometimes</font><font color="#E5E5E5"> customers</font>

288
00:14:15,970 --> 00:14:24,040
<font color="#E5E5E5">have you know extra requests as well but</font>

289
00:14:21,820 --> 00:14:26,710
we<font color="#E5E5E5"> believe it is</font><font color="#CCCCCC"> very important</font><font color="#E5E5E5"> to get</font>

290
00:14:24,040 --> 00:14:29,949
<font color="#CCCCCC">it right</font><font color="#E5E5E5"> because bad security can be</font>

291
00:14:26,710 --> 00:14:31,630
<font color="#E5E5E5">very expensive</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> instance if you</font>

292
00:14:29,950 --> 00:14:33,850
need<font color="#E5E5E5"> to know the tape outs that can cost</font>

293
00:14:31,630 --> 00:14:35,890
upwards<font color="#E5E5E5"> of a million dollars and that's</font>

294
00:14:33,850 --> 00:14:37,900
before<font color="#E5E5E5"> you take into consideration</font><font color="#CCCCCC"> the</font>

295
00:14:35,890 --> 00:14:40,390
extra<font color="#CCCCCC"> damage you might have</font><font color="#E5E5E5"> from the bad</font>

296
00:14:37,900 --> 00:14:42,699
publicity<font color="#CCCCCC"> or the fact that you have</font>

297
00:14:40,390 --> 00:14:45,850
unsold inventory or inventory<font color="#E5E5E5"> you'll</font>

298
00:14:42,700 --> 00:14:47,650
have to sell<font color="#E5E5E5"> for a lower price</font><font color="#CCCCCC"> on top</font><font color="#E5E5E5"> of</font>

299
00:14:45,850 --> 00:14:52,510
which you'll<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> still need to pay</font>

300
00:14:47,650 --> 00:14:56,670
<font color="#E5E5E5">this additional engineering time okay</font>

301
00:14:52,510 --> 00:14:59,650
<font color="#E5E5E5">with that in mind I now discuss some</font>

302
00:14:56,670 --> 00:15:01,650
<font color="#E5E5E5">public attacks and</font><font color="#CCCCCC"> Cristoforo will now</font>

303
00:14:59,650 --> 00:15:05,319
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> some new attacks</font>

304
00:15:01,650 --> 00:15:08,680
<font color="#E5E5E5">which the world has</font><font color="#CCCCCC"> not seen yet</font><font color="#E5E5E5"> okay</font>

305
00:15:05,320 --> 00:15:13,200
Thank You<font color="#E5E5E5"> Albert</font><font color="#CCCCCC"> for this nice overview</font>

306
00:15:08,680 --> 00:15:16,989
on current attacks which are say

307
00:15:13,200 --> 00:15:20,110
<font color="#CCCCCC">up-to-date at the moment</font><font color="#E5E5E5"> but it's</font>

308
00:15:16,990 --> 00:15:22,030
important to<font color="#CCCCCC"> realize that the attack</font>

309
00:15:20,110 --> 00:15:25,360
surface here can be much<font color="#CCCCCC"> larger than</font>

310
00:15:22,030 --> 00:15:27,910
it's<font color="#E5E5E5"> usually discussed that intended so</font>

311
00:15:25,360 --> 00:15:29,980
we try to respond<font color="#CCCCCC"> very bit more and to</font>

312
00:15:27,910 --> 00:15:32,969
discuss a few attacks which we think

313
00:15:29,980 --> 00:15:35,449
have<font color="#CCCCCC"> not been discussed before or even</font>

314
00:15:32,970 --> 00:15:39,329
presented or<font color="#E5E5E5"> even</font>

315
00:15:35,449 --> 00:15:40,709
demonstrated<font color="#CCCCCC"> before</font><font color="#E5E5E5"> we're going to share</font>

316
00:15:39,329 --> 00:15:44,269
with<font color="#E5E5E5"> you something which i think is</font>

317
00:15:40,709 --> 00:15:47,219
quite new<font color="#E5E5E5"> and share for the first time</font>

318
00:15:44,269 --> 00:15:50,189
so<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first one that I would like</font><font color="#CCCCCC"> to</font>

319
00:15:47,220 --> 00:15:52,290
discuss is a<font color="#E5E5E5"> fault injection on OTP</font>

320
00:15:50,189 --> 00:15:56,610
transfer<font color="#E5E5E5"> there is one thing which hold</font>

321
00:15:52,290 --> 00:15:58,860
the attacks that<font color="#CCCCCC"> Albert</font><font color="#E5E5E5"> shared that they</font>

322
00:15:56,610 --> 00:16:02,100
do have in common<font color="#CCCCCC"> so all the types of</font>

323
00:15:58,860 --> 00:16:04,709
<font color="#E5E5E5">cooler while the code is</font><font color="#CCCCCC"> actually been</font>

324
00:16:02,100 --> 00:16:08,329
<font color="#E5E5E5">executed so there is always the CPU</font>

325
00:16:04,709 --> 00:16:10,529
executing instructions which are

326
00:16:08,329 --> 00:16:14,099
attacked<font color="#E5E5E5"> in one way or another</font><font color="#CCCCCC"> either</font>

327
00:16:10,529 --> 00:16:17,040
through software bugs or fault injection

328
00:16:14,100 --> 00:16:19,889
attacks in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to alter the flow</font><font color="#E5E5E5"> in</font>

329
00:16:17,040 --> 00:16:22,589
<font color="#E5E5E5">the execution</font><font color="#CCCCCC"> intend distribution</font><font color="#E5E5E5"> on</font>

330
00:16:19,889 --> 00:16:24,329
secure boot but we are proposing<font color="#E5E5E5"> here</font><font color="#CCCCCC"> a</font>

331
00:16:22,589 --> 00:16:26,759
different<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> which is attacking the</font>

332
00:16:24,329 --> 00:16:29,729
secure boot before<font color="#CCCCCC"> any code is</font><font color="#E5E5E5"> actually</font>

333
00:16:26,759 --> 00:16:33,240
executed at all<font color="#E5E5E5"> let's have a look a bit</font>

334
00:16:29,730 --> 00:16:36,240
more in<font color="#E5E5E5"> details to this attack so there</font>

335
00:16:33,240 --> 00:16:38,370
is one important chip component which<font color="#CCCCCC"> is</font>

336
00:16:36,240 --> 00:16:41,160
heavily<font color="#CCCCCC"> used in</font><font color="#E5E5E5"> embedded devices</font>

337
00:16:38,370 --> 00:16:43,259
<font color="#E5E5E5">although not not necessarily</font><font color="#CCCCCC"> in common</font>

338
00:16:41,160 --> 00:16:45,360
PC architecture which is OTP memory

339
00:16:43,259 --> 00:16:48,209
which stands<font color="#E5E5E5"> for one time for drama book</font>

340
00:16:45,360 --> 00:16:50,129
which is what<font color="#CCCCCC"> is been also commonly</font>

341
00:16:48,209 --> 00:16:53,550
referred<font color="#CCCCCC"> to as if users also bunny</font>

342
00:16:50,129 --> 00:16:57,509
<font color="#E5E5E5">mentioned in</font><font color="#CCCCCC"> his talk so the idea is</font>

343
00:16:53,550 --> 00:16:59,628
that OTP is an ideal storage<font color="#E5E5E5"> for</font>

344
00:16:57,509 --> 00:17:02,100
configuration<font color="#E5E5E5"> data you have to imagine</font>

345
00:16:59,629 --> 00:17:04,649
<font color="#E5E5E5">that for example</font><font color="#CCCCCC"> here you have flags</font>

346
00:17:02,100 --> 00:17:07,199
that might says if<font color="#E5E5E5"> your secure boot is</font>

347
00:17:04,648 --> 00:17:09,270
enabled<font color="#E5E5E5"> or if the stage needs to be</font>

348
00:17:07,199 --> 00:17:10,860
decrypted before being verified and

349
00:17:09,270 --> 00:17:13,319
things like<font color="#E5E5E5"> that</font>

350
00:17:10,859 --> 00:17:15,030
why<font color="#E5E5E5"> this is not your storage because</font>

351
00:17:13,319 --> 00:17:17,490
<font color="#E5E5E5">it's one-time programmable meaning that</font>

352
00:17:15,030 --> 00:17:20,520
you can actually change<font color="#CCCCCC"> the physical</font>

353
00:17:17,490 --> 00:17:23,370
properties<font color="#CCCCCC"> of the cells that represent a</font>

354
00:17:20,520 --> 00:17:27,658
bit you<font color="#E5E5E5"> can change at 0 to 1 but you did</font>

355
00:17:23,369 --> 00:17:31,260
<font color="#E5E5E5">not reset that</font><font color="#CCCCCC"> to 0 so that is</font>

356
00:17:27,659 --> 00:17:33,480
<font color="#E5E5E5">permanently set as a module</font><font color="#CCCCCC"> or some say</font>

357
00:17:31,260 --> 00:17:36,270
<font color="#CCCCCC">fib attacks for example</font><font color="#E5E5E5"> that is</font>

358
00:17:33,480 --> 00:17:38,610
permanently set to 1 and<font color="#E5E5E5"> this can</font>

359
00:17:36,270 --> 00:17:40,530
happens<font color="#E5E5E5"> anytime in the device lifetime</font>

360
00:17:38,610 --> 00:17:42,809
<font color="#E5E5E5">basically even in the field you can</font>

361
00:17:40,530 --> 00:17:46,289
enable secure<font color="#E5E5E5"> route and if you</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> in</font>

362
00:17:42,809 --> 00:17:47,940
this way unless you bypass it<font color="#CCCCCC"> then there</font>

363
00:17:46,289 --> 00:17:48,210
<font color="#E5E5E5">is no way</font><font color="#CCCCCC"> that you can disable secure</font>

364
00:17:47,940 --> 00:17:50,039
boot

365
00:17:48,210 --> 00:17:53,190
anymore<font color="#E5E5E5"> because</font><font color="#CCCCCC"> that flag has been</font>

366
00:17:50,039 --> 00:17:54,750
<font color="#CCCCCC">enabled in the OTP memory</font><font color="#E5E5E5"> so the main</font>

367
00:17:53,190 --> 00:17:56,340
consumer of this data of<font color="#E5E5E5"> this</font>

368
00:17:54,750 --> 00:17:59,899
information<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually the</font><font color="#E5E5E5"> ROM code</font>

369
00:17:56,340 --> 00:18:02,309
that takes decisions according<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

370
00:17:59,899 --> 00:18:03,989
<font color="#E5E5E5">information which is</font><font color="#CCCCCC"> stored you can see</font>

371
00:18:02,309 --> 00:18:07,230
here an example<font color="#E5E5E5"> where our number</font><font color="#CCCCCC"> 4</font>

372
00:18:03,990 --> 00:18:09,360
calculate<font color="#CCCCCC"> ash and 5a</font><font color="#E5E5E5"> verify image so</font>

373
00:18:07,230 --> 00:18:12,179
that's purification as<font color="#CCCCCC"> less calculation</font>

374
00:18:09,360 --> 00:18:16,500
the image verification is only<font color="#E5E5E5"> performed</font>

375
00:18:12,179 --> 00:18:19,230
<font color="#E5E5E5">if the bit 17 in the OTP shallow</font>

376
00:18:16,500 --> 00:18:21,770
location is set<font color="#E5E5E5"> to 1 so this means</font><font color="#CCCCCC"> that</font>

377
00:18:19,230 --> 00:18:24,330
there is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> information which is</font><font color="#CCCCCC"> stored</font>

378
00:18:21,770 --> 00:18:26,460
<font color="#E5E5E5">which allows to</font><font color="#CCCCCC"> perform</font><font color="#E5E5E5"> a signature</font>

379
00:18:24,330 --> 00:18:28,100
verification<font color="#CCCCCC"> it is a memory mapped</font>

380
00:18:26,460 --> 00:18:30,750
location otherwise will not be<font color="#E5E5E5"> able to</font>

381
00:18:28,100 --> 00:18:33,360
<font color="#E5E5E5">reference that point basically</font><font color="#CCCCCC"> so this</font>

382
00:18:30,750 --> 00:18:35,970
means that there<font color="#CCCCCC"> is a register</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

383
00:18:33,360 --> 00:18:38,908
memory<font color="#E5E5E5"> mapped at</font><font color="#CCCCCC"> run time which allows</font>

384
00:18:35,970 --> 00:18:41,640
<font color="#CCCCCC">you to</font><font color="#E5E5E5"> query this information and act</font>

385
00:18:38,909 --> 00:18:45,270
upon<font color="#E5E5E5"> but it's a register so this means</font>

386
00:18:41,640 --> 00:18:47,370
<font color="#CCCCCC">that when the</font><font color="#E5E5E5"> shop is restarted that</font>

387
00:18:45,270 --> 00:18:49,918
register is typically<font color="#E5E5E5"> at 0 value is</font>

388
00:18:47,370 --> 00:18:53,699
cleared so when the CPU<font color="#E5E5E5"> is executing</font>

389
00:18:49,919 --> 00:18:56,669
this code summarized as to populate as

390
00:18:53,700 --> 00:18:59,520
already populated<font color="#E5E5E5"> that that register</font>

391
00:18:56,669 --> 00:19:02,039
<font color="#E5E5E5">would do the</font><font color="#CCCCCC"> lutheran OTP</font><font color="#E5E5E5"> and it is what</font>

392
00:18:59,520 --> 00:19:04,200
<font color="#E5E5E5">we call OTP transfer it's a mechanism</font>

393
00:19:02,039 --> 00:19:06,090
that populates<font color="#E5E5E5"> registers shadow</font>

394
00:19:04,200 --> 00:19:08,730
registers with information from<font color="#CCCCCC"> A to B</font>

395
00:19:06,090 --> 00:19:11,840
<font color="#E5E5E5">so</font><font color="#CCCCCC"> this transfer is performed in</font><font color="#E5E5E5"> our</font>

396
00:19:08,730 --> 00:19:15,179
blood it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> logic performing it</font>

397
00:19:11,840 --> 00:19:17,399
before<font color="#E5E5E5"> the CPU is actually released from</font>

398
00:19:15,179 --> 00:19:21,870
<font color="#E5E5E5">the set and then any</font><font color="#CCCCCC"> rom code is</font>

399
00:19:17,399 --> 00:19:24,299
executed for example<font color="#E5E5E5"> in what order to</font>

400
00:19:21,870 --> 00:19:27,750
<font color="#CCCCCC">realize this as that</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> harbour stage</font>

401
00:19:24,299 --> 00:19:31,110
<font color="#E5E5E5">happens before the</font><font color="#CCCCCC"> cpu lisman started</font>

402
00:19:27,750 --> 00:19:34,919
there are<font color="#E5E5E5"> multiple resets point in time</font>

403
00:19:31,110 --> 00:19:37,080
in an actual<font color="#CCCCCC"> system so when the sock the</font>

404
00:19:34,919 --> 00:19:39,360
system on chip or<font color="#CCCCCC"> the system stars</font><font color="#E5E5E5"> is</font>

405
00:19:37,080 --> 00:19:40,860
released from reset then the<font color="#CCCCCC"> resolver</font>

406
00:19:39,360 --> 00:19:43,678
logic which performs initialization

407
00:19:40,860 --> 00:19:46,260
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> and only once the proper analysis</font>

408
00:19:43,679 --> 00:19:47,700
tasks are completed<font color="#E5E5E5"> then</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> is</font>

409
00:19:46,260 --> 00:19:50,220
released from<font color="#CCCCCC"> reset</font><font color="#E5E5E5"> and start executing</font>

410
00:19:47,700 --> 00:19:54,480
<font color="#E5E5E5">code fetching instruction from the</font>

411
00:19:50,220 --> 00:19:56,610
design location so<font color="#E5E5E5"> that part</font><font color="#CCCCCC"> Hardware</font>

412
00:19:54,480 --> 00:20:00,510
OTP transfer happens between a very

413
00:19:56,610 --> 00:20:02,250
large time window when you press<font color="#E5E5E5"> Start</font>

414
00:20:00,510 --> 00:20:04,740
reset basically and when the actually

415
00:20:02,250 --> 00:20:06,840
CPU is started so let's have a look<font color="#E5E5E5"> at</font>

416
00:20:04,740 --> 00:20:11,010
what happens there<font color="#E5E5E5"> basically so we have</font>

417
00:20:06,840 --> 00:20:12,629
a typical<font color="#CCCCCC"> occupied chip here which is</font>

418
00:20:11,010 --> 00:20:14,640
<font color="#E5E5E5">dividing in banks which is then</font>

419
00:20:12,630 --> 00:20:16,020
organized in cells and these cells are

420
00:20:14,640 --> 00:20:19,320
<font color="#E5E5E5">the one that you can set from a zero to</font>

421
00:20:16,020 --> 00:20:21,480
<font color="#CCCCCC">one so</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> special</font><font color="#CCCCCC"> OTP a</font><font color="#E5E5E5"> block which</font>

422
00:20:19,320 --> 00:20:23,340
is just data and of course<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font>

423
00:20:21,480 --> 00:20:25,080
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> transferred this data to</font>

424
00:20:23,340 --> 00:20:27,600
product called<font color="#E5E5E5"> location which</font><font color="#CCCCCC"> is an OTP</font>

425
00:20:25,080 --> 00:20:30,210
controller<font color="#E5E5E5"> usually connected</font><font color="#CCCCCC"> to the OTP</font>

426
00:20:27,600 --> 00:20:32,490
<font color="#E5E5E5">mainship with a bus which can transfer</font>

427
00:20:30,210 --> 00:20:35,040
between 8 and 16<font color="#CCCCCC"> bits which can be quite</font>

428
00:20:32,490 --> 00:20:36,990
<font color="#E5E5E5">slow so now narrow bandwidth</font><font color="#CCCCCC"> and where a</font>

429
00:20:35,040 --> 00:20:39,810
common response<font color="#E5E5E5"> protocol actually query</font>

430
00:20:36,990 --> 00:20:41,580
<font color="#CCCCCC">the logic on queries the logic on the</font>

431
00:20:39,810 --> 00:20:43,649
main<font color="#E5E5E5"> chip in order to transfer data so</font>

432
00:20:41,580 --> 00:20:46,980
you have to<font color="#E5E5E5"> imagine that our flag that</font>

433
00:20:43,650 --> 00:20:49,950
says<font color="#CCCCCC"> secure</font><font color="#E5E5E5"> boot is enabled travels from</font>

434
00:20:46,980 --> 00:20:52,260
the<font color="#CCCCCC"> main chip main component from TP on</font>

435
00:20:49,950 --> 00:20:54,330
the bus<font color="#CCCCCC"> until rise to the OTP controller</font>

436
00:20:52,260 --> 00:20:55,830
<font color="#E5E5E5">then you have to be</font><font color="#CCCCCC"> controller depending</font>

437
00:20:54,330 --> 00:20:58,800
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the data which has been fetched</font>

438
00:20:55,830 --> 00:21:00,830
<font color="#E5E5E5">basically severely from the from the we</font>

439
00:20:58,800 --> 00:21:04,080
typically<font color="#CCCCCC"> Siddeley from the main chip</font>

440
00:21:00,830 --> 00:21:05,490
<font color="#E5E5E5">actually transfer this data</font><font color="#CCCCCC"> to the</font>

441
00:21:04,080 --> 00:21:07,439
<font color="#E5E5E5">intended</font><font color="#CCCCCC"> Harville</font><font color="#E5E5E5"> or including in the</font>

442
00:21:05,490 --> 00:21:09,330
shall register keep in mind that there

443
00:21:07,440 --> 00:21:11,550
may be<font color="#E5E5E5"> additional hardware which might</font>

444
00:21:09,330 --> 00:21:12,990
use of the people figuration<font color="#E5E5E5"> and</font><font color="#CCCCCC"> got to</font>

445
00:21:11,550 --> 00:21:15,000
<font color="#E5E5E5">be controller as the task of</font>

446
00:21:12,990 --> 00:21:17,100
transferring<font color="#E5E5E5"> properly this information</font>

447
00:21:15,000 --> 00:21:19,860
and this<font color="#E5E5E5"> information may not be</font>

448
00:21:17,100 --> 00:21:21,149
<font color="#E5E5E5">accessible to the</font><font color="#CCCCCC"> cpu at all and the</font>

449
00:21:19,860 --> 00:21:23,459
CPUs not started yet

450
00:21:21,150 --> 00:21:26,250
here but once the<font color="#E5E5E5"> do information is in</font>

451
00:21:23,460 --> 00:21:28,290
the<font color="#E5E5E5"> shadow register then the</font><font color="#CCCCCC"> CPU can be</font>

452
00:21:26,250 --> 00:21:30,480
leased<font color="#E5E5E5"> from you said I can access the</font>

453
00:21:28,290 --> 00:21:33,139
<font color="#CCCCCC">information over the main bus via the</font>

454
00:21:30,480 --> 00:21:35,970
memory map<font color="#E5E5E5"> ad mechanism a question so</font>

455
00:21:33,140 --> 00:21:38,700
let's keep in mind<font color="#E5E5E5"> that fault injection</font>

456
00:21:35,970 --> 00:21:41,100
can have the alter the behavior<font color="#E5E5E5"> will</font>

457
00:21:38,700 --> 00:21:43,500
<font color="#CCCCCC">ship not only software but also hardware</font>

458
00:21:41,100 --> 00:21:45,419
<font color="#E5E5E5">so with this in mind</font><font color="#CCCCCC"> let's see</font><font color="#E5E5E5"> where we</font>

459
00:21:43,500 --> 00:21:47,340
<font color="#E5E5E5">cleaning we attack in principle while</font>

460
00:21:45,420 --> 00:21:49,530
the bytes are being transferred<font color="#E5E5E5"> so to</font>

461
00:21:47,340 --> 00:21:51,750
assume that you have<font color="#CCCCCC"> a 1 which is set</font>

462
00:21:49,530 --> 00:21:54,000
for secure enable so you would enable in

463
00:21:51,750 --> 00:21:55,650
the OTP main if you probably time in

464
00:21:54,000 --> 00:21:57,870
your attack you might be<font color="#E5E5E5"> able to toggle</font>

465
00:21:55,650 --> 00:21:59,910
<font color="#E5E5E5">that bit from 1 to</font><font color="#CCCCCC"> 0 1</font><font color="#E5E5E5"> is being</font>

466
00:21:57,870 --> 00:22:02,370
transferred to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> TP controller or</font>

467
00:21:59,910 --> 00:22:05,340
change it while it's being<font color="#E5E5E5"> processed on</font>

468
00:22:02,370 --> 00:22:06,840
the<font color="#E5E5E5"> OTP controller or even while this is</font>

469
00:22:05,340 --> 00:22:08,240
transferred to the shadow register keep

470
00:22:06,840 --> 00:22:10,740
in mind that the types<font color="#E5E5E5"> have different</font>

471
00:22:08,240 --> 00:22:12,870
<font color="#E5E5E5">opportunities because the bus have</font>

472
00:22:10,740 --> 00:22:15,270
different speeds the

473
00:22:12,870 --> 00:22:17,309
bandwidth<font color="#E5E5E5"> of course and even</font><font color="#CCCCCC"> information</font>

474
00:22:15,270 --> 00:22:20,160
<font color="#CCCCCC">may be transferred yes literally</font><font color="#E5E5E5"> in</font>

475
00:22:17,309 --> 00:22:21,750
initial stage<font color="#E5E5E5"> or parallel so it's just a</font>

476
00:22:20,160 --> 00:22:23,670
matter<font color="#CCCCCC"> of understanding that even before</font>

477
00:22:21,750 --> 00:22:25,140
<font color="#E5E5E5">the CPU</font><font color="#CCCCCC"> starts it</font><font color="#E5E5E5"> you might</font><font color="#CCCCCC"> have an</font>

478
00:22:23,670 --> 00:22:28,350
option<font color="#CCCCCC"> for a change in</font><font color="#E5E5E5"> this</font>

479
00:22:25,140 --> 00:22:31,610
<font color="#E5E5E5">configuration in the end so basically we</font>

480
00:22:28,350 --> 00:22:35,840
can<font color="#E5E5E5"> affect the signal verification and</font>

481
00:22:31,610 --> 00:22:39,629
<font color="#CCCCCC">the stage encryption by modifying</font>

482
00:22:35,840 --> 00:22:41,159
<font color="#E5E5E5">bypassing the secure boot</font><font color="#CCCCCC"> also the</font>

483
00:22:39,630 --> 00:22:44,640
encrypts your<font color="#CCCCCC"> boot depending if you are</font>

484
00:22:41,160 --> 00:22:47,670
<font color="#CCCCCC">able to toggle only one bit</font><font color="#E5E5E5"> or both with</font>

485
00:22:44,640 --> 00:22:49,050
one<font color="#E5E5E5"> or multiple glitches here in mind</font>

486
00:22:47,670 --> 00:22:51,510
what<font color="#E5E5E5"> is this important why I'm saying</font>

487
00:22:49,050 --> 00:22:53,010
one glitch because<font color="#E5E5E5"> if we the transfer</font>

488
00:22:51,510 --> 00:22:55,679
happens<font color="#E5E5E5"> byte level</font><font color="#CCCCCC"> one the information</font>

489
00:22:53,010 --> 00:22:57,150
<font color="#CCCCCC">may be</font><font color="#E5E5E5"> bit level so in that single bytes</font>

490
00:22:55,679 --> 00:22:59,610
you might be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have both the</font>

491
00:22:57,150 --> 00:23:01,980
<font color="#CCCCCC">information regarding the signal</font>

492
00:22:59,610 --> 00:23:05,340
terrific ation<font color="#CCCCCC"> and the encrypted</font><font color="#E5E5E5"> secure</font>

493
00:23:01,980 --> 00:23:07,620
boot<font color="#E5E5E5"> so basically this is what we</font><font color="#CCCCCC"> think</font>

494
00:23:05,340 --> 00:23:10,230
is doable in our spins we know it's

495
00:23:07,620 --> 00:23:12,570
doable<font color="#E5E5E5"> we are not doing a</font><font color="#CCCCCC"> demonstration</font>

496
00:23:10,230 --> 00:23:14,130
<font color="#E5E5E5">on stage on on this point but we're</font>

497
00:23:12,570 --> 00:23:16,379
<font color="#E5E5E5">going to share another one which we</font>

498
00:23:14,130 --> 00:23:18,510
think<font color="#E5E5E5"> is important about</font><font color="#CCCCCC"> the injection</font>

499
00:23:16,380 --> 00:23:20,760
<font color="#CCCCCC">encrypted to your boot without</font><font color="#E5E5E5"> actually</font>

500
00:23:18,510 --> 00:23:21,720
<font color="#CCCCCC">having</font><font color="#E5E5E5"> an encryption key let's see how</font>

501
00:23:20,760 --> 00:23:24,510
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> possible</font>

502
00:23:21,720 --> 00:23:26,910
<font color="#E5E5E5">so this is the silver verification and</font>

503
00:23:24,510 --> 00:23:29,429
verify there is the cornerstone on every

504
00:23:26,910 --> 00:23:31,530
boot you have<font color="#E5E5E5"> to relate for example to</font>

505
00:23:29,429 --> 00:23:33,929
the PSP verifying the next stage it

506
00:23:31,530 --> 00:23:37,980
might be an<font color="#E5E5E5"> H</font><font color="#CCCCCC"> Mac comparison for example</font>

507
00:23:33,929 --> 00:23:39,890
or it may be<font color="#E5E5E5"> an</font><font color="#CCCCCC"> LSA verification but</font>

508
00:23:37,980 --> 00:23:42,120
regardless there is always a

509
00:23:39,890 --> 00:23:43,890
<font color="#E5E5E5">verification point and it is always a</font>

510
00:23:42,120 --> 00:23:47,909
conditional it says you<font color="#E5E5E5"> should go here</font>

511
00:23:43,890 --> 00:23:51,270
<font color="#E5E5E5">or</font><font color="#CCCCCC"> yours over</font><font color="#E5E5E5"> there okay one other</font>

512
00:23:47,910 --> 00:23:54,120
important fault models<font color="#E5E5E5"> first what is a</font>

513
00:23:51,270 --> 00:23:56,670
fault model<font color="#E5E5E5"> a fault model describes the</font>

514
00:23:54,120 --> 00:24:00,540
effects<font color="#CCCCCC"> that a fault can have</font><font color="#E5E5E5"> actually</font>

515
00:23:56,670 --> 00:24:03,600
on a system<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> most common fault</font>

516
00:24:00,540 --> 00:24:05,820
<font color="#CCCCCC">model is called</font><font color="#E5E5E5"> instruction skipping it</font>

517
00:24:03,600 --> 00:24:07,649
assumes that you can cause<font color="#E5E5E5"> instruction</font>

518
00:24:05,820 --> 00:24:09,480
not to<font color="#E5E5E5"> be executed such as if you</font><font color="#CCCCCC"> know</font>

519
00:24:07,650 --> 00:24:10,920
<font color="#CCCCCC">you fall to the right</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> you might</font>

520
00:24:09,480 --> 00:24:12,960
have the instruction which is<font color="#CCCCCC"> being</font>

521
00:24:10,920 --> 00:24:14,179
<font color="#CCCCCC">executed</font><font color="#E5E5E5"> at that point in time is</font>

522
00:24:12,960 --> 00:24:16,770
actually<font color="#E5E5E5"> skipped</font>

523
00:24:14,179 --> 00:24:18,990
actually we know<font color="#E5E5E5"> this is inaccurate</font><font color="#CCCCCC"> so</font>

524
00:24:16,770 --> 00:24:21,510
from a physics point of view and<font color="#E5E5E5"> from</font>

525
00:24:18,990 --> 00:24:23,310
computing system<font color="#CCCCCC"> until we win</font><font color="#E5E5E5"> really</font>

526
00:24:21,510 --> 00:24:25,010
<font color="#E5E5E5">know it's natural</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> it's very</font>

527
00:24:23,310 --> 00:24:27,590
likely that<font color="#E5E5E5"> instruction or</font>

528
00:24:25,010 --> 00:24:29,980
modified or corrupted<font color="#CCCCCC"> wine for</font><font color="#E5E5E5"> example</font>

529
00:24:27,590 --> 00:24:33,500
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> being fetched from the memory</font>

530
00:24:29,980 --> 00:24:36,200
<font color="#E5E5E5">towards the</font><font color="#CCCCCC"> domain CPU this</font><font color="#E5E5E5"> is not</font><font color="#CCCCCC"> great</font>

531
00:24:33,500 --> 00:24:38,600
but<font color="#CCCCCC"> it's efficient because</font><font color="#E5E5E5"> it'd be</font><font color="#CCCCCC"> a it</font>

532
00:24:36,200 --> 00:24:41,510
models the<font color="#E5E5E5"> behavior of the</font><font color="#CCCCCC"> ship so he's</font>

533
00:24:38,600 --> 00:24:43,010
actually a<font color="#E5E5E5"> behavioral</font><font color="#CCCCCC"> model rather than</font>

534
00:24:41,510 --> 00:24:45,290
an accurate physics model what happens

535
00:24:43,010 --> 00:24:47,270
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> sufficient so to the point has</font>

536
00:24:45,290 --> 00:24:50,559
<font color="#E5E5E5">been wider</font><font color="#CCCCCC"> value adopted both by</font>

537
00:24:47,270 --> 00:24:52,668
academia<font color="#CCCCCC"> and Industry</font><font color="#E5E5E5"> so most of the</font>

538
00:24:50,559 --> 00:24:54,918
fault injection attacks that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are</font>

539
00:24:52,669 --> 00:24:57,320
going<font color="#E5E5E5"> to describe or to see described in</font>

540
00:24:54,919 --> 00:24:59,570
papers relies on the assumption<font color="#CCCCCC"> that you</font>

541
00:24:57,320 --> 00:25:02,750
can change data while<font color="#E5E5E5"> it's being stored</font>

542
00:24:59,570 --> 00:25:05,439
for<font color="#E5E5E5"> BFA or that you can change skip and</font>

543
00:25:02,750 --> 00:25:07,940
instruction so even if it's inaccurate

544
00:25:05,440 --> 00:25:11,030
<font color="#CCCCCC">this can be useful</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> affecting the</font>

545
00:25:07,940 --> 00:25:12,860
clone code flow<font color="#E5E5E5"> so let's try to see how</font>

546
00:25:11,030 --> 00:25:16,129
this can be used<font color="#CCCCCC"> for</font><font color="#E5E5E5"> bypassing secure</font>

547
00:25:12,860 --> 00:25:18,229
boot so the textbook<font color="#E5E5E5"> tap is the</font>

548
00:25:16,130 --> 00:25:20,990
following<font color="#E5E5E5"> you have your bootloader bill</font>

549
00:25:18,230 --> 00:25:24,200
<font color="#E5E5E5">one when the device is turned off</font><font color="#CCCCCC"> you</font>

550
00:25:20,990 --> 00:25:26,799
<font color="#CCCCCC">just reflash in software</font><font color="#E5E5E5"> or in</font><font color="#CCCCCC"> Apple</font>

551
00:25:24,200 --> 00:25:29,270
<font color="#E5E5E5">sorry by software</font><font color="#CCCCCC"> Tom Binns</font>

552
00:25:26,799 --> 00:25:31,668
and replace that<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a malicious</font><font color="#E5E5E5"> image</font>

553
00:25:29,270 --> 00:25:35,450
<font color="#E5E5E5">basically which is your payload</font><font color="#CCCCCC"> okay</font>

554
00:25:31,669 --> 00:25:37,100
<font color="#E5E5E5">which in principle should not be should</font>

555
00:25:35,450 --> 00:25:39,080
<font color="#CCCCCC">not be accepted</font><font color="#E5E5E5"> because the signal is</font>

556
00:25:37,100 --> 00:25:42,168
<font color="#CCCCCC">actually wrong so that verify is going</font>

557
00:25:39,080 --> 00:25:43,610
to<font color="#E5E5E5"> bailouts I say I don't want it but</font>

558
00:25:42,169 --> 00:25:46,490
<font color="#E5E5E5">the point is that</font><font color="#CCCCCC"> if you are able to</font>

559
00:25:43,610 --> 00:25:49,850
<font color="#E5E5E5">time that comparison</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if you might</font>

560
00:25:46,490 --> 00:25:51,679
be<font color="#CCCCCC"> able to at the</font><font color="#E5E5E5"> assembly</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> you may</font>

561
00:25:49,850 --> 00:25:54,620
be able to<font color="#E5E5E5"> skip the call to that</font>

562
00:25:51,679 --> 00:25:58,040
function<font color="#CCCCCC"> you might be able</font><font color="#E5E5E5"> to skip</font><font color="#CCCCCC"> the</font>

563
00:25:54,620 --> 00:26:00,639
assignment<font color="#E5E5E5"> two flags for example to test</font>

564
00:25:58,040 --> 00:26:03,500
registers<font color="#E5E5E5"> you might be able to skip the</font>

565
00:26:00,640 --> 00:26:06,740
<font color="#CCCCCC">decision point</font><font color="#E5E5E5"> and fall through because</font>

566
00:26:03,500 --> 00:26:09,169
<font color="#E5E5E5">that's what you you might be doing so if</font>

567
00:26:06,740 --> 00:26:11,059
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to skip</font><font color="#E5E5E5"> that function call</font>

568
00:26:09,169 --> 00:26:13,220
<font color="#CCCCCC">then</font><font color="#E5E5E5"> you will be just going to jump</font>

569
00:26:11,059 --> 00:26:16,190
<font color="#CCCCCC">annex uni the malicious image</font><font color="#E5E5E5"> this might</font>

570
00:26:13,220 --> 00:26:18,770
<font color="#E5E5E5">be for example say a way of bypassing</font>

571
00:26:16,190 --> 00:26:20,900
the also the<font color="#CCCCCC"> PSP secure boot</font><font color="#E5E5E5"> by its</font>

572
00:26:18,770 --> 00:26:24,620
orbiting a the<font color="#E5E5E5"> DSM a comparison reason</font>

573
00:26:20,900 --> 00:26:26,660
if<font color="#E5E5E5"> likely or targeting the comparison of</font>

574
00:26:24,620 --> 00:26:29,510
the hash<font color="#CCCCCC"> stored in a signature</font><font color="#E5E5E5"> depending</font>

575
00:26:26,660 --> 00:26:33,200
on the are so again props to the guys

576
00:26:29,510 --> 00:26:35,610
from<font color="#CCCCCC"> city s labs so the point is a</font>

577
00:26:33,200 --> 00:26:37,590
<font color="#CCCCCC">glitch at</font><font color="#E5E5E5"> the right moment</font><font color="#CCCCCC"> and profit</font>

578
00:26:35,610 --> 00:26:40,199
there is a big problem<font color="#CCCCCC"> here</font><font color="#E5E5E5"> because if</font>

579
00:26:37,590 --> 00:26:42,270
<font color="#CCCCCC">BL one is encrypted</font><font color="#E5E5E5"> then you have an</font>

580
00:26:40,200 --> 00:26:45,179
<font color="#E5E5E5">encrypted see you</font><font color="#CCCCCC"> what do you</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> this</font>

581
00:26:42,270 --> 00:26:47,040
can<font color="#E5E5E5"> be applied well actually there is a</font>

582
00:26:45,179 --> 00:26:49,860
<font color="#E5E5E5">bit problem and</font><font color="#CCCCCC"> we are going to see that</font>

583
00:26:47,040 --> 00:26:52,710
in a moment because<font color="#E5E5E5"> this there is first</font>

584
00:26:49,860 --> 00:26:55,080
<font color="#E5E5E5">decrypt of the image in memory and then</font>

585
00:26:52,710 --> 00:26:57,390
the<font color="#E5E5E5"> signals it is checked this is a</font>

586
00:26:55,080 --> 00:27:01,020
quite typical approach<font color="#E5E5E5"> from device</font>

587
00:26:57,390 --> 00:27:03,030
<font color="#E5E5E5">manufacturer</font><font color="#CCCCCC"> and the reason is that you</font>

588
00:27:01,020 --> 00:27:05,309
<font color="#CCCCCC">are allow your</font><font color="#E5E5E5"> loved to have one single</font>

589
00:27:03,030 --> 00:27:08,340
<font color="#E5E5E5">sign image which can then be encrypted</font>

590
00:27:05,309 --> 00:27:10,139
with<font color="#E5E5E5"> device and</font><font color="#CCCCCC"> cryptid specific keys if</font>

591
00:27:08,340 --> 00:27:12,120
you do the<font color="#E5E5E5"> other way around</font><font color="#CCCCCC"> you will</font>

592
00:27:10,140 --> 00:27:14,010
<font color="#E5E5E5">need to first encrypt and</font><font color="#CCCCCC"> then sign and</font>

593
00:27:12,120 --> 00:27:16,739
add a<font color="#CCCCCC"> signature different for each</font>

594
00:27:14,010 --> 00:27:18,870
<font color="#E5E5E5">device doing this way you first sign the</font>

595
00:27:16,740 --> 00:27:20,549
image then<font color="#CCCCCC"> you encrypt</font><font color="#E5E5E5"> it and when you</font>

596
00:27:18,870 --> 00:27:22,649
actually<font color="#E5E5E5"> are</font><font color="#CCCCCC"> doing that</font><font color="#E5E5E5"> you first</font>

597
00:27:20,549 --> 00:27:25,710
<font color="#E5E5E5">stripped and then you verify the</font>

598
00:27:22,650 --> 00:27:30,120
<font color="#E5E5E5">signature so</font><font color="#CCCCCC"> there is</font><font color="#E5E5E5"> the additional</font>

599
00:27:25,710 --> 00:27:33,270
state<font color="#E5E5E5"> step here</font><font color="#CCCCCC"> level 2 which</font><font color="#E5E5E5"> brings up</font>

600
00:27:30,120 --> 00:27:36,090
<font color="#E5E5E5">become problems a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> problems for</font>

601
00:27:33,270 --> 00:27:37,799
applying the the<font color="#E5E5E5"> previous attack because</font>

602
00:27:36,090 --> 00:27:41,159
you<font color="#CCCCCC"> remind remember that we're putting</font>

603
00:27:37,799 --> 00:27:44,340
<font color="#E5E5E5">our malicious image in plain text in the</font>

604
00:27:41,160 --> 00:27:45,990
in the flash the promise that<font color="#CCCCCC"> you don't</font>

605
00:27:44,340 --> 00:27:48,090
have a key now<font color="#E5E5E5"> that would pass the</font>

606
00:27:45,990 --> 00:27:49,799
decryption stage<font color="#CCCCCC"> so</font><font color="#E5E5E5"> whatever you</font><font color="#CCCCCC"> put in</font>

607
00:27:48,090 --> 00:27:53,209
plain text<font color="#E5E5E5"> is going to decrypt it to</font>

608
00:27:49,799 --> 00:27:55,980
garbage and if you are going<font color="#CCCCCC"> to bypass</font>

609
00:27:53,210 --> 00:27:59,370
the signal<font color="#E5E5E5"> verification your code</font>

610
00:27:55,980 --> 00:28:02,160
execution is actually going<font color="#E5E5E5"> haywire</font>

611
00:27:59,370 --> 00:28:03,570
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you don't control</font><font color="#E5E5E5"> the code</font><font color="#CCCCCC"> will</font>

612
00:28:02,160 --> 00:28:06,540
<font color="#CCCCCC">just be encrypted because you don't have</font>

613
00:28:03,570 --> 00:28:08,700
<font color="#E5E5E5">a</font><font color="#CCCCCC"> P and that's the reason why usually a</font>

614
00:28:06,540 --> 00:28:10,830
file on the attack so attacks which only

615
00:28:08,700 --> 00:28:13,380
<font color="#E5E5E5">rely on fault injection are considered</font>

616
00:28:10,830 --> 00:28:15,960
infeasible when targeting<font color="#CCCCCC"> include does</font>

617
00:28:13,380 --> 00:28:18,419
your boot<font color="#E5E5E5"> to the point that it is often</font>

618
00:28:15,960 --> 00:28:20,250
<font color="#E5E5E5">suggest as a countermeasure encrypt your</font>

619
00:28:18,419 --> 00:28:21,870
secure boot and then<font color="#E5E5E5"> the attacker will</font>

620
00:28:20,250 --> 00:28:25,230
<font color="#E5E5E5">need first to the truth</font><font color="#CCCCCC"> D and then</font>

621
00:28:21,870 --> 00:28:28,379
perform the<font color="#E5E5E5"> fault injection</font><font color="#CCCCCC"> we are going</font>

622
00:28:25,230 --> 00:28:30,450
to show that that<font color="#CCCCCC"> is a misconception</font><font color="#E5E5E5"> in</font>

623
00:28:28,380 --> 00:28:31,679
order to do that we<font color="#E5E5E5"> are going to</font>

624
00:28:30,450 --> 00:28:34,470
consider<font color="#E5E5E5"> a</font><font color="#CCCCCC"> different fault injection</font>

625
00:28:31,679 --> 00:28:36,780
model which is instruction corruption so

626
00:28:34,470 --> 00:28:39,270
before we assume that<font color="#E5E5E5"> a fault could only</font>

627
00:28:36,780 --> 00:28:40,918
skip instruction now let's assume that

628
00:28:39,270 --> 00:28:44,129
the fault can actually alter

629
00:28:40,919 --> 00:28:46,429
<font color="#E5E5E5">modify corrupt instruction in a way that</font>

630
00:28:44,130 --> 00:28:48,500
might be useful to<font color="#E5E5E5"> run for an attacker</font>

631
00:28:46,429 --> 00:28:52,760
<font color="#E5E5E5">so you know that instruction</font>

632
00:28:48,500 --> 00:28:55,070
as<font color="#E5E5E5"> operands where the destination</font>

633
00:28:52,760 --> 00:28:57,230
register<font color="#CCCCCC"> are specified</font><font color="#E5E5E5"> okay</font>

634
00:28:55,070 --> 00:28:59,510
so<font color="#CCCCCC"> imagine that you are</font><font color="#E5E5E5"> copying some</font>

635
00:28:57,230 --> 00:29:02,150
data from the<font color="#E5E5E5"> memory or from</font><font color="#CCCCCC"> flash from</font>

636
00:28:59,510 --> 00:29:05,690
<font color="#CCCCCC">RAM</font><font color="#E5E5E5"> and put that into a register</font><font color="#CCCCCC"> like</font>

637
00:29:02,150 --> 00:29:08,390
load<font color="#E5E5E5"> this information is 32 bits into a</font>

638
00:29:05,690 --> 00:29:11,210
register<font color="#E5E5E5"> the point that is that if you</font>

639
00:29:08,390 --> 00:29:16,070
might be able<font color="#CCCCCC"> to change that register by</font>

640
00:29:11,210 --> 00:29:18,260
injecting a glitch<font color="#E5E5E5"> and you see in a</font>

641
00:29:16,070 --> 00:29:20,000
moment how this could<font color="#E5E5E5"> be leveraged the</font>

642
00:29:18,260 --> 00:29:22,129
firmly<font color="#CCCCCC"> new is a fairly new application</font>

643
00:29:20,000 --> 00:29:25,610
of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind of fault model it has been</font>

644
00:29:22,130 --> 00:29:30,260
discussed first by in 2016

645
00:29:25,610 --> 00:29:32,209
<font color="#CCCCCC">Nick</font><font color="#E5E5E5"> Albert and Mark Whitman and we are</font>

646
00:29:30,260 --> 00:29:34,340
going to use this for modifying code and

647
00:29:32,210 --> 00:29:36,530
getting<font color="#E5E5E5"> runtime control different from</font>

648
00:29:34,340 --> 00:29:38,480
before<font color="#E5E5E5"> where we all trade the existing</font>

649
00:29:36,530 --> 00:29:42,560
code flow now we are good<font color="#E5E5E5"> really to get</font>

650
00:29:38,480 --> 00:29:44,570
<font color="#E5E5E5">control so let's see a bit the</font><font color="#CCCCCC"> attacks</font>

651
00:29:42,560 --> 00:29:47,030
<font color="#E5E5E5">in detail here again the device turned</font>

652
00:29:44,570 --> 00:29:50,320
off<font color="#E5E5E5"> before we place the</font><font color="#CCCCCC"> plaintext image</font>

653
00:29:47,030 --> 00:29:52,910
in<font color="#CCCCCC"> bill 1 ok now we are</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to play</font>

654
00:29:50,320 --> 00:29:56,090
<font color="#E5E5E5">still the same image to the payload with</font>

655
00:29:52,910 --> 00:29:58,730
a with a tail<font color="#CCCCCC"> of pointers or pointers</font>

656
00:29:56,090 --> 00:30:00,740
<font color="#E5E5E5">let a pointer to what well we know that</font>

657
00:29:58,730 --> 00:30:02,960
<font color="#E5E5E5">that code is going to</font><font color="#CCCCCC"> be replaced in</font>

658
00:30:00,740 --> 00:30:04,610
SRAM at some specific address<font color="#E5E5E5"> let's</font>

659
00:30:02,960 --> 00:30:07,040
assume<font color="#CCCCCC"> that you know</font><font color="#E5E5E5"> that address</font><font color="#CCCCCC"> ok</font>

660
00:30:04,610 --> 00:30:09,679
<font color="#E5E5E5">what you have to do is that that sled of</font>

661
00:30:07,040 --> 00:30:13,250
pointers has to be exactly<font color="#CCCCCC"> that address</font>

662
00:30:09,680 --> 00:30:16,580
so if that goes into<font color="#CCCCCC"> a strum at address</font>

663
00:30:13,250 --> 00:30:18,830
<font color="#E5E5E5">10 for</font><font color="#CCCCCC"> example is going to</font><font color="#E5E5E5"> be loaded</font><font color="#CCCCCC"> at</font>

664
00:30:16,580 --> 00:30:23,540
address 10 then your pointer<font color="#E5E5E5"> should be</font>

665
00:30:18,830 --> 00:30:25,699
just a sled<font color="#E5E5E5"> of 10 0 X 10</font><font color="#CCCCCC"> ok and the</font>

666
00:30:23,540 --> 00:30:28,040
point is<font color="#E5E5E5"> that this is copied in sequence</font>

667
00:30:25,700 --> 00:30:31,850
<font color="#CCCCCC">you start from the first and then go</font><font color="#E5E5E5"> to</font>

668
00:30:28,040 --> 00:30:35,360
the up<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the end of the image in the if</font>

669
00:30:31,850 --> 00:30:36,830
you glitch during<font color="#E5E5E5"> the pointers while the</font>

670
00:30:35,360 --> 00:30:39,080
pointers are being copied<font color="#E5E5E5"> something</font>

671
00:30:36,830 --> 00:30:41,300
interesting can<font color="#E5E5E5"> happen so if you</font>

672
00:30:39,080 --> 00:30:43,699
blistering that man copy that copies the

673
00:30:41,300 --> 00:30:46,220
image<font color="#E5E5E5"> something really nice can happen</font>

674
00:30:43,700 --> 00:30:48,380
<font color="#E5E5E5">because you can assign value that you</font>

675
00:30:46,220 --> 00:30:50,540
are<font color="#CCCCCC"> copying so the pointers to a</font>

676
00:30:48,380 --> 00:30:51,830
different register<font color="#CCCCCC"> and if you are in an</font>

677
00:30:50,540 --> 00:30:54,680
architecture that<font color="#CCCCCC"> allows direct</font>

678
00:30:51,830 --> 00:30:57,230
<font color="#E5E5E5">addressing of the program counter like</font>

679
00:30:54,680 --> 00:31:00,400
<font color="#E5E5E5">our</font><font color="#CCCCCC"> 32 for example which is exactly like</font>

680
00:30:57,230 --> 00:31:02,140
the PSP that we discussed<font color="#E5E5E5"> before</font>

681
00:31:00,400 --> 00:31:05,800
at least that's what it<font color="#E5E5E5"> looked like from</font>

682
00:31:02,140 --> 00:31:08,170
<font color="#E5E5E5">the</font><font color="#CCCCCC"> assembly</font><font color="#E5E5E5"> then you could have sign</font>

683
00:31:05,800 --> 00:31:09,879
that<font color="#E5E5E5"> point which has been copied into a</font>

684
00:31:08,170 --> 00:31:12,400
register directly to do from a counter

685
00:31:09,880 --> 00:31:13,870
and we all know what happens<font color="#CCCCCC"> where the</font>

686
00:31:12,400 --> 00:31:15,820
<font color="#E5E5E5">program counter</font><font color="#CCCCCC"> is set to a value</font>

687
00:31:13,870 --> 00:31:19,030
<font color="#E5E5E5">meaning that the execution flow just</font>

688
00:31:15,820 --> 00:31:21,580
<font color="#E5E5E5">immediately goes to that address correct</font>

689
00:31:19,030 --> 00:31:23,620
<font color="#CCCCCC">and what is there at the address it's</font>

690
00:31:21,580 --> 00:31:26,050
the start of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> image in SRAM which is</font>

691
00:31:23,620 --> 00:31:29,709
our code<font color="#E5E5E5"> so this means that if we glitch</font>

692
00:31:26,050 --> 00:31:31,600
<font color="#E5E5E5">during that copy while the pointers are</font>

693
00:31:29,710 --> 00:31:34,600
<font color="#E5E5E5">being copied the pointers may end up in</font>

694
00:31:31,600 --> 00:31:36,580
PC and basically we<font color="#CCCCCC"> start exceeding</font><font color="#E5E5E5"> our</font>

695
00:31:34,600 --> 00:31:38,530
code flow<font color="#E5E5E5"> and what about the</font><font color="#CCCCCC"> trypsin</font>

696
00:31:36,580 --> 00:31:41,320
signal<font color="#E5E5E5"> verification well they're gone</font>

697
00:31:38,530 --> 00:31:42,100
<font color="#E5E5E5">because the control flow is ejected</font>

698
00:31:41,320 --> 00:31:44,350
during the copy

699
00:31:42,100 --> 00:31:46,120
so whatever<font color="#E5E5E5"> soft has been written there</font>

700
00:31:44,350 --> 00:31:48,580
whatever countermeasures been<font color="#CCCCCC"> written</font>

701
00:31:46,120 --> 00:31:51,129
there double checks and randomization

702
00:31:48,580 --> 00:31:52,928
and<font color="#E5E5E5"> all these things is actually gone</font><font color="#CCCCCC"> so</font>

703
00:31:51,130 --> 00:31:55,120
we<font color="#E5E5E5"> are bypassing in one go</font><font color="#CCCCCC"> the</font>

704
00:31:52,929 --> 00:31:57,390
decryption<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> verification which</font>

705
00:31:55,120 --> 00:31:59,530
happens after that<font color="#E5E5E5"> mint copy so</font>

706
00:31:57,390 --> 00:32:03,490
basically what<font color="#CCCCCC"> we're doing</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> is that</font>

707
00:31:59,530 --> 00:32:07,690
we<font color="#E5E5E5"> turn an encrypted secure boot into a</font>

708
00:32:03,490 --> 00:32:09,490
<font color="#E5E5E5">plaintext unprotected boot with a single</font>

709
00:32:07,690 --> 00:32:11,350
glitch and for which<font color="#E5E5E5"> we don't need</font><font color="#CCCCCC"> a key</font>

710
00:32:09,490 --> 00:32:13,120
<font color="#E5E5E5">because the image we're placing there is</font>

711
00:32:11,350 --> 00:32:16,240
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be in plaintiffs</font><font color="#E5E5E5"> we are going</font>

712
00:32:13,120 --> 00:32:18,580
to see these now in a few<font color="#E5E5E5"> moments</font>

713
00:32:16,240 --> 00:32:21,190
you might hear some beep<font color="#E5E5E5"> perhaps the one</font>

714
00:32:18,580 --> 00:32:24,100
on the front<font color="#E5E5E5"> rows pay attention to this</font>

715
00:32:21,190 --> 00:32:26,170
<font color="#E5E5E5">because the system with this attack is</font>

716
00:32:24,100 --> 00:32:29,169
<font color="#E5E5E5">going to be found in a very interesting</font>

717
00:32:26,170 --> 00:32:31,450
way<font color="#CCCCCC"> well first the timing is not so</font>

718
00:32:29,170 --> 00:32:32,950
relevant<font color="#E5E5E5"> because your sled can be even</font>

719
00:32:31,450 --> 00:32:34,809
quite long<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you don't have now</font><font color="#E5E5E5"> to</font>

720
00:32:32,950 --> 00:32:37,150
point pinpoint one signals or

721
00:32:34,809 --> 00:32:39,250
verification<font color="#CCCCCC"> you just have</font><font color="#E5E5E5"> to take the</font>

722
00:32:37,150 --> 00:32:39,790
right glitch while multiple pointers<font color="#E5E5E5"> are</font>

723
00:32:39,250 --> 00:32:42,160
copied

724
00:32:39,790 --> 00:32:45,250
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so the timing is not so much</font><font color="#CCCCCC"> a</font>

725
00:32:42,160 --> 00:32:47,710
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> so your</font><font color="#CCCCCC"> figure can be really</font>

726
00:32:45,250 --> 00:32:50,650
precise<font color="#E5E5E5"> you get full</font><font color="#CCCCCC"> PC control why</font>

727
00:32:47,710 --> 00:32:52,809
<font color="#E5E5E5">because you are diverting the data that</font>

728
00:32:50,650 --> 00:32:54,130
<font color="#E5E5E5">you have in flash that</font><font color="#CCCCCC"> you control</font><font color="#E5E5E5"> to</font>

729
00:32:52,809 --> 00:32:56,260
the wrong register so you<font color="#CCCCCC"> can actually</font>

730
00:32:54,130 --> 00:32:57,880
<font color="#CCCCCC">say to the</font><font color="#E5E5E5"> PC go here go here go here go</font>

731
00:32:56,260 --> 00:33:00,040
there<font color="#E5E5E5"> and you don't need a software</font>

732
00:32:57,880 --> 00:33:02,170
<font color="#E5E5E5">vulnerabilities for that so even if your</font>

733
00:33:00,040 --> 00:33:04,300
software<font color="#E5E5E5"> is perfect and you</font><font color="#CCCCCC"> harbour is</font>

734
00:33:02,170 --> 00:33:06,130
sensitive to fault injection<font color="#E5E5E5"> you can</font>

735
00:33:04,300 --> 00:33:07,990
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> also do that one important</font>

736
00:33:06,130 --> 00:33:11,290
point<font color="#E5E5E5"> with a clicker we discussing here</font>

737
00:33:07,990 --> 00:33:12,280
<font color="#E5E5E5">does</font><font color="#CCCCCC"> not depend on how you inject the</font>

738
00:33:11,290 --> 00:33:14,680
glitch or<font color="#CCCCCC"> Coast</font>

739
00:33:12,280 --> 00:33:16,450
<font color="#E5E5E5">thought it's irrelevant</font><font color="#CCCCCC"> you can do</font><font color="#E5E5E5"> this</font>

740
00:33:14,680 --> 00:33:18,910
with voltage you can<font color="#CCCCCC"> do that</font><font color="#E5E5E5"> with laser</font>

741
00:33:16,450 --> 00:33:20,830
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> M in principle if you</font><font color="#CCCCCC"> are able</font>

742
00:33:18,910 --> 00:33:22,180
to do that also we draw<font color="#CCCCCC"> half Merrill</font><font color="#E5E5E5"> -</font>

743
00:33:20,830 --> 00:33:24,429
<font color="#E5E5E5">it's extremely if you do that during</font>

744
00:33:22,180 --> 00:33:26,920
boot<font color="#CCCCCC"> but in</font><font color="#E5E5E5"> principle the technique</font>

745
00:33:24,430 --> 00:33:30,250
could be used<font color="#E5E5E5"> in the same way but way we</font>

746
00:33:26,920 --> 00:33:33,840
use also<font color="#E5E5E5"> this technique</font><font color="#CCCCCC"> last year in</font>

747
00:33:30,250 --> 00:33:36,970
order to escalate our privilege from

748
00:33:33,840 --> 00:33:38,560
users to<font color="#CCCCCC"> route and Duker to Colonel -</font>

749
00:33:36,970 --> 00:33:41,590
<font color="#E5E5E5">that</font><font color="#CCCCCC"> Colonel call execution on a fully</font>

750
00:33:38,560 --> 00:33:44,560
patched system<font color="#E5E5E5"> without a software</font>

751
00:33:41,590 --> 00:33:46,149
without<font color="#E5E5E5"> any softer vulnerability so the</font>

752
00:33:44,560 --> 00:33:48,280
<font color="#CCCCCC">fault model we're discussing it is</font>

753
00:33:46,150 --> 00:33:50,320
extremely powerful<font color="#E5E5E5"> powerful because it</font>

754
00:33:48,280 --> 00:33:52,030
<font color="#CCCCCC">bypass</font><font color="#E5E5E5"> any software which happens before</font>

755
00:33:50,320 --> 00:33:53,649
<font color="#E5E5E5">so whatever is implemented</font><font color="#CCCCCC"> is a</font>

756
00:33:52,030 --> 00:33:55,740
<font color="#E5E5E5">countermeasure after was doesn't really</font>

757
00:33:53,650 --> 00:33:58,660
count

758
00:33:55,740 --> 00:34:00,970
well on this I leave<font color="#E5E5E5"> the stage - nique</font>

759
00:33:58,660 --> 00:34:02,800
which is going<font color="#E5E5E5"> to show how is this</font>

760
00:34:00,970 --> 00:34:07,720
possible<font color="#E5E5E5"> if the tap is practical or</font>

761
00:34:02,800 --> 00:34:09,730
viable<font color="#CCCCCC"> thankfully Thank You</font><font color="#E5E5E5"> Christopher</font>

762
00:34:07,720 --> 00:34:11,860
so before we<font color="#E5E5E5"> start I would</font><font color="#CCCCCC"> like to make</font>

763
00:34:09,730 --> 00:34:13,330
one small disclaimer is that<font color="#E5E5E5"> we what we</font>

764
00:34:11,860 --> 00:34:15,429
<font color="#E5E5E5">are targeting here on States is not</font>

765
00:34:13,330 --> 00:34:17,350
actually the<font color="#E5E5E5"> world code so there's two</font>

766
00:34:15,429 --> 00:34:20,139
stages that<font color="#E5E5E5"> are programmed by us and is</font>

767
00:34:17,350 --> 00:34:21,580
for demonstration<font color="#CCCCCC"> purposes but before</font><font color="#E5E5E5"> we</font>

768
00:34:20,139 --> 00:34:23,139
go to<font color="#E5E5E5"> the other laptop let's have a look</font>

769
00:34:21,580 --> 00:34:26,020
at what we're having<font color="#E5E5E5"> here laying in</font>

770
00:34:23,139 --> 00:34:27,489
front<font color="#CCCCCC"> of us</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we have the most</font>

771
00:34:26,020 --> 00:34:29,320
important device which is actually

772
00:34:27,489 --> 00:34:31,779
capable of<font color="#E5E5E5"> injecting the glitches into</font>

773
00:34:29,320 --> 00:34:33,399
the<font color="#E5E5E5"> target and we in this case we use</font>

774
00:34:31,780 --> 00:34:35,440
the<font color="#CCCCCC"> RISC er spider which is really a</font>

775
00:34:33,399 --> 00:34:37,359
swiss knife<font color="#E5E5E5"> for</font><font color="#CCCCCC"> between fault injection</font>

776
00:34:35,440 --> 00:34:39,520
attacks<font color="#E5E5E5"> but nothing prevents you from</font>

777
00:34:37,360 --> 00:34:42,490
using<font color="#E5E5E5"> easier to access tooling like</font>

778
00:34:39,520 --> 00:34:44,020
Colin's<font color="#E5E5E5"> chip</font><font color="#CCCCCC"> Whisperer for</font><font color="#E5E5E5"> example so we</font>

779
00:34:42,489 --> 00:34:46,209
communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> devices in a</font>

780
00:34:44,020 --> 00:34:47,800
<font color="#CCCCCC">laptop</font><font color="#E5E5E5"> where we have a Python framework</font>

781
00:34:46,210 --> 00:34:50,199
that allows us<font color="#E5E5E5"> to control</font><font color="#CCCCCC"> the hardware</font>

782
00:34:47,800 --> 00:34:52,659
<font color="#E5E5E5">and this laptop is also used to</font>

783
00:34:50,199 --> 00:34:54,609
<font color="#E5E5E5">communicate with</font><font color="#CCCCCC"> the target - the serial</font>

784
00:34:52,659 --> 00:34:57,880
interface<font color="#E5E5E5"> and in this case we're</font><font color="#CCCCCC"> using</font>

785
00:34:54,610 --> 00:34:59,560
an<font color="#E5E5E5"> STM 32 chip which is arm 32 and</font>

786
00:34:57,880 --> 00:35:02,440
actually this type of chips are also

787
00:34:59,560 --> 00:35:06,160
used for products like<font color="#E5E5E5"> crypto wallets</font>

788
00:35:02,440 --> 00:35:09,310
for example so even though our<font color="#E5E5E5"> product</font>

789
00:35:06,160 --> 00:35:11,379
is<font color="#E5E5E5"> a switch knife we don't even use too</font>

790
00:35:09,310 --> 00:35:13,630
<font color="#E5E5E5">many things we provide an arbitrary</font>

791
00:35:11,380 --> 00:35:16,390
voltage signal to the target that's

792
00:35:13,630 --> 00:35:18,250
fundamental so what we need to<font color="#E5E5E5"> do to the</font>

793
00:35:16,390 --> 00:35:20,440
target is we need to<font color="#CCCCCC"> somehow remove the</font>

794
00:35:18,250 --> 00:35:22,840
<font color="#CCCCCC">original power supply and the power</font>

795
00:35:20,440 --> 00:35:24,460
<font color="#E5E5E5">supply I don't know don't mean the power</font>

796
00:35:22,840 --> 00:35:25,600
provided to the board would actually the

797
00:35:24,460 --> 00:35:27,190
<font color="#E5E5E5">power that's</font>

798
00:35:25,600 --> 00:35:29,589
<font color="#CCCCCC">holding the arm core</font><font color="#E5E5E5"> so there's</font>

799
00:35:27,190 --> 00:35:31,540
typically a<font color="#E5E5E5"> VCC signal in this case</font><font color="#CCCCCC"> for</font>

800
00:35:29,590 --> 00:35:34,480
this particular target<font color="#CCCCCC"> is roughly 3</font>

801
00:35:31,540 --> 00:35:36,040
volts<font color="#E5E5E5"> that we use but also because we</font>

802
00:35:34,480 --> 00:35:38,350
are<font color="#E5E5E5"> targeting secure boot</font><font color="#CCCCCC"> we need to</font>

803
00:35:36,040 --> 00:35:39,850
reset<font color="#E5E5E5"> the</font><font color="#CCCCCC"> device</font><font color="#E5E5E5"> every time in order to</font>

804
00:35:38,350 --> 00:35:42,370
<font color="#E5E5E5">trigger the secure boot so we're also</font>

805
00:35:39,850 --> 00:35:44,700
using a system reset in order to reset

806
00:35:42,370 --> 00:35:46,839
the device<font color="#E5E5E5"> every time with</font><font color="#CCCCCC"> a GPIO</font><font color="#E5E5E5"> pin</font>

807
00:35:44,700 --> 00:35:48,189
but everybody knows<font color="#E5E5E5"> that does some</font>

808
00:35:46,840 --> 00:35:50,260
hardware hacking that even when you<font color="#E5E5E5"> have</font>

809
00:35:48,190 --> 00:35:52,000
a<font color="#CCCCCC"> simple setup</font><font color="#E5E5E5"> that the cables will grow</font>

810
00:35:50,260 --> 00:35:53,800
everywhere<font color="#CCCCCC"> but this is</font><font color="#E5E5E5"> exactly what we</font>

811
00:35:52,000 --> 00:35:56,080
have laying in front<font color="#E5E5E5"> of us</font><font color="#CCCCCC"> I do not have</font>

812
00:35:53,800 --> 00:35:57,880
the time to<font color="#CCCCCC"> explain what all the cables</font>

813
00:35:56,080 --> 00:35:59,819
are doing but please<font color="#E5E5E5"> come to us after</font>

814
00:35:57,880 --> 00:36:02,290
<font color="#E5E5E5">the presentation and I think we will</font>

815
00:35:59,820 --> 00:36:03,760
build<font color="#CCCCCC"> on the setup during</font><font color="#E5E5E5"> one of the</font>

816
00:36:02,290 --> 00:36:07,029
breaks that<font color="#CCCCCC"> we can talk</font><font color="#E5E5E5"> about it in more</font>

817
00:36:03,760 --> 00:36:10,450
detail<font color="#CCCCCC"> so what we</font><font color="#E5E5E5"> did in order to</font><font color="#CCCCCC"> make</font>

818
00:36:07,030 --> 00:36:12,430
this attack is that we first programmed

819
00:36:10,450 --> 00:36:14,140
a secure boot implementation and

820
00:36:12,430 --> 00:36:15,970
<font color="#E5E5E5">basically what is</font><font color="#CCCCCC"> happening here is the</font>

821
00:36:14,140 --> 00:36:20,290
device<font color="#E5E5E5"> gets reset some hardware gets</font>

822
00:36:15,970 --> 00:36:23,049
initialized<font color="#E5E5E5"> then po1 is executed and bo1</font>

823
00:36:20,290 --> 00:36:27,490
<font color="#E5E5E5">is actually loading decrypting and then</font>

824
00:36:23,050 --> 00:36:29,020
authenticating bill<font color="#E5E5E5"> - so the the binary</font>

825
00:36:27,490 --> 00:36:31,240
<font color="#E5E5E5">data that you see there is actually</font><font color="#CCCCCC"> a</font>

826
00:36:29,020 --> 00:36:33,070
<font color="#E5E5E5">copy of the bill - so as you can</font><font color="#CCCCCC"> see</font>

827
00:36:31,240 --> 00:36:35,649
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> completely encrypted</font><font color="#CCCCCC"> due</font><font color="#E5E5E5"> to the</font>

828
00:36:33,070 --> 00:36:37,840
high entropy<font color="#E5E5E5"> so what we did is we</font>

829
00:36:35,650 --> 00:36:40,150
modified the<font color="#CCCCCC"> vo - in a similar fashion</font>

830
00:36:37,840 --> 00:36:42,220
as Christopher explained so on the right

831
00:36:40,150 --> 00:36:45,070
<font color="#E5E5E5">side you see the</font><font color="#CCCCCC"> bill</font><font color="#E5E5E5"> - again and</font>

832
00:36:42,220 --> 00:36:47,649
whenever it starts up<font color="#E5E5E5"> it will be loaded</font>

833
00:36:45,070 --> 00:36:49,120
<font color="#CCCCCC">by bill 1 it will still be decrypted</font><font color="#E5E5E5"> but</font>

834
00:36:47,650 --> 00:36:51,220
it<font color="#E5E5E5"> will be decrypted into garbage</font>

835
00:36:49,120 --> 00:36:52,660
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we do not</font><font color="#E5E5E5"> have the key and then</font>

836
00:36:51,220 --> 00:36:55,089
<font color="#CCCCCC">the other indication of bill -</font><font color="#E5E5E5"> oh</font>

837
00:36:52,660 --> 00:36:59,049
actually<font color="#CCCCCC"> fill but what you can see is</font>

838
00:36:55,090 --> 00:37:00,790
that we loaded a few things in<font color="#CCCCCC"> there so</font>

839
00:36:59,050 --> 00:37:02,500
<font color="#E5E5E5">first some knobs these are not too</font>

840
00:37:00,790 --> 00:37:04,720
relevant<font color="#E5E5E5"> and then actually our payload</font>

841
00:37:02,500 --> 00:37:06,190
<font color="#CCCCCC">and as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see on the right side</font>

842
00:37:04,720 --> 00:37:08,080
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is a string and</font><font color="#E5E5E5"> that's already a</font>

843
00:37:06,190 --> 00:37:10,510
giveaway<font color="#CCCCCC"> of what's</font><font color="#E5E5E5"> going to happen and</font>

844
00:37:08,080 --> 00:37:12,819
after this<font color="#E5E5E5"> code is actually the pointers</font>

845
00:37:10,510 --> 00:37:14,620
that Christopher mentioned and<font color="#CCCCCC"> this</font>

846
00:37:12,820 --> 00:37:16,300
<font color="#E5E5E5">pointers don't point to the</font><font color="#CCCCCC"> flash</font><font color="#E5E5E5"> but</font>

847
00:37:14,620 --> 00:37:19,690
<font color="#E5E5E5">actually point to the buffer in</font><font color="#CCCCCC"> Ezra</font>

848
00:37:16,300 --> 00:37:23,230
where these<font color="#CCCCCC"> image will be copied so</font>

849
00:37:19,690 --> 00:37:25,180
whenever the boot device with a<font color="#E5E5E5"> valid</font>

850
00:37:23,230 --> 00:37:27,040
image<font color="#E5E5E5"> there will be some strings printed</font>

851
00:37:25,180 --> 00:37:28,960
on the serial interface<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you see it</font>

852
00:37:27,040 --> 00:37:30,940
started<font color="#CCCCCC"> via</font><font color="#E5E5E5"> one that it's loading bill</font>

853
00:37:28,960 --> 00:37:33,160
<font color="#CCCCCC">to decrypting bill to authenticating</font>

854
00:37:30,940 --> 00:37:35,790
bill - and then it jumps to build - and

855
00:37:33,160 --> 00:37:38,269
then<font color="#E5E5E5"> bill - happily says I also started</font>

856
00:37:35,790 --> 00:37:41,569
but for the malicious image

857
00:37:38,269 --> 00:37:43,308
<font color="#E5E5E5">bo1 still starts it still loads</font><font color="#CCCCCC"> bo2 it</font>

858
00:37:41,569 --> 00:37:45,529
decrypts bo2 but you'll see that

859
00:37:43,309 --> 00:37:47,869
<font color="#E5E5E5">afterwards it stops because like I</font><font color="#CCCCCC"> said</font>

860
00:37:45,529 --> 00:37:50,119
the authentication of<font color="#E5E5E5"> bo1</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> actually</font>

861
00:37:47,869 --> 00:37:52,309
fill and this is<font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> what we will</font>

862
00:37:50,119 --> 00:37:54,469
<font color="#E5E5E5">try</font><font color="#CCCCCC"> to bypass use a fault injection in a</font>

863
00:37:52,309 --> 00:37:57,289
similar fashion as<font color="#E5E5E5"> Christopher already</font>

864
00:37:54,469 --> 00:38:04,519
explained so we can switch<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font>

865
00:37:57,289 --> 00:38:05,089
laptop<font color="#E5E5E5"> can I have the other feet thank</font>

866
00:38:04,519 --> 00:38:07,519
you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

867
00:38:05,089 --> 00:38:10,279
so here on the left side let's<font color="#E5E5E5"> focus on</font>

868
00:38:07,519 --> 00:38:11,598
<font color="#CCCCCC">that first we see actually a signal and</font>

869
00:38:10,279 --> 00:38:13,459
this is<font color="#CCCCCC"> the signal measured by the</font>

870
00:38:11,599 --> 00:38:15,949
oscilloscope<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is actually the</font>

871
00:38:13,459 --> 00:38:18,379
system reset that we use to get<font color="#E5E5E5"> the</font>

872
00:38:15,949 --> 00:38:20,569
board out<font color="#CCCCCC"> of reset</font><font color="#E5E5E5"> so every time the</font>

873
00:38:18,379 --> 00:38:21,709
signal<font color="#E5E5E5"> goes up the system is</font><font color="#CCCCCC"> actually</font>

874
00:38:20,569 --> 00:38:24,288
released<font color="#E5E5E5"> and the hardware starts</font>

875
00:38:21,709 --> 00:38:33,019
initializing so I can open another

876
00:38:24,289 --> 00:38:35,029
signal this<font color="#CCCCCC"> other</font><font color="#E5E5E5"> signal is actually the</font>

877
00:38:33,019 --> 00:38:37,848
photos provided<font color="#E5E5E5"> to the target and as you</font>

878
00:38:35,029 --> 00:38:39,409
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> I lied it is not</font><font color="#E5E5E5"> around 3 volt</font>

879
00:38:37,849 --> 00:38:41,209
is actually<font color="#CCCCCC"> I have 2 volts</font><font color="#E5E5E5"> but it's</font>

880
00:38:39,409 --> 00:38:43,339
enough<font color="#CCCCCC"> for the chip to operate</font><font color="#E5E5E5"> and</font>

881
00:38:41,209 --> 00:38:45,859
roughly in the middle<font color="#CCCCCC"> you see sometimes</font>

882
00:38:43,339 --> 00:38:47,779
<font color="#E5E5E5">this</font><font color="#CCCCCC"> red dip in the signal and</font><font color="#E5E5E5"> that's</font>

883
00:38:45,859 --> 00:38:49,729
exactly the glitch we are<font color="#E5E5E5"> injecting and</font>

884
00:38:47,779 --> 00:38:52,189
of course we know<font color="#E5E5E5"> roughly where to</font>

885
00:38:49,729 --> 00:38:54,019
inject this<font color="#E5E5E5"> glitch because in principle</font>

886
00:38:52,189 --> 00:38:56,658
<font color="#E5E5E5">when you start doing phone injection the</font>

887
00:38:54,019 --> 00:38:58,968
attack window starts from the<font color="#CCCCCC"> moment the</font>

888
00:38:56,659 --> 00:39:00,589
chip cards out<font color="#CCCCCC"> of reset until the moment</font>

889
00:38:58,969 --> 00:39:03,019
<font color="#E5E5E5">you can detect something goes wrong but</font>

890
00:39:00,589 --> 00:39:04,639
we already roughly know this location<font color="#E5E5E5"> so</font>

891
00:39:03,019 --> 00:39:06,709
let's<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at the right</font><font color="#CCCCCC"> side with your</font>

892
00:39:04,639 --> 00:39:09,229
interface to control<font color="#E5E5E5"> the hardware</font><font color="#CCCCCC"> I will</font>

893
00:39:06,709 --> 00:39:10,969
just briefly stop the updating<font color="#E5E5E5"> so what</font>

894
00:39:09,229 --> 00:39:12,948
you can<font color="#E5E5E5"> see is that we roughly performs</font>

895
00:39:10,969 --> 00:39:15,559
in the<font color="#E5E5E5"> start of this</font><font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> 9000</font>

896
00:39:12,949 --> 00:39:17,659
experiments<font color="#CCCCCC"> we</font><font color="#E5E5E5"> randomized</font><font color="#CCCCCC"> declared delay</font>

897
00:39:15,559 --> 00:39:19,669
a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> so we go from</font><font color="#CCCCCC"> : from left</font>

898
00:39:17,659 --> 00:39:22,369
to right and then<font color="#E5E5E5"> the glitz voltage is</font>

899
00:39:19,669 --> 00:39:25,249
the amplitude of the dip and the glaze

900
00:39:22,369 --> 00:39:27,049
length is the width of<font color="#CCCCCC"> that dip</font><font color="#E5E5E5"> and then</font>

901
00:39:25,249 --> 00:39:28,908
<font color="#E5E5E5">on the right</font><font color="#CCCCCC"> side you see that the</font>

902
00:39:27,049 --> 00:39:31,159
expected<font color="#E5E5E5"> data is being returned by the</font>

903
00:39:28,909 --> 00:39:34,339
target is finalized with stopping<font color="#E5E5E5"> so the</font>

904
00:39:31,159 --> 00:39:38,119
<font color="#E5E5E5">target detects that it actually cannot</font>

905
00:39:34,339 --> 00:39:40,279
attend to gate the image now when<font color="#E5E5E5"> I</font>

906
00:39:38,119 --> 00:39:41,359
started again<font color="#CCCCCC"> you will see that there's</font>

907
00:39:40,279 --> 00:39:43,729
different<font color="#E5E5E5"> stuff going</font><font color="#CCCCCC"> on</font>

908
00:39:41,359 --> 00:39:45,139
for example<font color="#E5E5E5"> this purple one it's a bit</font>

909
00:39:43,729 --> 00:39:48,390
hard to read<font color="#E5E5E5"> but what's happening</font><font color="#CCCCCC"> here</font>

910
00:39:45,139 --> 00:39:50,940
is<font color="#CCCCCC"> that actually a</font><font color="#E5E5E5"> CPU exception is</font>

911
00:39:48,390 --> 00:39:52,980
<font color="#CCCCCC">is strong so somehow the</font><font color="#E5E5E5"> CPU got a</font>

912
00:39:50,940 --> 00:39:54,329
<font color="#E5E5E5">hiccup and it printed</font><font color="#CCCCCC"> some information</font>

913
00:39:52,980 --> 00:39:56,579
about<font color="#E5E5E5"> the current state</font><font color="#CCCCCC"> of some of the</font>

914
00:39:54,329 --> 00:39:58,670
registers but<font color="#E5E5E5"> for the people</font><font color="#CCCCCC"> that</font>

915
00:39:56,579 --> 00:40:01,470
actually<font color="#E5E5E5"> heard the beep</font>

916
00:39:58,670 --> 00:40:04,920
every time<font color="#CCCCCC"> you ready beep</font><font color="#E5E5E5"> something else</font>

917
00:40:01,470 --> 00:40:07,078
happened<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> ever looked at</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> hat</font>

918
00:40:04,920 --> 00:40:09,299
experiment<font color="#E5E5E5"> and we see still that</font><font color="#CCCCCC"> bo1 is</font>

919
00:40:07,079 --> 00:40:11,609
success we started but then directly

920
00:40:09,299 --> 00:40:13,380
<font color="#E5E5E5">afterwards</font><font color="#CCCCCC"> it does not print</font><font color="#E5E5E5"> he expect</font>

921
00:40:11,609 --> 00:40:16,069
these<font color="#CCCCCC"> links</font><font color="#E5E5E5"> anymore we directly jump to</font>

922
00:40:13,380 --> 00:40:18,390
<font color="#CCCCCC">our payload</font><font color="#E5E5E5"> so somehow we take the CPU</font>

923
00:40:16,069 --> 00:40:20,400
into executing a different instruction

924
00:40:18,390 --> 00:40:22,890
<font color="#E5E5E5">that resulted</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> loading one of the</font>

925
00:40:20,400 --> 00:40:25,950
pointers that<font color="#CCCCCC"> was in our flash into the</font>

926
00:40:22,890 --> 00:40:28,078
PC so I can show you<font color="#E5E5E5"> that since the</font>

927
00:40:25,950 --> 00:40:29,970
beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the presentation we</font>

928
00:40:28,079 --> 00:40:35,250
bypassed<font color="#CCCCCC"> this reboot</font><font color="#E5E5E5"> implementation</font>

929
00:40:29,970 --> 00:40:37,288
roughly 260 times in<font color="#E5E5E5"> roughly an hour so</font>

930
00:40:35,250 --> 00:40:40,170
it's pretty pretty stable<font color="#E5E5E5"> for</font><font color="#CCCCCC"> this</font>

931
00:40:37,289 --> 00:40:43,789
particular implementation<font color="#E5E5E5"> can I go back</font>

932
00:40:40,170 --> 00:40:43,789
<font color="#CCCCCC">to the other screen again</font>

933
00:40:48,619 --> 00:40:54,299
so we shoot multiple<font color="#E5E5E5"> ways of bypassing</font>

934
00:40:52,259 --> 00:40:57,150
secure boot<font color="#E5E5E5"> whether it was done doing</font>

935
00:40:54,299 --> 00:40:59,160
<font color="#E5E5E5">software exploitation</font><font color="#CCCCCC"> or a hardware</font>

936
00:40:57,150 --> 00:41:03,569
<font color="#CCCCCC">attack like fault injection of a company</font>

937
00:40:59,160 --> 00:41:05,490
or<font color="#E5E5E5"> a combination</font><font color="#CCCCCC"> of well</font><font color="#E5E5E5"> our talk was</font>

938
00:41:03,569 --> 00:41:06,839
hardening secure boot for hostile

939
00:41:05,490 --> 00:41:09,689
environments<font color="#E5E5E5"> and so far we only</font>

940
00:41:06,839 --> 00:41:11,640
<font color="#E5E5E5">explained the offensive part but the</font>

941
00:41:09,690 --> 00:41:13,319
defensive part will really be explained

942
00:41:11,640 --> 00:41:17,400
in more detail<font color="#E5E5E5"> in</font><font color="#CCCCCC"> our paper that will</font><font color="#E5E5E5"> be</font>

943
00:41:13,319 --> 00:41:18,808
<font color="#CCCCCC">hopefully released</font><font color="#E5E5E5"> early this</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> but</font>

944
00:41:17,400 --> 00:41:21,180
<font color="#E5E5E5">to give you an idea</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> things that</font>

945
00:41:18,809 --> 00:41:23,670
are being discussed<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> these things</font>

946
00:41:21,180 --> 00:41:24,960
are open doors but<font color="#E5E5E5"> very important for</font>

947
00:41:23,670 --> 00:41:27,539
<font color="#CCCCCC">example you want to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure that your</font>

948
00:41:24,960 --> 00:41:29,430
implementation<font color="#CCCCCC"> is real design is simple</font>

949
00:41:27,539 --> 00:41:32,549
<font color="#E5E5E5">the more complexity you add the more</font>

950
00:41:29,430 --> 00:41:34,769
opportunity<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the more opportunity</font>

951
00:41:32,549 --> 00:41:37,288
there's<font color="#CCCCCC"> for mistakes to slip in or more</font>

952
00:41:34,769 --> 00:41:39,299
opportunities for<font color="#E5E5E5"> attackers in a similar</font>

953
00:41:37,289 --> 00:41:41,789
fashion<font color="#CCCCCC"> you want to make sure that you</font>

954
00:41:39,299 --> 00:41:43,799
<font color="#CCCCCC">minimize the attackers choices for</font>

955
00:41:41,789 --> 00:41:46,079
<font color="#E5E5E5">example we already seen this morning</font>

956
00:41:43,799 --> 00:41:48,240
that for some implementations the amount

957
00:41:46,079 --> 00:41:49,799
<font color="#E5E5E5">of options you have in order to control</font>

958
00:41:48,240 --> 00:41:52,950
small parts of<font color="#E5E5E5"> the scribbled</font>

959
00:41:49,799 --> 00:41:56,519
implementation can lead to<font color="#CCCCCC"> particular</font>

960
00:41:52,950 --> 00:41:57,720
<font color="#CCCCCC">threats that</font><font color="#E5E5E5"> can be materialized also</font>

961
00:41:56,519 --> 00:41:59,519
already<font color="#E5E5E5"> mentioned you want to make sure</font>

962
00:41:57,720 --> 00:42:00,959
<font color="#CCCCCC">that you authenticate everything</font><font color="#E5E5E5"> and it</font>

963
00:41:59,519 --> 00:42:02,430
does not only<font color="#CCCCCC"> mean you want to</font><font color="#E5E5E5"> attempt</font>

964
00:42:00,960 --> 00:42:04,950
dedicate the code that's<font color="#E5E5E5"> being executed</font>

965
00:42:02,430 --> 00:42:06,660
<font color="#CCCCCC">but also the data</font><font color="#E5E5E5"> that the secure boot</font>

966
00:42:04,950 --> 00:42:07,649
implementation relies on<font color="#E5E5E5"> because</font>

967
00:42:06,660 --> 00:42:09,149
otherwise you might trigger

968
00:42:07,650 --> 00:42:10,859
vulnerabilities which you could not

969
00:42:09,150 --> 00:42:12,900
trigger<font color="#CCCCCC"> if it was properly authenticated</font>

970
00:42:10,859 --> 00:42:14,819
<font color="#CCCCCC">and please remember you need to</font>

971
00:42:12,900 --> 00:42:16,759
authenticate<font color="#CCCCCC"> it before you use it and</font>

972
00:42:14,819 --> 00:42:19,380
<font color="#E5E5E5">not after otherwise it's kind of useless</font>

973
00:42:16,759 --> 00:42:22,349
so like we've seen even<font color="#E5E5E5"> don't want to</font>

974
00:42:19,380 --> 00:42:25,950
use<font color="#E5E5E5"> weak crypto you want to make so for</font>

975
00:42:22,349 --> 00:42:29,460
exploitation<font color="#CCCCCC"> hard the clicker</font><font color="#E5E5E5"> is not</font>

976
00:42:25,950 --> 00:42:31,019
<font color="#E5E5E5">always working</font><font color="#CCCCCC"> you wanna drop privileges</font>

977
00:42:29,460 --> 00:42:33,390
when<font color="#E5E5E5"> possible because often an attacker</font>

978
00:42:31,019 --> 00:42:35,788
is after a particular asset<font color="#E5E5E5"> and if this</font>

979
00:42:33,390 --> 00:42:38,190
<font color="#E5E5E5">assert reaching this asset requires</font>

980
00:42:35,789 --> 00:42:39,660
<font color="#E5E5E5">particular privileges by</font><font color="#CCCCCC"> inspecting the</font>

981
00:42:38,190 --> 00:42:41,940
amount of stages<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> access this</font>

982
00:42:39,660 --> 00:42:45,180
asset<font color="#CCCCCC"> you decrease the size of</font><font color="#E5E5E5"> the</font>

983
00:42:41,940 --> 00:42:46,710
attack surface also<font color="#E5E5E5"> what we've seen</font>

984
00:42:45,180 --> 00:42:48,569
<font color="#CCCCCC">already in the field</font><font color="#E5E5E5"> but also</font><font color="#CCCCCC"> the</font>

985
00:42:46,710 --> 00:42:50,069
<font color="#CCCCCC">example that</font><font color="#E5E5E5"> we shown that fault</font>

986
00:42:48,569 --> 00:42:51,630
injection<font color="#CCCCCC"> is a real threat on secure</font>

987
00:42:50,069 --> 00:42:54,420
boot implementations<font color="#E5E5E5"> and you see it</font>

988
00:42:51,630 --> 00:42:56,490
<font color="#E5E5E5">already happening in the field and</font>

989
00:42:54,420 --> 00:42:58,049
moreover it's always possible<font color="#CCCCCC"> that</font>

990
00:42:56,490 --> 00:42:59,669
mistakes slip in but you<font color="#E5E5E5"> want to make</font>

991
00:42:58,049 --> 00:43:01,410
sure<font color="#CCCCCC"> you can fix these mistakes</font>

992
00:42:59,670 --> 00:43:03,240
if they're in<font color="#CCCCCC"> silver and when you do you</font>

993
00:43:01,410 --> 00:43:05,490
want to make sure<font color="#E5E5E5"> that attackers cannot</font>

994
00:43:03,240 --> 00:43:07,078
go back<font color="#E5E5E5"> to a more</font><font color="#CCCCCC"> renewable version in</font>

995
00:43:05,490 --> 00:43:10,410
<font color="#E5E5E5">order to exploit the vulnerability that</font>

996
00:43:07,079 --> 00:43:13,020
<font color="#E5E5E5">was identified</font><font color="#CCCCCC"> in an older</font><font color="#E5E5E5"> version so</font>

997
00:43:10,410 --> 00:43:15,359
what else<font color="#CCCCCC"> you can think</font><font color="#E5E5E5"> of well</font><font color="#CCCCCC"> a mature</font>

998
00:43:13,020 --> 00:43:17,400
<font color="#E5E5E5">product has a secure system software</font>

999
00:43:15,359 --> 00:43:18,869
development lifecycle<font color="#CCCCCC"> and this is</font>

1000
00:43:17,400 --> 00:43:20,880
exactly<font color="#E5E5E5"> what's important in order to</font>

1001
00:43:18,869 --> 00:43:23,099
verify<font color="#E5E5E5"> the hardness of a secure boot</font>

1002
00:43:20,880 --> 00:43:25,890
implementation<font color="#E5E5E5"> so you want to think of</font>

1003
00:43:23,099 --> 00:43:28,230
continuous software review and testing

1004
00:43:25,890 --> 00:43:30,390
but more importantly for<font color="#E5E5E5"> the hardware</font>

1005
00:43:28,230 --> 00:43:32,250
<font color="#E5E5E5">you want to make sure that you test your</font>

1006
00:43:30,390 --> 00:43:34,410
<font color="#E5E5E5">hardware</font><font color="#CCCCCC"> because it's very</font><font color="#E5E5E5"> difficult to</font>

1007
00:43:32,250 --> 00:43:36,089
do<font color="#E5E5E5"> an analysis of your hardware so what</font>

1008
00:43:34,410 --> 00:43:38,220
the impact of a fault injection<font color="#E5E5E5"> attack</font>

1009
00:43:36,089 --> 00:43:40,770
<font color="#E5E5E5">would</font><font color="#CCCCCC"> be on your hardware from</font><font color="#E5E5E5"> just a</font>

1010
00:43:38,220 --> 00:43:42,930
paper study where she can review code<font color="#E5E5E5"> by</font>

1011
00:43:40,770 --> 00:43:44,430
sitting behind your<font color="#CCCCCC"> computer in</font><font color="#E5E5E5"> order to</font>

1012
00:43:42,930 --> 00:43:45,779
verify the robustness of<font color="#CCCCCC"> your hardware</font>

1013
00:43:44,430 --> 00:43:53,629
<font color="#CCCCCC">you really need to</font><font color="#E5E5E5"> get your hands dirty</font>

1014
00:43:45,780 --> 00:43:55,559
<font color="#CCCCCC">and start testing so to wrap up in</font>

1015
00:43:53,630 --> 00:43:57,240
together with the presentation have

1016
00:43:55,559 --> 00:43:59,819
already seen<font color="#E5E5E5"> this morning but also the</font>

1017
00:43:57,240 --> 00:44:01,290
examples we gave secure boot is<font color="#CCCCCC"> nowadays</font>

1018
00:43:59,819 --> 00:44:03,569
often<font color="#CCCCCC"> not obsolete</font><font color="#E5E5E5"> hardened and</font>

1019
00:44:01,290 --> 00:44:05,670
especially if you<font color="#E5E5E5"> compare</font><font color="#CCCCCC"> to the the</font>

1020
00:44:03,569 --> 00:44:07,558
<font color="#E5E5E5">system when it's fully initialized the</font>

1021
00:44:05,670 --> 00:44:09,359
typical software<font color="#E5E5E5"> exploitation</font>

1022
00:44:07,559 --> 00:44:10,799
mitigations and other features that are

1023
00:44:09,359 --> 00:44:12,808
<font color="#E5E5E5">used to make it more difficult to the</font>

1024
00:44:10,799 --> 00:44:16,290
attack<font color="#CCCCCC"> and device are actually not</font>

1025
00:44:12,809 --> 00:44:18,630
implemented<font color="#E5E5E5"> during boot attack</font><font color="#CCCCCC"> surface</font>

1026
00:44:16,290 --> 00:44:20,520
of secure boot is much larger than often

1027
00:44:18,630 --> 00:44:21,990
<font color="#E5E5E5">expected so one of the</font><font color="#CCCCCC"> examples we've</font>

1028
00:44:20,520 --> 00:44:24,980
<font color="#CCCCCC">shown that</font><font color="#E5E5E5"> the attack service actually</font>

1029
00:44:21,990 --> 00:44:27,569
starts<font color="#CCCCCC"> before any code is</font><font color="#E5E5E5"> being executed</font>

1030
00:44:24,980 --> 00:44:29,430
<font color="#CCCCCC">and also</font><font color="#E5E5E5"> during this presentation</font><font color="#CCCCCC"> we</font>

1031
00:44:27,569 --> 00:44:32,400
gave a few<font color="#CCCCCC"> new perspectives on attacking</font>

1032
00:44:29,430 --> 00:44:34,710
secure boot and by that I would like<font color="#E5E5E5"> to</font>

1033
00:44:32,400 --> 00:44:36,329
<font color="#CCCCCC">finalise the presentation we are</font><font color="#E5E5E5"> very</font>

1034
00:44:34,710 --> 00:44:38,040
happy<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be here and if there's any</font><font color="#E5E5E5"> time</font>

1035
00:44:36,329 --> 00:44:39,630
<font color="#CCCCCC">left we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> happy</font><font color="#E5E5E5"> to answer some</font>

1036
00:44:38,040 --> 00:44:41,460
<font color="#CCCCCC">questions and</font><font color="#E5E5E5"> otherwise please approach</font>

1037
00:44:39,630 --> 00:44:44,960
us<font color="#E5E5E5"> we will be here for</font><font color="#CCCCCC"> the remainder of</font>

1038
00:44:41,460 --> 00:44:44,960
the event thank you<font color="#E5E5E5"> very much</font>

1039
00:44:44,990 --> 00:44:47,049
you

1040
00:44:47,080 --> 00:44:50,219
[Applause]

1041
00:44:47,820 --> 00:44:50,219
[Music]

