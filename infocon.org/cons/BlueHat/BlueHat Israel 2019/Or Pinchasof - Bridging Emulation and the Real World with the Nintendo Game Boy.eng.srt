1
00:00:00,000 --> 00:00:02,729
[Music]

2
00:00:11,420 --> 00:00:18,810
so<font color="#CCCCCC"> I'm or and this</font><font color="#E5E5E5"> is my gameboy</font><font color="#CCCCCC"> so a</font>

3
00:00:17,010 --> 00:00:20,730
<font color="#E5E5E5">couple of years ago a good</font><font color="#CCCCCC"> friend of</font>

4
00:00:18,810 --> 00:00:22,799
mine<font color="#CCCCCC"> armed</font><font color="#E5E5E5"> he asked me what</font><font color="#CCCCCC"> was the</font>

5
00:00:20,730 --> 00:00:25,590
favorite thing that<font color="#CCCCCC"> you hacked around</font>

6
00:00:22,800 --> 00:00:27,630
<font color="#E5E5E5">and I said yeah it's probably my game</font>

7
00:00:25,590 --> 00:00:31,140
way that I connected<font color="#E5E5E5"> to my PC so I can</font>

8
00:00:27,630 --> 00:00:32,519
trade Pokemon with myself<font color="#E5E5E5"> and today I'm</font>

9
00:00:31,140 --> 00:00:35,070
going to<font color="#E5E5E5"> tell you the story</font><font color="#CCCCCC"> of this</font>

10
00:00:32,519 --> 00:00:39,570
project<font color="#E5E5E5"> that I did about 15</font><font color="#CCCCCC"> years ago</font><font color="#E5E5E5"> in</font>

11
00:00:35,070 --> 00:00:42,600
2005 and at the time there was already<font color="#E5E5E5"> a</font>

12
00:00:39,570 --> 00:00:44,160
big<font color="#E5E5E5"> community of gameplay gameplay</font>

13
00:00:42,600 --> 00:00:45,989
<font color="#E5E5E5">normal</font><font color="#CCCCCC"> Game Boy and Game Boy Advance</font>

14
00:00:44,160 --> 00:00:48,089
development<font color="#E5E5E5"> and there was a lot of</font>

15
00:00:45,989 --> 00:00:50,610
homebrew and tools and everything<font color="#E5E5E5"> or</font>

16
00:00:48,090 --> 00:00:52,680
many things<font color="#CCCCCC"> were</font><font color="#E5E5E5"> already in</font><font color="#CCCCCC"> place</font><font color="#E5E5E5"> him</font>

17
00:00:50,610 --> 00:00:54,450
but for<font color="#E5E5E5"> this talk today I did the</font>

18
00:00:52,680 --> 00:00:56,129
<font color="#E5E5E5">research and</font><font color="#CCCCCC"> development</font><font color="#E5E5E5"> from the</font>

19
00:00:54,450 --> 00:00:57,750
beginning from<font color="#CCCCCC"> the ground up so I can</font>

20
00:00:56,129 --> 00:01:00,089
give you<font color="#CCCCCC"> a full</font><font color="#E5E5E5"> picture of what I've</font>

21
00:00:57,750 --> 00:01:02,000
done<font color="#E5E5E5"> at the time and what I've done this</font>

22
00:01:00,090 --> 00:01:04,890
time to make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> work again</font>

23
00:01:02,000 --> 00:01:06,810
<font color="#E5E5E5">so the GPA</font><font color="#CCCCCC"> or the Gameboy Advance is</font><font color="#E5E5E5"> a</font>

24
00:01:04,890 --> 00:01:09,780
<font color="#E5E5E5">handheld video game console</font><font color="#CCCCCC"> that was</font>

25
00:01:06,810 --> 00:01:11,640
released<font color="#E5E5E5"> by</font><font color="#CCCCCC"> Nintendo in 2001</font><font color="#E5E5E5"> and it's a</font>

26
00:01:09,780 --> 00:01:14,399
successor<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the Game</font><font color="#CCCCCC"> Boy and Game Boy</font>

27
00:01:11,640 --> 00:01:17,490
Color lines it has<font color="#E5E5E5"> better CPU design an</font>

28
00:01:14,399 --> 00:01:19,470
ARM processor better<font color="#E5E5E5"> video larger screen</font>

29
00:01:17,490 --> 00:01:23,490
better sound<font color="#CCCCCC"> in advanced linking</font>

30
00:01:19,470 --> 00:01:25,470
capabilities<font color="#E5E5E5"> so in short the linking</font>

31
00:01:23,490 --> 00:01:28,289
<font color="#CCCCCC">capabilities of the Game Boy Advance are</font>

32
00:01:25,470 --> 00:01:30,630
<font color="#E5E5E5">twofold one is called multi</font><font color="#CCCCCC"> Peck gaming</font>

33
00:01:28,289 --> 00:01:33,119
and this<font color="#E5E5E5"> is if every player has the same</font>

34
00:01:30,630 --> 00:01:35,190
game they put it inside<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> the game</font>

35
00:01:33,119 --> 00:01:36,929
boys and you<font color="#E5E5E5"> can transfer the game</font>

36
00:01:35,190 --> 00:01:39,030
<font color="#CCCCCC">information and play multiplayer games</font>

37
00:01:36,929 --> 00:01:41,940
they are<font color="#CCCCCC"> the other option</font><font color="#E5E5E5"> is called</font>

38
00:01:39,030 --> 00:01:44,399
single pack or<font color="#E5E5E5"> also multi boot and this</font>

39
00:01:41,940 --> 00:01:47,700
allows you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have one game pack in the</font>

40
00:01:44,399 --> 00:01:49,110
master<font color="#E5E5E5"> Gameboy it transfers some subset</font>

41
00:01:47,700 --> 00:01:52,050
of the game<font color="#CCCCCC"> information to the other</font>

42
00:01:49,110 --> 00:01:53,700
<font color="#E5E5E5">game boys they load it to the RAM and</font>

43
00:01:52,050 --> 00:01:56,220
execute from there and that's<font color="#CCCCCC"> how you</font>

44
00:01:53,700 --> 00:02:02,789
can play multiplayer games with<font color="#E5E5E5"> only one</font>

45
00:01:56,220 --> 00:02:04,649
game pack 2002 at<font color="#E5E5E5"> the end of 2002 the</font>

46
00:02:02,789 --> 00:02:07,709
third generation<font color="#CCCCCC"> Pokemon</font><font color="#E5E5E5"> games came out</font>

47
00:02:04,649 --> 00:02:09,509
pokemon ruby and sapphire<font color="#E5E5E5"> and as every</font>

48
00:02:07,709 --> 00:02:12,150
pokemon trainer knows<font color="#CCCCCC"> if the goal of</font>

49
00:02:09,508 --> 00:02:14,309
<font color="#CCCCCC">these games is twofold one is to beat</font>

50
00:02:12,150 --> 00:02:16,319
all the<font color="#CCCCCC"> trainer's on the map and become</font>

51
00:02:14,310 --> 00:02:18,510
the league champion and the second is to

52
00:02:16,319 --> 00:02:20,820
catch all Pokemon<font color="#E5E5E5"> well the first</font>

53
00:02:18,510 --> 00:02:21,829
objective is quite easy<font color="#E5E5E5"> and everyone can</font>

54
00:02:20,820 --> 00:02:24,470
do it the second<font color="#E5E5E5"> one</font>

55
00:02:21,830 --> 00:02:26,300
is much harder<font color="#E5E5E5"> because in every</font>

56
00:02:24,470 --> 00:02:26,720
generation<font color="#E5E5E5"> that there are two games like</font>

57
00:02:26,300 --> 00:02:28,370
that

58
00:02:26,720 --> 00:02:30,230
each game<font color="#CCCCCC"> has a different subset</font><font color="#E5E5E5"> of</font>

59
00:02:28,370 --> 00:02:32,450
<font color="#E5E5E5">Pokemon so if you want to catch all of</font>

60
00:02:30,230 --> 00:02:34,760
<font color="#E5E5E5">them you have to trade with friends that</font>

61
00:02:32,450 --> 00:02:37,100
have both a physical<font color="#E5E5E5"> game boy</font><font color="#CCCCCC"> and the</font>

62
00:02:34,760 --> 00:02:39,200
other<font color="#E5E5E5"> version so at the time none of my</font>

63
00:02:37,100 --> 00:02:41,239
friends<font color="#CCCCCC"> had the other version or a</font>

64
00:02:39,200 --> 00:02:42,769
physical<font color="#E5E5E5"> game boy so I did the only</font>

65
00:02:41,240 --> 00:02:49,670
<font color="#CCCCCC">thing that made sense</font><font color="#E5E5E5"> and I</font><font color="#CCCCCC"> turned to</font>

66
00:02:42,770 --> 00:02:52,160
computers so my idea in general<font color="#E5E5E5"> was to</font>

67
00:02:49,670 --> 00:02:54,709
take this<font color="#CCCCCC"> set up and change one of these</font>

68
00:02:52,160 --> 00:02:59,720
game boys and the human<font color="#CCCCCC"> attach to it</font><font color="#E5E5E5"> to</font>

69
00:02:54,710 --> 00:03:01,790
my<font color="#E5E5E5"> PC so just to give you a little bit</font>

70
00:02:59,720 --> 00:03:04,640
<font color="#CCCCCC">of background on what</font><font color="#E5E5E5"> existed at the</font>

71
00:03:01,790 --> 00:03:07,310
time<font color="#E5E5E5"> so the emulation scene was already</font>

72
00:03:04,640 --> 00:03:10,010
pretty it<font color="#E5E5E5"> was very strong at the time an</font>

73
00:03:07,310 --> 00:03:12,860
emulator is a<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> that lets you in</font>

74
00:03:10,010 --> 00:03:15,290
general<font color="#E5E5E5"> play a gameboy games on your PC</font>

75
00:03:12,860 --> 00:03:19,370
<font color="#CCCCCC">so visual boy advance is very No No Cash</font>

76
00:03:15,290 --> 00:03:21,709
<font color="#E5E5E5">GBA is another very good emulator</font><font color="#CCCCCC"> there</font>

77
00:03:19,370 --> 00:03:23,900
were also many specifications<font color="#CCCCCC"> document</font>

78
00:03:21,709 --> 00:03:25,880
like GBA<font color="#CCCCCC"> Tech and</font><font color="#E5E5E5"> cow</font><font color="#CCCCCC"> byte and this give</font>

79
00:03:23,900 --> 00:03:27,620
you an accurate<font color="#CCCCCC"> description of the</font>

80
00:03:25,880 --> 00:03:29,480
hardware<font color="#E5E5E5"> and the software of the game</font>

81
00:03:27,620 --> 00:03:31,700
way that you can base your research or

82
00:03:29,480 --> 00:03:33,709
<font color="#E5E5E5">development on and finally</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> was the</font>

83
00:03:31,700 --> 00:03:37,100
homebrew community<font color="#E5E5E5"> which included the</font>

84
00:03:33,709 --> 00:03:38,600
<font color="#E5E5E5">tool</font><font color="#CCCCCC"> chance or a dev kit Pro exponent</font>

85
00:03:37,100 --> 00:03:40,310
cards which are<font color="#E5E5E5"> different ways</font><font color="#CCCCCC"> that you</font>

86
00:03:38,600 --> 00:03:43,730
can load your own<font color="#CCCCCC"> code to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Gameboy</font>

87
00:03:40,310 --> 00:03:48,200
and<font color="#E5E5E5"> run it so I built upon these things</font>

88
00:03:43,730 --> 00:03:50,390
<font color="#CCCCCC">when I did the</font><font color="#E5E5E5"> original research so a</font>

89
00:03:48,200 --> 00:03:52,130
little<font color="#E5E5E5"> word about emulation so this is</font>

90
00:03:50,390 --> 00:03:53,570
visual boy advance and it's running<font color="#CCCCCC"> The</font>

91
00:03:52,130 --> 00:03:58,310
Legend of<font color="#CCCCCC"> Zelda which is a very</font><font color="#E5E5E5"> good</font>

92
00:03:53,570 --> 00:04:00,410
<font color="#E5E5E5">game a visual advance is one of the most</font>

93
00:03:58,310 --> 00:04:02,630
<font color="#E5E5E5">well known emulators at the time and</font>

94
00:04:00,410 --> 00:04:04,970
still<font color="#CCCCCC"> a very</font><font color="#E5E5E5"> good emulator in order to</font>

95
00:04:02,630 --> 00:04:07,310
build an emulator such emulator you need

96
00:04:04,970 --> 00:04:09,350
to have the<font color="#E5E5E5"> description of the hardware</font>

97
00:04:07,310 --> 00:04:12,260
<font color="#E5E5E5">so for that you</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> the</font>

98
00:04:09,350 --> 00:04:14,209
specification documents the best one is

99
00:04:12,260 --> 00:04:15,760
probably GBA<font color="#E5E5E5"> Tech written by a guy named</font>

100
00:04:14,209 --> 00:04:19,608
Moulton<font color="#CCCCCC"> cord</font>

101
00:04:15,760 --> 00:04:21,159
he<font color="#E5E5E5"> actually still up the updates updates</font>

102
00:04:19,608 --> 00:04:25,130
<font color="#E5E5E5">it to this day</font>

103
00:04:21,160 --> 00:04:27,350
and this document<font color="#CCCCCC"> contains very accurate</font>

104
00:04:25,130 --> 00:04:30,140
description<font color="#CCCCCC"> of how the game</font><font color="#E5E5E5"> was built</font>

105
00:04:27,350 --> 00:04:31,850
and what are the different memory

106
00:04:30,140 --> 00:04:34,150
regions that he has the i/o registers

107
00:04:31,850 --> 00:04:38,920
and we'll talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about it</font>

108
00:04:34,150 --> 00:04:40,419
in a few<font color="#E5E5E5"> minutes so I set up a list of</font>

109
00:04:38,920 --> 00:04:42,820
goals<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to achieve in order</font>

110
00:04:40,420 --> 00:04:45,520
<font color="#E5E5E5">to finally be able to finish my pokedex</font>

111
00:04:42,820 --> 00:04:48,490
<font color="#E5E5E5">so the first one was to understand the</font>

112
00:04:45,520 --> 00:04:51,490
physical layer<font color="#E5E5E5"> and how data</font><font color="#CCCCCC"> is</font>

113
00:04:48,490 --> 00:04:53,800
transmitted<font color="#CCCCCC"> between two Gameboys</font><font color="#E5E5E5"> the</font>

114
00:04:51,490 --> 00:04:55,330
second is to<font color="#CCCCCC"> reverse-engineer</font><font color="#E5E5E5"> the multi</font>

115
00:04:53,800 --> 00:04:57,910
<font color="#E5E5E5">boot protocol which like I said</font><font color="#CCCCCC"> this is</font>

116
00:04:55,330 --> 00:05:01,030
<font color="#E5E5E5">the single pack gaming mode that will</font>

117
00:04:57,910 --> 00:05:03,580
allow me<font color="#E5E5E5"> to run my</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> testing code on</font>

118
00:05:01,030 --> 00:05:06,719
the<font color="#CCCCCC"> Gameboy so I can</font><font color="#E5E5E5"> identify the</font>

119
00:05:03,580 --> 00:05:09,280
sending procedures<font color="#E5E5E5"> in software and</font>

120
00:05:06,720 --> 00:05:12,130
finally be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement these</font>

121
00:05:09,280 --> 00:05:15,280
handle or this handling<font color="#E5E5E5"> link handling in</font>

122
00:05:12,130 --> 00:05:21,310
the emulator itself<font color="#E5E5E5"> so that ultimately</font>

123
00:05:15,280 --> 00:05:22,989
we<font color="#CCCCCC"> can trade so let's get a little</font><font color="#E5E5E5"> bit</font>

124
00:05:21,310 --> 00:05:25,570
<font color="#E5E5E5">into the detail so this is the link</font>

125
00:05:22,990 --> 00:05:27,850
cable<font color="#E5E5E5"> it has</font><font color="#CCCCCC"> two ends</font><font color="#E5E5E5"> one for the master</font>

126
00:05:25,570 --> 00:05:29,740
<font color="#E5E5E5">gameplay one for the slave the</font><font color="#CCCCCC"> Box in</font>

127
00:05:27,850 --> 00:05:31,480
the<font color="#E5E5E5"> middle</font><font color="#CCCCCC"> is for connecting</font><font color="#E5E5E5"> game</font><font color="#CCCCCC"> was</font>

128
00:05:29,740 --> 00:05:34,540
number<font color="#E5E5E5"> three and</font><font color="#CCCCCC"> four so we'll</font><font color="#E5E5E5"> ignore it</font>

129
00:05:31,480 --> 00:05:36,970
at the moment<font color="#E5E5E5"> the link port itself if</font>

130
00:05:34,540 --> 00:05:39,640
you<font color="#E5E5E5"> if you start</font><font color="#CCCCCC"> to probe the pins it's</font>

131
00:05:36,970 --> 00:05:41,950
it's<font color="#E5E5E5"> quite a simple cable there are two</font>

132
00:05:39,640 --> 00:05:43,900
<font color="#E5E5E5">common pins which are the power in the</font>

133
00:05:41,950 --> 00:05:48,159
ground<font color="#E5E5E5"> and there are four other data</font>

134
00:05:43,900 --> 00:05:51,070
pins<font color="#E5E5E5"> so the SD and SC serial data and</font>

135
00:05:48,160 --> 00:05:53,980
sync are used for for transferring the

136
00:05:51,070 --> 00:05:56,710
<font color="#E5E5E5">data itself</font><font color="#CCCCCC"> and Esso</font><font color="#E5E5E5"> serial output and</font>

137
00:05:53,980 --> 00:05:59,200
si<font color="#E5E5E5"> are used for serial input are used</font>

138
00:05:56,710 --> 00:06:00,969
for<font color="#CCCCCC"> some</font><font color="#E5E5E5"> kind of single signaling</font>

139
00:05:59,200 --> 00:06:03,400
between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> game boards so as you can</font>

140
00:06:00,970 --> 00:06:05,080
see<font color="#E5E5E5"> the Esso of one</font><font color="#CCCCCC"> Gameboy is connected</font>

141
00:06:03,400 --> 00:06:07,659
to the si of the other in this<font color="#E5E5E5"> way you</font>

142
00:06:05,080 --> 00:06:10,780
<font color="#E5E5E5">can chain a couple of</font><font color="#CCCCCC"> cables</font><font color="#E5E5E5"> Gameboy is</font>

143
00:06:07,660 --> 00:06:12,700
up to<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> si of the first is</font>

144
00:06:10,780 --> 00:06:17,190
connected to<font color="#CCCCCC"> ground and this</font><font color="#E5E5E5"> is actually</font>

145
00:06:12,700 --> 00:06:17,190
his way to know<font color="#E5E5E5"> that this is the master</font>

146
00:06:17,790 --> 00:06:22,120
<font color="#CCCCCC">ok now</font><font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to show you how it looks</font>

147
00:06:20,320 --> 00:06:24,580
<font color="#E5E5E5">like in</font><font color="#CCCCCC"> real life</font><font color="#E5E5E5"> when you connect these</font>

148
00:06:22,120 --> 00:06:27,370
<font color="#CCCCCC">two</font><font color="#E5E5E5"> game boys and load a game from one</font>

149
00:06:24,580 --> 00:06:29,080
to the other<font color="#CCCCCC"> so the game that we have is</font>

150
00:06:27,370 --> 00:06:34,200
a Yoshi's Island<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> also a</font><font color="#E5E5E5"> very</font>

151
00:06:29,080 --> 00:06:34,200
<font color="#CCCCCC">good game now I'd like</font><font color="#E5E5E5"> to turn</font>

152
00:06:52,350 --> 00:06:56,190
<font color="#E5E5E5">okay so this is a completely commercial</font>

153
00:06:54,630 --> 00:06:58,380
demonstration this<font color="#E5E5E5"> is how the system</font>

154
00:06:56,190 --> 00:07:00,420
<font color="#CCCCCC">should</font><font color="#E5E5E5"> work and this is</font><font color="#CCCCCC"> what we'll</font><font color="#E5E5E5"> try</font>

155
00:06:58,380 --> 00:07:04,350
<font color="#E5E5E5">to achieve in the next few minutes</font>

156
00:07:00,420 --> 00:07:05,850
ourselves so one<font color="#CCCCCC"> of these game boys as</font>

157
00:07:04,350 --> 00:07:07,320
you<font color="#E5E5E5"> can see it's</font><font color="#CCCCCC"> very hard to</font><font color="#E5E5E5"> see the</font>

158
00:07:05,850 --> 00:07:09,030
screen<font color="#E5E5E5"> because it's not backlit by</font>

159
00:07:07,320 --> 00:07:12,480
itself<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> probably the reason</font>

160
00:07:09,030 --> 00:07:14,159
<font color="#CCCCCC">why I have glasses</font><font color="#E5E5E5"> these days so this</font>

161
00:07:12,480 --> 00:07:16,290
game<font color="#CCCCCC"> boy</font><font color="#E5E5E5"> it doesn't</font><font color="#CCCCCC"> have a game pack</font>

162
00:07:14,160 --> 00:07:18,090
inserted at all and the<font color="#CCCCCC"> other one has</font>

163
00:07:16,290 --> 00:07:23,670
Yoshi's Island<font color="#E5E5E5"> and we can press the</font>

164
00:07:18,090 --> 00:07:26,479
<font color="#E5E5E5">multiplayer</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it already identified</font>

165
00:07:23,670 --> 00:07:29,790
<font color="#CCCCCC">that it's connected to</font><font color="#E5E5E5"> the other Gameboy</font>

166
00:07:26,480 --> 00:07:31,170
and it's transmitting data<font color="#E5E5E5"> to be played</font>

167
00:07:29,790 --> 00:07:33,420
<font color="#E5E5E5">on this one I'll</font><font color="#CCCCCC"> just say that the</font>

168
00:07:31,170 --> 00:07:35,880
circuit that<font color="#E5E5E5"> I have here currently it's</font>

169
00:07:33,420 --> 00:07:37,710
<font color="#E5E5E5">not connected at all the cables just cut</font>

170
00:07:35,880 --> 00:07:39,390
in the middle<font color="#CCCCCC"> and this is the completely</font>

171
00:07:37,710 --> 00:07:43,760
completely the<font color="#CCCCCC"> way</font><font color="#E5E5E5"> this system should</font>

172
00:07:39,390 --> 00:07:43,760
<font color="#CCCCCC">work so this</font><font color="#E5E5E5"> is Mario running around</font>

173
00:07:46,130 --> 00:07:51,510
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> and this is the game so the</font><font color="#CCCCCC"> game</font>

174
00:07:49,170 --> 00:07:53,940
the game data<font color="#E5E5E5"> was</font><font color="#CCCCCC"> loaded from the Left</font>

175
00:07:51,510 --> 00:07:56,270
Gameboy the purple one<font color="#CCCCCC"> - the second</font>

176
00:07:53,940 --> 00:07:56,270
Gameboy

177
00:08:01,540 --> 00:08:07,800
<font color="#E5E5E5">okay just attach these for the rest</font>

178
00:08:14,210 --> 00:08:18,219
<font color="#E5E5E5">okay excellent back to the presentation</font>

179
00:08:21,840 --> 00:08:27,789
great so now<font color="#E5E5E5"> let's go a little bit down</font>

180
00:08:25,150 --> 00:08:30,580
to the details<font color="#E5E5E5"> and if you put a logic</font>

181
00:08:27,790 --> 00:08:32,229
analyzer<font color="#CCCCCC"> on these four lines</font><font color="#E5E5E5"> this is</font>

182
00:08:30,580 --> 00:08:34,990
what you're getting<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> a single</font>

183
00:08:32,229 --> 00:08:37,120
sample<font color="#E5E5E5"> of one transmission</font><font color="#CCCCCC"> of data that</font>

184
00:08:34,990 --> 00:08:39,909
it passed<font color="#E5E5E5"> that is passed between the two</font>

185
00:08:37,120 --> 00:08:42,070
<font color="#CCCCCC">Gameboys</font><font color="#E5E5E5"> for this</font><font color="#CCCCCC"> I used an Arduino</font>

186
00:08:39,909 --> 00:08:43,630
logic analyzer as I've used Arduino a

187
00:08:42,070 --> 00:08:47,950
lot in this project and we'll talk about

188
00:08:43,630 --> 00:08:50,610
the Arduino<font color="#E5E5E5"> enough so the four lines are</font>

189
00:08:47,950 --> 00:08:53,380
as follows<font color="#CCCCCC"> the uppermost sync line</font>

190
00:08:50,610 --> 00:08:57,160
signifies the duration of the of the

191
00:08:53,380 --> 00:08:59,080
entire transfer the SD holds the beats

192
00:08:57,160 --> 00:09:01,000
the transfer between<font color="#E5E5E5"> the master and the</font>

193
00:08:59,080 --> 00:09:03,460
<font color="#E5E5E5">slave in front the slave to the master</font>

194
00:09:01,000 --> 00:09:06,220
the protocol states that each<font color="#CCCCCC"> Gameboy</font>

195
00:09:03,460 --> 00:09:08,470
sends its data<font color="#E5E5E5"> in its turn and the turns</font>

196
00:09:06,220 --> 00:09:10,480
change according<font color="#CCCCCC"> to the Esso line</font><font color="#E5E5E5"> that</font>

197
00:09:08,470 --> 00:09:13,060
is connected<font color="#CCCCCC"> from the master to the next</font>

198
00:09:10,480 --> 00:09:15,430
slave every<font color="#E5E5E5"> time the SI as we've seen</font>

199
00:09:13,060 --> 00:09:18,119
before<font color="#E5E5E5"> is always low for the master</font><font color="#CCCCCC"> and</font>

200
00:09:15,430 --> 00:09:21,819
that's<font color="#E5E5E5"> how it knows that it's the master</font>

201
00:09:18,120 --> 00:09:25,240
<font color="#CCCCCC">in the number</font><font color="#E5E5E5"> of beats that</font><font color="#CCCCCC"> each that</font>

202
00:09:21,820 --> 00:09:27,640
each<font color="#CCCCCC"> Gameboy sense is not is a 18 which</font>

203
00:09:25,240 --> 00:09:29,320
<font color="#CCCCCC">is not a round number like 16 and</font><font color="#E5E5E5"> the</font>

204
00:09:27,640 --> 00:09:31,150
reason is that the first<font color="#E5E5E5"> beat is</font><font color="#CCCCCC"> the</font>

205
00:09:29,320 --> 00:09:34,570
start<font color="#E5E5E5"> beat and the last one is the stop</font>

206
00:09:31,150 --> 00:09:36,760
it so in in our case the<font color="#E5E5E5"> actual data</font>

207
00:09:34,570 --> 00:09:41,020
that<font color="#E5E5E5"> is transferred between the two game</font>

208
00:09:36,760 --> 00:09:46,569
<font color="#E5E5E5">pauses</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> 60</font><font color="#CCCCCC"> 202 and</font><font color="#E5E5E5"> 70 202 as the</font>

209
00:09:41,020 --> 00:09:48,490
answer<font color="#E5E5E5"> to quickly summarize the layer</font><font color="#CCCCCC"> 1</font>

210
00:09:46,570 --> 00:09:50,260
protocol it's very it's a fairly simple

211
00:09:48,490 --> 00:09:53,320
protocol<font color="#E5E5E5"> and if you connect</font><font color="#CCCCCC"> the logic</font>

212
00:09:50,260 --> 00:09:55,689
analyzer<font color="#E5E5E5"> you immediately see the master</font>

213
00:09:53,320 --> 00:09:58,570
sets the beginning of the transmission

214
00:09:55,690 --> 00:10:01,000
sends its data including<font color="#CCCCCC"> the start data</font>

215
00:09:58,570 --> 00:10:03,310
and stop<font color="#CCCCCC"> it's sets the Esso low to</font>

216
00:10:01,000 --> 00:10:07,870
signal the slave<font color="#E5E5E5"> that now it's his turn</font>

217
00:10:03,310 --> 00:10:10,709
to<font color="#E5E5E5"> send data and then in the next</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

218
00:10:07,870 --> 00:10:13,930
next state the<font color="#E5E5E5"> slave sends its own data</font>

219
00:10:10,710 --> 00:10:16,150
including all the bits<font color="#CCCCCC"> and sets the Esso</font>

220
00:10:13,930 --> 00:10:18,579
<font color="#CCCCCC">for the next game</font><font color="#E5E5E5"> where to start the</font>

221
00:10:16,150 --> 00:10:20,230
transmission<font color="#CCCCCC"> the master waits for the</font>

222
00:10:18,580 --> 00:10:22,330
<font color="#CCCCCC">timeout because it needs to</font><font color="#E5E5E5"> know if</font>

223
00:10:20,230 --> 00:10:24,190
there are more game was connected in the

224
00:10:22,330 --> 00:10:26,320
chain it<font color="#E5E5E5"> has it doesn't know</font><font color="#CCCCCC"> how many</font>

225
00:10:24,190 --> 00:10:28,840
game was<font color="#E5E5E5"> there are so it just counts the</font>

226
00:10:26,320 --> 00:10:30,970
passing time and if a timeout occurred

227
00:10:28,840 --> 00:10:33,730
then the<font color="#E5E5E5"> transmission over is over it</font>

228
00:10:30,970 --> 00:10:35,620
says the<font color="#CCCCCC"> SC hi and that's it</font>

229
00:10:33,730 --> 00:10:40,110
now one more thing<font color="#E5E5E5"> about the</font>

230
00:10:35,620 --> 00:10:43,060
transmission<font color="#CCCCCC"> the length of each beat is</font>

231
00:10:40,110 --> 00:10:47,020
<font color="#CCCCCC">8.7 microseconds which gives us about</font>

232
00:10:43,060 --> 00:10:48,760
<font color="#E5E5E5">rate of 115 200 beats per second and the</font>

233
00:10:47,020 --> 00:10:56,829
duration<font color="#E5E5E5"> of the entire transfer is</font>

234
00:10:48,760 --> 00:10:59,410
around<font color="#CCCCCC"> 350</font><font color="#E5E5E5"> microseconds great so now</font>

235
00:10:56,830 --> 00:11:00,820
that we<font color="#E5E5E5"> have a basic understanding or a</font>

236
00:10:59,410 --> 00:11:03,130
good understanding<font color="#E5E5E5"> of the layer one</font>

237
00:11:00,820 --> 00:11:05,110
protocol we can proceed to<font color="#E5E5E5"> the multiple</font>

238
00:11:03,130 --> 00:11:08,860
protocol itself<font color="#CCCCCC"> now there are two ways</font>

239
00:11:05,110 --> 00:11:12,610
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> can that</font><font color="#CCCCCC"> we can get that we can</font>

240
00:11:08,860 --> 00:11:13,960
<font color="#E5E5E5">get the protocol one is to sniff the the</font>

241
00:11:12,610 --> 00:11:15,850
transmissions that go between<font color="#E5E5E5"> the two</font>

242
00:11:13,960 --> 00:11:18,040
<font color="#CCCCCC">Gameboys and to see what is what is</font>

243
00:11:15,850 --> 00:11:21,100
transferred and<font color="#E5E5E5"> the other is to reverse</font>

244
00:11:18,040 --> 00:11:23,290
the<font color="#E5E5E5"> bios or the games and to see what</font>

245
00:11:21,100 --> 00:11:29,170
what is the algorithm<font color="#E5E5E5"> that is found</font>

246
00:11:23,290 --> 00:11:31,000
within them so for<font color="#E5E5E5"> the sniffing task we</font>

247
00:11:29,170 --> 00:11:33,459
again we can<font color="#CCCCCC"> use our</font><font color="#E5E5E5"> arduino sniffer</font>

248
00:11:31,000 --> 00:11:36,880
which is connected to the circuit<font color="#E5E5E5"> in</font>

249
00:11:33,460 --> 00:11:38,710
parallel and using the arduino runs<font color="#E5E5E5"> at</font>

250
00:11:36,880 --> 00:11:42,160
16 megahertz which should be enough for

251
00:11:38,710 --> 00:11:44,260
<font color="#E5E5E5">the sampling rate it can give us like</font>

252
00:11:42,160 --> 00:11:46,120
high<font color="#E5E5E5"> enough accuracy for getting the</font>

253
00:11:44,260 --> 00:11:49,030
individual<font color="#E5E5E5"> bit notice though</font><font color="#CCCCCC"> that we</font>

254
00:11:46,120 --> 00:11:50,920
don't<font color="#E5E5E5"> have any clock signal so the so we</font>

255
00:11:49,030 --> 00:11:53,079
<font color="#E5E5E5">have to keep the timing very accurate</font>

256
00:11:50,920 --> 00:11:54,430
the moment the transmission starts<font color="#E5E5E5"> we</font>

257
00:11:53,080 --> 00:11:57,880
can<font color="#CCCCCC"> oh it happens and then we have to</font>

258
00:11:54,430 --> 00:12:00,489
keep the timing accurate in doing this

259
00:11:57,880 --> 00:12:03,100
using adrenal works very well<font color="#E5E5E5"> that when</font>

260
00:12:00,490 --> 00:12:05,440
it has multiple GPIO pins which allow

261
00:12:03,100 --> 00:12:07,870
you<font color="#E5E5E5"> to connect directly to the digital</font>

262
00:12:05,440 --> 00:12:10,690
<font color="#E5E5E5">circuit of the</font><font color="#CCCCCC"> Gameboy</font><font color="#E5E5E5"> it has built-in</font>

263
00:12:07,870 --> 00:12:13,360
timers and this mechanism<font color="#E5E5E5"> works very</font>

264
00:12:10,690 --> 00:12:15,670
well<font color="#E5E5E5"> with the Arduino and</font><font color="#CCCCCC"> this is an</font>

265
00:12:13,360 --> 00:12:17,830
example<font color="#E5E5E5"> of what we get when we perform</font>

266
00:12:15,670 --> 00:12:19,660
<font color="#CCCCCC">the sniffing so it's</font><font color="#E5E5E5"> connected to three</font>

267
00:12:17,830 --> 00:12:20,950
parts this<font color="#CCCCCC"> is from the beginning of the</font>

268
00:12:19,660 --> 00:12:23,530
transmission<font color="#CCCCCC"> the middle of this</font>

269
00:12:20,950 --> 00:12:25,960
transmission<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the end of it</font><font color="#CCCCCC"> right now</font>

270
00:12:23,530 --> 00:12:28,180
<font color="#CCCCCC">we can see some some</font><font color="#E5E5E5"> things that are of</font>

271
00:12:25,960 --> 00:12:30,850
interest like things<font color="#E5E5E5"> that seem</font><font color="#CCCCCC"> like</font>

272
00:12:28,180 --> 00:12:32,800
counters that going down or going<font color="#CCCCCC"> up</font><font color="#E5E5E5"> but</font>

273
00:12:30,850 --> 00:12:34,630
we won't put too much effort<font color="#CCCCCC"> into this</font>

274
00:12:32,800 --> 00:12:38,170
<font color="#E5E5E5">we'll just use it when we start to</font>

275
00:12:34,630 --> 00:12:40,630
reverse the code so when we get<font color="#E5E5E5"> to</font>

276
00:12:38,170 --> 00:12:42,849
<font color="#E5E5E5">reversing as I said before</font><font color="#CCCCCC"> GBA attack</font><font color="#E5E5E5"> or</font>

277
00:12:40,630 --> 00:12:45,310
these other specification documents are

278
00:12:42,850 --> 00:12:45,720
<font color="#CCCCCC">very helpful okay in this</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> we can</font>

279
00:12:45,310 --> 00:12:47,910
<font color="#E5E5E5">see that</font>

280
00:12:45,720 --> 00:12:49,829
give the<font color="#E5E5E5"> memory map of the</font><font color="#CCCCCC"> game boy we</font>

281
00:12:47,910 --> 00:12:52,529
can see they say exactly<font color="#CCCCCC"> okay the bias</font>

282
00:12:49,829 --> 00:12:54,719
is loaded at address<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> the games or</font>

283
00:12:52,529 --> 00:12:56,970
the<font color="#E5E5E5"> ROM is loaded at address eight</font>

284
00:12:54,720 --> 00:13:00,540
million<font color="#CCCCCC"> we have an</font><font color="#E5E5E5"> address of</font><font color="#CCCCCC"> LOM which</font>

285
00:12:56,970 --> 00:13:02,670
<font color="#E5E5E5">is</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> million etc etc and if we use this</font>

286
00:13:00,540 --> 00:13:04,949
<font color="#E5E5E5">documentation we can load</font><font color="#CCCCCC"> all the data</font>

287
00:13:02,670 --> 00:13:07,259
that<font color="#E5E5E5"> we have into either very neatly in</font>

288
00:13:04,949 --> 00:13:07,920
<font color="#CCCCCC">the right sections everything fits fits</font>

289
00:13:07,259 --> 00:13:12,589
<font color="#CCCCCC">exactly</font>

290
00:13:07,920 --> 00:13:12,589
it makes the reversing much much easier

291
00:13:13,399 --> 00:13:18,089
<font color="#E5E5E5">another very important part in the in</font>

292
00:13:16,410 --> 00:13:21,329
this specification document is the i/o

293
00:13:18,089 --> 00:13:23,910
registers map<font color="#CCCCCC"> the i/o registers are the</font>

294
00:13:21,329 --> 00:13:25,349
way<font color="#E5E5E5"> of the game boy to give the</font><font color="#CCCCCC"> software</font>

295
00:13:23,910 --> 00:13:28,139
some ways to interact<font color="#CCCCCC"> with the</font>

296
00:13:25,350 --> 00:13:30,449
peripherals<font color="#E5E5E5"> so these are memory</font>

297
00:13:28,139 --> 00:13:32,069
addresses that if the games try to write

298
00:13:30,449 --> 00:13:33,750
to these<font color="#E5E5E5"> addresses then something</font>

299
00:13:32,069 --> 00:13:35,519
happens with<font color="#E5E5E5"> the hardware for example</font>

300
00:13:33,750 --> 00:13:37,470
they write something<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the screen</font><font color="#CCCCCC"> or</font>

301
00:13:35,519 --> 00:13:40,259
sound is produced<font color="#CCCCCC"> or communication is</font>

302
00:13:37,470 --> 00:13:41,610
initiated if they read they can<font color="#E5E5E5"> get the</font>

303
00:13:40,259 --> 00:13:45,600
<font color="#E5E5E5">actual state</font><font color="#CCCCCC"> of the keys for example</font>

304
00:13:41,610 --> 00:13:48,149
<font color="#CCCCCC">which key is pressed</font><font color="#E5E5E5"> etc so if we add</font>

305
00:13:45,600 --> 00:13:50,759
this information<font color="#CCCCCC"> also</font><font color="#E5E5E5"> to our reversing</font>

306
00:13:48,149 --> 00:13:53,550
we can get<font color="#E5E5E5"> exactly what's happening when</font>

307
00:13:50,759 --> 00:13:58,019
<font color="#E5E5E5">the when the code tries to write or to</font>

308
00:13:53,550 --> 00:14:01,859
read from a specific<font color="#E5E5E5"> address ok great</font><font color="#CCCCCC"> so</font>

309
00:13:58,019 --> 00:14:03,870
let's read some<font color="#E5E5E5"> assembly so I put here a</font>

310
00:14:01,860 --> 00:14:06,750
couple<font color="#E5E5E5"> of</font><font color="#CCCCCC"> examples from the reversing of</font>

311
00:14:03,870 --> 00:14:08,250
of the in<font color="#E5E5E5"> this case the bias so</font><font color="#CCCCCC"> the bias</font>

312
00:14:06,750 --> 00:14:09,480
is the<font color="#E5E5E5"> code</font><font color="#CCCCCC"> that runs when</font><font color="#E5E5E5"> you turn on</font>

313
00:14:08,250 --> 00:14:11,819
<font color="#CCCCCC">the gameboy and there is no game</font>

314
00:14:09,480 --> 00:14:15,029
<font color="#CCCCCC">inserted this is</font><font color="#E5E5E5"> the logo that</font><font color="#CCCCCC"> comes</font>

315
00:14:11,819 --> 00:14:17,699
that comes<font color="#E5E5E5"> up so one thing that I saw</font>

316
00:14:15,029 --> 00:14:19,199
that was<font color="#E5E5E5"> where</font><font color="#CCCCCC"> it was quite nice to see</font>

317
00:14:17,699 --> 00:14:21,839
is that the bias is loaded that address

318
00:14:19,199 --> 00:14:23,250
is<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and starts to run</font><font color="#CCCCCC"> from address 0</font>

319
00:14:21,839 --> 00:14:26,519
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> something that I haven't</font><font color="#E5E5E5"> seen</font>

320
00:14:23,250 --> 00:14:28,319
lately and I think is<font color="#E5E5E5"> the software</font>

321
00:14:26,519 --> 00:14:31,350
<font color="#CCCCCC">interrupt</font><font color="#E5E5E5"> table so this is a list of</font>

322
00:14:28,319 --> 00:14:33,389
functions<font color="#CCCCCC"> that the bias provides this</font>

323
00:14:31,350 --> 00:14:34,920
the the realm of the<font color="#CCCCCC"> games that they can</font>

324
00:14:33,389 --> 00:14:37,170
<font color="#E5E5E5">that they can use</font>

325
00:14:34,920 --> 00:14:39,660
turns<font color="#E5E5E5"> out that one of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> functions is</font>

326
00:14:37,170 --> 00:14:41,699
a multiple function that performs<font color="#E5E5E5"> the</font>

327
00:14:39,660 --> 00:14:46,139
communication to load this code to the

328
00:14:41,699 --> 00:14:47,939
other<font color="#CCCCCC"> Gameboy another part of</font><font color="#E5E5E5"> the BIOS</font>

329
00:14:46,139 --> 00:14:50,550
code is the code<font color="#CCCCCC"> that handles the</font>

330
00:14:47,939 --> 00:14:52,349
multiple transmission how do we know

331
00:14:50,550 --> 00:14:54,420
<font color="#CCCCCC">that this is the right place</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font>

332
00:14:52,350 --> 00:14:56,970
the i/o registers<font color="#E5E5E5"> these are the</font>

333
00:14:54,420 --> 00:14:59,410
registers that<font color="#E5E5E5"> are responsible for</font><font color="#CCCCCC"> the</font>

334
00:14:56,970 --> 00:15:01,839
<font color="#CCCCCC">transmission we can also see some for me</font>

335
00:14:59,410 --> 00:15:05,379
numbers<font color="#E5E5E5"> like 73 that we've seen in the</font>

336
00:15:01,839 --> 00:15:07,359
sniffing or 63-64 and if we<font color="#E5E5E5"> combine</font>

337
00:15:05,379 --> 00:15:09,369
these the the<font color="#E5E5E5"> information that we got</font>

338
00:15:07,359 --> 00:15:11,109
from<font color="#E5E5E5"> sniffing and reversing it makes it</font>

339
00:15:09,369 --> 00:15:14,199
easier to<font color="#E5E5E5"> understand what's the</font>

340
00:15:11,109 --> 00:15:16,479
<font color="#CCCCCC">algorithm here and the last</font><font color="#E5E5E5"> example is</font>

341
00:15:14,199 --> 00:15:20,199
the is the game code this is Yoshi's

342
00:15:16,479 --> 00:15:22,689
Island and here we can<font color="#E5E5E5"> see the multiple</font>

343
00:15:20,199 --> 00:15:25,118
handling<font color="#E5E5E5"> that is done</font><font color="#CCCCCC"> in the game itself</font>

344
00:15:22,689 --> 00:15:27,309
<font color="#CCCCCC">so again we</font><font color="#E5E5E5"> can see call to this</font>

345
00:15:25,119 --> 00:15:29,829
<font color="#E5E5E5">software</font><font color="#CCCCCC"> interrupt function</font><font color="#E5E5E5"> that's in</font>

346
00:15:27,309 --> 00:15:32,049
the bias<font color="#E5E5E5"> and we can see</font><font color="#CCCCCC"> references to</font>

347
00:15:29,829 --> 00:15:35,738
these to the relevant<font color="#E5E5E5"> IO registers</font>

348
00:15:32,049 --> 00:15:37,509
<font color="#E5E5E5">familiar numbers again and the reversing</font>

349
00:15:35,739 --> 00:15:40,749
of this is quite<font color="#E5E5E5"> straightforward there's</font>

350
00:15:37,509 --> 00:15:48,579
not a lot of code going<font color="#E5E5E5"> on but it's a</font>

351
00:15:40,749 --> 00:15:50,739
it's<font color="#E5E5E5"> as if a very good exercise so this</font>

352
00:15:48,579 --> 00:15:52,659
is<font color="#CCCCCC"> ensured the entire multiple protocol</font>

353
00:15:50,739 --> 00:15:55,749
so there are a<font color="#E5E5E5"> couple of stages in it</font>

354
00:15:52,659 --> 00:15:58,809
the master<font color="#E5E5E5"> Gameboy probes the slave to</font>

355
00:15:55,749 --> 00:16:01,059
see if it's there they send header<font color="#E5E5E5"> they</font>

356
00:15:58,809 --> 00:16:03,219
ask for<font color="#E5E5E5"> an encryption key the encryption</font>

357
00:16:01,059 --> 00:16:04,899
is pretty much soaring<font color="#CCCCCC"> the information</font>

358
00:16:03,220 --> 00:16:07,959
with<font color="#E5E5E5"> a with a byte or a couple of byte</font>

359
00:16:04,899 --> 00:16:13,119
nothing more than that<font color="#E5E5E5"> they really had</font>

360
00:16:07,959 --> 00:16:16,539
very<font color="#CCCCCC"> minimal</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> in mind</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> the</font>

361
00:16:13,119 --> 00:16:19,029
main data is sent the transfer is is

362
00:16:16,539 --> 00:16:21,459
finished and then both both sides

363
00:16:19,029 --> 00:16:23,529
<font color="#E5E5E5">compute CRC exchange it make sure</font><font color="#CCCCCC"> that</font>

364
00:16:21,459 --> 00:16:28,689
<font color="#CCCCCC">the information</font><font color="#E5E5E5"> is correct</font><font color="#CCCCCC"> and if it's</font>

365
00:16:23,529 --> 00:16:30,579
correct it is executed on<font color="#CCCCCC"> the slave just</font>

366
00:16:28,689 --> 00:16:32,289
<font color="#E5E5E5">if we go back to the dump or the</font>

367
00:16:30,579 --> 00:16:34,508
sniffing that we saw earlier and then<font color="#CCCCCC"> we</font>

368
00:16:32,289 --> 00:16:36,309
can<font color="#E5E5E5"> now understand what were the</font><font color="#CCCCCC"> things</font>

369
00:16:34,509 --> 00:16:38,409
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we're seeing</font><font color="#CCCCCC"> so at the beginning we</font>

370
00:16:36,309 --> 00:16:40,779
had the probing and the header that<font color="#CCCCCC"> is</font>

371
00:16:38,409 --> 00:16:42,309
sent to the<font color="#CCCCCC"> Gameboy to the slave</font><font color="#E5E5E5"> then we</font>

372
00:16:40,779 --> 00:16:44,979
have the encryption key<font color="#E5E5E5"> and the main</font>

373
00:16:42,309 --> 00:16:47,108
data<font color="#E5E5E5"> and finally there is the checksum</font>

374
00:16:44,979 --> 00:16:48,939
the last the last<font color="#CCCCCC"> transmission that we</font>

375
00:16:47,109 --> 00:16:50,350
see is the<font color="#E5E5E5"> checksum sent from the master</font>

376
00:16:48,939 --> 00:16:52,748
to<font color="#CCCCCC"> the slave our front slave to the</font>

377
00:16:50,350 --> 00:16:57,489
master<font color="#E5E5E5"> they match exactly</font><font color="#CCCCCC"> and the code</font>

378
00:16:52,749 --> 00:16:59,979
is<font color="#CCCCCC"> executed ok great so we have layer 1</font>

379
00:16:57,489 --> 00:17:01,479
and we<font color="#E5E5E5"> have the multi boot protocol so</font>

380
00:16:59,979 --> 00:17:03,970
what we would<font color="#CCCCCC"> like to do now</font><font color="#E5E5E5"> is to</font>

381
00:17:01,479 --> 00:17:06,009
<font color="#CCCCCC">change the role of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> arduino from</font>

382
00:17:03,970 --> 00:17:08,679
being a sniffer to being actually active

383
00:17:06,009 --> 00:17:10,919
<font color="#E5E5E5">in the circuit and be the the device</font>

384
00:17:08,679 --> 00:17:12,439
that communicates with the<font color="#E5E5E5"> game boy</font><font color="#CCCCCC"> i</font>

385
00:17:10,919 --> 00:17:14,269
would<font color="#E5E5E5"> like to</font>

386
00:17:12,439 --> 00:17:16,789
connect the<font color="#CCCCCC"> gameboy</font><font color="#E5E5E5"> directly to the PC</font>

387
00:17:14,269 --> 00:17:20,059
but<font color="#E5E5E5"> there is no interface at the moment</font>

388
00:17:16,789 --> 00:17:23,059
that<font color="#E5E5E5"> can do that and I'll and we'll talk</font>

389
00:17:20,059 --> 00:17:25,220
about this in<font color="#CCCCCC"> a few minutes</font><font color="#E5E5E5"> the thing is</font>

390
00:17:23,059 --> 00:17:27,709
<font color="#E5E5E5">that the Arduino needs to get the</font>

391
00:17:25,220 --> 00:17:29,899
information from<font color="#E5E5E5"> the PC and send it</font><font color="#CCCCCC"> to</font>

392
00:17:27,709 --> 00:17:32,539
the<font color="#E5E5E5"> game boy in this special serialize</font>

393
00:17:29,899 --> 00:17:37,250
format that<font color="#E5E5E5"> it has that sends its 16</font>

394
00:17:32,539 --> 00:17:39,470
bits of information so<font color="#E5E5E5"> again the Arduino</font>

395
00:17:37,250 --> 00:17:42,169
<font color="#E5E5E5">is very good for this task</font><font color="#CCCCCC"> it's a very</font>

396
00:17:39,470 --> 00:17:45,049
simple<font color="#E5E5E5"> the development board that is it</font>

397
00:17:42,169 --> 00:17:46,970
has<font color="#E5E5E5"> GPIO that can interact</font><font color="#CCCCCC"> directly with</font>

398
00:17:45,049 --> 00:17:49,100
the<font color="#CCCCCC"> game boy</font><font color="#E5E5E5"> it has these built-in</font>

399
00:17:46,970 --> 00:17:52,190
timers and it's very easy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use it</font>

400
00:17:49,100 --> 00:17:54,259
specifically<font color="#CCCCCC"> for this task so its main</font>

401
00:17:52,190 --> 00:17:56,870
<font color="#CCCCCC">purpose is to wait for two</font><font color="#E5E5E5"> bytes that</font>

402
00:17:54,259 --> 00:17:58,549
<font color="#CCCCCC">will come from the</font><font color="#E5E5E5"> PC it will transfer</font>

403
00:17:56,870 --> 00:18:01,459
these bytes to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> game boy get the</font>

404
00:17:58,549 --> 00:18:06,440
result<font color="#E5E5E5"> and send it back</font><font color="#CCCCCC"> to the PC that's</font>

405
00:18:01,460 --> 00:18:08,350
all and just<font color="#E5E5E5"> as a small anecdote this is</font>

406
00:18:06,440 --> 00:18:11,840
the original<font color="#E5E5E5"> circuit that I use for this</font>

407
00:18:08,350 --> 00:18:15,379
<font color="#E5E5E5">it's a it's a circuit proposed by a guy</font>

408
00:18:11,840 --> 00:18:19,340
named Miguel<font color="#CCCCCC"> aho</font><font color="#E5E5E5"> it's based on microchip</font>

409
00:18:15,379 --> 00:18:23,509
a<font color="#E5E5E5"> 16</font><font color="#CCCCCC"> f-84</font><font color="#E5E5E5"> which was also very fun to</font>

410
00:18:19,340 --> 00:18:25,639
work with<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> order to work with it</font>

411
00:18:23,509 --> 00:18:27,230
you<font color="#CCCCCC"> have to program</font><font color="#E5E5E5"> it so apparently</font>

412
00:18:25,639 --> 00:18:28,699
programming is<font color="#CCCCCC"> not so trivial you have</font>

413
00:18:27,230 --> 00:18:30,769
to build like your own your own

414
00:18:28,700 --> 00:18:32,559
programmer for it or buy it so at the

415
00:18:30,769 --> 00:18:34,820
time was I was<font color="#E5E5E5"> very in the mode of</font>

416
00:18:32,559 --> 00:18:40,580
<font color="#CCCCCC">do-it-yourself and everything like</font><font color="#E5E5E5"> I did</font>

417
00:18:34,820 --> 00:18:43,070
to do<font color="#E5E5E5"> my own and this was the no part</font>

418
00:18:40,580 --> 00:18:46,340
speak programmer in<font color="#CCCCCC"> parenthesis</font><font color="#E5E5E5"> almost</font>

419
00:18:43,070 --> 00:18:48,769
no part speak programmer and when I was

420
00:18:46,340 --> 00:18:51,110
building<font color="#CCCCCC"> it then I came across some some</font>

421
00:18:48,769 --> 00:18:52,940
problems and<font color="#E5E5E5"> I didn't know it was like</font>

422
00:18:51,110 --> 00:18:55,129
<font color="#CCCCCC">my first</font><font color="#E5E5E5"> time doing these electronics</font>

423
00:18:52,940 --> 00:18:57,559
and all that and I and I<font color="#E5E5E5"> went to the</font>

424
00:18:55,129 --> 00:18:58,428
forms of microchip at the time<font color="#E5E5E5"> I don't</font>

425
00:18:57,559 --> 00:19:00,830
<font color="#E5E5E5">know if</font><font color="#CCCCCC"> Stack</font><font color="#E5E5E5"> Exchange</font>

426
00:18:58,429 --> 00:19:04,220
exists or<font color="#CCCCCC"> not but it</font><font color="#E5E5E5"> was definitely not</font>

427
00:19:00,830 --> 00:19:05,570
as common as today and I found I<font color="#CCCCCC"> found</font>

428
00:19:04,220 --> 00:19:07,879
some guy who helped me build this

429
00:19:05,570 --> 00:19:09,860
circuit<font color="#E5E5E5"> and build like more secure that</font>

430
00:19:07,879 --> 00:19:11,299
I built<font color="#CCCCCC"> after his name is Keith</font><font color="#E5E5E5"> and he</font>

431
00:19:09,860 --> 00:19:17,240
helped<font color="#E5E5E5"> me a lot and we</font><font color="#CCCCCC"> are actually</font><font color="#E5E5E5"> in</font>

432
00:19:11,299 --> 00:19:18,918
contact<font color="#E5E5E5"> to this day great so now we have</font>

433
00:19:17,240 --> 00:19:22,780
the<font color="#E5E5E5"> Arduino circuit that's connecting</font>

434
00:19:18,919 --> 00:19:24,940
the PC to<font color="#CCCCCC"> the Gameboy</font>

435
00:19:22,780 --> 00:19:26,560
and we know the<font color="#CCCCCC"> multiboot protocol and</font>

436
00:19:24,940 --> 00:19:29,530
we have<font color="#CCCCCC"> everything in place so now we</font>

437
00:19:26,560 --> 00:19:35,100
can<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to load our own code</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the game</font>

438
00:19:29,530 --> 00:19:35,100
<font color="#CCCCCC">boy</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> preparation for</font><font color="#E5E5E5"> the next steps</font>

439
00:19:41,720 --> 00:19:45,559
okay so in this demonstration what I

440
00:19:43,820 --> 00:19:47,750
have is a<font color="#E5E5E5"> game boy with no game pack</font>

441
00:19:45,559 --> 00:19:54,799
inserted<font color="#E5E5E5"> it's connected to the circuit</font>

442
00:19:47,750 --> 00:19:59,539
that<font color="#E5E5E5"> I have here and I'm going to load</font>

443
00:19:54,799 --> 00:20:01,908
<font color="#E5E5E5">code from my PC</font><font color="#CCCCCC"> to the game boy</font><font color="#E5E5E5"> now you</font>

444
00:19:59,539 --> 00:20:03,590
might see that what I have here is<font color="#E5E5E5"> not</font>

445
00:20:01,909 --> 00:20:06,799
enough do<font color="#CCCCCC"> we know but rather a Raspberry</font>

446
00:20:03,590 --> 00:20:09,309
<font color="#CCCCCC">Pi</font><font color="#E5E5E5"> and this will be very important in a</font>

447
00:20:06,799 --> 00:20:09,309
few minutes

448
00:20:41,260 --> 00:20:49,908
<font color="#E5E5E5">okay jumps a little</font><font color="#CCCCCC"> bit but what we're</font>

449
00:20:43,669 --> 00:20:53,390
seeing<font color="#E5E5E5"> I'm trying to run to load this</font>

450
00:20:49,909 --> 00:20:54,500
code<font color="#E5E5E5"> the first two lines are the the</font>

451
00:20:53,390 --> 00:20:57,020
<font color="#E5E5E5">moment that it tries to see if the</font>

452
00:20:54,500 --> 00:21:00,649
<font color="#CCCCCC">Gameboy exists</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> there or not this is</font>

453
00:20:57,020 --> 00:21:03,020
<font color="#E5E5E5">where he sends 62o to the header data is</font>

454
00:21:00,649 --> 00:21:05,678
sent<font color="#E5E5E5"> though it doesn't look</font><font color="#CCCCCC"> like that so</font>

455
00:21:03,020 --> 00:21:05,679
I'll<font color="#E5E5E5"> run it again</font>

456
00:21:29,100 --> 00:21:32,668
<font color="#E5E5E5">okay for every demonstration have a</font>

457
00:21:30,990 --> 00:21:36,740
<font color="#E5E5E5">backup video so don't worry too</font><font color="#CCCCCC"> much</font>

458
00:21:32,669 --> 00:21:36,740
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it but we will try to make</font><font color="#CCCCCC"> it work</font>

459
00:22:03,920 --> 00:22:10,640
excellent so the header was<font color="#CCCCCC"> LED loaded</font>

460
00:22:08,180 --> 00:22:12,560
correctly<font color="#E5E5E5"> and now the main data is sent</font>

461
00:22:10,640 --> 00:22:21,730
<font color="#E5E5E5">the problem was that I forgot</font><font color="#CCCCCC"> to</font>

462
00:22:12,560 --> 00:22:26,649
disconnect the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> Gameboy so okay</font>

463
00:22:21,730 --> 00:22:29,260
[Applause]

464
00:22:26,650 --> 00:22:30,970
yeah so it seemed as if I loaded<font color="#E5E5E5"> lots of</font>

465
00:22:29,260 --> 00:22:33,610
coal which is<font color="#E5E5E5"> true because the</font><font color="#CCCCCC"> tool</font>

466
00:22:30,970 --> 00:22:37,020
<font color="#CCCCCC">chain</font><font color="#E5E5E5"> puts in lots of stuff</font><font color="#CCCCCC"> and but this</font>

467
00:22:33,610 --> 00:22:37,020
<font color="#E5E5E5">is this is what we got</font>

468
00:22:50,250 --> 00:22:54,350
<font color="#E5E5E5">okay back to the presentation please</font>

469
00:22:55,760 --> 00:22:59,870
excellent so now<font color="#E5E5E5"> we have the multiple</font>

470
00:22:57,740 --> 00:23:02,090
<font color="#E5E5E5">actually working so</font><font color="#CCCCCC"> we can load our own</font>

471
00:22:59,870 --> 00:23:05,689
code<font color="#CCCCCC"> to the Gameboy execute it and use</font>

472
00:23:02,090 --> 00:23:08,179
it<font color="#CCCCCC"> whatever need that we</font><font color="#E5E5E5"> have so now</font>

473
00:23:05,690 --> 00:23:09,950
let's go back<font color="#CCCCCC"> to emulation</font><font color="#E5E5E5"> so now so</font>

474
00:23:08,180 --> 00:23:13,480
this<font color="#CCCCCC"> is visual boy advance again it's</font>

475
00:23:09,950 --> 00:23:17,390
running<font color="#E5E5E5"> Rayman</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> a very good</font><font color="#E5E5E5"> game</font>

476
00:23:13,480 --> 00:23:18,980
and this is where we want to to<font color="#E5E5E5"> put our</font>

477
00:23:17,390 --> 00:23:21,680
code in we want to integrate<font color="#E5E5E5"> this</font>

478
00:23:18,980 --> 00:23:23,840
circuit into the<font color="#CCCCCC"> emulator to allow us</font><font color="#E5E5E5"> to</font>

479
00:23:21,680 --> 00:23:27,020
play these multiplayer games<font color="#E5E5E5"> with the</font>

480
00:23:23,840 --> 00:23:29,360
actual<font color="#E5E5E5"> game boy so an emulator is a</font>

481
00:23:27,020 --> 00:23:31,550
system<font color="#CCCCCC"> that allows one system the</font><font color="#E5E5E5"> host</font>

482
00:23:29,360 --> 00:23:34,699
system<font color="#CCCCCC"> in our case</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> PC</font><font color="#E5E5E5"> to run another</font>

483
00:23:31,550 --> 00:23:36,379
<font color="#E5E5E5">system which is the game boy so it has</font>

484
00:23:34,700 --> 00:23:38,330
to<font color="#CCCCCC"> somehow simulate the entire</font>

485
00:23:36,380 --> 00:23:40,100
environment that the game we expect to

486
00:23:38,330 --> 00:23:45,560
have<font color="#E5E5E5"> whether the game boy games expect</font>

487
00:23:40,100 --> 00:23:50,000
to have on the PC<font color="#E5E5E5"> and this is what</font>

488
00:23:45,560 --> 00:23:52,760
visual boy advance does and it has a

489
00:23:50,000 --> 00:23:55,550
main loop<font color="#E5E5E5"> that is the one that's</font>

490
00:23:52,760 --> 00:23:57,860
responsible to simulate the entire<font color="#CCCCCC"> the</font>

491
00:23:55,550 --> 00:24:01,070
<font color="#CCCCCC">entire action</font><font color="#E5E5E5"> of the of the system of</font>

492
00:23:57,860 --> 00:24:03,260
the game boy so in this loop it has to

493
00:24:01,070 --> 00:24:04,669
simulate the CPU or<font color="#E5E5E5"> the opcodes running</font>

494
00:24:03,260 --> 00:24:07,129
and changing the<font color="#E5E5E5"> internal state of the</font>

495
00:24:04,670 --> 00:24:10,790
<font color="#E5E5E5">CPU it has to simulate the accesses to</font>

496
00:24:07,130 --> 00:24:13,550
<font color="#E5E5E5">the memory either</font><font color="#CCCCCC"> reads or writes</font><font color="#E5E5E5"> it has</font>

497
00:24:10,790 --> 00:24:15,320
to to take<font color="#CCCCCC"> care of reads and writes to</font>

498
00:24:13,550 --> 00:24:17,450
<font color="#E5E5E5">the i/o registers which means that if</font>

499
00:24:15,320 --> 00:24:19,700
the<font color="#E5E5E5"> program writes to some register and</font>

500
00:24:17,450 --> 00:24:21,860
expect something<font color="#CCCCCC"> to happen for example</font>

501
00:24:19,700 --> 00:24:23,420
something<font color="#E5E5E5"> to appear</font><font color="#CCCCCC"> on-screen or to</font><font color="#E5E5E5"> get</font>

502
00:24:21,860 --> 00:24:26,629
the<font color="#E5E5E5"> state of the currently pressed keys</font>

503
00:24:23,420 --> 00:24:29,300
<font color="#E5E5E5">then the emulator has to also simulate</font>

504
00:24:26,630 --> 00:24:32,090
this the<font color="#E5E5E5"> timers is also something that</font>

505
00:24:29,300 --> 00:24:34,610
<font color="#E5E5E5">is</font><font color="#CCCCCC"> very important in in an emulator and</font>

506
00:24:32,090 --> 00:24:36,530
<font color="#E5E5E5">in general the emulator is responsible</font>

507
00:24:34,610 --> 00:24:39,740
<font color="#CCCCCC">for keeping the timing of it the</font><font color="#E5E5E5"> entire</font>

508
00:24:36,530 --> 00:24:42,080
system consistent<font color="#CCCCCC"> ok so it has to make</font>

509
00:24:39,740 --> 00:24:44,590
the game think as if the time passes in

510
00:24:42,080 --> 00:24:47,540
the in the way it expects it<font color="#CCCCCC"> to pass</font>

511
00:24:44,590 --> 00:24:49,459
after the emulator finishes the

512
00:24:47,540 --> 00:24:51,620
simulation or<font color="#E5E5E5"> the emulation</font><font color="#CCCCCC"> of what it</font>

513
00:24:49,460 --> 00:24:54,170
does it then produces<font color="#CCCCCC"> the sound</font><font color="#E5E5E5"> in the</font>

514
00:24:51,620 --> 00:24:56,620
<font color="#CCCCCC">video</font><font color="#E5E5E5"> to the player on the whole system</font>

515
00:24:54,170 --> 00:24:59,990
on<font color="#E5E5E5"> the PC so you can get the screen back</font>

516
00:24:56,620 --> 00:25:02,659
so what we would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to do is to put</font>

517
00:24:59,990 --> 00:25:05,270
some<font color="#E5E5E5"> code in the in this part that will</font>

518
00:25:02,660 --> 00:25:07,340
make the link possible<font color="#E5E5E5"> the link with the</font>

519
00:25:05,270 --> 00:25:09,680
real<font color="#E5E5E5"> game</font><font color="#CCCCCC"> boy possible so one place that</font>

520
00:25:07,340 --> 00:25:12,169
<font color="#E5E5E5">we need to add our functions is</font>

521
00:25:09,680 --> 00:25:14,180
the handling<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> aisle registers</font><font color="#E5E5E5"> so</font>

522
00:25:12,170 --> 00:25:17,000
there<font color="#E5E5E5"> are a couple of our registers that</font>

523
00:25:14,180 --> 00:25:20,300
<font color="#E5E5E5">are important for</font><font color="#CCCCCC"> the initiation of</font><font color="#E5E5E5"> the</font>

524
00:25:17,000 --> 00:25:22,280
communication<font color="#E5E5E5"> and to check its status so</font>

525
00:25:20,300 --> 00:25:23,990
this is the<font color="#E5E5E5"> first place</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will put</font>

526
00:25:22,280 --> 00:25:25,580
<font color="#CCCCCC">our code and the second one is the</font>

527
00:25:23,990 --> 00:25:27,740
update function which is the<font color="#CCCCCC"> function</font>

528
00:25:25,580 --> 00:25:29,840
that<font color="#E5E5E5"> runs all the</font><font color="#CCCCCC"> time and checks</font>

529
00:25:27,740 --> 00:25:33,080
whether<font color="#E5E5E5"> the transmission is over yet and</font>

530
00:25:29,840 --> 00:25:35,000
if it's<font color="#E5E5E5"> over then it update update the</font>

531
00:25:33,080 --> 00:25:36,889
necessary registers or raises<font color="#CCCCCC"> an</font>

532
00:25:35,000 --> 00:25:43,400
<font color="#E5E5E5">interrupt or whatever happens actually</font>

533
00:25:36,890 --> 00:25:45,500
<font color="#CCCCCC">in the hardware so since we</font><font color="#E5E5E5"> have the</font>

534
00:25:43,400 --> 00:25:47,600
multiple protocol and we can run<font color="#E5E5E5"> our</font><font color="#CCCCCC"> own</font>

535
00:25:45,500 --> 00:25:50,780
code<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> game boy okay</font><font color="#E5E5E5"> now we can</font><font color="#CCCCCC"> now</font>

536
00:25:47,600 --> 00:25:53,419
<font color="#CCCCCC">use it to better write the emulator or</font>

537
00:25:50,780 --> 00:25:56,149
<font color="#E5E5E5">to make it</font><font color="#CCCCCC"> very accurate</font><font color="#E5E5E5"> so we can write</font>

538
00:25:53,420 --> 00:25:59,060
<font color="#E5E5E5">custom and this is I think that I wrote</font>

539
00:25:56,150 --> 00:26:00,950
for<font color="#CCCCCC"> this time not</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> last time we</font>

540
00:25:59,060 --> 00:26:03,260
can<font color="#E5E5E5"> write</font><font color="#CCCCCC"> a custom testing software that</font>

541
00:26:00,950 --> 00:26:05,600
will run on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Game Boy</font><font color="#E5E5E5"> itself and it</font>

542
00:26:03,260 --> 00:26:08,629
will<font color="#E5E5E5"> run on the emulator</font><font color="#CCCCCC"> and allow us</font><font color="#E5E5E5"> to</font>

543
00:26:05,600 --> 00:26:10,939
compare what happens in the real system

544
00:26:08,630 --> 00:26:13,070
and in the emulator<font color="#CCCCCC"> and our goal is to</font>

545
00:26:10,940 --> 00:26:16,010
make the emulator<font color="#E5E5E5"> as close as</font><font color="#CCCCCC"> possible</font>

546
00:26:13,070 --> 00:26:18,919
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> real system</font><font color="#CCCCCC"> okay I good emulator</font>

547
00:26:16,010 --> 00:26:20,870
does exactly that so a couple<font color="#E5E5E5"> of things</font>

548
00:26:18,920 --> 00:26:23,060
<font color="#CCCCCC">that we can that we can</font><font color="#E5E5E5"> test is for</font>

549
00:26:20,870 --> 00:26:25,310
example<font color="#E5E5E5"> the register state or how does</font>

550
00:26:23,060 --> 00:26:28,149
the game sees the environment of the

551
00:26:25,310 --> 00:26:30,679
<font color="#E5E5E5">game boy while it performs the</font>

552
00:26:28,150 --> 00:26:33,020
transmissions<font color="#E5E5E5"> another thing that is very</font>

553
00:26:30,680 --> 00:26:35,180
important is<font color="#E5E5E5"> the timing</font><font color="#CCCCCC"> okay because</font><font color="#E5E5E5"> the</font>

554
00:26:33,020 --> 00:26:37,970
timing<font color="#E5E5E5"> takes some time so if the game</font>

555
00:26:35,180 --> 00:26:40,070
<font color="#E5E5E5">expect the time to occur to take one</font>

556
00:26:37,970 --> 00:26:42,650
millisecond or something around<font color="#E5E5E5"> this</font>

557
00:26:40,070 --> 00:26:45,620
<font color="#E5E5E5">area then it should take one millisecond</font>

558
00:26:42,650 --> 00:26:48,980
<font color="#E5E5E5">we don't want to to cause it to think as</font>

559
00:26:45,620 --> 00:26:53,419
<font color="#E5E5E5">if the transmission happened faster than</font>

560
00:26:48,980 --> 00:26:55,460
it<font color="#CCCCCC"> should or slower okay so we</font>

561
00:26:53,420 --> 00:26:57,470
<font color="#E5E5E5">implemented everything in the emulator</font>

562
00:26:55,460 --> 00:26:59,030
we have our Arduino circuit everything

563
00:26:57,470 --> 00:27:02,060
looks good we've tested it everything

564
00:26:59,030 --> 00:27:05,990
works fine<font color="#E5E5E5"> and now we can try some real</font>

565
00:27:02,060 --> 00:27:10,550
<font color="#E5E5E5">games and see what's happening so one</font>

566
00:27:05,990 --> 00:27:13,040
but lots of<font color="#E5E5E5"> link errors and now I think</font>

567
00:27:10,550 --> 00:27:15,020
<font color="#CCCCCC">okay but everything seems okay the</font>

568
00:27:13,040 --> 00:27:18,260
hardware<font color="#E5E5E5"> do we know is</font><font color="#CCCCCC"> okay the data is</font>

569
00:27:15,020 --> 00:27:20,000
<font color="#E5E5E5">transferred to the</font><font color="#CCCCCC"> game boy correctly we</font>

570
00:27:18,260 --> 00:27:22,190
loaded lots of multiple code and it

571
00:27:20,000 --> 00:27:23,370
works no problem<font color="#E5E5E5"> here we've also tested</font>

572
00:27:22,190 --> 00:27:25,410
the emulator<font color="#E5E5E5"> and</font>

573
00:27:23,370 --> 00:27:28,050
works it looks<font color="#E5E5E5"> as if the transfer the</font>

574
00:27:25,410 --> 00:27:30,840
data<font color="#E5E5E5"> is transferred correctly</font><font color="#CCCCCC"> so what is</font>

575
00:27:28,050 --> 00:27:35,010
the<font color="#E5E5E5"> problem it now begins the</font><font color="#CCCCCC"> story</font><font color="#E5E5E5"> of</font>

576
00:27:30,840 --> 00:27:37,320
in the state that<font color="#E5E5E5"> I was at two weeks ago</font>

577
00:27:35,010 --> 00:27:39,210
or<font color="#CCCCCC"> one week and a half ago I was as I</font>

578
00:27:37,320 --> 00:27:41,220
was<font color="#E5E5E5"> preparing for this conference I took</font>

579
00:27:39,210 --> 00:27:43,320
out like<font color="#E5E5E5"> everything and I worked for</font>

580
00:27:41,220 --> 00:27:45,210
<font color="#CCCCCC">several weeks</font><font color="#E5E5E5"> on the previous stages and</font>

581
00:27:43,320 --> 00:27:48,030
then I got to this point<font color="#E5E5E5"> and suddenly</font>

582
00:27:45,210 --> 00:27:52,020
nothing<font color="#E5E5E5"> works</font><font color="#CCCCCC"> and this is the main</font><font color="#E5E5E5"> thing</font>

583
00:27:48,030 --> 00:27:56,960
<font color="#CCCCCC">that I want to show here so it turns out</font>

584
00:27:52,020 --> 00:28:00,090
<font color="#E5E5E5">that the main problem is latency and</font>

585
00:27:56,960 --> 00:28:03,840
there are<font color="#E5E5E5"> several links in this chain</font>

586
00:28:00,090 --> 00:28:05,730
<font color="#CCCCCC">that</font><font color="#E5E5E5"> cause latency the Arduino is in</font>

587
00:28:03,840 --> 00:28:08,189
<font color="#E5E5E5">this case</font><font color="#CCCCCC"> to blame</font><font color="#E5E5E5"> because it uses the</font>

588
00:28:05,730 --> 00:28:10,380
serial over<font color="#E5E5E5"> USB interface which adds</font>

589
00:28:08,190 --> 00:28:12,030
like<font color="#E5E5E5"> several delays so one is the USB</font>

590
00:28:10,380 --> 00:28:14,400
architecture itself<font color="#E5E5E5"> which is like this</font>

591
00:28:12,030 --> 00:28:17,550
<font color="#E5E5E5">master slave that uses polling and it</font>

592
00:28:14,400 --> 00:28:19,950
may add<font color="#E5E5E5"> one millisecond</font><font color="#CCCCCC"> of delay</font><font color="#E5E5E5"> just</font>

593
00:28:17,550 --> 00:28:22,950
for communication then there<font color="#E5E5E5"> is the</font>

594
00:28:19,950 --> 00:28:24,300
extra serial communication delays and

595
00:28:22,950 --> 00:28:26,100
then there is some packaging some a

596
00:28:24,300 --> 00:28:29,310
buffering done by the operating<font color="#CCCCCC"> system</font>

597
00:28:26,100 --> 00:28:31,800
<font color="#CCCCCC">which add</font><font color="#E5E5E5"> several milliseconds of delay</font>

598
00:28:29,310 --> 00:28:34,230
<font color="#E5E5E5">to the transfer specifically to the</font>

599
00:28:31,800 --> 00:28:35,610
beginning of<font color="#E5E5E5"> the transfer so we don't</font>

600
00:28:34,230 --> 00:28:38,370
have<font color="#CCCCCC"> a problem with</font><font color="#E5E5E5"> throughputs</font>

601
00:28:35,610 --> 00:28:39,959
just with how long<font color="#CCCCCC"> it takes the data to</font>

602
00:28:38,370 --> 00:28:41,879
be sent<font color="#E5E5E5"> to the game where from the</font>

603
00:28:39,960 --> 00:28:47,610
<font color="#E5E5E5">moment the game the game intended it to</font>

604
00:28:41,880 --> 00:28:48,930
<font color="#E5E5E5">be sent so this fails and this this</font>

605
00:28:47,610 --> 00:28:52,500
causes the communication with a<font color="#E5E5E5"> game boy</font>

606
00:28:48,930 --> 00:28:54,180
to fail<font color="#E5E5E5"> and now an interesting</font><font color="#CCCCCC"> thing is</font>

607
00:28:52,500 --> 00:28:56,160
that<font color="#E5E5E5"> at the time I used the parallel</font>

608
00:28:54,180 --> 00:29:00,150
port<font color="#E5E5E5"> and the parallel port gave me</font>

609
00:28:56,160 --> 00:29:03,750
direct GPIO access from the<font color="#E5E5E5"> PC</font><font color="#CCCCCC"> ok today</font>

610
00:29:00,150 --> 00:29:07,830
we don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> this anymore</font><font color="#E5E5E5"> so what can</font>

611
00:29:03,750 --> 00:29:10,830
<font color="#CCCCCC">we do so with help of some very talented</font>

612
00:29:07,830 --> 00:29:13,080
guys for my work<font color="#E5E5E5"> we went to search for</font>

613
00:29:10,830 --> 00:29:15,300
other<font color="#E5E5E5"> solutions</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we looked for</font>

614
00:29:13,080 --> 00:29:18,899
<font color="#CCCCCC">different boards</font><font color="#E5E5E5"> maybe teensy or in fact</font>

615
00:29:15,300 --> 00:29:22,710
<font color="#CCCCCC">m5 stack in</font><font color="#E5E5E5"> order to</font><font color="#CCCCCC"> eliminate this</font>

616
00:29:18,900 --> 00:29:24,540
delay<font color="#E5E5E5"> actually there was no much better</font>

617
00:29:22,710 --> 00:29:26,820
<font color="#CCCCCC">solution all of them somehow have to</font>

618
00:29:24,540 --> 00:29:29,310
<font color="#CCCCCC">communicate</font><font color="#E5E5E5"> with the PC either over USB</font>

619
00:29:26,820 --> 00:29:32,429
or over the<font color="#CCCCCC"> ethernet whatever so there's</font>

620
00:29:29,310 --> 00:29:34,050
no way to get<font color="#CCCCCC"> rid of this so</font><font color="#E5E5E5"> instead the</font>

621
00:29:32,430 --> 00:29:36,020
idea<font color="#CCCCCC"> that</font><font color="#E5E5E5"> came up was to compile</font>

622
00:29:34,050 --> 00:29:38,570
<font color="#CCCCCC">everything on the</font><font color="#E5E5E5"> raspberry on</font>

623
00:29:36,020 --> 00:29:44,720
Raspberry Pi<font color="#E5E5E5"> and run it on a Raspberry</font>

624
00:29:38,570 --> 00:29:47,540
Pi so the Raspberry Pi<font color="#E5E5E5"> is much more</font>

625
00:29:44,720 --> 00:29:50,630
powerful<font color="#E5E5E5"> than</font><font color="#CCCCCC"> Arduino it is it has a 1.6</font>

626
00:29:47,540 --> 00:29:54,560
<font color="#E5E5E5">gigahertz processor it's an ARM</font>

627
00:29:50,630 --> 00:29:56,600
processor it has<font color="#CCCCCC"> the GPIO lines that</font>

628
00:29:54,560 --> 00:29:58,460
give us again direct<font color="#E5E5E5"> communication with</font>

629
00:29:56,600 --> 00:30:02,149
<font color="#E5E5E5">the digital lines of the gameplay which</font>

630
00:29:58,460 --> 00:30:04,970
is great<font color="#E5E5E5"> in compiling on the Raspberry</font>

631
00:30:02,150 --> 00:30:07,130
Pi works very easily<font color="#CCCCCC"> it's very good</font><font color="#E5E5E5"> so</font>

632
00:30:04,970 --> 00:30:08,900
we<font color="#CCCCCC"> just adapted the</font><font color="#E5E5E5"> Arduino code to it</font>

633
00:30:07,130 --> 00:30:10,640
<font color="#E5E5E5">implement it again everything that we</font>

634
00:30:08,900 --> 00:30:12,350
did with the multi boot protocol and the

635
00:30:10,640 --> 00:30:14,720
code<font color="#E5E5E5"> that we have and the code that</font><font color="#CCCCCC"> I've</font>

636
00:30:12,350 --> 00:30:16,939
<font color="#CCCCCC">showed you earlier we've integrated the</font>

637
00:30:14,720 --> 00:30:20,420
link code into<font color="#CCCCCC"> the emulator</font><font color="#E5E5E5"> on the</font>

638
00:30:16,940 --> 00:30:23,240
Raspberry Pi compiled it<font color="#E5E5E5"> and things got</font>

639
00:30:20,420 --> 00:30:25,790
<font color="#CCCCCC">better so the delay</font><font color="#E5E5E5"> dropped to virtually</font>

640
00:30:23,240 --> 00:30:28,190
non existing from the moment of<font color="#CCCCCC"> the game</font>

641
00:30:25,790 --> 00:30:30,980
<font color="#CCCCCC">writes to the i/o registers that</font><font color="#E5E5E5"> starts</font>

642
00:30:28,190 --> 00:30:35,840
the transmission<font color="#E5E5E5"> the data is sent</font><font color="#CCCCCC"> over</font>

643
00:30:30,980 --> 00:30:37,900
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> game boy then we</font><font color="#E5E5E5"> did a couple</font>

644
00:30:35,840 --> 00:30:42,679
more<font color="#CCCCCC"> of like these micro optimizations</font>

645
00:30:37,900 --> 00:30:45,440
<font color="#E5E5E5">which is a task set to dedicate a CPU</font>

646
00:30:42,680 --> 00:30:47,240
core to the emulator itself some

647
00:30:45,440 --> 00:30:49,550
<font color="#E5E5E5">improved timing which means that we make</font>

648
00:30:47,240 --> 00:30:52,130
<font color="#CCCCCC">sure that</font><font color="#E5E5E5"> the timings are not too fast</font>

649
00:30:49,550 --> 00:30:55,430
or too<font color="#CCCCCC"> slow</font><font color="#E5E5E5"> frame skipping frame</font>

650
00:30:52,130 --> 00:30:58,280
skipping and throttling<font color="#CCCCCC"> are terms that</font>

651
00:30:55,430 --> 00:31:00,650
used a lot in emulation it means that we

652
00:30:58,280 --> 00:31:05,240
can render only<font color="#E5E5E5"> the second third fourth</font>

653
00:31:00,650 --> 00:31:07,220
frame etc<font color="#CCCCCC"> so we can not make the system</font>

654
00:31:05,240 --> 00:31:08,900
too busy<font color="#E5E5E5"> or throttling which means to</font>

655
00:31:07,220 --> 00:31:11,380
keep<font color="#E5E5E5"> it running at a constant</font><font color="#CCCCCC"> speed</font>

656
00:31:08,900 --> 00:31:18,910
<font color="#E5E5E5">which could be</font><font color="#CCCCCC"> 100 percent or even</font>

657
00:31:11,380 --> 00:31:25,010
<font color="#E5E5E5">faster</font><font color="#CCCCCC"> ok so now</font><font color="#E5E5E5"> now I have a disclaimer</font>

658
00:31:18,910 --> 00:31:27,500
<font color="#E5E5E5">the Raspberry Pi is almost strong enough</font>

659
00:31:25,010 --> 00:31:32,030
to be able<font color="#E5E5E5"> to run everything at the</font>

660
00:31:27,500 --> 00:31:34,550
correct speed<font color="#E5E5E5"> so the trading some games</font>

661
00:31:32,030 --> 00:31:37,520
are tolerant for delays and some games

662
00:31:34,550 --> 00:31:41,899
are not<font color="#CCCCCC"> Pokemon our only</font><font color="#E5E5E5"> like far end of</font>

663
00:31:37,520 --> 00:31:44,030
the tolerance for for delays<font color="#CCCCCC"> and so I</font>

664
00:31:41,900 --> 00:31:46,060
thought what I want to try to trade live

665
00:31:44,030 --> 00:31:48,670
or not<font color="#E5E5E5"> and</font>

666
00:31:46,060 --> 00:31:50,560
so we will<font color="#E5E5E5"> try to trade live one or two</font>

667
00:31:48,670 --> 00:31:52,720
times<font color="#E5E5E5"> if it doesn't work then we'll try</font>

668
00:31:50,560 --> 00:31:55,030
another<font color="#CCCCCC"> game and if it doesn't</font><font color="#E5E5E5"> then we</font>

669
00:31:52,720 --> 00:31:58,800
have I have<font color="#CCCCCC"> a video and if that doesn't</font>

670
00:31:55,030 --> 00:31:58,800
<font color="#CCCCCC">work then we'll go home</font><font color="#E5E5E5"> disappointed</font>

671
00:32:23,050 --> 00:32:26,440
<font color="#E5E5E5">okay excellent</font>

672
00:32:29,290 --> 00:32:34,889
so this is my original<font color="#CCCCCC"> copy</font><font color="#E5E5E5"> of Pokemon</font>

673
00:32:32,350 --> 00:32:34,889
Ruby

674
00:32:42,110 --> 00:32:45,889
this is the<font color="#E5E5E5"> task set on all the</font>

675
00:32:44,179 --> 00:32:53,899
processes that we<font color="#E5E5E5"> we would like</font><font color="#CCCCCC"> to</font>

676
00:32:45,890 --> 00:32:55,909
remove from<font color="#E5E5E5"> our CPU</font><font color="#CCCCCC"> corner and this</font><font color="#E5E5E5"> is</font>

677
00:32:53,899 --> 00:32:59,899
our version sorry<font color="#CCCCCC"> of visual boy advance</font>

678
00:32:55,909 --> 00:33:05,779
<font color="#E5E5E5">the screen</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> small so it will it will</font>

679
00:32:59,899 --> 00:33:08,090
work<font color="#E5E5E5"> faster the thing with the battery a</font>

680
00:33:05,779 --> 00:33:09,919
small anecdote is that<font color="#E5E5E5"> the game pack</font>

681
00:33:08,090 --> 00:33:13,970
<font color="#E5E5E5">itself has a</font><font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> battery to keep</font>

682
00:33:09,919 --> 00:33:15,830
the<font color="#E5E5E5"> real-time</font><font color="#CCCCCC"> clock</font><font color="#E5E5E5"> working and if it</font>

683
00:33:13,970 --> 00:33:18,710
runs<font color="#E5E5E5"> out then you don't have any more</font>

684
00:33:15,830 --> 00:33:21,820
events<font color="#CCCCCC"> that are based on on the time</font><font color="#E5E5E5"> of</font>

685
00:33:18,710 --> 00:33:21,820
<font color="#E5E5E5">the day</font><font color="#CCCCCC"> or the day of the</font><font color="#E5E5E5"> week</font>

686
00:33:32,880 --> 00:33:36,780
<font color="#E5E5E5">okay in the</font><font color="#CCCCCC"> background you can see</font><font color="#E5E5E5"> the</font>

687
00:33:35,280 --> 00:33:39,090
<font color="#E5E5E5">communication this</font><font color="#CCCCCC"> is what the</font><font color="#E5E5E5"> master</font>

688
00:33:36,780 --> 00:33:42,090
<font color="#E5E5E5">sends and this is what the slave sends</font>

689
00:33:39,090 --> 00:33:45,470
back<font color="#E5E5E5"> this is like</font><font color="#CCCCCC"> real-time this is</font>

690
00:33:42,090 --> 00:33:50,360
what's happening<font color="#E5E5E5"> between these two now</font>

691
00:33:45,470 --> 00:33:53,190
as you can<font color="#E5E5E5"> see the right</font><font color="#CCCCCC"> one is lower</font>

692
00:33:50,360 --> 00:33:55,370
which sometimes is okay<font color="#E5E5E5"> and sometimes</font>

693
00:33:53,190 --> 00:33:55,370
not

694
00:34:11,750 --> 00:34:17,770
and this is the link error<font color="#E5E5E5"> who try it</font>

695
00:34:14,418 --> 00:34:17,770
one<font color="#CCCCCC"> more time then</font><font color="#E5E5E5"> we'll change</font>

696
00:34:23,900 --> 00:34:27,160
don't<font color="#E5E5E5"> forget to breathe</font>

697
00:35:21,250 --> 00:35:24,779
<font color="#E5E5E5">okay</font>

698
00:35:22,950 --> 00:35:27,049
<font color="#E5E5E5">we'll try the other one because</font><font color="#CCCCCC"> they do</font>

699
00:35:24,779 --> 00:35:27,049
one

700
00:35:35,130 --> 00:35:43,080
<font color="#E5E5E5">okay what we'll try now is is a Raymond</font>

701
00:35:37,920 --> 00:35:45,930
<font color="#E5E5E5">and here I will use the single pack mode</font>

702
00:35:43,080 --> 00:35:48,779
to load to load the subset of the<font color="#E5E5E5"> game</font>

703
00:35:45,930 --> 00:35:54,000
to the<font color="#CCCCCC"> to my</font><font color="#E5E5E5"> game boy so we can play</font>

704
00:35:48,780 --> 00:35:56,700
<font color="#E5E5E5">between these two</font><font color="#CCCCCC"> okay great so it</font><font color="#E5E5E5"> did</font>

705
00:35:54,000 --> 00:36:00,230
so it did<font color="#CCCCCC"> recognize the</font><font color="#E5E5E5"> other game boy</font>

706
00:35:56,700 --> 00:36:00,230
<font color="#CCCCCC">and data</font><font color="#E5E5E5"> is sent</font>

707
00:36:05,059 --> 00:36:09,559
and this is the actual<font color="#E5E5E5"> game data that is</font>

708
00:36:07,519 --> 00:36:14,049
now sent to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other one it should</font>

709
00:36:09,559 --> 00:36:14,049
<font color="#E5E5E5">allow</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to play a multiplayer game</font>

710
00:36:30,480 --> 00:36:33,890
<font color="#E5E5E5">okay great so</font><font color="#CCCCCC"> I need a volunteer</font><font color="#E5E5E5"> to play</font>

711
00:36:32,820 --> 00:36:36,660
<font color="#E5E5E5">this game</font>

712
00:36:33,890 --> 00:36:37,230
no I'm kidding<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> play with</font>

713
00:36:36,660 --> 00:36:40,980
myself

714
00:36:37,230 --> 00:36:44,730
<font color="#E5E5E5">that's what the idea yeah so these are</font>

715
00:36:40,980 --> 00:36:47,730
these<font color="#CCCCCC"> are exactly</font><font color="#E5E5E5"> is exactly the way it</font>

716
00:36:44,730 --> 00:36:50,370
means<font color="#E5E5E5"> to work</font><font color="#CCCCCC"> it was meant to work with</font>

717
00:36:47,730 --> 00:36:56,070
<font color="#E5E5E5">two actual game boys</font>

718
00:36:50,370 --> 00:36:56,069
[Applause]

719
00:36:56,810 --> 00:37:02,400
so I'm very<font color="#CCCCCC"> sorry for the</font><font color="#E5E5E5"> Pokemon trade</font>

720
00:36:59,340 --> 00:37:06,690
<font color="#CCCCCC">it's an it takes maybe like a couple</font><font color="#E5E5E5"> of</font>

721
00:37:02,400 --> 00:37:09,470
<font color="#E5E5E5">tries to make</font><font color="#CCCCCC"> it work but</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is for</font>

722
00:37:06,690 --> 00:37:14,220
the<font color="#E5E5E5"> future so can we go back</font><font color="#CCCCCC"> to the</font>

723
00:37:09,470 --> 00:37:16,620
slide<font color="#CCCCCC"> okay a number of small takeaways</font>

724
00:37:14,220 --> 00:37:18,390
that I have on this project<font color="#E5E5E5"> at the time</font>

725
00:37:16,620 --> 00:37:20,370
and looking<font color="#CCCCCC"> back</font><font color="#E5E5E5"> I really</font><font color="#CCCCCC"> liked this</font>

726
00:37:18,390 --> 00:37:24,150
project<font color="#E5E5E5"> because it gave</font><font color="#CCCCCC"> me a very wide</font>

727
00:37:20,370 --> 00:37:26,850
view<font color="#E5E5E5"> of an embedded system</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the game</font>

728
00:37:24,150 --> 00:37:28,560
was specifically<font color="#E5E5E5"> it's also very fun to</font>

729
00:37:26,850 --> 00:37:31,230
work with<font color="#CCCCCC"> but it's also a</font><font color="#E5E5E5"> very good</font>

730
00:37:28,560 --> 00:37:34,140
<font color="#CCCCCC">example of an embedded</font><font color="#E5E5E5"> system it is</font>

731
00:37:31,230 --> 00:37:37,530
complex<font color="#CCCCCC"> enough but still</font><font color="#E5E5E5"> simple enough</font>

732
00:37:34,140 --> 00:37:40,049
<font color="#E5E5E5">so you can understand every aspect</font><font color="#CCCCCC"> of it</font>

733
00:37:37,530 --> 00:37:41,790
<font color="#CCCCCC">for example here we can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> the</font>

734
00:37:40,050 --> 00:37:44,460
<font color="#E5E5E5">communication stack so</font><font color="#CCCCCC"> we got</font><font color="#E5E5E5"> from the</font>

735
00:37:41,790 --> 00:37:46,500
very<font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> bit level and you can you</font>

736
00:37:44,460 --> 00:37:49,290
<font color="#CCCCCC">can use our logic analyzer and electric</font>

737
00:37:46,500 --> 00:37:51,270
trolley<font color="#E5E5E5"> and whatever you want to get</font>

738
00:37:49,290 --> 00:37:53,370
this layer<font color="#E5E5E5"> one protocol and then you can</font>

739
00:37:51,270 --> 00:37:55,530
go up<font color="#CCCCCC"> the layers and find a layer 2</font>

740
00:37:53,370 --> 00:37:57,630
protocol the multi boot and<font color="#CCCCCC"> the how the</font>

741
00:37:55,530 --> 00:38:01,980
games<font color="#E5E5E5"> intend to use the link features</font>

742
00:37:57,630 --> 00:38:03,540
and you get to see everything<font color="#CCCCCC"> you do a</font>

743
00:38:01,980 --> 00:38:04,860
lot of<font color="#CCCCCC"> development so you</font><font color="#E5E5E5"> do this</font>

744
00:38:03,540 --> 00:38:07,020
<font color="#CCCCCC">low-level</font><font color="#E5E5E5"> development of</font><font color="#CCCCCC"> high-level</font>

745
00:38:04,860 --> 00:38:09,120
<font color="#E5E5E5">development you get to reverse-engineer</font>

746
00:38:07,020 --> 00:38:12,090
the games of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> BIOS or whatever you</font>

747
00:38:09,120 --> 00:38:14,730
want<font color="#E5E5E5"> in this and you can have a very</font>

748
00:38:12,090 --> 00:38:17,070
<font color="#E5E5E5">very wide view of it it's also a very</font>

749
00:38:14,730 --> 00:38:20,130
<font color="#E5E5E5">cool project</font><font color="#CCCCCC"> and what I liked</font><font color="#E5E5E5"> this time</font>

750
00:38:17,070 --> 00:38:23,130
around it<font color="#E5E5E5"> was that I found new problems</font>

751
00:38:20,130 --> 00:38:25,950
<font color="#E5E5E5">that didn't occur the first time so now</font>

752
00:38:23,130 --> 00:38:27,960
<font color="#E5E5E5">these latencies there are a new thing</font>

753
00:38:25,950 --> 00:38:30,060
<font color="#CCCCCC">that didn't happen because</font><font color="#E5E5E5"> then I had</font>

754
00:38:27,960 --> 00:38:32,130
the parallel port<font color="#E5E5E5"> so another thing that</font>

755
00:38:30,060 --> 00:38:35,210
<font color="#E5E5E5">you can take is that newer is not always</font>

756
00:38:32,130 --> 00:38:35,210
better<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> sure</font>

757
00:38:35,600 --> 00:38:41,549
<font color="#E5E5E5">and this time it had some new challenges</font>

758
00:38:38,280 --> 00:38:43,680
which were which were fun to work on and

759
00:38:41,550 --> 00:38:45,950
still require some<font color="#CCCCCC"> work to make it</font><font color="#E5E5E5"> work</font>

760
00:38:43,680 --> 00:38:45,950
perfectly

761
00:38:46,400 --> 00:38:49,880
wait thank you

762
00:38:50,500 --> 00:38:52,560
you

763
00:38:53,360 --> 00:38:55,749
[Music]

