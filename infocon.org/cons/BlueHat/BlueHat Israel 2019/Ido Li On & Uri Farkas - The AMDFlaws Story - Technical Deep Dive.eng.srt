1
00:00:00,000 --> 00:00:02,729
[Music]

2
00:00:11,630 --> 00:00:21,689
everyone my name is adore<font color="#CCCCCC"> and I was the</font>

3
00:00:15,840 --> 00:00:23,400
CEO of CTS labs during 2017 and 2018<font color="#CCCCCC"> my</font>

4
00:00:21,689 --> 00:00:25,290
friend over<font color="#CCCCCC"> here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> Yuri</font>

5
00:00:23,400 --> 00:00:27,570
he was the head<font color="#CCCCCC"> of research in our</font>

6
00:00:25,290 --> 00:00:29,160
company<font color="#E5E5E5"> during the same time in this</font>

7
00:00:27,570 --> 00:00:31,890
talk<font color="#CCCCCC"> we and I are going</font><font color="#E5E5E5"> to tell you</font>

8
00:00:29,160 --> 00:00:36,989
about extensive research we've done<font color="#E5E5E5"> over</font>

9
00:00:31,890 --> 00:00:40,199
<font color="#CCCCCC">the time period</font><font color="#E5E5E5"> on AMD processors so on</font>

10
00:00:36,989 --> 00:00:42,150
March 2018<font color="#E5E5E5"> we published an advisory</font>

11
00:00:40,199 --> 00:00:45,629
revealing multiple critical<font color="#E5E5E5"> security</font>

12
00:00:42,150 --> 00:00:47,129
vulnerabilities<font color="#E5E5E5"> in AMD processors our</font>

13
00:00:45,629 --> 00:00:49,589
<font color="#E5E5E5">advisor we talked about two sets of</font>

14
00:00:47,129 --> 00:00:56,010
vulnerabilities<font color="#CCCCCC"> coming up to a total</font><font color="#E5E5E5"> of</font>

15
00:00:49,590 --> 00:00:58,320
13 flaws the first set of

16
00:00:56,010 --> 00:01:00,329
vulnerabilities an advisory involved the

17
00:00:58,320 --> 00:01:02,129
AMD chipset<font color="#E5E5E5"> now for those of you who</font>

18
00:01:00,329 --> 00:01:04,379
don't<font color="#E5E5E5"> know the chips it is an i/o</font>

19
00:01:02,129 --> 00:01:07,229
controller that's installed as a

20
00:01:04,379 --> 00:01:09,270
separate chip<font color="#E5E5E5"> on the AMD motherboard and</font>

21
00:01:07,229 --> 00:01:10,890
<font color="#E5E5E5">it houses inside of it multiple</font>

22
00:01:09,270 --> 00:01:13,800
controllers such<font color="#E5E5E5"> as a USB controller a</font>

23
00:01:10,890 --> 00:01:17,039
SATA controller and a PCI<font color="#CCCCCC"> Express bridge</font>

24
00:01:13,800 --> 00:01:19,140
and some others as well on<font color="#CCCCCC"> rising</font>

25
00:01:17,039 --> 00:01:22,170
<font color="#E5E5E5">systems the chipset is powered by an</font>

26
00:01:19,140 --> 00:01:26,069
<font color="#E5E5E5">internal Intel 8051 architecture</font>

27
00:01:22,170 --> 00:01:28,860
microcontroller the second set of

28
00:01:26,069 --> 00:01:31,229
vulnerabilities which is also the<font color="#CCCCCC"> main</font>

29
00:01:28,860 --> 00:01:33,780
part of our<font color="#E5E5E5"> research revolves around the</font>

30
00:01:31,229 --> 00:01:36,330
platform<font color="#E5E5E5"> security processor the platform</font>

31
00:01:33,780 --> 00:01:41,759
security processor is<font color="#CCCCCC"> AMD's version of</font>

32
00:01:36,330 --> 00:01:43,580
Intel's management engine so I'm going

33
00:01:41,759 --> 00:01:47,399
to talk extensively<font color="#E5E5E5"> about the PSP today</font>

34
00:01:43,580 --> 00:01:50,700
<font color="#E5E5E5">but before I delve in deeper</font><font color="#CCCCCC"> I would</font>

35
00:01:47,399 --> 00:01:52,319
like to start<font color="#E5E5E5"> with a quick demo</font><font color="#CCCCCC"> and I'm</font>

36
00:01:50,700 --> 00:01:54,840
going<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> this demo on this machine</font>

37
00:01:52,319 --> 00:02:02,099
that<font color="#E5E5E5"> we had in our office it's a</font><font color="#CCCCCC"> Rison</font>

38
00:01:54,840 --> 00:02:05,190
desktop machine so you're<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at an</font>

39
00:02:02,099 --> 00:02:07,860
RDP connection to an AMD<font color="#CCCCCC"> Rison machine</font>

40
00:02:05,190 --> 00:02:09,899
I'm<font color="#E5E5E5"> going I just opened up in</font><font color="#CCCCCC"> a video</font>

41
00:02:07,860 --> 00:02:11,550
<font color="#CCCCCC">read</font><font color="#E5E5E5"> write everything for those who</font>

42
00:02:09,899 --> 00:02:13,170
don't know<font color="#E5E5E5"> read write everything is a</font>

43
00:02:11,550 --> 00:02:17,730
tool<font color="#E5E5E5"> that allows you to</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> and write</font>

44
00:02:13,170 --> 00:02:20,190
physical memory and to play<font color="#E5E5E5"> with our</font>

45
00:02:17,730 --> 00:02:21,790
<font color="#E5E5E5">devices now what you're seeing</font><font color="#CCCCCC"> over here</font>

46
00:02:20,190 --> 00:02:26,780
<font color="#E5E5E5">on the screen</font>

47
00:02:21,790 --> 00:02:31,450
is a<font color="#CCCCCC"> memory-mapped</font><font color="#E5E5E5"> i/o address that I</font>

48
00:02:26,780 --> 00:02:35,450
opened there are two registers<font color="#E5E5E5"> over here</font>

49
00:02:31,450 --> 00:02:39,980
and the second one which<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> 64-bit</font>

50
00:02:35,450 --> 00:02:41,959
register is well it points to a buffer

51
00:02:39,980 --> 00:02:45,560
<font color="#E5E5E5">in physical memory and I just opened the</font>

52
00:02:41,959 --> 00:02:50,930
buffer over there to the right<font color="#E5E5E5"> now on</font>

53
00:02:45,560 --> 00:02:53,090
the<font color="#E5E5E5"> memory mapped i/o</font><font color="#CCCCCC"> I put a value here</font>

54
00:02:50,930 --> 00:02:56,630
in the entry<font color="#E5E5E5"> into this</font><font color="#CCCCCC"> register and you</font>

55
00:02:53,090 --> 00:02:58,310
can see a string appeared on the<font color="#E5E5E5"> right</font>

56
00:02:56,630 --> 00:03:02,680
side of the screen<font color="#CCCCCC"> now this string that</font>

57
00:02:58,310 --> 00:03:05,930
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> seeing comes directly</font><font color="#CCCCCC"> from a</font>

58
00:03:02,680 --> 00:03:08,030
small<font color="#CCCCCC"> arm chip that exists inside every</font>

59
00:03:05,930 --> 00:03:10,280
AMD processor<font color="#E5E5E5"> today that ship is the</font>

60
00:03:08,030 --> 00:03:12,170
platform<font color="#CCCCCC"> security processor until</font>

61
00:03:10,280 --> 00:03:13,819
recently<font color="#E5E5E5"> the inner workings of the</font>

62
00:03:12,170 --> 00:03:16,160
platform security processor and the

63
00:03:13,819 --> 00:03:18,470
exact scope<font color="#CCCCCC"> fit</font><font color="#E5E5E5"> capabilities has been</font>

64
00:03:16,160 --> 00:03:20,420
mostly unknown but after eight<font color="#E5E5E5"> months of</font>

65
00:03:18,470 --> 00:03:23,349
<font color="#CCCCCC">research in</font><font color="#E5E5E5"> our company we've got lots</font>

66
00:03:20,420 --> 00:03:25,820
of interesting<font color="#E5E5E5"> things to share with</font><font color="#CCCCCC"> you</font>

67
00:03:23,349 --> 00:03:30,078
so in this talk we're going to<font color="#E5E5E5"> talk</font>

68
00:03:25,820 --> 00:03:32,900
<font color="#CCCCCC">about why this the PSP and</font><font color="#E5E5E5"> security are</font>

69
00:03:30,079 --> 00:03:35,720
important how we conducted security

70
00:03:32,900 --> 00:03:37,819
research on the<font color="#E5E5E5"> PSP and</font><font color="#CCCCCC"> finally we're</font>

71
00:03:35,720 --> 00:03:43,489
<font color="#E5E5E5">going to show you how three of the most</font>

72
00:03:37,819 --> 00:03:46,640
<font color="#E5E5E5">interesting vulnerabilities we found so</font>

73
00:03:43,489 --> 00:03:49,220
the PSP is an independent<font color="#E5E5E5"> arm cortex a5</font>

74
00:03:46,640 --> 00:03:51,619
core that's been integrated into AMD

75
00:03:49,220 --> 00:03:54,200
processors<font color="#E5E5E5"> and runs its own operating</font>

76
00:03:51,620 --> 00:03:55,880
system<font color="#E5E5E5"> in essence it's a security</font>

77
00:03:54,200 --> 00:03:59,750
subsystem similar to<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> management</font>

78
00:03:55,880 --> 00:04:02,150
engine<font color="#E5E5E5"> or to Apple secure Enclave</font><font color="#CCCCCC"> the</font>

79
00:03:59,750 --> 00:04:04,900
PSP<font color="#E5E5E5"> was introduced in 2013</font><font color="#CCCCCC"> primarily to</font>

80
00:04:02,150 --> 00:04:07,370
function as an immutable<font color="#E5E5E5"> root of trust</font>

81
00:04:04,900 --> 00:04:10,250
<font color="#E5E5E5">to verify the integrity of the BIOS</font>

82
00:04:07,370 --> 00:04:11,900
before the computer<font color="#E5E5E5"> boots up this is</font>

83
00:04:10,250 --> 00:04:14,269
done in order<font color="#E5E5E5"> to prevent malware from</font>

84
00:04:11,900 --> 00:04:17,510
loading up early in<font color="#E5E5E5"> the boot process in</font>

85
00:04:14,269 --> 00:04:19,850
2017 with<font color="#CCCCCC"> AMD's release of the new Xen</font>

86
00:04:17,510 --> 00:04:21,760
architecture they added a whole new

87
00:04:19,850 --> 00:04:25,010
<font color="#E5E5E5">world of functionality into the PSP</font>

88
00:04:21,760 --> 00:04:27,620
these days the PSP is a trusted platform

89
00:04:25,010 --> 00:04:30,080
module<font color="#E5E5E5"> it also manages encryption of</font>

90
00:04:27,620 --> 00:04:32,740
<font color="#E5E5E5">physical memory pages</font><font color="#CCCCCC"> and it</font><font color="#E5E5E5"> supports</font>

91
00:04:30,080 --> 00:04:36,099
loading up<font color="#CCCCCC"> third-party trustless</font>

92
00:04:32,740 --> 00:04:37,390
which makes it extensible<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font>

93
00:04:36,100 --> 00:04:39,390
the PSP could be extended<font color="#CCCCCC"> to</font><font color="#E5E5E5"> support</font>

94
00:04:37,390 --> 00:04:42,729
<font color="#E5E5E5">something like digital rights management</font>

95
00:04:39,390 --> 00:04:44,830
<font color="#E5E5E5">or as another</font><font color="#CCCCCC"> example you could add</font>

96
00:04:42,730 --> 00:04:50,680
support let's say for<font color="#E5E5E5"> intrusion</font>

97
00:04:44,830 --> 00:04:54,729
detection now the PSP is a highly

98
00:04:50,680 --> 00:04:57,130
trusted<font color="#CCCCCC"> and very powerful component when</font>

99
00:04:54,730 --> 00:05:00,100
an AMD machine is turned on the PSP

100
00:04:57,130 --> 00:05:01,690
<font color="#E5E5E5">components responsible for</font><font color="#CCCCCC"> giving the</font>

101
00:05:00,100 --> 00:05:03,220
PSP is the component<font color="#CCCCCC"> responsible for</font>

102
00:05:01,690 --> 00:05:05,740
giving<font color="#E5E5E5"> the main process permission to</font>

103
00:05:03,220 --> 00:05:08,140
<font color="#CCCCCC">boot</font><font color="#E5E5E5"> the first instruction it executes</font>

104
00:05:05,740 --> 00:05:10,450
when you power<font color="#CCCCCC"> up an AMD machine is not</font>

105
00:05:08,140 --> 00:05:14,050
an x86 instruction but an<font color="#E5E5E5"> arm</font>

106
00:05:10,450 --> 00:05:16,750
instruction<font color="#E5E5E5"> inside the PSP the PSP only</font>

107
00:05:14,050 --> 00:05:19,150
allows<font color="#CCCCCC"> the main processor to boot</font><font color="#E5E5E5"> after</font>

108
00:05:16,750 --> 00:05:24,280
it's verified that digital signature of

109
00:05:19,150 --> 00:05:25,830
the BIOS is<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> this puts the PSP at the</font>

110
00:05:24,280 --> 00:05:28,390
base of a long chain<font color="#CCCCCC"> of reification</font>

111
00:05:25,830 --> 00:05:30,250
<font color="#CCCCCC">where each component verifies the next</font>

112
00:05:28,390 --> 00:05:32,289
<font color="#E5E5E5">making sure that every piece</font><font color="#CCCCCC"> of code</font>

113
00:05:30,250 --> 00:05:34,960
that<font color="#E5E5E5"> runs during boot time is digitally</font>

114
00:05:32,290 --> 00:05:37,720
signed without<font color="#E5E5E5"> the PSP there will be no</font>

115
00:05:34,960 --> 00:05:40,870
one to<font color="#E5E5E5"> check the first code of the first</font>

116
00:05:37,720 --> 00:05:42,280
piece<font color="#CCCCCC"> of BIOS that</font><font color="#E5E5E5"> gets to run so that</font>

117
00:05:40,870 --> 00:05:46,360
<font color="#E5E5E5">would make the beginning of the BIOS a</font>

118
00:05:42,280 --> 00:05:47,979
very good place<font color="#CCCCCC"> to install malware</font><font color="#E5E5E5"> the</font>

119
00:05:46,360 --> 00:05:50,320
<font color="#E5E5E5">PSP also functions to</font><font color="#CCCCCC"> the storage for</font>

120
00:05:47,980 --> 00:05:52,720
encryption<font color="#E5E5E5"> keys</font><font color="#CCCCCC"> it contains a floor</font>

121
00:05:50,320 --> 00:05:54,909
based implementation<font color="#E5E5E5"> of TPM that is used</font>

122
00:05:52,720 --> 00:05:56,950
by<font color="#CCCCCC"> the operating system so for</font><font color="#E5E5E5"> example</font>

123
00:05:54,910 --> 00:05:58,690
if you're<font color="#CCCCCC"> using BitLocker and you have</font>

124
00:05:56,950 --> 00:06:00,640
disk encryption<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will name the machine</font>

125
00:05:58,690 --> 00:06:05,530
your encryption<font color="#E5E5E5"> keys are most likely</font>

126
00:06:00,640 --> 00:06:07,390
stored inside the PSP the PSP also has

127
00:06:05,530 --> 00:06:10,030
complete unrestricted access to<font color="#E5E5E5"> main</font>

128
00:06:07,390 --> 00:06:13,300
<font color="#CCCCCC">memory it can access any location</font><font color="#E5E5E5"> in RAM</font>

129
00:06:10,030 --> 00:06:14,880
<font color="#E5E5E5">at any time including protected regions</font>

130
00:06:13,300 --> 00:06:17,260
such as<font color="#CCCCCC"> a system management mode</font><font color="#E5E5E5"> or</font>

131
00:06:14,880 --> 00:06:20,430
virtual machine address spaces<font color="#E5E5E5"> and as</font>

132
00:06:17,260 --> 00:06:23,140
far<font color="#E5E5E5"> as we saw it also can do that</font>

133
00:06:20,430 --> 00:06:27,390
<font color="#E5E5E5">disregarding any i/o a new configuration</font>

134
00:06:23,140 --> 00:06:27,390
that that the BIOS<font color="#E5E5E5"> might have done</font>

135
00:06:27,630 --> 00:06:32,620
finally<font color="#E5E5E5"> the PSP is completely</font>

136
00:06:30,790 --> 00:06:34,780
<font color="#E5E5E5">independent from the main processor it</font>

137
00:06:32,620 --> 00:06:37,120
runs regardless of whether you're always

138
00:06:34,780 --> 00:06:39,640
<font color="#E5E5E5">running or not and you can only</font>

139
00:06:37,120 --> 00:06:41,710
communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it through limited</font><font color="#E5E5E5"> and</font>

140
00:06:39,640 --> 00:06:43,750
<font color="#E5E5E5">well-defined interface this makes the</font>

141
00:06:41,710 --> 00:06:46,270
PSP a very good place to<font color="#E5E5E5"> hide malicious</font>

142
00:06:43,750 --> 00:06:48,340
code if you can control<font color="#E5E5E5"> the PSP</font>

143
00:06:46,270 --> 00:06:50,229
you can circumvent<font color="#E5E5E5"> many important</font>

144
00:06:48,340 --> 00:06:52,750
security<font color="#E5E5E5"> features such</font><font color="#CCCCCC"> as TPM</font><font color="#E5E5E5"> and the</font>

145
00:06:50,229 --> 00:06:54,789
virtual machine isolation<font color="#E5E5E5"> and if you</font>

146
00:06:52,750 --> 00:06:56,440
could patch the PSP firmware<font color="#E5E5E5"> you could</font>

147
00:06:54,789 --> 00:06:58,300
create very powerful malware<font color="#E5E5E5"> that's</font>

148
00:06:56,440 --> 00:07:03,250
virtually<font color="#CCCCCC"> impossible to</font><font color="#E5E5E5"> detect or to</font>

149
00:06:58,300 --> 00:07:05,110
remove because<font color="#E5E5E5"> of</font><font color="#CCCCCC"> all of</font><font color="#E5E5E5"> this the PSP</font>

150
00:07:03,250 --> 00:07:07,389
has<font color="#E5E5E5"> been a source of controversy in</font><font color="#CCCCCC"> the</font>

151
00:07:05,110 --> 00:07:11,020
<font color="#CCCCCC">open-source</font><font color="#E5E5E5"> community the main argument</font>

152
00:07:07,389 --> 00:07:13,780
against it<font color="#E5E5E5"> is that it's a black box it's</font>

153
00:07:11,020 --> 00:07:15,310
a closed source undocumented<font color="#E5E5E5"> ship that</font>

154
00:07:13,780 --> 00:07:16,960
has complete control over your system

155
00:07:15,310 --> 00:07:19,509
<font color="#E5E5E5">you cannot shut it down</font>

156
00:07:16,960 --> 00:07:22,150
you don't know what it's doing<font color="#E5E5E5"> and you</font>

157
00:07:19,509 --> 00:07:26,590
<font color="#E5E5E5">don't know what's</font><font color="#CCCCCC"> running</font><font color="#E5E5E5"> on it so it's</font>

158
00:07:22,150 --> 00:07:29,169
a fairly scary prospect<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> Marys</font>

159
00:07:26,590 --> 00:07:31,568
<font color="#CCCCCC">wars the PSP exists on almost every new</font>

160
00:07:29,169 --> 00:07:38,710
<font color="#CCCCCC">amv product on the market today</font><font color="#E5E5E5"> desktop</font>

161
00:07:31,569 --> 00:07:40,270
PCs servers laptops<font color="#E5E5E5"> GPUs</font><font color="#CCCCCC"> you name</font><font color="#E5E5E5"> it all</font>

162
00:07:38,710 --> 00:07:42,758
of<font color="#CCCCCC"> this makes the</font><font color="#E5E5E5"> PSP a very valuable</font>

163
00:07:40,270 --> 00:07:44,849
target for hackers<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> also why we</font>

164
00:07:42,759 --> 00:07:47,229
<font color="#E5E5E5">were interested</font><font color="#CCCCCC"> in looking into</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so</font>

165
00:07:44,849 --> 00:07:50,050
<font color="#CCCCCC">with that let's dive</font><font color="#E5E5E5"> a little bit into</font>

166
00:07:47,229 --> 00:07:52,539
PSP internals the first thing we're

167
00:07:50,050 --> 00:07:54,280
going to<font color="#E5E5E5"> do is we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> you</font>

168
00:07:52,539 --> 00:07:57,039
how<font color="#E5E5E5"> to locate the PSP firmware and</font>

169
00:07:54,280 --> 00:07:58,508
understand how it's built<font color="#CCCCCC"> then we're</font>

170
00:07:57,039 --> 00:08:00,130
going to show you<font color="#E5E5E5"> how to take</font><font color="#CCCCCC"> control</font>

171
00:07:58,509 --> 00:08:02,380
<font color="#E5E5E5">over the PSP in several different ways</font>

172
00:08:00,130 --> 00:08:04,060
<font color="#E5E5E5">and finally</font><font color="#CCCCCC"> we're going to</font><font color="#E5E5E5"> demonstrate</font>

173
00:08:02,380 --> 00:08:05,710
<font color="#E5E5E5">how all of this could be used</font>

174
00:08:04,060 --> 00:08:08,169
practically in the course<font color="#E5E5E5"> of</font><font color="#CCCCCC"> a cyber</font>

175
00:08:05,710 --> 00:08:13,508
<font color="#CCCCCC">attack let's</font><font color="#E5E5E5"> begin by locating the PSP</font>

176
00:08:08,169 --> 00:08:15,400
firmware what you're looking<font color="#E5E5E5"> at is one</font>

177
00:08:13,509 --> 00:08:17,650
of AMD's marketing slides about the PSP

178
00:08:15,400 --> 00:08:20,710
<font color="#E5E5E5">one thing that stands out is the</font>

179
00:08:17,650 --> 00:08:23,008
sentence<font color="#CCCCCC"> secure off-chip non-volatile</font>

180
00:08:20,710 --> 00:08:27,669
storage<font color="#CCCCCC"> for firmware</font><font color="#E5E5E5"> and data that</font><font color="#CCCCCC"> is</font>

181
00:08:23,009 --> 00:08:29,849
<font color="#CCCCCC">spi</font><font color="#E5E5E5"> ROM this implies that the firmware</font>

182
00:08:27,669 --> 00:08:31,479
for the PSP resides on<font color="#CCCCCC"> spi flash</font>

183
00:08:29,849 --> 00:08:33,729
<font color="#CCCCCC">incidentally that's also where the</font>

184
00:08:31,479 --> 00:08:35,828
<font color="#E5E5E5">system</font><font color="#CCCCCC"> BIOS is stored</font><font color="#E5E5E5"> so our first step</font>

185
00:08:33,729 --> 00:08:39,579
was<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> to our multiple manufacturers</font>

186
00:08:35,828 --> 00:08:41,679
website and download the<font color="#E5E5E5"> BIOS update so</font>

187
00:08:39,578 --> 00:08:44,709
we got a BIOS<font color="#E5E5E5"> update and we open it up</font>

188
00:08:41,679 --> 00:08:47,680
<font color="#E5E5E5">with UEFI tool now if you haven't heard</font>

189
00:08:44,709 --> 00:08:51,660
about<font color="#E5E5E5"> it UEFI tool is a very useful tool</font>

190
00:08:47,680 --> 00:08:54,729
for<font color="#CCCCCC"> viewing and</font><font color="#E5E5E5"> editing BIOS images</font>

191
00:08:51,660 --> 00:08:56,469
looking at the<font color="#CCCCCC"> output on</font><font color="#E5E5E5"> the screen</font><font color="#CCCCCC"> we</font>

192
00:08:54,730 --> 00:08:59,650
see<font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> goods representing uf5</font>

193
00:08:56,470 --> 00:09:00,580
volumes in between the goods<font color="#E5E5E5"> you can see</font>

194
00:08:59,650 --> 00:09:02,649
padding sections

195
00:09:00,580 --> 00:09:06,100
on most<font color="#E5E5E5"> BIOS images these various</font>

196
00:09:02,649 --> 00:09:08,560
<font color="#CCCCCC">sections are empty but on AMD</font><font color="#E5E5E5"> BIOS is</font>

197
00:09:06,100 --> 00:09:13,690
<font color="#E5E5E5">specifically some</font><font color="#CCCCCC"> parrots</font><font color="#E5E5E5"> and ships are</font>

198
00:09:08,560 --> 00:09:16,270
<font color="#E5E5E5">not so we open up a</font><font color="#CCCCCC"> padding</font><font color="#E5E5E5"> section and</font>

199
00:09:13,690 --> 00:09:21,399
we found something<font color="#E5E5E5"> interesting inside</font><font color="#CCCCCC"> we</font>

200
00:09:16,270 --> 00:09:24,279
found<font color="#E5E5E5"> the word PSP next we used</font><font color="#CCCCCC"> bean wok</font>

201
00:09:21,399 --> 00:09:26,320
to<font color="#CCCCCC"> analyze the padding section and found</font>

202
00:09:24,279 --> 00:09:27,700
<font color="#CCCCCC">armed instructions inside</font><font color="#E5E5E5"> that was a</font>

203
00:09:26,320 --> 00:09:30,880
very very<font color="#E5E5E5"> good sign</font><font color="#CCCCCC"> that we're looking</font>

204
00:09:27,700 --> 00:09:32,200
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> right place</font><font color="#CCCCCC"> so we took the</font>

205
00:09:30,880 --> 00:09:39,189
padding section and we put it in<font color="#E5E5E5"> either</font>

206
00:09:32,200 --> 00:09:41,620
and we got nice<font color="#E5E5E5"> and clean arm code so</font>

207
00:09:39,190 --> 00:09:43,089
after we found<font color="#E5E5E5"> the framework we'll set a</font>

208
00:09:41,620 --> 00:09:46,270
goal to<font color="#E5E5E5"> ourselves to achieve code</font>

209
00:09:43,089 --> 00:09:48,430
execution on<font color="#CCCCCC"> the PSP</font><font color="#E5E5E5"> we didn't care how</font>

210
00:09:46,270 --> 00:09:50,529
we do<font color="#E5E5E5"> this or whether or not it requires</font>

211
00:09:48,430 --> 00:09:52,959
<font color="#E5E5E5">any physical modification to hardware</font>

212
00:09:50,529 --> 00:09:55,450
<font color="#E5E5E5">and the reason we wanted to</font><font color="#CCCCCC"> do this so</font>

213
00:09:52,959 --> 00:09:56,560
badly<font color="#E5E5E5"> is because we knew</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would</font>

214
00:09:55,450 --> 00:09:59,380
allow us<font color="#CCCCCC"> to understand</font><font color="#E5E5E5"> the inner</font>

215
00:09:56,560 --> 00:10:03,010
<font color="#CCCCCC">workings of the PSP by way of debugging</font>

216
00:09:59,380 --> 00:10:04,360
and trial and<font color="#E5E5E5"> error the problem was the</font>

217
00:10:03,010 --> 00:10:07,839
<font color="#E5E5E5">PSP was designed to prevent us from</font>

218
00:10:04,360 --> 00:10:09,610
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> exactly that</font><font color="#E5E5E5"> let's take</font><font color="#CCCCCC"> a look at</font>

219
00:10:07,839 --> 00:10:15,580
a PSP boot<font color="#E5E5E5"> process to understand why</font>

220
00:10:09,610 --> 00:10:17,380
that<font color="#CCCCCC"> is the PSP implements</font><font color="#E5E5E5"> a strict</font>

221
00:10:15,580 --> 00:10:19,450
<font color="#E5E5E5">chain of verification there's</font><font color="#CCCCCC"> two</font>

222
00:10:17,380 --> 00:10:22,360
signature verification<font color="#E5E5E5"> when you power</font><font color="#CCCCCC"> up</font>

223
00:10:19,450 --> 00:10:23,370
the AMD processor the PSP boot<font color="#CCCCCC"> ROM is</font>

224
00:10:22,360 --> 00:10:26,740
executed first

225
00:10:23,370 --> 00:10:29,709
now as implied<font color="#CCCCCC"> by the name</font><font color="#E5E5E5"> the boot</font><font color="#CCCCCC"> rom</font>

226
00:10:26,740 --> 00:10:31,930
is<font color="#E5E5E5"> read-only</font><font color="#CCCCCC"> meaning</font><font color="#E5E5E5"> it's code that is</font>

227
00:10:29,709 --> 00:10:34,569
fabricated<font color="#E5E5E5"> into the processor</font>

228
00:10:31,930 --> 00:10:37,359
during manufacturing the boot<font color="#E5E5E5"> roms job</font>

229
00:10:34,570 --> 00:10:39,970
is simple to check the<font color="#E5E5E5"> signature of the</font>

230
00:10:37,360 --> 00:10:42,190
first piece<font color="#CCCCCC"> of firmer that gets to run</font>

231
00:10:39,970 --> 00:10:45,070
and then if<font color="#E5E5E5"> everything checks out to run</font>

232
00:10:42,190 --> 00:10:50,740
it that<font color="#E5E5E5"> particular component</font><font color="#CCCCCC"> is the PSP</font>

233
00:10:45,070 --> 00:10:53,140
bootloader generally<font color="#E5E5E5"> speaking the PSP</font>

234
00:10:50,740 --> 00:10:56,200
firmware is organized in a<font color="#CCCCCC"> fascism</font>

235
00:10:53,140 --> 00:10:58,029
structure the<font color="#E5E5E5"> floor contains many</font>

236
00:10:56,200 --> 00:11:01,170
different modules and<font color="#E5E5E5"> each one of these</font>

237
00:10:58,029 --> 00:11:03,910
modules<font color="#E5E5E5"> is individually signed by AMD</font>

238
00:11:01,170 --> 00:11:05,890
the first thing<font color="#E5E5E5"> that</font><font color="#CCCCCC"> Goodrem does is to</font>

239
00:11:03,910 --> 00:11:09,579
<font color="#CCCCCC">parse a data structure on spi flash</font>

240
00:11:05,890 --> 00:11:11,170
<font color="#E5E5E5">called the PSP directory that</font><font color="#CCCCCC"> is the</font>

241
00:11:09,579 --> 00:11:12,459
file system structure<font color="#E5E5E5"> that you're seeing</font>

242
00:11:11,170 --> 00:11:14,680
in the illustration<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> screen</font>

243
00:11:12,460 --> 00:11:17,140
from there the<font color="#E5E5E5"> bootrom can locate the</font>

244
00:11:14,680 --> 00:11:20,620
AMD public key which is then<font color="#CCCCCC"> used to</font>

245
00:11:17,140 --> 00:11:23,260
<font color="#CCCCCC">verify all the other</font><font color="#E5E5E5"> PSP modules</font><font color="#CCCCCC"> the</font>

246
00:11:20,620 --> 00:11:25,330
public key itself is verified against

247
00:11:23,260 --> 00:11:32,020
the secret<font color="#CCCCCC"> H</font><font color="#E5E5E5"> Mac value that's</font>

248
00:11:25,330 --> 00:11:33,790
<font color="#E5E5E5">manufactured into the CPU</font><font color="#CCCCCC"> the next step</font>

249
00:11:32,020 --> 00:11:35,380
<font color="#E5E5E5">for the boot</font><font color="#CCCCCC"> rom is to use the AMD</font>

250
00:11:33,790 --> 00:11:37,270
public key to verify the PSC bootloader

251
00:11:35,380 --> 00:11:39,040
<font color="#E5E5E5">and if the bootloader passes</font>

252
00:11:37,270 --> 00:11:44,529
verification it loads the<font color="#E5E5E5"> bootloader</font>

253
00:11:39,040 --> 00:11:46,839
interim and it<font color="#E5E5E5"> executes it at this point</font>

254
00:11:44,529 --> 00:11:48,670
<font color="#E5E5E5">the former begins to run the bootloader</font>

255
00:11:46,839 --> 00:11:51,010
which<font color="#E5E5E5"> is the first component in firmware</font>

256
00:11:48,670 --> 00:11:52,510
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> to run goes ahead and loads</font><font color="#CCCCCC"> many</font>

257
00:11:51,010 --> 00:11:54,850
other components<font color="#CCCCCC"> that exist inside</font><font color="#E5E5E5"> the</font>

258
00:11:52,510 --> 00:11:58,470
<font color="#E5E5E5">PSP directory for</font><font color="#CCCCCC"> example one such</font>

259
00:11:54,850 --> 00:12:01,899
component is the PSP operating system

260
00:11:58,470 --> 00:12:03,760
before letting the components run

261
00:12:01,899 --> 00:12:05,680
however<font color="#E5E5E5"> the bootloader verifies their</font>

262
00:12:03,760 --> 00:12:08,890
digital signature against the AMD public

263
00:12:05,680 --> 00:12:12,880
key so again<font color="#E5E5E5"> everything is signed and</font>

264
00:12:08,890 --> 00:12:15,040
verified eventually the bootloader also

265
00:12:12,880 --> 00:12:16,990
verifies the BIOS signature<font color="#CCCCCC"> and if the</font>

266
00:12:15,040 --> 00:12:19,779
BIOS signature<font color="#E5E5E5"> site checks out</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> PSP</font>

267
00:12:16,990 --> 00:12:23,500
releases the x86<font color="#CCCCCC"> cores from their</font>

268
00:12:19,779 --> 00:12:25,480
initial frozen state and that allows the

269
00:12:23,500 --> 00:12:29,410
computer to start so without that the

270
00:12:25,480 --> 00:12:30,310
computer is is<font color="#E5E5E5"> basically stuck so you</font>

271
00:12:29,410 --> 00:12:32,469
can see there is a whole chain of

272
00:12:30,310 --> 00:12:35,619
reification starting at the PSP boot<font color="#CCCCCC"> rom</font>

273
00:12:32,470 --> 00:12:38,200
<font color="#E5E5E5">and going all the</font><font color="#CCCCCC"> way to the bios</font><font color="#E5E5E5"> later</font>

274
00:12:35,620 --> 00:12:40,959
on the bios verifies the OS<font color="#CCCCCC"> the always</font>

275
00:12:38,200 --> 00:12:43,750
verify<font color="#E5E5E5"> the kernel drivers and that's how</font>

276
00:12:40,959 --> 00:12:45,969
you get secure boot<font color="#E5E5E5"> let's take a deeper</font>

277
00:12:43,750 --> 00:12:51,160
<font color="#CCCCCC">look into</font><font color="#E5E5E5"> how exactly the PSP verifies</font>

278
00:12:45,970 --> 00:12:54,190
digital signatures I mentioned earlier

279
00:12:51,160 --> 00:12:57,219
that the<font color="#CCCCCC"> former</font><font color="#E5E5E5"> is organized like a file</font>

280
00:12:54,190 --> 00:12:59,860
system<font color="#CCCCCC"> and that every file or module</font>

281
00:12:57,220 --> 00:13:02,850
contains its own<font color="#CCCCCC"> digital signature</font><font color="#E5E5E5"> the</font>

282
00:12:59,860 --> 00:13:05,740
<font color="#E5E5E5">PSP loads these modules on demand and</font>

283
00:13:02,850 --> 00:13:07,810
modules can contain either<font color="#E5E5E5"> arm code or</font>

284
00:13:05,740 --> 00:13:11,170
they can<font color="#E5E5E5"> contain content configuration</font>

285
00:13:07,810 --> 00:13:13,689
data before loading any module into

286
00:13:11,170 --> 00:13:16,630
memory however<font color="#E5E5E5"> the PSP does signature</font>

287
00:13:13,690 --> 00:13:19,120
verification if replication fails the

288
00:13:16,630 --> 00:13:21,100
PSP enters an infinite loop<font color="#CCCCCC"> because the</font>

289
00:13:19,120 --> 00:13:22,610
x86 cores are still frozen

290
00:13:21,100 --> 00:13:24,589
during that<font color="#E5E5E5"> time</font><font color="#CCCCCC"> the system</font>

291
00:13:22,610 --> 00:13:26,149
<font color="#E5E5E5">stuck and this is how essentially the</font>

292
00:13:24,589 --> 00:13:31,070
PSP prevents us from<font color="#CCCCCC"> making changes to</font>

293
00:13:26,149 --> 00:13:33,769
its firmware if<font color="#E5E5E5"> you take</font><font color="#CCCCCC"> a look</font><font color="#E5E5E5"> at</font>

294
00:13:31,070 --> 00:13:36,019
individual modules<font color="#E5E5E5"> you would see that</font>

295
00:13:33,769 --> 00:13:39,260
each<font color="#E5E5E5"> one of them</font><font color="#CCCCCC"> contains a header and</font><font color="#E5E5E5"> a</font>

296
00:13:36,019 --> 00:13:41,390
body<font color="#E5E5E5"> and you would also see that at the</font>

297
00:13:39,260 --> 00:13:43,670
end<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the module</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a digital</font>

298
00:13:41,390 --> 00:13:45,230
<font color="#CCCCCC">signature attached because</font><font color="#E5E5E5"> the header</font>

299
00:13:43,670 --> 00:13:47,599
and the body are hashed<font color="#E5E5E5"> and signed</font>

300
00:13:45,230 --> 00:13:49,579
together if you make any<font color="#CCCCCC"> changes to</font>

301
00:13:47,600 --> 00:13:52,899
<font color="#E5E5E5">either one of them it</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> break</font><font color="#CCCCCC"> a</font>

302
00:13:49,579 --> 00:13:52,899
signature<font color="#E5E5E5"> and the system on boot</font>

303
00:13:54,010 --> 00:14:00,350
let's look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> a real world example</font><font color="#E5E5E5"> now</font>

304
00:13:57,019 --> 00:14:02,990
what you're seeing on the<font color="#E5E5E5"> screen is the</font>

305
00:14:00,350 --> 00:14:05,269
header of the<font color="#E5E5E5"> PSP boot or a module two</font>

306
00:14:02,990 --> 00:14:07,760
particular fields are marked the total

307
00:14:05,269 --> 00:14:10,550
size of the module<font color="#E5E5E5"> and the size of the</font>

308
00:14:07,760 --> 00:14:21,769
area<font color="#E5E5E5"> that's digitally signed the latter</font>

309
00:14:10,550 --> 00:14:24,620
one should cover just<font color="#E5E5E5"> okay so the</font><font color="#CCCCCC"> number</font>

310
00:14:21,769 --> 00:14:28,310
<font color="#CCCCCC">of bytes specified on on the latter one</font>

311
00:14:24,620 --> 00:14:30,440
<font color="#E5E5E5">sign part size is the number of bytes</font>

312
00:14:28,310 --> 00:14:32,000
<font color="#E5E5E5">that gets hashed into</font><font color="#CCCCCC"> the digital</font>

313
00:14:30,440 --> 00:14:35,810
<font color="#CCCCCC">signature meaning that's the header and</font>

314
00:14:32,000 --> 00:14:38,000
the body now you would<font color="#E5E5E5"> expect that</font><font color="#CCCCCC"> sign</font>

315
00:14:35,810 --> 00:14:40,670
part size would be<font color="#E5E5E5"> large</font><font color="#CCCCCC"> enough to</font><font color="#E5E5E5"> cover</font>

316
00:14:38,000 --> 00:14:44,089
the entire<font color="#CCCCCC"> module except the signature</font>

317
00:14:40,670 --> 00:14:46,069
area<font color="#E5E5E5"> but what happens if it's not so</font>

318
00:14:44,089 --> 00:14:49,070
what we<font color="#E5E5E5"> did next was we called the web</font>

319
00:14:46,070 --> 00:14:51,740
and we downloaded every single<font color="#CCCCCC"> BIOS</font><font color="#E5E5E5"> for</font>

320
00:14:49,070 --> 00:14:53,600
every AMD board ever released<font color="#E5E5E5"> we then</font>

321
00:14:51,740 --> 00:14:57,110
wrote scripts<font color="#E5E5E5"> to extract and check all</font>

322
00:14:53,600 --> 00:15:00,890
PSP modules to see if we can<font color="#E5E5E5"> find these</font>

323
00:14:57,110 --> 00:15:02,720
preferences<font color="#E5E5E5"> between these two sizes and</font>

324
00:15:00,890 --> 00:15:04,130
guess what as<font color="#E5E5E5"> soon as you ran the</font>

325
00:15:02,720 --> 00:15:06,680
<font color="#CCCCCC">scripts we discovered interesting things</font>

326
00:15:04,130 --> 00:15:09,709
we found specific modules<font color="#E5E5E5"> where</font><font color="#CCCCCC"> sign</font>

327
00:15:06,680 --> 00:15:11,779
<font color="#CCCCCC">parts size was 0</font><font color="#E5E5E5"> when we looked closely</font>

328
00:15:09,709 --> 00:15:13,880
into these modules we saw that they do

329
00:15:11,779 --> 00:15:15,620
not<font color="#E5E5E5"> contain code they contain something</font>

330
00:15:13,880 --> 00:15:20,300
that looks like either settings or

331
00:15:15,620 --> 00:15:23,540
<font color="#E5E5E5">configuration data it turns out that</font>

332
00:15:20,300 --> 00:15:26,240
consistently<font color="#E5E5E5"> for data modules</font><font color="#CCCCCC"> signed</font>

333
00:15:23,540 --> 00:15:28,640
<font color="#E5E5E5">part size is 0 yet these modules do</font>

334
00:15:26,240 --> 00:15:31,279
contain a digital signature<font color="#E5E5E5"> but if</font>

335
00:15:28,640 --> 00:15:33,550
signpart size is<font color="#E5E5E5"> 0 what exactly the</font>

336
00:15:31,279 --> 00:15:33,550
signs

337
00:15:35,240 --> 00:15:42,150
so after some checking<font color="#E5E5E5"> we found that the</font>

338
00:15:40,560 --> 00:15:45,029
signature in these<font color="#E5E5E5"> modules only covers</font>

339
00:15:42,150 --> 00:15:51,449
<font color="#E5E5E5">the header</font><font color="#CCCCCC"> I mean why would you want to</font>

340
00:15:45,029 --> 00:15:53,460
sign data anyway so let's think for a

341
00:15:51,450 --> 00:15:56,070
second what we got here<font color="#E5E5E5"> we've got</font><font color="#CCCCCC"> a</font>

342
00:15:53,460 --> 00:15:59,100
perfectly<font color="#E5E5E5"> valid correctly signed PSP</font>

343
00:15:56,070 --> 00:16:01,380
module<font color="#CCCCCC"> with an unsigned body</font><font color="#E5E5E5"> what</font>

344
00:15:59,100 --> 00:16:06,260
happens if you replace the<font color="#CCCCCC"> body in the</font>

345
00:16:01,380 --> 00:16:10,890
<font color="#E5E5E5">module with</font><font color="#CCCCCC"> code the answer is it runs</font>

346
00:16:06,260 --> 00:16:12,510
<font color="#E5E5E5">haha so for example we could replace the</font>

347
00:16:10,890 --> 00:16:16,199
PSP<font color="#E5E5E5"> operating system with this module</font>

348
00:16:12,510 --> 00:16:18,480
<font color="#E5E5E5">and give the PSP our own OS which is</font>

349
00:16:16,200 --> 00:16:22,860
<font color="#E5E5E5">exactly what with it and it runs</font>

350
00:16:18,480 --> 00:16:25,500
perfectly so this allows us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> inject</font>

351
00:16:22,860 --> 00:16:28,290
code into the PSP<font color="#E5E5E5"> and take over it</font>

352
00:16:25,500 --> 00:16:31,140
<font color="#E5E5E5">before even a single x86 instruction</font>

353
00:16:28,290 --> 00:16:33,540
<font color="#E5E5E5">gets executed so let's recap the PSP</font>

354
00:16:31,140 --> 00:16:36,390
controls the boot process<font color="#E5E5E5"> as part of the</font>

355
00:16:33,540 --> 00:16:38,400
boot process<font color="#E5E5E5"> PSP loads modules from its</font>

356
00:16:36,390 --> 00:16:41,250
<font color="#CCCCCC">firmware and each one</font><font color="#E5E5E5"> of those modules</font>

357
00:16:38,400 --> 00:16:44,250
<font color="#E5E5E5">is digitally signed but some modules out</font>

358
00:16:41,250 --> 00:16:46,860
there are incorrectly signed<font color="#E5E5E5"> if you</font>

359
00:16:44,250 --> 00:16:49,260
could find one you could use that module

360
00:16:46,860 --> 00:16:50,900
<font color="#E5E5E5">as a placeholder for</font><font color="#CCCCCC"> malware</font><font color="#E5E5E5"> so all you</font>

361
00:16:49,260 --> 00:16:54,120
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to do is get one of</font><font color="#E5E5E5"> those modules</font>

362
00:16:50,900 --> 00:16:56,939
put malware inside put that module in

363
00:16:54,120 --> 00:16:58,470
<font color="#E5E5E5">place of legitimate module and during</font>

364
00:16:56,940 --> 00:17:00,960
boots<font color="#E5E5E5"> that module is</font><font color="#CCCCCC"> going to pass</font>

365
00:16:58,470 --> 00:17:07,020
<font color="#CCCCCC">verification</font><font color="#E5E5E5"> and your code is going to</font>

366
00:17:00,960 --> 00:17:09,270
get to run pretty simple so I'm going<font color="#E5E5E5"> to</font>

367
00:17:07,020 --> 00:17:11,910
show you<font color="#CCCCCC"> a demo of</font><font color="#E5E5E5"> this attack</font><font color="#CCCCCC"> that</font>

368
00:17:09,270 --> 00:17:16,470
<font color="#CCCCCC">we've done against an epic server</font><font color="#E5E5E5"> in our</font>

369
00:17:11,910 --> 00:17:19,079
office<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the right we have an epic</font>

370
00:17:16,470 --> 00:17:21,000
server and on the<font color="#CCCCCC"> left we have an</font><font color="#E5E5E5"> HP</font>

371
00:17:19,079 --> 00:17:23,669
laptop<font color="#CCCCCC"> that's logged</font><font color="#E5E5E5"> into a remotely</font>

372
00:17:21,000 --> 00:17:25,470
into<font color="#CCCCCC"> a server what we're going to</font><font color="#E5E5E5"> do</font>

373
00:17:23,670 --> 00:17:27,689
first is<font color="#E5E5E5"> we're going to take our</font>

374
00:17:25,470 --> 00:17:29,850
modified<font color="#CCCCCC"> bios update</font><font color="#E5E5E5"> which contains our</font>

375
00:17:27,689 --> 00:17:32,970
patched<font color="#CCCCCC"> PSP module and we're going</font><font color="#E5E5E5"> to</font>

376
00:17:29,850 --> 00:17:36,050
flash<font color="#CCCCCC"> flashed</font><font color="#E5E5E5"> on the server</font><font color="#CCCCCC"> then we're</font>

377
00:17:32,970 --> 00:17:36,050
going<font color="#CCCCCC"> to restart</font><font color="#E5E5E5"> the server</font>

378
00:17:43,800 --> 00:17:47,970
now<font color="#E5E5E5"> when the server</font><font color="#CCCCCC"> is booting look</font>

379
00:17:46,290 --> 00:18:00,720
closely at the<font color="#E5E5E5"> bottom</font><font color="#CCCCCC"> right corner of</font>

380
00:17:47,970 --> 00:18:10,170
<font color="#E5E5E5">the screen thank you the</font><font color="#CCCCCC"> postcodes</font>

381
00:18:00,720 --> 00:18:11,520
you're<font color="#E5E5E5"> seeing are coming from the PSP so</font>

382
00:18:10,170 --> 00:18:14,790
we've managed<font color="#CCCCCC"> to get outside code</font>

383
00:18:11,520 --> 00:18:17,610
running<font color="#E5E5E5"> on the PSP</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that gave us</font><font color="#CCCCCC"> a</font>

384
00:18:14,790 --> 00:18:19,409
<font color="#E5E5E5">lot of</font><font color="#CCCCCC"> visibility into PSP internals</font><font color="#E5E5E5"> we</font>

385
00:18:17,610 --> 00:18:21,719
also wrote our own<font color="#CCCCCC"> Python the bugging</font>

386
00:18:19,410 --> 00:18:23,430
interface<font color="#E5E5E5"> for the PSP and we used it</font><font color="#CCCCCC"> to</font>

387
00:18:21,720 --> 00:18:27,810
do a lot of investigation<font color="#E5E5E5"> into how the</font>

388
00:18:23,430 --> 00:18:30,810
PSP works<font color="#E5E5E5"> and we found many other</font>

389
00:18:27,810 --> 00:18:34,639
interesting things inside<font color="#E5E5E5"> so with that</font>

390
00:18:30,810 --> 00:18:34,639
<font color="#CCCCCC">always gonna share some of them with you</font>

391
00:18:38,560 --> 00:18:43,360
<font color="#CCCCCC">all right so in</font><font color="#E5E5E5"> this section I'm</font><font color="#CCCCCC"> gonna</font>

392
00:18:41,650 --> 00:18:46,150
<font color="#CCCCCC">talk to you about</font><font color="#E5E5E5"> another interesting</font>

393
00:18:43,360 --> 00:18:50,889
attack surface that the PSP has and<font color="#E5E5E5"> that</font>

394
00:18:46,150 --> 00:18:53,170
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> mailbox interface and the mailbox</font>

395
00:18:50,890 --> 00:18:56,140
is basically a way to<font color="#E5E5E5"> send the PSP</font>

396
00:18:53,170 --> 00:18:57,450
commands and for<font color="#E5E5E5"> example if you remember</font>

397
00:18:56,140 --> 00:19:01,090
this<font color="#CCCCCC"> image from</font><font color="#E5E5E5"> the start of the talk</font>

398
00:18:57,450 --> 00:19:03,730
that's an example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> how we sent the</font><font color="#E5E5E5"> get</font>

399
00:19:01,090 --> 00:19:06,520
version command<font color="#E5E5E5"> to a PSP through this</font>

400
00:19:03,730 --> 00:19:07,870
mailbox interface<font color="#E5E5E5"> to get the version of</font>

401
00:19:06,520 --> 00:19:11,980
the firmware that's currently running on

402
00:19:07,870 --> 00:19:14,320
the PSP<font color="#E5E5E5"> so this mailbox interface is</font>

403
00:19:11,980 --> 00:19:18,400
mostly intended<font color="#E5E5E5"> to be used by the BIOS</font>

404
00:19:14,320 --> 00:19:21,370
during<font color="#CCCCCC"> the system boot</font><font color="#E5E5E5"> and it has three</font>

405
00:19:18,400 --> 00:19:24,520
main<font color="#CCCCCC"> use cases one is to query the PSP</font>

406
00:19:21,370 --> 00:19:28,030
for information second is<font color="#E5E5E5"> to initialize</font>

407
00:19:24,520 --> 00:19:30,220
some systems in the PSP<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the third is</font>

408
00:19:28,030 --> 00:19:32,139
related<font color="#CCCCCC"> to</font><font color="#E5E5E5"> power management so for</font>

409
00:19:30,220 --> 00:19:35,170
<font color="#E5E5E5">example when the computer needs</font><font color="#CCCCCC"> to enter</font>

410
00:19:32,140 --> 00:19:38,800
<font color="#E5E5E5">sleep mode</font><font color="#CCCCCC"> it needs to tell</font><font color="#E5E5E5"> the PSP that</font>

411
00:19:35,170 --> 00:19:40,570
it is through a<font color="#E5E5E5"> mailbox command so</font>

412
00:19:38,800 --> 00:19:43,180
there's this set of commands<font color="#CCCCCC"> that you</font>

413
00:19:40,570 --> 00:19:45,399
can<font color="#CCCCCC"> send a piece feed and as we've</font>

414
00:19:43,180 --> 00:19:47,980
demonstrated<font color="#CCCCCC"> you can just do it from a</font>

415
00:19:45,400 --> 00:19:51,790
simple<font color="#CCCCCC"> Windows program</font><font color="#E5E5E5"> so obviously this</font>

416
00:19:47,980 --> 00:19:53,080
is a<font color="#CCCCCC"> very</font><font color="#E5E5E5"> interesting attack surface so</font>

417
00:19:51,790 --> 00:19:55,240
in the<font color="#E5E5E5"> next couple of slides</font><font color="#CCCCCC"> I'm gonna</font>

418
00:19:53,080 --> 00:19:58,270
first give you an overview of how<font color="#CCCCCC"> the</font>

419
00:19:55,240 --> 00:20:00,700
<font color="#E5E5E5">mailbox</font><font color="#CCCCCC"> works and then I'm gonna</font><font color="#E5E5E5"> show</font>

420
00:19:58,270 --> 00:20:02,410
you some<font color="#E5E5E5"> bugs and design mistakes that</font>

421
00:20:00,700 --> 00:20:04,390
exist in some of those commands<font color="#E5E5E5"> and how</font>

422
00:20:02,410 --> 00:20:07,300
you can use<font color="#CCCCCC"> them to</font><font color="#E5E5E5"> bypass security</font>

423
00:20:04,390 --> 00:20:13,120
features<font color="#CCCCCC"> and in some cases even gain</font>

424
00:20:07,300 --> 00:20:16,659
code execution<font color="#E5E5E5"> on the PSP so first about</font>

425
00:20:13,120 --> 00:20:18,310
how mailbox<font color="#CCCCCC"> works</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> you have a</font>

426
00:20:16,660 --> 00:20:21,040
set<font color="#CCCCCC"> of registers</font>

427
00:20:18,310 --> 00:20:24,040
<font color="#CCCCCC">that the PSP exposes</font><font color="#E5E5E5"> to memory mapped</font>

428
00:20:21,040 --> 00:20:27,010
i/o<font color="#E5E5E5"> and when you want</font><font color="#CCCCCC"> to send a command</font>

429
00:20:24,040 --> 00:20:29,500
to<font color="#CCCCCC"> the PSP you write a command number to</font>

430
00:20:27,010 --> 00:20:31,960
one of the registers then you write to

431
00:20:29,500 --> 00:20:34,570
physical memory<font color="#E5E5E5"> the arguments</font><font color="#CCCCCC"> for that</font>

432
00:20:31,960 --> 00:20:37,630
command<font color="#E5E5E5"> and then you supply the PSP with</font>

433
00:20:34,570 --> 00:20:40,149
a pointer to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> to the arguments</font><font color="#CCCCCC"> for</font>

434
00:20:37,630 --> 00:20:42,970
<font color="#CCCCCC">the command and on the other</font><font color="#E5E5E5"> side the</font>

435
00:20:40,150 --> 00:20:46,750
PSP has<font color="#E5E5E5"> a process that continuously</font>

436
00:20:42,970 --> 00:20:49,570
<font color="#CCCCCC">palling for new commands so if it sees</font>

437
00:20:46,750 --> 00:20:51,480
<font color="#E5E5E5">the new command then it handles it and</font>

438
00:20:49,570 --> 00:20:57,360
<font color="#E5E5E5">it writes back the results to the</font>

439
00:20:51,480 --> 00:20:59,190
same shared buffer<font color="#E5E5E5"> in RAM so this is a</font>

440
00:20:57,360 --> 00:21:01,439
partial<font color="#CCCCCC"> list of</font><font color="#E5E5E5"> the commands you can</font>

441
00:20:59,190 --> 00:21:04,020
<font color="#E5E5E5">send the PSP and we</font><font color="#CCCCCC"> actually got this</font>

442
00:21:01,440 --> 00:21:06,030
from<font color="#CCCCCC"> a header file that we found as part</font>

443
00:21:04,020 --> 00:21:11,090
of the core<font color="#E5E5E5"> bridge project that's open</font>

444
00:21:06,030 --> 00:21:13,770
source<font color="#CCCCCC"> BIOS and it's there because aim D</font>

445
00:21:11,090 --> 00:21:15,810
did some contributions that<font color="#E5E5E5"> are projects</font>

446
00:21:13,770 --> 00:21:20,040
who they can<font color="#E5E5E5"> have like very limited</font>

447
00:21:15,810 --> 00:21:22,310
basic support<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the PSP</font><font color="#E5E5E5"> so we have</font>

448
00:21:20,040 --> 00:21:24,440
some<font color="#CCCCCC"> information there that you can use</font>

449
00:21:22,310 --> 00:21:29,250
and I'm going<font color="#CCCCCC"> to talk about some of</font><font color="#E5E5E5"> the</font>

450
00:21:24,440 --> 00:21:31,290
commands<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> can send and the first</font>

451
00:21:29,250 --> 00:21:34,880
one I'm gonna cover is command number

452
00:21:31,290 --> 00:21:37,800
<font color="#CCCCCC">eight and this command is pretty simple</font>

453
00:21:34,880 --> 00:21:41,640
this command accepts<font color="#CCCCCC"> as</font><font color="#E5E5E5"> input an address</font>

454
00:21:37,800 --> 00:21:43,230
in<font color="#E5E5E5"> physical</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> and a size and then</font>

455
00:21:41,640 --> 00:21:46,350
<font color="#E5E5E5">it</font><font color="#CCCCCC"> takes that block of memory and</font>

456
00:21:43,230 --> 00:21:48,990
compute some kind of<font color="#E5E5E5"> H Mac on it and it</font>

457
00:21:46,350 --> 00:21:51,120
returns as a result<font color="#E5E5E5"> a 32 byte H Mac and</font>

458
00:21:48,990 --> 00:21:56,120
writes it to<font color="#CCCCCC"> the end</font><font color="#E5E5E5"> of the buffer</font><font color="#CCCCCC"> you</font>

459
00:21:51,120 --> 00:21:58,620
supply it so that's<font color="#E5E5E5"> pretty simple</font><font color="#CCCCCC"> and</font>

460
00:21:56,120 --> 00:22:01,830
what we can do with this command<font color="#E5E5E5"> is</font>

461
00:21:58,620 --> 00:22:03,989
basically we can<font color="#E5E5E5"> access PSP to compute</font>

462
00:22:01,830 --> 00:22:06,919
this<font color="#E5E5E5"> H Mac on some</font><font color="#CCCCCC"> arbitrary location</font>

463
00:22:03,990 --> 00:22:13,380
physical memory<font color="#E5E5E5"> and give it</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to us</font>

464
00:22:06,920 --> 00:22:15,660
but what about memory locations<font color="#E5E5E5"> that we</font>

465
00:22:13,380 --> 00:22:20,040
shouldn't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> from a</font>

466
00:22:15,660 --> 00:22:22,340
Windows<font color="#CCCCCC"> program so some example of</font><font color="#E5E5E5"> that</font>

467
00:22:20,040 --> 00:22:25,470
is system<font color="#E5E5E5"> management mode memory and</font>

468
00:22:22,340 --> 00:22:28,290
another<font color="#E5E5E5"> example is what if I'm running</font>

469
00:22:25,470 --> 00:22:30,140
inside<font color="#E5E5E5"> a virtual machine</font><font color="#CCCCCC"> and there's a</font>

470
00:22:28,290 --> 00:22:32,700
second<font color="#CCCCCC"> virtual machine in that same</font>

471
00:22:30,140 --> 00:22:35,790
<font color="#E5E5E5">hardware and I shouldn't be able to</font>

472
00:22:32,700 --> 00:22:38,340
<font color="#CCCCCC">access the second machines</font><font color="#E5E5E5"> memory and an</font>

473
00:22:35,790 --> 00:22:39,750
<font color="#E5E5E5">example of that is credential guard</font><font color="#CCCCCC"> so</font>

474
00:22:38,340 --> 00:22:42,290
I'm gonna give<font color="#E5E5E5"> you a bit of background</font>

475
00:22:39,750 --> 00:22:44,880
on credentials<font color="#CCCCCC"> for</font><font color="#E5E5E5"> those who don't know</font>

476
00:22:42,290 --> 00:22:46,909
<font color="#E5E5E5">true national guard is</font><font color="#CCCCCC"> a technology by</font>

477
00:22:44,880 --> 00:22:49,200
Microsoft<font color="#E5E5E5"> that's designed to prevent</font>

478
00:22:46,910 --> 00:22:51,390
credential theft so someone's stealing

479
00:22:49,200 --> 00:22:56,040
your password hashes or<font color="#E5E5E5"> Kerberos tickets</font>

480
00:22:51,390 --> 00:22:58,710
and back in the day when an attacker got

481
00:22:56,040 --> 00:23:01,260
<font color="#E5E5E5">ahold of your computer</font><font color="#CCCCCC"> the natural</font><font color="#E5E5E5"> thing</font>

482
00:22:58,710 --> 00:23:03,570
to<font color="#E5E5E5"> do was to</font><font color="#CCCCCC"> dump else's memory and just</font>

483
00:23:01,260 --> 00:23:04,750
extract password hashes and Kerberos

484
00:23:03,570 --> 00:23:07,168
tickets and use that

485
00:23:04,750 --> 00:23:09,549
spread throughout the<font color="#CCCCCC"> network</font><font color="#E5E5E5"> and</font>

486
00:23:07,169 --> 00:23:11,860
Microsoft wanted<font color="#E5E5E5"> to stop this so they</font>

487
00:23:09,549 --> 00:23:15,510
designed this technology<font color="#E5E5E5"> that isolates</font>

488
00:23:11,860 --> 00:23:17,889
financials<font color="#E5E5E5"> to a separate virtual machine</font>

489
00:23:15,510 --> 00:23:20,620
<font color="#E5E5E5">so if you have credential gutter enabled</font>

490
00:23:17,890 --> 00:23:23,710
when you start up your computer<font color="#CCCCCC"> the</font>

491
00:23:20,620 --> 00:23:25,510
hypervisor<font color="#E5E5E5"> is started that creates two</font>

492
00:23:23,710 --> 00:23:28,480
separate<font color="#E5E5E5"> virtual machines</font><font color="#CCCCCC"> the first is</font>

493
00:23:25,510 --> 00:23:31,059
called VT l0 it's just running Windows

494
00:23:28,480 --> 00:23:33,940
and the second virtual<font color="#E5E5E5"> machine called VT</font>

495
00:23:31,059 --> 00:23:36,760
l1 is running a<font color="#E5E5E5"> customized kernel that</font>

496
00:23:33,940 --> 00:23:40,179
secures your password hashes<font color="#CCCCCC"> and other</font>

497
00:23:36,760 --> 00:23:41,890
credentials<font color="#E5E5E5"> so if an attacker gets code</font>

498
00:23:40,179 --> 00:23:43,480
execution in your machine<font color="#E5E5E5"> he's not</font><font color="#CCCCCC"> going</font>

499
00:23:41,890 --> 00:23:52,059
to<font color="#E5E5E5"> be able to extract those credentials</font>

500
00:23:43,480 --> 00:23:55,390
<font color="#CCCCCC">because they're</font><font color="#E5E5E5"> isolated by hardware but</font>

501
00:23:52,059 --> 00:23:57,928
the PSP<font color="#E5E5E5"> sets of the hardware relative so</font>

502
00:23:55,390 --> 00:24:02,020
it has full access to<font color="#E5E5E5"> physical</font><font color="#CCCCCC"> memory</font>

503
00:23:57,929 --> 00:24:04,539
including<font color="#CCCCCC"> VL</font><font color="#E5E5E5"> 0 and</font><font color="#CCCCCC"> V</font><font color="#E5E5E5"> tail 1 and it's not</font>

504
00:24:02,020 --> 00:24:08,230
aware<font color="#CCCCCC"> of any hypervisor or virtual</font>

505
00:24:04,539 --> 00:24:11,260
machines<font color="#E5E5E5"> in fact is not only it has</font>

506
00:24:08,230 --> 00:24:13,510
<font color="#E5E5E5">access to VT l1 it needs to have access</font>

507
00:24:11,260 --> 00:24:16,990
<font color="#E5E5E5">to</font><font color="#CCCCCC"> v-tail 1</font><font color="#E5E5E5"> because if you remember the</font>

508
00:24:13,510 --> 00:24:20,289
<font color="#CCCCCC">PSP is running a thermo TPM on top of it</font>

509
00:24:16,990 --> 00:24:22,120
and TPM<font color="#CCCCCC"> is responsible for a lot of</font>

510
00:24:20,289 --> 00:24:24,970
storage<font color="#E5E5E5"> of encryption keys and</font>

511
00:24:22,120 --> 00:24:26,918
encryption operations and<font color="#E5E5E5"> VT l1 the</font>

512
00:24:24,970 --> 00:24:30,460
credential art makes a lot of<font color="#CCCCCC"> use of the</font>

513
00:24:26,919 --> 00:24:35,409
<font color="#E5E5E5">TPM so essentially the piece</font><font color="#CCCCCC"> P needs</font><font color="#E5E5E5"> to</font>

514
00:24:30,460 --> 00:24:38,799
<font color="#E5E5E5">be able to access that memory so what if</font>

515
00:24:35,409 --> 00:24:42,429
we were to act<font color="#E5E5E5"> to ask the PSP to compute</font>

516
00:24:38,799 --> 00:24:45,070
an H<font color="#E5E5E5"> Mac and give it as input a location</font>

517
00:24:42,429 --> 00:24:48,100
that's that belongs<font color="#E5E5E5"> to the second</font>

518
00:24:45,070 --> 00:24:52,980
<font color="#CCCCCC">virtual machine to credential guard when</font>

519
00:24:48,100 --> 00:24:56,260
the PSP will gladly do<font color="#CCCCCC"> it for us</font><font color="#E5E5E5"> but</font>

520
00:24:52,980 --> 00:24:59,110
this<font color="#E5E5E5"> is not obviously interesting</font>

521
00:24:56,260 --> 00:25:00,908
because<font color="#CCCCCC"> does</font><font color="#E5E5E5"> this H Mac that's being</font>

522
00:24:59,110 --> 00:25:03,399
computed but<font color="#E5E5E5"> we don't know the</font><font color="#CCCCCC"> secret</font>

523
00:25:00,909 --> 00:25:07,210
key<font color="#CCCCCC"> to that H max so we got this blob</font>

524
00:25:03,400 --> 00:25:10,240
back and not sure what we<font color="#E5E5E5"> can do with it</font>

525
00:25:07,210 --> 00:25:13,659
<font color="#CCCCCC">but there's a</font><font color="#E5E5E5"> small trick we can</font><font color="#CCCCCC"> do</font>

526
00:25:10,240 --> 00:25:16,179
that's gonna<font color="#CCCCCC"> make this more useful so</font>

527
00:25:13,659 --> 00:25:17,980
what if we ask the<font color="#E5E5E5"> PSP to compute an H</font>

528
00:25:16,179 --> 00:25:21,370
<font color="#E5E5E5">Mac on a single byte</font>

529
00:25:17,980 --> 00:25:25,419
well then we get a 32<font color="#CCCCCC"> byte H Mac that</font>

530
00:25:21,370 --> 00:25:26,860
corresponds to<font color="#CCCCCC"> that single byte but well</font>

531
00:25:25,419 --> 00:25:29,169
if you build a translation<font color="#CCCCCC"> table for</font>

532
00:25:26,860 --> 00:25:31,330
every<font color="#E5E5E5"> single byte possibility well then</font>

533
00:25:29,169 --> 00:25:34,659
we can just<font color="#E5E5E5"> query the piece fee and give</font>

534
00:25:31,330 --> 00:25:37,059
it a location<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example of ETL</font><font color="#E5E5E5"> one for</font>

535
00:25:34,659 --> 00:25:40,210
single byte and<font color="#E5E5E5"> then we can convert that</font>

536
00:25:37,059 --> 00:25:42,700
<font color="#E5E5E5">to</font><font color="#CCCCCC"> their original byte</font><font color="#E5E5E5"> and by doing this</font>

537
00:25:40,210 --> 00:25:45,669
repeatedly<font color="#E5E5E5"> without knowing actually the</font>

538
00:25:42,700 --> 00:25:49,240
<font color="#E5E5E5">secret key we can dump in trial blocks</font>

539
00:25:45,669 --> 00:25:52,000
of memory<font color="#CCCCCC"> and take is this step forward</font>

540
00:25:49,240 --> 00:25:55,350
<font color="#E5E5E5">we can use this trick</font><font color="#CCCCCC"> to dump the</font><font color="#E5E5E5"> whole</font>

541
00:25:52,000 --> 00:25:58,120
<font color="#CCCCCC">v2v tl-one</font><font color="#E5E5E5"> memory and extract whatever</font>

542
00:25:55,350 --> 00:26:01,870
passwords<font color="#E5E5E5"> and hashes and Kerberos</font>

543
00:25:58,120 --> 00:26:04,149
tickets that<font color="#CCCCCC"> exist there so this is a</font>

544
00:26:01,870 --> 00:26:06,939
pretty interesting example<font color="#E5E5E5"> of how the</font>

545
00:26:04,149 --> 00:26:08,679
PSP can be used to cross security

546
00:26:06,940 --> 00:26:14,570
boundaries

547
00:26:08,680 --> 00:26:14,570
[Applause]

548
00:26:15,429 --> 00:26:19,899
<font color="#E5E5E5">all right the next</font><font color="#CCCCCC"> thing I'm going to</font>

549
00:26:17,809 --> 00:26:21,678
talk<font color="#E5E5E5"> to you about is a different command</font>

550
00:26:19,899 --> 00:26:23,649
and it's<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be a little more</font>

551
00:26:21,679 --> 00:26:28,789
complex

552
00:26:23,649 --> 00:26:30,289
this command<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> SMM info and what</font>

553
00:26:28,789 --> 00:26:32,539
it does is it's responsible for

554
00:26:30,289 --> 00:26:37,729
<font color="#E5E5E5">initializing this communication channel</font>

555
00:26:32,539 --> 00:26:40,129
between<font color="#CCCCCC"> the PSP and the bios</font><font color="#E5E5E5"> and first</font>

556
00:26:37,729 --> 00:26:42,019
I'm<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> tell you why they need this</font>

557
00:26:40,129 --> 00:26:43,488
communicate communication channel at all

558
00:26:42,019 --> 00:26:45,409
<font color="#CCCCCC">and then I'm going to tell you how we</font>

559
00:26:43,489 --> 00:26:49,729
can<font color="#E5E5E5"> use this command to cause some</font>

560
00:26:45,409 --> 00:26:53,089
trouble so first why this<font color="#E5E5E5"> communication</font>

561
00:26:49,729 --> 00:26:56,659
channel exists so the PSP<font color="#E5E5E5"> doesn't come</font>

562
00:26:53,089 --> 00:26:58,940
with its own non-volatile storage<font color="#E5E5E5"> but</font>

563
00:26:56,659 --> 00:27:00,979
sometimes it needs things to persistent

564
00:26:58,940 --> 00:27:04,249
memory for example<font color="#CCCCCC"> the TPM that's</font>

565
00:27:00,979 --> 00:27:06,979
running<font color="#E5E5E5"> on top of the PSP needs to store</font>

566
00:27:04,249 --> 00:27:11,149
<font color="#E5E5E5">encryption keys sometimes</font><font color="#CCCCCC"> and what the</font>

567
00:27:06,979 --> 00:27:12,919
PSP does is it uses the system's<font color="#CCCCCC"> spi</font>

568
00:27:11,149 --> 00:27:14,869
<font color="#E5E5E5">flash chip which is just an external</font>

569
00:27:12,919 --> 00:27:18,589
<font color="#E5E5E5">memory chip that sits on the motherboard</font>

570
00:27:14,869 --> 00:27:21,199
<font color="#CCCCCC">and uses it</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> I said it's a bit</font>

571
00:27:18,589 --> 00:27:25,489
<font color="#E5E5E5">assistant storage and the way does this</font>

572
00:27:21,200 --> 00:27:28,849
is in order<font color="#E5E5E5"> to access this chip the PSP</font>

573
00:27:25,489 --> 00:27:31,249
needs to ask the<font color="#E5E5E5"> BIOS</font><font color="#CCCCCC"> to do it for him</font>

574
00:27:28,849 --> 00:27:34,279
so in essence the<font color="#CCCCCC"> bios acts as a</font><font color="#E5E5E5"> proxy</font>

575
00:27:31,249 --> 00:27:36,950
between<font color="#E5E5E5"> the PSP and this external memory</font>

576
00:27:34,279 --> 00:27:40,129
chip<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is done through</font><font color="#CCCCCC"> a</font>

577
00:27:36,950 --> 00:27:42,799
<font color="#CCCCCC">mechanism called</font><font color="#E5E5E5"> PSP</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> bios in which</font>

578
00:27:40,129 --> 00:27:45,799
there is<font color="#CCCCCC"> a shared buffer</font><font color="#E5E5E5"> in ram through</font>

579
00:27:42,799 --> 00:27:47,839
which the PSP just dispatches<font color="#E5E5E5"> requests</font>

580
00:27:45,799 --> 00:27:50,418
to read and write requests and then the

581
00:27:47,839 --> 00:27:53,779
<font color="#CCCCCC">bios picks it up and carries out</font><font color="#E5E5E5"> gets it</font>

582
00:27:50,419 --> 00:27:57,109
out through<font color="#CCCCCC"> forehead so let's go through</font>

583
00:27:53,779 --> 00:28:00,559
an<font color="#E5E5E5"> example let's say the PSP wants to</font>

584
00:27:57,109 --> 00:28:03,439
read from<font color="#E5E5E5"> spi flash the first thing it</font>

585
00:28:00,559 --> 00:28:06,109
<font color="#CCCCCC">does is it writes</font><font color="#E5E5E5"> a description of that</font>

586
00:28:03,440 --> 00:28:08,869
<font color="#E5E5E5">request to the shared buffer and then in</font>

587
00:28:06,109 --> 00:28:11,449
order<font color="#E5E5E5"> to let</font><font color="#CCCCCC"> the BIOS know that there's</font>

588
00:28:08,869 --> 00:28:13,839
a request<font color="#E5E5E5"> pending it's gonna generate a</font>

589
00:28:11,450 --> 00:28:16,999
<font color="#E5E5E5">system management interrupt to the CPU</font>

590
00:28:13,839 --> 00:28:19,279
<font color="#E5E5E5">and assistant management Rob basically</font>

591
00:28:16,999 --> 00:28:21,519
is an interrupt<font color="#CCCCCC"> that makes the CPU</font>

592
00:28:19,279 --> 00:28:24,019
immediately stop whatever<font color="#E5E5E5"> it's doing</font><font color="#CCCCCC"> and</font>

593
00:28:21,519 --> 00:28:25,400
jump straight to<font color="#E5E5E5"> system management mode</font>

594
00:28:24,019 --> 00:28:28,580
and

595
00:28:25,400 --> 00:28:32,330
then CPU is<font color="#CCCCCC"> going to execute</font><font color="#E5E5E5"> code that's</font>

596
00:28:28,580 --> 00:28:34,909
gonna handle this request<font color="#CCCCCC"> so once the</font>

597
00:28:32,330 --> 00:28:38,000
<font color="#E5E5E5">CPU is triggered it's going to pick up</font>

598
00:28:34,910 --> 00:28:41,540
this request and then it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to</font>

599
00:28:38,000 --> 00:28:43,790
make the read access to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> SPI flash</font>

600
00:28:41,540 --> 00:28:46,070
<font color="#E5E5E5">and then it's going to write those bytes</font>

601
00:28:43,790 --> 00:28:48,470
back to that same same shared buffer and

602
00:28:46,070 --> 00:28:54,020
<font color="#CCCCCC">rays and</font><font color="#E5E5E5"> interrupts back to the PSP and</font>

603
00:28:48,470 --> 00:28:56,750
<font color="#E5E5E5">the PSP is going to read that</font><font color="#CCCCCC"> resolve</font><font color="#E5E5E5"> so</font>

604
00:28:54,020 --> 00:29:02,960
now that we<font color="#CCCCCC"> know what the PSP</font><font color="#E5E5E5"> to BIOS is</font>

605
00:28:56,750 --> 00:29:05,630
let's go back<font color="#E5E5E5"> to the SMM info command so</font>

606
00:29:02,960 --> 00:29:09,050
as I<font color="#CCCCCC"> said SMM info is used to initialize</font>

607
00:29:05,630 --> 00:29:12,500
<font color="#CCCCCC">this communication</font><font color="#E5E5E5"> channel</font><font color="#CCCCCC"> psp2 bios and</font>

608
00:29:09,050 --> 00:29:15,740
it does it<font color="#CCCCCC"> by supplying the</font><font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> PSP</font>

609
00:29:12,500 --> 00:29:18,850
with two things first<font color="#E5E5E5"> it tells the PSP</font>

610
00:29:15,740 --> 00:29:22,070
where this shared buffer in<font color="#E5E5E5"> RAM is and</font>

611
00:29:18,850 --> 00:29:27,199
the second<font color="#E5E5E5"> thing is it provides a way</font>

612
00:29:22,070 --> 00:29:29,149
for<font color="#E5E5E5"> the PSP to generate an SMI and next</font>

613
00:29:27,200 --> 00:29:31,310
I'm going to<font color="#E5E5E5"> show</font><font color="#CCCCCC"> you how the PSP uses</font>

614
00:29:29,150 --> 00:29:35,990
this information to generate<font color="#CCCCCC"> a system</font>

615
00:29:31,310 --> 00:29:40,879
<font color="#E5E5E5">management or</font><font color="#CCCCCC"> app so as part</font><font color="#E5E5E5"> of the of</font>

616
00:29:35,990 --> 00:29:43,010
the SMM info command the PSP gets the

617
00:29:40,880 --> 00:29:46,490
estimate trigger<font color="#CCCCCC"> and Phil's truck that</font>

618
00:29:43,010 --> 00:29:48,080
<font color="#E5E5E5">you can see on the</font><font color="#CCCCCC"> screen and this</font><font color="#E5E5E5"> truck</font>

619
00:29:46,490 --> 00:29:51,020
contains two key pieces of<font color="#CCCCCC"> information</font>

620
00:29:48,080 --> 00:29:54,800
first<font color="#CCCCCC"> it contains</font><font color="#E5E5E5"> a location physical</font>

621
00:29:51,020 --> 00:29:58,040
memory and second it contains a bit mask

622
00:29:54,800 --> 00:30:01,550
<font color="#E5E5E5">and when the PSP wants to generate an</font>

623
00:29:58,040 --> 00:30:03,680
<font color="#E5E5E5">SMI is going to apply that base mask to</font>

624
00:30:01,550 --> 00:30:05,510
that<font color="#E5E5E5"> location in memory which</font><font color="#CCCCCC"> is</font>

625
00:30:03,680 --> 00:30:07,670
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> just flipping some bits in</font>

626
00:30:05,510 --> 00:30:10,310
<font color="#E5E5E5">that location in memory and that is</font>

627
00:30:07,670 --> 00:30:13,580
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> magically generate an SMI to</font>

628
00:30:10,310 --> 00:30:15,440
the CPU so let's go quickly over<font color="#E5E5E5"> the</font>

629
00:30:13,580 --> 00:30:18,590
fields that are in this struct

630
00:30:15,440 --> 00:30:20,870
so as far as the<font color="#CCCCCC"> S&M info command we</font>

631
00:30:18,590 --> 00:30:23,480
have<font color="#E5E5E5"> address which is just the address</font>

632
00:30:20,870 --> 00:30:26,989
<font color="#E5E5E5">to apply the bit mask to then we have</font>

633
00:30:23,480 --> 00:30:30,560
type which is always<font color="#CCCCCC"> 1 next</font><font color="#E5E5E5"> we have</font>

634
00:30:26,990 --> 00:30:33,170
value size which is used<font color="#E5E5E5"> to calculate</font>

635
00:30:30,560 --> 00:30:36,710
the<font color="#CCCCCC"> size of memory</font><font color="#E5E5E5"> to apply the bit mask</font>

636
00:30:33,170 --> 00:30:37,470
<font color="#E5E5E5">to and then we have add mask</font><font color="#CCCCCC"> and/or mask</font>

637
00:30:36,710 --> 00:30:40,500
that

638
00:30:37,470 --> 00:30:43,320
the bit masks to apply to generate the

639
00:30:40,500 --> 00:30:45,630
SMI so for example and mask is used<font color="#CCCCCC"> to</font>

640
00:30:43,320 --> 00:30:48,780
clear some bits and<font color="#CCCCCC"> our</font><font color="#E5E5E5"> address and then</font>

641
00:30:45,630 --> 00:30:54,140
or mask is<font color="#E5E5E5"> used to set some bits in</font><font color="#CCCCCC"> that</font>

642
00:30:48,780 --> 00:30:56,428
address so we control<font color="#E5E5E5"> all these fields</font>

643
00:30:54,140 --> 00:30:59,549
<font color="#E5E5E5">because we can send the SMI mental</font>

644
00:30:56,429 --> 00:31:01,500
commands ourselves and let's just look

645
00:30:59,549 --> 00:31:04,918
at<font color="#E5E5E5"> how the PSP handles this command</font>

646
00:31:01,500 --> 00:31:08,309
quickly so this<font color="#CCCCCC"> Hendra is really simple</font>

647
00:31:04,919 --> 00:31:10,380
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is not his fee code this is</font>

648
00:31:08,309 --> 00:31:13,668
just code that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> had converted to see</font>

649
00:31:10,380 --> 00:31:15,960
from<font color="#E5E5E5"> the arm code that runs on</font><font color="#CCCCCC"> a PSP</font>

650
00:31:13,669 --> 00:31:18,480
<font color="#E5E5E5">that all the central does is basically</font>

651
00:31:15,960 --> 00:31:22,440
takes the data from<font color="#CCCCCC"> the SMM info command</font>

652
00:31:18,480 --> 00:31:24,780
<font color="#E5E5E5">and it copies</font><font color="#CCCCCC"> it to PSP memory to</font>

653
00:31:22,440 --> 00:31:26,610
initialize its own structures nothing

654
00:31:24,780 --> 00:31:30,539
<font color="#E5E5E5">very</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> so there's no much</font>

655
00:31:26,610 --> 00:31:32,399
attack surface there but let's see how

656
00:31:30,539 --> 00:31:37,408
the PSP uses this information to

657
00:31:32,400 --> 00:31:41,909
<font color="#E5E5E5">generate an SMI so this is a piece of</font>

658
00:31:37,409 --> 00:31:44,730
code from the PSP<font color="#CCCCCC"> firmer that I've</font>

659
00:31:41,909 --> 00:31:48,570
converted to C and this<font color="#CCCCCC"> is basically</font>

660
00:31:44,730 --> 00:31:51,360
called for<font color="#E5E5E5"> every PSP Tobias request that</font>

661
00:31:48,570 --> 00:31:55,080
happens for<font color="#CCCCCC"> example if I send a TPM</font>

662
00:31:51,360 --> 00:31:57,750
command to<font color="#E5E5E5"> the PSP the end it needs to</font>

663
00:31:55,080 --> 00:31:59,939
access<font color="#CCCCCC"> SPF</font><font color="#E5E5E5"> flash it's gonna invoke this</font>

664
00:31:57,750 --> 00:32:05,190
routine which<font color="#E5E5E5"> is going to</font><font color="#CCCCCC"> generate an</font>

665
00:31:59,940 --> 00:32:06,750
ass a mile<font color="#E5E5E5"> and what this code does</font><font color="#CCCCCC"> is</font>

666
00:32:05,190 --> 00:32:09,179
very simple basically takes the data

667
00:32:06,750 --> 00:32:12,780
that<font color="#E5E5E5"> was set that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> S&M info</font><font color="#CCCCCC"> command</font>

668
00:32:09,179 --> 00:32:14,880
and it<font color="#E5E5E5"> uses it to do the same operation</font>

669
00:32:12,780 --> 00:32:16,440
<font color="#E5E5E5">I described earlier</font><font color="#CCCCCC"> to apply the bit</font>

670
00:32:14,880 --> 00:32:21,690
mask to that<font color="#E5E5E5"> location memory which is</font>

671
00:32:16,440 --> 00:32:24,870
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> generate an SMI but there's a</font>

672
00:32:21,690 --> 00:32:27,299
problem<font color="#CCCCCC"> in this code</font><font color="#E5E5E5"> somewhere so let me</font>

673
00:32:24,870 --> 00:32:32,520
go over<font color="#CCCCCC"> this code line by line</font><font color="#E5E5E5"> and let's</font>

674
00:32:27,299 --> 00:32:35,460
see the first<font color="#E5E5E5"> thing this code does is</font><font color="#CCCCCC"> it</font>

675
00:32:32,520 --> 00:32:38,158
takes SMI trigger info and then<font color="#E5E5E5"> it</font>

676
00:32:35,460 --> 00:32:41,700
sanity checks checks value<font color="#E5E5E5"> size and to</font>

677
00:32:38,159 --> 00:32:46,010
make sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> for and if it's not</font>

678
00:32:41,700 --> 00:32:46,010
<font color="#E5E5E5">for the code is going to error out</font>

679
00:32:46,200 --> 00:32:54,580
next word the PSP uses that<font color="#E5E5E5"> same</font>

680
00:32:49,780 --> 00:32:57,430
expression to calculate size and the

681
00:32:54,580 --> 00:33:00,610
size can<font color="#CCCCCC"> old before and then the</font><font color="#E5E5E5"> next</font>

682
00:32:57,430 --> 00:33:03,670
thing the PSP<font color="#E5E5E5"> Maps</font><font color="#CCCCCC"> trigger address which</font>

683
00:33:00,610 --> 00:33:07,270
is the address in physical memory<font color="#E5E5E5"> into</font>

684
00:33:03,670 --> 00:33:09,700
the PSP address space<font color="#E5E5E5"> in the last part</font>

685
00:33:07,270 --> 00:33:11,860
the<font color="#CCCCCC"> PSP reads the current value and</font>

686
00:33:09,700 --> 00:33:13,810
trigger address and he applies the bit

687
00:33:11,860 --> 00:33:19,899
<font color="#E5E5E5">mask to it and then it writes back the</font>

688
00:33:13,810 --> 00:33:22,510
new value back to<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> and if you look</font>

689
00:33:19,900 --> 00:33:25,420
closely you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> that as</font><font color="#E5E5E5"> part of the</font>

690
00:33:22,510 --> 00:33:28,000
mem copy operation<font color="#E5E5E5"> there is a copy of</font>

691
00:33:25,420 --> 00:33:30,520
size bytes<font color="#E5E5E5"> into a variable</font><font color="#CCCCCC"> that can only</font>

692
00:33:28,000 --> 00:33:33,040
hold four bytes but that should<font color="#E5E5E5"> be fine</font>

693
00:33:30,520 --> 00:33:39,100
<font color="#E5E5E5">because size can only be</font><font color="#CCCCCC"> four bytes</font>

694
00:33:33,040 --> 00:33:40,840
<font color="#E5E5E5">right</font><font color="#CCCCCC"> we have that if</font><font color="#E5E5E5"> statement but</font>

695
00:33:39,100 --> 00:33:44,199
<font color="#CCCCCC">value size is actually</font><font color="#E5E5E5"> the reference</font>

696
00:33:40,840 --> 00:33:46,240
twice once when<font color="#CCCCCC"> it's sanity check at the</font>

697
00:33:44,200 --> 00:33:49,300
beginning on the code and second time

698
00:33:46,240 --> 00:33:51,640
when size is<font color="#E5E5E5"> calculated and let me</font>

699
00:33:49,300 --> 00:33:54,010
<font color="#E5E5E5">remind you</font><font color="#CCCCCC"> that the PSP has</font><font color="#E5E5E5"> a separate</font>

700
00:33:51,640 --> 00:33:58,330
process<font color="#E5E5E5"> that's always</font><font color="#CCCCCC"> palling to check</font>

701
00:33:54,010 --> 00:34:01,000
if<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a new mailbox command so what</font>

702
00:33:58,330 --> 00:34:03,879
if we were to<font color="#E5E5E5"> send an SNMP info</font><font color="#CCCCCC"> command</font>

703
00:34:01,000 --> 00:34:07,060
again and we time it<font color="#E5E5E5"> just right that's</font>

704
00:34:03,880 --> 00:34:09,040
going to arrive just after this<font color="#E5E5E5"> check</font>

705
00:34:07,060 --> 00:34:13,210
has been<font color="#E5E5E5"> done but before slice is being</font>

706
00:34:09,040 --> 00:34:15,550
calculated<font color="#E5E5E5"> well we can then switch value</font>

707
00:34:13,210 --> 00:34:18,880
size after<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> already been checked and</font>

708
00:34:15,550 --> 00:34:23,140
then<font color="#CCCCCC"> that's was gonna be anything we</font>

709
00:34:18,880 --> 00:34:26,620
want<font color="#E5E5E5"> and we can set value size to</font>

710
00:34:23,139 --> 00:34:32,230
something<font color="#CCCCCC"> like 8</font><font color="#E5E5E5"> and then size will end</font>

711
00:34:26,620 --> 00:34:34,330
up being 256<font color="#E5E5E5"> and then when we reach the</font>

712
00:34:32,230 --> 00:34:38,320
first mem copy it's going to copy an

713
00:34:34,330 --> 00:34:41,380
arbitrary amount<font color="#CCCCCC"> of bytes from</font><font color="#E5E5E5"> a place</font>

714
00:34:38,320 --> 00:34:46,030
<font color="#CCCCCC">in memory</font><font color="#E5E5E5"> that we control directly into</font>

715
00:34:41,380 --> 00:34:49,030
the PSP stack<font color="#E5E5E5"> and this is going</font><font color="#CCCCCC"> to</font>

716
00:34:46,030 --> 00:34:51,640
<font color="#E5E5E5">trigger a stack overflow which is going</font>

717
00:34:49,030 --> 00:34:56,500
<font color="#E5E5E5">to be very</font><font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> advantage of</font>

718
00:34:51,639 --> 00:34:59,540
<font color="#E5E5E5">because the PSP doesn't have any exploit</font>

719
00:34:56,500 --> 00:35:02,420
mitigation no stack cookies no<font color="#CCCCCC"> ASLR</font>

720
00:34:59,540 --> 00:35:04,250
and nothing<font color="#E5E5E5"> like that so what we're</font>

721
00:35:02,420 --> 00:35:05,630
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> do to exploit this vlog is very</font>

722
00:35:04,250 --> 00:35:07,510
simple we're gonna have a Windows

723
00:35:05,630 --> 00:35:10,220
program<font color="#E5E5E5"> that's gonna have two threads</font>

724
00:35:07,510 --> 00:35:12,680
the first thread is going<font color="#E5E5E5"> to</font>

725
00:35:10,220 --> 00:35:15,950
continuously send TPM commands<font color="#E5E5E5"> which is</font>

726
00:35:12,680 --> 00:35:17,810
going to invoke this flow and the second

727
00:35:15,950 --> 00:35:20,960
thread is going<font color="#E5E5E5"> to repeat the lease and</font>

728
00:35:17,810 --> 00:35:22,460
<font color="#CCCCCC">SMM info command and eventually the</font>

729
00:35:20,960 --> 00:35:25,880
<font color="#E5E5E5">timings going to be just right</font><font color="#CCCCCC"> and we're</font>

730
00:35:22,460 --> 00:35:29,030
gonna<font color="#E5E5E5"> have the stack</font><font color="#CCCCCC"> overflow and next</font>

731
00:35:25,880 --> 00:35:32,600
we have<font color="#E5E5E5"> a demo of this vulnerability to</font>

732
00:35:29,030 --> 00:35:34,400
achieve code execution on the<font color="#CCCCCC"> PSP</font><font color="#E5E5E5"> and in</font>

733
00:35:32,600 --> 00:35:37,670
this demo we're gonna patch some code

734
00:35:34,400 --> 00:35:42,340
inside<font color="#CCCCCC"> the PSP firmer to make a mailbox</font>

735
00:35:37,670 --> 00:35:42,340
command<font color="#E5E5E5"> return some interesting after</font>

736
00:35:42,730 --> 00:35:45,730
right

737
00:35:53,200 --> 00:35:58,899
so first I'm gonna run this script which

738
00:35:56,380 --> 00:36:02,530
<font color="#E5E5E5">is going to win this</font><font color="#CCCCCC"> race condition a</font>

739
00:35:58,900 --> 00:36:05,140
couple times and this<font color="#E5E5E5"> is a multi-stage</font>

740
00:36:02,530 --> 00:36:09,369
payload so it's<font color="#E5E5E5"> gonna win this race</font>

741
00:36:05,140 --> 00:36:14,680
actually<font color="#E5E5E5"> like three times and after</font>

742
00:36:09,369 --> 00:36:17,799
<font color="#CCCCCC">couple time is gonna succeed and</font><font color="#E5E5E5"> it's</font>

743
00:36:14,680 --> 00:36:20,368
<font color="#E5E5E5">gonna get</font><font color="#CCCCCC"> coaching on PSP</font><font color="#E5E5E5"> and patch some</font>

744
00:36:17,799 --> 00:36:20,369
<font color="#CCCCCC">firmware</font><font color="#E5E5E5"> code</font>

745
00:36:32,200 --> 00:36:41,439
<font color="#CCCCCC">alright so next we're</font><font color="#E5E5E5"> gonna open</font><font color="#CCCCCC"> read</font>

746
00:36:36,910 --> 00:36:45,460
<font color="#CCCCCC">write everything</font><font color="#E5E5E5"> again and</font><font color="#CCCCCC"> now we're</font>

747
00:36:41,440 --> 00:36:49,540
gonna run the get version command<font color="#E5E5E5"> once</font>

748
00:36:45,460 --> 00:36:51,599
again<font color="#E5E5E5"> and let's see what we get</font><font color="#CCCCCC"> this</font>

749
00:36:49,540 --> 00:36:51,599
time

750
00:37:08,870 --> 00:37:19,330
<font color="#E5E5E5">all right this time we got</font><font color="#CCCCCC"> CTS laughs</font>

751
00:37:12,440 --> 00:37:21,560
[Applause]

752
00:37:19,330 --> 00:37:29,000
right for the next<font color="#E5E5E5"> part</font>

753
00:37:21,560 --> 00:37:32,150
I'm gonna hand it over to<font color="#E5E5E5"> ito so after</font>

754
00:37:29,000 --> 00:37:34,970
all of<font color="#E5E5E5"> this we</font><font color="#CCCCCC"> asked</font><font color="#E5E5E5"> ourselves</font><font color="#CCCCCC"> can these</font>

755
00:37:32,150 --> 00:37:38,000
<font color="#E5E5E5">be</font><font color="#CCCCCC"> the flaws be used practically</font><font color="#E5E5E5"> in a</font>

756
00:37:34,970 --> 00:37:39,890
<font color="#CCCCCC">cyberattack and the answer is yes and</font>

757
00:37:38,000 --> 00:37:42,080
here is<font color="#CCCCCC"> just one example so or</font><font color="#E5E5E5"> you</font>

758
00:37:39,890 --> 00:37:43,850
mentioned earlier<font color="#E5E5E5"> Microsoft solution</font>

759
00:37:42,080 --> 00:37:46,970
against credential theft called

760
00:37:43,850 --> 00:37:49,370
credential guard in he mentioned

761
00:37:46,970 --> 00:37:50,870
credential guard<font color="#E5E5E5"> puts passwords and</font>

762
00:37:49,370 --> 00:37:53,600
encryption keys outside<font color="#CCCCCC"> the reach of</font>

763
00:37:50,870 --> 00:37:56,779
attackers<font color="#CCCCCC"> by placing them on a separate</font>

764
00:37:53,600 --> 00:37:59,029
<font color="#CCCCCC">virtual machine if you've ever</font><font color="#E5E5E5"> been part</font>

765
00:37:56,780 --> 00:38:00,830
of a red team<font color="#CCCCCC"> you must have used</font>

766
00:37:59,030 --> 00:38:05,440
mimikatz<font color="#CCCCCC"> who's the author is somewhere</font>

767
00:38:00,830 --> 00:38:10,220
in the crowd how to steal credentials

768
00:38:05,440 --> 00:38:11,750
and if you haven't let's see<font color="#CCCCCC"> four</font><font color="#E5E5E5"> it's</font>

769
00:38:10,220 --> 00:38:12,439
like<font color="#CCCCCC"> and what happens when you run</font>

770
00:38:11,750 --> 00:38:14,270
<font color="#CCCCCC">mimikatz</font>

771
00:38:12,440 --> 00:38:21,610
on a machine<font color="#E5E5E5"> with credential guard</font>

772
00:38:14,270 --> 00:38:21,610
enables wait

773
00:38:22,120 --> 00:38:25,380
<font color="#CCCCCC">oh I press</font>

774
00:38:29,280 --> 00:38:31,910
<font color="#E5E5E5">okay</font>

775
00:38:36,700 --> 00:38:41,439
do note<font color="#CCCCCC"> that this same</font><font color="#E5E5E5"> D is actually a</font>

776
00:38:39,549 --> 00:38:45,509
<font color="#CCCCCC">remote PSX the connection</font><font color="#E5E5E5"> into the</font>

777
00:38:41,440 --> 00:38:45,510
<font color="#E5E5E5">target and I'm running mimic</font><font color="#CCCCCC"> our turrets</font>

778
00:38:55,700 --> 00:39:00,240
so you can see the password<font color="#E5E5E5"> is missing</font>

779
00:38:58,110 --> 00:39:02,490
and instead we got<font color="#E5E5E5"> a meaningless</font>

780
00:39:00,240 --> 00:39:05,759
encrypted blob<font color="#CCCCCC"> the key to decrypt that</font>

781
00:39:02,490 --> 00:39:09,299
<font color="#E5E5E5">blob is on the other VM</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there is no</font>

782
00:39:05,760 --> 00:39:11,400
way for<font color="#E5E5E5"> us to to get to the key so again</font>

783
00:39:09,300 --> 00:39:12,720
the idea<font color="#CCCCCC"> is to use a virtual machine</font><font color="#E5E5E5"> for</font>

784
00:39:11,400 --> 00:39:18,500
<font color="#CCCCCC">segregation which is enforced</font><font color="#E5E5E5"> by</font>

785
00:39:12,720 --> 00:39:21,600
<font color="#E5E5E5">hardware but what if we had</font><font color="#CCCCCC"> AMD flaws</font>

786
00:39:18,500 --> 00:39:24,830
it turns out you can<font color="#CCCCCC"> create</font><font color="#E5E5E5"> a bypass</font><font color="#CCCCCC"> for</font>

787
00:39:21,600 --> 00:39:27,299
<font color="#CCCCCC">credential guard</font><font color="#E5E5E5"> in three simple steps</font>

788
00:39:24,830 --> 00:39:29,069
<font color="#E5E5E5">first we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use either a master</font>

789
00:39:27,300 --> 00:39:34,020
key or rise and fall to inject code into

790
00:39:29,070 --> 00:39:36,510
<font color="#CCCCCC">the PSP</font><font color="#E5E5E5"> then we're going to use the PSP</font>

791
00:39:34,020 --> 00:39:40,560
<font color="#E5E5E5">is highly privileged DMA to inject code</font>

792
00:39:36,510 --> 00:39:42,270
into credential<font color="#E5E5E5"> virtual machine finally</font>

793
00:39:40,560 --> 00:39:44,430
our solution is<font color="#E5E5E5"> going to call an</font>

794
00:39:42,270 --> 00:39:47,040
undocumented internal function called

795
00:39:44,430 --> 00:39:51,450
<font color="#CCCCCC">LSA as</font><font color="#E5E5E5"> you decrypt</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> decrypt the blob</font>

796
00:39:47,040 --> 00:39:54,690
that you saw earlier<font color="#E5E5E5"> so we built our own</font>

797
00:39:51,450 --> 00:39:56,970
version of<font color="#CCCCCC"> mimikatz that bypasses</font>

798
00:39:54,690 --> 00:40:00,560
credential guards on<font color="#CCCCCC"> unpurged AMD</font>

799
00:39:56,970 --> 00:40:00,560
machines<font color="#E5E5E5"> so let's see this working</font>

800
00:40:26,520 --> 00:40:33,540
so you can see you<font color="#E5E5E5"> have the password</font>

801
00:40:29,720 --> 00:40:43,040
<font color="#CCCCCC">coming in all the way from the other</font>

802
00:40:33,540 --> 00:40:43,040
<font color="#E5E5E5">virtual machine</font><font color="#CCCCCC"> all right thank you</font>

803
00:40:48,070 --> 00:40:55,860
I think we have some Q&A time<font color="#E5E5E5"> yeah maybe</font>

804
00:40:56,430 --> 00:41:02,190
<font color="#CCCCCC">think</font><font color="#E5E5E5"> so if you have any questions I</font>

805
00:40:59,410 --> 00:41:09,299
would be<font color="#CCCCCC"> happy to</font><font color="#E5E5E5"> answer yeah with the</font>

806
00:41:02,190 --> 00:41:09,300
thing yeah

807
00:41:11,650 --> 00:41:19,590
this this research took<font color="#CCCCCC"> 8 months and we</font>

808
00:41:16,090 --> 00:41:19,590
we had seven people<font color="#E5E5E5"> working on it</font>

809
00:41:20,610 --> 00:41:24,420
anything<font color="#CCCCCC"> else</font><font color="#E5E5E5"> yes</font>

810
00:41:30,870 --> 00:41:35,160
we haven't<font color="#E5E5E5"> done</font><font color="#CCCCCC"> research into the</font><font color="#E5E5E5"> Intel</font>

811
00:41:33,540 --> 00:41:38,310
management engine<font color="#E5E5E5"> there is another group</font>

812
00:41:35,160 --> 00:41:40,819
that<font color="#E5E5E5"> did that but I can't really answer</font>

813
00:41:38,310 --> 00:41:50,220
it<font color="#CCCCCC"> I</font><font color="#E5E5E5"> read the research awhile ago but um</font>

814
00:41:40,820 --> 00:41:50,260
we<font color="#E5E5E5"> only did AMD research</font><font color="#CCCCCC"> all right thank</font>

815
00:41:50,220 --> 00:41:52,359
you

816
00:41:50,260 --> 00:41:55,709
[Applause]

817
00:41:52,360 --> 00:41:55,709
[Music]

