1
00:00:00,000 --> 00:00:15,690
[Music]

2
00:00:13,020 --> 00:00:18,210
I am<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> at this cup</font><font color="#E5E5E5"> aka QWERTY or</font>

3
00:00:15,690 --> 00:00:20,790
uirp<font color="#CCCCCC"> and I've</font><font color="#E5E5E5"> actually given this talk</font>

4
00:00:18,210 --> 00:00:23,820
<font color="#CCCCCC">already</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> changed some stuff</font>

5
00:00:20,790 --> 00:00:25,950
here but there was some technical<font color="#CCCCCC"> issue</font>

6
00:00:23,820 --> 00:00:28,950
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the first time I gave</font><font color="#E5E5E5"> this talk and</font>

7
00:00:25,950 --> 00:00:31,710
<font color="#E5E5E5">so when in the video was recorded my</font>

8
00:00:28,950 --> 00:00:35,190
voice was dubbed in Chinese and it was

9
00:00:31,710 --> 00:00:36,510
kind of a issue because I believe the

10
00:00:35,190 --> 00:00:38,040
talk is it very<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> and many</font>

11
00:00:36,510 --> 00:00:43,010
<font color="#E5E5E5">people were not</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to understand it</font>

12
00:00:38,040 --> 00:00:46,019
due to<font color="#E5E5E5"> that so life as an iOS attacker</font>

13
00:00:43,010 --> 00:00:49,890
as I mentioned I am a look at a desk<font color="#CCCCCC"> oh</font>

14
00:00:46,020 --> 00:00:52,050
<font color="#CCCCCC">ok a QWERTY or</font><font color="#E5E5E5"> UI</font><font color="#CCCCCC"> petesy it's a tricky</font>

15
00:00:49,890 --> 00:00:56,610
nickname<font color="#CCCCCC"> I do lose my passport fairly</font>

16
00:00:52,050 --> 00:00:59,400
often<font color="#E5E5E5"> I am actually employed</font>

17
00:00:56,610 --> 00:01:01,500
self-employed if that counts

18
00:00:59,400 --> 00:01:06,780
<font color="#E5E5E5">I a security researcher</font><font color="#CCCCCC"> kjc</font>

19
00:01:01,500 --> 00:01:10,380
<font color="#E5E5E5">international research srl I've owned an</font>

20
00:01:06,780 --> 00:01:12,869
iPhone's<font color="#E5E5E5"> an</font><font color="#CCCCCC"> iPhone since iOS</font><font color="#E5E5E5"> - I was</font>

21
00:01:10,380 --> 00:01:16,100
very young kid<font color="#E5E5E5"> and I was really into</font>

22
00:01:12,869 --> 00:01:19,860
this thing<font color="#CCCCCC"> called jailbreaking back then</font>

23
00:01:16,100 --> 00:01:23,250
and come around iOS 10.2<font color="#E5E5E5"> I</font><font color="#CCCCCC"> actually</font>

24
00:01:19,860 --> 00:01:26,100
released my<font color="#E5E5E5"> first public jailbreak that</font>

25
00:01:23,250 --> 00:01:28,740
was<font color="#E5E5E5"> widely used I have released</font>

26
00:01:26,100 --> 00:01:31,740
previously some minor public<font color="#E5E5E5"> jail breaks</font>

27
00:01:28,740 --> 00:01:35,210
and contributed<font color="#E5E5E5"> to other jail breaks</font><font color="#CCCCCC"> but</font>

28
00:01:31,740 --> 00:01:38,970
the<font color="#CCCCCC"> 10.2 one was my first big</font><font color="#E5E5E5"> one and</font>

29
00:01:35,210 --> 00:01:40,740
probably last one for a while and as I

30
00:01:38,970 --> 00:01:43,080
mentioned I already gave this talk in

31
00:01:40,740 --> 00:01:44,640
Shenzhen at<font color="#CCCCCC"> pencak and added a bunch of</font>

32
00:01:43,080 --> 00:01:47,220
things and if you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to get in touch</font>

33
00:01:44,640 --> 00:01:52,520
<font color="#E5E5E5">with me you</font><font color="#CCCCCC"> can get on IRC that cracks</font>

34
00:01:47,220 --> 00:01:56,100
by<font color="#CCCCCC"> Doug Kim when the server is not down</font>

35
00:01:52,520 --> 00:02:00,298
<font color="#E5E5E5">so today I'm gonna discuss about the</font><font color="#CCCCCC"> is</font>

36
00:01:56,100 --> 00:02:02,610
security design and these teracle things

37
00:02:00,299 --> 00:02:05,700
that made the iOS security<font color="#E5E5E5"> design what</font>

38
00:02:02,610 --> 00:02:07,950
it is today<font color="#CCCCCC"> and I'm also gonna</font><font color="#E5E5E5"> discuss</font>

39
00:02:05,700 --> 00:02:11,489
about how an iOS attacker will think and

40
00:02:07,950 --> 00:02:14,000
I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> discuss</font><font color="#CCCCCC"> about one one-click</font>

41
00:02:11,489 --> 00:02:14,000
exploits

42
00:02:14,180 --> 00:02:21,420
which I believe<font color="#CCCCCC"> to be the best</font><font color="#E5E5E5"> long-term</font>

43
00:02:18,360 --> 00:02:22,950
scenario for iOS attackers

44
00:02:21,420 --> 00:02:26,839
and I will also<font color="#CCCCCC"> discuss about the new</font>

45
00:02:22,950 --> 00:02:29,970
<font color="#E5E5E5">iPhone</font><font color="#CCCCCC"> access and</font><font color="#E5E5E5"> XR access</font><font color="#CCCCCC"> Mac's</font>

46
00:02:26,840 --> 00:02:30,720
which bring a new architecture<font color="#E5E5E5"> with a</font>

47
00:02:29,970 --> 00:02:34,319
different<font color="#E5E5E5"> API</font>

48
00:02:30,720 --> 00:02:36,150
let me<font color="#E5E5E5"> fir which has pointer</font>

49
00:02:34,319 --> 00:02:40,200
authentication which is a fairly new

50
00:02:36,150 --> 00:02:44,129
feature<font color="#CCCCCC"> - in first CFI in a different</font>

51
00:02:40,200 --> 00:02:46,940
way than say<font color="#E5E5E5"> Microsoft does it as well</font>

52
00:02:44,129 --> 00:02:51,268
as<font color="#E5E5E5"> some extra hardening for P map which</font>

53
00:02:46,940 --> 00:02:53,190
I'll tell<font color="#E5E5E5"> you what it is later</font><font color="#CCCCCC"> and I</font>

54
00:02:51,269 --> 00:02:58,950
<font color="#E5E5E5">will give my personal like opinion on</font>

55
00:02:53,190 --> 00:03:02,040
what the future<font color="#CCCCCC"> of iOS attackers is so</font>

56
00:02:58,950 --> 00:03:04,560
back then<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> version of</font>

57
00:03:02,040 --> 00:03:08,310
iOS<font color="#E5E5E5"> there was absolutely no security no</font>

58
00:03:04,560 --> 00:03:10,950
<font color="#E5E5E5">SLR no DEP everything ran as root no</font>

59
00:03:08,310 --> 00:03:14,010
sandboxing no<font color="#E5E5E5"> code</font><font color="#CCCCCC"> signing no secure</font>

60
00:03:10,950 --> 00:03:18,569
boot<font color="#CCCCCC"> well there was some secure boot but</font>

61
00:03:14,010 --> 00:03:20,519
it was fundamentally broken<font color="#E5E5E5"> and no</font>

62
00:03:18,569 --> 00:03:23,730
<font color="#CCCCCC">third-party apps</font><font color="#E5E5E5"> this was a big deal</font>

63
00:03:20,519 --> 00:03:28,879
because<font color="#CCCCCC"> people realized that native</font>

64
00:03:23,730 --> 00:03:32,518
<font color="#CCCCCC">third party apps were a big</font><font color="#E5E5E5"> deal yeah</font>

65
00:03:28,879 --> 00:03:35,668
<font color="#E5E5E5">and so people try to modify their phones</font>

66
00:03:32,519 --> 00:03:39,480
and these<font color="#E5E5E5"> pound a community called job</font>

67
00:03:35,669 --> 00:03:42,709
working and back then things<font color="#E5E5E5"> were really</font>

68
00:03:39,480 --> 00:03:44,910
<font color="#E5E5E5">simple however very very very early on</font>

69
00:03:42,709 --> 00:03:47,699
<font color="#CCCCCC">somebody actually</font><font color="#E5E5E5"> came up</font><font color="#CCCCCC"> with something</font>

70
00:03:44,910 --> 00:03:49,829
<font color="#E5E5E5">called</font><font color="#CCCCCC"> jailbreak me which allowed people</font>

71
00:03:47,699 --> 00:03:54,120
<font color="#E5E5E5">to Joburg their phone by just visiting</font>

72
00:03:49,829 --> 00:03:59,280
<font color="#CCCCCC">website and this is sort of the model</font>

73
00:03:54,120 --> 00:04:00,780
that<font color="#E5E5E5"> now is called</font><font color="#CCCCCC"> one-click</font><font color="#E5E5E5"> and even a</font>

74
00:03:59,280 --> 00:04:02,489
<font color="#E5E5E5">few Apple employees apparently were</font>

75
00:04:00,780 --> 00:04:06,629
involved with Joe Bergin community at

76
00:04:02,489 --> 00:04:08,940
first but things change really quickly

77
00:04:06,629 --> 00:04:14,578
<font color="#E5E5E5">as soon as the</font><font color="#CCCCCC"> the threat model for</font>

78
00:04:08,940 --> 00:04:16,228
Apple becomes<font color="#CCCCCC"> vrm</font><font color="#E5E5E5"> so the the big issue</font>

79
00:04:14,579 --> 00:04:19,630
<font color="#E5E5E5">is that they actually released their own</font>

80
00:04:16,228 --> 00:04:22,479
<font color="#E5E5E5">app</font><font color="#CCCCCC"> store and</font><font color="#E5E5E5"> they were selling apps and</font>

81
00:04:19,630 --> 00:04:24,580
by being able to modify your phone you

82
00:04:22,480 --> 00:04:28,540
would<font color="#E5E5E5"> very</font><font color="#CCCCCC"> easily decrypt</font><font color="#E5E5E5"> those apps and</font>

83
00:04:24,580 --> 00:04:31,000
redistribute them<font color="#E5E5E5"> at piracy was very</font>

84
00:04:28,540 --> 00:04:34,210
very very rampant<font color="#E5E5E5"> on desktop operating</font>

85
00:04:31,000 --> 00:04:35,560
systems<font color="#E5E5E5"> so my personal belief I'm not</font>

86
00:04:34,210 --> 00:04:37,810
entirely sure if that's<font color="#E5E5E5"> the case but</font>

87
00:04:35,560 --> 00:04:40,420
<font color="#E5E5E5">code signing was introduced to try to</font>

88
00:04:37,810 --> 00:04:46,450
prevent the the<font color="#E5E5E5"> piracy scene from taking</font>

89
00:04:40,420 --> 00:04:48,670
over the the iPhone platform<font color="#E5E5E5"> and I</font>

90
00:04:46,450 --> 00:04:55,210
believe it was<font color="#E5E5E5"> the only real threat the</font>

91
00:04:48,670 --> 00:04:57,300
Apple<font color="#CCCCCC"> consider back then and from there</font>

92
00:04:55,210 --> 00:04:59,830
a cat-and-mouse game started where Apple

93
00:04:57,300 --> 00:05:03,040
<font color="#E5E5E5">kept</font><font color="#CCCCCC"> learning what attackers would do</font>

94
00:04:59,830 --> 00:05:07,630
and posh like new<font color="#CCCCCC"> updates that would</font>

95
00:05:03,040 --> 00:05:08,200
harden the iOS security model<font color="#E5E5E5"> and over</font>

96
00:05:07,630 --> 00:05:11,260
time

97
00:05:08,200 --> 00:05:13,150
these pretty<font color="#E5E5E5"> much ended up with three</font>

98
00:05:11,260 --> 00:05:13,780
big things<font color="#CCCCCC"> so first of all the</font>

99
00:05:13,150 --> 00:05:16,270
bootloader

100
00:05:13,780 --> 00:05:18,599
used to have a lot of debug features now

101
00:05:16,270 --> 00:05:22,479
on a release device the bootloader<font color="#E5E5E5"> is</font>

102
00:05:18,600 --> 00:05:25,510
fundamentally<font color="#CCCCCC"> very small and doesn't</font>

103
00:05:22,480 --> 00:05:27,960
<font color="#CCCCCC">have many degrees of</font><font color="#E5E5E5"> freedom</font><font color="#CCCCCC"> which are</font>

104
00:05:25,510 --> 00:05:30,280
useful<font color="#CCCCCC"> in case you're an attacker</font>

105
00:05:27,960 --> 00:05:32,289
<font color="#CCCCCC">additionally a</font><font color="#E5E5E5"> SLR</font><font color="#CCCCCC"> and DP were</font>

106
00:05:30,280 --> 00:05:38,830
introduced very early on<font color="#E5E5E5"> I think it was</font>

107
00:05:32,290 --> 00:05:40,690
around<font color="#E5E5E5"> iOS</font><font color="#CCCCCC"> 4 and</font><font color="#E5E5E5"> additionally on</font><font color="#CCCCCC"> the</font>

108
00:05:38,830 --> 00:05:42,159
very first models of iPhones<font color="#CCCCCC"> you would</font>

109
00:05:40,690 --> 00:05:44,650
be able<font color="#CCCCCC"> to downgrade</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> framework the</font>

110
00:05:42,160 --> 00:05:47,250
vulnerable version if<font color="#E5E5E5"> you wanted to</font>

111
00:05:44,650 --> 00:05:52,090
and these allows you to reuse bugs

112
00:05:47,250 --> 00:05:54,250
<font color="#E5E5E5">across one specific generation device</font>

113
00:05:52,090 --> 00:06:01,450
<font color="#E5E5E5">over and over without having to find new</font>

114
00:05:54,250 --> 00:06:02,980
<font color="#CCCCCC">O'Day however initially</font><font color="#E5E5E5"> they used to</font>

115
00:06:01,450 --> 00:06:05,320
rely very heavily on<font color="#E5E5E5"> secure on</font><font color="#CCCCCC"> the</font>

116
00:06:02,980 --> 00:06:08,470
security by obscurity<font color="#CCCCCC"> and they still do</font>

117
00:06:05,320 --> 00:06:12,159
in some case<font color="#E5E5E5"> for instance the secure</font>

118
00:06:08,470 --> 00:06:14,710
<font color="#CCCCCC">anklet processor is still running</font><font color="#E5E5E5"> on an</font>

119
00:06:12,160 --> 00:06:16,600
<font color="#E5E5E5">encrypted image and people have posted</font>

120
00:06:14,710 --> 00:06:19,120
<font color="#E5E5E5">decryption keys online so if you</font>

121
00:06:16,600 --> 00:06:21,700
actually<font color="#CCCCCC"> wanted</font><font color="#E5E5E5"> to look into the SCP you</font>

122
00:06:19,120 --> 00:06:24,610
can but Apple still refuses to give you

123
00:06:21,700 --> 00:06:26,760
visibility on<font color="#CCCCCC"> the later</font><font color="#E5E5E5"> later versions</font>

124
00:06:24,610 --> 00:06:28,990
<font color="#E5E5E5">that</font><font color="#CCCCCC"> have not been publicly decrypted</font>

125
00:06:26,760 --> 00:06:30,849
<font color="#CCCCCC">however</font><font color="#E5E5E5"> things are changing with the</font>

126
00:06:28,990 --> 00:06:31,930
<font color="#E5E5E5">kernel and</font><font color="#CCCCCC"> a bunch of other things</font><font color="#E5E5E5"> in</font>

127
00:06:30,850 --> 00:06:34,560
the firmware

128
00:06:31,930 --> 00:06:37,180
they are now decrypted since iOS<font color="#E5E5E5"> 10 and</font>

129
00:06:34,560 --> 00:06:41,110
the kernel sources were also published

130
00:06:37,180 --> 00:06:44,110
<font color="#E5E5E5">recently and there was a pretty bad leak</font>

131
00:06:41,110 --> 00:06:47,260
of<font color="#E5E5E5"> bootloader so a bootloader sources</font>

132
00:06:44,110 --> 00:06:52,990
back then<font color="#CCCCCC"> so there's a lot of knowledge</font>

133
00:06:47,260 --> 00:06:54,250
<font color="#E5E5E5">out</font><font color="#CCCCCC"> there by now and downgrade</font>

134
00:06:52,990 --> 00:06:58,000
protection really<font color="#E5E5E5"> doesn't actually</font>

135
00:06:54,250 --> 00:06:59,710
provide any security to people<font color="#E5E5E5"> that you</font>

136
00:06:58,000 --> 00:07:01,270
<font color="#E5E5E5">know don't want</font><font color="#CCCCCC"> to get their phone</font>

137
00:06:59,710 --> 00:07:05,650
hacked because<font color="#E5E5E5"> you can just run</font><font color="#CCCCCC"> the</font>

138
00:07:01,270 --> 00:07:09,789
latest<font color="#CCCCCC"> firmware and I believe it's still</font>

139
00:07:05,650 --> 00:07:12,940
an artifact of the historical<font color="#E5E5E5"> DRM model</font>

140
00:07:09,790 --> 00:07:16,890
that is<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> not so historical</font><font color="#E5E5E5"> and</font>

141
00:07:12,940 --> 00:07:21,940
still matters to<font color="#E5E5E5"> apples business and</font>

142
00:07:16,890 --> 00:07:24,880
<font color="#E5E5E5">also they try</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> very hard</font><font color="#E5E5E5"> to</font>

143
00:07:21,940 --> 00:07:28,180
debug<font color="#E5E5E5"> your kernel or anything except</font>

144
00:07:24,880 --> 00:07:30,550
<font color="#E5E5E5">your own app which obviously makes the</font>

145
00:07:28,180 --> 00:07:35,170
work of security researchers harder and

146
00:07:30,550 --> 00:07:38,590
so the solution for<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> to develop</font>

147
00:07:35,170 --> 00:07:41,650
<font color="#E5E5E5">iOS attacks to bypass those restrictions</font>

148
00:07:38,590 --> 00:07:45,549
<font color="#E5E5E5">and carry out more security and this</font>

149
00:07:41,650 --> 00:07:47,770
starts<font color="#CCCCCC"> the iOS attacker</font><font color="#E5E5E5"> model so</font>

150
00:07:45,550 --> 00:07:52,080
initially<font color="#E5E5E5"> I believe most of the research</font>

151
00:07:47,770 --> 00:07:55,359
was actually<font color="#E5E5E5"> done due</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the need of</font><font color="#CCCCCC"> the</font>

152
00:07:52,080 --> 00:07:56,800
jailbreakers<font color="#CCCCCC"> so these are actually</font>

153
00:07:55,360 --> 00:07:58,840
attackers<font color="#E5E5E5"> that Apple might really</font>

154
00:07:56,800 --> 00:08:01,150
dislike but I believe are fundamentally

155
00:07:58,840 --> 00:08:05,109
positive for<font color="#CCCCCC"> end-users as</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> more</font>

156
00:08:01,150 --> 00:08:07,950
<font color="#E5E5E5">choice</font><font color="#CCCCCC"> however as the game gets</font><font color="#E5E5E5"> tougher</font>

157
00:08:05,110 --> 00:08:12,040
and more<font color="#CCCCCC"> people start looking into these</font>

158
00:08:07,950 --> 00:08:13,479
new mobile platforms attacking at us for

159
00:08:12,040 --> 00:08:15,210
intelligence<font color="#CCCCCC"> gathering and</font><font color="#E5E5E5"> law</font>

160
00:08:13,480 --> 00:08:19,540
enforcement became more and more popular

161
00:08:15,210 --> 00:08:21,640
<font color="#CCCCCC">and I believe these</font><font color="#E5E5E5"> attackers do not</font>

162
00:08:19,540 --> 00:08:24,520
actually<font color="#CCCCCC"> affect</font><font color="#E5E5E5"> Apple's bottom line that</font>

163
00:08:21,640 --> 00:08:30,099
<font color="#E5E5E5">much but</font><font color="#CCCCCC"> it could be negative to</font>

164
00:08:24,520 --> 00:08:32,579
<font color="#E5E5E5">end-users</font><font color="#CCCCCC"> in some ways and these</font>

165
00:08:30,100 --> 00:08:36,450
attackers<font color="#E5E5E5"> actually want multiple things</font>

166
00:08:32,580 --> 00:08:38,979
there's remote and physical capabilities

167
00:08:36,450 --> 00:08:41,099
<font color="#CCCCCC">remote capabilities you have</font><font color="#E5E5E5"> one click</font>

168
00:08:38,979 --> 00:08:43,889
<font color="#E5E5E5">which I believe to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> best</font>

169
00:08:41,099 --> 00:08:45,630
term solution<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us attackers and then</font>

170
00:08:43,889 --> 00:08:48,300
you have zero<font color="#E5E5E5"> click which will rely</font>

171
00:08:45,630 --> 00:08:52,110
instead<font color="#E5E5E5"> of system services messaging</font>

172
00:08:48,300 --> 00:08:54,479
apps<font color="#CCCCCC"> Bluetooth and you can even rely on</font>

173
00:08:52,110 --> 00:08:58,290
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> XSS in order to then</font>

174
00:08:54,480 --> 00:08:59,519
<font color="#E5E5E5">chain load a one click and turn it into</font>

175
00:08:58,290 --> 00:09:02,339
a<font color="#E5E5E5"> zero click</font>

176
00:08:59,519 --> 00:09:04,079
additionally<font color="#E5E5E5"> people</font><font color="#CCCCCC"> are also interested</font>

177
00:09:02,339 --> 00:09:07,440
in physical attacks<font color="#E5E5E5"> so you're gonna have</font>

178
00:09:04,079 --> 00:09:10,319
<font color="#E5E5E5">even made attacks and in transit device</font>

179
00:09:07,440 --> 00:09:12,480
<font color="#E5E5E5">tampering where somebody will swap your</font>

180
00:09:10,319 --> 00:09:16,589
device out<font color="#CCCCCC"> as</font><font color="#E5E5E5"> it's coming to your</font>

181
00:09:12,480 --> 00:09:22,230
mailbox<font color="#E5E5E5"> and data protection attacks for</font>

182
00:09:16,589 --> 00:09:25,170
forensic analysis which every<font color="#E5E5E5"> single one</font>

183
00:09:22,230 --> 00:09:27,870
<font color="#E5E5E5">of these will require</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> kind of</font>

184
00:09:25,170 --> 00:09:32,610
research on iOS so usually if you

185
00:09:27,870 --> 00:09:33,899
specialize<font color="#E5E5E5"> on one of these</font><font color="#CCCCCC"> like one</font>

186
00:09:32,610 --> 00:09:36,209
company will only specialize<font color="#CCCCCC"> on one of</font>

187
00:09:33,899 --> 00:09:41,279
<font color="#E5E5E5">these very few companies will be</font>

188
00:09:36,209 --> 00:09:43,138
multiple<font color="#E5E5E5"> at the same time individual</font>

189
00:09:41,279 --> 00:09:45,689
researchers will actually<font color="#E5E5E5"> specialize on</font>

190
00:09:43,139 --> 00:09:48,360
<font color="#CCCCCC">only one aspect</font><font color="#E5E5E5"> and by one aspect I mean</font>

191
00:09:45,689 --> 00:09:50,399
even less than<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> just one</font>

192
00:09:48,360 --> 00:09:56,310
<font color="#E5E5E5">vulnerability or</font><font color="#CCCCCC"> kernel privilege</font>

193
00:09:50,399 --> 00:09:59,040
escalation and they will then figure out

194
00:09:56,310 --> 00:10:01,768
a framework<font color="#E5E5E5"> to find multiple of these</font>

195
00:09:59,040 --> 00:10:03,750
<font color="#CCCCCC">vulnerabilities</font><font color="#E5E5E5"> which will likely end</font><font color="#CCCCCC"> up</font>

196
00:10:01,769 --> 00:10:06,329
in<font color="#E5E5E5"> an offensive company which will chain</font>

197
00:10:03,750 --> 00:10:08,870
those vulnerabilities together into an

198
00:10:06,329 --> 00:10:12,269
exploit chain which will be<font color="#E5E5E5"> able to load</font>

199
00:10:08,870 --> 00:10:13,740
<font color="#E5E5E5">code that the</font><font color="#CCCCCC"> wished privilege level the</font>

200
00:10:12,269 --> 00:10:16,430
most common privilege level which is

201
00:10:13,740 --> 00:10:19,529
sought after is obviously kernel mode

202
00:10:16,430 --> 00:10:23,670
but it's not<font color="#E5E5E5"> all necessary in order to</font>

203
00:10:19,529 --> 00:10:25,819
<font color="#CCCCCC">accomplish those tasks</font><font color="#E5E5E5"> and people will</font>

204
00:10:23,670 --> 00:10:30,120
develop post<font color="#CCCCCC"> exploitation</font><font color="#E5E5E5"> toolkits that</font>

205
00:10:25,819 --> 00:10:34,170
<font color="#E5E5E5">will allow for yes data exfiltration</font>

206
00:10:30,120 --> 00:10:35,610
those sort of things<font color="#CCCCCC"> but</font><font color="#E5E5E5"> this is kind of</font>

207
00:10:34,170 --> 00:10:38,939
far I<font color="#E5E5E5"> believe from the work of</font>

208
00:10:35,610 --> 00:10:41,220
researchers themselves<font color="#CCCCCC"> and it's a few</font>

209
00:10:38,939 --> 00:10:43,079
steps<font color="#CCCCCC"> down the</font><font color="#E5E5E5"> chain and eventually</font>

210
00:10:41,220 --> 00:10:45,509
Apple will kill some<font color="#CCCCCC"> of the bugs</font><font color="#E5E5E5"> and so</font>

211
00:10:43,079 --> 00:10:48,269
you have to go back to the very top and

212
00:10:45,509 --> 00:10:50,100
<font color="#E5E5E5">find new vulnerabilities and integrate</font>

213
00:10:48,269 --> 00:10:52,010
them<font color="#CCCCCC"> with your current</font><font color="#E5E5E5"> toolkit or make a</font>

214
00:10:50,100 --> 00:10:53,270
new toolkit in case

215
00:10:52,010 --> 00:10:56,990
when you currently have is not capable

216
00:10:53,270 --> 00:11:04,460
of<font color="#E5E5E5"> using your new vulnerabilities and</font>

217
00:10:56,990 --> 00:11:06,490
yeah<font color="#E5E5E5"> repeat as the level of difficulty</font>

218
00:11:04,460 --> 00:11:09,470
in compromising our<font color="#CCCCCC"> us goes up</font>

219
00:11:06,490 --> 00:11:12,290
<font color="#E5E5E5">persistent attackers that already have</font>

220
00:11:09,470 --> 00:11:13,550
capabilities right now<font color="#CCCCCC"> can</font><font color="#E5E5E5"> easily play</font>

221
00:11:12,290 --> 00:11:19,370
<font color="#E5E5E5">catch-up</font><font color="#CCCCCC"> because you will</font><font color="#E5E5E5"> have</font>

222
00:11:13,550 --> 00:11:22,130
incremental<font color="#E5E5E5"> security upgrades and new</font>

223
00:11:19,370 --> 00:11:23,720
players might feel all the pain because

224
00:11:22,130 --> 00:11:25,580
they have to like start from zero<font color="#CCCCCC"> and</font>

225
00:11:23,720 --> 00:11:29,060
get acquainted with<font color="#CCCCCC"> every single</font>

226
00:11:25,580 --> 00:11:30,890
mitigation that<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> had so far and I</font>

227
00:11:29,060 --> 00:11:33,800
<font color="#CCCCCC">think however</font><font color="#E5E5E5"> discuss this in a more</font>

228
00:11:30,890 --> 00:11:38,900
<font color="#E5E5E5">general context it's a nice talk you</font>

229
00:11:33,800 --> 00:11:42,740
<font color="#E5E5E5">should check his</font><font color="#CCCCCC"> sock out and the</font>

230
00:11:38,900 --> 00:11:44,390
typical<font color="#E5E5E5"> one-click exploit chain</font><font color="#CCCCCC"> again I</font>

231
00:11:42,740 --> 00:11:46,640
<font color="#E5E5E5">am pretty sure I said</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> three times</font>

232
00:11:44,390 --> 00:11:49,730
<font color="#E5E5E5">already</font><font color="#CCCCCC"> but I think it's the most likely</font>

233
00:11:46,640 --> 00:11:51,400
<font color="#E5E5E5">to be</font><font color="#CCCCCC"> long-term viable capability</font><font color="#E5E5E5"> web</font>

234
00:11:49,730 --> 00:11:55,160
<font color="#E5E5E5">browsers will always have</font>

235
00:11:51,400 --> 00:11:57,140
<font color="#E5E5E5">vulnerabilities and again you can use</font>

236
00:11:55,160 --> 00:12:00,079
<font color="#E5E5E5">the</font><font color="#CCCCCC"> XSS in</font><font color="#E5E5E5"> order to turn it into a zero</font>

237
00:11:57,140 --> 00:12:01,610
click<font color="#E5E5E5"> if you so wish and it</font><font color="#CCCCCC"> usually will</font>

238
00:12:00,080 --> 00:12:03,830
involve the combination of a WebKit

239
00:12:01,610 --> 00:12:06,380
vulnerability and at<font color="#E5E5E5"> least one privilege</font>

240
00:12:03,830 --> 00:12:08,420
<font color="#E5E5E5">privilege escalation vulnerability even</font>

241
00:12:06,380 --> 00:12:11,420
if two or more are common as far as

242
00:12:08,420 --> 00:12:13,280
privilege escalation goes and the WebKit

243
00:12:11,420 --> 00:12:16,219
vulnerability must be powerful enough in

244
00:12:13,280 --> 00:12:17,930
order<font color="#E5E5E5"> to derive an info leak and on</font>

245
00:12:16,220 --> 00:12:21,350
recent devices<font color="#E5E5E5"> you will also need</font><font color="#CCCCCC"> the</font>

246
00:12:17,930 --> 00:12:26,150
<font color="#E5E5E5">arbitrary read primitive if you go</font>

247
00:12:21,350 --> 00:12:28,220
<font color="#E5E5E5">anywhere hips praying is Bible the</font>

248
00:12:26,150 --> 00:12:31,040
randomization on<font color="#CCCCCC"> a</font><font color="#E5E5E5"> US is actually pretty</font>

249
00:12:28,220 --> 00:12:33,680
bad<font color="#CCCCCC"> I do not believe any</font><font color="#E5E5E5"> serious</font>

250
00:12:31,040 --> 00:12:40,160
attacker<font color="#E5E5E5"> is gonna rely on hips praying I</font>

251
00:12:33,680 --> 00:12:43,790
hope<font color="#E5E5E5"> not but it's one possibility</font><font color="#CCCCCC"> and DP</font>

252
00:12:40,160 --> 00:12:47,060
can be<font color="#E5E5E5"> bypassed by</font><font color="#CCCCCC"> pastor rap or date on</font>

253
00:12:43,790 --> 00:12:50,270
<font color="#CCCCCC">the</font><font color="#E5E5E5"> exploitation data only is the best</font>

254
00:12:47,060 --> 00:12:52,430
alternative<font color="#CCCCCC"> because it's actually</font><font color="#E5E5E5"> a lot</font>

255
00:12:50,270 --> 00:12:55,850
easier<font color="#CCCCCC"> to maintain over time compared to</font>

256
00:12:52,430 --> 00:13:00,529
<font color="#CCCCCC">rap and it can actually be more powerful</font>

257
00:12:55,850 --> 00:13:02,119
<font color="#E5E5E5">if done correctly</font><font color="#CCCCCC"> rap can be exploited</font>

258
00:13:00,529 --> 00:13:05,359
you know<font color="#E5E5E5"> simpler way</font><font color="#CCCCCC"> actually at times</font>

259
00:13:02,119 --> 00:13:07,609
<font color="#CCCCCC">but</font><font color="#E5E5E5"> will require constant iterations on</font>

260
00:13:05,359 --> 00:13:09,759
top of your exploit<font color="#E5E5E5"> on every single</font>

261
00:13:07,609 --> 00:13:12,349
binary layout that<font color="#E5E5E5"> you want to target</font>

262
00:13:09,759 --> 00:13:15,589
<font color="#CCCCCC">and it will be</font><font color="#E5E5E5"> necessary to use</font><font color="#CCCCCC"> rap on</font>

263
00:13:12,349 --> 00:13:17,479
some vulnerabilities but<font color="#E5E5E5"> I actually</font>

264
00:13:15,589 --> 00:13:19,549
recommend to use those for<font color="#CCCCCC"> prone to own</font>

265
00:13:17,479 --> 00:13:21,979
and if you're actually<font color="#CCCCCC"> trying to be an</font>

266
00:13:19,549 --> 00:13:28,039
advanced I guess attacker<font color="#E5E5E5"> will look for</font>

267
00:13:21,979 --> 00:13:30,949
better bugs<font color="#CCCCCC"> once you have the ability to</font>

268
00:13:28,039 --> 00:13:34,218
read write<font color="#CCCCCC"> and</font><font color="#E5E5E5"> execute the next stage is</font>

269
00:13:30,949 --> 00:13:35,988
obviously to load a shellcode<font color="#E5E5E5"> iOS has</font>

270
00:13:34,219 --> 00:13:38,589
<font color="#E5E5E5">mandatory code sign checks so you can't</font>

271
00:13:35,989 --> 00:13:41,889
actually just<font color="#E5E5E5"> you know load a library or</font>

272
00:13:38,589 --> 00:13:47,029
<font color="#E5E5E5">something along the lines which might be</font>

273
00:13:41,889 --> 00:13:49,939
done<font color="#E5E5E5"> in other context</font><font color="#CCCCCC"> however you do</font>

274
00:13:47,029 --> 00:13:51,829
<font color="#CCCCCC">have an RF memory which is</font><font color="#E5E5E5"> used by the</font>

275
00:13:49,939 --> 00:13:53,929
jet engine and you can just you know

276
00:13:51,829 --> 00:13:56,748
write your payload<font color="#E5E5E5"> in there invoke it</font>

277
00:13:53,929 --> 00:14:01,009
and back in iOS 9 that<font color="#E5E5E5"> was all you</font>

278
00:13:56,749 --> 00:14:03,739
needed<font color="#CCCCCC"> to do until Apple</font><font color="#E5E5E5"> introduced this</font>

279
00:14:01,009 --> 00:14:05,720
one feature called bulletproof jet where

280
00:14:03,739 --> 00:14:09,499
in order<font color="#CCCCCC"> to write your</font><font color="#E5E5E5"> payload in</font><font color="#CCCCCC"> jibt</font>

281
00:14:05,720 --> 00:14:11,839
memory<font color="#E5E5E5"> you are actually first to do a</font>

282
00:14:09,499 --> 00:14:15,319
function invocation<font color="#E5E5E5"> and they do this by</font>

283
00:14:11,839 --> 00:14:17,959
having<font color="#E5E5E5"> two different</font><font color="#CCCCCC"> maps where one is</font>

284
00:14:15,319 --> 00:14:19,488
<font color="#E5E5E5">writable and one is executable and the</font>

285
00:14:17,959 --> 00:14:20,929
backing physical memory<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> the</font>

286
00:14:19,489 --> 00:14:24,129
same

287
00:14:20,929 --> 00:14:27,289
<font color="#E5E5E5">however the physical the writable map</font>

288
00:14:24,129 --> 00:14:29,959
<font color="#E5E5E5">does not have any pointer to it stored</font>

289
00:14:27,289 --> 00:14:32,359
anywhere in the address<font color="#CCCCCC"> space</font><font color="#E5E5E5"> except in</font>

290
00:14:29,959 --> 00:14:34,969
a very<font color="#CCCCCC"> small stub which is at ticket</font>

291
00:14:32,359 --> 00:14:38,899
only<font color="#E5E5E5"> so you cannot actually</font><font color="#CCCCCC"> lick that</font>

292
00:14:34,970 --> 00:14:42,229
pointer<font color="#E5E5E5"> you can guess it</font><font color="#CCCCCC"> you can invoke</font>

293
00:14:38,899 --> 00:14:47,629
the the<font color="#CCCCCC"> small stub in order to write</font><font color="#E5E5E5"> the</font>

294
00:14:42,229 --> 00:14:49,519
executable<font color="#E5E5E5"> side but with the</font><font color="#CCCCCC"> a 11</font><font color="#E5E5E5"> CPU</font>

295
00:14:47,629 --> 00:14:52,909
<font color="#E5E5E5">Apple</font><font color="#CCCCCC"> actually introduced</font><font color="#E5E5E5"> silicon</font>

296
00:14:49,519 --> 00:14:55,129
changes that will turn your

297
00:14:52,909 --> 00:14:58,729
<font color="#CCCCCC">read/write/execute</font><font color="#E5E5E5"> memory into either</font>

298
00:14:55,129 --> 00:15:01,639
read write<font color="#CCCCCC"> or read execute based</font><font color="#E5E5E5"> on a</font>

299
00:14:58,729 --> 00:15:03,379
system register which<font color="#CCCCCC"> is set</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> by the</font>

300
00:15:01,639 --> 00:15:07,039
jet engine in specific<font color="#E5E5E5"> points in time</font>

301
00:15:03,379 --> 00:15:09,950
<font color="#E5E5E5">and so in if you actually</font><font color="#CCCCCC"> want to touch</font>

302
00:15:07,039 --> 00:15:13,939
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> you are first to</font>

303
00:15:09,950 --> 00:15:18,019
invoke a function<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> really an</font>

304
00:15:13,940 --> 00:15:23,050
issue<font color="#E5E5E5"> or wasn't at least until the last</font>

305
00:15:18,019 --> 00:15:25,100
generation of iPhones and these<font color="#E5E5E5"> actually</font>

306
00:15:23,050 --> 00:15:26,719
pointed me towards the fact<font color="#CCCCCC"> that Apple</font>

307
00:15:25,100 --> 00:15:32,200
<font color="#CCCCCC">might be introducing</font><font color="#E5E5E5"> control for</font>

308
00:15:26,720 --> 00:15:34,640
integrity<font color="#CCCCCC"> and I actually discuss about</font>

309
00:15:32,200 --> 00:15:37,310
possible<font color="#CCCCCC"> ways to</font><font color="#E5E5E5"> attack control for</font>

310
00:15:34,640 --> 00:15:39,350
integrity in 2017<font color="#E5E5E5"> only</font><font color="#CCCCCC"> because I could</font>

311
00:15:37,310 --> 00:15:46,300
infer that it was about to come<font color="#E5E5E5"> thanks</font>

312
00:15:39,350 --> 00:15:49,670
to this feature<font color="#E5E5E5"> anyway</font>

313
00:15:46,300 --> 00:15:52,819
let's keep going on on our iOS exploit

314
00:15:49,670 --> 00:15:57,110
chain you'll have your<font color="#CCCCCC"> shell code</font><font color="#E5E5E5"> which</font>

315
00:15:52,820 --> 00:15:58,459
some might write as<font color="#E5E5E5"> ro shell code but</font>

316
00:15:57,110 --> 00:16:00,620
that<font color="#CCCCCC"> does not</font><font color="#E5E5E5"> scale if you're</font><font color="#CCCCCC"> actually</font>

317
00:15:58,459 --> 00:16:03,199
writing an entire kernel exploit it's

318
00:16:00,620 --> 00:16:04,519
not<font color="#CCCCCC"> gonna be easy</font><font color="#E5E5E5"> to do it in simple</font>

319
00:16:03,200 --> 00:16:07,100
shell code you're<font color="#CCCCCC"> going to want to link</font>

320
00:16:04,519 --> 00:16:10,310
<font color="#CCCCCC">to</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> you're gonna want to use SDK</font>

321
00:16:07,100 --> 00:16:15,019
which is powerful enough to express what

322
00:16:10,310 --> 00:16:17,630
you want to do and realistically<font color="#E5E5E5"> you can</font>

323
00:16:15,019 --> 00:16:21,380
ask the dynamic library<font color="#E5E5E5"> the dynamic</font>

324
00:16:17,630 --> 00:16:22,939
linker to<font color="#CCCCCC"> load it your payload</font><font color="#E5E5E5"> but iOS</font>

325
00:16:21,380 --> 00:16:25,279
does not<font color="#CCCCCC"> actually have any feature to do</font>

326
00:16:22,940 --> 00:16:28,000
that<font color="#CCCCCC"> Mac OS does but it</font><font color="#E5E5E5"> was stripped</font>

327
00:16:25,279 --> 00:16:28,000
from iOS

328
00:16:29,079 --> 00:16:35,540
however when you run a binary<font color="#CCCCCC"> in iOS the</font>

329
00:16:33,320 --> 00:16:39,620
the kernel will actually map<font color="#E5E5E5"> the binary</font>

330
00:16:35,540 --> 00:16:42,709
in and the dynamic linker will be

331
00:16:39,620 --> 00:16:45,350
invoked in<font color="#E5E5E5"> user</font><font color="#CCCCCC"> mode in order to load</font>

332
00:16:42,709 --> 00:16:47,719
the main executable<font color="#CCCCCC"> once it's already</font><font color="#E5E5E5"> in</font>

333
00:16:45,350 --> 00:16:50,149
<font color="#E5E5E5">memory so what you can</font><font color="#CCCCCC"> actually do is</font>

334
00:16:47,720 --> 00:16:53,540
invoke the dynamic linker as if the

335
00:16:50,149 --> 00:16:56,779
kernel were invoking it and this<font color="#E5E5E5"> will</font>

336
00:16:53,540 --> 00:17:03,949
<font color="#E5E5E5">actually load arbitrary libraries as if</font>

337
00:16:56,779 --> 00:17:06,079
it were a normal<font color="#E5E5E5"> macro file and it's</font>

338
00:17:03,949 --> 00:17:08,839
pretty<font color="#E5E5E5"> powerful in order to do</font><font color="#CCCCCC"> us</font>

339
00:17:06,079 --> 00:17:10,188
<font color="#E5E5E5">jailbreaks over WebKit however you will</font>

340
00:17:08,839 --> 00:17:12,168
<font color="#CCCCCC">not be able</font><font color="#E5E5E5"> to do easy process</font>

341
00:17:10,189 --> 00:17:13,760
continuation so this is not an effective

342
00:17:12,169 --> 00:17:17,780
strategy<font color="#CCCCCC"> in case you're trying to do</font>

343
00:17:13,760 --> 00:17:20,910
<font color="#E5E5E5">advanced attacks so I ended up writing</font>

344
00:17:17,780 --> 00:17:23,490
my<font color="#E5E5E5"> own dynamic linker in JavaScript the</font>

345
00:17:20,910 --> 00:17:26,339
we'll link<font color="#E5E5E5"> in a payload which is</font>

346
00:17:23,490 --> 00:17:29,280
compiled with the normal iOS SDK map

347
00:17:26,339 --> 00:17:30,990
<font color="#CCCCCC">everything over and yeah</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> enough</font>

348
00:17:29,280 --> 00:17:36,090
memory corruption<font color="#E5E5E5"> JavaScript and truly</font>

349
00:17:30,990 --> 00:17:37,830
do<font color="#E5E5E5"> everything these</font><font color="#CCCCCC"> days and user mode</font>

350
00:17:36,090 --> 00:17:40,709
<font color="#E5E5E5">privileged escalation can be</font>

351
00:17:37,830 --> 00:17:43,230
accomplished by<font color="#E5E5E5"> reusing the SLR</font><font color="#CCCCCC"> leak</font>

352
00:17:40,710 --> 00:17:45,270
from WebKit as every single<font color="#CCCCCC"> library in</font>

353
00:17:43,230 --> 00:17:47,100
iOS<font color="#E5E5E5"> is loaded at the same address and</font>

354
00:17:45,270 --> 00:17:49,680
it's only randomized once per boot<font color="#E5E5E5"> and</font>

355
00:17:47,100 --> 00:17:52,830
this<font color="#E5E5E5"> is due to constraints on memory</font>

356
00:17:49,680 --> 00:17:54,180
usage<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> actually really</font><font color="#E5E5E5"> easy once</font>

357
00:17:52,830 --> 00:17:57,000
you<font color="#E5E5E5"> have code execution in a non</font>

358
00:17:54,180 --> 00:17:58,710
privileged context to exploit even

359
00:17:57,000 --> 00:18:00,900
<font color="#E5E5E5">through your bugs in other processes</font><font color="#CCCCCC"> in</font>

360
00:17:58,710 --> 00:18:04,170
<font color="#E5E5E5">order to gain more</font><font color="#CCCCCC"> control over the</font>

361
00:18:00,900 --> 00:18:05,970
system kernel privilege escalations will

362
00:18:04,170 --> 00:18:08,070
actually require kernel info<font color="#E5E5E5"> leak as any</font>

363
00:18:05,970 --> 00:18:09,900
failure is fatal<font color="#CCCCCC"> and your phone will</font>

364
00:18:08,070 --> 00:18:15,179
reboot<font color="#E5E5E5"> if you do not have the right</font>

365
00:18:09,900 --> 00:18:16,800
slide and the usual end goal of<font color="#E5E5E5"> kernel</font>

366
00:18:15,180 --> 00:18:18,660
code execution is to get rid<font color="#CCCCCC"> bright</font>

367
00:18:16,800 --> 00:18:21,419
primitives<font color="#CCCCCC"> from user mode</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can</font>

368
00:18:18,660 --> 00:18:26,760
use<font color="#E5E5E5"> wrap chopper data in order to derive</font>

369
00:18:21,420 --> 00:18:28,740
those however most of these changed with

370
00:18:26,760 --> 00:18:33,000
the new iPhones<font color="#E5E5E5"> as as I mentioned</font>

371
00:18:28,740 --> 00:18:37,140
earlier<font color="#E5E5E5"> Apple added the new set</font><font color="#CCCCCC"> of</font>

372
00:18:33,000 --> 00:18:39,660
architectural<font color="#E5E5E5"> features which can provide</font>

373
00:18:37,140 --> 00:18:44,670
control flow integrity and they call

374
00:18:39,660 --> 00:18:46,440
<font color="#CCCCCC">this</font><font color="#E5E5E5"> internally armed 64</font><font color="#CCCCCC"> II they</font>

375
00:18:44,670 --> 00:18:49,050
actually do both backwards<font color="#CCCCCC"> edge and</font>

376
00:18:46,440 --> 00:18:52,290
forwards<font color="#E5E5E5"> edge</font><font color="#CCCCCC"> CFI building on top of</font><font color="#E5E5E5"> arm</font>

377
00:18:49,050 --> 00:18:54,389
8.3 authenticated pointers and both

378
00:18:52,290 --> 00:18:57,000
kernel mode and user mode<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> make</font>

379
00:18:54,390 --> 00:18:58,980
use of<font color="#CCCCCC"> CFI which is surprising as the</font>

380
00:18:57,000 --> 00:19:01,950
arm standard for authenticated pointers

381
00:18:58,980 --> 00:19:04,560
is not safe against<font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> mode</font>

382
00:19:01,950 --> 00:19:10,070
attacker<font color="#E5E5E5"> on devices without hypervisor</font>

383
00:19:04,560 --> 00:19:12,179
<font color="#E5E5E5">such as iPhones and it's not really</font>

384
00:19:10,070 --> 00:19:14,010
fine-grained<font color="#E5E5E5"> it's not really</font><font color="#CCCCCC"> curd</font>

385
00:19:12,180 --> 00:19:15,870
<font color="#CCCCCC">screened either</font><font color="#E5E5E5"> it's somewhere in the</font>

386
00:19:14,010 --> 00:19:19,280
middle depending on what branch site

387
00:19:15,870 --> 00:19:19,280
<font color="#E5E5E5">you're jumping from</font>

388
00:19:20,419 --> 00:19:26,899
and a brief<font color="#CCCCCC"> description of</font><font color="#E5E5E5"> point</font>

389
00:19:22,669 --> 00:19:28,730
authentication is that<font color="#E5E5E5"> arm</font><font color="#CCCCCC"> add new</font><font color="#E5E5E5"> up</font>

390
00:19:26,899 --> 00:19:32,449
codes that<font color="#E5E5E5"> will sign and authenticate</font>

391
00:19:28,730 --> 00:19:38,899
pointers for you<font color="#E5E5E5"> using secret keys that</font>

392
00:19:32,450 --> 00:19:41,239
are<font color="#E5E5E5"> stored out of address space and you</font>

393
00:19:38,899 --> 00:19:43,549
will check this authentication<font color="#E5E5E5"> key every</font>

394
00:19:41,239 --> 00:19:46,600
<font color="#E5E5E5">time you do an indirect branch or every</font>

395
00:19:43,549 --> 00:19:49,039
time you load some memory in a way<font color="#E5E5E5"> that</font>

396
00:19:46,600 --> 00:19:54,439
signals that you want to use pointers

397
00:19:49,039 --> 00:19:58,100
indication additionally you can<font color="#E5E5E5"> specify</font>

398
00:19:54,440 --> 00:20:01,759
a context on each pointer that<font color="#E5E5E5"> you sign</font>

399
00:19:58,100 --> 00:20:03,259
which is a modifier of<font color="#E5E5E5"> the key and by</font>

400
00:20:01,759 --> 00:20:05,509
specifying<font color="#E5E5E5"> that context you can make it</font>

401
00:20:03,259 --> 00:20:07,489
so a<font color="#E5E5E5"> specific pointer can not</font><font color="#CCCCCC"> use in a</font>

402
00:20:05,509 --> 00:20:12,830
<font color="#E5E5E5">different way than</font><font color="#CCCCCC"> its intended to be</font>

403
00:20:07,489 --> 00:20:15,379
<font color="#CCCCCC">used the algorithm</font><font color="#E5E5E5"> that arm suggests is</font>

404
00:20:12,830 --> 00:20:16,730
karma<font color="#E5E5E5"> but I do not believe</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> police</font>

405
00:20:15,379 --> 00:20:21,248
using<font color="#E5E5E5"> Karma</font>

406
00:20:16,730 --> 00:20:21,249
maybe they are<font color="#E5E5E5"> I I doubt that's the</font><font color="#CCCCCC"> case</font>

407
00:20:22,899 --> 00:20:29,719
the backwards<font color="#E5E5E5"> edge</font><font color="#CCCCCC"> GFI will actually</font>

408
00:20:27,080 --> 00:20:31,999
sign the pointer every time you enter<font color="#CCCCCC"> a</font>

409
00:20:29,720 --> 00:20:33,850
function<font color="#E5E5E5"> the the return pointer and then</font>

410
00:20:31,999 --> 00:20:36,470
<font color="#E5E5E5">it will store it on the stack normally</font>

411
00:20:33,850 --> 00:20:39,019
and when you return<font color="#CCCCCC"> from that</font><font color="#E5E5E5"> function</font>

412
00:20:36,470 --> 00:20:42,200
it will validate the pointer before

413
00:20:39,019 --> 00:20:43,669
doing indirect branch in the<font color="#CCCCCC"> rat</font><font color="#E5E5E5"> and you</font>

414
00:20:42,200 --> 00:20:46,549
can see<font color="#E5E5E5"> that the instruction is called</font>

415
00:20:43,669 --> 00:20:49,820
rat a B which means<font color="#E5E5E5"> that they actually</font>

416
00:20:46,549 --> 00:20:52,429
<font color="#E5E5E5">use the B key which is a secondary key</font>

417
00:20:49,820 --> 00:20:55,039
and they will<font color="#CCCCCC"> actually use a stack</font>

418
00:20:52,429 --> 00:20:57,769
pointer as well as the context value<font color="#E5E5E5"> so</font>

419
00:20:55,039 --> 00:20:59,359
if you have a stack frame and another

420
00:20:57,769 --> 00:21:01,690
stack frame you're not actually<font color="#E5E5E5"> able to</font>

421
00:20:59,359 --> 00:21:04,189
<font color="#E5E5E5">swap return addresses between the two</font>

422
00:21:01,690 --> 00:21:05,869
<font color="#E5E5E5">but you need to have two stack frames of</font>

423
00:21:04,190 --> 00:21:09,409
the same<font color="#CCCCCC"> depth in</font><font color="#E5E5E5"> order to be able to</font>

424
00:21:05,869 --> 00:21:11,238
<font color="#E5E5E5">pull it off so you</font><font color="#CCCCCC"> might be able to</font>

425
00:21:09,409 --> 00:21:14,629
carry<font color="#E5E5E5"> out some pointer substitution</font>

426
00:21:11,239 --> 00:21:20,330
attacks here but I don't<font color="#CCCCCC"> think it's a</font>

427
00:21:14,629 --> 00:21:22,908
viable strategy<font color="#CCCCCC"> in</font><font color="#E5E5E5"> C++ do</font><font color="#CCCCCC"> chaco indirect</font>

428
00:21:20,330 --> 00:21:25,580
branches<font color="#E5E5E5"> they will actually authenticate</font>

429
00:21:22,909 --> 00:21:29,059
your<font color="#E5E5E5"> V table pointer first with the a</font>

430
00:21:25,580 --> 00:21:30,050
key and then they will<font color="#CCCCCC"> use the pointer</font>

431
00:21:29,059 --> 00:21:33,110
to the

432
00:21:30,050 --> 00:21:35,928
virtual function pointer<font color="#E5E5E5"> as the context</font>

433
00:21:33,110 --> 00:21:38,090
<font color="#E5E5E5">for the authentication on the indirect</font>

434
00:21:35,929 --> 00:21:41,510
branch<font color="#CCCCCC"> and additionally</font><font color="#E5E5E5"> they will tag</font>

435
00:21:38,090 --> 00:21:45,320
the context the specific value which I

436
00:21:41,510 --> 00:21:48,650
believe is<font color="#CCCCCC"> per</font><font color="#E5E5E5"> vehicle specific</font><font color="#CCCCCC"> and</font>

437
00:21:45,320 --> 00:21:50,000
again<font color="#CCCCCC"> this all uses the a key and I</font>

438
00:21:48,650 --> 00:21:51,770
believe it's<font color="#E5E5E5"> really difficult to pull</font>

439
00:21:50,000 --> 00:21:54,620
off<font color="#CCCCCC"> pointer replacement attacks here</font>

440
00:21:51,770 --> 00:21:56,720
because yes every vehicle<font color="#E5E5E5"> will have a</font>

441
00:21:54,620 --> 00:22:00,520
different context<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you might</font><font color="#E5E5E5"> still</font>

442
00:21:56,720 --> 00:22:03,500
have<font color="#CCCCCC"> some</font><font color="#E5E5E5"> leeway to do funny stuff with</font>

443
00:22:00,520 --> 00:22:06,770
additionally the<font color="#CCCCCC"> Objective C</font><font color="#E5E5E5"> is present</font>

444
00:22:03,500 --> 00:22:09,200
in on us<font color="#E5E5E5"> and when you invoke a method in</font>

445
00:22:06,770 --> 00:22:11,929
Objective C you will<font color="#E5E5E5"> go to this function</font>

446
00:22:09,200 --> 00:22:14,600
called Objective C message<font color="#E5E5E5"> send and it</font>

447
00:22:11,929 --> 00:22:16,970
will get the<font color="#CCCCCC"> class</font><font color="#E5E5E5"> pointer from your</font>

448
00:22:14,600 --> 00:22:19,428
object<font color="#E5E5E5"> and from the class pointer there</font>

449
00:22:16,970 --> 00:22:21,559
is a fast method<font color="#E5E5E5"> cache</font>

450
00:22:19,429 --> 00:22:23,030
it will iterate the cache<font color="#E5E5E5"> and the only</font>

451
00:22:21,559 --> 00:22:25,190
point<font color="#CCCCCC"> that which the authentication</font>

452
00:22:23,030 --> 00:22:27,800
happens is when you do the indirect

453
00:22:25,190 --> 00:22:32,000
branch where the method pointer<font color="#E5E5E5"> and the</font>

454
00:22:27,800 --> 00:22:33,889
end the pointer to<font color="#E5E5E5"> the entry are used in</font>

455
00:22:32,000 --> 00:22:35,300
the branch<font color="#E5E5E5"> and the pointer to the entry</font>

456
00:22:33,890 --> 00:22:38,720
is used as the context in<font color="#E5E5E5"> this specific</font>

457
00:22:35,300 --> 00:22:42,399
case and you<font color="#E5E5E5"> can know that</font><font color="#CCCCCC"> they use the</font>

458
00:22:38,720 --> 00:22:44,990
B key here and I believe there might<font color="#E5E5E5"> be</font>

459
00:22:42,400 --> 00:22:48,290
tricks that can<font color="#CCCCCC"> be pulled off here as</font>

460
00:22:44,990 --> 00:22:52,370
the the only<font color="#CCCCCC"> place where authentication</font>

461
00:22:48,290 --> 00:22:54,620
happens is on the<font color="#CCCCCC"> branch</font><font color="#E5E5E5"> itself and this</font>

462
00:22:52,370 --> 00:22:57,409
<font color="#E5E5E5">is a simplest case in a</font><font color="#CCCCCC"> C indirect</font>

463
00:22:54,620 --> 00:22:59,600
branch they do not have any context and

464
00:22:57,410 --> 00:23:02,050
they cannot<font color="#CCCCCC"> use any context and they</font>

465
00:22:59,600 --> 00:23:04,879
will use the<font color="#E5E5E5"> a key for the branch</font><font color="#CCCCCC"> you</font>

466
00:23:02,050 --> 00:23:07,178
<font color="#CCCCCC">can</font><font color="#E5E5E5"> see we just have a fetch for a</font>

467
00:23:04,880 --> 00:23:09,800
function pointer<font color="#E5E5E5"> and then a branch and</font>

468
00:23:07,179 --> 00:23:11,630
with this sort of scenario<font color="#E5E5E5"> you can</font>

469
00:23:09,800 --> 00:23:14,149
actually<font color="#E5E5E5"> replace your function pointer</font>

470
00:23:11,630 --> 00:23:18,220
with any other<font color="#E5E5E5"> valid function</font><font color="#CCCCCC"> that might</font>

471
00:23:14,150 --> 00:23:18,220
be invoked<font color="#E5E5E5"> this way and it will work</font>

472
00:23:20,059 --> 00:23:24,230
additionally<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are some</font><font color="#E5E5E5"> special</font>

473
00:23:21,440 --> 00:23:27,400
cases<font color="#CCCCCC"> and</font><font color="#E5E5E5"> API is in iùs which deal with</font>

474
00:23:24,230 --> 00:23:30,860
pointers in ways that might not be

475
00:23:27,400 --> 00:23:33,679
normal ones<font color="#E5E5E5"> for instance you have tried</font>

476
00:23:30,860 --> 00:23:35,840
<font color="#E5E5E5">set context and pthread create which</font>

477
00:23:33,679 --> 00:23:40,610
will<font color="#E5E5E5"> always use a</font>

478
00:23:35,840 --> 00:23:42,199
<font color="#CCCCCC">he's</font><font color="#E5E5E5"> so no context and a key so all</font>

479
00:23:40,610 --> 00:23:45,550
these<font color="#CCCCCC"> AP is might actually be used as</font>

480
00:23:42,200 --> 00:23:48,970
invocation points for a key sign things

481
00:23:45,550 --> 00:23:52,129
<font color="#E5E5E5">and an kernel-mode</font><font color="#CCCCCC"> will actually have</font>

482
00:23:48,970 --> 00:23:54,560
<font color="#E5E5E5">thread</font><font color="#CCCCCC"> ap is that will</font><font color="#E5E5E5"> also check</font>

483
00:23:52,130 --> 00:23:56,270
against the<font color="#CCCCCC"> a key even if the a key in</font>

484
00:23:54,560 --> 00:24:00,440
kernel mode<font color="#E5E5E5"> and the a cane user</font><font color="#CCCCCC"> mode</font><font color="#E5E5E5"> are</font>

485
00:23:56,270 --> 00:24:03,680
are<font color="#E5E5E5"> different additionally there's some</font>

486
00:24:00,440 --> 00:24:07,670
internal context saving stuff in the OS

487
00:24:03,680 --> 00:24:10,580
kernel<font color="#E5E5E5"> which will store thread States</font>

488
00:24:07,670 --> 00:24:15,460
when<font color="#CCCCCC"> scheduling things out and they use</font>

489
00:24:10,580 --> 00:24:18,949
the G key in order<font color="#E5E5E5"> to sign those and</font>

490
00:24:15,460 --> 00:24:21,560
<font color="#CCCCCC">point authentication actually has a few</font>

491
00:24:18,950 --> 00:24:24,080
weak points<font color="#CCCCCC"> the number one strategy is</font>

492
00:24:21,560 --> 00:24:26,480
pointer replacement attacks<font color="#CCCCCC"> where you</font>

493
00:24:24,080 --> 00:24:29,000
will lick a<font color="#E5E5E5"> sign pointer and then you</font>

494
00:24:26,480 --> 00:24:31,130
will reuse<font color="#CCCCCC"> it</font><font color="#E5E5E5"> in a different place</font><font color="#CCCCCC"> as</font>

495
00:24:29,000 --> 00:24:34,970
long<font color="#E5E5E5"> as the key and the context is the</font>

496
00:24:31,130 --> 00:24:36,650
same additionally you will want to carry

497
00:24:34,970 --> 00:24:38,720
out a pointer<font color="#E5E5E5"> forger attack at some</font>

498
00:24:36,650 --> 00:24:42,950
point in order<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> perform</font>

499
00:24:38,720 --> 00:24:48,500
wrap and jump and to do that you will

500
00:24:42,950 --> 00:24:50,180
<font color="#CCCCCC">have to find a signing gadget additional</font>

501
00:24:48,500 --> 00:24:52,880
text<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> brute force which I do not</font>

502
00:24:50,180 --> 00:24:55,400
<font color="#E5E5E5">consider Bible in case your advanced</font>

503
00:24:52,880 --> 00:24:57,980
attacker<font color="#E5E5E5"> because I mean it might be</font>

504
00:24:55,400 --> 00:24:59,690
doable but it could take several minutes

505
00:24:57,980 --> 00:25:02,270
to<font color="#E5E5E5"> do it and I do</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> believe that's a</font>

506
00:24:59,690 --> 00:25:03,770
<font color="#CCCCCC">realistic</font><font color="#E5E5E5"> time frame</font>

507
00:25:02,270 --> 00:25:06,440
additionally there might be space

508
00:25:03,770 --> 00:25:08,120
attacks but I<font color="#E5E5E5"> doubt the Apple didn't</font>

509
00:25:06,440 --> 00:25:11,360
consider those even if it does look like

510
00:25:08,120 --> 00:25:13,429
<font color="#E5E5E5">they only use 64-bit keys</font><font color="#CCCCCC"> I'm pretty</font>

511
00:25:11,360 --> 00:25:17,199
sure they're<font color="#CCCCCC"> doing some weird stuff in</font>

512
00:25:13,430 --> 00:25:19,220
<font color="#E5E5E5">there silicon in order to add</font><font color="#CCCCCC"> entropy</font>

513
00:25:17,200 --> 00:25:19,760
but<font color="#CCCCCC"> I still do not</font><font color="#E5E5E5"> believe</font><font color="#CCCCCC"> that's</font>

514
00:25:19,220 --> 00:25:22,910
realistic

515
00:25:19,760 --> 00:25:27,110
I mean to<font color="#E5E5E5"> 264 operations will cost you a</font>

516
00:25:22,910 --> 00:25:32,600
lot<font color="#E5E5E5"> and it will take time but maybe it's</font>

517
00:25:27,110 --> 00:25:34,550
possible<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> not sure and</font><font color="#E5E5E5"> control flow</font>

518
00:25:32,600 --> 00:25:37,010
integrity will actually impact<font color="#E5E5E5"> the</font>

519
00:25:34,550 --> 00:25:40,730
attackers in<font color="#E5E5E5"> several different ways</font>

520
00:25:37,010 --> 00:25:42,860
the way<font color="#CCCCCC"> C++ periodicals are checked will</font>

521
00:25:40,730 --> 00:25:46,280
<font color="#E5E5E5">actually I believe kill a lot of</font>

522
00:25:42,860 --> 00:25:48,620
<font color="#E5E5E5">vulnerability classes web curb bugs it's</font>

523
00:25:46,280 --> 00:25:51,830
like dumb bugs are very<font color="#CCCCCC"> commonly used</font>

524
00:25:48,620 --> 00:25:53,570
<font color="#E5E5E5">after free virtual colon vacations</font><font color="#CCCCCC"> I</font>

525
00:25:51,830 --> 00:25:56,110
believe those are<font color="#E5E5E5"> very hard to exploit</font>

526
00:25:53,570 --> 00:25:58,549
now except<font color="#E5E5E5"> for some special scenarios</font>

527
00:25:56,110 --> 00:26:03,080
<font color="#E5E5E5">and there's also a io kit which is</font>

528
00:25:58,549 --> 00:26:06,020
<font color="#CCCCCC">kernel mode C++</font><font color="#E5E5E5"> used in iOS that is also</font>

529
00:26:03,080 --> 00:26:07,549
<font color="#E5E5E5">very prone to</font><font color="#CCCCCC"> use after free</font><font color="#E5E5E5"> and again</font>

530
00:26:06,020 --> 00:26:10,580
I'm<font color="#E5E5E5"> really doubtful that these</font>

531
00:26:07,549 --> 00:26:12,799
vulnerabilities are now good enough<font color="#CCCCCC"> to</font>

532
00:26:10,580 --> 00:26:14,270
be exploited<font color="#E5E5E5"> in most of the cases but</font>

533
00:26:12,799 --> 00:26:16,990
<font color="#E5E5E5">you can always find</font><font color="#CCCCCC"> better bugs if you</font>

534
00:26:14,270 --> 00:26:16,990
look hard<font color="#E5E5E5"> enough</font>

535
00:26:17,290 --> 00:26:22,220
additionally we mentioned two different

536
00:26:19,730 --> 00:26:24,049
keys key a<font color="#E5E5E5"> and key B the main difference</font>

537
00:26:22,220 --> 00:26:26,150
between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two is a key a is actually</font>

538
00:26:24,049 --> 00:26:30,710
shared across different processes<font color="#E5E5E5"> so</font>

539
00:26:26,150 --> 00:26:33,110
once you have a key forgery<font color="#CCCCCC"> pointer</font>

540
00:26:30,710 --> 00:26:34,850
forgery<font color="#E5E5E5"> capability</font><font color="#CCCCCC"> for key a you will be</font>

541
00:26:33,110 --> 00:26:37,879
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to reuse that</font><font color="#CCCCCC"> for every single</font>

542
00:26:34,850 --> 00:26:39,320
<font color="#CCCCCC">thing in the system so this is actually</font>

543
00:26:37,880 --> 00:26:41,270
<font color="#E5E5E5">really</font><font color="#CCCCCC"> useful in case you want to</font>

544
00:26:39,320 --> 00:26:43,480
<font color="#CCCCCC">perform</font><font color="#E5E5E5"> a user mod sandbox bypass in</font>

545
00:26:41,270 --> 00:26:45,918
order to elevate<font color="#E5E5E5"> your privileges</font>

546
00:26:43,480 --> 00:26:48,160
additionally javascriptcore makes<font color="#E5E5E5"> very</font>

547
00:26:45,919 --> 00:26:51,770
heavy use<font color="#CCCCCC"> of pointers indication and</font>

548
00:26:48,160 --> 00:26:55,220
they will<font color="#CCCCCC"> actually prevent a lot of</font>

549
00:26:51,770 --> 00:26:57,379
<font color="#CCCCCC">trigger attacks</font><font color="#E5E5E5"> I believe in the latest</font>

550
00:26:55,220 --> 00:27:00,100
<font color="#E5E5E5">few updates they actually improve this</font>

551
00:26:57,380 --> 00:27:03,020
quite a<font color="#CCCCCC"> bit</font>

552
00:27:00,100 --> 00:27:05,270
additionally I believe some<font color="#E5E5E5"> people might</font>

553
00:27:03,020 --> 00:27:07,580
<font color="#E5E5E5">be thinking it's a good</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> to replace</font>

554
00:27:05,270 --> 00:27:10,520
<font color="#E5E5E5">stack cookies with pointers indication</font>

555
00:27:07,580 --> 00:27:13,040
and I do not<font color="#E5E5E5"> believe this is a good idea</font>

556
00:27:10,520 --> 00:27:15,110
<font color="#CCCCCC">oh as the return address is usually</font>

557
00:27:13,040 --> 00:27:17,450
<font color="#E5E5E5">stored as the very last thing in a stack</font>

558
00:27:15,110 --> 00:27:21,620
frame while stack cookies can<font color="#E5E5E5"> be placed</font>

559
00:27:17,450 --> 00:27:23,870
surgically in order<font color="#E5E5E5"> to protect known</font>

560
00:27:21,620 --> 00:27:27,370
instruction pointer registers<font color="#CCCCCC"> that might</font>

561
00:27:23,870 --> 00:27:27,370
be skilled<font color="#CCCCCC"> on the stack</font>

562
00:27:28,220 --> 00:27:33,200
and the<font color="#E5E5E5"> biggest</font><font color="#CCCCCC"> impact I believe that</font>

563
00:27:31,220 --> 00:27:37,700
<font color="#CCCCCC">CFI will have in the world of iOS</font>

564
00:27:33,200 --> 00:27:39,259
attackers<font color="#CCCCCC"> is that it's</font><font color="#E5E5E5"> gonna make life</font><font color="#CCCCCC"> a</font>

565
00:27:37,700 --> 00:27:43,370
lot more difficult<font color="#CCCCCC"> for the remote code</font>

566
00:27:39,259 --> 00:27:45,230
execution<font color="#E5E5E5"> step of it</font><font color="#CCCCCC"> and data only</font>

567
00:27:43,370 --> 00:27:47,268
<font color="#E5E5E5">attacks I do not believe those are Bible</font>

568
00:27:45,230 --> 00:27:49,610
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to load your payload</font>

569
00:27:47,269 --> 00:27:53,539
<font color="#CCCCCC">in jibt memory and do kernel exploits</font>

570
00:27:49,610 --> 00:27:56,899
and your toolkit<font color="#E5E5E5"> however we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> call</font>

571
00:27:53,539 --> 00:28:01,340
<font color="#E5E5E5">it</font><font color="#CCCCCC"> however once you have a single</font><font color="#E5E5E5"> valid</font>

572
00:27:56,899 --> 00:28:04,158
way to<font color="#E5E5E5"> jump into an unprotected pointer</font>

573
00:28:01,340 --> 00:28:07,120
<font color="#CCCCCC">you will actually be able to easily</font>

574
00:28:04,159 --> 00:28:09,049
<font color="#CCCCCC">Forge pointers</font><font color="#E5E5E5"> from there and</font>

575
00:28:07,120 --> 00:28:11,149
additionally<font color="#CCCCCC"> you have a lot of entry</font>

576
00:28:09,049 --> 00:28:13,668
<font color="#CCCCCC">points that are not</font><font color="#E5E5E5"> recompiled against</font>

577
00:28:11,149 --> 00:28:16,729
new<font color="#E5E5E5"> ABI we're point authentication is</font>

578
00:28:13,669 --> 00:28:19,850
disabled<font color="#E5E5E5"> such as legacy apps</font><font color="#CCCCCC"> hand</font>

579
00:28:16,730 --> 00:28:21,710
<font color="#CCCCCC">written assembly sometimes might use</font>

580
00:28:19,850 --> 00:28:24,949
<font color="#E5E5E5">indirect branches without being</font>

581
00:28:21,710 --> 00:28:26,539
protected<font color="#CCCCCC"> and you do</font><font color="#E5E5E5"> have a JIT that you</font>

582
00:28:24,950 --> 00:28:27,860
might be able<font color="#E5E5E5"> to trick somehow into</font>

583
00:28:26,539 --> 00:28:34,309
<font color="#CCCCCC">emitting I don't know</font><font color="#E5E5E5"> that they get it</font>

584
00:28:27,860 --> 00:28:36,620
branch<font color="#CCCCCC"> if you actually wanted</font><font color="#E5E5E5"> to go with</font>

585
00:28:34,309 --> 00:28:38,539
a data<font color="#E5E5E5"> only way</font><font color="#CCCCCC"> the number one issue</font>

586
00:28:36,620 --> 00:28:43,340
you'd have is the<font color="#E5E5E5"> ability to issue</font>

587
00:28:38,539 --> 00:28:45,019
<font color="#CCCCCC">Cisco's from WebKit however</font><font color="#E5E5E5"> iOS is</font>

588
00:28:43,340 --> 00:28:47,629
actually designed around the concept of

589
00:28:45,019 --> 00:28:51,080
message passing<font color="#CCCCCC"> so Cisco's are not the</font>

590
00:28:47,629 --> 00:28:52,519
only<font color="#E5E5E5"> thing you</font><font color="#CCCCCC"> might want to do and it's</font>

591
00:28:51,080 --> 00:28:56,418
actually really common<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

592
00:28:52,519 --> 00:28:59,389
<font color="#E5E5E5">invoke the cisco mac message once you</font>

593
00:28:56,419 --> 00:29:02,330
have like any sort of app or daemon

594
00:28:59,389 --> 00:29:04,039
running on us and once you have

595
00:29:02,330 --> 00:29:06,080
arbitrary<font color="#CCCCCC"> read write you're actually</font>

596
00:29:04,039 --> 00:29:08,779
<font color="#E5E5E5">able to rewrite the stack frame of a</font>

597
00:29:06,080 --> 00:29:11,389
loop with<font color="#CCCCCC"> matt message</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to send</font>

598
00:29:08,779 --> 00:29:13,450
<font color="#CCCCCC">multiple messages and possibly use this</font>

599
00:29:11,389 --> 00:29:15,350
as a way to obtain<font color="#E5E5E5"> pointer forgery</font>

600
00:29:13,450 --> 00:29:17,419
<font color="#E5E5E5">additionally a vast</font><font color="#CCCCCC"> majority of the</font>

601
00:29:15,350 --> 00:29:19,789
attacks were<font color="#E5E5E5"> faced on</font><font color="#CCCCCC"> kernel mode ius as</font>

602
00:29:17,419 --> 00:29:21,769
well as user mode sandbox escape<font color="#E5E5E5"> is</font>

603
00:29:19,789 --> 00:29:25,669
actually always<font color="#E5E5E5"> reached through</font><font color="#CCCCCC"> this</font>

604
00:29:21,769 --> 00:29:29,299
<font color="#E5E5E5">cisco so it's probably a good strategy</font>

605
00:29:25,669 --> 00:29:34,519
<font color="#CCCCCC">although I never try to do data only</font><font color="#E5E5E5"> I</font>

606
00:29:29,299 --> 00:29:36,918
preserve forgery attacks<font color="#E5E5E5"> and for a</font><font color="#CCCCCC"> real</font>

607
00:29:34,519 --> 00:29:38,680
<font color="#CCCCCC">life attack that was released very</font>

608
00:29:36,919 --> 00:29:41,500
recently<font color="#E5E5E5"> by Brendan added</font>

609
00:29:38,680 --> 00:29:46,420
at<font color="#CCCCCC"> Project zebra I will describe the way</font>

610
00:29:41,500 --> 00:29:48,100
<font color="#E5E5E5">the attack will work well had worked</font><font color="#CCCCCC"> yes</font>

611
00:29:46,420 --> 00:29:50,770
<font color="#E5E5E5">Brandon</font><font color="#CCCCCC"> had that</font><font color="#E5E5E5"> releases attack in</font>

612
00:29:48,100 --> 00:29:53,110
January<font color="#CCCCCC"> and it's a very</font><font color="#E5E5E5"> first point</font>

613
00:29:50,770 --> 00:29:56,500
authentication attack<font color="#E5E5E5"> known to the</font>

614
00:29:53,110 --> 00:30:00,219
<font color="#CCCCCC">public and it was</font><font color="#E5E5E5"> released actually</font><font color="#CCCCCC"> to</font>

615
00:29:56,500 --> 00:30:01,780
get<font color="#CCCCCC"> kernel mode code execution in a in a</font>

616
00:30:00,220 --> 00:30:04,510
way that allows you<font color="#E5E5E5"> to invoke arbitrary</font>

617
00:30:01,780 --> 00:30:07,420
<font color="#E5E5E5">gadget for his voucher swap exploit and</font>

618
00:30:04,510 --> 00:30:09,480
the trick he used<font color="#E5E5E5"> is really cool</font>

619
00:30:07,420 --> 00:30:15,160
it's a really really<font color="#CCCCCC"> really cool</font>

620
00:30:09,480 --> 00:30:17,170
technique and he<font color="#E5E5E5"> started by looking for</font>

621
00:30:15,160 --> 00:30:21,520
a signing gadget that<font color="#E5E5E5"> you could invoke</font>

622
00:30:17,170 --> 00:30:24,160
from<font color="#E5E5E5"> a signed branch of course there's</font>

623
00:30:21,520 --> 00:30:25,920
no trivial ones that just lay around and

624
00:30:24,160 --> 00:30:30,010
allow you<font color="#E5E5E5"> to sign whatever you want</font>

625
00:30:25,920 --> 00:30:31,330
<font color="#E5E5E5">however there are some cases where the</font>

626
00:30:30,010 --> 00:30:34,360
<font color="#E5E5E5">kernel</font><font color="#CCCCCC"> will actually have</font><font color="#E5E5E5"> to take a</font>

627
00:30:31,330 --> 00:30:38,710
signed address and change the<font color="#E5E5E5"> signature</font>

628
00:30:34,360 --> 00:30:41,290
<font color="#CCCCCC">to a different context or key and this</font>

629
00:30:38,710 --> 00:30:44,260
is actually represented by a sequence<font color="#CCCCCC"> of</font>

630
00:30:41,290 --> 00:30:46,899
up codes<font color="#E5E5E5"> the</font><font color="#CCCCCC"> LT up code and pass the up</font>

631
00:30:44,260 --> 00:30:48,520
code which will the first one will

632
00:30:46,900 --> 00:30:51,730
<font color="#CCCCCC">actually authenticate</font><font color="#E5E5E5"> your pointer and</font>

633
00:30:48,520 --> 00:30:56,860
then strip the authentication code and

634
00:30:51,730 --> 00:30:59,320
the second will overwrite the the top

635
00:30:56,860 --> 00:31:03,820
bits of the pointer<font color="#E5E5E5"> and put a new</font>

636
00:30:59,320 --> 00:31:08,740
<font color="#CCCCCC">authentication code in them and it</font><font color="#E5E5E5"> looks</font>

637
00:31:03,820 --> 00:31:12,070
<font color="#E5E5E5">straightforward however what if the</font>

638
00:31:08,740 --> 00:31:14,500
<font color="#E5E5E5">first up code fails the check well it's</font>

639
00:31:12,070 --> 00:31:18,370
not actually branch or any<font color="#E5E5E5"> indirect</font>

640
00:31:14,500 --> 00:31:21,850
memory load so it will<font color="#CCCCCC"> actually do</font>

641
00:31:18,370 --> 00:31:25,209
nothing it<font color="#CCCCCC"> will just set some extra bits</font>

642
00:31:21,850 --> 00:31:27,699
in an invalid way<font color="#E5E5E5"> and it's gonna hope</font>

643
00:31:25,210 --> 00:31:29,170
that<font color="#CCCCCC"> the next up code the pass see</font><font color="#E5E5E5"> will</font>

644
00:31:27,700 --> 00:31:32,890
take that into<font color="#CCCCCC"> consideration</font><font color="#E5E5E5"> and</font>

645
00:31:29,170 --> 00:31:35,440
propagate the<font color="#CCCCCC"> error</font><font color="#E5E5E5"> further however it</font>

646
00:31:32,890 --> 00:31:37,780
<font color="#E5E5E5">will do that by flipping a single bit</font>

647
00:31:35,440 --> 00:31:41,170
after applying the valid signature<font color="#E5E5E5"> on</font>

648
00:31:37,780 --> 00:31:43,960
top of the pointer<font color="#CCCCCC"> so if you specify</font><font color="#E5E5E5"> an</font>

649
00:31:41,170 --> 00:31:48,179
invalid signature<font color="#E5E5E5"> to begin with you will</font>

650
00:31:43,960 --> 00:31:50,580
<font color="#E5E5E5">get a signature which</font><font color="#CCCCCC"> is also</font><font color="#E5E5E5"> invalid</font>

651
00:31:48,179 --> 00:31:52,259
just because one of<font color="#E5E5E5"> the bits is and so</font>

652
00:31:50,580 --> 00:31:59,970
you<font color="#E5E5E5"> can just flip that bit back and now</font>

653
00:31:52,259 --> 00:32:01,980
you have pointer forgery<font color="#CCCCCC"> on</font><font color="#E5E5E5"> arm</font><font color="#CCCCCC"> 8.3</font><font color="#E5E5E5"> he's</font>

654
00:31:59,970 --> 00:32:04,860
<font color="#CCCCCC">attack relied on a function in the</font>

655
00:32:01,980 --> 00:32:07,080
kernel<font color="#E5E5E5"> called</font><font color="#CCCCCC"> see CTL unregistered a</font><font color="#E5E5E5"> ID</font>

656
00:32:04,860 --> 00:32:10,369
which will<font color="#E5E5E5"> take a pointer and</font><font color="#CCCCCC"> we will</font>

657
00:32:07,080 --> 00:32:13,559
<font color="#E5E5E5">turn into a a key signed</font><font color="#CCCCCC"> 0 context</font>

658
00:32:10,369 --> 00:32:17,220
pointer<font color="#E5E5E5"> and you can</font><font color="#CCCCCC"> actually invoke that</font>

659
00:32:13,559 --> 00:32:19,379
as a<font color="#CCCCCC"> legitimate part of the LD l2tp the</font>

660
00:32:17,220 --> 00:32:21,450
main module<font color="#E5E5E5"> stop which happens to be</font><font color="#CCCCCC"> a</font>

661
00:32:19,379 --> 00:32:23,580
<font color="#CCCCCC">function for</font><font color="#E5E5E5"> which there is a valid</font>

662
00:32:21,450 --> 00:32:25,619
signed pointer present in the address

663
00:32:23,580 --> 00:32:26,908
<font color="#CCCCCC">space so as</font><font color="#E5E5E5"> long</font><font color="#CCCCCC"> as you have a read</font>

664
00:32:25,619 --> 00:32:29,580
primitive<font color="#E5E5E5"> you are able to lick the</font>

665
00:32:26,909 --> 00:32:33,119
pointer to the<font color="#E5E5E5"> function and just invoke</font>

666
00:32:29,580 --> 00:32:36,090
it with any impact branch that has a key

667
00:32:33,119 --> 00:32:38,158
and<font color="#CCCCCC"> zero context and once you invoke</font>

668
00:32:36,090 --> 00:32:41,039
this it will actually<font color="#E5E5E5"> store the results</font>

669
00:32:38,159 --> 00:32:43,139
of the<font color="#E5E5E5"> path</font><font color="#CCCCCC"> see up code</font><font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> in</font>

670
00:32:41,039 --> 00:32:45,360
memory<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can just read it flip the bit</font>

671
00:32:43,139 --> 00:32:47,639
back<font color="#E5E5E5"> and yes you can use</font><font color="#CCCCCC"> this in</font><font color="#E5E5E5"> order</font>

672
00:32:45,360 --> 00:32:50,100
<font color="#E5E5E5">to sign a pointer</font><font color="#CCCCCC"> to a branch which</font>

673
00:32:47,639 --> 00:32:52,740
which<font color="#E5E5E5"> is not authenticated and from</font>

674
00:32:50,100 --> 00:32:55,019
there you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> just reuse that pointer</font>

675
00:32:52,740 --> 00:32:57,600
<font color="#CCCCCC">over and over in</font><font color="#E5E5E5"> order to branch</font>

676
00:32:55,019 --> 00:33:00,139
<font color="#E5E5E5">anywhere you want into the kernel</font><font color="#CCCCCC"> mode</font>

677
00:32:57,600 --> 00:33:00,139
<font color="#E5E5E5">address space</font>

678
00:33:00,570 --> 00:33:07,649
additionally you can actually use normal

679
00:33:04,679 --> 00:33:10,169
job<font color="#CCCCCC"> and from there you</font><font color="#E5E5E5"> can invoke</font>

680
00:33:07,649 --> 00:33:12,449
another<font color="#CCCCCC"> signing gadget which might be</font>

681
00:33:10,169 --> 00:33:14,700
<font color="#CCCCCC">more convenient</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> for instance</font><font color="#CCCCCC"> just</font>

682
00:33:12,450 --> 00:33:18,059
invoking the<font color="#CCCCCC"> path C up code after the</font>

683
00:33:14,700 --> 00:33:24,029
outside<font color="#E5E5E5"> and you will be able to sign</font>

684
00:33:18,059 --> 00:33:25,799
founders over and over<font color="#E5E5E5"> we</font><font color="#CCCCCC"> no effort the</font>

685
00:33:24,029 --> 00:33:28,230
attack was actually fixed by adding a

686
00:33:25,799 --> 00:33:31,230
filler case after the authentication

687
00:33:28,230 --> 00:33:34,499
instruction however<font color="#CCCCCC"> the strategy cannot</font>

688
00:33:31,230 --> 00:33:37,950
still<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> today as a pointer</font><font color="#CCCCCC"> validly</font>

689
00:33:34,499 --> 00:33:40,619
<font color="#CCCCCC">Oracle</font><font color="#E5E5E5"> the big issue is that the failure</font>

690
00:33:37,950 --> 00:33:42,690
case is<font color="#E5E5E5"> not fatal</font><font color="#CCCCCC"> while in a normal</font>

691
00:33:40,619 --> 00:33:46,439
authentication use such as<font color="#E5E5E5"> memory access</font>

692
00:33:42,690 --> 00:33:48,269
or branch<font color="#E5E5E5"> once the authentication fails</font>

693
00:33:46,440 --> 00:33:50,940
the pointer that<font color="#CCCCCC"> is supplied to</font><font color="#E5E5E5"> the</font>

694
00:33:48,269 --> 00:33:52,950
<font color="#E5E5E5">branch or the load is invalid and so the</font>

695
00:33:50,940 --> 00:33:54,960
<font color="#E5E5E5">the program will crash</font><font color="#CCCCCC"> immediately in</font>

696
00:33:52,950 --> 00:33:56,909
this case it<font color="#E5E5E5"> won't so even if the</font>

697
00:33:54,960 --> 00:33:59,280
pointer is invalid<font color="#CCCCCC"> all it's gonna happen</font>

698
00:33:56,909 --> 00:34:02,130
<font color="#E5E5E5">is that it's gonna not output</font>

699
00:33:59,280 --> 00:34:04,320
signed<font color="#E5E5E5"> address</font><font color="#CCCCCC"> so if you just keep</font>

700
00:34:02,130 --> 00:34:07,200
<font color="#CCCCCC">trying until you see a sign address as</font>

701
00:34:04,320 --> 00:34:09,210
the output<font color="#E5E5E5"> you will yeah actually have</font>

702
00:34:07,200 --> 00:34:10,530
pounder forgery all over again<font color="#CCCCCC"> and I</font>

703
00:34:09,210 --> 00:34:13,050
<font color="#CCCCCC">think Brenda mentioned that</font><font color="#E5E5E5"> these would</font>

704
00:34:10,530 --> 00:34:15,780
take<font color="#CCCCCC"> about fifteen minutes</font><font color="#E5E5E5"> which I mean</font>

705
00:34:13,050 --> 00:34:17,880
it's not<font color="#CCCCCC"> realistic for us</font><font color="#E5E5E5"> attacker but</font>

706
00:34:15,780 --> 00:34:21,960
it might be realistic<font color="#E5E5E5"> for just personal</font>

707
00:34:17,880 --> 00:34:23,970
use and<font color="#E5E5E5"> research but this is not the</font>

708
00:34:21,960 --> 00:34:27,270
<font color="#CCCCCC">only</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> pull changed in the</font>

709
00:34:23,969 --> 00:34:32,189
new chips<font color="#CCCCCC"> there are some kernel mode</font>

710
00:34:27,270 --> 00:34:35,100
changes<font color="#CCCCCC"> the P map</font><font color="#E5E5E5"> and P map is the code</font>

711
00:34:32,190 --> 00:34:39,780
that<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> charge of keeping page tables</font>

712
00:34:35,100 --> 00:34:41,250
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know in aus and page tables are</font>

713
00:34:39,780 --> 00:34:45,870
actually<font color="#CCCCCC"> involved in</font><font color="#E5E5E5"> a bunch of code</font>

714
00:34:41,250 --> 00:34:48,719
<font color="#CCCCCC">sign related tasks and actually the code</font>

715
00:34:45,870 --> 00:34:53,029
sign<font color="#E5E5E5"> kernel driver delegated a lot of</font>

716
00:34:48,719 --> 00:34:55,918
trust<font color="#E5E5E5"> related things to be map in is 12</font>

717
00:34:53,030 --> 00:34:57,570
and then arbitrary physical<font color="#E5E5E5"> right would</font>

718
00:34:55,918 --> 00:35:00,290
actually be able<font color="#E5E5E5"> to just alter the page</font>

719
00:34:57,570 --> 00:35:03,930
tables and skip<font color="#E5E5E5"> all the code sign issues</font>

720
00:35:00,290 --> 00:35:06,450
however<font color="#E5E5E5"> I pulled out of that and now</font>

721
00:35:03,930 --> 00:35:08,819
every single<font color="#CCCCCC"> time that</font><font color="#E5E5E5"> you want to touch</font>

722
00:35:06,450 --> 00:35:10,230
the page tables<font color="#CCCCCC"> you actually have to</font>

723
00:35:08,820 --> 00:35:14,250
invoke these functions which are<font color="#E5E5E5"> in</font>

724
00:35:10,230 --> 00:35:17,910
their own<font color="#E5E5E5"> code segment</font><font color="#CCCCCC"> additionally as I</font>

725
00:35:14,250 --> 00:35:20,520
mentioned adding trusted hashes<font color="#CCCCCC"> to your</font>

726
00:35:17,910 --> 00:35:23,879
kernel now requires calling<font color="#E5E5E5"> into one of</font>

727
00:35:20,520 --> 00:35:25,740
these functions<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> p map thing</font><font color="#E5E5E5"> and</font>

728
00:35:23,880 --> 00:35:27,510
in order to enter any<font color="#E5E5E5"> of those functions</font>

729
00:35:25,740 --> 00:35:29,339
<font color="#CCCCCC">you actually have to branch</font><font color="#E5E5E5"> into a thing</font>

730
00:35:27,510 --> 00:35:31,200
called<font color="#E5E5E5"> ppl dispatch which is a</font>

731
00:35:29,340 --> 00:35:34,830
<font color="#E5E5E5">trampoline</font><font color="#CCCCCC"> that will change a system</font>

732
00:35:31,200 --> 00:35:36,540
register and essentially once you change

733
00:35:34,830 --> 00:35:38,220
the<font color="#E5E5E5"> system register in a specific way</font>

734
00:35:36,540 --> 00:35:40,610
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to alter page</font>

735
00:35:38,220 --> 00:35:43,589
tables otherwise every time you try to

736
00:35:40,610 --> 00:35:45,960
alter some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that data the system will</font>

737
00:35:43,590 --> 00:35:47,970
<font color="#CCCCCC">actually just</font><font color="#E5E5E5"> crash and yeah you're not</font>

738
00:35:45,960 --> 00:35:51,150
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be able to inject code by just</font>

739
00:35:47,970 --> 00:35:52,589
having<font color="#E5E5E5"> a read write anymore additionally</font>

740
00:35:51,150 --> 00:35:54,840
all the routines the<font color="#E5E5E5"> are expose will</font>

741
00:35:52,590 --> 00:35:56,730
validate<font color="#E5E5E5"> input to</font><font color="#CCCCCC"> some extent</font><font color="#E5E5E5"> so you can</font>

742
00:35:54,840 --> 00:36:00,360
just create<font color="#E5E5E5"> like</font><font color="#CCCCCC"> a fake structure</font>

743
00:35:56,730 --> 00:36:04,140
containing a fake set of page tables but

744
00:36:00,360 --> 00:36:05,760
you must use<font color="#E5E5E5"> real data that it</font><font color="#CCCCCC"> actually</font>

745
00:36:04,140 --> 00:36:08,779
keeps track<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the structures</font><font color="#CCCCCC"> that</font>

746
00:36:05,760 --> 00:36:08,780
you're allowed to<font color="#E5E5E5"> pass it</font>

747
00:36:10,350 --> 00:36:18,150
and once you enter<font color="#CCCCCC"> ppl</font><font color="#E5E5E5"> you're gonna run</font>

748
00:36:13,830 --> 00:36:19,940
the first section of code which sets<font color="#E5E5E5"> the</font>

749
00:36:18,150 --> 00:36:26,580
silic system register to specific

750
00:36:19,940 --> 00:36:29,430
pattern which<font color="#CCCCCC"> is 4 4 5 5 4 4 5 5 6 4 6 6</font>

751
00:36:26,580 --> 00:36:34,640
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see that when he exits</font><font color="#CCCCCC"> there is</font>

752
00:36:29,430 --> 00:36:39,980
actually a small difference where the

753
00:36:34,640 --> 00:36:42,240
the<font color="#E5E5E5"> firfer 5 5 becomes a 4 4 5 4 and</font>

754
00:36:39,980 --> 00:36:44,310
that bit is in charge of<font color="#CCCCCC"> telling the</font>

755
00:36:42,240 --> 00:36:47,160
system<font color="#E5E5E5"> whether you're in ppl mode</font><font color="#CCCCCC"> the</font>

756
00:36:44,310 --> 00:36:49,560
ppl mode allows<font color="#CCCCCC"> you yeah</font><font color="#E5E5E5"> alter page</font>

757
00:36:47,160 --> 00:36:53,540
tables<font color="#E5E5E5"> so I'm not</font><font color="#CCCCCC"> sure why they chose</font>

758
00:36:49,560 --> 00:36:57,750
that<font color="#CCCCCC"> specific bit pattern</font><font color="#E5E5E5"> but</font>

759
00:36:53,540 --> 00:37:00,450
additionally once you encounter an

760
00:36:57,750 --> 00:37:02,100
exception<font color="#CCCCCC"> you will actually the curtain</font>

761
00:37:00,450 --> 00:37:04,410
will actually check whether you're in

762
00:37:02,100 --> 00:37:06,509
such a special mode and if you're in

763
00:37:04,410 --> 00:37:11,609
<font color="#CCCCCC">that mode it will branch to exception</font>

764
00:37:06,510 --> 00:37:13,200
handlers<font color="#CCCCCC"> to cific to that mode so these</font>

765
00:37:11,610 --> 00:37:15,770
would kill a bunch of<font color="#E5E5E5"> tricks that</font><font color="#CCCCCC"> you</font>

766
00:37:13,200 --> 00:37:20,640
<font color="#E5E5E5">could use in order to</font><font color="#CCCCCC"> bypass such a</font>

767
00:37:15,770 --> 00:37:22,530
<font color="#E5E5E5">mitigation</font><font color="#CCCCCC"> but it is important to</font><font color="#E5E5E5"> remind</font>

768
00:37:20,640 --> 00:37:24,299
<font color="#E5E5E5">that everything is</font><font color="#CCCCCC"> still in normal l1</font>

769
00:37:22,530 --> 00:37:28,500
which is the<font color="#CCCCCC"> equivalent of bring</font><font color="#E5E5E5"> 0 as</font>

770
00:37:24,300 --> 00:37:31,020
far as<font color="#E5E5E5"> arm 64 goes</font><font color="#CCCCCC"> and it all relies on</font>

771
00:37:28,500 --> 00:37:35,250
custom silicon logic<font color="#CCCCCC"> imply implemented</font>

772
00:37:31,020 --> 00:37:39,180
by Apple<font color="#CCCCCC"> it's pretty cool stuff but</font><font color="#E5E5E5"> the</font>

773
00:37:35,250 --> 00:37:41,100
design does have weaknesses<font color="#CCCCCC"> however it</font>

774
00:37:39,180 --> 00:37:43,890
is a work in progress and I do<font color="#E5E5E5"> believe</font>

775
00:37:41,100 --> 00:37:47,330
that the iOS game will get exponentially

776
00:37:43,890 --> 00:37:47,330
more difficult<font color="#CCCCCC"> as time goes on to play</font>

777
00:37:47,390 --> 00:37:52,920
however<font color="#E5E5E5"> these specific mitigation is</font>

778
00:37:50,550 --> 00:37:56,010
mostly seeing Americans for job records

779
00:37:52,920 --> 00:38:00,510
because fundamentally<font color="#CCCCCC"> if you're trying</font>

780
00:37:56,010 --> 00:38:03,390
<font color="#E5E5E5">to say gather data on somebody once you</font>

781
00:38:00,510 --> 00:38:05,100
get code execution as<font color="#CCCCCC"> root out of the</font>

782
00:38:03,390 --> 00:38:06,569
<font color="#CCCCCC">sandbox that's actually all you need</font>

783
00:38:05,100 --> 00:38:10,560
<font color="#E5E5E5">that you don't</font><font color="#CCCCCC"> even need to go kernel</font>

784
00:38:06,570 --> 00:38:13,960
mode<font color="#E5E5E5"> however it does make rootkit</font>

785
00:38:10,560 --> 00:38:17,558
attacks<font color="#E5E5E5"> a bit trickier</font><font color="#CCCCCC"> to pull off</font>

786
00:38:13,960 --> 00:38:20,079
and realistically once you bypass<font color="#E5E5E5"> GFI</font>

787
00:38:17,559 --> 00:38:23,020
you can still invoke the peanut

788
00:38:20,079 --> 00:38:25,690
functions in order<font color="#CCCCCC"> to add frosted hashes</font>

789
00:38:23,020 --> 00:38:30,220
your kernel and load your<font color="#E5E5E5"> own code</font>

790
00:38:25,690 --> 00:38:34,599
<font color="#E5E5E5">without violating code sign so what does</font>

791
00:38:30,220 --> 00:38:36,279
the<font color="#CCCCCC"> future have for iOS attackers</font><font color="#E5E5E5"> at the</font>

792
00:38:34,599 --> 00:38:40,300
end of the day I believe iOS attackers

793
00:38:36,280 --> 00:38:41,859
are fighting a<font color="#CCCCCC"> losing battle</font><font color="#E5E5E5"> however the</font>

794
00:38:40,300 --> 00:38:45,819
rate at which the<font color="#E5E5E5"> battle is being lost</font>

795
00:38:41,859 --> 00:38:48,700
is very fast in some cases<font color="#E5E5E5"> very slow in</font>

796
00:38:45,819 --> 00:38:50,200
others and I always<font color="#E5E5E5"> have a thought in</font>

797
00:38:48,700 --> 00:38:51,700
<font color="#E5E5E5">the back</font><font color="#CCCCCC"> of my head that tells me hey</font>

798
00:38:50,200 --> 00:38:53,410
memory corruption is about to die in<font color="#CCCCCC"> a</font>

799
00:38:51,700 --> 00:38:58,390
couple<font color="#CCCCCC"> of years they're never</font><font color="#E5E5E5"> gonna be</font>

800
00:38:53,410 --> 00:38:59,950
able<font color="#E5E5E5"> to hack the new chip next year</font><font color="#CCCCCC"> but</font>

801
00:38:58,390 --> 00:39:02,290
I've actually<font color="#E5E5E5"> been</font><font color="#CCCCCC"> thinking these for</font>

802
00:38:59,950 --> 00:39:06,009
the past<font color="#E5E5E5"> three years and every single</font>

803
00:39:02,290 --> 00:39:11,380
<font color="#E5E5E5">time you know there was a way to carry</font>

804
00:39:06,010 --> 00:39:13,540
on my research<font color="#E5E5E5"> and realistically web</font>

805
00:39:11,380 --> 00:39:16,059
browsers have so<font color="#CCCCCC"> much complexity</font><font color="#E5E5E5"> there</font>

806
00:39:13,540 --> 00:39:19,180
is no way in hell web<font color="#E5E5E5"> browsers are ever</font>

807
00:39:16,059 --> 00:39:20,619
<font color="#CCCCCC">gonna be</font><font color="#E5E5E5"> secure so</font><font color="#CCCCCC"> I believe yeah life</font>

808
00:39:19,180 --> 00:39:23,410
<font color="#E5E5E5">is gonna be</font><font color="#CCCCCC"> ok for people that do one</font>

809
00:39:20,619 --> 00:39:26,500
click<font color="#E5E5E5"> but 0 click scenarios will</font>

810
00:39:23,410 --> 00:39:28,000
probably survive for a<font color="#CCCCCC"> while but</font><font color="#E5E5E5"> it's</font>

811
00:39:26,500 --> 00:39:31,270
<font color="#CCCCCC">gonna be</font><font color="#E5E5E5"> more and more difficult</font><font color="#CCCCCC"> as time</font>

812
00:39:28,000 --> 00:39:32,799
<font color="#E5E5E5">goes on and the</font><font color="#CCCCCC"> rate at which zero click</font>

813
00:39:31,270 --> 00:39:36,040
is getting<font color="#E5E5E5"> more difficult is a lot more</font>

814
00:39:32,799 --> 00:39:37,750
<font color="#E5E5E5">difficult than one click additionally I</font>

815
00:39:36,040 --> 00:39:40,359
do believe<font color="#E5E5E5"> Joe Brooks are likely to fade</font>

816
00:39:37,750 --> 00:39:42,490
away<font color="#E5E5E5"> at some point in the future</font><font color="#CCCCCC"> which</font>

817
00:39:40,359 --> 00:39:45,098
makes me<font color="#CCCCCC"> really sad because I do</font>

818
00:39:42,490 --> 00:39:47,399
appreciate<font color="#CCCCCC"> Joburg Salah</font><font color="#E5E5E5"> and they let</font><font color="#CCCCCC"> me</font>

819
00:39:45,099 --> 00:39:51,220
play with<font color="#E5E5E5"> apples you know internal</font>

820
00:39:47,400 --> 00:39:53,650
engineering<font color="#E5E5E5"> and I believe</font><font color="#CCCCCC"> that breaking</font>

821
00:39:51,220 --> 00:39:55,348
it is actually an act of<font color="#E5E5E5"> respect and</font>

822
00:39:53,650 --> 00:39:58,809
curiosity towards<font color="#E5E5E5"> the people that made</font>

823
00:39:55,349 --> 00:40:01,990
these engineering and physical<font color="#E5E5E5"> attacks</font>

824
00:39:58,809 --> 00:40:04,480
are still gonna be viable for<font color="#CCCCCC"> a bunch of</font>

825
00:40:01,990 --> 00:40:07,839
time<font color="#E5E5E5"> I believe</font><font color="#CCCCCC"> because at the end</font><font color="#E5E5E5"> of the</font>

826
00:40:04,480 --> 00:40:09,970
day you can always put first<font color="#CCCCCC"> and it</font>

827
00:40:07,839 --> 00:40:11,589
<font color="#E5E5E5">doesn't matter to you if it takes half</font>

828
00:40:09,970 --> 00:40:13,868
an hour to<font color="#CCCCCC"> do it because the shipment</font>

829
00:40:11,589 --> 00:40:15,900
<font color="#E5E5E5">will cause</font><font color="#CCCCCC"> well we would take</font><font color="#E5E5E5"> a day at</font>

830
00:40:13,869 --> 00:40:15,900
least

831
00:40:16,950 --> 00:40:21,750
and individual researchers which are

832
00:40:19,080 --> 00:40:23,790
able<font color="#CCCCCC"> to go through</font><font color="#E5E5E5"> all this stuff still</font>

833
00:40:21,750 --> 00:40:25,350
<font color="#CCCCCC">exist</font><font color="#E5E5E5"> to this date</font>

834
00:40:23,790 --> 00:40:29,790
however it's getting tougher<font color="#E5E5E5"> and tougher</font>

835
00:40:25,350 --> 00:40:31,950
<font color="#CCCCCC">and at some</font><font color="#E5E5E5"> point you</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> take into</font>

836
00:40:29,790 --> 00:40:36,080
<font color="#CCCCCC">account the fact</font><font color="#E5E5E5"> that these takes</font>

837
00:40:31,950 --> 00:40:38,520
serious amounts of time<font color="#E5E5E5"> and I do believe</font>

838
00:40:36,080 --> 00:40:40,529
the number one concern for<font color="#CCCCCC"> Eris</font>

839
00:40:38,520 --> 00:40:44,370
attackers is to strike a good<font color="#CCCCCC"> work-life</font>

840
00:40:40,530 --> 00:40:48,180
balance<font color="#CCCCCC"> because I mean if you do too</font>

841
00:40:44,370 --> 00:40:49,500
much life<font color="#E5E5E5"> you're gonna not be able to</font>

842
00:40:48,180 --> 00:40:51,779
<font color="#E5E5E5">catch up with</font><font color="#CCCCCC"> all these medications</font>

843
00:40:49,500 --> 00:40:55,590
<font color="#E5E5E5">however if you do too much work you're</font>

844
00:40:51,780 --> 00:40:57,330
gonna hate<font color="#CCCCCC"> this work</font><font color="#E5E5E5"> so realistically I</font>

845
00:40:55,590 --> 00:41:01,140
do not think<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> maintainable and</font>

846
00:40:57,330 --> 00:41:03,630
<font color="#CCCCCC">we'll probably need better jobs but I</font>

847
00:41:01,140 --> 00:41:09,830
would rather wait another few years<font color="#E5E5E5"> for</font>

848
00:41:03,630 --> 00:41:09,830
that so thank<font color="#E5E5E5"> you for attending the code</font>

849
00:41:13,099 --> 00:41:17,779
and I do want to thank<font color="#E5E5E5"> Apple because I</font>

850
00:41:16,069 --> 00:41:19,400
mean I<font color="#CCCCCC"> asked exploitation is</font><font color="#E5E5E5"> seriously</font>

851
00:41:17,779 --> 00:41:23,209
fun and I do believe<font color="#E5E5E5"> it's one of the</font>

852
00:41:19,400 --> 00:41:25,640
best platforms<font color="#E5E5E5"> to research on</font><font color="#CCCCCC"> I really</font>

853
00:41:23,209 --> 00:41:30,038
do believe it's one of the best things

854
00:41:25,640 --> 00:41:32,989
to<font color="#E5E5E5"> do with my</font><font color="#CCCCCC"> time so I would</font><font color="#E5E5E5"> like it</font>

855
00:41:30,039 --> 00:41:35,989
<font color="#CCCCCC">and I also respect all the iOS attackers</font>

856
00:41:32,989 --> 00:41:37,519
that are out there<font color="#CCCCCC"> because you know I</font>

857
00:41:35,989 --> 00:41:39,439
understand<font color="#CCCCCC"> what you're going through</font>

858
00:41:37,519 --> 00:41:42,468
and please don't hack my<font color="#E5E5E5"> phone I'm not</font>

859
00:41:39,439 --> 00:41:44,868
<font color="#E5E5E5">actually that interesting</font><font color="#CCCCCC"> and I do want</font>

860
00:41:42,469 --> 00:41:46,279
to<font color="#E5E5E5"> shout</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> to Brandon at that because</font>

861
00:41:44,869 --> 00:41:50,119
his work on<font color="#CCCCCC"> pact</font><font color="#E5E5E5"> was actually really</font>

862
00:41:46,279 --> 00:41:53,059
<font color="#E5E5E5">interesting and I especially appreciate</font>

863
00:41:50,119 --> 00:41:55,189
the<font color="#E5E5E5"> way</font><font color="#CCCCCC"> he wrote up the process</font><font color="#E5E5E5"> that he</font>

864
00:41:53,059 --> 00:41:58,189
went<font color="#E5E5E5"> through</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> order to analyze how</font>

865
00:41:55,189 --> 00:42:01,069
these features<font color="#E5E5E5"> work because it's often</font>

866
00:41:58,189 --> 00:42:03,729
an untold story<font color="#CCCCCC"> the the process of</font>

867
00:42:01,069 --> 00:42:05,839
experimentation<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to learn</font>

868
00:42:03,729 --> 00:42:10,009
<font color="#E5E5E5">fundamentally black box security</font>

869
00:42:05,839 --> 00:42:12,469
features<font color="#E5E5E5"> as much as it might seem</font>

870
00:42:10,009 --> 00:42:14,900
trivial<font color="#E5E5E5"> for people acquainted with this</font>

871
00:42:12,469 --> 00:42:18,799
sort<font color="#CCCCCC"> of mentality I believe it's really</font>

872
00:42:14,900 --> 00:42:22,669
difficult to<font color="#E5E5E5"> find you know stories of</font>

873
00:42:18,799 --> 00:42:25,819
people<font color="#CCCCCC"> that teach you how to do that</font><font color="#E5E5E5"> and</font>

874
00:42:22,669 --> 00:42:27,049
so I really respect him<font color="#E5E5E5"> I think yeah his</font>

875
00:42:25,819 --> 00:42:30,579
attack<font color="#CCCCCC"> is probably one of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> coolest</font>

876
00:42:27,049 --> 00:42:36,499
things I've seen<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> past</font><font color="#E5E5E5"> few</font><font color="#CCCCCC"> years</font>

877
00:42:30,579 --> 00:42:39,019
and I I do want to get<font color="#E5E5E5"> people involved</font>

878
00:42:36,499 --> 00:42:41,629
into<font color="#CCCCCC"> iOS research</font><font color="#E5E5E5"> again I do believe</font>

879
00:42:39,019 --> 00:42:43,729
it's really<font color="#E5E5E5"> fun it might seem complex</font>

880
00:42:41,630 --> 00:42:47,390
<font color="#E5E5E5">but things actually make</font><font color="#CCCCCC"> a lot of sense</font>

881
00:42:43,729 --> 00:42:49,368
<font color="#CCCCCC">if you understand the big pictures the</font>

882
00:42:47,390 --> 00:42:51,229
big picture<font color="#E5E5E5"> and I do want to thank the</font>

883
00:42:49,369 --> 00:42:53,959
<font color="#CCCCCC">Nano development team because most of my</font>

884
00:42:51,229 --> 00:42:56,598
exploits<font color="#CCCCCC"> I've actually written in Hollow</font>

885
00:42:53,959 --> 00:42:58,249
<font color="#CCCCCC">a significant part of them and</font><font color="#E5E5E5"> it is the</font>

886
00:42:56,599 --> 00:43:04,990
best text editor and<font color="#E5E5E5"> you have nothing</font>

887
00:42:58,249 --> 00:43:06,700
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can say</font><font color="#CCCCCC"> to disprove me</font><font color="#E5E5E5"> so yeah</font><font color="#CCCCCC"> Nano</font>

888
00:43:04,990 --> 00:43:09,830
theme is evil

889
00:43:06,700 --> 00:43:09,830
[Applause]

890
00:43:10,790 --> 00:43:13,300
[Music]

