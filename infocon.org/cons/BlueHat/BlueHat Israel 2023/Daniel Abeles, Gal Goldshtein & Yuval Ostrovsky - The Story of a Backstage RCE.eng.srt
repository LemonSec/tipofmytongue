1
00:00:00,000 --> 00:00:08,700
[Music]

2
00:00:09,679 --> 00:00:11,440
thank you

3
00:00:11,440 --> 00:00:13,380
[Music]

4
00:00:13,380 --> 00:00:14,940
cool thanks you guys for joining us

5
00:00:14,940 --> 00:00:17,039
through this session uh behind the

6
00:00:17,039 --> 00:00:20,039
curtains the story of a backstage RC and

7
00:00:20,039 --> 00:00:22,140
we wanted also to thank our host today

8
00:00:22,140 --> 00:00:25,080
for hosting us in this beautiful venue

9
00:00:25,080 --> 00:00:28,099
and this amazing conference

10
00:00:28,099 --> 00:00:31,140
so my name is danila Bellas I'm the head

11
00:00:31,140 --> 00:00:33,320
of security research at toxic security

12
00:00:33,320 --> 00:00:36,739
we are an application security startup

13
00:00:36,739 --> 00:00:39,480
we're in our free time we research open

14
00:00:39,480 --> 00:00:41,399
source projects like backstage that

15
00:00:41,399 --> 00:00:43,559
you're going to see today uh and here

16
00:00:43,559 --> 00:00:45,960
are the results of This research

17
00:00:45,960 --> 00:00:49,440
I'm a former employee at oxide where I

18
00:00:49,440 --> 00:00:51,059
had the pleasure of working on this

19
00:00:51,059 --> 00:00:53,100
project with both gal and Daniel and

20
00:00:53,100 --> 00:00:55,559
currently I'm working on a new startup

21
00:00:55,559 --> 00:00:58,559
security

22
00:01:00,719 --> 00:01:03,719
cool so what do we have today uh we're

23
00:01:03,719 --> 00:01:05,640
going to give you a brief introduction

24
00:01:05,640 --> 00:01:08,340
to what is backstage uh what is it used

25
00:01:08,340 --> 00:01:11,640
for why people use it anyways uh we're

26
00:01:11,640 --> 00:01:13,380
going to jump into the threat landscape

27
00:01:13,380 --> 00:01:15,720
of Backstage and why it makes such a

28
00:01:15,720 --> 00:01:17,939
lucrative Target for threat actors

29
00:01:17,939 --> 00:01:20,939
then gal will show us a beautiful demo

30
00:01:20,939 --> 00:01:23,159
of a threat actor from the internet

31
00:01:23,159 --> 00:01:26,159
trying to exploit this vulnerability and

32
00:01:26,159 --> 00:01:29,100
successfully running uh code execution

33
00:01:29,100 --> 00:01:31,320
on the backstage instance

34
00:01:31,320 --> 00:01:33,720
then we're going to show you some

35
00:01:33,720 --> 00:01:35,579
information we gathered in our research

36
00:01:35,579 --> 00:01:39,540
on big stage instances in the wild and

37
00:01:39,540 --> 00:01:43,140
some wild things we found in the way and

38
00:01:43,140 --> 00:01:45,000
we're going to wrap up with a couple of

39
00:01:45,000 --> 00:01:47,100
key takeaways that we found during this

40
00:01:47,100 --> 00:01:50,040
research both for security Searchers and

41
00:01:50,040 --> 00:01:54,000
both for developers so stay tuned

42
00:01:54,000 --> 00:01:57,240
okay so before we Deep dive into the

43
00:01:57,240 --> 00:01:59,700
vulnerability let's first talk about

44
00:01:59,700 --> 00:02:03,740
developer portals so imagine developers

45
00:02:03,740 --> 00:02:06,420
these days they don't just write code

46
00:02:06,420 --> 00:02:08,639
they are also making trips to their

47
00:02:08,639 --> 00:02:11,099
cloud provider console troubleshooting

48
00:02:11,099 --> 00:02:13,620
kubernetes managing security and

49
00:02:13,620 --> 00:02:16,379
compliance not to mention hunting down

50
00:02:16,379 --> 00:02:20,040
for documentation each task has its own

51
00:02:20,040 --> 00:02:22,500
tools and UI to learn and it doesn't

52
00:02:22,500 --> 00:02:25,080
take long for context switching and

53
00:02:25,080 --> 00:02:28,140
cognitive load to take the toll and it's

54
00:02:28,140 --> 00:02:30,540
happening all across the board the more

55
00:02:30,540 --> 00:02:33,060
developers grow the more chaotic and

56
00:02:33,060 --> 00:02:36,120
fragmented their ecosystem becomes a

57
00:02:36,120 --> 00:02:39,420
developer portal unifies all tooling

58
00:02:39,420 --> 00:02:42,720
data documentation and services behind

59
00:02:42,720 --> 00:02:45,540
the single pane of glass reducing those

60
00:02:45,540 --> 00:02:47,340
pains and problems

61
00:02:47,340 --> 00:02:50,780
well with over 20 000 stars on GitHub

62
00:02:50,780 --> 00:02:53,760
backstage is one of the most common Dev

63
00:02:53,760 --> 00:02:56,780
portals out there developed by Spotify

64
00:02:56,780 --> 00:03:00,180
backstage is an open source platform for

65
00:03:00,180 --> 00:03:02,519
building developer portals it

66
00:03:02,519 --> 00:03:04,800
streamlines the development process from

67
00:03:04,800 --> 00:03:07,140
end to end and this part of the

68
00:03:07,140 --> 00:03:10,019
streamlining process backstage connects

69
00:03:10,019 --> 00:03:12,540
to the most critical infrastructure this

70
00:03:12,540 --> 00:03:14,400
includes production environments

71
00:03:14,400 --> 00:03:17,280
databases internal services and more

72
00:03:17,280 --> 00:03:20,040
this makes backstage an extremely

73
00:03:20,040 --> 00:03:22,739
lucrative Target for fret actors is

74
00:03:22,739 --> 00:03:25,080
taking over a backstage instance can

75
00:03:25,080 --> 00:03:27,239
allow for lateral movement across an

76
00:03:27,239 --> 00:03:28,940
organization

77
00:03:28,940 --> 00:03:31,680
backstage is composed of three main

78
00:03:31,680 --> 00:03:34,860
components first part is the core which

79
00:03:34,860 --> 00:03:36,480
holds the base functionality of

80
00:03:36,480 --> 00:03:39,900
Backstage second part are the apps which

81
00:03:39,900 --> 00:03:42,180
are running instances of Backstage that

82
00:03:42,180 --> 00:03:45,060
can be tweaked and modified third part

83
00:03:45,060 --> 00:03:48,180
are the plugins plugins hold additional

84
00:03:48,180 --> 00:03:50,459
functionality on top of the base

85
00:03:50,459 --> 00:03:52,920
functionality of Backstage they can be

86
00:03:52,920 --> 00:03:55,739
developed internally by a company or

87
00:03:55,739 --> 00:03:58,640
they can be open sourced and reusable

88
00:03:58,640 --> 00:04:01,980
backstage comes pre-installed with some

89
00:04:01,980 --> 00:04:04,500
built-in plugins and one of those

90
00:04:04,500 --> 00:04:08,159
plugins is called scaffolder as there

91
00:04:08,159 --> 00:04:10,920
are repeated views and tasks inside of

92
00:04:10,920 --> 00:04:13,680
Backstage scaffolder allows to create

93
00:04:13,680 --> 00:04:16,858
new projects edit existing ones or

94
00:04:16,858 --> 00:04:19,380
simply perform repeated tasks in a

95
00:04:19,380 --> 00:04:22,139
consistent manner it does so by

96
00:04:22,139 --> 00:04:24,660
receiving its input via a yaml file

97
00:04:24,660 --> 00:04:27,600
defined by a user it then renders the

98
00:04:27,600 --> 00:04:30,300
XML file using the nandrax rendering

99
00:04:30,300 --> 00:04:32,280
engine which is a common rendering

100
00:04:32,280 --> 00:04:34,639
engine written in JavaScript

101
00:04:34,639 --> 00:04:38,340
nanjax is known to be vulnerable even so

102
00:04:38,340 --> 00:04:41,639
that back in 2021 a vulnerability was

103
00:04:41,639 --> 00:04:44,400
released in backstage exploiting the

104
00:04:44,400 --> 00:04:46,680
nunchucks engine and the scaffolder

105
00:04:46,680 --> 00:04:49,500
plugin specifically exploiting nunchucks

106
00:04:49,500 --> 00:04:52,259
is pretty straightforward just placing

107
00:04:52,259 --> 00:04:54,740
double curly brackets and calling the

108
00:04:54,740 --> 00:04:58,320
range.constructor function any code that

109
00:04:58,320 --> 00:05:00,660
resides within the constructo function

110
00:05:00,660 --> 00:05:04,680
gets evaluated and executed leading to

111
00:05:04,680 --> 00:05:06,900
remote code execution

112
00:05:06,900 --> 00:05:09,620
in order to mitigate this vulnerability

113
00:05:09,620 --> 00:05:12,840
backstage it implemented the secure

114
00:05:12,840 --> 00:05:15,960
templator class secure templator class

115
00:05:15,960 --> 00:05:19,320
is responsible for securely rendering

116
00:05:19,320 --> 00:05:21,900
template files provided into the

117
00:05:21,900 --> 00:05:24,780
scaffolder plugin it does so by

118
00:05:24,780 --> 00:05:28,080
utilizing the vm2 sandbox Library which

119
00:05:28,080 --> 00:05:30,660
is a common sandbox Library also written

120
00:05:30,660 --> 00:05:31,979
in JavaScript

121
00:05:31,979 --> 00:05:35,220
so now instead of calling the rendering

122
00:05:35,220 --> 00:05:38,460
engine directly scaf folder calls the

123
00:05:38,460 --> 00:05:41,580
secure templator which in turn spins up

124
00:05:41,580 --> 00:05:45,360
a vm2 Sandbox instance within this vm2

125
00:05:45,360 --> 00:05:48,960
sandbox sandbox instance now resides the

126
00:05:48,960 --> 00:05:51,780
entire nanjax rendering engine this

127
00:05:51,780 --> 00:05:54,360
means that if a malicious user tries to

128
00:05:54,360 --> 00:05:56,759
exploit the previous vulnerability we

129
00:05:56,759 --> 00:05:59,699
mentioned his code would eventually end

130
00:05:59,699 --> 00:06:02,820
up executing inside the sandbox instead

131
00:06:02,820 --> 00:06:05,400
of taking over the machine hosting the

132
00:06:05,400 --> 00:06:07,199
backstage instance

133
00:06:07,199 --> 00:06:09,960
so at this stage we started poking

134
00:06:09,960 --> 00:06:12,300
around with the question of how secure

135
00:06:12,300 --> 00:06:16,400
the secure templator release

136
00:06:17,820 --> 00:06:20,460
so let's talk a bit about what is vm2

137
00:06:20,460 --> 00:06:23,220
film 2 is a popular sandbox Library

138
00:06:23,220 --> 00:06:26,160
implemented in JavaScript with over 4

139
00:06:26,160 --> 00:06:28,319
million weekly downloads

140
00:06:28,319 --> 00:06:30,960
it allows the developer to run untrusted

141
00:06:30,960 --> 00:06:34,560
code in a secure environment where the

142
00:06:34,560 --> 00:06:36,240
code is inside running inside the

143
00:06:36,240 --> 00:06:38,100
sandbox will not be able to affect the

144
00:06:38,100 --> 00:06:40,500
route surroundings

145
00:06:40,500 --> 00:06:43,080
the library name stems from the built-in

146
00:06:43,080 --> 00:06:46,020
VM module of node.js which also allows

147
00:06:46,020 --> 00:06:48,539
running the code in separate context but

148
00:06:48,539 --> 00:06:51,120
does not provide the same security that

149
00:06:51,120 --> 00:06:54,479
vm2 attempts to provide

150
00:06:54,479 --> 00:06:57,060
so vm2 under the hood utilizes the three

151
00:06:57,060 --> 00:06:58,979
main techniques in order to prevent

152
00:06:58,979 --> 00:07:01,199
sandbox escapes the first one is

153
00:07:01,199 --> 00:07:03,840
Javascript proxies proxies allows the

154
00:07:03,840 --> 00:07:06,120
vm2 developers to intercept the

155
00:07:06,120 --> 00:07:07,560
arguments passed through the different

156
00:07:07,560 --> 00:07:10,620
packages called from inside the sandbox

157
00:07:10,620 --> 00:07:13,620
and also to intercept the return value

158
00:07:13,620 --> 00:07:17,639
that allows the VM to sandbox to prevent

159
00:07:17,639 --> 00:07:20,039
dangerous objects from being accessible

160
00:07:20,039 --> 00:07:22,080
from within the sandbox the second

161
00:07:22,080 --> 00:07:24,599
technique is object freezing this

162
00:07:24,599 --> 00:07:26,819
technique allows vm2 to prevent

163
00:07:26,819 --> 00:07:29,280
modifications of the built-in objects

164
00:07:29,280 --> 00:07:32,220
accessible inside the sandbox and the

165
00:07:32,220 --> 00:07:34,860
third one is prototype manipulation not

166
00:07:34,860 --> 00:07:37,139
all the Prototype objects accessible

167
00:07:37,139 --> 00:07:39,300
within the sandbox are the same ones

168
00:07:39,300 --> 00:07:41,880
that you will receive while working

169
00:07:41,880 --> 00:07:44,880
outside of it

170
00:07:44,880 --> 00:07:47,759
so after getting familiarized with vm2

171
00:07:47,759 --> 00:07:50,160
we asked ourselves how the previous

172
00:07:50,160 --> 00:07:52,440
vulnerabilities in vm2 looked like and

173
00:07:52,440 --> 00:07:54,780
what techniques they did manage to to

174
00:07:54,780 --> 00:07:58,139
exploit by running a simple search on

175
00:07:58,139 --> 00:08:00,900
GitHub issues we could see that there

176
00:08:00,900 --> 00:08:03,660
were more than 10 different sandbox

177
00:08:03,660 --> 00:08:04,800
escapes

178
00:08:04,800 --> 00:08:07,560
and reported to the vm2 maintainers in

179
00:08:07,560 --> 00:08:09,840
the last couple of years this was a

180
00:08:09,840 --> 00:08:12,240
strong signal for us that there might be

181
00:08:12,240 --> 00:08:15,840
more waiting to be found

182
00:08:15,840 --> 00:08:18,240
while looking deeper into the different

183
00:08:18,240 --> 00:08:20,400
techniques used in the previous exploit

184
00:08:20,400 --> 00:08:23,160
we saw a concept that was shared between

185
00:08:23,160 --> 00:08:25,979
some of the previous exploits previously

186
00:08:25,979 --> 00:08:29,819
reported and it was abusing the error

187
00:08:29,819 --> 00:08:33,479
mechanism of node.js in order to escape

188
00:08:33,479 --> 00:08:36,360
the sandbox in the picture you can see a

189
00:08:36,360 --> 00:08:38,279
code taken from the built-in error

190
00:08:38,279 --> 00:08:40,679
mechanism of node.js where the code

191
00:08:40,679 --> 00:08:42,839
attempts to check if the prepares

192
00:08:42,839 --> 00:08:45,420
factorized function is defined under the

193
00:08:45,420 --> 00:08:49,140
global error object and if it is defined

194
00:08:49,140 --> 00:08:51,779
it attempts to call it by supplying two

195
00:08:51,779 --> 00:08:55,380
arguments an error presentation as a

196
00:08:55,380 --> 00:08:57,720
string of the error record and the

197
00:08:57,720 --> 00:09:00,120
second one is array of course site

198
00:09:00,120 --> 00:09:04,560
objects with which each object contained

199
00:09:04,560 --> 00:09:07,200
each call set object contains different

200
00:09:07,200 --> 00:09:10,560
functions that allows to understand what

201
00:09:10,560 --> 00:09:12,480
exactly happened and

202
00:09:12,480 --> 00:09:14,580
in which frame during the program

203
00:09:14,580 --> 00:09:16,080
execution

204
00:09:16,080 --> 00:09:18,540
the method of the call State object

205
00:09:18,540 --> 00:09:21,300
that's allowed Escaping The Sandbox was

206
00:09:21,300 --> 00:09:24,240
the get this method to get this simply

207
00:09:24,240 --> 00:09:26,640
returns that this object was accessible

208
00:09:26,640 --> 00:09:28,860
during the execution of the specific

209
00:09:28,860 --> 00:09:32,060
stack frames

210
00:09:34,800 --> 00:09:37,860
so we're looking into the vm2 code base

211
00:09:37,860 --> 00:09:40,080
we could see that they attempted to

212
00:09:40,080 --> 00:09:42,720
mitigate such Escape attempts and they

213
00:09:42,720 --> 00:09:46,200
did so by defining a getter and Setter

214
00:09:46,200 --> 00:09:48,019
around the prepared stack Trace function

215
00:09:48,019 --> 00:09:50,880
and each time the code running inside

216
00:09:50,880 --> 00:09:53,820
the sandbox will attempt to set this

217
00:09:53,820 --> 00:09:56,040
property this proper structure is

218
00:09:56,040 --> 00:09:59,279
function it will first pass through the

219
00:09:59,279 --> 00:10:02,760
vm2 sandbox which strips out the

220
00:10:02,760 --> 00:10:05,760
dangerous objects containing inside the

221
00:10:05,760 --> 00:10:08,399
call site objects array and only then

222
00:10:08,399 --> 00:10:10,320
the method defined inside the sandbox

223
00:10:10,320 --> 00:10:12,779
will be called

224
00:10:12,779 --> 00:10:15,839
while seeing this mitigation attempts we

225
00:10:15,839 --> 00:10:18,240
asked ourselves what would happen if we

226
00:10:18,240 --> 00:10:21,060
would simply try to create a new error

227
00:10:21,060 --> 00:10:23,880
object override the existing one and

228
00:10:23,880 --> 00:10:26,279
under this new object we will Define the

229
00:10:26,279 --> 00:10:28,740
prepared structures function this simple

230
00:10:28,740 --> 00:10:30,720
trick allowed us to escape the sandbox

231
00:10:30,720 --> 00:10:33,540
once again while abusing the same error

232
00:10:33,540 --> 00:10:35,339
mechanisms

233
00:10:35,339 --> 00:10:37,680
this vulnerability was quickly patched

234
00:10:37,680 --> 00:10:39,959
by the vm2 maintainers and it was

235
00:10:39,959 --> 00:10:42,560
assigned with CV 2022

236
00:10:42,560 --> 00:10:46,260
36067 and as you can see it got the CVSs

237
00:10:46,260 --> 00:10:51,439
score of 10. the maximum score possible

238
00:10:53,390 --> 00:10:59,640
[Applause]

239
00:10:59,640 --> 00:11:02,519
okay great so now we have three

240
00:11:02,519 --> 00:11:05,220
important pieces of information we know

241
00:11:05,220 --> 00:11:08,100
the yaml template format that scaffold

242
00:11:08,100 --> 00:11:10,620
the receives as input we have the

243
00:11:10,620 --> 00:11:12,959
nunchucks rendering Escape but mind you

244
00:11:12,959 --> 00:11:15,420
using this rendering escape the code

245
00:11:15,420 --> 00:11:18,000
executed inside of it would still reside

246
00:11:18,000 --> 00:11:21,480
inside the vm2 sandbox but combining

247
00:11:21,480 --> 00:11:24,180
those two things together along with the

248
00:11:24,180 --> 00:11:27,420
vm2 sandbox escape and we should be able

249
00:11:27,420 --> 00:11:30,420
to gain remote code execution on the

250
00:11:30,420 --> 00:11:33,839
backstage instance itself so combining

251
00:11:33,839 --> 00:11:36,180
those three things together and we end

252
00:11:36,180 --> 00:11:39,360
up with a Yama looking like this well if

253
00:11:39,360 --> 00:11:41,700
we zoom into the last line we are able

254
00:11:41,700 --> 00:11:44,160
to see our payload we can see the double

255
00:11:44,160 --> 00:11:47,040
curly brackets we mentioned earlier and

256
00:11:47,040 --> 00:11:49,079
a call to the range dot Constructor

257
00:11:49,079 --> 00:11:51,200
function which allows for code execution

258
00:11:51,200 --> 00:11:54,180
inside of it we can see our payload

259
00:11:54,180 --> 00:11:56,940
which is basically the vm2 sandbox

260
00:11:56,940 --> 00:11:57,899
Escape

261
00:11:57,899 --> 00:12:00,540
this hopefully should allow us to gain

262
00:12:00,540 --> 00:12:03,720
remote code execution but sadly it

263
00:12:03,720 --> 00:12:06,000
didn't work and the reason it didn't

264
00:12:06,000 --> 00:12:09,300
work is because our entire call stack

265
00:12:09,300 --> 00:12:12,300
had returned undefined as return value

266
00:12:12,300 --> 00:12:15,660
for the get this method and the reason

267
00:12:15,660 --> 00:12:18,180
it returned it is because of something

268
00:12:18,180 --> 00:12:21,720
called JavaScript strict mode so before

269
00:12:21,720 --> 00:12:24,420
we go any further let's quickly go over

270
00:12:24,420 --> 00:12:27,720
what JavaScript strict mode is all about

271
00:12:27,720 --> 00:12:30,240
so JavaScript strict mode is a

272
00:12:30,240 --> 00:12:32,579
restricted variant of JavaScript it

273
00:12:32,579 --> 00:12:35,100
allows for a more readable and resilient

274
00:12:35,100 --> 00:12:36,240
code

275
00:12:36,240 --> 00:12:39,320
any function can opt into strict mode

276
00:12:39,320 --> 00:12:42,180
once the function opts into strict mode

277
00:12:42,180 --> 00:12:45,180
it makes all of its members and data

278
00:12:45,180 --> 00:12:48,480
inaccessible from outside of it another

279
00:12:48,480 --> 00:12:50,820
important thing about strict mode is

280
00:12:50,820 --> 00:12:53,880
once a function opts into strict mode it

281
00:12:53,880 --> 00:12:56,459
makes the entire call stack up into that

282
00:12:56,459 --> 00:12:59,279
function also when accessible opting

283
00:12:59,279 --> 00:13:03,240
into a semi-streak mode so this explains

284
00:13:03,240 --> 00:13:05,700
why we got Unwritten a undefined

285
00:13:05,700 --> 00:13:08,220
returned as value because a specific

286
00:13:08,220 --> 00:13:10,800
function in our call stack had opted

287
00:13:10,800 --> 00:13:13,079
into strict mode making the get this

288
00:13:13,079 --> 00:13:17,100
function return and undefined so going

289
00:13:17,100 --> 00:13:19,260
over the cold stock and we were able to

290
00:13:19,260 --> 00:13:21,720
find this specific function this

291
00:13:21,720 --> 00:13:23,820
function was the render string 2

292
00:13:23,820 --> 00:13:26,339
function it's a function that resides

293
00:13:26,339 --> 00:13:29,519
within the nandrax rendering engine mind

294
00:13:29,519 --> 00:13:32,040
you this function still resides within

295
00:13:32,040 --> 00:13:35,940
the vm2 sandbox instance so at this

296
00:13:35,940 --> 00:13:38,279
point we have thought to ourselves how

297
00:13:38,279 --> 00:13:41,579
can we escape the strict mode variant so

298
00:13:41,579 --> 00:13:43,500
what we thought of was what if we

299
00:13:43,500 --> 00:13:45,720
declare a new function inside our

300
00:13:45,720 --> 00:13:48,660
payload that performs The vm2 Sandbox

301
00:13:48,660 --> 00:13:51,779
Escape we will then override the render

302
00:13:51,779 --> 00:13:54,060
string implementation with our own

303
00:13:54,060 --> 00:13:56,519
function that performs The vm2 Sandbox

304
00:13:56,519 --> 00:14:00,240
Escape only this would happen before the

305
00:14:00,240 --> 00:14:02,399
render string implementation opts into

306
00:14:02,399 --> 00:14:04,740
strict mode allowing us to gain code

307
00:14:04,740 --> 00:14:08,459
execution from a non-strict context

308
00:14:08,459 --> 00:14:11,160
only thing left to do now would be to

309
00:14:11,160 --> 00:14:13,560
call this function from a non-strict

310
00:14:13,560 --> 00:14:14,880
context

311
00:14:14,880 --> 00:14:17,579
so lucky enough we found the right place

312
00:14:17,579 --> 00:14:21,000
to do so we found inside the scaffolder

313
00:14:21,000 --> 00:14:24,060
plugin a code snippet that allows to

314
00:14:24,060 --> 00:14:27,480
call the same secure in the same secure

315
00:14:27,480 --> 00:14:29,760
template or instance twice

316
00:14:29,760 --> 00:14:33,240
in the first call that our template is

317
00:14:33,240 --> 00:14:36,420
rendered regularly regularly but in the

318
00:14:36,420 --> 00:14:38,519
case it raises an exception a second

319
00:14:38,519 --> 00:14:40,980
call to the same secure template for

320
00:14:40,980 --> 00:14:43,260
instance would be performed again

321
00:14:43,260 --> 00:14:45,660
only this time the render string

322
00:14:45,660 --> 00:14:48,120
implementation would contain our own

323
00:14:48,120 --> 00:14:51,720
sandbox Escape allowing for for our code

324
00:14:51,720 --> 00:14:53,579
execution to happen

325
00:14:53,579 --> 00:14:54,899
so

326
00:14:54,899 --> 00:14:56,940
we end up with a payload looking like

327
00:14:56,940 --> 00:14:59,459
this where in the third line we are able

328
00:14:59,459 --> 00:15:01,920
to see we are overriding the render

329
00:15:01,920 --> 00:15:04,380
string implementation with our own

330
00:15:04,380 --> 00:15:06,600
implementation that performs The vm2

331
00:15:06,600 --> 00:15:09,120
Sandbox Escape we are then in line

332
00:15:09,120 --> 00:15:12,300
number 16 performing a trigger raise

333
00:15:12,300 --> 00:15:13,980
function calling the trigger raise

334
00:15:13,980 --> 00:15:16,260
function which basically does not exist

335
00:15:16,260 --> 00:15:19,139
this would call this would trigger a

336
00:15:19,139 --> 00:15:21,000
second call to the secure template

337
00:15:21,000 --> 00:15:23,760
render function only now the render

338
00:15:23,760 --> 00:15:25,560
string function would contain our

339
00:15:25,560 --> 00:15:28,199
sandbox Escape calling it from a

340
00:15:28,199 --> 00:15:31,260
non-strict context allowing for the vm2

341
00:15:31,260 --> 00:15:32,940
sandbox Escape

342
00:15:32,940 --> 00:15:35,760
so that's enough talking for now let's

343
00:15:35,760 --> 00:15:38,820
quickly see a demo

344
00:15:38,820 --> 00:15:40,980
so as you can see we have a vulnerable

345
00:15:40,980 --> 00:15:43,740
instance of Backstage right here and the

346
00:15:43,740 --> 00:15:46,199
exploit the HTTP request exploiting the

347
00:15:46,199 --> 00:15:48,360
vulnerability we will send it through

348
00:15:48,360 --> 00:15:50,880
backstage and we should hit our

349
00:15:50,880 --> 00:15:53,940
breakpoint along the way

350
00:15:53,940 --> 00:15:56,459
so

351
00:15:56,459 --> 00:15:59,040
so here we are in the scaffolder plugin

352
00:15:59,040 --> 00:16:01,560
right before the first call to the

353
00:16:01,560 --> 00:16:04,620
nunchucks rendering gate engine

354
00:16:04,620 --> 00:16:06,540
so

355
00:16:06,540 --> 00:16:08,820
this is the first stage of our exploit

356
00:16:08,820 --> 00:16:10,980
in this stage we're only override the

357
00:16:10,980 --> 00:16:12,660
render string function with our own

358
00:16:12,660 --> 00:16:15,319
implementation

359
00:16:15,600 --> 00:16:18,720
so as you can see now we will this is

360
00:16:18,720 --> 00:16:20,519
the code that represents our template

361
00:16:20,519 --> 00:16:23,459
within the nunchucks template engine The

362
00:16:23,459 --> 00:16:25,320
Next Step would be to raise an exception

363
00:16:25,320 --> 00:16:27,600
as you can see an exception was raised

364
00:16:27,600 --> 00:16:31,380
and the scaffolder plugin took care of

365
00:16:31,380 --> 00:16:34,920
this exception and it will try to call

366
00:16:34,920 --> 00:16:38,160
the render engine once again this time

367
00:16:38,160 --> 00:16:40,259
the render string function will contain

368
00:16:40,259 --> 00:16:42,720
our own payload

369
00:16:42,720 --> 00:16:44,940
so as you can see here we landed once

370
00:16:44,940 --> 00:16:47,220
again you know overridden render string

371
00:16:47,220 --> 00:16:50,220
function and this is basically the code

372
00:16:50,220 --> 00:16:53,459
that exploited the vm2 sandbox Escape

373
00:16:53,459 --> 00:16:55,920
so if we will place a breakpoint right

374
00:16:55,920 --> 00:16:59,639
here and let the code keep running we

375
00:16:59,639 --> 00:17:01,860
hit this breakpoint and as you can see

376
00:17:01,860 --> 00:17:04,260
we have an array with our call site

377
00:17:04,260 --> 00:17:07,079
objects if we will access the call site

378
00:17:07,079 --> 00:17:09,540
object in the index number two we should

379
00:17:09,540 --> 00:17:13,579
get an non-sandboxed instance

380
00:17:13,579 --> 00:17:16,919
allowing us to execute code so as you

381
00:17:16,919 --> 00:17:19,380
can see here this is the global object

382
00:17:19,380 --> 00:17:21,839
of the program and sandbox one but if

383
00:17:21,839 --> 00:17:24,599
only a access index number one you can

384
00:17:24,599 --> 00:17:26,819
see that this one is a Sandbox one and

385
00:17:26,819 --> 00:17:29,700
we can see the vm2 global object here so

386
00:17:29,700 --> 00:17:32,040
all we have to do now is just let this

387
00:17:32,040 --> 00:17:36,240
line of code run which will execute our

388
00:17:36,240 --> 00:17:39,240
Command

389
00:17:39,980 --> 00:17:43,100
thank you

390
00:17:46,510 --> 00:17:50,700
[Applause]

391
00:17:50,700 --> 00:17:53,460
cool let's jump back

392
00:17:53,460 --> 00:17:55,320
awesome thanks girl for this amazing

393
00:17:55,320 --> 00:17:57,419
demo uh you know showing a calc is

394
00:17:57,419 --> 00:18:00,020
always a blessed thing

395
00:18:00,020 --> 00:18:01,580
so

396
00:18:01,580 --> 00:18:04,260
after we solve the vulnerability itself

397
00:18:04,260 --> 00:18:07,559
and uh I think you were convinced that

398
00:18:07,559 --> 00:18:10,620
it's quite a serious one we wanted to

399
00:18:10,620 --> 00:18:14,220
really assess the Public's uh the public

400
00:18:14,220 --> 00:18:16,740
stance of how many instances of

401
00:18:16,740 --> 00:18:19,080
Backstage do we see in the wild and what

402
00:18:19,080 --> 00:18:21,660
could a threat actor do when he sees one

403
00:18:21,660 --> 00:18:24,419
so to do that we use the uh internet

404
00:18:24,419 --> 00:18:26,460
search engine called Showdown and for

405
00:18:26,460 --> 00:18:27,960
those who are not familiar with The

406
00:18:27,960 --> 00:18:30,900
Showdown they basically scrape every

407
00:18:30,900 --> 00:18:33,179
single IP address on the internet on

408
00:18:33,179 --> 00:18:34,980
several ports and they have all those

409
00:18:34,980 --> 00:18:37,500
plugins that can parse the data and one

410
00:18:37,500 --> 00:18:40,260
of those plugins is the HTTP 5 icon hash

411
00:18:40,260 --> 00:18:45,000
plugin now every web application has uh

412
00:18:45,000 --> 00:18:47,160
what is called a five icon file which is

413
00:18:47,160 --> 00:18:49,380
basically this little icon that you see

414
00:18:49,380 --> 00:18:52,260
in the browser that says hey this is the

415
00:18:52,260 --> 00:18:55,559
image of this application now standard

416
00:18:55,559 --> 00:18:58,799
applications that have a fixed five icon

417
00:18:58,799 --> 00:19:02,400
file can be used to uniquely identify

418
00:19:02,400 --> 00:19:05,039
those instances by hashing the file icon

419
00:19:05,039 --> 00:19:07,440
file so essentially what we did is Hash

420
00:19:07,440 --> 00:19:09,840
the file icon provided to showdan and

421
00:19:09,840 --> 00:19:11,700
Showdown is now searching all of those

422
00:19:11,700 --> 00:19:14,760
instances that match this criteria so it

423
00:19:14,760 --> 00:19:16,500
basically give us the option to uniquely

424
00:19:16,500 --> 00:19:18,720
identify all the backstage instances

425
00:19:18,720 --> 00:19:22,100
that Jordan is aware of

426
00:19:22,860 --> 00:19:25,799
um we found about 600 instances of uh

427
00:19:25,799 --> 00:19:27,840
backstage in the wild and you can see

428
00:19:27,840 --> 00:19:30,299
here the geographical uh distribution of

429
00:19:30,299 --> 00:19:33,059
those instances but uh we should keep in

430
00:19:33,059 --> 00:19:35,340
mind that Shodan is basically give us

431
00:19:35,340 --> 00:19:37,980
all the information they have now there

432
00:19:37,980 --> 00:19:40,020
are hundreds and maybe thousands of

433
00:19:40,020 --> 00:19:42,900
private instances of Backstage in

434
00:19:42,900 --> 00:19:46,140
private organizations and moreover there

435
00:19:46,140 --> 00:19:49,860
is a a thing that uh and a company or

436
00:19:49,860 --> 00:19:51,840
someone that owns this instance can opt

437
00:19:51,840 --> 00:19:53,580
out from from The Showdown search

438
00:19:53,580 --> 00:19:55,919
results so they can say hey don't show

439
00:19:55,919 --> 00:19:57,900
me in Showdown and we will not see them

440
00:19:57,900 --> 00:20:00,299
uh in those results so do keep in mind

441
00:20:00,299 --> 00:20:03,480
that this number uh uh stands for all

442
00:20:03,480 --> 00:20:06,059
the public instances the children is

443
00:20:06,059 --> 00:20:08,820
aware of so there might be more

444
00:20:08,820 --> 00:20:10,860
here you can see the uh distribution

445
00:20:10,860 --> 00:20:13,260
over time of Backstage instances which

446
00:20:13,260 --> 00:20:15,179
really makes sense because in mid 2020

447
00:20:15,179 --> 00:20:18,419
uh backstage was first created so we can

448
00:20:18,419 --> 00:20:20,940
see that from mid-2020 we see uh an

449
00:20:20,940 --> 00:20:23,340
influx of Backstage instances up until

450
00:20:23,340 --> 00:20:25,919
2023 where we saw that there are about

451
00:20:25,919 --> 00:20:28,799
600 instances

452
00:20:28,799 --> 00:20:32,640
now finding an instance on in the wild

453
00:20:32,640 --> 00:20:34,320
um is worthless if you don't have

454
00:20:34,320 --> 00:20:37,380
nothing to do with it so uh we dug into

455
00:20:37,380 --> 00:20:39,120
the documentation of Backstage to find

456
00:20:39,120 --> 00:20:41,400
all those small quirks so you don't have

457
00:20:41,400 --> 00:20:44,340
to and uh the first one you found out is

458
00:20:44,340 --> 00:20:46,559
that backstage supports what they call

459
00:20:46,559 --> 00:20:48,240
guest access which is pretty

460
00:20:48,240 --> 00:20:49,740
straightforward they give you the option

461
00:20:49,740 --> 00:20:52,440
to log in to a backstage application

462
00:20:52,440 --> 00:20:56,039
without any authentication details so

463
00:20:56,039 --> 00:20:57,780
um a user from the organization can

464
00:20:57,780 --> 00:20:59,460
might be using the the Google

465
00:20:59,460 --> 00:21:02,760
authentication or Azure ad for that

466
00:21:02,760 --> 00:21:05,520
matter and here we can see that you can

467
00:21:05,520 --> 00:21:09,000
access as a guest now if you access as a

468
00:21:09,000 --> 00:21:11,160
guest like like in a normal situation

469
00:21:11,160 --> 00:21:13,740
you wouldn't be able to see much because

470
00:21:13,740 --> 00:21:15,840
you don't have any integration with with

471
00:21:15,840 --> 00:21:18,600
GitHub or Google you can see anything

472
00:21:18,600 --> 00:21:21,299
that requires authentication but you do

473
00:21:21,299 --> 00:21:24,840
have access to the scaffolder plugin so

474
00:21:24,840 --> 00:21:26,700
once you have the access to that

475
00:21:26,700 --> 00:21:28,260
scaffolder plugin you can actually

476
00:21:28,260 --> 00:21:31,620
execute the uh a payload that we showed

477
00:21:31,620 --> 00:21:34,620
you earlier so basically it becomes from

478
00:21:34,620 --> 00:21:37,380
an authenticated payload to an

479
00:21:37,380 --> 00:21:40,380
unauthenticated payload

480
00:21:40,380 --> 00:21:43,620
another thing that we found really uh

481
00:21:43,620 --> 00:21:46,260
bizarre if we can call it it that way uh

482
00:21:46,260 --> 00:21:48,240
is that the documentation of Backstage

483
00:21:48,240 --> 00:21:51,419
clearly states that the authentication

484
00:21:51,419 --> 00:21:53,520
mechanism that you provide from the

485
00:21:53,520 --> 00:21:55,620
front end like we've seen before with a

486
00:21:55,620 --> 00:21:58,020
GitHub and Google and so on

487
00:21:58,020 --> 00:22:01,500
um is only applied for the front end

488
00:22:01,500 --> 00:22:03,900
let me state it again it only applies to

489
00:22:03,900 --> 00:22:06,020
the front end now

490
00:22:06,020 --> 00:22:08,820
if you might uh

491
00:22:08,820 --> 00:22:12,179
um you know hear this and be shocked uh

492
00:22:12,179 --> 00:22:14,880
it's it's correct because that is not

493
00:22:14,880 --> 00:22:19,140
fine because uh any user with on a

494
00:22:19,140 --> 00:22:21,480
misconfigured backstage instance can

495
00:22:21,480 --> 00:22:25,200
essentially uh directly access the back

496
00:22:25,200 --> 00:22:27,480
end of the application so if the user

497
00:22:27,480 --> 00:22:29,520
tries to access the front end he sees

498
00:22:29,520 --> 00:22:31,500
this page that says hey you need

499
00:22:31,500 --> 00:22:33,780
credentials but if they mix direct

500
00:22:33,780 --> 00:22:36,000
contact to the back end he can actually

501
00:22:36,000 --> 00:22:38,220
trigger the API endpoint that is

502
00:22:38,220 --> 00:22:40,140
responsible for the vulnerability we

503
00:22:40,140 --> 00:22:42,179
just found so we can execute this

504
00:22:42,179 --> 00:22:44,580
vulnerability without any authentication

505
00:22:44,580 --> 00:22:47,340
details whatsoever now keep in mind this

506
00:22:47,340 --> 00:22:49,320
is the misconfiguration and there are

507
00:22:49,320 --> 00:22:52,080
certain instances that have configured

508
00:22:52,080 --> 00:22:54,780
backstage properly so this won't work

509
00:22:54,780 --> 00:22:56,159
but

510
00:22:56,159 --> 00:22:58,559
it's a documentation Quirk that uh you

511
00:22:58,559 --> 00:23:02,760
know we we have to uh show you guys

512
00:23:02,760 --> 00:23:04,620
um so in terms of the disclosure

513
00:23:04,620 --> 00:23:06,539
timeline this whole uh process took

514
00:23:06,539 --> 00:23:09,179
about two weeks uh back in August 18th

515
00:23:09,179 --> 00:23:12,299
we reported this issue to Spotify via

516
00:23:12,299 --> 00:23:14,760
the hacker one platform uh they were

517
00:23:14,760 --> 00:23:18,299
really uh Swift in in in in seeing this

518
00:23:18,299 --> 00:23:21,659
issue and triaging the uh report and by

519
00:23:21,659 --> 00:23:23,700
August 29th they have released Spotify

520
00:23:23,700 --> 00:23:27,179
has released uh a security release a

521
00:23:27,179 --> 00:23:29,460
critical security list that patches the

522
00:23:29,460 --> 00:23:32,100
vulnerability we just show and because

523
00:23:32,100 --> 00:23:35,059
the only version bumped the dependency

524
00:23:35,059 --> 00:23:38,340
of vm2 that we showed you uh that was

525
00:23:38,340 --> 00:23:41,220
vulnerable uh um they gave it a CVC

526
00:23:41,220 --> 00:23:44,159
score of 9.8 but the cve that we showed

527
00:23:44,159 --> 00:23:46,980
you earlier is a CVC score of 10. so

528
00:23:46,980 --> 00:23:49,820
keep that in mind

529
00:23:50,159 --> 00:23:51,419
cool

530
00:23:51,419 --> 00:23:53,760
um so we got to the stage where we

531
00:23:53,760 --> 00:23:55,620
wanted to talk about uh some key

532
00:23:55,620 --> 00:23:57,360
takeaways that we found during this

533
00:23:57,360 --> 00:23:58,980
research

534
00:23:58,980 --> 00:24:01,140
um and we divide them into uh you know

535
00:24:01,140 --> 00:24:03,780
what we can take for researchers what

536
00:24:03,780 --> 00:24:05,640
developers can take from it and what

537
00:24:05,640 --> 00:24:08,820
everyone can take from this presentation

538
00:24:08,820 --> 00:24:11,340
the first one relates to the fact that

539
00:24:11,340 --> 00:24:14,580
uh when we saw vm2 and we saw the 10

540
00:24:14,580 --> 00:24:17,640
vulnerabilities or even more uh that

541
00:24:17,640 --> 00:24:20,460
existed in in the ecosystem uh for the

542
00:24:20,460 --> 00:24:22,320
last two years we could have been easily

543
00:24:22,320 --> 00:24:24,840
intimidated and uh and and you know

544
00:24:24,840 --> 00:24:26,760
dropped the research because if someone

545
00:24:26,760 --> 00:24:29,159
found an RC 10 times in in the last two

546
00:24:29,159 --> 00:24:31,679
years it sure means that you know the

547
00:24:31,679 --> 00:24:33,600
product is is properly patched by now

548
00:24:33,600 --> 00:24:35,640
and uh we shouldn't find anything new

549
00:24:35,640 --> 00:24:38,700
right so um this conception or

550
00:24:38,700 --> 00:24:41,880
misconception uh uh really hit us when

551
00:24:41,880 --> 00:24:44,460
we found this vulnerability again after

552
00:24:44,460 --> 00:24:47,340
two years of uh you know about 10

553
00:24:47,340 --> 00:24:49,260
instances of vulnerabilities that were

554
00:24:49,260 --> 00:24:52,980
found and um the the gist of it is that

555
00:24:52,980 --> 00:24:55,020
where there is smoke there's fire so

556
00:24:55,020 --> 00:24:57,360
don't get intimidated by a project that

557
00:24:57,360 --> 00:25:00,539
is heavily researched or has uh you know

558
00:25:00,539 --> 00:25:03,080
a lot of vulnerabilities

559
00:25:03,080 --> 00:25:06,780
exposed or publicly exposed uh if this

560
00:25:06,780 --> 00:25:09,539
is your interest go for it

561
00:25:09,539 --> 00:25:12,240
the second key takeaway really ties down

562
00:25:12,240 --> 00:25:14,340
to the previous presentation that uh

563
00:25:14,340 --> 00:25:16,860
we've just seen about supply chain and

564
00:25:16,860 --> 00:25:18,419
how supply chain affects your

565
00:25:18,419 --> 00:25:21,059
organizational security posture yeah

566
00:25:21,059 --> 00:25:22,919
when you're integrating such an

567
00:25:22,919 --> 00:25:25,559
application like like based uh backstage

568
00:25:25,559 --> 00:25:28,200
for example uh we're inheriting all the

569
00:25:28,200 --> 00:25:30,840
security posters uh that of that

570
00:25:30,840 --> 00:25:33,419
application into our organization what

571
00:25:33,419 --> 00:25:36,179
this means is that if big stage is

572
00:25:36,179 --> 00:25:38,400
having all of those Integrations with

573
00:25:38,400 --> 00:25:40,380
all those uh you know with GitHub and

574
00:25:40,380 --> 00:25:42,360
with uh your your Google account and so

575
00:25:42,360 --> 00:25:44,640
on a Potential Threat actor that

576
00:25:44,640 --> 00:25:46,919
compromises that machine can laterally

577
00:25:46,919 --> 00:25:49,260
move into your organization and use

578
00:25:49,260 --> 00:25:51,360
those Secrets against you so you have to

579
00:25:51,360 --> 00:25:53,039
keep in mind that if you're integrating

580
00:25:53,039 --> 00:25:56,039
such a solution your security posture is

581
00:25:56,039 --> 00:25:57,480
tightly coupled with that project

582
00:25:57,480 --> 00:26:00,360
security posture

583
00:26:00,360 --> 00:26:02,880
the last bullet is you know we are all

584
00:26:02,880 --> 00:26:05,340
uh either developers security Searchers

585
00:26:05,340 --> 00:26:07,380
we've been in this industry for a long

586
00:26:07,380 --> 00:26:10,740
time and we know that documentation can

587
00:26:10,740 --> 00:26:13,440
be a bit tedious to read so we read the

588
00:26:13,440 --> 00:26:15,779
minimal amount of documentation uh to

589
00:26:15,779 --> 00:26:17,820
make the project work but essentially

590
00:26:17,820 --> 00:26:19,919
there are a lot of documentation quirks

591
00:26:19,919 --> 00:26:22,679
that uh are hidden in the documentation

592
00:26:22,679 --> 00:26:25,740
and you can avoid such a situation where

593
00:26:25,740 --> 00:26:27,360
you don't expose your authentication

594
00:26:27,360 --> 00:26:30,299
method to the back end by just reading

595
00:26:30,299 --> 00:26:33,020
the menu

596
00:26:33,299 --> 00:26:34,140
um

597
00:26:34,140 --> 00:26:37,760
thank you guys for listening to us

598
00:26:43,320 --> 00:26:45,120
and of course if you have any questions

599
00:26:45,120 --> 00:26:47,640
you can feel free to contact us after

600
00:26:47,640 --> 00:26:50,039
this session or on social media we would

601
00:26:50,039 --> 00:26:51,960
be more than happy uh to answer your

602
00:26:51,960 --> 00:26:54,360
questions thank you

603
00:26:54,360 --> 00:26:55,660
[Applause]

604
00:26:55,660 --> 00:27:02,660
[Music]

