1
00:00:00,000 --> 00:00:08,700
[Music]

2
00:00:09,679 --> 00:00:11,440
thank you

3
00:00:11,440 --> 00:00:13,380
[Music]

4
00:00:13,380 --> 00:00:16,500
hello everyone oh thank you we're very

5
00:00:16,500 --> 00:00:18,480
excited to be here presenting course

6
00:00:18,480 --> 00:00:20,820
Miss fabrics and more uh how we managed

7
00:00:20,820 --> 00:00:23,580
to find various vulnerabilities in Azure

8
00:00:23,580 --> 00:00:26,460
Flagship Services firstly let's say

9
00:00:26,460 --> 00:00:28,500
thank you for the team Ila for helping

10
00:00:28,500 --> 00:00:31,560
us so everyone around uh and yourself we

11
00:00:31,560 --> 00:00:34,800
hope you enjoy it so uh yeah

12
00:00:34,800 --> 00:00:37,260
let's start introducing ourselves so I

13
00:00:37,260 --> 00:00:39,660
go by the name of Lido working at Oka

14
00:00:39,660 --> 00:00:41,940
for almost two years now

15
00:00:41,940 --> 00:00:43,379
um mainly focusing on Final

16
00:00:43,379 --> 00:00:46,140
vulnerabilities in Cloud servicer right

17
00:00:46,140 --> 00:00:49,260
so mainly Azure as Dave Chappelle just

18
00:00:49,260 --> 00:00:50,940
said

19
00:00:50,940 --> 00:00:54,239
um AWS gcp Etc you can find my finding

20
00:00:54,239 --> 00:00:56,760
and vulnerabilities in research in our

21
00:00:56,760 --> 00:00:59,760
blog obviously in Oka this is Caesar is

22
00:00:59,760 --> 00:01:02,039
my Twitter although I'm not that uh

23
00:01:02,039 --> 00:01:04,680
active on Twitter to be honest a little

24
00:01:04,680 --> 00:01:06,780
bit about myself so I'm happily married

25
00:01:06,780 --> 00:01:09,479
to ADI which sits in front of you I said

26
00:01:09,479 --> 00:01:11,100
happily because she sits in front of it

27
00:01:11,100 --> 00:01:15,479
but that's about it uh oi hello everyone

28
00:01:15,479 --> 00:01:18,119
my name is Roy working at Orca security

29
00:01:18,119 --> 00:01:19,979
for the past two and a half years now as

30
00:01:19,979 --> 00:01:22,320
a security researcher my main focus is

31
00:01:22,320 --> 00:01:24,299
azure research finding new

32
00:01:24,299 --> 00:01:26,520
vulnerabilities and detect and writing

33
00:01:26,520 --> 00:01:27,900
new detection techniques to our product

34
00:01:27,900 --> 00:01:30,240
a bit on my background at my previous

35
00:01:30,240 --> 00:01:32,520
fall at the IDF I spent approximately

36
00:01:32,520 --> 00:01:36,299
five years researching operating systems

37
00:01:36,299 --> 00:01:41,400
so let's begin sure so what is cloud so

38
00:01:41,400 --> 00:01:44,820
when talking about cloud computing just

39
00:01:44,820 --> 00:01:47,780
kidding just kidding you know it

40
00:01:47,780 --> 00:01:51,600
and okay so a token security we provide

41
00:01:51,600 --> 00:01:53,399
our customers deeper understanding of

42
00:01:53,399 --> 00:01:55,020
their Cloud environments and hemp and

43
00:01:55,020 --> 00:01:57,540
helping them implementing security best

44
00:01:57,540 --> 00:01:59,579
practices our goal is to minimize the

45
00:01:59,579 --> 00:02:01,920
risk for cyber attacks and data breaches

46
00:02:01,920 --> 00:02:04,200
doing our work at Oka we've came across

47
00:02:04,200 --> 00:02:05,640
several vulnerable Azure Services

48
00:02:05,640 --> 00:02:07,320
vulnerable to a variety of

49
00:02:07,320 --> 00:02:10,860
vulnerabilities such as SSS ssrf which

50
00:02:10,860 --> 00:02:12,660
escalation and as we'll demonstrate

51
00:02:12,660 --> 00:02:14,580
later on the presentation remote code

52
00:02:14,580 --> 00:02:15,660
execution

53
00:02:15,660 --> 00:02:18,120
among those services are Azure service

54
00:02:18,120 --> 00:02:20,819
Fabric and Azure Cosmos database yes so

55
00:02:20,819 --> 00:02:23,099
we decided to mainly focusing on service

56
00:02:23,099 --> 00:02:25,020
Subic and Azure as we mentioned in our

57
00:02:25,020 --> 00:02:26,580
title because they are Flagship Services

58
00:02:26,580 --> 00:02:29,220
right and they have a deeply integrated

59
00:02:29,220 --> 00:02:31,020
within the Azure ecosystem meaning

60
00:02:31,020 --> 00:02:32,940
that's like let's say finding

61
00:02:32,940 --> 00:02:34,800
vulnerabilities in those Services can

62
00:02:34,800 --> 00:02:37,739
yield let's say a very interesting uh

63
00:02:37,739 --> 00:02:40,200
findings or implication on and

64
00:02:40,200 --> 00:02:42,360
consequences for millions of azure users

65
00:02:42,360 --> 00:02:43,980
so that's like the main goal of

66
00:02:43,980 --> 00:02:46,080
searching those vulnerabilities in in

67
00:02:46,080 --> 00:02:47,660
these two Services

68
00:02:47,660 --> 00:02:50,040
obviously both of them are being

69
00:02:50,040 --> 00:02:51,720
integrated within each other so but

70
00:02:51,720 --> 00:02:53,459
we're not covered it in this specific

71
00:02:53,459 --> 00:02:56,700
talk but generally speaking uh we deal

72
00:02:56,700 --> 00:02:58,620
with many services these are the main

73
00:02:58,620 --> 00:03:01,319
ones we will demonstrate uh in this

74
00:03:01,319 --> 00:03:04,860
presentation so in terms of like the

75
00:03:04,860 --> 00:03:06,660
concept for the stock so we hope you

76
00:03:06,660 --> 00:03:09,420
enjoyed it first and foremost uh second

77
00:03:09,420 --> 00:03:13,019
of all we aiming to provide let's say a

78
00:03:13,019 --> 00:03:14,879
walkthrough like step by step on how we

79
00:03:14,879 --> 00:03:16,400
managed to find these vulnerabilities

80
00:03:16,400 --> 00:03:19,140
and like we provide the do's and don'ts

81
00:03:19,140 --> 00:03:21,300
and we discuss the mindset and how we

82
00:03:21,300 --> 00:03:24,659
came up with finding those and uh yeah

83
00:03:24,659 --> 00:03:27,360
so cool so let's start

84
00:03:27,360 --> 00:03:31,019
so um firstly we'll speak about fabrics

85
00:03:31,019 --> 00:03:33,060
and later on we will demonstrate on

86
00:03:33,060 --> 00:03:34,379
cosmis

87
00:03:34,379 --> 00:03:37,500
so what is offer so let's start but what

88
00:03:37,500 --> 00:03:39,900
is service topic so service subject in

89
00:03:39,900 --> 00:03:41,840
general you can think of it as like a

90
00:03:41,840 --> 00:03:44,700
cloud-based platform that help you

91
00:03:44,700 --> 00:03:46,739
manage and and

92
00:03:46,739 --> 00:03:49,920
um let's say a build your microservices

93
00:03:49,920 --> 00:03:51,900
application so you can think of it as

94
00:03:51,900 --> 00:03:54,540
the buzzwords kubernetes but it's not

95
00:03:54,540 --> 00:03:56,879
kubernetes it's like the version for

96
00:03:56,879 --> 00:03:58,799
Azure to set kubernetes right you can

97
00:03:58,799 --> 00:04:01,500
think of it similarly uh on the other

98
00:04:01,500 --> 00:04:04,260
hand you have uh the sexy dashboard on

99
00:04:04,260 --> 00:04:05,760
the right so this is service fabric

100
00:04:05,760 --> 00:04:08,459
Explorer and this is where both of our

101
00:04:08,459 --> 00:04:10,620
vulnerabilities relies on so service

102
00:04:10,620 --> 00:04:12,840
over Explorer

103
00:04:12,840 --> 00:04:14,700
um is like the dashboard as I just

104
00:04:14,700 --> 00:04:16,380
mentioned you can see here like the

105
00:04:16,380 --> 00:04:19,019
nodes the the cluster which demonstrates

106
00:04:19,019 --> 00:04:21,238
the health of the cluster you can see uh

107
00:04:21,238 --> 00:04:22,919
the system namespaces also the

108
00:04:22,919 --> 00:04:24,300
containers themselves

109
00:04:24,300 --> 00:04:27,360
generally speaking like let's say a

110
00:04:27,360 --> 00:04:30,000
generic dashboard that helps you uh

111
00:04:30,000 --> 00:04:33,780
build your cluster right okay so if my

112
00:04:33,780 --> 00:04:35,520
health and think think about it as a

113
00:04:35,520 --> 00:04:37,259
kubernetes with a dashboard right yeah

114
00:04:37,259 --> 00:04:39,240
exactly so think of it during this

115
00:04:39,240 --> 00:04:41,220
presentation for both fabrics and the

116
00:04:41,220 --> 00:04:43,500
later one as let's say you find

117
00:04:43,500 --> 00:04:45,720
vulnerabilities that we just gonna

118
00:04:45,720 --> 00:04:47,580
demonstrate let's figure about it what's

119
00:04:47,580 --> 00:04:50,100
the implication in terms of uh cluster

120
00:04:50,100 --> 00:04:53,580
slash kubernetes slash Docker Etc

121
00:04:53,580 --> 00:04:54,360
um

122
00:04:54,360 --> 00:04:57,740
so cool so once you set up uh Services

123
00:04:57,740 --> 00:05:00,060
long sorry so once you set up service

124
00:05:00,060 --> 00:05:02,460
Fabric in the portal itself in Azure

125
00:05:02,460 --> 00:05:05,639
you've been given uh uh the the external

126
00:05:05,639 --> 00:05:07,440
dashboard which is service subject right

127
00:05:07,440 --> 00:05:09,720
so once we enter the service topic

128
00:05:09,720 --> 00:05:12,479
Explorer we immediately start to poke in

129
00:05:12,479 --> 00:05:14,460
on it and start for uh searching for

130
00:05:14,460 --> 00:05:17,280
different uh capabilities right so

131
00:05:17,280 --> 00:05:21,180
different uh abilities or something that

132
00:05:21,180 --> 00:05:23,699
will let's say like a eye candy that we

133
00:05:23,699 --> 00:05:24,720
could leverage and finding

134
00:05:24,720 --> 00:05:26,639
vulnerabilities in but we came up with

135
00:05:26,639 --> 00:05:29,100
nothing basically a few good moments

136
00:05:29,100 --> 00:05:32,639
after we found out this specific uh menu

137
00:05:32,639 --> 00:05:34,259
on the right so you can see we are able

138
00:05:34,259 --> 00:05:37,020
to switch to the view all this effects

139
00:05:37,020 --> 00:05:39,560
sfx stands for services

140
00:05:39,560 --> 00:05:42,960
so it gives the guys that Azure provides

141
00:05:42,960 --> 00:05:44,400
the ability to switch to the oldest

142
00:05:44,400 --> 00:05:46,380
effects and this is where our story

143
00:05:46,380 --> 00:05:48,060
began so

144
00:05:48,060 --> 00:05:51,259
once I switch to the sfx or the old one

145
00:05:51,259 --> 00:05:53,520
I immediately noticed two main things

146
00:05:53,520 --> 00:05:55,919
right two main uh different capabilities

147
00:05:55,919 --> 00:05:58,979
that were not enabled by default in the

148
00:05:58,979 --> 00:06:02,100
new one right the first one is like very

149
00:06:02,100 --> 00:06:03,960
very basically very important is the

150
00:06:03,960 --> 00:06:06,539
create new compose deployment we will

151
00:06:06,539 --> 00:06:08,580
get there in a minute but just think

152
00:06:08,580 --> 00:06:11,039
about it that you were able to create a

153
00:06:11,039 --> 00:06:14,039
container using the UI something that is

154
00:06:14,039 --> 00:06:16,740
not enabled by default in the new one it

155
00:06:16,740 --> 00:06:19,740
only enabled via the SDK or CLI but in

156
00:06:19,740 --> 00:06:21,539
the old one you can manage to do so by

157
00:06:21,539 --> 00:06:24,000
clicking on a few buttons and then able

158
00:06:24,000 --> 00:06:26,340
to create the composed employment

159
00:06:26,340 --> 00:06:28,500
another thing that I want to highlighted

160
00:06:28,500 --> 00:06:30,840
here is once I noticed that behind the

161
00:06:30,840 --> 00:06:32,880
scene in my burp Suite I noticed the

162
00:06:32,880 --> 00:06:34,740
following requests that were sent so

163
00:06:34,740 --> 00:06:36,419
this is you can see behind me the

164
00:06:36,419 --> 00:06:40,199
angularjs 1.5 version so immediately I'm

165
00:06:40,199 --> 00:06:43,020
assume you guys some of you are bug

166
00:06:43,020 --> 00:06:45,600
bounty hunters Etc so once I immediately

167
00:06:45,600 --> 00:06:48,960
knows that it's an angularjs framework

168
00:06:48,960 --> 00:06:50,639
which is a JavaScript framework I

169
00:06:50,639 --> 00:06:52,800
immediately thought about cstr which

170
00:06:52,800 --> 00:06:54,240
stands for collide side template

171
00:06:54,240 --> 00:06:56,819
ejection right or other various

172
00:06:56,819 --> 00:06:58,919
vulnerabilities such as SSDI which

173
00:06:58,919 --> 00:07:01,500
stands for server side right

174
00:07:01,500 --> 00:07:03,840
um so this one this specific version is

175
00:07:03,840 --> 00:07:05,280
kind of old right so I immediately

176
00:07:05,280 --> 00:07:07,680
thought what if the specific dashboard

177
00:07:07,680 --> 00:07:10,560
is vulnerable to csti right so remember

178
00:07:10,560 --> 00:07:12,419
previously I just mentioned the create

179
00:07:12,419 --> 00:07:14,400
compose deployment application test this

180
00:07:14,400 --> 00:07:16,680
is the button on the left side

181
00:07:16,680 --> 00:07:19,440
um so once you create a container I

182
00:07:19,440 --> 00:07:20,940
provide it with the following name you

183
00:07:20,940 --> 00:07:22,919
see double brackets seven times seven

184
00:07:22,919 --> 00:07:25,380
you can ignore the csji for a minute but

185
00:07:25,380 --> 00:07:27,539
the the field itself is seven times

186
00:07:27,539 --> 00:07:29,039
seven with the double cursor brackets

187
00:07:29,039 --> 00:07:31,800
once this was rendered and created you

188
00:07:31,800 --> 00:07:34,620
see the 49 which stands for like

189
00:07:34,620 --> 00:07:36,960
obviously seven times seven but it was a

190
00:07:36,960 --> 00:07:39,660
great indication that indeed this maybe

191
00:07:39,660 --> 00:07:42,180
be vulnerable to csdi

192
00:07:42,180 --> 00:07:45,000
um the next move will be to try to uh

193
00:07:45,000 --> 00:07:48,240
verify it by providing uh this the upper

194
00:07:48,240 --> 00:07:51,539
left payload which is the like somewhat

195
00:07:51,539 --> 00:07:55,139
similar to uh escaping uh an angularjs

196
00:07:55,139 --> 00:07:58,020
framework but in order to pop the famous

197
00:07:58,020 --> 00:08:01,199
alert box on the right so we found the

198
00:08:01,199 --> 00:08:04,020
specific payload HTML encoded then

199
00:08:04,020 --> 00:08:07,860
provided in the name parameter and then

200
00:08:07,860 --> 00:08:10,860
uh so slowly after it was obviously

201
00:08:10,860 --> 00:08:13,259
being verified as vulnerable to csdi

202
00:08:13,259 --> 00:08:15,300
right which very very cool wait wait

203
00:08:15,300 --> 00:08:17,340
don't don't win me wrong it's very cool

204
00:08:17,340 --> 00:08:19,800
very good vulnerability but you just

205
00:08:19,800 --> 00:08:22,199
said this is a client-side vulnerability

206
00:08:22,199 --> 00:08:24,660
so why do you even care why so they

207
00:08:24,660 --> 00:08:26,039
should care because if this was

208
00:08:26,039 --> 00:08:28,400
vulnerable to csdi as the client side

209
00:08:28,400 --> 00:08:31,080
it's not that dangerous at the time

210
00:08:31,080 --> 00:08:33,360
right but I thought that it was indeed

211
00:08:33,360 --> 00:08:36,360
also verified as vulnerable to other

212
00:08:36,360 --> 00:08:38,399
vulnerabilities such as you guessed it

213
00:08:38,399 --> 00:08:41,640
xss so this makes the story much more

214
00:08:41,640 --> 00:08:44,099
interesting and dangerous and we can try

215
00:08:44,099 --> 00:08:47,279
to demonstrate it by trying to uh verify

216
00:08:47,279 --> 00:08:50,040
it it's being vulnerable to xss by the

217
00:08:50,040 --> 00:08:53,220
next slide so once we created an

218
00:08:53,220 --> 00:08:55,140
application and provided with the

219
00:08:55,140 --> 00:08:57,959
following payload you see on the left uh

220
00:08:57,959 --> 00:09:00,660
we name it with a house hashtag in the

221
00:09:00,660 --> 00:09:03,540
beginning and the the closing Spence

222
00:09:03,540 --> 00:09:05,100
time Etc but it's not really important

223
00:09:05,100 --> 00:09:06,120
at the moment

224
00:09:06,120 --> 00:09:08,459
you need to remember that we have faced

225
00:09:08,459 --> 00:09:10,560
many restriction in terms of like the

226
00:09:10,560 --> 00:09:12,839
naming for the container it couldn't

227
00:09:12,839 --> 00:09:15,480
contain any script tags or any blank

228
00:09:15,480 --> 00:09:18,300
spaces or other things but generally

229
00:09:18,300 --> 00:09:20,880
speaking we found out that this could

230
00:09:20,880 --> 00:09:23,339
work so we provided created a container

231
00:09:23,339 --> 00:09:25,860
and so you know uh the style tag was

232
00:09:25,860 --> 00:09:28,019
being created properly so again a great

233
00:09:28,019 --> 00:09:31,920
indication of this could be injected to

234
00:09:31,920 --> 00:09:34,500
something more dangerous now I want to

235
00:09:34,500 --> 00:09:36,000
say a small disclaimer here not

236
00:09:36,000 --> 00:09:37,279
disclaimer but

237
00:09:37,279 --> 00:09:39,959
parentheses they call it when I work

238
00:09:39,959 --> 00:09:42,959
essentially on Azure portal I managed to

239
00:09:42,959 --> 00:09:45,779
find many HTML injection right but the

240
00:09:45,779 --> 00:09:49,380
thing is that the guys at Azure do like

241
00:09:49,380 --> 00:09:51,899
a great job sanitizing user inputs you

242
00:09:51,899 --> 00:09:54,240
can find HTML injection but you cannot

243
00:09:54,240 --> 00:09:57,420
leverage it into an xss so fortunately

244
00:09:57,420 --> 00:09:59,040
because we're standing right here this

245
00:09:59,040 --> 00:10:01,740
was not the case so providing the

246
00:10:01,740 --> 00:10:04,320
following payload uh again without any

247
00:10:04,320 --> 00:10:06,720
blank spaces you can see the Slash and

248
00:10:06,720 --> 00:10:09,420
start with the hair sign HTML encoded

249
00:10:09,420 --> 00:10:10,860
and

250
00:10:10,860 --> 00:10:13,140
vulnerable to an exercise this one this

251
00:10:13,140 --> 00:10:15,600
is a stored exercise right now one thing

252
00:10:15,600 --> 00:10:18,800
I want to mention about service fabric

253
00:10:18,800 --> 00:10:21,839
Explorer is that this is a shared

254
00:10:21,839 --> 00:10:24,420
dashboard right you can see like once

255
00:10:24,420 --> 00:10:27,120
you create a container as any type of

256
00:10:27,120 --> 00:10:30,540
user whether you are admin or let's say

257
00:10:30,540 --> 00:10:32,760
a hybrid one as we will discuss shortly

258
00:10:32,760 --> 00:10:33,959
after

259
00:10:33,959 --> 00:10:36,300
um any user be exposed to the same

260
00:10:36,300 --> 00:10:38,580
application meaning that if I let's say

261
00:10:38,580 --> 00:10:42,000
just created an nginx one nginx or IIs

262
00:10:42,000 --> 00:10:46,079
container any user can use it and see it

263
00:10:46,079 --> 00:10:49,380
as well right so we came up with like

264
00:10:49,380 --> 00:10:51,240
just immediately thinking how we can

265
00:10:51,240 --> 00:10:53,339
demonstrate to the team at msrc that we

266
00:10:53,339 --> 00:10:55,200
work very closely with how we can

267
00:10:55,200 --> 00:10:57,660
demonstrate our proper vulnerability and

268
00:10:57,660 --> 00:10:59,880
how we can demonstrate it as a POC for

269
00:10:59,880 --> 00:11:01,560
them to deal with

270
00:11:01,560 --> 00:11:05,420
yeah we we set up a lot of good memes

271
00:11:05,420 --> 00:11:08,519
so before jumping into the specific

272
00:11:08,519 --> 00:11:10,320
payload and the POC that we managed to

273
00:11:10,320 --> 00:11:13,380
build let's briefly discuss like the

274
00:11:13,380 --> 00:11:16,620
fabric fabrics Fabrics custom settings

275
00:11:16,620 --> 00:11:19,980
so importantly to know that once you set

276
00:11:19,980 --> 00:11:22,200
up a service fabric you've been given

277
00:11:22,200 --> 00:11:24,480
the ability to create a two main user

278
00:11:24,480 --> 00:11:27,180
right so you have the admin which is the

279
00:11:27,180 --> 00:11:28,620
is the one who control the cluster we

280
00:11:28,620 --> 00:11:30,260
can create composed deployment you can

281
00:11:30,260 --> 00:11:33,899
do pretty much everything and you have

282
00:11:33,899 --> 00:11:36,600
also a read-only user which is not able

283
00:11:36,600 --> 00:11:38,399
to do anything right you can only view

284
00:11:38,399 --> 00:11:40,560
the metrics and you can see like the

285
00:11:40,560 --> 00:11:42,300
application that's been created

286
00:11:42,300 --> 00:11:44,160
so this was a quiet challenge right you

287
00:11:44,160 --> 00:11:45,959
want to add something to it yeah so

288
00:11:45,959 --> 00:11:48,480
exactly this is the default settings but

289
00:11:48,480 --> 00:11:50,339
think of the following case you might

290
00:11:50,339 --> 00:11:52,019
have an external user that you want to

291
00:11:52,019 --> 00:11:55,200
give access to and this external user

292
00:11:55,200 --> 00:11:56,760
might need to I don't know create

293
00:11:56,760 --> 00:12:00,120
composed deployment for example so for

294
00:12:00,120 --> 00:12:03,360
this case you can edit the client access

295
00:12:03,360 --> 00:12:05,339
permissions and replace the read-only

296
00:12:05,339 --> 00:12:07,260
permissions with any permission that you

297
00:12:07,260 --> 00:12:09,000
want so for this case for this scenario

298
00:12:09,000 --> 00:12:11,940
we switch the read only access with

299
00:12:11,940 --> 00:12:14,339
create compost deployment yeah so thank

300
00:12:14,339 --> 00:12:17,640
you for graph clarifying it so on the

301
00:12:17,640 --> 00:12:19,800
lower side on the lower part sorry you

302
00:12:19,800 --> 00:12:21,720
can see like screenshot that was taken

303
00:12:21,720 --> 00:12:25,980
from Service public repo which uh if you

304
00:12:25,980 --> 00:12:28,260
guys noticed it has a restart in the end

305
00:12:28,260 --> 00:12:30,779
then you have nodes at the beginning and

306
00:12:30,779 --> 00:12:32,880
the encoded URL component it's like the

307
00:12:32,880 --> 00:12:36,720
node name so this rest API endpoints aim

308
00:12:36,720 --> 00:12:39,600
to reset the node generally speaking but

309
00:12:39,600 --> 00:12:42,060
like we thought about what if we manage

310
00:12:42,060 --> 00:12:45,360
to abuse like the the admin permission

311
00:12:45,360 --> 00:12:48,600
in order to create a POC that

312
00:12:48,600 --> 00:12:51,300
demonstrate how we can abuse the

313
00:12:51,300 --> 00:12:52,860
administrator permission without even

314
00:12:52,860 --> 00:12:56,220
knowing or Trigger or rest API endpoint

315
00:12:56,220 --> 00:12:58,740
on its behalf so

316
00:12:58,740 --> 00:13:00,480
shortly after we came up with the

317
00:13:00,480 --> 00:13:03,540
following workflow right so you have a

318
00:13:03,540 --> 00:13:05,160
low preview user on the left

319
00:13:05,160 --> 00:13:07,980
which is creating a compose deployment

320
00:13:07,980 --> 00:13:10,320
entering a crafted exercise payload in

321
00:13:10,320 --> 00:13:13,079
the parameter right in the name and once

322
00:13:13,079 --> 00:13:16,019
it is been created now it's set up for

323
00:13:16,019 --> 00:13:18,600
basically forever right every user that

324
00:13:18,600 --> 00:13:20,579
will encounter the same container will

325
00:13:20,579 --> 00:13:23,820
now be exposed to the store xss the

326
00:13:23,820 --> 00:13:26,519
admin on the lower left is like the

327
00:13:26,519 --> 00:13:29,700
admin now once he will face the same

328
00:13:29,700 --> 00:13:31,800
container app the malicious one an

329
00:13:31,800 --> 00:13:33,420
iframe that we used in the access

330
00:13:33,420 --> 00:13:36,180
payload will be embedded uh grabbing a

331
00:13:36,180 --> 00:13:39,180
fetch HTML5 from the ngook server that

332
00:13:39,180 --> 00:13:41,899
we control SRM as a remote attacker and

333
00:13:41,899 --> 00:13:44,519
execute and Trigger the rest the restart

334
00:13:44,519 --> 00:13:47,459
NPI 8 Bond right so

335
00:13:47,459 --> 00:13:50,339
shortly after we built a very sexy

336
00:13:50,339 --> 00:13:52,980
exploit using a very nice ASCII out

337
00:13:52,980 --> 00:13:54,899
right where you love us yeah we love us

338
00:13:54,899 --> 00:13:56,579
here yeah we think that every great

339
00:13:56,579 --> 00:13:58,380
exploit comes with a great ASCII out so

340
00:13:58,380 --> 00:14:00,899
this one is aimed for low preview user

341
00:14:00,899 --> 00:14:03,180
to abuse he just needs to provide a

342
00:14:03,180 --> 00:14:04,920
payload using the payload argument you

343
00:14:04,920 --> 00:14:07,800
see on the left and that's about it so

344
00:14:07,800 --> 00:14:09,839
sending the payload and Trigger it will

345
00:14:09,839 --> 00:14:12,060
cause uh the following

346
00:14:12,060 --> 00:14:14,579
so you have an iframe that was being

347
00:14:14,579 --> 00:14:17,100
embedded by the way this could obviously

348
00:14:17,100 --> 00:14:19,200
uh be created behind the scene while

349
00:14:19,200 --> 00:14:22,019
providing like a a size parameter right

350
00:14:22,019 --> 00:14:23,579
but we want to demonstrate it with a

351
00:14:23,579 --> 00:14:25,860
full iframe so an iframe was being

352
00:14:25,860 --> 00:14:28,320
embedded on the left side is I I guess

353
00:14:28,320 --> 00:14:29,880
it's kind of small you don't see it but

354
00:14:29,880 --> 00:14:31,740
you have two requests right so you have

355
00:14:31,740 --> 00:14:34,079
the first one sending uh the fetch

356
00:14:34,079 --> 00:14:36,120
request aiming to grab from the angle

357
00:14:36,120 --> 00:14:38,459
file from the angle server the second

358
00:14:38,459 --> 00:14:40,199
one the lower one is the restart one

359
00:14:40,199 --> 00:14:43,079
that was being triggered on the on the

360
00:14:43,079 --> 00:14:46,740
admin on its behalf so to speak so once

361
00:14:46,740 --> 00:14:48,779
you once you have this whole type of

362
00:14:48,779 --> 00:14:51,240
snowball rolling you have the node that

363
00:14:51,240 --> 00:14:53,699
both win resetted and you see seed node

364
00:14:53,699 --> 00:14:56,760
down meaning that it costs like many

365
00:14:56,760 --> 00:14:58,560
Interruption with user experience you

366
00:14:58,560 --> 00:15:01,139
have resetting the settings variables

367
00:15:01,139 --> 00:15:04,440
Etc like not not some typical reset node

368
00:15:04,440 --> 00:15:07,139
that anyone does on a daily basis which

369
00:15:07,139 --> 00:15:09,480
is not typical so we were able to

370
00:15:09,480 --> 00:15:11,160
provide the full PLC that we just

371
00:15:11,160 --> 00:15:13,560
demonstrated the team at M SLC they were

372
00:15:13,560 --> 00:15:15,300
assigned with this with this nice cve

373
00:15:15,300 --> 00:15:19,260
and we all went happy uh I guess it was

374
00:15:19,260 --> 00:15:21,779
like a typical day at Toca typically but

375
00:15:21,779 --> 00:15:24,899
this was very cool uh we came back and

376
00:15:24,899 --> 00:15:28,500
and that was about it right but uh uh

377
00:15:28,500 --> 00:15:30,240
fast forward a few months ago let's say

378
00:15:30,240 --> 00:15:33,420
about five or so uh my brain told me

379
00:15:33,420 --> 00:15:35,880
that my brain telling me that my story

380
00:15:35,880 --> 00:15:37,740
with service subject is not done meaning

381
00:15:37,740 --> 00:15:40,920
that this POC that we just created is a

382
00:15:40,920 --> 00:15:43,199
somewhat I don't know let's say 90

383
00:15:43,199 --> 00:15:45,000
privilege escalation as we discussed

384
00:15:45,000 --> 00:15:47,399
with the team and we want to provide a

385
00:15:47,399 --> 00:15:49,680
much dangerous one

386
00:15:49,680 --> 00:15:51,600
presenting

387
00:15:51,600 --> 00:15:53,940
super Fabrics right so we have Fabrics

388
00:15:53,940 --> 00:15:56,040
super Fabrics so this baby on the left

389
00:15:56,040 --> 00:15:58,680
is far more dangerous than the first and

390
00:15:58,680 --> 00:16:01,019
I just did I just described right so

391
00:16:01,019 --> 00:16:03,899
super Fabrics as its name applied and

392
00:16:03,899 --> 00:16:05,880
also for the Forex itself is an exercise

393
00:16:05,880 --> 00:16:09,000
uh vulnerability again with soup with

394
00:16:09,000 --> 00:16:11,220
Azure service stomach Explorer only this

395
00:16:11,220 --> 00:16:14,279
time it is much much dangerous and we

396
00:16:14,279 --> 00:16:17,399
will discuss about uh now so

397
00:16:17,399 --> 00:16:19,860
once I came back to the series topic

398
00:16:19,860 --> 00:16:21,959
Explorer at Sea and I just poke around

399
00:16:21,959 --> 00:16:24,060
and see what was changed after they

400
00:16:24,060 --> 00:16:26,579
patched it I noticed that in the same

401
00:16:26,579 --> 00:16:28,380
menu I previously discussed you see here

402
00:16:28,380 --> 00:16:31,620
that the switch to the oldest effect is

403
00:16:31,620 --> 00:16:34,199
now missing meaning that it has no more

404
00:16:34,199 --> 00:16:36,300
the old UI hence you cannot create

405
00:16:36,300 --> 00:16:38,759
compose deployment and we need to find

406
00:16:38,759 --> 00:16:40,800
another Vector

407
00:16:40,800 --> 00:16:43,500
um after a few good minutes or days or

408
00:16:43,500 --> 00:16:46,079
hours I'm not to be honest I'm not not

409
00:16:46,079 --> 00:16:49,019
remembered but a few good hours after we

410
00:16:49,019 --> 00:16:52,139
came up with the node profile page right

411
00:16:52,139 --> 00:16:56,579
so this is a typical note page that

412
00:16:56,579 --> 00:16:59,579
service object has it has a very common

413
00:16:59,579 --> 00:17:02,820
Behavior where the endpoint on the URL

414
00:17:02,820 --> 00:17:05,579
is have it's basically have its name and

415
00:17:05,579 --> 00:17:08,160
the name is being reflected uh in the

416
00:17:08,160 --> 00:17:10,199
dashboard itself so we thought about the

417
00:17:10,199 --> 00:17:12,480
next scenario we provided with

418
00:17:12,480 --> 00:17:15,359
on HTML tags in order to try to escape

419
00:17:15,359 --> 00:17:17,579
once again this is very similar to the

420
00:17:17,579 --> 00:17:20,099
first to the first fabric provide it and

421
00:17:20,099 --> 00:17:22,740
what you know nothing happened right so

422
00:17:22,740 --> 00:17:24,959
this was a bit I don't know a bit

423
00:17:24,959 --> 00:17:26,400
confused because we didn't notice it

424
00:17:26,400 --> 00:17:28,260
being reflected accordingly with a

425
00:17:28,260 --> 00:17:29,760
proper tag but nothing was being

426
00:17:29,760 --> 00:17:32,100
sanitized or nothing was being encoded

427
00:17:32,100 --> 00:17:34,980
as we noticed uh often it happens in

428
00:17:34,980 --> 00:17:37,260
Azure uh but then we noticed something

429
00:17:37,260 --> 00:17:40,020
else right we noticed that under the

430
00:17:40,020 --> 00:17:43,320
events tab it has the ability to switch

431
00:17:43,320 --> 00:17:45,780
to the cluster type toggle which is like

432
00:17:45,780 --> 00:17:47,820
the toggle you see in the middle of the

433
00:17:47,820 --> 00:17:50,640
screenshot once we click on it we notice

434
00:17:50,640 --> 00:17:52,559
that the same H1 tag you see on the left

435
00:17:52,559 --> 00:17:54,720
was being rendered probably in the

436
00:17:54,720 --> 00:17:57,179
cluster name so this one I mean we

437
00:17:57,179 --> 00:17:59,240
thought about it on how this specific

438
00:17:59,240 --> 00:18:02,100
behavior can cause a very serious damage

439
00:18:02,100 --> 00:18:05,340
right next move will be provided with a

440
00:18:05,340 --> 00:18:08,400
proper xss payload only this time we aim

441
00:18:08,400 --> 00:18:11,820
to uh hopefully will triggered the

442
00:18:11,820 --> 00:18:13,500
prompt now as as I mentioned previously

443
00:18:13,500 --> 00:18:15,500
I'm not sure if you remember

444
00:18:15,500 --> 00:18:18,240
HTML injection do happen in Azure we

445
00:18:18,240 --> 00:18:22,200
noticed that quite often but not able to

446
00:18:22,200 --> 00:18:24,600
execute an exercise I mean the tags are

447
00:18:24,600 --> 00:18:26,940
being sanitized and everything is pretty

448
00:18:26,940 --> 00:18:29,760
messed up but only this time we cross

449
00:18:29,760 --> 00:18:31,200
our fingers or hope this will the same

450
00:18:31,200 --> 00:18:34,980
happen so events tab selecting cluster

451
00:18:34,980 --> 00:18:38,220
type and the very sexy prompt just been

452
00:18:38,220 --> 00:18:43,140
opened will now become a much very

453
00:18:43,140 --> 00:18:45,740
serious scenario because only this time

454
00:18:45,740 --> 00:18:48,600
since this is not a stored exercise I

455
00:18:48,600 --> 00:18:49,919
mean it's kind of hybrid it's a

456
00:18:49,919 --> 00:18:51,539
reflector that

457
00:18:51,539 --> 00:18:54,179
became stored never mind but generally

458
00:18:54,179 --> 00:18:56,820
speaking this is an exercise that could

459
00:18:56,820 --> 00:18:59,039
be triggered from the URL right meaning

460
00:18:59,039 --> 00:19:02,340
that any unre any unauthenticated user

461
00:19:02,340 --> 00:19:04,500
can send a crafted malicious payload or

462
00:19:04,500 --> 00:19:07,200
URL and send it to the admin right so

463
00:19:07,200 --> 00:19:08,400
you don't need any authentication

464
00:19:08,400 --> 00:19:09,419
whatsoever

465
00:19:09,419 --> 00:19:12,059
so before jumping into what we managed

466
00:19:12,059 --> 00:19:14,340
to accomplish I won't say that that we

467
00:19:14,340 --> 00:19:16,980
faced many restrictions I mean the

468
00:19:16,980 --> 00:19:18,660
following page that you see right now

469
00:19:18,660 --> 00:19:21,000
with uh I will talk about it in a minute

470
00:19:21,000 --> 00:19:23,640
but we came like in a many restriction

471
00:19:23,640 --> 00:19:26,760
we were not able to find any way to

472
00:19:26,760 --> 00:19:30,360
trigger an RC whatsoever uh and this I

473
00:19:30,360 --> 00:19:32,520
can verify it and say that after a few

474
00:19:32,520 --> 00:19:34,919
good minutes of reading the

475
00:19:34,919 --> 00:19:37,620
very confusing documentation from Azure

476
00:19:37,620 --> 00:19:40,200
we finally find the following uh

477
00:19:40,200 --> 00:19:44,000
endpoint which was a one that aimed to

478
00:19:44,000 --> 00:19:46,980
upgrade the current compose deployment

479
00:19:46,980 --> 00:19:49,980
now let me just briefly explain so let's

480
00:19:49,980 --> 00:19:52,559
say again you have an IIs container

481
00:19:52,559 --> 00:19:54,419
right and you want to overwrite

482
00:19:54,419 --> 00:19:56,400
overridden and override it I'm sorry

483
00:19:56,400 --> 00:20:00,120
with another uh container or Docker file

484
00:20:00,120 --> 00:20:03,240
so you can simply send a specific

485
00:20:03,240 --> 00:20:06,240
endpoint with the proper body you see on

486
00:20:06,240 --> 00:20:08,039
the upper left you have the parameter in

487
00:20:08,039 --> 00:20:10,400
the body and then it contains like very

488
00:20:10,400 --> 00:20:13,679
uh mysterious uh properties that

489
00:20:13,679 --> 00:20:16,980
contains uh what we know later on uh uh

490
00:20:16,980 --> 00:20:19,860
endpoint from the new Docker file right

491
00:20:19,860 --> 00:20:22,679
so after a few good minutes of tries and

492
00:20:22,679 --> 00:20:24,960
arrow we came up and find how we can

493
00:20:24,960 --> 00:20:28,320
manage the how we can successfully send

494
00:20:28,320 --> 00:20:31,620
the payload and the rest API endpoint uh

495
00:20:31,620 --> 00:20:34,740
as it used to be and we came up with the

496
00:20:34,740 --> 00:20:38,400
following workflow so a remote attacker

497
00:20:38,400 --> 00:20:40,320
which have a hoodie of course is sending

498
00:20:40,320 --> 00:20:43,679
a crafted URL to any uh authenticated

499
00:20:43,679 --> 00:20:45,539
user whatsoever it could be the admin it

500
00:20:45,539 --> 00:20:47,059
could be any type of them

501
00:20:47,059 --> 00:20:50,460
once he will manipulate the same user to

502
00:20:50,460 --> 00:20:53,280
triggered the the whole scenario by

503
00:20:53,280 --> 00:20:55,740
selecting the cluster type again this

504
00:20:55,740 --> 00:20:57,539
whole snowball starts to work when you

505
00:20:57,539 --> 00:21:00,660
have an iframe being embedded fetching a

506
00:21:00,660 --> 00:21:02,820
file from the angle server fetch HTML

507
00:21:02,820 --> 00:21:05,520
only this time it will contain an

508
00:21:05,520 --> 00:21:08,640
upgrade endpoint holding what we now

509
00:21:08,640 --> 00:21:11,340
know as like the the Holy Grail of the

510
00:21:11,340 --> 00:21:14,580
docker compose file and later on uh

511
00:21:14,580 --> 00:21:18,120
fabric will demonstrate it by taking the

512
00:21:18,120 --> 00:21:21,480
specific malicious crafted Docker file

513
00:21:21,480 --> 00:21:24,000
that I just created as a malicious user

514
00:21:24,000 --> 00:21:27,299
and build it and once it will build it

515
00:21:27,299 --> 00:21:29,400
you will use I'm sure you guys familiar

516
00:21:29,400 --> 00:21:31,559
with CMD instruction inside the docker

517
00:21:31,559 --> 00:21:34,140
file so we use a CMD instruction after

518
00:21:34,140 --> 00:21:36,720
it was built this will trigger a

519
00:21:36,720 --> 00:21:40,320
Powershell execute another bet file then

520
00:21:40,320 --> 00:21:42,900
we'll trigger it once again and gain a

521
00:21:42,900 --> 00:21:46,080
remote attacker reverse shell but why uh

522
00:21:46,080 --> 00:21:48,659
talk if you can see it in action so

523
00:21:48,659 --> 00:21:51,419
let's see so this will be very quick but

524
00:21:51,419 --> 00:21:54,240
bear with me so you have a rest API

525
00:21:54,240 --> 00:21:56,280
endpoint currently I'm highlighting and

526
00:21:56,280 --> 00:21:57,900
building the malicious Docker file you

527
00:21:57,900 --> 00:21:59,460
see on the upper upper left

528
00:21:59,460 --> 00:22:01,440
yeah I'm highlighting the image this is

529
00:22:01,440 --> 00:22:02,940
the theme the instruction

530
00:22:02,940 --> 00:22:05,400
going back to the I'm setting up my tree

531
00:22:05,400 --> 00:22:07,500
listeners so you have Python and goken

532
00:22:07,500 --> 00:22:09,539
ncat right

533
00:22:09,539 --> 00:22:11,039
um before that I'm just filtering up

534
00:22:11,039 --> 00:22:12,419
upgrade

535
00:22:12,419 --> 00:22:15,720
triggering the iframe upgrade rest API

536
00:22:15,720 --> 00:22:18,840
input has been sent 202 that was very uh

537
00:22:18,840 --> 00:22:22,320
promising upper left to file backup and

538
00:22:22,320 --> 00:22:24,179
ref txt that were just currently being

539
00:22:24,179 --> 00:22:27,360
grabbed and boom we have a reverse shell

540
00:22:27,360 --> 00:22:30,620
on the container

541
00:22:32,760 --> 00:22:35,159
thank you

542
00:22:35,159 --> 00:22:36,299
yeah

543
00:22:36,299 --> 00:22:38,640
you let's let's just talk about cosmics

544
00:22:38,640 --> 00:22:41,059
thank you guys

545
00:22:44,039 --> 00:22:47,640
thank you lidoor so now let's let me

546
00:22:47,640 --> 00:22:49,860
tell you the story of cosmith

547
00:22:49,860 --> 00:22:52,740
so cosmis is a severe vulnerability we

548
00:22:52,740 --> 00:22:55,140
found in Azure Cosmos database as you

549
00:22:55,140 --> 00:22:56,940
might figure out from the name

550
00:22:56,940 --> 00:22:59,520
so let's begin by talking about what is

551
00:22:59,520 --> 00:23:03,480
azure Cosmos database so Cosmos DB is

552
00:23:03,480 --> 00:23:06,000
fully managed non-sql database with high

553
00:23:06,000 --> 00:23:08,039
performance and scalability and you

554
00:23:08,039 --> 00:23:10,440
should know before we begin that it is

555
00:23:10,440 --> 00:23:12,659
widely popular it's widely adopted among

556
00:23:12,659 --> 00:23:15,120
Azure users I guess that our audience

557
00:23:15,120 --> 00:23:18,179
just asking themselves so why so uh

558
00:23:18,179 --> 00:23:20,100
let's say what's so special about

559
00:23:20,100 --> 00:23:22,260
right because it seems like a generic

560
00:23:22,260 --> 00:23:25,440
database among other user other database

561
00:23:25,440 --> 00:23:27,000
that has your health but you want to

562
00:23:27,000 --> 00:23:29,460
explain yes of course so this is a great

563
00:23:29,460 --> 00:23:32,700
point because it is database so it might

564
00:23:32,700 --> 00:23:35,520
contain sensitive data and it is very

565
00:23:35,520 --> 00:23:37,260
popular so if we'll find the

566
00:23:37,260 --> 00:23:39,299
availability the impact will be bigger

567
00:23:39,299 --> 00:23:40,860
but

568
00:23:40,860 --> 00:23:43,500
the main reason that we chose Cosmos DB

569
00:23:43,500 --> 00:23:46,140
as a Target it is because it's fully

570
00:23:46,140 --> 00:23:47,880
managed and by saying fully managed on

571
00:23:47,880 --> 00:23:51,240
the cloud we mean that every

572
00:23:51,240 --> 00:23:53,520
service resource is running on Azure

573
00:23:53,520 --> 00:23:55,440
shared environment and these mystery

574
00:23:55,440 --> 00:23:57,179
environment is shared between different

575
00:23:57,179 --> 00:24:00,299
customers so once you'll be able to find

576
00:24:00,299 --> 00:24:02,460
the survival ability in those in this

577
00:24:02,460 --> 00:24:04,080
mysterious

578
00:24:04,080 --> 00:24:05,460
environment in this mysterious

579
00:24:05,460 --> 00:24:07,620
environment we might be able to jump

580
00:24:07,620 --> 00:24:10,020
between customers and break the basic

581
00:24:10,020 --> 00:24:11,700
and fundamental principle of the cloud

582
00:24:11,700 --> 00:24:14,340
which is tenant isolation and this type

583
00:24:14,340 --> 00:24:16,140
of availability is called

584
00:24:16,140 --> 00:24:19,200
cross tenant vulnerability so we started

585
00:24:19,200 --> 00:24:20,700
playing with the service poking with it

586
00:24:20,700 --> 00:24:23,580
a little bit and pretty quick we found a

587
00:24:23,580 --> 00:24:25,799
feature called Jupiter notebooks and

588
00:24:25,799 --> 00:24:27,240
this feature is an integration an

589
00:24:27,240 --> 00:24:29,700
integration between Cosmos DB two

590
00:24:29,700 --> 00:24:31,500
Jupiter notebooks that you that well

591
00:24:31,500 --> 00:24:34,679
know and the purpose of this integration

592
00:24:34,679 --> 00:24:37,320
is to provide the customer

593
00:24:37,320 --> 00:24:39,240
data cleaning data exploration

594
00:24:39,240 --> 00:24:42,120
capabilities but we looked at it from

595
00:24:42,120 --> 00:24:44,159
another perspective we looked at it as

596
00:24:44,159 --> 00:24:45,780
an opportunity to gain some insight

597
00:24:45,780 --> 00:24:48,419
about this mysterious environment that I

598
00:24:48,419 --> 00:24:49,919
just described

599
00:24:49,919 --> 00:24:52,679
so let's see

600
00:24:52,679 --> 00:24:54,659
we divided the research process for two

601
00:24:54,659 --> 00:24:56,100
first of all

602
00:24:56,100 --> 00:24:58,679
taking a look Deep dive in the internal

603
00:24:58,679 --> 00:25:00,720
infrastructure that I just talked about

604
00:25:00,720 --> 00:25:03,480
just talked about and the second Vector

605
00:25:03,480 --> 00:25:05,460
was to poke with the API to found out to

606
00:25:05,460 --> 00:25:06,600
find out which are the relevant

607
00:25:06,600 --> 00:25:09,059
endpoints maybe intercept some requests

608
00:25:09,059 --> 00:25:10,140
with bird

609
00:25:10,140 --> 00:25:12,120
and to see if we can find the

610
00:25:12,120 --> 00:25:14,580
interesting findings in there also

611
00:25:14,580 --> 00:25:17,700
so without wasting any time we created

612
00:25:17,700 --> 00:25:20,820
Cosmos DB account named Orca Cosmos Dev

613
00:25:20,820 --> 00:25:24,360
and actually you can see here the

614
00:25:24,360 --> 00:25:27,179
notebook that I created and only one

615
00:25:27,179 --> 00:25:29,400
cell was needed because we immediately

616
00:25:29,400 --> 00:25:31,320
triggered a reversal back to our Kali

617
00:25:31,320 --> 00:25:33,779
machine and of course the Kali address

618
00:25:33,779 --> 00:25:36,000
is reducted because we're very very lazy

619
00:25:36,000 --> 00:25:37,320
and we don't want to create another one

620
00:25:37,320 --> 00:25:38,220
later

621
00:25:38,220 --> 00:25:41,279
and of course that we did all Recon

622
00:25:41,279 --> 00:25:42,840
process we searched for suspicious

623
00:25:42,840 --> 00:25:45,179
processes for unusual open ports for

624
00:25:45,179 --> 00:25:47,460
sensitive file etc etc all you can think

625
00:25:47,460 --> 00:25:50,820
of but I think and you might agree with

626
00:25:50,820 --> 00:25:53,159
me that the beauty in costness is that

627
00:25:53,159 --> 00:25:55,260
all you need to know in the internal

628
00:25:55,260 --> 00:25:56,700
infrastructure in the internal

629
00:25:56,700 --> 00:25:59,400
infrastructure side can be presented in

630
00:25:59,400 --> 00:26:02,159
just one slide in this slide so in the

631
00:26:02,159 --> 00:26:04,919
left in the left side you can see

632
00:26:04,919 --> 00:26:06,840
the reversal trigger and in the right

633
00:26:06,840 --> 00:26:09,539
side you can see that the notebook is

634
00:26:09,539 --> 00:26:11,279
running in the cons in the context of a

635
00:26:11,279 --> 00:26:14,039
user called Cosmos user and in its own

636
00:26:14,039 --> 00:26:16,260
directory we can find two different

637
00:26:16,260 --> 00:26:18,539
folders the first one is walk and the

638
00:26:18,539 --> 00:26:20,760
second one is called notebooks and of

639
00:26:20,760 --> 00:26:23,760
course the notebooks directory is is

640
00:26:23,760 --> 00:26:27,179
containing the notebooks themselves you

641
00:26:27,179 --> 00:26:29,340
can see the untitled.ipy and B which is

642
00:26:29,340 --> 00:26:31,860
our notebook so actually this is all you

643
00:26:31,860 --> 00:26:33,179
need to know from the internal

644
00:26:33,179 --> 00:26:35,580
infrastructure side now let's take a

645
00:26:35,580 --> 00:26:37,799
look about the API angle

646
00:26:37,799 --> 00:26:41,220
so once created the DB account a

647
00:26:41,220 --> 00:26:43,200
dedicated endpoint was created of course

648
00:26:43,200 --> 00:26:45,900
and you can see it here okay customers

649
00:26:45,900 --> 00:26:48,059
they have the document Azure com but

650
00:26:48,059 --> 00:26:50,820
when we created the new notebook another

651
00:26:50,820 --> 00:26:53,340
endpoint was created unrecognized to us

652
00:26:53,340 --> 00:26:56,159
at the time called CCR the tools course

653
00:26:56,159 --> 00:26:58,320
of azure com in a randomly generated

654
00:26:58,320 --> 00:27:01,559
Port between 10 000 to 1009 and you can

655
00:27:01,559 --> 00:27:04,260
sear some sort of API slash container

656
00:27:04,260 --> 00:27:06,720
Gateway slash a field called folding ID

657
00:27:06,720 --> 00:27:10,860
which is a uuad4 based string and you

658
00:27:10,860 --> 00:27:12,720
can see that we also got an

659
00:27:12,720 --> 00:27:15,960
authorization token and let's talk a bit

660
00:27:15,960 --> 00:27:18,900
about this authorization token

661
00:27:18,900 --> 00:27:21,600
it might not seems that odd to you but

662
00:27:21,600 --> 00:27:25,020
usually on Azure we use Bureau tokens so

663
00:27:25,020 --> 00:27:27,960
build token is much

664
00:27:27,960 --> 00:27:31,140
shorter it starts with the world video

665
00:27:31,140 --> 00:27:33,840
of course so we immediately

666
00:27:33,840 --> 00:27:36,299
realized that there is some some sort of

667
00:27:36,299 --> 00:27:37,740
integration here some sort of

668
00:27:37,740 --> 00:27:40,200
authorization to a third party so we

669
00:27:40,200 --> 00:27:43,440
thought ourselves how can we maybe leaks

670
00:27:43,440 --> 00:27:46,559
and data get an interesting error and

671
00:27:46,559 --> 00:27:48,659
we decided to meet the other to see what

672
00:27:48,659 --> 00:27:52,140
happens maybe we'll get unusual error

673
00:27:52,140 --> 00:27:54,480
and to our surprise we'll meet it there

674
00:27:54,480 --> 00:27:56,640
as you can see and everything continued

675
00:27:56,640 --> 00:27:58,559
to work

676
00:27:58,559 --> 00:28:01,380
and we were in shock because I just told

677
00:28:01,380 --> 00:28:04,260
you how sensitive the service it might

678
00:28:04,260 --> 00:28:06,779
contain a lot of data and it's very

679
00:28:06,779 --> 00:28:09,000
popular and those notebooks that we're

680
00:28:09,000 --> 00:28:10,799
talking about are directly integrating

681
00:28:10,799 --> 00:28:12,840
to this service and now I'm telling you

682
00:28:12,840 --> 00:28:15,240
that we can read and write to

683
00:28:15,240 --> 00:28:18,600
everybody's notebooks so yes this is

684
00:28:18,600 --> 00:28:20,279
exactly what we're telling you we could

685
00:28:20,279 --> 00:28:22,620
read and write to everybody's notebooks

686
00:28:22,620 --> 00:28:25,919
by just omitting the authorization token

687
00:28:25,919 --> 00:28:27,360
so

688
00:28:27,360 --> 00:28:28,620
of course

689
00:28:28,620 --> 00:28:30,480
that we can only speculate why it

690
00:28:30,480 --> 00:28:33,539
happened but taking a look on this

691
00:28:33,539 --> 00:28:36,240
GitHub before the Jupiter server guitar

692
00:28:36,240 --> 00:28:39,360
people we can notice that by default the

693
00:28:39,360 --> 00:28:41,640
auto the authorization token is not

694
00:28:41,640 --> 00:28:44,580
being validated so what we get that

695
00:28:44,580 --> 00:28:47,340
happened is that Microsoft completed the

696
00:28:47,340 --> 00:28:49,140
integration and it went very well

697
00:28:49,140 --> 00:28:51,840
everything worked but

698
00:28:51,840 --> 00:28:54,720
this flag remained off and actually it

699
00:28:54,720 --> 00:28:56,400
will make a lot of sense when we'll talk

700
00:28:56,400 --> 00:28:58,320
about the patch later

701
00:28:58,320 --> 00:29:00,840
so we have in our hands we do at Gadget

702
00:29:00,840 --> 00:29:02,820
to everybody in the notebook without any

703
00:29:02,820 --> 00:29:05,940
authorization so let's see let's see it

704
00:29:05,940 --> 00:29:07,500
in action

705
00:29:07,500 --> 00:29:10,020
here you can see in the web screen or

706
00:29:10,020 --> 00:29:12,900
put request and I would Mark the

707
00:29:12,900 --> 00:29:16,039
authorization token as well but yeah

708
00:29:16,039 --> 00:29:19,140
we don't need it and you can see that

709
00:29:19,140 --> 00:29:21,380
we're injecting our contents to

710
00:29:21,380 --> 00:29:23,760
untitled.ipy and being notable

711
00:29:23,760 --> 00:29:27,059
and we got 200 okay response it worked

712
00:29:27,059 --> 00:29:30,480
no authorization needed we can do it to

713
00:29:30,480 --> 00:29:32,659
every customer on azure

714
00:29:32,659 --> 00:29:36,720
and actually I can talk I can talk

715
00:29:36,720 --> 00:29:38,279
enough about how the implications are

716
00:29:38,279 --> 00:29:39,059
crazy

717
00:29:39,059 --> 00:29:41,399
but at that moment

718
00:29:41,399 --> 00:29:43,200
we Face a dilemma

719
00:29:43,200 --> 00:29:46,260
we could go out and celebrate and we did

720
00:29:46,260 --> 00:29:49,320
we did we did and it was great but also

721
00:29:49,320 --> 00:29:52,380
we thought how can we take our knowledge

722
00:29:52,380 --> 00:29:54,120
the knowledge that

723
00:29:54,120 --> 00:29:56,159
we already talked about the internal

724
00:29:56,159 --> 00:29:58,559
infrastructure knowledge and I didn't

725
00:29:58,559 --> 00:30:01,080
explain it for nothing and

726
00:30:01,080 --> 00:30:03,480
upgrade the readout gadgets that we just

727
00:30:03,480 --> 00:30:05,700
obtained to remote code execution

728
00:30:05,700 --> 00:30:06,960
exploits

729
00:30:06,960 --> 00:30:09,779
so when facing this type of problem you

730
00:30:09,779 --> 00:30:13,020
usually are looking for a sensitive file

731
00:30:13,020 --> 00:30:14,100
that

732
00:30:14,100 --> 00:30:15,960
that is being automatically triggered

733
00:30:15,960 --> 00:30:18,600
and when you'll be able to override this

734
00:30:18,600 --> 00:30:21,480
file with your malicious payload all you

735
00:30:21,480 --> 00:30:24,120
have to do is just sit down and wait for

736
00:30:24,120 --> 00:30:27,360
the pi for the file to be triggered so

737
00:30:27,360 --> 00:30:29,700
this is exactly what we did

738
00:30:29,700 --> 00:30:33,000
and you can see here that in the path

739
00:30:33,000 --> 00:30:35,159
content flash notebook

740
00:30:35,159 --> 00:30:37,200
is matching to The Notebook directory in

741
00:30:37,200 --> 00:30:38,760
the container that we talked about

742
00:30:38,760 --> 00:30:42,539
earlier so we try to Traverse back and

743
00:30:42,539 --> 00:30:45,059
to override another file I guess that

744
00:30:45,059 --> 00:30:46,679
our audience just asking themselves but

745
00:30:46,679 --> 00:30:48,720
if you manage to overwrite any files

746
00:30:48,720 --> 00:30:51,240
right within the path traversal why did

747
00:30:51,240 --> 00:30:53,460
we even overwrite any SSH keys or Etsy

748
00:30:53,460 --> 00:30:55,679
possibility okay so this is a great

749
00:30:55,679 --> 00:30:58,080
point because if we could do it we

750
00:30:58,080 --> 00:30:59,820
wouldn't presenting here

751
00:30:59,820 --> 00:31:03,179
this complicated path so we tried of

752
00:31:03,179 --> 00:31:05,820
course to overwrite some FSH keys but we

753
00:31:05,820 --> 00:31:07,380
couldn't we've came across some kind of

754
00:31:07,380 --> 00:31:10,919
path validation algorithm so what we did

755
00:31:10,919 --> 00:31:14,460
find out is that we could Traverse all

756
00:31:14,460 --> 00:31:16,380
the way back to the cosmos user home

757
00:31:16,380 --> 00:31:18,659
directory and inside the film directory

758
00:31:18,659 --> 00:31:21,899
we found a folder called dot local and

759
00:31:21,899 --> 00:31:24,480
the Jupiter client was stored in there

760
00:31:24,480 --> 00:31:27,179
and we looked a bit a bit and we found a

761
00:31:27,179 --> 00:31:29,460
wonderful file and the reason that I

762
00:31:29,460 --> 00:31:31,320
call it so wonderful if you're in

763
00:31:31,320 --> 00:31:33,779
respectable file is that because every

764
00:31:33,779 --> 00:31:35,760
time you create a new notebook if you

765
00:31:35,760 --> 00:31:39,299
know expected of Pi file is triggered

766
00:31:39,299 --> 00:31:43,080
so if we're able to fetch kernel spec.pi

767
00:31:43,080 --> 00:31:45,299
file and override it with our malicious

768
00:31:45,299 --> 00:31:48,480
payload for example trigger a reversion

769
00:31:48,480 --> 00:31:51,419
all we need to do now is just sit and

770
00:31:51,419 --> 00:31:54,059
wait to the poor Azure user to log in

771
00:31:54,059 --> 00:31:56,340
and create a new notebook and this is

772
00:31:56,340 --> 00:31:57,360
what we did

773
00:31:57,360 --> 00:31:58,500
so

774
00:31:58,500 --> 00:32:01,020
let's just review the complete workflow

775
00:32:01,020 --> 00:32:04,200
so from nothing from just given

776
00:32:04,200 --> 00:32:05,760
a folding ID

777
00:32:05,760 --> 00:32:07,799
we are in we now married to the port

778
00:32:07,799 --> 00:32:10,919
between 10 000 to 1009 on the CCI

779
00:32:10,919 --> 00:32:13,380
endpoint and once we found the relevant

780
00:32:13,380 --> 00:32:16,440
Port we're fetching and then overriding

781
00:32:16,440 --> 00:32:18,840
kernel spec.pi file with our malicious

782
00:32:18,840 --> 00:32:22,440
reversal trigger and in its turned API

783
00:32:22,440 --> 00:32:23,760
is

784
00:32:23,760 --> 00:32:26,340
is updating the current respect.pi file

785
00:32:26,340 --> 00:32:28,860
on the container file system and now on

786
00:32:28,860 --> 00:32:31,260
where all we have to do is just sit down

787
00:32:31,260 --> 00:32:33,720
relax and wait for a new notebook to be

788
00:32:33,720 --> 00:32:34,740
created

789
00:32:34,740 --> 00:32:38,159
but but nobody is getting Applause for

790
00:32:38,159 --> 00:32:40,500
just an agree diagram so let's let's

791
00:32:40,500 --> 00:32:42,059
take a look a bit

792
00:32:42,059 --> 00:32:44,159
in a video

793
00:32:44,159 --> 00:32:46,620
so here in the left side you can see our

794
00:32:46,620 --> 00:32:51,720
exploit asciologist of course so in the

795
00:32:51,720 --> 00:32:53,700
right side you can see in Ubuntu

796
00:32:53,700 --> 00:32:54,779
listener

797
00:32:54,779 --> 00:32:56,520
so here given

798
00:32:56,520 --> 00:32:59,460
a folding ID we will try to enamorate

799
00:32:59,460 --> 00:33:01,320
the ports from ten thousand two thousand

800
00:33:01,320 --> 00:33:04,440
thousand and nine as I mentioned found

801
00:33:04,440 --> 00:33:07,080
out that 10 000 and one is the relevant

802
00:33:07,080 --> 00:33:10,740
Port now we're trying to override Fetch

803
00:33:10,740 --> 00:33:13,980
and then override qlspects.pi file let's

804
00:33:13,980 --> 00:33:16,919
see if we can do it

805
00:33:16,919 --> 00:33:20,940
great and now all we have to do is wait

806
00:33:20,940 --> 00:33:23,880
for the new notebook to be created and

807
00:33:23,880 --> 00:33:26,100
let's see what happens when the user is

808
00:33:26,100 --> 00:33:29,719
logging in and creating a new notebook

809
00:33:43,200 --> 00:33:45,600
a new notebook created and we got the

810
00:33:45,600 --> 00:33:47,899
shell

811
00:33:52,620 --> 00:33:55,140
thank you

812
00:33:55,140 --> 00:33:57,840
so this is the story of cosmis now some

813
00:33:57,840 --> 00:33:59,460
finite thought about it

814
00:33:59,460 --> 00:34:01,320
first of all we want to say kudos for

815
00:34:01,320 --> 00:34:04,620
the team at msrc for the quick patch in

816
00:34:04,620 --> 00:34:07,080
less than 24 hours they brought a report

817
00:34:07,080 --> 00:34:09,599
analyzed it and fixed it in production

818
00:34:09,599 --> 00:34:12,839
and to our opinion it's crazy and it is

819
00:34:12,839 --> 00:34:15,239
one of the biggest advantages on cloud

820
00:34:15,239 --> 00:34:18,599
and second of all and in my opinion this

821
00:34:18,599 --> 00:34:20,699
is the biggest takeaway from cosmic

822
00:34:20,699 --> 00:34:22,500
story is that

823
00:34:22,500 --> 00:34:24,418
the cloud providers can't do everything

824
00:34:24,418 --> 00:34:26,580
by themselves they have to rely on

825
00:34:26,580 --> 00:34:29,280
integration and disintegrations

826
00:34:29,280 --> 00:34:32,699
might contain a lot of misconfigurations

827
00:34:32,699 --> 00:34:35,399
and a lot of vulnerability and for you

828
00:34:35,399 --> 00:34:37,918
as a security researcher it is a great

829
00:34:37,918 --> 00:34:40,440
place to start your researching so thank

830
00:34:40,440 --> 00:34:41,599
you very much

831
00:34:41,599 --> 00:34:45,200
and have a great night

832
00:34:45,770 --> 00:34:52,779
[Music]

