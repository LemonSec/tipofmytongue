1
00:00:00,000 --> 00:00:08,700
[Music]

2
00:00:09,679 --> 00:00:11,440
thank you

3
00:00:11,440 --> 00:00:13,440
[Music]

4
00:00:13,440 --> 00:00:17,279
all right good good evening blue hat

5
00:00:17,279 --> 00:00:20,580
how's everyone doing yes that's the

6
00:00:20,580 --> 00:00:23,939
spirit we're so excited to be here on

7
00:00:23,939 --> 00:00:26,820
this stage and present our work ring

8
00:00:26,820 --> 00:00:29,880
Hopper hoping from user mode

9
00:00:29,880 --> 00:00:33,180
user space to God mode sorry a bit

10
00:00:33,180 --> 00:00:34,440
excited

11
00:00:34,440 --> 00:00:36,840
but first some notices and disclaimers

12
00:00:36,840 --> 00:00:38,760
from our legal team thank you little

13
00:00:38,760 --> 00:00:39,960
girls team

14
00:00:39,960 --> 00:00:43,200
and let's Dive In

15
00:00:43,200 --> 00:00:45,710
so

16
00:00:45,710 --> 00:00:47,879
[Applause]

17
00:00:47,879 --> 00:00:50,340
we will tell the story of how we

18
00:00:50,340 --> 00:00:53,760
obtained right Primitives how we hopped

19
00:00:53,760 --> 00:00:56,219
into a privileged mode and acquired

20
00:00:56,219 --> 00:01:00,600
almost a total world domination

21
00:01:00,600 --> 00:01:02,820
first some background at the beginning

22
00:01:02,820 --> 00:01:06,240
there were four privilege Rings the most

23
00:01:06,240 --> 00:01:09,299
noticeable of those are the user mode or

24
00:01:09,299 --> 00:01:12,180
user land or user space it goes by many

25
00:01:12,180 --> 00:01:13,680
names

26
00:01:13,680 --> 00:01:16,680
and the kernel the lower the number of

27
00:01:16,680 --> 00:01:19,680
the ring the more privileges it has and

28
00:01:19,680 --> 00:01:21,780
it's rather opaque to all of the Rings

29
00:01:21,780 --> 00:01:24,720
above it for instance the user mode has

30
00:01:24,720 --> 00:01:27,780
no notion whatsoever of what's going on

31
00:01:27,780 --> 00:01:29,520
in the kernel

32
00:01:29,520 --> 00:01:32,280
over the years new Rings were added the

33
00:01:32,280 --> 00:01:35,820
hypervisor of the vmm or ring -1 and the

34
00:01:35,820 --> 00:01:39,360
smm let's talk about the smm

35
00:01:39,360 --> 00:01:43,020
it stands for system management mode and

36
00:01:43,020 --> 00:01:45,720
at the beginning it was created as a

37
00:01:45,720 --> 00:01:48,000
small and humble processor operating

38
00:01:48,000 --> 00:01:50,460
mode that provides some low-level

39
00:01:50,460 --> 00:01:52,860
functionalities mostly like power

40
00:01:52,860 --> 00:01:55,619
management and system Hardware control

41
00:01:55,619 --> 00:01:59,000
and oems ran their

42
00:01:59,000 --> 00:02:03,479
platform specific code there

43
00:02:03,479 --> 00:02:05,939
yeah and it's rather privileged so it's

44
00:02:05,939 --> 00:02:08,818
transparent both to the OS hypervisor

45
00:02:08,818 --> 00:02:11,160
and Etc

46
00:02:11,160 --> 00:02:15,000
over the years the smm grew bigger and

47
00:02:15,000 --> 00:02:17,459
bigger and eventually it became a

48
00:02:17,459 --> 00:02:19,980
monstrosity that implements a wide range

49
00:02:19,980 --> 00:02:22,379
of functionalities like handling USB

50
00:02:22,379 --> 00:02:25,200
events and Boot and runtime and exposing

51
00:02:25,200 --> 00:02:27,720
some functionalities related to the

52
00:02:27,720 --> 00:02:30,239
system management bios and the list is

53
00:02:30,239 --> 00:02:31,800
long

54
00:02:31,800 --> 00:02:34,319
so together with the smm grew the attack

55
00:02:34,319 --> 00:02:36,480
vector and

56
00:02:36,480 --> 00:02:38,640
the will of the attackers to attack the

57
00:02:38,640 --> 00:02:41,400
smm but this is fine

58
00:02:41,400 --> 00:02:44,099
because over the years

59
00:02:44,099 --> 00:02:48,540
lots of msrs and registers were created

60
00:02:48,540 --> 00:02:52,200
with the sole purpose to keep the smm

61
00:02:52,200 --> 00:02:54,420
safe

62
00:02:54,420 --> 00:02:57,180
in order to switch to smm the kernel has

63
00:02:57,180 --> 00:03:00,420
to trigger a special kind of interrupt a

64
00:03:00,420 --> 00:03:02,760
system management interrupt or SMI for

65
00:03:02,760 --> 00:03:06,900
short once this interrupt is triggered

66
00:03:06,900 --> 00:03:10,920
the the processor switches to smm and

67
00:03:10,920 --> 00:03:13,440
like with any other interrupt there is a

68
00:03:13,440 --> 00:03:17,400
Handler corresponding to uh this

69
00:03:17,400 --> 00:03:19,800
interrupts number in our case it's the

70
00:03:19,800 --> 00:03:22,500
SMI Handler once the SMI Handler is done

71
00:03:22,500 --> 00:03:26,040
handling uh the SMI the processor

72
00:03:26,040 --> 00:03:29,340
switches back to the kernel

73
00:03:29,340 --> 00:03:33,060
so smm is a rather territorial mode it

74
00:03:33,060 --> 00:03:35,760
has its own well-guarded portion of the

75
00:03:35,760 --> 00:03:39,720
ram called smram system management Ram

76
00:03:39,720 --> 00:03:43,260
while all the other entities have no

77
00:03:43,260 --> 00:03:46,920
notion whatsoever of what's going on in

78
00:03:46,920 --> 00:03:50,519
the smram for instance if the kernel

79
00:03:50,519 --> 00:03:54,120
tries to read something from the SM ROM

80
00:03:54,120 --> 00:03:56,700
it will get a bunch of the fifth

81
00:03:56,700 --> 00:03:59,580
so now that we know how to switch this

82
00:03:59,580 --> 00:04:02,040
now let's talk a little bit about how we

83
00:04:02,040 --> 00:04:03,599
communicate with it

84
00:04:03,599 --> 00:04:06,780
so whenever an SMI is triggered the

85
00:04:06,780 --> 00:04:09,480
state of the CPU is saved to a special

86
00:04:09,480 --> 00:04:12,659
place in the smram called the safe state

87
00:04:12,659 --> 00:04:16,500
it contains a lot of things but will for

88
00:04:16,500 --> 00:04:19,380
now focus on the general purpose

89
00:04:19,380 --> 00:04:22,500
registers and in particular the values

90
00:04:22,500 --> 00:04:25,380
the general purpose registers had prior

91
00:04:25,380 --> 00:04:28,259
to entering the smm

92
00:04:28,259 --> 00:04:32,460
we saw that many many bios vendors use

93
00:04:32,460 --> 00:04:35,040
one or more of the general purpose

94
00:04:35,040 --> 00:04:38,880
registers to point to to a buffer that

95
00:04:38,880 --> 00:04:41,820
is accessible from both ring 0 the

96
00:04:41,820 --> 00:04:44,699
kernel and the smm and use it as a

97
00:04:44,699 --> 00:04:47,520
medium to transfer data to and from the

98
00:04:47,520 --> 00:04:49,919
smm

99
00:04:49,919 --> 00:04:52,199
so at the top we have the user space

100
00:04:52,199 --> 00:04:54,419
under that we have the kernel running

101
00:04:54,419 --> 00:04:57,840
and at the bottom of the iceberg we have

102
00:04:57,840 --> 00:05:00,960
the smm in other words if you are an

103
00:05:00,960 --> 00:05:02,880
attacker and you are

104
00:05:02,880 --> 00:05:05,880
smm is where you want to be you can

105
00:05:05,880 --> 00:05:08,220
break the platform still sensitive

106
00:05:08,220 --> 00:05:11,759
information evade practically any OS and

107
00:05:11,759 --> 00:05:13,800
vmm level security

108
00:05:13,800 --> 00:05:17,040
potentially install a boot kit disable

109
00:05:17,040 --> 00:05:20,940
secure Boot and the list is long

110
00:05:20,940 --> 00:05:24,900
so what we did is we Dove to the bottom

111
00:05:24,900 --> 00:05:28,139
of the iceberg or shall I say hopped we

112
00:05:28,139 --> 00:05:30,780
started with an agent running in user

113
00:05:30,780 --> 00:05:31,560
mode

114
00:05:31,560 --> 00:05:35,400
hopped to the kernel and from there to

115
00:05:35,400 --> 00:05:36,840
the smm

116
00:05:36,840 --> 00:05:39,780
and we did all that on the this Intel

117
00:05:39,780 --> 00:05:40,620
knock

118
00:05:40,620 --> 00:05:43,139
the one you see there

119
00:05:43,139 --> 00:05:47,340
and eventually we found out that this

120
00:05:47,340 --> 00:05:52,199
research goes Way Way Beyond this poor

121
00:05:52,199 --> 00:05:54,479
little fella

122
00:05:54,479 --> 00:05:58,440
all right so now let's talk a little bit

123
00:05:58,440 --> 00:06:01,199
about our findings and we'll start with

124
00:06:01,199 --> 00:06:02,759
a small recap of what is the time of

125
00:06:02,759 --> 00:06:04,500
check time of Year's vulnerability

126
00:06:04,500 --> 00:06:07,680
so let's say we are smm and one of the

127
00:06:07,680 --> 00:06:09,240
services we provide to the operating

128
00:06:09,240 --> 00:06:11,639
system is a coffee service who doesn't

129
00:06:11,639 --> 00:06:12,780
like coffee

130
00:06:12,780 --> 00:06:15,419
so the first things that we start with

131
00:06:15,419 --> 00:06:17,520
is getting some buffer from the

132
00:06:17,520 --> 00:06:19,919
operating system and since we do not

133
00:06:19,919 --> 00:06:21,960
trust above the operating system we must

134
00:06:21,960 --> 00:06:23,759
validate these buffers that it points to

135
00:06:23,759 --> 00:06:25,860
a valid location this will be the time

136
00:06:25,860 --> 00:06:26,940
of check

137
00:06:26,940 --> 00:06:29,819
once it was validated we can use it and

138
00:06:29,819 --> 00:06:31,740
override its content with the value of

139
00:06:31,740 --> 00:06:34,080
coffee this will be the time of use

140
00:06:34,080 --> 00:06:36,539
as an attackers we will try to modify

141
00:06:36,539 --> 00:06:38,580
the data in between such that it will

142
00:06:38,580 --> 00:06:40,919
place somewhere else and by doing so we

143
00:06:40,919 --> 00:06:42,479
will again our right Primitives of the

144
00:06:42,479 --> 00:06:44,580
value coffee so let's see a small

145
00:06:44,580 --> 00:06:46,560
diagram let's say we have an input

146
00:06:46,560 --> 00:06:48,900
buffer and inside a simple buffer we

147
00:06:48,900 --> 00:06:51,360
have a pointer to the output buffer

148
00:06:51,360 --> 00:06:54,300
in a normal scenario SSM will simply

149
00:06:54,300 --> 00:06:56,220
override the content of it with the

150
00:06:56,220 --> 00:06:58,560
value coffee obviously this buffer will

151
00:06:58,560 --> 00:07:00,720
be located outside the smram

152
00:07:00,720 --> 00:07:03,720
but if we are an attackers we'll try to

153
00:07:03,720 --> 00:07:07,319
redirect this address to the smram and

154
00:07:07,319 --> 00:07:09,539
by doing so gain a right primitive of

155
00:07:09,539 --> 00:07:11,639
the value coffee to the smram

156
00:07:11,639 --> 00:07:13,680
so let's see the actual vulnerable

157
00:07:13,680 --> 00:07:16,860
coffee SMI Handler so we begin by

158
00:07:16,860 --> 00:07:19,380
reading the Save State remember this is

159
00:07:19,380 --> 00:07:21,780
the way for us to access the the input

160
00:07:21,780 --> 00:07:23,819
itself and to be more precise we access

161
00:07:23,819 --> 00:07:25,979
one of the general purpose registers the

162
00:07:25,979 --> 00:07:27,060
arabics

163
00:07:27,060 --> 00:07:30,000
then once we got the input buffer we

164
00:07:30,000 --> 00:07:32,099
exit its contents which is the output

165
00:07:32,099 --> 00:07:35,280
buffer remember then we check it

166
00:07:35,280 --> 00:07:39,180
obviously and we read this address once

167
00:07:39,180 --> 00:07:40,560
again that is stored inside the input

168
00:07:40,560 --> 00:07:43,680
buffer and to override it with the value

169
00:07:43,680 --> 00:07:44,819
of coffee

170
00:07:44,819 --> 00:07:47,580
this is the time of yours and like we

171
00:07:47,580 --> 00:07:49,199
already said we'll try to modify the

172
00:07:49,199 --> 00:07:50,880
data in between

173
00:07:50,880 --> 00:07:53,280
okay so how do we exploit such as such a

174
00:07:53,280 --> 00:07:54,720
time of check time of use vulnerability

175
00:07:54,720 --> 00:07:58,020
in a classic scenario let's uh say we

176
00:07:58,020 --> 00:07:59,099
have a platform with four different

177
00:07:59,099 --> 00:08:01,199
cores and let's say that the first chord

178
00:08:01,199 --> 00:08:03,660
as the critical SMI handling that's the

179
00:08:03,660 --> 00:08:06,180
validation and usage So within the other

180
00:08:06,180 --> 00:08:07,919
course we may try to corrupt the data

181
00:08:07,919 --> 00:08:09,720
sometimes we may do this before the

182
00:08:09,720 --> 00:08:12,419
validation and if so nothing will happen

183
00:08:12,419 --> 00:08:14,340
right it simply will not pass the

184
00:08:14,340 --> 00:08:16,440
validation sometimes we need to do this

185
00:08:16,440 --> 00:08:19,020
after the usage and again nothing will

186
00:08:19,020 --> 00:08:20,940
happen but eventually we're going to hit

187
00:08:20,940 --> 00:08:22,740
the right time and corrupt the data

188
00:08:22,740 --> 00:08:24,900
between the validation and usage by

189
00:08:24,900 --> 00:08:26,879
doing so we will be able to explore the

190
00:08:26,879 --> 00:08:30,720
issue however once an accord enters smm

191
00:08:30,720 --> 00:08:32,940
meaning guest Mi was triggered all the

192
00:08:32,940 --> 00:08:34,679
cores are going idle and we cannot use

193
00:08:34,679 --> 00:08:37,320
them to modify the data so at this point

194
00:08:37,320 --> 00:08:39,479
we got a little bit frustrated and we

195
00:08:39,479 --> 00:08:41,640
thought what is still alive even though

196
00:08:41,640 --> 00:08:43,440
we are at smm

197
00:08:43,440 --> 00:08:46,500
and the answer was dma dma stands for

198
00:08:46,500 --> 00:08:48,839
direct memory access this is the way for

199
00:08:48,839 --> 00:08:51,300
peripheral to access the the platform's

200
00:08:51,300 --> 00:08:54,060
memory and basically to return data by

201
00:08:54,060 --> 00:08:56,580
saying peripheral devices I mean your

202
00:08:56,580 --> 00:08:59,700
GPU your network interface card or your

203
00:08:59,700 --> 00:09:02,240
storage device

204
00:09:02,360 --> 00:09:05,160
we took something that is called PCI LH

205
00:09:05,160 --> 00:09:07,800
it's a cool project by old Frisk and

206
00:09:07,800 --> 00:09:10,080
this is the small red fpga device that

207
00:09:10,080 --> 00:09:12,060
you see here and it allows to trigger

208
00:09:12,060 --> 00:09:14,040
arbitrary read and write transactions to

209
00:09:14,040 --> 00:09:15,240
the

210
00:09:15,240 --> 00:09:17,760
using it we were able to explore this

211
00:09:17,760 --> 00:09:19,260
time of check time for this issue which

212
00:09:19,260 --> 00:09:21,540
was very cool but some of you may say

213
00:09:21,540 --> 00:09:23,640
you know what it requires physical

214
00:09:23,640 --> 00:09:25,740
access to the Target it's only an evil

215
00:09:25,740 --> 00:09:28,260
made attack at best you can call it the

216
00:09:28,260 --> 00:09:30,240
supply chain attack and with Fatso as

217
00:09:30,240 --> 00:09:30,959
well

218
00:09:30,959 --> 00:09:33,300
so we'll delete something utilize

219
00:09:33,300 --> 00:09:35,160
something that exists on every platform

220
00:09:35,160 --> 00:09:36,779
your hard drive

221
00:09:36,779 --> 00:09:39,060
to be more precise we use the technique

222
00:09:39,060 --> 00:09:41,399
by Rafael walshuks was presented a

223
00:09:41,399 --> 00:09:44,040
couple of years ago and using this

224
00:09:44,040 --> 00:09:45,959
technique we were able to manipulate dma

225
00:09:45,959 --> 00:09:47,880
transactions from your storage device

226
00:09:47,880 --> 00:09:50,420
the hard drive back to the to the RAM

227
00:09:50,420 --> 00:09:53,459
and by doing so to exploit this time of

228
00:09:53,459 --> 00:09:56,160
check time of usual narrow buildings

229
00:09:56,160 --> 00:09:58,740
so remember the previous diagram now we

230
00:09:58,740 --> 00:10:01,140
had another component to the equation we

231
00:10:01,140 --> 00:10:03,240
had the storage device and on top of it

232
00:10:03,240 --> 00:10:05,100
we place a malicious file

233
00:10:05,100 --> 00:10:08,700
so we begin by making a read request to

234
00:10:08,700 --> 00:10:10,740
the storage device the radio request

235
00:10:10,740 --> 00:10:12,360
goes to the storage device the hard

236
00:10:12,360 --> 00:10:14,220
drive and the hard drive start

237
00:10:14,220 --> 00:10:16,860
processing the request remember once we

238
00:10:16,860 --> 00:10:18,720
read a file it doesn't immediately comes

239
00:10:18,720 --> 00:10:20,700
back to us it takes some time to process

240
00:10:20,700 --> 00:10:22,080
the request

241
00:10:22,080 --> 00:10:26,640
then once once once the request started

242
00:10:26,640 --> 00:10:29,519
processing we made a hook inside a

243
00:10:29,519 --> 00:10:32,820
kernel which manipulated the dma request

244
00:10:32,820 --> 00:10:34,740
such that it will be redirected to our

245
00:10:34,740 --> 00:10:37,140
input buffer then

246
00:10:37,140 --> 00:10:39,660
we trigger an SMI all the cores are

247
00:10:39,660 --> 00:10:41,700
going idle remember

248
00:10:41,700 --> 00:10:44,640
the SMI handling enters the critical

249
00:10:44,640 --> 00:10:47,519
validation and usage phases and with

250
00:10:47,519 --> 00:10:49,620
some luck the data will be returned in

251
00:10:49,620 --> 00:10:51,000
the right time between the validation

252
00:10:51,000 --> 00:10:53,339
and usage and will allow us to exploit

253
00:10:53,339 --> 00:10:55,920
the issue we were able when we actually

254
00:10:55,920 --> 00:10:57,959
able to explore this issue which was

255
00:10:57,959 --> 00:11:00,420
super cool

256
00:11:00,420 --> 00:11:03,300
um all right so not let a small recap of

257
00:11:03,300 --> 00:11:05,880
what we did so far we discussed what is

258
00:11:05,880 --> 00:11:07,800
smm and how we can communicate with it

259
00:11:07,800 --> 00:11:10,079
we also discussed what our time of check

260
00:11:10,079 --> 00:11:12,120
time of use issues and how we can

261
00:11:12,120 --> 00:11:13,980
convert them into red Primitives to the

262
00:11:13,980 --> 00:11:15,000
smram

263
00:11:15,000 --> 00:11:16,860
finally we discussed how we can

264
00:11:16,860 --> 00:11:19,260
manipulate dma transactions such as it

265
00:11:19,260 --> 00:11:21,959
will they will be able will help us to

266
00:11:21,959 --> 00:11:23,880
explore this time of check time of user

267
00:11:23,880 --> 00:11:25,980
issues and we also discussed how to

268
00:11:25,980 --> 00:11:28,740
execute God inside smm okay not yet

269
00:11:28,740 --> 00:11:34,440
Benny all right so we got the ability to

270
00:11:34,440 --> 00:11:37,260
write to the SM Ram let's do something

271
00:11:37,260 --> 00:11:39,839
useful with that

272
00:11:39,839 --> 00:11:43,260
one of the modules we analyzed was the

273
00:11:43,260 --> 00:11:46,380
SM bios DMI edit driver

274
00:11:46,380 --> 00:11:49,560
it's responsible for various tasks

275
00:11:49,560 --> 00:11:51,899
related to system management bias that

276
00:11:51,899 --> 00:11:56,160
we previously talked about and our

277
00:11:56,160 --> 00:11:59,220
analysis was not in vain we found some

278
00:11:59,220 --> 00:12:01,680
potential right Primitives

279
00:12:01,680 --> 00:12:05,220
it's worth noting that this list is not

280
00:12:05,220 --> 00:12:08,220
exhaustive and this is far from being

281
00:12:08,220 --> 00:12:11,640
the only vulnerable module

282
00:12:11,640 --> 00:12:14,820
however this will be our ammunition for

283
00:12:14,820 --> 00:12:19,860
executing code in smm I'm excited

284
00:12:19,860 --> 00:12:22,079
so you get a bunch of right Primitives

285
00:12:22,079 --> 00:12:25,019
in the classic approach you you try to

286
00:12:25,019 --> 00:12:27,899
find probably an executable memory

287
00:12:27,899 --> 00:12:29,279
region

288
00:12:29,279 --> 00:12:32,100
we try it as well but the smm has a

289
00:12:32,100 --> 00:12:34,920
static page table where all the pages

290
00:12:34,920 --> 00:12:38,160
with code are read only and all pages

291
00:12:38,160 --> 00:12:42,000
containing data are non-executable

292
00:12:42,000 --> 00:12:44,399
in a classic approach you would try to

293
00:12:44,399 --> 00:12:48,600
forge an arbitrary payload and here even

294
00:12:48,600 --> 00:12:51,300
though we have a few right Primitives

295
00:12:51,300 --> 00:12:53,940
their number and variety does not really

296
00:12:53,940 --> 00:12:56,880
let us craft anything decent

297
00:12:56,880 --> 00:12:59,459
and lastly you would strive to get

298
00:12:59,459 --> 00:13:03,060
unrestricted memory access and here once

299
00:13:03,060 --> 00:13:06,480
again the smls page table hinders our

300
00:13:06,480 --> 00:13:08,940
exploitation

301
00:13:08,940 --> 00:13:12,060
so it appears that most of the non-sm

302
00:13:12,060 --> 00:13:16,800
ram is simply not mapped into the smms

303
00:13:16,800 --> 00:13:20,220
page table what's even more annoying is

304
00:13:20,220 --> 00:13:24,060
it the page table resides in read-only

305
00:13:24,060 --> 00:13:27,360
Pages meaning that new pages cannot be

306
00:13:27,360 --> 00:13:31,200
allocated and all the properties and

307
00:13:31,200 --> 00:13:35,399
attributes are permanent so even if we

308
00:13:35,399 --> 00:13:36,660
could

309
00:13:36,660 --> 00:13:39,839
somehow execute code in smm it would be

310
00:13:39,839 --> 00:13:42,300
very hard to do something interesting to

311
00:13:42,300 --> 00:13:45,899
for instance the OS not impossible but

312
00:13:45,899 --> 00:13:47,880
hard

313
00:13:47,880 --> 00:13:50,760
so as you're probably all convinced

314
00:13:50,760 --> 00:13:53,579
a classic approach might not be very

315
00:13:53,579 --> 00:13:55,680
applicable here

316
00:13:55,680 --> 00:13:58,079
so let's

317
00:13:58,079 --> 00:14:00,180
think a little bit out of the box and

318
00:14:00,180 --> 00:14:03,360
try to leverage some unique and internal

319
00:14:03,360 --> 00:14:06,360
mechanisms to the smm

320
00:14:06,360 --> 00:14:09,000
which brings us to the actual code

321
00:14:09,000 --> 00:14:11,459
execution but first as usual some

322
00:14:11,459 --> 00:14:12,839
background

323
00:14:12,839 --> 00:14:16,260
so here's the smram each core has a

324
00:14:16,260 --> 00:14:19,139
designated region in the smram it is

325
00:14:19,139 --> 00:14:22,079
pointed to by the SM based MSR each core

326
00:14:22,079 --> 00:14:27,360
has an MSR of its own if we zoom in into

327
00:14:27,360 --> 00:14:29,579
one of these regions we'll see a bunch

328
00:14:29,579 --> 00:14:31,560
of interesting things but we'll focus on

329
00:14:31,560 --> 00:14:35,279
two the Save State the state of the CPU

330
00:14:35,279 --> 00:14:37,980
prior to entering smm

331
00:14:37,980 --> 00:14:40,860
and the smihandler entry point which is

332
00:14:40,860 --> 00:14:43,199
the first code that would be executed

333
00:14:43,199 --> 00:14:46,860
once you enter smm

334
00:14:46,860 --> 00:14:49,800
yes it's written there so it's true

335
00:14:49,800 --> 00:14:50,519
um

336
00:14:50,519 --> 00:14:53,699
so we saw that the sage state has the

337
00:14:53,699 --> 00:14:55,440
general purpose registers but it

338
00:14:55,440 --> 00:14:58,320
contains so much more for instance it

339
00:14:58,320 --> 00:15:02,220
contains the value of the SM based MSR

340
00:15:02,220 --> 00:15:04,560
what is even more interesting that the

341
00:15:04,560 --> 00:15:07,920
proper way to modify this MSR is by

342
00:15:07,920 --> 00:15:12,360
writing to the to its value stored in

343
00:15:12,360 --> 00:15:15,660
the save State and this operation is

344
00:15:15,660 --> 00:15:18,720
pretty special how special is it it's so

345
00:15:18,720 --> 00:15:21,000
special that it has a name it's called

346
00:15:21,000 --> 00:15:23,639
SM based relocation

347
00:15:23,639 --> 00:15:26,100
from the developer's point of view

348
00:15:26,100 --> 00:15:29,160
it's pretty straightforward they simply

349
00:15:29,160 --> 00:15:32,399
modify the SM based value in the save

350
00:15:32,399 --> 00:15:35,579
State and some magic behind the scenes

351
00:15:35,579 --> 00:15:38,100
though does the SM based relocation and

352
00:15:38,100 --> 00:15:41,699
points it to the new location

353
00:15:41,699 --> 00:15:43,920
which brings us to the actual attack

354
00:15:43,920 --> 00:15:45,420
idea

355
00:15:45,420 --> 00:15:47,100
so let's

356
00:15:47,100 --> 00:15:49,139
create some

357
00:15:49,139 --> 00:15:51,540
memory region that is accessible from

358
00:15:51,540 --> 00:15:54,660
both kernel and the smm

359
00:15:54,660 --> 00:15:58,740
and there we will create our own fully

360
00:15:58,740 --> 00:16:01,920
controlled SMI Handler entry point which

361
00:16:01,920 --> 00:16:04,320
is the first code that would be executed

362
00:16:04,320 --> 00:16:06,959
upon entering smm

363
00:16:06,959 --> 00:16:09,959
then we plan to use our right primitive

364
00:16:09,959 --> 00:16:13,139
to modify the SM based value in the save

365
00:16:13,139 --> 00:16:15,720
state to point to our newly created

366
00:16:15,720 --> 00:16:18,959
region this way we will trigger an SM

367
00:16:18,959 --> 00:16:21,000
based relocation

368
00:16:21,000 --> 00:16:24,660
and it will pave the path towards code

369
00:16:24,660 --> 00:16:27,300
execution in smm

370
00:16:27,300 --> 00:16:29,760
oh what a thrill

371
00:16:29,760 --> 00:16:31,860
but it doesn't work

372
00:16:31,860 --> 00:16:33,899
at least not out of the box

373
00:16:33,899 --> 00:16:36,660
and it doesn't work because of or I'd

374
00:16:36,660 --> 00:16:42,180
rather say thanks to the smm feature

375
00:16:42,180 --> 00:16:45,720
control MSR sorry

376
00:16:45,720 --> 00:16:47,880
and in particular

377
00:16:47,880 --> 00:16:50,699
this nasty little bit the smm code check

378
00:16:50,699 --> 00:16:54,480
enable bit so whenever this bit is set

379
00:16:54,480 --> 00:16:57,600
and your running code in smm and you try

380
00:16:57,600 --> 00:17:00,660
to execute code outside of the SM ROM

381
00:17:00,660 --> 00:17:03,060
you simply get an exception

382
00:17:03,060 --> 00:17:05,160
and if that's not enough there is a log

383
00:17:05,160 --> 00:17:09,500
bit which means that this MSR cannot be

384
00:17:09,500 --> 00:17:13,260
modified or changed in any way until the

385
00:17:13,260 --> 00:17:16,020
next reboot and well

386
00:17:16,020 --> 00:17:19,140
rebooting the machine or cutting down

387
00:17:19,140 --> 00:17:21,540
the power to the CPU kinda defeats our

388
00:17:21,540 --> 00:17:25,140
purpose so Johnson and I said and

389
00:17:25,140 --> 00:17:27,780
thought what could be the closest thing

390
00:17:27,780 --> 00:17:29,880
to rebooting the machine

391
00:17:29,880 --> 00:17:32,040
and then it hit us

392
00:17:32,040 --> 00:17:34,860
which will put the machine to sleep and

393
00:17:34,860 --> 00:17:37,919
in particular to S3

394
00:17:37,919 --> 00:17:41,400
which is a Nifty State where the what

395
00:17:41,400 --> 00:17:43,620
the processor is Idle but the system

396
00:17:43,620 --> 00:17:46,860
memory keeps on working and as the

397
00:17:46,860 --> 00:17:49,679
processor gets no power all the

398
00:17:49,679 --> 00:17:51,900
interesting things there for instance

399
00:17:51,900 --> 00:17:55,020
the msrs are simply zeroed out

400
00:17:55,020 --> 00:17:57,660
and if you care about your msrs and you

401
00:17:57,660 --> 00:17:58,679
do

402
00:17:58,679 --> 00:18:02,460
you you can simply just before you put

403
00:18:02,460 --> 00:18:05,700
your machine to sleep copy those msrs to

404
00:18:05,700 --> 00:18:08,520
the memory and once you're back from

405
00:18:08,520 --> 00:18:11,340
sleep copy them back

406
00:18:11,340 --> 00:18:13,860
so let's have a look at our at the state

407
00:18:13,860 --> 00:18:17,640
of our beloved smm code check enable bit

408
00:18:17,640 --> 00:18:20,580
in normal execution it is set

409
00:18:20,580 --> 00:18:24,539
when we go into S3 it is still set when

410
00:18:24,539 --> 00:18:27,900
we come back from S3 when the CPU got no

411
00:18:27,900 --> 00:18:28,740
power

412
00:18:28,740 --> 00:18:31,799
its value is cleared and at the very

413
00:18:31,799 --> 00:18:35,940
very early stage at returning from sleep

414
00:18:35,940 --> 00:18:39,120
there is some initialization code that

415
00:18:39,120 --> 00:18:40,740
turns it back on

416
00:18:40,740 --> 00:18:43,380
so let's zoom in and have a look at this

417
00:18:43,380 --> 00:18:45,960
code so here's the function that is part

418
00:18:45,960 --> 00:18:49,200
of the S3 resume path the path that is

419
00:18:49,200 --> 00:18:52,860
executed when your computer wakes up

420
00:18:52,860 --> 00:18:55,380
so here we have the actual

421
00:18:55,380 --> 00:18:59,340
right to to the MSR with a certain value

422
00:18:59,340 --> 00:19:01,620
that comes from the ram

423
00:19:01,620 --> 00:19:05,880
and what's interesting here is that it's

424
00:19:05,880 --> 00:19:08,880
inside an if statement

425
00:19:08,880 --> 00:19:12,360
and if the condition does not hold this

426
00:19:12,360 --> 00:19:17,340
MSR is simply zero and in particular if

427
00:19:17,340 --> 00:19:20,160
the MSM feature control supported Global

428
00:19:20,160 --> 00:19:23,100
variable is zero

429
00:19:23,100 --> 00:19:25,860
then this mitigation will not be set

430
00:19:25,860 --> 00:19:27,960
remember that we have a right primitive

431
00:19:27,960 --> 00:19:31,080
to the smram to where the variable this

432
00:19:31,080 --> 00:19:32,940
variable is located

433
00:19:32,940 --> 00:19:36,780
which brings us to the full recipe of

434
00:19:36,780 --> 00:19:40,679
code execution in smm from ring 0.

435
00:19:40,679 --> 00:19:44,220
so first we set the value of the MFM

436
00:19:44,220 --> 00:19:47,340
feature control supported to zero using

437
00:19:47,340 --> 00:19:50,580
one of our lovely right Primitives then

438
00:19:50,580 --> 00:19:53,400
we put the machine to sleep wake it up

439
00:19:53,400 --> 00:19:55,740
at this point the function you

440
00:19:55,740 --> 00:19:58,860
previously saw is executed

441
00:19:58,860 --> 00:20:01,740
the if statement the the condition in

442
00:20:01,740 --> 00:20:03,720
this statement does not hold meaning

443
00:20:03,720 --> 00:20:07,679
this mitigation simply is not turned on

444
00:20:07,679 --> 00:20:13,020
then we create our own region in a in a

445
00:20:13,020 --> 00:20:15,179
region of memory that is accessible from

446
00:20:15,179 --> 00:20:19,140
both ring 0 and smm and then we create

447
00:20:19,140 --> 00:20:22,080
our own fully controlled SMI Handler

448
00:20:22,080 --> 00:20:23,340
entry point

449
00:20:23,340 --> 00:20:26,160
which if you recall is the first code

450
00:20:26,160 --> 00:20:29,580
executed upon entering smm

451
00:20:29,580 --> 00:20:32,340
then we use our right Primitives once

452
00:20:32,340 --> 00:20:34,799
more to do NSM base relocation so that

453
00:20:34,799 --> 00:20:36,840
it would relocate to the previously

454
00:20:36,840 --> 00:20:38,460
created memory

455
00:20:38,460 --> 00:20:42,360
we trigger an SMI and drumroll please

456
00:20:42,360 --> 00:20:44,960
we have code execution in sm

457
00:20:44,960 --> 00:20:48,200
all right

458
00:20:48,960 --> 00:20:50,820
so

459
00:20:50,820 --> 00:20:54,059
Frankly Speaking this method is awesome

460
00:20:54,059 --> 00:20:57,299
but it gets even better

461
00:20:57,299 --> 00:21:00,240
so the SMI Handler entry point

462
00:21:00,240 --> 00:21:02,760
actually starts running in real mode

463
00:21:02,760 --> 00:21:05,220
which means there is no page table

464
00:21:05,220 --> 00:21:07,320
restrictions whatsoever because well

465
00:21:07,320 --> 00:21:09,360
there is no page table

466
00:21:09,360 --> 00:21:12,419
and what's even more funny is that the

467
00:21:12,419 --> 00:21:15,299
entity that is responsible to setting up

468
00:21:15,299 --> 00:21:17,340
the cr3 register

469
00:21:17,340 --> 00:21:19,980
which points to the page table is our

470
00:21:19,980 --> 00:21:22,260
SMI Handler entry point which we fully

471
00:21:22,260 --> 00:21:25,799
control and as we crafted our own SMI

472
00:21:25,799 --> 00:21:28,679
Handler entry point we have unrestricted

473
00:21:28,679 --> 00:21:32,280
access to anything even read-only pages

474
00:21:32,280 --> 00:21:33,780
in The smram

475
00:21:33,780 --> 00:21:36,900
so we don't mind read-only memory we

476
00:21:36,900 --> 00:21:39,600
don't mind non-executable memory as a

477
00:21:39,600 --> 00:21:42,240
matter of fact we don't mind the smm

478
00:21:42,240 --> 00:21:45,780
static paging or the hip guard or any of

479
00:21:45,780 --> 00:21:48,840
these mitigations on this list

480
00:21:48,840 --> 00:21:50,580
well

481
00:21:50,580 --> 00:21:53,600
you know there is an ancient proverb

482
00:21:53,600 --> 00:21:58,500
that states that a picture is worth a

483
00:21:58,500 --> 00:21:59,820
thousand words

484
00:21:59,820 --> 00:22:03,179
while a live demo is worth a thousand

485
00:22:03,179 --> 00:22:04,320
hacks

486
00:22:04,320 --> 00:22:07,820
so it's demo time

487
00:22:08,059 --> 00:22:11,178
all right

488
00:22:11,400 --> 00:22:15,960
so it's time for a live demo time

489
00:22:15,960 --> 00:22:18,840
and using Benny my humble hacker will

490
00:22:18,840 --> 00:22:22,380
try to run code inside smm so let's

491
00:22:22,380 --> 00:22:26,659
begin by rebooting this machine

492
00:22:30,240 --> 00:22:33,200
okay

493
00:22:34,020 --> 00:22:37,520
oh no you see my password

494
00:22:37,980 --> 00:22:41,419
shoot I did a screenshot shoot

495
00:22:41,419 --> 00:22:45,080
it's a live demo

496
00:22:46,440 --> 00:22:50,220
okay well reboot the machine and please

497
00:22:50,220 --> 00:22:52,500
notice the nice Center logo that you

498
00:22:52,500 --> 00:22:56,159
will see soon this inter logo is stored

499
00:22:56,159 --> 00:22:59,039
on the SPI flesh and the SPF flash is

500
00:22:59,039 --> 00:23:02,220
accessible only to smm and actually it

501
00:23:02,220 --> 00:23:04,980
is writable only by smm

502
00:23:04,980 --> 00:23:08,700
so if we are able to run code inside smm

503
00:23:08,700 --> 00:23:11,640
it means we are able to modify this logo

504
00:23:11,640 --> 00:23:14,039
so we messed up with this machine a

505
00:23:14,039 --> 00:23:15,600
little bit and it takes it some time to

506
00:23:15,600 --> 00:23:18,059
boot so to make your time more

507
00:23:18,059 --> 00:23:21,360
convenient let's have a small music

508
00:23:21,360 --> 00:23:22,919
so

509
00:23:22,919 --> 00:23:23,900
in

510
00:23:23,900 --> 00:23:27,630
[Applause]

511
00:23:28,200 --> 00:23:31,740
so in the recent Spirit of AI changes we

512
00:23:31,740 --> 00:23:35,900
ask jgpt a couple of questions

513
00:23:37,400 --> 00:23:41,280
and he told us that smm is kind like of

514
00:23:41,280 --> 00:23:44,700
a old grumpy Grandpa who doesn't like to

515
00:23:44,700 --> 00:23:46,320
be bothered unless it's absolutely

516
00:23:46,320 --> 00:23:48,960
necessary it spends most of its time

517
00:23:48,960 --> 00:23:51,539
napping on Nikon feature but as soon as

518
00:23:51,539 --> 00:23:53,640
there is trouble it Springs into action

519
00:23:53,640 --> 00:23:56,640
like a superhero it's like your grandpa

520
00:23:56,640 --> 00:23:58,620
suddenly transferred into an Iron Man

521
00:23:58,620 --> 00:24:01,740
Whenever there was a crisis

522
00:24:01,740 --> 00:24:04,200
so our next question was and when this

523
00:24:04,200 --> 00:24:06,919
Grandpa jumps into action and he told us

524
00:24:06,919 --> 00:24:10,380
smm doesn't come to play very often it

525
00:24:10,380 --> 00:24:12,419
got like a rare Pokemon that you can

526
00:24:12,419 --> 00:24:14,400
only activate with the right combination

527
00:24:14,400 --> 00:24:16,200
of buttons and codes

528
00:24:16,200 --> 00:24:19,380
so when smm does make an appearance in

529
00:24:19,380 --> 00:24:22,320
order in for something big and we're in

530
00:24:22,320 --> 00:24:24,659
for something big

531
00:24:24,659 --> 00:24:27,900
so let's stop with the stupid music and

532
00:24:27,900 --> 00:24:30,000
hop into action

533
00:24:30,000 --> 00:24:34,380
all right oh it's not included yet

534
00:24:34,380 --> 00:24:35,520
so

535
00:24:35,520 --> 00:24:38,880
we will begin our attack by crafting a

536
00:24:38,880 --> 00:24:40,620
small right primitive because we are

537
00:24:40,620 --> 00:24:42,120
very limited with the different thread

538
00:24:42,120 --> 00:24:44,159
Primitives we have and we want a zero

539
00:24:44,159 --> 00:24:45,240
right primitive

540
00:24:45,240 --> 00:24:48,720
we will start by trying to create a zero

541
00:24:48,720 --> 00:24:51,299
right primitive and remember this is a

542
00:24:51,299 --> 00:24:53,340
race condition so it's statistical and

543
00:24:53,340 --> 00:24:55,440
it is it takes some time for it to be

544
00:24:55,440 --> 00:24:57,960
exploited

545
00:24:57,960 --> 00:25:01,559
um and we'll begin with it so

546
00:25:01,559 --> 00:25:05,960
please notice the nice ring Hopper here

547
00:25:06,120 --> 00:25:11,689
[Applause]

548
00:25:11,760 --> 00:25:14,480
and

549
00:25:18,120 --> 00:25:20,580
we were able to create a first right

550
00:25:20,580 --> 00:25:23,220
primitive now we'll try to disable our

551
00:25:23,220 --> 00:25:25,760
global

552
00:25:30,260 --> 00:25:33,410
cheer It Up cheer it up we need it

553
00:25:33,410 --> 00:25:37,929
[Applause]

554
00:25:38,039 --> 00:25:39,779
okay

555
00:25:39,779 --> 00:25:43,260
so now we hope it worked and we will

556
00:25:43,260 --> 00:25:46,020
read the MSR

557
00:25:46,020 --> 00:25:47,520
so

558
00:25:47,520 --> 00:25:49,080
you probably don't see it because it's

559
00:25:49,080 --> 00:25:51,240
very low here but the value of the MSR

560
00:25:51,240 --> 00:25:52,980
is five which is two bits that are

561
00:25:52,980 --> 00:25:54,059
enabled

562
00:25:54,059 --> 00:25:57,360
it's uh the first bit and the the third

563
00:25:57,360 --> 00:25:59,760
bit which is both the enable bits and

564
00:25:59,760 --> 00:26:02,220
the lock bit will go into a suspend

565
00:26:02,220 --> 00:26:05,159
meaning to S3

566
00:26:05,159 --> 00:26:07,860
go ahead

567
00:26:07,860 --> 00:26:10,320
and if you weren't suspicious of your

568
00:26:10,320 --> 00:26:12,480
machine going to sleep until now

569
00:26:12,480 --> 00:26:15,059
randomly going to sleep I hope that now

570
00:26:15,059 --> 00:26:18,059
you will be we will hop back from sleep

571
00:26:18,059 --> 00:26:21,539
state check the state of the MSR and it

572
00:26:21,539 --> 00:26:23,100
is zero

573
00:26:23,100 --> 00:26:24,840
all right

574
00:26:24,840 --> 00:26:29,658
let's continue so now

575
00:26:29,820 --> 00:26:33,000
I will tell you everyone please look to

576
00:26:33,000 --> 00:26:34,799
this camera raise your credit cards in

577
00:26:34,799 --> 00:26:38,299
the air and say that's the whim

578
00:26:39,179 --> 00:26:41,100
all right

579
00:26:41,100 --> 00:26:44,760
so we'll do now the SM based relocation

580
00:26:44,760 --> 00:26:47,120
attack

581
00:26:54,299 --> 00:26:57,299
and hopefully it will work and then we

582
00:26:57,299 --> 00:27:01,740
will be only left to trigger our payload

583
00:27:01,740 --> 00:27:06,080
and it worked let's trigger our payload

584
00:27:10,260 --> 00:27:12,720
perfect please notice that the machine

585
00:27:12,720 --> 00:27:14,340
freezes because all the cores are going

586
00:27:14,340 --> 00:27:16,140
idle right

587
00:27:16,140 --> 00:27:18,299
and we are only left to reboot the

588
00:27:18,299 --> 00:27:20,539
machine

589
00:27:22,260 --> 00:27:25,879
and rum rolls

590
00:27:32,640 --> 00:27:35,640
okay

591
00:27:48,620 --> 00:27:52,860
and so at this point you probably know

592
00:27:52,860 --> 00:27:54,299
that we didn't thought that it will work

593
00:27:54,299 --> 00:27:57,720
but lucky for us

594
00:27:57,720 --> 00:27:59,460
so to understand the full implications

595
00:27:59,460 --> 00:28:01,380
of the issues we have found we need to

596
00:28:01,380 --> 00:28:03,659
understand the UEFI ecosystem so

597
00:28:03,659 --> 00:28:05,159
everything begins with the Tiana Gore

598
00:28:05,159 --> 00:28:06,659
project or what some of you may be

599
00:28:06,659 --> 00:28:09,120
familiar with they Decay tours or

600
00:28:09,120 --> 00:28:10,799
practically the source code for any of

601
00:28:10,799 --> 00:28:13,679
your UEFI biospherewors

602
00:28:13,679 --> 00:28:15,840
then comes diabetes the independent bias

603
00:28:15,840 --> 00:28:18,179
vendors one of them is Ami the vendor

604
00:28:18,179 --> 00:28:20,039
for the internax

605
00:28:20,039 --> 00:28:22,020
they create they take the source code

606
00:28:22,020 --> 00:28:23,880
add the huge portion of functionalities

607
00:28:23,880 --> 00:28:26,460
basically all the SMI handlers and

608
00:28:26,460 --> 00:28:28,020
delivery to the oems to the original

609
00:28:28,020 --> 00:28:30,779
equipment manufacturers Intel is one of

610
00:28:30,779 --> 00:28:32,700
them in case of the Intel Max

611
00:28:32,700 --> 00:28:34,980
then it gets back to you guys the end

612
00:28:34,980 --> 00:28:36,299
customers

613
00:28:36,299 --> 00:28:38,640
so in the attempt to estimate how many

614
00:28:38,640 --> 00:28:41,400
devices are vulnerable we tested a

615
00:28:41,400 --> 00:28:44,159
couple of oems and ibb's Frameworks and

616
00:28:44,159 --> 00:28:47,340
we found that only in 2020 they were

617
00:28:47,340 --> 00:28:49,020
manufactured more than 200 million

618
00:28:49,020 --> 00:28:51,419
devices that are vulnerable this makes

619
00:28:51,419 --> 00:28:53,880
us easily believe that one is in one one

620
00:28:53,880 --> 00:28:56,880
billion devices that were vulnerable to

621
00:28:56,880 --> 00:28:59,700
ring Hopper which is absolutely crazy

622
00:28:59,700 --> 00:29:02,580
and if things weren't bad enough let's

623
00:29:02,580 --> 00:29:05,220
make things even worse so up until now

624
00:29:05,220 --> 00:29:07,980
we hopped from ring zero the kernel to

625
00:29:07,980 --> 00:29:11,400
smm AKA gun mode but the title of our

626
00:29:11,400 --> 00:29:13,860
talk is hopping from user space to God

627
00:29:13,860 --> 00:29:16,799
mode so let's extend our attack

628
00:29:16,799 --> 00:29:18,120
and

629
00:29:18,120 --> 00:29:20,340
to do so we need to do three things from

630
00:29:20,340 --> 00:29:22,380
user space we need to be able to

631
00:29:22,380 --> 00:29:25,020
generate dmh transactions from user

632
00:29:25,020 --> 00:29:27,539
space to trigger smis from user space

633
00:29:27,539 --> 00:29:29,940
and to write a specific physical memory

634
00:29:29,940 --> 00:29:32,760
so let's begin with generating dma

635
00:29:32,760 --> 00:29:34,320
transactions

636
00:29:34,320 --> 00:29:37,080
so remember the previous diagram now

637
00:29:37,080 --> 00:29:39,240
working from the kernel is no longer

638
00:29:39,240 --> 00:29:42,059
legit right we are running in user space

639
00:29:42,059 --> 00:29:43,980
so at this point Benny and I got a

640
00:29:43,980 --> 00:29:46,140
little frustrated and what can we do to

641
00:29:46,140 --> 00:29:48,299
make it work from user space and we

642
00:29:48,299 --> 00:29:50,640
really realized that it's much more

643
00:29:50,640 --> 00:29:53,039
simpler than we thought both in Linux

644
00:29:53,039 --> 00:29:55,559
and windows you have the grid file API

645
00:29:55,559 --> 00:29:58,200
the simple API and with the appropriate

646
00:29:58,200 --> 00:30:00,539
flag which tells the kernel simply do

647
00:30:00,539 --> 00:30:03,679
not buffer the request and get the beta

648
00:30:03,679 --> 00:30:07,500
get the data back to us directly we were

649
00:30:07,500 --> 00:30:09,360
able to generate dma transactions from

650
00:30:09,360 --> 00:30:12,240
user space so let's discuss how to

651
00:30:12,240 --> 00:30:14,480
trigger smis

652
00:30:14,480 --> 00:30:18,779
we stumble across Alex matroso there a

653
00:30:18,779 --> 00:30:21,779
tweet which is one of the famous UEFI

654
00:30:21,779 --> 00:30:25,140
research gurus which has probably for

655
00:30:25,140 --> 00:30:27,120
any of your low level desired

656
00:30:27,120 --> 00:30:30,059
functionality you can find a bios vendor

657
00:30:30,059 --> 00:30:31,320
tool that does

658
00:30:31,320 --> 00:30:33,840
everything for you and indeed we find

659
00:30:33,840 --> 00:30:37,799
such so Ami provides two drivers a Linux

660
00:30:37,799 --> 00:30:40,140
driver and the signed Windows driver and

661
00:30:40,140 --> 00:30:42,419
both of them provide us with the API for

662
00:30:42,419 --> 00:30:45,120
triggering any arbitrary smiz that we

663
00:30:45,120 --> 00:30:46,260
want

664
00:30:46,260 --> 00:30:49,500
all right we are left to discuss how to

665
00:30:49,500 --> 00:30:52,440
write a specific physical memory

666
00:30:52,440 --> 00:30:53,820
so

667
00:30:53,820 --> 00:30:55,860
remember communication to smm is done

668
00:30:55,860 --> 00:30:57,360
via special buffers it is located

669
00:30:57,360 --> 00:31:01,500
outside the SM RAM and it we also we

670
00:31:01,500 --> 00:31:03,360
also described as the input buffer

671
00:31:03,360 --> 00:31:04,860
previously

672
00:31:04,860 --> 00:31:07,620
and the way to transfer it to the smm is

673
00:31:07,620 --> 00:31:10,380
a as a parameter is using the safe State

674
00:31:10,380 --> 00:31:12,240
and to be more precise using one of the

675
00:31:12,240 --> 00:31:14,159
general purpose registers

676
00:31:14,159 --> 00:31:16,500
so in order to access this buffer which

677
00:31:16,500 --> 00:31:18,059
is currently holds only the physical

678
00:31:18,059 --> 00:31:21,240
address of it we need the corresponding

679
00:31:21,240 --> 00:31:23,640
virtual address to access it from user

680
00:31:23,640 --> 00:31:26,580
space luckily for us again the drivers

681
00:31:26,580 --> 00:31:28,860
create this virtual to physical mapping

682
00:31:28,860 --> 00:31:32,820
for us so let's chain it all up

683
00:31:32,820 --> 00:31:35,039
we will map this non-sm Ram buffer into

684
00:31:35,039 --> 00:31:38,100
our unaccessible user space address

685
00:31:38,100 --> 00:31:40,440
and will perform simultaneously the

686
00:31:40,440 --> 00:31:41,760
following Loop

687
00:31:41,760 --> 00:31:44,760
on One Core we will trigger SMI with the

688
00:31:44,760 --> 00:31:47,640
provided buffer as an input and on a sec

689
00:31:47,640 --> 00:31:50,039
record we will read this malicious file

690
00:31:50,039 --> 00:31:53,399
into this input buffer using it we will

691
00:31:53,399 --> 00:31:56,159
able to exploit this time of check time

692
00:31:56,159 --> 00:31:58,980
of use write Primitives only from user

693
00:31:58,980 --> 00:32:01,440
space which was great

694
00:32:01,440 --> 00:32:05,580
okay so now we can fully hop from user

695
00:32:05,580 --> 00:32:09,559
space the ring minus

696
00:32:09,940 --> 00:32:16,020
[Applause]

697
00:32:16,020 --> 00:32:19,860
okay so do the slides and we're up so

698
00:32:19,860 --> 00:32:21,779
let's discuss the timeline so the issues

699
00:32:21,779 --> 00:32:26,000
were reported initially and June 21st

700
00:32:26,000 --> 00:32:30,120
and then after some hard work with the

701
00:32:30,120 --> 00:32:32,399
different ibvs and oems and even the US

702
00:32:32,399 --> 00:32:34,919
search which helped us to coordinate the

703
00:32:34,919 --> 00:32:38,039
issues to all the vendors and oems the

704
00:32:38,039 --> 00:32:41,000
issues were full fixed on November 22

705
00:32:41,000 --> 00:32:43,919
and the Embargo was also expired at this

706
00:32:43,919 --> 00:32:46,200
moment and this brings us to today to

707
00:32:46,200 --> 00:32:48,059
Blue head IL

708
00:32:48,059 --> 00:32:51,059
so

709
00:32:52,679 --> 00:32:55,440
so a couple of takeaways for the end ufi

710
00:32:55,440 --> 00:32:56,940
threats are real if the recent Black

711
00:32:56,940 --> 00:33:00,360
Lotus and hopefully our work I hope to

712
00:33:00,360 --> 00:33:02,100
be we hope that we

713
00:33:02,100 --> 00:33:04,320
encourage you to update your bios after

714
00:33:04,320 --> 00:33:05,820
this talk

715
00:33:05,820 --> 00:33:07,980
if you want to become a UEFI researcher

716
00:33:07,980 --> 00:33:09,899
then smihanders compose the most

717
00:33:09,899 --> 00:33:11,820
fruitful attack surface and this is

718
00:33:11,820 --> 00:33:13,679
where you want to begin

719
00:33:13,679 --> 00:33:15,480
and finally

720
00:33:15,480 --> 00:33:17,039
UEFI research has an interesting future

721
00:33:17,039 --> 00:33:19,860
both in terms of new mitigations and new

722
00:33:19,860 --> 00:33:23,100
attacks so stay tuned

723
00:33:23,100 --> 00:33:24,120
thank you everyone

724
00:33:24,120 --> 00:33:26,750
[Applause]

725
00:33:26,750 --> 00:33:33,499
[Music]

