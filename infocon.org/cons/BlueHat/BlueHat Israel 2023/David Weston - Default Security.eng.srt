1
00:00:00,000 --> 00:00:08,700
[Music]

2
00:00:09,679 --> 00:00:11,440
thank you

3
00:00:11,440 --> 00:00:13,259
[Music]

4
00:00:13,259 --> 00:00:15,299
I'm thoroughly impressed anyone's still

5
00:00:15,299 --> 00:00:17,340
here see I'm on a West Coast time from

6
00:00:17,340 --> 00:00:18,539
the United States so it's like the

7
00:00:18,539 --> 00:00:20,279
middle of the day for me so I'm gonna

8
00:00:20,279 --> 00:00:21,840
have a whole different energy level here

9
00:00:21,840 --> 00:00:24,300
that I hope I'll extend to you so thanks

10
00:00:24,300 --> 00:00:25,439
everyone

11
00:00:25,439 --> 00:00:27,779
um as I said my name's Dave Weston uh

12
00:00:27,779 --> 00:00:30,119
I'm a VP operating system security at

13
00:00:30,119 --> 00:00:32,220
Microsoft which means I no longer have

14
00:00:32,220 --> 00:00:34,380
any technical talent but I sign lots of

15
00:00:34,380 --> 00:00:37,860
expense reports that's the main job

16
00:00:37,860 --> 00:00:40,079
um I love coming to Israel been here

17
00:00:40,079 --> 00:00:43,500
many many times over 20 times I think I

18
00:00:43,500 --> 00:00:46,079
have the record for the most visits to

19
00:00:46,079 --> 00:00:48,899
Israel and still not learning any Hebrew

20
00:00:48,899 --> 00:00:49,860
at all

21
00:00:49,860 --> 00:00:54,379
I know three words in Hebrew Toda

22
00:00:54,379 --> 00:00:57,840
Sababa and arak those three get me

23
00:00:57,840 --> 00:01:00,920
through my whole time here

24
00:01:02,640 --> 00:01:06,420
and I came in on Monday it was amazing I

25
00:01:06,420 --> 00:01:08,340
landed at the airport

26
00:01:08,340 --> 00:01:11,640
God in the cab driving along and so many

27
00:01:11,640 --> 00:01:13,439
people were on the highway there to

28
00:01:13,439 --> 00:01:15,420
greet me cheering

29
00:01:15,420 --> 00:01:18,240
it was great so excited to be here in

30
00:01:18,240 --> 00:01:20,159
Israel it's never a dull moment oh it's

31
00:01:20,159 --> 00:01:21,720
something exciting but of course blue

32
00:01:21,720 --> 00:01:24,720
hat itself is the most exciting so I'm

33
00:01:24,720 --> 00:01:26,880
here uh to talk to you today about some

34
00:01:26,880 --> 00:01:28,259
of the security work we're doing in

35
00:01:28,259 --> 00:01:31,140
Windows 11. uh some of the things we've

36
00:01:31,140 --> 00:01:33,659
gone along uh with the journey but most

37
00:01:33,659 --> 00:01:35,640
importantly I'm here to show you a ton

38
00:01:35,640 --> 00:01:37,320
of new stuff in fact I told my team

39
00:01:37,320 --> 00:01:39,180
let's not announce that here listen

40
00:01:39,180 --> 00:01:41,159
announce it there let's announce it here

41
00:01:41,159 --> 00:01:42,600
in Israel where I think people will be

42
00:01:42,600 --> 00:01:44,579
very enthusiastic and excited to see

43
00:01:44,579 --> 00:01:46,380
some of the things we're doing in

44
00:01:46,380 --> 00:01:48,798
Windows

45
00:01:50,100 --> 00:01:52,259
and also when people get mad about the

46
00:01:52,259 --> 00:01:53,640
stuff I'm announcing I need to have my

47
00:01:53,640 --> 00:01:55,500
back so we'll make it work

48
00:01:55,500 --> 00:01:58,200
all right so with that let's go

49
00:01:58,200 --> 00:02:01,320
so in Windows 11 we have a strong and

50
00:02:01,320 --> 00:02:04,079
distinct security strategy that I think

51
00:02:04,079 --> 00:02:05,880
is bold and I think those of you have

52
00:02:05,880 --> 00:02:07,520
been working on security for a long time

53
00:02:07,520 --> 00:02:10,500
will be impressed with even James I

54
00:02:10,500 --> 00:02:11,879
think by the end of this talk will be

55
00:02:11,879 --> 00:02:13,379
like Microsoft serious about security

56
00:02:13,379 --> 00:02:16,200
watch well you'll see

57
00:02:16,200 --> 00:02:18,360
so there are three things that we are

58
00:02:18,360 --> 00:02:20,099
really inputting into Windows security

59
00:02:20,099 --> 00:02:21,780
the first is the hardware security

60
00:02:21,780 --> 00:02:25,200
Baseline I am the person who infamously

61
00:02:25,200 --> 00:02:27,480
required the TPM and by the end of this

62
00:02:27,480 --> 00:02:28,980
talk you'll be like Dave did the right

63
00:02:28,980 --> 00:02:31,680
thing sorry not sorry so a Hardware

64
00:02:31,680 --> 00:02:33,900
security Baseline is there to provide

65
00:02:33,900 --> 00:02:35,400
the ingredients and The Primitives we

66
00:02:35,400 --> 00:02:38,700
need secure key storage high integrity

67
00:02:38,700 --> 00:02:41,280
measurements for things like boot and

68
00:02:41,280 --> 00:02:43,080
secure key release

69
00:02:43,080 --> 00:02:44,879
we also have things like virtualization

70
00:02:44,879 --> 00:02:46,500
based extensions and other things that

71
00:02:46,500 --> 00:02:48,120
are required to have a trusted execution

72
00:02:48,120 --> 00:02:50,459
environment and will show you how we are

73
00:02:50,459 --> 00:02:52,160
using that trusted execution environment

74
00:02:52,160 --> 00:02:54,540
TPM and the other parts of the Hardware

75
00:02:54,540 --> 00:02:57,360
security Baseline to solve some of the

76
00:02:57,360 --> 00:03:00,000
most important problems in Windows and

77
00:03:00,000 --> 00:03:01,500
some of the most long-standing by

78
00:03:01,500 --> 00:03:02,879
Linda's talk

79
00:03:02,879 --> 00:03:05,760
the second I think big philosophical

80
00:03:05,760 --> 00:03:08,519
change that we've had in Windows is we

81
00:03:08,519 --> 00:03:10,260
no longer credit ourselves for things

82
00:03:10,260 --> 00:03:12,239
that are not on by default

83
00:03:12,239 --> 00:03:15,000
I'll say it again if it's not on by

84
00:03:15,000 --> 00:03:18,420
default it doesn't exist why did that

85
00:03:18,420 --> 00:03:20,819
happen well our strategy for Windows 10

86
00:03:20,819 --> 00:03:22,680
was we're gonna pack this thing with

87
00:03:22,680 --> 00:03:24,720
security features we're going to have

88
00:03:24,720 --> 00:03:27,540
all the guards in the world every type

89
00:03:27,540 --> 00:03:30,360
of guard you can imagine no pad guard

90
00:03:30,360 --> 00:03:32,280
you name it

91
00:03:32,280 --> 00:03:34,319
how often did people turn that on do you

92
00:03:34,319 --> 00:03:36,300
think all of you work in cyber security

93
00:03:36,300 --> 00:03:37,860
how often do people actually override

94
00:03:37,860 --> 00:03:39,659
the defaults never

95
00:03:39,659 --> 00:03:42,540
so our new ethos is basically if it's

96
00:03:42,540 --> 00:03:44,940
not on by default it doesn't matter and

97
00:03:44,940 --> 00:03:46,739
you'll see that we are rapidly and

98
00:03:46,739 --> 00:03:49,019
aggressively turning on defaults in

99
00:03:49,019 --> 00:03:51,659
Windows 11. examples you know

100
00:03:51,659 --> 00:03:53,159
multi-factor authentication with hello

101
00:03:53,159 --> 00:03:56,280
is on by default BitLocker we've turned

102
00:03:56,280 --> 00:03:58,819
on things like LSA protection by default

103
00:03:58,819 --> 00:04:00,959
virtualization based security is on by

104
00:04:00,959 --> 00:04:04,319
default uh we'll keep going

105
00:04:04,319 --> 00:04:07,019
and finally I think the most important

106
00:04:07,019 --> 00:04:09,659
philosophical change and I hope you'll

107
00:04:09,659 --> 00:04:12,120
agree with me at the end is we are no

108
00:04:12,120 --> 00:04:14,760
longer avoiding the hard things

109
00:04:14,760 --> 00:04:16,918
so two big things I'm proud to talk

110
00:04:16,918 --> 00:04:20,220
about today are we'll be enforcing code

111
00:04:20,220 --> 00:04:21,478
signing

112
00:04:21,478 --> 00:04:24,600
in Windows over time with features like

113
00:04:24,600 --> 00:04:27,060
smart app control that will mean malware

114
00:04:27,060 --> 00:04:29,100
will at least have a much higher bar to

115
00:04:29,100 --> 00:04:30,600
get onto the machine you have to be

116
00:04:30,600 --> 00:04:32,220
signed we'll have attribution the

117
00:04:32,220 --> 00:04:33,960
ability to do revocation

118
00:04:33,960 --> 00:04:36,960
I'll also talk about how we are going to

119
00:04:36,960 --> 00:04:39,060
migrate away

120
00:04:39,060 --> 00:04:41,820
from administrator all the time

121
00:04:41,820 --> 00:04:44,699
towards standard user and UAC will never

122
00:04:44,699 --> 00:04:47,940
be mentioned in this talk at all

123
00:04:47,940 --> 00:04:50,040
I love the clap for that by the way I

124
00:04:50,040 --> 00:04:52,500
see you I see what you did there

125
00:04:52,500 --> 00:04:54,540
so what are the really big rocks that we

126
00:04:54,540 --> 00:04:55,680
want to work on

127
00:04:55,680 --> 00:04:58,259
first running as admin I call that

128
00:04:58,259 --> 00:05:01,020
running with Scissors it's a little bit

129
00:05:01,020 --> 00:05:04,919
wild that in 2023 uh we're still

130
00:05:04,919 --> 00:05:06,840
basically running as root on Windows and

131
00:05:06,840 --> 00:05:08,220
I think all of you know the impact for

132
00:05:08,220 --> 00:05:10,979
that you're one click away from Doom and

133
00:05:10,979 --> 00:05:12,840
if you're on a connected Network which

134
00:05:12,840 --> 00:05:14,820
almost all of us are you're one click

135
00:05:14,820 --> 00:05:16,740
away from Doom that leads someone to

136
00:05:16,740 --> 00:05:18,360
having domain admin

137
00:05:18,360 --> 00:05:20,520
we've got to change that it's a very

138
00:05:20,520 --> 00:05:22,860
hard problem gonna make you all see how

139
00:05:22,860 --> 00:05:24,840
hard it is by the end but it's something

140
00:05:24,840 --> 00:05:28,800
that we are going to tackle head on

141
00:05:28,800 --> 00:05:30,960
the next thing is what makes windows

142
00:05:30,960 --> 00:05:32,940
windows and not some of these other

143
00:05:32,940 --> 00:05:35,100
platforms is you can do what you want

144
00:05:35,100 --> 00:05:38,039
with it right you can grab that uh

145
00:05:38,039 --> 00:05:41,100
Winamp from 1997 with just the perfect

146
00:05:41,100 --> 00:05:43,440
skin and all those extra stack buffer

147
00:05:43,440 --> 00:05:45,180
overflows and you can still run it if

148
00:05:45,180 --> 00:05:46,560
you really want to

149
00:05:46,560 --> 00:05:49,560
you can run Minecraft and download every

150
00:05:49,560 --> 00:05:52,800
random uh downloadable content in a

151
00:05:52,800 --> 00:05:55,320
compressed rare file if you want to

152
00:05:55,320 --> 00:05:57,360
the challenge with that is the thing

153
00:05:57,360 --> 00:06:00,000
that makes windows windows and so useful

154
00:06:00,000 --> 00:06:02,400
and valuable to billions of people is

155
00:06:02,400 --> 00:06:03,960
also the thing that keeps most of you

156
00:06:03,960 --> 00:06:06,600
employed and so we've got to find the

157
00:06:06,600 --> 00:06:08,940
right balance of keeping Windows Windows

158
00:06:08,940 --> 00:06:10,919
while also making sure that we're

159
00:06:10,919 --> 00:06:13,560
tackling some of these security issues

160
00:06:13,560 --> 00:06:15,120
that come from the need to have

161
00:06:15,120 --> 00:06:18,479
compatibility and decentralized apps if

162
00:06:18,479 --> 00:06:21,000
I just said hey next week all of you

163
00:06:21,000 --> 00:06:22,500
have to get apps from an app store on

164
00:06:22,500 --> 00:06:24,360
Windows you probably wouldn't be happy

165
00:06:24,360 --> 00:06:25,560
so we have to find alternative

166
00:06:25,560 --> 00:06:28,560
mechanisms to get towards security

167
00:06:28,560 --> 00:06:30,900
and then finally I've been working on

168
00:06:30,900 --> 00:06:33,600
this problem for 20 years I don't want

169
00:06:33,600 --> 00:06:35,400
to work on it for 20 more years but

170
00:06:35,400 --> 00:06:38,460
memory safety continues to be a big rock

171
00:06:38,460 --> 00:06:41,400
in Windows our previous strategy was

172
00:06:41,400 --> 00:06:44,039
really to Target not so much the bug

173
00:06:44,039 --> 00:06:45,840
Primitives but the exploitation

174
00:06:45,840 --> 00:06:48,180
Primitives on the operating system so we

175
00:06:48,180 --> 00:06:49,620
looked at things like control flow

176
00:06:49,620 --> 00:06:51,479
Integrity for targeting returning

177
00:06:51,479 --> 00:06:53,699
programming Concepts we looked at things

178
00:06:53,699 --> 00:06:56,220
like aslr for making non-deterministic

179
00:06:56,220 --> 00:06:58,080
memory addresses data execution

180
00:06:58,080 --> 00:07:00,720
prevention Etc while those were helpful

181
00:07:00,720 --> 00:07:02,639
Technologies certainly slowing and

182
00:07:02,639 --> 00:07:04,979
driving up cost we're certainly not

183
00:07:04,979 --> 00:07:07,259
satisfied with where we're at on

184
00:07:07,259 --> 00:07:10,319
disrupting exploitation and so over the

185
00:07:10,319 --> 00:07:12,180
next several years you're going to see

186
00:07:12,180 --> 00:07:16,139
an aggressive and uh meaningful pursuit

187
00:07:16,139 --> 00:07:19,259
of memory safety David SAR many other

188
00:07:19,259 --> 00:07:20,759
people worked on some incredible

189
00:07:20,759 --> 00:07:22,440
research with things like Chariot

190
00:07:22,440 --> 00:07:24,419
looking at capabilities models around

191
00:07:24,419 --> 00:07:27,479
architecture I'm going to tell you today

192
00:07:27,479 --> 00:07:30,599
about how using rust on the operating

193
00:07:30,599 --> 00:07:33,599
system along with other constructs to

194
00:07:33,599 --> 00:07:35,759
solve this problem I'm going to guess as

195
00:07:35,759 --> 00:07:38,340
a security fan crowd so there's some few

196
00:07:38,340 --> 00:07:41,900
fans of rust in the audience

197
00:07:42,960 --> 00:07:45,479
I you know I know I know what you want

198
00:07:45,479 --> 00:07:47,819
when when I uh decided we're gonna do

199
00:07:47,819 --> 00:07:49,800
you know uh some talks there I was like

200
00:07:49,800 --> 00:07:51,599
I'm gonna announce uh rust in the

201
00:07:51,599 --> 00:07:53,639
colonel here in Israel so I thought I

202
00:07:53,639 --> 00:07:54,539
thought folks would be excited about

203
00:07:54,539 --> 00:07:56,280
that so it's good to hear that all right

204
00:07:56,280 --> 00:07:58,259
so let's talk a little bit about the

205
00:07:58,259 --> 00:08:01,080
road to admin list windows I put Windows

206
00:08:01,080 --> 00:08:02,639
2000 in here because of this whole

207
00:08:02,639 --> 00:08:05,639
amazing 90s theme but I bet very few of

208
00:08:05,639 --> 00:08:07,259
in this audience have actually besides

209
00:08:07,259 --> 00:08:09,060
probably Market myself have actually run

210
00:08:09,060 --> 00:08:12,539
uh Windows 2000 but uh I love the theme

211
00:08:12,539 --> 00:08:13,860
here so let's talk a little bit about

212
00:08:13,860 --> 00:08:16,860
how we get to admin list you've heard

213
00:08:16,860 --> 00:08:19,139
this concept of passwordless that's the

214
00:08:19,139 --> 00:08:21,300
industry slogan for things like 502 and

215
00:08:21,300 --> 00:08:23,940
passkey the slogan that I have you know

216
00:08:23,940 --> 00:08:25,740
if you're gonna make a revolution you

217
00:08:25,740 --> 00:08:28,139
have to have a slogan uh and that slogan

218
00:08:28,139 --> 00:08:29,940
is admin list we want to get to a world

219
00:08:29,940 --> 00:08:32,039
in which not everyone is running with

220
00:08:32,039 --> 00:08:33,539
full admin rights unless it's absolutely

221
00:08:33,539 --> 00:08:36,419
required getting to default is one of

222
00:08:36,419 --> 00:08:37,919
the core issues on Windows but there's

223
00:08:37,919 --> 00:08:39,839
some challenges there that we have to

224
00:08:39,839 --> 00:08:41,458
tackle

225
00:08:41,458 --> 00:08:43,500
the first thing we want to recognize is

226
00:08:43,500 --> 00:08:46,080
removing admin capabilities by default

227
00:08:46,080 --> 00:08:48,720
has immense value actually many of the

228
00:08:48,720 --> 00:08:50,940
Technologies in Windows tried to work

229
00:08:50,940 --> 00:08:53,940
around that problem UAC the whole

230
00:08:53,940 --> 00:08:55,680
concept was let's work around not having

231
00:08:55,680 --> 00:08:57,060
to be standard users in some of the

232
00:08:57,060 --> 00:09:00,120
challenges around that while UAC is a

233
00:09:00,120 --> 00:09:02,459
useful and valuable technology it

234
00:09:02,459 --> 00:09:04,380
certainly hasn't solved the problem of

235
00:09:04,380 --> 00:09:06,959
de-privileging or making attacks that

236
00:09:06,959 --> 00:09:09,600
require admin privileges much more

237
00:09:09,600 --> 00:09:11,880
difficult over time we've also had to

238
00:09:11,880 --> 00:09:13,260
build other features things like

239
00:09:13,260 --> 00:09:16,620
protected processes which again reli is

240
00:09:16,620 --> 00:09:17,940
not a security boundary because it

241
00:09:17,940 --> 00:09:20,279
relies on the user not being able to

242
00:09:20,279 --> 00:09:22,019
modify the kernel we have things like

243
00:09:22,019 --> 00:09:24,300
virtualization based security which we

244
00:09:24,300 --> 00:09:25,980
had to introduce a whole other kernel

245
00:09:25,980 --> 00:09:27,779
secure kernel because the admin to

246
00:09:27,779 --> 00:09:30,120
Kernel boundary is not permanent so

247
00:09:30,120 --> 00:09:32,519
we've tried had many tries that saying

248
00:09:32,519 --> 00:09:34,860
let's not tackle the core problem of

249
00:09:34,860 --> 00:09:36,300
having everyone run an administrator

250
00:09:36,300 --> 00:09:38,220
let's build other security technologies

251
00:09:38,220 --> 00:09:41,040
that try to compensate for that I will

252
00:09:41,040 --> 00:09:43,019
I'm first to say I like to own decisions

253
00:09:43,019 --> 00:09:44,580
I don't think that was the right

254
00:09:44,580 --> 00:09:46,140
decision we're going to go back to the

255
00:09:46,140 --> 00:09:48,300
drawing board which is you know first

256
00:09:48,300 --> 00:09:50,760
principle let's run with as least

257
00:09:50,760 --> 00:09:52,440
privileges as possible and we can do

258
00:09:52,440 --> 00:09:53,880
that and I think we have a good plan

259
00:09:53,880 --> 00:09:55,980
that I'll talk to you about

260
00:09:55,980 --> 00:09:57,839
the other challenge that we have is

261
00:09:57,839 --> 00:10:00,959
there is significant debt within the

262
00:10:00,959 --> 00:10:02,820
operating system that makes running a

263
00:10:02,820 --> 00:10:06,120
standard user very very challenging my

264
00:10:06,120 --> 00:10:07,920
favorite is to change the color profile

265
00:10:07,920 --> 00:10:10,740
on your monitor you have to be admin

266
00:10:10,740 --> 00:10:14,279
you know to modify basic firewall rules

267
00:10:14,279 --> 00:10:16,140
you have to be admin ask me how I know

268
00:10:16,140 --> 00:10:17,700
I'm one of the few people that run a

269
00:10:17,700 --> 00:10:19,560
standard user so there are many places

270
00:10:19,560 --> 00:10:21,540
in the operating system where we make

271
00:10:21,540 --> 00:10:23,720
assumptions frankly for our own

272
00:10:23,720 --> 00:10:27,200
convenience about uh necessitating

273
00:10:27,200 --> 00:10:29,279
administrator and that's something that

274
00:10:29,279 --> 00:10:31,140
will have to change to make the user

275
00:10:31,140 --> 00:10:33,300
experience even possible and it's one of

276
00:10:33,300 --> 00:10:34,560
the reasons most people don't do it

277
00:10:34,560 --> 00:10:35,940
today

278
00:10:35,940 --> 00:10:40,200
the other massive problem is most apps

279
00:10:40,200 --> 00:10:42,779
on the platform on windows are win32

280
00:10:42,779 --> 00:10:45,540
apps and the vast majority of them are

281
00:10:45,540 --> 00:10:47,339
overprivileged how many of you have

282
00:10:47,339 --> 00:10:49,620
written a Windows app before any kind of

283
00:10:49,620 --> 00:10:51,120
like basic tool

284
00:10:51,120 --> 00:10:52,620
how many of those apps didn't require

285
00:10:52,620 --> 00:10:53,940
admin

286
00:10:53,940 --> 00:10:55,079
you probably don't even know if it

287
00:10:55,079 --> 00:10:57,060
doesn't all right it's like I don't know

288
00:10:57,060 --> 00:10:59,100
I called some API I don't know what it

289
00:10:59,100 --> 00:11:01,260
requires but some some City

290
00:11:01,260 --> 00:11:03,240
so that's a big that's a big issue

291
00:11:03,240 --> 00:11:05,940
there's just been a accumulation of debt

292
00:11:05,940 --> 00:11:08,820
most of the useful apps implicitly or

293
00:11:08,820 --> 00:11:11,220
explicitly require admin and all of

294
00:11:11,220 --> 00:11:14,640
those apps will need to be removed have

295
00:11:14,640 --> 00:11:17,160
privileges removed over time to make the

296
00:11:17,160 --> 00:11:19,920
experience of actually running uh not as

297
00:11:19,920 --> 00:11:22,019
admin valuable so again a very

298
00:11:22,019 --> 00:11:23,519
challenging issue but I'll show you how

299
00:11:23,519 --> 00:11:25,320
we're trying to tackle that

300
00:11:25,320 --> 00:11:29,220
okay so one of the core issues is this

301
00:11:29,220 --> 00:11:31,079
concept of win32 apps being over

302
00:11:31,079 --> 00:11:34,140
privileged this is again a little bit of

303
00:11:34,140 --> 00:11:36,300
Microsoft's fault in the sense that we

304
00:11:36,300 --> 00:11:38,519
have not really made it easy to sandbox

305
00:11:38,519 --> 00:11:42,300
your app in fact app container which has

306
00:11:42,300 --> 00:11:43,620
been talked about a couple times today

307
00:11:43,620 --> 00:11:47,459
is our uh sandboxing platform or at

308
00:11:47,459 --> 00:11:49,380
least low level API Primitives for

309
00:11:49,380 --> 00:11:51,779
deprivileging an application but it was

310
00:11:51,779 --> 00:11:54,000
essentially tied to our universal

311
00:11:54,000 --> 00:11:57,180
windows platform our uwp apps most app

312
00:11:57,180 --> 00:12:00,180
developers did not choose to go uwp and

313
00:12:00,180 --> 00:12:03,800
as a result most apps are not sandboxed

314
00:12:03,800 --> 00:12:06,899
so we're again looking back at this hard

315
00:12:06,899 --> 00:12:09,180
problem and deciding we need to make a

316
00:12:09,180 --> 00:12:12,180
viable framework to isolate apps on

317
00:12:12,180 --> 00:12:14,640
win32 and there's a couple of different

318
00:12:14,640 --> 00:12:16,380
principles that we need to get towards

319
00:12:16,380 --> 00:12:19,260
that goal the first is obviously we want

320
00:12:19,260 --> 00:12:21,899
strong containment but there's a balance

321
00:12:21,899 --> 00:12:24,420
so for example many of you in here are

322
00:12:24,420 --> 00:12:26,100
probably fans of things like granular

323
00:12:26,100 --> 00:12:28,260
system call filtering I don't know if

324
00:12:28,260 --> 00:12:30,240
we're going to get the compression

325
00:12:30,240 --> 00:12:33,120
utility day one to filter every uh

326
00:12:33,120 --> 00:12:35,459
argument towards a win32k system call

327
00:12:35,459 --> 00:12:37,980
right so we need to be sort of realistic

328
00:12:37,980 --> 00:12:39,600
about our containment goals and provide

329
00:12:39,600 --> 00:12:41,880
enough value without complexity

330
00:12:41,880 --> 00:12:43,800
the second principle is developer

331
00:12:43,800 --> 00:12:45,899
Simplicity I can tell you working in

332
00:12:45,899 --> 00:12:48,200
this ecosystem for a long time

333
00:12:48,200 --> 00:12:50,760
developers don't necessarily want to

334
00:12:50,760 --> 00:12:52,860
change their apps and so just because a

335
00:12:52,860 --> 00:12:54,600
bunch of us security people think things

336
00:12:54,600 --> 00:12:57,120
are cool does not mean a few thousand

337
00:12:57,120 --> 00:12:58,380
developers are going to go rev their

338
00:12:58,380 --> 00:13:00,660
apps overnight unless it's dead simple

339
00:13:00,660 --> 00:13:03,660
and the value proposition is clear and

340
00:13:03,660 --> 00:13:05,339
again back to First principles that

341
00:13:05,339 --> 00:13:06,540
means not having to write a

342
00:13:06,540 --> 00:13:09,060
sophisticated ebpf based filtering for

343
00:13:09,060 --> 00:13:10,680
your system calls to get things to work

344
00:13:10,680 --> 00:13:12,959
just never going to happen nobody wrote

345
00:13:12,959 --> 00:13:16,440
SE Linux policies in 1999 nobody's going

346
00:13:16,440 --> 00:13:17,940
to write those today

347
00:13:17,940 --> 00:13:19,440
and then finally

348
00:13:19,440 --> 00:13:22,920
isolation cannot be super annoying many

349
00:13:22,920 --> 00:13:24,120
of you have probably used different

350
00:13:24,120 --> 00:13:25,500
operating systems where you're getting

351
00:13:25,500 --> 00:13:28,380
camera pop-ups and persistent requests

352
00:13:28,380 --> 00:13:31,019
for files that you have no context on if

353
00:13:31,019 --> 00:13:32,519
you do that in Mass for billions of

354
00:13:32,519 --> 00:13:34,320
users they will simply revolt and go use

355
00:13:34,320 --> 00:13:35,459
a different operating system or

356
00:13:35,459 --> 00:13:37,860
different version so we need to make the

357
00:13:37,860 --> 00:13:39,420
first two principles containment and

358
00:13:39,420 --> 00:13:41,339
developer Simplicity while also not

359
00:13:41,339 --> 00:13:43,380
annoying the users and this is what I

360
00:13:43,380 --> 00:13:45,540
think we're trying to achieve in Windows

361
00:13:45,540 --> 00:13:47,040
11.

362
00:13:47,040 --> 00:13:49,560
so how does this app isolation work well

363
00:13:49,560 --> 00:13:51,000
I already hinted it starts with app

364
00:13:51,000 --> 00:13:53,519
containers and it starts with the

365
00:13:53,519 --> 00:13:56,040
concept of low IL which is not too

366
00:13:56,040 --> 00:13:58,500
dissimilar from what we've done in uwp

367
00:13:58,500 --> 00:14:00,899
and provides basic isolation Primitives

368
00:14:00,899 --> 00:14:04,380
for applications in Windows on top of

369
00:14:04,380 --> 00:14:06,060
that we are building on What's called

370
00:14:06,060 --> 00:14:09,360
the msix framework msix in a nutshell

371
00:14:09,360 --> 00:14:13,620
modernizes win32 by using file and

372
00:14:13,620 --> 00:14:16,440
registry API virtualization to shim

373
00:14:16,440 --> 00:14:18,899
calls that would be you know arbitrary

374
00:14:18,899 --> 00:14:21,600
paths on the operating system into a app

375
00:14:21,600 --> 00:14:24,060
specific storage this is really there

376
00:14:24,060 --> 00:14:26,579
for things like clean uninstall and

377
00:14:26,579 --> 00:14:30,360
reinstall app roaming backup Etc but

378
00:14:30,360 --> 00:14:31,980
it's also a very convenient construct

379
00:14:31,980 --> 00:14:34,079
for isolation because we can write most

380
00:14:34,079 --> 00:14:36,540
of the App State into a place where that

381
00:14:36,540 --> 00:14:38,339
application doesn't need additional

382
00:14:38,339 --> 00:14:41,160
privileges so we can assume hey from day

383
00:14:41,160 --> 00:14:43,620
one birth of your app from default all

384
00:14:43,620 --> 00:14:44,940
you only need to write to this location

385
00:14:44,940 --> 00:14:46,860
which makes things very useful for the

386
00:14:46,860 --> 00:14:48,060
next step

387
00:14:48,060 --> 00:14:51,139
the final step which is net new is

388
00:14:51,139 --> 00:14:53,880
brokering on the file system so we're

389
00:14:53,880 --> 00:14:55,320
actually introducing a mini filter

390
00:14:55,320 --> 00:14:58,740
driver that will provide a brokering

391
00:14:58,740 --> 00:15:01,440
mechanism for file system access for

392
00:15:01,440 --> 00:15:04,139
files outside of the app's default

393
00:15:04,139 --> 00:15:06,720
access what does this mean in a nutshell

394
00:15:06,720 --> 00:15:09,839
well in the uwp world one of the

395
00:15:09,839 --> 00:15:12,660
challenges with adapting or the app

396
00:15:12,660 --> 00:15:15,360
container to win32 was we assumed usage

397
00:15:15,360 --> 00:15:18,540
of winrt apis so for example if you are

398
00:15:18,540 --> 00:15:20,699
running an app container previously and

399
00:15:20,699 --> 00:15:23,040
you wanted to access the file system you

400
00:15:23,040 --> 00:15:25,199
had to replace all those beautiful win32

401
00:15:25,199 --> 00:15:29,519
apis calls to create file X with winrt

402
00:15:29,519 --> 00:15:33,300
async return file broker picker you know

403
00:15:33,300 --> 00:15:36,240
very modern C plus plus Concepts but for

404
00:15:36,240 --> 00:15:38,579
those stodgy folks who are writing win32

405
00:15:38,579 --> 00:15:39,779
they're probably not going to do it

406
00:15:39,779 --> 00:15:42,000
right back to First principles so what

407
00:15:42,000 --> 00:15:44,100
we're doing with this new system is

408
00:15:44,100 --> 00:15:46,800
using a file system driver to enforce

409
00:15:46,800 --> 00:15:49,320
access to the files system using

410
00:15:49,320 --> 00:15:51,380
traditional apis

411
00:15:51,380 --> 00:15:54,240
but once the application is locked

412
00:15:54,240 --> 00:15:57,120
launched in this app Silo context the

413
00:15:57,120 --> 00:15:58,880
file system broker will manage access

414
00:15:58,880 --> 00:16:01,980
and that becomes much simpler to write

415
00:16:01,980 --> 00:16:04,680
very basic policies without changing

416
00:16:04,680 --> 00:16:06,779
substantial parts of your code which is

417
00:16:06,779 --> 00:16:08,220
going to be helpful

418
00:16:08,220 --> 00:16:10,680
okay so how do you do this it's actually

419
00:16:10,680 --> 00:16:12,779
really straightforward to convert

420
00:16:12,779 --> 00:16:14,639
something to an msix you need to do a

421
00:16:14,639 --> 00:16:16,560
few basic things you need to create a

422
00:16:16,560 --> 00:16:18,180
manifest your application has an

423
00:16:18,180 --> 00:16:20,100
identity and we know the context in

424
00:16:20,100 --> 00:16:22,019
which to run it so you need to be able

425
00:16:22,019 --> 00:16:23,760
to say hey I'm going to create this msix

426
00:16:23,760 --> 00:16:25,199
it's going to have an application

427
00:16:25,199 --> 00:16:27,000
identity which we can use to enforce

428
00:16:27,000 --> 00:16:29,579
access across to different apis across

429
00:16:29,579 --> 00:16:30,959
and resources across the operating

430
00:16:30,959 --> 00:16:33,779
system and it also allows the create

431
00:16:33,779 --> 00:16:36,540
process and kernel to figure out that

432
00:16:36,540 --> 00:16:38,220
the application needs to be launched in

433
00:16:38,220 --> 00:16:40,079
an app Silo context and what privileges

434
00:16:40,079 --> 00:16:42,240
it provides so in this very simple

435
00:16:42,240 --> 00:16:44,399
example we can actually take notepad

436
00:16:44,399 --> 00:16:47,699
plus plus with zero to to small code

437
00:16:47,699 --> 00:16:51,660
changes and repackage it in an msix very

438
00:16:51,660 --> 00:16:53,399
simply

439
00:16:53,399 --> 00:16:55,560
we then under the hood have generated a

440
00:16:55,560 --> 00:16:58,100
manifest that says let's run this

441
00:16:58,100 --> 00:17:01,259
notepad plus plus app in a app container

442
00:17:01,259 --> 00:17:02,779
an app silo

443
00:17:02,779 --> 00:17:05,220
and we would give it an identity which

444
00:17:05,220 --> 00:17:06,780
in this case is called you know preview

445
00:17:06,780 --> 00:17:10,740
security very simple uh basic concept

446
00:17:10,740 --> 00:17:14,099
now the problem is by default the

447
00:17:14,099 --> 00:17:15,599
application developer will have no

448
00:17:15,599 --> 00:17:17,280
access which is kind of the point of the

449
00:17:17,280 --> 00:17:18,240
sandbox

450
00:17:18,240 --> 00:17:20,520
and traditionally one of the challenges

451
00:17:20,520 --> 00:17:22,619
with writing a good policy is that

452
00:17:22,619 --> 00:17:24,780
there's a long tail of knowledge and

453
00:17:24,780 --> 00:17:26,699
code paths that you require as a

454
00:17:26,699 --> 00:17:30,720
developer to understand what resources a

455
00:17:30,720 --> 00:17:33,240
app may or may not need the way that

456
00:17:33,240 --> 00:17:35,700
we're solving that problem with this

457
00:17:35,700 --> 00:17:38,340
win32 app isolation framework is we're

458
00:17:38,340 --> 00:17:41,280
providing a capabilities profiler which

459
00:17:41,280 --> 00:17:44,940
uses etw events to trace sort of this

460
00:17:44,940 --> 00:17:47,820
audit mode of a developer's path so they

461
00:17:47,820 --> 00:17:49,559
can run through their average user test

462
00:17:49,559 --> 00:17:51,419
cases they can ship the app and ask

463
00:17:51,419 --> 00:17:53,880
their users to buy back traces we will

464
00:17:53,880 --> 00:17:57,980
then analyze those traces and produce a

465
00:17:57,980 --> 00:18:01,559
proposed app isolation policy so for

466
00:18:01,559 --> 00:18:03,240
example if your app needs access to the

467
00:18:03,240 --> 00:18:04,919
documents path and you don't know that a

468
00:18:04,919 --> 00:18:07,140
priori your users would go and run this

469
00:18:07,140 --> 00:18:08,280
for you you'd run through your test

470
00:18:08,280 --> 00:18:10,980
cases in the traces themselves we would

471
00:18:10,980 --> 00:18:13,860
see that that's a required path and then

472
00:18:13,860 --> 00:18:15,480
we would add that path into the

473
00:18:15,480 --> 00:18:18,179
isolation manifest and the file broker

474
00:18:18,179 --> 00:18:21,299
would Grant access to file Handles in

475
00:18:21,299 --> 00:18:23,340
that requested path that would also

476
00:18:23,340 --> 00:18:25,679
occur for things like registry items com

477
00:18:25,679 --> 00:18:27,299
objects

478
00:18:27,299 --> 00:18:30,840
etc etc now is this the optimal way to

479
00:18:30,840 --> 00:18:33,360
really lock down a Sandbox no but in a

480
00:18:33,360 --> 00:18:35,640
way it's a democratization of sandboxing

481
00:18:35,640 --> 00:18:37,380
we don't want sandboxing to just be the

482
00:18:37,380 --> 00:18:40,620
domain of Chrome or adobe or office we

483
00:18:40,620 --> 00:18:42,600
want most people to be isolated and then

484
00:18:42,600 --> 00:18:45,120
over time they can use this sort of open

485
00:18:45,120 --> 00:18:47,580
policy and reduce it over time to get

486
00:18:47,580 --> 00:18:49,860
stronger and stronger so we've produced

487
00:18:49,860 --> 00:18:52,620
a tool along with the isolation

488
00:18:52,620 --> 00:18:54,059
framework that makes it much more

489
00:18:54,059 --> 00:18:57,799
practical to create a policy

490
00:18:58,380 --> 00:19:00,240
so what are the other features that we

491
00:19:00,240 --> 00:19:01,980
have well in the sandbox we actually

492
00:19:01,980 --> 00:19:04,080
have roughly feature parity for what

493
00:19:04,080 --> 00:19:06,360
most things would exist in win32 now I

494
00:19:06,360 --> 00:19:08,340
say roughly because there's a zillion

495
00:19:08,340 --> 00:19:09,840
apis and I don't claim that we have

496
00:19:09,840 --> 00:19:12,179
one-to-one parity but for key use cases

497
00:19:12,179 --> 00:19:14,820
it's true we have implicit brokering we

498
00:19:14,820 --> 00:19:16,559
have manifest extension support for

499
00:19:16,559 --> 00:19:18,720
things like file type Association so you

500
00:19:18,720 --> 00:19:20,340
can associate your app things like

501
00:19:20,340 --> 00:19:22,200
automatically launch com servers that

502
00:19:22,200 --> 00:19:24,419
you might need for things like dcom and

503
00:19:24,419 --> 00:19:26,220
you can use both modern and classic

504
00:19:26,220 --> 00:19:28,380
context menus which makes it more viable

505
00:19:28,380 --> 00:19:30,780
for modern apps we also support things

506
00:19:30,780 --> 00:19:33,179
like drag and drop printing systrate

507
00:19:33,179 --> 00:19:36,960
icons and very cool if you decide you

508
00:19:36,960 --> 00:19:38,460
don't want an application to have

509
00:19:38,460 --> 00:19:40,500
permissions you can actually go back and

510
00:19:40,500 --> 00:19:42,419
revoke specific permissions which is

511
00:19:42,419 --> 00:19:44,039
something that I wanted for a long time

512
00:19:44,039 --> 00:19:46,140
and is especially critical for those of

513
00:19:46,140 --> 00:19:48,240
you who are privacy conscious not that

514
00:19:48,240 --> 00:19:50,100
anybody in here Minds having access to

515
00:19:50,100 --> 00:19:52,380
camera or microphone right

516
00:19:52,380 --> 00:19:55,320
all right so let's check out a demo this

517
00:19:55,320 --> 00:19:57,480
is going to be the most boring demo in

518
00:19:57,480 --> 00:20:00,419
the world and that's on purpose I don't

519
00:20:00,419 --> 00:20:02,220
want you to even notice this application

520
00:20:02,220 --> 00:20:05,160
is sandbox so if everything goes well

521
00:20:05,160 --> 00:20:06,360
I'll click this

522
00:20:06,360 --> 00:20:08,580
we're gonna launch from a context menu

523
00:20:08,580 --> 00:20:11,580
notepad plus plus

524
00:20:11,580 --> 00:20:13,500
also show you that we can do file

525
00:20:13,500 --> 00:20:15,720
associations in an app Silo this is

526
00:20:15,720 --> 00:20:17,160
notepad plus plus with no code

527
00:20:17,160 --> 00:20:19,080
modification running in an app container

528
00:20:19,080 --> 00:20:21,539
we can preview files we can drag and

529
00:20:21,539 --> 00:20:23,700
drop with a basic manifest

530
00:20:23,700 --> 00:20:27,000
and we can go back reset or revoke any

531
00:20:27,000 --> 00:20:28,500
of the file system permissions from the

532
00:20:28,500 --> 00:20:31,700
app from a simple UI

533
00:20:33,059 --> 00:20:35,400
yeah it is pretty cool right

534
00:20:35,400 --> 00:20:37,140
so how many you like right away would go

535
00:20:37,140 --> 00:20:39,960
sandbox notepad plus plus I would yes

536
00:20:39,960 --> 00:20:41,880
I've been running it for a while so this

537
00:20:41,880 --> 00:20:44,039
is cool again I'm not saying this is

538
00:20:44,039 --> 00:20:45,600
optimal from a security perspective

539
00:20:45,600 --> 00:20:48,179
obviously there are many many other ways

540
00:20:48,179 --> 00:20:50,700
to lock this down more but again

541
00:20:50,700 --> 00:20:53,580
I need you on board with this the goal

542
00:20:53,580 --> 00:20:55,679
is not to always optimize Security is to

543
00:20:55,679 --> 00:20:57,480
get people started and if your average

544
00:20:57,480 --> 00:20:58,860
app developer again is not going to

545
00:20:58,860 --> 00:21:01,260
write an ebpf you know complicated

546
00:21:01,260 --> 00:21:03,360
policy they can at least do this and

547
00:21:03,360 --> 00:21:05,820
this will prevent a large set of attacks

548
00:21:05,820 --> 00:21:07,620
in case the application is compromised

549
00:21:07,620 --> 00:21:10,140
which I think is massive progress

550
00:21:10,140 --> 00:21:11,640
now

551
00:21:11,640 --> 00:21:13,620
the reason right we want to get all

552
00:21:13,620 --> 00:21:15,299
these applications sandboxes not only

553
00:21:15,299 --> 00:21:16,620
because that's more secure and we have

554
00:21:16,620 --> 00:21:19,080
containment and also if we can get the

555
00:21:19,080 --> 00:21:20,640
vast majority of applications to a

556
00:21:20,640 --> 00:21:22,380
Sandbox that don't require admin

557
00:21:22,380 --> 00:21:24,720
privileges it's a much smoother path

558
00:21:24,720 --> 00:21:26,220
right towards standard user and

559
00:21:26,220 --> 00:21:28,320
enforcing that mainstream and we all

560
00:21:28,320 --> 00:21:29,820
know running as admin is like running

561
00:21:29,820 --> 00:21:31,500
with Scissors pointed right at your face

562
00:21:31,500 --> 00:21:33,780
when you trip it's not going to be good

563
00:21:33,780 --> 00:21:36,299
so how do we get there

564
00:21:36,299 --> 00:21:39,000
today standard user is pretty difficult

565
00:21:39,000 --> 00:21:41,880
to run in you don't have admin rights so

566
00:21:41,880 --> 00:21:45,179
you can't install drivers so even myself

567
00:21:45,179 --> 00:21:47,340
occasionally I'll plug in a camera or

568
00:21:47,340 --> 00:21:49,140
something something that requires a

569
00:21:49,140 --> 00:21:51,419
kernel driver or a driver running a

570
00:21:51,419 --> 00:21:54,360
system and it's a bit of a pain you

571
00:21:54,360 --> 00:21:57,059
can't Elevate today at least in very

572
00:21:57,059 --> 00:21:58,440
simple circumstances you can't write

573
00:21:58,440 --> 00:22:00,600
policies that say I just want to elevate

574
00:22:00,600 --> 00:22:02,220
for a short period of time for this

575
00:22:02,220 --> 00:22:04,200
specific scenario that's why we have so

576
00:22:04,200 --> 00:22:05,940
many Pam Solutions on the market at

577
00:22:05,940 --> 00:22:08,700
least for Enterprise folks for home

578
00:22:08,700 --> 00:22:10,919
users they don't even have Pam as a

579
00:22:10,919 --> 00:22:14,100
possibility which is is rough and

580
00:22:14,100 --> 00:22:16,140
obviously it protects from malware and

581
00:22:16,140 --> 00:22:18,900
user mistakes and what we mean by user

582
00:22:18,900 --> 00:22:20,580
mistakes is you just don't have

583
00:22:20,580 --> 00:22:23,159
privileges so you can't make the mistake

584
00:22:23,159 --> 00:22:24,960
where we want to go in the future with

585
00:22:24,960 --> 00:22:27,600
admin list is a modification of this

586
00:22:27,600 --> 00:22:31,020
we want the ability for the user to just

587
00:22:31,020 --> 00:22:33,240
in time Elevate to admin for specific

588
00:22:33,240 --> 00:22:36,539
use cases but not have the ability to

589
00:22:36,539 --> 00:22:39,179
run as a persistent admin

590
00:22:39,179 --> 00:22:41,580
so you can Elevate you know with proper

591
00:22:41,580 --> 00:22:43,559
authentication or authorization for

592
00:22:43,559 --> 00:22:45,480
something like a driver install but that

593
00:22:45,480 --> 00:22:47,640
would be temporary and then that those

594
00:22:47,640 --> 00:22:49,740
privileges would go away based on a

595
00:22:49,740 --> 00:22:51,539
specific policy

596
00:22:51,539 --> 00:22:54,059
sweet non-persistent admin rights we

597
00:22:54,059 --> 00:22:55,860
also want to move away from using

598
00:22:55,860 --> 00:22:58,200
password-based Solutions towards using

599
00:22:58,200 --> 00:23:02,039
bio both for security reasons and mostly

600
00:23:02,039 --> 00:23:05,340
for user experience so today if you run

601
00:23:05,340 --> 00:23:08,340
a standard user in Windows we actually

602
00:23:08,340 --> 00:23:11,760
default to username and log and log in

603
00:23:11,760 --> 00:23:13,620
for every elevation probably a few

604
00:23:13,620 --> 00:23:15,900
people do this in here but the fourth

605
00:23:15,900 --> 00:23:17,520
time in a session that you get asked for

606
00:23:17,520 --> 00:23:18,900
your creds to elevate you're going to

607
00:23:18,900 --> 00:23:21,120
give up and switch back to admin we need

608
00:23:21,120 --> 00:23:22,500
to make sure that we're addressing that

609
00:23:22,500 --> 00:23:25,880
by making that less frictionful and then

610
00:23:25,880 --> 00:23:29,460
this world does not protect from user

611
00:23:29,460 --> 00:23:30,960
mistakes obviously because the user can

612
00:23:30,960 --> 00:23:33,539
Elevate to admin anytime the user can if

613
00:23:33,539 --> 00:23:35,039
they want to shoot themselves in the

614
00:23:35,039 --> 00:23:38,520
foot but it does protect from malware or

615
00:23:38,520 --> 00:23:41,159
other automated or deterministic methods

616
00:23:41,159 --> 00:23:43,740
for using that require admin passwords

617
00:23:43,740 --> 00:23:46,140
so our admin credentials so for example

618
00:23:46,140 --> 00:23:47,640
exploits under the hood that want to go

619
00:23:47,640 --> 00:23:50,039
dump LSA will not work in this scenario

620
00:23:50,039 --> 00:23:52,200
unless the user explicitly off raises

621
00:23:52,200 --> 00:23:54,299
that action and the cool part about this

622
00:23:54,299 --> 00:23:57,419
is it again democratizes at uh running

623
00:23:57,419 --> 00:23:59,700
as the least privilege because you no

624
00:23:59,700 --> 00:24:01,679
longer need a sophisticated Pam solution

625
00:24:01,679 --> 00:24:04,919
although this can work with Pam as well

626
00:24:04,919 --> 00:24:09,120
so a couple of basic concepts for this

627
00:24:09,120 --> 00:24:11,580
approach you would select this approach

628
00:24:11,580 --> 00:24:13,020
out of the in the out of the box

629
00:24:13,020 --> 00:24:15,240
experience during install you'd say hey

630
00:24:15,240 --> 00:24:18,059
I'm uh ready to run uh as secure as

631
00:24:18,059 --> 00:24:20,159
possible we will generate a shadow

632
00:24:20,159 --> 00:24:22,980
non-interactive admin account we're also

633
00:24:22,980 --> 00:24:25,559
going to make a pass this is underway

634
00:24:25,559 --> 00:24:27,240
now to go across the operating system

635
00:24:27,240 --> 00:24:30,539
and look at common user operations that

636
00:24:30,539 --> 00:24:32,880
require admin today that either don't

637
00:24:32,880 --> 00:24:35,100
need to be admin or conceptually we

638
00:24:35,100 --> 00:24:36,780
could turn into a different privilege

639
00:24:36,780 --> 00:24:39,059
group and Grant it by default to this

640
00:24:39,059 --> 00:24:41,100
new admin list user we are making

641
00:24:41,100 --> 00:24:42,900
windows hello work for creds for

642
00:24:42,900 --> 00:24:44,700
elevation which I can tell you is a joy

643
00:24:44,700 --> 00:24:46,679
just using your face to elevate is so

644
00:24:46,679 --> 00:24:48,960
much better and then we are working

645
00:24:48,960 --> 00:24:51,539
across the ecosystem with the top

646
00:24:51,539 --> 00:24:55,020
third-party apps to remove unnecessary

647
00:24:55,020 --> 00:24:57,059
privileges so for example one of the

648
00:24:57,059 --> 00:24:58,320
things we just worked with actually a

649
00:24:58,320 --> 00:25:00,780
Microsoft app visual Studios removed the

650
00:25:00,780 --> 00:25:02,760
need to have admin privileges just to

651
00:25:02,760 --> 00:25:05,280
run and there's a long list in probably

652
00:25:05,280 --> 00:25:08,340
several years of work here

653
00:25:08,340 --> 00:25:10,200
so the elevation and user experience as

654
00:25:10,200 --> 00:25:12,500
I said defaults to

655
00:25:12,500 --> 00:25:15,659
bio so it's as simple as double clicking

656
00:25:15,659 --> 00:25:18,360
an XE that requires admin privileges and

657
00:25:18,360 --> 00:25:20,700
either using a fingerprint or face to

658
00:25:20,700 --> 00:25:22,980
allow those changes and here's a bit of

659
00:25:22,980 --> 00:25:24,900
a mock-up of what the UI could look like

660
00:25:24,900 --> 00:25:27,659
in the next version of Windows

661
00:25:27,659 --> 00:25:29,039
um these capabilities are coming to

662
00:25:29,039 --> 00:25:31,320
Windows in short order

663
00:25:31,320 --> 00:25:34,140
you will have access to the win32 app

664
00:25:34,140 --> 00:25:36,600
isolation after this year's build

665
00:25:36,600 --> 00:25:39,120
conference and we'll have a GitHub with

666
00:25:39,120 --> 00:25:40,559
some of the capability and profiling

667
00:25:40,559 --> 00:25:42,419
tools we're calling this a preview

668
00:25:42,419 --> 00:25:44,220
because it's not on by default in the

669
00:25:44,220 --> 00:25:46,020
operating system yet what we're trying

670
00:25:46,020 --> 00:25:47,760
to do is give developers a chance to go

671
00:25:47,760 --> 00:25:50,520
and get their apps ready to go for when

672
00:25:50,520 --> 00:25:53,220
we GA this functionality but as security

673
00:25:53,220 --> 00:25:55,020
researchers I'm sure James won't look at

674
00:25:55,020 --> 00:25:57,600
this at all but for security researchers

675
00:25:57,600 --> 00:25:58,799
who want to go and poke at those things

676
00:25:58,799 --> 00:26:00,240
obviously it's going to be within the

677
00:26:00,240 --> 00:26:01,320
Bounty and there's be a lot of

678
00:26:01,320 --> 00:26:03,960
experience so this will be fun and like

679
00:26:03,960 --> 00:26:06,779
I said it'll be coming at build 2023 and

680
00:26:06,779 --> 00:26:08,520
then with admin list Windows it'll be in

681
00:26:08,520 --> 00:26:09,779
a future version of Windows we're

682
00:26:09,779 --> 00:26:12,360
actively working on it now but it's

683
00:26:12,360 --> 00:26:14,700
important that we get the win32 app

684
00:26:14,700 --> 00:26:17,820
ecosystem to reduce privileges so that

685
00:26:17,820 --> 00:26:19,799
we're ready to go adminless and that's a

686
00:26:19,799 --> 00:26:22,080
clean experience and this is going to be

687
00:26:22,080 --> 00:26:23,760
our approach for solving one of the most

688
00:26:23,760 --> 00:26:25,500
long-standing issues which will help

689
00:26:25,500 --> 00:26:27,840
with all range of security issues from

690
00:26:27,840 --> 00:26:30,539
malicious drivers to dumping creds from

691
00:26:30,539 --> 00:26:33,360
LSA and everything in between so excited

692
00:26:33,360 --> 00:26:35,279
to see this coming

693
00:26:35,279 --> 00:26:38,220
now I want to talk about how we're

694
00:26:38,220 --> 00:26:39,779
addressing a few of the other core

695
00:26:39,779 --> 00:26:41,700
problems in our uh protecting the

696
00:26:41,700 --> 00:26:45,059
platform strategy so three major

697
00:26:45,059 --> 00:26:46,919
platform issues that we're tackling

698
00:26:46,919 --> 00:26:49,020
head-on from a security perspective are

699
00:26:49,020 --> 00:26:51,120
app signing not being required on

700
00:26:51,120 --> 00:26:53,340
Windows one of the reasons we're in this

701
00:26:53,340 --> 00:26:54,500
whack-a-mole with things like

702
00:26:54,500 --> 00:26:57,419
antiviruses we can't do real attribution

703
00:26:57,419 --> 00:27:00,240
or revocation of apps so if a developer

704
00:27:00,240 --> 00:27:02,279
makes a malicious app we can block the

705
00:27:02,279 --> 00:27:04,919
app but not the developer the concept

706
00:27:04,919 --> 00:27:06,720
with signing at least when you have

707
00:27:06,720 --> 00:27:08,820
proper identity proofs at proper CA et

708
00:27:08,820 --> 00:27:11,340
cetera is if a developer has to sign an

709
00:27:11,340 --> 00:27:13,440
app and provide a real world identity

710
00:27:13,440 --> 00:27:15,659
whether that's a business entity or a

711
00:27:15,659 --> 00:27:18,299
user if they introduce malware or some

712
00:27:18,299 --> 00:27:20,880
other nefarious application not only do

713
00:27:20,880 --> 00:27:22,380
you block the app but you block the

714
00:27:22,380 --> 00:27:24,840
individual and if you have a functioning

715
00:27:24,840 --> 00:27:27,360
CA system that individual should not be

716
00:27:27,360 --> 00:27:29,100
able to come back the next day and get a

717
00:27:29,100 --> 00:27:30,900
you know developer signing cert that

718
00:27:30,900 --> 00:27:33,179
have to do more sophisticated real world

719
00:27:33,179 --> 00:27:35,520
things like passport faking or other

720
00:27:35,520 --> 00:27:38,460
kinds of things to get a certificate now

721
00:27:38,460 --> 00:27:40,380
that's obviously not perfect but it's a

722
00:27:40,380 --> 00:27:41,940
heck a lot better than writing a bunch

723
00:27:41,940 --> 00:27:43,559
of yaras and trying to track every

724
00:27:43,559 --> 00:27:46,500
possible op code sequence for uh the

725
00:27:46,500 --> 00:27:48,960
same representation so this is a very

726
00:27:48,960 --> 00:27:51,299
important step forward in securing

727
00:27:51,299 --> 00:27:54,120
windows the second is a comprehensive

728
00:27:54,120 --> 00:27:56,940
credential protection obviously having a

729
00:27:56,940 --> 00:28:00,059
removing admin will help a lot with very

730
00:28:00,059 --> 00:28:03,299
common you know Mimi cats and uh other

731
00:28:03,299 --> 00:28:06,600
LSA dumping tool approaches but as we

732
00:28:06,600 --> 00:28:08,820
move to more modern authentication types

733
00:28:08,820 --> 00:28:10,740
that use things like Bearer tokens just

734
00:28:10,740 --> 00:28:13,559
delivered by cookies we're seeing more

735
00:28:13,559 --> 00:28:15,659
and more attacks in this space and

736
00:28:15,659 --> 00:28:17,580
windows needs to evolve the platform to

737
00:28:17,580 --> 00:28:20,520
address those and then finally security

738
00:28:20,520 --> 00:28:22,980
processor fundamentals while the TPM has

739
00:28:22,980 --> 00:28:24,779
been great for a number of these

740
00:28:24,779 --> 00:28:26,760
scenarios everything from secure boot to

741
00:28:26,760 --> 00:28:29,220
being able to store Keys the TPMS

742
00:28:29,220 --> 00:28:30,720
themselves are not in the most healthy

743
00:28:30,720 --> 00:28:33,720
State many TPMS are vulnerable and not

744
00:28:33,720 --> 00:28:36,260
updated or in states of dysfunction

745
00:28:36,260 --> 00:28:38,760
based on a number of different factors

746
00:28:38,760 --> 00:28:41,039
and so things like Microsoft pluton

747
00:28:41,039 --> 00:28:42,900
coming into the ecosystem to provide a

748
00:28:42,900 --> 00:28:44,940
more consistent experience is a big bet

749
00:28:44,940 --> 00:28:46,919
we're making

750
00:28:46,919 --> 00:28:48,539
so I want to talk about smart app

751
00:28:48,539 --> 00:28:51,500
control this is our attempt to again

752
00:28:51,500 --> 00:28:53,760
democratize what's been used in the

753
00:28:53,760 --> 00:28:55,860
Enterprise for a long time as a very

754
00:28:55,860 --> 00:28:58,799
powerful approach and that is writing an

755
00:28:58,799 --> 00:29:00,720
application control policy based on code

756
00:29:00,720 --> 00:29:04,080
signing to either to to allow or

757
00:29:04,080 --> 00:29:06,900
disallow specific apps so what smart app

758
00:29:06,900 --> 00:29:10,020
control does is it auto generates a

759
00:29:10,020 --> 00:29:12,120
policy under the hood using double DAC

760
00:29:12,120 --> 00:29:15,000
based on what the defender Cloud sees as

761
00:29:15,000 --> 00:29:17,460
the most commonly used apps in a

762
00:29:17,460 --> 00:29:19,200
nutshell you can think of it as

763
00:29:19,200 --> 00:29:21,179
monitoring the top apps in the ecosystem

764
00:29:21,179 --> 00:29:23,940
that are used by millions of users and

765
00:29:23,940 --> 00:29:26,460
not known to have any nefarious issues

766
00:29:26,460 --> 00:29:30,600
and then generating that policy as a

767
00:29:30,600 --> 00:29:32,820
baseline for app control what that

768
00:29:32,820 --> 00:29:35,460
allows us to do is say the vast majority

769
00:29:35,460 --> 00:29:37,559
of apps at least for common consumer

770
00:29:37,559 --> 00:29:40,740
users will just work and any application

771
00:29:40,740 --> 00:29:43,860
that was auto-generated you know just in

772
00:29:43,860 --> 00:29:45,840
time by an attacker using a packer or

773
00:29:45,840 --> 00:29:48,360
something like that to evade AV will not

774
00:29:48,360 --> 00:29:51,000
work in addition applications that are

775
00:29:51,000 --> 00:29:53,340
signed by entities that have an

776
00:29:53,340 --> 00:29:55,919
established reputation or trust that we

777
00:29:55,919 --> 00:29:58,260
that we assign based on a reputation

778
00:29:58,260 --> 00:30:00,899
again in our backend Cloud will not run

779
00:30:00,899 --> 00:30:03,320
by default they will have to generate

780
00:30:03,320 --> 00:30:06,419
trust or reputation on other platforms

781
00:30:06,419 --> 00:30:08,520
like Windows 10 or Windows 7 before

782
00:30:08,520 --> 00:30:10,200
they'll be allowed to run

783
00:30:10,200 --> 00:30:13,260
the reason we went with this approach is

784
00:30:13,260 --> 00:30:16,140
we do not have a centralized App Store

785
00:30:16,140 --> 00:30:17,880
that we're willing to push everyone into

786
00:30:17,880 --> 00:30:20,100
there are many complexities with doing

787
00:30:20,100 --> 00:30:22,020
that interspersing security with like

788
00:30:22,020 --> 00:30:25,020
business and revenue and also one of the

789
00:30:25,020 --> 00:30:26,880
powerful constructs of Windows I think

790
00:30:26,880 --> 00:30:28,740
most of you agree with is I want to get

791
00:30:28,740 --> 00:30:30,840
my apps where I want to get my apps if I

792
00:30:30,840 --> 00:30:32,100
wanted to download the app from a

793
00:30:32,100 --> 00:30:33,360
torrent client I should be able to do

794
00:30:33,360 --> 00:30:34,799
that if I want to pull it from a file

795
00:30:34,799 --> 00:30:36,600
share I should be able to do that if I

796
00:30:36,600 --> 00:30:38,039
want to download it from a website I

797
00:30:38,039 --> 00:30:40,020
should be able to do that so what smart

798
00:30:40,020 --> 00:30:42,899
app control allows us to do is enforce

799
00:30:42,899 --> 00:30:44,940
powerful proven application control

800
00:30:44,940 --> 00:30:48,000
approaches without the extra work of

801
00:30:48,000 --> 00:30:49,980
having to generate a policy and without

802
00:30:49,980 --> 00:30:52,260
the work of forcing every application to

803
00:30:52,260 --> 00:30:54,299
be in an app store but it provides

804
00:30:54,299 --> 00:30:56,399
similar security value

805
00:30:56,399 --> 00:30:58,620
in addition this is something that I

806
00:30:58,620 --> 00:31:00,659
think many of you will like when you're

807
00:31:00,659 --> 00:31:02,580
running in smart app control mode not

808
00:31:02,580 --> 00:31:04,559
only are you using this policy that's

809
00:31:04,559 --> 00:31:07,200
auto-generated by the cloud but we also

810
00:31:07,200 --> 00:31:09,480
block all scripting types from the

811
00:31:09,480 --> 00:31:13,260
internet so Powershell PS1 scripts lnk

812
00:31:13,260 --> 00:31:15,299
files all of the things you would

813
00:31:15,299 --> 00:31:18,299
associate with kind of file lists or

814
00:31:18,299 --> 00:31:20,580
living off the land style attacks will

815
00:31:20,580 --> 00:31:23,520
not run if they come from the internet

816
00:31:23,520 --> 00:31:26,159
yeah it's pretty powerful so it's you

817
00:31:26,159 --> 00:31:27,779
know taking the office construct and

818
00:31:27,779 --> 00:31:30,480
applying it to uh Visual Basic scripts

819
00:31:30,480 --> 00:31:31,559
Etc

820
00:31:31,559 --> 00:31:34,860
um I often gleefully download hashes

821
00:31:34,860 --> 00:31:38,039
that people put on for the latest lnk to

822
00:31:38,039 --> 00:31:40,860
VBS to Powershell and back and forth and

823
00:31:40,860 --> 00:31:42,659
I'll tell you this is a very effective

824
00:31:42,659 --> 00:31:45,120
against those style of attacks uh and so

825
00:31:45,120 --> 00:31:47,279
we're excited that that's there now this

826
00:31:47,279 --> 00:31:49,320
is obviously not for everyone many of

827
00:31:49,320 --> 00:31:50,640
you are Empower users here and say

828
00:31:50,640 --> 00:31:52,919
Microsoft get out of my way cool no

829
00:31:52,919 --> 00:31:54,539
problem go in settings

830
00:31:54,539 --> 00:31:55,919
turn it off you don't even have to

831
00:31:55,919 --> 00:31:57,659
reboot it's just there

832
00:31:57,659 --> 00:31:59,520
so we're giving a lot of flexibility

833
00:31:59,520 --> 00:32:02,640
around this uh right um so we're taking

834
00:32:02,640 --> 00:32:04,080
some of the values from things like S

835
00:32:04,080 --> 00:32:07,380
Mode and making it easier to deploy

836
00:32:07,380 --> 00:32:09,360
so here's a great example of a real

837
00:32:09,360 --> 00:32:11,100
world attack

838
00:32:11,100 --> 00:32:14,399
um in this case uh it was a dll that was

839
00:32:14,399 --> 00:32:16,980
found Defender had partial protection

840
00:32:16,980 --> 00:32:19,679
took about 36 hours for the signatures

841
00:32:19,679 --> 00:32:22,260
to pump out worldwide in between being

842
00:32:22,260 --> 00:32:24,899
aware of this malicious file and a

843
00:32:24,899 --> 00:32:27,419
signature being available about 5 000

844
00:32:27,419 --> 00:32:29,520
devices were infected

845
00:32:29,520 --> 00:32:32,340
smart app control which is now on by

846
00:32:32,340 --> 00:32:33,960
default for many users with the latest

847
00:32:33,960 --> 00:32:35,940
release of Windows 10. in this

848
00:32:35,940 --> 00:32:38,580
particular case had no infections and

849
00:32:38,580 --> 00:32:40,500
that's because the dll itself has no

850
00:32:40,500 --> 00:32:43,260
reputation uh so even though it's not

851
00:32:43,260 --> 00:32:45,600
known to be malicious a priori it simply

852
00:32:45,600 --> 00:32:48,059
hadn't got enough reputation and this is

853
00:32:48,059 --> 00:32:51,620
what we expect to be the commonplace

854
00:32:51,659 --> 00:32:54,480
now again we talked about how this is

855
00:32:54,480 --> 00:32:56,760
probably not for every user if I rolled

856
00:32:56,760 --> 00:32:58,559
this out on all of your machines and Ida

857
00:32:58,559 --> 00:32:59,840
didn't start up with your favorite

858
00:32:59,840 --> 00:33:02,220
random plug-in you'd probably be mad at

859
00:33:02,220 --> 00:33:05,159
me and tweeting me uh and so what we're

860
00:33:05,159 --> 00:33:07,799
trying to do is use AI not only to

861
00:33:07,799 --> 00:33:10,320
generate the policy but also to

862
00:33:10,320 --> 00:33:12,480
determine whether this machine looks

863
00:33:12,480 --> 00:33:14,399
like it should be turned on so the way

864
00:33:14,399 --> 00:33:16,679
smart app control works is if you clean

865
00:33:16,679 --> 00:33:19,380
install Windows 11 we'll run in audit

866
00:33:19,380 --> 00:33:21,899
mode for about 30 days or so

867
00:33:21,899 --> 00:33:23,700
and we'll look at the tools and other

868
00:33:23,700 --> 00:33:26,100
applications that run in your system if

869
00:33:26,100 --> 00:33:28,200
you're running things like Ida and hex

870
00:33:28,200 --> 00:33:29,820
editors and things like that you're

871
00:33:29,820 --> 00:33:31,679
probably not a good candidate for this

872
00:33:31,679 --> 00:33:32,940
getting flipped on to enforcement

873
00:33:32,940 --> 00:33:34,380
although you can do it yourself if you

874
00:33:34,380 --> 00:33:37,260
want if you're just cool with chrome and

875
00:33:37,260 --> 00:33:40,620
a VPN client and some Netflix thing or

876
00:33:40,620 --> 00:33:41,700
whatever

877
00:33:41,700 --> 00:33:43,080
Spotify

878
00:33:43,080 --> 00:33:45,240
cool you can run with app control no

879
00:33:45,240 --> 00:33:46,679
problem and you're protected from a lot

880
00:33:46,679 --> 00:33:49,140
of things so again this is to avoid

881
00:33:49,140 --> 00:33:51,659
things like dialogue fatigue and all the

882
00:33:51,659 --> 00:33:54,539
annoying stuff that um you know you

883
00:33:54,539 --> 00:33:56,159
would probably revolt against if we

884
00:33:56,159 --> 00:33:58,080
actually enforced and so the hard I

885
00:33:58,080 --> 00:34:01,919
think value of this feature is

886
00:34:01,919 --> 00:34:03,659
um you know finding that right balance

887
00:34:03,659 --> 00:34:05,580
it's not the optimal security you can go

888
00:34:05,580 --> 00:34:07,019
in and write your own policy if you want

889
00:34:07,019 --> 00:34:09,300
you can get hardcore this is not about

890
00:34:09,300 --> 00:34:11,099
being the most hardcore it's about

891
00:34:11,099 --> 00:34:13,619
targeting and again democratizing good

892
00:34:13,619 --> 00:34:15,899
security Technologies so we expect with

893
00:34:15,899 --> 00:34:17,580
this first rollout to hit roughly 20

894
00:34:17,580 --> 00:34:19,139
percent of users in this enforcement

895
00:34:19,139 --> 00:34:21,540
mode uh and then over time ratchet that

896
00:34:21,540 --> 00:34:24,359
up as we get good results

897
00:34:24,359 --> 00:34:25,619
so the next thing I want to talk about

898
00:34:25,619 --> 00:34:28,320
quickly because as usual I packed this

899
00:34:28,320 --> 00:34:30,119
with way more stuff than I have time for

900
00:34:30,119 --> 00:34:32,280
is our pluton security processor

901
00:34:32,280 --> 00:34:34,080
actually the machine I'm presenting on

902
00:34:34,080 --> 00:34:37,560
now has pluton and this is our security

903
00:34:37,560 --> 00:34:40,080
processor designed by Microsoft based on

904
00:34:40,080 --> 00:34:42,359
the Silicon IP that's been used in

905
00:34:42,359 --> 00:34:44,040
things like Azure sphere which is a

906
00:34:44,040 --> 00:34:47,099
super secure uh iot device as well as

907
00:34:47,099 --> 00:34:49,679
Xbox we designed it an Xbox to be

908
00:34:49,679 --> 00:34:51,659
resilient to physical attacks the threat

909
00:34:51,659 --> 00:34:53,399
model of Xbox and I encourage you to go

910
00:34:53,399 --> 00:34:56,339
back to I think blue hat 2019 Seattle or

911
00:34:56,339 --> 00:34:58,560
Tony Chen talked about our threat model

912
00:34:58,560 --> 00:35:00,359
and how we build the Xbox for physical

913
00:35:00,359 --> 00:35:03,780
attacks we worked with processor

914
00:35:03,780 --> 00:35:05,700
companies like AMD to actually integrate

915
00:35:05,700 --> 00:35:09,000
this on die by moving this on die we

916
00:35:09,000 --> 00:35:10,619
reduce the attack surface of what you

917
00:35:10,619 --> 00:35:12,000
can do physically against things like

918
00:35:12,000 --> 00:35:14,940
buses and fault injection Etc and so we

919
00:35:14,940 --> 00:35:16,260
actually are more resilient to physical

920
00:35:16,260 --> 00:35:19,260
attacks which helps a lot but the major

921
00:35:19,260 --> 00:35:21,000
advantage from my perspective with

922
00:35:21,000 --> 00:35:23,460
pluton is Microsoft writes the firmware

923
00:35:23,460 --> 00:35:25,320
and can keep it up to date

924
00:35:25,320 --> 00:35:28,500
the huge problem in the ecosystem that

925
00:35:28,500 --> 00:35:30,119
Microsoft sees their own data and

926
00:35:30,119 --> 00:35:32,579
Telemetry is that while TPMS are super

927
00:35:32,579 --> 00:35:34,320
valuable for things like multi-factor

928
00:35:34,320 --> 00:35:36,960
authentication and required for 502

929
00:35:36,960 --> 00:35:41,280
hello key storage you name it many uh of

930
00:35:41,280 --> 00:35:44,099
the TPMS out there are in a states of

931
00:35:44,099 --> 00:35:46,440
disrepair either out of date because the

932
00:35:46,440 --> 00:35:48,780
OEM manufacturer did an onboard firmware

933
00:35:48,780 --> 00:35:50,940
updates to Windows update so the

934
00:35:50,940 --> 00:35:52,500
firmware those updates may be out there

935
00:35:52,500 --> 00:35:54,780
but they're not installed on on a good

936
00:35:54,780 --> 00:35:57,540
chunk of users or the hardware itself is

937
00:35:57,540 --> 00:35:58,980
coming to some sort of disrepair

938
00:35:58,980 --> 00:36:02,579
firmware issues hardware issues ETC so

939
00:36:02,579 --> 00:36:06,300
when we have this large set of basically

940
00:36:06,300 --> 00:36:09,660
malfunctioning TPMS and no way to fix it

941
00:36:09,660 --> 00:36:11,700
you know pluton is our approach to

942
00:36:11,700 --> 00:36:13,020
getting more consistency in the

943
00:36:13,020 --> 00:36:16,320
ecosystem so uh pluton is designed by

944
00:36:16,320 --> 00:36:18,720
default to be easily updatable in a high

945
00:36:18,720 --> 00:36:20,220
integrity and secure manner from the

946
00:36:20,220 --> 00:36:22,079
operating system that's a design goal

947
00:36:22,079 --> 00:36:24,599
and so with pluton you can get firmware

948
00:36:24,599 --> 00:36:26,760
updates automatically for Wu as as long

949
00:36:26,760 --> 00:36:28,619
as you have a processor that supports it

950
00:36:28,619 --> 00:36:31,140
which is a you know in 2023 it might

951
00:36:31,140 --> 00:36:32,760
sound like table Stakes but obviously

952
00:36:32,760 --> 00:36:35,640
it's critical the second thing that we

953
00:36:35,640 --> 00:36:37,920
think is very important for pluton is we

954
00:36:37,920 --> 00:36:40,260
are moving towards you guessed it memory

955
00:36:40,260 --> 00:36:42,839
safe language with rust we're not there

956
00:36:42,839 --> 00:36:44,339
yet but it's something we're working on

957
00:36:44,339 --> 00:36:47,420
thank you thank you

958
00:36:47,880 --> 00:36:50,220
last month there was actually a really

959
00:36:50,220 --> 00:36:51,180
really

960
00:36:51,180 --> 00:36:53,220
um interesting issue I think if I'm not

961
00:36:53,220 --> 00:36:55,680
wrong discovered by uh quarks lab it was

962
00:36:55,680 --> 00:36:58,079
a memory safety issue in all TPM roughly

963
00:36:58,079 --> 00:37:00,720
a good chunk of the TPM reference

964
00:37:00,720 --> 00:37:02,940
implementations out there so those types

965
00:37:02,940 --> 00:37:04,980
of memory safety issues in The Trusted

966
00:37:04,980 --> 00:37:06,960
Computing base are real and they

967
00:37:06,960 --> 00:37:08,460
arguably are some of the most painful

968
00:37:08,460 --> 00:37:10,859
not only because if the TPM is

969
00:37:10,859 --> 00:37:13,320
compromised you have potentially access

970
00:37:13,320 --> 00:37:15,839
to all sorts of things but TPMS

971
00:37:15,839 --> 00:37:16,980
themselves when they have to be update

972
00:37:16,980 --> 00:37:18,839
can sometimes have to reset State and

973
00:37:18,839 --> 00:37:21,119
it's very painful for the user so having

974
00:37:21,119 --> 00:37:22,800
something like rust for memory safety

975
00:37:22,800 --> 00:37:24,720
there is super critical and we're

976
00:37:24,720 --> 00:37:27,359
working hard to to realize that

977
00:37:27,359 --> 00:37:30,240
we're also making pluton easy to use

978
00:37:30,240 --> 00:37:33,300
across the operating system so common uh

979
00:37:33,300 --> 00:37:35,160
key manipulation and crypto apis like

980
00:37:35,160 --> 00:37:37,020
encrypt will actually have the ability

981
00:37:37,020 --> 00:37:39,200
to use pluton as a key service provider

982
00:37:39,200 --> 00:37:41,820
and very importantly for the next slides

983
00:37:41,820 --> 00:37:44,400
we will actually provide in the future

984
00:37:44,400 --> 00:37:46,920
the ability to protect things like PRT

985
00:37:46,920 --> 00:37:49,760
tokens and other modern

986
00:37:49,760 --> 00:37:52,619
constructs directly in pluton by

987
00:37:52,619 --> 00:37:54,599
integrating with Azure active directory

988
00:37:54,599 --> 00:37:57,240
and InTune

989
00:37:57,240 --> 00:38:00,000
so I want to talk about a larger problem

990
00:38:00,000 --> 00:38:01,920
we're seeing particularly in cases like

991
00:38:01,920 --> 00:38:05,040
solar winds of increasingly targeting

992
00:38:05,040 --> 00:38:07,500
oauth and other Bearer tokens that come

993
00:38:07,500 --> 00:38:10,440
from cloud service authentication uh

994
00:38:10,440 --> 00:38:12,900
like Azure active directory so today

995
00:38:12,900 --> 00:38:15,960
they are much smaller than say ntlm

996
00:38:15,960 --> 00:38:18,480
theft at least in the credential theft

997
00:38:18,480 --> 00:38:20,640
Telemetry we have but they're still

998
00:38:20,640 --> 00:38:23,339
potentially thousands of instances uh

999
00:38:23,339 --> 00:38:25,560
Azure active directory reported over 60

1000
00:38:25,560 --> 00:38:27,180
000 token replay attacks in February

1001
00:38:27,180 --> 00:38:29,700
2023 which is an increase

1002
00:38:29,700 --> 00:38:32,160
and the potential damage of a successful

1003
00:38:32,160 --> 00:38:33,960
Bearer token replay attack might be

1004
00:38:33,960 --> 00:38:37,140
bypassing conditional access strong auth

1005
00:38:37,140 --> 00:38:39,240
or other common controls that are based

1006
00:38:39,240 --> 00:38:41,099
on authentication which is a huge

1007
00:38:41,099 --> 00:38:43,260
concern for especially for federal or

1008
00:38:43,260 --> 00:38:45,720
sorry for Enterprise customers

1009
00:38:45,720 --> 00:38:48,300
so I'm gonna Breeze through this I think

1010
00:38:48,300 --> 00:38:49,680
most of you will be familiar with this

1011
00:38:49,680 --> 00:38:51,420
but a standard Bearer token request to

1012
00:38:51,420 --> 00:38:54,119
Azure active directory starts with a

1013
00:38:54,119 --> 00:38:56,520
Long Live auth request to Azure ad where

1014
00:38:56,520 --> 00:38:58,079
you may have MFA or other proofs

1015
00:38:58,079 --> 00:39:00,599
required that response comes down with a

1016
00:39:00,599 --> 00:39:02,940
access token and a refresh token that

1017
00:39:02,940 --> 00:39:05,160
refresh token can be used to powerfully

1018
00:39:05,160 --> 00:39:08,640
uh derive tokens for different things

1019
00:39:08,640 --> 00:39:11,220
for example apps or app Scopes or policy

1020
00:39:11,220 --> 00:39:13,079
Scopes and then you can make additional

1021
00:39:13,079 --> 00:39:15,300
requests for applications like Office

1022
00:39:15,300 --> 00:39:19,440
365 using that access token

1023
00:39:19,440 --> 00:39:21,359
I'm gonna have to speed through this but

1024
00:39:21,359 --> 00:39:23,640
this is a hierarchy of the different

1025
00:39:23,640 --> 00:39:25,680
credential material that's involved both

1026
00:39:25,680 --> 00:39:28,260
in sign in sessions and app sessions I

1027
00:39:28,260 --> 00:39:30,119
think the important piece for this

1028
00:39:30,119 --> 00:39:32,460
audience is getting access to the

1029
00:39:32,460 --> 00:39:35,099
primary refresh token will enable you to

1030
00:39:35,099 --> 00:39:36,960
get authorization for most things that

1031
00:39:36,960 --> 00:39:39,480
that user has access to and it will be

1032
00:39:39,480 --> 00:39:40,800
tied to the credentials in which they

1033
00:39:40,800 --> 00:39:43,380
signed into the machine and that is true

1034
00:39:43,380 --> 00:39:45,540
for both native and web applications

1035
00:39:45,540 --> 00:39:48,720
using aad if you're familiar with for

1036
00:39:48,720 --> 00:39:50,700
folks like Dirk yon who has a tool

1037
00:39:50,700 --> 00:39:52,260
called Road tools which is a very

1038
00:39:52,260 --> 00:39:55,260
powerful tool set we're seeing more and

1039
00:39:55,260 --> 00:39:57,960
more particularly State actors using

1040
00:39:57,960 --> 00:40:01,320
those tool sets to attack folks using a

1041
00:40:01,320 --> 00:40:04,619
Federated identity like aad SSO

1042
00:40:04,619 --> 00:40:07,079
so solving this has become a very

1043
00:40:07,079 --> 00:40:09,000
important problem for the platform

1044
00:40:09,000 --> 00:40:11,520
token theft looks like this you can

1045
00:40:11,520 --> 00:40:15,180
intercept the requests using a proxy

1046
00:40:15,180 --> 00:40:17,220
you could be a malicious Insider or

1047
00:40:17,220 --> 00:40:18,480
piece of malware just taking those

1048
00:40:18,480 --> 00:40:19,920
directly off the machine that's why

1049
00:40:19,920 --> 00:40:21,599
storing them in Hardware makes a ton of

1050
00:40:21,599 --> 00:40:24,180
sense or in some really terrible cases

1051
00:40:24,180 --> 00:40:26,880
you may see Server logs logging these

1052
00:40:26,880 --> 00:40:28,260
tokens

1053
00:40:28,260 --> 00:40:30,540
they can then be replayed the reason you

1054
00:40:30,540 --> 00:40:32,460
might want to replay these is if you're

1055
00:40:32,460 --> 00:40:34,680
on a if you want to attack a network for

1056
00:40:34,680 --> 00:40:37,020
example that has EDR or xdr or whatever

1057
00:40:37,020 --> 00:40:40,500
Dr that's as popular these days and you

1058
00:40:40,500 --> 00:40:43,260
would like to avoid being detected you

1059
00:40:43,260 --> 00:40:45,300
might use tradecraft to get onto the

1060
00:40:45,300 --> 00:40:47,700
machine immediately get access to a PRT

1061
00:40:47,700 --> 00:40:50,160
or an access token and then take that

1062
00:40:50,160 --> 00:40:52,980
that credential material to say a VM

1063
00:40:52,980 --> 00:40:55,680
somewhere in the cloud that doesn't have

1064
00:40:55,680 --> 00:40:58,200
visibility and use that to log into the

1065
00:40:58,200 --> 00:41:00,960
cloud we saw that tradecraft and solar

1066
00:41:00,960 --> 00:41:02,760
winds attackers and we've seen it across

1067
00:41:02,760 --> 00:41:04,800
the board it's becoming more and more

1068
00:41:04,800 --> 00:41:06,660
common as zero trust Solutions become

1069
00:41:06,660 --> 00:41:08,820
more critical path attackers don't want

1070
00:41:08,820 --> 00:41:10,320
to get caught they want persistent

1071
00:41:10,320 --> 00:41:12,180
access so it's now become really

1072
00:41:12,180 --> 00:41:14,820
important to use these tokens off box in

1073
00:41:14,820 --> 00:41:17,460
order to avoid detection

1074
00:41:17,460 --> 00:41:19,440
so as a result we've come up with a

1075
00:41:19,440 --> 00:41:21,900
token protection approach it's actually

1076
00:41:21,900 --> 00:41:24,000
quite simple for that initial login

1077
00:41:24,000 --> 00:41:26,460
around the PRT token what we're using is

1078
00:41:26,460 --> 00:41:30,000
a cryptographic approach to bind that

1079
00:41:30,000 --> 00:41:34,440
PRT token to the device using TPM and

1080
00:41:34,440 --> 00:41:36,839
virtualization based security to that

1081
00:41:36,839 --> 00:41:39,900
device so that means that PRT token once

1082
00:41:39,900 --> 00:41:41,660
it's issued in authorization

1083
00:41:41,660 --> 00:41:44,040
authentication happens it cannot be

1084
00:41:44,040 --> 00:41:46,320
taken to a VM in some foreign country

1085
00:41:46,320 --> 00:41:48,420
across the world it can only be used on

1086
00:41:48,420 --> 00:41:50,400
the device that has that Hardware now

1087
00:41:50,400 --> 00:41:51,960
that doesn't stop you from proxying

1088
00:41:51,960 --> 00:41:54,000
malware or other things but it does stop

1089
00:41:54,000 --> 00:41:55,500
that specific instance where you're

1090
00:41:55,500 --> 00:41:58,320
trying to avoid zero trust or visibility

1091
00:41:58,320 --> 00:42:00,359
on the device and you will have to

1092
00:42:00,359 --> 00:42:02,160
operate on the device in which uh the

1093
00:42:02,160 --> 00:42:06,319
token was issued which is very valuable

1094
00:42:06,540 --> 00:42:08,760
device registration again will just

1095
00:42:08,760 --> 00:42:11,040
include you setting up initially your

1096
00:42:11,040 --> 00:42:12,960
device for that initial login you'll get

1097
00:42:12,960 --> 00:42:15,420
a device and binding your keys and then

1098
00:42:15,420 --> 00:42:17,540
token sign-in sessions in the future

1099
00:42:17,540 --> 00:42:21,900
will uh be predicated on using or having

1100
00:42:21,900 --> 00:42:23,760
access to keys that are now stored in

1101
00:42:23,760 --> 00:42:26,280
Secure key storage the solution we're

1102
00:42:26,280 --> 00:42:28,560
working on today is based on

1103
00:42:28,560 --> 00:42:29,880
virtualization-based security it's

1104
00:42:29,880 --> 00:42:32,400
called keyguard keyguard is a nice blend

1105
00:42:32,400 --> 00:42:34,440
of hardware-based security with

1106
00:42:34,440 --> 00:42:37,140
increased performance over the TPM and

1107
00:42:37,140 --> 00:42:39,780
so as we work on making pluton and other

1108
00:42:39,780 --> 00:42:42,060
processors more capable we're using

1109
00:42:42,060 --> 00:42:43,980
virtualization-based Security today to

1110
00:42:43,980 --> 00:42:45,720
protect that key and bind it to the

1111
00:42:45,720 --> 00:42:48,060
specific Hardware

1112
00:42:48,060 --> 00:42:50,640
keep jamming

1113
00:42:50,640 --> 00:42:53,640
so this token binding approach will is

1114
00:42:53,640 --> 00:42:55,260
supporting the operating system today

1115
00:42:55,260 --> 00:42:57,240
for those of you who like to dig around

1116
00:42:57,240 --> 00:42:59,099
in headers or public files you'll

1117
00:42:59,099 --> 00:43:00,780
actually see encrypt and all the

1118
00:43:00,780 --> 00:43:03,300
standard key storage apis actually allow

1119
00:43:03,300 --> 00:43:05,280
you to pass a constant to store and

1120
00:43:05,280 --> 00:43:07,800
manipulate keys in virtualization-based

1121
00:43:07,800 --> 00:43:10,140
security so all of The Primitives from a

1122
00:43:10,140 --> 00:43:12,599
operating system perspective are there

1123
00:43:12,599 --> 00:43:15,839
and we are looking at broader support in

1124
00:43:15,839 --> 00:43:18,480
things like Azure ad over time uh

1125
00:43:18,480 --> 00:43:19,680
there's it's currently in private

1126
00:43:19,680 --> 00:43:21,420
preview and expect that to expand in the

1127
00:43:21,420 --> 00:43:23,700
next year or so so again this is a

1128
00:43:23,700 --> 00:43:25,560
really important step in protecting

1129
00:43:25,560 --> 00:43:27,839
modern Bearer credentials on the Windows

1130
00:43:27,839 --> 00:43:29,700
platform

1131
00:43:29,700 --> 00:43:31,319
and I know none of you care about this

1132
00:43:31,319 --> 00:43:32,880
but for the last segment I'm going to

1133
00:43:32,880 --> 00:43:33,960
talk to you about all the cool stuff

1134
00:43:33,960 --> 00:43:35,400
we're doing with rust

1135
00:43:35,400 --> 00:43:37,980
so memory safety in Windows is important

1136
00:43:37,980 --> 00:43:40,619
for a bunch of reasons first it's the

1137
00:43:40,619 --> 00:43:44,040
dominant msrc and um bug primitive that

1138
00:43:44,040 --> 00:43:46,980
we get across the board so again all of

1139
00:43:46,980 --> 00:43:48,720
these vulnerabilities are opportunity

1140
00:43:48,720 --> 00:43:50,339
for exploits we think of them as

1141
00:43:50,339 --> 00:43:52,440
potential risk and exploits as

1142
00:43:52,440 --> 00:43:54,000
actualized risk

1143
00:43:54,000 --> 00:43:56,460
and over time we've learned that as

1144
00:43:56,460 --> 00:43:57,980
we've targeted

1145
00:43:57,980 --> 00:44:00,839
exploit constructs with things like xfg

1146
00:44:00,839 --> 00:44:04,500
CFG or anti-exploitation techniques we

1147
00:44:04,500 --> 00:44:06,660
think we've run out of steam on ways to

1148
00:44:06,660 --> 00:44:08,579
stop exploit techniques and we need to

1149
00:44:08,579 --> 00:44:11,220
move our Focus to bug classes so we have

1150
00:44:11,220 --> 00:44:14,940
a challenge of the general linear growth

1151
00:44:14,940 --> 00:44:16,619
in the number of memory safety

1152
00:44:16,619 --> 00:44:19,079
vulnerabilities and a reduction in

1153
00:44:19,079 --> 00:44:21,540
viability of our exploit mitigations

1154
00:44:21,540 --> 00:44:24,480
which means we're a bit of a trough and

1155
00:44:24,480 --> 00:44:26,960
need to re-look at our strategy

1156
00:44:26,960 --> 00:44:30,060
our strategy is to increase investment

1157
00:44:30,060 --> 00:44:32,760
in bug class elimination but so far

1158
00:44:32,760 --> 00:44:34,859
that's been incremental that means we've

1159
00:44:34,859 --> 00:44:36,660
done things like automatic variable

1160
00:44:36,660 --> 00:44:38,520
initialization for stack variables on

1161
00:44:38,520 --> 00:44:40,740
the compiler very cool but that's a

1162
00:44:40,740 --> 00:44:42,839
narrow bug class we've done things like

1163
00:44:42,839 --> 00:44:46,500
introduce type safety with Cask or uh uh

1164
00:44:46,500 --> 00:44:50,099
for casting types we've introduced uh

1165
00:44:50,099 --> 00:44:51,839
protection for things like cast guard

1166
00:44:51,839 --> 00:44:54,000
that help with again very similar bug

1167
00:44:54,000 --> 00:44:55,980
classes but we're talking about you know

1168
00:44:55,980 --> 00:44:57,960
a few percentage points across the board

1169
00:44:57,960 --> 00:45:00,300
not the kind of progress we want to get

1170
00:45:00,300 --> 00:45:02,520
such a big problem and that's caused us

1171
00:45:02,520 --> 00:45:04,619
to rethink our strategy so are there

1172
00:45:04,619 --> 00:45:06,480
really three tools in the toolbox for

1173
00:45:06,480 --> 00:45:08,760
memory safety and windows the first is

1174
00:45:08,760 --> 00:45:11,700
memory safe languages that can be the

1175
00:45:11,700 --> 00:45:13,619
safer versions of c-sharp which we call

1176
00:45:13,619 --> 00:45:16,200
system C sharp that could be golang or

1177
00:45:16,200 --> 00:45:18,359
more commonly rust I'm sure people will

1178
00:45:18,359 --> 00:45:21,060
be excited about rust the second is

1179
00:45:21,060 --> 00:45:23,640
architectural changes David tsar and

1180
00:45:23,640 --> 00:45:25,680
other folks have introduced how powerful

1181
00:45:25,680 --> 00:45:27,660
things like capability models can be on

1182
00:45:27,660 --> 00:45:30,440
the CPU for taking existing native code

1183
00:45:30,440 --> 00:45:32,640
modifying operating system constructs

1184
00:45:32,640 --> 00:45:36,240
like allocators and then producing very

1185
00:45:36,240 --> 00:45:38,460
viable memory safety for existing code

1186
00:45:38,460 --> 00:45:40,440
without having to rewrite the world I

1187
00:45:40,440 --> 00:45:42,180
hate to tell you I know rust fans out

1188
00:45:42,180 --> 00:45:44,040
there rewriting windows and rust

1189
00:45:44,040 --> 00:45:45,359
probably isn't going to happen anytime

1190
00:45:45,359 --> 00:45:48,240
soon so while we love rust we need a

1191
00:45:48,240 --> 00:45:49,800
strategy that also includes securing

1192
00:45:49,800 --> 00:45:52,440
more of our native code and then finally

1193
00:45:52,440 --> 00:45:54,660
an approach that we haven't experimented

1194
00:45:54,660 --> 00:45:57,180
on but I think SAR and other folks have

1195
00:45:57,180 --> 00:45:58,619
pointed out some of Apple's good work

1196
00:45:58,619 --> 00:46:02,460
that is doing a safer subsets of the

1197
00:46:02,460 --> 00:46:05,040
languages so for example at Microsoft on

1198
00:46:05,040 --> 00:46:07,079
the Azure sphere platform we support a

1199
00:46:07,079 --> 00:46:09,359
thing called safer C which introduced

1200
00:46:09,359 --> 00:46:11,420
some constructs around spatial safety

1201
00:46:11,420 --> 00:46:14,339
the C plus working group has some really

1202
00:46:14,339 --> 00:46:16,700
really cool functionality things like

1203
00:46:16,700 --> 00:46:20,160
a GSL span classes that guarantee memory

1204
00:46:20,160 --> 00:46:21,900
safety for things like array accesses

1205
00:46:21,900 --> 00:46:25,680
and so on and so forth Apple in their

1206
00:46:25,680 --> 00:46:27,900
iboot I believe has a thing called fire

1207
00:46:27,900 --> 00:46:30,240
Bloom which is a safer type safe subset

1208
00:46:30,240 --> 00:46:33,480
and uses a typesafe allocator so those

1209
00:46:33,480 --> 00:46:36,420
are also viable tools but today I'm

1210
00:46:36,420 --> 00:46:37,859
going to focus on memory safety and

1211
00:46:37,859 --> 00:46:41,240
windows and our early experiments

1212
00:46:42,660 --> 00:46:44,880
so the first thing that we introduced

1213
00:46:44,880 --> 00:46:48,359
with rust at least in Windows is deright

1214
00:46:48,359 --> 00:46:49,920
um how many do you think font parsing is

1215
00:46:49,920 --> 00:46:51,900
scary

1216
00:46:51,900 --> 00:46:53,940
there's this thing called Dooku I don't

1217
00:46:53,940 --> 00:46:55,319
know if anyone knows about that that had

1218
00:46:55,319 --> 00:46:57,300
some font bugs

1219
00:46:57,300 --> 00:46:59,520
um so obviously d-write font parsing is

1220
00:46:59,520 --> 00:47:01,500
a critical attack surface for memory

1221
00:47:01,500 --> 00:47:03,480
safety that we want to Target so it's

1222
00:47:03,480 --> 00:47:04,619
one of the first things we looked at

1223
00:47:04,619 --> 00:47:07,619
applying rust to uh the second is again

1224
00:47:07,619 --> 00:47:09,599
this component I'm sure none of you know

1225
00:47:09,599 --> 00:47:11,700
about called win32k that may or may not

1226
00:47:11,700 --> 00:47:14,160
have bugs occasionally and that's been

1227
00:47:14,160 --> 00:47:15,839
another place that we're looking at

1228
00:47:15,839 --> 00:47:19,079
using rust and memory safety to with so

1229
00:47:19,079 --> 00:47:20,160
we're going to talk about those today

1230
00:47:20,160 --> 00:47:21,720
the first thing I want to say is this is

1231
00:47:21,720 --> 00:47:23,220
not my work this is the work of folks

1232
00:47:23,220 --> 00:47:25,380
like Arden white and Chris long and

1233
00:47:25,380 --> 00:47:27,000
other folks back at Microsoft who have

1234
00:47:27,000 --> 00:47:29,940
just been the most staunch Advocates of

1235
00:47:29,940 --> 00:47:32,339
rust and have done way more more work

1236
00:47:32,339 --> 00:47:34,560
than they've uh ever dreamed to make

1237
00:47:34,560 --> 00:47:36,660
this a reality this is really a passion

1238
00:47:36,660 --> 00:47:38,760
project to get this much results as fast

1239
00:47:38,760 --> 00:47:40,200
so I want to acknowledge those folks I'm

1240
00:47:40,200 --> 00:47:43,260
just lucky to be representing their work

1241
00:47:43,260 --> 00:47:45,300
yep

1242
00:47:45,300 --> 00:47:47,940
so we're at a I would say the crawl

1243
00:47:47,940 --> 00:47:50,160
stage from the crawl Rock Run in Rust

1244
00:47:50,160 --> 00:47:51,900
and windows we're experimenting with a

1245
00:47:51,900 --> 00:47:53,579
tool chain we're looking at the Cogen

1246
00:47:53,579 --> 00:47:55,440
we're trying to figure out can this work

1247
00:47:55,440 --> 00:47:57,540
what does it cost to learn Russ how

1248
00:47:57,540 --> 00:47:58,920
would we Port it how would it work in

1249
00:47:58,920 --> 00:48:00,960
the windows environments right these are

1250
00:48:00,960 --> 00:48:03,000
um we're talking about one of the most

1251
00:48:03,000 --> 00:48:04,859
complex engineering projects on the

1252
00:48:04,859 --> 00:48:07,859
planet if not the the most complex and

1253
00:48:07,859 --> 00:48:09,720
so making sure that Russ is going to

1254
00:48:09,720 --> 00:48:12,420
work at this billion user scale is very

1255
00:48:12,420 --> 00:48:14,700
important for these first stages but

1256
00:48:14,700 --> 00:48:16,560
where you know our goal is to uh

1257
00:48:16,560 --> 00:48:18,599
actually do this to improve security but

1258
00:48:18,599 --> 00:48:19,500
there are a bunch of different questions

1259
00:48:19,500 --> 00:48:22,319
we need to answer to get there

1260
00:48:22,319 --> 00:48:24,420
so the first experiment was with d

1261
00:48:24,420 --> 00:48:26,940
Wright and we had the opportunity to

1262
00:48:26,940 --> 00:48:28,680
introduce What's called the right core

1263
00:48:28,680 --> 00:48:31,440
which is a portable version of the

1264
00:48:31,440 --> 00:48:33,480
windows deright Library so we've had

1265
00:48:33,480 --> 00:48:35,400
Direct write in Windows for some time

1266
00:48:35,400 --> 00:48:38,040
but the introduction of introduction of

1267
00:48:38,040 --> 00:48:40,319
cross-platform sdks things like Win app

1268
00:48:40,319 --> 00:48:42,480
SDK that allows you to Target different

1269
00:48:42,480 --> 00:48:45,240
versions of Windows has necessitated an

1270
00:48:45,240 --> 00:48:46,920
undocked version of d-write that we call

1271
00:48:46,920 --> 00:48:49,619
d-write Core so we took and Fork this

1272
00:48:49,619 --> 00:48:51,359
version outside of windows and

1273
00:48:51,359 --> 00:48:53,460
essentially converted it to rust and so

1274
00:48:53,460 --> 00:48:55,859
when you go and use an application for

1275
00:48:55,859 --> 00:48:58,260
example like a fluent Windows app that

1276
00:48:58,260 --> 00:49:01,800
uses font parsing it's actually today at

1277
00:49:01,800 --> 00:49:04,020
least partially written in Rust it's

1278
00:49:04,020 --> 00:49:06,420
actually incredible d-write core is now

1279
00:49:06,420 --> 00:49:08,339
152

1280
00:49:08,339 --> 00:49:11,520
000 lines of code in Rust compared to 96

1281
00:49:11,520 --> 00:49:13,020
000 in C plus plus

1282
00:49:13,020 --> 00:49:14,940
from just one cut and so I'll talk to

1283
00:49:14,940 --> 00:49:16,319
you a little bit about what that looks

1284
00:49:16,319 --> 00:49:17,040
like

1285
00:49:17,040 --> 00:49:18,720
I'm going to skip through this but D

1286
00:49:18,720 --> 00:49:20,579
Wright has a lot of different layers

1287
00:49:20,579 --> 00:49:23,700
from shaping to parsing to layout and we

1288
00:49:23,700 --> 00:49:26,940
looked at different ways to Overlay rust

1289
00:49:26,940 --> 00:49:29,339
with the goal of having as much safe

1290
00:49:29,339 --> 00:49:31,740
coat as possible and avoiding some of

1291
00:49:31,740 --> 00:49:33,000
those memes you've seen where it's like

1292
00:49:33,000 --> 00:49:34,619
I wrote this in Rust and it's a bunch of

1293
00:49:34,619 --> 00:49:36,420
unsafe calls to see under the hood we

1294
00:49:36,420 --> 00:49:37,800
don't want to do that

1295
00:49:37,800 --> 00:49:40,079
so we were able to successfully

1296
00:49:40,079 --> 00:49:42,180
integrate and interoperate find

1297
00:49:42,180 --> 00:49:44,339
different uh approaches for integrating

1298
00:49:44,339 --> 00:49:46,740
C plus and rust one of the ways we do

1299
00:49:46,740 --> 00:49:48,420
that is through public API so there's

1300
00:49:48,420 --> 00:49:50,640
actually a number of com like interfaces

1301
00:49:50,640 --> 00:49:52,440
directly in d-write core where you can

1302
00:49:52,440 --> 00:49:55,380
call from C plus code directly into pure

1303
00:49:55,380 --> 00:49:57,420
rust so that we didn't have to do things

1304
00:49:57,420 --> 00:50:00,180
like have wrappers and C or C plus plus

1305
00:50:00,180 --> 00:50:02,099
we're able to actually generate rust

1306
00:50:02,099 --> 00:50:04,440
code for the public apis

1307
00:50:04,440 --> 00:50:07,079
so what went well is the language worked

1308
00:50:07,079 --> 00:50:09,000
super well this was a self-contained

1309
00:50:09,000 --> 00:50:10,859
project so Arden and team who did this

1310
00:50:10,859 --> 00:50:12,780
actually really selected a surface there

1311
00:50:12,780 --> 00:50:14,579
weren't a lot of dependencies and

1312
00:50:14,579 --> 00:50:16,500
parsing was reported as incredibly Easy

1313
00:50:16,500 --> 00:50:18,119
by the team

1314
00:50:18,119 --> 00:50:20,700
and this is I think the thing that I was

1315
00:50:20,700 --> 00:50:22,140
most excited about showing you as I'm

1316
00:50:22,140 --> 00:50:23,940
running out of time here is that

1317
00:50:23,940 --> 00:50:26,720
performance increased

1318
00:50:26,720 --> 00:50:29,819
five to fifteen percent so not only do

1319
00:50:29,819 --> 00:50:32,339
we get uh memory safety we got a boost

1320
00:50:32,339 --> 00:50:35,280
in performance so I think that for a

1321
00:50:35,280 --> 00:50:37,920
first crack is actually pretty cool

1322
00:50:37,920 --> 00:50:40,020
um and I'm sure the rough uh crowd out

1323
00:50:40,020 --> 00:50:41,579
there will say see I told you we can

1324
00:50:41,579 --> 00:50:44,280
have safety and performance

1325
00:50:44,280 --> 00:50:46,440
that's right that's right

1326
00:50:46,440 --> 00:50:48,240
um this is a rough analysis of what it

1327
00:50:48,240 --> 00:50:49,559
costs to do this

1328
00:50:49,559 --> 00:50:51,900
um two months of Dev time just a true

1329
00:50:51,900 --> 00:50:54,119
type uh another two months or so for

1330
00:50:54,119 --> 00:50:55,559
shaping

1331
00:50:55,559 --> 00:50:57,240
um uh another couple months for layout

1332
00:50:57,240 --> 00:50:59,460
uh and a few weeks for Unicode analysis

1333
00:50:59,460 --> 00:51:01,859
so roughly half a year or so of

1334
00:51:01,859 --> 00:51:04,980
developer time Deport but for a you know

1335
00:51:04,980 --> 00:51:06,540
surface that's notorious for security

1336
00:51:06,540 --> 00:51:08,579
issues two devs for six months seems

1337
00:51:08,579 --> 00:51:10,859
like a pretty good value proposition

1338
00:51:10,859 --> 00:51:12,720
uh and now I'm gonna jam through this

1339
00:51:12,720 --> 00:51:15,900
the second experiment has been with GDI

1340
00:51:15,900 --> 00:51:18,420
and win32k we started again with a

1341
00:51:18,420 --> 00:51:20,040
self-contained area called the region

1342
00:51:20,040 --> 00:51:21,839
which is a data type that models

1343
00:51:21,839 --> 00:51:24,059
overlapping controls in the UI you can

1344
00:51:24,059 --> 00:51:25,319
actually see this here at the bottom

1345
00:51:25,319 --> 00:51:27,300
it's actually designed in the late 80s

1346
00:51:27,300 --> 00:51:29,040
and 90s so fitting we're here at this

1347
00:51:29,040 --> 00:51:31,200
conference where it has that theme uh

1348
00:51:31,200 --> 00:51:33,240
it's in the windows build currently but

1349
00:51:33,240 --> 00:51:35,460
disabled with the feature flag but I'm

1350
00:51:35,460 --> 00:51:36,839
told on good authority that I can

1351
00:51:36,839 --> 00:51:38,160
announce here in Israel that this will

1352
00:51:38,160 --> 00:51:40,800
be an Insider previews shortly

1353
00:51:40,800 --> 00:51:42,540
so you will actually have Windows

1354
00:51:42,540 --> 00:51:44,700
booting with rust in the kernel in

1355
00:51:44,700 --> 00:51:46,079
probably the next several weeks or

1356
00:51:46,079 --> 00:51:48,660
months which is really cool

1357
00:51:48,660 --> 00:51:50,880
um basic goal here was to convert some

1358
00:51:50,880 --> 00:51:52,800
of these internal C plus data types into

1359
00:51:52,800 --> 00:51:54,660
their rust equivalents so you can see

1360
00:51:54,660 --> 00:51:56,339
here we have a bunch of private data

1361
00:51:56,339 --> 00:51:58,500
types here in C plus plus that represent

1362
00:51:58,500 --> 00:52:01,260
things like spanning controls index into

1363
00:52:01,260 --> 00:52:03,740
traditional array and other

1364
00:52:03,740 --> 00:52:05,819
constructs that are common to have

1365
00:52:05,819 --> 00:52:07,859
spatial type issues and we're able to

1366
00:52:07,859 --> 00:52:09,599
replace those pretty simply with rust

1367
00:52:09,599 --> 00:52:12,240
native types like vet and result which

1368
00:52:12,240 --> 00:52:15,059
not only has memory safety but has the

1369
00:52:15,059 --> 00:52:16,859
ability to do better linting and

1370
00:52:16,859 --> 00:52:18,300
Analysis

1371
00:52:18,300 --> 00:52:22,140
and so progress so far is 36 000 lines

1372
00:52:22,140 --> 00:52:24,300
of code in the rust Port perf is

1373
00:52:24,300 --> 00:52:27,000
excellent no regressions and very few

1374
00:52:27,000 --> 00:52:29,400
calls to unsafe code at least in this

1375
00:52:29,400 --> 00:52:30,780
analysis

1376
00:52:30,780 --> 00:52:32,640
and so one other thing I wanted to call

1377
00:52:32,640 --> 00:52:35,640
out is there's actually a syscall

1378
00:52:35,640 --> 00:52:37,500
in the windows kernel now that is

1379
00:52:37,500 --> 00:52:39,720
implemented in Rust I I don't know I'm a

1380
00:52:39,720 --> 00:52:42,000
Windows geek so I think that's cool

1381
00:52:42,000 --> 00:52:43,319
um

1382
00:52:43,319 --> 00:52:46,020
so the next step here is d-write course

1383
00:52:46,020 --> 00:52:48,480
shipping now so you can work on that

1384
00:52:48,480 --> 00:52:50,220
um check that out if you want I said the

1385
00:52:50,220 --> 00:52:52,859
GDI regions are coming really soon and

1386
00:52:52,859 --> 00:52:54,780
we continue to work on CPU architecture

1387
00:52:54,780 --> 00:52:57,119
because as much as we love rust we know

1388
00:52:57,119 --> 00:52:58,559
it's probably not the solution to

1389
00:52:58,559 --> 00:53:00,900
rewrite the last 40 Years of C and C

1390
00:53:00,900 --> 00:53:03,300
plus plus code in Rust so we will

1391
00:53:03,300 --> 00:53:05,579
continue to look at broader approaches

1392
00:53:05,579 --> 00:53:08,180
uh using what we learned from Chariot

1393
00:53:08,180 --> 00:53:10,619
memory tagging you can go read some of

1394
00:53:10,619 --> 00:53:12,780
the papers that are msrc and and windows

1395
00:53:12,780 --> 00:53:14,640
folks have written we'll use these

1396
00:53:14,640 --> 00:53:16,859
different approaches to continue to

1397
00:53:16,859 --> 00:53:19,500
evolve our memory safety approach

1398
00:53:19,500 --> 00:53:21,420
uh and with that I want to just point

1399
00:53:21,420 --> 00:53:23,700
out windows is continuing to evolve it's

1400
00:53:23,700 --> 00:53:25,260
been around a long time it will be

1401
00:53:25,260 --> 00:53:26,880
around for a long time as long as we can

1402
00:53:26,880 --> 00:53:29,400
keep going so we are tackling the oldest

1403
00:53:29,400 --> 00:53:31,920
and largest challenges I've shown just a

1404
00:53:31,920 --> 00:53:33,240
few of those today

1405
00:53:33,240 --> 00:53:35,460
we are even doing more

1406
00:53:35,460 --> 00:53:37,740
um I wanted to bring this in but I

1407
00:53:37,740 --> 00:53:39,660
didn't have time we are killing a number

1408
00:53:39,660 --> 00:53:42,359
of notorious Legacy attack surfaces from

1409
00:53:42,359 --> 00:53:45,420
ntlm to SMB V2 it's a lot of work

1410
00:53:45,420 --> 00:53:47,099
happening there

1411
00:53:47,099 --> 00:53:50,040
and ultimately killing bug class is our

1412
00:53:50,040 --> 00:53:51,780
Focus you'll see probably less on the

1413
00:53:51,780 --> 00:53:54,180
exploit mitigation front from us so with

1414
00:53:54,180 --> 00:53:55,619
that I just want to say thanks Tel Aviv

1415
00:53:55,619 --> 00:53:59,780
for the people who have waited

1416
00:54:00,480 --> 00:54:03,480
I appreciate that and I I did want to

1417
00:54:03,480 --> 00:54:06,119
ask you one small favor I have a really

1418
00:54:06,119 --> 00:54:08,400
good friend uh who works in Security in

1419
00:54:08,400 --> 00:54:10,980
Redmond and uh she's sick with cancer

1420
00:54:10,980 --> 00:54:12,900
and she really wanted to be here so I

1421
00:54:12,900 --> 00:54:14,640
want to ask you all to say uh get well

1422
00:54:14,640 --> 00:54:18,000
for her so if you could maybe in on the

1423
00:54:18,000 --> 00:54:19,800
count of three say Get Well Dia and I'm

1424
00:54:19,800 --> 00:54:24,000
gonna send her the video so one sec one

1425
00:54:24,000 --> 00:54:28,319
two three get well dear all right thanks

1426
00:54:28,319 --> 00:54:29,450
everyone I appreciate that

1427
00:54:29,450 --> 00:54:36,138
[Music]

