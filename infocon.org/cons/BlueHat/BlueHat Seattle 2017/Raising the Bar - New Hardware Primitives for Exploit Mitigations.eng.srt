1
00:00:02,360 --> 00:00:10,170
<font color="#E5E5E5">okay welcome</font><font color="#CCCCCC"> back to track</font><font color="#E5E5E5"> 1 part</font><font color="#CCCCCC"> 2</font>

2
00:00:07,040 --> 00:00:11,849
<font color="#CCCCCC">McKittrick</font><font color="#E5E5E5"> kodiak not</font><font color="#CCCCCC"> McKinley</font><font color="#E5E5E5"> and we're</font>

3
00:00:10,170 --> 00:00:13,320
in the second half now<font color="#E5E5E5"> and I am so</font>

4
00:00:11,849 --> 00:00:15,030
<font color="#CCCCCC">stoked</font><font color="#E5E5E5"> to be in this track because I'm</font>

5
00:00:13,320 --> 00:00:15,719
learning<font color="#E5E5E5"> stuff and I'm learning stuff</font>

6
00:00:15,030 --> 00:00:18,210
that's cool

7
00:00:15,719 --> 00:00:20,189
next up we have<font color="#CCCCCC"> Rob</font><font color="#E5E5E5"> Turner from Qualcomm</font>

8
00:00:18,210 --> 00:00:21,689
<font color="#E5E5E5">who is going to teach us about hardware</font>

9
00:00:20,189 --> 00:00:34,050
mitigations and things like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so</font>

10
00:00:21,689 --> 00:00:37,079
<font color="#CCCCCC">round of applause oh good a am i</font><font color="#E5E5E5"> mocked</font>

11
00:00:34,050 --> 00:00:39,269
up inaudible<font color="#E5E5E5"> cool all right well g'day</font>

12
00:00:37,079 --> 00:00:43,500
I'm Rob<font color="#CCCCCC"> I work for Koch home in their</font>

13
00:00:39,270 --> 00:00:45,149
product security<font color="#E5E5E5"> team it's a pleasure</font>

14
00:00:43,500 --> 00:00:47,370
and an honor<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> and have the</font>

15
00:00:45,149 --> 00:00:49,200
opportunity<font color="#CCCCCC"> to speak with</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> I think in</font>

16
00:00:47,370 --> 00:00:54,718
<font color="#E5E5E5">about 50</font><font color="#CCCCCC"> minutes I'll start really</font>

17
00:00:49,200 --> 00:00:56,969
enjoying the conference<font color="#CCCCCC"> my</font><font color="#E5E5E5"> title is a</font>

18
00:00:54,719 --> 00:00:59,190
<font color="#E5E5E5">little vague and I haven't managed to</font>

19
00:00:56,969 --> 00:01:01,079
<font color="#E5E5E5">find abstracts anywhere so to give you</font>

20
00:00:59,190 --> 00:01:03,390
some<font color="#CCCCCC"> idea of what I'll be talking about</font>

21
00:01:01,079 --> 00:01:06,720
<font color="#E5E5E5">I'll be talking</font><font color="#CCCCCC"> about a</font><font color="#E5E5E5"> hardware</font>

22
00:01:03,390 --> 00:01:08,909
extension in arm<font color="#CCCCCC"> v 8.3 called pointer</font>

23
00:01:06,720 --> 00:01:10,439
authentication so it is<font color="#E5E5E5"> necessarily</font>

24
00:01:08,909 --> 00:01:12,180
specific to arm but I think the

25
00:01:10,439 --> 00:01:15,570
underlying<font color="#E5E5E5"> ideas are interesting</font><font color="#CCCCCC"> and of</font>

26
00:01:12,180 --> 00:01:18,000
general interest<font color="#CCCCCC"> I'd think</font><font color="#E5E5E5"> of it more as</font>

27
00:01:15,570 --> 00:01:20,100
a software<font color="#E5E5E5"> security talk than a hardware</font>

28
00:01:18,000 --> 00:01:23,600
<font color="#E5E5E5">talk because it's a hardware extension</font>

29
00:01:20,100 --> 00:01:26,460
to solve a software<font color="#CCCCCC"> security problem I</font>

30
00:01:23,600 --> 00:01:28,559
was shocked to learn recently that some

31
00:01:26,460 --> 00:01:30,179
people find<font color="#E5E5E5"> the intricate details of</font>

32
00:01:28,560 --> 00:01:32,909
hardware extensions to be a somewhat dry

33
00:01:30,180 --> 00:01:36,150
subject<font color="#CCCCCC"> and I don't understand these</font>

34
00:01:32,909 --> 00:01:37,890
people<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I hope that if you're one of</font>

35
00:01:36,150 --> 00:01:48,899
<font color="#E5E5E5">them my enthusiasm</font><font color="#CCCCCC"> for the subject will</font>

36
00:01:37,890 --> 00:01:51,619
be contagious this is an old deck so

37
00:01:48,899 --> 00:01:51,619
maybe I<font color="#E5E5E5"> can</font>

38
00:01:57,590 --> 00:02:00,609
this looks better

39
00:02:01,909 --> 00:02:07,130
<font color="#E5E5E5">all</font><font color="#CCCCCC"> right so here's</font><font color="#E5E5E5"> the agenda</font><font color="#CCCCCC"> based</font>

40
00:02:05,030 --> 00:02:08,449
<font color="#E5E5E5">upon what I've seen come out</font><font color="#CCCCCC"> of MS I</font><font color="#E5E5E5"> see</font>

41
00:02:07,130 --> 00:02:10,818
over the last<font color="#CCCCCC"> few years</font>

42
00:02:08,449 --> 00:02:13,190
Microsoft as an organization understands

43
00:02:10,818 --> 00:02:14,899
the value of mitigations<font color="#E5E5E5"> so without any</font>

44
00:02:13,190 --> 00:02:18,310
preamble I'm gonna jump<font color="#CCCCCC"> straight into</font>

45
00:02:14,900 --> 00:02:18,310
<font color="#E5E5E5">the design of</font><font color="#CCCCCC"> point or authentication</font>

46
00:02:18,610 --> 00:02:24,410
<font color="#CCCCCC">I've pitched the talk</font><font color="#E5E5E5"> for an audience</font>

47
00:02:22,040 --> 00:02:25,910
<font color="#E5E5E5">that's already familiar with</font><font color="#CCCCCC"> stack</font>

48
00:02:24,410 --> 00:02:28,340
smashing protection data execution

49
00:02:25,910 --> 00:02:29,930
prevention<font color="#CCCCCC"> address space layout</font>

50
00:02:28,340 --> 00:02:31,910
<font color="#E5E5E5">randomization and at least at a very</font>

51
00:02:29,930 --> 00:02:33,379
high<font color="#E5E5E5"> level control flow integrity so</font>

52
00:02:31,910 --> 00:02:35,209
you'll get the most out of it<font color="#E5E5E5"> if you're</font>

53
00:02:33,379 --> 00:02:37,518
kind<font color="#E5E5E5"> of already familiar with some</font><font color="#CCCCCC"> of</font>

54
00:02:35,209 --> 00:02:40,040
<font color="#E5E5E5">those ideas after</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about the</font>

55
00:02:37,519 --> 00:02:42,370
design I'll talk about<font color="#E5E5E5"> the cryptography</font>

56
00:02:40,040 --> 00:02:45,109
that's involved I'll spend some<font color="#E5E5E5"> time</font>

57
00:02:42,370 --> 00:02:47,030
talking<font color="#E5E5E5"> about the security that the</font>

58
00:02:45,110 --> 00:02:48,920
extension<font color="#E5E5E5"> offers and then I'll wrap up</font>

59
00:02:47,030 --> 00:02:52,400
<font color="#E5E5E5">with</font><font color="#CCCCCC"> some of the ways we see it being</font>

60
00:02:48,920 --> 00:02:54,108
<font color="#CCCCCC">applied</font><font color="#E5E5E5"> good news is that</font><font color="#CCCCCC"> I updated</font><font color="#E5E5E5"> the</font>

61
00:02:52,400 --> 00:02:56,359
presentation<font color="#E5E5E5"> and didn't go back</font><font color="#CCCCCC"> to</font>

62
00:02:54,109 --> 00:02:58,129
update the agenda<font color="#E5E5E5"> so the last two</font>

63
00:02:56,359 --> 00:03:02,510
sections<font color="#E5E5E5"> there are fewer slides there</font>

64
00:02:58,129 --> 00:03:04,429
then it says so we're going<font color="#E5E5E5"> to start</font>

65
00:03:02,510 --> 00:03:06,620
with the question<font color="#E5E5E5"> what's in an armed v8</font>

66
00:03:04,430 --> 00:03:08,750
pointer<font color="#E5E5E5"> and it would be reasonable to</font>

67
00:03:06,620 --> 00:03:10,250
<font color="#E5E5E5">assume that</font><font color="#CCCCCC"> the only</font><font color="#E5E5E5"> thing in a pointer</font>

68
00:03:08,750 --> 00:03:13,400
is the virtual address of the object

69
00:03:10,250 --> 00:03:17,930
<font color="#CCCCCC">that's being</font><font color="#E5E5E5"> pointed to but that's not</font>

70
00:03:13,400 --> 00:03:21,560
quite<font color="#CCCCCC"> the case I'm v8</font><font color="#E5E5E5"> through on</font><font color="#CCCCCC"> V 8.1</font>

71
00:03:17,930 --> 00:03:24,079
supports 48 bit address spaces<font color="#E5E5E5"> and in</font>

72
00:03:21,560 --> 00:03:26,780
<font color="#E5E5E5">arm</font><font color="#CCCCCC"> v</font><font color="#E5E5E5"> 8.2 they added an extension that</font>

73
00:03:24,079 --> 00:03:29,180
<font color="#CCCCCC">lets you go up to</font><font color="#E5E5E5"> 52 bits</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> this still</font>

74
00:03:26,780 --> 00:03:31,099
<font color="#E5E5E5">leaves 12 bits that aren't part of the</font>

75
00:03:29,180 --> 00:03:34,040
<font color="#CCCCCC">virtual address and if you spend much</font>

76
00:03:31,099 --> 00:03:37,160
time with<font color="#CCCCCC"> hardware folk you learn that</font>

77
00:03:34,040 --> 00:03:38,780
<font color="#E5E5E5">kind of unused bits makes them</font>

78
00:03:37,160 --> 00:03:42,530
uncomfortable<font color="#E5E5E5"> they try to cram as much</font>

79
00:03:38,780 --> 00:03:45,560
stuff<font color="#CCCCCC"> in as little</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> they can</font><font color="#E5E5E5"> so it</font>

80
00:03:42,530 --> 00:03:47,480
turns out<font color="#E5E5E5"> that the upper byte also has a</font>

81
00:03:45,560 --> 00:03:49,669
use<font color="#E5E5E5"> there's a feature of the processor</font>

82
00:03:47,480 --> 00:03:53,450
called address tagging and if you enable

83
00:03:49,669 --> 00:03:55,459
<font color="#E5E5E5">this feature</font><font color="#CCCCCC"> it lets you store any kind</font>

84
00:03:53,450 --> 00:03:57,679
of<font color="#E5E5E5"> value in the upper</font><font color="#CCCCCC"> 8 bits of a</font>

85
00:03:55,459 --> 00:03:59,870
pointer that's totally ignored during

86
00:03:57,680 --> 00:04:01,489
address translation and an<font color="#E5E5E5"> example of</font>

87
00:03:59,870 --> 00:04:04,879
why you might<font color="#CCCCCC"> want this is you could</font>

88
00:04:01,489 --> 00:04:07,310
store say type<font color="#E5E5E5"> information of what</font><font color="#CCCCCC"> the</font>

89
00:04:04,879 --> 00:04:09,018
object being pointed to is and this may

90
00:04:07,310 --> 00:04:11,769
let you have more efficient checks in a

91
00:04:09,019 --> 00:04:11,769
dynamic<font color="#CCCCCC"> language</font>

92
00:04:12,040 --> 00:04:19,430
<font color="#CCCCCC">this bit-bit</font><font color="#E5E5E5"> 55 this is a very important</font>

93
00:04:15,620 --> 00:04:21,850
bit<font color="#CCCCCC"> they use well armed I guess like</font>

94
00:04:19,430 --> 00:04:24,320
Intel<font color="#E5E5E5"> supports in some execution levels</font>

95
00:04:21,850 --> 00:04:26,600
<font color="#CCCCCC">they described them as translation</font>

96
00:04:24,320 --> 00:04:28,370
regimes<font color="#E5E5E5"> but really just means you can</font>

97
00:04:26,600 --> 00:04:30,259
have<font color="#E5E5E5"> to address spaces a lower address</font>

98
00:04:28,370 --> 00:04:32,389
space in an upper address space<font color="#E5E5E5"> which is</font>

99
00:04:30,259 --> 00:04:35,570
often used<font color="#CCCCCC"> for</font><font color="#E5E5E5"> user space in kernel</font>

100
00:04:32,389 --> 00:04:37,669
space<font color="#CCCCCC"> this bit is how they decide which</font>

101
00:04:35,570 --> 00:04:39,380
address space<font color="#CCCCCC"> we're in and it's also</font>

102
00:04:37,669 --> 00:04:41,120
used<font color="#E5E5E5"> to select</font><font color="#CCCCCC"> different sets of</font>

103
00:04:39,380 --> 00:04:44,240
configuration registers for<font color="#E5E5E5"> the</font>

104
00:04:41,120 --> 00:04:47,389
different address spaces<font color="#E5E5E5"> if this bit is</font>

105
00:04:44,240 --> 00:04:49,430
<font color="#E5E5E5">0 then all the unused bits must also be</font>

106
00:04:47,389 --> 00:04:51,860
0 for<font color="#CCCCCC"> this to be a valid pointer and</font>

107
00:04:49,430 --> 00:04:55,039
similarly if it's<font color="#E5E5E5"> 1 they must all be 1</font>

108
00:04:51,860 --> 00:04:57,080
if this isn't the<font color="#E5E5E5"> case</font><font color="#CCCCCC"> then when you try</font>

109
00:04:55,039 --> 00:04:58,669
to<font color="#E5E5E5"> translate this address</font><font color="#CCCCCC"> you get</font><font color="#E5E5E5"> an</font>

110
00:04:57,080 --> 00:05:02,750
address translation fault<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> will</font>

111
00:04:58,669 --> 00:05:05,270
become interesting later on so here

112
00:05:02,750 --> 00:05:07,070
highlighted<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the bits in a pointer</font>

113
00:05:05,270 --> 00:05:09,740
<font color="#E5E5E5">that</font><font color="#CCCCCC"> have some</font><font color="#E5E5E5"> kind of architectural</font>

114
00:05:07,070 --> 00:05:14,690
significance<font color="#E5E5E5"> which leaves</font><font color="#CCCCCC"> three bits</font>

115
00:05:09,740 --> 00:05:19,159
that<font color="#CCCCCC"> don't and</font><font color="#E5E5E5"> this was I</font><font color="#CCCCCC"> guess</font><font color="#E5E5E5"> the the</font>

116
00:05:14,690 --> 00:05:22,370
seed of<font color="#CCCCCC"> our idea this</font><font color="#E5E5E5"> title is I go back</font>

117
00:05:19,159 --> 00:05:25,039
<font color="#CCCCCC">and</font><font color="#E5E5E5"> forth on whether it's a pun</font><font color="#CCCCCC"> the main</font>

118
00:05:22,370 --> 00:05:28,550
idea is<font color="#E5E5E5"> let's use the unused bits in the</font>

119
00:05:25,039 --> 00:05:31,340
point as an authentication tag or an

120
00:05:28,550 --> 00:05:33,289
<font color="#E5E5E5">authentication code</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> can verify</font>

121
00:05:31,340 --> 00:05:35,719
this<font color="#E5E5E5"> code before we dereference the</font>

122
00:05:33,289 --> 00:05:37,849
pointer in this way we can guarantee its

123
00:05:35,720 --> 00:05:40,400
<font color="#CCCCCC">integrity</font><font color="#E5E5E5"> and for this we need two</font>

124
00:05:37,849 --> 00:05:42,440
operations<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first will compute the</font>

125
00:05:40,400 --> 00:05:44,630
authentication code<font color="#E5E5E5"> and tag a pointer</font>

126
00:05:42,440 --> 00:05:46,909
with it and the second one will

127
00:05:44,630 --> 00:05:48,500
recompute<font color="#E5E5E5"> the authentication code and</font>

128
00:05:46,909 --> 00:05:51,469
compare it with the value<font color="#E5E5E5"> stored</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

129
00:05:48,500 --> 00:05:54,080
pointer so hold on<font color="#E5E5E5"> the attentive</font>

130
00:05:51,470 --> 00:05:55,550
audience<font color="#E5E5E5"> says I've just told you</font><font color="#CCCCCC"> that</font>

131
00:05:54,080 --> 00:05:58,460
there are<font color="#E5E5E5"> three unused bits in the</font>

132
00:05:55,550 --> 00:06:00,889
pointer<font color="#E5E5E5"> and I want to use it for</font><font color="#CCCCCC"> an</font>

133
00:05:58,460 --> 00:06:03,530
<font color="#E5E5E5">authentication code which is silly</font>

134
00:06:00,889 --> 00:06:06,740
<font color="#CCCCCC">because</font><font color="#E5E5E5"> this means one in eight tries I</font>

135
00:06:03,530 --> 00:06:08,270
can guess the authentication code<font color="#E5E5E5"> so the</font>

136
00:06:06,740 --> 00:06:11,120
<font color="#CCCCCC">situation's</font><font color="#E5E5E5"> slightly better than that</font>

137
00:06:08,270 --> 00:06:13,820
<font color="#E5E5E5">this is the worst case but we take</font>

138
00:06:11,120 --> 00:06:15,889
<font color="#CCCCCC">advantage</font><font color="#E5E5E5"> of any available bits that</font>

139
00:06:13,820 --> 00:06:17,270
<font color="#E5E5E5">aren't being used</font><font color="#CCCCCC"> for anything else</font><font color="#E5E5E5"> so</font>

140
00:06:15,889 --> 00:06:20,870
if the address<font color="#E5E5E5"> tagging feature is</font>

141
00:06:17,270 --> 00:06:22,909
disabled<font color="#CCCCCC"> we go up to</font><font color="#E5E5E5"> 11 bits and it's</font>

142
00:06:20,870 --> 00:06:26,030
also possible to<font color="#CCCCCC"> configure the processor</font>

143
00:06:22,909 --> 00:06:28,730
to<font color="#E5E5E5"> use small address spaces</font>

144
00:06:26,030 --> 00:06:31,489
so you can end up getting<font color="#E5E5E5"> between 11 and</font>

145
00:06:28,730 --> 00:06:34,670
<font color="#E5E5E5">31 bits depending upon how large you</font>

146
00:06:31,490 --> 00:06:36,860
<font color="#CCCCCC">want</font><font color="#E5E5E5"> your virtual address basis to be as</font>

147
00:06:34,670 --> 00:06:40,700
an<font color="#E5E5E5"> example in the default configuration</font>

148
00:06:36,860 --> 00:06:43,520
<font color="#CCCCCC">of</font><font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> they do enable address tagging</font>

149
00:06:40,700 --> 00:06:46,190
<font color="#E5E5E5">and they have 39 bit address spaces</font><font color="#CCCCCC"> so</font>

150
00:06:43,520 --> 00:06:49,580
in Linux<font color="#E5E5E5"> with the default</font><font color="#CCCCCC"> configuration</font>

151
00:06:46,190 --> 00:06:51,380
you would end up<font color="#E5E5E5"> with 16 bit tax so</font>

152
00:06:49,580 --> 00:06:53,450
hopefully to some<font color="#E5E5E5"> extent</font><font color="#CCCCCC"> thatis washes</font>

153
00:06:51,380 --> 00:06:58,010
the fears<font color="#CCCCCC"> of just guessing the value of</font>

154
00:06:53,450 --> 00:07:00,440
attack for<font color="#CCCCCC"> the scope we considered only</font>

155
00:06:58,010 --> 00:07:02,330
<font color="#E5E5E5">64-bit</font><font color="#CCCCCC"> arm</font><font color="#E5E5E5"> because there just aren't</font>

156
00:07:00,440 --> 00:07:04,400
<font color="#E5E5E5">enough bits to play with and the 32 bit</font>

157
00:07:02,330 --> 00:07:06,979
variant we needed something<font color="#CCCCCC"> that was</font>

158
00:07:04,400 --> 00:07:08,599
minimally invasive<font color="#CCCCCC"> so this means we were</font>

159
00:07:06,980 --> 00:07:10,790
shooting<font color="#E5E5E5"> for</font><font color="#CCCCCC"> something that was as</font>

160
00:07:08,600 --> 00:07:12,320
transparent as possible<font color="#CCCCCC"> to developers</font>

161
00:07:10,790 --> 00:07:14,180
and<font color="#E5E5E5"> build engineers but not</font>

162
00:07:12,320 --> 00:07:15,200
<font color="#CCCCCC">unfortunately for compiler developers</font>

163
00:07:14,180 --> 00:07:17,630
they have to deal<font color="#E5E5E5"> with the full</font>

164
00:07:15,200 --> 00:07:20,419
complexity<font color="#E5E5E5"> we wanted something that</font>

165
00:07:17,630 --> 00:07:24,320
didn't add any extra memory to the

166
00:07:20,419 --> 00:07:25,849
system so no tag memory<font color="#E5E5E5"> or tables and we</font>

167
00:07:24,320 --> 00:07:27,680
didn't<font color="#E5E5E5"> want to make any changes</font><font color="#CCCCCC"> to</font>

168
00:07:25,850 --> 00:07:31,160
either the<font color="#CCCCCC"> application binary interface</font>

169
00:07:27,680 --> 00:07:32,570
<font color="#E5E5E5">or to how address translation worked we</font>

170
00:07:31,160 --> 00:07:34,610
also need something<font color="#E5E5E5"> that's compatible</font>

171
00:07:32,570 --> 00:07:38,210
<font color="#E5E5E5">and interoperable or no one uses what</font>

172
00:07:34,610 --> 00:07:41,840
you built by this<font color="#E5E5E5"> I mean it had</font><font color="#CCCCCC"> to be</font>

173
00:07:38,210 --> 00:07:46,099
something<font color="#E5E5E5"> where new binaries and legacy</font>

174
00:07:41,840 --> 00:07:48,619
binaries both run on new processes you

175
00:07:46,100 --> 00:07:51,290
should be able to<font color="#E5E5E5"> have either a new or</font>

176
00:07:48,620 --> 00:07:52,790
<font color="#E5E5E5">legacy executable interoperate</font><font color="#CCCCCC"> with new</font>

177
00:07:51,290 --> 00:07:54,860
or legacy libraries and they should all

178
00:07:52,790 --> 00:07:56,540
play nicely together<font color="#CCCCCC"> and it should</font><font color="#E5E5E5"> also</font>

179
00:07:54,860 --> 00:08:01,490
be<font color="#E5E5E5"> useful for both application and</font>

180
00:07:56,540 --> 00:08:03,380
<font color="#E5E5E5">system level code there are some groups</font>

181
00:08:01,490 --> 00:08:05,930
of instructions<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are added as part</font>

182
00:08:03,380 --> 00:08:08,180
of the extension<font color="#E5E5E5"> the first group is</font><font color="#CCCCCC"> the</font>

183
00:08:05,930 --> 00:08:10,040
point<font color="#CCCCCC"> or</font><font color="#E5E5E5"> authentication code set of</font>

184
00:08:08,180 --> 00:08:12,620
instructions<font color="#E5E5E5"> these perform the first</font>

185
00:08:10,040 --> 00:08:14,360
operation<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> to compute an</font>

186
00:08:12,620 --> 00:08:16,729
<font color="#CCCCCC">authentication code and tag a pointer</font>

187
00:08:14,360 --> 00:08:18,979
and the second grouping of instructions

188
00:08:16,729 --> 00:08:21,440
<font color="#E5E5E5">are the earth instructions they perform</font>

189
00:08:18,979 --> 00:08:23,150
the second operation<font color="#E5E5E5"> they verify a</font>

190
00:08:21,440 --> 00:08:24,950
pointer by recomputing the<font color="#E5E5E5"> tag and</font>

191
00:08:23,150 --> 00:08:27,349
comparing<font color="#CCCCCC"> it with a tag inside the</font>

192
00:08:24,950 --> 00:08:29,960
pointer so some details<font color="#CCCCCC"> and</font><font color="#E5E5E5"> how this</font>

193
00:08:27,350 --> 00:08:32,150
works<font color="#E5E5E5"> when we compute the authentication</font>

194
00:08:29,960 --> 00:08:34,939
code we are<font color="#E5E5E5"> only concerned</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

195
00:08:32,150 --> 00:08:38,150
virtual address<font color="#E5E5E5"> bits in the pointer we</font>

196
00:08:34,940 --> 00:08:40,059
don't care about<font color="#CCCCCC"> say</font><font color="#E5E5E5"> the address tagging</font>

197
00:08:38,150 --> 00:08:44,509
if that feature is enabled

198
00:08:40,058 --> 00:08:46,999
so if this is<font color="#E5E5E5"> our example we have 48 bit</font>

199
00:08:44,509 --> 00:08:49,100
addresses<font color="#E5E5E5"> address tagging is enabled we</font>

200
00:08:46,999 --> 00:08:51,939
end up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> 7</font><font color="#E5E5E5"> bits for our</font>

201
00:08:49,100 --> 00:08:54,499
authentication<font color="#E5E5E5"> code this is an ideal for</font>

202
00:08:51,939 --> 00:08:59,179
<font color="#E5E5E5">security but it is ideal for slide</font>

203
00:08:54,499 --> 00:09:00,800
creation<font color="#CCCCCC"> these</font><font color="#E5E5E5"> 48 bits are what we'll</font>

204
00:08:59,179 --> 00:09:05,839
use to<font color="#CCCCCC"> calculate</font><font color="#E5E5E5"> the authentication code</font>

205
00:09:00,800 --> 00:09:09,469
<font color="#CCCCCC">and if we're tagging a valid pointer</font>

206
00:09:05,839 --> 00:09:10,999
<font color="#E5E5E5">these 7 bits once we've you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> passed</font>

207
00:09:09,470 --> 00:09:12,740
it through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PAC instruction will have</font>

208
00:09:10,999 --> 00:09:14,569
either 0 as a 1 there whatever the

209
00:09:12,740 --> 00:09:18,290
authentication code happens to<font color="#E5E5E5"> be and I</font>

210
00:09:14,569 --> 00:09:20,300
represented that with question marks<font color="#CCCCCC"> if</font>

211
00:09:18,290 --> 00:09:23,029
the authentication succeeds we take

212
00:09:20,300 --> 00:09:25,639
whatever<font color="#CCCCCC"> value is in bit 55 and we</font>

213
00:09:23,029 --> 00:09:30,050
restore all<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> authentication</font><font color="#CCCCCC"> code</font>

214
00:09:25,639 --> 00:09:32,990
bits<font color="#E5E5E5"> to this value so like that</font><font color="#CCCCCC"> and if</font>

215
00:09:30,050 --> 00:09:36,019
the authentication<font color="#E5E5E5"> fails then we write a</font>

216
00:09:32,990 --> 00:09:38,089
<font color="#E5E5E5">special value there either 0 1</font><font color="#CCCCCC"> or 1 0</font>

217
00:09:36,019 --> 00:09:40,009
<font color="#E5E5E5">and this guarantee is that when we</font>

218
00:09:38,089 --> 00:09:41,269
<font color="#E5E5E5">dereference the pointer we get an</font>

219
00:09:40,009 --> 00:09:43,819
<font color="#E5E5E5">address translation fault</font>

220
00:09:41,269 --> 00:09:45,290
and sadly this<font color="#CCCCCC"> wasn't my idea but I</font>

221
00:09:43,819 --> 00:09:47,479
think<font color="#E5E5E5"> it's one</font><font color="#CCCCCC"> of the snazzy ideas</font>

222
00:09:45,290 --> 00:09:49,189
because<font color="#E5E5E5"> we can reuse that mechanism in</font>

223
00:09:47,480 --> 00:09:51,199
the processor<font color="#E5E5E5"> to</font><font color="#CCCCCC"> catch this particular</font>

224
00:09:49,189 --> 00:09:53,269
type<font color="#CCCCCC"> of flaw and by looking at</font><font color="#E5E5E5"> the</font>

225
00:09:51,199 --> 00:09:54,709
pointer<font color="#CCCCCC"> once we've caught the fault we</font>

226
00:09:53,269 --> 00:09:58,309
can determine what the<font color="#CCCCCC"> problem was</font>

227
00:09:54,709 --> 00:10:00,949
afterwards if<font color="#E5E5E5"> you have an invalid</font>

228
00:09:58,309 --> 00:10:03,379
pointer<font color="#E5E5E5"> as before we calculate</font><font color="#CCCCCC"> the</font>

229
00:10:00,949 --> 00:10:07,339
authentication code<font color="#E5E5E5"> but if any of those</font>

230
00:10:03,379 --> 00:10:10,040
unused bits are not all 0 or all<font color="#CCCCCC"> 1 then</font>

231
00:10:07,339 --> 00:10:12,079
we<font color="#E5E5E5"> just flip the second most significant</font>

232
00:10:10,040 --> 00:10:14,149
part of<font color="#E5E5E5"> the authentication code so when</font>

233
00:10:12,079 --> 00:10:15,829
you go<font color="#CCCCCC"> to verify this</font><font color="#E5E5E5"> point you'll have</font>

234
00:10:14,149 --> 00:10:18,529
an address<font color="#E5E5E5"> translation fault</font><font color="#CCCCCC"> at that</font>

235
00:10:15,829 --> 00:10:20,689
<font color="#E5E5E5">point in time or rather once you try to</font>

236
00:10:18,529 --> 00:10:22,220
verify<font color="#CCCCCC"> it when you dereference it after</font>

237
00:10:20,689 --> 00:10:24,319
that<font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> get an address translation</font>

238
00:10:22,220 --> 00:10:26,059
<font color="#CCCCCC">fault so that's how we deal with</font><font color="#E5E5E5"> those</font>

239
00:10:24,319 --> 00:10:28,420
different cases<font color="#E5E5E5"> and it's just</font><font color="#CCCCCC"> stopped</font>

240
00:10:26,059 --> 00:10:30,889
someone<font color="#E5E5E5"> from taking an invalid pointer</font>

241
00:10:28,420 --> 00:10:32,779
authenticating it<font color="#E5E5E5"> verifying it and then</font>

242
00:10:30,889 --> 00:10:34,040
having<font color="#E5E5E5"> a valid pointer after that even</font>

243
00:10:32,779 --> 00:10:38,269
though they started<font color="#CCCCCC"> with an invalid</font>

244
00:10:34,040 --> 00:10:40,368
pointer<font color="#CCCCCC"> going back</font><font color="#E5E5E5"> to the instructions</font>

245
00:10:38,269 --> 00:10:42,670
there<font color="#E5E5E5"> are two more groups there's also a</font>

246
00:10:40,369 --> 00:10:45,860
generic authentication code instruction

247
00:10:42,670 --> 00:10:48,410
what<font color="#E5E5E5"> this does is it computes the</font>

248
00:10:45,860 --> 00:10:50,209
authentication code but rather than

249
00:10:48,410 --> 00:10:53,630
tagging a pointer with it it<font color="#CCCCCC"> just writes</font>

250
00:10:50,209 --> 00:10:55,339
it<font color="#E5E5E5"> into a register more precisely</font>

251
00:10:53,630 --> 00:10:57,590
it writes it into<font color="#E5E5E5"> the upper</font><font color="#CCCCCC"> four bytes</font>

252
00:10:55,340 --> 00:10:59,630
of a register<font color="#E5E5E5"> and</font><font color="#CCCCCC"> zero is the lower</font><font color="#E5E5E5"> four</font>

253
00:10:57,590 --> 00:11:00,410
bytes of a register<font color="#CCCCCC"> I thought this was</font>

254
00:10:59,630 --> 00:11:02,390
really<font color="#CCCCCC"> weird</font>

255
00:11:00,410 --> 00:11:04,100
so I asked them why did you do this

256
00:11:02,390 --> 00:11:08,090
<font color="#E5E5E5">because after all the output of our</font>

257
00:11:04,100 --> 00:11:10,370
cipher is 64 bits<font color="#E5E5E5"> and it turns out the</font>

258
00:11:08,090 --> 00:11:13,430
reasoning<font color="#E5E5E5"> behind this is export controls</font>

259
00:11:10,370 --> 00:11:15,050
if you filled the entire pointer with

260
00:11:13,430 --> 00:11:17,089
the value it might be<font color="#E5E5E5"> considered</font>

261
00:11:15,050 --> 00:11:19,130
general-purpose cryptography and then it

262
00:11:17,090 --> 00:11:20,810
would be<font color="#E5E5E5"> subject to export controls so I</font>

263
00:11:19,130 --> 00:11:22,460
found this interesting<font color="#CCCCCC"> because it's</font><font color="#E5E5E5"> not</font>

264
00:11:20,810 --> 00:11:25,670
<font color="#E5E5E5">something I</font><font color="#CCCCCC"> generally think of when I'm</font>

265
00:11:22,460 --> 00:11:29,420
thinking<font color="#E5E5E5"> of design</font><font color="#CCCCCC"> criteria there's also</font>

266
00:11:25,670 --> 00:11:31,790
the<font color="#E5E5E5"> xpac instructions</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> purpose is</font>

267
00:11:29,420 --> 00:11:33,290
to strip an authentication<font color="#E5E5E5"> code from a</font>

268
00:11:31,790 --> 00:11:35,750
pointer without performing the

269
00:11:33,290 --> 00:11:37,910
verification<font color="#E5E5E5"> and the intent here is to</font>

270
00:11:35,750 --> 00:11:40,100
support<font color="#E5E5E5"> debugging you might have a</font>

271
00:11:37,910 --> 00:11:42,589
debugger<font color="#E5E5E5"> which is attached to a process</font>

272
00:11:40,100 --> 00:11:44,600
and it won't have access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the keys</font>

273
00:11:42,590 --> 00:11:47,090
<font color="#E5E5E5">that</font><font color="#CCCCCC"> the process that's attached to is</font>

274
00:11:44,600 --> 00:11:49,280
used to authenticate<font color="#CCCCCC"> it's pointers so it</font>

275
00:11:47,090 --> 00:11:52,250
can't verify<font color="#E5E5E5"> the pointers but if you</font>

276
00:11:49,280 --> 00:11:54,680
want to say walk the stack<font color="#CCCCCC"> you need to</font>

277
00:11:52,250 --> 00:11:59,270
strip the tags<font color="#E5E5E5"> and then you can walk the</font>

278
00:11:54,680 --> 00:12:02,000
stack<font color="#CCCCCC"> using existing</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> a good</font>

279
00:11:59,270 --> 00:12:04,670
<font color="#E5E5E5">question to ask is why authentication</font>

280
00:12:02,000 --> 00:12:06,080
why not encryption and the train of

281
00:12:04,670 --> 00:12:08,150
<font color="#CCCCCC">thought that</font><font color="#E5E5E5"> might lead you to</font>

282
00:12:06,080 --> 00:12:10,970
encryption being a better solution<font color="#E5E5E5"> is</font>

283
00:12:08,150 --> 00:12:14,630
the resistance<font color="#CCCCCC"> to guessing with</font>

284
00:12:10,970 --> 00:12:17,030
<font color="#E5E5E5">encryption if I'm going to guess you</font>

285
00:12:14,630 --> 00:12:19,460
know<font color="#CCCCCC"> a valid encrypted pointer</font><font color="#E5E5E5"> I have a</font>

286
00:12:17,030 --> 00:12:22,760
<font color="#CCCCCC">1</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> 2 to the</font><font color="#E5E5E5"> 64 chance of doing</font><font color="#CCCCCC"> that</font>

287
00:12:19,460 --> 00:12:24,860
whereas with authentication<font color="#CCCCCC"> I have a 1</font>

288
00:12:22,760 --> 00:12:26,720
in<font color="#E5E5E5"> 2 to the size of the authentication</font>

289
00:12:24,860 --> 00:12:28,600
code<font color="#E5E5E5"> so on the surface it</font><font color="#CCCCCC"> seems like</font>

290
00:12:26,720 --> 00:12:31,160
encryption<font color="#E5E5E5"> would be the better choice</font>

291
00:12:28,600 --> 00:12:32,840
but there are in my<font color="#E5E5E5"> opinion some really</font>

292
00:12:31,160 --> 00:12:36,829
good reasons<font color="#CCCCCC"> to</font><font color="#E5E5E5"> prefer authentication</font>

293
00:12:32,840 --> 00:12:39,620
<font color="#CCCCCC">one of them is error detection with</font>

294
00:12:36,830 --> 00:12:42,050
encryption you're relying on<font color="#E5E5E5"> the fact</font>

295
00:12:39,620 --> 00:12:44,420
<font color="#E5E5E5">that when you decrypt the value if it's</font>

296
00:12:42,050 --> 00:12:46,189
if it has been corrupted it should

297
00:12:44,420 --> 00:12:48,260
decrypt to<font color="#E5E5E5"> garbage and you want it</font><font color="#CCCCCC"> to</font>

298
00:12:46,190 --> 00:12:49,880
crash as soon as possible<font color="#E5E5E5"> but it may not</font>

299
00:12:48,260 --> 00:12:51,319
<font color="#E5E5E5">crash as soon as possible</font>

300
00:12:49,880 --> 00:12:54,920
it could do all sorts<font color="#CCCCCC"> of things before</font>

301
00:12:51,320 --> 00:12:56,660
<font color="#E5E5E5">it does and I think that would be a real</font>

302
00:12:54,920 --> 00:12:59,990
pain<font color="#E5E5E5"> to debug and I wouldn't wish that</font>

303
00:12:56,660 --> 00:13:01,579
<font color="#E5E5E5">on anyone with</font><font color="#CCCCCC"> authentication</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we</font>

304
00:12:59,990 --> 00:13:03,740
can write that special bit value in

305
00:13:01,580 --> 00:13:05,510
there we can<font color="#E5E5E5"> determine that it was an</font>

306
00:13:03,740 --> 00:13:08,170
authentication fault<font color="#CCCCCC"> that led to the</font>

307
00:13:05,510 --> 00:13:08,170
default

308
00:13:08,540 --> 00:13:13,640
<font color="#E5E5E5">debugging is another reason to</font><font color="#CCCCCC"> prefer it</font>

309
00:13:10,690 --> 00:13:15,860
<font color="#E5E5E5">because the actual virtual address is</font>

310
00:13:13,640 --> 00:13:17,720
alongside the authentication code<font color="#CCCCCC"> it's</font>

311
00:13:15,860 --> 00:13:21,290
still there to be seen by a debugger

312
00:13:17,720 --> 00:13:23,990
<font color="#CCCCCC">which makes</font><font color="#E5E5E5"> things much easier if you</font>

313
00:13:21,290 --> 00:13:25,670
<font color="#CCCCCC">have see a core dump</font><font color="#E5E5E5"> where the keys</font><font color="#CCCCCC"> that</font>

314
00:13:23,990 --> 00:13:29,150
<font color="#E5E5E5">you use to authenticate</font><font color="#CCCCCC"> all of your</font>

315
00:13:25,670 --> 00:13:31,160
pointers are<font color="#E5E5E5"> you know lost you can still</font>

316
00:13:29,150 --> 00:13:35,990
do useful<font color="#E5E5E5"> things because you still have</font>

317
00:13:31,160 --> 00:13:39,079
<font color="#E5E5E5">the virtual addresses a similar argument</font>

318
00:13:35,990 --> 00:13:41,780
<font color="#E5E5E5">is for branch prediction and speculative</font>

319
00:13:39,080 --> 00:13:44,390
execution<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> virtual address</font><font color="#CCCCCC"> is</font>

320
00:13:41,780 --> 00:13:46,819
<font color="#E5E5E5">in there readily available inside the</font>

321
00:13:44,390 --> 00:13:48,410
pointer<font color="#E5E5E5"> the processor can continue to</font>

322
00:13:46,820 --> 00:13:50,120
fetch<font color="#E5E5E5"> you know instructions that are</font>

323
00:13:48,410 --> 00:13:52,430
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> be executed it can fetch data</font>

324
00:13:50,120 --> 00:13:54,140
that's being referenced<font color="#CCCCCC"> and this lets</font>

325
00:13:52,430 --> 00:13:55,670
<font color="#E5E5E5">you keep the pipeline full which is</font>

326
00:13:54,140 --> 00:13:59,600
really important<font color="#E5E5E5"> when</font><font color="#CCCCCC"> it comes to</font><font color="#E5E5E5"> hiding</font>

327
00:13:55,670 --> 00:14:01,520
the latency of<font color="#E5E5E5"> these instructions</font><font color="#CCCCCC"> a last</font>

328
00:13:59,600 --> 00:14:04,580
<font color="#CCCCCC">argument to prefer authentication over</font>

329
00:14:01,520 --> 00:14:06,290
encryption is just one<font color="#CCCCCC"> of semantics what</font>

330
00:14:04,580 --> 00:14:08,810
<font color="#E5E5E5">we really want is we</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> guarantee</font>

331
00:14:06,290 --> 00:14:11,530
the<font color="#CCCCCC"> integrity of pointers we don't care</font>

332
00:14:08,810 --> 00:14:13,430
so<font color="#CCCCCC"> much about their confidentiality</font><font color="#E5E5E5"> so</font>

333
00:14:11,530 --> 00:14:14,810
authentication gives you integrity

334
00:14:13,430 --> 00:14:18,910
encryption<font color="#E5E5E5"> because you confidentiality</font>

335
00:14:14,810 --> 00:14:21,199
<font color="#E5E5E5">so prefer authentication for that reason</font>

336
00:14:18,910 --> 00:14:22,819
<font color="#CCCCCC">the last thing I'd like to say about</font><font color="#E5E5E5"> the</font>

337
00:14:21,200 --> 00:14:27,650
design is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> mention this notion of</font>

338
00:14:22,820 --> 00:14:30,020
context a context is an additional

339
00:14:27,650 --> 00:14:31,699
public<font color="#E5E5E5"> input that's used in our</font>

340
00:14:30,020 --> 00:14:33,620
authentication algorithm and it's

341
00:14:31,700 --> 00:14:34,910
specified<font color="#E5E5E5"> either explicitly as a</font>

342
00:14:33,620 --> 00:14:36,950
register or<font color="#CCCCCC"> an</font><font color="#E5E5E5"> immediate</font><font color="#CCCCCC"> in the</font>

343
00:14:34,910 --> 00:14:40,480
instruction<font color="#E5E5E5"> or implicitly by the</font>

344
00:14:36,950 --> 00:14:44,030
specific type of<font color="#E5E5E5"> instruction variant and</font>

345
00:14:40,480 --> 00:14:46,010
its<font color="#E5E5E5"> purpose is to mitigate a</font><font color="#CCCCCC"> pointer</font>

346
00:14:44,030 --> 00:14:47,780
substitution attack and<font color="#E5E5E5"> I'm going to</font>

347
00:14:46,010 --> 00:14:50,060
leave that<font color="#CCCCCC"> for</font><font color="#E5E5E5"> now because in the</font>

348
00:14:47,780 --> 00:14:54,439
security analysis sectional<font color="#E5E5E5"> address that</font>

349
00:14:50,060 --> 00:14:56,989
in more depth what I<font color="#E5E5E5"> think is cool about</font>

350
00:14:54,440 --> 00:14:59,330
contexts<font color="#E5E5E5"> is that they let you</font><font color="#CCCCCC"> emulate</font>

351
00:14:56,990 --> 00:15:01,550
the<font color="#CCCCCC"> granularity of</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> CFI or</font>

352
00:14:59,330 --> 00:15:03,710
control flow integrity schemes so

353
00:15:01,550 --> 00:15:05,089
<font color="#E5E5E5">Microsoft's control flow guard</font><font color="#CCCCCC"> as I</font>

354
00:15:03,710 --> 00:15:06,230
understand it and<font color="#E5E5E5"> I really hope I</font>

355
00:15:05,090 --> 00:15:07,730
understand it because<font color="#CCCCCC"> this would be the</font>

356
00:15:06,230 --> 00:15:11,980
most<font color="#CCCCCC"> embarrassing place</font><font color="#E5E5E5"> to prove I don't</font>

357
00:15:07,730 --> 00:15:15,500
<font color="#E5E5E5">understand it but as I understand it it</font>

358
00:15:11,980 --> 00:15:18,260
restricts you for any indirect branch it

359
00:15:15,500 --> 00:15:19,640
allows you<font color="#E5E5E5"> to jump</font><font color="#CCCCCC"> to functions that</font>

360
00:15:18,260 --> 00:15:20,860
have had their address taken so

361
00:15:19,640 --> 00:15:23,680
legitimate destination

362
00:15:20,860 --> 00:15:25,060
for indirect branches but<font color="#E5E5E5"> maybe not the</font>

363
00:15:23,680 --> 00:15:27,760
legitimate destination for that

364
00:15:25,060 --> 00:15:29,829
particular indirect branch and you can

365
00:15:27,760 --> 00:15:32,410
get the same behavior with<font color="#CCCCCC"> pointer</font>

366
00:15:29,830 --> 00:15:35,980
<font color="#E5E5E5">authentication by using a fixed context</font>

367
00:15:32,410 --> 00:15:39,699
<font color="#E5E5E5">across every authentication verification</font>

368
00:15:35,980 --> 00:15:43,890
<font color="#E5E5E5">if you want something with a more</font>

369
00:15:39,700 --> 00:15:47,470
fine-grained<font color="#E5E5E5"> approach then you can use</font>

370
00:15:43,890 --> 00:15:50,350
<font color="#E5E5E5">say you could</font><font color="#CCCCCC"> use you could</font><font color="#E5E5E5"> use the</font><font color="#CCCCCC"> era</font>

371
00:15:47,470 --> 00:15:52,270
<font color="#E5E5E5">key of a function so you for your</font>

372
00:15:50,350 --> 00:15:54,190
context you could use the era T of the

373
00:15:52,270 --> 00:15:57,490
<font color="#CCCCCC">coal site and then this</font><font color="#E5E5E5"> would prevent</font>

374
00:15:54,190 --> 00:16:00,520
you from<font color="#E5E5E5"> using you know a function</font><font color="#CCCCCC"> that</font>

375
00:15:57,490 --> 00:16:02,770
<font color="#CCCCCC">takes two parameters from</font><font color="#E5E5E5"> a coal site</font>

376
00:16:00,520 --> 00:16:04,630
that only<font color="#E5E5E5"> takes one as an</font><font color="#CCCCCC"> example but</font>

377
00:16:02,770 --> 00:16:09,060
you can emulate<font color="#CCCCCC"> all of these different</font>

378
00:16:04,630 --> 00:16:09,060
schemes<font color="#E5E5E5"> through the use of contexts</font>

379
00:16:10,350 --> 00:16:15,550
<font color="#CCCCCC">alright so for the crypto</font><font color="#E5E5E5"> we needed</font>

380
00:16:13,690 --> 00:16:18,010
something<font color="#E5E5E5"> fast and lightweight because</font>

381
00:16:15,550 --> 00:16:20,920
<font color="#E5E5E5">the efficiency hinges on how quickly you</font>

382
00:16:18,010 --> 00:16:23,530
can form<font color="#E5E5E5"> the cartographer it also has to</font>

383
00:16:20,920 --> 00:16:25,360
be<font color="#E5E5E5"> strong when you discard most of the</font>

384
00:16:23,530 --> 00:16:29,260
output<font color="#CCCCCC"> of the cipher</font><font color="#E5E5E5"> and you end up with</font>

385
00:16:25,360 --> 00:16:31,960
very<font color="#E5E5E5"> short authentication codes and for</font>

386
00:16:29,260 --> 00:16:35,460
our<font color="#E5E5E5"> users we wanted to 64-bit inputs so</font>

387
00:16:31,960 --> 00:16:38,170
the pointer<font color="#E5E5E5"> and the context we have</font>

388
00:16:35,460 --> 00:16:41,140
128-bit keys and we<font color="#E5E5E5"> produce a</font><font color="#CCCCCC"> 64-bit</font>

389
00:16:38,170 --> 00:16:43,390
<font color="#E5E5E5">output</font><font color="#CCCCCC"> we designed an algorithm</font><font color="#E5E5E5"> called</font>

390
00:16:41,140 --> 00:16:45,370
<font color="#CCCCCC">comma and here I'm being</font><font color="#E5E5E5"> very liberal</font>

391
00:16:43,390 --> 00:16:47,380
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the use of we I had nothing to do</font>

392
00:16:45,370 --> 00:16:50,020
with<font color="#E5E5E5"> this</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we designed something</font>

393
00:16:47,380 --> 00:16:51,790
called<font color="#CCCCCC"> karma</font><font color="#E5E5E5"> at Qualcomm it's the height</font>

394
00:16:50,020 --> 00:16:54,130
<font color="#E5E5E5">of cleverness to name something with</font>

395
00:16:51,790 --> 00:16:56,709
either a C or<font color="#E5E5E5"> K and to replace the C</font><font color="#CCCCCC"> or</font>

396
00:16:54,130 --> 00:17:01,540
<font color="#CCCCCC">K with a Q</font><font color="#E5E5E5"> that's looked upon very</font>

397
00:16:56,710 --> 00:17:04,780
<font color="#E5E5E5">favorably and</font><font color="#CCCCCC"> karma is a family</font><font color="#E5E5E5"> of</font>

398
00:17:01,540 --> 00:17:07,990
lightweight tweakable ciphers<font color="#CCCCCC"> I had no</font>

399
00:17:04,780 --> 00:17:10,839
<font color="#CCCCCC">idea</font><font color="#E5E5E5"> what a tweakable cipher was so it's</font>

400
00:17:07,990 --> 00:17:12,849
a type of<font color="#E5E5E5"> block cipher but it takes one</font>

401
00:17:10,839 --> 00:17:16,449
<font color="#CCCCCC">extra parameter</font><font color="#E5E5E5"> which is the</font><font color="#CCCCCC"> tweak and</font>

402
00:17:12,849 --> 00:17:18,609
it's considered<font color="#E5E5E5"> secure</font><font color="#CCCCCC"> if even if an</font>

403
00:17:16,450 --> 00:17:20,319
attacker<font color="#E5E5E5"> knows the tweak they still</font>

404
00:17:18,609 --> 00:17:23,310
can't predict the<font color="#CCCCCC"> output of</font><font color="#E5E5E5"> the cipher</font>

405
00:17:20,319 --> 00:17:26,829
<font color="#E5E5E5">so in our case the tweak is the context</font>

406
00:17:23,310 --> 00:17:29,230
<font color="#CCCCCC">I guess they were designed originally to</font>

407
00:17:26,829 --> 00:17:32,020
<font color="#E5E5E5">solve the problem of memory encryption</font>

408
00:17:29,230 --> 00:17:33,650
where if<font color="#E5E5E5"> you had a block of memory that</font>

409
00:17:32,020 --> 00:17:36,050
you were decrypting<font color="#E5E5E5"> you</font>

410
00:17:33,650 --> 00:17:37,310
want it<font color="#E5E5E5"> to be different from the</font><font color="#CCCCCC"> other</font>

411
00:17:36,050 --> 00:17:41,000
blocks of<font color="#CCCCCC"> memory that</font><font color="#E5E5E5"> may have very</font>

412
00:17:37,310 --> 00:17:42,800
<font color="#E5E5E5">similar content so they added the tweak</font>

413
00:17:41,000 --> 00:17:44,480
which was the<font color="#CCCCCC"> physical address</font><font color="#E5E5E5"> of that</font>

414
00:17:42,800 --> 00:17:49,610
<font color="#E5E5E5">chunk of memory so it comes from that</font>

415
00:17:44,480 --> 00:17:52,880
line of research<font color="#E5E5E5"> for key management we</font>

416
00:17:49,610 --> 00:17:54,800
have<font color="#CCCCCC"> five 128-bit keys there are two</font>

417
00:17:52,880 --> 00:17:56,810
keys for<font color="#E5E5E5"> pointers to instructions</font><font color="#CCCCCC"> two</font>

418
00:17:54,800 --> 00:18:01,520
keys for<font color="#CCCCCC"> pointers to data and one key</font>

419
00:17:56,810 --> 00:18:03,919
for the generic<font color="#CCCCCC"> Mac instruction keys are</font>

420
00:18:01,520 --> 00:18:05,660
not banked per exception level so in

421
00:18:03,920 --> 00:18:08,270
other words it's the responsibility of

422
00:18:05,660 --> 00:18:11,660
software<font color="#CCCCCC"> to switch keys when switching</font>

423
00:18:08,270 --> 00:18:14,389
contexts<font color="#E5E5E5"> and there are system register</font>

424
00:18:11,660 --> 00:18:16,490
controls<font color="#E5E5E5"> for the behavior of these keys</font>

425
00:18:14,390 --> 00:18:19,760
in<font color="#E5E5E5"> these instructions for backwards</font>

426
00:18:16,490 --> 00:18:21,740
<font color="#CCCCCC">compatibility</font><font color="#E5E5E5"> you can disable keys</font><font color="#CCCCCC"> you</font>

427
00:18:19,760 --> 00:18:23,930
can<font color="#CCCCCC"> also configure</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to trap into</font>

428
00:18:21,740 --> 00:18:26,180
<font color="#E5E5E5">higher exception levels when either a</font>

429
00:18:23,930 --> 00:18:28,820
key is used or when an instruction is

430
00:18:26,180 --> 00:18:30,860
used<font color="#CCCCCC"> and the idea here was to</font><font color="#E5E5E5"> allow</font>

431
00:18:28,820 --> 00:18:37,129
things<font color="#E5E5E5"> like say the lazy loading of keys</font>

432
00:18:30,860 --> 00:18:40,939
when you're switching contexts all right

433
00:18:37,130 --> 00:18:45,830
<font color="#CCCCCC">onto the security analysis security</font>

434
00:18:40,940 --> 00:18:48,490
boundary<font color="#E5E5E5"> is the process itself</font><font color="#CCCCCC"> threat</font>

435
00:18:45,830 --> 00:18:52,010
model is we assume an attacker<font color="#E5E5E5"> who has</font>

436
00:18:48,490 --> 00:18:56,600
arbitrary<font color="#CCCCCC"> readwrite in other words they</font>

437
00:18:52,010 --> 00:18:58,129
can at arbitrary times<font color="#E5E5E5"> read arbitrary</font>

438
00:18:56,600 --> 00:19:00,159
memory locations and write<font color="#CCCCCC"> arbitrary</font>

439
00:18:58,130 --> 00:19:03,620
values start<font color="#E5E5E5"> with</font><font color="#CCCCCC"> remember locations</font>

440
00:19:00,160 --> 00:19:07,570
it's a powerful attacker model but it's

441
00:19:03,620 --> 00:19:10,340
also sadly<font color="#CCCCCC"> very</font><font color="#E5E5E5"> practical and reasonable</font>

442
00:19:07,570 --> 00:19:12,080
our assumption is that you have data

443
00:19:10,340 --> 00:19:14,929
execution prevention<font color="#E5E5E5"> implemented</font>

444
00:19:12,080 --> 00:19:17,570
correctly<font color="#E5E5E5"> if you don't have this then</font>

445
00:19:14,930 --> 00:19:19,040
it's trivial<font color="#E5E5E5"> to</font><font color="#CCCCCC"> buy possible</font><font color="#E5E5E5"> entry</font>

446
00:19:17,570 --> 00:19:21,470
authentication<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> simply</font>

447
00:19:19,040 --> 00:19:23,510
override<font color="#E5E5E5"> the checks or you forge your</font>

448
00:19:21,470 --> 00:19:24,980
own pointers by writing instructions

449
00:19:23,510 --> 00:19:29,960
<font color="#E5E5E5">that can generate new</font><font color="#CCCCCC"> Authenticator</font>

450
00:19:24,980 --> 00:19:33,290
<font color="#E5E5E5">pointers there are a number</font><font color="#CCCCCC"> of attacks</font>

451
00:19:29,960 --> 00:19:36,890
<font color="#CCCCCC">to consider the first</font><font color="#E5E5E5"> one is guessing</font>

452
00:19:33,290 --> 00:19:39,980
<font color="#E5E5E5">and forging</font><font color="#CCCCCC"> tag pointer values I touched</font>

453
00:19:36,890 --> 00:19:42,370
on<font color="#E5E5E5"> this earlier we have between 3 and 31</font>

454
00:19:39,980 --> 00:19:44,930
bits<font color="#E5E5E5"> for our authentication codes and</font>

455
00:19:42,370 --> 00:19:47,709
obviously your ability to<font color="#E5E5E5"> guess it will</font>

456
00:19:44,930 --> 00:19:50,659
<font color="#CCCCCC">be</font><font color="#E5E5E5"> dependent upon how wide the code is</font>

457
00:19:47,710 --> 00:19:54,379
if you need to guess multiple pointers

458
00:19:50,659 --> 00:19:56,210
<font color="#E5E5E5">for</font><font color="#CCCCCC"> your attack then the chance of</font>

459
00:19:54,379 --> 00:20:01,689
<font color="#CCCCCC">guessing all of them</font><font color="#E5E5E5"> will increase</font>

460
00:19:56,210 --> 00:20:03,529
<font color="#E5E5E5">exponentially and for forging pointers</font>

461
00:20:01,690 --> 00:20:06,830
<font color="#CCCCCC">because we have a cryptographically</font>

462
00:20:03,529 --> 00:20:08,690
strong algorithm<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> possible to</font>

463
00:20:06,830 --> 00:20:10,218
<font color="#E5E5E5">forge pointers no matter how many</font><font color="#CCCCCC"> pour I</font>

464
00:20:08,690 --> 00:20:12,559
caught<font color="#CCCCCC"> they how</font><font color="#E5E5E5"> many Authenticator</font>

465
00:20:10,219 --> 00:20:15,259
pointers<font color="#CCCCCC"> you can see it doesn't make it</font>

466
00:20:12,559 --> 00:20:20,359
<font color="#E5E5E5">any more any easier to forge you know</font>

467
00:20:15,259 --> 00:20:23,269
another one if an attacker has arbitrary

468
00:20:20,359 --> 00:20:25,820
memory<font color="#E5E5E5"> read say through a</font><font color="#CCCCCC"> read buffer</font>

469
00:20:23,269 --> 00:20:31,249
overflow<font color="#E5E5E5"> or an uninitialized memory</font>

470
00:20:25,820 --> 00:20:34,070
vulnerability well I mean then they can

471
00:20:31,249 --> 00:20:35,929
read arbitrary memory locations<font color="#CCCCCC"> stack</font>

472
00:20:34,070 --> 00:20:38,029
smashing protection and address space

473
00:20:35,929 --> 00:20:40,219
<font color="#CCCCCC">layout randomization are vulnerable to</font>

474
00:20:38,029 --> 00:20:41,989
<font color="#E5E5E5">information disclosure but pointer</font>

475
00:20:40,219 --> 00:20:44,749
authentication is designed to be robust

476
00:20:41,989 --> 00:20:47,029
here<font color="#E5E5E5"> again because we have a</font>

477
00:20:44,749 --> 00:20:49,580
cryptographically strong algorithm<font color="#E5E5E5"> no</font>

478
00:20:47,029 --> 00:20:51,259
matter how<font color="#E5E5E5"> many you know authenticated</font>

479
00:20:49,580 --> 00:20:55,189
point is you collect<font color="#E5E5E5"> it doesn't help you</font>

480
00:20:51,259 --> 00:20:57,889
<font color="#E5E5E5">you know create new ones and the keys</font>

481
00:20:55,190 --> 00:21:00,200
aren't<font color="#E5E5E5"> stored</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> process memory</font><font color="#CCCCCC"> the keys</font>

482
00:20:57,889 --> 00:21:02,269
are stored in registers and they're not

483
00:21:00,200 --> 00:21:07,580
<font color="#CCCCCC">available to the lowest exception level</font>

484
00:21:02,269 --> 00:21:09,799
exception level<font color="#CCCCCC"> zero for arbitrary</font>

485
00:21:07,580 --> 00:21:13,070
memory right this would be an attacker

486
00:21:09,799 --> 00:21:14,989
who has exploited<font color="#CCCCCC"> say a stack Oh key</font>

487
00:21:13,070 --> 00:21:16,549
buffer overflow or<font color="#E5E5E5"> use off to free</font>

488
00:21:14,989 --> 00:21:20,239
vulnerability and they can write<font color="#CCCCCC"> to</font>

489
00:21:16,549 --> 00:21:21,830
arbitrary memory locations with pointer

490
00:21:20,239 --> 00:21:25,159
authentication<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> protect sensitive</font>

491
00:21:21,830 --> 00:21:27,918
pointers by authenticating them so save

492
00:21:25,159 --> 00:21:30,049
return addresses<font color="#E5E5E5"> or function pointers we</font>

493
00:21:27,919 --> 00:21:31,759
can prevent an attacker from<font color="#E5E5E5"> well we</font>

494
00:21:30,049 --> 00:21:33,349
can't prevent<font color="#E5E5E5"> them from overwriting them</font>

495
00:21:31,759 --> 00:21:36,320
but we can at least<font color="#E5E5E5"> catch it when they</font>

496
00:21:33,349 --> 00:21:38,869
try<font color="#CCCCCC"> to dereference the pointer similarly</font>

497
00:21:36,320 --> 00:21:42,950
we can protect pointers to sensitive

498
00:21:38,869 --> 00:21:45,019
data<font color="#E5E5E5"> structures however as attack has a</font>

499
00:21:42,950 --> 00:21:47,599
<font color="#E5E5E5">proven time and time again they will</font>

500
00:21:45,019 --> 00:21:50,119
just move to the<font color="#E5E5E5"> kind of next lowest</font>

501
00:21:47,599 --> 00:21:52,369
hanging fruit<font color="#CCCCCC"> so they will possibly</font><font color="#E5E5E5"> a</font>

502
00:21:50,119 --> 00:21:56,899
resort to say data<font color="#CCCCCC"> only</font><font color="#E5E5E5"> attacks as a</font>

503
00:21:52,369 --> 00:21:59,059
next step<font color="#E5E5E5"> where they say override and is</font>

504
00:21:56,899 --> 00:22:00,559
authenticated boolean to bypass a

505
00:21:59,059 --> 00:22:02,749
password check

506
00:22:00,559 --> 00:22:04,340
or if you have a<font color="#E5E5E5"> kernel exploit you</font>

507
00:22:02,749 --> 00:22:08,419
might<font color="#E5E5E5"> have</font><font color="#CCCCCC"> right the effective user ID</font>

508
00:22:04,340 --> 00:22:13,009
of<font color="#CCCCCC"> your process to elevate to root and</font>

509
00:22:08,419 --> 00:22:14,990
that<font color="#E5E5E5"> well that is something that is not</font>

510
00:22:13,009 --> 00:22:17,720
<font color="#E5E5E5">addressed by pointer authentication</font>

511
00:22:14,990 --> 00:22:20,029
hence the title raising the bar it

512
00:22:17,720 --> 00:22:21,399
doesn't entirely solve the problem but

513
00:22:20,029 --> 00:22:24,259
the hope is that<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> make</font>

514
00:22:21,399 --> 00:22:26,449
exploitation<font color="#E5E5E5"> either totally impossible</font>

515
00:22:24,259 --> 00:22:30,139
<font color="#E5E5E5">in some</font><font color="#CCCCCC"> scenarios or prohibitively</font>

516
00:22:26,450 --> 00:22:32,960
expensive and others<font color="#CCCCCC"> the most</font>

517
00:22:30,139 --> 00:22:36,830
interesting class<font color="#E5E5E5"> of attacks we think</font>

518
00:22:32,960 --> 00:22:39,559
will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> point substitution attacks any</font>

519
00:22:36,830 --> 00:22:41,449
pointers that<font color="#E5E5E5"> are signed by</font><font color="#CCCCCC"> the same key</font>

520
00:22:39,559 --> 00:22:43,789
and with the same context<font color="#E5E5E5"> are</font>

521
00:22:41,450 --> 00:22:45,830
interchangeable<font color="#CCCCCC"> so a</font><font color="#E5E5E5"> point of</font>

522
00:22:43,789 --> 00:22:47,539
substitution attack would involve<font color="#E5E5E5"> the</font>

523
00:22:45,830 --> 00:22:50,178
attacker leaking<font color="#E5E5E5"> an authenticated</font>

524
00:22:47,539 --> 00:22:51,679
pointer and then overwriting a different

525
00:22:50,179 --> 00:22:54,470
authenticated pointer with the leaked

526
00:22:51,679 --> 00:22:57,169
pointer<font color="#E5E5E5"> an example of where this may be</font>

527
00:22:54,470 --> 00:23:00,259
a<font color="#E5E5E5"> problem let's say</font><font color="#CCCCCC"> you have a program</font>

528
00:22:57,169 --> 00:23:01,909
with complicated<font color="#CCCCCC"> locking needs and it</font>

529
00:23:00,259 --> 00:23:06,220
can choose<font color="#E5E5E5"> to write</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> logging output</font>

530
00:23:01,909 --> 00:23:08,600
to either the console a file or socket

531
00:23:06,220 --> 00:23:10,789
<font color="#E5E5E5">the programmer might have decided to</font>

532
00:23:08,600 --> 00:23:12,259
abstract<font color="#E5E5E5"> this with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> pointer</font>

533
00:23:10,789 --> 00:23:15,950
that can point to<font color="#CCCCCC"> any</font><font color="#E5E5E5"> of these three</font>

534
00:23:12,259 --> 00:23:17,629
<font color="#CCCCCC">things and if you</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> assume that at</font>

535
00:23:15,950 --> 00:23:19,909
some<font color="#CCCCCC"> point</font><font color="#E5E5E5"> this program takes the</font>

536
00:23:17,629 --> 00:23:22,820
address of the system<font color="#CCCCCC"> C standard library</font>

537
00:23:19,909 --> 00:23:24,649
function then an attacker who can leak

538
00:23:22,820 --> 00:23:27,529
the authenticated pointer that points

539
00:23:24,649 --> 00:23:30,258
<font color="#E5E5E5">the system and they can overwrite the</font>

540
00:23:27,529 --> 00:23:32,570
<font color="#CCCCCC">locking function</font><font color="#E5E5E5"> pointer and and I guess</font>

541
00:23:30,259 --> 00:23:35,570
also<font color="#E5E5E5"> control</font><font color="#CCCCCC"> the input to the locking</font>

542
00:23:32,570 --> 00:23:37,730
<font color="#CCCCCC">function they could still get arbitrary</font>

543
00:23:35,570 --> 00:23:40,850
code execution<font color="#E5E5E5"> even</font><font color="#CCCCCC"> with authenticated</font>

544
00:23:37,730 --> 00:23:43,129
pointers there are a<font color="#E5E5E5"> few ways we've</font>

545
00:23:40,850 --> 00:23:45,408
tried to<font color="#E5E5E5"> mitigate this the first is by</font>

546
00:23:43,129 --> 00:23:47,269
having five different<font color="#CCCCCC"> keys two for</font>

547
00:23:45,409 --> 00:23:50,299
instructions<font color="#E5E5E5"> to the data and one for</font>

548
00:23:47,269 --> 00:23:52,519
generic use it's not<font color="#E5E5E5"> specified how to</font>

549
00:23:50,299 --> 00:23:54,889
use the two different<font color="#E5E5E5"> keys each for</font>

550
00:23:52,519 --> 00:23:58,669
instructions<font color="#E5E5E5"> and data we're hoping that</font>

551
00:23:54,889 --> 00:24:00,830
<font color="#E5E5E5">there will</font><font color="#CCCCCC"> be I guess some creative</font>

552
00:23:58,669 --> 00:24:02,179
<font color="#E5E5E5">ideas in</font><font color="#CCCCCC"> that space for good ways to you</font>

553
00:24:00,830 --> 00:24:03,678
<font color="#CCCCCC">know use one key for one set of</font>

554
00:24:02,179 --> 00:24:06,679
operations and<font color="#E5E5E5"> another key for the other</font>

555
00:24:03,679 --> 00:24:08,720
set<font color="#E5E5E5"> the other way we attempt to</font><font color="#CCCCCC"> mitigate</font>

556
00:24:06,679 --> 00:24:10,429
this is with contexts<font color="#E5E5E5"> and if you're</font>

557
00:24:08,720 --> 00:24:13,070
designing a mitigation<font color="#E5E5E5"> that makes use of</font>

558
00:24:10,429 --> 00:24:14,179
point or authentication instructions<font color="#E5E5E5"> you</font>

559
00:24:13,070 --> 00:24:16,970
<font color="#E5E5E5">should make</font>

560
00:24:14,179 --> 00:24:21,740
<font color="#E5E5E5">as much use of context as possible in</font>

561
00:24:16,970 --> 00:24:23,990
order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> mitigate this threat as always</font>

562
00:24:21,740 --> 00:24:25,970
there are<font color="#E5E5E5"> key management concerns you</font>

563
00:24:23,990 --> 00:24:28,490
want your keys<font color="#E5E5E5"> to be strong and</font><font color="#CCCCCC"> not</font>

564
00:24:25,970 --> 00:24:30,289
predictable<font color="#E5E5E5"> so generate your keys</font><font color="#CCCCCC"> within</font>

565
00:24:28,490 --> 00:24:32,119
good pseudo-random number generator<font color="#E5E5E5"> and</font>

566
00:24:30,289 --> 00:24:35,450
have it available<font color="#E5E5E5"> as early in the boot</font>

567
00:24:32,119 --> 00:24:37,399
flow as possible if<font color="#E5E5E5"> you reuse your keys</font>

568
00:24:35,450 --> 00:24:42,320
in different processes<font color="#E5E5E5"> you have a</font>

569
00:24:37,399 --> 00:24:46,039
problem<font color="#CCCCCC"> so don't do it other problems</font>

570
00:24:42,320 --> 00:24:49,580
<font color="#E5E5E5">are interpreters if you have a function</font>

571
00:24:46,039 --> 00:24:52,369
like<font color="#E5E5E5"> system for instance and you</font><font color="#CCCCCC"> can</font>

572
00:24:49,580 --> 00:24:55,129
supply<font color="#E5E5E5"> or an input to it it's it's game</font>

573
00:24:52,369 --> 00:24:57,408
over<font color="#CCCCCC"> and just</font><font color="#E5E5E5"> in time compilation can</font>

574
00:24:55,129 --> 00:24:58,759
also<font color="#E5E5E5"> present a problem</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> in not</font>

575
00:24:57,409 --> 00:25:00,169
<font color="#E5E5E5">all implementations but in many</font>

576
00:24:58,759 --> 00:25:01,610
<font color="#CCCCCC">implementations they violate our</font>

577
00:25:00,169 --> 00:25:03,679
assumption of data execution prevention

578
00:25:01,610 --> 00:25:05,689
<font color="#CCCCCC">they'll</font><font color="#E5E5E5"> often</font><font color="#CCCCCC"> have a page of memory</font>

579
00:25:03,679 --> 00:25:08,840
which is<font color="#E5E5E5"> both readable and executable</font>

580
00:25:05,690 --> 00:25:11,240
and writable at the same time and if you

581
00:25:08,840 --> 00:25:14,889
<font color="#E5E5E5">can you know do away with our assumption</font>

582
00:25:11,240 --> 00:25:17,539
then you can you know<font color="#CCCCCC"> break the</font><font color="#E5E5E5"> scheme</font>

583
00:25:14,889 --> 00:25:19,789
<font color="#E5E5E5">so that</font><font color="#CCCCCC"> was a monster slide there's only</font>

584
00:25:17,539 --> 00:25:24,559
<font color="#E5E5E5">about 15 words on the slide but I must</font>

585
00:25:19,789 --> 00:25:27,379
have<font color="#CCCCCC"> said a few hundred</font><font color="#E5E5E5"> so well done in</font>

586
00:25:24,559 --> 00:25:29,809
terms of applications we expect this to

587
00:25:27,379 --> 00:25:31,789
<font color="#CCCCCC">be</font><font color="#E5E5E5"> used in secure execution environments</font>

588
00:25:29,809 --> 00:25:34,428
like<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> owned in these environments</font>

589
00:25:31,789 --> 00:25:36,440
<font color="#CCCCCC">it's reasonable to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a smaller</font>

590
00:25:34,429 --> 00:25:39,440
address space where you can take full

591
00:25:36,440 --> 00:25:41,779
advantage of the<font color="#E5E5E5"> larger authentication</font>

592
00:25:39,440 --> 00:25:43,970
codes<font color="#E5E5E5"> and this does mean that we are</font>

593
00:25:41,779 --> 00:25:46,340
essentially<font color="#CCCCCC"> trading one bit of</font><font color="#E5E5E5"> a SLR for</font>

594
00:25:43,970 --> 00:25:48,200
one bit<font color="#CCCCCC"> of</font><font color="#E5E5E5"> authentication code but we</font>

595
00:25:46,340 --> 00:25:50,600
think this<font color="#CCCCCC"> is a worthwhile trade-off</font>

596
00:25:48,200 --> 00:25:52,669
<font color="#E5E5E5">because</font><font color="#CCCCCC"> a SLR is vulnerable to</font>

597
00:25:50,600 --> 00:25:54,678
information disclosure but pointer

598
00:25:52,669 --> 00:25:58,070
authentication isn't so it seems a

599
00:25:54,679 --> 00:25:59,720
worthwhile<font color="#E5E5E5"> trade-off</font><font color="#CCCCCC"> I think the most</font>

600
00:25:58,070 --> 00:26:01,279
<font color="#E5E5E5">reasonable way to expose this</font><font color="#CCCCCC"> to</font>

601
00:25:59,720 --> 00:26:04,759
developers is with compiler

602
00:26:01,279 --> 00:26:07,220
instrumentation so flags like -<font color="#E5E5E5"> a</font><font color="#CCCCCC"> stack</font>

603
00:26:04,759 --> 00:26:09,320
<font color="#E5E5E5">protector something like that and this</font>

604
00:26:07,220 --> 00:26:10,639
would be a<font color="#E5E5E5"> good way to expose stack</font>

605
00:26:09,320 --> 00:26:12,080
protection that takes advantage of

606
00:26:10,639 --> 00:26:16,399
pointer authentication or<font color="#E5E5E5"> control flow</font>

607
00:26:12,080 --> 00:26:18,499
integrity<font color="#CCCCCC"> a less</font><font color="#E5E5E5"> useful way of exposing</font>

608
00:26:16,399 --> 00:26:19,998
<font color="#E5E5E5">it is with compiler built in to let you</font>

609
00:26:18,499 --> 00:26:22,669
get at the instructions directly<font color="#E5E5E5"> and</font>

610
00:26:19,999 --> 00:26:25,549
this might be<font color="#CCCCCC"> necessary if say a library</font>

611
00:26:22,669 --> 00:26:27,260
designer decides that this pointer to

612
00:26:25,549 --> 00:26:29,780
this data structure<font color="#E5E5E5"> or the</font>

613
00:26:27,260 --> 00:26:31,430
free list<font color="#E5E5E5"> should be protected</font><font color="#CCCCCC"> they can</font>

614
00:26:29,780 --> 00:26:33,649
get at the nuts and bolts through

615
00:26:31,430 --> 00:26:36,800
built-ins<font color="#E5E5E5"> but from my own experience</font>

616
00:26:33,650 --> 00:26:38,510
this<font color="#E5E5E5"> is a little unwieldy to use I think</font>

617
00:26:36,800 --> 00:26:40,940
a more intuitive interface is with

618
00:26:38,510 --> 00:26:43,850
attributes in the compiler<font color="#E5E5E5"> so you can</font>

619
00:26:40,940 --> 00:26:46,070
attach say like an authenticated

620
00:26:43,850 --> 00:26:48,199
attribute to either a type or<font color="#E5E5E5"> a specific</font>

621
00:26:46,070 --> 00:26:49,970
<font color="#E5E5E5">value and then the compiler would know</font>

622
00:26:48,200 --> 00:26:52,760
to generate the appropriate instructions

623
00:26:49,970 --> 00:26:54,620
<font color="#CCCCCC">when you either</font><font color="#E5E5E5"> assign a value to</font><font color="#CCCCCC"> that</font>

624
00:26:52,760 --> 00:26:59,660
pointer or when you dereference<font color="#CCCCCC"> that</font>

625
00:26:54,620 --> 00:27:01,969
pointer<font color="#CCCCCC"> so as an example of how this</font>

626
00:26:59,660 --> 00:27:04,250
could<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to implement a generic</font>

627
00:27:01,970 --> 00:27:06,620
countermeasure with pointer

628
00:27:04,250 --> 00:27:08,780
authentication we're going to tag the

629
00:27:06,620 --> 00:27:11,449
<font color="#CCCCCC">save return address</font><font color="#E5E5E5"> and for the context</font>

630
00:27:08,780 --> 00:27:14,270
we<font color="#CCCCCC"> can use the stack pointer this means</font>

631
00:27:11,450 --> 00:27:15,770
<font color="#E5E5E5">that it's</font><font color="#CCCCCC"> not possible</font><font color="#E5E5E5"> to substitute one</font>

632
00:27:14,270 --> 00:27:17,720
authenticated return address with

633
00:27:15,770 --> 00:27:22,700
another<font color="#E5E5E5"> unless they happen</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> fall at</font>

634
00:27:17,720 --> 00:27:25,450
the same<font color="#E5E5E5"> stack slot</font><font color="#CCCCCC"> so without ssp</font><font color="#E5E5E5"> your</font>

635
00:27:22,700 --> 00:27:27,920
prologue and epilogue<font color="#CCCCCC"> look like this</font>

636
00:27:25,450 --> 00:27:30,530
<font color="#CCCCCC">with software stack smashing protection</font>

637
00:27:27,920 --> 00:27:32,300
<font color="#E5E5E5">there's a few things to notice the first</font>

638
00:27:30,530 --> 00:27:34,399
is that the frame size increases because

639
00:27:32,300 --> 00:27:37,250
<font color="#E5E5E5">we now</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the stack canary inside the</font>

640
00:27:34,400 --> 00:27:39,350
stack frame<font color="#E5E5E5"> and there's also a host of</font>

641
00:27:37,250 --> 00:27:40,970
<font color="#E5E5E5">extra instructions because</font><font color="#CCCCCC"> we have to</font>

642
00:27:39,350 --> 00:27:43,459
load the canary from thread-local

643
00:27:40,970 --> 00:27:46,070
storage<font color="#E5E5E5"> save it onto the stack and in</font>

644
00:27:43,460 --> 00:27:47,810
the<font color="#E5E5E5"> epilogue we have to again load it do</font>

645
00:27:46,070 --> 00:27:50,570
the comparison with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> golden copy and</font>

646
00:27:47,810 --> 00:27:53,450
then if necessary<font color="#CCCCCC"> handle the</font><font color="#E5E5E5"> arrow or</font>

647
00:27:50,570 --> 00:27:57,020
continue<font color="#E5E5E5"> execution with pointer</font>

648
00:27:53,450 --> 00:27:58,730
authentication<font color="#CCCCCC"> it's still worse than no</font>

649
00:27:57,020 --> 00:28:01,550
instrumentation but it's better than<font color="#E5E5E5"> the</font>

650
00:27:58,730 --> 00:28:04,940
<font color="#E5E5E5">software version</font><font color="#CCCCCC"> we add one instruction</font>

651
00:28:01,550 --> 00:28:06,530
this is a variant<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the pointer</font>

652
00:28:04,940 --> 00:28:10,150
authentication code<font color="#E5E5E5"> family of</font>

653
00:28:06,530 --> 00:28:12,830
instructions it uses the key a<font color="#E5E5E5"> and</font>

654
00:28:10,150 --> 00:28:15,860
<font color="#E5E5E5">implicitly uses the stack pointer as its</font>

655
00:28:12,830 --> 00:28:18,730
context<font color="#E5E5E5"> and we replace the return</font>

656
00:28:15,860 --> 00:28:22,550
<font color="#CCCCCC">instruction with ret AAA which also uses</font>

657
00:28:18,730 --> 00:28:25,880
the a key for instructions to validate

658
00:28:22,550 --> 00:28:28,610
the pointer it's an<font color="#E5E5E5"> example of a</font>

659
00:28:25,880 --> 00:28:31,460
combined instruction<font color="#E5E5E5"> the combined</font>

660
00:28:28,610 --> 00:28:34,340
instructions<font color="#E5E5E5"> do an authentication and</font>

661
00:28:31,460 --> 00:28:36,470
then either<font color="#E5E5E5"> a branch or a load in a</font>

662
00:28:34,340 --> 00:28:39,110
single instruction<font color="#E5E5E5"> and there were two</font>

663
00:28:36,470 --> 00:28:41,090
ideas here<font color="#E5E5E5"> one is to reduce code size</font>

664
00:28:39,110 --> 00:28:43,219
and the other is that it

665
00:28:41,090 --> 00:28:45,409
<font color="#E5E5E5">Vence you from creating gadgets where</font>

666
00:28:43,220 --> 00:28:47,570
you have an authentication and<font color="#E5E5E5"> then</font>

667
00:28:45,410 --> 00:28:49,670
<font color="#CCCCCC">sometime later a branch</font><font color="#E5E5E5"> anything between</font>

668
00:28:47,570 --> 00:28:52,280
<font color="#E5E5E5">these two operations is a potential</font>

669
00:28:49,670 --> 00:28:54,260
gadget<font color="#E5E5E5"> and I'm not too worried about</font>

670
00:28:52,280 --> 00:28:56,210
that<font color="#CCCCCC"> because in order</font><font color="#E5E5E5"> to jump to this</font>

671
00:28:54,260 --> 00:28:58,610
gadget<font color="#E5E5E5"> you would first have to you know</font>

672
00:28:56,210 --> 00:29:00,020
break the scheme<font color="#E5E5E5"> but this would make it</font>

673
00:28:58,610 --> 00:29:01,939
<font color="#CCCCCC">more</font><font color="#E5E5E5"> difficult for someone to string</font>

674
00:29:00,020 --> 00:29:05,030
together multiple gadgets<font color="#E5E5E5"> if they can do</font>

675
00:29:01,940 --> 00:29:07,760
<font color="#E5E5E5">it in the first place also worth</font>

676
00:29:05,030 --> 00:29:10,129
<font color="#CCCCCC">mentioning that pack I ASP and some of</font>

677
00:29:07,760 --> 00:29:13,160
the other<font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> in codings</font>

678
00:29:10,130 --> 00:29:15,550
come from the<font color="#CCCCCC"> knot space in</font><font color="#E5E5E5"> previous</font>

679
00:29:13,160 --> 00:29:18,620
<font color="#E5E5E5">versions of arm so if you were to take</font>

680
00:29:15,550 --> 00:29:21,200
this code on the right and run it on<font color="#E5E5E5"> an</font>

681
00:29:18,620 --> 00:29:22,939
older processor<font color="#E5E5E5"> it would still</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> it</font>

682
00:29:21,200 --> 00:29:25,250
<font color="#CCCCCC">just wouldn't give you any security</font>

683
00:29:22,940 --> 00:29:26,870
benefit that's<font color="#E5E5E5"> not true</font><font color="#CCCCCC"> for all of the</font>

684
00:29:25,250 --> 00:29:29,270
instructions that<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> added in</font><font color="#CCCCCC"> the</font>

685
00:29:26,870 --> 00:29:32,350
<font color="#E5E5E5">extension but it's true</font><font color="#CCCCCC"> for a subset the</font>

686
00:29:29,270 --> 00:29:32,350
ones we thought would<font color="#CCCCCC"> be most</font><font color="#E5E5E5"> useful</font>

687
00:29:32,530 --> 00:29:38,260
other places<font color="#E5E5E5"> that could potentially</font>

688
00:29:35,630 --> 00:29:40,870
<font color="#E5E5E5">benefit from this</font><font color="#CCCCCC"> you could authenticate</font>

689
00:29:38,260 --> 00:29:44,210
<font color="#E5E5E5">addresses in the import</font><font color="#CCCCCC"> address table</font>

690
00:29:40,870 --> 00:29:46,820
<font color="#CCCCCC">and in the c standard library there are</font>

691
00:29:44,210 --> 00:29:49,070
<font color="#CCCCCC">numerous things that might benefit from</font>

692
00:29:46,820 --> 00:29:51,560
this<font color="#CCCCCC"> so one example</font><font color="#E5E5E5"> is jump off</font>

693
00:29:49,070 --> 00:29:54,590
structures that<font color="#CCCCCC"> are used by</font><font color="#E5E5E5"> the set jump</font>

694
00:29:51,560 --> 00:29:56,690
and long jump<font color="#E5E5E5"> functions</font><font color="#CCCCCC"> another example</font>

695
00:29:54,590 --> 00:29:58,340
would be the<font color="#CCCCCC"> add exit call back you</font>

696
00:29:56,690 --> 00:30:01,220
could protect that pointer in memory

697
00:29:58,340 --> 00:30:04,550
I do hope by the way that you appreciate

698
00:30:01,220 --> 00:30:06,560
my my attempts<font color="#CCCCCC"> to cater to Windows I had</font>

699
00:30:04,550 --> 00:30:08,919
to look up<font color="#E5E5E5"> the PE file format</font><font color="#CCCCCC"> to find</font>

700
00:30:06,560 --> 00:30:12,500
like<font color="#E5E5E5"> the relevant names for things</font>

701
00:30:08,920 --> 00:30:14,720
<font color="#CCCCCC">there's also api's</font><font color="#E5E5E5"> so you guys have</font>

702
00:30:12,500 --> 00:30:16,790
<font color="#CCCCCC">encode pointer and code system pointer</font>

703
00:30:14,720 --> 00:30:19,520
and the corresponding decode functions

704
00:30:16,790 --> 00:30:21,050
<font color="#E5E5E5">that right now use exclusive all with a</font>

705
00:30:19,520 --> 00:30:23,510
key<font color="#E5E5E5"> that I think is stored in the</font>

706
00:30:21,050 --> 00:30:25,720
operating<font color="#E5E5E5"> system you could augment that</font>

707
00:30:23,510 --> 00:30:28,460
with pointer authentication and

708
00:30:25,720 --> 00:30:30,740
similarly<font color="#CCCCCC"> gee Lib</font><font color="#E5E5E5"> C has a pointer mangle</font>

709
00:30:28,460 --> 00:30:33,260
<font color="#E5E5E5">macro that he uses</font><font color="#CCCCCC"> for pointers</font><font color="#E5E5E5"> that are</font>

710
00:30:30,740 --> 00:30:36,050
<font color="#E5E5E5">stored in</font><font color="#CCCCCC"> memory you could do</font><font color="#E5E5E5"> pointer</font>

711
00:30:33,260 --> 00:30:39,740
authentication there instead<font color="#E5E5E5"> and best of</font>

712
00:30:36,050 --> 00:30:43,060
all<font color="#CCCCCC"> tagging every possible pointer would</font>

713
00:30:39,740 --> 00:30:43,060
<font color="#E5E5E5">be where I'd like</font><font color="#CCCCCC"> to see this girl</font>

714
00:30:44,630 --> 00:30:49,040
<font color="#E5E5E5">all right so to conclude and I'll try to</font>

715
00:30:47,540 --> 00:30:53,090
<font color="#E5E5E5">talk slightly slower</font><font color="#CCCCCC"> because I have a</font>

716
00:30:49,040 --> 00:30:55,670
lot<font color="#CCCCCC"> of time to burn through</font><font color="#E5E5E5"> so pointer</font>

717
00:30:53,090 --> 00:30:57,889
authentication it's a new primitive<font color="#E5E5E5"> that</font>

718
00:30:55,670 --> 00:31:00,920
you can use to build<font color="#E5E5E5"> software security</font>

719
00:30:57,890 --> 00:31:03,140
mitigations<font color="#E5E5E5"> it's useful by itself but</font>

720
00:31:00,920 --> 00:31:04,790
you could also<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it to build</font><font color="#E5E5E5"> stack</font>

721
00:31:03,140 --> 00:31:08,740
smashing protection or control flow

722
00:31:04,790 --> 00:31:12,920
integrity<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of other countermeasures</font>

723
00:31:08,740 --> 00:31:14,600
<font color="#CCCCCC">as usual the best results will come from</font>

724
00:31:12,920 --> 00:31:16,400
understanding<font color="#E5E5E5"> the application</font><font color="#CCCCCC"> that</font>

725
00:31:14,600 --> 00:31:19,070
<font color="#E5E5E5">you're trying to protect and knowing</font>

726
00:31:16,400 --> 00:31:23,780
which pointers<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> not be</font>

727
00:31:19,070 --> 00:31:26,000
changed and I guess one of<font color="#E5E5E5"> my</font><font color="#CCCCCC"> personal</font>

728
00:31:23,780 --> 00:31:29,090
takeaways<font color="#CCCCCC"> from this is it's always</font>

729
00:31:26,000 --> 00:31:31,070
<font color="#CCCCCC">beneficial to spread an idea as widely</font>

730
00:31:29,090 --> 00:31:32,929
as<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> you do something</font>

731
00:31:31,070 --> 00:31:37,490
<font color="#E5E5E5">silly like standardize it so it can't be</font>

732
00:31:32,930 --> 00:31:38,960
<font color="#CCCCCC">changed</font><font color="#E5E5E5"> because I come from a mobile</font>

733
00:31:37,490 --> 00:31:40,820
background<font color="#E5E5E5"> and there were things that I</font>

734
00:31:38,960 --> 00:31:44,030
did<font color="#CCCCCC"> not</font><font color="#E5E5E5"> think about like nested</font>

735
00:31:40,820 --> 00:31:48,050
virtualization<font color="#CCCCCC"> and VM migration that</font>

736
00:31:44,030 --> 00:31:49,610
luckily<font color="#E5E5E5"> other people did think</font><font color="#CCCCCC"> about so</font>

737
00:31:48,050 --> 00:31:51,919
that for<font color="#CCCCCC"> me</font><font color="#E5E5E5"> is one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the kind of more</font>

738
00:31:49,610 --> 00:31:55,639
<font color="#E5E5E5">important lessons from having worked</font><font color="#CCCCCC"> on</font>

739
00:31:51,920 --> 00:31:58,150
this and<font color="#E5E5E5"> I leave you</font><font color="#CCCCCC"> with this</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> I</font>

740
00:31:55,640 --> 00:31:58,150
think<font color="#E5E5E5"> it's funny</font>

741
00:32:06,470 --> 00:32:10,919
<font color="#E5E5E5">all right so thank you for your</font>

742
00:32:09,240 --> 00:32:16,679
attention<font color="#CCCCCC"> and I'd be happy to take any</font>

743
00:32:10,919 --> 00:32:18,899
questions<font color="#E5E5E5"> and we thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> for including</font>

744
00:32:16,679 --> 00:32:21,059
a meme or<font color="#E5E5E5"> Twitter reference to wake us</font>

745
00:32:18,899 --> 00:32:23,268
up<font color="#E5E5E5"> so</font><font color="#CCCCCC"> okay questions we have lots of</font>

746
00:32:21,059 --> 00:32:23,269
time

747
00:32:32,820 --> 00:32:39,000
<font color="#CCCCCC">hey you talked briefly about switching</font>

748
00:32:36,660 --> 00:32:41,850
some<font color="#CCCCCC"> SLR bits</font><font color="#E5E5E5"> over to authentication</font>

749
00:32:39,000 --> 00:32:43,830
bits<font color="#E5E5E5"> can you talk about do they fit</font>

750
00:32:41,850 --> 00:32:45,810
together is a SLR sort of less necessary

751
00:32:43,830 --> 00:32:50,100
<font color="#E5E5E5">if you have signing is it unnecessary if</font>

752
00:32:45,810 --> 00:32:53,100
you have signing it's<font color="#E5E5E5"> definitely not</font>

753
00:32:50,100 --> 00:32:57,689
unnecessary<font color="#E5E5E5"> because there's still a say</font>

754
00:32:53,100 --> 00:32:59,699
data only<font color="#E5E5E5"> attacks if I have to choose</font>

755
00:32:57,690 --> 00:33:01,260
<font color="#E5E5E5">between just one of them I'm gonna pick</font>

756
00:32:59,700 --> 00:33:04,230
pointer authentication because<font color="#E5E5E5"> it's my</font>

757
00:33:01,260 --> 00:33:06,120
baby but I also<font color="#E5E5E5"> think that there are</font>

758
00:33:04,230 --> 00:33:08,850
<font color="#E5E5E5">some advantages to</font><font color="#CCCCCC"> that namely that it's</font>

759
00:33:06,120 --> 00:33:10,350
resistant<font color="#E5E5E5"> to information disclosure it</font>

760
00:33:08,850 --> 00:33:15,800
would be<font color="#CCCCCC"> ideal if you didn't</font><font color="#E5E5E5"> have to</font>

761
00:33:10,350 --> 00:33:15,800
make<font color="#E5E5E5"> that trade-off at all</font><font color="#CCCCCC"> Thanks</font>

762
00:33:26,309 --> 00:33:31,408
I'm just<font color="#CCCCCC"> Trent on the son of</font><font color="#E5E5E5"> like you</font>

763
00:33:28,769 --> 00:33:32,970
know<font color="#CCCCCC"> a little bit in details you said</font>

764
00:33:31,409 --> 00:33:33,210
that<font color="#E5E5E5"> worst-case scenarios</font><font color="#CCCCCC"> free bed for</font>

765
00:33:32,970 --> 00:33:37,019
<font color="#CCCCCC">him</font>

766
00:33:33,210 --> 00:33:40,349
right<font color="#CCCCCC"> how hard did</font><font color="#E5E5E5"> we it would</font><font color="#CCCCCC"> be to</font>

767
00:33:37,019 --> 00:33:42,509
predict that some<font color="#CCCCCC"> protests</font><font color="#E5E5E5"> runs under</font>

768
00:33:40,349 --> 00:33:45,090
<font color="#E5E5E5">this circumstances because other great</font>

769
00:33:42,509 --> 00:33:47,519
typically goes after<font color="#CCCCCC"> easier</font><font color="#E5E5E5"> target right</font>

770
00:33:45,090 --> 00:33:49,738
<font color="#E5E5E5">and in this case despite the fact is you</font>

771
00:33:47,519 --> 00:33:52,559
probably<font color="#E5E5E5"> need to protect several</font>

772
00:33:49,739 --> 00:33:55,799
pointers<font color="#E5E5E5"> three bits for several pointers</font>

773
00:33:52,559 --> 00:33:58,830
it's<font color="#CCCCCC"> a constant time right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> my</font>

774
00:33:55,799 --> 00:34:01,320
understand it correctly<font color="#CCCCCC"> I think so your</font>

775
00:33:58,830 --> 00:34:05,039
<font color="#E5E5E5">chances of getting multiple pointers</font>

776
00:34:01,320 --> 00:34:06,599
I guess decreases exponentially<font color="#E5E5E5"> but if</font>

777
00:34:05,039 --> 00:34:10,649
it's only like two to the three each

778
00:34:06,599 --> 00:34:13,259
time it's not so great anyway<font color="#E5E5E5"> typically</font>

779
00:34:10,649 --> 00:34:15,538
most<font color="#E5E5E5"> processes on the</font><font color="#CCCCCC"> system will</font><font color="#E5E5E5"> have</font>

780
00:34:13,260 --> 00:34:16,710
the same<font color="#E5E5E5"> address size I think you could</font>

781
00:34:15,539 --> 00:34:18,599
have an<font color="#E5E5E5"> operating system where</font><font color="#CCCCCC"> that</font>

782
00:34:16,710 --> 00:34:23,940
wasn't<font color="#CCCCCC"> the case but I'm not</font><font color="#E5E5E5"> familiar</font>

783
00:34:18,599 --> 00:34:26,069
with<font color="#E5E5E5"> any of</font><font color="#CCCCCC"> that work that way I guess I</font>

784
00:34:23,940 --> 00:34:27,980
look<font color="#E5E5E5"> to the default</font><font color="#CCCCCC"> configuration</font><font color="#E5E5E5"> for</font>

785
00:34:26,069 --> 00:34:30,629
<font color="#E5E5E5">Linux where you have</font><font color="#CCCCCC"> 16-bit</font>

786
00:34:27,980 --> 00:34:34,760
<font color="#E5E5E5">would have 16-bit authentication codes</font>

787
00:34:30,629 --> 00:34:37,828
<font color="#CCCCCC">it's like a promising example but I</font>

788
00:34:34,760 --> 00:34:40,250
think<font color="#CCCCCC"> really to be</font><font color="#E5E5E5"> maximally useful you</font>

789
00:34:37,829 --> 00:34:47,700
have to plan to use this<font color="#E5E5E5"> ahead</font><font color="#CCCCCC"> of time</font>

790
00:34:40,250 --> 00:34:49,260
and you<font color="#CCCCCC"> have to it's most useful where</font>

791
00:34:47,699 --> 00:34:51,538
you have the flexibility<font color="#E5E5E5"> to choose a</font>

792
00:34:49,260 --> 00:34:53,760
smaller<font color="#CCCCCC"> airspace so in something like</font>

793
00:34:51,539 --> 00:34:57,270
<font color="#E5E5E5">trust zone</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> seems very reasonable</font><font color="#CCCCCC"> in</font>

794
00:34:53,760 --> 00:34:58,529
something like<font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> I'm not sure how</font>

795
00:34:57,270 --> 00:35:01,920
much<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the address space you</font><font color="#E5E5E5"> take</font>

796
00:34:58,529 --> 00:35:03,210
advantage<font color="#CCCCCC"> of but it may</font><font color="#E5E5E5"> be so much</font><font color="#CCCCCC"> of it</font>

797
00:35:01,920 --> 00:35:04,349
that<font color="#E5E5E5"> it would be very difficult I</font><font color="#CCCCCC"> mean</font>

798
00:35:03,210 --> 00:35:06,420
you I<font color="#CCCCCC"> don't think you can go back to</font>

799
00:35:04,349 --> 00:35:07,829
<font color="#CCCCCC">smaller address spaces now you've you've</font>

800
00:35:06,420 --> 00:35:10,829
kind of<font color="#E5E5E5"> made that decision I don't think</font>

801
00:35:07,829 --> 00:35:13,170
that's a reasonable choice so just

802
00:35:10,829 --> 00:35:15,270
follow up for this<font color="#E5E5E5"> because like you</font><font color="#CCCCCC"> know</font>

803
00:35:13,170 --> 00:35:16,980
it's ongoing<font color="#E5E5E5"> project and if you open for</font>

804
00:35:15,270 --> 00:35:19,049
<font color="#E5E5E5">suggestion because like you</font><font color="#CCCCCC"> know</font>

805
00:35:16,980 --> 00:35:22,400
<font color="#E5E5E5">sometimes developers doesn't think about</font>

806
00:35:19,049 --> 00:35:25,529
like<font color="#E5E5E5"> it's good strategy to use</font>

807
00:35:22,400 --> 00:35:27,210
<font color="#CCCCCC">protection of pointers</font><font color="#E5E5E5"> but when you</font>

808
00:35:25,529 --> 00:35:29,309
<font color="#CCCCCC">compile and all like you</font><font color="#E5E5E5"> know as you</font>

809
00:35:27,210 --> 00:35:32,339
suggested to<font color="#CCCCCC"> have additional flux into</font>

810
00:35:29,309 --> 00:35:34,349
it<font color="#E5E5E5"> maybe developer needs to know</font><font color="#CCCCCC"> that</font>

811
00:35:32,339 --> 00:35:36,570
like<font color="#E5E5E5"> you know you're limited in address</font>

812
00:35:34,349 --> 00:35:38,580
space and maybe it's<font color="#E5E5E5"> not the</font>

813
00:35:36,570 --> 00:35:40,770
secure option<font color="#E5E5E5"> for you and you want to</font>

814
00:35:38,580 --> 00:35:44,190
consider something else<font color="#E5E5E5"> in this case</font>

815
00:35:40,770 --> 00:35:46,830
<font color="#E5E5E5">because and then if you just go in for</font>

816
00:35:44,190 --> 00:35:50,790
<font color="#E5E5E5">this and take it as best practices and</font>

817
00:35:46,830 --> 00:35:55,470
you happen to be<font color="#CCCCCC"> three bits for your</font>

818
00:35:50,790 --> 00:35:56,940
token<font color="#E5E5E5"> you basically screwed up but yeah</font>

819
00:35:55,470 --> 00:36:00,720
thank<font color="#E5E5E5"> you very much for interesting talk</font>

820
00:35:56,940 --> 00:36:03,720
<font color="#CCCCCC">I think it's very reasonable though</font><font color="#E5E5E5"> that</font>

821
00:36:00,720 --> 00:36:07,279
people<font color="#CCCCCC"> I guess appreciate what</font><font color="#E5E5E5"> they're</font>

822
00:36:03,720 --> 00:36:07,279
getting they're not getting so I agree

823
00:36:12,420 --> 00:36:18,609
Hey so what kind<font color="#E5E5E5"> of overhead would you</font>

824
00:36:16,510 --> 00:36:20,650
get by<font color="#CCCCCC"> adding this</font><font color="#E5E5E5"> because it seems like</font>

825
00:36:18,609 --> 00:36:24,700
calculating<font color="#E5E5E5"> that hash every single time</font>

826
00:36:20,650 --> 00:36:28,150
would<font color="#E5E5E5"> be a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> overhead so I'm not</font>

827
00:36:24,700 --> 00:36:30,160
<font color="#E5E5E5">sure</font><font color="#CCCCCC"> it's easy to calculate code size</font>

828
00:36:28,150 --> 00:36:38,770
overhead it's more<font color="#CCCCCC"> challenging</font><font color="#E5E5E5"> to</font>

829
00:36:30,160 --> 00:36:40,930
<font color="#E5E5E5">measure the</font><font color="#CCCCCC"> performance overhead or in</font>

830
00:36:38,770 --> 00:36:42,819
the<font color="#E5E5E5"> the comma paper he gives you a</font>

831
00:36:40,930 --> 00:36:47,740
metric<font color="#E5E5E5"> in terms of the number</font><font color="#CCCCCC"> of gates</font>

832
00:36:42,819 --> 00:36:49,480
<font color="#CCCCCC">but for me that's quite</font><font color="#E5E5E5"> useless</font><font color="#CCCCCC"> I guess</font>

833
00:36:47,740 --> 00:36:51,609
it kind of remains to be seen how the

834
00:36:49,480 --> 00:36:54,040
different<font color="#CCCCCC"> microarchitecture is kind of</font>

835
00:36:51,609 --> 00:36:57,190
<font color="#CCCCCC">optimized</font><font color="#E5E5E5"> I'm hopeful that because we</font>

836
00:36:54,040 --> 00:36:59,140
don't upset<font color="#CCCCCC"> either branch prediction or</font>

837
00:36:57,190 --> 00:37:00,549
<font color="#E5E5E5">speculative execution we can hide most</font>

838
00:36:59,140 --> 00:37:03,098
<font color="#E5E5E5">of the latency of these instructions</font>

839
00:37:00,549 --> 00:37:04,299
with pipelining<font color="#CCCCCC"> but we'll</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font>

840
00:37:03,099 --> 00:37:06,010
yeah that's thinking<font color="#E5E5E5"> also maybe</font>

841
00:37:04,299 --> 00:37:09,000
<font color="#E5E5E5">additional hardware</font><font color="#CCCCCC"> just for that or</font>

842
00:37:06,010 --> 00:37:09,000
<font color="#CCCCCC">something</font><font color="#E5E5E5"> could help</font>

843
00:37:20,910 --> 00:37:28,480
well thank<font color="#E5E5E5"> you we're talking first</font><font color="#CCCCCC"> right</font>

844
00:37:25,720 --> 00:37:31,689
in the talk<font color="#CCCCCC"> before we presented how to</font>

845
00:37:28,480 --> 00:37:34,359
get control<font color="#CCCCCC"> over the</font><font color="#E5E5E5"> program counter by</font>

846
00:37:31,690 --> 00:37:36,880
using fault injection technique<font color="#E5E5E5"> so</font>

847
00:37:34,359 --> 00:37:39,160
<font color="#E5E5E5">without smashing stacks or things like</font>

848
00:37:36,880 --> 00:37:40,990
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so basically</font><font color="#CCCCCC"> that program counter</font>

849
00:37:39,160 --> 00:37:42,910
is immediately<font color="#E5E5E5"> I checked on a such as</font>

850
00:37:40,990 --> 00:37:45,790
<font color="#E5E5E5">successes fault</font><font color="#CCCCCC"> I think it's useful to</font>

851
00:37:42,910 --> 00:37:49,240
share for the audience<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this if you</font>

852
00:37:45,790 --> 00:37:52,390
<font color="#CCCCCC">actually apply full CFI</font><font color="#E5E5E5"> to to the code</font>

853
00:37:49,240 --> 00:37:54,399
by tagging everything<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> we would</font>

854
00:37:52,390 --> 00:37:56,259
not<font color="#CCCCCC"> have a way of</font><font color="#E5E5E5"> jumping</font><font color="#CCCCCC"> anywhere in</font>

855
00:37:54,400 --> 00:37:58,450
<font color="#E5E5E5">our attack so this means that we also</font>

856
00:37:56,260 --> 00:38:02,290
help to mitigate<font color="#E5E5E5"> what we are doing but</font>

857
00:37:58,450 --> 00:38:05,680
as long as<font color="#CCCCCC"> you don't leave one</font><font color="#E5E5E5"> unpatch</font>

858
00:38:02,290 --> 00:38:08,619
<font color="#E5E5E5">that one one</font><font color="#CCCCCC"> CFI untagged space or code</font>

859
00:38:05,680 --> 00:38:10,390
<font color="#E5E5E5">because we</font><font color="#CCCCCC"> have full control</font><font color="#E5E5E5"> or the</font><font color="#CCCCCC"> pc</font>

860
00:38:08,619 --> 00:38:12,730
counter in the way that we want<font color="#CCCCCC"> we'll</font>

861
00:38:10,390 --> 00:38:15,129
always<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to jump there and then</font>

862
00:38:12,730 --> 00:38:17,619
probably<font color="#E5E5E5"> at this point remove some other</font>

863
00:38:15,130 --> 00:38:19,119
<font color="#CCCCCC">projection and so on</font><font color="#E5E5E5"> so just</font><font color="#CCCCCC"> a note also</font>

864
00:38:17,619 --> 00:38:21,940
<font color="#E5E5E5">from the previous speaker that this</font>

865
00:38:19,119 --> 00:38:24,040
might be<font color="#CCCCCC"> useful also for</font><font color="#E5E5E5"> counteracting</font>

866
00:38:21,940 --> 00:38:26,260
our own attack but only if you apply

867
00:38:24,040 --> 00:38:28,029
full control flow integrity to<font color="#E5E5E5"> your code</font>

868
00:38:26,260 --> 00:38:35,410
<font color="#E5E5E5">that's the general addition to your code</font>

869
00:38:28,030 --> 00:38:37,030
to<font color="#E5E5E5"> your talk as well thank you</font><font color="#CCCCCC"> well</font>

870
00:38:35,410 --> 00:38:40,109
<font color="#CCCCCC">thank you for</font><font color="#E5E5E5"> your questions I didn't</font>

871
00:38:37,030 --> 00:38:40,109
have to use my audience plant

872
00:38:45,600 --> 00:38:50,639
[Applause]

873
00:38:51,069 --> 00:39:00,980
<font color="#CCCCCC">sorry I'm slow</font><font color="#E5E5E5"> I not a processor</font><font color="#CCCCCC"> guy so</font>

874
00:38:57,049 --> 00:39:03,529
forgive me<font color="#E5E5E5"> for stupid questions but the</font>

875
00:39:00,980 --> 00:39:06,549
scheme you're proposing<font color="#E5E5E5"> applies only to</font>

876
00:39:03,529 --> 00:39:10,220
certain targeted<font color="#CCCCCC"> instruction sequences</font>

877
00:39:06,549 --> 00:39:12,920
<font color="#E5E5E5">why not apply it at the processor</font>

878
00:39:10,220 --> 00:39:15,828
translation level for all pointers and

879
00:39:12,920 --> 00:39:18,079
<font color="#E5E5E5">basically require that essentially every</font>

880
00:39:15,829 --> 00:39:21,829
pointer that<font color="#E5E5E5"> we use because a number of</font>

881
00:39:18,079 --> 00:39:24,650
<font color="#E5E5E5">the attacks that I could think of I'm</font>

882
00:39:21,829 --> 00:39:25,880
<font color="#E5E5E5">not going to bother</font><font color="#CCCCCC"> attacking if I'm if</font>

883
00:39:24,650 --> 00:39:27,319
I'm<font color="#E5E5E5"> gonna do a data only attack for it</font>

884
00:39:25,880 --> 00:39:28,609
so I'm<font color="#CCCCCC"> not</font><font color="#E5E5E5"> gonna bother attacking the</font>

885
00:39:27,319 --> 00:39:30,739
<font color="#E5E5E5">encrypted pointer so I'm just gonna use</font>

886
00:39:28,609 --> 00:39:35,058
the unencrypted pointers<font color="#E5E5E5"> that gave you</font>

887
00:39:30,739 --> 00:39:37,220
the same benefit you know<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I guess</font>

888
00:39:35,059 --> 00:39:39,319
the<font color="#CCCCCC"> only way that</font><font color="#E5E5E5"> I see that this makes</font>

889
00:39:37,220 --> 00:39:41,390
sense<font color="#CCCCCC"> is if you've encrypted every</font>

890
00:39:39,319 --> 00:39:42,739
possible place where there's a code

891
00:39:41,390 --> 00:39:49,160
<font color="#E5E5E5">flowing to go in direction through a</font>

892
00:39:42,739 --> 00:39:52,630
pointer so so why not<font color="#E5E5E5"> encrypt all code</font>

893
00:39:49,160 --> 00:39:56,180
flow<font color="#E5E5E5"> into in directions through pointers</font>

894
00:39:52,630 --> 00:40:00,440
so that's what I hope<font color="#CCCCCC"> happens</font><font color="#E5E5E5"> but as to</font>

895
00:39:56,180 --> 00:40:02,299
the<font color="#CCCCCC"> question of why not do that</font><font color="#E5E5E5"> like</font>

896
00:40:00,440 --> 00:40:05,059
without<font color="#E5E5E5"> explicit instruction is why not</font>

897
00:40:02,299 --> 00:40:06,288
just do that<font color="#E5E5E5"> implicitly</font><font color="#CCCCCC"> that's an</font>

898
00:40:05,059 --> 00:40:09,829
<font color="#E5E5E5">interesting idea it's not</font><font color="#CCCCCC"> one that</font><font color="#E5E5E5"> I</font>

899
00:40:06,289 --> 00:40:14,809
considered<font color="#E5E5E5"> or as far as I know was</font>

900
00:40:09,829 --> 00:40:16,700
considered I guess let me<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about</font>

901
00:40:14,809 --> 00:40:18,739
<font color="#E5E5E5">that and if I can</font><font color="#CCCCCC"> think of a good</font><font color="#E5E5E5"> reason</font>

902
00:40:16,700 --> 00:40:22,189
<font color="#E5E5E5">why that isn't a better way to approach</font>

903
00:40:18,739 --> 00:40:24,109
<font color="#CCCCCC">it I'll let you know but it's another</font>

904
00:40:22,190 --> 00:40:25,759
good reason to socialize ideas as widely

905
00:40:24,109 --> 00:40:29,170
<font color="#E5E5E5">as</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> because sometimes</font><font color="#CCCCCC"> people</font>

906
00:40:25,759 --> 00:40:29,170
want processor guys have great ideas

907
00:40:32,729 --> 00:40:38,529
so partially a response to the previous

908
00:40:35,079 --> 00:40:41,410
<font color="#CCCCCC">question I don't think</font><font color="#E5E5E5"> at a processor</font>

909
00:40:38,529 --> 00:40:43,749
level<font color="#E5E5E5"> you can in you can automatically</font>

910
00:40:41,410 --> 00:40:47,229
distinguish pointers with unused bits

911
00:40:43,749 --> 00:40:50,709
from other 64-bit values you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> want</font>

912
00:40:47,229 --> 00:40:56,678
<font color="#E5E5E5">to be overriding random random 64-bit</font>

913
00:40:50,709 --> 00:40:59,259
values<font color="#E5E5E5"> but</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> it does</font><font color="#CCCCCC"> have I mean</font>

914
00:40:56,679 --> 00:41:01,269
these operations do have a cost<font color="#E5E5E5"> right so</font>

915
00:40:59,259 --> 00:41:03,759
you want to make it you want to leave it

916
00:41:01,269 --> 00:41:08,189
up<font color="#CCCCCC"> to the developer</font><font color="#E5E5E5"> how much they want</font>

917
00:41:03,759 --> 00:41:08,189
<font color="#E5E5E5">to pay</font><font color="#CCCCCC"> for hardening their application</font>

918
00:41:12,390 --> 00:41:17,650
<font color="#CCCCCC">hi nice</font><font color="#E5E5E5"> presentation</font>

919
00:41:15,160 --> 00:41:23,078
I'm mostly x86 guys so I have<font color="#E5E5E5"> not</font>

920
00:41:17,650 --> 00:41:24,880
programmed much in<font color="#E5E5E5"> but if the point</font>

921
00:41:23,079 --> 00:41:28,209
<font color="#E5E5E5">pointer authentic code fails</font>

922
00:41:24,880 --> 00:41:31,299
is there any exception that is raised<font color="#E5E5E5"> or</font>

923
00:41:28,209 --> 00:41:35,259
if I<font color="#E5E5E5"> am going to use an authenticated</font>

924
00:41:31,299 --> 00:41:39,759
pointer what kind of exception going to

925
00:41:35,259 --> 00:41:42,339
be raised<font color="#E5E5E5"> on the processors so if you</font>

926
00:41:39,759 --> 00:41:45,339
attempt to<font color="#E5E5E5"> verify a pointer and the</font>

927
00:41:42,339 --> 00:41:47,380
verification doesn't succeed<font color="#E5E5E5"> then we</font>

928
00:41:45,339 --> 00:41:49,929
write a special<font color="#CCCCCC"> value where the</font>

929
00:41:47,380 --> 00:41:51,880
authentication code used to be<font color="#E5E5E5"> and if</font>

930
00:41:49,929 --> 00:41:54,459
you then use<font color="#E5E5E5"> this pointer it's</font>

931
00:41:51,880 --> 00:41:58,029
guaranteed<font color="#E5E5E5"> at that point to trigger an</font>

932
00:41:54,459 --> 00:41:59,589
address translation fault<font color="#E5E5E5"> so you don't</font>

933
00:41:58,029 --> 00:42:01,839
learn that<font color="#E5E5E5"> there was a problem at the</font>

934
00:41:59,589 --> 00:42:05,199
<font color="#E5E5E5">time you authenticate the pointer you</font>

935
00:42:01,839 --> 00:42:07,058
learn or verify it rather<font color="#E5E5E5"> you learn that</font>

936
00:42:05,199 --> 00:42:10,449
there was a<font color="#E5E5E5"> problem when you use the</font>

937
00:42:07,059 --> 00:42:16,150
pointer<font color="#E5E5E5"> later on so you'll get a page</font>

938
00:42:10,449 --> 00:42:18,089
<font color="#CCCCCC">fold with a special error code so I'm</font>

939
00:42:16,150 --> 00:42:22,329
<font color="#E5E5E5">not</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> if you get a special error code</font>

940
00:42:18,089 --> 00:42:24,189
but the faults you get by then looking

941
00:42:22,329 --> 00:42:26,109
at the pointer<font color="#E5E5E5"> that caused the problem</font>

942
00:42:24,189 --> 00:42:29,558
you can see that<font color="#E5E5E5"> special</font><font color="#CCCCCC"> value and</font>

943
00:42:26,109 --> 00:42:31,089
determine that<font color="#E5E5E5"> it was a pointer</font>

944
00:42:29,559 --> 00:42:33,249
authentication problem as opposed to

945
00:42:31,089 --> 00:42:35,319
just you know<font color="#E5E5E5"> an invalid pointer that</font>

946
00:42:33,249 --> 00:42:41,009
<font color="#E5E5E5">you try to dereference so the linear</font>

947
00:42:35,319 --> 00:42:41,009
address<font color="#E5E5E5"> gets presented to the kernel</font>

948
00:42:41,640 --> 00:42:44,640
<font color="#E5E5E5">Thanks</font>

949
00:42:57,090 --> 00:43:04,410
<font color="#CCCCCC">I</font><font color="#E5E5E5"> two questions one</font><font color="#CCCCCC"> is have you talked</font>

950
00:43:02,400 --> 00:43:09,330
<font color="#E5E5E5">to Ken Johnson</font><font color="#CCCCCC"> here at Microsoft</font><font color="#E5E5E5"> about</font>

951
00:43:04,410 --> 00:43:10,470
<font color="#E5E5E5">this yet no I haven't fantastic I'll</font>

952
00:43:09,330 --> 00:43:14,549
come<font color="#CCCCCC"> down after and give you an email</font>

953
00:43:10,470 --> 00:43:16,259
<font color="#E5E5E5">address at</font><font color="#CCCCCC"> least he was one of the</font><font color="#E5E5E5"> major</font>

954
00:43:14,550 --> 00:43:17,370
people<font color="#E5E5E5"> who coming up with a CFG and</font>

955
00:43:16,260 --> 00:43:19,190
since<font color="#CCCCCC"> other mitigations and it would</font>

956
00:43:17,370 --> 00:43:23,420
probably have some good input<font color="#E5E5E5"> for you</font>

957
00:43:19,190 --> 00:43:26,090
<font color="#CCCCCC">the second one</font><font color="#E5E5E5"> was so if</font><font color="#CCCCCC"> our we</font><font color="#E5E5E5"> were</font>

958
00:43:23,420 --> 00:43:30,870
what we<font color="#E5E5E5"> were saying is when you go to</font>

959
00:43:26,090 --> 00:43:32,910
decode the pointer if the authentication

960
00:43:30,870 --> 00:43:34,049
check failed you get a special<font color="#CCCCCC"> value but</font>

961
00:43:32,910 --> 00:43:35,759
you don't throw an exception at that

962
00:43:34,050 --> 00:43:37,410
point which makes sense<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font>

963
00:43:35,760 --> 00:43:39,420
<font color="#E5E5E5">therefore you</font><font color="#CCCCCC"> have an Oracle in the</font>

964
00:43:37,410 --> 00:43:41,040
<font color="#E5E5E5">three bit case is trivial</font><font color="#CCCCCC"> if you're</font>

965
00:43:39,420 --> 00:43:41,910
already executing code<font color="#E5E5E5"> which is what</font>

966
00:43:41,040 --> 00:43:44,930
we're trying<font color="#E5E5E5"> to prevent in the first</font>

967
00:43:41,910 --> 00:43:48,420
place right sorry can you<font color="#CCCCCC"> repeat that</font>

968
00:43:44,930 --> 00:43:50,640
<font color="#E5E5E5">the decryption</font><font color="#CCCCCC"> the authentication check</font>

969
00:43:48,420 --> 00:43:53,190
can be<font color="#E5E5E5"> used as an Oracle correct you can</font>

970
00:43:50,640 --> 00:43:54,680
run as<font color="#CCCCCC"> many as you want</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> you try to</font>

971
00:43:53,190 --> 00:43:56,610
actually dereference the pointer and

972
00:43:54,680 --> 00:44:00,000
then you can check<font color="#CCCCCC"> yourself</font><font color="#E5E5E5"> with a</font>

973
00:43:56,610 --> 00:44:01,830
special bit pattern<font color="#E5E5E5"> so yes but you'll</font>

974
00:44:00,000 --> 00:44:03,720
kind<font color="#E5E5E5"> of assuming that you already have</font>

975
00:44:01,830 --> 00:44:05,279
control<font color="#CCCCCC"> over the flow of the</font><font color="#E5E5E5"> program</font>

976
00:44:03,720 --> 00:44:06,419
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> where your which</font><font color="#E5E5E5"> is what</font>

977
00:44:05,280 --> 00:44:08,370
<font color="#CCCCCC">represents</font><font color="#E5E5E5"> preventing with this feature</font>

978
00:44:06,420 --> 00:44:10,910
in the<font color="#E5E5E5"> first place got it okay thank</font><font color="#CCCCCC"> you</font>

979
00:44:08,370 --> 00:44:13,859
<font color="#E5E5E5">and I guess</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> a comment on</font>

980
00:44:10,910 --> 00:44:15,720
interactions with Microsoft<font color="#E5E5E5"> I meant to</font>

981
00:44:13,860 --> 00:44:21,690
mention this in the<font color="#E5E5E5"> security analysis</font>

982
00:44:15,720 --> 00:44:24,060
part<font color="#CCCCCC"> but when</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> was given to</font>

983
00:44:21,690 --> 00:44:26,400
other arm partners the Microsoft

984
00:44:24,060 --> 00:44:29,009
security team actually described like<font color="#E5E5E5"> a</font>

985
00:44:26,400 --> 00:44:31,470
point of substitution<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> in a</font>

986
00:44:29,010 --> 00:44:35,760
browser environment<font color="#CCCCCC"> which we talked</font>

987
00:44:31,470 --> 00:44:38,100
<font color="#CCCCCC">about</font><font color="#E5E5E5"> in our white paper and I'd like to</font>

988
00:44:35,760 --> 00:44:39,840
<font color="#E5E5E5">say we address it but really we</font><font color="#CCCCCC"> just</font>

989
00:44:38,100 --> 00:44:41,910
kind of say browser security<font color="#CCCCCC"> is really</font>

990
00:44:39,840 --> 00:44:46,290
<font color="#E5E5E5">hard and we acknowledge</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a</font>

991
00:44:41,910 --> 00:44:48,720
way you can<font color="#E5E5E5"> attack</font><font color="#CCCCCC"> this idea but they</font>

992
00:44:46,290 --> 00:44:51,630
<font color="#E5E5E5">they made that contribution to</font><font color="#CCCCCC"> the</font>

993
00:44:48,720 --> 00:44:53,700
design<font color="#CCCCCC"> and I also I asked the</font><font color="#E5E5E5"> the</font>

994
00:44:51,630 --> 00:44:55,140
<font color="#E5E5E5">compiler team the visual studio team if</font>

995
00:44:53,700 --> 00:44:57,390
they were going<font color="#E5E5E5"> to implement this and</font>

996
00:44:55,140 --> 00:44:58,799
they gave<font color="#CCCCCC"> me a very kind of politic</font>

997
00:44:57,390 --> 00:45:01,040
answer but I<font color="#CCCCCC"> think they wondered who I</font>

998
00:44:58,800 --> 00:45:01,040
was

999
00:45:15,930 --> 00:45:23,549
thank you

1000
00:45:18,780 --> 00:45:23,549
[Applause]

