1
00:00:00,299 --> 00:00:06,960
welcome back to track 1 part 2 kodiak

2
00:00:04,440 --> 00:00:08,820
room battles<font color="#CCCCCC"> and silicon with the talk</font>

3
00:00:06,960 --> 00:00:10,440
that the<font color="#CCCCCC"> Cavs specifically picked just</font>

4
00:00:08,820 --> 00:00:13,049
because of its creative use of<font color="#CCCCCC"> capital</font>

5
00:00:10,440 --> 00:00:15,030
letters in the number<font color="#CCCCCC"> 0 we welcome</font><font color="#E5E5E5"> Nick</font>

6
00:00:13,049 --> 00:00:19,710
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Krista Faro</font><font color="#E5E5E5"> to talk about routing</font>

7
00:00:15,030 --> 00:00:24,600
the<font color="#E5E5E5"> colonel thank you</font><font color="#CCCCCC"> very much</font>

8
00:00:19,710 --> 00:00:26,730
welcome<font color="#E5E5E5"> everybody</font><font color="#CCCCCC"> my name is</font><font color="#E5E5E5"> Nick dimers</font>

9
00:00:24,600 --> 00:00:29,310
<font color="#CCCCCC">and this kiss</font><font color="#E5E5E5"> of a moon and we're here</font>

10
00:00:26,730 --> 00:00:30,750
to<font color="#E5E5E5"> present a talk</font><font color="#CCCCCC"> that we named who</font>

11
00:00:29,310 --> 00:00:32,879
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> didn't exploitable using hardware</font>

12
00:00:30,750 --> 00:00:34,800
fault<font color="#E5E5E5"> injection</font><font color="#CCCCCC"> I'm a security</font><font color="#E5E5E5"> analyst</font>

13
00:00:32,880 --> 00:00:37,739
at<font color="#CCCCCC"> the Fisker very testy</font><font color="#E5E5E5"> security of</font>

14
00:00:34,800 --> 00:00:40,949
sorts of technologies and devices<font color="#CCCCCC"> and</font>

15
00:00:37,739 --> 00:00:42,239
both using<font color="#CCCCCC"> hardware attacks and more</font>

16
00:00:40,950 --> 00:00:44,730
common software attacks

17
00:00:42,239 --> 00:00:46,559
<font color="#CCCCCC">kirsov was</font><font color="#E5E5E5"> a former colleague of mine</font>

18
00:00:44,730 --> 00:00:48,569
<font color="#E5E5E5">and he's now a product</font><font color="#CCCCCC"> security</font>

19
00:00:46,559 --> 00:00:50,489
consultant at<font color="#E5E5E5"> Pihl sac and we're doing</font>

20
00:00:48,570 --> 00:00:54,329
this presentation<font color="#E5E5E5"> together and before we</font>

21
00:00:50,489 --> 00:00:55,919
start<font color="#E5E5E5"> who knows</font><font color="#CCCCCC"> or who thinks</font><font color="#E5E5E5"> to</font>

22
00:00:54,329 --> 00:00:59,460
understand what I mean<font color="#CCCCCC"> its fault</font>

23
00:00:55,920 --> 00:01:00,660
injection<font color="#E5E5E5"> and maybe see some hands so</font>

24
00:00:59,460 --> 00:01:02,100
for the<font color="#E5E5E5"> people</font><font color="#CCCCCC"> that do not</font><font color="#E5E5E5"> raise their</font>

25
00:01:00,660 --> 00:01:04,860
hands don't worry<font color="#E5E5E5"> we'll introduce the</font>

26
00:01:02,100 --> 00:01:07,860
concepts<font color="#E5E5E5"> initially before we go into the</font>

27
00:01:04,860 --> 00:01:09,680
actual<font color="#CCCCCC"> contact of the</font><font color="#E5E5E5"> talk so when we</font>

28
00:01:07,860 --> 00:01:12,420
talk about<font color="#CCCCCC"> fold injection we talk about</font>

29
00:01:09,680 --> 00:01:14,670
<font color="#CCCCCC">changing the intended behavior</font><font color="#E5E5E5"> of a</font>

30
00:01:12,420 --> 00:01:16,320
target using<font color="#E5E5E5"> faults for example if you</font>

31
00:01:14,670 --> 00:01:18,330
look at<font color="#E5E5E5"> this code snippet which is used</font>

32
00:01:16,320 --> 00:01:20,399
<font color="#CCCCCC">to open a door based on the validity of</font>

33
00:01:18,330 --> 00:01:22,320
<font color="#CCCCCC">the key using fault injection</font><font color="#E5E5E5"> it is</font>

34
00:01:20,400 --> 00:01:23,880
possible to change<font color="#E5E5E5"> the intended</font><font color="#CCCCCC"> behavior</font>

35
00:01:22,320 --> 00:01:25,979
of this conditional statement<font color="#CCCCCC"> in order</font>

36
00:01:23,880 --> 00:01:28,020
<font color="#E5E5E5">to open this door with an incorrect key</font>

37
00:01:25,979 --> 00:01:29,850
<font color="#E5E5E5">and it makes you wonder how</font><font color="#CCCCCC"> can we</font>

38
00:01:28,020 --> 00:01:31,170
introduce<font color="#E5E5E5"> those faults well there's a</font>

39
00:01:29,850 --> 00:01:33,329
whole<font color="#E5E5E5"> bunch of different fault injection</font>

40
00:01:31,170 --> 00:01:36,060
techniques that you can<font color="#CCCCCC"> use in order to</font>

41
00:01:33,329 --> 00:01:37,889
accomplish this<font color="#E5E5E5"> cough it's here for</font>

42
00:01:36,060 --> 00:01:40,439
<font color="#E5E5E5">shown on these slides those are the four</font>

43
00:01:37,890 --> 00:01:42,150
most common<font color="#CCCCCC"> ones and of</font><font color="#E5E5E5"> all something in</font>

44
00:01:40,439 --> 00:01:44,250
common<font color="#E5E5E5"> and is that they</font><font color="#CCCCCC"> introduced a</font>

45
00:01:42,150 --> 00:01:46,290
controlled environment<font color="#CCCCCC"> to change</font><font color="#E5E5E5"> into</font>

46
00:01:44,250 --> 00:01:48,360
the target<font color="#E5E5E5"> in order to change its</font>

47
00:01:46,290 --> 00:01:49,979
intended behavior<font color="#CCCCCC"> and what they actually</font>

48
00:01:48,360 --> 00:01:53,220
do is<font color="#CCCCCC"> they leverage the vulnerability</font>

49
00:01:49,979 --> 00:01:55,829
<font color="#CCCCCC">that's embedded</font><font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> targets</font><font color="#E5E5E5"> that</font>

50
00:01:53,220 --> 00:01:57,810
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about one thing to</font>

51
00:01:55,829 --> 00:01:59,610
<font color="#E5E5E5">realize is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> all these</font><font color="#CCCCCC"> fold index</font>

52
00:01:57,810 --> 00:02:00,930
techniques have their own purpose<font color="#E5E5E5"> so</font>

53
00:01:59,610 --> 00:02:01,850
they have their own<font color="#E5E5E5"> also their</font><font color="#CCCCCC"> own</font>

54
00:02:00,930 --> 00:02:03,719
characteristics for example

55
00:02:01,850 --> 00:02:05,850
<font color="#E5E5E5">electromagnetic fault injection and</font>

56
00:02:03,719 --> 00:02:07,439
laser<font color="#CCCCCC"> full injection</font><font color="#E5E5E5"> have a localized</font>

57
00:02:05,850 --> 00:02:09,568
nature so it's<font color="#E5E5E5"> probably possible</font><font color="#CCCCCC"> to</font>

58
00:02:07,439 --> 00:02:13,400
<font color="#E5E5E5">change only parts of the chip where's</font>

59
00:02:09,568 --> 00:02:13,399
<font color="#E5E5E5">that does not hold up for the other two</font>

60
00:02:13,489 --> 00:02:19,140
for all the experiments that<font color="#E5E5E5"> we address</font>

61
00:02:16,170 --> 00:02:20,939
in this talk<font color="#CCCCCC"> they are done using voltage</font>

62
00:02:19,140 --> 00:02:22,980
fault injection<font color="#E5E5E5"> so we affect the voltage</font>

63
00:02:20,939 --> 00:02:25,439
<font color="#E5E5E5">supplied to a target but please note</font>

64
00:02:22,980 --> 00:02:27,149
that<font color="#CCCCCC"> semi results can be achieved</font><font color="#E5E5E5"> using</font>

65
00:02:25,439 --> 00:02:29,219
<font color="#CCCCCC">the</font><font color="#E5E5E5"> other fault injection techniques as</font>

66
00:02:27,150 --> 00:02:30,480
well<font color="#E5E5E5"> so whatever we are going</font><font color="#CCCCCC"> to talk</font>

67
00:02:29,219 --> 00:02:32,459
<font color="#CCCCCC">about in this pair</font><font color="#E5E5E5"> of in this</font>

68
00:02:30,480 --> 00:02:34,469
presentation is not<font color="#CCCCCC"> only</font><font color="#E5E5E5"> applicable for</font>

69
00:02:32,459 --> 00:02:38,340
<font color="#E5E5E5">voltage fault</font><font color="#CCCCCC"> injection</font><font color="#E5E5E5"> but those are</font>

70
00:02:34,469 --> 00:02:39,959
holds up<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> other ones so we will</font>

71
00:02:38,340 --> 00:02:41,519
introduce<font color="#E5E5E5"> a few terms to get you up to</font>

72
00:02:39,959 --> 00:02:43,079
<font color="#E5E5E5">speed so</font><font color="#CCCCCC"> whenever we're talking</font><font color="#E5E5E5"> about</font>

73
00:02:41,519 --> 00:02:44,819
<font color="#E5E5E5">glitches</font><font color="#CCCCCC"> we're talking</font><font color="#E5E5E5"> about the</font>

74
00:02:43,079 --> 00:02:47,609
environmental<font color="#E5E5E5"> change</font><font color="#CCCCCC"> so this can be a</font>

75
00:02:44,819 --> 00:02:49,078
laser<font color="#E5E5E5"> pulse or voltage glitch and these</font>

76
00:02:47,609 --> 00:02:51,090
glitches<font color="#E5E5E5"> actually can trigger the</font>

77
00:02:49,079 --> 00:02:53,220
vulnerabilities embedded in the chips<font color="#E5E5E5"> we</font>

78
00:02:51,090 --> 00:02:55,260
are talking<font color="#E5E5E5"> about and the vulnerability</font>

79
00:02:53,220 --> 00:02:57,299
here is little bit different<font color="#CCCCCC"> than a</font>

80
00:02:55,260 --> 00:03:00,030
software vulnerability it's really the

81
00:02:57,299 --> 00:03:01,829
sensitiveness of<font color="#E5E5E5"> a susceptibility of a</font>

82
00:03:00,030 --> 00:03:04,019
given Hardware subsystem to<font color="#E5E5E5"> particular</font>

83
00:03:01,829 --> 00:03:05,639
fault injection<font color="#E5E5E5"> technique and of course</font>

84
00:03:04,019 --> 00:03:08,010
focus<font color="#E5E5E5"> on the fact that it has an impact</font>

85
00:03:05,639 --> 00:03:09,629
on the security<font color="#E5E5E5"> that's implemented in</font>

86
00:03:08,010 --> 00:03:10,950
<font color="#E5E5E5">that particular chip so these</font>

87
00:03:09,629 --> 00:03:12,569
vulnerabilities are embedded in the

88
00:03:10,950 --> 00:03:14,760
hardware<font color="#CCCCCC"> and it's very</font><font color="#E5E5E5"> difficult from</font><font color="#CCCCCC"> a</font>

89
00:03:12,569 --> 00:03:16,679
design to see if this<font color="#CCCCCC"> permeability is</font>

90
00:03:14,760 --> 00:03:18,690
applicable or<font color="#CCCCCC"> not so it's very different</font>

91
00:03:16,680 --> 00:03:19,859
than for software<font color="#E5E5E5"> vulnerabilities where</font>

92
00:03:18,690 --> 00:03:22,109
you can look at the<font color="#E5E5E5"> source code and</font>

93
00:03:19,859 --> 00:03:23,549
<font color="#E5E5E5">actually identify that is there in order</font>

94
00:03:22,109 --> 00:03:26,159
<font color="#CCCCCC">to figure</font><font color="#E5E5E5"> out if these vulnerabilities</font>

95
00:03:23,549 --> 00:03:27,690
<font color="#E5E5E5">exist in chips you really need to</font>

96
00:03:26,159 --> 00:03:28,650
perform the actual<font color="#E5E5E5"> attack or do</font>

97
00:03:27,690 --> 00:03:31,159
something similar<font color="#E5E5E5"> like a</font>

98
00:03:28,650 --> 00:03:33,389
characterization<font color="#E5E5E5"> characterization phase</font>

99
00:03:31,159 --> 00:03:34,978
and<font color="#E5E5E5"> also one thing to</font><font color="#CCCCCC"> realize is that</font>

100
00:03:33,389 --> 00:03:38,609
<font color="#E5E5E5">you cannot counter these vulnerabilities</font>

101
00:03:34,979 --> 00:03:40,169
by<font color="#CCCCCC"> Hardware you</font><font color="#E5E5E5"> voice over the only way</font>

102
00:03:38,609 --> 00:03:41,579
to get<font color="#E5E5E5"> rid of these</font><font color="#CCCCCC"> vulnerabilities is</font>

103
00:03:40,169 --> 00:03:42,900
to change the hardware<font color="#E5E5E5"> in a way and</font>

104
00:03:41,579 --> 00:03:45,780
we'll talk about<font color="#E5E5E5"> that a little bit more</font>

105
00:03:42,900 --> 00:03:47,790
later<font color="#E5E5E5"> and the key point about</font><font color="#CCCCCC"> this that</font>

106
00:03:45,780 --> 00:03:49,079
by injecting<font color="#CCCCCC"> these glitches training</font>

107
00:03:47,790 --> 00:03:51,090
these vulnerabilities<font color="#E5E5E5"> we can create</font>

108
00:03:49,079 --> 00:03:52,889
faults<font color="#E5E5E5"> and these faults are the</font>

109
00:03:51,090 --> 00:03:54,840
unattended<font color="#E5E5E5"> behavioral change in the</font>

110
00:03:52,889 --> 00:03:56,310
<font color="#E5E5E5">target so these things happen</font><font color="#CCCCCC"> at a</font>

111
00:03:54,840 --> 00:03:58,379
<font color="#E5E5E5">specific</font><font color="#CCCCCC"> moment in time because these</font>

112
00:03:56,310 --> 00:04:00,689
glitches<font color="#E5E5E5"> are time based so</font><font color="#CCCCCC"> we inject</font>

113
00:03:58,379 --> 00:04:02,638
them at the<font color="#E5E5E5"> moment a but it doesn't mean</font>

114
00:04:00,689 --> 00:04:04,138
that<font color="#CCCCCC"> these glitches are not</font><font color="#E5E5E5"> happening of</font>

115
00:04:02,639 --> 00:04:07,169
these faults<font color="#CCCCCC"> are not present</font><font color="#E5E5E5"> anymore at</font>

116
00:04:04,139 --> 00:04:07,859
<font color="#E5E5E5">the moment</font><font color="#CCCCCC"> be it can</font><font color="#E5E5E5"> be so some faults</font>

117
00:04:07,169 --> 00:04:10,019
are temporary

118
00:04:07,859 --> 00:04:12,000
<font color="#CCCCCC">somes are persistent and</font><font color="#E5E5E5"> some are semi</font>

119
00:04:10,019 --> 00:04:14,370
persistent and semi persistent meaning

120
00:04:12,000 --> 00:04:16,048
that if<font color="#E5E5E5"> you reset the entire board or</font>

121
00:04:14,370 --> 00:04:17,909
the entire chip then the<font color="#E5E5E5"> fold is gone</font>

122
00:04:16,048 --> 00:04:21,269
<font color="#E5E5E5">again and you need to inject</font><font color="#CCCCCC"> a new</font>

123
00:04:17,909 --> 00:04:24,710
glitch in order to introduce<font color="#E5E5E5"> that fault</font>

124
00:04:21,269 --> 00:04:26,700
<font color="#E5E5E5">again but the key point here is that</font>

125
00:04:24,710 --> 00:04:28,650
<font color="#E5E5E5">faults can be</font><font color="#CCCCCC"> mitigated you</font>

126
00:04:26,700 --> 00:04:30,930
<font color="#E5E5E5">Sofer for example if something goes</font>

127
00:04:28,650 --> 00:04:33,090
wrong<font color="#E5E5E5"> you can execute</font><font color="#CCCCCC"> Soviet at the</font>

128
00:04:30,930 --> 00:04:34,560
later<font color="#CCCCCC"> stage in</font><font color="#E5E5E5"> order to detect</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> or</font>

129
00:04:33,090 --> 00:04:37,710
counter it<font color="#E5E5E5"> and we'll talk about that a</font>

130
00:04:34,560 --> 00:04:40,680
little<font color="#E5E5E5"> bit more later as well so what do</font>

131
00:04:37,710 --> 00:04:42,270
we<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> glitz</font><font color="#E5E5E5"> well you do not really</font>

132
00:04:40,680 --> 00:04:44,700
need anything<font color="#CCCCCC"> to</font><font color="#E5E5E5"> glitch if you have time</font>

133
00:04:42,270 --> 00:04:47,070
<font color="#E5E5E5">and you're very lucky because a long</font>

134
00:04:44,700 --> 00:04:48,840
<font color="#E5E5E5">time</font><font color="#CCCCCC"> ago already</font><font color="#E5E5E5"> researchers and</font>

135
00:04:47,070 --> 00:04:50,760
engineers alike figured out that

136
00:04:48,840 --> 00:04:52,409
influences from space<font color="#E5E5E5"> actually have an</font>

137
00:04:50,760 --> 00:04:54,780
<font color="#E5E5E5">impact on the data stored in computer</font>

138
00:04:52,410 --> 00:04:56,760
chips<font color="#CCCCCC"> so-called cosmic</font><font color="#E5E5E5"> rays</font><font color="#CCCCCC"> and a</font>

139
00:04:54,780 --> 00:04:59,340
<font color="#E5E5E5">similar</font><font color="#CCCCCC"> fashion the</font><font color="#E5E5E5"> alpha decay from</font>

140
00:04:56,760 --> 00:05:00,930
radioactive material actually<font color="#CCCCCC"> also had</font>

141
00:04:59,340 --> 00:05:03,060
an<font color="#E5E5E5"> impact on the data stored in computer</font>

142
00:05:00,930 --> 00:05:04,830
chips<font color="#E5E5E5"> and of course this does</font><font color="#CCCCCC"> not</font>

143
00:05:03,060 --> 00:05:07,500
provide a<font color="#E5E5E5"> lot of control and very tricky</font>

144
00:05:04,830 --> 00:05:10,349
<font color="#E5E5E5">to generate a cosmic ray</font><font color="#CCCCCC"> out of nothing</font>

145
00:05:07,500 --> 00:05:12,090
or to wait for it<font color="#E5E5E5"> to arrive so since</font>

146
00:05:10,350 --> 00:05:13,770
then<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of initiatives are made to</font>

147
00:05:12,090 --> 00:05:15,330
make high-end tooling that<font color="#E5E5E5"> allows you to</font>

148
00:05:13,770 --> 00:05:17,520
perform<font color="#E5E5E5"> fault injection techniques and</font>

149
00:05:15,330 --> 00:05:19,140
for example<font color="#E5E5E5"> the company that I work</font><font color="#CCCCCC"> for</font>

150
00:05:17,520 --> 00:05:21,299
<font color="#CCCCCC">hiss care actually</font><font color="#E5E5E5"> creates this type of</font>

151
00:05:19,140 --> 00:05:22,500
tooling and we have a wide<font color="#E5E5E5"> range of</font>

152
00:05:21,300 --> 00:05:24,150
different<font color="#CCCCCC"> tools to perform different</font>

153
00:05:22,500 --> 00:05:26,790
<font color="#E5E5E5">types of fault injection techniques and</font>

154
00:05:24,150 --> 00:05:29,460
they provide flexibility speed<font color="#E5E5E5"> precision</font>

155
00:05:26,790 --> 00:05:31,650
and all this high control<font color="#E5E5E5"> is very nice</font>

156
00:05:29,460 --> 00:05:33,659
<font color="#CCCCCC">for labs that want to do this attacks on</font>

157
00:05:31,650 --> 00:05:36,000
a regular basis on different targets<font color="#CCCCCC"> to</font>

158
00:05:33,660 --> 00:05:37,200
set benchmarks and so forth<font color="#E5E5E5"> but of</font>

159
00:05:36,000 --> 00:05:39,420
course<font color="#E5E5E5"> these tools are very expensive</font>

160
00:05:37,200 --> 00:05:42,170
<font color="#E5E5E5">and your typical ethic hacker will not</font>

161
00:05:39,420 --> 00:05:45,090
have access<font color="#E5E5E5"> to these tools basically the</font>

162
00:05:42,170 --> 00:05:46,890
budget for these<font color="#E5E5E5"> guys and girls is</font>

163
00:05:45,090 --> 00:05:49,109
actually not<font color="#E5E5E5"> large enough to buy a laser</font>

164
00:05:46,890 --> 00:05:50,520
<font color="#E5E5E5">and put it in their attic so</font><font color="#CCCCCC"> luckily</font>

165
00:05:49,110 --> 00:05:51,840
there's other options<font color="#CCCCCC"> to perform fault</font>

166
00:05:50,520 --> 00:05:54,419
injection and that's what you typically

167
00:05:51,840 --> 00:05:55,650
<font color="#CCCCCC">see in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> field whether</font><font color="#E5E5E5"> you use open</font>

168
00:05:54,420 --> 00:05:57,510
<font color="#E5E5E5">source initiatives like the chip</font>

169
00:05:55,650 --> 00:06:00,060
<font color="#CCCCCC">Whisperer delight whether</font><font color="#E5E5E5"> you use very</font>

170
00:05:57,510 --> 00:06:02,219
cheap microcontrollers<font color="#CCCCCC"> or</font><font color="#E5E5E5"> FPGA boards</font>

171
00:06:00,060 --> 00:06:05,840
they are capable<font color="#CCCCCC"> to introduce</font><font color="#E5E5E5"> those</font>

172
00:06:02,220 --> 00:06:09,840
glitches<font color="#CCCCCC"> and they range from let's say</font>

173
00:06:05,840 --> 00:06:14,070
30 years to a couple hundred euros<font color="#E5E5E5"> same</font>

174
00:06:09,840 --> 00:06:17,580
thing<font color="#CCCCCC"> for dollars actually but before we</font>

175
00:06:14,070 --> 00:06:18,599
actually dive<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> phone injection</font>

176
00:06:17,580 --> 00:06:20,880
if<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> talking about we like the</font>

177
00:06:18,600 --> 00:06:22,890
state one step back<font color="#E5E5E5"> and maybe wonder do</font>

178
00:06:20,880 --> 00:06:26,600
<font color="#E5E5E5">we really need tooling to introduce</font>

179
00:06:22,890 --> 00:06:29,130
glitches into a target<font color="#CCCCCC"> well we seem</font>

180
00:06:26,600 --> 00:06:30,750
recently that<font color="#E5E5E5"> this is not the case but</font>

181
00:06:29,130 --> 00:06:32,790
<font color="#E5E5E5">there's something we called software</font>

182
00:06:30,750 --> 00:06:34,650
<font color="#E5E5E5">activated fault injection</font><font color="#CCCCCC"> and that is</font>

183
00:06:32,790 --> 00:06:36,870
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> whenever you can use fault of</font>

184
00:06:34,650 --> 00:06:39,000
whenever<font color="#E5E5E5"> you can use</font><font color="#CCCCCC"> software in order</font>

185
00:06:36,870 --> 00:06:40,180
<font color="#E5E5E5">to trigger the vulnerabilities inside a</font>

186
00:06:39,000 --> 00:06:41,770
chip

187
00:06:40,180 --> 00:06:43,480
and<font color="#E5E5E5"> pace not even though these</font>

188
00:06:41,770 --> 00:06:45,700
vulnerabilities are triggered<font color="#E5E5E5"> and driven</font>

189
00:06:43,480 --> 00:06:48,310
by software<font color="#CCCCCC"> they're still</font><font color="#E5E5E5"> happening</font>

190
00:06:45,700 --> 00:06:49,930
inside the hardware<font color="#CCCCCC"> of the chip so some</font>

191
00:06:48,310 --> 00:06:51,700
recent examples<font color="#CCCCCC"> where this was the case</font>

192
00:06:49,930 --> 00:06:52,960
is for<font color="#CCCCCC"> example the</font><font color="#E5E5E5"> go hammer and most of</font>

193
00:06:51,700 --> 00:06:55,719
you<font color="#E5E5E5"> are probably familiar with this</font>

194
00:06:52,960 --> 00:06:58,510
where it was possible<font color="#CCCCCC"> to flip bits in</font>

195
00:06:55,720 --> 00:07:01,780
the DRAM chip by<font color="#CCCCCC"> hitting out neighboring</font>

196
00:06:58,510 --> 00:07:03,280
memory<font color="#E5E5E5"> address and the point here is</font>

197
00:07:01,780 --> 00:07:04,809
<font color="#CCCCCC">that the vulnerability that we're</font>

198
00:07:03,280 --> 00:07:06,159
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about so the fault</font><font color="#CCCCCC"> injection</font>

199
00:07:04,810 --> 00:07:09,990
vulnerability is actually in the<font color="#E5E5E5"> DRAM</font>

200
00:07:06,160 --> 00:07:12,220
chip<font color="#E5E5E5"> but take a bus over a very similar</font>

201
00:07:09,990 --> 00:07:14,620
<font color="#CCCCCC">peasley a paper came</font><font color="#E5E5E5"> out where the</font>

202
00:07:12,220 --> 00:07:17,020
author<font color="#E5E5E5"> actually showed that</font><font color="#CCCCCC"> by setting</font>

203
00:07:14,620 --> 00:07:19,270
<font color="#CCCCCC">up a</font><font color="#E5E5E5"> certain functionality of arm the</font>

204
00:07:17,020 --> 00:07:22,240
<font color="#CCCCCC">so-called digital</font><font color="#E5E5E5"> photos frequency</font>

205
00:07:19,270 --> 00:07:23,729
scaling functionality<font color="#E5E5E5"> it was possible to</font>

206
00:07:22,240 --> 00:07:26,530
<font color="#E5E5E5">operate the chip out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> its</font>

207
00:07:23,730 --> 00:07:28,240
specifications so we all know chips have

208
00:07:26,530 --> 00:07:29,830
specifications<font color="#E5E5E5"> if you run them out there</font>

209
00:07:28,240 --> 00:07:31,840
<font color="#CCCCCC">that either don't work or they</font><font color="#E5E5E5"> start</font>

210
00:07:29,830 --> 00:07:34,120
misbehaving<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> means</font><font color="#CCCCCC"> behaviour</font>

211
00:07:31,840 --> 00:07:35,289
exactly what<font color="#E5E5E5"> caused similar faults as</font>

212
00:07:34,120 --> 00:07:38,020
what we<font color="#E5E5E5"> are talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> when we</font>

213
00:07:35,290 --> 00:07:40,900
perform glitches using<font color="#CCCCCC"> Hardware tooling</font>

214
00:07:38,020 --> 00:07:44,169
<font color="#E5E5E5">and this for both attacks it was</font>

215
00:07:40,900 --> 00:07:45,669
possible to<font color="#E5E5E5"> generate to generate</font>

216
00:07:44,170 --> 00:07:48,040
malicious signatures and actually

217
00:07:45,670 --> 00:07:49,810
<font color="#E5E5E5">changed instructions as well</font><font color="#CCCCCC"> and the key</font>

218
00:07:48,040 --> 00:07:52,360
point here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> what we</font><font color="#CCCCCC"> are talking</font>

219
00:07:49,810 --> 00:07:54,820
<font color="#E5E5E5">about is</font><font color="#CCCCCC"> not possible to</font><font color="#E5E5E5"> do it remotely</font>

220
00:07:52,360 --> 00:07:56,230
<font color="#CCCCCC">but</font><font color="#E5E5E5"> if it's driven by software you can</font>

221
00:07:54,820 --> 00:07:58,240
<font color="#CCCCCC">actually do</font><font color="#E5E5E5"> this remotely because you</font>

222
00:07:56,230 --> 00:08:00,490
can get<font color="#CCCCCC"> control over</font><font color="#E5E5E5"> the device remotely</font>

223
00:07:58,240 --> 00:08:05,920
first and then instruct the hardware to

224
00:08:00,490 --> 00:08:09,310
start misbehaving<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I would like to</font>

225
00:08:05,920 --> 00:08:11,020
introduce some real-world examples<font color="#CCCCCC"> what</font>

226
00:08:09,310 --> 00:08:12,970
we are<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about and one thing that</font>

227
00:08:11,020 --> 00:08:14,740
<font color="#CCCCCC">I would</font><font color="#E5E5E5"> like to touch upon versus is</font>

228
00:08:12,970 --> 00:08:17,730
what the academia typically is talking

229
00:08:14,740 --> 00:08:20,860
<font color="#CCCCCC">about</font><font color="#E5E5E5"> what can go wrong so there's two</font>

230
00:08:17,730 --> 00:08:23,530
<font color="#CCCCCC">types so</font><font color="#E5E5E5"> we can affect the control flow</font>

231
00:08:20,860 --> 00:08:26,290
of a<font color="#E5E5E5"> program so we affect the software</font>

232
00:08:23,530 --> 00:08:28,299
or we can affect the data<font color="#E5E5E5"> that the</font>

233
00:08:26,290 --> 00:08:31,240
software<font color="#E5E5E5"> is</font><font color="#CCCCCC"> working</font><font color="#E5E5E5"> on and both of these</font>

234
00:08:28,300 --> 00:08:33,010
concepts actually<font color="#E5E5E5"> are used to a vision a</font>

235
00:08:31,240 --> 00:08:35,890
different type of attacks and<font color="#CCCCCC"> envision</font>

236
00:08:33,010 --> 00:08:38,770
what kind of countermeasures<font color="#E5E5E5"> are needed</font>

237
00:08:35,890 --> 00:08:40,630
in order to<font color="#CCCCCC"> mitigate these attacks so</font>

238
00:08:38,770 --> 00:08:42,549
the academia is always very<font color="#CCCCCC"> focused</font><font color="#E5E5E5"> on</font>

239
00:08:40,630 --> 00:08:44,530
cryptographic<font color="#E5E5E5"> attacks and it's very nice</font>

240
00:08:42,549 --> 00:08:46,870
<font color="#E5E5E5">and one subclass of these attacks is</font>

241
00:08:44,530 --> 00:08:49,810
actual differential fault analysis and

242
00:08:46,870 --> 00:08:52,900
this is a very powerful attack in<font color="#E5E5E5"> order</font>

243
00:08:49,810 --> 00:08:53,500
to get keys out over device so the idea

244
00:08:52,900 --> 00:08:56,500
is

245
00:08:53,500 --> 00:08:59,530
for example for the<font color="#E5E5E5"> RSA CRT algorithm we</font>

246
00:08:56,500 --> 00:09:01,570
compute a valid<font color="#E5E5E5"> signature we store that</font>

247
00:08:59,530 --> 00:09:03,220
signature<font color="#E5E5E5"> and then we generate</font><font color="#CCCCCC"> the</font>

248
00:09:01,570 --> 00:09:05,500
signature again<font color="#E5E5E5"> we inject the fault</font>

249
00:09:03,220 --> 00:09:07,900
<font color="#E5E5E5">which makes the control flow or the data</font>

250
00:09:05,500 --> 00:09:09,400
<font color="#E5E5E5">of</font><font color="#CCCCCC"> that computation go wrong it results</font>

251
00:09:07,900 --> 00:09:11,230
in<font color="#E5E5E5"> a corrupted signature but still</font>

252
00:09:09,400 --> 00:09:13,150
created with the same private key and

253
00:09:11,230 --> 00:09:14,650
then by<font color="#CCCCCC"> using some mathematical magic</font><font color="#E5E5E5"> we</font>

254
00:09:13,150 --> 00:09:18,189
can<font color="#CCCCCC"> actually recover the private key</font>

255
00:09:14,650 --> 00:09:20,459
<font color="#E5E5E5">using those two signatures and please be</font>

256
00:09:18,190 --> 00:09:22,600
aware that this type of<font color="#E5E5E5"> attacks actually</font>

257
00:09:20,460 --> 00:09:24,580
<font color="#E5E5E5">apply to most other cryptographic</font>

258
00:09:22,600 --> 00:09:28,320
algorithms including symmetric

259
00:09:24,580 --> 00:09:28,320
algorithms like AES and des

260
00:09:28,690 --> 00:09:32,830
<font color="#E5E5E5">very interesting</font><font color="#CCCCCC"> attacked by an author</font>

261
00:09:31,180 --> 00:09:35,050
that<font color="#CCCCCC"> was looking into the security of</font>

262
00:09:32,830 --> 00:09:37,810
the<font color="#E5E5E5"> X Box maybe you're familiar with</font>

263
00:09:35,050 --> 00:09:39,400
this<font color="#E5E5E5"> as</font><font color="#CCCCCC"> he figured</font><font color="#E5E5E5"> out by injecting the</font>

264
00:09:37,810 --> 00:09:42,040
small pills in the reset line<font color="#CCCCCC"> it was</font>

265
00:09:39,400 --> 00:09:44,860
<font color="#E5E5E5">possible to</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> reset the chip</font>

266
00:09:42,040 --> 00:09:48,189
partially and<font color="#E5E5E5"> it's actually allowed to</font>

267
00:09:44,860 --> 00:09:50,320
reset the CPUs<font color="#CCCCCC"> registers but was doing</font><font color="#E5E5E5"> a</font>

268
00:09:48,190 --> 00:09:51,610
<font color="#E5E5E5">mem compare without affecting the</font>

269
00:09:50,320 --> 00:09:54,580
continuation<font color="#E5E5E5"> of the chip and this</font>

270
00:09:51,610 --> 00:09:56,230
allowed the person that was looking into

271
00:09:54,580 --> 00:09:57,670
<font color="#E5E5E5">it in order to bypass the integrity</font>

272
00:09:56,230 --> 00:10:00,160
checks<font color="#CCCCCC"> performed during boot which</font>

273
00:09:57,670 --> 00:10:01,780
allowed arbitrary code execution in

274
00:10:00,160 --> 00:10:04,180
similar<font color="#E5E5E5"> fashion the</font><font color="#CCCCCC"> guys looking into</font>

275
00:10:01,780 --> 00:10:07,390
<font color="#E5E5E5">Nintendo figured out the by injecting a</font>

276
00:10:04,180 --> 00:10:09,219
glitch it is possible to bypass a length

277
00:10:07,390 --> 00:10:10,839
check<font color="#E5E5E5"> that was used during</font><font color="#CCCCCC"> boot that</font>

278
00:10:09,220 --> 00:10:13,270
<font color="#CCCCCC">guaranteed that an image</font><font color="#E5E5E5"> that the solid</font>

279
00:10:10,839 --> 00:10:14,830
end was not too large<font color="#E5E5E5"> and by</font><font color="#CCCCCC"> bypassing</font>

280
00:10:13,270 --> 00:10:17,470
this check<font color="#CCCCCC"> it also reserved</font><font color="#E5E5E5"> actually in</font>

281
00:10:14,830 --> 00:10:20,160
<font color="#E5E5E5">code execution and the acid that were</font>

282
00:10:17,470 --> 00:10:23,760
interested in the key<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was only</font>

283
00:10:20,160 --> 00:10:26,439
accessible using that moment<font color="#CCCCCC"> in time</font>

284
00:10:23,760 --> 00:10:28,930
<font color="#E5E5E5">also</font><font color="#CCCCCC"> recently</font><font color="#E5E5E5"> two researchers actually</font>

285
00:10:26,440 --> 00:10:30,910
created their own electromagnet<font color="#CCCCCC"> X</font>

286
00:10:28,930 --> 00:10:32,739
decided to bypass<font color="#E5E5E5"> secure boot of a Cisco</font>

287
00:10:30,910 --> 00:10:35,319
<font color="#CCCCCC">foam and the interesting part</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> that</font>

288
00:10:32,740 --> 00:10:37,060
<font color="#CCCCCC">a</font><font color="#E5E5E5"> very nice characteristic of electronic</font>

289
00:10:35,320 --> 00:10:38,680
fuel injection<font color="#CCCCCC"> is that you can do it</font>

290
00:10:37,060 --> 00:10:40,510
<font color="#CCCCCC">from</font><font color="#E5E5E5"> small distance so they were able</font><font color="#CCCCCC"> to</font>

291
00:10:38,680 --> 00:10:43,510
do this without opening the casing<font color="#E5E5E5"> of</font>

292
00:10:40,510 --> 00:10:47,430
<font color="#CCCCCC">the phone itself</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> we've seen is</font>

293
00:10:43,510 --> 00:10:49,870
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the equipment and the knowledge to</font>

294
00:10:47,430 --> 00:10:52,510
<font color="#CCCCCC">perform fault injection is actually</font>

295
00:10:49,870 --> 00:10:54,430
becoming<font color="#CCCCCC"> available to the masses so we</font>

296
00:10:52,510 --> 00:10:56,860
see much<font color="#E5E5E5"> more content being generated</font>

297
00:10:54,430 --> 00:10:58,270
online<font color="#E5E5E5"> on YouTube on</font><font color="#CCCCCC"> Twitch</font><font color="#E5E5E5"> on whatever</font>

298
00:10:56,860 --> 00:11:01,030
platform where<font color="#CCCCCC"> people are trying</font>

299
00:10:58,270 --> 00:11:02,860
experimenting about photo injection and

300
00:11:01,030 --> 00:11:05,569
another trend<font color="#E5E5E5"> that we recently seen is</font>

301
00:11:02,860 --> 00:11:07,310
that<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> always needed to</font>

302
00:11:05,570 --> 00:11:09,830
have special tooling to perform fault

303
00:11:07,310 --> 00:11:11,479
injection<font color="#E5E5E5"> we've seen now that it's even</font>

304
00:11:09,830 --> 00:11:15,260
possible<font color="#E5E5E5"> to do it in a remote fashion</font>

305
00:11:11,480 --> 00:11:16,850
<font color="#E5E5E5">it's very interesting</font><font color="#CCCCCC"> so what can we</font><font color="#E5E5E5"> do</font>

306
00:11:15,260 --> 00:11:20,090
in<font color="#CCCCCC"> order to</font><font color="#E5E5E5"> mitigate these attacks</font>

307
00:11:16,850 --> 00:11:22,040
well<font color="#E5E5E5"> the academia typically splits up</font>

308
00:11:20,090 --> 00:11:23,210
<font color="#CCCCCC">the fault injection countermeasures in</font>

309
00:11:22,040 --> 00:11:25,099
two groups<font color="#CCCCCC"> there's the so-called</font>

310
00:11:23,210 --> 00:11:26,830
<font color="#CCCCCC">hardware-based fault injection</font>

311
00:11:25,100 --> 00:11:28,880
<font color="#E5E5E5">countermeasures and</font><font color="#CCCCCC"> software</font><font color="#E5E5E5"> based</font>

312
00:11:26,830 --> 00:11:30,650
countermeasures<font color="#E5E5E5"> the hardware based</font>

313
00:11:28,880 --> 00:11:32,630
countermeasures are really the strong

314
00:11:30,650 --> 00:11:35,810
<font color="#E5E5E5">ones</font><font color="#CCCCCC"> the idea there is that</font><font color="#E5E5E5"> you create</font>

315
00:11:32,630 --> 00:11:37,760
<font color="#E5E5E5">the chip</font><font color="#CCCCCC"> you implement specially crafted</font>

316
00:11:35,810 --> 00:11:40,880
<font color="#E5E5E5">hardware in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> prevent</font><font color="#CCCCCC"> these type</font>

317
00:11:37,760 --> 00:11:43,850
of<font color="#E5E5E5"> attacks</font><font color="#CCCCCC"> and then typically they focus</font>

318
00:11:40,880 --> 00:11:46,160
on<font color="#E5E5E5"> redundancy in detection and whenever</font>

319
00:11:43,850 --> 00:11:48,200
there's detection because<font color="#CCCCCC"> the hardware</font>

320
00:11:46,160 --> 00:11:49,670
specially crafted to do this<font color="#E5E5E5"> the</font>

321
00:11:48,200 --> 00:11:52,910
detection will be very close to<font color="#CCCCCC"> the</font>

322
00:11:49,670 --> 00:11:54,469
<font color="#CCCCCC">moment it glazes injected and also it</font>

323
00:11:52,910 --> 00:11:56,480
<font color="#E5E5E5">might be possible</font><font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> prevent</font>

324
00:11:54,470 --> 00:11:57,950
the injection as a whole<font color="#E5E5E5"> for example if</font>

325
00:11:56,480 --> 00:11:59,840
you want<font color="#E5E5E5"> to shoot with a laser</font><font color="#CCCCCC"> on a chip</font>

326
00:11:57,950 --> 00:12:02,600
<font color="#CCCCCC">and it covered it by the shield</font><font color="#E5E5E5"> it's not</font>

327
00:11:59,840 --> 00:12:05,450
possible anymore<font color="#E5E5E5"> however we must realize</font>

328
00:12:02,600 --> 00:12:07,250
that the<font color="#CCCCCC"> standard embedded technology of</font>

329
00:12:05,450 --> 00:12:09,860
today<font color="#E5E5E5"> so that is all the chip</font><font color="#CCCCCC"> that you</font>

330
00:12:07,250 --> 00:12:12,290
find in<font color="#CCCCCC"> your phone in your</font><font color="#E5E5E5"> most STD's</font>

331
00:12:09,860 --> 00:12:14,510
<font color="#E5E5E5">and other equipment will not have these</font>

332
00:12:12,290 --> 00:12:15,890
<font color="#E5E5E5">features implemented and wherever that</font>

333
00:12:14,510 --> 00:12:18,050
<font color="#CCCCCC">is</font><font color="#E5E5E5"> because it's expensive or very</font>

334
00:12:15,890 --> 00:12:19,790
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> to do we do not know exactly</font>

335
00:12:18,050 --> 00:12:21,890
<font color="#E5E5E5">so most of the things</font><font color="#CCCCCC"> we're talking</font>

336
00:12:19,790 --> 00:12:24,620
<font color="#E5E5E5">about actually are not prevented using</font>

337
00:12:21,890 --> 00:12:27,290
hardware based countermeasures the

338
00:12:24,620 --> 00:12:29,210
server<font color="#CCCCCC"> base countermeasures actually you</font>

339
00:12:27,290 --> 00:12:31,160
can be as creative as you want<font color="#CCCCCC"> there can</font>

340
00:12:29,210 --> 00:12:32,690
<font color="#E5E5E5">be computation checks redundancy for</font>

341
00:12:31,160 --> 00:12:34,760
<font color="#E5E5E5">example if the Ravana had to cope point</font>

342
00:12:32,690 --> 00:12:37,280
<font color="#E5E5E5">and you can bypass</font><font color="#CCCCCC"> that using</font><font color="#E5E5E5"> English</font>

343
00:12:34,760 --> 00:12:38,630
<font color="#E5E5E5">you introduce a double check so there's</font>

344
00:12:37,280 --> 00:12:42,500
two checks<font color="#CCCCCC"> with results that you need</font>

345
00:12:38,630 --> 00:12:44,390
probably<font color="#E5E5E5"> two places to perform this same</font>

346
00:12:42,500 --> 00:12:46,400
attack and the key point here<font color="#E5E5E5"> is that</font>

347
00:12:44,390 --> 00:12:48,350
software based countermeasures do not

348
00:12:46,400 --> 00:12:51,130
prevent injection<font color="#E5E5E5"> itself but they</font>

349
00:12:48,350 --> 00:12:53,390
mitigate<font color="#E5E5E5"> the fact</font><font color="#CCCCCC"> that the vulnerability</font>

350
00:12:51,130 --> 00:12:59,030
<font color="#E5E5E5">results in a fault so you mitigate the</font>

351
00:12:53,390 --> 00:13:01,460
fault<font color="#CCCCCC"> for both it</font><font color="#E5E5E5"> is important to</font>

352
00:12:59,030 --> 00:13:03,620
realize that<font color="#CCCCCC"> they do not prevent</font>

353
00:13:01,460 --> 00:13:06,440
injection as a whole<font color="#CCCCCC"> so it is very</font>

354
00:13:03,620 --> 00:13:08,140
unlikely<font color="#E5E5E5"> that a chip is not affected by</font>

355
00:13:06,440 --> 00:13:10,520
any of<font color="#E5E5E5"> the different fault injection</font>

356
00:13:08,140 --> 00:13:13,189
techniques that<font color="#CCCCCC"> are out there</font><font color="#E5E5E5"> but they</font>

357
00:13:10,520 --> 00:13:14,990
<font color="#CCCCCC">definitely</font><font color="#E5E5E5"> are capable of lowering the</font>

358
00:13:13,190 --> 00:13:17,180
probability<font color="#E5E5E5"> for successful attack and</font>

359
00:13:14,990 --> 00:13:18,230
that's as a defender against the tech

360
00:13:17,180 --> 00:13:18,888
<font color="#CCCCCC">edge</font><font color="#E5E5E5"> that's what you're looking for you</font>

361
00:13:18,230 --> 00:13:20,359
want<font color="#E5E5E5"> to make it</font>

362
00:13:18,889 --> 00:13:23,389
complicated enough that<font color="#CCCCCC"> the attacker</font>

363
00:13:20,359 --> 00:13:26,829
does not succeed<font color="#CCCCCC"> even though in theory</font>

364
00:13:23,389 --> 00:13:28,970
the attack might still be possible<font color="#CCCCCC"> I</font>

365
00:13:26,829 --> 00:13:30,649
would<font color="#E5E5E5"> like to emphasize a little</font><font color="#CCCCCC"> bit</font>

366
00:13:28,970 --> 00:13:32,239
more on the<font color="#E5E5E5"> software countermeasures</font>

367
00:13:30,649 --> 00:13:35,449
because it's important<font color="#CCCCCC"> for the rest of</font>

368
00:13:32,239 --> 00:13:37,089
<font color="#E5E5E5">the presentation we know now they do not</font>

369
00:13:35,449 --> 00:13:40,128
prevent fault injection<font color="#CCCCCC"> but they</font>

370
00:13:37,089 --> 00:13:41,929
increase the attack complexity but<font color="#CCCCCC"> a key</font>

371
00:13:40,129 --> 00:13:43,399
point<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> that if you want to</font>

372
00:13:41,929 --> 00:13:45,858
<font color="#E5E5E5">counter something by software this</font>

373
00:13:43,399 --> 00:13:48,619
software needs to<font color="#E5E5E5"> be executed</font><font color="#CCCCCC"> so from</font>

374
00:13:45,859 --> 00:13:50,119
the moment<font color="#CCCCCC"> you inject the glitch</font><font color="#E5E5E5"> you</font>

375
00:13:48,619 --> 00:13:52,100
need to wait some time<font color="#E5E5E5"> or they need to</font>

376
00:13:50,119 --> 00:13:54,470
<font color="#CCCCCC">be some room for this software to</font><font color="#E5E5E5"> be</font>

377
00:13:52,100 --> 00:13:59,209
executed in<font color="#CCCCCC"> order to be effective</font><font color="#E5E5E5"> and</font>

378
00:13:54,470 --> 00:14:01,699
also software<font color="#E5E5E5"> typically affects</font><font color="#CCCCCC"> only a</font>

379
00:13:59,209 --> 00:14:04,459
small part<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example if they use</font>

380
00:14:01,699 --> 00:14:06,319
the<font color="#E5E5E5"> same example as the check if you</font>

381
00:14:04,459 --> 00:14:08,299
have<font color="#E5E5E5"> to employ two checks the second</font>

382
00:14:06,319 --> 00:14:10,549
check only<font color="#CCCCCC"> protects that specific check</font>

383
00:14:08,299 --> 00:14:11,809
but for<font color="#CCCCCC"> example in a</font><font color="#E5E5E5"> code base there</font>

384
00:14:10,549 --> 00:14:13,189
will be a lot of<font color="#E5E5E5"> checks there will be a</font>

385
00:14:11,809 --> 00:14:15,199
lot of critical<font color="#E5E5E5"> points so all these</font>

386
00:14:13,189 --> 00:14:17,629
<font color="#CCCCCC">critical points need to be targeted</font>

387
00:14:15,199 --> 00:14:19,910
specifically<font color="#CCCCCC"> whether those are capital</font>

388
00:14:17,629 --> 00:14:21,290
operations data integrity<font color="#E5E5E5"> critical</font>

389
00:14:19,910 --> 00:14:23,389
decision<font color="#E5E5E5"> points it does not matter if</font>

390
00:14:21,290 --> 00:14:24,649
<font color="#E5E5E5">you want to make this work</font><font color="#CCCCCC"> for a given</font>

391
00:14:23,389 --> 00:14:26,600
code base you<font color="#CCCCCC"> need to implement</font><font color="#E5E5E5"> it</font>

392
00:14:24,649 --> 00:14:28,220
everywhere otherwise the attacker just

393
00:14:26,600 --> 00:14:34,759
<font color="#E5E5E5">goes for the code where it's not</font>

394
00:14:28,220 --> 00:14:38,029
<font color="#E5E5E5">implemented so one</font><font color="#CCCCCC"> question I would</font><font color="#E5E5E5"> like</font>

395
00:14:34,759 --> 00:14:39,079
to give you and<font color="#E5E5E5"> please keep</font><font color="#CCCCCC"> that in the</font>

396
00:14:38,029 --> 00:14:40,399
back<font color="#CCCCCC"> of your mind</font><font color="#E5E5E5"> because you will be</font>

397
00:14:39,079 --> 00:14:42,559
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> answer this at the</font><font color="#E5E5E5"> end of the</font>

398
00:14:40,399 --> 00:14:44,059
talk<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> our software folding</font>

399
00:14:42,559 --> 00:14:46,819
character mesh is sufficient to protect

400
00:14:44,059 --> 00:14:50,660
targets there's something we<font color="#CCCCCC"> want you to</font>

401
00:14:46,819 --> 00:14:52,399
think about so most<font color="#E5E5E5"> of the examples</font><font color="#CCCCCC"> I've</font>

402
00:14:50,660 --> 00:14:54,439
shown<font color="#E5E5E5"> whether that's for the</font><font color="#CCCCCC"> xbox for</font>

403
00:14:52,399 --> 00:14:57,709
Nintendo or for the<font color="#E5E5E5"> Cisco phone the old</font>

404
00:14:54,439 --> 00:14:59,389
<font color="#E5E5E5">target the devices during boot using</font>

405
00:14:57,709 --> 00:15:01,128
<font color="#CCCCCC">photo injection</font><font color="#E5E5E5"> which in a way makes</font>

406
00:14:59,389 --> 00:15:03,759
sense because<font color="#CCCCCC"> these code bases are</font>

407
00:15:01,129 --> 00:15:05,809
typically small<font color="#CCCCCC"> it's not guaranteed that</font>

408
00:15:03,759 --> 00:15:07,600
there's<font color="#CCCCCC"> really</font><font color="#E5E5E5"> abilities that you can</font>

409
00:15:05,809 --> 00:15:09,949
leverage in order to<font color="#CCCCCC"> bypass the security</font>

410
00:15:07,600 --> 00:15:12,470
<font color="#E5E5E5">but this makes</font><font color="#CCCCCC"> me think</font><font color="#E5E5E5"> why</font><font color="#CCCCCC"> don't we use</font>

411
00:15:09,949 --> 00:15:14,539
<font color="#CCCCCC">fault injection during during</font><font color="#E5E5E5"> runtime</font>

412
00:15:12,470 --> 00:15:16,069
and that's<font color="#E5E5E5"> exactly when fault injection</font>

413
00:15:14,539 --> 00:15:21,199
met Linux and that's basically<font color="#E5E5E5"> the</font>

414
00:15:16,069 --> 00:15:23,089
<font color="#CCCCCC">foundation of this presentation so Linux</font>

415
00:15:21,199 --> 00:15:24,709
<font color="#E5E5E5">as you all know and like any other</font>

416
00:15:23,089 --> 00:15:28,240
operating<font color="#E5E5E5"> system because these attacks</font>

417
00:15:24,709 --> 00:15:31,390
are probably not<font color="#CCCCCC"> specific</font>

418
00:15:28,240 --> 00:15:33,279
for<font color="#CCCCCC"> Linux only there probably</font><font color="#E5E5E5"> apply in</font>

419
00:15:31,390 --> 00:15:35,290
slightly<font color="#CCCCCC"> different fashion for other</font>

420
00:15:33,279 --> 00:15:36,939
operating systems as well<font color="#E5E5E5"> is that</font>

421
00:15:35,290 --> 00:15:39,130
operating<font color="#CCCCCC"> system bar</font><font color="#E5E5E5"> attack using</font>

422
00:15:36,940 --> 00:15:41,399
<font color="#E5E5E5">software exploits so if you look at the</font>

423
00:15:39,130 --> 00:15:44,110
last<font color="#CCCCCC"> few</font><font color="#E5E5E5"> years there's numerous</font>

424
00:15:41,399 --> 00:15:47,680
different<font color="#CCCCCC"> CVS</font><font color="#E5E5E5"> that all apply to certain</font>

425
00:15:44,110 --> 00:15:49,690
vulnerabilities<font color="#CCCCCC"> that</font><font color="#E5E5E5"> range from denial</font>

426
00:15:47,680 --> 00:15:53,339
services to privilege escalations for

427
00:15:49,690 --> 00:15:55,600
example however the point<font color="#E5E5E5"> is what if the</font>

428
00:15:53,339 --> 00:15:57,640
<font color="#CCCCCC">abilities are not</font><font color="#E5E5E5"> there so what if you</font>

429
00:15:55,600 --> 00:16:00,850
<font color="#E5E5E5">have a fully patched operating system</font>

430
00:15:57,640 --> 00:16:03,339
and finding variability in fully<font color="#CCCCCC"> patched</font>

431
00:16:00,850 --> 00:16:05,290
operating system is very difficult<font color="#E5E5E5"> of</font>

432
00:16:03,339 --> 00:16:07,089
<font color="#E5E5E5">course you can always go to a company</font>

433
00:16:05,290 --> 00:16:08,649
that<font color="#E5E5E5"> have these on the shelf but then</font>

434
00:16:07,089 --> 00:16:11,740
you need<font color="#E5E5E5"> to pay a lot of money for them</font>

435
00:16:08,649 --> 00:16:13,270
<font color="#E5E5E5">so others came</font><font color="#CCCCCC"> to the same conclusion</font><font color="#E5E5E5"> so</font>

436
00:16:11,740 --> 00:16:16,120
this is a quote<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the guys looking</font>

437
00:16:13,270 --> 00:16:17,740
into the tendo's how can you exploit

438
00:16:16,120 --> 00:16:21,130
<font color="#E5E5E5">something it has no bugs it's not</font>

439
00:16:17,740 --> 00:16:22,839
possible right<font color="#E5E5E5"> well what if you can</font>

440
00:16:21,130 --> 00:16:24,910
introduce<font color="#E5E5E5"> your own bugs and this is</font>

441
00:16:22,839 --> 00:16:27,940
exactly what fault injection can do we

442
00:16:24,910 --> 00:16:30,339
can introduce our own bugs so in order

443
00:16:27,940 --> 00:16:32,500
to do<font color="#CCCCCC"> forth</font><font color="#E5E5E5"> injection you need to set up</font>

444
00:16:30,339 --> 00:16:35,200
<font color="#E5E5E5">so like I</font><font color="#CCCCCC"> said already we are actually</font>

445
00:16:32,500 --> 00:16:36,940
performing<font color="#CCCCCC"> voltage</font><font color="#E5E5E5"> fault injection so</font>

446
00:16:35,200 --> 00:16:38,560
this is a simplified<font color="#CCCCCC"> version of</font><font color="#E5E5E5"> the</font>

447
00:16:36,940 --> 00:16:40,630
<font color="#E5E5E5">setup we</font><font color="#CCCCCC"> used so we have a</font><font color="#E5E5E5"> workstation</font>

448
00:16:38,560 --> 00:16:43,479
<font color="#E5E5E5">that communicates with</font><font color="#CCCCCC"> a glitcher the</font>

449
00:16:40,630 --> 00:16:44,830
yellow box<font color="#CCCCCC"> here and then communicates</font>

450
00:16:43,480 --> 00:16:46,870
with your<font color="#E5E5E5"> server interface with</font><font color="#CCCCCC"> our</font>

451
00:16:44,830 --> 00:16:50,200
<font color="#CCCCCC">target and</font><font color="#E5E5E5"> our target</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case is a</font>

452
00:16:46,870 --> 00:16:52,420
silence board<font color="#E5E5E5"> that house is a fast and</font>

453
00:16:50,200 --> 00:16:54,430
<font color="#CCCCCC">featurette</font><font color="#E5E5E5"> system on chip and inside the</font>

454
00:16:52,420 --> 00:16:57,189
system chip there's<font color="#E5E5E5"> an ARM Cortex a9</font>

455
00:16:54,430 --> 00:16:59,020
subsystem which is actually executing

456
00:16:57,190 --> 00:17:02,260
our operating system<font color="#E5E5E5"> in this case is</font>

457
00:16:59,020 --> 00:17:03,959
<font color="#CCCCCC">ubuntu and</font><font color="#E5E5E5"> there is free</font><font color="#CCCCCC"> signals that</font>

458
00:17:02,260 --> 00:17:07,540
are essential to

459
00:17:03,959 --> 00:17:09,399
<font color="#E5E5E5">4-fold injection first of all we're</font>

460
00:17:07,540 --> 00:17:11,530
doing<font color="#E5E5E5"> for this fault injection so we</font>

461
00:17:09,400 --> 00:17:12,970
have to<font color="#E5E5E5"> apply our own voltage signal to</font>

462
00:17:11,530 --> 00:17:14,790
the target<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in this case we're not</font>

463
00:17:12,970 --> 00:17:17,439
<font color="#CCCCCC">targeting the entire</font>

464
00:17:14,790 --> 00:17:19,869
<font color="#E5E5E5">PCB</font><font color="#CCCCCC"> or the entire</font><font color="#E5E5E5"> chip</font>

465
00:17:17,439 --> 00:17:21,220
we're only powering the actual power

466
00:17:19,869 --> 00:17:22,448
plane because typically on<font color="#E5E5E5"> the so</font>

467
00:17:21,220 --> 00:17:24,309
there's multiple power plants but<font color="#E5E5E5"> only</font>

468
00:17:22,449 --> 00:17:29,170
powering the power plane is responsible

469
00:17:24,309 --> 00:17:30,550
for powering<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ARM</font><font color="#E5E5E5"> cores and then</font>

470
00:17:29,170 --> 00:17:31,960
whenever we<font color="#E5E5E5"> inject glitches then</font>

471
00:17:30,550 --> 00:17:33,700
sometimes the target will enter<font color="#E5E5E5"> an</font>

472
00:17:31,960 --> 00:17:35,380
<font color="#CCCCCC">eternal state</font><font color="#E5E5E5"> and we want to reset</font><font color="#CCCCCC"> the</font>

473
00:17:33,700 --> 00:17:37,480
device in<font color="#CCCCCC"> an own</font><font color="#E5E5E5"> state so we have a</font>

474
00:17:35,380 --> 00:17:40,390
reset line that<font color="#E5E5E5"> actually allows us</font><font color="#CCCCCC"> to do</font>

475
00:17:37,480 --> 00:17:41,440
this and then there's one signal

476
00:17:40,390 --> 00:17:43,840
originating

477
00:17:41,440 --> 00:17:46,030
the target<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> and that's actually a</font>

478
00:17:43,840 --> 00:17:48,070
trigger signal<font color="#E5E5E5"> typically that there's a</font>

479
00:17:46,030 --> 00:17:50,050
<font color="#CCCCCC">GPL pin that tells our glitcher okay</font>

480
00:17:48,070 --> 00:17:52,179
<font color="#E5E5E5">from</font><font color="#CCCCCC"> now on you need to</font><font color="#E5E5E5"> get ready we</font>

481
00:17:50,050 --> 00:17:52,740
want you<font color="#E5E5E5"> to</font><font color="#CCCCCC"> interject a glitch</font><font color="#E5E5E5"> anytime</font>

482
00:17:52,180 --> 00:17:55,000
soon

483
00:17:52,740 --> 00:17:56,980
please know that<font color="#E5E5E5"> it does not necessarily</font>

484
00:17:55,000 --> 00:17:58,630
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be GPIO pin it can be also any</font>

485
00:17:56,980 --> 00:18:02,710
<font color="#CCCCCC">other signal</font><font color="#E5E5E5"> that originates from the</font>

486
00:17:58,630 --> 00:18:04,240
target<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> related to the to the to</font>

487
00:18:02,710 --> 00:18:08,080
the point in time<font color="#CCCCCC"> where you</font><font color="#E5E5E5"> want to</font>

488
00:18:04,240 --> 00:18:10,270
glitch typically a set<font color="#CCCCCC"> of look something</font>

489
00:18:08,080 --> 00:18:11,800
like this so<font color="#CCCCCC"> it's really the mythic</font>

490
00:18:10,270 --> 00:18:14,230
<font color="#E5E5E5">gritty hardware hacking</font><font color="#CCCCCC"> there's cables</font>

491
00:18:11,800 --> 00:18:17,220
everywhere there's probes there's things

492
00:18:14,230 --> 00:18:19,600
solar room and<font color="#E5E5E5"> often I don't</font><font color="#CCCCCC"> know what</font>

493
00:18:17,220 --> 00:18:21,670
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is a typical</font><font color="#E5E5E5"> setup for for this</font>

494
00:18:19,600 --> 00:18:23,350
fault injection<font color="#E5E5E5"> of course it depends a</font>

495
00:18:21,670 --> 00:18:28,870
bit on the person how neatly this looks

496
00:18:23,350 --> 00:18:30,040
but this is mine so for all for<font color="#E5E5E5"> the</font>

497
00:18:28,870 --> 00:18:31,659
injection<font color="#E5E5E5"> techniques we need to take</font>

498
00:18:30,040 --> 00:18:33,220
<font color="#E5E5E5">care of a bunch of parameters and</font><font color="#CCCCCC"> this</font>

499
00:18:31,660 --> 00:18:35,560
will be<font color="#E5E5E5"> different for the different</font>

500
00:18:33,220 --> 00:18:37,090
<font color="#E5E5E5">fault injection techniques so the</font><font color="#CCCCCC"> green</font>

501
00:18:35,560 --> 00:18:39,250
<font color="#CCCCCC">line here</font><font color="#E5E5E5"> denotes actually the trigger</font>

502
00:18:37,090 --> 00:18:42,429
signal so that<font color="#CCCCCC"> tells</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> gate sir</font><font color="#E5E5E5"> okay</font>

503
00:18:39,250 --> 00:18:44,500
get<font color="#E5E5E5"> ready and you're done</font><font color="#CCCCCC"> and basically</font>

504
00:18:42,430 --> 00:18:46,900
between<font color="#E5E5E5"> those two moments in time there</font>

505
00:18:44,500 --> 00:18:49,780
is the<font color="#E5E5E5"> the operation</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we want to</font>

506
00:18:46,900 --> 00:18:52,210
<font color="#CCCCCC">affect</font><font color="#E5E5E5"> and then the red line is</font><font color="#CCCCCC"> the</font>

507
00:18:49,780 --> 00:18:53,500
actual<font color="#CCCCCC"> focus signal and the first</font>

508
00:18:52,210 --> 00:18:55,540
<font color="#E5E5E5">parameter we have to take care of the</font>

509
00:18:53,500 --> 00:18:57,430
time we wait between<font color="#E5E5E5"> the moment the</font>

510
00:18:55,540 --> 00:18:59,320
trigger signal goes up and we inject<font color="#E5E5E5"> the</font>

511
00:18:57,430 --> 00:19:00,790
glitch<font color="#E5E5E5"> let's dig let's delay and we want</font>

512
00:18:59,320 --> 00:19:02,290
to<font color="#E5E5E5"> again demises within the window</font>

513
00:19:00,790 --> 00:19:04,000
because<font color="#CCCCCC"> we do not know exactly why that</font>

514
00:19:02,290 --> 00:19:05,590
moment in<font color="#CCCCCC"> time is where that</font><font color="#E5E5E5"> operation</font>

515
00:19:04,000 --> 00:19:09,310
is happening we<font color="#E5E5E5"> already know that it's</font>

516
00:19:05,590 --> 00:19:11,980
between<font color="#E5E5E5"> the two green edges and then we</font>

517
00:19:09,310 --> 00:19:14,230
<font color="#E5E5E5">need to</font><font color="#CCCCCC"> figure out</font><font color="#E5E5E5"> how long</font><font color="#CCCCCC"> the glitch</font>

518
00:19:11,980 --> 00:19:16,660
will be so that's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> glaze length</font><font color="#E5E5E5"> this</font>

519
00:19:14,230 --> 00:19:19,030
parameter<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> and then we need to figure</font>

520
00:19:16,660 --> 00:19:21,910
<font color="#E5E5E5">out the</font><font color="#CCCCCC"> amplitude of the eaglet</font><font color="#E5E5E5"> so that</font>

521
00:19:19,030 --> 00:19:23,889
is<font color="#CCCCCC"> parameter free so what we typically</font>

522
00:19:21,910 --> 00:19:25,990
do is<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to figure</font><font color="#E5E5E5"> out both what</font>

523
00:19:23,890 --> 00:19:27,490
parameters are effective<font color="#E5E5E5"> and if the</font>

524
00:19:25,990 --> 00:19:30,580
target<font color="#CCCCCC"> is vulnerable</font><font color="#E5E5E5"> we write a very</font>

525
00:19:27,490 --> 00:19:32,310
simple<font color="#E5E5E5"> program the only thing it does is</font>

526
00:19:30,580 --> 00:19:34,419
it<font color="#CCCCCC"> sets</font><font color="#E5E5E5"> that trigger single high</font>

527
00:19:32,310 --> 00:19:36,250
increases the counter says the trigger

528
00:19:34,420 --> 00:19:38,110
signal low<font color="#E5E5E5"> and says the counter back and</font>

529
00:19:36,250 --> 00:19:41,560
the idea here<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> if the counter</font>

530
00:19:38,110 --> 00:19:43,959
<font color="#CCCCCC">value is</font><font color="#E5E5E5"> actually different</font><font color="#CCCCCC"> than somehow</font>

531
00:19:41,560 --> 00:19:45,940
we change the intended<font color="#CCCCCC"> behavior of this</font>

532
00:19:43,960 --> 00:19:47,740
program<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it gives us enough</font>

533
00:19:45,940 --> 00:19:49,330
confidence that<font color="#E5E5E5"> they can</font><font color="#CCCCCC"> move</font><font color="#E5E5E5"> on to</font><font color="#CCCCCC"> the</font>

534
00:19:47,740 --> 00:19:53,230
next<font color="#E5E5E5"> step actually</font><font color="#CCCCCC"> targeting something</font>

535
00:19:49,330 --> 00:19:54,610
<font color="#E5E5E5">useful so whenever we execute this</font>

536
00:19:53,230 --> 00:19:55,299
<font color="#CCCCCC">program and we inject the glitches</font>

537
00:19:54,610 --> 00:19:57,729
within

538
00:19:55,299 --> 00:19:59,889
to trigger<font color="#E5E5E5"> edges we expect different</font>

539
00:19:57,730 --> 00:20:01,720
<font color="#CCCCCC">types of outputs</font><font color="#E5E5E5"> so whenever the counter</font>

540
00:19:59,889 --> 00:20:04,059
<font color="#E5E5E5">value is as expected</font>

541
00:20:01,720 --> 00:20:06,519
then the<font color="#CCCCCC"> injecting glitch has no impact</font>

542
00:20:04,059 --> 00:20:07,928
whenever the counter<font color="#CCCCCC"> value is not being</font>

543
00:20:06,519 --> 00:20:09,580
<font color="#E5E5E5">sent back at all then the glitch is</font>

544
00:20:07,929 --> 00:20:11,980
probably<font color="#E5E5E5"> too hard and the program comes</font>

545
00:20:09,580 --> 00:20:14,199
out to<font color="#E5E5E5"> continue the target Euler reset</font>

546
00:20:11,980 --> 00:20:16,419
or something else goes wrong<font color="#E5E5E5"> inside the</font>

547
00:20:14,200 --> 00:20:17,649
chip and whenever the counter value<font color="#CCCCCC"> is</font>

548
00:20:16,419 --> 00:20:19,690
<font color="#CCCCCC">actually different than the antennas</font>

549
00:20:17,649 --> 00:20:23,559
value then we know that somehow we

550
00:20:19,690 --> 00:20:26,110
effective we<font color="#CCCCCC"> affected the actual program</font>

551
00:20:23,559 --> 00:20:27,639
and we do not know what<font color="#E5E5E5"> goes wrong but</font>

552
00:20:26,110 --> 00:20:29,258
<font color="#E5E5E5">we at</font><font color="#CCCCCC"> least know something goes wrong</font>

553
00:20:27,639 --> 00:20:32,109
and this<font color="#E5E5E5"> might actually allow</font><font color="#CCCCCC"> us to</font>

554
00:20:29,259 --> 00:20:34,899
perform<font color="#E5E5E5"> an actual attack so what we</font>

555
00:20:32,109 --> 00:20:37,418
typically do is<font color="#E5E5E5"> we randomized all the</font>

556
00:20:34,899 --> 00:20:39,668
<font color="#E5E5E5">parameter</font><font color="#CCCCCC"> thread so we have</font><font color="#E5E5E5"> three free</font>

557
00:20:37,419 --> 00:20:41,830
parameters and<font color="#E5E5E5"> what we see</font><font color="#CCCCCC"> here is that</font>

558
00:20:39,669 --> 00:20:43,090
<font color="#E5E5E5">we have on the left side the glacis</font><font color="#CCCCCC"> DC</font>

559
00:20:41,830 --> 00:20:45,489
and on the bottom<font color="#E5E5E5"> side we have the</font>

560
00:20:43,090 --> 00:20:48,129
<font color="#CCCCCC">glazed</font><font color="#E5E5E5"> length and all these experiments</font>

561
00:20:45,489 --> 00:20:51,070
<font color="#E5E5E5">are plotted so on the top left side we</font>

562
00:20:48,129 --> 00:20:52,748
actually<font color="#E5E5E5"> see a green area and this is</font>

563
00:20:51,070 --> 00:20:54,668
<font color="#E5E5E5">where the</font><font color="#CCCCCC"> glitched</font><font color="#E5E5E5"> VCC so the</font><font color="#CCCCCC"> great's</font>

564
00:20:52,749 --> 00:20:56,440
<font color="#CCCCCC">rotates and the glazed lengths</font><font color="#E5E5E5"> have a</font>

565
00:20:54,669 --> 00:20:58,749
<font color="#E5E5E5">combination that did not have any</font><font color="#CCCCCC"> impact</font>

566
00:20:56,440 --> 00:21:00,789
on the<font color="#CCCCCC"> program whatsoever</font><font color="#E5E5E5"> and on the</font>

567
00:20:58,749 --> 00:21:02,230
bottom right<font color="#E5E5E5"> we see yellow area so those</font>

568
00:21:00,789 --> 00:21:03,730
are the mutes and these are the

569
00:21:02,230 --> 00:21:05,379
experiments where the<font color="#E5E5E5"> combination</font>

570
00:21:03,730 --> 00:21:07,720
<font color="#E5E5E5">between glaze</font><font color="#CCCCCC"> length English you see</font>

571
00:21:05,379 --> 00:21:09,219
actually<font color="#E5E5E5"> resulted</font><font color="#CCCCCC"> in a</font><font color="#E5E5E5"> glitch shape that</font>

572
00:21:07,720 --> 00:21:10,899
<font color="#CCCCCC">was too strong so the target did not</font>

573
00:21:09,220 --> 00:21:13,749
continue<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> after the glaze was</font>

574
00:21:10,899 --> 00:21:15,758
injected but between<font color="#E5E5E5"> those two areas we</font>

575
00:21:13,749 --> 00:21:19,570
see the<font color="#E5E5E5"> so-called</font><font color="#CCCCCC"> sweet spot let's say a</font>

576
00:21:15,759 --> 00:21:21,340
<font color="#E5E5E5">trend that you</font><font color="#CCCCCC"> see there and those</font>

577
00:21:19,570 --> 00:21:23,739
combinations actually resulted in<font color="#E5E5E5"> the</font>

578
00:21:21,340 --> 00:21:25,959
program to misbehave<font color="#E5E5E5"> but</font><font color="#CCCCCC"> continue</font>

579
00:21:23,739 --> 00:21:28,029
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> allowed us to actually</font>

580
00:21:25,960 --> 00:21:31,989
continue after so we<font color="#E5E5E5"> could generate a</font>

581
00:21:28,029 --> 00:21:33,190
new experiment directly after so what

582
00:21:31,989 --> 00:21:35,590
this<font color="#E5E5E5"> shows</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> there's some sort of</font>

583
00:21:33,190 --> 00:21:37,779
relationship<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the glitch voltage</font>

584
00:21:35,590 --> 00:21:40,090
and the glitz length and this provides

585
00:21:37,779 --> 00:21:41,889
<font color="#E5E5E5">us also enough confidence that we can</font>

586
00:21:40,090 --> 00:21:44,230
fix one of<font color="#E5E5E5"> those parameters</font><font color="#CCCCCC"> in order to</font>

587
00:21:41,889 --> 00:21:47,469
minimize<font color="#CCCCCC"> the parameter search</font><font color="#E5E5E5"> space for</font>

588
00:21:44,230 --> 00:21:49,149
the<font color="#E5E5E5"> actual parameters and also this</font>

589
00:21:47,470 --> 00:21:51,249
provides enough confidence to<font color="#E5E5E5"> go to the</font>

590
00:21:49,149 --> 00:21:53,518
next<font color="#E5E5E5"> step and that's actually attacking</font>

591
00:21:51,249 --> 00:21:55,809
Linux<font color="#CCCCCC"> in this the</font><font color="#E5E5E5"> moment I give the</font>

592
00:21:53,519 --> 00:22:00,340
presenter to<font color="#CCCCCC"> Krystal through Thank</font><font color="#E5E5E5"> You</font>

593
00:21:55,809 --> 00:22:02,649
Nick nice to<font color="#E5E5E5"> be here</font><font color="#CCCCCC"> thank you well</font>

594
00:22:00,340 --> 00:22:04,990
<font color="#CCCCCC">Nick's represented more or less the how</font>

595
00:22:02,649 --> 00:22:05,678
we do fault injection how what is needed

596
00:22:04,990 --> 00:22:07,950
<font color="#E5E5E5">before</font>

597
00:22:05,679 --> 00:22:10,019
what is<font color="#E5E5E5"> also the physics involved</font>

598
00:22:07,950 --> 00:22:11,789
basically you<font color="#E5E5E5"> are in case of</font><font color="#CCCCCC"> voltages</font>

599
00:22:10,019 --> 00:22:14,850
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> subtracting energy to a target</font>

600
00:22:11,789 --> 00:22:16,769
<font color="#E5E5E5">either to a level which you</font><font color="#CCCCCC"> are not</font><font color="#E5E5E5"> able</font>

601
00:22:14,850 --> 00:22:19,559
<font color="#E5E5E5">to affect it which is basically the</font>

602
00:22:16,769 --> 00:22:22,350
<font color="#E5E5E5">green or</font><font color="#CCCCCC"> your basically</font><font color="#E5E5E5"> you are shutting</font>

603
00:22:19,559 --> 00:22:24,840
<font color="#E5E5E5">down without the yellow or you are in</font>

604
00:22:22,350 --> 00:22:28,649
that sweet spots where something happens

605
00:22:24,840 --> 00:22:30,959
we don't<font color="#E5E5E5"> know basically yet but what but</font>

606
00:22:28,649 --> 00:22:33,570
<font color="#CCCCCC">that</font><font color="#E5E5E5"> might</font><font color="#CCCCCC"> be useful</font><font color="#E5E5E5"> and usable for</font><font color="#CCCCCC"> an</font>

607
00:22:30,960 --> 00:22:35,549
attack and it is<font color="#E5E5E5"> exactly what</font><font color="#CCCCCC"> we want to</font>

608
00:22:33,570 --> 00:22:37,678
<font color="#E5E5E5">use and we</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to use for</font>

609
00:22:35,549 --> 00:22:40,049
attacking Linux<font color="#E5E5E5"> so let's imagine in a</font>

610
00:22:37,679 --> 00:22:42,450
situation we<font color="#CCCCCC"> are where we have a program</font>

611
00:22:40,049 --> 00:22:44,820
<font color="#CCCCCC">running a user</font><font color="#E5E5E5"> space and we don't have</font><font color="#CCCCCC"> a</font>

612
00:22:42,450 --> 00:22:47,610
privilege of doing<font color="#E5E5E5"> anything at kernel</font>

613
00:22:44,820 --> 00:22:50,010
<font color="#CCCCCC">level we might</font><font color="#E5E5E5"> want to use</font><font color="#CCCCCC"> this fault</font>

614
00:22:47,610 --> 00:22:53,399
injection<font color="#E5E5E5"> techniques in order to make</font>

615
00:22:50,010 --> 00:22:55,500
the code misbehave<font color="#E5E5E5"> in a kernel</font><font color="#CCCCCC"> space so</font>

616
00:22:53,399 --> 00:22:58,439
that<font color="#CCCCCC"> our user space application gets</font>

617
00:22:55,500 --> 00:23:00,090
much more privileges than<font color="#E5E5E5"> intended so</font>

618
00:22:58,440 --> 00:23:02,639
basically what we are<font color="#E5E5E5"> doing what you're</font>

619
00:23:00,090 --> 00:23:04,678
seeing<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> that a user</font><font color="#E5E5E5"> space</font>

620
00:23:02,639 --> 00:23:07,820
application that makes a<font color="#E5E5E5"> system call</font>

621
00:23:04,679 --> 00:23:10,799
just<font color="#CCCCCC"> for activating</font><font color="#E5E5E5"> some kernel code and</font>

622
00:23:07,820 --> 00:23:12,689
it should not be<font color="#CCCCCC"> allowed to do something</font>

623
00:23:10,799 --> 00:23:16,230
but by using<font color="#E5E5E5"> our</font><font color="#CCCCCC"> fault injection</font><font color="#E5E5E5"> we</font>

624
00:23:12,690 --> 00:23:19,500
attempt<font color="#CCCCCC"> to make that misbehave enough so</font>

625
00:23:16,230 --> 00:23:22,340
that that<font color="#E5E5E5"> security</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> is bypassed and</font>

626
00:23:19,500 --> 00:23:24,720
gone so this is the general idea<font color="#E5E5E5"> of this</font>

627
00:23:22,340 --> 00:23:27,240
situation<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't need privileges in</font>

628
00:23:24,720 --> 00:23:31,769
order<font color="#CCCCCC"> to do this attack you just need to</font>

629
00:23:27,240 --> 00:23:33,809
be able<font color="#CCCCCC"> to make some kernel calls</font><font color="#E5E5E5"> and be</font>

630
00:23:31,769 --> 00:23:37,019
able<font color="#E5E5E5"> to interact with a target this is</font>

631
00:23:33,809 --> 00:23:39,840
what we are<font color="#E5E5E5"> going to do now so let's</font>

632
00:23:37,019 --> 00:23:42,929
figure<font color="#CCCCCC"> out for one moment</font><font color="#E5E5E5"> the memory</font>

633
00:23:39,840 --> 00:23:46,049
<font color="#CCCCCC">mapping how it works in Linux</font><font color="#E5E5E5"> so you</font>

634
00:23:42,929 --> 00:23:49,440
have a<font color="#CCCCCC"> dev mem device</font><font color="#E5E5E5"> normally this</font>

635
00:23:46,049 --> 00:23:52,049
device cannot be opened by a user<font color="#E5E5E5"> space</font>

636
00:23:49,440 --> 00:23:55,529
application<font color="#E5E5E5"> the reasons that this device</font>

637
00:23:52,049 --> 00:23:57,590
allows<font color="#E5E5E5"> to map any part of the</font><font color="#CCCCCC"> physical</font>

638
00:23:55,529 --> 00:24:00,059
<font color="#E5E5E5">memory into the user space application</font>

639
00:23:57,590 --> 00:24:01,740
<font color="#E5E5E5">so this means</font><font color="#CCCCCC"> that if you were able</font><font color="#E5E5E5"> to</font>

640
00:24:00,059 --> 00:24:04,649
<font color="#E5E5E5">call</font><font color="#CCCCCC"> that from user space we</font><font color="#E5E5E5"> are also</font>

641
00:24:01,740 --> 00:24:06,960
able to<font color="#E5E5E5"> map kernel memory physical space</font>

642
00:24:04,649 --> 00:24:09,928
kernel memory pages within your

643
00:24:06,960 --> 00:24:11,789
application or user space program and

644
00:24:09,929 --> 00:24:13,590
this means that<font color="#E5E5E5"> you can either read it</font>

645
00:24:11,789 --> 00:24:15,480
you<font color="#E5E5E5"> can never modify it because then you</font>

646
00:24:13,590 --> 00:24:18,049
<font color="#CCCCCC">have the pleaders for</font><font color="#E5E5E5"> that so of course</font>

647
00:24:15,480 --> 00:24:20,279
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are some security</font><font color="#E5E5E5"> checks there</font>

648
00:24:18,049 --> 00:24:21,179
<font color="#CCCCCC">there are performed at</font><font color="#E5E5E5"> the kernel level</font>

649
00:24:20,279 --> 00:24:23,639
<font color="#CCCCCC">like</font>

650
00:24:21,179 --> 00:24:27,450
you are<font color="#CCCCCC"> userspace</font><font color="#E5E5E5"> you asking me to open</font>

651
00:24:23,639 --> 00:24:29,488
<font color="#CCCCCC">dev</font><font color="#E5E5E5"> ma'am now no way you are not allowed</font>

652
00:24:27,450 --> 00:24:31,710
<font color="#CCCCCC">to do</font><font color="#E5E5E5"> that if you are</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> it leash</font>

653
00:24:29,489 --> 00:24:35,099
<font color="#E5E5E5">application with root privileges in a</font>

654
00:24:31,710 --> 00:24:37,049
way you<font color="#CCCCCC"> are allowed</font><font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> so there</font>

655
00:24:35,099 --> 00:24:40,739
is a check<font color="#E5E5E5"> somewhere there is some point</font>

656
00:24:37,049 --> 00:24:43,109
in the kernel that<font color="#E5E5E5"> says if you are user</font>

657
00:24:40,739 --> 00:24:44,969
space<font color="#E5E5E5"> or if you are</font><font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> so there is</font>

658
00:24:43,109 --> 00:24:48,749
one point<font color="#E5E5E5"> specific that makes the check</font>

659
00:24:44,969 --> 00:24:52,289
<font color="#E5E5E5">what if we are able to pinpoint exactly</font>

660
00:24:48,749 --> 00:24:53,940
that<font color="#CCCCCC"> check and then at that</font><font color="#E5E5E5"> point we are</font>

661
00:24:52,289 --> 00:24:57,210
able<font color="#E5E5E5"> to make the program misbehave and</font>

662
00:24:53,940 --> 00:24:59,940
<font color="#CCCCCC">go into wrong path so the goal would be</font>

663
00:24:57,210 --> 00:25:02,399
<font color="#E5E5E5">then we try to open</font><font color="#CCCCCC"> that from user space</font>

664
00:24:59,940 --> 00:25:04,499
<font color="#E5E5E5">many</font><font color="#CCCCCC"> times we try to bypass</font><font color="#E5E5E5"> the check</font>

665
00:25:02,399 --> 00:25:07,498
performed by the<font color="#CCCCCC"> linux kernel</font><font color="#E5E5E5"> using a</font>

666
00:25:04,499 --> 00:25:09,450
glitch at that point in<font color="#E5E5E5"> time and then if</font>

667
00:25:07,499 --> 00:25:11,339
you<font color="#E5E5E5"> are lucky we are able</font><font color="#CCCCCC"> to map</font>

668
00:25:09,450 --> 00:25:14,759
<font color="#E5E5E5">arbitrary physical memory in</font><font color="#CCCCCC"> user space</font>

669
00:25:11,339 --> 00:25:17,460
<font color="#CCCCCC">so the plan is that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually make the</font>

670
00:25:14,759 --> 00:25:20,429
system call we try to bleach<font color="#E5E5E5"> there</font><font color="#CCCCCC"> and</font>

671
00:25:17,460 --> 00:25:22,739
if<font color="#E5E5E5"> we are have a good attack then mean</font>

672
00:25:20,429 --> 00:25:26,729
<font color="#CCCCCC">that we have full kernel memory access</font>

673
00:25:22,739 --> 00:25:29,609
from user<font color="#CCCCCC"> space and let's see what</font>

674
00:25:26,729 --> 00:25:32,369
<font color="#E5E5E5">happens</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are going to use basically</font>

675
00:25:29,609 --> 00:25:35,249
<font color="#E5E5E5">this</font><font color="#CCCCCC"> code this is very simple</font><font color="#E5E5E5"> as you</font><font color="#CCCCCC"> can</font>

676
00:25:32,369 --> 00:25:37,499
<font color="#E5E5E5">see basically you see the trigger high</font>

677
00:25:35,249 --> 00:25:39,089
and trigger low<font color="#CCCCCC"> this means that</font><font color="#E5E5E5"> between</font>

678
00:25:37,499 --> 00:25:41,309
<font color="#E5E5E5">three</font><font color="#CCCCCC"> guy and trigger low when we</font>

679
00:25:39,089 --> 00:25:43,019
<font color="#CCCCCC">actually do</font><font color="#E5E5E5"> the open is exactly the</font>

680
00:25:41,309 --> 00:25:45,210
<font color="#E5E5E5">point in time</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to shoot our</font>

681
00:25:43,019 --> 00:25:46,739
glitch or<font color="#E5E5E5"> try to inject it because</font>

682
00:25:45,210 --> 00:25:49,049
that's exactly<font color="#E5E5E5"> the point in time where</font>

683
00:25:46,739 --> 00:25:51,029
it's likely<font color="#E5E5E5"> that those checks are</font>

684
00:25:49,049 --> 00:25:53,129
performed and if you are able<font color="#CCCCCC"> to inject</font>

685
00:25:51,029 --> 00:25:55,619
<font color="#E5E5E5">there that point in time then we know</font>

686
00:25:53,129 --> 00:25:58,978
<font color="#E5E5E5">that we might be able to perhaps bypass</font>

687
00:25:55,619 --> 00:26:01,468
the the<font color="#E5E5E5"> target so busy</font><font color="#CCCCCC"> disk or</font><font color="#E5E5E5"> running</font>

688
00:25:58,979 --> 00:26:03,809
<font color="#CCCCCC">user</font><font color="#E5E5E5"> space we continuous</font><font color="#CCCCCC"> Colts is open</font>

689
00:26:01,469 --> 00:26:05,609
on that<font color="#E5E5E5"> man and it is what happened</font>

690
00:26:03,809 --> 00:26:07,979
<font color="#CCCCCC">basically what you see</font><font color="#E5E5E5"> there is that</font><font color="#CCCCCC"> the</font>

691
00:26:05,609 --> 00:26:10,349
<font color="#CCCCCC">green this</font><font color="#E5E5E5"> is a combination of glitch</font>

692
00:26:07,979 --> 00:26:12,479
length and little a glitch delay means

693
00:26:10,349 --> 00:26:14,399
that we have the<font color="#E5E5E5"> trigger</font><font color="#CCCCCC"> and we have</font>

694
00:26:12,479 --> 00:26:16,710
some point in time<font color="#E5E5E5"> or</font><font color="#CCCCCC"> react ratio this</font>

695
00:26:14,399 --> 00:26:18,089
<font color="#E5E5E5">is randomized more or less sooner or</font>

696
00:26:16,710 --> 00:26:20,999
later we are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to it</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that</font>

697
00:26:18,089 --> 00:26:23,509
<font color="#E5E5E5">might have an effect and then the</font><font color="#CCCCCC"> bitch</font>

698
00:26:20,999 --> 00:26:25,649
length is that how much energy<font color="#E5E5E5"> do we</font>

699
00:26:23,509 --> 00:26:27,479
subtract from<font color="#E5E5E5"> the target these are</font>

700
00:26:25,649 --> 00:26:29,998
things that we<font color="#E5E5E5"> don't know of course but</font>

701
00:26:27,479 --> 00:26:34,130
<font color="#E5E5E5">by having a statistical</font><font color="#CCCCCC"> approach we know</font>

702
00:26:29,999 --> 00:26:36,170
that out<font color="#CCCCCC"> of let's say n parameters</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> n</font>

703
00:26:34,130 --> 00:26:38,780
we might have at least one success and

704
00:26:36,170 --> 00:26:41,330
as we usually<font color="#E5E5E5"> say in</font><font color="#CCCCCC"> Fulton</font><font color="#E5E5E5"> injection</font>

705
00:26:38,780 --> 00:26:43,730
field<font color="#E5E5E5"> one is enough and what we are</font>

706
00:26:41,330 --> 00:26:45,530
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> see here is that every degree</font>

707
00:26:43,730 --> 00:26:47,300
<font color="#E5E5E5">in there is that means</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> target</font>

708
00:26:45,530 --> 00:26:51,620
has not<font color="#CCCCCC"> been affected so we have not</font>

709
00:26:47,300 --> 00:26:53,720
<font color="#CCCCCC">been allowed to to open the device those</font>

710
00:26:51,620 --> 00:26:55,040
<font color="#E5E5E5">model yellow up there you are going to</font>

711
00:26:53,720 --> 00:26:57,230
see that<font color="#CCCCCC"> the table has been reset but</font>

712
00:26:55,040 --> 00:26:59,840
what's interesting<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> that the red</font>

713
00:26:57,230 --> 00:27:02,330
ones red ones are successful experiment

714
00:26:59,840 --> 00:27:04,879
where we have been able to<font color="#E5E5E5"> map in a user</font>

715
00:27:02,330 --> 00:27:07,870
space<font color="#CCCCCC"> application kernel space so these</font>

716
00:27:04,880 --> 00:27:11,810
are every red<font color="#E5E5E5"> that there is actually a</font>

717
00:27:07,870 --> 00:27:15,409
successful attack over there<font color="#E5E5E5"> so we</font>

718
00:27:11,810 --> 00:27:19,250
actually<font color="#E5E5E5"> perform 22,000 experiment in 17</font>

719
00:27:15,410 --> 00:27:21,530
hours<font color="#CCCCCC"> of just one</font><font color="#E5E5E5"> day more or less we</font>

720
00:27:19,250 --> 00:27:24,800
went for a beer we went out and<font color="#E5E5E5"> that</font>

721
00:27:21,530 --> 00:27:26,570
this<font color="#E5E5E5"> was</font><font color="#CCCCCC"> just running so we identified</font>

722
00:27:24,800 --> 00:27:29,270
that during<font color="#E5E5E5"> this specific</font><font color="#CCCCCC"> moment in time</font>

723
00:27:26,570 --> 00:27:31,939
so from<font color="#E5E5E5"> the trigger there are there is a</font>

724
00:27:29,270 --> 00:27:34,070
window like<font color="#E5E5E5"> twenty</font><font color="#CCCCCC"> five point five</font>

725
00:27:31,940 --> 00:27:37,310
<font color="#E5E5E5">microseconds from the trigger so when</font>

726
00:27:34,070 --> 00:27:40,070
you say hey open and up to twenty<font color="#CCCCCC"> five</font>

727
00:27:37,310 --> 00:27:42,740
point eight<font color="#E5E5E5"> there something nice happens</font>

728
00:27:40,070 --> 00:27:45,530
with that<font color="#E5E5E5"> percentage which may be very</font>

729
00:27:42,740 --> 00:27:48,350
small<font color="#CCCCCC"> but in practice means that every</font>

730
00:27:45,530 --> 00:27:50,270
<font color="#CCCCCC">ten minutes we are able to</font><font color="#E5E5E5"> map that</font>

731
00:27:48,350 --> 00:27:52,550
kernel space it wouldn't use a

732
00:27:50,270 --> 00:27:54,290
specification<font color="#E5E5E5"> and keep in mind</font><font color="#CCCCCC"> that the</font>

733
00:27:52,550 --> 00:27:56,000
color is<font color="#E5E5E5"> fully patched</font><font color="#CCCCCC"> there is no</font>

734
00:27:54,290 --> 00:27:58,310
vulnerability which is known we don't

735
00:27:56,000 --> 00:28:00,020
need<font color="#E5E5E5"> it even if it's there we</font><font color="#CCCCCC"> actually</font>

736
00:27:58,310 --> 00:28:01,730
don't need it<font color="#E5E5E5"> this means</font><font color="#CCCCCC"> that once the</font>

737
00:28:00,020 --> 00:28:05,770
<font color="#E5E5E5">setup is running in ten minutes</font>

738
00:28:01,730 --> 00:28:05,770
we get kernel memory into user<font color="#E5E5E5"> phase</font>

739
00:28:06,190 --> 00:28:10,880
second one right<font color="#E5E5E5"> we want to rather</font><font color="#CCCCCC"> than</font>

740
00:28:08,690 --> 00:28:12,830
doing<font color="#E5E5E5"> that we want</font><font color="#CCCCCC"> to escalate</font><font color="#E5E5E5"> we are</font>

741
00:28:10,880 --> 00:28:14,480
still use a space where<font color="#CCCCCC"> you do a lot</font><font color="#E5E5E5"> in</font>

742
00:28:12,830 --> 00:28:17,810
<font color="#E5E5E5">that case but you would like to see our</font>

743
00:28:14,480 --> 00:28:20,300
nice<font color="#CCCCCC"> dash at the end of the shell</font><font color="#E5E5E5"> so</font>

744
00:28:17,810 --> 00:28:22,399
what do we<font color="#CCCCCC"> do there okay keep in mind</font>

745
00:28:20,300 --> 00:28:24,440
<font color="#E5E5E5">that when you actually do a call to a</font>

746
00:28:22,400 --> 00:28:28,550
function there is always a result<font color="#E5E5E5"> which</font>

747
00:28:24,440 --> 00:28:31,220
is returned to the<font color="#CCCCCC"> caller like yes true</font>

748
00:28:28,550 --> 00:28:33,050
or no false or something that<font color="#E5E5E5"> this is</font>

749
00:28:31,220 --> 00:28:37,490
<font color="#E5E5E5">usually represented</font><font color="#CCCCCC"> with some binary</font>

750
00:28:33,050 --> 00:28:40,580
<font color="#E5E5E5">value in in the assembly in the call so</font>

751
00:28:37,490 --> 00:28:42,320
this means that we thought perhaps if we

752
00:28:40,580 --> 00:28:44,510
actually set all the register to this

753
00:28:42,320 --> 00:28:46,939
good value we might have a situation

754
00:28:44,510 --> 00:28:47,480
that<font color="#CCCCCC"> this value that should return to</font>

755
00:28:46,940 --> 00:28:49,760
the code

756
00:28:47,480 --> 00:28:51,590
by our glitch we don't know how so we

757
00:28:49,760 --> 00:28:54,379
would be it<font color="#E5E5E5"> won't be not be possible</font><font color="#CCCCCC"> for</font>

758
00:28:51,590 --> 00:28:59,919
<font color="#CCCCCC">us to say hey in this code we were able</font>

759
00:28:54,380 --> 00:29:01,820
<font color="#CCCCCC">to but we are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> say that</font>

760
00:28:59,920 --> 00:29:04,070
<font color="#E5E5E5">statistically we have been able</font><font color="#CCCCCC"> to</font>

761
00:29:01,820 --> 00:29:05,870
<font color="#E5E5E5">affect that so</font><font color="#CCCCCC"> we first</font><font color="#E5E5E5"> set all the</font>

762
00:29:04,070 --> 00:29:08,570
<font color="#E5E5E5">registers to zero before</font><font color="#CCCCCC"> so before they</font>

763
00:29:05,870 --> 00:29:12,379
<font color="#CCCCCC">are doing</font><font color="#E5E5E5"> a system call which is this</font>

764
00:29:08,570 --> 00:29:15,230
one<font color="#CCCCCC"> they say hey I want to set all my</font>

765
00:29:12,380 --> 00:29:18,350
user ID all my<font color="#E5E5E5"> D internally to zero</font>

766
00:29:15,230 --> 00:29:22,190
which is representative of the<font color="#E5E5E5"> route ID</font>

767
00:29:18,350 --> 00:29:24,439
in in<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> so if we're</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> this</font>

768
00:29:22,190 --> 00:29:26,600
zero in from the register down to the

769
00:29:24,440 --> 00:29:29,570
<font color="#E5E5E5">writing into the user into the</font>

770
00:29:26,600 --> 00:29:32,480
privileges or<font color="#E5E5E5"> in to identify of the user</font>

771
00:29:29,570 --> 00:29:33,620
then basically<font color="#E5E5E5"> we're done because at</font>

772
00:29:32,480 --> 00:29:36,320
<font color="#E5E5E5">that point that would be always be a</font>

773
00:29:33,620 --> 00:29:38,149
check<font color="#CCCCCC"> hey you're not allowed</font><font color="#E5E5E5"> to call set</font>

774
00:29:36,320 --> 00:29:39,919
yourself to<font color="#E5E5E5"> root because what we are</font>

775
00:29:38,150 --> 00:29:41,830
<font color="#E5E5E5">doing with that system call hey I want</font>

776
00:29:39,920 --> 00:29:44,120
to<font color="#E5E5E5"> set myself two routes now</font><font color="#CCCCCC"> am wrote</font>

777
00:29:41,830 --> 00:29:46,100
this<font color="#E5E5E5"> is something</font><font color="#CCCCCC"> that only root can do</font>

778
00:29:44,120 --> 00:29:48,139
and the user space application<font color="#CCCCCC"> can not</font>

779
00:29:46,100 --> 00:29:50,840
do but this<font color="#E5E5E5"> means that at some</font><font color="#CCCCCC"> point</font>

780
00:29:48,140 --> 00:29:52,730
<font color="#CCCCCC">again there is a check you will be not</font>

781
00:29:50,840 --> 00:29:55,639
allowed to do<font color="#E5E5E5"> that and if we are able to</font>

782
00:29:52,730 --> 00:29:58,190
<font color="#E5E5E5">bypass the check then we are going to</font>

783
00:29:55,640 --> 00:30:01,940
<font color="#E5E5E5">execute shall with system function so</font>

784
00:29:58,190 --> 00:30:04,820
the plan is<font color="#E5E5E5"> okay call that system make</font>

785
00:30:01,940 --> 00:30:07,100
the system call then glitch<font color="#E5E5E5"> during that</font>

786
00:30:04,820 --> 00:30:09,620
time<font color="#CCCCCC"> of just</font><font color="#E5E5E5"> encode trying to hit the</font>

787
00:30:07,100 --> 00:30:13,090
check<font color="#E5E5E5"> that we are actually saying and if</font>

788
00:30:09,620 --> 00:30:15,080
we are able<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> to successful</font>

789
00:30:13,090 --> 00:30:17,389
experiment if you are<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to see the</font>

790
00:30:15,080 --> 00:30:22,520
<font color="#CCCCCC">dash at</font><font color="#E5E5E5"> the end this means that we are</font>

791
00:30:17,390 --> 00:30:24,320
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be successful again this is the</font>

792
00:30:22,520 --> 00:30:27,200
code that we<font color="#E5E5E5"> are going to use as you can</font>

793
00:30:24,320 --> 00:30:28,010
see that all the registers are set to 0

794
00:30:27,200 --> 00:30:31,280
basically

795
00:30:28,010 --> 00:30:33,860
<font color="#E5E5E5">you said miasma volatile part there is a</font>

796
00:30:31,280 --> 00:30:36,410
trigger<font color="#E5E5E5"> hi say hey I'm going</font><font color="#CCCCCC"> to start</font>

797
00:30:33,860 --> 00:30:39,020
then there is a trigger<font color="#E5E5E5"> load we actually</font>

798
00:30:36,410 --> 00:30:41,630
made the system<font color="#E5E5E5"> call and at the end you</font>

799
00:30:39,020 --> 00:30:44,000
say if the return value<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> system</font>

800
00:30:41,630 --> 00:30:47,510
call is<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> which is exactly what we want</font>

801
00:30:44,000 --> 00:30:51,110
then<font color="#CCCCCC"> we call system for spawning a shell</font>

802
00:30:47,510 --> 00:30:53,690
if everything is worker ectly then our

803
00:30:51,110 --> 00:30:56,330
user ID has been set to<font color="#CCCCCC"> zero and this</font>

804
00:30:53,690 --> 00:31:00,530
shell will be spawned as root while we

805
00:30:56,330 --> 00:31:01,179
are not<font color="#E5E5E5"> root initially so this is</font>

806
00:31:00,530 --> 00:31:03,879
actually the

807
00:31:01,180 --> 00:31:06,190
<font color="#CCCCCC">Sperry means that we see again green is</font>

808
00:31:03,880 --> 00:31:08,590
<font color="#E5E5E5">not happening nothing is happening</font>

809
00:31:06,190 --> 00:31:11,530
yellow is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> view set but was it</font><font color="#E5E5E5"> what is</font>

810
00:31:08,590 --> 00:31:14,020
<font color="#E5E5E5">interesting is that those fed points are</font>

811
00:31:11,530 --> 00:31:16,000
always<font color="#CCCCCC"> successful experiments so for</font>

812
00:31:14,020 --> 00:31:18,700
each<font color="#CCCCCC"> of those red point</font><font color="#E5E5E5"> we have been</font>

813
00:31:16,000 --> 00:31:21,520
able<font color="#CCCCCC"> to get a root shell</font><font color="#E5E5E5"> out from a user</font>

814
00:31:18,700 --> 00:31:24,430
space<font color="#E5E5E5"> application</font><font color="#CCCCCC"> only by calling</font><font color="#E5E5E5"> hey</font>

815
00:31:21,520 --> 00:31:26,110
<font color="#CCCCCC">set me to root and</font><font color="#E5E5E5"> bypassing the check</font>

816
00:31:24,430 --> 00:31:31,420
at that point in<font color="#E5E5E5"> time what is</font>

817
00:31:26,110 --> 00:31:33,729
<font color="#E5E5E5">interesting here is</font><font color="#CCCCCC"> that basically we</font>

818
00:31:31,420 --> 00:31:37,660
did<font color="#E5E5E5"> this amount of experiment in 21</font>

819
00:31:33,730 --> 00:31:40,630
hours we see that<font color="#E5E5E5"> within the wind of</font>

820
00:31:37,660 --> 00:31:42,850
time<font color="#E5E5E5"> there is a quite 1.3 percent of</font>

821
00:31:40,630 --> 00:31:45,520
experiment so if we set the glitch delay

822
00:31:42,850 --> 00:31:47,320
once we have found<font color="#E5E5E5"> out there we know</font>

823
00:31:45,520 --> 00:31:49,389
that basically<font color="#E5E5E5"> in five minutes we are</font>

824
00:31:47,320 --> 00:31:51,220
<font color="#E5E5E5">going to get a root shell</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> without a</font>

825
00:31:49,390 --> 00:31:53,680
vulnerability<font color="#E5E5E5"> what is interesting here</font>

826
00:31:51,220 --> 00:31:56,830
<font color="#E5E5E5">is that you don't have a specific</font><font color="#CCCCCC"> point</font>

827
00:31:53,680 --> 00:31:59,860
in time<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> red points are</font><font color="#CCCCCC"> actually</font>

828
00:31:56,830 --> 00:32:01,419
spread across<font color="#E5E5E5"> a large window so this</font>

829
00:31:59,860 --> 00:32:02,919
<font color="#E5E5E5">means that the number</font><font color="#CCCCCC"> of checks are</font>

830
00:32:01,420 --> 00:32:04,630
probably<font color="#E5E5E5"> happening a different point in</font>

831
00:32:02,920 --> 00:32:08,260
time and<font color="#E5E5E5"> if you actually change one of</font>

832
00:32:04,630 --> 00:32:12,220
<font color="#CCCCCC">them or any of them</font><font color="#E5E5E5"> like say a</font><font color="#CCCCCC"> foreign</font>

833
00:32:08,260 --> 00:32:14,230
<font color="#E5E5E5">calling checks this point or then child</font>

834
00:32:12,220 --> 00:32:15,760
being called and<font color="#CCCCCC"> check this this</font>

835
00:32:14,230 --> 00:32:18,370
privilege and all<font color="#E5E5E5"> the strings so that</font>

836
00:32:15,760 --> 00:32:21,100
<font color="#CCCCCC">mean maybe</font><font color="#E5E5E5"> multiple point in time in the</font>

837
00:32:18,370 --> 00:32:25,060
code where<font color="#CCCCCC"> we actually</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> able to</font>

838
00:32:21,100 --> 00:32:29,709
<font color="#E5E5E5">modify the return value to zero likely</font>

839
00:32:25,060 --> 00:32:32,200
and then set this our ID to root so

840
00:32:29,710 --> 00:32:34,540
basically the<font color="#E5E5E5"> summary is that we have a</font>

841
00:32:32,200 --> 00:32:36,550
security<font color="#E5E5E5"> boundary bypass so you have a</font>

842
00:32:34,540 --> 00:32:39,399
user space<font color="#CCCCCC"> application which is able</font><font color="#E5E5E5"> to</font>

843
00:32:36,550 --> 00:32:41,830
acquire or perform action<font color="#E5E5E5"> at the kernel</font>

844
00:32:39,400 --> 00:32:43,810
privilege level which means<font color="#E5E5E5"> here is we</font>

845
00:32:41,830 --> 00:32:47,919
get both full access to kernel memory

846
00:32:43,810 --> 00:32:49,780
<font color="#E5E5E5">also execution of root shell so it is</font>

847
00:32:47,920 --> 00:32:52,240
not depend<font color="#CCCCCC"> on software</font><font color="#E5E5E5"> vulnerabilities</font><font color="#CCCCCC"> I</font>

848
00:32:49,780 --> 00:32:54,550
mean this will work any point in time

849
00:32:52,240 --> 00:32:57,040
<font color="#E5E5E5">any time regardless of the existing</font>

850
00:32:54,550 --> 00:32:58,810
vulnerability in the<font color="#E5E5E5"> software because as</font>

851
00:32:57,040 --> 00:33:01,420
<font color="#E5E5E5">Nick</font><font color="#CCCCCC"> were explaining</font><font color="#E5E5E5"> the vulnerability</font>

852
00:32:58,810 --> 00:33:05,620
lies in the hardware and we are able<font color="#E5E5E5"> to</font>

853
00:33:01,420 --> 00:33:07,630
use the<font color="#CCCCCC"> folds so the changes in actually</font>

854
00:33:05,620 --> 00:33:10,030
execution in the<font color="#CCCCCC"> data</font><font color="#E5E5E5"> or in the software</font>

855
00:33:07,630 --> 00:33:12,910
<font color="#E5E5E5">to</font><font color="#CCCCCC"> our advantages even if we don't</font><font color="#E5E5E5"> know</font>

856
00:33:10,030 --> 00:33:14,800
in<font color="#E5E5E5"> in advance what things we are</font><font color="#CCCCCC"> going</font>

857
00:33:12,910 --> 00:33:16,690
to<font color="#E5E5E5"> change but statistically so</font>

858
00:33:14,800 --> 00:33:19,620
five or<font color="#CCCCCC"> ten minutes</font><font color="#E5E5E5"> we had something</font>

859
00:33:16,690 --> 00:33:24,370
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> useful for</font><font color="#E5E5E5"> the attack</font>

860
00:33:19,620 --> 00:33:27,189
it's important<font color="#E5E5E5"> to realize</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this kind</font>

861
00:33:24,370 --> 00:33:30,340
of<font color="#E5E5E5"> attacks really focuses on</font><font color="#CCCCCC"> specific</font>

862
00:33:27,190 --> 00:33:33,220
point in<font color="#CCCCCC"> time on targets</font><font color="#E5E5E5"> where there is</font>

863
00:33:30,340 --> 00:33:34,990
a check<font color="#E5E5E5"> then you want</font><font color="#CCCCCC"> to show that it in</font>

864
00:33:33,220 --> 00:33:37,780
<font color="#CCCCCC">order to see if you can actually</font><font color="#E5E5E5"> change</font>

865
00:33:34,990 --> 00:33:41,620
that<font color="#CCCCCC"> behavior</font><font color="#E5E5E5"> and this has been a very</font>

866
00:33:37,780 --> 00:33:43,750
<font color="#CCCCCC">say used attacks also in doing so your</font>

867
00:33:41,620 --> 00:33:45,790
<font color="#E5E5E5">boots off in academia this is a model</font>

868
00:33:43,750 --> 00:33:47,320
<font color="#E5E5E5">which is being used the fact</font><font color="#CCCCCC"> that if you</font>

869
00:33:45,790 --> 00:33:49,240
<font color="#E5E5E5">have a check at some point you might</font>

870
00:33:47,320 --> 00:33:51,939
<font color="#CCCCCC">want to duplicate</font><font color="#E5E5E5"> that so that I need to</font>

871
00:33:49,240 --> 00:33:54,220
shoot at two checks<font color="#E5E5E5"> point in</font><font color="#CCCCCC"> 30 40 so it</font>

872
00:33:51,940 --> 00:33:55,900
<font color="#E5E5E5">is more difficult but in our case</font>

873
00:33:54,220 --> 00:33:57,730
basically<font color="#E5E5E5"> we don't even need the source</font>

874
00:33:55,900 --> 00:33:59,950
code<font color="#E5E5E5"> because we don't know even which</font>

875
00:33:57,730 --> 00:34:01,300
check are we actually bypassing because

876
00:33:59,950 --> 00:34:03,460
<font color="#CCCCCC">we</font><font color="#E5E5E5"> are approaching that statistically</font>

877
00:34:01,300 --> 00:34:05,980
you just call you make a number<font color="#CCCCCC"> of</font>

878
00:34:03,460 --> 00:34:08,860
experiment<font color="#E5E5E5"> and after some</font><font color="#CCCCCC"> amount of time</font>

879
00:34:05,980 --> 00:34:11,679
<font color="#E5E5E5">which in our case was</font><font color="#CCCCCC"> a 5 or</font><font color="#E5E5E5"> 10 minutes</font>

880
00:34:08,860 --> 00:34:13,120
<font color="#CCCCCC">we</font><font color="#E5E5E5"> just get exactly what we</font><font color="#CCCCCC"> want so we</font>

881
00:34:11,679 --> 00:34:15,580
<font color="#CCCCCC">don't need the source code for that</font>

882
00:34:13,120 --> 00:34:18,730
<font color="#E5E5E5">although</font><font color="#CCCCCC"> when you actually analyze the</font>

883
00:34:15,580 --> 00:34:20,620
code<font color="#E5E5E5"> for looking at these checks you</font>

884
00:34:18,730 --> 00:34:22,900
make consideration<font color="#E5E5E5"> that specific point</font>

885
00:34:20,620 --> 00:34:24,250
<font color="#E5E5E5">in time but from an action</font><font color="#CCCCCC"> or point of</font>

886
00:34:22,900 --> 00:34:27,190
<font color="#CCCCCC">view from an operational point of</font><font color="#E5E5E5"> view</font>

887
00:34:24,250 --> 00:34:28,900
you<font color="#E5E5E5"> don't need the source code so</font>

888
00:34:27,190 --> 00:34:30,880
basically as I was saying the traditions

889
00:34:28,900 --> 00:34:33,580
of the constant measure do apply because

890
00:34:30,880 --> 00:34:37,780
<font color="#E5E5E5">if you duplicate or</font><font color="#CCCCCC"> triplicate the check</font>

891
00:34:33,580 --> 00:34:40,719
<font color="#E5E5E5">then you have to be much more</font><font color="#CCCCCC"> lucky much</font>

892
00:34:37,780 --> 00:34:42,730
like here in order<font color="#CCCCCC"> to hit those things</font>

893
00:34:40,719 --> 00:34:44,620
at<font color="#E5E5E5"> the point</font><font color="#CCCCCC"> in time especially if you</font>

894
00:34:42,730 --> 00:34:47,560
actually<font color="#E5E5E5"> move randomize them</font><font color="#CCCCCC"> then it</font>

895
00:34:44,620 --> 00:34:49,690
becomes even<font color="#E5E5E5"> more</font><font color="#CCCCCC"> difficult for me to</font>

896
00:34:47,560 --> 00:34:51,429
<font color="#E5E5E5">attack this so all the consideration and</font>

897
00:34:49,690 --> 00:34:53,470
<font color="#CCCCCC">equals making</font><font color="#E5E5E5"> make me for actually</font><font color="#CCCCCC"> fully</font>

898
00:34:51,429 --> 00:34:58,450
apply because<font color="#CCCCCC"> we are to target at one</font>

899
00:34:53,469 --> 00:35:01,330
point<font color="#E5E5E5"> specific in time but there is</font>

900
00:34:58,450 --> 00:35:03,189
something<font color="#E5E5E5"> more here and we think</font><font color="#CCCCCC"> that</font>

901
00:35:01,330 --> 00:35:06,790
<font color="#E5E5E5">could</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> also for</font>

902
00:35:03,190 --> 00:35:11,530
<font color="#CCCCCC">this kind</font><font color="#E5E5E5"> of attacks but let's say one</font>

903
00:35:06,790 --> 00:35:13,330
on one step back so<font color="#E5E5E5"> usually you don't</font>

904
00:35:11,530 --> 00:35:15,580
know what happens<font color="#E5E5E5"> so in order to</font>

905
00:35:13,330 --> 00:35:18,370
research<font color="#E5E5E5"> about fault injection you do a</font>

906
00:35:15,580 --> 00:35:21,190
model<font color="#E5E5E5"> it's called the fault model for</font>

907
00:35:18,370 --> 00:35:24,130
<font color="#CCCCCC">example</font><font color="#E5E5E5"> we assume</font><font color="#CCCCCC"> that this fault might</font>

908
00:35:21,190 --> 00:35:26,110
allow you to skip instruction such as

909
00:35:24,130 --> 00:35:27,700
you have<font color="#E5E5E5"> an if or a check and you</font>

910
00:35:26,110 --> 00:35:28,720
<font color="#CCCCCC">actually skip the</font><font color="#E5E5E5"> destruction not</font>

911
00:35:27,700 --> 00:35:32,049
executing it

912
00:35:28,720 --> 00:35:34,118
or you might<font color="#CCCCCC"> have a situation where your</font>

913
00:35:32,049 --> 00:35:36,970
model<font color="#E5E5E5"> your fault model says</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> perhaps</font>

914
00:35:34,119 --> 00:35:40,210
<font color="#E5E5E5">these a fault injection technique</font>

915
00:35:36,970 --> 00:35:42,399
<font color="#CCCCCC">allowed me to flip some bit rather</font><font color="#E5E5E5"> than</font>

916
00:35:40,210 --> 00:35:45,220
skipping instruction so this means that

917
00:35:42,400 --> 00:35:46,750
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have a way of you start with the</font>

918
00:35:45,220 --> 00:35:50,200
<font color="#CCCCCC">model with something that you think</font><font color="#E5E5E5"> that</font>

919
00:35:46,750 --> 00:35:53,920
<font color="#E5E5E5">might happen and then</font><font color="#CCCCCC"> you use this model</font>

920
00:35:50,200 --> 00:35:55,509
in order<font color="#E5E5E5"> to envision your tax like okay</font>

921
00:35:53,920 --> 00:35:58,480
if this<font color="#E5E5E5"> is what happens at the fault</font>

922
00:35:55,510 --> 00:36:01,240
level how<font color="#E5E5E5"> can I use</font><font color="#CCCCCC"> it for attacking</font>

923
00:35:58,480 --> 00:36:03,849
<font color="#E5E5E5">things if I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that my attack is</font>

924
00:36:01,240 --> 00:36:06,189
<font color="#E5E5E5">making instruction skipping then perhaps</font>

925
00:36:03,849 --> 00:36:09,130
I could look in<font color="#CCCCCC"> the source</font><font color="#E5E5E5"> code where</font>

926
00:36:06,190 --> 00:36:11,950
there is a check<font color="#E5E5E5"> time where this check</font>

927
00:36:09,130 --> 00:36:15,400
is performed and should if I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> that</font>

928
00:36:11,950 --> 00:36:19,240
my attacker<font color="#CCCCCC"> instead attack is able to</font>

929
00:36:15,400 --> 00:36:20,349
flip bits perhaps I might flip data or<font color="#E5E5E5"> a</font>

930
00:36:19,240 --> 00:36:23,410
<font color="#CCCCCC">might change</font>

931
00:36:20,349 --> 00:36:25,780
<font color="#CCCCCC">cryptographic keys or a cryptographic</font>

932
00:36:23,410 --> 00:36:29,109
material so<font color="#E5E5E5"> this means that your fault</font>

933
00:36:25,780 --> 00:36:30,609
model<font color="#CCCCCC"> actually drives you or guides you</font>

934
00:36:29,109 --> 00:36:33,339
in what kind of attacks you want to

935
00:36:30,609 --> 00:36:35,529
perform<font color="#E5E5E5"> so your fault model you think Oh</font>

936
00:36:33,339 --> 00:36:36,700
attacks<font color="#E5E5E5"> if you have think of attacks</font>

937
00:36:35,529 --> 00:36:38,680
<font color="#E5E5E5">then you start</font><font color="#CCCCCC"> thinking about</font>

938
00:36:36,700 --> 00:36:41,140
<font color="#E5E5E5">countermeasure for counter and</font><font color="#CCCCCC"> TT</font>

939
00:36:38,680 --> 00:36:44,500
attacks so basically the fault model

940
00:36:41,140 --> 00:36:46,390
needs<font color="#CCCCCC"> guysyou into attack and in counter</font>

941
00:36:44,500 --> 00:36:48,970
<font color="#CCCCCC">measure</font><font color="#E5E5E5"> the promise that if you don't</font>

942
00:36:46,390 --> 00:36:50,440
have a model<font color="#CCCCCC"> you might have it might</font>

943
00:36:48,970 --> 00:36:53,109
have not<font color="#CCCCCC"> mere assertion</font><font color="#E5E5E5"> yet</font>

944
00:36:50,440 --> 00:36:54,910
and the point that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to</font>

945
00:36:53,109 --> 00:36:56,680
describe<font color="#E5E5E5"> here is that we have a new</font>

946
00:36:54,910 --> 00:36:59,379
fault model instead<font color="#E5E5E5"> of thinking of</font>

947
00:36:56,680 --> 00:37:01,629
instruction skipping and bit flipping we

948
00:36:59,380 --> 00:37:03,640
think of instruction corruption so that

949
00:37:01,630 --> 00:37:06,490
<font color="#CCCCCC">you have an instruction</font><font color="#E5E5E5"> a normal one</font>

950
00:37:03,640 --> 00:37:08,980
<font color="#E5E5E5">basically where you</font><font color="#CCCCCC"> actually flip bits</font>

951
00:37:06,490 --> 00:37:10,000
and you modify the instruction they

952
00:37:08,980 --> 00:37:12,369
actually structure which has<font color="#E5E5E5"> been</font>

953
00:37:10,000 --> 00:37:16,029
executed<font color="#CCCCCC"> you see</font><font color="#E5E5E5"> this example for</font>

954
00:37:12,369 --> 00:37:20,289
example for<font color="#E5E5E5"> MIPS</font><font color="#CCCCCC"> where one bit flip make</font>

955
00:37:16,029 --> 00:37:24,309
the<font color="#E5E5E5"> rd edition goes from</font><font color="#CCCCCC"> adding aids to</font>

956
00:37:20,289 --> 00:37:27,640
the<font color="#E5E5E5"> register t1 to what dig 0 31 so if</font>

957
00:37:24,309 --> 00:37:30,039
in our attack we<font color="#E5E5E5"> are able to</font><font color="#CCCCCC"> flip that</font>

958
00:37:27,640 --> 00:37:33,490
bit then the instruction<font color="#CCCCCC"> actually</font>

959
00:37:30,039 --> 00:37:35,109
changes the one<font color="#E5E5E5"> which is executed of</font>

960
00:37:33,490 --> 00:37:37,419
course we don't<font color="#E5E5E5"> know we cannot control</font>

961
00:37:35,109 --> 00:37:39,910
how<font color="#E5E5E5"> many bits are flipped so in case of</font>

962
00:37:37,420 --> 00:37:41,660
<font color="#E5E5E5">arm might be also possible that</font><font color="#CCCCCC"> mutable</font>

963
00:37:39,910 --> 00:37:44,328
bits are flipped and

964
00:37:41,660 --> 00:37:46,098
<font color="#E5E5E5">waving a</font><font color="#CCCCCC"> modification on the operand you</font>

965
00:37:44,329 --> 00:37:48,079
actually really<font color="#E5E5E5"> change the destruction</font>

966
00:37:46,099 --> 00:37:51,559
<font color="#E5E5E5">so</font><font color="#CCCCCC"> instead you are having</font><font color="#E5E5E5"> the load it</font>

967
00:37:48,079 --> 00:37:53,569
will<font color="#CCCCCC"> turn</font><font color="#E5E5E5"> into store again we don't know</font>

968
00:37:51,559 --> 00:37:57,950
<font color="#E5E5E5">but in our modeling we think that these</font>

969
00:37:53,569 --> 00:38:00,020
things may happen<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> limited</font>

970
00:37:57,950 --> 00:38:03,710
<font color="#E5E5E5">control of which bits will</font><font color="#CCCCCC"> be actually</font>

971
00:38:00,020 --> 00:38:06,230
corrupted<font color="#CCCCCC"> but</font><font color="#E5E5E5"> still this may become</font>

972
00:38:03,710 --> 00:38:07,670
<font color="#E5E5E5">useful if you start</font><font color="#CCCCCC"> thinking about okay</font>

973
00:38:06,230 --> 00:38:11,869
you<font color="#E5E5E5"> have an instruction but I can modify</font>

974
00:38:07,670 --> 00:38:14,089
it<font color="#CCCCCC"> then many</font><font color="#E5E5E5"> things can happen</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> in</font>

975
00:38:11,869 --> 00:38:17,299
mind that this approach is<font color="#CCCCCC"> fault</font><font color="#E5E5E5"> model</font>

976
00:38:14,089 --> 00:38:19,609
also<font color="#CCCCCC"> includes the other models we are</font>

977
00:38:17,299 --> 00:38:23,660
<font color="#CCCCCC">see we been discussing for example</font>

978
00:38:19,609 --> 00:38:25,690
instruction<font color="#E5E5E5"> skipping is where you turn</font>

979
00:38:23,660 --> 00:38:28,460
<font color="#E5E5E5">this structure into something that</font>

980
00:38:25,690 --> 00:38:30,109
<font color="#CCCCCC">basically does nothing else doesn't</font>

981
00:38:28,460 --> 00:38:32,450
affect the system<font color="#E5E5E5"> and just goes to the</font>

982
00:38:30,109 --> 00:38:36,410
next<font color="#CCCCCC"> one so this fault model also</font>

983
00:38:32,450 --> 00:38:38,210
includes<font color="#E5E5E5"> the other one so at this point</font>

984
00:38:36,410 --> 00:38:39,890
we can use though this<font color="#E5E5E5"> fault mode for</font>

985
00:38:38,210 --> 00:38:41,900
envision a<font color="#CCCCCC"> new attack which is a</font>

986
00:38:39,890 --> 00:38:44,150
controlling<font color="#E5E5E5"> directly the program counter</font>

987
00:38:41,900 --> 00:38:46,309
because until this point we've been<font color="#E5E5E5"> just</font>

988
00:38:44,150 --> 00:38:50,240
focusing on point<font color="#E5E5E5"> on checks now I want</font>

989
00:38:46,309 --> 00:38:52,430
to<font color="#E5E5E5"> have PC control</font><font color="#CCCCCC"> experiment</font><font color="#E5E5E5"> in this</font>

990
00:38:50,240 --> 00:38:54,288
case on the arm<font color="#E5E5E5"> 32</font>

991
00:38:52,430 --> 00:38:57,859
that's as an interesting instruction

992
00:38:54,289 --> 00:39:01,309
architecture in<font color="#CCCCCC"> inability to</font><font color="#E5E5E5"> PC is a</font>

993
00:38:57,859 --> 00:39:05,470
register<font color="#E5E5E5"> like the others you can address</font>

994
00:39:01,309 --> 00:39:07,609
<font color="#E5E5E5">it directly so</font><font color="#CCCCCC"> you can see basically any</font>

995
00:39:05,470 --> 00:39:10,069
instruction there as a destination

996
00:39:07,609 --> 00:39:14,569
register they are on the<font color="#E5E5E5"> left</font><font color="#CCCCCC"> basically</font>

997
00:39:10,069 --> 00:39:17,058
which can be potentially corrupted<font color="#E5E5E5"> so</font>

998
00:39:14,569 --> 00:39:20,270
that for<font color="#CCCCCC"> example the</font><font color="#E5E5E5"> first move from R 1</font>

999
00:39:17,059 --> 00:39:22,670
to R<font color="#E5E5E5"> 7 moves the value from R 1 to</font>

1000
00:39:20,270 --> 00:39:24,980
program counter so this means and<font color="#CCCCCC"> what</font>

1001
00:39:22,670 --> 00:39:27,619
was there in inner<font color="#CCCCCC"> 1 goes directly into</font>

1002
00:39:24,980 --> 00:39:30,619
<font color="#E5E5E5">program counter and the next instruction</font>

1003
00:39:27,619 --> 00:39:32,329
is executed from<font color="#CCCCCC"> their address</font><font color="#E5E5E5"> so this</font>

1004
00:39:30,619 --> 00:39:35,329
means<font color="#E5E5E5"> that if</font><font color="#CCCCCC"> you are able to</font><font color="#E5E5E5"> flip that</font>

1005
00:39:32,329 --> 00:39:37,789
bit<font color="#E5E5E5"> what goes in what juicer goes</font>

1006
00:39:35,329 --> 00:39:40,700
directly into PC and your control flow

1007
00:39:37,789 --> 00:39:41,900
is completely done<font color="#E5E5E5"> same goes for the</font>

1008
00:39:40,700 --> 00:39:44,270
<font color="#E5E5E5">other instruction these are still</font>

1009
00:39:41,900 --> 00:39:45,440
example and depends how many<font color="#E5E5E5"> bits you</font>

1010
00:39:44,270 --> 00:39:48,288
can corrupt<font color="#E5E5E5"> so there are many</font>

1011
00:39:45,440 --> 00:39:50,690
<font color="#E5E5E5">possibilities that might lead whatever</font>

1012
00:39:48,289 --> 00:39:54,109
<font color="#CCCCCC">reason to a</font><font color="#E5E5E5"> register</font><font color="#CCCCCC"> to go actually in</font>

1013
00:39:50,690 --> 00:39:56,509
PC rather than<font color="#E5E5E5"> into another</font>

1014
00:39:54,109 --> 00:39:59,299
in the<font color="#E5E5E5"> designated register they intended</font>

1015
00:39:56,509 --> 00:40:01,249
register so<font color="#E5E5E5"> you already are</font><font color="#CCCCCC"> starting to</font>

1016
00:39:59,299 --> 00:40:04,150
see<font color="#E5E5E5"> that with this model we can envision</font>

1017
00:40:01,249 --> 00:40:07,129
attacks where the program<font color="#CCCCCC"> counter is</font>

1018
00:40:04,150 --> 00:40:09,949
completely set to the value<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> want</font>

1019
00:40:07,130 --> 00:40:11,449
if we<font color="#E5E5E5"> are able</font><font color="#CCCCCC"> to set those register of</font>

1020
00:40:09,949 --> 00:40:13,670
course the objection<font color="#E5E5E5"> could be well the</font>

1021
00:40:11,449 --> 00:40:18,829
program<font color="#E5E5E5"> counter</font><font color="#CCCCCC"> is accessible or</font><font color="#E5E5E5"> in our</font>

1022
00:40:13,670 --> 00:40:21,559
<font color="#E5E5E5">32 yes but we both know</font><font color="#CCCCCC"> that the Amin</font>

1023
00:40:18,829 --> 00:40:23,630
control of<font color="#CCCCCC"> stop of stack pointer is</font>

1024
00:40:21,559 --> 00:40:25,400
basically the same nowadays<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> get</font>

1025
00:40:23,630 --> 00:40:27,349
control<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that then there are a bunch</font>

1026
00:40:25,400 --> 00:40:29,209
<font color="#CCCCCC">of</font><font color="#E5E5E5"> techniques so this means that this is</font>

1027
00:40:27,349 --> 00:40:31,309
<font color="#E5E5E5">more that it might be effective while we</font>

1028
00:40:29,209 --> 00:40:33,379
demonstrate<font color="#CCCCCC"> that in only in</font><font color="#E5E5E5"> PC we can be</font>

1029
00:40:31,309 --> 00:40:36,589
effective<font color="#CCCCCC"> also in many other</font>

1030
00:40:33,380 --> 00:40:38,930
architecture and not<font color="#CCCCCC"> only arm</font><font color="#E5E5E5"> so what we</font>

1031
00:40:36,589 --> 00:40:40,849
are going to<font color="#E5E5E5"> do we set all the register</font>

1032
00:40:38,930 --> 00:40:43,069
to a specific value before<font color="#CCCCCC"> doing our</font>

1033
00:40:40,849 --> 00:40:45,979
<font color="#E5E5E5">Cove because that's for example</font><font color="#CCCCCC"> that</font>

1034
00:40:43,069 --> 00:40:50,119
address then we execute random system

1035
00:40:45,979 --> 00:40:52,519
<font color="#CCCCCC">call and we shoot a glitch in order that</font>

1036
00:40:50,119 --> 00:40:55,579
<font color="#E5E5E5">that value goes into the Brahman counter</font>

1037
00:40:52,519 --> 00:40:57,410
and if we are fine with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we are</font>

1038
00:40:55,579 --> 00:40:59,299
<font color="#E5E5E5">going to have the control flow</font><font color="#CCCCCC"> I checked</font>

1039
00:40:57,410 --> 00:41:01,249
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> see the in</font>

1040
00:40:59,299 --> 00:41:03,079
sensation<font color="#E5E5E5"> that before was done with</font><font color="#CCCCCC"> zero</font>

1041
00:41:01,249 --> 00:41:06,140
now<font color="#CCCCCC"> is</font><font color="#E5E5E5"> done with the address that</font><font color="#CCCCCC"> we</font>

1042
00:41:03,079 --> 00:41:08,029
want<font color="#E5E5E5"> to reach and at some point we just</font>

1043
00:41:06,140 --> 00:41:10,339
<font color="#E5E5E5">say okay we don't know which system</font><font color="#CCCCCC"> code</font>

1044
00:41:08,029 --> 00:41:12,229
we call all<font color="#CCCCCC"> of them randomly</font><font color="#E5E5E5"> but we</font>

1045
00:41:10,339 --> 00:41:15,469
found out that<font color="#CCCCCC"> some some are more</font>

1046
00:41:12,229 --> 00:41:17,538
resilient<font color="#CCCCCC"> into reproducing faults and</font>

1047
00:41:15,469 --> 00:41:19,489
then we<font color="#CCCCCC"> actually focused mostly on</font><font color="#E5E5E5"> their</font>

1048
00:41:17,539 --> 00:41:21,289
which does not mean that the<font color="#CCCCCC"> other one</font>

1049
00:41:19,489 --> 00:41:23,900
are not<font color="#E5E5E5"> vulnerable</font><font color="#CCCCCC"> just that this one</font>

1050
00:41:21,289 --> 00:41:27,679
yielded more results<font color="#E5E5E5"> better results</font>

1051
00:41:23,900 --> 00:41:30,979
again what you see green not interesting

1052
00:41:27,679 --> 00:41:33,619
as well as<font color="#CCCCCC"> yellow but every point in</font>

1053
00:41:30,979 --> 00:41:36,499
time<font color="#E5E5E5"> every point a red point there is a</font>

1054
00:41:33,619 --> 00:41:39,400
situation where we have been able to get

1055
00:41:36,499 --> 00:41:43,939
<font color="#CCCCCC">control of the problem counter fully</font>

1056
00:41:39,400 --> 00:41:47,059
remarks<font color="#E5E5E5"> we made this 12k experiment in</font>

1057
00:41:43,939 --> 00:41:49,759
14 hours<font color="#CCCCCC"> the well point is that in</font>

1058
00:41:47,059 --> 00:41:53,329
regain control of kernel space from

1059
00:41:49,759 --> 00:41:54,979
encounter every<font color="#E5E5E5"> 10 minutes which can be</font>

1060
00:41:53,329 --> 00:41:59,119
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> we are going to have a</font>

1061
00:41:54,979 --> 00:42:00,348
video<font color="#E5E5E5"> demonstration now well at least</font>

1062
00:41:59,119 --> 00:42:04,009
this time<font color="#CCCCCC"> you don't have</font><font color="#E5E5E5"> to worry about</font>

1063
00:42:00,349 --> 00:42:06,400
<font color="#E5E5E5">the demo not working so basically this</font>

1064
00:42:04,009 --> 00:42:08,380
<font color="#E5E5E5">video shows</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> setup</font>

1065
00:42:06,400 --> 00:42:10,089
that they usually bring along

1066
00:42:08,380 --> 00:42:11,710
<font color="#CCCCCC">unfortunately don't have it this time</font>

1067
00:42:10,089 --> 00:42:13,480
as you<font color="#E5E5E5"> can see it's a bit it's the same</font>

1068
00:42:11,710 --> 00:42:18,010
setup as<font color="#E5E5E5"> to show before</font><font color="#CCCCCC"> but it's a bit</font>

1069
00:42:13,480 --> 00:42:20,170
morning so important part is<font color="#CCCCCC"> that this</font>

1070
00:42:18,010 --> 00:42:22,480
<font color="#E5E5E5">is the actual</font><font color="#CCCCCC"> target very injecting it's</font>

1071
00:42:20,170 --> 00:42:23,980
<font color="#CCCCCC">SMS older our glitching equipment</font>

1072
00:42:22,480 --> 00:42:25,690
directly<font color="#E5E5E5"> on the PC because</font><font color="#CCCCCC"> you want to</font>

1073
00:42:23,980 --> 00:42:27,579
<font color="#E5E5E5">keep the cables as short as</font><font color="#CCCCCC"> possible</font>

1074
00:42:25,690 --> 00:42:30,099
the other things<font color="#CCCCCC"> that were shown before</font>

1075
00:42:27,579 --> 00:42:31,660
are just some things to reset the target

1076
00:42:30,099 --> 00:42:35,589
or to communicate<font color="#CCCCCC"> the target they're not</font>

1077
00:42:31,660 --> 00:42:36,759
that important after<font color="#CCCCCC"> the</font><font color="#E5E5E5"> talk we can</font>

1078
00:42:35,589 --> 00:42:39,400
talk<font color="#CCCCCC"> a little bit more about how we</font>

1079
00:42:36,760 --> 00:42:40,930
<font color="#CCCCCC">create this setup</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is just an</font>

1080
00:42:39,400 --> 00:42:43,869
oscilloscope that<font color="#E5E5E5"> provides us some</font>

1081
00:42:40,930 --> 00:42:46,960
<font color="#CCCCCC">feedback</font><font color="#E5E5E5"> about trigger and the moment we</font>

1082
00:42:43,869 --> 00:42:48,369
inject the glitch now we're over to our

1083
00:42:46,960 --> 00:42:50,380
<font color="#E5E5E5">little workstation and basically we</font>

1084
00:42:48,369 --> 00:42:54,039
control the glacier and the target from

1085
00:42:50,380 --> 00:42:56,890
<font color="#E5E5E5">Python it's quite convenient and quite</font>

1086
00:42:54,039 --> 00:42:58,869
flexible<font color="#E5E5E5"> and the idea here</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we</font>

1087
00:42:56,890 --> 00:43:00,368
<font color="#CCCCCC">are first going to reset the target into</font>

1088
00:42:58,869 --> 00:43:02,079
<font color="#CCCCCC">a known state and you see that</font><font color="#E5E5E5"> happening</font>

1089
00:43:00,369 --> 00:43:03,819
<font color="#CCCCCC">now so these numbers they</font><font color="#E5E5E5"> actually</font>

1090
00:43:02,079 --> 00:43:07,299
denote the things that are printed

1091
00:43:03,819 --> 00:43:08,950
<font color="#CCCCCC">during boot</font><font color="#E5E5E5"> on the serial</font><font color="#CCCCCC"> interface and</font>

1092
00:43:07,299 --> 00:43:11,559
after it's<font color="#E5E5E5"> fully booted it will take a</font>

1093
00:43:08,950 --> 00:43:15,430
while<font color="#E5E5E5"> let's say 30 seconds we actually</font>

1094
00:43:11,559 --> 00:43:17,470
start<font color="#E5E5E5"> the experiments and what we're</font>

1095
00:43:15,430 --> 00:43:22,779
actually<font color="#CCCCCC"> doing here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> we'll wait</font><font color="#E5E5E5"> until</font>

1096
00:43:17,470 --> 00:43:24,848
drops into a reset so to quickly

1097
00:43:22,779 --> 00:43:27,940
introduce<font color="#E5E5E5"> what's going on here so this</font>

1098
00:43:24,849 --> 00:43:29,980
<font color="#E5E5E5">is just whatever you would type in Linux</font>

1099
00:43:27,940 --> 00:43:31,960
so this is the linux shell and then this

1100
00:43:29,980 --> 00:43:33,789
is some<font color="#E5E5E5"> metadata of</font><font color="#CCCCCC"> the experiments or</font>

1101
00:43:31,960 --> 00:43:35,559
the experiment<font color="#CCCCCC"> number</font><font color="#E5E5E5"> the length of the</font>

1102
00:43:33,789 --> 00:43:37,329
glitch the moment in time English and

1103
00:43:35,559 --> 00:43:40,630
the glitch physicists<font color="#CCCCCC"> or the greys</font>

1104
00:43:37,329 --> 00:43:42,190
<font color="#E5E5E5">folders we fix both the length and the</font>

1105
00:43:40,630 --> 00:43:44,140
moment in time winglets<font color="#E5E5E5"> because it</font>

1106
00:43:42,190 --> 00:43:47,579
generates good<font color="#CCCCCC"> results</font><font color="#E5E5E5"> and we only</font>

1107
00:43:44,140 --> 00:43:53,308
slightly<font color="#E5E5E5"> increase the glitch voltage and</font>

1108
00:43:47,579 --> 00:43:53,309
then what we'll see happening

1109
00:44:00,790 --> 00:44:05,060
so whenever we're lucky<font color="#E5E5E5"> something</font>

1110
00:44:03,110 --> 00:44:08,450
special will happen<font color="#E5E5E5"> and one of the</font>

1111
00:44:05,060 --> 00:44:12,650
things that can<font color="#E5E5E5"> happen is something like</font>

1112
00:44:08,450 --> 00:44:14,029
this do<font color="#E5E5E5"> it a little bit so what we see</font>

1113
00:44:12,650 --> 00:44:15,860
<font color="#CCCCCC">here that</font><font color="#E5E5E5"> something went wrong somehow</font>

1114
00:44:14,030 --> 00:44:17,570
an exception control but<font color="#E5E5E5"> what you see</font><font color="#CCCCCC"> is</font>

1115
00:44:15,860 --> 00:44:19,220
that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> pc is set to</font><font color="#E5E5E5"> zero with by</font>

1116
00:44:17,570 --> 00:44:21,620
itself<font color="#E5E5E5"> the interesting we see the</font>

1117
00:44:19,220 --> 00:44:24,379
residue<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the special address in the</font>

1118
00:44:21,620 --> 00:44:26,600
registers<font color="#E5E5E5"> and we actually see not sure</font>

1119
00:44:24,380 --> 00:44:30,140
where it<font color="#E5E5E5"> is here that</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> in kernel</font>

1120
00:44:26,600 --> 00:44:34,270
mode<font color="#CCCCCC"> and if we're very lucky we</font><font color="#E5E5E5"> actually</font>

1121
00:44:30,140 --> 00:44:38,089
get what we're<font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> and I will</font>

1122
00:44:34,270 --> 00:44:41,000
move it<font color="#E5E5E5"> forward so you see another</font>

1123
00:44:38,090 --> 00:44:44,210
exception another<font color="#E5E5E5"> exception another</font>

1124
00:44:41,000 --> 00:44:45,470
<font color="#E5E5E5">exception another</font><font color="#CCCCCC"> exception and then</font>

1125
00:44:44,210 --> 00:44:48,770
<font color="#E5E5E5">BOOM and this is what we're</font><font color="#CCCCCC"> looking for</font>

1126
00:44:45,470 --> 00:44:50,660
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that you can see that the PC counter</font>

1127
00:44:48,770 --> 00:44:52,700
the PC<font color="#E5E5E5"> register actually</font><font color="#CCCCCC"> said to the</font>

1128
00:44:50,660 --> 00:44:54,140
actual value the<font color="#E5E5E5"> hazard</font><font color="#CCCCCC"> you still there</font>

1129
00:44:52,700 --> 00:44:56,299
and we see that there in kernel<font color="#CCCCCC"> mode so</font>

1130
00:44:54,140 --> 00:44:59,029
this<font color="#E5E5E5"> is successfully hijacking the</font>

1131
00:44:56,300 --> 00:45:06,800
control flow once the kernel is

1132
00:44:59,030 --> 00:45:08,570
executing yeah yeah<font color="#CCCCCC"> so I've seen the</font>

1133
00:45:06,800 --> 00:45:10,460
video<font color="#CCCCCC"> is a less</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> five minutes</font><font color="#E5E5E5"> long</font>

1134
00:45:08,570 --> 00:45:12,860
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is actually real experiment that</font>

1135
00:45:10,460 --> 00:45:14,450
<font color="#E5E5E5">was that we</font><font color="#CCCCCC"> actually just went and in</font>

1136
00:45:12,860 --> 00:45:16,490
<font color="#E5E5E5">five minutes we got the PC set to</font>

1137
00:45:14,450 --> 00:45:18,410
<font color="#CCCCCC">whatever we want so the summary</font><font color="#E5E5E5"> is that</font>

1138
00:45:16,490 --> 00:45:20,810
<font color="#E5E5E5">we got again as a unit boundary of us</font>

1139
00:45:18,410 --> 00:45:22,580
but<font color="#E5E5E5"> this time we had code execution and</font>

1140
00:45:20,810 --> 00:45:24,860
it is<font color="#E5E5E5"> really the interesting part the</font>

1141
00:45:22,580 --> 00:45:27,620
<font color="#CCCCCC">reason is that</font><font color="#E5E5E5"> before I say</font><font color="#CCCCCC"> that</font>

1142
00:45:24,860 --> 00:45:30,800
previous models<font color="#E5E5E5"> focus adonis</font><font color="#CCCCCC"> by passing</font>

1143
00:45:27,620 --> 00:45:32,900
checks and or flipping bits<font color="#CCCCCC"> and this is</font>

1144
00:45:30,800 --> 00:45:35,360
the first fault model instead allows<font color="#CCCCCC"> you</font>

1145
00:45:32,900 --> 00:45:38,000
to use<font color="#E5E5E5"> fault injection for directly gain</font>

1146
00:45:35,360 --> 00:45:39,710
code execution<font color="#CCCCCC"> i cannot depend on self</font>

1147
00:45:38,000 --> 00:45:42,590
<font color="#CCCCCC">amoun abilities and what is it really</font>

1148
00:45:39,710 --> 00:45:45,410
interesting here is that<font color="#E5E5E5"> any instruction</font>

1149
00:45:42,590 --> 00:45:48,670
can<font color="#CCCCCC"> be a target you don't</font><font color="#E5E5E5"> need to have a</font>

1150
00:45:45,410 --> 00:45:52,549
check<font color="#E5E5E5"> to target for your fault any</font>

1151
00:45:48,670 --> 00:45:55,010
instruction can be vulnerable or can

1152
00:45:52,550 --> 00:45:57,580
allow you to<font color="#E5E5E5"> use the vulnerability in</font>

1153
00:45:55,010 --> 00:46:00,050
<font color="#CCCCCC">the harbor</font><font color="#E5E5E5"> and this makes things quite</font>

1154
00:45:57,580 --> 00:46:01,910
different<font color="#E5E5E5"> which makes</font><font color="#CCCCCC"> it a deserter</font>

1155
00:46:00,050 --> 00:46:04,220
quite so special<font color="#CCCCCC"> because at first</font><font color="#E5E5E5"> you</font>

1156
00:46:01,910 --> 00:46:06,890
<font color="#CCCCCC">need</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> one successful fault and</font>

1157
00:46:04,220 --> 00:46:08,810
then you get control<font color="#E5E5E5"> you get kernel</font>

1158
00:46:06,890 --> 00:46:10,640
level<font color="#E5E5E5"> control you have a security</font>

1159
00:46:08,810 --> 00:46:12,549
boundaries in our case was<font color="#CCCCCC"> ten minutes</font>

1160
00:46:10,640 --> 00:46:15,500
<font color="#CCCCCC">five</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> minutes</font>

1161
00:46:12,550 --> 00:46:17,630
it is global because<font color="#E5E5E5"> you need to protect</font>

1162
00:46:15,500 --> 00:46:20,180
<font color="#E5E5E5">one instruction is basically the full</font>

1163
00:46:17,630 --> 00:46:21,860
instruction space and execution it needs

1164
00:46:20,180 --> 00:46:23,980
to be<font color="#CCCCCC"> protected and this</font><font color="#E5E5E5"> makes this very</font>

1165
00:46:21,860 --> 00:46:26,060
<font color="#CCCCCC">difficult to protect</font><font color="#E5E5E5"> against this attack</font>

1166
00:46:23,980 --> 00:46:27,680
<font color="#E5E5E5">because any structure on it can be</font>

1167
00:46:26,060 --> 00:46:29,750
executed<font color="#E5E5E5"> as soon as you change</font><font color="#CCCCCC"> the</font>

1168
00:46:27,680 --> 00:46:31,850
<font color="#CCCCCC">destination register a the two stack</font>

1169
00:46:29,750 --> 00:46:34,610
pointer<font color="#E5E5E5"> or the program counter</font><font color="#CCCCCC"> and</font>

1170
00:46:31,850 --> 00:46:36,860
that's<font color="#E5E5E5"> already</font><font color="#CCCCCC"> almost</font><font color="#E5E5E5"> or already</font><font color="#CCCCCC"> game</font>

1171
00:46:34,610 --> 00:46:39,410
over well the software<font color="#CCCCCC"> control is</font>

1172
00:46:36,860 --> 00:46:41,690
achieved<font color="#E5E5E5"> immediately it's not that</font>

1173
00:46:39,410 --> 00:46:44,899
<font color="#E5E5E5">basically there is some step in between</font>

1174
00:46:41,690 --> 00:46:47,780
<font color="#E5E5E5">that one immediately gives you control</font>

1175
00:46:44,900 --> 00:46:49,700
from that glitch point in time you load

1176
00:46:47,780 --> 00:46:51,290
whatever<font color="#E5E5E5"> you want from the register and</font>

1177
00:46:49,700 --> 00:46:54,109
<font color="#E5E5E5">they will go exactly in the register</font>

1178
00:46:51,290 --> 00:46:56,120
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want it's powerful because it</font>

1179
00:46:54,110 --> 00:46:58,430
works<font color="#E5E5E5"> across Europe and boundaries and</font>

1180
00:46:56,120 --> 00:47:01,130
<font color="#E5E5E5">is unpredictable</font><font color="#CCCCCC"> basically we are</font>

1181
00:46:58,430 --> 00:47:04,640
creating execution primitives<font color="#CCCCCC"> out of</font>

1182
00:47:01,130 --> 00:47:06,770
thin air<font color="#E5E5E5"> so we have a data primitives</font>

1183
00:47:04,640 --> 00:47:09,890
<font color="#E5E5E5">like a load or a store</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will be</font>

1184
00:47:06,770 --> 00:47:12,050
turned<font color="#E5E5E5"> into an execution primitive just</font>

1185
00:47:09,890 --> 00:47:14,960
because the<font color="#CCCCCC"> destination register now is</font>

1186
00:47:12,050 --> 00:47:16,570
program counter or SP and it is

1187
00:47:14,960 --> 00:47:20,210
something which we think is<font color="#E5E5E5"> really</font>

1188
00:47:16,570 --> 00:47:21,920
<font color="#CCCCCC">innovative</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> what we are doing now to</font>

1189
00:47:20,210 --> 00:47:23,990
<font color="#CCCCCC">impac</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> arbor fault injection</font>

1190
00:47:21,920 --> 00:47:26,660
control<font color="#CCCCCC"> measure are fully applicable so</font>

1191
00:47:23,990 --> 00:47:29,029
they work if you<font color="#E5E5E5"> are able to prevent the</font>

1192
00:47:26,660 --> 00:47:30,740
witch<font color="#CCCCCC"> being ejected</font><font color="#E5E5E5"> fine but the</font>

1193
00:47:29,030 --> 00:47:32,810
<font color="#E5E5E5">software countermeasures are likely not</font>

1194
00:47:30,740 --> 00:47:34,819
executed because they are<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> after</font>

1195
00:47:32,810 --> 00:47:36,470
the glitch<font color="#E5E5E5"> but we get control</font><font color="#CCCCCC"> of</font>

1196
00:47:34,820 --> 00:47:39,560
software immediately so they are<font color="#CCCCCC"> not</font>

1197
00:47:36,470 --> 00:47:41,959
executed by completely bypassed<font color="#E5E5E5"> and even</font>

1198
00:47:39,560 --> 00:47:43,610
if you protect<font color="#E5E5E5"> one piece of code we have</font>

1199
00:47:41,960 --> 00:47:45,860
all solved the other instruction that

1200
00:47:43,610 --> 00:47:47,600
<font color="#E5E5E5">are running</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> it can be target and</font>

1201
00:47:45,860 --> 00:47:49,850
this makes<font color="#E5E5E5"> that also difficult</font>

1202
00:47:47,600 --> 00:47:52,970
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> ratio</font><font color="#E5E5E5"> software</font><font color="#CCCCCC"> countermeasure is</font>

1203
00:47:49,850 --> 00:47:54,319
effective but what may work is<font color="#CCCCCC"> about</font>

1204
00:47:52,970 --> 00:47:57,470
something<font color="#CCCCCC"> that you actually know very</font>

1205
00:47:54,320 --> 00:48:00,440
<font color="#E5E5E5">well we</font><font color="#CCCCCC"> shall exploit mitigation the one</font>

1206
00:47:57,470 --> 00:48:04,279
that actually<font color="#E5E5E5"> limits the</font><font color="#CCCCCC"> usage of an IDE</font>

1207
00:48:00,440 --> 00:48:07,760
<font color="#CCCCCC">jekt control flow for example</font><font color="#E5E5E5"> a SLR or</font>

1208
00:48:04,280 --> 00:48:08,030
any non-executable memory or things like

1209
00:48:07,760 --> 00:48:10,490
<font color="#E5E5E5">that</font>

1210
00:48:08,030 --> 00:48:12,530
<font color="#E5E5E5">control flow integrity all these things</font>

1211
00:48:10,490 --> 00:48:14,959
<font color="#E5E5E5">that prevent the</font><font color="#CCCCCC"> usage of a Jagga</font>

1212
00:48:12,530 --> 00:48:17,060
control flow then they will work because

1213
00:48:14,960 --> 00:48:18,470
<font color="#E5E5E5">we get controlled in a different way but</font>

1214
00:48:17,060 --> 00:48:20,720
because<font color="#CCCCCC"> we got</font><font color="#E5E5E5"> control in a different</font>

1215
00:48:18,470 --> 00:48:23,319
way all<font color="#E5E5E5"> protection that prevent the</font>

1216
00:48:20,720 --> 00:48:25,509
<font color="#CCCCCC">ejecting</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> DBC</font><font color="#E5E5E5"> or exploitation</font>

1217
00:48:23,320 --> 00:48:26,589
<font color="#CCCCCC">disposition</font><font color="#E5E5E5"> they will not work</font><font color="#CCCCCC"> stuck</font>

1218
00:48:25,509 --> 00:48:28,419
cookies for<font color="#E5E5E5"> example would</font><font color="#CCCCCC"> not be</font>

1219
00:48:26,589 --> 00:48:31,808
relevant<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and not even other things</font>

1220
00:48:28,419 --> 00:48:34,199
<font color="#CCCCCC">that prevent the</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> jacking</font><font color="#E5E5E5"> but only that</font>

1221
00:48:31,809 --> 00:48:37,719
limits the<font color="#E5E5E5"> a jegging that will work</font>

1222
00:48:34,199 --> 00:48:40,089
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> going to finish our presentation</font>

1223
00:48:37,719 --> 00:48:41,499
by saying that these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> touch friends</font>

1224
00:48:40,089 --> 00:48:43,929
from fault injection are actually

1225
00:48:41,499 --> 00:48:46,238
<font color="#CCCCCC">reaching a wider audience the hippie</font>

1226
00:48:43,929 --> 00:48:48,939
<font color="#CCCCCC">needs become more accessible</font><font color="#E5E5E5"> research is</font>

1227
00:48:46,239 --> 00:48:50,709
increasing but also the techniques that

1228
00:48:48,939 --> 00:48:53,109
we are discussing you're allowed to

1229
00:48:50,709 --> 00:48:55,209
completely subvert software security

1230
00:48:53,109 --> 00:48:58,749
boundaries which seems to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> completely</font>

1231
00:48:55,209 --> 00:49:00,658
secure from a software point of view the

1232
00:48:58,749 --> 00:49:02,769
currently<font color="#E5E5E5"> used</font><font color="#CCCCCC"> the fault injection</font>

1233
00:49:00,659 --> 00:49:05,019
countermeasure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are devised by the</font>

1234
00:49:02,769 --> 00:49:06,428
academia or in<font color="#CCCCCC"> general at least from a</font>

1235
00:49:05,019 --> 00:49:09,189
software point of view the software

1236
00:49:06,429 --> 00:49:11,949
<font color="#E5E5E5">based one are not effective or most</font>

1237
00:49:09,189 --> 00:49:14,019
insufficient and the point is<font color="#E5E5E5"> that the</font>

1238
00:49:11,949 --> 00:49:16,630
fault injection attacks<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be cheaper</font>

1239
00:49:14,019 --> 00:49:18,308
than<font color="#CCCCCC"> a software exploit we may arrive at</font>

1240
00:49:16,630 --> 00:49:21,569
<font color="#E5E5E5">a point where based instead of spending</font>

1241
00:49:18,309 --> 00:49:24,609
50k<font color="#CCCCCC"> for a software</font>

1242
00:49:21,569 --> 00:49:27,819
<font color="#CCCCCC">kernel for a kernel exploit you might</font>

1243
00:49:24,609 --> 00:49:30,759
decide just to spend<font color="#CCCCCC"> 2k and just go for</font>

1244
00:49:27,819 --> 00:49:32,889
<font color="#CCCCCC">it and</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> happens</font><font color="#CCCCCC"> so the point is</font>

1245
00:49:30,759 --> 00:49:35,139
<font color="#E5E5E5">that if you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to improve products</font>

1246
00:49:32,889 --> 00:49:37,679
start including fault injection attacks

1247
00:49:35,139 --> 00:49:40,419
in your threat<font color="#CCCCCC"> model from the start and</font>

1248
00:49:37,679 --> 00:49:41,979
start<font color="#CCCCCC"> working</font><font color="#E5E5E5"> on the resistant hardware</font>

1249
00:49:40,419 --> 00:49:43,649
<font color="#E5E5E5">because production</font><font color="#CCCCCC"> software might be</font>

1250
00:49:41,979 --> 00:49:45,968
either difficult<font color="#CCCCCC"> or not even possible</font>

1251
00:49:43,649 --> 00:49:47,769
<font color="#CCCCCC">pests because</font><font color="#E5E5E5"> that's the only</font><font color="#CCCCCC"> way that</font>

1252
00:49:45,969 --> 00:49:49,509
you can<font color="#CCCCCC"> only</font><font color="#E5E5E5"> find vulnerabilities on</font>

1253
00:49:47,769 --> 00:49:52,988
fault injection you're not by looking<font color="#CCCCCC"> at</font>

1254
00:49:49,509 --> 00:49:54,519
source code<font color="#CCCCCC"> or a design and use strong</font>

1255
00:49:52,989 --> 00:49:56,529
exploit<font color="#CCCCCC"> medication because</font><font color="#E5E5E5"> it will work</font>

1256
00:49:54,519 --> 00:49:59,499
also<font color="#E5E5E5"> for</font><font color="#CCCCCC"> this so for some class of</font><font color="#E5E5E5"> this</font>

1257
00:49:56,529 --> 00:50:02,829
attack<font color="#E5E5E5"> or take your assets and put them</font>

1258
00:49:59,499 --> 00:50:05,198
in<font color="#CCCCCC"> only hard or impurity off and make</font>

1259
00:50:02,829 --> 00:50:08,289
<font color="#E5E5E5">that stronger and don't rely on</font><font color="#CCCCCC"> software</font>

1260
00:50:05,199 --> 00:50:10,419
<font color="#E5E5E5">but still that's something that we all</font>

1261
00:50:08,289 --> 00:50:13,029
know that<font color="#CCCCCC"> is needed so the conclusion</font>

1262
00:50:10,419 --> 00:50:14,979
here<font color="#CCCCCC"> is that footage lectures that</font>

1263
00:50:13,029 --> 00:50:18,759
<font color="#CCCCCC">attacks are coming</font><font color="#E5E5E5"> to the masses and</font>

1264
00:50:14,979 --> 00:50:19,959
they will not go away then the<font color="#CCCCCC"> condition</font>

1265
00:50:18,759 --> 00:50:21,579
<font color="#CCCCCC">is observed all the</font><font color="#E5E5E5"> software security</font>

1266
00:50:19,959 --> 00:50:25,089
<font color="#CCCCCC">models that we've been thinking and</font>

1267
00:50:21,579 --> 00:50:27,880
studying<font color="#E5E5E5"> until known for long and mainly</font>

1268
00:50:25,089 --> 00:50:29,649
<font color="#E5E5E5">any impurity device is vulnerable so</font>

1269
00:50:27,880 --> 00:50:31,479
factor in control<font color="#CCCCCC"> measure</font><font color="#E5E5E5"> from the start</font>

1270
00:50:29,649 --> 00:50:37,409
if you<font color="#CCCCCC"> don't have control</font><font color="#E5E5E5"> measure it is</font>

1271
00:50:31,479 --> 00:50:37,408
<font color="#E5E5E5">vulnerable</font><font color="#CCCCCC"> to mitigate thank</font><font color="#E5E5E5"> you</font>

1272
00:50:40,660 --> 00:50:46,430
so we probably only<font color="#E5E5E5"> have time for like</font>

1273
00:50:43,460 --> 00:50:49,460
one question<font color="#E5E5E5"> so raise</font><font color="#CCCCCC"> your hand if you</font>

1274
00:50:46,430 --> 00:50:50,808
want<font color="#CCCCCC"> to be that</font><font color="#E5E5E5"> one question and</font><font color="#CCCCCC"> and</font>

1275
00:50:49,460 --> 00:50:52,490
here are some underscore is<font color="#CCCCCC"> not a</font>

1276
00:50:50,809 --> 00:50:59,990
security boundary stickers for great

1277
00:50:52,490 --> 00:51:02,240
thank you hi thanks<font color="#E5E5E5"> for giving your talk</font>

1278
00:50:59,990 --> 00:51:04,430
<font color="#E5E5E5">by the</font><font color="#CCCCCC"> way so I</font><font color="#E5E5E5"> just had one quick</font>

1279
00:51:02,240 --> 00:51:05,930
question<font color="#CCCCCC"> I'm wondering if you have any</font>

1280
00:51:04,430 --> 00:51:08,240
<font color="#CCCCCC">recommendations to make</font><font color="#E5E5E5"> sure that a</font>

1281
00:51:05,930 --> 00:51:10,368
fault is injected at a correct time on

1282
00:51:08,240 --> 00:51:12,229
systems which don't have trivial<font color="#CCCCCC"> outputs</font>

1283
00:51:10,369 --> 00:51:14,240
such as like a GPO that goes high when

1284
00:51:12,230 --> 00:51:20,390
you need to<font color="#E5E5E5"> exploit something here</font><font color="#CCCCCC"> isn't</font>

1285
00:51:14,240 --> 00:51:22,839
<font color="#CCCCCC">it so that's that's</font><font color="#E5E5E5"> the typical problem</font>

1286
00:51:20,390 --> 00:51:24,828
we're facing because for example<font color="#CCCCCC"> for the</font>

1287
00:51:22,839 --> 00:51:26,599
examples introduced in the<font color="#E5E5E5"> beginning</font>

1288
00:51:24,829 --> 00:51:28,730
<font color="#CCCCCC">where</font><font color="#E5E5E5"> they target systems doing boot</font>

1289
00:51:26,599 --> 00:51:30,920
<font color="#E5E5E5">typically secure systems during boot</font>

1290
00:51:28,730 --> 00:51:33,289
don't print anything<font color="#E5E5E5"> so I never</font>

1291
00:51:30,920 --> 00:51:34,970
<font color="#E5E5E5">definitely</font><font color="#CCCCCC"> may</font><font color="#E5E5E5"> not be a GPL signal going</font>

1292
00:51:33,289 --> 00:51:36,589
<font color="#E5E5E5">up and definitely you will</font><font color="#CCCCCC"> not have the</font>

1293
00:51:34,970 --> 00:51:39,589
capabilities to<font color="#E5E5E5"> actually run your</font><font color="#CCCCCC"> own</font>

1294
00:51:36,589 --> 00:51:41,180
code<font color="#CCCCCC"> to set</font><font color="#E5E5E5"> this GPIO pins so what we</font>

1295
00:51:39,589 --> 00:51:44,029
typically do is<font color="#E5E5E5"> we</font><font color="#CCCCCC"> look at</font><font color="#E5E5E5"> the power</font>

1296
00:51:41,180 --> 00:51:45,859
<font color="#E5E5E5">consumption of the target so we for</font>

1297
00:51:44,029 --> 00:51:48,500
<font color="#CCCCCC">example put an electromagnetic probe on</font>

1298
00:51:45,859 --> 00:51:50,150
top<font color="#CCCCCC"> of the chip that can tell us what's</font>

1299
00:51:48,500 --> 00:51:51,710
<font color="#CCCCCC">going on inside</font><font color="#E5E5E5"> the chip to a certain</font>

1300
00:51:50,150 --> 00:51:54,279
sense<font color="#CCCCCC"> cuz there</font><font color="#E5E5E5"> will be certain patterns</font>

1301
00:51:51,710 --> 00:51:56,930
<font color="#CCCCCC">and then the idea is just to find a</font>

1302
00:51:54,279 --> 00:51:58,609
<font color="#E5E5E5">specific pattern before</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> moment in</font>

1303
00:51:56,930 --> 00:52:00,950
time<font color="#CCCCCC"> you want to have the glitch that is</font>

1304
00:51:58,609 --> 00:52:03,019
<font color="#E5E5E5">coupled to the actual moment you want to</font>

1305
00:52:00,950 --> 00:52:05,089
<font color="#E5E5E5">get and then you can use specialized</font>

1306
00:52:03,019 --> 00:52:06,589
equipment in order<font color="#E5E5E5"> to generate a trigger</font>

1307
00:52:05,089 --> 00:52:08,599
signal based on the<font color="#E5E5E5"> power consumption</font>

1308
00:52:06,589 --> 00:52:10,970
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that's right</font><font color="#E5E5E5"> that works actually</font>

1309
00:52:08,599 --> 00:52:15,980
<font color="#E5E5E5">very well it's even</font><font color="#CCCCCC"> better than a GPL</font>

1310
00:52:10,970 --> 00:52:17,569
signal itself<font color="#CCCCCC"> now maybe because there's</font>

1311
00:52:15,980 --> 00:52:19,430
no time anymore<font color="#E5E5E5"> for questions if anybody</font>

1312
00:52:17,569 --> 00:52:22,730
<font color="#CCCCCC">asked questions were here to Friday</font>

1313
00:52:19,430 --> 00:52:23,960
<font color="#E5E5E5">please approach us and</font><font color="#CCCCCC"> we can discuss</font>

1314
00:52:22,730 --> 00:52:26,880
whatever<font color="#CCCCCC"> you would like to discuss</font>

1315
00:52:23,960 --> 00:52:31,729
thanks a<font color="#E5E5E5"> lot round of applause</font>

1316
00:52:26,880 --> 00:52:31,729
[Applause]

