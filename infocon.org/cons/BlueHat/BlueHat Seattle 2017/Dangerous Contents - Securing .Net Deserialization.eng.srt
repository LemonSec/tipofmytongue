1
00:00:00,319 --> 00:00:05,279
welcome back everybody<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are getting</font>

2
00:00:02,879 --> 00:00:07,500
set up for<font color="#CCCCCC"> Jonathan Burgess presentation</font>

3
00:00:05,279 --> 00:00:10,320
on the dangers of<font color="#E5E5E5"> serialization and</font>

4
00:00:07,500 --> 00:00:11,700
deserialization<font color="#CCCCCC"> while he</font><font color="#E5E5E5"> is doing</font><font color="#CCCCCC"> that</font>

5
00:00:10,320 --> 00:00:13,170
we actually<font color="#CCCCCC"> have a set of</font><font color="#E5E5E5"> handouts that</font>

6
00:00:11,700 --> 00:00:16,890
<font color="#E5E5E5">he</font><font color="#CCCCCC"> prepare that should be circulating</font>

7
00:00:13,170 --> 00:00:19,560
through if you do not have them<font color="#CCCCCC"> right up</font>

8
00:00:16,890 --> 00:00:22,550
<font color="#E5E5E5">here towards the entryway is a lovely</font>

9
00:00:19,560 --> 00:00:25,080
<font color="#CCCCCC">person who will help you get</font><font color="#E5E5E5"> a copy</font>

10
00:00:22,550 --> 00:00:27,810
dotnet is<font color="#CCCCCC"> a pretty</font><font color="#E5E5E5"> magical</font><font color="#CCCCCC"> Beast</font>

11
00:00:25,080 --> 00:00:30,630
it will run<font color="#E5E5E5"> damn there any code</font><font color="#CCCCCC"> you feed</font>

12
00:00:27,810 --> 00:00:32,460
it which is fantastic in terms<font color="#CCCCCC"> of the</font>

13
00:00:30,630 --> 00:00:35,550
versatility<font color="#E5E5E5"> in the utility of the the</font>

14
00:00:32,460 --> 00:00:37,230
<font color="#E5E5E5">application set the problem is that you</font>

15
00:00:35,550 --> 00:00:39,569
need to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> careful about what you</font><font color="#CCCCCC"> are</font>

16
00:00:37,230 --> 00:00:42,750
feeding it or you will get undesirable

17
00:00:39,570 --> 00:00:44,579
and<font color="#E5E5E5"> often insecure outcomes</font><font color="#CCCCCC"> Jonathan has</font>

18
00:00:42,750 --> 00:00:46,469
been<font color="#E5E5E5"> instrumental in helping beat the</font>

19
00:00:44,579 --> 00:00:48,570
drum inside Microsoft<font color="#E5E5E5"> and outside</font>

20
00:00:46,469 --> 00:00:49,860
Microsoft<font color="#E5E5E5"> and how to do this properly to</font>

21
00:00:48,570 --> 00:00:52,949
ensure<font color="#CCCCCC"> that you enjoy all of the</font>

22
00:00:49,860 --> 00:00:55,920
<font color="#E5E5E5">benefits of this this broadly deployed</font>

23
00:00:52,949 --> 00:00:57,899
<font color="#E5E5E5">very flexible platform without trapping</font>

24
00:00:55,920 --> 00:00:59,430
<font color="#CCCCCC">yourself into an insecure deployment</font>

25
00:00:57,899 --> 00:01:01,770
<font color="#E5E5E5">from which you have a hard</font><font color="#CCCCCC"> recovery path</font>

26
00:00:59,430 --> 00:01:03,120
so without further<font color="#E5E5E5"> ado to give him the</font>

27
00:01:01,770 --> 00:01:09,990
full<font color="#E5E5E5"> amount of our time</font><font color="#CCCCCC"> quick round of</font>

28
00:01:03,120 --> 00:01:11,399
applause for<font color="#E5E5E5"> Jonathan Bertrand</font><font color="#CCCCCC"> thanks so</font>

29
00:01:09,990 --> 00:01:13,080
like you<font color="#E5E5E5"> said I'm Jonathan birch with</font>

30
00:01:11,400 --> 00:01:14,909
Microsoft Office security and this is

31
00:01:13,080 --> 00:01:17,610
<font color="#CCCCCC">dangerous</font><font color="#E5E5E5"> content securing</font><font color="#CCCCCC"> netd</font>

32
00:01:14,909 --> 00:01:19,590
<font color="#CCCCCC">serialization</font><font color="#E5E5E5"> in this talk I'll cover</font>

33
00:01:17,610 --> 00:01:21,240
how<font color="#CCCCCC"> insecure use of serialization and</font>

34
00:01:19,590 --> 00:01:23,340
net can lead to remote code execution

35
00:01:21,240 --> 00:01:24,449
vulnerabilities and then I'll tell<font color="#CCCCCC"> you</font>

36
00:01:23,340 --> 00:01:25,170
<font color="#E5E5E5">how you can prevent those sorts of</font>

37
00:01:24,450 --> 00:01:26,880
vulnerabilities

38
00:01:25,170 --> 00:01:29,159
I'll give advice for specific

39
00:01:26,880 --> 00:01:30,298
serialization<font color="#E5E5E5"> api's and I'll tell you</font>

40
00:01:29,159 --> 00:01:33,030
how<font color="#E5E5E5"> you can scan for serialization</font>

41
00:01:30,299 --> 00:01:35,009
vulnerabilities in your products so

42
00:01:33,030 --> 00:01:35,460
first some background<font color="#E5E5E5"> on serialization</font>

43
00:01:35,009 --> 00:01:38,340
itself

44
00:01:35,460 --> 00:01:40,110
what is serialization well it's a

45
00:01:38,340 --> 00:01:42,780
process<font color="#E5E5E5"> where</font><font color="#CCCCCC"> you can take in</font><font color="#E5E5E5"> memory</font>

46
00:01:40,110 --> 00:01:44,340
objects and convert them into<font color="#CCCCCC"> something</font>

47
00:01:42,780 --> 00:01:46,259
like<font color="#E5E5E5"> a stream or a string so</font><font color="#CCCCCC"> that you</font>

48
00:01:44,340 --> 00:01:47,820
can store them or transmit them it's

49
00:01:46,259 --> 00:01:49,829
usually<font color="#E5E5E5"> used so</font><font color="#CCCCCC"> that you can restore</font>

50
00:01:47,820 --> 00:01:51,829
those objects<font color="#E5E5E5"> either somewhere else or</font>

51
00:01:49,829 --> 00:01:54,029
at a<font color="#E5E5E5"> later point in time</font>

52
00:01:51,829 --> 00:01:55,380
civilization is usually used to transfer

53
00:01:54,030 --> 00:01:57,840
<font color="#CCCCCC">data often between clients and</font><font color="#E5E5E5"> servers</font>

54
00:01:55,380 --> 00:02:00,000
<font color="#E5E5E5">is also used to</font><font color="#CCCCCC"> backup</font><font color="#E5E5E5"> data to a</font>

55
00:01:57,840 --> 00:02:02,610
database<font color="#CCCCCC"> so you can like restore program</font>

56
00:02:00,000 --> 00:02:03,750
<font color="#CCCCCC">state and it lets you create equivalence</font>

57
00:02:02,610 --> 00:02:05,399
between objects<font color="#CCCCCC"> in different</font>

58
00:02:03,750 --> 00:02:08,729
<font color="#CCCCCC">environments</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> objects</font>

59
00:02:05,399 --> 00:02:10,520
versus dotnet objects for instance so

60
00:02:08,729 --> 00:02:13,590
then how can serialization<font color="#E5E5E5"> be exploited</font>

61
00:02:10,520 --> 00:02:14,040
well first there's lots of serialization

62
00:02:13,590 --> 00:02:16,409
api's

63
00:02:14,040 --> 00:02:18,269
out there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> many of</font><font color="#E5E5E5"> them will do this</font>

64
00:02:16,409 --> 00:02:20,489
<font color="#E5E5E5">thing where when</font><font color="#CCCCCC"> they're deserializing a</font>

65
00:02:18,269 --> 00:02:22,260
stream they'll determine what types are

66
00:02:20,489 --> 00:02:23,400
going to make<font color="#E5E5E5"> by information</font><font color="#CCCCCC"> from the</font>

67
00:02:22,260 --> 00:02:24,719
stream itself<font color="#CCCCCC"> so they're</font><font color="#E5E5E5"> actually</font>

68
00:02:23,400 --> 00:02:28,170
storing<font color="#E5E5E5"> the type information in the</font>

69
00:02:24,719 --> 00:02:30,329
stream<font color="#CCCCCC"> and second it's often the</font><font color="#E5E5E5"> case</font>

70
00:02:28,170 --> 00:02:32,189
when serialization<font color="#E5E5E5"> is used that it's</font>

71
00:02:30,329 --> 00:02:33,840
being<font color="#E5E5E5"> used in such a way that the stream</font>

72
00:02:32,189 --> 00:02:35,519
that<font color="#E5E5E5"> you're going to deserialize was at</font>

73
00:02:33,840 --> 00:02:38,420
least<font color="#E5E5E5"> temporarily in the hands of an</font>

74
00:02:35,519 --> 00:02:40,650
untrusted party say a client<font color="#CCCCCC"> user</font><font color="#E5E5E5"> in</font>

75
00:02:38,420 --> 00:02:42,839
combination this means that there's an

76
00:02:40,650 --> 00:02:44,370
opportunity for<font color="#E5E5E5"> an attacker to inject</font>

77
00:02:42,840 --> 00:02:46,379
<font color="#E5E5E5">other types in</font><font color="#CCCCCC"> that stream that</font><font color="#E5E5E5"> your</font>

78
00:02:44,370 --> 00:02:47,639
process is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> deserialize and then</font>

79
00:02:46,379 --> 00:02:50,578
you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to create instances of</font>

80
00:02:47,639 --> 00:02:52,139
types you<font color="#E5E5E5"> didn't expect so why is that a</font>

81
00:02:50,579 --> 00:02:53,549
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> why is it going to be bad if you</font>

82
00:02:52,139 --> 00:02:55,470
make instances of types<font color="#E5E5E5"> you didn't</font>

83
00:02:53,549 --> 00:02:57,299
expect<font color="#E5E5E5"> well first it's not going to be</font>

84
00:02:55,470 --> 00:03:00,030
the<font color="#E5E5E5"> case that an attacker can attack a</font>

85
00:02:57,299 --> 00:03:01,620
<font color="#E5E5E5">serial</font><font color="#CCCCCC"> deserialization</font><font color="#E5E5E5"> process just by</font>

86
00:03:00,030 --> 00:03:03,239
creating<font color="#E5E5E5"> their own malicious class and</font>

87
00:03:01,620 --> 00:03:04,650
<font color="#E5E5E5">getting you to deserialize it D</font>

88
00:03:03,239 --> 00:03:07,409
serialization is only going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> work if</font>

89
00:03:04,650 --> 00:03:08,879
the deserializing process has<font color="#CCCCCC"> knowledge</font>

90
00:03:07,409 --> 00:03:10,828
of<font color="#E5E5E5"> the type definition that it's going</font>

91
00:03:08,879 --> 00:03:12,209
<font color="#E5E5E5">to</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to make instead what you're</font>

92
00:03:10,829 --> 00:03:14,519
<font color="#E5E5E5">going to do is an attacker is going</font><font color="#CCCCCC"> to</font>

93
00:03:12,209 --> 00:03:16,859
<font color="#E5E5E5">leverage either types in your</font><font color="#CCCCCC"> program</font><font color="#E5E5E5"> or</font>

94
00:03:14,519 --> 00:03:18,599
types<font color="#E5E5E5"> defined by the framework done that</font>

95
00:03:16,859 --> 00:03:19,889
has a lot of<font color="#E5E5E5"> types in it and a lot of</font>

96
00:03:18,599 --> 00:03:21,500
<font color="#CCCCCC">them have code that will run</font><font color="#E5E5E5"> just</font>

97
00:03:19,889 --> 00:03:24,060
<font color="#CCCCCC">because you</font><font color="#E5E5E5"> created an instance of them</font>

98
00:03:21,500 --> 00:03:27,329
now<font color="#E5E5E5"> different serialization api's work</font>

99
00:03:24,060 --> 00:03:28,979
differently but many of them will call

100
00:03:27,329 --> 00:03:30,930
constructors on classes that they make

101
00:03:28,979 --> 00:03:32,459
instances of or on<font color="#E5E5E5"> deserialize handlers</font>

102
00:03:30,930 --> 00:03:34,440
or sometimes setters for<font color="#E5E5E5"> properties they</font>

103
00:03:32,459 --> 00:03:35,699
set and it doesn't<font color="#E5E5E5"> matter what API</font>

104
00:03:34,440 --> 00:03:36,810
you're using if you're creating an

105
00:03:35,699 --> 00:03:39,599
instance of a type and<font color="#E5E5E5"> it has a</font>

106
00:03:36,810 --> 00:03:40,799
destructor<font color="#E5E5E5"> if that object</font><font color="#CCCCCC"> gets garbage</font>

107
00:03:39,599 --> 00:03:42,988
collected that destructor is going to be

108
00:03:40,799 --> 00:03:44,940
called now these methods<font color="#CCCCCC"> can</font><font color="#E5E5E5"> have side</font>

109
00:03:42,989 --> 00:03:46,290
effects<font color="#CCCCCC"> and it turns out</font><font color="#E5E5E5"> that you can</font>

110
00:03:44,940 --> 00:03:49,228
combine the<font color="#E5E5E5"> side effects of multiple</font>

111
00:03:46,290 --> 00:03:52,069
<font color="#E5E5E5">types to create gadgets</font><font color="#CCCCCC"> that allow for</font>

112
00:03:49,229 --> 00:03:54,720
things<font color="#E5E5E5"> like arbitrary code execution</font>

113
00:03:52,069 --> 00:03:56,159
<font color="#E5E5E5">here is sort of a simple</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> so</font>

114
00:03:54,720 --> 00:03:58,439
binary formatter plus temp file

115
00:03:56,159 --> 00:04:00,209
collection binary for matter is<font color="#E5E5E5"> probably</font>

116
00:03:58,439 --> 00:04:03,569
the most commonly used serialization API

117
00:04:00,209 --> 00:04:05,430
<font color="#CCCCCC">on net</font><font color="#E5E5E5"> and if you're using binary</font>

118
00:04:03,569 --> 00:04:07,078
formatter to<font color="#E5E5E5"> say deserialize the stream</font>

119
00:04:05,430 --> 00:04:09,329
that you don't trust<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a hacker has</font>

120
00:04:07,079 --> 00:04:10,500
<font color="#CCCCCC">access to that</font><font color="#E5E5E5"> stream then one way they</font>

121
00:04:09,329 --> 00:04:12,959
can<font color="#CCCCCC"> tack it is using the temp file</font>

122
00:04:10,500 --> 00:04:15,299
collection type temp file collection is

123
00:04:12,959 --> 00:04:17,930
a type and net which<font color="#CCCCCC"> is used to</font><font color="#E5E5E5"> manage</font>

124
00:04:15,299 --> 00:04:19,798
sort of a list of temporary files<font color="#E5E5E5"> and</font>

125
00:04:17,930 --> 00:04:21,120
what it will<font color="#E5E5E5"> do is when it's garbage</font>

126
00:04:19,798 --> 00:04:23,580
caught it will try to clean<font color="#CCCCCC"> up those</font>

127
00:04:21,120 --> 00:04:26,460
files and delete them so<font color="#CCCCCC"> an attacker can</font>

128
00:04:23,580 --> 00:04:27,930
do is if they have a stream<font color="#CCCCCC"> that you're</font>

129
00:04:26,460 --> 00:04:29,849
<font color="#CCCCCC">going to deserialize</font><font color="#E5E5E5"> they can</font>

130
00:04:27,930 --> 00:04:31,919
their own<font color="#CCCCCC"> temple</font><font color="#E5E5E5"> collection object add a</font>

131
00:04:29,850 --> 00:04:33,419
list of files to it serialize it<font color="#E5E5E5"> into</font>

132
00:04:31,919 --> 00:04:35,340
the stream and<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're processed</font>

133
00:04:33,419 --> 00:04:36,570
<font color="#E5E5E5">deserialize is it you'll get an</font><font color="#CCCCCC"> object</font>

134
00:04:35,340 --> 00:04:40,679
<font color="#E5E5E5">that when it gets garbage collected will</font>

135
00:04:36,570 --> 00:04:42,509
delete some files in<font color="#CCCCCC"> your context here's</font>

136
00:04:40,680 --> 00:04:44,100
a<font color="#E5E5E5"> diagram of</font><font color="#CCCCCC"> that scenario so here</font>

137
00:04:42,509 --> 00:04:45,840
you've<font color="#CCCCCC"> got a client-server application</font>

138
00:04:44,100 --> 00:04:47,310
we have like a purchase order that's

139
00:04:45,840 --> 00:04:47,849
being serialized by the<font color="#E5E5E5"> client sent to a</font>

140
00:04:47,310 --> 00:04:49,620
server

141
00:04:47,850 --> 00:04:52,620
<font color="#E5E5E5">where's deserialized and processed an</font>

142
00:04:49,620 --> 00:04:54,449
attacker<font color="#E5E5E5"> takes this system and instead</font>

143
00:04:52,620 --> 00:04:56,610
sterilizes a temp file collection object

144
00:04:54,449 --> 00:04:58,350
and sends it to<font color="#CCCCCC"> your server</font><font color="#E5E5E5"> and this is</font>

145
00:04:56,610 --> 00:04:59,940
sort of like<font color="#CCCCCC"> a bomb it's going to go off</font>

146
00:04:58,350 --> 00:05:01,860
when it<font color="#E5E5E5"> gets deserialized so the server</font>

147
00:04:59,940 --> 00:05:03,210
deserialize is this object<font color="#E5E5E5"> and then it</font>

148
00:05:01,860 --> 00:05:05,789
deletes a bunch of<font color="#E5E5E5"> files potentially</font>

149
00:05:03,210 --> 00:05:08,520
maybe the<font color="#CCCCCC"> web.config that's a good way</font>

150
00:05:05,789 --> 00:05:09,810
<font color="#E5E5E5">to</font><font color="#CCCCCC"> take down a server and this</font><font color="#E5E5E5"> is not</font>

151
00:05:08,520 --> 00:05:11,219
the best attack it's just a simple one

152
00:05:09,810 --> 00:05:13,080
<font color="#CCCCCC">to</font><font color="#E5E5E5"> explain for binary formatter</font><font color="#CCCCCC"> I</font>

153
00:05:11,220 --> 00:05:15,389
encourage<font color="#E5E5E5"> you to read</font><font color="#CCCCCC"> James</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> shah's</font>

154
00:05:13,080 --> 00:05:17,310
exploiting<font color="#CCCCCC"> net manage decom presentation</font>

155
00:05:15,389 --> 00:05:18,840
<font color="#E5E5E5">he outlines a way to get arbitrary</font>

156
00:05:17,310 --> 00:05:20,190
<font color="#CCCCCC">remote code execution through binary</font>

157
00:05:18,840 --> 00:05:21,810
formatter it's just a little<font color="#E5E5E5"> more</font>

158
00:05:20,190 --> 00:05:25,949
<font color="#E5E5E5">complex</font><font color="#CCCCCC"> and I can</font><font color="#E5E5E5"> explain</font><font color="#CCCCCC"> in a 25-minute</font>

159
00:05:21,810 --> 00:05:27,660
<font color="#E5E5E5">talk so why is this a problem well</font>

160
00:05:25,949 --> 00:05:30,870
<font color="#E5E5E5">remote code execution is</font><font color="#CCCCCC"> not something</font>

161
00:05:27,660 --> 00:05:33,150
any<font color="#E5E5E5"> of us want but it's also a really</font>

162
00:05:30,870 --> 00:05:34,560
common issue<font color="#E5E5E5"> so this vulnerability used</font>

163
00:05:33,150 --> 00:05:36,960
to be present<font color="#CCCCCC"> and a large number of</font>

164
00:05:34,560 --> 00:05:38,340
Microsoft products we fixed every issue

165
00:05:36,960 --> 00:05:40,198
<font color="#E5E5E5">that we've known</font><font color="#CCCCCC"> about if you found one</font>

166
00:05:38,340 --> 00:05:42,119
<font color="#E5E5E5">please</font><font color="#CCCCCC"> let us know</font><font color="#E5E5E5"> it's still the</font><font color="#CCCCCC"> case</font>

167
00:05:40,199 --> 00:05:43,380
however that you can easily find<font color="#CCCCCC"> web</font>

168
00:05:42,120 --> 00:05:45,110
applications out on the internet<font color="#E5E5E5"> that</font>

169
00:05:43,380 --> 00:05:47,729
<font color="#CCCCCC">are vulnerable to</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> type of attack</font>

170
00:05:45,110 --> 00:05:49,440
that's not something we like<font color="#E5E5E5"> but we</font>

171
00:05:47,729 --> 00:05:50,609
<font color="#E5E5E5">can't really go and approach</font><font color="#CCCCCC"> every one</font>

172
00:05:49,440 --> 00:05:55,560
we find on<font color="#E5E5E5"> the internet who has</font>

173
00:05:50,610 --> 00:05:57,060
potentially<font color="#CCCCCC"> vulnerable applications so</font>

174
00:05:55,560 --> 00:05:58,409
why don't we<font color="#E5E5E5"> fix this instead by just</font>

175
00:05:57,060 --> 00:06:00,720
<font color="#E5E5E5">making it so that</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> have dangerous</font>

176
00:05:58,409 --> 00:06:02,070
<font color="#E5E5E5">types why don't we just take all the</font>

177
00:06:00,720 --> 00:06:03,840
types<font color="#E5E5E5"> that have potential side effects</font>

178
00:06:02,070 --> 00:06:05,580
<font color="#E5E5E5">for constructors or setters instructors</font>

179
00:06:03,840 --> 00:06:07,710
and makes them so that they're safe for

180
00:06:05,580 --> 00:06:09,449
<font color="#E5E5E5">D</font><font color="#CCCCCC"> serialization well it turns</font><font color="#E5E5E5"> out that's</font>

181
00:06:07,710 --> 00:06:10,880
<font color="#E5E5E5">not really practical Don that has</font>

182
00:06:09,449 --> 00:06:12,840
hundreds of thousands<font color="#E5E5E5"> of types and</font>

183
00:06:10,880 --> 00:06:14,070
frequently<font color="#E5E5E5"> these side effects that are</font>

184
00:06:12,840 --> 00:06:15,900
<font color="#CCCCCC">dangerous are going to be dangerous</font>

185
00:06:14,070 --> 00:06:18,120
<font color="#E5E5E5">because of</font><font color="#CCCCCC"> the functionality provided by</font>

186
00:06:15,900 --> 00:06:19,530
the type itself<font color="#E5E5E5"> we couldn't change that</font>

187
00:06:18,120 --> 00:06:21,080
<font color="#CCCCCC">functionality without</font><font color="#E5E5E5"> at the very least</font>

188
00:06:19,530 --> 00:06:22,679
breaking framework compatibility<font color="#E5E5E5"> and</font>

189
00:06:21,080 --> 00:06:24,449
really if you've got an application

190
00:06:22,680 --> 00:06:26,909
<font color="#E5E5E5">framework and</font><font color="#CCCCCC"> you can make arbitrary</font>

191
00:06:24,449 --> 00:06:28,860
in-memory objects that's<font color="#E5E5E5"> probably a win</font>

192
00:06:26,909 --> 00:06:30,060
condition for any attacker<font color="#E5E5E5"> it's not</font>

193
00:06:28,860 --> 00:06:30,690
going to be the case<font color="#CCCCCC"> that you have some</font>

194
00:06:30,060 --> 00:06:32,370
<font color="#E5E5E5">other ow</font>

195
00:06:30,690 --> 00:06:33,780
library that<font color="#E5E5E5"> you could be running</font><font color="#CCCCCC"> on</font>

196
00:06:32,370 --> 00:06:36,240
that you could do this and<font color="#E5E5E5"> it probably</font>

197
00:06:33,780 --> 00:06:38,609
would be<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so really the only</font>

198
00:06:36,240 --> 00:06:40,409
solution<font color="#CCCCCC"> to this</font><font color="#E5E5E5"> problem is for dotnet</font>

199
00:06:38,610 --> 00:06:42,110
application developers to<font color="#CCCCCC"> only use</font>

200
00:06:40,409 --> 00:06:44,159
serialization<font color="#E5E5E5"> secure</font>

201
00:06:42,110 --> 00:06:45,810
and you might<font color="#E5E5E5"> be saying okay that's</font>

202
00:06:44,160 --> 00:06:48,000
<font color="#E5E5E5">binary for matter but I don't use that</font>

203
00:06:45,810 --> 00:06:49,500
well first<font color="#CCCCCC"> you might be</font><font color="#E5E5E5"> it turns out</font>

204
00:06:48,000 --> 00:06:52,050
there's a lot of dotnet api's that use

205
00:06:49,500 --> 00:06:53,730
binary phone<font color="#CCCCCC"> are behind the scenes</font><font color="#E5E5E5"> so</font>

206
00:06:52,050 --> 00:06:56,550
anything<font color="#CCCCCC"> that reads resource files does</font>

207
00:06:53,730 --> 00:06:58,170
it if you use asp.net<font color="#CCCCCC"> with viewstate</font>

208
00:06:56,550 --> 00:06:59,580
<font color="#CCCCCC">sort of the</font><font color="#E5E5E5"> classic mode that uses</font>

209
00:06:58,170 --> 00:07:03,450
<font color="#E5E5E5">binary formatter and</font><font color="#CCCCCC"> I'll go back to</font>

210
00:06:59,580 --> 00:07:05,789
<font color="#E5E5E5">that a bit there's various other</font>

211
00:07:03,450 --> 00:07:07,620
formatter api's<font color="#E5E5E5"> and net object state</font>

212
00:07:05,790 --> 00:07:09,510
formatter l OS formatter<font color="#E5E5E5"> other</font><font color="#CCCCCC"> api is</font>

213
00:07:07,620 --> 00:07:11,490
like net data contract serializer<font color="#E5E5E5"> will</font>

214
00:07:09,510 --> 00:07:12,990
do this there's a<font color="#E5E5E5"> longer list in the</font>

215
00:07:11,490 --> 00:07:15,420
handout<font color="#CCCCCC"> and at the end of the</font><font color="#E5E5E5"> slide deck</font>

216
00:07:12,990 --> 00:07:16,740
<font color="#CCCCCC">and really</font><font color="#E5E5E5"> even see realises</font><font color="#CCCCCC"> that don't</font>

217
00:07:15,420 --> 00:07:19,160
use binary<font color="#E5E5E5"> formatter can be vulnerable</font>

218
00:07:16,740 --> 00:07:21,630
<font color="#CCCCCC">so javascript serializer</font>

219
00:07:19,160 --> 00:07:23,670
you would<font color="#E5E5E5"> expect javascript serializer</font>

220
00:07:21,630 --> 00:07:25,800
to be safe<font color="#CCCCCC"> and by</font><font color="#E5E5E5"> default it actually is</font>

221
00:07:23,670 --> 00:07:27,240
by default<font color="#CCCCCC"> java</font><font color="#E5E5E5"> sterilizer won't take</font>

222
00:07:25,800 --> 00:07:28,980
type information<font color="#CCCCCC"> from a stream it's</font>

223
00:07:27,240 --> 00:07:29,900
deserializing<font color="#E5E5E5"> so you're not gonna be</font>

224
00:07:28,980 --> 00:07:31,920
able to<font color="#E5E5E5"> make these sort of</font>

225
00:07:29,900 --> 00:07:34,620
jack-in-the-box objects<font color="#E5E5E5"> that'll do bad</font>

226
00:07:31,920 --> 00:07:36,000
things when<font color="#E5E5E5"> the deserialized but you can</font>

227
00:07:34,620 --> 00:07:38,130
use<font color="#CCCCCC"> javascript sterilizer with a</font>

228
00:07:36,000 --> 00:07:39,870
<font color="#CCCCCC">javascript</font><font color="#E5E5E5"> type resolver and if you do</font>

229
00:07:38,130 --> 00:07:41,760
what people<font color="#E5E5E5"> usually do and set a symbol</font>

230
00:07:39,870 --> 00:07:44,040
type resolver that just makes any type

231
00:07:41,760 --> 00:07:45,830
<font color="#E5E5E5">it's asked to this makes it similar</font><font color="#CCCCCC"> to</font>

232
00:07:44,040 --> 00:07:47,820
<font color="#E5E5E5">the binary format or scenario again</font>

233
00:07:45,830 --> 00:07:50,070
however<font color="#E5E5E5"> javascript serialize</font><font color="#CCCCCC"> ER is a</font>

234
00:07:47,820 --> 00:07:51,150
little bit different<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> only</font>

235
00:07:50,070 --> 00:07:53,219
instance types that have a public

236
00:07:51,150 --> 00:07:54,750
parameterless constructor<font color="#E5E5E5"> and it will</font>

237
00:07:53,220 --> 00:07:56,430
<font color="#CCCCCC">only set values for properties not</font>

238
00:07:54,750 --> 00:07:58,920
private members like binary formatter

239
00:07:56,430 --> 00:08:01,440
will on the<font color="#CCCCCC"> other hand it doesn't care</font>

240
00:07:58,920 --> 00:08:02,910
if a type is serializable<font color="#E5E5E5"> so it is</font>

241
00:08:01,440 --> 00:08:04,440
exploitable but the sorts of exploits

242
00:08:02,910 --> 00:08:06,150
you get are different and<font color="#CCCCCC"> i want</font><font color="#E5E5E5"> to</font>

243
00:08:04,440 --> 00:08:09,630
credit<font color="#CCCCCC"> Alvaro Munoz and Aleksandra</font><font color="#E5E5E5"> me</font>

244
00:08:06,150 --> 00:08:10,739
Roche for publicly talking previously

245
00:08:09,630 --> 00:08:13,560
about<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> serialize their</font>

246
00:08:10,740 --> 00:08:15,630
exploits like this so here's the simple

247
00:08:13,560 --> 00:08:16,950
payload for<font color="#CCCCCC"> JavaScript serializer</font><font color="#E5E5E5"> this</font>

248
00:08:15,630 --> 00:08:18,000
is a JSON<font color="#E5E5E5"> string</font><font color="#CCCCCC"> which is just going</font><font color="#E5E5E5"> to</font>

249
00:08:16,950 --> 00:08:19,979
<font color="#E5E5E5">make an instance of an XML</font><font color="#CCCCCC"> document</font>

250
00:08:18,000 --> 00:08:24,270
object<font color="#CCCCCC"> instead it's inner</font><font color="#E5E5E5"> XML property</font>

251
00:08:19,980 --> 00:08:27,120
<font color="#E5E5E5">so XML document has an a setter on its</font>

252
00:08:24,270 --> 00:08:28,799
inner<font color="#CCCCCC"> XML property which will just parse</font>

253
00:08:27,120 --> 00:08:31,470
the XML<font color="#E5E5E5"> that you give it immediately</font><font color="#CCCCCC"> an</font>

254
00:08:28,800 --> 00:08:33,510
XML<font color="#CCCCCC"> document also</font><font color="#E5E5E5"> will process document</font>

255
00:08:31,470 --> 00:08:36,240
type definitions<font color="#CCCCCC"> so this gives you</font>

256
00:08:33,510 --> 00:08:38,669
essentially an<font color="#CCCCCC"> x XC</font><font color="#E5E5E5"> file exfiltration</font><font color="#CCCCCC"> or</font>

257
00:08:36,240 --> 00:08:40,080
<font color="#CCCCCC">server-side</font><font color="#E5E5E5"> request</font><font color="#CCCCCC"> forgery and you'll</font>

258
00:08:38,669 --> 00:08:42,780
<font color="#E5E5E5">note for</font><font color="#CCCCCC"> JavaScript sterilized</font><font color="#E5E5E5"> or the</font>

259
00:08:40,080 --> 00:08:44,670
<font color="#CCCCCC">deserialized call</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> has a type</font>

260
00:08:42,780 --> 00:08:46,980
that<font color="#E5E5E5"> you pass to</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> that doesn't</font><font color="#CCCCCC"> do</font>

261
00:08:44,670 --> 00:08:48,630
anything<font color="#CCCCCC"> if you're using a type as over</font>

262
00:08:46,980 --> 00:08:49,710
at least<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> only there for</font><font color="#E5E5E5"> the case</font>

263
00:08:48,630 --> 00:08:51,540
where there's<font color="#CCCCCC"> no type resolver to</font>

264
00:08:49,710 --> 00:08:53,090
<font color="#E5E5E5">determine what the root object type will</font>

265
00:08:51,540 --> 00:08:56,550
be

266
00:08:53,090 --> 00:08:59,640
so that's a couple<font color="#E5E5E5"> of internal or</font>

267
00:08:56,550 --> 00:09:00,900
like.net defined<font color="#E5E5E5"> serialization</font><font color="#CCCCCC"> api's but</font>

268
00:08:59,640 --> 00:09:02,819
there's lots of<font color="#CCCCCC"> third-party</font>

269
00:09:00,900 --> 00:09:06,000
<font color="#E5E5E5">serialization api's that</font><font color="#CCCCCC"> exist also and</font>

270
00:09:02,820 --> 00:09:07,680
many<font color="#E5E5E5"> of those are also exploitable so</font>

271
00:09:06,000 --> 00:09:09,930
there's Jason net<font color="#E5E5E5"> made by Newton soft</font>

272
00:09:07,680 --> 00:09:12,209
<font color="#E5E5E5">Jason done that similar</font><font color="#CCCCCC"> to Java scripts</font>

273
00:09:09,930 --> 00:09:14,219
<font color="#CCCCCC">he</font><font color="#E5E5E5"> realized by default doesn't</font><font color="#CCCCCC"> serial or</font>

274
00:09:12,210 --> 00:09:16,410
doesn't deserialize type information

275
00:09:14,220 --> 00:09:18,030
<font color="#CCCCCC">from the stream</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it has a type name</font>

276
00:09:16,410 --> 00:09:19,650
handling property<font color="#CCCCCC"> and if you set it to</font>

277
00:09:18,030 --> 00:09:21,000
any<font color="#E5E5E5"> value other than its default</font><font color="#CCCCCC"> value</font>

278
00:09:19,650 --> 00:09:22,500
of<font color="#E5E5E5"> none you're back to the same</font>

279
00:09:21,000 --> 00:09:24,960
<font color="#CCCCCC">situation where</font><font color="#E5E5E5"> it will take</font><font color="#CCCCCC"> type</font>

280
00:09:22,500 --> 00:09:26,940
<font color="#E5E5E5">information from the stream so here's a</font>

281
00:09:24,960 --> 00:09:28,770
simple<font color="#E5E5E5"> gadget to get</font><font color="#CCCCCC"> RCE from jason net</font>

282
00:09:26,940 --> 00:09:31,290
it was developed by<font color="#E5E5E5"> levi Broderick at</font>

283
00:09:28,770 --> 00:09:32,910
Microsoft<font color="#E5E5E5"> and what this is it's a JSON</font>

284
00:09:31,290 --> 00:09:34,410
string<font color="#CCCCCC"> that</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> deserialized by</font><font color="#E5E5E5"> jason</font>

285
00:09:32,910 --> 00:09:37,050
done that if<font color="#CCCCCC"> typed them handling is say</font>

286
00:09:34,410 --> 00:09:39,120
<font color="#CCCCCC">auto will create an instance of</font><font color="#E5E5E5"> a</font>

287
00:09:37,050 --> 00:09:40,859
Windows identity object and then set its

288
00:09:39,120 --> 00:09:43,710
claims identity<font color="#E5E5E5"> bootstrap context</font>

289
00:09:40,860 --> 00:09:47,070
property it turns<font color="#E5E5E5"> out</font><font color="#CCCCCC"> Windows identity</font>

290
00:09:43,710 --> 00:09:48,570
has a non<font color="#E5E5E5"> deserialize handler that</font><font color="#CCCCCC"> will</font>

291
00:09:47,070 --> 00:09:50,370
just try<font color="#E5E5E5"> to use binary formatter</font><font color="#CCCCCC"> to</font>

292
00:09:48,570 --> 00:09:52,710
deserialize that bootstrap context

293
00:09:50,370 --> 00:09:54,210
property when it itself<font color="#CCCCCC"> is deserialized</font>

294
00:09:52,710 --> 00:09:56,970
and this just lets you wrap a binary

295
00:09:54,210 --> 00:10:00,810
<font color="#E5E5E5">formatted ow exploit inside of a</font><font color="#CCCCCC"> jason</font>

296
00:09:56,970 --> 00:10:03,120
exploit then there's service<font color="#CCCCCC"> stack</font><font color="#E5E5E5"> dot</font>

297
00:10:00,810 --> 00:10:04,739
<font color="#CCCCCC">text this is an api</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> I looked at</font>

298
00:10:03,120 --> 00:10:06,450
<font color="#CCCCCC">myself because</font><font color="#E5E5E5"> people in Microsoft are</font>

299
00:10:04,740 --> 00:10:07,980
wanting to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

300
00:10:06,450 --> 00:10:09,900
<font color="#E5E5E5">different it's a templated serializer</font>

301
00:10:07,980 --> 00:10:11,550
so when you do a serialization or<font color="#E5E5E5"> addy</font>

302
00:10:09,900 --> 00:10:13,949
serialization<font color="#CCCCCC"> you have to give it a type</font>

303
00:10:11,550 --> 00:10:15,270
and although it puts type<font color="#E5E5E5"> information in</font>

304
00:10:13,950 --> 00:10:17,040
the stream it tries to make sure that

305
00:10:15,270 --> 00:10:18,689
the types of deserialize is match up

306
00:10:17,040 --> 00:10:22,680
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the ones it's expecting based off</font>

307
00:10:18,690 --> 00:10:25,170
of the type<font color="#CCCCCC"> you gave it however it</font>

308
00:10:22,680 --> 00:10:26,699
<font color="#E5E5E5">allows for polymorphism so what will</font>

309
00:10:25,170 --> 00:10:29,310
happen<font color="#CCCCCC"> here is you've got a root type</font>

310
00:10:26,700 --> 00:10:30,390
and the stream says well this<font color="#E5E5E5"> is what</font>

311
00:10:29,310 --> 00:10:33,060
the type<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> you to</font><font color="#E5E5E5"> make for that</font>

312
00:10:30,390 --> 00:10:34,980
<font color="#E5E5E5">root</font><font color="#CCCCCC"> object and it will say well is the</font>

313
00:10:33,060 --> 00:10:36,420
one type assignable from the other if so

314
00:10:34,980 --> 00:10:38,640
it's<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> otherwise throw an exception</font>

315
00:10:36,420 --> 00:10:41,449
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> we'll do</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> for each</font><font color="#CCCCCC"> member</font>

316
00:10:38,640 --> 00:10:43,860
<font color="#E5E5E5">and all of their members and so on and</font>

317
00:10:41,450 --> 00:10:46,440
it turns<font color="#E5E5E5"> out that</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> can walk</font><font color="#CCCCCC"> to an</font>

318
00:10:43,860 --> 00:10:47,670
object type a member of type object<font color="#CCCCCC"> well</font>

319
00:10:46,440 --> 00:10:49,470
that's a<font color="#E5E5E5"> wild card</font><font color="#CCCCCC"> that'll let you</font>

320
00:10:47,670 --> 00:10:50,250
<font color="#CCCCCC">create any type you</font><font color="#E5E5E5"> want so that's going</font>

321
00:10:49,470 --> 00:10:52,560
to<font color="#E5E5E5"> be the point where you have</font><font color="#CCCCCC"> an</font>

322
00:10:50,250 --> 00:10:54,660
exploit and in dotnet because there's a

323
00:10:52,560 --> 00:10:57,239
lot of<font color="#E5E5E5"> innocuous seeming types that</font><font color="#CCCCCC"> have</font>

324
00:10:54,660 --> 00:10:58,709
a very<font color="#E5E5E5"> large number of subclasses it's</font>

325
00:10:57,240 --> 00:11:01,080
actually<font color="#CCCCCC"> almost always the case that you</font>

326
00:10:58,710 --> 00:11:02,520
<font color="#CCCCCC">can walk somehow through a membership</font>

327
00:11:01,080 --> 00:11:04,710
graph to<font color="#E5E5E5"> get to a member of type object</font>

328
00:11:02,520 --> 00:11:06,180
<font color="#CCCCCC">I give an example here for</font><font color="#E5E5E5"> a way to do</font>

329
00:11:04,710 --> 00:11:09,660
<font color="#E5E5E5">it with system</font><font color="#CCCCCC"> but exception</font>

330
00:11:06,180 --> 00:11:11,670
can<font color="#CCCCCC"> do with lots of other things too so</font>

331
00:11:09,660 --> 00:11:13,319
once you walk to a member of<font color="#CCCCCC"> type object</font>

332
00:11:11,670 --> 00:11:14,939
<font color="#CCCCCC">this would</font><font color="#E5E5E5"> let you do an exploit this is</font>

333
00:11:13,320 --> 00:11:16,080
the same as<font color="#E5E5E5"> the Jabra supervisor where</font>

334
00:11:14,940 --> 00:11:18,060
it's an XML<font color="#CCCCCC"> document where you're</font>

335
00:11:16,080 --> 00:11:19,110
<font color="#E5E5E5">setting in your XML</font><font color="#CCCCCC"> there formatting is</font>

336
00:11:18,060 --> 00:11:21,689
a little bit different for what they

337
00:11:19,110 --> 00:11:23,070
want<font color="#CCCCCC"> I did contact</font><font color="#E5E5E5"> the maintainer</font><font color="#CCCCCC"> zuv</font>

338
00:11:21,690 --> 00:11:24,240
service<font color="#CCCCCC"> talk text</font><font color="#E5E5E5"> about this</font>

339
00:11:23,070 --> 00:11:26,130
vulnerability<font color="#E5E5E5"> through Microsoft</font>

340
00:11:24,240 --> 00:11:27,930
vulnerability research and they did

341
00:11:26,130 --> 00:11:29,850
update<font color="#E5E5E5"> their API to try to prevent this</font>

342
00:11:27,930 --> 00:11:32,849
<font color="#E5E5E5">what they did was they added</font><font color="#CCCCCC"> an</font>

343
00:11:29,850 --> 00:11:35,700
additional whitelist<font color="#E5E5E5"> which says allow</font>

344
00:11:32,850 --> 00:11:37,410
<font color="#E5E5E5">list rather which says</font><font color="#CCCCCC"> that the only</font>

345
00:11:35,700 --> 00:11:38,760
<font color="#E5E5E5">types that they'll create are the ones</font>

346
00:11:37,410 --> 00:11:41,010
<font color="#E5E5E5">that you add to</font><font color="#CCCCCC"> the list</font><font color="#E5E5E5"> or the ones</font>

347
00:11:38,760 --> 00:11:42,660
<font color="#E5E5E5">that they put there by default the ones</font>

348
00:11:41,010 --> 00:11:44,430
<font color="#CCCCCC">I put there by default however is every</font>

349
00:11:42,660 --> 00:11:45,990
class<font color="#CCCCCC"> that implements eyes serializable</font>

350
00:11:44,430 --> 00:11:50,910
and dotnet which is a ridiculous number

351
00:11:45,990 --> 00:11:56,100
of classes<font color="#CCCCCC"> I don't know a way</font><font color="#E5E5E5"> to exploit</font>

352
00:11:50,910 --> 00:11:58,230
this I don't<font color="#E5E5E5"> know if</font><font color="#CCCCCC"> there isn't</font><font color="#E5E5E5"> one so</font>

353
00:11:56,100 --> 00:11:59,880
I've outlined how different

354
00:11:58,230 --> 00:12:01,290
serialization<font color="#CCCCCC"> api's could</font><font color="#E5E5E5"> be exploited</font>

355
00:11:59,880 --> 00:12:03,959
<font color="#E5E5E5">now I'll tell you</font><font color="#CCCCCC"> how you</font><font color="#E5E5E5"> can prevent</font>

356
00:12:01,290 --> 00:12:05,279
<font color="#E5E5E5">those exploits so in general</font><font color="#CCCCCC"> d</font>

357
00:12:03,959 --> 00:12:06,390
<font color="#E5E5E5">serialization vulnerabilities are only</font>

358
00:12:05,279 --> 00:12:08,730
going<font color="#E5E5E5"> to be present with three</font>

359
00:12:06,390 --> 00:12:10,980
<font color="#CCCCCC">ingredients</font><font color="#E5E5E5"> you have to have a stream</font>

360
00:12:08,730 --> 00:12:12,930
you're going to deserialize<font color="#E5E5E5"> that some</font>

361
00:12:10,980 --> 00:12:13,950
attacker could<font color="#E5E5E5"> have modified you're</font>

362
00:12:12,930 --> 00:12:16,109
going to have to be taking type

363
00:12:13,950 --> 00:12:17,580
information<font color="#E5E5E5"> from the stream so that</font>

364
00:12:16,110 --> 00:12:19,410
someone can stick a type in there you

365
00:12:17,580 --> 00:12:21,540
didn't expect<font color="#E5E5E5"> and it can go off like a</font>

366
00:12:19,410 --> 00:12:23,279
bomb like<font color="#CCCCCC"> this and you're</font><font color="#E5E5E5"> going to have</font>

367
00:12:21,540 --> 00:12:24,660
to be not<font color="#E5E5E5"> constraining the sort of types</font>

368
00:12:23,279 --> 00:12:26,970
that<font color="#CCCCCC"> it can create during</font><font color="#E5E5E5"> the</font>

369
00:12:24,660 --> 00:12:28,319
serialization<font color="#CCCCCC"> if you remove any of these</font>

370
00:12:26,970 --> 00:12:30,089
<font color="#E5E5E5">you're going to prevent</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> serialization</font>

371
00:12:28,320 --> 00:12:32,520
attacks although admittedly the third

372
00:12:30,089 --> 00:12:34,140
one here can be a<font color="#E5E5E5"> little bit tricky so</font>

373
00:12:32,520 --> 00:12:36,420
for the<font color="#E5E5E5"> first of those protecting the</font>

374
00:12:34,140 --> 00:12:38,250
stream this is really the easiest<font color="#CCCCCC"> way to</font>

375
00:12:36,420 --> 00:12:40,680
prevent<font color="#CCCCCC"> D serialization attacks</font><font color="#E5E5E5"> if you</font>

376
00:12:38,250 --> 00:12:42,089
only deserialize streams that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> that</font>

377
00:12:40,680 --> 00:12:44,790
you serialize in the first place<font color="#E5E5E5"> you're</font>

378
00:12:42,089 --> 00:12:45,540
generally<font color="#CCCCCC"> okay if you keep</font><font color="#E5E5E5"> your stream</font>

379
00:12:44,790 --> 00:12:47,040
on the<font color="#CCCCCC"> back end</font>

380
00:12:45,540 --> 00:12:48,660
that's probably<font color="#E5E5E5"> all right as long</font><font color="#CCCCCC"> as you</font>

381
00:12:47,040 --> 00:12:50,010
don't have some<font color="#E5E5E5"> other way for a</font><font color="#CCCCCC"> user to</font>

382
00:12:48,660 --> 00:12:53,400
<font color="#E5E5E5">modify it with like a sequel injection</font>

383
00:12:50,010 --> 00:12:54,930
attack alternatively if you're going<font color="#E5E5E5"> to</font>

384
00:12:53,400 --> 00:12:57,240
give the user<font color="#CCCCCC"> the stream to hold on to</font>

385
00:12:54,930 --> 00:13:00,000
<font color="#CCCCCC">for a while</font><font color="#E5E5E5"> like in some</font><font color="#CCCCCC"> cases you see</font>

386
00:12:57,240 --> 00:13:01,860
this where a server will give the client

387
00:13:00,000 --> 00:13:03,180
the<font color="#E5E5E5"> session state object and it's he</font>

388
00:13:01,860 --> 00:13:03,750
realized you can give them an H<font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> to</font>

389
00:13:03,180 --> 00:13:05,729
go with it

390
00:13:03,750 --> 00:13:07,740
if you validate that H Mac before<font color="#E5E5E5"> doing</font>

391
00:13:05,730 --> 00:13:09,690
your<font color="#E5E5E5"> D serialization the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> shouldn't</font>

392
00:13:07,740 --> 00:13:11,820
<font color="#E5E5E5">be able</font><font color="#CCCCCC"> to change the stream</font><font color="#E5E5E5"> and also</font>

393
00:13:09,690 --> 00:13:14,029
have the<font color="#CCCCCC"> HTM X still be valid so they</font>

394
00:13:11,820 --> 00:13:16,829
can't really inject their own objects

395
00:13:14,029 --> 00:13:18,000
the H<font color="#CCCCCC"> map can also be useful</font><font color="#E5E5E5"> for the</font>

396
00:13:16,829 --> 00:13:19,650
case<font color="#E5E5E5"> that you're storing a</font><font color="#CCCCCC"> serie live</font>

397
00:13:18,000 --> 00:13:19,950
stream in a database<font color="#E5E5E5"> as long as you keep</font>

398
00:13:19,650 --> 00:13:21,420
<font color="#E5E5E5">this</font>

399
00:13:19,950 --> 00:13:25,890
secret for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hmx</font><font color="#E5E5E5"> somewhere other than</font>

400
00:13:21,420 --> 00:13:27,300
the database another thing you can do is

401
00:13:25,890 --> 00:13:29,490
just<font color="#E5E5E5"> use a serialization API that</font>

402
00:13:27,300 --> 00:13:31,020
doesn't take types from<font color="#E5E5E5"> the stream so</font>

403
00:13:29,490 --> 00:13:32,790
data contract serializer<font color="#E5E5E5"> and</font><font color="#CCCCCC"> xml</font>

404
00:13:31,020 --> 00:13:35,520
serializable safe as far<font color="#E5E5E5"> as this goes</font>

405
00:13:32,790 --> 00:13:37,290
<font color="#E5E5E5">and</font><font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> serializer and</font><font color="#CCCCCC"> jason</font><font color="#E5E5E5"> that</font>

406
00:13:35,520 --> 00:13:38,880
net<font color="#E5E5E5"> are okay as</font><font color="#CCCCCC"> long</font><font color="#E5E5E5"> as you</font><font color="#CCCCCC"> don't either</font>

407
00:13:37,290 --> 00:13:40,680
set type name handling or add a

408
00:13:38,880 --> 00:13:43,680
<font color="#CCCCCC">javascript</font><font color="#E5E5E5"> IPERS over there safe by</font>

409
00:13:40,680 --> 00:13:45,810
default that<font color="#E5E5E5"> said you can make all of</font>

410
00:13:43,680 --> 00:13:47,579
these exploitable by adding some<font color="#E5E5E5"> other</font>

411
00:13:45,810 --> 00:13:48,989
mechanism for<font color="#E5E5E5"> an attacker</font><font color="#CCCCCC"> to determine</font>

412
00:13:47,580 --> 00:13:51,330
what type will be<font color="#E5E5E5"> used for</font><font color="#CCCCCC"> the</font>

413
00:13:48,990 --> 00:13:52,800
templating<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> d</font><font color="#E5E5E5"> serialization there</font>

414
00:13:51,330 --> 00:13:54,120
have<font color="#E5E5E5"> been cases where for instance data</font>

415
00:13:52,800 --> 00:13:56,010
contract serializer was used

416
00:13:54,120 --> 00:13:57,810
however they added next<font color="#E5E5E5"> to the data</font>

417
00:13:56,010 --> 00:14:00,210
contractor data contract serializer

418
00:13:57,810 --> 00:14:01,260
extreme some other element<font color="#E5E5E5"> that said and</font>

419
00:14:00,210 --> 00:14:03,120
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the type you used for</font><font color="#E5E5E5"> your</font>

420
00:14:01,260 --> 00:14:04,470
<font color="#E5E5E5">template when you do</font><font color="#CCCCCC"> D serialization as</font>

421
00:14:03,120 --> 00:14:09,120
soon as you do that<font color="#CCCCCC"> it's exploitable</font>

422
00:14:04,470 --> 00:14:11,490
again the third way<font color="#CCCCCC"> you can do this and</font>

423
00:14:09,120 --> 00:14:12,720
<font color="#E5E5E5">the tricky one is to contain</font><font color="#CCCCCC"> the sorts</font>

424
00:14:11,490 --> 00:14:14,490
of<font color="#E5E5E5"> types that are allowed during the</font>

425
00:14:12,720 --> 00:14:16,950
serialization<font color="#CCCCCC"> I don't really recommend</font>

426
00:14:14,490 --> 00:14:18,570
<font color="#CCCCCC">this</font><font color="#E5E5E5"> it's very difficult to do right but</font>

427
00:14:16,950 --> 00:14:21,750
it seems sometimes<font color="#E5E5E5"> it's necessary</font><font color="#CCCCCC"> for</font>

428
00:14:18,570 --> 00:14:22,650
certain<font color="#CCCCCC"> application designs so what</font>

429
00:14:21,750 --> 00:14:24,270
you're going<font color="#E5E5E5"> to do is you're gonna</font><font color="#CCCCCC"> need</font>

430
00:14:22,650 --> 00:14:25,650
<font color="#CCCCCC">to essentially</font><font color="#E5E5E5"> create an allow list for</font>

431
00:14:24,270 --> 00:14:27,689
the types that<font color="#CCCCCC"> can create be created</font>

432
00:14:25,650 --> 00:14:29,010
during the serialization<font color="#E5E5E5"> it's hard to do</font>

433
00:14:27,690 --> 00:14:30,720
<font color="#E5E5E5">that correctly because there's lots of</font>

434
00:14:29,010 --> 00:14:32,360
types<font color="#E5E5E5"> internet that seem innocuous but</font>

435
00:14:30,720 --> 00:14:35,340
<font color="#E5E5E5">are</font><font color="#CCCCCC"> actually dangerous to deserialize</font>

436
00:14:32,360 --> 00:14:36,690
<font color="#CCCCCC">hash</font><font color="#E5E5E5"> table is an example of this you</font>

437
00:14:35,340 --> 00:14:38,370
<font color="#E5E5E5">would</font><font color="#CCCCCC"> think hash table would be</font><font color="#E5E5E5"> safe to</font>

438
00:14:36,690 --> 00:14:39,750
deserialize but it actually has a member

439
00:14:38,370 --> 00:14:41,210
which says this<font color="#E5E5E5"> is how much memory you</font>

440
00:14:39,750 --> 00:14:44,310
<font color="#E5E5E5">should allocate for the hash</font><font color="#CCCCCC"> table</font><font color="#E5E5E5"> and</font>

441
00:14:41,210 --> 00:14:47,190
certain serialization<font color="#E5E5E5"> api's will let you</font>

442
00:14:44,310 --> 00:14:48,420
set<font color="#E5E5E5"> that member and</font><font color="#CCCCCC"> will then cause the</font>

443
00:14:47,190 --> 00:14:50,160
<font color="#E5E5E5">hash table to try to allocate</font>

444
00:14:48,420 --> 00:14:52,469
potentially arbitrary amounts of memory

445
00:14:50,160 --> 00:14:56,040
<font color="#E5E5E5">which lets you at least get a denial of</font>

446
00:14:52,470 --> 00:14:58,560
<font color="#CCCCCC">service attack off so the way you want</font>

447
00:14:56,040 --> 00:15:00,240
<font color="#E5E5E5">to do an allow list is not this if you</font>

448
00:14:58,560 --> 00:15:02,010
do a typecast<font color="#E5E5E5"> after</font><font color="#CCCCCC"> an insecurity</font>

449
00:15:00,240 --> 00:15:03,330
<font color="#E5E5E5">serialization that's not going</font><font color="#CCCCCC"> to</font>

450
00:15:02,010 --> 00:15:06,360
<font color="#E5E5E5">actually provide you with any</font><font color="#CCCCCC"> security</font>

451
00:15:03,330 --> 00:15:07,980
most gadgets that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> get code</font>

452
00:15:06,360 --> 00:15:09,810
execution<font color="#E5E5E5"> through fruity serialization</font>

453
00:15:07,980 --> 00:15:11,370
<font color="#CCCCCC">well I've already executed before you</font>

454
00:15:09,810 --> 00:15:14,099
get an invalid<font color="#E5E5E5"> cast exception for this</font>

455
00:15:11,370 --> 00:15:15,660
sort of<font color="#E5E5E5"> thing instead</font><font color="#CCCCCC"> the sort of OK way</font>

456
00:15:14,100 --> 00:15:17,040
<font color="#E5E5E5">to enforce</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> allow us for</font><font color="#CCCCCC"> UD</font>

457
00:15:15,660 --> 00:15:19,319
<font color="#E5E5E5">serialization is to use a serialization</font>

458
00:15:17,040 --> 00:15:20,969
binder you can do that<font color="#E5E5E5"> for binary</font>

459
00:15:19,320 --> 00:15:22,740
formatter you can do that<font color="#E5E5E5"> for Jason net</font>

460
00:15:20,970 --> 00:15:24,060
there's a few other<font color="#E5E5E5"> serialization</font><font color="#CCCCCC"> api's</font>

461
00:15:22,740 --> 00:15:26,070
<font color="#E5E5E5">that also allow you to specify a</font>

462
00:15:24,060 --> 00:15:27,420
serialization binder and the way you're

463
00:15:26,070 --> 00:15:29,100
<font color="#E5E5E5">going to do that is you're going to</font>

464
00:15:27,420 --> 00:15:31,170
subclass a serialization<font color="#E5E5E5"> binder type</font>

465
00:15:29,100 --> 00:15:32,670
you're<font color="#E5E5E5"> going to override the binder type</font>

466
00:15:31,170 --> 00:15:33,449
<font color="#E5E5E5">method and you're going to throw an</font>

467
00:15:32,670 --> 00:15:34,709
exception if that

468
00:15:33,449 --> 00:15:38,488
find the type method<font color="#E5E5E5"> gets called with</font>

469
00:15:34,709 --> 00:15:39,660
<font color="#E5E5E5">the type you didn't expect you need to</font>

470
00:15:38,489 --> 00:15:41,910
keep in mind<font color="#CCCCCC"> that your binder is going</font>

471
00:15:39,660 --> 00:15:43,738
to be called<font color="#E5E5E5"> for every</font><font color="#CCCCCC"> type involved in</font>

472
00:15:41,910 --> 00:15:44,929
the<font color="#E5E5E5"> D serialization not just that root</font>

473
00:15:43,739 --> 00:15:47,699
object<font color="#CCCCCC"> that you're trying</font><font color="#E5E5E5"> to deserialize</font>

474
00:15:44,929 --> 00:15:49,499
<font color="#CCCCCC">so if your object has</font><font color="#E5E5E5"> members and that</font>

475
00:15:47,699 --> 00:15:51,209
up and those objects have members and so

476
00:15:49,499 --> 00:15:53,730
on<font color="#E5E5E5"> each of those types is also going</font><font color="#CCCCCC"> to</font>

477
00:15:51,209 --> 00:15:56,488
<font color="#E5E5E5">be called or</font><font color="#CCCCCC"> past</font><font color="#E5E5E5"> duty or</font><font color="#CCCCCC"> by the</font><font color="#E5E5E5"> type</font>

478
00:15:53,730 --> 00:15:58,259
<font color="#E5E5E5">method you also want to make sure that</font>

479
00:15:56,489 --> 00:16:02,369
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> doing one to one type matching</font>

480
00:15:58,259 --> 00:16:03,839
with this<font color="#E5E5E5"> so you don't want to use is</font>

481
00:16:02,369 --> 00:16:05,309
assignable from you don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> allow</font>

482
00:16:03,839 --> 00:16:06,600
polymorphism that<font color="#E5E5E5"> gives you the same</font>

483
00:16:05,309 --> 00:16:08,999
sort<font color="#CCCCCC"> of vulnerability I was explaining</font>

484
00:16:06,600 --> 00:16:10,410
with service<font color="#E5E5E5"> doc text you also can't</font>

485
00:16:08,999 --> 00:16:12,779
just return<font color="#E5E5E5"> know when you see an</font>

486
00:16:10,410 --> 00:16:14,189
unexpected type you have<font color="#CCCCCC"> to throw an</font>

487
00:16:12,779 --> 00:16:16,019
exception<font color="#CCCCCC"> because when you return</font><font color="#E5E5E5"> null</font>

488
00:16:14,189 --> 00:16:18,358
certain serialization<font color="#CCCCCC"> api's will just</font>

489
00:16:16,019 --> 00:16:20,009
fall back<font color="#E5E5E5"> to a default binder and when</font>

490
00:16:18,359 --> 00:16:21,239
<font color="#E5E5E5">that happens</font><font color="#CCCCCC"> the default binder will</font>

491
00:16:20,009 --> 00:16:22,759
just create<font color="#E5E5E5"> what other type it's asked</font>

492
00:16:21,239 --> 00:16:25,410
for and you don't<font color="#CCCCCC"> achieve anything</font><font color="#E5E5E5"> and</font>

493
00:16:22,759 --> 00:16:26,999
you don't<font color="#E5E5E5"> want to use reflection so</font>

494
00:16:25,410 --> 00:16:28,649
first if you're trying to<font color="#E5E5E5"> use reflection</font>

495
00:16:26,999 --> 00:16:30,809
<font color="#E5E5E5">to compare type against type instead of</font>

496
00:16:28,649 --> 00:16:32,519
type name against type name it's going

497
00:16:30,809 --> 00:16:33,988
<font color="#CCCCCC">to be really slow and you're also</font>

498
00:16:32,519 --> 00:16:35,519
creating<font color="#E5E5E5"> a situation</font><font color="#CCCCCC"> where an attacker</font>

499
00:16:33,989 --> 00:16:39,179
can maybe make<font color="#E5E5E5"> your process load</font>

500
00:16:35,519 --> 00:16:40,410
<font color="#CCCCCC">Assemblies you didn't intend to so</font>

501
00:16:39,179 --> 00:16:41,459
here's an example<font color="#E5E5E5"> of a good</font>

502
00:16:40,410 --> 00:16:43,649
serialization binder

503
00:16:41,459 --> 00:16:45,268
here we're<font color="#CCCCCC"> subclassing the serialization</font>

504
00:16:43,649 --> 00:16:47,279
binder type we're overriding bind the

505
00:16:45,269 --> 00:16:49,649
type<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> this list of tuples</font><font color="#E5E5E5"> that</font>

506
00:16:47,279 --> 00:16:51,089
<font color="#E5E5E5">map string the type and whenever</font><font color="#CCCCCC"> recall</font>

507
00:16:49,649 --> 00:16:52,559
with the type we make sure<font color="#E5E5E5"> that it</font>

508
00:16:51,089 --> 00:16:54,539
<font color="#E5E5E5">matches one of the type strings if it</font>

509
00:16:52,559 --> 00:16:55,819
does we return that<font color="#E5E5E5"> type if it doesn't</font>

510
00:16:54,539 --> 00:16:59,850
match any of<font color="#E5E5E5"> them we throw an exception</font>

511
00:16:55,819 --> 00:17:01,049
<font color="#E5E5E5">that's the way you want to do it and now</font>

512
00:16:59,850 --> 00:17:04,470
I'll give you<font color="#E5E5E5"> some</font><font color="#CCCCCC"> advice on specific</font>

513
00:17:01,049 --> 00:17:05,069
<font color="#E5E5E5">serialization api's so for binary</font>

514
00:17:04,470 --> 00:17:06,659
<font color="#E5E5E5">formatter</font>

515
00:17:05,069 --> 00:17:08,279
<font color="#E5E5E5">don't use binary formatter to</font>

516
00:17:06,659 --> 00:17:10,470
deserialize an untrusted stream<font color="#CCCCCC"> without</font>

517
00:17:08,279 --> 00:17:12,299
a binder<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> the classic D</font>

518
00:17:10,470 --> 00:17:13,949
serialization vulnerability<font color="#E5E5E5"> it's the one</font>

519
00:17:12,299 --> 00:17:17,099
you can<font color="#E5E5E5"> find every word just avoid doing</font>

520
00:17:13,949 --> 00:17:18,630
it if you're using<font color="#CCCCCC"> binary format or you</font>

521
00:17:17,099 --> 00:17:20,879
<font color="#CCCCCC">might consider</font><font color="#E5E5E5"> using some other</font>

522
00:17:18,630 --> 00:17:23,519
serialization API instead<font color="#E5E5E5"> data contract</font>

523
00:17:20,880 --> 00:17:24,809
serializer and<font color="#CCCCCC"> XML serialize</font><font color="#E5E5E5"> do the job</font>

524
00:17:23,519 --> 00:17:27,149
<font color="#CCCCCC">that</font><font color="#E5E5E5"> people are trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do with binary</font>

525
00:17:24,809 --> 00:17:28,470
formatter alternatively if you're using

526
00:17:27,148 --> 00:17:29,908
binary<font color="#CCCCCC"> for one</font><font color="#E5E5E5"> or two C serialize a</font>

527
00:17:28,470 --> 00:17:33,230
stream<font color="#CCCCCC"> that you want the user to hold on</font>

528
00:17:29,909 --> 00:17:36,210
to again<font color="#CCCCCC"> in H Mac it's a good</font><font color="#E5E5E5"> idea</font>

529
00:17:33,230 --> 00:17:37,950
asp.net<font color="#E5E5E5"> view</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> so asp.net view state</font>

530
00:17:36,210 --> 00:17:40,139
is actually serialized in DC<font color="#CCCCCC"> Ollie's</font>

531
00:17:37,950 --> 00:17:42,330
using binary formatter this means that

532
00:17:40,139 --> 00:17:44,428
if an attacker could<font color="#CCCCCC"> actually modify the</font>

533
00:17:42,330 --> 00:17:47,100
view state they<font color="#E5E5E5"> could get our CEO in</font>

534
00:17:44,429 --> 00:17:49,680
your<font color="#E5E5E5"> server which is pretty bad</font>

535
00:17:47,100 --> 00:17:51,030
asp.net<font color="#CCCCCC"> by default has an H</font><font color="#E5E5E5"> Mac that it</font>

536
00:17:49,680 --> 00:17:53,100
<font color="#E5E5E5">associates</font><font color="#CCCCCC"> with that view state to</font>

537
00:17:51,030 --> 00:17:55,170
<font color="#E5E5E5">prevent it from being modified the trick</font>

538
00:17:53,100 --> 00:17:57,060
with this is that the<font color="#CCCCCC"> secret use</font><font color="#E5E5E5"> for the</font>

539
00:17:55,170 --> 00:18:00,150
<font color="#CCCCCC">HM AK on view state</font><font color="#E5E5E5"> is just a machine</font>

540
00:17:57,060 --> 00:18:02,220
key this means<font color="#E5E5E5"> that if anyone can get</font>

541
00:18:00,150 --> 00:18:04,170
access<font color="#E5E5E5"> to your machine key then they you</font>

542
00:18:02,220 --> 00:18:05,490
can reproduce the<font color="#E5E5E5"> H Mac make their own</font>

543
00:18:04,170 --> 00:18:07,380
view<font color="#E5E5E5"> state stick it in the query string</font>

544
00:18:05,490 --> 00:18:09,840
and get<font color="#CCCCCC"> RCE on your server with a get</font>

545
00:18:07,380 --> 00:18:11,880
request<font color="#E5E5E5"> so you need to treat the machine</font>

546
00:18:09,840 --> 00:18:15,389
key for a classic asp.net server as

547
00:18:11,880 --> 00:18:17,610
equivalent<font color="#E5E5E5"> to an admin password it needs</font>

548
00:18:15,390 --> 00:18:19,410
to be difficult<font color="#E5E5E5"> to guess and completely</font>

549
00:18:17,610 --> 00:18:24,030
<font color="#E5E5E5">protect it however you would protect</font>

550
00:18:19,410 --> 00:18:25,530
passwords Jason<font color="#CCCCCC"> got net don't use Jason</font>

551
00:18:24,030 --> 00:18:27,930
done<font color="#E5E5E5"> that to deserialize an untrusted</font>

552
00:18:25,530 --> 00:18:29,220
stream if you want to set with titanum

553
00:18:27,930 --> 00:18:31,740
handling set to anything<font color="#CCCCCC"> other than none</font>

554
00:18:29,220 --> 00:18:33,510
if you have to have type name handlings

555
00:18:31,740 --> 00:18:36,120
for polymorphism or something like<font color="#E5E5E5"> that</font>

556
00:18:33,510 --> 00:18:37,740
use a<font color="#E5E5E5"> serialization binder serialization</font>

557
00:18:36,120 --> 00:18:40,699
<font color="#CCCCCC">binders for jason that are exactly the</font>

558
00:18:37,740 --> 00:18:43,650
<font color="#CCCCCC">same as the ones</font><font color="#E5E5E5"> for binary formatter</font>

559
00:18:40,700 --> 00:18:46,650
javascript serializer don't use it with

560
00:18:43,650 --> 00:18:48,390
<font color="#E5E5E5">the</font><font color="#CCCCCC"> JavaScript type resolver if you're</font>

561
00:18:46,650 --> 00:18:49,680
going<font color="#E5E5E5"> to actually use</font><font color="#CCCCCC"> the armor</font>

562
00:18:48,390 --> 00:18:51,900
<font color="#CCCCCC">serialize you to deserialize an</font>

563
00:18:49,680 --> 00:18:54,030
untrusted stream<font color="#E5E5E5"> don't allow</font><font color="#CCCCCC"> for any</font>

564
00:18:51,900 --> 00:18:57,300
method<font color="#E5E5E5"> where an attack them can choose</font>

565
00:18:54,030 --> 00:18:59,610
the template<font color="#E5E5E5"> to type either service</font><font color="#CCCCCC"> dock</font>

566
00:18:57,300 --> 00:19:01,200
<font color="#CCCCCC">text my recommendation for service stack</font>

567
00:18:59,610 --> 00:19:03,899
<font color="#E5E5E5">text is to only use it to deserialize</font>

568
00:19:01,200 --> 00:19:05,160
streams that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> absolutely trust</font><font color="#E5E5E5"> if you</font>

569
00:19:03,900 --> 00:19:06,450
want to use<font color="#E5E5E5"> it to deserialize an</font>

570
00:19:05,160 --> 00:19:08,190
untrusted stream you have<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure</font>

571
00:19:06,450 --> 00:19:09,900
<font color="#E5E5E5">that the membership graph for the object</font>

572
00:19:08,190 --> 00:19:12,300
<font color="#CCCCCC">that using your</font><font color="#E5E5E5"> template can't possibly</font>

573
00:19:09,900 --> 00:19:16,980
contain a member of type object that's

574
00:19:12,300 --> 00:19:18,000
ridiculously difficult to do<font color="#CCCCCC"> so how can</font>

575
00:19:16,980 --> 00:19:20,190
<font color="#E5E5E5">you scan for serialization</font>

576
00:19:18,000 --> 00:19:22,080
vulnerabilities then well first there's

577
00:19:20,190 --> 00:19:23,580
an obvious<font color="#E5E5E5"> thing you can look for</font>

578
00:19:22,080 --> 00:19:26,070
potentially<font color="#E5E5E5"> dangerous serialization</font>

579
00:19:23,580 --> 00:19:29,240
api's in your source<font color="#E5E5E5"> code you can do</font>

580
00:19:26,070 --> 00:19:31,470
this just<font color="#E5E5E5"> by grep or text-based search</font>

581
00:19:29,240 --> 00:19:33,090
there's the api's themselves and there's

582
00:19:31,470 --> 00:19:34,650
also indicators<font color="#CCCCCC"> that ApS are being used</font>

583
00:19:33,090 --> 00:19:36,570
in securely<font color="#E5E5E5"> so if you see type</font><font color="#CCCCCC"> name</font>

584
00:19:34,650 --> 00:19:37,950
handling at all in<font color="#E5E5E5"> your source it</font>

585
00:19:36,570 --> 00:19:40,350
probably indicates that<font color="#CCCCCC"> someone is using</font>

586
00:19:37,950 --> 00:19:42,120
<font color="#E5E5E5">JSON</font><font color="#CCCCCC"> that in an</font><font color="#E5E5E5"> unsafe way similar if</font>

587
00:19:40,350 --> 00:19:43,320
you see similarly if you see simple type

588
00:19:42,120 --> 00:19:45,060
resolver it's an indicator<font color="#E5E5E5"> that</font>

589
00:19:43,320 --> 00:19:47,780
<font color="#CCCCCC">JavaScript serialize ER or a related</font>

590
00:19:45,060 --> 00:19:49,649
serialize<font color="#CCCCCC"> err is being used unsafely</font>

591
00:19:47,780 --> 00:19:52,280
there's a<font color="#CCCCCC"> couple of</font><font color="#E5E5E5"> tricks you can use</font>

592
00:19:49,650 --> 00:19:54,420
<font color="#E5E5E5">for dynamic analysis for this too so</font>

593
00:19:52,280 --> 00:19:56,040
there's a common<font color="#E5E5E5"> anti pattern where</font>

594
00:19:54,420 --> 00:19:58,080
binary formatter is used with<font color="#CCCCCC"> a base64</font>

595
00:19:56,040 --> 00:19:59,620
<font color="#E5E5E5">encode</font><font color="#CCCCCC"> ur and then the string</font><font color="#E5E5E5"> that's</font>

596
00:19:58,080 --> 00:20:02,559
produced is put in<font color="#E5E5E5"> say</font>

597
00:19:59,620 --> 00:20:04,809
<font color="#CCCCCC">oki a query string form post data</font><font color="#E5E5E5"> things</font>

598
00:20:02,559 --> 00:20:08,350
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> sometimes even in like file</font>

599
00:20:04,809 --> 00:20:10,990
contents<font color="#E5E5E5"> and when you have a 64 encode a</font>

600
00:20:08,350 --> 00:20:12,429
binary<font color="#E5E5E5"> format or serialized stream the</font>

601
00:20:10,990 --> 00:20:16,960
resulting<font color="#E5E5E5"> string always begins with the</font>

602
00:20:12,430 --> 00:20:18,340
<font color="#E5E5E5">all-caps string a</font><font color="#CCCCCC"> ae</font><font color="#E5E5E5"> aad what you can do</font>

603
00:20:16,960 --> 00:20:19,990
is you can<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at your web traffic logs</font>

604
00:20:18,340 --> 00:20:21,159
for that string<font color="#CCCCCC"> if you see it it's a</font>

605
00:20:19,990 --> 00:20:23,370
strong indicator that<font color="#E5E5E5"> you have a</font>

606
00:20:21,160 --> 00:20:25,480
potential serialization vulnerability

607
00:20:23,370 --> 00:20:27,639
similarly dollar sign type and

608
00:20:25,480 --> 00:20:30,160
underscore underscore type<font color="#E5E5E5"> can indicate</font>

609
00:20:27,640 --> 00:20:31,900
cases where some other serialization<font color="#E5E5E5"> API</font>

610
00:20:30,160 --> 00:20:33,190
is being used in such a way that<font color="#E5E5E5"> the</font>

611
00:20:31,900 --> 00:20:35,230
type<font color="#CCCCCC"> information is taken from the</font>

612
00:20:33,190 --> 00:20:38,770
stream that's going to be<font color="#E5E5E5"> JavaScript</font>

613
00:20:35,230 --> 00:20:39,850
serializer JSON<font color="#E5E5E5"> net service</font><font color="#CCCCCC"> doc txt</font><font color="#E5E5E5"> so</font>

614
00:20:38,770 --> 00:20:41,920
that's another thing<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> look for in</font>

615
00:20:39,850 --> 00:20:46,750
web<font color="#E5E5E5"> traffic logs or sometimes even in</font>

616
00:20:41,920 --> 00:20:49,440
file data and that's my<font color="#E5E5E5"> presentation if</font>

617
00:20:46,750 --> 00:20:49,440
there's any questions

618
00:20:51,030 --> 00:20:58,720
[Applause]

619
00:21:04,370 --> 00:21:07,340
<font color="#CCCCCC">I can't possibly have explained</font>

620
00:21:05,750 --> 00:21:10,510
<font color="#CCCCCC">everything everybody has ever wondered</font>

621
00:21:07,340 --> 00:21:10,510
about serialization and deserialization

622
00:21:10,570 --> 00:21:14,740
<font color="#E5E5E5">there we go we</font><font color="#CCCCCC"> have a question</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

623
00:21:12,559 --> 00:21:14,740
<font color="#CCCCCC">back</font>

624
00:21:22,230 --> 00:21:28,650
hi<font color="#E5E5E5"> on your sample serialization binder</font>

625
00:21:26,160 --> 00:21:30,419
should you not be verifying the fully

626
00:21:28,650 --> 00:21:37,980
<font color="#E5E5E5">qualified name including the assembly</font>

627
00:21:30,419 --> 00:21:41,150
name as part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that yes I should that</font>

628
00:21:37,980 --> 00:21:43,620
was probably the<font color="#E5E5E5"> most succinct answer to</font>

629
00:21:41,150 --> 00:21:47,720
to a technical question I've heard<font color="#E5E5E5"> him</font>

630
00:21:43,620 --> 00:21:47,719
the<font color="#E5E5E5"> entire</font><font color="#CCCCCC"> he'll blue adds</font><font color="#E5E5E5"> Bravo</font>

631
00:21:47,900 --> 00:21:55,080
any additional<font color="#E5E5E5"> questions for for mr.</font>

632
00:21:51,480 --> 00:21:58,250
<font color="#E5E5E5">Burch what are we going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do when we</font>

633
00:21:55,080 --> 00:22:05,220
get<font color="#E5E5E5"> home tonight</font><font color="#CCCCCC"> we're gonna check our</font>

634
00:21:58,250 --> 00:22:07,020
serialization code please<font color="#E5E5E5"> we could write</font>

635
00:22:05,220 --> 00:22:08,669
a purposefully vulnerable app and have

636
00:22:07,020 --> 00:22:12,179
<font color="#E5E5E5">fun with it please don't do that</font><font color="#CCCCCC"> please</font>

637
00:22:08,669 --> 00:22:14,100
<font color="#CCCCCC">please don't do that so this is a set of</font>

638
00:22:12,179 --> 00:22:16,200
<font color="#CCCCCC">problems</font><font color="#E5E5E5"> that is complicated</font><font color="#CCCCCC"> because the</font>

639
00:22:14,100 --> 00:22:18,899
traditional<font color="#E5E5E5"> world of identify the</font>

640
00:22:16,200 --> 00:22:20,910
problem<font color="#CCCCCC"> patch</font><font color="#E5E5E5"> the problem it doesn't</font>

641
00:22:18,900 --> 00:22:22,950
<font color="#E5E5E5">really it doesn't really apply in the</font>

642
00:22:20,910 --> 00:22:25,350
same in<font color="#E5E5E5"> the same sense here each</font>

643
00:22:22,950 --> 00:22:26,760
individual<font color="#CCCCCC"> person that is developing in</font>

644
00:22:25,350 --> 00:22:29,549
this space needs<font color="#E5E5E5"> to take accountability</font>

645
00:22:26,760 --> 00:22:32,400
<font color="#CCCCCC">for what</font><font color="#E5E5E5"> their code is doing there are</font>

646
00:22:29,549 --> 00:22:33,929
tools and<font color="#E5E5E5"> techniques and Jonathan's been</font>

647
00:22:32,400 --> 00:22:35,610
great about<font color="#CCCCCC"> showing you the ways you can</font>

648
00:22:33,929 --> 00:22:36,900
<font color="#E5E5E5">start to</font><font color="#CCCCCC"> identify these behaviors and</font>

649
00:22:35,610 --> 00:22:38,939
<font color="#E5E5E5">things you might already have deployed</font>

650
00:22:36,900 --> 00:22:40,950
<font color="#E5E5E5">but it at a minimum on</font><font color="#CCCCCC"> a go-forward</font>

651
00:22:38,940 --> 00:22:43,590
basis you<font color="#E5E5E5"> need to be thinking about how</font>

652
00:22:40,950 --> 00:22:45,059
to use<font color="#CCCCCC"> serialization safely to ensure</font>

653
00:22:43,590 --> 00:22:48,559
that<font color="#E5E5E5"> you don't find yourself in a really</font>

654
00:22:45,059 --> 00:22:51,210
messy situation further down the road so

655
00:22:48,559 --> 00:22:53,879
<font color="#E5E5E5">without any additional questions</font><font color="#CCCCCC"> we have</font>

656
00:22:51,210 --> 00:22:56,040
a few<font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> as we reset for our next</font>

657
00:22:53,880 --> 00:22:57,060
<font color="#CCCCCC">presentation</font><font color="#E5E5E5"> a big THANK YOU</font><font color="#CCCCCC"> to Jonathan</font>

658
00:22:56,040 --> 00:23:02,720
first<font color="#E5E5E5"> time</font>

659
00:22:57,060 --> 00:23:02,720
[Applause]

