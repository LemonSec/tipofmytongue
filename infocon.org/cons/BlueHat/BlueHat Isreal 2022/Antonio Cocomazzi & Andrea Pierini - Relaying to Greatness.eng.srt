1
00:00:00,930 --> 00:00:08,260
[Music]

2
00:00:14,520 --> 00:00:18,448
[Music]

3
00:00:19,840 --> 00:00:22,160
okay

4
00:00:22,480 --> 00:00:25,359
and wow it's really really cool to be

5
00:00:25,359 --> 00:00:26,320
here

6
00:00:26,320 --> 00:00:29,439
and i want to thank blackhead bluehead

7
00:00:29,439 --> 00:00:32,479
sorry for

8
00:00:32,479 --> 00:00:35,440
for giving us this opportunity

9
00:00:35,440 --> 00:00:38,079
it was really a mistake really it was a

10
00:00:38,079 --> 00:00:40,320
mistake it was not intended for giving

11
00:00:40,320 --> 00:00:42,399
us this opportunity

12
00:00:42,399 --> 00:00:43,600
and

13
00:00:43,600 --> 00:00:47,280
for this amazing even and even and

14
00:00:47,280 --> 00:00:49,200
even more amazing

15
00:00:49,200 --> 00:00:51,760
location

16
00:00:52,719 --> 00:00:53,920
okay

17
00:00:53,920 --> 00:00:57,520
so uh i do i didn't see the video but

18
00:00:57,520 --> 00:00:59,680
from what i understand

19
00:00:59,680 --> 00:01:02,239
they know much more about me than myself

20
00:01:02,239 --> 00:01:04,799
so i will skip my boring presentation

21
00:01:04,799 --> 00:01:06,640
antonio if you have something more to

22
00:01:06,640 --> 00:01:09,640
say

23
00:01:13,119 --> 00:01:15,119
hello hello

24
00:01:15,119 --> 00:01:17,680
we got it hi everyone i'm antonio

25
00:01:17,680 --> 00:01:19,520
cocomatsi and

26
00:01:19,520 --> 00:01:22,000
i'm a threat researcher at sentinel one

27
00:01:22,000 --> 00:01:24,560
i mainly deal with the mother analysis

28
00:01:24,560 --> 00:01:27,439
reverse engineering and in my free time

29
00:01:27,439 --> 00:01:30,240
i use those skills to for offensive

30
00:01:30,240 --> 00:01:33,200
purposes so like coding offensive tools

31
00:01:33,200 --> 00:01:34,000
and

32
00:01:34,000 --> 00:01:36,880
finding vulnerabilities on the right you

33
00:01:36,880 --> 00:01:39,360
can find my public channel you can find

34
00:01:39,360 --> 00:01:42,000
my twitter account and my github account

35
00:01:42,000 --> 00:01:44,799
in which i often publish my updates

36
00:01:44,799 --> 00:01:47,600
about research and tools back to you

37
00:01:47,600 --> 00:01:50,000
andrea

38
00:01:50,000 --> 00:01:50,720
so

39
00:01:50,720 --> 00:01:53,360
first of all why this talk may i ask you

40
00:01:53,360 --> 00:01:56,240
a question i it's i don't like to do it

41
00:01:56,240 --> 00:01:57,280
but it

42
00:01:57,280 --> 00:01:59,920
it's important for us to understand

43
00:01:59,920 --> 00:02:03,600
how many of you know ntlm relay

44
00:02:03,600 --> 00:02:06,479
wow great everyone knows it okay so why

45
00:02:06,479 --> 00:02:09,280
this talk about ntm and tlm relay

46
00:02:09,280 --> 00:02:12,400
because as you can imagine ntm relay is

47
00:02:12,400 --> 00:02:15,680
well known but when we consider an tlm

48
00:02:15,680 --> 00:02:17,360
relay we always

49
00:02:17,360 --> 00:02:19,520
take in consideration uh the classic

50
00:02:19,520 --> 00:02:21,440
protocols such as

51
00:02:21,440 --> 00:02:25,440
smb http ldap and so on but what about

52
00:02:25,440 --> 00:02:28,640
tcl rpc because rpc is a protocol which

53
00:02:28,640 --> 00:02:32,080
is heavily used in windows and to

54
00:02:32,080 --> 00:02:34,160
support the intel process com inter

55
00:02:34,160 --> 00:02:36,000
process communications for com objects

56
00:02:36,000 --> 00:02:37,360
and so on

57
00:02:37,360 --> 00:02:39,760
and the interesting thing is that rpc

58
00:02:39,760 --> 00:02:42,239
codes are always or

59
00:02:42,239 --> 00:02:45,360
very often authenticated which exposes

60
00:02:45,360 --> 00:02:48,000
to a particular attack surface which is

61
00:02:48,000 --> 00:02:49,680
to relay

62
00:02:49,680 --> 00:02:52,319
the authentication because

63
00:02:52,319 --> 00:02:54,879
rpc can use different

64
00:02:54,879 --> 00:02:57,760
authentication mechanisms such as

65
00:02:57,760 --> 00:03:01,440
negotiate or enter them and klm is of

66
00:03:01,440 --> 00:03:04,319
our particular interest because if we

67
00:03:04,319 --> 00:03:05,519
are able

68
00:03:05,519 --> 00:03:08,560
somehow in some way to perform in a man

69
00:03:08,560 --> 00:03:10,720
in the middle attack we can relay

70
00:03:10,720 --> 00:03:13,760
authentication to other services and

71
00:03:13,760 --> 00:03:16,879
other servers and the final last but not

72
00:03:16,879 --> 00:03:19,440
least that the commenter there are some

73
00:03:19,440 --> 00:03:22,319
decommand rpc triggers which do not

74
00:03:22,319 --> 00:03:23,680
require

75
00:03:23,680 --> 00:03:26,000
user interaction

76
00:03:26,000 --> 00:03:28,640
so this is the agenda very short i

77
00:03:28,640 --> 00:03:30,720
promise it very very short introduction

78
00:03:30,720 --> 00:03:32,480
on the basic concepts

79
00:03:32,480 --> 00:03:34,239
like rpc

80
00:03:34,239 --> 00:03:37,120
dcom and klm relay then we will go to

81
00:03:37,120 --> 00:03:40,080
the juicy part where we explain our

82
00:03:40,080 --> 00:03:43,040
research in nplm relay how we perform

83
00:03:43,040 --> 00:03:45,360
cross protocol relay and the

84
00:03:45,360 --> 00:03:47,120
cross-session relay

85
00:03:47,120 --> 00:03:49,680
then we will show you some demos and

86
00:03:49,680 --> 00:03:53,120
according to the time left maybe two or

87
00:03:53,120 --> 00:03:56,080
three okay orbit finger crossed

88
00:03:56,080 --> 00:03:58,319
finally uh the mitigations and the

89
00:03:58,319 --> 00:04:00,000
conclusions

90
00:04:00,000 --> 00:04:04,080
okay let's start with the basic concept

91
00:04:04,159 --> 00:04:05,360
so

92
00:04:05,360 --> 00:04:07,760
what is rpc well

93
00:04:07,760 --> 00:04:11,840
everyone knows it but it's just

94
00:04:12,319 --> 00:04:15,200
a technique which permits a program to

95
00:04:15,200 --> 00:04:17,759
call a procedure which is running in a

96
00:04:17,759 --> 00:04:20,238
different address space this can be on

97
00:04:20,238 --> 00:04:23,280
the same machine or over the network and

98
00:04:23,280 --> 00:04:27,040
when and when we are running um a pc

99
00:04:27,040 --> 00:04:29,280
over the network we use some protocols

100
00:04:29,280 --> 00:04:34,160
latch such as tcp udp name pipe http smb

101
00:04:34,160 --> 00:04:37,520
and so on or a local procedure call for

102
00:04:37,520 --> 00:04:41,040
inter process communication msrpc is the

103
00:04:41,040 --> 00:04:44,000
microsoft implementation of rfpc and

104
00:04:44,000 --> 00:04:47,840
it's very very heavily used

105
00:04:48,880 --> 00:04:51,600
it's a client server model

106
00:04:51,600 --> 00:04:54,479
as you can understand i am very bad in

107
00:04:54,479 --> 00:04:57,759
english and even worse in spelling so it

108
00:04:57,759 --> 00:04:59,919
relies on this library and i don't i

109
00:04:59,919 --> 00:05:02,880
won't spell it okay

110
00:05:03,759 --> 00:05:05,120
and

111
00:05:05,120 --> 00:05:07,360
the remote procedure is exposed via

112
00:05:07,360 --> 00:05:09,120
interfaces

113
00:05:09,120 --> 00:05:10,960
which are defined by a particular

114
00:05:10,960 --> 00:05:13,440
language the idl interface definition

115
00:05:13,440 --> 00:05:16,800
language and compiled via a particular

116
00:05:16,800 --> 00:05:18,160
compiler

117
00:05:18,160 --> 00:05:20,000
there is another important service which

118
00:05:20,000 --> 00:05:22,160
is the endpoint mapper service think

119
00:05:22,160 --> 00:05:26,240
about it as a dns which

120
00:05:26,240 --> 00:05:27,919
permits

121
00:05:27,919 --> 00:05:31,759
to identify uh the end the interface of

122
00:05:31,759 --> 00:05:34,400
the end point where this uh and where

123
00:05:34,400 --> 00:05:37,120
this interface is running okay so that

124
00:05:37,120 --> 00:05:39,840
we can contact the remote server based

125
00:05:39,840 --> 00:05:43,680
on server address protocol and port in

126
00:05:43,680 --> 00:05:47,120
the screenshot you can see uh with this

127
00:05:47,120 --> 00:05:50,000
utility port query the all the list of

128
00:05:50,000 --> 00:05:52,800
the registered interfaces in our

129
00:05:52,800 --> 00:05:55,680
endpoint mapper

130
00:05:57,520 --> 00:05:59,600
the com protocol okay

131
00:05:59,600 --> 00:06:01,280
um

132
00:06:01,280 --> 00:06:02,560
basically

133
00:06:02,560 --> 00:06:04,840
com is nothing more

134
00:06:04,840 --> 00:06:06,560
than a

135
00:06:06,560 --> 00:06:09,600
binary software interface which permits

136
00:06:09,600 --> 00:06:12,240
objects to interact with each other

137
00:06:12,240 --> 00:06:15,520
objects can also interact via network

138
00:06:15,520 --> 00:06:18,479
and this is where the dcom protocol

139
00:06:18,479 --> 00:06:20,960
comes in because it's distributed

140
00:06:20,960 --> 00:06:23,120
component object model

141
00:06:23,120 --> 00:06:26,319
and the com obviously is also heavily

142
00:06:26,319 --> 00:06:29,360
used in windows

143
00:06:29,520 --> 00:06:33,360
dcom uses the rpc protocol

144
00:06:33,360 --> 00:06:35,520
we could think about it like dcom is

145
00:06:35,520 --> 00:06:36,720
http

146
00:06:36,720 --> 00:06:39,680
and rpc is tcp okay

147
00:06:39,680 --> 00:06:41,680
and uses the rtc protocol for

148
00:06:41,680 --> 00:06:44,720
communicating over the network

149
00:06:44,720 --> 00:06:47,600
the lpcss service which is running on

150
00:06:47,600 --> 00:06:49,360
every windows system

151
00:06:49,360 --> 00:06:51,680
is the service control manager for

152
00:06:51,680 --> 00:06:53,919
activating and controlling the command d

153
00:06:53,919 --> 00:06:55,440
com servers

154
00:06:55,440 --> 00:06:56,240
and

155
00:06:56,240 --> 00:06:58,560
generic dcom activation mechanisms are

156
00:06:58,560 --> 00:07:00,400
very interesting

157
00:07:00,400 --> 00:07:04,240
for our research because um in this

158
00:07:04,240 --> 00:07:07,360
activation um authentication occurs

159
00:07:07,360 --> 00:07:10,880
especially when oxide resolution occurs

160
00:07:10,880 --> 00:07:13,680
which is um something that antonio will

161
00:07:13,680 --> 00:07:16,160
explain you better but it's something

162
00:07:16,160 --> 00:07:17,120
like the

163
00:07:17,120 --> 00:07:20,639
dns we have um

164
00:07:20,639 --> 00:07:23,520
about what about which i told you

165
00:07:23,520 --> 00:07:25,759
before it's uh

166
00:07:25,759 --> 00:07:28,479
simply in transmitting the necessary

167
00:07:28,479 --> 00:07:32,720
information for contacting the endpoint

168
00:07:32,720 --> 00:07:35,680
here in this very simple schema

169
00:07:35,680 --> 00:07:38,080
we can see how the all the dicom and com

170
00:07:38,080 --> 00:07:40,800
protocol works is very simplified

171
00:07:40,800 --> 00:07:43,120
and highlighted in red there are the

172
00:07:43,120 --> 00:07:46,080
components of our particular interest

173
00:07:46,080 --> 00:07:48,080
because in this components

174
00:07:48,080 --> 00:07:50,720
authentication occurs and we dig deeper

175
00:07:50,720 --> 00:07:52,879
in these components in order to capture

176
00:07:52,879 --> 00:07:56,240
and relay the authentication

177
00:07:56,240 --> 00:07:58,879
and finally ntlm relaying

178
00:07:58,879 --> 00:08:01,680
we all know that it's uh many sort of

179
00:08:01,680 --> 00:08:03,199
men in the middle technique where the

180
00:08:03,199 --> 00:08:04,319
client

181
00:08:04,319 --> 00:08:05,199
uh

182
00:08:05,199 --> 00:08:07,680
thinks he's talking with the real server

183
00:08:07,680 --> 00:08:10,479
and such exchanging the ntlm challenges

184
00:08:10,479 --> 00:08:13,680
and vice versa the server is

185
00:08:13,680 --> 00:08:15,919
thinking he's talking with a legitimate

186
00:08:15,919 --> 00:08:18,800
client instead of the attacker's client

187
00:08:18,800 --> 00:08:21,919
attackers challenge

188
00:08:23,440 --> 00:08:25,599
one thing that we must know that

189
00:08:25,599 --> 00:08:28,960
obviously in ntlm relay the

190
00:08:28,960 --> 00:08:31,840
we have to somehow to quest the victim

191
00:08:31,840 --> 00:08:34,640
which can be the user or the computer to

192
00:08:34,640 --> 00:08:36,080
authenticate

193
00:08:36,080 --> 00:08:38,080
and in our

194
00:08:38,080 --> 00:08:41,679
model okay uh no user interaction is

195
00:08:41,679 --> 00:08:44,399
needed which is very very interesting

196
00:08:44,399 --> 00:08:47,440
for the attacker perspective

197
00:08:47,440 --> 00:08:48,480
okay

198
00:08:48,480 --> 00:08:50,640
i promise it was very short again

199
00:08:50,640 --> 00:08:52,720
apologize for my bad english and now

200
00:08:52,720 --> 00:08:55,839
it's up to you

201
00:08:56,500 --> 00:09:01,040
[Applause]

202
00:09:01,040 --> 00:09:04,000
so in this chapter we are going to

203
00:09:04,000 --> 00:09:05,120
depend

204
00:09:05,120 --> 00:09:07,920
more in what we are what we have

205
00:09:07,920 --> 00:09:10,800
uncovered this new attack surface about

206
00:09:10,800 --> 00:09:14,240
combining ntlm relay with the

207
00:09:14,240 --> 00:09:17,440
dc rpc protocol

208
00:09:17,440 --> 00:09:19,040
so um

209
00:09:19,040 --> 00:09:22,000
before digging into the deep details i

210
00:09:22,000 --> 00:09:26,000
think it's very important to um

211
00:09:26,000 --> 00:09:29,200
tell you how and why we arrived to study

212
00:09:29,200 --> 00:09:31,839
such topics in recent years me and

213
00:09:31,839 --> 00:09:34,160
andrea and other researchers made a lot

214
00:09:34,160 --> 00:09:36,560
of research in the so-called

215
00:09:36,560 --> 00:09:40,720
dcom dcrpc local ntlm reflection this is

216
00:09:40,720 --> 00:09:43,360
a issue that has been reported by

217
00:09:43,360 --> 00:09:45,839
james for show quite some time ago

218
00:09:45,839 --> 00:09:48,480
i think it was 2015

219
00:09:48,480 --> 00:09:52,880
and this is the k component of all the

220
00:09:52,880 --> 00:09:54,720
potato exploits

221
00:09:54,720 --> 00:09:58,560
uh how many of you know potato exploits

222
00:09:58,560 --> 00:10:00,160
oh okay

223
00:10:00,160 --> 00:10:01,360
very good

224
00:10:01,360 --> 00:10:02,880
and

225
00:10:02,880 --> 00:10:06,480
this it's what uh trigger all these

226
00:10:06,480 --> 00:10:10,480
exploits so roten jewish rock potato and

227
00:10:10,480 --> 00:10:13,920
these exploits mainly give you a instant

228
00:10:13,920 --> 00:10:16,000
local privilege escalation from a

229
00:10:16,000 --> 00:10:19,120
service account to system well we we are

230
00:10:19,120 --> 00:10:21,600
not going to talk about it in this talk

231
00:10:21,600 --> 00:10:22,800
in this talk

232
00:10:22,800 --> 00:10:24,880
we already talked about it last year

233
00:10:24,880 --> 00:10:27,360
attack in the box if you want to repeat

234
00:10:27,360 --> 00:10:29,920
you can watch that all today we are

235
00:10:29,920 --> 00:10:32,240
going to present the latest stage of our

236
00:10:32,240 --> 00:10:34,880
research in which we achieved local

237
00:10:34,880 --> 00:10:37,120
privilege escalation even from a normal

238
00:10:37,120 --> 00:10:40,079
user okay

239
00:10:41,040 --> 00:10:41,760
the

240
00:10:41,760 --> 00:10:44,399
crucial part is the d com activation

241
00:10:44,399 --> 00:10:48,000
okay and the d-com activation is

242
00:10:48,000 --> 00:10:51,920
performing a um d-com authentication

243
00:10:51,920 --> 00:10:54,480
over rpc that is arriving to an

244
00:10:54,480 --> 00:10:57,440
arbitrator cp port okay let's see how

245
00:10:57,440 --> 00:10:59,600
this happened because understanding this

246
00:10:59,600 --> 00:11:00,959
will be

247
00:11:00,959 --> 00:11:05,360
crucial for the rest of the exploit

248
00:11:05,360 --> 00:11:06,720
okay

249
00:11:06,720 --> 00:11:09,360
first the potential exploit the rpc

250
00:11:09,360 --> 00:11:12,320
trigger it abuses the standard com

251
00:11:12,320 --> 00:11:13,519
marshaling

252
00:11:13,519 --> 00:11:15,440
the standard commercialing

253
00:11:15,440 --> 00:11:17,360
think about it if you are familiar with

254
00:11:17,360 --> 00:11:20,079
java development it's a kind of object

255
00:11:20,079 --> 00:11:22,560
serialization okay so whenever i talk

256
00:11:22,560 --> 00:11:24,720
about marshalling and our marshalling

257
00:11:24,720 --> 00:11:26,800
think about it as a kind of

258
00:11:26,800 --> 00:11:30,320
serialization and unserialization

259
00:11:30,320 --> 00:11:33,040
what this exploit does

260
00:11:33,040 --> 00:11:35,680
is to craft a malicious

261
00:11:35,680 --> 00:11:37,760
martial interface okay

262
00:11:37,760 --> 00:11:39,040
this

263
00:11:39,040 --> 00:11:40,959
object standard is a particular

264
00:11:40,959 --> 00:11:42,959
structure that i'm going to detail in

265
00:11:42,959 --> 00:11:46,160
the next slide that think about it a

266
00:11:46,160 --> 00:11:49,680
structure with some row stream bytes and

267
00:11:49,680 --> 00:11:52,160
of course we are going to fill with some

268
00:11:52,160 --> 00:11:53,519
particular

269
00:11:53,519 --> 00:11:55,760
field of some particular values that

270
00:11:55,760 --> 00:11:58,399
will allow to poison some answers that

271
00:11:58,399 --> 00:12:00,240
we will see

272
00:12:00,240 --> 00:12:02,720
when the pre-ledger client privileges

273
00:12:02,720 --> 00:12:04,800
server sorry will perform the

274
00:12:04,800 --> 00:12:08,160
unmarshalling it will find the ep of a

275
00:12:08,160 --> 00:12:11,279
malicious oxygen resolver and this needs

276
00:12:11,279 --> 00:12:13,760
to be authenticated

277
00:12:13,760 --> 00:12:16,720
so what happens is that the server will

278
00:12:16,720 --> 00:12:19,519
perform a an authenticated oxy

279
00:12:19,519 --> 00:12:22,880
resolution to our endpoint

280
00:12:22,880 --> 00:12:24,560
this is still not yet a privileged

281
00:12:24,560 --> 00:12:27,040
escalation because we need to convince a

282
00:12:27,040 --> 00:12:29,440
privileged service to do this this

283
00:12:29,440 --> 00:12:30,720
marshalling

284
00:12:30,720 --> 00:12:33,279
how we achieve this we achieve this with

285
00:12:33,279 --> 00:12:35,519
uh by uh by leveraging the decom

286
00:12:35,519 --> 00:12:39,760
activation decom activation is

287
00:12:39,760 --> 00:12:41,360
can be triggered

288
00:12:41,360 --> 00:12:43,440
through this call

289
00:12:43,440 --> 00:12:45,200
use uh

290
00:12:45,200 --> 00:12:47,600
get distance from storage in which we

291
00:12:47,600 --> 00:12:50,639
can pass this raw stream by the martial

292
00:12:50,639 --> 00:12:55,040
interface in a storage object and the

293
00:12:55,040 --> 00:12:58,160
server will perform the pre-legit oxy

294
00:12:58,160 --> 00:12:59,519
resolution

295
00:12:59,519 --> 00:13:02,399
and the authentication will come to the

296
00:13:02,399 --> 00:13:05,120
attacker okay and of course

297
00:13:05,120 --> 00:13:06,880
you can steal this authentication you

298
00:13:06,880 --> 00:13:08,880
will achieve previous escalation

299
00:13:08,880 --> 00:13:11,440
of course all of these nice and

300
00:13:11,440 --> 00:13:13,760
convoluted exploit has been fixed

301
00:13:13,760 --> 00:13:17,680
has been starting from windows 10

302
00:13:17,680 --> 00:13:20,399
and windows server 2019

303
00:13:20,399 --> 00:13:22,800
it doesn't work anymore

304
00:13:22,800 --> 00:13:23,600
but

305
00:13:23,600 --> 00:13:25,440
during our research we found out that it

306
00:13:25,440 --> 00:13:27,040
was a partial fix

307
00:13:27,040 --> 00:13:28,959
and we found a way to trigger the

308
00:13:28,959 --> 00:13:33,360
authentication to a remote server

309
00:13:33,360 --> 00:13:35,839
so this is the obj ref

310
00:13:35,839 --> 00:13:38,560
structure okay there are some

311
00:13:38,560 --> 00:13:40,560
fields it's a big structure

312
00:13:40,560 --> 00:13:42,720
that the first fields are signatures

313
00:13:42,720 --> 00:13:46,079
flag id and then base it on the

314
00:13:46,079 --> 00:13:48,639
object we are going to use in our case

315
00:13:48,639 --> 00:13:51,279
we use always the object standard we

316
00:13:51,279 --> 00:13:54,800
need to fill with some required values

317
00:13:54,800 --> 00:13:56,720
the first one is the

318
00:13:56,720 --> 00:14:00,079
object standard it's the

319
00:14:00,079 --> 00:14:02,560
object that we are going to use and

320
00:14:02,560 --> 00:14:04,079
there are some

321
00:14:04,079 --> 00:14:05,120
um

322
00:14:05,120 --> 00:14:07,839
values these values are needed mainly

323
00:14:07,839 --> 00:14:10,000
for the intended way

324
00:14:10,000 --> 00:14:13,519
is to provide an oxide an id that will

325
00:14:13,519 --> 00:14:16,959
allow the client to communicate with the

326
00:14:16,959 --> 00:14:19,839
com apartment which which has the pid

327
00:14:19,839 --> 00:14:22,480
and the thread it's it's

328
00:14:22,480 --> 00:14:25,680
the internal working omnicom

329
00:14:25,680 --> 00:14:27,920
and then there is the uh dual string

330
00:14:27,920 --> 00:14:29,839
array that is actually the resolver

331
00:14:29,839 --> 00:14:32,000
address in which you can specify a

332
00:14:32,000 --> 00:14:35,279
custom resolver in order to

333
00:14:35,279 --> 00:14:38,160
resolve the binding information for this

334
00:14:38,160 --> 00:14:41,360
for the immersion interface

335
00:14:41,360 --> 00:14:42,560
this is

336
00:14:42,560 --> 00:14:44,959
this is an example of a

337
00:14:44,959 --> 00:14:45,920
um

338
00:14:45,920 --> 00:14:49,199
martial interface okay this is an x-dump

339
00:14:49,199 --> 00:14:51,120
of one of the martial interface we use

340
00:14:51,120 --> 00:14:53,040
in our exploits

341
00:14:53,040 --> 00:14:57,360
and in usda solver address we specify

342
00:14:57,360 --> 00:15:00,240
the remote p address in this case is 10

343
00:15:00,240 --> 00:15:02,000
0 0 30

344
00:15:02,000 --> 00:15:05,040
that will allow to perform an

345
00:15:05,040 --> 00:15:08,720
authenticated ntla of course with ntlm

346
00:15:08,720 --> 00:15:10,160
in our case

347
00:15:10,160 --> 00:15:13,839
to our remote server

348
00:15:14,320 --> 00:15:16,480
as i told you the

349
00:15:16,480 --> 00:15:18,720
this is still not doing anything

350
00:15:18,720 --> 00:15:19,920
malicious

351
00:15:19,920 --> 00:15:21,519
in order to

352
00:15:21,519 --> 00:15:22,639
make it

353
00:15:22,639 --> 00:15:25,519
work as we intend we need to deliver

354
00:15:25,519 --> 00:15:26,880
this the d-com activation service

355
00:15:26,880 --> 00:15:28,880
through the the the co-get distance from

356
00:15:28,880 --> 00:15:32,079
storage and this call in order to be

357
00:15:32,079 --> 00:15:33,600
activated

358
00:15:33,600 --> 00:15:36,639
we need to specify a cls id that is the

359
00:15:36,639 --> 00:15:39,600
class id and identify

360
00:15:39,600 --> 00:15:42,959
in a unique way com servers mainly for

361
00:15:42,959 --> 00:15:46,880
example if we use the beats clcd the

362
00:15:46,880 --> 00:15:48,560
authentication will be

363
00:15:48,560 --> 00:15:50,639
perform a system

364
00:15:50,639 --> 00:15:52,160
in our case

365
00:15:52,160 --> 00:15:54,800
we weren't that interested in machine

366
00:15:54,800 --> 00:15:57,519
authentication so all the clcd config

367
00:15:57,519 --> 00:15:59,279
all the com servers configure network

368
00:15:59,279 --> 00:16:01,040
service or local system

369
00:16:01,040 --> 00:16:02,240
even if

370
00:16:02,240 --> 00:16:05,040
this is already uh could be already led

371
00:16:05,040 --> 00:16:07,759
us to approve escalation and i think

372
00:16:07,759 --> 00:16:10,480
that we will do a demo about it if you

373
00:16:10,480 --> 00:16:13,040
combine this with the

374
00:16:13,040 --> 00:16:16,240
airbcd okay

375
00:16:16,240 --> 00:16:17,920
during our research we discovered that

376
00:16:17,920 --> 00:16:20,800
there are some particular cls ide

377
00:16:20,800 --> 00:16:23,279
that if activated from session zero so

378
00:16:23,279 --> 00:16:26,160
imagine a session zero is when you as an

379
00:16:26,160 --> 00:16:29,279
attacker as uh have a

380
00:16:29,279 --> 00:16:33,040
ssh shell or a winner michelle okay you

381
00:16:33,040 --> 00:16:34,880
are actually in session zero or also at

382
00:16:34,880 --> 00:16:35,600
a

383
00:16:35,600 --> 00:16:36,959
task error

384
00:16:36,959 --> 00:16:39,519
if you activate if you invoke the

385
00:16:39,519 --> 00:16:41,680
activator with one of this lsd for

386
00:16:41,680 --> 00:16:43,360
example picker host

387
00:16:43,360 --> 00:16:45,839
you will have the authentication of the

388
00:16:45,839 --> 00:16:48,800
first user interactively logged on so

389
00:16:48,800 --> 00:16:51,600
you in a certain sense you are stealing

390
00:16:51,600 --> 00:16:53,839
the authentication of another user that

391
00:16:53,839 --> 00:16:57,600
is currently located on your machine

392
00:16:58,560 --> 00:17:00,800
this is for example this is the picker

393
00:17:00,800 --> 00:17:03,440
of lsd if you want to identify one

394
00:17:03,440 --> 00:17:06,799
vulnerable clsd you will have

395
00:17:06,799 --> 00:17:09,919
one registry key you can find the ipd

396
00:17:09,919 --> 00:17:12,319
and from the ipd you can pivot and you

397
00:17:12,319 --> 00:17:14,160
can go to the

398
00:17:14,160 --> 00:17:16,959
registry key and you can see that

399
00:17:16,959 --> 00:17:19,199
there is uh this particular value that

400
00:17:19,199 --> 00:17:21,679
say you have to be run interactively

401
00:17:21,679 --> 00:17:22,480
okay

402
00:17:22,480 --> 00:17:25,520
or if you prefer the configuration you

403
00:17:25,520 --> 00:17:26,880
can see that

404
00:17:26,880 --> 00:17:28,799
the interactive user identity is

405
00:17:28,799 --> 00:17:32,320
specified on the object

406
00:17:32,320 --> 00:17:33,530
very quickly

407
00:17:33,530 --> 00:17:35,280
[Music]

408
00:17:35,280 --> 00:17:37,760
we had to implement a rogue oxy resolver

409
00:17:37,760 --> 00:17:40,160
to catch the authentication

410
00:17:40,160 --> 00:17:43,520
and oxy resolution think about it as a

411
00:17:43,520 --> 00:17:46,960
sort of let's say cdns but it's not that

412
00:17:46,960 --> 00:17:50,480
allows to uh the client to retrieve the

413
00:17:50,480 --> 00:17:54,559
endpoint information of the com server

414
00:17:54,559 --> 00:17:56,000
the oxygen

415
00:17:56,000 --> 00:17:57,919
resolver is running in on every windows

416
00:17:57,919 --> 00:18:01,120
machine it runs on port 135

417
00:18:01,120 --> 00:18:02,000
and

418
00:18:02,000 --> 00:18:04,320
it it is exposed through the

419
00:18:04,320 --> 00:18:07,200
through the interface i object exporter

420
00:18:07,200 --> 00:18:09,039
while we well developing of course i'm

421
00:18:09,039 --> 00:18:11,200
not going to detail on how implemented

422
00:18:11,200 --> 00:18:14,240
because it involves middle compiler stub

423
00:18:14,240 --> 00:18:15,039
club

424
00:18:15,039 --> 00:18:17,200
client stubs and so on and so on

425
00:18:17,200 --> 00:18:20,080
where while we were developing the robox

426
00:18:20,080 --> 00:18:22,320
resolver we were

427
00:18:22,320 --> 00:18:25,280
inspecting of some rpc meters that we

428
00:18:25,280 --> 00:18:27,360
could abuse

429
00:18:27,360 --> 00:18:29,039
this is

430
00:18:29,039 --> 00:18:31,760
this is the the key part of our research

431
00:18:31,760 --> 00:18:34,799
this is the oxy resolution okay

432
00:18:34,799 --> 00:18:37,039
a normal sequence when we trigger a

433
00:18:37,039 --> 00:18:39,600
product exploit we have the client that

434
00:18:39,600 --> 00:18:40,840
is the victim

435
00:18:40,840 --> 00:18:44,320
user that is rpc to be more

436
00:18:44,320 --> 00:18:47,679
precise it's rpcss that is performing

437
00:18:47,679 --> 00:18:50,400
the call impersonating the security

438
00:18:50,400 --> 00:18:52,640
context of the user

439
00:18:52,640 --> 00:18:56,160
and then the survey it's us the attacker

440
00:18:56,160 --> 00:18:59,039
when we the marshaling of the object of

441
00:18:59,039 --> 00:19:01,600
the the com interface of course a

442
00:19:01,600 --> 00:19:02,720
privileged

443
00:19:02,720 --> 00:19:06,320
authenticated oxy resolution came to us

444
00:19:06,320 --> 00:19:08,240
but observing

445
00:19:08,240 --> 00:19:10,640
the um

446
00:19:10,640 --> 00:19:13,360
actual network capture we can see that

447
00:19:13,360 --> 00:19:16,320
the ntlm signing set

448
00:19:16,320 --> 00:19:18,320
sun in flag is set

449
00:19:18,320 --> 00:19:19,679
so we

450
00:19:19,679 --> 00:19:21,600
couldn't do anything with this kind of

451
00:19:21,600 --> 00:19:23,360
authentication because

452
00:19:23,360 --> 00:19:25,440
the product the ntlm authentication

453
00:19:25,440 --> 00:19:27,679
itself is is protecting this

454
00:19:27,679 --> 00:19:29,679
authentication

455
00:19:29,679 --> 00:19:30,799
and

456
00:19:30,799 --> 00:19:32,559
at this point

457
00:19:32,559 --> 00:19:34,720
we were stuck for like one week with

458
00:19:34,720 --> 00:19:37,679
andrea doing some brainstorming because

459
00:19:37,679 --> 00:19:39,360
we tried to do

460
00:19:39,360 --> 00:19:41,679
everything on this tcp packet okay we

461
00:19:41,679 --> 00:19:44,160
tried to do the worst torture

462
00:19:44,160 --> 00:19:46,320
tcp pegas can get

463
00:19:46,320 --> 00:19:48,240
but in the end we couldn't we weren't

464
00:19:48,240 --> 00:19:50,960
able to unsign this to unset this sunny

465
00:19:50,960 --> 00:19:53,840
flag and when we

466
00:19:53,840 --> 00:19:55,760
started to understand

467
00:19:55,760 --> 00:19:57,679
when we stopped to look at network

468
00:19:57,679 --> 00:19:59,360
capture and we started to look at the

469
00:19:59,360 --> 00:20:01,520
big feature how the system is supposed

470
00:20:01,520 --> 00:20:02,640
to work

471
00:20:02,640 --> 00:20:03,600
okay

472
00:20:03,600 --> 00:20:07,520
we understood we with a lot of surprise

473
00:20:07,520 --> 00:20:10,880
that we add some power on the response

474
00:20:10,880 --> 00:20:12,080
we can give

475
00:20:12,080 --> 00:20:13,600
to the client

476
00:20:13,600 --> 00:20:15,520
the result oxy response is something

477
00:20:15,520 --> 00:20:18,320
that comes from the server so it's our

478
00:20:18,320 --> 00:20:20,480
under our control

479
00:20:20,480 --> 00:20:21,440
and

480
00:20:21,440 --> 00:20:24,159
this is the actual function

481
00:20:24,159 --> 00:20:26,640
and this is the parameters the first

482
00:20:26,640 --> 00:20:28,559
four are the input parameters and last

483
00:20:28,559 --> 00:20:30,640
fourth output parameters

484
00:20:30,640 --> 00:20:33,440
the authentication in allowed us

485
00:20:33,440 --> 00:20:36,320
these are the allow the values are the

486
00:20:36,320 --> 00:20:38,640
authentication levels okay

487
00:20:38,640 --> 00:20:41,280
and one of it is all interest because

488
00:20:41,280 --> 00:20:43,520
define the

489
00:20:43,520 --> 00:20:45,840
rpc connection vulnerable to early

490
00:20:45,840 --> 00:20:48,799
attacks okay the level connect

491
00:20:48,799 --> 00:20:50,880
and in the code of course we return at

492
00:20:50,880 --> 00:20:54,240
this kind of a provider level because a

493
00:20:54,240 --> 00:20:57,679
lot it's kind of downgraded attack okay

494
00:20:57,679 --> 00:20:59,280
and the second

495
00:20:59,280 --> 00:21:02,400
parameter we provide is the

496
00:21:02,400 --> 00:21:05,919
oxybindings we of course provide the ep

497
00:21:05,919 --> 00:21:09,039
of the release server

498
00:21:09,039 --> 00:21:11,760
we are telling the client to use rpc

499
00:21:11,760 --> 00:21:14,559
over tcp

500
00:21:14,840 --> 00:21:18,640
and last but not least we are telling

501
00:21:18,640 --> 00:21:20,720
the client to use the

502
00:21:20,720 --> 00:21:23,200
authentication provider win and t

503
00:21:23,200 --> 00:21:26,799
and only with this provider we were able

504
00:21:26,799 --> 00:21:29,360
to unset the sign-in flag

505
00:21:29,360 --> 00:21:30,400
in fact

506
00:21:30,400 --> 00:21:33,120
these are the kind of authentication

507
00:21:33,120 --> 00:21:36,559
provider you can give from this call

508
00:21:36,559 --> 00:21:39,440
winner t is ntlm of course and with a

509
00:21:39,440 --> 00:21:41,360
lot of surprise

510
00:21:41,360 --> 00:21:43,440
with the when the

511
00:21:43,440 --> 00:21:44,960
successive call of the auxiliary

512
00:21:44,960 --> 00:21:47,280
resolution sequence arrived the sunny

513
00:21:47,280 --> 00:21:49,440
flag is not set anymore okay

514
00:21:49,440 --> 00:21:51,679
so this was a bingo for us because the

515
00:21:51,679 --> 00:21:55,360
rest of the exploit was more of

516
00:21:55,360 --> 00:21:59,280
just a fun ride but this is just a

517
00:21:59,280 --> 00:22:01,360
trigger of authentication

518
00:22:01,360 --> 00:22:03,760
in order to achieve some previous

519
00:22:03,760 --> 00:22:05,280
escalation we have to relay this

520
00:22:05,280 --> 00:22:07,440
authentication in a

521
00:22:07,440 --> 00:22:11,039
normal scenario of an ntlm relay there

522
00:22:11,039 --> 00:22:13,200
are usually two main phases the one in

523
00:22:13,200 --> 00:22:15,440
which you have the coefficient method so

524
00:22:15,440 --> 00:22:17,679
the client and the second is the

525
00:22:17,679 --> 00:22:20,000
vulnerable server so the one that you do

526
00:22:20,000 --> 00:22:21,840
prefer the main in the middle

527
00:22:21,840 --> 00:22:24,960
for example for smb protocol if you

528
00:22:24,960 --> 00:22:26,799
read a file of error share you will

529
00:22:26,799 --> 00:22:29,200
trigger an authentication

530
00:22:29,200 --> 00:22:31,679
or without the user interaction you can

531
00:22:31,679 --> 00:22:34,080
for example make windows defenders scan

532
00:22:34,080 --> 00:22:35,600
a share for you you will get

533
00:22:35,600 --> 00:22:37,760
authentication system for example or

534
00:22:37,760 --> 00:22:40,480
spool symbol and petty put bottom

535
00:22:40,480 --> 00:22:42,080
and then you have the part of this

536
00:22:42,080 --> 00:22:44,000
server that received the authentication

537
00:22:44,000 --> 00:22:45,760
it's the privileged result that will

538
00:22:45,760 --> 00:22:47,360
perform the operation on behalf of the

539
00:22:47,360 --> 00:22:50,240
user you have file sharing we have ldap

540
00:22:50,240 --> 00:22:52,320
you have http you have also rpc

541
00:22:52,320 --> 00:22:55,600
vulnerable servers okay

542
00:22:55,600 --> 00:22:58,400
for example task scaler and the spooder

543
00:22:58,400 --> 00:22:59,919
service

544
00:22:59,919 --> 00:23:01,360
but

545
00:23:01,360 --> 00:23:03,120
what about the client authentication of

546
00:23:03,120 --> 00:23:05,600
rpc that was the case in which we were

547
00:23:05,600 --> 00:23:07,440
we are

548
00:23:07,440 --> 00:23:08,559
well

549
00:23:08,559 --> 00:23:09,520
we

550
00:23:09,520 --> 00:23:10,960
tried to fight something in the state of

551
00:23:10,960 --> 00:23:12,720
the art but we didn't find anything so

552
00:23:12,720 --> 00:23:15,600
we had to find something else

553
00:23:15,600 --> 00:23:18,799
of course rpc relaying to our pc was not

554
00:23:18,799 --> 00:23:20,320
interesting because

555
00:23:20,320 --> 00:23:23,039
as i said vulnerable rpc servers are

556
00:23:23,039 --> 00:23:25,120
already vulnerability

557
00:23:25,120 --> 00:23:27,360
so we tried to understand okay

558
00:23:27,360 --> 00:23:29,679
what if we can relay our pc to another

559
00:23:29,679 --> 00:23:31,360
product or like ldap

560
00:23:31,360 --> 00:23:33,200
this would allow us to expand this

561
00:23:33,200 --> 00:23:35,679
attack surface very much

562
00:23:35,679 --> 00:23:37,760
so what we did is to

563
00:23:37,760 --> 00:23:40,000
understand if this is possible so if our

564
00:23:40,000 --> 00:23:42,320
pc authentication and authentication

565
00:23:42,320 --> 00:23:45,120
going over pc can be related to http for

566
00:23:45,120 --> 00:23:47,679
example so we set up a scenario

567
00:23:47,679 --> 00:23:50,480
from an rpc connection connection to

568
00:23:50,480 --> 00:23:53,279
reading a file over a protected http

569
00:23:53,279 --> 00:23:55,200
server okay

570
00:23:55,200 --> 00:23:58,640
if you want to trigger a rpc

571
00:23:58,640 --> 00:24:00,559
authentication with ntlm

572
00:24:00,559 --> 00:24:02,799
you can write some code but if you don't

573
00:24:02,799 --> 00:24:05,440
want to write some code you can use rpc

574
00:24:05,440 --> 00:24:06,960
ping okay

575
00:24:06,960 --> 00:24:09,679
this is a built-in utility that will

576
00:24:09,679 --> 00:24:12,000
allow to trigger until a rpc

577
00:24:12,000 --> 00:24:17,279
authentication with the ntlm okay

578
00:24:17,520 --> 00:24:20,960
so this is the scenario that we set up

579
00:24:20,960 --> 00:24:22,640
okay we have

580
00:24:22,640 --> 00:24:24,159
of course

581
00:24:24,159 --> 00:24:25,840
it's amanda the middle attack but it's a

582
00:24:25,840 --> 00:24:27,520
little bit weird because the two

583
00:24:27,520 --> 00:24:29,679
protocols are different okay so on the

584
00:24:29,679 --> 00:24:32,080
left we will have rpc on the right will

585
00:24:32,080 --> 00:24:33,919
be http okay

586
00:24:33,919 --> 00:24:37,279
could seem strange but it works okay

587
00:24:37,279 --> 00:24:39,200
so in the middle we have the attacker on

588
00:24:39,200 --> 00:24:40,640
the left there is the victim and on the

589
00:24:40,640 --> 00:24:43,120
right web server the attacker trigger

590
00:24:43,120 --> 00:24:45,760
the rpc connection okay

591
00:24:45,760 --> 00:24:49,279
with the potato exploit for example

592
00:24:49,279 --> 00:24:52,320
and then the uh big team will perform

593
00:24:52,320 --> 00:24:55,440
type one okay and tell them type one to

594
00:24:55,440 --> 00:24:57,440
the attacker in the middle the attacker

595
00:24:57,440 --> 00:24:58,640
will

596
00:24:58,640 --> 00:25:00,880
instantiate a new tcp connection http

597
00:25:00,880 --> 00:25:04,559
connection it will embed then tlm part

598
00:25:04,559 --> 00:25:05,440
okay

599
00:25:05,440 --> 00:25:07,600
so the web server

600
00:25:07,600 --> 00:25:09,919
it doesn't even know that the ntl

601
00:25:09,919 --> 00:25:13,039
motivation came from rpc okay it just

602
00:25:13,039 --> 00:25:14,960
say okay you are authenticating with

603
00:25:14,960 --> 00:25:17,600
http you are good we didn't tell them

604
00:25:17,600 --> 00:25:19,840
okay way to go

605
00:25:19,840 --> 00:25:22,000
and of course the

606
00:25:22,000 --> 00:25:23,440
man in the middle of the attacker so

607
00:25:23,440 --> 00:25:26,720
what we implemented it's of course uh

608
00:25:26,720 --> 00:25:29,600
unpacking the http authentication http

609
00:25:29,600 --> 00:25:32,720
uh pro packet with by extracting the

610
00:25:32,720 --> 00:25:34,720
ntlm or delegation

611
00:25:34,720 --> 00:25:38,080
and of course this flow will go

612
00:25:38,080 --> 00:25:40,159
and in the end

613
00:25:40,159 --> 00:25:40,840
the

614
00:25:40,840 --> 00:25:43,120
attacker the web server has

615
00:25:43,120 --> 00:25:45,039
authenticated the attacker

616
00:25:45,039 --> 00:25:48,559
and is is being able to read the secret

617
00:25:48,559 --> 00:25:51,440
xt contact

618
00:25:52,480 --> 00:25:53,919
so what we can learn from this

619
00:25:53,919 --> 00:25:58,480
experiment that rpc to http rpc to adapt

620
00:25:58,480 --> 00:26:01,679
rpc to smb cross-product a works

621
00:26:01,679 --> 00:26:04,320
we add in our final scenario we all we

622
00:26:04,320 --> 00:26:08,000
also add an additional layer of relay so

623
00:26:08,000 --> 00:26:11,520
rpc to http and http radar yeah the

624
00:26:11,520 --> 00:26:14,400
authentication is doing a lot of

625
00:26:14,400 --> 00:26:17,360
travel okay but it works this is just

626
00:26:17,360 --> 00:26:19,360
that allowed us to

627
00:26:19,360 --> 00:26:22,240
reuse some code from anti-alarm relax

628
00:26:22,240 --> 00:26:24,080
okay

629
00:26:24,080 --> 00:26:26,000
what we need to consider in our

630
00:26:26,000 --> 00:26:28,799
experiment in our findings is that

631
00:26:28,799 --> 00:26:30,080
it

632
00:26:30,080 --> 00:26:31,919
the the thing that we need to take care

633
00:26:31,919 --> 00:26:34,640
of is the authentication level must be

634
00:26:34,640 --> 00:26:36,480
connect otherwise

635
00:26:36,480 --> 00:26:38,960
rpc won't allow to relay and tlm

636
00:26:38,960 --> 00:26:41,360
authentication and we need also to deal

637
00:26:41,360 --> 00:26:43,919
with ntla mitigation itself with the

638
00:26:43,919 --> 00:26:46,320
authentication protocol self mitigation

639
00:26:46,320 --> 00:26:48,960
like signing and make

640
00:26:48,960 --> 00:26:51,440
and remember that only some special

641
00:26:51,440 --> 00:26:54,960
assistant allowed one set designing flag

642
00:26:54,960 --> 00:26:57,679
and now i will pass the ball to andrea

643
00:26:57,679 --> 00:26:59,279
thank you

644
00:26:59,279 --> 00:27:00,320
well

645
00:27:00,320 --> 00:27:02,720
can you hear me okay this was great but

646
00:27:02,720 --> 00:27:04,960
we had a problem because as q as you can

647
00:27:04,960 --> 00:27:08,159
imagine getting a shell in session 0 is

648
00:27:08,159 --> 00:27:11,440
not so a common task for a standard user

649
00:27:11,440 --> 00:27:12,559
so

650
00:27:12,559 --> 00:27:15,200
a very more common scenario is when you

651
00:27:15,200 --> 00:27:16,799
land on a

652
00:27:16,799 --> 00:27:18,240
machine where the remote desktop

653
00:27:18,240 --> 00:27:20,240
services are running and where multiple

654
00:27:20,240 --> 00:27:22,320
users are connected okay

655
00:27:22,320 --> 00:27:24,480
so it would be interesting

656
00:27:24,480 --> 00:27:27,760
to um reload authentication of another

657
00:27:27,760 --> 00:27:30,000
user connected on the same machine by

658
00:27:30,000 --> 00:27:31,760
simply specifying

659
00:27:31,760 --> 00:27:33,279
the session id

660
00:27:33,279 --> 00:27:35,760
and it would be very easy then to

661
00:27:35,760 --> 00:27:38,880
capture all the authentications but the

662
00:27:38,880 --> 00:27:41,039
session moniker which is the component

663
00:27:41,039 --> 00:27:43,520
which allows the activation

664
00:27:43,520 --> 00:27:47,919
uh of object on perception basis was not

665
00:27:47,919 --> 00:27:49,760
could not be combined

666
00:27:49,760 --> 00:27:51,039
with the

667
00:27:51,039 --> 00:27:53,440
co-create instance from my storage which

668
00:27:53,440 --> 00:27:56,080
is the activation code that we

669
00:27:56,080 --> 00:28:00,000
used so no way but not exactly because

670
00:28:00,000 --> 00:28:00,880
um

671
00:28:00,880 --> 00:28:03,120
sometimes later

672
00:28:03,120 --> 00:28:05,520
uh james forso did some research based

673
00:28:05,520 --> 00:28:06,320
on

674
00:28:06,320 --> 00:28:08,799
also inspired by our remote potato zero

675
00:28:08,799 --> 00:28:10,799
and discovered that there were there

676
00:28:10,799 --> 00:28:13,679
that were there were some undocumented

677
00:28:13,679 --> 00:28:17,520
calls which permit to specify the

678
00:28:17,520 --> 00:28:20,080
session id before

679
00:28:20,080 --> 00:28:22,880
activating the object so we click we

680
00:28:22,880 --> 00:28:26,240
quickly implemented this function in our

681
00:28:26,240 --> 00:28:27,679
remote potato

682
00:28:27,679 --> 00:28:30,320
and with this tweet we finally announced

683
00:28:30,320 --> 00:28:32,799
that cross session was possible also in

684
00:28:32,799 --> 00:28:34,640
our exploit

685
00:28:34,640 --> 00:28:37,279
and in this niplet you can see the code

686
00:28:37,279 --> 00:28:40,159
which we implemented in the new function

687
00:28:40,159 --> 00:28:41,279
so

688
00:28:41,279 --> 00:28:43,440
in the activation service we can specify

689
00:28:43,440 --> 00:28:45,760
the session id and then we instantiate

690
00:28:45,760 --> 00:28:47,679
the object via this undocumented

691
00:28:47,679 --> 00:28:49,679
standard get instance from my storage

692
00:28:49,679 --> 00:28:51,679
call which permits us

693
00:28:51,679 --> 00:28:54,399
to activate an object on a different

694
00:28:54,399 --> 00:28:56,080
session

695
00:28:56,080 --> 00:28:58,080
not only the first session where the

696
00:28:58,080 --> 00:29:00,320
user is logged in

697
00:29:00,320 --> 00:29:02,080
okay this is what we call the big

698
00:29:02,080 --> 00:29:03,679
picture

699
00:29:03,679 --> 00:29:07,120
and i try to keep it as simply as

700
00:29:07,120 --> 00:29:09,679
possible it's not so complicated

701
00:29:09,679 --> 00:29:11,760
okay let's start from the beginning so

702
00:29:11,760 --> 00:29:12,720
we have a

703
00:29:12,720 --> 00:29:13,760
machine

704
00:29:13,760 --> 00:29:15,679
where the domain administrator is logged

705
00:29:15,679 --> 00:29:17,679
in then we have also

706
00:29:17,679 --> 00:29:20,799
our attacker machine

707
00:29:20,799 --> 00:29:23,120
which must be on the same network which

708
00:29:23,120 --> 00:29:26,240
much be reachable on port 135

709
00:29:26,240 --> 00:29:28,399
and from and from this machine

710
00:29:28,399 --> 00:29:30,240
we have a shell

711
00:29:30,240 --> 00:29:31,679
on the

712
00:29:31,679 --> 00:29:35,520
victim machine in whatever session

713
00:29:35,520 --> 00:29:36,880
we

714
00:29:36,880 --> 00:29:39,440
copy our exploit on this machine and

715
00:29:39,440 --> 00:29:42,720
then launch it specifying the cls id

716
00:29:42,720 --> 00:29:47,279
and the session we want to interact with

717
00:29:47,279 --> 00:29:49,440
when this occurs

718
00:29:49,440 --> 00:29:52,480
uh resolvex as antonio explained to you

719
00:29:52,480 --> 00:29:55,520
when the activation occurs and a resolve

720
00:29:55,520 --> 00:29:58,159
oxy the request is made is made

721
00:29:58,159 --> 00:30:00,480
to our

722
00:30:00,480 --> 00:30:02,799
local server okay

723
00:30:02,799 --> 00:30:05,919
our local attacker machine

724
00:30:05,919 --> 00:30:09,039
we intercept this request and we forward

725
00:30:09,039 --> 00:30:13,120
it simply we simply forward it to the

726
00:30:13,120 --> 00:30:16,720
again to the victim machine where our

727
00:30:16,720 --> 00:30:19,760
fake oxide resolver is running okay by

728
00:30:19,760 --> 00:30:22,000
specifying the ip address and the port

729
00:30:22,000 --> 00:30:26,480
where the fake oxide resolver is running

730
00:30:26,640 --> 00:30:29,440
once we get this

731
00:30:29,440 --> 00:30:32,640
request our fake oxide resolver will

732
00:30:32,640 --> 00:30:35,840
produce the correct response which will

733
00:30:35,840 --> 00:30:37,279
instruct

734
00:30:37,279 --> 00:30:38,240
again

735
00:30:38,240 --> 00:30:39,919
the trigger

736
00:30:39,919 --> 00:30:40,799
to

737
00:30:40,799 --> 00:30:42,000
contact

738
00:30:42,000 --> 00:30:44,880
again our

739
00:30:45,679 --> 00:30:47,039
victim machine

740
00:30:47,039 --> 00:30:49,440
and to activate the object when he needs

741
00:30:49,440 --> 00:30:51,279
to activate the object the first thing

742
00:30:51,279 --> 00:30:54,880
he does is to bind to the iran unknown

743
00:30:54,880 --> 00:30:58,080
interface and by binding into the iran

744
00:30:58,080 --> 00:31:00,480
unknown interface an authentication will

745
00:31:00,480 --> 00:31:02,840
occur we then simply catch this

746
00:31:02,840 --> 00:31:06,960
authentication relate to our local rpc

747
00:31:06,960 --> 00:31:10,720
http server and then relate again

748
00:31:10,720 --> 00:31:13,120
to our attacker machine where

749
00:31:13,120 --> 00:31:15,919
also ntlm relay is running and then

750
00:31:15,919 --> 00:31:18,960
finally relay it to our target service

751
00:31:18,960 --> 00:31:25,039
which can be the smb ldap http etc etc

752
00:31:25,600 --> 00:31:27,840
okay

753
00:31:28,080 --> 00:31:30,240
i will skip this to slide because i

754
00:31:30,240 --> 00:31:32,080
think we don't have so many times but

755
00:31:32,080 --> 00:31:33,600
it's not just

756
00:31:33,600 --> 00:31:35,679
a side note maybe uh if you are

757
00:31:35,679 --> 00:31:38,880
interested i will explain to you later

758
00:31:38,880 --> 00:31:41,440
so now it's demo time so antonio will

759
00:31:41,440 --> 00:31:43,360
show you the first two demos and if you

760
00:31:43,360 --> 00:31:45,440
have time i will show you the third okay

761
00:31:45,440 --> 00:31:46,799
okay

762
00:31:46,799 --> 00:31:50,240
so in these demos we are going to uh

763
00:31:50,240 --> 00:31:53,519
show remote zero and it's our exploit if

764
00:31:53,519 --> 00:31:55,200
you want to know the story or now we

765
00:31:55,200 --> 00:31:56,880
choose name please

766
00:31:56,880 --> 00:31:58,799
later approach us and we will tell you a

767
00:31:58,799 --> 00:32:01,600
funny story in this demo we are going to

768
00:32:01,600 --> 00:32:03,840
see a privilege escalation from an

769
00:32:03,840 --> 00:32:06,720
unprivileged access to domain admin okay

770
00:32:06,720 --> 00:32:08,399
so i'm going to show

771
00:32:08,399 --> 00:32:09,760
a

772
00:32:09,760 --> 00:32:12,000
linux machine which the attacker has

773
00:32:12,000 --> 00:32:14,799
left the compromised machine windows and

774
00:32:14,799 --> 00:32:18,559
on the right some helper tools

775
00:32:18,559 --> 00:32:20,240
okay

776
00:32:20,240 --> 00:32:22,320
so on the left the attacker has

777
00:32:22,320 --> 00:32:25,519
disapproved access normal user it check

778
00:32:25,519 --> 00:32:29,200
is privileges to the domain controller

779
00:32:29,200 --> 00:32:33,679
it gets is in the domain users group

780
00:32:34,320 --> 00:32:37,039
then you check the p of the compromised

781
00:32:37,039 --> 00:32:38,480
windows machine

782
00:32:38,480 --> 00:32:40,799
then check who is currently logged on

783
00:32:40,799 --> 00:32:42,519
there is a user called domain

784
00:32:42,519 --> 00:32:44,399
administration 2

785
00:32:44,399 --> 00:32:47,200
and himself login in session 3 normal

786
00:32:47,200 --> 00:32:48,480
user

787
00:32:48,480 --> 00:32:50,320
and then you want to steal this

788
00:32:50,320 --> 00:32:51,679
authentication and invoke remote

789
00:32:51,679 --> 00:32:53,039
potential 0.

790
00:32:53,039 --> 00:32:55,440
it specifies on flags

791
00:32:55,440 --> 00:32:58,640
the x flag is the rimotoxy resolver ep

792
00:32:58,640 --> 00:33:02,880
that is the 10030 the kali linux machine

793
00:33:02,880 --> 00:33:05,679
it's also the relay server the same

794
00:33:05,679 --> 00:33:07,600
machine then we run the network

795
00:33:07,600 --> 00:33:10,480
directory socket to redirect the oxide

796
00:33:10,480 --> 00:33:12,640
malicious oxygen resolution back to the

797
00:33:12,640 --> 00:33:15,440
windows machine

798
00:33:15,519 --> 00:33:18,880
and then we use ntlm relax with the

799
00:33:18,880 --> 00:33:20,720
parameter targeting the domain

800
00:33:20,720 --> 00:33:23,760
controller ldap server

801
00:33:23,760 --> 00:33:25,840
performing the escalate user attack so

802
00:33:25,840 --> 00:33:29,440
normal user becoming enterprise admin

803
00:33:29,440 --> 00:33:31,440
the server is running the release server

804
00:33:31,440 --> 00:33:33,760
is running we choose the cross-session

805
00:33:33,760 --> 00:33:35,919
activation all of these stuff that we

806
00:33:35,919 --> 00:33:38,799
explain of course okay so we can see

807
00:33:38,799 --> 00:33:40,399
that remote potential zero spawned at

808
00:33:40,399 --> 00:33:42,480
the object in the session two the domain

809
00:33:42,480 --> 00:33:46,000
admin session we used the pika rc lsd

810
00:33:46,000 --> 00:33:48,559
we received the relay authentication we

811
00:33:48,559 --> 00:33:50,799
connected to ntlr links

812
00:33:50,799 --> 00:33:53,360
server

813
00:33:53,360 --> 00:33:56,559
and on ntl relax we can see

814
00:33:56,559 --> 00:33:58,879
that

815
00:33:59,360 --> 00:34:02,240
the authentication came

816
00:34:02,240 --> 00:34:04,559
as domain admin

817
00:34:04,559 --> 00:34:06,640
okay

818
00:34:06,640 --> 00:34:09,280
the type three as domain admin and the

819
00:34:09,280 --> 00:34:11,199
user normal user

820
00:34:11,199 --> 00:34:13,520
has been added to the enterprise of the

821
00:34:13,520 --> 00:34:15,918
main group okay so it's a straight

822
00:34:15,918 --> 00:34:19,599
previous escalation to a domain

823
00:34:19,599 --> 00:34:23,199
and now if we check again our privileges

824
00:34:23,199 --> 00:34:26,000
by querying the ldap server

825
00:34:26,000 --> 00:34:27,918
we will see that we have enterprise

826
00:34:27,918 --> 00:34:31,319
admin privileges

827
00:34:37,918 --> 00:34:39,280
okay

828
00:34:39,280 --> 00:34:41,119
the second demo

829
00:34:41,119 --> 00:34:42,320
it's

830
00:34:42,320 --> 00:34:44,639
when you don't have that much network

831
00:34:44,639 --> 00:34:47,440
access you can also steal

832
00:34:47,440 --> 00:34:50,159
the ashes of the ntl authentication and

833
00:34:50,159 --> 00:34:53,199
then we can offline crack these ashes

834
00:34:53,199 --> 00:34:55,199
okay

835
00:34:55,199 --> 00:34:57,839
it's basically more or less the same

836
00:34:57,839 --> 00:34:59,839
scenario

837
00:34:59,839 --> 00:35:03,760
okay we are a normal user

838
00:35:03,760 --> 00:35:07,040
we check our domain groups

839
00:35:07,040 --> 00:35:10,320
we are domain users we need to get the p

840
00:35:10,320 --> 00:35:12,240
address of our

841
00:35:12,240 --> 00:35:14,079
targeted machine

842
00:35:14,079 --> 00:35:16,400
we see that there are three users logged

843
00:35:16,400 --> 00:35:18,240
on et user

844
00:35:18,240 --> 00:35:21,280
session 82 domain admin user user in

845
00:35:21,280 --> 00:35:23,599
session 4 and

846
00:35:23,599 --> 00:35:27,280
normal user ourself in session 5.

847
00:35:27,280 --> 00:35:29,440
of course think about it in a terminal

848
00:35:29,440 --> 00:35:31,599
server okay this is the most common

849
00:35:31,599 --> 00:35:34,480
scenario that you will have some problem

850
00:35:34,480 --> 00:35:36,640
and then we run remote potential the

851
00:35:36,640 --> 00:35:40,800
module two that is the steeler

852
00:35:40,800 --> 00:35:44,000
we set up all the helper tools for the

853
00:35:44,000 --> 00:35:46,800
oxy resolution forwarding

854
00:35:46,800 --> 00:35:49,599
with socket

855
00:35:52,800 --> 00:35:55,200
and then we specify

856
00:35:55,200 --> 00:36:00,720
the domain admin for session d okay

857
00:36:00,800 --> 00:36:04,000
and then we are able to get

858
00:36:04,000 --> 00:36:05,040
this

859
00:36:05,040 --> 00:36:07,599
ash that is technically not ash it's a

860
00:36:07,599 --> 00:36:09,599
combination of response and anti-proof

861
00:36:09,599 --> 00:36:13,400
streak and so on

862
00:36:13,760 --> 00:36:16,960
and basically we are able to uh

863
00:36:16,960 --> 00:36:20,720
this is a result works it to call

864
00:36:21,119 --> 00:36:24,320
it's very similar but it it requires

865
00:36:24,320 --> 00:36:28,320
more job to do ar is the final h of

866
00:36:28,320 --> 00:36:30,640
domain admin and of course this you can

867
00:36:30,640 --> 00:36:32,560
be created offline

868
00:36:32,560 --> 00:36:35,599
if the password is weak enough

869
00:36:35,599 --> 00:36:37,280
and then of course we can still also the

870
00:36:37,280 --> 00:36:40,720
edge of the other user id user

871
00:36:40,720 --> 00:36:45,759
and that's all we can skip the next two

872
00:36:46,160 --> 00:36:47,359
the next

873
00:36:47,359 --> 00:36:50,160
edit is level

874
00:36:52,839 --> 00:36:56,560
okay uh mitigation so we opened the case

875
00:36:56,560 --> 00:36:59,599
with microsoft and after a long debate

876
00:36:59,599 --> 00:37:01,839
even if they considered it in an

877
00:37:01,839 --> 00:37:04,079
important privilege escalation they

878
00:37:04,079 --> 00:37:07,200
finally decided not to fix it because

879
00:37:07,200 --> 00:37:09,359
the servers have to defend themselves

880
00:37:09,359 --> 00:37:11,040
against until the emerald air attack

881
00:37:11,040 --> 00:37:13,280
which is always also true

882
00:37:13,280 --> 00:37:15,200
so

883
00:37:15,200 --> 00:37:18,880
what can we do in order to avoid all

884
00:37:18,880 --> 00:37:20,480
this black magic

885
00:37:20,480 --> 00:37:23,200
well ntlm is a

886
00:37:23,200 --> 00:37:26,000
deprecated protocol so you could think

887
00:37:26,000 --> 00:37:28,720
okay disable ntlm but disabling totally

888
00:37:28,720 --> 00:37:32,480
ntlm is very very disruptive in uh in a

889
00:37:32,480 --> 00:37:35,280
common scenario so i would not recommend

890
00:37:35,280 --> 00:37:37,839
it maybe you could put the most

891
00:37:37,839 --> 00:37:41,040
sensitive users in the protected

892
00:37:41,040 --> 00:37:43,200
protected users group which will

893
00:37:43,200 --> 00:37:46,240
disallow also the ntln authentication

894
00:37:46,240 --> 00:37:47,200
for this

895
00:37:47,200 --> 00:37:49,599
particular users but we have another

896
00:37:49,599 --> 00:37:52,880
problem this is a recent discover from

897
00:37:52,880 --> 00:37:54,480
james forso

898
00:37:54,480 --> 00:37:56,640
i don't know if you read this post but

899
00:37:56,640 --> 00:37:59,760
he demonstrates that it is possible also

900
00:37:59,760 --> 00:38:02,560
to relay kerberos authentication so i

901
00:38:02,560 --> 00:38:05,040
think he opened a pandora box

902
00:38:05,040 --> 00:38:08,320
and finding a totally new attack surface

903
00:38:08,320 --> 00:38:09,280
so

904
00:38:09,280 --> 00:38:11,359
what can we do well the right way is

905
00:38:11,359 --> 00:38:14,240
what microsoft recommends so enable

906
00:38:14,240 --> 00:38:17,760
sign-in smb enable extended protection

907
00:38:17,760 --> 00:38:20,640
channel based talking and based token

908
00:38:20,640 --> 00:38:22,880
and so on so

909
00:38:22,880 --> 00:38:26,320
hardening is possible you just need to

910
00:38:26,320 --> 00:38:28,960
configure but to monitor it before

911
00:38:28,960 --> 00:38:30,560
because you can have old legacy

912
00:38:30,560 --> 00:38:32,880
application we will then have problems

913
00:38:32,880 --> 00:38:34,400
to work

914
00:38:34,400 --> 00:38:37,440
otherwise you could also use a free

915
00:38:37,440 --> 00:38:39,520
patch for remote potato

916
00:38:39,520 --> 00:38:40,480
which is

917
00:38:40,480 --> 00:38:43,119
delivered by zero patch we will inhibit

918
00:38:43,119 --> 00:38:44,839
the remote potato

919
00:38:44,839 --> 00:38:48,160
exploit so conclusions very quickly you

920
00:38:48,160 --> 00:38:49,839
have one minute okay

921
00:38:49,839 --> 00:38:52,160
and italian is not that bad it's simply

922
00:38:52,160 --> 00:38:54,880
old it's like me it's old okay

923
00:38:54,880 --> 00:38:56,800
so boy other

924
00:38:56,800 --> 00:38:59,119
other questions do not

925
00:38:59,119 --> 00:39:02,079
blindly trust the multi-user model and

926
00:39:02,079 --> 00:39:04,560
the multi-user protection because as we

927
00:39:04,560 --> 00:39:07,040
you could see we can

928
00:39:07,040 --> 00:39:09,200
instantiate an object in another session

929
00:39:09,200 --> 00:39:12,560
and then become very very dangerous

930
00:39:12,560 --> 00:39:15,680
won't fix does not mean without risks

931
00:39:15,680 --> 00:39:17,520
and then finally the whole new thing

932
00:39:17,520 --> 00:39:20,240
whether this was my personal

933
00:39:20,240 --> 00:39:23,200
idea is that all the potatoes and tlm

934
00:39:23,200 --> 00:39:25,599
and relaying not ntlm relaying generic

935
00:39:25,599 --> 00:39:28,880
relaying are still alive and clicking so

936
00:39:28,880 --> 00:39:31,520
the special thanks goes to james forso

937
00:39:31,520 --> 00:39:34,079
all the potato developers the impact

938
00:39:34,079 --> 00:39:37,200
developer team and obviously blue head

939
00:39:37,200 --> 00:39:39,760
organizers i told you quickly i told it

940
00:39:39,760 --> 00:39:42,560
blue hat okay

941
00:39:42,560 --> 00:39:43,359
well

942
00:39:43,359 --> 00:39:45,680
that's all uh i hope you enjoyed our

943
00:39:45,680 --> 00:39:48,560
talk if you enjoyed it

944
00:39:48,560 --> 00:39:50,480
if you enjoyed it

945
00:39:50,480 --> 00:39:53,599
share it otherwise share it only with us

946
00:39:53,599 --> 00:39:56,350
that's all and thank you again

947
00:39:56,350 --> 00:40:01,489
[Applause]

948
00:40:02,860 --> 00:40:06,010
[Music]

