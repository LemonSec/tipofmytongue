1
00:00:00,930 --> 00:00:08,260
[Music]

2
00:00:15,290 --> 00:00:19,119
[Music]

3
00:00:19,119 --> 00:00:20,640
okay so

4
00:00:20,640 --> 00:00:24,400
hi everyone we are yuri and stav and we

5
00:00:24,400 --> 00:00:26,960
do malware research for mandiant and we

6
00:00:26,960 --> 00:00:27,680
are

7
00:00:27,680 --> 00:00:30,640
very excited to be here during a

8
00:00:30,640 --> 00:00:33,680
recession we will describe the evolution

9
00:00:33,680 --> 00:00:34,640
of an

10
00:00:34,640 --> 00:00:37,040
all-time favorite chinese apt

11
00:00:37,040 --> 00:00:39,040
in its mission in israel

12
00:00:39,040 --> 00:00:41,120
or you might say that we will

13
00:00:41,120 --> 00:00:44,000
focus on the fjords

14
00:00:44,000 --> 00:00:46,879
so in our agenda today first we'll talk

15
00:00:46,879 --> 00:00:49,760
about chinese cyberspace in general and

16
00:00:49,760 --> 00:00:52,399
ank 215 which is their representative

17
00:00:52,399 --> 00:00:54,160
for the middle east in israel

18
00:00:54,160 --> 00:00:56,719
then we will discuss how they use old

19
00:00:56,719 --> 00:00:59,520
vulnerabilities to great effect

20
00:00:59,520 --> 00:01:02,160
we will talk about just how fragile our

21
00:01:02,160 --> 00:01:04,559
networks are from the inside

22
00:01:04,559 --> 00:01:07,200
we will continue discussing the modus

23
00:01:07,200 --> 00:01:10,240
operandi of anc215 how they evolved

24
00:01:10,240 --> 00:01:12,240
their malware and their engineering

25
00:01:12,240 --> 00:01:14,000
skills and then we will conclude

26
00:01:14,000 --> 00:01:15,840
everything

27
00:01:15,840 --> 00:01:19,439
so without further ado

28
00:01:20,159 --> 00:01:22,240
let's talk about what happens when a

29
00:01:22,240 --> 00:01:24,400
chinese actor makes aliyah to the holy

30
00:01:24,400 --> 00:01:27,040
land

31
00:01:27,040 --> 00:01:28,960
first and foremost what is even chinese

32
00:01:28,960 --> 00:01:32,240
cyberspace so they target pretty much

33
00:01:32,240 --> 00:01:33,600
everyone

34
00:01:33,600 --> 00:01:36,079
we see them in the us in europe

35
00:01:36,079 --> 00:01:38,320
internal targeting in china taiwan hong

36
00:01:38,320 --> 00:01:41,759
kong and naturally the middle east

37
00:01:41,759 --> 00:01:42,560
so

38
00:01:42,560 --> 00:01:45,840
we are breaking down this huge term

39
00:01:45,840 --> 00:01:47,920
dozens of threat characters we see

40
00:01:47,920 --> 00:01:51,360
pretty much any and every motivation

41
00:01:51,360 --> 00:01:53,680
we see cyber espionage cyber crime

42
00:01:53,680 --> 00:01:55,119
infoops

43
00:01:55,119 --> 00:01:58,320
however the key drivers we usually see

44
00:01:58,320 --> 00:01:59,680
is them being concerned about their

45
00:01:59,680 --> 00:02:02,560
territorial integrity regime stability

46
00:02:02,560 --> 00:02:04,719
and how they increase their influence in

47
00:02:04,719 --> 00:02:06,840
their region and around the

48
00:02:06,840 --> 00:02:09,919
world so why israel

49
00:02:09,919 --> 00:02:12,800
china invested billions of dollars in

50
00:02:12,800 --> 00:02:14,720
israeli startups

51
00:02:14,720 --> 00:02:17,440
partnered or bought companies in key

52
00:02:17,440 --> 00:02:19,760
industries such as semiconductors and

53
00:02:19,760 --> 00:02:21,520
artificial intelligence

54
00:02:21,520 --> 00:02:23,440
also as part of the belt and road

55
00:02:23,440 --> 00:02:25,760
initiative they have crucial projects in

56
00:02:25,760 --> 00:02:27,520
israel and they pretty much own a rail

57
00:02:27,520 --> 00:02:29,920
and two ports so they have

58
00:02:29,920 --> 00:02:32,160
plenty of interest in israel

59
00:02:32,160 --> 00:02:34,400
and where the chinese have interests

60
00:02:34,400 --> 00:02:37,440
they spy and who would do that for them

61
00:02:37,440 --> 00:02:40,000
well meet anke215.

62
00:02:40,000 --> 00:02:41,360
this is a group that has been active

63
00:02:41,360 --> 00:02:43,440
since 2014.

64
00:02:43,440 --> 00:02:45,200
we have low confidence that there are

65
00:02:45,200 --> 00:02:47,760
distant cousins of apt-27

66
00:02:47,760 --> 00:02:50,480
they have global targeting but they have

67
00:02:50,480 --> 00:02:52,879
a special focus on the middle east and

68
00:02:52,879 --> 00:02:55,440
we see them in places like iran turkey

69
00:02:55,440 --> 00:02:57,440
and naturally in israel they're

70
00:02:57,440 --> 00:02:59,760
interested in governments and health in

71
00:02:59,760 --> 00:03:01,360
defense sector

72
00:03:01,360 --> 00:03:03,200
and in general this is a pretty cool

73
00:03:03,200 --> 00:03:05,280
actor with great opsec and exceptional

74
00:03:05,280 --> 00:03:06,959
tradecraft

75
00:03:06,959 --> 00:03:09,360
let's talk briefly about their classic

76
00:03:09,360 --> 00:03:11,360
toolkit to establish a baseline for

77
00:03:11,360 --> 00:03:13,599
further discussion

78
00:03:13,599 --> 00:03:15,040
this is an actor of one day

79
00:03:15,040 --> 00:03:16,480
vulnerabilities

80
00:03:16,480 --> 00:03:18,400
they like to use simple web shells like

81
00:03:18,400 --> 00:03:20,959
china chopper they have a distinct

82
00:03:20,959 --> 00:03:23,599
loading chain which ends with a uniquely

83
00:03:23,599 --> 00:03:26,159
packed shell code we call silkwrap and

84
00:03:26,159 --> 00:03:28,239
they have two

85
00:03:28,239 --> 00:03:30,159
signature malwares the focus fjord

86
00:03:30,159 --> 00:03:34,159
downloader and the hyper bro backdoor

87
00:03:34,159 --> 00:03:36,480
following this short intro i think we

88
00:03:36,480 --> 00:03:38,879
can now begin the journey of act 2015's

89
00:03:38,879 --> 00:03:41,040
evolution throughout its mission in

90
00:03:41,040 --> 00:03:42,239
israel

91
00:03:42,239 --> 00:03:44,480
i would like to begin where any good

92
00:03:44,480 --> 00:03:46,959
operation would have started and that's

93
00:03:46,959 --> 00:03:49,840
gaining initial access with exploitation

94
00:03:49,840 --> 00:03:53,439
or if you'd like lack of patching

95
00:03:53,439 --> 00:03:56,480
now as of today we've created

96
00:03:56,480 --> 00:03:59,680
this zero day worship culture where we

97
00:03:59,680 --> 00:04:02,239
are constantly terrified for the next

98
00:04:02,239 --> 00:04:04,400
amazing zero day and the next

99
00:04:04,400 --> 00:04:06,319
state-sponsored actor that would bring

100
00:04:06,319 --> 00:04:08,879
its amazing zero day to us

101
00:04:08,879 --> 00:04:11,280
we're constantly chasing the next big

102
00:04:11,280 --> 00:04:12,080
thing

103
00:04:12,080 --> 00:04:14,560
and neglecting all their vulnerabilities

104
00:04:14,560 --> 00:04:17,120
and our protection from them

105
00:04:17,120 --> 00:04:19,358
now i don't do vulnerability research or

106
00:04:19,358 --> 00:04:21,759
collect data that's related to it but

107
00:04:21,759 --> 00:04:24,240
some people do just that so we can look

108
00:04:24,240 --> 00:04:25,919
at their facts

109
00:04:25,919 --> 00:04:28,240
even though you might have think that

110
00:04:28,240 --> 00:04:30,639
breaches these days would leverage newer

111
00:04:30,639 --> 00:04:32,880
vulnerabilities we can see that the

112
00:04:32,880 --> 00:04:35,759
older ones are actually leading the way

113
00:04:35,759 --> 00:04:38,560
even the cisa which would usually be the

114
00:04:38,560 --> 00:04:40,880
first to warn us from these oh so

115
00:04:40,880 --> 00:04:43,199
incredible zero days would actually come

116
00:04:43,199 --> 00:04:44,720
and say well you know what these

117
00:04:44,720 --> 00:04:46,639
state-sponsored actors they would not

118
00:04:46,639 --> 00:04:49,280
only leverage one days but even five

119
00:04:49,280 --> 00:04:51,360
years old ones

120
00:04:51,360 --> 00:04:53,840
when serving organizations that were

121
00:04:53,840 --> 00:04:56,479
breached you can see that most of them

122
00:04:56,479 --> 00:04:58,960
were breached using vulnerabilities that

123
00:04:58,960 --> 00:05:00,720
a patch two was available but was not

124
00:05:00,720 --> 00:05:01,759
applied

125
00:05:01,759 --> 00:05:03,919
and it was not a surprise to them

126
00:05:03,919 --> 00:05:06,720
no these organizations knew they were

127
00:05:06,720 --> 00:05:08,479
vulnerable

128
00:05:08,479 --> 00:05:10,560
but they can definitely explain why it

129
00:05:10,560 --> 00:05:11,680
happened

130
00:05:11,680 --> 00:05:13,440
it's because patching for these

131
00:05:13,440 --> 00:05:16,720
vulnerabilities is a burden it requires

132
00:05:16,720 --> 00:05:19,120
time and resources and it does not

133
00:05:19,120 --> 00:05:20,960
always go right because not all patches

134
00:05:20,960 --> 00:05:22,160
are stable

135
00:05:22,160 --> 00:05:24,639
so we tend to procrastinate it and then

136
00:05:24,639 --> 00:05:27,199
when we will finally do so we would

137
00:05:27,199 --> 00:05:29,520
usually prioritize the most

138
00:05:29,520 --> 00:05:31,680
brutally externally facing areas of our

139
00:05:31,680 --> 00:05:35,039
networks or assets that we feel are

140
00:05:35,039 --> 00:05:37,759
important or interesting

141
00:05:37,759 --> 00:05:40,639
but procrastination does not pay off in

142
00:05:40,639 --> 00:05:42,479
this case

143
00:05:42,479 --> 00:05:45,360
let's review one of ank 215's all-time

144
00:05:45,360 --> 00:05:47,840
favorite one-day vulnerabilities we'll

145
00:05:47,840 --> 00:05:51,120
discuss cve 2019-0-604

146
00:05:51,120 --> 00:05:53,759
it was disclosed by microsoft during

147
00:05:53,759 --> 00:05:57,440
february of 2019 and was patched by them

148
00:05:57,440 --> 00:06:00,160
during end of march of the same year

149
00:06:00,160 --> 00:06:02,160
it's a vulnerability for microsoft

150
00:06:02,160 --> 00:06:03,759
sharepoint servers

151
00:06:03,759 --> 00:06:05,600
what happens is that there is some

152
00:06:05,600 --> 00:06:07,680
improper validation of user supplied

153
00:06:07,680 --> 00:06:10,080
data to the encoder class of the

154
00:06:10,080 --> 00:06:11,360
sharepoint

155
00:06:11,360 --> 00:06:13,759
meaning that the attacker can now send

156
00:06:13,759 --> 00:06:16,479
any serialized xml payload it desires

157
00:06:16,479 --> 00:06:17,840
which would then in turn be

158
00:06:17,840 --> 00:06:20,160
de-serialized and the content from the

159
00:06:20,160 --> 00:06:23,039
xml would be executed as always commands

160
00:06:23,039 --> 00:06:25,360
on the victim's environment

161
00:06:25,360 --> 00:06:28,800
now we have observed ank 215 beginning

162
00:06:28,800 --> 00:06:30,800
to use this vulnerability

163
00:06:30,800 --> 00:06:33,039
during march of 2019

164
00:06:33,039 --> 00:06:35,759
this makes perfect sense because at the

165
00:06:35,759 --> 00:06:38,240
time the patch for it is not available

166
00:06:38,240 --> 00:06:39,680
or very fresh

167
00:06:39,680 --> 00:06:43,039
but pocs are already publicly available

168
00:06:43,039 --> 00:06:45,600
what is interesting is that we see these

169
00:06:45,600 --> 00:06:48,639
guys absolutely peaking with it

170
00:06:48,639 --> 00:06:51,919
all the way into 2020 only to then use

171
00:06:51,919 --> 00:06:55,520
it to pawn israeli government entities

172
00:06:55,520 --> 00:06:59,680
a year after patrolling spawning israeli

173
00:06:59,680 --> 00:07:02,880
government organizations

174
00:07:02,880 --> 00:07:03,759
but

175
00:07:03,759 --> 00:07:05,120
this is a

176
00:07:05,120 --> 00:07:08,240
relatively easy cve to exploit so of

177
00:07:08,240 --> 00:07:10,479
course that it gained great popularity

178
00:07:10,479 --> 00:07:11,280
with

179
00:07:11,280 --> 00:07:13,680
many threat actors and not just anc to

180
00:07:13,680 --> 00:07:14,960
15.

181
00:07:14,960 --> 00:07:18,000
so what did defer our actor from any

182
00:07:18,000 --> 00:07:18,880
other

183
00:07:18,880 --> 00:07:21,280
playing chain that was using it

184
00:07:21,280 --> 00:07:24,639
well arc 215 decided to go against the

185
00:07:24,639 --> 00:07:26,639
flow and against the publicly available

186
00:07:26,639 --> 00:07:28,000
pocs

187
00:07:28,000 --> 00:07:30,080
where most exploitation examples for

188
00:07:30,080 --> 00:07:32,639
this cve would leverage the http post

189
00:07:32,639 --> 00:07:35,599
method meaning that most detection

190
00:07:35,599 --> 00:07:37,919
mechanisms for this vulnerability would

191
00:07:37,919 --> 00:07:40,400
search for these type of requests and

192
00:07:40,400 --> 00:07:43,039
215 use the get method

193
00:07:43,039 --> 00:07:45,440
in order to send get requests that has

194
00:07:45,440 --> 00:07:47,680
content which would usually be just a

195
00:07:47,680 --> 00:07:50,400
small china shop or webshop payload

196
00:07:50,400 --> 00:07:52,720
they were forced to add the entity

197
00:07:52,720 --> 00:07:54,639
separator field to the request with a

198
00:07:54,639 --> 00:07:57,039
unique string value to it

199
00:07:57,039 --> 00:07:59,840
this started as a very clever way of

200
00:07:59,840 --> 00:08:02,560
this actor to attempt to avoid detection

201
00:08:02,560 --> 00:08:04,800
while using an extremely popular

202
00:08:04,800 --> 00:08:06,479
vulnerability

203
00:08:06,479 --> 00:08:09,440
but it actually ended up helping us

204
00:08:09,440 --> 00:08:12,000
identify them better because now during

205
00:08:12,000 --> 00:08:13,919
any investigation where we would

206
00:08:13,919 --> 00:08:16,800
encounter this specific cve leveraged

207
00:08:16,800 --> 00:08:19,360
with get requests the entity separator

208
00:08:19,360 --> 00:08:21,280
field and this value we could almost

209
00:08:21,280 --> 00:08:25,039
immediately attribute to ank to 15.

210
00:08:25,039 --> 00:08:28,400
now this actor was able to leverage this

211
00:08:28,400 --> 00:08:29,919
vulnerability in

212
00:08:29,919 --> 00:08:33,519
such late timing because in any target

213
00:08:33,519 --> 00:08:36,479
they got to they could find at least one

214
00:08:36,479 --> 00:08:39,039
server that was not properly patched

215
00:08:39,039 --> 00:08:41,599
because it's not interesting or nobody

216
00:08:41,599 --> 00:08:44,000
will find it or that they will

217
00:08:44,000 --> 00:08:47,600
do it tomorrow for sure

218
00:08:47,600 --> 00:08:49,920
we can now proceed from

219
00:08:49,920 --> 00:08:52,800
gaining initial access and exploitation

220
00:08:52,800 --> 00:08:55,600
towards our internal networks and

221
00:08:55,600 --> 00:08:57,600
internally facing assets

222
00:08:57,600 --> 00:08:59,519
we're at this point in an operation our

223
00:08:59,519 --> 00:09:01,600
actor has to base its stance in the

224
00:09:01,600 --> 00:09:04,399
network remain persistent and spread on

225
00:09:04,399 --> 00:09:05,920
further

226
00:09:05,920 --> 00:09:08,480
now fortunately for thread actors

227
00:09:08,480 --> 00:09:11,600
networks these days are still built like

228
00:09:11,600 --> 00:09:15,360
m m's they are crispy on the outside but

229
00:09:15,360 --> 00:09:18,480
soft and mellow in the middle

230
00:09:18,480 --> 00:09:20,800
we've mentioned that we know we have

231
00:09:20,800 --> 00:09:23,360
gaps in areas like patching but again

232
00:09:23,360 --> 00:09:25,519
this is only referring to externally

233
00:09:25,519 --> 00:09:28,000
facing areas of our networks we would

234
00:09:28,000 --> 00:09:30,720
usually not even discuss internally

235
00:09:30,720 --> 00:09:32,640
facing ones

236
00:09:32,640 --> 00:09:35,680
these are areas where we usually feel

237
00:09:35,680 --> 00:09:38,720
safer and like we can't be touched

238
00:09:38,720 --> 00:09:41,120
we can look quickly at monitoring

239
00:09:41,120 --> 00:09:44,080
agendas for instance as any organization

240
00:09:44,080 --> 00:09:45,760
would very closely track anything

241
00:09:45,760 --> 00:09:48,240
attempting to penetrate from the outside

242
00:09:48,240 --> 00:09:50,240
and would very closely monitor anything

243
00:09:50,240 --> 00:09:52,800
attempting to leak from its organization

244
00:09:52,800 --> 00:09:54,480
but what happens

245
00:09:54,480 --> 00:09:57,040
if something makes it past these main

246
00:09:57,040 --> 00:09:59,600
entries and exits we're living in this

247
00:09:59,600 --> 00:10:02,720
misconception that if we guard the gates

248
00:10:02,720 --> 00:10:04,640
nothing can bridge in

249
00:10:04,640 --> 00:10:07,120
to me this misconception is even more

250
00:10:07,120 --> 00:10:10,480
interesting these days where any cyber

251
00:10:10,480 --> 00:10:13,040
security article or post would mention

252
00:10:13,040 --> 00:10:15,440
the words zero trust

253
00:10:15,440 --> 00:10:18,079
but we do trust everything in our

254
00:10:18,079 --> 00:10:20,320
networks right

255
00:10:20,320 --> 00:10:23,279
so to show us how wrong we are

256
00:10:23,279 --> 00:10:26,399
and how dangerous this complacency

257
00:10:26,399 --> 00:10:27,920
towards defending and monitoring

258
00:10:27,920 --> 00:10:31,519
internal assets can be and 215 rises to

259
00:10:31,519 --> 00:10:33,839
the occasion

260
00:10:33,839 --> 00:10:36,399
for this i would like to circle back to

261
00:10:36,399 --> 00:10:38,079
the focus fjord

262
00:10:38,079 --> 00:10:40,240
we've mentioned that this is a first

263
00:10:40,240 --> 00:10:41,920
stage downloader

264
00:10:41,920 --> 00:10:44,000
it is delivered to the host via a unique

265
00:10:44,000 --> 00:10:46,079
loading chain making sure that the back

266
00:10:46,079 --> 00:10:48,959
door is only opened in memory

267
00:10:48,959 --> 00:10:50,720
it essentially has

268
00:10:50,720 --> 00:10:52,399
one job

269
00:10:52,399 --> 00:10:55,120
it will establish a connection with a c2

270
00:10:55,120 --> 00:10:57,680
that can either be hard-coded or found

271
00:10:57,680 --> 00:10:59,519
in a dedicated configuration on the

272
00:10:59,519 --> 00:11:01,760
victim's host and then just wait to

273
00:11:01,760 --> 00:11:06,079
receive a next stage payload and load it

274
00:11:06,079 --> 00:11:09,680
the focus field is a super safe and

275
00:11:09,680 --> 00:11:12,399
stable way for our actor to remain

276
00:11:12,399 --> 00:11:15,760
accessible to infect endpoints without

277
00:11:15,760 --> 00:11:18,000
making too much noise and just update

278
00:11:18,000 --> 00:11:20,160
this toolkit from time to time as needed

279
00:11:20,160 --> 00:11:21,200
because

280
00:11:21,200 --> 00:11:23,680
that's a downloader

281
00:11:23,680 --> 00:11:27,360
but when can the focus fjord stop being

282
00:11:27,360 --> 00:11:29,680
so safe and stable

283
00:11:29,680 --> 00:11:31,680
in first case one of the binaries

284
00:11:31,680 --> 00:11:34,320
belonging to said loading chain

285
00:11:34,320 --> 00:11:35,440
might be

286
00:11:35,440 --> 00:11:37,360
caught and quarantined

287
00:11:37,360 --> 00:11:40,480
but we will get back to this issue

288
00:11:40,480 --> 00:11:43,839
second case which we will now focus on

289
00:11:43,839 --> 00:11:45,680
is what happens

290
00:11:45,680 --> 00:11:48,160
if this connection between the focus

291
00:11:48,160 --> 00:11:51,519
here at c2 and the infected endpoint

292
00:11:51,519 --> 00:11:53,760
is detected and blocked

293
00:11:53,760 --> 00:11:56,800
well act 215 will now show us their

294
00:11:56,800 --> 00:11:59,920
attempt of solving this issue once and

295
00:11:59,920 --> 00:12:01,839
for all

296
00:12:01,839 --> 00:12:04,880
during our investigations for government

297
00:12:04,880 --> 00:12:08,000
and high-tech israeli victims we began

298
00:12:08,000 --> 00:12:10,399
to collect our evidence

299
00:12:10,399 --> 00:12:12,880
we of course gathered new focus your

300
00:12:12,880 --> 00:12:14,000
binaries

301
00:12:14,000 --> 00:12:16,480
when opening them we could immediately

302
00:12:16,480 --> 00:12:18,720
notice that in opposed to previous

303
00:12:18,720 --> 00:12:20,560
variants that only supported

304
00:12:20,560 --> 00:12:23,279
communication over https

305
00:12:23,279 --> 00:12:25,279
we can now see five supported

306
00:12:25,279 --> 00:12:27,040
communication protocols

307
00:12:27,040 --> 00:12:31,920
so we see now http https tcp udp and

308
00:12:31,920 --> 00:12:33,600
auto

309
00:12:33,600 --> 00:12:35,440
i think we can all agree we know what

310
00:12:35,440 --> 00:12:39,839
the first four are but what is auto

311
00:12:39,839 --> 00:12:42,959
well turns out this is a custom binary

312
00:12:42,959 --> 00:12:46,560
protocol crafted by ank 215 then

313
00:12:46,560 --> 00:12:49,760
implemented into the focusrite backdoor

314
00:12:49,760 --> 00:12:52,079
i would like to refer to it as the proxy

315
00:12:52,079 --> 00:12:54,480
field protocol from now on

316
00:12:54,480 --> 00:12:56,880
the proxy field protocol enables our

317
00:12:56,880 --> 00:12:59,920
actor to minimize its outbound footprint

318
00:12:59,920 --> 00:13:02,959
to the very very bare minimum by

319
00:13:02,959 --> 00:13:06,880
implementing an internal cnc hierarchy

320
00:13:06,880 --> 00:13:09,440
what happens now is that this actor can

321
00:13:09,440 --> 00:13:12,240
reach the network then deploy between

322
00:13:12,240 --> 00:13:15,120
one to two instances of the back door

323
00:13:15,120 --> 00:13:16,959
these would be called the externally

324
00:13:16,959 --> 00:13:18,959
configured focus fields they will be

325
00:13:18,959 --> 00:13:22,240
configured to use a real c2 address and

326
00:13:22,240 --> 00:13:25,440
a real protocol like https

327
00:13:25,440 --> 00:13:28,560
the actor can now proceed and deploy as

328
00:13:28,560 --> 00:13:30,160
many additional instances of the

329
00:13:30,160 --> 00:13:33,839
backdoor in the network as it desires

330
00:13:33,839 --> 00:13:35,760
these would be called the internally

331
00:13:35,760 --> 00:13:37,680
configured focus viewers

332
00:13:37,680 --> 00:13:41,040
for c2 they will use the addresses of

333
00:13:41,040 --> 00:13:42,720
the endpoints where the externally

334
00:13:42,720 --> 00:13:45,279
configured instances are installed

335
00:13:45,279 --> 00:13:47,360
for protocol they will leverage the

336
00:13:47,360 --> 00:13:48,959
proxy fjord

337
00:13:48,959 --> 00:13:51,920
so now the majority of the malicious

338
00:13:51,920 --> 00:13:55,199
focuser communication is happening

339
00:13:55,199 --> 00:13:58,240
inside the organizational network via

340
00:13:58,240 --> 00:14:01,440
internal ip addresses belonging to this

341
00:14:01,440 --> 00:14:03,279
pond organization

342
00:14:03,279 --> 00:14:05,760
making this entire thing almost

343
00:14:05,760 --> 00:14:07,760
impossible to detect

344
00:14:07,760 --> 00:14:10,720
unless you monitor your internal network

345
00:14:10,720 --> 00:14:11,760
which

346
00:14:11,760 --> 00:14:14,079
almost nobody does

347
00:14:14,079 --> 00:14:15,600
only between

348
00:14:15,600 --> 00:14:18,880
one to two endpoints in the entire

349
00:14:18,880 --> 00:14:21,839
network now we'll go out to a real

350
00:14:21,839 --> 00:14:25,120
internet facing seat too

351
00:14:25,120 --> 00:14:29,040
i wanna go over a quick example for how

352
00:14:29,040 --> 00:14:31,920
proxy field actually looks like in real

353
00:14:31,920 --> 00:14:33,040
life

354
00:14:33,040 --> 00:14:35,600
now this example was taken out of one of

355
00:14:35,600 --> 00:14:38,560
our victims environment and this is a

356
00:14:38,560 --> 00:14:41,360
decrypted packet because

357
00:14:41,360 --> 00:14:43,040
communication inside the network is

358
00:14:43,040 --> 00:14:46,560
encrypted we can see it's consisted of

359
00:14:46,560 --> 00:14:47,839
three parts

360
00:14:47,839 --> 00:14:50,399
the first is the internally configured

361
00:14:50,399 --> 00:14:53,920
focus field given details about himself

362
00:14:53,920 --> 00:14:55,600
this is where i'm installed this is my

363
00:14:55,600 --> 00:14:57,440
host name and this is the c2 i would

364
00:14:57,440 --> 00:14:58,880
like to use

365
00:14:58,880 --> 00:15:00,959
second part is saved for results of

366
00:15:00,959 --> 00:15:02,880
command's execution

367
00:15:02,880 --> 00:15:06,320
third part is intended to the externally

368
00:15:06,320 --> 00:15:09,279
configured instance it has details like

369
00:15:09,279 --> 00:15:12,240
use this protocol use this c2 and use

370
00:15:12,240 --> 00:15:14,880
this network identifier so our operator

371
00:15:14,880 --> 00:15:17,440
can know who we are

372
00:15:17,440 --> 00:15:18,560
this is a

373
00:15:18,560 --> 00:15:22,240
very typical behavior for anc215 because

374
00:15:22,240 --> 00:15:26,800
this actor knows it already has reliable

375
00:15:26,800 --> 00:15:29,440
knowledge and infrastructure to operate

376
00:15:29,440 --> 00:15:32,079
the focus your backdoor so it would now

377
00:15:32,079 --> 00:15:34,959
make just the right changes to it to

378
00:15:34,959 --> 00:15:37,199
help it avoid detection rather than

379
00:15:37,199 --> 00:15:39,519
attempting to develop completely new

380
00:15:39,519 --> 00:15:42,560
tools and techniques

381
00:15:42,639 --> 00:15:45,360
at this point this actor now

382
00:15:45,360 --> 00:15:47,279
gained initial access

383
00:15:47,279 --> 00:15:50,560
it definitely based its stance inside

384
00:15:50,560 --> 00:15:52,000
the network

385
00:15:52,000 --> 00:15:54,560
so it's time that we arrive to the peak

386
00:15:54,560 --> 00:15:56,320
of the operation

387
00:15:56,320 --> 00:15:58,959
at this point our actor has to deliver

388
00:15:58,959 --> 00:16:01,440
hardcore backdoors to the field it's

389
00:16:01,440 --> 00:16:03,759
time to engage in data collection and

390
00:16:03,759 --> 00:16:05,600
exfiltration activities

391
00:16:05,600 --> 00:16:07,440
and it's mainly time to do all that

392
00:16:07,440 --> 00:16:09,839
without attracting any unnecessary

393
00:16:09,839 --> 00:16:12,240
attention

394
00:16:12,240 --> 00:16:16,480
now we have been tracking ank 215 for

395
00:16:16,480 --> 00:16:18,240
quite some time now

396
00:16:18,240 --> 00:16:21,519
so we can say that these guys have three

397
00:16:21,519 --> 00:16:24,480
main modes of operation arriving to this

398
00:16:24,480 --> 00:16:25,920
point

399
00:16:25,920 --> 00:16:29,199
first mode is comfort zone

400
00:16:29,199 --> 00:16:32,800
this is a seasoned actor it knows it has

401
00:16:32,800 --> 00:16:34,600
very reliable

402
00:16:34,600 --> 00:16:37,199
infrastructure backdoors and techniques

403
00:16:37,199 --> 00:16:39,360
that had been serving it faithfully for

404
00:16:39,360 --> 00:16:40,560
years now

405
00:16:40,560 --> 00:16:42,800
so they should not be replaced as long

406
00:16:42,800 --> 00:16:44,880
as they work

407
00:16:44,880 --> 00:16:48,399
second mode is what happens when these

408
00:16:48,399 --> 00:16:52,320
so trustworthy malwares and techniques

409
00:16:52,320 --> 00:16:54,959
are not so trustworthy anymore

410
00:16:54,959 --> 00:16:56,959
and then at this point this actor is

411
00:16:56,959 --> 00:16:59,600
under great pressure and might suffer

412
00:16:59,600 --> 00:17:01,920
binary is crushing and being quarantined

413
00:17:01,920 --> 00:17:03,920
and has to deliver quick fixes to the

414
00:17:03,920 --> 00:17:06,480
field during real time

415
00:17:06,480 --> 00:17:09,839
third mode is when anc 215 would

416
00:17:09,839 --> 00:17:13,039
demonstrate us their exceptional

417
00:17:13,039 --> 00:17:15,760
development skills and would introduce

418
00:17:15,760 --> 00:17:17,679
completely new backdoors to avoid just

419
00:17:17,679 --> 00:17:19,760
these high pressure situations for

420
00:17:19,760 --> 00:17:21,359
important targets

421
00:17:21,359 --> 00:17:22,240
all

422
00:17:22,240 --> 00:17:25,280
while staying true to their origins

423
00:17:25,280 --> 00:17:27,520
we will now go into further details of

424
00:17:27,520 --> 00:17:29,280
each mode

425
00:17:29,280 --> 00:17:31,440
so comfort zones

426
00:17:31,440 --> 00:17:33,520
for me i would have to say that the

427
00:17:33,520 --> 00:17:35,440
first significant comfort zone for

428
00:17:35,440 --> 00:17:36,960
anc215

429
00:17:36,960 --> 00:17:39,440
would be their unique loading chain used

430
00:17:39,440 --> 00:17:41,600
to deliver their malwares

431
00:17:41,600 --> 00:17:44,240
it consists of three binaries that must

432
00:17:44,240 --> 00:17:46,240
all be present in the same path to

433
00:17:46,240 --> 00:17:49,039
achieve successful execution

434
00:17:49,039 --> 00:17:51,760
the first is a legit binary vulnerable

435
00:17:51,760 --> 00:17:54,640
to dll side loading this actor would

436
00:17:54,640 --> 00:17:57,679
abuse that obviously to sideload a

437
00:17:57,679 --> 00:17:59,200
loader dll

438
00:17:59,200 --> 00:18:01,919
when executed it would initiate a xor

439
00:18:01,919 --> 00:18:04,320
decoding routine and then open parts of

440
00:18:04,320 --> 00:18:05,520
himself

441
00:18:05,520 --> 00:18:07,919
it will then proceed to read and load

442
00:18:07,919 --> 00:18:10,559
the third and final component which is a

443
00:18:10,559 --> 00:18:12,400
pac shellcode

444
00:18:12,400 --> 00:18:15,120
the shellcode for this packer is called

445
00:18:15,120 --> 00:18:18,400
silkwrap and is custom made by our actor

446
00:18:18,400 --> 00:18:21,200
silkrip enables to hide compressed

447
00:18:21,200 --> 00:18:24,480
payloads in a shell shellcode

448
00:18:24,480 --> 00:18:27,200
when opening it we would usually find

449
00:18:27,200 --> 00:18:29,679
one of two back doors either a focus

450
00:18:29,679 --> 00:18:33,200
field or a hyper bro which is a very

451
00:18:33,200 --> 00:18:35,679
robust backdoor offering many

452
00:18:35,679 --> 00:18:38,240
capabilities such as execution of cmd

453
00:18:38,240 --> 00:18:40,000
commands enumeration and termination of

454
00:18:40,000 --> 00:18:44,160
processes and files download and uploads

455
00:18:44,160 --> 00:18:47,039
second prominent comfort zone for

456
00:18:47,039 --> 00:18:50,480
android 15 would have to be their unique

457
00:18:50,480 --> 00:18:53,760
backdoor configuration storing mechanism

458
00:18:53,760 --> 00:18:56,480
upon first delivery of both backdoors

459
00:18:56,480 --> 00:18:58,320
they will contain a clear text

460
00:18:58,320 --> 00:19:00,000
configuration block

461
00:19:00,000 --> 00:19:02,480
it will have information like c2

462
00:19:02,480 --> 00:19:06,160
addresses parts of encryption keys and

463
00:19:06,160 --> 00:19:09,600
paths for files of the loading chain

464
00:19:09,600 --> 00:19:12,799
now upon first execution these blocks

465
00:19:12,799 --> 00:19:15,120
would be stored under dedicated config

466
00:19:15,120 --> 00:19:17,039
registry entries

467
00:19:17,039 --> 00:19:19,120
now these entries would be different for

468
00:19:19,120 --> 00:19:21,039
the two hour families and would

469
00:19:21,039 --> 00:19:23,360
sometimes even be different for variants

470
00:19:23,360 --> 00:19:25,280
of the same backdoor

471
00:19:25,280 --> 00:19:27,440
now hyperbro would just store its

472
00:19:27,440 --> 00:19:29,520
configuration as is and will continue

473
00:19:29,520 --> 00:19:31,120
its execution

474
00:19:31,120 --> 00:19:33,440
focus feared would encrypt its

475
00:19:33,440 --> 00:19:36,400
configuration prior to storing it and

476
00:19:36,400 --> 00:19:38,960
then afterwards will rewrite itself

477
00:19:38,960 --> 00:19:41,200
without this block and restart its

478
00:19:41,200 --> 00:19:43,760
execution to eliminate

479
00:19:43,760 --> 00:19:45,840
any infrastructure or attribution

480
00:19:45,840 --> 00:19:50,400
related evidence in later stages

481
00:19:50,400 --> 00:19:51,440
now

482
00:19:51,440 --> 00:19:53,440
in most cases

483
00:19:53,440 --> 00:19:56,640
these techniques and the two backdoors

484
00:19:56,640 --> 00:19:57,840
would be

485
00:19:57,840 --> 00:20:01,039
more than enough for our actor to have a

486
00:20:01,039 --> 00:20:03,600
successful operation

487
00:20:03,600 --> 00:20:05,280
but sometimes though

488
00:20:05,280 --> 00:20:07,200
they're not

489
00:20:07,200 --> 00:20:10,240
we saw for investigations for

490
00:20:10,240 --> 00:20:13,600
super high profile israeli victims that

491
00:20:13,600 --> 00:20:16,640
at some point binaries belonging to

492
00:20:16,640 --> 00:20:19,520
loading chains of both back doors

493
00:20:19,520 --> 00:20:21,840
began to be detected and quarantined by

494
00:20:21,840 --> 00:20:25,280
edr's and windows defender services

495
00:20:25,280 --> 00:20:26,559
this is a

496
00:20:26,559 --> 00:20:29,120
huge problem for annex 2015 at this

497
00:20:29,120 --> 00:20:31,520
point because first of all they might

498
00:20:31,520 --> 00:20:34,799
lose access to very important victims

499
00:20:34,799 --> 00:20:38,320
second of all these quarantine alerts

500
00:20:38,320 --> 00:20:41,200
they might create noise and catch the

501
00:20:41,200 --> 00:20:44,400
attention of defenders in the network

502
00:20:44,400 --> 00:20:47,600
spoiler alert it didn't catch anybody's

503
00:20:47,600 --> 00:20:49,360
attention

504
00:20:49,360 --> 00:20:50,640
lastly

505
00:20:50,640 --> 00:20:53,600
as we've mentioned loading chains

506
00:20:53,600 --> 00:20:55,280
must be complete of all three binaries

507
00:20:55,280 --> 00:20:57,039
to successfully operate

508
00:20:57,039 --> 00:20:59,679
so when one file is quarantined the

509
00:20:59,679 --> 00:21:01,919
others are attempting to execute

510
00:21:01,919 --> 00:21:04,559
crashing and creating even more

511
00:21:04,559 --> 00:21:06,720
unnecessary noise

512
00:21:06,720 --> 00:21:07,679
well

513
00:21:07,679 --> 00:21:10,240
act 215 will now demonstrate their

514
00:21:10,240 --> 00:21:12,320
incredible three-phase plan

515
00:21:12,320 --> 00:21:15,039
to solve this issue

516
00:21:15,039 --> 00:21:16,960
first phase would be patching the focus

517
00:21:16,960 --> 00:21:19,840
field this is a small back door so

518
00:21:19,840 --> 00:21:22,559
there's not much to change in it

519
00:21:22,559 --> 00:21:24,799
so our actor compiles dedicated

520
00:21:24,799 --> 00:21:26,880
third-party utilities to support it from

521
00:21:26,880 --> 00:21:28,159
the side

522
00:21:28,159 --> 00:21:30,159
the first utility we've seen is dubbed

523
00:21:30,159 --> 00:21:32,000
the fjordo helper

524
00:21:32,000 --> 00:21:34,559
it can allow the actor to access and

525
00:21:34,559 --> 00:21:36,640
update the focus fields registry

526
00:21:36,640 --> 00:21:39,520
configuration and by doing that

527
00:21:39,520 --> 00:21:42,480
fixing broken loading chains

528
00:21:42,480 --> 00:21:45,440
in case of this actor is super desperate

529
00:21:45,440 --> 00:21:47,600
it just want to avoid being detected and

530
00:21:47,600 --> 00:21:51,280
attributed fiordo helper can eliminate

531
00:21:51,280 --> 00:21:53,520
all focusrite related evidence from the

532
00:21:53,520 --> 00:21:56,559
host and delete all binaries persistent

533
00:21:56,559 --> 00:21:58,559
and services

534
00:21:58,559 --> 00:22:00,960
second utility we've observed is called

535
00:22:00,960 --> 00:22:02,720
the proxy fjord

536
00:22:02,720 --> 00:22:04,799
which i think at this point we're all

537
00:22:04,799 --> 00:22:07,440
familiar with this term

538
00:22:07,440 --> 00:22:10,159
the proxy field utility is essentially

539
00:22:10,159 --> 00:22:12,960
the communication function of the focus

540
00:22:12,960 --> 00:22:17,440
field compiled into a standalone binary

541
00:22:17,440 --> 00:22:20,400
now that our actor has its internal cnc

542
00:22:20,400 --> 00:22:23,200
hierarchy using the proxy field it can

543
00:22:23,200 --> 00:22:25,760
replace backdoor instances with the

544
00:22:25,760 --> 00:22:28,080
utility instances

545
00:22:28,080 --> 00:22:30,799
by decreasing the number of backdoors in

546
00:22:30,799 --> 00:22:33,679
the network it can decrease its chances

547
00:22:33,679 --> 00:22:36,320
of being detected

548
00:22:36,320 --> 00:22:38,559
second phase would be

549
00:22:38,559 --> 00:22:42,000
stopping the hyper bro quarantines

550
00:22:42,000 --> 00:22:44,080
now we've said that this is a

551
00:22:44,080 --> 00:22:48,080
much larger backdoor so ank 215 now take

552
00:22:48,080 --> 00:22:50,400
their shot and attempt to upgrade the

553
00:22:50,400 --> 00:22:52,080
entire thing

554
00:22:52,080 --> 00:22:54,640
they will begin by switching the

555
00:22:54,640 --> 00:22:56,960
vulnerable legit binary they will

556
00:22:56,960 --> 00:22:58,960
accordingly change the name of the

557
00:22:58,960 --> 00:23:00,960
loader dll

558
00:23:00,960 --> 00:23:04,000
then for good measures they will even

559
00:23:04,000 --> 00:23:06,720
add capabilities to the back door to

560
00:23:06,720 --> 00:23:10,080
make it even more noticeable

561
00:23:10,080 --> 00:23:12,320
well this of course was a

562
00:23:12,320 --> 00:23:16,720
huge mistake because not even 30 minutes

563
00:23:16,720 --> 00:23:18,960
after introduction to the field of the

564
00:23:18,960 --> 00:23:21,039
upgraded variant

565
00:23:21,039 --> 00:23:22,480
it was quarantined

566
00:23:22,480 --> 00:23:24,880
again

567
00:23:24,880 --> 00:23:29,280
and 215 are now in great trouble

568
00:23:29,280 --> 00:23:31,200
because first of all they might be

569
00:23:31,200 --> 00:23:33,440
detected and attributed

570
00:23:33,440 --> 00:23:36,080
they might lose access to these so

571
00:23:36,080 --> 00:23:37,919
important victims

572
00:23:37,919 --> 00:23:40,559
and at this point they might also lose

573
00:23:40,559 --> 00:23:42,080
their heads

574
00:23:42,080 --> 00:23:44,799
so they realized they have no choice but

575
00:23:44,799 --> 00:23:47,600
to disable all edr's and windows

576
00:23:47,600 --> 00:23:50,559
defender services for these hosts

577
00:23:50,559 --> 00:23:53,039
they will look for solutions of how to

578
00:23:53,039 --> 00:23:56,240
access protected processes in the os

579
00:23:56,240 --> 00:23:58,400
and will head to where

580
00:23:58,400 --> 00:24:00,880
any good developer in need will go stack

581
00:24:00,880 --> 00:24:03,760
overflow or get

582
00:24:03,760 --> 00:24:06,720
luckily today there is this

583
00:24:06,720 --> 00:24:09,520
great abundance of supported providers

584
00:24:09,520 --> 00:24:12,000
of vulnerable drivers and git

585
00:24:12,000 --> 00:24:15,919
repositories that offer just that

586
00:24:15,919 --> 00:24:19,200
but you can see this one behind me is

587
00:24:19,200 --> 00:24:21,760
very new and and is being updated as we

588
00:24:21,760 --> 00:24:22,799
speak

589
00:24:22,799 --> 00:24:26,000
ank 215 will opt for something more

590
00:24:26,000 --> 00:24:27,520
vintage

591
00:24:27,520 --> 00:24:29,840
they will choose the striker project

592
00:24:29,840 --> 00:24:34,240
from 2018 leveraging a cve from 2017

593
00:24:34,240 --> 00:24:37,200
we assumed they did that because as this

594
00:24:37,200 --> 00:24:40,720
actor appreciate its trustworthy

595
00:24:40,720 --> 00:24:43,279
techniques and tools that had been

596
00:24:43,279 --> 00:24:45,279
with him for years

597
00:24:45,279 --> 00:24:47,200
they know that a repository that is

598
00:24:47,200 --> 00:24:50,720
staying stable from 2018 is far more

599
00:24:50,720 --> 00:24:52,400
tried and tested than something that was

600
00:24:52,400 --> 00:24:53,520
compiled

601
00:24:53,520 --> 00:24:55,520
yesterday

602
00:24:55,520 --> 00:24:57,600
now striker project

603
00:24:57,600 --> 00:24:59,440
is leveraging

604
00:24:59,440 --> 00:25:02,320
two third-party drivers a vulnerable one

605
00:25:02,320 --> 00:25:04,000
and a used one

606
00:25:04,000 --> 00:25:06,159
in order to do things like hijack

607
00:25:06,159 --> 00:25:08,799
protected processes and load unsigned

608
00:25:08,799 --> 00:25:10,480
drivers

609
00:25:10,480 --> 00:25:14,240
ank 215 will now compile a brand new

610
00:25:14,240 --> 00:25:18,000
malware based on this project called

611
00:25:18,000 --> 00:25:19,919
anti

612
00:25:19,919 --> 00:25:23,440
following execution of anti on hosts in

613
00:25:23,440 --> 00:25:24,559
the field

614
00:25:24,559 --> 00:25:27,039
we could see event logs mentioning that

615
00:25:27,039 --> 00:25:31,760
indeed all edr were terminated and all

616
00:25:31,760 --> 00:25:35,039
windows defender services were stopped

617
00:25:35,039 --> 00:25:37,840
meaning this was not only properly

618
00:25:37,840 --> 00:25:39,039
planned

619
00:25:39,039 --> 00:25:43,000
but actually worked

620
00:25:44,159 --> 00:25:47,360
so we have now seen once 215 in their

621
00:25:47,360 --> 00:25:50,400
comfort zone we have also seen

622
00:25:50,400 --> 00:25:52,640
that when push comes to shove they

623
00:25:52,640 --> 00:25:55,760
develop ad hoc solutions to stay on high

624
00:25:55,760 --> 00:25:58,559
profile victims

625
00:25:58,559 --> 00:26:00,080
nevertheless

626
00:26:00,080 --> 00:26:01,600
although we accommodated the knowledge

627
00:26:01,600 --> 00:26:05,440
of striker their signature malware

628
00:26:05,440 --> 00:26:09,360
still got detected and quarantined

629
00:26:09,360 --> 00:26:11,760
which pushed them to develop a new

630
00:26:11,760 --> 00:26:14,240
framework which would be more stealthy

631
00:26:14,240 --> 00:26:15,919
and more robust

632
00:26:15,919 --> 00:26:17,840
they would up their game and move

633
00:26:17,840 --> 00:26:21,679
finally from user mode to kernel space

634
00:26:21,679 --> 00:26:24,720
now this new framework is rather complex

635
00:26:24,720 --> 00:26:26,880
so bear me with me as i go over the

636
00:26:26,880 --> 00:26:29,360
details

637
00:26:29,679 --> 00:26:31,279
while we were looking for their

638
00:26:31,279 --> 00:26:33,200
signature loading chain

639
00:26:33,200 --> 00:26:35,440
we found something new now first their

640
00:26:35,440 --> 00:26:38,480
loading chain would start as a service

641
00:26:38,480 --> 00:26:40,960
next while they also used the registry

642
00:26:40,960 --> 00:26:42,480
as before

643
00:26:42,480 --> 00:26:44,799
it contained much more than just some

644
00:26:44,799 --> 00:26:46,880
configs

645
00:26:46,880 --> 00:26:48,960
so the payload would be decoded from the

646
00:26:48,960 --> 00:26:51,120
shell code and then it would go to the

647
00:26:51,120 --> 00:26:54,720
registry and decode yet another loader

648
00:26:54,720 --> 00:26:56,559
in memory only

649
00:26:56,559 --> 00:26:59,200
which would start a whole new execution

650
00:26:59,200 --> 00:27:01,360
chain

651
00:27:01,360 --> 00:27:04,000
now we know they like to use striker

652
00:27:04,000 --> 00:27:06,480
so we looked and unsurprisingly we found

653
00:27:06,480 --> 00:27:08,480
the two legitimate drivers that strike

654
00:27:08,480 --> 00:27:10,080
her references

655
00:27:10,080 --> 00:27:12,240
however they didn't use striker out of

656
00:27:12,240 --> 00:27:13,360
the box

657
00:27:13,360 --> 00:27:15,360
they decided to change it upgrade it to

658
00:27:15,360 --> 00:27:18,320
make it more robust

659
00:27:18,320 --> 00:27:20,799
and also interestingly their loader

660
00:27:20,799 --> 00:27:24,399
would start with dumping a log file

661
00:27:24,399 --> 00:27:27,200
clear text hidden in plain sight which

662
00:27:27,200 --> 00:27:28,240
would log

663
00:27:28,240 --> 00:27:31,120
every step of the loading chain

664
00:27:31,120 --> 00:27:33,520
so helpful to me

665
00:27:33,520 --> 00:27:36,080
now and then would go and extract a

666
00:27:36,080 --> 00:27:38,240
shell code from registry

667
00:27:38,240 --> 00:27:40,240
it would load the vulnerable cpu z

668
00:27:40,240 --> 00:27:41,840
driver

669
00:27:41,840 --> 00:27:43,600
it would then load the abused sys

670
00:27:43,600 --> 00:27:45,200
internals driver

671
00:27:45,200 --> 00:27:46,720
then it would use the cpu z

672
00:27:46,720 --> 00:27:48,480
vulnerability to scan the entire

673
00:27:48,480 --> 00:27:49,919
physical space

674
00:27:49,919 --> 00:27:52,320
for the specific bytes of the specific

675
00:27:52,320 --> 00:27:55,200
dispatch handler of the specific version

676
00:27:55,200 --> 00:27:57,120
of the sysinternals driver they were

677
00:27:57,120 --> 00:27:58,480
using

678
00:27:58,480 --> 00:28:00,799
once found they would copy aside the

679
00:28:00,799 --> 00:28:03,200
legitimate code and overwrite it with

680
00:28:03,200 --> 00:28:05,919
above-mentioned shellcode

681
00:28:05,919 --> 00:28:07,120
they would then

682
00:28:07,120 --> 00:28:09,840
issue a specific io control to the

683
00:28:09,840 --> 00:28:12,640
driver and trigger the shellcode

684
00:28:12,640 --> 00:28:15,200
the shellcode in turn would unpack and

685
00:28:15,200 --> 00:28:18,320
load an unsigned driver into

686
00:28:18,320 --> 00:28:21,039
non-mapped unmapped and non-paged kernel

687
00:28:21,039 --> 00:28:22,559
space

688
00:28:22,559 --> 00:28:26,399
now unlike striker these guys they like

689
00:28:26,399 --> 00:28:28,159
clean work

690
00:28:28,159 --> 00:28:30,640
so immediately after usage they restored

691
00:28:30,640 --> 00:28:32,320
their legitimate code to the abused

692
00:28:32,320 --> 00:28:33,679
driver

693
00:28:33,679 --> 00:28:36,480
and naturally they safely unloaded the

694
00:28:36,480 --> 00:28:38,640
legitimate drivers to avoid any

695
00:28:38,640 --> 00:28:41,440
potential blue screens

696
00:28:41,440 --> 00:28:45,360
now what does this driver do

697
00:28:45,360 --> 00:28:47,440
this is a filter driver

698
00:28:47,440 --> 00:28:50,399
however as you might know if you try to

699
00:28:50,399 --> 00:28:52,559
register a callback in your filter

700
00:28:52,559 --> 00:28:55,600
driver to unmapped kernel space

701
00:28:55,600 --> 00:28:58,159
some windows 10 mitigations

702
00:28:58,159 --> 00:29:00,159
might complain

703
00:29:00,159 --> 00:29:02,720
now to avoid just that they would put a

704
00:29:02,720 --> 00:29:05,279
small trampoline overwriting legitimate

705
00:29:05,279 --> 00:29:09,279
but unused code in tcpap driver

706
00:29:09,279 --> 00:29:10,399
and then

707
00:29:10,399 --> 00:29:12,720
the callback goes to mapped space and

708
00:29:12,720 --> 00:29:16,880
execution proceeds to their driver later

709
00:29:16,880 --> 00:29:20,480
now what does their filter driver filter

710
00:29:20,480 --> 00:29:22,399
well they protect the framework's

711
00:29:22,399 --> 00:29:24,559
components first and foremost they

712
00:29:24,559 --> 00:29:27,679
protect the files and the loading chain

713
00:29:27,679 --> 00:29:30,480
then they protect the registry keys

714
00:29:30,480 --> 00:29:32,159
and third

715
00:29:32,159 --> 00:29:33,679
they protect

716
00:29:33,679 --> 00:29:34,880
elsa's

717
00:29:34,880 --> 00:29:36,960
from dumping or access

718
00:29:36,960 --> 00:29:39,440
now why would they do that

719
00:29:39,440 --> 00:29:41,760
spoiler not in order to protect the

720
00:29:41,760 --> 00:29:44,640
victim from mimikats

721
00:29:44,640 --> 00:29:46,640
now they inject a fully functional

722
00:29:46,640 --> 00:29:49,520
backdoor into elsa's

723
00:29:49,520 --> 00:29:52,080
we have seen a trend with this actor of

724
00:29:52,080 --> 00:29:54,399
trying to minimize their outbound

725
00:29:54,399 --> 00:29:55,760
footprint

726
00:29:55,760 --> 00:29:57,679
this is no exception

727
00:29:57,679 --> 00:29:59,840
and they would try to masquerade as a

728
00:29:59,840 --> 00:30:02,720
legitimate web server

729
00:30:02,720 --> 00:30:05,200
they would register a filter

730
00:30:05,200 --> 00:30:07,440
with their driver that would listen on

731
00:30:07,440 --> 00:30:09,919
incoming traffic

732
00:30:09,919 --> 00:30:12,240
once there is an incoming packet to a

733
00:30:12,240 --> 00:30:15,919
specific legitimate looking uri

734
00:30:15,919 --> 00:30:17,039
and

735
00:30:17,039 --> 00:30:19,600
that has a specific magic value in its

736
00:30:19,600 --> 00:30:20,640
headers

737
00:30:20,640 --> 00:30:23,279
it would store the command and then the

738
00:30:23,279 --> 00:30:25,200
back door from elsa's would retrieve it

739
00:30:25,200 --> 00:30:26,559
later

740
00:30:26,559 --> 00:30:28,799
once the back door is done with its

741
00:30:28,799 --> 00:30:31,760
business and wants to send the reply

742
00:30:31,760 --> 00:30:33,679
it would issue an i o control to the

743
00:30:33,679 --> 00:30:35,039
driver

744
00:30:35,039 --> 00:30:36,720
which would in turn

745
00:30:36,720 --> 00:30:39,919
inject directly onto tcp stack the reply

746
00:30:39,919 --> 00:30:42,399
using the windows filtering platform

747
00:30:42,399 --> 00:30:45,120
avoiding any standard windows apis that

748
00:30:45,120 --> 00:30:48,080
are usually monitored

749
00:30:48,080 --> 00:30:50,480
another pretty cute thing we've seen

750
00:30:50,480 --> 00:30:52,640
with this framework

751
00:30:52,640 --> 00:30:53,840
is that

752
00:30:53,840 --> 00:30:56,799
their log file remains unprotected on

753
00:30:56,799 --> 00:30:57,840
disk

754
00:30:57,840 --> 00:31:00,399
the second thing about this log file

755
00:31:00,399 --> 00:31:03,679
is that they use the word test a lot

756
00:31:03,679 --> 00:31:04,720
now

757
00:31:04,720 --> 00:31:06,720
they have used the word test in previous

758
00:31:06,720 --> 00:31:09,760
versions of this framework

759
00:31:09,760 --> 00:31:12,159
while we don't really think that this

760
00:31:12,159 --> 00:31:15,840
framework is still in its testing phases

761
00:31:15,840 --> 00:31:17,679
we are pretty sure that the developers

762
00:31:17,679 --> 00:31:18,640
at least

763
00:31:18,640 --> 00:31:23,600
think this is not even their final form

764
00:31:24,159 --> 00:31:26,159
so let's discuss a bit

765
00:31:26,159 --> 00:31:28,320
the similarities

766
00:31:28,320 --> 00:31:29,279
and their

767
00:31:29,279 --> 00:31:31,200
and them remaining true to their origins

768
00:31:31,200 --> 00:31:33,279
and the differences between this

769
00:31:33,279 --> 00:31:35,279
framework and what we've previously seen

770
00:31:35,279 --> 00:31:37,600
by this actor

771
00:31:37,600 --> 00:31:40,240
in both cases they use registry to store

772
00:31:40,240 --> 00:31:41,519
artifacts

773
00:31:41,519 --> 00:31:43,600
but here they they stole a whole loading

774
00:31:43,600 --> 00:31:44,840
chain worth of

775
00:31:44,840 --> 00:31:47,919
pokemons components

776
00:31:47,919 --> 00:31:51,760
both use the same classic loading chain

777
00:31:51,760 --> 00:31:53,519
however in this case

778
00:31:53,519 --> 00:31:57,039
they used hostname based guardrail

779
00:31:57,039 --> 00:31:58,960
their loading chain would actually

780
00:31:58,960 --> 00:32:02,320
execute properly only on the specific

781
00:32:02,320 --> 00:32:05,200
host name it was designed for and

782
00:32:05,200 --> 00:32:06,799
compiled for

783
00:32:06,799 --> 00:32:11,360
it would not decode on any other host

784
00:32:11,360 --> 00:32:13,039
both use

785
00:32:13,039 --> 00:32:15,840
stealthy back doors but these are much

786
00:32:15,840 --> 00:32:18,880
stealthier with same capabilities

787
00:32:18,880 --> 00:32:22,159
we have seen this driver used before

788
00:32:22,159 --> 00:32:23,919
open on disk

789
00:32:23,919 --> 00:32:25,760
well i guess they decided it's better to

790
00:32:25,760 --> 00:32:29,840
have it open only in memory

791
00:32:30,159 --> 00:32:30,960
so

792
00:32:30,960 --> 00:32:33,279
let's conclude everything that we've

793
00:32:33,279 --> 00:32:36,000
been up to so far

794
00:32:36,000 --> 00:32:39,120
so first and most obvious i think we've

795
00:32:39,120 --> 00:32:42,480
definitely established that china spies

796
00:32:42,480 --> 00:32:44,000
on israel

797
00:32:44,000 --> 00:32:46,640
we've demonstrated how thread actors can

798
00:32:46,640 --> 00:32:49,440
take advantage of evident weaknesses in

799
00:32:49,440 --> 00:32:51,760
our defense mechanisms and in our

800
00:32:51,760 --> 00:32:54,320
patterns as defenders that globally

801
00:32:54,320 --> 00:32:56,480
repeat themselves

802
00:32:56,480 --> 00:32:59,600
now we've shown that anc215 is an actor

803
00:32:59,600 --> 00:33:02,799
that invests greatly into development of

804
00:33:02,799 --> 00:33:05,440
its tools and malwares in an ensuring

805
00:33:05,440 --> 00:33:08,159
best possible optic to its operations

806
00:33:08,159 --> 00:33:10,559
rather than just chasing the next big

807
00:33:10,559 --> 00:33:12,480
zero day research

808
00:33:12,480 --> 00:33:15,919
moreover this actor would not only put

809
00:33:15,919 --> 00:33:17,840
its resources towards development and

810
00:33:17,840 --> 00:33:19,120
not research

811
00:33:19,120 --> 00:33:23,200
but also make sure to always have

812
00:33:23,200 --> 00:33:26,640
the solutions with best value for money

813
00:33:26,640 --> 00:33:29,200
by opting to upgrade and maintain

814
00:33:29,200 --> 00:33:31,600
already existing infrastructure and

815
00:33:31,600 --> 00:33:34,000
backdoors rather than trying to invent

816
00:33:34,000 --> 00:33:36,480
new things all the time

817
00:33:36,480 --> 00:33:39,679
now given the amount of effort and

818
00:33:39,679 --> 00:33:40,960
attention

819
00:33:40,960 --> 00:33:44,240
put up by anchor 15 towards these

820
00:33:44,240 --> 00:33:46,000
israeli operations

821
00:33:46,000 --> 00:33:48,559
we can say that the chinese they don't

822
00:33:48,559 --> 00:33:52,080
just spy on israel as a side project but

823
00:33:52,080 --> 00:33:52,880
have

824
00:33:52,880 --> 00:33:55,840
dedicated resources to it and have great

825
00:33:55,840 --> 00:33:58,000
significance to this area

826
00:33:58,000 --> 00:33:59,919
and that we will for sure continue to

827
00:33:59,919 --> 00:34:01,919
see them operating here implementing

828
00:34:01,919 --> 00:34:05,679
even more tools and techniques

829
00:34:05,679 --> 00:34:06,559
well

830
00:34:06,559 --> 00:34:08,239
i can now finish

831
00:34:08,239 --> 00:34:11,440
by giving you a great punch of how you

832
00:34:11,440 --> 00:34:14,320
should be aware of chinese hackers

833
00:34:14,320 --> 00:34:16,159
but we have to remember that during

834
00:34:16,159 --> 00:34:18,719
these operations we've had

835
00:34:18,719 --> 00:34:20,560
multiple opportunities

836
00:34:20,560 --> 00:34:23,119
to make it harder and more difficult for

837
00:34:23,119 --> 00:34:25,520
this actor to achieve its goals

838
00:34:25,520 --> 00:34:28,320
we could have patched our assets we

839
00:34:28,320 --> 00:34:30,399
could have monitored our internal

840
00:34:30,399 --> 00:34:33,040
networks we could have paid attention to

841
00:34:33,040 --> 00:34:34,639
quarantine alerts

842
00:34:34,639 --> 00:34:36,800
but we didn't do all that

843
00:34:36,800 --> 00:34:39,199
so while it's easy to go and blame

844
00:34:39,199 --> 00:34:42,159
others we have to remember that when we

845
00:34:42,159 --> 00:34:44,639
point our fingers at someone there are

846
00:34:44,639 --> 00:34:48,320
three pointing right back at us thank

847
00:34:48,320 --> 00:34:50,560
you

848
00:34:55,760 --> 00:34:59,000
thank you

849
00:35:00,800 --> 00:35:03,440
[Music]

850
00:35:03,440 --> 00:35:05,520
you

