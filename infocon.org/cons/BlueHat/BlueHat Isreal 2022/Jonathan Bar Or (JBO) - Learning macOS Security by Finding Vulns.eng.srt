1
00:00:00,930 --> 00:00:08,260
[Music]

2
00:00:12,580 --> 00:00:15,699
[Music]

3
00:00:16,720 --> 00:00:18,960
how's it going i hope everyone's doing

4
00:00:18,960 --> 00:00:19,760
well

5
00:00:19,760 --> 00:00:22,640
um my name is jbo

6
00:00:22,640 --> 00:00:24,240
and today i want to talk to you about

7
00:00:24,240 --> 00:00:27,199
mac os security features uh and how we

8
00:00:27,199 --> 00:00:29,359
learn about them by bypassing them in

9
00:00:29,359 --> 00:00:31,279
microsoft

10
00:00:31,279 --> 00:00:33,760
we have to have one who in my slide

11
00:00:33,760 --> 00:00:37,680
my name is jbo yo yo jbo on twitter

12
00:00:37,680 --> 00:00:39,600
i'm a security researcher in microsoft

13
00:00:39,600 --> 00:00:42,239
focusing on offensive security

14
00:00:42,239 --> 00:00:44,879
i'm the microsoft defender for endpoint

15
00:00:44,879 --> 00:00:47,760
uh research architect for cross platform

16
00:00:47,760 --> 00:00:50,000
it's a huge huge uh line it basically

17
00:00:50,000 --> 00:00:52,160
means that i'm responsible of paving the

18
00:00:52,160 --> 00:00:53,120
way for

19
00:00:53,120 --> 00:00:55,760
uh microsoft defender on everything that

20
00:00:55,760 --> 00:00:57,760
does not run windows and that

21
00:00:57,760 --> 00:00:59,760
specifically includes linux android mac

22
00:00:59,760 --> 00:01:01,440
os and ios

23
00:01:01,440 --> 00:01:04,080
we do some windows stuff here and there

24
00:01:04,080 --> 00:01:07,040
but that's basically our our focus uh i

25
00:01:07,040 --> 00:01:08,240
also try to come up with funny

26
00:01:08,240 --> 00:01:09,840
vulnerability names and you'll see two

27
00:01:09,840 --> 00:01:13,119
of them in this talk right here

28
00:01:13,119 --> 00:01:14,880
i want to talk about mac os security in

29
00:01:14,880 --> 00:01:16,000
general

30
00:01:16,000 --> 00:01:18,720
mac os is really interesting in terms of

31
00:01:18,720 --> 00:01:20,960
history and how it's it's intertwined

32
00:01:20,960 --> 00:01:24,240
with posix and bsd and and some apple

33
00:01:24,240 --> 00:01:25,360
stuff

34
00:01:25,360 --> 00:01:27,040
but basically when you look at mac os

35
00:01:27,040 --> 00:01:29,119
security you look at three different

36
00:01:29,119 --> 00:01:30,799
classes if you will

37
00:01:30,799 --> 00:01:32,720
one of them is like posix traditional

38
00:01:32,720 --> 00:01:35,119
one the ones that you usually see in

39
00:01:35,119 --> 00:01:36,640
linux let's say

40
00:01:36,640 --> 00:01:38,479
there is a bsd layer which is very

41
00:01:38,479 --> 00:01:39,680
interesting

42
00:01:39,680 --> 00:01:42,320
macports for instance is is an important

43
00:01:42,320 --> 00:01:45,920
one in bsd and it's not just found on on

44
00:01:45,920 --> 00:01:48,320
mac os you can find that for instance on

45
00:01:48,320 --> 00:01:50,479
new herd or whatnot

46
00:01:50,479 --> 00:01:53,200
and there is an apple proprietary layer

47
00:01:53,200 --> 00:01:55,200
and today we'll be focusing on the apple

48
00:01:55,200 --> 00:01:56,880
proprietary layer although the other

49
00:01:56,880 --> 00:02:00,960
ones are still very very interesting

50
00:02:01,520 --> 00:02:03,200
apple proprietor when we talk about the

51
00:02:03,200 --> 00:02:05,119
apple propriety

52
00:02:05,119 --> 00:02:06,880
proprietary layer

53
00:02:06,880 --> 00:02:09,199
we basically talk about apple entitled

54
00:02:09,199 --> 00:02:11,280
binaries what are really entitled

55
00:02:11,280 --> 00:02:12,879
binaries even

56
00:02:12,879 --> 00:02:15,120
entitled binaries are

57
00:02:15,120 --> 00:02:15,920
are

58
00:02:15,920 --> 00:02:18,800
certain binaries uh that can do certain

59
00:02:18,800 --> 00:02:21,120
things that other binaries cannot the

60
00:02:21,120 --> 00:02:22,959
entitlements are basically a set of

61
00:02:22,959 --> 00:02:25,040
capabilities that are signed as a part

62
00:02:25,040 --> 00:02:27,040
of the digital signature

63
00:02:27,040 --> 00:02:28,560
the digital signature on the binary

64
00:02:28,560 --> 00:02:29,520
itself

65
00:02:29,520 --> 00:02:31,599
uh and that's pretty interesting and

66
00:02:31,599 --> 00:02:33,840
basically that means that that's kind of

67
00:02:33,840 --> 00:02:36,560
like a security capability they're

68
00:02:36,560 --> 00:02:38,319
interesting because they're just

69
00:02:38,319 --> 00:02:40,879
interesting they're undocumented some of

70
00:02:40,879 --> 00:02:42,959
them at least and if you reverse

71
00:02:42,959 --> 00:02:44,640
engineer them they have tons of

72
00:02:44,640 --> 00:02:47,120
assumptions and this is not my quote i

73
00:02:47,120 --> 00:02:48,560
don't remember who said that but

74
00:02:48,560 --> 00:02:50,879
basically it took years to secure linux

75
00:02:50,879 --> 00:02:52,800
suite binaries and we still get some

76
00:02:52,800 --> 00:02:55,280
interesting sweet binary vulnerabilities

77
00:02:55,280 --> 00:02:59,040
even this year um but we got two really

78
00:02:59,040 --> 00:03:01,120
and how much scrutiny did apple really

79
00:03:01,120 --> 00:03:04,000
get on the entitled binaries and and the

80
00:03:04,000 --> 00:03:05,360
answer is that

81
00:03:05,360 --> 00:03:07,760
less than the sweet binary is probably

82
00:03:07,760 --> 00:03:09,760
um so i'll talk about my first

83
00:03:09,760 --> 00:03:12,080
vulnerability uh it's a sip bypass

84
00:03:12,080 --> 00:03:14,879
called truthless

85
00:03:14,879 --> 00:03:16,480
what is sip

86
00:03:16,480 --> 00:03:19,920
sip is uh system integrity protection as

87
00:03:19,920 --> 00:03:22,319
the name suggests it kind of protects

88
00:03:22,319 --> 00:03:24,720
the integrity of the system uh even from

89
00:03:24,720 --> 00:03:27,519
root uh also it's called ruthless for

90
00:03:27,519 --> 00:03:30,239
for obvious reasons uh it's what it was

91
00:03:30,239 --> 00:03:32,400
introduced in yosemite

92
00:03:32,400 --> 00:03:34,799
it leverages the apple sandbox which i

93
00:03:34,799 --> 00:03:37,200
won't be talking too much about today

94
00:03:37,200 --> 00:03:39,280
on the entire platform again even from

95
00:03:39,280 --> 00:03:41,760
root i see that and that's just my

96
00:03:41,760 --> 00:03:44,159
personal interpretation uh as the

97
00:03:44,159 --> 00:03:48,400
equivalent of sl linux but on mac

98
00:03:48,400 --> 00:03:50,400
and the interesting thing about sip

99
00:03:50,400 --> 00:03:52,239
obviously it has to protect itself

100
00:03:52,239 --> 00:03:55,280
against root so you can't really turn it

101
00:03:55,280 --> 00:03:58,720
off unless you're in recovery mode

102
00:03:58,720 --> 00:04:02,000
internally sip is is is co is configured

103
00:04:02,000 --> 00:04:04,239
at least by two nvram variables one of

104
00:04:04,239 --> 00:04:06,400
them is called csr activeconfig which is

105
00:04:06,400 --> 00:04:08,799
a bitmask of enabled protections and the

106
00:04:08,799 --> 00:04:10,640
other one is csr data that they won't be

107
00:04:10,640 --> 00:04:12,799
talking about at all uh so forget about

108
00:04:12,799 --> 00:04:15,599
it uh you can't legitimately again

109
00:04:15,599 --> 00:04:18,478
modify those two nvram variables without

110
00:04:18,478 --> 00:04:20,560
booting it to recover recovery mode

111
00:04:20,560 --> 00:04:24,560
otherwise sip is is useless right

112
00:04:24,560 --> 00:04:27,360
and there is a tool called csr util it

113
00:04:27,360 --> 00:04:28,800
controls zip

114
00:04:28,800 --> 00:04:30,960
and in non-recovery mode it can only do

115
00:04:30,960 --> 00:04:33,040
very basic things and here you can see

116
00:04:33,040 --> 00:04:35,280
that i'm doing csr util status and it

117
00:04:35,280 --> 00:04:37,680
says enabled just like get enforced on

118
00:04:37,680 --> 00:04:38,960
linux

119
00:04:38,960 --> 00:04:41,520
and if you try to disable it basically

120
00:04:41,520 --> 00:04:43,680
it will uh like

121
00:04:43,680 --> 00:04:45,360
under the hood it will try to change the

122
00:04:45,360 --> 00:04:47,600
nv ram variables but on a live system

123
00:04:47,600 --> 00:04:49,280
you won't be able to do that so you just

124
00:04:49,280 --> 00:04:50,720
get like no

125
00:04:50,720 --> 00:04:52,720
um so that's sip

126
00:04:52,720 --> 00:04:53,759
um

127
00:04:53,759 --> 00:04:56,800
the nvrm variable is as i said bitmask

128
00:04:56,800 --> 00:04:58,720
it controls all the protections that you

129
00:04:58,720 --> 00:05:01,039
see here and basically compromising any

130
00:05:01,039 --> 00:05:04,000
of these is considered a c bypass

131
00:05:04,000 --> 00:05:05,919
some of them like you can read the names

132
00:05:05,919 --> 00:05:08,240
here i'll i just want to talk about some

133
00:05:08,240 --> 00:05:10,800
interesting ones the first one

134
00:05:10,800 --> 00:05:11,919
basically

135
00:05:11,919 --> 00:05:14,479
allows you to load untrusted kernel

136
00:05:14,479 --> 00:05:18,320
extensions so that's pretty good

137
00:05:18,560 --> 00:05:21,759
the second one is bypassing file system

138
00:05:21,759 --> 00:05:23,759
checks by sip and we'll be talking a lot

139
00:05:23,759 --> 00:05:26,160
about that the third one for instance is

140
00:05:26,160 --> 00:05:28,880
uh allowing task for pid which the is

141
00:05:28,880 --> 00:05:31,440
the equivalent of open process but on on

142
00:05:31,440 --> 00:05:32,320
mac

143
00:05:32,320 --> 00:05:34,560
uh kernel debugger upper internal is

144
00:05:34,560 --> 00:05:35,840
pretty interesting but i won't talk

145
00:05:35,840 --> 00:05:38,080
about that too much unrestricted nvram

146
00:05:38,080 --> 00:05:39,919
is also interesting for obvious reasons

147
00:05:39,919 --> 00:05:41,280
and so on

148
00:05:41,280 --> 00:05:42,560
so

149
00:05:42,560 --> 00:05:44,960
tons of interesting things to do here if

150
00:05:44,960 --> 00:05:48,239
you're able to bypass zip

151
00:05:48,960 --> 00:05:51,039
if you didn't know anything about zip

152
00:05:51,039 --> 00:05:52,479
but you did some

153
00:05:52,479 --> 00:05:55,199
but you did some work on on mac os

154
00:05:55,199 --> 00:05:57,520
the first thing that you'd notice is is

155
00:05:57,520 --> 00:05:59,280
probably the fastest run

156
00:05:59,280 --> 00:06:00,880
file system restrictions

157
00:06:00,880 --> 00:06:03,440
the reason for that is because it it's

158
00:06:03,440 --> 00:06:05,840
really noisy and very really powerful

159
00:06:05,840 --> 00:06:07,360
and you'll discover that you can't

160
00:06:07,360 --> 00:06:09,600
modify restricted files

161
00:06:09,600 --> 00:06:12,639
um and a file is restricted if it falls

162
00:06:12,639 --> 00:06:14,639
under one of these categories either it

163
00:06:14,639 --> 00:06:16,960
has an extended attribute called com

164
00:06:16,960 --> 00:06:20,000
apple rootless or if it's it's under

165
00:06:20,000 --> 00:06:22,400
some uh directory mentioned in that

166
00:06:22,400 --> 00:06:24,400
config file right here and it's not

167
00:06:24,400 --> 00:06:26,960
white listed by two other files so

168
00:06:26,960 --> 00:06:29,280
basically either it's configured in some

169
00:06:29,280 --> 00:06:31,600
config to be uh protected or if it has

170
00:06:31,600 --> 00:06:33,280
the extended attribute

171
00:06:33,280 --> 00:06:36,080
and obviously you can't manually turn

172
00:06:36,080 --> 00:06:38,000
off like any of these and you can't even

173
00:06:38,000 --> 00:06:39,120
turn on

174
00:06:39,120 --> 00:06:41,280
uh sound like that because if you could

175
00:06:41,280 --> 00:06:43,120
then zip would protect you

176
00:06:43,120 --> 00:06:44,000
and

177
00:06:44,000 --> 00:06:46,080
you will be undeletable so if for

178
00:06:46,080 --> 00:06:48,400
instance you're able to create a file

179
00:06:48,400 --> 00:06:51,039
and um and basically make yourself see

180
00:06:51,039 --> 00:06:53,520
protected no one will be able to put to

181
00:06:53,520 --> 00:06:55,680
the delete you obviously very good from

182
00:06:55,680 --> 00:06:58,400
for malware um

183
00:06:58,400 --> 00:07:01,039
and um basically like you can always try

184
00:07:01,039 --> 00:07:03,360
to look for these these things manually

185
00:07:03,360 --> 00:07:04,880
if you want to ask yourself whether a

186
00:07:04,880 --> 00:07:07,039
file is protected or not but apple made

187
00:07:07,039 --> 00:07:09,840
it easy with uh the extension to the ls

188
00:07:09,840 --> 00:07:12,479
command with capital o that's a capital

189
00:07:12,479 --> 00:07:14,639
o right here and in here you can see an

190
00:07:14,639 --> 00:07:17,840
example of me doing ls on slash user and

191
00:07:17,840 --> 00:07:20,479
you can see that some some of them says

192
00:07:20,479 --> 00:07:22,479
restricted these are basically c

193
00:07:22,479 --> 00:07:24,160
protected files and you won't be able to

194
00:07:24,160 --> 00:07:26,000
override them you won't be able to write

195
00:07:26,000 --> 00:07:28,720
them and so on

196
00:07:29,360 --> 00:07:32,240
so that's like a very strong security

197
00:07:32,240 --> 00:07:34,639
feature and it really allows you to stop

198
00:07:34,639 --> 00:07:37,039
malware in this uh in this screenshot

199
00:07:37,039 --> 00:07:38,479
right here it's always interesting by

200
00:07:38,479 --> 00:07:40,639
the way to look at the log because the

201
00:07:40,639 --> 00:07:42,240
log can tell you a lot in this

202
00:07:42,240 --> 00:07:44,319
screenshot right here i'm trying to copy

203
00:07:44,319 --> 00:07:46,400
a plist file which is kind of like a

204
00:07:46,400 --> 00:07:48,720
configuration file on mac uh two system

205
00:07:48,720 --> 00:07:50,160
library launch demons that's a

206
00:07:50,160 --> 00:07:52,800
persistence mechanism in mac and that

207
00:07:52,800 --> 00:07:55,599
directory is protected c protected so

208
00:07:55,599 --> 00:07:57,440
even though i'm running as root i won't

209
00:07:57,440 --> 00:07:59,120
be able to do it it says operation not

210
00:07:59,120 --> 00:08:01,199
permitted and if i look at the log it

211
00:08:01,199 --> 00:08:04,160
will say localhost kernel sandbox if you

212
00:08:04,160 --> 00:08:06,160
see the magic words together kernel and

213
00:08:06,160 --> 00:08:10,000
sandbox that's basically sip

214
00:08:10,879 --> 00:08:13,280
so that kind of brings an interesting

215
00:08:13,280 --> 00:08:14,080
question

216
00:08:14,080 --> 00:08:16,240
an interesting question because

217
00:08:16,240 --> 00:08:18,080
apple needs to override these files once

218
00:08:18,080 --> 00:08:19,919
in a while let's say you do an os

219
00:08:19,919 --> 00:08:21,360
upgrade or something

220
00:08:21,360 --> 00:08:23,840
so how do they do that so you have like

221
00:08:23,840 --> 00:08:26,720
a very powerful wall and what apple did

222
00:08:26,720 --> 00:08:28,479
is to puncture a little hole in that

223
00:08:28,479 --> 00:08:30,319
wall so they can do their upgrades and

224
00:08:30,319 --> 00:08:32,159
what not and this is exactly what we're

225
00:08:32,159 --> 00:08:34,240
going to basically abuse here

226
00:08:34,240 --> 00:08:36,559
um in in this talk

227
00:08:36,559 --> 00:08:38,080
how does apple really handle those

228
00:08:38,080 --> 00:08:40,799
upgrade situations what they did is to

229
00:08:40,799 --> 00:08:42,000
have again

230
00:08:42,000 --> 00:08:45,360
apple uh a set of apple entitlements uh

231
00:08:45,360 --> 00:08:47,839
to completely bypass zip checks and all

232
00:08:47,839 --> 00:08:49,440
of these entitlements begin with the

233
00:08:49,440 --> 00:08:52,000
prefix com apple rootless so if you have

234
00:08:52,000 --> 00:08:54,320
a binary that has com apple root list

235
00:08:54,320 --> 00:08:56,480
whatever it will probably it will

236
00:08:56,480 --> 00:08:59,040
probably skip some uh sip checks

237
00:08:59,040 --> 00:09:01,279
uh there are two important ones for the

238
00:09:01,279 --> 00:09:03,440
file system checks one of them is com

239
00:09:03,440 --> 00:09:05,839
apple rootless install which basically

240
00:09:05,839 --> 00:09:08,000
bypasses all the file system checks and

241
00:09:08,000 --> 00:09:09,920
the other one is com apple rootless

242
00:09:09,920 --> 00:09:12,080
install inheritable that's even more

243
00:09:12,080 --> 00:09:14,880
powerful because not on it it means that

244
00:09:14,880 --> 00:09:17,120
the of the child processes will

245
00:09:17,120 --> 00:09:19,360
basically inherit that

246
00:09:19,360 --> 00:09:21,519
rootless install capability basically

247
00:09:21,519 --> 00:09:23,760
meaning that all of the child processes

248
00:09:23,760 --> 00:09:26,000
of that process uh will be able to

249
00:09:26,000 --> 00:09:28,880
bypass sip checks so that's basically

250
00:09:28,880 --> 00:09:31,040
kind of the the attack surface if you

251
00:09:31,040 --> 00:09:33,360
will the obvious attack surface

252
00:09:33,360 --> 00:09:35,839
um that's an example of me showing you

253
00:09:35,839 --> 00:09:37,680
uh in

254
00:09:37,680 --> 00:09:40,080
an entitled uh process

255
00:09:40,080 --> 00:09:42,640
uh or an entitled apple and title binary

256
00:09:42,640 --> 00:09:44,720
in this case it's system shove

257
00:09:44,720 --> 00:09:46,320
uh i don't think it's

258
00:09:46,320 --> 00:09:48,000
i think it's no longer entitled to do

259
00:09:48,000 --> 00:09:50,480
that but whatever and uh in here you can

260
00:09:50,480 --> 00:09:52,480
see as part of the entitlements it has

261
00:09:52,480 --> 00:09:55,440
com apple rootless install so it's able

262
00:09:55,440 --> 00:09:58,080
to uh bypass the sip

263
00:09:58,080 --> 00:10:00,000
checks for file system and if you were

264
00:10:00,000 --> 00:10:02,000
able to let's say inject inject some

265
00:10:02,000 --> 00:10:04,079
code there or make it do whatever then

266
00:10:04,079 --> 00:10:06,480
you bypass zip great

267
00:10:06,480 --> 00:10:07,600
um

268
00:10:07,600 --> 00:10:10,079
so that's the obvious uh attack surface

269
00:10:10,079 --> 00:10:12,720
for for sip bypasses and you know when i

270
00:10:12,720 --> 00:10:14,399
started looking at seed bypasses i've

271
00:10:14,399 --> 00:10:16,399
seen like really funny stuff like this

272
00:10:16,399 --> 00:10:17,600
thing right here which is like a

273
00:10:17,600 --> 00:10:20,240
tweetable exploit uh for this is from

274
00:10:20,240 --> 00:10:21,680
2016

275
00:10:21,680 --> 00:10:24,720
and um in this case it was a c bypass

276
00:10:24,720 --> 00:10:27,360
not like uh i call it winning by points

277
00:10:27,360 --> 00:10:30,079
and not by by knockout but the idea is

278
00:10:30,079 --> 00:10:32,880
that um i won't go over like the entire

279
00:10:32,880 --> 00:10:35,360
details but you have this binary called

280
00:10:35,360 --> 00:10:36,079
uh

281
00:10:36,079 --> 00:10:39,120
uh fsc fsdk underscore cs that's

282
00:10:39,120 --> 00:10:41,760
supposed to fix like a file system and

283
00:10:41,760 --> 00:10:44,560
uh basically this thing will trash a c

284
00:10:44,560 --> 00:10:47,120
protected file just rush it with data

285
00:10:47,120 --> 00:10:49,360
that the attacker does not control but

286
00:10:49,360 --> 00:10:51,360
just because just because the attacker

287
00:10:51,360 --> 00:10:52,880
trashes the file it basically

288
00:10:52,880 --> 00:10:54,560
invalidates some other protection

289
00:10:54,560 --> 00:10:57,040
specifically the kernel ext

290
00:10:57,040 --> 00:10:59,519
the kernel extensions that are

291
00:10:59,519 --> 00:11:02,079
excluded from mac os so that's like a

292
00:11:02,079 --> 00:11:04,720
tweetable exploit from 2016 and i wanted

293
00:11:04,720 --> 00:11:06,800
to do something like that again as my

294
00:11:06,800 --> 00:11:10,319
learning process into mac os

295
00:11:10,720 --> 00:11:12,800
i started hunting for c bypasses

296
00:11:12,800 --> 00:11:14,399
obviously looking for

297
00:11:14,399 --> 00:11:16,800
sip and title binaries on my box and

298
00:11:16,800 --> 00:11:18,320
look for operations that could be

299
00:11:18,320 --> 00:11:21,200
exploited by an attacker

300
00:11:21,200 --> 00:11:23,760
interestingly enough i used j's

301
00:11:23,760 --> 00:11:26,720
entitlement entitlement database it's an

302
00:11:26,720 --> 00:11:28,160
online thing that you can use if you're

303
00:11:28,160 --> 00:11:30,480
unfamiliar with entitlements you just

304
00:11:30,480 --> 00:11:32,720
click there and it will ask you let's

305
00:11:32,720 --> 00:11:33,440
say

306
00:11:33,440 --> 00:11:36,399
give me all of the com apple uh rootless

307
00:11:36,399 --> 00:11:39,279
inheritable uh entitled binaries in

308
00:11:39,279 --> 00:11:41,440
yosemite and it'll just give you a set

309
00:11:41,440 --> 00:11:44,240
of processes of binaries it's pretty

310
00:11:44,240 --> 00:11:45,440
cool to use

311
00:11:45,440 --> 00:11:47,839
uh and after i found like a set of

312
00:11:47,839 --> 00:11:49,519
interesting uh um

313
00:11:49,519 --> 00:11:51,200
a set of interesting apple and title

314
00:11:51,200 --> 00:11:53,360
binaries i actually used microsoft own

315
00:11:53,360 --> 00:11:55,279
edr because we collect a lot of

316
00:11:55,279 --> 00:11:57,519
telemetry for our customers to look for

317
00:11:57,519 --> 00:11:59,120
interesting child processes because i

318
00:11:59,120 --> 00:12:01,680
was looking at the inheritable thing

319
00:12:01,680 --> 00:12:04,240
uh and i did see these things and as you

320
00:12:04,240 --> 00:12:06,959
can see like well efw cache update is

321
00:12:06,959 --> 00:12:08,560
not that interesting i started

322
00:12:08,560 --> 00:12:10,079
understanding what it does not very

323
00:12:10,079 --> 00:12:13,600
interesting but what about zsh

324
00:12:13,600 --> 00:12:14,560
um

325
00:12:14,560 --> 00:12:17,200
i found that zsh was a child process of

326
00:12:17,200 --> 00:12:19,839
system install d and system installed is

327
00:12:19,839 --> 00:12:22,160
a very interesting just like any other

328
00:12:22,160 --> 00:12:24,320
process that ends with a d it's a daemon

329
00:12:24,320 --> 00:12:25,760
it does something on behalf of the

330
00:12:25,760 --> 00:12:28,480
system uh and in this case uh this

331
00:12:28,480 --> 00:12:30,959
binary also has com apple rootless

332
00:12:30,959 --> 00:12:33,519
install inheritable so very powerful all

333
00:12:33,519 --> 00:12:36,000
of its child processes will by

334
00:12:36,000 --> 00:12:38,160
definition by definition we'll be able

335
00:12:38,160 --> 00:12:41,519
to bypass zip checks on the file system

336
00:12:41,519 --> 00:12:44,240
that demon gets invoked when you install

337
00:12:44,240 --> 00:12:47,760
is an apple signed package a pkg file so

338
00:12:47,760 --> 00:12:50,320
uh pkg files are also interesting very

339
00:12:50,320 --> 00:12:52,079
much but i won't talk too much about

340
00:12:52,079 --> 00:12:53,040
them

341
00:12:53,040 --> 00:12:54,720
but i did start playing a bit with

342
00:12:54,720 --> 00:12:57,519
system install d and uh system installed

343
00:12:57,519 --> 00:13:00,240
they will do various tasks like updating

344
00:13:00,240 --> 00:13:02,959
caches moving fast to temporary pass and

345
00:13:02,959 --> 00:13:05,839
and so on and interestingly if the pkg

346
00:13:05,839 --> 00:13:08,959
file has a post install scripts and some

347
00:13:08,959 --> 00:13:11,200
of them some of them do then it will

348
00:13:11,200 --> 00:13:13,680
invoke the post install script

349
00:13:13,680 --> 00:13:14,320
and

350
00:13:14,320 --> 00:13:16,800
that kind of explains why zsh is a child

351
00:13:16,800 --> 00:13:18,639
process it's basically like a shell

352
00:13:18,639 --> 00:13:21,440
script that runs after the pkg was

353
00:13:21,440 --> 00:13:25,440
installed in the temporary directory

354
00:13:25,440 --> 00:13:26,880
so that's pretty interesting because

355
00:13:26,880 --> 00:13:30,560
that means that zsh now has control over

356
00:13:30,560 --> 00:13:32,839
over the file system without sip

357
00:13:32,839 --> 00:13:36,560
restrictions um so what does zsh i mean

358
00:13:36,560 --> 00:13:39,680
what can zsh do obviously just like bash

359
00:13:39,680 --> 00:13:42,639
rc you have zs hrc uh

360
00:13:42,639 --> 00:13:45,519
the zshrc files only run when when in

361
00:13:45,519 --> 00:13:47,920
interactive mode obviously we're not but

362
00:13:47,920 --> 00:13:50,399
i did find zsh and uh

363
00:13:50,399 --> 00:13:52,800
like dot zsh and von your

364
00:13:52,800 --> 00:13:55,920
home directory and etc zsh and and if

365
00:13:55,920 --> 00:13:57,760
you read the zsh source code that's

366
00:13:57,760 --> 00:13:59,760
always fun because they call like any

367
00:13:59,760 --> 00:14:02,240
person that uses the zsh and the swine

368
00:14:02,240 --> 00:14:03,920
or something and i really wanted to be

369
00:14:03,920 --> 00:14:07,760
that swine so um so basically i i abused

370
00:14:07,760 --> 00:14:09,120
just that

371
00:14:09,120 --> 00:14:11,600
and that's my trivial very trivial

372
00:14:11,600 --> 00:14:13,839
exploit i have to say uh almost

373
00:14:13,839 --> 00:14:15,199
tweetable

374
00:14:15,199 --> 00:14:17,920
you what you do is is this the following

375
00:14:17,920 --> 00:14:20,560
thing you download an apple sign package

376
00:14:20,560 --> 00:14:23,279
that legitimately invokes dsh because it

377
00:14:23,279 --> 00:14:25,120
has a post-install script that invokes

378
00:14:25,120 --> 00:14:26,320
zsh

379
00:14:26,320 --> 00:14:29,440
and you plant an easy etc csh and that

380
00:14:29,440 --> 00:14:31,839
does the following three liner if my

381
00:14:31,839 --> 00:14:34,320
parent process is system installed then

382
00:14:34,320 --> 00:14:36,480
do whatever seep free and basically you

383
00:14:36,480 --> 00:14:38,880
trigger the installer and bam you've got

384
00:14:38,880 --> 00:14:40,800
a vulnerability with a funny name as i

385
00:14:40,800 --> 00:14:43,760
as i promised um in this in this

386
00:14:43,760 --> 00:14:45,440
screenshot right here you can see that

387
00:14:45,440 --> 00:14:47,920
i'm showing you that csr uh with csr

388
00:14:47,920 --> 00:14:50,320
tool i'm showing you that the uh

389
00:14:50,320 --> 00:14:53,839
uh the sip is enabled i uh show you the

390
00:14:53,839 --> 00:14:56,240
first line of uh that particular file

391
00:14:56,240 --> 00:14:58,639
that was protected and abused in 2016 by

392
00:14:58,639 --> 00:15:00,240
the way

393
00:15:00,240 --> 00:15:01,760
and you can see that it looks like an

394
00:15:01,760 --> 00:15:04,480
xml i try to write echo to it from root

395
00:15:04,480 --> 00:15:07,120
again it won't let me but then i run my

396
00:15:07,120 --> 00:15:09,839
schruteless exploit and i show you that

397
00:15:09,839 --> 00:15:12,240
basically i'm able to write whatever

398
00:15:12,240 --> 00:15:14,560
content that i want to that file and

399
00:15:14,560 --> 00:15:17,120
it's also it stays like a c protected

400
00:15:17,120 --> 00:15:20,800
file so that's pretty insane because if

401
00:15:20,800 --> 00:15:23,279
i'm a malware author i can create like

402
00:15:23,279 --> 00:15:25,199
malware that way and no one will be able

403
00:15:25,199 --> 00:15:27,279
to delete me like ever right and that's

404
00:15:27,279 --> 00:15:28,720
pretty bad because we're a microsoft

405
00:15:28,720 --> 00:15:30,160
defender for endpoint and we're trying

406
00:15:30,160 --> 00:15:32,560
to delete files when when they're bad

407
00:15:32,560 --> 00:15:36,320
so um that's my first exploit uh for

408
00:15:36,320 --> 00:15:38,000
that i'm going to show you today the c

409
00:15:38,000 --> 00:15:39,120
bypass

410
00:15:39,120 --> 00:15:41,440
and there is a bonus round here i

411
00:15:41,440 --> 00:15:44,639
discovered that uh when you run sudo s

412
00:15:44,639 --> 00:15:48,240
specifically on mac os zsh uh saves

413
00:15:48,240 --> 00:15:51,440
uh saves the home directory as is from

414
00:15:51,440 --> 00:15:53,440
the admin it doesn't change to like

415
00:15:53,440 --> 00:15:55,920
slash root like you're used to in linux

416
00:15:55,920 --> 00:15:58,240
and that's kind of like an admin to root

417
00:15:58,240 --> 00:16:00,880
eop if you will basically doing the same

418
00:16:00,880 --> 00:16:03,839
thing with uh the home directory dot csh

419
00:16:03,839 --> 00:16:04,480
and

420
00:16:04,480 --> 00:16:06,880
saying sound like if um

421
00:16:06,880 --> 00:16:09,279
if my uh effective user id is zero then

422
00:16:09,279 --> 00:16:10,399
do whatever

423
00:16:10,399 --> 00:16:11,440
um

424
00:16:11,440 --> 00:16:13,839
it's this time it wasn't easy for me to

425
00:16:13,839 --> 00:16:16,639
trigger a root csh uh but it's cool to

426
00:16:16,639 --> 00:16:19,040
just lurk and wait to be rooted if that

427
00:16:19,040 --> 00:16:21,680
that makes sense uh this thing is still

428
00:16:21,680 --> 00:16:23,920
unfixed but i let apple and the zsh

429
00:16:23,920 --> 00:16:27,040
community know uh at this point again it

430
00:16:27,040 --> 00:16:28,800
doesn't look like a vulnerability per se

431
00:16:28,800 --> 00:16:30,800
because it's not easy to trigger that

432
00:16:30,800 --> 00:16:33,519
root csh but you can consider it to be

433
00:16:33,519 --> 00:16:35,759
like a red teamer

434
00:16:35,759 --> 00:16:37,519
tactic if you will

435
00:16:37,519 --> 00:16:39,519
so um

436
00:16:39,519 --> 00:16:41,519
an honorable shout out by the way after

437
00:16:41,519 --> 00:16:44,160
we released uh schruteless and the blog

438
00:16:44,160 --> 00:16:45,920
post and everything uh

439
00:16:45,920 --> 00:16:48,240
we we saw that there was a similar

440
00:16:48,240 --> 00:16:50,480
discovery i think a few months after

441
00:16:50,480 --> 00:16:53,120
uh by his perception point uh they did

442
00:16:53,120 --> 00:16:55,440
something uh very cool instead of uh

443
00:16:55,440 --> 00:16:57,600
they also abused a system installed but

444
00:16:57,600 --> 00:16:59,120
instead of um

445
00:16:59,120 --> 00:17:01,600
instead of doing what we did which was

446
00:17:01,600 --> 00:17:04,000
already patched by apple they abuse the

447
00:17:04,000 --> 00:17:05,039
fact that

448
00:17:05,039 --> 00:17:07,439
system installed it drops files to slash

449
00:17:07,439 --> 00:17:08,240
temp

450
00:17:08,240 --> 00:17:10,559
but then slash temp is a sim link on mac

451
00:17:10,559 --> 00:17:13,199
os to private temp so by remounting

452
00:17:13,199 --> 00:17:15,760
slash temp and winning a race you're

453
00:17:15,760 --> 00:17:18,720
able basically able to make system d in

454
00:17:18,720 --> 00:17:20,559
run whatever you want so that was a

455
00:17:20,559 --> 00:17:22,480
pretty cool exploit again this is also

456
00:17:22,480 --> 00:17:26,480
uh also patched now so don't worry

457
00:17:26,480 --> 00:17:30,400
um my second um my second part of

458
00:17:30,400 --> 00:17:32,320
my second part of the talk is a tcc

459
00:17:32,320 --> 00:17:34,559
bypass that i call power there

460
00:17:34,559 --> 00:17:36,080
and um

461
00:17:36,080 --> 00:17:37,520
here we go

462
00:17:37,520 --> 00:17:40,720
tcc is a transparency consent and

463
00:17:40,720 --> 00:17:41,840
control

464
00:17:41,840 --> 00:17:44,240
that's a mac os technology that was

465
00:17:44,240 --> 00:17:47,360
first introduced in mojave and if if

466
00:17:47,360 --> 00:17:49,840
someone asked me what tcc is i say that

467
00:17:49,840 --> 00:17:52,240
it's the usc equivalent of mac os so

468
00:17:52,240 --> 00:17:54,080
whatever wants to control whatever and

469
00:17:54,080 --> 00:17:56,720
in here you can see microsoft teams want

470
00:17:56,720 --> 00:17:59,200
to access your microphone or access your

471
00:17:59,200 --> 00:18:01,760
camera or access your desktop or rss or

472
00:18:01,760 --> 00:18:04,320
whatever so you'll get one of these like

473
00:18:04,320 --> 00:18:06,880
nice little uh pop-ups and you can also

474
00:18:06,880 --> 00:18:08,400
configure this thing in like the

475
00:18:08,400 --> 00:18:11,120
security and privacy pane

476
00:18:11,120 --> 00:18:12,640
on your mac

477
00:18:12,640 --> 00:18:13,679
and

478
00:18:13,679 --> 00:18:16,080
interestingly unlike usc if you if you

479
00:18:16,080 --> 00:18:18,720
remember the vista days when uh usc came

480
00:18:18,720 --> 00:18:21,200
out uh you had to like always always do

481
00:18:21,200 --> 00:18:23,120
like okay okay okay let me do that let

482
00:18:23,120 --> 00:18:25,120
me do this and so on and apple did

483
00:18:25,120 --> 00:18:28,480
something differently usc is stateless

484
00:18:28,480 --> 00:18:29,280
but

485
00:18:29,280 --> 00:18:33,280
tcc is stateful so if i click ok here on

486
00:18:33,280 --> 00:18:34,799
microsoft teams would like to access

487
00:18:34,799 --> 00:18:36,080
your microphone

488
00:18:36,080 --> 00:18:37,919
mac os will remember that and the next

489
00:18:37,919 --> 00:18:40,000
time that teams wants to access my

490
00:18:40,000 --> 00:18:41,360
microphone

491
00:18:41,360 --> 00:18:43,760
it will just use my response so if i

492
00:18:43,760 --> 00:18:45,039
deny that

493
00:18:45,039 --> 00:18:46,960
it will stay denied and if i allow that

494
00:18:46,960 --> 00:18:48,960
it will stay allowed unless i change

495
00:18:48,960 --> 00:18:50,559
something in this pane right here that

496
00:18:50,559 --> 00:18:54,160
you see on the right side

497
00:18:54,640 --> 00:18:57,679
internally tcc uh is maintained by a

498
00:18:57,679 --> 00:19:01,440
sqlite database or databases in plural

499
00:19:01,440 --> 00:19:02,880
uh because there are two of them at

500
00:19:02,880 --> 00:19:05,280
least two uh one of them is like a

501
00:19:05,280 --> 00:19:08,000
global system-wide one uh saved in that

502
00:19:08,000 --> 00:19:10,559
directory right here and the second one

503
00:19:10,559 --> 00:19:13,280
is a per user one saved under the user's

504
00:19:13,280 --> 00:19:14,799
home directory and then

505
00:19:14,799 --> 00:19:17,760
like a big subdirectory right there

506
00:19:17,760 --> 00:19:20,400
both of them are called tcc.db

507
00:19:20,400 --> 00:19:23,840
um because of that you have two tccd

508
00:19:23,840 --> 00:19:26,320
instances again a process that ends with

509
00:19:26,320 --> 00:19:28,240
a d is a daemon

510
00:19:28,240 --> 00:19:32,000
and tccd enforces the policy the tcc

511
00:19:32,000 --> 00:19:33,039
policy

512
00:19:33,039 --> 00:19:35,440
uh so you have two tccd instances one

513
00:19:35,440 --> 00:19:38,559
for the user and one for the system

514
00:19:38,559 --> 00:19:40,559
in terms of protection what protects

515
00:19:40,559 --> 00:19:43,840
those databases files

516
00:19:44,080 --> 00:19:47,280
the system tcc database is c protected

517
00:19:47,280 --> 00:19:49,280
so in order to write to it you have to

518
00:19:49,280 --> 00:19:51,520
have a c bypass or zip disabled in some

519
00:19:51,520 --> 00:19:54,720
way but it's also tcc protected so tcc

520
00:19:54,720 --> 00:19:56,799
it's kind of interesting tcc protects

521
00:19:56,799 --> 00:19:59,440
its own databases from being overwritten

522
00:19:59,440 --> 00:20:02,080
and also from being read actually so if

523
00:20:02,080 --> 00:20:05,039
you don't have specific tcc capabilities

524
00:20:05,039 --> 00:20:06,720
you will not be able to read the

525
00:20:06,720 --> 00:20:09,600
database itself the user tcc database is

526
00:20:09,600 --> 00:20:12,000
not c protected but it's still tcc

527
00:20:12,000 --> 00:20:13,600
protected

528
00:20:13,600 --> 00:20:15,200
and again you can't even read the

529
00:20:15,200 --> 00:20:17,360
database without a capability called

530
00:20:17,360 --> 00:20:19,840
full disk access which is managed by the

531
00:20:19,840 --> 00:20:22,320
global sea protected tccd

532
00:20:22,320 --> 00:20:24,559
so

533
00:20:24,640 --> 00:20:26,880
so it's it's pretty well protected in

534
00:20:26,880 --> 00:20:29,120
order to know whether you're

535
00:20:29,120 --> 00:20:31,280
tcc protected or not you can just try to

536
00:20:31,280 --> 00:20:33,600
list directories this is my home

537
00:20:33,600 --> 00:20:36,240
directory and then the the director the

538
00:20:36,240 --> 00:20:39,120
directory where the tccdb uh sits and

539
00:20:39,120 --> 00:20:40,880
you can see here again i'm running even

540
00:20:40,880 --> 00:20:43,120
as root i won't be able to even list

541
00:20:43,120 --> 00:20:45,200
files under that directory uh

542
00:20:45,200 --> 00:20:46,799
interestingly by the way if you try to

543
00:20:46,799 --> 00:20:48,400
list the specific file under that

544
00:20:48,400 --> 00:20:50,320
directory it will just show it to you

545
00:20:50,320 --> 00:20:52,400
and that kind of gives you a hint on how

546
00:20:52,400 --> 00:20:54,799
tcc really enforces things

547
00:20:54,799 --> 00:20:56,960
uh in the second line right here in the

548
00:20:56,960 --> 00:20:58,559
second

549
00:20:58,559 --> 00:21:00,640
snippet right here you can see me again

550
00:21:00,640 --> 00:21:03,440
looking at uh entitlements in this case

551
00:21:03,440 --> 00:21:06,000
the entitlement belongs to tccd that's

552
00:21:06,000 --> 00:21:08,559
again the demon that enforces tcc and

553
00:21:08,559 --> 00:21:10,480
you can see that it's quite powerful it

554
00:21:10,480 --> 00:21:12,080
has tons of entitlements but

555
00:21:12,080 --> 00:21:14,000
specifically i want to talk about the

556
00:21:14,000 --> 00:21:16,799
com apple private tcc allow one the one

557
00:21:16,799 --> 00:21:18,880
with the string underneath it just keep

558
00:21:18,880 --> 00:21:22,559
in your mind that tccd is able to uh it

559
00:21:22,559 --> 00:21:26,320
has this com apple private tcc allow

560
00:21:26,320 --> 00:21:27,360
um

561
00:21:27,360 --> 00:21:30,080
a naive tcc bypass and i'm saying bypass

562
00:21:30,080 --> 00:21:31,919
here

563
00:21:31,919 --> 00:21:33,760
i'm saying bypass here like in quotes

564
00:21:33,760 --> 00:21:36,320
because it's not really a bypass per se

565
00:21:36,320 --> 00:21:37,919
if terminal itself let's say your

566
00:21:37,919 --> 00:21:40,240
terminal has full desk access and a lot

567
00:21:40,240 --> 00:21:41,120
of

568
00:21:41,120 --> 00:21:44,080
mac os users do set full disk access to

569
00:21:44,080 --> 00:21:46,400
terminal then basically you can modify

570
00:21:46,400 --> 00:21:48,720
the user's tcc database without root

571
00:21:48,720 --> 00:21:49,679
even

572
00:21:49,679 --> 00:21:51,679
so that's pretty pretty cool to see

573
00:21:51,679 --> 00:21:53,440
checking if terminal has full disk

574
00:21:53,440 --> 00:21:55,760
access i mean without doing a lot of

575
00:21:55,760 --> 00:21:57,679
work you can just conclude that from

576
00:21:57,679 --> 00:22:00,559
either logs or by trying to do the list

577
00:22:00,559 --> 00:22:02,080
listing of the files that i mentioned

578
00:22:02,080 --> 00:22:03,200
earlier

579
00:22:03,200 --> 00:22:04,480
um

580
00:22:04,480 --> 00:22:06,480
and uh so you can basically conclude

581
00:22:06,480 --> 00:22:08,480
that like automatically

582
00:22:08,480 --> 00:22:10,880
uh if you're a defender what you

583
00:22:10,880 --> 00:22:12,720
probably want to do is to watch out for

584
00:22:12,720 --> 00:22:13,919
file rights

585
00:22:13,919 --> 00:22:16,960
and file reads of the tcc database

586
00:22:16,960 --> 00:22:19,919
anything that happens not from tccd is

587
00:22:19,919 --> 00:22:21,760
is basically suspicious

588
00:22:21,760 --> 00:22:23,520
uh so be aware of that

589
00:22:23,520 --> 00:22:25,280
and interestingly it was abused by

590
00:22:25,280 --> 00:22:27,919
dropbox originally again this is not a

591
00:22:27,919 --> 00:22:31,039
bypass per se uh dropbox assumed that

592
00:22:31,039 --> 00:22:32,720
there is going to be full disk access

593
00:22:32,720 --> 00:22:34,400
and once you have full disk access you

594
00:22:34,400 --> 00:22:38,840
can enable all of the users uh uh tcc uh

595
00:22:38,840 --> 00:22:43,280
permissions so that's pretty cool to see

596
00:22:45,280 --> 00:22:46,960
okay

597
00:22:46,960 --> 00:22:49,520
and uh this this uh screenshot right

598
00:22:49,520 --> 00:22:52,159
here shows you how the tcc database

599
00:22:52,159 --> 00:22:54,880
looks like again it's a sqlite database

600
00:22:54,880 --> 00:22:56,960
uh once of course you have full disk

601
00:22:56,960 --> 00:22:58,400
access otherwise you're not supposed to

602
00:22:58,400 --> 00:22:59,600
do that thing

603
00:22:59,600 --> 00:23:02,080
and as you can see here there is a table

604
00:23:02,080 --> 00:23:05,440
called access and it has a bunch of uh

605
00:23:05,440 --> 00:23:08,480
uh basically entries i won't go

606
00:23:08,480 --> 00:23:10,720
i won't go over all of the entries all

607
00:23:10,720 --> 00:23:12,240
of the different columns here but i will

608
00:23:12,240 --> 00:23:14,480
say that uh the first two ones are

609
00:23:14,480 --> 00:23:17,120
interesting first two ones first one is

610
00:23:17,120 --> 00:23:20,559
uh ktcc service whatever which kind of

611
00:23:20,559 --> 00:23:22,880
indicates the kind of tcc capability

612
00:23:22,880 --> 00:23:25,280
that you have and the second one is the

613
00:23:25,280 --> 00:23:27,440
name of the app so

614
00:23:27,440 --> 00:23:29,679
if your teams has microphone access

615
00:23:29,679 --> 00:23:32,559
you'll see ktcc service microphone and

616
00:23:32,559 --> 00:23:33,799
then

617
00:23:33,799 --> 00:23:36,720
com.microsoft.teams for instance

618
00:23:36,720 --> 00:23:39,840
and in terms of tcc capabilities tcc has

619
00:23:39,840 --> 00:23:42,320
really fine-grained access this is not a

620
00:23:42,320 --> 00:23:45,440
complete list by any means but

621
00:23:45,440 --> 00:23:47,360
this is the name of the access versus

622
00:23:47,360 --> 00:23:50,240
the description next to uh where it's

623
00:23:50,240 --> 00:23:52,799
saved so for instance liverpool is like

624
00:23:52,799 --> 00:23:54,960
location services so if your app wants

625
00:23:54,960 --> 00:23:57,600
to access location it will have to have

626
00:23:57,600 --> 00:24:00,799
ktcc service liverpool uh same thing

627
00:24:00,799 --> 00:24:04,880
goes for calendar or reminder or whatnot

628
00:24:04,880 --> 00:24:07,039
microphone camera are also obviously

629
00:24:07,039 --> 00:24:09,840
interesting and note that the two last

630
00:24:09,840 --> 00:24:12,320
entries are saved in the system tcc

631
00:24:12,320 --> 00:24:14,400
database and one of them is the full

632
00:24:14,400 --> 00:24:15,760
disk access

633
00:24:15,760 --> 00:24:17,360
keep that in mind

634
00:24:17,360 --> 00:24:19,279
if you remember from two slides ago by

635
00:24:19,279 --> 00:24:22,799
the way tccd had um

636
00:24:22,799 --> 00:24:26,320
had this com tcc apple uh

637
00:24:26,320 --> 00:24:29,360
com com apple uh private tcc allow

638
00:24:29,360 --> 00:24:31,120
entitlement with full disk access and

639
00:24:31,120 --> 00:24:33,600
that kind of explains why tccd is able

640
00:24:33,600 --> 00:24:37,200
to even access the tcc database

641
00:24:37,200 --> 00:24:39,279
there is one more minor thing that i

642
00:24:39,279 --> 00:24:41,039
won't talk too much about but basically

643
00:24:41,039 --> 00:24:43,200
for some tcc services there is a blob

644
00:24:43,200 --> 00:24:46,480
called cs rec that's being compared

645
00:24:46,480 --> 00:24:50,000
in the table versus the calling app um i

646
00:24:50,000 --> 00:24:51,520
won't talk about it too much but it

647
00:24:51,520 --> 00:24:53,200
encodes like the code signing

648
00:24:53,200 --> 00:24:55,360
requirements for the app and it wasn't

649
00:24:55,360 --> 00:24:57,600
uh in my opinion at least it wasn't

650
00:24:57,600 --> 00:25:01,120
created in order to mitigate against tcc

651
00:25:01,120 --> 00:25:03,760
bypasses so basically you can just forge

652
00:25:03,760 --> 00:25:05,600
your own if you have your malicious app

653
00:25:05,600 --> 00:25:07,760
you can just create your own cs rack so

654
00:25:07,760 --> 00:25:10,080
that's not like that's a tiny hurdle

655
00:25:10,080 --> 00:25:14,000
really in a tcc uh bypass coding

656
00:25:14,000 --> 00:25:15,120
and again

657
00:25:15,120 --> 00:25:17,360
when we talk about uh about the attack

658
00:25:17,360 --> 00:25:19,840
surface the obvious thing is

659
00:25:19,840 --> 00:25:21,120
it is uh

660
00:25:21,120 --> 00:25:23,440
apple entitled binaries and specifically

661
00:25:23,440 --> 00:25:26,000
com apple private tcc allow is the name

662
00:25:26,000 --> 00:25:29,120
of the uh the name of the entitlement uh

663
00:25:29,120 --> 00:25:30,720
that apple has

664
00:25:30,720 --> 00:25:32,559
private apple binaries made may have

665
00:25:32,559 --> 00:25:34,400
entitlements that allow them to bypass

666
00:25:34,400 --> 00:25:37,760
tcc checks we've seen that with tccd

667
00:25:37,760 --> 00:25:39,679
and there are others of course

668
00:25:39,679 --> 00:25:41,840
uh that's the obvious attack surface and

669
00:25:41,840 --> 00:25:43,760
the obvious technique would be finding a

670
00:25:43,760 --> 00:25:46,559
binary with com apple private tcc allow

671
00:25:46,559 --> 00:25:48,320
tamper with it in some way to affect its

672
00:25:48,320 --> 00:25:50,159
code flow including

673
00:25:50,159 --> 00:25:52,880
injections extensions whatever and get a

674
00:25:52,880 --> 00:25:55,200
fine-grained tcc access so if you

675
00:25:55,200 --> 00:25:58,400
piggyback ride on on an apple uh on an

676
00:25:58,400 --> 00:26:00,720
apple uh entitled binary that's allowed

677
00:26:00,720 --> 00:26:03,039
to do tcc stuff you're able to do the

678
00:26:03,039 --> 00:26:05,360
exact same thing without any pop-ups

679
00:26:05,360 --> 00:26:06,159
um

680
00:26:06,159 --> 00:26:08,559
apple takes tcc very seriously if you

681
00:26:08,559 --> 00:26:09,360
guys

682
00:26:09,360 --> 00:26:11,039
never looked at tcc and you want to

683
00:26:11,039 --> 00:26:13,760
start this should be like a good uh

684
00:26:13,760 --> 00:26:14,640
a good

685
00:26:14,640 --> 00:26:16,640
motivation for you for those who are

686
00:26:16,640 --> 00:26:19,279
driven by money i mean for even for the

687
00:26:19,279 --> 00:26:21,440
like minor tcc bypass you're supposed to

688
00:26:21,440 --> 00:26:24,400
get like 25 grand for a complete tcc

689
00:26:24,400 --> 00:26:26,960
bypass you're supposed to get like 1

690
00:26:26,960 --> 00:26:30,799
100 000 grand so 100 grand sorry so

691
00:26:30,799 --> 00:26:32,880
pretty good money i guess if you're able

692
00:26:32,880 --> 00:26:34,640
to do something like that

693
00:26:34,640 --> 00:26:36,559
um and i want to talk a bit about

694
00:26:36,559 --> 00:26:39,279
history of tcc bypasses this is not a

695
00:26:39,279 --> 00:26:42,000
complete list by any chance but um

696
00:26:42,000 --> 00:26:43,760
it kind of shows you the different

697
00:26:43,760 --> 00:26:46,559
mindsets or attack classes if you will

698
00:26:46,559 --> 00:26:49,679
for tcc bypasses so this was done in

699
00:26:49,679 --> 00:26:52,640
2020 and it was done by uh

700
00:26:52,640 --> 00:26:55,039
by basically mounting backups

701
00:26:55,039 --> 00:26:57,679
there is a utility in mac os called time

702
00:26:57,679 --> 00:26:59,760
machine and time machine basically is a

703
00:26:59,760 --> 00:27:02,000
backup and restore kind of a system

704
00:27:02,000 --> 00:27:04,240
and the backups apparently could be

705
00:27:04,240 --> 00:27:07,840
mounted with apfs mount apfs is the uh

706
00:27:07,840 --> 00:27:10,400
file system native file system on mac

707
00:27:10,400 --> 00:27:12,559
and you could mount it with the no owner

708
00:27:12,559 --> 00:27:16,640
flag the no owner flag specifically

709
00:27:16,640 --> 00:27:18,000
makes makes it

710
00:27:18,000 --> 00:27:19,360
makes it

711
00:27:19,360 --> 00:27:21,440
available to read certain files and

712
00:27:21,440 --> 00:27:23,520
write to certain files and because

713
00:27:23,520 --> 00:27:25,840
backup contains the tcc database the

714
00:27:25,840 --> 00:27:27,760
file could just be read without any

715
00:27:27,760 --> 00:27:30,399
restrictions by anyone it's also again a

716
00:27:30,399 --> 00:27:32,320
tweetable exploit

717
00:27:32,320 --> 00:27:35,279
so the idea was pretty simple and even

718
00:27:35,279 --> 00:27:37,520
that just be just reading the tcc

719
00:27:37,520 --> 00:27:40,159
database file is enough to be called a

720
00:27:40,159 --> 00:27:43,120
tcc bypass so that's like a trivial cool

721
00:27:43,120 --> 00:27:46,159
uh tcc bypass from 2020.

722
00:27:46,159 --> 00:27:48,880
uh another one from 2020 this is this

723
00:27:48,880 --> 00:27:51,679
wins by knockout and not by points uh

724
00:27:51,679 --> 00:27:54,320
this was pretty interesting when tccd

725
00:27:54,320 --> 00:27:57,279
starts the user tccd not the system one

726
00:27:57,279 --> 00:27:59,840
it needs to access the tcc database in

727
00:27:59,840 --> 00:28:00,799
the home

728
00:28:00,799 --> 00:28:03,679
under the user the relevant user how

729
00:28:03,679 --> 00:28:06,159
does it how does it know where the tcc

730
00:28:06,159 --> 00:28:09,039
database lives well it's easy it lives

731
00:28:09,039 --> 00:28:10,240
under the home directory and then

732
00:28:10,240 --> 00:28:12,480
whatever but what is the home directory

733
00:28:12,480 --> 00:28:15,760
apparently what tccd did is to expand

734
00:28:15,760 --> 00:28:17,919
the home environment variable so

735
00:28:17,919 --> 00:28:19,520
basically if you poison the home

736
00:28:19,520 --> 00:28:22,399
environment variable and reboot tccd

737
00:28:22,399 --> 00:28:24,320
you're able to even plant your own

738
00:28:24,320 --> 00:28:27,279
malicious tcc db file for instance my

739
00:28:27,279 --> 00:28:29,840
home directory is now the temp directory

740
00:28:29,840 --> 00:28:32,480
uh so that was basically the exploit

741
00:28:32,480 --> 00:28:33,520
um

742
00:28:33,520 --> 00:28:36,240
it's pretty easy to do uh so this was a

743
00:28:36,240 --> 00:28:39,120
really really awesome exploit and uh

744
00:28:39,120 --> 00:28:41,520
and again from 2020 and if you think

745
00:28:41,520 --> 00:28:44,240
that only uh only like researchers do

746
00:28:44,240 --> 00:28:46,480
those things malware authors also do

747
00:28:46,480 --> 00:28:48,320
this thing this was found by jamf in

748
00:28:48,320 --> 00:28:51,120
2021 it's a it's a malware that

749
00:28:51,120 --> 00:28:54,399
basically piggyback rides on on existing

750
00:28:54,399 --> 00:28:57,039
uh apps with known tcc capabilities like

751
00:28:57,039 --> 00:28:58,640
zoom for instance

752
00:28:58,640 --> 00:29:01,039
uh and because of a bug in the way that

753
00:29:01,039 --> 00:29:03,360
apple attributes certain operations to

754
00:29:03,360 --> 00:29:07,039
apps it it thought that uh uh the uh

755
00:29:07,039 --> 00:29:09,520
malicious the the sorry the microphone

756
00:29:09,520 --> 00:29:11,360
access for instance didn't come from the

757
00:29:11,360 --> 00:29:13,840
app it's like the internal app right

758
00:29:13,840 --> 00:29:15,840
here it came from zoom and basically

759
00:29:15,840 --> 00:29:19,279
attribute that to zoom uh so uh that was

760
00:29:19,279 --> 00:29:21,679
like an interesting uh bug that was uh

761
00:29:21,679 --> 00:29:24,720
used by uh by malware uh just to bypass

762
00:29:24,720 --> 00:29:26,399
tcc

763
00:29:26,399 --> 00:29:27,279
um

764
00:29:27,279 --> 00:29:28,880
so when i started looking i looked at

765
00:29:28,880 --> 00:29:30,320
all of those things and asked myself

766
00:29:30,320 --> 00:29:31,279
well

767
00:29:31,279 --> 00:29:33,520
how did apple really fix those things

768
00:29:33,520 --> 00:29:35,440
and apple speaks specifically to the

769
00:29:35,440 --> 00:29:37,840
home directory issue

770
00:29:37,840 --> 00:29:40,240
was basically changing uh from expanding

771
00:29:40,240 --> 00:29:42,159
the home directory environment variable

772
00:29:42,159 --> 00:29:45,720
to use getpwuid as they should

773
00:29:45,720 --> 00:29:47,520
getpwuid

774
00:29:47,520 --> 00:29:50,480
that's like a standard code even

775
00:29:50,480 --> 00:29:52,559
there is there is a linux version for

776
00:29:52,559 --> 00:29:54,080
that as well you get basically a

777
00:29:54,080 --> 00:29:56,720
structure with all sorts of interesting

778
00:29:56,720 --> 00:29:59,039
information including the home directory

779
00:29:59,039 --> 00:30:00,399
of the user and that's basically what

780
00:30:00,399 --> 00:30:01,360
they do

781
00:30:01,360 --> 00:30:03,760
interestingly enough

782
00:30:03,760 --> 00:30:06,640
in apple specifically apple works with

783
00:30:06,640 --> 00:30:08,559
something called open directory which is

784
00:30:08,559 --> 00:30:11,600
like the ldap implementation for mac os

785
00:30:11,600 --> 00:30:13,360
and there then you can change like your

786
00:30:13,360 --> 00:30:16,559
picture picture and and name and whatnot

787
00:30:16,559 --> 00:30:18,880
and also your home directory and the way

788
00:30:18,880 --> 00:30:22,240
to talk to uh this uh directory services

789
00:30:22,240 --> 00:30:25,279
is by a tool called dscl directory

790
00:30:25,279 --> 00:30:26,399
services

791
00:30:26,399 --> 00:30:29,360
something and the idea is is to change a

792
00:30:29,360 --> 00:30:31,600
property in your entry called nfs home

793
00:30:31,600 --> 00:30:34,000
directory if you're able to change nfs

794
00:30:34,000 --> 00:30:36,080
home directory entry you're basically

795
00:30:36,080 --> 00:30:37,039
able to

796
00:30:37,039 --> 00:30:38,480
basically

797
00:30:38,480 --> 00:30:41,679
revive that bug from the grave and do

798
00:30:41,679 --> 00:30:43,600
exactly the same idea planting your own

799
00:30:43,600 --> 00:30:47,039
malicious tcc database

800
00:30:47,600 --> 00:30:49,840
apparently you can't simply use dscl

801
00:30:49,840 --> 00:30:51,360
create the command line that i just

802
00:30:51,360 --> 00:30:53,840
showed you because apple foresaw this

803
00:30:53,840 --> 00:30:56,080
and saw that nfs home directory is kind

804
00:30:56,080 --> 00:30:58,799
of dangerous so it's now hardened and

805
00:30:58,799 --> 00:31:01,279
you need a spec a specific tcc

806
00:31:01,279 --> 00:31:03,120
capability again the chicken in the egg

807
00:31:03,120 --> 00:31:05,279
problem you need a specific tcc

808
00:31:05,279 --> 00:31:07,440
capability to actually change the nfs

809
00:31:07,440 --> 00:31:10,159
home directory and uh that thing is

810
00:31:10,159 --> 00:31:12,640
saved in the user's local tcc database

811
00:31:12,640 --> 00:31:14,720
and this is the equivalent pop-up

812
00:31:14,720 --> 00:31:16,880
interestingly the pop-up doesn't say

813
00:31:16,880 --> 00:31:18,720
do you allow terminal to take over the

814
00:31:18,720 --> 00:31:20,799
world it just says sound like do you

815
00:31:20,799 --> 00:31:22,559
allow terminal to administer your

816
00:31:22,559 --> 00:31:25,039
computer if you say yes then basically

817
00:31:25,039 --> 00:31:27,200
uh you might get screwed because of that

818
00:31:27,200 --> 00:31:28,720
thing

819
00:31:28,720 --> 00:31:31,200
but still again this is not a tcc bypass

820
00:31:31,200 --> 00:31:33,519
because it does require some user

821
00:31:33,519 --> 00:31:34,960
interaction

822
00:31:34,960 --> 00:31:37,519
um so after some research i discovered

823
00:31:37,519 --> 00:31:38,960
two other commands that are very cool

824
00:31:38,960 --> 00:31:40,880
one of them is ds import and the other

825
00:31:40,880 --> 00:31:43,279
one's ds export and the idea is that you

826
00:31:43,279 --> 00:31:45,679
can export your uh

827
00:31:45,679 --> 00:31:48,880
directory services entry to a file edit

828
00:31:48,880 --> 00:31:50,880
it and then use ds import and

829
00:31:50,880 --> 00:31:53,760
interestingly ds import does not require

830
00:31:53,760 --> 00:31:56,320
that tcc capability it wasn't hardened

831
00:31:56,320 --> 00:31:59,360
so that was basically my exploit i i

832
00:31:59,360 --> 00:32:02,080
couldn't find a way to run ds import uh

833
00:32:02,080 --> 00:32:04,080
without running this route but still i

834
00:32:04,080 --> 00:32:06,000
mean if you're able to do a tcc bypass

835
00:32:06,000 --> 00:32:08,480
from root it's still tcc bypass

836
00:32:08,480 --> 00:32:09,679
um

837
00:32:09,679 --> 00:32:12,240
and then so i basically submitted the

838
00:32:12,240 --> 00:32:14,799
bug to apple with a full exploit and

839
00:32:14,799 --> 00:32:17,039
they were like yeah yeah we're fixing it

840
00:32:17,039 --> 00:32:19,679
and then they fix it by accident and if

841
00:32:19,679 --> 00:32:21,840
you if you want to be snarky it that's

842
00:32:21,840 --> 00:32:23,440
not the right time because it's it's a

843
00:32:23,440 --> 00:32:25,600
really hard bug to fix without breaking

844
00:32:25,600 --> 00:32:26,559
anything

845
00:32:26,559 --> 00:32:29,360
and um that was kind of a happy accident

846
00:32:29,360 --> 00:32:31,440
and in monterrey i noticed that my

847
00:32:31,440 --> 00:32:33,360
exploit doesn't work anymore and the

848
00:32:33,360 --> 00:32:35,039
reason for that is because they removed

849
00:32:35,039 --> 00:32:35,919
some

850
00:32:35,919 --> 00:32:38,640
entitlement from ds import

851
00:32:38,640 --> 00:32:40,399
so

852
00:32:40,399 --> 00:32:41,919
basically when i talked to apple they

853
00:32:41,919 --> 00:32:43,840
said that the issue was not fixed but

854
00:32:43,840 --> 00:32:45,760
the question is how can i bypass their

855
00:32:45,760 --> 00:32:47,840
happy accident right because now i can't

856
00:32:47,840 --> 00:32:50,159
rely on this import anymore how can i

857
00:32:50,159 --> 00:32:51,840
still uh uh

858
00:32:51,840 --> 00:32:53,919
change my home directory and if you

859
00:32:53,919 --> 00:32:56,399
remember my the theme of this talk

860
00:32:56,399 --> 00:32:58,399
uh apple entitled binaries if you

861
00:32:58,399 --> 00:33:00,399
remember that i basically went on hunt

862
00:33:00,399 --> 00:33:03,279
again and went to try to find an apple

863
00:33:03,279 --> 00:33:05,360
entitled binary and i did find one

864
00:33:05,360 --> 00:33:06,720
config d

865
00:33:06,720 --> 00:33:09,279
config d again is a demon because it

866
00:33:09,279 --> 00:33:10,640
ends with a d

867
00:33:10,640 --> 00:33:12,399
it's responsible for configuration

868
00:33:12,399 --> 00:33:14,799
changes to be honest i have no idea what

869
00:33:14,799 --> 00:33:17,679
configuration changes mean but it's a

870
00:33:17,679 --> 00:33:19,919
pretty good like binary for me because

871
00:33:19,919 --> 00:33:22,559
it's very attractive it has the com

872
00:33:22,559 --> 00:33:25,279
apple private tcc allow with the same

873
00:33:25,279 --> 00:33:27,600
tcc capability to change the home

874
00:33:27,600 --> 00:33:28,960
directory

875
00:33:28,960 --> 00:33:30,880
it has no hardened runtime basically a

876
00:33:30,880 --> 00:33:32,799
hardened runtime is a way for apple to

877
00:33:32,799 --> 00:33:35,039
prevent you from injecting code into it

878
00:33:35,039 --> 00:33:37,360
and injection is not something very easy

879
00:33:37,360 --> 00:33:40,559
on mac it's not like linux or or linux

880
00:33:40,559 --> 00:33:42,480
linux or windows sorry

881
00:33:42,480 --> 00:33:45,279
but in this case config d is extensible

882
00:33:45,279 --> 00:33:47,919
by definition this also explains why why

883
00:33:47,919 --> 00:33:50,000
you didn't have hardened runtime it

884
00:33:50,000 --> 00:33:51,440
basically allows you to load a

885
00:33:51,440 --> 00:33:53,919
configuration agent which is basically a

886
00:33:53,919 --> 00:33:56,399
bundle which basically will do a daily

887
00:33:56,399 --> 00:33:58,720
bloat die labs are basically like the

888
00:33:58,720 --> 00:34:01,840
dll or so equivalent in mac so and

889
00:34:01,840 --> 00:34:04,080
basically using config dash t in a

890
00:34:04,080 --> 00:34:06,480
bundle path it will load that bundle it

891
00:34:06,480 --> 00:34:09,359
will load my own daily and that was my

892
00:34:09,359 --> 00:34:12,320
renewed exploit and this is the video

893
00:34:12,320 --> 00:34:13,839
that i'm going to show you

894
00:34:13,839 --> 00:34:16,800
uh you can see here that i'm opening the

895
00:34:16,800 --> 00:34:18,239
privacy pane and you can see that

896
00:34:18,239 --> 00:34:20,399
microsoft teams that's the app that i

897
00:34:20,399 --> 00:34:22,879
wanted to exploit doesn't have camera or

898
00:34:22,879 --> 00:34:26,079
microphone access i open my terminal

899
00:34:26,079 --> 00:34:29,280
run this route because i still have to

900
00:34:29,280 --> 00:34:32,239
i show you the os version for fun i

901
00:34:32,239 --> 00:34:35,199
reset all of the tcc information in the

902
00:34:35,199 --> 00:34:37,679
database there is a utility called tcc

903
00:34:37,679 --> 00:34:39,280
util to do that

904
00:34:39,280 --> 00:34:41,280
for all of my terminals just to show you

905
00:34:41,280 --> 00:34:43,839
that i'm not cheating obviously

906
00:34:43,839 --> 00:34:45,599
and now i'm going to run my exploit and

907
00:34:45,599 --> 00:34:48,879
my exploit again called power deer uh is

908
00:34:48,879 --> 00:34:51,199
uh is going to give in this case a

909
00:34:51,199 --> 00:34:52,960
microphone and camera access to

910
00:34:52,960 --> 00:34:56,320
microsoft teams silently with no uh no

911
00:34:56,320 --> 00:34:58,720
user interaction it will inject a dire

912
00:34:58,720 --> 00:35:01,280
lib to config d and do all the things

913
00:35:01,280 --> 00:35:04,960
that we just discussed and here we go

914
00:35:12,079 --> 00:35:14,400
important shout out

915
00:35:14,400 --> 00:35:16,400
a very similar approach was discovered

916
00:35:16,400 --> 00:35:18,800
by watching regular there is no way i

917
00:35:18,800 --> 00:35:21,680
pronounced that correctly uh uh and uh

918
00:35:21,680 --> 00:35:23,839
basically what he did is was injecting

919
00:35:23,839 --> 00:35:26,079
uh to the app that controls directory

920
00:35:26,079 --> 00:35:27,839
services it had the same kind of

921
00:35:27,839 --> 00:35:29,839
capabilities and again reviving that

922
00:35:29,839 --> 00:35:33,119
awesome home directory uh poisoning of

923
00:35:33,119 --> 00:35:34,960
vulnerability from the grave uh

924
00:35:34,960 --> 00:35:37,839
washington sabah uh presented other

925
00:35:37,839 --> 00:35:40,400
interesting ways of tcc bypasses some of

926
00:35:40,400 --> 00:35:42,400
them win by knockout some of them win by

927
00:35:42,400 --> 00:35:44,560
points but they're really awesome and

928
00:35:44,560 --> 00:35:46,160
you should definitely check them out if

929
00:35:46,160 --> 00:35:47,359
you're interested

930
00:35:47,359 --> 00:35:50,960
um bonus round i noticed when i started

931
00:35:50,960 --> 00:35:53,359
reversing tccd the daemon that controls

932
00:35:53,359 --> 00:35:56,560
tcc uh and i saw a lot of interesting

933
00:35:56,560 --> 00:35:59,280
sql strings obviously because it has to

934
00:35:59,280 --> 00:36:02,160
interact with a sql database and if you

935
00:36:02,160 --> 00:36:04,800
can see here right there in the corner

936
00:36:04,800 --> 00:36:07,119
it looks like it's injectable so i'm

937
00:36:07,119 --> 00:36:09,200
still like i wasn't able to really

938
00:36:09,200 --> 00:36:12,079
inject because of the code path uh that

939
00:36:12,079 --> 00:36:14,560
the code flow that flows to this thing

940
00:36:14,560 --> 00:36:16,560
but basically i'm still looking for

941
00:36:16,560 --> 00:36:19,119
interesting sql injections on on not

942
00:36:19,119 --> 00:36:20,960
just on tcc by the way there are other

943
00:36:20,960 --> 00:36:24,400
mechanisms in mac os that use uh use sql

944
00:36:24,400 --> 00:36:26,800
databases for instance gatekeeper right

945
00:36:26,800 --> 00:36:28,000
so uh

946
00:36:28,000 --> 00:36:29,920
basically the challenge would be doing a

947
00:36:29,920 --> 00:36:32,880
sql injection on the os itself

948
00:36:32,880 --> 00:36:34,079
um

949
00:36:34,079 --> 00:36:36,640
and basically we're continuing uh we're

950
00:36:36,640 --> 00:36:39,440
doing uh kind of like challenging every

951
00:36:39,440 --> 00:36:42,240
mac os security mechanism one time one

952
00:36:42,240 --> 00:36:44,320
at a time we already reported the

953
00:36:44,320 --> 00:36:46,720
sandbox escape to apple but we can't

954
00:36:46,720 --> 00:36:48,480
disclose it because we don't drop zero

955
00:36:48,480 --> 00:36:49,520
days here

956
00:36:49,520 --> 00:36:51,520
uh it's going to be called open sesame

957
00:36:51,520 --> 00:36:53,680
because i decide on the vulnerability

958
00:36:53,680 --> 00:36:54,560
names

959
00:36:54,560 --> 00:36:55,839
um

960
00:36:55,839 --> 00:36:58,160
we are looking for a gatekeeper bypass

961
00:36:58,160 --> 00:36:59,599
there are two awesome ones in recent

962
00:36:59,599 --> 00:37:01,760
memory and we have a lead on a third one

963
00:37:01,760 --> 00:37:04,240
that we're going to basically implement

964
00:37:04,240 --> 00:37:06,400
um i'm pretty sure we'll be able to find

965
00:37:06,400 --> 00:37:08,720
one kernel bugs are pretty awesome i o

966
00:37:08,720 --> 00:37:11,280
mfb seems to be a gold mine in in in

967
00:37:11,280 --> 00:37:14,320
apple in the apple um landscape and

968
00:37:14,320 --> 00:37:15,680
there are you know we're starting to

969
00:37:15,680 --> 00:37:16,480
look

970
00:37:16,480 --> 00:37:18,800
at the app specific ones i heard that

971
00:37:18,800 --> 00:37:20,880
imessage is turing complete so we want

972
00:37:20,880 --> 00:37:23,119
to do something similar perhaps

973
00:37:23,119 --> 00:37:25,680
perhaps less sophisticated though

974
00:37:25,680 --> 00:37:28,880
a summary mac os is a unique os with

975
00:37:28,880 --> 00:37:31,040
proprietary security mechanisms that in

976
00:37:31,040 --> 00:37:33,040
our opinion does not get enough scrutiny

977
00:37:33,040 --> 00:37:35,599
from security researchers

978
00:37:35,599 --> 00:37:37,440
and and especially ones that are

979
00:37:37,440 --> 00:37:39,359
overpowered again apple can sign their

980
00:37:39,359 --> 00:37:40,960
own stuff you won't be able to do the

981
00:37:40,960 --> 00:37:43,119
same thing so they have a lot of power

982
00:37:43,119 --> 00:37:44,640
in their hands and we want to make sure

983
00:37:44,640 --> 00:37:46,160
that attackers don't abuse it by

984
00:37:46,160 --> 00:37:48,880
disclosing responsibly uh stay tuned and

985
00:37:48,880 --> 00:37:53,560
thank you so so much thank you

986
00:37:59,780 --> 00:38:02,929
[Music]

