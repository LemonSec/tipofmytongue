1
00:00:00,930 --> 00:00:08,260
[Music]

2
00:00:12,080 --> 00:00:13,679
hello blue adail

3
00:00:13,679 --> 00:00:15,679
how are you doing blew it let's get some

4
00:00:15,679 --> 00:00:17,920
energy

5
00:00:18,960 --> 00:00:20,800
very excited to be here very excited to

6
00:00:20,800 --> 00:00:22,160
introduce my

7
00:00:22,160 --> 00:00:26,480
research on aws this late august 2021

8
00:00:26,480 --> 00:00:29,439
this is when i i researched aws

9
00:00:29,439 --> 00:00:31,039
and the research is called breaking

10
00:00:31,039 --> 00:00:34,239
information from an error message to aws

11
00:00:34,239 --> 00:00:36,079
infrastructure now i can't skip the

12
00:00:36,079 --> 00:00:37,680
classic who am i right this is the cloud

13
00:00:37,680 --> 00:00:38,960
edition

14
00:00:38,960 --> 00:00:41,520
my name is tsak bakima as you've heard

15
00:00:41,520 --> 00:00:43,040
is my twitter account you can follow me

16
00:00:43,040 --> 00:00:45,600
there for further research i'm a

17
00:00:45,600 --> 00:00:48,559
security researcher at orca security a

18
00:00:48,559 --> 00:00:50,399
little bit about my background

19
00:00:50,399 --> 00:00:52,399
i was at idf for five years at the

20
00:00:52,399 --> 00:00:54,800
intelligence unit then i had exactly two

21
00:00:54,800 --> 00:00:56,960
days off and went straight to orca

22
00:00:56,960 --> 00:01:00,000
security no cloud experience whatsoever

23
00:01:00,000 --> 00:01:02,879
i run a little bit on the side i also

24
00:01:02,879 --> 00:01:05,040
freestyle rap as you've heard

25
00:01:05,040 --> 00:01:06,960
if you want to see a demonstration of

26
00:01:06,960 --> 00:01:09,520
that that's off stage i can show it

27
00:01:09,520 --> 00:01:12,400
afterwards so come get me now this

28
00:01:12,400 --> 00:01:14,799
research i'm going to talk about

29
00:01:14,799 --> 00:01:17,280
was taking place in the first two weeks

30
00:01:17,280 --> 00:01:21,040
i have an orca really not a lot of cloud

31
00:01:21,040 --> 00:01:22,880
experience that i had

32
00:01:22,880 --> 00:01:24,400
the first thing we do need to talk about

33
00:01:24,400 --> 00:01:26,640
though is why am i doing what am i doing

34
00:01:26,640 --> 00:01:28,560
why am i researching the cloud and why

35
00:01:28,560 --> 00:01:30,720
am i researching aws specifically what

36
00:01:30,720 --> 00:01:31,920
is my purpose

37
00:01:31,920 --> 00:01:32,960
so

38
00:01:32,960 --> 00:01:35,680
two purposes one is my team purpose i'm

39
00:01:35,680 --> 00:01:37,280
in the thought leadership team at oregon

40
00:01:37,280 --> 00:01:39,280
security basically we want to generate

41
00:01:39,280 --> 00:01:41,439
high quality research and advance the

42
00:01:41,439 --> 00:01:44,560
cloud security in the world

43
00:01:44,560 --> 00:01:47,360
and the second thing is my specific

44
00:01:47,360 --> 00:01:49,840
uh interest or my purpose which is

45
00:01:49,840 --> 00:01:52,640
gaining more cloud expertise again i had

46
00:01:52,640 --> 00:01:54,640
no experience whatsoever in the cloud

47
00:01:54,640 --> 00:01:56,719
maybe ran one or two aws commands in my

48
00:01:56,719 --> 00:01:57,840
life

49
00:01:57,840 --> 00:02:01,040
and recent cloud is a great way

50
00:02:01,040 --> 00:02:03,200
to get to know the cloud but ywas

51
00:02:03,200 --> 00:02:06,079
specifically so two reasons one it has

52
00:02:06,079 --> 00:02:08,399
the largest market share a third of the

53
00:02:08,399 --> 00:02:10,878
market is owned by aws so when you find

54
00:02:10,878 --> 00:02:13,120
a vulnerability or a finding in aws it's

55
00:02:13,120 --> 00:02:15,440
more relevant it's more interesting

56
00:02:15,440 --> 00:02:17,040
and the second thing is and it's the

57
00:02:17,040 --> 00:02:19,440
most important thing is a challenge

58
00:02:19,440 --> 00:02:22,959
there were not a lot of attacks on aws

59
00:02:22,959 --> 00:02:24,319
infrastructure

60
00:02:24,319 --> 00:02:27,840
so this might be the public first

61
00:02:27,840 --> 00:02:28,959
okay

62
00:02:28,959 --> 00:02:30,319
one thing we do need to get out of the

63
00:02:30,319 --> 00:02:32,800
way is this major buzzword called

64
00:02:32,800 --> 00:02:33,760
cloud

65
00:02:33,760 --> 00:02:35,760
what is the cloud so some of you may

66
00:02:35,760 --> 00:02:36,959
have ran

67
00:02:36,959 --> 00:02:39,680
a lot of commands on aws azure gcp

68
00:02:39,680 --> 00:02:41,840
whatever and some of you may have only

69
00:02:41,840 --> 00:02:44,080
heard the word cloud in articles

70
00:02:44,080 --> 00:02:45,920
what does it mean let me introduce you

71
00:02:45,920 --> 00:02:47,920
to the world of the problem say i want

72
00:02:47,920 --> 00:02:50,480
to set up a server specifically

73
00:02:50,480 --> 00:02:52,400
a database

74
00:02:52,400 --> 00:02:53,280
okay

75
00:02:53,280 --> 00:02:55,120
now what do i need to do i need to go to

76
00:02:55,120 --> 00:02:57,360
the hardware store buy the hardware plug

77
00:02:57,360 --> 00:02:59,360
it into the electricity pay my

78
00:02:59,360 --> 00:03:01,519
electricity bill and everything

79
00:03:01,519 --> 00:03:03,120
and then i need to install an operating

80
00:03:03,120 --> 00:03:05,360
system i need to make sure i have

81
00:03:05,360 --> 00:03:07,360
backups i need to make sure that i

82
00:03:07,360 --> 00:03:09,120
install the latest software i don't have

83
00:03:09,120 --> 00:03:11,519
any vulnerabilities but what happens if

84
00:03:11,519 --> 00:03:14,400
my database server suddenly is on fire

85
00:03:14,400 --> 00:03:15,760
right

86
00:03:15,760 --> 00:03:17,280
it's a problem

87
00:03:17,280 --> 00:03:19,200
i need to make sure it's always online i

88
00:03:19,200 --> 00:03:21,200
need to make sure it always has backups

89
00:03:21,200 --> 00:03:23,120
and i need to make sure it's secure

90
00:03:23,120 --> 00:03:24,959
encrypted whatever i need

91
00:03:24,959 --> 00:03:28,400
aws azure gcp whomever whatever vendor

92
00:03:28,400 --> 00:03:31,120
does this for you and it's only it's not

93
00:03:31,120 --> 00:03:32,560
only databases

94
00:03:32,560 --> 00:03:34,640
it can be a file storage

95
00:03:34,640 --> 00:03:37,440
it can be a web server a virtual machine

96
00:03:37,440 --> 00:03:40,400
whatever you pay them they do it for you

97
00:03:40,400 --> 00:03:42,959
you don't need to take care of anything

98
00:03:42,959 --> 00:03:45,599
and just so you understand how scalable

99
00:03:45,599 --> 00:03:47,680
this might be netflix their entire

100
00:03:47,680 --> 00:03:50,560
infrastructure is on aws everything you

101
00:03:50,560 --> 00:03:52,319
use every server you communicate is on

102
00:03:52,319 --> 00:03:55,200
the cloud not no physical server that

103
00:03:55,200 --> 00:03:58,000
they're taking care of

104
00:03:58,000 --> 00:04:00,560
now aws we need to talk about because

105
00:04:00,560 --> 00:04:02,239
this is the target of my research so

106
00:04:02,239 --> 00:04:04,879
short introduction would be

107
00:04:04,879 --> 00:04:06,879
this

108
00:04:06,879 --> 00:04:08,640
aws is an acronym for amazon web

109
00:04:08,640 --> 00:04:10,799
services it's the largest cloud provider

110
00:04:10,799 --> 00:04:12,959
to this date and it has over 200

111
00:04:12,959 --> 00:04:16,238
services just to name a few

112
00:04:16,238 --> 00:04:18,000
and you choose which service you need to

113
00:04:18,000 --> 00:04:20,079
use for your purposes right so ec2 is a

114
00:04:20,079 --> 00:04:22,000
virtual machine service

115
00:04:22,000 --> 00:04:23,759
lambda is a service where you can deploy

116
00:04:23,759 --> 00:04:26,800
your own code s3 you can store files you

117
00:04:26,800 --> 00:04:29,120
have database solutions such as dynamodb

118
00:04:29,120 --> 00:04:30,320
and rds

119
00:04:30,320 --> 00:04:32,400
and a lot of other services cloudwatch

120
00:04:32,400 --> 00:04:33,919
for example can show you metrics

121
00:04:33,919 --> 00:04:35,759
cloudformation can help you deploy

122
00:04:35,759 --> 00:04:37,120
resources in your account we'll talk

123
00:04:37,120 --> 00:04:38,960
about some of them later but just

124
00:04:38,960 --> 00:04:40,960
understand whatever you use the cloud

125
00:04:40,960 --> 00:04:42,800
for you choose the services you're going

126
00:04:42,800 --> 00:04:45,120
to use now aside from services another

127
00:04:45,120 --> 00:04:48,160
keyword in aws is regions basically

128
00:04:48,160 --> 00:04:50,479
geographical regions each service if i

129
00:04:50,479 --> 00:04:52,720
store files for example i want my file

130
00:04:52,720 --> 00:04:55,280
storage to be close to my customers

131
00:04:55,280 --> 00:04:57,280
right if i serve the east coast i'll

132
00:04:57,280 --> 00:04:58,400
choose

133
00:04:58,400 --> 00:05:00,720
a region near the east the east coast if

134
00:05:00,720 --> 00:05:02,639
i serve israel i choose a region that's

135
00:05:02,639 --> 00:05:04,080
near israel

136
00:05:04,080 --> 00:05:06,400
uh basically each region divides into

137
00:05:06,400 --> 00:05:07,680
availability zones that's not so

138
00:05:07,680 --> 00:05:10,240
important but their data centers that's

139
00:05:10,240 --> 00:05:11,840
all there is to it and because we're

140
00:05:11,840 --> 00:05:13,840
going to talk about the vulnerability in

141
00:05:13,840 --> 00:05:15,280
the cloud we need to understand a little

142
00:05:15,280 --> 00:05:17,280
bit about cloud security so two key

143
00:05:17,280 --> 00:05:19,120
concepts about cloud security one is

144
00:05:19,120 --> 00:05:20,960
tenant isolation

145
00:05:20,960 --> 00:05:22,320
and that's the important premise of the

146
00:05:22,320 --> 00:05:24,080
cloud i'm a tenant me and my

147
00:05:24,080 --> 00:05:26,000
organization if your organization uses

148
00:05:26,000 --> 00:05:27,520
the cloud you are also a different

149
00:05:27,520 --> 00:05:29,680
tenant and even though we share the same

150
00:05:29,680 --> 00:05:31,759
resources for example we both have two

151
00:05:31,759 --> 00:05:33,759
virtual machines on the same physical

152
00:05:33,759 --> 00:05:35,520
machine

153
00:05:35,520 --> 00:05:38,240
the cloud should promise that i can't

154
00:05:38,240 --> 00:05:39,600
access your virtual machine you can't

155
00:05:39,600 --> 00:05:40,880
access mine

156
00:05:40,880 --> 00:05:42,479
same example

157
00:05:42,479 --> 00:05:46,000
if i have for example s3 storage we said

158
00:05:46,000 --> 00:05:48,160
it's a file storage if i store my files

159
00:05:48,160 --> 00:05:50,000
on a hard drive and you store your files

160
00:05:50,000 --> 00:05:52,400
on the same physical hard drive

161
00:05:52,400 --> 00:05:54,000
still i shouldn't access your files and

162
00:05:54,000 --> 00:05:55,759
you shouldn't access mine that's tenant

163
00:05:55,759 --> 00:05:57,600
isolation different tenants

164
00:05:57,600 --> 00:05:59,520
can't access each other and the second

165
00:05:59,520 --> 00:06:01,520
thing is a model that aws relies on

166
00:06:01,520 --> 00:06:04,000
which is the shared responsibility model

167
00:06:04,000 --> 00:06:05,600
this means who's responsible for what

168
00:06:05,600 --> 00:06:07,199
side of security

169
00:06:07,199 --> 00:06:08,639
if we take ec2 which is a virtual

170
00:06:08,639 --> 00:06:11,360
machine service as we said so everything

171
00:06:11,360 --> 00:06:15,840
that goes operating system and up is me

172
00:06:15,840 --> 00:06:18,160
if i install unpatched software if i

173
00:06:18,160 --> 00:06:19,360
don't make sure the permissions are

174
00:06:19,360 --> 00:06:21,600
correct my fault

175
00:06:21,600 --> 00:06:23,680
but anything below that say the hardware

176
00:06:23,680 --> 00:06:26,000
the networking

177
00:06:26,000 --> 00:06:27,759
if there are hardware vulnerabilities

178
00:06:27,759 --> 00:06:30,000
that's on aws size i can control it so

179
00:06:30,000 --> 00:06:31,919
whatever i can control

180
00:06:31,919 --> 00:06:33,680
my responsibility

181
00:06:33,680 --> 00:06:35,919
whatever aws can control and i can't

182
00:06:35,919 --> 00:06:37,360
their responsibility

183
00:06:37,360 --> 00:06:39,280
most researchers done aws are focusing

184
00:06:39,280 --> 00:06:41,120
on the upper side what can the customer

185
00:06:41,120 --> 00:06:42,560
misconfigure

186
00:06:42,560 --> 00:06:45,759
unknowingly and is somehow not secure

187
00:06:45,759 --> 00:06:47,759
not a lot of people focus on this side

188
00:06:47,759 --> 00:06:50,800
what can aws do wrong and this is what i

189
00:06:50,800 --> 00:06:52,639
wanted to focus on

190
00:06:52,639 --> 00:06:53,360
now

191
00:06:53,360 --> 00:06:55,120
every good story

192
00:06:55,120 --> 00:06:57,280
has a villain right and we need to get

193
00:06:57,280 --> 00:06:58,720
to know our villain the villain is a

194
00:06:58,720 --> 00:07:01,440
service called cloud formation so cloud

195
00:07:01,440 --> 00:07:03,039
information is 10 years old actually

196
00:07:03,039 --> 00:07:05,840
turned 10 like a week ago so happy

197
00:07:05,840 --> 00:07:08,000
birthday to cloudformation and it's an

198
00:07:08,000 --> 00:07:09,680
infrastructure as code service we'll see

199
00:07:09,680 --> 00:07:12,319
what that means but two key concepts or

200
00:07:12,319 --> 00:07:14,160
keywords in cloud formation are

201
00:07:14,160 --> 00:07:16,720
templates and stacks it accepts a

202
00:07:16,720 --> 00:07:19,440
template as an input and the output is a

203
00:07:19,440 --> 00:07:20,479
stack

204
00:07:20,479 --> 00:07:22,319
that's all we need to know about the

205
00:07:22,319 --> 00:07:25,520
concept of confirmation now 10 years old

206
00:07:25,520 --> 00:07:27,199
is pretty good for us because some of

207
00:07:27,199 --> 00:07:28,880
the code might be deprecated

208
00:07:28,880 --> 00:07:30,400
you can target the code it might be more

209
00:07:30,400 --> 00:07:32,160
prone to vulnerabilities and also 10

210
00:07:32,160 --> 00:07:33,520
years old is enough

211
00:07:33,520 --> 00:07:35,680
or is old enough to manage his own

212
00:07:35,680 --> 00:07:38,720
twitter account so at aws cloud former

213
00:07:38,720 --> 00:07:40,479
you can follow cloudformation remember

214
00:07:40,479 --> 00:07:42,720
it's evil it's an evil service so you

215
00:07:42,720 --> 00:07:44,800
can twitter bullying dmm

216
00:07:44,800 --> 00:07:47,440
do whatever you need to know there

217
00:07:47,440 --> 00:07:49,120
so we talked about stacks and templates

218
00:07:49,120 --> 00:07:50,800
stacks are the output template are the

219
00:07:50,800 --> 00:07:51,680
input

220
00:07:51,680 --> 00:07:53,840
what are stacks in cloud formation

221
00:07:53,840 --> 00:07:55,280
just a collection of resources

222
00:07:55,280 --> 00:07:57,120
everything in aws is a resource a

223
00:07:57,120 --> 00:07:59,199
virtual machine a file storage whatever

224
00:07:59,199 --> 00:08:00,960
everything is a resource

225
00:08:00,960 --> 00:08:03,199
a stack is a collection of resources

226
00:08:03,199 --> 00:08:04,639
managed there's a single unit if you

227
00:08:04,639 --> 00:08:06,400
delete them you delete them all if you

228
00:08:06,400 --> 00:08:08,560
duplicate them you duplicate them all

229
00:08:08,560 --> 00:08:10,000
this is the way you do it this can also

230
00:08:10,000 --> 00:08:11,759
be a part of a stack set and what are

231
00:08:11,759 --> 00:08:14,000
templates remember that's the input

232
00:08:14,000 --> 00:08:15,919
templates are just the recipe to how you

233
00:08:15,919 --> 00:08:17,120
make a stack

234
00:08:17,120 --> 00:08:20,319
the types of the resources their data

235
00:08:20,319 --> 00:08:22,080
you can also have parameters rules

236
00:08:22,080 --> 00:08:23,599
conditions for example if you have a

237
00:08:23,599 --> 00:08:25,759
production environment in a development

238
00:08:25,759 --> 00:08:27,360
environment you might want to deploy

239
00:08:27,360 --> 00:08:29,680
different resources in each one

240
00:08:29,680 --> 00:08:31,520
and the templates are either yaml or

241
00:08:31,520 --> 00:08:33,760
json2 formats this one is a yaml

242
00:08:33,760 --> 00:08:36,159
template it has two resources one is an

243
00:08:36,159 --> 00:08:38,320
ec2 instance remember ec2 virtual

244
00:08:38,320 --> 00:08:40,719
machine so this is a virtual machine

245
00:08:40,719 --> 00:08:43,120
that one of the data that is mentioned

246
00:08:43,120 --> 00:08:45,200
here is a shell script that initializes

247
00:08:45,200 --> 00:08:47,440
a web server and the other resource is a

248
00:08:47,440 --> 00:08:50,560
security group basically a firewall rule

249
00:08:50,560 --> 00:08:53,760
and this firewall rule says i allow any

250
00:08:53,760 --> 00:08:57,200
transportation tcp port 80. like an http

251
00:08:57,200 --> 00:08:59,440
server should

252
00:08:59,440 --> 00:09:01,040
now why should anyone research cloud

253
00:09:01,040 --> 00:09:02,480
information specifically why is it so

254
00:09:02,480 --> 00:09:04,959
interesting three reasons so first of

255
00:09:04,959 --> 00:09:06,560
all it has plenty of features because

256
00:09:06,560 --> 00:09:08,800
you input a template you can mention

257
00:09:08,800 --> 00:09:11,360
every resource you want so there's a lot

258
00:09:11,360 --> 00:09:12,160
of

259
00:09:12,160 --> 00:09:13,360
play here

260
00:09:13,360 --> 00:09:15,200
and it has a parser actually two one

261
00:09:15,200 --> 00:09:17,279
json parser one yama parser for the

262
00:09:17,279 --> 00:09:19,600
templates and they may contain sensitive

263
00:09:19,600 --> 00:09:21,200
customer data we saw a template with

264
00:09:21,200 --> 00:09:22,720
shell script earlier

265
00:09:22,720 --> 00:09:24,399
it might contain passwords database

266
00:09:24,399 --> 00:09:26,959
passwords whatever that is super

267
00:09:26,959 --> 00:09:29,839
interesting and it's a high risk service

268
00:09:29,839 --> 00:09:32,240
it does not only store files it does not

269
00:09:32,240 --> 00:09:34,880
only operate virtual machines

270
00:09:34,880 --> 00:09:37,040
it deploys the resources

271
00:09:37,040 --> 00:09:38,560
to my account

272
00:09:38,560 --> 00:09:40,640
so maybe i can give it a template and it

273
00:09:40,640 --> 00:09:44,640
can deploy resources to your account

274
00:09:44,640 --> 00:09:48,640
could be very very interesting but it's

275
00:09:48,640 --> 00:09:50,000
nice to say the cloud formation is a

276
00:09:50,000 --> 00:09:51,839
villain you know it was always bullying

277
00:09:51,839 --> 00:09:53,839
me but that's not the case actually mean

278
00:09:53,839 --> 00:09:55,600
confirmation we used to get along pretty

279
00:09:55,600 --> 00:09:57,360
well

280
00:09:57,360 --> 00:09:59,360
actually there was a time remember i

281
00:09:59,360 --> 00:10:00,959
have only two weeks of experience at

282
00:10:00,959 --> 00:10:03,680
this time with aws i didn't even really

283
00:10:03,680 --> 00:10:06,320
know cloudformation so how did i get to

284
00:10:06,320 --> 00:10:07,760
cloudformation

285
00:10:07,760 --> 00:10:11,120
i had different research idea

286
00:10:11,120 --> 00:10:14,000
not close the research idea was

287
00:10:14,000 --> 00:10:16,640
bypassing logging in aws there are two

288
00:10:16,640 --> 00:10:17,920
services that are responsible for

289
00:10:17,920 --> 00:10:20,079
logging in aws one is cloud trail and

290
00:10:20,079 --> 00:10:22,560
one is cloud watch

291
00:10:22,560 --> 00:10:25,200
and i wanted to make

292
00:10:25,200 --> 00:10:27,839
api calls in aws for example try to

293
00:10:27,839 --> 00:10:30,079
download a file from you try to upload a

294
00:10:30,079 --> 00:10:32,800
file to your storage but not show up in

295
00:10:32,800 --> 00:10:35,279
the logs that was my purpose

296
00:10:35,279 --> 00:10:37,920
what are cloud trailing cloud watch

297
00:10:37,920 --> 00:10:40,560
cloud rail tracks user activity and api

298
00:10:40,560 --> 00:10:42,160
usage and one thing we do need to

299
00:10:42,160 --> 00:10:45,040
remember is that everything in aws and i

300
00:10:45,040 --> 00:10:47,440
mean everything is an api call

301
00:10:47,440 --> 00:10:48,959
if you

302
00:10:48,959 --> 00:10:51,360
reboot your machine that's an api call

303
00:10:51,360 --> 00:10:52,959
if you give it credentials that's an api

304
00:10:52,959 --> 00:10:55,760
call if you create bucket a bucket

305
00:10:55,760 --> 00:10:58,480
is a storage of files in s3 it's an api

306
00:10:58,480 --> 00:10:59,360
call

307
00:10:59,360 --> 00:11:01,200
if you change its permissions if you

308
00:11:01,200 --> 00:11:04,320
update a table in your database whatever

309
00:11:04,320 --> 00:11:06,000
it is it's an api call specifically

310
00:11:06,000 --> 00:11:08,240
console login is an event but everything

311
00:11:08,240 --> 00:11:09,200
else

312
00:11:09,200 --> 00:11:11,519
and for our sake everything is an api

313
00:11:11,519 --> 00:11:12,880
call

314
00:11:12,880 --> 00:11:15,440
and when you create a cloudtrail

315
00:11:15,440 --> 00:11:17,360
logging group you could say it's called

316
00:11:17,360 --> 00:11:18,959
a trail

317
00:11:18,959 --> 00:11:20,880
and you choose what events to log so in

318
00:11:20,880 --> 00:11:22,640
this case i won't talk about the

319
00:11:22,640 --> 00:11:24,240
different types too much management

320
00:11:24,240 --> 00:11:26,399
events or events happening in my account

321
00:11:26,399 --> 00:11:28,640
data events or events happening to my

322
00:11:28,640 --> 00:11:30,880
data if i have a file storage and you

323
00:11:30,880 --> 00:11:33,440
try to access it it's a data event if i

324
00:11:33,440 --> 00:11:34,640
change something in my account it's a

325
00:11:34,640 --> 00:11:35,920
management event

326
00:11:35,920 --> 00:11:37,839
now how does the log look

327
00:11:37,839 --> 00:11:39,519
and remember i'm trying to bypass it to

328
00:11:39,519 --> 00:11:41,920
make api calls without getting logged

329
00:11:41,920 --> 00:11:43,760
how does a log look it's simple it's

330
00:11:43,760 --> 00:11:45,200
simply a json

331
00:11:45,200 --> 00:11:47,600
three interesting points of data one is

332
00:11:47,600 --> 00:11:50,160
who made a specific action

333
00:11:50,160 --> 00:11:52,480
in this case cloudrail the service

334
00:11:52,480 --> 00:11:56,000
itself made an action in my account

335
00:11:56,000 --> 00:11:57,440
did it do

336
00:11:57,440 --> 00:11:59,920
put the object in s3 meaning it uploaded

337
00:11:59,920 --> 00:12:01,600
the file to my storage

338
00:12:01,600 --> 00:12:03,760
and how did it do it like the parameters

339
00:12:03,760 --> 00:12:05,760
the circumstances so

340
00:12:05,760 --> 00:12:06,959
in the request parameters you can see

341
00:12:06,959 --> 00:12:08,880
the bucket name where did it upload the

342
00:12:08,880 --> 00:12:12,560
file to makes sense

343
00:12:13,279 --> 00:12:16,480
how did i get from my research

344
00:12:16,480 --> 00:12:17,519
of

345
00:12:17,519 --> 00:12:19,040
you know bypassing the login mechanisms

346
00:12:19,040 --> 00:12:21,920
to cloud formation

347
00:12:22,160 --> 00:12:24,560
there was this feature introduced to me

348
00:12:24,560 --> 00:12:26,480
by you avalon

349
00:12:26,480 --> 00:12:28,720
my team leader and orca cto and he said

350
00:12:28,720 --> 00:12:29,920
to me you know you're researching

351
00:12:29,920 --> 00:12:31,360
cloudtrail and cloudwatch and all these

352
00:12:31,360 --> 00:12:33,360
services cloudtrail we said responsible

353
00:12:33,360 --> 00:12:35,120
for logging cloudwatch

354
00:12:35,120 --> 00:12:37,120
shows logs and metrics

355
00:12:37,120 --> 00:12:38,480
these kind of things

356
00:12:38,480 --> 00:12:39,680
and he said you know there's this

357
00:12:39,680 --> 00:12:42,399
feature aws published it's a new feature

358
00:12:42,399 --> 00:12:43,920
in cloud watch

359
00:12:43,920 --> 00:12:45,360
you have a lot of dashboards where you

360
00:12:45,360 --> 00:12:48,720
can see metrics and there's a way to

361
00:12:48,720 --> 00:12:51,120
kind of program your own custom widgets

362
00:12:51,120 --> 00:12:53,200
might be interesting i said okay let's

363
00:12:53,200 --> 00:12:54,880
click on the link let's get to the

364
00:12:54,880 --> 00:12:56,320
samples

365
00:12:56,320 --> 00:12:58,320
of this feature and i went to sample

366
00:12:58,320 --> 00:13:00,240
widgets and literally clicked on the

367
00:13:00,240 --> 00:13:02,639
first one called echo it's a basic echo

368
00:13:02,639 --> 00:13:05,519
we're testing html

369
00:13:05,519 --> 00:13:06,720
and

370
00:13:06,720 --> 00:13:08,959
it led me to this page cloud formation

371
00:13:08,959 --> 00:13:11,519
stacks quick create stack receives a

372
00:13:11,519 --> 00:13:13,279
template url

373
00:13:13,279 --> 00:13:15,839
aml file again confirmation accepts

374
00:13:15,839 --> 00:13:16,959
templates

375
00:13:16,959 --> 00:13:19,040
and if you press next next next you get

376
00:13:19,040 --> 00:13:21,279
to this page again echoer you input echo

377
00:13:21,279 --> 00:13:24,160
it gets echo echo echo seems like it's

378
00:13:24,160 --> 00:13:26,639
working but something was a bit after me

379
00:13:26,639 --> 00:13:29,120
and i was only again two weeks into aws

380
00:13:29,120 --> 00:13:31,519
but something did feel a bit after me it

381
00:13:31,519 --> 00:13:33,760
was this

382
00:13:33,760 --> 00:13:35,519
there's this link template url it's an

383
00:13:35,519 --> 00:13:38,480
https link to s3 it's not that weird

384
00:13:38,480 --> 00:13:40,240
because if you browse to this link

385
00:13:40,240 --> 00:13:42,320
you'll get the yaml template as you

386
00:13:42,320 --> 00:13:46,320
should s3 is accessible by web

387
00:13:46,320 --> 00:13:48,399
but usually when we're talking about s3

388
00:13:48,399 --> 00:13:51,120
links in the api of aws you either give

389
00:13:51,120 --> 00:13:52,560
a bucket name

390
00:13:52,560 --> 00:13:55,839
in the api or you give an s3 link not

391
00:13:55,839 --> 00:13:58,639
https as a scheme but s3 is the scheme

392
00:13:58,639 --> 00:14:01,680
and when i say usually i mean usually

393
00:14:01,680 --> 00:14:05,279
you get s3 links not https

394
00:14:05,279 --> 00:14:07,199
now truth be told this page

395
00:14:07,199 --> 00:14:09,199
that shows the actual feature that i set

396
00:14:09,199 --> 00:14:10,880
out to research is a page i've never

397
00:14:10,880 --> 00:14:12,880
seen in my entire life up to making this

398
00:14:12,880 --> 00:14:14,480
presentation

399
00:14:14,480 --> 00:14:15,440
because even though i set out to

400
00:14:15,440 --> 00:14:18,160
research this feature the https link so

401
00:14:18,160 --> 00:14:20,399
much bothered me that i said i have to

402
00:14:20,399 --> 00:14:22,079
focus on this thing

403
00:14:22,079 --> 00:14:24,639
and why are https so links so

404
00:14:24,639 --> 00:14:27,519
interesting unlike s3 links this one

405
00:14:27,519 --> 00:14:29,440
concept called ssrf

406
00:14:29,440 --> 00:14:31,519
what are srfs it's an acronym server

407
00:14:31,519 --> 00:14:33,760
side request forgery basically if the

408
00:14:33,760 --> 00:14:35,600
server accepts a url and it doesn't

409
00:14:35,600 --> 00:14:36,959
filter it

410
00:14:36,959 --> 00:14:39,199
you can give the server url

411
00:14:39,199 --> 00:14:41,040
and when it requests the resource from

412
00:14:41,040 --> 00:14:42,160
the url

413
00:14:42,160 --> 00:14:44,480
it might lead to localhost or it might

414
00:14:44,480 --> 00:14:46,399
lead to the internal network or to an

415
00:14:46,399 --> 00:14:48,079
attacker server

416
00:14:48,079 --> 00:14:50,240
this is why https links are kind of

417
00:14:50,240 --> 00:14:51,839
dangerous

418
00:14:51,839 --> 00:14:53,600
that's pretty good but in the cloud it's

419
00:14:53,600 --> 00:14:55,519
even more dangerous because you have a

420
00:14:55,519 --> 00:14:57,600
thing called imds it's a server with a

421
00:14:57,600 --> 00:14:58,360
static

422
00:14:58,360 --> 00:15:01,040
ip169254 and so forth

423
00:15:01,040 --> 00:15:03,519
which is used for vm configuration

424
00:15:03,519 --> 00:15:05,360
so you can see the host name the public

425
00:15:05,360 --> 00:15:07,600
ip address all this you have there so

426
00:15:07,600 --> 00:15:09,920
you have interesting metadata about the

427
00:15:09,920 --> 00:15:10,880
vm

428
00:15:10,880 --> 00:15:13,519
but also you can give vm credentials

429
00:15:13,519 --> 00:15:15,760
because of my vm for example maybe wants

430
00:15:15,760 --> 00:15:18,800
to write to my storage in s3 so i can

431
00:15:18,800 --> 00:15:20,560
give it credentials

432
00:15:20,560 --> 00:15:22,720
to access my s3 bucket

433
00:15:22,720 --> 00:15:25,760
again a bucket where you store files

434
00:15:25,760 --> 00:15:27,760
so if you can access this and you can

435
00:15:27,760 --> 00:15:29,360
gain credentials this can be super

436
00:15:29,360 --> 00:15:30,720
interesting some of you may have also

437
00:15:30,720 --> 00:15:32,480
heard about capital one

438
00:15:32,480 --> 00:15:33,360
uh

439
00:15:33,360 --> 00:15:35,519
an attacker added an srf there they

440
00:15:35,519 --> 00:15:37,600
could have read the answer they accessed

441
00:15:37,600 --> 00:15:40,959
the imds got credentials

442
00:15:40,959 --> 00:15:44,000
then leaked a lot a lot of data

443
00:15:44,000 --> 00:15:47,199
revolving credit cards

444
00:15:47,199 --> 00:15:49,839
okay so accessing data is interesting if

445
00:15:49,839 --> 00:15:52,800
i can access the imds would be very cool

446
00:15:52,800 --> 00:15:54,240
but first i need to understand where

447
00:15:54,240 --> 00:15:56,320
that template url is coming from so i

448
00:15:56,320 --> 00:15:57,759
looked at the url

449
00:15:57,759 --> 00:16:00,079
and i focused on it and i got the url

450
00:16:00,079 --> 00:16:02,160
equals whatever i put

451
00:16:02,160 --> 00:16:04,480
and this is the page right

452
00:16:04,480 --> 00:16:06,560
so i said okay let's take this and put

453
00:16:06,560 --> 00:16:08,800
in valid url just for just for a sake of

454
00:16:08,800 --> 00:16:10,880
it let's try

455
00:16:10,880 --> 00:16:12,399
and i got this error

456
00:16:12,399 --> 00:16:15,120
template url must be a supported url so

457
00:16:15,120 --> 00:16:17,600
it's not that easy

458
00:16:17,600 --> 00:16:18,320
now

459
00:16:18,320 --> 00:16:19,920
where does this error come from i turned

460
00:16:19,920 --> 00:16:21,600
on my purpose proxy

461
00:16:21,600 --> 00:16:23,839
and i got to this page

462
00:16:23,839 --> 00:16:25,519
there's a request to cloud formation

463
00:16:25,519 --> 00:16:27,360
service template summary template url

464
00:16:27,360 --> 00:16:30,320
invalid url and you get an error

465
00:16:30,320 --> 00:16:32,320
template url must be a supported url

466
00:16:32,320 --> 00:16:34,560
when you use it normally you just get

467
00:16:34,560 --> 00:16:37,120
json which kind of summarizes that

468
00:16:37,120 --> 00:16:39,120
template makes sense cloudformation

469
00:16:39,120 --> 00:16:41,040
service template summary

470
00:16:41,040 --> 00:16:43,360
now remember everything is an api call

471
00:16:43,360 --> 00:16:45,680
everything in aws is an api call even

472
00:16:45,680 --> 00:16:48,560
this so what api call is this i just

473
00:16:48,560 --> 00:16:50,399
googled cloudform agent service template

474
00:16:50,399 --> 00:16:52,079
summary enter

475
00:16:52,079 --> 00:16:54,880
i got to this page aws documentation get

476
00:16:54,880 --> 00:16:57,360
template summary its cloudformation api

477
00:16:57,360 --> 00:17:00,079
call returns information about a new or

478
00:17:00,079 --> 00:17:02,079
existing template

479
00:17:02,079 --> 00:17:04,160
and how do we know this this is the api

480
00:17:04,160 --> 00:17:05,599
call i'm looking for

481
00:17:05,599 --> 00:17:07,760
it has an argument called tempe url

482
00:17:07,760 --> 00:17:09,599
which says it's the location of file

483
00:17:09,599 --> 00:17:12,000
containing the template body located in

484
00:17:12,000 --> 00:17:14,720
an amazon s3 bucket this is

485
00:17:14,720 --> 00:17:16,959
documentation

486
00:17:16,959 --> 00:17:19,280
so what i did right now i said okay i'm

487
00:17:19,280 --> 00:17:22,160
trying to get the imds right i have

488
00:17:22,160 --> 00:17:23,839
maybe an srf i don't know if i have an

489
00:17:23,839 --> 00:17:26,559
srf i want to find an srf let's play

490
00:17:26,559 --> 00:17:29,520
with that template url

491
00:17:29,600 --> 00:17:31,120
we know we have this input the normal

492
00:17:31,120 --> 00:17:34,320
input the cloud watch s3 amazon aws.com

493
00:17:34,320 --> 00:17:37,679
to that yaml file that's the valid one

494
00:17:37,679 --> 00:17:40,480
and when i put it as input obviously i

495
00:17:40,480 --> 00:17:42,559
get the normal output i get that summary

496
00:17:42,559 --> 00:17:44,799
of the json so this one works it

497
00:17:44,799 --> 00:17:46,880
bypasses that url filter that we're

498
00:17:46,880 --> 00:17:48,320
handling with

499
00:17:48,320 --> 00:17:49,840
then i said okay let's try to change the

500
00:17:49,840 --> 00:17:52,480
scheme instead of https try http

501
00:17:52,480 --> 00:17:53,760
tried it

502
00:17:53,760 --> 00:17:56,880
it worked i said okay i can play here

503
00:17:56,880 --> 00:17:58,640
but i i said okay let's try setting

504
00:17:58,640 --> 00:17:59,600
check

505
00:17:59,600 --> 00:18:01,520
to see if i can really

506
00:18:01,520 --> 00:18:03,120
influence the scheme let's try a scheme

507
00:18:03,120 --> 00:18:04,880
called blabla this one should fail right

508
00:18:04,880 --> 00:18:08,160
there's no such scheme called blah blah

509
00:18:08,160 --> 00:18:09,360
it did work

510
00:18:09,360 --> 00:18:11,840
so at this point i was like okay i don't

511
00:18:11,840 --> 00:18:13,120
really understand what's happening i

512
00:18:13,120 --> 00:18:14,480
think it's ignoring the scheme

513
00:18:14,480 --> 00:18:17,039
completely

514
00:18:17,360 --> 00:18:19,039
let's try to cut straight to the chase

515
00:18:19,039 --> 00:18:22,880
go to the imds and see if it works

516
00:18:22,880 --> 00:18:24,880
didn't work

517
00:18:24,880 --> 00:18:29,120
template url must be a supported url

518
00:18:29,120 --> 00:18:31,440
makes sense it's not an amazon s3 bucket

519
00:18:31,440 --> 00:18:32,960
remember documentation it should be a

520
00:18:32,960 --> 00:18:35,919
file in an amazon s3 bucket

521
00:18:35,919 --> 00:18:38,000
so i'll say let's try a different port

522
00:18:38,000 --> 00:18:41,520
the same cloud watch s3 amazon aws.com

523
00:18:41,520 --> 00:18:43,679
with a different port 13337 shouldn't

524
00:18:43,679 --> 00:18:45,840
work right this port is not open this is

525
00:18:45,840 --> 00:18:48,799
not the https port

526
00:18:49,520 --> 00:18:51,039
it did work

527
00:18:51,039 --> 00:18:52,799
so it's ignoring the scheme it's

528
00:18:52,799 --> 00:18:54,480
ignoring the port it's probably only

529
00:18:54,480 --> 00:18:57,360
using the host name and the path i said

530
00:18:57,360 --> 00:18:59,360
let's write the ad symbol because the ad

531
00:18:59,360 --> 00:19:01,280
symbol you might know it from ssh you do

532
00:19:01,280 --> 00:19:03,440
user at a certain domain that's how you

533
00:19:03,440 --> 00:19:04,880
give a username or credentials to your

534
00:19:04,880 --> 00:19:07,919
url so i said let's try s3 amazon

535
00:19:07,919 --> 00:19:10,960
aws.com like a valid s3 bucket

536
00:19:10,960 --> 00:19:14,480
at evaldomain.com see what happens

537
00:19:14,480 --> 00:19:16,480
didn't work so it can really parse the

538
00:19:16,480 --> 00:19:19,840
url it knows how to parse it

539
00:19:19,840 --> 00:19:23,200
so at this point i said

540
00:19:23,200 --> 00:19:26,320
okay i'm having a certain problem

541
00:19:26,320 --> 00:19:28,559
i need to understand what it can do with

542
00:19:28,559 --> 00:19:30,480
s3 buckets i created my own bucket

543
00:19:30,480 --> 00:19:32,960
called blue test bucket and i

544
00:19:32,960 --> 00:19:35,600
told it the template url is blue test

545
00:19:35,600 --> 00:19:38,400
bucket slash existent it's an existing

546
00:19:38,400 --> 00:19:40,080
file it's empty

547
00:19:40,080 --> 00:19:42,000
and i got a different error template

548
00:19:42,000 --> 00:19:45,440
format error unsupported structure

549
00:19:45,440 --> 00:19:47,840
makes sense it is a supported url so i

550
00:19:47,840 --> 00:19:49,520
don't get that error unsupported

551
00:19:49,520 --> 00:19:51,679
structure basically meaning because it's

552
00:19:51,679 --> 00:19:53,679
an empty file it's not a yaml template

553
00:19:53,679 --> 00:19:55,280
it's not a yaml template does not

554
00:19:55,280 --> 00:19:57,039
contain any resources cloud formation

555
00:19:57,039 --> 00:19:58,480
can't do anything with it not

556
00:19:58,480 --> 00:20:00,799
interesting

557
00:20:00,799 --> 00:20:02,400
and then i tried

558
00:20:02,400 --> 00:20:04,559
a non-existent file just for the sake of

559
00:20:04,559 --> 00:20:08,320
it and i got this s3 error x is denied

560
00:20:08,320 --> 00:20:09,760
that's kind of interesting because if

561
00:20:09,760 --> 00:20:11,360
you take that same url and you browse to

562
00:20:11,360 --> 00:20:14,240
it with your browser you also get

563
00:20:14,240 --> 00:20:17,760
access denied inside of an s3 error

564
00:20:17,760 --> 00:20:19,200
okay

565
00:20:19,200 --> 00:20:21,840
now this point

566
00:20:22,000 --> 00:20:22,880
i

567
00:20:22,880 --> 00:20:25,120
said to myself you know what this starts

568
00:20:25,120 --> 00:20:26,880
to be a little bit harder than i

569
00:20:26,880 --> 00:20:28,320
imagined i tried to play with the inputs

570
00:20:28,320 --> 00:20:29,919
a little bit more

571
00:20:29,919 --> 00:20:31,840
didn't really need lead to nowhere but

572
00:20:31,840 --> 00:20:33,200
frustration

573
00:20:33,200 --> 00:20:35,760
so i said let's get back to my

574
00:20:35,760 --> 00:20:37,840
original research

575
00:20:37,840 --> 00:20:40,159
bypassing the logging mechanisms so i

576
00:20:40,159 --> 00:20:41,840
went back to cloudtrail

577
00:20:41,840 --> 00:20:43,760
i only concluded that blackbox is hard

578
00:20:43,760 --> 00:20:45,360
nothing makes sense and i need to get

579
00:20:45,360 --> 00:20:46,799
back to cloudframe

580
00:20:46,799 --> 00:20:49,200
and i went to cloudtrail and it logs api

581
00:20:49,200 --> 00:20:52,240
calls and i saw this api call

582
00:20:52,240 --> 00:20:54,880
it's a get object to s3

583
00:20:54,880 --> 00:20:57,440
to that blue test bucket slash existed

584
00:20:57,440 --> 00:20:59,039
initiated by cloud formation makes sense

585
00:20:59,039 --> 00:21:00,640
right i told the cloudformation access

586
00:21:00,640 --> 00:21:01,600
this

587
00:21:01,600 --> 00:21:03,280
and it was logged

588
00:21:03,280 --> 00:21:05,919
seems like this is how it works

589
00:21:05,919 --> 00:21:07,520
and then i search for the other log this

590
00:21:07,520 --> 00:21:08,799
is existent remember i tried

591
00:21:08,799 --> 00:21:11,200
non-existent and it gave me an error

592
00:21:11,200 --> 00:21:13,360
i went to the logs and instead of one

593
00:21:13,360 --> 00:21:14,640
log line

594
00:21:14,640 --> 00:21:17,840
i found two log lines

595
00:21:17,840 --> 00:21:18,720
one

596
00:21:18,720 --> 00:21:20,400
makes sense it's called formation same

597
00:21:20,400 --> 00:21:22,960
thing but non-existent

598
00:21:22,960 --> 00:21:25,120
and the other one

599
00:21:25,120 --> 00:21:27,120
was this

600
00:21:27,120 --> 00:21:29,120
same get object non-existent blue test

601
00:21:29,120 --> 00:21:32,080
bucket but an internal ip address and

602
00:21:32,080 --> 00:21:34,000
the user agent was not cloud formation

603
00:21:34,000 --> 00:21:36,480
the user it was apache http client slash

604
00:21:36,480 --> 00:21:38,960
unavailable with the java version

605
00:21:38,960 --> 00:21:40,159
i was like

606
00:21:40,159 --> 00:21:42,240
what is happening here

607
00:21:42,240 --> 00:21:44,080
how does http client know about my

608
00:21:44,080 --> 00:21:46,400
non-existent uh

609
00:21:46,400 --> 00:21:48,640
template that i led cloud formation to

610
00:21:48,640 --> 00:21:50,480
doesn't really make sense so i play with

611
00:21:50,480 --> 00:21:51,600
it more and try to understand the

612
00:21:51,600 --> 00:21:53,039
behavior because again this shouldn't

613
00:21:53,039 --> 00:21:55,360
happen only this log should occur but

614
00:21:55,360 --> 00:21:57,440
both occur

615
00:21:57,440 --> 00:22:00,240
so i understood it's a fallback

616
00:22:00,240 --> 00:22:02,960
and apache http client is

617
00:22:02,960 --> 00:22:06,240
a client written by apache in java

618
00:22:06,240 --> 00:22:08,080
uh pretty basic

619
00:22:08,080 --> 00:22:09,760
and the server-side logic that i

620
00:22:09,760 --> 00:22:11,679
understood goes like this i go to

621
00:22:11,679 --> 00:22:14,080
confirmation pass the url to my template

622
00:22:14,080 --> 00:22:15,679
transformation validates the url and

623
00:22:15,679 --> 00:22:18,000
after it validates it it goes to the s3

624
00:22:18,000 --> 00:22:19,039
bucket

625
00:22:19,039 --> 00:22:20,240
when it fails because it's a

626
00:22:20,240 --> 00:22:22,320
non-existent file

627
00:22:22,320 --> 00:22:24,240
then it goes to apache http client then

628
00:22:24,240 --> 00:22:26,720
apache http client tries to access that

629
00:22:26,720 --> 00:22:27,679
bucket

630
00:22:27,679 --> 00:22:30,080
now if it works cool if it doesn't work

631
00:22:30,080 --> 00:22:32,480
it spits out s3 error

632
00:22:32,480 --> 00:22:34,240
access denied

633
00:22:34,240 --> 00:22:36,159
now i've searched hp client online found

634
00:22:36,159 --> 00:22:40,240
the cve said hooray i can execute code

635
00:22:40,240 --> 00:22:43,200
on http client no this vulnerability

636
00:22:43,200 --> 00:22:46,080
basically says to http client hey parse

637
00:22:46,080 --> 00:22:48,880
this url you'll think you're going to

638
00:22:48,880 --> 00:22:52,559
blue test bucket s3 amazon aws.com

639
00:22:52,559 --> 00:22:54,400
a legit s3 bucket

640
00:22:54,400 --> 00:22:56,039
but you'll actually go to

641
00:22:56,039 --> 00:22:58,480
sockseverdomain.com sounds perfect let's

642
00:22:58,480 --> 00:23:00,480
try if it works i tried it wasn't

643
00:23:00,480 --> 00:23:03,280
working sad face

644
00:23:03,280 --> 00:23:05,600
what else can htp clients do what is my

645
00:23:05,600 --> 00:23:06,960
input

646
00:23:06,960 --> 00:23:08,960
i only give it a url i tried the s

647
00:23:08,960 --> 00:23:10,240
symbol right i tried a vulnerability

648
00:23:10,240 --> 00:23:12,320
with the ad symbol doesn't work what

649
00:23:12,320 --> 00:23:14,080
else the urls have

650
00:23:14,080 --> 00:23:15,600
you know the scheme it

651
00:23:15,600 --> 00:23:17,600
doesn't use it the port doesn't use it

652
00:23:17,600 --> 00:23:20,000
we have url parameters

653
00:23:20,000 --> 00:23:22,240
and aws has common parameters one of

654
00:23:22,240 --> 00:23:24,320
them is xam's security token used to

655
00:23:24,320 --> 00:23:26,799
pass credentials

656
00:23:26,799 --> 00:23:29,600
to aws services to authenticate yourself

657
00:23:29,600 --> 00:23:31,440
you need to use three parameters then

658
00:23:31,440 --> 00:23:33,600
you can incendicate yourself

659
00:23:33,600 --> 00:23:35,039
and i said let's try combining this

660
00:23:35,039 --> 00:23:37,280
parameter inside

661
00:23:37,280 --> 00:23:39,600
of the url url i passed to

662
00:23:39,600 --> 00:23:42,080
cloudformation so i did it

663
00:23:42,080 --> 00:23:44,159
this is the request the api call

664
00:23:44,159 --> 00:23:45,840
blew a test bucket slash non-existent

665
00:23:45,840 --> 00:23:48,080
remember because it only happens

666
00:23:48,080 --> 00:23:51,200
on non-existent i get two logs not one

667
00:23:51,200 --> 00:23:53,120
and i gave it x am z security token

668
00:23:53,120 --> 00:23:55,360
equals a a invalid input now when i

669
00:23:55,360 --> 00:23:57,120
browse to that blue test bucket with

670
00:23:57,120 --> 00:24:00,799
that parameter myself i get xs denied no

671
00:24:00,799 --> 00:24:02,840
aws access key was

672
00:24:02,840 --> 00:24:04,720
presented when i use it in cloud

673
00:24:04,720 --> 00:24:06,720
formation

674
00:24:06,720 --> 00:24:08,240
i got that same thing

675
00:24:08,240 --> 00:24:12,000
s3 error no aws access key was presented

676
00:24:12,000 --> 00:24:13,600
there's some error parsing here that's

677
00:24:13,600 --> 00:24:15,120
what i understood

678
00:24:15,120 --> 00:24:17,200
now this was on the thursday and in

679
00:24:17,200 --> 00:24:20,159
israel most of you know we don't work

680
00:24:20,159 --> 00:24:22,720
friday and saturday me specifically i

681
00:24:22,720 --> 00:24:24,080
might not look the part but i'm an

682
00:24:24,080 --> 00:24:26,640
observant orthodox jew so basically from

683
00:24:26,640 --> 00:24:28,080
friday night to saturday night i don't

684
00:24:28,080 --> 00:24:29,919
write anything i don't type anything

685
00:24:29,919 --> 00:24:31,760
nothing

686
00:24:31,760 --> 00:24:33,679
shabbat shalom

687
00:24:33,679 --> 00:24:35,600
so all i could think of through shabbat

688
00:24:35,600 --> 00:24:37,919
was this error extracted how does it

689
00:24:37,919 --> 00:24:39,760
happen how does it extract errors from

690
00:24:39,760 --> 00:24:43,279
s3 what does http client do

691
00:24:43,279 --> 00:24:45,600
and i was about to take my nap

692
00:24:45,600 --> 00:24:48,640
after saturday lunch i get one hour nap

693
00:24:48,640 --> 00:24:51,279
my beauty sleep and

694
00:24:51,279 --> 00:24:53,520
i only could think of three things one

695
00:24:53,520 --> 00:24:56,240
is sap client parses the error from s3

696
00:24:56,240 --> 00:24:58,960
the other is url parameters do work it's

697
00:24:58,960 --> 00:25:01,039
an actual http client

698
00:25:01,039 --> 00:25:03,120
and this flow is only a fallback right

699
00:25:03,120 --> 00:25:04,960
slash existence doesn't work slash

700
00:25:04,960 --> 00:25:08,559
non-existent http client accesses it so

701
00:25:08,559 --> 00:25:10,320
parsing

702
00:25:10,320 --> 00:25:12,080
parameters fallback parsing parameters

703
00:25:12,080 --> 00:25:13,760
fallback i was just about to go to sleep

704
00:25:13,760 --> 00:25:14,960
and

705
00:25:14,960 --> 00:25:16,960
it hit me

706
00:25:16,960 --> 00:25:18,559
when you start napping but you then come

707
00:25:18,559 --> 00:25:21,279
up with a vulnerability the problem was

708
00:25:21,279 --> 00:25:22,880
again it's about i can't write anything

709
00:25:22,880 --> 00:25:24,320
i can't type anything

710
00:25:24,320 --> 00:25:25,760
i can't go to sleep because i'll forget

711
00:25:25,760 --> 00:25:27,039
it

712
00:25:27,039 --> 00:25:29,919
so i just stayed awake lost sleep stared

713
00:25:29,919 --> 00:25:33,600
at the ceiling and said i need to

714
00:25:33,600 --> 00:25:34,960
remember this vulnerability and i

715
00:25:34,960 --> 00:25:36,640
couldn't say anything to my family you

716
00:25:36,640 --> 00:25:38,400
know remember this about http client

717
00:25:38,400 --> 00:25:39,760
they'll be like who what are you talking

718
00:25:39,760 --> 00:25:41,600
about who's cloud formation who are you

719
00:25:41,600 --> 00:25:43,919
playing with

720
00:25:43,919 --> 00:25:45,039
okay

721
00:25:45,039 --> 00:25:46,960
so what was the idea that there was a

722
00:25:46,960 --> 00:25:50,240
race a race condition

723
00:25:50,240 --> 00:25:52,240
how does the race apply here is cloud

724
00:25:52,240 --> 00:25:53,760
formation normal flow with a tip with

725
00:25:53,760 --> 00:25:56,320
the url right it validates the url goes

726
00:25:56,320 --> 00:25:58,320
to the s3 bucket and fails

727
00:25:58,320 --> 00:26:00,080
now we should access apache

728
00:26:00,080 --> 00:26:02,720
apart you should access the bucket but

729
00:26:02,720 --> 00:26:04,640
say right now

730
00:26:04,640 --> 00:26:07,919
i upload the template to s3 before about

731
00:26:07,919 --> 00:26:09,919
http client access it and then about

732
00:26:09,919 --> 00:26:12,320
http indexes in the bucket

733
00:26:12,320 --> 00:26:14,159
and instead of filing a non-existent

734
00:26:14,159 --> 00:26:17,120
file there is an existing file there and

735
00:26:17,120 --> 00:26:20,240
what does this template or what format

736
00:26:20,240 --> 00:26:21,279
will it be

737
00:26:21,279 --> 00:26:24,159
it'll be the format of an s3 error xs

738
00:26:24,159 --> 00:26:25,840
deny

739
00:26:25,840 --> 00:26:27,600
now two things can happen

740
00:26:27,600 --> 00:26:29,840
either s3

741
00:26:29,840 --> 00:26:31,360
passing to http client and http client

742
00:26:31,360 --> 00:26:33,440
will say okay this is not a cloud

743
00:26:33,440 --> 00:26:34,960
formation template it's not a yaml or

744
00:26:34,960 --> 00:26:36,559
json you're fooling me

745
00:26:36,559 --> 00:26:38,880
unsupported structure remember

746
00:26:38,880 --> 00:26:42,000
or it will say

747
00:26:42,240 --> 00:26:44,400
my error and i tried my own error

748
00:26:44,400 --> 00:26:46,000
document called this is literally my

749
00:26:46,000 --> 00:26:48,320
error and if it spits it out

750
00:26:48,320 --> 00:26:50,320
then this race works right there's

751
00:26:50,320 --> 00:26:51,360
something

752
00:26:51,360 --> 00:26:53,039
to look for here

753
00:26:53,039 --> 00:26:54,799
there's more game

754
00:26:54,799 --> 00:26:56,880
i said let's implement it two things one

755
00:26:56,880 --> 00:26:58,880
is burp intruder every half a second or

756
00:26:58,880 --> 00:26:59,600
so

757
00:26:59,600 --> 00:27:01,360
goes to blue test bucket non-existence

758
00:27:01,360 --> 00:27:04,159
through that api get template summary

759
00:27:04,159 --> 00:27:05,760
and the other thing is the shell script

760
00:27:05,760 --> 00:27:07,600
what does it do instead of uploading an

761
00:27:07,600 --> 00:27:09,039
object because this takes time and we

762
00:27:09,039 --> 00:27:10,559
want to win the race

763
00:27:10,559 --> 00:27:12,480
so i uploaded the object called

764
00:27:12,480 --> 00:27:14,159
non-existent

765
00:27:14,159 --> 00:27:16,400
even though it is existing now and i set

766
00:27:16,400 --> 00:27:19,279
the permissions i set it private

767
00:27:19,279 --> 00:27:21,279
then half a second then public private

768
00:27:21,279 --> 00:27:24,799
public this is the iteration

769
00:27:24,799 --> 00:27:26,559
and i did it

770
00:27:26,559 --> 00:27:27,679
i tried

771
00:27:27,679 --> 00:27:29,039
this is the

772
00:27:29,039 --> 00:27:30,880
shell script saying private public when

773
00:27:30,880 --> 00:27:32,840
it iterates this is the burb

774
00:27:32,840 --> 00:27:36,240
intruder and this is how it went

775
00:27:36,240 --> 00:27:39,200
private public iterates the api

776
00:27:39,200 --> 00:27:42,480
keeps iterating and i should have two

777
00:27:42,480 --> 00:27:45,120
responses one is unsupported structure

778
00:27:45,120 --> 00:27:47,200
when it's public http client reads it

779
00:27:47,200 --> 00:27:50,240
says this is an xml this is not a ammo

780
00:27:50,240 --> 00:27:51,760
or json

781
00:27:51,760 --> 00:27:53,200
on support structure

782
00:27:53,200 --> 00:27:55,679
the other thing is when it is private

783
00:27:55,679 --> 00:27:57,600
and http client reads it what i should

784
00:27:57,600 --> 00:27:59,520
get is a nexus deny because it's private

785
00:27:59,520 --> 00:28:02,320
http client can't read it these are the

786
00:28:02,320 --> 00:28:05,200
two errors i should receive

787
00:28:05,200 --> 00:28:07,279
if the race doesn't work

788
00:28:07,279 --> 00:28:10,240
but if it does work

789
00:28:10,880 --> 00:28:12,720
and it did work

790
00:28:12,720 --> 00:28:15,520
s3 error this is literally

791
00:28:15,520 --> 00:28:18,240
my error

792
00:28:21,600 --> 00:28:22,799
this point

793
00:28:22,799 --> 00:28:26,799
i was like wow this is literally working

794
00:28:26,799 --> 00:28:28,559
i came up with something i lost sleep

795
00:28:28,559 --> 00:28:31,440
over it but it was worth it or was it

796
00:28:31,440 --> 00:28:32,559
i mean

797
00:28:32,559 --> 00:28:34,559
i only give it an input and i can

798
00:28:34,559 --> 00:28:36,000
control the output a little bit but what

799
00:28:36,000 --> 00:28:37,840
does http kind of parse right it passes

800
00:28:37,840 --> 00:28:41,039
the s3 response looking like this

801
00:28:41,039 --> 00:28:42,799
and what format is that can someone tell

802
00:28:42,799 --> 00:28:44,480
me

803
00:28:44,480 --> 00:28:46,000
it's an xml

804
00:28:46,000 --> 00:28:49,600
and why are xml parsers so interesting

805
00:28:49,600 --> 00:28:52,159
so there's this thing called xxc some of

806
00:28:52,159 --> 00:28:54,159
you may know it

807
00:28:54,159 --> 00:28:55,760
now a normal xml document has a root

808
00:28:55,760 --> 00:28:58,000
element as a children element and can

809
00:28:58,000 --> 00:29:00,000
have attributes doesn't matter we can

810
00:29:00,000 --> 00:29:01,039
have text

811
00:29:01,039 --> 00:29:03,679
when this is rendered it's just aaa

812
00:29:03,679 --> 00:29:06,080
right the text inside of it

813
00:29:06,080 --> 00:29:08,240
now there's a thing called xml entities

814
00:29:08,240 --> 00:29:10,320
if for example i want to use lower than

815
00:29:10,320 --> 00:29:12,240
symbol or greater than symbol they mean

816
00:29:12,240 --> 00:29:14,399
things in xml so i need to encode them

817
00:29:14,399 --> 00:29:15,840
how do i encode them for example

818
00:29:15,840 --> 00:29:19,360
ampersand lt semicolon lt lower then i

819
00:29:19,360 --> 00:29:22,240
get the lower than symbol a lower than b

820
00:29:22,240 --> 00:29:23,520
good

821
00:29:23,520 --> 00:29:26,080
now i can define my own xml entities for

822
00:29:26,080 --> 00:29:27,760
example

823
00:29:27,760 --> 00:29:29,919
if i wanted to use my name in an article

824
00:29:29,919 --> 00:29:31,760
or whatever i can define the entity in

825
00:29:31,760 --> 00:29:33,919
me called pagima if i want to be a

826
00:29:33,919 --> 00:29:36,080
rapper i can define this entity called

827
00:29:36,080 --> 00:29:37,520
mc

828
00:29:37,520 --> 00:29:40,240
containing obviously the most renowned

829
00:29:40,240 --> 00:29:41,840
world in the rep

830
00:29:41,840 --> 00:29:43,919
in the rap culture which is chika chika

831
00:29:43,919 --> 00:29:46,159
and then i can render this to be hi my

832
00:29:46,159 --> 00:29:48,720
name is chikachika

833
00:29:48,720 --> 00:29:49,919
nice

834
00:29:49,919 --> 00:29:51,120
why is this so interesting for a

835
00:29:51,120 --> 00:29:52,880
vulnerability there's this thing called

836
00:29:52,880 --> 00:29:56,880
external entities you can borrow a file

837
00:29:56,880 --> 00:29:58,559
for defining your own

838
00:29:58,559 --> 00:30:00,880
externality so this is why it's called

839
00:30:00,880 --> 00:30:03,600
xml external entity xxe in this case

840
00:30:03,600 --> 00:30:05,360
nothing to see here not malicious it's

841
00:30:05,360 --> 00:30:08,399
an entity i added the word system and

842
00:30:08,399 --> 00:30:09,919
instead of this being a string it's a

843
00:30:09,919 --> 00:30:12,240
url it goes to that url fetches the

844
00:30:12,240 --> 00:30:13,039
string

845
00:30:13,039 --> 00:30:14,640
puts it

846
00:30:14,640 --> 00:30:16,399
in my

847
00:30:16,399 --> 00:30:18,480
xml document

848
00:30:18,480 --> 00:30:19,360
now

849
00:30:19,360 --> 00:30:21,279
we know the http client does parse xml

850
00:30:21,279 --> 00:30:22,880
we know that some xml parsers are

851
00:30:22,880 --> 00:30:24,720
vulnerable to x60 it's not always you

852
00:30:24,720 --> 00:30:26,960
can configure it

853
00:30:26,960 --> 00:30:28,720
i wanted to give it a shot and i gave it

854
00:30:28,720 --> 00:30:31,760
a shot and i ran verb intruder right web

855
00:30:31,760 --> 00:30:34,559
intruder with my script

856
00:30:34,559 --> 00:30:37,840
and this is what i got

857
00:30:41,679 --> 00:30:44,880
s3 error roots etc you can understand

858
00:30:44,880 --> 00:30:47,760
you can get the hang of it and this is

859
00:30:47,760 --> 00:30:49,360
censored because there were a lot of

860
00:30:49,360 --> 00:30:50,559
users here

861
00:30:50,559 --> 00:30:51,840
and when we searched them on linkedin

862
00:30:51,840 --> 00:30:53,919
and google they were they were aws

863
00:30:53,919 --> 00:30:56,960
employees so uh we had to censor it

864
00:30:56,960 --> 00:30:58,320
at this point i was filled with joy i

865
00:30:58,320 --> 00:31:00,399
was jumping in my place and i was like

866
00:31:00,399 --> 00:31:03,360
this is amazing but one thing i did not

867
00:31:03,360 --> 00:31:05,039
say i need to say

868
00:31:05,039 --> 00:31:07,760
i'm not racist

869
00:31:07,919 --> 00:31:10,640
i mean i love races but they're not that

870
00:31:10,640 --> 00:31:13,519
practical right 25 to 30 requests for

871
00:31:13,519 --> 00:31:15,679
one leak racist race conditions are not

872
00:31:15,679 --> 00:31:17,679
that practical

873
00:31:17,679 --> 00:31:18,960
so i said

874
00:31:18,960 --> 00:31:20,480
what can i do

875
00:31:20,480 --> 00:31:22,240
to maybe create

876
00:31:22,240 --> 00:31:25,200
one shot one kill one request

877
00:31:25,200 --> 00:31:28,000
read a file not 28 requests not 30

878
00:31:28,000 --> 00:31:30,840
requests not whatever one request one

879
00:31:30,840 --> 00:31:33,600
file and long story short you can do it

880
00:31:33,600 --> 00:31:35,679
it's a feature called bucket policies in

881
00:31:35,679 --> 00:31:37,679
s3 you can create and configure bucket

882
00:31:37,679 --> 00:31:39,360
policies to grant permissions to your

883
00:31:39,360 --> 00:31:41,360
amazon s3 resources

884
00:31:41,360 --> 00:31:42,720
put this

885
00:31:42,720 --> 00:31:45,120
policy in your bucket basically denying

886
00:31:45,120 --> 00:31:47,440
all access for from people not having

887
00:31:47,440 --> 00:31:50,399
the user the words http client in their

888
00:31:50,399 --> 00:31:52,399
user agent or rather if we go the

889
00:31:52,399 --> 00:31:54,880
negative way then only people with http

890
00:31:54,880 --> 00:31:56,720
client in their user agent can access my

891
00:31:56,720 --> 00:31:58,559
bucket

892
00:31:58,559 --> 00:32:01,440
and then what happens here is same flow

893
00:32:01,440 --> 00:32:04,799
but instead of arrays i start with

894
00:32:04,799 --> 00:32:06,559
contacting the s3 bucket i give it my

895
00:32:06,559 --> 00:32:08,640
file called non-existent looking like an

896
00:32:08,640 --> 00:32:11,360
s3 error payload with an xxc and i give

897
00:32:11,360 --> 00:32:13,039
it a policy the policy sort of puts a

898
00:32:13,039 --> 00:32:15,039
lock on the bucket ix is confirmation

899
00:32:15,039 --> 00:32:17,600
with url it accesses the bucket fails

900
00:32:17,600 --> 00:32:19,360
the bucket is locked right

901
00:32:19,360 --> 00:32:21,519
then it accesses apache http client

902
00:32:21,519 --> 00:32:22,320
which

903
00:32:22,320 --> 00:32:24,880
coincidentally has the key unknowingly

904
00:32:24,880 --> 00:32:27,039
right because it doesn't know about this

905
00:32:27,039 --> 00:32:30,080
concept but his user agent contains http

906
00:32:30,080 --> 00:32:32,320
client the lock is removed everyone's

907
00:32:32,320 --> 00:32:34,320
happy and in action

908
00:32:34,320 --> 00:32:36,720
it looks something like this i create a

909
00:32:36,720 --> 00:32:37,840
bucket

910
00:32:37,840 --> 00:32:40,000
i upload the policy right to it one

911
00:32:40,000 --> 00:32:44,480
request the api and boom

912
00:32:50,399 --> 00:32:51,679
now this is

913
00:32:51,679 --> 00:32:52,880
all good

914
00:32:52,880 --> 00:32:55,039
but what can we really do so we know we

915
00:32:55,039 --> 00:32:57,039
can read files this is what we did right

916
00:32:57,039 --> 00:32:58,000
now

917
00:32:58,000 --> 00:33:00,399
when you try to read a directory

918
00:33:00,399 --> 00:33:03,440
i tried i think i did it accidentally

919
00:33:03,440 --> 00:33:06,080
uk directory listing so this is good

920
00:33:06,080 --> 00:33:08,080
thanks to apache exercises 2 which is

921
00:33:08,080 --> 00:33:11,120
the xml parser they're using in java

922
00:33:11,120 --> 00:33:12,399
so we have directory listing we have

923
00:33:12,399 --> 00:33:14,799
file read and we have an srf why

924
00:33:14,799 --> 00:33:17,519
remember this is url right now it's url

925
00:33:17,519 --> 00:33:18,880
to a file

926
00:33:18,880 --> 00:33:21,760
but it can also be an http or https url

927
00:33:21,760 --> 00:33:23,919
and why is that interesting in the cloud

928
00:33:23,919 --> 00:33:26,080
again

929
00:33:26,080 --> 00:33:28,320
imds we talked about it remember capital

930
00:33:28,320 --> 00:33:30,240
one

931
00:33:30,240 --> 00:33:33,200
now one thing i did not

932
00:33:33,200 --> 00:33:35,039
tell you about imds there's this thing

933
00:33:35,039 --> 00:33:37,120
called ids v2

934
00:33:37,120 --> 00:33:39,279
aws saw the capital one incident and

935
00:33:39,279 --> 00:33:40,720
they said okay you know what maybe

936
00:33:40,720 --> 00:33:42,240
something here is

937
00:33:42,240 --> 00:33:44,159
not very good

938
00:33:44,159 --> 00:33:47,200
one ssrf can the credentials can do all

939
00:33:47,200 --> 00:33:48,880
that things

940
00:33:48,880 --> 00:33:50,399
how could prevent prevent it they

941
00:33:50,399 --> 00:33:52,159
created v2

942
00:33:52,159 --> 00:33:53,440
most of the serifs are just a get

943
00:33:53,440 --> 00:33:55,760
request one request you get a response

944
00:33:55,760 --> 00:33:58,240
now they said imds you can't just pull

945
00:33:58,240 --> 00:34:00,240
off a get request you need to make a put

946
00:34:00,240 --> 00:34:02,559
request with a certain header then get

947
00:34:02,559 --> 00:34:04,720
the response then

948
00:34:04,720 --> 00:34:07,919
only then you need to use that token and

949
00:34:07,919 --> 00:34:12,079
do a get request basically 99.9 of srs

950
00:34:12,079 --> 00:34:14,239
are unusable

951
00:34:14,239 --> 00:34:16,239
and to enable this or rather it's always

952
00:34:16,239 --> 00:34:18,159
enabled to disable ids v1 because

953
00:34:18,159 --> 00:34:20,879
they're both enabled

954
00:34:20,879 --> 00:34:23,119
you need to just click this right

955
00:34:23,119 --> 00:34:24,639
they say that you want disabled

956
00:34:24,639 --> 00:34:26,399
obviously aws will do it because they

957
00:34:26,399 --> 00:34:28,719
have an article called that use idsd2

958
00:34:28,719 --> 00:34:30,000
and they also

959
00:34:30,000 --> 00:34:33,040
strongly recommend adopting v2 and

960
00:34:33,040 --> 00:34:35,599
restricting access to v2 only for added

961
00:34:35,599 --> 00:34:37,679
security makes sense i said

962
00:34:37,679 --> 00:34:40,320
i can try this let's see what happens

963
00:34:40,320 --> 00:34:42,639
nothing to lose this shouldn't work

964
00:34:42,639 --> 00:34:44,320
shouldn't return any response because

965
00:34:44,320 --> 00:34:46,320
i'm this v2 should be enabled

966
00:34:46,320 --> 00:34:49,040
but

967
00:34:49,040 --> 00:34:52,079
it does return a response

968
00:34:52,079 --> 00:34:55,359
so okay uh aws recommends ibs v2 they

969
00:34:55,359 --> 00:34:56,719
are using it but they're also using

970
00:34:56,719 --> 00:34:58,800
idsv1 basically

971
00:34:58,800 --> 00:35:00,240
doesn't do anything

972
00:35:00,240 --> 00:35:03,359
happy hanukkah

973
00:35:03,359 --> 00:35:05,359
now this is only data about the ac2

974
00:35:05,359 --> 00:35:07,359
instance that we were using

975
00:35:07,359 --> 00:35:10,320
um we also found credentials identifying

976
00:35:10,320 --> 00:35:12,079
that instance you can enjoy the word

977
00:35:12,079 --> 00:35:14,800
code success because we had to censor it

978
00:35:14,800 --> 00:35:16,800
and we took these credentials used them

979
00:35:16,800 --> 00:35:19,760
to access mys3 bucket to see in the logs

980
00:35:19,760 --> 00:35:23,839
who accessed my s3 bucket i did it

981
00:35:23,839 --> 00:35:26,160
and it was aws service

982
00:35:26,160 --> 00:35:30,320
invoked by aws internal

983
00:35:30,320 --> 00:35:31,680
pretty good

984
00:35:31,680 --> 00:35:33,839
now this is not cloud formation but

985
00:35:33,839 --> 00:35:34,720
still

986
00:35:34,720 --> 00:35:38,000
in aws service it was kind of

987
00:35:38,000 --> 00:35:39,200
kind of

988
00:35:39,200 --> 00:35:40,800
weird weird to us we saw this and we're

989
00:35:40,800 --> 00:35:43,520
really excited and wanted to explore

990
00:35:43,520 --> 00:35:44,400
further

991
00:35:44,400 --> 00:35:45,280
but

992
00:35:45,280 --> 00:35:47,119
we stopped here because we need to have

993
00:35:47,119 --> 00:35:48,960
responsible disclosure we need close to

994
00:35:48,960 --> 00:35:51,599
aws and props to them because in 25

995
00:35:51,599 --> 00:35:53,440
hours they deployed the first patch 25

996
00:35:53,440 --> 00:35:55,680
hours since we sent our email

997
00:35:55,680 --> 00:35:57,280
and it was fully patched in all of the

998
00:35:57,280 --> 00:36:00,000
regions in six days so props to aws

999
00:36:00,000 --> 00:36:01,920
and if we want to talk about maybe

1000
00:36:01,920 --> 00:36:03,920
further elevation what we could have

1001
00:36:03,920 --> 00:36:05,839
done with this so again i want to

1002
00:36:05,839 --> 00:36:07,119
emphasize these were not cloud

1003
00:36:07,119 --> 00:36:08,400
formations credentials they were

1004
00:36:08,400 --> 00:36:10,320
identifying a machine as a part of the

1005
00:36:10,320 --> 00:36:11,359
service of

1006
00:36:11,359 --> 00:36:12,800
cloudformation

1007
00:36:12,800 --> 00:36:14,240
and we didn't explore much further what

1008
00:36:14,240 --> 00:36:16,560
we did find were internal configuration

1009
00:36:16,560 --> 00:36:18,560
files evidence for internal services

1010
00:36:18,560 --> 00:36:20,079
internal credentials

1011
00:36:20,079 --> 00:36:21,359
basically

1012
00:36:21,359 --> 00:36:23,280
this and superglue which is the research

1013
00:36:23,280 --> 00:36:25,920
done by yanir tsurimi from my team at

1014
00:36:25,920 --> 00:36:28,240
orca which is a service takeover highly

1015
00:36:28,240 --> 00:36:30,640
recommend reading about that uh we do

1016
00:36:30,640 --> 00:36:32,560
believe that an escalation of this to an

1017
00:36:32,560 --> 00:36:34,960
rc if we would have continued

1018
00:36:34,960 --> 00:36:38,240
could have led or rather would have led

1019
00:36:38,240 --> 00:36:42,240
to severe cross-tenant violation

1020
00:36:42,240 --> 00:36:43,520
okay

1021
00:36:43,520 --> 00:36:45,200
we also validate the fix i won't get

1022
00:36:45,200 --> 00:36:46,720
much to it we don't have much time but

1023
00:36:46,720 --> 00:36:47,920
you can find in our technical blog it's

1024
00:36:47,920 --> 00:36:50,560
not tomorrow sorry it'll be probably

1025
00:36:50,560 --> 00:36:53,119
next week

1026
00:36:53,440 --> 00:36:55,920
and some takeaways i'd say so we have

1027
00:36:55,920 --> 00:36:58,079
three takeaways maybe a bonus one one is

1028
00:36:58,079 --> 00:36:59,520
black boxes hard

1029
00:36:59,520 --> 00:37:01,040
i think you concluded that a lot of

1030
00:37:01,040 --> 00:37:02,000
speculating you don't know what

1031
00:37:02,000 --> 00:37:03,359
happening what's happening behind the

1032
00:37:03,359 --> 00:37:05,280
scenes the other is logical

1033
00:37:05,280 --> 00:37:06,720
vulnerabilities

1034
00:37:06,720 --> 00:37:09,040
are a thing right even though you don't

1035
00:37:09,040 --> 00:37:10,800
have any source code

1036
00:37:10,800 --> 00:37:12,480
it's only you versus an api you can

1037
00:37:12,480 --> 00:37:14,000
still find logical vulnerabilities which

1038
00:37:14,000 --> 00:37:15,359
is pretty cool

1039
00:37:15,359 --> 00:37:17,680
and no platform is infallible but i

1040
00:37:17,680 --> 00:37:19,839
would say the cloud is more secure

1041
00:37:19,839 --> 00:37:21,680
nowhere in the software world for

1042
00:37:21,680 --> 00:37:22,880
example look at the block for j

1043
00:37:22,880 --> 00:37:24,800
vulnerability you can never close it

1044
00:37:24,800 --> 00:37:28,400
within six days in every instance here

1045
00:37:28,400 --> 00:37:29,680
one deploy

1046
00:37:29,680 --> 00:37:32,160
one patch six days everything is closed

1047
00:37:32,160 --> 00:37:34,400
everything's good now we published this

1048
00:37:34,400 --> 00:37:36,079
on twitter we had fighter jets in our

1049
00:37:36,079 --> 00:37:37,119
logo

1050
00:37:37,119 --> 00:37:38,560
breaking formation right like a

1051
00:37:38,560 --> 00:37:39,599
structure

1052
00:37:39,599 --> 00:37:40,640
and

1053
00:37:40,640 --> 00:37:44,640
twitter sensors that's us basically

1054
00:37:44,640 --> 00:37:45,920
this is what we got

1055
00:37:45,920 --> 00:37:47,599
for the for the first week of the first

1056
00:37:47,599 --> 00:37:49,680
few days twitter doesn't like fighter

1057
00:37:49,680 --> 00:37:52,480
jets that's the next takeaway

1058
00:37:52,480 --> 00:37:53,280
now

1059
00:37:53,280 --> 00:37:55,280
i promise i talk about research avenues

1060
00:37:55,280 --> 00:37:56,480
in the cloud so

1061
00:37:56,480 --> 00:37:58,720
two things i'd say one is services trust

1062
00:37:58,720 --> 00:38:00,480
one another cloud formation didn't

1063
00:38:00,480 --> 00:38:02,880
expect s3 to give it an xml external

1064
00:38:02,880 --> 00:38:04,240
entity inside of the document write a

1065
00:38:04,240 --> 00:38:06,560
malicious xml document doesn't make

1066
00:38:06,560 --> 00:38:08,000
sense so if you have communication

1067
00:38:08,000 --> 00:38:10,000
between two services in the cloud

1068
00:38:10,000 --> 00:38:12,800
generally if you can trick one of them

1069
00:38:12,800 --> 00:38:14,079
this is probably more prone to

1070
00:38:14,079 --> 00:38:15,760
vulnerabilities second thing is fallback

1071
00:38:15,760 --> 00:38:17,599
mechanisms are

1072
00:38:17,599 --> 00:38:20,320
a nice avenue again http client was only

1073
00:38:20,320 --> 00:38:21,599
a fallback happening when it's not

1074
00:38:21,599 --> 00:38:24,480
existent so i would say

1075
00:38:24,480 --> 00:38:26,160
you can look at these things

1076
00:38:26,160 --> 00:38:26,960
and

1077
00:38:26,960 --> 00:38:29,440
more researchers in the cloud would be

1078
00:38:29,440 --> 00:38:30,960
much appreciated because i think more

1079
00:38:30,960 --> 00:38:33,520
manpower generally researching the cloud

1080
00:38:33,520 --> 00:38:35,920
we can find even more exciting things

1081
00:38:35,920 --> 00:38:39,440
and good things are coming soon real

1082
00:38:39,440 --> 00:38:41,920
real nice vulnerabilities in other

1083
00:38:41,920 --> 00:38:44,320
platforms even i would say

1084
00:38:44,320 --> 00:38:46,160
you can look forward to them this is my

1085
00:38:46,160 --> 00:38:47,839
twitter account at saga follow me for

1086
00:38:47,839 --> 00:38:49,200
more information about the next

1087
00:38:49,200 --> 00:38:50,640
vulnerabilities coming out was a

1088
00:38:50,640 --> 00:38:55,640
pleasure to be here thank you so much

1089
00:38:56,100 --> 00:38:59,219
[Music]

1090
00:39:02,100 --> 00:39:04,800
[Music]

1091
00:39:04,800 --> 00:39:06,880
you

