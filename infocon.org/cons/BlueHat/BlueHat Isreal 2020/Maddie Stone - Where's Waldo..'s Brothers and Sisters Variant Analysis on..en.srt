1
00:00:11,590 --> 00:00:16,670
hi in good morning thank you for getting

2
00:00:14,840 --> 00:00:17,869
out of bed and coming first thing in the

3
00:00:16,670 --> 00:00:20,660
morning

4
00:00:17,869 --> 00:00:22,700
and as they said this is where's Waldo's

5
00:00:20,660 --> 00:00:25,730
brothers and sisters and let's talk

6
00:00:22,700 --> 00:00:27,320
about some variant analysis so they

7
00:00:25,730 --> 00:00:29,869
already did a great bio for me that made

8
00:00:27,320 --> 00:00:33,920
me sound way cooler than I could ever

9
00:00:29,869 --> 00:00:36,350
make myself sound but yes as I said I am

10
00:00:33,920 --> 00:00:39,500
a security researcher on Google project

11
00:00:36,350 --> 00:00:41,240
zero but I'm taking a little bit of a

12
00:00:39,500 --> 00:00:43,130
different approach than maybe what

13
00:00:41,240 --> 00:00:45,500
you've heard and seen Google project

14
00:00:43,130 --> 00:00:49,100
zero doing for the last couple of years

15
00:00:45,500 --> 00:00:51,740
my role is I'm focusing on the zero days

16
00:00:49,100 --> 00:00:53,870
used in the wild and seeing what we can

17
00:00:51,740 --> 00:00:57,800
learn from them and then pivoting that

18
00:00:53,870 --> 00:01:00,470
to how do we make zero day hard so with

19
00:00:57,800 --> 00:01:03,980
that my twitter is Maddy stone because

20
00:01:00,470 --> 00:01:05,960
of OPSEC is a good thing right and yeah

21
00:01:03,980 --> 00:01:09,500
that's me so let's get to the actually

22
00:01:05,960 --> 00:01:12,199
interesting stuff this is what we plan

23
00:01:09,500 --> 00:01:12,740
to cover today so first to set some

24
00:01:12,200 --> 00:01:15,469
groundwork

25
00:01:12,740 --> 00:01:16,818
what is variant analysis because there's

26
00:01:15,469 --> 00:01:19,158
a lot of different approaches and

27
00:01:16,819 --> 00:01:22,310
thoughts we can all have when we think

28
00:01:19,159 --> 00:01:24,679
of that term next I'll share with you

29
00:01:22,310 --> 00:01:27,409
why I think it's important and worth

30
00:01:24,679 --> 00:01:30,829
y'all coming in at 10 a.m. to come and

31
00:01:27,409 --> 00:01:33,289
hear about next we'll get into some case

32
00:01:30,829 --> 00:01:35,479
studies so practically what does this

33
00:01:33,289 --> 00:01:37,159
look like we'll cover three different 0

34
00:01:35,479 --> 00:01:38,869
days that have been used in the wild in

35
00:01:37,159 --> 00:01:41,569
the last couple of months and I'll talk

36
00:01:38,869 --> 00:01:44,719
about our methodology for doing that

37
00:01:41,569 --> 00:01:47,420
variant analysis the results from that

38
00:01:44,719 --> 00:01:49,369
variant analysis and the lessons learned

39
00:01:47,420 --> 00:01:51,139
which to me I think are usually the most

40
00:01:49,369 --> 00:01:55,479
important and what we can learn the most

41
00:01:51,139 --> 00:01:58,908
from but first what is variant analysis

42
00:01:55,479 --> 00:01:59,479
so I'm gonna use an example Where's

43
00:01:58,909 --> 00:02:01,819
Waldo

44
00:01:59,479 --> 00:02:04,340
you know children's picture books that

45
00:02:01,819 --> 00:02:06,979
have a lot of these crazy scenes and you

46
00:02:04,340 --> 00:02:09,289
need to find Waldo in this before you

47
00:02:06,979 --> 00:02:12,500
move on to the next challenge I've heard

48
00:02:09,288 --> 00:02:15,319
in Europe they call it Where's Wally but

49
00:02:12,500 --> 00:02:18,739
yeah in the u.s. we used Waldo so you

50
00:02:15,319 --> 00:02:22,488
scan and scan trying in these super busy

51
00:02:18,739 --> 00:02:22,819
pictures to find Waldo and you do there

52
00:02:22,489 --> 00:02:26,209
he

53
00:02:22,819 --> 00:02:28,358
is you're super excited and you won you

54
00:02:26,209 --> 00:02:30,889
found the thing and you want to move on

55
00:02:28,359 --> 00:02:33,049
but what if there's more Waldo's in

56
00:02:30,889 --> 00:02:35,450
there what if you happen to be in the

57
00:02:33,049 --> 00:02:37,999
book with it there are multiple Waldo's

58
00:02:35,450 --> 00:02:39,738
on each certain page you found one and

59
00:02:37,999 --> 00:02:42,680
you moved on and you didn't use the

60
00:02:39,739 --> 00:02:45,650
information you had to continue looking

61
00:02:42,680 --> 00:02:46,909
and what if it's not even a carbon copy

62
00:02:45,650 --> 00:02:50,959
another Waldo

63
00:02:46,909 --> 00:02:54,290
but what if Waldo has brothers sisters

64
00:02:50,959 --> 00:02:58,280
friends who are like him and also need

65
00:02:54,290 --> 00:03:01,189
to be found so in that picture if you

66
00:02:58,280 --> 00:03:03,709
looked closely and kept scanning you'd

67
00:03:01,189 --> 00:03:06,349
also find the character known as odd law

68
00:03:03,709 --> 00:03:09,859
or Waldo backwards who is the villain

69
00:03:06,349 --> 00:03:12,230
version of Waldo I have learned and so

70
00:03:09,859 --> 00:03:15,019
it would have been much much easier to

71
00:03:12,230 --> 00:03:17,869
also find odd law if we took the time to

72
00:03:15,019 --> 00:03:20,689
continue scanning we know odd law likes

73
00:03:17,870 --> 00:03:21,799
to try and track and trick Waldo so it's

74
00:03:20,689 --> 00:03:22,459
probably going to be in the same

75
00:03:21,799 --> 00:03:25,430
vicinity

76
00:03:22,459 --> 00:03:27,590
he has similar characteristics and shirt

77
00:03:25,430 --> 00:03:30,669
and hat and so we can use that

78
00:03:27,590 --> 00:03:34,669
information to also find habla

79
00:03:30,669 --> 00:03:38,090
so that's variant analysis to me we find

80
00:03:34,669 --> 00:03:39,590
a single bug or vulnerability and we use

81
00:03:38,090 --> 00:03:41,540
that characteristics and that

82
00:03:39,590 --> 00:03:43,819
information to then find other

83
00:03:41,540 --> 00:03:46,489
vulnerabilities based on that single one

84
00:03:43,819 --> 00:03:49,339
we have we don't just say it's all good

85
00:03:46,489 --> 00:03:54,349
done move on we found that one bug and

86
00:03:49,340 --> 00:03:57,769
fixed it but why do we care why is this

87
00:03:54,349 --> 00:04:01,189
important because as we all know one of

88
00:03:57,769 --> 00:04:04,669
the most precious resources that any one

89
00:04:01,189 --> 00:04:07,159
has on a security team is their engineer

90
00:04:04,669 --> 00:04:10,129
or they're professionals time no one has

91
00:04:07,159 --> 00:04:13,759
enough we all have plenty of do plenty

92
00:04:10,129 --> 00:04:16,668
to do and not enough people to do it so

93
00:04:13,759 --> 00:04:19,849
first why do we care about variant

94
00:04:16,668 --> 00:04:22,909
analysis is that playing whack-a-mole

95
00:04:19,849 --> 00:04:24,949
which is the game where a mole pops up

96
00:04:22,909 --> 00:04:26,870
use a hammer in your whack it pops up a

97
00:04:24,949 --> 00:04:28,940
different place in your wacky if we keep

98
00:04:26,870 --> 00:04:31,490
doing that one by one for each

99
00:04:28,940 --> 00:04:34,729
vulnerability we will never be able to

100
00:04:31,490 --> 00:04:36,030
handle them all or secure at scale it's

101
00:04:34,729 --> 00:04:39,390
not sustainable

102
00:04:36,030 --> 00:04:41,880
and it's not efficient but if instead we

103
00:04:39,390 --> 00:04:43,950
came up a solution to just say hey no

104
00:04:41,880 --> 00:04:46,020
more moles are able to pop up out of any

105
00:04:43,950 --> 00:04:51,930
of these holes that's obviously a lot

106
00:04:46,020 --> 00:04:54,500
more efficient and also if we think

107
00:04:51,930 --> 00:04:56,340
about this from the attacker mindset of

108
00:04:54,500 --> 00:04:58,560
especially when we're talking about

109
00:04:56,340 --> 00:05:01,140
vulnerabilities that were used in the

110
00:04:58,560 --> 00:05:06,350
wild so they were actively exploited

111
00:05:01,140 --> 00:05:08,789
against users is that researchers are

112
00:05:06,350 --> 00:05:11,940
often finding more than one

113
00:05:08,790 --> 00:05:13,890
vulnerability at a time they are looking

114
00:05:11,940 --> 00:05:16,050
through a set of code that might not

115
00:05:13,890 --> 00:05:18,000
have been audited to begin with so they

116
00:05:16,050 --> 00:05:20,520
found a couple of different issues since

117
00:05:18,000 --> 00:05:22,980
their living breathing eating that block

118
00:05:20,520 --> 00:05:25,200
of code so they have a few they learn a

119
00:05:22,980 --> 00:05:27,420
pattern that then they can quickly scan

120
00:05:25,200 --> 00:05:29,190
a whole code base for so they find a

121
00:05:27,420 --> 00:05:33,090
couple of different places that pattern

122
00:05:29,190 --> 00:05:37,250
exists etc attackers are generally using

123
00:05:33,090 --> 00:05:40,109
the exact same process and skills that

124
00:05:37,250 --> 00:05:42,870
researcher you researchers are using to

125
00:05:40,110 --> 00:05:46,380
find these bugs so it's pretty safe to

126
00:05:42,870 --> 00:05:47,930
say that if researchers continue to find

127
00:05:46,380 --> 00:05:51,060
more than one bug at the same time

128
00:05:47,930 --> 00:05:54,270
attackers can - and we're making it so

129
00:05:51,060 --> 00:05:56,700
much easier for them to continue to

130
00:05:54,270 --> 00:05:59,039
exploit if we're only addressing the one

131
00:05:56,700 --> 00:06:01,140
we see in the wild because then they

132
00:05:59,040 --> 00:06:05,280
have others they can plug and play into

133
00:06:01,140 --> 00:06:08,490
their exploit with very little resources

134
00:06:05,280 --> 00:06:10,530
they have to put into it and the whole

135
00:06:08,490 --> 00:06:12,720
goal is to make zero-day hard that's

136
00:06:10,530 --> 00:06:14,640
always been project zeros mission we're

137
00:06:12,720 --> 00:06:18,180
just now trying a different take on it

138
00:06:14,640 --> 00:06:21,360
with my role there and so we want to

139
00:06:18,180 --> 00:06:24,810
make sure as an industry that in the

140
00:06:21,360 --> 00:06:28,710
failure case when attackers have had one

141
00:06:24,810 --> 00:06:31,080
of their zero day exploits detected and

142
00:06:28,710 --> 00:06:33,239
we have the opportunity as security

143
00:06:31,080 --> 00:06:35,909
professionals to learn as much as

144
00:06:33,240 --> 00:06:38,880
humanly possible as we can we really

145
00:06:35,910 --> 00:06:42,270
take that opportunity to go ahead and

146
00:06:38,880 --> 00:06:44,700
kill as many bugs as possible we come up

147
00:06:42,270 --> 00:06:46,620
with solutions across the board to try

148
00:06:44,700 --> 00:06:49,510
and fix them instead of just addressing

149
00:06:46,620 --> 00:06:52,300
the single one so hope

150
00:06:49,510 --> 00:06:54,370
I have made my case for why this is

151
00:06:52,300 --> 00:06:56,949
worthwhile but let's talk about what

152
00:06:54,370 --> 00:06:59,470
this looks like in practice for three

153
00:06:56,949 --> 00:07:02,800
different zero days that were used in

154
00:06:59,470 --> 00:07:04,900
the fall so the first bug we're gonna

155
00:07:02,800 --> 00:07:05,800
talk about is an Android binder use

156
00:07:04,900 --> 00:07:11,198
after free

157
00:07:05,800 --> 00:07:14,169
it has CBE number 20 19 20 to 15 so

158
00:07:11,199 --> 00:07:16,750
first two level set what's this bug it

159
00:07:14,169 --> 00:07:19,630
is a use after free in the Android

160
00:07:16,750 --> 00:07:25,210
binder driver so in the Android kernel

161
00:07:19,630 --> 00:07:28,000
we're due to a pull Handler using a wait

162
00:07:25,210 --> 00:07:30,669
queue that has not tied to the lifetime

163
00:07:28,000 --> 00:07:34,090
of the file there is this use after

164
00:07:30,669 --> 00:07:37,479
three so to break that down another few

165
00:07:34,090 --> 00:07:40,539
levels if we think of drivers especially

166
00:07:37,479 --> 00:07:42,310
on Android and Linux kernel basically

167
00:07:40,539 --> 00:07:47,860
you have operations being performed on a

168
00:07:42,310 --> 00:07:51,610
file the pull operation is not is using

169
00:07:47,860 --> 00:07:53,530
a structure that is not tied to that

170
00:07:51,610 --> 00:07:56,770
cannot be confirmed it's always alive as

171
00:07:53,530 --> 00:08:00,489
long as that files alive so that's the

172
00:07:56,770 --> 00:08:02,139
nitty-gritty of what this bug is but

173
00:08:00,490 --> 00:08:03,789
there was another important aspect of

174
00:08:02,139 --> 00:08:05,979
this that we need to consider when we

175
00:08:03,789 --> 00:08:08,830
consider how to approach the variant

176
00:08:05,979 --> 00:08:10,360
analysis in this case so this bug was

177
00:08:08,830 --> 00:08:13,930
actually patched in the up scripts

178
00:08:10,360 --> 00:08:16,510
upstream Linux and Android kernels about

179
00:08:13,930 --> 00:08:19,360
18 months prior to then meet finding and

180
00:08:16,510 --> 00:08:21,729
reporting it based on use in the wild

181
00:08:19,360 --> 00:08:24,610
and it was discovered by sis color and

182
00:08:21,729 --> 00:08:26,740
November 2017 and I mention this because

183
00:08:24,610 --> 00:08:28,360
we're gonna talk about today I think

184
00:08:26,740 --> 00:08:30,340
there's a lot more than just the

185
00:08:28,360 --> 00:08:32,589
technical details we need to be

186
00:08:30,340 --> 00:08:37,240
considering when we consider our variant

187
00:08:32,589 --> 00:08:39,159
analysis approaches so this these are

188
00:08:37,240 --> 00:08:43,990
the approaches there were two different

189
00:08:39,159 --> 00:08:46,720
ones the first one is related to how was

190
00:08:43,990 --> 00:08:48,760
this bug found because as we mentioned

191
00:08:46,720 --> 00:08:51,040
you know not only are there technical

192
00:08:48,760 --> 00:08:54,189
details to consider in variant sometimes

193
00:08:51,040 --> 00:08:56,290
the researcher may find bugs that aren't

194
00:08:54,190 --> 00:08:58,240
related to the same technical details

195
00:08:56,290 --> 00:09:00,339
but it's in the same block of code or

196
00:08:58,240 --> 00:09:02,380
can be surfaced in the same way that

197
00:09:00,339 --> 00:09:04,840
they found the other one so

198
00:09:02,380 --> 00:09:07,300
the first approach is looking for bugs

199
00:09:04,840 --> 00:09:10,690
that were patched in the upstream

200
00:09:07,300 --> 00:09:13,630
kernels but were not patched and already

201
00:09:10,690 --> 00:09:17,260
launched Android devices and what I mean

202
00:09:13,630 --> 00:09:19,090
by that is that there's pet they're

203
00:09:17,260 --> 00:09:21,310
patched in the Linux kernel or Android

204
00:09:19,090 --> 00:09:24,040
common kernel but if they are not marked

205
00:09:21,310 --> 00:09:27,069
as security bugs and do not make it into

206
00:09:24,040 --> 00:09:29,439
an Android security bulletin then OPM's

207
00:09:27,070 --> 00:09:31,510
do not know that they need to patch that

208
00:09:29,440 --> 00:09:33,670
an issue a patch or update for the issue

209
00:09:31,510 --> 00:09:36,310
so that was the disconnect of which

210
00:09:33,670 --> 00:09:41,260
devices were affected by this issue to

211
00:09:36,310 --> 00:09:43,209
begin with so this issue that was

212
00:09:41,260 --> 00:09:45,819
exploited in the wild it did affect

213
00:09:43,210 --> 00:09:48,790
pixel 1 and pixel 2 devices but not

214
00:09:45,820 --> 00:09:51,400
pixel 3 devices so I decided one of the

215
00:09:48,790 --> 00:09:54,670
variant analysis approaches was to diff

216
00:09:51,400 --> 00:09:57,069
the pixel twos patch history for the

217
00:09:54,670 --> 00:09:59,469
binder driver with the upstream Linux

218
00:09:57,070 --> 00:10:02,680
kernels patch history for the binder

219
00:09:59,470 --> 00:10:04,570
driver to find what other bugs may have

220
00:10:02,680 --> 00:10:07,229
been missed and that's that variant

221
00:10:04,570 --> 00:10:11,080
analysis approach of focusing on process

222
00:10:07,230 --> 00:10:12,430
the second thing was is that that's

223
00:10:11,080 --> 00:10:14,830
still even though it's doing their own

224
00:10:12,430 --> 00:10:16,989
analysis it's still a piecemeal approach

225
00:10:14,830 --> 00:10:19,570
so if we take a step back and think of

226
00:10:16,990 --> 00:10:21,850
variants how do we try and kill all

227
00:10:19,570 --> 00:10:25,330
variants in this and that would be a

228
00:10:21,850 --> 00:10:27,220
systemic issue of there is a way to find

229
00:10:25,330 --> 00:10:29,080
bugs that are patched in the upstream

230
00:10:27,220 --> 00:10:31,690
and don't make it downstream to devices

231
00:10:29,080 --> 00:10:34,330
and so that's where to address those

232
00:10:31,690 --> 00:10:36,360
types of variants I and others on the

233
00:10:34,330 --> 00:10:39,580
project zero team engaged with the

234
00:10:36,360 --> 00:10:42,010
Android teams about how do we do more

235
00:10:39,580 --> 00:10:45,580
syncing with the upstream kernel so that

236
00:10:42,010 --> 00:10:48,790
these issues as a whole can't happen and

237
00:10:45,580 --> 00:10:50,470
so Android did step up one thing that

238
00:10:48,790 --> 00:10:52,780
was happening and we learned is that one

239
00:10:50,470 --> 00:10:55,270
of the reasons pixel threes were not

240
00:10:52,780 --> 00:10:58,750
affected was that they had already

241
00:10:55,270 --> 00:11:01,240
instituted new upstream for all devices

242
00:10:58,750 --> 00:11:05,050
I think that's the P devices had already

243
00:11:01,240 --> 00:11:07,720
had new upstream syncing requirements

244
00:11:05,050 --> 00:11:11,859
and a month after this issue Android

245
00:11:07,720 --> 00:11:14,380
published new advice and process

246
00:11:11,860 --> 00:11:15,310
information for how all OMS should be

247
00:11:14,380 --> 00:11:19,660
and can be

248
00:11:15,310 --> 00:11:21,969
synching to upstream more often the

249
00:11:19,660 --> 00:11:24,850
second approach is in the nitty-gritty

250
00:11:21,970 --> 00:11:28,240
details of where the technical details

251
00:11:24,850 --> 00:11:30,790
of about how do we look for any of the

252
00:11:28,240 --> 00:11:32,920
drivers that are in the kernel whose

253
00:11:30,790 --> 00:11:36,459
pole handler may use a wait queue that

254
00:11:32,920 --> 00:11:39,969
could be freed prior to the file being

255
00:11:36,460 --> 00:11:43,240
free and so for this what this means in

256
00:11:39,970 --> 00:11:45,550
practice is that here we have the binder

257
00:11:43,240 --> 00:11:47,140
pull function from the binder driver so

258
00:11:45,550 --> 00:11:50,469
this is what's called whenever you want

259
00:11:47,140 --> 00:11:53,170
to call poll on it and what you will see

260
00:11:50,470 --> 00:11:56,110
in here is there's the call to pull wait

261
00:11:53,170 --> 00:11:58,270
the first arguments of poll wait is the

262
00:11:56,110 --> 00:12:01,000
pointer to the file struct for the spy

263
00:11:58,270 --> 00:12:03,880
elaboration the second is the leak cute

264
00:12:01,000 --> 00:12:06,370
that you are using to give to the poll

265
00:12:03,880 --> 00:12:07,990
handler so what we see is in the first

266
00:12:06,370 --> 00:12:10,720
line in this function it's telling us

267
00:12:07,990 --> 00:12:12,910
that the file pointer aka the file we're

268
00:12:10,720 --> 00:12:16,060
performing this operation on is the

269
00:12:12,910 --> 00:12:18,520
binder proc struck however the way cue

270
00:12:16,060 --> 00:12:21,670
that we are sending to the poll handler

271
00:12:18,520 --> 00:12:23,939
is in the binder thread struct the

272
00:12:21,670 --> 00:12:26,170
binder thread struct can be freed

273
00:12:23,940 --> 00:12:29,850
independently of the binder proc and

274
00:12:26,170 --> 00:12:33,550
that's what led to this use after free

275
00:12:29,850 --> 00:12:35,410
so I'm in it I first went through the

276
00:12:33,550 --> 00:12:37,959
Linux 4.4 kernel because that's what the

277
00:12:35,410 --> 00:12:40,900
pixel twos were based off it and I

278
00:12:37,960 --> 00:12:42,640
searched for any file in the Linux

279
00:12:40,900 --> 00:12:45,040
kernel that had calls to pull weight

280
00:12:42,640 --> 00:12:48,160
then I manually went through two hundred

281
00:12:45,040 --> 00:12:51,880
and fourteen of those 236 files checking

282
00:12:48,160 --> 00:12:53,410
to see whether or not the weight cues

283
00:12:51,880 --> 00:12:55,480
that were being passed a pole weight

284
00:12:53,410 --> 00:12:57,939
were tied to the lifetime of the file or

285
00:12:55,480 --> 00:13:00,700
could be independently freed why it's

286
00:12:57,940 --> 00:13:03,130
only 214 out of 236 is there were a

287
00:13:00,700 --> 00:13:06,130
batch of drivers that were not actually

288
00:13:03,130 --> 00:13:10,810
used anywhere or not tied to the arm 64

289
00:13:06,130 --> 00:13:14,709
architecture so the results of this

290
00:13:10,810 --> 00:13:18,819
variant analysis was CVE 20 2000 30

291
00:13:14,709 --> 00:13:21,640
which is called a potential use after

292
00:13:18,820 --> 00:13:24,130
free due to a race condition in the

293
00:13:21,640 --> 00:13:26,500
binder thread release and so this is the

294
00:13:24,130 --> 00:13:29,110
same exact function that the other use

295
00:13:26,500 --> 00:13:31,840
after free was in because it turns

296
00:13:29,110 --> 00:13:34,120
after they implemented the patch in the

297
00:13:31,840 --> 00:13:38,370
upstream Linux kernel for the original

298
00:13:34,120 --> 00:13:40,690
binder bug his color found that patch

299
00:13:38,370 --> 00:13:43,060
introduced a new use after free write

300
00:13:40,690 --> 00:13:44,980
race condition so says color once again

301
00:13:43,060 --> 00:13:48,099
found it implemented that hatch in

302
00:13:44,980 --> 00:13:54,610
February 2018 and so upstream was fix

303
00:13:48,100 --> 00:13:56,260
but downstream was not so that shows us

304
00:13:54,610 --> 00:13:58,029
that you know there are variants that

305
00:13:56,260 --> 00:14:01,270
are associated with process that we need

306
00:13:58,029 --> 00:14:04,330
to be finding and so what that patch

307
00:14:01,270 --> 00:14:07,960
though looked like is you could see in

308
00:14:04,330 --> 00:14:11,410
the Android upstream kernel is if this

309
00:14:07,960 --> 00:14:13,660
top code of I know it's gonna be hard

310
00:14:11,410 --> 00:14:16,480
for y'all as they added a case checks

311
00:14:13,660 --> 00:14:18,010
before they called wake-up call so

312
00:14:16,480 --> 00:14:21,190
they've called pol free before they

313
00:14:18,010 --> 00:14:24,430
freed the thread now they implemented a

314
00:14:21,190 --> 00:14:27,460
call to synchronize RCU to make sure

315
00:14:24,430 --> 00:14:29,949
there was no race condition there and

316
00:14:27,460 --> 00:14:34,720
this is what the race condition was is

317
00:14:29,950 --> 00:14:36,550
that if you tried to delete a binder

318
00:14:34,720 --> 00:14:39,610
thread through the eye octal binder

319
00:14:36,550 --> 00:14:43,180
thread exit while also calling calling

320
00:14:39,610 --> 00:14:47,470
eople CTL del then there was an

321
00:14:43,180 --> 00:14:49,689
opportunity that you could free the

322
00:14:47,470 --> 00:14:52,750
thread when the wake hue was included or

323
00:14:49,690 --> 00:14:54,640
is embedded in the thread struct and yet

324
00:14:52,750 --> 00:14:57,670
it would still be used again in the same

325
00:14:54,640 --> 00:15:00,490
place as the original use after free

326
00:14:57,670 --> 00:15:03,370
here so that's what that raced condition

327
00:15:00,490 --> 00:15:21,490
looked like thankfully Android patched

328
00:15:03,370 --> 00:15:24,790
it on Monday in the February 20 2016 10

329
00:15:21,490 --> 00:15:26,560
she had the vulnerability where the wait

330
00:15:24,790 --> 00:15:28,810
queue that was being passed to the poll

331
00:15:26,560 --> 00:15:32,290
wait handler didn't it was not tied to

332
00:15:28,810 --> 00:15:33,910
the lifetime of the device but when I

333
00:15:32,290 --> 00:15:36,400
started digging into it to try and write

334
00:15:33,910 --> 00:15:38,589
a proof of concept turns out that that

335
00:15:36,400 --> 00:15:40,740
driver had been used in one single

336
00:15:38,589 --> 00:15:43,950
device for a single chip set that was

337
00:15:40,740 --> 00:15:45,660
then deprecated and no longer used so

338
00:15:43,950 --> 00:15:47,730
didn't follow up but all the other

339
00:15:45,660 --> 00:15:52,709
drivers in the linux 4.4 kernel looked

340
00:15:47,730 --> 00:15:54,420
good but lessons learned so I think for

341
00:15:52,709 --> 00:15:56,310
me especially as one of the first cases

342
00:15:54,420 --> 00:16:00,240
of going through this in a very

343
00:15:56,310 --> 00:16:01,589
deliberate man manner was that one we

344
00:16:00,240 --> 00:16:03,810
have to be thinking about variant

345
00:16:01,589 --> 00:16:05,220
analysis more broadly each time I hear

346
00:16:03,810 --> 00:16:08,069
about variant analysis it's usually

347
00:16:05,220 --> 00:16:11,790
about the bug class the exact details of

348
00:16:08,070 --> 00:16:13,740
how the bug technically works but there

349
00:16:11,790 --> 00:16:15,870
are so many other types of variants we

350
00:16:13,740 --> 00:16:18,420
need to be considering and some of the

351
00:16:15,870 --> 00:16:21,000
easiest ones for researchers are to find

352
00:16:18,420 --> 00:16:22,410
are going to also be in the block of

353
00:16:21,000 --> 00:16:24,600
code that they're already studying as

354
00:16:22,410 --> 00:16:29,810
well as things that are surfaced by the

355
00:16:24,600 --> 00:16:32,339
same process so the next point is that

356
00:16:29,810 --> 00:16:33,719
all of us have said this till we're blue

357
00:16:32,339 --> 00:16:36,839
in the face and so I'm not saying

358
00:16:33,720 --> 00:16:39,360
anything new but it keeps happening we

359
00:16:36,839 --> 00:16:42,510
need to be pushing downstream products

360
00:16:39,360 --> 00:16:44,940
to be syncing to upstream more regularly

361
00:16:42,510 --> 00:16:46,890
this case was even shown in a recent

362
00:16:44,940 --> 00:16:50,000
pone to own when some of the Android

363
00:16:46,890 --> 00:16:51,630
round browsers were pwned by

364
00:16:50,000 --> 00:16:54,600
vulnerabilities that had already been

365
00:16:51,630 --> 00:16:56,970
patched in the upstream chromium so they

366
00:16:54,600 --> 00:16:59,660
were known you know but they didn't sink

367
00:16:56,970 --> 00:17:01,950
so those vulnerabilities still worked

368
00:16:59,660 --> 00:17:03,750
lastly I probably should have done

369
00:17:01,950 --> 00:17:06,179
static analysis instead of manually

370
00:17:03,750 --> 00:17:09,349
looking at 200 something doom road

371
00:17:06,179 --> 00:17:13,740
drivers but I didn't I was in that

372
00:17:09,349 --> 00:17:15,119
tunnel vision focus and so sometimes we

373
00:17:13,740 --> 00:17:17,130
need to take a step back and remember

374
00:17:15,119 --> 00:17:19,708
that was probably not the most efficient

375
00:17:17,130 --> 00:17:21,839
there are ways to do variant analysis

376
00:17:19,709 --> 00:17:26,040
and efficient and productive more

377
00:17:21,839 --> 00:17:28,620
productive ways so that was case study

378
00:17:26,040 --> 00:17:29,850
number one a Android binder bug and now

379
00:17:28,620 --> 00:17:33,719
we're gonna move to a whole different

380
00:17:29,850 --> 00:17:38,000
platform this one is a chrome use after

381
00:17:33,720 --> 00:17:40,320
free in the web audio module that was

382
00:17:38,000 --> 00:17:42,540
disclosed and fixed at the end of

383
00:17:40,320 --> 00:17:47,939
October of this year it has the CBE

384
00:17:42,540 --> 00:17:49,168
number so what's the unit use what's the

385
00:17:47,940 --> 00:17:51,090
bug

386
00:17:49,169 --> 00:17:52,980
it's use after free in the web audio

387
00:17:51,090 --> 00:17:55,678
components specifically the file

388
00:17:52,980 --> 00:17:58,169
convolve or node CC and that's within

389
00:17:55,679 --> 00:18:01,559
the blink renderer and it enabled remote

390
00:17:58,169 --> 00:18:03,210
code execution within the render so the

391
00:18:01,559 --> 00:18:07,440
general issue which we'll get into in

392
00:18:03,210 --> 00:18:09,809
more detail is that members of a

393
00:18:07,440 --> 00:18:11,549
structure are used in two different

394
00:18:09,809 --> 00:18:14,369
threads but only one of the threads

395
00:18:11,549 --> 00:18:16,470
actually takes a mutex and so this was

396
00:18:14,369 --> 00:18:19,139
discovered by Kaspersky and they did a

397
00:18:16,470 --> 00:18:21,809
great blog post of it and boris larin

398
00:18:19,139 --> 00:18:26,158
who we get to hear from today is one of

399
00:18:21,809 --> 00:18:29,158
the discoverers of it so more details

400
00:18:26,159 --> 00:18:32,879
what is the bug they use after free is

401
00:18:29,159 --> 00:18:35,149
caused by two different threads the main

402
00:18:32,879 --> 00:18:38,158
thread and the audio renderer thread

403
00:18:35,149 --> 00:18:41,549
operating on the same convolve or node

404
00:18:38,159 --> 00:18:44,369
members at the same time so in the main

405
00:18:41,549 --> 00:18:47,908
thread what we have is if you call set

406
00:18:44,369 --> 00:18:51,720
buffer then the reverb member is freed

407
00:18:47,909 --> 00:18:53,340
and so that's what this code is as I

408
00:18:51,720 --> 00:18:55,139
don't stand in the middle of it what we

409
00:18:53,340 --> 00:18:57,359
have is we have set buffer which is

410
00:18:55,139 --> 00:19:00,418
running the main thread of Chrome and

411
00:18:57,359 --> 00:19:02,070
then or in the renderer and we see at

412
00:19:00,419 --> 00:19:04,649
the beginning of this that there is a

413
00:19:02,070 --> 00:19:07,259
code path where they will free the

414
00:19:04,649 --> 00:19:11,820
reverb member as well as set to null the

415
00:19:07,259 --> 00:19:16,049
shared buffer oh and there's no mutex

416
00:19:11,820 --> 00:19:17,820
taking anywhere in here but then in the

417
00:19:16,049 --> 00:19:19,679
audio rendering thread which can be

418
00:19:17,820 --> 00:19:22,200
triggered through the start rendering

419
00:19:19,679 --> 00:19:26,129
call and that in calling the process

420
00:19:22,200 --> 00:19:28,889
method it uses reverb and so here's the

421
00:19:26,129 --> 00:19:30,988
audio rendering thread call and the

422
00:19:28,889 --> 00:19:33,269
first we think thing we see is that it

423
00:19:30,989 --> 00:19:35,039
does take a mutex and this is what the

424
00:19:33,269 --> 00:19:39,179
code that should have also existed in

425
00:19:35,039 --> 00:19:41,789
set buffer and then it uses reverb

426
00:19:39,179 --> 00:19:43,529
process but and so it looks like it

427
00:19:41,789 --> 00:19:45,330
should be good because you see a mutex

428
00:19:43,529 --> 00:19:47,399
taken and then it operates but the

429
00:19:45,330 --> 00:19:50,820
problem is is that the other side does

430
00:19:47,399 --> 00:19:54,209
not and thus we can use this after it's

431
00:19:50,820 --> 00:19:56,759
been freed so that's the variant

432
00:19:54,210 --> 00:19:59,039
analysis approach my wonderful teammate

433
00:19:56,759 --> 00:20:00,960
Sergei Glazunov was the one who took the

434
00:19:59,039 --> 00:20:02,530
lead on this variant analysis and I

435
00:20:00,960 --> 00:20:05,650
tagged along

436
00:20:02,530 --> 00:20:07,750
he gave me the great feedback of if the

437
00:20:05,650 --> 00:20:09,910
vulnerability can be described in a

438
00:20:07,750 --> 00:20:11,940
single sentence that makes it a great

439
00:20:09,910 --> 00:20:14,830
candidate to use some Oh

440
00:20:11,940 --> 00:20:16,630
what is Cemil it's also I think they

441
00:20:14,830 --> 00:20:19,659
sort of rebranded or renamed as Cote

442
00:20:16,630 --> 00:20:23,320
well they were acquired by github which

443
00:20:19,660 --> 00:20:25,240
is a part of Microsoft so it is a static

444
00:20:23,320 --> 00:20:27,580
analysis platform where you can write

445
00:20:25,240 --> 00:20:32,380
queries to look for certain patterns in

446
00:20:27,580 --> 00:20:35,139
a source code database so what we did is

447
00:20:32,380 --> 00:20:38,380
write a query to search for instances

448
00:20:35,140 --> 00:20:41,860
where there is a member variable used in

449
00:20:38,380 --> 00:20:44,050
two threads but the mutex is only taken

450
00:20:41,860 --> 00:20:46,060
in one so that's what we mean when we

451
00:20:44,050 --> 00:20:48,909
say the bug can be described in a single

452
00:20:46,060 --> 00:20:51,220
sentence it's a simple pattern and so

453
00:20:48,910 --> 00:20:52,930
that makes it much more simple to write

454
00:20:51,220 --> 00:20:58,750
the query for it when you can subscribe

455
00:20:52,930 --> 00:21:01,980
it like that and so the query was run

456
00:20:58,750 --> 00:21:05,140
over the web audio module and it found

457
00:21:01,980 --> 00:21:06,970
23 total results which is great when you

458
00:21:05,140 --> 00:21:08,590
consider a static analysis tool because

459
00:21:06,970 --> 00:21:11,650
you can really that's small enough you

460
00:21:08,590 --> 00:21:13,780
can go through to see which ones are

461
00:21:11,650 --> 00:21:15,730
true positives versus false positives

462
00:21:13,780 --> 00:21:18,760
and in this case there were three two

463
00:21:15,730 --> 00:21:22,360
positives found all within the painter

464
00:21:18,760 --> 00:21:28,830
handler class and so this is the project

465
00:21:22,360 --> 00:21:32,530
0 issue on our tracker 1963 and CVE that

466
00:21:28,830 --> 00:21:35,439
so what he wrote in his report is that

467
00:21:32,530 --> 00:21:37,750
unlike in the original issue the main

468
00:21:35,440 --> 00:21:40,720
read function acquires a lock before

469
00:21:37,750 --> 00:21:43,090
changing the panner pointer but tail

470
00:21:40,720 --> 00:21:46,060
time as well as latency time and

471
00:21:43,090 --> 00:21:50,189
requires tail processing which are

472
00:21:46,060 --> 00:21:54,850
called on the audio thread don't and so

473
00:21:50,190 --> 00:21:57,040
he went on to explain to help the triage

474
00:21:54,850 --> 00:21:58,389
nurse understand it is that usually when

475
00:21:57,040 --> 00:22:00,520
you're calling code through the audio

476
00:21:58,390 --> 00:22:02,380
thread they rely on taking a mutex

477
00:22:00,520 --> 00:22:04,690
through the process function however

478
00:22:02,380 --> 00:22:05,830
these function calls did not go through

479
00:22:04,690 --> 00:22:09,730
that and could be called through other

480
00:22:05,830 --> 00:22:11,110
call paths and the other thing to note

481
00:22:09,730 --> 00:22:13,540
is we sort of have variance of variance

482
00:22:11,110 --> 00:22:15,370
here which we will come back to and talk

483
00:22:13,540 --> 00:22:19,059
about

484
00:22:15,370 --> 00:22:22,360
so CVE this was patched in chrome 79 in

485
00:22:19,059 --> 00:22:25,420
December release but that wasn't the end

486
00:22:22,360 --> 00:22:27,309
of the story because unfortunately after

487
00:22:25,420 --> 00:22:29,890
this was released when Sergey was

488
00:22:27,309 --> 00:22:33,399
looking at the patch he found that it

489
00:22:29,890 --> 00:22:35,920
was not complete when he had reported

490
00:22:33,400 --> 00:22:40,120
the three different functions that were

491
00:22:35,920 --> 00:22:44,230
variants his POC though only called them

492
00:22:40,120 --> 00:22:47,469
through one pass and the patch that the

493
00:22:44,230 --> 00:22:50,650
that chrome issued only covered that

494
00:22:47,470 --> 00:22:52,210
single pass that was in the POC instead

495
00:22:50,650 --> 00:22:54,309
of patching in each of those three

496
00:22:52,210 --> 00:22:56,470
functions they went to the one function

497
00:22:54,309 --> 00:22:58,990
above that and patched it so there was

498
00:22:56,470 --> 00:23:04,270
still another pass into those that did

499
00:22:58,990 --> 00:23:06,610
not take a mutex oh yes I said it so

500
00:23:04,270 --> 00:23:10,120
they passed one code path to those three

501
00:23:06,610 --> 00:23:12,490
functions but not the other so Tuesday

502
00:23:10,120 --> 00:23:14,379
and you know really cutting close with

503
00:23:12,490 --> 00:23:16,660
presentations and really hoping

504
00:23:14,380 --> 00:23:18,820
everything was gonna go right um in

505
00:23:16,660 --> 00:23:21,760
chrome 80 they did do the fix so thank

506
00:23:18,820 --> 00:23:23,950
you to chrome for that but there's a lot

507
00:23:21,760 --> 00:23:26,200
of lessons learned here in this chrome

508
00:23:23,950 --> 00:23:28,360
although they are the focus of this one

509
00:23:26,200 --> 00:23:29,890
they're not the only way we see it and

510
00:23:28,360 --> 00:23:31,360
this is why they're really lessons

511
00:23:29,890 --> 00:23:34,300
learned is because we're seeing a lot of

512
00:23:31,360 --> 00:23:38,139
these same behaviors from different from

513
00:23:34,300 --> 00:23:41,309
vendors across the ecosystem is not

514
00:23:38,140 --> 00:23:44,260
quite but across the world

515
00:23:41,309 --> 00:23:45,990
so one vendors are under a lot of

516
00:23:44,260 --> 00:23:48,100
pressure to get patches out quickly

517
00:23:45,990 --> 00:23:49,960
especially when we're talking zero days

518
00:23:48,100 --> 00:23:53,439
in the wild it's a seven day disclosure

519
00:23:49,960 --> 00:23:55,510
date it's hard and but what that's

520
00:23:53,440 --> 00:23:57,970
meaning is it's often leading to poor

521
00:23:55,510 --> 00:23:59,920
patch quality or not complete for the

522
00:23:57,970 --> 00:24:02,440
bug at hand not complete for all

523
00:23:59,920 --> 00:24:05,590
variants and that's leaving a lot of

524
00:24:02,440 --> 00:24:07,090
openings because the original attackers

525
00:24:05,590 --> 00:24:08,860
already know about that single

526
00:24:07,090 --> 00:24:10,480
vulnerability and of course they're

527
00:24:08,860 --> 00:24:13,000
going to double check what your patches

528
00:24:10,480 --> 00:24:15,070
did and if they already know the details

529
00:24:13,000 --> 00:24:16,720
of their vulnerability it's gonna take a

530
00:24:15,070 --> 00:24:20,649
very minimal amount of time for them to

531
00:24:16,720 --> 00:24:25,360
pivot and then cover the other ones or

532
00:24:20,650 --> 00:24:28,809
use the other ones also what we find a

533
00:24:25,360 --> 00:24:31,090
lot in project zero bug reports is that

534
00:24:28,809 --> 00:24:34,720
our patching to the proof of concept or

535
00:24:31,090 --> 00:24:37,509
POC they just make sure the POC you

536
00:24:34,720 --> 00:24:39,070
submit doesn't work even if you call out

537
00:24:37,509 --> 00:24:41,559
that there are other variants in

538
00:24:39,070 --> 00:24:43,529
addition to the POC and this is hard

539
00:24:41,559 --> 00:24:45,850
from both a researcher and a vendor

540
00:24:43,529 --> 00:24:49,480
standpoint because the POC is a great

541
00:24:45,850 --> 00:24:51,248
way to know did I fix it it's easy you

542
00:24:49,480 --> 00:24:54,009
run it especially if you're moving fast

543
00:24:51,249 --> 00:24:57,519
but from a researcher point of view it's

544
00:24:54,009 --> 00:24:59,860
also hard because how do you write the

545
00:24:57,519 --> 00:25:01,389
code for every single type of variant or

546
00:24:59,860 --> 00:25:03,580
cold path that something could go

547
00:25:01,389 --> 00:25:06,369
through like I don't think a sergei

548
00:25:03,580 --> 00:25:08,259
expected chrome to try and patch a level

549
00:25:06,369 --> 00:25:10,840
above the function calls he'd mentioned

550
00:25:08,259 --> 00:25:13,059
I think he would expect them to be

551
00:25:10,840 --> 00:25:15,428
patched but then chrome saw another

552
00:25:13,059 --> 00:25:18,899
opportunity so I think what this means

553
00:25:15,429 --> 00:25:22,840
for us is as researchers submitting bugs

554
00:25:18,899 --> 00:25:23,830
it's good an apologist specifically call

555
00:25:22,840 --> 00:25:26,830
out in the report

556
00:25:23,830 --> 00:25:29,199
hey this puck is written for this it

557
00:25:26,830 --> 00:25:34,480
will not test and you need to look into

558
00:25:29,200 --> 00:25:37,509
X Y & Z as well but one of the cool

559
00:25:34,480 --> 00:25:40,389
things is I don't know if in your realms

560
00:25:37,509 --> 00:25:43,840
as well static analysis can get a really

561
00:25:40,389 --> 00:25:46,209
bad rap among researchers especially for

562
00:25:43,840 --> 00:25:49,090
its noise to rhythm sound to noise ratio

563
00:25:46,210 --> 00:25:50,440
but in this case it worked well and I

564
00:25:49,090 --> 00:25:53,408
think a couple of the reasons why it

565
00:25:50,440 --> 00:25:55,990
works so well is one only using it for a

566
00:25:53,409 --> 00:25:57,249
case where you could clearly define what

567
00:25:55,990 --> 00:26:00,190
the bug and what the pattern you're

568
00:25:57,249 --> 00:26:02,559
looking for is in second running it over

569
00:26:00,190 --> 00:26:04,440
one module on the time so instead of

570
00:26:02,559 --> 00:26:08,619
running it across all of the chromium

571
00:26:04,440 --> 00:26:12,190
database we ran it over web ma audio

572
00:26:08,619 --> 00:26:14,649
module than each other module by itself

573
00:26:12,190 --> 00:26:16,600
which leaves the results makes the

574
00:26:14,649 --> 00:26:18,459
results much simpler to sort through to

575
00:26:16,600 --> 00:26:22,689
figure out true positives from false

576
00:26:18,460 --> 00:26:25,869
positives so that's our chrome case

577
00:26:22,690 --> 00:26:28,749
study so the last one we're going to

578
00:26:25,869 --> 00:26:30,220
wrap up it is a bug that is an Internet

579
00:26:28,749 --> 00:26:33,429
Explorer's jscript

580
00:26:30,220 --> 00:26:36,249
and so it sort of has two different CVEs

581
00:26:33,429 --> 00:26:40,809
which I'll talk about as we cover this

582
00:26:36,249 --> 00:26:43,059
so first about the bone it's a bug class

583
00:26:40,809 --> 00:26:45,460
we're a jscript variable which is

584
00:26:43,059 --> 00:26:47,110
represented as a VAR struct isn't

585
00:26:45,460 --> 00:26:50,980
properly tracked by the garbage

586
00:26:47,110 --> 00:26:53,320
collector and so I'm gonna go through a

587
00:26:50,980 --> 00:26:58,509
whole timeline of this bug class in

588
00:26:53,320 --> 00:27:01,749
January 2018 multiple bugs were reported

589
00:26:58,509 --> 00:27:06,330
from project zero to Microsoft about

590
00:27:01,749 --> 00:27:08,860
this bug class they also open sourced a

591
00:27:06,330 --> 00:27:14,678
buzzer for to find some of these types

592
00:27:08,860 --> 00:27:17,469
of bugs in December 2018 tagged Google's

593
00:27:14,679 --> 00:27:20,919
threat analysis group discovered a few

594
00:27:17,470 --> 00:27:21,419
first bug of this buck class used in the

595
00:27:20,919 --> 00:27:24,159
wild

596
00:27:21,419 --> 00:27:26,320
remember that's 2018 when I've tried to

597
00:27:24,159 --> 00:27:30,129
run this people thought 2019 we'll get

598
00:27:26,320 --> 00:27:33,129
there so this bug could not have been

599
00:27:30,129 --> 00:27:36,639
caught with the buzzer that was open

600
00:27:33,129 --> 00:27:38,049
sourced because it used jscript features

601
00:27:36,639 --> 00:27:42,998
that hadn't been implemented in the

602
00:27:38,049 --> 00:27:47,559
buzzer next in September 2019 there was

603
00:27:42,999 --> 00:27:50,200
another detected use of a zero-day in

604
00:27:47,559 --> 00:27:53,408
the wild using this type of bug class

605
00:27:50,200 --> 00:27:55,539
and this was in this case there were

606
00:27:53,409 --> 00:27:57,999
function arguments that weren't being

607
00:27:55,539 --> 00:28:01,960
tracked by the garbage collector during

608
00:27:57,999 --> 00:28:03,970
the array dots work callback and so this

609
00:28:01,960 --> 00:28:06,639
is the bug words focusing on as the

610
00:28:03,970 --> 00:28:10,690
original bug for this of errant analysis

611
00:28:06,639 --> 00:28:13,389
and so it again was discovered by Clemen

612
00:28:10,690 --> 00:28:15,789
from Google's threat analysis group but

613
00:28:13,389 --> 00:28:18,580
what complicated this was the fix was

614
00:28:15,789 --> 00:28:20,799
then incomplete for the bug when it was

615
00:28:18,580 --> 00:28:23,110
reported and disclosed under the 7-day

616
00:28:20,799 --> 00:28:28,629
in the wild so it was then fixed again

617
00:28:23,110 --> 00:28:31,600
on der this other CBE number so Yvan

618
00:28:28,629 --> 00:28:33,759
French from our project zero team led

619
00:28:31,600 --> 00:28:37,269
the variant analysis on this since he

620
00:28:33,759 --> 00:28:39,519
knew this bug class inside and out so he

621
00:28:37,269 --> 00:28:42,369
took two different approaches to doing

622
00:28:39,519 --> 00:28:43,990
variant analysis for this bug the first

623
00:28:42,369 --> 00:28:46,809
one was manual analysis

624
00:28:43,990 --> 00:28:48,519
he knows this bug class very well so he

625
00:28:46,809 --> 00:28:51,190
went through each of the different

626
00:28:48,519 --> 00:28:53,379
jscript callbacks that he knew about and

627
00:28:51,190 --> 00:28:54,140
manually attempted to free function

628
00:28:53,379 --> 00:28:58,189
arguments and

629
00:28:54,140 --> 00:29:00,170
to them then once he'd done that and he

630
00:28:58,190 --> 00:29:01,580
still wanted to be really sure about

631
00:29:00,170 --> 00:29:02,300
what whether there were any other

632
00:29:01,580 --> 00:29:05,629
variants

633
00:29:02,300 --> 00:29:09,669
he created a buzzer to try and sign

634
00:29:05,630 --> 00:29:14,120
these and he modified the jscript dll

635
00:29:09,670 --> 00:29:16,250
such that freed VARs were modified so

636
00:29:14,120 --> 00:29:19,070
that any access to them after they were

637
00:29:16,250 --> 00:29:20,960
freed would crash immediately and he

638
00:29:19,070 --> 00:29:25,610
also made sure that no freed bars would

639
00:29:20,960 --> 00:29:27,320
be allocated again so the results of

640
00:29:25,610 --> 00:29:29,889
this variant analysis is he found

641
00:29:27,320 --> 00:29:32,570
another bug during the manual review

642
00:29:29,890 --> 00:29:35,750
which is a pretty trivial variant and

643
00:29:32,570 --> 00:29:38,149
not members of the arguments object are

644
00:29:35,750 --> 00:29:41,510
trekked by the garbage collector during

645
00:29:38,150 --> 00:29:43,700
the to JSON callback and so everything

646
00:29:41,510 --> 00:29:46,370
is exactly the same as the original bug

647
00:29:43,700 --> 00:29:48,740
that had been used in the wild except

648
00:29:46,370 --> 00:29:53,449
it's the to JSON call that rather than

649
00:29:48,740 --> 00:29:56,240
that array dot sort callback he then

650
00:29:53,450 --> 00:29:58,790
when he ran the fuzzer what it found was

651
00:29:56,240 --> 00:30:01,430
two different results which were just

652
00:29:58,790 --> 00:30:04,220
the original vulnerability and then this

653
00:30:01,430 --> 00:30:06,650
new variant he had found manually so it

654
00:30:04,220 --> 00:30:10,330
gave some confidence that this was

655
00:30:06,650 --> 00:30:14,540
pretty complete but also their variants

656
00:30:10,330 --> 00:30:16,699
thank you to Microsoft both the fix as

657
00:30:14,540 --> 00:30:20,120
well as the variant was were patched in

658
00:30:16,700 --> 00:30:22,660
the November 2019 of date grouping them

659
00:30:20,120 --> 00:30:26,899
both under that CDE

660
00:30:22,660 --> 00:30:29,600
so lessons learned is more variant

661
00:30:26,900 --> 00:30:32,150
analysis on bug classes when they're

662
00:30:29,600 --> 00:30:36,100
originally reported so each of these

663
00:30:32,150 --> 00:30:39,470
different changes and use in the wilds

664
00:30:36,100 --> 00:30:42,320
were pretty straightforward in the sense

665
00:30:39,470 --> 00:30:45,590
of what is this bug class it's not

666
00:30:42,320 --> 00:30:51,710
tracking arguments through the garbage

667
00:30:45,590 --> 00:30:53,689
collector in callbacks and so that

668
00:30:51,710 --> 00:30:56,840
really gets into variant analysis is I

669
00:30:53,690 --> 00:30:58,910
know that resources are slim but we've

670
00:30:56,840 --> 00:31:02,149
learned about a new bug class when we

671
00:30:58,910 --> 00:31:03,920
find a new vulnerability to take a step

672
00:31:02,150 --> 00:31:06,560
back and think how do I dress this

673
00:31:03,920 --> 00:31:08,270
comprehensively do I have options of how

674
00:31:06,560 --> 00:31:10,460
to address this

675
00:31:08,270 --> 00:31:15,800
so that it's not a one-by-one type of

676
00:31:10,460 --> 00:31:18,170
thing quality and complete patches the

677
00:31:15,800 --> 00:31:19,760
seven-day deadline is hard it's short

678
00:31:18,170 --> 00:31:22,820
but that's because people are being

679
00:31:19,760 --> 00:31:24,950
harmed by exploit use in the wild and so

680
00:31:22,820 --> 00:31:26,360
we need to make sure that in these cases

681
00:31:24,950 --> 00:31:28,130
where attackers already knowing about

682
00:31:26,360 --> 00:31:30,530
them they are they have the tools built

683
00:31:28,130 --> 00:31:34,310
to use them that we make sure all of our

684
00:31:30,530 --> 00:31:36,770
patches are a good of good quality and

685
00:31:34,310 --> 00:31:40,580
complete for even just in the bug that's

686
00:31:36,770 --> 00:31:42,950
a not exploit and this one was hard

687
00:31:40,580 --> 00:31:46,730
because the bug wasn't fixed initially

688
00:31:42,950 --> 00:31:51,200
and that could have been due to trivial

689
00:31:46,730 --> 00:31:53,870
I'm not trivial triaging incorrectly or

690
00:31:51,200 --> 00:31:58,490
what but it also led to a pretty trivial

691
00:31:53,870 --> 00:32:00,229
variant wasn't hatched either and if we

692
00:31:58,490 --> 00:32:02,420
can find that quickly that means people

693
00:32:00,230 --> 00:32:07,040
who are using it can find it probably

694
00:32:02,420 --> 00:32:08,540
even work quickly and lastly one of the

695
00:32:07,040 --> 00:32:12,050
things that could help both in the

696
00:32:08,540 --> 00:32:14,360
chrome case and at Microsoft is if

697
00:32:12,050 --> 00:32:17,000
vendors can use researchers who are

698
00:32:14,360 --> 00:32:20,750
recording to help come up with patches

699
00:32:17,000 --> 00:32:23,090
because the reporter of the the variant

700
00:32:20,750 --> 00:32:25,550
generally knows our reporter of the

701
00:32:23,090 --> 00:32:27,230
initial bug really knows that bug and is

702
00:32:25,550 --> 00:32:29,899
reporting it because we all want them

703
00:32:27,230 --> 00:32:32,510
fixed and protected and things like that

704
00:32:29,900 --> 00:32:34,580
and so I know right now it's tough but

705
00:32:32,510 --> 00:32:37,580
if we can as an industry continue to

706
00:32:34,580 --> 00:32:39,919
grow such that we can share patches back

707
00:32:37,580 --> 00:32:42,620
and forth then before it's what's

708
00:32:39,920 --> 00:32:45,260
launched to users the researchers can

709
00:32:42,620 --> 00:32:46,879
help vendors know is this complete and

710
00:32:45,260 --> 00:32:49,070
is it actually going to fix the problem

711
00:32:46,880 --> 00:32:51,500
or maybe we get this one out and then

712
00:32:49,070 --> 00:32:53,480
quickly try to release these other

713
00:32:51,500 --> 00:32:58,370
couple fixes that can address issues

714
00:32:53,480 --> 00:33:02,000
more comprehensively and oh yeah it kind

715
00:32:58,370 --> 00:33:05,090
of said this but when things are in the

716
00:33:02,000 --> 00:33:07,460
wild we need to try and reduce this line

717
00:33:05,090 --> 00:33:10,669
often between researchers and vendors I

718
00:33:07,460 --> 00:33:12,680
think it's helped that six months ago I

719
00:33:10,670 --> 00:33:14,870
joined the project zero team coming from

720
00:33:12,680 --> 00:33:18,050
working on the Android security team and

721
00:33:14,870 --> 00:33:20,070
so believe me I know it's hard from a

722
00:33:18,050 --> 00:33:21,899
bit vendor

723
00:33:20,070 --> 00:33:24,510
point of view and I worked on the

724
00:33:21,900 --> 00:33:26,669
preloaded apps side so we had 1100

725
00:33:24,510 --> 00:33:28,830
different OEMs trying to vet and ensure

726
00:33:26,669 --> 00:33:32,160
all of their pre-installed apps were

727
00:33:28,830 --> 00:33:34,320
secure and I think that background has

728
00:33:32,160 --> 00:33:36,240
helped to know that we're all trying to

729
00:33:34,320 --> 00:33:38,370
achieve these same goals so if we can

730
00:33:36,240 --> 00:33:40,470
use each other and work together that

731
00:33:38,370 --> 00:33:42,449
makes all of these products better and

732
00:33:40,470 --> 00:33:46,169
more secure to help keep people from

733
00:33:42,450 --> 00:33:48,530
being harmed so with that I have a

734
00:33:46,169 --> 00:33:51,450
couple different takeaways but I hope

735
00:33:48,530 --> 00:33:52,620
you can get across this first there are

736
00:33:51,450 --> 00:33:54,360
a lot of different techniques for

737
00:33:52,620 --> 00:33:58,289
varying it besides just looking at the

738
00:33:54,360 --> 00:34:00,090
our oops jumping ahead there are lots of

739
00:33:58,289 --> 00:34:01,890
different techniques we can use for

740
00:34:00,090 --> 00:34:04,799
doing the variant analysis manual

741
00:34:01,890 --> 00:34:07,440
analysis of reversing source code other

742
00:34:04,799 --> 00:34:10,109
things things like that static analysis

743
00:34:07,440 --> 00:34:12,030
tools have shown to be successful the

744
00:34:10,109 --> 00:34:14,639
more that we're using them and github

745
00:34:12,030 --> 00:34:17,580
security lab based on Twitter seems to

746
00:34:14,639 --> 00:34:21,240
have be having a some good results with

747
00:34:17,580 --> 00:34:23,879
their code queries - buzzing is another

748
00:34:21,239 --> 00:34:27,118
option that tends to work out well I

749
00:34:23,879 --> 00:34:28,949
looked through patch doing histories and

750
00:34:27,119 --> 00:34:31,679
change logs so there's lots of different

751
00:34:28,949 --> 00:34:33,779
ways to approach variant analysis and I

752
00:34:31,679 --> 00:34:36,780
would encourage each of you to think of

753
00:34:33,780 --> 00:34:39,090
which approach fits your need best if we

754
00:34:36,780 --> 00:34:40,800
take a step back consider and consider

755
00:34:39,090 --> 00:34:42,810
what are these variants that we're

756
00:34:40,800 --> 00:34:45,629
trying to find and then decide on the

757
00:34:42,810 --> 00:34:50,070
approach I think that is what turns out

758
00:34:45,629 --> 00:34:52,168
the best and lastly as I was saying

759
00:34:50,070 --> 00:34:54,899
before in jumped ahead let's think about

760
00:34:52,168 --> 00:34:56,790
both the bug class and the details the

761
00:34:54,899 --> 00:34:59,700
technical details of what is this bug

762
00:34:56,790 --> 00:35:01,590
along with the other aspects that can

763
00:34:59,700 --> 00:35:04,109
make it a variant such as how do you

764
00:35:01,590 --> 00:35:07,619
find it where is the code located and

765
00:35:04,109 --> 00:35:11,009
things like that so some of the

766
00:35:07,619 --> 00:35:14,130
takeaways I hope you have or my goal for

767
00:35:11,010 --> 00:35:16,980
the presentation was that patching to a

768
00:35:14,130 --> 00:35:18,960
proof of concept is not sufficient and I

769
00:35:16,980 --> 00:35:20,369
know that's easy especially when you're

770
00:35:18,960 --> 00:35:23,820
blogged down and you have a million

771
00:35:20,369 --> 00:35:26,160
things on your team's to-do list but it

772
00:35:23,820 --> 00:35:28,530
often will not be complete because the

773
00:35:26,160 --> 00:35:31,390
talk is going to be one example of

774
00:35:28,530 --> 00:35:33,820
showing this bug exists

775
00:35:31,390 --> 00:35:36,368
also many times there are trivial

776
00:35:33,820 --> 00:35:39,340
variants identified when doing variant

777
00:35:36,369 --> 00:35:41,530
analysis on 0 days used in the wild to

778
00:35:39,340 --> 00:35:44,440
be honest these were the three the first

779
00:35:41,530 --> 00:35:47,050
3 times we employed variant analysis

780
00:35:44,440 --> 00:35:50,050
since I joined the team and all three of

781
00:35:47,050 --> 00:35:51,700
them showed results and other variants

782
00:35:50,050 --> 00:35:54,010
that we found so I think that's

783
00:35:51,700 --> 00:35:56,618
important yes it's still a small sample

784
00:35:54,010 --> 00:35:59,860
size and I hope to give you more data as

785
00:35:56,619 --> 00:36:02,290
I'm on this team later but 3 out of 3 of

786
00:35:59,860 --> 00:36:06,330
0 days use in the wild had variants

787
00:36:02,290 --> 00:36:08,830
still in our code basis and it's

788
00:36:06,330 --> 00:36:10,630
important the attackers have the

789
00:36:08,830 --> 00:36:13,360
resources and are finding them so even

790
00:36:10,630 --> 00:36:14,920
if we are resource constrained we have

791
00:36:13,360 --> 00:36:18,730
to remember they're not so how do we

792
00:36:14,920 --> 00:36:21,670
protect people so let's break it down

793
00:36:18,730 --> 00:36:24,400
we have a lot of different ways that we

794
00:36:21,670 --> 00:36:26,860
can address this problem first if a

795
00:36:24,400 --> 00:36:29,560
security researcher what can you do in

796
00:36:26,860 --> 00:36:31,480
one is that I know as researchers we're

797
00:36:29,560 --> 00:36:33,610
ready to find that next bug it's

798
00:36:31,480 --> 00:36:36,040
exciting to report we want to move on

799
00:36:33,610 --> 00:36:37,690
we're done looking at the thing but

800
00:36:36,040 --> 00:36:40,480
let's check the patches for the

801
00:36:37,690 --> 00:36:42,970
vulnerability 3 report hopefully we can

802
00:36:40,480 --> 00:36:44,530
continue to grow our relationships with

803
00:36:42,970 --> 00:36:47,529
vendors such that they'll share them

804
00:36:44,530 --> 00:36:50,290
easier but even if they don't you know

805
00:36:47,530 --> 00:36:52,950
this code you know this bug so if you

806
00:36:50,290 --> 00:36:55,690
can go through and check the patch after

807
00:36:52,950 --> 00:36:58,450
the vendor has released it and then

808
00:36:55,690 --> 00:37:00,550
continue reporting the new bug let

809
00:36:58,450 --> 00:37:02,230
people know the patch isn't fixed work

810
00:37:00,550 --> 00:37:05,050
with the vendor to get it actually fixed

811
00:37:02,230 --> 00:37:07,359
that's continuing our process and not

812
00:37:05,050 --> 00:37:10,540
leaving early and leaving things out

813
00:37:07,359 --> 00:37:14,350
there next we need a hold vendors

814
00:37:10,540 --> 00:37:17,560
accountable for variants we need to look

815
00:37:14,350 --> 00:37:19,660
for variants we need to ask them why

816
00:37:17,560 --> 00:37:21,310
they're not being fixed and things like

817
00:37:19,660 --> 00:37:23,830
that and I think one of the important

818
00:37:21,310 --> 00:37:26,470
things we can do is really engage from

819
00:37:23,830 --> 00:37:28,960
our side help the vendor understand how

820
00:37:26,470 --> 00:37:31,689
we found the variance or the bug and not

821
00:37:28,960 --> 00:37:33,190
just what it is because that process

822
00:37:31,690 --> 00:37:34,750
cycle just gives them more and more

823
00:37:33,190 --> 00:37:37,390
information and from my experience

824
00:37:34,750 --> 00:37:39,550
vendors want that they want the extra

825
00:37:37,390 --> 00:37:40,589
information so that they can choose how

826
00:37:39,550 --> 00:37:43,170
to act and use

827
00:37:40,590 --> 00:37:44,970
because most the time you know everyone

828
00:37:43,170 --> 00:37:45,810
wants to fix things and do the best job

829
00:37:44,970 --> 00:37:49,520
they can

830
00:37:45,810 --> 00:37:52,380
and lastly propose ideas for what

831
00:37:49,520 --> 00:37:55,259
comprehensive fixes can look like no

832
00:37:52,380 --> 00:37:57,390
matter how outlandish it may seem

833
00:37:55,260 --> 00:37:58,980
because you never know what they may be

834
00:37:57,390 --> 00:38:01,529
willing to do and if you put that out

835
00:37:58,980 --> 00:38:03,360
there all they can do is decide not to

836
00:38:01,530 --> 00:38:04,710
use it but at least you gave them

837
00:38:03,360 --> 00:38:06,930
options they might not have thought

838
00:38:04,710 --> 00:38:10,920
about of how to kill the bug clasp or

839
00:38:06,930 --> 00:38:16,169
fix things comprehensively vendors what

840
00:38:10,920 --> 00:38:17,460
converse do in this as vendors I was

841
00:38:16,170 --> 00:38:19,170
gonna say we I guess I'm not a better

842
00:38:17,460 --> 00:38:24,270
anymore but it feels it feels more

843
00:38:19,170 --> 00:38:26,430
familial so let's do it as vendors we

844
00:38:24,270 --> 00:38:28,200
need to be taking all the information we

845
00:38:26,430 --> 00:38:31,500
can from the single vulnerability and

846
00:38:28,200 --> 00:38:33,930
use that to then try and make all of our

847
00:38:31,500 --> 00:38:38,490
code more secure and not just try to cut

848
00:38:33,930 --> 00:38:40,560
time cut our solves numbers up in those

849
00:38:38,490 --> 00:38:43,770
type of metrics as quickly as possible

850
00:38:40,560 --> 00:38:45,900
we need to think and brainstorm with our

851
00:38:43,770 --> 00:38:47,940
team members and others how do we fix

852
00:38:45,900 --> 00:38:48,450
this comprehensively so we'll week a

853
00:38:47,940 --> 00:38:50,280
month

854
00:38:48,450 --> 00:38:54,930
of things down the line we're not doing

855
00:38:50,280 --> 00:38:57,480
the same exact thing again vendors can

856
00:38:54,930 --> 00:39:00,299
engage with researchers it would be

857
00:38:57,480 --> 00:39:02,760
really great to share patches or share

858
00:39:00,300 --> 00:39:05,610
ideas of how to patch earlier and it

859
00:39:02,760 --> 00:39:08,550
saves everyone time because you'll know

860
00:39:05,610 --> 00:39:10,470
even earlier before launch if this isn't

861
00:39:08,550 --> 00:39:12,330
going to work instead of weaning for the

862
00:39:10,470 --> 00:39:16,790
launch and then suddenly getting more

863
00:39:12,330 --> 00:39:20,180
bugs filed with you and I know sometimes

864
00:39:16,790 --> 00:39:23,700
time it feels like you can't meet a

865
00:39:20,180 --> 00:39:26,069
disclosure timeline but that's not an

866
00:39:23,700 --> 00:39:29,490
excuse to stop even if you can only

867
00:39:26,070 --> 00:39:32,550
address the original vulnerability in

868
00:39:29,490 --> 00:39:34,439
the 7 days or whatever timeline that

869
00:39:32,550 --> 00:39:36,540
doesn't mean it's time to walk away and

870
00:39:34,440 --> 00:39:38,220
we're done and we close that we still

871
00:39:36,540 --> 00:39:42,470
need to keep working to address that

872
00:39:38,220 --> 00:39:46,890
those variants because other people will

873
00:39:42,470 --> 00:39:48,629
so what does project zero doing we are

874
00:39:46,890 --> 00:39:52,170
working with some of the vendors we

875
00:39:48,630 --> 00:39:53,840
report most often to to engage to review

876
00:39:52,170 --> 00:39:55,850
and suggest other option

877
00:39:53,840 --> 00:39:58,880
for methodologies and implementations

878
00:39:55,850 --> 00:40:02,750
trying to just do more engagement on

879
00:39:58,880 --> 00:40:05,660
that because fixing earlier is easier

880
00:40:02,750 --> 00:40:08,540
cheaper and better for all users which

881
00:40:05,660 --> 00:40:10,730
is pretty big win-win next you might

882
00:40:08,540 --> 00:40:13,790
have seen early January we published a

883
00:40:10,730 --> 00:40:15,680
new disclosure policy which we're

884
00:40:13,790 --> 00:40:17,900
changing our focus from just getting a

885
00:40:15,680 --> 00:40:21,049
patch out as quickly as possible

886
00:40:17,900 --> 00:40:24,860
to also having a focus of quick patches

887
00:40:21,050 --> 00:40:28,070
complete patches and quality patches so

888
00:40:24,860 --> 00:40:30,950
this is from a table of comparing the

889
00:40:28,070 --> 00:40:33,830
previous disclosure policies from 2019

890
00:40:30,950 --> 00:40:36,319
to what we're testing in 2020 it's up on

891
00:40:33,830 --> 00:40:39,290
our blog give it a read if you're

892
00:40:36,320 --> 00:40:41,900
interested and so one of the things I'd

893
00:40:39,290 --> 00:40:43,910
like to highlight is our policy goals of

894
00:40:41,900 --> 00:40:46,580
what the disclosure policy were and

895
00:40:43,910 --> 00:40:52,069
that's what I just said of previously

896
00:40:46,580 --> 00:40:54,500
the 90 days timeline and releasing the

897
00:40:52,070 --> 00:40:57,320
issue right after the patch its whole

898
00:40:54,500 --> 00:40:59,060
goal was to get the industry to more

899
00:40:57,320 --> 00:41:01,490
quickly release patches for

900
00:40:59,060 --> 00:41:05,509
vulnerabilities but we've added a few

901
00:41:01,490 --> 00:41:08,180
more goals based on what we've learned

902
00:41:05,510 --> 00:41:10,100
and that's thorough patch development

903
00:41:08,180 --> 00:41:13,040
the things that fix the underlying

904
00:41:10,100 --> 00:41:18,589
vulnerability and aren't of miss fix as

905
00:41:13,040 --> 00:41:20,240
well as improving patch adoption but the

906
00:41:18,590 --> 00:41:23,320
thing about variant analysis that has

907
00:41:20,240 --> 00:41:26,379
changed in this policy is that

908
00:41:23,320 --> 00:41:30,050
incomplete fixes and variants weren't

909
00:41:26,380 --> 00:41:31,850
explicitly always or weren't explicitly

910
00:41:30,050 --> 00:41:34,250
explained of how we would handle them in

911
00:41:31,850 --> 00:41:36,620
the previous policies but as the team

912
00:41:34,250 --> 00:41:39,050
has continued to move we seen this is a

913
00:41:36,620 --> 00:41:44,000
huge issue that is happening over and

914
00:41:39,050 --> 00:41:46,580
over and over again so now what the

915
00:41:44,000 --> 00:41:49,310
policy States is details of incomplete

916
00:41:46,580 --> 00:41:52,730
fixes will be reported to the vendor and

917
00:41:49,310 --> 00:41:55,210
added to the existing report so in the

918
00:41:52,730 --> 00:41:58,030
project 0 issue tracker it will be

919
00:41:55,210 --> 00:42:01,310
commented that it's an incomplete fix

920
00:41:58,030 --> 00:42:06,590
and it won't receive a new deadline so

921
00:42:01,310 --> 00:42:06,990
if in the 90 days on a vendor a releases

922
00:42:06,590 --> 00:42:10,770
a

923
00:42:06,990 --> 00:42:13,669
spending 50 that actually didn't fix the

924
00:42:10,770 --> 00:42:17,250
vulnerability we will let them know

925
00:42:13,670 --> 00:42:19,110
annotate it in the issue tracker but

926
00:42:17,250 --> 00:42:22,200
there's not another additional 90 days

927
00:42:19,110 --> 00:42:23,910
associated with that because for users

928
00:42:22,200 --> 00:42:27,990
we go how to be fixing these things

929
00:42:23,910 --> 00:42:30,000
correctly and so with that thank you I

930
00:42:27,990 --> 00:42:32,939
appreciate y'all staying and talking

931
00:42:30,000 --> 00:42:35,580
very analysis with me as I said this is

932
00:42:32,940 --> 00:42:38,700
my role of focusing on zero days in the

933
00:42:35,580 --> 00:42:39,869
wild is a new role and it's one of those

934
00:42:38,700 --> 00:42:43,250
things that really requires

935
00:42:39,869 --> 00:42:45,510
collaboration across the spectrum from

936
00:42:43,250 --> 00:42:48,300
organizations who are doing detection

937
00:42:45,510 --> 00:42:51,270
and threat Intel to the vendors and to

938
00:42:48,300 --> 00:42:55,200
us and who are trying to learn as much

939
00:42:51,270 --> 00:42:57,090
as we can as these about the detailed

940
00:42:55,200 --> 00:42:59,730
vulnerability being used in those

941
00:42:57,090 --> 00:43:01,740
exploits so please reach out Maddie

942
00:42:59,730 --> 00:43:05,110
stone on Twitter I'll be hanging out

943
00:43:01,740 --> 00:43:09,638
today love to talk to you and thank you

944
00:43:05,110 --> 00:43:09,639
[Applause]

