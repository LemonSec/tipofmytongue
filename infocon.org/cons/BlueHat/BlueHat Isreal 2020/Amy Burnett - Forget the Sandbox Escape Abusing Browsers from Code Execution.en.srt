1
00:00:11,520 --> 00:00:17,529
all right thank you so much for coming

2
00:00:14,440 --> 00:00:20,590
to my talk so this talk is called forget

3
00:00:17,529 --> 00:00:28,600
this sandbox escape abusing browsers

4
00:00:20,590 --> 00:00:31,539
from code execution so all right so

5
00:00:28,600 --> 00:00:35,949
basically what we're going to be talking

6
00:00:31,539 --> 00:00:37,900
about we can take a browser exploit and

7
00:00:35,949 --> 00:00:39,339
normally you would need a sandbox xscape

8
00:00:37,900 --> 00:00:42,549
so we're going to be trying to look at

9
00:00:39,340 --> 00:00:44,620
ways that we can continue to abuse the

10
00:00:42,549 --> 00:00:48,909
browser without actually needing to

11
00:00:44,620 --> 00:00:51,010
escape the sandbox in the first place so

12
00:00:48,909 --> 00:00:55,239
first look about me my name is Amy

13
00:00:51,010 --> 00:00:58,809
Burnett I am one of the cofounders of

14
00:00:55,239 --> 00:01:01,959
ret to systems I do

15
00:00:58,809 --> 00:01:05,140
vulnerability research specifically

16
00:01:01,960 --> 00:01:07,180
focusing on browsers and looking at

17
00:01:05,140 --> 00:01:09,640
different ways to bypass mitigations and

18
00:01:07,180 --> 00:01:11,110
browsers and I run a browser

19
00:01:09,640 --> 00:01:14,200
exploitation training which I've done a

20
00:01:11,110 --> 00:01:17,850
few times which has been pretty cool

21
00:01:14,200 --> 00:01:22,510
also as I mentioned previously we ran a

22
00:01:17,850 --> 00:01:25,770
entry in pwned own 2018 for Safari so we

23
00:01:22,510 --> 00:01:25,770
would get root on Safari

24
00:01:26,100 --> 00:01:34,810
so the motivation for this talk is that

25
00:01:29,860 --> 00:01:38,289
sandbox escapes are expensive sandbox

26
00:01:34,810 --> 00:01:40,810
escapes is usually the second part of a

27
00:01:38,290 --> 00:01:46,020
chain of exploits that you have for a

28
00:01:40,810 --> 00:01:48,700
browser it will require a second bug in

29
00:01:46,020 --> 00:01:50,800
whatever you're looking at whether it's

30
00:01:48,700 --> 00:01:53,200
the operating system or you're trying to

31
00:01:50,800 --> 00:01:56,320
exploit let's say a system service or

32
00:01:53,200 --> 00:01:59,950
something like that so it can be a lot

33
00:01:56,320 --> 00:02:03,220
of extra X engineering time to find that

34
00:01:59,950 --> 00:02:06,130
bug and then write an exploit for it but

35
00:02:03,220 --> 00:02:08,530
also there's a begin to be a lot of

36
00:02:06,130 --> 00:02:13,269
interesting information that is thorton

37
00:02:08,530 --> 00:02:16,390
entirely within the browser itself for

38
00:02:13,269 --> 00:02:18,790
example you your browser has access to

39
00:02:16,390 --> 00:02:20,470
things like your bank accounts sensitive

40
00:02:18,790 --> 00:02:22,769
documents whether out there on the land

41
00:02:20,470 --> 00:02:26,070
or in the cloud

42
00:02:22,770 --> 00:02:27,990
your email messaging history and it's

43
00:02:26,070 --> 00:02:31,470
also where you download software so this

44
00:02:27,990 --> 00:02:36,300
is a location that you put a lot of

45
00:02:31,470 --> 00:02:38,910
trust in to the browser I'm going to

46
00:02:36,300 --> 00:02:40,440
quickly just go a little bit over some

47
00:02:38,910 --> 00:02:43,500
browser architecture if people aren't

48
00:02:40,440 --> 00:02:44,850
really familiar browsers are built that

49
00:02:43,500 --> 00:02:47,520
broken up into a bunch of different

50
00:02:44,850 --> 00:02:50,100
processes the main one is usually

51
00:02:47,520 --> 00:02:52,830
whatever application you opened there'll

52
00:02:50,100 --> 00:02:56,340
be some helper processes like the

53
00:02:52,830 --> 00:02:58,320
network process and the GPU process but

54
00:02:56,340 --> 00:03:01,500
the main one that we're interested in is

55
00:02:58,320 --> 00:03:05,310
this one called the renderer process so

56
00:03:01,500 --> 00:03:07,890
now the render process is sort of where

57
00:03:05,310 --> 00:03:10,980
all the magic happens and it deals with

58
00:03:07,890 --> 00:03:13,890
all the actual HTML and JavaScript on

59
00:03:10,980 --> 00:03:15,869
the web so from an attackers point of

60
00:03:13,890 --> 00:03:19,679
view that would be the first place that

61
00:03:15,870 --> 00:03:22,830
we approach will be looking at the

62
00:03:19,680 --> 00:03:25,230
renderer and in most situations an

63
00:03:22,830 --> 00:03:26,700
attacker will have exploited this

64
00:03:25,230 --> 00:03:31,470
renderer process so they will have

65
00:03:26,700 --> 00:03:34,230
compromised process using some bug along

66
00:03:31,470 --> 00:03:36,390
the way to compromise in the process

67
00:03:34,230 --> 00:03:40,980
they will have gotten arbitrary

68
00:03:36,390 --> 00:03:43,019
readwrite in most cases our readwrite is

69
00:03:40,980 --> 00:03:46,769
basically the idea that they can write

70
00:03:43,020 --> 00:03:50,220
to be any memory address in the process

71
00:03:46,770 --> 00:03:53,490
so from JavaScript they can now read and

72
00:03:50,220 --> 00:03:56,340
write to anywhere they want within their

73
00:03:53,490 --> 00:03:59,790
render process and we're going to look

74
00:03:56,340 --> 00:04:01,650
at some talks today that bull beep you

75
00:03:59,790 --> 00:04:05,609
can pull them off with only the

76
00:04:01,650 --> 00:04:09,120
readwrite without needing to full code

77
00:04:05,610 --> 00:04:11,340
execution but often attackers are going

78
00:04:09,120 --> 00:04:14,190
to try to get full code execution in

79
00:04:11,340 --> 00:04:16,530
first place this means that they will

80
00:04:14,190 --> 00:04:19,410
try to actually be able to run the

81
00:04:16,529 --> 00:04:22,469
machine code within the rendering

82
00:04:19,410 --> 00:04:25,050
process so if you're on desktop you'll

83
00:04:22,470 --> 00:04:30,090
be running your x86 if you're on your

84
00:04:25,050 --> 00:04:34,830
phone they will be running arm and so

85
00:04:30,090 --> 00:04:35,359
the code execution attackers are going

86
00:04:34,830 --> 00:04:36,620
to try to get

87
00:04:35,360 --> 00:04:38,330
this because there's a couple things

88
00:04:36,620 --> 00:04:41,569
that they get from it like they can now

89
00:04:38,330 --> 00:04:44,270
call system functions and interact with

90
00:04:41,569 --> 00:04:46,819
the system in some ways they can try to

91
00:04:44,270 --> 00:04:50,378
maybe patch existing code if they can

92
00:04:46,819 --> 00:04:53,810
remap the existing code is read right

93
00:04:50,379 --> 00:04:55,250
but the question is would you be able to

94
00:04:53,810 --> 00:04:58,580
actually really interact with the system

95
00:04:55,250 --> 00:05:02,840
from code exec and the reason ask this

96
00:04:58,580 --> 00:05:05,030
is because we come into this thing

97
00:05:02,840 --> 00:05:06,979
called the sandbox so I'm sure you've

98
00:05:05,030 --> 00:05:09,789
all probably heard of sandboxes before

99
00:05:06,979 --> 00:05:13,909
the basic idea is that we want to

100
00:05:09,789 --> 00:05:17,539
prevent some process from accessing some

101
00:05:13,909 --> 00:05:20,960
other parts of the system so in this

102
00:05:17,539 --> 00:05:22,909
case our renderer process we want it to

103
00:05:20,960 --> 00:05:25,789
be protected from the rest of the system

104
00:05:22,909 --> 00:05:28,360
so that even if it's compromised an

105
00:05:25,789 --> 00:05:31,340
attacker won't be able to reach out and

106
00:05:28,360 --> 00:05:34,400
touch it your files or install a rootkit

107
00:05:31,340 --> 00:05:36,198
or something like that and so this is

108
00:05:34,400 --> 00:05:39,888
obviously a security boundary that is

109
00:05:36,199 --> 00:05:44,150
created by the browser vendors and the

110
00:05:39,889 --> 00:05:47,870
operating system and often you'll want

111
00:05:44,150 --> 00:05:50,210
to try to escape the sandbox as it's

112
00:05:47,870 --> 00:05:53,000
called but as I mentioned earlier that's

113
00:05:50,210 --> 00:05:55,698
not easy to do I have to find a bug in

114
00:05:53,000 --> 00:05:57,710
the implementation or I have to find a

115
00:05:55,699 --> 00:05:59,719
bug in another service or something like

116
00:05:57,710 --> 00:06:04,430
that and that can take a lot of time to

117
00:05:59,719 --> 00:06:06,020
find a bug so then you're thinking well

118
00:06:04,430 --> 00:06:09,229
ok if we're not going to escape the

119
00:06:06,020 --> 00:06:11,060
sandbox but we isn't the sandbox

120
00:06:09,229 --> 00:06:13,250
designed to prevent us from actually

121
00:06:11,060 --> 00:06:15,740
doing anything interesting and that's

122
00:06:13,250 --> 00:06:17,629
true but we'll see if that's actually

123
00:06:15,740 --> 00:06:20,120
the case that there's nothing

124
00:06:17,629 --> 00:06:23,629
interesting that we can do from within

125
00:06:20,120 --> 00:06:25,039
the sandbox so that's sort of one of the

126
00:06:23,629 --> 00:06:26,900
things we're going to be looking at in

127
00:06:25,039 --> 00:06:30,500
the talk and the way we're going to do

128
00:06:26,900 --> 00:06:33,258
this is by turning the browser on itself

129
00:06:30,500 --> 00:06:38,500
so we're going to take browser features

130
00:06:33,259 --> 00:06:41,569
and use them in our new context to

131
00:06:38,500 --> 00:06:46,000
compromise user data in the browser and

132
00:06:41,569 --> 00:06:46,000
perform generally bad things

133
00:06:46,410 --> 00:06:52,800
so first as a simple example we're gonna

134
00:06:49,380 --> 00:06:55,770
look at something very basic to the MEP

135
00:06:52,800 --> 00:06:58,500
which is making requests so I imagine

136
00:06:55,770 --> 00:07:01,349
you have a website it's some like web

137
00:06:58,500 --> 00:07:03,960
mail it might have some JavaScript that

138
00:07:01,350 --> 00:07:09,320
runs on it like this where it will

139
00:07:03,960 --> 00:07:12,349
retrieve all your mail that JSON from

140
00:07:09,320 --> 00:07:15,450
this website and then it will try to

141
00:07:12,350 --> 00:07:22,260
display that to the screen or something

142
00:07:15,450 --> 00:07:24,300
like that then it will make an HTTP

143
00:07:22,260 --> 00:07:27,630
request through this JavaScript to

144
00:07:24,300 --> 00:07:32,670
perform that action and it will take the

145
00:07:27,630 --> 00:07:35,340
data and come back to your JavaScript so

146
00:07:32,670 --> 00:07:38,250
my idea is well what if we do that

147
00:07:35,340 --> 00:07:42,359
ourselves right maybe I want to read

148
00:07:38,250 --> 00:07:47,310
your Corp mail right so let's try and

149
00:07:42,360 --> 00:07:48,900
access your data with a request and so

150
00:07:47,310 --> 00:07:50,940
we're gonna do try to do the same thing

151
00:07:48,900 --> 00:07:53,909
but instead of it being on this web mail

152
00:07:50,940 --> 00:07:57,260
I thought some Corp comm will try to do

153
00:07:53,910 --> 00:08:01,290
it from a site called attacker comm and

154
00:07:57,260 --> 00:08:04,560
if we try to do the same code here we'll

155
00:08:01,290 --> 00:08:07,860
actually run into an issue we'll get a

156
00:08:04,560 --> 00:08:11,460
big red thing that pops up our in our

157
00:08:07,860 --> 00:08:13,950
debug console that says that there are

158
00:08:11,460 --> 00:08:15,630
request has been blocked if you look

159
00:08:13,950 --> 00:08:20,070
closely it says that we're trying to

160
00:08:15,630 --> 00:08:23,010
fetch in this case Gmail from the origin

161
00:08:20,070 --> 00:08:26,040
attacker comm and then there's a bunch

162
00:08:23,010 --> 00:08:26,760
of other information about why it's

163
00:08:26,040 --> 00:08:29,520
being blocked

164
00:08:26,760 --> 00:08:31,950
but somehow the browser is managed to

165
00:08:29,520 --> 00:08:36,900
figure out we were doing something that

166
00:08:31,950 --> 00:08:39,510
we shouldn't have and stopped us and so

167
00:08:36,900 --> 00:08:42,329
the thing that actually has blocked us

168
00:08:39,510 --> 00:08:45,990
in this example was what's called the

169
00:08:42,330 --> 00:08:49,440
same origin policy so the idea of the

170
00:08:45,990 --> 00:08:52,850
same origin policy is every origin

171
00:08:49,440 --> 00:08:56,190
should only be able to access it itself

172
00:08:52,850 --> 00:08:59,010
origin is basically a website so Google

173
00:08:56,190 --> 00:09:00,180
is one origin attack.com is another so

174
00:08:59,010 --> 00:09:03,450
they should never be able

175
00:09:00,180 --> 00:09:07,260
to interact with each other because then

176
00:09:03,450 --> 00:09:11,160
if I'm malicious website I could then

177
00:09:07,260 --> 00:09:12,330
read all your data or access requests

178
00:09:11,160 --> 00:09:16,439
and things like that which I should not

179
00:09:12,330 --> 00:09:18,540
be able to do but

180
00:09:16,440 --> 00:09:23,280
so normally stops fine this is very

181
00:09:18,540 --> 00:09:25,829
important part of internet security but

182
00:09:23,280 --> 00:09:28,260
from my point of view I want to know if

183
00:09:25,830 --> 00:09:31,830
it's interesting where it's actually

184
00:09:28,260 --> 00:09:34,110
implemented because it has to be done

185
00:09:31,830 --> 00:09:36,590
somewhere and since we're in a context

186
00:09:34,110 --> 00:09:39,750
where we can completely control the

187
00:09:36,590 --> 00:09:41,910
renderer process were in maybe we can

188
00:09:39,750 --> 00:09:48,240
manipulate and bypass some of these

189
00:09:41,910 --> 00:09:50,550
checks so let's take a look at some case

190
00:09:48,240 --> 00:09:53,070
studies here of where these same origin

191
00:09:50,550 --> 00:09:56,099
policies are checked I'm gonna look at

192
00:09:53,070 --> 00:09:58,710
both Safari and Firefox for now and

193
00:09:56,100 --> 00:10:01,680
we'll talk about why not Chrome but

194
00:09:58,710 --> 00:10:05,160
we'll take a look and if you take a look

195
00:10:01,680 --> 00:10:06,989
you'll see that the checks are actually

196
00:10:05,160 --> 00:10:09,480
going to be done in the renderer process

197
00:10:06,990 --> 00:10:12,450
which is what we fully controlled so

198
00:10:09,480 --> 00:10:16,730
we'll be able to manipulate them to

199
00:10:12,450 --> 00:10:19,760
bypass so here's the first case study

200
00:10:16,730 --> 00:10:23,780
we're looking at Safari

201
00:10:19,760 --> 00:10:28,439
so if Safari uses WebKit as its main

202
00:10:23,780 --> 00:10:30,270
system framework that uses and inside it

203
00:10:28,440 --> 00:10:33,060
there they use a thing called security

204
00:10:30,270 --> 00:10:36,290
origin so a security origin basically

205
00:10:33,060 --> 00:10:40,650
holds some of the information about the

206
00:10:36,290 --> 00:10:43,490
current website that you're visiting and

207
00:10:40,650 --> 00:10:49,709
it has this function called can access

208
00:10:43,490 --> 00:10:51,600
can access will be called when it tries

209
00:10:49,710 --> 00:10:54,330
to determine whether or not you're

210
00:10:51,600 --> 00:10:58,650
allowed to access another website so if

211
00:10:54,330 --> 00:11:01,590
I try to open Google and make a request

212
00:10:58,650 --> 00:11:04,220
to Google it's going to ask my security

213
00:11:01,590 --> 00:11:07,200
origin if I'm allowed to do that and

214
00:11:04,220 --> 00:11:11,850
that you'd be trivial cases if it's the

215
00:11:07,200 --> 00:11:15,290
same origin then yes otherwise default

216
00:11:11,850 --> 00:11:15,290
to know with some exceptions

217
00:11:16,470 --> 00:11:21,959
but since this is done in the renderer

218
00:11:18,570 --> 00:11:24,540
we could try to bypass this and we could

219
00:11:21,959 --> 00:11:26,969
try to patch it we could modify the code

220
00:11:24,540 --> 00:11:29,399
but there's actually an easier way that

221
00:11:26,970 --> 00:11:34,260
we can do this

222
00:11:29,399 --> 00:11:37,019
so Safari has this variable inside of

223
00:11:34,260 --> 00:11:41,399
the security Orting called M universal

224
00:11:37,019 --> 00:11:43,620
access M universal access is generally

225
00:11:41,399 --> 00:11:47,579
used if you wanted to turn off security

226
00:11:43,620 --> 00:11:49,920
in Safari or in WebKit for some reason

227
00:11:47,579 --> 00:11:55,620
maybe if you're embedding it somewhere

228
00:11:49,920 --> 00:11:57,750
and so M universal access will be

229
00:11:55,620 --> 00:12:02,040
checked inside of the can access

230
00:11:57,750 --> 00:12:03,649
function which basically if it's set it

231
00:12:02,040 --> 00:12:08,490
will always be able to access anything

232
00:12:03,649 --> 00:12:11,310
so all we have to do is write a true

233
00:12:08,490 --> 00:12:14,430
value into this M universal access field

234
00:12:11,310 --> 00:12:21,089
and we should be able to access any site

235
00:12:14,430 --> 00:12:22,649
that we want so this is very nice and

236
00:12:21,089 --> 00:12:25,410
I'm going to try to show a demo in a

237
00:12:22,649 --> 00:12:28,050
second here so if you want to look

238
00:12:25,410 --> 00:12:31,560
closer I know something's rendering it a

239
00:12:28,050 --> 00:12:33,359
little weird on the out here but these

240
00:12:31,560 --> 00:12:35,939
slides will hopefully be available

241
00:12:33,360 --> 00:12:42,600
eventually but I'm gonna show a demo now

242
00:12:35,940 --> 00:12:52,050
of this so let's see so I'm gonna open

243
00:12:42,600 --> 00:12:54,899
up Safari here so I'm gonna do is I have

244
00:12:52,050 --> 00:12:58,979
a version of Safari that is vulnerable

245
00:12:54,899 --> 00:13:01,230
to an older JavaScript boner ability so

246
00:12:58,980 --> 00:13:05,550
I this is an older version of Safari

247
00:13:01,230 --> 00:13:08,699
that I have a JavaScript exploit for I'm

248
00:13:05,550 --> 00:13:11,819
gonna open my ex plate here and it's

249
00:13:08,699 --> 00:13:14,279
going to start running and it's going to

250
00:13:11,819 --> 00:13:15,959
leak out some information and so on but

251
00:13:14,279 --> 00:13:19,079
then what it's going to do is it's going

252
00:13:15,959 --> 00:13:21,359
to modify the EM universal access and

253
00:13:19,079 --> 00:13:23,880
then it will try to make a request to

254
00:13:21,360 --> 00:13:25,709
Google normally a request the Google

255
00:13:23,880 --> 00:13:26,939
with fail because you should not be able

256
00:13:25,709 --> 00:13:29,010
to get the

257
00:13:26,940 --> 00:13:31,590
but in this case we can actually read

258
00:13:29,010 --> 00:13:33,480
the data and so we get all the action

259
00:13:31,590 --> 00:13:36,870
the response and we can print it out to

260
00:13:33,480 --> 00:13:39,660
the screen so successfully we're able to

261
00:13:36,870 --> 00:13:42,840
bypass same origin policy and make a

262
00:13:39,660 --> 00:13:50,040
request to a site that we should not be

263
00:13:42,840 --> 00:13:58,250
able to from my malicious site here so

264
00:13:50,040 --> 00:14:00,660
let's go back here so that's good

265
00:13:58,250 --> 00:14:02,460
let's I'm gonna quickly talk a little

266
00:14:00,660 --> 00:14:06,890
bit about how we could do the similar

267
00:14:02,460 --> 00:14:10,380
sort of thing in Firefox so Firefox

268
00:14:06,890 --> 00:14:13,230
there isn't the same em universal access

269
00:14:10,380 --> 00:14:16,080
that makes things really easy but we can

270
00:14:13,230 --> 00:14:19,410
kind of still find functions that we

271
00:14:16,080 --> 00:14:22,500
could Pat to get this check to be

272
00:14:19,410 --> 00:14:26,520
disabled the way that I found to do this

273
00:14:22,500 --> 00:14:29,040
is we can use the cross-origin resource

274
00:14:26,520 --> 00:14:31,199
sharing features if you've ever heard of

275
00:14:29,040 --> 00:14:34,319
cross-origin resource sharing it's

276
00:14:31,200 --> 00:14:36,960
basically a whitelist to sob so a web

277
00:14:34,320 --> 00:14:40,740
site can say if another site is allowed

278
00:14:36,960 --> 00:14:44,790
to access it but normally this isn't set

279
00:14:40,740 --> 00:14:48,900
and so in Firefox there's a check called

280
00:14:44,790 --> 00:14:51,420
check request approved and this will

281
00:14:48,900 --> 00:14:54,060
basically say okay you're trying to make

282
00:14:51,420 --> 00:14:56,610
a request should I approve it based on

283
00:14:54,060 --> 00:14:58,530
the whitelist and so we can patch this

284
00:14:56,610 --> 00:15:00,840
method because this method also is

285
00:14:58,530 --> 00:15:02,400
within the renderer process so it's in

286
00:15:00,840 --> 00:15:06,120
the process that we can completely

287
00:15:02,400 --> 00:15:10,290
control and we can patch it to always

288
00:15:06,120 --> 00:15:11,970
return yes it's it's fine keep going and

289
00:15:10,290 --> 00:15:13,050
so I want to mention that I worked with

290
00:15:11,970 --> 00:15:18,000
my friend

291
00:15:13,050 --> 00:15:19,920
axel his Twitter is at overclocked he's

292
00:15:18,000 --> 00:15:21,720
done a lot of research on Firefox so you

293
00:15:19,920 --> 00:15:23,760
can go check about here's some blog

294
00:15:21,720 --> 00:15:28,590
posts and stuff talking about similar

295
00:15:23,760 --> 00:15:32,010
kind of stuff so we've now successfully

296
00:15:28,590 --> 00:15:36,840
shown that we can request data from

297
00:15:32,010 --> 00:15:39,510
other web sites by compromising the

298
00:15:36,840 --> 00:15:41,110
integrity of the render process but

299
00:15:39,510 --> 00:15:44,390
let's try to get a

300
00:15:41,110 --> 00:15:46,370
ability here so what's better than just

301
00:15:44,390 --> 00:15:49,130
making requests the websites well

302
00:15:46,370 --> 00:15:52,420
running JavaScript in the context of

303
00:15:49,130 --> 00:15:57,320
that website and this is often something

304
00:15:52,420 --> 00:15:58,910
that people do when they're finding web

305
00:15:57,320 --> 00:16:01,310
application bugs they find out what's

306
00:15:58,910 --> 00:16:03,020
called cross-site scripting bugs where

307
00:16:01,310 --> 00:16:06,199
they can inject JavaScript into a

308
00:16:03,020 --> 00:16:08,270
website but we're gonna try to find

309
00:16:06,200 --> 00:16:10,690
what's called universal cross-site

310
00:16:08,270 --> 00:16:13,910
scripting bugs the idea is these

311
00:16:10,690 --> 00:16:16,960
cross-site scripting can be done on any

312
00:16:13,910 --> 00:16:19,010
website at all it does not have to be

313
00:16:16,960 --> 00:16:21,170
there does not actually have to be

314
00:16:19,010 --> 00:16:26,390
vulnerable 'ti and google for me to be

315
00:16:21,170 --> 00:16:28,370
able to inject scripts into it so this

316
00:16:26,390 --> 00:16:31,340
is what we're gonna try to do you give

317
00:16:28,370 --> 00:16:35,750
me any site you want I will run

318
00:16:31,340 --> 00:16:39,380
javascript on it in your browser from my

319
00:16:35,750 --> 00:16:42,170
compromised renderer process this allows

320
00:16:39,380 --> 00:16:45,230
me to compromise whatever accounts are

321
00:16:42,170 --> 00:16:47,660
logged into that website I'm really I'm

322
00:16:45,230 --> 00:16:49,970
able to read any data it makes things a

323
00:16:47,660 --> 00:16:55,100
lot easier in terms of compromising the

324
00:16:49,970 --> 00:16:57,800
website so the simplest way that I found

325
00:16:55,100 --> 00:17:01,910
at least for Safari to pull this off is

326
00:16:57,800 --> 00:17:05,930
by injecting through iframes iframes

327
00:17:01,910 --> 00:17:08,540
basically let you store or let you embed

328
00:17:05,930 --> 00:17:11,209
a website into your page and then

329
00:17:08,540 --> 00:17:12,709
there's limited interactiveness you can

330
00:17:11,209 --> 00:17:15,709
do with it

331
00:17:12,709 --> 00:17:19,730
so in this case what I might try to do

332
00:17:15,709 --> 00:17:23,480
is embed Google and then try to insert a

333
00:17:19,730 --> 00:17:26,660
script tag into the body of Google's

334
00:17:23,480 --> 00:17:31,790
website so that it executes and I get

335
00:17:26,660 --> 00:17:35,990
JavaScript running but normally if I try

336
00:17:31,790 --> 00:17:38,899
to do this there's a big problem which

337
00:17:35,990 --> 00:17:41,620
is that you should never be able to

338
00:17:38,900 --> 00:17:45,670
access another website through an iframe

339
00:17:41,620 --> 00:17:47,959
this is a protection and part of stop so

340
00:17:45,670 --> 00:17:49,670
what we're gonna do is once again we're

341
00:17:47,960 --> 00:17:53,929
gonna try to bypass this protection

342
00:17:49,670 --> 00:17:55,960
using our current permissions the

343
00:17:53,929 --> 00:18:01,190
renderer process

344
00:17:55,960 --> 00:18:06,110
so when we look at these iframes and how

345
00:18:01,190 --> 00:18:09,289
they are checked and validated when we

346
00:18:06,110 --> 00:18:11,289
are trying to access them we see that

347
00:18:09,289 --> 00:18:15,080
there's a function in Safari called is

348
00:18:11,289 --> 00:18:18,440
insist is insecure script access a

349
00:18:15,080 --> 00:18:21,799
little hard to say and it basically says

350
00:18:18,440 --> 00:18:26,480
are you allowed to access the iframe are

351
00:18:21,799 --> 00:18:29,090
you the same website as the iframe and

352
00:18:26,480 --> 00:18:30,830
they can access it and you can see it

353
00:18:29,090 --> 00:18:34,250
does this by checking once again the

354
00:18:30,830 --> 00:18:37,610
security origins so security origin can

355
00:18:34,250 --> 00:18:40,309
access and hit if it is it will continue

356
00:18:37,610 --> 00:18:43,070
loading it will be fine but if you

357
00:18:40,309 --> 00:18:46,340
remember from a few minutes ago can

358
00:18:43,070 --> 00:18:50,090
access actually has the M universal

359
00:18:46,340 --> 00:18:53,029
access check inside of it so we've

360
00:18:50,090 --> 00:18:55,760
already bypassed this check and the

361
00:18:53,029 --> 00:18:59,240
universal access gives us this as well

362
00:18:55,760 --> 00:19:06,100
so I'm going to quickly show another

363
00:18:59,240 --> 00:19:10,159
demo here of getting universal XSS on

364
00:19:06,100 --> 00:19:11,269
website through an iframe so in this

365
00:19:10,159 --> 00:19:14,360
case I'm just going to do an example

366
00:19:11,269 --> 00:19:15,919
comm so we're going to load up and then

367
00:19:14,360 --> 00:19:20,600
it's going to pop up an alert this is

368
00:19:15,919 --> 00:19:22,519
you XSS on example calm at this point I

369
00:19:20,600 --> 00:19:26,779
would be able to run JavaScript on

370
00:19:22,519 --> 00:19:28,580
whatever site and compromise any

371
00:19:26,779 --> 00:19:31,880
accounts and we can actually see here

372
00:19:28,580 --> 00:19:36,080
the iframe behind it but it can be a

373
00:19:31,880 --> 00:19:40,549
little bit tricky because if you some

374
00:19:36,080 --> 00:19:42,590
sites don't like UI framing them so what

375
00:19:40,549 --> 00:19:45,168
if you want it I frame let's say Google

376
00:19:42,590 --> 00:19:49,850
calm because that's a pretty popular

377
00:19:45,169 --> 00:19:52,250
site if you try to put Google into an

378
00:19:49,850 --> 00:19:55,580
iframe it will actually yell at you it

379
00:19:52,250 --> 00:19:58,250
does not like it and it's because of

380
00:19:55,580 --> 00:20:03,639
this pesky thing called X frame options

381
00:19:58,250 --> 00:20:09,020
which for Google are set to same origin

382
00:20:03,639 --> 00:20:11,659
same origin is basically going to tell

383
00:20:09,020 --> 00:20:13,550
the page that it can only be put into an

384
00:20:11,660 --> 00:20:15,620
iframe on Google

385
00:20:13,550 --> 00:20:17,600
you can't put Google into an iframe on

386
00:20:15,620 --> 00:20:22,309
your website as much as you want to put

387
00:20:17,600 --> 00:20:25,428
a search engine on your homepage but

388
00:20:22,309 --> 00:20:31,010
we're gonna try to take a look and see

389
00:20:25,429 --> 00:20:34,250
where these checks happen and try to see

390
00:20:31,010 --> 00:20:37,970
if we can modify them so once again

391
00:20:34,250 --> 00:20:42,800
these this X frame options is checked

392
00:20:37,970 --> 00:20:47,150
within the render process of Safari so

393
00:20:42,800 --> 00:20:49,700
inside a safari we have a should

394
00:20:47,150 --> 00:20:52,850
interrupt load for X frame options and

395
00:20:49,700 --> 00:20:55,670
then we have a switch which checks based

396
00:20:52,850 --> 00:21:00,260
on the different cases and so one is

397
00:20:55,670 --> 00:21:04,010
same origin and the other is deny so

398
00:21:00,260 --> 00:21:05,840
once again we could patch this and you

399
00:21:04,010 --> 00:21:10,670
could make this function always return

400
00:21:05,840 --> 00:21:12,860
true which would force the frame or

401
00:21:10,670 --> 00:21:15,550
sorry we always return false so do not

402
00:21:12,860 --> 00:21:19,189
interrupt so that this would force the

403
00:21:15,550 --> 00:21:21,830
iframe to load but in the case of

404
00:21:19,190 --> 00:21:24,620
same-origin there's actually some stuff

405
00:21:21,830 --> 00:21:30,320
that we can do to do it without having

406
00:21:24,620 --> 00:21:32,540
to patch the code because patching the

407
00:21:30,320 --> 00:21:35,090
code is not always the easiest thing to

408
00:21:32,540 --> 00:21:38,240
do depending on which system you're

409
00:21:35,090 --> 00:21:42,080
targeting especially if you're trying to

410
00:21:38,240 --> 00:21:45,260
target something like iOS where now you

411
00:21:42,080 --> 00:21:48,169
have pointer authentication pointer

412
00:21:45,260 --> 00:21:50,570
authentication basically makes it harder

413
00:21:48,170 --> 00:21:52,400
to get code exec in the first place so

414
00:21:50,570 --> 00:21:54,740
any sort of attacks that you have to

415
00:21:52,400 --> 00:21:57,170
pull off run code exec are not going to

416
00:21:54,740 --> 00:22:03,080
be as easy to do as ones that you can do

417
00:21:57,170 --> 00:22:06,350
just with an arbitrary rewrite so what

418
00:22:03,080 --> 00:22:10,070
we can do instead is we can try to

419
00:22:06,350 --> 00:22:12,500
modify the actual security origin object

420
00:22:10,070 --> 00:22:14,629
because if you look back here the actual

421
00:22:12,500 --> 00:22:18,700
check that is being performed as a thing

422
00:22:14,630 --> 00:22:21,080
that says is same scheme host port and

423
00:22:18,700 --> 00:22:21,920
this is basically going to do a string

424
00:22:21,080 --> 00:22:26,149
compare

425
00:22:21,920 --> 00:22:30,110
on the domain name and like the port so

426
00:22:26,150 --> 00:22:32,630
if I just take the domain that I want

427
00:22:30,110 --> 00:22:36,830
which in this case is w W Google comm

428
00:22:32,630 --> 00:22:39,620
and I just modify my memory where it

429
00:22:36,830 --> 00:22:41,570
used to say attacker comm and I replace

430
00:22:39,620 --> 00:22:44,600
it with this when it does that string

431
00:22:41,570 --> 00:22:46,879
compare it will succeed and we'll be

432
00:22:44,600 --> 00:22:48,679
able to load it into memory and so we

433
00:22:46,880 --> 00:22:50,420
can do this without needing to patch any

434
00:22:48,680 --> 00:22:52,250
of the code at all without needing to

435
00:22:50,420 --> 00:22:54,530
get code exaction in the first place

436
00:22:52,250 --> 00:22:58,280
so this suddenly becomes a much more

437
00:22:54,530 --> 00:23:00,560
viable attack on something like iOS or a

438
00:22:58,280 --> 00:23:07,280
device that has some sort of protection

439
00:23:00,560 --> 00:23:09,200
against code execution so I'm gonna show

440
00:23:07,280 --> 00:23:12,200
this now so I showed a second ago as

441
00:23:09,200 --> 00:23:14,780
getting universal XSS on example.com

442
00:23:12,200 --> 00:23:16,610
that's not so exciting but now we're

443
00:23:14,780 --> 00:23:24,550
gonna do it on Google it should be a

444
00:23:16,610 --> 00:23:24,550
little more exciting so okay sorry

445
00:23:26,859 --> 00:23:38,448
so we exploit the render process like

446
00:23:30,949 --> 00:23:41,690
before using a single bug we get so we

447
00:23:38,449 --> 00:23:43,940
exploit it we modify our security

448
00:23:41,690 --> 00:23:46,070
origins so that it thinks it's Google we

449
00:23:43,940 --> 00:23:48,019
load it to an iframe which you should

450
00:23:46,070 --> 00:23:50,570
never be able to do this is the only

451
00:23:48,019 --> 00:23:53,359
website that can load Google into an

452
00:23:50,570 --> 00:23:57,079
iframe right now and from there we

453
00:23:53,359 --> 00:24:00,529
inject our JavaScript in and we've now

454
00:23:57,079 --> 00:24:03,079
taken over your Google account all from

455
00:24:00,529 --> 00:24:11,690
a single JavaScript bug with no sandbox

456
00:24:03,079 --> 00:24:15,019
escape needed alright so now we can see

457
00:24:11,690 --> 00:24:18,259
that we have a pretty bad case of

458
00:24:15,019 --> 00:24:23,149
compromise that can be pulled off from

459
00:24:18,259 --> 00:24:27,289
just one bug but we can make it worse

460
00:24:23,149 --> 00:24:29,208
where do we go from here from JavaScript

461
00:24:27,289 --> 00:24:32,899
execution you have a bit more access to

462
00:24:29,209 --> 00:24:35,539
some more api's within the browser such

463
00:24:32,899 --> 00:24:37,668
as local storage index DB you can maybe

464
00:24:35,539 --> 00:24:40,069
mess around with the cookies for

465
00:24:37,669 --> 00:24:42,349
websites but something that I found

466
00:24:40,069 --> 00:24:47,178
really interesting was a thing called

467
00:24:42,349 --> 00:24:49,448
service workers so service workers if

468
00:24:47,179 --> 00:24:54,979
you haven't heard of them before are a

469
00:24:49,449 --> 00:24:58,579
special web feature which it sort of

470
00:24:54,979 --> 00:25:01,549
acts as this server that stands in the

471
00:24:58,579 --> 00:25:04,190
middle of your web application and the

472
00:25:01,549 --> 00:25:08,599
real network server usually it's used

473
00:25:04,190 --> 00:25:11,029
for something like cache so the service

474
00:25:08,599 --> 00:25:13,428
workers running in your browser you're

475
00:25:11,029 --> 00:25:15,109
across the page it has a cached version

476
00:25:13,429 --> 00:25:17,299
you don't even have to go talk to the

477
00:25:15,109 --> 00:25:20,689
network this helps enable things like

478
00:25:17,299 --> 00:25:22,249
offline websites and other functionality

479
00:25:20,690 --> 00:25:27,319
that you don't actually need to go

480
00:25:22,249 --> 00:25:29,389
online for but these are interesting to

481
00:25:27,319 --> 00:25:32,389
attacker because it's literally

482
00:25:29,389 --> 00:25:34,849
man-in-the-middle as a feature if you

483
00:25:32,389 --> 00:25:38,269
can install a serviceworker on a website

484
00:25:34,849 --> 00:25:40,100
you're now able to completely intercept

485
00:25:38,269 --> 00:25:43,220
all

486
00:25:40,100 --> 00:25:47,270
data that is going to and from that

487
00:25:43,220 --> 00:25:49,220
website and not only that but service

488
00:25:47,270 --> 00:25:51,680
workers are persistent they will

489
00:25:49,220 --> 00:25:55,490
continue to last until they've been

490
00:25:51,680 --> 00:25:57,590
replaced depending on the browser so

491
00:25:55,490 --> 00:25:59,780
this could be something that maybe you

492
00:25:57,590 --> 00:26:02,179
install it on a site that the users not

493
00:25:59,780 --> 00:26:04,670
even logged into yet and then one day

494
00:26:02,180 --> 00:26:11,390
they log in and you captured their

495
00:26:04,670 --> 00:26:13,400
password in the request so I want to see

496
00:26:11,390 --> 00:26:15,890
I want to see can we install a service

497
00:26:13,400 --> 00:26:20,690
worker from our Universal XSS

498
00:26:15,890 --> 00:26:22,550
I knew that XSS was a thing that the

499
00:26:20,690 --> 00:26:24,680
designers of service workers wanted to

500
00:26:22,550 --> 00:26:27,290
try to protect against because if you

501
00:26:24,680 --> 00:26:29,870
have XSS they didn't want it to be game

502
00:26:27,290 --> 00:26:32,570
over when you had XSS if you could

503
00:26:29,870 --> 00:26:34,689
install a service worker so there's a

504
00:26:32,570 --> 00:26:38,419
couple restrictions and requirements

505
00:26:34,690 --> 00:26:41,030
that are put on a service workers to try

506
00:26:38,420 --> 00:26:42,830
to make it a little safer so here's the

507
00:26:41,030 --> 00:26:47,660
for that matter most

508
00:26:42,830 --> 00:26:51,429
first the origin has to be HTTPS so you

509
00:26:47,660 --> 00:26:53,990
have to be on a kiosk website this is so

510
00:26:51,430 --> 00:26:56,150
my attacker couldn't man-in-the-middle

511
00:26:53,990 --> 00:26:58,640
your network traffic force install a

512
00:26:56,150 --> 00:27:03,170
service worker and then it over once

513
00:26:58,640 --> 00:27:05,180
it's back on SSL but this is not a

514
00:27:03,170 --> 00:27:10,310
problem for us most of the sites were

515
00:27:05,180 --> 00:27:11,950
probably targeting already are HTTPS so

516
00:27:10,310 --> 00:27:14,179
it's probably not an issue

517
00:27:11,950 --> 00:27:18,170
the second requirements a little bit

518
00:27:14,180 --> 00:27:20,810
worse though basically it says that the

519
00:27:18,170 --> 00:27:24,170
script file that we're loading has to be

520
00:27:20,810 --> 00:27:25,760
on the same origin so we have to find if

521
00:27:24,170 --> 00:27:28,070
I want to load serviceworker dot

522
00:27:25,760 --> 00:27:29,840
javascript it has to be actually on the

523
00:27:28,070 --> 00:27:31,820
website that i want to install it on

524
00:27:29,840 --> 00:27:33,439
once again this is trying to make it

525
00:27:31,820 --> 00:27:37,070
harder for someone to install a

526
00:27:33,440 --> 00:27:38,540
serviceworker on someone else's site but

527
00:27:37,070 --> 00:27:40,610
depending on the site this still might

528
00:27:38,540 --> 00:27:44,000
be possible a lot of sites let you

529
00:27:40,610 --> 00:27:46,879
upload user data and or reflects user

530
00:27:44,000 --> 00:27:49,340
data in some way so we'll see that there

531
00:27:46,880 --> 00:27:53,240
are ways to get around this without even

532
00:27:49,340 --> 00:27:54,139
having to manipulate anything but then

533
00:27:53,240 --> 00:27:55,840
there's two more which

534
00:27:54,140 --> 00:28:01,460
can be a little bit of a showstopper

535
00:27:55,840 --> 00:28:04,970
from xs/s one is that scrip file must be

536
00:28:01,460 --> 00:28:07,550
application JSON or JavaScript

537
00:28:04,970 --> 00:28:09,140
this makes the previous case a lot

538
00:28:07,550 --> 00:28:12,950
harder because it's much less likely

539
00:28:09,140 --> 00:28:15,170
that a website will serve your file as a

540
00:28:12,950 --> 00:28:17,540
JavaScript file it's usually going to be

541
00:28:15,170 --> 00:28:17,930
something like plain text or something

542
00:28:17,540 --> 00:28:21,590
like that

543
00:28:17,930 --> 00:28:24,230
and then the worst one is that the

544
00:28:21,590 --> 00:28:26,659
service worker can only control the path

545
00:28:24,230 --> 00:28:30,050
that it was from so if you're installing

546
00:28:26,660 --> 00:28:32,390
it from let's say static worker j/s that

547
00:28:30,050 --> 00:28:35,629
service worker is only allowed to

548
00:28:32,390 --> 00:28:37,940
man-in-the-middle the static directory

549
00:28:35,630 --> 00:28:40,700
it won't be able to man the middle the

550
00:28:37,940 --> 00:28:43,880
main site that's not always terrible if

551
00:28:40,700 --> 00:28:47,030
they load javascript from that resource

552
00:28:43,880 --> 00:28:50,540
but it's not as powerful as it could be

553
00:28:47,030 --> 00:28:51,800
so I want to try to get around some of

554
00:28:50,540 --> 00:28:53,840
these I might not be able to get around

555
00:28:51,800 --> 00:28:55,159
all of them but if we can at least get

556
00:28:53,840 --> 00:28:59,810
rid of some of them we may have

557
00:28:55,160 --> 00:29:01,940
something that can still be workable so

558
00:28:59,810 --> 00:29:06,590
once again looking at Safari cuz most of

559
00:29:01,940 --> 00:29:10,610
my research is in Safari I want to take

560
00:29:06,590 --> 00:29:12,350
a look at where these checks are done so

561
00:29:10,610 --> 00:29:14,240
the first check that we carried about

562
00:29:12,350 --> 00:29:17,480
was that the script must be on the same

563
00:29:14,240 --> 00:29:21,860
origin and this is done in this function

564
00:29:17,480 --> 00:29:27,620
called run register job when the initial

565
00:29:21,860 --> 00:29:28,969
service worker is registered now this is

566
00:29:27,620 --> 00:29:31,969
not actually in the rendering engine

567
00:29:28,970 --> 00:29:35,360
unfortunately this function is outside

568
00:29:31,970 --> 00:29:38,450
of it because the rendering engine tells

569
00:29:35,360 --> 00:29:40,370
the main browser to begin registering

570
00:29:38,450 --> 00:29:43,700
the service worker and the first check

571
00:29:40,370 --> 00:29:45,350
is done here so unfortunately from a

572
00:29:43,700 --> 00:29:51,110
compromised renderer we can't actually

573
00:29:45,350 --> 00:29:53,540
bypass this check directly but there may

574
00:29:51,110 --> 00:29:55,340
still be ways to do it just within the

575
00:29:53,540 --> 00:29:57,530
time that I had to research this I

576
00:29:55,340 --> 00:30:01,159
didn't find a direct way to bypass this

577
00:29:57,530 --> 00:30:03,770
check you may be able to spoof things at

578
00:30:01,160 --> 00:30:05,180
my PC to get past this but I didn't want

579
00:30:03,770 --> 00:30:07,639
to do that because that's a lot of extra

580
00:30:05,180 --> 00:30:11,750
effort in terms of the actual X

581
00:30:07,640 --> 00:30:15,230
what you'd have to do then the next

582
00:30:11,750 --> 00:30:17,300
check is the file type and then also the

583
00:30:15,230 --> 00:30:21,380
scope that the Service Worker will be

584
00:30:17,300 --> 00:30:23,629
installed on so this is done in a

585
00:30:21,380 --> 00:30:26,540
function called validate serviceworker

586
00:30:23,630 --> 00:30:28,580
response and this is actually done

587
00:30:26,540 --> 00:30:31,940
inside the rendering engine so this is

588
00:30:28,580 --> 00:30:36,889
good we can manipulate this and modify

589
00:30:31,940 --> 00:30:40,490
it to our advantage this is usually done

590
00:30:36,890 --> 00:30:42,530
because the IPC will send back the

591
00:30:40,490 --> 00:30:44,510
serviceworker script and then the

592
00:30:42,530 --> 00:30:47,270
rendering engine is supposed to run it

593
00:30:44,510 --> 00:30:51,470
so before it runs it is validating these

594
00:30:47,270 --> 00:30:54,260
couple last things but we can patch this

595
00:30:51,470 --> 00:30:57,740
function from code execution and for it

596
00:30:54,260 --> 00:31:00,710
to return that everything is valid and

597
00:30:57,740 --> 00:31:03,320
that there's no error and this will

598
00:31:00,710 --> 00:31:06,800
allow us to first load a JavaScript file

599
00:31:03,320 --> 00:31:08,899
that is any might type so it could be a

600
00:31:06,800 --> 00:31:14,210
plain text file from some sort of raw

601
00:31:08,900 --> 00:31:18,380
endpoint it could be JSON it doesn't

602
00:31:14,210 --> 00:31:21,110
matter and then it allows us to install

603
00:31:18,380 --> 00:31:23,980
it at whatever scope we want which means

604
00:31:21,110 --> 00:31:27,320
I can now even if it's like a million

605
00:31:23,980 --> 00:31:33,020
directories deep I can still force it to

606
00:31:27,320 --> 00:31:34,730
man-in-the-middle the entire a domain so

607
00:31:33,020 --> 00:31:40,400
the way that you'd sort of go about this

608
00:31:34,730 --> 00:31:43,490
if you were trying to exploit a user

609
00:31:40,400 --> 00:31:47,120
that had an outdated browser or

610
00:31:43,490 --> 00:31:49,070
something like that we'd want to first

611
00:31:47,120 --> 00:31:52,429
find a website that we wanted to target

612
00:31:49,070 --> 00:31:54,379
and find a way to host the file or

613
00:31:52,430 --> 00:31:56,930
reflect a script on it so this would

614
00:31:54,380 --> 00:32:00,350
probably be the hardest part depending

615
00:31:56,930 --> 00:32:01,520
on what you're wanting look at some

616
00:32:00,350 --> 00:32:05,570
sites you might not be able to find

617
00:32:01,520 --> 00:32:08,780
anything then using our code execution

618
00:32:05,570 --> 00:32:11,480
in a rendering engine which you would

619
00:32:08,780 --> 00:32:13,670
get through the actual exploit you want

620
00:32:11,480 --> 00:32:16,040
to patch that validate serviceworker

621
00:32:13,670 --> 00:32:19,400
response function so it does not error

622
00:32:16,040 --> 00:32:21,080
when we try to load the very invalid

623
00:32:19,400 --> 00:32:24,270
script

624
00:32:21,080 --> 00:32:27,439
then once we've set that up we get

625
00:32:24,270 --> 00:32:30,920
Universal XSS on the target website

626
00:32:27,440 --> 00:32:33,810
using the methods we mentioned before

627
00:32:30,920 --> 00:32:36,180
finally we tell the browser to install

628
00:32:33,810 --> 00:32:39,540
the serviceworker at the scripts that we

629
00:32:36,180 --> 00:32:42,300
previously loaded at this point the

630
00:32:39,540 --> 00:32:44,250
browser will validate everything it will

631
00:32:42,300 --> 00:32:46,620
call back to the rendering engine into

632
00:32:44,250 --> 00:32:49,290
our patched function and we will be able

633
00:32:46,620 --> 00:32:52,949
to successfully install the

634
00:32:49,290 --> 00:32:59,129
serviceworker so I'm going to show a

635
00:32:52,950 --> 00:33:05,880
demo doing this now so I'm gonna get

636
00:32:59,130 --> 00:33:08,430
Safari back here first so my target is

637
00:33:05,880 --> 00:33:11,900
going to be source for it here because I

638
00:33:08,430 --> 00:33:14,490
was able to fit all the constraints so

639
00:33:11,900 --> 00:33:15,510
here's the normal SourceForge nothing's

640
00:33:14,490 --> 00:33:17,490
happened to it yet

641
00:33:15,510 --> 00:33:19,470
but now I'm gonna go to my exploit so

642
00:33:17,490 --> 00:33:22,230
you imagine someone sends you a sketchy

643
00:33:19,470 --> 00:33:26,220
link or you click something on reddit or

644
00:33:22,230 --> 00:33:28,020
something and you end up on this page it

645
00:33:26,220 --> 00:33:30,870
takes only a second and it says how

646
00:33:28,020 --> 00:33:33,450
complete a real hack won't tell you that

647
00:33:30,870 --> 00:33:35,909
the hack is complete but this one does

648
00:33:33,450 --> 00:33:39,600
and this is doing all the steps that I

649
00:33:35,910 --> 00:33:42,390
had mentioned in the previous slide so

650
00:33:39,600 --> 00:33:46,520
now if I go back to Taurus forge we'll

651
00:33:42,390 --> 00:33:49,020
see that it says it's been pwned by us

652
00:33:46,520 --> 00:33:51,060
so this means I've been able to

653
00:33:49,020 --> 00:33:53,760
intercept the network requests on

654
00:33:51,060 --> 00:33:57,179
SourceForge and I'm able to inject X

655
00:33:53,760 --> 00:33:59,720
scripts I want into it at all now I

656
00:33:57,180 --> 00:34:02,190
mentioned that service workers are

657
00:33:59,720 --> 00:34:05,910
persistent so to prove this I'm actually

658
00:34:02,190 --> 00:34:08,520
going to quit Safari and we're gonna

659
00:34:05,910 --> 00:34:10,560
will open it back up again so normally

660
00:34:08,520 --> 00:34:14,130
at this point if you quit Safari any

661
00:34:10,560 --> 00:34:16,679
sort of process that you had those

662
00:34:14,130 --> 00:34:18,780
compromised would be gone so the exploit

663
00:34:16,679 --> 00:34:23,629
would be gone but if I come back to

664
00:34:18,780 --> 00:34:29,050
source porch here I get a second to load

665
00:34:23,630 --> 00:34:32,170
it still is compromised by our process

666
00:34:29,050 --> 00:34:36,400
and this will actually continue to

667
00:34:32,170 --> 00:34:38,920
persist because it will try to replace

668
00:34:36,400 --> 00:34:41,260
the service worker and update it but the

669
00:34:38,920 --> 00:34:44,230
normal process will always fail and so

670
00:34:41,260 --> 00:34:46,900
the service worker will remain for one

671
00:34:44,230 --> 00:34:49,840
last fun thing here let's just for fun

672
00:34:46,900 --> 00:34:53,490
try downloading something from

673
00:34:49,840 --> 00:34:56,980
SourceForge so I'm going to download

674
00:34:53,489 --> 00:35:02,279
there's something here the tor browser

675
00:34:56,980 --> 00:35:02,280
we get the dmg file I'll open this up

676
00:35:02,310 --> 00:35:11,670
give it a second and see if this

677
00:35:07,480 --> 00:35:15,250
perfectly normal not totally hijacked

678
00:35:11,670 --> 00:35:19,060
download from this website so you could

679
00:35:15,250 --> 00:35:22,000
imagine in a real attack potentially

680
00:35:19,060 --> 00:35:24,700
backdooring binaries backdooring source

681
00:35:22,000 --> 00:35:26,710
code something like that silently from a

682
00:35:24,700 --> 00:35:39,939
service worker and you would not even be

683
00:35:26,710 --> 00:35:41,560
aware of it so this is probably showing

684
00:35:39,940 --> 00:35:43,710
you it's probably a little bit scary

685
00:35:41,560 --> 00:35:47,680
that you could do this from a single

686
00:35:43,710 --> 00:35:49,740
JavaScript bug without needing to touch

687
00:35:47,680 --> 00:35:51,790
the sandbox at all

688
00:35:49,740 --> 00:35:56,680
but there's a few other fun things that

689
00:35:51,790 --> 00:35:58,380
we can show in Firefox for example the

690
00:35:56,680 --> 00:36:01,990
sandbox does not actually protect

691
00:35:58,380 --> 00:36:05,260
processes from injecting dll's and other

692
00:36:01,990 --> 00:36:09,339
ones or rather just injecting code so

693
00:36:05,260 --> 00:36:13,600
you can inject a tab or you can inject

694
00:36:09,340 --> 00:36:16,300
code into other tabs in the browser from

695
00:36:13,600 --> 00:36:18,279
a single one and then those tabs could

696
00:36:16,300 --> 00:36:19,720
then inject into more and more and you

697
00:36:18,280 --> 00:36:22,150
could completely hijack

698
00:36:19,720 --> 00:36:25,120
all of the firefox tabs until firefox

699
00:36:22,150 --> 00:36:28,000
disclosed and if you want to look more

700
00:36:25,120 --> 00:36:30,279
into this this was also I worked on with

701
00:36:28,000 --> 00:36:33,070
my friend axel and so you can go check

702
00:36:30,280 --> 00:36:35,290
out his project here where it goes in a

703
00:36:33,070 --> 00:36:40,570
bit more detail about doing the

704
00:36:35,290 --> 00:36:44,830
injection between processes all right

705
00:36:40,570 --> 00:36:47,710
so kind of comes up to the idea of

706
00:36:44,830 --> 00:36:50,680
alright so a single bug is all it might

707
00:36:47,710 --> 00:36:53,950
take to compromise user data in the

708
00:36:50,680 --> 00:36:56,609
browser and you think okay well you

709
00:36:53,950 --> 00:36:59,319
still need a bug right it's not like

710
00:36:56,610 --> 00:37:01,360
this is like a thing you can just do you

711
00:36:59,320 --> 00:37:03,180
still have to find a bug right you pour

712
00:37:01,360 --> 00:37:05,680
over the source code for hours and hours

713
00:37:03,180 --> 00:37:08,259
well that's not always true because

714
00:37:05,680 --> 00:37:12,330
there's been history of browsers up

715
00:37:08,260 --> 00:37:16,950
streaming bugs to their source repos

716
00:37:12,330 --> 00:37:20,860
that don't actually land in the main

717
00:37:16,950 --> 00:37:24,160
stable branch of the browser for let's

718
00:37:20,860 --> 00:37:27,130
say even a month and if an attacker is

719
00:37:24,160 --> 00:37:29,859
just looking at the git commits they may

720
00:37:27,130 --> 00:37:32,800
see a bug that is fixed then may be easy

721
00:37:29,860 --> 00:37:35,530
to exploit and then very quickly within

722
00:37:32,800 --> 00:37:38,230
hours right an exploit for it that has

723
00:37:35,530 --> 00:37:42,280
all these capabilities meanwhile all the

724
00:37:38,230 --> 00:37:44,380
users do not have this patch and they

725
00:37:42,280 --> 00:37:46,050
are vulnerable to this bug and all their

726
00:37:44,380 --> 00:37:51,220
data may now be compromised

727
00:37:46,050 --> 00:37:55,510
so vendors need to start working on this

728
00:37:51,220 --> 00:37:58,240
issue of patch gapping where attackers

729
00:37:55,510 --> 00:38:00,220
can take upstream patches and write

730
00:37:58,240 --> 00:38:02,259
exploits for them and this is actually

731
00:38:00,220 --> 00:38:07,359
starting to happen for example Google

732
00:38:02,260 --> 00:38:10,420
has just changed their time that they go

733
00:38:07,360 --> 00:38:13,540
from committing a security fix to get in

734
00:38:10,420 --> 00:38:16,750
stable down to 15 days instead of 33 so

735
00:38:13,540 --> 00:38:19,509
that decreases the time that a exploit

736
00:38:16,750 --> 00:38:22,330
taken from a patch will be effective

737
00:38:19,510 --> 00:38:24,280
against users which is very good but I

738
00:38:22,330 --> 00:38:28,590
think vendors don't like to work a bit

739
00:38:24,280 --> 00:38:32,740
towards this especially with the kind of

740
00:38:28,590 --> 00:38:34,930
abilities that I'm demonstrating here so

741
00:38:32,740 --> 00:38:37,089
what else can vendors do to try to

742
00:38:34,930 --> 00:38:39,009
prevent this well one thing I can do is

743
00:38:37,090 --> 00:38:40,690
try to remove some of these checks from

744
00:38:39,010 --> 00:38:43,150
the renderer the renderer should not

745
00:38:40,690 --> 00:38:47,170
have the ability to decide some of the

746
00:38:43,150 --> 00:38:49,180
stuff when it's compromised and you can

747
00:38:47,170 --> 00:38:51,430
also force origins into different

748
00:38:49,180 --> 00:38:54,399
processes so I can't compromise the data

749
00:38:51,430 --> 00:38:56,200
of Google by reading its memory

750
00:38:54,400 --> 00:38:59,680
and chrome has actually started this

751
00:38:56,200 --> 00:39:02,140
with a thing called sight isolation so

752
00:38:59,680 --> 00:39:04,690
the idea of sight isolation is that

753
00:39:02,140 --> 00:39:08,650
different origins must be in different

754
00:39:04,690 --> 00:39:11,190
processes if I iframe google.com well

755
00:39:08,650 --> 00:39:13,539
it's not actually going to be in my

756
00:39:11,190 --> 00:39:16,299
compromised the render process is going

757
00:39:13,539 --> 00:39:18,369
to be in the separate Google process and

758
00:39:16,299 --> 00:39:22,420
then the only way that I can talk to it

759
00:39:18,369 --> 00:39:24,460
is through the IPC system which is a lot

760
00:39:22,420 --> 00:39:26,740
more respective about what you can do

761
00:39:24,460 --> 00:39:28,450
and unless you compromise it as well

762
00:39:26,740 --> 00:39:31,839
you're very unlikely to be able to do

763
00:39:28,450 --> 00:39:34,240
something like bypass top or inject code

764
00:39:31,839 --> 00:39:37,720
into another domain so this solves a lot

765
00:39:34,240 --> 00:39:42,308
of the issues but there's still a couple

766
00:39:37,720 --> 00:39:44,788
limitations to slight isolation and the

767
00:39:42,309 --> 00:39:44,789
general idea

768
00:39:44,980 --> 00:39:50,109
so at least for chrome site isolation

769
00:39:47,770 --> 00:39:52,180
one thing is that subdomains are going

770
00:39:50,109 --> 00:39:54,160
to be in the same process the idea that

771
00:39:52,180 --> 00:39:56,440
this is because they want to reduce the

772
00:39:54,160 --> 00:40:00,670
amount of memory usage since many

773
00:39:56,440 --> 00:40:03,039
processes and increases memory so maybe

774
00:40:00,670 --> 00:40:05,740
if you can find a way to inject your

775
00:40:03,039 --> 00:40:07,960
exploit into some sub domain you could

776
00:40:05,740 --> 00:40:10,689
then use that to take over the main

777
00:40:07,960 --> 00:40:14,039
domain and get full access so imagine

778
00:40:10,690 --> 00:40:17,980
some subdomain of google allows you to

779
00:40:14,039 --> 00:40:19,779
run javascript or put an HTML file then

780
00:40:17,980 --> 00:40:22,779
you get redirected to that and once

781
00:40:19,779 --> 00:40:27,849
again now if you can compromise the main

782
00:40:22,779 --> 00:40:30,069
website and then also there are certain

783
00:40:27,849 --> 00:40:32,440
requests that always have to be

784
00:40:30,069 --> 00:40:37,119
cross-origin there's no way to block

785
00:40:32,440 --> 00:40:39,819
them necessarily just straight out and

786
00:40:37,119 --> 00:40:43,630
this is things like script and images

787
00:40:39,819 --> 00:40:47,819
and CSS styles which historically due to

788
00:40:43,630 --> 00:40:51,099
you know bad legacy code on old websites

789
00:40:47,819 --> 00:40:53,109
people linking scripts from other CD

790
00:40:51,099 --> 00:40:56,920
ends people are loading images from

791
00:40:53,109 --> 00:41:00,279
other people's websites they have to

792
00:40:56,920 --> 00:41:02,200
retain this capability and so what a

793
00:41:00,279 --> 00:41:05,319
compromised render process might be able

794
00:41:02,200 --> 00:41:08,578
to do is say hey I'm totally an image

795
00:41:05,319 --> 00:41:12,400
tag give me this data it's for an image

796
00:41:08,579 --> 00:41:15,190
and then the server would send it to the

797
00:41:12,400 --> 00:41:18,579
IPC and the IPC will say hey well you

798
00:41:15,190 --> 00:41:20,500
want it for an image here you go so this

799
00:41:18,579 --> 00:41:24,730
would be a way to get around the fact

800
00:41:20,500 --> 00:41:28,509
that we can't legitimately normally ask

801
00:41:24,730 --> 00:41:29,890
make requests for other websites so of

802
00:41:28,509 --> 00:41:30,250
course Google had to think of this as

803
00:41:29,890 --> 00:41:33,058
well

804
00:41:30,250 --> 00:41:37,210
and so they started implementing a

805
00:41:33,059 --> 00:41:39,460
protection against those attacks the

806
00:41:37,210 --> 00:41:42,220
idea is a thing called cross origin read

807
00:41:39,460 --> 00:41:43,779
blocking where we try to determine

808
00:41:42,220 --> 00:41:47,109
whether or not a request

809
00:41:43,779 --> 00:41:49,000
looks legitimate does it look like

810
00:41:47,109 --> 00:41:51,400
you're actually getting an image back or

811
00:41:49,000 --> 00:41:52,299
are you getting some other data does it

812
00:41:51,400 --> 00:41:55,569
look like you're actually getting

813
00:41:52,299 --> 00:41:58,450
JavaScript and if it's not the case if

814
00:41:55,569 --> 00:42:00,430
it does not look legitimate then we will

815
00:41:58,450 --> 00:42:04,029
block it because it's probably not going

816
00:42:00,430 --> 00:42:06,250
to be used for legitimate purpose and

817
00:42:04,029 --> 00:42:08,950
you can actually see this so for example

818
00:42:06,250 --> 00:42:10,869
if I want to make a script and I want to

819
00:42:08,950 --> 00:42:13,299
make the script load Google calm which

820
00:42:10,869 --> 00:42:17,769
is a what you could have done to try to

821
00:42:13,299 --> 00:42:20,079
read Google with site isolation we'll

822
00:42:17,769 --> 00:42:22,269
see we get a error here that says that

823
00:42:20,079 --> 00:42:24,309
it was blocked by the cross origin read

824
00:42:22,269 --> 00:42:26,649
blocking and this is relatively recent

825
00:42:24,309 --> 00:42:33,849
and so if you you may have noticed that

826
00:42:26,650 --> 00:42:37,690
error occasionally now I wanted to one

827
00:42:33,849 --> 00:42:40,720
last kind of fun thing with this which

828
00:42:37,690 --> 00:42:48,390
was a semi bypass of the cross origin

829
00:42:40,720 --> 00:42:51,549
read blocking so for W CTF Tesoro made a

830
00:42:48,390 --> 00:42:53,950
challenge so he's works a cool he made a

831
00:42:51,549 --> 00:42:55,660
challenge to try to bypass the cross

832
00:42:53,950 --> 00:42:58,390
origin read blocking so the entire setup

833
00:42:55,660 --> 00:43:02,470
the challenge was here's the file you

834
00:42:58,390 --> 00:43:03,970
have to read it it has the flag if we

835
00:43:02,470 --> 00:43:05,709
were doing it like we did earlier in the

836
00:43:03,970 --> 00:43:08,680
presentation I could have just made a

837
00:43:05,710 --> 00:43:13,839
request bypassed same margin policy and

838
00:43:08,680 --> 00:43:17,190
gotten the file but with sight isolation

839
00:43:13,839 --> 00:43:21,670
I can't just request the file directly

840
00:43:17,190 --> 00:43:22,270
so I want to start looking into the ways

841
00:43:21,670 --> 00:43:25,650
that

842
00:43:22,270 --> 00:43:27,580
cross-origin reblocking could not apply

843
00:43:25,650 --> 00:43:29,830
situations where they will just let the

844
00:43:27,580 --> 00:43:33,580
quest through and one of them that I

845
00:43:29,830 --> 00:43:39,119
found was that form multi-part or so for

846
00:43:33,580 --> 00:43:40,990
multi-part requests and responses the

847
00:43:39,119 --> 00:43:42,820
cross-origin read blocking would

848
00:43:40,990 --> 00:43:44,649
actually completely skip it

849
00:43:42,820 --> 00:43:47,110
because it's too complicated for them to

850
00:43:44,650 --> 00:43:52,930
try to sniff data and parse out what's

851
00:43:47,110 --> 00:43:56,430
in there so if a server has the ability

852
00:43:52,930 --> 00:43:58,750
to respond with multi-part range then

853
00:43:56,430 --> 00:44:01,029
you would actually be able to bypass the

854
00:43:58,750 --> 00:44:03,880
sniffing and be able to read it by

855
00:44:01,030 --> 00:44:08,140
pretending to be a script file trying to

856
00:44:03,880 --> 00:44:10,090
load the data so this there they say

857
00:44:08,140 --> 00:44:12,100
well it's recommended that you don't

858
00:44:10,090 --> 00:44:15,100
support that and on sensitive pages

859
00:44:12,100 --> 00:44:17,440
because it would potentially allow you

860
00:44:15,100 --> 00:44:19,470
to bypass this check and expert

861
00:44:17,440 --> 00:44:21,670
exfiltrate that sensitive information

862
00:44:19,470 --> 00:44:24,669
now I've also been told that Google has

863
00:44:21,670 --> 00:44:26,619
tried to mitigate this further I'm not

864
00:44:24,670 --> 00:44:31,290
totally sure how but this is something

865
00:44:26,619 --> 00:44:35,710
that is still being worked on somewhat

866
00:44:31,290 --> 00:44:38,230
alright so not a time left but I wanted

867
00:44:35,710 --> 00:44:40,300
to save my main takeaways here is that

868
00:44:38,230 --> 00:44:43,330
the sandbox doesn't always fully protect

869
00:44:40,300 --> 00:44:46,420
you if your data is in that sandbox if

870
00:44:43,330 --> 00:44:48,880
your data in the browser it may still be

871
00:44:46,420 --> 00:44:52,840
accessible to attackers who don't have

872
00:44:48,880 --> 00:44:57,250
sandbox of tapes which gapping can be

873
00:44:52,840 --> 00:45:00,310
very dangerous because a single end day

874
00:44:57,250 --> 00:45:06,130
could compromise all your user data in

875
00:45:00,310 --> 00:45:09,759
Safari or Firefox vendors need to work

876
00:45:06,130 --> 00:45:11,940
on removing these control from the

877
00:45:09,760 --> 00:45:14,920
rendering engine like Google is doing

878
00:45:11,940 --> 00:45:16,600
and but even with Google there's the

879
00:45:14,920 --> 00:45:18,820
slice elations not a hundred cent

880
00:45:16,600 --> 00:45:20,410
perfect but it's still the best best

881
00:45:18,820 --> 00:45:22,960
best thing we have so this is where

882
00:45:20,410 --> 00:45:26,170
things should be headed so that's pretty

883
00:45:22,960 --> 00:45:28,030
much all I have thank you for hanging

884
00:45:26,170 --> 00:45:29,980
out and listening to my talk hopefully

885
00:45:28,030 --> 00:45:33,370
it was interesting and site 'full may be

886
00:45:29,980 --> 00:45:37,530
a little scary all right thank you

887
00:45:33,370 --> 00:45:37,529
[Applause]

