1
00:00:11,910 --> 00:00:15,190
hey guys my name is Kevin from the

2
00:00:14,260 --> 00:00:17,170
University of Maryland

3
00:00:15,190 --> 00:00:18,939
hi everyone super excited to be here my

4
00:00:17,170 --> 00:00:20,290
name is George I did all this work at

5
00:00:18,939 --> 00:00:23,200
the University of Maryland and now I

6
00:00:20,290 --> 00:00:24,520
work at nsrc for Microsoft just want to

7
00:00:23,200 --> 00:00:28,000
give a huge shout out to all the blue

8
00:00:24,520 --> 00:00:30,669
hat organizers all the techs and just

9
00:00:28,000 --> 00:00:33,040
all the great job guys

10
00:00:30,669 --> 00:00:35,440
and all our code collaborators who

11
00:00:33,040 --> 00:00:37,269
couldn't be here to do this with us we

12
00:00:35,440 --> 00:00:39,849
often get asked at events like this

13
00:00:37,270 --> 00:00:41,230
why study censorship evasion like as a

14
00:00:39,850 --> 00:00:43,239
security researcher because isn't this a

15
00:00:41,230 --> 00:00:45,190
solved problem like sure censorship

16
00:00:43,239 --> 00:00:47,919
happens billions of people are censored

17
00:00:45,190 --> 00:00:51,039
but we have tor VPNs we've got secure

18
00:00:47,920 --> 00:00:54,250
HTTPS but that's just the thing right

19
00:00:51,039 --> 00:00:55,149
because we have all these things but

20
00:00:54,250 --> 00:00:57,550
there's countries around the world

21
00:00:55,149 --> 00:00:58,839
actively working to block these services

22
00:00:57,550 --> 00:01:00,190
to create these services or

23
00:00:58,839 --> 00:01:02,498
man-in-the-middle these things and this

24
00:01:00,190 --> 00:01:03,998
is just the name of you so censorship

25
00:01:02,499 --> 00:01:06,520
still affects billions of people around

26
00:01:03,999 --> 00:01:08,440
the world we're here to talk to you guys

27
00:01:06,520 --> 00:01:10,240
about is Geneva which is our effort to

28
00:01:08,440 --> 00:01:12,190
defeat censorship everywhere

29
00:01:10,240 --> 00:01:13,690
so we're bug hunters but doing it a

30
00:01:12,190 --> 00:01:16,539
little differently our goal is not to

31
00:01:13,690 --> 00:01:18,399
get shells or to compromised machines so

32
00:01:16,540 --> 00:01:19,570
we're super excited to be here and tell

33
00:01:18,400 --> 00:01:21,010
you about this work it really has the

34
00:01:19,570 --> 00:01:23,380
potential to change things up we think

35
00:01:21,010 --> 00:01:24,850
in the censorship arms race but before

36
00:01:23,380 --> 00:01:26,710
we get started to talk about Geneva

37
00:01:24,850 --> 00:01:28,179
defeating censors or bugs and great

38
00:01:26,710 --> 00:01:30,190
firewalls I want to take you guys

39
00:01:28,180 --> 00:01:33,700
through a little bit how censorship is

40
00:01:30,190 --> 00:01:35,830
operated today so there's many types of

41
00:01:33,700 --> 00:01:37,480
censorship around the world but some of

42
00:01:35,830 --> 00:01:39,820
the most pervasive is this type of

43
00:01:37,480 --> 00:01:42,100
automated in networked censorship run by

44
00:01:39,820 --> 00:01:43,960
nation-states now some nation states

45
00:01:42,100 --> 00:01:45,520
operate censorship like this and this is

46
00:01:43,960 --> 00:01:47,830
often what people picture when they see

47
00:01:45,520 --> 00:01:50,619
censorship where the sensor is

48
00:01:47,830 --> 00:01:52,420
physically inside the network path in

49
00:01:50,620 --> 00:01:54,550
practice though it's often difficult for

50
00:01:52,420 --> 00:01:57,220
censors to get machines on all the paths

51
00:01:54,550 --> 00:02:00,039
so instead the way many nations do this

52
00:01:57,220 --> 00:02:02,440
is a little like this where the attacker

53
00:02:00,040 --> 00:02:03,610
is on the path not in the path so

54
00:02:02,440 --> 00:02:05,200
instead of being a man of middle

55
00:02:03,610 --> 00:02:06,940
attacker there a man on the side

56
00:02:05,200 --> 00:02:08,470
attacker there are some really

57
00:02:06,940 --> 00:02:10,239
interesting implications to how

58
00:02:08,470 --> 00:02:12,160
censorship is performs when you have an

59
00:02:10,239 --> 00:02:14,620
attacker like this so let's see an

60
00:02:12,160 --> 00:02:16,930
example here we have a client let's say

61
00:02:14,620 --> 00:02:18,700
in China he's about to make a request to

62
00:02:16,930 --> 00:02:19,940
some forbidden resource let's say

63
00:02:18,700 --> 00:02:22,369
Wikipedia

64
00:02:19,940 --> 00:02:24,770
okay and here's this request and it's

65
00:02:22,370 --> 00:02:27,140
gonna move through the network alright

66
00:02:24,770 --> 00:02:29,120
so the request will go through and even

67
00:02:27,140 --> 00:02:31,459
though Wikipedia is a forbidden resource

68
00:02:29,120 --> 00:02:32,870
the server will still get a packet the

69
00:02:31,460 --> 00:02:35,540
censor will just get a copy of the

70
00:02:32,870 --> 00:02:37,010
packet so if the regime wants to censor

71
00:02:35,540 --> 00:02:39,230
the connection they can't just drop it

72
00:02:37,010 --> 00:02:41,149
because they're not in the path so

73
00:02:39,230 --> 00:02:43,670
instead the what the censor will do is

74
00:02:41,150 --> 00:02:46,130
it will inject its own traffic into the

75
00:02:43,670 --> 00:02:48,350
connection stream and specifically it's

76
00:02:46,130 --> 00:02:50,810
going to inject spoofed TCP tear down

77
00:02:48,350 --> 00:02:52,340
packets okay now these are normal

78
00:02:50,810 --> 00:02:54,440
packets our computers send these all the

79
00:02:52,340 --> 00:02:55,880
time and the purpose of these packets is

80
00:02:54,440 --> 00:02:58,160
basically just to say don't talk to me

81
00:02:55,880 --> 00:02:59,690
and the sensor is going to send two of

82
00:02:58,160 --> 00:03:01,850
these it's going to send one to the

83
00:02:59,690 --> 00:03:02,960
client pretending to be the server and

84
00:03:01,850 --> 00:03:06,230
it's going to send one to the server

85
00:03:02,960 --> 00:03:07,670
pretending to be a client all right now

86
00:03:06,230 --> 00:03:09,230
both sides are going to get this packet

87
00:03:07,670 --> 00:03:11,119
and the client is going to see it it's

88
00:03:09,230 --> 00:03:13,160
gonna say oh looks like the server just

89
00:03:11,120 --> 00:03:15,050
shut down our connection and the server

90
00:03:13,160 --> 00:03:16,700
is gonna say looks like the client wants

91
00:03:15,050 --> 00:03:17,990
to stop talking to me and both sides

92
00:03:16,700 --> 00:03:19,910
will immediately stop talking to each

93
00:03:17,990 --> 00:03:23,000
other and just like that censorship has

94
00:03:19,910 --> 00:03:25,400
been achieved okay but if you think

95
00:03:23,000 --> 00:03:26,989
about this as the sensor you need some

96
00:03:25,400 --> 00:03:28,940
information about the connection to pull

97
00:03:26,989 --> 00:03:30,470
this attack off right you need to know

98
00:03:28,940 --> 00:03:31,489
the sequence acknowledgment numbers you

99
00:03:30,470 --> 00:03:33,859
gotta know the source port destination

100
00:03:31,489 --> 00:03:37,940
port so you actually need to be tracking

101
00:03:33,860 --> 00:03:39,680
per flow state of the connection so to

102
00:03:37,940 --> 00:03:41,750
do this at the censorship scale if

103
00:03:39,680 --> 00:03:43,400
you're trying to pull off this attack

104
00:03:41,750 --> 00:03:45,380
you need to be tracking the state of all

105
00:03:43,400 --> 00:03:47,630
TCP connections coming into and out of

106
00:03:45,380 --> 00:03:49,910
your country and if you are trying to

107
00:03:47,630 --> 00:03:51,680
track the TCP state of every single

108
00:03:49,910 --> 00:03:53,660
connection coming into or out of a

109
00:03:51,680 --> 00:03:55,970
country the size of the nation of China

110
00:03:53,660 --> 00:03:57,650
you were going to necessarily have to

111
00:03:55,970 --> 00:04:00,500
take some shortcuts or write bugs

112
00:03:57,650 --> 00:04:02,690
along the way and we as evaders can take

113
00:04:00,500 --> 00:04:03,980
advantage of these shortcuts so let me

114
00:04:02,690 --> 00:04:05,930
walk you through an example of what this

115
00:04:03,980 --> 00:04:07,549
can look like as a debater this is from

116
00:04:05,930 --> 00:04:10,250
prior work the researchers have found in

117
00:04:07,550 --> 00:04:12,050
the past so once again our client is

118
00:04:10,250 --> 00:04:14,660
about to make a request once again to

119
00:04:12,050 --> 00:04:16,459
Wikipedia but instead we're going to do

120
00:04:14,660 --> 00:04:18,260
before we send our request is the

121
00:04:16,459 --> 00:04:20,930
clients going to inject its own packet

122
00:04:18,260 --> 00:04:23,630
into the connection stream okay and it's

123
00:04:20,930 --> 00:04:25,070
gonna send its own TCP reset but we're

124
00:04:23,630 --> 00:04:27,650
going to send it in such a way that we

125
00:04:25,070 --> 00:04:29,240
set the TTL or time to live now this is

126
00:04:27,650 --> 00:04:30,469
a measure of how long the packet

127
00:04:29,240 --> 00:04:32,380
survives in the network it decrements

128
00:04:30,470 --> 00:04:34,240
once per hop

129
00:04:32,380 --> 00:04:36,820
gonna set the TTL high enough such that

130
00:04:34,240 --> 00:04:39,160
it reaches the sensor but not high

131
00:04:36,820 --> 00:04:40,420
enough to reach the server okay

132
00:04:39,160 --> 00:04:43,030
so we'll send this packet just like

133
00:04:40,420 --> 00:04:44,410
before so if you'll notice just like

134
00:04:43,030 --> 00:04:46,270
before the sensor gets a copy of the

135
00:04:44,410 --> 00:04:48,970
packet okay but the server won't it gets

136
00:04:46,270 --> 00:04:51,099
dropped along the way so at this point

137
00:04:48,970 --> 00:04:52,750
the sensor sees this packet and says

138
00:04:51,100 --> 00:04:54,820
looks like the client just terminated

139
00:04:52,750 --> 00:04:57,280
its connection I can stop tracking it

140
00:04:54,820 --> 00:04:59,500
now and it throws away the state it's

141
00:04:57,280 --> 00:05:00,880
maintaining of this connection and at

142
00:04:59,500 --> 00:05:02,770
this point now we're free to communicate

143
00:05:00,880 --> 00:05:05,170
client and server for the rest of this

144
00:05:02,770 --> 00:05:06,729
flow free of censorship because the

145
00:05:05,170 --> 00:05:08,560
sensor has no state with which to censor

146
00:05:06,730 --> 00:05:10,660
us and the server never even knew we

147
00:05:08,560 --> 00:05:12,340
pulled off this trick this is one of

148
00:05:10,660 --> 00:05:15,180
these cool ways that researchers in past

149
00:05:12,340 --> 00:05:17,710
I found to defeat censorship now

150
00:05:15,180 --> 00:05:19,390
unfortunately we've come up with many of

151
00:05:17,710 --> 00:05:21,700
these type approaches but most of them

152
00:05:19,390 --> 00:05:23,770
no longer work most of them have been

153
00:05:21,700 --> 00:05:25,060
killed off over time and it kind of

154
00:05:23,770 --> 00:05:30,849
comes down to how we've always done this

155
00:05:25,060 --> 00:05:32,770
research because historically the way

156
00:05:30,850 --> 00:05:34,120
research in the space and just us as

157
00:05:32,770 --> 00:05:35,169
researchers always approach problems

158
00:05:34,120 --> 00:05:38,320
like this has always looked a little

159
00:05:35,170 --> 00:05:40,240
like this we take hypotheses we make we

160
00:05:38,320 --> 00:05:42,250
make hypotheses we take measurements and

161
00:05:40,240 --> 00:05:44,040
we iterally work to build up a good

162
00:05:42,250 --> 00:05:45,250
mental model of how the sensor operates

163
00:05:44,040 --> 00:05:47,140
okay

164
00:05:45,250 --> 00:05:49,180
and then once we do that and have our

165
00:05:47,140 --> 00:05:51,940
good understanding we apply some of our

166
00:05:49,180 --> 00:05:54,160
good training and human intuition and we

167
00:05:51,940 --> 00:05:57,190
make some tool we put out some vlog and

168
00:05:54,160 --> 00:05:59,020
we defeat censorship but of course then

169
00:05:57,190 --> 00:06:00,520
the sensor goes ahead and downloads our

170
00:05:59,020 --> 00:06:02,740
tool and reads our paper and sees our

171
00:06:00,520 --> 00:06:04,539
blog and they update themselves and

172
00:06:02,740 --> 00:06:06,460
we've been at this disadvantage to

173
00:06:04,540 --> 00:06:08,770
sensors from the beginning because to us

174
00:06:06,460 --> 00:06:10,539
sensors are a black box we don't get

175
00:06:08,770 --> 00:06:12,310
their code we don't see how they operate

176
00:06:10,540 --> 00:06:14,980
on the inside we can only poke them from

177
00:06:12,310 --> 00:06:16,840
afar so it's much faster for sensors to

178
00:06:14,980 --> 00:06:18,880
update themselves in most cases than it

179
00:06:16,840 --> 00:06:21,099
is for us to do this largely manual

180
00:06:18,880 --> 00:06:23,140
process of understanding taking

181
00:06:21,100 --> 00:06:25,840
measurements this has put us at a big

182
00:06:23,140 --> 00:06:27,430
disadvantage historically so we saw this

183
00:06:25,840 --> 00:06:29,260
problem in kind of a Genesis for this

184
00:06:27,430 --> 00:06:32,920
work was to try and give a fader as the

185
00:06:29,260 --> 00:06:34,360
advantage instead okay so the model

186
00:06:32,920 --> 00:06:35,650
we're here to tell you guys about today

187
00:06:34,360 --> 00:06:37,600
it's going to turn this on its head a

188
00:06:35,650 --> 00:06:39,789
little bit and our model looks a little

189
00:06:37,600 --> 00:06:42,220
something like this so we're proposing

190
00:06:39,790 --> 00:06:45,169
automated or AIS acid censorship evasion

191
00:06:42,220 --> 00:06:47,330
research so step one is

192
00:06:45,169 --> 00:06:49,128
you take some AI fuzzer learning

193
00:06:47,330 --> 00:06:51,770
algorithm and you just pointed at the

194
00:06:49,129 --> 00:06:53,840
server and you let it rip and it's step

195
00:06:51,770 --> 00:06:56,688
one let it run it machine speed and

196
00:06:53,840 --> 00:06:59,179
defeat censorship it machine speed at

197
00:06:56,689 --> 00:07:00,710
that point at step one we can now put

198
00:06:59,180 --> 00:07:02,509
what the AI has found out to the world

199
00:07:00,710 --> 00:07:04,008
and people can use what it is found to

200
00:07:02,509 --> 00:07:06,319
defeat censorship so we can defeat

201
00:07:04,009 --> 00:07:07,759
censorship at machine speed but sensors

202
00:07:06,319 --> 00:07:10,939
must still update themselves at human

203
00:07:07,759 --> 00:07:12,680
speed and then after the fact we as

204
00:07:10,939 --> 00:07:14,990
researchers can go back and look at what

205
00:07:12,680 --> 00:07:16,699
the AI has found and identified and then

206
00:07:14,990 --> 00:07:18,919
update our mental models after the fact

207
00:07:16,699 --> 00:07:20,629
and say well this strategy worked so the

208
00:07:18,919 --> 00:07:22,659
sensor has to work like this this one

209
00:07:20,629 --> 00:07:26,509
didn't so the sensors changed recently

210
00:07:22,659 --> 00:07:28,279
okay we can do this after the fact now

211
00:07:26,509 --> 00:07:30,919
this sounds ridiculous we've actually

212
00:07:28,279 --> 00:07:32,779
built and deployed the system we've

213
00:07:30,919 --> 00:07:35,859
built it as a genetic algorithm which we

214
00:07:32,779 --> 00:07:37,879
call Geneva standing for genetic evasion

215
00:07:35,860 --> 00:07:39,289
so for the rest of this talk I'm going

216
00:07:37,879 --> 00:07:40,789
to take you through how we designed and

217
00:07:39,289 --> 00:07:42,378
built Geneva some of the challenges and

218
00:07:40,789 --> 00:07:44,479
setting that up and then we're going to

219
00:07:42,379 --> 00:07:45,469
take you through how we ran Geneva and

220
00:07:44,479 --> 00:07:48,370
some of its results against the

221
00:07:45,469 --> 00:07:50,960
real-world sensors around the world so

222
00:07:48,370 --> 00:07:53,360
Geneva is a genetic algorithm which is a

223
00:07:50,960 --> 00:07:54,529
biologically inspired system and I'll

224
00:07:53,360 --> 00:07:55,969
walk you through what genetic algorithms

225
00:07:54,529 --> 00:07:58,669
can look like just using us humans to

226
00:07:55,969 --> 00:07:59,899
samples okay if you want to build a

227
00:07:58,669 --> 00:08:01,279
genetic algorithm there's a couple

228
00:07:59,899 --> 00:08:03,979
things you need and the first is

229
00:08:01,279 --> 00:08:05,750
building blocks so for us as humans our

230
00:08:03,979 --> 00:08:07,039
building blocks is just these DNA bases

231
00:08:05,750 --> 00:08:10,099
all right ACTG

232
00:08:07,039 --> 00:08:11,990
and alone they can't do too much when

233
00:08:10,099 --> 00:08:14,330
you have some way to compose them like

234
00:08:11,990 --> 00:08:15,669
to our DNA or RNA suddenly they become

235
00:08:14,330 --> 00:08:17,779
much greater than the sum of their parts

236
00:08:15,669 --> 00:08:19,159
so you need some starting points and

237
00:08:17,779 --> 00:08:21,529
building blocks and some way to put them

238
00:08:19,159 --> 00:08:23,688
together next you need some way to

239
00:08:21,529 --> 00:08:25,069
mutate them or mate them and that

240
00:08:23,689 --> 00:08:28,129
happens for us just between generations

241
00:08:25,069 --> 00:08:29,599
and finally some features metric to

242
00:08:28,129 --> 00:08:31,490
answer the question of which individuals

243
00:08:29,599 --> 00:08:34,490
are fittest which survive to the next

244
00:08:31,490 --> 00:08:36,860
generations okay so a couple challenges

245
00:08:34,490 --> 00:08:39,229
in this set up and applying this to a

246
00:08:36,860 --> 00:08:42,440
problem like censorship evasion so let's

247
00:08:39,229 --> 00:08:44,420
take a look at building blocks okay and

248
00:08:42,440 --> 00:08:46,940
we want Geneva to run strictly at the

249
00:08:44,420 --> 00:08:48,800
client okay so basically what it's going

250
00:08:46,940 --> 00:08:50,930
to be doing is manipulating packets and

251
00:08:48,800 --> 00:08:52,729
manipulating the packet stream coming

252
00:08:50,930 --> 00:08:54,500
into and out of the client but this

253
00:08:52,730 --> 00:08:56,209
already at step one raises some pretty

254
00:08:54,500 --> 00:08:58,050
big questions because if you think about

255
00:08:56,209 --> 00:08:59,819
it there's a lot of ways

256
00:08:58,050 --> 00:09:02,579
you could give an algorithm abilities to

257
00:08:59,820 --> 00:09:04,950
change packets so for example on one

258
00:09:02,580 --> 00:09:06,750
hand we could let it just manipulate any

259
00:09:04,950 --> 00:09:07,950
bit just give the whole packet as a

260
00:09:06,750 --> 00:09:10,080
stream of bits and let it change

261
00:09:07,950 --> 00:09:12,089
anything this would be super versatile

262
00:09:10,080 --> 00:09:14,490
right in theory it could learn anything

263
00:09:12,089 --> 00:09:17,279
but you can imagine it taking forever

264
00:09:14,490 --> 00:09:18,600
just learn something like a checksum so

265
00:09:17,279 --> 00:09:20,880
in practice we find this is not such a

266
00:09:18,600 --> 00:09:22,800
great idea now on the other hand if we

267
00:09:20,880 --> 00:09:25,079
want to really go in on speed we can

268
00:09:22,800 --> 00:09:26,910
encode it with some known strategies so

269
00:09:25,079 --> 00:09:28,500
for example that TTL limited reset I

270
00:09:26,910 --> 00:09:29,819
showed you at the beginning we could

271
00:09:28,500 --> 00:09:31,890
encode things like that as building

272
00:09:29,820 --> 00:09:33,510
blocks this would be highly efficient

273
00:09:31,890 --> 00:09:35,880
right and be able to find things much

274
00:09:33,510 --> 00:09:37,439
more quickly but the downside is we

275
00:09:35,880 --> 00:09:39,329
would be encoding our own human bias

276
00:09:37,440 --> 00:09:40,860
into it we'd be forcing it to look in

277
00:09:39,329 --> 00:09:43,489
spaces that humans have already explored

278
00:09:40,860 --> 00:09:46,050
and would really let it support no more

279
00:09:43,490 --> 00:09:47,880
so what we land on here is letting

280
00:09:46,050 --> 00:09:50,760
Geneva do what IP v4 does to your

281
00:09:47,880 --> 00:09:52,589
packets normally okay so we give it four

282
00:09:50,760 --> 00:09:56,519
building blocks these are duplicate

283
00:09:52,589 --> 00:09:57,720
tamper fragment and drop so duplicate is

284
00:09:56,519 --> 00:09:59,370
exactly what it sounds like

285
00:09:57,720 --> 00:10:02,220
you take one packet you have two packets

286
00:09:59,370 --> 00:10:04,829
now tamper is you have one packet you

287
00:10:02,220 --> 00:10:06,740
change it in some way fragment you take

288
00:10:04,829 --> 00:10:09,089
one packet and it makes two packets and

289
00:10:06,740 --> 00:10:11,459
drop you take the packet and you drop it

290
00:10:09,089 --> 00:10:13,920
on the floor it goes away now I'll call

291
00:10:11,459 --> 00:10:15,810
out two things specifically here for

292
00:10:13,920 --> 00:10:18,870
fragment we let our altar or corrupts

293
00:10:15,810 --> 00:10:20,729
any TCP IP header fields and importantly

294
00:10:18,870 --> 00:10:22,440
we're not encoding any semantic

295
00:10:20,730 --> 00:10:24,540
understanding of what these fields mean

296
00:10:22,440 --> 00:10:26,430
so Geneva can change the flags fields

297
00:10:24,540 --> 00:10:27,990
and it sees that as a field of bits it

298
00:10:26,430 --> 00:10:29,790
can manipulate but it doesn't have any

299
00:10:27,990 --> 00:10:31,440
understanding that if I set this to a

300
00:10:29,790 --> 00:10:33,599
syn that means the start of a connection

301
00:10:31,440 --> 00:10:34,890
and then after it does that we will go

302
00:10:33,600 --> 00:10:36,149
back and make sure the packet is seen

303
00:10:34,890 --> 00:10:39,480
tactically correct will update the

304
00:10:36,149 --> 00:10:41,370
checksums the lengths etc I'll also call

305
00:10:39,480 --> 00:10:43,470
out fragment here it does a bit of

306
00:10:41,370 --> 00:10:45,750
double duty at the IP layer akin

307
00:10:43,470 --> 00:10:49,260
fragment packets at the TCP layer it can

308
00:10:45,750 --> 00:10:50,790
segment the packets okay so at this

309
00:10:49,260 --> 00:10:52,589
point we have our building blocks to

310
00:10:50,790 --> 00:10:54,779
work with now we just need a way to put

311
00:10:52,589 --> 00:10:56,310
them together if you look at these

312
00:10:54,779 --> 00:10:58,860
building blocks they kind of give us a

313
00:10:56,310 --> 00:11:00,630
nice way to put them together a tamper

314
00:10:58,860 --> 00:11:03,420
you take one packet and you end with one

315
00:11:00,630 --> 00:11:05,120
packet but duplicate in fragment you

316
00:11:03,420 --> 00:11:07,529
take one packet you end with two packets

317
00:11:05,120 --> 00:11:09,420
so we can do is start composing these

318
00:11:07,529 --> 00:11:11,010
things into a tree structure

319
00:11:09,420 --> 00:11:13,740
and that can look a little something

320
00:11:11,010 --> 00:11:15,840
like this okay so we can put these

321
00:11:13,740 --> 00:11:17,970
actions together at the top of our tree

322
00:11:15,840 --> 00:11:20,220
we have a duplicate if it sees a packet

323
00:11:17,970 --> 00:11:22,410
it will take it and duplicate to the

324
00:11:20,220 --> 00:11:24,690
left side it won't do anything to the

325
00:11:22,410 --> 00:11:27,180
right side it will tamper it by changing

326
00:11:24,690 --> 00:11:29,820
the TCP flags and then set the TTL

327
00:11:27,180 --> 00:11:31,260
fields now the last thing we need with

328
00:11:29,820 --> 00:11:33,570
this composition now that we have a way

329
00:11:31,260 --> 00:11:36,060
to compose these actions is to decide

330
00:11:33,570 --> 00:11:38,790
when to run them right we don't want to

331
00:11:36,060 --> 00:11:40,739
necessarily just run on everything so

332
00:11:38,790 --> 00:11:43,560
lastly we encode this idea of a trigger

333
00:11:40,740 --> 00:11:46,230
and that's this thing at the top so this

334
00:11:43,560 --> 00:11:48,569
trigger here is any outbound TCP packet

335
00:11:46,230 --> 00:11:51,300
that has the flag field set to act an

336
00:11:48,570 --> 00:11:53,970
exact match it will capture that packet

337
00:11:51,300 --> 00:11:55,609
and run this tree so let's see what this

338
00:11:53,970 --> 00:11:58,560
looks like in practice

339
00:11:55,610 --> 00:12:00,000
so once again we've got our client he's

340
00:11:58,560 --> 00:12:01,500
about to make a request to the server

341
00:12:00,000 --> 00:12:03,570
and he's just about to finish the

342
00:12:01,500 --> 00:12:05,910
three-way handshake so he's about to

343
00:12:03,570 --> 00:12:07,650
sent an act packet now Geneva will

344
00:12:05,910 --> 00:12:09,329
identify that this packet matches an

345
00:12:07,650 --> 00:12:12,060
active trigger and it will pull it into

346
00:12:09,330 --> 00:12:14,070
the tree it will duplicate the packet

347
00:12:12,060 --> 00:12:16,709
the left side is done so it won't do

348
00:12:14,070 --> 00:12:19,140
anything further on the right side it

349
00:12:16,710 --> 00:12:21,390
changed the flags field to reset sets

350
00:12:19,140 --> 00:12:24,360
the TTL then we do an inorder traversal

351
00:12:21,390 --> 00:12:26,490
of leaves and send the packets so we

352
00:12:24,360 --> 00:12:28,740
send the first one we send the second

353
00:12:26,490 --> 00:12:31,530
one and we're done and if you'll notice

354
00:12:28,740 --> 00:12:33,630
this tree exactly captures the strategy

355
00:12:31,530 --> 00:12:36,240
I open this talk with right this here is

356
00:12:33,630 --> 00:12:37,620
a TTL limit agree set attack and in fact

357
00:12:36,240 --> 00:12:39,060
we find that this structure is

358
00:12:37,620 --> 00:12:41,220
expressive enough that we were able to

359
00:12:39,060 --> 00:12:43,170
go back to all prior work in this pack

360
00:12:41,220 --> 00:12:46,130
of manipulation space and reexpress

361
00:12:43,170 --> 00:12:48,839
those strategies in these type of trees

362
00:12:46,130 --> 00:12:50,550
so now we have a way to compose these

363
00:12:48,840 --> 00:12:53,940
actions together and use them for the

364
00:12:50,550 --> 00:12:55,109
genetic algorithm next mutation and this

365
00:12:53,940 --> 00:12:57,240
is actually the easiest one because

366
00:12:55,110 --> 00:12:58,590
there's so many different ways we can

367
00:12:57,240 --> 00:13:01,170
you take these things you can change

368
00:12:58,590 --> 00:13:03,120
types switch actions out swap sub trees

369
00:13:01,170 --> 00:13:04,620
if you're interested in the full list

370
00:13:03,120 --> 00:13:07,710
it's available on our paper of the

371
00:13:04,620 --> 00:13:10,470
mutations we exposed to Geneva lastly is

372
00:13:07,710 --> 00:13:11,970
the Fitness metric and Fitness is

373
00:13:10,470 --> 00:13:14,820
basically trying to answer the question

374
00:13:11,970 --> 00:13:16,650
which individuals are fittest which

375
00:13:14,820 --> 00:13:19,530
should survive to the next generation

376
00:13:16,650 --> 00:13:21,090
and propagate okay and it basically

377
00:13:19,530 --> 00:13:21,839
comes down to an a genetic algorithm

378
00:13:21,090 --> 00:13:24,090
what behave

379
00:13:21,840 --> 00:13:26,550
do we want to reward and what behavior

380
00:13:24,090 --> 00:13:28,040
do we want to punish and specifically

381
00:13:26,550 --> 00:13:30,900
what we land on looks a little like this

382
00:13:28,040 --> 00:13:32,880
we punish it very strongly if it doesn't

383
00:13:30,900 --> 00:13:34,829
trigger in any packets so we encourage

384
00:13:32,880 --> 00:13:38,130
it to find triggers that are precise and

385
00:13:34,830 --> 00:13:39,930
operate next we punish it a lot if it

386
00:13:38,130 --> 00:13:41,939
breaks the tea underlying TCP connection

387
00:13:39,930 --> 00:13:43,439
we want to encourage it to search the

388
00:13:41,940 --> 00:13:45,180
space of strategies that keep the

389
00:13:43,440 --> 00:13:48,450
underlying TCP connection alive

390
00:13:45,180 --> 00:13:49,829
of course we reward it very much if it

391
00:13:48,450 --> 00:13:52,950
successfully obtains the forbidden

392
00:13:49,830 --> 00:13:55,920
content it defeats the censor at this

393
00:13:52,950 --> 00:13:59,700
point we could be done right this alone

394
00:13:55,920 --> 00:14:01,439
would be good enough to work but yeah I

395
00:13:59,700 --> 00:14:03,540
could go and run and learn some

396
00:14:01,440 --> 00:14:05,130
enormously complicated thing but we as

397
00:14:03,540 --> 00:14:06,360
researchers we kind of want to

398
00:14:05,130 --> 00:14:09,000
understand what that enormous the

399
00:14:06,360 --> 00:14:11,070
complicated thing is doing so lastly we

400
00:14:09,000 --> 00:14:13,680
give it one more reward for making the

401
00:14:11,070 --> 00:14:15,540
strategy concise and understandable so

402
00:14:13,680 --> 00:14:17,250
we can run it we'll find something and

403
00:14:15,540 --> 00:14:20,969
then trim it down so us humans can

404
00:14:17,250 --> 00:14:22,890
understand it more easily so this in a

405
00:14:20,970 --> 00:14:24,270
nutshell is Geneva we're now ready to

406
00:14:22,890 --> 00:14:26,310
start taking this thing and running it

407
00:14:24,270 --> 00:14:28,020
against real world sensors so I will

408
00:14:26,310 --> 00:14:30,199
turn it over to George to show you about

409
00:14:28,020 --> 00:14:34,199
some of the results jenny was found

410
00:14:30,200 --> 00:14:35,610
thank you so much Kevin we deployed

411
00:14:34,200 --> 00:14:39,210
Geneva in three different countries

412
00:14:35,610 --> 00:14:40,470
China India and Kazakhstan and I'm going

413
00:14:39,210 --> 00:14:42,480
to take you through some of the really

414
00:14:40,470 --> 00:14:45,180
cool technical details of the strategies

415
00:14:42,480 --> 00:14:47,400
we found but before we can do that we

416
00:14:45,180 --> 00:14:49,469
need a better grasp on what censorship

417
00:14:47,400 --> 00:14:50,790
looks like in these three countries so

418
00:14:49,470 --> 00:14:53,100
that we can understand the strategies

419
00:14:50,790 --> 00:14:56,969
themselves better it works over several

420
00:14:53,100 --> 00:14:59,220
protocols including FTP DNS HTTP and

421
00:14:56,970 --> 00:15:01,350
more and this works exactly like Kevin

422
00:14:59,220 --> 00:15:03,830
said earlier it's just injecting TCP

423
00:15:01,350 --> 00:15:06,600
resets into both sides of the connection

424
00:15:03,830 --> 00:15:08,910
by contrast India is the least

425
00:15:06,600 --> 00:15:10,640
sophisticated of the three sensors we

426
00:15:08,910 --> 00:15:13,079
think this is due to the fact that

427
00:15:10,640 --> 00:15:16,410
India's censorship actually works on a

428
00:15:13,080 --> 00:15:19,680
per ISP basis so each individual ISP is

429
00:15:16,410 --> 00:15:21,390
building their own censorship system and

430
00:15:19,680 --> 00:15:23,969
what we found here is they just take a

431
00:15:21,390 --> 00:15:26,310
look at the HTTP requests and they take

432
00:15:23,970 --> 00:15:28,740
out the host header if that host header

433
00:15:26,310 --> 00:15:30,270
is a blocked page then they'll censor

434
00:15:28,740 --> 00:15:33,600
the connection just by injecting into

435
00:15:30,270 --> 00:15:35,400
the HTTP stream a blocked page finally

436
00:15:33,600 --> 00:15:38,610
we have Kazakhstan which

437
00:15:35,400 --> 00:15:40,500
works over HTTP and HTTPS their HTTPS

438
00:15:38,610 --> 00:15:42,300
system is actually super interesting and

439
00:15:40,500 --> 00:15:44,550
the way this works is it sits in the

440
00:15:42,300 --> 00:15:46,500
middle of the connection and whenever it

441
00:15:44,550 --> 00:15:48,719
wants to censor the connection it will

442
00:15:46,500 --> 00:15:50,910
inject a fake response using a DNS root

443
00:15:48,720 --> 00:15:54,780
certificate and black hole the remaining

444
00:15:50,910 --> 00:15:56,069
traffic Geneva was really really good at

445
00:15:54,780 --> 00:15:58,380
finding strategies in these three

446
00:15:56,070 --> 00:16:00,570
countries in fact it was so good that we

447
00:15:58,380 --> 00:16:02,300
needed a better way to explain them so

448
00:16:00,570 --> 00:16:05,040
we created this thing called a taxonomy

449
00:16:02,300 --> 00:16:08,250
our taxonomy has three separate tiers

450
00:16:05,040 --> 00:16:10,319
species subspecies and variants and I'll

451
00:16:08,250 --> 00:16:12,150
think you through this real quick so we

452
00:16:10,320 --> 00:16:14,430
call a species like the underlying bug

453
00:16:12,150 --> 00:16:17,160
or overarching it's more of a class of

454
00:16:14,430 --> 00:16:18,870
bugs in a way and Geneva can exploit an

455
00:16:17,160 --> 00:16:22,199
individual bug in several different ways

456
00:16:18,870 --> 00:16:24,510
each way we call a subspecies finally

457
00:16:22,200 --> 00:16:28,950
each functionally distinct strategy we

458
00:16:24,510 --> 00:16:31,560
call a variant in China we found 31 such

459
00:16:28,950 --> 00:16:34,170
variants in India we found six and in

460
00:16:31,560 --> 00:16:36,420
Kazakhstan we found 13 now I realize

461
00:16:34,170 --> 00:16:39,449
this doesn't add up to 36 I can do math

462
00:16:36,420 --> 00:16:40,860
I can add the reason for that is some of

463
00:16:39,450 --> 00:16:42,840
the strategies that work in China will

464
00:16:40,860 --> 00:16:45,530
also work in other countries so there's

465
00:16:42,840 --> 00:16:47,850
a little bit of overlap between the two

466
00:16:45,530 --> 00:16:49,470
I'd now like to take you through some

467
00:16:47,850 --> 00:16:51,780
really cool strategies on the client

468
00:16:49,470 --> 00:16:53,280
side that we're excited about the first

469
00:16:51,780 --> 00:16:55,620
one is called the turnaround species

470
00:16:53,280 --> 00:16:57,720
this isn't something crazy new that

471
00:16:55,620 --> 00:17:00,480
Geneva found in fact this worked about

472
00:16:57,720 --> 00:17:03,630
five or six years ago in China but it

473
00:17:00,480 --> 00:17:06,329
works in Kazakhstan today the way this

474
00:17:03,630 --> 00:17:07,530
strategy works is we take a syn packet

475
00:17:06,329 --> 00:17:10,109
so this is just at the start of the

476
00:17:07,530 --> 00:17:12,750
connection and we duplicate it to that

477
00:17:10,109 --> 00:17:15,329
first duplicate we change the flags to

478
00:17:12,750 --> 00:17:19,319
syn ACK and then we send a normal syn as

479
00:17:15,329 --> 00:17:21,720
as is normal in TCP the way this looks

480
00:17:19,319 --> 00:17:23,909
to the server is it gets the syn ACK

481
00:17:21,720 --> 00:17:25,440
packet in and it says I don't have a

482
00:17:23,910 --> 00:17:25,830
corresponding connection for this syn

483
00:17:25,440 --> 00:17:27,750
ACK

484
00:17:25,829 --> 00:17:29,520
this isn't DCP compliant I don't know

485
00:17:27,750 --> 00:17:31,980
what to do with it let's drop it on the

486
00:17:29,520 --> 00:17:33,690
floor then it sees the normal sin comes

487
00:17:31,980 --> 00:17:35,220
through it says alright this makes sense

488
00:17:33,690 --> 00:17:37,470
I know what to do here let's move

489
00:17:35,220 --> 00:17:40,530
forward with this connection but that's

490
00:17:37,470 --> 00:17:42,690
not what happens at the sensor instead

491
00:17:40,530 --> 00:17:44,100
the sensor sees this syn ACK packet and

492
00:17:42,690 --> 00:17:46,890
thinks oh my god I must have somehow

493
00:17:44,100 --> 00:17:48,480
missed a syn packet and the only way

494
00:17:46,890 --> 00:17:48,900
that a syn ACK packet could be coming

495
00:17:48,480 --> 00:17:51,000
through the

496
00:17:48,900 --> 00:17:53,190
connection is if it's coming from the

497
00:17:51,000 --> 00:17:56,160
server but remember that's not the case

498
00:17:53,190 --> 00:17:58,130
here where the client so now we've

499
00:17:56,160 --> 00:18:00,870
successfully reversed the roles of

500
00:17:58,130 --> 00:18:03,360
client and server in the minds of the

501
00:18:00,870 --> 00:18:04,979
sensor and this is actually enough to

502
00:18:03,360 --> 00:18:07,169
get around censorship in Kazakhstan

503
00:18:04,980 --> 00:18:08,790
because it means to differentiate

504
00:18:07,170 --> 00:18:10,260
packets that come from client and server

505
00:18:08,790 --> 00:18:12,870
because it has to handle them

506
00:18:10,260 --> 00:18:14,760
differently let's take a look at a

507
00:18:12,870 --> 00:18:16,530
little bit of a more complex species

508
00:18:14,760 --> 00:18:19,320
this one is called the segmentation

509
00:18:16,530 --> 00:18:21,000
species and this works in China today

510
00:18:19,320 --> 00:18:23,790
this is actually a really really cool

511
00:18:21,000 --> 00:18:25,320
strategy because it's highly surprising

512
00:18:23,790 --> 00:18:26,550
that it exists at all and this is

513
00:18:25,320 --> 00:18:29,700
completely new to something Geneva's

514
00:18:26,550 --> 00:18:31,919
found the reason this is so surprising

515
00:18:29,700 --> 00:18:33,840
is because Geneva or sorry

516
00:18:31,920 --> 00:18:37,170
China has been able to reassemble

517
00:18:33,840 --> 00:18:38,580
packets now for nearly a decade and all

518
00:18:37,170 --> 00:18:43,400
we're doing here is splitting this

519
00:18:38,580 --> 00:18:43,399
packet up twice so we take a normal HTML

520
00:18:44,660 --> 00:18:52,020
soldier search equals ultrasurf and we

521
00:18:48,600 --> 00:18:54,120
split it up twice and ultrasurf is just

522
00:18:52,020 --> 00:18:55,680
like it's a popular circumvention tool

523
00:18:54,120 --> 00:18:58,530
china doesn't want this no it's it's

524
00:18:55,680 --> 00:19:00,570
citizens about okay so we're splitting

525
00:18:58,530 --> 00:19:02,129
this up twice and when i'm first

526
00:19:00,570 --> 00:19:03,870
thinking about this you know i think

527
00:19:02,130 --> 00:19:06,090
maybe what we're doing here is somehow

528
00:19:03,870 --> 00:19:08,729
splitting up ultrasurf along different

529
00:19:06,090 --> 00:19:10,470
packets and the sensor can't put those

530
00:19:08,730 --> 00:19:13,710
packets back together and then it gets

531
00:19:10,470 --> 00:19:17,100
confused but that's not the case check

532
00:19:13,710 --> 00:19:19,230
this out the way that we split up these

533
00:19:17,100 --> 00:19:22,439
packets is such that ultrasurf is held

534
00:19:19,230 --> 00:19:24,540
entirely in one packet and remember this

535
00:19:22,440 --> 00:19:28,050
is sent in plaintext on the connection

536
00:19:24,540 --> 00:19:30,210
it's it's just right there anyone can

537
00:19:28,050 --> 00:19:32,100
see it it's in order it's very easy for

538
00:19:30,210 --> 00:19:34,620
the sensor to see it and sense of the

539
00:19:32,100 --> 00:19:37,590
connection if they want to these are

540
00:19:34,620 --> 00:19:39,120
sent in order and we have a couple of

541
00:19:37,590 --> 00:19:41,490
interesting constraints that we found

542
00:19:39,120 --> 00:19:43,320
about this the first constraint is that

543
00:19:41,490 --> 00:19:46,110
the first packet must be less than or

544
00:19:43,320 --> 00:19:48,030
equal to 8 bytes long and the second

545
00:19:46,110 --> 00:19:49,679
constraint is that the sum of the

546
00:19:48,030 --> 00:19:51,240
lengths of the first two packets must be

547
00:19:49,680 --> 00:19:52,620
greater than or equal to tol bytes long

548
00:19:51,240 --> 00:19:55,050
there's a couple of interesting

549
00:19:52,620 --> 00:19:56,489
constraints that are additional if

550
00:19:55,050 --> 00:19:59,040
you're interested please read our paper

551
00:19:56,490 --> 00:20:00,600
come talk to us so remember this is

552
00:19:59,040 --> 00:20:02,810
really really surprising that we're able

553
00:20:00,600 --> 00:20:04,429
to find this we have a couple of

554
00:20:02,810 --> 00:20:06,379
but I don't want to be a conspiracy

555
00:20:04,430 --> 00:20:07,490
theorist up here why this works please

556
00:20:06,380 --> 00:20:09,380
come find us in the back if you're

557
00:20:07,490 --> 00:20:11,840
interested for more information but the

558
00:20:09,380 --> 00:20:14,240
ability to find super complex strategies

559
00:20:11,840 --> 00:20:16,939
like this really hammers home why we

560
00:20:14,240 --> 00:20:19,180
need an AI driven solution to find new

561
00:20:16,940 --> 00:20:21,140
censorship evasion strategies in

562
00:20:19,180 --> 00:20:23,000
addition to being able to find more

563
00:20:21,140 --> 00:20:25,790
complex strategies than a human could

564
00:20:23,000 --> 00:20:28,850
Geneva is also incredibly fast and

565
00:20:25,790 --> 00:20:32,780
here's a great example of that in July

566
00:20:28,850 --> 00:20:34,520
of 2019 Kazakhstan launched its HTTPS

567
00:20:32,780 --> 00:20:37,639
man-in-the-middle attack and this only

568
00:20:34,520 --> 00:20:39,379
lasted a couple of weeks as soon as we

569
00:20:37,640 --> 00:20:41,870
deployed Geneva it was able to find

570
00:20:39,380 --> 00:20:44,210
strategies within one hour to circumvent

571
00:20:41,870 --> 00:20:46,370
censorship this is this is pretty

572
00:20:44,210 --> 00:20:47,750
groundbreaking because previously

573
00:20:46,370 --> 00:20:50,060
researchers would have to sit around

574
00:20:47,750 --> 00:20:52,400
come up with new censorship evasion

575
00:20:50,060 --> 00:20:54,909
strategies and then deploy those but

576
00:20:52,400 --> 00:20:57,500
here we're able to find them instantly

577
00:20:54,910 --> 00:20:59,210
alright so I've talked to you about some

578
00:20:57,500 --> 00:21:01,010
some kind of major improvements over

579
00:20:59,210 --> 00:21:02,390
prior work in the past but nothing too

580
00:21:01,010 --> 00:21:04,340
crazy now I'm going to show you

581
00:21:02,390 --> 00:21:05,690
something too crazy this is something

582
00:21:04,340 --> 00:21:07,520
that we're really excited about and

583
00:21:05,690 --> 00:21:10,760
think maybe the future of censorship

584
00:21:07,520 --> 00:21:12,800
evasion one of the main issues with

585
00:21:10,760 --> 00:21:15,170
censorship evasion research and tools as

586
00:21:12,800 --> 00:21:17,659
we know it is that they need help from

587
00:21:15,170 --> 00:21:20,480
the outside take for example something

588
00:21:17,660 --> 00:21:23,210
like tour or a VPN where you first have

589
00:21:20,480 --> 00:21:24,830
to connect outside your country before

590
00:21:23,210 --> 00:21:27,950
you can get to your final destination

591
00:21:24,830 --> 00:21:30,260
the issue is there's a single point of

592
00:21:27,950 --> 00:21:33,080
failure there right imagine if that tor

593
00:21:30,260 --> 00:21:34,970
node goes down or China comes in and

594
00:21:33,080 --> 00:21:36,850
blocks that tor node you can't get out

595
00:21:34,970 --> 00:21:39,170
to the real world anymore

596
00:21:36,850 --> 00:21:41,990
Geneva doesn't have that problem

597
00:21:39,170 --> 00:21:43,160
Geneva runs solely on the client so we

598
00:21:41,990 --> 00:21:44,930
were sitting around one day and asked

599
00:21:43,160 --> 00:21:48,860
the question what's stopping us from

600
00:21:44,930 --> 00:21:50,360
running this at the server now take a

601
00:21:48,860 --> 00:21:51,860
step back for a second and let's just

602
00:21:50,360 --> 00:21:54,409
think about the impacts that running

603
00:21:51,860 --> 00:21:56,419
Geneva on the server could have firstly

604
00:21:54,410 --> 00:21:57,860
a client doesn't have to download any

605
00:21:56,420 --> 00:21:59,450
sort of software right because

606
00:21:57,860 --> 00:22:01,010
everything is running on the server this

607
00:21:59,450 --> 00:22:02,960
is actually a really big deal because

608
00:22:01,010 --> 00:22:04,910
clients take on a pretty significant

609
00:22:02,960 --> 00:22:08,720
risk when they download something like

610
00:22:04,910 --> 00:22:10,280
tor or VPN in addition several clients

611
00:22:08,720 --> 00:22:12,380
can connect to one machine learning

612
00:22:10,280 --> 00:22:14,389
Geneva at the same time and we're able

613
00:22:12,380 --> 00:22:16,010
to subvert censorship on their behalf

614
00:22:14,390 --> 00:22:16,530
for all of them without them doing

615
00:22:16,010 --> 00:22:18,690
anywhere

616
00:22:16,530 --> 00:22:20,280
and that's important because clients

617
00:22:18,690 --> 00:22:22,080
don't have to have any sort of technical

618
00:22:20,280 --> 00:22:24,240
expertise to run Geneva because they're

619
00:22:22,080 --> 00:22:25,860
not running it in fact a client doesn't

620
00:22:24,240 --> 00:22:28,350
even have to know that censorship

621
00:22:25,860 --> 00:22:31,590
evasion is going on because the server

622
00:22:28,350 --> 00:22:33,629
is doing everything this really broadens

623
00:22:31,590 --> 00:22:36,360
reach ability and accessibility for our

624
00:22:33,630 --> 00:22:39,480
end-users all right so that sounds

625
00:22:36,360 --> 00:22:40,379
incredible but there's an issue when we

626
00:22:39,480 --> 00:22:41,880
were sitting around and thinking about

627
00:22:40,380 --> 00:22:43,410
this we just kind of thought you know

628
00:22:41,880 --> 00:22:44,910
what there's not really a way that we

629
00:22:43,410 --> 00:22:48,570
could come up with a strategy that works

630
00:22:44,910 --> 00:22:51,360
here and I'll show you why so this is a

631
00:22:48,570 --> 00:22:55,500
waterfall diagram of a normal HTTP die

632
00:22:51,360 --> 00:22:57,870
of a normal HTTP request and we start

633
00:22:55,500 --> 00:23:00,480
out with the syn synack an ACK

634
00:22:57,870 --> 00:23:02,189
this is just the TCP handshake followed

635
00:23:00,480 --> 00:23:04,980
by the pushback the pushback just

636
00:23:02,190 --> 00:23:06,990
contains the sensor query it's got the

637
00:23:04,980 --> 00:23:09,360
HTTP GET request or whatever it is and

638
00:23:06,990 --> 00:23:12,240
that packet is then act and the response

639
00:23:09,360 --> 00:23:14,429
comes from the server so from the client

640
00:23:12,240 --> 00:23:16,530
side this is great we have a ton of time

641
00:23:14,430 --> 00:23:18,810
to influence this connection from the

642
00:23:16,530 --> 00:23:20,220
time that we send this in until we send

643
00:23:18,810 --> 00:23:22,770
the pushback we can do a lot of things

644
00:23:20,220 --> 00:23:25,920
there but on the server side that's not

645
00:23:22,770 --> 00:23:27,780
the case the only thing we do is send

646
00:23:25,920 --> 00:23:29,910
this syn ACK and once the client

647
00:23:27,780 --> 00:23:32,040
receives that syn ACK packet it will

648
00:23:29,910 --> 00:23:34,440
immediately AK it and send the push act

649
00:23:32,040 --> 00:23:36,090
that push Ock has the sensor keyword and

650
00:23:34,440 --> 00:23:37,830
that's enough to trip censorship

651
00:23:36,090 --> 00:23:40,860
immediately so we have to do something

652
00:23:37,830 --> 00:23:42,540
before that happens this is a really

653
00:23:40,860 --> 00:23:43,949
really small window here that we can

654
00:23:42,540 --> 00:23:46,980
influence this connection between the

655
00:23:43,950 --> 00:23:48,860
sin and sin ack packets and this packet

656
00:23:46,980 --> 00:23:51,300
doesn't have a payload on it by default

657
00:23:48,860 --> 00:23:52,520
so there's not really much that we can

658
00:23:51,300 --> 00:23:56,040
do here

659
00:23:52,520 --> 00:23:57,389
luckily Geneva doesn't know that this is

660
00:23:56,040 --> 00:23:59,550
an issue it doesn't know that it

661
00:23:57,390 --> 00:24:01,950
shouldn't work and please don't tell it

662
00:23:59,550 --> 00:24:05,280
because we ran it and deployed it in

663
00:24:01,950 --> 00:24:06,870
China Kazakhstan and India and we were

664
00:24:05,280 --> 00:24:10,710
able to find 12 strategies in those

665
00:24:06,870 --> 00:24:12,179
countries now I'd love to take you

666
00:24:10,710 --> 00:24:13,530
through all of these strategies because

667
00:24:12,180 --> 00:24:15,510
we're really really excited about them

668
00:24:13,530 --> 00:24:17,639
unfortunately we couldn't get a three

669
00:24:15,510 --> 00:24:20,180
hour time slot from blue hats so I can

670
00:24:17,640 --> 00:24:22,710
only going to take you through - so

671
00:24:20,180 --> 00:24:24,450
here's back to our waterfall diagram

672
00:24:22,710 --> 00:24:27,420
real quick and then I'll bring out the

673
00:24:24,450 --> 00:24:29,700
strategy this one works in China and it

674
00:24:27,420 --> 00:24:30,300
uses something called CCP simultaneous

675
00:24:29,700 --> 00:24:32,370
Open

676
00:24:30,300 --> 00:24:35,159
so simultaneous open is a somewhat

677
00:24:32,370 --> 00:24:37,290
archaic TCP feature it's basically the

678
00:24:35,160 --> 00:24:40,020
developers answer to the question of

679
00:24:37,290 --> 00:24:41,340
what happens if two clients try to

680
00:24:40,020 --> 00:24:44,010
connect to each other at the same time

681
00:24:41,340 --> 00:24:47,129
by sending syn packets so we're first

682
00:24:44,010 --> 00:24:49,800
going to start TCP simultaneous open by

683
00:24:47,130 --> 00:24:51,270
sending our own TCP syn packet and then

684
00:24:49,800 --> 00:24:53,010
we're immediately after that going to

685
00:24:51,270 --> 00:24:54,600
send the corrupted syn packet this is

686
00:24:53,010 --> 00:24:57,600
just corrupted in some special way that

687
00:24:54,600 --> 00:24:59,699
we've crafted so this packet then get

688
00:24:57,600 --> 00:25:01,620
sacked with a syn ack from the client

689
00:24:59,700 --> 00:25:03,810
and I know what you may be thinking is

690
00:25:01,620 --> 00:25:05,429
that this looks a lot like the TCP

691
00:25:03,810 --> 00:25:07,830
turnaround strategy that we defined

692
00:25:05,430 --> 00:25:09,690
before but that's not the case check

693
00:25:07,830 --> 00:25:12,149
this out this works in China right and

694
00:25:09,690 --> 00:25:15,260
we know that China has long since fixed

695
00:25:12,150 --> 00:25:17,370
TCP turnaround so why does this work

696
00:25:15,260 --> 00:25:19,050
instead what we find is this is actually

697
00:25:17,370 --> 00:25:21,510
an off by one error in the Great

698
00:25:19,050 --> 00:25:23,610
Firewall of China when it sees the

699
00:25:21,510 --> 00:25:25,260
corrupted sin the sin ack it actually

700
00:25:23,610 --> 00:25:27,030
incorrectly increments the sequence

701
00:25:25,260 --> 00:25:28,950
number of its connection by one and

702
00:25:27,030 --> 00:25:30,629
that's enough to throw off the

703
00:25:28,950 --> 00:25:34,020
connection state and get around

704
00:25:30,630 --> 00:25:35,790
censorship let's go through another

705
00:25:34,020 --> 00:25:39,030
really cool strategy that Geneva finds

706
00:25:35,790 --> 00:25:42,000
this time in Kazakhstan this one we call

707
00:25:39,030 --> 00:25:44,040
the double benign get strategy basically

708
00:25:42,000 --> 00:25:46,080
the way it works is we get a syn from

709
00:25:44,040 --> 00:25:49,020
the client and we immediately respond

710
00:25:46,080 --> 00:25:50,760
with two syn ack packets now it's a

711
00:25:49,020 --> 00:25:52,200
little wishy-washy here we're basically

712
00:25:50,760 --> 00:25:54,390
doing our own things that aren't

713
00:25:52,200 --> 00:25:56,190
necessarily TCP compliant and we're

714
00:25:54,390 --> 00:25:58,380
throwing a payload on this soon ACK

715
00:25:56,190 --> 00:26:00,300
packet and this is something that Geneva

716
00:25:58,380 --> 00:26:02,790
kind of just explored on its own because

717
00:26:00,300 --> 00:26:04,440
we didn't try to give it any information

718
00:26:02,790 --> 00:26:06,480
about the semantics of an HTTP

719
00:26:04,440 --> 00:26:09,570
connection but it's still gonna push the

720
00:26:06,480 --> 00:26:12,240
limits of what's possible so that sends

721
00:26:09,570 --> 00:26:15,179
these two uncensored syn ack packets

722
00:26:12,240 --> 00:26:16,740
these are just benign get requests don't

723
00:26:15,180 --> 00:26:19,230
have a censor keyword or anything

724
00:26:16,740 --> 00:26:21,690
and this actually performs a tcp turn

725
00:26:19,230 --> 00:26:24,750
around attack because now the sensor

726
00:26:21,690 --> 00:26:27,150
sees two requests coming from the server

727
00:26:24,750 --> 00:26:28,860
but it switches the minds of server and

728
00:26:27,150 --> 00:26:32,940
client and that gets around censorship

729
00:26:28,860 --> 00:26:35,219
in kazakhstan now before I close up I

730
00:26:32,940 --> 00:26:37,680
want to go over a quick overview of what

731
00:26:35,220 --> 00:26:39,810
we think the future of the arms race of

732
00:26:37,680 --> 00:26:42,720
censorship is going to look like we get

733
00:26:39,810 --> 00:26:44,220
this question a lot of you know we're

734
00:26:42,720 --> 00:26:45,659
releasing all these strategies to the

735
00:26:44,220 --> 00:26:48,299
public and we're eventually going to

736
00:26:45,659 --> 00:26:50,039
release the whole engine for Geneva so

737
00:26:48,299 --> 00:26:52,830
isn't that really just helping sensors

738
00:26:50,039 --> 00:26:55,530
in the long run we think that we're

739
00:26:52,830 --> 00:26:57,809
actually helping the end users mostly so

740
00:26:55,530 --> 00:27:00,240
by releasing Geneva to the public we

741
00:26:57,809 --> 00:27:02,330
have the potential to fast forward the

742
00:27:00,240 --> 00:27:04,890
arms race for both sides

743
00:27:02,330 --> 00:27:07,379
Geneva finds two different kinds of bugs

744
00:27:04,890 --> 00:27:09,929
first it finds bugs and implementation

745
00:27:07,380 --> 00:27:11,070
these are things like the off by one

746
00:27:09,929 --> 00:27:13,679
error that we found in the Great

747
00:27:11,070 --> 00:27:15,330
Firewall of China it's kind of easy for

748
00:27:13,679 --> 00:27:18,690
these sensors to come along and fix

749
00:27:15,330 --> 00:27:20,039
those low hanging fruit bugs but even if

750
00:27:18,690 --> 00:27:21,630
they fix them we're still gonna keep

751
00:27:20,039 --> 00:27:23,179
finding more Geneva is really really

752
00:27:21,630 --> 00:27:25,860
good at finding them all the time

753
00:27:23,179 --> 00:27:28,380
however the bigger issue is that we find

754
00:27:25,860 --> 00:27:30,750
these systemic design issues these gaps

755
00:27:28,380 --> 00:27:33,240
in logic we call them and these are so

756
00:27:30,750 --> 00:27:35,400
much more difficult for a sensor to fix

757
00:27:33,240 --> 00:27:37,530
because they require a complete overhaul

758
00:27:35,400 --> 00:27:41,010
of their system and that takes a really

759
00:27:37,530 --> 00:27:42,299
long time since Geneva is so fast it's

760
00:27:41,010 --> 00:27:45,090
able to come up with these strategies

761
00:27:42,299 --> 00:27:47,490
really really quickly and faster than a

762
00:27:45,090 --> 00:27:49,320
sensor could fix them so we believe that

763
00:27:47,490 --> 00:27:51,150
the logical conclusion of this arms race

764
00:27:49,320 --> 00:27:54,629
is that we're helping the end user more

765
00:27:51,150 --> 00:27:56,250
than anybody else thank you so much for

766
00:27:54,630 --> 00:27:58,120
coming to listen about Geneva I'd love

767
00:27:56,250 --> 00:28:04,479
to see you guys in the back talk

768
00:27:58,120 --> 00:28:04,478
[Applause]

