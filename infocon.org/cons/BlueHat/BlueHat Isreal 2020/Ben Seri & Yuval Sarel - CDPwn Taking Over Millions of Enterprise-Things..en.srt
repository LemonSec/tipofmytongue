1
00:00:12,889 --> 00:00:19,320
mid morning to you all in my dance areas

2
00:00:17,400 --> 00:00:22,259
you heard them today with music Vasarely

3
00:00:19,320 --> 00:00:24,450
hi everybody I'm evil I'm a researching

4
00:00:22,259 --> 00:00:27,989
been steamed yeah

5
00:00:24,450 --> 00:00:30,509
so yeah I'm so I'm VP research at Army's

6
00:00:27,989 --> 00:00:34,410
and we both work with army services

7
00:00:30,509 --> 00:00:37,129
enterprise IT security company and we

8
00:00:34,410 --> 00:00:41,398
deal with IOT devices and manage devices

9
00:00:37,129 --> 00:00:45,030
in all kind of places and corporates in

10
00:00:41,399 --> 00:00:47,940
health care and manufacturing so part of

11
00:00:45,030 --> 00:00:50,609
the part of our field is to understand

12
00:00:47,940 --> 00:00:52,440
whether these types of devices are

13
00:00:50,609 --> 00:00:56,940
really secure and whether they are

14
00:00:52,440 --> 00:00:58,739
limited to attacking only inside defined

15
00:00:56,940 --> 00:01:01,318
segments or whether they can break

16
00:00:58,739 --> 00:01:04,170
segmentation network segmentation and do

17
00:01:01,319 --> 00:01:06,690
a lot of more harm than they were

18
00:01:04,170 --> 00:01:09,150
limited to in the first place so this we

19
00:01:06,690 --> 00:01:13,470
this talk is about you research was

20
00:01:09,150 --> 00:01:14,700
actually published yesterday about five

21
00:01:13,470 --> 00:01:17,310
zero day vulnerabilities that we've

22
00:01:14,700 --> 00:01:20,969
discovered in protocol protocol from

23
00:01:17,310 --> 00:01:23,850
Cisco called CDP so it's called city

24
00:01:20,969 --> 00:01:27,270
porn in you write in a wide array of

25
00:01:23,850 --> 00:01:31,110
devices from Cisco switches routers but

26
00:01:27,270 --> 00:01:33,210
also IP phones and IP cameras some

27
00:01:31,110 --> 00:01:37,409
summer between a tens of millions or

28
00:01:33,210 --> 00:01:40,949
maybe more devices affected yeah so

29
00:01:37,409 --> 00:01:43,200
today we're gonna cover at the beginning

30
00:01:40,950 --> 00:01:45,060
of the talk just about what is what we

31
00:01:43,200 --> 00:01:47,609
actually find what is the city phone as

32
00:01:45,060 --> 00:01:49,049
I mentioned part of why we looked at

33
00:01:47,609 --> 00:01:50,969
this in the first place was to

34
00:01:49,049 --> 00:01:52,920
understand that network segmentation

35
00:01:50,969 --> 00:01:55,439
better you understand me whether it's

36
00:01:52,920 --> 00:01:58,619
secure and and whether we can poke holes

37
00:01:55,439 --> 00:02:00,630
at it and so we're going to cover a bit

38
00:01:58,619 --> 00:02:03,630
about the history of villain hopping

39
00:02:00,630 --> 00:02:05,280
techniques how our attacker is doing

40
00:02:03,630 --> 00:02:06,929
this what are the known techniques and

41
00:02:05,280 --> 00:02:10,410
how does city porn

42
00:02:06,929 --> 00:02:15,330
come into the that feeling add something

43
00:02:10,410 --> 00:02:18,150
new CBP is a protocol for Cisco it's a

44
00:02:15,330 --> 00:02:20,010
layer 2 protocol that is used almost by

45
00:02:18,150 --> 00:02:22,530
every device every device at cisco

46
00:02:20,010 --> 00:02:23,920
manufacturers and it's a proprietary

47
00:02:22,530 --> 00:02:25,720
layer 2 protocol so we

48
00:02:23,920 --> 00:02:27,458
gonna cover a bit what are the those

49
00:02:25,720 --> 00:02:31,630
types of protocols that exists in

50
00:02:27,459 --> 00:02:34,270
network network appliances not only CDP

51
00:02:31,630 --> 00:02:36,400
but a wide array of protocols that

52
00:02:34,270 --> 00:02:40,690
actually are a very large attack surface

53
00:02:36,400 --> 00:02:43,690
for in network appliances this research

54
00:02:40,690 --> 00:02:46,720
actually bit like what Maddie talked

55
00:02:43,690 --> 00:02:48,420
about started from researching in

56
00:02:46,720 --> 00:02:53,230
foreign bases that were already closed

57
00:02:48,420 --> 00:02:56,730
patches that might have not been as good

58
00:02:53,230 --> 00:02:59,619
as it should have been so we looked at

59
00:02:56,730 --> 00:03:03,750
disclosures previous disclosures in

60
00:02:59,620 --> 00:03:06,610
various layer 2 protocols from Cisco

61
00:03:03,750 --> 00:03:08,769
understood the underlying bugs that were

62
00:03:06,610 --> 00:03:10,660
fixed and from there continue the

63
00:03:08,769 --> 00:03:15,250
research and actually found new

64
00:03:10,660 --> 00:03:17,260
vulnerabilities yeah so from that bit of

65
00:03:15,250 --> 00:03:19,390
and about the implications of this

66
00:03:17,260 --> 00:03:21,700
research what it means to the security

67
00:03:19,390 --> 00:03:25,630
of networks and enterprise-grade

68
00:03:21,700 --> 00:03:28,899
IP phones and IP cameras and also if the

69
00:03:25,630 --> 00:03:30,760
live demo gods will be with us we have

70
00:03:28,900 --> 00:03:35,049
an IP phone that will try to hack at the

71
00:03:30,760 --> 00:03:37,120
end of the talk so to begin the high

72
00:03:35,049 --> 00:03:39,640
level what is CD pawn so I said it's

73
00:03:37,120 --> 00:03:40,959
five vulnerabilities but it's actually

74
00:03:39,640 --> 00:03:43,119
four remote code execution

75
00:03:40,959 --> 00:03:46,000
vulnerabilities and one a denial of

76
00:03:43,120 --> 00:03:49,630
service reliability it's in this

77
00:03:46,000 --> 00:03:53,079
protocol in CDP its affects a wide range

78
00:03:49,630 --> 00:03:56,170
of Cisco devices switches routers IP

79
00:03:53,079 --> 00:03:58,180
phones IP cameras and an estimated

80
00:03:56,170 --> 00:04:02,320
number of around tens of millions of

81
00:03:58,180 --> 00:04:05,530
devices affected and it's a this huge

82
00:04:02,320 --> 00:04:09,579
group of devices that that is affected

83
00:04:05,530 --> 00:04:11,890
from Nexus switches which are you know

84
00:04:09,579 --> 00:04:17,140
the newest Cisco switches in the market

85
00:04:11,890 --> 00:04:20,798
from and Cisco IOS our routers certain

86
00:04:17,140 --> 00:04:24,039
fire power files from Cisco the entire

87
00:04:20,798 --> 00:04:28,450
range of new of current

88
00:04:24,039 --> 00:04:31,930
Cisco IP phones and certain IP camera

89
00:04:28,450 --> 00:04:35,750
from Cisco is but a serious cameras and

90
00:04:31,930 --> 00:04:38,690
these devices are used everywhere

91
00:04:35,750 --> 00:04:41,720
and the idea phones specifically are

92
00:04:38,690 --> 00:04:44,719
actually I think the most prevalent IP

93
00:04:41,720 --> 00:04:47,840
phones in the market so advertises that

94
00:04:44,720 --> 00:04:51,650
95 percent of Fortune 500 companies use

95
00:04:47,840 --> 00:04:55,000
their IP phone solutions and yeah there

96
00:04:51,650 --> 00:04:57,650
are used in government's incorporates

97
00:04:55,000 --> 00:05:00,620
the White House you can find them in the

98
00:04:57,650 --> 00:05:03,620
Situation Room on the resolute desk well

99
00:05:00,620 --> 00:05:06,020
the White House and even when a certain

100
00:05:03,620 --> 00:05:07,909
Israeli politicians come to visit they

101
00:05:06,020 --> 00:05:11,479
are been listening to by two separate IP

102
00:05:07,909 --> 00:05:13,849
phones yeah so there are really

103
00:05:11,479 --> 00:05:14,979
prevalent but actually they are not the

104
00:05:13,849 --> 00:05:17,840
reason that we started this research

105
00:05:14,979 --> 00:05:20,030
there was something that we found once

106
00:05:17,840 --> 00:05:22,969
we started looking and continuing to

107
00:05:20,030 --> 00:05:26,650
research other other places but as I

108
00:05:22,970 --> 00:05:29,509
mentioned our initial goal was to see

109
00:05:26,650 --> 00:05:32,359
how villain hopping was done in the past

110
00:05:29,509 --> 00:05:36,229
and whether it can still be done today

111
00:05:32,360 --> 00:05:37,729
with additional abilities so you

112
00:05:36,229 --> 00:05:39,830
understand villain hopping techniques

113
00:05:37,729 --> 00:05:43,130
just to understand we will just leave a

114
00:05:39,830 --> 00:05:45,409
bit more what is villains and how our

115
00:05:43,130 --> 00:05:49,130
network segments how do they how do they

116
00:05:45,409 --> 00:05:52,099
even work so this is new simple design

117
00:05:49,130 --> 00:05:55,880
of the network diagram and how it should

118
00:05:52,099 --> 00:05:59,479
be done today and you would separate

119
00:05:55,880 --> 00:06:03,440
your devices based on first level and

120
00:05:59,479 --> 00:06:06,229
based on types of device so you might

121
00:06:03,440 --> 00:06:08,210
have one segment for low-grade IOT

122
00:06:06,229 --> 00:06:09,500
devices that you don't trust at all they

123
00:06:08,210 --> 00:06:11,270
connect to the internet that you really

124
00:06:09,500 --> 00:06:14,000
don't want them to interact with

125
00:06:11,270 --> 00:06:15,979
anything on your network and then you

126
00:06:14,000 --> 00:06:19,370
have a corporate segment with other

127
00:06:15,979 --> 00:06:21,590
corporate assets your computers whatnot

128
00:06:19,370 --> 00:06:25,340
and so forth and so the network would be

129
00:06:21,590 --> 00:06:28,369
split importing to these segments in

130
00:06:25,340 --> 00:06:32,419
order to prevent devices from low-grade

131
00:06:28,370 --> 00:06:35,569
trust access levels talking to devices

132
00:06:32,419 --> 00:06:37,190
in higher trust levels and so if an

133
00:06:35,569 --> 00:06:39,889
attacker were to compromise the device

134
00:06:37,190 --> 00:06:43,190
an IOT device for example inside the IOT

135
00:06:39,889 --> 00:06:46,399
networks he can interact with other IOT

136
00:06:43,190 --> 00:06:47,650
devices but he can't by design talk with

137
00:06:46,399 --> 00:06:50,530
devices in the corporate

138
00:06:47,650 --> 00:06:53,469
network or other parts of the network so

139
00:06:50,530 --> 00:06:56,530
this is how Network segments are

140
00:06:53,470 --> 00:06:58,900
supposed to be implemented and what

141
00:06:56,530 --> 00:07:03,039
techniques existed and the paths are

142
00:06:58,900 --> 00:07:05,650
still in some ways exist today to to

143
00:07:03,039 --> 00:07:07,150
poke holes in that strategy so double

144
00:07:05,650 --> 00:07:09,969
the VLAN tagging is very old technique

145
00:07:07,150 --> 00:07:13,870
in some cases it still works today and

146
00:07:09,970 --> 00:07:17,380
it takes advantage of a simple flaw and

147
00:07:13,870 --> 00:07:19,990
how villains work each network has a

148
00:07:17,380 --> 00:07:21,760
native villain the villain that that

149
00:07:19,990 --> 00:07:25,030
would the villain number that would be

150
00:07:21,760 --> 00:07:27,699
tagged or any traffic that doesn't have

151
00:07:25,030 --> 00:07:29,080
any villain header and the native

152
00:07:27,699 --> 00:07:31,330
villain number one is very special

153
00:07:29,080 --> 00:07:33,010
villain native villain that means that

154
00:07:31,330 --> 00:07:35,289
you can send traffic inside the track

155
00:07:33,010 --> 00:07:36,909
trunk port without a villain header and

156
00:07:35,289 --> 00:07:39,070
that means this traffic belongs to

157
00:07:36,910 --> 00:07:41,979
villain number one so in the normal

158
00:07:39,070 --> 00:07:43,780
Network were native villain brawny is in

159
00:07:41,979 --> 00:07:46,150
use and you have an attacker connected

160
00:07:43,780 --> 00:07:48,070
to switch in an access port to the

161
00:07:46,150 --> 00:07:50,080
native VLAN he can send packets with the

162
00:07:48,070 --> 00:07:52,659
outer VLAN header and then on the trunk

163
00:07:50,080 --> 00:07:55,510
port between the switches it was it will

164
00:07:52,660 --> 00:07:59,830
also be without any trunk in any villain

165
00:07:55,510 --> 00:08:02,080
header and the switch also supports that

166
00:07:59,830 --> 00:08:04,570
the access port in the active villain

167
00:08:02,080 --> 00:08:07,780
does have a native villain a feelin

168
00:08:04,570 --> 00:08:09,550
header with a native ID number one but

169
00:08:07,780 --> 00:08:11,739
then the switch will peel off that

170
00:08:09,550 --> 00:08:13,690
header and send again the package

171
00:08:11,740 --> 00:08:15,970
without any native villain so the attack

172
00:08:13,690 --> 00:08:18,729
the double-teaming hanging status simply

173
00:08:15,970 --> 00:08:21,669
works by an attacker putting two villain

174
00:08:18,729 --> 00:08:23,860
headers the outer one a native villain

175
00:08:21,669 --> 00:08:26,020
and then the inner one any villain

176
00:08:23,860 --> 00:08:27,610
number that he'd like to be routed to

177
00:08:26,020 --> 00:08:29,859
the switch would peel off the first

178
00:08:27,610 --> 00:08:33,010
native VLAN header and then on the trunk

179
00:08:29,860 --> 00:08:34,779
port will the attacker will contain the

180
00:08:33,010 --> 00:08:38,140
target villain so this is a simple

181
00:08:34,779 --> 00:08:40,929
technique it works but it has

182
00:08:38,140 --> 00:08:44,800
limitations for first of all you can

183
00:08:40,929 --> 00:08:46,479
only send packets one one way you you

184
00:08:44,800 --> 00:08:50,260
will not receive packets back from the

185
00:08:46,480 --> 00:08:53,350
target villain and it's also very simple

186
00:08:50,260 --> 00:08:55,150
to fix this Cisco for example just says

187
00:08:53,350 --> 00:08:57,339
you should not use negative you know

188
00:08:55,150 --> 00:08:59,079
number one and then this problem can't

189
00:08:57,339 --> 00:09:01,690
exist

190
00:08:59,080 --> 00:09:03,220
and but but in certain cases were switch

191
00:09:01,690 --> 00:09:07,089
configurations or not ideals this can

192
00:09:03,220 --> 00:09:13,149
still occur then another vulnerability

193
00:09:07,089 --> 00:09:16,450
were kind of logical flaw was polished I

194
00:09:13,149 --> 00:09:19,450
think maybe five or ten years ago in a

195
00:09:16,450 --> 00:09:21,250
product called called DTP DTP is a cisco

196
00:09:19,450 --> 00:09:24,160
protocol it's also a propriety volatile

197
00:09:21,250 --> 00:09:27,810
the dynamic trunking protocol and this

198
00:09:24,160 --> 00:09:30,160
protocol is a simple one it's just meant

199
00:09:27,810 --> 00:09:33,849
for the automatic configuration of

200
00:09:30,160 --> 00:09:35,260
switch ports so the poor service which

201
00:09:33,850 --> 00:09:38,290
would either be access port or front

202
00:09:35,260 --> 00:09:40,360
porch but VDP enables the port to change

203
00:09:38,290 --> 00:09:42,029
its mode from an access for to transport

204
00:09:40,360 --> 00:09:46,360
automatically with by negotiate

205
00:09:42,029 --> 00:09:48,610
negotiating over VTP messages so if DDP

206
00:09:46,360 --> 00:09:51,310
is not turned off an attacker can simply

207
00:09:48,610 --> 00:09:54,519
send a malicious EVP or just a packet

208
00:09:51,310 --> 00:09:56,589
that says to the switch move my port

209
00:09:54,519 --> 00:09:58,600
from an access port to a transport once

210
00:09:56,589 --> 00:10:01,990
that port is a trunk port now he can

211
00:09:58,600 --> 00:10:05,140
send any packets for any villain so this

212
00:10:01,990 --> 00:10:08,709
doesn't just abuses feature in the

213
00:10:05,140 --> 00:10:11,050
switches that allows devices or switches

214
00:10:08,709 --> 00:10:13,630
to change from access ports to try and

215
00:10:11,050 --> 00:10:15,990
forge and here also a very simple

216
00:10:13,630 --> 00:10:20,170
solution the DP should be turned on/off

217
00:10:15,990 --> 00:10:26,680
should be turned off on all of the ports

218
00:10:20,170 --> 00:10:29,050
in access ports okay so if V DP and VLAN

219
00:10:26,680 --> 00:10:31,930
tagging can be used what can attack

220
00:10:29,050 --> 00:10:34,300
earth still do what they can still do it

221
00:10:31,930 --> 00:10:37,209
looks like look for vulnerabilities in

222
00:10:34,300 --> 00:10:41,050
whatever layer of protocols are parsed

223
00:10:37,209 --> 00:10:43,630
by the code inside the switch and see

224
00:10:41,050 --> 00:10:47,829
Devon is one abilities in exactly that

225
00:10:43,630 --> 00:10:50,079
type of attack surface so we will get to

226
00:10:47,829 --> 00:10:52,060
the probabilities in a minute but again

227
00:10:50,079 --> 00:10:56,109
if attacker has something like silicon

228
00:10:52,060 --> 00:11:01,149
how would he use it so if he for example

229
00:10:56,110 --> 00:11:01,779
has code execution in a salty device he

230
00:11:01,149 --> 00:11:04,540
can send

231
00:11:01,779 --> 00:11:07,899
maliciously crafted CDP packets that

232
00:11:04,540 --> 00:11:09,760
will be parsed by the core switch and if

233
00:11:07,899 --> 00:11:12,079
everyone guilty exists there that might

234
00:11:09,760 --> 00:11:15,350
lead him eventually to code execution

235
00:11:12,079 --> 00:11:17,839
inform the switch obviously then he then

236
00:11:15,350 --> 00:11:20,629
has access to the entire network all the

237
00:11:17,839 --> 00:11:23,079
villains course which is a very strong

238
00:11:20,629 --> 00:11:25,670
position for an attacker to be in he can

239
00:11:23,079 --> 00:11:27,649
execute rate data from the switch he can

240
00:11:25,670 --> 00:11:29,599
listen in on any network traffic that

241
00:11:27,649 --> 00:11:31,790
traverses with a switch he can carry out

242
00:11:29,600 --> 00:11:34,369
man-in-the-middle attacks so other than

243
00:11:31,790 --> 00:11:37,819
villain hopping which is what we started

244
00:11:34,369 --> 00:11:41,749
at just attacking the switch is a

245
00:11:37,819 --> 00:11:44,149
goldmine of its own so I mentioned the

246
00:11:41,749 --> 00:11:48,139
fact that DTP for example is a layer to

247
00:11:44,149 --> 00:11:50,239
a protocol that has these logical flaws

248
00:11:48,139 --> 00:11:52,249
that allow you to move from an access

249
00:11:50,239 --> 00:11:54,290
port or trying port but there are

250
00:11:52,249 --> 00:11:55,639
actually much it's not one protocol

251
00:11:54,290 --> 00:11:57,618
there are many of these layer two

252
00:11:55,639 --> 00:12:00,799
protocols that are used by network

253
00:11:57,619 --> 00:12:02,899
Sciences by switches and routers the

254
00:12:00,799 --> 00:12:06,439
orange ones are for party runs from

255
00:12:02,899 --> 00:12:10,579
Cisco but cisco is the de facto standard

256
00:12:06,439 --> 00:12:12,079
in networking appliances and so an

257
00:12:10,579 --> 00:12:13,790
attacker can consider all of these

258
00:12:12,079 --> 00:12:18,469
protocols as potential attacks refers

259
00:12:13,790 --> 00:12:21,740
for him to try to poke at what you see

260
00:12:18,470 --> 00:12:26,290
in the blue is the multicast addresses

261
00:12:21,740 --> 00:12:30,290
the MAC addresses Ethernet destination

262
00:12:26,290 --> 00:12:32,660
header and to which these protocols are

263
00:12:30,290 --> 00:12:36,498
sent to and the switch will listen in on

264
00:12:32,660 --> 00:12:39,170
only it on any packets that are destined

265
00:12:36,499 --> 00:12:44,720
to these MAC addresses and then hearth

266
00:12:39,170 --> 00:12:48,469
of the protocols accordingly okay so as

267
00:12:44,720 --> 00:12:50,389
I mentioned before we started once we

268
00:12:48,470 --> 00:12:52,939
understood this attack surface first of

269
00:12:50,389 --> 00:12:56,209
all we wanted to learn what was found in

270
00:12:52,939 --> 00:12:59,269
the task in any of these protocols and

271
00:12:56,209 --> 00:13:03,219
Cisco did publish tweet viruses that we

272
00:12:59,269 --> 00:13:06,259
found in 2018 regarding vulnerabilities

273
00:13:03,220 --> 00:13:08,989
in two parter colors one is the the link

274
00:13:06,259 --> 00:13:11,980
layer discovery protocol lldp and one is

275
00:13:08,989 --> 00:13:14,600
in CDP in cisco discovery protocol and

276
00:13:11,980 --> 00:13:16,610
really thought let's start by learning

277
00:13:14,600 --> 00:13:19,009
these protocols learning these these

278
00:13:16,610 --> 00:13:22,730
advisories understand what was fixed and

279
00:13:19,009 --> 00:13:24,169
see if we can find anything new so a bit

280
00:13:22,730 --> 00:13:26,180
of an overview about these two protocols

281
00:13:24,169 --> 00:13:27,740
city PLL DP

282
00:13:26,180 --> 00:13:29,689
there are simple product colours their

283
00:13:27,740 --> 00:13:32,390
discovery protocol is meant there are

284
00:13:29,690 --> 00:13:34,390
the range functionality is for devices

285
00:13:32,390 --> 00:13:37,340
to discovery one another in a network

286
00:13:34,390 --> 00:13:41,210
and there are almost similar in

287
00:13:37,340 --> 00:13:44,900
functionality Silicon LDP only LDP is

288
00:13:41,210 --> 00:13:48,950
the standard protocol and since CDP is

289
00:13:44,900 --> 00:13:52,939
Cisco's version of an LD P they work by

290
00:13:48,950 --> 00:13:55,090
devices simply sending packets

291
00:13:52,940 --> 00:13:58,370
advertising packets over a designating

292
00:13:55,090 --> 00:14:00,050
multicast MAC address and then the

293
00:13:58,370 --> 00:14:04,030
devices are connected directly to them

294
00:14:00,050 --> 00:14:06,349
we'll listen in on Dave's packets and

295
00:14:04,030 --> 00:14:08,839
register in the local database that they

296
00:14:06,350 --> 00:14:11,570
have what are the devices that are

297
00:14:08,840 --> 00:14:13,520
connected directly to me and and these

298
00:14:11,570 --> 00:14:15,620
specific packets want to be forwarded

299
00:14:13,520 --> 00:14:18,380
inside the network by switches and

300
00:14:15,620 --> 00:14:22,040
routers so whenever a switch accept or

301
00:14:18,380 --> 00:14:23,600
listens to a CDP or an LD be target that

302
00:14:22,040 --> 00:14:27,170
packet will be processed but it will not

303
00:14:23,600 --> 00:14:30,470
be forwarded down the line today and to

304
00:14:27,170 --> 00:14:32,270
the rest of the network and both of

305
00:14:30,470 --> 00:14:34,280
these for the colors on the majority of

306
00:14:32,270 --> 00:14:38,120
device of the devices that supports them

307
00:14:34,280 --> 00:14:40,610
in are enabled by default and CDP

308
00:14:38,120 --> 00:14:44,270
specifically also has advanced features

309
00:14:40,610 --> 00:14:46,850
that that are that are using CVP not

310
00:14:44,270 --> 00:14:50,449
only for its discovery purposes and for

311
00:14:46,850 --> 00:14:52,430
that reason in these devices CDP can't

312
00:14:50,450 --> 00:14:54,620
be turned off or if it can be turned off

313
00:14:52,430 --> 00:14:58,310
it would hurt the functionality of the

314
00:14:54,620 --> 00:15:01,220
device so VoIP phones for example these

315
00:14:58,310 --> 00:15:02,900
have two Ethernet ports and you can

316
00:15:01,220 --> 00:15:04,910
connect one of them to the network than

317
00:15:02,900 --> 00:15:09,170
another to a computer so kind of

318
00:15:04,910 --> 00:15:11,930
changing the network like that and this

319
00:15:09,170 --> 00:15:15,260
feature for network segmentation to seal

320
00:15:11,930 --> 00:15:17,719
it to allow network networks to be still

321
00:15:15,260 --> 00:15:19,760
segmented for VoIP phones and computers

322
00:15:17,720 --> 00:15:23,630
separately the VoIP phones actually

323
00:15:19,760 --> 00:15:25,640
receive over CDP what is the V non

324
00:15:23,630 --> 00:15:27,620
designated for the IP phones and models

325
00:15:25,640 --> 00:15:29,420
for the PC and then the VoIP phone is

326
00:15:27,620 --> 00:15:32,330
also like a mini switch that separates

327
00:15:29,420 --> 00:15:34,189
these two segments in addition

328
00:15:32,330 --> 00:15:36,500
avoid forints for example are powered

329
00:15:34,190 --> 00:15:38,600
with Power over Ethernet and they

330
00:15:36,500 --> 00:15:39,440
negotiate the power level that they'd

331
00:15:38,600 --> 00:15:42,500
like to receive

332
00:15:39,440 --> 00:15:44,300
from the switch also using CDP so CBP

333
00:15:42,500 --> 00:15:46,610
was not meant for this originally but

334
00:15:44,300 --> 00:15:49,609
nevertheless today it's also used to

335
00:15:46,610 --> 00:15:53,570
these features okay so we started our

336
00:15:49,610 --> 00:15:57,230
research work this first advisory and it

337
00:15:53,570 --> 00:15:59,330
said something very you know generic

338
00:15:57,230 --> 00:16:01,580
about the phone visit was closed it said

339
00:15:59,330 --> 00:16:03,890
if I'm really exists due to improper

340
00:16:01,580 --> 00:16:07,120
handling of malformed LDP messages

341
00:16:03,890 --> 00:16:09,260
sounds like every bug in every protocol

342
00:16:07,120 --> 00:16:13,100
so no it's nothing that you can actually

343
00:16:09,260 --> 00:16:17,210
work with but we what we did we just

344
00:16:13,100 --> 00:16:19,310
download the images of the infected IRS

345
00:16:17,210 --> 00:16:22,040
X our routers before and after the touch

346
00:16:19,310 --> 00:16:23,869
and you and we use pass giving this is

347
00:16:22,040 --> 00:16:26,390
the screenshot from dive for it I a

348
00:16:23,870 --> 00:16:27,950
plugin so you can see there are many

349
00:16:26,390 --> 00:16:30,319
many code changes between these two

350
00:16:27,950 --> 00:16:32,180
versions most of them are not related to

351
00:16:30,320 --> 00:16:34,840
the vulnerabilities that were fixed we

352
00:16:32,180 --> 00:16:37,040
narrowed in on the function that parses

353
00:16:34,840 --> 00:16:39,440
specifically the type length value

354
00:16:37,040 --> 00:16:41,540
elements inside the protocol which are

355
00:16:39,440 --> 00:16:44,660
complex structures that from time to

356
00:16:41,540 --> 00:16:46,839
time might include bugs and in fact yeah

357
00:16:44,660 --> 00:16:49,670
this is a function that parses Sylvie's

358
00:16:46,840 --> 00:16:53,120
LGD PT l-- v's and you can see in the

359
00:16:49,670 --> 00:16:56,630
green there that they added a lot of new

360
00:16:53,120 --> 00:17:00,680
boundary checks that didn't exist before

361
00:16:56,630 --> 00:17:03,200
so this looked like the whole lot of

362
00:17:00,680 --> 00:17:05,959
bugs that were fixed here we looked at

363
00:17:03,200 --> 00:17:08,689
each of them but what we saw is that

364
00:17:05,959 --> 00:17:11,000
these were not our C vulnerabilities

365
00:17:08,689 --> 00:17:13,610
that were fixed there is weather

366
00:17:11,000 --> 00:17:16,099
information leaks or denial of service

367
00:17:13,609 --> 00:17:19,669
phone abilities due to internal flows

368
00:17:16,099 --> 00:17:22,040
that led to a wild copy on to stack or

369
00:17:19,670 --> 00:17:25,069
heap so nothing that could be exploited

370
00:17:22,040 --> 00:17:26,629
or not that we saw how but still

371
00:17:25,069 --> 00:17:29,149
vulnerabilities that we understood and

372
00:17:26,630 --> 00:17:30,620
again what we saw from this is that the

373
00:17:29,150 --> 00:17:33,320
type of bugs that there were been things

374
00:17:30,620 --> 00:17:35,840
but they were fixing or all sorts of

375
00:17:33,320 --> 00:17:37,939
boundary checks so we continued the

376
00:17:35,840 --> 00:17:40,459
research to the second advisory this

377
00:17:37,940 --> 00:17:44,270
sounded much more promising for from an

378
00:17:40,460 --> 00:17:45,950
RC it says insufficiently validated city

379
00:17:44,270 --> 00:17:46,490
target terrorists that sounded like

380
00:17:45,950 --> 00:17:48,800
something

381
00:17:46,490 --> 00:17:49,790
it said successful exhale to the law of

382
00:17:48,800 --> 00:17:52,250
the attacker to cause a buffer overflow

383
00:17:49,790 --> 00:17:56,629
that could lead to remotely

384
00:17:52,250 --> 00:17:58,280
so that sounded good and actually the

385
00:17:56,630 --> 00:17:59,600
vulnerability we did the same process we

386
00:17:58,280 --> 00:18:02,480
did the patch sniffing we narrowed down

387
00:17:59,600 --> 00:18:04,280
on the parsing of TVs and one of the

388
00:18:02,480 --> 00:18:06,650
more complex TVs in which we actually

389
00:18:04,280 --> 00:18:10,070
found the bug was the addresses TV so

390
00:18:06,650 --> 00:18:11,690
this is just part of the CDP packet it

391
00:18:10,070 --> 00:18:14,540
has all these fields but then it has

392
00:18:11,690 --> 00:18:16,910
these areas of type ranked valuing

393
00:18:14,540 --> 00:18:20,149
structures and the addresses is simply

394
00:18:16,910 --> 00:18:22,370
an array of IP addresses that this

395
00:18:20,150 --> 00:18:25,640
certain device that advertises itself

396
00:18:22,370 --> 00:18:30,860
has but as you can see there are way too

397
00:18:25,640 --> 00:18:33,350
much length fields in this TV it has the

398
00:18:30,860 --> 00:18:37,610
two bytes to do by transferring the

399
00:18:33,350 --> 00:18:39,169
entire TV and then a 4 bytes integer for

400
00:18:37,610 --> 00:18:41,179
the number of addresses in their array

401
00:18:39,170 --> 00:18:43,760
which doesn't make any sense because one

402
00:18:41,180 --> 00:18:46,160
is limited by the other and then for

403
00:18:43,760 --> 00:18:48,379
each of the addresses there is the

404
00:18:46,160 --> 00:18:52,490
protocol language which says whether

405
00:18:48,380 --> 00:18:54,740
this address is an ipv4 or ipv6 but

406
00:18:52,490 --> 00:18:56,780
although these addresses are have fixed

407
00:18:54,740 --> 00:18:58,940
length of either 4 bytes or 16 bytes

408
00:18:56,780 --> 00:19:00,889
there is still also in address lengths

409
00:18:58,940 --> 00:19:03,080
so there is an other complications a

410
00:19:00,890 --> 00:19:06,680
structure that looks like it would be

411
00:19:03,080 --> 00:19:08,360
difficult to parse and you would imagine

412
00:19:06,680 --> 00:19:10,310
what would happen if they didn't address

413
00:19:08,360 --> 00:19:13,820
with this large buffer would be sent

414
00:19:10,310 --> 00:19:17,139
although it's an ipv4 address with for

415
00:19:13,820 --> 00:19:21,470
some reason with 132 bytes of length

416
00:19:17,140 --> 00:19:24,080
yeah so we did find a heap overflow I

417
00:19:21,470 --> 00:19:25,820
want a heap overflowing in CDP here and

418
00:19:24,080 --> 00:19:28,340
I just want to walk through a bit of

419
00:19:25,820 --> 00:19:31,129
this aesthetic mobility and how it works

420
00:19:28,340 --> 00:19:33,919
there are actually more than one bugs in

421
00:19:31,130 --> 00:19:36,530
this code the number of addresses that I

422
00:19:33,920 --> 00:19:38,000
said before is 4 bytes for example can

423
00:19:36,530 --> 00:19:39,470
be overflown because there is

424
00:19:38,000 --> 00:19:41,270
multiplication there in the beginning

425
00:19:39,470 --> 00:19:44,330
that's that's not bad I want to talk

426
00:19:41,270 --> 00:19:46,400
about there is as much notice and

427
00:19:44,330 --> 00:19:49,429
interesting man copy at the end of the

428
00:19:46,400 --> 00:19:51,710
function that looks like it might be

429
00:19:49,430 --> 00:19:54,920
copying an address based on this large

430
00:19:51,710 --> 00:19:57,350
address length so let's see if if we

431
00:19:54,920 --> 00:19:59,570
just set up a package with the large

432
00:19:57,350 --> 00:20:02,510
address whether it will cause an

433
00:19:59,570 --> 00:20:03,350
overflow there is a device record this

434
00:20:02,510 --> 00:20:07,830
is

435
00:20:03,350 --> 00:20:10,080
structure that that represents a certain

436
00:20:07,830 --> 00:20:12,210
CDP neighbor CDP device that is

437
00:20:10,080 --> 00:20:14,520
connected and sends VP packets and that

438
00:20:12,210 --> 00:20:17,220
is allocated for each TP neighbor and

439
00:20:14,520 --> 00:20:19,650
inside it is an address blob for all the

440
00:20:17,220 --> 00:20:22,470
addresses that has been parsed so

441
00:20:19,650 --> 00:20:24,540
initially in fact it we every time a

442
00:20:22,470 --> 00:20:26,790
packet is received this address blob

443
00:20:24,540 --> 00:20:30,750
will either be allocated or be reused

444
00:20:26,790 --> 00:20:33,060
from a previous allocation so in this

445
00:20:30,750 --> 00:20:36,360
packet we have ipv4 address but the

446
00:20:33,060 --> 00:20:38,370
address length is not a four bytes so

447
00:20:36,360 --> 00:20:41,159
the protocol type inside address blob

448
00:20:38,370 --> 00:20:44,459
will not be set and it will remain

449
00:20:41,160 --> 00:20:47,340
uninitialized and when we get to this if

450
00:20:44,460 --> 00:20:49,410
below in most cases it won't be added

451
00:20:47,340 --> 00:20:51,060
before or ipv6 because it's

452
00:20:49,410 --> 00:20:53,310
uninitialized and this mem copy won't

453
00:20:51,060 --> 00:20:55,500
occur but as you might have stood from

454
00:20:53,310 --> 00:20:58,740
what I already start with scribe there

455
00:20:55,500 --> 00:21:00,870
is might be a state infusion here and

456
00:20:58,740 --> 00:21:02,880
the protocol type might have already

457
00:21:00,870 --> 00:21:06,479
been set in a previous one so this is

458
00:21:02,880 --> 00:21:08,730
how to exploit this bug an attacker

459
00:21:06,480 --> 00:21:11,460
consent to CDP packets the first one is

460
00:21:08,730 --> 00:21:14,670
a majority packet with an ipv4 address

461
00:21:11,460 --> 00:21:17,160
of four bytes so in address blob would

462
00:21:14,670 --> 00:21:21,390
be allocated and then this condition

463
00:21:17,160 --> 00:21:24,270
would would be good and the protocol

464
00:21:21,390 --> 00:21:26,850
type would be set accordingly and then a

465
00:21:24,270 --> 00:21:30,360
second packet can be sent this time with

466
00:21:26,850 --> 00:21:32,280
an address line that is large but the

467
00:21:30,360 --> 00:21:36,449
same number of addresses so the address

468
00:21:32,280 --> 00:21:38,639
blob will be reused and we won't enter

469
00:21:36,450 --> 00:21:41,970
any of these ifs but the particle type

470
00:21:38,640 --> 00:21:43,410
being said set in the previous one will

471
00:21:41,970 --> 00:21:47,490
be already be active for and then the

472
00:21:43,410 --> 00:21:48,630
memory so this is a heap overflow with

473
00:21:47,490 --> 00:21:50,790
the attacker control data

474
00:21:48,630 --> 00:21:54,350
sounds pretty exploitable an attacker

475
00:21:50,790 --> 00:21:57,480
can also trigger this multiple times

476
00:21:54,350 --> 00:21:59,550
okay so we understood that CDP is a good

477
00:21:57,480 --> 00:22:02,070
target it has these complex structures

478
00:21:59,550 --> 00:22:04,800
at ylvie with all kinds of these length

479
00:22:02,070 --> 00:22:07,050
fields and we also know from the LDP

480
00:22:04,800 --> 00:22:09,899
case boundary checks are in issue with

481
00:22:07,050 --> 00:22:12,149
some of Cisco's code here we feel that

482
00:22:09,900 --> 00:22:15,150
their days are closing than ever and

483
00:22:12,150 --> 00:22:19,640
then we start our own hazard a research

484
00:22:15,150 --> 00:22:22,050
we want to sleep on all the things and

485
00:22:19,640 --> 00:22:23,280
we'll start now

486
00:22:22,050 --> 00:22:27,780
[Music]

487
00:22:23,280 --> 00:22:31,080
with one of the zero days okay yeah okay

488
00:22:27,780 --> 00:22:33,000
so let's dive in into some zero days so

489
00:22:31,080 --> 00:22:35,909
the first one is actually in the same

490
00:22:33,000 --> 00:22:37,320
tlvs we've just seen the issue is it's

491
00:22:35,910 --> 00:22:39,600
got to do with the number of addresses

492
00:22:37,320 --> 00:22:41,939
filled as we said it's four bytes long

493
00:22:39,600 --> 00:22:45,290
this doesn't make a lot of sense because

494
00:22:41,940 --> 00:22:48,780
not only a packet cannot be that big but

495
00:22:45,290 --> 00:22:50,280
the system is actually 32-bit so the

496
00:22:48,780 --> 00:22:52,980
entire memory cannot hold so many

497
00:22:50,280 --> 00:22:57,120
addresses so let's see what's the issue

498
00:22:52,980 --> 00:23:01,620
is here so we're gonna want to cause a

499
00:22:57,120 --> 00:23:05,370
denial of service we can allocate using

500
00:23:01,620 --> 00:23:08,070
the number of addresses field but there

501
00:23:05,370 --> 00:23:10,760
is a length check using them for number

502
00:23:08,070 --> 00:23:13,409
of addresses times five this multiplayer

503
00:23:10,760 --> 00:23:16,170
multiplication can cause integer

504
00:23:13,410 --> 00:23:19,140
overflow and so let's see how we can

505
00:23:16,170 --> 00:23:22,590
leverage that into the desired denial of

506
00:23:19,140 --> 00:23:25,140
service so the first we're gonna put max

507
00:23:22,590 --> 00:23:26,730
you int in the number of addresses but

508
00:23:25,140 --> 00:23:29,190
then of course it's gonna overflow into

509
00:23:26,730 --> 00:23:32,880
to a big of a number so we won't pass

510
00:23:29,190 --> 00:23:35,400
our length check then we're gonna try to

511
00:23:32,880 --> 00:23:38,429
take a you ain't divided by five and

512
00:23:35,400 --> 00:23:40,530
round it up so the multiplication is

513
00:23:38,429 --> 00:23:42,870
gonna give us a small number which is

514
00:23:40,530 --> 00:23:47,190
reasonable to pass the length Jack but

515
00:23:42,870 --> 00:23:48,719
the allocation size is gonna be too big

516
00:23:47,190 --> 00:23:51,780
so the malloc is gonna fail and the

517
00:23:48,720 --> 00:23:53,940
resources we're not gonna be allocated

518
00:23:51,780 --> 00:23:56,280
and there won't be anything out of

519
00:23:53,940 --> 00:23:58,920
service but we've seen these normal

520
00:23:56,280 --> 00:24:02,428
works so we're gonna multiply it by four

521
00:23:58,920 --> 00:24:04,110
and once again the length check is gonna

522
00:24:02,429 --> 00:24:07,080
pass because we're still gonna get a

523
00:24:04,110 --> 00:24:09,629
small number but the allocation is going

524
00:24:07,080 --> 00:24:12,240
to be with a reasonable size of 800

525
00:24:09,630 --> 00:24:14,010
megabytes which is gonna be allocated

526
00:24:12,240 --> 00:24:16,620
and shouldered after the switch is going

527
00:24:14,010 --> 00:24:20,100
to crash due to resource exhaustion so

528
00:24:16,620 --> 00:24:23,969
we got all the denial service and okay

529
00:24:20,100 --> 00:24:26,699
so let's check out the next day and this

530
00:24:23,970 --> 00:24:28,470
year the impacts and xox switches and

531
00:24:26,700 --> 00:24:31,440
it's in the public question

532
00:24:28,470 --> 00:24:33,840
this is a fairly simple stackoverflow

533
00:24:31,440 --> 00:24:35,880
and it's exploitable and we've managed

534
00:24:33,840 --> 00:24:37,590
to successfully exploited due to no

535
00:24:35,880 --> 00:24:41,310
stock calories and low entropy is

536
00:24:37,590 --> 00:24:43,709
allowed and but also this bug is right

537
00:24:41,310 --> 00:24:47,970
what well which we're gonna see how can

538
00:24:43,710 --> 00:24:52,260
be leveraged right now so and this is a

539
00:24:47,970 --> 00:24:54,510
copy loop a while loop and if no virtual

540
00:24:52,260 --> 00:24:56,670
no length checks only you only take the

541
00:24:54,510 --> 00:24:58,740
length from the packet and it's copied

542
00:24:56,670 --> 00:25:01,590
to the stack to the temp buffer which is

543
00:24:58,740 --> 00:25:02,970
a fixed size so we can pretty much write

544
00:25:01,590 --> 00:25:06,120
whatever you want

545
00:25:02,970 --> 00:25:08,060
how much you want into the stack but as

546
00:25:06,120 --> 00:25:11,070
you notice there's being there's a

547
00:25:08,060 --> 00:25:14,370
variable called a1 which is also on the

548
00:25:11,070 --> 00:25:16,260
stack and it can be run over and it's

549
00:25:14,370 --> 00:25:19,010
being the reference and written to so

550
00:25:16,260 --> 00:25:22,470
let's see step-by-step how we can do it

551
00:25:19,010 --> 00:25:25,020
and cause a write what well so on our

552
00:25:22,470 --> 00:25:27,450
left we have a simple simplified version

553
00:25:25,020 --> 00:25:30,570
of the code and all on a right we have

554
00:25:27,450 --> 00:25:32,520
memory map on the right side of the

555
00:25:30,570 --> 00:25:34,860
memory we have the packet being sent on

556
00:25:32,520 --> 00:25:36,540
the top left we have a simplified stack

557
00:25:34,860 --> 00:25:38,639
frame and on the bottom left we have the

558
00:25:36,540 --> 00:25:41,760
memory region around the address dead

559
00:25:38,640 --> 00:25:45,270
leaf our goal is to write a fake affair

560
00:25:41,760 --> 00:25:47,190
to the address that we've so let's do it

561
00:25:45,270 --> 00:25:49,260
so the first step we're gonna write a

562
00:25:47,190 --> 00:25:51,300
filthy world into the first selling temp

563
00:25:49,260 --> 00:25:54,000
and gonna increase the counter this is

564
00:25:51,300 --> 00:25:56,669
very simple the next step steps of a

565
00:25:54,000 --> 00:25:58,350
pretty straightforward and here we would

566
00:25:56,670 --> 00:26:00,450
have expected a length check to get us

567
00:25:58,350 --> 00:26:03,780
out of the loop but as you can see there

568
00:26:00,450 --> 00:26:06,710
is none and next we're gonna write to

569
00:26:03,780 --> 00:26:08,970
own a 1 the address dead leaf -12

570
00:26:06,710 --> 00:26:11,160
then we're gonna write to address that

571
00:26:08,970 --> 00:26:14,790
with - for the same address

572
00:26:11,160 --> 00:26:17,460
this is -4 because you need to add a

573
00:26:14,790 --> 00:26:18,180
counter and this is why we put minus 12i

574
00:26:17,460 --> 00:26:21,480
just believe me

575
00:26:18,180 --> 00:26:24,660
yeah we can compute it on your own but

576
00:26:21,480 --> 00:26:26,670
this is like a side-effect of the height

577
00:26:24,660 --> 00:26:28,410
but well so if you want to exploit it

578
00:26:26,670 --> 00:26:31,500
you know define an address that you can

579
00:26:28,410 --> 00:26:33,360
write the previous level to next step

580
00:26:31,500 --> 00:26:35,520
we're gonna increase counter again we're

581
00:26:33,360 --> 00:26:37,469
gonna write a fake affair into the next

582
00:26:35,520 --> 00:26:40,230
stack variable let's call it stock Val

583
00:26:37,470 --> 00:26:41,190
and after that we get our desired write

584
00:26:40,230 --> 00:26:44,610
what well cafe

585
00:26:41,190 --> 00:26:47,310
Farren to the address dead leaf and so

586
00:26:44,610 --> 00:26:49,979
as we said we were able to exploit it

587
00:26:47,310 --> 00:26:52,710
and there is a nice trick that helps the

588
00:26:49,980 --> 00:26:57,780
exploitation as I said there is a SLR

589
00:26:52,710 --> 00:26:59,490
and the system is 32-bit and but a saw

590
00:26:57,780 --> 00:27:01,530
is only one byte it in somewhere in the

591
00:26:59,490 --> 00:27:04,350
middle of the address so the distance

592
00:27:01,530 --> 00:27:07,170
between each SLR option is only four

593
00:27:04,350 --> 00:27:10,169
kilobytes long and the entire memory map

594
00:27:07,170 --> 00:27:12,990
is shifted with the same offset meaning

595
00:27:10,170 --> 00:27:14,460
two labels that are on the memory or all

596
00:27:12,990 --> 00:27:18,060
the libraries are being shifted with the

597
00:27:14,460 --> 00:27:20,640
same offset so if you put the numbers

598
00:27:18,060 --> 00:27:23,280
together every library with one megabyte

599
00:27:20,640 --> 00:27:25,800
of text section is gonna have overlap

600
00:27:23,280 --> 00:27:28,110
between the options of the SRO so the

601
00:27:25,800 --> 00:27:32,550
same addresses can be found to be mapped

602
00:27:28,110 --> 00:27:36,179
to two code so what we did is we use

603
00:27:32,550 --> 00:27:38,760
that to find multiple SLR options and

604
00:27:36,180 --> 00:27:41,730
construct multi option Rob chain so

605
00:27:38,760 --> 00:27:44,310
where one attempt to take the next point

606
00:27:41,730 --> 00:27:47,040
is gonna work on multiple a set of

607
00:27:44,310 --> 00:27:49,860
options given us the ability to exploit

608
00:27:47,040 --> 00:27:52,530
in minutes instead of days when trying

609
00:27:49,860 --> 00:27:54,659
all the possibilities and we're gonna

610
00:27:52,530 --> 00:27:56,970
we're not gonna elaborate about it this

611
00:27:54,660 --> 00:27:58,860
right now because it's a how we actually

612
00:27:56,970 --> 00:28:00,510
did it is very fairly complicated but

613
00:27:58,860 --> 00:28:02,429
they were gonna release a white paper in

614
00:28:00,510 --> 00:28:03,860
the future explaining just how this

615
00:28:02,430 --> 00:28:07,140
looks

616
00:28:03,860 --> 00:28:09,240
we have a short video just showing how

617
00:28:07,140 --> 00:28:10,860
this was exploited on a nexus on a Cisco

618
00:28:09,240 --> 00:28:13,800
Nexus which I didn't want to add

619
00:28:10,860 --> 00:28:17,370
something that we forgot to say this a

620
00:28:13,800 --> 00:28:19,350
SLR bypass technique but also I'm a

621
00:28:17,370 --> 00:28:23,070
large part of this research was done by

622
00:28:19,350 --> 00:28:28,379
a co-worker vas Barak cidade he's not

623
00:28:23,070 --> 00:28:30,840
here he's skiing but yeah so let's see

624
00:28:28,380 --> 00:28:33,270
what the demo looks like corporate

625
00:28:30,840 --> 00:28:34,889
laptop on one segment and then they

626
00:28:33,270 --> 00:28:39,450
talked attacker is connected to another

627
00:28:34,890 --> 00:28:41,700
segment and initially we can see that

628
00:28:39,450 --> 00:28:44,070
the attacker tries to run to try to

629
00:28:41,700 --> 00:28:46,620
access the corporate laptop but as I

630
00:28:44,070 --> 00:28:50,100
said they were segmented and he can't he

631
00:28:46,620 --> 00:28:52,049
uses CDP just to find whatever report he

632
00:28:50,100 --> 00:28:53,908
is in and

633
00:28:52,049 --> 00:28:58,110
the villain number that he's in he's

634
00:28:53,909 --> 00:29:01,499
going to use that after the attack and

635
00:28:58,110 --> 00:29:03,209
so a lot of the magic happens inside

636
00:29:01,499 --> 00:29:05,929
this fighting is great but essentially

637
00:29:03,210 --> 00:29:09,119
it sent multiple of these CDV packets

638
00:29:05,929 --> 00:29:12,179
and it triggers the overflow multiple

639
00:29:09,119 --> 00:29:15,178
times certain times it will fail the CDP

640
00:29:12,179 --> 00:29:18,570
demon will reboot but then he eventually

641
00:29:15,179 --> 00:29:21,720
acts which is called execution he will

642
00:29:18,570 --> 00:29:24,480
add a username for himself

643
00:29:21,720 --> 00:29:26,879
a user in a password and said it is an

644
00:29:24,480 --> 00:29:28,649
amine and also add a management

645
00:29:26,879 --> 00:29:31,199
interface for the villain that he is in

646
00:29:28,649 --> 00:29:34,709
the villain number two and then he can

647
00:29:31,200 --> 00:29:39,090
connect with a sage and the user that he

648
00:29:34,710 --> 00:29:41,070
has is also root because the CDP demon

649
00:29:39,090 --> 00:29:44,519
runs as route and you can add that

650
00:29:41,070 --> 00:29:48,899
credentials in the configuration of the

651
00:29:44,519 --> 00:29:51,179
switch he can then move his own port to

652
00:29:48,899 --> 00:29:56,729
the corporate VLAN or the super-secret

653
00:29:51,179 --> 00:29:59,460
villain in this terminal and once he's

654
00:29:56,730 --> 00:30:01,470
done that obviously he will be inside

655
00:29:59,460 --> 00:30:05,159
the same network as the corporate laptop

656
00:30:01,470 --> 00:30:09,700
we can then access the corporate image

657
00:30:05,159 --> 00:30:15,829
in that file ok

658
00:30:09,700 --> 00:30:15,829
[Applause]

659
00:30:17,070 --> 00:30:23,320
okay for the last zero day for this

660
00:30:20,500 --> 00:30:25,960
stock we're gonna talk about a zero day

661
00:30:23,320 --> 00:30:28,809
that affects multiple models of Cisco

662
00:30:25,960 --> 00:30:31,870
VoIP phones and this is also a fairly

663
00:30:28,809 --> 00:30:34,710
simple stack overflow it's a mem copy to

664
00:30:31,870 --> 00:30:37,870
the stack without any length jacks and

665
00:30:34,710 --> 00:30:41,140
we were also able to exploit this bug

666
00:30:37,870 --> 00:30:42,699
and due to the same lack of memory

667
00:30:41,140 --> 00:30:48,210
mitigations we've talked about earlier

668
00:30:42,700 --> 00:30:53,049
but this specific device has another bug

669
00:30:48,210 --> 00:30:54,370
enabling the attacker to attack any VoIP

670
00:30:53,049 --> 00:30:57,100
phone in his land

671
00:30:54,370 --> 00:31:00,189
so as we said CDP is usually sent with a

672
00:30:57,100 --> 00:31:02,889
multicast address and this means that

673
00:31:00,190 --> 00:31:04,809
packets are only passed in the

674
00:31:02,890 --> 00:31:07,210
neighboring devices so when a computer

675
00:31:04,809 --> 00:31:09,460
sends a packet a CD be packaged to the

676
00:31:07,210 --> 00:31:10,440
switch the switch passes it but it

677
00:31:09,460 --> 00:31:13,770
doesn't pass it along

678
00:31:10,440 --> 00:31:16,179
and then again if if an attacker or

679
00:31:13,770 --> 00:31:19,179
anyone wants to send the CDP packets

680
00:31:16,179 --> 00:31:21,370
with a unicast destined to the VoIP

681
00:31:19,179 --> 00:31:23,980
phone he sent this to the to the switch

682
00:31:21,370 --> 00:31:26,290
and the switch passes it along but it

683
00:31:23,980 --> 00:31:29,669
shouldn't be passed but as I said there

684
00:31:26,290 --> 00:31:32,760
is about causing it to to be passed and

685
00:31:29,669 --> 00:31:35,410
allowing the attacker used unicast or

686
00:31:32,760 --> 00:31:37,150
broadcast packets to attack any any

687
00:31:35,410 --> 00:31:40,150
device he wants during the switch so

688
00:31:37,150 --> 00:31:42,340
let's see why that is this is a graph

689
00:31:40,150 --> 00:31:45,070
showing the flow of Serie B packet

690
00:31:42,340 --> 00:31:47,470
inside the phone and the only two things

691
00:31:45,070 --> 00:31:49,990
to look at here is the red part which is

692
00:31:47,470 --> 00:31:51,730
the function that has the zero that

693
00:31:49,990 --> 00:31:53,620
we've talked about and the green part

694
00:31:51,730 --> 00:31:55,750
which is the function that evaluates the

695
00:31:53,620 --> 00:31:57,939
packet and make sure it's a valid CDP

696
00:31:55,750 --> 00:32:00,250
packet so if we take a look at the

697
00:31:57,940 --> 00:32:05,410
packet right now we can see that the

698
00:32:00,250 --> 00:32:07,330
only verification of the extranet header

699
00:32:05,410 --> 00:32:09,190
is of the source MAC and not the

700
00:32:07,330 --> 00:32:10,899
destination MAC meaning you can send it

701
00:32:09,190 --> 00:32:12,820
with any address you want the slogans as

702
00:32:10,900 --> 00:32:16,150
long as it gets to the switch it's going

703
00:32:12,820 --> 00:32:18,490
to be passed as CDP packet and if it has

704
00:32:16,150 --> 00:32:22,480
a zero day it's gonna be it could be

705
00:32:18,490 --> 00:32:26,049
exploited and so now after exploitation

706
00:32:22,480 --> 00:32:27,850
which we're gonna skip the ad we have

707
00:32:26,049 --> 00:32:28,600
some stuff we want to do with the VoIP

708
00:32:27,850 --> 00:32:30,280
and see what

709
00:32:28,600 --> 00:32:33,520
we can do once again gain discos

710
00:32:30,280 --> 00:32:37,060
execution so as we said the vibes can be

711
00:32:33,520 --> 00:32:41,170
found in really important places and we

712
00:32:37,060 --> 00:32:45,790
like gifts so let's take a look at what

713
00:32:41,170 --> 00:32:48,040
we can do so this phone is here's a

714
00:32:45,790 --> 00:32:49,470
Linux system with busy box and an

715
00:32:48,040 --> 00:32:52,690
overarm little-endian

716
00:32:49,470 --> 00:32:55,000
which gives us a lot of space to do

717
00:32:52,690 --> 00:32:58,030
whatever we want a lot of stuff are

718
00:32:55,000 --> 00:33:00,400
already documented and it has a nice

719
00:32:58,030 --> 00:33:04,060
screen so we want to see what we can do

720
00:33:00,400 --> 00:33:06,550
with this screen so and we found this

721
00:33:04,060 --> 00:33:09,490
utility called FB CTL which pointed us

722
00:33:06,550 --> 00:33:12,820
to to understand that this device uses a

723
00:33:09,490 --> 00:33:15,430
frame buffer is a graphics driver and so

724
00:33:12,820 --> 00:33:19,600
as you can see on the on the right side

725
00:33:15,430 --> 00:33:21,280
of the slide how this communication with

726
00:33:19,600 --> 00:33:22,929
the hardware actually works on the

727
00:33:21,280 --> 00:33:23,500
bottom we have the hardware the screen

728
00:33:22,930 --> 00:33:25,480
itself

729
00:33:23,500 --> 00:33:28,240
and the middle you have the kernel which

730
00:33:25,480 --> 00:33:30,520
implements as drive special driver to

731
00:33:28,240 --> 00:33:32,560
communicate with the hardware and the

732
00:33:30,520 --> 00:33:37,090
interface it gives to the user if the

733
00:33:32,560 --> 00:33:39,760
device fb0 but I'm usually the use of

734
00:33:37,090 --> 00:33:42,520
space has an X or a platoon of some sort

735
00:33:39,760 --> 00:33:45,160
that helps it to communicate with the

736
00:33:42,520 --> 00:33:47,260
frame buffer in our case we did not have

737
00:33:45,160 --> 00:33:48,760
that and a Compaq was compiling it and

738
00:33:47,260 --> 00:33:51,010
running it on the phone as a bit of a

739
00:33:48,760 --> 00:33:53,230
headache so we needed to work directly

740
00:33:51,010 --> 00:33:57,129
with the with the frame buffer itself

741
00:33:53,230 --> 00:34:00,790
and so whenever we try to write to the

742
00:33:57,130 --> 00:34:02,860
screen this happens like this sort of

743
00:34:00,790 --> 00:34:06,220
flickering we're not being able to take

744
00:34:02,860 --> 00:34:07,570
over the screen and this is due to the

745
00:34:06,220 --> 00:34:10,090
screen being busy written by another

746
00:34:07,570 --> 00:34:11,560
process so what we're gonna do is going

747
00:34:10,090 --> 00:34:13,900
to send six-top to that process

748
00:34:11,560 --> 00:34:15,520
just stop it because we had a root

749
00:34:13,900 --> 00:34:20,139
previous code execution and we're gonna

750
00:34:15,520 --> 00:34:22,960
use the that utility FB CTL to draw some

751
00:34:20,139 --> 00:34:26,170
shapes on the screen and maybe add some

752
00:34:22,960 --> 00:34:28,870
other shapes and if we if we try a

753
00:34:26,170 --> 00:34:33,370
little bit harder we can put some more

754
00:34:28,870 --> 00:34:37,779
elaborate images like this one and we

755
00:34:33,370 --> 00:34:40,179
can have a closer look and so now we're

756
00:34:37,780 --> 00:34:41,919
totally owning the screen we think yeah

757
00:34:40,179 --> 00:34:46,328
maybe we had enough

758
00:34:41,918 --> 00:34:48,058
we did enough for this device but then

759
00:34:46,329 --> 00:34:50,889
we thought we want to be serious

760
00:34:48,059 --> 00:34:53,259
researchers and so the obvious next step

761
00:34:50,889 --> 00:34:57,369
is we're gonna run some doom on this

762
00:34:53,259 --> 00:34:59,650
device so the first thing we do is go to

763
00:34:57,369 --> 00:35:02,319
Google look for flame before doom and we

764
00:34:59,650 --> 00:35:04,059
find someone already did some

765
00:35:02,319 --> 00:35:05,619
adaptations to make it work with frame

766
00:35:04,059 --> 00:35:06,460
buffer and it was nice enough to put it

767
00:35:05,619 --> 00:35:10,239
on github

768
00:35:06,460 --> 00:35:11,769
and with some adaptation of some of our

769
00:35:10,239 --> 00:35:20,920
own we're able to run doom on this

770
00:35:11,769 --> 00:35:23,049
device yeah but we actually want to play

771
00:35:20,920 --> 00:35:26,289
it and this doesn't have a keyboard but

772
00:35:23,049 --> 00:35:28,960
it has keys and so what we do we look

773
00:35:26,289 --> 00:35:31,210
for a GPIO like functionality is on the

774
00:35:28,960 --> 00:35:32,680
void phone and we find this led CMD

775
00:35:31,210 --> 00:35:36,940
which sounds like it has something to do

776
00:35:32,680 --> 00:35:40,509
with GPIO and it uses this child object

777
00:35:36,940 --> 00:35:45,029
called Lib io API this has this amazing

778
00:35:40,509 --> 00:35:50,440
function called a keeper event yeah and

779
00:35:45,029 --> 00:35:52,450
it uses a device called an event inputs

780
00:35:50,440 --> 00:35:53,619
the event zero and this is actually

781
00:35:52,450 --> 00:35:56,470
documented in the Linux kernel

782
00:35:53,619 --> 00:36:00,249
documentation so we're able to just use

783
00:35:56,470 --> 00:36:07,058
it as if so now we're gonna see a live

784
00:36:00,249 --> 00:36:10,629
them hopefully already exploit just

785
00:36:07,059 --> 00:36:13,539
before the tower talk so we can see the

786
00:36:10,630 --> 00:36:15,339
couple of CDP packets and the CDP packet

787
00:36:13,539 --> 00:36:17,529
on the bottom is the one the trigger the

788
00:36:15,339 --> 00:36:19,660
exploit you can see all these buffer and

789
00:36:17,529 --> 00:36:21,999
if you've all scores beat you can see

790
00:36:19,660 --> 00:36:24,999
the commands that he put there in the

791
00:36:21,999 --> 00:36:29,618
shell code and on the left is where he

792
00:36:24,999 --> 00:36:33,959
ran the exploit on the terminal and so

793
00:36:29,619 --> 00:36:33,960
hopefully this VoIP phone already has

794
00:36:34,170 --> 00:36:39,970
the backdoor on it and it communicates

795
00:36:37,989 --> 00:36:43,329
with the vault computer to to give it

796
00:36:39,970 --> 00:36:45,879
any commands so we can now see what the

797
00:36:43,329 --> 00:36:46,830
phone looks like when we do all kind of

798
00:36:45,880 --> 00:36:52,260
things with it

799
00:36:46,830 --> 00:36:56,290
[Music]

800
00:36:52,260 --> 00:37:00,640
the sound is from the phone and here we

801
00:36:56,290 --> 00:37:06,660
start by cylinder exploits the attacker

802
00:37:00,640 --> 00:37:06,660
can blink the legs also record the phone

803
00:37:07,060 --> 00:37:22,889
[Music]

804
00:37:31,220 --> 00:37:47,580
you can see how bad we are

805
00:37:34,710 --> 00:37:49,560
it's doomed in other powers that we show

806
00:37:47,580 --> 00:37:51,299
you in the end of the video is that

807
00:37:49,560 --> 00:37:53,040
because we can also trigger this with a

808
00:37:51,300 --> 00:37:55,260
broadcast package the doctor can send

809
00:37:53,040 --> 00:38:14,160
one packet and it will crash all the

810
00:37:55,260 --> 00:38:16,440
boys in the same land so the lifetime

811
00:38:14,160 --> 00:38:19,049
was we're not with the live demo gods

812
00:38:16,440 --> 00:38:22,110
we're not with us but this does work and

813
00:38:19,050 --> 00:38:24,450
these beauties are real I think part of

814
00:38:22,110 --> 00:38:28,280
the takeaways here going back or first

815
00:38:24,450 --> 00:38:31,680
to network segmentation the IP phones

816
00:38:28,280 --> 00:38:33,810
obviously are important but we started

817
00:38:31,680 --> 00:38:36,120
this from understanding whether a

818
00:38:33,810 --> 00:38:41,310
network segmentation is a solid solution

819
00:38:36,120 --> 00:38:43,109
or further holes can be found in it and

820
00:38:41,310 --> 00:38:46,290
yeah I think part of the takeaway is it

821
00:38:43,110 --> 00:38:49,350
isn't the bullet proof solution it's not

822
00:38:46,290 --> 00:38:51,330
enough only to have segments the network

823
00:38:49,350 --> 00:38:55,430
unit don't always understand where the

824
00:38:51,330 --> 00:38:59,160
device is or acting out of place and

825
00:38:55,430 --> 00:39:00,990
network switches are also endpoints in a

826
00:38:59,160 --> 00:39:03,379
way there are also embedded devices that

827
00:39:00,990 --> 00:39:06,899
can be taking over the second stats

828
00:39:03,380 --> 00:39:08,490
bullet I think is what do we now know

829
00:39:06,900 --> 00:39:11,370
about layer two protocols

830
00:39:08,490 --> 00:39:13,830
there are many of these it's a very

831
00:39:11,370 --> 00:39:15,660
large attack surface CDP and lldp are

832
00:39:13,830 --> 00:39:19,020
only two protocols there are maybe maybe

833
00:39:15,660 --> 00:39:20,640
a dozen of these so it's an apt attack

834
00:39:19,020 --> 00:39:22,830
surface and much more research needs to

835
00:39:20,640 --> 00:39:25,170
be done to understand if one abilities

836
00:39:22,830 --> 00:39:27,299
in that face and lastly but most

837
00:39:25,170 --> 00:39:28,940
importantly whenever you're aboard in

838
00:39:27,300 --> 00:39:31,320
some meeting room in a conference room

839
00:39:28,940 --> 00:39:33,960
doing on a Cisco IP phone is probably

840
00:39:31,320 --> 00:39:36,480
the best solution of your time best use

841
00:39:33,960 --> 00:39:37,830
of your time and if you anybody have

842
00:39:36,480 --> 00:39:39,300
questions I think we have microphones

843
00:39:37,830 --> 00:39:42,119
but if you have any questions and maybe

844
00:39:39,300 --> 00:39:53,440
we can try and and

845
00:39:42,119 --> 00:39:56,230
so yeah the question was whether CDP is

846
00:39:53,440 --> 00:39:58,359
parsed on interface in which CDP is

847
00:39:56,230 --> 00:40:01,650
disabled so the answer is no the

848
00:39:58,359 --> 00:40:04,509
mitigation for this we you know prior to

849
00:40:01,650 --> 00:40:07,660
if you can't patch you can simply turn

850
00:40:04,510 --> 00:40:09,640
off CDP but in certain devices like the

851
00:40:07,660 --> 00:40:10,750
IP phones for example it's almost

852
00:40:09,640 --> 00:40:12,540
impossible to do that it's very

853
00:40:10,750 --> 00:40:16,120
difficult to turn off in city people

854
00:40:12,540 --> 00:40:19,409
right thank you guys

855
00:40:16,120 --> 00:40:19,409
[Applause]

