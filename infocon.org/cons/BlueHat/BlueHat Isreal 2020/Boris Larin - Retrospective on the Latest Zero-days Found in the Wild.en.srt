1
00:00:11,959 --> 00:00:16,800
so my name is boris larin I'm working in

2
00:00:15,480 --> 00:00:19,410
global research and analysis team

3
00:00:16,800 --> 00:00:22,919
kaspersky and at work I find surveys

4
00:00:19,410 --> 00:00:24,810
exploited in the world so last year we

5
00:00:22,919 --> 00:00:27,119
were extremely honored to speak at the

6
00:00:24,810 --> 00:00:28,740
first-ever bluehead Shanghai and we

7
00:00:27,119 --> 00:00:30,810
presented our research which was a

8
00:00:28,740 --> 00:00:33,690
review of the latest Windows kernel

9
00:00:30,810 --> 00:00:36,150
exploit mountains about and in that

10
00:00:33,690 --> 00:00:38,250
presentation we shared information about

11
00:00:36,150 --> 00:00:40,050
the most interesting liabilities we also

12
00:00:38,250 --> 00:00:41,850
gave a sneak peek into exploitation of

13
00:00:40,050 --> 00:00:44,910
framework that was used among many

14
00:00:41,850 --> 00:00:46,260
zero-days so today I'm really happy to

15
00:00:44,910 --> 00:00:49,019
share with you more information about

16
00:00:46,260 --> 00:00:50,670
this additional framework and I will try

17
00:00:49,020 --> 00:00:54,090
to explain how it's possible to provide

18
00:00:50,670 --> 00:00:56,820
zero-days as a service with all these

19
00:00:54,090 --> 00:00:59,520
antivirus vendors and antivirus vendors

20
00:00:56,820 --> 00:01:02,010
looking for them and also I will share

21
00:00:59,520 --> 00:01:03,149
with you more information about other

22
00:01:02,010 --> 00:01:07,259
days that he found emphasizing

23
00:01:03,149 --> 00:01:09,000
maintenance so here's the brief recap

24
00:01:07,259 --> 00:01:12,750
for this presentation at the head

25
00:01:09,000 --> 00:01:15,030
Channel so in 2018 we in total we found

26
00:01:12,750 --> 00:01:18,630
for 0 days there was an attack on

27
00:01:15,030 --> 00:01:21,780
Microsoft Office through the Internet

28
00:01:18,630 --> 00:01:25,080
Explorer then we found a first known

29
00:01:21,780 --> 00:01:27,990
case which was studied in insert key in

30
00:01:25,080 --> 00:01:29,970
latest build of Windows 10 at the month

31
00:01:27,990 --> 00:01:33,270
of discovery which was restaurant for

32
00:01:29,970 --> 00:01:35,850
all after all these new mitigations were

33
00:01:33,270 --> 00:01:37,259
implemented and then we found one more

34
00:01:35,850 --> 00:01:39,960
sheet even deniability

35
00:01:37,259 --> 00:01:41,549
but it was not that much interesting

36
00:01:39,960 --> 00:01:44,130
because it was tagged in on the all the

37
00:01:41,549 --> 00:01:46,290
bills but a very sophisticated framework

38
00:01:44,130 --> 00:01:48,479
was discovered and then we found one

39
00:01:46,290 --> 00:01:50,310
more relational privilege and this one

40
00:01:48,479 --> 00:01:53,100
was very interesting because it was the

41
00:01:50,310 --> 00:01:55,610
button and test kernel and it allow you

42
00:01:53,100 --> 00:01:58,289
to skip sandboxes of web browsers and

43
00:01:55,610 --> 00:02:01,020
also it reviewed some noise rotation

44
00:01:58,290 --> 00:02:03,329
techniques so the last two three days

45
00:02:01,020 --> 00:02:06,420
they were a part of the same inspiration

46
00:02:03,329 --> 00:02:08,130
framework and it's not possible to talk

47
00:02:06,420 --> 00:02:10,920
about this reputation framework without

48
00:02:08,130 --> 00:02:11,850
talking about their days market so zero

49
00:02:10,919 --> 00:02:13,440
day exploits

50
00:02:11,850 --> 00:02:15,570
right now it's a multi-billion dollar

51
00:02:13,440 --> 00:02:19,109
industry and there are a few companies

52
00:02:15,570 --> 00:02:22,350
who work in this area and some of them

53
00:02:19,109 --> 00:02:24,550
have a lot of publicity and some others

54
00:02:22,350 --> 00:02:27,250
are not and we observe

55
00:02:24,550 --> 00:02:30,760
groves of number of entities who develop

56
00:02:27,250 --> 00:02:32,770
and install exploits in volumes and each

57
00:02:30,760 --> 00:02:35,290
of these companies they had different

58
00:02:32,770 --> 00:02:36,940
models and some of them are picked to

59
00:02:35,290 --> 00:02:39,480
choose customers and there is a

60
00:02:36,940 --> 00:02:42,730
possibility that some others are not and

61
00:02:39,480 --> 00:02:44,980
they do a great at home and like their

62
00:02:42,730 --> 00:02:47,260
disused ins world they're too risky to

63
00:02:44,980 --> 00:02:51,700
be stant about if you encounter one of

64
00:02:47,260 --> 00:02:53,260
them so when such products of such

65
00:02:51,700 --> 00:02:55,269
companies when they are used in the

66
00:02:53,260 --> 00:02:58,000
world it's just a matter of time until

67
00:02:55,270 --> 00:03:01,030
we or our industry partners stumble into

68
00:02:58,000 --> 00:03:03,460
one of them so we encountered multiple

69
00:03:01,030 --> 00:03:05,650
attacks that were using a unique

70
00:03:03,460 --> 00:03:07,660
exploitation framework and those attacks

71
00:03:05,650 --> 00:03:10,300
they were conducted by several trade

72
00:03:07,660 --> 00:03:12,670
actors and this rotation framework it

73
00:03:10,300 --> 00:03:15,970
seemingly contained an armory of

74
00:03:12,670 --> 00:03:17,700
different exploits and functionality of

75
00:03:15,970 --> 00:03:20,410
this one work it was included an

76
00:03:17,700 --> 00:03:22,720
antivirus evasion it was choosing

77
00:03:20,410 --> 00:03:24,490
appropriate exposure reliably and it

78
00:03:22,720 --> 00:03:27,390
also contained a very sophisticated

79
00:03:24,490 --> 00:03:30,610
direct current object manipulation

80
00:03:27,390 --> 00:03:33,040
so I'm actually often asked like how do

81
00:03:30,610 --> 00:03:36,130
you even find your days like don't say

82
00:03:33,040 --> 00:03:37,959
like before the execution of an expose

83
00:03:36,130 --> 00:03:41,590
don't say check like antivirus installed

84
00:03:37,959 --> 00:03:43,300
and I think that it will be perfect if

85
00:03:41,590 --> 00:03:45,520
this was the case because it would mean

86
00:03:43,300 --> 00:03:48,130
that if you install antivirus you will

87
00:03:45,520 --> 00:03:49,720
be not attacked by zero day if attack

88
00:03:48,130 --> 00:03:52,390
you're not cares about burning the day

89
00:03:49,720 --> 00:03:55,180
of course and also right right now

90
00:03:52,390 --> 00:03:57,429
personal computers they come isn't worse

91
00:03:55,180 --> 00:03:58,260
by default it's actually a Windows

92
00:03:57,430 --> 00:04:01,180
Defender

93
00:03:58,260 --> 00:04:03,220
but imagine a product which is basically

94
00:04:01,180 --> 00:04:05,290
a collection of your days and there are

95
00:04:03,220 --> 00:04:07,209
two sides of a story we have a

96
00:04:05,290 --> 00:04:09,760
manufacturer of such product and the

97
00:04:07,209 --> 00:04:11,800
customers infant manufacturer it makes

98
00:04:09,760 --> 00:04:16,418
sense to protect zero days because so

99
00:04:11,800 --> 00:04:18,760
it's valuable asset it gets so to new

100
00:04:16,418 --> 00:04:21,399
and potentially another's customers and

101
00:04:18,760 --> 00:04:24,310
for customer like success of pression

102
00:04:21,399 --> 00:04:26,679
this is what matters the most and on

103
00:04:24,310 --> 00:04:28,660
depending on license model our customer

104
00:04:26,680 --> 00:04:29,980
might not even cares about Bernie's

105
00:04:28,660 --> 00:04:32,260
early so

106
00:04:29,980 --> 00:04:34,840
one customer bronzer day before others

107
00:04:32,260 --> 00:04:37,030
use it so like for manufacturer it's a

108
00:04:34,840 --> 00:04:37,989
loss so seems like protection of their

109
00:04:37,030 --> 00:04:40,659
days its

110
00:04:37,990 --> 00:04:44,590
problem for manufacturer if experts get

111
00:04:40,660 --> 00:04:47,620
salt on exclusive so in this framework

112
00:04:44,590 --> 00:04:50,799
it an't avail IV vision in Stars France

113
00:04:47,620 --> 00:04:53,890
right from the moment when shoe code is

114
00:04:50,800 --> 00:04:56,560
executed as a part of food chain and all

115
00:04:53,890 --> 00:04:58,120
the di functions they executed using

116
00:04:56,560 --> 00:05:01,870
specially built Tramp lines

117
00:04:58,120 --> 00:05:04,330
so framework it searches for special

118
00:05:01,870 --> 00:05:05,950
gadgets that are present in system

119
00:05:04,330 --> 00:05:11,050
libraries that are already present in

120
00:05:05,950 --> 00:05:14,500
the process and builds like fix tech to

121
00:05:11,050 --> 00:05:16,030
use this fake stick to execute all

122
00:05:14,500 --> 00:05:18,130
appeared functions and it's kinda

123
00:05:16,030 --> 00:05:20,380
similar to retinal rate and programming

124
00:05:18,130 --> 00:05:24,250
but that's done purely for antivirus

125
00:05:20,380 --> 00:05:27,070
evasion and show code it's used to

126
00:05:24,250 --> 00:05:29,860
execute embedded portable executable

127
00:05:27,070 --> 00:05:31,900
model and this model is a central part

128
00:05:29,860 --> 00:05:34,720
of framework it contains logic to be

129
00:05:31,900 --> 00:05:39,400
execute exploits and backdoor and in

130
00:05:34,720 --> 00:05:41,830
this model functions they executed using

131
00:05:39,400 --> 00:05:44,200
the same trampoline technique as in show

132
00:05:41,830 --> 00:05:46,359
code but this input method model it also

133
00:05:44,200 --> 00:05:48,400
contains an additional antivirus evasion

134
00:05:46,360 --> 00:05:51,340
logic but implementation is quite

135
00:05:48,400 --> 00:05:53,560
strange depending on a version of

136
00:05:51,340 --> 00:05:55,330
Windows it will check for special

137
00:05:53,560 --> 00:05:57,760
libraries that are already present in

138
00:05:55,330 --> 00:06:00,010
the process and in case if any of such

139
00:05:57,760 --> 00:06:03,460
libraries are present then it will

140
00:06:00,010 --> 00:06:06,520
terminate execution before executing any

141
00:06:03,460 --> 00:06:08,820
of exploits so actually we are quite

142
00:06:06,520 --> 00:06:11,590
likely because we were able to find

143
00:06:08,820 --> 00:06:13,570
multiple builds of this framework like

144
00:06:11,590 --> 00:06:16,150
here what happens into all the builds

145
00:06:13,570 --> 00:06:18,909
like in case of Windows 10 it will check

146
00:06:16,150 --> 00:06:21,549
that Emmet is Emmet is present on the

147
00:06:18,910 --> 00:06:24,430
system and in all other cases it will

148
00:06:21,550 --> 00:06:26,980
check for BitDefender and in new builds

149
00:06:24,430 --> 00:06:30,700
he also added check for malwarebytes and

150
00:06:26,980 --> 00:06:32,890
a one more unknown Libre library I don't

151
00:06:30,700 --> 00:06:35,860
know which one it is because they also

152
00:06:32,890 --> 00:06:37,659
started to compare to compare the names

153
00:06:35,860 --> 00:06:41,710
of the function of the libraries using

154
00:06:37,660 --> 00:06:43,420
CC checksum and actually this is check

155
00:06:41,710 --> 00:06:45,370
the patterns before execution of

156
00:06:43,420 --> 00:06:46,840
additional sports but there are also

157
00:06:45,370 --> 00:06:50,260
some additional checks that happens

158
00:06:46,840 --> 00:06:51,280
right after it so well I have a feelin

159
00:06:50,260 --> 00:06:52,810
that

160
00:06:51,280 --> 00:06:55,059
that in the next versions of this one

161
00:06:52,810 --> 00:06:58,480
walk developers will try to check for

162
00:06:55,060 --> 00:07:01,030
one more and Shiraz vendor and like

163
00:06:58,480 --> 00:07:03,520
remote code execution exploits as they

164
00:07:01,030 --> 00:07:05,138
may be tribute Muslim Muslim ones and I

165
00:07:03,520 --> 00:07:09,490
like how much attention in this

166
00:07:05,139 --> 00:07:12,639
framework is paid in ensuring the best

167
00:07:09,490 --> 00:07:15,120
possible reliability because like in

168
00:07:12,639 --> 00:07:17,200
case of elevation of religious rotation

169
00:07:15,120 --> 00:07:18,910
elevation execution of multiple

170
00:07:17,200 --> 00:07:21,070
instances will lead to blue screen of

171
00:07:18,910 --> 00:07:23,950
death so a proper mutual exclusion is

172
00:07:21,070 --> 00:07:27,280
required but used operating new tux API

173
00:07:23,950 --> 00:07:29,140
function it may arouse suspicion because

174
00:07:27,280 --> 00:07:32,559
it will be detected by security

175
00:07:29,140 --> 00:07:35,740
solutions so this framework it uses

176
00:07:32,560 --> 00:07:39,280
quite interesting technique so basically

177
00:07:35,740 --> 00:07:41,770
it acquires walk to the hip and walks

178
00:07:39,280 --> 00:07:45,580
over all the blocks allocated on the

179
00:07:41,770 --> 00:07:49,630
heap and it checks the size and its

180
00:07:45,580 --> 00:07:50,979
content and in case of such special

181
00:07:49,630 --> 00:07:54,669
block is already allocated on the heap

182
00:07:50,979 --> 00:07:57,180
it will mean that this - the walk is

183
00:07:54,669 --> 00:08:01,030
already running and it will terminate

184
00:07:57,180 --> 00:08:03,729
but in cases if it's in it's not present

185
00:08:01,030 --> 00:08:06,809
then it will just allocate it and will

186
00:08:03,729 --> 00:08:11,469
fill it with data so it will have meters

187
00:08:06,810 --> 00:08:14,200
and the framework model it may come with

188
00:08:11,470 --> 00:08:16,720
multiple exploits embedded or received

189
00:08:14,200 --> 00:08:18,550
remotely and each celebration of which

190
00:08:16,720 --> 00:08:23,229
exploit it provides a special interface

191
00:08:18,550 --> 00:08:25,810
and like each exploit with the perform a

192
00:08:23,229 --> 00:08:29,169
number of checks for if to check if

193
00:08:25,810 --> 00:08:31,720
target is supported and what film work

194
00:08:29,169 --> 00:08:35,770
is tries to do we just execute all of

195
00:08:31,720 --> 00:08:41,080
them in a loop and it's deformed until

196
00:08:35,770 --> 00:08:43,510
one of them succeeds so quite likely but

197
00:08:41,080 --> 00:08:45,400
each exploits different it contained a

198
00:08:43,510 --> 00:08:47,589
debug information that reviewed

199
00:08:45,400 --> 00:08:49,900
code name of exploit so the well press

200
00:08:47,589 --> 00:08:52,480
they granted each location of P which

201
00:08:49,900 --> 00:08:54,430
exploit with the name of the girl and in

202
00:08:52,480 --> 00:08:56,710
total we have found four exploits

203
00:08:54,430 --> 00:09:00,219
we have found alias we have found

204
00:08:56,710 --> 00:09:02,590
Tristan Dana and judgment

205
00:09:00,220 --> 00:09:05,080
and I really felt like there is a

206
00:09:02,590 --> 00:09:07,420
beautiful name in pattern because you

207
00:09:05,080 --> 00:09:11,230
see that maximum number of exploits it's

208
00:09:07,420 --> 00:09:14,319
equal to ten and G in English alphabet

209
00:09:11,230 --> 00:09:16,420
it has an index ten so and just mean it

210
00:09:14,320 --> 00:09:19,420
also looks like the most modern export

211
00:09:16,420 --> 00:09:25,000
and in the same time Ellis looks like

212
00:09:19,420 --> 00:09:26,530
the August so we looked really hard but

213
00:09:25,000 --> 00:09:29,050
couldn't find any more exploits from

214
00:09:26,530 --> 00:09:31,810
this framework but we shared this

215
00:09:29,050 --> 00:09:34,270
information with our partner and using

216
00:09:31,810 --> 00:09:37,180
informations we provided our partner was

217
00:09:34,270 --> 00:09:40,750
able to find them or their days and in

218
00:09:37,180 --> 00:09:42,910
the end when I built this way fixed so

219
00:09:40,750 --> 00:09:46,270
we believe that the main purpose of this

220
00:09:42,910 --> 00:09:48,640
in rock is food chain attacks and we

221
00:09:46,270 --> 00:09:50,829
succeeded in analysis of huge

222
00:09:48,640 --> 00:09:55,449
escalations and backdoor but our

223
00:09:50,830 --> 00:09:59,230
knowledge about this framework is quite

224
00:09:55,450 --> 00:10:02,080
limited because but we know that

225
00:09:59,230 --> 00:10:04,420
position walk was observed to be used as

226
00:10:02,080 --> 00:10:09,310
followed for auto flesh your day CVE

227
00:10:04,420 --> 00:10:11,860
2018 five thousand two so let's now

228
00:10:09,310 --> 00:10:16,089
let's talk about our newest findings and

229
00:10:11,860 --> 00:10:19,120
in 2019 we have found four days as well

230
00:10:16,090 --> 00:10:21,550
so there were three winter to key

231
00:10:19,120 --> 00:10:25,270
elevational privileges and one everyone

232
00:10:21,550 --> 00:10:27,880
could execution in google home so here's

233
00:10:25,270 --> 00:10:31,120
the first of our Fighting's it's a race

234
00:10:27,880 --> 00:10:33,070
condition in Nicaragua and actually it

235
00:10:31,120 --> 00:10:36,040
was abused in Donna elevation of you

236
00:10:33,070 --> 00:10:38,590
exploit and it's the last three days

237
00:10:36,040 --> 00:10:39,520
that was used by this framework and that

238
00:10:38,590 --> 00:10:42,220
we found in the world

239
00:10:39,520 --> 00:10:47,140
so exploit it supported the Fallen

240
00:10:42,220 --> 00:10:48,160
versions of operation system so we

241
00:10:47,140 --> 00:10:50,410
Institute a driver

242
00:10:48,160 --> 00:10:54,579
it contains code for dark composition

243
00:10:50,410 --> 00:10:57,610
API and it's relatively new part of

244
00:10:54,580 --> 00:11:01,120
fictional t4 in Turkey it was introduced

245
00:10:57,610 --> 00:11:02,920
only in Windows 8 and basically what it

246
00:11:01,120 --> 00:11:04,960
allows you to do you can use it to

247
00:11:02,920 --> 00:11:07,800
combine and animate different elements

248
00:11:04,960 --> 00:11:10,960
you can make bitmap composition using

249
00:11:07,800 --> 00:11:12,939
distance from A to B transforms effects

250
00:11:10,960 --> 00:11:14,020
and animations and you can use it to

251
00:11:12,940 --> 00:11:16,810
combine bitmaps

252
00:11:14,020 --> 00:11:18,850
different sources like GTI diuretics and

253
00:11:16,810 --> 00:11:21,459
you can do that using tree like

254
00:11:18,850 --> 00:11:24,010
structure similar to visual tree in XML

255
00:11:21,459 --> 00:11:27,550
and it's relatively new part from snotty

256
00:11:24,010 --> 00:11:29,589
but it's already was exploited before so

257
00:11:27,550 --> 00:11:32,469
if you want to talk a close look I

258
00:11:29,589 --> 00:11:34,209
recommend you to look for a few scores

259
00:11:32,470 --> 00:11:39,450
with the following prefix anti

260
00:11:34,209 --> 00:11:42,250
decomposition and this is the first

261
00:11:39,450 --> 00:11:44,050
let's find out what Orlando cheese and

262
00:11:42,250 --> 00:11:46,779
here's the first is called anti

263
00:11:44,050 --> 00:11:49,750
decomposition is cut frame so what

264
00:11:46,779 --> 00:11:52,630
basically what it does is just what like

265
00:11:49,750 --> 00:11:56,860
the name says it can be used to free

266
00:11:52,630 --> 00:11:58,779
some frame and then you also have an

267
00:11:56,860 --> 00:12:01,000
else called entity composition destroy

268
00:11:58,779 --> 00:12:05,050
connection and it does a lot of things

269
00:12:01,000 --> 00:12:08,050
but it also frees all the frames so

270
00:12:05,050 --> 00:12:10,569
execution of entity composition discard

271
00:12:08,050 --> 00:12:12,790
Francisco and entity composition is rare

272
00:12:10,570 --> 00:12:14,830
connection to school at the same time it

273
00:12:12,790 --> 00:12:17,500
can lead to use of the frisson error

274
00:12:14,830 --> 00:12:19,810
because discard auto-completion frames

275
00:12:17,500 --> 00:12:22,149
it may be executed at the time when

276
00:12:19,810 --> 00:12:23,949
entity composition discard frame is

277
00:12:22,149 --> 00:12:28,959
looking for french release or has

278
00:12:23,950 --> 00:12:31,740
already funded so exploit it uses two

279
00:12:28,959 --> 00:12:34,689
distinct transportation techniques and

280
00:12:31,740 --> 00:12:37,180
their usage their pallets and abuse of

281
00:12:34,690 --> 00:12:40,839
windows and they used for the following

282
00:12:37,180 --> 00:12:44,140
versions of windows so here's the first

283
00:12:40,839 --> 00:12:45,190
technique abuse of GDI palettes so what

284
00:12:44,140 --> 00:12:47,589
exploit does it

285
00:12:45,190 --> 00:12:50,290
brooms heap using palettes and the

286
00:12:47,589 --> 00:12:52,990
addresses are licked using GDI shared

287
00:12:50,290 --> 00:12:54,790
handle tab table technique then it keeps

288
00:12:52,990 --> 00:12:56,709
a couple of palettes allocated next to

289
00:12:54,790 --> 00:12:58,660
each other and on the next step

290
00:12:56,709 --> 00:13:01,209
it uses an ability to free palette

291
00:12:58,660 --> 00:13:03,490
number one reclaim memory and a rewrite

292
00:13:01,209 --> 00:13:06,880
the interest field of palette structure

293
00:13:03,490 --> 00:13:08,980
and then set palette entries API

294
00:13:06,880 --> 00:13:12,610
functions on palette number one can be

295
00:13:08,980 --> 00:13:15,700
used to write the first color field of

296
00:13:12,610 --> 00:13:18,279
palette number two so we have our b3

297
00:13:15,700 --> 00:13:21,930
memory read and write using set palette

298
00:13:18,279 --> 00:13:25,630
entries and get palette entries and

299
00:13:21,930 --> 00:13:27,250
here's the second technique so exploit

300
00:13:25,630 --> 00:13:29,020
it blooms heap using

301
00:13:27,250 --> 00:13:34,180
you create input context and create

302
00:13:29,020 --> 00:13:37,120
window X and then explode leaks kernel

303
00:13:34,180 --> 00:13:40,359
addresses or Windows which are basically

304
00:13:37,120 --> 00:13:43,090
in kernels app are present as that windy

305
00:13:40,360 --> 00:13:44,980
structure and the addresses from Colonel

306
00:13:43,090 --> 00:13:47,620
dick to using G shared info technique

307
00:13:44,980 --> 00:13:49,630
which is also well known and then uses

308
00:13:47,620 --> 00:13:52,480
an ability to free window and reclaim

309
00:13:49,630 --> 00:13:55,450
memory and I will write Astor name field

310
00:13:52,480 --> 00:13:57,520
of tackling destruction so in the end it

311
00:13:55,450 --> 00:13:59,980
has arbitrary memory written right using

312
00:13:57,520 --> 00:14:04,360
internal getting new text and in T user

313
00:13:59,980 --> 00:14:06,490
dev site tracks their functions and well

314
00:14:04,360 --> 00:14:08,650
in this framework each elevation of

315
00:14:06,490 --> 00:14:10,930
which exploit it provides interface for

316
00:14:08,650 --> 00:14:13,390
direct kernel object inflation and all

317
00:14:10,930 --> 00:14:15,339
exploits they're written in C++ with

318
00:14:13,390 --> 00:14:17,770
strong use of object-oriented

319
00:14:15,340 --> 00:14:19,600
programming so we have a class with the

320
00:14:17,770 --> 00:14:22,000
following functions that can be used

321
00:14:19,600 --> 00:14:24,040
after exploitation and there is also a

322
00:14:22,000 --> 00:14:28,420
special technology that can be used to

323
00:14:24,040 --> 00:14:31,180
get kernel code executed so let's talk

324
00:14:28,420 --> 00:14:33,640
about post exploitation and like almost

325
00:14:31,180 --> 00:14:34,569
every elevation of image exploit that we

326
00:14:33,640 --> 00:14:37,330
find in the world

327
00:14:34,570 --> 00:14:40,060
it uses only data on exploitation and

328
00:14:37,330 --> 00:14:42,790
the most common scenario exploit walks a

329
00:14:40,060 --> 00:14:45,959
process structure and seals system

330
00:14:42,790 --> 00:14:49,540
talking that's what we see all the time

331
00:14:45,960 --> 00:14:51,850
but this rotational Rock it uses direct

332
00:14:49,540 --> 00:14:54,819
kernel object manipulation to get kernel

333
00:14:51,850 --> 00:14:56,910
code execution and this is the key

334
00:14:54,820 --> 00:14:59,589
tonight is that is not commonly observed

335
00:14:56,910 --> 00:15:01,420
so in this case it's really worth taking

336
00:14:59,589 --> 00:15:04,270
a closer look on actual implementation

337
00:15:01,420 --> 00:15:05,620
and can also code and we are also quite

338
00:15:04,270 --> 00:15:08,710
likely to see evolution of this

339
00:15:05,620 --> 00:15:11,370
nationality so here's the implementation

340
00:15:08,710 --> 00:15:14,860
observed among earlier variants and

341
00:15:11,370 --> 00:15:17,430
first step it's a good show code into

342
00:15:14,860 --> 00:15:20,890
some kernel object whose address can be

343
00:15:17,430 --> 00:15:23,530
leaked it can done using creates a

344
00:15:20,890 --> 00:15:27,250
little table API function is registered

345
00:15:23,530 --> 00:15:30,040
in technique and another step well

346
00:15:27,250 --> 00:15:32,320
considering that we already have access

347
00:15:30,040 --> 00:15:35,020
to a process structure it duplicates

348
00:15:32,320 --> 00:15:38,230
thread to current red and then parses

349
00:15:35,020 --> 00:15:40,510
new process object table structure to

350
00:15:38,230 --> 00:15:44,470
get a dress of cannot read

351
00:15:40,510 --> 00:15:47,110
then it gets address of Colonel Treach

352
00:15:44,470 --> 00:15:49,959
do the PC and verifies that it's a

353
00:15:47,110 --> 00:15:52,510
colonel PC object using that from

354
00:15:49,959 --> 00:15:55,420
Marquis objects in enumeration and

355
00:15:52,510 --> 00:15:57,430
address coconut shell and then address

356
00:15:55,420 --> 00:15:58,439
of kpc normal routine is stored for

357
00:15:57,430 --> 00:16:03,339
later use

358
00:15:58,440 --> 00:16:05,769
and on short step to a decimal walk it's

359
00:16:03,339 --> 00:16:08,139
resolved based addresses of page table

360
00:16:05,769 --> 00:16:10,630
entries and page directory entries in

361
00:16:08,139 --> 00:16:14,709
Windows 10 built one zero five eight six

362
00:16:10,630 --> 00:16:17,470
and below these entries they're based on

363
00:16:14,709 --> 00:16:20,589
fixed addresses and another keep other

364
00:16:17,470 --> 00:16:22,779
cases as the base addresses they can be

365
00:16:20,589 --> 00:16:25,470
resolved dynamically a heuristic Aliya

366
00:16:22,779 --> 00:16:30,120
if you have access to kernel image and

367
00:16:25,470 --> 00:16:33,399
then those entries they can be accessed

368
00:16:30,120 --> 00:16:36,279
with the use of this calculation or any

369
00:16:33,399 --> 00:16:38,160
virtual address and in case you are

370
00:16:36,279 --> 00:16:41,620
wondering how it's used

371
00:16:38,160 --> 00:16:44,079
modification of a next bit in this which

372
00:16:41,620 --> 00:16:48,670
flip table entry it will lead it will

373
00:16:44,079 --> 00:16:51,969
mark the speech as executable so on a

374
00:16:48,670 --> 00:16:53,829
final step normal routine pointer is

375
00:16:51,970 --> 00:16:56,319
gets rewritten visual code address and

376
00:16:53,829 --> 00:17:00,310
right now page with quote it's already

377
00:16:56,319 --> 00:17:03,150
made executable so suspending current

378
00:17:00,310 --> 00:17:06,069
thread will make show code executed and

379
00:17:03,150 --> 00:17:08,849
then no normal routine original value is

380
00:17:06,069 --> 00:17:13,540
get restored and current rate is resumed

381
00:17:08,849 --> 00:17:15,280
and kernel code it actually burns a lot

382
00:17:13,540 --> 00:17:17,829
from a pure source black bone project

383
00:17:15,280 --> 00:17:20,799
and code is very similar to blood-borne

384
00:17:17,829 --> 00:17:23,500
driver well what it does it just inject

385
00:17:20,799 --> 00:17:26,379
some whatever library we provide to

386
00:17:23,500 --> 00:17:28,660
choose incision process in all cases

387
00:17:26,380 --> 00:17:31,450
that I have found it was a sweetly host

388
00:17:28,660 --> 00:17:34,330
and injection it's achieved exactly a

389
00:17:31,450 --> 00:17:36,340
likely in black bone driver so we have a

390
00:17:34,330 --> 00:17:39,129
reflective portable executable loading

391
00:17:36,340 --> 00:17:41,830
using from the kernel and then user code

392
00:17:39,130 --> 00:17:44,530
is executed using special trunk lines

393
00:17:41,830 --> 00:17:48,309
and creation of worker thread and you

394
00:17:44,530 --> 00:17:50,168
know like that one driver it's well

395
00:17:48,309 --> 00:17:53,559
Truscott of it it's very well known to

396
00:17:50,169 --> 00:17:54,100
be used malware and probably the afters

397
00:17:53,559 --> 00:17:57,100
of this

398
00:17:54,100 --> 00:18:00,969
walk they were afraid of this extra

399
00:17:57,100 --> 00:18:03,760
publicity and they decided to rempli me

400
00:18:00,970 --> 00:18:06,640
on the spot so this is techniques that

401
00:18:03,760 --> 00:18:10,600
was observed in new variants so at first

402
00:18:06,640 --> 00:18:13,929
step first up it creates a diamond tread

403
00:18:10,600 --> 00:18:16,899
and this demetrite it has only one API

404
00:18:13,929 --> 00:18:18,549
function call signal object and wait so

405
00:18:16,900 --> 00:18:21,820
it's these threads created and executed

406
00:18:18,549 --> 00:18:23,980
and then you process object table gets

407
00:18:21,820 --> 00:18:26,500
parsed to find the address of kernel

408
00:18:23,980 --> 00:18:29,400
chatter and on the next step

409
00:18:26,500 --> 00:18:32,049
exploitation framework it's reached the

410
00:18:29,400 --> 00:18:34,539
values of straight thread stack base and

411
00:18:32,049 --> 00:18:35,620
strike thread stack limits from this

412
00:18:34,539 --> 00:18:39,669
kernel thread

413
00:18:35,620 --> 00:18:44,229
so on the what it does next just tries

414
00:18:39,669 --> 00:18:46,210
to parse and deforms back search for all

415
00:18:44,230 --> 00:18:48,640
values that are present on stack and

416
00:18:46,210 --> 00:18:51,549
checks that they belonging to Colonel

417
00:18:48,640 --> 00:18:54,250
text image and bytes at character eaten

418
00:18:51,549 --> 00:18:57,280
address they said they should have the

419
00:18:54,250 --> 00:19:00,580
following signature so when the right

420
00:18:57,280 --> 00:19:03,549
address is found this framework it

421
00:19:00,580 --> 00:19:06,490
builds a rope chain and it gets written

422
00:19:03,549 --> 00:19:08,379
to the stack and then even to this

423
00:19:06,490 --> 00:19:11,409
thread gets fired and Rob Sheen gets

424
00:19:08,380 --> 00:19:13,539
executed so in this case kernel code was

425
00:19:11,409 --> 00:19:16,150
not even needed because this technique

426
00:19:13,539 --> 00:19:19,658
it leads to execute any kernel functions

427
00:19:16,150 --> 00:19:21,630
using this Rob from user level and

428
00:19:19,659 --> 00:19:26,049
that's what we have in the end

429
00:19:21,630 --> 00:19:27,640
exploitation of framework it uses return

430
00:19:26,049 --> 00:19:30,010
narrating programming to execute all

431
00:19:27,640 --> 00:19:32,320
functions from the kernel and it's used

432
00:19:30,010 --> 00:19:38,379
to get quote injection to choosing

433
00:19:32,320 --> 00:19:40,960
system process and like summing up the

434
00:19:38,380 --> 00:19:43,030
cone it was to use many more interesting

435
00:19:40,960 --> 00:19:46,450
techniques other than just dealing

436
00:19:43,030 --> 00:19:48,870
system token and advanced it treat

437
00:19:46,450 --> 00:19:51,669
actors they are already using them like

438
00:19:48,870 --> 00:19:53,469
living in the kernel and it has a number

439
00:19:51,669 --> 00:19:55,600
of advantages because it's the same

440
00:19:53,470 --> 00:19:58,840
level where antivirus products live and

441
00:19:55,600 --> 00:20:01,330
not that long ago Microsoft they have

442
00:19:58,840 --> 00:20:04,389
implemented a system quadrant estate

443
00:20:01,330 --> 00:20:06,370
rental meta station framework which

444
00:20:04,390 --> 00:20:08,140
aka oxygen and

445
00:20:06,370 --> 00:20:09,790
it what does objects' integrity for the

446
00:20:08,140 --> 00:20:12,910
system to check that if it was

447
00:20:09,790 --> 00:20:14,590
compromised and substituted actors they

448
00:20:12,910 --> 00:20:18,130
are going to be very interested and

449
00:20:14,590 --> 00:20:19,600
trying to bypass it so I believe in the

450
00:20:18,130 --> 00:20:22,240
future they are going to see among

451
00:20:19,600 --> 00:20:26,949
malicious uses of direct kernel object

452
00:20:22,240 --> 00:20:30,160
population and besides dana exploit in

453
00:20:26,950 --> 00:20:33,309
2019 we have found two more the rational

454
00:20:30,160 --> 00:20:37,540
P which exploits and both where when I

455
00:20:33,309 --> 00:20:39,280
do this in winter decade and quite

456
00:20:37,540 --> 00:20:43,030
interesting that root case in both cases

457
00:20:39,280 --> 00:20:45,250
was a quite similar and all of them they

458
00:20:43,030 --> 00:20:49,660
were exploited using some public known

459
00:20:45,250 --> 00:20:53,140
in technique and they only supported all

460
00:20:49,660 --> 00:20:55,110
the builds of Windows 7 so I will be not

461
00:20:53,140 --> 00:20:57,340
going into details about them and

462
00:20:55,110 --> 00:20:59,469
actually is the vast majority of

463
00:20:57,340 --> 00:21:02,110
exploits that founded the world they

464
00:20:59,470 --> 00:21:04,630
target only all the builds of Windows so

465
00:21:02,110 --> 00:21:07,719
Windows 10 is commonly supported but

466
00:21:04,630 --> 00:21:10,510
only all the builds so exploits that we

467
00:21:07,720 --> 00:21:12,520
found last year they unique I think

468
00:21:10,510 --> 00:21:14,410
because they exploited the latest builds

469
00:21:12,520 --> 00:21:16,570
so if you are really interested I

470
00:21:14,410 --> 00:21:19,809
recommend you to check the slides

471
00:21:16,570 --> 00:21:22,210
publication frame and it seems obvious

472
00:21:19,809 --> 00:21:24,760
that finding liabilities is much more

473
00:21:22,210 --> 00:21:28,929
easy than toward in novel techniques

474
00:21:24,760 --> 00:21:31,870
explosion and the majority of their

475
00:21:28,929 --> 00:21:34,900
daily sports the DES found recently the

476
00:21:31,870 --> 00:21:37,030
electronic sports but that's not the

477
00:21:34,900 --> 00:21:37,960
only things that they are working on we

478
00:21:37,030 --> 00:21:42,280
also look for remote code execution

479
00:21:37,960 --> 00:21:44,860
exploits but Russian complications well

480
00:21:42,280 --> 00:21:47,050
ouch technologies are they aimed at

481
00:21:44,860 --> 00:21:49,959
detection and Prevention of rotation and

482
00:21:47,050 --> 00:21:53,500
explode detection it's not the same

483
00:21:49,960 --> 00:21:55,540
thing as are they finding because for

484
00:21:53,500 --> 00:21:58,090
sure they finding additional analysis is

485
00:21:55,540 --> 00:22:00,909
always required and why often recently

486
00:21:58,090 --> 00:22:04,149
no information that is needed to perform

487
00:22:00,910 --> 00:22:06,970
analysis because like at first signs of

488
00:22:04,150 --> 00:22:09,190
rotation for web browsers they already

489
00:22:06,970 --> 00:22:11,020
might be not in the memory like all

490
00:22:09,190 --> 00:22:13,480
scripts they were just in done compiled

491
00:22:11,020 --> 00:22:15,400
and freed from the memory there are no

492
00:22:13,480 --> 00:22:18,490
interfaces available to can they ask a

493
00:22:15,400 --> 00:22:19,929
browser to give these scripts but we

494
00:22:18,490 --> 00:22:24,399
work on such problems and

495
00:22:19,929 --> 00:22:28,330
the sir desk is found so Google Chrome

496
00:22:24,399 --> 00:22:30,399
used after free in algebra to exploit

497
00:22:28,330 --> 00:22:34,330
supported on the google chrome versions

498
00:22:30,399 --> 00:22:37,508
76 and 77 they were not the latest at

499
00:22:34,330 --> 00:22:40,299
the moment of discovery and exploits

500
00:22:37,509 --> 00:22:42,249
what it only under them but we were able

501
00:22:40,299 --> 00:22:45,340
to fix exploit and prove that it's a

502
00:22:42,249 --> 00:22:47,529
zero day and we call those attacks

503
00:22:45,340 --> 00:22:50,320
operation visit opium there are no

504
00:22:47,529 --> 00:22:51,850
definite thing within introductory but

505
00:22:50,320 --> 00:22:53,619
there are some we cotton artists with

506
00:22:51,850 --> 00:22:56,799
largest group but we believe that it

507
00:22:53,619 --> 00:22:58,809
could be a false farm and because the

508
00:22:56,799 --> 00:23:03,999
profile of attack is more similar to

509
00:22:58,809 --> 00:23:05,980
dark auto attacks found by Google so the

510
00:23:03,999 --> 00:23:08,320
destroyed it was distributed with

511
00:23:05,980 --> 00:23:11,080
watering hole style injection in Korean

512
00:23:08,320 --> 00:23:13,899
language news photo and the when

513
00:23:11,080 --> 00:23:16,570
multiple redirects and layers of whiskey

514
00:23:13,899 --> 00:23:18,518
Asian and encryption like actual spot it

515
00:23:16,570 --> 00:23:23,168
was split into multiple Chang chunks

516
00:23:18,519 --> 00:23:25,809
that are c4 encrypted and then they were

517
00:23:23,169 --> 00:23:29,289
joined and decrypted and key for actual

518
00:23:25,809 --> 00:23:35,710
plot also was appended to some gif image

519
00:23:29,289 --> 00:23:38,908
that was also retrieved so Maidstone she

520
00:23:35,710 --> 00:23:41,710
already told talked with you about

521
00:23:38,909 --> 00:23:44,710
vulnerability in its root case so I will

522
00:23:41,710 --> 00:23:46,299
focus on exploitation so as you know

523
00:23:44,710 --> 00:23:48,070
when a beauty it's actually a rest

524
00:23:46,299 --> 00:23:50,499
condition in such results in use of the

525
00:23:48,070 --> 00:23:53,350
frame and how its exploded

526
00:23:50,499 --> 00:23:55,869
well exploit it triggers use of the free

527
00:23:53,350 --> 00:23:58,748
to leak point of algae fluid array and

528
00:23:55,869 --> 00:24:01,418
it defeats a salar and makes it possible

529
00:23:58,749 --> 00:24:06,009
to retrieve some very useful point

530
00:24:01,419 --> 00:24:09,009
pointers and then the feed object the

531
00:24:06,009 --> 00:24:11,529
memory it gets sprayed with these

532
00:24:09,009 --> 00:24:14,320
attempts to reuse this freed buffer and

533
00:24:11,529 --> 00:24:16,029
control over a lot of water a it lets to

534
00:24:14,320 --> 00:24:19,570
achieve arbitrary region right

535
00:24:16,029 --> 00:24:22,119
so if quite interesting that exploit it

536
00:24:19,570 --> 00:24:25,360
comes with some huge web assembly object

537
00:24:22,119 --> 00:24:29,168
that contains a daniel logic basically

538
00:24:25,360 --> 00:24:31,748
just like knob instructions and but we

539
00:24:29,169 --> 00:24:33,929
ate engine it compiles this webassembly

540
00:24:31,749 --> 00:24:36,299
bytecode into native code

541
00:24:33,929 --> 00:24:37,350
and puts it into a readable writable and

542
00:24:36,299 --> 00:24:40,289
executable section

543
00:24:37,350 --> 00:24:43,049
so what exploit does it just all rights

544
00:24:40,289 --> 00:24:45,720
this section with a shellcode and then

545
00:24:43,049 --> 00:24:48,119
exploited uses Farida technique to

546
00:24:45,720 --> 00:24:50,070
trigger execution of this shortcut it's

547
00:24:48,119 --> 00:24:53,610
a technique that is very similar to the

548
00:24:50,070 --> 00:24:55,439
one that was used in Chrome 72 for read

549
00:24:53,610 --> 00:25:00,570
the use of the free that was released to

550
00:24:55,440 --> 00:25:02,399
the public so unfortunately like there

551
00:25:00,570 --> 00:25:05,549
are just not enough time to talk about

552
00:25:02,399 --> 00:25:09,449
each and every survey that was found in

553
00:25:05,549 --> 00:25:11,970
2019 because of a lot of them like the

554
00:25:09,450 --> 00:25:13,350
number is quite scary for me but I hope

555
00:25:11,970 --> 00:25:23,999
that you enjoyed my presentation about

556
00:25:13,350 --> 00:25:25,678
your days that we found so I want to say

557
00:25:23,999 --> 00:25:29,100
a huge thank you to Microsoft and Google

558
00:25:25,679 --> 00:25:32,100
for handing out findings very fast I

559
00:25:29,100 --> 00:25:33,748
mean it was just a matter of days when

560
00:25:32,100 --> 00:25:36,689
we've got this when I do this fixed and

561
00:25:33,749 --> 00:25:38,159
deployed to users and like sharing the

562
00:25:36,690 --> 00:25:40,649
tell information about when abilities

563
00:25:38,159 --> 00:25:42,539
it's a very important and I want to say

564
00:25:40,649 --> 00:25:45,779
thank you to Microsoft active protection

565
00:25:42,539 --> 00:25:47,580
program team details details about the

566
00:25:45,779 --> 00:25:50,820
findings they were shared through this

567
00:25:47,580 --> 00:25:53,158
finding through this program including a

568
00:25:50,820 --> 00:25:55,200
proof of concept that triggers this one

569
00:25:53,159 --> 00:25:58,710
abilities and similar when I built is

570
00:25:55,200 --> 00:26:01,799
they were found and sharing insights

571
00:25:58,710 --> 00:26:04,110
about do they about retractors it also

572
00:26:01,799 --> 00:26:07,379
brings a great results because more in

573
00:26:04,110 --> 00:26:09,389
the walls or desgas found and right now

574
00:26:07,379 --> 00:26:12,119
is making sure days it's a hot button

575
00:26:09,389 --> 00:26:14,850
hard enough really huge money involved

576
00:26:12,119 --> 00:26:17,908
in this business and I predict that

577
00:26:14,850 --> 00:26:20,490
exploits they will act more stealthy on

578
00:26:17,909 --> 00:26:22,139
platforms with good visibility on they

579
00:26:20,490 --> 00:26:27,210
I'm going to see a better and cigars

580
00:26:22,139 --> 00:26:29,129
equation checks and I also I guess we

581
00:26:27,210 --> 00:26:31,320
will seen normal users of direct kernel

582
00:26:29,129 --> 00:26:33,990
object Malaysian to bypass system girl

583
00:26:31,320 --> 00:26:36,169
to runtime to station so that's all

584
00:26:33,990 --> 00:26:43,009
thank you

585
00:26:36,170 --> 00:26:43,009
[Applause]

