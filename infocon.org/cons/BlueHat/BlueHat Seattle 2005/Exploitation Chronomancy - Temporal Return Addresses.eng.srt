1
00:00:06,170 --> 00:00:23,479
<font color="#E5E5E5">okay is that</font><font color="#CCCCCC"> working can</font><font color="#E5E5E5"> you hear me now</font>

2
00:00:57,329 --> 00:01:05,019
it's not working<font color="#CCCCCC"> oh there we go</font>

3
00:01:00,059 --> 00:01:06,929
modern technology<font color="#E5E5E5"> well again my name is</font>

4
00:01:05,019 --> 00:01:10,119
Kimberly price<font color="#CCCCCC"> many of you</font><font color="#E5E5E5"> received</font>

5
00:01:06,930 --> 00:01:12,399
numerous spam mails<font color="#CCCCCC"> for me evangelizing</font>

6
00:01:10,119 --> 00:01:14,920
<font color="#E5E5E5">blue hat</font><font color="#CCCCCC"> I really do want to</font><font color="#E5E5E5"> thank you</font>

7
00:01:12,399 --> 00:01:16,930
<font color="#E5E5E5">for coming it's a great opportunity</font><font color="#CCCCCC"> for</font>

8
00:01:14,920 --> 00:01:18,610
<font color="#CCCCCC">us</font><font color="#E5E5E5"> to see some of the</font><font color="#CCCCCC"> cutting-edge</font>

9
00:01:16,930 --> 00:01:21,159
research that's going<font color="#CCCCCC"> on in the</font>

10
00:01:18,610 --> 00:01:22,690
community outside<font color="#E5E5E5"> of Microsoft and</font>

11
00:01:21,159 --> 00:01:26,020
recognize<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are very smart people</font>

12
00:01:22,690 --> 00:01:28,658
<font color="#E5E5E5">who don't wear the blue badge who we can</font>

13
00:01:26,020 --> 00:01:31,210
learn<font color="#CCCCCC"> from</font><font color="#E5E5E5"> so thank you for taking</font><font color="#CCCCCC"> time</font>

14
00:01:28,659 --> 00:01:33,399
out<font color="#E5E5E5"> of your work schedule out of your</font>

15
00:01:31,210 --> 00:01:35,408
<font color="#E5E5E5">product out of whatever you normally</font><font color="#CCCCCC"> had</font>

16
00:01:33,399 --> 00:01:37,630
<font color="#CCCCCC">plan</font><font color="#E5E5E5"> to do today to come and I</font><font color="#CCCCCC"> hope it's</font>

17
00:01:35,409 --> 00:01:41,619
a valuable day for you<font color="#E5E5E5"> our next talk is</font>

18
00:01:37,630 --> 00:01:42,850
<font color="#CCCCCC">matt miller</font><font color="#E5E5E5"> and he's got a very</font>

19
00:01:41,619 --> 00:01:45,460
interesting<font color="#E5E5E5"> i think you're really</font>

20
00:01:42,850 --> 00:01:46,538
gonna like it<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> one of the talks</font>

21
00:01:45,460 --> 00:01:49,568
<font color="#CCCCCC">that</font><font color="#E5E5E5"> would follow in the cutting edge</font>

22
00:01:46,539 --> 00:01:51,580
<font color="#E5E5E5">research category</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> i mentioned</font>

23
00:01:49,569 --> 00:01:53,710
earlier during the<font color="#E5E5E5"> break during</font><font color="#CCCCCC"> the</font>

24
00:01:51,580 --> 00:01:56,259
executive sessions yesterday<font color="#CCCCCC"> condensed</font>

25
00:01:53,710 --> 00:01:58,839
<font color="#CCCCCC">30-minute sessions</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the executives</font><font color="#E5E5E5"> to</font>

26
00:01:56,259 --> 00:02:01,950
see<font color="#E5E5E5"> we had Jim Allchin in the audience</font>

27
00:01:58,840 --> 00:02:05,770
<font color="#E5E5E5">and Jim actually interrupted Matt to say</font>

28
00:02:01,950 --> 00:02:07,300
that's<font color="#E5E5E5"> so cool</font><font color="#CCCCCC"> and that's that's a</font>

29
00:02:05,770 --> 00:02:09,068
<font color="#E5E5E5">pretty neat thing</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to say that</font>

30
00:02:07,300 --> 00:02:12,940
Jim<font color="#CCCCCC"> Allchin</font><font color="#E5E5E5"> thinks your talk is cool so</font>

31
00:02:09,068 --> 00:02:14,440
I hope you enjoy<font color="#E5E5E5"> it and at the end I</font>

32
00:02:12,940 --> 00:02:17,230
know Matt's gonna do an<font color="#E5E5E5"> excellent</font><font color="#CCCCCC"> job of</font>

33
00:02:14,440 --> 00:02:20,950
<font color="#E5E5E5">repeating questions from the audience</font><font color="#CCCCCC"> so</font>

34
00:02:17,230 --> 00:02:25,390
we<font color="#CCCCCC"> can all hear them</font><font color="#E5E5E5"> and I'm gonna turn</font>

35
00:02:20,950 --> 00:02:28,569
it over here now<font color="#CCCCCC"> thanks everybody hear</font>

36
00:02:25,390 --> 00:02:30,549
<font color="#E5E5E5">me</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right thanks Kimberly for the</font>

37
00:02:28,569 --> 00:02:32,859
introduction<font color="#CCCCCC"> I hope everybody wasn't too</font>

38
00:02:30,550 --> 00:02:34,720
daunted by the title I know it's<font color="#E5E5E5"> pretty</font>

39
00:02:32,860 --> 00:02:35,950
<font color="#E5E5E5">weird one and</font><font color="#CCCCCC"> I'm sure</font><font color="#E5E5E5"> that might have</font>

40
00:02:34,720 --> 00:02:38,640
deterred a few people for<font color="#CCCCCC"> coming so I</font>

41
00:02:35,950 --> 00:02:42,069
<font color="#CCCCCC">think those of</font><font color="#E5E5E5"> you who turned out for it</font>

42
00:02:38,640 --> 00:02:43,510
my name is Matt Miller<font color="#E5E5E5"> I'm going to be</font>

43
00:02:42,069 --> 00:02:45,429
talking<font color="#CCCCCC"> on the subject of temporal</font>

44
00:02:43,510 --> 00:02:46,929
return addresses<font color="#CCCCCC"> and I'll try</font><font color="#E5E5E5"> to help</font>

45
00:02:45,430 --> 00:02:48,400
describe<font color="#E5E5E5"> what those are as we go through</font>

46
00:02:46,930 --> 00:02:50,200
this<font color="#E5E5E5"> process and maybe make</font><font color="#CCCCCC"> it a</font><font color="#E5E5E5"> little</font>

47
00:02:48,400 --> 00:02:51,250
bit more clear<font color="#CCCCCC"> to those of you who are</font>

48
00:02:50,200 --> 00:02:52,839
wondering<font color="#E5E5E5"> what the heck I'm actually</font>

49
00:02:51,250 --> 00:02:55,750
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> be talking about</font>

50
00:02:52,840 --> 00:02:57,310
so Who<font color="#E5E5E5"> am I I'm actually probably</font><font color="#CCCCCC"> gonna</font>

51
00:02:55,750 --> 00:02:58,659
identify<font color="#CCCCCC"> on</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> to you guys I do</font>

52
00:02:57,310 --> 00:03:00,629
software development during<font color="#E5E5E5"> the day</font>

53
00:02:58,659 --> 00:03:03,220
<font color="#E5E5E5">don't actually do security stuff</font>

54
00:03:00,629 --> 00:03:05,679
although do<font color="#E5E5E5"> it I do work for</font><font color="#CCCCCC"> a VPN</font>

55
00:03:03,220 --> 00:03:07,780
service provider<font color="#E5E5E5"> so that's that's my</font>

56
00:03:05,680 --> 00:03:10,750
main job but then on<font color="#E5E5E5"> the side I</font>

57
00:03:07,780 --> 00:03:13,420
dabble<font color="#CCCCCC"> and security stuff I contribute</font>

58
00:03:10,750 --> 00:03:16,060
<font color="#E5E5E5">to the Metasploit project in a number of</font>

59
00:03:13,420 --> 00:03:17,140
<font color="#CCCCCC">ways and I</font><font color="#E5E5E5"> just do various research</font>

60
00:03:16,060 --> 00:03:19,840
projects like the one<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> going</font>

61
00:03:17,140 --> 00:03:22,390
<font color="#CCCCCC">to see today</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> furthermore</font><font color="#E5E5E5"> do</font>

62
00:03:19,840 --> 00:03:26,530
interesting<font color="#E5E5E5"> research in the host-based</font>

63
00:03:22,390 --> 00:03:27,790
intrusion prevention area on<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> so</font>

64
00:03:26,530 --> 00:03:31,030
just to give everybody a little

65
00:03:27,790 --> 00:03:33,310
<font color="#E5E5E5">background on</font><font color="#CCCCCC"> Metasploit</font><font color="#E5E5E5"> at the last</font>

66
00:03:31,030 --> 00:03:35,440
blue hat you had<font color="#E5E5E5"> HD more in spoon of who</font>

67
00:03:33,310 --> 00:03:36,790
came and talked about<font color="#E5E5E5"> what the medicine</font>

68
00:03:35,440 --> 00:03:38,920
a framework was some of the cool

69
00:03:36,790 --> 00:03:40,030
features<font color="#E5E5E5"> of</font><font color="#CCCCCC"> it and just</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> kind of</font>

70
00:03:38,920 --> 00:03:42,910
<font color="#CCCCCC">refresh those</font><font color="#E5E5E5"> of you who may not have</font>

71
00:03:40,030 --> 00:03:45,280
<font color="#E5E5E5">seen</font><font color="#CCCCCC"> it the Metasploit framework is an</font>

72
00:03:42,910 --> 00:03:48,820
exploitation framework<font color="#E5E5E5"> basic goal behind</font>

73
00:03:45,280 --> 00:03:50,260
<font color="#E5E5E5">it is the specific case is to write a</font>

74
00:03:48,820 --> 00:03:53,170
framework<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> can reuse</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> write</font>

75
00:03:50,260 --> 00:03:54,760
exploits<font color="#E5E5E5"> reuse payloads reuse the other</font>

76
00:03:53,170 --> 00:03:55,929
aspects that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> normally see</font><font color="#CCCCCC"> an exploit</font>

77
00:03:54,760 --> 00:03:58,030
so you're<font color="#E5E5E5"> not constantly cutting and</font>

78
00:03:55,930 --> 00:03:59,800
pasting and you're<font color="#CCCCCC"> able to make reuse</font>

79
00:03:58,030 --> 00:04:01,090
the code that you've written once for

80
00:03:59,800 --> 00:04:03,160
one exploit with all the other exploits

81
00:04:01,090 --> 00:04:05,170
you may write in the future<font color="#CCCCCC"> but that's</font>

82
00:04:03,160 --> 00:04:06,549
<font color="#E5E5E5">not the actual focus of the project</font><font color="#CCCCCC"> the</font>

83
00:04:05,170 --> 00:04:09,130
Metasploit project is really just a very

84
00:04:06,550 --> 00:04:10,630
research oriented project it's it's

85
00:04:09,130 --> 00:04:13,329
<font color="#E5E5E5">working on you know</font><font color="#CCCCCC"> cutting-edge</font>

86
00:04:10,630 --> 00:04:15,010
<font color="#E5E5E5">research technology that we in turn make</font>

87
00:04:13,329 --> 00:04:17,108
public<font color="#CCCCCC"> to the community you know</font><font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font>

88
00:04:15,010 --> 00:04:18,399
courage development not<font color="#CCCCCC"> just from</font><font color="#E5E5E5"> us but</font>

89
00:04:17,108 --> 00:04:20,769
<font color="#E5E5E5">from people</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> outside get more</font>

90
00:04:18,399 --> 00:04:21,940
<font color="#CCCCCC">ideas and</font><font color="#E5E5E5"> work more into trying</font><font color="#CCCCCC"> to</font>

91
00:04:20,769 --> 00:04:25,330
figure<font color="#E5E5E5"> out some of the cool</font><font color="#CCCCCC"> things that</font>

92
00:04:21,940 --> 00:04:26,919
<font color="#CCCCCC">we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> work on so for</font><font color="#E5E5E5"> instance later</font>

93
00:04:25,330 --> 00:04:28,930
today<font color="#E5E5E5"> you're going to</font><font color="#CCCCCC"> see a talk by a</font>

94
00:04:26,919 --> 00:04:31,030
<font color="#CCCCCC">vinnie liu talking about the anti</font>

95
00:04:28,930 --> 00:04:33,910
forensics project that's now spoked off

96
00:04:31,030 --> 00:04:35,229
from<font color="#E5E5E5"> ministry project itself</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that</font>

97
00:04:33,910 --> 00:04:36,910
kind of<font color="#E5E5E5"> gives you</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> idea we're not just</font>

98
00:04:35,229 --> 00:04:38,380
working<font color="#E5E5E5"> on exploits we are you know</font>

99
00:04:36,910 --> 00:04:41,560
researching anti forensics and some of

100
00:04:38,380 --> 00:04:42,969
these other technologies<font color="#CCCCCC"> so the talk</font>

101
00:04:41,560 --> 00:04:44,680
that<font color="#E5E5E5"> I'm doing is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> kind of an</font>

102
00:04:42,970 --> 00:04:46,810
<font color="#CCCCCC">example of some of the random stuff that</font>

103
00:04:44,680 --> 00:04:48,660
we come<font color="#E5E5E5"> up with and we research and</font>

104
00:04:46,810 --> 00:04:53,320
figure out<font color="#E5E5E5"> whether or not it's feasible</font>

105
00:04:48,660 --> 00:04:54,789
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the security realm so that's that's</font>

106
00:04:53,320 --> 00:04:55,810
kind<font color="#CCCCCC"> of introduction why don't</font><font color="#E5E5E5"> we dive</font>

107
00:04:54,789 --> 00:04:58,840
<font color="#CCCCCC">right in and see what we're</font><font color="#E5E5E5"> gonna talk</font>

108
00:04:55,810 --> 00:05:00,070
<font color="#CCCCCC">about today</font><font color="#E5E5E5"> so the point of attack first</font>

109
00:04:58,840 --> 00:05:01,299
<font color="#E5E5E5">thing that we're going to talk</font><font color="#CCCCCC"> about is</font>

110
00:05:00,070 --> 00:05:03,250
a brief background on return addresses

111
00:05:01,300 --> 00:05:04,300
<font color="#CCCCCC">I'm not gonna spend too</font><font color="#E5E5E5"> much time on it</font>

112
00:05:03,250 --> 00:05:05,590
<font color="#E5E5E5">but</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> hope to</font><font color="#CCCCCC"> get everybody</font><font color="#E5E5E5"> on the</font>

113
00:05:04,300 --> 00:05:07,060
<font color="#E5E5E5">same</font><font color="#CCCCCC"> page as to what I'm talking about</font>

114
00:05:05,590 --> 00:05:09,789
so the rest of the talk will<font color="#CCCCCC"> makes sense</font>

115
00:05:07,060 --> 00:05:10,960
<font color="#CCCCCC">just and then well after we'll talk</font>

116
00:05:09,789 --> 00:05:13,630
<font color="#E5E5E5">about return addresses we'll dive into</font>

117
00:05:10,960 --> 00:05:15,390
<font color="#E5E5E5">what temporal addresses are what they</font>

118
00:05:13,630 --> 00:05:17,280
are<font color="#E5E5E5"> how you can use them</font>

119
00:05:15,390 --> 00:05:18,390
<font color="#E5E5E5">how to find them and</font><font color="#CCCCCC"> how you</font><font color="#E5E5E5"> can</font>

120
00:05:17,280 --> 00:05:19,859
actually use<font color="#CCCCCC"> them for</font><font color="#E5E5E5"> exploitation</font>

121
00:05:18,390 --> 00:05:22,500
purposes

122
00:05:19,860 --> 00:05:23,970
and then finally we'll do a conclusion

123
00:05:22,500 --> 00:05:26,370
and talk<font color="#E5E5E5"> about an actual case study</font>

124
00:05:23,970 --> 00:05:28,290
<font color="#E5E5E5">where</font><font color="#CCCCCC"> this can</font><font color="#E5E5E5"> be applied and this is in</font>

125
00:05:26,370 --> 00:05:30,540
an<font color="#E5E5E5"> area of memory called the Windows NT</font>

126
00:05:28,290 --> 00:05:31,950
shared user data<font color="#CCCCCC"> and we'll talk about</font>

127
00:05:30,540 --> 00:05:35,280
<font color="#E5E5E5">more details on</font><font color="#CCCCCC"> that once we get there</font>

128
00:05:31,950 --> 00:05:37,050
so what I mean<font color="#E5E5E5"> by</font><font color="#CCCCCC"> a return address well</font>

129
00:05:35,280 --> 00:05:38,760
a return<font color="#CCCCCC"> address in my definition</font><font color="#E5E5E5"> is</font>

130
00:05:37,050 --> 00:05:41,190
basically<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> you use in an</font>

131
00:05:38,760 --> 00:05:43,800
exploit to gain<font color="#E5E5E5"> meaningful control of</font>

132
00:05:41,190 --> 00:05:45,600
execution flow<font color="#CCCCCC"> this is not</font><font color="#E5E5E5"> necessarily</font>

133
00:05:43,800 --> 00:05:47,970
limited<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the typical override and the</font>

134
00:05:45,600 --> 00:05:49,290
return address<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> pointing it</font>

135
00:05:47,970 --> 00:05:51,060
to some<font color="#E5E5E5"> location of</font><font color="#CCCCCC"> your shellcode</font>

136
00:05:49,290 --> 00:05:53,880
something along those<font color="#CCCCCC"> lines</font><font color="#E5E5E5"> it's just</font>

137
00:05:51,060 --> 00:05:56,100
some way<font color="#CCCCCC"> I either direct or indirect</font><font color="#E5E5E5"> of</font>

138
00:05:53,880 --> 00:05:57,600
gaining<font color="#CCCCCC"> control of execution flow</font><font color="#E5E5E5"> the</font>

139
00:05:56,100 --> 00:05:59,010
most obvious is the<font color="#E5E5E5"> direct vector where</font>

140
00:05:57,600 --> 00:06:00,240
you're potentially<font color="#CCCCCC"> overwriting</font><font color="#E5E5E5"> the</font>

141
00:05:59,010 --> 00:06:01,530
return address with an address<font color="#E5E5E5"> to show</font>

142
00:06:00,240 --> 00:06:03,480
put<font color="#E5E5E5"> on the stack or something</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> those</font>

143
00:06:01,530 --> 00:06:05,250
lines<font color="#E5E5E5"> but they're also indirect means of</font>

144
00:06:03,480 --> 00:06:06,920
<font color="#CCCCCC">getting</font><font color="#E5E5E5"> control of execution flow for</font>

145
00:06:05,250 --> 00:06:08,970
<font color="#CCCCCC">instance</font><font color="#E5E5E5"> using an intermediate</font>

146
00:06:06,920 --> 00:06:11,100
instruction that<font color="#E5E5E5"> in turn transfers</font>

147
00:06:08,970 --> 00:06:13,410
control<font color="#E5E5E5"> to your your buffer or whoever</font>

148
00:06:11,100 --> 00:06:15,150
may be located<font color="#CCCCCC"> so for instance an</font>

149
00:06:13,410 --> 00:06:16,890
address of a jump ESP instruction that's

150
00:06:15,150 --> 00:06:19,560
<font color="#E5E5E5">located inside a</font><font color="#CCCCCC"> DLL that's loaded into</font>

151
00:06:16,890 --> 00:06:22,110
memory or other<font color="#E5E5E5"> locations that may</font>

152
00:06:19,560 --> 00:06:23,550
indirectly<font color="#E5E5E5"> lead to control of execution</font>

153
00:06:22,110 --> 00:06:26,610
flow so that's the sense I'll be using

154
00:06:23,550 --> 00:06:27,750
<font color="#E5E5E5">the term our return address in what type</font>

155
00:06:26,610 --> 00:06:30,690
of return<font color="#E5E5E5"> addresses do people usually</font>

156
00:06:27,750 --> 00:06:32,250
use<font color="#CCCCCC"> if people have somebody's writing</font><font color="#E5E5E5"> an</font>

157
00:06:30,690 --> 00:06:33,750
exploit on Windows you'll typically see

158
00:06:32,250 --> 00:06:35,280
<font color="#CCCCCC">that they're gonna</font><font color="#E5E5E5"> make use of system</font>

159
00:06:33,750 --> 00:06:37,740
and application<font color="#CCCCCC"> dll's that contain</font>

160
00:06:35,280 --> 00:06:39,330
useful<font color="#CCCCCC"> op codes</font><font color="#E5E5E5"> for instance they'll use</font>

161
00:06:37,740 --> 00:06:40,920
a jump ESP if they're having<font color="#E5E5E5"> a stack</font>

162
00:06:39,330 --> 00:06:43,080
overflow<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they want</font><font color="#E5E5E5"> to transfer</font>

163
00:06:40,920 --> 00:06:44,790
<font color="#E5E5E5">control after the exploit into the stack</font>

164
00:06:43,080 --> 00:06:46,130
<font color="#E5E5E5">where</font><font color="#CCCCCC"> their buffer that</font><font color="#E5E5E5"> they control</font>

165
00:06:44,790 --> 00:06:48,060
<font color="#CCCCCC">this so they</font><font color="#E5E5E5"> can run arbitrary code</font>

166
00:06:46,130 --> 00:06:49,680
furthermore other op codes they use

167
00:06:48,060 --> 00:06:51,390
depending<font color="#E5E5E5"> on the vulnerability</font><font color="#CCCCCC"> in</font>

168
00:06:49,680 --> 00:06:52,980
question is maybe<font color="#E5E5E5"> they'll use a pop</font><font color="#CCCCCC"> pop</font>

169
00:06:51,390 --> 00:06:55,620
<font color="#CCCCCC">ret if they're doing an</font><font color="#E5E5E5"> SCH override or</font>

170
00:06:52,980 --> 00:06:57,270
something along<font color="#E5E5E5"> those lines</font><font color="#CCCCCC"> so one of</font>

171
00:06:55,620 --> 00:06:58,230
the problems<font color="#CCCCCC"> with some</font><font color="#E5E5E5"> of the stuff and</font>

172
00:06:57,270 --> 00:07:00,030
<font color="#E5E5E5">one of the reasons why</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> don't</font>

173
00:06:58,230 --> 00:07:02,040
typically use stack addresses<font color="#CCCCCC"> directly</font>

174
00:07:00,030 --> 00:07:04,289
is<font color="#CCCCCC"> that they contain no bytes</font><font color="#E5E5E5"> and they</font>

175
00:07:02,040 --> 00:07:06,600
tend to<font color="#E5E5E5"> be unpredictable between service</font>

176
00:07:04,290 --> 00:07:08,220
packs and operating system revisions<font color="#E5E5E5"> so</font>

177
00:07:06,600 --> 00:07:10,200
this is why you tend to see<font color="#CCCCCC"> people on</font>

178
00:07:08,220 --> 00:07:11,730
Windows using<font color="#CCCCCC"> a more indirect means of</font>

179
00:07:10,200 --> 00:07:14,460
gaining<font color="#CCCCCC"> control</font><font color="#E5E5E5"> of execution</font><font color="#CCCCCC"> flows such</font>

180
00:07:11,730 --> 00:07:16,250
<font color="#E5E5E5">as by going through a jump</font><font color="#CCCCCC"> ESP</font><font color="#E5E5E5"> or a pop</font>

181
00:07:14,460 --> 00:07:19,049
<font color="#E5E5E5">hop read or something</font><font color="#CCCCCC"> along those lines</font>

182
00:07:16,250 --> 00:07:21,960
<font color="#CCCCCC">on</font><font color="#E5E5E5"> UNIX</font><font color="#CCCCCC"> maybe not as interesting to</font><font color="#E5E5E5"> you</font>

183
00:07:19,050 --> 00:07:23,400
guys<font color="#E5E5E5"> people will typically</font><font color="#CCCCCC"> use the stack</font>

184
00:07:21,960 --> 00:07:24,979
and<font color="#E5E5E5"> heap addresses pointing into</font>

185
00:07:23,400 --> 00:07:27,299
<font color="#CCCCCC">shellcode directly</font>

186
00:07:24,980 --> 00:07:28,770
typically<font color="#CCCCCC"> because stack addresses are</font>

187
00:07:27,300 --> 00:07:30,180
much more predictable

188
00:07:28,770 --> 00:07:33,000
depending on the application<font color="#E5E5E5"> in question</font>

189
00:07:30,180 --> 00:07:34,590
<font color="#E5E5E5">on most UNIX derivatives so it makes it</font>

190
00:07:33,000 --> 00:07:35,849
much more easier<font color="#CCCCCC"> to use they</font><font color="#E5E5E5"> don't</font>

191
00:07:34,590 --> 00:07:37,650
typically<font color="#CCCCCC"> have no bytes because</font><font color="#E5E5E5"> they're</font>

192
00:07:35,849 --> 00:07:39,719
located towards the<font color="#E5E5E5"> higher addresses and</font>

193
00:07:37,650 --> 00:07:41,940
memory<font color="#E5E5E5"> and things like that</font><font color="#CCCCCC"> and it's</font>

194
00:07:39,720 --> 00:07:44,280
<font color="#CCCCCC">actually very</font><font color="#E5E5E5"> rare</font><font color="#CCCCCC"> in my experience to</font>

195
00:07:41,940 --> 00:07:46,110
see people doing an indirect method

196
00:07:44,280 --> 00:07:48,508
bouncing<font color="#E5E5E5"> through a jump</font><font color="#CCCCCC"> ESP something</font>

197
00:07:46,110 --> 00:07:51,780
all in those<font color="#E5E5E5"> eyes on UNIX derivative but</font>

198
00:07:48,509 --> 00:07:54,629
it's certainly<font color="#E5E5E5"> possible to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> this and</font>

199
00:07:51,780 --> 00:07:56,878
<font color="#CCCCCC">also for exploitation purposes it's not</font>

200
00:07:54,629 --> 00:07:58,740
<font color="#E5E5E5">always necessary to</font><font color="#CCCCCC"> actually that you</font>

201
00:07:56,879 --> 00:08:00,990
actually<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> know an address there</font>

202
00:07:58,740 --> 00:08:03,569
<font color="#E5E5E5">are rather rare cases where you can have</font>

203
00:08:00,990 --> 00:08:04,919
a purely address list<font color="#E5E5E5"> exploit</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font>

204
00:08:03,569 --> 00:08:07,889
great example on the Metasploit

205
00:08:04,919 --> 00:08:09,448
framework<font color="#E5E5E5"> there's a exploit for ice cast</font>

206
00:08:07,889 --> 00:08:11,069
<font color="#E5E5E5">and due</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> nature of the</font>

207
00:08:09,449 --> 00:08:12,900
vulnerability<font color="#CCCCCC"> you actually don't</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

208
00:08:11,069 --> 00:08:14,970
know any addresses<font color="#E5E5E5"> you simply send a</font>

209
00:08:12,900 --> 00:08:16,409
buffer<font color="#CCCCCC"> that in turn overrides the return</font>

210
00:08:14,970 --> 00:08:18,210
address with a pointer into<font color="#E5E5E5"> a buffer the</font>

211
00:08:16,409 --> 00:08:19,710
<font color="#CCCCCC">erd control and therefore you don't need</font>

212
00:08:18,210 --> 00:08:22,138
to know the<font color="#CCCCCC"> address of anything you just</font>

213
00:08:19,710 --> 00:08:23,729
<font color="#E5E5E5">trigger it and that's that so that's a</font>

214
00:08:22,139 --> 00:08:25,319
very uncommon case<font color="#E5E5E5"> but it is a situation</font>

215
00:08:23,729 --> 00:08:26,639
<font color="#E5E5E5">where you</font><font color="#CCCCCC"> actually don't need to</font><font color="#E5E5E5"> know</font>

216
00:08:25,319 --> 00:08:29,330
any<font color="#E5E5E5"> addresses on the target</font><font color="#CCCCCC"> operating</font>

217
00:08:26,639 --> 00:08:32,579
system<font color="#E5E5E5"> so that's an interesting</font><font color="#CCCCCC"> point</font>

218
00:08:29,330 --> 00:08:33,510
but in the<font color="#E5E5E5"> very general case</font><font color="#CCCCCC"> most of the</font>

219
00:08:32,578 --> 00:08:35,039
<font color="#E5E5E5">time</font><font color="#CCCCCC"> people are going to</font><font color="#E5E5E5"> make</font>

220
00:08:33,510 --> 00:08:37,708
assumptions<font color="#CCCCCC"> on the address based layout</font>

221
00:08:35,039 --> 00:08:40,140
<font color="#E5E5E5">of the target process</font><font color="#CCCCCC"> they're going to</font>

222
00:08:37,708 --> 00:08:41,939
assume<font color="#CCCCCC"> that the jump ESP instruction is</font>

223
00:08:40,140 --> 00:08:43,740
located to this specific address<font color="#CCCCCC"> because</font>

224
00:08:41,940 --> 00:08:46,050
I know that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> DLL will be loaded</font><font color="#E5E5E5"> at</font>

225
00:08:43,740 --> 00:08:47,579
this address<font color="#CCCCCC"> and then as I said</font><font color="#E5E5E5"> there</font>

226
00:08:46,050 --> 00:08:48,270
<font color="#CCCCCC">are only</font><font color="#E5E5E5"> rare cases where you won't need</font>

227
00:08:47,579 --> 00:08:50,160
<font color="#E5E5E5">to</font><font color="#CCCCCC"> know the address</font>

228
00:08:48,270 --> 00:08:51,420
maybe it's automatically overrides the

229
00:08:50,160 --> 00:08:53,219
return address for you or something

230
00:08:51,420 --> 00:08:54,569
<font color="#E5E5E5">along those</font><font color="#CCCCCC"> lines but typically speaking</font>

231
00:08:53,220 --> 00:08:56,040
you<font color="#E5E5E5"> will need to make an assumption</font>

232
00:08:54,570 --> 00:08:58,560
<font color="#E5E5E5">about the address space layout in some</font>

233
00:08:56,040 --> 00:09:00,240
regard so in the case where<font color="#CCCCCC"> that's</font>

234
00:08:58,560 --> 00:09:02,160
<font color="#CCCCCC">necessary if the address</font><font color="#E5E5E5"> space is</font>

235
00:09:00,240 --> 00:09:06,420
different<font color="#CCCCCC"> your exploit is going to fail</font>

236
00:09:02,160 --> 00:09:09,149
<font color="#CCCCCC">and that can be a problem so one of</font><font color="#E5E5E5"> the</font>

237
00:09:06,420 --> 00:09:10,890
specific<font color="#E5E5E5"> cases</font><font color="#CCCCCC"> is if you are</font><font color="#E5E5E5"> using a</font>

238
00:09:09,149 --> 00:09:12,060
<font color="#E5E5E5">static address that you</font><font color="#CCCCCC"> assume to be in</font>

239
00:09:10,890 --> 00:09:14,760
a<font color="#E5E5E5"> DLL or something along those</font><font color="#CCCCCC"> lines</font>

240
00:09:12,060 --> 00:09:16,290
<font color="#CCCCCC">these</font><font color="#E5E5E5"> addresses are often not the same</font>

241
00:09:14,760 --> 00:09:18,779
<font color="#CCCCCC">between different operating system and</font>

242
00:09:16,290 --> 00:09:21,300
application revisions<font color="#CCCCCC"> a good</font><font color="#E5E5E5"> example is</font>

243
00:09:18,779 --> 00:09:22,860
<font color="#E5E5E5">WS to help DLL this is one that we use</font>

244
00:09:21,300 --> 00:09:24,620
extensively<font color="#CCCCCC"> Metasploit and lots of other</font>

245
00:09:22,860 --> 00:09:27,450
<font color="#E5E5E5">people who write exploit G's as well</font>

246
00:09:24,620 --> 00:09:29,630
<font color="#CCCCCC">that actually has that consistent</font>

247
00:09:27,450 --> 00:09:33,899
<font color="#E5E5E5">mapping address and everything</font><font color="#CCCCCC"> between</font>

248
00:09:29,630 --> 00:09:35,520
on<font color="#E5E5E5"> NT on 2000 on XP in 2003</font><font color="#CCCCCC"> the problem</font>

249
00:09:33,899 --> 00:09:37,079
is is that<font color="#E5E5E5"> in between the major</font>

250
00:09:35,520 --> 00:09:38,640
revisions it actually doesn't<font color="#E5E5E5"> have the</font>

251
00:09:37,079 --> 00:09:40,170
same base address and<font color="#E5E5E5"> therefore if you</font>

252
00:09:38,640 --> 00:09:42,220
<font color="#CCCCCC">were trying to</font><font color="#E5E5E5"> write an exploit that was</font>

253
00:09:40,170 --> 00:09:45,219
going to<font color="#E5E5E5"> target a bug that affected</font>

254
00:09:42,220 --> 00:09:48,160
<font color="#CCCCCC">mm</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> XP</font><font color="#E5E5E5"> and you're trying to return</font>

255
00:09:45,220 --> 00:09:49,330
<font color="#E5E5E5">into an opcode and</font><font color="#CCCCCC"> ws to help DLL</font><font color="#E5E5E5"> you</font>

256
00:09:48,160 --> 00:09:50,890
actually wouldn't be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> use the</font>

257
00:09:49,330 --> 00:09:53,470
same<font color="#CCCCCC"> address</font><font color="#E5E5E5"> because they're different</font>

258
00:09:50,890 --> 00:09:54,699
between the<font color="#E5E5E5"> major revisions</font><font color="#CCCCCC"> so that's</font>

259
00:09:53,470 --> 00:09:56,350
why that's<font color="#E5E5E5"> one of the</font><font color="#CCCCCC"> problems with</font>

260
00:09:54,700 --> 00:09:58,810
<font color="#E5E5E5">using</font><font color="#CCCCCC"> these static</font><font color="#E5E5E5"> addresses inside</font>

261
00:09:56,350 --> 00:10:00,220
<font color="#CCCCCC">dll's is that you're subject</font><font color="#E5E5E5"> to they</font>

262
00:09:58,810 --> 00:10:01,390
might change<font color="#E5E5E5"> between an application</font>

263
00:10:00,220 --> 00:10:03,010
revision and<font color="#E5E5E5"> run operating system</font>

264
00:10:01,390 --> 00:10:05,650
<font color="#CCCCCC">revisions</font><font color="#E5E5E5"> so you're limited</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> that</font>

265
00:10:03,010 --> 00:10:07,270
regard<font color="#E5E5E5"> so when you are writing an</font>

266
00:10:05,650 --> 00:10:09,040
exploit<font color="#E5E5E5"> this is going to force you to</font>

267
00:10:07,270 --> 00:10:10,870
have<font color="#E5E5E5"> version specific targets I'm</font>

268
00:10:09,040 --> 00:10:13,449
writing<font color="#E5E5E5"> an exploit for vulnerability</font>

269
00:10:10,870 --> 00:10:14,890
<font color="#CCCCCC">that</font><font color="#E5E5E5"> affects 2000 XP</font><font color="#CCCCCC"> in 2003</font><font color="#E5E5E5"> but my</font>

270
00:10:13,450 --> 00:10:16,720
return<font color="#E5E5E5"> address</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> vary between the</font>

271
00:10:14,890 --> 00:10:18,069
<font color="#E5E5E5">platforms therefore that means that I'm</font>

272
00:10:16,720 --> 00:10:19,600
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to have to know the operating</font>

273
00:10:18,070 --> 00:10:21,060
<font color="#E5E5E5">system version that targeting when I go</font>

274
00:10:19,600 --> 00:10:23,590
to exploit it

275
00:10:21,060 --> 00:10:25,689
there are<font color="#E5E5E5"> a deep cases</font><font color="#CCCCCC"> actually though</font>

276
00:10:23,590 --> 00:10:27,250
where you can write an exploit that<font color="#E5E5E5"> can</font>

277
00:10:25,690 --> 00:10:28,450
be<font color="#E5E5E5"> universal affecting all of</font><font color="#CCCCCC"> the</font>

278
00:10:27,250 --> 00:10:31,840
<font color="#E5E5E5">platforms that the vulnerability</font>

279
00:10:28,450 --> 00:10:33,490
<font color="#CCCCCC">question is on</font><font color="#E5E5E5"> without having to use</font>

280
00:10:31,840 --> 00:10:34,780
version specific addresses<font color="#E5E5E5"> in nature</font>

281
00:10:33,490 --> 00:10:36,370
that<font color="#E5E5E5"> would require you to determine the</font>

282
00:10:34,780 --> 00:10:38,140
targets<font color="#E5E5E5"> operating system or application</font>

283
00:10:36,370 --> 00:10:39,970
<font color="#E5E5E5">version or things of that sort</font>

284
00:10:38,140 --> 00:10:42,430
<font color="#CCCCCC">a very good example of this is</font>

285
00:10:39,970 --> 00:10:44,580
<font color="#CCCCCC">Metasploit RPC decom exploit that while</font>

286
00:10:42,430 --> 00:10:46,780
it does use version specific addresses

287
00:10:44,580 --> 00:10:47,890
<font color="#CCCCCC">the nature of</font><font color="#E5E5E5"> the way</font><font color="#CCCCCC"> that things</font><font color="#E5E5E5"> are</font>

288
00:10:46,780 --> 00:10:49,510
structured between the different

289
00:10:47,890 --> 00:10:51,280
operating system revisions allows it to

290
00:10:49,510 --> 00:10:52,780
<font color="#CCCCCC">actually be able to be sent</font><font color="#E5E5E5"> in one</font>

291
00:10:51,280 --> 00:10:54,880
request<font color="#CCCCCC"> and still work on all the</font>

292
00:10:52,780 --> 00:10:56,560
different<font color="#E5E5E5"> operating system revisions</font><font color="#CCCCCC"> so</font>

293
00:10:54,880 --> 00:10:58,689
that is an interesting case<font color="#E5E5E5"> of</font><font color="#CCCCCC"> it</font>

294
00:10:56,560 --> 00:11:02,050
although commonly speaking<font color="#E5E5E5"> that that's</font>

295
00:10:58,690 --> 00:11:03,400
that's<font color="#E5E5E5"> not the common case</font><font color="#CCCCCC"> so in some</font>

296
00:11:02,050 --> 00:11:05,170
cases though you can actually determine

297
00:11:03,400 --> 00:11:07,689
<font color="#CCCCCC">the operating</font><font color="#E5E5E5"> system version or</font><font color="#CCCCCC"> the</font>

298
00:11:05,170 --> 00:11:09,640
application version reliably<font color="#CCCCCC"> this is</font>

299
00:11:07,690 --> 00:11:11,890
<font color="#E5E5E5">especially common in things like</font><font color="#CCCCCC"> browser</font>

300
00:11:09,640 --> 00:11:13,660
<font color="#CCCCCC">based exploits where you can use</font>

301
00:11:11,890 --> 00:11:15,280
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> or something</font><font color="#E5E5E5"> like that</font>

302
00:11:13,660 --> 00:11:16,390
determine actually you know what

303
00:11:15,280 --> 00:11:17,350
operating system they're probably

304
00:11:16,390 --> 00:11:19,180
<font color="#E5E5E5">running on or web browser version</font>

305
00:11:17,350 --> 00:11:22,900
they're running<font color="#E5E5E5"> on or something along</font>

306
00:11:19,180 --> 00:11:26,260
<font color="#E5E5E5">those</font><font color="#CCCCCC"> lines so but in other cases</font><font color="#E5E5E5"> it's</font>

307
00:11:22,900 --> 00:11:27,550
<font color="#E5E5E5">also common as well so in the case where</font>

308
00:11:26,260 --> 00:11:28,600
you<font color="#E5E5E5"> aren't able to determine the</font>

309
00:11:27,550 --> 00:11:30,849
<font color="#CCCCCC">outgoing</font><font color="#E5E5E5"> system version or the</font>

310
00:11:28,600 --> 00:11:32,800
application revision<font color="#CCCCCC"> your target</font>

311
00:11:30,850 --> 00:11:34,720
selection<font color="#CCCCCC"> I have a vulnerability that</font>

312
00:11:32,800 --> 00:11:36,609
<font color="#CCCCCC">affects 2000 XP</font><font color="#E5E5E5"> but I don't know which</font>

313
00:11:34,720 --> 00:11:38,680
one it is<font color="#CCCCCC"> it</font><font color="#E5E5E5"> basically becomes a shot in</font>

314
00:11:36,610 --> 00:11:40,450
the dark<font color="#CCCCCC"> so you're</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> guess I</font><font color="#CCCCCC"> I</font>

315
00:11:38,680 --> 00:11:43,359
<font color="#E5E5E5">assume</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this target is probably</font>

316
00:11:40,450 --> 00:11:46,150
<font color="#E5E5E5">running XP I'm gonna try this target</font><font color="#CCCCCC"> but</font>

317
00:11:43,360 --> 00:11:47,950
if you're wrong especially<font color="#CCCCCC"> for things on</font>

318
00:11:46,150 --> 00:11:50,860
Windows although less the case on<font color="#CCCCCC"> unix</font>

319
00:11:47,950 --> 00:11:52,270
with working<font color="#CCCCCC"> Damons</font><font color="#E5E5E5"> you will result in</font>

320
00:11:50,860 --> 00:11:53,770
the lost opportunity if you use the

321
00:11:52,270 --> 00:11:55,750
wrong<font color="#CCCCCC"> target because the application</font>

322
00:11:53,770 --> 00:11:56,019
will crash<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> it is some service and</font>

323
00:11:55,750 --> 00:11:57,519
<font color="#CCCCCC">we</font>

324
00:11:56,019 --> 00:12:00,489
<font color="#CCCCCC">spawn in 30 seconds</font><font color="#E5E5E5"> or something like</font>

325
00:11:57,519 --> 00:12:01,959
<font color="#CCCCCC">that</font><font color="#E5E5E5"> but generally</font><font color="#CCCCCC"> speaking it's going</font>

326
00:12:00,489 --> 00:12:04,389
to<font color="#E5E5E5"> result in a lost opportunity and</font>

327
00:12:01,959 --> 00:12:06,279
therefore you may not<font color="#CCCCCC"> be able to get</font>

328
00:12:04,389 --> 00:12:08,350
your attack to work<font color="#E5E5E5"> so the big question</font>

329
00:12:06,279 --> 00:12:10,449
asked ourselves<font color="#E5E5E5"> here is is there any way</font>

330
00:12:08,350 --> 00:12:12,429
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can improve this any way that we</font>

331
00:12:10,449 --> 00:12:15,758
can make this return address usage more

332
00:12:12,429 --> 00:12:17,559
reliable more<font color="#CCCCCC"> Universal</font><font color="#E5E5E5"> perhaps so the</font>

333
00:12:15,759 --> 00:12:20,949
answer<font color="#CCCCCC"> is well we'll see</font><font color="#E5E5E5"> that's points</font>

334
00:12:17,559 --> 00:12:23,709
presentation<font color="#CCCCCC"> so the big</font><font color="#E5E5E5"> question also</font><font color="#CCCCCC"> is</font>

335
00:12:20,949 --> 00:12:26,170
that can moving targets be useful<font color="#E5E5E5"> if you</font>

336
00:12:23,709 --> 00:12:27,609
look at a process<font color="#E5E5E5"> address space</font><font color="#CCCCCC"> just pop</font>

337
00:12:26,170 --> 00:12:29,349
up into<font color="#E5E5E5"> a debugger look at different</font>

338
00:12:27,610 --> 00:12:30,759
things<font color="#E5E5E5"> in it as it runs</font><font color="#CCCCCC"> breaking at</font>

339
00:12:29,350 --> 00:12:32,170
different points<font color="#E5E5E5"> you'll see that the</font>

340
00:12:30,759 --> 00:12:33,569
<font color="#E5E5E5">process address space is in a constant</font>

341
00:12:32,170 --> 00:12:36,009
<font color="#CCCCCC">state of</font><font color="#E5E5E5"> flux it's constantly changing</font>

342
00:12:33,569 --> 00:12:37,689
<font color="#CCCCCC">the stack things</font><font color="#E5E5E5"> are getting pushed and</font>

343
00:12:36,009 --> 00:12:39,819
popped from the stack<font color="#E5E5E5"> calls are being</font>

344
00:12:37,689 --> 00:12:41,649
<font color="#E5E5E5">made</font><font color="#CCCCCC"> all that</font><font color="#E5E5E5"> sort of stuff</font><font color="#CCCCCC"> you know</font>

345
00:12:39,819 --> 00:12:44,589
<font color="#E5E5E5">local variables are</font><font color="#CCCCCC"> being stored</font><font color="#E5E5E5"> things</font>

346
00:12:41,649 --> 00:12:46,629
like that things are<font color="#CCCCCC"> being allocated</font><font color="#E5E5E5"> in</font>

347
00:12:44,589 --> 00:12:48,429
the<font color="#E5E5E5"> heap they're being D allocated freed</font>

348
00:12:46,629 --> 00:12:51,579
<font color="#E5E5E5">process heaps are being created things</font>

349
00:12:48,429 --> 00:12:53,470
like that<font color="#CCCCCC"> furthermore files are possibly</font>

350
00:12:51,579 --> 00:12:55,299
<font color="#E5E5E5">being mapped into memory maybe they've</font>

351
00:12:53,470 --> 00:12:56,709
<font color="#E5E5E5">subsequently unmapped maybe the</font>

352
00:12:55,299 --> 00:12:58,809
<font color="#E5E5E5">constants of the file are changing as</font>

353
00:12:56,709 --> 00:13:00,729
the program runs<font color="#CCCCCC"> and furthermore the</font>

354
00:12:58,809 --> 00:13:02,559
obvious one is<font color="#CCCCCC"> DLLs they're</font><font color="#E5E5E5"> being loaded</font>

355
00:13:00,730 --> 00:13:03,939
into memory<font color="#CCCCCC"> as</font><font color="#E5E5E5"> dependent resources and</font>

356
00:13:02,559 --> 00:13:05,019
<font color="#E5E5E5">things of that sort and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> maybe being</font>

357
00:13:03,939 --> 00:13:07,540
unloaded<font color="#E5E5E5"> when they're no longer</font>

358
00:13:05,019 --> 00:13:09,009
necessary<font color="#E5E5E5"> so the broad picture is if you</font>

359
00:13:07,540 --> 00:13:10,179
look<font color="#E5E5E5"> at it it just seems like the</font>

360
00:13:09,009 --> 00:13:14,559
<font color="#E5E5E5">address space is a very unpredictable</font>

361
00:13:10,179 --> 00:13:16,389
Beast<font color="#CCCCCC"> so when people</font><font color="#E5E5E5"> are going about and</font>

362
00:13:14,559 --> 00:13:18,389
searching for<font color="#E5E5E5"> reliable return addresses</font>

363
00:13:16,389 --> 00:13:20,740
<font color="#E5E5E5">and things like that</font><font color="#CCCCCC"> for vulnerabilities</font>

364
00:13:18,389 --> 00:13:22,179
<font color="#E5E5E5">typically speaking people will only look</font>

365
00:13:20,740 --> 00:13:25,209
at what are<font color="#CCCCCC"> referred to</font><font color="#E5E5E5"> as the static</font>

366
00:13:22,179 --> 00:13:26,110
regions<font color="#CCCCCC"> although they may</font><font color="#E5E5E5"> not be static</font>

367
00:13:25,209 --> 00:13:27,429
between operating system version

368
00:13:26,110 --> 00:13:28,779
<font color="#E5E5E5">revision they are static for the</font>

369
00:13:27,429 --> 00:13:31,420
specific<font color="#E5E5E5"> target that you're working with</font>

370
00:13:28,779 --> 00:13:33,549
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> instance this typically is going</font>

371
00:13:31,420 --> 00:13:34,599
<font color="#E5E5E5">to</font><font color="#CCCCCC"> limit you to</font><font color="#E5E5E5"> think loaded images</font>

372
00:13:33,549 --> 00:13:36,939
<font color="#CCCCCC">dll's</font>

373
00:13:34,600 --> 00:13:39,549
executables<font color="#E5E5E5"> things like that that are</font>

374
00:13:36,939 --> 00:13:41,049
<font color="#E5E5E5">dependent for the program to run</font><font color="#CCCCCC"> so</font>

375
00:13:39,549 --> 00:13:42,459
those unless there's a patch or

376
00:13:41,049 --> 00:13:44,199
something<font color="#E5E5E5"> along those</font><font color="#CCCCCC"> lines those will</font>

377
00:13:42,459 --> 00:13:46,439
<font color="#E5E5E5">remain fairly static for that operating</font>

378
00:13:44,199 --> 00:13:48,549
<font color="#CCCCCC">system</font><font color="#E5E5E5"> version or application version</font>

379
00:13:46,439 --> 00:13:49,929
<font color="#CCCCCC">there are a</font><font color="#E5E5E5"> few other reasons</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there</font>

380
00:13:48,549 --> 00:13:51,579
are a<font color="#E5E5E5"> few other regions that people use</font>

381
00:13:49,929 --> 00:13:53,769
sometimes<font color="#E5E5E5"> like the peb and the tab</font><font color="#CCCCCC"> that</font>

382
00:13:51,579 --> 00:13:55,660
have predictable addresses and sometimes

383
00:13:53,769 --> 00:13:57,059
can be used to to<font color="#E5E5E5"> be leveraged as a</font>

384
00:13:55,660 --> 00:13:59,709
return address<font color="#CCCCCC"> and things</font><font color="#E5E5E5"> of that sort</font>

385
00:13:57,059 --> 00:14:00,639
<font color="#E5E5E5">so</font><font color="#CCCCCC"> this is definitely</font><font color="#E5E5E5"> what people are</font>

386
00:13:59,709 --> 00:14:02,559
looking<font color="#CCCCCC"> at when they're looking</font><font color="#E5E5E5"> for</font>

387
00:14:00,639 --> 00:14:04,329
<font color="#E5E5E5">return addresses and the important</font>

388
00:14:02,559 --> 00:14:07,209
question<font color="#E5E5E5"> here is are we</font><font color="#CCCCCC"> missing</font><font color="#E5E5E5"> anything</font>

389
00:14:04,329 --> 00:14:09,430
important by not looking<font color="#CCCCCC"> at these other</font>

390
00:14:07,209 --> 00:14:11,170
<font color="#CCCCCC">non-static regions</font><font color="#E5E5E5"> is there anything</font>

391
00:14:09,430 --> 00:14:12,729
<font color="#CCCCCC">we could possibly</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> in them you know</font>

392
00:14:11,170 --> 00:14:14,979
at<font color="#CCCCCC"> first glance you would</font><font color="#E5E5E5"> think no there</font>

393
00:14:12,730 --> 00:14:17,800
isn't<font color="#E5E5E5"> they're inherently dynamic but as</font>

394
00:14:14,980 --> 00:14:20,230
we'll see<font color="#E5E5E5"> that may not be the case</font><font color="#CCCCCC"> if</font>

395
00:14:17,800 --> 00:14:21,819
you just<font color="#E5E5E5"> think at a high level</font><font color="#CCCCCC"> these</font>

396
00:14:20,230 --> 00:14:24,070
dynamic regions of<font color="#CCCCCC"> memory may actually</font>

397
00:14:21,820 --> 00:14:26,050
<font color="#E5E5E5">at certain points in execution contain</font>

398
00:14:24,070 --> 00:14:28,959
viable<font color="#E5E5E5"> optos things that you could use</font>

399
00:14:26,050 --> 00:14:30,219
<font color="#E5E5E5">for instance</font><font color="#CCCCCC"> a jump ESP that would then</font>

400
00:14:28,959 --> 00:14:32,109
transfer control into your buffer or

401
00:14:30,220 --> 00:14:33,820
something<font color="#E5E5E5"> along those lines</font><font color="#CCCCCC"> so a</font><font color="#E5E5E5"> couple</font>

402
00:14:32,110 --> 00:14:36,190
<font color="#E5E5E5">examples of these perhaps there's a</font>

403
00:14:33,820 --> 00:14:37,209
pointer<font color="#CCCCCC"> stored somewhere in the heap you</font>

404
00:14:36,190 --> 00:14:39,040
know pointing somewhere<font color="#E5E5E5"> else in memory</font>

405
00:14:37,209 --> 00:14:40,569
and the bytes that<font color="#E5E5E5"> can compose the</font>

406
00:14:39,040 --> 00:14:42,579
address of the pointer<font color="#E5E5E5"> may actually</font>

407
00:14:40,570 --> 00:14:44,649
contain viable<font color="#E5E5E5"> approach they may contain</font>

408
00:14:42,580 --> 00:14:46,149
the bytes that that<font color="#CCCCCC"> in turn translate</font>

409
00:14:44,649 --> 00:14:46,570
into a jump<font color="#E5E5E5"> ESP or</font><font color="#CCCCCC"> something along those</font>

410
00:14:46,149 --> 00:14:48,820
lines

411
00:14:46,570 --> 00:14:50,350
another<font color="#E5E5E5"> example maybe there's an integer</font>

412
00:14:48,820 --> 00:14:53,620
store on the stack and<font color="#CCCCCC"> the heap</font>

413
00:14:50,350 --> 00:14:55,540
somewhere<font color="#CCCCCC"> in memory that the the integer</font>

414
00:14:53,620 --> 00:14:57,550
itself the value the bytes<font color="#CCCCCC"> that compose</font>

415
00:14:55,540 --> 00:15:00,490
<font color="#CCCCCC">it actually are correlated to</font><font color="#E5E5E5"> a viable</font>

416
00:14:57,550 --> 00:15:02,529
<font color="#CCCCCC">opposite of the jump</font><font color="#E5E5E5"> ESP so these are</font>

417
00:15:00,490 --> 00:15:03,730
<font color="#E5E5E5">cases where you could see a</font><font color="#CCCCCC"> dynamic</font>

418
00:15:02,529 --> 00:15:07,180
region<font color="#CCCCCC"> actually containing</font><font color="#E5E5E5"> useful</font>

419
00:15:03,730 --> 00:15:08,980
<font color="#E5E5E5">information</font><font color="#CCCCCC"> the problem is is that the</font>

420
00:15:07,180 --> 00:15:10,209
<font color="#E5E5E5">state here is inherently transient if</font>

421
00:15:08,980 --> 00:15:12,250
it's being<font color="#E5E5E5"> stored on the</font><font color="#CCCCCC"> stack it's</font>

422
00:15:10,209 --> 00:15:13,359
being stored on<font color="#E5E5E5"> the heap you probably</font>

423
00:15:12,250 --> 00:15:14,980
aren't going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> able to reliably</font>

424
00:15:13,360 --> 00:15:17,529
predict these values are going<font color="#E5E5E5"> to be set</font>

425
00:15:14,980 --> 00:15:19,720
to<font color="#E5E5E5"> a certain thing at any one time</font><font color="#CCCCCC"> but</font>

426
00:15:17,529 --> 00:15:21,070
<font color="#E5E5E5">however there are certain transient</font>

427
00:15:19,720 --> 00:15:22,870
<font color="#CCCCCC">States</font><font color="#E5E5E5"> that can actually be predicted</font>

428
00:15:21,070 --> 00:15:25,029
<font color="#E5E5E5">and this is going to be the subject of</font>

429
00:15:22,870 --> 00:15:26,140
<font color="#E5E5E5">this talk</font><font color="#CCCCCC"> a very good</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> of</font>

430
00:15:25,029 --> 00:15:29,110
transient<font color="#CCCCCC"> States that</font><font color="#E5E5E5"> can be predicted</font>

431
00:15:26,140 --> 00:15:30,910
<font color="#CCCCCC">are inherently timer variables things</font>

432
00:15:29,110 --> 00:15:32,709
that are storing timer<font color="#CCCCCC"> state</font><font color="#E5E5E5"> somewhere</font>

433
00:15:30,910 --> 00:15:33,969
in memory<font color="#CCCCCC"> and</font><font color="#E5E5E5"> these are the things</font><font color="#CCCCCC"> that</font>

434
00:15:32,709 --> 00:15:37,359
I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> refer</font><font color="#CCCCCC"> to as temporal</font>

435
00:15:33,970 --> 00:15:40,330
addresses so what is the temporal

436
00:15:37,360 --> 00:15:41,529
address<font color="#CCCCCC"> temporal address</font><font color="#E5E5E5"> easiest example</font>

437
00:15:40,330 --> 00:15:43,720
<font color="#E5E5E5">right</font><font color="#CCCCCC"> there</font>

438
00:15:41,529 --> 00:15:46,680
time<font color="#E5E5E5"> T foo setting it to the number</font><font color="#CCCCCC"> of</font>

439
00:15:43,720 --> 00:15:48,760
seconds since 1970<font color="#CCCCCC"> pock I'm just storing</font>

440
00:15:46,680 --> 00:15:50,849
the current time of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> system in this</font>

441
00:15:48,760 --> 00:15:53,589
<font color="#E5E5E5">local variable or wherever</font><font color="#CCCCCC"> may be stored</font>

442
00:15:50,850 --> 00:15:54,850
<font color="#CCCCCC">this is an example</font><font color="#E5E5E5"> of just something</font>

443
00:15:53,589 --> 00:15:56,650
<font color="#CCCCCC">that stores timer</font><font color="#E5E5E5"> States somewhere</font><font color="#CCCCCC"> in</font>

444
00:15:54,850 --> 00:15:58,450
memory<font color="#E5E5E5"> it's a location you know maybe</font>

445
00:15:56,650 --> 00:16:00,819
it's storing the<font color="#CCCCCC"> number of seconds</font><font color="#E5E5E5"> since</font>

446
00:15:58,450 --> 00:16:02,230
January 1st 1970 maybe it's storing the

447
00:16:00,820 --> 00:16:04,089
<font color="#CCCCCC">number of seconds</font><font color="#E5E5E5"> since the program</font>

448
00:16:02,230 --> 00:16:06,550
started<font color="#CCCCCC"> some kind of</font><font color="#E5E5E5"> periodic timer</font>

449
00:16:04,089 --> 00:16:07,779
<font color="#E5E5E5">that's being updated with some something</font>

450
00:16:06,550 --> 00:16:10,029
<font color="#E5E5E5">that's relative to either an absolute</font>

451
00:16:07,779 --> 00:16:12,730
time or some kind of relative time that

452
00:16:10,029 --> 00:16:14,410
you could<font color="#E5E5E5"> measure so when you break</font>

453
00:16:12,730 --> 00:16:15,990
temporal addresses down<font color="#CCCCCC"> you</font><font color="#E5E5E5"> basically</font>

454
00:16:14,410 --> 00:16:18,550
identify<font color="#E5E5E5"> that they have three properties</font>

455
00:16:15,990 --> 00:16:21,430
<font color="#CCCCCC">the first</font><font color="#E5E5E5"> property is that they have a</font>

456
00:16:18,550 --> 00:16:22,670
capacity<font color="#CCCCCC"> this is regarded as the</font><font color="#E5E5E5"> maximum</font>

457
00:16:21,430 --> 00:16:24,709
size in which the

458
00:16:22,670 --> 00:16:26,510
<font color="#CCCCCC">yeah maximum</font><font color="#E5E5E5"> amount of timers state that</font>

459
00:16:24,710 --> 00:16:30,230
this address can store<font color="#E5E5E5"> so for instance</font>

460
00:16:26,510 --> 00:16:31,850
if you have a time T variable<font color="#E5E5E5"> that's 32</font>

461
00:16:30,230 --> 00:16:33,530
bits<font color="#E5E5E5"> but it's a signed integer so it's</font>

462
00:16:31,850 --> 00:16:35,000
gonna be 31 bits<font color="#E5E5E5"> so that's the maximum</font>

463
00:16:33,530 --> 00:16:37,939
<font color="#CCCCCC">amount of timer state that you can store</font>

464
00:16:35,000 --> 00:16:40,550
within<font color="#E5E5E5"> that without</font><font color="#CCCCCC"> rolling over to you</font>

465
00:16:37,940 --> 00:16:43,010
know to<font color="#CCCCCC"> hire time or</font><font color="#E5E5E5"> whatever so that's</font>

466
00:16:40,550 --> 00:16:44,689
that's what the capacity<font color="#E5E5E5"> is the period</font>

467
00:16:43,010 --> 00:16:46,340
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> going to be how often the</font>

468
00:16:44,690 --> 00:16:49,040
temporal address is updated<font color="#E5E5E5"> how</font>

469
00:16:46,340 --> 00:16:50,510
periodically<font color="#E5E5E5"> you're updating maybe every</font>

470
00:16:49,040 --> 00:16:52,250
second you're<font color="#E5E5E5"> updating this local</font>

471
00:16:50,510 --> 00:16:55,160
variable<font color="#CCCCCC"> to</font><font color="#E5E5E5"> a new timer</font><font color="#CCCCCC"> state something</font>

472
00:16:52,250 --> 00:16:57,470
<font color="#E5E5E5">like that</font><font color="#CCCCCC"> and then lastly is the scale</font>

473
00:16:55,160 --> 00:17:00,170
<font color="#E5E5E5">and this identifies the unit of measure</font>

474
00:16:57,470 --> 00:17:01,400
associated with<font color="#E5E5E5"> this timer variable</font><font color="#CCCCCC"> as</font>

475
00:17:00,170 --> 00:17:03,500
we've<font color="#CCCCCC"> been saying it's</font><font color="#E5E5E5"> going to store</font>

476
00:17:01,400 --> 00:17:05,720
perhaps<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of seconds since 1970</font>

477
00:17:03,500 --> 00:17:08,030
<font color="#E5E5E5">perhaps the number of seconds</font><font color="#CCCCCC"> since 1601</font>

478
00:17:05,720 --> 00:17:09,500
<font color="#CCCCCC">a counter</font><font color="#E5E5E5"> from program start these</font>

479
00:17:08,030 --> 00:17:12,079
different types of<font color="#E5E5E5"> things that is the</font>

480
00:17:09,500 --> 00:17:14,150
<font color="#E5E5E5">scale</font><font color="#CCCCCC"> it identifies at what point</font><font color="#E5E5E5"> that</font>

481
00:17:12,079 --> 00:17:17,599
timer is being real being conveyed

482
00:17:14,150 --> 00:17:19,310
relative to so the timer<font color="#E5E5E5"> states</font>

483
00:17:17,599 --> 00:17:21,079
<font color="#E5E5E5">basically they're just</font><font color="#CCCCCC"> a series of bytes</font>

484
00:17:19,310 --> 00:17:23,960
<font color="#E5E5E5">under you know in a certain</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> and</font>

485
00:17:21,079 --> 00:17:25,520
knowing these properties of a temporal

486
00:17:23,960 --> 00:17:27,560
address can actually be<font color="#CCCCCC"> very useful to</font>

487
00:17:25,520 --> 00:17:29,120
us<font color="#E5E5E5"> as we'll see the things that</font><font color="#CCCCCC"> it</font>

488
00:17:27,560 --> 00:17:31,580
<font color="#E5E5E5">allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to do we can predict certain</font>

489
00:17:29,120 --> 00:17:33,770
<font color="#E5E5E5">things we can predict when certain byte</font>

490
00:17:31,580 --> 00:17:36,020
combinations will occur and within the

491
00:17:33,770 --> 00:17:38,270
timer<font color="#E5E5E5"> state and further note furthermore</font>

492
00:17:36,020 --> 00:17:39,860
we can<font color="#E5E5E5"> identify how long these</font><font color="#CCCCCC"> by</font>

493
00:17:38,270 --> 00:17:41,540
combinations will last within<font color="#E5E5E5"> the timer</font>

494
00:17:39,860 --> 00:17:43,490
<font color="#E5E5E5">state since we know how periodically</font>

495
00:17:41,540 --> 00:17:46,250
<font color="#CCCCCC">each of the bytes will be updated</font><font color="#E5E5E5"> we can</font>

496
00:17:43,490 --> 00:17:47,900
<font color="#E5E5E5">then predict both of these combinations</font>

497
00:17:46,250 --> 00:17:49,610
this makes the temporal return addresses

498
00:17:47,900 --> 00:17:51,980
<font color="#E5E5E5">are temporal addresses potentially</font>

499
00:17:49,610 --> 00:17:53,209
<font color="#CCCCCC">useful as return addresses because we</font>

500
00:17:51,980 --> 00:17:55,160
<font color="#CCCCCC">can't predict when certain by</font>

501
00:17:53,210 --> 00:17:57,770
combinations<font color="#CCCCCC"> can</font><font color="#E5E5E5"> occur and we can</font>

502
00:17:55,160 --> 00:17:59,570
predict how long they will<font color="#CCCCCC"> last so all</font>

503
00:17:57,770 --> 00:18:01,610
we need to<font color="#CCCCCC"> know is when these</font><font color="#E5E5E5"> useful</font>

504
00:17:59,570 --> 00:18:03,530
wire combinations will occur<font color="#CCCCCC"> so let's</font>

505
00:18:01,610 --> 00:18:04,729
see how we're gonna go<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> to</font>

506
00:18:03,530 --> 00:18:06,350
give everybody<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of a concrete</font>

507
00:18:04,730 --> 00:18:08,780
example<font color="#CCCCCC"> of</font><font color="#E5E5E5"> what a temporal address is</font>

508
00:18:06,350 --> 00:18:10,399
here on the screen<font color="#CCCCCC"> I have described a</font>

509
00:18:08,780 --> 00:18:12,980
temporal address<font color="#E5E5E5"> that has a capacity of</font>

510
00:18:10,400 --> 00:18:15,170
<font color="#E5E5E5">4 bytes</font><font color="#CCCCCC"> the period is</font><font color="#E5E5E5"> 1 second so it's</font>

511
00:18:12,980 --> 00:18:16,370
<font color="#E5E5E5">being updated every second and the scale</font>

512
00:18:15,170 --> 00:18:18,830
<font color="#CCCCCC">is measuring the</font><font color="#E5E5E5"> number of seconds since</font>

513
00:18:16,370 --> 00:18:20,810
1970 epoch<font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's break this down a</font>

514
00:18:18,830 --> 00:18:22,909
little<font color="#E5E5E5"> bit let's</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> the temporal state</font>

515
00:18:20,810 --> 00:18:23,990
within<font color="#CCCCCC"> this timer variable reaches the</font>

516
00:18:22,910 --> 00:18:26,990
number of seconds displayed on the

517
00:18:23,990 --> 00:18:28,760
screen<font color="#CCCCCC"> if we convert that to hex</font><font color="#E5E5E5"> we see</font>

518
00:18:26,990 --> 00:18:31,670
the number displayed<font color="#CCCCCC"> right over there if</font>

519
00:18:28,760 --> 00:18:33,650
we disassemble this through the bytes in

520
00:18:31,670 --> 00:18:35,879
it we<font color="#E5E5E5"> see that the</font><font color="#CCCCCC"> 5 for c2 actually</font>

521
00:18:33,650 --> 00:18:38,909
disassembles to<font color="#E5E5E5"> a push ESP ret</font>

522
00:18:35,879 --> 00:18:40,529
in combination<font color="#CCCCCC"> so what this is a foot</font>

523
00:18:38,909 --> 00:18:44,159
<font color="#CCCCCC">leant</font><font color="#E5E5E5"> to is it means that on Monday</font>

524
00:18:40,529 --> 00:18:46,739
January 9 2006 at 4:16 p.m.<font color="#E5E5E5"> this address</font>

525
00:18:44,159 --> 00:18:48,029
will contain<font color="#CCCCCC"> a universal assuming this</font>

526
00:18:46,739 --> 00:18:49,619
address is predictable<font color="#E5E5E5"> for every</font>

527
00:18:48,029 --> 00:18:51,659
operating<font color="#CCCCCC"> system version or</font><font color="#E5E5E5"> whatever the</font>

528
00:18:49,619 --> 00:18:54,839
case<font color="#E5E5E5"> may be</font><font color="#CCCCCC"> it will contain a universal</font>

529
00:18:51,659 --> 00:18:57,509
ESP<font color="#E5E5E5"> tui IP transition</font><font color="#CCCCCC"> so that's</font>

530
00:18:54,839 --> 00:18:59,849
<font color="#E5E5E5">basically what this breaks</font><font color="#CCCCCC"> down to</font><font color="#E5E5E5"> so</font>

531
00:18:57,509 --> 00:19:01,739
but one of<font color="#E5E5E5"> the gotchas here is that this</font>

532
00:18:59,849 --> 00:19:05,009
can<font color="#CCCCCC"> only be used for four</font><font color="#E5E5E5"> minutes and 16</font>

533
00:19:01,739 --> 00:19:07,379
seconds<font color="#E5E5E5"> so you know you got a little</font>

534
00:19:05,009 --> 00:19:09,419
window<font color="#CCCCCC"> of time</font><font color="#E5E5E5"> there to work with it</font><font color="#CCCCCC"> so</font>

535
00:19:07,379 --> 00:19:10,589
we've seen kind<font color="#E5E5E5"> of with that</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> that</font>

536
00:19:09,419 --> 00:19:12,690
previous<font color="#CCCCCC"> slide we've seen how these</font>

537
00:19:10,589 --> 00:19:14,099
<font color="#E5E5E5">simple addresses might be useful</font><font color="#CCCCCC"> but</font>

538
00:19:12,690 --> 00:19:16,019
<font color="#E5E5E5">they're they're</font><font color="#CCCCCC"> not going to</font><font color="#E5E5E5"> be useful</font>

539
00:19:14,099 --> 00:19:17,369
<font color="#E5E5E5">unless we can actually find some and not</font>

540
00:19:16,019 --> 00:19:19,619
only<font color="#CCCCCC"> that we have to</font><font color="#E5E5E5"> find ones that are</font>

541
00:19:17,369 --> 00:19:22,228
<font color="#E5E5E5">going to be universal</font><font color="#CCCCCC"> so how do we</font><font color="#E5E5E5"> go</font>

542
00:19:19,619 --> 00:19:23,668
about<font color="#E5E5E5"> this</font><font color="#CCCCCC"> well first let's take what we</font>

543
00:19:22,229 --> 00:19:25,529
know about<font color="#CCCCCC"> general</font><font color="#E5E5E5"> addresses we know</font>

544
00:19:23,669 --> 00:19:28,049
that they<font color="#E5E5E5"> have a capacity</font><font color="#CCCCCC"> a period</font><font color="#E5E5E5"> and a</font>

545
00:19:25,529 --> 00:19:30,419
scale<font color="#CCCCCC"> so how can</font><font color="#E5E5E5"> we use this</font><font color="#CCCCCC"> to identify</font>

546
00:19:28,049 --> 00:19:32,129
<font color="#E5E5E5">them well there are there</font><font color="#CCCCCC"> are a few</font>

547
00:19:30,419 --> 00:19:33,659
approaches you go about this I<font color="#E5E5E5"> mean</font>

548
00:19:32,129 --> 00:19:36,448
there's the<font color="#CCCCCC"> obvious one maybe I could</font>

549
00:19:33,659 --> 00:19:38,519
sit down<font color="#E5E5E5"> for a month manually analyze</font>

550
00:19:36,449 --> 00:19:40,199
the address space<font color="#E5E5E5"> and say okay I found</font>

551
00:19:38,519 --> 00:19:42,269
<font color="#CCCCCC">this region of memory</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> keeps</font><font color="#E5E5E5"> getting</font>

552
00:19:40,199 --> 00:19:44,489
updated<font color="#E5E5E5"> a constant time but I really</font>

553
00:19:42,269 --> 00:19:45,629
<font color="#CCCCCC">don't have that</font><font color="#E5E5E5"> much time</font><font color="#CCCCCC"> so other</font>

554
00:19:44,489 --> 00:19:47,879
things<font color="#E5E5E5"> you could do you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> break</font>

555
00:19:45,629 --> 00:19:50,099
point on time or related functions<font color="#CCCCCC"> you</font>

556
00:19:47,879 --> 00:19:51,569
could see maybe break on a time<font color="#CCCCCC"> function</font>

557
00:19:50,099 --> 00:19:54,059
and see where the<font color="#E5E5E5"> outputs being stored</font>

558
00:19:51,569 --> 00:19:55,589
<font color="#CCCCCC">that's not a bad approach but</font><font color="#E5E5E5"> you may</font>

559
00:19:54,059 --> 00:19:57,359
miss things<font color="#E5E5E5"> and it's also very tedious</font>

560
00:19:55,589 --> 00:19:59,729
<font color="#E5E5E5">maybe a manual process you could write a</font>

561
00:19:57,359 --> 00:20:01,859
program<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do it but you may</font><font color="#CCCCCC"> still miss</font>

562
00:19:59,729 --> 00:20:02,940
things but perhaps<font color="#CCCCCC"> a better</font><font color="#E5E5E5"> approach and</font>

563
00:20:01,859 --> 00:20:04,739
<font color="#E5E5E5">this is the one I'll be talking</font><font color="#CCCCCC"> about</font>

564
00:20:02,940 --> 00:20:06,359
here<font color="#E5E5E5"> today is you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> use a program</font>

565
00:20:04,739 --> 00:20:08,069
that<font color="#E5E5E5"> will</font><font color="#CCCCCC"> actually compare</font><font color="#E5E5E5"> the address</font>

566
00:20:06,359 --> 00:20:09,839
space differences over time<font color="#E5E5E5"> to find</font>

567
00:20:08,069 --> 00:20:12,299
<font color="#CCCCCC">patterns and that's</font><font color="#E5E5E5"> what we'll talk</font>

568
00:20:09,839 --> 00:20:13,708
about<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> focus on that the most</font>

569
00:20:12,299 --> 00:20:15,418
automatable way is going to be through

570
00:20:13,709 --> 00:20:18,869
dipping differencing the address space

571
00:20:15,419 --> 00:20:20,759
<font color="#E5E5E5">over constant periods so the way that</font>

572
00:20:18,869 --> 00:20:22,948
<font color="#CCCCCC">this would work</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> processes address</font>

573
00:20:20,759 --> 00:20:24,839
space would be<font color="#E5E5E5"> pulled in number of times</font>

574
00:20:22,949 --> 00:20:26,039
let's say<font color="#E5E5E5"> five so I'm just gonna I'm</font>

575
00:20:24,839 --> 00:20:29,009
gonna take slices<font color="#E5E5E5"> of the address space</font>

576
00:20:26,039 --> 00:20:30,719
<font color="#E5E5E5">five times and furthermore each of these</font>

577
00:20:29,009 --> 00:20:32,489
pulling cycles<font color="#E5E5E5"> the five times that I'm</font>

578
00:20:30,719 --> 00:20:34,019
<font color="#E5E5E5">pulling it will be spread apart</font><font color="#CCCCCC"> biased</font>

579
00:20:32,489 --> 00:20:36,179
<font color="#CCCCCC">at a constant number of seconds so our</font>

580
00:20:34,019 --> 00:20:37,709
<font color="#E5E5E5">period of time so to find this T so</font>

581
00:20:36,179 --> 00:20:39,899
let's say five seconds<font color="#E5E5E5"> that</font><font color="#CCCCCC"> means I'll</font>

582
00:20:37,709 --> 00:20:41,759
<font color="#CCCCCC">pull once</font><font color="#E5E5E5"> wait five seconds pull another</font>

583
00:20:39,899 --> 00:20:44,279
time wait five seconds<font color="#E5E5E5"> and so on until</font>

584
00:20:41,759 --> 00:20:47,219
I've completed<font color="#E5E5E5"> all my</font><font color="#CCCCCC"> pulling cycles so</font>

585
00:20:44,279 --> 00:20:49,650
each<font color="#E5E5E5"> time a</font><font color="#CCCCCC"> point cycle completes we</font>

586
00:20:47,219 --> 00:20:51,030
will difference the previous

587
00:20:49,650 --> 00:20:52,740
<font color="#E5E5E5">snapshot</font><font color="#CCCCCC"> of the process address space</font>

588
00:20:51,030 --> 00:20:54,810
with the current<font color="#CCCCCC"> snapshot of the process</font>

589
00:20:52,740 --> 00:20:56,580
address space and what we'll do is<font color="#CCCCCC"> we</font>

590
00:20:54,810 --> 00:20:58,560
will say<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it looks like this</font>

591
00:20:56,580 --> 00:21:01,620
<font color="#E5E5E5">location has changed</font><font color="#CCCCCC"> with edit at a</font>

592
00:20:58,560 --> 00:21:03,510
constant<font color="#E5E5E5"> interval over this</font><font color="#CCCCCC"> period of</font>

593
00:21:01,620 --> 00:21:04,800
<font color="#E5E5E5">time and that period of time the amount</font>

594
00:21:03,510 --> 00:21:07,170
of<font color="#E5E5E5"> change</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was made within that</font>

595
00:21:04,800 --> 00:21:10,320
variable is less than the polling cycle

596
00:21:07,170 --> 00:21:12,090
<font color="#CCCCCC">period so what</font><font color="#E5E5E5"> that breaks down to is</font>

597
00:21:10,320 --> 00:21:14,429
after<font color="#CCCCCC"> we've flagged all these different</font>

598
00:21:12,090 --> 00:21:16,439
addresses we can go back<font color="#CCCCCC"> and try to</font>

599
00:21:14,430 --> 00:21:18,510
<font color="#CCCCCC">calculate their capacity period and</font>

600
00:21:16,440 --> 00:21:19,950
scale based on<font color="#CCCCCC"> the constant amount</font><font color="#E5E5E5"> of</font>

601
00:21:18,510 --> 00:21:20,970
<font color="#CCCCCC">time that they've changed</font><font color="#E5E5E5"> and maybe a</font>

602
00:21:19,950 --> 00:21:23,700
couple other<font color="#E5E5E5"> attributes that are</font>

603
00:21:20,970 --> 00:21:25,590
involved<font color="#E5E5E5"> in it</font><font color="#CCCCCC"> so let's say for example</font>

604
00:21:23,700 --> 00:21:28,230
if an address<font color="#CCCCCC"> had its contents</font>

605
00:21:25,590 --> 00:21:30,270
incremented<font color="#CCCCCC"> by</font><font color="#E5E5E5"> 5,000 each cycle and T</font>

606
00:21:28,230 --> 00:21:31,590
was defined as being<font color="#E5E5E5"> five seconds this</font>

607
00:21:30,270 --> 00:21:34,170
<font color="#E5E5E5">could tell us</font><font color="#CCCCCC"> that the period</font><font color="#E5E5E5"> could</font><font color="#CCCCCC"> be</font>

608
00:21:31,590 --> 00:21:36,090
between<font color="#CCCCCC"> 1 and 1 mil 1 second</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 1</font>

609
00:21:34,170 --> 00:21:39,390
millisecond to give you<font color="#E5E5E5"> guys an idea of</font>

610
00:21:36,090 --> 00:21:41,250
how<font color="#CCCCCC"> that might work so here's an example</font>

611
00:21:39,390 --> 00:21:43,650
<font color="#E5E5E5">of a program</font><font color="#CCCCCC"> that I'll demonstrate here</font>

612
00:21:41,250 --> 00:21:46,110
<font color="#E5E5E5">later</font><font color="#CCCCCC"> for actually</font><font color="#E5E5E5"> doing this process</font>

613
00:21:43,650 --> 00:21:47,850
<font color="#E5E5E5">called</font><font color="#CCCCCC"> telescope and what</font><font color="#E5E5E5"> this will do</font>

614
00:21:46,110 --> 00:21:49,439
is<font color="#CCCCCC"> this will</font><font color="#E5E5E5"> attach</font><font color="#CCCCCC"> to a process and</font>

615
00:21:47,850 --> 00:21:51,480
simply do the<font color="#CCCCCC"> poling of the address</font>

616
00:21:49,440 --> 00:21:53,460
<font color="#E5E5E5">space and the output that</font><font color="#CCCCCC"> you see here</font>

617
00:21:51,480 --> 00:21:55,980
is this is<font color="#CCCCCC"> a program</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> all I was</font>

618
00:21:53,460 --> 00:21:58,860
doing it<font color="#E5E5E5"> was a wild</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> simply</font>

619
00:21:55,980 --> 00:22:00,600
<font color="#E5E5E5">storing the output</font><font color="#CCCCCC"> of time</font><font color="#E5E5E5"> in a local</font>

620
00:21:58,860 --> 00:22:02,250
variable<font color="#CCCCCC"> so and it was sleep for one</font>

621
00:22:00,600 --> 00:22:04,169
second<font color="#E5E5E5"> so every second it was updating</font>

622
00:22:02,250 --> 00:22:07,770
<font color="#E5E5E5">this local variable with the output of</font>

623
00:22:04,170 --> 00:22:09,270
<font color="#E5E5E5">time and as you see it identified on the</font>

624
00:22:07,770 --> 00:22:12,750
stack those lower addresses<font color="#CCCCCC"> are stack</font>

625
00:22:09,270 --> 00:22:16,350
addresses that<font color="#E5E5E5"> there is a capacity of 4</font>

626
00:22:12,750 --> 00:22:17,850
bytes<font color="#CCCCCC"> a scale since</font><font color="#E5E5E5"> epoch 1970 and the</font>

627
00:22:16,350 --> 00:22:19,889
period<font color="#E5E5E5"> being one second that was found</font>

628
00:22:17,850 --> 00:22:21,540
at<font color="#E5E5E5"> that location so the this could be</font>

629
00:22:19,890 --> 00:22:23,640
used<font color="#CCCCCC"> to</font><font color="#E5E5E5"> identify that specific temporal</font>

630
00:22:21,540 --> 00:22:25,050
address and the other things<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font>

631
00:22:23,640 --> 00:22:27,750
<font color="#E5E5E5">see here this program is not foolproof</font>

632
00:22:25,050 --> 00:22:29,669
<font color="#CCCCCC">it's just simply meant</font><font color="#E5E5E5"> to help reduce</font>

633
00:22:27,750 --> 00:22:31,710
<font color="#E5E5E5">the potential ones that you want to look</font>

634
00:22:29,670 --> 00:22:33,150
<font color="#E5E5E5">through so you may get some outliers and</font>

635
00:22:31,710 --> 00:22:35,100
ones<font color="#E5E5E5"> that you want to ignore but it does</font>

636
00:22:33,150 --> 00:22:36,390
reduce<font color="#E5E5E5"> it quite substantially and there</font>

637
00:22:35,100 --> 00:22:38,280
are two other addresses<font color="#E5E5E5"> that you see up</font>

638
00:22:36,390 --> 00:22:39,660
there<font color="#E5E5E5"> down below</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> these are the ones</font>

639
00:22:38,280 --> 00:22:43,200
<font color="#CCCCCC">that we're going to talk about</font><font color="#E5E5E5"> later as</font>

640
00:22:39,660 --> 00:22:44,550
being pretty interesting so once<font color="#CCCCCC"> we</font>

641
00:22:43,200 --> 00:22:46,380
found these temporal addresses once you

642
00:22:44,550 --> 00:22:48,629
use this<font color="#CCCCCC"> program to find</font><font color="#E5E5E5"> them that's</font>

643
00:22:46,380 --> 00:22:50,250
<font color="#E5E5E5">really only the first step</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font>

644
00:22:48,630 --> 00:22:51,810
thing that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have to do is we have to</font>

645
00:22:50,250 --> 00:22:53,250
<font color="#CCCCCC">calculate how long is it going to</font><font color="#E5E5E5"> take</font>

646
00:22:51,810 --> 00:22:55,290
for<font color="#E5E5E5"> each of the bytes within the</font>

647
00:22:53,250 --> 00:22:57,840
temporal state to change<font color="#E5E5E5"> and this is</font>

648
00:22:55,290 --> 00:22:59,310
important as you'll see<font color="#E5E5E5"> basically the</font>

649
00:22:57,840 --> 00:23:01,620
<font color="#CCCCCC">way that this will go about working is</font>

650
00:22:59,310 --> 00:23:02,760
we know<font color="#E5E5E5"> that each byte has 256</font>

651
00:23:01,620 --> 00:23:05,250
combinations

652
00:23:02,760 --> 00:23:07,530
through<font color="#CCCCCC"> FF</font><font color="#E5E5E5"> calculating the iterations</font>

653
00:23:05,250 --> 00:23:10,110
between<font color="#E5E5E5"> each by index</font><font color="#CCCCCC"> X is simply</font>

654
00:23:07,530 --> 00:23:12,240
<font color="#E5E5E5">described as 256 to the power of X where</font>

655
00:23:10,110 --> 00:23:14,428
the<font color="#CCCCCC"> byte index starts at</font><font color="#E5E5E5"> 0 so provide</font>

656
00:23:12,240 --> 00:23:17,040
index 0 we know it takes<font color="#E5E5E5"> one iteration</font>

657
00:23:14,429 --> 00:23:18,750
for that to change<font color="#CCCCCC"> every</font><font color="#E5E5E5"> time so 256</font><font color="#CCCCCC"> to</font>

658
00:23:17,040 --> 00:23:19,799
the power<font color="#E5E5E5"> of 0 is 1</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so on</font>

659
00:23:18,750 --> 00:23:21,059
you do the<font color="#CCCCCC"> math from there and</font><font color="#E5E5E5"> you get</font>

660
00:23:19,799 --> 00:23:22,350
<font color="#E5E5E5">the</font><font color="#CCCCCC"> number of iterations</font><font color="#E5E5E5"> that take this</font>

661
00:23:21,059 --> 00:23:24,330
is just a constant<font color="#E5E5E5"> number the number of</font>

662
00:23:22,350 --> 00:23:26,909
iterations it takes to<font color="#E5E5E5"> change each byte</font>

663
00:23:24,330 --> 00:23:29,340
index and then furthermore if we<font color="#E5E5E5"> know</font>

664
00:23:26,910 --> 00:23:31,530
the period<font color="#E5E5E5"> of a temporal address we can</font>

665
00:23:29,340 --> 00:23:33,389
<font color="#CCCCCC">calculate how long in a matter of</font>

666
00:23:31,530 --> 00:23:36,059
seconds<font color="#E5E5E5"> it will take for each byte index</font>

667
00:23:33,390 --> 00:23:37,650
to change<font color="#E5E5E5"> simply by taking the duration</font>

668
00:23:36,059 --> 00:23:39,928
the<font color="#E5E5E5"> number of iterations for each byte</font>

669
00:23:37,650 --> 00:23:41,280
<font color="#CCCCCC">index</font><font color="#E5E5E5"> and dividing it</font><font color="#CCCCCC"> by the</font><font color="#E5E5E5"> period and</font>

670
00:23:39,929 --> 00:23:43,290
<font color="#E5E5E5">that will produce the</font><font color="#CCCCCC"> number of seconds</font>

671
00:23:41,280 --> 00:23:45,418
for<font color="#E5E5E5"> that byte index so to give you guys</font>

672
00:23:43,290 --> 00:23:46,770
an example<font color="#E5E5E5"> of how this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> work we'll see</font>

673
00:23:45,419 --> 00:23:49,410
that on the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> slide</font><font color="#E5E5E5"> but an important</font>

674
00:23:46,770 --> 00:23:51,030
note is these calculations are<font color="#CCCCCC"> very</font>

675
00:23:49,410 --> 00:23:52,620
<font color="#E5E5E5">important</font><font color="#CCCCCC"> because this is going</font><font color="#E5E5E5"> to be</font>

676
00:23:51,030 --> 00:23:54,720
used to<font color="#E5E5E5"> tell</font><font color="#CCCCCC"> us which byte index we</font>

677
00:23:52,620 --> 00:23:57,270
should start at for<font color="#E5E5E5"> instance on this</font>

678
00:23:54,720 --> 00:23:59,309
slide<font color="#E5E5E5"> this is a script</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was written</font>

679
00:23:57,270 --> 00:24:00,510
to<font color="#E5E5E5"> generate these time intervals and</font><font color="#CCCCCC"> do</font>

680
00:23:59,309 --> 00:24:03,210
some other calculations that<font color="#E5E5E5"> you'll see</font>

681
00:24:00,510 --> 00:24:04,919
<font color="#E5E5E5">later</font><font color="#CCCCCC"> but basically the output</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> was</font>

682
00:24:03,210 --> 00:24:06,660
<font color="#E5E5E5">for a</font><font color="#CCCCCC"> four byte capacity temporal</font>

683
00:24:04,919 --> 00:24:07,830
address that's<font color="#E5E5E5"> updated every second it's</font>

684
00:24:06,660 --> 00:24:10,380
measuring<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> seconds since</font>

685
00:24:07,830 --> 00:24:12,510
1970 in the<font color="#E5E5E5"> scale</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> output we see</font>

686
00:24:10,380 --> 00:24:14,429
<font color="#E5E5E5">here is that we see</font><font color="#CCCCCC"> that byte index</font><font color="#E5E5E5"> 0 is</font>

687
00:24:12,510 --> 00:24:16,590
updated every<font color="#CCCCCC"> 1 second</font><font color="#E5E5E5"> as we would</font>

688
00:24:14,429 --> 00:24:17,250
expect<font color="#CCCCCC"> because that period is defined as</font>

689
00:24:16,590 --> 00:24:19,168
<font color="#CCCCCC">1 second</font>

690
00:24:17,250 --> 00:24:21,510
furthermore byte index 1 is updated

691
00:24:19,169 --> 00:24:24,510
every<font color="#CCCCCC"> 4 minutes in 16 seconds</font><font color="#E5E5E5"> and so on</font>

692
00:24:21,510 --> 00:24:26,910
and so forth the important<font color="#E5E5E5"> aspect of</font>

693
00:24:24,510 --> 00:24:28,530
<font color="#E5E5E5">this is that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> will tell</font><font color="#CCCCCC"> us which byte</font>

694
00:24:26,910 --> 00:24:31,350
index<font color="#CCCCCC"> we would want</font><font color="#E5E5E5"> to start our search</font>

695
00:24:28,530 --> 00:24:33,870
at<font color="#E5E5E5"> for viable optos you know we the end</font>

696
00:24:31,350 --> 00:24:35,760
goal here<font color="#E5E5E5"> is we want to find a jump ESP</font>

697
00:24:33,870 --> 00:24:37,559
or another instruction somewhere<font color="#E5E5E5"> within</font>

698
00:24:35,760 --> 00:24:39,480
the temporal<font color="#E5E5E5"> estate at a specific window</font>

699
00:24:37,559 --> 00:24:40,740
<font color="#E5E5E5">of time but in order to do that we have</font>

700
00:24:39,480 --> 00:24:42,419
to figure out where we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> start our</font>

701
00:24:40,740 --> 00:24:44,730
<font color="#E5E5E5">search from it really doesn't make any</font>

702
00:24:42,419 --> 00:24:46,620
<font color="#E5E5E5">sense</font><font color="#CCCCCC"> if the byte is changing every 1</font>

703
00:24:44,730 --> 00:24:49,530
second to use that as the<font color="#CCCCCC"> starting point</font>

704
00:24:46,620 --> 00:24:50,699
<font color="#E5E5E5">for our search because there's no way in</font>

705
00:24:49,530 --> 00:24:52,500
our exploit that<font color="#E5E5E5"> we're probably gonna be</font>

706
00:24:50,700 --> 00:24:54,900
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to get a granularity of a</font><font color="#CCCCCC"> 1 second</font>

707
00:24:52,500 --> 00:24:57,000
window<font color="#E5E5E5"> it's just not going to happen</font><font color="#CCCCCC"> but</font>

708
00:24:54,900 --> 00:24:59,460
more realistically we may be<font color="#CCCCCC"> able to get</font>

709
00:24:57,000 --> 00:25:01,530
a<font color="#CCCCCC"> 4 minute and 16 seconds oh</font><font color="#E5E5E5"> that</font>

710
00:24:59,460 --> 00:25:04,230
doesn't<font color="#E5E5E5"> sound too infeasible</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> this</font>

711
00:25:01,530 --> 00:25:05,760
case the output tells us that for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> 4</font>

712
00:25:04,230 --> 00:25:07,049
byte capacity one second period

713
00:25:05,760 --> 00:25:09,540
<font color="#CCCCCC">measuring the number of seconds</font><font color="#E5E5E5"> since</font>

714
00:25:07,049 --> 00:25:11,490
1970 temporal address<font color="#CCCCCC"> we'll want to</font>

715
00:25:09,540 --> 00:25:14,668
start our search for viable optos at

716
00:25:11,490 --> 00:25:16,990
<font color="#E5E5E5">Biden</font><font color="#CCCCCC"> index</font><font color="#E5E5E5"> 1 so let's review what we</font>

717
00:25:14,669 --> 00:25:19,510
<font color="#CCCCCC">have so</font><font color="#E5E5E5"> far we</font><font color="#CCCCCC"> figured</font><font color="#E5E5E5"> out the</font>

718
00:25:16,990 --> 00:25:21,910
dresses<font color="#E5E5E5"> have a capacity period and scale</font>

719
00:25:19,510 --> 00:25:24,280
<font color="#CCCCCC">and we also know the duration of each</font>

720
00:25:21,910 --> 00:25:26,770
<font color="#CCCCCC">bite within the temporal</font><font color="#E5E5E5"> address based</font>

721
00:25:24,280 --> 00:25:28,420
on that<font color="#E5E5E5"> period so what does that allow</font>

722
00:25:26,770 --> 00:25:30,010
<font color="#CCCCCC">us to do</font><font color="#E5E5E5"> well now we can predict the</font>

723
00:25:28,420 --> 00:25:32,170
future<font color="#CCCCCC"> so how</font><font color="#E5E5E5"> are we</font><font color="#CCCCCC"> gonna go</font><font color="#E5E5E5"> about</font>

724
00:25:30,010 --> 00:25:33,760
<font color="#CCCCCC">doing that</font><font color="#E5E5E5"> well first before we can</font>

725
00:25:32,170 --> 00:25:36,280
predict the<font color="#CCCCCC"> future</font><font color="#E5E5E5"> we want to try to</font>

726
00:25:33,760 --> 00:25:37,510
figure<font color="#E5E5E5"> out what is our viable opto set</font>

727
00:25:36,280 --> 00:25:39,160
what<font color="#E5E5E5"> are the opcodes that we can use</font>

728
00:25:37,510 --> 00:25:42,070
<font color="#E5E5E5">maybe for the specific vulnerability in</font>

729
00:25:39,160 --> 00:25:44,080
question<font color="#E5E5E5"> or something else in order to</font>

730
00:25:42,070 --> 00:25:45,399
<font color="#E5E5E5">leverage control of execution flow I</font>

731
00:25:44,080 --> 00:25:46,870
mean the end result<font color="#E5E5E5"> is we're using this</font>

732
00:25:45,400 --> 00:25:48,280
as<font color="#CCCCCC"> a return address so there</font><font color="#E5E5E5"> are only</font>

733
00:25:46,870 --> 00:25:50,530
going to be specific instructions that

734
00:25:48,280 --> 00:25:51,940
<font color="#CCCCCC">we can use to take control so maybe for</font>

735
00:25:50,530 --> 00:25:54,399
the stack overflow we're using a jump

736
00:25:51,940 --> 00:25:56,080
<font color="#E5E5E5">ESP or some other instruction so we'll</font>

737
00:25:54,400 --> 00:25:57,940
<font color="#CCCCCC">identify those</font><font color="#E5E5E5"> op codes break them down</font>

738
00:25:56,080 --> 00:26:00,280
the actual<font color="#E5E5E5"> bytes that</font><font color="#CCCCCC"> could compose the</font>

739
00:25:57,940 --> 00:26:02,110
instructions<font color="#E5E5E5"> and we'll use those when</font>

740
00:26:00,280 --> 00:26:04,600
we're doing our search so once we've

741
00:26:02,110 --> 00:26:06,580
identified<font color="#E5E5E5"> our set we can simply use the</font>

742
00:26:04,600 --> 00:26:07,990
attributes of the temporal address as

743
00:26:06,580 --> 00:26:10,120
well<font color="#E5E5E5"> as how long it takes</font><font color="#CCCCCC"> for each</font><font color="#E5E5E5"> byte</font>

744
00:26:07,990 --> 00:26:11,710
to change<font color="#E5E5E5"> as well as our opcode set to</font>

745
00:26:10,120 --> 00:26:13,510
generate all<font color="#E5E5E5"> the possible permutations</font>

746
00:26:11,710 --> 00:26:14,400
<font color="#E5E5E5">within the timer state that could</font><font color="#CCCCCC"> be</font>

747
00:26:13,510 --> 00:26:17,590
<font color="#E5E5E5">useful to us</font>

748
00:26:14,400 --> 00:26:19,750
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> algorithm to go about this it's</font>

749
00:26:17,590 --> 00:26:21,340
pretty<font color="#E5E5E5"> simple basically the way</font><font color="#CCCCCC"> that I</font>

750
00:26:19,750 --> 00:26:23,230
<font color="#E5E5E5">went about</font><font color="#CCCCCC"> it is you take your viable</font>

751
00:26:21,340 --> 00:26:24,879
<font color="#E5E5E5">opioid bytes and you plug them in at</font>

752
00:26:23,230 --> 00:26:27,130
each<font color="#CCCCCC"> binding index starting at the</font>

753
00:26:24,880 --> 00:26:28,960
predetermined<font color="#E5E5E5"> first byte index so for</font>

754
00:26:27,130 --> 00:26:30,580
the previous slide<font color="#E5E5E5"> we saw that we wanted</font>

755
00:26:28,960 --> 00:26:32,170
<font color="#E5E5E5">to start at byte index</font><font color="#CCCCCC"> one because it</font>

756
00:26:30,580 --> 00:26:34,899
had a window<font color="#E5E5E5"> of four minutes and 16</font>

757
00:26:32,170 --> 00:26:36,730
seconds so<font color="#CCCCCC"> we'd start plugging in our</font>

758
00:26:34,900 --> 00:26:38,830
bytes<font color="#E5E5E5"> to that position</font><font color="#CCCCCC"> so for instance</font>

759
00:26:36,730 --> 00:26:40,870
if we<font color="#E5E5E5"> had a temporal address that had a</font>

760
00:26:38,830 --> 00:26:43,689
<font color="#CCCCCC">one-second period we'd say</font><font color="#E5E5E5"> okay well I</font>

761
00:26:40,870 --> 00:26:45,459
have<font color="#E5E5E5"> a jump</font><font color="#CCCCCC"> bsp</font><font color="#E5E5E5"> FFP for well the first</font>

762
00:26:43,690 --> 00:26:47,110
byte I'm going to plug in at bidented x1

763
00:26:45,460 --> 00:26:49,000
and the second byte I'm gonna plug in a

764
00:26:47,110 --> 00:26:50,530
byte<font color="#E5E5E5"> in x2 and from there I'm gonna</font>

765
00:26:49,000 --> 00:26:52,450
<font color="#E5E5E5">generate all the permutations that</font>

766
00:26:50,530 --> 00:26:56,559
contain<font color="#E5E5E5"> those bytes so for instance it</font>

767
00:26:52,450 --> 00:26:57,760
would be FF<font color="#E5E5E5"> e 4 0 0 FF e 4 1 or 0 1 and</font>

768
00:26:56,559 --> 00:26:59,050
<font color="#E5E5E5">then so</font><font color="#CCCCCC"> on and</font><font color="#E5E5E5"> so forth you generate all</font>

769
00:26:57,760 --> 00:27:01,750
<font color="#CCCCCC">the permutations that contain</font><font color="#E5E5E5"> those</font>

770
00:26:59,050 --> 00:27:04,510
bytes<font color="#E5E5E5"> and furthermore you go then on to</font>

771
00:27:01,750 --> 00:27:06,370
the<font color="#E5E5E5"> next byte index</font><font color="#CCCCCC"> you say ok well now</font>

772
00:27:04,510 --> 00:27:09,160
byte<font color="#CCCCCC"> index</font><font color="#E5E5E5"> to generate me all the</font>

773
00:27:06,370 --> 00:27:11,500
permutations<font color="#E5E5E5"> that contain FF and E 4 and</font>

774
00:27:09,160 --> 00:27:13,360
that will then<font color="#CCCCCC"> in the end</font><font color="#E5E5E5"> result produce</font>

775
00:27:11,500 --> 00:27:17,620
all of the timer<font color="#E5E5E5"> States</font><font color="#CCCCCC"> dual</font><font color="#E5E5E5"> contain</font>

776
00:27:13,360 --> 00:27:19,090
these viable bytes<font color="#E5E5E5"> so the end result at</font>

777
00:27:17,620 --> 00:27:21,159
<font color="#E5E5E5">the very end we have all the timer</font>

778
00:27:19,090 --> 00:27:22,809
states<font color="#CCCCCC"> that we could possibly use that</font>

779
00:27:21,160 --> 00:27:25,630
contain<font color="#CCCCCC"> all these viable</font><font color="#E5E5E5"> opto for</font>

780
00:27:22,809 --> 00:27:27,580
purpose of exploitation<font color="#E5E5E5"> so once we've</font>

781
00:27:25,630 --> 00:27:29,770
done this after we've calculated all<font color="#CCCCCC"> the</font>

782
00:27:27,580 --> 00:27:30,809
permutations<font color="#CCCCCC"> well now we</font><font color="#E5E5E5"> have basically</font>

783
00:27:29,770 --> 00:27:33,210
<font color="#CCCCCC">all we need to</font><font color="#E5E5E5"> know</font>

784
00:27:30,809 --> 00:27:35,100
but we really<font color="#E5E5E5"> need to figure out when to</font>

785
00:27:33,210 --> 00:27:37,110
strike<font color="#CCCCCC"> I mean this is all hinging</font><font color="#E5E5E5"> on</font>

786
00:27:35,100 --> 00:27:39,120
time right<font color="#CCCCCC"> so we're gonna have</font><font color="#E5E5E5"> to figure</font>

787
00:27:37,110 --> 00:27:42,600
<font color="#CCCCCC">out the time on the person's computer</font><font color="#E5E5E5"> so</font>

788
00:27:39,120 --> 00:27:45,389
picking the time to strike what we need

789
00:27:42,600 --> 00:27:46,918
to do is we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to know the location or</font>

790
00:27:45,389 --> 00:27:48,600
we knowing that we know the<font color="#E5E5E5"> future</font>

791
00:27:46,919 --> 00:27:50,700
location<font color="#CCCCCC"> eight states of a temporal</font>

792
00:27:48,600 --> 00:27:53,100
address<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> don't know the time</font><font color="#E5E5E5"> on</font>

793
00:27:50,700 --> 00:27:54,230
the person's<font color="#E5E5E5"> computer so what we're</font>

794
00:27:53,100 --> 00:27:56,668
<font color="#E5E5E5">going to do is we're going to go about</font>

795
00:27:54,230 --> 00:27:58,470
<font color="#E5E5E5">figuring out how to determine system</font>

796
00:27:56,669 --> 00:28:00,720
time or<font color="#E5E5E5"> whatever the unit of measure is</font>

797
00:27:58,470 --> 00:28:03,029
that<font color="#CCCCCC"> the scale is a is indicating so for</font>

798
00:28:00,720 --> 00:28:04,169
instance if the scale for<font color="#E5E5E5"> the temple</font>

799
00:28:03,029 --> 00:28:06,330
address<font color="#E5E5E5"> that we're working with is</font>

800
00:28:04,169 --> 00:28:07,889
measuring the<font color="#CCCCCC"> amount of system time or</font>

801
00:28:06,330 --> 00:28:08,879
<font color="#CCCCCC">it's measuring system time</font><font color="#E5E5E5"> then what</font>

802
00:28:07,889 --> 00:28:10,049
we're going<font color="#E5E5E5"> to need to</font><font color="#CCCCCC"> know is we</font><font color="#E5E5E5"> need</font>

803
00:28:08,879 --> 00:28:12,059
to know the time on the person's

804
00:28:10,049 --> 00:28:13,529
computer<font color="#CCCCCC"> furthermore if the</font><font color="#E5E5E5"> scale is</font>

805
00:28:12,059 --> 00:28:14,580
<font color="#CCCCCC">maybe measuring the number</font><font color="#E5E5E5"> of seconds</font>

806
00:28:13,529 --> 00:28:16,110
<font color="#CCCCCC">that occurred since the program started</font>

807
00:28:14,580 --> 00:28:17,789
<font color="#E5E5E5">well then we're going to need to know</font>

808
00:28:16,110 --> 00:28:19,289
<font color="#CCCCCC">what the program</font><font color="#E5E5E5"> started if we can't</font>

809
00:28:17,789 --> 00:28:20,789
determine these things then we're really

810
00:28:19,289 --> 00:28:22,860
<font color="#E5E5E5">not going to be able to make use of this</font>

811
00:28:20,789 --> 00:28:23,580
stuff<font color="#E5E5E5"> because</font><font color="#CCCCCC"> although we know when we</font>

812
00:28:22,860 --> 00:28:26,129
could strike

813
00:28:23,580 --> 00:28:27,330
we won't know actually what you know the

814
00:28:26,129 --> 00:28:29,158
window of time is on the person's

815
00:28:27,330 --> 00:28:31,199
computer<font color="#E5E5E5"> to actually</font><font color="#CCCCCC"> make this work so</font>

816
00:28:29,159 --> 00:28:32,759
the latter<font color="#CCCCCC"> example here measuring the</font>

817
00:28:31,200 --> 00:28:34,200
numbers you know time since the program

818
00:28:32,759 --> 00:28:36,210
started<font color="#CCCCCC"> that may</font><font color="#E5E5E5"> actually be</font><font color="#CCCCCC"> a little</font>

819
00:28:34,200 --> 00:28:37,139
unfeasible<font color="#CCCCCC"> I mean I don't know</font><font color="#E5E5E5"> of a</font><font color="#CCCCCC"> way</font>

820
00:28:36,210 --> 00:28:38,940
that<font color="#CCCCCC"> you could probably reliably</font>

821
00:28:37,139 --> 00:28:40,080
determine maybe<font color="#CCCCCC"> application-specific</font><font color="#E5E5E5"> how</font>

822
00:28:38,940 --> 00:28:42,659
long it's been since<font color="#CCCCCC"> the program started</font>

823
00:28:40,080 --> 00:28:45,269
<font color="#CCCCCC">but determining system time</font><font color="#E5E5E5"> and it's</font>

824
00:28:42,659 --> 00:28:46,529
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> easy</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna go through</font>

825
00:28:45,269 --> 00:28:48,629
a few<font color="#CCCCCC"> examples here but keep</font><font color="#E5E5E5"> in mind</font>

826
00:28:46,529 --> 00:28:50,789
<font color="#E5E5E5">that the examples that I list are just</font>

827
00:28:48,629 --> 00:28:51,809
<font color="#E5E5E5">tip of the iceberg</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> if you'd be</font>

828
00:28:50,789 --> 00:28:53,460
creative if you could probably call

829
00:28:51,809 --> 00:28:55,918
<font color="#E5E5E5">somebody</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> and say</font><font color="#CCCCCC"> uh what time is it</font>

830
00:28:53,460 --> 00:28:57,629
<font color="#E5E5E5">and they'll come</font><font color="#CCCCCC"> back and say oh you</font>

831
00:28:55,919 --> 00:29:00,869
<font color="#CCCCCC">know it's</font><font color="#E5E5E5"> this they're not gonna be rude</font>

832
00:28:57,629 --> 00:29:01,949
so so these are<font color="#E5E5E5"> just some examples</font><font color="#CCCCCC"> of</font>

833
00:29:00,869 --> 00:29:03,090
<font color="#E5E5E5">how you can do it remotely</font><font color="#CCCCCC"> without</font>

834
00:29:01,950 --> 00:29:07,110
having to do some kind of social

835
00:29:03,090 --> 00:29:09,090
<font color="#E5E5E5">engineering so one example is dce/rpc</font><font color="#CCCCCC"> it</font>

836
00:29:07,110 --> 00:29:10,649
has a function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can call on the</font>

837
00:29:09,090 --> 00:29:12,149
person's<font color="#CCCCCC"> computer called nit our remote</font>

838
00:29:10,649 --> 00:29:13,529
time of day<font color="#E5E5E5"> and this will</font><font color="#CCCCCC"> actually</font>

839
00:29:12,149 --> 00:29:16,080
return things like the time zone

840
00:29:13,529 --> 00:29:17,369
milliseconds<font color="#E5E5E5"> hours seconds</font><font color="#CCCCCC"> all the</font>

841
00:29:16,080 --> 00:29:19,230
things<font color="#CCCCCC"> that you would need to be able</font><font color="#E5E5E5"> to</font>

842
00:29:17,369 --> 00:29:20,369
extrapolate<font color="#E5E5E5"> what the time you know what</font>

843
00:29:19,230 --> 00:29:21,600
<font color="#E5E5E5">the current time is on the person's</font>

844
00:29:20,369 --> 00:29:23,189
computer<font color="#E5E5E5"> giving you enough information</font>

845
00:29:21,600 --> 00:29:25,889
to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> predict when you should</font>

846
00:29:23,190 --> 00:29:28,289
when you should strike<font color="#E5E5E5"> another great</font>

847
00:29:25,889 --> 00:29:30,090
<font color="#CCCCCC">example let's say you're trying to</font><font color="#E5E5E5"> use</font>

848
00:29:28,289 --> 00:29:33,419
an exploit in iOS<font color="#CCCCCC"> or some other web</font>

849
00:29:30,090 --> 00:29:34,949
server<font color="#CCCCCC"> well it's it's handy because the</font>

850
00:29:33,419 --> 00:29:36,749
<font color="#CCCCCC">HTTP server you know will readily</font>

851
00:29:34,950 --> 00:29:37,950
provide you with the date<font color="#E5E5E5"> all you have</font>

852
00:29:36,749 --> 00:29:39,029
<font color="#E5E5E5">to do is connect to it send ahead</font>

853
00:29:37,950 --> 00:29:41,279
<font color="#CCCCCC">requests and you'll</font><font color="#E5E5E5"> tell you what the</font>

854
00:29:39,029 --> 00:29:42,509
<font color="#E5E5E5">data is on that machine</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a</font>

855
00:29:41,279 --> 00:29:44,160
great example<font color="#E5E5E5"> of one</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you could use</font>

856
00:29:42,509 --> 00:29:45,690
<font color="#E5E5E5">that that's your specific target</font>

857
00:29:44,160 --> 00:29:47,430
<font color="#CCCCCC">there are lots of other ways that you</font>

858
00:29:45,690 --> 00:29:50,550
<font color="#E5E5E5">can go about</font><font color="#CCCCCC"> doing this just a few -</font>

859
00:29:47,430 --> 00:29:52,500
<font color="#E5E5E5">list ICP timestamps and IP timestamps</font>

860
00:29:50,550 --> 00:29:55,110
<font color="#CCCCCC">these don't</font><font color="#E5E5E5"> actually give you the full</font>

861
00:29:52,500 --> 00:29:56,610
time on the person's computer<font color="#E5E5E5"> but they</font>

862
00:29:55,110 --> 00:29:58,679
do give you<font color="#CCCCCC"> the number</font><font color="#E5E5E5"> of milliseconds I</font>

863
00:29:56,610 --> 00:30:00,179
believe since midnight<font color="#E5E5E5"> UT so that's the</font>

864
00:29:58,680 --> 00:30:01,530
current<font color="#CCCCCC"> day</font><font color="#E5E5E5"> the number of milliseconds</font>

865
00:30:00,180 --> 00:30:04,530
to have elapsed<font color="#CCCCCC"> since</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> current day</font>

866
00:30:01,530 --> 00:30:06,780
<font color="#CCCCCC">while that doesn't</font><font color="#E5E5E5"> give you the</font><font color="#CCCCCC"> grant</font>

867
00:30:04,530 --> 00:30:08,910
the higher granularity about the day the

868
00:30:06,780 --> 00:30:10,830
month<font color="#CCCCCC"> all that stuff</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can probably be</font>

869
00:30:08,910 --> 00:30:13,800
smart<font color="#E5E5E5"> and say well I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> assume that</font>

870
00:30:10,830 --> 00:30:15,090
<font color="#CCCCCC">the person</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> the day set correctly but</font>

871
00:30:13,800 --> 00:30:16,980
now I have enough information<font color="#E5E5E5"> to</font>

872
00:30:15,090 --> 00:30:18,360
determine the<font color="#CCCCCC"> full time state based on</font>

873
00:30:16,980 --> 00:30:20,520
the number<font color="#CCCCCC"> of milliseconds that have</font>

874
00:30:18,360 --> 00:30:22,169
elapsed since<font color="#E5E5E5"> midnight so you</font><font color="#CCCCCC"> can use</font>

875
00:30:20,520 --> 00:30:23,580
this partial<font color="#CCCCCC"> information to build</font><font color="#E5E5E5"> a</font>

876
00:30:22,170 --> 00:30:26,370
complete picture and then use that<font color="#E5E5E5"> for</font>

877
00:30:23,580 --> 00:30:29,159
<font color="#CCCCCC">the purpose of exploitation</font><font color="#E5E5E5"> other ones</font>

878
00:30:26,370 --> 00:30:30,870
people<font color="#CCCCCC"> familiar with IRC</font><font color="#E5E5E5"> you can use a</font>

879
00:30:29,160 --> 00:30:32,790
<font color="#E5E5E5">certain method of getting time through</font>

880
00:30:30,870 --> 00:30:34,679
<font color="#E5E5E5">that as</font><font color="#CCCCCC"> well as</font><font color="#E5E5E5"> the cylinder go she</font>

881
00:30:32,790 --> 00:30:36,840
answers are more<font color="#E5E5E5"> than happy to provide</font>

882
00:30:34,680 --> 00:30:39,150
time<font color="#CCCCCC"> information and the list</font><font color="#E5E5E5"> really</font>

883
00:30:36,840 --> 00:30:41,490
goes on<font color="#CCCCCC"> be</font><font color="#E5E5E5"> creative</font><font color="#CCCCCC"> there are a lot more</font>

884
00:30:39,150 --> 00:30:43,650
that<font color="#E5E5E5"> you could find so this brings us</font><font color="#CCCCCC"> on</font>

885
00:30:41,490 --> 00:30:45,090
<font color="#E5E5E5">to the case study</font><font color="#CCCCCC"> and this is going to</font>

886
00:30:43,650 --> 00:30:46,830
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> show you a real</font><font color="#E5E5E5"> world example</font>

887
00:30:45,090 --> 00:30:48,659
where this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> topic in this</font>

888
00:30:46,830 --> 00:30:50,040
presentation<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be applied and</font><font color="#E5E5E5"> this is</font>

889
00:30:48,660 --> 00:30:52,860
going to be in Windows NT shared user

890
00:30:50,040 --> 00:30:54,210
data<font color="#CCCCCC"> so what is shared user data</font><font color="#E5E5E5"> a lot</font>

891
00:30:52,860 --> 00:30:56,459
<font color="#CCCCCC">of</font><font color="#E5E5E5"> people here might be familiar with it</font>

892
00:30:54,210 --> 00:30:59,430
<font color="#E5E5E5">I'm just</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> describe it anyway so I</font>

893
00:30:56,460 --> 00:31:00,870
bear with me<font color="#E5E5E5"> it's shared region and</font>

894
00:30:59,430 --> 00:31:02,790
memory<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> going to be mapped into</font>

895
00:31:00,870 --> 00:31:04,260
<font color="#CCCCCC">everyone thirty-two process</font><font color="#E5E5E5"> it's located</font>

896
00:31:02,790 --> 00:31:05,700
<font color="#E5E5E5">in</font><font color="#CCCCCC"> everyone thirty-two process</font><font color="#E5E5E5"> and</font>

897
00:31:04,260 --> 00:31:07,950
furthermore<font color="#E5E5E5"> it's located the same</font>

898
00:31:05,700 --> 00:31:10,710
address<font color="#E5E5E5"> and every version of Windows NT</font>

899
00:31:07,950 --> 00:31:12,090
<font color="#E5E5E5">for every</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> so this is great this</font>

900
00:31:10,710 --> 00:31:13,950
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> kind of stuff that people</font><font color="#CCCCCC"> who are</font>

901
00:31:12,090 --> 00:31:15,449
writing exploits love they want<font color="#E5E5E5"> stuff</font>

902
00:31:13,950 --> 00:31:17,730
<font color="#CCCCCC">that's going to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> at the same</font><font color="#E5E5E5"> address</font>

903
00:31:15,450 --> 00:31:19,260
<font color="#CCCCCC">for every</font><font color="#E5E5E5"> instance of the process for</font>

904
00:31:17,730 --> 00:31:22,140
every target that it could<font color="#CCCCCC"> possibly</font><font color="#E5E5E5"> have</font>

905
00:31:19,260 --> 00:31:23,820
<font color="#E5E5E5">this makes it</font><font color="#CCCCCC"> super easy but you know</font>

906
00:31:22,140 --> 00:31:25,950
generally<font color="#CCCCCC"> speaking shared user data</font>

907
00:31:23,820 --> 00:31:28,439
<font color="#E5E5E5">doesn't really contain a lot of stuff in</font>

908
00:31:25,950 --> 00:31:29,490
some cases<font color="#E5E5E5"> it does but</font><font color="#CCCCCC"> you know it</font>

909
00:31:28,440 --> 00:31:30,810
<font color="#E5E5E5">doesn't actually contain a lot of</font>

910
00:31:29,490 --> 00:31:35,060
portable stuff that you can<font color="#E5E5E5"> use for</font>

911
00:31:30,810 --> 00:31:36,899
return addresses<font color="#E5E5E5"> universally or doesn't</font>

912
00:31:35,060 --> 00:31:38,790
basically some other attributes<font color="#CCCCCC"> that</font>

913
00:31:36,900 --> 00:31:41,250
<font color="#E5E5E5">shared use of data is it's been</font>

914
00:31:38,790 --> 00:31:42,810
executable up until XP sp2 with PAE or

915
00:31:41,250 --> 00:31:47,100
their hardware support for<font color="#CCCCCC"> Hardware</font>

916
00:31:42,810 --> 00:31:49,770
<font color="#E5E5E5">enforced</font><font color="#CCCCCC"> NX</font><font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> a that means</font><font color="#E5E5E5"> that</font>

917
00:31:47,100 --> 00:31:51,240
<font color="#E5E5E5">Microsoft's doing a good job</font><font color="#CCCCCC"> XP sp2 the</font>

918
00:31:49,770 --> 00:31:53,070
technique described in this presentation

919
00:31:51,240 --> 00:31:55,380
if I were to<font color="#E5E5E5"> try to return into shared</font>

920
00:31:53,070 --> 00:31:57,539
user data<font color="#CCCCCC"> and I was on a machine that</font>

921
00:31:55,380 --> 00:31:58,919
support<font color="#CCCCCC"> Hardware enforced in</font><font color="#E5E5E5"> X</font>

922
00:31:57,539 --> 00:32:00,389
<font color="#CCCCCC">I wouldn't be able</font><font color="#E5E5E5"> to because</font><font color="#CCCCCC"> it</font>

923
00:31:58,919 --> 00:32:02,059
wouldn't<font color="#E5E5E5"> be executable</font><font color="#CCCCCC"> and that's gonna</font>

924
00:32:00,389 --> 00:32:03,928
<font color="#E5E5E5">be a requirement</font><font color="#CCCCCC"> I am trying to execute</font>

925
00:32:02,059 --> 00:32:05,609
instructions within<font color="#E5E5E5"> the temporal state</font>

926
00:32:03,929 --> 00:32:06,840
<font color="#E5E5E5">so this is an instance</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> know where</font>

927
00:32:05,609 --> 00:32:09,299
<font color="#E5E5E5">Microsoft's enhancements are doing a</font>

928
00:32:06,840 --> 00:32:11,039
good job<font color="#CCCCCC"> so one of the</font><font color="#E5E5E5"> biggest drawbacks</font>

929
00:32:09,299 --> 00:32:14,639
though to this approach<font color="#E5E5E5"> aside</font><font color="#CCCCCC"> from that</font>

930
00:32:11,039 --> 00:32:16,710
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the actual address itself will</font>

931
00:32:14,639 --> 00:32:18,899
contain<font color="#CCCCCC"> null bytes</font><font color="#E5E5E5"> or one null byte and</font>

932
00:32:16,710 --> 00:32:20,629
<font color="#CCCCCC">it's invited index one this is</font><font color="#E5E5E5"> going to</font>

933
00:32:18,899 --> 00:32:22,649
limit the scope of this this<font color="#E5E5E5"> actual</font>

934
00:32:20,629 --> 00:32:23,969
specific case study<font color="#E5E5E5"> because a lot of</font>

935
00:32:22,649 --> 00:32:25,439
<font color="#E5E5E5">times especially if you're</font><font color="#CCCCCC"> dealing with</font>

936
00:32:23,970 --> 00:32:26,639
<font color="#E5E5E5">the vulnerability and something that</font>

937
00:32:25,440 --> 00:32:27,809
involves a string<font color="#CCCCCC"> function</font><font color="#E5E5E5"> or something</font>

938
00:32:26,639 --> 00:32:30,330
<font color="#E5E5E5">along</font><font color="#CCCCCC"> those lines</font>

939
00:32:27,809 --> 00:32:32,158
you won't be able<font color="#CCCCCC"> to use no bytes in the</font>

940
00:32:30,330 --> 00:32:33,989
buffer<font color="#CCCCCC"> that you're sending across</font><font color="#E5E5E5"> so</font>

941
00:32:32,159 --> 00:32:35,309
<font color="#CCCCCC">that can limit</font><font color="#E5E5E5"> you but it's still</font>

942
00:32:33,989 --> 00:32:36,539
important to<font color="#E5E5E5"> note</font><font color="#CCCCCC"> that there</font><font color="#E5E5E5"> are going</font>

943
00:32:35,309 --> 00:32:38,879
to be exploits that<font color="#E5E5E5"> don't have this</font>

944
00:32:36,539 --> 00:32:40,769
restriction<font color="#CCCCCC"> on null bytes so the big</font>

945
00:32:38,879 --> 00:32:42,689
<font color="#CCCCCC">question here is what a shared user data</font>

946
00:32:40,769 --> 00:32:44,460
have<font color="#CCCCCC"> to do with</font><font color="#E5E5E5"> this presentation well</font>

947
00:32:42,690 --> 00:32:47,070
<font color="#E5E5E5">that's because</font><font color="#CCCCCC"> it contains temporal</font>

948
00:32:44,460 --> 00:32:50,099
addresses<font color="#E5E5E5"> so let's take a look at a</font>

949
00:32:47,070 --> 00:32:51,689
shared user data<font color="#E5E5E5"> it's got a few</font>

950
00:32:50,099 --> 00:32:52,139
<font color="#CCCCCC">attributes in it that</font><font color="#E5E5E5"> are kind of</font>

951
00:32:51,690 --> 00:32:54,989
interesting

952
00:32:52,139 --> 00:32:57,059
it's got first<font color="#E5E5E5"> of all if you look at the</font>

953
00:32:54,989 --> 00:32:59,549
very<font color="#CCCCCC"> start of shared user data</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> a</font>

954
00:32:57,059 --> 00:33:01,590
tick count low attribute<font color="#CCCCCC"> and this starts</font>

955
00:32:59,549 --> 00:33:03,539
<font color="#CCCCCC">like I said at the very</font><font color="#E5E5E5"> first offset in</font>

956
00:33:01,590 --> 00:33:05,279
<font color="#E5E5E5">this road user data if you analyze this</font>

957
00:33:03,539 --> 00:33:07,799
<font color="#CCCCCC">is a temporal address you'll see that</font>

958
00:33:05,279 --> 00:33:08,999
the capacity<font color="#CCCCCC"> is four bytes the period is</font>

959
00:33:07,799 --> 00:33:11,220
<font color="#CCCCCC">actually a</font><font color="#E5E5E5"> variable which I'll describe</font>

960
00:33:08,999 --> 00:33:13,349
in a second<font color="#E5E5E5"> and the scale is measured in</font>

961
00:33:11,220 --> 00:33:14,639
milliseconds since boot<font color="#CCCCCC"> the period</font><font color="#E5E5E5"> is</font>

962
00:33:13,349 --> 00:33:16,019
variable because it's<font color="#CCCCCC"> actually</font>

963
00:33:14,639 --> 00:33:17,789
calculated against the multiplier

964
00:33:16,019 --> 00:33:19,679
there's a term based on a hard work so

965
00:33:17,789 --> 00:33:20,940
while depending on whether<font color="#E5E5E5"> or not you're</font>

966
00:33:19,679 --> 00:33:23,460
using emulation or something along those

967
00:33:20,940 --> 00:33:25,200
<font color="#CCCCCC">lines the period may be constant</font><font color="#E5E5E5"> it has</font>

968
00:33:23,460 --> 00:33:27,840
to be in my<font color="#CCCCCC"> opinion</font><font color="#E5E5E5"> regarded as variable</font>

969
00:33:25,200 --> 00:33:29,580
and<font color="#CCCCCC"> therefore you</font><font color="#E5E5E5"> couldn't use it</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> a</font>

970
00:33:27,840 --> 00:33:31,320
temporal address and just as a<font color="#CCCCCC"> sidebar</font>

971
00:33:29,580 --> 00:33:33,779
<font color="#CCCCCC">that's a very important thing to note if</font>

972
00:33:31,320 --> 00:33:36,330
you're trying<font color="#E5E5E5"> to use this technique for</font>

973
00:33:33,779 --> 00:33:38,489
<font color="#E5E5E5">exploitation</font><font color="#CCCCCC"> you have to know all three</font>

974
00:33:36,330 --> 00:33:40,678
<font color="#CCCCCC">attributes</font><font color="#E5E5E5"> otherwise you can't make use</font>

975
00:33:38,489 --> 00:33:42,570
of it<font color="#E5E5E5"> if you don't know the period you</font>

976
00:33:40,679 --> 00:33:44,009
won't know<font color="#CCCCCC"> the intervals</font><font color="#E5E5E5"> at which the</font>

977
00:33:42,570 --> 00:33:45,210
bytes are increasing and<font color="#CCCCCC"> therefore you</font>

978
00:33:44,009 --> 00:33:46,499
<font color="#E5E5E5">won't know the windows of</font><font color="#CCCCCC"> time that you</font>

979
00:33:45,210 --> 00:33:48,599
have<font color="#E5E5E5"> to work with or even when the</font>

980
00:33:46,499 --> 00:33:50,549
values will<font color="#E5E5E5"> be set to certain things</font><font color="#CCCCCC"> so</font>

981
00:33:48,599 --> 00:33:51,658
it just makes<font color="#E5E5E5"> it totally impossible</font><font color="#CCCCCC"> and</font>

982
00:33:50,549 --> 00:33:54,090
it's the same for<font color="#CCCCCC"> the other bytes</font>

983
00:33:51,659 --> 00:33:57,239
although capacity perhaps<font color="#E5E5E5"> maybe maybe</font>

984
00:33:54,090 --> 00:33:58,889
not just<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of depends</font><font color="#CCCCCC"> next one at</font>

985
00:33:57,239 --> 00:34:01,710
offset<font color="#CCCCCC"> 8 and shared user data</font>

986
00:33:58,889 --> 00:34:04,080
this is<font color="#E5E5E5"> interrupt time so the capacity</font>

987
00:34:01,710 --> 00:34:06,210
<font color="#CCCCCC">here is</font><font color="#E5E5E5"> 8 bytes</font><font color="#CCCCCC"> the period of this one</font>

988
00:34:04,080 --> 00:34:07,678
is also<font color="#CCCCCC"> variable</font><font color="#E5E5E5"> but the scale is</font>

989
00:34:06,210 --> 00:34:09,569
measuring a<font color="#E5E5E5"> hundred nano second</font>

990
00:34:07,679 --> 00:34:10,980
intervals of time processing or

991
00:34:09,569 --> 00:34:12,830
interrupts<font color="#E5E5E5"> I believe</font>

992
00:34:10,980 --> 00:34:15,090
been able<font color="#CCCCCC"> to find verification</font><font color="#E5E5E5"> of that</font>

993
00:34:12,830 --> 00:34:17,129
<font color="#CCCCCC">but the last</font><font color="#E5E5E5"> one and this one is most</font>

994
00:34:15,090 --> 00:34:18,990
interesting is the<font color="#E5E5E5"> system time</font><font color="#CCCCCC"> Astra</font>

995
00:34:17,129 --> 00:34:21,719
<font color="#CCCCCC">beuter shared user data this</font><font color="#E5E5E5"> is located</font>

996
00:34:18,989 --> 00:34:24,089
<font color="#E5E5E5">offset</font><font color="#CCCCCC"> jokes 1 4 is the capacity is 8</font>

997
00:34:21,719 --> 00:34:26,100
bytes<font color="#E5E5E5"> the period is a 100 nanoseconds</font>

998
00:34:24,090 --> 00:34:30,119
<font color="#E5E5E5">and the scale is 100 nanoseconds</font>

999
00:34:26,100 --> 00:34:30,750
interval<font color="#E5E5E5"> since if epoch 1601</font><font color="#CCCCCC"> so that one</font>

1000
00:34:30,119 --> 00:34:32,399
right there

1001
00:34:30,750 --> 00:34:34,590
we know all three attributes<font color="#E5E5E5"> so that</font>

1002
00:34:32,399 --> 00:34:37,109
<font color="#CCCCCC">could actually be</font><font color="#E5E5E5"> pretty useful so what</font>

1003
00:34:34,590 --> 00:34:38,609
is this<font color="#CCCCCC"> of time ROC</font><font color="#E5E5E5"> system time stores</font>

1004
00:34:37,109 --> 00:34:42,899
the count of 100<font color="#E5E5E5"> seconds intervals in</font>

1005
00:34:38,609 --> 00:34:43,980
1601 know from I Anil analysis<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

1006
00:34:42,899 --> 00:34:45,600
not actually appear to account for

1007
00:34:43,980 --> 00:34:46,800
daylight savings time so if you're in an

1008
00:34:45,600 --> 00:34:50,520
<font color="#E5E5E5">area that's using daylight savings time</font>

1009
00:34:46,800 --> 00:34:52,619
it just disregards that the system time

1010
00:34:50,520 --> 00:34:54,899
attribute<font color="#E5E5E5"> itself is actually a case</font>

1011
00:34:52,619 --> 00:34:56,609
<font color="#E5E5E5">system time structure and the</font><font color="#CCCCCC"> way that</font>

1012
00:34:54,899 --> 00:34:58,200
you look at this is<font color="#E5E5E5"> just in window bug</font>

1013
00:34:56,609 --> 00:35:01,250
pop it open<font color="#E5E5E5"> you'll</font><font color="#CCCCCC"> see that</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> a low</font>

1014
00:34:58,200 --> 00:35:03,600
part<font color="#E5E5E5"> a high one time and a high two time</font>

1015
00:35:01,250 --> 00:35:05,930
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> is just you can think</font><font color="#E5E5E5"> of it as</font><font color="#CCCCCC"> a</font>

1016
00:35:03,600 --> 00:35:08,130
64-bit integer for all intents purposes

1017
00:35:05,930 --> 00:35:11,069
<font color="#CCCCCC">high - time</font><font color="#E5E5E5"> is from what I've seen</font>

1018
00:35:08,130 --> 00:35:12,390
always equal<font color="#CCCCCC"> to high one time</font><font color="#E5E5E5"> but maybe</font>

1019
00:35:11,070 --> 00:35:14,070
there's a case<font color="#E5E5E5"> where it</font><font color="#CCCCCC"> isn't not very</font>

1020
00:35:12,390 --> 00:35:16,170
important so let's see how we can abuse

1021
00:35:14,070 --> 00:35:17,280
this what we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> need to do</font>

1022
00:35:16,170 --> 00:35:19,320
first<font color="#E5E5E5"> is we're going</font><font color="#CCCCCC"> to need to</font><font color="#E5E5E5"> use that</font>

1023
00:35:17,280 --> 00:35:21,030
<font color="#E5E5E5">script that we had to</font><font color="#CCCCCC"> calculate the per</font>

1024
00:35:19,320 --> 00:35:23,130
byte durations how long it takes<font color="#E5E5E5"> for</font>

1025
00:35:21,030 --> 00:35:25,260
each byte<font color="#E5E5E5"> index to change and what</font>

1026
00:35:23,130 --> 00:35:27,330
<font color="#E5E5E5">that'll come back with for this</font><font color="#CCCCCC"> 8 byte</font>

1027
00:35:25,260 --> 00:35:29,220
100<font color="#E5E5E5"> nanosecond interval since</font>

1028
00:35:27,330 --> 00:35:31,230
<font color="#E5E5E5">measurements in 1601</font><font color="#CCCCCC"> they don't tell us</font>

1029
00:35:29,220 --> 00:35:32,939
that<font color="#E5E5E5"> the the first</font><font color="#CCCCCC"> 3 byte index has</font>

1030
00:35:31,230 --> 00:35:34,650
actually<font color="#CCCCCC"> changed faster than a second</font>

1031
00:35:32,940 --> 00:35:36,480
<font color="#E5E5E5">well I mean it is measuring a 100</font>

1032
00:35:34,650 --> 00:35:39,090
nanosecond intervals so it is changing

1033
00:35:36,480 --> 00:35:42,150
very<font color="#CCCCCC"> fast and then the third byte index</font>

1034
00:35:39,090 --> 00:35:44,670
changes<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more than a second</font>

1035
00:35:42,150 --> 00:35:46,170
<font color="#E5E5E5">still not useful</font><font color="#CCCCCC"> for us but the</font><font color="#E5E5E5"> fourth</font>

1036
00:35:44,670 --> 00:35:49,200
byte index<font color="#CCCCCC"> changes every seven minutes</font>

1037
00:35:46,170 --> 00:35:51,000
<font color="#E5E5E5">in</font><font color="#CCCCCC"> 9 seconds so that's a that's a pretty</font>

1038
00:35:49,200 --> 00:35:52,649
<font color="#CCCCCC">decent</font><font color="#E5E5E5"> sized window we can make use of</font>

1039
00:35:51,000 --> 00:35:55,280
<font color="#E5E5E5">that and then even on to the fifth byte</font>

1040
00:35:52,650 --> 00:35:57,390
<font color="#E5E5E5">you get a whole day to</font><font color="#CCCCCC"> work with here so</font>

1041
00:35:55,280 --> 00:35:59,130
that you're just<font color="#E5E5E5"> increasing</font><font color="#CCCCCC"> your</font>

1042
00:35:57,390 --> 00:36:01,650
feasibility by the higher you go up<font color="#E5E5E5"> and</font>

1043
00:35:59,130 --> 00:36:02,940
bite indexes<font color="#E5E5E5"> so by</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at this</font>

1044
00:36:01,650 --> 00:36:04,859
<font color="#E5E5E5">that's going to tell</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> should</font>

1045
00:36:02,940 --> 00:36:06,510
start<font color="#E5E5E5"> at biting index 4 and this is</font>

1046
00:36:04,859 --> 00:36:10,009
<font color="#CCCCCC">gonna allow us</font><font color="#E5E5E5"> for an exploitation</font>

1047
00:36:06,510 --> 00:36:12,540
window<font color="#CCCCCC"> a minimum of 7 minutes so</font>

1048
00:36:10,010 --> 00:36:14,310
basically the<font color="#CCCCCC"> final step here is once</font>

1049
00:36:12,540 --> 00:36:15,720
for system time what we need to do is

1050
00:36:14,310 --> 00:36:18,119
mean<font color="#E5E5E5"> to generate the permutations for</font>

1051
00:36:15,720 --> 00:36:20,819
<font color="#E5E5E5">this one</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> we could generate the</font>

1052
00:36:18,119 --> 00:36:21,300
permutations manually but again I don't

1053
00:36:20,820 --> 00:36:23,130
have<font color="#CCCCCC"> the time</font>

1054
00:36:21,300 --> 00:36:25,740
and I don't<font color="#E5E5E5"> want to do it so we use</font><font color="#CCCCCC"> the</font>

1055
00:36:23,130 --> 00:36:27,270
script<font color="#CCCCCC"> all the script does is it does</font>

1056
00:36:25,740 --> 00:36:29,100
that exact process<font color="#E5E5E5"> that we described</font>

1057
00:36:27,270 --> 00:36:30,780
<font color="#E5E5E5">early in the presentation</font><font color="#CCCCCC"> it's going to</font>

1058
00:36:29,100 --> 00:36:33,120
plug the viable<font color="#E5E5E5"> off codes that you've</font>

1059
00:36:30,780 --> 00:36:34,620
<font color="#CCCCCC">defined into the various bite</font><font color="#E5E5E5"> indexes</font>

1060
00:36:33,120 --> 00:36:36,089
starting<font color="#CCCCCC"> it</font><font color="#E5E5E5"> whichever one it determines</font>

1061
00:36:34,620 --> 00:36:37,980
as being the most<font color="#E5E5E5"> feasible in this case</font>

1062
00:36:36,090 --> 00:36:40,140
by an index<font color="#CCCCCC"> four and it'll generate all</font>

1063
00:36:37,980 --> 00:36:41,910
the permutations<font color="#CCCCCC"> so as we see</font><font color="#E5E5E5"> the first</font>

1064
00:36:40,140 --> 00:36:43,290
one for this<font color="#E5E5E5"> one</font><font color="#CCCCCC"> was on</font><font color="#E5E5E5"> Wednesday</font>

1065
00:36:41,910 --> 00:36:46,399
January<font color="#E5E5E5"> I believe this is the first one</font>

1066
00:36:43,290 --> 00:36:51,450
Wednesday January 21st<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> 4 p.m.</font>

1067
00:36:46,400 --> 00:36:53,820
at 1970<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was an</font><font color="#CCCCCC"> EI XD</font><font color="#E5E5E5"> IP transition</font>

1068
00:36:51,450 --> 00:36:57,629
and lasted<font color="#CCCCCC"> for seven minutes</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> nine</font>

1069
00:36:53,820 --> 00:36:58,970
seconds as we saw so let's watch out for

1070
00:36:57,630 --> 00:37:01,110
this<font color="#E5E5E5"> kind of stuff in October this year</font>

1071
00:36:58,970 --> 00:37:04,770
<font color="#CCCCCC">you know later today I actually got a</font>

1072
00:37:01,110 --> 00:37:06,870
run at<font color="#CCCCCC"> two o'clock three six you know 36</font>

1073
00:37:04,770 --> 00:37:08,250
<font color="#CCCCCC">minutes into the hour</font><font color="#E5E5E5"> I got</font><font color="#CCCCCC"> to go take</font>

1074
00:37:06,870 --> 00:37:10,230
<font color="#CCCCCC">care</font><font color="#E5E5E5"> of some business with some exploits</font>

1075
00:37:08,250 --> 00:37:13,170
have<font color="#E5E5E5"> to do with the ax d IP transitions</font>

1076
00:37:10,230 --> 00:37:15,630
so this kind of<font color="#E5E5E5"> gives you an idea this</font>

1077
00:37:13,170 --> 00:37:17,610
<font color="#CCCCCC">is</font><font color="#E5E5E5"> for the month</font><font color="#CCCCCC"> of October and I picked</font>

1078
00:37:15,630 --> 00:37:20,820
the ones that started during blue hat

1079
00:37:17,610 --> 00:37:22,800
and<font color="#E5E5E5"> on these are the</font><font color="#CCCCCC"> Bible windows</font><font color="#E5E5E5"> you</font>

1080
00:37:20,820 --> 00:37:24,690
can<font color="#E5E5E5"> kind of see here that there</font><font color="#CCCCCC"> is quite</font>

1081
00:37:22,800 --> 00:37:26,910
a big difference<font color="#CCCCCC"> in time and the gaps</font>

1082
00:37:24,690 --> 00:37:28,020
also get quite<font color="#CCCCCC"> a bit higher one of the</font>

1083
00:37:26,910 --> 00:37:29,460
next slides<font color="#E5E5E5"> is gonna actually be a</font>

1084
00:37:28,020 --> 00:37:31,740
diagram<font color="#CCCCCC"> to give you guys a better feel</font>

1085
00:37:29,460 --> 00:37:34,830
for<font color="#E5E5E5"> how wide some of the gaps are so</font>

1086
00:37:31,740 --> 00:37:38,430
what I<font color="#CCCCCC"> did is use an output generated by</font>

1087
00:37:34,830 --> 00:37:40,259
<font color="#E5E5E5">that script I went and plotted all the</font>

1088
00:37:38,430 --> 00:37:42,270
various time distributions for the

1089
00:37:40,260 --> 00:37:44,310
system time attribute<font color="#E5E5E5"> for all the sets</font>

1090
00:37:42,270 --> 00:37:47,040
of viable<font color="#E5E5E5"> optos that I took from the</font>

1091
00:37:44,310 --> 00:37:48,450
Metasploit opcode database<font color="#CCCCCC"> and what I</font>

1092
00:37:47,040 --> 00:37:50,040
saw here is you can you can just<font color="#E5E5E5"> see</font>

1093
00:37:48,450 --> 00:37:52,259
<font color="#CCCCCC">kind of a unique distribution</font><font color="#E5E5E5"> in the way</font>

1094
00:37:50,040 --> 00:37:54,180
that things are set<font color="#CCCCCC"> up but perhaps the</font>

1095
00:37:52,260 --> 00:37:56,790
most interesting<font color="#CCCCCC"> one is</font><font color="#E5E5E5"> you see the two</font>

1096
00:37:54,180 --> 00:37:59,250
spikes<font color="#E5E5E5"> there between 2000 and 2005</font><font color="#CCCCCC"> the</font>

1097
00:37:56,790 --> 00:38:02,310
<font color="#CCCCCC">two big yellow spikes those are further</font>

1098
00:37:59,250 --> 00:38:04,830
<font color="#E5E5E5">ESP</font><font color="#CCCCCC"> +82 EIP transitions and those are</font>

1099
00:38:02,310 --> 00:38:08,250
<font color="#CCCCCC">actually fairly interesting</font><font color="#E5E5E5"> so what this</font>

1100
00:38:04,830 --> 00:38:10,529
is is in 2002 and 2003<font color="#CCCCCC"> this is dis some</font>

1101
00:38:08,250 --> 00:38:11,910
<font color="#E5E5E5">time attribute or any other things that</font>

1102
00:38:10,530 --> 00:38:14,100
have the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> attributes</font><font color="#E5E5E5"> as that</font><font color="#CCCCCC"> temple</font>

1103
00:38:11,910 --> 00:38:17,850
address I had a huge<font color="#E5E5E5"> jump in occurrences</font>

1104
00:38:14,100 --> 00:38:20,069
and ESP<font color="#CCCCCC"> +8 to</font><font color="#E5E5E5"> e IP transitions</font><font color="#CCCCCC"> if you</font>

1105
00:38:17,850 --> 00:38:21,900
take a step back<font color="#E5E5E5"> yes the referencing of</font>

1106
00:38:20,070 --> 00:38:24,750
<font color="#CCCCCC">ESP plus</font><font color="#E5E5E5"> 8 is equivalent to a pop pop</font>

1107
00:38:21,900 --> 00:38:26,400
ret<font color="#CCCCCC"> and this is actually</font><font color="#E5E5E5"> something that</font>

1108
00:38:24,750 --> 00:38:28,350
<font color="#E5E5E5">is very</font><font color="#CCCCCC"> useful for people who are doing</font>

1109
00:38:26,400 --> 00:38:29,970
SCH<font color="#E5E5E5"> overrides something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that things</font>

1110
00:38:28,350 --> 00:38:31,170
like<font color="#E5E5E5"> that now I do</font><font color="#CCCCCC"> the way</font><font color="#E5E5E5"> that the</font>

1111
00:38:29,970 --> 00:38:34,020
stack<font color="#CCCCCC"> is</font><font color="#E5E5E5"> set up when an exception</font>

1112
00:38:31,170 --> 00:38:34,950
handler is called<font color="#E5E5E5"> so it's it's really</font>

1113
00:38:34,020 --> 00:38:36,119
<font color="#E5E5E5">you know too bad</font>

1114
00:38:34,950 --> 00:38:38,368
we didn't know about this back then

1115
00:38:36,119 --> 00:38:40,200
because<font color="#E5E5E5"> we could have had a heyday yep I</font>

1116
00:38:38,369 --> 00:38:41,820
mean because think<font color="#CCCCCC"> about this year</font><font color="#E5E5E5"> the</font>

1117
00:38:40,200 --> 00:38:43,529
whole point of this<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the system</font>

1118
00:38:41,820 --> 00:38:45,450
time attribute<font color="#E5E5E5"> in the location that it's</font>

1119
00:38:43,530 --> 00:38:47,820
found<font color="#E5E5E5"> is universal</font><font color="#CCCCCC"> for every version</font><font color="#E5E5E5"> of</font>

1120
00:38:45,450 --> 00:38:49,919
Windows<font color="#E5E5E5"> its executable up until</font><font color="#CCCCCC"> XP sp2</font>

1121
00:38:47,820 --> 00:38:53,099
<font color="#E5E5E5">with hardware and X and it's just</font>

1122
00:38:49,920 --> 00:38:54,690
completely<font color="#E5E5E5"> usable so if we had this</font>

1123
00:38:53,099 --> 00:38:56,820
technique back then<font color="#E5E5E5"> we would have all</font>

1124
00:38:54,690 --> 00:38:58,980
<font color="#E5E5E5">these big time you know time windows for</font>

1125
00:38:56,820 --> 00:39:01,170
doing pop pop<font color="#E5E5E5"> ret transitions for</font><font color="#CCCCCC"> our</font>

1126
00:38:58,980 --> 00:39:03,540
exploits<font color="#E5E5E5"> so if we had some vulnerability</font>

1127
00:39:01,170 --> 00:39:05,520
and we waited<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the right time</font><font color="#CCCCCC"> we</font>

1128
00:39:03,540 --> 00:39:07,230
could just hit<font color="#CCCCCC"> everything and not</font><font color="#E5E5E5"> have</font>

1129
00:39:05,520 --> 00:39:10,500
to worry about<font color="#CCCCCC"> version specific targets</font>

1130
00:39:07,230 --> 00:39:12,119
<font color="#CCCCCC">but</font><font color="#E5E5E5"> the sad news is is</font><font color="#CCCCCC"> that a spike like</font>

1131
00:39:10,500 --> 00:39:13,560
this for<font color="#E5E5E5"> this specific one is never</font>

1132
00:39:12,119 --> 00:39:15,990
going to<font color="#E5E5E5"> occur again</font><font color="#CCCCCC"> in the lifetime of</font>

1133
00:39:13,560 --> 00:39:19,078
<font color="#CCCCCC">anybody here so sorry to disappoint</font><font color="#E5E5E5"> but</font>

1134
00:39:15,990 --> 00:39:21,720
<font color="#E5E5E5">you know maybe way into the future you</font>

1135
00:39:19,079 --> 00:39:23,130
know however<font color="#CCCCCC"> many 300 years it is</font><font color="#E5E5E5"> you</font>

1136
00:39:21,720 --> 00:39:25,169
know<font color="#E5E5E5"> maybe they'll still be using this</font>

1137
00:39:23,130 --> 00:39:27,089
then who<font color="#E5E5E5"> knows</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> just to give</font><font color="#CCCCCC"> you guys</font>

1138
00:39:25,170 --> 00:39:29,970
an idea<font color="#E5E5E5"> of how big the spike was in</font>

1139
00:39:27,089 --> 00:39:31,799
September<font color="#CCCCCC"> of 2002</font><font color="#E5E5E5"> and in August of 2003</font>

1140
00:39:29,970 --> 00:39:34,259
we saw the big spike up to I<font color="#E5E5E5"> believe</font>

1141
00:39:31,800 --> 00:39:37,680
<font color="#CCCCCC">around 64 occurrences of</font><font color="#E5E5E5"> both and then</font>

1142
00:39:34,260 --> 00:39:39,569
it was done so<font color="#CCCCCC"> that was the that</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> the</font>

1143
00:39:37,680 --> 00:39:41,009
interesting<font color="#E5E5E5"> part so at this point I was</font>

1144
00:39:39,569 --> 00:39:43,319
<font color="#CCCCCC">just</font><font color="#E5E5E5"> kind of trying</font><font color="#CCCCCC"> to give you</font><font color="#E5E5E5"> guys an</font>

1145
00:39:41,010 --> 00:39:45,089
<font color="#E5E5E5">idea of some of the stuff some of the</font>

1146
00:39:43,319 --> 00:39:47,579
scripts<font color="#E5E5E5"> and everything so I'll pop this</font>

1147
00:39:45,089 --> 00:39:48,810
up here the chrono<font color="#CCCCCC"> master script</font><font color="#E5E5E5"> let me</font>

1148
00:39:47,579 --> 00:39:56,099
make this a<font color="#E5E5E5"> little bit bigger</font><font color="#CCCCCC"> so you</font>

1149
00:39:48,810 --> 00:39:58,170
<font color="#E5E5E5">guys can see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> all right okay</font>

1150
00:39:56,099 --> 00:39:59,579
<font color="#CCCCCC">chrono mansur scripts this</font><font color="#E5E5E5"> is written in</font>

1151
00:39:58,170 --> 00:40:01,200
<font color="#CCCCCC">Ruby if nobody does Ruby here I</font>

1152
00:39:59,579 --> 00:40:03,150
<font color="#CCCCCC">recommend it</font><font color="#E5E5E5"> if you're into</font>

1153
00:40:01,200 --> 00:40:05,339
object-oriented programming<font color="#CCCCCC"> - it's</font>

1154
00:40:03,150 --> 00:40:07,260
pretty rad but<font color="#CCCCCC"> chrono mansur a</font><font color="#E5E5E5"> pretty</font>

1155
00:40:05,339 --> 00:40:08,880
simple script<font color="#E5E5E5"> basically the purpose of</font>

1156
00:40:07,260 --> 00:40:10,950
this is to generate the permutations

1157
00:40:08,880 --> 00:40:12,660
<font color="#CCCCCC">that</font><font color="#E5E5E5"> to tell me the intervals for a</font>

1158
00:40:10,950 --> 00:40:14,549
temporal address with the specific

1159
00:40:12,660 --> 00:40:16,618
attributes<font color="#CCCCCC"> so for instance I can</font><font color="#E5E5E5"> specify</font>

1160
00:40:14,550 --> 00:40:18,060
the period<font color="#CCCCCC"> I can specify the capacity</font>

1161
00:40:16,619 --> 00:40:19,770
and then further mark and specify the

1162
00:40:18,060 --> 00:40:21,270
scale and what the script<font color="#E5E5E5"> it will</font>

1163
00:40:19,770 --> 00:40:23,490
produce me is either if I'm looking<font color="#CCCCCC"> for</font>

1164
00:40:21,270 --> 00:40:25,050
<font color="#CCCCCC">the the display the per byte durations</font>

1165
00:40:23,490 --> 00:40:27,118
see how<font color="#E5E5E5"> long it takes for each byte</font>

1166
00:40:25,050 --> 00:40:30,030
index to change it will<font color="#E5E5E5"> display that and</font>

1167
00:40:27,119 --> 00:40:32,310
furthermore it will also tell me all of

1168
00:40:30,030 --> 00:40:34,800
<font color="#CCCCCC">the permutations</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> viable out code</font>

1169
00:40:32,310 --> 00:40:36,390
set that I specify<font color="#E5E5E5"> so for instance down</font>

1170
00:40:34,800 --> 00:40:39,030
here these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> just some aliases that</font>

1171
00:40:36,390 --> 00:40:41,240
I've defined<font color="#E5E5E5"> so for instance you see for</font>

1172
00:40:39,030 --> 00:40:44,160
bike capacity period of 10 milliseconds

1173
00:40:41,240 --> 00:40:46,970
<font color="#E5E5E5">with absolute measuring the scale since</font>

1174
00:40:44,160 --> 00:40:48,560
absolute<font color="#CCCCCC"> 1970 époque so</font>

1175
00:40:46,970 --> 00:40:51,770
I mean when you run the<font color="#E5E5E5"> script</font><font color="#CCCCCC"> if you</font>

1176
00:40:48,560 --> 00:40:57,049
say<font color="#E5E5E5"> something like - a four</font><font color="#CCCCCC"> bites one</font>

1177
00:40:51,770 --> 00:40:58,550
second period 1970<font color="#CCCCCC"> and you do - this</font><font color="#E5E5E5"> is</font>

1178
00:40:57,050 --> 00:41:01,609
going to tell me<font color="#CCCCCC"> that same</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that we</font>

1179
00:40:58,550 --> 00:41:03,290
saw<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> screen we saw that it was one</font>

1180
00:41:01,609 --> 00:41:04,910
second<font color="#E5E5E5"> provided</font><font color="#CCCCCC"> next zero four minutes</font>

1181
00:41:03,290 --> 00:41:07,040
and<font color="#E5E5E5"> 16 seconds for</font><font color="#CCCCCC"> buy the</font><font color="#E5E5E5"> next one</font><font color="#CCCCCC"> and</font>

1182
00:41:04,910 --> 00:41:08,750
<font color="#E5E5E5">so on but then if I want to I can</font>

1183
00:41:07,040 --> 00:41:10,279
<font color="#E5E5E5">generate all the permutations</font><font color="#CCCCCC"> so I just</font>

1184
00:41:08,750 --> 00:41:12,319
<font color="#E5E5E5">hit this and there's all the</font>

1185
00:41:10,280 --> 00:41:15,170
permutations<font color="#E5E5E5"> being generated</font><font color="#CCCCCC"> I can it's</font>

1186
00:41:12,319 --> 00:41:16,550
you know<font color="#E5E5E5"> CSV import into Excel do all</font>

1187
00:41:15,170 --> 00:41:18,859
this analysis that<font color="#E5E5E5"> I want on it and</font>

1188
00:41:16,550 --> 00:41:21,349
that's<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so and you can do this for</font>

1189
00:41:18,859 --> 00:41:22,400
<font color="#CCCCCC">all of these</font><font color="#E5E5E5"> all the support Alice's and</font>

1190
00:41:21,349 --> 00:41:23,480
any of the other<font color="#CCCCCC"> attributes of the</font>

1191
00:41:22,400 --> 00:41:25,369
<font color="#CCCCCC">terrible dress that you would want so</font>

1192
00:41:23,480 --> 00:41:27,319
that's<font color="#E5E5E5"> just an example of a simple</font>

1193
00:41:25,369 --> 00:41:29,300
<font color="#E5E5E5">script</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> very complicated that takes</font>

1194
00:41:27,319 --> 00:41:31,359
the techniques described and the

1195
00:41:29,300 --> 00:41:33,230
presentation to generate<font color="#CCCCCC"> this stuff</font>

1196
00:41:31,359 --> 00:41:34,839
<font color="#CCCCCC">another interesting thing</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is going</font>

1197
00:41:33,230 --> 00:41:38,390
<font color="#E5E5E5">to show everybody was this other</font>

1198
00:41:34,839 --> 00:41:40,910
screenshot here<font color="#E5E5E5"> this is going to show</font>

1199
00:41:38,390 --> 00:41:42,950
<font color="#E5E5E5">the distribution obviously I make this a</font>

1200
00:41:40,910 --> 00:41:46,250
little bit bigger<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is going to show</font>

1201
00:41:42,950 --> 00:41:48,618
<font color="#E5E5E5">the distribution for a temporal address</font>

1202
00:41:46,250 --> 00:41:50,089
that is<font color="#CCCCCC"> a four by temporal address</font><font color="#E5E5E5"> one</font>

1203
00:41:48,619 --> 00:41:53,000
second period<font color="#E5E5E5"> measuring the number</font><font color="#CCCCCC"> of</font>

1204
00:41:50,089 --> 00:41:54,710
<font color="#E5E5E5">seconds since 1970</font><font color="#CCCCCC"> POC just gives you</font>

1205
00:41:53,000 --> 00:41:56,869
another<font color="#CCCCCC"> idea of the distribution of some</font>

1206
00:41:54,710 --> 00:41:59,450
of these instructions<font color="#CCCCCC"> you note that we</font>

1207
00:41:56,869 --> 00:42:01,700
<font color="#E5E5E5">don't see any</font><font color="#CCCCCC"> ESP + 8 transitions in</font>

1208
00:41:59,450 --> 00:42:03,950
this one<font color="#E5E5E5"> and the big reason</font><font color="#CCCCCC"> for that is</font>

1209
00:42:01,700 --> 00:42:05,839
<font color="#CCCCCC">because this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> four bike capacity</font>

1210
00:42:03,950 --> 00:42:08,149
address we really<font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> the space</font>

1211
00:42:05,839 --> 00:42:09,828
<font color="#CCCCCC">to make</font><font color="#E5E5E5"> this feasible and furthermore</font>

1212
00:42:08,150 --> 00:42:11,990
since the time<font color="#CCCCCC"> to you attributes</font>

1213
00:42:09,829 --> 00:42:14,030
probably gonna be signed<font color="#CCCCCC"> it's just we</font>

1214
00:42:11,990 --> 00:42:16,368
<font color="#E5E5E5">don't have the space for it but and you</font>

1215
00:42:14,030 --> 00:42:18,740
also see that<font color="#E5E5E5"> eventually you</font><font color="#CCCCCC"> have a</font>

1216
00:42:16,369 --> 00:42:20,000
register plus offset transition going<font color="#E5E5E5"> up</font>

1217
00:42:18,740 --> 00:42:22,339
and<font color="#E5E5E5"> down up and down then it just dies</font>

1218
00:42:20,000 --> 00:42:23,480
off<font color="#E5E5E5"> well you</font><font color="#CCCCCC"> know just</font><font color="#E5E5E5"> kind of</font>

1219
00:42:22,339 --> 00:42:24,859
interesting to<font color="#E5E5E5"> look at some of the stuff</font>

1220
00:42:23,480 --> 00:42:26,839
see some of the generations<font color="#E5E5E5"> and you</font>

1221
00:42:24,859 --> 00:42:29,299
could do this<font color="#E5E5E5"> for all of</font><font color="#CCCCCC"> the temporal</font>

1222
00:42:26,839 --> 00:42:31,430
addresses out there<font color="#E5E5E5"> and the last thing I</font>

1223
00:42:29,300 --> 00:42:35,660
<font color="#E5E5E5">was</font><font color="#CCCCCC"> going to show is a attached to</font>

1224
00:42:31,430 --> 00:42:37,430
<font color="#CCCCCC">VMware here</font><font color="#E5E5E5"> and I was just going to kind</font>

1225
00:42:35,660 --> 00:42:38,868
of give<font color="#CCCCCC"> you guys a concrete feel of</font>

1226
00:42:37,430 --> 00:42:41,540
what's<font color="#E5E5E5"> going to happen if you look at</font>

1227
00:42:38,869 --> 00:42:45,440
shared user data in a debugger<font color="#E5E5E5"> so I'll</font>

1228
00:42:41,540 --> 00:42:48,130
pop<font color="#CCCCCC"> into this here real quick give it a</font>

1229
00:42:45,440 --> 00:42:48,130
second<font color="#E5E5E5"> to</font><font color="#CCCCCC"> come up</font>

1230
00:42:56,600 --> 00:43:00,420
so this will give you an idea<font color="#E5E5E5"> of what it</font>

1231
00:42:58,950 --> 00:43:02,069
looks<font color="#CCCCCC"> like and shared user data if you</font>

1232
00:43:00,420 --> 00:43:03,540
were to attach<font color="#CCCCCC"> for the debugger</font><font color="#E5E5E5"> so I'm</font>

1233
00:43:02,070 --> 00:43:07,020
<font color="#E5E5E5">gonna set my system time this is just</font>

1234
00:43:03,540 --> 00:43:08,700
<font color="#CCCCCC">setting it to a specific time when I</font>

1235
00:43:07,020 --> 00:43:09,870
know<font color="#E5E5E5"> that shared user data is gonna or</font>

1236
00:43:08,700 --> 00:43:11,370
the system time attributes going to

1237
00:43:09,870 --> 00:43:15,779
contain<font color="#E5E5E5"> use block codes so if I</font>

1238
00:43:11,370 --> 00:43:17,790
<font color="#E5E5E5">disassemble 0</font><font color="#CCCCCC"> F 7 FF e 0 0 1 8 that's 4</font>

1239
00:43:15,780 --> 00:43:21,840
bytes into<font color="#E5E5E5"> the system time attribute I</font>

1240
00:43:17,790 --> 00:43:24,210
see<font color="#E5E5E5"> a call</font><font color="#CCCCCC"> EAX so if I if I keep this</font>

1241
00:43:21,840 --> 00:43:26,820
assembling<font color="#E5E5E5"> this well yeah it's still</font>

1242
00:43:24,210 --> 00:43:28,080
<font color="#E5E5E5">this if I go four bytes back</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the</font>

1243
00:43:26,820 --> 00:43:29,790
star<font color="#E5E5E5"> system attribute these are the</font>

1244
00:43:28,080 --> 00:43:31,290
things that<font color="#E5E5E5"> are changing every you know</font>

1245
00:43:29,790 --> 00:43:33,000
<font color="#E5E5E5">less than a second I keep this</font>

1246
00:43:31,290 --> 00:43:34,080
assembling it look at that you<font color="#E5E5E5"> know the</font>

1247
00:43:33,000 --> 00:43:35,550
<font color="#E5E5E5">instructions are constantly changing</font>

1248
00:43:34,080 --> 00:43:38,310
there's no possible way I can<font color="#E5E5E5"> make use</font>

1249
00:43:35,550 --> 00:43:40,530
of those but if I go back I see uh well

1250
00:43:38,310 --> 00:43:42,330
the<font color="#E5E5E5"> Kali</font><font color="#CCCCCC"> ax is still there can still</font>

1251
00:43:40,530 --> 00:43:45,090
make use of it so<font color="#E5E5E5"> this kind of gives you</font>

1252
00:43:42,330 --> 00:43:46,770
<font color="#E5E5E5">a concrete idea of how the bytes that</font>

1253
00:43:45,090 --> 00:43:49,520
actually compose the<font color="#CCCCCC"> timer state could</font>

1254
00:43:46,770 --> 00:43:52,170
be used for<font color="#E5E5E5"> viable instructions so</font>

1255
00:43:49,520 --> 00:43:58,560
that's that<font color="#E5E5E5"> pop back</font><font color="#CCCCCC"> over the slides</font>

1256
00:43:52,170 --> 00:44:00,390
<font color="#E5E5E5">here</font><font color="#CCCCCC"> so conclusion in general</font><font color="#E5E5E5"> if you're</font>

1257
00:43:58,560 --> 00:44:01,740
<font color="#E5E5E5">trying to use this as a person</font><font color="#CCCCCC"> writing</font>

1258
00:44:00,390 --> 00:44:02,609
<font color="#E5E5E5">exploits and stuff like that</font><font color="#CCCCCC"> you're</font>

1259
00:44:01,740 --> 00:44:04,020
gonna say yeah

1260
00:44:02,610 --> 00:44:05,340
this isn't very feasible<font color="#CCCCCC"> you know I</font>

1261
00:44:04,020 --> 00:44:08,130
don't want<font color="#E5E5E5"> to have to sit</font><font color="#CCCCCC"> here for three</font>

1262
00:44:05,340 --> 00:44:09,600
<font color="#CCCCCC">days and 14 hours waiting for</font><font color="#E5E5E5"> this time</font>

1263
00:44:08,130 --> 00:44:11,400
window<font color="#CCCCCC"> to come up where I can actually</font>

1264
00:44:09,600 --> 00:44:12,839
use<font color="#E5E5E5"> this so if you look at it from</font>

1265
00:44:11,400 --> 00:44:15,030
<font color="#E5E5E5">that's but that aspect is probably not</font>

1266
00:44:12,840 --> 00:44:16,500
very<font color="#E5E5E5"> feasible</font><font color="#CCCCCC"> the viable</font><font color="#E5E5E5"> off code</font>

1267
00:44:15,030 --> 00:44:18,300
windows tend to be spaced fairly far

1268
00:44:16,500 --> 00:44:20,460
apart<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you saw on the table there</font><font color="#E5E5E5"> was</font>

1269
00:44:18,300 --> 00:44:23,430
faced apart by days<font color="#CCCCCC"> depending on</font><font color="#E5E5E5"> what it</font>

1270
00:44:20,460 --> 00:44:24,720
is<font color="#E5E5E5"> or</font><font color="#CCCCCC"> even months in some cases</font><font color="#E5E5E5"> so and</font>

1271
00:44:23,430 --> 00:44:25,980
furthermore<font color="#CCCCCC"> if you're trying</font><font color="#E5E5E5"> to take</font>

1272
00:44:24,720 --> 00:44:28,049
<font color="#E5E5E5">advantage</font><font color="#CCCCCC"> of something</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has to do a</font>

1273
00:44:25,980 --> 00:44:30,240
system time<font color="#E5E5E5"> maybe there isn't gonna be a</font>

1274
00:44:28,050 --> 00:44:31,560
way for you to get<font color="#E5E5E5"> to some time so these</font>

1275
00:44:30,240 --> 00:44:32,700
these<font color="#CCCCCC"> different</font><font color="#E5E5E5"> variables are things</font>

1276
00:44:31,560 --> 00:44:34,680
that you know might make it impossible

1277
00:44:32,700 --> 00:44:37,290
<font color="#E5E5E5">reduce of this sort of stuff so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> list</font>

1278
00:44:34,680 --> 00:44:39,540
really<font color="#E5E5E5"> goes on here so the question</font><font color="#CCCCCC"> is</font>

1279
00:44:37,290 --> 00:44:41,730
though what if you compromised an NTP

1280
00:44:39,540 --> 00:44:43,320
server<font color="#CCCCCC"> this was a scenario that was</font>

1281
00:44:41,730 --> 00:44:45,750
suggested<font color="#CCCCCC"> by blot 9 or 2 one of</font><font color="#E5E5E5"> the</font>

1282
00:44:43,320 --> 00:44:48,180
other<font color="#CCCCCC"> Metasploit guys he suggested well</font>

1283
00:44:45,750 --> 00:44:49,350
if you<font color="#E5E5E5"> compromise an NTP server you're</font>

1284
00:44:48,180 --> 00:44:50,430
automatically going to control the

1285
00:44:49,350 --> 00:44:53,100
<font color="#E5E5E5">system time on the machines</font><font color="#CCCCCC"> and</font>

1286
00:44:50,430 --> 00:44:54,569
synchronize to it so if I set the NTP

1287
00:44:53,100 --> 00:44:56,279
<font color="#E5E5E5">server to send a time to these clients</font>

1288
00:44:54,570 --> 00:44:58,410
<font color="#CCCCCC">that's going to contain</font><font color="#E5E5E5"> these in viable</font>

1289
00:44:56,280 --> 00:44:59,850
instructions<font color="#E5E5E5"> and I know that the system</font>

1290
00:44:58,410 --> 00:45:02,129
<font color="#E5E5E5">time</font><font color="#CCCCCC"> attribute is located this address</font>

1291
00:44:59,850 --> 00:45:03,299
<font color="#E5E5E5">or some other to progress is located</font>

1292
00:45:02,130 --> 00:45:05,670
specific address address

1293
00:45:03,300 --> 00:45:08,339
well I can make<font color="#CCCCCC"> use of</font><font color="#E5E5E5"> this so</font>

1294
00:45:05,670 --> 00:45:09,569
<font color="#E5E5E5">furthermore not only</font><font color="#CCCCCC"> that but you also</font>

1295
00:45:08,339 --> 00:45:11,009
are<font color="#CCCCCC"> going to note which clients</font><font color="#E5E5E5"> are</font>

1296
00:45:09,569 --> 00:45:12,450
synchronized since<font color="#CCCCCC"> it</font><font color="#E5E5E5"> synchronizing over</font>

1297
00:45:11,009 --> 00:45:13,710
the network<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see which clients</font>

1298
00:45:12,450 --> 00:45:15,930
are connecting give<font color="#E5E5E5"> them a couple</font>

1299
00:45:13,710 --> 00:45:18,210
seconds<font color="#E5E5E5"> to update their clock and after</font>

1300
00:45:15,930 --> 00:45:19,890
that your<font color="#CCCCCC"> ntp server</font><font color="#E5E5E5"> has magically</font>

1301
00:45:18,210 --> 00:45:23,759
transformed into a worm distribution

1302
00:45:19,890 --> 00:45:24,930
server so it's<font color="#CCCCCC"> uh it's it's that's a</font>

1303
00:45:23,759 --> 00:45:27,839
pretty feasible<font color="#CCCCCC"> approach that you could</font>

1304
00:45:24,930 --> 00:45:29,098
<font color="#E5E5E5">potentially use to do this so one</font><font color="#CCCCCC"> other</font>

1305
00:45:27,839 --> 00:45:30,420
thing to identify<font color="#E5E5E5"> here is what are some</font>

1306
00:45:29,099 --> 00:45:31,470
of the mitigating<font color="#CCCCCC"> factors of</font><font color="#E5E5E5"> this</font>

1307
00:45:30,420 --> 00:45:33,150
approach what are<font color="#E5E5E5"> some of the things</font>

1308
00:45:31,470 --> 00:45:35,399
<font color="#E5E5E5">that make it</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> you can make it</font>

1309
00:45:33,150 --> 00:45:37,319
unpredictable or not possible<font color="#CCCCCC"> to do well</font>

1310
00:45:35,400 --> 00:45:39,029
the<font color="#CCCCCC"> first thing that we know is that the</font>

1311
00:45:37,319 --> 00:45:40,769
temporal address has to be<font color="#E5E5E5"> predictable</font>

1312
00:45:39,029 --> 00:45:42,329
<font color="#E5E5E5">and reliable</font><font color="#CCCCCC"> the location</font><font color="#E5E5E5"> that's found</font>

1313
00:45:40,769 --> 00:45:44,308
at that's<font color="#E5E5E5"> the whole point</font><font color="#CCCCCC"> we're trying</font>

1314
00:45:42,329 --> 00:45:46,140
to find a<font color="#E5E5E5"> universal or more predictable</font>

1315
00:45:44,309 --> 00:45:47,609
return address than the static ones

1316
00:45:46,140 --> 00:45:49,019
well shared<font color="#E5E5E5"> use</font><font color="#CCCCCC"> of data is a great</font>

1317
00:45:47,609 --> 00:45:50,940
example<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> address</font><font color="#CCCCCC"> every</font>

1318
00:45:49,019 --> 00:45:51,899
<font color="#E5E5E5">version of Windows every process so on</font>

1319
00:45:50,940 --> 00:45:53,730
and so forth

1320
00:45:51,900 --> 00:45:55,529
so that is one<font color="#E5E5E5"> of the very big</font>

1321
00:45:53,730 --> 00:45:57,029
mitigating factors if the address of

1322
00:45:55,529 --> 00:45:58,680
which shared user data was located was

1323
00:45:57,029 --> 00:46:00,900
different between<font color="#CCCCCC"> maybe an instance of a</font>

1324
00:45:58,680 --> 00:46:03,390
process or anything<font color="#E5E5E5"> well suddenly this</font>

1325
00:46:00,900 --> 00:46:07,200
<font color="#E5E5E5">is no longer useful to us so that is a</font>

1326
00:46:03,390 --> 00:46:09,299
<font color="#E5E5E5">very big mitigating factor as I said the</font>

1327
00:46:07,200 --> 00:46:11,149
<font color="#E5E5E5">capacity period and scale of the</font>

1328
00:46:09,299 --> 00:46:14,249
<font color="#E5E5E5">temporal addresses has to be consistent</font>

1329
00:46:11,150 --> 00:46:15,869
<font color="#CCCCCC">these</font><font color="#E5E5E5"> attributes are</font><font color="#CCCCCC"> not known or you</font>

1330
00:46:14,249 --> 00:46:17,700
can't<font color="#E5E5E5"> determine them reliably then you</font>

1331
00:46:15,869 --> 00:46:18,989
can't reliably<font color="#E5E5E5"> determine at what</font><font color="#CCCCCC"> point</font>

1332
00:46:17,700 --> 00:46:20,819
in<font color="#E5E5E5"> the future you could make use of them</font>

1333
00:46:18,989 --> 00:46:23,910
<font color="#CCCCCC">so that is a very</font><font color="#E5E5E5"> important factor as</font>

1334
00:46:20,819 --> 00:46:25,380
well if a timer variable is do something

1335
00:46:23,910 --> 00:46:26,848
<font color="#E5E5E5">measuring sin sister time as I've said</font>

1336
00:46:25,380 --> 00:46:30,809
you're<font color="#E5E5E5"> going to have to</font><font color="#CCCCCC"> know system time</font>

1337
00:46:26,849 --> 00:46:32,249
information<font color="#E5E5E5"> and lastly this is this</font>

1338
00:46:30,809 --> 00:46:34,319
<font color="#CCCCCC">isn't a critical one</font><font color="#E5E5E5"> and this goes</font><font color="#CCCCCC"> back</font>

1339
00:46:32,249 --> 00:46:34,738
to XP sp2 with an<font color="#E5E5E5"> X support and all that</font>

1340
00:46:34,319 --> 00:46:37,049
stuff

1341
00:46:34,739 --> 00:46:38,220
the a temple address region deep by

1342
00:46:37,049 --> 00:46:40,440
default<font color="#E5E5E5"> it's going</font><font color="#CCCCCC"> to have to be</font>

1343
00:46:38,220 --> 00:46:42,269
writable<font color="#CCCCCC"> something is updating this</font>

1344
00:46:40,440 --> 00:46:44,369
address with new<font color="#CCCCCC"> values constantly so it</font>

1345
00:46:42,269 --> 00:46:46,078
is already writable<font color="#CCCCCC"> and furthermore</font><font color="#E5E5E5"> in</font>

1346
00:46:44,369 --> 00:46:47,999
order<font color="#CCCCCC"> for this to work assuming there's</font>

1347
00:46:46,079 --> 00:46:49,440
Hardware back the next support<font color="#E5E5E5"> this</font>

1348
00:46:47,999 --> 00:46:51,749
address<font color="#E5E5E5"> is also</font><font color="#CCCCCC"> going to have to be</font>

1349
00:46:49,440 --> 00:46:53,460
executable<font color="#CCCCCC"> in all the versions</font><font color="#E5E5E5"> of</font>

1350
00:46:51,749 --> 00:46:55,618
Windows prior to XP sp2 with hardware

1351
00:46:53,460 --> 00:46:57,509
and<font color="#CCCCCC"> force support that they are</font>

1352
00:46:55,619 --> 00:46:58,890
executable<font color="#E5E5E5"> I mean it's</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> inherently</font>

1353
00:46:57,509 --> 00:46:59,999
executable even if<font color="#E5E5E5"> their pages aren't</font>

1354
00:46:58,890 --> 00:47:02,670
marked<font color="#E5E5E5"> as if they</font><font color="#CCCCCC"> are inherently</font>

1355
00:46:59,999 --> 00:47:03,839
executable<font color="#CCCCCC"> so this is an important</font>

1356
00:47:02,670 --> 00:47:06,960
factor as well and can<font color="#CCCCCC"> be a mitigating</font>

1357
00:47:03,839 --> 00:47:08,640
<font color="#E5E5E5">factor so just answer</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> question and</font>

1358
00:47:06,960 --> 00:47:10,140
<font color="#E5E5E5">this is probably what makes the title a</font>

1359
00:47:08,640 --> 00:47:12,629
<font color="#CCCCCC">little bit weird</font><font color="#E5E5E5"> what's with chrono</font>

1360
00:47:10,140 --> 00:47:13,890
<font color="#CCCCCC">mansi this was a this was suggested to</font>

1361
00:47:12,630 --> 00:47:17,279
<font color="#E5E5E5">me</font><font color="#CCCCCC"> by a friend of mine Richard Johnson</font>

1362
00:47:13,890 --> 00:47:18,308
who just great great<font color="#E5E5E5"> word</font><font color="#CCCCCC"> for describing</font>

1363
00:47:17,279 --> 00:47:19,630
<font color="#E5E5E5">this</font><font color="#CCCCCC"> may</font>

1364
00:47:18,309 --> 00:47:21,400
if you go to the<font color="#E5E5E5"> dictionary you pop it</font>

1365
00:47:19,630 --> 00:47:23,170
up that believe this has to do<font color="#E5E5E5"> with some</font>

1366
00:47:21,400 --> 00:47:24,880
<font color="#E5E5E5">kind of magic</font><font color="#CCCCCC"> stuff or something</font><font color="#E5E5E5"> but a</font>

1367
00:47:23,170 --> 00:47:26,549
<font color="#E5E5E5">chrome answer is basically</font><font color="#CCCCCC"> someone who</font>

1368
00:47:24,880 --> 00:47:29,259
defines the right time to do something

1369
00:47:26,549 --> 00:47:31,209
<font color="#CCCCCC">and what better</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do then Devine</font>

1370
00:47:29,259 --> 00:47:33,670
the right time to exploit<font color="#CCCCCC"> something so</font>

1371
00:47:31,209 --> 00:47:34,689
it's a that's why it's applied in<font color="#CCCCCC"> this</font>

1372
00:47:33,670 --> 00:47:37,390
case

1373
00:47:34,689 --> 00:47:39,219
wrapping up<font color="#CCCCCC"> if you want to</font><font color="#E5E5E5"> learn more</font>

1374
00:47:37,390 --> 00:47:41,259
about<font color="#E5E5E5"> this and you didn't think I did a</font>

1375
00:47:39,219 --> 00:47:42,729
good job of explaining<font color="#E5E5E5"> it</font><font color="#CCCCCC"> I have written</font>

1376
00:47:41,259 --> 00:47:44,979
a paper maybe<font color="#E5E5E5"> I did a better job in that</font>

1377
00:47:42,729 --> 00:47:47,739
<font color="#E5E5E5">you can go</font><font color="#CCCCCC"> check it</font><font color="#E5E5E5"> out and you're all</font>

1378
00:47:44,979 --> 00:47:49,328
specified here<font color="#E5E5E5"> and also on the page you</font>

1379
00:47:47,739 --> 00:47:51,939
<font color="#E5E5E5">can</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> the code for the implementation</font>

1380
00:47:49,329 --> 00:47:53,650
<font color="#E5E5E5">of the telescope program and the Ruby</font>

1381
00:47:51,939 --> 00:47:55,029
script<font color="#E5E5E5"> chrono master for generating the</font>

1382
00:47:53,650 --> 00:48:02,400
permutations<font color="#E5E5E5"> of all the things</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that</font>

1383
00:47:55,029 --> 00:48:02,400
sort so<font color="#CCCCCC"> with</font><font color="#E5E5E5"> that any questions yes</font>

1384
00:48:07,060 --> 00:48:11,450
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> the question</font><font color="#CCCCCC"> is you know</font><font color="#E5E5E5"> the</font>

1385
00:48:09,590 --> 00:48:12,740
location<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> but how do you</font>

1386
00:48:11,450 --> 00:48:15,919
transfer control<font color="#CCCCCC"> to that</font><font color="#E5E5E5"> instruction</font>

1387
00:48:12,740 --> 00:48:17,600
<font color="#CCCCCC">well that's very very</font><font color="#E5E5E5"> vulnerability</font>

1388
00:48:15,920 --> 00:48:18,770
dependent if you're maybe doing<font color="#E5E5E5"> a stack</font>

1389
00:48:17,600 --> 00:48:20,029
overflow or something you're able<font color="#CCCCCC"> to</font>

1390
00:48:18,770 --> 00:48:21,440
overwrite the<font color="#CCCCCC"> return address</font>

1391
00:48:20,030 --> 00:48:23,600
well you overwrite the return address

1392
00:48:21,440 --> 00:48:25,760
with the<font color="#E5E5E5"> address of you know system time</font>

1393
00:48:23,600 --> 00:48:27,620
that call<font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> so that when that</font><font color="#CCCCCC"> function</font>

1394
00:48:25,760 --> 00:48:28,970
returns<font color="#E5E5E5"> it's going to return into</font><font color="#CCCCCC"> the</font>

1395
00:48:27,620 --> 00:48:31,640
<font color="#E5E5E5">colleague X and so on and so forth so</font>

1396
00:48:28,970 --> 00:48:33,980
<font color="#E5E5E5">it's very vulnerability dependent and it</font>

1397
00:48:31,640 --> 00:48:35,240
relies<font color="#CCCCCC"> on whatever</font><font color="#E5E5E5"> the arbitrary the</font>

1398
00:48:33,980 --> 00:48:36,830
thing that's<font color="#CCCCCC"> arbitrary is the manner</font>

1399
00:48:35,240 --> 00:48:38,540
that<font color="#E5E5E5"> gets you</font><font color="#CCCCCC"> to that</font><font color="#E5E5E5"> address and</font><font color="#CCCCCC"> then</font>

1400
00:48:36,830 --> 00:48:40,100
that address will get you then to<font color="#E5E5E5"> your</font>

1401
00:48:38,540 --> 00:48:42,640
buffer or whatever the<font color="#E5E5E5"> case may be</font>

1402
00:48:40,100 --> 00:48:42,640
yes sir

1403
00:48:46,400 --> 00:48:50,420
<font color="#CCCCCC">uh yes the</font><font color="#E5E5E5"> question is did you find any</font>

1404
00:48:48,920 --> 00:48:53,779
time windows that were larger than

1405
00:48:50,420 --> 00:48:55,760
<font color="#E5E5E5">minutes and the answer is yes</font><font color="#CCCCCC"> the system</font>

1406
00:48:53,779 --> 00:48:56,930
time attribute<font color="#E5E5E5"> itself some of the ones</font>

1407
00:48:55,760 --> 00:48:58,279
that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> showed</font><font color="#E5E5E5"> there pretty much all</font><font color="#CCCCCC"> of</font>

1408
00:48:56,930 --> 00:48:59,960
them all of<font color="#E5E5E5"> them you'll find will be</font>

1409
00:48:58,279 --> 00:49:01,670
seven minutes and<font color="#E5E5E5"> nine seconds when</font><font color="#CCCCCC"> doz</font>

1410
00:48:59,960 --> 00:49:04,309
<font color="#E5E5E5">but there are some that come along</font><font color="#CCCCCC"> that</font>

1411
00:49:01,670 --> 00:49:05,599
<font color="#E5E5E5">once enough time elapses I believe it's</font>

1412
00:49:04,309 --> 00:49:07,760
on the magnitude of a year<font color="#E5E5E5"> or something</font>

1413
00:49:05,599 --> 00:49:09,470
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that you'll find ones that</font><font color="#E5E5E5"> will</font>

1414
00:49:07,760 --> 00:49:12,049
last for one day<font color="#E5E5E5"> in six hours</font>

1415
00:49:09,470 --> 00:49:13,910
so it's<font color="#E5E5E5"> very dependent</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the three</font>

1416
00:49:12,049 --> 00:49:16,520
<font color="#CCCCCC">attributes of the temporal address</font><font color="#E5E5E5"> and</font>

1417
00:49:13,910 --> 00:49:17,930
but yes<font color="#E5E5E5"> there are windows that</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> be</font>

1418
00:49:16,520 --> 00:49:27,570
longer<font color="#E5E5E5"> than minutes and what we measured</font>

1419
00:49:17,930 --> 00:49:30,698
in days<font color="#CCCCCC"> so</font><font color="#E5E5E5"> yes yellow shirt yes</font>

1420
00:49:27,570 --> 00:49:30,699
[Music]

1421
00:49:37,460 --> 00:49:41,869
<font color="#E5E5E5">okay the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> point is is that you may</font>

1422
00:49:40,520 --> 00:49:43,640
even if you don't know the period as

1423
00:49:41,869 --> 00:49:45,589
long<font color="#E5E5E5"> as it's less than the duration</font><font color="#CCCCCC"> of</font>

1424
00:49:43,640 --> 00:49:48,799
the opcodes that you would use you could

1425
00:49:45,589 --> 00:49:50,630
<font color="#E5E5E5">still feasibly use it potentially the</font>

1426
00:49:48,800 --> 00:49:52,730
the point is though that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> period is</font>

1427
00:49:50,630 --> 00:49:55,550
<font color="#E5E5E5">used to derive the duration in this case</font>

1428
00:49:52,730 --> 00:49:56,869
<font color="#E5E5E5">so if you could if you could infer that</font>

1429
00:49:55,550 --> 00:49:58,970
the<font color="#CCCCCC"> duration</font><font color="#E5E5E5"> was a certain period of</font>

1430
00:49:56,869 --> 00:50:00,770
time<font color="#E5E5E5"> like maybe with a you know</font><font color="#CCCCCC"> a window</font>

1431
00:49:58,970 --> 00:50:02,569
<font color="#E5E5E5">maybe sometimes it was five seconds</font>

1432
00:50:00,770 --> 00:50:04,430
<font color="#E5E5E5">longer maybe times it was five seconds</font>

1433
00:50:02,569 --> 00:50:06,950
longer<font color="#E5E5E5"> you could just subtract that from</font>

1434
00:50:04,430 --> 00:50:08,629
the<font color="#E5E5E5"> overall duration and then yes you</font>

1435
00:50:06,950 --> 00:50:10,189
could<font color="#CCCCCC"> derive the other attributes and so</font>

1436
00:50:08,630 --> 00:50:12,050
<font color="#E5E5E5">on and so forth so that is a case where</font>

1437
00:50:10,190 --> 00:50:15,079
if you have a potentially variable field

1438
00:50:12,050 --> 00:50:16,790
<font color="#E5E5E5">maybe just it differs by five seconds</font>

1439
00:50:15,079 --> 00:50:18,559
<font color="#E5E5E5">either way or something like that you</font>

1440
00:50:16,790 --> 00:50:20,569
could<font color="#E5E5E5"> still</font><font color="#CCCCCC"> make use of it even though</font>

1441
00:50:18,559 --> 00:50:29,050
the period is<font color="#E5E5E5"> inherently variable so yes</font>

1442
00:50:20,569 --> 00:50:29,050
a good<font color="#CCCCCC"> point</font><font color="#E5E5E5"> yes sir yes</font>

1443
00:50:33,290 --> 00:50:37,009
question is is all<font color="#E5E5E5"> the stuff here is</font>

1444
00:50:35,300 --> 00:50:39,410
described<font color="#E5E5E5"> for x86 are there any</font>

1445
00:50:37,010 --> 00:50:42,380
parallels<font color="#E5E5E5"> to</font><font color="#CCCCCC"> other architectures the</font>

1446
00:50:39,410 --> 00:50:44,180
answer is perhaps the problem<font color="#CCCCCC"> that</font>

1447
00:50:42,380 --> 00:50:45,860
you'll<font color="#E5E5E5"> run into</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be very</font>

1448
00:50:44,180 --> 00:50:47,930
dependent<font color="#E5E5E5"> on the way that instructions</font>

1449
00:50:45,860 --> 00:50:49,840
are composed for instance if you're on

1450
00:50:47,930 --> 00:50:52,250
<font color="#E5E5E5">spark or some other platforms that</font><font color="#CCCCCC"> have</font>

1451
00:50:49,840 --> 00:50:53,920
aligned instructions so<font color="#E5E5E5"> for byte aligned</font>

1452
00:50:52,250 --> 00:50:56,600
instructions or<font color="#CCCCCC"> something like that</font>

1453
00:50:53,920 --> 00:50:58,850
<font color="#CCCCCC">probably not</font><font color="#E5E5E5"> going to be very</font><font color="#CCCCCC"> useful for</font>

1454
00:50:56,600 --> 00:51:00,470
you for something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has a</font><font color="#E5E5E5"> four byte</font>

1455
00:50:58,850 --> 00:51:02,000
capacity because that<font color="#E5E5E5"> means you have to</font>

1456
00:51:00,470 --> 00:51:04,129
fill<font color="#E5E5E5"> the whole timer state you aren't</font>

1457
00:51:02,000 --> 00:51:06,980
<font color="#E5E5E5">just using bytes that compose it</font><font color="#CCCCCC"> but</font>

1458
00:51:04,130 --> 00:51:09,050
perhaps<font color="#E5E5E5"> if you know other situations</font>

1459
00:51:06,980 --> 00:51:10,880
occur yeah you could you could make use

1460
00:51:09,050 --> 00:51:12,230
of it I mean<font color="#E5E5E5"> this should</font><font color="#CCCCCC"> be combined</font>

1461
00:51:10,880 --> 00:51:17,530
<font color="#CCCCCC">opposed to other platforms as well and</font>

1462
00:51:12,230 --> 00:51:17,530
<font color="#E5E5E5">other architectures so yes is it</font>

1463
00:51:23,710 --> 00:51:28,940
<font color="#E5E5E5">okay yeah that's a good question</font>

1464
00:51:26,180 --> 00:51:30,379
question is is<font color="#E5E5E5"> there is this</font><font color="#CCCCCC"> more at</font>

1465
00:51:28,940 --> 00:51:32,330
<font color="#CCCCCC">Aegis or you know kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> has parallels</font>

1466
00:51:30,380 --> 00:51:34,070
<font color="#CCCCCC">to other approaches where you might know</font>

1467
00:51:32,330 --> 00:51:37,250
what certain data is set to and other

1468
00:51:34,070 --> 00:51:40,430
<font color="#E5E5E5">locations in memory and there's this</font>

1469
00:51:37,250 --> 00:51:43,490
<font color="#E5E5E5">technique is driven towards temporal</font>

1470
00:51:40,430 --> 00:51:45,649
addresses yes<font color="#E5E5E5"> but the overall point is</font>

1471
00:51:43,490 --> 00:51:47,209
that if you can make<font color="#CCCCCC"> use of some</font>

1472
00:51:45,650 --> 00:51:49,369
predictable location<font color="#E5E5E5"> in</font><font color="#CCCCCC"> memory that</font><font color="#E5E5E5"> will</font>

1473
00:51:47,210 --> 00:51:51,020
be predictable such as data<font color="#E5E5E5"> then yeah</font><font color="#CCCCCC"> I</font>

1474
00:51:49,369 --> 00:51:52,160
mean that is something<font color="#CCCCCC"> if you know that</font>

1475
00:51:51,020 --> 00:51:53,480
<font color="#E5E5E5">what's going to be the result of</font><font color="#CCCCCC"> a</font>

1476
00:51:52,160 --> 00:51:55,098
calculation and<font color="#E5E5E5"> you know what's gonna be</font>

1477
00:51:53,480 --> 00:51:57,650
stored<font color="#E5E5E5"> as specific address then yes that</font>

1478
00:51:55,099 --> 00:51:59,990
<font color="#CCCCCC">could be just as useful</font><font color="#E5E5E5"> and then that</font>

1479
00:51:57,650 --> 00:52:01,700
won't<font color="#E5E5E5"> be bounded by time or</font><font color="#CCCCCC"> may not be</font>

1480
00:51:59,990 --> 00:52:03,799
bounded<font color="#CCCCCC"> by time</font><font color="#E5E5E5"> so yeah that could be</font>

1481
00:52:01,700 --> 00:52:05,598
very<font color="#CCCCCC"> useful as well</font><font color="#E5E5E5"> an interesting point</font>

1482
00:52:03,800 --> 00:52:06,619
regarding<font color="#CCCCCC"> that was suggested by one</font><font color="#E5E5E5"> of</font>

1483
00:52:05,599 --> 00:52:08,030
the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> speakers a bit more which is</font>

1484
00:52:06,619 --> 00:52:10,460
<font color="#E5E5E5">you know maybe you could use something</font>

1485
00:52:08,030 --> 00:52:11,540
along the lines of system counters or

1486
00:52:10,460 --> 00:52:12,890
something<font color="#CCCCCC"> like that maybe there's a</font>

1487
00:52:11,540 --> 00:52:14,480
predictable system counter that at

1488
00:52:12,890 --> 00:52:17,060
certain<font color="#E5E5E5"> times is going to be set</font><font color="#CCCCCC"> to a</font>

1489
00:52:14,480 --> 00:52:20,380
certain you<font color="#E5E5E5"> know value so that is a</font>

1490
00:52:17,060 --> 00:52:22,779
certain<font color="#E5E5E5"> case that could be useful</font><font color="#CCCCCC"> is it</font>

1491
00:52:20,380 --> 00:52:27,890
[Music]

1492
00:52:22,780 --> 00:52:30,020
yeah yeah<font color="#CCCCCC"> I have not explored that but</font>

1493
00:52:27,890 --> 00:52:32,359
that is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is a good point his point</font>

1494
00:52:30,020 --> 00:52:34,190
<font color="#E5E5E5">was that a certain piece of</font><font color="#CCCCCC"> useful data</font>

1495
00:52:32,359 --> 00:52:36,380
<font color="#E5E5E5">may be IP addresses</font><font color="#CCCCCC"> maybe if</font><font color="#E5E5E5"> you know</font>

1496
00:52:34,190 --> 00:52:37,910
that the<font color="#E5E5E5"> octet</font><font color="#CCCCCC"> of an IP address</font><font color="#E5E5E5"> are</font>

1497
00:52:36,380 --> 00:52:39,830
being stored as a specific address then

1498
00:52:37,910 --> 00:52:42,618
maybe you could make use of those so

1499
00:52:39,830 --> 00:52:45,640
yeah<font color="#E5E5E5"> very</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> point questions</font>

1500
00:52:42,619 --> 00:52:45,640
yes sir

1501
00:52:56,640 --> 00:53:01,089
well the question is is how can we

1502
00:52:59,350 --> 00:53:03,279
prevent people from<font color="#E5E5E5"> using this approach</font>

1503
00:53:01,090 --> 00:53:05,920
and the answer is<font color="#E5E5E5"> you know it's never</font>

1504
00:53:03,280 --> 00:53:07,240
<font color="#CCCCCC">simple right</font><font color="#E5E5E5"> if there are a couple</font>

1505
00:53:05,920 --> 00:53:08,950
approaches you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> take as you mentioned</font>

1506
00:53:07,240 --> 00:53:10,479
you know<font color="#E5E5E5"> maybe we could try to prevent</font>

1507
00:53:08,950 --> 00:53:13,600
buffer<font color="#E5E5E5"> overflows or something in</font><font color="#CCCCCC"> general</font>

1508
00:53:10,480 --> 00:53:15,730
along those lines<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> if you prevent you</font>

1509
00:53:13,600 --> 00:53:16,810
<font color="#E5E5E5">know from the source then yeah</font><font color="#CCCCCC"> all the</font>

1510
00:53:15,730 --> 00:53:19,000
things down<font color="#E5E5E5"> the line</font><font color="#CCCCCC"> will not be</font>

1511
00:53:16,810 --> 00:53:20,680
possible<font color="#CCCCCC"> but as we've all seen</font>

1512
00:53:19,000 --> 00:53:22,840
preventing buffer overflows is a very

1513
00:53:20,680 --> 00:53:25,540
<font color="#E5E5E5">very hard problem</font><font color="#CCCCCC"> still having problems</font>

1514
00:53:22,840 --> 00:53:28,030
<font color="#E5E5E5">with it today</font><font color="#CCCCCC"> but in terms of maybe</font>

1515
00:53:25,540 --> 00:53:29,020
mitigating this specific approach is you

1516
00:53:28,030 --> 00:53:30,790
know take<font color="#CCCCCC"> the slide that</font><font color="#E5E5E5"> talks about</font>

1517
00:53:29,020 --> 00:53:33,070
<font color="#E5E5E5">some of the mitigating</font><font color="#CCCCCC"> factors we saw</font>

1518
00:53:30,790 --> 00:53:34,840
that we rely<font color="#E5E5E5"> on the location of this</font>

1519
00:53:33,070 --> 00:53:37,510
<font color="#E5E5E5">temple address</font><font color="#CCCCCC"> being predictable</font><font color="#E5E5E5"> and</font>

1520
00:53:34,840 --> 00:53:38,410
reliable<font color="#CCCCCC"> for</font><font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> there are targets</font>

1521
00:53:37,510 --> 00:53:40,720
that we're<font color="#E5E5E5"> talking with that we're going</font>

1522
00:53:38,410 --> 00:53:43,390
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be attacking so if that is a variable</font>

1523
00:53:40,720 --> 00:53:46,509
attribute at this point then now no

1524
00:53:43,390 --> 00:53:47,710
<font color="#E5E5E5">longer can we make use of this so if we</font>

1525
00:53:46,510 --> 00:53:48,880
didn't know the temporal address is

1526
00:53:47,710 --> 00:53:50,440
looking at a specific<font color="#E5E5E5"> address so the</font>

1527
00:53:48,880 --> 00:53:52,120
address it was<font color="#E5E5E5"> located at was pushed</font>

1528
00:53:50,440 --> 00:53:54,010
around between<font color="#E5E5E5"> instances of a process</font>

1529
00:53:52,120 --> 00:53:57,490
then<font color="#E5E5E5"> no</font><font color="#CCCCCC"> longer can we</font><font color="#E5E5E5"> use this approach</font>

1530
00:53:54,010 --> 00:54:00,750
<font color="#E5E5E5">so that's one way of</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> there</font>

1531
00:53:57,490 --> 00:54:00,750
questions<font color="#CCCCCC"> yes sir</font>

1532
00:54:03,960 --> 00:54:12,880
yeah<font color="#E5E5E5"> okay the question is how does it</font>

1533
00:54:10,240 --> 00:54:14,319
<font color="#E5E5E5">transition for instance the</font><font color="#CCCCCC"> EI XD IP</font>

1534
00:54:12,880 --> 00:54:16,570
how does that<font color="#CCCCCC"> help</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> with an exploit</font>

1535
00:54:14,320 --> 00:54:18,130
<font color="#CCCCCC">the answer that</font><font color="#E5E5E5"> question is let's say</font>

1536
00:54:16,570 --> 00:54:20,200
when you're when you trigger<font color="#E5E5E5"> this</font>

1537
00:54:18,130 --> 00:54:23,380
vulnerability<font color="#CCCCCC"> you trigger the bug you</font>

1538
00:54:20,200 --> 00:54:25,480
<font color="#E5E5E5">override something the register state is</font>

1539
00:54:23,380 --> 00:54:26,680
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be of a certain</font><font color="#E5E5E5"> you know</font>

1540
00:54:25,480 --> 00:54:28,960
setting and it's going<font color="#E5E5E5"> to probably be</font>

1541
00:54:26,680 --> 00:54:30,899
predictable so for instance after<font color="#E5E5E5"> your</font>

1542
00:54:28,960 --> 00:54:34,060
flow occurs let's say the<font color="#CCCCCC"> EAX register</font>

1543
00:54:30,900 --> 00:54:36,010
<font color="#E5E5E5">points into a buffer</font><font color="#CCCCCC"> that you control so</font>

1544
00:54:34,060 --> 00:54:37,810
it<font color="#E5E5E5"> points into my you know shell code or</font>

1545
00:54:36,010 --> 00:54:39,580
whatever<font color="#E5E5E5"> the case may be since I can</font>

1546
00:54:37,810 --> 00:54:41,130
control since<font color="#E5E5E5"> I in that case I would</font>

1547
00:54:39,580 --> 00:54:43,840
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> use the state transition between</font>

1548
00:54:41,130 --> 00:54:45,400
like a call<font color="#CCCCCC"> ei X which will</font><font color="#E5E5E5"> then</font>

1549
00:54:43,840 --> 00:54:47,770
transfer control into whatever<font color="#E5E5E5"> the value</font>

1550
00:54:45,400 --> 00:54:49,870
is<font color="#E5E5E5"> in EAX and then take control</font><font color="#CCCCCC"> of the</font>

1551
00:54:47,770 --> 00:54:51,790
IP and now I'm running<font color="#E5E5E5"> the code from my</font>

1552
00:54:49,870 --> 00:54:53,080
buffer<font color="#E5E5E5"> so that's basically the</font><font color="#CCCCCC"> point of</font>

1553
00:54:51,790 --> 00:54:54,970
<font color="#E5E5E5">the transition is the register would</font>

1554
00:54:53,080 --> 00:54:56,590
<font color="#E5E5E5">point and is something that you control</font>

1555
00:54:54,970 --> 00:54:59,939
that<font color="#E5E5E5"> you can then it's gaining control</font>

1556
00:54:56,590 --> 00:55:06,840
<font color="#E5E5E5">meaningful execution flow so yes</font>

1557
00:54:59,940 --> 00:55:06,840
<font color="#CCCCCC">other questions oh yes</font><font color="#E5E5E5"> sir</font>

1558
00:55:09,730 --> 00:55:14,210
yeah I mean this is<font color="#E5E5E5"> as with all things</font>

1559
00:55:12,530 --> 00:55:15,500
<font color="#CCCCCC">the selection of a return address and</font>

1560
00:55:14,210 --> 00:55:16,880
<font color="#E5E5E5">things of that sort</font>

1561
00:55:15,500 --> 00:55:18,290
contend to be very vulnerability

1562
00:55:16,880 --> 00:55:20,390
dependent if you're using the typical

1563
00:55:18,290 --> 00:55:21,680
<font color="#CCCCCC">approach static return addresses</font><font color="#E5E5E5"> or</font>

1564
00:55:20,390 --> 00:55:23,240
something of that<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> you're gonna need</font>

1565
00:55:21,680 --> 00:55:25,549
<font color="#E5E5E5">to depend on what</font><font color="#CCCCCC"> the DLL</font><font color="#E5E5E5"> is the earth</font>

1566
00:55:23,240 --> 00:55:27,439
that are<font color="#E5E5E5"> loaded into memory with</font>

1567
00:55:25,550 --> 00:55:28,970
<font color="#CCCCCC">temporal return addresses the</font>

1568
00:55:27,440 --> 00:55:30,320
vulnerability in question you<font color="#CCCCCC"> know how</font>

1569
00:55:28,970 --> 00:55:31,819
<font color="#CCCCCC">you're overflowing</font><font color="#E5E5E5"> the buffer is still a</font>

1570
00:55:30,320 --> 00:55:34,510
variable but making use of these

1571
00:55:31,820 --> 00:55:36,680
temporal addresses is still<font color="#CCCCCC"> universal</font><font color="#E5E5E5"> so</font>

1572
00:55:34,510 --> 00:55:37,970
all you do<font color="#E5E5E5"> is you plug them in is your</font>

1573
00:55:36,680 --> 00:55:39,410
return address<font color="#E5E5E5"> or whatever</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is that's</font>

1574
00:55:37,970 --> 00:55:46,490
getting control of execution flow and

1575
00:55:39,410 --> 00:55:47,899
that takes takes it from there<font color="#CCCCCC"> so it's</font>

1576
00:55:46,490 --> 00:55:50,330
<font color="#E5E5E5">hard to figure out like which vector</font>

1577
00:55:47,900 --> 00:55:51,859
<font color="#CCCCCC">using to get</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> it really just</font>

1578
00:55:50,330 --> 00:55:54,549
depends<font color="#E5E5E5"> on the vulnerability in question</font>

1579
00:55:51,859 --> 00:55:57,080
I mean<font color="#E5E5E5"> you'll get a pretty good idea</font>

1580
00:55:54,550 --> 00:55:58,460
<font color="#CCCCCC">once once you</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> you</font>

1581
00:55:57,080 --> 00:56:00,410
<font color="#CCCCCC">can say oh well this is a stack overflow</font>

1582
00:55:58,460 --> 00:56:02,359
I'm overriding the return address maybe

1583
00:56:00,410 --> 00:56:05,118
I'm overriding<font color="#E5E5E5"> the registered exception</font>

1584
00:56:02,359 --> 00:56:07,160
handlers<font color="#CCCCCC"> things like that</font><font color="#E5E5E5"> oh this is</font><font color="#CCCCCC"> a</font>

1585
00:56:05,119 --> 00:56:08,630
heap overflow<font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> get a pretty good</font>

1586
00:56:07,160 --> 00:56:10,339
<font color="#E5E5E5">idea real quick on what the type of</font>

1587
00:56:08,630 --> 00:56:12,440
<font color="#E5E5E5">vulnerability is and then it's up to you</font>

1588
00:56:10,339 --> 00:56:14,089
to<font color="#CCCCCC"> figure out a way to leverage</font><font color="#E5E5E5"> that</font>

1589
00:56:12,440 --> 00:56:15,800
vulnerability<font color="#E5E5E5"> and do getting control of</font>

1590
00:56:14,089 --> 00:56:25,359
execution<font color="#CCCCCC"> flow which is</font><font color="#E5E5E5"> the whole point</font>

1591
00:56:15,800 --> 00:56:29,210
<font color="#E5E5E5">of exploitation so oh what's that okay</font>

1592
00:56:25,359 --> 00:56:30,230
yeah<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> yeah thanks for minding</font><font color="#E5E5E5"> uh one</font>

1593
00:56:29,210 --> 00:56:32,060
interesting<font color="#CCCCCC"> thing that we've actually</font>

1594
00:56:30,230 --> 00:56:33,320
thought<font color="#CCCCCC"> about doing a Metasploit is you</font>

1595
00:56:32,060 --> 00:56:35,330
know<font color="#E5E5E5"> taking what we've talked about here</font>

1596
00:56:33,320 --> 00:56:36,920
and we'll plug something<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

1597
00:56:35,330 --> 00:56:38,540
<font color="#E5E5E5">Metasploit</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> now most of our</font>

1598
00:56:36,920 --> 00:56:40,880
exploits<font color="#E5E5E5"> have you know static return</font>

1599
00:56:38,540 --> 00:56:42,440
addresses<font color="#CCCCCC"> and everything</font><font color="#E5E5E5"> they're relying</font>

1600
00:56:40,880 --> 00:56:44,869
on certain DLL is being loaded and

1601
00:56:42,440 --> 00:56:46,609
<font color="#E5E5E5">target specific and yadda yadda</font><font color="#CCCCCC"> so</font>

1602
00:56:44,869 --> 00:56:48,980
<font color="#CCCCCC">wouldn't it be</font><font color="#E5E5E5"> funny if we modified</font>

1603
00:56:46,609 --> 00:56:51,109
<font color="#CCCCCC">Metasploit to have target</font><font color="#E5E5E5"> or time</font>

1604
00:56:48,980 --> 00:56:52,580
specific targets so now all<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> do</font>

1605
00:56:51,109 --> 00:56:55,700
is when<font color="#CCCCCC"> you go to exploit something</font><font color="#E5E5E5"> you</font>

1606
00:56:52,580 --> 00:56:57,410
say<font color="#E5E5E5"> I'm going to depend</font><font color="#CCCCCC"> on the time and</font>

1607
00:56:55,700 --> 00:56:58,549
here's what I know the time will be<font color="#E5E5E5"> this</font>

1608
00:56:57,410 --> 00:57:00,170
<font color="#E5E5E5">is what the current time on</font><font color="#CCCCCC"> the person's</font>

1609
00:56:58,550 --> 00:57:01,820
machine is and here's the instruction

1610
00:57:00,170 --> 00:57:04,580
<font color="#E5E5E5">that I want to use an ESP</font><font color="#CCCCCC"> to EIP</font>

1611
00:57:01,820 --> 00:57:06,680
transition<font color="#CCCCCC"> so what if Metasploit</font><font color="#E5E5E5"> will do</font>

1612
00:57:04,580 --> 00:57:09,589
then is you'll say exploit and it'll say

1613
00:57:06,680 --> 00:57:11,930
you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> waiting</font><font color="#E5E5E5"> three days 14 hours</font><font color="#CCCCCC"> 2</font>

1614
00:57:09,589 --> 00:57:14,720
seconds until<font color="#CCCCCC"> the time occurs and then</font>

1615
00:57:11,930 --> 00:57:17,230
once that<font color="#E5E5E5"> time window comes up kicks off</font>

1616
00:57:14,720 --> 00:57:19,089
the exploit<font color="#E5E5E5"> uses that</font><font color="#CCCCCC"> 10</font>

1617
00:57:17,230 --> 00:57:20,290
<font color="#CCCCCC">Rolle</font><font color="#E5E5E5"> address since it will now contain</font>

1618
00:57:19,090 --> 00:57:22,000
the viable instruction<font color="#E5E5E5"> that you want to</font>

1619
00:57:20,290 --> 00:57:24,190
use<font color="#E5E5E5"> use it as a return</font><font color="#CCCCCC"> address</font>

1620
00:57:22,000 --> 00:57:27,100
gain<font color="#CCCCCC"> control of execution flow and thing</font>

1621
00:57:24,190 --> 00:57:28,810
<font color="#E5E5E5">so that was just kind of funny thing may</font>

1622
00:57:27,100 --> 00:57:29,618
<font color="#E5E5E5">not do it but just kind of funny thing</font>

1623
00:57:28,810 --> 00:57:33,070
<font color="#CCCCCC">he may be well throw on the Metasploit</font>

1624
00:57:29,619 --> 00:57:37,859
or something<font color="#CCCCCC"> as kind of</font><font color="#E5E5E5"> a joke</font><font color="#CCCCCC"> so any</font>

1625
00:57:33,070 --> 00:57:37,859
<font color="#E5E5E5">other questions yes sir</font>

1626
00:57:46,600 --> 00:57:49,810
<font color="#CCCCCC">a good question he asked what we were</font>

1627
00:57:48,430 --> 00:57:51,549
looking<font color="#E5E5E5"> at shared user data did we find</font>

1628
00:57:49,810 --> 00:57:54,250
any other<font color="#CCCCCC"> op</font><font color="#E5E5E5"> codes that might be useful</font>

1629
00:57:51,550 --> 00:57:57,130
<font color="#E5E5E5">for exploitation in that area of memory</font>

1630
00:57:54,250 --> 00:57:58,359
<font color="#E5E5E5">the answer is we've looked before some</font>

1631
00:57:57,130 --> 00:58:00,520
<font color="#E5E5E5">of the problems</font><font color="#CCCCCC"> that you run</font><font color="#E5E5E5"> into is</font>

1632
00:57:58,359 --> 00:58:03,160
while shared user data is backwards

1633
00:58:00,520 --> 00:58:04,660
compatible<font color="#CCCCCC"> it has to offset</font><font color="#E5E5E5"> from</font>

1634
00:58:03,160 --> 00:58:06,100
previous<font color="#E5E5E5"> versions the operating system</font>

1635
00:58:04,660 --> 00:58:07,350
due to<font color="#E5E5E5"> the fact</font><font color="#CCCCCC"> that things will depend</font>

1636
00:58:06,100 --> 00:58:10,540
<font color="#E5E5E5">on it and everything</font>

1637
00:58:07,350 --> 00:58:11,589
generally speaking<font color="#E5E5E5"> we didn't find any</font>

1638
00:58:10,540 --> 00:58:13,180
that were particularly<font color="#E5E5E5"> useful for</font>

1639
00:58:11,590 --> 00:58:14,470
exploitation like some of the stuff that

1640
00:58:13,180 --> 00:58:16,960
you find<font color="#E5E5E5"> in earlier versions</font><font color="#CCCCCC"> of Windows</font>

1641
00:58:14,470 --> 00:58:18,879
2000<font color="#CCCCCC"> and earlier versions of XP</font><font color="#E5E5E5"> you'll</font>

1642
00:58:16,960 --> 00:58:20,740
find that the instructions that<font color="#E5E5E5"> are used</font>

1643
00:58:18,880 --> 00:58:21,820
to transition into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> for a</font>

1644
00:58:20,740 --> 00:58:23,410
system call or<font color="#E5E5E5"> something along those</font>

1645
00:58:21,820 --> 00:58:25,390
lines<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be found in share user data</font>

1646
00:58:23,410 --> 00:58:27,580
<font color="#E5E5E5">one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> reasons why it was executable</font>

1647
00:58:25,390 --> 00:58:29,859
but now it's<font color="#E5E5E5"> changed but for</font>

1648
00:58:27,580 --> 00:58:31,330
<font color="#CCCCCC">exploitation purposes</font><font color="#E5E5E5"> unless you can get</font>

1649
00:58:29,859 --> 00:58:33,730
<font color="#CCCCCC">your register state set up in such a</font><font color="#E5E5E5"> way</font>

1650
00:58:31,330 --> 00:58:35,140
that<font color="#E5E5E5"> you can make use of it</font><font color="#CCCCCC"> doing a</font>

1651
00:58:33,730 --> 00:58:36,190
<font color="#CCCCCC">direct transition</font><font color="#E5E5E5"> to a system call or</font>

1652
00:58:35,140 --> 00:58:38,920
<font color="#E5E5E5">something like that's not particularly</font>

1653
00:58:36,190 --> 00:58:40,810
feasible or useful<font color="#E5E5E5"> but haven't</font><font color="#CCCCCC"> found any</font>

1654
00:58:38,920 --> 00:58:43,270
other<font color="#E5E5E5"> instructions that you can actually</font>

1655
00:58:40,810 --> 00:58:45,340
make use of that<font color="#E5E5E5"> would be actually</font>

1656
00:58:43,270 --> 00:58:48,850
useful<font color="#CCCCCC"> for exploitation</font><font color="#E5E5E5"> in the general</font>

1657
00:58:45,340 --> 00:58:51,840
sense<font color="#CCCCCC"> so your</font><font color="#E5E5E5"> question other questions</font>

1658
00:58:48,850 --> 00:58:51,839
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> sir</font>

1659
00:59:11,070 --> 00:59:15,120
yeah yeah<font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> your Girdhar on</font>

1660
00:59:13,800 --> 00:59:16,920
your question is why don't<font color="#E5E5E5"> you just go</font>

1661
00:59:15,120 --> 00:59:19,049
right<font color="#E5E5E5"> into your buffer is that right</font>

1662
00:59:16,920 --> 00:59:21,030
<font color="#CCCCCC">okay so the question is why don't</font><font color="#E5E5E5"> you</font>

1663
00:59:19,050 --> 00:59:21,870
<font color="#E5E5E5">just return right into your</font><font color="#CCCCCC"> shell code</font>

1664
00:59:21,030 --> 00:59:24,300
right where it's at

1665
00:59:21,870 --> 00:59:25,920
<font color="#E5E5E5">and the answer this not exactly</font><font color="#CCCCCC"> a simple</font>

1666
00:59:24,300 --> 00:59:27,900
<font color="#E5E5E5">or obvious one is that a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

1667
00:59:25,920 --> 00:59:30,090
times you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know where it's at</font>

1668
00:59:27,900 --> 00:59:31,170
if your buffer is on the stack<font color="#CCCCCC"> or</font>

1669
00:59:30,090 --> 00:59:32,280
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that maybe you're in a</font>

1670
00:59:31,170 --> 00:59:33,420
threaded application there have been

1671
00:59:32,280 --> 00:59:35,310
lots of stacks allocate and deallocate

1672
00:59:33,420 --> 00:59:37,200
and stuff like that<font color="#CCCCCC"> you don't actually</font>

1673
00:59:35,310 --> 00:59:38,910
know where your buffer is located but

1674
00:59:37,200 --> 00:59:41,069
you do know that<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> located in a</font>

1675
00:59:38,910 --> 00:59:42,540
register<font color="#CCCCCC"> so by returning into a</font>

1676
00:59:41,070 --> 00:59:45,150
struction<font color="#E5E5E5"> that makes use of that</font>

1677
00:59:42,540 --> 00:59:47,460
register<font color="#CCCCCC"> and some indirect fashion</font><font color="#E5E5E5"> you</font>

1678
00:59:45,150 --> 00:59:49,710
then gain reliable<font color="#CCCCCC"> control of execution</font>

1679
00:59:47,460 --> 00:59:51,840
<font color="#E5E5E5">flow rather than depending on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> specific</font>

1680
00:59:49,710 --> 01:00:11,490
address<font color="#E5E5E5"> that may not be portable and so</font>

1681
00:59:51,840 --> 01:00:12,870
on and so forth<font color="#CCCCCC"> so good question yes are</font>

1682
01:00:11,490 --> 01:00:14,669
you talking about like shared video

1683
01:00:12,870 --> 01:00:16,140
memory<font color="#E5E5E5"> or something like that</font><font color="#CCCCCC"> the</font>

1684
01:00:14,670 --> 01:00:18,150
question is have<font color="#CCCCCC"> you looked at other</font>

1685
01:00:16,140 --> 01:00:19,529
like memory mapped segments or something

1686
01:00:18,150 --> 01:00:20,780
like<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> mapped directly</font><font color="#E5E5E5"> to video</font>

1687
01:00:19,530 --> 01:00:23,340
<font color="#CCCCCC">RAM and stuff like that</font>

1688
01:00:20,780 --> 01:00:25,170
have not looked at it<font color="#E5E5E5"> but I mean yes</font>

1689
01:00:23,340 --> 01:00:27,030
that<font color="#CCCCCC"> is you know one case yeah you</font>

1690
01:00:25,170 --> 01:00:28,920
probably<font color="#E5E5E5"> if you can find you know if you</font>

1691
01:00:27,030 --> 01:00:32,160
use the telescope perhaps<font color="#E5E5E5"> you telescope</font>

1692
01:00:28,920 --> 01:00:34,410
<font color="#E5E5E5">might find something</font><font color="#CCCCCC"> in there yeah yeah</font>

1693
01:00:32,160 --> 01:00:35,700
yeah so so telescope may find<font color="#E5E5E5"> something</font>

1694
01:00:34,410 --> 01:00:36,990
in video RAM for the<font color="#E5E5E5"> specific</font>

1695
01:00:35,700 --> 01:00:41,669
application that you<font color="#CCCCCC"> could make use of</font>

1696
01:00:36,990 --> 01:00:43,080
so yes yeah yeah exactly<font color="#CCCCCC"> yeah yeah the</font>

1697
01:00:41,670 --> 01:00:44,340
quick point was there might be

1698
01:00:43,080 --> 01:00:46,740
incrementing counters<font color="#E5E5E5"> and yes like</font>

1699
01:00:44,340 --> 01:00:47,850
<font color="#CCCCCC">brought the processor statistics and</font>

1700
01:00:46,740 --> 01:00:49,709
<font color="#E5E5E5">things like</font><font color="#CCCCCC"> that other incrementing</font>

1701
01:00:47,850 --> 01:00:51,420
counters<font color="#E5E5E5"> number of seconds and</font><font color="#CCCCCC"> programs</font>

1702
01:00:49,710 --> 01:00:53,520
start things like that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean yes at</font>

1703
01:00:51,420 --> 01:00:56,960
some<font color="#CCCCCC"> point</font><font color="#E5E5E5"> they will be set to</font><font color="#CCCCCC"> a certain</font>

1704
01:00:53,520 --> 01:00:56,960
value<font color="#CCCCCC"> and you can make use of them so</font>

1705
01:01:03,430 --> 01:01:20,379
yes yeah yeah

1706
01:01:18,430 --> 01:01:22,779
<font color="#CCCCCC">I mean yeah we totally</font><font color="#E5E5E5"> encourage that</font>

1707
01:01:20,380 --> 01:01:24,910
<font color="#CCCCCC">you know Metasploit is not you know some</font>

1708
01:01:22,779 --> 01:01:26,349
elitist group where we're the only guys

1709
01:01:24,910 --> 01:01:27,848
working<font color="#E5E5E5"> on this you know we</font><font color="#CCCCCC"> encourage</font>

1710
01:01:26,349 --> 01:01:29,079
you know everybody in the<font color="#CCCCCC"> community if</font>

1711
01:01:27,849 --> 01:01:31,270
this is<font color="#E5E5E5"> something that interests</font><font color="#CCCCCC"> you</font>

1712
01:01:29,079 --> 01:01:32,529
<font color="#CCCCCC">play with it you know think about it</font>

1713
01:01:31,270 --> 01:01:34,450
<font color="#CCCCCC">think about</font><font color="#E5E5E5"> other ideas</font><font color="#CCCCCC"> shoot</font><font color="#E5E5E5"> over to</font><font color="#CCCCCC"> us</font>

1714
01:01:32,529 --> 01:01:35,710
<font color="#CCCCCC">you know collaborate that's what the</font>

1715
01:01:34,450 --> 01:01:36,730
whole<font color="#CCCCCC"> point is here so and that's part</font>

1716
01:01:35,710 --> 01:01:39,400
of the reason why blue hats here

1717
01:01:36,730 --> 01:01:42,119
collaborate on ideas<font color="#CCCCCC"> getting people</font>

1718
01:01:39,400 --> 01:01:54,730
thinking<font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> good point</font>

1719
01:01:42,119 --> 01:01:57,940
anything else is it yeah<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> question</font>

1720
01:01:54,730 --> 01:01:59,470
is other<font color="#E5E5E5"> than jump ESP push</font><font color="#CCCCCC"> DSP red are</font>

1721
01:01:57,940 --> 01:02:00,990
there any other<font color="#E5E5E5"> dangerous opcodes maybe</font>

1722
01:01:59,470 --> 01:02:04,089
that you<font color="#E5E5E5"> could use to transfer control</font>

1723
01:02:00,990 --> 01:02:05,740
for that direct you and<font color="#E5E5E5"> everybody</font><font color="#CCCCCC"> else</font>

1724
01:02:04,089 --> 01:02:07,900
<font color="#E5E5E5">in the audience</font><font color="#CCCCCC"> to go take a look at the</font>

1725
01:02:05,740 --> 01:02:09,339
Metasploit<font color="#CCCCCC"> opcode</font><font color="#E5E5E5"> database these are</font>

1726
01:02:07,900 --> 01:02:11,349
just<font color="#E5E5E5"> some of the instructions that we've</font>

1727
01:02:09,339 --> 01:02:14,078
identified<font color="#E5E5E5"> that could be useful and</font>

1728
01:02:11,349 --> 01:02:16,000
exploitation scenarios<font color="#E5E5E5"> so yeah there</font>

1729
01:02:14,079 --> 01:02:17,109
there are others it<font color="#E5E5E5"> just depends on the</font>

1730
01:02:16,000 --> 01:02:18,760
vulnerability depends on what the

1731
01:02:17,109 --> 01:02:20,078
registers<font color="#E5E5E5"> are set to things like that</font>

1732
01:02:18,760 --> 01:02:26,609
<font color="#E5E5E5">but yes there are other ones</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

1733
01:02:20,079 --> 01:02:26,609
could use so<font color="#E5E5E5"> okay</font>

1734
01:02:36,060 --> 01:02:40,470
yes correct<font color="#CCCCCC"> so don't get everybody beat</font>

1735
01:02:39,060 --> 01:02:42,090
<font color="#CCCCCC">back</font><font color="#E5E5E5"> round the Metasploit opcode</font>

1736
01:02:40,470 --> 01:02:44,189
database<font color="#E5E5E5"> earlier in the presentation I</font>

1737
01:02:42,090 --> 01:02:46,620
referred<font color="#CCCCCC"> to these static</font><font color="#E5E5E5"> addresses you</font>

1738
01:02:44,190 --> 01:02:48,210
know inside<font color="#CCCCCC"> dll's things like that</font><font color="#E5E5E5"> the</font>

1739
01:02:46,620 --> 01:02:50,279
purpose of the Metasploit opcode

1740
01:02:48,210 --> 01:02:52,710
database was to go and build this<font color="#CCCCCC"> croc</font>

1741
01:02:50,280 --> 01:02:54,420
referenceable database between different

1742
01:02:52,710 --> 01:02:57,360
<font color="#E5E5E5">versions of Windows</font><font color="#CCCCCC"> on different service</font>

1743
01:02:54,420 --> 01:02:59,940
packs so we'll take NT 2000 XP 2003

1744
01:02:57,360 --> 01:03:01,860
server<font color="#E5E5E5"> SP 0 SP 1 so on and so forth</font>

1745
01:02:59,940 --> 01:03:03,300
<font color="#CCCCCC">we'll take</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of the default images</font>

1746
01:03:01,860 --> 01:03:05,940
that<font color="#E5E5E5"> come with</font><font color="#CCCCCC"> it all the system images</font>

1747
01:03:03,300 --> 01:03:07,710
and we'll run a scan on it<font color="#E5E5E5"> we will scan</font>

1748
01:03:05,940 --> 01:03:09,360
<font color="#CCCCCC">for all of those instructions that could</font>

1749
01:03:07,710 --> 01:03:10,920
<font color="#E5E5E5">be potentially useful for an</font>

1750
01:03:09,360 --> 01:03:12,330
exploitation scenario and then we'll

1751
01:03:10,920 --> 01:03:14,280
store those<font color="#CCCCCC"> in the database</font>

1752
01:03:12,330 --> 01:03:15,720
so then what that<font color="#E5E5E5"> allows</font><font color="#CCCCCC"> us to do is</font>

1753
01:03:14,280 --> 01:03:17,640
then when we're writing an exploit or

1754
01:03:15,720 --> 01:03:19,709
something we can<font color="#E5E5E5"> then pop into window</font>

1755
01:03:17,640 --> 01:03:21,629
bug and we can say well this application

1756
01:03:19,710 --> 01:03:23,190
has<font color="#E5E5E5"> these modules loaded let's see what</font>

1757
01:03:21,630 --> 01:03:24,990
the opcode database tells me might<font color="#CCCCCC"> be</font>

1758
01:03:23,190 --> 01:03:27,270
cross-reference table<font color="#E5E5E5"> you know to make</font>

1759
01:03:24,990 --> 01:03:29,100
my exploit more<font color="#CCCCCC"> Universal</font><font color="#E5E5E5"> because the</font>

1760
01:03:27,270 --> 01:03:30,900
more I can use the same<font color="#CCCCCC"> address across</font>

1761
01:03:29,100 --> 01:03:32,190
different<font color="#CCCCCC"> operating system revisions the</font>

1762
01:03:30,900 --> 01:03:33,420
more portable<font color="#E5E5E5"> it's going to be the less</font>

1763
01:03:32,190 --> 01:03:35,460
target determination I'm going to have

1764
01:03:33,420 --> 01:03:37,230
to use<font color="#E5E5E5"> so this is a basically</font><font color="#CCCCCC"> different</font>

1765
01:03:35,460 --> 01:03:39,120
approach to taking making return

1766
01:03:37,230 --> 01:03:40,530
addresses<font color="#E5E5E5"> more liable</font><font color="#CCCCCC"> yeah I actually</font>

1767
01:03:39,120 --> 01:03:42,600
has also done a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> research into</font>

1768
01:03:40,530 --> 01:03:43,920
this with their<font color="#E5E5E5"> ear EEP</font><font color="#CCCCCC"> which is another</font>

1769
01:03:42,600 --> 01:03:45,480
approach<font color="#CCCCCC"> for</font><font color="#E5E5E5"> kind of trying to determine</font>

1770
01:03:43,920 --> 01:03:47,460
reliable return addresses<font color="#E5E5E5"> and that sort</font>

1771
01:03:45,480 --> 01:03:49,470
<font color="#E5E5E5">so that's kind of the point you can</font><font color="#CCCCCC"> just</font>

1772
01:03:47,460 --> 01:03:52,740
go and plop in your images that you have

1773
01:03:49,470 --> 01:03:54,029
<font color="#CCCCCC">loaded say which type of instruction</font>

1774
01:03:52,740 --> 01:03:55,649
you're trying to search for<font color="#E5E5E5"> and it will</font>

1775
01:03:54,030 --> 01:03:57,660
return<font color="#E5E5E5"> you the ones and the platforms</font>

1776
01:03:55,650 --> 01:03:59,280
that<font color="#E5E5E5"> they're compatible with so that's</font>

1777
01:03:57,660 --> 01:04:00,480
<font color="#E5E5E5">the basic</font><font color="#CCCCCC"> pool you can find that on</font><font color="#E5E5E5"> the</font>

1778
01:03:59,280 --> 01:04:05,120
Metasploit<font color="#E5E5E5"> site if you</font><font color="#CCCCCC"> want to check it</font>

1779
01:04:00,480 --> 01:04:05,120
<font color="#E5E5E5">out other questions</font>

1780
01:04:22,200 --> 01:04:27,180
see which one's of these appear when you

1781
01:04:24,930 --> 01:04:29,730
<font color="#CCCCCC">know and then I've got this timer thing</font>

1782
01:04:27,180 --> 01:04:53,879
<font color="#E5E5E5">so there's something that's sitting on</font>

1783
01:04:29,730 --> 01:04:54,920
your network<font color="#CCCCCC"> I know well</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> funny</font>

1784
01:04:53,880 --> 01:04:57,240
you<font color="#E5E5E5"> should mention that</font>

1785
01:04:54,920 --> 01:04:58,350
<font color="#CCCCCC">Metasploit 3.0 version</font><font color="#E5E5E5"> we're working on</font>

1786
01:04:57,240 --> 01:05:01,109
now in the<font color="#E5E5E5"> background</font><font color="#CCCCCC"> that we haven't</font>

1787
01:04:58,350 --> 01:05:03,150
<font color="#CCCCCC">released</font><font color="#E5E5E5"> yet is that</font><font color="#CCCCCC"> well we're actually</font>

1788
01:05:01,110 --> 01:05:04,740
<font color="#E5E5E5">planning on doing integration</font><font color="#CCCCCC"> in the</font>

1789
01:05:03,150 --> 01:05:06,600
<font color="#E5E5E5">opcode database through some web</font>

1790
01:05:04,740 --> 01:05:08,790
services or something<font color="#CCCCCC"> like that so what</font>

1791
01:05:06,600 --> 01:05:10,350
I<font color="#E5E5E5"> actually happen is exploits won't just</font>

1792
01:05:08,790 --> 01:05:12,180
have<font color="#E5E5E5"> these hard coded addresses that</font>

1793
01:05:10,350 --> 01:05:14,730
used in for return addresses<font color="#E5E5E5"> and said</font>

1794
01:05:12,180 --> 01:05:16,830
<font color="#E5E5E5">the exploits</font><font color="#CCCCCC"> we'll just say these are</font>

1795
01:05:14,730 --> 01:05:19,710
<font color="#CCCCCC">the modules</font><font color="#E5E5E5"> that are loaded</font>

1796
01:05:16,830 --> 01:05:21,660
go and find me<font color="#CCCCCC"> at</font><font color="#E5E5E5"> art you know find me a</font>

1797
01:05:19,710 --> 01:05:22,980
return address<font color="#E5E5E5"> by talking to the opcode</font>

1798
01:05:21,660 --> 01:05:24,660
database and maybe<font color="#E5E5E5"> pulling back in</font>

1799
01:05:22,980 --> 01:05:26,700
caching what the results are for<font color="#E5E5E5"> that</font>

1800
01:05:24,660 --> 01:05:28,200
specific vulnerability<font color="#E5E5E5"> tell me what</font>

1801
01:05:26,700 --> 01:05:29,790
return addresses I could use and the

1802
01:05:28,200 --> 01:05:31,230
interesting aspect of this is<font color="#CCCCCC"> that no</font>

1803
01:05:29,790 --> 01:05:32,490
longer<font color="#E5E5E5"> right now and</font><font color="#CCCCCC"> Metasploit the</font>

1804
01:05:31,230 --> 01:05:34,230
return addresses that we're using<font color="#CCCCCC"> are</font>

1805
01:05:32,490 --> 01:05:36,270
static so if you're writing an IDs

1806
01:05:34,230 --> 01:05:37,980
signature or something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> maybe</font>

1807
01:05:36,270 --> 01:05:40,710
<font color="#E5E5E5">you could write a dumb one that says</font>

1808
01:05:37,980 --> 01:05:42,630
well expect<font color="#CCCCCC"> this address</font><font color="#E5E5E5"> that you know</font>

1809
01:05:40,710 --> 01:05:45,240
these four<font color="#E5E5E5"> bytes at the specific offset</font>

1810
01:05:42,630 --> 01:05:46,560
in the packet<font color="#CCCCCC"> but now if we do what</font>

1811
01:05:45,240 --> 01:05:49,500
we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> call return address pooling</font>

1812
01:05:46,560 --> 01:05:50,310
<font color="#E5E5E5">all that you need to</font><font color="#CCCCCC"> do is you know</font>

1813
01:05:49,500 --> 01:05:52,020
we're gonna have<font color="#E5E5E5"> a whole set of</font>

1814
01:05:50,310 --> 01:05:53,370
<font color="#E5E5E5">addresses</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> could pick from so</font>

1815
01:05:52,020 --> 01:05:55,590
now<font color="#CCCCCC"> you</font><font color="#E5E5E5"> not instead of having just one</font>

1816
01:05:53,370 --> 01:05:58,470
return address for this<font color="#CCCCCC"> target</font><font color="#E5E5E5"> now we</font>

1817
01:05:55,590 --> 01:05:59,430
have<font color="#E5E5E5"> 50 so that</font><font color="#CCCCCC"> is one of the things</font>

1818
01:05:58,470 --> 01:06:02,450
that we're going<font color="#E5E5E5"> to be integrating</font>

1819
01:05:59,430 --> 01:06:02,450
probably for<font color="#CCCCCC"> Metasploit three</font>

