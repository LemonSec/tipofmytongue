1
00:00:00,030 --> 00:00:04,080
[Music]

2
00:00:01,700 --> 00:00:15,540
please welcome to the stage

3
00:00:04,080 --> 00:00:17,490
Tony Chen okay hear me hi my name is

4
00:00:15,540 --> 00:00:19,710
Tony Chen and today I want to talk to

5
00:00:17,490 --> 00:00:22,349
you about what we did on Xbox one to

6
00:00:19,710 --> 00:00:24,180
guard against physical attacks so the

7
00:00:22,350 --> 00:00:26,250
game console industry is a very funny

8
00:00:24,180 --> 00:00:28,439
industry the game consoles probably one

9
00:00:26,250 --> 00:00:31,198
the most physically attack computing

10
00:00:28,439 --> 00:00:34,860
devices humans ever made ever since the

11
00:00:31,199 --> 00:00:37,020
very first Atari game console for

12
00:00:34,860 --> 00:00:40,290
decades and decades every game console

13
00:00:37,020 --> 00:00:42,690
maker has had their consoles been hacked

14
00:00:40,290 --> 00:00:44,940
such that people can play pirated games

15
00:00:42,690 --> 00:00:47,010
in every game console maker tried to

16
00:00:44,940 --> 00:00:49,800
make it such a people can't hack it and

17
00:00:47,010 --> 00:00:52,500
yet they all failed spectacularly this

18
00:00:49,800 --> 00:00:55,610
trend continued for decades until the

19
00:00:52,500 --> 00:00:58,649
most recent generation Xbox one and ps4

20
00:00:55,610 --> 00:01:01,260
so I'm proud to say that the Xbox one

21
00:00:58,649 --> 00:01:03,719
which was shipped in 2013 for the last

22
00:01:01,260 --> 00:01:05,670
six years at least we have not seen any

23
00:01:03,719 --> 00:01:08,070
evidence that anybody wasn't able to

24
00:01:05,670 --> 00:01:12,260
break it for piracy or cheating and

25
00:01:08,070 --> 00:01:12,259
today I'm gonna talk about what we did

26
00:01:13,010 --> 00:01:19,920
to achieve that so just a little bit

27
00:01:16,770 --> 00:01:21,810
background on me my name is Tony Chen

28
00:01:19,920 --> 00:01:24,600
I'm currently a security architect in

29
00:01:21,810 --> 00:01:26,729
Microsoft I've been in Microsoft for 22

30
00:01:24,600 --> 00:01:30,059
years most of my career is working on

31
00:01:26,729 --> 00:01:33,929
Xbox working on Xbox Live and during a

32
00:01:30,060 --> 00:01:36,329
period of 2011 to 2013 I was the dead

33
00:01:33,930 --> 00:01:39,570
lead for the team that developed all the

34
00:01:36,329 --> 00:01:41,520
software for security software related

35
00:01:39,570 --> 00:01:45,929
to the Xbox one and that's why I'm

36
00:01:41,520 --> 00:01:49,020
presenting this so let's start with the

37
00:01:45,930 --> 00:01:51,990
goals we want to achieve here what what

38
00:01:49,020 --> 00:01:54,329
what do we want to do well it turns out

39
00:01:51,990 --> 00:01:58,500
there's two very unique business goals

40
00:01:54,329 --> 00:02:01,469
to the Xbox console business one is we

41
00:01:58,500 --> 00:02:04,350
want to prevent the piracy of games this

42
00:02:01,469 --> 00:02:06,750
is absolutely critical to the entire

43
00:02:04,350 --> 00:02:09,299
business the whole game console in

44
00:02:06,750 --> 00:02:12,090
Jersey works on a razor razor blade

45
00:02:09,300 --> 00:02:12,350
model we sell the console literally at

46
00:02:12,090 --> 00:02:14,900
all

47
00:02:12,350 --> 00:02:17,120
in order to see the market with a lot of

48
00:02:14,900 --> 00:02:19,580
consoles and then we recoup the money as

49
00:02:17,120 --> 00:02:21,730
games are being sold if people can

50
00:02:19,580 --> 00:02:24,740
pirate games were basically subsidizing

51
00:02:21,730 --> 00:02:27,230
subsidizing the world with low-cost

52
00:02:24,740 --> 00:02:29,750
computing devices and we would stop

53
00:02:27,230 --> 00:02:32,480
making X boxes and and and get out of

54
00:02:29,750 --> 00:02:34,720
this business if that happened so the

55
00:02:32,480 --> 00:02:37,010
fact that we need to stop piracy is

56
00:02:34,720 --> 00:02:39,050
fundamentally critical to the business

57
00:02:37,010 --> 00:02:41,959
it's not a nice-to-have feature for the

58
00:02:39,050 --> 00:02:43,730
X Box the other is cheating the previous

59
00:02:41,960 --> 00:02:45,710
talks gives you a very good sense what

60
00:02:43,730 --> 00:02:48,440
happens with cheating we also want to

61
00:02:45,710 --> 00:02:50,120
stop that on on xbox because people want

62
00:02:48,440 --> 00:02:52,609
to be God when they play with each other

63
00:02:50,120 --> 00:02:54,470
we want to build up Xbox Live as a cheap

64
00:02:52,610 --> 00:02:56,930
free environment where people can play

65
00:02:54,470 --> 00:02:59,810
fairly and win based on the skills on

66
00:02:56,930 --> 00:03:03,110
your fingers instead of your hacking

67
00:02:59,810 --> 00:03:06,740
skills so what do we technically need to

68
00:03:03,110 --> 00:03:08,600
do to achieve these goals well the most

69
00:03:06,740 --> 00:03:13,460
important thing is we have to maintain

70
00:03:08,600 --> 00:03:15,920
control of the CPU and we have to make

71
00:03:13,460 --> 00:03:18,320
it the C sure to CPU only signs only

72
00:03:15,920 --> 00:03:20,570
runs code that Microsoft signs and keeps

73
00:03:18,320 --> 00:03:22,790
on doing that and the important thing is

74
00:03:20,570 --> 00:03:24,220
we have to do this against the wishes of

75
00:03:22,790 --> 00:03:26,450
the Xbox owner

76
00:03:24,220 --> 00:03:28,310
unfortunately the Xbox owner is the

77
00:03:26,450 --> 00:03:30,380
person that wants to pirate games and

78
00:03:28,310 --> 00:03:32,600
cheats so he is going to physically

79
00:03:30,380 --> 00:03:34,820
attack the device in order to achieve

80
00:03:32,600 --> 00:03:36,200
the goal of taking over the CPU and

81
00:03:34,820 --> 00:03:37,090
that's why we have to guard against

82
00:03:36,200 --> 00:03:39,320
physical attacks

83
00:03:37,090 --> 00:03:41,210
besides that goal we also need to

84
00:03:39,320 --> 00:03:43,430
prevent the disclosure of the paint X

85
00:03:41,210 --> 00:03:47,420
games keep it secret for as long as we

86
00:03:43,430 --> 00:03:50,180
can and the third point is just that we

87
00:03:47,420 --> 00:03:52,549
need to we've realized both in the

88
00:03:50,180 --> 00:03:54,490
original Xbox and Xbox 360 generation

89
00:03:52,550 --> 00:03:57,800
that we will make lots of mistakes

90
00:03:54,490 --> 00:04:01,390
software mistakes and we have to be able

91
00:03:57,800 --> 00:04:03,950
to recover from these mistakes and and

92
00:04:01,390 --> 00:04:06,350
you know get ourselves out of them out

93
00:04:03,950 --> 00:04:10,880
of that that that world so we have to be

94
00:04:06,350 --> 00:04:12,290
able to recover from it so one thing I

95
00:04:10,880 --> 00:04:14,750
just want to briefly mention is that

96
00:04:12,290 --> 00:04:16,399
when I joined the Xbox world there's a

97
00:04:14,750 --> 00:04:18,410
lot of people from the windows org that

98
00:04:16,399 --> 00:04:21,289
also comes and I always have to explain

99
00:04:18,410 --> 00:04:23,240
to people why don't fundamentally my

100
00:04:21,290 --> 00:04:25,340
Xbox security is different than Windows

101
00:04:23,240 --> 00:04:25,600
security to most people both contain the

102
00:04:25,340 --> 00:04:27,250
word

103
00:04:25,600 --> 00:04:30,610
security in it it's got to be the same

104
00:04:27,250 --> 00:04:33,220
problem the problem is completely

105
00:04:30,610 --> 00:04:36,520
different so if for Windows security the

106
00:04:33,220 --> 00:04:39,880
problem is the PC owner is working with

107
00:04:36,520 --> 00:04:41,590
us Microsoft the OS vendor to guard

108
00:04:39,880 --> 00:04:45,219
against bad guys out on the internet

109
00:04:41,590 --> 00:04:47,049
taking over their computer for Xbox the

110
00:04:45,220 --> 00:04:50,470
owner is the bad guy

111
00:04:47,050 --> 00:04:52,690
so you fundamentally this piece of

112
00:04:50,470 --> 00:04:55,230
hardware to a bad guy and you have to

113
00:04:52,690 --> 00:04:57,910
treat them as as if they were malicious

114
00:04:55,230 --> 00:04:59,830
when you design the system the

115
00:04:57,910 --> 00:05:02,020
consequence of this is that you pretty

116
00:04:59,830 --> 00:05:02,770
much can't trust anything expose on the

117
00:05:02,020 --> 00:05:05,680
motherboard

118
00:05:02,770 --> 00:05:06,969
whether it's flash the hard drive the

119
00:05:05,680 --> 00:05:10,360
optical disc drive

120
00:05:06,970 --> 00:05:13,000
even DRAM everything exposed on the

121
00:05:10,360 --> 00:05:14,740
motherboard is fair game and I'll talk a

122
00:05:13,000 --> 00:05:18,040
little bit about how we designed this

123
00:05:14,740 --> 00:05:19,510
whole thing based on such a model so

124
00:05:18,040 --> 00:05:21,190
before we get there though I want to go

125
00:05:19,510 --> 00:05:24,370
through two examples just so that you

126
00:05:21,190 --> 00:05:26,920
get a flavor of what people actually do

127
00:05:24,370 --> 00:05:30,220
to hack game consoles both of these

128
00:05:26,920 --> 00:05:33,310
examples happen on the Xbox 360 so the

129
00:05:30,220 --> 00:05:36,670
first one is called the Kamikaze hack so

130
00:05:33,310 --> 00:05:38,800
let me set some background here the one

131
00:05:36,670 --> 00:05:42,100
of the ways people pirated games on Xbox

132
00:05:38,800 --> 00:05:44,560
360 is they instead of trying to break

133
00:05:42,100 --> 00:05:47,140
the CPU they broke the optical disc

134
00:05:44,560 --> 00:05:49,660
drive controller they basically modify

135
00:05:47,140 --> 00:05:52,270
the aural disk drive controller to lie

136
00:05:49,660 --> 00:05:54,520
to the CPU and say hey I got a genuine

137
00:05:52,270 --> 00:05:57,130
piece of plastic in my tray right here

138
00:05:54,520 --> 00:05:59,890
it's not burnt plastic trust me let the

139
00:05:57,130 --> 00:06:01,150
guy play the game by doing that they'd

140
00:05:59,890 --> 00:06:02,680
already achieved piracy because

141
00:06:01,150 --> 00:06:05,799
everybody can just burn their own this

142
00:06:02,680 --> 00:06:08,290
and you're done and so we fought this

143
00:06:05,800 --> 00:06:10,480
problem very early on and the

144
00:06:08,290 --> 00:06:12,130
fundamental issue is that we had to

145
00:06:10,480 --> 00:06:14,050
separate chips there was the optical

146
00:06:12,130 --> 00:06:15,550
disc drive DSP chip and there was a

147
00:06:14,050 --> 00:06:17,740
flash chip and because of the technology

148
00:06:15,550 --> 00:06:20,320
they were these were two distinctly

149
00:06:17,740 --> 00:06:23,920
separate chips so the flash chip was

150
00:06:20,320 --> 00:06:25,930
exposed on the PCB board on the optical

151
00:06:23,920 --> 00:06:27,910
disc drive and people can just clamp

152
00:06:25,930 --> 00:06:33,160
something onto it and reflash it with

153
00:06:27,910 --> 00:06:34,330
different code so one of the first ideas

154
00:06:33,160 --> 00:06:36,340
we came up with

155
00:06:34,330 --> 00:06:38,859
well what if we packaged these two

156
00:06:36,340 --> 00:06:40,450
things together on the same package

157
00:06:38,860 --> 00:06:42,850
so if you look at the picture on the

158
00:06:40,450 --> 00:06:45,190
upper left that's basically what we did

159
00:06:42,850 --> 00:06:47,740
we did the smaller chip dye on the top

160
00:06:45,190 --> 00:06:50,710
is the flash chip the bigger dye on the

161
00:06:47,740 --> 00:06:52,540
bottom is the DSP chip we basically

162
00:06:50,710 --> 00:06:55,299
program the flash we put it in the

163
00:06:52,540 --> 00:06:57,730
package we grounded the right enable pin

164
00:06:55,300 --> 00:07:00,070
on the flash and then we package this

165
00:06:57,730 --> 00:07:02,620
together thinking nobody's gonna touch

166
00:07:00,070 --> 00:07:04,599
this the flash is is sealed in there

167
00:07:02,620 --> 00:07:06,670
it's already written nobody can change

168
00:07:04,600 --> 00:07:08,740
it so what happened

169
00:07:06,670 --> 00:07:11,320
people started selling this kit on the

170
00:07:08,740 --> 00:07:14,680
lower right and this hack is called a

171
00:07:11,320 --> 00:07:16,960
kamikaze hack what this kit does is you

172
00:07:14,680 --> 00:07:19,330
use the the the funny-looking thing on

173
00:07:16,960 --> 00:07:22,120
the top to draw these lines on the chip

174
00:07:19,330 --> 00:07:23,620
to pinpoint an exact position and what

175
00:07:22,120 --> 00:07:25,840
is this exact position the exact

176
00:07:23,620 --> 00:07:27,550
position if you drill into it will lead

177
00:07:25,840 --> 00:07:30,310
to the right enable pin on the flash

178
00:07:27,550 --> 00:07:33,520
chip so then what you do is you take

179
00:07:30,310 --> 00:07:35,320
that that's that stick you start at that

180
00:07:33,520 --> 00:07:39,159
point and you connect the wire through

181
00:07:35,320 --> 00:07:41,380
an LED light supply voltage you keep on

182
00:07:39,160 --> 00:07:43,420
digging deeper and deeper until the LED

183
00:07:41,380 --> 00:07:46,150
light comes on that means you hit the

184
00:07:43,420 --> 00:07:48,220
right enable chip and the voltage is

185
00:07:46,150 --> 00:07:51,400
supplied to that that pin and at this

186
00:07:48,220 --> 00:07:53,820
point you reflash the the drug the flash

187
00:07:51,400 --> 00:07:56,289
because rights enabled right now and

188
00:07:53,820 --> 00:07:58,000
with a different firmware and you're

189
00:07:56,290 --> 00:07:59,620
backing game again you can lie to the

190
00:07:58,000 --> 00:08:02,590
CPU about whether you have a genuine

191
00:07:59,620 --> 00:08:06,160
this again so people actually bought

192
00:08:02,590 --> 00:08:08,260
kits like this and did work like this on

193
00:08:06,160 --> 00:08:11,290
their Xbox just so they don't have to

194
00:08:08,260 --> 00:08:15,099
pay $60 for games so this is what we

195
00:08:11,290 --> 00:08:18,070
have to battle against so the second

196
00:08:15,100 --> 00:08:20,380
attack I want to illustrate is the reset

197
00:08:18,070 --> 00:08:23,080
glitch hack attack this happened very

198
00:08:20,380 --> 00:08:24,550
late in the Xbox 360 cycle by the time

199
00:08:23,080 --> 00:08:26,770
we found out there was this bug we

200
00:08:24,550 --> 00:08:30,490
already made fifty million consoles so

201
00:08:26,770 --> 00:08:34,539
it was kind of game over so what what

202
00:08:30,490 --> 00:08:37,659
happened here is they found out that if

203
00:08:34,539 --> 00:08:40,599
you glitch the reset pin to the main

204
00:08:37,659 --> 00:08:43,630
PowerPC CPU with just the right amount

205
00:08:40,600 --> 00:08:46,240
sort pulse not too long not too short

206
00:08:43,630 --> 00:08:48,610
you made funny things happen in the CPU

207
00:08:46,240 --> 00:08:51,070
it didn't really reset which is what

208
00:08:48,610 --> 00:08:51,950
it's supposed to do it's kind of just

209
00:08:51,070 --> 00:08:54,050
crash

210
00:08:51,950 --> 00:08:56,779
and the crash means something is funny

211
00:08:54,050 --> 00:08:58,339
is going on and they try to see well if

212
00:08:56,779 --> 00:09:01,610
we make this funny thing happen at

213
00:08:58,339 --> 00:09:03,890
different times what will will happen so

214
00:09:01,610 --> 00:09:06,380
they kept on experimenting for half a

215
00:09:03,890 --> 00:09:09,560
year just trying all kinds of things and

216
00:09:06,380 --> 00:09:12,230
they finally nailed it down perfectly to

217
00:09:09,560 --> 00:09:12,979
do this exactly when we were doing the

218
00:09:12,230 --> 00:09:16,209
mem

219
00:09:12,980 --> 00:09:18,890
between the shod ijs of the first stage

220
00:09:16,209 --> 00:09:22,189
we're about to load versus the SHA

221
00:09:18,890 --> 00:09:24,949
digest that the signature sign we do the

222
00:09:22,190 --> 00:09:26,779
men compare the glitches exactly at that

223
00:09:24,950 --> 00:09:29,329
time and they make that one if statement

224
00:09:26,779 --> 00:09:32,990
go down the wrong path and thus load

225
00:09:29,329 --> 00:09:35,420
their own random code their own unsigned

226
00:09:32,990 --> 00:09:39,680
code and make the system boot into that

227
00:09:35,420 --> 00:09:40,849
and you can see that this this this mod

228
00:09:39,680 --> 00:09:42,410
shipboard is a little bit more

229
00:09:40,850 --> 00:09:44,540
complicated it actually does a lot of

230
00:09:42,410 --> 00:09:45,920
things because they had to do a lot of

231
00:09:44,540 --> 00:09:47,750
things to actually achieve that they

232
00:09:45,920 --> 00:09:50,120
first had to hack the South Bridge chip

233
00:09:47,750 --> 00:09:53,360
because South Korea chip controls the

234
00:09:50,120 --> 00:09:56,899
the the voltage and and clock of the

235
00:09:53,360 --> 00:09:59,209
main CPU so they wanted to lower the

236
00:09:56,899 --> 00:10:01,279
clock of the main CPU while this attack

237
00:09:59,209 --> 00:10:03,229
was happening because they can't it's

238
00:10:01,279 --> 00:10:05,600
easier to get the timing perfect better

239
00:10:03,230 --> 00:10:07,130
when the clock is lower furthermore they

240
00:10:05,600 --> 00:10:08,839
even with that they only had a one in

241
00:10:07,130 --> 00:10:10,820
three chance of getting the boot to work

242
00:10:08,839 --> 00:10:12,230
so the program to South Korea just

243
00:10:10,820 --> 00:10:16,610
through a loop just keep on booting

244
00:10:12,230 --> 00:10:19,250
until eventually it worked so so this

245
00:10:16,610 --> 00:10:21,880
came out and it pretty much ruined the

246
00:10:19,250 --> 00:10:24,230
scene for xbox360 at least for us

247
00:10:21,880 --> 00:10:27,019
fortunately it was very at the very end

248
00:10:24,230 --> 00:10:28,670
of the cycle at that time we were

249
00:10:27,019 --> 00:10:30,800
already working on the Xbox one and

250
00:10:28,670 --> 00:10:32,779
getting ready to launch it but again

251
00:10:30,800 --> 00:10:35,870
this is an example of what people do to

252
00:10:32,779 --> 00:10:38,329
to breaking consoles and we we had we

253
00:10:35,870 --> 00:10:39,589
need to design Xbox one based on

254
00:10:38,329 --> 00:10:43,310
assumptions people are going to do

255
00:10:39,589 --> 00:10:45,730
things like this so let's start talking

256
00:10:43,310 --> 00:10:48,768
about what we did with hardware security

257
00:10:45,730 --> 00:10:50,180
so what is the fundamental like if we

258
00:10:48,769 --> 00:10:50,720
can't believe everything on the

259
00:10:50,180 --> 00:10:52,969
motherboard

260
00:10:50,720 --> 00:10:55,459
what can we believe in well the

261
00:10:52,970 --> 00:10:59,000
fundamental model we we end up with is

262
00:10:55,459 --> 00:11:01,819
we think it's still too hard to break

263
00:10:59,000 --> 00:11:04,790
into a 28 nanometer die and do something

264
00:11:01,819 --> 00:11:05,599
funny within that die everything funny

265
00:11:04,790 --> 00:11:08,899
you

266
00:11:05,600 --> 00:11:10,699
it's outside of that so we basically

267
00:11:08,899 --> 00:11:13,670
start with a simple rule that we can

268
00:11:10,699 --> 00:11:17,120
trust this CPU die but nothing else

269
00:11:13,670 --> 00:11:18,560
outside of it so when we say we can't

270
00:11:17,120 --> 00:11:21,019
trust anything else outside of it

271
00:11:18,560 --> 00:11:24,380
certainly all the JTAG pens the clock

272
00:11:21,019 --> 00:11:26,600
voltage they'll all be manipulated the

273
00:11:24,380 --> 00:11:29,120
DRAM bus is also outside the die so it

274
00:11:26,600 --> 00:11:32,089
can be manipulated and certainly

275
00:11:29,120 --> 00:11:33,440
anything in PCIe SATA and USB all of

276
00:11:32,089 --> 00:11:37,759
that has to be treated as totally

277
00:11:33,440 --> 00:11:40,130
malicious so and then we surveyed the PC

278
00:11:37,759 --> 00:11:41,839
hardware spaces like is there is it

279
00:11:40,130 --> 00:11:45,380
possible to buy anything that that's

280
00:11:41,839 --> 00:11:48,110
designed to deal with this most pcs D

281
00:11:45,380 --> 00:11:52,880
Ram is not improved encrypted or

282
00:11:48,110 --> 00:11:55,399
protected and so like in typical intel

283
00:11:52,880 --> 00:11:57,019
chips they actually build a lot of their

284
00:11:55,399 --> 00:11:59,420
security features in the South Bridge

285
00:11:57,019 --> 00:12:01,339
which is a separate chip than the main

286
00:11:59,420 --> 00:12:04,009
CPU and if there's an insecure bus

287
00:12:01,339 --> 00:12:06,139
between these two chips in fact what

288
00:12:04,009 --> 00:12:08,600
Intel the main the first thing an Intel

289
00:12:06,139 --> 00:12:10,639
chip when it boots up is it reaches out

290
00:12:08,600 --> 00:12:12,860
through this exposed bus and ask the

291
00:12:10,639 --> 00:12:15,319
South Bridge chip do I need to secure

292
00:12:12,860 --> 00:12:19,569
boot in advancers no it doesn't secure

293
00:12:15,319 --> 00:12:21,889
boot so it's it's really hard to take a

294
00:12:19,569 --> 00:12:25,279
existing chip and try to build something

295
00:12:21,889 --> 00:12:27,079
secure here TPM similarly a lot of

296
00:12:25,279 --> 00:12:29,600
people familiar with TPMS and using it

297
00:12:27,079 --> 00:12:32,479
to to measure stuff and the chief

298
00:12:29,600 --> 00:12:34,670
security it totally doesn't work against

299
00:12:32,480 --> 00:12:36,439
these hackers it's a separate chip the

300
00:12:34,670 --> 00:12:40,089
bus between it will be hacked all the

301
00:12:36,439 --> 00:12:43,219
measurements will be fake so we had to

302
00:12:40,089 --> 00:12:45,529
to basically reach the conclusion that

303
00:12:43,220 --> 00:12:47,810
we have to build a custom chip to solve

304
00:12:45,529 --> 00:12:49,130
this problem fortunately for us in order

305
00:12:47,810 --> 00:12:51,979
to build a game console you need to

306
00:12:49,130 --> 00:12:54,500
build a custom chip anyway so that that

307
00:12:51,980 --> 00:12:56,660
part made it easy but we tagged along

308
00:12:54,500 --> 00:12:59,079
extra security requirements and we

309
00:12:56,660 --> 00:13:02,959
worked with AMD to build a custom chip

310
00:12:59,079 --> 00:13:04,279
so this is what the hardware design

311
00:13:02,959 --> 00:13:07,040
looks like from a security perspective

312
00:13:04,279 --> 00:13:09,829
the the big square you see there is the

313
00:13:07,040 --> 00:13:12,199
sock so you can see a security complex

314
00:13:09,829 --> 00:13:13,279
on the bottom there where we add in an

315
00:13:12,199 --> 00:13:15,920
extra security

316
00:13:13,279 --> 00:13:19,130
processor these are typical things that

317
00:13:15,920 --> 00:13:21,110
do not exist on the AMD CPU

318
00:13:19,130 --> 00:13:23,810
we added custom crypto engines and

319
00:13:21,110 --> 00:13:25,760
registers random number generators we

320
00:13:23,810 --> 00:13:28,040
have some secured RAM we have secure

321
00:13:25,760 --> 00:13:30,410
roam to boot the system from our own

322
00:13:28,040 --> 00:13:32,870
bank of uses and side-channel monitors

323
00:13:30,410 --> 00:13:35,329
to monitor the voltage temperature clock

324
00:13:32,870 --> 00:13:37,610
all those things on the right you see

325
00:13:35,330 --> 00:13:39,890
the memory controller that connects to

326
00:13:37,610 --> 00:13:41,540
the DRAM we has customized a memory

327
00:13:39,890 --> 00:13:44,720
controller to add encryption and

328
00:13:41,540 --> 00:13:47,089
integrity checking because we don't want

329
00:13:44,720 --> 00:13:50,060
to trust the RAM of course we have the

330
00:13:47,090 --> 00:13:51,860
CPUs and GPUs inside it on the Left we

331
00:13:50,060 --> 00:13:53,780
have the South Bridge which is basically

332
00:13:51,860 --> 00:13:55,700
PCIe interface connecting to the South

333
00:13:53,780 --> 00:13:57,730
Bridge and of course everything on the

334
00:13:55,700 --> 00:14:00,800
South Bridge is totally untrusted

335
00:13:57,730 --> 00:14:01,940
including a flash memory the hard drive

336
00:14:00,800 --> 00:14:04,510
and everything like that

337
00:14:01,940 --> 00:14:07,700
so we have to use the iommu to protect

338
00:14:04,510 --> 00:14:09,500
everything that comes out of there and

339
00:14:07,700 --> 00:14:11,420
then you'll see this streaming crypto

340
00:14:09,500 --> 00:14:14,990
engine that we put on the upper left

341
00:14:11,420 --> 00:14:18,199
there it's a custom engine we also added

342
00:14:14,990 --> 00:14:21,290
in order to do high speed crypto and sha

343
00:14:18,200 --> 00:14:23,750
hash verification of everything we read

344
00:14:21,290 --> 00:14:25,280
from the hard hard drive or optical disc

345
00:14:23,750 --> 00:14:27,770
drive we're basically because we cannot

346
00:14:25,280 --> 00:14:30,020
trust the data there we have to verify

347
00:14:27,770 --> 00:14:32,000
everything we read from there and we

348
00:14:30,020 --> 00:14:33,850
want to do it to do it in io speed we

349
00:14:32,000 --> 00:14:36,710
need a custom custom crypto accelerator

350
00:14:33,850 --> 00:14:39,140
and you'll see a special line from the

351
00:14:36,710 --> 00:14:41,630
crypto engine feeding into the streaming

352
00:14:39,140 --> 00:14:44,060
crypto engine where we literally have a

353
00:14:41,630 --> 00:14:45,980
dedicated Hardware path for keys to

354
00:14:44,060 --> 00:14:47,959
traverse from this component to that

355
00:14:45,980 --> 00:14:53,870
component without using the general

356
00:14:47,960 --> 00:14:56,420
fabric of the CPU so let me talk through

357
00:14:53,870 --> 00:14:58,400
what are the core tenets of the design

358
00:14:56,420 --> 00:15:00,500
and what are the core things we wanted

359
00:14:58,400 --> 00:15:02,090
it achieve and I'll go through each one

360
00:15:00,500 --> 00:15:06,140
of these bullet points in more detail

361
00:15:02,090 --> 00:15:07,940
throughout the talk so first we I just

362
00:15:06,140 --> 00:15:09,830
talked about it we added the security

363
00:15:07,940 --> 00:15:11,660
complex with the security processor to

364
00:15:09,830 --> 00:15:13,790
kind of orchestrate the overall Sox

365
00:15:11,660 --> 00:15:16,459
security that turned out to be a very

366
00:15:13,790 --> 00:15:19,780
important and critical aspect of what we

367
00:15:16,460 --> 00:15:23,630
did we believe in defense in depth you

368
00:15:19,780 --> 00:15:25,970
have to make the attacker go through

369
00:15:23,630 --> 00:15:30,439
multiple stages don't trust on any one

370
00:15:25,970 --> 00:15:32,610
stage being being secure we keep all of

371
00:15:30,440 --> 00:15:36,269
the OS in the games encrypted every

372
00:15:32,610 --> 00:15:38,910
we're in except inside the sock dye so

373
00:15:36,269 --> 00:15:40,529
literally if you take part Xbox one you

374
00:15:38,910 --> 00:15:42,300
look at the flash you look at the

375
00:15:40,529 --> 00:15:45,300
harddrive you look at what's an optical

376
00:15:42,300 --> 00:15:47,939
drive you look at the RAM everything

377
00:15:45,300 --> 00:15:49,859
ciphertex you can't figure out what's

378
00:15:47,940 --> 00:15:51,990
going on you just see a bunch of cipher

379
00:15:49,860 --> 00:15:54,899
texts flying into the CPU and yet the

380
00:15:51,990 --> 00:15:57,209
game shows up on the screen that's for

381
00:15:54,899 --> 00:16:01,560
the perspective of this hacker sees and

382
00:15:57,209 --> 00:16:03,540
we like that so the keys to decrypt the

383
00:16:01,560 --> 00:16:07,890
games will only show up on your console

384
00:16:03,540 --> 00:16:09,810
if your game is paid for so a DRM a lot

385
00:16:07,890 --> 00:16:12,839
of DRM rules that you have to do checks

386
00:16:09,810 --> 00:16:15,149
and say oh if this condition then I'm

387
00:16:12,839 --> 00:16:18,180
gonna let you execute this code or

388
00:16:15,149 --> 00:16:20,399
whatever for the games I basically

389
00:16:18,180 --> 00:16:22,709
wanted to enforce that if you didn't pay

390
00:16:20,399 --> 00:16:25,529
for it the plain text version of your

391
00:16:22,709 --> 00:16:28,589
game is never gonna show up inside your

392
00:16:25,529 --> 00:16:29,700
CPU and if you can't make the plain text

393
00:16:28,589 --> 00:16:31,170
game show up you're shown you're not

394
00:16:29,700 --> 00:16:36,209
gonna play it you can't play the cipher

395
00:16:31,170 --> 00:16:38,189
text version of a game so then we the

396
00:16:36,209 --> 00:16:40,768
this is one of the core tenets we have

397
00:16:38,190 --> 00:16:42,089
to maintain control of the CPU in a very

398
00:16:40,769 --> 00:16:44,790
very strong way and I will talk about

399
00:16:42,089 --> 00:16:47,670
how we how we do that the CPU can only

400
00:16:44,790 --> 00:16:52,620
execute Microsoft signed code no

401
00:16:47,670 --> 00:16:54,000
exceptions no nothing and we want to

402
00:16:52,620 --> 00:16:56,940
make it such that malware can never

403
00:16:54,000 --> 00:17:01,410
persist itself on an Xbox across a code

404
00:16:56,940 --> 00:17:03,360
reboot we keep the development key world

405
00:17:01,410 --> 00:17:05,579
and the retail world separate so a

406
00:17:03,360 --> 00:17:07,650
development kit is basically what we

407
00:17:05,579 --> 00:17:09,780
have to give the M developers so the

408
00:17:07,650 --> 00:17:12,419
rule where we insist the CPU only

409
00:17:09,780 --> 00:17:14,099
execute Microsoft signed code obviously

410
00:17:12,419 --> 00:17:16,410
we have to loosen that rule for a dev

411
00:17:14,099 --> 00:17:17,668
kit that we give the game developer

412
00:17:16,410 --> 00:17:19,829
because they're gonna write their own

413
00:17:17,669 --> 00:17:21,839
game and they can't bring it to

414
00:17:19,829 --> 00:17:24,659
Microsoft to sign just just for each

415
00:17:21,839 --> 00:17:26,730
iteration so we have to loosen the rules

416
00:17:24,660 --> 00:17:28,740
of CPU execution for the developer kit

417
00:17:26,730 --> 00:17:31,590
but we don't want these things to become

418
00:17:28,740 --> 00:17:33,539
the things that is used to break the

419
00:17:31,590 --> 00:17:36,689
games

420
00:17:33,539 --> 00:17:37,830
a wreath the retail world so we did

421
00:17:36,690 --> 00:17:40,740
something to make sure that doesn't

422
00:17:37,830 --> 00:17:43,110
happen and I'll talk about that later so

423
00:17:40,740 --> 00:17:46,320
security booting the system is kind of

424
00:17:43,110 --> 00:17:47,789
the root of how all this works in the

425
00:17:46,320 --> 00:17:50,279
must be extremely strong we'll talk

426
00:17:47,789 --> 00:17:52,019
about how we did that and finally we

427
00:17:50,279 --> 00:17:54,210
have to test and recover from any

428
00:17:52,019 --> 00:17:56,340
software mistake we make in it and we

429
00:17:54,210 --> 00:17:58,350
guarantee we know we're for sure we're

430
00:17:56,340 --> 00:18:01,860
gonna make lots and lots of mistakes and

431
00:17:58,350 --> 00:18:03,959
we have to be able to update fix it and

432
00:18:01,860 --> 00:18:06,389
and the update needs needs to be

433
00:18:03,960 --> 00:18:08,010
absolutely we know you are running the

434
00:18:06,389 --> 00:18:10,379
version that has the bug you're not

435
00:18:08,010 --> 00:18:15,120
tricking us you are going to get updated

436
00:18:10,380 --> 00:18:17,010
and then you get to play the game so

437
00:18:15,120 --> 00:18:19,049
let's first start with the security

438
00:18:17,010 --> 00:18:21,510
processors well what is the goal what

439
00:18:19,049 --> 00:18:24,450
does this thing do for us so first it

440
00:18:21,510 --> 00:18:26,429
orchestrates the secure boot for the

441
00:18:24,450 --> 00:18:28,679
entire sock this is made very critical

442
00:18:26,429 --> 00:18:30,389
it manages all the keys to decrypt the

443
00:18:28,679 --> 00:18:34,110
OS the games and things like that

444
00:18:30,389 --> 00:18:35,820
enforces the DRM policies of it the DRM

445
00:18:34,110 --> 00:18:38,969
encryption keys is programmed by the

446
00:18:35,820 --> 00:18:40,379
security processor whether the console

447
00:18:38,970 --> 00:18:45,470
functions as a deaf kid or not is

448
00:18:40,380 --> 00:18:48,059
controlled in this in it uses fuses to

449
00:18:45,470 --> 00:18:50,340
prevent roll back to older buggy

450
00:18:48,059 --> 00:18:52,168
versions of software and it manages the

451
00:18:50,340 --> 00:18:57,168
clock and voltage of the entire chip and

452
00:18:52,169 --> 00:19:00,600
resets if anything goes out of range so

453
00:18:57,169 --> 00:19:03,419
let me explain a little bit the multi VM

454
00:19:00,600 --> 00:19:05,279
architecture we have on the Xbox one so

455
00:19:03,419 --> 00:19:07,169
we actually have a hypervisor on it and

456
00:19:05,279 --> 00:19:09,870
we're actually running multiple virtual

457
00:19:07,169 --> 00:19:12,179
machines on the Xbox one we we didn't

458
00:19:09,870 --> 00:19:14,340
really do this on the Xbox 360 or the

459
00:19:12,179 --> 00:19:15,029
earlier Xbox we started doing this on

460
00:19:14,340 --> 00:19:18,178
Xbox one

461
00:19:15,029 --> 00:19:20,130
and you can see that at the very bottom

462
00:19:18,179 --> 00:19:22,350
we have the security processor and then

463
00:19:20,130 --> 00:19:25,470
the hypervisor layer and then there's

464
00:19:22,350 --> 00:19:28,590
host OS that contains all the bare metal

465
00:19:25,470 --> 00:19:31,019
drivers to talk to hardware and then we

466
00:19:28,590 --> 00:19:33,779
really have two main operating systems

467
00:19:31,019 --> 00:19:36,000
operating on top to the game OS which is

468
00:19:33,779 --> 00:19:38,100
the VM that actually runs that your

469
00:19:36,000 --> 00:19:40,740
actual game so Halo and Call of Duty

470
00:19:38,100 --> 00:19:43,500
actually runs their the system OS is

471
00:19:40,740 --> 00:19:45,840
just a version of Windows 10 that does

472
00:19:43,500 --> 00:19:46,890
more the traditional dashboard menus and

473
00:19:45,840 --> 00:19:49,860
things like that

474
00:19:46,890 --> 00:19:51,690
you know the more traditional stuff when

475
00:19:49,860 --> 00:19:55,110
you pick which app you want to run in

476
00:19:51,690 --> 00:19:58,679
things like that so the reason we did

477
00:19:55,110 --> 00:20:00,169
this is this actually enforces the

478
00:19:58,679 --> 00:20:04,559
defense-in-depth

479
00:20:00,170 --> 00:20:05,970
no notion when we threat model this we

480
00:20:04,559 --> 00:20:07,770
basically assume system always has

481
00:20:05,970 --> 00:20:09,390
already compromised just forget about it

482
00:20:07,770 --> 00:20:11,280
like the bad guys are gonna get in there

483
00:20:09,390 --> 00:20:15,390
immediately it has a browser you're done

484
00:20:11,280 --> 00:20:18,149
okay so but even if you compromised

485
00:20:15,390 --> 00:20:19,860
system os in order to cheat or do

486
00:20:18,150 --> 00:20:21,570
anything you have to get yourself into

487
00:20:19,860 --> 00:20:23,490
the game OS and so you're most likely

488
00:20:21,570 --> 00:20:27,030
have to find a hypervisor or a host OS

489
00:20:23,490 --> 00:20:29,400
bug to reach into the game os but that

490
00:20:27,030 --> 00:20:31,678
just allows you to cheat if you want to

491
00:20:29,400 --> 00:20:33,780
pirate games you have to break all the

492
00:20:31,679 --> 00:20:35,610
way into the security processor which

493
00:20:33,780 --> 00:20:38,370
you have two more layers to go in

494
00:20:35,610 --> 00:20:40,620
through before you even get there and

495
00:20:38,370 --> 00:20:44,370
that this is this reinforces the notion

496
00:20:40,620 --> 00:20:48,330
of defense and death so let me talk

497
00:20:44,370 --> 00:20:50,639
about Xbox virtual disks the idea here

498
00:20:48,330 --> 00:20:53,010
so here's the fundamental problem most

499
00:20:50,640 --> 00:20:55,620
operating systems design the world right

500
00:20:53,010 --> 00:20:58,200
now make the following assumption if you

501
00:20:55,620 --> 00:21:00,000
write a sector to the hard drive and you

502
00:20:58,200 --> 00:21:02,580
later on read that sector back you're

503
00:21:00,000 --> 00:21:04,770
gonna read the same thing back on Xbox

504
00:21:02,580 --> 00:21:06,360
you can't make that assumption that's

505
00:21:04,770 --> 00:21:08,370
that's not gonna be true because you're

506
00:21:06,360 --> 00:21:12,178
gonna be fed back the most the most

507
00:21:08,370 --> 00:21:14,100
malicious worst data possible and you

508
00:21:12,179 --> 00:21:18,179
have to make that assumption on every

509
00:21:14,100 --> 00:21:21,120
single disk read you make so what we did

510
00:21:18,179 --> 00:21:23,580
is we created our own virtual disk think

511
00:21:21,120 --> 00:21:26,969
of it as a VHD that's integrity

512
00:21:23,580 --> 00:21:29,010
protected and encrypted and these VHD

513
00:21:26,970 --> 00:21:32,760
files is what's actually sitting inside

514
00:21:29,010 --> 00:21:35,700
the hard drive so you can see layout of

515
00:21:32,760 --> 00:21:37,049
one of these these xvd files on the

516
00:21:35,700 --> 00:21:38,610
right you literally have the virtual

517
00:21:37,049 --> 00:21:41,070
disk laid out and then you have a hash

518
00:21:38,610 --> 00:21:42,959
tree that hash it stores the hash value

519
00:21:41,070 --> 00:21:45,240
of all these things in the header that

520
00:21:42,960 --> 00:21:48,450
signs the root hash hash value by doing

521
00:21:45,240 --> 00:21:51,120
this we can integrity check every single

522
00:21:48,450 --> 00:21:52,860
bit read from this entire thing not a

523
00:21:51,120 --> 00:21:58,199
single bit that can happen without us

524
00:21:52,860 --> 00:21:59,879
knowing about it and so this is how we

525
00:21:58,200 --> 00:22:00,480
guarantee the integrity of all the data

526
00:21:59,880 --> 00:22:01,919
we

527
00:22:00,480 --> 00:22:05,640
from the harddrive because we can't

528
00:22:01,919 --> 00:22:10,410
trust it so let's talk about license key

529
00:22:05,640 --> 00:22:13,140
packages so like I said before all the

530
00:22:10,410 --> 00:22:14,580
games are encrypted and in order to play

531
00:22:13,140 --> 00:22:17,610
the game you have to get the key to

532
00:22:14,580 --> 00:22:19,649
decrypt the game so we actually a

533
00:22:17,610 --> 00:22:22,649
through Xbox Live can distribute these

534
00:22:19,650 --> 00:22:25,710
license key packages they are customized

535
00:22:22,650 --> 00:22:27,660
for each individual Xbox the license key

536
00:22:25,710 --> 00:22:30,720
package will only be given to you if you

537
00:22:27,660 --> 00:22:32,460
pay for the game and only the security

538
00:22:30,720 --> 00:22:35,040
processor on your console is open to

539
00:22:32,460 --> 00:22:38,179
able to unwrap this license key package

540
00:22:35,040 --> 00:22:42,629
and derive the key to decrypt the game

541
00:22:38,179 --> 00:22:45,120
and then what happens is the key gets

542
00:22:42,630 --> 00:22:47,040
gets passed along to the streaming

543
00:22:45,120 --> 00:22:49,979
crypto processor we talked about earlier

544
00:22:47,040 --> 00:22:52,918
and that's actually used by the host OS

545
00:22:49,980 --> 00:22:55,830
to decrypt the game on the fly as as

546
00:22:52,919 --> 00:22:59,040
each each sector is being read by by the

547
00:22:55,830 --> 00:23:01,500
game now throughout this entire process

548
00:22:59,040 --> 00:23:04,379
we've designed it such that the key to

549
00:23:01,500 --> 00:23:08,280
actually decrypt all these X VDS and the

550
00:23:04,380 --> 00:23:10,679
game is always locked in Hardware no

551
00:23:08,280 --> 00:23:12,690
software ever gets access to it whether

552
00:23:10,679 --> 00:23:14,250
even the security process software the

553
00:23:12,690 --> 00:23:16,710
security processor even if it has a

554
00:23:14,250 --> 00:23:18,600
critical bug cannot leak out the key to

555
00:23:16,710 --> 00:23:23,130
decrypt any Xbox one games

556
00:23:18,600 --> 00:23:25,260
it's totally locked in hardware so I

557
00:23:23,130 --> 00:23:30,870
want to talk a little bit about optical

558
00:23:25,260 --> 00:23:35,580
disc games this is a this is a pain in

559
00:23:30,870 --> 00:23:37,649
the neck for us and on Xbox 360 we

560
00:23:35,580 --> 00:23:41,070
talked about the Kamikaze hack it

561
00:23:37,650 --> 00:23:43,919
basically expose us to piracy on Xbox

562
00:23:41,070 --> 00:23:45,330
360 due to weaknesses in this area so

563
00:23:43,919 --> 00:23:48,270
the front little problem is that we're

564
00:23:45,330 --> 00:23:51,418
trying to use the optical disc not just

565
00:23:48,270 --> 00:23:53,549
it's a means to deliver 50 gigabytes of

566
00:23:51,419 --> 00:23:55,679
data it's very good for that but we're

567
00:23:53,549 --> 00:23:59,490
also using it as the means to represent

568
00:23:55,679 --> 00:24:01,500
the license to play the game so this

569
00:23:59,490 --> 00:24:04,919
means that we have we face a bunch of

570
00:24:01,500 --> 00:24:06,900
hard problems so first how do we know

571
00:24:04,919 --> 00:24:08,370
you have a genuine piece of plastic we

572
00:24:06,900 --> 00:24:11,159
have to design this piece of plastic

573
00:24:08,370 --> 00:24:13,500
such that it's very easy for us to make

574
00:24:11,159 --> 00:24:14,970
20 million copies of it but very

575
00:24:13,500 --> 00:24:17,970
hard for you to burn one of these

576
00:24:14,970 --> 00:24:21,240
yourself such that you can pretend to be

577
00:24:17,970 --> 00:24:23,490
one of these things then even if we

578
00:24:21,240 --> 00:24:27,720
solve that problem there's the problem

579
00:24:23,490 --> 00:24:29,700
of well the CPU doesn't know what what's

580
00:24:27,720 --> 00:24:32,850
what's over there the CPU just connects

581
00:24:29,700 --> 00:24:34,500
has a SATA drive connected it has no

582
00:24:32,850 --> 00:24:36,659
idea what's really on the other side of

583
00:24:34,500 --> 00:24:38,370
this Saturday it has to kind of believe

584
00:24:36,660 --> 00:24:40,350
the thing on the other side of a sadder

585
00:24:38,370 --> 00:24:42,060
Drive and and that thing is gonna tell

586
00:24:40,350 --> 00:24:43,350
me oh that's a good piece of plastic

587
00:24:42,060 --> 00:24:45,899
there why didn't you let the guy play

588
00:24:43,350 --> 00:24:49,709
the game so you can see there's lots of

589
00:24:45,900 --> 00:24:52,290
problems in this whole thing what we did

590
00:24:49,710 --> 00:24:54,600
for 360 we already did some stuff so we

591
00:24:52,290 --> 00:24:56,970
set up a shared key between the security

592
00:24:54,600 --> 00:24:58,770
processor well on the 360 there wasn't a

593
00:24:56,970 --> 00:25:00,810
security processor but but it was the

594
00:24:58,770 --> 00:25:04,110
hypervisor there but we set up a shared

595
00:25:00,810 --> 00:25:06,419
key between the CPU and the and the

596
00:25:04,110 --> 00:25:10,379
optical disc drive and it we pair them

597
00:25:06,420 --> 00:25:12,360
together at manufacturing and this this

598
00:25:10,380 --> 00:25:14,490
shared key is used to authenticate each

599
00:25:12,360 --> 00:25:17,280
other and because of this pairing if you

600
00:25:14,490 --> 00:25:19,710
notice if your optical disk drive on

601
00:25:17,280 --> 00:25:21,210
your xbox one breaks you can't just swap

602
00:25:19,710 --> 00:25:23,070
it with the optical disc drive on

603
00:25:21,210 --> 00:25:24,960
another Xbox one you have to send it

604
00:25:23,070 --> 00:25:28,439
back to Microsoft and Microsoft has to

605
00:25:24,960 --> 00:25:30,600
repair these two things together but the

606
00:25:28,440 --> 00:25:33,690
biggest problem we face in Xbox we take

607
00:25:30,600 --> 00:25:36,120
the fact that the DSP chip is itself was

608
00:25:33,690 --> 00:25:39,600
an off the market DSP chip with not

609
00:25:36,120 --> 00:25:41,399
enough good security so we've had to

610
00:25:39,600 --> 00:25:43,620
solve that problem for Xbox one and what

611
00:25:41,400 --> 00:25:46,680
we finally did is we basically work with

612
00:25:43,620 --> 00:25:48,389
media tech to say make us a custom DSP

613
00:25:46,680 --> 00:25:50,700
chip the one you have just doesn't isn't

614
00:25:48,390 --> 00:25:52,680
going to work for us and so we just like

615
00:25:50,700 --> 00:25:55,200
we made a custom AMD chip for the main

616
00:25:52,680 --> 00:25:57,930
CPU we make them make a custom chip for

617
00:25:55,200 --> 00:26:01,940
us for this optical disk drive and we

618
00:25:57,930 --> 00:26:05,190
added security features into it and and

619
00:26:01,940 --> 00:26:06,960
we personally authored all the boot code

620
00:26:05,190 --> 00:26:09,090
on this chip and made sure it was

621
00:26:06,960 --> 00:26:13,730
correct and that's how we finally

622
00:26:09,090 --> 00:26:15,480
stopped the optical disk piracy problem

623
00:26:13,730 --> 00:26:17,910
let me talk a little bit about

624
00:26:15,480 --> 00:26:19,410
hypervisor enforced coded integrity like

625
00:26:17,910 --> 00:26:22,260
I said one of the main things we need to

626
00:26:19,410 --> 00:26:24,090
do is maintain control of the CPU it's

627
00:26:22,260 --> 00:26:26,020
very very important so we have to make

628
00:26:24,090 --> 00:26:28,510
sure only code we sank

629
00:26:26,020 --> 00:26:31,000
gets to run on this but the traditional

630
00:26:28,510 --> 00:26:33,460
way this is done is Colonel mold will do

631
00:26:31,000 --> 00:26:35,200
code integrity checks but there's

632
00:26:33,460 --> 00:26:37,600
millions of lines of code and Kermode

633
00:26:35,200 --> 00:26:38,770
but my rule of thumb is you you write

634
00:26:37,600 --> 00:26:41,260
that million lines of codes it's

635
00:26:38,770 --> 00:26:43,600
hopeless like you're done with its it's

636
00:26:41,260 --> 00:26:45,550
guaranteed to have lots of bugs so we

637
00:26:43,600 --> 00:26:47,350
have to move enforcement to a layer that

638
00:26:45,550 --> 00:26:49,720
has fewer lines of code and a higher

639
00:26:47,350 --> 00:26:52,209
chance of being correct to us that was

640
00:26:49,720 --> 00:26:54,820
the hypervisor and so what we did is we

641
00:26:52,210 --> 00:26:56,590
made the hypervisor enforce code

642
00:26:54,820 --> 00:26:59,889
integrity by controlling the

643
00:26:56,590 --> 00:27:02,379
second-stage CPU mmm you to only light

644
00:26:59,890 --> 00:27:04,810
up pages to have execution permission if

645
00:27:02,380 --> 00:27:07,180
the hypervisor personally verifies the

646
00:27:04,810 --> 00:27:10,240
shell hash and agrees that this page is

647
00:27:07,180 --> 00:27:13,030
a correct execute correct Microsoft

648
00:27:10,240 --> 00:27:15,100
signed executable code page and

649
00:27:13,030 --> 00:27:17,129
throughout this entire design we

650
00:27:15,100 --> 00:27:19,719
basically treat supervisor as malicious

651
00:27:17,130 --> 00:27:22,750
and don't trust anything from the

652
00:27:19,720 --> 00:27:24,610
supervisor and supervisor has to beg the

653
00:27:22,750 --> 00:27:28,750
hypervisor please let me execute some

654
00:27:24,610 --> 00:27:31,600
new code it can't do it by itself so

655
00:27:28,750 --> 00:27:34,030
this feature we call the HP CI this term

656
00:27:31,600 --> 00:27:36,429
sounds familiar it's actually part of a

657
00:27:34,030 --> 00:27:38,320
hyper-v feature now in Windows and we've

658
00:27:36,430 --> 00:27:41,050
recently around announced the secure

659
00:27:38,320 --> 00:27:43,360
core PCE effort and there's a bunch of

660
00:27:41,050 --> 00:27:45,399
security features in there H PCI is one

661
00:27:43,360 --> 00:27:47,830
of them but this whole idea literally

662
00:27:45,400 --> 00:27:50,530
started on the Xbox 360 and continued on

663
00:27:47,830 --> 00:27:55,960
Xbox one and that's the origins of why

664
00:27:50,530 --> 00:27:58,690
we do this so I want to talk a little

665
00:27:55,960 --> 00:28:00,760
bit about the the state separation and

666
00:27:58,690 --> 00:28:03,520
integrity checking we doing so because

667
00:28:00,760 --> 00:28:07,090
we did this xvd thing for an operating

668
00:28:03,520 --> 00:28:09,850
system we naturally do something great

669
00:28:07,090 --> 00:28:12,810
here which is at every boot weari verify

670
00:28:09,850 --> 00:28:15,280
every single piece of code we execute

671
00:28:12,810 --> 00:28:18,370
that we read from the disk we don't

672
00:28:15,280 --> 00:28:21,270
trust anything and by doing this we

673
00:28:18,370 --> 00:28:24,070
actually achieve a very important goal

674
00:28:21,270 --> 00:28:25,930
the consequence the clunk I call this

675
00:28:24,070 --> 00:28:28,419
consequence Mauer cannot persist the

676
00:28:25,930 --> 00:28:31,990
clásico reboot is every time you code

677
00:28:28,420 --> 00:28:34,000
reboot you you start from fresh again to

678
00:28:31,990 --> 00:28:36,130
execute code that you personally verify

679
00:28:34,000 --> 00:28:38,440
every single boot there's no way for

680
00:28:36,130 --> 00:28:38,990
malware unlike on the Windows PC where

681
00:28:38,440 --> 00:28:41,210
there's very

682
00:28:38,990 --> 00:28:44,840
various ways they can you know hide

683
00:28:41,210 --> 00:28:46,850
itself in in various various places it

684
00:28:44,840 --> 00:28:50,330
there's no way on the Xbox for malware

685
00:28:46,850 --> 00:28:53,419
to persist itself and this is very very

686
00:28:50,330 --> 00:28:55,939
critical at least on a console what this

687
00:28:53,420 --> 00:28:58,130
means is that if if you find a way to

688
00:28:55,940 --> 00:29:00,200
break it you have to break it every

689
00:28:58,130 --> 00:29:01,790
single boot you can't just break it once

690
00:29:00,200 --> 00:29:04,010
and and you're done

691
00:29:01,790 --> 00:29:08,420
and so this look again puts a roll block

692
00:29:04,010 --> 00:29:10,490
in front of the hackers so I want to

693
00:29:08,420 --> 00:29:12,830
talk a little bit about the s customs

694
00:29:10,490 --> 00:29:14,690
security prostitute key registers we

695
00:29:12,830 --> 00:29:17,360
have I've touched the bait a little bit

696
00:29:14,690 --> 00:29:20,090
on it but in this custom security

697
00:29:17,360 --> 00:29:21,979
process so we we have custom register to

698
00:29:20,090 --> 00:29:25,100
do the following things first we have a

699
00:29:21,980 --> 00:29:26,600
hardware PCR for those that don't PC

700
00:29:25,100 --> 00:29:29,030
ours platform configure registers

701
00:29:26,600 --> 00:29:32,000
basically met measures all the

702
00:29:29,030 --> 00:29:34,850
measurements that the system boots but

703
00:29:32,000 --> 00:29:37,040
we have a custom hardware based pcr that

704
00:29:34,850 --> 00:29:39,770
takes measurements and then we use it to

705
00:29:37,040 --> 00:29:41,270
perform at a station to xbox live we

706
00:29:39,770 --> 00:29:43,639
have a key dedicated to maintaining

707
00:29:41,270 --> 00:29:45,970
global secrets we have a key dedicated

708
00:29:43,640 --> 00:29:48,559
to maintaining per console secrets and

709
00:29:45,970 --> 00:29:50,570
we have key slots dedicated to

710
00:29:48,559 --> 00:29:54,440
maintaining the key to decrypt games and

711
00:29:50,570 --> 00:29:56,450
things like that and through this custom

712
00:29:54,440 --> 00:29:59,929
key register which we achieve a lot of

713
00:29:56,450 --> 00:30:03,170
wonderful goals first I talked about it

714
00:29:59,929 --> 00:30:05,059
is is that all the important keys are

715
00:30:03,170 --> 00:30:07,400
never accessible by any firmware

716
00:30:05,059 --> 00:30:11,720
whatsoever you the firmware only gets

717
00:30:07,400 --> 00:30:14,059
Oracle access to keys and second we'll

718
00:30:11,720 --> 00:30:16,370
talk about this more later which is the

719
00:30:14,059 --> 00:30:18,860
keys can actually change based on what

720
00:30:16,370 --> 00:30:21,199
you which you booted and we can make the

721
00:30:18,860 --> 00:30:24,649
system we can actually make the system

722
00:30:21,200 --> 00:30:26,570
have new secrets depending on what

723
00:30:24,650 --> 00:30:28,040
you've booted if we update the system

724
00:30:26,570 --> 00:30:31,159
you'll have a new secret that you didn't

725
00:30:28,040 --> 00:30:35,629
have access to in the old world so this

726
00:30:31,160 --> 00:30:37,250
is how that works so the global key we

727
00:30:35,630 --> 00:30:40,790
start with a root key at boot time

728
00:30:37,250 --> 00:30:44,270
and as the system boots it it morphs

729
00:30:40,790 --> 00:30:46,250
down into different keys and we destroy

730
00:30:44,270 --> 00:30:49,460
the original key as it morphs so you

731
00:30:46,250 --> 00:30:51,200
lose original key so if you're booting

732
00:30:49,460 --> 00:30:52,730
version 3 of the security processor

733
00:30:51,200 --> 00:30:54,440
software you go down certain

734
00:30:52,730 --> 00:30:56,840
half and the global key now becomes this

735
00:30:54,440 --> 00:30:59,570
value and then if you boot the retail

736
00:30:56,840 --> 00:31:01,159
console retail path you go down a

737
00:30:59,570 --> 00:31:03,350
certain parcel and then the certain the

738
00:31:01,160 --> 00:31:04,910
version of the OS you load this is a

739
00:31:03,350 --> 00:31:06,709
gross simplification we probably have

740
00:31:04,910 --> 00:31:09,950
like ten layers of this instead of just

741
00:31:06,710 --> 00:31:12,530
three layers but this makes it such that

742
00:31:09,950 --> 00:31:14,510
you go down a different path depending

743
00:31:12,530 --> 00:31:16,010
on what you've booted and notice that

744
00:31:14,510 --> 00:31:18,080
whether you're booting as a deaf kid or

745
00:31:16,010 --> 00:31:20,929
retail unit also is a different path

746
00:31:18,080 --> 00:31:23,449
what this means is that when you boot if

747
00:31:20,929 --> 00:31:25,520
you boot as a deaf kit your global key

748
00:31:23,450 --> 00:31:28,520
will morph in a certain direction such

749
00:31:25,520 --> 00:31:31,280
that you will no longer ever be able to

750
00:31:28,520 --> 00:31:33,139
decrypt any retail games that you lost

751
00:31:31,280 --> 00:31:37,280
that capability you don't have the key

752
00:31:33,140 --> 00:31:38,750
material to ever do that again so and

753
00:31:37,280 --> 00:31:41,120
that's how we guarantee deaf kids can't

754
00:31:38,750 --> 00:31:42,410
compromise the retail world but you can

755
00:31:41,120 --> 00:31:44,389
see this is very pout this whole

756
00:31:42,410 --> 00:31:46,790
construct is very powerful because as

757
00:31:44,390 --> 00:31:49,549
you move down these things typically

758
00:31:46,790 --> 00:31:53,178
people find bugs in very later stages of

759
00:31:49,549 --> 00:31:55,129
the software the early boost stages it's

760
00:31:53,179 --> 00:31:57,860
harder to find bugs later stages find

761
00:31:55,130 --> 00:31:59,510
bugs but all we have to do is update the

762
00:31:57,860 --> 00:32:02,899
software and we change you to a

763
00:31:59,510 --> 00:32:05,510
different key and you have you you you

764
00:32:02,900 --> 00:32:08,299
the attacker could only see the keys

765
00:32:05,510 --> 00:32:10,850
that he has access to in that old world

766
00:32:08,299 --> 00:32:12,470
in rally what this means is he will

767
00:32:10,850 --> 00:32:15,918
probably be able to decrypt all the

768
00:32:12,470 --> 00:32:18,710
games released up to that point but he

769
00:32:15,919 --> 00:32:21,470
cannot decrypt any games going forward

770
00:32:18,710 --> 00:32:24,110
will update the system and release new

771
00:32:21,470 --> 00:32:30,460
games to only be decrypted ball by this

772
00:32:24,110 --> 00:32:34,159
new new global key path so secure boot

773
00:32:30,460 --> 00:32:36,260
this is a this is one of the areas we

774
00:32:34,160 --> 00:32:37,850
spent a lot of time on because we know

775
00:32:36,260 --> 00:32:40,040
at least in the game console industry

776
00:32:37,850 --> 00:32:45,020
this is what the attackers always go for

777
00:32:40,040 --> 00:32:46,700
first so so first one of the most

778
00:32:45,020 --> 00:32:49,610
important things is we have to have

779
00:32:46,700 --> 00:32:51,919
private SRAM inside the security complex

780
00:32:49,610 --> 00:32:55,240
we need to read the next stage

781
00:32:51,919 --> 00:32:58,610
bootloader from flash bring it in to

782
00:32:55,240 --> 00:33:01,370
bring it into the by that we can trust

783
00:32:58,610 --> 00:33:05,030
and then verify everything and then jump

784
00:33:01,370 --> 00:33:07,908
into it a lot of secure boot have the

785
00:33:05,030 --> 00:33:10,250
policy of using being exploited over

786
00:33:07,909 --> 00:33:12,530
like time I've checked time of use bugs

787
00:33:10,250 --> 00:33:14,179
where you read it two times the first

788
00:33:12,530 --> 00:33:16,190
time to verify the second time to

789
00:33:14,179 --> 00:33:17,690
actually execute the hackers will make

790
00:33:16,190 --> 00:33:21,830
the first time look correct the second

791
00:33:17,690 --> 00:33:25,100
time look bad so you can't do that we

792
00:33:21,830 --> 00:33:26,990
also measure everything we boot in into

793
00:33:25,100 --> 00:33:30,250
the hardware PCR that we talked about

794
00:33:26,990 --> 00:33:34,130
later every single stage is encrypted

795
00:33:30,250 --> 00:33:38,900
and the decryption key is based on the

796
00:33:34,130 --> 00:33:41,240
global key tree we talked about so so so

797
00:33:38,900 --> 00:33:43,159
the global key tree it keeps on morphing

798
00:33:41,240 --> 00:33:45,590
and you actually need the global key

799
00:33:43,159 --> 00:33:48,770
tree to decrypt every single stage in

800
00:33:45,590 --> 00:33:50,658
this whole morphing process so there's a

801
00:33:48,770 --> 00:33:54,770
bunch of consequences to this if you

802
00:33:50,659 --> 00:33:56,720
ever change one bit in any one stage you

803
00:33:54,770 --> 00:34:00,020
will basically go down an incorrect path

804
00:33:56,720 --> 00:34:02,299
and you can't decrypt future stages also

805
00:34:00,020 --> 00:34:04,668
if you ever get to a certain stage end

806
00:34:02,299 --> 00:34:07,429
the system has already lost all the keys

807
00:34:04,669 --> 00:34:09,409
to decrypt all the previous n minus-1 in

808
00:34:07,429 --> 00:34:11,869
earlier stages you can't go back and

809
00:34:09,409 --> 00:34:18,830
decrypt all the earlier stages you just

810
00:34:11,869 --> 00:34:20,869
decrypt the stage you broker so we try

811
00:34:18,830 --> 00:34:22,940
to design it such that there's because

812
00:34:20,869 --> 00:34:25,609
of the reset glitch hack we made sure

813
00:34:22,940 --> 00:34:27,830
there's no single one branch in the boot

814
00:34:25,609 --> 00:34:31,730
ROM where if we go down the wrong path

815
00:34:27,830 --> 00:34:36,440
the system will well we'll do the wrong

816
00:34:31,730 --> 00:34:38,030
thing so example of this is when we take

817
00:34:36,440 --> 00:34:41,119
the measurement of the next stage that

818
00:34:38,030 --> 00:34:42,649
comes in typical people will like sha

819
00:34:41,119 --> 00:34:44,869
hash the measurement and look at what's

820
00:34:42,649 --> 00:34:47,899
the digest that that's been signed

821
00:34:44,869 --> 00:34:50,060
compared to two like we did in xbox360

822
00:34:47,899 --> 00:34:52,940
and then decide oh these two matches and

823
00:34:50,060 --> 00:34:55,969
and and and use this digest to to do

824
00:34:52,940 --> 00:34:58,550
something what we do is we load the next

825
00:34:55,969 --> 00:35:00,640
stage we shall hash it and before we

826
00:34:58,550 --> 00:35:03,800
even know whether this is the right

827
00:35:00,640 --> 00:35:06,379
digest value or not we extend this hash

828
00:35:03,800 --> 00:35:09,710
digest into the PCR and we also morph

829
00:35:06,380 --> 00:35:12,350
the global key tree using it so after we

830
00:35:09,710 --> 00:35:14,540
did that it's a done deal like if we

831
00:35:12,350 --> 00:35:16,350
find out you're you're wrong they

832
00:35:14,540 --> 00:35:18,870
sounded the check

833
00:35:16,350 --> 00:35:20,160
everything the rest of this entire boot

834
00:35:18,870 --> 00:35:23,430
sequence is going to be completely

835
00:35:20,160 --> 00:35:25,950
incorrect and so you cannot glitch a

836
00:35:23,430 --> 00:35:28,980
single glitch cannot get you out of this

837
00:35:25,950 --> 00:35:30,540
this this bad state and we use this kind

838
00:35:28,980 --> 00:35:33,540
of philosophy throughout the boot ROM

839
00:35:30,540 --> 00:35:35,310
code we also made the security law

840
00:35:33,540 --> 00:35:38,550
processor lock down all the security

841
00:35:35,310 --> 00:35:40,650
process code after boot so literally the

842
00:35:38,550 --> 00:35:44,490
security processor after it boots it

843
00:35:40,650 --> 00:35:48,030
throws away all the keys to add more

844
00:35:44,490 --> 00:35:52,560
code so it can't add more code even if

845
00:35:48,030 --> 00:35:54,180
it wanted to also so this just makes it

846
00:35:52,560 --> 00:35:56,700
you know obviously you can do to a rope

847
00:35:54,180 --> 00:36:00,620
chain attack but it makes it harder for

848
00:35:56,700 --> 00:36:03,450
attacker to do more sophisticated stuff

849
00:36:00,620 --> 00:36:06,330
so finally we did add a station to

850
00:36:03,450 --> 00:36:08,490
recover from software mistakes this is

851
00:36:06,330 --> 00:36:12,060
absolutely critical and I'll talk about

852
00:36:08,490 --> 00:36:15,330
it later but what if fundamentally means

853
00:36:12,060 --> 00:36:17,520
is that we we have to measure everything

854
00:36:15,330 --> 00:36:19,529
that's booted the hardware PC are we

855
00:36:17,520 --> 00:36:21,509
talked about earlier

856
00:36:19,530 --> 00:36:22,890
literally the rom code measures the

857
00:36:21,510 --> 00:36:25,290
first stage first stage measure the

858
00:36:22,890 --> 00:36:27,480
second stage all these measurements are

859
00:36:25,290 --> 00:36:30,600
extended into a hardware PCR that cannot

860
00:36:27,480 --> 00:36:33,810
be undone and then we literally had a

861
00:36:30,600 --> 00:36:35,940
custom private key that does nothing but

862
00:36:33,810 --> 00:36:39,509
signed this PCR register to perform

863
00:36:35,940 --> 00:36:42,540
attestation and so by doing this we we

864
00:36:39,510 --> 00:36:45,330
can pretty much guarantee that added

865
00:36:42,540 --> 00:36:47,700
station is accurate even to the even for

866
00:36:45,330 --> 00:36:49,080
the very first stage firmware so even if

867
00:36:47,700 --> 00:36:51,089
we have a bug in the very first stage

868
00:36:49,080 --> 00:36:54,480
firmware we can recover from this bug

869
00:36:51,090 --> 00:36:56,760
and that was critical for us the

870
00:36:54,480 --> 00:36:58,380
corresponding public key associated with

871
00:36:56,760 --> 00:37:01,110
the private key used for attestation we

872
00:36:58,380 --> 00:37:03,120
seal in the console certificate that we

873
00:37:01,110 --> 00:37:05,160
make during Xbox manufacturing time and

874
00:37:03,120 --> 00:37:07,740
that certificate is presented to xbox

875
00:37:05,160 --> 00:37:11,069
live whenever we need to attest an Xbox

876
00:37:07,740 --> 00:37:12,689
console so pretty much because of this

877
00:37:11,070 --> 00:37:15,510
we can recover from any software

878
00:37:12,690 --> 00:37:17,370
mistakes made in any firmware throughout

879
00:37:15,510 --> 00:37:19,860
the system the only place we cannot

880
00:37:17,370 --> 00:37:21,600
recover from software mistakes is if we

881
00:37:19,860 --> 00:37:23,730
wrote a mistake in the boot rom and

882
00:37:21,600 --> 00:37:29,370
that's why we had to be really careful

883
00:37:23,730 --> 00:37:30,190
with that so why has Xbox security

884
00:37:29,370 --> 00:37:32,740
lasted soul

885
00:37:30,190 --> 00:37:36,190
like what did my view of what we did

886
00:37:32,740 --> 00:37:38,890
right to make this successful we did a

887
00:37:36,190 --> 00:37:40,510
few things right so first the fact that

888
00:37:38,890 --> 00:37:43,000
we created this separate security

889
00:37:40,510 --> 00:37:44,530
processor insecurity complex it helped

890
00:37:43,000 --> 00:37:47,140
us out a lot

891
00:37:44,530 --> 00:37:49,870
it made secure boot really possible

892
00:37:47,140 --> 00:37:52,960
without worry about side channel attacks

893
00:37:49,870 --> 00:37:54,880
and all kinds of things and the the

894
00:37:52,960 --> 00:37:57,600
custom crypto registers to keep keys

895
00:37:54,880 --> 00:38:00,190
secret it also helped a lot

896
00:37:57,600 --> 00:38:03,580
second we try to keep everything as

897
00:38:00,190 --> 00:38:06,280
simple as possible like the boot rom it

898
00:38:03,580 --> 00:38:09,400
does nothing but load the next stage and

899
00:38:06,280 --> 00:38:11,620
jump into it anything related to setting

900
00:38:09,400 --> 00:38:13,690
up hardware if we can defer that we

901
00:38:11,620 --> 00:38:16,960
defer that to the next stage the boot

902
00:38:13,690 --> 00:38:18,760
rom has to be as simple as possible the

903
00:38:16,960 --> 00:38:20,110
security processor code we make it as

904
00:38:18,760 --> 00:38:22,030
simple as possible there's literally no

905
00:38:20,110 --> 00:38:25,150
OS in the security prospect code it's

906
00:38:22,030 --> 00:38:27,040
just a dispatch loop the hypervisor we

907
00:38:25,150 --> 00:38:29,320
make it as simple as possible the one

908
00:38:27,040 --> 00:38:32,140
used on Xbox is not the full-blown

909
00:38:29,320 --> 00:38:36,640
hyper-v that's used in Azure it's a much

910
00:38:32,140 --> 00:38:40,210
more trim down version the fact that we

911
00:38:36,640 --> 00:38:43,960
have all the code encrypted we believe

912
00:38:40,210 --> 00:38:45,670
is a gave the attackers a hard time like

913
00:38:43,960 --> 00:38:47,740
we don't know how far the attackers got

914
00:38:45,670 --> 00:38:50,560
but the fact that everything's encrypted

915
00:38:47,740 --> 00:38:53,140
of every single stage of boot code all

916
00:38:50,560 --> 00:38:55,210
the games all the OS everything's

917
00:38:53,140 --> 00:38:57,460
encrypted all you see is cypher text I

918
00:38:55,210 --> 00:38:59,590
have to believe certainly slow them down

919
00:38:57,460 --> 00:39:01,060
like they have a hard time just

920
00:38:59,590 --> 00:39:02,440
decrypting things to begin with and you

921
00:39:01,060 --> 00:39:06,520
have to decrypt it before we can start

922
00:39:02,440 --> 00:39:08,470
attacking it we did lots of careful

923
00:39:06,520 --> 00:39:10,120
reviews threat modeling penetration

924
00:39:08,470 --> 00:39:14,770
testing to avoid making any stupid

925
00:39:10,120 --> 00:39:17,259
mistakes and lastly this part this part

926
00:39:14,770 --> 00:39:21,250
I think is really critical the fact that

927
00:39:17,260 --> 00:39:23,680
we do the the attestation is very

928
00:39:21,250 --> 00:39:26,590
critical if you think about it from

929
00:39:23,680 --> 00:39:29,560
attackers perspective if he finds a bug

930
00:39:26,590 --> 00:39:32,380
in our code that enables piracy or

931
00:39:29,560 --> 00:39:33,610
cheating what is he going to do so he

932
00:39:32,380 --> 00:39:36,040
can announce to the world whole

933
00:39:33,610 --> 00:39:37,990
Microsoft has this bug and what's going

934
00:39:36,040 --> 00:39:41,200
to happen micro starting to patch it

935
00:39:37,990 --> 00:39:42,899
tomorrow release an update everybody in

936
00:39:41,200 --> 00:39:44,819
the world get updated

937
00:39:42,900 --> 00:39:48,720
and he did all this work for nothing

938
00:39:44,819 --> 00:39:50,730
it's useless okay so if he thinks about

939
00:39:48,720 --> 00:39:53,160
is a huh that's the case why am I gonna

940
00:39:50,730 --> 00:39:55,500
bother attacking this thing it's it's

941
00:39:53,160 --> 00:39:57,509
useless of course I can attack it so

942
00:39:55,500 --> 00:39:59,430
that I personally can cheat in pirate

943
00:39:57,510 --> 00:40:02,549
but the fact that I can't announce it to

944
00:39:59,430 --> 00:40:03,210
the world and you know become a glorious

945
00:40:02,549 --> 00:40:06,990
person

946
00:40:03,210 --> 00:40:08,970
it's very unsatisfying so and because of

947
00:40:06,990 --> 00:40:11,009
this people tend to not spend the time

948
00:40:08,970 --> 00:40:13,288
to attack us this is my view of what's

949
00:40:11,010 --> 00:40:14,819
happening and I think since there's

950
00:40:13,289 --> 00:40:17,880
something like this also happening in

951
00:40:14,819 --> 00:40:21,660
the P for the ps4 also pretty much the

952
00:40:17,880 --> 00:40:23,640
only thing they can attack that is its

953
00:40:21,660 --> 00:40:27,328
permanent is if they find a bug in the

954
00:40:23,640 --> 00:40:29,308
boot rom code so you know and that's why

955
00:40:27,329 --> 00:40:33,390
we spend so much energy on that and all

956
00:40:29,309 --> 00:40:36,319
in hopes that there's no bugs there so

957
00:40:33,390 --> 00:40:40,230
what are the key takes so takeaways here

958
00:40:36,319 --> 00:40:42,270
the first I want to say is just existing

959
00:40:40,230 --> 00:40:45,020
hardware is typically not designed to be

960
00:40:42,270 --> 00:40:47,430
resilient again against physical attacks

961
00:40:45,020 --> 00:40:49,440
everybody should remember this like

962
00:40:47,430 --> 00:40:52,819
don't don't have dreams that you can

963
00:40:49,440 --> 00:40:55,319
just go out and buy up by some kind of

964
00:40:52,819 --> 00:40:56,970
PC and I'll be Brazilian against

965
00:40:55,319 --> 00:40:59,880
physical attacks we're so far away from

966
00:40:56,970 --> 00:41:01,890
it the Rams typically not encrypted the

967
00:40:59,880 --> 00:41:03,720
fact that South British TPM flash all

968
00:41:01,890 --> 00:41:07,020
these things are exposed it's all the

969
00:41:03,720 --> 00:41:10,609
problem this some industry standards are

970
00:41:07,020 --> 00:41:12,990
literally defined to be insecure so I

971
00:41:10,609 --> 00:41:15,808
bring up this example of address

972
00:41:12,990 --> 00:41:17,490
translation service on PCIe the first

973
00:41:15,809 --> 00:41:21,000
time I heard of it it just baffled me it

974
00:41:17,490 --> 00:41:23,520
just shows that this industry emphasizes

975
00:41:21,000 --> 00:41:26,520
performance over security so what this

976
00:41:23,520 --> 00:41:28,799
is is for those I don't know is in PCIe

977
00:41:26,520 --> 00:41:32,250
there's a way to speed things up you

978
00:41:28,799 --> 00:41:34,529
typically go through an iommu the the

979
00:41:32,250 --> 00:41:36,690
PCIe peripheral says hey I want to

980
00:41:34,529 --> 00:41:38,809
access this virtual address the IMU does

981
00:41:36,690 --> 00:41:40,980
it look up looks up the physical address

982
00:41:38,809 --> 00:41:42,900
checks to make sure you have access to

983
00:41:40,980 --> 00:41:45,059
this and then returns the physical

984
00:41:42,900 --> 00:41:48,000
address along with the virtual was back

985
00:41:45,059 --> 00:41:50,910
to the PCIe device and the next time the

986
00:41:48,000 --> 00:41:52,890
device can come back with just the

987
00:41:50,910 --> 00:41:54,690
physical address and say hey trust me I

988
00:41:52,890 --> 00:41:55,440
remember the physical address from last

989
00:41:54,690 --> 00:41:57,990
time

990
00:41:55,440 --> 00:42:00,539
just directly let me DMA right here to

991
00:41:57,990 --> 00:42:02,520
this do this physical address don't look

992
00:42:00,539 --> 00:42:05,280
up your iommu everything is good

993
00:42:02,520 --> 00:42:10,170
just let me DMA right here and you'll be

994
00:42:05,280 --> 00:42:13,349
fine and if you follow the standard in

995
00:42:10,170 --> 00:42:15,900
PCIe you are building a device that is

996
00:42:13,349 --> 00:42:18,359
by definition always physically

997
00:42:15,900 --> 00:42:20,760
attackable because the PCIe peripheral

998
00:42:18,359 --> 00:42:23,880
can just trivially attack you obviously

999
00:42:20,760 --> 00:42:25,470
we turn this off for for Xbox one but I

1000
00:42:23,880 --> 00:42:27,569
just want to illustrate there's lots of

1001
00:42:25,470 --> 00:42:30,558
designs like this in the industry where

1002
00:42:27,569 --> 00:42:36,569
we the trade off is always performance

1003
00:42:30,559 --> 00:42:38,400
over security and that saddens me also

1004
00:42:36,569 --> 00:42:40,020
keep in mind the 16 software is

1005
00:42:38,400 --> 00:42:43,650
typically not designed against physical

1006
00:42:40,020 --> 00:42:45,960
attacks the fact that we we can't trust

1007
00:42:43,650 --> 00:42:48,059
the hard drive most operating systems

1008
00:42:45,960 --> 00:42:50,039
are designed assuming the hard drive

1009
00:42:48,059 --> 00:42:53,789
will relax reliably remember things for

1010
00:42:50,039 --> 00:42:55,289
you most systems are designed assuming

1011
00:42:53,789 --> 00:42:56,819
nobody can clamp something on to the

1012
00:42:55,289 --> 00:42:58,619
flash and reprogram and they assume that

1013
00:42:56,819 --> 00:43:02,670
if software blocks access to flash

1014
00:42:58,619 --> 00:43:04,559
that's good enough and then another key

1015
00:43:02,670 --> 00:43:08,369
takeaway is the fact that we add this

1016
00:43:04,559 --> 00:43:10,650
security processor it really helped us

1017
00:43:08,369 --> 00:43:13,410
orchestrate the the sock to be more

1018
00:43:10,650 --> 00:43:15,170
secure looking back that was a really

1019
00:43:13,410 --> 00:43:17,190
great decision that we did and we

1020
00:43:15,170 --> 00:43:20,490
actually strongly encouraged the

1021
00:43:17,190 --> 00:43:22,880
interest to move in this direction and

1022
00:43:20,490 --> 00:43:25,890
finally you don't want to say that

1023
00:43:22,880 --> 00:43:29,029
building this was not easy it took a lot

1024
00:43:25,890 --> 00:43:31,558
of hard work a lot of careful thinking

1025
00:43:29,029 --> 00:43:34,920
but we have proven that it is actually

1026
00:43:31,559 --> 00:43:37,319
possible to build a device that can

1027
00:43:34,920 --> 00:43:39,089
withstand a physical attack for most

1028
00:43:37,319 --> 00:43:40,589
devices you could build it and you say

1029
00:43:39,089 --> 00:43:43,740
well nobody attacked it

1030
00:43:40,589 --> 00:43:45,900
I guess it's secure that might not

1031
00:43:43,740 --> 00:43:48,180
necessarily be true for a game console

1032
00:43:45,900 --> 00:43:50,640
after you build it if nobody can attack

1033
00:43:48,180 --> 00:43:53,490
it we know for sure people have tried

1034
00:43:50,640 --> 00:43:57,240
attacking this thing so we can say that

1035
00:43:53,490 --> 00:43:59,368
that it really is secure finally I just

1036
00:43:57,240 --> 00:44:03,078
want to say that although this sounds

1037
00:43:59,369 --> 00:44:06,630
like just a Microsoft Project that

1038
00:44:03,079 --> 00:44:08,430
helped make the game console secure so

1039
00:44:06,630 --> 00:44:09,300
that we don't have piracy and cheating

1040
00:44:08,430 --> 00:44:11,460
on X

1041
00:44:09,300 --> 00:44:15,089
this whole project which we finished in

1042
00:44:11,460 --> 00:44:18,329
2013 actually influenced the industry in

1043
00:44:15,089 --> 00:44:20,910
various ways that that that might not be

1044
00:44:18,329 --> 00:44:23,550
obvious so we were the first to do um

1045
00:44:20,910 --> 00:44:25,770
encryption we've been pushing Intel and

1046
00:44:23,550 --> 00:44:30,780
AMD to also do this now that's a feature

1047
00:44:25,770 --> 00:44:32,339
that's coming into their chips so the

1048
00:44:30,780 --> 00:44:35,280
fact that the security processor is

1049
00:44:32,339 --> 00:44:37,770
being added basically this this project

1050
00:44:35,280 --> 00:44:39,960
happened in 2013 and afterwards

1051
00:44:37,770 --> 00:44:42,540
AMD added a PSP platform security

1052
00:44:39,960 --> 00:44:44,490
processor to all of their CPUs going

1053
00:44:42,540 --> 00:44:47,970
forward it was highly influenced by this

1054
00:44:44,490 --> 00:44:51,450
project and also some of you may not

1055
00:44:47,970 --> 00:44:54,660
know there's a IOT after sphere project

1056
00:44:51,450 --> 00:44:56,520
that has this secure pluton core well

1057
00:44:54,660 --> 00:44:59,069
the pluton core came from the security

1058
00:44:56,520 --> 00:45:02,220
processor it was derived from this from

1059
00:44:59,069 --> 00:45:04,500
the Xbox so this Xbox project created a

1060
00:45:02,220 --> 00:45:06,328
lot of technology that was used

1061
00:45:04,500 --> 00:45:09,240
throughout Microsoft we also talked

1062
00:45:06,329 --> 00:45:12,540
about HPC I mean it's an influence being

1063
00:45:09,240 --> 00:45:15,660
the the industry in various ways so it's

1064
00:45:12,540 --> 00:45:18,300
it's a quite not only successful for the

1065
00:45:15,660 --> 00:45:20,129
Xbox business but in it affected

1066
00:45:18,300 --> 00:45:24,060
industry in various ways and we're very

1067
00:45:20,130 --> 00:45:26,599
happy about it so that's my talk thank

1068
00:45:24,060 --> 00:45:26,599
you very much

1069
00:45:29,910 --> 00:45:31,970
you

