1
00:00:00,000 --> 00:00:02,220
[Music]

2
00:00:02,489 --> 00:00:08,189
please welcome to the stage Niko Wiseman

3
00:00:08,200 --> 00:00:12,809
[Music]

4
00:00:11,019 --> 00:00:15,730
everyone

5
00:00:12,810 --> 00:00:18,190
can you guys hear me yeah you can hey

6
00:00:15,730 --> 00:00:20,770
guys doing first of all thanks for

7
00:00:18,190 --> 00:00:23,830
staying with me and always very late I

8
00:00:20,770 --> 00:00:25,930
am super tired and I'm sure everyone

9
00:00:23,830 --> 00:00:28,240
else is burnout by now like so many

10
00:00:25,930 --> 00:00:31,390
talks so this is why I had this lie over

11
00:00:28,240 --> 00:00:37,660
here not this one the other one oh it's

12
00:00:31,390 --> 00:00:40,150
my first lie well anyways so open sore

13
00:00:37,660 --> 00:00:42,040
security will never do never came along

14
00:00:40,150 --> 00:00:45,040
this is gonna be the color re of my

15
00:00:42,040 --> 00:00:46,390
presentations that boil T's will never

16
00:00:45,040 --> 00:00:49,210
came by himself

17
00:00:46,390 --> 00:00:52,540
there's always more than one in the

18
00:00:49,210 --> 00:00:55,479
codebase and so before we start let me

19
00:00:52,540 --> 00:00:57,370
introduce myself I'm the guy on the left

20
00:00:55,479 --> 00:00:58,960
the other one is a pigeon

21
00:00:57,370 --> 00:01:04,330
he's actually my daughter not a real

22
00:00:58,960 --> 00:01:06,760
pigeon M for many years I work in

23
00:01:04,330 --> 00:01:08,350
immunity and have done like so many

24
00:01:06,760 --> 00:01:11,110
different jobs from like security

25
00:01:08,350 --> 00:01:12,899
researcher gym manager at an consulting

26
00:01:11,110 --> 00:01:17,110
have done bull immunity and exploit

27
00:01:12,900 --> 00:01:20,380
research and recently I moved to see Mel

28
00:01:17,110 --> 00:01:26,010
that girl choir but github no more than

29
00:01:20,380 --> 00:01:28,570
a month or two ago and so here I am I

30
00:01:26,010 --> 00:01:32,530
get back into my technical work and a

31
00:01:28,570 --> 00:01:35,770
full time researcher and part of the

32
00:01:32,530 --> 00:01:39,460
mission that my and my myself and my

33
00:01:35,770 --> 00:01:41,550
team had is to try to help secure the

34
00:01:39,460 --> 00:01:44,559
open source landscape

35
00:01:41,550 --> 00:01:48,280
so basically borrow my job is finding

36
00:01:44,560 --> 00:01:52,630
marks every day and generally do it on C

37
00:01:48,280 --> 00:01:58,390
C++ and a little bit of code anyway it's

38
00:01:52,630 --> 00:02:00,490
sort of funny to be doing I talk about

39
00:01:58,390 --> 00:02:04,510
open source security and a Microsoft

40
00:02:00,490 --> 00:02:07,149
conference but you know definitely time

41
00:02:04,510 --> 00:02:09,670
have changed quite a lot and if you look

42
00:02:07,150 --> 00:02:15,610
at that graph over there you'll notice

43
00:02:09,669 --> 00:02:18,480
that in 2017 the top two companies that

44
00:02:15,610 --> 00:02:21,730
contribute an open-source projects were

45
00:02:18,480 --> 00:02:25,179
Google and Microsoft and there is a

46
00:02:21,730 --> 00:02:26,530
reason for that because definitely open

47
00:02:25,180 --> 00:02:29,150
source has warned everyone

48
00:02:26,530 --> 00:02:31,610
everyone is using in one way or the

49
00:02:29,150 --> 00:02:34,580
other open-source code

50
00:02:31,610 --> 00:02:38,379
however there's many challenges with

51
00:02:34,580 --> 00:02:42,620
open source code the first and foremost

52
00:02:38,379 --> 00:02:44,750
challenge is code quality there's this

53
00:02:42,620 --> 00:02:47,870
comes at very all concept that there's

54
00:02:44,750 --> 00:02:52,010
many eyes looking at source code and you

55
00:02:47,870 --> 00:02:54,349
can actually said that there's many eyes

56
00:02:52,010 --> 00:02:58,399
looking at binary to you if you are on

57
00:02:54,349 --> 00:03:01,130
the offensive side of security but the

58
00:02:58,400 --> 00:03:04,430
reality is that whole idea of many eyes

59
00:03:01,130 --> 00:03:06,440
looking at code it's not usually like

60
00:03:04,430 --> 00:03:08,390
that there's certain projects that you

61
00:03:06,440 --> 00:03:11,959
know get fast and get reviewed quite a

62
00:03:08,390 --> 00:03:14,779
lot but that ring has two a second

63
00:03:11,959 --> 00:03:17,720
problem which is the supply chain you

64
00:03:14,780 --> 00:03:20,329
might looking at and as a company

65
00:03:17,720 --> 00:03:24,560
especially the big ones are able to you

66
00:03:20,329 --> 00:03:26,209
know be able to review certain source

67
00:03:24,560 --> 00:03:27,860
code base like the first layer but

68
00:03:26,209 --> 00:03:29,599
there's always dependencies and those

69
00:03:27,860 --> 00:03:33,859
dependencies had more dependencies and

70
00:03:29,599 --> 00:03:36,500
so maintaining those supply chains is

71
00:03:33,859 --> 00:03:39,680
really really hard and it's job that

72
00:03:36,500 --> 00:03:42,260
cannot be done by one company that

73
00:03:39,680 --> 00:03:44,690
requires sort of like coalition of

74
00:03:42,260 --> 00:03:47,030
different companies working together in

75
00:03:44,690 --> 00:03:51,709
order to help secure the open source

76
00:03:47,030 --> 00:03:54,889
world it's funny because I was doing

77
00:03:51,709 --> 00:03:57,650
these sort of like mental exercise and I

78
00:03:54,889 --> 00:03:59,239
was working on a little bit of golang

79
00:03:57,650 --> 00:04:01,220
and if you ever were would go and

80
00:03:59,239 --> 00:04:03,829
definitely am NOT an expert so don't for

81
00:04:01,220 --> 00:04:06,350
me on this what they do is in order to

82
00:04:03,829 --> 00:04:08,569
import a library what you're doing go

83
00:04:06,350 --> 00:04:11,569
lines you go directly into import and

84
00:04:08,569 --> 00:04:16,070
then you point it directly to the github

85
00:04:11,569 --> 00:04:17,690
URL so when you get the project they

86
00:04:16,070 --> 00:04:20,180
will automatically download the

87
00:04:17,690 --> 00:04:21,649
different projects in github of the

88
00:04:20,180 --> 00:04:24,139
driver is that you want to import in

89
00:04:21,649 --> 00:04:27,650
your own code now what I thought is like

90
00:04:24,139 --> 00:04:30,440
let's imagine that I'm up like adversary

91
00:04:27,650 --> 00:04:32,960
and I want to get into some sort of like

92
00:04:30,440 --> 00:04:35,630
company that I know is using certain

93
00:04:32,960 --> 00:04:37,549
code base so what I did is a little

94
00:04:35,630 --> 00:04:40,150
exercise and suddenly I didn't bring the

95
00:04:37,550 --> 00:04:44,710
cheers so what I did is I went through

96
00:04:40,150 --> 00:04:47,840
one of these big companies that works in

97
00:04:44,710 --> 00:04:50,989
an application for transportation I'm

98
00:04:47,840 --> 00:04:53,060
sure you know it it was and their bid to

99
00:04:50,990 --> 00:04:57,320
use a lot of golang so what I did is I

100
00:04:53,060 --> 00:05:00,200
took all the different imports and look

101
00:04:57,320 --> 00:05:02,570
at all the different geek up projects

102
00:05:00,200 --> 00:05:05,390
that they were importing and as I look

103
00:05:02,570 --> 00:05:09,050
at the different countries where the

104
00:05:05,390 --> 00:05:10,640
developer or the the maintainer was from

105
00:05:09,050 --> 00:05:12,950
so I thought you know coming from

106
00:05:10,640 --> 00:05:14,300
Argentina which our currency and or if

107
00:05:12,950 --> 00:05:16,969
you herb is terrible

108
00:05:14,300 --> 00:05:19,280
I thought if I'm a national state

109
00:05:16,970 --> 00:05:21,920
adversary and I want to buy one of those

110
00:05:19,280 --> 00:05:25,130
projects you know I will go to the

111
00:05:21,920 --> 00:05:26,990
country has the worst currency and try

112
00:05:25,130 --> 00:05:30,140
to buy that project so I end up with a

113
00:05:26,990 --> 00:05:32,270
map and and what I find out is like for

114
00:05:30,140 --> 00:05:34,640
those projects there were developers

115
00:05:32,270 --> 00:05:37,370
from all around the world so it's sort

116
00:05:34,640 --> 00:05:40,640
of like interesting exercise to see how

117
00:05:37,370 --> 00:05:45,140
you continually attack that supply chain

118
00:05:40,640 --> 00:05:49,610
and then there is a problem of CBS CBS

119
00:05:45,140 --> 00:05:52,070
it's necessary evil in a way if you are

120
00:05:49,610 --> 00:05:55,160
working on closed source especially for

121
00:05:52,070 --> 00:05:57,440
Microsoft another big companies CB works

122
00:05:55,160 --> 00:05:59,000
pretty well and the reason for that is

123
00:05:57,440 --> 00:06:02,540
because Microsoft and other companies

124
00:05:59,000 --> 00:06:05,210
has proper try ash on the voluma T's

125
00:06:02,540 --> 00:06:09,820
that get reported so all the information

126
00:06:05,210 --> 00:06:12,710
that you get from a CBE is the actual

127
00:06:09,820 --> 00:06:14,870
actual risk of the immunity these people

128
00:06:12,710 --> 00:06:17,359
in Microsoft that check that and see if

129
00:06:14,870 --> 00:06:20,120
something is exploitable or not how what

130
00:06:17,360 --> 00:06:23,240
is it potentially attack surface etc etc

131
00:06:20,120 --> 00:06:26,210
but with open source that doesn't really

132
00:06:23,240 --> 00:06:28,340
happen and what happened is that you

133
00:06:26,210 --> 00:06:30,650
have a lot of different security

134
00:06:28,340 --> 00:06:32,719
researchers that sometimes are sort of

135
00:06:30,650 --> 00:06:34,700
like playing the game of CBS so like

136
00:06:32,720 --> 00:06:38,300
they obtain like different kind sort of

137
00:06:34,700 --> 00:06:41,210
CBS and and and let me tell you first

138
00:06:38,300 --> 00:06:43,540
Mitra does a amazing job but obviously

139
00:06:41,210 --> 00:06:47,090
there are only a few people and get

140
00:06:43,540 --> 00:06:49,220
quite a lot of submissions so what what

141
00:06:47,090 --> 00:06:51,558
researchers tend to do is over

142
00:06:49,220 --> 00:06:53,629
exaggerate the risks of development

143
00:06:51,559 --> 00:06:55,549
and sometimes the open-source project

144
00:06:53,629 --> 00:06:57,349
doesn't have enough time to do proper

145
00:06:55,549 --> 00:07:00,438
triage they only have time to actually

146
00:06:57,349 --> 00:07:04,429
pass the moon immunity and so we end up

147
00:07:00,439 --> 00:07:06,799
with CBS that doesn't really reflect the

148
00:07:04,429 --> 00:07:08,149
reality of the vulnerability and you see

149
00:07:06,799 --> 00:07:10,399
that a lot like you will see on the news

150
00:07:08,149 --> 00:07:12,769
like the last suit of vulnerability and

151
00:07:10,399 --> 00:07:14,899
like you know everyone is like sailing

152
00:07:12,769 --> 00:07:16,339
this is a terrible back but when you

153
00:07:14,899 --> 00:07:18,259
start like scratching a little bit the

154
00:07:16,339 --> 00:07:21,349
surface you realize that the back is not

155
00:07:18,259 --> 00:07:25,489
that bad I mean it requires a very

156
00:07:21,349 --> 00:07:28,039
customized configuration so I mean the

157
00:07:25,489 --> 00:07:29,558
risks is really really small and and so

158
00:07:28,039 --> 00:07:33,589
the other problem that series has

159
00:07:29,559 --> 00:07:35,749
especially since it became the source of

160
00:07:33,589 --> 00:07:39,529
a lot of different automation tool is

161
00:07:35,749 --> 00:07:42,519
that they're way too many how many CBI

162
00:07:39,529 --> 00:07:45,259
updates do you think there is per week I

163
00:07:42,519 --> 00:07:47,629
mean let me play a game of racing hands

164
00:07:45,259 --> 00:07:49,389
so do you think there's a hundred CVS

165
00:07:47,629 --> 00:07:51,349
per week raise your hand

166
00:07:49,389 --> 00:07:55,489
giving is like something between a

167
00:07:51,349 --> 00:07:59,479
hundred to three hundred do you think

168
00:07:55,489 --> 00:08:04,549
something between 300 and 500 do you

169
00:07:59,479 --> 00:08:06,409
think more than 500 if I was a bad

170
00:08:04,549 --> 00:08:08,388
person I we say that will depend on

171
00:08:06,409 --> 00:08:11,299
which week if it's the second week of

172
00:08:08,389 --> 00:08:12,679
the month you know what hat all right no

173
00:08:11,299 --> 00:08:15,169
no talking about Mario I'm talking about

174
00:08:12,679 --> 00:08:16,998
Dobey you know you have like the early

175
00:08:15,169 --> 00:08:20,299
minds in there but I'm talking about

176
00:08:16,999 --> 00:08:23,689
Adobe so the reality is that I I work in

177
00:08:20,299 --> 00:08:25,429
a look at CBS every morning and what we

178
00:08:23,689 --> 00:08:28,969
realize is that every week there's

179
00:08:25,429 --> 00:08:31,359
around 300 to 500 different boon

180
00:08:28,969 --> 00:08:34,399
abilities so it's really really hard to

181
00:08:31,360 --> 00:08:37,219
to control that amount of work is being

182
00:08:34,399 --> 00:08:39,289
submitted into metrics which is sort of

183
00:08:37,219 --> 00:08:42,319
like the problem and of course you have

184
00:08:39,289 --> 00:08:44,029
all sort of like extremely bad things

185
00:08:42,318 --> 00:08:46,969
being submitted so what you're going to

186
00:08:44,029 --> 00:08:51,019
see here it's a bull ability on a

187
00:08:46,970 --> 00:08:54,050
project called boar producer I actually

188
00:08:51,019 --> 00:08:56,420
talk with the maintainer the bodies we

189
00:08:54,050 --> 00:08:58,910
can see on the left and I hope the font

190
00:08:56,420 --> 00:09:01,759
is big enough it's a very basic string

191
00:08:58,910 --> 00:09:02,689
copy string card right but the problem

192
00:09:01,759 --> 00:09:05,210
is that

193
00:09:02,690 --> 00:09:09,310
this project is not a real project is

194
00:09:05,210 --> 00:09:12,440
someone like create a project for some

195
00:09:09,310 --> 00:09:15,859
assignment school and if someone has to

196
00:09:12,440 --> 00:09:18,920
have like a bad note should be from a

197
00:09:15,860 --> 00:09:20,240
professor but not from me tree so

198
00:09:18,920 --> 00:09:23,180
someone sent me an actually a bargain

199
00:09:20,240 --> 00:09:25,760
they're sort of like funny thing is how

200
00:09:23,180 --> 00:09:28,819
he fix it so what he did is let's

201
00:09:25,760 --> 00:09:30,530
transform the this tag array into

202
00:09:28,820 --> 00:09:34,610
basically a pointer but it's not

203
00:09:30,530 --> 00:09:37,640
allocated in any way so it's sort of

204
00:09:34,610 --> 00:09:39,080
like and I think that that might be less

205
00:09:37,640 --> 00:09:41,290
horrible than the other one it's the

206
00:09:39,080 --> 00:09:44,120
thing about it depending what's on the

207
00:09:41,290 --> 00:09:45,410
onion generation is bearable then maybe

208
00:09:44,120 --> 00:09:47,420
this actually pointing to something that

209
00:09:45,410 --> 00:09:50,030
will not overflow sort of like a

210
00:09:47,420 --> 00:09:52,660
shredding girl/boy a bowl or some sort

211
00:09:50,030 --> 00:09:56,510
anyways I mean the point here is that

212
00:09:52,660 --> 00:10:01,040
they're being assigned CBE's to projects

213
00:09:56,510 --> 00:10:03,410
done by by kids school that has no uses

214
00:10:01,040 --> 00:10:06,290
other than in class but this guy

215
00:10:03,410 --> 00:10:09,219
basically created a repository and some

216
00:10:06,290 --> 00:10:13,130
look at the code and submit see and

217
00:10:09,220 --> 00:10:14,510
semi-log and then send it to me tree and

218
00:10:13,130 --> 00:10:16,250
for me tree is really hard to like see

219
00:10:14,510 --> 00:10:17,660
which are real projects which are now

220
00:10:16,250 --> 00:10:22,160
like this is a lot of work involving

221
00:10:17,660 --> 00:10:23,300
that so you know we first start talking

222
00:10:22,160 --> 00:10:25,850
about like all the different probes that

223
00:10:23,300 --> 00:10:28,280
we have listen talk about some of this

224
00:10:25,850 --> 00:10:30,260
solution that you can see currently

225
00:10:28,280 --> 00:10:32,270
being done and one of the main ones

226
00:10:30,260 --> 00:10:34,780
which was really interested and I'm sure

227
00:10:32,270 --> 00:10:38,350
everyone here about that is OSS fast

228
00:10:34,780 --> 00:10:41,510
which is basically continuous fasting

229
00:10:38,350 --> 00:10:44,780
provided by Microsoft so Microsoft

230
00:10:41,510 --> 00:10:46,670
offered this for free for each open

231
00:10:44,780 --> 00:10:48,110
source projects and the only thing that

232
00:10:46,670 --> 00:10:50,599
you required to do that is create a

233
00:10:48,110 --> 00:10:57,290
specific docket file and then every time

234
00:10:50,600 --> 00:11:00,440
there is a pull request then Google will

235
00:10:57,290 --> 00:11:04,849
fast the project and so like you can you

236
00:11:00,440 --> 00:11:06,910
have continuous balloon release fasting

237
00:11:04,850 --> 00:11:10,280
so it's actually quite an interesting

238
00:11:06,910 --> 00:11:12,350
project and I think I have more than 200

239
00:11:10,280 --> 00:11:15,560
projects and then fine like around nine

240
00:11:12,350 --> 00:11:18,709
sounds and vulnerabilities there's also

241
00:11:15,560 --> 00:11:20,540
this Cisco project from Google that they

242
00:11:18,709 --> 00:11:23,479
have been fussing the kernel like crazy

243
00:11:20,540 --> 00:11:25,730
and I know because I have seen some of

244
00:11:23,480 --> 00:11:27,829
the results like the word have done for

245
00:11:25,730 --> 00:11:31,160
USB is crazy they find like so many

246
00:11:27,829 --> 00:11:33,800
parameters on USB that the Linux

247
00:11:31,160 --> 00:11:38,149
containers like are not able to catch it

248
00:11:33,800 --> 00:11:40,729
as fast as they were submitting it the

249
00:11:38,149 --> 00:11:42,439
other project is very interesting in

250
00:11:40,730 --> 00:11:46,009
terms of like trying to secure the open

251
00:11:42,439 --> 00:11:49,509
source work is the bonus and this is

252
00:11:46,009 --> 00:11:52,040
sort of like a double-edged word because

253
00:11:49,509 --> 00:11:55,009
there is a lot of different projects

254
00:11:52,040 --> 00:11:57,349
there you know I mean pay for for

255
00:11:55,009 --> 00:12:00,290
finding vulnerabilities but some of the

256
00:11:57,350 --> 00:12:03,800
projects sometimes they don't have the

257
00:12:00,290 --> 00:12:06,019
better words are getting paid so the

258
00:12:03,800 --> 00:12:08,540
maintainer is actually doing for free on

259
00:12:06,019 --> 00:12:10,519
on their own time and and the

260
00:12:08,540 --> 00:12:13,599
researchers that are being paid for to

261
00:12:10,519 --> 00:12:16,220
find vulnerabilities but in reality the

262
00:12:13,600 --> 00:12:18,230
the project is not really bad it's a

263
00:12:16,220 --> 00:12:20,449
thing it's a it's a good idea it helps

264
00:12:18,230 --> 00:12:23,839
their objective obviously is to try to

265
00:12:20,449 --> 00:12:27,290
fight the black market right and

266
00:12:23,839 --> 00:12:28,790
obviously fighting the black bag is

267
00:12:27,290 --> 00:12:30,800
really hard because there's a reason why

268
00:12:28,790 --> 00:12:33,170
it's called black market so always going

269
00:12:30,800 --> 00:12:36,410
to be more expensive too

270
00:12:33,170 --> 00:12:38,089
or or you gain more money by selling AB

271
00:12:36,410 --> 00:12:39,980
eliminating through the black market

272
00:12:38,089 --> 00:12:41,600
because the black market know they're

273
00:12:39,980 --> 00:12:43,069
competing against the white market so

274
00:12:41,600 --> 00:12:44,889
they're always going to be a bit more

275
00:12:43,069 --> 00:12:47,660
expensive and that expense is gonna be

276
00:12:44,889 --> 00:12:50,660
translated to their clients whoever they

277
00:12:47,660 --> 00:12:54,139
are but of course if you are researcher

278
00:12:50,660 --> 00:12:55,519
and obviously you don't know what people

279
00:12:54,139 --> 00:12:57,860
are gonna do with those vulnerabilities

280
00:12:55,519 --> 00:12:59,870
you sell to the black market and you

281
00:12:57,860 --> 00:13:01,850
want to have like a clean conscience

282
00:12:59,870 --> 00:13:05,149
then obviously going through the these

283
00:13:01,850 --> 00:13:07,129
bounties is a really good way to do in a

284
00:13:05,149 --> 00:13:08,809
way the black mark is like taxes and you

285
00:13:07,129 --> 00:13:09,589
pain and you know what they're gonna do

286
00:13:08,809 --> 00:13:12,009
with your money

287
00:13:09,589 --> 00:13:15,709
sort of like the same with black market

288
00:13:12,009 --> 00:13:18,860
so let me tell you a little bit of what

289
00:13:15,709 --> 00:13:21,079
we are doing there's two things like

290
00:13:18,860 --> 00:13:25,009
there's a really interesting project

291
00:13:21,079 --> 00:13:26,489
that I did have a cab which is called

292
00:13:25,009 --> 00:13:28,920
the Pender boat and what they

293
00:13:26,490 --> 00:13:31,950
do is basically about that look into

294
00:13:28,920 --> 00:13:34,829
your open source project and what it

295
00:13:31,950 --> 00:13:36,570
does is looks the different dependencies

296
00:13:34,830 --> 00:13:39,420
that you have on your project and if

297
00:13:36,570 --> 00:13:41,339
there's any older dependency that has

298
00:13:39,420 --> 00:13:42,779
some sort of like vulnerability they

299
00:13:41,339 --> 00:13:45,029
will let you know and they will let you

300
00:13:42,779 --> 00:13:47,310
know how you can fix that and if you

301
00:13:45,029 --> 00:13:51,680
want you will be able to fix it this

302
00:13:47,310 --> 00:13:54,300
sounds simple but it's so useful and the

303
00:13:51,680 --> 00:13:57,089
very interesting thing about this is

304
00:13:54,300 --> 00:13:59,040
that it's very simple to use it and so

305
00:13:57,089 --> 00:14:01,200
in a way and it's part of our mission

306
00:13:59,040 --> 00:14:04,050
we're sort of like trying to do the more

307
00:14:01,200 --> 00:14:05,760
critize the access to security doesn't

308
00:14:04,050 --> 00:14:08,160
has to be shots for security researchers

309
00:14:05,760 --> 00:14:10,260
the pedobear should be able to access

310
00:14:08,160 --> 00:14:13,140
those tools without having to learn a

311
00:14:10,260 --> 00:14:14,939
lot about them the other thing that

312
00:14:13,140 --> 00:14:16,920
they're doing is very interesting and I

313
00:14:14,940 --> 00:14:19,950
know if yours and minimal immunity to

314
00:14:16,920 --> 00:14:21,660
bender is they have these security

315
00:14:19,950 --> 00:14:23,580
advisers that you can enable in your

316
00:14:21,660 --> 00:14:26,880
repository and it's quite interesting

317
00:14:23,580 --> 00:14:29,640
because finding the right security con

318
00:14:26,880 --> 00:14:31,500
contact sometimes is so painful that you

319
00:14:29,640 --> 00:14:34,199
end up like deciding not to submit a

320
00:14:31,500 --> 00:14:35,970
bully Milty because this is like you

321
00:14:34,200 --> 00:14:38,870
sending an email like nobody ever answer

322
00:14:35,970 --> 00:14:40,829
you and so-and-so going alone so the

323
00:14:38,870 --> 00:14:42,959
solution for that is they have like a

324
00:14:40,829 --> 00:14:44,579
private section that you can send a

325
00:14:42,959 --> 00:14:46,290
report and he only goes to the

326
00:14:44,579 --> 00:14:49,109
maintainer on is not gonna be public in

327
00:14:46,290 --> 00:14:49,860
any way so it's quite interesting the

328
00:14:49,110 --> 00:14:52,200
other thing that I think is very

329
00:14:49,860 --> 00:14:54,540
interesting is the donation part you can

330
00:14:52,200 --> 00:14:57,899
sponsor an open-source project but not

331
00:14:54,540 --> 00:15:00,120
for researchers you can sponsor it for

332
00:14:57,899 --> 00:15:01,950
the maintainer so in a way like you've

333
00:15:00,120 --> 00:15:05,459
won something fixed you can actually

334
00:15:01,950 --> 00:15:07,910
help with some money to the project and

335
00:15:05,459 --> 00:15:11,310
obviously that helping with money also

336
00:15:07,910 --> 00:15:15,719
tend to translate into having better

337
00:15:11,310 --> 00:15:17,910
code quality and let me tell you what my

338
00:15:15,720 --> 00:15:19,770
team is doing aside from like mining

339
00:15:17,910 --> 00:15:22,110
finding pool amenities we're doing a lot

340
00:15:19,770 --> 00:15:26,790
of like borign analysis have you ever

341
00:15:22,110 --> 00:15:28,230
heard of buy earned analysis alright so

342
00:15:26,790 --> 00:15:30,089
let me explain a little bit of the

343
00:15:28,230 --> 00:15:32,160
concept of bar analysis and it's go with

344
00:15:30,089 --> 00:15:35,100
the color re of the presentation the

345
00:15:32,160 --> 00:15:37,800
idea of Biron analysis is that Bulova

346
00:15:35,100 --> 00:15:40,230
tees never came along so there is always

347
00:15:37,800 --> 00:15:42,689
if you find a warranty of certain bad

348
00:15:40,230 --> 00:15:44,490
class this goal is going to be a similar

349
00:15:42,690 --> 00:15:45,960
pattern in the same codebase

350
00:15:44,490 --> 00:15:48,780
and sometimes that pattern can be

351
00:15:45,960 --> 00:15:53,190
transformed moved to one cold ways to

352
00:15:48,780 --> 00:15:57,780
the other so QL it's an amazing tool

353
00:15:53,190 --> 00:16:01,650
that was designed but a lot of really

354
00:15:57,780 --> 00:16:05,760
smart people in Oxford and what it does

355
00:16:01,650 --> 00:16:07,470
it basically compiled a code base and it

356
00:16:05,760 --> 00:16:09,660
transforming in some sort of like

357
00:16:07,470 --> 00:16:11,430
relational database or customized

358
00:16:09,660 --> 00:16:14,490
relational database that we call

359
00:16:11,430 --> 00:16:16,829
snapshot so later what you can do is

360
00:16:14,490 --> 00:16:18,720
you'll actually create queries in a

361
00:16:16,830 --> 00:16:20,700
language similar to dialogue or light in

362
00:16:18,720 --> 00:16:26,430
a way is sort of like SQL so you can

363
00:16:20,700 --> 00:16:28,950
create an ql query but where you sort of

364
00:16:26,430 --> 00:16:30,780
like create back class based on that

365
00:16:28,950 --> 00:16:32,670
query so that query will define a bad

366
00:16:30,780 --> 00:16:34,530
class and then what you will do is you

367
00:16:32,670 --> 00:16:37,319
run that query on the database and

368
00:16:34,530 --> 00:16:40,230
instead of finding that specific bug you

369
00:16:37,320 --> 00:16:41,670
will find more than one bug and and I'm

370
00:16:40,230 --> 00:16:43,530
gonna walk you through some of this

371
00:16:41,670 --> 00:16:47,280
process over here with different bugs

372
00:16:43,530 --> 00:16:51,900
that we have fine in the past so what we

373
00:16:47,280 --> 00:16:55,110
do is with ql we are not only doing bar

374
00:16:51,900 --> 00:16:57,329
analysis but i also help you to explore

375
00:16:55,110 --> 00:17:02,340
the code base for to find like different

376
00:16:57,330 --> 00:17:03,870
leads this is LG TM comm which is part

377
00:17:02,340 --> 00:17:06,210
of the same project

378
00:17:03,870 --> 00:17:09,329
lgt m.com i don't know if you heard but

379
00:17:06,210 --> 00:17:11,130
what it does is a website that you can

380
00:17:09,329 --> 00:17:14,490
point out to whatever open source

381
00:17:11,130 --> 00:17:16,500
project before i say that ql is free for

382
00:17:14,490 --> 00:17:19,620
open source projects so you can download

383
00:17:16,500 --> 00:17:21,119
the eclipse plug-in and you can run your

384
00:17:19,619 --> 00:17:23,550
queries on the code base and it will

385
00:17:21,119 --> 00:17:24,899
work perfectly no in the code base in

386
00:17:23,550 --> 00:17:27,810
the snapshot so

387
00:17:24,900 --> 00:17:30,150
lgt m.com what it does is it will you

388
00:17:27,810 --> 00:17:33,480
will point out to whatever github

389
00:17:30,150 --> 00:17:34,470
project you have open source and then

390
00:17:33,480 --> 00:17:36,870
what it's going to do is going to

391
00:17:34,470 --> 00:17:38,610
download that it's going to compile it

392
00:17:36,870 --> 00:17:40,669
it's gonna create a snapshot and then

393
00:17:38,610 --> 00:17:43,770
it's gonna run a series of different

394
00:17:40,670 --> 00:17:45,690
statics alerts or queries that we have

395
00:17:43,770 --> 00:17:49,290
predefined and it will find

396
00:17:45,690 --> 00:17:51,870
vulnerabilities and if you enable the PR

397
00:17:49,290 --> 00:17:55,750
it's going to actually send a mess

398
00:17:51,870 --> 00:17:58,750
to the projects saying we find this back

399
00:17:55,750 --> 00:18:02,169
here this is how you can look at the bag

400
00:17:58,750 --> 00:18:03,880
and then later you can fix it so we are

401
00:18:02,169 --> 00:18:11,020
doing that for any open source project

402
00:18:03,880 --> 00:18:13,780
that decides to be part of LG TM so in

403
00:18:11,020 --> 00:18:16,500
this is sort of like a paper that I

404
00:18:13,780 --> 00:18:20,830
recently find out is very interesting

405
00:18:16,500 --> 00:18:23,410
and it's a work from a couple of people

406
00:18:20,830 --> 00:18:25,870
from the University of iron and what

407
00:18:23,410 --> 00:18:27,970
they did is and it's sort of funny that

408
00:18:25,870 --> 00:18:30,549
what they did so they they want to stock

409
00:18:27,970 --> 00:18:33,309
overflow and start finding finding

410
00:18:30,549 --> 00:18:35,530
different example of snippets that were

411
00:18:33,309 --> 00:18:37,840
born about and then they took those

412
00:18:35,530 --> 00:18:40,539
snippets and start looking at different

413
00:18:37,840 --> 00:18:43,270
projects on github so they find 69

414
00:18:40,539 --> 00:18:45,610
different snippets and they found around

415
00:18:43,270 --> 00:18:49,030
like 2000 projects that were using

416
00:18:45,610 --> 00:18:51,219
reusing that Stack Overflow snippet and

417
00:18:49,030 --> 00:18:53,710
and it was actually born or raised your

418
00:18:51,220 --> 00:18:55,570
hand whoever you Stack Overflow to write

419
00:18:53,710 --> 00:18:57,520
something here we go yeah

420
00:18:55,570 --> 00:19:01,240
and everyone is know raise your hand

421
00:18:57,520 --> 00:19:02,830
you're lying so so it's a very

422
00:19:01,240 --> 00:19:07,030
interesting project and it's sort of

423
00:19:02,830 --> 00:19:08,889
like our our our way of thinking when we

424
00:19:07,030 --> 00:19:11,289
are doing all this work with bar and

425
00:19:08,890 --> 00:19:13,390
analysis so I want you to like every

426
00:19:11,289 --> 00:19:15,460
good talks of analogy so everything like

427
00:19:13,390 --> 00:19:18,190
what's the best analogy format are so in

428
00:19:15,460 --> 00:19:20,890
a way it's sort of like the coffee

429
00:19:18,190 --> 00:19:24,460
cherries right so we are writing a query

430
00:19:20,890 --> 00:19:27,100
it's gonna you have to the core is gonna

431
00:19:24,460 --> 00:19:29,200
be very generic at first but then what

432
00:19:27,100 --> 00:19:30,580
as soon as you start peeling it and you

433
00:19:29,200 --> 00:19:33,130
go through the different parts of the

434
00:19:30,580 --> 00:19:35,379
cherry the berry ski in the pub you end

435
00:19:33,130 --> 00:19:37,299
up finding the right beam and and

436
00:19:35,380 --> 00:19:39,190
obviously these make no sense right now

437
00:19:37,299 --> 00:19:41,889
but I'm sure it's gonna make sense for

438
00:19:39,190 --> 00:19:44,190
you in a little bit so let me start with

439
00:19:41,890 --> 00:19:45,400
the first one this is sort of like a

440
00:19:44,190 --> 00:19:48,250
crowdsource

441
00:19:45,400 --> 00:19:50,620
vulnerable defining or example it's sort

442
00:19:48,250 --> 00:19:55,240
of like funny it wasn't like I think my

443
00:19:50,620 --> 00:19:58,178
first month in semo so I was I was doing

444
00:19:55,240 --> 00:20:01,690
and I I do that every morning or every

445
00:19:58,179 --> 00:20:04,390
two or three days is I sit down I look

446
00:20:01,690 --> 00:20:06,700
at all the different series

447
00:20:04,390 --> 00:20:11,740
that happened that day or the day before

448
00:20:06,700 --> 00:20:14,529
and what I do is I try to trace that so

449
00:20:11,740 --> 00:20:17,980
what I do is I look at the CVE and I

450
00:20:14,529 --> 00:20:24,010
write a query that modeled the bad class

451
00:20:17,980 --> 00:20:28,090
that was sent back to CBE and and then

452
00:20:24,010 --> 00:20:30,158
what I did was I wrote a query defining

453
00:20:28,090 --> 00:20:33,629
the specific volume and he that I found

454
00:20:30,159 --> 00:20:37,120
and and then run it on the Linux kernel

455
00:20:33,630 --> 00:20:37,630
the query die generally arises not that

456
00:20:37,120 --> 00:20:39,580
good

457
00:20:37,630 --> 00:20:41,710
especially that one because you know

458
00:20:39,580 --> 00:20:44,230
I've been working for a month and Q all

459
00:20:41,710 --> 00:20:45,940
it takes sometimes sooner so it's not

460
00:20:44,230 --> 00:20:48,519
really good but what I did is I tweet

461
00:20:45,940 --> 00:20:50,320
and say this is the query that I did on

462
00:20:48,519 --> 00:20:52,659
the Linux kernel based on a balloon

463
00:20:50,320 --> 00:20:55,149
t-that someone already fine and it's

464
00:20:52,659 --> 00:20:57,159
give me a couple of I think it was a

465
00:20:55,149 --> 00:20:58,570
thousand different results so like I

466
00:20:57,159 --> 00:21:04,149
mean you have to go through a thousand

467
00:20:58,570 --> 00:21:06,730
different different points in curl with

468
00:21:04,149 --> 00:21:09,340
like that sort of like bad class person

469
00:21:06,730 --> 00:21:10,929
there and the funny thing is that Thomas

470
00:21:09,340 --> 00:21:12,340
actually look at my tweet and start

471
00:21:10,929 --> 00:21:13,570
going through there's those thousands

472
00:21:12,340 --> 00:21:16,449
because it seems like that table is

473
00:21:13,570 --> 00:21:21,460
never sleep and so he actually find

474
00:21:16,450 --> 00:21:25,690
invulnerability so this is this is the

475
00:21:21,460 --> 00:21:27,610
sort of like the the by class and it's

476
00:21:25,690 --> 00:21:30,159
not really myself is not really a bad

477
00:21:27,610 --> 00:21:33,370
class so basically is a condition that

478
00:21:30,159 --> 00:21:36,760
has an array and the other way is in a

479
00:21:33,370 --> 00:21:39,639
sign a bio on that on that on that loop

480
00:21:36,760 --> 00:21:42,279
it's as simple as that the way you do it

481
00:21:39,639 --> 00:21:43,870
in in QL is that if you have to think

482
00:21:42,279 --> 00:21:46,000
about how we'll find out that would be

483
00:21:43,870 --> 00:21:48,370
like I'm gonna find a loop that has an

484
00:21:46,000 --> 00:21:50,049
array with an index and something gets

485
00:21:48,370 --> 00:21:51,580
assigned to you the way you do it in

486
00:21:50,049 --> 00:21:54,639
curious a little bit difference you're

487
00:21:51,580 --> 00:21:58,269
actually looking a bearable variable

488
00:21:54,639 --> 00:22:02,039
that has an index and that Bible has

489
00:21:58,269 --> 00:22:04,750
been is of type array and that is been

490
00:22:02,039 --> 00:22:07,389
it's been assigned something's being

491
00:22:04,750 --> 00:22:09,100
assigned to that Bible and the same that

492
00:22:07,389 --> 00:22:10,209
that peril is part of the loop you're

493
00:22:09,100 --> 00:22:12,309
now looking for the loop you're actually

494
00:22:10,210 --> 00:22:14,049
forgiving the Bible inside the loop so

495
00:22:12,309 --> 00:22:16,090
this is sort of like the way of thinking

496
00:22:14,049 --> 00:22:17,150
when you're writing cure or at least for

497
00:22:16,090 --> 00:22:20,840
me

498
00:22:17,150 --> 00:22:24,320
and so the bug end up being a bad on a

499
00:22:20,840 --> 00:22:25,490
monitor so it's it's not really good but

500
00:22:24,320 --> 00:22:27,919
like if you're going to a conference

501
00:22:25,490 --> 00:22:31,610
that you plug your computer the monitor

502
00:22:27,920 --> 00:22:34,580
and somehow it's an evil monitor you and

503
00:22:31,610 --> 00:22:36,469
that with your computer own so maybe

504
00:22:34,580 --> 00:22:38,120
don't give talks in Russia or something

505
00:22:36,470 --> 00:22:39,559
I don't know

506
00:22:38,120 --> 00:22:43,939
well nobody was there it was hilarious

507
00:22:39,559 --> 00:22:47,030
how the whole thing works and this is

508
00:22:43,940 --> 00:22:49,970
sort of like the timeline like I'm a

509
00:22:47,030 --> 00:22:53,330
lightweight terrifying and then like a

510
00:22:49,970 --> 00:22:55,429
bug was reported and was patch it so

511
00:22:53,330 --> 00:22:58,820
it's sort of like hilarious is the first

512
00:22:55,429 --> 00:23:00,860
example the other big example and this

513
00:22:58,820 --> 00:23:02,990
is really good because gonna help us

514
00:23:00,860 --> 00:23:05,419
sort of like work into the mindset when

515
00:23:02,990 --> 00:23:09,110
you are trying to find or working with

516
00:23:05,420 --> 00:23:11,330
ql is this you boot first of all and

517
00:23:09,110 --> 00:23:12,889
forgot to say originally I was giving I

518
00:23:11,330 --> 00:23:16,309
was planning to keep this dog with fur

519
00:23:12,890 --> 00:23:18,920
mean from in Serna but he has other

520
00:23:16,309 --> 00:23:20,480
commitments he couldn't make it so a new

521
00:23:18,920 --> 00:23:24,650
boot is part of the reason that he have

522
00:23:20,480 --> 00:23:28,130
done so I know if you heard about a wood

523
00:23:24,650 --> 00:23:30,020
it's a boot loader that is being used by

524
00:23:28,130 --> 00:23:33,290
a lot of different devices surprisingly

525
00:23:30,020 --> 00:23:36,050
Kindle use it Chrome OS on arm uses

526
00:23:33,290 --> 00:23:43,820
there's a lot a lot of IOT devices that

527
00:23:36,050 --> 00:23:45,800
also use Ubud and and obviously anybody

528
00:23:43,820 --> 00:23:48,500
before the signature check is a

529
00:23:45,800 --> 00:23:50,090
potential Sheldrake so like you can

530
00:23:48,500 --> 00:23:52,880
potentially attack it through a file

531
00:23:50,090 --> 00:23:55,070
system on obviously if there any network

532
00:23:52,880 --> 00:23:58,760
issue it would be very interesting to

533
00:23:55,070 --> 00:24:01,580
trigger and so let's get into Ubud which

534
00:23:58,760 --> 00:24:06,770
is going to be terrible just telling you

535
00:24:01,580 --> 00:24:09,169
so this is sort of like how you were

536
00:24:06,770 --> 00:24:11,480
with ql you first start with a seed and

537
00:24:09,170 --> 00:24:13,550
that's where the cherries thing sort of

538
00:24:11,480 --> 00:24:16,790
like start making sense you start with a

539
00:24:13,550 --> 00:24:18,950
seed the seed is sort of like a pattern

540
00:24:16,790 --> 00:24:21,620
you're looking for and then you write a

541
00:24:18,950 --> 00:24:22,940
query that define that pattern and then

542
00:24:21,620 --> 00:24:25,129
you do triose you go through the

543
00:24:22,940 --> 00:24:28,340
different find that that query get you

544
00:24:25,130 --> 00:24:30,650
and then you realize that you know it

545
00:24:28,340 --> 00:24:32,990
might need some work so you refine

546
00:24:30,650 --> 00:24:34,490
the cure query and Star Game and star

547
00:24:32,990 --> 00:24:36,650
again and there are different types of

548
00:24:34,490 --> 00:24:40,610
queries the same before there's a query

549
00:24:36,650 --> 00:24:43,100
that will find potentially places where

550
00:24:40,610 --> 00:24:46,490
a bug will be and that's a sort of like

551
00:24:43,100 --> 00:24:48,860
quarries that I'm able to or used to do

552
00:24:46,490 --> 00:24:51,290
and then there are queries that are very

553
00:24:48,860 --> 00:24:53,540
precise and have like zero false

554
00:24:51,290 --> 00:24:58,010
positives and this is the sort of query

555
00:24:53,540 --> 00:25:00,889
that we put on LG TM or NEC ICD in order

556
00:24:58,010 --> 00:25:04,550
to find a bag that is as precise as

557
00:25:00,890 --> 00:25:05,960
possible but to me I don't want to find

558
00:25:04,550 --> 00:25:07,399
a bag that is I mean obviously by

559
00:25:05,960 --> 00:25:07,790
finding a bag that is precise as

560
00:25:07,400 --> 00:25:10,730
possible

561
00:25:07,790 --> 00:25:13,159
and find about right away it's amazing

562
00:25:10,730 --> 00:25:14,930
but in general I'm trying to explore

563
00:25:13,160 --> 00:25:17,030
different things so something that is

564
00:25:14,930 --> 00:25:21,440
generic but now it goes as crazy as

565
00:25:17,030 --> 00:25:23,090
finding a thousand different places it's

566
00:25:21,440 --> 00:25:25,070
it for me is really good because I'm

567
00:25:23,090 --> 00:25:27,050
learning from what I'm finding and I'm

568
00:25:25,070 --> 00:25:29,899
refining my query to get better and

569
00:25:27,050 --> 00:25:31,730
better every time and in you there's

570
00:25:29,900 --> 00:25:34,310
like different levels of query there's

571
00:25:31,730 --> 00:25:36,650
queries that are very generic and find a

572
00:25:34,310 --> 00:25:39,440
lot of different things there there are

573
00:25:36,650 --> 00:25:41,720
queries that are specific to a code base

574
00:25:39,440 --> 00:25:46,190
that finds vulnerabilities and there are

575
00:25:41,720 --> 00:25:48,440
the best queries which are very precise

576
00:25:46,190 --> 00:25:50,090
but also they're not tied to specific

577
00:25:48,440 --> 00:25:53,360
code base and we will learn a little bit

578
00:25:50,090 --> 00:25:55,879
more about that so this is our scene so

579
00:25:53,360 --> 00:26:00,320
we were looking at code and and when we

580
00:25:55,880 --> 00:26:04,370
realize is that there is a bug actually

581
00:26:00,320 --> 00:26:07,520
two bugs in the code of NFS on you booth

582
00:26:04,370 --> 00:26:11,090
when you try to boot over NFS and I

583
00:26:07,520 --> 00:26:14,750
don't know yeah here we go so the bug is

584
00:26:11,090 --> 00:26:18,080
basically it's taking something directly

585
00:26:14,750 --> 00:26:21,890
the which is a land directly from the

586
00:26:18,080 --> 00:26:26,480
network and then in those two different

587
00:26:21,890 --> 00:26:28,790
places it's using the the Erland the

588
00:26:26,480 --> 00:26:30,740
Bible that was signing directly from

589
00:26:28,790 --> 00:26:34,550
information that was obtained through a

590
00:26:30,740 --> 00:26:37,010
packet into the size of a mem copy so

591
00:26:34,550 --> 00:26:39,830
that means that we control the size so

592
00:26:37,010 --> 00:26:43,010
and we also control the source so it's

593
00:26:39,830 --> 00:26:48,289
sort of like a very good bug

594
00:26:43,010 --> 00:26:49,730
you want you overflow something so we

595
00:26:48,289 --> 00:26:52,279
have that bag right that's the seed that

596
00:26:49,730 --> 00:26:56,980
we had so the most generic thing that

597
00:26:52,279 --> 00:26:58,940
you can ride is these query over here

598
00:26:56,980 --> 00:27:02,779
remember that I was saying it's sort of

599
00:26:58,940 --> 00:27:05,450
like SQL so you have like from which is

600
00:27:02,779 --> 00:27:09,200
how you define the different variables

601
00:27:05,450 --> 00:27:10,940
that you're going to use on on the query

602
00:27:09,200 --> 00:27:13,070
and their words when you start like

603
00:27:10,940 --> 00:27:14,899
filtering what you're looking for

604
00:27:13,070 --> 00:27:20,418
and then finally select will tell you

605
00:27:14,899 --> 00:27:22,340
what you want to see once you find that

606
00:27:20,419 --> 00:27:25,190
where you are targeting so in this case

607
00:27:22,340 --> 00:27:28,129
I'm saying I want to find a function

608
00:27:25,190 --> 00:27:30,590
call which name is call and I'm gonna I

609
00:27:28,130 --> 00:27:32,750
want to that function call the target of

610
00:27:30,590 --> 00:27:34,668
that function call is going to be of

611
00:27:32,750 --> 00:27:36,440
name ma'am coffee and you're obviously

612
00:27:34,669 --> 00:27:38,059
gonna be like I can do that with grab of

613
00:27:36,440 --> 00:27:41,029
course you can do whatever crap we're

614
00:27:38,059 --> 00:27:43,940
talking about a very generic query it's

615
00:27:41,029 --> 00:27:48,950
gonna be complicated as we go so that's

616
00:27:43,940 --> 00:27:51,679
the most basic query you have bad as let

617
00:27:48,950 --> 00:27:55,970
me go back to code so as you can see

618
00:27:51,679 --> 00:27:57,529
here what I was looking for is basically

619
00:27:55,970 --> 00:27:59,929
the man coffee there was like two points

620
00:27:57,529 --> 00:28:01,639
for for this vulnerability one is there

621
00:27:59,929 --> 00:28:04,519
when the actual volatility happen which

622
00:28:01,639 --> 00:28:06,559
is a mem copy that I have the lane and

623
00:28:04,519 --> 00:28:09,409
the control and the other part is where

624
00:28:06,559 --> 00:28:13,668
they actually Earlham viable is being

625
00:28:09,409 --> 00:28:15,980
assigned so what I was looking on that

626
00:28:13,669 --> 00:28:17,899
my first query is basically when the

627
00:28:15,980 --> 00:28:19,010
moon limit is being trade the problem is

628
00:28:17,899 --> 00:28:22,309
that if I'm looking for all the men

629
00:28:19,010 --> 00:28:24,889
copies on you bud and I find a lot a lot

630
00:28:22,309 --> 00:28:28,418
of men copies the other interesting

631
00:28:24,889 --> 00:28:32,269
thing is like let's find when that feel

632
00:28:28,419 --> 00:28:36,590
which is reply is being used so now I

633
00:28:32,269 --> 00:28:39,049
had when every time that if that fails

634
00:28:36,590 --> 00:28:40,760
being used when I find the exact place I

635
00:28:39,049 --> 00:28:43,070
mean it's not perfect but I mean now I

636
00:28:40,760 --> 00:28:45,169
know all the different place where I

637
00:28:43,070 --> 00:28:49,399
could potentially have immunity or where

638
00:28:45,169 --> 00:28:53,360
I have control of the network or sorry

639
00:28:49,399 --> 00:28:55,039
all of the content of the network this

640
00:28:53,360 --> 00:28:56,790
is a very interesting phrase given a

641
00:28:55,039 --> 00:28:58,530
problem specific set of sources

642
00:28:56,790 --> 00:29:01,440
is there a part in that awful graph from

643
00:28:58,530 --> 00:29:03,570
this source and from some source to some

644
00:29:01,440 --> 00:29:04,260
things this basically defined dataflow

645
00:29:03,570 --> 00:29:07,050
analysis

646
00:29:04,260 --> 00:29:10,260
the good thing about QL is yes data flow

647
00:29:07,050 --> 00:29:13,230
analysis embarr into it so and if you

648
00:29:10,260 --> 00:29:16,260
think about it a lot of different

649
00:29:13,230 --> 00:29:18,750
vulnerabilities can be defined as a data

650
00:29:16,260 --> 00:29:20,970
flow problem there is a source where the

651
00:29:18,750 --> 00:29:24,450
input is coming from and there is a sink

652
00:29:20,970 --> 00:29:26,010
where they actually functions being

653
00:29:24,450 --> 00:29:27,540
triggered that triggers the actual

654
00:29:26,010 --> 00:29:29,879
vulnerability and there are many like

655
00:29:27,540 --> 00:29:31,590
different bike lights that we can

656
00:29:29,880 --> 00:29:34,290
obviously know and all of them can be

657
00:29:31,590 --> 00:29:36,480
defined that way but it's a good way to

658
00:29:34,290 --> 00:29:39,450
think about it and a big percentage of

659
00:29:36,480 --> 00:29:42,120
your loyalty's we have this sort of like

660
00:29:39,450 --> 00:29:44,130
idea behind it for example if you talk

661
00:29:42,120 --> 00:29:46,800
about like SQL injection or across the

662
00:29:44,130 --> 00:29:50,190
scripting there's a point where there's

663
00:29:46,800 --> 00:29:54,540
a user input getting into the program

664
00:29:50,190 --> 00:29:56,490
and then the the the sink will be either

665
00:29:54,540 --> 00:30:00,090
the the function will be used to show

666
00:29:56,490 --> 00:30:05,910
that data into the HTML or when it's

667
00:30:00,090 --> 00:30:10,610
being query into the database so let's

668
00:30:05,910 --> 00:30:15,690
start with the first the first real real

669
00:30:10,610 --> 00:30:18,139
query as you can see here and and don't

670
00:30:15,690 --> 00:30:20,220
get a lot with that it's not our heart

671
00:30:18,140 --> 00:30:23,970
what we're doing is that we are

672
00:30:20,220 --> 00:30:25,500
redefining the data flows class you have

673
00:30:23,970 --> 00:30:28,290
to do that every time you want to create

674
00:30:25,500 --> 00:30:30,570
your own data flow and what we're going

675
00:30:28,290 --> 00:30:33,090
to see here is that we have to override

676
00:30:30,570 --> 00:30:36,060
two different methods inside our data

677
00:30:33,090 --> 00:30:39,270
flow one is a source the other wire is

678
00:30:36,060 --> 00:30:41,820
sink the each source obviously going to

679
00:30:39,270 --> 00:30:44,010
tell us which is the source of the of

680
00:30:41,820 --> 00:30:46,290
the potentially bad glass that we want

681
00:30:44,010 --> 00:30:51,030
to define in this case what we're doing

682
00:30:46,290 --> 00:30:55,740
is that we are trying to find I feel

683
00:30:51,030 --> 00:30:57,950
that being access and so source is

684
00:30:55,740 --> 00:31:00,660
obviously the definition of my source

685
00:30:57,950 --> 00:31:03,840
and so I'm going to assign it to the

686
00:31:00,660 --> 00:31:07,080
fill access and I'm going to say is I

687
00:31:03,840 --> 00:31:09,179
want to find out an axis which target is

688
00:31:07,080 --> 00:31:10,610
this field and the name of these fields

689
00:31:09,180 --> 00:31:13,440
going to be reply

690
00:31:10,610 --> 00:31:14,490
might be a little bit confusing but

691
00:31:13,440 --> 00:31:16,970
that's sort of the idea this is the

692
00:31:14,490 --> 00:31:19,890
source so basically what we are doing is

693
00:31:16,970 --> 00:31:23,250
we are looking for a feel that's getting

694
00:31:19,890 --> 00:31:26,760
access and which fill name is reply now

695
00:31:23,250 --> 00:31:28,440
on the other side on the sink what we're

696
00:31:26,760 --> 00:31:33,840
going to do is going to look for a mem

697
00:31:28,440 --> 00:31:36,300
copy which which think is going to be an

698
00:31:33,840 --> 00:31:39,330
argument which argument the third

699
00:31:36,300 --> 00:31:42,810
argument in this case 0 1 2 2 is the

700
00:31:39,330 --> 00:31:45,840
basically the land of the mam coffee so

701
00:31:42,810 --> 00:31:48,090
this is what I find and this is the part

702
00:31:45,840 --> 00:31:50,490
we'll actually do in there the query and

703
00:31:48,090 --> 00:31:52,409
we're saying that the the query has

704
00:31:50,490 --> 00:31:56,760
flowed between the source and the sink

705
00:31:52,410 --> 00:31:58,230
that we just defined and we find first

706
00:31:56,760 --> 00:31:59,850
of all we find the tube remains that we

707
00:31:58,230 --> 00:32:01,320
already seen that's the first thing we

708
00:31:59,850 --> 00:32:02,969
view because obviously you have to find

709
00:32:01,320 --> 00:32:05,520
the same movement Z that you were

710
00:32:02,970 --> 00:32:07,110
defining your back glass with and then

711
00:32:05,520 --> 00:32:09,680
we start finding other different things

712
00:32:07,110 --> 00:32:13,229
this is quite interesting as you can see

713
00:32:09,680 --> 00:32:17,430
there is the reply feel being a set

714
00:32:13,230 --> 00:32:19,260
excessive to the 5h free length and then

715
00:32:17,430 --> 00:32:21,630
it's being used in mem copy there's a

716
00:32:19,260 --> 00:32:25,020
compression being there the the the

717
00:32:21,630 --> 00:32:27,030
problem here is that it's sign it is a

718
00:32:25,020 --> 00:32:28,889
sign an integer so you actually can

719
00:32:27,030 --> 00:32:30,420
bypass it easily by doing a negative

720
00:32:28,890 --> 00:32:32,310
number now how we exploited it is a

721
00:32:30,420 --> 00:32:34,770
little bit more complex but this is one

722
00:32:32,310 --> 00:32:37,139
one more ability to do at least and as

723
00:32:34,770 --> 00:32:38,460
you can see on the left in there there's

724
00:32:37,140 --> 00:32:39,690
a counter of the different bloom which

725
00:32:38,460 --> 00:32:45,060
is that we were finding as we were

726
00:32:39,690 --> 00:32:54,150
working through this project the other

727
00:32:45,060 --> 00:32:56,970
thing they were looking for this is a

728
00:32:54,150 --> 00:33:00,540
very interesting example because as I

729
00:32:56,970 --> 00:33:02,610
was showing before we were always

730
00:33:00,540 --> 00:33:06,090
working on the same function right

731
00:33:02,610 --> 00:33:10,439
but with QL you can actually do data

732
00:33:06,090 --> 00:33:13,050
flow analysis through inter process so

733
00:33:10,440 --> 00:33:15,510
what happened here is that the actual

734
00:33:13,050 --> 00:33:20,659
AirLand is happening on this function

735
00:33:15,510 --> 00:33:24,260
NFS read reply but the actually mem copy

736
00:33:20,660 --> 00:33:26,970
it's being trigger on store

737
00:33:24,260 --> 00:33:28,830
store block is the actual mmm copy that

738
00:33:26,970 --> 00:33:30,120
has the Earl and so it's quite

739
00:33:28,830 --> 00:33:31,889
interesting because shout out now we are

740
00:33:30,120 --> 00:33:34,379
not doing just data flow analysis on one

741
00:33:31,890 --> 00:33:36,150
function we're doing it globally through

742
00:33:34,380 --> 00:33:37,440
like different functions and and when

743
00:33:36,150 --> 00:33:39,560
you start doing that it's sort of like

744
00:33:37,440 --> 00:33:41,850
magic the kind of things you can find

745
00:33:39,560 --> 00:33:47,820
here we go I have arrows that will be

746
00:33:41,850 --> 00:33:50,040
easier so let's expand the query a

747
00:33:47,820 --> 00:33:52,080
little bit more and even make it at the

748
00:33:50,040 --> 00:33:53,820
point where it's more generic that you

749
00:33:52,080 --> 00:33:56,040
can use it in a different code base so

750
00:33:53,820 --> 00:33:58,379
what we did and you will notice then

751
00:33:56,040 --> 00:34:04,200
only different moment is that we found

752
00:33:58,380 --> 00:34:08,220
there is a power and network to host was

753
00:34:04,200 --> 00:34:10,320
being used on most of the basically on

754
00:34:08,219 --> 00:34:12,060
all the box that we find so far so this

755
00:34:10,320 --> 00:34:13,679
is the part where you are learning about

756
00:34:12,060 --> 00:34:15,360
defines you get in and then you're

757
00:34:13,679 --> 00:34:18,060
really finding your queries you can make

758
00:34:15,360 --> 00:34:21,360
it even more precise and so what we're

759
00:34:18,060 --> 00:34:24,810
going to do is instead of going for

760
00:34:21,360 --> 00:34:30,090
their reply feel we're going to look at

761
00:34:24,810 --> 00:34:34,350
every time that I called you enter and

762
00:34:30,090 --> 00:34:36,390
enter ass until ll is being used as at

763
00:34:34,350 --> 00:34:38,399
the source and the thing will remain the

764
00:34:36,389 --> 00:34:42,480
same this thing is going to remain being

765
00:34:38,399 --> 00:34:44,940
the Dammam copy at the Len of the man

766
00:34:42,480 --> 00:34:47,149
copy so the interesting thing about that

767
00:34:44,940 --> 00:34:52,530
is that now we're not making the query

768
00:34:47,149 --> 00:34:54,779
depending on the actual code base bara

769
00:34:52,530 --> 00:34:58,230
is going to be generic and we can use

770
00:34:54,780 --> 00:34:59,700
that query for other code base because

771
00:34:58,230 --> 00:35:01,920
basically doing like every time that

772
00:34:59,700 --> 00:35:03,779
some function n toast it's actually not

773
00:35:01,920 --> 00:35:06,150
a function in Linux is a macro which is

774
00:35:03,780 --> 00:35:07,950
why instead of having what we used to

775
00:35:06,150 --> 00:35:13,740
have the function call thing we're

776
00:35:07,950 --> 00:35:16,230
actually having the macro invocation so

777
00:35:13,740 --> 00:35:17,580
and then like we can even explain it a

778
00:35:16,230 --> 00:35:19,350
bit more like instead of losing form M

779
00:35:17,580 --> 00:35:22,440
copies we can start looking and other

780
00:35:19,350 --> 00:35:27,150
functions which has a size and so and

781
00:35:22,440 --> 00:35:29,070
use it to do that and then we start

782
00:35:27,150 --> 00:35:32,280
final monologist this is this moment is

783
00:35:29,070 --> 00:35:33,870
not really related well yes it's not

784
00:35:32,280 --> 00:35:35,820
really related with the query that we

785
00:35:33,870 --> 00:35:37,120
did but it was quite interesting because

786
00:35:35,820 --> 00:35:41,610
if you make

787
00:35:37,120 --> 00:35:44,759
IP UDP LAN less than UDP Ric are sighs

788
00:35:41,610 --> 00:35:48,670
then you will be overflowing and fine to

789
00:35:44,760 --> 00:35:52,210
to mold of those vulnerabilities and

790
00:35:48,670 --> 00:35:53,890
then these wannabe over here it's quite

791
00:35:52,210 --> 00:35:55,630
nice because it's like playing Stack

792
00:35:53,890 --> 00:35:57,850
Overflow and we find these women T in

793
00:35:55,630 --> 00:35:59,740
four different places and as you can see

794
00:35:57,850 --> 00:36:01,360
very straightforward

795
00:35:59,740 --> 00:36:04,390
you control the packet you control the

796
00:36:01,360 --> 00:36:06,460
LAN and you and the overflow happens and

797
00:36:04,390 --> 00:36:09,730
it's funny because these you boot is

798
00:36:06,460 --> 00:36:13,360
being used quite a lot then this is the

799
00:36:09,730 --> 00:36:15,780
other one which is a read all OB and in

800
00:36:13,360 --> 00:36:20,020
this case basically if you size off is

801
00:36:15,780 --> 00:36:22,120
if you make packet less than size of the

802
00:36:20,020 --> 00:36:24,100
size of reply then what's happening is

803
00:36:22,120 --> 00:36:26,080
going to be actually doing an

804
00:36:24,100 --> 00:36:28,509
information leak and writing on that

805
00:36:26,080 --> 00:36:32,770
information that is not supposed to be

806
00:36:28,510 --> 00:36:36,790
writing so in the end we end up with

807
00:36:32,770 --> 00:36:39,220
around 13 different born abilities and

808
00:36:36,790 --> 00:36:41,170
it's to be honest is quite interesting

809
00:36:39,220 --> 00:36:42,819
because we start with a seed and we

810
00:36:41,170 --> 00:36:44,680
start creating a query and now that

811
00:36:42,820 --> 00:36:46,450
query we're using the are courier for a

812
00:36:44,680 --> 00:36:50,230
lot of different projects because you

813
00:36:46,450 --> 00:36:52,629
know he's very generic and let me show

814
00:36:50,230 --> 00:36:53,980
you a little bit of another project that

815
00:36:52,630 --> 00:36:57,670
I have been working and it was on the

816
00:36:53,980 --> 00:37:00,580
Linux kernel in this case what I was

817
00:36:57,670 --> 00:37:03,420
doing is again as every morning I look

818
00:37:00,580 --> 00:37:06,880
at all the different CVS and I find out

819
00:37:03,420 --> 00:37:08,580
interesting CBE on the Linux kernel it's

820
00:37:06,880 --> 00:37:11,950
actually two different vulnerabilities

821
00:37:08,580 --> 00:37:15,700
and as you can see this function C of G

822
00:37:11,950 --> 00:37:18,180
80 2011 fine ie is a function that

823
00:37:15,700 --> 00:37:22,689
basically obtained the information

824
00:37:18,180 --> 00:37:26,080
element of wireless packet and it caught

825
00:37:22,690 --> 00:37:28,810
it returns exactly where that element is

826
00:37:26,080 --> 00:37:32,259
on the on the whole beacon or the whole

827
00:37:28,810 --> 00:37:36,580
frame of the what we are looking for in

828
00:37:32,260 --> 00:37:39,460
Wi-Fi and then it used the land directly

829
00:37:36,580 --> 00:37:42,400
into a mem copy the other problem is

830
00:37:39,460 --> 00:37:44,470
that darlin is a wine by tall boy one by

831
00:37:42,400 --> 00:37:47,890
long so you have to make you have to be

832
00:37:44,470 --> 00:37:50,259
very sure that the destination is less

833
00:37:47,890 --> 00:37:53,259
than 255

834
00:37:50,260 --> 00:37:55,870
fine so as you can see here that CBE

835
00:37:53,260 --> 00:37:58,060
actually represents I think there was an

836
00:37:55,870 --> 00:37:59,589
extra one but represent at least three

837
00:37:58,060 --> 00:38:00,759
different Bowl amenities that has exact

838
00:37:59,590 --> 00:38:03,190
same Parliament when I look at that I

839
00:38:00,760 --> 00:38:05,200
was like I have to make a query because

840
00:38:03,190 --> 00:38:08,410
if there's two cases it has to be more

841
00:38:05,200 --> 00:38:10,930
than two cases so just to give you an

842
00:38:08,410 --> 00:38:14,770
idea of what is an information element

843
00:38:10,930 --> 00:38:20,919
so there is a sort of like fixed part

844
00:38:14,770 --> 00:38:25,380
inside an inherent 2.11

845
00:38:20,920 --> 00:38:28,110
frame for example on a beacon that's

846
00:38:25,380 --> 00:38:31,090
sort of like a fixed par which is like

847
00:38:28,110 --> 00:38:33,420
frame control the duration the bssid

848
00:38:31,090 --> 00:38:36,940
etcetera and there there is sort of like

849
00:38:33,420 --> 00:38:39,250
TLB elements which call information

850
00:38:36,940 --> 00:38:42,520
elements with the one that we saw that

851
00:38:39,250 --> 00:38:46,000
has one by long e ID which basically

852
00:38:42,520 --> 00:38:48,040
defined the type of information element

853
00:38:46,000 --> 00:38:51,130
that you're looking for then there's one

854
00:38:48,040 --> 00:38:55,270
by long length I know after that is the

855
00:38:51,130 --> 00:38:58,150
actual data so I thought I am gonna

856
00:38:55,270 --> 00:39:00,550
write a query that in a way if you look

857
00:38:58,150 --> 00:39:01,990
at it super similar to the one that we

858
00:39:00,550 --> 00:39:03,250
look on the u-boot but there was no

859
00:39:01,990 --> 00:39:09,189
relationship with this validity on the

860
00:39:03,250 --> 00:39:13,930
other so what I did is like find me find

861
00:39:09,190 --> 00:39:19,780
me a source that the source is actually

862
00:39:13,930 --> 00:39:24,580
the result from a call to s fg8 200 fine

863
00:39:19,780 --> 00:39:27,070
I a it's hard to talk about those

864
00:39:24,580 --> 00:39:28,360
functions names in public anyways

865
00:39:27,070 --> 00:39:31,330
finally dad

866
00:39:28,360 --> 00:39:34,270
and obviously the sing of the data flow

867
00:39:31,330 --> 00:39:35,920
it's just the normal mam copy we're

868
00:39:34,270 --> 00:39:37,960
looking for this second ah the third

869
00:39:35,920 --> 00:39:40,420
argument of man copy the length argument

870
00:39:37,960 --> 00:39:43,300
of man copy so I look at that and I

871
00:39:40,420 --> 00:39:45,430
couldn't find anything but I thought why

872
00:39:43,300 --> 00:39:47,260
don't look to a different similar

873
00:39:45,430 --> 00:39:50,799
functions that I know the colonel has

874
00:39:47,260 --> 00:39:54,240
that obtained and works exactly the same

875
00:39:50,800 --> 00:39:56,290
way there's so many of those get ie

876
00:39:54,240 --> 00:39:59,799
functions in the kernel I would say

877
00:39:56,290 --> 00:40:03,279
around like 8 to 10 so I saw looking at

878
00:39:59,800 --> 00:40:04,239
them and I wrote this exact same query

879
00:40:03,280 --> 00:40:05,739
the only difference

880
00:40:04,239 --> 00:40:08,979
that the name changed and I'm gone and

881
00:40:05,739 --> 00:40:11,649
I'm not gonna pronounce that function

882
00:40:08,979 --> 00:40:14,348
name because it's way too complex to

883
00:40:11,649 --> 00:40:17,618
learn and so the same thing you you get

884
00:40:14,349 --> 00:40:20,319
the result out of that the call to that

885
00:40:17,619 --> 00:40:22,269
function and then as a source and then

886
00:40:20,319 --> 00:40:26,909
it's a sing you have man copies a third

887
00:40:22,269 --> 00:40:30,249
argument and so I look at that and find

888
00:40:26,909 --> 00:40:33,699
this example here but you can see is

889
00:40:30,249 --> 00:40:36,218
they're trying to obtain the SSID of for

890
00:40:33,699 --> 00:40:44,369
example I become packet and this is on

891
00:40:36,219 --> 00:40:44,369
the CW went to 0 0 wireless driver and

892
00:40:44,759 --> 00:40:49,599
what is saying is that is obtaining the

893
00:40:47,739 --> 00:40:52,899
the chunk of memory from that specific

894
00:40:49,599 --> 00:40:55,659
ie and then it's passing directly to man

895
00:40:52,899 --> 00:40:58,179
copy again like I'm the the sink here

896
00:40:55,659 --> 00:41:01,539
it's extremely simple I'm just looking

897
00:40:58,179 --> 00:41:03,129
for as a sink but I can do way more

898
00:41:01,539 --> 00:41:05,619
complex things are looking for the

899
00:41:03,129 --> 00:41:07,269
lengths of a mam copy even I can make it

900
00:41:05,619 --> 00:41:09,789
like more generic to look for like MEMS

901
00:41:07,269 --> 00:41:11,649
that man move but even I can make it to

902
00:41:09,789 --> 00:41:13,989
other things I can actually define the

903
00:41:11,649 --> 00:41:17,589
constant of a loop on the back class and

904
00:41:13,989 --> 00:41:20,679
say like this the size being used on a

905
00:41:17,589 --> 00:41:22,359
loop etc etc so again this is very

906
00:41:20,679 --> 00:41:24,279
simple and is and the good thing about

907
00:41:22,359 --> 00:41:26,019
this very simple it's really good to

908
00:41:24,279 --> 00:41:29,139
show it to you if you have no experience

909
00:41:26,019 --> 00:41:33,448
week you are this is one of them there's

910
00:41:29,139 --> 00:41:37,959
another one here this is on see if 80

911
00:41:33,449 --> 00:41:40,479
2011 WX compact form as mode the exact

912
00:41:37,959 --> 00:41:42,819
same scenario exact same there are even

913
00:41:40,479 --> 00:41:44,078
actually looking for SSID as the other

914
00:41:42,819 --> 00:41:47,079
one they come in like many different

915
00:41:44,079 --> 00:41:48,819
things but those cases were the same and

916
00:41:47,079 --> 00:41:52,329
as you can see here this is even more

917
00:41:48,819 --> 00:41:57,099
clear its obtained a pointer to where

918
00:41:52,329 --> 00:41:59,259
the II's and it's using the second byte

919
00:41:57,099 --> 00:42:04,839
which is the length as we learned before

920
00:41:59,259 --> 00:42:07,989
as the as the third argument of a mem

921
00:42:04,839 --> 00:42:09,578
copy so these are works in terms of the

922
00:42:07,989 --> 00:42:12,039
timeline it's funny because as I say

923
00:42:09,579 --> 00:42:13,629
before every time every morning I wake

924
00:42:12,039 --> 00:42:15,930
up and I look up CBS and that's what

925
00:42:13,629 --> 00:42:21,240
happened like the person

926
00:42:15,930 --> 00:42:23,520
gyoon reported or at least it was public

927
00:42:21,240 --> 00:42:26,100
on the August 28th on 29 I was writing

928
00:42:23,520 --> 00:42:29,340
the query on the 30 I reported to box

929
00:42:26,100 --> 00:42:33,240
and takes a little bit more for Linux to

930
00:42:29,340 --> 00:42:35,730
actually fix it but as you can see it

931
00:42:33,240 --> 00:42:38,339
was fine one day I wrote the query I

932
00:42:35,730 --> 00:42:40,950
reported the next day and and and and

933
00:42:38,340 --> 00:42:43,380
you know it was that fast and and it was

934
00:42:40,950 --> 00:42:45,750
a couple of blocks and obviously this

935
00:42:43,380 --> 00:42:48,270
mostly actually reported more than those

936
00:42:45,750 --> 00:42:50,250
and some of those other box I report

937
00:42:48,270 --> 00:42:54,060
they were actually being handled before

938
00:42:50,250 --> 00:42:56,700
that they're like the is this there was

939
00:42:54,060 --> 00:42:59,990
a lot of like is this ID related sort of

940
00:42:56,700 --> 00:43:03,060
like similar back last but some of them

941
00:42:59,990 --> 00:43:05,069
this ID length was controlled before

942
00:43:03,060 --> 00:43:06,990
that and you cannot see it when we

943
00:43:05,070 --> 00:43:08,430
actually find the query so these are

944
00:43:06,990 --> 00:43:12,029
actually the two that were actually able

945
00:43:08,430 --> 00:43:14,549
immolating so there's a lot of different

946
00:43:12,030 --> 00:43:17,220
words left specifically we do ie

947
00:43:14,550 --> 00:43:19,350
surprisingly does a really common bag

948
00:43:17,220 --> 00:43:22,319
and they have been similar bugs as this

949
00:43:19,350 --> 00:43:23,730
one in the past so it's not it's not the

950
00:43:22,320 --> 00:43:28,890
first and probably is not gonna be the

951
00:43:23,730 --> 00:43:31,170
last but an interesting thing is we can

952
00:43:28,890 --> 00:43:33,480
use QL and everyone can use Q of an open

953
00:43:31,170 --> 00:43:36,480
source code so we don't repeat ourselves

954
00:43:33,480 --> 00:43:39,300
there is a these are phrase from Marx

955
00:43:36,480 --> 00:43:45,720
that say something like history repeats

956
00:43:39,300 --> 00:43:48,090
itself twice first as a as a tragedy and

957
00:43:45,720 --> 00:43:50,720
second as a comedy was a force sort of

958
00:43:48,090 --> 00:43:54,960
like the same thing can be said about

959
00:43:50,720 --> 00:43:57,509
box like we don't actually learn from

960
00:43:54,960 --> 00:43:59,040
the box that we found then like it will

961
00:43:57,510 --> 00:44:00,990
repeat the cells but these times gonna

962
00:43:59,040 --> 00:44:04,470
be comedy because like you know people

963
00:44:00,990 --> 00:44:07,589
will laugh at us for not finding the bag

964
00:44:04,470 --> 00:44:09,299
type or the pattern that we already the

965
00:44:07,590 --> 00:44:12,990
bad pattern that we already did

966
00:44:09,300 --> 00:44:15,750
and so finally I've recently like last

967
00:44:12,990 --> 00:44:18,089
minute find our last bag which is in a

968
00:44:15,750 --> 00:44:21,440
way similar to that but it's not on

969
00:44:18,090 --> 00:44:23,820
really on ie it's on Wi-Fi direct so

970
00:44:21,440 --> 00:44:26,730
very briefly because I have only one

971
00:44:23,820 --> 00:44:29,160
minute so you know about the IE and

972
00:44:26,730 --> 00:44:29,700
inside the IE there's a bender specific

973
00:44:29,160 --> 00:44:31,859
ie

974
00:44:29,700 --> 00:44:35,279
so Wi-Fi direcor I'm sure you heard

975
00:44:31,859 --> 00:44:40,290
about I was like sort of like p2p Wi-Fi

976
00:44:35,280 --> 00:44:43,440
communication there they have funny like

977
00:44:40,290 --> 00:44:45,839
TLV similar to the IE but the funny

978
00:44:43,440 --> 00:44:51,420
thing about it till we it's inside an IE

979
00:44:45,839 --> 00:44:53,670
so it's like it's a piece of memory

980
00:44:51,420 --> 00:44:57,599
inside IE and the funny thing about this

981
00:44:53,670 --> 00:45:02,030
theory is that the length of the Wi-Fi

982
00:44:57,599 --> 00:45:05,549
direct TLV is actually a short so is

983
00:45:02,030 --> 00:45:08,910
encapsulated in a in a by long length

984
00:45:05,549 --> 00:45:12,030
but inside there is actually a short so

985
00:45:08,910 --> 00:45:12,359
like makes no sense but somehow is in

986
00:45:12,030 --> 00:45:15,660
there

987
00:45:12,359 --> 00:45:18,119
the what happens here is as you can see

988
00:45:15,660 --> 00:45:22,710
you know Alan is being taken directly

989
00:45:18,119 --> 00:45:25,079
from the network and that byte is here

990
00:45:22,710 --> 00:45:27,930
is only checking that it doesn't go

991
00:45:25,079 --> 00:45:29,819
beyond the end of the whole frame but

992
00:45:27,930 --> 00:45:33,930
the interesting far is that in this loop

993
00:45:29,819 --> 00:45:39,480
over here it's actually going through no

994
00:45:33,930 --> 00:45:42,649
island and what is doing in this case is

995
00:45:39,480 --> 00:45:44,940
is copying that we cannot see because I

996
00:45:42,650 --> 00:45:47,010
put that message in there but it's

997
00:45:44,940 --> 00:45:50,069
copying it into the different types and

998
00:45:47,010 --> 00:45:53,730
these types are like two bytes long so I

999
00:45:50,069 --> 00:45:54,839
can make that no laying more than two

1000
00:45:53,730 --> 00:45:56,730
bytes and this is going to be an

1001
00:45:54,839 --> 00:46:00,869
overflow and this is on a real Tech

1002
00:45:56,730 --> 00:46:03,089
driver which is quite interesting and it

1003
00:46:00,869 --> 00:46:05,970
can be triggered by beacon but it has to

1004
00:46:03,089 --> 00:46:07,920
be a Wi-Fi direct beacon that being said

1005
00:46:05,970 --> 00:46:10,078
thank you very much

1006
00:46:07,920 --> 00:46:10,530
if you have any questions I'm gonna be

1007
00:46:10,079 --> 00:46:16,269
around

1008
00:46:10,530 --> 00:46:16,269
[Applause]

