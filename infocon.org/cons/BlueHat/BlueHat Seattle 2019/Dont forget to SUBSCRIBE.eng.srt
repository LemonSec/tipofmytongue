1
00:00:01,870 --> 00:00:05,570
please welcome to the stage Elvis

2
00:00:04,720 --> 00:00:15,169
Corrado

3
00:00:05,570 --> 00:00:15,169
[Music]

4
00:00:18,380 --> 00:00:23,930
welcome all right so before I get

5
00:00:20,900 --> 00:00:26,150
started here I'm just gonna run off this

6
00:00:23,930 --> 00:00:28,849
lets check the IP address of this

7
00:00:26,150 --> 00:00:31,278
virtual machine here and then we're

8
00:00:28,849 --> 00:00:34,489
gonna do a number of console arm blue

9
00:00:31,279 --> 00:00:35,720
hat one sixty one sixty all right so I'm

10
00:00:34,489 --> 00:00:38,300
going to start the exploit before I even

11
00:00:35,720 --> 00:00:39,610
start talking since the exploit takes a

12
00:00:38,300 --> 00:00:45,860
little bit so let's just wait for

13
00:00:39,610 --> 00:00:48,019
Metasploit to come up here so I got T

14
00:00:45,860 --> 00:00:50,260
MUX I got screen out the bottom let's do

15
00:00:48,020 --> 00:00:54,620
all the things let's get this going so

16
00:00:50,260 --> 00:00:57,530
once this starts actually spraying the

17
00:00:54,620 --> 00:01:02,540
heap will start talking all right all

18
00:00:57,530 --> 00:01:05,030
right cool so welcome everyone

19
00:01:02,540 --> 00:01:07,130
what's up blue head black out here and

20
00:01:05,030 --> 00:01:09,500
this is your daily reminders don't fake

21
00:01:07,130 --> 00:01:11,329
don't forget to subscribe hit that like

22
00:01:09,500 --> 00:01:13,729
button hit the notification bell so

23
00:01:11,329 --> 00:01:16,758
anyways so today we'll be talking about

24
00:01:13,729 --> 00:01:19,670
this green wave device is the g100 is

25
00:01:16,759 --> 00:01:21,109
distributed by a few ISPs one may or may

26
00:01:19,670 --> 00:01:23,840
not be frontier and the other one may or

27
00:01:21,109 --> 00:01:25,339
not be verizon so there's the FCC ID at

28
00:01:23,840 --> 00:01:28,219
the very bottom of it so what do we do

29
00:01:25,340 --> 00:01:31,369
when you have an SEC ID we go online we

30
00:01:28,219 --> 00:01:34,158
look at everything and one second before

31
00:01:31,369 --> 00:01:35,810
I go gotta hit this all right so we find

32
00:01:34,159 --> 00:01:38,780
the internal photos and the FCC's of

33
00:01:35,810 --> 00:01:40,939
ID's Oh FCC's website we look at the

34
00:01:38,780 --> 00:01:42,920
processor here is called cortina we have

35
00:01:40,939 --> 00:01:45,158
these two memory modules and if you're

36
00:01:42,920 --> 00:01:48,829
looking hey what's this over here what's

37
00:01:45,159 --> 00:01:50,840
what's this going on right this looks

38
00:01:48,829 --> 00:01:53,508
kind of like kind of like out of the

39
00:01:50,840 --> 00:01:54,829
ordinary and if that kind of question

40
00:01:53,509 --> 00:01:56,630
popped in your head you are absolutely

41
00:01:54,829 --> 00:01:59,538
correct because this may or may not be

42
00:01:56,630 --> 00:02:01,999
JTAG so this is three three logic so we

43
00:01:59,539 --> 00:02:04,549
grab our arduino nano or we grab our GT

44
00:02:01,999 --> 00:02:05,899
angular whatever is closer and then we

45
00:02:04,549 --> 00:02:08,360
bit bang around then we find the

46
00:02:05,899 --> 00:02:10,520
interface pins and then also when we

47
00:02:08,360 --> 00:02:11,780
open up the box we have four header pins

48
00:02:10,520 --> 00:02:14,690
that are already pre soldered in the

49
00:02:11,780 --> 00:02:17,170
middle of the box as you can guess this

50
00:02:14,690 --> 00:02:19,880
may or may not be you are at surprise

51
00:02:17,170 --> 00:02:22,280
but as we turn on the box

52
00:02:19,880 --> 00:02:23,959
we don't have standard in we just have

53
00:02:22,280 --> 00:02:26,480
standard out so we don't have any shell

54
00:02:23,959 --> 00:02:28,870
when we turn on the box at all that's

55
00:02:26,480 --> 00:02:31,010
sad that sucks

56
00:02:28,870 --> 00:02:32,690
so I need to get inside this device

57
00:02:31,010 --> 00:02:34,130
because the firmware is not public or

58
00:02:32,690 --> 00:02:35,570
anything else like that so I need to

59
00:02:34,130 --> 00:02:37,850
grab the firmware first before I give me

60
00:02:35,570 --> 00:02:39,380
do anything so we kind of sit back start

61
00:02:37,850 --> 00:02:42,170
thinking about him like well I had that

62
00:02:39,380 --> 00:02:44,210
JTAG interface already bit banked so we

63
00:02:42,170 --> 00:02:46,190
you know put on some header pins we

64
00:02:44,210 --> 00:02:48,260
found a place without much copper at all

65
00:02:46,190 --> 00:02:49,730
get some hot glue and just put on some

66
00:02:48,260 --> 00:02:54,620
header pins and then solder some wires

67
00:02:49,730 --> 00:02:56,179
so we can gracefully put on some some

68
00:02:54,620 --> 00:02:58,010
some wires to it and hook it up to our

69
00:02:56,180 --> 00:03:00,710
target board this board right here is

70
00:02:58,010 --> 00:03:04,459
just an FTDI base breakout boards in

71
00:03:00,710 --> 00:03:06,940
FTDI 2 2 3 2 H so we open open OCD with

72
00:03:04,460 --> 00:03:09,470
our board configuration and we get an

73
00:03:06,940 --> 00:03:12,200
identifier Oh awesome

74
00:03:09,470 --> 00:03:14,990
JTAG so we see that this is an ARM based

75
00:03:12,200 --> 00:03:17,510
processor and so either we can a look

76
00:03:14,990 --> 00:03:19,640
inside the configuration files for the

77
00:03:17,510 --> 00:03:22,250
targets to see if we have an ID like

78
00:03:19,640 --> 00:03:24,950
ours or we look at the documentation and

79
00:03:22,250 --> 00:03:27,530
just say let's just create a little

80
00:03:24,950 --> 00:03:29,000
Indian cortex a based processor as our

81
00:03:27,530 --> 00:03:30,620
target so this is the target

82
00:03:29,000 --> 00:03:32,720
configuration I'm just saying that

83
00:03:30,620 --> 00:03:35,090
system reset is a push-pull we both have

84
00:03:32,720 --> 00:03:37,130
test reset and system reset this is the

85
00:03:35,090 --> 00:03:40,640
ID and then we have a cortex a little

86
00:03:37,130 --> 00:03:42,230
endian processor so then we we go back

87
00:03:40,640 --> 00:03:43,399
to open Oh sweetie we give it our board

88
00:03:42,230 --> 00:03:45,560
configuration and our target

89
00:03:43,400 --> 00:03:48,050
configuration and awesome we have

90
00:03:45,560 --> 00:03:50,510
breakpoints we in supervisor mode this

91
00:03:48,050 --> 00:03:52,550
is amazing so all I did here was that I

92
00:03:50,510 --> 00:03:54,350
started dumping memory regions from 8

93
00:03:52,550 --> 00:03:56,360
that like 8 through 0 and just kept

94
00:03:54,350 --> 00:03:58,760
dumping dumping and piping it to xx T

95
00:03:56,360 --> 00:04:01,640
and while I was trying to look for was

96
00:03:58,760 --> 00:04:02,929
the kernel boot boot parameters so after

97
00:04:01,640 --> 00:04:04,369
a while I found it and I just set a

98
00:04:02,930 --> 00:04:06,140
watch point to when the very last

99
00:04:04,370 --> 00:04:08,540
characters being written to met memory

100
00:04:06,140 --> 00:04:10,940
and I just all I did was just have it

101
00:04:08,540 --> 00:04:13,190
stopped and I just overwrote the init so

102
00:04:10,940 --> 00:04:15,320
is then going to an it Rd I just have a

103
00:04:13,190 --> 00:04:18,108
go to been SH which is showing right

104
00:04:15,320 --> 00:04:19,430
here and right over there so after we

105
00:04:18,108 --> 00:04:22,630
write we make sure it's in there and

106
00:04:19,430 --> 00:04:22,630
then we hit continue and

107
00:04:22,699 --> 00:04:26,610
we finally have the shell this is

108
00:04:25,080 --> 00:04:29,250
awesome so cool

109
00:04:26,610 --> 00:04:31,680
so we have a shell this is just this is

110
00:04:29,250 --> 00:04:33,780
just step one so we are now we're able

111
00:04:31,680 --> 00:04:36,000
to route the device so we go through all

112
00:04:33,780 --> 00:04:38,039
the NIT scripts we bring up everything

113
00:04:36,000 --> 00:04:41,370
and we won't come back to this towards

114
00:04:38,039 --> 00:04:43,110
the end of it but out of all these

115
00:04:41,370 --> 00:04:45,060
services I looked through these were

116
00:04:43,110 --> 00:04:47,849
actually the last ones I looked at like

117
00:04:45,060 --> 00:04:49,680
if everyone ever knows UDP 1900

118
00:04:47,849 --> 00:04:52,740
multicast SSDP

119
00:04:49,680 --> 00:04:54,569
as part of you PMP like it's it's been

120
00:04:52,740 --> 00:04:56,069
said a lot of times so we have three

121
00:04:54,569 --> 00:04:58,590
different binaries here that are dealing

122
00:04:56,069 --> 00:05:01,020
with UPnP we have this WPS monitor

123
00:04:58,590 --> 00:05:03,388
frontier four and maybe OPPD but for

124
00:05:01,020 --> 00:05:06,210
this talk we're just gonna focus on WPS

125
00:05:03,389 --> 00:05:07,530
monitor so before I even look at the

126
00:05:06,210 --> 00:05:09,359
binary start just to sell me stuff and

127
00:05:07,530 --> 00:05:11,969
like I'm gonna find a bug in it I need

128
00:05:09,360 --> 00:05:14,819
to know my environment like am i dealing

129
00:05:11,970 --> 00:05:16,199
with a SLR and stuff but very first

130
00:05:14,819 --> 00:05:18,120
thing I see is that this could be the

131
00:05:16,199 --> 00:05:20,280
UPnP library the thing this is Lib you

132
00:05:18,120 --> 00:05:23,400
pampy I don't know maybe it's mislabeled

133
00:05:20,280 --> 00:05:25,979
but I also see that we have a SLR and

134
00:05:23,400 --> 00:05:28,409
all the imported libraries and then also

135
00:05:25,979 --> 00:05:31,080
the stack in the heap we have DEP enable

136
00:05:28,409 --> 00:05:33,990
so they're not executable and also as

137
00:05:31,080 --> 00:05:35,789
well the heap is impacted by a SLR so to

138
00:05:33,990 --> 00:05:38,009
sum the processes is killed and

139
00:05:35,789 --> 00:05:39,930
restarted or the booth the Box reboots

140
00:05:38,009 --> 00:05:42,509
the base address for the heap is going

141
00:05:39,930 --> 00:05:44,130
to change every single time so okay cool

142
00:05:42,509 --> 00:05:46,319
and then very last thing is that the

143
00:05:44,130 --> 00:05:48,870
main binary it's not compiled with PI so

144
00:05:46,319 --> 00:05:50,880
it's not impacted by a SLR but if we

145
00:05:48,870 --> 00:05:52,409
have a string base buffer overflow we

146
00:05:50,880 --> 00:05:53,550
have no bytes in the base address of

147
00:05:52,409 --> 00:05:55,830
this even though it's little-endian

148
00:05:53,550 --> 00:05:57,449
we're only have one shot if we do have

149
00:05:55,830 --> 00:05:58,740
like something like on the stack or

150
00:05:57,449 --> 00:06:01,319
something that influence some sort of

151
00:05:58,740 --> 00:06:04,229
like a function pointer so we have to be

152
00:06:01,319 --> 00:06:05,969
mindful of that so after that just

153
00:06:04,229 --> 00:06:09,270
taking a little USB device into this

154
00:06:05,969 --> 00:06:11,520
device here and start just dede

155
00:06:09,270 --> 00:06:13,349
everything out of the out of the

156
00:06:11,520 --> 00:06:15,508
firmware into a little binary file then

157
00:06:13,349 --> 00:06:17,819
after that we open up and walk and we

158
00:06:15,509 --> 00:06:19,979
extract it nothing new nothing new and

159
00:06:17,819 --> 00:06:21,930
fancy so after this it's the balm

160
00:06:19,979 --> 00:06:23,818
hunting part and this balm

161
00:06:21,930 --> 00:06:26,190
you're gonna laughs like this is silly

162
00:06:23,819 --> 00:06:29,099
the way I found it so I I have this

163
00:06:26,190 --> 00:06:31,529
crazy like very advanced technique where

164
00:06:29,099 --> 00:06:33,259
I open up strings and I look for a

165
00:06:31,529 --> 00:06:37,949
percent us

166
00:06:33,259 --> 00:06:39,060
it's pretty intense I know so the very

167
00:06:37,949 --> 00:06:40,740
first thing I looked at it so this is

168
00:06:39,060 --> 00:06:43,050
about two years ago so the very first

169
00:06:40,740 --> 00:06:44,669
thing I looked at was these HP 200 ok

170
00:06:43,050 --> 00:06:46,889
responses and this one caught my eye

171
00:06:44,669 --> 00:06:49,710
because this is a percent us here a

172
00:06:46,889 --> 00:06:51,870
pesetas over here a percent us over here

173
00:06:49,710 --> 00:06:53,669
one there and just just one more for

174
00:06:51,870 --> 00:06:54,990
good luck so this thing has percentage

175
00:06:53,669 --> 00:06:57,419
all a little bit of play so I'm like

176
00:06:54,990 --> 00:07:00,509
this is pretty interesting so I looked

177
00:06:57,419 --> 00:07:02,969
as to where's is being used and lo and

178
00:07:00,509 --> 00:07:05,399
behold yes we do have a sprite F but the

179
00:07:02,969 --> 00:07:06,599
destination buffer is something out of a

180
00:07:05,399 --> 00:07:08,099
structure some sort of member that's

181
00:07:06,599 --> 00:07:09,630
being referenced I don't know this is

182
00:07:08,099 --> 00:07:12,479
the last member out of the structure

183
00:07:09,630 --> 00:07:14,580
where it's like a buffer array and they

184
00:07:12,479 --> 00:07:16,440
do like a sterling on the input and you

185
00:07:14,580 --> 00:07:18,508
know they calculate it at the end and

186
00:07:16,440 --> 00:07:19,949
maybe this is dynamic or static I don't

187
00:07:18,509 --> 00:07:23,009
know yet I don't know if this member is

188
00:07:19,949 --> 00:07:24,960
dynamic or static yet so after this I

189
00:07:23,009 --> 00:07:27,479
start looking at the UPnP architecture

190
00:07:24,960 --> 00:07:28,888
PDF you can go on the website the very

191
00:07:27,479 --> 00:07:30,330
bottom there you can look at the PDF and

192
00:07:28,889 --> 00:07:31,649
this is what all the developers are

193
00:07:30,330 --> 00:07:34,349
looking at when they're implementing

194
00:07:31,649 --> 00:07:36,599
UPnP right so I saw the response with

195
00:07:34,349 --> 00:07:38,339
all the % us everywhere and so my god we

196
00:07:36,599 --> 00:07:40,649
have this subscription identifier we

197
00:07:38,339 --> 00:07:43,169
have this timeout with the duration but

198
00:07:40,649 --> 00:07:44,399
what what causes response so we keep

199
00:07:43,169 --> 00:07:47,698
looking at it and we see this to

200
00:07:44,399 --> 00:07:50,039
subscribe method now the talk titles

201
00:07:47,699 --> 00:07:51,569
coming together anyways so we have this

202
00:07:50,039 --> 00:07:53,759
subscribe method we have the publisher

203
00:07:51,569 --> 00:07:54,990
path which I will tell you guys about in

204
00:07:53,759 --> 00:07:56,909
the next slide

205
00:07:54,990 --> 00:07:59,880
host and user agent completely optional

206
00:07:56,909 --> 00:08:02,759
we have a callback a header that has to

207
00:07:59,880 --> 00:08:04,889
be set to a URL so it's in angle bracket

208
00:08:02,759 --> 00:08:07,259
sort of like HTTP colon slash slash some

209
00:08:04,889 --> 00:08:10,649
IP or fqdn colon some port number slash

210
00:08:07,259 --> 00:08:12,120
the rest of the URI and angle bracket

211
00:08:10,649 --> 00:08:13,949
and then we have an NT header that has

212
00:08:12,120 --> 00:08:16,199
to be set to upp event and then we have

213
00:08:13,949 --> 00:08:18,899
this time o header we just set to second

214
00:08:16,199 --> 00:08:20,669
- and then some sort of integer and this

215
00:08:18,899 --> 00:08:21,779
is gonna be set in seconds so you can

216
00:08:20,669 --> 00:08:24,359
subscribe maybe like I want to be

217
00:08:21,779 --> 00:08:26,849
subscribed for 10 seconds second - 10 so

218
00:08:24,360 --> 00:08:29,039
the publisher path so we look at all

219
00:08:26,849 --> 00:08:30,870
this stuff if you ever seen a UPnP tong

220
00:08:29,039 --> 00:08:32,760
it's like yes and a search request and

221
00:08:30,870 --> 00:08:33,810
you get this XML back and we see all

222
00:08:32,760 --> 00:08:37,679
these different things for at the very

223
00:08:33,809 --> 00:08:40,078
bottom we see this come on this event

224
00:08:37,679 --> 00:08:42,059
sub URL and this is what's known as Gena

225
00:08:40,078 --> 00:08:44,039
it's the general event notification

226
00:08:42,059 --> 00:08:45,930
architectures right below where you do

227
00:08:44,039 --> 00:08:49,830
all their soap calls and stuff

228
00:08:45,930 --> 00:08:51,479
the control so um anyway so I learned

229
00:08:49,830 --> 00:08:53,490
about like alright so I can trigger this

230
00:08:51,480 --> 00:08:55,529
response back by sending a subscribe

231
00:08:53,490 --> 00:08:57,300
request and it's all percents and I saw

232
00:08:55,529 --> 00:08:59,160
that time out thing which is something I

233
00:08:57,300 --> 00:09:01,020
provide so let's just bring up our

234
00:08:59,160 --> 00:09:02,760
favorite text editor this could be vs

235
00:09:01,020 --> 00:09:04,350
code it could be vim it could be Emacs

236
00:09:02,760 --> 00:09:06,720
it could be echo for all I care who

237
00:09:04,350 --> 00:09:09,029
cares right so just create a script in

238
00:09:06,720 --> 00:09:11,339
Python where all I'm doing is setting

239
00:09:09,029 --> 00:09:12,779
the timeout to a string and I'm just

240
00:09:11,339 --> 00:09:15,330
gonna send it I'm just gonna see what

241
00:09:12,779 --> 00:09:16,709
comes back to me so I sent it in awesome

242
00:09:15,330 --> 00:09:20,010
we get a percent us back we get our

243
00:09:16,709 --> 00:09:22,890
strengths cool so this looks interesting

244
00:09:20,010 --> 00:09:24,360
to at least dive into I haven't proved

245
00:09:22,890 --> 00:09:25,800
anything yet that this is a

246
00:09:24,360 --> 00:09:28,560
vulnerability or anything else like that

247
00:09:25,800 --> 00:09:30,959
so I have two things that I can choose

248
00:09:28,560 --> 00:09:32,250
from so I'm kind of crunched on time and

249
00:09:30,959 --> 00:09:34,380
I want to make sure that I'm not rabbit

250
00:09:32,250 --> 00:09:36,330
holing I could spend all the time and do

251
00:09:34,380 --> 00:09:38,370
the CSI enhancing and handstand

252
00:09:36,330 --> 00:09:40,140
enhancing and looking at Ida and find

253
00:09:38,370 --> 00:09:43,260
all the members inside the structure and

254
00:09:40,140 --> 00:09:45,480
figure out everything by hand or I can

255
00:09:43,260 --> 00:09:46,860
also I have it at runtime so I can just

256
00:09:45,480 --> 00:09:51,450
kind of black box it there's not many

257
00:09:46,860 --> 00:09:54,029
states tagging at this server in so you

258
00:09:51,450 --> 00:09:55,440
know I did kind of start looking at all

259
00:09:54,029 --> 00:09:56,700
of the members and seeing where they're

260
00:09:55,440 --> 00:09:58,709
being passed to four different Lipsy

261
00:09:56,700 --> 00:10:00,990
functions and pass and you know just

262
00:09:58,709 --> 00:10:02,250
take that type and then be like are this

263
00:10:00,990 --> 00:10:05,520
is a character array this is an interior

264
00:10:02,250 --> 00:10:06,959
this is a short or also we can look at

265
00:10:05,520 --> 00:10:09,870
like assert statements or simple

266
00:10:06,959 --> 00:10:13,140
functions or simple names for functions

267
00:10:09,870 --> 00:10:16,220
and maybe maybe we find a github where

268
00:10:13,140 --> 00:10:19,230
it has this structure defined and once I

269
00:10:16,220 --> 00:10:21,750
and it has you know the rest of the

270
00:10:19,230 --> 00:10:24,779
structure defined and it has these max

271
00:10:21,750 --> 00:10:26,910
header laying and math max buff Lang you

272
00:10:24,779 --> 00:10:28,980
know pound to find it somewhere but it

273
00:10:26,910 --> 00:10:30,180
had that at the time so at the time at I

274
00:10:28,980 --> 00:10:31,920
just said you know what there's just

275
00:10:30,180 --> 00:10:33,839
black boxes I already have the device I

276
00:10:31,920 --> 00:10:38,370
have the binary so let's do this

277
00:10:33,839 --> 00:10:40,589
Koby alright next so I decided to make a

278
00:10:38,370 --> 00:10:43,250
Python script that would just send a

279
00:10:40,589 --> 00:10:45,930
request and if you got a request back

280
00:10:43,250 --> 00:10:48,240
increase the the size of that time out

281
00:10:45,930 --> 00:10:49,920
header and just keep going to keep going

282
00:10:48,240 --> 00:10:51,690
until you get like a reset or the funky

283
00:10:49,920 --> 00:10:53,790
like the socket goes down right so I did

284
00:10:51,690 --> 00:10:56,230
that and I had gdb attached and I get

285
00:10:53,790 --> 00:10:58,930
this segmentation fault

286
00:10:56,230 --> 00:11:02,320
right but then I look at it and I'm like

287
00:10:58,930 --> 00:11:05,170
we're loading and comparing and compared

288
00:11:02,320 --> 00:11:06,880
to null and I'm like this this this this

289
00:11:05,170 --> 00:11:09,699
is boring this is just a loop looking

290
00:11:06,880 --> 00:11:11,950
for an all or until r2 and r1 you like

291
00:11:09,700 --> 00:11:14,890
are the same value I'm like this this

292
00:11:11,950 --> 00:11:16,990
this sucks that one there's no I don't

293
00:11:14,890 --> 00:11:18,220
want this so I decided to play around a

294
00:11:16,990 --> 00:11:19,960
little bit more in this I'm like well

295
00:11:18,220 --> 00:11:21,850
let's go back let's go back to the

296
00:11:19,960 --> 00:11:24,370
manual right like let's let's let's see

297
00:11:21,850 --> 00:11:27,550
what else we can do with this Gina stack

298
00:11:24,370 --> 00:11:30,550
so I know there's a lot of words here

299
00:11:27,550 --> 00:11:32,709
but TLDR on this is that you can send in

300
00:11:30,550 --> 00:11:34,750
a subscription you get your identifiers

301
00:11:32,710 --> 00:11:37,030
back and then if you want to update your

302
00:11:34,750 --> 00:11:39,610
duration you can do that so if you say

303
00:11:37,030 --> 00:11:41,500
like oh I originally subscribed for 60

304
00:11:39,610 --> 00:11:43,570
seconds but now I want to be there for

305
00:11:41,500 --> 00:11:46,090
200 seconds or screw that I want to be

306
00:11:43,570 --> 00:11:47,950
there for 10 seconds you can do that so

307
00:11:46,090 --> 00:11:51,130
the way you do that is that you send a

308
00:11:47,950 --> 00:11:51,910
subscribe with your cid your identify

309
00:11:51,130 --> 00:11:53,890
that you got from this first

310
00:11:51,910 --> 00:11:56,319
subscription and then the new time-out

311
00:11:53,890 --> 00:11:58,630
duration that you want to do so go back

312
00:11:56,320 --> 00:12:01,270
to my python script i have it first send

313
00:11:58,630 --> 00:12:03,010
out a subscription grab the cid and then

314
00:12:01,270 --> 00:12:05,890
just keep updating the time-out over and

315
00:12:03,010 --> 00:12:09,970
over again got gb attached i got a new

316
00:12:05,890 --> 00:12:12,400
segment so look at this one I was

317
00:12:09,970 --> 00:12:14,530
expecting it's another load nothing

318
00:12:12,400 --> 00:12:16,900
interesting and so I look at it and I'm

319
00:12:14,530 --> 00:12:19,750
like hey this is actually kind of cool

320
00:12:16,900 --> 00:12:21,640
so what's the value of r3 so I look at

321
00:12:19,750 --> 00:12:23,770
r3 and there's my name oh my god

322
00:12:21,640 --> 00:12:25,810
so I have one pointer away now from

323
00:12:23,770 --> 00:12:28,150
getting PC control I got super lucky

324
00:12:25,810 --> 00:12:33,550
with this but screw it this is my luck

325
00:12:28,150 --> 00:12:37,420
I'm going to count it so awesome so I

326
00:12:33,550 --> 00:12:41,410
can kind of get PC control but I'm still

327
00:12:37,420 --> 00:12:43,719
one pointer away I still can't use WPS

328
00:12:41,410 --> 00:12:45,699
monitor as a gadget because I'm still

329
00:12:43,720 --> 00:12:48,130
bounded by the limitations of a string

330
00:12:45,700 --> 00:12:50,620
and then this has no bytes in it so I

331
00:12:48,130 --> 00:12:52,150
can't use it and we also don't have an

332
00:12:50,620 --> 00:12:53,710
info leak or some way to read out of

333
00:12:52,150 --> 00:12:56,319
balance or get an uninitialized like

334
00:12:53,710 --> 00:12:58,180
heap variable or whatever so I don't

335
00:12:56,320 --> 00:12:59,500
have any way to leak any like Lipsy

336
00:12:58,180 --> 00:13:02,620
functions or anything else that's being

337
00:12:59,500 --> 00:13:04,330
imported so okay let's get into the

338
00:13:02,620 --> 00:13:06,880
exploit development part of this cuz

339
00:13:04,330 --> 00:13:08,050
this it's going to be fun so I started

340
00:13:06,880 --> 00:13:09,150
thinking about this I'm like where one

341
00:13:08,050 --> 00:13:12,329
pointer away

342
00:13:09,150 --> 00:13:17,760
I have one binary that I can use as a

343
00:13:12,330 --> 00:13:19,560
gadget you know this reminds me of this

344
00:13:17,760 --> 00:13:21,450
reminds me of like in Czech Explorer 9

345
00:13:19,560 --> 00:13:23,489
or 10 exploitation where you're like I

346
00:13:21,450 --> 00:13:25,440
have an ActiveX module that I can

347
00:13:23,490 --> 00:13:27,630
instantiate and it's not affected by a

348
00:13:25,440 --> 00:13:29,640
SLR and I got if you spray the heap and

349
00:13:27,630 --> 00:13:31,410
I can set my big feed table here and

350
00:13:29,640 --> 00:13:34,020
bada-bing bada-boom stock pivot over

351
00:13:31,410 --> 00:13:36,600
here we win so I'm like ok it's a new

352
00:13:34,020 --> 00:13:39,180
approach I need to find primitives that

353
00:13:36,600 --> 00:13:41,850
I can spray the heap with I need to do

354
00:13:39,180 --> 00:13:43,560
some David Blaine magic and then from

355
00:13:41,850 --> 00:13:46,470
there maybe I can trigger the overflow

356
00:13:43,560 --> 00:13:47,880
and possibly get Co exec so the very

357
00:13:46,470 --> 00:13:49,710
first things I started thinking about it

358
00:13:47,880 --> 00:13:51,630
was like well I need a sample of like

359
00:13:49,710 --> 00:13:53,790
this base address of the heap because

360
00:13:51,630 --> 00:13:55,830
you know it's going over and oh it Jane

361
00:13:53,790 --> 00:13:58,319
jizz every single time is it's loaded up

362
00:13:55,830 --> 00:14:00,720
so I ran it once got the base headers

363
00:13:58,320 --> 00:14:03,630
and I did it again and again and again

364
00:14:00,720 --> 00:14:07,529
and again and again and again and again

365
00:14:03,630 --> 00:14:09,750
and again did it a few times so after I

366
00:14:07,529 --> 00:14:11,370
had like my good pool of like the base

367
00:14:09,750 --> 00:14:13,950
address of to where the heap is being

368
00:14:11,370 --> 00:14:15,870
loaded I'm like ok how much memory do we

369
00:14:13,950 --> 00:14:17,940
have free and we have about like a

370
00:14:15,870 --> 00:14:19,770
hundred and seventeen Meg's but I don't

371
00:14:17,940 --> 00:14:21,360
want to be too like greedy with my

372
00:14:19,770 --> 00:14:23,850
memory so we'll just call it a hundred

373
00:14:21,360 --> 00:14:26,070
so theoretically if the heap always

374
00:14:23,850 --> 00:14:28,260
loaded at zero we could grow it to oh

375
00:14:26,070 --> 00:14:31,650
six oh six oh six oh six we have this

376
00:14:28,260 --> 00:14:33,480
space available so awesome so after

377
00:14:31,650 --> 00:14:36,300
looking at my set of like heap addresses

378
00:14:33,480 --> 00:14:40,020
I was like wold this heap never loads

379
00:14:36,300 --> 00:14:42,540
above oh three it did load a few times

380
00:14:40,020 --> 00:14:44,819
at Oh - OH - it was rare but the max

381
00:14:42,540 --> 00:14:46,920
never went to this oh three region so

382
00:14:44,820 --> 00:14:48,660
I'm like okay so now I have like kind of

383
00:14:46,920 --> 00:14:50,699
a plan of attack I'm like I kind of want

384
00:14:48,660 --> 00:14:53,400
to grow the heap now I have this minimum

385
00:14:50,700 --> 00:14:54,930
or you know I need to get Oh threes so

386
00:14:53,400 --> 00:14:56,100
let's start looking so the very first

387
00:14:54,930 --> 00:14:58,170
thing I started looking was all the

388
00:14:56,100 --> 00:15:00,900
Malick's all the calyx hall duster dupes

389
00:14:58,170 --> 00:15:04,380
anything that uses a heap base function

390
00:15:00,900 --> 00:15:06,720
right so I find this so this variable

391
00:15:04,380 --> 00:15:09,510
that I called up top call Baxter it's

392
00:15:06,720 --> 00:15:12,270
exactly that so the callback string that

393
00:15:09,510 --> 00:15:14,430
I provide to it after the HTTP after the

394
00:15:12,270 --> 00:15:16,260
port number or after the IP sorry and

395
00:15:14,430 --> 00:15:17,760
then the port number this starting at

396
00:15:16,260 --> 00:15:20,160
the slash all the way at the end where

397
00:15:17,760 --> 00:15:21,180
the angle bracket ends it excluding that

398
00:15:20,160 --> 00:15:22,240
because that gets a null terminated

399
00:15:21,180 --> 00:15:23,618
before this

400
00:15:22,240 --> 00:15:25,629
so we're gonna do a sterling on the

401
00:15:23,619 --> 00:15:27,629
callback URI and then we're gonna add it

402
00:15:25,629 --> 00:15:30,249
to some structure size and then Calicut

403
00:15:27,629 --> 00:15:32,230
and which is going to mem set it to

404
00:15:30,249 --> 00:15:34,629
everything to zero so not uninitialized

405
00:15:32,230 --> 00:15:37,379
stuff here but this looks interesting to

406
00:15:34,629 --> 00:15:40,119
me so i set some breakpoints in gdb

407
00:15:37,379 --> 00:15:41,800
where I'm like alright I'm going to get

408
00:15:40,119 --> 00:15:43,990
the length that I supplied to it and I

409
00:15:41,800 --> 00:15:45,219
want to see the return address so I send

410
00:15:43,990 --> 00:15:47,319
it and I'm like let's just subscribe

411
00:15:45,220 --> 00:15:51,790
over and over again they get the same

412
00:15:47,319 --> 00:15:53,949
address over and like what what the hell

413
00:15:51,790 --> 00:15:56,860
is going on now they started thinking

414
00:15:53,949 --> 00:15:59,290
about it I'm like well if you know if to

415
00:15:56,860 --> 00:16:00,939
be honest like why would I put two

416
00:15:59,290 --> 00:16:02,920
allocations for the same subscription

417
00:16:00,939 --> 00:16:06,339
like if it's the same port number same

418
00:16:02,920 --> 00:16:07,779
ip same callback URI why would I create

419
00:16:06,339 --> 00:16:09,399
another allocation so I'm like let me

420
00:16:07,779 --> 00:16:10,959
change something so let me change the

421
00:16:09,399 --> 00:16:12,879
port number that we're doing this for

422
00:16:10,959 --> 00:16:14,050
loop and I'll just have the I the

423
00:16:12,879 --> 00:16:15,819
irritable will be the port number so

424
00:16:14,050 --> 00:16:17,649
every time loops over it increments and

425
00:16:15,819 --> 00:16:20,618
we'll just do that so I started doing

426
00:16:17,649 --> 00:16:22,420
that I'm like oh awesome we are starting

427
00:16:20,619 --> 00:16:24,670
to actually grow the heap now by 4k

428
00:16:22,420 --> 00:16:27,069
chunks and then we keep it going and

429
00:16:24,670 --> 00:16:30,279
going and it keeps growing and growing

430
00:16:27,069 --> 00:16:32,079
and growing so now I'm able to subscribe

431
00:16:30,279 --> 00:16:34,029
increase the port number subscribe

432
00:16:32,079 --> 00:16:38,799
increase the port number and going good

433
00:16:34,029 --> 00:16:41,410
so I'm this is awesome so I found a

434
00:16:38,799 --> 00:16:44,589
prune it to just grow the heap nothing

435
00:16:41,410 --> 00:16:46,329
cool yet but it's one primitive so now

436
00:16:44,589 --> 00:16:49,029
I'm thinking like alright I can grow the

437
00:16:46,329 --> 00:16:50,709
heap now I still bounded by the

438
00:16:49,029 --> 00:16:53,410
limitations of a string because we have

439
00:16:50,709 --> 00:16:55,239
that sterling it's all string based so I

440
00:16:53,410 --> 00:16:58,360
still need to do some David Blaine

441
00:16:55,240 --> 00:16:59,649
Street magic - crap and then so I

442
00:16:58,360 --> 00:17:01,779
started looking around I'm like alright

443
00:16:59,649 --> 00:17:04,209
so I can subscribe and fill up all this

444
00:17:01,779 --> 00:17:06,099
stuff like that's nothing like what else

445
00:17:04,209 --> 00:17:08,799
can I do with this gino stuff and we

446
00:17:06,099 --> 00:17:10,389
have this unsubscribe method where it

447
00:17:08,799 --> 00:17:11,918
sounds exactly what is I don't want to

448
00:17:10,390 --> 00:17:13,659
be subscribed to this service anymore I

449
00:17:11,919 --> 00:17:15,459
don't care about if any updates I don't

450
00:17:13,659 --> 00:17:15,880
care about anything get me the hell out

451
00:17:15,459 --> 00:17:18,130
of here

452
00:17:15,880 --> 00:17:19,929
so I'm like I wonder what this does and

453
00:17:18,130 --> 00:17:23,289
if you're thinking it probably frees the

454
00:17:19,929 --> 00:17:24,760
block you may or may not be correct so I

455
00:17:23,289 --> 00:17:25,898
see where it's being like you know

456
00:17:24,760 --> 00:17:27,908
there's a pointer being passed to free

457
00:17:25,898 --> 00:17:31,059
for this delete subscriber function so

458
00:17:27,909 --> 00:17:34,090
again back to gdb I set a breakpoint and

459
00:17:31,059 --> 00:17:35,289
then I just submit a bunch of requests

460
00:17:34,090 --> 00:17:36,040
it was like subscription description

461
00:17:35,289 --> 00:17:37,960
description I say

462
00:17:36,040 --> 00:17:40,149
this is for every single one reverse the

463
00:17:37,960 --> 00:17:42,370
array and now I'm unsubscribing and now

464
00:17:40,150 --> 00:17:44,470
we can see that yes my 4k chunks I'm

465
00:17:42,370 --> 00:17:47,739
spraying are being freed so I'm like

466
00:17:44,470 --> 00:17:50,170
okay cool we're still bounded by the

467
00:17:47,740 --> 00:17:52,740
limitations of his string so I actually

468
00:17:50,170 --> 00:17:54,790
pulled in a colleague of mine who does

469
00:17:52,740 --> 00:17:56,230
exploitation for other stuff he doesn't

470
00:17:54,790 --> 00:17:58,690
do embedded but it doesn't really matter

471
00:17:56,230 --> 00:18:00,490
so I'm showing him like this is our my

472
00:17:58,690 --> 00:18:04,990
print image that I have I can allocate

473
00:18:00,490 --> 00:18:07,450
it well I can make holes that will but I

474
00:18:04,990 --> 00:18:10,000
still need a way to get around bad

475
00:18:07,450 --> 00:18:12,280
character restrictions so he's looking

476
00:18:10,000 --> 00:18:15,040
at my notes logo my you know my ID a DB

477
00:18:12,280 --> 00:18:17,230
and stuff and so at the same time I'm

478
00:18:15,040 --> 00:18:18,730
looking at the soap in her face I'm like

479
00:18:17,230 --> 00:18:21,010
well there's other layers to this we

480
00:18:18,730 --> 00:18:22,870
sized Aegina stack so I'm looking at

481
00:18:21,010 --> 00:18:24,520
soap and at the same time he comes to me

482
00:18:22,870 --> 00:18:26,709
he's like hey I found a function that

483
00:18:24,520 --> 00:18:29,139
he's using malloc and it's talking about

484
00:18:26,710 --> 00:18:31,180
basics before decoding he goes do you

485
00:18:29,140 --> 00:18:32,680
know where that could be used by so it

486
00:18:31,180 --> 00:18:34,060
kind of struct me I was like well let me

487
00:18:32,680 --> 00:18:35,770
look at the soap actions and I found

488
00:18:34,060 --> 00:18:38,139
this one where there's no out arguments

489
00:18:35,770 --> 00:18:39,550
only one in beautiful and there's AP

490
00:18:38,140 --> 00:18:41,770
settings we look at the very bottom the

491
00:18:39,550 --> 00:18:43,419
XML we find the type it's a base64

492
00:18:41,770 --> 00:18:47,379
encoded string they provide it for the

493
00:18:43,420 --> 00:18:49,870
type I'm like huh so I send out this

494
00:18:47,380 --> 00:18:51,730
basics before like encoded string and we

495
00:18:49,870 --> 00:18:54,909
find out that the allocation that it

496
00:18:51,730 --> 00:18:56,470
gets it will copy the base64 string into

497
00:18:54,910 --> 00:18:58,600
it and then decode it into that same

498
00:18:56,470 --> 00:19:01,360
block and that once the TCP connection

499
00:18:58,600 --> 00:19:03,129
is killed it frees everything so I'm

500
00:19:01,360 --> 00:19:06,550
like okay it's a new plan of attack I

501
00:19:03,130 --> 00:19:08,680
unsubscribe I do my base64 encoding

502
00:19:06,550 --> 00:19:10,180
stuff it gets freed I now put another

503
00:19:08,680 --> 00:19:12,850
thing at the top of the free list for

504
00:19:10,180 --> 00:19:14,890
that 4k chunk and keep going and going

505
00:19:12,850 --> 00:19:17,110
and going I'm like awesome and then if I

506
00:19:14,890 --> 00:19:19,510
look inside this chunk you can see like

507
00:19:17,110 --> 00:19:21,370
yes there's my first gadgets right there

508
00:19:19,510 --> 00:19:23,920
but you see the oh twos you see the o3s

509
00:19:21,370 --> 00:19:25,179
though five zero six oh seven that was

510
00:19:23,920 --> 00:19:26,260
just me playing around when I was

511
00:19:25,180 --> 00:19:28,720
working on this to get everything

512
00:19:26,260 --> 00:19:31,620
aligned properly to see how reliable

513
00:19:28,720 --> 00:19:35,140
could I get this and it's pretty good

514
00:19:31,620 --> 00:19:36,639
but either way I now can send a base64

515
00:19:35,140 --> 00:19:38,620
encoded string that guess basics for

516
00:19:36,640 --> 00:19:40,260
decoding into the heap so now I don't

517
00:19:38,620 --> 00:19:45,120
have any more bad character restrictions

518
00:19:40,260 --> 00:19:48,070
so to go back I can spray the heat now I

519
00:19:45,120 --> 00:19:49,750
can kind of do some magic but there

520
00:19:48,070 --> 00:19:52,270
could be some races that may have

521
00:19:49,750 --> 00:19:54,010
and we'll discuss that so the very first

522
00:19:52,270 --> 00:19:56,379
thing I noticed was this so I did my

523
00:19:54,010 --> 00:19:58,420
spray I'm you know allocating everything

524
00:19:56,380 --> 00:19:59,650
and then like unsubscribed base64 I'm

525
00:19:58,420 --> 00:20:01,390
doing that so everything's going great

526
00:19:59,650 --> 00:20:03,730
and I'm like alright let's check out the

527
00:20:01,390 --> 00:20:06,040
editor so I want to look at and I see

528
00:20:03,730 --> 00:20:09,550
this like memory editors cannot be

529
00:20:06,040 --> 00:20:11,230
accessed and I'm like what the hell like

530
00:20:09,550 --> 00:20:13,720
what's going on and I started thinking

531
00:20:11,230 --> 00:20:16,930
about it and I'm like well you can't

532
00:20:13,720 --> 00:20:19,200
really build a house without a roof so

533
00:20:16,930 --> 00:20:21,640
instead of doing this where I'm

534
00:20:19,200 --> 00:20:23,800
allocating everything and I do a free

535
00:20:21,640 --> 00:20:26,140
and I do it basically four encoded she

536
00:20:23,800 --> 00:20:28,659
knows requests for that soap action and

537
00:20:26,140 --> 00:20:33,000
I keep going down keep going down so

538
00:20:28,660 --> 00:20:36,640
eventually as I keep going down hold on

539
00:20:33,000 --> 00:20:38,680
all of this is free so this is all an

540
00:20:36,640 --> 00:20:42,940
allocated space now it's all free space

541
00:20:38,680 --> 00:20:45,490
so the Linux kernel is gonna come in and

542
00:20:42,940 --> 00:20:47,560
it's gonna claim back the memory it just

543
00:20:45,490 --> 00:20:50,110
allocated me so now I have this race

544
00:20:47,560 --> 00:20:52,659
where I have to race you know before

545
00:20:50,110 --> 00:20:54,219
Linux takes back this memory space but

546
00:20:52,660 --> 00:20:56,230
that's not good because I'm doing this

547
00:20:54,220 --> 00:20:58,240
all over a socket there's no guarantee

548
00:20:56,230 --> 00:20:59,860
that I'll be able to beat the Linux

549
00:20:58,240 --> 00:21:01,120
kernel before reclaims that memory

550
00:20:59,860 --> 00:21:03,310
that's stupid

551
00:21:01,120 --> 00:21:05,379
so instead I do all these subscriptions

552
00:21:03,310 --> 00:21:07,540
and I leave the last description in

553
00:21:05,380 --> 00:21:08,860
place so that's going to always be there

554
00:21:07,540 --> 00:21:11,080
because one of the things that you can

555
00:21:08,860 --> 00:21:13,330
provide for the second argument or

556
00:21:11,080 --> 00:21:15,909
parameter is infinite so instead of

557
00:21:13,330 --> 00:21:17,350
specifying some huge integer I'm gonna

558
00:21:15,910 --> 00:21:18,910
say infinite in that description will

559
00:21:17,350 --> 00:21:21,189
always stay there until the device gets

560
00:21:18,910 --> 00:21:23,760
rebooted so now I'll go a second to last

561
00:21:21,190 --> 00:21:26,710
and start doing the same thing now and

562
00:21:23,760 --> 00:21:29,200
everything is working great that now the

563
00:21:26,710 --> 00:21:31,930
heap no longer gets pulled back and now

564
00:21:29,200 --> 00:21:34,480
I have like a roof to this you know to

565
00:21:31,930 --> 00:21:37,030
this house you can say but the other

566
00:21:34,480 --> 00:21:39,610
thing I started noticing was that the

567
00:21:37,030 --> 00:21:42,250
base64 decode function was picking up

568
00:21:39,610 --> 00:21:43,570
the same thing over and over again it

569
00:21:42,250 --> 00:21:47,590
like it would just happen halfway

570
00:21:43,570 --> 00:21:49,179
through so okay so now I have to

571
00:21:47,590 --> 00:21:53,230
troubleshoot this so now I'm gonna set a

572
00:21:49,180 --> 00:21:57,730
breakpoint out free and seeing like what

573
00:21:53,230 --> 00:22:00,040
exactly is going on here so I have

574
00:21:57,730 --> 00:22:02,230
attached some devices and trying to do

575
00:22:00,040 --> 00:22:03,280
like rural traffic and stuff so I see

576
00:22:02,230 --> 00:22:05,950
this the very first thing

577
00:22:03,280 --> 00:22:08,320
see is that the SSDP process function is

578
00:22:05,950 --> 00:22:10,360
gain hit so at any time it gets a

579
00:22:08,320 --> 00:22:12,280
message over multicast 1900 like an M

580
00:22:10,360 --> 00:22:15,189
search and notify request it's going to

581
00:22:12,280 --> 00:22:16,930
allocate stuff to the heap and also if

582
00:22:15,190 --> 00:22:18,850
the device requests like does an M

583
00:22:16,930 --> 00:22:20,680
search request it gets the notify of 200

584
00:22:18,850 --> 00:22:23,290
okay back gets the XML and then it

585
00:22:20,680 --> 00:22:25,350
requests it over HTTP that's also going

586
00:22:23,290 --> 00:22:28,300
to allocate something to the heap so

587
00:22:25,350 --> 00:22:31,120
instead of so what I did first was that

588
00:22:28,300 --> 00:22:34,060
I create two pools so I create one pool

589
00:22:31,120 --> 00:22:36,489
where that these us these allocations

590
00:22:34,060 --> 00:22:37,990
were they're pretty small in size can go

591
00:22:36,490 --> 00:22:39,760
into this area so I do sponsors

592
00:22:37,990 --> 00:22:41,980
descriptions and I create holes into it

593
00:22:39,760 --> 00:22:44,170
and then after that I create my next

594
00:22:41,980 --> 00:22:47,290
pool which is this thing and then as

595
00:22:44,170 --> 00:22:50,470
well I can't I can't do anything about

596
00:22:47,290 --> 00:22:52,780
the TCP race but what I can do is try to

597
00:22:50,470 --> 00:22:54,310
spam the top of the free list over and

598
00:22:52,780 --> 00:22:57,129
over again to make sure I'm always there

599
00:22:54,310 --> 00:23:00,700
so I do now is I free replace five

600
00:22:57,130 --> 00:23:03,700
blocks I resis kryb again to go back up

601
00:23:00,700 --> 00:23:05,830
and I go back down again and then

602
00:23:03,700 --> 00:23:07,720
iterate to the next five which increased

603
00:23:05,830 --> 00:23:10,270
the amount of time the exploit X to run

604
00:23:07,720 --> 00:23:14,320
but an increased reliability by quite a

605
00:23:10,270 --> 00:23:16,389
bit so now I can spray the heap I can do

606
00:23:14,320 --> 00:23:18,040
some magic without like the you know

607
00:23:16,390 --> 00:23:19,420
picking up pointers that I am not

608
00:23:18,040 --> 00:23:21,940
expecting or anything else like that

609
00:23:19,420 --> 00:23:23,500
like this technique that I just kind of

610
00:23:21,940 --> 00:23:25,030
did over and over again and fine-tuned

611
00:23:23,500 --> 00:23:27,070
it is starting to work out pretty well

612
00:23:25,030 --> 00:23:29,740
but I need to dive out this exploit

613
00:23:27,070 --> 00:23:32,080
chain so I started thinking I'm like

614
00:23:29,740 --> 00:23:33,760
let's start let's just run the crash

615
00:23:32,080 --> 00:23:36,070
like let's just get a crash and see what

616
00:23:33,760 --> 00:23:38,440
we're starting and if all these things I

617
00:23:36,070 --> 00:23:40,659
do control are three which is a value

618
00:23:38,440 --> 00:23:42,070
and but I the only thing I control for

619
00:23:40,660 --> 00:23:45,460
the insides of it let's just pointer for

620
00:23:42,070 --> 00:23:48,460
r4 so inside are four we see our attack

621
00:23:45,460 --> 00:23:51,610
string so the 42 is so it's just you

622
00:23:48,460 --> 00:23:53,080
know a bunch of bees so this was two

623
00:23:51,610 --> 00:23:56,800
years ago it's my new putting the

624
00:23:53,080 --> 00:23:58,990
mindset so I used to do like IPS filter

625
00:23:56,800 --> 00:24:00,550
development so I'm really good at pcre

626
00:23:58,990 --> 00:24:02,740
regex even though this is the worst

627
00:24:00,550 --> 00:24:04,419
regex known to man but all I'm looking

628
00:24:02,740 --> 00:24:06,850
for here is that I'm looking for a load

629
00:24:04,420 --> 00:24:08,410
where r4 is being dereference I don't

630
00:24:06,850 --> 00:24:09,580
want any offsets right now just give me

631
00:24:08,410 --> 00:24:11,590
everything for that and I'll do the

632
00:24:09,580 --> 00:24:14,639
offsets later so I got a bunch of

633
00:24:11,590 --> 00:24:16,800
results and I went one by one by

634
00:24:14,640 --> 00:24:19,410
by one by one and this is how I found

635
00:24:16,800 --> 00:24:22,200
all my gadgets I just did it all by hand

636
00:24:19,410 --> 00:24:24,780
like I didn't use dropper I didn't use

637
00:24:22,200 --> 00:24:27,660
any of these automation drop tools I try

638
00:24:24,780 --> 00:24:30,090
to use one for a stack pivot but we'll

639
00:24:27,660 --> 00:24:31,680
look at that in a minute so just go for

640
00:24:30,090 --> 00:24:34,020
a high level for this call cycle I'm

641
00:24:31,680 --> 00:24:35,790
going to talk about so gadget one that I

642
00:24:34,020 --> 00:24:37,920
found grants me the ability to call a

643
00:24:35,790 --> 00:24:38,670
function with two arguments that's all

644
00:24:37,920 --> 00:24:41,790
that it does

645
00:24:38,670 --> 00:24:44,520
gadget two allows me to do a stack pivot

646
00:24:41,790 --> 00:24:46,500
kind of it's cheap but then we get

647
00:24:44,520 --> 00:24:48,750
control of our four to our seven our

648
00:24:46,500 --> 00:24:51,570
seven is gonna have a pointer for the

649
00:24:48,750 --> 00:24:54,210
iat table entry for string two unsigned

650
00:24:51,570 --> 00:24:57,659
long - four because that's going to be

651
00:24:54,210 --> 00:24:59,610
dereference plus four later on we store

652
00:24:57,660 --> 00:25:02,190
that into our zero and get control for R

653
00:24:59,610 --> 00:25:06,000
3 to R seven and then from there we dere

654
00:25:02,190 --> 00:25:09,630
fi 0 + 4 into R 0 so now R 0 is pointed

655
00:25:06,000 --> 00:25:13,020
into Lib C at stir done sign long get

656
00:25:09,630 --> 00:25:15,720
control of R 3 to R 7 and we add R 3 and

657
00:25:13,020 --> 00:25:17,760
R 0 and started result in R 0 so now all

658
00:25:15,720 --> 00:25:20,070
I'm doing is taking where we have our

659
00:25:17,760 --> 00:25:22,620
pointer that's inside Lib CI string down

660
00:25:20,070 --> 00:25:25,230
sign long and we're now adding an offset

661
00:25:22,620 --> 00:25:27,810
to it so now I'm pointing to P open and

662
00:25:25,230 --> 00:25:29,400
then we get control of our for our 6 is

663
00:25:27,810 --> 00:25:31,470
going to store the value that I just

664
00:25:29,400 --> 00:25:33,090
calculated to P open back into the heap

665
00:25:31,470 --> 00:25:34,590
since we don't really care about it

666
00:25:33,090 --> 00:25:36,060
anymore the peep is not this fragile

667
00:25:34,590 --> 00:25:37,770
state thing that if something over

668
00:25:36,060 --> 00:25:39,929
writes it I get worried we can do every

669
00:25:37,770 --> 00:25:41,550
want this state and gadget 7 and she's

670
00:25:39,930 --> 00:25:43,050
got you 1 again because all I'm gonna do

671
00:25:41,550 --> 00:25:44,790
is pick up that pointer that I saved to

672
00:25:43,050 --> 00:25:48,659
the heap and I can call it with a

673
00:25:44,790 --> 00:25:50,760
command execute and the argument are so

674
00:25:48,660 --> 00:25:53,700
gadget one looks exactly like this so R

675
00:25:50,760 --> 00:25:55,500
4 is our attack string and we directa

676
00:25:53,700 --> 00:25:57,810
and put in R 3 R 3 is now going to be a

677
00:25:55,500 --> 00:26:01,230
pointer as we calculated to get R 0 and

678
00:25:57,810 --> 00:26:03,620
R 1 I'm doing for K chunks so all at the

679
00:26:01,230 --> 00:26:07,410
end of it she's gonna be like 40 and 20

680
00:26:03,620 --> 00:26:09,300
and then 10 14 and C so like it's not

681
00:26:07,410 --> 00:26:10,410
gonna it's it's controllable so this one

682
00:26:09,300 --> 00:26:12,000
actually worked pretty well but the

683
00:26:10,410 --> 00:26:14,880
problem is this is a heap overflowing

684
00:26:12,000 --> 00:26:16,530
and calling one function like I don't

685
00:26:14,880 --> 00:26:17,940
have control of the call stack yet and

686
00:26:16,530 --> 00:26:20,220
this is not a stack-based buffer

687
00:26:17,940 --> 00:26:22,320
overflow so I had to think about this so

688
00:26:20,220 --> 00:26:23,400
I went online and I started looking at

689
00:26:22,320 --> 00:26:25,260
different research for like stack

690
00:26:23,400 --> 00:26:27,030
pivoting on arm and I found this old

691
00:26:25,260 --> 00:26:28,560
2012 slide

692
00:26:27,030 --> 00:26:30,000
about this thumb thumb instruction

693
00:26:28,560 --> 00:26:32,040
called load multiple decrement before

694
00:26:30,000 --> 00:26:34,320
and so I decided to try it out so I

695
00:26:32,040 --> 00:26:36,899
loaded upward air and started looking up

696
00:26:34,320 --> 00:26:39,419
this load multiple decrement before with

697
00:26:36,900 --> 00:26:42,030
our four as the source plugged it in

698
00:26:39,420 --> 00:26:44,670
illegal instruction so this is not gonna

699
00:26:42,030 --> 00:26:48,450
work and I was like why isn't this

700
00:26:44,670 --> 00:26:50,040
working and so one of my colleagues pull

701
00:26:48,450 --> 00:26:51,870
up the our manual was like well the

702
00:26:50,040 --> 00:26:55,260
restriction for this instruction is that

703
00:26:51,870 --> 00:26:57,239
the Reg list cannot contain SP okay so I

704
00:26:55,260 --> 00:26:58,320
can't use this instruction to stack

705
00:26:57,240 --> 00:27:00,750
pivot anymore as part of the

706
00:26:58,320 --> 00:27:03,929
restrictions okay so I'm like well what

707
00:27:00,750 --> 00:27:05,760
else can I use in order to like stack

708
00:27:03,930 --> 00:27:07,680
pivot I'm like well instead of trying to

709
00:27:05,760 --> 00:27:09,990
get the you know stack pointer to point

710
00:27:07,680 --> 00:27:11,940
into the heap one on just bring the heap

711
00:27:09,990 --> 00:27:13,950
to the stack so I started looking at mem

712
00:27:11,940 --> 00:27:16,320
copies and I started looking at every

713
00:27:13,950 --> 00:27:18,840
single one one by one by one by one and

714
00:27:16,320 --> 00:27:21,840
I came across this one or our one goes

715
00:27:18,840 --> 00:27:24,120
to the R for R zero goes on R 5 long

716
00:27:21,840 --> 00:27:26,340
story short I can provide the end

717
00:27:24,120 --> 00:27:28,229
parameter of the size and the source and

718
00:27:26,340 --> 00:27:29,850
the destination is the second-to-last

719
00:27:28,230 --> 00:27:32,580
instruction there which is a stack based

720
00:27:29,850 --> 00:27:34,620
pointer so I can use this where I

721
00:27:32,580 --> 00:27:36,240
provide a source address the size of it

722
00:27:34,620 --> 00:27:38,820
and it's going to smash the hell out of

723
00:27:36,240 --> 00:27:41,490
this stack the only problem is is once

724
00:27:38,820 --> 00:27:44,310
this returns this is a large stack frame

725
00:27:41,490 --> 00:27:47,250
so I'm starting to run towards the like

726
00:27:44,310 --> 00:27:49,020
edge of this the stack here so if I keep

727
00:27:47,250 --> 00:27:50,580
going with my call stack I have to be

728
00:27:49,020 --> 00:27:54,120
careful not to run out of space and then

729
00:27:50,580 --> 00:27:56,460
that's the end of it so everything again

730
00:27:54,120 --> 00:27:58,199
so all I'm doing here is like I got this

731
00:27:56,460 --> 00:28:00,420
pointer to string down sign long from

732
00:27:58,200 --> 00:28:03,030
the IIT table and I'm Steeve roughing it

733
00:28:00,420 --> 00:28:05,010
and then I'm calculating off to P open

734
00:28:03,030 --> 00:28:08,520
and then I'm saving it to the heap and

735
00:28:05,010 --> 00:28:11,610
then I'm calling it so to put it all

736
00:28:08,520 --> 00:28:13,170
together so we're gonna spray the heap

737
00:28:11,610 --> 00:28:15,419
we're gonna save all the subscription

738
00:28:13,170 --> 00:28:17,130
identifiers we're not gonna free the

739
00:28:15,420 --> 00:28:19,080
last description identifier that's going

740
00:28:17,130 --> 00:28:21,270
to be our roof of the heap so the OS

741
00:28:19,080 --> 00:28:22,949
doesn't reclaim that memory we're gonna

742
00:28:21,270 --> 00:28:24,750
free and replace the blocks view the

743
00:28:22,950 --> 00:28:27,330
unsubscribed method and also to invoke

744
00:28:24,750 --> 00:28:29,430
that soap action and we just basically

745
00:28:27,330 --> 00:28:30,360
for encode our face struck our rob chain

746
00:28:29,430 --> 00:28:33,150
and the command that we're going to

747
00:28:30,360 --> 00:28:35,850
execute and then with also they also be

748
00:28:33,150 --> 00:28:37,800
idea of that we're gonna free 5 reoccupy

749
00:28:35,850 --> 00:28:39,750
5 freedom again and go on to the next

750
00:28:37,800 --> 00:28:40,919
five and also listen to on multicast

751
00:28:39,750 --> 00:28:43,440
traffic so I have a multi-cat

752
00:28:40,920 --> 00:28:45,660
CDP listener and I just select it if any

753
00:28:43,440 --> 00:28:48,270
data needs to be read we read it all and

754
00:28:45,660 --> 00:28:51,180
then we occupied 25 free of them and

755
00:28:48,270 --> 00:28:53,070
they're returned so then we triggered

756
00:28:51,180 --> 00:28:54,600
the bone so hopefully we can always say

757
00:28:53,070 --> 00:28:56,250
on top of the free list and nothing else

758
00:28:54,600 --> 00:28:59,399
could embrace it and screw it all up so

759
00:28:56,250 --> 00:29:00,690
we do everything and this exploit is

760
00:28:59,400 --> 00:29:04,020
still running so that's okay

761
00:29:00,690 --> 00:29:06,120
so we may win so we run everything and

762
00:29:04,020 --> 00:29:08,160
after a while after this one says twenty

763
00:29:06,120 --> 00:29:10,050
four point seven eight minutes this one

764
00:29:08,160 --> 00:29:13,170
is still running we do get a shell and

765
00:29:10,050 --> 00:29:14,780
this is awesome so the last things I

766
00:29:13,170 --> 00:29:17,550
want to talk about though

767
00:29:14,780 --> 00:29:20,129
all right that's still running so the

768
00:29:17,550 --> 00:29:22,440
bonus material so going back to the the

769
00:29:20,130 --> 00:29:24,330
services are on this device so this

770
00:29:22,440 --> 00:29:26,460
particular one when I first looked at it

771
00:29:24,330 --> 00:29:32,580
pointed be like right out to me and be

772
00:29:26,460 --> 00:29:35,580
Randi and it's on port 51 52 soliciting

773
00:29:32,580 --> 00:29:37,050
on all interfaces somebody great this

774
00:29:35,580 --> 00:29:39,629
sounds interesting maybe I can change

775
00:29:37,050 --> 00:29:42,120
some NVRAM parameters or something try

776
00:29:39,630 --> 00:29:44,580
to connect to it not working look at IP

777
00:29:42,120 --> 00:29:46,409
tables is being blocked so I can't reach

778
00:29:44,580 --> 00:29:48,600
it from an outside source so I started

779
00:29:46,410 --> 00:29:50,820
thinking about it I'm like well what

780
00:29:48,600 --> 00:29:53,070
about the callback thing what if I set

781
00:29:50,820 --> 00:29:55,470
the callback to one 27001

782
00:29:53,070 --> 00:29:57,810
and I set the port 51 52 which is that

783
00:29:55,470 --> 00:30:01,020
TCP listener port and you know maybe

784
00:29:57,810 --> 00:30:03,270
he's gonna send a notify slash or space

785
00:30:01,020 --> 00:30:05,190
slash you know this string I sent so we

786
00:30:03,270 --> 00:30:08,910
attach ashtrays to that particular

787
00:30:05,190 --> 00:30:11,970
daemon we send this subscription request

788
00:30:08,910 --> 00:30:14,580
to the UPnP service and we see it we see

789
00:30:11,970 --> 00:30:16,620
that it does connect to it locally and

790
00:30:14,580 --> 00:30:19,050
we can send stuff so this was like a

791
00:30:16,620 --> 00:30:20,699
token based service where it's like I'm

792
00:30:19,050 --> 00:30:22,620
looking for a sub character or sub

793
00:30:20,700 --> 00:30:24,180
string and they go from there well this

794
00:30:22,620 --> 00:30:25,679
could be a great way the pivot

795
00:30:24,180 --> 00:30:27,630
unfortunately for this particular

796
00:30:25,680 --> 00:30:28,830
service that wasn't gonna work because

797
00:30:27,630 --> 00:30:30,510
it also looked at the very beginning of

798
00:30:28,830 --> 00:30:32,429
the stream which I don't control notify

799
00:30:30,510 --> 00:30:35,580
space slash I don't know I don't control

800
00:30:32,430 --> 00:30:41,010
that so all right so I'm gonna stop this

801
00:30:35,580 --> 00:30:44,220
here and this exploit didn't work that's

802
00:30:41,010 --> 00:30:47,550
okay all right the one thing though that

803
00:30:44,220 --> 00:30:48,900
I want to show that you though was that

804
00:30:47,550 --> 00:30:52,889
man I can't believe it didn't work

805
00:30:48,900 --> 00:30:53,960
anyways doing all this by hand took a

806
00:30:52,890 --> 00:30:56,330
while

807
00:30:53,960 --> 00:30:58,070
and so I started to learn that I should

808
00:30:56,330 --> 00:30:59,600
start doing that like automation to

809
00:30:58,070 --> 00:31:03,559
start looking for these kind of stuff so

810
00:30:59,600 --> 00:31:06,980
I started creating a test case suite for

811
00:31:03,559 --> 00:31:08,779
all this and let me show you that so

812
00:31:06,980 --> 00:31:10,130
finding the vault for this did take me a

813
00:31:08,779 --> 00:31:13,190
little bit just because it was the last

814
00:31:10,130 --> 00:31:17,690
thing I looked at but creating a test

815
00:31:13,190 --> 00:31:20,029
case suite for everything made it so I

816
00:31:17,690 --> 00:31:21,620
can like set up like like a script that

817
00:31:20,029 --> 00:31:23,870
will find the common type of things that

818
00:31:21,620 --> 00:31:25,879
I find in almost every single UPnP

819
00:31:23,870 --> 00:31:27,709
library or i have found or i can look at

820
00:31:25,880 --> 00:31:29,809
the documentation and think of new ways

821
00:31:27,710 --> 00:31:33,380
in order to like see if I can make

822
00:31:29,809 --> 00:31:34,940
something go down so let's see man I

823
00:31:33,380 --> 00:31:38,750
can't believe that didn't work but

824
00:31:34,940 --> 00:31:47,929
that's fine so we're just going to start

825
00:31:38,750 --> 00:31:51,080
everything up thing takes about a minute

826
00:31:47,929 --> 00:31:53,419
to boot up so the very thing at the very

827
00:31:51,080 --> 00:31:57,879
the bottom screen here is just the

828
00:31:53,419 --> 00:31:57,880
screen session for the you our interface

829
00:31:58,000 --> 00:32:06,799
man can't believe it at work oh well so

830
00:32:04,490 --> 00:32:11,630
it's setting up everything it's booting

831
00:32:06,799 --> 00:32:14,020
up everything twenty point nine five and

832
00:32:11,630 --> 00:32:14,020
didn't work

833
00:32:17,160 --> 00:32:21,060
I like how this exploit I've charted a

834
00:32:19,350 --> 00:32:23,040
thousand times and it's worked and tried

835
00:32:21,060 --> 00:32:27,030
here live and no it doesn't work that's

836
00:32:23,040 --> 00:32:28,560
okay we'll do the next thing so what I

837
00:32:27,030 --> 00:32:29,670
started doing here is I was thinking

838
00:32:28,560 --> 00:32:31,530
about it and I'm like well I want to

839
00:32:29,670 --> 00:32:32,850
create a script to start testing for all

840
00:32:31,530 --> 00:32:34,889
these type of things but I want to make

841
00:32:32,850 --> 00:32:36,780
like a gdb service dub or anything else

842
00:32:34,890 --> 00:32:38,220
like that so I started thinking about

843
00:32:36,780 --> 00:32:40,410
when I used to do Network engineering

844
00:32:38,220 --> 00:32:42,630
and so when you set up like a local low

845
00:32:40,410 --> 00:32:44,040
balancer the one thing you're doing for

846
00:32:42,630 --> 00:32:45,390
your server farm with every single real

847
00:32:44,040 --> 00:32:47,430
servers that you have to set up a health

848
00:32:45,390 --> 00:32:49,980
check like a lair for health check or

849
00:32:47,430 --> 00:32:51,570
layer 7 like I'm gonna probe this socket

850
00:32:49,980 --> 00:32:54,000
and if it's healthy I'm gonna close it

851
00:32:51,570 --> 00:32:55,409
and call it up or I'm gonna do a get

852
00:32:54,000 --> 00:32:57,270
request for this web page and I'm gonna

853
00:32:55,410 --> 00:33:00,300
expect like a particular string or

854
00:32:57,270 --> 00:33:02,040
something before I call it ok so I'm

855
00:33:00,300 --> 00:33:06,180
like well why can't I do that with you

856
00:33:02,040 --> 00:33:10,110
PMP so I the the whole basis of this

857
00:33:06,180 --> 00:33:13,020
program is it's really really simple so

858
00:33:10,110 --> 00:33:16,189
we just said no M search requests let's

859
00:33:13,020 --> 00:33:16,190
see here whoops

860
00:33:16,580 --> 00:33:20,490
so all we do here is that we send out

861
00:33:18,900 --> 00:33:21,990
these M search requests and we discover

862
00:33:20,490 --> 00:33:23,940
all the things are within the network

863
00:33:21,990 --> 00:33:27,780
like all these different UPnP services

864
00:33:23,940 --> 00:33:29,610
and so all I have here is that once we

865
00:33:27,780 --> 00:33:32,070
discover everything we're gonna start

866
00:33:29,610 --> 00:33:33,959
fuzzing everything as well for this

867
00:33:32,070 --> 00:33:35,700
particular demo and such I have all the

868
00:33:33,960 --> 00:33:38,070
soap action test cases turned off and

869
00:33:35,700 --> 00:33:39,780
just my G no one's turned on and once it

870
00:33:38,070 --> 00:33:41,700
finds something is to start playing a

871
00:33:39,780 --> 00:33:43,200
sound so this one right here it's going

872
00:33:41,700 --> 00:33:45,480
to start fuzzing the meeting.you P and

873
00:33:43,200 --> 00:33:48,000
peas daemon and it's gonna be fuzzing

874
00:33:45,480 --> 00:33:50,130
the gene apart it's gonna find one bug

875
00:33:48,000 --> 00:33:52,650
that I already published in my github it

876
00:33:50,130 --> 00:33:56,100
is fixed upstream but it's a read out of

877
00:33:52,650 --> 00:33:58,410
bounds due to them using SM printf to

878
00:33:56,100 --> 00:34:00,449
limit the copy but they use to return

879
00:33:58,410 --> 00:34:03,390
value from SM printf as a value for the

880
00:34:00,450 --> 00:34:05,670
end parameter when sending the the

881
00:34:03,390 --> 00:34:07,470
notify so as I'm printf it's going to

882
00:34:05,670 --> 00:34:09,510
return a much larger value and then it's

883
00:34:07,470 --> 00:34:16,420
going to read out of bounds

884
00:34:09,510 --> 00:34:21,310
that was loud so we have an info leak

885
00:34:16,420 --> 00:34:25,230
so that's mini UPnP right there so we're

886
00:34:21,310 --> 00:34:32,949
just gonna keep waiting there are three

887
00:34:25,230 --> 00:34:34,330
UPnP services on this device and so it's

888
00:34:32,949 --> 00:34:43,029
going it's going

889
00:34:34,330 --> 00:34:45,549
so let's see come on this should just be

890
00:34:43,030 --> 00:34:47,350
a little bit longer and then alright so

891
00:34:45,550 --> 00:34:49,630
here we go so let's let's get rid of

892
00:34:47,350 --> 00:34:52,989
that one so this one 9900 is going to be

893
00:34:49,630 --> 00:34:54,730
the WPS monitor one so we have read out

894
00:34:52,989 --> 00:34:57,399
of bounds from the previous service as

895
00:34:54,730 --> 00:35:01,360
you heard and then this one right now so

896
00:34:57,400 --> 00:35:05,110
I have like we have another POC that

897
00:35:01,360 --> 00:35:07,390
gets written and then after the Sun

898
00:35:05,110 --> 00:35:11,170
where'd you find this we have our pox

899
00:35:07,390 --> 00:35:16,330
being generated and so what this script

900
00:35:11,170 --> 00:35:18,370
does is that so if we look at the 192

901
00:35:16,330 --> 00:35:20,259
one this is going to be exactly what I

902
00:35:18,370 --> 00:35:22,630
found statically we have this header

903
00:35:20,260 --> 00:35:25,090
where the timeout is being set to second

904
00:35:22,630 --> 00:35:26,320
- and this is probably really hard to

905
00:35:25,090 --> 00:35:28,900
see and let me see if I can increase

906
00:35:26,320 --> 00:35:32,410
this a little bit it just says test case

907
00:35:28,900 --> 00:35:35,440
11 TC 11 over and over again and so this

908
00:35:32,410 --> 00:35:37,629
particular script that got generated I

909
00:35:35,440 --> 00:35:39,040
can just run it again with gdb attached

910
00:35:37,630 --> 00:35:41,740
and it should present me with a crash

911
00:35:39,040 --> 00:35:43,000
and I can analyze it as well we can also

912
00:35:41,740 --> 00:35:48,700
look at the other one that I've

913
00:35:43,000 --> 00:35:51,970
generated let's see here so this one

914
00:35:48,700 --> 00:35:53,890
right here if it looks a little weird so

915
00:35:51,970 --> 00:35:56,410
anyways this one this one right here was

916
00:35:53,890 --> 00:35:58,540
mini-you p.m. PD it was impacted for a

917
00:35:56,410 --> 00:36:02,140
little while like devices such as Google

918
00:35:58,540 --> 00:36:03,970
Wi-Fi Samsung router thing I forgot the

919
00:36:02,140 --> 00:36:05,710
name of it and a few others these mini

920
00:36:03,970 --> 00:36:07,959
UPN PD were affected by this

921
00:36:05,710 --> 00:36:11,260
so the the root cause of this was that

922
00:36:07,960 --> 00:36:12,850
it would allocate a 1024 by chunk for

923
00:36:11,260 --> 00:36:14,650
the response to be sent back and they

924
00:36:12,850 --> 00:36:16,720
used SM printf in order to limit the

925
00:36:14,650 --> 00:36:18,940
copy but he used a return value best in

926
00:36:16,720 --> 00:36:20,439
printf for the the the M parameter for

927
00:36:18,940 --> 00:36:22,390
sending back so you could read out of

928
00:36:20,440 --> 00:36:23,020
bounds so what you could do is use the

929
00:36:22,390 --> 00:36:25,390
subscription

930
00:36:23,020 --> 00:36:26,950
to also make a hole somewhere so when

931
00:36:25,390 --> 00:36:29,319
you're about to read out of Bounce you

932
00:36:26,950 --> 00:36:30,640
can read into structures that you know

933
00:36:29,320 --> 00:36:32,710
are going to be there or at least it's

934
00:36:30,640 --> 00:36:34,450
gonna have a highly high chance of

935
00:36:32,710 --> 00:36:35,410
landing to an area that you just created

936
00:36:34,450 --> 00:36:39,819
with the subscribe and unsubscribe

937
00:36:35,410 --> 00:36:41,710
methods so this is I thought about

938
00:36:39,820 --> 00:36:43,450
releasing this tool and such but at the

939
00:36:41,710 --> 00:36:47,500
end of the day it's just an XML parser

940
00:36:43,450 --> 00:36:49,689
and an HT HTTP like thing like this is a

941
00:36:47,500 --> 00:36:51,280
great tool like great exercise for

942
00:36:49,690 --> 00:36:53,080
anyone to try if you're interested in

943
00:36:51,280 --> 00:36:54,310
like kind of like router stuff if you

944
00:36:53,080 --> 00:36:56,650
want to make something that's kind of

945
00:36:54,310 --> 00:36:58,180
like test your like just do something

946
00:36:56,650 --> 00:36:59,590
that you see over and over again this is

947
00:36:58,180 --> 00:37:01,540
a great way to do is where you just send

948
00:36:59,590 --> 00:37:03,730
a request and then you check to make

949
00:37:01,540 --> 00:37:05,050
sure the socket is up if it's not then

950
00:37:03,730 --> 00:37:06,820
you take the last request that you just

951
00:37:05,050 --> 00:37:08,740
sends to memory and you generate like a

952
00:37:06,820 --> 00:37:12,880
file or you just say what you what you

953
00:37:08,740 --> 00:37:25,330
sent so doing this save me so much more

954
00:37:12,880 --> 00:37:27,460
time so to wrap it all up this is my

955
00:37:25,330 --> 00:37:29,859
last thing so that was the fuzzing demo

956
00:37:27,460 --> 00:37:31,660
so all I did was just like kind of shown

957
00:37:29,859 --> 00:37:33,160
to me like well you know if I spend some

958
00:37:31,660 --> 00:37:35,589
time automating some of the stuff I do

959
00:37:33,160 --> 00:37:37,149
by hand it can increase my workflow and

960
00:37:35,590 --> 00:37:38,800
I can actually do both side by side

961
00:37:37,150 --> 00:37:41,680
where I've run on a bunch of test cases

962
00:37:38,800 --> 00:37:44,500
and then I also do it statically just to

963
00:37:41,680 --> 00:37:47,040
increase my workflow time so this is the

964
00:37:44,500 --> 00:37:50,320
end of it this is this is who I am now

965
00:37:47,040 --> 00:37:54,150
so I'm black owl I was here today

966
00:37:50,320 --> 00:37:57,190
researcher access intelligence I do

967
00:37:54,150 --> 00:37:59,590
embedded devices Soho smart devices

968
00:37:57,190 --> 00:38:01,300
whatever so this is my talk for blackhat

969
00:37:59,590 --> 00:38:02,950
that was again don't forget subscribe

970
00:38:01,300 --> 00:38:04,630
hit that like button hit the

971
00:38:02,950 --> 00:38:06,069
notification bell and until next time I

972
00:38:04,630 --> 00:38:07,500
see you guys have a good night

973
00:38:06,070 --> 00:38:14,610
[Music]

974
00:38:07,500 --> 00:38:14,610
[Applause]

