1
00:00:00,030 --> 00:00:04,589
well I wanted to introduce Colin but

2
00:00:02,370 --> 00:00:07,170
first my name is Feroz madhavi I work in

3
00:00:04,589 --> 00:00:08,519
the cloud and AI security team building

4
00:00:07,170 --> 00:00:11,160
machine learning protections for our

5
00:00:08,519 --> 00:00:12,599
security products I'm gonna be

6
00:00:11,160 --> 00:00:14,429
introducing Colin O'Brien

7
00:00:12,599 --> 00:00:16,948
Colin has been working in detection and

8
00:00:14,429 --> 00:00:19,800
response for his entire career he

9
00:00:16,949 --> 00:00:22,080
started his career at rapid7 and then

10
00:00:19,800 --> 00:00:24,210
moved to Dropbox where Karn Colin is

11
00:00:22,080 --> 00:00:26,729
currently working full time on his

12
00:00:24,210 --> 00:00:28,949
project grapple an open-source detection

13
00:00:26,730 --> 00:00:33,239
and response platform actually like

14
00:00:28,949 --> 00:00:36,630
Dropbox like two months ago but very

15
00:00:33,239 --> 00:00:44,190
close yeah everyone put our hands

16
00:00:36,630 --> 00:00:46,739
together for Colin thank you I am Colin

17
00:00:44,190 --> 00:00:48,329
O'Brien I've been working in incident

18
00:00:46,739 --> 00:00:51,328
detection response in some form or

19
00:00:48,329 --> 00:00:53,280
another for my entire career I started

20
00:00:51,329 --> 00:00:54,899
off at rapid7 and my first role there

21
00:00:53,280 --> 00:00:56,250
was actually on a data science team

22
00:00:54,899 --> 00:00:58,500
where we were trying to apply machine

23
00:00:56,250 --> 00:01:00,840
learning and sort of operationalize that

24
00:00:58,500 --> 00:01:02,250
as it applied to the logs that we were

25
00:01:00,840 --> 00:01:03,930
collecting for some of our products

26
00:01:02,250 --> 00:01:06,000
eventually I started working more

27
00:01:03,930 --> 00:01:07,439
directly on the insight IDR product

28
00:01:06,000 --> 00:01:09,630
building detection for customers

29
00:01:07,439 --> 00:01:12,210
building out scalable services and new

30
00:01:09,630 --> 00:01:14,220
features I decided that I wanted to get

31
00:01:12,210 --> 00:01:16,830
more hands-on experience in detection

32
00:01:14,220 --> 00:01:18,450
and response and so I left rapid7 and I

33
00:01:16,830 --> 00:01:21,450
started working for Dropbox where for

34
00:01:18,450 --> 00:01:23,700
two years I was working directly on the

35
00:01:21,450 --> 00:01:26,369
detection response team engaging with

36
00:01:23,700 --> 00:01:28,259
our red team having a lot of fun and

37
00:01:26,369 --> 00:01:30,720
really just seeing what kind of problems

38
00:01:28,259 --> 00:01:33,299
that team was trying to solve day to day

39
00:01:30,720 --> 00:01:34,829
these were a bunch of different types of

40
00:01:33,299 --> 00:01:36,689
roles and they taught me a lot about how

41
00:01:34,829 --> 00:01:39,360
different groups are trying to solve a

42
00:01:36,689 --> 00:01:40,619
lot of the same problems so today I want

43
00:01:39,360 --> 00:01:42,630
to talk about a project that I'm now

44
00:01:40,619 --> 00:01:45,180
working on full-time called grapple

45
00:01:42,630 --> 00:01:48,140
grapple is an open-source detection and

46
00:01:45,180 --> 00:01:51,149
response platform and it's really just

47
00:01:48,140 --> 00:01:53,369
main goal is to try to make data as easy

48
00:01:51,149 --> 00:01:56,189
to work with as easy to manage to query

49
00:01:53,369 --> 00:01:58,140
to join as possible and one of the ways

50
00:01:56,189 --> 00:02:00,000
that it does that is by leveraging the

51
00:01:58,140 --> 00:02:01,350
graph data structure so I want to talk

52
00:02:00,000 --> 00:02:02,759
about why I think that graphs are a

53
00:02:01,350 --> 00:02:03,899
really excellent abstraction and a

54
00:02:02,759 --> 00:02:06,090
really excellent fit for detection

55
00:02:03,899 --> 00:02:07,590
response and then prove that by showing

56
00:02:06,090 --> 00:02:10,170
you how grapple is actually able to

57
00:02:07,590 --> 00:02:12,209
leverage them I apologize in advance I'm

58
00:02:10,169 --> 00:02:13,410
gonna probably try to speak very quickly

59
00:02:12,209 --> 00:02:16,890
for some of these

60
00:02:13,410 --> 00:02:18,630
so I can get through everything so I

61
00:02:16,890 --> 00:02:21,209
like to start off with a graph like this

62
00:02:18,630 --> 00:02:22,350
this is a very sparse graph there's not

63
00:02:21,210 --> 00:02:24,510
a lot of data there's not a lot of

64
00:02:22,350 --> 00:02:26,510
labels in this we can talk about nodes

65
00:02:24,510 --> 00:02:29,489
really only in terms of their coloring

66
00:02:26,510 --> 00:02:30,959
but a graph like this can still express

67
00:02:29,490 --> 00:02:33,990
a lot of really interesting information

68
00:02:30,960 --> 00:02:35,640
in particular we can say things like the

69
00:02:33,990 --> 00:02:36,930
green node has a relationship with the

70
00:02:35,640 --> 00:02:38,579
blue node and the blue node with the

71
00:02:36,930 --> 00:02:40,740
purple node we can say that the green

72
00:02:38,580 --> 00:02:42,330
node has no direct relationship with the

73
00:02:40,740 --> 00:02:43,710
purple node but that there is a path

74
00:02:42,330 --> 00:02:45,600
between them and the reason why we can

75
00:02:43,710 --> 00:02:47,750
say these interesting things is because

76
00:02:45,600 --> 00:02:50,609
graphs are really excellent at encoding

77
00:02:47,750 --> 00:02:52,110
relationship type information into their

78
00:02:50,610 --> 00:02:54,180
structure this is one of the reasons why

79
00:02:52,110 --> 00:02:55,980
graphs are so powerful for things like

80
00:02:54,180 --> 00:02:59,040
data visualization but it's a much more

81
00:02:55,980 --> 00:03:00,510
general purpose property of the data

82
00:02:59,040 --> 00:03:03,630
structure really graphs are just

83
00:03:00,510 --> 00:03:05,730
excellent for anytime you have data with

84
00:03:03,630 --> 00:03:07,760
lots of relationship information and you

85
00:03:05,730 --> 00:03:10,410
want to talk about those relationships

86
00:03:07,760 --> 00:03:12,260
these relationship heavy work flows are

87
00:03:10,410 --> 00:03:14,700
found across a number of industries

88
00:03:12,260 --> 00:03:16,530
Google's search engine is powered by a

89
00:03:14,700 --> 00:03:18,929
graph Facebook's public interface is

90
00:03:16,530 --> 00:03:20,610
graph based graphs are powering powering

91
00:03:18,930 --> 00:03:22,860
machine learning library is like

92
00:03:20,610 --> 00:03:25,470
tensorflow and they also tend to sort of

93
00:03:22,860 --> 00:03:28,310
emerge from system so the internet and

94
00:03:25,470 --> 00:03:30,990
BGP are sort of these emergent graphs a

95
00:03:28,310 --> 00:03:33,959
little closer to home we see graphs

96
00:03:30,990 --> 00:03:35,850
leveraged for financial fraud and abuse

97
00:03:33,959 --> 00:03:37,770
detection answering questions like is

98
00:03:35,850 --> 00:03:41,459
this users identity stolen is this a

99
00:03:37,770 --> 00:03:43,560
shell company things like that so of

100
00:03:41,459 --> 00:03:45,480
course in the information security world

101
00:03:43,560 --> 00:03:46,890
as this entire workshop is really a

102
00:03:45,480 --> 00:03:49,140
testament to we're starting to see

103
00:03:46,890 --> 00:03:51,869
graphs gain a lot more attraction years

104
00:03:49,140 --> 00:03:53,640
ago John Lambert wrote this post and in

105
00:03:51,870 --> 00:03:55,620
it he states defenders think enlists

106
00:03:53,640 --> 00:03:58,500
attackers thicken graphs as long as this

107
00:03:55,620 --> 00:04:00,360
is true attackers win and in the post he

108
00:03:58,500 --> 00:04:02,130
gives a very concrete example of this

109
00:04:00,360 --> 00:04:04,290
list and graph based thinking he

110
00:04:02,130 --> 00:04:06,690
describes a situation where defenders

111
00:04:04,290 --> 00:04:07,829
are tasked with protecting a network one

112
00:04:06,690 --> 00:04:10,320
of the first things that they're going

113
00:04:07,830 --> 00:04:12,870
to start to do is create lists lists of

114
00:04:10,320 --> 00:04:15,090
domain admins lists of high-value assets

115
00:04:12,870 --> 00:04:16,890
of risky users of exposed services

116
00:04:15,090 --> 00:04:19,798
they're going to prioritize the work

117
00:04:16,890 --> 00:04:21,358
that they do based on those lists this

118
00:04:19,798 --> 00:04:23,280
is very different from how attackers go

119
00:04:21,358 --> 00:04:25,680
about doing their jobs attackers are

120
00:04:23,280 --> 00:04:26,559
opportunistically taking over whatever

121
00:04:25,680 --> 00:04:28,720
asset

122
00:04:26,560 --> 00:04:30,669
user they can manage to and they're

123
00:04:28,720 --> 00:04:33,520
going to leverage the capabilities they

124
00:04:30,669 --> 00:04:35,880
get from that to start moving across

125
00:04:33,520 --> 00:04:38,740
your network this could range from

126
00:04:35,880 --> 00:04:41,050
taking over a compromised email account

127
00:04:38,740 --> 00:04:43,030
and using that to fish other members of

128
00:04:41,050 --> 00:04:44,860
that organization or as Lambert talks

129
00:04:43,030 --> 00:04:46,479
about dumping credentials from memory

130
00:04:44,860 --> 00:04:48,669
using a tool like me me cats and then

131
00:04:46,480 --> 00:04:50,500
logging into other assets while the

132
00:04:48,669 --> 00:04:53,020
defenders are focused on these lists of

133
00:04:50,500 --> 00:04:54,700
isolated assets and users the attackers

134
00:04:53,020 --> 00:04:56,680
are focused on the trust boundaries

135
00:04:54,700 --> 00:04:58,960
relation trust relationships between

136
00:04:56,680 --> 00:05:01,419
them and how they can abuse those to

137
00:04:58,960 --> 00:05:03,489
take over more of the network according

138
00:05:01,419 --> 00:05:04,930
to Lambert this mismatch and approach is

139
00:05:03,490 --> 00:05:07,090
so significant that defenders simply

140
00:05:04,930 --> 00:05:09,460
cannot win without a major shift in how

141
00:05:07,090 --> 00:05:10,989
they think at the end of his post he has

142
00:05:09,460 --> 00:05:12,580
a quote that I like he says manage from

143
00:05:10,990 --> 00:05:14,620
reality because that is the prepared

144
00:05:12,580 --> 00:05:16,570
defenders mindset and so I think there's

145
00:05:14,620 --> 00:05:18,639
a more general statement being made here

146
00:05:16,570 --> 00:05:20,530
it's not graphs are the best data

147
00:05:18,639 --> 00:05:22,930
structure it's not lists or bad it's

148
00:05:20,530 --> 00:05:26,500
that when you have data that matches a

149
00:05:22,930 --> 00:05:28,660
reality the way that a graph Maps so

150
00:05:26,500 --> 00:05:30,430
nicely to a network or an attackers

151
00:05:28,660 --> 00:05:32,890
traversal map so nicely to a graph

152
00:05:30,430 --> 00:05:35,140
traversal you lose something when you

153
00:05:32,890 --> 00:05:36,760
force that data into another data

154
00:05:35,140 --> 00:05:38,200
structure and in this case we're losing

155
00:05:36,760 --> 00:05:41,500
that ability to talk about trust

156
00:05:38,200 --> 00:05:43,150
relationships one tool that very clearly

157
00:05:41,500 --> 00:05:45,310
demonstrates this shift in thinking is

158
00:05:43,150 --> 00:05:46,510
bloodhound it's gotten a couple of shout

159
00:05:45,310 --> 00:05:48,460
outs today for a reason

160
00:05:46,510 --> 00:05:50,260
and that's because bloodhound allows you

161
00:05:48,460 --> 00:05:52,870
to really shift the way you think about

162
00:05:50,260 --> 00:05:54,729
protecting your environment from asking

163
00:05:52,870 --> 00:05:57,460
questions like who are my domain admins

164
00:05:54,729 --> 00:05:59,830
to questions like how do I start cutting

165
00:05:57,460 --> 00:06:01,659
off paths from an unprivileged user to a

166
00:05:59,830 --> 00:06:03,700
domain admin and I think that that tool

167
00:06:01,660 --> 00:06:05,889
starts to reflect the reality of how

168
00:06:03,700 --> 00:06:09,760
attackers think about taking over these

169
00:06:05,889 --> 00:06:11,830
systems so in detection response the

170
00:06:09,760 --> 00:06:13,419
sort of primitive unit of information

171
00:06:11,830 --> 00:06:16,090
that we leverage is the log these

172
00:06:13,419 --> 00:06:18,099
representations of events across our

173
00:06:16,090 --> 00:06:19,539
networks we collect billions and

174
00:06:18,100 --> 00:06:22,210
billions of these logs every day and we

175
00:06:19,539 --> 00:06:24,190
store them in what's called a sim an

176
00:06:22,210 --> 00:06:26,049
event management system it's essentially

177
00:06:24,190 --> 00:06:30,090
a massive index or in many ways a

178
00:06:26,050 --> 00:06:32,410
massive list of individual isolated logs

179
00:06:30,090 --> 00:06:34,388
and we can take some of these logs down

180
00:06:32,410 --> 00:06:35,680
as we see here we have a couple of logs

181
00:06:34,389 --> 00:06:38,020
next to each other and we can see that

182
00:06:35,680 --> 00:06:39,909
they express properties about the events

183
00:06:38,020 --> 00:06:40,299
write a process execution will have

184
00:06:39,909 --> 00:06:42,849
things

185
00:06:40,300 --> 00:06:45,310
the pit and parent pit a timestamp may

186
00:06:42,849 --> 00:06:47,259
be a process name what the logs are

187
00:06:45,310 --> 00:06:49,990
failing to express is that these are not

188
00:06:47,259 --> 00:06:51,520
isolated individual events occurring

189
00:06:49,990 --> 00:06:53,440
throughout the network but in fact there

190
00:06:51,520 --> 00:06:55,659
are relationships between them a pit and

191
00:06:53,440 --> 00:06:58,120
one log is shared as a parent pit in

192
00:06:55,659 --> 00:07:00,729
another log we see IP addresses domains

193
00:06:58,120 --> 00:07:02,919
file names shared between them and when

194
00:07:00,729 --> 00:07:04,599
we start to pull these relationships out

195
00:07:02,919 --> 00:07:06,549
when we start to express our information

196
00:07:04,599 --> 00:07:08,770
as a graph it starts to match the

197
00:07:06,550 --> 00:07:11,229
reality of the underlying information a

198
00:07:08,770 --> 00:07:12,878
lot more closely we can reason about not

199
00:07:11,229 --> 00:07:14,710
just individual events and their

200
00:07:12,879 --> 00:07:18,460
properties but how they connect together

201
00:07:14,710 --> 00:07:20,710
and so a grapple really aims to take

202
00:07:18,460 --> 00:07:22,030
this graph oriented approach similar to

203
00:07:20,710 --> 00:07:25,150
what we've just seen on that last slide

204
00:07:22,030 --> 00:07:27,159
and use that as its foundation so what

205
00:07:25,150 --> 00:07:29,590
you would do is send raw logs up

206
00:07:27,159 --> 00:07:31,780
currently supporting system on or just a

207
00:07:29,590 --> 00:07:34,419
generic format that you can target it's

208
00:07:31,780 --> 00:07:36,309
going to turn those parsed logs into sub

209
00:07:34,419 --> 00:07:38,740
graph representations so a process

210
00:07:36,310 --> 00:07:41,229
execution log would generate a sub graph

211
00:07:38,740 --> 00:07:43,409
with a parent process note a child

212
00:07:41,229 --> 00:07:45,758
process note in an edge between them

213
00:07:43,409 --> 00:07:48,009
these sub graphs are going to go through

214
00:07:45,759 --> 00:07:49,419
some pre-processing and and in

215
00:07:48,009 --> 00:07:51,430
particular something called

216
00:07:49,419 --> 00:07:54,639
identification essentially we want to

217
00:07:51,430 --> 00:07:56,050
describe the actual identity behind

218
00:07:54,639 --> 00:07:58,240
these nodes rather than think about

219
00:07:56,050 --> 00:08:01,270
things in terms of pigs or process names

220
00:07:58,240 --> 00:08:03,159
in real time as this data is being

221
00:08:01,270 --> 00:08:05,409
streamed up and processed grapple will

222
00:08:03,159 --> 00:08:06,940
merge these sub graphs into its master

223
00:08:05,409 --> 00:08:08,229
graph so it's going to be this massive

224
00:08:06,940 --> 00:08:10,599
craft database describing all the

225
00:08:08,229 --> 00:08:13,900
entities and behaviors across your

226
00:08:10,599 --> 00:08:15,340
environments again in real-time grapple

227
00:08:13,900 --> 00:08:17,258
will execute and orchestrate the

228
00:08:15,340 --> 00:08:19,000
execution of your attack signatures or

229
00:08:17,259 --> 00:08:20,919
what it calls analyzers and these are

230
00:08:19,000 --> 00:08:22,919
going to look for suspicious sub graph

231
00:08:20,919 --> 00:08:25,210
patterns in this master graph and

232
00:08:22,919 --> 00:08:27,430
finally as grapple correlates those

233
00:08:25,210 --> 00:08:29,289
analyzers output together it's going to

234
00:08:27,430 --> 00:08:31,330
give you a tool for really drilling in

235
00:08:29,289 --> 00:08:32,708
and understanding the scope of what an

236
00:08:31,330 --> 00:08:34,448
attacker is doing your environment

237
00:08:32,708 --> 00:08:35,319
called an engagement and so I'm gonna

238
00:08:34,448 --> 00:08:37,870
talk about how these different

239
00:08:35,320 --> 00:08:40,959
components work but as you can see it's

240
00:08:37,870 --> 00:08:42,729
really very graph heavy we use logs only

241
00:08:40,958 --> 00:08:44,589
as this sort of underlying almost

242
00:08:42,729 --> 00:08:46,980
assembly language for building up these

243
00:08:44,589 --> 00:08:49,740
higher abstractions

244
00:08:46,980 --> 00:08:51,630
when I talk about graphs and grapple I'm

245
00:08:49,740 --> 00:08:53,550
really talking about what you see here

246
00:08:51,630 --> 00:08:55,260
these are representative schemas for

247
00:08:53,550 --> 00:08:57,390
what is currently supported in the

248
00:08:55,260 --> 00:09:00,360
master graph we have nodes like

249
00:08:57,390 --> 00:09:02,640
processes files connection nodes assets

250
00:09:00,360 --> 00:09:04,020
and users and we have properties on them

251
00:09:02,640 --> 00:09:06,240
that you would expect things like

252
00:09:04,020 --> 00:09:06,840
process having a name a file having a

253
00:09:06,240 --> 00:09:08,640
path

254
00:09:06,840 --> 00:09:10,740
there's also edges that are both

255
00:09:08,640 --> 00:09:12,689
explicit and implicit a process has

256
00:09:10,740 --> 00:09:14,160
children and as a corollary it has a

257
00:09:12,690 --> 00:09:17,340
parent which is the reverse of its

258
00:09:14,160 --> 00:09:19,589
children not shown here is the dynamic

259
00:09:17,340 --> 00:09:22,680
node that's used for plugins an example

260
00:09:19,590 --> 00:09:25,530
of a plug-in is I am building an AWS

261
00:09:22,680 --> 00:09:27,780
plug-in takes guard duty logs and it'll

262
00:09:25,530 --> 00:09:30,120
generate nodes like ec2 instance I am

263
00:09:27,780 --> 00:09:32,010
user nodes guard duty alert nodes and

264
00:09:30,120 --> 00:09:33,240
you can start querying those as well

265
00:09:32,010 --> 00:09:35,939
I'm not going to go into the plug-in

266
00:09:33,240 --> 00:09:38,630
system today but keep that in mind you

267
00:09:35,940 --> 00:09:41,040
can extend this very arbitrarily I

268
00:09:38,630 --> 00:09:43,350
mentioned identity earlier identity is

269
00:09:41,040 --> 00:09:46,380
really important to grapple and I think

270
00:09:43,350 --> 00:09:48,960
important in general logs don't express

271
00:09:46,380 --> 00:09:51,300
identity very well they tend to have

272
00:09:48,960 --> 00:09:52,950
things like pits or paths which are

273
00:09:51,300 --> 00:09:55,589
really just pseudo identifiers x' they

274
00:09:52,950 --> 00:09:57,840
can be reused app it gets recycled once

275
00:09:55,590 --> 00:09:59,670
a process has terminated and so if we

276
00:09:57,840 --> 00:10:01,380
have some logs that have the same pid'

277
00:09:59,670 --> 00:10:03,270
you might be tempted to believe that

278
00:10:01,380 --> 00:10:04,700
they're referring to the same entity but

279
00:10:03,270 --> 00:10:06,960
that's not necessarily the case

280
00:10:04,700 --> 00:10:09,420
instrumentation tools like sis Mon will

281
00:10:06,960 --> 00:10:10,920
apply things like process Goods grapple

282
00:10:09,420 --> 00:10:12,449
is going to do the same exact thing but

283
00:10:10,920 --> 00:10:15,300
it'll do it server-side and it's gonna

284
00:10:12,450 --> 00:10:16,320
do it past that log parsing phase which

285
00:10:15,300 --> 00:10:18,420
means it doesn't matter what the

286
00:10:16,320 --> 00:10:20,880
underlying log structure was it can be

287
00:10:18,420 --> 00:10:22,680
from OS X Linux Windows it doesn't

288
00:10:20,880 --> 00:10:26,189
matter it's going to map these two

289
00:10:22,680 --> 00:10:28,109
canonical identities this solves

290
00:10:26,190 --> 00:10:30,150
problems like paid collisions or being

291
00:10:28,110 --> 00:10:32,220
able to refer to a file that's been

292
00:10:30,150 --> 00:10:34,260
deleted and then recreated but when we

293
00:10:32,220 --> 00:10:36,150
combine that identity concept with our

294
00:10:34,260 --> 00:10:38,880
graph we get something really really

295
00:10:36,150 --> 00:10:41,280
powerful we can imagine a situation

296
00:10:38,880 --> 00:10:42,810
where we have this master graph on the

297
00:10:41,280 --> 00:10:46,560
right and that's going to have a single

298
00:10:42,810 --> 00:10:48,810
node with a pid' of 100 a process

299
00:10:46,560 --> 00:10:50,459
execution log comes in and it's going to

300
00:10:48,810 --> 00:10:53,160
generate this identified sub graph that

301
00:10:50,460 --> 00:10:55,200
gets merged in we can throw away that

302
00:10:53,160 --> 00:10:57,209
parent process ID we've already stored

303
00:10:55,200 --> 00:10:58,620
it before the type information doesn't

304
00:10:57,210 --> 00:11:00,110
have to be stored as a string it's just

305
00:10:58,620 --> 00:11:02,300
going to be encoded directly

306
00:11:00,110 --> 00:11:04,100
into our master graph we're starting to

307
00:11:02,300 --> 00:11:06,829
summarize our data and throw away

308
00:11:04,100 --> 00:11:09,050
redundancy and this effect really starts

309
00:11:06,829 --> 00:11:11,540
to compound quickly if that child

310
00:11:09,050 --> 00:11:13,099
process creates a file we can throw away

311
00:11:11,540 --> 00:11:14,959
things like the process name and the pit

312
00:11:13,100 --> 00:11:16,610
that are involved if it were then to

313
00:11:14,959 --> 00:11:18,260
subsequently read that file we're

314
00:11:16,610 --> 00:11:19,880
throwing away almost everything in that

315
00:11:18,260 --> 00:11:22,310
log because it's just redundant

316
00:11:19,880 --> 00:11:24,200
information this can lead to really

317
00:11:22,310 --> 00:11:26,209
significant like orders of magnitude

318
00:11:24,200 --> 00:11:27,980
better data storage properties and it

319
00:11:26,209 --> 00:11:30,260
goes to how grapples really intending to

320
00:11:27,980 --> 00:11:32,600
make the data as easy to use and to

321
00:11:30,260 --> 00:11:35,329
manage as possible next year when you

322
00:11:32,600 --> 00:11:37,310
double your data ingestion volume you're

323
00:11:35,329 --> 00:11:40,459
not gonna have to like buy a new license

324
00:11:37,310 --> 00:11:42,439
or like go crazy over like hard drives

325
00:11:40,459 --> 00:11:47,300
and things like that it should grow sub

326
00:11:42,440 --> 00:11:50,740
linearly with with your logs great so

327
00:11:47,300 --> 00:11:53,779
when it comes to detection I think that

328
00:11:50,740 --> 00:11:55,640
lawns and sims are what we've got right

329
00:11:53,779 --> 00:11:58,070
now and we can do a lot with them I

330
00:11:55,640 --> 00:12:00,709
think that Sims tend to punish you for

331
00:11:58,070 --> 00:12:02,570
trying to join across logs they make it

332
00:12:00,709 --> 00:12:05,029
slow if you actually search

333
00:12:02,570 --> 00:12:07,370
Splunk documentation for the sub search

334
00:12:05,029 --> 00:12:09,260
or joint commands you'll find that they

335
00:12:07,370 --> 00:12:11,420
can timeout and return and complete

336
00:12:09,260 --> 00:12:13,089
results so so there's some problems with

337
00:12:11,420 --> 00:12:15,170
how we're optimizing those joints I

338
00:12:13,089 --> 00:12:17,300
think this pushes us to create

339
00:12:15,170 --> 00:12:20,089
detections or attack signatures that are

340
00:12:17,300 --> 00:12:22,670
focused on one single log or a small

341
00:12:20,089 --> 00:12:24,800
very small group of logs and typically

342
00:12:22,670 --> 00:12:27,319
the properties expressed in those logs

343
00:12:24,800 --> 00:12:29,029
the problem with this is it it's brittle

344
00:12:27,320 --> 00:12:30,920
we end up building signatures around

345
00:12:29,029 --> 00:12:32,930
things like hashes IPs and domains in

346
00:12:30,920 --> 00:12:34,849
the worst case or in the best case we

347
00:12:32,930 --> 00:12:36,979
try to create proxies through our

348
00:12:34,850 --> 00:12:39,290
properties for behaviors things like a

349
00:12:36,980 --> 00:12:41,630
process name with command line arguments

350
00:12:39,290 --> 00:12:43,670
means that it's probably this behavior

351
00:12:41,630 --> 00:12:47,089
but again the attacker controls all of

352
00:12:43,670 --> 00:12:48,740
that information as an example we can

353
00:12:47,089 --> 00:12:51,470
take these two process creation logs

354
00:12:48,740 --> 00:12:53,720
here we have word and PowerShell

355
00:12:51,470 --> 00:12:55,670
executing there's no properties telling

356
00:12:53,720 --> 00:12:59,329
me that anything is wrong here these are

357
00:12:55,670 --> 00:13:01,189
both Microsoft signed digitally valid

358
00:12:59,329 --> 00:13:03,469
binaries right they are executing in the

359
00:13:01,190 --> 00:13:05,990
vast majority of environments again you

360
00:13:03,470 --> 00:13:07,519
can try to parse out the command line

361
00:13:05,990 --> 00:13:09,730
arguments for PowerShell but I think

362
00:13:07,519 --> 00:13:12,199
it's kind of brittle in a losing game as

363
00:13:09,730 --> 00:13:13,290
we've seen before the logs are actually

364
00:13:12,199 --> 00:13:15,689
hiding the info

365
00:13:13,290 --> 00:13:17,910
nation that we care about when we bring

366
00:13:15,690 --> 00:13:20,190
this out as a graph we can see that it's

367
00:13:17,910 --> 00:13:22,500
not anything to do with word executing

368
00:13:20,190 --> 00:13:24,509
our PowerShell executing it's the edge

369
00:13:22,500 --> 00:13:27,630
between them it's that word executed

370
00:13:24,509 --> 00:13:30,440
PowerShell and more fundamental to this

371
00:13:27,630 --> 00:13:33,480
attacker behavior is that there's a

372
00:13:30,440 --> 00:13:35,970
parent-child process relationship that

373
00:13:33,480 --> 00:13:38,250
is unexpected an attacker might go after

374
00:13:35,970 --> 00:13:39,930
excel or adobe reader or something that

375
00:13:38,250 --> 00:13:41,730
they haven't exploited for they may not

376
00:13:39,930 --> 00:13:43,138
spawn PowerShell it might be a command

377
00:13:41,730 --> 00:13:45,720
shell they might bring their own binary

378
00:13:43,139 --> 00:13:48,329
but what they almost certainly are going

379
00:13:45,720 --> 00:13:51,420
to do is start creating uncommon a

380
00:13:48,329 --> 00:13:53,670
typical process relationships what we

381
00:13:51,420 --> 00:13:57,509
want to start to do is represent attack

382
00:13:53,670 --> 00:13:58,709
behaviors more more to the core of what

383
00:13:57,509 --> 00:14:01,319
attackers are actually doing less

384
00:13:58,709 --> 00:14:03,449
constrained by properties we can still

385
00:14:01,319 --> 00:14:05,969
build property heavy subgraph

386
00:14:03,449 --> 00:14:08,790
descriptions things like Word or Adobe

387
00:14:05,970 --> 00:14:10,529
Reader or Excel spawning a child process

388
00:14:08,790 --> 00:14:12,120
that is not on some whitelist right we

389
00:14:10,529 --> 00:14:14,069
can leverage properties as we would with

390
00:14:12,120 --> 00:14:17,819
a graph but we can also build really

391
00:14:14,069 --> 00:14:20,069
strong just purely structural signatures

392
00:14:17,819 --> 00:14:22,500
I can ask what a dropper looks like it's

393
00:14:20,069 --> 00:14:25,319
a process that talks to an external IP

394
00:14:22,500 --> 00:14:28,050
address creates a file and execute that

395
00:14:25,319 --> 00:14:31,199
file we're starting to get to the heart

396
00:14:28,050 --> 00:14:33,269
of really true attacker behaviors that

397
00:14:31,199 --> 00:14:34,740
don't have to do with incidentals or

398
00:14:33,269 --> 00:14:37,769
artifacts of what they're what they're

399
00:14:34,740 --> 00:14:39,480
doing so at this point what we want to

400
00:14:37,769 --> 00:14:41,819
do is take these sub graphs and assign a

401
00:14:39,480 --> 00:14:43,800
label to them in this case a risk score

402
00:14:41,819 --> 00:14:45,630
this allows us to differentiate between

403
00:14:43,800 --> 00:14:47,430
something that's gonna happen quite

404
00:14:45,630 --> 00:14:49,370
often but it's still fundamental to an

405
00:14:47,430 --> 00:14:51,839
attacker like a parent-child

406
00:14:49,370 --> 00:14:54,389
relationship that's unique and then

407
00:14:51,839 --> 00:14:57,589
something much more suspicious like word

408
00:14:54,389 --> 00:14:59,639
with a non whitelisted child process

409
00:14:57,589 --> 00:15:01,680
really what we're doing here is just

410
00:14:59,639 --> 00:15:04,110
building up a really clean structured

411
00:15:01,680 --> 00:15:07,680
labelled data set we have this massive

412
00:15:04,110 --> 00:15:10,079
graph database that's now our label data

413
00:15:07,680 --> 00:15:11,550
set and so the natural next step is to

414
00:15:10,079 --> 00:15:13,258
start thinking about a model that we can

415
00:15:11,550 --> 00:15:15,240
feed this into and it doesn't have to be

416
00:15:13,259 --> 00:15:18,540
anything like a machine learning model

417
00:15:15,240 --> 00:15:20,069
it can be something very simple in this

418
00:15:18,540 --> 00:15:22,380
case what we're going to do is use

419
00:15:20,069 --> 00:15:24,329
something called a lens here we have an

420
00:15:22,380 --> 00:15:26,189
asset lens and what that's really saying

421
00:15:24,329 --> 00:15:29,699
is show me all of the risk

422
00:15:26,190 --> 00:15:32,040
subgraphs within the scope of this asset

423
00:15:29,699 --> 00:15:33,660
so like a user's laptop lenses could

424
00:15:32,040 --> 00:15:36,689
also be things like usernames or really

425
00:15:33,660 --> 00:15:38,850
any correlation point now we can look at

426
00:15:36,690 --> 00:15:40,949
otherwise isolated risks like the

427
00:15:38,850 --> 00:15:43,259
browser executing a file which is like

428
00:15:40,949 --> 00:15:44,160
really an attack signature but also

429
00:15:43,259 --> 00:15:46,620
something that's gonna happen all the

430
00:15:44,160 --> 00:15:49,639
time and see that it overlaps with a

431
00:15:46,620 --> 00:15:52,529
file being unpacked and executed or

432
00:15:49,639 --> 00:15:54,449
suspicious network traffic or dropper

433
00:15:52,529 --> 00:15:56,610
signature that sort of thing this is

434
00:15:54,449 --> 00:15:59,310
gonna build up a composite risk score

435
00:15:56,610 --> 00:16:01,980
attached to that lens we can not only

436
00:15:59,310 --> 00:16:03,569
look at all of the risks as they are

437
00:16:01,980 --> 00:16:05,220
isolated within this lens but we can

438
00:16:03,569 --> 00:16:07,800
also see how they overlap and because

439
00:16:05,220 --> 00:16:09,449
it's a graph they overlap by default if

440
00:16:07,800 --> 00:16:10,949
they're connected we can see that

441
00:16:09,449 --> 00:16:12,810
there's no extra operations to do

442
00:16:10,949 --> 00:16:16,349
correlation we just get that sort of

443
00:16:12,810 --> 00:16:18,989
thing for free the way that these

444
00:16:16,350 --> 00:16:21,449
attacks signatures are actually written

445
00:16:18,990 --> 00:16:24,300
and expressed in grapple is through the

446
00:16:21,449 --> 00:16:26,250
Python programming language I don't want

447
00:16:24,300 --> 00:16:29,160
to get into like a holy war between dsls

448
00:16:26,250 --> 00:16:31,769
and programming languages but my short

449
00:16:29,160 --> 00:16:33,839
feeling here is that in 10 years when

450
00:16:31,769 --> 00:16:35,970
attacker techniques have changed and

451
00:16:33,839 --> 00:16:38,490
when we have to start scaling and

452
00:16:35,970 --> 00:16:41,189
expressivity to really encompass those

453
00:16:38,490 --> 00:16:43,350
attacks I worry that a DSL created today

454
00:16:41,189 --> 00:16:44,730
is not going to do it but a language

455
00:16:43,350 --> 00:16:48,630
like Python that's so general-purpose

456
00:16:44,730 --> 00:16:50,730
might to actually deploy and create one

457
00:16:48,630 --> 00:16:52,290
of these real-time analyzers and grapple

458
00:16:50,730 --> 00:16:54,689
you just have to implement this base

459
00:16:52,290 --> 00:16:57,540
class it's really very simple you derive

460
00:16:54,689 --> 00:16:59,910
or sorry inherit from the analyzer base

461
00:16:57,540 --> 00:17:01,829
class and you implement two methods

462
00:16:59,910 --> 00:17:03,120
there's get queries and on response and

463
00:17:01,829 --> 00:17:05,250
they do pretty much what you would

464
00:17:03,120 --> 00:17:07,859
expect get queries in this case is

465
00:17:05,250 --> 00:17:10,079
returning a query for a process that is

466
00:17:07,859 --> 00:17:12,389
constrained by one of three process

467
00:17:10,079 --> 00:17:14,819
names and that process must have spawned

468
00:17:12,390 --> 00:17:17,280
any kind of child process we're not

469
00:17:14,819 --> 00:17:19,408
constraining that child process grapple

470
00:17:17,280 --> 00:17:21,449
is going to take that query it's going

471
00:17:19,409 --> 00:17:23,189
to optimize it in many cases it will

472
00:17:21,449 --> 00:17:25,140
determine that this query doesn't need

473
00:17:23,189 --> 00:17:27,089
to run against the latest master graft

474
00:17:25,140 --> 00:17:29,400
updates it'll ensure that it's a

475
00:17:27,089 --> 00:17:30,840
constant time query so that means that

476
00:17:29,400 --> 00:17:33,059
next year again when your data size

477
00:17:30,840 --> 00:17:34,918
doubles the query will run in the same

478
00:17:33,059 --> 00:17:36,418
amount of time and then when you get a

479
00:17:34,919 --> 00:17:38,520
response it will call the on response

480
00:17:36,419 --> 00:17:40,080
method we can perform subsequent

481
00:17:38,520 --> 00:17:42,059
analysis which I'll show in a moment

482
00:17:40,080 --> 00:17:46,499
or we can just assign a risk score and

483
00:17:42,059 --> 00:17:48,928
move on because this is Python we can

484
00:17:46,499 --> 00:17:50,700
build really powerful interfaces and

485
00:17:48,929 --> 00:17:52,769
build much more powerful types of

486
00:17:50,700 --> 00:17:55,529
analyzers here you can see that I'm

487
00:17:52,769 --> 00:17:59,100
leveraging this parent-child counter

488
00:17:55,529 --> 00:18:00,960
this is a specialized class in Python

489
00:17:59,100 --> 00:18:03,149
and it's gonna hide and encapsulate all

490
00:18:00,960 --> 00:18:04,649
of these implementation details and from

491
00:18:03,149 --> 00:18:06,899
the caller's perspective there's really

492
00:18:04,649 --> 00:18:09,119
not much complexity we're saying count

493
00:18:06,899 --> 00:18:11,340
all the times this parent child or

494
00:18:09,119 --> 00:18:14,070
parent process and child process go

495
00:18:11,340 --> 00:18:15,928
together in reality under the hood

496
00:18:14,070 --> 00:18:17,609
that's going to hit a Redis cache that's

497
00:18:15,929 --> 00:18:19,889
going to do all of these optimizations

498
00:18:17,609 --> 00:18:21,269
so that in the vast majority of cases it

499
00:18:19,889 --> 00:18:23,820
doesn't even hit the graph database

500
00:18:21,269 --> 00:18:27,869
keeping this very efficient essentially

501
00:18:23,820 --> 00:18:29,820
for free probably the single best part

502
00:18:27,869 --> 00:18:32,220
about leveraging a language like Python

503
00:18:29,820 --> 00:18:34,980
as opposed to a DSL or query language is

504
00:18:32,220 --> 00:18:37,950
how standard it is if you were to Google

505
00:18:34,980 --> 00:18:40,200
search Splunk unit test you would find

506
00:18:37,950 --> 00:18:42,269
that it is simply not supported there

507
00:18:40,200 --> 00:18:44,549
are some hacks around that but nothing's

508
00:18:42,269 --> 00:18:47,039
really gonna come close to just going to

509
00:18:44,549 --> 00:18:49,289
Python standard library and importing

510
00:18:47,039 --> 00:18:52,320
unit tests Python gives you things like

511
00:18:49,289 --> 00:18:55,200
static analyzers linters you can put

512
00:18:52,320 --> 00:18:57,600
your code in a github repo and in force

513
00:18:55,200 --> 00:19:00,090
you know a code review before pushing it

514
00:18:57,600 --> 00:19:02,480
out to your deployment and actually

515
00:19:00,090 --> 00:19:04,859
grapple has a plug-in to do exactly that

516
00:19:02,480 --> 00:19:06,239
this really goes towards alert

517
00:19:04,859 --> 00:19:09,539
management which i think is a very

518
00:19:06,239 --> 00:19:11,369
overlooked issue it's not uncommon for a

519
00:19:09,539 --> 00:19:13,859
team to have over a hundred different

520
00:19:11,369 --> 00:19:15,779
attack signatures easily and that could

521
00:19:13,859 --> 00:19:18,539
amount to thousands of lines of either

522
00:19:15,779 --> 00:19:19,889
your query language or Python but Sims

523
00:19:18,539 --> 00:19:21,869
and and vendors don't really make it

524
00:19:19,889 --> 00:19:24,779
very easy to test those out and ensure

525
00:19:21,869 --> 00:19:26,189
that your attack signatures today are

526
00:19:24,779 --> 00:19:27,629
going to work in six months after

527
00:19:26,190 --> 00:19:29,809
everyone's been tweaking them in little

528
00:19:27,629 --> 00:19:29,809
ways

529
00:19:30,710 --> 00:19:35,180
when it comes to investigations I think

530
00:19:33,170 --> 00:19:37,550
that the log based workflow can suffer

531
00:19:35,180 --> 00:19:39,170
in a couple of ways and I want to try to

532
00:19:37,550 --> 00:19:42,680
demonstrate that by doing sort of an

533
00:19:39,170 --> 00:19:44,480
example of a log based investigation so

534
00:19:42,680 --> 00:19:45,920
a log based investigation will probably

535
00:19:44,480 --> 00:19:48,980
get kicked off with something like an

536
00:19:45,920 --> 00:19:50,660
alert saying this log contains bad

537
00:19:48,980 --> 00:19:52,550
information and in this case we'll

538
00:19:50,660 --> 00:19:54,200
assume it's like some threat

539
00:19:52,550 --> 00:19:57,080
intelligence feed telling me the hash

540
00:19:54,200 --> 00:20:00,440
for this process is evil for whatever

541
00:19:57,080 --> 00:20:03,169
reason what I'll do is go to my sim

542
00:20:00,440 --> 00:20:04,790
I'll open a search window and I'll start

543
00:20:03,170 --> 00:20:07,160
saying things like I'm gonna search for

544
00:20:04,790 --> 00:20:09,260
this information over the last couple of

545
00:20:07,160 --> 00:20:10,670
hours right I'll say two hours keep the

546
00:20:09,260 --> 00:20:13,640
search windows small so I can iterate

547
00:20:10,670 --> 00:20:15,110
very quickly on my queries in a

548
00:20:13,640 --> 00:20:18,590
situation like this what I generally

549
00:20:15,110 --> 00:20:20,570
want to do is try to quickly see what

550
00:20:18,590 --> 00:20:22,340
the suspect process has done I'm not

551
00:20:20,570 --> 00:20:24,590
gonna like try to fully scope the attack

552
00:20:22,340 --> 00:20:26,209
behavior but just get a glimpse and then

553
00:20:24,590 --> 00:20:29,419
I want to trace it backwards and find

554
00:20:26,210 --> 00:20:31,190
where it came from so let's see what the

555
00:20:29,420 --> 00:20:33,080
process has done the only way I can

556
00:20:31,190 --> 00:20:35,870
really do that easily is just search for

557
00:20:33,080 --> 00:20:37,939
all of the logs with this pin and I get

558
00:20:35,870 --> 00:20:39,320
a whole bunch of logs back and I can see

559
00:20:37,940 --> 00:20:41,420
that it's doing some suspicious things

560
00:20:39,320 --> 00:20:43,610
right so time to trace it backwards I'll

561
00:20:41,420 --> 00:20:45,320
search for the parent pit what I get

562
00:20:43,610 --> 00:20:47,990
back is you know hundreds or thousands

563
00:20:45,320 --> 00:20:49,820
of logs and it turns out that the parent

564
00:20:47,990 --> 00:20:51,890
is some legitimate process like a

565
00:20:49,820 --> 00:20:54,290
schedule or something like launch D or

566
00:20:51,890 --> 00:20:56,510
crime what this is telling me is that

567
00:20:54,290 --> 00:20:58,670
the attacker has likely been on this

568
00:20:56,510 --> 00:21:01,910
asset for quite a while and they staged

569
00:20:58,670 --> 00:21:04,100
this to execute weeks or months in the

570
00:21:01,910 --> 00:21:06,710
future really just to mess with me and

571
00:21:04,100 --> 00:21:09,560
you'll see how effective they are at

572
00:21:06,710 --> 00:21:11,360
that so I can't pivot off of processes

573
00:21:09,560 --> 00:21:13,159
anymore to go backwards we've hit this

574
00:21:11,360 --> 00:21:15,260
stopping point so it's legitimate let's

575
00:21:13,160 --> 00:21:17,270
try to pivot off of the file I'll search

576
00:21:15,260 --> 00:21:19,610
for the hash and I don't get any logs

577
00:21:17,270 --> 00:21:21,650
I'll search for the file name and again

578
00:21:19,610 --> 00:21:23,780
I don't get any logs and this is because

579
00:21:21,650 --> 00:21:27,170
the attacker is aware of the fact that I

580
00:21:23,780 --> 00:21:29,810
have a very limited scope of logs I have

581
00:21:27,170 --> 00:21:32,540
to fight things like search query time I

582
00:21:29,810 --> 00:21:34,070
have to fight things like log storage at

583
00:21:32,540 --> 00:21:35,870
this point I only have one choice I'm

584
00:21:34,070 --> 00:21:38,540
going to have to expand my search window

585
00:21:35,870 --> 00:21:40,370
I'll start to see new logs come in

586
00:21:38,540 --> 00:21:42,110
maybe these are things that I actually

587
00:21:40,370 --> 00:21:44,449
care about like what created this file

588
00:21:42,110 --> 00:21:47,389
but I'm paying a very significant

589
00:21:44,450 --> 00:21:50,059
if the attacker created this scheduled

590
00:21:47,389 --> 00:21:52,279
task a month ago and I just went from a

591
00:21:50,059 --> 00:21:54,379
two-hour search window to a month long

592
00:21:52,279 --> 00:21:56,059
search window every subsequent query

593
00:21:54,379 --> 00:21:58,789
from here on out is hundreds of times

594
00:21:56,059 --> 00:22:01,070
slower what's even worse than this is

595
00:21:58,789 --> 00:22:02,960
that I am basically guaranteed to start

596
00:22:01,070 --> 00:22:05,178
running into a lot of process ID

597
00:22:02,960 --> 00:22:07,669
collisions you might have something like

598
00:22:05,179 --> 00:22:10,100
sis Mon if you're a window shop but in

599
00:22:07,669 --> 00:22:13,100
my experience with an actual attack or

600
00:22:10,100 --> 00:22:14,959
red team you're much more likely to have

601
00:22:13,100 --> 00:22:16,459
to jump out of system on at some point

602
00:22:14,960 --> 00:22:18,859
and start using pidz

603
00:22:16,460 --> 00:22:20,059
and really even after just an eight-hour

604
00:22:18,859 --> 00:22:21,470
search window you're just about

605
00:22:20,059 --> 00:22:24,168
guaranteed to start hitting pit

606
00:22:21,470 --> 00:22:26,869
recycling the other problem might be a

607
00:22:24,169 --> 00:22:29,029
little harder to see essentially I want

608
00:22:26,869 --> 00:22:32,119
to ask simple questions like what

609
00:22:29,029 --> 00:22:33,820
process created this process the only

610
00:22:32,119 --> 00:22:37,039
thing I can do is pivot off of that

611
00:22:33,820 --> 00:22:38,928
parent process ID and get all of the

612
00:22:37,039 --> 00:22:41,720
information back whether it's relevant

613
00:22:38,929 --> 00:22:44,119
or not a simple like process name would

614
00:22:41,720 --> 00:22:45,919
have been fine but instead we have to

615
00:22:44,119 --> 00:22:47,749
search over hundreds of logs same thing

616
00:22:45,919 --> 00:22:50,690
with the process or the file creation

617
00:22:47,749 --> 00:22:52,309
I'm trying to pivot to find what created

618
00:22:50,690 --> 00:22:54,559
the file instead I'm getting everything

619
00:22:52,309 --> 00:22:58,970
related to that file and I'm bounded to

620
00:22:54,559 --> 00:23:01,009
that search window so grapple takes a

621
00:22:58,970 --> 00:23:03,889
very different approach to this

622
00:23:01,009 --> 00:23:06,200
investigation process and it's inspired

623
00:23:03,889 --> 00:23:09,199
by what I see data scientists doing

624
00:23:06,200 --> 00:23:12,230
already data scientists have been doing

625
00:23:09,200 --> 00:23:13,970
this job for years and like it's just

626
00:23:12,230 --> 00:23:16,100
what they are experts at among other

627
00:23:13,970 --> 00:23:17,419
things one of the tools that they

628
00:23:16,100 --> 00:23:19,269
leverage for this is the Jupiter

629
00:23:17,419 --> 00:23:21,769
notebook it's sort of like a

630
00:23:19,269 --> 00:23:24,049
super-powered interactive Python

631
00:23:21,769 --> 00:23:26,179
environment it lets you execute Python

632
00:23:24,049 --> 00:23:28,609
code in little snippets you can go back

633
00:23:26,179 --> 00:23:31,580
and edit it inline markdown inline

634
00:23:28,609 --> 00:23:34,789
images really do all these crazy things

635
00:23:31,580 --> 00:23:36,199
and it's the tool of the trade for data

636
00:23:34,789 --> 00:23:37,429
scientists who are building up models

637
00:23:36,200 --> 00:23:39,320
who are cutting into huge amounts of

638
00:23:37,429 --> 00:23:41,769
data and trying to figure out what is

639
00:23:39,320 --> 00:23:41,769
going on

640
00:23:42,299 --> 00:23:46,469
so as an analyst what you'll do is

641
00:23:44,159 --> 00:23:48,599
you'll go to work and you'll sit down

642
00:23:46,469 --> 00:23:50,639
and you'll ask grapple what are the

643
00:23:48,599 --> 00:23:52,739
lenses and what are their risk scores

644
00:23:50,639 --> 00:23:54,539
for my environment right those lenses

645
00:23:52,739 --> 00:23:56,849
are going to be the the correlation

646
00:23:54,539 --> 00:23:58,440
points that join all of our risks

647
00:23:56,849 --> 00:24:01,049
together into something a little higher

648
00:23:58,440 --> 00:24:03,269
level I can see a bunch of assets here

649
00:24:01,049 --> 00:24:05,190
and they have disparate risk scores so

650
00:24:03,269 --> 00:24:07,409
most days I would just start from the

651
00:24:05,190 --> 00:24:09,059
top in this case for for the demo I'm

652
00:24:07,409 --> 00:24:12,239
going to just take a look at this third

653
00:24:09,059 --> 00:24:14,428
asset lens the desktop I click on the

654
00:24:12,239 --> 00:24:16,259
lens and what I get is a very compact

655
00:24:14,429 --> 00:24:18,599
graph representation we're not talking

656
00:24:16,259 --> 00:24:19,529
about a graph with hundreds or thousands

657
00:24:18,599 --> 00:24:21,269
or millions of nodes

658
00:24:19,529 --> 00:24:23,609
there's just three nodes because this is

659
00:24:21,269 --> 00:24:27,389
already a filtered summarized data

660
00:24:23,609 --> 00:24:30,208
source right this might have taken tens

661
00:24:27,389 --> 00:24:31,769
or hundreds of logs to represent but all

662
00:24:30,209 --> 00:24:34,200
of that data would be thrown away if it

663
00:24:31,769 --> 00:24:36,089
was redundant I can click on these

664
00:24:34,200 --> 00:24:37,739
different nodes I can see that there's

665
00:24:36,089 --> 00:24:39,029
risks attached to them different

666
00:24:37,739 --> 00:24:41,999
properties for them whatever has been

667
00:24:39,029 --> 00:24:45,209
collected if I click on this command ax

668
00:24:41,999 --> 00:24:47,789
C what I can see is that it's actually

669
00:24:45,209 --> 00:24:50,429
involved in two different analyzer

670
00:24:47,789 --> 00:24:53,369
outputs one is this sort of structural

671
00:24:50,429 --> 00:24:55,409
search which is any unique parent of a

672
00:24:53,369 --> 00:24:57,329
command host in this case the binary

673
00:24:55,409 --> 00:24:59,789
called dropper dot exe we've never seen

674
00:24:57,329 --> 00:25:02,359
that execute command before and the

675
00:24:59,789 --> 00:25:04,408
other is a much more property heavy

676
00:25:02,359 --> 00:25:07,259
analyzer which is going to say

677
00:25:04,409 --> 00:25:09,119
svchost.exe cuting with any parent

678
00:25:07,259 --> 00:25:10,190
process that isn't on a very strict

679
00:25:09,119 --> 00:25:13,320
whitelist

680
00:25:10,190 --> 00:25:16,649
these form together through this lens to

681
00:25:13,320 --> 00:25:18,479
build this composite risk score at this

682
00:25:16,649 --> 00:25:22,468
point what I want to do is open two

683
00:25:18,479 --> 00:25:23,729
browser windows sort of side by side one

684
00:25:22,469 --> 00:25:25,440
of those browser windows will have a

685
00:25:23,729 --> 00:25:26,849
jupiter notebook and you can see at the

686
00:25:25,440 --> 00:25:29,099
bottom one of those cells from the

687
00:25:26,849 --> 00:25:30,918
notebook I'm gonna create an engagement

688
00:25:29,099 --> 00:25:34,678
with a name and I'm gonna use that

689
00:25:30,919 --> 00:25:37,139
process ID or well the one for the SVC

690
00:25:34,679 --> 00:25:38,669
host that node key for it I'm gonna pull

691
00:25:37,139 --> 00:25:40,168
that into the engagement that's the

692
00:25:38,669 --> 00:25:42,959
starting point that I want to begin

693
00:25:40,169 --> 00:25:44,820
pivoting off of on the other screen I'm

694
00:25:42,959 --> 00:25:46,440
going to open up the lens for that new

695
00:25:44,820 --> 00:25:49,769
engagement and this is going to be a

696
00:25:46,440 --> 00:25:52,230
live updating graph visualization of the

697
00:25:49,769 --> 00:25:54,750
full scope of this attack

698
00:25:52,230 --> 00:25:56,730
and because this is a graph we can pivot

699
00:25:54,750 --> 00:25:58,679
extremely easily and extremely

700
00:25:56,730 --> 00:26:01,049
efficiently I don't have to guess

701
00:25:58,679 --> 00:26:03,600
through something like a pit or a

702
00:26:01,049 --> 00:26:06,179
process name I can say things like SVC

703
00:26:03,600 --> 00:26:08,428
host get parent this is a constant time

704
00:26:06,179 --> 00:26:10,710
operation again there's no search

705
00:26:08,429 --> 00:26:14,309
windows it doesn't matter if command dot

706
00:26:10,710 --> 00:26:16,080
exe launched a year ago there it's just

707
00:26:14,309 --> 00:26:17,940
it's the same query no matter what I'm

708
00:26:16,080 --> 00:26:22,260
not constraining it with timestamps or

709
00:26:17,940 --> 00:26:23,820
anything and so what we want to do is is

710
00:26:22,260 --> 00:26:25,408
what I said before we want to take a

711
00:26:23,820 --> 00:26:27,720
look at this process and then we want to

712
00:26:25,409 --> 00:26:29,669
start tracing it backwards so in our

713
00:26:27,720 --> 00:26:31,830
Jupiter notebook we'll do things like

714
00:26:29,669 --> 00:26:33,240
say once we've got that reference to the

715
00:26:31,830 --> 00:26:34,529
process in this case I'm calling it

716
00:26:33,240 --> 00:26:36,450
route but you can think of it as that

717
00:26:34,529 --> 00:26:39,659
SVC host will get it to children

718
00:26:36,450 --> 00:26:41,340
processes again these are all constant

719
00:26:39,659 --> 00:26:45,120
time operations that you see everywhere

720
00:26:41,340 --> 00:26:47,279
here so it's very very fast this route

721
00:26:45,120 --> 00:26:48,539
process this SVC host has shelled out

722
00:26:47,279 --> 00:26:50,460
three different times

723
00:26:48,539 --> 00:26:52,649
I'm not going to dig into that right now

724
00:26:50,460 --> 00:26:55,230
we can just start tracing that lineage

725
00:26:52,649 --> 00:26:57,059
back up will just keep getting the

726
00:26:55,230 --> 00:26:59,039
parent process will say get parent get

727
00:26:57,059 --> 00:27:00,510
parent right we'll get the parent again

728
00:26:59,039 --> 00:27:02,940
the great grandparent until we get back

729
00:27:00,510 --> 00:27:05,070
to Chrome and keep in mind that as I'm

730
00:27:02,940 --> 00:27:07,409
calling these get methods this

731
00:27:05,070 --> 00:27:12,000
visualization is live updating adding

732
00:27:07,409 --> 00:27:14,309
these new nodes into it so keep in mind

733
00:27:12,000 --> 00:27:16,320
that this this graph representation

734
00:27:14,309 --> 00:27:18,779
likely took over a hundred different

735
00:27:16,320 --> 00:27:21,330
logs in your sim it probably wouldn't

736
00:27:18,779 --> 00:27:23,909
have fit on a single page and certainly

737
00:27:21,330 --> 00:27:26,100
not in a single browser window instead

738
00:27:23,909 --> 00:27:28,350
we have a really compact information

739
00:27:26,100 --> 00:27:30,809
dense graph and it's not taking up a lot

740
00:27:28,350 --> 00:27:32,969
of room it's not super interconnected or

741
00:27:30,809 --> 00:27:34,260
noisy just showing us what we want to

742
00:27:32,970 --> 00:27:38,519
see it's showing us what the attacker

743
00:27:34,260 --> 00:27:40,769
has done and so at the end of your

744
00:27:38,519 --> 00:27:42,899
investigation process you're going to be

745
00:27:40,769 --> 00:27:46,200
left with these two things you're going

746
00:27:42,899 --> 00:27:48,299
to be left with a visualization which is

747
00:27:46,200 --> 00:27:50,190
very compact which you can show to other

748
00:27:48,299 --> 00:27:52,049
team members show to executives or

749
00:27:50,190 --> 00:27:53,909
managers rather than dumping thousands

750
00:27:52,049 --> 00:27:55,710
of logs on them or even show to other

751
00:27:53,909 --> 00:27:57,480
security teams I've had to go to a

752
00:27:55,710 --> 00:27:59,130
different security team before and say

753
00:27:57,480 --> 00:28:02,010
here's my timeline and here are the

754
00:27:59,130 --> 00:28:04,320
references into this like massive log

755
00:28:02,010 --> 00:28:05,730
search with thousands of logs in it like

756
00:28:04,320 --> 00:28:07,620
I can sit down with you and we can

757
00:28:05,730 --> 00:28:10,440
go through it or I could just give them

758
00:28:07,620 --> 00:28:12,629
a graph with maybe like two dozen nodes

759
00:28:10,440 --> 00:28:15,720
tops which will represent a good amount

760
00:28:12,630 --> 00:28:17,880
of any attackers scope the other thing

761
00:28:15,720 --> 00:28:21,120
that we have is our Jupiter notebook

762
00:28:17,880 --> 00:28:23,550
this is a codified representation of our

763
00:28:21,120 --> 00:28:25,739
investigation the fact that it's in code

764
00:28:23,550 --> 00:28:29,340
leads to a lot of potential a lot of

765
00:28:25,740 --> 00:28:31,320
opportunities for one thing I don't have

766
00:28:29,340 --> 00:28:32,850
to do the same work next time I can

767
00:28:31,320 --> 00:28:35,100
start building out my own custom

768
00:28:32,850 --> 00:28:38,370
abstractions I find myself doing this

769
00:28:35,100 --> 00:28:40,709
get lineage or rather get parent over

770
00:28:38,370 --> 00:28:42,689
and over again process right but I could

771
00:28:40,710 --> 00:28:45,090
implement a get lineage method on the

772
00:28:42,690 --> 00:28:47,490
process query or a helper function which

773
00:28:45,090 --> 00:28:49,439
can intelligently traverse that process

774
00:28:47,490 --> 00:28:51,480
tree backwards and now next time when I

775
00:28:49,440 --> 00:28:53,130
want to do that it's fast it's available

776
00:28:51,480 --> 00:28:56,250
and I can just keep it in my Jupiter

777
00:28:53,130 --> 00:28:58,140
notebook this can also act as training

778
00:28:56,250 --> 00:29:00,630
materials you have a new employee come

779
00:28:58,140 --> 00:29:02,460
in you can clear out the visualization

780
00:29:00,630 --> 00:29:04,890
you can say here was an interesting

781
00:29:02,460 --> 00:29:06,510
engagement that we had just play through

782
00:29:04,890 --> 00:29:10,380
it pivot off of the data see what you

783
00:29:06,510 --> 00:29:12,600
can find so a lot of this is really

784
00:29:10,380 --> 00:29:14,220
about trying to express the reality of

785
00:29:12,600 --> 00:29:16,560
the data right getting back to what

786
00:29:14,220 --> 00:29:18,510
Lambert said about expressing what

787
00:29:16,560 --> 00:29:20,429
attackers are doing attackers are

788
00:29:18,510 --> 00:29:21,629
spawning processes they're interacting

789
00:29:20,430 --> 00:29:24,180
with the network they're interacting

790
00:29:21,630 --> 00:29:26,220
with files it's extremely relationship

791
00:29:24,180 --> 00:29:28,470
heavy workflows from the attacker

792
00:29:26,220 --> 00:29:29,970
perspective and so when we start working

793
00:29:28,470 --> 00:29:33,000
with a data structure like a graph that

794
00:29:29,970 --> 00:29:34,170
can express them more concisely I think

795
00:29:33,000 --> 00:29:35,430
it makes it a lot easier to work with

796
00:29:34,170 --> 00:29:38,550
that data and see what's really

797
00:29:35,430 --> 00:29:40,530
happening I'm just gonna talk briefly

798
00:29:38,550 --> 00:29:42,629
about setting grapple up it's extremely

799
00:29:40,530 --> 00:29:44,879
simple before I get into that though I

800
00:29:42,630 --> 00:29:46,650
do want to say grapple is open source

801
00:29:44,880 --> 00:29:49,010
and it runs on AWS

802
00:29:46,650 --> 00:29:51,960
so really the goal here is to keep

803
00:29:49,010 --> 00:29:54,360
operational complexity as low as

804
00:29:51,960 --> 00:29:56,130
possible the code is there you can

805
00:29:54,360 --> 00:29:57,870
inspect it you can see it if there's a

806
00:29:56,130 --> 00:30:00,030
bug if there's a performance regression

807
00:29:57,870 --> 00:30:01,949
you can just go in there and find it on

808
00:30:00,030 --> 00:30:04,139
top of that it's gonna run on server

809
00:30:01,950 --> 00:30:06,540
lists infrastructure almost exclusively

810
00:30:04,140 --> 00:30:08,280
and that means that you don't have to

811
00:30:06,540 --> 00:30:09,990
worry about patching these systems you

812
00:30:08,280 --> 00:30:11,610
don't have to worry about scaling it

813
00:30:09,990 --> 00:30:14,400
will auto scale it'll do a lot of this

814
00:30:11,610 --> 00:30:17,159
work for you so to set it up you can

815
00:30:14,400 --> 00:30:19,170
clone the repository go to the cdk

816
00:30:17,160 --> 00:30:21,930
folder install some dependents

817
00:30:19,170 --> 00:30:24,150
these you will have to fill it a dot env

818
00:30:21,930 --> 00:30:25,740
file with a single parameter if there's

819
00:30:24,150 --> 00:30:28,050
some other optional ones as well around

820
00:30:25,740 --> 00:30:29,970
scaling but it's just a bucket prefect

821
00:30:28,050 --> 00:30:32,100
so in org name or something unique is

822
00:30:29,970 --> 00:30:34,080
fine at this point you run the deploy

823
00:30:32,100 --> 00:30:36,870
all script this is a non interactive

824
00:30:34,080 --> 00:30:38,939
script you can go browse the internet or

825
00:30:36,870 --> 00:30:41,340
grab a coffee it's about ten minutes and

826
00:30:38,940 --> 00:30:43,140
once it's done all of your

827
00:30:41,340 --> 00:30:44,820
infrastructure for grapple is up and

828
00:30:43,140 --> 00:30:46,860
running it's extremely easy to get up

829
00:30:44,820 --> 00:30:48,300
and started with there's only one more

830
00:30:46,860 --> 00:30:49,889
thing to do at this point we have to

831
00:30:48,300 --> 00:30:51,840
provision those schemas in our graph

832
00:30:49,890 --> 00:30:53,700
database which eventually I'll automate

833
00:30:51,840 --> 00:30:57,240
as well but for now you can go to the

834
00:30:53,700 --> 00:30:59,790
AWS console go to sage maker grapple has

835
00:30:57,240 --> 00:31:02,340
created this engagement notebook for you

836
00:30:59,790 --> 00:31:05,159
already you can clone the repository

837
00:31:02,340 --> 00:31:07,379
into that notebook or copy and paste

838
00:31:05,160 --> 00:31:10,170
this graph provision notebook into it

839
00:31:07,380 --> 00:31:12,540
and just hit the play button and at this

840
00:31:10,170 --> 00:31:15,210
point it is 100% set up it's ready for

841
00:31:12,540 --> 00:31:17,070
you to send data to it grapples repo

842
00:31:15,210 --> 00:31:20,070
comes with test data you can see that

843
00:31:17,070 --> 00:31:21,780
command dot exe that drop or dot exe in

844
00:31:20,070 --> 00:31:23,820
the data already through some system on

845
00:31:21,780 --> 00:31:27,720
logs you can run this script it'll send

846
00:31:23,820 --> 00:31:29,220
it up to your instance so hopefully I've

847
00:31:27,720 --> 00:31:31,470
been able to impress upon you why I

848
00:31:29,220 --> 00:31:33,900
think that graphs are such a strong fit

849
00:31:31,470 --> 00:31:36,150
for this sort of work relationships are

850
00:31:33,900 --> 00:31:38,610
just intrinsic both to how we work with

851
00:31:36,150 --> 00:31:40,170
our logs and how attackers are

852
00:31:38,610 --> 00:31:42,270
leveraging their capabilities against

853
00:31:40,170 --> 00:31:44,250
these systems when we can leverage a

854
00:31:42,270 --> 00:31:47,730
data structure like a graph to expose

855
00:31:44,250 --> 00:31:49,410
that we can work more efficiently so

856
00:31:47,730 --> 00:31:51,930
with that I'm not sure if I have time

857
00:31:49,410 --> 00:31:53,870
for questions I try to go as quickly as

858
00:31:51,930 --> 00:32:01,220
possible

859
00:31:53,870 --> 00:32:01,219
that's cool ok great find me around

860
00:32:01,260 --> 00:32:03,320
you

