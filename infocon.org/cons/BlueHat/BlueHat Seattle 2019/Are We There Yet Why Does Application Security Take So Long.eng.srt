1
00:00:00,280 --> 00:00:05,800
[Music]

2
00:00:01,939 --> 00:00:13,350
please welcome to the stage Chris

3
00:00:05,800 --> 00:00:16,390
[Music]

4
00:00:13,350 --> 00:00:17,980
welcome back if you thought you're gonna

5
00:00:16,390 --> 00:00:19,180
make it all the way through a security

6
00:00:17,980 --> 00:00:21,869
conference without hearing the words of

7
00:00:19,180 --> 00:00:24,610
DevOps I'm here to ruin that for you I

8
00:00:21,869 --> 00:00:26,860
want to talk about application security

9
00:00:24,610 --> 00:00:29,619
and specifically why it takes so long to

10
00:00:26,860 --> 00:00:32,348
fix security flaws anybody who's worked

11
00:00:29,619 --> 00:00:34,480
in any capacity with a development

12
00:00:32,348 --> 00:00:36,910
organization securing a product knows

13
00:00:34,480 --> 00:00:39,279
that it just takes way longer than you

14
00:00:36,910 --> 00:00:41,739
would expect to fix issues that you find

15
00:00:39,280 --> 00:00:44,770
and I want to use some data to actually

16
00:00:41,740 --> 00:00:46,240
dig into that this is a research report

17
00:00:44,770 --> 00:00:48,970
that my company Vera code released

18
00:00:46,240 --> 00:00:51,430
earlier this week it's the tenth version

19
00:00:48,970 --> 00:00:52,660
that we've done on this and as far as I

20
00:00:51,430 --> 00:00:54,460
know it's the largest study of

21
00:00:52,660 --> 00:00:56,349
application security findings anywhere

22
00:00:54,460 --> 00:00:59,260
I'll tell you how much data isn't it in

23
00:00:56,350 --> 00:01:01,180
just a moment we partnered up with data

24
00:00:59,260 --> 00:01:02,769
scientists at the San ta Institute who

25
00:01:01,180 --> 00:01:05,710
if you're not familiar with them they're

26
00:01:02,770 --> 00:01:08,680
the guys that originally did the Verizon

27
00:01:05,710 --> 00:01:10,839
D var and so from my perspective the

28
00:01:08,680 --> 00:01:12,430
most knowledgeable InfoSec data

29
00:01:10,840 --> 00:01:15,310
scientists there are out there it was

30
00:01:12,430 --> 00:01:17,909
great to work with them we do this

31
00:01:15,310 --> 00:01:19,990
report every year and we're in a unique

32
00:01:17,909 --> 00:01:23,590
position to do that because of the way

33
00:01:19,990 --> 00:01:26,109
that very code scans code we're a SAS

34
00:01:23,590 --> 00:01:28,270
based service so all the code that gets

35
00:01:26,109 --> 00:01:29,678
scanned in our platform is something

36
00:01:28,270 --> 00:01:31,119
that we can see so our customers run

37
00:01:29,679 --> 00:01:33,039
everything through us and then we can

38
00:01:31,119 --> 00:01:35,560
then mine that data and anonymize it

39
00:01:33,039 --> 00:01:37,420
slice it in whatever way we want and ask

40
00:01:35,560 --> 00:01:38,770
all sorts of questions about the

41
00:01:37,420 --> 00:01:41,140
behaviors that we're seeing the trends

42
00:01:38,770 --> 00:01:42,999
that we're seeing and so on our

43
00:01:41,140 --> 00:01:44,049
customers like to benchmark themselves

44
00:01:42,999 --> 00:01:45,908
against their peers they like to

45
00:01:44,049 --> 00:01:47,319
understand how they're doing and just in

46
00:01:45,909 --> 00:01:48,670
general understand the state of where

47
00:01:47,319 --> 00:01:53,619
the application security industry is

48
00:01:48,670 --> 00:01:56,920
going so for this particular report the

49
00:01:53,619 --> 00:01:58,450
data included 2300 customers at 12

50
00:01:56,920 --> 00:02:02,259
months of application scan data between

51
00:01:58,450 --> 00:02:05,649
April 1st 2018 and March 31st 2019 and

52
00:02:02,259 --> 00:02:08,160
that included over 85,000 unique

53
00:02:05,649 --> 00:02:10,750
applications many of which were scanned

54
00:02:08,160 --> 00:02:13,209
dozens hundreds even thousands of times

55
00:02:10,750 --> 00:02:16,209
so I don't know anywhere else that has

56
00:02:13,209 --> 00:02:19,240
that much real-world data about security

57
00:02:16,209 --> 00:02:21,909
bugs in software so we take that we

58
00:02:19,240 --> 00:02:23,650
actually start about six months ago and

59
00:02:21,909 --> 00:02:25,060
then there's a lot of number crunching

60
00:02:23,650 --> 00:02:26,400
that goes on we ask a lot of questions

61
00:02:25,060 --> 00:02:27,870
about the things

62
00:02:26,400 --> 00:02:29,159
we'd like to answer and then the data

63
00:02:27,870 --> 00:02:30,870
scientists come back and tell us whether

64
00:02:29,159 --> 00:02:34,470
or not we're crazy for wanting to try

65
00:02:30,870 --> 00:02:36,090
and answer some of those things so I

66
00:02:34,470 --> 00:02:38,730
want to start out by just acknowledging

67
00:02:36,090 --> 00:02:40,470
the biases in the report this is a

68
00:02:38,730 --> 00:02:42,659
technical audience this doesn't always

69
00:02:40,470 --> 00:02:46,739
make it in here but I think is important

70
00:02:42,659 --> 00:02:49,260
to at least acknowledge the biases any

71
00:02:46,739 --> 00:02:50,790
excuse to put this chart in but just a

72
00:02:49,260 --> 00:02:54,390
reminder that correlation does not equal

73
00:02:50,790 --> 00:02:56,129
causation and if I accidentally slip up

74
00:02:54,390 --> 00:02:58,500
and I say something results in or

75
00:02:56,129 --> 00:03:00,298
something is caused by please just

76
00:02:58,500 --> 00:03:02,670
mentally replace that in your head with

77
00:03:00,299 --> 00:03:06,659
correlates with I'm gonna do my best not

78
00:03:02,670 --> 00:03:08,608
to do that in any study of vulnerability

79
00:03:06,659 --> 00:03:10,980
data especially a code scanning data

80
00:03:08,609 --> 00:03:13,799
there's a selection bias this is of

81
00:03:10,980 --> 00:03:14,970
course data from our customers so they

82
00:03:13,799 --> 00:03:16,799
choose whether they want to become our

83
00:03:14,970 --> 00:03:18,900
customers they choose which applications

84
00:03:16,799 --> 00:03:21,540
they'd like to scan we have type 1 and

85
00:03:18,900 --> 00:03:23,129
type 2 experimental errors so false

86
00:03:21,540 --> 00:03:25,470
positives and false negatives in the

87
00:03:23,129 --> 00:03:26,939
code scanning parlance and then I

88
00:03:25,470 --> 00:03:29,489
couldn't come up with a term for it but

89
00:03:26,939 --> 00:03:31,410
capabilities bias the idea that we

90
00:03:29,489 --> 00:03:32,760
choose what we want to scan for we

91
00:03:31,410 --> 00:03:34,230
choose which languages we want to

92
00:03:32,760 --> 00:03:36,840
support we choose which frameworks we

93
00:03:34,230 --> 00:03:38,940
want to support and so of course that's

94
00:03:36,840 --> 00:03:40,829
going to cause some variation and the

95
00:03:38,940 --> 00:03:44,010
types of things we find compared to for

96
00:03:40,829 --> 00:03:45,060
example another tool vendor then you

97
00:03:44,010 --> 00:03:48,000
have this sort of like drawing

98
00:03:45,060 --> 00:03:49,379
conclusions biases we don't have all the

99
00:03:48,000 --> 00:03:51,150
information that we would like to have

100
00:03:49,379 --> 00:03:52,649
about a given application so we don't

101
00:03:51,150 --> 00:03:54,060
know what development development

102
00:03:52,650 --> 00:03:56,069
methodology they were using we don't

103
00:03:54,060 --> 00:03:57,780
know how old the application is we don't

104
00:03:56,069 --> 00:03:59,940
necessarily know how critical it is to

105
00:03:57,780 --> 00:04:01,260
the business we asked for some of that

106
00:03:59,940 --> 00:04:04,260
data but we don't always get it because

107
00:04:01,260 --> 00:04:07,019
it's optional so we ended up aggregating

108
00:04:04,260 --> 00:04:09,569
a lot of that data together and so you

109
00:04:07,019 --> 00:04:11,519
see a lot of averages or medians and and

110
00:04:09,569 --> 00:04:14,190
simply that's the best that we can do

111
00:04:11,519 --> 00:04:17,970
with the data that we have and then

112
00:04:14,190 --> 00:04:21,449
finally there's a tendency to look at

113
00:04:17,970 --> 00:04:23,340
data and you're looking at the what but

114
00:04:21,449 --> 00:04:24,510
you really want to answer the why and so

115
00:04:23,340 --> 00:04:26,039
sometimes we draw that our own

116
00:04:24,510 --> 00:04:27,870
conclusions are ahead about why things

117
00:04:26,039 --> 00:04:29,280
happen a certain way things take a long

118
00:04:27,870 --> 00:04:31,320
time to fix because developers don't

119
00:04:29,280 --> 00:04:33,780
care or you know that one of my least

120
00:04:31,320 --> 00:04:34,979
favorite things to hear when in reality

121
00:04:33,780 --> 00:04:36,719
it's probably there's just not enough

122
00:04:34,979 --> 00:04:39,539
budget for it or there's a release

123
00:04:36,719 --> 00:04:40,659
deadline or things that we just can't

124
00:04:39,539 --> 00:04:43,190
see by looking at the day

125
00:04:40,660 --> 00:04:46,550
okay so let's get into it that's those

126
00:04:43,190 --> 00:04:49,960
are the biases keep those in mind so

127
00:04:46,550 --> 00:04:52,280
this is a 50 some-odd page report and

128
00:04:49,960 --> 00:04:54,409
really what I want to focus on here is

129
00:04:52,280 --> 00:04:58,628
fixed behavior and I want to tie that

130
00:04:54,409 --> 00:05:01,099
into what we can observe about DevOps

131
00:04:58,629 --> 00:05:03,470
the security community in general has

132
00:05:01,099 --> 00:05:04,940
had kind of a mixed reaction to DevOps

133
00:05:03,470 --> 00:05:06,949
some people hate it because it moves so

134
00:05:04,940 --> 00:05:08,509
quickly and therefore security can't

135
00:05:06,949 --> 00:05:11,360
insert itself at all the traditional

136
00:05:08,509 --> 00:05:13,400
places that it always has and so we want

137
00:05:11,360 --> 00:05:14,150
to understand for companies that are

138
00:05:13,400 --> 00:05:15,590
doing DevOps

139
00:05:14,150 --> 00:05:17,090
how does that actually affect fixed

140
00:05:15,590 --> 00:05:18,830
behavior is it positive is it negative

141
00:05:17,090 --> 00:05:20,239
are there things that we can look for

142
00:05:18,830 --> 00:05:22,490
with different different ways we can

143
00:05:20,240 --> 00:05:27,199
approach it to make DevOps and security

144
00:05:22,490 --> 00:05:29,810
play nicely together so at the very

145
00:05:27,199 --> 00:05:32,690
highest possible level we do find that

146
00:05:29,810 --> 00:05:35,330
most flaws in software that we detect

147
00:05:32,690 --> 00:05:37,340
are fixed eventually and we can break

148
00:05:35,330 --> 00:05:39,139
this down a number of different ways we

149
00:05:37,340 --> 00:05:40,729
have different severity a flaw obviously

150
00:05:39,139 --> 00:05:43,569
severity five being the highest and we

151
00:05:40,729 --> 00:05:45,680
find that 75% of those flaws get fixed

152
00:05:43,569 --> 00:05:48,409
eventually I'm gonna get back into the

153
00:05:45,680 --> 00:05:50,180
the timings in a minute I think who have

154
00:05:48,409 --> 00:05:53,000
severe ephors you have sans 25 which is

155
00:05:50,180 --> 00:05:55,009
a common taxonomy a wash top ten I think

156
00:05:53,000 --> 00:05:57,680
most people are familiar with and then

157
00:05:55,009 --> 00:06:00,139
overall you see that overall 56% of

158
00:05:57,680 --> 00:06:02,690
flaws do get fixed but that doesn't give

159
00:06:00,139 --> 00:06:04,669
us any sense of timing it doesn't tell

160
00:06:02,690 --> 00:06:06,529
us the probability that something will

161
00:06:04,669 --> 00:06:08,539
get fixed it doesn't tell us how those

162
00:06:06,529 --> 00:06:09,770
things are being prioritized and why

163
00:06:08,539 --> 00:06:13,460
something gets fixed and this other

164
00:06:09,770 --> 00:06:16,460
thing does not and so we employ a

165
00:06:13,460 --> 00:06:18,049
technique called survival analysis to

166
00:06:16,460 --> 00:06:20,150
give us a little bit more richness in

167
00:06:18,050 --> 00:06:22,400
the data and survival analysis is a

168
00:06:20,150 --> 00:06:24,279
statistical technique often used in

169
00:06:22,400 --> 00:06:26,029
medical studies manufacturing studies

170
00:06:24,279 --> 00:06:27,830
essentially what it does is it takes

171
00:06:26,029 --> 00:06:30,650
into account events that happen as well

172
00:06:27,830 --> 00:06:33,080
as events that don't happen so closing a

173
00:06:30,650 --> 00:06:36,679
flaw or not closing a flaw I'll give you

174
00:06:33,080 --> 00:06:39,948
a kind of a tactical or tangible example

175
00:06:36,680 --> 00:06:42,409
so imagine you're tracking 10 security

176
00:06:39,949 --> 00:06:45,319
bugs in an application and then after

177
00:06:42,409 --> 00:06:48,319
the first week you close two of those so

178
00:06:45,319 --> 00:06:52,339
your average closed time for a flaw is a

179
00:06:48,319 --> 00:06:54,249
week right now fast forward six months

180
00:06:52,339 --> 00:06:56,739
later you still only fix

181
00:06:54,249 --> 00:06:59,619
two of those flaws your average fixed

182
00:06:56,739 --> 00:07:01,029
time for a flaw is still a week so

183
00:06:59,619 --> 00:07:02,469
you're not getting the full picture

184
00:07:01,029 --> 00:07:05,169
right you're not getting information

185
00:07:02,469 --> 00:07:06,789
about those other eight how long they're

186
00:07:05,169 --> 00:07:07,899
lingering out there and what's the

187
00:07:06,789 --> 00:07:10,329
likelihood that they're actually going

188
00:07:07,899 --> 00:07:14,429
to get fixed so when we apply the

189
00:07:10,329 --> 00:07:17,259
survival analysis technique we get this

190
00:07:14,429 --> 00:07:19,208
cool picture that we're calling the flaw

191
00:07:17,259 --> 00:07:20,709
persistence curve or flaw survival curve

192
00:07:19,209 --> 00:07:22,389
and what it shows you on the vertical

193
00:07:20,709 --> 00:07:24,339
axis is what's the probability that a

194
00:07:22,389 --> 00:07:25,689
particular flaw a particular finding is

195
00:07:24,339 --> 00:07:28,059
still going to be open after a certain

196
00:07:25,689 --> 00:07:30,549
amount of time and so there's a number

197
00:07:28,059 --> 00:07:31,839
of points on that chart that have some

198
00:07:30,549 --> 00:07:33,849
significance but the one that I care

199
00:07:31,839 --> 00:07:38,889
about the most really is the the closed

200
00:07:33,849 --> 00:07:40,209
median so what's the 50% mark 50% of

201
00:07:38,889 --> 00:07:41,949
close findings were mediated in the

202
00:07:40,209 --> 00:07:44,409
first two months and so a number of the

203
00:07:41,949 --> 00:07:45,939
charts that we're going to look at in

204
00:07:44,409 --> 00:07:49,239
subsequent slides are going to be around

205
00:07:45,939 --> 00:07:51,579
the median time to remediate there's an

206
00:07:49,239 --> 00:07:52,959
average there's invent medians but the

207
00:07:51,579 --> 00:07:56,349
one I think is most meaningful in this

208
00:07:52,959 --> 00:07:58,119
context is the median fixed time so when

209
00:07:56,349 --> 00:08:00,159
we do this survival analysis and then we

210
00:07:58,119 --> 00:08:02,949
can kind of slice the data in a number

211
00:08:00,159 --> 00:08:05,019
of different other other axes we can do

212
00:08:02,949 --> 00:08:07,299
things like this we can say all right

213
00:08:05,019 --> 00:08:09,039
break it down by flaw category and show

214
00:08:07,299 --> 00:08:10,808
me what the range of fixed time is

215
00:08:09,039 --> 00:08:13,739
across each of these different

216
00:08:10,809 --> 00:08:18,419
categories and so the dots on the chart

217
00:08:13,739 --> 00:08:20,859
represent the 25% 50% and 75% close mark

218
00:08:18,419 --> 00:08:22,389
so for example if I look at

219
00:08:20,860 --> 00:08:24,309
authentication issues at the top there

220
00:08:22,389 --> 00:08:27,279
which is the fastest time to fix I can

221
00:08:24,309 --> 00:08:29,559
see that the 25% are closed after a few

222
00:08:27,279 --> 00:08:33,039
days you get to that median point after

223
00:08:29,559 --> 00:08:35,319
like you know it's just under 30 days

224
00:08:33,039 --> 00:08:37,958
and then there's a kind of a long tail

225
00:08:35,318 --> 00:08:40,179
before you get to the 75% close mark and

226
00:08:37,958 --> 00:08:41,198
remember not everything is closed so

227
00:08:40,179 --> 00:08:44,019
there's not there's not a hundred

228
00:08:41,198 --> 00:08:45,309
percent mark on any of these and the

229
00:08:44,019 --> 00:08:46,480
most interesting thing about this other

230
00:08:45,309 --> 00:08:50,500
than just sort of like visually

231
00:08:46,480 --> 00:08:52,990
depicting which flaw categories get the

232
00:08:50,500 --> 00:08:55,149
most attention really is that the high

233
00:08:52,990 --> 00:08:56,740
profile issues that a security team or

234
00:08:55,149 --> 00:08:58,480
security practitioner would typically

235
00:08:56,740 --> 00:09:00,639
prioritize are not necessarily the

236
00:08:58,480 --> 00:09:02,199
fastest ones to get fixed so you look

237
00:09:00,639 --> 00:09:05,230
way down on the list you've got sequel

238
00:09:02,199 --> 00:09:07,520
injection with the long tail sticking

239
00:09:05,230 --> 00:09:10,310
way out there at 240

240
00:09:07,520 --> 00:09:12,050
some odd days it's very long for

241
00:09:10,310 --> 00:09:14,900
something that is so often associated

242
00:09:12,050 --> 00:09:16,579
with breaches and and data loss across

243
00:09:14,900 --> 00:09:20,480
that scripting another one that you know

244
00:09:16,580 --> 00:09:21,680
just about any you know any security

245
00:09:20,480 --> 00:09:23,480
team is going to put pressure on their

246
00:09:21,680 --> 00:09:25,699
web development team to fix it's also

247
00:09:23,480 --> 00:09:26,780
very slow on the list compared to some

248
00:09:25,700 --> 00:09:30,700
of these other other things that we

249
00:09:26,780 --> 00:09:30,699
might not consider to be as important

250
00:09:31,660 --> 00:09:35,089
one thing we started doing in the

251
00:09:33,680 --> 00:09:37,670
previous volume of this report and we

252
00:09:35,090 --> 00:09:41,570
continue doing this time is we just did

253
00:09:37,670 --> 00:09:44,569
these same charts 25 50 75 percent

254
00:09:41,570 --> 00:09:46,370
survival charts on just different

255
00:09:44,570 --> 00:09:48,860
factors that we could measure just try

256
00:09:46,370 --> 00:09:51,710
and figure out is there a certain factor

257
00:09:48,860 --> 00:09:53,990
that that outweighs all the rest and we

258
00:09:51,710 --> 00:09:55,670
would think that flaw severity like how

259
00:09:53,990 --> 00:09:58,520
critical that flaw is how dangerous that

260
00:09:55,670 --> 00:10:02,120
fall is would have a strong correlation

261
00:09:58,520 --> 00:10:04,100
to fix time and it turns out that it

262
00:10:02,120 --> 00:10:05,840
really doesn't I mean it they do

263
00:10:04,100 --> 00:10:07,520
slightly move from left to right there

264
00:10:05,840 --> 00:10:09,860
right though you do have a longer fix

265
00:10:07,520 --> 00:10:13,970
times for the lows but look at the long

266
00:10:09,860 --> 00:10:16,310
tail for highs even a very high critical

267
00:10:13,970 --> 00:10:20,270
severity flaw you're looking at almost

268
00:10:16,310 --> 00:10:21,979
150 days to hit that 75% mark so the

269
00:10:20,270 --> 00:10:24,199
theory that flaw severity would

270
00:10:21,980 --> 00:10:27,230
contribute really heavily to fix time

271
00:10:24,200 --> 00:10:29,300
just didn't play out we repeated this

272
00:10:27,230 --> 00:10:32,060
analysis with other metrics such as

273
00:10:29,300 --> 00:10:34,010
exploitability which is a which is an

274
00:10:32,060 --> 00:10:35,810
estimation honestly based on our

275
00:10:34,010 --> 00:10:39,170
analysis and then business criticality

276
00:10:35,810 --> 00:10:41,060
of the app based on the the metadata

277
00:10:39,170 --> 00:10:43,430
that the customer gives us and we saw

278
00:10:41,060 --> 00:10:47,589
similar lack of correlation we just

279
00:10:43,430 --> 00:10:50,180
didn't see anywhere where like a very

280
00:10:47,590 --> 00:10:52,040
highly business critical application

281
00:10:50,180 --> 00:10:57,339
just had fixes done really quickly it

282
00:10:52,040 --> 00:11:00,550
nothing really made sense and we can

283
00:10:57,340 --> 00:11:04,520
visualize again the different categories

284
00:11:00,550 --> 00:11:06,709
in terms of their urgency in a different

285
00:11:04,520 --> 00:11:08,780
way here so on the horizontal axis I'm

286
00:11:06,710 --> 00:11:10,550
showing the fix rate it starts at 40%

287
00:11:08,780 --> 00:11:13,160
here on the left by the way and it goes

288
00:11:10,550 --> 00:11:15,650
up to 100% so this says what percentage

289
00:11:13,160 --> 00:11:18,140
of those category of flaws eventually

290
00:11:15,650 --> 00:11:20,390
get fixed and then on the vertical axis

291
00:11:18,140 --> 00:11:22,370
kind of shows you the amount of time to

292
00:11:20,390 --> 00:11:25,010
to that median time to remediation that

293
00:11:22,370 --> 00:11:26,240
I talked about before and so when you

294
00:11:25,010 --> 00:11:27,590
map them like this and then you kind of

295
00:11:26,240 --> 00:11:28,850
put these labels you divide the chart

296
00:11:27,590 --> 00:11:31,340
into quadrants you can kind of see

297
00:11:28,850 --> 00:11:33,530
what's getting targeted so targeted

298
00:11:31,340 --> 00:11:35,060
meaning it's getting fixed quickly but

299
00:11:33,530 --> 00:11:37,280
not all of its getting fixed you're kind

300
00:11:35,060 --> 00:11:39,410
of picking and choosing which ones as

301
00:11:37,280 --> 00:11:42,530
opposed to prioritize it's being done

302
00:11:39,410 --> 00:11:45,110
quickly and it's being done to a high

303
00:11:42,530 --> 00:11:47,089
degree of completion and then everything

304
00:11:45,110 --> 00:11:49,370
above it like the further you go up the

305
00:11:47,090 --> 00:11:50,900
chart the longer things take and over

306
00:11:49,370 --> 00:11:52,400
here on the far right upper right corner

307
00:11:50,900 --> 00:11:54,890
are the things that are just deferred

308
00:11:52,400 --> 00:11:56,510
like they do get fixed eventually and

309
00:11:54,890 --> 00:11:58,670
they they get fixed

310
00:11:56,510 --> 00:11:59,960
you know almost to completion and then

311
00:11:58,670 --> 00:12:01,760
over here you have the things that just

312
00:11:59,960 --> 00:12:03,380
take forever and they're not covered

313
00:12:01,760 --> 00:12:05,330
very well so it's an interesting way to

314
00:12:03,380 --> 00:12:07,250
look at it and again you don't you don't

315
00:12:05,330 --> 00:12:10,610
find the categories that you would

316
00:12:07,250 --> 00:12:12,980
expect to pop into the prioritized

317
00:12:10,610 --> 00:12:14,840
section showing up down there at all in

318
00:12:12,980 --> 00:12:16,310
fact there's not a whole lot down there

319
00:12:14,840 --> 00:12:18,470
to begin with right most of the stuff

320
00:12:16,310 --> 00:12:20,510
it's kind of in the neglected or

321
00:12:18,470 --> 00:12:23,630
targeted area so that was that was kind

322
00:12:20,510 --> 00:12:25,850
of interesting and we introduced the

323
00:12:23,630 --> 00:12:27,410
concept of security debt in this report

324
00:12:25,850 --> 00:12:29,870
and it's something that we I think I'll

325
00:12:27,410 --> 00:12:31,790
use anecdotally from time to time but

326
00:12:29,870 --> 00:12:33,290
essentially we like to think about it

327
00:12:31,790 --> 00:12:35,630
like financial debt right if you have a

328
00:12:33,290 --> 00:12:37,370
credit card and you charge something on

329
00:12:35,630 --> 00:12:38,630
it and then you only pay the minimum the

330
00:12:37,370 --> 00:12:40,640
minimum you know balance every month

331
00:12:38,630 --> 00:12:42,410
you're going to continue to accumulate

332
00:12:40,640 --> 00:12:44,569
more and more debt and it's going to be

333
00:12:42,410 --> 00:12:46,219
harder and harder for you to to get out

334
00:12:44,570 --> 00:12:50,590
from under that well the same thing

335
00:12:46,220 --> 00:12:54,650
applies to - security - security flaws

336
00:12:50,590 --> 00:12:56,930
we looked at in Volume one of our report

337
00:12:54,650 --> 00:12:58,670
compared to volume ten the average fixed

338
00:12:56,930 --> 00:13:00,229
time for a flaw and we can see that it

339
00:12:58,670 --> 00:13:02,660
actually tripled from fifty nine days to

340
00:13:00,230 --> 00:13:05,210
one hundred to 71 days however the

341
00:13:02,660 --> 00:13:08,240
median in the current report is still 59

342
00:13:05,210 --> 00:13:09,650
days the reason it's increased like that

343
00:13:08,240 --> 00:13:11,690
the reason the average is increased like

344
00:13:09,650 --> 00:13:13,280
that is because of security debt these

345
00:13:11,690 --> 00:13:15,770
are all the flaws that I find out about

346
00:13:13,280 --> 00:13:18,650
and then I defer and so by the time I

347
00:13:15,770 --> 00:13:19,939
actually do close them the average the

348
00:13:18,650 --> 00:13:23,030
average closed time ends up being really

349
00:13:19,940 --> 00:13:24,800
long now the 59 day median I think is

350
00:13:23,030 --> 00:13:26,630
the more accurate number in terms of

351
00:13:24,800 --> 00:13:28,490
understanding like how long you know

352
00:13:26,630 --> 00:13:30,170
does it take for a particular flaw to

353
00:13:28,490 --> 00:13:32,550
get fixed so the average time just kind

354
00:13:30,170 --> 00:13:34,500
of depicts everything that were

355
00:13:32,550 --> 00:13:38,939
accruing interest on and actually not

356
00:13:34,500 --> 00:13:40,920
paying down this using the same type of

357
00:13:38,940 --> 00:13:43,460
analysis shows you what's the chance

358
00:13:40,920 --> 00:13:45,540
that if law gets fixed over time and

359
00:13:43,460 --> 00:13:50,910
this was really interesting because what

360
00:13:45,540 --> 00:13:53,189
it says is that recency plays a bigger

361
00:13:50,910 --> 00:13:54,930
factor than than just about anything

362
00:13:53,190 --> 00:13:57,150
else in terms of whether something it's

363
00:13:54,930 --> 00:13:58,319
fixed so you've got a 21 percent chance

364
00:13:57,150 --> 00:14:02,490
that something gets fixed in the first

365
00:13:58,320 --> 00:14:06,570
month and then barely any chance to long

366
00:14:02,490 --> 00:14:09,330
you go it tells us that developers are

367
00:14:06,570 --> 00:14:12,300
kind of using like a last in first out

368
00:14:09,330 --> 00:14:14,730
method as opposed to prioritizing based

369
00:14:12,300 --> 00:14:15,930
on severity or by category or any of the

370
00:14:14,730 --> 00:14:19,380
other factors that a security

371
00:14:15,930 --> 00:14:21,599
professional might expect them to do the

372
00:14:19,380 --> 00:14:24,600
strongest factor in whether something

373
00:14:21,600 --> 00:14:25,800
got fixed quickly was if it was just in

374
00:14:24,600 --> 00:14:27,720
front of the developer at that time

375
00:14:25,800 --> 00:14:31,530
regardless of severity regardless of

376
00:14:27,720 --> 00:14:34,910
anything so that was something that we

377
00:14:31,530 --> 00:14:34,910
found for the first time in this report

378
00:14:35,540 --> 00:14:41,250
and I should I meant to apologize

379
00:14:38,850 --> 00:14:45,690
proactively that if any of you are you

380
00:14:41,250 --> 00:14:49,620
know 1980s era PC gamers this may bring

381
00:14:45,690 --> 00:14:52,110
back some some PTSD around the CGA color

382
00:14:49,620 --> 00:14:53,520
palette I did not choose the colors for

383
00:14:52,110 --> 00:14:57,300
these graphs but they are all blue and

384
00:14:53,520 --> 00:15:00,020
pink okay so this takes every

385
00:14:57,300 --> 00:15:02,819
application in the study and it shows

386
00:15:00,020 --> 00:15:04,740
which applications are accruing debt and

387
00:15:02,820 --> 00:15:06,570
which ones are closing down their debt

388
00:15:04,740 --> 00:15:08,280
and so everything above the line they

389
00:15:06,570 --> 00:15:09,540
fixed more findings than were found

390
00:15:08,280 --> 00:15:11,939
they're chipping away at their debt

391
00:15:09,540 --> 00:15:13,770
everything below the line those

392
00:15:11,940 --> 00:15:15,540
applications were continuing to detect

393
00:15:13,770 --> 00:15:17,520
more and more flaws that they were not

394
00:15:15,540 --> 00:15:20,130
fixing they were fixing fewer than they

395
00:15:17,520 --> 00:15:22,410
found and so they're accumulating more

396
00:15:20,130 --> 00:15:24,000
debt over time this is the same data but

397
00:15:22,410 --> 00:15:25,920
visualize slightly differently and it

398
00:15:24,000 --> 00:15:28,500
kind of shows you the ratio at which

399
00:15:25,920 --> 00:15:31,229
those those applications were fixing

400
00:15:28,500 --> 00:15:32,970
versus finding and you see on the bottom

401
00:15:31,230 --> 00:15:34,110
those are the bad ones right forty-nine

402
00:15:32,970 --> 00:15:36,570
percent of applications

403
00:15:34,110 --> 00:15:38,850
we're continuing over time to find more

404
00:15:36,570 --> 00:15:40,740
bugs than they fixed and so they're just

405
00:15:38,850 --> 00:15:44,100
digging themselves deeper and deeper and

406
00:15:40,740 --> 00:15:45,260
deeper into a hole with with no no real

407
00:15:44,100 --> 00:15:50,960
good way of getting out

408
00:15:45,260 --> 00:15:53,150
there this is the very common the

409
00:15:50,960 --> 00:15:55,370
security iceberg graph except what it's

410
00:15:53,150 --> 00:15:57,110
showing now is what's getting closed

411
00:15:55,370 --> 00:15:59,810
every week for an average application

412
00:15:57,110 --> 00:16:03,430
versus what's either continuing to be

413
00:15:59,810 --> 00:16:06,829
found or already known about and so

414
00:16:03,430 --> 00:16:08,750
everything in pink is is the debt that's

415
00:16:06,830 --> 00:16:11,390
what you're trying to close right an

416
00:16:08,750 --> 00:16:13,100
ideal world you'd see that you'd see

417
00:16:11,390 --> 00:16:15,170
that pink shape is kind of a triangle it

418
00:16:13,100 --> 00:16:16,820
would start large or maybe not start

419
00:16:15,170 --> 00:16:20,630
larger it would start with some debt and

420
00:16:16,820 --> 00:16:22,070
you slowly chip away at it until until

421
00:16:20,630 --> 00:16:24,200
you had no pink right it would work its

422
00:16:22,070 --> 00:16:25,580
way up that way and we can see on

423
00:16:24,200 --> 00:16:28,190
average it's actually getting slightly

424
00:16:25,580 --> 00:16:31,040
bigger now we want to slice this a few

425
00:16:28,190 --> 00:16:32,300
different ways this is only in here

426
00:16:31,040 --> 00:16:36,040
because this is a Microsoft conference

427
00:16:32,300 --> 00:16:38,180
but you can see for a dotnet application

428
00:16:36,040 --> 00:16:40,520
the security debt looks like that

429
00:16:38,180 --> 00:16:42,380
whereas for like a C++ or PHP there's a

430
00:16:40,520 --> 00:16:44,060
lot more accumulation now this is not

431
00:16:42,380 --> 00:16:45,590
just say like take your C++ apps and

432
00:16:44,060 --> 00:16:48,260
port them all to dotnet what this is

433
00:16:45,590 --> 00:16:50,150
really showing is that some applications

434
00:16:48,260 --> 00:16:52,460
or some languages may be more or less

435
00:16:50,150 --> 00:16:53,840
prone to the build-up of security debt

436
00:16:52,460 --> 00:16:56,030
based on the language that they're

437
00:16:53,840 --> 00:16:58,730
written in again we can only see what's

438
00:16:56,030 --> 00:17:02,060
happening we don't exactly know why so

439
00:16:58,730 --> 00:17:03,590
finally how does DevOps effects the

440
00:17:02,060 --> 00:17:05,899
effect this fixed behavior now that we

441
00:17:03,590 --> 00:17:07,790
have the notion of the survival curve we

442
00:17:05,900 --> 00:17:09,200
have the notion of security debt we can

443
00:17:07,790 --> 00:17:10,970
measure all those and we can visualize

444
00:17:09,200 --> 00:17:13,610
them in ways that are very easy to

445
00:17:10,970 --> 00:17:18,100
understand how can we measure the impact

446
00:17:13,609 --> 00:17:20,479
that DevOps has so quick definition

447
00:17:18,099 --> 00:17:23,540
DevOps is a number of things it's you

448
00:17:20,480 --> 00:17:26,089
know it's a way of of incorporating

449
00:17:23,540 --> 00:17:28,280
automation it's changes to processes

450
00:17:26,089 --> 00:17:30,470
change its to culture I can't really

451
00:17:28,280 --> 00:17:32,389
measure culture and processes from my

452
00:17:30,470 --> 00:17:34,850
vantage point with the data but I can

453
00:17:32,390 --> 00:17:37,340
look at automation to some degree and so

454
00:17:34,850 --> 00:17:40,389
even though DevOps is a number of things

455
00:17:37,340 --> 00:17:43,699
we're gonna focus in on the automation

456
00:17:40,390 --> 00:17:47,240
component here as measured through scan

457
00:17:43,700 --> 00:17:50,450
scan frequency and scan cadence and so

458
00:17:47,240 --> 00:17:52,520
my theory is that something that scanned

459
00:17:50,450 --> 00:17:53,870
every day or more often than every day

460
00:17:52,520 --> 00:17:56,330
is probably being done through

461
00:17:53,870 --> 00:17:57,540
automation hopefully there's not a

462
00:17:56,330 --> 00:17:59,250
person

463
00:17:57,540 --> 00:18:00,690
sitting there uploading something

464
00:17:59,250 --> 00:18:03,060
through a browser and pressing a button

465
00:18:00,690 --> 00:18:04,620
every time to make that happen may be

466
00:18:03,060 --> 00:18:06,149
the case but I think I feel strong

467
00:18:04,620 --> 00:18:08,250
enough in the assumption that that's

468
00:18:06,150 --> 00:18:10,410
probably automation and I can also tell

469
00:18:08,250 --> 00:18:12,120
at an overall level that two-thirds of

470
00:18:10,410 --> 00:18:14,130
the scans that are being conducted today

471
00:18:12,120 --> 00:18:17,790
or over this data set are being done

472
00:18:14,130 --> 00:18:20,550
through automation so Minh Utley on the

473
00:18:17,790 --> 00:18:22,320
rise so when I break this down 260 plus

474
00:18:20,550 --> 00:18:24,360
by the way corresponds to business days

475
00:18:22,320 --> 00:18:27,030
so in a year so that's basically the

476
00:18:24,360 --> 00:18:29,040
everyday as we see 0.3% of applications

477
00:18:27,030 --> 00:18:31,500
are being scanned every day and then if

478
00:18:29,040 --> 00:18:33,149
you draw a line at like the 53 to 130

479
00:18:31,500 --> 00:18:35,250
mark that's like the weekly scanning

480
00:18:33,150 --> 00:18:37,400
right so weekly and better so if you add

481
00:18:35,250 --> 00:18:41,160
up those percentages from the weekly

482
00:18:37,400 --> 00:18:42,690
point to the right you see that about 5%

483
00:18:41,160 --> 00:18:45,030
of applications are scanning at that

484
00:18:42,690 --> 00:18:47,400
frequency and so maybe they're using

485
00:18:45,030 --> 00:18:49,560
DevOps or maybe they're doing just agile

486
00:18:47,400 --> 00:18:51,240
with a lot of automation or they just

487
00:18:49,560 --> 00:18:53,280
have a really robust security process

488
00:18:51,240 --> 00:18:56,310
but we're just going to assume that the

489
00:18:53,280 --> 00:18:58,100
more frequent the scanning is the more

490
00:18:56,310 --> 00:19:00,720
likely it is to be DevOps

491
00:18:58,100 --> 00:19:04,379
okay so how do we take that now and look

492
00:19:00,720 --> 00:19:07,110
at fixed rates I showed you the median

493
00:19:04,380 --> 00:19:08,850
fixed times overall before and I showed

494
00:19:07,110 --> 00:19:10,979
you by category and by severity and

495
00:19:08,850 --> 00:19:13,290
here's my scan frequency and we can see

496
00:19:10,980 --> 00:19:14,940
that if you're scanning daily your

497
00:19:13,290 --> 00:19:18,750
median time - remediation is three times

498
00:19:14,940 --> 00:19:22,740
faster than if you're scanning once a

499
00:19:18,750 --> 00:19:25,200
year or up to monthly so that's a pretty

500
00:19:22,740 --> 00:19:29,580
that's a pretty nice significant

501
00:19:25,200 --> 00:19:32,370
correlation we can also look at how scan

502
00:19:29,580 --> 00:19:37,199
frequency affects security debt and so

503
00:19:32,370 --> 00:19:40,139
if you are scanning daily 300 plus

504
00:19:37,200 --> 00:19:42,030
annual scans you say you still do accrue

505
00:19:40,140 --> 00:19:43,620
a security debt you don't accrue as much

506
00:19:42,030 --> 00:19:45,270
you know that you see it gets better and

507
00:19:43,620 --> 00:19:47,459
better as you get higher in your scan

508
00:19:45,270 --> 00:19:48,870
frequency but it's not it's clearly not

509
00:19:47,460 --> 00:19:50,400
a silver bullet right it doesn't make it

510
00:19:48,870 --> 00:19:50,820
go away none of these things make it go

511
00:19:50,400 --> 00:19:55,220
away

512
00:19:50,820 --> 00:19:57,810
but you don't accumulate nearly as much

513
00:19:55,220 --> 00:19:58,999
now this is my favorite chart actually

514
00:19:57,810 --> 00:20:01,470
in the

515
00:19:58,999 --> 00:20:04,259
this shows scanned cadence I thought

516
00:20:01,470 --> 00:20:07,049
this is really neat and what we want to

517
00:20:04,259 --> 00:20:09,629
do is we wanted to say if you scan on a

518
00:20:07,049 --> 00:20:11,580
steady basis versus an irregular or

519
00:20:09,629 --> 00:20:14,820
bursty basis how does that affect your

520
00:20:11,580 --> 00:20:17,158
fixed times and so we plotted this out

521
00:20:14,820 --> 00:20:19,739
or we calculated this for every single

522
00:20:17,159 --> 00:20:21,149
one of the 85,000 applications and what

523
00:20:19,739 --> 00:20:23,399
we did is we calculated something called

524
00:20:21,149 --> 00:20:25,168
the Fano factor the final factor is a

525
00:20:23,399 --> 00:20:26,729
ratio between the variance of the time

526
00:20:25,169 --> 00:20:28,950
between scans and the average time

527
00:20:26,730 --> 00:20:30,419
between scans so if you're if you're at

528
00:20:28,950 --> 00:20:32,609
the top there and you're steady scanning

529
00:20:30,419 --> 00:20:35,039
exactly on a frequency your fan of

530
00:20:32,609 --> 00:20:36,178
scores can be very low and if you're

531
00:20:35,039 --> 00:20:37,889
down there at the bottom where you're

532
00:20:36,179 --> 00:20:39,389
just you have a flurry of activity and

533
00:20:37,889 --> 00:20:41,039
you have like nothing for eight months

534
00:20:39,389 --> 00:20:42,658
and then a flurry of activity your

535
00:20:41,039 --> 00:20:44,759
variance your final factor is going to

536
00:20:42,659 --> 00:20:46,679
be very high because your variance is

537
00:20:44,759 --> 00:20:48,570
high compared to your average and so

538
00:20:46,679 --> 00:20:50,369
when you calculate that for each of the

539
00:20:48,570 --> 00:20:52,950
85,000 apps you can then

540
00:20:50,369 --> 00:20:55,590
programmatically group them into steady

541
00:20:52,950 --> 00:20:57,450
irregular and bursty depending on where

542
00:20:55,590 --> 00:21:00,418
you set those where you set those

543
00:20:57,450 --> 00:21:04,109
thresholds irregular turns out to just

544
00:21:00,419 --> 00:21:06,179
be bursty but more often in looking at

545
00:21:04,109 --> 00:21:09,149
it right you can see that irregular

546
00:21:06,179 --> 00:21:11,639
still you have like activity followed by

547
00:21:09,149 --> 00:21:13,229
noting activity followed by nothing your

548
00:21:11,639 --> 00:21:15,109
stretches of nothing are just shorter

549
00:21:13,230 --> 00:21:18,169
and so those two are kind of related

550
00:21:15,109 --> 00:21:24,359
okay so we said how to scan cadence

551
00:21:18,169 --> 00:21:25,859
affect security debt and this is what we

552
00:21:24,359 --> 00:21:27,269
found there so again I don't remember

553
00:21:25,859 --> 00:21:29,399
exactly what what the coefficient

554
00:21:27,269 --> 00:21:31,619
breakdowns we use to differentiate

555
00:21:29,399 --> 00:21:33,389
steady from irregular from bursty but

556
00:21:31,619 --> 00:21:34,830
you get the picture here again with

557
00:21:33,389 --> 00:21:36,959
steady scanning you do see an

558
00:21:34,830 --> 00:21:39,059
accumulation of debt but you actually do

559
00:21:36,960 --> 00:21:41,309
see it get reduced quite a bit there

560
00:21:39,059 --> 00:21:44,330
towards the end at least on the

561
00:21:41,309 --> 00:21:46,739
applications in our data set irregular

562
00:21:44,330 --> 00:21:49,408
it decreases right there was some

563
00:21:46,739 --> 00:21:51,059
burstiness we think that irregular

564
00:21:49,409 --> 00:21:52,139
scanning is probably teams doing

565
00:21:51,059 --> 00:21:55,499
security sprints

566
00:21:52,139 --> 00:21:56,820
so they accumulate a lot of debt they

567
00:21:55,499 --> 00:21:58,619
accumulate a lot of stuff that people

568
00:21:56,820 --> 00:22:00,629
tend to ignore and then at some point

569
00:21:58,619 --> 00:22:02,039
someone says man we got to get our head

570
00:22:00,629 --> 00:22:03,779
you know got wrap our heads around these

571
00:22:02,039 --> 00:22:05,820
security findings somebody's gonna come

572
00:22:03,779 --> 00:22:08,220
audit us or whatever and they say let's

573
00:22:05,820 --> 00:22:10,049
let's dedicate a sprint or two sprints

574
00:22:08,220 --> 00:22:11,530
or whatever to fixing down you know

575
00:22:10,049 --> 00:22:14,320
fixing the security debt

576
00:22:11,530 --> 00:22:15,340
and so they do that and then at the end

577
00:22:14,320 --> 00:22:16,870
of the sprint they just stop doing

578
00:22:15,340 --> 00:22:19,689
security stuff until that happens again

579
00:22:16,870 --> 00:22:22,689
and so you can see that has a positive

580
00:22:19,690 --> 00:22:23,980
effect in general but it still is going

581
00:22:22,690 --> 00:22:26,710
to take a while to actually eliminate

582
00:22:23,980 --> 00:22:30,100
that debt the one that's really clear

583
00:22:26,710 --> 00:22:32,320
here is that the bursty scanning does

584
00:22:30,100 --> 00:22:35,199
not appear to be very good in terms of

585
00:22:32,320 --> 00:22:39,100
reducing security debt it grows at a

586
00:22:35,200 --> 00:22:40,929
rate that is just unsustainable right if

587
00:22:39,100 --> 00:22:42,879
you go six months or eight months or a

588
00:22:40,929 --> 00:22:45,400
year without doing any scanning or

589
00:22:42,880 --> 00:22:46,809
fixing it's probably not too hard to

590
00:22:45,400 --> 00:22:48,460
understand why your security debt would

591
00:22:46,809 --> 00:22:49,960
increase like that you're adding new

592
00:22:48,460 --> 00:22:52,090
functionality that new functionality has

593
00:22:49,960 --> 00:22:52,510
bugs and you're just not doing anything

594
00:22:52,090 --> 00:22:55,389
about it

595
00:22:52,510 --> 00:22:58,658
so again steady scanning not a silver

596
00:22:55,390 --> 00:23:00,610
bullet but does appear to shape the

597
00:22:58,659 --> 00:23:09,370
security debt chart in the direction

598
00:23:00,610 --> 00:23:10,899
though that we would like so there's a

599
00:23:09,370 --> 00:23:12,549
lot more data in this report we break it

600
00:23:10,900 --> 00:23:15,549
down by language we break it down by

601
00:23:12,549 --> 00:23:17,350
industry there's there's different

602
00:23:15,549 --> 00:23:18,820
flawed categories we slice the data in

603
00:23:17,350 --> 00:23:20,889
all sorts of different ways and provide

604
00:23:18,820 --> 00:23:22,960
a number of graphs I urge you to go

605
00:23:20,890 --> 00:23:25,450
download and and leave the report if

606
00:23:22,960 --> 00:23:26,620
you're interested in some of that but as

607
00:23:25,450 --> 00:23:28,030
I mentioned the beginning of this I

608
00:23:26,620 --> 00:23:30,219
really wanted to focus in on on the

609
00:23:28,030 --> 00:23:32,289
DevOps aspect of it and here's what we

610
00:23:30,220 --> 00:23:35,110
think we've learned that security

611
00:23:32,289 --> 00:23:38,169
automation in this case measured by scan

612
00:23:35,110 --> 00:23:41,049
frequency continues to significantly lag

613
00:23:38,169 --> 00:23:42,340
the widespread adoption of DevOps you

614
00:23:41,049 --> 00:23:44,379
talk to any company out there they're

615
00:23:42,340 --> 00:23:45,850
doing DevOps to some degree they may not

616
00:23:44,380 --> 00:23:47,590
be doing it across all their apps but

617
00:23:45,850 --> 00:23:49,330
they're doing it somewhere whether it's

618
00:23:47,590 --> 00:23:51,939
in little pockets or or whether it's

619
00:23:49,330 --> 00:23:53,770
more institutional but the number of

620
00:23:51,940 --> 00:23:57,760
apps that are being scanned more than

621
00:23:53,770 --> 00:23:59,470
weekly was 5% so we think that's that's

622
00:23:57,760 --> 00:24:02,350
really lagging security really needs to

623
00:23:59,470 --> 00:24:04,210
catch up in that aspect and embrace the

624
00:24:02,350 --> 00:24:06,969
automation in the way that they are with

625
00:24:04,210 --> 00:24:08,799
the other development tools we find that

626
00:24:06,970 --> 00:24:10,600
developers don't prioritize the same way

627
00:24:08,799 --> 00:24:12,730
that a security person would they don't

628
00:24:10,600 --> 00:24:14,530
they don't prioritize by severity or by

629
00:24:12,730 --> 00:24:17,679
category or by business criticality of

630
00:24:14,530 --> 00:24:19,270
the application the recency of the flaw

631
00:24:17,679 --> 00:24:20,620
like how often how long it's been since

632
00:24:19,270 --> 00:24:22,299
they've seen it whether it's just in

633
00:24:20,620 --> 00:24:24,219
front of them seems to affect their

634
00:24:22,299 --> 00:24:24,879
fixed behavior more than any other

635
00:24:24,220 --> 00:24:28,660
factor that we

636
00:24:24,880 --> 00:24:30,100
tried to isolate we think that

637
00:24:28,660 --> 00:24:32,800
incorporating the daily application

638
00:24:30,100 --> 00:24:35,800
testing or more is good because it

639
00:24:32,800 --> 00:24:37,090
showed that we that those customers were

640
00:24:35,800 --> 00:24:40,090
able to improve their median time to

641
00:24:37,090 --> 00:24:43,659
remediation by by three times so that

642
00:24:40,090 --> 00:24:45,070
seems like a good correlation that you

643
00:24:43,660 --> 00:24:47,350
know we should continue to track and

644
00:24:45,070 --> 00:24:49,990
then the steady testing the steady

645
00:24:47,350 --> 00:24:52,030
irregular bursty breakdown that does

646
00:24:49,990 --> 00:24:53,560
seem to facilitate chipping away at the

647
00:24:52,030 --> 00:24:54,220
security debt in a way that the others

648
00:24:53,560 --> 00:24:56,740
did not

649
00:24:54,220 --> 00:24:59,110
certainly the bursty testing seems to be

650
00:24:56,740 --> 00:25:01,420
not the way to go I think we all know

651
00:24:59,110 --> 00:25:03,010
that and anybody who was asked for that

652
00:25:01,420 --> 00:25:04,450
opinion if you went back to work

653
00:25:03,010 --> 00:25:05,830
you could probably you would probably

654
00:25:04,450 --> 00:25:07,240
say that going you know eight or nine

655
00:25:05,830 --> 00:25:09,310
months without any security activity

656
00:25:07,240 --> 00:25:10,990
would be a bad idea but now there's some

657
00:25:09,310 --> 00:25:13,840
data to kind of back it up and and

658
00:25:10,990 --> 00:25:17,110
there's some pretty charts and hopefully

659
00:25:13,840 --> 00:25:19,540
this will kind of give some people some

660
00:25:17,110 --> 00:25:22,330
ammunition to go back and say look

661
00:25:19,540 --> 00:25:24,399
here's this large-scale study and here

662
00:25:22,330 --> 00:25:26,820
are some behaviors that we think could

663
00:25:24,400 --> 00:25:29,350
actually lead to to better outcomes and

664
00:25:26,820 --> 00:25:30,120
so that's it that's all I have thank you

665
00:25:29,350 --> 00:25:34,969
very much

666
00:25:30,120 --> 00:25:34,969
[Applause]

