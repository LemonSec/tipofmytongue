1
00:00:00,030 --> 00:00:04,980
<font color="#E5E5E5">okay hi so my name is</font><font color="#CCCCCC"> Jorden I work on</font>

2
00:00:03,090 --> 00:00:07,500
the Microsoft offensive<font color="#E5E5E5"> security search</font>

3
00:00:04,980 --> 00:00:11,040
team<font color="#CCCCCC"> and today I'm going to be talking</font>

4
00:00:07,500 --> 00:00:12,389
<font color="#E5E5E5">to you about a hacking hyper-v and well</font>

5
00:00:11,040 --> 00:00:15,509
so for<font color="#CCCCCC"> those of</font><font color="#E5E5E5"> you who haven't heard of</font>

6
00:00:12,389 --> 00:00:18,560
us<font color="#CCCCCC"> Microsoft OS ours goal is</font><font color="#E5E5E5"> basically</font>

7
00:00:15,509 --> 00:00:21,570
<font color="#E5E5E5">to just write exploits for for you know</font>

8
00:00:18,560 --> 00:00:23,759
<font color="#E5E5E5">Microsoft products right we have done</font>

9
00:00:21,570 --> 00:00:25,710
Microsoft products at a time but<font color="#CCCCCC"> that is</font>

10
00:00:23,760 --> 00:00:27,750
not<font color="#E5E5E5"> our</font><font color="#CCCCCC"> primary focus basically we</font><font color="#E5E5E5"> won't</font>

11
00:00:25,710 --> 00:00:29,880
just try and find every interesting

12
00:00:27,750 --> 00:00:31,320
<font color="#E5E5E5">security target in terms</font><font color="#CCCCCC"> of products</font>

13
00:00:29,880 --> 00:00:33,210
that<font color="#E5E5E5"> we are shipping so things like</font>

14
00:00:31,320 --> 00:00:35,730
Windows you know Xbox<font color="#E5E5E5"> phones</font>

15
00:00:33,210 --> 00:00:38,430
<font color="#CCCCCC">once-upon-a-time web browsers and all</font>

16
00:00:35,730 --> 00:00:40,559
that kind of<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> and try to hack them</font>

17
00:00:38,430 --> 00:00:42,660
in such a way that<font color="#E5E5E5"> we will be able to</font>

18
00:00:40,559 --> 00:00:44,760
not<font color="#CCCCCC"> only find new vulnerabilities but</font>

19
00:00:42,660 --> 00:00:47,279
also<font color="#E5E5E5"> actually exploit them such that</font><font color="#CCCCCC"> we</font>

20
00:00:44,760 --> 00:00:49,050
can<font color="#E5E5E5"> kind of identify you know exploit</font>

21
00:00:47,280 --> 00:00:50,879
techniques and<font color="#E5E5E5"> invariants and try to</font>

22
00:00:49,050 --> 00:00:53,430
<font color="#CCCCCC">mitigate those and so that's actually</font>

23
00:00:50,879 --> 00:00:55,260
<font color="#E5E5E5">how this talk ended up being in this</font>

24
00:00:53,430 --> 00:00:56,699
track is that<font color="#E5E5E5"> this is very much going to</font>

25
00:00:55,260 --> 00:00:59,129
<font color="#E5E5E5">be an exploit all right I'm going</font><font color="#CCCCCC"> to go</font>

26
00:00:56,699 --> 00:01:01,289
through what hyper-v is how it works<font color="#E5E5E5"> how</font>

27
00:00:59,129 --> 00:01:02,760
<font color="#CCCCCC">we found vulnerabilities in it and then</font>

28
00:01:01,289 --> 00:01:04,830
how we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to actually exploit them</font>

29
00:01:02,760 --> 00:01:07,408
but on<font color="#CCCCCC"> top of</font><font color="#E5E5E5"> that I am also going to</font>

30
00:01:04,830 --> 00:01:08,189
talk to you about<font color="#E5E5E5"> well what are we</font>

31
00:01:07,409 --> 00:01:10,110
actually<font color="#E5E5E5"> doing about these</font>

32
00:01:08,189 --> 00:01:11,309
vulnerabilities right<font color="#E5E5E5"> we don't just want</font>

33
00:01:10,110 --> 00:01:12,929
to<font color="#E5E5E5"> fix them we want to try and</font><font color="#CCCCCC"> put</font>

34
00:01:11,310 --> 00:01:13,890
mitigations into the product that make

35
00:01:12,930 --> 00:01:15,270
it such<font color="#CCCCCC"> that even</font><font color="#E5E5E5"> if it's a</font>

36
00:01:13,890 --> 00:01:16,680
vulnerability still<font color="#CCCCCC"> exists</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> which</font>

37
00:01:15,270 --> 00:01:18,630
to be clear they do not we have<font color="#E5E5E5"> fixed</font>

38
00:01:16,680 --> 00:01:21,030
<font color="#E5E5E5">them would not be exploitable or at</font>

39
00:01:18,630 --> 00:01:22,679
least much harder to exploit on top of

40
00:01:21,030 --> 00:01:25,590
that if I<font color="#E5E5E5"> managed</font><font color="#CCCCCC"> to fix it in time</font>

41
00:01:22,680 --> 00:01:26,909
there will be a live demo<font color="#CCCCCC"> so you know</font>

42
00:01:25,590 --> 00:01:28,350
stay for that even if you don't care

43
00:01:26,909 --> 00:01:31,619
<font color="#E5E5E5">about the rest of the content because it</font>

44
00:01:28,350 --> 00:01:34,289
should be pretty<font color="#E5E5E5"> cool so what is a</font>

45
00:01:31,619 --> 00:01:36,810
hyper-v or hyper like some people<font color="#CCCCCC"> like</font>

46
00:01:34,290 --> 00:01:38,909
to pronounce it<font color="#CCCCCC"> hyper-v is basically</font>

47
00:01:36,810 --> 00:01:40,079
this right if you<font color="#E5E5E5"> want to use hyper-v on</font>

48
00:01:38,909 --> 00:01:42,329
your computer<font color="#E5E5E5"> this</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to see</font>

49
00:01:40,079 --> 00:01:44,130
it's your<font color="#E5E5E5"> Windows 10 machine you have</font>

50
00:01:42,329 --> 00:01:46,439
your desktop<font color="#E5E5E5"> right here that's the whole</font>

51
00:01:44,130 --> 00:01:48,298
thing<font color="#CCCCCC"> and on</font><font color="#E5E5E5"> top of that you have one</font>

52
00:01:46,439 --> 00:01:50,130
window<font color="#E5E5E5"> which has its own time desktop in</font>

53
00:01:48,299 --> 00:01:51,540
the<font color="#E5E5E5"> middle and it turns out what's going</font>

54
00:01:50,130 --> 00:01:52,949
on<font color="#CCCCCC"> here is you actually</font><font color="#E5E5E5"> have two</font>

55
00:01:51,540 --> 00:01:55,110
operating systems<font color="#CCCCCC"> were</font><font color="#E5E5E5"> running and so</font>

56
00:01:52,950 --> 00:01:57,360
<font color="#E5E5E5">just to kind of introduce some</font><font color="#CCCCCC"> of a non</font>

57
00:01:55,110 --> 00:01:59,549
<font color="#CCCCCC">clay Chur here you have the host OS</font>

58
00:01:57,360 --> 00:02:01,829
<font color="#E5E5E5">which is what you know it's like Windows</font>

59
00:01:59,549 --> 00:02:04,890
10 which is<font color="#E5E5E5"> running like basically bare</font>

60
00:02:01,829 --> 00:02:06,839
metal not quite<font color="#E5E5E5"> which is what is hosting</font>

61
00:02:04,890 --> 00:02:08,340
like your<font color="#E5E5E5"> machine it's what's actually</font>

62
00:02:06,840 --> 00:02:09,810
when<font color="#E5E5E5"> I in computer and you</font><font color="#CCCCCC"> have a guest</font>

63
00:02:08,340 --> 00:02:11,340
OS<font color="#CCCCCC"> a guest</font><font color="#E5E5E5"> operating system which is</font>

64
00:02:09,810 --> 00:02:13,650
<font color="#CCCCCC">running within the virtual</font><font color="#E5E5E5"> machine that</font>

65
00:02:11,340 --> 00:02:13,920
<font color="#E5E5E5">is being you know hosted by</font><font color="#CCCCCC"> this host to</font>

66
00:02:13,650 --> 00:02:15,780
us

67
00:02:13,920 --> 00:02:18,179
throughout this talk<font color="#E5E5E5"> I'm only going to</font>

68
00:02:15,780 --> 00:02:19,740
<font color="#E5E5E5">talk with an example of just having</font><font color="#CCCCCC"> one</font>

69
00:02:18,180 --> 00:02:21,810
<font color="#CCCCCC">guest</font><font color="#E5E5E5"> to us so just one virtual</font><font color="#CCCCCC"> machine</font>

70
00:02:19,740 --> 00:02:23,250
running<font color="#E5E5E5"> at a time just for simplicity in</font>

71
00:02:21,810 --> 00:02:24,510
practice obviously<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> have way more</font>

72
00:02:23,250 --> 00:02:26,670
<font color="#E5E5E5">than</font><font color="#CCCCCC"> that that's</font><font color="#E5E5E5"> the whole point of</font>

73
00:02:24,510 --> 00:02:27,780
virtual machines and well you<font color="#E5E5E5"> might be</font>

74
00:02:26,670 --> 00:02:29,880
wondering at this<font color="#E5E5E5"> point</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that's kind</font>

75
00:02:27,780 --> 00:02:31,470
of<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> I don't quite get why you might</font>

76
00:02:29,880 --> 00:02:33,030
want<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that why do you want to run</font>

77
00:02:31,470 --> 00:02:34,620
virtual<font color="#E5E5E5"> machines on a computer well</font>

78
00:02:33,030 --> 00:02:36,840
basically the whole<font color="#CCCCCC"> point is</font><font color="#E5E5E5"> isolation</font>

79
00:02:34,620 --> 00:02:38,610
right<font color="#E5E5E5"> this way</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are actually able to</font>

80
00:02:36,840 --> 00:02:40,459
<font color="#E5E5E5">have multiple people running multiple</font>

81
00:02:38,610 --> 00:02:43,140
<font color="#E5E5E5">operating systems on a</font><font color="#CCCCCC"> single server</font>

82
00:02:40,459 --> 00:02:45,300
<font color="#E5E5E5">basically and each one of them can do</font>

83
00:02:43,140 --> 00:02:47,070
its own thing<font color="#E5E5E5"> and do its own thing</font>

84
00:02:45,300 --> 00:02:48,989
without affecting the security<font color="#E5E5E5"> of all</font>

85
00:02:47,070 --> 00:02:51,329
<font color="#E5E5E5">the other virtual</font><font color="#CCCCCC"> machines running</font><font color="#E5E5E5"> on</font>

86
00:02:48,989 --> 00:02:53,910
the server<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so this basically powers</font>

87
00:02:51,330 --> 00:02:56,190
the cloud right and the<font color="#E5E5E5"> idea is that if</font>

88
00:02:53,910 --> 00:02:57,600
<font color="#CCCCCC">you kind</font><font color="#E5E5E5"> of are able to break out of a</font>

89
00:02:56,190 --> 00:02:58,590
<font color="#E5E5E5">guest to us we get a virtual machine</font>

90
00:02:57,600 --> 00:03:00,600
<font color="#CCCCCC">well you</font><font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> compromised the</font>

91
00:02:58,590 --> 00:03:01,980
security of not only a server but also

92
00:03:00,600 --> 00:03:04,170
every<font color="#E5E5E5"> other virtual machine on the</font>

93
00:03:01,980 --> 00:03:05,579
server and well that's bad for<font color="#CCCCCC"> the cloud</font>

94
00:03:04,170 --> 00:03:07,410
which<font color="#E5E5E5"> is why this is actually a really</font>

95
00:03:05,580 --> 00:03:09,600
important security<font color="#E5E5E5"> boundary and</font>

96
00:03:07,410 --> 00:03:12,690
something that we are<font color="#CCCCCC"> always working</font>

97
00:03:09,600 --> 00:03:14,549
tirelessly to<font color="#E5E5E5"> kind of protect so now</font>

98
00:03:12,690 --> 00:03:16,829
<font color="#E5E5E5">taking a lower level look at</font><font color="#CCCCCC"> what</font>

99
00:03:14,550 --> 00:03:18,150
hyper-v is<font color="#E5E5E5"> once again to the right</font>

100
00:03:16,830 --> 00:03:19,860
<font color="#E5E5E5">you're gonna have the guest</font><font color="#CCCCCC"> OS to the</font>

101
00:03:18,150 --> 00:03:21,450
<font color="#E5E5E5">left you're gonna have the host OS at</font>

102
00:03:19,860 --> 00:03:23,010
the top you have<font color="#E5E5E5"> the hardware</font><font color="#CCCCCC"> visit base</font>

103
00:03:21,450 --> 00:03:25,410
like your server<font color="#E5E5E5"> it's going to be you</font>

104
00:03:23,010 --> 00:03:28,340
<font color="#E5E5E5">know your CPU your</font><font color="#CCCCCC"> RAM your permanent</font>

105
00:03:25,410 --> 00:03:30,420
storage your network card<font color="#E5E5E5"> all that crap</font>

106
00:03:28,340 --> 00:03:31,380
<font color="#CCCCCC">where you're</font><font color="#E5E5E5"> going to notice is that in</font>

107
00:03:30,420 --> 00:03:33,899
<font color="#CCCCCC">between the guest</font>

108
00:03:31,380 --> 00:03:35,280
<font color="#E5E5E5">well between you know the OS layer</font>

109
00:03:33,900 --> 00:03:36,810
you're actually going<font color="#E5E5E5"> to have something</font>

110
00:03:35,280 --> 00:03:38,760
called<font color="#E5E5E5"> D hypervisors that yellow box</font>

111
00:03:36,810 --> 00:03:41,100
<font color="#CCCCCC">there the hypervisor</font><font color="#E5E5E5"> it can basically</font>

112
00:03:38,760 --> 00:03:43,260
think<font color="#E5E5E5"> of that as being</font><font color="#CCCCCC"> the operating</font>

113
00:03:41,100 --> 00:03:45,269
systems<font color="#E5E5E5"> operating system right it is</font>

114
00:03:43,260 --> 00:03:47,459
<font color="#CCCCCC">what decides which virtual machine is</font>

115
00:03:45,269 --> 00:03:47,940
able<font color="#E5E5E5"> to use which CPU core at a given</font>

116
00:03:47,459 --> 00:03:49,680
time

117
00:03:47,940 --> 00:03:51,840
<font color="#E5E5E5">what's which virtual machine is</font><font color="#CCCCCC"> able to</font>

118
00:03:49,680 --> 00:03:54,000
use which section<font color="#E5E5E5"> of</font><font color="#CCCCCC"> memory and all that</font>

119
00:03:51,840 --> 00:03:56,790
so it<font color="#E5E5E5"> really is like its own kind of</font>

120
00:03:54,000 --> 00:03:58,500
tiny<font color="#E5E5E5"> operating system that is giving</font>

121
00:03:56,790 --> 00:04:00,179
access<font color="#E5E5E5"> to various resources</font><font color="#CCCCCC"> the rest of</font>

122
00:03:58,500 --> 00:04:02,100
the<font color="#E5E5E5"> operating to the actual</font><font color="#CCCCCC"> virtual</font>

123
00:04:00,180 --> 00:04:04,110
machines are running<font color="#E5E5E5"> below and then if</font>

124
00:04:02,100 --> 00:04:05,489
you kind of take a look at the<font color="#E5E5E5"> level</font>

125
00:04:04,110 --> 00:04:07,410
below<font color="#CCCCCC"> well you're going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> see the host</font>

126
00:04:05,489 --> 00:04:09,060
OS<font color="#E5E5E5"> and the guest to us again what are</font>

127
00:04:07,410 --> 00:04:10,829
you going<font color="#E5E5E5"> to see as different between</font>

128
00:04:09,060 --> 00:04:13,680
<font color="#E5E5E5">the</font><font color="#CCCCCC"> two is that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> host OS had this</font>

129
00:04:10,829 --> 00:04:15,900
<font color="#E5E5E5">little nub</font><font color="#CCCCCC"> at the top left</font><font color="#E5E5E5"> there which</font>

130
00:04:13,680 --> 00:04:17,430
basically<font color="#E5E5E5"> gives it access to the</font>

131
00:04:15,900 --> 00:04:18,780
hardware<font color="#CCCCCC"> directly and you're not going</font>

132
00:04:17,430 --> 00:04:20,400
<font color="#E5E5E5">to see the</font><font color="#CCCCCC"> same knob for the host from</font>

133
00:04:18,779 --> 00:04:21,750
<font color="#E5E5E5">the guest to us the reason is the guest</font>

134
00:04:20,399 --> 00:04:24,479
to us<font color="#E5E5E5"> actually does not have</font><font color="#CCCCCC"> direct</font>

135
00:04:21,750 --> 00:04:25,919
<font color="#CCCCCC">hardware access you</font><font color="#E5E5E5"> are also going to</font>

136
00:04:24,479 --> 00:04:27,270
see a<font color="#CCCCCC"> little blob in the middle called</font>

137
00:04:25,919 --> 00:04:29,068
<font color="#E5E5E5">VM bus</font>

138
00:04:27,270 --> 00:04:30,210
which basically<font color="#E5E5E5"> allows the host to us</font>

139
00:04:29,069 --> 00:04:31,500
and the<font color="#E5E5E5"> guests so as to communicate</font>

140
00:04:30,210 --> 00:04:33,690
directly<font color="#E5E5E5"> we're going to go into more</font>

141
00:04:31,500 --> 00:04:36,750
<font color="#CCCCCC">detail and see how</font><font color="#E5E5E5"> that works but you</font>

142
00:04:33,690 --> 00:04:39,569
know that's essentially how that works

143
00:04:36,750 --> 00:04:41,340
the interesting<font color="#E5E5E5"> part about this is you</font>

144
00:04:39,569 --> 00:04:42,449
might<font color="#CCCCCC"> be thinking well</font><font color="#E5E5E5"> okay we have the</font>

145
00:04:41,340 --> 00:04:44,969
guest to us does<font color="#CCCCCC"> not have access</font><font color="#E5E5E5"> to</font>

146
00:04:42,449 --> 00:04:46,770
<font color="#CCCCCC">hardware well how does it</font><font color="#E5E5E5"> how does it do</font>

147
00:04:44,970 --> 00:04:48,539
its thing right let's say we have a

148
00:04:46,770 --> 00:04:50,520
process food<font color="#E5E5E5"> ID XE is running within the</font>

149
00:04:48,539 --> 00:04:53,190
guest OS user mode<font color="#E5E5E5"> well this process</font>

150
00:04:50,520 --> 00:04:55,889
<font color="#E5E5E5">wants to be able to access data on the</font>

151
00:04:53,190 --> 00:04:58,050
<font color="#CCCCCC">hard</font><font color="#E5E5E5"> drive right well typically what</font>

152
00:04:55,889 --> 00:05:00,930
<font color="#E5E5E5">would happen is food ID XE starts</font>

153
00:04:58,050 --> 00:05:02,789
talking<font color="#E5E5E5"> to its own kernel</font><font color="#CCCCCC"> its own</font><font color="#E5E5E5"> IO</font>

154
00:05:00,930 --> 00:05:05,280
stack which is<font color="#E5E5E5"> living with that within</font>

155
00:05:02,789 --> 00:05:06,509
that kernel and that IO stack will just

156
00:05:05,280 --> 00:05:09,448
start talking<font color="#E5E5E5"> to the hardware directly</font>

157
00:05:06,509 --> 00:05:10,740
<font color="#CCCCCC">but once again</font><font color="#E5E5E5"> guest VM does not have</font>

158
00:05:09,449 --> 00:05:13,430
access<font color="#E5E5E5"> to that so how</font><font color="#CCCCCC"> does it do that</font>

159
00:05:10,740 --> 00:05:16,650
<font color="#CCCCCC">well instead is going</font><font color="#E5E5E5"> to talk to a</font>

160
00:05:13,430 --> 00:05:18,090
driver<font color="#E5E5E5"> that is living within the guest</font>

161
00:05:16,650 --> 00:05:20,758
operating<font color="#E5E5E5"> system in this case going to</font>

162
00:05:18,090 --> 00:05:22,739
cost<font color="#E5E5E5"> be called store</font><font color="#CCCCCC"> VSC store for</font>

163
00:05:20,759 --> 00:05:25,259
storage<font color="#CCCCCC"> v SC</font><font color="#E5E5E5"> for virtualization</font><font color="#CCCCCC"> service</font>

164
00:05:22,740 --> 00:05:27,780
<font color="#E5E5E5">client</font><font color="#CCCCCC"> I believe</font><font color="#E5E5E5"> and essentially</font><font color="#CCCCCC"> that</font>

165
00:05:25,259 --> 00:05:29,520
provides a compatibility<font color="#E5E5E5"> layer with the</font>

166
00:05:27,780 --> 00:05:31,650
rest of hyper-v<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so store vs C is</font>

167
00:05:29,520 --> 00:05:33,840
<font color="#E5E5E5">going to function by talking to</font>

168
00:05:31,650 --> 00:05:35,789
something<font color="#CCCCCC"> called store</font><font color="#E5E5E5"> VSP which is</font>

169
00:05:33,840 --> 00:05:38,818
<font color="#E5E5E5">going to be hosted on the host OS side</font>

170
00:05:35,789 --> 00:05:40,229
<font color="#E5E5E5">and it's going</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that through</font><font color="#CCCCCC"> VM bus</font>

171
00:05:38,819 --> 00:05:42,300
<font color="#E5E5E5">not going through a hypervisor just</font>

172
00:05:40,229 --> 00:05:43,680
straight<font color="#CCCCCC"> up through</font><font color="#E5E5E5"> VM bus and store VSP</font>

173
00:05:42,300 --> 00:05:45,380
then is going<font color="#E5E5E5"> to talk to its own IO</font>

174
00:05:43,680 --> 00:05:48,509
stack and going to talk to<font color="#CCCCCC"> a storage</font>

175
00:05:45,380 --> 00:05:50,250
<font color="#E5E5E5">hardware and what that gives</font><font color="#CCCCCC"> us is if</font>

176
00:05:48,509 --> 00:05:52,830
you want to<font color="#E5E5E5"> think</font><font color="#CCCCCC"> about this</font><font color="#E5E5E5"> whole you</font>

177
00:05:50,250 --> 00:05:56,550
know virtual machine system as kind<font color="#E5E5E5"> of a</font>

178
00:05:52,830 --> 00:05:59,818
sandbox model then you<font color="#CCCCCC"> can think of</font><font color="#E5E5E5"> the</font>

179
00:05:56,550 --> 00:06:01,860
host OS as being the<font color="#E5E5E5"> the broker process</font>

180
00:05:59,819 --> 00:06:04,139
and then<font color="#E5E5E5"> you can think of the guest OS</font>

181
00:06:01,860 --> 00:06:06,270
<font color="#E5E5E5">as being the sandbox process right the</font>

182
00:06:04,139 --> 00:06:08,370
<font color="#CCCCCC">idea is that</font><font color="#E5E5E5"> every access to every</font>

183
00:06:06,270 --> 00:06:09,990
resource that<font color="#CCCCCC"> the guest to us</font><font color="#E5E5E5"> tries to</font>

184
00:06:08,370 --> 00:06:11,729
do has to<font color="#CCCCCC"> go</font><font color="#E5E5E5"> through the host OS and</font>

185
00:06:09,990 --> 00:06:13,620
therefore the<font color="#E5E5E5"> host to us can enforce</font>

186
00:06:11,729 --> 00:06:15,690
arbitrary restrictions on that so<font color="#E5E5E5"> for</font>

187
00:06:13,620 --> 00:06:18,180
example specifically here<font color="#E5E5E5"> you're going</font>

188
00:06:15,690 --> 00:06:20,039
<font color="#E5E5E5">to have the host OS allowing access to</font>

189
00:06:18,180 --> 00:06:22,139
<font color="#E5E5E5">files that are within the guest to us as</font>

190
00:06:20,039 --> 00:06:24,240
virtual hard disk<font color="#CCCCCC"> but it's not going</font><font color="#E5E5E5"> to</font>

191
00:06:22,139 --> 00:06:26,520
<font color="#CCCCCC">allow access</font><font color="#E5E5E5"> to files there on the host</font>

192
00:06:24,240 --> 00:06:29,520
<font color="#CCCCCC">oasis-c drive</font><font color="#E5E5E5"> right you</font><font color="#CCCCCC"> don't want to be</font>

193
00:06:26,520 --> 00:06:31,169
able from a guest<font color="#E5E5E5"> OS to be to modify you</font>

194
00:06:29,520 --> 00:06:32,159
know<font color="#CCCCCC"> see slash system32</font><font color="#E5E5E5"> slash whatever</font>

195
00:06:31,169 --> 00:06:34,740
<font color="#E5E5E5">because then you</font><font color="#CCCCCC"> can't just take</font><font color="#E5E5E5"> over</font>

196
00:06:32,159 --> 00:06:36,199
<font color="#E5E5E5">the host of us and things are bad so so</font>

197
00:06:34,740 --> 00:06:38,820
<font color="#E5E5E5">that's essentially how that works now</font>

198
00:06:36,199 --> 00:06:40,680
<font color="#CCCCCC">I'm saying</font><font color="#E5E5E5"> okay this is</font><font color="#CCCCCC"> going through vm</font>

199
00:06:38,820 --> 00:06:40,990
bus<font color="#E5E5E5"> which so far has been kind of a</font>

200
00:06:40,680 --> 00:06:42,430
black

201
00:06:40,990 --> 00:06:45,699
box<font color="#E5E5E5"> between the two or I guess like a</font>

202
00:06:42,430 --> 00:06:47,229
yellow<font color="#E5E5E5"> box in this</font><font color="#CCCCCC"> case so how does</font><font color="#E5E5E5"> how</font>

203
00:06:45,699 --> 00:06:49,479
<font color="#CCCCCC">does that work</font><font color="#E5E5E5"> well as I mentioned</font>

204
00:06:47,229 --> 00:06:51,280
actually<font color="#E5E5E5"> just goes straight through</font><font color="#CCCCCC"> vm</font>

205
00:06:49,479 --> 00:06:54,068
bus from the<font color="#CCCCCC"> guest to us to the</font><font color="#E5E5E5"> host to</font>

206
00:06:51,280 --> 00:06:55,568
us and you know vice versa<font color="#CCCCCC"> and well you</font>

207
00:06:54,069 --> 00:06:56,590
<font color="#E5E5E5">might be thinking both the host to us</font>

208
00:06:55,569 --> 00:06:58,180
and the<font color="#E5E5E5"> guest to us have access</font><font color="#CCCCCC"> to the</font>

209
00:06:56,590 --> 00:06:59,440
<font color="#E5E5E5">hypervisor that can both talk to it so</font>

210
00:06:58,180 --> 00:07:02,110
why<font color="#CCCCCC"> not</font><font color="#E5E5E5"> just send those</font><font color="#CCCCCC"> messages through</font>

211
00:06:59,440 --> 00:07:04,030
there<font color="#CCCCCC"> well the reason is basically</font><font color="#E5E5E5"> you</font>

212
00:07:02,110 --> 00:07:05,860
know context switches are expensive if

213
00:07:04,030 --> 00:07:07,388
you just try<font color="#E5E5E5"> to context which into the</font>

214
00:07:05,860 --> 00:07:08,710
hypervisor and<font color="#E5E5E5"> every time you try</font><font color="#CCCCCC"> to</font>

215
00:07:07,389 --> 00:07:10,990
<font color="#E5E5E5">send a message</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> gonna be able</font>

216
00:07:08,710 --> 00:07:12,159
<font color="#E5E5E5">to do that at a very high</font><font color="#CCCCCC"> frequency</font><font color="#E5E5E5"> or</font>

217
00:07:10,990 --> 00:07:15,130
or anything like<font color="#E5E5E5"> that</font>

218
00:07:12,160 --> 00:07:17,229
so instead we<font color="#E5E5E5"> introduced this concept of</font>

219
00:07:15,130 --> 00:07:19,270
shared memory between<font color="#CCCCCC"> the guest</font><font color="#E5E5E5"> and the</font>

220
00:07:17,229 --> 00:07:21,370
<font color="#E5E5E5">host and so if you take a look</font><font color="#CCCCCC"> here</font>

221
00:07:19,270 --> 00:07:23,109
you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to have at</font><font color="#E5E5E5"> the top physical</font>

222
00:07:21,370 --> 00:07:24,400
<font color="#E5E5E5">memory and then you're going to have a</font>

223
00:07:23,110 --> 00:07:26,380
block<font color="#CCCCCC"> of physical memory that is</font>

224
00:07:24,400 --> 00:07:27,940
actually shared between<font color="#E5E5E5"> the guest and</font>

225
00:07:26,380 --> 00:07:29,530
<font color="#CCCCCC">the</font><font color="#E5E5E5"> host like it's mapped in both</font>

226
00:07:27,940 --> 00:07:32,500
virtual machines<font color="#E5E5E5"> or like in both</font>

227
00:07:29,530 --> 00:07:35,198
partitions<font color="#E5E5E5"> of hyper-v right and the idea</font>

228
00:07:32,500 --> 00:07:37,690
then is<font color="#E5E5E5"> VM bus can leverage this shared</font>

229
00:07:35,199 --> 00:07:40,569
memory concept and just<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

230
00:07:37,690 --> 00:07:42,460
interpret one piece of shared memory as

231
00:07:40,569 --> 00:07:44,080
a ring buffer<font color="#E5E5E5"> and then whenever you want</font>

232
00:07:42,460 --> 00:07:46,060
to send a<font color="#CCCCCC"> packet from</font><font color="#E5E5E5"> the guest to the</font>

233
00:07:44,080 --> 00:07:47,889
host<font color="#E5E5E5"> well essentially you're just</font><font color="#CCCCCC"> going</font>

234
00:07:46,060 --> 00:07:50,259
<font color="#CCCCCC">to have your vs C or virtualization</font>

235
00:07:47,889 --> 00:07:54,400
service clients send a packet over<font color="#E5E5E5"> a VM</font>

236
00:07:50,259 --> 00:07:57,340
bus<font color="#E5E5E5"> VM bus is going to then copy it into</font>

237
00:07:54,400 --> 00:07:58,599
this this<font color="#E5E5E5"> ring buffer because this ring</font>

238
00:07:57,340 --> 00:08:00,310
buffer<font color="#E5E5E5"> is shared between the guest in</font>

239
00:07:58,599 --> 00:08:01,840
the host once it's copied<font color="#E5E5E5"> it just shows</font>

240
00:08:00,310 --> 00:08:02,949
up everywhere it's in physical<font color="#CCCCCC"> memory is</font>

241
00:08:01,840 --> 00:08:05,049
in both<font color="#E5E5E5"> the guest and the</font><font color="#CCCCCC"> host</font>

242
00:08:02,949 --> 00:08:06,490
<font color="#E5E5E5">everything is all</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> and then at that</font>

243
00:08:05,050 --> 00:08:07,750
point<font color="#CCCCCC"> you just kind of alert the host</font>

244
00:08:06,490 --> 00:08:09,849
like<font color="#E5E5E5"> you know hey there's a package</font>

245
00:08:07,750 --> 00:08:11,759
<font color="#E5E5E5">maybe check it out and that's what the</font>

246
00:08:09,849 --> 00:08:14,110
host OS does and everything<font color="#CCCCCC"> is all good</font>

247
00:08:11,759 --> 00:08:16,479
now the thing is<font color="#E5E5E5"> because this is a ring</font>

248
00:08:14,110 --> 00:08:18,099
<font color="#CCCCCC">buffer</font><font color="#E5E5E5"> by its very nature of like that</font>

249
00:08:16,479 --> 00:08:19,719
data<font color="#E5E5E5"> structure it's going to be very</font>

250
00:08:18,099 --> 00:08:22,539
<font color="#E5E5E5">serious and so it's not initially</font>

251
00:08:19,719 --> 00:08:24,400
appropriate for every single type<font color="#CCCCCC"> of</font>

252
00:08:22,539 --> 00:08:25,389
<font color="#E5E5E5">memory that</font><font color="#CCCCCC"> you want to have to every</font>

253
00:08:24,400 --> 00:08:27,099
type of<font color="#E5E5E5"> packet that you're going to have</font>

254
00:08:25,389 --> 00:08:28,479
to send between the guests in the host

255
00:08:27,099 --> 00:08:30,639
right let's<font color="#E5E5E5"> think about something like</font>

256
00:08:28,479 --> 00:08:32,229
storage<font color="#CCCCCC"> like just mentioned that's gonna</font>

257
00:08:30,639 --> 00:08:33,880
be a lot<font color="#CCCCCC"> of data at a very high</font>

258
00:08:32,229 --> 00:08:34,599
frequency<font color="#E5E5E5"> typically or even networking</font>

259
00:08:33,880 --> 00:08:37,270
right

260
00:08:34,599 --> 00:08:38,919
and so having to send all that data

261
00:08:37,270 --> 00:08:40,390
<font color="#E5E5E5">through a ring buffer every time that</font>

262
00:08:38,919 --> 00:08:43,000
<font color="#E5E5E5">means having</font><font color="#CCCCCC"> to copy data</font><font color="#E5E5E5"> in and out</font>

263
00:08:40,390 --> 00:08:44,110
every<font color="#E5E5E5"> time and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> means serializing</font>

264
00:08:43,000 --> 00:08:46,180
all those operations

265
00:08:44,110 --> 00:08:48,850
that's not<font color="#CCCCCC"> initially tractable</font><font color="#E5E5E5"> it's not</font>

266
00:08:46,180 --> 00:08:51,849
scalable<font color="#CCCCCC"> so instead we introduced a</font>

267
00:08:48,850 --> 00:08:54,010
concept of basically<font color="#E5E5E5"> you can attach a</font>

268
00:08:51,850 --> 00:08:56,380
piece of shared<font color="#CCCCCC"> physical memory to</font>

269
00:08:54,010 --> 00:08:59,800
a packet<font color="#E5E5E5"> in this case in the case of</font>

270
00:08:56,380 --> 00:09:01,689
hyper-v<font color="#E5E5E5"> we call that</font><font color="#CCCCCC"> AG paddle G paddle</font>

271
00:08:59,800 --> 00:09:03,490
stands for guests physical address

272
00:09:01,690 --> 00:09:06,220
descriptor list if you're<font color="#E5E5E5"> familiar with</font>

273
00:09:03,490 --> 00:09:08,380
<font color="#E5E5E5">Windows kernel concepts that is</font>

274
00:09:06,220 --> 00:09:10,600
basically an MDL<font color="#E5E5E5"> right</font><font color="#CCCCCC"> a memory</font>

275
00:09:08,380 --> 00:09:13,330
descriptor list<font color="#E5E5E5"> but except that it</font><font color="#CCCCCC"> spans</font>

276
00:09:10,600 --> 00:09:15,640
<font color="#E5E5E5">the</font><font color="#CCCCCC"> boundary between you know different</font>

277
00:09:13,330 --> 00:09:17,530
memory partitions<font color="#CCCCCC"> and so basically a</font>

278
00:09:15,640 --> 00:09:19,150
packet has the ability when it wants to

279
00:09:17,530 --> 00:09:21,130
<font color="#CCCCCC">send a big piece of data for</font><font color="#E5E5E5"> example</font>

280
00:09:19,150 --> 00:09:22,720
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> guest of the host</font><font color="#CCCCCC"> to instead</font><font color="#E5E5E5"> of</font>

281
00:09:21,130 --> 00:09:24,640
<font color="#E5E5E5">copying that into the ring buffer</font><font color="#CCCCCC"> system</font>

282
00:09:22,720 --> 00:09:26,410
<font color="#E5E5E5">just going to say</font><font color="#CCCCCC"> via tell VM bus</font><font color="#E5E5E5"> okay</font>

283
00:09:24,640 --> 00:09:27,730
well I want to send this piece of<font color="#E5E5E5"> data</font>

284
00:09:26,410 --> 00:09:30,069
it's in this piece of physical memory

285
00:09:27,730 --> 00:09:32,320
<font color="#CCCCCC">tell the host that</font><font color="#E5E5E5"> is allowed to map it</font>

286
00:09:30,070 --> 00:09:34,660
<font color="#E5E5E5">out and then either read or write data</font>

287
00:09:32,320 --> 00:09:37,270
to<font color="#E5E5E5"> and</font><font color="#CCCCCC"> from it and then</font><font color="#E5E5E5"> everything is</font>

288
00:09:34,660 --> 00:09:39,699
<font color="#E5E5E5">all</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so at</font><font color="#E5E5E5"> this point you</font>

289
00:09:37,270 --> 00:09:42,490
<font color="#CCCCCC">basically know everything about hyper-v</font>

290
00:09:39,700 --> 00:09:45,100
that<font color="#E5E5E5"> I do</font><font color="#CCCCCC"> everyone in this room is</font><font color="#E5E5E5"> like</font>

291
00:09:42,490 --> 00:09:47,440
a hyper-v expert and so now we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> start</font>

292
00:09:45,100 --> 00:09:50,230
diving deeper into<font color="#CCCCCC"> all the concepts that</font>

293
00:09:47,440 --> 00:09:52,270
<font color="#CCCCCC">are</font><font color="#E5E5E5"> going to apply more specifically to</font>

294
00:09:50,230 --> 00:09:53,980
the<font color="#E5E5E5"> component that we're actually going</font>

295
00:09:52,270 --> 00:09:57,210
to exploit today<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> component is</font>

296
00:09:53,980 --> 00:10:00,820
called VM switch<font color="#E5E5E5"> so looking at and this</font>

297
00:09:57,210 --> 00:10:03,100
<font color="#E5E5E5">this kind of diagram from earlier that</font>

298
00:10:00,820 --> 00:10:05,620
<font color="#CCCCCC">diagram instead of it shows</font><font color="#E5E5E5"> exact same</font>

299
00:10:03,100 --> 00:10:08,080
thing except<font color="#CCCCCC"> that now instead of</font><font color="#E5E5E5"> showing</font>

300
00:10:05,620 --> 00:10:13,210
you<font color="#CCCCCC"> know access to storage hardware we</font>

301
00:10:08,080 --> 00:10:14,860
are showing access to<font color="#CCCCCC"> two networking</font>

302
00:10:13,210 --> 00:10:17,170
<font color="#CCCCCC">hardware right and so VMs which is</font>

303
00:10:14,860 --> 00:10:19,870
basically just<font color="#E5E5E5"> that is a virtual switch</font>

304
00:10:17,170 --> 00:10:21,760
<font color="#E5E5E5">that gives access to the</font><font color="#CCCCCC"> various network</font>

305
00:10:19,870 --> 00:10:24,040
<font color="#E5E5E5">hardware that is accessible from</font><font color="#CCCCCC"> the</font>

306
00:10:21,760 --> 00:10:26,830
host OS to the guest OS and so any

307
00:10:24,040 --> 00:10:29,170
network<font color="#E5E5E5"> any network packets basically</font>

308
00:10:26,830 --> 00:10:30,940
that is<font color="#E5E5E5"> coming from the guest OS or</font>

309
00:10:29,170 --> 00:10:33,400
going to the guest OS<font color="#E5E5E5"> has to go through</font>

310
00:10:30,940 --> 00:10:35,710
<font color="#CCCCCC">VM sewage</font><font color="#E5E5E5"> and so it is a you know it's</font>

311
00:10:33,400 --> 00:10:38,949
it's a<font color="#E5E5E5"> fairly complex component and</font>

312
00:10:35,710 --> 00:10:42,340
obviously it<font color="#E5E5E5"> is something that</font><font color="#CCCCCC"> is going</font>

313
00:10:38,950 --> 00:10:44,580
<font color="#CCCCCC">to require you know</font><font color="#E5E5E5"> yeah a fair</font><font color="#CCCCCC"> amount</font>

314
00:10:42,340 --> 00:10:47,110
of complexity<font color="#E5E5E5"> for one thing but also</font>

315
00:10:44,580 --> 00:10:49,420
because it is<font color="#CCCCCC"> going to be handling all</font>

316
00:10:47,110 --> 00:10:51,640
this<font color="#E5E5E5"> data that is you know a</font><font color="#CCCCCC"> very high</font>

317
00:10:49,420 --> 00:10:53,860
<font color="#CCCCCC">frequency and a lot of</font><font color="#E5E5E5"> high volume as</font>

318
00:10:51,640 --> 00:10:56,500
<font color="#E5E5E5">well is going to require some some</font>

319
00:10:53,860 --> 00:10:59,470
interesting<font color="#CCCCCC"> engineering so taking a look</font>

320
00:10:56,500 --> 00:11:00,820
at how this works<font color="#E5E5E5"> basically this is the</font>

321
00:10:59,470 --> 00:11:03,880
initial I'm<font color="#E5E5E5"> gonna try to show</font><font color="#CCCCCC"> you like</font>

322
00:11:00,820 --> 00:11:06,370
the initialization<font color="#CCCCCC"> sequence</font><font color="#E5E5E5"> of a fee of</font>

323
00:11:03,880 --> 00:11:07,680
<font color="#CCCCCC">the M</font><font color="#E5E5E5"> switch</font><font color="#CCCCCC"> oh also yeah</font><font color="#E5E5E5"> after I did</font>

324
00:11:06,370 --> 00:11:09,140
miss a<font color="#E5E5E5"> little part so the</font>

325
00:11:07,680 --> 00:11:12,120
<font color="#CCCCCC">DMS which is actually implemented is</font>

326
00:11:09,140 --> 00:11:14,250
<font color="#CCCCCC">emulates a network card</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> it uses</font>

327
00:11:12,120 --> 00:11:18,870
the arm<font color="#E5E5E5"> disk protocol which stands for</font>

328
00:11:14,250 --> 00:11:20,310
<font color="#E5E5E5">remote and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> protocol which is is</font>

329
00:11:18,870 --> 00:11:21,750
<font color="#E5E5E5">actually something that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of people</font>

330
00:11:20,310 --> 00:11:23,699
are<font color="#E5E5E5"> familiar with</font><font color="#CCCCCC"> uh networking expert</font>

331
00:11:21,750 --> 00:11:25,440
<font color="#CCCCCC">as far as I understand the remote</font><font color="#E5E5E5"> end</font>

332
00:11:23,700 --> 00:11:27,300
this protocol is<font color="#CCCCCC"> just something that has</font>

333
00:11:25,440 --> 00:11:31,230
<font color="#E5E5E5">been used for a while</font><font color="#CCCCCC"> by Microsoft to</font>

334
00:11:27,300 --> 00:11:33,420
<font color="#E5E5E5">implement basically USB</font><font color="#CCCCCC"> network cards</font>

335
00:11:31,230 --> 00:11:35,820
right so you can kind of<font color="#E5E5E5"> think of the VM</font>

336
00:11:33,420 --> 00:11:38,250
switch as implementing a USB<font color="#CCCCCC"> network</font>

337
00:11:35,820 --> 00:11:41,040
card over VM bus so<font color="#E5E5E5"> really we're just</font>

338
00:11:38,250 --> 00:11:42,600
<font color="#E5E5E5">changing changing the mode</font><font color="#CCCCCC"> of</font>

339
00:11:41,040 --> 00:11:44,279
transportation<font color="#CCCCCC"> but</font><font color="#E5E5E5"> then implementing</font>

340
00:11:42,600 --> 00:11:46,950
like a completely standard protocol and

341
00:11:44,279 --> 00:11:48,000
so nothing's changed<font color="#CCCCCC"> there and so it's</font>

342
00:11:46,950 --> 00:11:50,430
kind of a thing that's interesting is

343
00:11:48,000 --> 00:11:51,779
<font color="#CCCCCC">that then VM switch has to handle two</font>

344
00:11:50,430 --> 00:11:54,989
types<font color="#E5E5E5"> of messages right it's going to</font>

345
00:11:51,779 --> 00:11:56,399
<font color="#E5E5E5">first handle messages that are specific</font>

346
00:11:54,990 --> 00:11:58,860
to<font color="#E5E5E5"> VM switch and so that's gonna</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to</font>

347
00:11:56,399 --> 00:12:00,630
<font color="#E5E5E5">be an</font><font color="#CCCCCC"> example is basically typically the</font>

348
00:11:58,860 --> 00:12:03,690
first<font color="#CCCCCC"> message that you're going to</font><font color="#E5E5E5"> be</font>

349
00:12:00,630 --> 00:12:06,120
<font color="#E5E5E5">sending over VM bus from the guests to</font>

350
00:12:03,690 --> 00:12:07,770
the<font color="#CCCCCC"> host</font><font color="#E5E5E5"> this is going to say</font><font color="#CCCCCC"> ok hi I</font>

351
00:12:06,120 --> 00:12:09,930
want to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to VM switched protocol</font>

352
00:12:07,770 --> 00:12:11,399
version<font color="#E5E5E5"> 5 please then the answers are</font>

353
00:12:09,930 --> 00:12:13,500
gonna<font color="#E5E5E5"> be</font><font color="#CCCCCC"> like ok</font><font color="#E5E5E5"> cool</font>

354
00:12:11,399 --> 00:12:15,570
and after<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> going to say ok</font><font color="#E5E5E5"> now</font>

355
00:12:13,500 --> 00:12:17,130
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we talk the same language of same</font>

356
00:12:15,570 --> 00:12:19,200
<font color="#E5E5E5">VM switch language for VM switch</font>

357
00:12:17,130 --> 00:12:21,300
messages<font color="#CCCCCC"> I want to be able</font><font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> to</font>

358
00:12:19,200 --> 00:12:23,339
you<font color="#CCCCCC"> in remote and dispersion</font>

359
00:12:21,300 --> 00:12:25,319
six-point-three right and at that point

360
00:12:23,339 --> 00:12:25,920
again<font color="#E5E5E5"> hopefully VM switch like</font><font color="#CCCCCC"> ok cool</font>

361
00:12:25,320 --> 00:12:29,160
<font color="#E5E5E5">whatever</font>

362
00:12:25,920 --> 00:12:30,959
but after<font color="#E5E5E5"> that is going to start doing</font>

363
00:12:29,160 --> 00:12:32,969
<font color="#CCCCCC">more setup phase again very specific to</font>

364
00:12:30,959 --> 00:12:35,459
<font color="#E5E5E5">VM switch that is going to then allow</font><font color="#CCCCCC"> it</font>

365
00:12:32,970 --> 00:12:37,430
to send<font color="#CCCCCC"> or</font><font color="#E5E5E5"> end this message</font><font color="#CCCCCC"> --is and the</font>

366
00:12:35,459 --> 00:12:39,569
things that are going<font color="#CCCCCC"> to happen here is</font>

367
00:12:37,430 --> 00:12:42,000
basically<font color="#E5E5E5"> the guest OS is going to</font>

368
00:12:39,570 --> 00:12:43,770
allocate<font color="#E5E5E5"> two buffers</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> called the</font>

369
00:12:42,000 --> 00:12:46,020
receive buffer and one called the state

370
00:12:43,770 --> 00:12:47,790
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the send buffer and basically the</font>

371
00:12:46,020 --> 00:12:50,310
send buffer and the receive buffer are

372
00:12:47,790 --> 00:12:52,380
both going<font color="#E5E5E5"> to be shared memory buffers</font>

373
00:12:50,310 --> 00:12:56,010
<font color="#CCCCCC">so again</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> earlier they</font>

374
00:12:52,380 --> 00:12:57,779
basically<font color="#E5E5E5"> defined as G paddles allocated</font>

375
00:12:56,010 --> 00:13:00,029
by the guest<font color="#E5E5E5"> the guest sends them over</font>

376
00:12:57,779 --> 00:13:01,200
to the<font color="#CCCCCC"> hosts</font><font color="#E5E5E5"> and then the host and the</font>

377
00:13:00,029 --> 00:13:04,770
guests are able to<font color="#E5E5E5"> use that as</font>

378
00:13:01,200 --> 00:13:07,740
additional additional communications

379
00:13:04,770 --> 00:13:11,670
channels<font color="#E5E5E5"> in addition to to the</font><font color="#CCCCCC"> VN bus</font>

380
00:13:07,740 --> 00:13:13,589
ring<font color="#CCCCCC"> buffer right</font><font color="#E5E5E5"> and so then the send</font>

381
00:13:11,670 --> 00:13:16,770
buffer is going<font color="#CCCCCC"> to be used by the guest</font>

382
00:13:13,589 --> 00:13:18,510
OS<font color="#E5E5E5"> to send</font><font color="#CCCCCC"> or in this</font><font color="#E5E5E5"> message</font><font color="#CCCCCC"> 'as to the</font>

383
00:13:16,770 --> 00:13:19,650
<font color="#E5E5E5">host and I'm pretty sure you can guess</font>

384
00:13:18,510 --> 00:13:21,000
what<font color="#E5E5E5"> the receive buffer is going to be</font>

385
00:13:19,650 --> 00:13:24,780
used for so

386
00:13:21,000 --> 00:13:26,790
that's basically it now going deeper

387
00:13:24,780 --> 00:13:29,400
into how this send buffer<font color="#E5E5E5"> and the</font>

388
00:13:26,790 --> 00:13:32,250
receive buffer<font color="#E5E5E5"> how those buffers work</font>

389
00:13:29,400 --> 00:13:33,480
well as<font color="#E5E5E5"> mentioned one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> reasons</font>

390
00:13:32,250 --> 00:13:35,250
that you might want to have these

391
00:13:33,480 --> 00:13:36,930
buffers like<font color="#CCCCCC"> the shared</font><font color="#E5E5E5"> buffer in</font>

392
00:13:35,250 --> 00:13:39,000
addition to ring buffer<font color="#E5E5E5"> is that you want</font>

393
00:13:36,930 --> 00:13:41,880
to be<font color="#CCCCCC"> able to send data at a higher</font>

394
00:13:39,000 --> 00:13:43,320
frequency<font color="#E5E5E5"> in parallel</font><font color="#CCCCCC"> and maybe even</font>

395
00:13:41,880 --> 00:13:44,370
like more volume whatever<font color="#E5E5E5"> the thing is</font>

396
00:13:43,320 --> 00:13:45,570
if you<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> be doing things in</font>

397
00:13:44,370 --> 00:13:47,700
parallel<font color="#CCCCCC"> well you can't just have one</font>

398
00:13:45,570 --> 00:13:50,580
buffer<font color="#E5E5E5"> that allows you to just send</font><font color="#CCCCCC"> one</font>

399
00:13:47,700 --> 00:13:53,010
message<font color="#E5E5E5"> at a time so once as soon as the</font>

400
00:13:50,580 --> 00:13:55,560
guest OS allocates those buffers and

401
00:13:53,010 --> 00:13:57,540
sends them over to the<font color="#E5E5E5"> host what happens</font>

402
00:13:55,560 --> 00:14:00,810
is the host actually<font color="#CCCCCC"> subdivides them</font>

403
00:13:57,540 --> 00:14:02,189
<font color="#E5E5E5">into smaller sub allocations which might</font>

404
00:14:00,810 --> 00:14:04,380
seem<font color="#E5E5E5"> like a trivial detail but it will</font>

405
00:14:02,190 --> 00:14:06,660
come up<font color="#E5E5E5"> later so bear with me</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> at</font>

406
00:14:04,380 --> 00:14:08,070
<font color="#E5E5E5">that point once that's done the guest OS</font>

407
00:14:06,660 --> 00:14:10,020
is actually able<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> sending and</font>

408
00:14:08,070 --> 00:14:12,510
receiving<font color="#CCCCCC"> are in dismiss</font><font color="#E5E5E5"> ages and so</font>

409
00:14:10,020 --> 00:14:14,430
let's say wants to say ascend<font color="#E5E5E5"> and</font><font color="#CCCCCC"> or in</font>

410
00:14:12,510 --> 00:14:18,930
this query message it first generates it

411
00:14:14,430 --> 00:14:21,359
copies it into<font color="#E5E5E5"> the send buffer sends a</font>

412
00:14:18,930 --> 00:14:23,130
<font color="#E5E5E5">VM bus message to the host OS to say hey</font>

413
00:14:21,360 --> 00:14:25,050
<font color="#E5E5E5">check</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> out there's a message in the</font>

414
00:14:23,130 --> 00:14:28,020
send buffer<font color="#E5E5E5"> sub allocation</font><font color="#CCCCCC"> 0 you should</font>

415
00:14:25,050 --> 00:14:30,839
really<font color="#E5E5E5"> you know process</font><font color="#CCCCCC"> that VMS</font><font color="#E5E5E5"> which</font>

416
00:14:28,020 --> 00:14:32,460
is like<font color="#CCCCCC"> okay cool</font><font color="#E5E5E5"> grabs it acknowledges</font>

417
00:14:30,840 --> 00:14:34,760
that<font color="#CCCCCC"> grabbed it so now the send buffer</font>

418
00:14:32,460 --> 00:14:37,830
is free<font color="#E5E5E5"> again can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> used if necessary</font>

419
00:14:34,760 --> 00:14:39,810
<font color="#E5E5E5">then it processes it generates a</font>

420
00:14:37,830 --> 00:14:42,900
response<font color="#CCCCCC"> puts it into</font><font color="#E5E5E5"> the receive buffer</font>

421
00:14:39,810 --> 00:14:44,760
<font color="#E5E5E5">and then tells the guest to</font><font color="#CCCCCC"> us that</font>

422
00:14:42,900 --> 00:14:46,740
there's something<font color="#CCCCCC"> a</font><font color="#E5E5E5"> receive buffer cell</font>

423
00:14:44,760 --> 00:14:49,680
<font color="#CCCCCC">allocation number</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> guess to us grabs</font>

424
00:14:46,740 --> 00:14:51,090
it is very happy<font color="#CCCCCC"> and just acknowledges</font>

425
00:14:49,680 --> 00:14:52,290
<font color="#CCCCCC">that has grabbed it and once</font><font color="#E5E5E5"> again both</font>

426
00:14:51,090 --> 00:14:55,650
<font color="#CCCCCC">the send buffer and the receive buffer</font>

427
00:14:52,290 --> 00:14:58,140
are completely free<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so that's how</font>

428
00:14:55,650 --> 00:15:00,360
you<font color="#E5E5E5"> are able to to just kind of use</font>

429
00:14:58,140 --> 00:15:03,930
these buffers in a way that is more

430
00:15:00,360 --> 00:15:08,220
parallel<font color="#E5E5E5"> than the then just sending the</font>

431
00:15:03,930 --> 00:15:10,199
sending stuff through through through<font color="#CCCCCC"> vm</font>

432
00:15:08,220 --> 00:15:12,839
bus and the reason for<font color="#CCCCCC"> that is that you</font>

433
00:15:10,200 --> 00:15:14,790
are<font color="#E5E5E5"> actually the this is basically gonna</font>

434
00:15:12,839 --> 00:15:16,920
explain it<font color="#E5E5E5"> taking a closer look at how</font>

435
00:15:14,790 --> 00:15:19,560
these things<font color="#E5E5E5"> are processed on</font><font color="#CCCCCC"> the host</font>

436
00:15:16,920 --> 00:15:21,839
OS side the thing is you<font color="#CCCCCC"> have actually a</font>

437
00:15:19,560 --> 00:15:24,000
number<font color="#E5E5E5"> of threads right and one that</font>

438
00:15:21,839 --> 00:15:26,040
only one thread<font color="#CCCCCC"> is ever going to</font><font color="#E5E5E5"> handle</font>

439
00:15:24,000 --> 00:15:28,250
<font color="#E5E5E5">VM</font><font color="#CCCCCC"> bus messages</font><font color="#E5E5E5"> right that's basically a</font>

440
00:15:26,040 --> 00:15:30,360
<font color="#E5E5E5">VM bus thread is like belongs to via bus</font>

441
00:15:28,250 --> 00:15:33,210
whenever it sees a<font color="#E5E5E5"> message coming from</font>

442
00:15:30,360 --> 00:15:34,470
<font color="#E5E5E5">VMs it is going to handle it</font><font color="#CCCCCC"> call a</font>

443
00:15:33,210 --> 00:15:36,840
<font color="#E5E5E5">callback from VM switch</font>

444
00:15:34,470 --> 00:15:38,130
and then<font color="#CCCCCC"> only then handle the</font><font color="#E5E5E5"> next</font>

445
00:15:36,840 --> 00:15:40,920
message<font color="#E5E5E5"> so these operations are</font>

446
00:15:38,130 --> 00:15:42,750
completely serialized<font color="#E5E5E5"> and the way that</font>

447
00:15:40,920 --> 00:15:44,550
you know these send buffers actually

448
00:15:42,750 --> 00:15:46,950
allow parallelism is by<font color="#E5E5E5"> introducing new</font>

449
00:15:44,550 --> 00:15:48,599
threads<font color="#E5E5E5"> and so to have an another</font>

450
00:15:46,950 --> 00:15:50,880
<font color="#CCCCCC">example that</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of illustrates this a</font>

451
00:15:48,600 --> 00:15:52,950
<font color="#E5E5E5">little better</font><font color="#CCCCCC"> let's say we have our</font><font color="#E5E5E5"> disk</font>

452
00:15:50,880 --> 00:15:56,370
we<font color="#CCCCCC"> aren't just</font><font color="#E5E5E5"> set messages</font><font color="#CCCCCC"> in in</font><font color="#E5E5E5"> both</font>

453
00:15:52,950 --> 00:15:58,380
<font color="#E5E5E5">slots of this send buffer</font><font color="#CCCCCC"> the guest OS</font>

454
00:15:56,370 --> 00:16:03,090
<font color="#E5E5E5">tells the host</font><font color="#CCCCCC"> dies</font><font color="#E5E5E5"> okay here we have</font>

455
00:15:58,380 --> 00:16:06,240
these messages<font color="#CCCCCC"> so the host OS</font><font color="#E5E5E5"> VM</font><font color="#CCCCCC"> buss</font>

456
00:16:03,090 --> 00:16:08,490
channel of thread receives them instead

457
00:16:06,240 --> 00:16:09,720
<font color="#CCCCCC">of</font><font color="#E5E5E5"> just you</font><font color="#CCCCCC"> know actually processing it</font>

458
00:16:08,490 --> 00:16:11,910
directly<font color="#E5E5E5"> is just going to put it into</font>

459
00:16:09,720 --> 00:16:13,500
<font color="#E5E5E5">queue and at that point it's just going</font>

460
00:16:11,910 --> 00:16:14,730
<font color="#E5E5E5">to</font><font color="#CCCCCC"> acknowledge it</font><font color="#E5E5E5"> grab the second</font>

461
00:16:13,500 --> 00:16:17,970
message in the same way<font color="#E5E5E5"> just going to</font>

462
00:16:14,730 --> 00:16:20,100
put<font color="#E5E5E5"> into queue and then after that only</font>

463
00:16:17,970 --> 00:16:22,500
once those messages<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been handled</font>

464
00:16:20,100 --> 00:16:23,880
<font color="#CCCCCC">well you actually have an additional</font><font color="#E5E5E5"> in</font>

465
00:16:22,500 --> 00:16:25,860
additional<font color="#E5E5E5"> two threads which are going</font>

466
00:16:23,880 --> 00:16:27,150
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be the artist</font><font color="#E5E5E5"> worker threads in</font>

467
00:16:25,860 --> 00:16:28,470
practice there's more than just<font color="#E5E5E5"> two but</font>

468
00:16:27,150 --> 00:16:30,240
you know<font color="#E5E5E5"> first implicitly I'm going to</font>

469
00:16:28,470 --> 00:16:32,220
say there's two and those threads can

470
00:16:30,240 --> 00:16:34,230
run in<font color="#CCCCCC"> parallel they</font><font color="#E5E5E5"> can both each</font>

471
00:16:32,220 --> 00:16:36,720
complete a message or do whatever just

472
00:16:34,230 --> 00:16:39,810
like process them<font color="#E5E5E5"> and then they can both</font>

473
00:16:36,720 --> 00:16:41,420
each copy<font color="#E5E5E5"> the the results of those</font>

474
00:16:39,810 --> 00:16:43,560
messages<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the receive buffer</font>

475
00:16:41,420 --> 00:16:45,360
<font color="#E5E5E5">acknowledge that they have in process</font>

476
00:16:43,560 --> 00:16:47,010
<font color="#CCCCCC">and the receive buffer contains the</font>

477
00:16:45,360 --> 00:16:49,620
responses and then the<font color="#E5E5E5"> guests to us can</font>

478
00:16:47,010 --> 00:16:52,590
read back those responses<font color="#E5E5E5"> and you know</font>

479
00:16:49,620 --> 00:16:55,020
do its thing<font color="#E5E5E5"> so I</font><font color="#CCCCCC"> realized</font><font color="#E5E5E5"> that this is</font>

480
00:16:52,590 --> 00:16:56,370
all you know<font color="#CCCCCC"> a little dense but I swear</font>

481
00:16:55,020 --> 00:16:58,199
that all<font color="#E5E5E5"> this information is</font><font color="#CCCCCC"> actually</font>

482
00:16:56,370 --> 00:17:01,410
useful<font color="#E5E5E5"> for understanding vulnerability</font>

483
00:16:58,200 --> 00:17:03,990
and then the underlying<font color="#CCCCCC"> exploit so let's</font>

484
00:17:01,410 --> 00:17:07,170
get into that how do we exploit a system

485
00:17:03,990 --> 00:17:09,660
like this well one thing that<font color="#E5E5E5"> I always</font>

486
00:17:07,170 --> 00:17:11,280
<font color="#E5E5E5">like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is kind of look at</font>

487
00:17:09,660 --> 00:17:13,230
initialization sequences<font color="#CCCCCC"> just because</font>

488
00:17:11,280 --> 00:17:15,030
they typically<font color="#E5E5E5"> have well they sometimes</font>

489
00:17:13,230 --> 00:17:17,460
have weird state machines and you're not

490
00:17:15,030 --> 00:17:18,720
<font color="#E5E5E5">always</font><font color="#CCCCCC"> sure if you know the developer</font>

491
00:17:17,460 --> 00:17:20,490
has really thought through<font color="#E5E5E5"> what might</font>

492
00:17:18,720 --> 00:17:23,160
happen if you<font color="#E5E5E5"> send a message out</font><font color="#CCCCCC"> of</font>

493
00:17:20,490 --> 00:17:24,480
order<font color="#E5E5E5"> or like one one message more than</font>

494
00:17:23,160 --> 00:17:27,420
once<font color="#E5E5E5"> or something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and that's</font>

495
00:17:24,480 --> 00:17:29,850
<font color="#E5E5E5">exactly what kind of bug this was this</font>

496
00:17:27,420 --> 00:17:32,250
<font color="#E5E5E5">actually was so taking a look back at</font>

497
00:17:29,850 --> 00:17:33,870
this diagram<font color="#CCCCCC"> from</font><font color="#E5E5E5"> earlier right where</font>

498
00:17:32,250 --> 00:17:35,820
you just have a<font color="#E5E5E5"> very first two messages</font>

499
00:17:33,870 --> 00:17:37,229
<font color="#E5E5E5">they're being sent over by the guest to</font>

500
00:17:35,820 --> 00:17:39,810
us to the<font color="#E5E5E5"> host to us</font>

501
00:17:37,230 --> 00:17:41,010
<font color="#E5E5E5">they just set the</font><font color="#CCCCCC"> set the protocol</font>

502
00:17:39,810 --> 00:17:45,030
versions everything's cool

503
00:17:41,010 --> 00:17:46,680
but<font color="#E5E5E5"> after that what happens is well the</font>

504
00:17:45,030 --> 00:17:48,389
guest OS wants to<font color="#E5E5E5"> send over a</font><font color="#CCCCCC"> receipt</font>

505
00:17:46,680 --> 00:17:50,100
<font color="#CCCCCC">but first at first allocates a G paddle</font>

506
00:17:48,390 --> 00:17:52,050
right I shared<font color="#E5E5E5"> in my shared piece of</font>

507
00:17:50,100 --> 00:17:54,330
memory<font color="#E5E5E5"> and it sends it over there</font><font color="#CCCCCC"> guess</font>

508
00:17:52,050 --> 00:17:56,879
<font color="#CCCCCC">it's of a host saying okay uses gee pal</font>

509
00:17:54,330 --> 00:17:58,409
<font color="#E5E5E5">zero as</font><font color="#CCCCCC"> your receive buffer</font><font color="#E5E5E5"> well it</font>

510
00:17:56,880 --> 00:17:59,670
turns out<font color="#E5E5E5"> at a time one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> things</font>

511
00:17:58,410 --> 00:18:01,950
that the developers had not thought<font color="#CCCCCC"> of</font>

512
00:17:59,670 --> 00:18:04,800
was<font color="#CCCCCC"> that</font><font color="#E5E5E5"> an attacker might actually want</font>

513
00:18:01,950 --> 00:18:07,380
<font color="#E5E5E5">well like just a guest to us might send</font>

514
00:18:04,800 --> 00:18:09,570
this receive buffer<font color="#E5E5E5"> message more than</font>

515
00:18:07,380 --> 00:18:11,820
once<font color="#CCCCCC"> and taking a</font><font color="#E5E5E5"> look at what happens</font>

516
00:18:09,570 --> 00:18:14,070
well if I<font color="#E5E5E5"> allocate a second G paddle and</font>

517
00:18:11,820 --> 00:18:15,960
then send it over<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to just up</font>

518
00:18:14,070 --> 00:18:18,210
the receive buffer pointer to point to

519
00:18:15,960 --> 00:18:19,760
<font color="#E5E5E5">that second G paddle and if I do that</font>

520
00:18:18,210 --> 00:18:22,080
third time you know that happens again

521
00:18:19,760 --> 00:18:24,180
<font color="#E5E5E5">which doesn't feel like a big deal right</font>

522
00:18:22,080 --> 00:18:27,629
<font color="#E5E5E5">the only thing that's kind of weird</font>

523
00:18:24,180 --> 00:18:29,760
is well those G paddles<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> & 1 are still</font>

524
00:18:27,630 --> 00:18:30,870
mapped in the<font color="#CCCCCC"> host to us</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> and at</font>

525
00:18:29,760 --> 00:18:32,190
<font color="#E5E5E5">that point you may think okay well this</font>

526
00:18:30,870 --> 00:18:34,439
is kind of a bug it doesn't seem like a

527
00:18:32,190 --> 00:18:36,930
big<font color="#E5E5E5"> deal</font><font color="#CCCCCC"> it seems like it might</font><font color="#E5E5E5"> be you</font>

528
00:18:34,440 --> 00:18:38,370
<font color="#CCCCCC">know a memory leak possibly which could</font>

529
00:18:36,930 --> 00:18:40,350
<font color="#E5E5E5">lead to a dose and practice it doesn't</font>

530
00:18:38,370 --> 00:18:42,510
<font color="#E5E5E5">but it</font><font color="#CCCCCC"> could be a problem but it's</font><font color="#E5E5E5"> not a</font>

531
00:18:40,350 --> 00:18:44,760
big deal<font color="#CCCCCC"> until you start looking more</font>

532
00:18:42,510 --> 00:18:46,560
<font color="#E5E5E5">closely at</font><font color="#CCCCCC"> how this update of a received</font>

533
00:18:44,760 --> 00:18:48,390
<font color="#E5E5E5">buffer which was not ever meant to be an</font>

534
00:18:46,560 --> 00:18:51,780
update<font color="#E5E5E5"> as much an initialization process</font>

535
00:18:48,390 --> 00:18:53,100
actually<font color="#CCCCCC"> works it</font><font color="#E5E5E5"> actually works in</font>

536
00:18:51,780 --> 00:18:56,940
<font color="#E5E5E5">three steps</font>

537
00:18:53,100 --> 00:19:00,060
<font color="#CCCCCC">which only</font><font color="#E5E5E5"> exists because if you'll</font>

538
00:18:56,940 --> 00:19:02,880
recall the host<font color="#CCCCCC"> OS is responsible for</font>

539
00:19:00,060 --> 00:19:06,270
sub allocating these<font color="#CCCCCC"> received buffers</font>

540
00:19:02,880 --> 00:19:08,190
into smaller tiny buffers right<font color="#E5E5E5"> and so</font>

541
00:19:06,270 --> 00:19:10,379
that<font color="#CCCCCC"> means</font><font color="#E5E5E5"> that it actually keeps</font><font color="#CCCCCC"> track</font>

542
00:19:08,190 --> 00:19:12,750
of<font color="#E5E5E5"> two things it keeps track of a buffer</font>

543
00:19:10,380 --> 00:19:15,390
<font color="#E5E5E5">of a pointer to the buffer itself and</font>

544
00:19:12,750 --> 00:19:17,130
then it keeps track of the<font color="#E5E5E5"> bound like</font>

545
00:19:15,390 --> 00:19:18,800
the bounds of boundaries of these sub

546
00:19:17,130 --> 00:19:20,820
allocations<font color="#CCCCCC"> and so it does the</font>

547
00:19:18,800 --> 00:19:22,649
initialization<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the receive buffer in</font>

548
00:19:20,820 --> 00:19:25,679
three<font color="#E5E5E5"> steps first it updates the point</font>

549
00:19:22,650 --> 00:19:27,390
of<font color="#CCCCCC"> the buffer then it</font><font color="#E5E5E5"> updates</font><font color="#CCCCCC"> then it</font>

550
00:19:25,680 --> 00:19:29,970
<font color="#CCCCCC">generates the boundaries for these new</font>

551
00:19:27,390 --> 00:19:31,680
sub allocations<font color="#E5E5E5"> and then it updates the</font>

552
00:19:29,970 --> 00:19:32,910
boundaries<font color="#CCCCCC"> for you sub allocations and</font>

553
00:19:31,680 --> 00:19:35,730
<font color="#CCCCCC">what</font><font color="#E5E5E5"> you can see is that those three</font>

554
00:19:32,910 --> 00:19:37,230
operations are not in any<font color="#E5E5E5"> way atomic</font>

555
00:19:35,730 --> 00:19:38,490
right there is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> that</font>

556
00:19:37,230 --> 00:19:39,810
happens between the beginning<font color="#E5E5E5"> of this</font>

557
00:19:38,490 --> 00:19:41,490
function and the<font color="#E5E5E5"> end of this function in</font>

558
00:19:39,810 --> 00:19:43,379
addition to<font color="#E5E5E5"> that if you take a look at</font>

559
00:19:41,490 --> 00:19:45,990
the code there is no locking or at least

560
00:19:43,380 --> 00:19:47,400
no relevant locking for us<font color="#E5E5E5"> and so trying</font>

561
00:19:45,990 --> 00:19:50,130
<font color="#CCCCCC">to visualize</font><font color="#E5E5E5"> that a little bit more</font>

562
00:19:47,400 --> 00:19:52,250
let's say I'm<font color="#E5E5E5"> the guest and I say okay</font>

563
00:19:50,130 --> 00:19:54,600
please use<font color="#CCCCCC"> GPL</font><font color="#E5E5E5"> zero as a receive buffer</font>

564
00:19:52,250 --> 00:19:56,250
host<font color="#E5E5E5"> I was like okay it's illegal</font><font color="#CCCCCC"> I'm</font>

565
00:19:54,600 --> 00:19:59,040
going to<font color="#E5E5E5"> generate my bounds</font><font color="#CCCCCC"> gonna update</font>

566
00:19:56,250 --> 00:20:01,800
my bounds<font color="#E5E5E5"> everything's all cool it</font>

567
00:19:59,040 --> 00:20:02,050
acknowledges that<font color="#E5E5E5"> and then let's say</font><font color="#CCCCCC"> on</font>

568
00:20:01,800 --> 00:20:04,330
<font color="#E5E5E5">the</font>

569
00:20:02,050 --> 00:20:06,730
to us and<font color="#E5E5E5"> I wanted</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> G paddle</font><font color="#CCCCCC"> 1</font>

570
00:20:04,330 --> 00:20:08,470
which is slightly smaller<font color="#E5E5E5"> but that</font>

571
00:20:06,730 --> 00:20:08,800
<font color="#E5E5E5">shouldn't be</font><font color="#CCCCCC"> a problem it's like okay</font>

572
00:20:08,470 --> 00:20:10,840
<font color="#E5E5E5">cool</font>

573
00:20:08,800 --> 00:20:14,860
I'm gonna update my<font color="#E5E5E5"> my receive buffer</font>

574
00:20:10,840 --> 00:20:16,659
pointer and<font color="#E5E5E5"> well because</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> only</font>

575
00:20:14,860 --> 00:20:18,699
updated the receive buffer pointer in

576
00:20:16,660 --> 00:20:20,260
that very<font color="#CCCCCC"> first step</font><font color="#E5E5E5"> it has not</font><font color="#CCCCCC"> yet</font>

577
00:20:18,700 --> 00:20:22,810
generated the new bounds and so those

578
00:20:20,260 --> 00:20:24,640
old bounds<font color="#E5E5E5"> which are bigger than this</font>

579
00:20:22,810 --> 00:20:26,919
new<font color="#E5E5E5"> receive buffer are still being</font>

580
00:20:24,640 --> 00:20:29,770
<font color="#CCCCCC">applied to</font><font color="#E5E5E5"> the new receive buffer right</font>

581
00:20:26,920 --> 00:20:30,820
<font color="#CCCCCC">so then the second</font><font color="#E5E5E5"> step was generating</font>

582
00:20:29,770 --> 00:20:32,889
the new bounds while<font color="#E5E5E5"> they're still not</font>

583
00:20:30,820 --> 00:20:34,990
<font color="#E5E5E5">being applied and only after this third</font>

584
00:20:32,890 --> 00:20:38,050
<font color="#E5E5E5">step when the bounds of</font><font color="#CCCCCC"> stub allocations</font>

585
00:20:34,990 --> 00:20:41,440
are actually updated do you do you see

586
00:20:38,050 --> 00:20:43,600
the result and and that's basically the

587
00:20:41,440 --> 00:20:46,030
the RC vulnerability right<font color="#E5E5E5"> is that</font>

588
00:20:43,600 --> 00:20:48,189
<font color="#E5E5E5">during these two</font><font color="#CCCCCC"> Slyke this tiny window</font>

589
00:20:46,030 --> 00:20:50,920
in between<font color="#CCCCCC"> those two</font><font color="#E5E5E5"> steps you</font><font color="#CCCCCC"> can</font>

590
00:20:48,190 --> 00:20:53,770
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> if you are able to get a</font>

591
00:20:50,920 --> 00:20:55,210
parallel worker thread<font color="#E5E5E5"> because that's</font>

592
00:20:53,770 --> 00:20:57,220
that's those<font color="#CCCCCC"> are the threads</font><font color="#E5E5E5"> that are</font>

593
00:20:55,210 --> 00:20:59,170
<font color="#E5E5E5">writing</font><font color="#CCCCCC"> to that receive buffer</font><font color="#E5E5E5"> if you</font>

594
00:20:57,220 --> 00:21:00,700
can get one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those threads to write in</font>

595
00:20:59,170 --> 00:21:01,870
parallel to receive buffer<font color="#E5E5E5"> while you're</font>

596
00:21:00,700 --> 00:21:03,820
updating<font color="#E5E5E5"> the receive buffer which is</font><font color="#CCCCCC"> a</font>

597
00:21:01,870 --> 00:21:06,399
tiny window<font color="#CCCCCC"> of you know maybe like a</font><font color="#E5E5E5"> few</font>

598
00:21:03,820 --> 00:21:08,320
hundred cycles<font color="#E5E5E5"> then you're actually</font>

599
00:21:06,400 --> 00:21:10,240
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be able to write data out</font><font color="#CCCCCC"> of</font>

600
00:21:08,320 --> 00:21:12,820
balance<font color="#E5E5E5"> in the host</font><font color="#CCCCCC"> OS and that's kind</font>

601
00:21:10,240 --> 00:21:15,190
of a great bug for us now in practice

602
00:21:12,820 --> 00:21:16,510
exploiting this is not necessary trivial

603
00:21:15,190 --> 00:21:18,520
right you need<font color="#CCCCCC"> basically three things</font>

604
00:21:16,510 --> 00:21:19,629
<font color="#CCCCCC">you to be able to control the</font><font color="#E5E5E5"> data is</font>

605
00:21:18,520 --> 00:21:20,980
<font color="#CCCCCC">going to be</font><font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> be written</font><font color="#E5E5E5"> out of</font>

606
00:21:19,630 --> 00:21:22,420
<font color="#E5E5E5">balance</font><font color="#CCCCCC"> because if you don't</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> it</font>

607
00:21:20,980 --> 00:21:24,180
is<font color="#E5E5E5"> just garbage well it might be</font>

608
00:21:22,420 --> 00:21:26,590
exploitable it's very unlikely though

609
00:21:24,180 --> 00:21:28,510
<font color="#CCCCCC">then you</font><font color="#E5E5E5"> need to actually be</font><font color="#CCCCCC"> able to win</font>

610
00:21:26,590 --> 00:21:31,030
the race<font color="#CCCCCC"> right you need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able to</font>

611
00:21:28,510 --> 00:21:33,640
somehow massage the execution<font color="#CCCCCC"> State on</font>

612
00:21:31,030 --> 00:21:35,560
the host OS<font color="#E5E5E5"> such that that one thread</font><font color="#CCCCCC"> is</font>

613
00:21:33,640 --> 00:21:37,870
<font color="#E5E5E5">going to run way that one piece</font><font color="#CCCCCC"> of data</font>

614
00:21:35,560 --> 00:21:40,270
<font color="#CCCCCC">to</font><font color="#E5E5E5"> that one buffer at the exact right</font>

615
00:21:37,870 --> 00:21:41,739
time<font color="#E5E5E5"> which is not really trivial it</font>

616
00:21:40,270 --> 00:21:44,050
basically means getting<font color="#E5E5E5"> the host</font><font color="#CCCCCC"> OS</font><font color="#E5E5E5"> to</font>

617
00:21:41,740 --> 00:21:45,640
race itself<font color="#CCCCCC"> it's kind of weird and the</font>

618
00:21:44,050 --> 00:21:47,620
third thing<font color="#CCCCCC"> is you need to actually</font><font color="#E5E5E5"> be</font>

619
00:21:45,640 --> 00:21:50,260
able<font color="#E5E5E5"> to place a corruption target at a</font>

620
00:21:47,620 --> 00:21:52,209
known offset of your<font color="#CCCCCC"> received</font><font color="#E5E5E5"> buffer in</font>

621
00:21:50,260 --> 00:21:53,290
such a way that writing out a<font color="#CCCCCC"> bouncing</font>

622
00:21:52,210 --> 00:21:55,570
<font color="#CCCCCC">receive buffer is actually going to</font>

623
00:21:53,290 --> 00:21:58,600
overwrite you know a critical data

624
00:21:55,570 --> 00:22:00,970
structure so those are three<font color="#E5E5E5"> things that</font>

625
00:21:58,600 --> 00:22:03,490
<font color="#E5E5E5">we</font><font color="#CCCCCC"> need to actually</font><font color="#E5E5E5"> explain ability</font><font color="#CCCCCC"> none</font>

626
00:22:00,970 --> 00:22:06,880
<font color="#CCCCCC">of this is trivial</font><font color="#E5E5E5"> but hopefully it is</font>

627
00:22:03,490 --> 00:22:09,250
all<font color="#E5E5E5"> doable and that's going</font><font color="#CCCCCC"> to be what</font>

628
00:22:06,880 --> 00:22:11,170
I'm going<font color="#E5E5E5"> to try and cover here</font><font color="#CCCCCC"> so first</font>

629
00:22:09,250 --> 00:22:13,690
<font color="#E5E5E5">thing can we actually control is being</font>

630
00:22:11,170 --> 00:22:15,909
written<font color="#E5E5E5"> out of</font><font color="#CCCCCC"> bounce you historian</font>

631
00:22:13,690 --> 00:22:18,729
<font color="#CCCCCC">spheres yes basically</font><font color="#E5E5E5"> if you take a look</font>

632
00:22:15,909 --> 00:22:22,119
the oranges<font color="#E5E5E5"> protocol I'm going to have a</font>

633
00:22:18,729 --> 00:22:24,279
few sets of<font color="#CCCCCC"> messages and</font><font color="#E5E5E5"> well you're</font>

634
00:22:22,119 --> 00:22:25,539
going<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> a few</font><font color="#E5E5E5"> messages types a few</font>

635
00:22:24,279 --> 00:22:26,709
message types sorry

636
00:22:25,539 --> 00:22:28,869
the first<font color="#E5E5E5"> message type that is</font>

637
00:22:26,709 --> 00:22:30,429
interesting is well the<font color="#E5E5E5"> message type is</font>

638
00:22:28,869 --> 00:22:32,499
specifically interesting here is the

639
00:22:30,429 --> 00:22:34,659
<font color="#CCCCCC">artist query message the way that the</font>

640
00:22:32,499 --> 00:22:38,319
<font color="#E5E5E5">oranges</font><font color="#CCCCCC"> Cree message works is you give</font>

641
00:22:34,659 --> 00:22:39,940
the host OS<font color="#E5E5E5"> an</font><font color="#CCCCCC"> O it</font><font color="#E5E5E5"> like an ID for some</font>

642
00:22:38,319 --> 00:22:41,139
kind<font color="#E5E5E5"> of piece of data that you</font><font color="#CCCCCC"> want it</font>

643
00:22:39,940 --> 00:22:42,819
could be something like<font color="#E5E5E5"> your MAC address</font>

644
00:22:41,139 --> 00:22:45,639
<font color="#E5E5E5">or you know it's something like that</font>

645
00:22:42,819 --> 00:22:48,009
right<font color="#CCCCCC"> and then it's going to</font><font color="#E5E5E5"> return</font><font color="#CCCCCC"> it</font>

646
00:22:45,639 --> 00:22:49,629
in this<font color="#E5E5E5"> information buffer</font><font color="#CCCCCC"> that is</font>

647
00:22:48,009 --> 00:22:51,759
<font color="#E5E5E5">embedded</font><font color="#CCCCCC"> inside</font><font color="#E5E5E5"> of a packet</font><font color="#CCCCCC"> that is</font>

648
00:22:49,629 --> 00:22:54,009
going to be sent back to the guest to us

649
00:22:51,759 --> 00:22:54,399
so the idea here<font color="#E5E5E5"> is actually pretty</font>

650
00:22:54,009 --> 00:22:56,440
trivial

651
00:22:54,399 --> 00:23:00,549
<font color="#E5E5E5">you just find in it that you can</font><font color="#CCCCCC"> set</font>

652
00:22:56,440 --> 00:23:02,979
arbitrary data into through the<font color="#E5E5E5"> through</font>

653
00:23:00,549 --> 00:23:05,049
V<font color="#CCCCCC"> R</font><font color="#E5E5E5"> in this set message</font><font color="#CCCCCC"> and then you</font>

654
00:23:02,979 --> 00:23:07,209
just use the<font color="#CCCCCC"> artists query message to</font>

655
00:23:05,049 --> 00:23:09,249
have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> host OS</font><font color="#E5E5E5"> send you back that data</font>

656
00:23:07,209 --> 00:23:10,959
in such a way<font color="#CCCCCC"> that you know it's going</font>

657
00:23:09,249 --> 00:23:13,690
<font color="#E5E5E5">to overwrite other data out</font><font color="#CCCCCC"> of bounds</font>

658
00:23:10,959 --> 00:23:15,399
and and do blah blah blah<font color="#E5E5E5"> so this one</font>

659
00:23:13,690 --> 00:23:18,519
turns out is actually<font color="#E5E5E5"> not a not a</font><font color="#CCCCCC"> big</font>

660
00:23:15,399 --> 00:23:19,238
deal<font color="#E5E5E5"> not a big</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> so it's cool one</font>

661
00:23:18,519 --> 00:23:21,309
down<font color="#CCCCCC"> three to</font><font color="#E5E5E5"> go</font>

662
00:23:19,239 --> 00:23:22,440
<font color="#E5E5E5">two to go oh maybe three we'll see you</font>

663
00:23:21,309 --> 00:23:24,999
later

664
00:23:22,440 --> 00:23:27,190
now the next<font color="#CCCCCC"> thing is you</font><font color="#E5E5E5"> need to</font>

665
00:23:24,999 --> 00:23:29,619
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to win that</font><font color="#E5E5E5"> race</font>

666
00:23:27,190 --> 00:23:31,269
<font color="#CCCCCC">between well between</font><font color="#E5E5E5"> the host and the</font>

667
00:23:29,619 --> 00:23:33,428
<font color="#E5E5E5">host right you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to get</font>

668
00:23:31,269 --> 00:23:35,949
one<font color="#E5E5E5"> of those</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> worker threads to</font>

669
00:23:33,429 --> 00:23:38,199
somehow write to<font color="#E5E5E5"> the receive buffer at</font>

670
00:23:35,949 --> 00:23:40,269
the exact right time and so if you<font color="#E5E5E5"> think</font>

671
00:23:38,199 --> 00:23:42,489
<font color="#E5E5E5">about it there's</font><font color="#CCCCCC"> really two ways to go</font>

672
00:23:40,269 --> 00:23:44,409
about<font color="#CCCCCC"> it either you're going</font><font color="#E5E5E5"> to have one</font>

673
00:23:42,489 --> 00:23:45,879
single<font color="#CCCCCC"> message of as going to be written</font>

674
00:23:44,409 --> 00:23:48,549
<font color="#E5E5E5">to receive buffer at the exact right</font>

675
00:23:45,879 --> 00:23:49,748
time<font color="#CCCCCC"> which totally works really</font><font color="#E5E5E5"> only</font>

676
00:23:48,549 --> 00:23:52,168
need one message<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> written there</font>

677
00:23:49,749 --> 00:23:56,589
right<font color="#E5E5E5"> the thing is that's not trivial</font>

678
00:23:52,169 --> 00:23:58,329
<font color="#E5E5E5">for the reason that well you don't</font>

679
00:23:56,589 --> 00:24:00,849
necessary control when that<font color="#CCCCCC"> one message</font>

680
00:23:58,329 --> 00:24:02,649
<font color="#E5E5E5">is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be written out</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the to the</font>

681
00:24:00,849 --> 00:24:04,569
receive buffer<font color="#E5E5E5"> right you don't as an</font>

682
00:24:02,649 --> 00:24:06,309
attacker<font color="#CCCCCC"> you don't get to tell</font><font color="#E5E5E5"> rows so</font>

683
00:24:04,569 --> 00:24:09,459
it's<font color="#CCCCCC"> okay like please wait for like n</font>

684
00:24:06,309 --> 00:24:12,069
number<font color="#E5E5E5"> of milliseconds or nanoseconds or</font>

685
00:24:09,459 --> 00:24:16,299
however many units of time you want

686
00:24:12,069 --> 00:24:18,129
<font color="#E5E5E5">until you write it to my to</font><font color="#CCCCCC"> my receive</font>

687
00:24:16,299 --> 00:24:19,779
buffer<font color="#E5E5E5"> in addition to that well even if</font>

688
00:24:18,129 --> 00:24:21,189
you<font color="#E5E5E5"> could do that</font><font color="#CCCCCC"> it's not trivial to</font>

689
00:24:19,779 --> 00:24:23,129
know exactly how<font color="#CCCCCC"> long you're supposed to</font>

690
00:24:21,190 --> 00:24:25,690
wait<font color="#E5E5E5"> in order to hit that window so</font>

691
00:24:23,129 --> 00:24:27,668
maybe an easier<font color="#CCCCCC"> way to do it would just</font>

692
00:24:25,690 --> 00:24:29,079
be to have the host OS just<font color="#E5E5E5"> write to</font>

693
00:24:27,669 --> 00:24:29,350
that<font color="#E5E5E5"> receive buffer all the time right</font>

694
00:24:29,079 --> 00:24:30,610
maybe

695
00:24:29,350 --> 00:24:33,219
message after message after message

696
00:24:30,610 --> 00:24:34,809
<font color="#E5E5E5">which in in a way it doesn't look</font>

697
00:24:33,220 --> 00:24:36,789
impossible<font color="#CCCCCC"> right because we do have</font><font color="#E5E5E5"> that</font>

698
00:24:34,809 --> 00:24:38,530
<font color="#CCCCCC">message</font><font color="#E5E5E5"> queue and we do have these</font><font color="#CCCCCC"> two</font>

699
00:24:36,789 --> 00:24:39,760
worker threads in parallel<font color="#CCCCCC"> so if it</font><font color="#E5E5E5"> just</font>

700
00:24:38,530 --> 00:24:41,049
handle message after message after

701
00:24:39,760 --> 00:24:42,190
message well it should just be

702
00:24:41,049 --> 00:24:44,830
continuously written to the receive

703
00:24:42,190 --> 00:24:46,900
buffer<font color="#E5E5E5"> right wrong it's actually</font><font color="#CCCCCC"> it</font>

704
00:24:44,830 --> 00:24:49,030
<font color="#E5E5E5">doesn't work that</font><font color="#CCCCCC"> way each receive</font>

705
00:24:46,900 --> 00:24:51,130
buffer<font color="#CCCCCC"> kind of each worker thread is</font>

706
00:24:49,030 --> 00:24:52,960
<font color="#E5E5E5">actually just going to handle its</font>

707
00:24:51,130 --> 00:24:54,640
message right<font color="#E5E5E5"> it just generates a</font>

708
00:24:52,960 --> 00:24:56,169
complete message<font color="#CCCCCC"> rights</font><font color="#E5E5E5"> each complete</font>

709
00:24:54,640 --> 00:24:57,940
<font color="#CCCCCC">message over its a receive buffer and</font>

710
00:24:56,169 --> 00:24:59,640
then you would you would expect it to

711
00:24:57,940 --> 00:25:03,400
<font color="#E5E5E5">maybe handle</font><font color="#CCCCCC"> the third receive buffer</font>

712
00:24:59,640 --> 00:25:06,520
<font color="#E5E5E5">the third</font><font color="#CCCCCC"> harness message</font><font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> but no</font>

713
00:25:03,400 --> 00:25:09,549
it doesn't<font color="#E5E5E5"> it kind of just locks</font><font color="#CCCCCC"> until</font>

714
00:25:06,520 --> 00:25:11,650
it has received confirmation<font color="#E5E5E5"> that the</font>

715
00:25:09,549 --> 00:25:13,929
guest OS has actually read the message

716
00:25:11,650 --> 00:25:15,280
<font color="#E5E5E5">out of</font><font color="#CCCCCC"> the receive buffer</font><font color="#E5E5E5"> and in a way</font>

717
00:25:13,929 --> 00:25:17,940
it<font color="#E5E5E5"> makes sense right because the receive</font>

718
00:25:15,280 --> 00:25:20,860
buffer<font color="#E5E5E5"> only has so many slots in it and</font>

719
00:25:17,940 --> 00:25:23,110
well the host<font color="#CCCCCC"> OS doesn't want to</font>

720
00:25:20,860 --> 00:25:25,000
overwrite one slot<font color="#E5E5E5"> before the guest OS</font>

721
00:25:23,110 --> 00:25:26,559
has read out<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> so it needs to wait</font>

722
00:25:25,000 --> 00:25:27,880
for a signal<font color="#CCCCCC"> to say</font><font color="#E5E5E5"> okay because it's</font>

723
00:25:26,559 --> 00:25:31,178
clear you can actually write to receive

724
00:25:27,880 --> 00:25:34,000
buffer<font color="#E5E5E5"> again unfortunately the reason</font>

725
00:25:31,179 --> 00:25:35,770
<font color="#E5E5E5">that this is impracticable for us is</font>

726
00:25:34,000 --> 00:25:37,659
that<font color="#CCCCCC"> you can totally of course tell the</font>

727
00:25:35,770 --> 00:25:39,129
host<font color="#E5E5E5"> OS like okay because it's clear</font>

728
00:25:37,659 --> 00:25:40,960
<font color="#E5E5E5">everything is good but you have to do it</font>

729
00:25:39,130 --> 00:25:42,130
through<font color="#CCCCCC"> vm bus</font><font color="#E5E5E5"> like once you've done it</font>

730
00:25:40,960 --> 00:25:43,929
<font color="#E5E5E5">through like once you send this</font>

731
00:25:42,130 --> 00:25:45,909
<font color="#CCCCCC">acknowledgement mid message through</font><font color="#E5E5E5"> vm</font>

732
00:25:43,929 --> 00:25:48,640
bus is going<font color="#E5E5E5"> to unlock the thread and</font>

733
00:25:45,909 --> 00:25:49,750
<font color="#E5E5E5">it's then going to handle this third or</font>

734
00:25:48,640 --> 00:25:51,909
in this<font color="#E5E5E5"> message and</font><font color="#CCCCCC"> everything's going</font>

735
00:25:49,750 --> 00:25:54,490
<font color="#CCCCCC">to be good but</font><font color="#E5E5E5"> because this message</font><font color="#CCCCCC"> has</font>

736
00:25:51,909 --> 00:25:56,919
<font color="#CCCCCC">to come from BM bus which is</font><font color="#E5E5E5"> the</font>

737
00:25:54,490 --> 00:25:58,539
serialized<font color="#E5E5E5"> operation which also handles</font>

738
00:25:56,919 --> 00:26:00,610
the update<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> c buffer it is</font>

739
00:25:58,539 --> 00:26:02,799
impossible for<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> happen at the same</font>

740
00:26:00,610 --> 00:26:06,158
time as the update<font color="#CCCCCC"> of a feet buffer so</font>

741
00:26:02,799 --> 00:26:08,230
basically this this<font color="#E5E5E5"> just can't</font><font color="#CCCCCC"> work kind</font>

742
00:26:06,159 --> 00:26:13,590
<font color="#E5E5E5">of sucks so we're back to</font><font color="#CCCCCC"> the other</font>

743
00:26:08,230 --> 00:26:15,789
option<font color="#E5E5E5"> and the other option is simply to</font>

744
00:26:13,590 --> 00:26:17,350
to try and win the race<font color="#E5E5E5"> with a single</font>

745
00:26:15,789 --> 00:26:20,470
<font color="#E5E5E5">aren't</font><font color="#CCCCCC"> this message being written out to</font>

746
00:26:17,350 --> 00:26:22,360
<font color="#CCCCCC">the</font><font color="#E5E5E5"> to the receive buffer and well how</font>

747
00:26:20,470 --> 00:26:24,460
do<font color="#E5E5E5"> we how</font><font color="#CCCCCC"> we do that</font><font color="#E5E5E5"> as mentioned we</font>

748
00:26:22,360 --> 00:26:26,559
<font color="#E5E5E5">basically want to be able to control the</font>

749
00:26:24,460 --> 00:26:28,419
delay between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> time that</font><font color="#E5E5E5"> we send that</font>

750
00:26:26,559 --> 00:26:31,270
<font color="#E5E5E5">message and the time that's actually</font>

751
00:26:28,419 --> 00:26:33,039
written to receive<font color="#CCCCCC"> buffer</font><font color="#E5E5E5"> and well</font>

752
00:26:31,270 --> 00:26:35,950
there's no by design way to do that but

753
00:26:33,039 --> 00:26:37,990
maybe if we're able to<font color="#CCCCCC"> find a way</font><font color="#E5E5E5"> to</font>

754
00:26:35,950 --> 00:26:39,429
send a<font color="#E5E5E5"> message like place a message in</font>

755
00:26:37,990 --> 00:26:42,730
that<font color="#E5E5E5"> queue is</font><font color="#CCCCCC"> going to be handled</font>

756
00:26:39,429 --> 00:26:43,090
somehow<font color="#E5E5E5"> by vm switch without locking one</font>

757
00:26:42,730 --> 00:26:45,070
of those

758
00:26:43,090 --> 00:26:46,750
worker threads<font color="#E5E5E5"> could just like you know</font>

759
00:26:45,070 --> 00:26:48,340
<font color="#CCCCCC">queue</font><font color="#E5E5E5"> up a bunch of those messages</font><font color="#CCCCCC"> and</font>

760
00:26:46,750 --> 00:26:50,680
<font color="#CCCCCC">then the number</font><font color="#E5E5E5"> of messages that we have</font>

761
00:26:48,340 --> 00:26:53,260
<font color="#E5E5E5">queued up before</font><font color="#CCCCCC"> our actual target</font>

762
00:26:50,680 --> 00:26:55,120
message<font color="#CCCCCC"> will become you know</font>

763
00:26:53,260 --> 00:26:57,310
proportional to the amount of like the

764
00:26:55,120 --> 00:27:01,179
delay<font color="#E5E5E5"> that will</font><font color="#CCCCCC"> happen before</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> actual</font>

765
00:26:57,310 --> 00:27:02,590
<font color="#CCCCCC">outer balance</font><font color="#E5E5E5"> right happens and so it</font>

766
00:27:01,180 --> 00:27:05,260
turns out there is<font color="#E5E5E5"> actually such message</font>

767
00:27:02,590 --> 00:27:07,090
<font color="#E5E5E5">it's if you send a</font><font color="#CCCCCC"> artists message that</font>

768
00:27:05,260 --> 00:27:08,650
is<font color="#CCCCCC"> malformed for example you know too</font>

769
00:27:07,090 --> 00:27:11,709
small for its type or<font color="#E5E5E5"> something like</font>

770
00:27:08,650 --> 00:27:13,030
<font color="#CCCCCC">that then the</font><font color="#E5E5E5"> VMS which are in this</font>

771
00:27:11,710 --> 00:27:15,340
<font color="#CCCCCC">worker fret is just going</font><font color="#E5E5E5"> to discard it</font>

772
00:27:13,030 --> 00:27:16,660
<font color="#E5E5E5">and if it discards</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> well it's not</font>

773
00:27:15,340 --> 00:27:18,070
going<font color="#E5E5E5"> to write</font><font color="#CCCCCC"> anything out to receive</font>

774
00:27:16,660 --> 00:27:19,240
<font color="#E5E5E5">but first not going to lock itself</font><font color="#CCCCCC"> in so</font>

775
00:27:18,070 --> 00:27:21,610
<font color="#E5E5E5">you're going</font><font color="#CCCCCC"> to handle the next one</font><font color="#E5E5E5"> and</font>

776
00:27:19,240 --> 00:27:26,400
so<font color="#E5E5E5"> that's where the</font><font color="#CCCCCC"> Cascade of failure</font>

777
00:27:21,610 --> 00:27:28,899
idea comes into play<font color="#CCCCCC"> basically you just</font>

778
00:27:26,400 --> 00:27:30,400
<font color="#E5E5E5">you know you just kind of queue up a</font>

779
00:27:28,900 --> 00:27:32,440
bunch of messages<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you know are</font>

780
00:27:30,400 --> 00:27:33,850
<font color="#E5E5E5">going to fail</font><font color="#CCCCCC"> right and they're</font><font color="#E5E5E5"> all</font>

781
00:27:32,440 --> 00:27:36,460
going to<font color="#CCCCCC"> be handled one after the other</font>

782
00:27:33,850 --> 00:27:38,560
as soon<font color="#CCCCCC"> as this thread</font><font color="#E5E5E5"> is unlocked and</font>

783
00:27:36,460 --> 00:27:40,210
then it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> handle your actual</font>

784
00:27:38,560 --> 00:27:42,220
message that<font color="#E5E5E5"> should do the</font><font color="#CCCCCC"> outer bounds</font>

785
00:27:40,210 --> 00:27:44,200
right<font color="#E5E5E5"> and so that's what's happening</font>

786
00:27:42,220 --> 00:27:45,550
<font color="#E5E5E5">here</font><font color="#CCCCCC"> right we let's say we have these</font>

787
00:27:44,200 --> 00:27:49,600
two worker threads being locked right

788
00:27:45,550 --> 00:27:51,490
now<font color="#CCCCCC"> right they're both</font><font color="#E5E5E5"> locked we unlock</font>

789
00:27:49,600 --> 00:27:53,620
one of them<font color="#E5E5E5"> over</font><font color="#CCCCCC"> VN bus and complete a</font>

790
00:27:51,490 --> 00:27:55,030
serialize way and then<font color="#E5E5E5"> after that it</font>

791
00:27:53,620 --> 00:27:56,379
starts handling message after message

792
00:27:55,030 --> 00:27:57,760
after message after message

793
00:27:56,380 --> 00:28:00,460
<font color="#E5E5E5">none of them writes a</font><font color="#CCCCCC"> receive buffer</font>

794
00:27:57,760 --> 00:28:02,320
<font color="#E5E5E5">except for a very</font><font color="#CCCCCC"> last one and so that's</font>

795
00:28:00,460 --> 00:28:04,510
basically<font color="#E5E5E5"> all that's exactly what I was</font>

796
00:28:02,320 --> 00:28:06,010
describing earlier is<font color="#CCCCCC"> that now we have</font>

797
00:28:04,510 --> 00:28:09,160
the<font color="#CCCCCC"> ability to control the delay between</font>

798
00:28:06,010 --> 00:28:11,740
<font color="#E5E5E5">the</font><font color="#CCCCCC"> time that</font><font color="#E5E5E5"> the VM switch starts</font>

799
00:28:09,160 --> 00:28:13,990
handling messages and the time<font color="#CCCCCC"> that the</font>

800
00:28:11,740 --> 00:28:16,420
<font color="#CCCCCC">write the outer</font><font color="#E5E5E5"> bounce right might</font>

801
00:28:13,990 --> 00:28:18,430
happen now the thing is<font color="#E5E5E5"> we need to get</font>

802
00:28:16,420 --> 00:28:21,220
the number<font color="#E5E5E5"> of failed messages exactly</font>

803
00:28:18,430 --> 00:28:23,440
right<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> actually hit the the</font>

804
00:28:21,220 --> 00:28:26,320
race<font color="#E5E5E5"> actually hit the target for us and</font>

805
00:28:23,440 --> 00:28:28,420
well it's not trivial<font color="#E5E5E5"> because you can't</font>

806
00:28:26,320 --> 00:28:29,530
just guess<font color="#CCCCCC"> that number</font><font color="#E5E5E5"> right I mean you</font>

807
00:28:28,420 --> 00:28:31,780
might be<font color="#CCCCCC"> able to if you're really</font><font color="#E5E5E5"> lucky</font>

808
00:28:29,530 --> 00:28:34,960
but<font color="#E5E5E5"> it's it's unlikely you want to do it</font>

809
00:28:31,780 --> 00:28:37,990
in the fewest number of<font color="#E5E5E5"> attempts ideally</font>

810
00:28:34,960 --> 00:28:39,340
and so well<font color="#E5E5E5"> you might actually be</font><font color="#CCCCCC"> able</font>

811
00:28:37,990 --> 00:28:40,840
<font color="#CCCCCC">to search for</font><font color="#E5E5E5"> that number of messages</font>

812
00:28:39,340 --> 00:28:43,060
right because if you're able<font color="#CCCCCC"> to tell if</font>

813
00:28:40,840 --> 00:28:45,399
the message<font color="#CCCCCC"> was written out of</font><font color="#E5E5E5"> bounds</font>

814
00:28:43,060 --> 00:28:46,750
<font color="#E5E5E5">too early or too late</font><font color="#CCCCCC"> you know if it was</font>

815
00:28:45,400 --> 00:28:48,190
too early<font color="#CCCCCC"> you just increase the number</font>

816
00:28:46,750 --> 00:28:49,570
of<font color="#E5E5E5"> failed messages if it was too late</font>

817
00:28:48,190 --> 00:28:51,970
you decrease<font color="#CCCCCC"> the number of fail messages</font>

818
00:28:49,570 --> 00:28:54,850
<font color="#E5E5E5">you can just do</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> like use an</font>

819
00:28:51,970 --> 00:28:56,770
algorithm<font color="#E5E5E5"> called binary search and just</font>

820
00:28:54,850 --> 00:28:58,689
just use that<font color="#CCCCCC"> too</font>

821
00:28:56,770 --> 00:29:00,250
<font color="#CCCCCC">to kind of</font><font color="#E5E5E5"> do your thing</font><font color="#CCCCCC"> and it turns</font>

822
00:28:58,690 --> 00:29:02,050
<font color="#CCCCCC">out you can actually</font><font color="#E5E5E5"> tell if a</font><font color="#CCCCCC"> message</font>

823
00:29:00,250 --> 00:29:03,430
was too<font color="#CCCCCC"> early or too</font><font color="#E5E5E5"> late right</font><font color="#CCCCCC"> if it's</font>

824
00:29:02,050 --> 00:29:05,320
too early<font color="#CCCCCC"> the message is going</font><font color="#E5E5E5"> to be</font>

825
00:29:03,430 --> 00:29:07,060
<font color="#CCCCCC">written within</font><font color="#E5E5E5"> bounds of the first</font>

826
00:29:05,320 --> 00:29:08,889
<font color="#CCCCCC">received</font><font color="#E5E5E5"> buffer that you used right and</font>

827
00:29:07,060 --> 00:29:10,120
so as an attacker because<font color="#E5E5E5"> that receive</font>

828
00:29:08,890 --> 00:29:11,530
buffer<font color="#E5E5E5"> is still mapped in your memory</font>

829
00:29:10,120 --> 00:29:13,179
space you can<font color="#E5E5E5"> just read out of</font><font color="#CCCCCC"> it and</font>

830
00:29:11,530 --> 00:29:15,730
say<font color="#E5E5E5"> okay well something was written</font>

831
00:29:13,180 --> 00:29:17,320
<font color="#E5E5E5">there so I'm pretty sure it was too</font>

832
00:29:15,730 --> 00:29:20,290
early<font color="#CCCCCC"> so okay I'm just gonna</font><font color="#E5E5E5"> increase</font>

833
00:29:17,320 --> 00:29:21,700
then<font color="#E5E5E5"> okay well now you've increased</font><font color="#CCCCCC"> ten</font>

834
00:29:20,290 --> 00:29:24,280
<font color="#E5E5E5">too much and you're too late</font>

835
00:29:21,700 --> 00:29:25,630
so well it turns out<font color="#E5E5E5"> same thing</font><font color="#CCCCCC"> the</font>

836
00:29:24,280 --> 00:29:27,190
receive buffer at that point is

837
00:29:25,630 --> 00:29:29,710
<font color="#CCCCCC">completely valid and so the boundaries</font>

838
00:29:27,190 --> 00:29:31,900
are<font color="#E5E5E5"> gonna make it such that</font><font color="#CCCCCC"> the receive</font>

839
00:29:29,710 --> 00:29:33,820
the<font color="#CCCCCC"> the new</font><font color="#E5E5E5"> message was written in the</font>

840
00:29:31,900 --> 00:29:35,920
new receive buffer<font color="#E5E5E5"> at the very end</font><font color="#CCCCCC"> so</font>

841
00:29:33,820 --> 00:29:38,139
<font color="#CCCCCC">again you</font><font color="#E5E5E5"> can just kind of read that and</font>

842
00:29:35,920 --> 00:29:39,910
see and now the final<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is if you</font>

843
00:29:38,140 --> 00:29:43,240
were just right at the exact right time

844
00:29:39,910 --> 00:29:44,740
<font color="#CCCCCC">then the message is by definition</font><font color="#E5E5E5"> just</font>

845
00:29:43,240 --> 00:29:46,870
gonna be<font color="#E5E5E5"> written out</font><font color="#CCCCCC"> of balance and</font><font color="#E5E5E5"> at</font>

846
00:29:44,740 --> 00:29:48,760
that<font color="#E5E5E5"> point you can't see it and so well</font>

847
00:29:46,870 --> 00:29:50,409
<font color="#E5E5E5">that's your that's your signal right</font>

848
00:29:48,760 --> 00:29:51,040
<font color="#E5E5E5">that tells you that</font><font color="#CCCCCC"> your thing was</font>

849
00:29:50,410 --> 00:29:53,410
<font color="#E5E5E5">really out of balance</font>

850
00:29:51,040 --> 00:29:54,700
<font color="#CCCCCC">anything is good so this point we are</font>

851
00:29:53,410 --> 00:29:56,140
<font color="#E5E5E5">able to control what's written out of</font>

852
00:29:54,700 --> 00:29:57,580
<font color="#E5E5E5">bounds they were actually able to you</font>

853
00:29:56,140 --> 00:29:59,490
know write<font color="#E5E5E5"> data out of bounds which is</font>

854
00:29:57,580 --> 00:30:01,960
awesome<font color="#E5E5E5"> the only thing that's missing is</font>

855
00:29:59,490 --> 00:30:05,110
<font color="#E5E5E5">well what do we actually write how to</font>

856
00:30:01,960 --> 00:30:07,390
<font color="#CCCCCC">balance what</font><font color="#E5E5E5"> did we corrupt and that was</font>

857
00:30:05,110 --> 00:30:09,040
not<font color="#E5E5E5"> trivial at first for me because well</font>

858
00:30:07,390 --> 00:30:11,200
these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> G paddles right these are</font>

859
00:30:09,040 --> 00:30:13,840
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> mdl zorbing</font><font color="#E5E5E5"> mapped in the</font>

860
00:30:11,200 --> 00:30:14,890
Windows kernel<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is not you know</font>

861
00:30:13,840 --> 00:30:16,689
<font color="#E5E5E5">this is not a buffer overflow but it's</font>

862
00:30:14,890 --> 00:30:18,820
not a stack buffer overflow<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> not</font>

863
00:30:16,690 --> 00:30:20,800
a<font color="#CCCCCC"> heat buffer overflow this is just a G</font>

864
00:30:18,820 --> 00:30:24,010
paddle overflow and you know what is

865
00:30:20,800 --> 00:30:25,840
<font color="#E5E5E5">that where</font><font color="#CCCCCC"> were these things II think</font>

866
00:30:24,010 --> 00:30:27,520
okay well it turns out something<font color="#E5E5E5"> I</font>

867
00:30:25,840 --> 00:30:30,760
didn't know because again<font color="#CCCCCC"> not</font><font color="#E5E5E5"> really an</font>

868
00:30:27,520 --> 00:30:32,650
expert in anything<font color="#CCCCCC"> it turns out these</font>

869
00:30:30,760 --> 00:30:34,960
<font color="#CCCCCC">the G</font><font color="#E5E5E5"> paddles were actually allocated in</font>

870
00:30:32,650 --> 00:30:37,240
a region called<font color="#CCCCCC"> the system Pte region</font>

871
00:30:34,960 --> 00:30:38,830
and it also<font color="#E5E5E5"> turns out with a system PG</font>

872
00:30:37,240 --> 00:30:43,210
<font color="#E5E5E5">region is where the kernel allocates all</font>

873
00:30:38,830 --> 00:30:45,340
<font color="#E5E5E5">the stacks and so well if you're if</font>

874
00:30:43,210 --> 00:30:47,110
<font color="#CCCCCC">you're able</font><font color="#E5E5E5"> to you know write data out</font>

875
00:30:45,340 --> 00:30:49,990
of<font color="#E5E5E5"> bounds of Ag paddle you can actually</font>

876
00:30:47,110 --> 00:30:52,689
<font color="#CCCCCC">overwrite the entirety of a kernel</font>

877
00:30:49,990 --> 00:30:54,100
thread stack and that's actually<font color="#E5E5E5"> well</font>

878
00:30:52,690 --> 00:30:55,330
that's kind of<font color="#E5E5E5"> awesome right because if</font>

879
00:30:54,100 --> 00:30:56,709
you can over at a stack you<font color="#CCCCCC"> can over a</font>

880
00:30:55,330 --> 00:30:58,240
return address if<font color="#E5E5E5"> you can over a return</font>

881
00:30:56,710 --> 00:30:59,410
address you can get Rob once you have

882
00:30:58,240 --> 00:31:02,590
<font color="#CCCCCC">wrap</font><font color="#E5E5E5"> you basically have code execution</font>

883
00:30:59,410 --> 00:31:06,310
<font color="#E5E5E5">and everything is over so the idea then</font>

884
00:31:02,590 --> 00:31:08,290
is okay<font color="#CCCCCC"> well we can possibly place the</font>

885
00:31:06,310 --> 00:31:10,600
<font color="#E5E5E5">thread stack behind our G paddle that's</font>

886
00:31:08,290 --> 00:31:13,539
awesome<font color="#E5E5E5"> but how do I do that right how</font>

887
00:31:10,600 --> 00:31:15,219
system<font color="#CCCCCC"> PT</font><font color="#E5E5E5"> allocator didn't work and even</font>

888
00:31:13,539 --> 00:31:17,080
if<font color="#E5E5E5"> I understand how it works</font><font color="#CCCCCC"> can I</font>

889
00:31:15,220 --> 00:31:18,490
actually<font color="#E5E5E5"> control it</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> I actually</font>

890
00:31:17,080 --> 00:31:20,470
interact with it<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> guest</font><font color="#E5E5E5"> because</font>

891
00:31:18,490 --> 00:31:21,820
again the guest OS is the<font color="#CCCCCC"> guest of</font><font color="#E5E5E5"> us</font>

892
00:31:20,470 --> 00:31:24,880
<font color="#CCCCCC">they can't</font><font color="#E5E5E5"> just like call like you know</font>

893
00:31:21,820 --> 00:31:27,129
 Matlock<font color="#E5E5E5"> in in the in the host OS</font>

894
00:31:24,880 --> 00:31:31,480
<font color="#E5E5E5">like that it kind of has</font><font color="#CCCCCC"> to do this in a</font>

895
00:31:27,130 --> 00:31:32,950
kind<font color="#CCCCCC"> of lower covert way so</font><font color="#E5E5E5"> so a few</font>

896
00:31:31,480 --> 00:31:35,260
<font color="#E5E5E5">things first off how does this it's in</font>

897
00:31:32,950 --> 00:31:37,510
PT<font color="#E5E5E5"> you</font><font color="#CCCCCC"> allocate or work</font><font color="#E5E5E5"> it's actually</font>

898
00:31:35,260 --> 00:31:39,280
<font color="#CCCCCC">really</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> so that make things easier</font>

899
00:31:37,510 --> 00:31:40,870
<font color="#CCCCCC">it's not meant to you know it's not</font>

900
00:31:39,280 --> 00:31:42,100
<font color="#E5E5E5">meant to be randomized</font><font color="#CCCCCC"> or like</font><font color="#E5E5E5"> secure</font>

901
00:31:40,870 --> 00:31:43,928
anything<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not something</font><font color="#E5E5E5"> that people</font>

902
00:31:42,100 --> 00:31:46,689
<font color="#CCCCCC">are</font><font color="#E5E5E5"> really meant to be interacting with</font>

903
00:31:43,929 --> 00:31:49,299
<font color="#E5E5E5">so that makes it easier it's essentially</font>

904
00:31:46,690 --> 00:31:51,490
just a bitmap right<font color="#E5E5E5"> any bit</font><font color="#CCCCCC"> any given</font>

905
00:31:49,299 --> 00:31:53,440
bit<font color="#E5E5E5"> into inside the bitmap represents a</font>

906
00:31:51,490 --> 00:31:55,000
<font color="#E5E5E5">single page if that bit is set to</font><font color="#CCCCCC"> one</font>

907
00:31:53,440 --> 00:31:56,650
that means<font color="#E5E5E5"> that page is currently being</font>

908
00:31:55,000 --> 00:31:58,240
<font color="#E5E5E5">used if it's set to</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> it means the</font>

909
00:31:56,650 --> 00:32:00,490
page is not<font color="#E5E5E5"> being used so then the</font>

910
00:31:58,240 --> 00:32:01,929
algorithm<font color="#E5E5E5"> to allocate data is really</font>

911
00:32:00,490 --> 00:32:03,610
simple<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> just well you just kind</font><font color="#CCCCCC"> of</font>

912
00:32:01,929 --> 00:32:05,770
walk that bitmap<font color="#E5E5E5"> until you see a</font><font color="#CCCCCC"> number</font>

913
00:32:03,610 --> 00:32:07,719
<font color="#E5E5E5">of</font><font color="#CCCCCC"> zeros that</font><font color="#E5E5E5"> is big enough for you you</font>

914
00:32:05,770 --> 00:32:09,100
override them<font color="#CCCCCC"> ultimately one and then</font>

915
00:32:07,720 --> 00:32:10,030
well once you're<font color="#CCCCCC"> there</font>

916
00:32:09,100 --> 00:32:13,059
well you've allocated memory

917
00:32:10,030 --> 00:32:14,740
congratulations<font color="#CCCCCC"> the only thing that kind</font>

918
00:32:13,059 --> 00:32:16,780
<font color="#CCCCCC">of complicates this is that you</font><font color="#E5E5E5"> have a</font>

919
00:32:14,740 --> 00:32:18,610
<font color="#E5E5E5">little cursor here which is like the</font>

920
00:32:16,780 --> 00:32:20,260
little<font color="#E5E5E5"> yellow thing and that bitmap on</font>

921
00:32:18,610 --> 00:32:22,389
the right there<font color="#CCCCCC"> that's called</font><font color="#E5E5E5"> the hint</font>

922
00:32:20,260 --> 00:32:25,240
<font color="#E5E5E5">and basically it's just</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be</font>

923
00:32:22,390 --> 00:32:28,000
where the allocator starts walking<font color="#E5E5E5"> the</font>

924
00:32:25,240 --> 00:32:29,110
bitmap from and so<font color="#CCCCCC"> that's it's really</font>

925
00:32:28,000 --> 00:32:30,700
<font color="#CCCCCC">that simple</font>

926
00:32:29,110 --> 00:32:32,289
just to like give you an illustration<font color="#CCCCCC"> of</font>

927
00:32:30,700 --> 00:32:34,120
how<font color="#CCCCCC"> that works</font><font color="#E5E5E5"> and how</font><font color="#CCCCCC"> the hint is</font>

928
00:32:32,289 --> 00:32:36,070
actually being updated<font color="#E5E5E5"> after different</font>

929
00:32:34,120 --> 00:32:38,020
allocations<font color="#E5E5E5"> let's say that I want</font><font color="#CCCCCC"> to</font>

930
00:32:36,070 --> 00:32:39,549
allocate<font color="#CCCCCC"> five pages okay well we have</font>

931
00:32:38,020 --> 00:32:41,620
the hint in<font color="#E5E5E5"> the middle there blue is</font>

932
00:32:39,549 --> 00:32:42,940
free pages<font color="#CCCCCC"> so we can see that</font><font color="#E5E5E5"> okay</font>

933
00:32:41,620 --> 00:32:44,500
there's five<font color="#CCCCCC"> pages there that's cool</font>

934
00:32:42,940 --> 00:32:46,000
let's<font color="#CCCCCC"> just allocate those</font><font color="#E5E5E5"> and then</font>

935
00:32:44,500 --> 00:32:48,010
update<font color="#E5E5E5"> the hint to be right after</font><font color="#CCCCCC"> those</font>

936
00:32:46,000 --> 00:32:49,750
five pages<font color="#E5E5E5"> okay that's first example</font>

937
00:32:48,010 --> 00:32:51,309
really simple<font color="#E5E5E5"> then if we want to</font>

938
00:32:49,750 --> 00:32:53,140
allocate<font color="#CCCCCC"> five pages again well what we</font>

939
00:32:51,309 --> 00:32:54,760
can see is that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually don't just</font>

940
00:32:53,140 --> 00:32:56,559
have five<font color="#CCCCCC"> pages right after the hint</font>

941
00:32:54,760 --> 00:32:59,080
<font color="#E5E5E5">right so the hint has to start</font><font color="#CCCCCC"> walking</font>

942
00:32:56,559 --> 00:33:01,750
the bitmap until it actually<font color="#E5E5E5"> finds what</font>

943
00:32:59,080 --> 00:33:04,299
it once it's found five pages<font color="#E5E5E5"> allocates</font>

944
00:33:01,750 --> 00:33:06,159
those<font color="#E5E5E5"> and it's all good now the last</font>

945
00:33:04,299 --> 00:33:08,230
example there's also kind<font color="#E5E5E5"> of important</font>

946
00:33:06,159 --> 00:33:09,760
is let's<font color="#E5E5E5"> say you want to allocate 17</font>

947
00:33:08,230 --> 00:33:11,380
pages<font color="#E5E5E5"> which is you know a lot of pages</font>

948
00:33:09,760 --> 00:33:13,030
<font color="#CCCCCC">and well you actually don't</font><font color="#E5E5E5"> have that</font>

949
00:33:11,380 --> 00:33:14,440
<font color="#CCCCCC">mini free and inside your bitmap here</font>

950
00:33:13,030 --> 00:33:16,289
right<font color="#CCCCCC"> just kind of walks</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> our bitmap</font>

951
00:33:14,440 --> 00:33:18,010
doesn't find anything<font color="#E5E5E5"> that's kind of sad</font>

952
00:33:16,289 --> 00:33:20,620
<font color="#CCCCCC">what's going to</font><font color="#E5E5E5"> do is it's actually</font>

953
00:33:18,010 --> 00:33:22,780
<font color="#E5E5E5">going to expand the bitmap just allocate</font>

954
00:33:20,620 --> 00:33:23,889
a new<font color="#E5E5E5"> block</font><font color="#CCCCCC"> of two megabytes at the end</font>

955
00:33:22,780 --> 00:33:26,260
of the bitmap because it can

956
00:33:23,890 --> 00:33:29,020
can kind of just do that<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then place</font>

957
00:33:26,260 --> 00:33:31,030
<font color="#CCCCCC">that 17 pages</font><font color="#E5E5E5"> in there and then you know</font>

958
00:33:29,020 --> 00:33:32,530
it just<font color="#E5E5E5"> updates everything the</font><font color="#CCCCCC"> only</font>

959
00:33:31,030 --> 00:33:34,330
thing the only<font color="#E5E5E5"> thing that is notable</font>

960
00:33:32,530 --> 00:33:37,030
from<font color="#E5E5E5"> that last example is that when you</font>

961
00:33:34,330 --> 00:33:38,800
expand the bitmap<font color="#E5E5E5"> just always you will</font>

962
00:33:37,030 --> 00:33:40,600
<font color="#CCCCCC">always be placing</font><font color="#E5E5E5"> your block in there</font>

963
00:33:38,800 --> 00:33:42,580
<font color="#E5E5E5">and you will never be updating the hint</font>

964
00:33:40,600 --> 00:33:45,040
<font color="#E5E5E5">to be at the end of</font><font color="#CCCCCC"> a block</font><font color="#E5E5E5"> which is not</font>

965
00:33:42,580 --> 00:33:46,720
super important<font color="#E5E5E5"> it does come into play</font>

966
00:33:45,040 --> 00:33:48,580
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the actual heat massaging that</font>

967
00:33:46,720 --> 00:33:50,340
<font color="#E5E5E5">happens later but it's not a you know</font>

968
00:33:48,580 --> 00:33:52,300
<font color="#E5E5E5">it's it's not a super important detail</font>

969
00:33:50,340 --> 00:33:54,610
<font color="#E5E5E5">so after that we need to actually be</font>

970
00:33:52,300 --> 00:33:57,430
<font color="#CCCCCC">able to interact</font><font color="#E5E5E5"> with that assistant</font><font color="#CCCCCC"> PC</font>

971
00:33:54,610 --> 00:33:59,139
allocator<font color="#CCCCCC"> well</font><font color="#E5E5E5"> turns out because we have</font>

972
00:33:57,430 --> 00:34:00,790
this ability to<font color="#CCCCCC"> just keep sending</font>

973
00:33:59,140 --> 00:34:02,320
<font color="#CCCCCC">receive buffers and send buffers over</font>

974
00:34:00,790 --> 00:34:03,970
and over again because<font color="#CCCCCC"> that was that</font><font color="#E5E5E5"> was</font>

975
00:34:02,320 --> 00:34:06,189
<font color="#E5E5E5">the bug right but we can actually just</font>

976
00:34:03,970 --> 00:34:08,949
kind of we<font color="#E5E5E5"> have an arbitrary size</font>

977
00:34:06,190 --> 00:34:10,540
<font color="#CCCCCC">matlock</font><font color="#E5E5E5"> into that region</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> we can</font>

978
00:34:08,949 --> 00:34:11,830
just<font color="#CCCCCC"> send AG paddle</font><font color="#E5E5E5"> that has an</font>

979
00:34:10,540 --> 00:34:13,179
arbitrary size because the G paddle is

980
00:34:11,830 --> 00:34:15,279
being<font color="#CCCCCC"> allocated by the guest at</font><font color="#E5E5E5"> the</font>

981
00:34:13,179 --> 00:34:17,260
beginning<font color="#E5E5E5"> so it's the one that decides</font>

982
00:34:15,280 --> 00:34:18,909
<font color="#E5E5E5">the size and then it's always going to</font>

983
00:34:17,260 --> 00:34:20,710
be<font color="#E5E5E5"> mapped</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> assistant PG region</font>

984
00:34:18,909 --> 00:34:22,030
whenever we send<font color="#E5E5E5"> it over so we actually</font>

985
00:34:20,710 --> 00:34:24,280
have a<font color="#E5E5E5"> really</font><font color="#CCCCCC"> good primitive to interact</font>

986
00:34:22,030 --> 00:34:27,370
with<font color="#CCCCCC"> that the harder</font><font color="#E5E5E5"> part is</font><font color="#CCCCCC"> actually</font>

987
00:34:24,280 --> 00:34:29,860
<font color="#CCCCCC">getting</font><font color="#E5E5E5"> the host OS to create new stacks</font>

988
00:34:27,370 --> 00:34:31,179
right because<font color="#E5E5E5"> that's well that's</font><font color="#CCCCCC"> it's</font>

989
00:34:29,860 --> 00:34:32,590
<font color="#E5E5E5">that's kind</font><font color="#CCCCCC"> on trivial</font><font color="#E5E5E5"> you're not</font>

990
00:34:31,179 --> 00:34:34,690
supposed to really<font color="#E5E5E5"> be able to like tell</font>

991
00:34:32,590 --> 00:34:36,010
<font color="#E5E5E5">the</font><font color="#CCCCCC"> host eyes okay can you just create</font>

992
00:34:34,690 --> 00:34:37,690
<font color="#CCCCCC">new threads because</font><font color="#E5E5E5"> I need some stacks</font>

993
00:34:36,010 --> 00:34:40,450
please that's not something that's

994
00:34:37,690 --> 00:34:41,950
<font color="#CCCCCC">possible fortunately for me</font><font color="#E5E5E5"> there was at</font>

995
00:34:40,449 --> 00:34:46,270
the time another<font color="#E5E5E5"> bug in VMs which that</font>

996
00:34:41,949 --> 00:34:50,589
just allowed me to basically get worker

997
00:34:46,270 --> 00:34:51,969
<font color="#CCCCCC">so the the system worker thread pool is</font>

998
00:34:50,590 --> 00:34:54,070
basically<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like a set of threads</font>

999
00:34:51,969 --> 00:34:55,959
<font color="#CCCCCC">that can be used at a given time and</font>

1000
00:34:54,070 --> 00:34:57,610
<font color="#CCCCCC">that's where the the artist worker</font>

1001
00:34:55,960 --> 00:35:00,100
threads are being created from and other

1002
00:34:57,610 --> 00:35:01,900
threads are<font color="#E5E5E5"> being used and so there was</font>

1003
00:35:00,100 --> 00:35:04,240
<font color="#CCCCCC">actually a bug</font><font color="#E5E5E5"> that would get VM</font>

1004
00:35:01,900 --> 00:35:05,980
<font color="#CCCCCC">switched to deadlock</font><font color="#E5E5E5"> as many of those</font>

1005
00:35:04,240 --> 00:35:07,419
threads in that<font color="#E5E5E5"> pool as necessary and so</font>

1006
00:35:05,980 --> 00:35:09,490
they would never<font color="#CCCCCC"> return to always show</font>

1007
00:35:07,420 --> 00:35:11,560
<font color="#CCCCCC">is busy</font><font color="#E5E5E5"> and so the idea is I can just</font>

1008
00:35:09,490 --> 00:35:13,720
<font color="#CCCCCC">like deadlock all the current threads</font>

1009
00:35:11,560 --> 00:35:15,670
<font color="#E5E5E5">and then through normal operations it</font>

1010
00:35:13,720 --> 00:35:19,149
will spawn new threads<font color="#E5E5E5"> and then I know</font>

1011
00:35:15,670 --> 00:35:21,580
<font color="#E5E5E5">that I basically get a primitive that</font>

1012
00:35:19,150 --> 00:35:22,900
lets me<font color="#E5E5E5"> you know spawn about maybe</font><font color="#CCCCCC"> five</font>

1013
00:35:21,580 --> 00:35:24,640
threads at a time until<font color="#E5E5E5"> I have to</font>

1014
00:35:22,900 --> 00:35:26,320
deadlock them again and create new

1015
00:35:24,640 --> 00:35:28,240
<font color="#E5E5E5">threads if I need to and so that's just</font>

1016
00:35:26,320 --> 00:35:31,090
<font color="#CCCCCC">that's the primitive</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I use it's not</font>

1017
00:35:28,240 --> 00:35:34,089
ideal<font color="#E5E5E5"> but it is what it is</font><font color="#CCCCCC"> it's the way</font>

1018
00:35:31,090 --> 00:35:37,030
I had so at that point we<font color="#CCCCCC"> basically just</font>

1019
00:35:34,090 --> 00:35:37,700
have a<font color="#E5E5E5"> massaging strategy to place a</font>

1020
00:35:37,030 --> 00:35:39,829
<font color="#CCCCCC">receive</font><font color="#E5E5E5"> buff</font>

1021
00:35:37,700 --> 00:35:41,868
at a known offset<font color="#E5E5E5"> from a stack normally</font>

1022
00:35:39,829 --> 00:35:44,059
I would go<font color="#E5E5E5"> through this but I I do want</font>

1023
00:35:41,869 --> 00:35:45,770
to spend<font color="#CCCCCC"> some more time later</font><font color="#E5E5E5"> on on the</font>

1024
00:35:44,059 --> 00:35:47,510
<font color="#E5E5E5">actual mitigation so I'm gonna kind of</font>

1025
00:35:45,770 --> 00:35:49,130
just<font color="#E5E5E5"> skip that</font><font color="#CCCCCC"> all we need to know</font><font color="#E5E5E5"> is</font>

1026
00:35:47,510 --> 00:35:50,450
you know<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just basically do a bunch of</font>

1027
00:35:49,130 --> 00:35:52,280
allocations<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a very specific order</font>

1028
00:35:50,450 --> 00:35:53,779
<font color="#CCCCCC">but they're very</font><font color="#E5E5E5"> specific sizes to like</font>

1029
00:35:52,280 --> 00:35:55,040
kind of<font color="#E5E5E5"> match</font><font color="#CCCCCC"> the allocator</font><font color="#E5E5E5"> this is</font>

1030
00:35:53,780 --> 00:35:57,410
going to be placing my receive buffer

1031
00:35:55,040 --> 00:35:59,420
<font color="#E5E5E5">there then I'm going to be placing</font>

1032
00:35:57,410 --> 00:36:01,160
another allocation another allocation

1033
00:35:59,420 --> 00:36:02,809
<font color="#E5E5E5">and then it's going</font><font color="#CCCCCC"> to be spawning a</font>

1034
00:36:01,160 --> 00:36:07,098
stack right there<font color="#CCCCCC"> and so you end up with</font>

1035
00:36:02,809 --> 00:36:09,410
<font color="#CCCCCC">a stack at a</font><font color="#E5E5E5"> known offset from the from</font>

1036
00:36:07,099 --> 00:36:10,609
the from the receive buffer<font color="#E5E5E5"> in practice</font>

1037
00:36:09,410 --> 00:36:12,290
it's a little more complicated<font color="#CCCCCC"> that and</font>

1038
00:36:10,609 --> 00:36:14,270
there's actually<font color="#CCCCCC"> two different</font><font color="#E5E5E5"> cases to</font>

1039
00:36:12,290 --> 00:36:16,339
take into<font color="#CCCCCC"> account</font><font color="#E5E5E5"> but again kind</font><font color="#CCCCCC"> of just</font>

1040
00:36:14,270 --> 00:36:22,130
like<font color="#CCCCCC"> little gloss over that just just</font>

1041
00:36:16,339 --> 00:36:23,869
<font color="#E5E5E5">trust me this this works usually so the</font>

1042
00:36:22,130 --> 00:36:24,200
last thing here is okay so this is

1043
00:36:23,869 --> 00:36:27,160
awesome

1044
00:36:24,200 --> 00:36:30,799
we<font color="#E5E5E5"> can over a stack with arbitrary data</font>

1045
00:36:27,160 --> 00:36:32,328
<font color="#E5E5E5">of arbitrary size basically and and</font>

1046
00:36:30,799 --> 00:36:33,530
that's great if we can<font color="#E5E5E5"> over a stack</font><font color="#CCCCCC"> we</font>

1047
00:36:32,329 --> 00:36:35,150
<font color="#CCCCCC">can over very</font><font color="#E5E5E5"> return</font><font color="#CCCCCC"> dress to get wrap</font>

1048
00:36:33,530 --> 00:36:36,650
<font color="#E5E5E5">and everything is awesome except it's</font>

1049
00:36:35,150 --> 00:36:38,930
<font color="#E5E5E5">not because we have this little</font><font color="#CCCCCC"> thing</font>

1050
00:36:36,650 --> 00:36:40,849
called<font color="#CCCCCC"> case law or</font><font color="#E5E5E5"> just yes</font><font color="#CCCCCC"> lauren</font>

1051
00:36:38,930 --> 00:36:43,368
general which randomizes<font color="#CCCCCC"> the addresses</font>

1052
00:36:40,849 --> 00:36:45,470
<font color="#E5E5E5">that code is</font><font color="#CCCCCC"> at so</font><font color="#E5E5E5"> even though</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> can</font>

1053
00:36:43,369 --> 00:36:48,020
overwrite a return address<font color="#CCCCCC"> and in theory</font>

1054
00:36:45,470 --> 00:36:49,520
<font color="#CCCCCC">get robbed well over any return</font>

1055
00:36:48,020 --> 00:36:51,170
<font color="#E5E5E5">addresses completely worthless unless I</font>

1056
00:36:49,520 --> 00:36:53,720
know what to<font color="#E5E5E5"> override the return address</font>

1057
00:36:51,170 --> 00:36:56,030
with right I currently don't<font color="#E5E5E5"> know where</font>

1058
00:36:53,720 --> 00:36:57,919
code lives<font color="#E5E5E5"> so I can't tell the CPU to</font>

1059
00:36:56,030 --> 00:36:58,880
jump to somewhere I can tell it to<font color="#E5E5E5"> jump</font>

1060
00:36:57,920 --> 00:37:00,980
<font color="#E5E5E5">to somewhere I</font><font color="#CCCCCC"> just don't know where to</font>

1061
00:36:58,880 --> 00:37:04,520
<font color="#E5E5E5">tell it to jump so that's what bypassing</font>

1062
00:37:00,980 --> 00:37:06,710
case law is all about<font color="#CCCCCC"> and practice what</font>

1063
00:37:04,520 --> 00:37:09,290
<font color="#E5E5E5">I tried to do was bypass case law by</font>

1064
00:37:06,710 --> 00:37:12,049
finding an info<font color="#CCCCCC"> league bug which turned</font>

1065
00:37:09,290 --> 00:37:14,690
out to<font color="#E5E5E5"> to</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> be too difficult</font><font color="#CCCCCC"> thanks to</font>

1066
00:37:12,049 --> 00:37:17,540
thanks<font color="#E5E5E5"> to this the way that the</font><font color="#CCCCCC"> VM</font>

1067
00:37:14,690 --> 00:37:19,400
switch message structure<font color="#E5E5E5"> is is made what</font>

1068
00:37:17,540 --> 00:37:21,799
<font color="#E5E5E5">we you can see here is you first have a</font>

1069
00:37:19,400 --> 00:37:23,690
header that<font color="#CCCCCC"> is common</font><font color="#E5E5E5"> to all these</font>

1070
00:37:21,799 --> 00:37:25,730
<font color="#E5E5E5">messages but then you have a union of</font>

1071
00:37:23,690 --> 00:37:27,589
all<font color="#E5E5E5"> the different message structures</font>

1072
00:37:25,730 --> 00:37:30,680
right that's what's being shown here<font color="#E5E5E5"> and</font>

1073
00:37:27,589 --> 00:37:32,029
what that<font color="#CCCCCC"> ends up meaning is a different</font>

1074
00:37:30,680 --> 00:37:35,000
messages can actually have<font color="#CCCCCC"> different</font>

1075
00:37:32,030 --> 00:37:37,099
sizes<font color="#E5E5E5"> but the struct that holds that</font>

1076
00:37:35,000 --> 00:37:38,569
encapsulates<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of these messages is</font>

1077
00:37:37,099 --> 00:37:41,329
always going<font color="#E5E5E5"> to have the same size and</font>

1078
00:37:38,569 --> 00:37:44,930
so what you might end up end up with is

1079
00:37:41,329 --> 00:37:46,339
a you<font color="#E5E5E5"> know this this</font><font color="#CCCCCC"> is going to be at</font>

1080
00:37:44,930 --> 00:37:48,078
the top is<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the memory base</font>

1081
00:37:46,339 --> 00:37:50,210
actually<font color="#CCCCCC"> use</font><font color="#E5E5E5"> inside a message at the</font>

1082
00:37:48,079 --> 00:37:50,640
bottom<font color="#E5E5E5"> is going to</font><font color="#CCCCCC"> be the size of the</font>

1083
00:37:50,210 --> 00:37:51,900
action

1084
00:37:50,640 --> 00:37:54,690
full message<font color="#CCCCCC"> that might end up being</font>

1085
00:37:51,900 --> 00:37:56,849
<font color="#CCCCCC">sent</font><font color="#E5E5E5"> back and that was the info</font><font color="#CCCCCC"> leak</font>

1086
00:37:54,690 --> 00:37:59,989
that happened was<font color="#CCCCCC"> basically there was a</font>

1087
00:37:56,849 --> 00:38:02,099
struct<font color="#CCCCCC"> for this whole NV SP message</font>

1088
00:37:59,989 --> 00:38:04,710
<font color="#E5E5E5">thing that was being allocated on the</font>

1089
00:38:02,099 --> 00:38:06,210
stack<font color="#CCCCCC"> as you do</font><font color="#E5E5E5"> but only these first two</font>

1090
00:38:04,710 --> 00:38:10,019
fields<font color="#E5E5E5"> of the struct were being</font>

1091
00:38:06,210 --> 00:38:11,369
initialized<font color="#E5E5E5"> right and even even though</font>

1092
00:38:10,019 --> 00:38:13,950
<font color="#E5E5E5">only</font><font color="#CCCCCC"> these two fields</font><font color="#E5E5E5"> were being</font>

1093
00:38:11,369 --> 00:38:15,690
initialized the whole of the structure

1094
00:38:13,950 --> 00:38:17,249
like the whole like what<font color="#CCCCCC"> is it 40 bytes</font>

1095
00:38:15,690 --> 00:38:19,230
<font color="#E5E5E5">we're being sent back and so that</font>

1096
00:38:17,249 --> 00:38:22,319
<font color="#E5E5E5">includes 32 bytes of uninitialized data</font>

1097
00:38:19,230 --> 00:38:24,599
and that means I get<font color="#E5E5E5"> 32 bytes of a free</font>

1098
00:38:22,319 --> 00:38:27,269
stack data and stacks of course very

1099
00:38:24,599 --> 00:38:28,829
famously contain return addresses and if

1100
00:38:27,269 --> 00:38:30,450
I can read a return address<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can figure</font>

1101
00:38:28,829 --> 00:38:31,980
out<font color="#E5E5E5"> where code lives out if I can figure</font>

1102
00:38:30,450 --> 00:38:34,288
out where<font color="#CCCCCC"> Codel is that I can</font><font color="#E5E5E5"> just build</font>

1103
00:38:31,980 --> 00:38:35,730
out my wrap chain and so that's

1104
00:38:34,289 --> 00:38:37,710
<font color="#CCCCCC">basically that's that's just what this</font>

1105
00:38:35,730 --> 00:38:39,839
this<font color="#E5E5E5"> slide is showing is the final</font>

1106
00:38:37,710 --> 00:38:41,789
exploit is<font color="#E5E5E5"> okay we</font><font color="#CCCCCC"> use this</font><font color="#E5E5E5"> in Foley to</font>

1107
00:38:39,839 --> 00:38:43,890
locate<font color="#E5E5E5"> VMs which we use that information</font>

1108
00:38:41,789 --> 00:38:46,230
to build<font color="#E5E5E5"> a rope chain we over a</font><font color="#CCCCCC"> a stack</font>

1109
00:38:43,890 --> 00:38:48,089
and we get<font color="#CCCCCC"> Rob and</font><font color="#E5E5E5"> then once we have</font>

1110
00:38:46,230 --> 00:38:50,009
code execution there well we can just

1111
00:38:48,089 --> 00:38:51,739
<font color="#CCCCCC">kind of</font><font color="#E5E5E5"> do whatever you want which is</font>

1112
00:38:50,009 --> 00:38:53,999
great we're done<font color="#E5E5E5"> except we're not</font>

1113
00:38:51,739 --> 00:38:55,380
because it turns out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> info</font><font color="#E5E5E5"> leak as</font>

1114
00:38:53,999 --> 00:38:57,598
awesome as<font color="#E5E5E5"> it was only applied to</font>

1115
00:38:55,380 --> 00:39:02,130
Windows Server<font color="#E5E5E5"> 2012 r2</font><font color="#CCCCCC"> time I was trying</font>

1116
00:38:57,599 --> 00:39:05,849
<font color="#E5E5E5">to</font><font color="#CCCCCC"> to to</font><font color="#E5E5E5"> target Windows 10</font>

1117
00:39:02,130 --> 00:39:07,230
no no one fully<font color="#E5E5E5"> there so whoops and that</font>

1118
00:39:05,849 --> 00:39:08,970
was annoying<font color="#E5E5E5"> because I kept looking</font><font color="#CCCCCC"> for</font>

1119
00:39:07,230 --> 00:39:10,499
a couple<font color="#E5E5E5"> days I mean me even like a week</font>

1120
00:39:08,970 --> 00:39:13,859
for an info leak<font color="#CCCCCC"> I was getting very</font>

1121
00:39:10,499 --> 00:39:16,348
<font color="#E5E5E5">desperate</font><font color="#CCCCCC"> and I did</font><font color="#E5E5E5"> not find one</font><font color="#CCCCCC"> so what</font>

1122
00:39:13,859 --> 00:39:17,910
I found instead was well started

1123
00:39:16,349 --> 00:39:19,859
thinking well<font color="#CCCCCC"> okay I'm really desperate</font>

1124
00:39:17,910 --> 00:39:21,779
right<font color="#E5E5E5"> now can i maybe bypass</font><font color="#CCCCCC"> ksl are</font>

1125
00:39:19,859 --> 00:39:25,109
without in<font color="#CCCCCC"> philly and the answer to that</font>

1126
00:39:21,779 --> 00:39:26,640
is actually<font color="#CCCCCC"> surprisingly yes the thing</font>

1127
00:39:25,109 --> 00:39:28,769
<font color="#E5E5E5">to realize</font><font color="#CCCCCC"> is as mentioned</font><font color="#E5E5E5"> earlier</font>

1128
00:39:26,640 --> 00:39:30,960
actually<font color="#CCCCCC"> control the size of the buffer</font>

1129
00:39:28,769 --> 00:39:32,700
<font color="#E5E5E5">and the offset of the buffer that's</font>

1130
00:39:30,960 --> 00:39:35,700
being written into<font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> right and</font>

1131
00:39:32,700 --> 00:39:38,399
what that means is I can<font color="#E5E5E5"> actually maybe</font>

1132
00:39:35,700 --> 00:39:40,710
do a partial overwrite of a return

1133
00:39:38,400 --> 00:39:43,499
address<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we know that</font><font color="#E5E5E5"> each given</font>

1134
00:39:40,710 --> 00:39:45,660
module<font color="#E5E5E5"> is</font><font color="#CCCCCC"> aligned</font><font color="#E5E5E5"> to given boundary on</font>

1135
00:39:43,499 --> 00:39:46,919
Windows at that time at least<font color="#E5E5E5"> I think is</font>

1136
00:39:45,660 --> 00:39:50,160
<font color="#E5E5E5">still the same but</font><font color="#CCCCCC"> at that time at least</font>

1137
00:39:46,920 --> 00:39:51,930
<font color="#E5E5E5">it was</font><font color="#CCCCCC"> 0 X 10,000 bytes</font><font color="#E5E5E5"> that means I can</font>

1138
00:39:50,160 --> 00:39:53,759
<font color="#CCCCCC">overwrite the lower two bytes</font><font color="#E5E5E5"> of any</font>

1139
00:39:51,930 --> 00:39:56,069
given<font color="#CCCCCC"> return address and</font><font color="#E5E5E5"> no they will</font>

1140
00:39:53,759 --> 00:39:58,549
still be within you know within those

1141
00:39:56,069 --> 00:40:01,980
boundaries will still be within that

1142
00:39:58,549 --> 00:40:03,450
<font color="#E5E5E5">that code module and in and it'll still</font>

1143
00:40:01,980 --> 00:40:04,260
<font color="#E5E5E5">be like a valid code address</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can</font>

1144
00:40:03,450 --> 00:40:08,339
even<font color="#CCCCCC"> nowheres</font>

1145
00:40:04,260 --> 00:40:09,840
<font color="#CCCCCC">2.2</font><font color="#E5E5E5"> right so so okay</font><font color="#CCCCCC"> that that's kind of</font>

1146
00:40:08,340 --> 00:40:12,600
<font color="#E5E5E5">awesome and this was the example I am</font>

1147
00:40:09,840 --> 00:40:13,590
writing<font color="#E5E5E5"> a valid return address which</font><font color="#CCCCCC"> is</font>

1148
00:40:12,600 --> 00:40:15,299
supposed to be returning to this

1149
00:40:13,590 --> 00:40:17,280
function<font color="#E5E5E5"> and pointing it towards a</font><font color="#CCCCCC"> rope</font>

1150
00:40:15,300 --> 00:40:19,500
gadget so basically that gives<font color="#CCCCCC"> me the</font>

1151
00:40:17,280 --> 00:40:24,540
ability<font color="#E5E5E5"> to execute a single</font><font color="#CCCCCC"> rock gadget</font>

1152
00:40:19,500 --> 00:40:26,160
<font color="#E5E5E5">and well is that useful yes</font><font color="#CCCCCC"> taking a</font>

1153
00:40:24,540 --> 00:40:28,830
look back<font color="#E5E5E5"> at our heap massaging from</font>

1154
00:40:26,160 --> 00:40:30,779
<font color="#E5E5E5">earlier</font><font color="#CCCCCC"> see we had the receive buffer</font><font color="#E5E5E5"> we</font>

1155
00:40:28,830 --> 00:40:32,730
have a stack there's an offset the stack

1156
00:40:30,780 --> 00:40:34,500
we're gonna be<font color="#CCCCCC"> overriding</font><font color="#E5E5E5"> well what I</font>

1157
00:40:32,730 --> 00:40:36,570
<font color="#CCCCCC">can do is I can actually allocate</font>

1158
00:40:34,500 --> 00:40:37,980
another shared buffer<font color="#E5E5E5"> right after that</font>

1159
00:40:36,570 --> 00:40:39,240
stack in<font color="#E5E5E5"> this case is</font><font color="#CCCCCC"> the send buffer</font>

1160
00:40:37,980 --> 00:40:41,880
because we're already<font color="#CCCCCC"> using the receive</font>

1161
00:40:39,240 --> 00:40:43,200
buffer for something<font color="#E5E5E5"> and the fact that</font>

1162
00:40:41,880 --> 00:40:45,090
there's gonna be<font color="#E5E5E5"> a shared buffer here</font>

1163
00:40:43,200 --> 00:40:48,299
<font color="#CCCCCC">you might be able to see where I'm</font><font color="#E5E5E5"> going</font>

1164
00:40:45,090 --> 00:40:50,400
with<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is that if I</font><font color="#CCCCCC"> am able</font><font color="#E5E5E5"> to you</font>

1165
00:40:48,300 --> 00:40:52,800
know execute<font color="#E5E5E5"> a</font><font color="#CCCCCC"> wrap gadget</font><font color="#E5E5E5"> that's going</font>

1166
00:40:50,400 --> 00:40:55,380
to increment<font color="#CCCCCC"> RSP by a large enough value</font>

1167
00:40:52,800 --> 00:40:57,540
<font color="#E5E5E5">RSP is going to end up being in my</font>

1168
00:40:55,380 --> 00:40:59,040
shared buffer<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so that's</font>

1169
00:40:57,540 --> 00:41:01,230
<font color="#CCCCCC">exactly what I do here I have this</font>

1170
00:40:59,040 --> 00:41:03,060
gadget here<font color="#CCCCCC"> I override the lower two</font>

1171
00:41:01,230 --> 00:41:05,220
<font color="#E5E5E5">bytes of a return</font><font color="#CCCCCC"> address on the</font><font color="#E5E5E5"> valid</font>

1172
00:41:03,060 --> 00:41:07,650
stack and an RSP is<font color="#E5E5E5"> going to go through</font>

1173
00:41:05,220 --> 00:41:10,049
<font color="#E5E5E5">all the way up there all the way down</font>

1174
00:41:07,650 --> 00:41:12,420
here<font color="#CCCCCC"> and since that buffer is shared</font>

1175
00:41:10,050 --> 00:41:14,369
with<font color="#CCCCCC"> the guest OS</font><font color="#E5E5E5"> as an attacker</font><font color="#CCCCCC"> I can</font>

1176
00:41:12,420 --> 00:41:17,700
just read and write values<font color="#CCCCCC"> to and from</font>

1177
00:41:14,369 --> 00:41:19,470
<font color="#E5E5E5">it at all times</font><font color="#CCCCCC"> and that means</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> okay</font>

1178
00:41:17,700 --> 00:41:22,230
well first off<font color="#E5E5E5"> what's gonna happen is</font>

1179
00:41:19,470 --> 00:41:23,549
it's<font color="#E5E5E5"> as soon as it tries</font><font color="#CCCCCC"> to return it's</font>

1180
00:41:22,230 --> 00:41:25,500
going to crash<font color="#E5E5E5"> right because it's going</font>

1181
00:41:23,550 --> 00:41:27,630
<font color="#E5E5E5">to try to return to</font><font color="#CCCCCC"> address zero that's</font>

1182
00:41:25,500 --> 00:41:30,180
not great<font color="#E5E5E5"> but what happens</font><font color="#CCCCCC"> when a</font>

1183
00:41:27,630 --> 00:41:31,500
process crashes in<font color="#CCCCCC"> the kernel is it's</font>

1184
00:41:30,180 --> 00:41:33,450
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to go through the exception</font>

1185
00:41:31,500 --> 00:41:35,190
<font color="#CCCCCC">Handler and the exception</font><font color="#E5E5E5"> handler itself</font>

1186
00:41:33,450 --> 00:41:36,629
is going<font color="#E5E5E5"> to start spilling data to this</font>

1187
00:41:35,190 --> 00:41:39,720
time because it keeps<font color="#E5E5E5"> using the stack</font>

1188
00:41:36,630 --> 00:41:41,550
<font color="#CCCCCC">and at that</font><font color="#E5E5E5"> point as an attacker</font><font color="#CCCCCC"> I am</font>

1189
00:41:39,720 --> 00:41:44,250
able<font color="#CCCCCC"> to read back a return address or</font>

1190
00:41:41,550 --> 00:41:45,750
whatever<font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out you know the ASLR</font>

1191
00:41:44,250 --> 00:41:47,820
values like figure<font color="#E5E5E5"> out where code is</font>

1192
00:41:45,750 --> 00:41:49,050
located<font color="#CCCCCC"> at and I can also overwrite the</font>

1193
00:41:47,820 --> 00:41:51,930
return address<font color="#CCCCCC"> and actually get</font><font color="#E5E5E5"> robbed</font>

1194
00:41:49,050 --> 00:41:54,810
<font color="#E5E5E5">just by basically hijacking this</font>

1195
00:41:51,930 --> 00:41:58,910
exception handler in the kernel<font color="#CCCCCC"> which is</font>

1196
00:41:54,810 --> 00:42:01,200
<font color="#E5E5E5">you know super janky but</font><font color="#CCCCCC"> it does work</font>

1197
00:41:58,910 --> 00:42:02,490
and so at that<font color="#E5E5E5"> point</font><font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this</font>

1198
00:42:01,200 --> 00:42:03,960
is exactly<font color="#CCCCCC"> what I just</font><font color="#E5E5E5"> described you</font>

1199
00:42:02,490 --> 00:42:05,910
<font color="#E5E5E5">know you have a</font><font color="#CCCCCC"> generic reproduction</font>

1200
00:42:03,960 --> 00:42:07,170
fault<font color="#CCCCCC"> I start spilling</font><font color="#E5E5E5"> useful data to</font>

1201
00:42:05,910 --> 00:42:08,700
the stack which is<font color="#E5E5E5"> shared with the</font>

1202
00:42:07,170 --> 00:42:10,560
<font color="#E5E5E5">attacker the attacker can start</font>

1203
00:42:08,700 --> 00:42:14,580
overwriting that data<font color="#E5E5E5"> get</font><font color="#CCCCCC"> code execution</font>

1204
00:42:10,560 --> 00:42:17,250
<font color="#E5E5E5">and it's all good at that point we have</font>

1205
00:42:14,580 --> 00:42:18,180
gone<font color="#CCCCCC"> through the exploit at least in</font>

1206
00:42:17,250 --> 00:42:20,910
theory<font color="#E5E5E5"> like how</font>

1207
00:42:18,180 --> 00:42:23,609
<font color="#CCCCCC">and we are hopefully going to see it</font>

1208
00:42:20,910 --> 00:42:32,038
work in<font color="#E5E5E5"> action</font><font color="#CCCCCC"> I say hopefully because</font>

1209
00:42:23,609 --> 00:42:34,859
you never know okay<font color="#CCCCCC"> so is that</font><font color="#E5E5E5"> it yes</font>

1210
00:42:32,039 --> 00:42:37,380
<font color="#CCCCCC">that is it although I can't really</font><font color="#E5E5E5"> oh</font>

1211
00:42:34,859 --> 00:42:41,940
never mind I<font color="#CCCCCC"> can totally</font><font color="#E5E5E5"> see okay so</font>

1212
00:42:37,380 --> 00:42:43,259
where's my<font color="#CCCCCC"> mouse</font><font color="#E5E5E5"> area okay so this is a</font>

1213
00:42:41,940 --> 00:42:45,480
virtual<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> this is running on</font>

1214
00:42:43,259 --> 00:42:47,099
Server 2012 r2<font color="#E5E5E5"> because I did not</font><font color="#CCCCCC"> want</font>

1215
00:42:45,480 --> 00:42:49,499
you<font color="#CCCCCC"> to see if a janky version of the</font>

1216
00:42:47,099 --> 00:42:50,940
exploit<font color="#CCCCCC"> I want to see you to</font><font color="#E5E5E5"> see the vet</font>

1217
00:42:49,499 --> 00:42:53,038
version that actually<font color="#CCCCCC"> has info leaked</font>

1218
00:42:50,940 --> 00:43:02,549
<font color="#CCCCCC">because hopefully it</font><font color="#E5E5E5"> will actually work</font>

1219
00:42:53,039 --> 00:43:06,839
<font color="#CCCCCC">so uh I might kill</font><font color="#E5E5E5"> myself this is not</font>

1220
00:43:02,549 --> 00:43:08,279
<font color="#E5E5E5">this just froze this is exactly what</font>

1221
00:43:06,839 --> 00:43:10,470
happened<font color="#CCCCCC"> at blackhat</font><font color="#E5E5E5"> and I really hate</font>

1222
00:43:08,279 --> 00:43:13,019
myself<font color="#CCCCCC"> okay so I'm gonna keep going</font>

1223
00:43:10,470 --> 00:43:15,598
through slides once again<font color="#CCCCCC"> while I try</font><font color="#E5E5E5"> to</font>

1224
00:43:13,019 --> 00:43:17,308
fix the demo<font color="#E5E5E5"> because apparently it does</font>

1225
00:43:15,599 --> 00:43:20,759
this<font color="#E5E5E5"> computer does</font><font color="#CCCCCC"> not like being on for</font>

1226
00:43:17,309 --> 00:43:26,400
<font color="#E5E5E5">this long really sorry about this oh and</font>

1227
00:43:20,759 --> 00:43:28,380
this is<font color="#E5E5E5"> not gonna work</font><font color="#CCCCCC"> okay so what I</font>

1228
00:43:26,400 --> 00:43:31,140
wanted to<font color="#CCCCCC"> talk to you about</font><font color="#E5E5E5"> after the</font>

1229
00:43:28,380 --> 00:43:32,759
live demo which<font color="#E5E5E5"> is definitely still</font>

1230
00:43:31,140 --> 00:43:34,650
going to happen<font color="#CCCCCC"> is the work that we've</font>

1231
00:43:32,759 --> 00:43:36,509
done to<font color="#E5E5E5"> actually harden hyper-v as a</font>

1232
00:43:34,650 --> 00:43:38,670
result of his exploit and not purely<font color="#E5E5E5"> as</font>

1233
00:43:36,509 --> 00:43:40,230
a resolve<font color="#E5E5E5"> this exploit in fact you know</font>

1234
00:43:38,670 --> 00:43:42,359
just in general<font color="#E5E5E5"> this exploit has</font>

1235
00:43:40,230 --> 00:43:44,190
definitely motivated<font color="#CCCCCC"> very specific</font>

1236
00:43:42,359 --> 00:43:46,739
mitigations<font color="#E5E5E5"> I'm going to go through but</font>

1237
00:43:44,190 --> 00:43:48,869
we also do hardening work all the time

1238
00:43:46,739 --> 00:43:51,180
<font color="#E5E5E5">and that hardening work may have</font><font color="#CCCCCC"> been</font>

1239
00:43:48,869 --> 00:43:53,279
you know<font color="#E5E5E5"> helped on helped by this</font>

1240
00:43:51,180 --> 00:43:54,118
<font color="#E5E5E5">exploit happening but you know I don't</font>

1241
00:43:53,279 --> 00:43:55,259
want to<font color="#E5E5E5"> take all the credit for that</font>

1242
00:43:54,119 --> 00:43:58,489
<font color="#CCCCCC">obviously there's a</font><font color="#E5E5E5"> lot of very</font><font color="#CCCCCC"> talented</font>

1243
00:43:55,259 --> 00:44:00,989
<font color="#CCCCCC">people both</font><font color="#E5E5E5"> doing the work and</font><font color="#CCCCCC"> actually</font>

1244
00:43:58,489 --> 00:44:04,230
as well as like thinking about<font color="#CCCCCC"> what to</font>

1245
00:44:00,989 --> 00:44:06,660
do<font color="#CCCCCC"> so if</font><font color="#E5E5E5"> you if I think</font><font color="#CCCCCC"> about this</font>

1246
00:44:04,230 --> 00:44:08,819
exploit and how I<font color="#E5E5E5"> would you know maybe</font>

1247
00:44:06,660 --> 00:44:09,839
break it I think of three<font color="#E5E5E5"> different</font>

1248
00:44:08,819 --> 00:44:11,609
<font color="#CCCCCC">parts</font><font color="#E5E5E5"> right</font>

1249
00:44:09,839 --> 00:44:13,980
there's first<font color="#E5E5E5"> the first part would be</font>

1250
00:44:11,609 --> 00:44:15,839
vulnerability discovery which<font color="#E5E5E5"> is if an</font>

1251
00:44:13,980 --> 00:44:18,450
attacker can't find a<font color="#CCCCCC"> vulnerability it</font>

1252
00:44:15,839 --> 00:44:20,339
can't like they can't exploit it<font color="#E5E5E5"> right</font>

1253
00:44:18,450 --> 00:44:22,288
and you know it<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be ideal for us to</font>

1254
00:44:20,339 --> 00:44:24,720
just find all the bugs<font color="#E5E5E5"> fix all the bugs</font>

1255
00:44:22,289 --> 00:44:26,579
and<font color="#CCCCCC"> you know live happily happily ever</font>

1256
00:44:24,720 --> 00:44:27,598
after<font color="#E5E5E5"> but in practice that's not gonna</font>

1257
00:44:26,579 --> 00:44:29,039
happen that<font color="#E5E5E5"> doesn't mean</font><font color="#CCCCCC"> that we</font>

1258
00:44:27,599 --> 00:44:31,890
shouldn't be<font color="#CCCCCC"> doing anything</font><font color="#E5E5E5"> there either</font>

1259
00:44:29,039 --> 00:44:34,200
<font color="#E5E5E5">though</font><font color="#CCCCCC"> and that's why at least</font>

1260
00:44:31,890 --> 00:44:37,190
partially as a result<font color="#CCCCCC"> of his exploit we</font>

1261
00:44:34,200 --> 00:44:39,720
have done a<font color="#E5E5E5"> great deal of</font><font color="#CCCCCC"> of you know</font>

1262
00:44:37,190 --> 00:44:41,880
<font color="#CCCCCC">reviewing work</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> into VM switch and</font>

1263
00:44:39,720 --> 00:44:44,519
other hyper-v hyper-v processes because

1264
00:44:41,880 --> 00:44:45,660
you know doing this actual thing like

1265
00:44:44,519 --> 00:44:49,109
actually<font color="#E5E5E5"> showing that this stuff can</font>

1266
00:44:45,660 --> 00:44:50,940
<font color="#E5E5E5">work is a great way to kind of motivate</font>

1267
00:44:49,109 --> 00:44:52,170
<font color="#E5E5E5">people and show this is not this is</font><font color="#CCCCCC"> not</font>

1268
00:44:50,940 --> 00:44:54,480
science<font color="#CCCCCC"> fiction</font><font color="#E5E5E5"> right this is something</font>

1269
00:44:52,170 --> 00:44:55,950
<font color="#CCCCCC">that can totally happen in the wild and</font>

1270
00:44:54,480 --> 00:44:57,690
<font color="#E5E5E5">we might not be</font><font color="#CCCCCC"> able to see it and so</font>

1271
00:44:55,950 --> 00:44:59,970
<font color="#CCCCCC">that would</font><font color="#E5E5E5"> be the first</font><font color="#CCCCCC"> part is both</font>

1272
00:44:57,690 --> 00:45:01,349
both kind of<font color="#CCCCCC"> showing if this is</font><font color="#E5E5E5"> possible</font>

1273
00:44:59,970 --> 00:45:05,220
<font color="#E5E5E5">and like doing this reviewing work and</font>

1274
00:45:01,349 --> 00:45:06,779
then also you<font color="#CCCCCC"> know we have the bug</font>

1275
00:45:05,220 --> 00:45:10,160
bounty which I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go into and</font>

1276
00:45:06,779 --> 00:45:12,720
that's another another<font color="#E5E5E5"> big part</font><font color="#CCCCCC"> of that</font>

1277
00:45:10,160 --> 00:45:15,118
<font color="#CCCCCC">the second</font><font color="#E5E5E5"> part is trying to break the</font>

1278
00:45:12,720 --> 00:45:17,549
actual exploitation stage of this right

1279
00:45:15,119 --> 00:45:18,930
if we<font color="#E5E5E5"> break the</font><font color="#CCCCCC"> the exploit techniques</font>

1280
00:45:17,549 --> 00:45:20,609
<font color="#CCCCCC">they're actually</font><font color="#E5E5E5"> being used as exploit</font>

1281
00:45:18,930 --> 00:45:23,519
well it's also not<font color="#E5E5E5"> going to work even</font><font color="#CCCCCC"> if</font>

1282
00:45:20,609 --> 00:45:25,380
the<font color="#CCCCCC"> one</font><font color="#E5E5E5"> really still exists so ideally</font>

1283
00:45:23,519 --> 00:45:26,788
we want<font color="#E5E5E5"> to just be able to</font><font color="#CCCCCC"> bring those</font>

1284
00:45:25,380 --> 00:45:28,079
expertly techniques and that's part of

1285
00:45:26,789 --> 00:45:30,089
the<font color="#E5E5E5"> work</font><font color="#CCCCCC"> that we're doing</font><font color="#E5E5E5"> and the last</font>

1286
00:45:28,079 --> 00:45:32,250
thing would be well even if the exploit

1287
00:45:30,089 --> 00:45:33,720
happens<font color="#E5E5E5"> maybe it's not that</font><font color="#CCCCCC"> big a deal</font>

1288
00:45:32,250 --> 00:45:35,789
<font color="#E5E5E5">maybe we can make it such</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's not</font>

1289
00:45:33,720 --> 00:45:37,259
<font color="#CCCCCC">that big</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> deal for</font><font color="#E5E5E5"> example by</font><font color="#CCCCCC"> making</font>

1290
00:45:35,789 --> 00:45:39,390
the targets less interesting or like

1291
00:45:37,259 --> 00:45:41,250
<font color="#E5E5E5">making technology that will actually</font>

1292
00:45:39,390 --> 00:45:43,740
<font color="#E5E5E5">detect the exploit and make it such a we</font>

1293
00:45:41,250 --> 00:45:45,900
can mitigate it<font color="#CCCCCC"> mitigate the attack as</font>

1294
00:45:43,740 --> 00:45:48,058
<font color="#CCCCCC">is happening</font><font color="#E5E5E5"> all right and so this is</font>

1295
00:45:45,900 --> 00:45:50,460
the first<font color="#E5E5E5"> thing I'm actually well I said</font>

1296
00:45:48,059 --> 00:45:51,480
this is<font color="#E5E5E5"> the first thing hardening this</font>

1297
00:45:50,460 --> 00:45:53,519
is actually the second thing that<font color="#E5E5E5"> was</font>

1298
00:45:51,480 --> 00:45:54,839
number<font color="#E5E5E5"> two</font><font color="#CCCCCC"> on my list hardening one of</font>

1299
00:45:53,519 --> 00:45:57,180
the things that we've<font color="#E5E5E5"> done as a direct</font>

1300
00:45:54,839 --> 00:46:00,420
result of his<font color="#E5E5E5"> exploit was make it such</font>

1301
00:45:57,180 --> 00:46:02,399
that kernel stacks are no longer<font color="#E5E5E5"> being</font>

1302
00:46:00,420 --> 00:46:05,039
allocated in the<font color="#E5E5E5"> same system</font><font color="#CCCCCC"> PT region</font>

1303
00:46:02,400 --> 00:46:06,359
as<font color="#CCCCCC"> gee paddles</font><font color="#E5E5E5"> and as a result this X</font>

1304
00:46:05,039 --> 00:46:09,480
point would actually<font color="#E5E5E5"> just you know be</font>

1305
00:46:06,359 --> 00:46:11,730
broken<font color="#E5E5E5"> right</font><font color="#CCCCCC"> because at this point we're</font>

1306
00:46:09,480 --> 00:46:13,619
overflowing<font color="#CCCCCC"> outside of a buffer on the</font>

1307
00:46:11,730 --> 00:46:14,700
host OS which as an attacker is still

1308
00:46:13,619 --> 00:46:16,559
<font color="#CCCCCC">pretty awesome</font><font color="#E5E5E5"> but we can't override</font>

1309
00:46:14,700 --> 00:46:18,118
stacks<font color="#E5E5E5"> and we don't</font><font color="#CCCCCC"> really know what's</font>

1310
00:46:16,559 --> 00:46:19,619
being allocated there the only<font color="#E5E5E5"> other</font>

1311
00:46:18,119 --> 00:46:22,650
things being allocated<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> region</font>

1312
00:46:19,619 --> 00:46:25,500
now<font color="#E5E5E5"> or MD LS MD</font><font color="#CCCCCC"> ELLs might still be</font>

1313
00:46:22,650 --> 00:46:27,660
exploitable while being<font color="#E5E5E5"> well being</font>

1314
00:46:25,500 --> 00:46:29,069
overridden<font color="#E5E5E5"> but is much harder and you</font>

1315
00:46:27,660 --> 00:46:30,359
don't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> have as fine-grained</font>

1316
00:46:29,069 --> 00:46:31,558
control over those because typically

1317
00:46:30,359 --> 00:46:33,900
those are<font color="#E5E5E5"> going to be used by buffers</font>

1318
00:46:31,559 --> 00:46:35,519
but by drivers they're going<font color="#E5E5E5"> to be</font>

1319
00:46:33,900 --> 00:46:37,319
mapped in and out without<font color="#E5E5E5"> you having</font>

1320
00:46:35,519 --> 00:46:39,508
<font color="#E5E5E5">much control of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> know it</font>

1321
00:46:37,319 --> 00:46:43,259
just<font color="#E5E5E5"> makes things much harder maybe even</font>

1322
00:46:39,509 --> 00:46:44,059
<font color="#CCCCCC">impossible so just not</font><font color="#E5E5E5"> just as a result</font>

1323
00:46:43,259 --> 00:46:45,650
well<font color="#E5E5E5"> as</font>

1324
00:46:44,059 --> 00:46:46,969
stiffly this is something we did and we

1325
00:46:45,650 --> 00:46:49,640
know this would not just<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> this</font>

1326
00:46:46,969 --> 00:46:51,079
exploit<font color="#CCCCCC"> because out</font><font color="#E5E5E5"> of bounds accesses</font>

1327
00:46:49,640 --> 00:46:53,779
from shared buffers have happened<font color="#E5E5E5"> and</font>

1328
00:46:51,079 --> 00:46:55,309
other vulnerabilities<font color="#E5E5E5"> as well so this</font>

1329
00:46:53,779 --> 00:46:57,709
<font color="#CCCCCC">was the</font><font color="#E5E5E5"> first piece</font><font color="#CCCCCC"> of hardening another</font>

1330
00:46:55,309 --> 00:47:00,829
piece of hardening has been you<font color="#CCCCCC"> know is</font>

1331
00:46:57,709 --> 00:47:05,598
<font color="#E5E5E5">just like much</font><font color="#CCCCCC"> more general is going</font><font color="#E5E5E5"> to</font>

1332
00:47:00,829 --> 00:47:07,400
be stuff like like<font color="#E5E5E5"> Casey Casey FG which</font>

1333
00:47:05,599 --> 00:47:10,759
we kind<font color="#CCCCCC"> of talked about and the previous</font>

1334
00:47:07,400 --> 00:47:13,009
talk<font color="#CCCCCC"> hvc I just kind of we there are</font>

1335
00:47:10,759 --> 00:47:15,589
more<font color="#CCCCCC"> and more efforts to kind of enable</font>

1336
00:47:13,009 --> 00:47:18,529
that by default<font color="#E5E5E5"> in more and more SKUs</font>

1337
00:47:15,589 --> 00:47:20,599
and<font color="#CCCCCC"> such in addition to</font><font color="#E5E5E5"> that you're</font>

1338
00:47:18,529 --> 00:47:22,339
going to<font color="#E5E5E5"> have more importantly things</font>

1339
00:47:20,599 --> 00:47:24,170
like CT which would<font color="#CCCCCC"> again have</font><font color="#E5E5E5"> broken</font>

1340
00:47:22,339 --> 00:47:26,269
<font color="#E5E5E5">this exploit CT which was mentioned</font><font color="#CCCCCC"> in</font>

1341
00:47:24,170 --> 00:47:29,949
the<font color="#CCCCCC"> previous talk is the kind of</font>

1342
00:47:26,269 --> 00:47:33,499
<font color="#E5E5E5">hardware shadow stack stuff that was</font>

1343
00:47:29,949 --> 00:47:35,239
that was a that<font color="#CCCCCC"> was that</font><font color="#E5E5E5"> would actually</font>

1344
00:47:33,499 --> 00:47:38,238
prevent you<font color="#CCCCCC"> from</font><font color="#E5E5E5"> overwriting a return</font>

1345
00:47:35,239 --> 00:47:40,039
<font color="#CCCCCC">address</font><font color="#E5E5E5"> and and just doing</font><font color="#CCCCCC"> Rob</font><font color="#E5E5E5"> and well</font>

1346
00:47:38,239 --> 00:47:43,219
I actually just<font color="#E5E5E5"> fixed the exploit so let</font>

1347
00:47:40,039 --> 00:47:45,949
me just switch back real quick<font color="#E5E5E5"> to my</font>

1348
00:47:43,219 --> 00:47:49,069
demo which I swear the<font color="#E5E5E5"> next time I do</font>

1349
00:47:45,949 --> 00:47:50,689
this talk<font color="#CCCCCC"> it's definitely gonna</font><font color="#E5E5E5"> work on</font>

1350
00:47:49,069 --> 00:47:54,079
the first try<font color="#CCCCCC"> okay so what happened here</font>

1351
00:47:50,689 --> 00:47:55,729
<font color="#E5E5E5">it was I</font><font color="#CCCCCC"> just tried this right I</font><font color="#E5E5E5"> grabbed</font>

1352
00:47:54,079 --> 00:47:57,410
the channel I<font color="#E5E5E5"> did the exploit I check</font>

1353
00:47:55,729 --> 00:47:59,390
the status<font color="#CCCCCC"> status</font><font color="#E5E5E5"> here tells me</font><font color="#CCCCCC"> that</font>

1354
00:47:57,410 --> 00:48:01,038
<font color="#CCCCCC">this actually worked</font><font color="#E5E5E5"> right</font>

1355
00:47:59,390 --> 00:48:03,469
nothing crashed or<font color="#CCCCCC"> anything everything</font>

1356
00:48:01,039 --> 00:48:05,420
is<font color="#E5E5E5"> all good</font><font color="#CCCCCC"> so at this</font><font color="#E5E5E5"> point I can start</font>

1357
00:48:03,469 --> 00:48:05,900
<font color="#CCCCCC">doing stuff</font><font color="#E5E5E5"> like listing processes in</font>

1358
00:48:05,420 --> 00:48:08,390
the host<font color="#E5E5E5"> OS</font>

1359
00:48:05,900 --> 00:48:10,699
which<font color="#CCCCCC"> okay that's not that's not really</font>

1360
00:48:08,390 --> 00:48:14,328
super interesting<font color="#E5E5E5"> but because I actually</font>

1361
00:48:10,699 --> 00:48:18,619
have a code<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a code execution</font><font color="#CCCCCC"> I can</font>

1362
00:48:14,329 --> 00:48:20,420
start<font color="#E5E5E5"> doing stuff like injecting dll's</font>

1363
00:48:18,619 --> 00:48:23,449
into random processes so this case<font color="#E5E5E5"> I'm</font>

1364
00:48:20,420 --> 00:48:27,670
going<font color="#E5E5E5"> to try to pop calc by injecting a</font>

1365
00:48:23,449 --> 00:48:27,670
<font color="#CCCCCC">dll in explorer.exe</font><font color="#E5E5E5"> on the host</font>

1366
00:48:29,999 --> 00:48:33,430
and you know what just<font color="#CCCCCC"> think of how</font><font color="#E5E5E5"> much</font>

1367
00:48:32,259 --> 00:48:36,009
more impressive<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would have been if</font>

1368
00:48:33,430 --> 00:48:37,749
had<font color="#CCCCCC"> not failed the first</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> just like</font>

1369
00:48:36,009 --> 00:48:39,609
try<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> that mental image in your</font>

1370
00:48:37,749 --> 00:48:40,779
<font color="#E5E5E5">mind</font><font color="#CCCCCC"> the next thing that I think</font><font color="#E5E5E5"> is kind</font>

1371
00:48:39,609 --> 00:48:42,999
<font color="#CCCCCC">of cool by the sex point</font><font color="#E5E5E5"> is like I</font>

1372
00:48:40,779 --> 00:48:45,039
wanted to show<font color="#E5E5E5"> you that once you have</font>

1373
00:48:42,999 --> 00:48:46,868
control<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the host OS at least with the</font>

1374
00:48:45,039 --> 00:48:48,849
architecture in you know Windows Server

1375
00:48:46,869 --> 00:48:50,499
<font color="#E5E5E5">2012 there's definitely efforts being</font>

1376
00:48:48,849 --> 00:48:52,719
<font color="#CCCCCC">made towards things like</font><font color="#E5E5E5"> you know</font>

1377
00:48:50,499 --> 00:48:55,839
<font color="#E5E5E5">confidential computing and azure and and</font>

1378
00:48:52,719 --> 00:48:58,749
such<font color="#CCCCCC"> well because</font><font color="#E5E5E5"> I have control</font><font color="#CCCCCC"> over</font>

1379
00:48:55,839 --> 00:49:00,969
the host<font color="#CCCCCC"> OS I can actually start messing</font>

1380
00:48:58,749 --> 00:49:02,109
with other<font color="#E5E5E5"> other virtual machines it's</font>

1381
00:49:00,969 --> 00:49:05,619
so an<font color="#CCCCCC"> example</font><font color="#E5E5E5"> of that is</font><font color="#CCCCCC"> going to be</font>

1382
00:49:02,109 --> 00:49:09,450
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so I can list various partitions on</font>

1383
00:49:05,619 --> 00:49:11,859
this computer<font color="#CCCCCC"> okay I can grab the guest</font>

1384
00:49:09,450 --> 00:49:14,879
<font color="#CCCCCC">number 3</font><font color="#E5E5E5"> is going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the one to the</font>

1385
00:49:11,859 --> 00:49:18,880
<font color="#CCCCCC">right hopefully start just doing stuff</font>

1386
00:49:14,880 --> 00:49:20,890
<font color="#E5E5E5">and once that's done I can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> just</font>

1387
00:49:18,880 --> 00:49:28,690
reuse that<font color="#CCCCCC"> I can list processes in that</font>

1388
00:49:20,890 --> 00:49:34,660
<font color="#CCCCCC">other VM and hopefully this</font><font color="#E5E5E5"> is Windows</font>

1389
00:49:28,690 --> 00:49:39,609
<font color="#CCCCCC">10 so it looks low different but so</font>

1390
00:49:34,660 --> 00:49:41,319
<font color="#E5E5E5">that's the live demo</font><font color="#CCCCCC"> and just</font><font color="#E5E5E5"> I should</font>

1391
00:49:39,609 --> 00:49:44,710
<font color="#E5E5E5">really be more used to my demos failing</font>

1392
00:49:41,319 --> 00:49:47,049
to be honest<font color="#CCCCCC"> and yes so</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> few</font>

1393
00:49:44,710 --> 00:49:48,430
things I want to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about are well</font>

1394
00:49:47,049 --> 00:49:49,900
we've talked about kind<font color="#E5E5E5"> of breaking</font>

1395
00:49:48,430 --> 00:49:51,249
these exploit techniques right but the

1396
00:49:49,900 --> 00:49:53,229
third<font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> was talking about is</font>

1397
00:49:51,249 --> 00:49:55,660
make me we can make<font color="#CCCCCC"> these targets</font><font color="#E5E5E5"> just</font>

1398
00:49:53,229 --> 00:49:56,950
less interesting in general and well

1399
00:49:55,660 --> 00:49:59,049
<font color="#E5E5E5">that's actually possible one way of</font>

1400
00:49:56,950 --> 00:50:00,368
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> that is like like I mentioned</font>

1401
00:49:59,049 --> 00:50:02,288
<font color="#E5E5E5">earlier in</font><font color="#CCCCCC"> this talk is we actually</font><font color="#E5E5E5"> have</font>

1402
00:50:00,369 --> 00:50:04,150
<font color="#E5E5E5">VMs which was living inside the host OS</font>

1403
00:50:02,289 --> 00:50:05,619
<font color="#E5E5E5">kernel so once you compromise that you</font>

1404
00:50:04,150 --> 00:50:08,079
just<font color="#CCCCCC"> compromise the entire host</font><font color="#E5E5E5"> OS</font><font color="#CCCCCC"> than</font>

1405
00:50:05,619 --> 00:50:10,420
<font color="#E5E5E5">that that's not great but we do have a</font>

1406
00:50:08,079 --> 00:50:12,519
thing<font color="#E5E5E5"> called</font><font color="#CCCCCC"> VM worker process that</font><font color="#E5E5E5"> exe</font>

1407
00:50:10,420 --> 00:50:13,719
which actually is a process I<font color="#CCCCCC"> spawned</font>

1408
00:50:12,519 --> 00:50:16,209
for each virtual machine<font color="#E5E5E5"> on your</font>

1409
00:50:13,719 --> 00:50:18,339
computer and well what if we start

1410
00:50:16,210 --> 00:50:19,869
putting<font color="#CCCCCC"> more components into there</font><font color="#E5E5E5"> what</font>

1411
00:50:18,339 --> 00:50:22,538
would<font color="#E5E5E5"> happen is if we're actually able</font>

1412
00:50:19,869 --> 00:50:24,009
to sandbox game worker process better

1413
00:50:22,539 --> 00:50:25,059
and<font color="#CCCCCC"> just put more components in there</font>

1414
00:50:24,009 --> 00:50:27,009
that<font color="#CCCCCC"> means that compromising</font><font color="#E5E5E5"> that</font>

1415
00:50:25,059 --> 00:50:29,109
component will<font color="#CCCCCC"> only mean compromising</font>

1416
00:50:27,009 --> 00:50:30,579
that process not the<font color="#E5E5E5"> entire host OS so</font>

1417
00:50:29,109 --> 00:50:32,710
that's very desirable<font color="#E5E5E5"> because that makes</font>

1418
00:50:30,579 --> 00:50:34,539
it<font color="#E5E5E5"> a much less attractive targets to</font>

1419
00:50:32,710 --> 00:50:36,999
attackers right and so there are<font color="#E5E5E5"> things</font>

1420
00:50:34,539 --> 00:50:38,380
<font color="#CCCCCC">that we're being that we</font><font color="#E5E5E5"> are doing the</font>

1421
00:50:36,999 --> 00:50:40,660
first<font color="#CCCCCC"> thing is we're actually improving</font>

1422
00:50:38,380 --> 00:50:41,870
<font color="#E5E5E5">the the sandbox on the</font><font color="#CCCCCC"> Emporer process</font>

1423
00:50:40,660 --> 00:50:43,700
it's still<font color="#CCCCCC"> work-in-progress</font>

1424
00:50:41,870 --> 00:50:45,319
<font color="#E5E5E5">you know don't go and take a look right</font>

1425
00:50:43,700 --> 00:50:46,970
now<font color="#E5E5E5"> and chastise me but it is something</font>

1426
00:50:45,320 --> 00:50:48,680
<font color="#E5E5E5">that's happening is better than it was a</font>

1427
00:50:46,970 --> 00:50:49,970
year<font color="#E5E5E5"> ago so</font><font color="#CCCCCC"> that's something</font><font color="#E5E5E5"> in addition</font>

1428
00:50:48,680 --> 00:50:51,770
<font color="#E5E5E5">to that we are improving our</font><font color="#CCCCCC"> see</font>

1429
00:50:49,970 --> 00:50:54,169
mitigations on there so<font color="#CCCCCC"> that means</font><font color="#E5E5E5"> that</font>

1430
00:50:51,770 --> 00:50:57,710
we is actually the most hardened process

1431
00:50:54,170 --> 00:50:59,690
on<font color="#E5E5E5"> Windows currently in addition to when</font>

1432
00:50:57,710 --> 00:51:01,790
<font color="#CCCCCC">- like edge it's the only</font><font color="#E5E5E5"> one with edge</font>

1433
00:50:59,690 --> 00:51:04,340
that has<font color="#E5E5E5"> the</font><font color="#CCCCCC"> FG</font><font color="#E5E5E5"> export suppression we</font>

1434
00:51:01,790 --> 00:51:06,320
have<font color="#E5E5E5"> forced</font><font color="#CCCCCC"> tha</font><font color="#E5E5E5"> a CFG we have only</font>

1435
00:51:04,340 --> 00:51:08,840
<font color="#E5E5E5">signed binaries</font><font color="#CCCCCC"> in there all that good</font>

1436
00:51:06,320 --> 00:51:10,040
stuff<font color="#CCCCCC"> that's pretty great</font><font color="#E5E5E5"> and in</font>

1437
00:51:08,840 --> 00:51:11,870
<font color="#E5E5E5">addition to that we are</font><font color="#CCCCCC"> actually</font>

1438
00:51:10,040 --> 00:51:13,279
actively working on moving<font color="#E5E5E5"> more more</font>

1439
00:51:11,870 --> 00:51:15,109
<font color="#E5E5E5">components out of the kernel</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> to that</font>

1440
00:51:13,280 --> 00:51:17,440
VM worker process so we are hoping<font color="#CCCCCC"> to</font>

1441
00:51:15,110 --> 00:51:20,630
kind<font color="#E5E5E5"> of reduce the surface of</font>

1442
00:51:17,440 --> 00:51:22,220
interesting targets however because we

1443
00:51:20,630 --> 00:51:24,140
<font color="#E5E5E5">are aware</font><font color="#CCCCCC"> that our</font><font color="#E5E5E5"> code is</font><font color="#CCCCCC"> not perfect</font>

1444
00:51:22,220 --> 00:51:26,509
it will<font color="#E5E5E5"> never be perfect</font><font color="#CCCCCC"> we have been</font>

1445
00:51:24,140 --> 00:51:29,509
making<font color="#CCCCCC"> efforts to</font><font color="#E5E5E5"> kind of try</font><font color="#CCCCCC"> and open</font>

1446
00:51:26,510 --> 00:51:32,720
<font color="#E5E5E5">up and partner</font><font color="#CCCCCC"> in a way with the the</font>

1447
00:51:29,510 --> 00:51:34,910
<font color="#CCCCCC">InfoSec community right and the main</font>

1448
00:51:32,720 --> 00:51:37,310
thing to<font color="#CCCCCC"> do with that</font><font color="#E5E5E5"> I want to talk</font>

1449
00:51:34,910 --> 00:51:39,080
<font color="#E5E5E5">about here is</font><font color="#CCCCCC"> the bug bounty</font><font color="#E5E5E5"> for this</font>

1450
00:51:37,310 --> 00:51:40,549
exploit that<font color="#CCCCCC"> I just</font><font color="#E5E5E5"> showed you</font><font color="#CCCCCC"> that took</font>

1451
00:51:39,080 --> 00:51:44,450
me you<font color="#E5E5E5"> know a little over</font><font color="#CCCCCC"> a month</font>

1452
00:51:40,550 --> 00:51:47,630
<font color="#E5E5E5">develop we would pay you $250,000</font><font color="#CCCCCC"> which</font>

1453
00:51:44,450 --> 00:51:48,950
is not a bad salary<font color="#E5E5E5"> I would think and I</font>

1454
00:51:47,630 --> 00:51:50,150
<font color="#CCCCCC">think that all of you that are</font>

1455
00:51:48,950 --> 00:51:51,830
interested<font color="#E5E5E5"> should start</font><font color="#CCCCCC"> looking into</font>

1456
00:51:50,150 --> 00:51:54,800
<font color="#E5E5E5">that and because I want</font><font color="#CCCCCC"> to help you do</font>

1457
00:51:51,830 --> 00:51:56,600
<font color="#CCCCCC">that we have started doing things</font><font color="#E5E5E5"> like</font>

1458
00:51:54,800 --> 00:51:58,880
publishing public symbols<font color="#E5E5E5"> for a bunch of</font>

1459
00:51:56,600 --> 00:52:01,100
these these binaries as well as

1460
00:51:58,880 --> 00:52:04,100
publishing source code for the hyper-v

1461
00:52:01,100 --> 00:52:05,299
<font color="#E5E5E5">Linux integration services so that</font><font color="#CCCCCC"> means</font>

1462
00:52:04,100 --> 00:52:08,240
<font color="#E5E5E5">that you actually have full source code</font>

1463
00:52:05,300 --> 00:52:09,920
<font color="#E5E5E5">for clients to these</font><font color="#CCCCCC"> DSPs</font><font color="#E5E5E5"> and so that</font>

1464
00:52:08,240 --> 00:52:10,879
should be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> great way for you to start</font>

1465
00:52:09,920 --> 00:52:12,530
experimenting<font color="#E5E5E5"> with stuff</font>

1466
00:52:10,880 --> 00:52:14,900
<font color="#E5E5E5">in addition to that</font><font color="#CCCCCC"> I black had</font><font color="#E5E5E5"> this</font>

1467
00:52:12,530 --> 00:52:17,840
year we had a talk by our own<font color="#CCCCCC"> Joe</font><font color="#E5E5E5"> Bialik</font>

1468
00:52:14,900 --> 00:52:20,240
<font color="#E5E5E5">and ecologically about how to start</font>

1469
00:52:17,840 --> 00:52:22,370
getting how to start getting<font color="#E5E5E5"> into</font>

1470
00:52:20,240 --> 00:52:23,779
hyper-v vulnerability research so<font color="#E5E5E5"> you</font>

1471
00:52:22,370 --> 00:52:25,250
know just check out<font color="#CCCCCC"> our talk it's pretty</font>

1472
00:52:23,780 --> 00:52:27,620
great<font color="#E5E5E5"> it'll give you a lot of pointers</font>

1473
00:52:25,250 --> 00:52:28,730
as<font color="#CCCCCC"> to how to get started and well thank</font>

1474
00:52:27,620 --> 00:52:31,069
you for<font color="#E5E5E5"> your</font><font color="#CCCCCC"> time if you have questions</font>

1475
00:52:28,730 --> 00:52:33,180
for at a time so just<font color="#E5E5E5"> like you know come</font>

1476
00:52:31,070 --> 00:52:43,070
over<font color="#E5E5E5"> thank you</font>

1477
00:52:33,180 --> 00:52:43,069
[Applause]

1478
00:52:44,609 --> 00:52:47,650
we have time for questions<font color="#CCCCCC"> forgo any</font>

1479
00:52:46,900 --> 00:52:58,150
questions

1480
00:52:47,650 --> 00:53:01,180
I think everyone's fleeing for the for

1481
00:52:58,150 --> 00:53:05,490
the party cool<font color="#CCCCCC"> thanks during that's</font>

1482
00:53:01,180 --> 00:53:05,490
great<font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> demo</font>

