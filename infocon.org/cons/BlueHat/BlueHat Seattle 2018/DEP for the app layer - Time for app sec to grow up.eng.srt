1
00:00:00,030 --> 00:00:08,549
<font color="#E5E5E5">Thanks so</font><font color="#CCCCCC"> wondering</font><font color="#E5E5E5"> about why we're</font><font color="#CCCCCC"> here</font>

2
00:00:05,220 --> 00:00:10,559
a little<font color="#E5E5E5"> bit we were super inspired by</font>

3
00:00:08,550 --> 00:00:14,130
similar<font color="#CCCCCC"> Microsoft</font><font color="#E5E5E5"> and other people have</font>

4
00:00:10,559 --> 00:00:17,130
<font color="#E5E5E5">done in creating</font><font color="#CCCCCC"> deaf in ASL are when I</font>

5
00:00:14,130 --> 00:00:18,869
was getting out<font color="#E5E5E5"> of college</font><font color="#CCCCCC"> the presence</font>

6
00:00:17,130 --> 00:00:21,390
of<font color="#CCCCCC"> d'Epinay SLR kind of affected my</font>

7
00:00:18,869 --> 00:00:22,650
<font color="#CCCCCC">career I was thinking</font><font color="#E5E5E5"> like oh boy like</font>

8
00:00:21,390 --> 00:00:25,619
you know memory corruption<font color="#E5E5E5"> is like a</font>

9
00:00:22,650 --> 00:00:28,229
solved space now<font color="#CCCCCC"> I better go into</font>

10
00:00:25,619 --> 00:00:31,679
<font color="#CCCCCC">application security and I wasn't</font>

11
00:00:28,230 --> 00:00:33,180
<font color="#CCCCCC">exactly right but you know the</font>

12
00:00:31,679 --> 00:00:35,100
vulnerabilities we see<font color="#CCCCCC"> at pone tyonne</font>

13
00:00:33,180 --> 00:00:36,540
<font color="#E5E5E5">you know like seven things chained</font>

14
00:00:35,100 --> 00:00:43,020
together<font color="#CCCCCC"> you know every work every</font>

15
00:00:36,540 --> 00:00:45,059
exploit there is a piece<font color="#E5E5E5"> of art so so</font>

16
00:00:43,020 --> 00:00:46,530
that I<font color="#E5E5E5"> think you know we we were</font>

17
00:00:45,059 --> 00:00:49,949
<font color="#CCCCCC">inspired by</font><font color="#E5E5E5"> we wanted to see what we do</font>

18
00:00:46,530 --> 00:00:51,739
at the app player<font color="#CCCCCC"> it's a compliment</font><font color="#E5E5E5"> so</font>

19
00:00:49,950 --> 00:00:56,399
we both work at<font color="#E5E5E5"> contrast security and</font>

20
00:00:51,739 --> 00:00:58,858
let's let's get started<font color="#CCCCCC"> so we hate this</font>

21
00:00:56,399 --> 00:01:00,600
slide but we're company men so we let

22
00:00:58,859 --> 00:01:03,589
marketing put it in there and we're

23
00:01:00,600 --> 00:01:06,960
gonna zoom right past it

24
00:01:03,589 --> 00:01:09,240
so the first leg of<font color="#CCCCCC"> my argument</font><font color="#E5E5E5"> that I'm</font>

25
00:01:06,960 --> 00:01:11,939
gonna<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to make today</font><font color="#E5E5E5"> is that tailored</font>

26
00:01:09,240 --> 00:01:14,280
security never scales<font color="#E5E5E5"> never succeeds in</font>

27
00:01:11,939 --> 00:01:16,289
<font color="#E5E5E5">the long term</font><font color="#CCCCCC"> so what we see going on in</font>

28
00:01:14,280 --> 00:01:18,960
<font color="#E5E5E5">the background here</font><font color="#CCCCCC"> is an</font><font color="#E5E5E5"> example of a</font>

29
00:01:16,290 --> 00:01:21,270
Java security<font color="#E5E5E5"> policy so if you wanted to</font>

30
00:01:18,960 --> 00:01:23,490
tightly sandbox tightly control what

31
00:01:21,270 --> 00:01:25,649
your system<font color="#E5E5E5"> is allowed to do you can do</font>

32
00:01:23,490 --> 00:01:28,829
<font color="#E5E5E5">that they give you tons of complicated</font>

33
00:01:25,650 --> 00:01:32,040
<font color="#CCCCCC">configuration and there's interesting</font>

34
00:01:28,829 --> 00:01:33,809
<font color="#CCCCCC">academic papers about</font><font color="#E5E5E5"> how best to use</font>

35
00:01:32,040 --> 00:01:36,570
tools<font color="#E5E5E5"> to infer what your policy should</font>

36
00:01:33,810 --> 00:01:38,880
<font color="#CCCCCC">be and over time these things lose</font>

37
00:01:36,570 --> 00:01:39,689
momentum<font color="#CCCCCC"> and development teams end up</font>

38
00:01:38,880 --> 00:01:42,000
throwing them away

39
00:01:39,689 --> 00:01:44,699
<font color="#CCCCCC">I'm sure the the red team and blue team</font>

40
00:01:42,000 --> 00:01:47,189
side of all<font color="#E5E5E5"> of your teams have seen that</font>

41
00:01:44,700 --> 00:01:49,380
you know this is not deployed<font color="#E5E5E5"> in</font>

42
00:01:47,189 --> 00:01:51,508
production<font color="#CCCCCC"> right this is used in the</font>

43
00:01:49,380 --> 00:01:55,740
browser sandbox for Java applets<font color="#E5E5E5"> and</font>

44
00:01:51,509 --> 00:01:57,420
really practically<font color="#E5E5E5"> nowhere else</font><font color="#CCCCCC"> a more</font>

45
00:01:55,740 --> 00:01:59,280
<font color="#E5E5E5">modern example is content security</font>

46
00:01:57,420 --> 00:02:01,439
policy<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> you know I'm not</font><font color="#E5E5E5"> ready to</font>

47
00:01:59,280 --> 00:02:04,380
<font color="#E5E5E5">say it's it's dead or</font><font color="#CCCCCC"> anything but I</font>

48
00:02:01,439 --> 00:02:09,000
think adoption<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> of the</font>

49
00:02:04,380 --> 00:02:10,560
traditional<font color="#E5E5E5"> unicorns is slow and in fact</font>

50
00:02:09,000 --> 00:02:13,680
some of<font color="#E5E5E5"> the trends are</font><font color="#CCCCCC"> in the wrong</font>

51
00:02:10,560 --> 00:02:15,780
direction<font color="#CCCCCC"> so we see here</font><font color="#E5E5E5"> people</font>

52
00:02:13,680 --> 00:02:17,849
when<font color="#CCCCCC"> there including a script</font><font color="#E5E5E5"> source</font>

53
00:02:15,780 --> 00:02:20,849
directive where can scripts come from

54
00:02:17,849 --> 00:02:23,010
<font color="#CCCCCC">they're actually tending to more</font><font color="#E5E5E5"> often</font>

55
00:02:20,849 --> 00:02:25,738
choose and allow all policy like any

56
00:02:23,010 --> 00:02:27,209
origin can provide scripts<font color="#CCCCCC"> because this</font>

57
00:02:25,739 --> 00:02:28,799
is an<font color="#E5E5E5"> extremely hard</font><font color="#CCCCCC"> thing to maintain</font>

58
00:02:27,209 --> 00:02:29,700
<font color="#E5E5E5">right it's it's</font><font color="#CCCCCC"> difficulty right in the</font>

59
00:02:28,799 --> 00:02:32,069
first place

60
00:02:29,700 --> 00:02:33,208
it's<font color="#E5E5E5"> difficult to maintain as you as you</font>

61
00:02:32,069 --> 00:02:35,819
grow your team as<font color="#E5E5E5"> you're you know</font>

62
00:02:33,209 --> 00:02:38,610
changing your<font color="#CCCCCC"> partners adding ROM you</font>

63
00:02:35,819 --> 00:02:41,940
know doing whatever it just<font color="#E5E5E5"> gets hard so</font>

64
00:02:38,610 --> 00:02:43,260
I<font color="#CCCCCC"> I don't think that works SELinux is</font>

65
00:02:41,940 --> 00:02:45,750
another example<font color="#CCCCCC"> you know there's some</font>

66
00:02:43,260 --> 00:02:47,578
key use<font color="#E5E5E5"> cases that really it works well</font>

67
00:02:45,750 --> 00:02:50,099
it ships with<font color="#E5E5E5"> some of the Linux distros</font>

68
00:02:47,579 --> 00:02:51,540
if it's on<font color="#E5E5E5"> Android</font><font color="#CCCCCC"> I believe</font><font color="#E5E5E5"> but it's</font>

69
00:02:50,099 --> 00:02:53,250
you know<font color="#E5E5E5"> if you want to deploy this for</font>

70
00:02:51,540 --> 00:02:55,590
your<font color="#E5E5E5"> system for your particular use case</font>

71
00:02:53,250 --> 00:02:56,700
it's a lot<font color="#E5E5E5"> of work to get started you</font>

72
00:02:55,590 --> 00:02:58,349
need<font color="#E5E5E5"> to be an expert</font><font color="#CCCCCC"> in rule</font><font color="#E5E5E5"> writing</font>

73
00:02:56,700 --> 00:02:59,849
<font color="#E5E5E5">even to look at the results so the</font>

74
00:02:58,349 --> 00:03:04,108
second<font color="#CCCCCC"> picture here is a</font><font color="#E5E5E5"> picture of the</font>

75
00:02:59,849 --> 00:03:05,700
results of an audit<font color="#E5E5E5"> events and you'd</font>

76
00:03:04,109 --> 00:03:07,470
<font color="#E5E5E5">have to be super expert just to</font>

77
00:03:05,700 --> 00:03:12,000
understand what<font color="#CCCCCC"> is in there I don't</font>

78
00:03:07,470 --> 00:03:13,290
understand what's in there<font color="#E5E5E5"> it's probably</font>

79
00:03:12,000 --> 00:03:15,870
<font color="#CCCCCC">most relevant example for the</font><font color="#E5E5E5"> rest</font><font color="#CCCCCC"> of</font>

80
00:03:13,290 --> 00:03:18,569
our<font color="#E5E5E5"> talk today is about the laughs right</font>

81
00:03:15,870 --> 00:03:19,470
the Web Application Firewall<font color="#CCCCCC"> so it's</font>

82
00:03:18,569 --> 00:03:21,060
complicated

83
00:03:19,470 --> 00:03:24,989
in<font color="#CCCCCC"> terms</font><font color="#E5E5E5"> of the rules you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to make</font>

84
00:03:21,060 --> 00:03:27,329
for it<font color="#CCCCCC"> requires constant tuning</font><font color="#E5E5E5"> you can</font>

85
00:03:24,989 --> 00:03:29,160
see here's a clip<font color="#E5E5E5"> from</font><font color="#CCCCCC"> an actual</font><font color="#E5E5E5"> Web</font>

86
00:03:27,329 --> 00:03:31,079
<font color="#E5E5E5">Application Firewall datasheet where</font>

87
00:03:29,160 --> 00:03:33,959
they<font color="#E5E5E5"> advertise like hey comes with our</font>

88
00:03:31,079 --> 00:03:36,930
<font color="#E5E5E5">product</font><font color="#CCCCCC"> you know this this service of</font>

89
00:03:33,959 --> 00:03:38,970
<font color="#E5E5E5">people to maintain rules for your app</font>

90
00:03:36,930 --> 00:03:39,870
<font color="#E5E5E5">over time because it's something</font><font color="#CCCCCC"> that</font>

91
00:03:38,970 --> 00:03:43,019
really needs<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of hand-holding</font>

92
00:03:39,870 --> 00:03:44,549
forever<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> the web application</font>

93
00:03:43,019 --> 00:03:46,349
market<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think right now is around</font><font color="#CCCCCC"> a</font>

94
00:03:44,549 --> 00:03:47,940
<font color="#E5E5E5">billion dollars and Here I am saying</font>

95
00:03:46,349 --> 00:03:52,948
it's not working but people don't<font color="#E5E5E5"> really</font>

96
00:03:47,940 --> 00:03:55,290
<font color="#CCCCCC">have an alternative so the second leg of</font>

97
00:03:52,949 --> 00:03:57,780
<font color="#E5E5E5">my argument is about perspective and</font>

98
00:03:55,290 --> 00:04:00,328
<font color="#E5E5E5">context like I strongly believe</font><font color="#CCCCCC"> that</font>

99
00:03:57,780 --> 00:04:02,549
security gets a lot better<font color="#CCCCCC"> closer to</font>

100
00:04:00,329 --> 00:04:04,709
boom when I closer to where exploitation

101
00:04:02,549 --> 00:04:07,109
occurs<font color="#E5E5E5"> and I think history</font><font color="#CCCCCC"> is shown</font><font color="#E5E5E5"> that</font>

102
00:04:04,709 --> 00:04:09,209
what we've done is we've<font color="#CCCCCC"> taken security</font>

103
00:04:07,109 --> 00:04:11,819
<font color="#E5E5E5">mechanisms and move them closer and</font>

104
00:04:09,209 --> 00:04:13,919
<font color="#E5E5E5">closer to where you know the</font><font color="#CCCCCC"> the time of</font>

105
00:04:11,819 --> 00:04:15,448
boom the time of exploitation<font color="#E5E5E5"> and we've</font>

106
00:04:13,919 --> 00:04:16,289
gotten much<font color="#E5E5E5"> better gains from</font><font color="#CCCCCC"> that and</font>

107
00:04:15,449 --> 00:04:19,169
it's a<font color="#E5E5E5"> little bit counterintuitive</font>

108
00:04:16,289 --> 00:04:20,488
<font color="#E5E5E5">because you know are you suggesting</font><font color="#CCCCCC"> to</font>

109
00:04:19,168 --> 00:04:22,830
<font color="#CCCCCC">me that I</font><font color="#E5E5E5"> should let the attacker get</font>

110
00:04:20,488 --> 00:04:25,320
closer in<font color="#E5E5E5"> and then we should try</font><font color="#CCCCCC"> to stop</font>

111
00:04:22,830 --> 00:04:26,849
them<font color="#CCCCCC"> but I</font><font color="#E5E5E5"> think we've all kind of</font>

112
00:04:25,320 --> 00:04:27,360
recognized this community that the moat

113
00:04:26,849 --> 00:04:30,900
doesn't

114
00:04:27,360 --> 00:04:33,449
work and the best context is at the

115
00:04:30,900 --> 00:04:37,590
exploit<font color="#E5E5E5"> so let's not run away from that</font>

116
00:04:33,449 --> 00:04:39,599
<font color="#E5E5E5">right let's let's run run towards it so</font>

117
00:04:37,590 --> 00:04:41,580
I've been super negative<font color="#CCCCCC"> so far sorry</font>

118
00:04:39,599 --> 00:04:45,389
<font color="#E5E5E5">about that but let's talk about what</font>

119
00:04:41,580 --> 00:04:51,120
what really<font color="#E5E5E5"> works</font><font color="#CCCCCC"> and I am super fanboy</font>

120
00:04:45,389 --> 00:04:53,780
<font color="#E5E5E5">of</font><font color="#CCCCCC"> Depp so and and aslr and that the</font>

121
00:04:51,120 --> 00:04:56,310
intent of these<font color="#E5E5E5"> mechanisms is to inject</font>

122
00:04:53,780 --> 00:05:01,710
security capabilities using<font color="#E5E5E5"> the compiler</font>

123
00:04:56,310 --> 00:05:05,370
using the OS to<font color="#E5E5E5"> prevent to kill whole</font>

124
00:05:01,710 --> 00:05:09,000
bug classes<font color="#CCCCCC"> that the developer</font><font color="#E5E5E5"> doesn't</font>

125
00:05:05,370 --> 00:05:10,949
even have to<font color="#CCCCCC"> know</font><font color="#E5E5E5"> about right so</font><font color="#CCCCCC"> we're a</font>

126
00:05:09,000 --> 00:05:13,680
huge fan of these techniques<font color="#CCCCCC"> that either</font>

127
00:05:10,949 --> 00:05:16,409
kill bug bug classes raise the cost of

128
00:05:13,680 --> 00:05:21,270
exploit development a lot<font color="#E5E5E5"> and they're</font>

129
00:05:16,409 --> 00:05:23,370
done invisibly<font color="#E5E5E5"> so when I when I look at</font>

130
00:05:21,270 --> 00:05:25,710
the security<font color="#E5E5E5"> spend inside</font><font color="#CCCCCC"> of our</font>

131
00:05:23,370 --> 00:05:27,870
customers<font color="#CCCCCC"> instead of the market</font><font color="#E5E5E5"> I get I</font>

132
00:05:25,710 --> 00:05:31,080
get a little<font color="#E5E5E5"> frustrated</font><font color="#CCCCCC"> because here's</font>

133
00:05:27,870 --> 00:05:33,539
<font color="#E5E5E5">these things that we can focus on like</font>

134
00:05:31,080 --> 00:05:35,909
<font color="#CCCCCC">d'Epinay SLR and all this stuff</font><font color="#E5E5E5"> that</font>

135
00:05:33,539 --> 00:05:37,710
<font color="#E5E5E5">yeah they're big upfront costs they're a</font>

136
00:05:35,909 --> 00:05:39,000
little<font color="#E5E5E5"> bit you know it's a little bit</font>

137
00:05:37,710 --> 00:05:41,310
tough<font color="#E5E5E5"> on the world to get them out there</font>

138
00:05:39,000 --> 00:05:44,759
<font color="#CCCCCC">and while deployed but once they're done</font>

139
00:05:41,310 --> 00:05:46,710
<font color="#CCCCCC">I mean</font><font color="#E5E5E5"> the returns are huge I would say</font>

140
00:05:44,759 --> 00:05:48,839
there's nothing<font color="#E5E5E5"> that changed the the</font>

141
00:05:46,710 --> 00:05:51,690
security<font color="#CCCCCC"> needled nothing</font><font color="#E5E5E5"> moved security</font>

142
00:05:48,839 --> 00:05:54,509
<font color="#CCCCCC">needle-like d'Epinay SLR and it's you</font>

143
00:05:51,690 --> 00:05:55,979
<font color="#CCCCCC">know sister protections like</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> all the</font>

144
00:05:54,509 --> 00:05:57,599
secure coding guidelines<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the world</font>

145
00:05:55,979 --> 00:06:01,529
all the<font color="#E5E5E5"> things that we do in application</font>

146
00:05:57,599 --> 00:06:03,360
security<font color="#CCCCCC"> you know the presence of</font><font color="#E5E5E5"> secure</font>

147
00:06:01,529 --> 00:06:06,360
<font color="#CCCCCC">ap</font><font color="#E5E5E5"> is we had all those</font><font color="#CCCCCC"> things for a long</font>

148
00:06:03,360 --> 00:06:07,529
time before<font color="#E5E5E5"> we had death</font><font color="#CCCCCC"> but you had to</font>

149
00:06:06,360 --> 00:06:09,180
get<font color="#E5E5E5"> people to use</font><font color="#CCCCCC"> it you had to hope</font>

150
00:06:07,529 --> 00:06:10,710
that they understood<font color="#CCCCCC"> how to use</font><font color="#E5E5E5"> it</font>

151
00:06:09,180 --> 00:06:12,779
<font color="#CCCCCC">correctly you had to hope that they</font>

152
00:06:10,710 --> 00:06:14,400
retain the muscle memory<font color="#E5E5E5"> to to know when</font>

153
00:06:12,779 --> 00:06:16,650
they<font color="#CCCCCC"> should use it and</font><font color="#E5E5E5"> when not and and</font>

154
00:06:14,400 --> 00:06:18,210
all<font color="#E5E5E5"> that kind of stuff</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> all the</font>

155
00:06:16,650 --> 00:06:21,750
activities that we use in application

156
00:06:18,210 --> 00:06:23,400
security<font color="#E5E5E5"> are all expert activities right</font>

157
00:06:21,750 --> 00:06:25,319
we they all need an expert<font color="#E5E5E5"> and there's</font>

158
00:06:23,400 --> 00:06:26,969
just not enough experts to go around we

159
00:06:25,319 --> 00:06:31,080
need<font color="#E5E5E5"> developers to be able to</font>

160
00:06:26,969 --> 00:06:33,210
<font color="#E5E5E5">self-service on security</font><font color="#CCCCCC"> so it it's</font>

161
00:06:31,080 --> 00:06:35,399
super frustrates me that that we<font color="#E5E5E5"> spend a</font>

162
00:06:33,210 --> 00:06:39,330
<font color="#CCCCCC">lot of</font><font color="#E5E5E5"> our time</font><font color="#CCCCCC"> and money on this so we</font>

163
00:06:35,399 --> 00:06:41,670
need stuff<font color="#E5E5E5"> more like the right so we</font>

164
00:06:39,330 --> 00:06:43,500
<font color="#E5E5E5">want to talk about how you</font>

165
00:06:41,670 --> 00:06:45,540
the research we did to<font color="#CCCCCC"> affect</font><font color="#E5E5E5"> that</font>

166
00:06:43,500 --> 00:06:48,360
<font color="#CCCCCC">change to try to translate</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of those</font>

167
00:06:45,540 --> 00:06:51,150
protections<font color="#E5E5E5"> obviously there's no you</font>

168
00:06:48,360 --> 00:06:52,890
<font color="#E5E5E5">know stack well there is</font><font color="#CCCCCC"> but you know</font>

169
00:06:51,150 --> 00:06:54,510
there's not the same constructs of

170
00:06:52,890 --> 00:06:56,370
memory<font color="#CCCCCC"> corruption in the application</font>

171
00:06:54,510 --> 00:07:00,390
<font color="#CCCCCC">layer but how we try</font><font color="#E5E5E5"> to capture those</font>

172
00:06:56,370 --> 00:07:02,940
<font color="#E5E5E5">intents at the application layer so the</font>

173
00:07:00,390 --> 00:07:04,800
first thing is how can<font color="#CCCCCC"> you change an</font>

174
00:07:02,940 --> 00:07:07,710
application to automatically infuse new

175
00:07:04,800 --> 00:07:08,760
<font color="#E5E5E5">security capabilities into it and the</font>

176
00:07:07,710 --> 00:07:11,010
way you do that is through

177
00:07:08,760 --> 00:07:14,610
instrumentation<font color="#E5E5E5"> right so typically you</font>

178
00:07:11,010 --> 00:07:19,200
provide an agent that<font color="#E5E5E5"> can monkey patch</font>

179
00:07:14,610 --> 00:07:22,290
or you know<font color="#CCCCCC"> rear a source rewrite or you</font>

180
00:07:19,200 --> 00:07:24,599
know redefine the types of the code<font color="#E5E5E5"> so</font>

181
00:07:22,290 --> 00:07:25,920
<font color="#CCCCCC">that you can change</font><font color="#E5E5E5"> the behavior get</font>

182
00:07:24,600 --> 00:07:27,810
more sensors in there

183
00:07:25,920 --> 00:07:30,000
so in this example you<font color="#CCCCCC"> know we're</font>

184
00:07:27,810 --> 00:07:33,330
<font color="#E5E5E5">showing</font><font color="#CCCCCC"> that how once you</font><font color="#E5E5E5"> add an agent</font>

185
00:07:30,000 --> 00:07:34,710
to<font color="#CCCCCC"> the runtime it can modify the any of</font>

186
00:07:33,330 --> 00:07:37,380
<font color="#E5E5E5">the code whether it comes from libraries</font>

187
00:07:34,710 --> 00:07:38,820
frameworks<font color="#E5E5E5"> etc and these are now</font>

188
00:07:37,380 --> 00:07:41,730
interesting<font color="#CCCCCC"> security sensors that we</font>

189
00:07:38,820 --> 00:07:44,219
have all throughout<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so</font>

190
00:07:41,730 --> 00:07:45,480
what we're<font color="#E5E5E5"> trying to get across today is</font>

191
00:07:44,220 --> 00:07:48,450
not a particular product<font color="#E5E5E5"> not a</font>

192
00:07:45,480 --> 00:07:50,070
particular really<font color="#E5E5E5"> anything except</font><font color="#CCCCCC"> for</font>

193
00:07:48,450 --> 00:07:52,260
the<font color="#E5E5E5"> fact that we are trying</font><font color="#CCCCCC"> to</font>

194
00:07:50,070 --> 00:07:54,450
<font color="#CCCCCC">communicate that there is a framework</font>

195
00:07:52,260 --> 00:07:57,060
<font color="#E5E5E5">that we coined here called run time</font>

196
00:07:54,450 --> 00:08:00,150
exploit prevention<font color="#E5E5E5"> that is a strategy</font>

197
00:07:57,060 --> 00:08:02,220
<font color="#CCCCCC">for building for infusing security</font>

198
00:08:00,150 --> 00:08:06,450
protections into<font color="#CCCCCC"> a running application</font>

199
00:08:02,220 --> 00:08:10,830
<font color="#E5E5E5">so as a workload progresses like</font><font color="#CCCCCC"> a you</font>

200
00:08:06,450 --> 00:08:13,590
know<font color="#E5E5E5"> an HTTP request</font><font color="#CCCCCC"> is executing we'll</font>

201
00:08:10,830 --> 00:08:16,440
have several opportunities to<font color="#E5E5E5"> infuse</font>

202
00:08:13,590 --> 00:08:19,979
proactive controls to harden to sandbox

203
00:08:16,440 --> 00:08:22,380
<font color="#E5E5E5">to detect injection attempts to to do</font>

204
00:08:19,980 --> 00:08:24,570
all<font color="#E5E5E5"> kinds</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> things so</font><font color="#CCCCCC"> being within the</font>

205
00:08:22,380 --> 00:08:27,000
<font color="#E5E5E5">running application gives us all these</font>

206
00:08:24,570 --> 00:08:28,800
places<font color="#E5E5E5"> where we can do security that we</font>

207
00:08:27,000 --> 00:08:30,570
didn't have before right if we if<font color="#CCCCCC"> we</font>

208
00:08:28,800 --> 00:08:33,180
think about<font color="#E5E5E5"> our only competitor here as</font>

209
00:08:30,570 --> 00:08:35,130
a<font color="#E5E5E5"> Web Application Firewall you know the</font>

210
00:08:33,179 --> 00:08:37,829
only<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> we can do is reject</font><font color="#E5E5E5"> it up</font>

211
00:08:35,130 --> 00:08:40,530
<font color="#E5E5E5">front it's</font><font color="#CCCCCC"> really an impossible ask</font><font color="#E5E5E5"> of</font>

212
00:08:37,830 --> 00:08:42,030
<font color="#E5E5E5">that tool it's a network tool trying to</font>

213
00:08:40,530 --> 00:08:43,890
do an application<font color="#CCCCCC"> layer job so it's</font>

214
00:08:42,030 --> 00:08:46,290
really unfair<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us to give it the job</font>

215
00:08:43,890 --> 00:08:48,300
<font color="#E5E5E5">that it's doing but now we have</font><font color="#CCCCCC"> all</font>

216
00:08:46,290 --> 00:08:50,219
these<font color="#E5E5E5"> other stages through this</font>

217
00:08:48,300 --> 00:08:53,250
framework<font color="#E5E5E5"> where we can say</font><font color="#CCCCCC"> okay well</font><font color="#E5E5E5"> how</font>

218
00:08:50,220 --> 00:08:55,540
<font color="#CCCCCC">can</font><font color="#E5E5E5"> we use hardening to prevent xxe</font>

219
00:08:53,250 --> 00:08:59,000
attacks

220
00:08:55,540 --> 00:09:01,120
so we can do hardening<font color="#E5E5E5"> in</font><font color="#CCCCCC"> sandbox saying</font>

221
00:08:59,000 --> 00:09:03,500
you<font color="#E5E5E5"> know we can also if we detect that</font>

222
00:09:01,120 --> 00:09:04,910
<font color="#CCCCCC">you know if we think we've built</font><font color="#E5E5E5"> up</font>

223
00:09:03,500 --> 00:09:06,769
sufficient evidence that<font color="#CCCCCC"> an</font><font color="#E5E5E5"> attack is</font>

224
00:09:04,910 --> 00:09:08,959
<font color="#CCCCCC">going on</font><font color="#E5E5E5"> we can also block it right we</font>

225
00:09:06,769 --> 00:09:10,880
can<font color="#E5E5E5"> throw an exception or redirect the</font>

226
00:09:08,959 --> 00:09:15,859
control flow so<font color="#CCCCCC"> that the application</font>

227
00:09:10,880 --> 00:09:17,990
doesn't<font color="#E5E5E5"> do the exploit behavior so we're</font>

228
00:09:15,860 --> 00:09:20,740
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> go through each of</font><font color="#CCCCCC"> these stages of</font>

229
00:09:17,990 --> 00:09:24,920
protection<font color="#E5E5E5"> and that's gonna start us off</font>

230
00:09:20,740 --> 00:09:26,630
<font color="#E5E5E5">okay so when we we can do input</font><font color="#CCCCCC"> casts</font>

231
00:09:24,920 --> 00:09:29,089
<font color="#CCCCCC">official</font><font color="#E5E5E5"> classification we can classify</font>

232
00:09:26,630 --> 00:09:32,000
<font color="#E5E5E5">upfront or look at the input and decide</font>

233
00:09:29,089 --> 00:09:34,730
<font color="#CCCCCC">that something is malicious so there's</font>

234
00:09:32,000 --> 00:09:36,980
some obvious input detect vectors<font color="#E5E5E5"> I mean</font>

235
00:09:34,730 --> 00:09:39,079
<font color="#E5E5E5">so there's some</font><font color="#CCCCCC"> things that just don't</font>

236
00:09:36,980 --> 00:09:41,149
make sense<font color="#E5E5E5"> and can can seem like</font>

237
00:09:39,079 --> 00:09:42,888
<font color="#CCCCCC">malicious behavior so this is definitely</font>

238
00:09:41,149 --> 00:09:45,620
invalid it's negative<font color="#E5E5E5"> content type</font>

239
00:09:42,889 --> 00:09:46,940
<font color="#E5E5E5">there's a super-long content type</font><font color="#CCCCCC"> you</font>

240
00:09:45,620 --> 00:09:49,430
know there's a more<font color="#CCCCCC"> recent struts</font>

241
00:09:46,940 --> 00:09:51,589
vulnerability and<font color="#CCCCCC"> that was an injection</font>

242
00:09:49,430 --> 00:09:53,888
<font color="#E5E5E5">through the content type and the you</font>

243
00:09:51,589 --> 00:09:57,649
<font color="#E5E5E5">know any any reasonable payload was was</font>

244
00:09:53,889 --> 00:09:59,660
thousands<font color="#E5E5E5"> of characters and so just that</font>

245
00:09:57,649 --> 00:10:01,459
<font color="#CCCCCC">alone is enough to say that this</font><font color="#E5E5E5"> doesn't</font>

246
00:09:59,660 --> 00:10:03,290
<font color="#E5E5E5">look right this is not</font><font color="#CCCCCC"> the standard</font>

247
00:10:01,459 --> 00:10:04,489
content type<font color="#CCCCCC"> and it also has you</font><font color="#E5E5E5"> know</font>

248
00:10:03,290 --> 00:10:06,560
it's way too long<font color="#E5E5E5"> it's bigger than</font>

249
00:10:04,490 --> 00:10:08,899
anything<font color="#E5E5E5"> else you see coming along and</font>

250
00:10:06,560 --> 00:10:10,369
like I<font color="#CCCCCC"> said like something looks super</font>

251
00:10:08,899 --> 00:10:11,630
obvious up front<font color="#E5E5E5"> you can still stop it</font>

252
00:10:10,370 --> 00:10:15,709
at the<font color="#E5E5E5"> gate you don't have to let an</font>

253
00:10:11,630 --> 00:10:17,000
obvious attack get really far<font color="#CCCCCC"> do these</font>

254
00:10:15,709 --> 00:10:19,279
<font color="#E5E5E5">things you can do with volumetric</font>

255
00:10:17,000 --> 00:10:22,519
analysis so like a<font color="#E5E5E5"> regular expression</font>

256
00:10:19,279 --> 00:10:24,260
<font color="#CCCCCC">dose</font><font color="#E5E5E5"> we we can handle that by watching</font>

257
00:10:22,519 --> 00:10:25,850
the number of actions inside<font color="#E5E5E5"> the</font>

258
00:10:24,260 --> 00:10:27,800
application we can<font color="#E5E5E5"> count during that</font>

259
00:10:25,850 --> 00:10:30,140
request cycle<font color="#E5E5E5"> how many operations happen</font>

260
00:10:27,800 --> 00:10:31,729
inside<font color="#E5E5E5"> a single request</font><font color="#CCCCCC"> to know that</font>

261
00:10:30,140 --> 00:10:34,790
<font color="#E5E5E5">this reg X is doing something extreme</font>

262
00:10:31,730 --> 00:10:36,589
and and and being<font color="#E5E5E5"> potentially malicious</font>

263
00:10:34,790 --> 00:10:39,260
<font color="#E5E5E5">and the other example is a padding</font>

264
00:10:36,589 --> 00:10:41,000
Oracle<font color="#E5E5E5"> so a padding Oracle if you throw</font>

265
00:10:39,260 --> 00:10:43,970
an exception<font color="#CCCCCC"> based</font><font color="#E5E5E5"> on padding you can</font>

266
00:10:41,000 --> 00:10:45,920
eventually leak the key<font color="#CCCCCC"> but you</font><font color="#E5E5E5"> may also</font>

267
00:10:43,970 --> 00:10:47,660
<font color="#E5E5E5">have errors that</font><font color="#CCCCCC"> are you know truly</font>

268
00:10:45,920 --> 00:10:51,410
<font color="#E5E5E5">about padding or the user corrupts the</font>

269
00:10:47,660 --> 00:10:53,959
data unintentionally somehow<font color="#E5E5E5"> and so we</font>

270
00:10:51,410 --> 00:10:56,569
can take we<font color="#CCCCCC"> can actually hook</font><font color="#E5E5E5"> into this</font>

271
00:10:53,959 --> 00:10:59,510
exception handler with the agent<font color="#E5E5E5"> and</font>

272
00:10:56,569 --> 00:11:01,729
then we can<font color="#E5E5E5"> keep track by an individual</font>

273
00:10:59,510 --> 00:11:03,800
<font color="#E5E5E5">by some analysis of who the current user</font>

274
00:11:01,730 --> 00:11:06,260
is and start tallying up those

275
00:11:03,800 --> 00:11:07,520
exceptions<font color="#E5E5E5"> and then eventually block an</font>

276
00:11:06,260 --> 00:11:10,670
<font color="#CCCCCC">attack or detect it</font>

277
00:11:07,520 --> 00:11:13,880
based on what<font color="#E5E5E5"> in a single shot would be</font>

278
00:11:10,670 --> 00:11:17,050
<font color="#CCCCCC">normal behavior but now it is to find</font>

279
00:11:13,880 --> 00:11:19,250
<font color="#CCCCCC">it's an attacking and bye-bye you know</font>

280
00:11:17,050 --> 00:11:21,560
accumulating these these events we<font color="#CCCCCC"> can</font>

281
00:11:19,250 --> 00:11:22,880
identify it as an attack it's only from

282
00:11:21,560 --> 00:11:25,550
being<font color="#CCCCCC"> within the application</font><font color="#E5E5E5"> that we</font>

283
00:11:22,880 --> 00:11:27,500
could observe<font color="#E5E5E5"> this this</font><font color="#CCCCCC"> padding</font>

284
00:11:25,550 --> 00:11:29,120
exception right<font color="#E5E5E5"> trying to detect a</font>

285
00:11:27,500 --> 00:11:30,670
padding Oracle attack with a web

286
00:11:29,120 --> 00:11:32,930
application fire was extremely difficult

287
00:11:30,670 --> 00:11:35,540
<font color="#CCCCCC">right you have</font><font color="#E5E5E5"> to somehow build some</font>

288
00:11:32,930 --> 00:11:37,250
state about<font color="#E5E5E5"> each payload and try to</font>

289
00:11:35,540 --> 00:11:39,770
detect are they trying<font color="#E5E5E5"> to iterate</font><font color="#CCCCCC"> on it</font>

290
00:11:37,250 --> 00:11:42,020
<font color="#E5E5E5">and and how far are they getting but you</font>

291
00:11:39,770 --> 00:11:44,209
know being within<font color="#E5E5E5"> the application where</font>

292
00:11:42,020 --> 00:11:45,800
the affordability is exploited<font color="#CCCCCC"> I mean</font>

293
00:11:44,209 --> 00:11:54,410
there's there's<font color="#CCCCCC"> really we haven't</font><font color="#E5E5E5"> done</font>

294
00:11:45,800 --> 00:11:56,209
that<font color="#E5E5E5"> yet</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so and so there's this</font>

295
00:11:54,410 --> 00:11:58,010
other idea<font color="#E5E5E5"> of input tracing and and it's</font>

296
00:11:56,209 --> 00:12:00,500
more less following<font color="#E5E5E5"> input through</font><font color="#CCCCCC"> the</font>

297
00:11:58,010 --> 00:12:03,319
<font color="#CCCCCC">execution of the application and when</font>

298
00:12:00,500 --> 00:12:05,029
<font color="#E5E5E5">you see that input when you see</font>

299
00:12:03,320 --> 00:12:07,520
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that came from</font><font color="#E5E5E5"> input in a</font>

300
00:12:05,029 --> 00:12:10,760
malicious trigger you do some analyzing

301
00:12:07,520 --> 00:12:14,079
and see if if it does indeed malicious

302
00:12:10,760 --> 00:12:17,990
so we can take a<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> standard</font>

303
00:12:14,079 --> 00:12:20,870
<font color="#E5E5E5">sequel injection vulnerability and we</font>

304
00:12:17,990 --> 00:12:22,700
can see the<font color="#E5E5E5"> request comes in the queries</font>

305
00:12:20,870 --> 00:12:24,500
built string built from a request

306
00:12:22,700 --> 00:12:26,959
parameter<font color="#E5E5E5"> pretty standard and then we</font>

307
00:12:24,500 --> 00:12:28,550
execute<font color="#E5E5E5"> the query</font><font color="#CCCCCC"> well the goal is to</font>

308
00:12:26,959 --> 00:12:35,449
<font color="#E5E5E5">block this request</font><font color="#CCCCCC"> because it's</font>

309
00:12:28,550 --> 00:12:38,000
malicious<font color="#CCCCCC"> and so at the execution at the</font>

310
00:12:35,450 --> 00:12:40,790
command execute<font color="#CCCCCC"> we can look at the query</font>

311
00:12:38,000 --> 00:12:42,680
<font color="#CCCCCC">itself</font><font color="#E5E5E5"> and parse the query when we parse</font>

312
00:12:40,790 --> 00:12:45,500
the query we can break<font color="#CCCCCC"> it up</font><font color="#E5E5E5"> into tokens</font>

313
00:12:42,680 --> 00:12:48,770
<font color="#E5E5E5">and actually</font><font color="#CCCCCC"> analyze that and</font><font color="#E5E5E5"> the input</font>

314
00:12:45,500 --> 00:12:51,770
and now we can say we saw that test

315
00:12:48,770 --> 00:12:54,170
example or<font color="#E5E5E5"> one equals</font><font color="#CCCCCC"> one come in</font>

316
00:12:51,770 --> 00:12:56,390
through the<font color="#E5E5E5"> request we see it in this in</font>

317
00:12:54,170 --> 00:12:58,160
the sequel query and it broke the

318
00:12:56,390 --> 00:13:00,290
boundary<font color="#CCCCCC"> there</font><font color="#E5E5E5"> their token boundaries</font>

319
00:12:58,160 --> 00:13:02,540
that<font color="#E5E5E5"> we crossed so the user input</font>

320
00:13:00,290 --> 00:13:05,360
changed the outcome<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> query it</font>

321
00:13:02,540 --> 00:13:07,219
wasn't used to<font color="#E5E5E5"> you know just fill in</font>

322
00:13:05,360 --> 00:13:09,050
that text<font color="#CCCCCC"> box it actually changed with</font>

323
00:13:07,220 --> 00:13:13,339
the intent of the query<font color="#E5E5E5"> so it's</font>

324
00:13:09,050 --> 00:13:14,990
malicious<font color="#E5E5E5"> and the that context you can</font>

325
00:13:13,339 --> 00:13:18,589
only get by understanding<font color="#E5E5E5"> what</font><font color="#CCCCCC"> that</font>

326
00:13:14,990 --> 00:13:20,360
query was going to do so

327
00:13:18,589 --> 00:13:21,100
yeah user input comes in we hit the<font color="#CCCCCC"> sync</font>

328
00:13:20,360 --> 00:13:24,160
command

329
00:13:21,100 --> 00:13:28,180
and now we can<font color="#CCCCCC"> analyze and and block at</font>

330
00:13:24,160 --> 00:13:29,530
the correct<font color="#CCCCCC"> weight</font><font color="#E5E5E5"> so so it's like the</font>

331
00:13:28,180 --> 00:13:32,650
you know<font color="#CCCCCC"> the</font><font color="#E5E5E5"> purpose of</font><font color="#CCCCCC"> DEP is to</font>

332
00:13:29,530 --> 00:13:35,110
prevent the attackers cargo code from

333
00:13:32,650 --> 00:13:36,699
executing on you know the stack or the

334
00:13:35,110 --> 00:13:39,430
heap or whatever kind of writable space

335
00:13:36,700 --> 00:13:41,380
and so really what<font color="#E5E5E5"> we just described</font>

336
00:13:39,430 --> 00:13:43,989
<font color="#E5E5E5">detecting input changing the structure</font>

337
00:13:41,380 --> 00:13:45,490
of the query we capture<font color="#CCCCCC"> that same intent</font>

338
00:13:43,990 --> 00:13:48,190
<font color="#E5E5E5">right it's not</font><font color="#CCCCCC"> the same not the same</font>

339
00:13:45,490 --> 00:13:49,780
primitives<font color="#E5E5E5"> but we were able to stop the</font>

340
00:13:48,190 --> 00:13:51,160
attackers code from running<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we</font>

341
00:13:49,780 --> 00:13:54,160
detected they were about to change<font color="#CCCCCC"> the</font>

342
00:13:51,160 --> 00:13:57,790
<font color="#E5E5E5">structure</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the query but you know</font>

343
00:13:54,160 --> 00:13:59,949
<font color="#E5E5E5">sometimes you might not see the in</font><font color="#CCCCCC"> soul</font>

344
00:13:57,790 --> 00:14:02,290
what Matt just<font color="#E5E5E5"> described this one</font>

345
00:13:59,950 --> 00:14:04,090
strategy<font color="#CCCCCC"> Impa tracing depends on being</font>

346
00:14:02,290 --> 00:14:06,910
<font color="#E5E5E5">able to see the input come in and then</font>

347
00:14:04,090 --> 00:14:09,250
<font color="#E5E5E5">reaching this call but what if you don't</font>

348
00:14:06,910 --> 00:14:11,110
<font color="#E5E5E5">see that call for some reason you know</font>

349
00:14:09,250 --> 00:14:13,420
what if it's an<font color="#CCCCCC"> asynchronous app like a</font>

350
00:14:11,110 --> 00:14:16,120
lot<font color="#E5E5E5"> of apps are today and the attacker</font>

351
00:14:13,420 --> 00:14:18,640
sends the bomb to some something<font color="#E5E5E5"> like an</font>

352
00:14:16,120 --> 00:14:21,220
s3 bucket<font color="#CCCCCC"> and then some other apps</font>

353
00:14:18,640 --> 00:14:23,170
somewhere along the way<font color="#CCCCCC"> pulls from that</font>

354
00:14:21,220 --> 00:14:26,260
<font color="#E5E5E5">bucket and that's where the interpreter</font>

355
00:14:23,170 --> 00:14:29,020
<font color="#E5E5E5">the sequel execution happens and that's</font>

356
00:14:26,260 --> 00:14:30,160
where the bomb explodes<font color="#CCCCCC"> in that case you</font>

357
00:14:29,020 --> 00:14:34,990
know the interpreter doesn't<font color="#E5E5E5"> have the</font>

358
00:14:30,160 --> 00:14:36,180
context of where the bomb extent well<font color="#E5E5E5"> we</font>

359
00:14:34,990 --> 00:14:40,330
can still<font color="#E5E5E5"> give ourselves an opportunity</font>

360
00:14:36,180 --> 00:14:43,060
<font color="#E5E5E5">to catch and defuse this attack just by</font>

361
00:14:40,330 --> 00:14:45,670
doing some semantic analysis<font color="#E5E5E5"> so here we</font>

362
00:14:43,060 --> 00:14:48,430
have a similar query that looks<font color="#E5E5E5"> like</font>

363
00:14:45,670 --> 00:14:50,439
it's been injected into<font color="#E5E5E5"> to do you know a</font>

364
00:14:48,430 --> 00:14:52,329
lot of<font color="#CCCCCC"> sequel injection examples are</font>

365
00:14:50,440 --> 00:14:56,020
about or<font color="#CCCCCC"> one equals one</font><font color="#E5E5E5"> right they want</font>

366
00:14:52,330 --> 00:14:58,240
<font color="#E5E5E5">to evaluate true to every row</font><font color="#CCCCCC"> so that</font>

367
00:14:56,020 --> 00:15:01,180
that one<font color="#CCCCCC"> equals one part is called</font><font color="#E5E5E5"> a</font>

368
00:14:58,240 --> 00:15:03,310
tautology<font color="#CCCCCC"> and so this is a this is a</font>

369
00:15:01,180 --> 00:15:05,530
little bit more advanced as advanced as

370
00:15:03,310 --> 00:15:07,540
these things<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be a tautology so this</font>

371
00:15:05,530 --> 00:15:09,670
is one not equals to<font color="#CCCCCC"> the square root of</font>

372
00:15:07,540 --> 00:15:11,860
four<font color="#E5E5E5"> so square</font><font color="#CCCCCC"> root of four is two so</font>

373
00:15:09,670 --> 00:15:15,670
they shouldn't be equal<font color="#E5E5E5"> so this is an</font>

374
00:15:11,860 --> 00:15:17,020
obviously purposeful tautology so

375
00:15:15,670 --> 00:15:19,329
they're trying to get it to a<font color="#E5E5E5"> value to</font>

376
00:15:17,020 --> 00:15:22,410
true for every row so we<font color="#CCCCCC"> can detect that</font>

377
00:15:19,330 --> 00:15:25,390
<font color="#E5E5E5">this is appears to be a malicious</font><font color="#CCCCCC"> Clause</font>

378
00:15:22,410 --> 00:15:26,949
<font color="#E5E5E5">without</font><font color="#CCCCCC"> trying to tie it to</font><font color="#E5E5E5"> any context</font>

379
00:15:25,390 --> 00:15:28,870
right we<font color="#E5E5E5"> don't necessarily know that</font>

380
00:15:26,950 --> 00:15:30,460
<font color="#E5E5E5">this came from an attack but if this is</font>

381
00:15:28,870 --> 00:15:33,310
a behavior<font color="#CCCCCC"> that</font><font color="#E5E5E5"> isn't typical for your</font>

382
00:15:30,460 --> 00:15:34,540
systems<font color="#E5E5E5"> this and this can be weaved into</font>

383
00:15:33,310 --> 00:15:36,010
your application

384
00:15:34,540 --> 00:15:37,599
of course the<font color="#CCCCCC"> wrong theme here is all</font>

385
00:15:36,010 --> 00:15:40,420
this is<font color="#E5E5E5"> provided by an instrumentation</font>

386
00:15:37,600 --> 00:15:42,040
<font color="#CCCCCC">and agent</font><font color="#E5E5E5"> it's not provided by developer</font>

387
00:15:40,420 --> 00:15:43,990
developers<font color="#E5E5E5"> not writing any rules there's</font>

388
00:15:42,040 --> 00:15:47,500
no tuning this is just<font color="#E5E5E5"> something you get</font>

389
00:15:43,990 --> 00:15:48,850
for free<font color="#E5E5E5"> by adding our agent and</font><font color="#CCCCCC"> again</font>

390
00:15:47,500 --> 00:15:50,740
the<font color="#E5E5E5"> one or</font><font color="#CCCCCC"> one equals one</font><font color="#E5E5E5"> can be</font>

391
00:15:48,850 --> 00:15:52,540
detected but that square root we need to

392
00:15:50,740 --> 00:15:54,340
you<font color="#E5E5E5"> know we have</font><font color="#CCCCCC"> pseudo</font><font color="#E5E5E5"> valuation I</font>

393
00:15:52,540 --> 00:15:56,260
guess like<font color="#E5E5E5"> they call</font><font color="#CCCCCC"> yeah so we can we</font>

394
00:15:54,340 --> 00:15:58,210
<font color="#E5E5E5">can kind of</font><font color="#CCCCCC"> evaluate that and determine</font>

395
00:15:56,260 --> 00:16:01,330
that<font color="#E5E5E5"> one doesn't equal the square root</font>

396
00:15:58,210 --> 00:16:03,010
<font color="#E5E5E5">of four and we evaluate that yeah</font><font color="#CCCCCC"> think</font>

397
00:16:01,330 --> 00:16:04,840
so<font color="#CCCCCC"> we know that it truly</font><font color="#E5E5E5"> is a tautology</font>

398
00:16:03,010 --> 00:16:06,550
and not some string built script that

399
00:16:04,840 --> 00:16:07,870
<font color="#E5E5E5">was unintentional</font><font color="#CCCCCC"> that's an excellent</font>

400
00:16:06,550 --> 00:16:09,729
point yeah we have the<font color="#E5E5E5"> example here that</font>

401
00:16:07,870 --> 00:16:11,620
<font color="#E5E5E5">you know if you were to try to detect</font>

402
00:16:09,730 --> 00:16:13,150
this statically just scan the code and

403
00:16:11,620 --> 00:16:14,710
check if the expression<font color="#CCCCCC"> on the left is</font>

404
00:16:13,150 --> 00:16:16,420
the<font color="#E5E5E5"> expression on the right</font><font color="#CCCCCC"> it'd be</font>

405
00:16:14,710 --> 00:16:18,940
trivially easy to bypass<font color="#CCCCCC"> that through</font>

406
00:16:16,420 --> 00:16:20,860
string concatenation or<font color="#E5E5E5"> whatever but if</font>

407
00:16:18,940 --> 00:16:23,830
you evaluate you know I think<font color="#CCCCCC"> fireEye's</font>

408
00:16:20,860 --> 00:16:25,150
<font color="#E5E5E5">well-known for kind of detonating you</font>

409
00:16:23,830 --> 00:16:27,400
know binaries that<font color="#E5E5E5"> might be malicious</font>

410
00:16:25,150 --> 00:16:29,860
<font color="#E5E5E5">and seeing how they behave we can</font>

411
00:16:27,400 --> 00:16:31,959
<font color="#E5E5E5">detonate the query</font><font color="#CCCCCC"> all right we can we</font>

412
00:16:29,860 --> 00:16:34,060
can run the query through<font color="#CCCCCC"> a fake you</font>

413
00:16:31,960 --> 00:16:35,830
know simulated<font color="#E5E5E5"> runner and see how it</font>

414
00:16:34,060 --> 00:16:36,250
behaves<font color="#CCCCCC"> and if the expression</font><font color="#E5E5E5"> on the</font>

415
00:16:35,830 --> 00:16:38,290
right

416
00:16:36,250 --> 00:16:39,880
you know resolves to<font color="#E5E5E5"> some constant value</font>

417
00:16:38,290 --> 00:16:41,650
no matter<font color="#E5E5E5"> the input and the expression</font>

418
00:16:39,880 --> 00:16:45,090
on the<font color="#E5E5E5"> Left</font><font color="#CCCCCC"> also results to that</font><font color="#E5E5E5"> same</font>

419
00:16:41,650 --> 00:16:48,280
value<font color="#E5E5E5"> then we we detect this tautology</font>

420
00:16:45,090 --> 00:16:50,200
so this is another<font color="#E5E5E5"> example of detecting</font>

421
00:16:48,280 --> 00:16:52,870
<font color="#E5E5E5">something unusual which is unioning with</font>

422
00:16:50,200 --> 00:16:55,120
system tables right so if we detect that

423
00:16:52,870 --> 00:16:56,680
you know<font color="#CCCCCC"> your yuning the system tables</font>

424
00:16:55,120 --> 00:16:58,540
and most applications<font color="#CCCCCC"> don't work like</font>

425
00:16:56,680 --> 00:17:00,670
<font color="#E5E5E5">that</font><font color="#CCCCCC"> if your application does something</font>

426
00:16:58,540 --> 00:17:02,380
<font color="#E5E5E5">weird like it when def was coming out</font>

427
00:17:00,670 --> 00:17:04,659
people<font color="#CCCCCC"> were</font><font color="#E5E5E5"> complaining because GCC</font>

428
00:17:02,380 --> 00:17:06,190
needed an executable stack because I had

429
00:17:04,660 --> 00:17:07,449
some trampoline code or<font color="#E5E5E5"> whatever like</font>

430
00:17:06,190 --> 00:17:09,490
fine<font color="#E5E5E5"> if you want to do some really</font><font color="#CCCCCC"> weird</font>

431
00:17:07,449 --> 00:17:12,220
<font color="#CCCCCC">stuff</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do that you can turn this</font>

432
00:17:09,490 --> 00:17:13,839
off<font color="#E5E5E5"> whatever but most applications 99</font>

433
00:17:12,220 --> 00:17:16,120
applications out of<font color="#E5E5E5"> a hundred aren't</font>

434
00:17:13,839 --> 00:17:18,490
going to ever<font color="#CCCCCC"> Union with a system table</font>

435
00:17:16,119 --> 00:17:22,119
that's something strictly for exploit

436
00:17:18,490 --> 00:17:23,650
writers and then chaining<font color="#E5E5E5"> to chaining is</font>

437
00:17:22,119 --> 00:17:26,079
a really simple<font color="#CCCCCC"> thing to detect</font>

438
00:17:23,650 --> 00:17:28,690
semantically<font color="#CCCCCC"> just by parsing the query</font>

439
00:17:26,079 --> 00:17:30,430
<font color="#CCCCCC">so most people again</font><font color="#E5E5E5"> don't chain and</font>

440
00:17:28,690 --> 00:17:35,740
they certainly<font color="#E5E5E5"> don't select and then</font>

441
00:17:30,430 --> 00:17:37,840
drop constantly so<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> yeah so if</font>

442
00:17:35,740 --> 00:17:39,670
we<font color="#CCCCCC"> get</font><font color="#E5E5E5"> warnings when we try to compile C</font>

443
00:17:37,840 --> 00:17:43,419
code that has the gets function because

444
00:17:39,670 --> 00:17:45,010
it's trivially exploitable<font color="#CCCCCC"> and so if you</font>

445
00:17:43,420 --> 00:17:48,010
want<font color="#E5E5E5"> to have behavior like</font><font color="#CCCCCC"> this fine</font>

446
00:17:45,010 --> 00:17:49,480
<font color="#E5E5E5">we'll give you a warning but</font>

447
00:17:48,010 --> 00:17:52,629
most people don't<font color="#E5E5E5"> need it we should</font>

448
00:17:49,480 --> 00:17:53,920
harden it<font color="#E5E5E5"> we've been talking a lot</font><font color="#CCCCCC"> about</font>

449
00:17:52,630 --> 00:17:56,680
sequel injection we just want to have

450
00:17:53,920 --> 00:17:58,420
one<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> that wasn't</font><font color="#E5E5E5"> so the the</font>

451
00:17:56,680 --> 00:18:00,490
strategy<font color="#E5E5E5"> applies to any interpreter</font>

452
00:17:58,420 --> 00:18:04,300
right<font color="#CCCCCC"> LDAP sequel any you know the</font>

453
00:18:00,490 --> 00:18:06,490
<font color="#CCCCCC">browser etc we can</font><font color="#E5E5E5"> see in this example</font>

454
00:18:04,300 --> 00:18:08,800
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can detect the expansion we kind of</font>

455
00:18:06,490 --> 00:18:11,350
simulate execution of it and see if it's

456
00:18:08,800 --> 00:18:16,360
gonna do something malicious<font color="#CCCCCC"> with</font>

457
00:18:11,350 --> 00:18:17,740
semantic analysis so<font color="#E5E5E5"> we can also harden</font>

458
00:18:16,360 --> 00:18:19,270
what we've been trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about so</font>

459
00:18:17,740 --> 00:18:21,850
far is<font color="#E5E5E5"> all you know all</font><font color="#CCCCCC"> those first</font>

460
00:18:19,270 --> 00:18:24,510
<font color="#E5E5E5">stages have been about let's detect</font>

461
00:18:21,850 --> 00:18:27,760
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> but we can also harden instead</font>

462
00:18:24,510 --> 00:18:30,129
so the first thing we thought of<font color="#CCCCCC"> is like</font>

463
00:18:27,760 --> 00:18:33,340
<font color="#E5E5E5">okay what if we could do a SLR</font><font color="#CCCCCC"> in the</font>

464
00:18:30,130 --> 00:18:34,810
<font color="#E5E5E5">application layer so I am a Java guy so</font>

465
00:18:33,340 --> 00:18:37,689
I went through<font color="#CCCCCC"> this process myself I</font>

466
00:18:34,810 --> 00:18:40,240
went<font color="#E5E5E5"> to the runtime and I tried to hide</font>

467
00:18:37,690 --> 00:18:44,650
the runtime class<font color="#CCCCCC"> runtime is how you</font>

468
00:18:40,240 --> 00:18:47,230
execute system commands so we<font color="#E5E5E5"> hid it</font>

469
00:18:44,650 --> 00:18:49,600
under some<font color="#E5E5E5"> name space and we said okay</font>

470
00:18:47,230 --> 00:18:52,180
does<font color="#CCCCCC"> this work if all</font><font color="#E5E5E5"> the regular code</font>

471
00:18:49,600 --> 00:18:53,740
can access<font color="#CCCCCC"> it</font><font color="#E5E5E5"> but somebody's new code</font>

472
00:18:52,180 --> 00:18:56,830
somebody if somebody gets some malicious

473
00:18:53,740 --> 00:18:57,640
code in there and<font color="#CCCCCC"> they tried to get</font>

474
00:18:56,830 --> 00:19:00,429
<font color="#CCCCCC">access to</font><font color="#E5E5E5"> it</font>

475
00:18:57,640 --> 00:19:02,650
would they be<font color="#CCCCCC"> able to and turns out</font><font color="#E5E5E5"> this</font>

476
00:19:00,430 --> 00:19:04,900
was a really<font color="#E5E5E5"> not a super fruitful</font>

477
00:19:02,650 --> 00:19:07,210
exercise<font color="#E5E5E5"> for us like we thought</font><font color="#CCCCCC"> it would</font>

478
00:19:04,900 --> 00:19:11,440
<font color="#E5E5E5">be</font><font color="#CCCCCC"> a cool</font><font color="#E5E5E5"> protection that ended up not</font>

479
00:19:07,210 --> 00:19:13,690
being<font color="#E5E5E5"> that</font><font color="#CCCCCC"> useful so we if the exploit</font>

480
00:19:11,440 --> 00:19:15,070
previously pointed<font color="#CCCCCC"> to java.lang runtime</font>

481
00:19:13,690 --> 00:19:17,680
<font color="#E5E5E5">well if it's in an unpredictable</font>

482
00:19:15,070 --> 00:19:19,210
location that's<font color="#CCCCCC"> gonna be tricky</font><font color="#E5E5E5"> right</font>

483
00:19:17,680 --> 00:19:23,200
<font color="#E5E5E5">but actually</font><font color="#CCCCCC"> it turned out</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

484
00:19:19,210 --> 00:19:25,870
relatively<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> the exploit code</font><font color="#E5E5E5"> instead</font>

485
00:19:23,200 --> 00:19:27,280
<font color="#CCCCCC">of having a</font><font color="#E5E5E5"> direct link to runtime sure</font>

486
00:19:25,870 --> 00:19:29,290
it couldn't<font color="#E5E5E5"> find that because it's not</font>

487
00:19:27,280 --> 00:19:32,080
there anymore<font color="#E5E5E5"> but there's a lot of other</font>

488
00:19:29,290 --> 00:19:34,360
<font color="#E5E5E5">types in the system that</font><font color="#CCCCCC"> have hard links</font>

489
00:19:32,080 --> 00:19:37,810
to<font color="#E5E5E5"> runtime so no matter where runtime</font>

490
00:19:34,360 --> 00:19:40,090
moved<font color="#CCCCCC"> I may not know its direct location</font>

491
00:19:37,810 --> 00:19:42,210
<font color="#E5E5E5">but I'll be able to find it by going off</font>

492
00:19:40,090 --> 00:19:44,830
another<font color="#E5E5E5"> type</font><font color="#CCCCCC"> that has a hard</font><font color="#E5E5E5"> link to it</font>

493
00:19:42,210 --> 00:19:48,820
so that's<font color="#E5E5E5"> one way we could we were able</font>

494
00:19:44,830 --> 00:19:50,740
<font color="#CCCCCC">to bypass this technique and then</font>

495
00:19:48,820 --> 00:19:53,169
another way was to build another

496
00:19:50,740 --> 00:19:55,450
signature<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that type</font><font color="#E5E5E5"> so sure we didn't</font>

497
00:19:53,170 --> 00:19:57,700
know what the type name was this runtime

498
00:19:55,450 --> 00:20:00,800
hidden runtime it's out there<font color="#E5E5E5"> in the JVM</font>

499
00:19:57,700 --> 00:20:02,660
under a different name<font color="#CCCCCC"> so we</font>

500
00:20:00,800 --> 00:20:05,240
we came<font color="#E5E5E5"> up with some other signature of</font>

501
00:20:02,660 --> 00:20:07,310
it<font color="#CCCCCC"> and then we loop through all the</font>

502
00:20:05,240 --> 00:20:10,910
<font color="#E5E5E5">types available</font><font color="#CCCCCC"> in the system</font><font color="#E5E5E5"> and we</font>

503
00:20:07,310 --> 00:20:14,110
said<font color="#E5E5E5"> okay who has one integer and three</font>

504
00:20:10,910 --> 00:20:16,550
strings<font color="#E5E5E5"> in their class definition and</font>

505
00:20:14,110 --> 00:20:19,580
<font color="#CCCCCC">they have you</font><font color="#E5E5E5"> know this serialized</font>

506
00:20:16,550 --> 00:20:21,980
version ID<font color="#E5E5E5"> okay so if we can</font><font color="#CCCCCC"> find a</font>

507
00:20:19,580 --> 00:20:24,740
class<font color="#CCCCCC"> that matches that signature then</font>

508
00:20:21,980 --> 00:20:26,750
we know<font color="#E5E5E5"> that's probably run time</font><font color="#CCCCCC"> and if</font>

509
00:20:24,740 --> 00:20:28,640
it's not then we'll<font color="#E5E5E5"> go on to the</font><font color="#CCCCCC"> next</font>

510
00:20:26,750 --> 00:20:31,010
one<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's only a limited number of</font>

511
00:20:28,640 --> 00:20:32,780
types so it wouldn't<font color="#E5E5E5"> be difficult at all</font>

512
00:20:31,010 --> 00:20:35,030
<font color="#CCCCCC">to spray through the you know 20 to</font>

513
00:20:32,780 --> 00:20:36,889
<font color="#E5E5E5">100,000 classes that are in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> virtual</font>

514
00:20:35,030 --> 00:20:39,160
<font color="#E5E5E5">machine and find the one you're looking</font>

515
00:20:36,890 --> 00:20:39,160
<font color="#E5E5E5">for</font>

516
00:20:39,550 --> 00:20:44,419
<font color="#E5E5E5">so we're basically a big to do</font><font color="#CCCCCC"> about</font>

517
00:20:43,310 --> 00:20:46,190
nothing<font color="#CCCCCC"> right we thought it would be</font>

518
00:20:44,420 --> 00:20:49,430
<font color="#CCCCCC">this</font><font color="#E5E5E5"> cool experiment and it</font><font color="#CCCCCC"> actually</font>

519
00:20:46,190 --> 00:20:50,600
ended<font color="#E5E5E5"> up going</font><font color="#CCCCCC"> anywhere</font><font color="#E5E5E5"> but let's let's</font>

520
00:20:49,430 --> 00:20:52,820
talk<font color="#E5E5E5"> about something that was successful</font>

521
00:20:50,600 --> 00:20:55,820
so this is a piece of vulnerable<font color="#E5E5E5"> code</font>

522
00:20:52,820 --> 00:20:58,340
it's it's<font color="#CCCCCC"> vulnerable to external</font><font color="#E5E5E5"> XML</font>

523
00:20:55,820 --> 00:21:00,379
external entities<font color="#CCCCCC"> which is gonna use the</font>

524
00:20:58,340 --> 00:21:04,159
exfiltrate data access<font color="#E5E5E5"> internal</font>

525
00:21:00,380 --> 00:21:05,900
resources etc<font color="#E5E5E5"> so this is this is</font><font color="#CCCCCC"> the</font>

526
00:21:04,160 --> 00:21:09,530
vulnerable code we get<font color="#CCCCCC"> access to</font><font color="#E5E5E5"> an</font>

527
00:21:05,900 --> 00:21:12,890
untrusted HTTP request and then we parse

528
00:21:09,530 --> 00:21:15,680
the XML that<font color="#E5E5E5"> comes out of it so it's</font>

529
00:21:12,890 --> 00:21:19,070
trivial for an instrumentation agent to

530
00:21:15,680 --> 00:21:22,640
weave into<font color="#E5E5E5"> that to disable</font><font color="#CCCCCC"> access to</font>

531
00:21:19,070 --> 00:21:25,159
external entities<font color="#CCCCCC"> nobody</font><font color="#E5E5E5"> uses external</font>

532
00:21:22,640 --> 00:21:28,070
<font color="#E5E5E5">entities legitimately like you know the</font>

533
00:21:25,160 --> 00:21:29,600
<font color="#CCCCCC">first</font><font color="#E5E5E5"> 75 links you get when you search</font>

534
00:21:28,070 --> 00:21:32,450
<font color="#CCCCCC">for external</font><font color="#E5E5E5"> entities are all about</font>

535
00:21:29,600 --> 00:21:34,879
<font color="#CCCCCC">attacks of course</font><font color="#E5E5E5"> because it's just</font><font color="#CCCCCC"> not</font>

536
00:21:32,450 --> 00:21:38,240
a non generally useful feature for<font color="#E5E5E5"> XML</font>

537
00:21:34,880 --> 00:21:41,120
for normal use so you can't get any

538
00:21:38,240 --> 00:21:42,920
closer to<font color="#E5E5E5"> boom here right we're</font>

539
00:21:41,120 --> 00:21:45,290
literally injecting our protection<font color="#CCCCCC"> two</font>

540
00:21:42,920 --> 00:21:46,880
lines away for one where the exploit

541
00:21:45,290 --> 00:21:48,379
happens and you have full context you

542
00:21:46,880 --> 00:21:50,990
know what's about<font color="#E5E5E5"> to happen you know the</font>

543
00:21:48,380 --> 00:21:53,450
input<font color="#E5E5E5"> is untrusted and so it's just a</font>

544
00:21:50,990 --> 00:21:58,610
much more<font color="#E5E5E5"> surefire way of protecting</font>

545
00:21:53,450 --> 00:22:02,570
your system against attack so someone

546
00:21:58,610 --> 00:22:04,550
talked<font color="#CCCCCC"> about sandboxing</font><font color="#E5E5E5"> so we know that</font>

547
00:22:02,570 --> 00:22:06,620
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> you know people find bypasses</font>

548
00:22:04,550 --> 00:22:09,409
for the sandbox<font color="#CCCCCC"> is you</font><font color="#E5E5E5"> know in the</font>

549
00:22:06,620 --> 00:22:12,139
browser very popular<font color="#E5E5E5"> but they do raise</font>

550
00:22:09,410 --> 00:22:13,170
the cost of exploit development a lot<font color="#CCCCCC"> so</font>

551
00:22:12,140 --> 00:22:14,730
it's generally

552
00:22:13,170 --> 00:22:16,230
really positive we<font color="#CCCCCC"> can do the same thing</font>

553
00:22:14,730 --> 00:22:22,580
we want<font color="#CCCCCC"> to do it at the application</font>

554
00:22:16,230 --> 00:22:24,330
layer so there's been a lot of

555
00:22:22,580 --> 00:22:26,100
publication<font color="#CCCCCC"> about the the</font>

556
00:22:24,330 --> 00:22:29,100
vulnerabilities and<font color="#E5E5E5"> struts which is a</font>

557
00:22:26,100 --> 00:22:31,169
popular web application framework and so

558
00:22:29,100 --> 00:22:32,790
we we said<font color="#E5E5E5"> okay</font>

559
00:22:31,170 --> 00:22:34,770
all these vulnerabilities are based on

560
00:22:32,790 --> 00:22:37,080
<font color="#E5E5E5">expression language injection the the</font>

561
00:22:34,770 --> 00:22:38,310
expression<font color="#CCCCCC"> language is called OG NL and</font>

562
00:22:37,080 --> 00:22:40,050
so we said<font color="#CCCCCC"> okay</font>

563
00:22:38,310 --> 00:22:42,480
all<font color="#E5E5E5"> these exploits that we see in the</font>

564
00:22:40,050 --> 00:22:44,220
wild<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we're I</font><font color="#E5E5E5"> mean very rapidly</font>

565
00:22:42,480 --> 00:22:46,710
<font color="#E5E5E5">coming out from you know within 24 hours</font>

566
00:22:44,220 --> 00:22:48,180
<font color="#CCCCCC">of the get commit that patched it and</font>

567
00:22:46,710 --> 00:22:49,590
the you know<font color="#CCCCCC"> the the vulnerability</font>

568
00:22:48,180 --> 00:22:51,990
announcement we're seeing attacks<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a</font>

569
00:22:49,590 --> 00:22:54,090
hold of the world<font color="#E5E5E5"> most</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> them were</font>

570
00:22:51,990 --> 00:22:55,710
<font color="#E5E5E5">using that same runtime type they were</font>

571
00:22:54,090 --> 00:22:57,810
you they were just executing<font color="#E5E5E5"> system</font>

572
00:22:55,710 --> 00:23:01,350
commands<font color="#E5E5E5"> and so we can see an</font><font color="#CCCCCC"> example of</font>

573
00:22:57,810 --> 00:23:03,990
that<font color="#CCCCCC"> here</font><font color="#E5E5E5"> the attackers are running the</font>

574
00:23:01,350 --> 00:23:06,659
ID command this<font color="#CCCCCC"> is just a simple proof</font>

575
00:23:03,990 --> 00:23:11,190
of concept<font color="#E5E5E5"> so we want to be able to</font>

576
00:23:06,660 --> 00:23:13,590
prevent<font color="#CCCCCC"> OGL from accessing runtime so</font>

577
00:23:11,190 --> 00:23:17,340
<font color="#E5E5E5">let's sandbox it so what we see</font><font color="#CCCCCC"> here is</font>

578
00:23:13,590 --> 00:23:19,919
the<font color="#CCCCCC"> OGL evaluate this is the stack trace</font>

579
00:23:17,340 --> 00:23:22,740
of that<font color="#CCCCCC"> exploit actually</font><font color="#E5E5E5"> occurring right</font>

580
00:23:19,920 --> 00:23:25,230
so this is the<font color="#E5E5E5"> the runtime</font><font color="#CCCCCC"> exec command</font>

581
00:23:22,740 --> 00:23:28,050
<font color="#E5E5E5">is occurring so the system command is</font>

582
00:23:25,230 --> 00:23:29,400
<font color="#E5E5E5">about to be run</font><font color="#CCCCCC"> but we can do what we</font>

583
00:23:28,050 --> 00:23:32,340
can actually do is when you say<font color="#E5E5E5"> ok when</font>

584
00:23:29,400 --> 00:23:34,560
we enter<font color="#E5E5E5"> a</font><font color="#CCCCCC"> G&L evaluation when we're</font>

585
00:23:32,340 --> 00:23:37,260
about<font color="#E5E5E5"> to evaluate some input that could</font>

586
00:23:34,560 --> 00:23:39,030
be untrusted<font color="#CCCCCC"> we'll enter a sandbox right</font>

587
00:23:37,260 --> 00:23:40,650
we'll set some<font color="#E5E5E5"> global state that says</font>

588
00:23:39,030 --> 00:23:44,610
hey we're<font color="#CCCCCC"> about to do this dangerous</font>

589
00:23:40,650 --> 00:23:47,250
operation and then if we you<font color="#CCCCCC"> know ever</font>

590
00:23:44,610 --> 00:23:49,139
go into<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> we can check to see</font><font color="#CCCCCC"> if</font>

591
00:23:47,250 --> 00:23:51,930
that<font color="#E5E5E5"> state was ever set right we can</font>

592
00:23:49,140 --> 00:23:55,020
<font color="#E5E5E5">check to</font><font color="#CCCCCC"> see did we go into the sandbox</font>

593
00:23:51,930 --> 00:23:56,370
<font color="#CCCCCC">if we did go into the sandbox oh we're</font>

594
00:23:55,020 --> 00:23:58,379
about<font color="#E5E5E5"> to fire off the system command</font>

595
00:23:56,370 --> 00:24:00,179
while we're inside<font color="#E5E5E5"> Oh G and L evaluation</font>

596
00:23:58,380 --> 00:24:01,740
<font color="#E5E5E5">this is no good we should we should</font>

597
00:24:00,180 --> 00:24:04,050
block this right we should<font color="#E5E5E5"> throw an</font>

598
00:24:01,740 --> 00:24:11,010
<font color="#CCCCCC">exception or otherwise redirect control</font>

599
00:24:04,050 --> 00:24:12,690
flow so<font color="#E5E5E5"> I want to go back to our</font>

600
00:24:11,010 --> 00:24:15,960
framework<font color="#E5E5E5"> here for just a second and try</font>

601
00:24:12,690 --> 00:24:18,180
<font color="#CCCCCC">to explain why you know why I back this</font>

602
00:24:15,960 --> 00:24:19,590
strategy<font color="#CCCCCC"> so much is because</font><font color="#E5E5E5"> if you if</font>

603
00:24:18,180 --> 00:24:21,780
you have a<font color="#E5E5E5"> web</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> firewall</font>

604
00:24:19,590 --> 00:24:23,580
you've one opportunity<font color="#CCCCCC"> to catch this</font>

605
00:24:21,780 --> 00:24:25,410
attack<font color="#E5E5E5"> right it's when the application</font>

606
00:24:23,580 --> 00:24:26,439
hits the perimeter<font color="#E5E5E5"> you have to make a</font>

607
00:24:25,410 --> 00:24:29,889
decision<font color="#E5E5E5"> then like</font>

608
00:24:26,440 --> 00:24:32,830
my signatures match up to the attack

609
00:24:29,889 --> 00:24:34,449
that's<font color="#E5E5E5"> given if yes then block it if not</font>

610
00:24:32,830 --> 00:24:37,000
you know the attack is going<font color="#E5E5E5"> to succeed</font>

611
00:24:34,450 --> 00:24:39,279
<font color="#E5E5E5">but we</font><font color="#CCCCCC"> gave ourselves three ways to</font>

612
00:24:37,000 --> 00:24:41,590
catch this attack and it comes<font color="#E5E5E5"> from</font>

613
00:24:39,279 --> 00:24:43,000
<font color="#E5E5E5">having these different strategies</font><font color="#CCCCCC"> having</font>

614
00:24:41,590 --> 00:24:45,730
these different<font color="#E5E5E5"> production capabilities</font>

615
00:24:43,000 --> 00:24:48,100
so if we see obvious<font color="#CCCCCC"> ogl attacks which</font>

616
00:24:45,730 --> 00:24:49,659
some are<font color="#E5E5E5"> easily detectable if we see</font>

617
00:24:48,100 --> 00:24:52,149
<font color="#E5E5E5">that in the input</font><font color="#CCCCCC"> to the perimeter</font>

618
00:24:49,659 --> 00:24:55,179
<font color="#E5E5E5">we'll just block it like go away</font><font color="#CCCCCC"> this is</font>

619
00:24:52,149 --> 00:24:57,189
obvious<font color="#CCCCCC"> if we see input that</font><font color="#E5E5E5"> might be oh</font>

620
00:24:55,179 --> 00:24:58,899
gee<font color="#CCCCCC"> now like looks</font><font color="#E5E5E5"> like it's suspicious</font>

621
00:24:57,190 --> 00:25:01,299
<font color="#E5E5E5">but maybe it's it's difficult to</font>

622
00:24:58,899 --> 00:25:03,668
classify<font color="#E5E5E5"> well we'll check</font><font color="#CCCCCC"> to see if</font><font color="#E5E5E5"> that</font>

623
00:25:01,299 --> 00:25:06,190
input<font color="#CCCCCC"> ever made it</font><font color="#E5E5E5"> into the</font><font color="#CCCCCC"> OGL</font>

624
00:25:03,669 --> 00:25:07,690
evaluation<font color="#E5E5E5"> right so if we see something</font>

625
00:25:06,190 --> 00:25:09,309
<font color="#CCCCCC">suspicious we</font><font color="#E5E5E5"> don't have to make the</font>

626
00:25:07,690 --> 00:25:11,259
decision<font color="#CCCCCC"> right away right we can wait</font>

627
00:25:09,309 --> 00:25:13,509
<font color="#CCCCCC">till we have better context and then</font>

628
00:25:11,259 --> 00:25:15,190
once the evaluation<font color="#E5E5E5"> happens we can say</font>

629
00:25:13,509 --> 00:25:17,110
okay well<font color="#E5E5E5"> this malicious expression came</font>

630
00:25:15,190 --> 00:25:19,090
over here now<font color="#E5E5E5"> it's being evaluated this</font>

631
00:25:17,110 --> 00:25:22,000
code<font color="#CCCCCC"> I don't care what the attacker gave</font>

632
00:25:19,090 --> 00:25:23,529
me if it's going<font color="#E5E5E5"> to run as code I don't</font>

633
00:25:22,000 --> 00:25:25,240
want to run it<font color="#E5E5E5"> and then even if they</font>

634
00:25:23,529 --> 00:25:27,429
somehow<font color="#E5E5E5"> the attacker gets</font><font color="#CCCCCC"> by both of</font>

635
00:25:25,240 --> 00:25:28,840
<font color="#E5E5E5">those things we can</font><font color="#CCCCCC"> actually sandbox</font>

636
00:25:27,429 --> 00:25:31,299
them right we can prevent them<font color="#CCCCCC"> to</font>

637
00:25:28,840 --> 00:25:33,399
getting to the common exploitation<font color="#CCCCCC"> pass</font>

638
00:25:31,299 --> 00:25:35,500
that's what I just<font color="#CCCCCC"> walked through trying</font>

639
00:25:33,399 --> 00:25:37,779
to prevent<font color="#CCCCCC"> run time</font><font color="#E5E5E5"> for running</font><font color="#CCCCCC"> with him</font>

640
00:25:35,500 --> 00:25:39,730
though<font color="#CCCCCC"> GNL evaluation</font><font color="#E5E5E5"> so giving her so</font>

641
00:25:37,779 --> 00:25:41,590
<font color="#E5E5E5">three options you know three</font><font color="#CCCCCC"> strategies</font>

642
00:25:39,730 --> 00:25:48,879
for blocking it is<font color="#E5E5E5"> really really</font>

643
00:25:41,590 --> 00:25:50,559
<font color="#E5E5E5">powerful so goals of</font><font color="#CCCCCC"> rep for</font><font color="#E5E5E5"> us you know</font>

644
00:25:48,879 --> 00:25:52,480
we want to kill bug classes right<font color="#E5E5E5"> we</font>

645
00:25:50,559 --> 00:25:56,379
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> want developers to have to know or</font>

646
00:25:52,480 --> 00:25:57,700
understand about<font color="#CCCCCC"> xxc</font><font color="#E5E5E5"> or you know single</font>

647
00:25:56,379 --> 00:25:59,889
injection padding Oracle<font color="#CCCCCC"> these are</font>

648
00:25:57,700 --> 00:26:02,080
complicated<font color="#E5E5E5"> subjects that require real</font>

649
00:25:59,889 --> 00:26:03,850
muscle memory<font color="#E5E5E5"> around security</font><font color="#CCCCCC"> and asking</font>

650
00:26:02,080 --> 00:26:07,090
<font color="#CCCCCC">developers to keep up with</font><font color="#E5E5E5"> it for me</font><font color="#CCCCCC"> is</font>

651
00:26:03,850 --> 00:26:10,299
is boiling<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ocean</font><font color="#E5E5E5"> when New Relic and</font>

652
00:26:07,090 --> 00:26:12,158
<font color="#CCCCCC">app dynamics introduced agents to</font>

653
00:26:10,299 --> 00:26:13,360
measure security they didn't try to<font color="#E5E5E5"> go</font>

654
00:26:12,159 --> 00:26:16,149
out and teach the world how<font color="#CCCCCC"> to write</font>

655
00:26:13,360 --> 00:26:18,490
more performance<font color="#E5E5E5"> managing measurement</font>

656
00:26:16,149 --> 00:26:20,018
code they just said we'll handle it will

657
00:26:18,490 --> 00:26:22,120
handle<font color="#E5E5E5"> the performance stuff you just</font>

658
00:26:20,019 --> 00:26:24,220
<font color="#CCCCCC">write your business logic alright and we</font>

659
00:26:22,120 --> 00:26:25,959
want to do the same thing we want<font color="#E5E5E5"> to add</font>

660
00:26:24,220 --> 00:26:29,230
the missing security features through an

661
00:26:25,960 --> 00:26:31,330
instrumentation agent so we want to kill

662
00:26:29,230 --> 00:26:34,779
bug classes we want to be invisible to

663
00:26:31,330 --> 00:26:36,250
<font color="#E5E5E5">end-users</font><font color="#CCCCCC"> you know the first question I</font>

664
00:26:34,779 --> 00:26:38,800
think<font color="#CCCCCC"> you know a lot of people would ask</font>

665
00:26:36,250 --> 00:26:40,530
about using an agent<font color="#CCCCCC"> to do this would</font><font color="#E5E5E5"> be</font>

666
00:26:38,800 --> 00:26:42,580
<font color="#E5E5E5">you know what's the performance impact</font>

667
00:26:40,530 --> 00:26:44,889
<font color="#CCCCCC">and this is a funny question for me</font>

668
00:26:42,580 --> 00:26:47,649
<font color="#E5E5E5">because if you think</font><font color="#CCCCCC"> about ssl you know</font>

669
00:26:44,890 --> 00:26:49,450
in a classic<font color="#CCCCCC"> picture</font><font color="#E5E5E5"> you know SSL is</font>

670
00:26:47,650 --> 00:26:51,220
terminated upfront then<font color="#E5E5E5"> it gets handled</font>

671
00:26:49,450 --> 00:26:53,800
off to the web and<font color="#E5E5E5"> then the app server</font>

672
00:26:51,220 --> 00:26:56,890
<font color="#CCCCCC">you know it's probably</font><font color="#E5E5E5"> adding</font><font color="#CCCCCC"> let's say</font>

673
00:26:53,800 --> 00:26:59,379
five<font color="#E5E5E5"> six milliseconds for something well</font>

674
00:26:56,890 --> 00:27:01,980
that's the<font color="#CCCCCC"> SSL provides</font><font color="#E5E5E5"> an important set</font>

675
00:26:59,380 --> 00:27:04,270
<font color="#CCCCCC">of protections</font><font color="#E5E5E5"> but it's small set</font>

676
00:27:01,980 --> 00:27:05,500
<font color="#CCCCCC">whereas you know</font><font color="#E5E5E5"> all the protections</font>

677
00:27:04,270 --> 00:27:07,180
that<font color="#E5E5E5"> you could do from within the</font>

678
00:27:05,500 --> 00:27:10,120
<font color="#CCCCCC">runtime you know we're talking</font><font color="#E5E5E5"> about the</font>

679
00:27:07,180 --> 00:27:12,400
cost<font color="#E5E5E5"> of CPU cycles</font><font color="#CCCCCC"> right it's obviously</font>

680
00:27:10,120 --> 00:27:14,800
a much lower cost and we're preventing

681
00:27:12,400 --> 00:27:18,700
<font color="#E5E5E5">entire you know much bigger sets of</font>

682
00:27:14,800 --> 00:27:20,919
ulnar ability classes<font color="#E5E5E5"> and then we want</font>

683
00:27:18,700 --> 00:27:23,380
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be invisible to developers</font><font color="#CCCCCC"> too so I I</font>

684
00:27:20,920 --> 00:27:25,930
<font color="#E5E5E5">hope we were</font><font color="#CCCCCC"> able to prove that</font><font color="#E5E5E5"> today as</font>

685
00:27:23,380 --> 00:27:27,400
<font color="#E5E5E5">well so developers don't need to write</font>

686
00:27:25,930 --> 00:27:28,870
complex<font color="#E5E5E5"> policies they don't need to</font>

687
00:27:27,400 --> 00:27:31,450
understand<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of these complicated</font>

688
00:27:28,870 --> 00:27:39,100
security mechanisms<font color="#E5E5E5"> and provide them</font>

689
00:27:31,450 --> 00:27:42,730
with the security that<font color="#E5E5E5"> they need so to</font>

690
00:27:39,100 --> 00:27:46,030
compare<font color="#E5E5E5"> depth and sister protections</font>

691
00:27:42,730 --> 00:27:48,250
<font color="#CCCCCC">like a SLR you know</font><font color="#E5E5E5"> DEP is really about</font>

692
00:27:46,030 --> 00:27:50,080
<font color="#E5E5E5">protecting these metaprogramming points</font>

693
00:27:48,250 --> 00:27:53,590
right the structure of the<font color="#CCCCCC"> application</font>

694
00:27:50,080 --> 00:27:54,879
as it<font color="#E5E5E5"> as it's running</font><font color="#CCCCCC"> in the really in</font>

695
00:27:53,590 --> 00:27:57,159
memory right it's trying to prevent

696
00:27:54,880 --> 00:27:59,470
memory corruptions trying to prevent the

697
00:27:57,160 --> 00:28:02,860
attackers<font color="#CCCCCC"> you know from controlling</font>

698
00:27:59,470 --> 00:28:04,780
<font color="#E5E5E5">where execution flows but they're trying</font>

699
00:28:02,860 --> 00:28:06,820
to stop one interpreter from<font color="#E5E5E5"> being</font>

700
00:28:04,780 --> 00:28:10,000
corrupted<font color="#E5E5E5"> right they want to stop the</font>

701
00:28:06,820 --> 00:28:11,560
<font color="#CCCCCC">CPU metal from executing one piece of</font>

702
00:28:10,000 --> 00:28:15,010
code<font color="#E5E5E5"> right from the attackers code</font>

703
00:28:11,560 --> 00:28:16,690
whereas at<font color="#CCCCCC"> the application layer</font><font color="#E5E5E5"> use a</font>

704
00:28:15,010 --> 00:28:18,160
little bit more<font color="#E5E5E5"> scattered right there's</font>

705
00:28:16,690 --> 00:28:19,450
several<font color="#CCCCCC"> different</font><font color="#E5E5E5"> types of attacks</font>

706
00:28:18,160 --> 00:28:21,040
there's several<font color="#CCCCCC"> different</font><font color="#E5E5E5"> types of</font>

707
00:28:19,450 --> 00:28:24,190
interpreters<font color="#E5E5E5"> so there's a lot more</font>

708
00:28:21,040 --> 00:28:25,690
<font color="#E5E5E5">printers there's a lot more you know</font>

709
00:28:24,190 --> 00:28:28,450
interpreters for<font color="#E5E5E5"> you to talk to and try</font>

710
00:28:25,690 --> 00:28:29,560
<font color="#CCCCCC">to protect against but in many</font><font color="#E5E5E5"> way in</font>

711
00:28:28,450 --> 00:28:31,240
many<font color="#E5E5E5"> ways they're similar right we're</font>

712
00:28:29,560 --> 00:28:33,070
trying to prevent attackers<font color="#CCCCCC"> Cargo code</font>

713
00:28:31,240 --> 00:28:34,690
from<font color="#E5E5E5"> running we're trying to make sure</font>

714
00:28:33,070 --> 00:28:37,780
<font color="#CCCCCC">that they can't follow the common</font>

715
00:28:34,690 --> 00:28:39,640
exploit paths<font color="#CCCCCC"> and we want to be</font>

716
00:28:37,780 --> 00:28:42,010
<font color="#CCCCCC">invisible</font><font color="#E5E5E5"> we want to be as part of the</font>

717
00:28:39,640 --> 00:28:43,360
the<font color="#CCCCCC"> tooling</font><font color="#E5E5E5"> right so we think we're not</font>

718
00:28:42,010 --> 00:28:45,700
<font color="#CCCCCC">here to hock a particular product or</font>

719
00:28:43,360 --> 00:28:48,459
whatever we<font color="#CCCCCC"> just</font><font color="#E5E5E5"> think the strategy of</font>

720
00:28:45,700 --> 00:28:51,130
<font color="#E5E5E5">being an agent using instrumentation is</font>

721
00:28:48,460 --> 00:28:53,380
a lot more

722
00:28:51,130 --> 00:28:55,690
provides a lot more complete picture of

723
00:28:53,380 --> 00:28:59,110
security than just a web<font color="#CCCCCC"> application</font>

724
00:28:55,690 --> 00:29:00,910
firewall<font color="#CCCCCC"> up front so how do we</font><font color="#E5E5E5"> get there</font>

725
00:28:59,110 --> 00:29:01,929
if<font color="#CCCCCC"> we all agreed like</font><font color="#E5E5E5"> okay let's go do</font>

726
00:29:00,910 --> 00:29:06,040
this

727
00:29:01,930 --> 00:29:08,040
Microsoft is we're here<font color="#E5E5E5"> Microsoft sorry</font>

728
00:29:06,040 --> 00:29:11,110
<font color="#E5E5E5">Microsoft I think it's an interesting</font>

729
00:29:08,040 --> 00:29:13,389
<font color="#CCCCCC">they</font><font color="#E5E5E5"> have an opportunity because the</font>

730
00:29:11,110 --> 00:29:15,669
they offer a really<font color="#E5E5E5"> complete ecosystem</font>

731
00:29:13,390 --> 00:29:18,520
<font color="#CCCCCC">for their developers so they control</font><font color="#E5E5E5"> a</font>

732
00:29:15,670 --> 00:29:21,280
lot<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> API is that</font><font color="#CCCCCC"> that developers</font>

733
00:29:18,520 --> 00:29:23,410
use to<font color="#CCCCCC"> do request processing</font><font color="#E5E5E5"> or sequel</font>

734
00:29:21,280 --> 00:29:25,600
api's or XML API so they could actually

735
00:29:23,410 --> 00:29:29,160
do<font color="#E5E5E5"> this protection from within their</font>

736
00:29:25,600 --> 00:29:31,270
virtual machine within the dotnet CLR

737
00:29:29,160 --> 00:29:33,309
<font color="#CCCCCC">but it's a</font><font color="#E5E5E5"> little more complicated if</font>

738
00:29:31,270 --> 00:29:35,020
you<font color="#CCCCCC"> are a node</font><font color="#E5E5E5"> right so if the node</font>

739
00:29:33,309 --> 00:29:37,030
runtime wanted to do this a<font color="#E5E5E5"> little more</font>

740
00:29:35,020 --> 00:29:39,520
complicated<font color="#E5E5E5"> because Express comes from</font>

741
00:29:37,030 --> 00:29:40,840
this open<font color="#E5E5E5"> source package and you know</font>

742
00:29:39,520 --> 00:29:42,190
you have<font color="#E5E5E5"> these other libraries that do</font>

743
00:29:40,840 --> 00:29:43,540
<font color="#E5E5E5">these other big chunks of it</font>

744
00:29:42,190 --> 00:29:45,220
so as the<font color="#E5E5E5"> runtime it's a little bit more</font>

745
00:29:43,540 --> 00:29:48,070
complicated for<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to try to instrument</font>

746
00:29:45,220 --> 00:29:49,300
these other ecosystem partners<font color="#E5E5E5"> and so</font>

747
00:29:48,070 --> 00:29:51,939
it's a lot less clean so I<font color="#CCCCCC"> think it's</font>

748
00:29:49,300 --> 00:29:57,190
got to<font color="#E5E5E5"> be done</font><font color="#CCCCCC"> by a third party open</font>

749
00:29:51,940 --> 00:29:59,950
source commercial whatever so we have a

750
00:29:57,190 --> 00:30:01,540
<font color="#E5E5E5">we we we've done the research we've</font>

751
00:29:59,950 --> 00:30:04,210
built prototypes we've you<font color="#CCCCCC"> know gone</font>

752
00:30:01,540 --> 00:30:07,629
through<font color="#E5E5E5"> we we have a free</font><font color="#CCCCCC"> edition of</font>

753
00:30:04,210 --> 00:30:10,809
<font color="#E5E5E5">this available out there on the web you</font>

754
00:30:07,630 --> 00:30:14,410
can go download it<font color="#E5E5E5"> on it we have we</font>

755
00:30:10,809 --> 00:30:17,770
support all the<font color="#CCCCCC"> Java net node Python and</font>

756
00:30:14,410 --> 00:30:18,850
Ruby<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so there's you can go get it</font>

757
00:30:17,770 --> 00:30:22,320
<font color="#CCCCCC">for</font><font color="#E5E5E5"> free you can go download it right</font>

758
00:30:18,850 --> 00:30:22,320
<font color="#E5E5E5">now and play with it</font><font color="#CCCCCC"> and test it</font><font color="#E5E5E5"> out</font>

759
00:30:22,920 --> 00:30:29,220
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> so that's it thank you for time</font>

760
00:30:33,399 --> 00:30:43,569
any questions<font color="#CCCCCC"> there question</font>

761
00:30:46,640 --> 00:30:51,570
<font color="#E5E5E5">hey do you guys know</font><font color="#CCCCCC"> of any</font><font color="#E5E5E5"> other say</font>

762
00:30:50,010 --> 00:30:53,750
<font color="#CCCCCC">open-source projects or</font><font color="#E5E5E5"> something like</font>

763
00:30:51,570 --> 00:30:56,399
<font color="#E5E5E5">that that would give you some limited</font>

764
00:30:53,750 --> 00:30:59,010
<font color="#E5E5E5">introspection abilities into common</font>

765
00:30:56,400 --> 00:31:02,520
application stacks or is is that just

766
00:30:59,010 --> 00:31:06,330
something<font color="#CCCCCC"> that you guys are doing in</font>

767
00:31:02,520 --> 00:31:08,520
<font color="#CCCCCC">terms of in terms of security I don't</font>

768
00:31:06,330 --> 00:31:09,929
<font color="#E5E5E5">think so</font><font color="#CCCCCC"> but there's there's</font><font color="#E5E5E5"> lots of</font>

769
00:31:08,520 --> 00:31:12,660
<font color="#CCCCCC">open-source</font><font color="#E5E5E5"> agents that do really cool</font>

770
00:31:09,930 --> 00:31:14,340
things<font color="#CCCCCC"> there's some performance</font>

771
00:31:12,660 --> 00:31:17,820
<font color="#CCCCCC">management ones there's one called</font>

772
00:31:14,340 --> 00:31:21,030
<font color="#E5E5E5">introspect that does exactly that it</font>

773
00:31:17,820 --> 00:31:24,540
<font color="#E5E5E5">monitors your stack</font><font color="#CCCCCC"> tries to really</font>

774
00:31:21,030 --> 00:31:25,770
<font color="#E5E5E5">build a complete performance measurement</font>

775
00:31:24,540 --> 00:31:27,330
of<font color="#E5E5E5"> your application you instrument this</font>

776
00:31:25,770 --> 00:31:31,010
app you instrument that app and<font color="#E5E5E5"> it</font>

777
00:31:27,330 --> 00:31:34,050
<font color="#E5E5E5">builds you some nice visuals and stuff</font>

778
00:31:31,010 --> 00:31:40,680
<font color="#CCCCCC">but on the security side I don't think</font>

779
00:31:34,050 --> 00:31:44,760
so<font color="#E5E5E5"> I should say that this has been</font>

780
00:31:40,680 --> 00:31:47,310
experimented with in<font color="#CCCCCC"> runtimes like Perl</font>

781
00:31:44,760 --> 00:31:49,260
had a taint mode if I remember correctly

782
00:31:47,310 --> 00:31:52,530
<font color="#E5E5E5">and it was a really simple binary taint</font>

783
00:31:49,260 --> 00:31:55,170
<font color="#CCCCCC">I mean this that</font><font color="#E5E5E5"> was years</font><font color="#CCCCCC"> ago this is</font>

784
00:31:52,530 --> 00:31:57,270
<font color="#E5E5E5">like</font><font color="#CCCCCC"> ten maybe more years</font><font color="#E5E5E5"> ago maybe</font>

785
00:31:55,170 --> 00:31:59,640
longer<font color="#CCCCCC"> where yeah if you just had an</font>

786
00:31:57,270 --> 00:32:01,230
input<font color="#E5E5E5"> and that input ever reached you</font>

787
00:31:59,640 --> 00:32:03,390
know was ever string concatenated and<font color="#E5E5E5"> it</font>

788
00:32:01,230 --> 00:32:07,170
reached sequel it would blow up so I

789
00:32:03,390 --> 00:32:10,700
think it's been played<font color="#CCCCCC"> with</font><font color="#E5E5E5"> but not</font>

790
00:32:07,170 --> 00:32:10,700
really<font color="#E5E5E5"> fully chased down</font>

791
00:32:19,560 --> 00:32:26,649
hi<font color="#CCCCCC"> one</font><font color="#E5E5E5"> question about when you were</font>

792
00:32:23,710 --> 00:32:29,350
talking<font color="#E5E5E5"> about semantic analysis it</font><font color="#CCCCCC"> has</font>

793
00:32:26,650 --> 00:32:31,180
to be<font color="#E5E5E5"> executed in every request that</font><font color="#CCCCCC"> is</font>

794
00:32:29,350 --> 00:32:34,090
made<font color="#E5E5E5"> and compared</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the existing one</font>

795
00:32:31,180 --> 00:32:36,760
the time impact might<font color="#CCCCCC"> be quite high</font><font color="#E5E5E5"> when</font>

796
00:32:34,090 --> 00:32:40,270
<font color="#E5E5E5">you can explain</font><font color="#CCCCCC"> to external entities and</font>

797
00:32:36,760 --> 00:32:43,390
such<font color="#CCCCCC"> this makes a lot of sense but in</font>

798
00:32:40,270 --> 00:32:47,080
sense of semantic analysis<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is quite</font>

799
00:32:43,390 --> 00:32:49,980
resource<font color="#E5E5E5"> well needs a lot of computation</font>

800
00:32:47,080 --> 00:32:52,179
time<font color="#E5E5E5"> compared</font><font color="#CCCCCC"> to others</font><font color="#E5E5E5"> yeah most most</font>

801
00:32:49,980 --> 00:32:54,580
we thought so too

802
00:32:52,180 --> 00:32:57,250
and really<font color="#E5E5E5"> most of the queries that</font>

803
00:32:54,580 --> 00:32:58,810
execute on a system<font color="#E5E5E5"> are the same over</font>

804
00:32:57,250 --> 00:33:00,370
<font color="#E5E5E5">and over and over again and</font><font color="#CCCCCC"> so it's</font>

805
00:32:58,810 --> 00:33:03,100
possible<font color="#E5E5E5"> to cache the</font><font color="#CCCCCC"> results of that</font>

806
00:33:00,370 --> 00:33:04,750
analysis so and if it ever changes and

807
00:33:03,100 --> 00:33:07,810
it's a new query then you do want to

808
00:33:04,750 --> 00:33:10,300
<font color="#E5E5E5">spend that extra few cycles</font><font color="#CCCCCC"> checking out</font>

809
00:33:07,810 --> 00:33:11,710
that query<font color="#E5E5E5"> and investing some</font><font color="#CCCCCC"> time into</font>

810
00:33:10,300 --> 00:33:14,110
<font color="#CCCCCC">it but most of the time</font><font color="#E5E5E5"> because of</font>

811
00:33:11,710 --> 00:33:16,810
caching<font color="#E5E5E5"> it ends up being pretty fast</font>

812
00:33:14,110 --> 00:33:18,370
<font color="#CCCCCC">typically you're not</font><font color="#E5E5E5"> doing full query</font>

813
00:33:16,810 --> 00:33:20,560
evaluation we're not building<font color="#E5E5E5"> a full</font>

814
00:33:18,370 --> 00:33:23,020
like our own sequel interpreter it's a

815
00:33:20,560 --> 00:33:24,790
lot<font color="#E5E5E5"> of like build the ass</font><font color="#CCCCCC"> compare</font><font color="#E5E5E5"> that</font>

816
00:33:23,020 --> 00:33:27,040
compare the<font color="#E5E5E5"> tree of the abstract tree</font>

817
00:33:24,790 --> 00:33:28,570
and and make decisions<font color="#E5E5E5"> or or figure out</font>

818
00:33:27,040 --> 00:33:30,190
what's going on we don't<font color="#CCCCCC"> necessarily</font>

819
00:33:28,570 --> 00:33:31,540
have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> full evaluation of</font>

820
00:33:30,190 --> 00:33:33,430
everything but<font color="#CCCCCC"> there are methods like</font>

821
00:33:31,540 --> 00:33:34,720
<font color="#E5E5E5">well feel like tautology I think</font><font color="#CCCCCC"> at the</font>

822
00:33:33,430 --> 00:33:36,430
<font color="#CCCCCC">S talking</font><font color="#E5E5E5"> about like we had to resolve</font>

823
00:33:34,720 --> 00:33:37,750
<font color="#CCCCCC">do we do use all some of the functions</font>

824
00:33:36,430 --> 00:33:39,460
and<font color="#E5E5E5"> stuff like that to get the results</font>

825
00:33:37,750 --> 00:33:41,530
but<font color="#E5E5E5"> it's it's just converting those two</font>

826
00:33:39,460 --> 00:33:43,540
literals to compare later<font color="#E5E5E5"> we still don't</font>

827
00:33:41,530 --> 00:33:45,399
have<font color="#CCCCCC"> to build</font><font color="#E5E5E5"> a full sequel engine and</font>

828
00:33:43,540 --> 00:33:48,700
run all the<font color="#E5E5E5"> queries at runtime</font><font color="#CCCCCC"> yeah</font>

829
00:33:45,400 --> 00:33:50,170
surprisingly<font color="#E5E5E5"> cheap after in really</font>

830
00:33:48,700 --> 00:33:53,670
investing<font color="#E5E5E5"> in a performance but it's a</font>

831
00:33:50,170 --> 00:33:53,670
great<font color="#E5E5E5"> question</font><font color="#CCCCCC"> okay thanks</font>

832
00:33:59,770 --> 00:34:03,050
hi

833
00:34:00,950 --> 00:34:04,550
great presentation guys thank you<font color="#E5E5E5"> just a</font>

834
00:34:03,050 --> 00:34:07,220
quick question what you said do you have

835
00:34:04,550 --> 00:34:07,970
<font color="#CCCCCC">for a different type of request you have</font>

836
00:34:07,220 --> 00:34:11,750
a<font color="#CCCCCC"> sandbox</font>

837
00:34:07,970 --> 00:34:13,639
<font color="#E5E5E5">can you elaborate that a bit please so</font>

838
00:34:11,750 --> 00:34:16,280
for<font color="#CCCCCC"> our using your your sandbox</font><font color="#E5E5E5"> for</font>

839
00:34:13,639 --> 00:34:19,639
example if you have like a sequel<font color="#E5E5E5"> query</font>

840
00:34:16,280 --> 00:34:21,380
will you actually<font color="#E5E5E5"> go to the file</font><font color="#CCCCCC"> system</font>

841
00:34:19,639 --> 00:34:23,710
or go to the database and<font color="#CCCCCC"> run it there</font>

842
00:34:21,380 --> 00:34:26,990
or do we<font color="#E5E5E5"> have something virtually</font>

843
00:34:23,710 --> 00:34:31,668
locally or how so some of<font color="#E5E5E5"> the sandbox</font>

844
00:34:26,989 --> 00:34:34,609
<font color="#E5E5E5">saying is done</font><font color="#CCCCCC"> really by sandboxing</font>

845
00:34:31,668 --> 00:34:36,949
api's from reaching<font color="#E5E5E5"> other api's so it</font>

846
00:34:34,610 --> 00:34:39,620
depends<font color="#CCCCCC"> on the vulnerability type but if</font>

847
00:34:36,949 --> 00:34:43,460
we just<font color="#CCCCCC"> put some state that says ok</font>

848
00:34:39,620 --> 00:34:45,918
we're within a GL and we shouldn't ever

849
00:34:43,460 --> 00:34:48,500
reach this other command executing code

850
00:34:45,918 --> 00:34:50,690
when we<font color="#E5E5E5"> run this code we always check to</font>

851
00:34:48,500 --> 00:34:52,040
<font color="#E5E5E5">see if we're within that code</font><font color="#CCCCCC"> so it's</font>

852
00:34:50,690 --> 00:34:53,480
not a sandbox in the traditional sense

853
00:34:52,040 --> 00:34:56,179
where we're trying to restrict access to

854
00:34:53,480 --> 00:34:59,090
resources or files<font color="#E5E5E5"> or some other</font>

855
00:34:56,179 --> 00:35:01,070
construct it's<font color="#E5E5E5"> about limiting code from</font>

856
00:34:59,090 --> 00:35:03,170
<font color="#CCCCCC">reaching other code</font><font color="#E5E5E5"> but hey look it</font>

857
00:35:01,070 --> 00:35:04,880
tomorrow if we want to<font color="#E5E5E5"> add support</font><font color="#CCCCCC"> for a</font>

858
00:35:03,170 --> 00:35:06,110
new vulnerability what we're gonna do is

859
00:35:04,880 --> 00:35:07,400
we're gonna put that<font color="#E5E5E5"> framework on the</font>

860
00:35:06,110 --> 00:35:09,680
<font color="#E5E5E5">board and we're gonna say hey what can</font>

861
00:35:07,400 --> 00:35:11,180
<font color="#E5E5E5">we do for input tracing for this what</font>

862
00:35:09,680 --> 00:35:13,399
can<font color="#E5E5E5"> we do for semantic analysis for this</font>

863
00:35:11,180 --> 00:35:15,649
what can<font color="#E5E5E5"> we do for</font><font color="#CCCCCC"> Sansan boxing and</font>

864
00:35:13,400 --> 00:35:18,110
maybe we'll end<font color="#CCCCCC"> up</font><font color="#E5E5E5"> doing something like</font>

865
00:35:15,650 --> 00:35:19,970
<font color="#E5E5E5">that</font><font color="#CCCCCC"> but so basically</font><font color="#E5E5E5"> you're restricting</font>

866
00:35:18,110 --> 00:35:21,410
classes of api's from<font color="#E5E5E5"> interacting or</font>

867
00:35:19,970 --> 00:35:23,720
talking<font color="#E5E5E5"> to each other</font><font color="#CCCCCC"> or calling each</font>

868
00:35:21,410 --> 00:35:25,640
<font color="#E5E5E5">other right in</font><font color="#CCCCCC"> a sandbox but in your</font>

869
00:35:23,720 --> 00:35:27,169
example<font color="#E5E5E5"> of a sequel query that's reading</font>

870
00:35:25,640 --> 00:35:30,700
a file and<font color="#E5E5E5"> maybe you don't want to do</font>

871
00:35:27,170 --> 00:35:33,260
that<font color="#CCCCCC"> I think that</font><font color="#E5E5E5"> we have triggers for</font>

872
00:35:30,700 --> 00:35:34,790
after we parse a query for identifying

873
00:35:33,260 --> 00:35:36,110
that this is like reading<font color="#E5E5E5"> a file</font>

874
00:35:34,790 --> 00:35:38,090
resource and then that's a<font color="#E5E5E5"> feature you</font>

875
00:35:36,110 --> 00:35:39,710
<font color="#E5E5E5">can say my queries don't read files</font><font color="#CCCCCC"> so</font>

876
00:35:38,090 --> 00:35:41,900
that's something<font color="#E5E5E5"> I don't want but that's</font>

877
00:35:39,710 --> 00:35:44,810
more done through analysis<font color="#E5E5E5"> of the query</font>

878
00:35:41,900 --> 00:35:46,730
<font color="#CCCCCC">as opposed to the sandboxing approach</font>

879
00:35:44,810 --> 00:35:48,110
because that query happens on the sequel

880
00:35:46,730 --> 00:35:49,970
server<font color="#CCCCCC"> or that file read would happen</font><font color="#E5E5E5"> on</font>

881
00:35:48,110 --> 00:35:55,700
the sequel server<font color="#CCCCCC"> okay thank you</font><font color="#E5E5E5"> thank</font>

882
00:35:49,970 --> 00:35:57,080
<font color="#CCCCCC">you</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> harder yeah</font><font color="#E5E5E5"> it once it leaves</font>

883
00:35:55,700 --> 00:35:58,700
the<font color="#E5E5E5"> scope of the virtual machine where</font>

884
00:35:57,080 --> 00:36:00,770
the app runs you know<font color="#E5E5E5"> the apps not run</font>

885
00:35:58,700 --> 00:36:02,390
anymore<font color="#E5E5E5"> so we can't see what that</font><font color="#CCCCCC"> person</font>

886
00:36:00,770 --> 00:36:06,070
is<font color="#E5E5E5"> doing but luckily we can do a whole</font>

887
00:36:02,390 --> 00:36:06,069
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> from the</font><font color="#E5E5E5"> app perspective</font>

888
00:36:16,300 --> 00:36:23,890
was great thanks guys<font color="#CCCCCC"> thanks to us</font>

889
00:36:18,130 --> 00:36:26,520
appreciate<font color="#E5E5E5"> it I love this talk for me</font>

890
00:36:23,890 --> 00:36:29,319
<font color="#CCCCCC">represents a promise</font><font color="#E5E5E5"> because as</font>

891
00:36:26,520 --> 00:36:31,930
defenders as developers<font color="#E5E5E5"> we have to get</font>

892
00:36:29,320 --> 00:36:33,640
everything<font color="#E5E5E5"> right as</font><font color="#CCCCCC"> attackers they need</font>

893
00:36:31,930 --> 00:36:35,169
the one thing right<font color="#E5E5E5"> and to me</font><font color="#CCCCCC"> the</font>

894
00:36:33,640 --> 00:36:37,450
<font color="#CCCCCC">Serpent's</font><font color="#E5E5E5"> the promise of us having</font><font color="#CCCCCC"> to</font>

895
00:36:35,170 --> 00:36:38,890
get less things right and some you know

896
00:36:37,450 --> 00:36:40,689
cavalry<font color="#E5E5E5"> coming to kind</font><font color="#CCCCCC"> of you know save</font>

897
00:36:38,890 --> 00:36:42,310
our<font color="#E5E5E5"> butts we miss a few things so yeah</font>

898
00:36:40,690 --> 00:36:44,200
great<font color="#E5E5E5"> talk thanks very much thank you I</font>

899
00:36:42,310 --> 00:36:47,799
think<font color="#E5E5E5"> there's a big</font><font color="#CCCCCC"> advantage to of</font>

900
00:36:44,200 --> 00:36:51,640
being able to weave in protections that

901
00:36:47,800 --> 00:36:52,960
<font color="#E5E5E5">you didn't have like if there's a new</font>

902
00:36:51,640 --> 00:36:54,400
exploit<font color="#CCCCCC"> that comes out and it affects a</font>

903
00:36:52,960 --> 00:36:55,960
library that<font color="#CCCCCC"> you have but the code</font>

904
00:36:54,400 --> 00:36:58,210
review<font color="#CCCCCC"> or the time viewer</font><font color="#E5E5E5"> mediation is</font>

905
00:36:55,960 --> 00:37:01,150
so high<font color="#E5E5E5"> we can still put protections in</font>

906
00:36:58,210 --> 00:37:03,460
or we<font color="#E5E5E5"> can block the og NL from executing</font>

907
00:37:01,150 --> 00:37:05,350
or whatever that type is before you can

908
00:37:03,460 --> 00:37:06,790
get a patch in place<font color="#E5E5E5"> and deployed so you</font>

909
00:37:05,350 --> 00:37:09,250
can be<font color="#E5E5E5"> protected from a class of</font>

910
00:37:06,790 --> 00:37:11,259
vulnerability from<font color="#E5E5E5"> a type you know</font>

911
00:37:09,250 --> 00:37:12,990
without<font color="#CCCCCC"> waiting for long</font><font color="#E5E5E5"> term</font>

912
00:37:11,260 --> 00:37:15,100
expectation and things like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so</font>

913
00:37:12,990 --> 00:37:17,379
<font color="#CCCCCC">expressed negatively I think it allows</font>

914
00:37:15,100 --> 00:37:19,690
me to<font color="#E5E5E5"> be a lazy developer that's exactly</font>

915
00:37:17,380 --> 00:37:21,970
what we want all<font color="#E5E5E5"> that security tech debt</font>

916
00:37:19,690 --> 00:37:23,200
that we heard in the<font color="#E5E5E5"> keynote talk about</font>

917
00:37:21,970 --> 00:37:24,339
being<font color="#E5E5E5"> oppressive in the present what's</font>

918
00:37:23,200 --> 00:37:26,620
<font color="#E5E5E5">interesting I don't</font><font color="#CCCCCC"> know you know I</font>

919
00:37:24,340 --> 00:37:28,570
<font color="#E5E5E5">don't write</font><font color="#CCCCCC"> C C++ gonna code anymore so</font>

920
00:37:26,620 --> 00:37:31,540
like I<font color="#CCCCCC"> don't know how developers</font><font color="#E5E5E5"> think</font>

921
00:37:28,570 --> 00:37:33,520
about using bounded<font color="#CCCCCC"> api's anymore</font><font color="#E5E5E5"> like</font>

922
00:37:31,540 --> 00:37:35,610
string copy and you know<font color="#E5E5E5"> I assume they</font>

923
00:37:33,520 --> 00:37:37,900
<font color="#E5E5E5">want to do you know use those controls</font>

924
00:37:35,610 --> 00:37:39,400
<font color="#CCCCCC">you know the secure API</font><font color="#E5E5E5"> so they don't</font>

925
00:37:37,900 --> 00:37:42,280
have crashes or anything but I wonder<font color="#E5E5E5"> if</font>

926
00:37:39,400 --> 00:37:43,450
security is<font color="#E5E5E5"> forefront anymore like a lot</font>

927
00:37:42,280 --> 00:37:45,030
of<font color="#CCCCCC"> this stuff's</font><font color="#E5E5E5"> really hard to exploit</font>

928
00:37:43,450 --> 00:37:47,919
now so maybe<font color="#E5E5E5"> it</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> make sense</font><font color="#CCCCCC"> to</font>

929
00:37:45,030 --> 00:37:49,260
<font color="#E5E5E5">really think I'd have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> think that hard</font>

930
00:37:47,920 --> 00:37:52,240
about it

931
00:37:49,260 --> 00:37:54,510
hope so<font color="#CCCCCC"> Thanks thank</font><font color="#E5E5E5"> you</font>

932
00:37:52,240 --> 00:37:54,509
<font color="#CCCCCC">Thanks</font>

