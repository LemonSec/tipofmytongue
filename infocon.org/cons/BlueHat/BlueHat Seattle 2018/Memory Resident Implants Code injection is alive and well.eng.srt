1
00:00:00,000 --> 00:00:03,510
let me introduce<font color="#CCCCCC"> youtube's to luke</font>

2
00:00:01,560 --> 00:00:05,730
<font color="#CCCCCC">jennings he is the chief or research</font>

3
00:00:03,510 --> 00:00:07,170
officer for counter sept<font color="#E5E5E5"> going to be</font>

4
00:00:05,730 --> 00:00:14,009
talking<font color="#CCCCCC"> to you about memory resident</font>

5
00:00:07,170 --> 00:00:16,529
implants take it away<font color="#CCCCCC"> luke</font><font color="#E5E5E5"> okay</font>

6
00:00:14,009 --> 00:00:18,750
<font color="#CCCCCC">hi everyone just to give</font><font color="#E5E5E5"> you a very</font>

7
00:00:16,529 --> 00:00:20,250
<font color="#E5E5E5">brief background before we move on</font><font color="#CCCCCC"> i'm</font>

8
00:00:18,750 --> 00:00:22,470
approaching<font color="#E5E5E5"> this from the</font><font color="#CCCCCC"> perspective of</font>

9
00:00:20,250 --> 00:00:24,029
<font color="#E5E5E5">both sort of offense and defense so with</font>

10
00:00:22,470 --> 00:00:27,180
my<font color="#CCCCCC"> background</font><font color="#E5E5E5"> i was very much on the red</font>

11
00:00:24,029 --> 00:00:28,680
<font color="#E5E5E5">team side so memory resident implants</font>

12
00:00:27,180 --> 00:00:29,849
were a big<font color="#E5E5E5"> part of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then i've</font>

13
00:00:28,680 --> 00:00:31,529
kind<font color="#E5E5E5"> of switched over to the blue team</font>

14
00:00:29,849 --> 00:00:33,329
side in more recent years<font color="#E5E5E5"> and looked at</font>

15
00:00:31,529 --> 00:00:35,640
how to sort<font color="#E5E5E5"> of detect them so we kind of</font>

16
00:00:33,329 --> 00:00:40,379
<font color="#E5E5E5">consider it from it from both angles and</font>

17
00:00:35,640 --> 00:00:43,440
<font color="#E5E5E5">there so just to clear one thing up in</font>

18
00:00:40,379 --> 00:00:45,870
case anyone is<font color="#E5E5E5"> confused over what</font><font color="#CCCCCC"> this</font>

19
00:00:43,440 --> 00:00:48,539
might<font color="#CCCCCC"> be I'm when I say code injection</font>

20
00:00:45,870 --> 00:00:50,160
<font color="#CCCCCC">I'm not talking about</font><font color="#E5E5E5"> sort of exploits</font>

21
00:00:48,539 --> 00:00:51,600
here buffer overflows that kind of thing

22
00:00:50,160 --> 00:00:53,069
I'm not talking<font color="#E5E5E5"> about anything involves</font>

23
00:00:51,600 --> 00:00:56,910
crossing<font color="#CCCCCC"> a</font><font color="#E5E5E5"> privileged boundary I'm</font>

24
00:00:53,070 --> 00:00:59,129
purely talking about essentially hosting

25
00:00:56,910 --> 00:01:01,589
your your malicious code your implant in

26
00:00:59,129 --> 00:01:03,000
another process<font color="#E5E5E5"> or</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> any sort of form</font>

27
00:01:01,590 --> 00:01:05,460
of<font color="#CCCCCC"> dynamic code execution there that's</font>

28
00:01:03,000 --> 00:01:06,689
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> keeping things off of disk so we</font>

29
00:01:05,459 --> 00:01:08,729
cuz they're in that<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of angles not</font>

30
00:01:06,689 --> 00:01:10,500
<font color="#E5E5E5">this so it's very much more these</font><font color="#CCCCCC"> kind</font>

31
00:01:08,729 --> 00:01:13,229
of things<font color="#CCCCCC"> so cross process access</font>

32
00:01:10,500 --> 00:01:15,180
mechanisms for injecting native code<font color="#E5E5E5"> or</font>

33
00:01:13,229 --> 00:01:17,070
like sort of dynamic execution<font color="#E5E5E5"> methods</font>

34
00:01:15,180 --> 00:01:18,540
that can be<font color="#E5E5E5"> used within frameworks like</font>

35
00:01:17,070 --> 00:01:20,130
<font color="#E5E5E5">powershell dotnet</font><font color="#CCCCCC"> and all comes</font><font color="#E5E5E5"> a bit</font>

36
00:01:18,540 --> 00:01:26,430
more<font color="#CCCCCC"> detailed those different things</font><font color="#E5E5E5"> as</font>

37
00:01:20,130 --> 00:01:28,770
we<font color="#CCCCCC"> move on so first of all what does</font>

38
00:01:26,430 --> 00:01:30,509
this look like<font color="#E5E5E5"> if you go back some time</font>

39
00:01:28,770 --> 00:01:33,329
or some sort of classic ways people<font color="#CCCCCC"> were</font>

40
00:01:30,509 --> 00:01:35,400
doing<font color="#CCCCCC"> this so a common approach is</font>

41
00:01:33,329 --> 00:01:37,949
reflective DLL loading and this<font color="#E5E5E5"> is</font>

42
00:01:35,400 --> 00:01:41,310
<font color="#E5E5E5">something that frameworks like</font>

43
00:01:37,950 --> 00:01:43,860
<font color="#CCCCCC">Metasploit have been using for many</font>

44
00:01:41,310 --> 00:01:45,990
years<font color="#CCCCCC"> dating back</font><font color="#E5E5E5"> over a decade with</font>

45
00:01:43,860 --> 00:01:47,610
<font color="#E5E5E5">something like the meterpreter</font><font color="#CCCCCC"> and you</font>

46
00:01:45,990 --> 00:01:49,470
kind of got classic access patterns here

47
00:01:47,610 --> 00:01:51,450
of where you know you want to<font color="#CCCCCC"> migrate</font>

48
00:01:49,470 --> 00:01:53,869
your<font color="#E5E5E5"> implant from a process that you're</font>

49
00:01:51,450 --> 00:01:57,840
currently in into another<font color="#CCCCCC"> legitimate</font>

50
00:01:53,869 --> 00:01:59,490
process<font color="#E5E5E5"> to hide it</font><font color="#CCCCCC"> and you'll</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> api</font>

51
00:01:57,840 --> 00:02:00,840
calls like<font color="#CCCCCC"> fetch our can right missus</font>

52
00:01:59,490 --> 00:02:02,640
memory and then create a remote thread

53
00:02:00,840 --> 00:02:04,619
so essentially you have<font color="#E5E5E5"> something that</font>

54
00:02:02,640 --> 00:02:06,360
<font color="#CCCCCC">looks like this you've got a process</font>

55
00:02:04,619 --> 00:02:07,860
<font color="#CCCCCC">where you</font><font color="#E5E5E5"> got image</font><font color="#CCCCCC"> locations mapped for</font>

56
00:02:06,360 --> 00:02:09,270
sort<font color="#E5E5E5"> of if this was</font><font color="#CCCCCC"> calc he might have</font>

57
00:02:07,860 --> 00:02:11,640
<font color="#CCCCCC">camp vaccine and then all the dll's</font>

58
00:02:09,270 --> 00:02:13,430
mapped so you virtually<font color="#E5E5E5"> lacked some</font>

59
00:02:11,640 --> 00:02:14,869
space<font color="#E5E5E5"> there will be a private</font>

60
00:02:13,430 --> 00:02:17,840
region<font color="#E5E5E5"> you might make</font><font color="#CCCCCC"> that</font>

61
00:02:14,870 --> 00:02:19,519
read/write/execute for example<font color="#CCCCCC"> right</font>

62
00:02:17,840 --> 00:02:21,260
<font color="#CCCCCC">you're malicious code into it</font><font color="#E5E5E5"> and then</font>

63
00:02:19,519 --> 00:02:22,879
<font color="#E5E5E5">create a</font><font color="#CCCCCC"> new thread that</font><font color="#E5E5E5"> runs that</font><font color="#CCCCCC"> and</font>

64
00:02:21,260 --> 00:02:25,909
then you've got a<font color="#CCCCCC"> legitimate process</font>

65
00:02:22,879 --> 00:02:27,858
<font color="#E5E5E5">that's still operating as you expect</font><font color="#CCCCCC"> but</font>

66
00:02:25,909 --> 00:02:31,120
you've also put<font color="#E5E5E5"> your malicious implant</font>

67
00:02:27,859 --> 00:02:34,280
<font color="#E5E5E5">into it and so then you can effectively</font>

68
00:02:31,120 --> 00:02:36,230
<font color="#E5E5E5">write your implants as dll's but then</font>

69
00:02:34,280 --> 00:02:38,030
you won't have to<font color="#E5E5E5"> load them from disk</font>

70
00:02:36,230 --> 00:02:39,828
you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> do it all in memory and</font>

71
00:02:38,030 --> 00:02:41,959
a<font color="#E5E5E5"> lot of the idea behind that originally</font>

72
00:02:39,829 --> 00:02:44,049
<font color="#E5E5E5">was kind of to be anti forensics to keep</font>

73
00:02:41,959 --> 00:02:46,099
things off of<font color="#E5E5E5"> disk because a lot</font><font color="#CCCCCC"> of</font>

74
00:02:44,049 --> 00:02:48,769
traditional forensics<font color="#E5E5E5"> was based on sort</font>

75
00:02:46,099 --> 00:02:51,409
of disk forensics another classic

76
00:02:48,769 --> 00:02:53,090
technique would be protists Halloween

77
00:02:51,409 --> 00:02:56,179
this<font color="#E5E5E5"> is kind of similar but rather than</font>

78
00:02:53,090 --> 00:02:58,069
often<font color="#CCCCCC"> rather than rather dll it's maybe</font>

79
00:02:56,180 --> 00:03:00,530
running actual executable we're making

80
00:02:58,069 --> 00:03:02,810
it appear<font color="#CCCCCC"> to be a legitimate executable</font>

81
00:03:00,530 --> 00:03:04,250
so generally here you would use a few

82
00:03:02,810 --> 00:03:05,419
different<font color="#CCCCCC"> types</font><font color="#E5E5E5"> of AP is that</font><font color="#CCCCCC"> was</font>

83
00:03:04,250 --> 00:03:07,430
<font color="#CCCCCC">slightly different that</font><font color="#E5E5E5"> you would have</font>

84
00:03:05,419 --> 00:03:09,739
you know if<font color="#E5E5E5"> you--if calc was your</font>

85
00:03:07,430 --> 00:03:11,419
hosting process here<font color="#CCCCCC"> you would unmapped</font>

86
00:03:09,739 --> 00:03:13,189
for the main<font color="#E5E5E5"> part so you create a</font>

87
00:03:11,419 --> 00:03:15,109
process<font color="#E5E5E5"> in a suspended</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> so</font>

88
00:03:13,189 --> 00:03:17,000
nothing's running<font color="#CCCCCC"> and you process and</font>

89
00:03:15,109 --> 00:03:18,949
you<font color="#CCCCCC"> unwrap the original AXI</font><font color="#E5E5E5"> you</font>

90
00:03:17,000 --> 00:03:21,169
reallocate memory in its place you<font color="#CCCCCC"> put</font>

91
00:03:18,949 --> 00:03:23,389
<font color="#E5E5E5">your malicious code in there you may</font>

92
00:03:21,169 --> 00:03:25,250
<font color="#CCCCCC">then change the properties of whether</font>

93
00:03:23,389 --> 00:03:27,079
thread is going<font color="#CCCCCC"> to run from with thread</font>

94
00:03:25,250 --> 00:03:29,479
context and then you resume and

95
00:03:27,079 --> 00:03:32,120
effectively<font color="#CCCCCC"> you've got something that's</font>

96
00:03:29,479 --> 00:03:34,340
<font color="#E5E5E5">then running your code instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> what</font>

97
00:03:32,120 --> 00:03:36,199
was<font color="#E5E5E5"> supposed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be CalPERS perspective</font>

98
00:03:34,340 --> 00:03:38,239
<font color="#CCCCCC">it kind of</font><font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like cow could run</font>

99
00:03:36,199 --> 00:03:39,889
so that's who very common<font color="#E5E5E5"> sort of</font>

100
00:03:38,239 --> 00:03:43,099
classic techniques for doing<font color="#E5E5E5"> these kind</font>

101
00:03:39,889 --> 00:03:44,180
of things<font color="#CCCCCC"> and they've</font><font color="#E5E5E5"> been around for</font>

102
00:03:43,099 --> 00:03:46,970
years people<font color="#E5E5E5"> have been</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> them and</font>

103
00:03:44,180 --> 00:03:50,120
<font color="#E5E5E5">when I first moved over to the sort of</font>

104
00:03:46,970 --> 00:03:52,579
blue tea inside<font color="#E5E5E5"> one of the questions you</font>

105
00:03:50,120 --> 00:03:54,639
<font color="#CCCCCC">know I had was what why</font><font color="#E5E5E5"> is it that when</font>

106
00:03:52,579 --> 00:03:56,930
we<font color="#CCCCCC"> approach a red team</font><font color="#E5E5E5"> people can't</font>

107
00:03:54,639 --> 00:03:58,639
can't<font color="#CCCCCC"> detectives can't pick us up easily</font>

108
00:03:56,930 --> 00:04:01,359
why do we have<font color="#E5E5E5"> it so</font><font color="#CCCCCC"> easy at least</font><font color="#E5E5E5"> at</font>

109
00:03:58,639 --> 00:04:03,530
<font color="#E5E5E5">the time how how things have been and</font>

110
00:04:01,359 --> 00:04:04,579
these were<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> - the kind of things</font>

111
00:04:03,530 --> 00:04:06,199
I was<font color="#CCCCCC"> thinking I was like we've got to</font>

112
00:04:04,579 --> 00:04:08,329
be<font color="#CCCCCC"> able to detect memory resident</font>

113
00:04:06,199 --> 00:04:09,439
implants because<font color="#E5E5E5"> it seems to be people</font>

114
00:04:08,329 --> 00:04:12,829
<font color="#CCCCCC">aren't</font><font color="#E5E5E5"> very good at</font><font color="#CCCCCC"> there at least</font><font color="#E5E5E5"> one</font>

115
00:04:09,439 --> 00:04:14,328
at a time<font color="#E5E5E5"> a few</font><font color="#CCCCCC"> years ago so</font><font color="#E5E5E5"> what are</font>

116
00:04:12,829 --> 00:04:16,940
the approaches you can<font color="#E5E5E5"> take</font><font color="#CCCCCC"> for a</font>

117
00:04:14,329 --> 00:04:17,959
detection here well there's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> couple of</font>

118
00:04:16,940 --> 00:04:20,238
different angles<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can take and</font><font color="#CCCCCC"> I'm</font>

119
00:04:17,959 --> 00:04:21,769
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> start with the tracing angles</font>

120
00:04:20,238 --> 00:04:23,510
so here we're talking<font color="#E5E5E5"> about sort of</font>

121
00:04:21,769 --> 00:04:26,240
<font color="#CCCCCC">real-time technique so by tracing</font>

122
00:04:23,510 --> 00:04:26,840
instruments in different data providers

123
00:04:26,240 --> 00:04:28,130
that<font color="#CCCCCC"> you can</font>

124
00:04:26,840 --> 00:04:30,198
actually get a real-time<font color="#E5E5E5"> view of what's</font>

125
00:04:28,130 --> 00:04:31,850
<font color="#E5E5E5">going on in the operating system such</font>

126
00:04:30,199 --> 00:04:33,889
understands when<font color="#E5E5E5"> these sort of</font>

127
00:04:31,850 --> 00:04:36,650
techniques might be in use so what<font color="#CCCCCC"> are</font>

128
00:04:33,889 --> 00:04:37,970
your options<font color="#E5E5E5"> here</font><font color="#CCCCCC"> I mean you know one</font>

129
00:04:36,650 --> 00:04:39,560
thing<font color="#E5E5E5"> is you could sort of sort of hook</font>

130
00:04:37,970 --> 00:04:41,479
it in the kernel<font color="#E5E5E5"> obviously that's</font>

131
00:04:39,560 --> 00:04:43,400
something that's been a no-go area for a

132
00:04:41,479 --> 00:04:45,770
long time now ever since of a<font color="#CCCCCC"> 64-bit</font><font color="#E5E5E5"> and</font>

133
00:04:43,400 --> 00:04:47,090
patch guard and so forth<font color="#E5E5E5"> if you were</font>

134
00:04:45,770 --> 00:04:48,460
<font color="#E5E5E5">trying to do that in a production</font><font color="#CCCCCC"> where</font>

135
00:04:47,090 --> 00:04:51,320
<font color="#E5E5E5">it's obviously not something that's</font>

136
00:04:48,460 --> 00:04:53,780
there's permitted and it's not it's not

137
00:04:51,320 --> 00:04:57,110
<font color="#E5E5E5">a really viable approach but it would</font>

138
00:04:53,780 --> 00:04:58,429
<font color="#E5E5E5">have been in the in the past then a lot</font>

139
00:04:57,110 --> 00:05:00,680
<font color="#CCCCCC">of people instead</font><font color="#E5E5E5"> will have moved to use</font>

140
00:04:58,430 --> 00:05:02,810
a land<font color="#CCCCCC"> hook in now again</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> for</font>

141
00:05:00,680 --> 00:05:04,400
any form of hooking it's not the

142
00:05:02,810 --> 00:05:05,660
<font color="#E5E5E5">greatest for stability but you can at</font>

143
00:05:04,400 --> 00:05:07,849
least do it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> land if you</font><font color="#E5E5E5"> want</font>

144
00:05:05,660 --> 00:05:10,610
to but<font color="#CCCCCC"> it's also possible to bypass so</font>

145
00:05:07,850 --> 00:05:12,080
like if if you've got malicious code and

146
00:05:10,610 --> 00:05:12,950
it's expecting that it might be

147
00:05:12,080 --> 00:05:14,900
inspected by<font color="#E5E5E5"> looser</font>

148
00:05:12,950 --> 00:05:16,969
<font color="#CCCCCC">user land hooks you can either sort of</font>

149
00:05:14,900 --> 00:05:18,440
detect and unhook those things or you

150
00:05:16,970 --> 00:05:19,970
can make direct<font color="#CCCCCC"> sea schools without</font>

151
00:05:18,440 --> 00:05:21,169
actually going violet libraries<font color="#E5E5E5"> that</font>

152
00:05:19,970 --> 00:05:22,660
being hurt so<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> you know the</font><font color="#CCCCCC"> fee</font>

153
00:05:21,169 --> 00:05:26,090
approaches there it's<font color="#CCCCCC"> atonic that is</font>

154
00:05:22,660 --> 00:05:28,490
circumvent of all by malicious code<font color="#E5E5E5"> or</font>

155
00:05:26,090 --> 00:05:29,690
you can take<font color="#E5E5E5"> officially provided</font>

156
00:05:28,490 --> 00:05:31,660
information<font color="#CCCCCC"> from the OS which</font><font color="#E5E5E5"> is</font>

157
00:05:29,690 --> 00:05:35,539
<font color="#E5E5E5">obviously most safe way to do it and</font>

158
00:05:31,660 --> 00:05:37,220
traditionally this<font color="#CCCCCC"> has been mostly sort</font>

159
00:05:35,539 --> 00:05:38,900
<font color="#E5E5E5">of kernel</font><font color="#CCCCCC"> callbacks so you can get sort</font>

160
00:05:37,220 --> 00:05:40,910
<font color="#E5E5E5">of notifications on new process and</font>

161
00:05:38,900 --> 00:05:42,530
thread creation<font color="#E5E5E5"> events that can be used</font>

162
00:05:40,910 --> 00:05:44,120
to sort of<font color="#E5E5E5"> analyze some</font><font color="#CCCCCC"> of this and then</font>

163
00:05:42,530 --> 00:05:46,250
you've got callbacks you can get the

164
00:05:44,120 --> 00:05:48,200
handle operations so<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> I'll</font>

165
00:05:46,250 --> 00:05:50,450
<font color="#E5E5E5">okay you know process a</font><font color="#CCCCCC"> opens a handle</font>

166
00:05:48,200 --> 00:05:51,740
to process B or open<font color="#CCCCCC"> the handle to a</font>

167
00:05:50,450 --> 00:05:53,780
certain thread and you can get some

168
00:05:51,740 --> 00:05:56,150
level of information<font color="#E5E5E5"> about what's going</font>

169
00:05:53,780 --> 00:05:57,440
<font color="#CCCCCC">on</font><font color="#E5E5E5"> by looking at those and also with the</font>

170
00:05:56,150 --> 00:06:00,169
event tracing framework<font color="#E5E5E5"> you see W</font>

171
00:05:57,440 --> 00:06:01,250
<font color="#CCCCCC">there's providers related to the kernel</font>

172
00:06:00,169 --> 00:06:03,380
<font color="#E5E5E5">that</font><font color="#CCCCCC"> give</font><font color="#E5E5E5"> you some information of</font>

173
00:06:01,250 --> 00:06:05,780
similar to this as well<font color="#E5E5E5"> so</font><font color="#CCCCCC"> information</font>

174
00:06:03,380 --> 00:06:07,340
from about<font color="#E5E5E5"> thread start events and you</font>

175
00:06:05,780 --> 00:06:08,929
<font color="#E5E5E5">know virtual</font><font color="#CCCCCC"> airlocks and</font><font color="#E5E5E5"> those kind of</font>

176
00:06:07,340 --> 00:06:10,729
things<font color="#CCCCCC"> so</font><font color="#E5E5E5"> they're your main sort of</font>

177
00:06:08,930 --> 00:06:12,650
<font color="#CCCCCC">routes would</font><font color="#E5E5E5"> get into laboratory related</font>

178
00:06:10,729 --> 00:06:16,310
to this traditionally when it comes to

179
00:06:12,650 --> 00:06:19,630
the tracing side so an example of<font color="#E5E5E5"> this</font>

180
00:06:16,310 --> 00:06:24,889
practically is<font color="#CCCCCC"> marcell system on</font><font color="#E5E5E5"> so</font>

181
00:06:19,630 --> 00:06:27,320
there are<font color="#E5E5E5"> examples there for some event</font>

182
00:06:24,889 --> 00:06:29,510
IDs that system um can generate that are

183
00:06:27,320 --> 00:06:30,680
related<font color="#E5E5E5"> to these areas</font><font color="#CCCCCC"> so as</font><font color="#E5E5E5"> a couple</font>

184
00:06:29,510 --> 00:06:33,080
examples there we've got<font color="#CCCCCC"> a process</font>

185
00:06:30,680 --> 00:06:36,050
access event and we've got a create a

186
00:06:33,080 --> 00:06:38,359
thread event<font color="#CCCCCC"> so if we thought</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that</font>

187
00:06:36,050 --> 00:06:40,210
classic example of<font color="#CCCCCC"> diello there</font>

188
00:06:38,360 --> 00:06:42,430
reflective DLL living from before

189
00:06:40,210 --> 00:06:44,590
then we would see events triggered<font color="#E5E5E5"> here</font>

190
00:06:42,430 --> 00:06:46,509
so we see our cave<font color="#E5E5E5"> press</font><font color="#CCCCCC"> essay access</font>

191
00:06:44,590 --> 00:06:48,130
process<font color="#E5E5E5"> B and then it used create</font><font color="#CCCCCC"> memory</font>

192
00:06:46,509 --> 00:06:49,900
<font color="#E5E5E5">thread and actually fired off a new</font>

193
00:06:48,130 --> 00:06:51,130
thread inside it and using that we<font color="#CCCCCC"> might</font>

194
00:06:49,900 --> 00:06:57,159
be<font color="#E5E5E5"> able to see some of these techniques</font>

195
00:06:51,130 --> 00:06:59,020
<font color="#CCCCCC">as they happen</font><font color="#E5E5E5"> real time</font><font color="#CCCCCC"> so a lot of</font>

196
00:06:57,160 --> 00:07:01,720
people<font color="#CCCCCC"> I think in this area</font><font color="#E5E5E5"> of generally</font>

197
00:06:59,020 --> 00:07:04,359
focused on finding quite specific sets

198
00:07:01,720 --> 00:07:06,580
of API<font color="#CCCCCC"> calls</font><font color="#E5E5E5"> how they are called and</font>

199
00:07:04,360 --> 00:07:08,169
with what options<font color="#E5E5E5"> as being methods for</font>

200
00:07:06,580 --> 00:07:10,330
actually detecting<font color="#E5E5E5"> this so they might</font>

201
00:07:08,169 --> 00:07:12,549
<font color="#E5E5E5">say okay well</font><font color="#CCCCCC"> I expect to see</font><font color="#E5E5E5"> virtual</font><font color="#CCCCCC"> a</font>

202
00:07:10,330 --> 00:07:13,810
lock called<font color="#CCCCCC"> I accept the expect the</font>

203
00:07:12,550 --> 00:07:16,330
permissions to<font color="#CCCCCC"> be read write execute</font>

204
00:07:13,810 --> 00:07:17,710
then write<font color="#CCCCCC"> process</font><font color="#E5E5E5"> memory then create</font>

205
00:07:16,330 --> 00:07:19,570
remote thread in the same region and

206
00:07:17,710 --> 00:07:22,448
making quite specific detection routines

207
00:07:19,570 --> 00:07:24,219
<font color="#CCCCCC">around that obviously with anything as</font>

208
00:07:22,449 --> 00:07:25,919
security it becomes you know<font color="#CCCCCC"> a bit of a</font>

209
00:07:24,220 --> 00:07:27,910
kind<font color="#CCCCCC"> of mouse game</font><font color="#E5E5E5"> an arms race and</font>

210
00:07:25,919 --> 00:07:29,770
<font color="#E5E5E5">people using these techniques are then</font>

211
00:07:27,910 --> 00:07:30,970
trying to<font color="#E5E5E5"> find ways of doing</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in</font>

212
00:07:29,770 --> 00:07:34,299
slightly different<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> that it doesn't</font>

213
00:07:30,970 --> 00:07:35,740
<font color="#CCCCCC">trigger a</font><font color="#E5E5E5"> detection mechanism</font><font color="#CCCCCC"> so from</font>

214
00:07:34,300 --> 00:07:37,419
<font color="#E5E5E5">that perspective in terms of like how</font>

215
00:07:35,740 --> 00:07:38,650
<font color="#CCCCCC">these</font><font color="#E5E5E5"> things have evolved I think it's</font>

216
00:07:37,419 --> 00:07:40,840
quite<font color="#CCCCCC"> good</font><font color="#E5E5E5"> to think of things</font><font color="#CCCCCC"> in terms</font>

217
00:07:38,650 --> 00:07:43,900
<font color="#E5E5E5">of</font><font color="#CCCCCC"> what are the</font><font color="#E5E5E5"> key primitives that you</font>

218
00:07:40,840 --> 00:07:47,289
<font color="#E5E5E5">you kind</font><font color="#CCCCCC"> of need to achieve to get the</font>

219
00:07:43,900 --> 00:07:49,120
end goal and<font color="#E5E5E5"> generally</font><font color="#CCCCCC"> speaking that's</font>

220
00:07:47,289 --> 00:07:50,469
<font color="#E5E5E5">either</font><font color="#CCCCCC"> you know first of</font><font color="#E5E5E5"> all you need</font><font color="#CCCCCC"> to</font>

221
00:07:49,120 --> 00:07:53,590
get some<font color="#E5E5E5"> sort of code into another</font>

222
00:07:50,470 --> 00:07:55,750
<font color="#E5E5E5">process and then you need to be able to</font>

223
00:07:53,590 --> 00:07:56,948
<font color="#E5E5E5">redirect the execution flow somehow and</font>

224
00:07:55,750 --> 00:07:58,090
so those previous techniques we've

225
00:07:56,949 --> 00:08:00,520
looked at they<font color="#CCCCCC"> achieved both of those</font>

226
00:07:58,090 --> 00:08:01,719
goals<font color="#E5E5E5"> but</font><font color="#CCCCCC"> the point is there's multiple</font>

227
00:08:00,520 --> 00:08:03,219
<font color="#CCCCCC">different ways that</font><font color="#E5E5E5"> those goals can be</font>

228
00:08:01,719 --> 00:08:05,349
achieved<font color="#E5E5E5"> and if you can find different</font>

229
00:08:03,219 --> 00:08:07,479
<font color="#CCCCCC">ways of stitching bits of code</font><font color="#E5E5E5"> together</font>

230
00:08:05,349 --> 00:08:09,250
<font color="#E5E5E5">that</font><font color="#CCCCCC"> that meets those correct</font><font color="#E5E5E5"> that</font>

231
00:08:07,479 --> 00:08:10,570
criteria then<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> probably do the</font>

232
00:08:09,250 --> 00:08:12,960
same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> and if someone's got a quite</font>

233
00:08:10,570 --> 00:08:15,159
<font color="#CCCCCC">a specific</font><font color="#E5E5E5"> detection mechanism in place</font>

234
00:08:12,960 --> 00:08:16,239
<font color="#E5E5E5">that relies on</font><font color="#CCCCCC"> the existing technique</font>

235
00:08:15,159 --> 00:08:17,650
and you've<font color="#CCCCCC"> just found another</font><font color="#E5E5E5"> way of</font>

236
00:08:16,240 --> 00:08:20,289
doing<font color="#E5E5E5"> it then you may be able to</font><font color="#CCCCCC"> bypass</font>

237
00:08:17,650 --> 00:08:21,549
their solutions so there's more examples

238
00:08:20,289 --> 00:08:23,440
than<font color="#CCCCCC"> this but on the slides you can see</font>

239
00:08:21,550 --> 00:08:25,449
you know some examples of writing<font color="#CCCCCC"> code</font>

240
00:08:23,440 --> 00:08:27,210
into another process<font color="#E5E5E5"> is obviously your</font>

241
00:08:25,449 --> 00:08:30,190
classic you<font color="#CCCCCC"> know write process</font><font color="#E5E5E5"> memory</font>

242
00:08:27,210 --> 00:08:32,708
<font color="#CCCCCC">being also map sections into another</font>

243
00:08:30,190 --> 00:08:34,208
process<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> sand bombing we'll</font>

244
00:08:32,708 --> 00:08:36,069
come to that later<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was another way</font>

245
00:08:34,208 --> 00:08:37,659
someone found of doing this in a quite

246
00:08:36,070 --> 00:08:40,899
<font color="#CCCCCC">interesting way you</font><font color="#E5E5E5"> can find</font>

247
00:08:37,659 --> 00:08:43,000
pre-existing shared sections in a target

248
00:08:40,899 --> 00:08:44,950
<font color="#CCCCCC">process and then map them yourself you</font>

249
00:08:43,000 --> 00:08:47,050
<font color="#CCCCCC">know there's multiple different</font><font color="#E5E5E5"> ways and</font>

250
00:08:44,950 --> 00:08:50,529
<font color="#CCCCCC">on the execution flow side</font><font color="#E5E5E5"> you've</font>

251
00:08:47,050 --> 00:08:52,990
generally got<font color="#E5E5E5"> sort of most of them are</font>

252
00:08:50,529 --> 00:08:54,270
the classic ones that<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> thread</font>

253
00:08:52,990 --> 00:08:56,220
manipulation methods

254
00:08:54,270 --> 00:08:59,130
<font color="#CCCCCC">create remote</font><font color="#E5E5E5"> thread as an example but</font>

255
00:08:56,220 --> 00:09:01,620
also<font color="#CCCCCC"> QA</font><font color="#E5E5E5"> pcs or using set thread</font><font color="#CCCCCC"> context</font>

256
00:08:59,130 --> 00:09:02,939
to change the<font color="#CCCCCC"> execution context of an</font>

257
00:09:01,620 --> 00:09:05,670
existing thread and in<font color="#E5E5E5"> those ways you</font>

258
00:09:02,940 --> 00:09:07,200
<font color="#E5E5E5">manipulate an existing thread of</font>

259
00:09:05,670 --> 00:09:08,880
execution<font color="#CCCCCC"> and you can you can achieve</font>

260
00:09:07,200 --> 00:09:10,890
<font color="#E5E5E5">that that way there's a couple of other</font>

261
00:09:08,880 --> 00:09:13,380
things<font color="#CCCCCC"> as the NC close trick we'll come</font>

262
00:09:10,890 --> 00:09:15,600
<font color="#E5E5E5">to that</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> as a few other things are</font>

263
00:09:13,380 --> 00:09:18,120
in set<font color="#E5E5E5"> windows long for example is a way</font>

264
00:09:15,600 --> 00:09:19,890
<font color="#CCCCCC">of manipulating</font><font color="#E5E5E5"> pointers in another</font>

265
00:09:18,120 --> 00:09:21,720
process and then<font color="#E5E5E5"> sending a message to</font>

266
00:09:19,890 --> 00:09:23,970
<font color="#E5E5E5">that</font><font color="#CCCCCC"> process that calls those because</font>

267
00:09:21,720 --> 00:09:25,589
<font color="#E5E5E5">these those</font><font color="#CCCCCC"> points has to be</font><font color="#E5E5E5"> called so</font>

268
00:09:23,970 --> 00:09:27,600
essentially the<font color="#E5E5E5"> point here is if you can</font>

269
00:09:25,589 --> 00:09:29,130
figure<font color="#E5E5E5"> out a way</font><font color="#CCCCCC"> of achieving both those</font>

270
00:09:27,600 --> 00:09:31,190
<font color="#E5E5E5">things then you might</font><font color="#CCCCCC"> find ways of</font>

271
00:09:29,130 --> 00:09:33,959
<font color="#E5E5E5">circumventing detection methods in place</font>

272
00:09:31,190 --> 00:09:35,310
<font color="#E5E5E5">so as an example of this one</font><font color="#CCCCCC"> of the</font>

273
00:09:33,959 --> 00:09:41,130
newer techniques<font color="#E5E5E5"> we've seen is that</font>

274
00:09:35,310 --> 00:09:42,569
embalming so the idea here is<font color="#E5E5E5"> you try</font>

275
00:09:41,130 --> 00:09:46,170
and make<font color="#CCCCCC"> it appear like there isn't</font>

276
00:09:42,570 --> 00:09:48,390
<font color="#CCCCCC">necessarily the traditional</font><font color="#E5E5E5"> writing</font>

277
00:09:46,170 --> 00:09:49,649
going<font color="#E5E5E5"> on to another process so you avoid</font>

278
00:09:48,390 --> 00:09:51,750
<font color="#E5E5E5">the ways that</font><font color="#CCCCCC"> people have normally been</font>

279
00:09:49,649 --> 00:09:54,779
instrument in this and you<font color="#CCCCCC"> just do the</font>

280
00:09:51,750 --> 00:09:57,180
execution flow<font color="#CCCCCC"> parts so the way this</font>

281
00:09:54,779 --> 00:09:58,589
works<font color="#CCCCCC"> is it makes use of</font><font color="#E5E5E5"> the atom table</font>

282
00:09:57,180 --> 00:10:00,089
which is<font color="#CCCCCC"> shared between processes</font><font color="#E5E5E5"> and</font>

283
00:09:58,589 --> 00:10:02,010
<font color="#CCCCCC">you're your sort of</font><font color="#E5E5E5"> first process that's</font>

284
00:10:00,089 --> 00:10:04,170
doing the injection<font color="#E5E5E5"> will actually put</font>

285
00:10:02,010 --> 00:10:08,100
data into<font color="#E5E5E5"> the atom table and then it</font>

286
00:10:04,170 --> 00:10:11,069
makes use of a<font color="#E5E5E5"> PCS to fire</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> PCS against</font>

287
00:10:08,100 --> 00:10:12,839
the other process and get<font color="#E5E5E5"> it to call the</font>

288
00:10:11,070 --> 00:10:15,510
<font color="#E5E5E5">function is required to</font><font color="#CCCCCC"> actually get the</font>

289
00:10:12,839 --> 00:10:17,760
atom and write it into<font color="#CCCCCC"> a pre-existing</font>

290
00:10:15,510 --> 00:10:21,180
bit of<font color="#E5E5E5"> memory that that's been located</font>

291
00:10:17,760 --> 00:10:22,110
<font color="#E5E5E5">in that process and then eventually so</font>

292
00:10:21,180 --> 00:10:24,569
essentially you get something<font color="#E5E5E5"> looks a</font>

293
00:10:22,110 --> 00:10:27,570
little bit like this you file a PC<font color="#E5E5E5"> that</font>

294
00:10:24,570 --> 00:10:29,040
function primitive is called<font color="#E5E5E5"> it gets the</font>

295
00:10:27,570 --> 00:10:31,770
value<font color="#E5E5E5"> of the atom it writes it</font><font color="#CCCCCC"> to a</font>

296
00:10:29,040 --> 00:10:34,649
<font color="#CCCCCC">pre-existing code</font><font color="#E5E5E5"> cave that caver that's</font>

297
00:10:31,770 --> 00:10:36,120
the time will not be executable yet<font color="#CCCCCC"> once</font>

298
00:10:34,649 --> 00:10:39,120
it's built up the shell code<font color="#E5E5E5"> in the</font>

299
00:10:36,120 --> 00:10:41,970
other process by using enough<font color="#E5E5E5"> APCs</font>

300
00:10:39,120 --> 00:10:44,520
it will then do one more APC that will

301
00:10:41,970 --> 00:10:48,149
execute<font color="#CCCCCC"> Rob chain so</font><font color="#E5E5E5"> return oriented</font>

302
00:10:44,520 --> 00:10:50,040
<font color="#E5E5E5">programming to basically reallocate a</font>

303
00:10:48,149 --> 00:10:52,470
new section<font color="#E5E5E5"> of memory locally with read</font>

304
00:10:50,040 --> 00:10:55,020
write execute permissions and copy that

305
00:10:52,470 --> 00:10:57,839
<font color="#E5E5E5">shell code to it and execute it</font><font color="#CCCCCC"> so then</font>

306
00:10:55,020 --> 00:10:59,550
it's principally using APCs and avoiding

307
00:10:57,839 --> 00:11:02,490
the sort of<font color="#E5E5E5"> write process memory method</font>

308
00:10:59,550 --> 00:11:03,660
or avoiding the you know mapping a

309
00:11:02,490 --> 00:11:05,040
section of<font color="#E5E5E5"> some of the other ways</font><font color="#CCCCCC"> that</font>

310
00:11:03,660 --> 00:11:06,270
<font color="#CCCCCC">people</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> generally analyzing it</font>

311
00:11:05,040 --> 00:11:07,530
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> still getting code into</font><font color="#CCCCCC"> the</font>

312
00:11:06,270 --> 00:11:09,930
other process

313
00:11:07,530 --> 00:11:11,730
achieving those primitives<font color="#E5E5E5"> this is</font>

314
00:11:09,930 --> 00:11:13,170
something<font color="#CCCCCC"> that was you know</font><font color="#E5E5E5"> has been</font>

315
00:11:11,730 --> 00:11:14,670
adopted<font color="#E5E5E5"> by</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> now with hammers I think</font>

316
00:11:13,170 --> 00:11:17,550
dry decks for example I think<font color="#E5E5E5"> started</font>

317
00:11:14,670 --> 00:11:18,630
making use of this at some<font color="#CCCCCC"> point there's</font>

318
00:11:17,550 --> 00:11:20,310
a really<font color="#CCCCCC"> really interesting technique I</font>

319
00:11:18,630 --> 00:11:23,400
think<font color="#CCCCCC"> it was maybe sometime</font><font color="#E5E5E5"> last</font><font color="#CCCCCC"> year</font>

320
00:11:20,310 --> 00:11:24,989
<font color="#E5E5E5">that it was published</font><font color="#CCCCCC"> but this is an</font>

321
00:11:23,400 --> 00:11:29,550
<font color="#E5E5E5">example of the</font><font color="#CCCCCC"> evolution of this this</font>

322
00:11:24,990 --> 00:11:31,440
kind of approach<font color="#E5E5E5"> so interestingly if</font><font color="#CCCCCC"> you</font>

323
00:11:29,550 --> 00:11:32,939
consider<font color="#CCCCCC"> as embalming with something</font>

324
00:11:31,440 --> 00:11:36,150
like sis<font color="#CCCCCC"> mum</font>

325
00:11:32,940 --> 00:11:37,650
you can still gain some<font color="#CCCCCC"> visibility of it</font>

326
00:11:36,150 --> 00:11:39,390
<font color="#E5E5E5">now</font><font color="#CCCCCC"> it might</font><font color="#E5E5E5"> not be that's necessarily</font>

327
00:11:37,650 --> 00:11:41,730
easy to<font color="#E5E5E5"> detect in practice but you can</font>

328
00:11:39,390 --> 00:11:44,550
see for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> sis mom gives you a</font>

329
00:11:41,730 --> 00:11:45,900
<font color="#E5E5E5">process access event if you</font><font color="#CCCCCC"> use the</font>

330
00:11:44,550 --> 00:11:50,609
proof-of-concept code that's available

331
00:11:45,900 --> 00:11:53,040
<font color="#E5E5E5">publicly so essentially the</font><font color="#CCCCCC"> per cons</font>

332
00:11:50,610 --> 00:11:54,300
<font color="#CCCCCC">Lycos still calls open process</font><font color="#E5E5E5"> such</font>

333
00:11:53,040 --> 00:11:56,099
you've<font color="#E5E5E5"> got that visibility now you don't</font>

334
00:11:54,300 --> 00:11:56,520
know necessarily<font color="#E5E5E5"> that other things have</font>

335
00:11:56,100 --> 00:11:58,170
happened

336
00:11:56,520 --> 00:11:59,699
there's no create remote thread<font color="#E5E5E5"> because</font>

337
00:11:58,170 --> 00:12:00,959
it's<font color="#E5E5E5"> using</font><font color="#CCCCCC"> APCs you</font><font color="#E5E5E5"> don't have that of</font>

338
00:11:59,700 --> 00:12:03,180
them you can at least<font color="#E5E5E5"> see those some</font>

339
00:12:00,960 --> 00:12:05,460
kind of interaction<font color="#CCCCCC"> between those two</font>

340
00:12:03,180 --> 00:12:06,750
<font color="#CCCCCC">processes and if in practice you're able</font>

341
00:12:05,460 --> 00:12:09,780
to<font color="#E5E5E5"> determine that's religious and that's</font>

342
00:12:06,750 --> 00:12:12,830
way of seeing it<font color="#CCCCCC"> but actually with this</font>

343
00:12:09,780 --> 00:12:15,780
technique<font color="#E5E5E5"> the</font><font color="#CCCCCC"> proof-of-concept code uses</font>

344
00:12:12,830 --> 00:12:17,910
open process to make<font color="#E5E5E5"> certain aspects of</font>

345
00:12:15,780 --> 00:12:20,730
<font color="#E5E5E5">it easier but</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> strictly required</font>

346
00:12:17,910 --> 00:12:23,040
<font color="#E5E5E5">really you can get away with just using</font>

347
00:12:20,730 --> 00:12:24,839
open thread and<font color="#CCCCCC"> opening handles to</font><font color="#E5E5E5"> the</font>

348
00:12:23,040 --> 00:12:26,930
threads in<font color="#E5E5E5"> the target process which is</font>

349
00:12:24,839 --> 00:12:30,060
required to<font color="#E5E5E5"> execute</font><font color="#CCCCCC"> a PCS against them</font>

350
00:12:26,930 --> 00:12:33,599
and then you can avoid generating<font color="#E5E5E5"> that</font>

351
00:12:30,060 --> 00:12:35,489
process access<font color="#E5E5E5"> event so it's actually</font>

352
00:12:33,600 --> 00:12:38,580
possible<font color="#CCCCCC"> to actually get around the</font>

353
00:12:35,490 --> 00:12:39,930
telemetry<font color="#CCCCCC"> of system on why</font><font color="#E5E5E5"> doing this so</font>

354
00:12:38,580 --> 00:12:41,700
if you see it's<font color="#E5E5E5"> pretty a little bit</font>

355
00:12:39,930 --> 00:12:43,290
difficult<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see in</font><font color="#E5E5E5"> this video but</font><font color="#CCCCCC"> I'm</font>

356
00:12:41,700 --> 00:12:45,180
popping<font color="#CCCCCC"> calc from</font><font color="#E5E5E5"> Chrome via the</font>

357
00:12:43,290 --> 00:12:47,219
original proof of concept code and you

358
00:12:45,180 --> 00:12:49,829
can<font color="#CCCCCC"> see a process</font><font color="#E5E5E5"> access event will have</font>

359
00:12:47,220 --> 00:12:52,370
been generated<font color="#CCCCCC"> if we take a slightly</font>

360
00:12:49,830 --> 00:12:54,780
<font color="#E5E5E5">modified approach we can still reliably</font>

361
00:12:52,370 --> 00:12:58,140
<font color="#E5E5E5">inject our code on popping up again</font>

362
00:12:54,780 --> 00:13:00,150
<font color="#CCCCCC">there</font><font color="#E5E5E5"> just as an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> if we look</font><font color="#CCCCCC"> then</font>

363
00:12:58,140 --> 00:13:01,530
we<font color="#E5E5E5"> there's no second process access</font>

364
00:13:00,150 --> 00:13:04,980
event so we can actually get around<font color="#E5E5E5"> the</font>

365
00:13:01,530 --> 00:13:06,660
telemetry by taking that approach<font color="#CCCCCC"> now</font>

366
00:13:04,980 --> 00:13:08,490
there are<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> callbacks for thread up</font>

367
00:13:06,660 --> 00:13:11,040
open thread events you can get callbacks

368
00:13:08,490 --> 00:13:12,240
for opening a handle to a thread<font color="#E5E5E5"> it's</font>

369
00:13:11,040 --> 00:13:13,579
not something with<font color="#CCCCCC"> present</font><font color="#E5E5E5"> since it's</font>

370
00:13:12,240 --> 00:13:16,110
<font color="#E5E5E5">more currently as far as I'm aware but</font>

371
00:13:13,580 --> 00:13:17,580
so there are at least technical ways

372
00:13:16,110 --> 00:13:20,480
that you could gain<font color="#CCCCCC"> some more visibility</font>

373
00:13:17,580 --> 00:13:22,339
here but

374
00:13:20,480 --> 00:13:25,940
essentially one<font color="#E5E5E5"> of the main issues is</font>

375
00:13:22,339 --> 00:13:27,589
that for the OS pre<font color="#E5E5E5"> Windows 10 really</font><font color="#CCCCCC"> a</font>

376
00:13:25,940 --> 00:13:30,550
lot of<font color="#E5E5E5"> these techniques it was just hard</font>

377
00:13:27,589 --> 00:13:32,779
to get the exact data you wanted without

378
00:13:30,550 --> 00:13:34,550
without hooking so if you think about

379
00:13:32,779 --> 00:13:36,589
<font color="#E5E5E5">getting a</font><font color="#CCCCCC"> callback on a</font><font color="#E5E5E5"> handle yes you</font>

380
00:13:34,550 --> 00:13:39,469
can see a handle was open to<font color="#E5E5E5"> another</font>

381
00:13:36,589 --> 00:13:40,970
process or another thread but then you

382
00:13:39,470 --> 00:13:42,800
<font color="#E5E5E5">happen to kind of infer what that might</font>

383
00:13:40,970 --> 00:13:43,820
mean<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> lots of reasons that that</font>

384
00:13:42,800 --> 00:13:46,939
could<font color="#E5E5E5"> be done legitimately</font>

385
00:13:43,820 --> 00:13:49,279
you can't necessarily see<font color="#CCCCCC"> that someone</font>

386
00:13:46,940 --> 00:13:50,870
used that<font color="#E5E5E5"> to</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> process memory or cue</font>

387
00:13:49,279 --> 00:13:52,670
<font color="#E5E5E5">at a PC or something like that</font><font color="#CCCCCC"> you can</font>

388
00:13:50,870 --> 00:13:54,410
maybe try<font color="#CCCCCC"> to infer from the</font><font color="#E5E5E5"> permissions</font>

389
00:13:52,670 --> 00:13:56,630
they requested<font color="#E5E5E5"> that they would have been</font>

390
00:13:54,410 --> 00:13:58,370
able to it to do it but then you know

391
00:13:56,630 --> 00:13:59,899
lots of<font color="#E5E5E5"> times you'll find that</font>

392
00:13:58,370 --> 00:14:02,060
legitimate things people<font color="#CCCCCC"> just do</font>

393
00:13:59,899 --> 00:14:04,220
<font color="#CCCCCC">protocol access or thread all access and</font>

394
00:14:02,060 --> 00:14:06,910
so the common scenario is<font color="#CCCCCC"> that when you</font>

395
00:14:04,220 --> 00:14:09,260
see it it would have<font color="#CCCCCC"> been permissible</font>

396
00:14:06,910 --> 00:14:11,000
<font color="#CCCCCC">but actually Windows 10 was also</font>

397
00:14:09,260 --> 00:14:11,990
<font color="#E5E5E5">introduced a lot more tracing mechanisms</font>

398
00:14:11,000 --> 00:14:14,060
<font color="#E5E5E5">for this sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> thing so if you</font>

399
00:14:11,990 --> 00:14:17,959
<font color="#CCCCCC">consider something like ants and</font><font color="#E5E5E5"> bombing</font>

400
00:14:14,060 --> 00:14:19,760
with<font color="#CCCCCC"> oxidative ATP now</font><font color="#E5E5E5"> on a Windows 10</font>

401
00:14:17,959 --> 00:14:21,018
machine you know there's<font color="#E5E5E5"> actually direct</font>

402
00:14:19,760 --> 00:14:23,959
detection through it and there's<font color="#E5E5E5"> blogs</font>

403
00:14:21,019 --> 00:14:25,130
from<font color="#E5E5E5"> you know out there</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this and</font>

404
00:14:23,959 --> 00:14:26,569
there's actually better<font color="#E5E5E5"> instrumentation</font>

405
00:14:25,130 --> 00:14:29,350
so you get<font color="#E5E5E5"> more direct visibility of</font>

406
00:14:26,569 --> 00:14:32,240
some of the<font color="#E5E5E5"> the calls related</font><font color="#CCCCCC"> to this</font>

407
00:14:29,350 --> 00:14:34,910
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> great but if we look at another</font>

408
00:14:32,240 --> 00:14:35,420
technique<font color="#CCCCCC"> another</font><font color="#E5E5E5"> one that came along</font>

409
00:14:34,910 --> 00:14:37,279
now

410
00:14:35,420 --> 00:14:39,130
I found this referred<font color="#CCCCCC"> to</font><font color="#E5E5E5"> as the</font><font color="#CCCCCC"> anti</font>

411
00:14:37,279 --> 00:14:45,350
<font color="#E5E5E5">close trick somewhere but I'm</font>

412
00:14:39,130 --> 00:14:48,740
essentially this<font color="#E5E5E5"> tries to avoid rather</font>

413
00:14:45,350 --> 00:14:50,750
than avoid the actual code writing

414
00:14:48,740 --> 00:14:52,490
process that<font color="#E5E5E5"> embalming is doing is</font>

415
00:14:50,750 --> 00:14:56,180
avoiding<font color="#CCCCCC"> doing the traditional execution</font>

416
00:14:52,490 --> 00:14:59,300
<font color="#E5E5E5">flow calls so it avoids any sort of</font>

417
00:14:56,180 --> 00:15:01,540
thread manipulation events so in this

418
00:14:59,300 --> 00:15:04,459
case<font color="#E5E5E5"> really</font><font color="#CCCCCC"> this is quite specific</font>

419
00:15:01,540 --> 00:15:06,050
<font color="#E5E5E5">implementation of a wider issue but the</font>

420
00:15:04,459 --> 00:15:07,670
idea<font color="#E5E5E5"> is that you hook something that's</font>

421
00:15:06,050 --> 00:15:10,069
going to be frequently<font color="#CCCCCC"> cooled</font><font color="#E5E5E5"> and so you</font>

422
00:15:07,670 --> 00:15:12,589
indirectly<font color="#E5E5E5"> gain control of a thread when</font>

423
00:15:10,069 --> 00:15:14,689
it next execute that code<font color="#E5E5E5"> rather than</font>

424
00:15:12,589 --> 00:15:16,430
using<font color="#E5E5E5"> create</font><font color="#CCCCCC"> a thread or cue a PC</font><font color="#E5E5E5"> or</font>

425
00:15:14,690 --> 00:15:18,649
changing an existing<font color="#E5E5E5"> thread so you avoid</font>

426
00:15:16,430 --> 00:15:21,800
that the<font color="#E5E5E5"> telemetry that someone might</font>

427
00:15:18,649 --> 00:15:24,709
have<font color="#E5E5E5"> for those functions and and hijack</font>

428
00:15:21,800 --> 00:15:26,449
the execution in a different way so<font color="#E5E5E5"> you</font>

429
00:15:24,709 --> 00:15:28,130
write your<font color="#CCCCCC"> code</font><font color="#E5E5E5"> somewhere then</font><font color="#CCCCCC"> NC</font><font color="#E5E5E5"> close</font>

430
00:15:26,449 --> 00:15:29,779
is just something that happens<font color="#CCCCCC"> to be</font>

431
00:15:28,130 --> 00:15:31,670
frequently called<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> just an</font>

432
00:15:29,779 --> 00:15:33,330
example<font color="#E5E5E5"> of something</font><font color="#CCCCCC"> you could</font><font color="#E5E5E5"> hook you</font>

433
00:15:31,670 --> 00:15:35,099
could<font color="#E5E5E5"> take anything really</font>

434
00:15:33,330 --> 00:15:37,740
see I<font color="#CCCCCC"> got your code here you put your</font>

435
00:15:35,100 --> 00:15:39,480
<font color="#E5E5E5">malicious code and</font><font color="#CCCCCC"> president then</font><font color="#E5E5E5"> you do</font>

436
00:15:37,740 --> 00:15:42,090
a standard<font color="#E5E5E5"> inline hook on NC</font><font color="#CCCCCC"> code so you</font>

437
00:15:39,480 --> 00:15:44,210
change the permissions<font color="#E5E5E5"> you</font><font color="#CCCCCC"> put</font><font color="#E5E5E5"> a jump in</font>

438
00:15:42,090 --> 00:15:47,970
there for<font color="#E5E5E5"> example jumps off to your code</font>

439
00:15:44,210 --> 00:15:49,050
<font color="#CCCCCC">then</font><font color="#E5E5E5"> at some point in the near future</font><font color="#CCCCCC"> an</font>

440
00:15:47,970 --> 00:15:51,000
existing<font color="#CCCCCC"> thread</font><font color="#E5E5E5"> is going to come along</font>

441
00:15:49,050 --> 00:15:53,069
<font color="#E5E5E5">try and call NC</font><font color="#CCCCCC"> close and then get</font>

442
00:15:51,000 --> 00:15:56,790
<font color="#CCCCCC">redirected off to</font><font color="#E5E5E5"> your code so</font><font color="#CCCCCC"> in that</font>

443
00:15:53,070 --> 00:15:59,580
way<font color="#CCCCCC"> you</font><font color="#E5E5E5"> gain your cross process code</font>

444
00:15:56,790 --> 00:16:00,959
execution<font color="#E5E5E5"> by avoiding the thread</font>

445
00:15:59,580 --> 00:16:02,610
manipulation functions<font color="#CCCCCC"> are just doing</font>

446
00:16:00,960 --> 00:16:05,190
the code<font color="#E5E5E5"> writing so if someone's relying</font>

447
00:16:02,610 --> 00:16:06,600
on generating alert<font color="#E5E5E5"> from seeing you know</font>

448
00:16:05,190 --> 00:16:09,390
one of those thread control things<font color="#E5E5E5"> like</font>

449
00:16:06,600 --> 00:16:12,690
seeing a<font color="#E5E5E5"> PCS getting queued up then</font>

450
00:16:09,390 --> 00:16:14,910
they're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> miss it</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font>

451
00:16:12,690 --> 00:16:19,290
<font color="#E5E5E5">I did I was</font><font color="#CCCCCC"> able to try this on a teepee</font>

452
00:16:14,910 --> 00:16:20,670
very recently this<font color="#CCCCCC"> there's a few</font>

453
00:16:19,290 --> 00:16:25,140
different alerts that<font color="#E5E5E5"> can come up in a</font>

454
00:16:20,670 --> 00:16:26,880
teepee related to code injection<font color="#E5E5E5"> this at</font>

455
00:16:25,140 --> 00:16:29,189
least<font color="#CCCCCC"> with the method I tested for doing</font>

456
00:16:26,880 --> 00:16:33,240
it did not generate an active alert on a

457
00:16:29,190 --> 00:16:35,550
<font color="#E5E5E5">teepee</font><font color="#CCCCCC"> but the first way I did it at</font>

458
00:16:33,240 --> 00:16:36,960
<font color="#CCCCCC">least generated some</font><font color="#E5E5E5"> telemetry so using</font>

459
00:16:35,550 --> 00:16:38,310
the advanced hunting interface you can

460
00:16:36,960 --> 00:16:40,580
see that there<font color="#E5E5E5"> was evidence</font><font color="#CCCCCC"> that</font>

461
00:16:38,310 --> 00:16:44,189
occurred so you get this<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font>

462
00:16:40,580 --> 00:16:46,410
allocating<font color="#CCCCCC"> a virtual memory call log</font>

463
00:16:44,190 --> 00:16:48,210
here so I was injecting into<font color="#E5E5E5"> notepad in</font>

464
00:16:46,410 --> 00:16:51,329
this case and I was able<font color="#E5E5E5"> to track</font><font color="#CCCCCC"> that</font>

465
00:16:48,210 --> 00:16:52,710
down<font color="#CCCCCC"> but</font><font color="#E5E5E5"> interestingly that seemed to be</font>

466
00:16:51,330 --> 00:16:55,550
<font color="#E5E5E5">related to the fact that I was</font>

467
00:16:52,710 --> 00:16:58,470
allocating memory<font color="#E5E5E5"> read/write/execute</font>

468
00:16:55,550 --> 00:17:00,449
<font color="#E5E5E5">when I did it where I allocated</font>

469
00:16:58,470 --> 00:17:02,100
<font color="#CCCCCC">readwrite first then changed the</font>

470
00:17:00,450 --> 00:17:04,680
permissions to read<font color="#E5E5E5"> execute afterwards</font>

471
00:17:02,100 --> 00:17:07,140
<font color="#E5E5E5">the telemetry for that seemed to go so I</font>

472
00:17:04,680 --> 00:17:09,510
<font color="#E5E5E5">wasn't aware of that before</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> that</font>

473
00:17:07,140 --> 00:17:11,400
meant that actually executing that way

474
00:17:09,510 --> 00:17:13,170
means there's then no telemetry to even

475
00:17:11,400 --> 00:17:15,630
look back on so this<font color="#E5E5E5"> is another sort of</font>

476
00:17:13,170 --> 00:17:17,280
example of<font color="#E5E5E5"> how you know changing the</font><font color="#CCCCCC"> way</font>

477
00:17:15,630 --> 00:17:19,830
we do use these<font color="#CCCCCC"> api is to achieve the</font>

478
00:17:17,280 --> 00:17:21,510
<font color="#E5E5E5">same can-can get around certain</font>

479
00:17:19,829 --> 00:17:26,579
different types of<font color="#E5E5E5"> login mechanisms for</font>

480
00:17:21,510 --> 00:17:29,850
<font color="#E5E5E5">this so I want to consider a different</font>

481
00:17:26,579 --> 00:17:31,199
<font color="#E5E5E5">angle now I've also see go over a bunch</font>

482
00:17:29,850 --> 00:17:34,050
of<font color="#E5E5E5"> different</font><font color="#CCCCCC"> topics fairly quickly there</font>

483
00:17:31,200 --> 00:17:36,900
but<font color="#E5E5E5"> I've been focusing on two key things</font>

484
00:17:34,050 --> 00:17:40,350
<font color="#E5E5E5">which is cross process access so we're</font>

485
00:17:36,900 --> 00:17:43,050
moving<font color="#CCCCCC"> code between processes</font><font color="#E5E5E5"> and I've</font>

486
00:17:40,350 --> 00:17:44,939
also been focusing on trace<font color="#CCCCCC"> an example</font>

487
00:17:43,050 --> 00:17:46,490
<font color="#CCCCCC">we'll say</font><font color="#E5E5E5"> from a from a real world</font>

488
00:17:44,940 --> 00:17:47,929
<font color="#E5E5E5">perspective here it's sort of</font>

489
00:17:46,490 --> 00:17:52,550
<font color="#E5E5E5">zooming okay someone's got some</font><font color="#CCCCCC"> awesome</font>

490
00:17:47,929 --> 00:17:53,690
<font color="#E5E5E5">EDR in place already</font><font color="#CCCCCC"> but there's a</font>

491
00:17:52,550 --> 00:17:54,860
couple<font color="#E5E5E5"> of other because the</font>

492
00:17:53,690 --> 00:17:56,929
considerations here one is<font color="#E5E5E5"> that</font>

493
00:17:54,860 --> 00:17:58,370
sometimes processes might load<font color="#E5E5E5"> this</font>

494
00:17:56,929 --> 00:18:00,260
<font color="#E5E5E5">within their</font><font color="#CCCCCC"> own process there may be no</font>

495
00:17:58,370 --> 00:18:03,020
cross process mechanism it's still an

496
00:18:00,260 --> 00:18:04,910
<font color="#E5E5E5">interesting thing to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to see if a</font>

497
00:18:03,020 --> 00:18:07,220
process starts strangely dynamically

498
00:18:04,910 --> 00:18:08,240
loading code<font color="#E5E5E5"> that's something you might</font>

499
00:18:07,220 --> 00:18:09,740
<font color="#E5E5E5">only be able to see and it's something</font>

500
00:18:08,240 --> 00:18:13,309
we commonly<font color="#E5E5E5"> see it attack frameworks do</font>

501
00:18:09,740 --> 00:18:14,750
as well<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> other aspect is just you</font>

502
00:18:13,309 --> 00:18:16,399
<font color="#E5E5E5">know what happens if someone gets</font>

503
00:18:14,750 --> 00:18:20,059
compromised<font color="#E5E5E5"> and they don't already</font><font color="#CCCCCC"> have</font>

504
00:18:16,400 --> 00:18:22,040
great<font color="#E5E5E5"> ADR in place which is a common</font>

505
00:18:20,059 --> 00:18:24,050
scenario for<font color="#CCCCCC"> us because we for our</font>

506
00:18:22,040 --> 00:18:26,300
<font color="#E5E5E5">clients that we we proactively protect</font>

507
00:18:24,050 --> 00:18:28,159
<font color="#CCCCCC">clients where we're providing</font><font color="#E5E5E5"> mortaring</font>

508
00:18:26,300 --> 00:18:29,600
24/7 but we also have<font color="#E5E5E5"> lots of people</font>

509
00:18:28,160 --> 00:18:33,110
<font color="#CCCCCC">that</font><font color="#E5E5E5"> come to us</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> had an incident</font>

510
00:18:29,600 --> 00:18:35,959
and so you know we need<font color="#E5E5E5"> help</font><font color="#CCCCCC"> and in many</font>

511
00:18:33,110 --> 00:18:37,820
<font color="#E5E5E5">cases they won't have any EDR so we need</font>

512
00:18:35,960 --> 00:18:40,730
to be able<font color="#E5E5E5"> to find pre-existing memory</font>

513
00:18:37,820 --> 00:18:42,110
resident implants<font color="#E5E5E5"> at that point so there</font>

514
00:18:40,730 --> 00:18:45,130
is a different way of looking<font color="#E5E5E5"> at this</font>

515
00:18:42,110 --> 00:18:50,809
and that's<font color="#CCCCCC"> that's important as well</font>

516
00:18:45,130 --> 00:18:52,850
so the key technique<font color="#CCCCCC"> on</font><font color="#E5E5E5"> can we normally</font>

517
00:18:50,809 --> 00:18:56,360
use<font color="#CCCCCC"> for this and consider is is memory</font>

518
00:18:52,850 --> 00:18:57,949
<font color="#CCCCCC">narses</font><font color="#E5E5E5"> or memory forensics</font><font color="#CCCCCC"> there's a few</font>

519
00:18:56,360 --> 00:19:00,729
<font color="#CCCCCC">advantages and disadvantages to this</font>

520
00:18:57,950 --> 00:19:02,870
<font color="#E5E5E5">before we go into detail</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it I mean</font>

521
00:19:00,730 --> 00:19:04,820
I've<font color="#E5E5E5"> obviously have</font><font color="#CCCCCC"> been a bit over one</font>

522
00:19:02,870 --> 00:19:08,239
already that the ability to find a

523
00:19:04,820 --> 00:19:09,379
<font color="#CCCCCC">pre-existing implant is great</font><font color="#E5E5E5"> so that's</font>

524
00:19:08,240 --> 00:19:12,380
<font color="#E5E5E5">something that's really beneficial for</font>

525
00:19:09,380 --> 00:19:14,120
<font color="#CCCCCC">this the other interesting part</font><font color="#E5E5E5"> of is</font>

526
00:19:12,380 --> 00:19:17,090
that we're essentially looking for the

527
00:19:14,120 --> 00:19:18,620
end<font color="#E5E5E5"> result so that gives us two</font>

528
00:19:17,090 --> 00:19:21,110
<font color="#CCCCCC">advantages one it</font><font color="#E5E5E5"> means it</font><font color="#CCCCCC"> doesn't</font>

529
00:19:18,620 --> 00:19:23,739
matter whether the code injection<font color="#E5E5E5"> was</font>

530
00:19:21,110 --> 00:19:25,580
done<font color="#E5E5E5"> cross process or within a process</font>

531
00:19:23,740 --> 00:19:27,559
because we're looking<font color="#E5E5E5"> at the end result</font>

532
00:19:25,580 --> 00:19:29,300
<font color="#E5E5E5">like it's going to look the same thing</font>

533
00:19:27,559 --> 00:19:31,790
and that<font color="#CCCCCC"> also</font><font color="#E5E5E5"> means it's immune to this</font>

534
00:19:29,300 --> 00:19:33,169
idea<font color="#CCCCCC"> of like</font><font color="#E5E5E5"> API evasion you know</font>

535
00:19:31,790 --> 00:19:34,520
because if<font color="#E5E5E5"> you think if we've got</font>

536
00:19:33,170 --> 00:19:37,100
process a<font color="#E5E5E5"> and we've got something and we</font>

537
00:19:34,520 --> 00:19:38,270
want<font color="#CCCCCC"> to put something compresses B with</font>

538
00:19:37,100 --> 00:19:40,760
the techniques we're<font color="#E5E5E5"> looking at before</font>

539
00:19:38,270 --> 00:19:42,020
<font color="#CCCCCC">we're finding clever different routes</font><font color="#E5E5E5"> to</font>

540
00:19:40,760 --> 00:19:45,080
<font color="#E5E5E5">get there</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the end</font><font color="#CCCCCC"> results was the</font>

541
00:19:42,020 --> 00:19:47,540
<font color="#CCCCCC">same so if you</font><font color="#E5E5E5"> take a memory</font><font color="#CCCCCC"> analysis</font>

542
00:19:45,080 --> 00:19:49,159
example<font color="#E5E5E5"> it</font><font color="#CCCCCC"> Those finding different</font><font color="#E5E5E5"> ways</font>

543
00:19:47,540 --> 00:19:50,690
<font color="#E5E5E5">of achieving the same end goal doesn't</font>

544
00:19:49,160 --> 00:19:53,570
matter<font color="#CCCCCC"> Wistia we still see the end</font>

545
00:19:50,690 --> 00:19:56,210
result<font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> an advantage to but</font>

546
00:19:53,570 --> 00:19:57,889
<font color="#E5E5E5">obviously the cons side like that's a</font>

547
00:19:56,210 --> 00:20:00,190
bit<font color="#CCCCCC"> different than one okay it's not</font>

548
00:19:57,890 --> 00:20:02,770
real time

549
00:20:00,190 --> 00:20:05,710
we won't<font color="#E5E5E5"> see short-lived things</font><font color="#CCCCCC"> it can</font>

550
00:20:02,770 --> 00:20:08,440
<font color="#E5E5E5">be quite performance intensive so that's</font>

551
00:20:05,710 --> 00:20:11,020
another consideration and<font color="#E5E5E5"> the other</font>

552
00:20:08,440 --> 00:20:12,730
aspect is we can't as easily<font color="#E5E5E5"> see the</font>

553
00:20:11,020 --> 00:20:15,010
source of something<font color="#E5E5E5"> so if we're talking</font>

554
00:20:12,730 --> 00:20:17,289
<font color="#E5E5E5">about across process example with Tracy</font>

555
00:20:15,010 --> 00:20:19,179
and<font color="#E5E5E5"> we can say oh this thing happened</font><font color="#CCCCCC"> to</font>

556
00:20:17,289 --> 00:20:21,760
process B and it was<font color="#CCCCCC"> this process a over</font>

557
00:20:19,179 --> 00:20:23,110
here that<font color="#CCCCCC"> did it</font><font color="#E5E5E5"> in whereas with memory</font>

558
00:20:21,760 --> 00:20:25,330
<font color="#CCCCCC">Nasus we'd be</font><font color="#E5E5E5"> saying oh there's</font>

559
00:20:23,110 --> 00:20:26,740
<font color="#CCCCCC">something weird</font><font color="#E5E5E5"> in in process B we need</font>

560
00:20:25,330 --> 00:20:28,960
<font color="#E5E5E5">to look at this but we don't necessarily</font>

561
00:20:26,740 --> 00:20:30,130
know without<font color="#E5E5E5"> further investigation what</font>

562
00:20:28,960 --> 00:20:33,820
was responsible<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> in the first</font>

563
00:20:30,130 --> 00:20:35,080
place<font color="#E5E5E5"> now a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> people that would be</font>

564
00:20:33,820 --> 00:20:36,639
thinking<font color="#CCCCCC"> of</font><font color="#E5E5E5"> memory forensics here we're</font>

565
00:20:35,080 --> 00:20:38,820
<font color="#E5E5E5">probably thinking</font><font color="#CCCCCC"> about volatility</font><font color="#E5E5E5"> which</font>

566
00:20:36,640 --> 00:20:41,230
is pretty<font color="#E5E5E5"> much the de facto standard</font>

567
00:20:38,820 --> 00:20:45,100
<font color="#E5E5E5">tool for performing memory forensics and</font>

568
00:20:41,230 --> 00:20:48,429
it's a brilliant<font color="#CCCCCC"> open source tool</font><font color="#E5E5E5"> the</font>

569
00:20:45,100 --> 00:20:50,320
problem with<font color="#CCCCCC"> it is is that</font><font color="#E5E5E5"> this is a</font>

570
00:20:48,429 --> 00:20:51,610
<font color="#E5E5E5">sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> single system</font><font color="#CCCCCC"> at a time thing</font>

571
00:20:50,320 --> 00:20:53,379
<font color="#E5E5E5">we've got to take a memory dump from a</font>

572
00:20:51,610 --> 00:20:55,750
system and analyze it offline which is

573
00:20:53,380 --> 00:20:57,010
great for<font color="#E5E5E5"> IR when we've got a system we</font>

574
00:20:55,750 --> 00:20:59,200
already<font color="#E5E5E5"> knows compromise it's not as</font>

575
00:20:57,010 --> 00:21:01,510
good when<font color="#E5E5E5"> we need to proactively search</font>

576
00:20:59,200 --> 00:21:03,340
<font color="#E5E5E5">across the whole state</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you can take</font>

577
00:21:01,510 --> 00:21:04,899
similar approaches to doing<font color="#E5E5E5"> this across</font>

578
00:21:03,340 --> 00:21:10,059
<font color="#E5E5E5">that scale</font><font color="#CCCCCC"> like something we</font><font color="#E5E5E5"> do we'll</font>

579
00:21:04,899 --> 00:21:15,850
look at go forwards so what are we

580
00:21:10,059 --> 00:21:16,960
looking<font color="#CCCCCC"> for here</font><font color="#E5E5E5"> essentially we're</font>

581
00:21:15,850 --> 00:21:19,620
looking for that as I said<font color="#CCCCCC"> before</font><font color="#E5E5E5"> we're</font>

582
00:21:16,960 --> 00:21:21,789
saying<font color="#E5E5E5"> we're looking for the end result</font>

583
00:21:19,620 --> 00:21:23,168
we're<font color="#E5E5E5"> looking for strange code living in</font>

584
00:21:21,789 --> 00:21:24,908
memory that<font color="#CCCCCC"> doesn't reflect what we</font>

585
00:21:23,169 --> 00:21:26,830
would normally<font color="#E5E5E5"> see for a native app</font>

586
00:21:24,909 --> 00:21:30,039
running<font color="#E5E5E5"> so for a normal native app</font>

587
00:21:26,830 --> 00:21:32,080
running<font color="#E5E5E5"> we would see mem image locations</font>

588
00:21:30,039 --> 00:21:34,570
we would see file backed sections

589
00:21:32,080 --> 00:21:38,529
linking back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the right executables or</font>

590
00:21:34,570 --> 00:21:39,939
dll's<font color="#E5E5E5"> that's and we'd have sections</font>

591
00:21:38,529 --> 00:21:40,990
fully loaded the<font color="#CCCCCC"> correct memory</font>

592
00:21:39,940 --> 00:21:45,700
permissions that<font color="#E5E5E5"> we would normally</font>

593
00:21:40,990 --> 00:21:47,169
<font color="#CCCCCC">expect and so forth</font><font color="#E5E5E5"> but if we see</font>

594
00:21:45,700 --> 00:21:49,240
something<font color="#E5E5E5"> like meterpreter is example</font>

595
00:21:47,169 --> 00:21:49,929
<font color="#CCCCCC">it'll read write execute</font><font color="#E5E5E5"> allocate the</font>

596
00:21:49,240 --> 00:21:51,940
whole thing

597
00:21:49,929 --> 00:21:53,950
there won't be proper sections there

598
00:21:51,940 --> 00:21:55,539
won't be<font color="#E5E5E5"> different memory permissions</font><font color="#CCCCCC"> it</font>

599
00:21:53,950 --> 00:21:56,799
will be privately allocated memory so we

600
00:21:55,539 --> 00:21:58,929
can enumerate different memory regions

601
00:21:56,799 --> 00:22:00,490
and look for those strange<font color="#CCCCCC"> things and</font>

602
00:21:58,929 --> 00:22:03,039
<font color="#E5E5E5">that's a common sort of generic approach</font>

603
00:22:00,490 --> 00:22:04,630
for looking for<font color="#CCCCCC"> this</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can see the</font>

604
00:22:03,039 --> 00:22:06,940
meta / - example there I mean I don't

605
00:22:04,630 --> 00:22:11,009
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> focus only on public tools</font>

606
00:22:06,940 --> 00:22:13,289
though so<font color="#E5E5E5"> if we consider</font><font color="#CCCCCC"> another example</font>

607
00:22:11,009 --> 00:22:16,559
one of the things we did is we did quite

608
00:22:13,289 --> 00:22:21,690
<font color="#E5E5E5">a look into into the double pulsar stuff</font>

609
00:22:16,559 --> 00:22:23,369
that came out last<font color="#E5E5E5"> year</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> this this</font>

610
00:22:21,690 --> 00:22:25,470
was a<font color="#CCCCCC"> kernel-mode payload that was used</font>

611
00:22:23,369 --> 00:22:27,570
to inject<font color="#E5E5E5"> dll's into</font><font color="#CCCCCC"> user-mode processes</font>

612
00:22:25,470 --> 00:22:29,639
now the<font color="#E5E5E5"> kernel aspects of it for the</font>

613
00:22:27,570 --> 00:22:31,799
techniques we were using<font color="#E5E5E5"> ourselves</font>

614
00:22:29,639 --> 00:22:33,600
currently we wouldn't have seen and was

615
00:22:31,799 --> 00:22:35,460
a very advanced<font color="#E5E5E5"> payload but the end</font>

616
00:22:33,600 --> 00:22:37,678
result was<font color="#CCCCCC"> that it would effectively</font>

617
00:22:35,460 --> 00:22:39,749
allocate a<font color="#E5E5E5"> dll into another user mode</font>

618
00:22:37,679 --> 00:22:44,220
process and the same kind<font color="#CCCCCC"> of approaches</font>

619
00:22:39,749 --> 00:22:45,359
then worked for<font color="#CCCCCC"> us there so it's like it</font>

620
00:22:44,220 --> 00:22:46,799
looks<font color="#CCCCCC"> slightly different</font><font color="#E5E5E5"> to them the</font>

621
00:22:45,359 --> 00:22:50,570
meterpreter example it's actually

622
00:22:46,799 --> 00:22:52,350
properly allocated<font color="#CCCCCC"> to sections</font><font color="#E5E5E5"> but</font>

623
00:22:50,570 --> 00:22:54,149
effectively<font color="#E5E5E5"> we still got something</font>

624
00:22:52,350 --> 00:22:56,969
that's in a privately allocated region

625
00:22:54,149 --> 00:22:58,529
and stands out as<font color="#CCCCCC"> being something that</font>

626
00:22:56,970 --> 00:23:00,509
shouldn't be<font color="#CCCCCC"> there so we</font><font color="#E5E5E5"> can still find</font>

627
00:22:58,529 --> 00:23:05,190
the end result with that<font color="#E5E5E5"> being used with</font>

628
00:23:00,509 --> 00:23:07,049
these kinds<font color="#CCCCCC"> of techniques so</font><font color="#E5E5E5"> there's a</font>

629
00:23:05,190 --> 00:23:08,460
kind of quick example this is<font color="#CCCCCC"> something</font>

630
00:23:07,049 --> 00:23:09,600
<font color="#CCCCCC">from</font><font color="#E5E5E5"> one of our systems of looking at</font>

631
00:23:08,460 --> 00:23:11,549
this when we've got<font color="#E5E5E5"> these techniques</font>

632
00:23:09,600 --> 00:23:13,769
sort of running<font color="#CCCCCC"> across scale this</font><font color="#E5E5E5"> was I</font>

633
00:23:11,549 --> 00:23:15,330
<font color="#E5E5E5">think something on on our network</font>

634
00:23:13,769 --> 00:23:18,480
<font color="#E5E5E5">testing out with</font><font color="#CCCCCC"> meterpreter</font><font color="#E5E5E5"> we end up</font>

635
00:23:15,330 --> 00:23:21,658
finding evidence of<font color="#E5E5E5"> this where we can</font>

636
00:23:18,480 --> 00:23:24,210
see<font color="#E5E5E5"> and what looks like a reflective</font>

637
00:23:21,659 --> 00:23:26,220
load that's occurred on a system<font color="#CCCCCC"> we can</font>

638
00:23:24,210 --> 00:23:29,070
<font color="#E5E5E5">see that this has</font><font color="#CCCCCC"> occurred only</font><font color="#E5E5E5"> on one</font>

639
00:23:26,220 --> 00:23:31,129
<font color="#E5E5E5">system this was the result of I think a</font>

640
00:23:29,070 --> 00:23:33,450
meterpreter session that generated a

641
00:23:31,129 --> 00:23:35,998
randomly named executable<font color="#E5E5E5"> and then has</font>

642
00:23:33,450 --> 00:23:37,440
loaded the<font color="#CCCCCC"> DLL within that and</font><font color="#E5E5E5"> we can</font>

643
00:23:35,999 --> 00:23:39,330
<font color="#E5E5E5">see the permissions associated</font><font color="#CCCCCC"> with it</font>

644
00:23:37,440 --> 00:23:40,889
the process<font color="#E5E5E5"> and so forth and this then</font>

645
00:23:39,330 --> 00:23:42,480
stands out as<font color="#CCCCCC"> being something that's of</font>

646
00:23:40,889 --> 00:23:44,248
interest<font color="#E5E5E5"> and following up and at this</font>

647
00:23:42,480 --> 00:23:48,480
<font color="#E5E5E5">point we</font><font color="#CCCCCC"> will see gonna get up a real</font>

648
00:23:44,249 --> 00:23:51,259
process dump and analyze it further<font color="#CCCCCC"> so</font>

649
00:23:48,480 --> 00:23:54,929
that that<font color="#CCCCCC"> aspect is is is looking for</font>

650
00:23:51,259 --> 00:23:56,669
evidence of code<font color="#E5E5E5"> that's one one aspect</font>

651
00:23:54,929 --> 00:23:59,220
<font color="#E5E5E5">of this another one we</font><font color="#CCCCCC"> can look</font><font color="#E5E5E5"> at is</font>

652
00:23:56,669 --> 00:24:03,840
look<font color="#E5E5E5"> at threads and say well you know a</font>

653
00:23:59,220 --> 00:24:05,940
code needs threads to run<font color="#E5E5E5"> so we can have</font>

654
00:24:03,840 --> 00:24:07,499
a<font color="#E5E5E5"> look at you know are there any threads</font>

655
00:24:05,940 --> 00:24:09,509
<font color="#E5E5E5">are</font><font color="#CCCCCC"> that executing</font><font color="#E5E5E5"> code in strange</font>

656
00:24:07,499 --> 00:24:11,460
locations<font color="#CCCCCC"> too so this is</font><font color="#E5E5E5"> something we've</font>

657
00:24:09,509 --> 00:24:14,340
done for a while<font color="#CCCCCC"> there's also there's</font>

658
00:24:11,460 --> 00:24:16,309
<font color="#E5E5E5">also an</font><font color="#CCCCCC"> open-source PowerShell scripts</font>

659
00:24:14,340 --> 00:24:18,689
out there for testing<font color="#E5E5E5"> this out</font><font color="#CCCCCC"> to</font>

660
00:24:16,309 --> 00:24:20,639
<font color="#CCCCCC">essentially you know if we considered</font>

661
00:24:18,690 --> 00:24:22,050
that original classic<font color="#E5E5E5"> DLL</font><font color="#CCCCCC"> injection</font>

662
00:24:20,639 --> 00:24:23,969
technique<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> begin</font>

663
00:24:22,050 --> 00:24:25,830
we've got one<font color="#E5E5E5"> thread</font><font color="#CCCCCC"> of execution</font>

664
00:24:23,970 --> 00:24:27,900
dedicated to<font color="#E5E5E5"> running our malicious code</font>

665
00:24:25,830 --> 00:24:29,790
<font color="#E5E5E5">and that</font><font color="#CCCCCC"> is running a strange air</font><font color="#E5E5E5"> of</font>

666
00:24:27,900 --> 00:24:31,260
memory so if we look<font color="#E5E5E5"> at the start</font>

667
00:24:29,790 --> 00:24:32,909
addresses of all<font color="#E5E5E5"> the threads in a</font>

668
00:24:31,260 --> 00:24:34,110
process and we correlate that with

669
00:24:32,910 --> 00:24:35,850
<font color="#E5E5E5">everything else we know about the memory</font>

670
00:24:34,110 --> 00:24:39,240
<font color="#CCCCCC">space we can find things that look</font>

671
00:24:35,850 --> 00:24:40,439
strange so in this case you know this

672
00:24:39,240 --> 00:24:42,090
was being run in<font color="#E5E5E5"> the same kind</font><font color="#CCCCCC"> of</font>

673
00:24:40,440 --> 00:24:44,490
example we've injected into notepad<font color="#E5E5E5"> and</font>

674
00:24:42,090 --> 00:24:46,860
this<font color="#E5E5E5"> scriptures identified that there is</font>

675
00:24:44,490 --> 00:24:48,420
a strange thread there<font color="#E5E5E5"> that's another</font>

676
00:24:46,860 --> 00:24:50,580
<font color="#E5E5E5">approach we can take</font><font color="#CCCCCC"> to this which is</font>

677
00:24:48,420 --> 00:24:52,830
pretty<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> and those techniques</font>

678
00:24:50,580 --> 00:24:54,720
those two techniques alone have been

679
00:24:52,830 --> 00:24:56,460
really<font color="#E5E5E5"> useful for us</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> practice in</font>

680
00:24:54,720 --> 00:24:59,190
finding<font color="#E5E5E5"> real-world compromises</font><font color="#CCCCCC"> so they</font>

681
00:24:56,460 --> 00:25:10,380
they are pretty pretty useful as a

682
00:24:59,190 --> 00:25:12,570
different angle<font color="#CCCCCC"> so it's not just</font>

683
00:25:10,380 --> 00:25:15,000
offensive<font color="#E5E5E5"> tool sets that that use these</font>

684
00:25:12,570 --> 00:25:16,409
there<font color="#CCCCCC"> are a couple of I'm just gonna</font>

685
00:25:15,000 --> 00:25:17,990
give a<font color="#E5E5E5"> couple of examples</font><font color="#CCCCCC"> to show that</font>

686
00:25:16,410 --> 00:25:21,420
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> that's that's actually</font>

687
00:25:17,990 --> 00:25:23,670
<font color="#CCCCCC">affecting real world real world</font>

688
00:25:21,420 --> 00:25:26,640
organizations I mean for<font color="#E5E5E5"> start</font><font color="#CCCCCC"> ok the</font>

689
00:25:23,670 --> 00:25:28,950
the<font color="#CCCCCC"> double pulsar</font><font color="#E5E5E5"> issue was obviously</font>

690
00:25:26,640 --> 00:25:31,260
<font color="#E5E5E5">being used by groups long before before</font>

691
00:25:28,950 --> 00:25:34,890
<font color="#E5E5E5">it was made public but then that got</font>

692
00:25:31,260 --> 00:25:36,570
turned<font color="#E5E5E5"> into one a cry so one a</font>

693
00:25:34,890 --> 00:25:38,310
collectively you<font color="#E5E5E5"> really used the eternal</font>

694
00:25:36,570 --> 00:25:40,200
blue exploit which made use of the

695
00:25:38,310 --> 00:25:44,280
double<font color="#CCCCCC"> pulsar implant</font><font color="#E5E5E5"> and used it</font><font color="#CCCCCC"> to</font>

696
00:25:40,200 --> 00:25:45,390
deliver ransom<font color="#CCCCCC"> ransomware it bypassed a</font>

697
00:25:44,280 --> 00:25:47,250
lot of different ransomware

698
00:25:45,390 --> 00:25:50,010
protection mechanisms that<font color="#E5E5E5"> people had</font><font color="#CCCCCC"> in</font>

699
00:25:47,250 --> 00:25:51,540
<font color="#CCCCCC">place or</font><font color="#E5E5E5"> products and so forth</font><font color="#CCCCCC"> and it's</font>

700
00:25:50,010 --> 00:25:53,430
something<font color="#E5E5E5"> that we actually</font><font color="#CCCCCC"> sought we had</font>

701
00:25:51,540 --> 00:25:56,940
customers<font color="#CCCCCC"> that were affected by this and</font>

702
00:25:53,430 --> 00:25:59,280
these techniques<font color="#E5E5E5"> then sort of were able</font>

703
00:25:56,940 --> 00:26:02,070
to show<font color="#E5E5E5"> that one</font><font color="#CCCCCC"> of cry had been</font>

704
00:25:59,280 --> 00:26:04,170
infecting certain networks<font color="#CCCCCC"> so that's one</font>

705
00:26:02,070 --> 00:26:06,840
example<font color="#E5E5E5"> from a sort of malware outbreak</font>

706
00:26:04,170 --> 00:26:08,280
scenario<font color="#CCCCCC"> but we've also</font><font color="#E5E5E5"> seen it in more</font>

707
00:26:06,840 --> 00:26:10,199
sort of<font color="#E5E5E5"> targeted attacks we've we've</font>

708
00:26:08,280 --> 00:26:12,480
seen actual<font color="#E5E5E5"> real-world attackers</font>

709
00:26:10,200 --> 00:26:15,050
<font color="#E5E5E5">interestingly enough using</font><font color="#CCCCCC"> Metasploit</font>

710
00:26:12,480 --> 00:26:17,430
before we've seen in energy sector

711
00:26:15,050 --> 00:26:19,710
<font color="#CCCCCC">example of things like</font><font color="#E5E5E5"> targeted IP theft</font>

712
00:26:17,430 --> 00:26:21,270
<font color="#E5E5E5">and the way we were able to pick out as</font>

713
00:26:19,710 --> 00:26:22,610
using these exact techniques deployments

714
00:26:21,270 --> 00:26:26,280
they already<font color="#E5E5E5"> compromised the network</font>

715
00:26:22,610 --> 00:26:27,830
<font color="#E5E5E5">discovering meterpreter implants in</font>

716
00:26:26,280 --> 00:26:30,090
different processes<font color="#CCCCCC"> in memory already</font>

717
00:26:27,830 --> 00:26:32,550
and finally of that way we've also seen

718
00:26:30,090 --> 00:26:34,059
things<font color="#E5E5E5"> like that earlier is a very</font>

719
00:26:32,550 --> 00:26:36,710
advanced

720
00:26:34,059 --> 00:26:39,289
sort of malware framework<font color="#CCCCCC"> it's got a</font>

721
00:26:36,710 --> 00:26:41,179
very advanced kernel rootkit but that is

722
00:26:39,289 --> 00:26:43,940
then similar to double<font color="#CCCCCC"> pulse are also</font>

723
00:26:41,179 --> 00:26:46,490
often<font color="#E5E5E5"> used as a staging mechanism to put</font>

724
00:26:43,940 --> 00:26:48,110
things<font color="#E5E5E5"> into user land so you know we've</font>

725
00:26:46,490 --> 00:26:49,700
gone into<font color="#CCCCCC"> real-world targeted attack</font>

726
00:26:48,110 --> 00:26:52,100
scenarios<font color="#E5E5E5"> there where we've then seen</font>

727
00:26:49,700 --> 00:26:53,779
evidence<font color="#E5E5E5"> of the DLL is injected into key</font>

728
00:26:52,100 --> 00:26:55,789
<font color="#CCCCCC">Windows services and so forth using</font><font color="#E5E5E5"> the</font>

729
00:26:53,779 --> 00:26:57,440
same techniques so these are<font color="#E5E5E5"> things that</font>

730
00:26:55,789 --> 00:27:00,679
real-world<font color="#E5E5E5"> attackers are using it's not</font>

731
00:26:57,440 --> 00:27:01,789
just pen testers and red teamers<font color="#E5E5E5"> it's</font>

732
00:27:00,679 --> 00:27:03,799
something we<font color="#E5E5E5"> see all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> time and these</font>

733
00:27:01,789 --> 00:27:07,820
techniques<font color="#E5E5E5"> have been very useful</font><font color="#CCCCCC"> to us</font>

734
00:27:03,799 --> 00:27:10,970
<font color="#E5E5E5">in the past but obviously with anything</font>

735
00:27:07,820 --> 00:27:12,830
on these lines like attackers<font color="#CCCCCC"> responding</font>

736
00:27:10,970 --> 00:27:14,059
right and as there's been more

737
00:27:12,830 --> 00:27:16,340
information about<font color="#E5E5E5"> this kind</font><font color="#CCCCCC"> of going</font>

738
00:27:14,059 --> 00:27:18,110
into<font color="#E5E5E5"> the public domain and some of these</font>

739
00:27:16,340 --> 00:27:21,830
sort of techniques<font color="#E5E5E5"> have been discussed</font>

740
00:27:18,110 --> 00:27:23,809
more<font color="#E5E5E5"> we started seeing a response from</font>

741
00:27:21,830 --> 00:27:25,668
the security community<font color="#CCCCCC"> on this so you</font>

742
00:27:23,809 --> 00:27:27,710
<font color="#E5E5E5">can just see a few</font><font color="#CCCCCC"> examples here</font><font color="#E5E5E5"> like I</font>

743
00:27:25,669 --> 00:27:29,029
mean there's blog posts<font color="#CCCCCC"> about evading</font>

744
00:27:27,710 --> 00:27:33,409
the the PowerShell script I showed you

745
00:27:29,029 --> 00:27:35,240
before<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> sort of things like</font>

746
00:27:33,409 --> 00:27:37,490
<font color="#CCCCCC">cobots strike which is a offensive tool</font>

747
00:27:35,240 --> 00:27:38,929
<font color="#E5E5E5">set they've got options for sort of</font>

748
00:27:37,490 --> 00:27:40,490
obsolete in parts of what they're<font color="#CCCCCC"> doing</font>

749
00:27:38,929 --> 00:27:42,409
in memory to make it more<font color="#E5E5E5"> difficult to</font>

750
00:27:40,490 --> 00:27:45,320
pick up<font color="#E5E5E5"> evidence of this</font><font color="#CCCCCC"> with these</font>

751
00:27:42,409 --> 00:27:47,269
techniques and we've then got techniques

752
00:27:45,320 --> 00:27:49,158
like<font color="#E5E5E5"> gargle which is a is a dedicated</font>

753
00:27:47,269 --> 00:27:50,480
technique for<font color="#E5E5E5"> evading memory</font><font color="#CCCCCC"> naseous</font>

754
00:27:49,159 --> 00:27:53,630
<font color="#E5E5E5">we'll look at that in</font><font color="#CCCCCC"> a little bit more</font>

755
00:27:50,480 --> 00:27:57,380
<font color="#E5E5E5">that he's on a sec actually</font><font color="#CCCCCC"> ln red</font>

756
00:27:53,630 --> 00:27:59,059
teamers<font color="#CCCCCC"> MWR of</font><font color="#E5E5E5"> blogged in the past for</font>

757
00:27:57,380 --> 00:28:02,000
example about integrating techniques

758
00:27:59,059 --> 00:28:04,220
like<font color="#CCCCCC"> Gago into into offensive frameworks</font>

759
00:28:02,000 --> 00:28:06,710
like<font color="#CCCCCC"> double strike so there's you know a</font>

760
00:28:04,220 --> 00:28:10,610
<font color="#E5E5E5">lot of stuff</font><font color="#CCCCCC"> that's moving here in</font><font color="#E5E5E5"> terms</font>

761
00:28:06,710 --> 00:28:15,409
of actually making these these these

762
00:28:10,610 --> 00:28:17,750
<font color="#E5E5E5">methods harder to</font><font color="#CCCCCC"> use so what</font><font color="#E5E5E5"> are the</font>

763
00:28:15,409 --> 00:28:20,240
common<font color="#CCCCCC"> buy cost approaches here so</font><font color="#E5E5E5"> I</font>

764
00:28:17,750 --> 00:28:21,889
think you know there's a lot<font color="#E5E5E5"> of ways</font><font color="#CCCCCC"> you</font>

765
00:28:20,240 --> 00:28:25,399
could<font color="#E5E5E5"> approach this as an attacker</font><font color="#CCCCCC"> I</font>

766
00:28:21,889 --> 00:28:27,439
would say broadly<font color="#CCCCCC"> speaking it's three</font>

767
00:28:25,399 --> 00:28:31,010
categories<font color="#E5E5E5"> that I've seen most commonly</font>

768
00:28:27,440 --> 00:28:32,929
one is observation<font color="#E5E5E5"> so we can look for</font>

769
00:28:31,010 --> 00:28:34,309
anything<font color="#E5E5E5"> that looks like code but</font>

770
00:28:32,929 --> 00:28:37,010
actually you'll find<font color="#CCCCCC"> in the real</font><font color="#E5E5E5"> world</font>

771
00:28:34,309 --> 00:28:38,570
<font color="#E5E5E5">that's pretty difficult in terms of the</font>

772
00:28:37,010 --> 00:28:40,389
noise<font color="#CCCCCC"> threshold there's actually quite</font><font color="#E5E5E5"> a</font>

773
00:28:38,570 --> 00:28:42,529
lot<font color="#CCCCCC"> of examples</font><font color="#E5E5E5"> of things that are</font>

774
00:28:40,389 --> 00:28:44,479
executable but don't necessarily line up

775
00:28:42,529 --> 00:28:46,220
<font color="#E5E5E5">with what you might expect when you look</font>

776
00:28:44,480 --> 00:28:47,929
at a process<font color="#E5E5E5"> that fall outside of the</font>

777
00:28:46,220 --> 00:28:50,330
<font color="#E5E5E5">normal image locations in</font>

778
00:28:47,929 --> 00:28:52,519
<font color="#E5E5E5">particular things like anything that's</font>

779
00:28:50,330 --> 00:28:54,619
just<font color="#CCCCCC"> in time compiles</font><font color="#E5E5E5"> so in browsers we</font>

780
00:28:52,519 --> 00:28:56,049
like JavaScript engines or<font color="#CCCCCC"> now</font><font color="#E5E5E5"> or Java</font>

781
00:28:54,619 --> 00:29:00,110
<font color="#E5E5E5">you know all these sorts of things are</font>

782
00:28:56,049 --> 00:29:02,119
dynamically creating and got<font color="#E5E5E5"> one</font>

783
00:29:00,110 --> 00:29:04,279
<font color="#E5E5E5">compiled native code in the process so</font>

784
00:29:02,119 --> 00:29:08,240
that that<font color="#E5E5E5"> can provide challenges but if</font>

785
00:29:04,279 --> 00:29:09,470
someone is wanting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make use of sort</font>

786
00:29:08,240 --> 00:29:11,749
<font color="#E5E5E5">of</font><font color="#CCCCCC"> fully-featured</font><font color="#E5E5E5"> implants they'll</font>

787
00:29:09,470 --> 00:29:13,399
probably have written them<font color="#E5E5E5"> in a</font>

788
00:29:11,749 --> 00:29:15,320
<font color="#E5E5E5">high-level language like C or something</font>

789
00:29:13,399 --> 00:29:16,369
<font color="#E5E5E5">can compile them to a</font><font color="#CCCCCC"> DLL so you can be</font>

790
00:29:15,320 --> 00:29:18,860
a<font color="#E5E5E5"> little bit better when you actually</font>

791
00:29:16,369 --> 00:29:20,959
start<font color="#CCCCCC"> looking for evidence of</font><font color="#E5E5E5"> full dll's</font>

792
00:29:18,860 --> 00:29:24,110
so some of<font color="#CCCCCC"> the approaches are to</font>

793
00:29:20,960 --> 00:29:26,929
obstacle to identify that something is

794
00:29:24,110 --> 00:29:29,149
actually<font color="#E5E5E5"> a</font><font color="#CCCCCC"> dll and making it more</font>

795
00:29:26,929 --> 00:29:32,360
difficult<font color="#E5E5E5"> that way that can</font><font color="#CCCCCC"> be simple</font>

796
00:29:29,149 --> 00:29:34,309
things<font color="#CCCCCC"> like wiping the headers or it can</font>

797
00:29:32,360 --> 00:29:35,990
<font color="#E5E5E5">be you know more advanced things of may</font>

798
00:29:34,309 --> 00:29:39,499
obfuscate in other parts of the

799
00:29:35,990 --> 00:29:40,759
<font color="#E5E5E5">executable code itself</font><font color="#CCCCCC"> the other thing</font>

800
00:29:39,499 --> 00:29:43,519
is why<font color="#CCCCCC"> I</font><font color="#E5E5E5"> say is probably</font><font color="#CCCCCC"> hide in plain</font>

801
00:29:40,759 --> 00:29:46,009
sight<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> its start for things like</font>

802
00:29:43,519 --> 00:29:47,749
threads<font color="#CCCCCC"> you know if you</font><font color="#E5E5E5"> avoid actually</font>

803
00:29:46,009 --> 00:29:50,570
starting threads in men private regions

804
00:29:47,749 --> 00:29:52,700
you<font color="#E5E5E5"> try and</font><font color="#CCCCCC"> focus on making</font><font color="#E5E5E5"> use of</font>

805
00:29:50,570 --> 00:29:54,379
<font color="#E5E5E5">pre-existing threads and reroute in them</font>

806
00:29:52,700 --> 00:29:56,659
<font color="#E5E5E5">it becomes harder</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> that that's</font>

807
00:29:54,379 --> 00:29:58,158
happened<font color="#E5E5E5"> other than correlating where</font>

808
00:29:56,659 --> 00:29:59,179
they started<font color="#E5E5E5"> and when you look at where</font>

809
00:29:58,159 --> 00:30:01,129
they started they<font color="#CCCCCC"> started from their</font>

810
00:29:59,179 --> 00:30:04,309
<font color="#E5E5E5">distant locations in the first place so</font>

811
00:30:01,129 --> 00:30:05,418
<font color="#E5E5E5">that's one</font><font color="#CCCCCC"> approach people</font><font color="#E5E5E5"> take the</font>

812
00:30:04,309 --> 00:30:07,940
other the other approach<font color="#CCCCCC"> is to actually</font>

813
00:30:05,419 --> 00:30:09,710
<font color="#E5E5E5">overwrite legitimately loaded</font><font color="#CCCCCC"> dll so</font>

814
00:30:07,940 --> 00:30:10,850
then you know a lot<font color="#CCCCCC"> of these techniques</font>

815
00:30:09,710 --> 00:30:13,279
people<font color="#E5E5E5"> have been looking at before</font>

816
00:30:10,850 --> 00:30:15,918
focused on<font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> privately</font>

817
00:30:13,279 --> 00:30:18,379
allocated regions only<font color="#CCCCCC"> or Mats regions</font>

818
00:30:15,919 --> 00:30:20,779
<font color="#E5E5E5">but not looking</font><font color="#CCCCCC"> at image locations but</font>

819
00:30:18,379 --> 00:30:22,340
<font color="#E5E5E5">if you actually</font><font color="#CCCCCC"> sort of example loaded</font>

820
00:30:20,779 --> 00:30:25,720
legit perfectly legitimate<font color="#E5E5E5"> DLL into a</font>

821
00:30:22,340 --> 00:30:29,209
process that's not actually<font color="#E5E5E5"> required but</font>

822
00:30:25,720 --> 00:30:32,629
is a you know isn't<font color="#CCCCCC"> no nice</font><font color="#E5E5E5"> Microsoft</font>

823
00:30:29,210 --> 00:30:34,429
signed<font color="#CCCCCC"> DLL for example then you</font><font color="#E5E5E5"> can load</font>

824
00:30:32,629 --> 00:30:35,779
<font color="#CCCCCC">that and then you can</font><font color="#E5E5E5"> change</font><font color="#CCCCCC"> permissions</font>

825
00:30:34,429 --> 00:30:37,580
and overwrite it with<font color="#E5E5E5"> your code and</font>

826
00:30:35,779 --> 00:30:38,990
<font color="#E5E5E5">start</font><font color="#CCCCCC"> running stuff and then it's harder</font>

827
00:30:37,580 --> 00:30:42,168
to<font color="#CCCCCC"> identify with these</font><font color="#E5E5E5"> techniques that</font>

828
00:30:38,990 --> 00:30:45,470
that is necessarily malicious<font color="#E5E5E5"> in fact it</font>

829
00:30:42,169 --> 00:30:47,659
<font color="#E5E5E5">becomes very difficult to identify</font><font color="#CCCCCC"> in</font>

830
00:30:45,470 --> 00:30:50,179
principle that kind of<font color="#E5E5E5"> approach with</font>

831
00:30:47,659 --> 00:30:51,909
memory analysis<font color="#E5E5E5"> alone because then you</font>

832
00:30:50,179 --> 00:30:54,679
need to know that<font color="#CCCCCC"> what is there is not</font>

833
00:30:51,909 --> 00:30:55,850
<font color="#E5E5E5">it does not reflect well it's what is on</font>

834
00:30:54,679 --> 00:30:57,169
disk<font color="#E5E5E5"> so actually you need hybrid</font>

835
00:30:55,850 --> 00:30:59,719
approaches there that can take<font color="#E5E5E5"> things</font>

836
00:30:57,169 --> 00:31:01,100
and<font color="#CCCCCC"> sort of compare what's on disk with</font>

837
00:30:59,720 --> 00:31:02,840
what's in memory and determine

838
00:31:01,100 --> 00:31:05,059
whether that looks like it's correct<font color="#E5E5E5"> or</font>

839
00:31:02,840 --> 00:31:07,730
not<font color="#CCCCCC"> and the other</font><font color="#E5E5E5"> approach</font><font color="#CCCCCC"> which is gogo</font>

840
00:31:05,059 --> 00:31:11,720
is is to not be<font color="#CCCCCC"> code</font><font color="#E5E5E5"> at all</font>

841
00:31:07,730 --> 00:31:14,090
so<font color="#CCCCCC"> goggle</font><font color="#E5E5E5"> is based on ensuring that it's</font>

842
00:31:11,720 --> 00:31:17,450
marked<font color="#E5E5E5"> to be non-executable most of the</font>

843
00:31:14,090 --> 00:31:19,159
time and<font color="#E5E5E5"> making use of timers and</font><font color="#CCCCCC"> rock</font>

844
00:31:17,450 --> 00:31:22,250
chains to change its permissions and

845
00:31:19,160 --> 00:31:24,200
execute and then put things back to

846
00:31:22,250 --> 00:31:25,820
<font color="#E5E5E5">read-only</font><font color="#CCCCCC"> and then the</font><font color="#E5E5E5"> idea is</font><font color="#CCCCCC"> that</font>

847
00:31:24,200 --> 00:31:27,320
something<font color="#E5E5E5"> like memory analysis that</font>

848
00:31:25,820 --> 00:31:29,539
unless you catch it while it was

849
00:31:27,320 --> 00:31:31,010
<font color="#E5E5E5">actively doing something which you'd</font>

850
00:31:29,539 --> 00:31:32,720
<font color="#CCCCCC">have to be</font><font color="#E5E5E5"> very lucky</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> if it's just an</font>

851
00:31:31,010 --> 00:31:34,900
implant that<font color="#E5E5E5"> calls back once a minute</font><font color="#CCCCCC"> or</font>

852
00:31:32,720 --> 00:31:36,740
once an hour<font color="#E5E5E5"> or</font><font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> the case is</font>

853
00:31:34,900 --> 00:31:37,820
<font color="#E5E5E5">it's gonna be very hard for you to</font>

854
00:31:36,740 --> 00:31:39,230
<font color="#E5E5E5">identify because in you gotta find</font>

855
00:31:37,820 --> 00:31:40,610
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that looks like code it</font>

856
00:31:39,230 --> 00:31:42,950
shouldn't be there<font color="#E5E5E5"> that</font><font color="#CCCCCC"> isn't even</font><font color="#E5E5E5"> not</font>

857
00:31:40,610 --> 00:31:47,090
as code and<font color="#CCCCCC"> that's the the idea behind</font>

858
00:31:42,950 --> 00:31:48,740
<font color="#E5E5E5">that</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> an approach so for one one</font>

859
00:31:47,090 --> 00:31:49,418
<font color="#E5E5E5">aspect</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> as I mentioned image</font>

860
00:31:48,740 --> 00:31:51,770
<font color="#CCCCCC">overwriting</font>

861
00:31:49,419 --> 00:31:53,210
and this is where you<font color="#E5E5E5"> need a hybrid sort</font>

862
00:31:51,770 --> 00:31:56,750
<font color="#E5E5E5">of technique it's much harder with</font>

863
00:31:53,210 --> 00:31:59,620
memory<font color="#CCCCCC"> Nasus alone you can take that</font><font color="#E5E5E5"> the</font>

864
00:31:56,750 --> 00:32:03,049
<font color="#CCCCCC">dll</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> in an image location and say</font>

865
00:31:59,620 --> 00:32:04,969
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> it's on disk let's go and</font>

866
00:32:03,049 --> 00:32:06,590
<font color="#E5E5E5">look at it let's take it</font><font color="#CCCCCC"> let's emulate</font>

867
00:32:04,970 --> 00:32:08,030
the loading<font color="#E5E5E5"> process say it should be</font>

868
00:32:06,590 --> 00:32:09,740
<font color="#E5E5E5">late loaded</font><font color="#CCCCCC"> there's a base address</font>

869
00:32:08,030 --> 00:32:11,270
<font color="#CCCCCC">that's apply all the relocations and</font>

870
00:32:09,740 --> 00:32:12,440
<font color="#E5E5E5">then end up with something</font><font color="#CCCCCC"> that's like</font>

871
00:32:11,270 --> 00:32:14,658
<font color="#E5E5E5">oh this is what I think</font><font color="#CCCCCC"> it should look</font>

872
00:32:12,440 --> 00:32:16,520
<font color="#CCCCCC">like in memory</font><font color="#E5E5E5"> and then you can</font><font color="#CCCCCC"> compare</font>

873
00:32:14,659 --> 00:32:17,929
that<font color="#E5E5E5"> to what's actually there so we take</font>

874
00:32:16,520 --> 00:32:19,429
some<font color="#E5E5E5"> sort of some approaches like that</font>

875
00:32:17,929 --> 00:32:21,200
and you can sort<font color="#CCCCCC"> of then see okay well</font>

876
00:32:19,429 --> 00:32:22,940
<font color="#E5E5E5">the permissions have changed the entry</font>

877
00:32:21,200 --> 00:32:24,679
<font color="#E5E5E5">points been modified and it's only a</font>

878
00:32:22,940 --> 00:32:26,090
<font color="#CCCCCC">three</font><font color="#E5E5E5"> percent match</font><font color="#CCCCCC"> by four by it with</font>

879
00:32:24,679 --> 00:32:28,039
what I expected<font color="#E5E5E5"> to be there that</font>

880
00:32:26,090 --> 00:32:30,740
suspicious<font color="#CCCCCC"> in this case here we're</font>

881
00:32:28,039 --> 00:32:33,020
looking at<font color="#E5E5E5"> that with with one of the</font>

882
00:32:30,740 --> 00:32:35,690
<font color="#E5E5E5">results at</font><font color="#CCCCCC"> the top the calc</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that's</font>

883
00:32:33,020 --> 00:32:38,750
an<font color="#CCCCCC"> example of</font><font color="#E5E5E5"> using this sort of</font>

884
00:32:35,690 --> 00:32:40,100
technique<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you will find lots of</font>

885
00:32:38,750 --> 00:32:41,270
<font color="#CCCCCC">examples</font><font color="#E5E5E5"> where there are legitimate</font>

886
00:32:40,100 --> 00:32:42,889
differences so there's a<font color="#E5E5E5"> few examples</font>

887
00:32:41,270 --> 00:32:44,870
<font color="#CCCCCC">there that you can see a</font><font color="#E5E5E5"> very close</font>

888
00:32:42,890 --> 00:32:46,370
<font color="#E5E5E5">matches</font><font color="#CCCCCC"> there's normally because of</font>

889
00:32:44,870 --> 00:32:47,570
legitimate in line hooking that's in

890
00:32:46,370 --> 00:32:48,889
place so you'll find<font color="#E5E5E5"> you know maybe</font>

891
00:32:47,570 --> 00:32:51,408
there's a few<font color="#CCCCCC"> bytes changed where</font>

892
00:32:48,890 --> 00:32:53,539
certain functions have had<font color="#E5E5E5"> in line hooks</font>

893
00:32:51,409 --> 00:32:56,330
installed by security products or

894
00:32:53,539 --> 00:32:57,740
<font color="#E5E5E5">whatever they may be but you can clearly</font>

895
00:32:56,330 --> 00:32:59,600
see<font color="#CCCCCC"> a big</font><font color="#E5E5E5"> difference when it's you know</font>

896
00:32:57,740 --> 00:33:02,659
<font color="#CCCCCC">three</font><font color="#E5E5E5"> percent match versus a</font><font color="#CCCCCC"> ninety-nine</font>

897
00:32:59,600 --> 00:33:03,770
<font color="#CCCCCC">percent match or whatever so that's what</font>

898
00:33:02,659 --> 00:33:09,740
<font color="#CCCCCC">that's sort of one approach to doing</font>

899
00:33:03,770 --> 00:33:11,920
that<font color="#E5E5E5"> goggle is is pretty difficult</font><font color="#CCCCCC"> so</font>

900
00:33:09,740 --> 00:33:14,960
the problem<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Gago is the</font>

901
00:33:11,920 --> 00:33:16,760
the<font color="#CCCCCC"> information around</font><font color="#E5E5E5"> the time as it</font>

902
00:33:14,960 --> 00:33:19,070
<font color="#E5E5E5">uses so it makes you to set</font><font color="#CCCCCC"> wait or</font>

903
00:33:16,760 --> 00:33:20,360
timer<font color="#E5E5E5"> that creates something that's</font>

904
00:33:19,070 --> 00:33:24,070
eventually<font color="#E5E5E5"> in the kernel and that will</font>

905
00:33:20,360 --> 00:33:26,300
fire<font color="#E5E5E5"> a</font><font color="#CCCCCC"> pcs</font><font color="#E5E5E5"> to to actually hear it now</font>

906
00:33:24,070 --> 00:33:28,610
the difficulty<font color="#E5E5E5"> there is that that</font>

907
00:33:26,300 --> 00:33:30,649
<font color="#E5E5E5">information is like undocumented</font>

908
00:33:28,610 --> 00:33:32,270
structures in the kernel<font color="#E5E5E5"> it's kind of if</font>

909
00:33:30,650 --> 00:33:34,340
you wanted to do<font color="#E5E5E5"> that in</font><font color="#CCCCCC"> production and</font>

910
00:33:32,270 --> 00:33:35,930
an<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> agent for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> it's a</font>

911
00:33:34,340 --> 00:33:37,939
little bit unsafe<font color="#E5E5E5"> to be considering</font>

912
00:33:35,930 --> 00:33:38,870
<font color="#CCCCCC">doing reading areas of memory there so</font>

913
00:33:37,940 --> 00:33:41,060
it's<font color="#CCCCCC"> not ideal</font><font color="#E5E5E5"> from that perspective</font>

914
00:33:38,870 --> 00:33:43,219
from a from a telemetry perspective it's

915
00:33:41,060 --> 00:33:45,679
kind<font color="#CCCCCC"> of hard to to get</font><font color="#E5E5E5"> information about</font>

916
00:33:43,220 --> 00:33:47,000
<font color="#E5E5E5">those timers</font><font color="#CCCCCC"> but if you're doing</font><font color="#E5E5E5"> it was</font>

917
00:33:45,680 --> 00:33:48,350
something like volatility and<font color="#E5E5E5"> doing</font>

918
00:33:47,000 --> 00:33:49,850
offline memory forensics you don't have

919
00:33:48,350 --> 00:33:53,419
to worry<font color="#E5E5E5"> about reliability</font><font color="#CCCCCC"> or safety</font>

920
00:33:49,850 --> 00:33:55,610
<font color="#E5E5E5">then so actually at</font><font color="#CCCCCC"> least in this case</font>

921
00:33:53,420 --> 00:33:57,640
<font color="#E5E5E5">quite recently I think last week we we</font>

922
00:33:55,610 --> 00:34:00,469
<font color="#E5E5E5">put out a blog on this but we wrote a</font>

923
00:33:57,640 --> 00:34:02,600
velocity<font color="#E5E5E5"> plugin for this so you</font><font color="#CCCCCC"> can</font>

924
00:34:00,470 --> 00:34:04,820
actually<font color="#E5E5E5"> enumerate the timers on the</font>

925
00:34:02,600 --> 00:34:07,429
system<font color="#E5E5E5"> identify the completion routines</font>

926
00:34:04,820 --> 00:34:09,350
associated with them and then see if

927
00:34:07,430 --> 00:34:11,360
they look strange<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> effectively</font>

928
00:34:09,350 --> 00:34:13,100
<font color="#E5E5E5">by strange here we're saying okay it</font>

929
00:34:11,360 --> 00:34:17,330
looks like<font color="#E5E5E5"> it points to a</font><font color="#CCCCCC"> rope gadget</font>

930
00:34:13,100 --> 00:34:18,949
<font color="#E5E5E5">that's used to mark the code mark a</font>

931
00:34:17,330 --> 00:34:21,739
section of code<font color="#CCCCCC"> as executable</font><font color="#E5E5E5"> then jump</font>

932
00:34:18,949 --> 00:34:23,359
to<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> differentiating that from what</font>

933
00:34:21,739 --> 00:34:25,279
we'd expect has been normal legitimate

934
00:34:23,360 --> 00:34:28,610
uses<font color="#E5E5E5"> of completion routines</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> set way</font>

935
00:34:25,280 --> 00:34:31,640
<font color="#E5E5E5">table timer so you can you know you</font><font color="#CCCCCC"> can</font>

936
00:34:28,610 --> 00:34:33,920
detect<font color="#E5E5E5"> it that way but doing it on</font><font color="#CCCCCC"> a you</font>

937
00:34:31,639 --> 00:34:36,020
<font color="#CCCCCC">know for production grades sense is a</font>

938
00:34:33,920 --> 00:34:40,030
bit harder<font color="#CCCCCC"> without having a</font><font color="#E5E5E5"> reliable way</font>

939
00:34:36,020 --> 00:34:43,850
of<font color="#E5E5E5"> accessing that</font><font color="#CCCCCC"> Salama tree so I</font>

940
00:34:40,030 --> 00:34:46,400
focused completely on<font color="#E5E5E5"> native stuff so</font>

941
00:34:43,850 --> 00:34:48,560
far<font color="#E5E5E5"> but I'm going to quickly go a little</font>

942
00:34:46,400 --> 00:34:53,840
<font color="#E5E5E5">bit moving on so looking at other</font>

943
00:34:48,560 --> 00:34:56,090
frameworks here so<font color="#CCCCCC"> first of all I think</font>

944
00:34:53,840 --> 00:34:59,150
<font color="#E5E5E5">a few years</font><font color="#CCCCCC"> ago when PowerShell became</font>

945
00:34:56,090 --> 00:35:00,410
big<font color="#E5E5E5"> there was quite a lot of offensive</font>

946
00:34:59,150 --> 00:35:01,730
work done in<font color="#CCCCCC"> that space</font><font color="#E5E5E5"> so I think it</font>

947
00:35:00,410 --> 00:35:03,770
was initially<font color="#E5E5E5"> one of those things where</font>

948
00:35:01,730 --> 00:35:06,560
at least I think<font color="#CCCCCC"> in the offensive</font>

949
00:35:03,770 --> 00:35:08,540
<font color="#E5E5E5">security community people were initially</font>

950
00:35:06,560 --> 00:35:09,080
resistant probably to PowerShell or more

951
00:35:08,540 --> 00:35:10,940
like you know<font color="#CCCCCC"> I</font>

952
00:35:09,080 --> 00:35:13,100
everything we do in terms of<font color="#E5E5E5"> using</font>

953
00:35:10,940 --> 00:35:14,930
things<font color="#E5E5E5"> we're using Linux and bash and so</font>

954
00:35:13,100 --> 00:35:16,069
forth<font color="#E5E5E5"> but then you know then they</font>

955
00:35:14,930 --> 00:35:19,040
realized that<font color="#CCCCCC"> actually it's really</font>

956
00:35:16,070 --> 00:35:20,270
<font color="#E5E5E5">useful for offensive</font><font color="#CCCCCC"> operations and then</font>

957
00:35:19,040 --> 00:35:22,190
everyone loves it<font color="#E5E5E5"> and everyone started</font>

958
00:35:20,270 --> 00:35:23,720
developing PowerShell exploitation

959
00:35:22,190 --> 00:35:24,990
frameworks and so forth and then that

960
00:35:23,720 --> 00:35:27,450
became a<font color="#E5E5E5"> very commonly used</font>

961
00:35:24,990 --> 00:35:30,299
technique and we<font color="#CCCCCC"> sit</font><font color="#E5E5E5"> in the wild all the</font>

962
00:35:27,450 --> 00:35:32,490
time<font color="#CCCCCC"> we all see the boots</font><font color="#E5E5E5"> team come</font>

963
00:35:30,300 --> 00:35:34,290
along<font color="#CCCCCC"> there's lots of</font><font color="#E5E5E5"> great work done</font>

964
00:35:32,490 --> 00:35:36,750
<font color="#E5E5E5">here at Microsoft in terms of improving</font>

965
00:35:34,290 --> 00:35:39,300
<font color="#E5E5E5">the log in features</font><font color="#CCCCCC"> in PowerShell for</font>

966
00:35:36,750 --> 00:35:40,410
<font color="#CCCCCC">example and and in the ABS interface</font>

967
00:35:39,300 --> 00:35:41,520
with scanning things<font color="#E5E5E5"> and there's a lot</font>

968
00:35:40,410 --> 00:35:43,649
<font color="#CCCCCC">more you can</font><font color="#E5E5E5"> do with it</font><font color="#CCCCCC"> to gain</font>

969
00:35:41,520 --> 00:35:47,040
visibility of malicious techniques there

970
00:35:43,650 --> 00:35:50,250
now<font color="#CCCCCC"> but I'll say again</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> these things</font>

971
00:35:47,040 --> 00:35:51,090
attackers<font color="#E5E5E5"> at that so the red</font><font color="#CCCCCC"> team's</font><font color="#E5E5E5"> come</font>

972
00:35:50,250 --> 00:35:52,050
<font color="#E5E5E5">along and I think there's a lot of</font>

973
00:35:51,090 --> 00:35:54,570
evidence<font color="#CCCCCC"> that people are moving into</font>

974
00:35:52,050 --> 00:35:55,440
just using dotnet instead now because

975
00:35:54,570 --> 00:35:57,240
essentially<font color="#E5E5E5"> a lot of the things people</font>

976
00:35:55,440 --> 00:35:59,280
<font color="#E5E5E5">were using with PowerShell was really</font>

977
00:35:57,240 --> 00:36:01,740
<font color="#E5E5E5">using PowerShell</font><font color="#CCCCCC"> and mechanism in many</font>

978
00:35:59,280 --> 00:36:04,350
cases to<font color="#CCCCCC"> Usenet functionality PowerShell</font>

979
00:36:01,740 --> 00:36:06,930
sit kind<font color="#CCCCCC"> of sits on top of net and a lot</font>

980
00:36:04,350 --> 00:36:08,250
of<font color="#E5E5E5"> the improvements to</font><font color="#CCCCCC"> the detection</font><font color="#E5E5E5"> in</font>

981
00:36:06,930 --> 00:36:10,049
their detection space<font color="#E5E5E5"> for PowerShell are</font>

982
00:36:08,250 --> 00:36:13,230
kind of more PowerShell specific rather

983
00:36:10,050 --> 00:36:15,420
than<font color="#CCCCCC"> net specific so from a totally</font>

984
00:36:13,230 --> 00:36:17,540
perspective in quite recent times

985
00:36:15,420 --> 00:36:20,270
there's been<font color="#CCCCCC"> a lot of work done here so</font>

986
00:36:17,540 --> 00:36:22,590
<font color="#CCCCCC">ghost pack was released</font><font color="#E5E5E5"> fairly recently</font>

987
00:36:20,270 --> 00:36:24,360
which<font color="#E5E5E5"> has got a lot</font><font color="#CCCCCC"> of great tools that</font>

988
00:36:22,590 --> 00:36:25,410
<font color="#E5E5E5">are kind of</font><font color="#CCCCCC"> c-sharp versions of</font><font color="#E5E5E5"> things</font>

989
00:36:24,360 --> 00:36:28,230
people<font color="#E5E5E5"> have</font><font color="#CCCCCC"> become familiar</font><font color="#E5E5E5"> with</font>

990
00:36:25,410 --> 00:36:29,430
<font color="#E5E5E5">inoffensive PowerShell frameworks</font><font color="#CCCCCC"> things</font>

991
00:36:28,230 --> 00:36:32,400
like code would strike<font color="#E5E5E5"> have added the</font>

992
00:36:29,430 --> 00:36:34,589
ability to dynamically run dotnet

993
00:36:32,400 --> 00:36:36,030
assemblies in other processes<font color="#E5E5E5"> to</font>

994
00:36:34,590 --> 00:36:38,520
implement<font color="#CCCCCC"> here to use this on of</font><font color="#E5E5E5"> this</font>

995
00:36:36,030 --> 00:36:40,770
<font color="#CCCCCC">functionality at runtime</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

996
00:36:38,520 --> 00:36:42,540
there's people saying that the pouch all

997
00:36:40,770 --> 00:36:45,359
sort of exploitation stuff is dead and

998
00:36:42,540 --> 00:36:46,670
even though<font color="#CCCCCC"> we are as well</font><font color="#E5E5E5"> our own red</font>

999
00:36:45,359 --> 00:36:48,840
team has<font color="#CCCCCC"> released some of their tools</font>

1000
00:36:46,670 --> 00:36:50,280
related<font color="#E5E5E5"> to this so there's a lot of</font>

1001
00:36:48,840 --> 00:36:51,660
traction at least in the public<font color="#CCCCCC"> security</font>

1002
00:36:50,280 --> 00:36:54,930
community around<font color="#E5E5E5"> I think moving</font>

1003
00:36:51,660 --> 00:36:56,670
offensive techniques to dotnet so the

1004
00:36:54,930 --> 00:36:58,830
question then<font color="#CCCCCC"> becomes from a blue team</font>

1005
00:36:56,670 --> 00:37:00,840
<font color="#CCCCCC">perspective like what</font><font color="#E5E5E5"> how does</font><font color="#CCCCCC"> this</font>

1006
00:36:58,830 --> 00:37:02,730
<font color="#CCCCCC">change things</font><font color="#E5E5E5"> and and with regard to</font>

1007
00:37:00,840 --> 00:37:04,190
this presentation<font color="#E5E5E5"> you know how does this</font>

1008
00:37:02,730 --> 00:37:07,560
affect<font color="#E5E5E5"> the kind of memory resident</font>

1009
00:37:04,190 --> 00:37:11,340
<font color="#E5E5E5">execution techniques</font><font color="#CCCCCC"> I guess first of</font>

1010
00:37:07,560 --> 00:37:14,520
<font color="#E5E5E5">all one aspect is why it's not net</font>

1011
00:37:11,340 --> 00:37:16,770
different<font color="#E5E5E5"> and at least for more modern</font>

1012
00:37:14,520 --> 00:37:18,119
<font color="#E5E5E5">versions for a start</font><font color="#CCCCCC"> we don't</font>

1013
00:37:16,770 --> 00:37:21,180
necessarily<font color="#CCCCCC"> get the same kind of cool</font>

1014
00:37:18,119 --> 00:37:22,680
backs in terms of seeing what we would

1015
00:37:21,180 --> 00:37:24,299
get from<font color="#E5E5E5"> a load library for a</font><font color="#CCCCCC"> DLL</font>

1016
00:37:22,680 --> 00:37:26,009
normally if we've got things<font color="#E5E5E5"> that are</font>

1017
00:37:24,300 --> 00:37:26,970
tracking<font color="#E5E5E5"> module loads and stuff we're</font>

1018
00:37:26,010 --> 00:37:28,960
not<font color="#E5E5E5"> necessarily</font><font color="#CCCCCC"> getting</font><font color="#E5E5E5"> the same</font>

1019
00:37:26,970 --> 00:37:32,209
<font color="#CCCCCC">visibility there</font>

1020
00:37:28,960 --> 00:37:34,190
<font color="#E5E5E5">but there are ways of still enumerate in</font>

1021
00:37:32,210 --> 00:37:35,510
what's<font color="#E5E5E5"> present in a dotnet process in</font>

1022
00:37:34,190 --> 00:37:37,090
terms<font color="#E5E5E5"> of its own assemblies there is</font>

1023
00:37:35,510 --> 00:37:43,300
visibility<font color="#E5E5E5"> there it's just a different</font>

1024
00:37:37,090 --> 00:37:46,000
method that you would use<font color="#CCCCCC"> to see that</font><font color="#E5E5E5"> so</font>

1025
00:37:43,300 --> 00:37:49,280
the<font color="#E5E5E5"> other thing is that dotnet provides</font>

1026
00:37:46,000 --> 00:37:50,420
itself the<font color="#CCCCCC"> ability to load assemblies in</font>

1027
00:37:49,280 --> 00:37:53,000
memory so where people<font color="#CCCCCC"> have gone to</font>

1028
00:37:50,420 --> 00:37:54,650
<font color="#CCCCCC">effort to write code</font><font color="#E5E5E5"> to do reflective</font>

1029
00:37:53,000 --> 00:37:57,320
DLL loading for native code and<font color="#CCCCCC"> trying</font>

1030
00:37:54,650 --> 00:37:59,540
to implement<font color="#CCCCCC"> that</font><font color="#E5E5E5"> in a way that has</font><font color="#CCCCCC"> been</font>

1031
00:37:57,320 --> 00:38:01,850
something<font color="#CCCCCC"> people</font><font color="#E5E5E5"> have seen a stealth in</font>

1032
00:37:59,540 --> 00:38:03,529
the past<font color="#E5E5E5"> dotnet kind of makes this</font>

1033
00:38:01,850 --> 00:38:05,509
really<font color="#E5E5E5"> easy because you can do it just</font>

1034
00:38:03,530 --> 00:38:06,890
<font color="#E5E5E5">within its own functionality you can</font>

1035
00:38:05,510 --> 00:38:08,810
<font color="#E5E5E5">dynamically don't assembly use</font>

1036
00:38:06,890 --> 00:38:11,240
reflection<font color="#E5E5E5"> all these things and you</font>

1037
00:38:08,810 --> 00:38:14,900
<font color="#E5E5E5">don't have to put your</font><font color="#CCCCCC"> DLL on disk then</font>

1038
00:38:11,240 --> 00:38:17,750
you can achieve that objective of<font color="#CCCCCC"> a void</font>

1039
00:38:14,900 --> 00:38:20,260
<font color="#CCCCCC">and disk</font><font color="#E5E5E5"> so this is an example here of</font>

1040
00:38:17,750 --> 00:38:22,370
<font color="#CCCCCC">doing it actually</font><font color="#E5E5E5"> using PowerShell the</font>

1041
00:38:20,260 --> 00:38:24,650
<font color="#CCCCCC">access in</font><font color="#E5E5E5"> dotnet functionality to do</font>

1042
00:38:22,370 --> 00:38:25,339
<font color="#E5E5E5">this loading a demo assembly in and</font>

1043
00:38:24,650 --> 00:38:28,010
calling us<font color="#E5E5E5"> on ink and</font><font color="#CCCCCC"> printing</font>

1044
00:38:25,340 --> 00:38:32,000
<font color="#CCCCCC">HelloWorld now there is visibility of</font>

1045
00:38:28,010 --> 00:38:33,380
this<font color="#E5E5E5"> we can actually enumerate the</font>

1046
00:38:32,000 --> 00:38:35,420
assemblies that<font color="#CCCCCC"> are loaded</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> if</font>

1047
00:38:33,380 --> 00:38:36,820
they've been<font color="#E5E5E5"> done in memory we</font><font color="#CCCCCC"> can see</font>

1048
00:38:35,420 --> 00:38:40,430
this it's not trivial<font color="#E5E5E5"> to then</font>

1049
00:38:36,820 --> 00:38:42,350
<font color="#E5E5E5">necessarily tie up what the dotnet code</font>

1050
00:38:40,430 --> 00:38:44,120
looks like<font color="#E5E5E5"> from but at least we can see</font>

1051
00:38:42,350 --> 00:38:47,150
that in this<font color="#E5E5E5"> example demo assembly is</font>

1052
00:38:44,120 --> 00:38:49,160
reported and we can see it's not<font color="#E5E5E5"> image</font>

1053
00:38:47,150 --> 00:38:50,720
backed so you know in an example<font color="#CCCCCC"> in a</font>

1054
00:38:49,160 --> 00:38:53,180
real<font color="#E5E5E5"> system maybe we'd be paying much</font>

1055
00:38:50,720 --> 00:38:55,850
<font color="#CCCCCC">close</font><font color="#E5E5E5"> attention to any assemblies</font><font color="#CCCCCC"> that</font>

1056
00:38:53,180 --> 00:38:57,980
have been loaded<font color="#E5E5E5"> in a process without an</font>

1057
00:38:55,850 --> 00:39:00,560
image backing so without file backing

1058
00:38:57,980 --> 00:39:03,110
here<font color="#E5E5E5"> that's one way that's one thing</font>

1059
00:39:00,560 --> 00:39:04,640
<font color="#E5E5E5">it's that's different about this so the</font>

1060
00:39:03,110 --> 00:39:05,990
other aspect<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> even just for the</font>

1061
00:39:04,640 --> 00:39:10,670
techniques we've looked at before in

1062
00:39:05,990 --> 00:39:12,319
terms of native<font color="#E5E5E5"> execution</font><font color="#CCCCCC"> I mentioned</font>

1063
00:39:10,670 --> 00:39:13,580
the problem of looking for any type<font color="#CCCCCC"> of</font>

1064
00:39:12,320 --> 00:39:15,620
code before<font color="#E5E5E5"> and how it was quite</font>

1065
00:39:13,580 --> 00:39:18,680
<font color="#CCCCCC">false-positive prone this is just like a</font>

1066
00:39:15,620 --> 00:39:20,390
I think this is<font color="#E5E5E5"> PowerShell that if you</font>

1067
00:39:18,680 --> 00:39:23,210
look in the process itself there's lots

1068
00:39:20,390 --> 00:39:25,430
of<font color="#E5E5E5"> areas of perfectly legitimate</font>

1069
00:39:23,210 --> 00:39:26,840
sections but that they<font color="#E5E5E5"> are in privately</font>

1070
00:39:25,430 --> 00:39:28,370
allocated regions<font color="#CCCCCC"> they're read write</font>

1071
00:39:26,840 --> 00:39:29,900
<font color="#CCCCCC">execute</font><font color="#E5E5E5"> so all the kind of things we've</font>

1072
00:39:28,370 --> 00:39:32,990
got<font color="#E5E5E5"> used to looking</font><font color="#CCCCCC"> out as suspicious</font>

1073
00:39:29,900 --> 00:39:34,490
indicators you know<font color="#E5E5E5"> we expect to see</font>

1074
00:39:32,990 --> 00:39:36,770
legitimately<font color="#E5E5E5"> and on there and then that</font>

1075
00:39:34,490 --> 00:39:37,759
makes<font color="#E5E5E5"> things hard it's like well then we</font>

1076
00:39:36,770 --> 00:39:39,470
have<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> good at</font><font color="#E5E5E5"> trying to</font>

1077
00:39:37,760 --> 00:39:42,140
<font color="#CCCCCC">identify what is</font>

1078
00:39:39,470 --> 00:39:44,839
<font color="#CCCCCC">as code in memory versus what is benign</font>

1079
00:39:42,140 --> 00:39:47,299
code<font color="#CCCCCC"> and be</font><font color="#E5E5E5"> able to separate dotnet</font>

1080
00:39:44,840 --> 00:39:48,920
<font color="#CCCCCC">shiting from you know</font><font color="#E5E5E5"> from malicious</font>

1081
00:39:47,300 --> 00:39:52,099
<font color="#E5E5E5">code that's</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> so kind of muddies the</font>

1082
00:39:48,920 --> 00:39:54,230
water in<font color="#E5E5E5"> terms of the approaches</font><font color="#CCCCCC"> that</font>

1083
00:39:52,099 --> 00:39:55,690
we've taken before<font color="#E5E5E5"> makes things a little</font>

1084
00:39:54,230 --> 00:39:59,180
<font color="#E5E5E5">bit more tricky</font>

1085
00:39:55,690 --> 00:40:02,900
so from some of the work we've done

1086
00:39:59,180 --> 00:40:05,270
<font color="#E5E5E5">recently we've started</font><font color="#CCCCCC"> using etw as a as</font>

1087
00:40:02,900 --> 00:40:06,070
a<font color="#E5E5E5"> way of exploring some of</font><font color="#CCCCCC"> this more and</font>

1088
00:40:05,270 --> 00:40:09,230
there are some really<font color="#E5E5E5"> interesting</font>

1089
00:40:06,070 --> 00:40:10,849
<font color="#E5E5E5">providers for dotnet</font><font color="#CCCCCC"> that are really</font>

1090
00:40:09,230 --> 00:40:14,599
<font color="#E5E5E5">useful so I'm just going to give a few</font>

1091
00:40:10,849 --> 00:40:15,710
examples<font color="#CCCCCC"> here</font><font color="#E5E5E5"> we've got</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> providers</font>

1092
00:40:14,599 --> 00:40:17,330
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the runtime provider and we've got</font>

1093
00:40:15,710 --> 00:40:18,740
the run<font color="#E5E5E5"> down provider</font><font color="#CCCCCC"> the great thing</font>

1094
00:40:17,330 --> 00:40:21,799
about<font color="#E5E5E5"> the run down provider is it meets</font>

1095
00:40:18,740 --> 00:40:23,359
our objective of finding<font color="#E5E5E5"> pre-existing</font>

1096
00:40:21,800 --> 00:40:24,710
<font color="#E5E5E5">implants potentially because actually it</font>

1097
00:40:23,359 --> 00:40:26,450
<font color="#E5E5E5">gives you information about what is</font>

1098
00:40:24,710 --> 00:40:27,920
already<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> system so you can use</font><font color="#CCCCCC"> it</font>

1099
00:40:26,450 --> 00:40:30,200
after<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fact you don't necessarily</font>

1100
00:40:27,920 --> 00:40:35,420
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be real time when the attack</font>

1101
00:40:30,200 --> 00:40:39,859
happens<font color="#E5E5E5"> but essentially we can see for</font>

1102
00:40:35,420 --> 00:40:41,720
example here we've got the demo assembly

1103
00:40:39,859 --> 00:40:44,270
that's that's loaded in the middle<font color="#CCCCCC"> we</font>

1104
00:40:41,720 --> 00:40:45,560
<font color="#E5E5E5">got that in the red</font><font color="#CCCCCC"> bots we've seen all</font>

1105
00:40:44,270 --> 00:40:49,070
the<font color="#CCCCCC"> other assembly loads that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> going</font>

1106
00:40:45,560 --> 00:40:52,339
<font color="#E5E5E5">on but we can</font><font color="#CCCCCC"> actually see here that yes</font>

1107
00:40:49,070 --> 00:40:53,750
there was a assembly<font color="#E5E5E5"> that's been loaded</font>

1108
00:40:52,339 --> 00:40:56,619
<font color="#CCCCCC">that doesn't have an image backing that</font>

1109
00:40:53,750 --> 00:40:58,790
<font color="#E5E5E5">might be something we want to look into</font>

1110
00:40:56,619 --> 00:41:00,290
but somebody's on their<font color="#E5E5E5"> own don't tell</font>

1111
00:40:58,790 --> 00:41:02,000
us much<font color="#E5E5E5"> that's quite a coarse indicator</font>

1112
00:41:00,290 --> 00:41:03,259
<font color="#E5E5E5">okay all right maybe</font><font color="#CCCCCC"> that's interesting</font>

1113
00:41:02,000 --> 00:41:04,430
<font color="#E5E5E5">but what is it what does it do does it</font>

1114
00:41:03,260 --> 00:41:05,300
<font color="#E5E5E5">look malicious or does</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> look</font>

1115
00:41:04,430 --> 00:41:06,740
legitimate

1116
00:41:05,300 --> 00:41:09,740
obviously<font color="#E5E5E5"> this functionality</font><font color="#CCCCCC"> to</font>

1117
00:41:06,740 --> 00:41:13,970
<font color="#E5E5E5">reflectively load it exists for</font><font color="#CCCCCC"> a reason</font>

1118
00:41:09,740 --> 00:41:16,939
so is that<font color="#CCCCCC"> okay but</font><font color="#E5E5E5"> then there</font><font color="#CCCCCC"> are</font>

1119
00:41:13,970 --> 00:41:18,830
jitter vents so we can actually get

1120
00:41:16,940 --> 00:41:20,839
events from etw<font color="#CCCCCC"> real-time about what</font>

1121
00:41:18,830 --> 00:41:22,609
happens when a<font color="#E5E5E5"> method is first</font>

1122
00:41:20,839 --> 00:41:24,560
<font color="#E5E5E5">so the first time it's executed the</font>

1123
00:41:22,609 --> 00:41:26,750
<font color="#E5E5E5">just-in-time compiler compiles it we</font>

1124
00:41:24,560 --> 00:41:29,299
then get method<font color="#CCCCCC"> level information</font><font color="#E5E5E5"> so in</font>

1125
00:41:26,750 --> 00:41:32,869
this case we can<font color="#CCCCCC"> actually see an example</font>

1126
00:41:29,300 --> 00:41:34,550
<font color="#E5E5E5">of demo assembly loading and then</font>

1127
00:41:32,869 --> 00:41:36,380
actually<font color="#CCCCCC"> seen</font><font color="#E5E5E5"> the constructor called for</font>

1128
00:41:34,550 --> 00:41:38,690
the class<font color="#E5E5E5"> demo class and then we can see</font>

1129
00:41:36,380 --> 00:41:40,580
no names the method being<font color="#E5E5E5"> called and</font>

1130
00:41:38,690 --> 00:41:41,960
that gives<font color="#E5E5E5"> us a much better idea</font><font color="#CCCCCC"> of</font>

1131
00:41:40,580 --> 00:41:43,520
<font color="#E5E5E5">actually what's going on so we won't see</font>

1132
00:41:41,960 --> 00:41:44,900
<font color="#E5E5E5">that</font><font color="#CCCCCC"> if that methods called a thousand</font>

1133
00:41:43,520 --> 00:41:46,550
times<font color="#CCCCCC"> we won't</font><font color="#E5E5E5"> see a thousand events and</font>

1134
00:41:44,900 --> 00:41:48,080
be flooded for them we can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> see that</font>

1135
00:41:46,550 --> 00:41:52,500
<font color="#E5E5E5">it's being called at some point because</font>

1136
00:41:48,080 --> 00:41:55,619
we<font color="#CCCCCC"> get the initial JIT event</font><font color="#E5E5E5"> so if we</font>

1137
00:41:52,500 --> 00:41:57,210
look at something<font color="#CCCCCC"> like Metasploit</font><font color="#E5E5E5"> it's</font>

1138
00:41:55,619 --> 00:41:59,150
the<font color="#E5E5E5"> example was one one example</font><font color="#CCCCCC"> I'm</font>

1139
00:41:57,210 --> 00:42:02,579
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the old PowerShell stager</font>

1140
00:41:59,150 --> 00:42:03,930
<font color="#CCCCCC">if we run this using unmanaged</font>

1141
00:42:02,579 --> 00:42:06,660
PowerShell using a tool called sharp

1142
00:42:03,930 --> 00:42:08,368
pick essentially then we're<font color="#E5E5E5"> avoiding all</font>

1143
00:42:06,660 --> 00:42:10,259
the normal PowerShell logging but

1144
00:42:08,369 --> 00:42:12,210
there's a lot<font color="#E5E5E5"> of things in this stager</font>

1145
00:42:10,260 --> 00:42:13,710
here that are<font color="#E5E5E5"> actually you know might be</font>

1146
00:42:12,210 --> 00:42:15,530
<font color="#E5E5E5">suspicious to</font><font color="#CCCCCC"> us so we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see things</font>

1147
00:42:13,710 --> 00:42:17,760
<font color="#CCCCCC">being compiled</font><font color="#E5E5E5"> from source we can see</font>

1148
00:42:15,530 --> 00:42:19,829
<font color="#E5E5E5">decoding of binary data</font><font color="#CCCCCC"> therefrom from</font>

1149
00:42:17,760 --> 00:42:22,290
basics<font color="#CCCCCC"> for string and then in particular</font>

1150
00:42:19,829 --> 00:42:25,500
we<font color="#E5E5E5"> can see native calls via PM vote</font>

1151
00:42:22,290 --> 00:42:27,000
going<font color="#E5E5E5"> to the functions</font><font color="#CCCCCC"> that commonly</font><font color="#E5E5E5"> use</font>

1152
00:42:25,500 --> 00:42:31,290
by mail<font color="#E5E5E5"> with things like virtual</font><font color="#CCCCCC"> work</font>

1153
00:42:27,000 --> 00:42:33,930
and and so forth<font color="#CCCCCC"> I mean particularly</font>

1154
00:42:31,290 --> 00:42:35,730
<font color="#E5E5E5">like memory someone manually managing</font>

1155
00:42:33,930 --> 00:42:37,259
<font color="#E5E5E5">memory and</font><font color="#CCCCCC"> net it's something that we</font>

1156
00:42:35,730 --> 00:42:38,880
<font color="#CCCCCC">wouldn't normally you know expect to</font>

1157
00:42:37,260 --> 00:42:40,619
seals in dotnet with nobody<font color="#E5E5E5"> cover that</font>

1158
00:42:38,880 --> 00:42:42,210
for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> so that would be suspicious if</font>

1159
00:42:40,619 --> 00:42:45,420
<font color="#E5E5E5">someone was</font><font color="#CCCCCC"> using this</font><font color="#E5E5E5"> to stage</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> native</font>

1160
00:42:42,210 --> 00:42:49,020
payload<font color="#E5E5E5"> so for example if we if we then</font>

1161
00:42:45,420 --> 00:42:51,060
look<font color="#CCCCCC"> at taking these jits events into</font>

1162
00:42:49,020 --> 00:42:52,500
<font color="#E5E5E5">account as well and we sort of then</font>

1163
00:42:51,060 --> 00:42:54,599
start<font color="#E5E5E5"> building up a list of</font><font color="#CCCCCC"> things we</font>

1164
00:42:52,500 --> 00:42:56,640
<font color="#CCCCCC">think might be</font><font color="#E5E5E5"> suspicious indicators</font>

1165
00:42:54,599 --> 00:42:58,890
actually we get<font color="#E5E5E5"> quite small amount of</font>

1166
00:42:56,640 --> 00:43:00,450
output<font color="#CCCCCC"> that's already relevant here</font>

1167
00:42:58,890 --> 00:43:02,879
<font color="#E5E5E5">running something like that so in this</font>

1168
00:43:00,450 --> 00:43:04,799
case we<font color="#CCCCCC"> actually can see that</font><font color="#E5E5E5"> okay is</font>

1169
00:43:02,880 --> 00:43:06,390
the<font color="#CCCCCC"> Shoppach</font><font color="#E5E5E5"> program was run we can see</font>

1170
00:43:04,800 --> 00:43:08,970
where it's dynamically generated a

1171
00:43:06,390 --> 00:43:11,098
randomly named<font color="#E5E5E5"> assembly and loaded that</font>

1172
00:43:08,970 --> 00:43:13,890
without a file back in and then we<font color="#CCCCCC"> can</font>

1173
00:43:11,099 --> 00:43:15,119
see those native calls<font color="#E5E5E5"> over</font><font color="#CCCCCC"> thought so</font>

1174
00:43:13,890 --> 00:43:16,740
we can see the front<font color="#CCCCCC"> basically for</font>

1175
00:43:15,119 --> 00:43:19,079
string<font color="#CCCCCC"> there we can see the</font><font color="#E5E5E5"> virtual and</font>

1176
00:43:16,740 --> 00:43:21,149
so forth<font color="#E5E5E5"> so we can see that looks pretty</font>

1177
00:43:19,079 --> 00:43:24,349
<font color="#CCCCCC">suspicious</font><font color="#E5E5E5"> and we've got quite</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> to</font>

1178
00:43:21,150 --> 00:43:26,339
limitary that shows us that<font color="#CCCCCC"> they're</font>

1179
00:43:24,349 --> 00:43:28,829
using another example I thought

1180
00:43:26,339 --> 00:43:31,440
<font color="#CCCCCC">something much</font><font color="#E5E5E5"> more recent ghost pack</font>

1181
00:43:28,829 --> 00:43:33,690
came<font color="#E5E5E5"> out fairly recently ghost pack is a</font>

1182
00:43:31,440 --> 00:43:35,130
whole suite<font color="#CCCCCC"> of tools I can do everything</font>

1183
00:43:33,690 --> 00:43:38,819
<font color="#E5E5E5">that I</font><font color="#CCCCCC"> just picked one as a good example</font>

1184
00:43:35,130 --> 00:43:40,890
<font color="#CCCCCC">and that's something that called</font><font color="#E5E5E5"> safety</font>

1185
00:43:38,819 --> 00:43:43,650
cats which is a way<font color="#CCCCCC"> of</font><font color="#E5E5E5"> using mini cats</font>

1186
00:43:40,890 --> 00:43:46,290
to steal<font color="#E5E5E5"> passwords but avoids writing</font>

1187
00:43:43,650 --> 00:43:51,210
the mini cats<font color="#CCCCCC"> XE to</font><font color="#E5E5E5"> disk or running it</font>

1188
00:43:46,290 --> 00:43:54,060
natively<font color="#E5E5E5"> or even</font><font color="#CCCCCC"> and even</font><font color="#E5E5E5"> avoids using</font>

1189
00:43:51,210 --> 00:43:56,250
<font color="#CCCCCC">mini cats to access</font><font color="#E5E5E5"> alsace as process</font>

1190
00:43:54,060 --> 00:43:58,140
memory<font color="#E5E5E5"> directly so what it does is it</font>

1191
00:43:56,250 --> 00:43:59,460
takes a mini<font color="#E5E5E5"> dump analysis itself and</font>

1192
00:43:58,140 --> 00:44:02,460
then it uses reflective loading

1193
00:43:59,460 --> 00:44:04,710
techniques via dotnet to natively<font color="#E5E5E5"> load</font>

1194
00:44:02,460 --> 00:44:05,450
the mini cats in memory<font color="#CCCCCC"> without writing</font>

1195
00:44:04,710 --> 00:44:07,460
<font color="#E5E5E5">it</font>

1196
00:44:05,450 --> 00:44:09,410
and gets<font color="#E5E5E5"> it to process the the memory</font>

1197
00:44:07,460 --> 00:44:12,440
<font color="#E5E5E5">image it's taken and then returned the</font>

1198
00:44:09,410 --> 00:44:14,000
<font color="#CCCCCC">results as a result</font><font color="#E5E5E5"> seeing it through</font>

1199
00:44:12,440 --> 00:44:15,049
this lens we actually see quite<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

1200
00:44:14,000 --> 00:44:17,059
the<font color="#E5E5E5"> interest</font><font color="#CCCCCC"> information there we can</font>

1201
00:44:15,049 --> 00:44:20,450
see the mini<font color="#E5E5E5"> dump right dump pool that's</font>

1202
00:44:17,059 --> 00:44:22,099
made and then we<font color="#E5E5E5"> can see you know</font><font color="#CCCCCC"> a</font>

1203
00:44:20,450 --> 00:44:23,359
bunch<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different other native calls</font>

1204
00:44:22,099 --> 00:44:26,180
that are made<font color="#CCCCCC"> by</font><font color="#E5E5E5"> it that can be</font>

1205
00:44:23,359 --> 00:44:27,710
<font color="#E5E5E5">particularly suspicious</font><font color="#CCCCCC"> so that's</font>

1206
00:44:26,180 --> 00:44:31,569
something that's<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know it's pretty</font>

1207
00:44:27,710 --> 00:44:34,490
interesting there so finally with dotnet

1208
00:44:31,569 --> 00:44:36,500
<font color="#E5E5E5">this one thing I did very</font><font color="#CCCCCC"> recently but I</font>

1209
00:44:34,490 --> 00:44:38,299
<font color="#CCCCCC">thinking</font><font color="#E5E5E5"> other other techniques people</font>

1210
00:44:36,500 --> 00:44:40,309
<font color="#E5E5E5">might start using here related to dotnet</font>

1211
00:44:38,299 --> 00:44:42,288
that changed this<font color="#E5E5E5"> so I think about</font>

1212
00:44:40,309 --> 00:44:43,400
<font color="#E5E5E5">gargle is fairly recent technique we've</font>

1213
00:44:42,289 --> 00:44:45,500
not really seen it used in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> real</font>

1214
00:44:43,400 --> 00:44:48,170
world apart from<font color="#E5E5E5"> home</font><font color="#CCCCCC"> Allen red</font><font color="#E5E5E5"> teams</font>

1215
00:44:45,500 --> 00:44:52,430
<font color="#E5E5E5">but um you know is there an equivalent</font>

1216
00:44:48,170 --> 00:44:53,960
<font color="#E5E5E5">for goggle for dotnet</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I think there</font>

1217
00:44:52,430 --> 00:44:56,720
<font color="#CCCCCC">is a sort of similar way you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> achieve</font>

1218
00:44:53,960 --> 00:44:58,789
this and make things more<font color="#E5E5E5"> tricky in</font>

1219
00:44:56,720 --> 00:45:01,808
<font color="#E5E5E5">the.net space</font><font color="#CCCCCC"> too so that if there are</font>

1220
00:44:58,789 --> 00:45:03,619
net timers and you know it's a similar

1221
00:45:01,809 --> 00:45:04,910
<font color="#E5E5E5">case where there's a</font><font color="#CCCCCC"> court</font><font color="#E5E5E5"> you know</font>

1222
00:45:03,619 --> 00:45:06,980
there's a<font color="#E5E5E5"> callback so we can set a timer</font>

1223
00:45:04,910 --> 00:45:08,808
<font color="#E5E5E5">and say run this code in a</font><font color="#CCCCCC"> minute's time</font>

1224
00:45:06,980 --> 00:45:12,829
or an hour's time<font color="#E5E5E5"> or whatever the case</font>

1225
00:45:08,809 --> 00:45:14,710
<font color="#CCCCCC">is so I thought you know presumably we</font>

1226
00:45:12,829 --> 00:45:17,359
should be able to<font color="#E5E5E5"> do something similar</font>

1227
00:45:14,710 --> 00:45:20,059
<font color="#CCCCCC">the challenges with this really is</font><font color="#E5E5E5"> that</font>

1228
00:45:17,359 --> 00:45:22,578
your callback has to match a particular

1229
00:45:20,059 --> 00:45:23,930
delegate so that's fine if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to</font>

1230
00:45:22,579 --> 00:45:26,119
write<font color="#CCCCCC"> your own dotnet to do what you</font>

1231
00:45:23,930 --> 00:45:29,660
want to<font color="#CCCCCC"> do if you want</font><font color="#E5E5E5"> to try and make</font>

1232
00:45:26,119 --> 00:45:32,809
use pure<font color="#CCCCCC"> lis of existing dotnet library</font>

1233
00:45:29,660 --> 00:45:34,098
functions then that significantly limits

1234
00:45:32,809 --> 00:45:37,430
what<font color="#CCCCCC"> you can schedule</font><font color="#E5E5E5"> to be called in</font>

1235
00:45:34,099 --> 00:45:41,450
<font color="#E5E5E5">the</font><font color="#CCCCCC"> future so like for example if</font><font color="#E5E5E5"> we</font>

1236
00:45:37,430 --> 00:45:42,890
wanted<font color="#CCCCCC"> to call assembly load we need</font>

1237
00:45:41,450 --> 00:45:45,020
that to match you know so we can

1238
00:45:42,890 --> 00:45:47,029
schedule a you know a loading of a

1239
00:45:45,020 --> 00:45:48,500
dynamic assembly in<font color="#E5E5E5"> the future we'd need</font>

1240
00:45:47,029 --> 00:45:51,619
<font color="#E5E5E5">that to match the delegates</font><font color="#CCCCCC"> that makes</font>

1241
00:45:48,500 --> 00:45:53,660
things tougher but<font color="#E5E5E5"> if we're willing</font><font color="#CCCCCC"> to</font>

1242
00:45:51,619 --> 00:45:57,710
write our<font color="#CCCCCC"> own code it's ok so I think</font>

1243
00:45:53,660 --> 00:46:00,140
<font color="#CCCCCC">the idea here is that there's a there's</font>

1244
00:45:57,710 --> 00:46:02,599
an element of<font color="#E5E5E5"> having something</font><font color="#CCCCCC"> that does</font>

1245
00:46:00,140 --> 00:46:04,879
exist in memory<font color="#E5E5E5"> but keeping that very</font>

1246
00:46:02,599 --> 00:46:06,740
small and more<font color="#E5E5E5"> likely</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be seen as as</font>

1247
00:46:04,880 --> 00:46:09,049
legit and keeping your fully featured

1248
00:46:06,740 --> 00:46:10,430
<font color="#CCCCCC">implant out of sight</font><font color="#E5E5E5"> that's much more</font>

1249
00:46:09,049 --> 00:46:13,450
obviously malicious if someone looks at

1250
00:46:10,430 --> 00:46:13,450
it so

1251
00:46:14,869 --> 00:46:19,440
so the idea here<font color="#E5E5E5"> is having something</font>

1252
00:46:17,010 --> 00:46:22,310
<font color="#CCCCCC">like this I</font><font color="#E5E5E5"> mean this is just some pop</font>

1253
00:46:19,440 --> 00:46:25,380
code you change it in<font color="#E5E5E5"> the real world but</font>

1254
00:46:22,310 --> 00:46:27,390
we we can<font color="#E5E5E5"> set up a timer and get it to</font>

1255
00:46:25,380 --> 00:46:29,070
fire in future and<font color="#E5E5E5"> then we can have</font>

1256
00:46:27,390 --> 00:46:32,129
something<font color="#CCCCCC"> that can actually</font><font color="#E5E5E5"> dynamically</font>

1257
00:46:29,070 --> 00:46:34,110
load an assembly<font color="#E5E5E5"> that's been passed as</font>

1258
00:46:32,130 --> 00:46:36,210
byte stream<font color="#E5E5E5"> run it in a new app</font>

1259
00:46:34,110 --> 00:46:38,760
container<font color="#CCCCCC"> and then tear that down</font>

1260
00:46:36,210 --> 00:46:40,920
afterwards which cleans it all<font color="#E5E5E5"> up and</font>

1261
00:46:38,760 --> 00:46:42,720
then we can<font color="#E5E5E5"> reschedule</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so you'd</font>

1262
00:46:40,920 --> 00:46:44,250
<font color="#E5E5E5">need to have some sort</font><font color="#CCCCCC"> of assembly</font><font color="#E5E5E5"> that</font>

1263
00:46:42,720 --> 00:46:45,899
you load into<font color="#CCCCCC"> memory that has this kind</font>

1264
00:46:44,250 --> 00:46:49,590
<font color="#CCCCCC">of functionality</font><font color="#E5E5E5"> but maybe you can bury</font>

1265
00:46:45,900 --> 00:46:51,119
that in<font color="#CCCCCC"> a bigger</font><font color="#E5E5E5"> assembly that all looks</font>

1266
00:46:49,590 --> 00:46:52,619
perfectly benign<font color="#CCCCCC"> you've got you know one</font>

1267
00:46:51,119 --> 00:46:53,850
function that<font color="#CCCCCC"> can load</font><font color="#E5E5E5"> them assembly</font>

1268
00:46:52,619 --> 00:46:55,740
from<font color="#CCCCCC"> a byte stream and something</font><font color="#E5E5E5"> that</font>

1269
00:46:53,850 --> 00:46:57,810
<font color="#E5E5E5">can schedule that</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> maybe that</font>

1270
00:46:55,740 --> 00:46:59,399
would<font color="#CCCCCC"> pass you know a casual inspection</font>

1271
00:46:57,810 --> 00:47:02,090
<font color="#E5E5E5">if someone would go and look at it and</font>

1272
00:46:59,400 --> 00:47:04,830
then<font color="#E5E5E5"> you have your very obvious</font>

1273
00:47:02,090 --> 00:47:07,410
<font color="#E5E5E5">malicious assembly then not loaded</font>

1274
00:47:04,830 --> 00:47:08,940
normally so if you then<font color="#E5E5E5"> you can even</font>

1275
00:47:07,410 --> 00:47:10,259
<font color="#E5E5E5">then they trigger this natively so you</font>

1276
00:47:08,940 --> 00:47:14,940
can make use of<font color="#CCCCCC"> comm objects for example</font>

1277
00:47:10,260 --> 00:47:17,910
<font color="#CCCCCC">too if you load it</font><font color="#E5E5E5"> and then make a call</font>

1278
00:47:14,940 --> 00:47:19,950
that will then pass in your your your

1279
00:47:17,910 --> 00:47:23,160
byte stream<font color="#CCCCCC"> for your</font><font color="#E5E5E5"> actual malicious</font>

1280
00:47:19,950 --> 00:47:25,049
implant<font color="#E5E5E5"> and have that called for this</font>

1281
00:47:23,160 --> 00:47:28,920
function<font color="#CCCCCC"> so then you get something that</font>

1282
00:47:25,050 --> 00:47:31,680
<font color="#E5E5E5">looks like this</font><font color="#CCCCCC"> so effectively we can</font>

1283
00:47:28,920 --> 00:47:33,660
see our assembly loader<font color="#E5E5E5"> in the default</font>

1284
00:47:31,680 --> 00:47:34,710
<font color="#E5E5E5">domain loaded there and the idea that's</font>

1285
00:47:33,660 --> 00:47:37,589
that's the thing<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to make</font>

1286
00:47:34,710 --> 00:47:38,910
<font color="#E5E5E5">pass a casual inspection</font><font color="#CCCCCC"> okay a little</font>

1287
00:47:37,590 --> 00:47:41,220
<font color="#CCCCCC">bit of code that's related to the</font>

1288
00:47:38,910 --> 00:47:43,230
callbacks<font color="#E5E5E5"> but then actually whenever we</font>

1289
00:47:41,220 --> 00:47:44,939
inspect this<font color="#E5E5E5"> at any particular time if</font>

1290
00:47:43,230 --> 00:47:46,710
we're using you know that<font color="#E5E5E5"> point in time</font>

1291
00:47:44,940 --> 00:47:48,950
scanning<font color="#E5E5E5"> memory analysis type techniques</font>

1292
00:47:46,710 --> 00:47:51,119
<font color="#CCCCCC">we're not gonna see the malicious</font>

1293
00:47:48,950 --> 00:47:52,618
assembly loaded<font color="#CCCCCC"> but</font><font color="#E5E5E5"> if you can see from</font>

1294
00:47:51,119 --> 00:47:54,480
the<font color="#CCCCCC"> output before</font><font color="#E5E5E5"> obviously our timer</font>

1295
00:47:52,619 --> 00:47:56,850
<font color="#E5E5E5">that's getting loaded into a new app</font>

1296
00:47:54,480 --> 00:47:58,170
domain<font color="#E5E5E5"> run and so forth and then</font><font color="#CCCCCC"> its</font>

1297
00:47:56,850 --> 00:47:59,940
head down<font color="#E5E5E5"> and we never even see the</font><font color="#CCCCCC"> app</font>

1298
00:47:58,170 --> 00:48:01,380
<font color="#CCCCCC">domain</font><font color="#E5E5E5"> if we're doing point in time</font>

1299
00:47:59,940 --> 00:48:05,340
exercises here so then that's like<font color="#E5E5E5"> a</font>

1300
00:48:01,380 --> 00:48:07,350
<font color="#CCCCCC">goggle type technique for dotnet so it</font>

1301
00:48:05,340 --> 00:48:09,030
<font color="#E5E5E5">might</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> that people start moving</font><font color="#CCCCCC"> into</font>

1302
00:48:07,350 --> 00:48:10,859
using these kind of<font color="#E5E5E5"> techniques if if</font>

1303
00:48:09,030 --> 00:48:12,510
they're using dotnet for more of the

1304
00:48:10,859 --> 00:48:17,940
tooling as well so I think<font color="#E5E5E5"> that's</font>

1305
00:48:12,510 --> 00:48:19,320
another challenge<font color="#E5E5E5"> going forwards so as a</font>

1306
00:48:17,940 --> 00:48:21,750
conclusion<font color="#E5E5E5"> I mean I've also gone over a</font>

1307
00:48:19,320 --> 00:48:27,720
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> topics there</font><font color="#E5E5E5"> quite</font>

1308
00:48:21,750 --> 00:48:30,300
quickly<font color="#E5E5E5"> but I think the key</font><font color="#CCCCCC"> point from</font>

1309
00:48:27,720 --> 00:48:31,290
here is<font color="#E5E5E5"> that these techniques</font><font color="#CCCCCC"> so the</font>

1310
00:48:30,300 --> 00:48:32,849
memory<font color="#CCCCCC"> as an implants they've been</font>

1311
00:48:31,290 --> 00:48:34,859
around for a long<font color="#CCCCCC"> time people</font><font color="#E5E5E5"> are still</font>

1312
00:48:32,849 --> 00:48:36,300
using<font color="#CCCCCC"> them it really</font><font color="#E5E5E5"> took I think</font><font color="#CCCCCC"> the</font>

1313
00:48:34,859 --> 00:48:39,119
sort of defensive industry a long time

1314
00:48:36,300 --> 00:48:41,720
to start<font color="#E5E5E5"> providing a challenge around</font>

1315
00:48:39,119 --> 00:48:43,680
actually<font color="#E5E5E5"> protecting these things in use</font>

1316
00:48:41,720 --> 00:48:45,779
<font color="#CCCCCC">at the Mart you know the</font><font color="#E5E5E5"> last</font><font color="#CCCCCC"> couple of</font>

1317
00:48:43,680 --> 00:48:46,799
<font color="#E5E5E5">years has</font><font color="#CCCCCC"> been a lot more on this</font><font color="#E5E5E5"> slide</font>

1318
00:48:45,780 --> 00:48:50,099
happening and people<font color="#CCCCCC"> are therefore</font>

1319
00:48:46,800 --> 00:48:53,070
adapting and making stealthier

1320
00:48:50,099 --> 00:48:55,109
techniques so there's a<font color="#CCCCCC"> couple of</font>

1321
00:48:53,070 --> 00:48:56,730
aspects<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this now I</font><font color="#CCCCCC"> think there's</font>

1322
00:48:55,109 --> 00:48:58,080
really great progress on<font color="#E5E5E5"> telemetry</font>

1323
00:48:56,730 --> 00:48:59,960
that's available<font color="#E5E5E5"> to help do this</font><font color="#CCCCCC"> on</font>

1324
00:48:58,080 --> 00:49:06,060
Windows 10<font color="#E5E5E5"> particularly for the native</font>

1325
00:48:59,960 --> 00:49:09,030
techniques we looked at<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think there</font>

1326
00:49:06,060 --> 00:49:13,220
<font color="#E5E5E5">could be more work for the sort of use</font>

1327
00:49:09,030 --> 00:49:16,740
case of<font color="#E5E5E5"> finding pre-existing implants so</font>

1328
00:49:13,220 --> 00:49:18,899
<font color="#E5E5E5">any more instrumentation</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can get</font>

1329
00:49:16,740 --> 00:49:21,060
from<font color="#E5E5E5"> the OS for example for finally you</font>

1330
00:49:18,900 --> 00:49:22,290
know identifying what should be there

1331
00:49:21,060 --> 00:49:24,750
versus what shouldn't be would make

1332
00:49:22,290 --> 00:49:26,490
<font color="#E5E5E5">those things a lot easier so for example</font>

1333
00:49:24,750 --> 00:49:29,240
with dotnet becomes very<font color="#E5E5E5"> complicated to</font>

1334
00:49:26,490 --> 00:49:32,549
analyze that space and find<font color="#E5E5E5"> separate the</font>

1335
00:49:29,240 --> 00:49:34,109
legitimate code from the potentially

1336
00:49:32,550 --> 00:49:35,670
malicious code<font color="#E5E5E5"> anything that sort of</font>

1337
00:49:34,109 --> 00:49:37,740
<font color="#E5E5E5">fits in there is gonna be really</font>

1338
00:49:35,670 --> 00:49:40,050
valuable<font color="#E5E5E5"> in future in pushing these</font>

1339
00:49:37,740 --> 00:49:42,169
techniques<font color="#E5E5E5"> but</font><font color="#CCCCCC"> otherwise I</font><font color="#E5E5E5"> mean I think</font>

1340
00:49:40,050 --> 00:49:44,550
we're gonna start<font color="#E5E5E5"> seeing</font><font color="#CCCCCC"> a lot more</font>

1341
00:49:42,170 --> 00:49:47,369
evasion techniques<font color="#E5E5E5"> being</font><font color="#CCCCCC"> used in</font><font color="#E5E5E5"> this</font>

1342
00:49:44,550 --> 00:49:48,900
space now the memory<font color="#CCCCCC"> analysis techniques</font>

1343
00:49:47,369 --> 00:49:51,359
and sort<font color="#CCCCCC"> of code injection</font><font color="#E5E5E5"> tracing</font>

1344
00:49:48,900 --> 00:49:53,070
methods and EDR tooling and so forth has

1345
00:49:51,359 --> 00:49:54,390
become a lot more<font color="#E5E5E5"> commonplace and we'll</font>

1346
00:49:53,070 --> 00:49:58,530
probably<font color="#E5E5E5"> see a lot more evolution in</font>

1347
00:49:54,390 --> 00:50:00,960
this<font color="#E5E5E5"> go forwards so that concludes</font><font color="#CCCCCC"> my</font>

1348
00:49:58,530 --> 00:50:02,440
presentation so at this point it's were

1349
00:50:00,960 --> 00:50:11,179
there<font color="#E5E5E5"> any questions</font>

1350
00:50:02,440 --> 00:50:11,179
[Applause]

1351
00:50:12,880 --> 00:50:18,230
great talk<font color="#E5E5E5"> Thanks</font><font color="#CCCCCC"> do you have a blog or</font>

1352
00:50:15,980 --> 00:50:19,850
<font color="#CCCCCC">anything with some suggestions on some</font>

1353
00:50:18,230 --> 00:50:21,950
<font color="#CCCCCC">specific events that you'd like to see</font>

1354
00:50:19,850 --> 00:50:22,279
in<font color="#E5E5E5"> Windows or dotnet or anything like</font>

1355
00:50:21,950 --> 00:50:27,620
<font color="#E5E5E5">that</font>

1356
00:50:22,280 --> 00:50:29,570
I haven't yeah we haven't<font color="#E5E5E5"> put anything</font>

1357
00:50:27,620 --> 00:50:32,240
specific<font color="#CCCCCC"> like that but I'd</font><font color="#E5E5E5"> love to have</font>

1358
00:50:29,570 --> 00:50:33,710
conversations with people<font color="#E5E5E5"> about it</font><font color="#CCCCCC"> we've</font>

1359
00:50:32,240 --> 00:50:35,359
got there's lots of stuff on<font color="#E5E5E5"> our blog</font>

1360
00:50:33,710 --> 00:50:36,890
<font color="#E5E5E5">from you know for some of these</font>

1361
00:50:35,360 --> 00:50:39,200
techniques<font color="#E5E5E5"> and some of the content this</font>

1362
00:50:36,890 --> 00:50:41,839
<font color="#E5E5E5">presentation has been gone over but from</font>

1363
00:50:39,200 --> 00:50:44,740
what I'd<font color="#E5E5E5"> like to see I just yeah I think</font>

1364
00:50:41,840 --> 00:50:44,740
I'd love<font color="#E5E5E5"> to have a conversation</font>

1365
00:51:08,050 --> 00:51:17,890
<font color="#CCCCCC">a great presentation i</font><font color="#E5E5E5"> specifc really</font>

1366
00:51:16,330 --> 00:51:20,710
like to know what are your<font color="#CCCCCC"> thoughts on</font>

1367
00:51:17,890 --> 00:51:24,129
things<font color="#E5E5E5"> like recently happening in cactus</font>

1368
00:51:20,710 --> 00:51:26,460
torch<font color="#E5E5E5"> malware where they make use of not</font>

1369
00:51:24,130 --> 00:51:29,190
<font color="#E5E5E5">neck</font><font color="#CCCCCC"> to j</font><font color="#E5E5E5"> s where they</font><font color="#CCCCCC"> compiled up</font>

1370
00:51:26,460 --> 00:51:32,440
assembly into the<font color="#CCCCCC"> javascript and</font><font color="#E5E5E5"> then</font>

1371
00:51:29,190 --> 00:51:33,930
making use of all the comb common oily

1372
00:51:32,440 --> 00:51:37,150
<font color="#CCCCCC">api's</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> javascript they just</font>

1373
00:51:33,930 --> 00:51:39,940
execute<font color="#CCCCCC"> javascript which is nothing like</font>

1374
00:51:37,150 --> 00:51:42,850
<font color="#E5E5E5">a malicious DLL for assembly</font><font color="#CCCCCC"> how could</font>

1375
00:51:39,940 --> 00:51:46,420
we go<font color="#CCCCCC"> about detecting those kind of you</font>

1376
00:51:42,850 --> 00:51:49,299
<font color="#CCCCCC">know</font><font color="#E5E5E5"> stealthy fireless living on the</font>

1377
00:51:46,420 --> 00:51:50,980
land attacks<font color="#CCCCCC"> so</font><font color="#E5E5E5"> talking about</font><font color="#CCCCCC"> just</font>

1378
00:51:49,300 --> 00:51:53,140
<font color="#E5E5E5">clarified dotnet</font><font color="#CCCCCC"> siege</font><font color="#E5E5E5"> is that yes</font>

1379
00:51:50,980 --> 00:51:55,450
<font color="#CCCCCC">dotnet PJs which has been recent years</font>

1380
00:51:53,140 --> 00:51:58,060
in cactus torch i'd need to<font color="#E5E5E5"> go and have</font>

1381
00:51:55,450 --> 00:51:59,919
<font color="#CCCCCC">a look at</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> again but</font><font color="#E5E5E5"> i think i'm</font>

1382
00:51:58,060 --> 00:52:01,690
pretty<font color="#E5E5E5"> sure that</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> etw</font>

1383
00:51:59,920 --> 00:52:03,310
approaches like<font color="#CCCCCC"> that's that there would</font>

1384
00:52:01,690 --> 00:52:05,700
give instrumentation into<font color="#E5E5E5"> that and so</font>

1385
00:52:03,310 --> 00:52:09,279
you would<font color="#CCCCCC"> you'd be able to see that</font>

1386
00:52:05,700 --> 00:52:11,399
there is<font color="#E5E5E5"> essentially some dotnet</font>

1387
00:52:09,280 --> 00:52:15,100
compilation stuff going<font color="#E5E5E5"> on</font>

1388
00:52:11,400 --> 00:52:18,040
after the fats<font color="#CCCCCC"> i would</font><font color="#E5E5E5"> need to double</font>

1389
00:52:15,100 --> 00:52:19,600
<font color="#E5E5E5">check on that</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I suspect that the</font><font color="#CCCCCC"> etw</font>

1390
00:52:18,040 --> 00:52:22,980
providers would give some<font color="#E5E5E5"> insight to</font>

1391
00:52:19,600 --> 00:52:22,980
<font color="#CCCCCC">that but I</font><font color="#E5E5E5"> haven't tried</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> yet</font>

1392
00:52:30,249 --> 00:52:34,799
<font color="#E5E5E5">all right well thank you</font><font color="#CCCCCC"> again Luke</font>

1393
00:52:32,930 --> 00:52:41,879
please<font color="#E5E5E5"> give another round of applause</font>

1394
00:52:34,800 --> 00:52:41,879
[Applause]

