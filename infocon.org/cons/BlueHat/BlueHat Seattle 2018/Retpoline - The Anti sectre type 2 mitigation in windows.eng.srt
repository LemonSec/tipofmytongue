1
00:00:00,000 --> 00:00:04,859
good morning blue hat it is<font color="#E5E5E5"> Thursday and</font>

2
00:00:02,370 --> 00:00:07,859
day<font color="#CCCCCC"> two of</font><font color="#E5E5E5"> the talks and this morning we</font>

3
00:00:04,859 --> 00:00:10,769
<font color="#CCCCCC">are opening up this room in Kodiak on</font>

4
00:00:07,859 --> 00:00:12,330
the<font color="#E5E5E5"> hardware track to start that we are</font>

5
00:00:10,769 --> 00:00:14,780
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about something</font><font color="#CCCCCC"> that has</font>

6
00:00:12,330 --> 00:00:18,240
came on the scene at least publicly

7
00:00:14,780 --> 00:00:20,460
<font color="#CCCCCC">early in the</font><font color="#E5E5E5"> year it's sort of consumed</font>

8
00:00:18,240 --> 00:00:22,680
a lot of cycles for some of the<font color="#E5E5E5"> people</font>

9
00:00:20,460 --> 00:00:24,510
here at Microsoft<font color="#E5E5E5"> and across the</font>

10
00:00:22,680 --> 00:00:27,840
industry<font color="#CCCCCC"> raise</font><font color="#E5E5E5"> your hand if you're</font>

11
00:00:24,510 --> 00:00:31,650
familiar<font color="#E5E5E5"> with those now famous pieces of</font>

12
00:00:27,840 --> 00:00:34,410
<font color="#E5E5E5">exploit</font><font color="#CCCCCC"> specter</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> meltdown anybody</font>

13
00:00:31,650 --> 00:00:37,350
familiar<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> we've got you're on</font>

14
00:00:34,410 --> 00:00:38,699
the right talk then<font color="#CCCCCC"> andrea</font><font color="#E5E5E5"> is here today</font>

15
00:00:37,350 --> 00:00:40,620
<font color="#E5E5E5">he is one</font><font color="#CCCCCC"> of our Windows kernel</font>

16
00:00:38,700 --> 00:00:43,290
<font color="#E5E5E5">researchers and he's going to talk</font><font color="#CCCCCC"> to</font>

17
00:00:40,620 --> 00:00:46,140
you about ret<font color="#E5E5E5"> Poe line which is one of</font>

18
00:00:43,290 --> 00:00:49,589
<font color="#CCCCCC">the mitigations that was developed for</font>

19
00:00:46,140 --> 00:00:53,780
<font color="#CCCCCC">the specter vulnerabilities so with that</font>

20
00:00:49,590 --> 00:00:53,780
<font color="#E5E5E5">please welcome him to</font><font color="#CCCCCC"> the blue hat stage</font>

21
00:00:55,610 --> 00:01:01,050
hello guys yes today we are<font color="#E5E5E5"> speaking</font>

22
00:00:58,710 --> 00:01:03,270
<font color="#E5E5E5">about</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> Pauline</font><font color="#CCCCCC"> that especially how</font>

23
00:01:01,050 --> 00:01:12,439
we have implemented in these mitigation

24
00:01:03,270 --> 00:01:12,439
<font color="#E5E5E5">in Windows</font><font color="#CCCCCC"> okay just a</font><font color="#E5E5E5"> moment</font>

25
00:01:17,560 --> 00:01:24,940
<font color="#E5E5E5">okay okay now it works so before like</font>

26
00:01:21,070 --> 00:01:27,179
starting just five words<font color="#E5E5E5"> about me</font><font color="#CCCCCC"> I am a</font>

27
00:01:24,940 --> 00:01:29,679
like<font color="#CCCCCC"> feminist software engineer in</font>

28
00:01:27,180 --> 00:01:32,020
Windows kernel based<font color="#E5E5E5"> team I'm a</font>

29
00:01:29,680 --> 00:01:35,830
Microsoft<font color="#E5E5E5"> Wes intern assigned to us and</font>

30
00:01:32,020 --> 00:01:37,390
<font color="#E5E5E5">a security researcher</font><font color="#CCCCCC"> and I work at</font>

31
00:01:35,830 --> 00:01:39,039
privileged<font color="#E5E5E5"> City stealing Microsoft for</font>

32
00:01:37,390 --> 00:01:41,320
like the Microsoft<font color="#CCCCCC"> read</font><font color="#E5E5E5"> Intelligence</font>

33
00:01:39,040 --> 00:01:44,190
<font color="#E5E5E5">Center and like before in time the Talos</font>

34
00:01:41,320 --> 00:01:48,880
group of Cisco system like a researcher

35
00:01:44,190 --> 00:01:51,479
and basically<font color="#E5E5E5"> I did some research</font>

36
00:01:48,880 --> 00:01:53,979
project especially<font color="#E5E5E5"> one that</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to</font>

37
00:01:51,479 --> 00:01:55,420
<font color="#E5E5E5">speak about here very fast least the</font>

38
00:01:53,979 --> 00:01:58,509
first<font color="#E5E5E5"> to you for you he would get in</font>

39
00:01:55,420 --> 00:02:01,899
2012 the first available patch<font color="#CCCCCC"> gotta 8.1</font>

40
00:01:58,509 --> 00:02:04,360
bypass in 2014 and like many others and

41
00:02:01,899 --> 00:02:07,800
especially<font color="#E5E5E5"> I was like the first designer</font>

42
00:02:04,360 --> 00:02:10,090
of like the windows<font color="#E5E5E5"> pitted</font><font color="#CCCCCC"> pity driver</font>

43
00:02:07,800 --> 00:02:11,829
<font color="#E5E5E5">okay I need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> apologize in the</font>

44
00:02:10,090 --> 00:02:14,380
beginning because like this torque was

45
00:02:11,830 --> 00:02:18,340
like<font color="#E5E5E5"> huge</font><font color="#CCCCCC"> so I have tried to concentrate</font>

46
00:02:14,380 --> 00:02:21,670
like the most important<font color="#CCCCCC"> in</font><font color="#E5E5E5"> information</font>

47
00:02:18,340 --> 00:02:23,560
<font color="#E5E5E5">and like I've divided in four pieces the</font>

48
00:02:21,670 --> 00:02:25,690
<font color="#CCCCCC">first one in like it's an</font><font color="#E5E5E5"> introduction</font>

49
00:02:23,560 --> 00:02:27,519
about<font color="#CCCCCC"> what is spectrum</font><font color="#E5E5E5"> meltdown will be</font>

50
00:02:25,690 --> 00:02:29,280
very fast<font color="#E5E5E5"> the second we</font><font color="#CCCCCC"> are speaking</font>

51
00:02:27,519 --> 00:02:31,870
about<font color="#CCCCCC"> the general architecture on the</font>

52
00:02:29,280 --> 00:02:35,760
<font color="#CCCCCC">Red</font><font color="#E5E5E5"> Pony implementation in Windows and</font>

53
00:02:31,870 --> 00:02:35,760
then we are going<font color="#E5E5E5"> to depend some details</font>

54
00:02:37,829 --> 00:02:45,880
so speaking<font color="#CCCCCC"> about spectrum meltdown as</font>

55
00:02:42,100 --> 00:02:47,620
you probably know they are two<font color="#E5E5E5"> of the</font>

56
00:02:45,880 --> 00:02:49,269
most dangerous<font color="#CCCCCC"> and like effective</font>

57
00:02:47,620 --> 00:02:53,890
vulnerability that<font color="#E5E5E5"> I've been discovered</font>

58
00:02:49,269 --> 00:02:56,459
in all CPUs<font color="#CCCCCC"> since around</font><font color="#E5E5E5"> 1998 I will say</font>

59
00:02:53,890 --> 00:03:00,790
almost because not all CPUs<font color="#E5E5E5"> as</font>

60
00:02:56,459 --> 00:03:02,799
vulnerable but most<font color="#E5E5E5"> of them at the time</font>

61
00:03:00,790 --> 00:03:04,900
<font color="#E5E5E5">of</font><font color="#CCCCCC"> this like presentation at least</font><font color="#E5E5E5"> five</font>

62
00:03:02,799 --> 00:03:07,170
different variation have been<font color="#CCCCCC"> disguise</font>

63
00:03:04,900 --> 00:03:09,600
have been publicly disclosed<font color="#CCCCCC"> disclose it</font>

64
00:03:07,170 --> 00:03:11,980
three<font color="#E5E5E5"> are the most dangerous</font>

65
00:03:09,600 --> 00:03:15,549
once I note this torque is<font color="#E5E5E5"> not about</font>

66
00:03:11,980 --> 00:03:17,828
spectrum meltdown<font color="#E5E5E5"> I'm exactly indeed I'm</font>

67
00:03:15,549 --> 00:03:19,630
not an exploiter<font color="#E5E5E5"> there are already</font>

68
00:03:17,829 --> 00:03:22,420
multiple presentation that have been

69
00:03:19,630 --> 00:03:26,370
like<font color="#E5E5E5"> presented and if you are interested</font>

70
00:03:22,420 --> 00:03:26,369
<font color="#CCCCCC">in details you can check</font><font color="#E5E5E5"> those</font>

71
00:03:27,680 --> 00:03:32,209
so here I<font color="#E5E5E5"> will try to go quite fast</font>

72
00:03:30,739 --> 00:03:35,000
<font color="#CCCCCC">because I don't we</font><font color="#E5E5E5"> don't have a lot of</font>

73
00:03:32,209 --> 00:03:36,230
<font color="#E5E5E5">times for understanding this the</font><font color="#CCCCCC"> type to</font>

74
00:03:35,000 --> 00:03:39,319
attack we need<font color="#E5E5E5"> to understand two things</font>

75
00:03:36,230 --> 00:03:41,720
<font color="#E5E5E5">in the sea in the modern CPU for first</font>

76
00:03:39,319 --> 00:03:43,849
is the branch target predictor and<font color="#CCCCCC"> the</font>

77
00:03:41,720 --> 00:03:45,980
second<font color="#CCCCCC"> index is</font><font color="#E5E5E5"> the cache in this light</font>

78
00:03:43,849 --> 00:03:48,290
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is like represented the branch</font>

79
00:03:45,980 --> 00:03:50,450
target predictor<font color="#E5E5E5"> that basically works in</font>

80
00:03:48,290 --> 00:03:53,840
<font color="#E5E5E5">this way there is an indexing function</font>

81
00:03:50,450 --> 00:03:56,209
that generate<font color="#E5E5E5"> a</font><font color="#CCCCCC"> tag and from the death</font>

82
00:03:53,840 --> 00:03:58,189
tag the CPU can like predicted at the

83
00:03:56,209 --> 00:04:00,290
target<font color="#E5E5E5"> so means that if you</font><font color="#CCCCCC"> have an</font>

84
00:03:58,189 --> 00:04:05,569
indirect call in like<font color="#E5E5E5"> an</font><font color="#CCCCCC"> address for</font>

85
00:04:00,290 --> 00:04:10,000
example<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> 9f</font><font color="#E5E5E5"> AAA</font><font color="#CCCCCC"> 9 F 4 3 a a</font>

86
00:04:05,569 --> 00:04:13,220
1 7 the CPU store the target<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> a</font>

87
00:04:10,000 --> 00:04:15,799
an index of the original original

88
00:04:13,220 --> 00:04:18,589
<font color="#E5E5E5">address in this</font><font color="#CCCCCC"> case this is actually</font>

89
00:04:15,799 --> 00:04:22,460
<font color="#CCCCCC">designing an example basically actually</font>

90
00:04:18,589 --> 00:04:24,739
uses the<font color="#E5E5E5"> last 30</font><font color="#CCCCCC"> bits and so in this</font>

91
00:04:22,460 --> 00:04:26,900
<font color="#E5E5E5">example say</font><font color="#CCCCCC"> that the target should</font><font color="#E5E5E5"> be</font>

92
00:04:24,740 --> 00:04:28,880
<font color="#E5E5E5">like the last 30 bit of course it's not</font>

93
00:04:26,900 --> 00:04:31,179
correct<font color="#E5E5E5"> because the 30 bit doesn't</font>

94
00:04:28,880 --> 00:04:35,360
include the<font color="#CCCCCC"> 8 but that is another story</font>

95
00:04:31,180 --> 00:04:37,669
<font color="#E5E5E5">and yes for the for doing this attack</font>

96
00:04:35,360 --> 00:04:40,789
you need<font color="#E5E5E5"> to like reverse the the branch</font>

97
00:04:37,669 --> 00:04:43,250
<font color="#E5E5E5">target predictor and can be</font><font color="#CCCCCC"> reverse</font><font color="#E5E5E5"> the</font>

98
00:04:40,789 --> 00:04:46,550
link that<font color="#E5E5E5"> I showed in</font><font color="#CCCCCC"> the slide is like</font>

99
00:04:43,250 --> 00:04:53,930
<font color="#E5E5E5">explain how people</font><font color="#CCCCCC"> adversities</font>

100
00:04:46,550 --> 00:04:56,090
architecture so the second<font color="#E5E5E5"> thing that</font>

101
00:04:53,930 --> 00:04:59,180
you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know is about the CPU cache</font>

102
00:04:56,090 --> 00:05:02,590
even the CPU cache is first is like<font color="#CCCCCC"> a</font>

103
00:04:59,180 --> 00:05:05,780
very fast volatile<font color="#E5E5E5"> a memory that</font><font color="#CCCCCC"> is like</font>

104
00:05:02,590 --> 00:05:10,159
<font color="#E5E5E5">reside in the CPU and this</font><font color="#CCCCCC"> usually is</font>

105
00:05:05,780 --> 00:05:12,080
really fast<font color="#E5E5E5"> but is architecture is a CPU</font>

106
00:05:10,159 --> 00:05:15,860
dependent<font color="#E5E5E5"> so this is another example</font>

107
00:05:12,080 --> 00:05:18,409
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> actually true basically like</font>

108
00:05:15,860 --> 00:05:21,289
we have like an example<font color="#E5E5E5"> of a 32 bit CPU</font>

109
00:05:18,409 --> 00:05:24,469
<font color="#CCCCCC">you can imagine the cache like a bigger</font>

110
00:05:21,289 --> 00:05:28,699
a competitor composite of<font color="#E5E5E5"> row where each</font>

111
00:05:24,470 --> 00:05:32,240
row is 256<font color="#E5E5E5"> byte long in this case the</font>

112
00:05:28,699 --> 00:05:34,460
address<font color="#CCCCCC"> that could be like physical or</font>

113
00:05:32,240 --> 00:05:37,070
virtual address is<font color="#E5E5E5"> not important in in</font>

114
00:05:34,460 --> 00:05:40,340
this example is composite of<font color="#E5E5E5"> like a peg</font>

115
00:05:37,070 --> 00:05:41,409
attack<font color="#E5E5E5"> a line and the offset in this way</font>

116
00:05:40,340 --> 00:05:43,688
in this way<font color="#E5E5E5"> they see</font>

117
00:05:41,409 --> 00:05:45,819
you can like store the data in<font color="#E5E5E5"> a</font>

118
00:05:43,689 --> 00:05:48,159
particular<font color="#E5E5E5"> line and offset of like the</font>

119
00:05:45,819 --> 00:05:52,199
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> in this case for</font><font color="#CCCCCC"> example the line</font>

120
00:05:48,159 --> 00:05:56,529
is<font color="#E5E5E5"> X 20 and the offset is</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and uses the</font>

121
00:05:52,199 --> 00:05:59,919
first like<font color="#E5E5E5"> 32 the first 16-bit as a</font><font color="#CCCCCC"> tag</font>

122
00:05:56,529 --> 00:06:02,739
so the CPU<font color="#CCCCCC"> store this tag in that way if</font>

123
00:05:59,919 --> 00:06:05,849
<font color="#CCCCCC">like there is a cache collision you</font><font color="#E5E5E5"> can</font>

124
00:06:02,739 --> 00:06:08,409
know<font color="#E5E5E5"> that because the tag is different</font>

125
00:06:05,849 --> 00:06:10,539
these are the<font color="#E5E5E5"> two basics that</font><font color="#CCCCCC"> you can</font>

126
00:06:08,409 --> 00:06:13,029
you need<font color="#E5E5E5"> to understand for like you need</font>

127
00:06:10,539 --> 00:06:21,119
<font color="#E5E5E5">to know</font><font color="#CCCCCC"> of to understanding the spectra</font>

128
00:06:13,029 --> 00:06:23,499
<font color="#CCCCCC">v2 attack so let's see an example</font><font color="#E5E5E5"> in</font>

129
00:06:21,119 --> 00:06:25,419
<font color="#CCCCCC">this case there is a source process of a</font>

130
00:06:23,499 --> 00:06:27,429
victim process<font color="#E5E5E5"> first thing that you need</font>

131
00:06:25,419 --> 00:06:29,769
to<font color="#E5E5E5"> know</font><font color="#CCCCCC"> to attack</font><font color="#E5E5E5"> using the spectra type</font>

132
00:06:27,429 --> 00:06:31,688
<font color="#CCCCCC">2 you need</font><font color="#E5E5E5"> to find a gadget the gadget</font>

133
00:06:29,769 --> 00:06:35,009
must<font color="#E5E5E5"> be to assess</font><font color="#CCCCCC"> to arise in a</font>

134
00:06:31,689 --> 00:06:38,589
particular way<font color="#E5E5E5"> we will see in a</font><font color="#CCCCCC"> while ow</font>

135
00:06:35,009 --> 00:06:41,110
<font color="#E5E5E5">the point is</font><font color="#CCCCCC"> that basically first what</font>

136
00:06:38,589 --> 00:06:43,269
you do you you replace an indirect call

137
00:06:41,110 --> 00:06:45,399
in this case like nt7

138
00:06:43,269 --> 00:06:48,699
with an indirect call to<font color="#E5E5E5"> york your</font>

139
00:06:45,399 --> 00:06:51,129
gadget and you start to like train the

140
00:06:48,699 --> 00:06:54,009
branch predictor in this example<font color="#CCCCCC"> i have</font>

141
00:06:51,129 --> 00:06:56,229
<font color="#CCCCCC">written like the be addressed by a delta</font>

142
00:06:54,009 --> 00:06:59,409
and gamma value because as we<font color="#E5E5E5"> have seen</font>

143
00:06:56,229 --> 00:07:01,808
like the vehicle address<font color="#CCCCCC"> it's it's</font>

144
00:06:59,409 --> 00:07:04,539
important that the index is equal not

145
00:07:01,809 --> 00:07:08,139
like the that the do to<font color="#CCCCCC"> address is exact</font>

146
00:07:04,539 --> 00:07:09,669
<font color="#E5E5E5">the same but for this</font><font color="#CCCCCC"> example the we</font>

147
00:07:08,139 --> 00:07:11,669
have to address<font color="#E5E5E5"> you can consider</font><font color="#CCCCCC"> even</font>

148
00:07:09,669 --> 00:07:16,438
the<font color="#E5E5E5"> vo to address the same in source and</font>

149
00:07:11,669 --> 00:07:18,969
<font color="#E5E5E5">victim process so what you do</font><font color="#CCCCCC"> you like</font>

150
00:07:16,439 --> 00:07:21,099
started to call it<font color="#E5E5E5"> the gadget in the</font>

151
00:07:18,969 --> 00:07:23,800
using<font color="#CCCCCC"> this indirect</font><font color="#E5E5E5"> caller</font>

152
00:07:21,099 --> 00:07:27,308
I mean<font color="#E5E5E5"> coal and tea set haven't a lot of</font>

153
00:07:23,800 --> 00:07:30,159
times in<font color="#E5E5E5"> this in that way you train the</font>

154
00:07:27,309 --> 00:07:33,550
branch target predictor after you did

155
00:07:30,159 --> 00:07:35,969
<font color="#E5E5E5">that you need to raise the victim</font>

156
00:07:33,550 --> 00:07:38,949
process<font color="#E5E5E5"> to call that the original intent</font>

157
00:07:35,969 --> 00:07:41,860
in this in this way the the<font color="#CCCCCC"> victim</font>

158
00:07:38,949 --> 00:07:44,019
process the branch<font color="#CCCCCC"> the</font><font color="#E5E5E5"> target predictor</font>

159
00:07:41,860 --> 00:07:46,449
<font color="#CCCCCC">note to call</font><font color="#E5E5E5"> the gadget instead of like</font>

160
00:07:44,019 --> 00:07:48,550
the original<font color="#E5E5E5"> set event then he</font>

161
00:07:46,449 --> 00:07:51,129
<font color="#E5E5E5">understood it understand that like</font>

162
00:07:48,550 --> 00:07:53,349
basically the<font color="#E5E5E5"> target is wrong and clear</font>

163
00:07:51,129 --> 00:07:54,790
out<font color="#E5E5E5"> the results but the important stuff</font>

164
00:07:53,349 --> 00:08:00,849
is that like the

165
00:07:54,790 --> 00:08:05,710
the results are seen<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> so</font>

166
00:08:00,850 --> 00:08:07,900
here is like<font color="#CCCCCC"> I</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to be like the DeRay</font>

167
00:08:05,710 --> 00:08:10,750
<font color="#E5E5E5">as you can see there is a victim array</font>

168
00:08:07,900 --> 00:08:13,090
<font color="#E5E5E5">that basically need to</font><font color="#CCCCCC"> no need to</font><font color="#E5E5E5"> be</font>

169
00:08:10,750 --> 00:08:16,900
<font color="#E5E5E5">like</font><font color="#CCCCCC"> Neera</font><font color="#E5E5E5"> like a secret value that you</font>

170
00:08:13,090 --> 00:08:20,320
<font color="#E5E5E5">want to read the attacker controller the</font>

171
00:08:16,900 --> 00:08:21,099
control the index so if the index is out

172
00:08:20,320 --> 00:08:25,330
<font color="#CCCCCC">of bound</font>

173
00:08:21,100 --> 00:08:28,000
you can like read the the<font color="#E5E5E5"> the secret</font>

174
00:08:25,330 --> 00:08:30,580
like value that in this<font color="#E5E5E5"> case is actual</font>

175
00:08:28,000 --> 00:08:33,429
actor<font color="#E5E5E5"> there is even a multiplication</font><font color="#CCCCCC"> by</font>

176
00:08:30,580 --> 00:08:37,510
256<font color="#CCCCCC"> this is because you need</font><font color="#E5E5E5"> to pollute</font>

177
00:08:33,429 --> 00:08:41,228
<font color="#E5E5E5">an entry in the in the cache</font><font color="#CCCCCC"> in this</font>

178
00:08:37,510 --> 00:08:44,260
case I have written 256 but basically

179
00:08:41,229 --> 00:08:48,400
the<font color="#E5E5E5"> 256 is the cache granularity so the</font>

180
00:08:44,260 --> 00:08:51,130
size of<font color="#E5E5E5"> the line of the cache usually 64</font>

181
00:08:48,400 --> 00:08:53,790
bytes<font color="#E5E5E5"> but this is not like the example</font>

182
00:08:51,130 --> 00:08:56,650
<font color="#E5E5E5">that I did because</font><font color="#CCCCCC"> the example is 256</font>

183
00:08:53,790 --> 00:08:59,560
<font color="#E5E5E5">higher multiples are used to like the to</font>

184
00:08:56,650 --> 00:09:02,470
reduce noise<font color="#CCCCCC"> so even if you use IR</font>

185
00:08:59,560 --> 00:09:05,410
multiples<font color="#CCCCCC"> you can like pollute</font><font color="#E5E5E5"> maybe one</font>

186
00:09:02,470 --> 00:09:06,910
cache line and then after<font color="#E5E5E5"> four lines you</font>

187
00:09:05,410 --> 00:09:08,800
can pollute the other ones<font color="#CCCCCC"> if not a</font>

188
00:09:06,910 --> 00:09:11,230
problem<font color="#E5E5E5"> the important is that that value</font>

189
00:09:08,800 --> 00:09:13,030
<font color="#E5E5E5">that</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be like smaller</font>

190
00:09:11,230 --> 00:09:16,780
than the cache<font color="#CCCCCC"> line the cache</font>

191
00:09:13,030 --> 00:09:18,640
granularity and yes<font color="#E5E5E5"> that's it</font>

192
00:09:16,780 --> 00:09:19,930
so basically after you<font color="#E5E5E5"> like</font><font color="#CCCCCC"> arrays the</font>

193
00:09:18,640 --> 00:09:22,390
indirect branch<font color="#E5E5E5"> of the vetting process</font>

194
00:09:19,930 --> 00:09:24,880
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the source process you basically</font>

195
00:09:22,390 --> 00:09:28,780
measure their access time of<font color="#CCCCCC"> the prop</font>

196
00:09:24,880 --> 00:09:29,920
array<font color="#E5E5E5"> the proper I must be like</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> by</font>

197
00:09:28,780 --> 00:09:33,400
<font color="#E5E5E5">that by</font><font color="#CCCCCC"> the attacker</font>

198
00:09:29,920 --> 00:09:35,250
not exactly if<font color="#CCCCCC"> this</font><font color="#E5E5E5"> like a sentence is</font>

199
00:09:33,400 --> 00:09:38,709
<font color="#CCCCCC">not exactly true because as we have seen</font>

200
00:09:35,250 --> 00:09:41,590
<font color="#CCCCCC">its devious to address you need to only</font>

201
00:09:38,710 --> 00:09:44,740
<font color="#E5E5E5">know the how is calculated in the in the</font>

202
00:09:41,590 --> 00:09:47,740
cache<font color="#E5E5E5"> so you can basically theoretical</font>

203
00:09:44,740 --> 00:09:50,950
you can even<font color="#E5E5E5"> access like this measure</font>

204
00:09:47,740 --> 00:09:58,060
the cache access using<font color="#CCCCCC"> another like prop</font>

205
00:09:50,950 --> 00:10:00,520
array<font color="#E5E5E5"> okay I'm sorry if I've</font><font color="#CCCCCC"> been too</font>

206
00:09:58,060 --> 00:10:05,050
fast but like as I said<font color="#E5E5E5"> this torque is</font>

207
00:10:00,520 --> 00:10:06,970
<font color="#E5E5E5">not about spectra basically we got some</font>

208
00:10:05,050 --> 00:10:08,439
conclusions<font color="#E5E5E5"> the conclusion is that the</font>

209
00:10:06,970 --> 00:10:10,120
spectra<font color="#E5E5E5"> type to attack easy</font>

210
00:10:08,440 --> 00:10:13,570
effective even in<font color="#E5E5E5"> kernel mode address</font>

211
00:10:10,120 --> 00:10:16,000
space<font color="#E5E5E5"> there one important things about</font>

212
00:10:13,570 --> 00:10:18,730
<font color="#E5E5E5">this attack is that</font><font color="#CCCCCC"> the attacker could</font>

213
00:10:16,000 --> 00:10:21,760
speculate on<font color="#CCCCCC"> leaf on indirect branches</font>

214
00:10:18,730 --> 00:10:25,180
and not on direct one if you have direct

215
00:10:21,760 --> 00:10:26,500
<font color="#CCCCCC">branches these attack is useless</font><font color="#E5E5E5"> so</font>

216
00:10:25,180 --> 00:10:29,890
basically we<font color="#E5E5E5"> needed a way</font><font color="#CCCCCC"> to mitigate</font>

217
00:10:26,500 --> 00:10:32,800
<font color="#E5E5E5">the</font><font color="#CCCCCC"> cpu vulnerability and do and we</font>

218
00:10:29,890 --> 00:10:35,770
needed<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> that in a how to say in a</font>

219
00:10:32,800 --> 00:10:37,599
smart way that doesn't destroy<font color="#E5E5E5"> the the</font>

220
00:10:35,770 --> 00:10:41,290
<font color="#CCCCCC">performance of the of the computer</font>

221
00:10:37,600 --> 00:10:43,270
<font color="#CCCCCC">basically so the possible mitigation the</font>

222
00:10:41,290 --> 00:10:45,760
first one is one like<font color="#CCCCCC"> that is like has</font>

223
00:10:43,270 --> 00:10:48,130
<font color="#CCCCCC">been like suggested by</font><font color="#E5E5E5"> Intel using the</font>

224
00:10:45,760 --> 00:10:52,000
indirect branch restricted speculation

225
00:10:48,130 --> 00:10:55,300
feature that basically<font color="#CCCCCC"> disable the CPU</font>

226
00:10:52,000 --> 00:10:57,460
branch predictor completely between

227
00:10:55,300 --> 00:10:59,469
different privilege levels<font color="#E5E5E5"> and even on</font>

228
00:10:57,460 --> 00:11:01,600
the sibling<font color="#E5E5E5"> CPU thread so this means</font>

229
00:10:59,470 --> 00:11:03,970
<font color="#E5E5E5">that if you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> like a physical core</font>

230
00:11:01,600 --> 00:11:07,540
and in that physical car is like<font color="#CCCCCC"> muli</font>

231
00:11:03,970 --> 00:11:10,060
<font color="#E5E5E5">per traded so run two different read the</font>

232
00:11:07,540 --> 00:11:11,939
IBRS<font color="#E5E5E5"> this the</font><font color="#CCCCCC"> disable</font><font color="#E5E5E5"> the branch</font>

233
00:11:10,060 --> 00:11:15,160
predictor ribbon on the sibling threads

234
00:11:11,940 --> 00:11:19,990
there are even<font color="#E5E5E5"> other like possibility</font>

235
00:11:15,160 --> 00:11:22,870
like uses<font color="#CCCCCC"> IB</font><font color="#E5E5E5"> PBS the</font><font color="#CCCCCC"> SDI VP</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

236
00:11:19,990 --> 00:11:25,870
still<font color="#CCCCCC"> other</font><font color="#E5E5E5"> mitigation otherwise we can</font>

237
00:11:22,870 --> 00:11:28,480
use like read Pauline<font color="#E5E5E5"> so basically the</font>

238
00:11:25,870 --> 00:11:31,330
<font color="#CCCCCC">difference between IBRS and</font><font color="#E5E5E5"> IB PB and</font><font color="#CCCCCC"> sa</font>

239
00:11:28,480 --> 00:11:32,800
<font color="#CCCCCC">IBPS like</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> meaner</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> say IBP</font>

240
00:11:31,330 --> 00:11:34,990
<font color="#CCCCCC">disable</font><font color="#E5E5E5"> only the branch predictor</font>

241
00:11:32,800 --> 00:11:37,540
between like threads and not<font color="#E5E5E5"> between</font>

242
00:11:34,990 --> 00:11:42,600
<font color="#E5E5E5">different privilege level and IB P we</font>

243
00:11:37,540 --> 00:11:42,599
started<font color="#CCCCCC"> disable completely M flush them</font>

244
00:11:42,889 --> 00:11:53,259
branch predictor buffer but they are not

245
00:11:46,009 --> 00:11:53,259
important that<font color="#E5E5E5"> that at that stage</font><font color="#CCCCCC"> so</font>

246
00:11:53,500 --> 00:12:01,310
right Pauline<font color="#E5E5E5"> basically we saw that in</font>

247
00:11:57,459 --> 00:12:04,219
keeping<font color="#CCCCCC"> the BRS on on the on all this</font>

248
00:12:01,310 --> 00:12:08,569
most<font color="#E5E5E5"> exiting CPU as a very high</font>

249
00:12:04,220 --> 00:12:11,779
performance<font color="#CCCCCC"> cost and so what we did we</font>

250
00:12:08,569 --> 00:12:14,599
we<font color="#E5E5E5"> render basically the speculation</font>

251
00:12:11,779 --> 00:12:16,519
completely useless using like read

252
00:12:14,600 --> 00:12:20,180
Pauline<font color="#E5E5E5"> so basically as you can</font><font color="#CCCCCC"> see in</font>

253
00:12:16,519 --> 00:12:22,519
this slide basically<font color="#E5E5E5"> let's assume that</font>

254
00:12:20,180 --> 00:12:25,819
the indirect jump is jump array<font color="#E5E5E5"> acts</font>

255
00:12:22,519 --> 00:12:28,430
simple array X contains the target of

256
00:12:25,819 --> 00:12:30,889
the jump<font color="#E5E5E5"> we replace the jump area X with</font>

257
00:12:28,430 --> 00:12:33,258
this<font color="#E5E5E5"> code this code</font><font color="#CCCCCC"> emit like a direct</font>

258
00:12:30,889 --> 00:12:35,089
call to<font color="#E5E5E5"> the set up target this set of</font>

259
00:12:33,259 --> 00:12:37,610
target what it does is simply<font color="#E5E5E5"> replaced</font>

260
00:12:35,089 --> 00:12:41,889
<font color="#CCCCCC">the return address</font><font color="#E5E5E5"> and then direct this</font>

261
00:12:37,610 --> 00:12:44,509
is very clever because like basically we

262
00:12:41,889 --> 00:12:47,630
<font color="#CCCCCC">really talk</font><font color="#E5E5E5"> back to</font><font color="#CCCCCC"> like the original</font>

263
00:12:44,509 --> 00:12:50,630
<font color="#E5E5E5">target address but if the CPU wanted to</font>

264
00:12:47,630 --> 00:12:54,259
speculate<font color="#CCCCCC"> speak who it goes</font><font color="#E5E5E5"> only on on</font>

265
00:12:50,630 --> 00:12:56,360
like in<font color="#E5E5E5"> the endless loop this endless</font>

266
00:12:54,259 --> 00:12:59,389
loop composite of<font color="#E5E5E5"> pause and jump and</font>

267
00:12:56,360 --> 00:13:01,550
jump<font color="#CCCCCC"> out it on itself it could be even</font>

268
00:12:59,389 --> 00:13:03,350
like<font color="#CCCCCC"> a memory barrier it's not</font><font color="#E5E5E5"> needed at</font>

269
00:13:01,550 --> 00:13:05,060
like not a memory bar a story of

270
00:13:03,350 --> 00:13:06,860
speculation barrier it's not<font color="#E5E5E5"> needed to</font>

271
00:13:05,060 --> 00:13:11,300
<font color="#E5E5E5">be like that one you can insert whatever</font>

272
00:13:06,860 --> 00:13:14,139
you would<font color="#CCCCCC"> like and it's like yes</font><font color="#E5E5E5"> this is</font>

273
00:13:11,300 --> 00:13:14,139
basically the technique

274
00:13:17,230 --> 00:13:25,750
<font color="#E5E5E5">okay let's speak about how implemented</font>

275
00:13:20,110 --> 00:13:27,760
<font color="#CCCCCC">this stuff in</font><font color="#E5E5E5"> Windows from errors to the</font>

276
00:13:25,750 --> 00:13:29,890
<font color="#CCCCCC">Windows 10</font><font color="#E5E5E5"> creators update we have</font>

277
00:13:27,760 --> 00:13:31,990
<font color="#E5E5E5">introduced something called the DVR T</font>

278
00:13:29,890 --> 00:13:34,150
the DVR<font color="#CCCCCC"> TISCO is like</font><font color="#E5E5E5"> the dynamic value</font>

279
00:13:31,990 --> 00:13:39,250
<font color="#E5E5E5">relocation table and it was used</font>

280
00:13:34,150 --> 00:13:42,130
originally for like moving<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PF</font><font color="#CCCCCC"> and</font>

281
00:13:39,250 --> 00:13:43,660
database and the page table so means

282
00:13:42,130 --> 00:13:45,760
that like every time<font color="#E5E5E5"> you boot up your</font>

283
00:13:43,660 --> 00:13:48,750
<font color="#CCCCCC">computer basically the page table and</font>

284
00:13:45,760 --> 00:13:50,950
the<font color="#CCCCCC"> PF n database are on different</font><font color="#E5E5E5"> like</font>

285
00:13:48,750 --> 00:13:55,090
play position<font color="#CCCCCC"> in the virtual address</font>

286
00:13:50,950 --> 00:13:58,360
<font color="#E5E5E5">space how</font><font color="#CCCCCC"> did we do</font><font color="#E5E5E5"> this we did</font>

287
00:13:55,090 --> 00:14:01,540
basically<font color="#E5E5E5"> the OS need a way</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> track</font>

288
00:13:58,360 --> 00:14:04,600
every like pointer that is<font color="#E5E5E5"> starting</font>

289
00:14:01,540 --> 00:14:06,790
inside the NT kernel binary so for doing

290
00:14:04,600 --> 00:14:08,830
<font color="#CCCCCC">this the compiler remit like an image</font>

291
00:14:06,790 --> 00:14:12,550
than dynamic relocation data structure

292
00:14:08,830 --> 00:14:14,800
for<font color="#E5E5E5"> every like static symbol this data</font>

293
00:14:12,550 --> 00:14:18,609
structure contains two things first this

294
00:14:14,800 --> 00:14:20,410
<font color="#CCCCCC">date the pointer</font><font color="#E5E5E5"> that as we can see the</font>

295
00:14:18,610 --> 00:14:24,820
pointer in kernel mode<font color="#CCCCCC"> F direct the</font>

296
00:14:20,410 --> 00:14:27,760
<font color="#E5E5E5">first like 16-bit set one because start</font>

297
00:14:24,820 --> 00:14:30,490
with F F F and the second one<font color="#E5E5E5"> the size</font>

298
00:14:27,760 --> 00:14:32,590
of the<font color="#E5E5E5"> the entire like structure because</font>

299
00:14:30,490 --> 00:14:36,580
this<font color="#E5E5E5"> tractor is followed by image</font><font color="#CCCCCC"> based</font>

300
00:14:32,590 --> 00:14:39,040
relocation this array of<font color="#E5E5E5"> image based</font>

301
00:14:36,580 --> 00:14:45,430
relocation basically<font color="#CCCCCC"> describe each page</font>

302
00:14:39,040 --> 00:14:47,199
<font color="#E5E5E5">of like the the binary and after this is</font>

303
00:14:45,430 --> 00:14:51,969
followed by the 16-bit<font color="#E5E5E5"> value that</font>

304
00:14:47,200 --> 00:14:53,950
contains the offset so basically what

305
00:14:51,970 --> 00:14:56,320
happens when<font color="#CCCCCC"> you switch on</font><font color="#E5E5E5"> like your</font>

306
00:14:53,950 --> 00:14:59,010
<font color="#E5E5E5">computer and they win loader like give</font>

307
00:14:56,320 --> 00:15:01,750
the execution control<font color="#CCCCCC"> 20 kernel</font>

308
00:14:59,010 --> 00:15:04,720
basically memory manager<font color="#E5E5E5"> phase</font><font color="#CCCCCC"> minus 1</font>

309
00:15:01,750 --> 00:15:06,460
that the anti kernel is still not

310
00:15:04,720 --> 00:15:11,260
<font color="#E5E5E5">initialize it doesn't know anything</font>

311
00:15:06,460 --> 00:15:14,980
<font color="#E5E5E5">about doesn't have initialized anything</font>

312
00:15:11,260 --> 00:15:17,230
we we are able<font color="#E5E5E5"> to randomize the location</font>

313
00:15:14,980 --> 00:15:19,960
of the target<font color="#CCCCCC"> VA regions like for</font>

314
00:15:17,230 --> 00:15:23,350
example<font color="#E5E5E5"> the PSN or like the</font><font color="#CCCCCC"> VN database</font>

315
00:15:19,960 --> 00:15:25,840
or<font color="#E5E5E5"> the PT table in on the right on this</font>

316
00:15:23,350 --> 00:15:27,730
light I<font color="#E5E5E5"> have put like</font><font color="#CCCCCC"> a sample if you</font>

317
00:15:25,840 --> 00:15:29,769
<font color="#E5E5E5">reverse it with either you will see that</font>

318
00:15:27,730 --> 00:15:31,959
like there is like<font color="#E5E5E5"> ffff 6</font>

319
00:15:29,769 --> 00:15:34,540
say<font color="#E5E5E5"> zero-zero</font><font color="#CCCCCC"> that is like the way the</font>

320
00:15:31,959 --> 00:15:36,819
page table<font color="#CCCCCC"> base if I</font><font color="#E5E5E5"> don't remember</font>

321
00:15:34,540 --> 00:15:39,759
wrong or if I'd<font color="#E5E5E5"> not making some</font>

322
00:15:36,819 --> 00:15:41,769
confusion no yes<font color="#E5E5E5"> it is that and so</font>

323
00:15:39,759 --> 00:15:43,809
<font color="#E5E5E5">basically we apply the fix up to every</font>

324
00:15:41,769 --> 00:15:52,329
static value that is present in the in

325
00:15:43,809 --> 00:15:54,160
the in<font color="#CCCCCC"> the binary so we I did this</font>

326
00:15:52,329 --> 00:15:57,128
introduction<font color="#CCCCCC"> because like we found</font><font color="#E5E5E5"> that</font>

327
00:15:54,160 --> 00:16:01,118
of course<font color="#E5E5E5"> every point in</font><font color="#CCCCCC"> cannon mode is</font>

328
00:15:57,129 --> 00:16:04,029
<font color="#E5E5E5">like the first like 16-bit set</font><font color="#CCCCCC"> one so</font>

329
00:16:01,119 --> 00:16:06,519
what we<font color="#E5E5E5"> did is that we put like instead</font>

330
00:16:04,029 --> 00:16:08,829
of<font color="#E5E5E5"> the symbol field of the this data</font>

331
00:16:06,519 --> 00:16:12,100
structure<font color="#E5E5E5"> we put like a value that is</font>

332
00:16:08,829 --> 00:16:17,939
<font color="#E5E5E5">like is not a pointer is like a standard</font>

333
00:16:12,100 --> 00:16:22,269
<font color="#CCCCCC">value like 1 2 3 5</font><font color="#E5E5E5"> or whatever and</font><font color="#CCCCCC"> at</font>

334
00:16:17,939 --> 00:16:24,219
execution time<font color="#E5E5E5"> we we recognize</font><font color="#CCCCCC"> that we</font>

335
00:16:22,269 --> 00:16:26,170
recognize that the symbol is<font color="#CCCCCC"> not like a</font>

336
00:16:24,220 --> 00:16:31,449
pointer<font color="#CCCCCC"> so we know that is something</font>

337
00:16:26,170 --> 00:16:34,569
else<font color="#E5E5E5"> so in this case there is still like</font>

338
00:16:31,449 --> 00:16:36,969
the<font color="#E5E5E5"> imagine image dynamic relocation and</font>

339
00:16:34,569 --> 00:16:39,099
image<font color="#E5E5E5"> base relocation data structure but</font>

340
00:16:36,970 --> 00:16:41,949
after that there<font color="#E5E5E5"> is an array of 16-bit</font>

341
00:16:39,100 --> 00:16:45,009
<font color="#E5E5E5">or 32-bit values that is not like the is</font>

342
00:16:41,949 --> 00:16:47,019
not an offset basically each value

343
00:16:45,009 --> 00:16:53,079
describe the branches structure instruct

344
00:16:47,019 --> 00:16:55,269
<font color="#CCCCCC">own instruction so after applying these</font>

345
00:16:53,079 --> 00:16:57,549
to every indirect branch in the in the

346
00:16:55,269 --> 00:16:58,899
kernel we have<font color="#E5E5E5"> identified that basically</font>

347
00:16:57,549 --> 00:17:01,360
<font color="#E5E5E5">like there are three kind of like</font>

348
00:16:58,899 --> 00:17:04,089
branches that<font color="#E5E5E5"> we needed to like take</font>

349
00:17:01,360 --> 00:17:06,130
<font color="#E5E5E5">care of the first one</font><font color="#CCCCCC"> is like branches</font>

350
00:17:04,089 --> 00:17:08,319
<font color="#E5E5E5">that happens thanks to the important</font>

351
00:17:06,130 --> 00:17:10,899
addresses so when like a binary in

352
00:17:08,319 --> 00:17:13,449
kernel like need to<font color="#E5E5E5"> like call another</font>

353
00:17:10,898 --> 00:17:15,188
function in like<font color="#E5E5E5"> another binary</font><font color="#CCCCCC"> use it</font>

354
00:17:13,449 --> 00:17:18,490
an important function so there<font color="#E5E5E5"> is a</font>

355
00:17:15,189 --> 00:17:21,429
pointer in the<font color="#E5E5E5"> IAT the import address</font>

356
00:17:18,490 --> 00:17:23,380
<font color="#E5E5E5">table and then we call that pointer the</font>

357
00:17:21,429 --> 00:17:25,389
second one is<font color="#CCCCCC"> indirect branch</font><font color="#E5E5E5"> that are</font>

358
00:17:23,380 --> 00:17:27,760
branches that<font color="#CCCCCC"> uses a register like for</font>

359
00:17:25,388 --> 00:17:30,580
example<font color="#E5E5E5"> jump array X call</font><font color="#CCCCCC"> se</font><font color="#E5E5E5"> X or</font>

360
00:17:27,760 --> 00:17:32,770
whatever<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> this like</font><font color="#E5E5E5"> kind of like</font>

361
00:17:30,580 --> 00:17:36,370
branches are using<font color="#CCCCCC"> are</font><font color="#E5E5E5"> use it to like</font>

362
00:17:32,770 --> 00:17:39,250
call external like<font color="#E5E5E5"> function that reside</font>

363
00:17:36,370 --> 00:17:43,090
in<font color="#CCCCCC"> another binary</font><font color="#E5E5E5"> and usually I are used</font>

364
00:17:39,250 --> 00:17:45,490
a<font color="#E5E5E5"> lot in case of C++</font><font color="#CCCCCC"> vtable</font><font color="#E5E5E5"> not not in</font>

365
00:17:43,090 --> 00:17:47,918
of course but like to make an example

366
00:17:45,490 --> 00:17:50,169
the<font color="#E5E5E5"> C++</font><font color="#CCCCCC"> vtable uses like smooth the</font>

367
00:17:47,919 --> 00:17:52,720
pointer in like<font color="#E5E5E5"> an</font><font color="#CCCCCC"> eraser and then color</font>

368
00:17:50,169 --> 00:17:55,000
registers<font color="#E5E5E5"> and then we are we have like</font>

369
00:17:52,720 --> 00:17:57,730
identified as which table are at polling

370
00:17:55,000 --> 00:18:02,500
that are basically<font color="#E5E5E5"> indirect branches</font>

371
00:17:57,730 --> 00:18:05,440
that happens on the same binary okay yes

372
00:18:02,500 --> 00:18:07,090
<font color="#E5E5E5">I'm we are on time so yeah this is a</font>

373
00:18:05,440 --> 00:18:09,820
slide that show<font color="#E5E5E5"> the important address</font>

374
00:18:07,090 --> 00:18:11,408
<font color="#CCCCCC">red pauline so basically on the top of</font>

375
00:18:09,820 --> 00:18:16,210
<font color="#CCCCCC">the</font><font color="#E5E5E5"> slide you can see that</font><font color="#CCCCCC"> like there is</font>

376
00:18:11,409 --> 00:18:19,539
like<font color="#E5E5E5"> the original indirect</font><font color="#CCCCCC"> RL</font><font color="#E5E5E5"> 32 call on</font>

377
00:18:16,210 --> 00:18:22,419
I 80 entry so this means that<font color="#E5E5E5"> like the</font>

378
00:18:19,539 --> 00:18:23,890
code must first<font color="#E5E5E5"> resort the pointer push</font>

379
00:18:22,419 --> 00:18:26,710
the return address<font color="#CCCCCC"> and then jump to</font><font color="#E5E5E5"> the</font>

380
00:18:23,890 --> 00:18:28,419
target function<font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to show</font>

381
00:18:26,710 --> 00:18:30,309
<font color="#CCCCCC">that in the new kernel we have putted</font>

382
00:18:28,419 --> 00:18:32,590
even like some padding after the call

383
00:18:30,309 --> 00:18:35,260
because<font color="#CCCCCC"> we need to be able</font><font color="#E5E5E5"> to apply and</font>

384
00:18:32,590 --> 00:18:40,990
not apply<font color="#CCCCCC"> right Pauline dynamically</font>

385
00:18:35,260 --> 00:18:42,610
based on on the target OS yes<font color="#E5E5E5"> the target</font>

386
00:18:40,990 --> 00:18:44,409
function<font color="#E5E5E5"> addresses terrain in the</font><font color="#CCCCCC"> hi</font>

387
00:18:42,610 --> 00:18:46,809
Etienne tree<font color="#E5E5E5"> that is generally</font><font color="#CCCCCC"> squeezed</font>

388
00:18:44,409 --> 00:18:52,090
generated on the fly by the by the

389
00:18:46,809 --> 00:18:54,639
loader basically so an important things

390
00:18:52,090 --> 00:18:56,918
to say<font color="#CCCCCC"> here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that like the guard Derek</font>

391
00:18:54,640 --> 00:18:59,080
<font color="#CCCCCC">Poulin</font><font color="#E5E5E5"> guard function need to do these</font>

392
00:18:56,919 --> 00:19:01,840
<font color="#E5E5E5">things simple things first check a</font>

393
00:18:59,080 --> 00:19:04,389
bitmap<font color="#E5E5E5"> because in the NT kernel we track</font>

394
00:19:01,840 --> 00:19:08,049
every like<font color="#E5E5E5"> play every like section of</font>

395
00:19:04,390 --> 00:19:09,850
the of the driver<font color="#E5E5E5"> that is compatible or</font>

396
00:19:08,049 --> 00:19:12,970
not<font color="#E5E5E5"> to eat at polling</font><font color="#CCCCCC"> so we have a a</font>

397
00:19:09,850 --> 00:19:16,480
bitmap<font color="#E5E5E5"> this that bit</font><font color="#CCCCCC"> one described as</font>

398
00:19:12,970 --> 00:19:19,870
one bit set to one if I like a 64 K V

399
00:19:16,480 --> 00:19:23,919
address we<font color="#E5E5E5"> arranged is is</font><font color="#CCCCCC"> read polling</font>

400
00:19:19,870 --> 00:19:27,908
<font color="#CCCCCC">compiled</font><font color="#E5E5E5"> if both the bitmap exists and</font>

401
00:19:23,919 --> 00:19:29,200
as a<font color="#E5E5E5"> one in the particular point means</font>

402
00:19:27,909 --> 00:19:32,409
that<font color="#E5E5E5"> the target is read polling</font>

403
00:19:29,200 --> 00:19:35,049
compatible so what we do is that<font color="#E5E5E5"> like we</font>

404
00:19:32,409 --> 00:19:38,350
call direct<font color="#CCCCCC"> pauline function and then</font>

405
00:19:35,049 --> 00:19:40,480
jump directly<font color="#E5E5E5"> to the to the target</font>

406
00:19:38,350 --> 00:19:43,809
otherwise if none of the if one of the

407
00:19:40,480 --> 00:19:46,510
the<font color="#E5E5E5"> two like condition is not true we</font>

408
00:19:43,809 --> 00:19:48,190
said that the IBRS<font color="#E5E5E5"> or</font><font color="#CCCCCC"> IBP</font><font color="#E5E5E5"> be depending</font>

409
00:19:46,510 --> 00:19:52,000
on the basically<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> CPU our key that</font>

410
00:19:48,190 --> 00:19:54,580
or we execute a memory<font color="#E5E5E5"> a speculation</font>

411
00:19:52,000 --> 00:19:56,470
<font color="#CCCCCC">bodies star star instruction and then we</font>

412
00:19:54,580 --> 00:19:56,960
jump<font color="#E5E5E5"> to the target address in that way</font>

413
00:19:56,470 --> 00:19:59,630
we can

414
00:19:56,960 --> 00:20:02,510
sure<font color="#E5E5E5"> that like we can tell an attacker</font>

415
00:19:59,630 --> 00:20:04,279
can like speculate on<font color="#E5E5E5"> these because the</font>

416
00:20:02,510 --> 00:20:07,129
<font color="#E5E5E5">target address is not as not</font><font color="#CCCCCC"> redbone</font>

417
00:20:04,279 --> 00:20:10,760
<font color="#E5E5E5">incompatible but we</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> with IBRS</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> to</font>

418
00:20:07,130 --> 00:20:12,320
<font color="#CCCCCC">one</font><font color="#E5E5E5"> on the bottom of the page of the</font>

419
00:20:10,760 --> 00:20:14,629
slide you will see<font color="#E5E5E5"> like the data</font>

420
00:20:12,320 --> 00:20:17,149
structure<font color="#CCCCCC"> that is the 32</font><font color="#E5E5E5"> bit off so</font>

421
00:20:14,630 --> 00:20:19,309
basically<font color="#E5E5E5"> 32 bit like array in this case</font>

422
00:20:17,149 --> 00:20:22,158
<font color="#E5E5E5">it contains the relative offset inside</font>

423
00:20:19,309 --> 00:20:24,700
<font color="#E5E5E5">the page so our page is 4k and we need</font>

424
00:20:22,159 --> 00:20:27,679
<font color="#E5E5E5">12 bit for like describe the offset a</font>

425
00:20:24,700 --> 00:20:30,500
value that<font color="#CCCCCC"> is set</font><font color="#E5E5E5"> to 1 or 0 if the co</font>

426
00:20:27,679 --> 00:20:32,600
<font color="#E5E5E5">Lisa if the branch is a call or a</font><font color="#CCCCCC"> jumper</font>

427
00:20:30,500 --> 00:20:35,450
and then<font color="#E5E5E5"> they index into the high</font><font color="#CCCCCC"> eighty</font>

428
00:20:32,600 --> 00:20:41,149
we saw that<font color="#E5E5E5"> 19 bits are enough for</font>

429
00:20:35,450 --> 00:20:43,850
<font color="#CCCCCC">indexing the IAT</font><font color="#E5E5E5"> indirectly</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> direct</font>

430
00:20:41,149 --> 00:20:45,590
branch<font color="#CCCCCC"> read polling even here it's like</font>

431
00:20:43,850 --> 00:20:47,870
similar<font color="#CCCCCC"> to the previous case but is used</font>

432
00:20:45,590 --> 00:20:53,360
for<font color="#E5E5E5"> indirect branches that</font><font color="#CCCCCC"> are like</font>

433
00:20:47,870 --> 00:20:54,949
target<font color="#CCCCCC"> another function another like</font>

434
00:20:53,360 --> 00:20:58,039
code that<font color="#E5E5E5"> is reside in another like</font>

435
00:20:54,950 --> 00:21:01,190
model is used for the generic indirect

436
00:20:58,039 --> 00:21:04,039
branches and we can support<font color="#E5E5E5"> indirect</font>

437
00:21:01,190 --> 00:21:05,929
branch that are non CFG<font color="#E5E5E5"> like a simple</font>

438
00:21:04,039 --> 00:21:08,450
call to<font color="#CCCCCC"> array</font><font color="#E5E5E5"> X or like him even</font>

439
00:21:05,929 --> 00:21:11,809
<font color="#CCCCCC">indirect branch that are CFG compatible</font>

440
00:21:08,450 --> 00:21:17,419
<font color="#E5E5E5">so that basically there is a CFG</font><font color="#CCCCCC"> check</font>

441
00:21:11,809 --> 00:21:19,220
<font color="#CCCCCC">function and yes as before</font><font color="#E5E5E5"> that this the</font>

442
00:21:17,419 --> 00:21:20,990
top of the<font color="#E5E5E5"> light of this line represents</font>

443
00:21:19,220 --> 00:21:23,450
the<font color="#E5E5E5"> original like situation and this</font>

444
00:21:20,990 --> 00:21:25,429
<font color="#E5E5E5">ended bottom the situation where we</font>

445
00:21:23,450 --> 00:21:28,010
applied the<font color="#CCCCCC"> red pauline there is still</font>

446
00:21:25,429 --> 00:21:31,220
padding around<font color="#E5E5E5"> because we need to to</font><font color="#CCCCCC"> be</font>

447
00:21:28,010 --> 00:21:38,809
exact<font color="#E5E5E5"> when we apply the new the</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> the</font>

448
00:21:31,220 --> 00:21:40,429
<font color="#E5E5E5">direct role</font><font color="#CCCCCC"> 32 call so the guard</font>

449
00:21:38,809 --> 00:21:43,010
function in this case is<font color="#E5E5E5"> similar to the</font>

450
00:21:40,429 --> 00:21:46,370
previous one<font color="#E5E5E5"> meaning</font><font color="#CCCCCC"> that like</font><font color="#E5E5E5"> basically</font>

451
00:21:43,010 --> 00:21:48,950
<font color="#E5E5E5">like it does the same almost the same as</font>

452
00:21:46,370 --> 00:21:51,559
the previous case<font color="#E5E5E5"> but it check even</font><font color="#CCCCCC"> this</font>

453
00:21:48,950 --> 00:21:54,549
<font color="#CCCCCC">FG like bit vamp in case of like we have</font>

454
00:21:51,559 --> 00:21:57,470
indirect branches that use<font color="#CCCCCC"> a CFG</font>

455
00:21:54,549 --> 00:21:59,480
basically we do two things<font color="#CCCCCC"> if the target</font>

456
00:21:57,470 --> 00:22:01,399
is<font color="#CCCCCC"> not in the CFG bitmap weak bug check</font>

457
00:21:59,480 --> 00:22:03,890
the<font color="#E5E5E5"> system because this is a security</font>

458
00:22:01,399 --> 00:22:06,139
<font color="#CCCCCC">feature so we</font><font color="#E5E5E5"> need to do that if the</font>

459
00:22:03,890 --> 00:22:09,200
target is<font color="#CCCCCC"> not read</font><font color="#E5E5E5"> polling compatible we</font>

460
00:22:06,139 --> 00:22:10,969
call the<font color="#E5E5E5"> target using with</font><font color="#CCCCCC"> IVRS set</font><font color="#E5E5E5"> like</font>

461
00:22:09,200 --> 00:22:13,650
before

462
00:22:10,970 --> 00:22:15,420
we support<font color="#CCCCCC"> a literary</font><font color="#E5E5E5"> acts register</font>

463
00:22:13,650 --> 00:22:20,250
because<font color="#E5E5E5"> we found out that the compiler</font>

464
00:22:15,420 --> 00:22:22,050
is able to<font color="#E5E5E5"> to</font><font color="#CCCCCC"> emit like to transfer all</font>

465
00:22:20,250 --> 00:22:26,640
the indirect call using<font color="#E5E5E5"> the array X</font>

466
00:22:22,050 --> 00:22:27,450
register yes the the<font color="#CCCCCC"> data structure that</font>

467
00:22:26,640 --> 00:22:29,130
<font color="#E5E5E5">track this</font>

468
00:22:27,450 --> 00:22:32,130
it's very pretty<font color="#E5E5E5"> similar to the previous</font>

469
00:22:29,130 --> 00:22:36,030
one instead of<font color="#CCCCCC"> the fact that instead</font><font color="#E5E5E5"> of</font>

470
00:22:32,130 --> 00:22:39,690
<font color="#E5E5E5">using the IAT index we we</font><font color="#CCCCCC"> omit some</font>

471
00:22:36,030 --> 00:22:42,720
other stuff<font color="#E5E5E5"> like if the indirect call is</font>

472
00:22:39,690 --> 00:22:49,350
like using<font color="#E5E5E5"> the racks prefix or if</font><font color="#CCCCCC"> as is</font>

473
00:22:42,720 --> 00:22:51,030
<font color="#E5E5E5">CFG or non CFG last is the switch table</font>

474
00:22:49,350 --> 00:22:53,939
<font color="#CCCCCC">right pulling the switch</font><font color="#E5E5E5"> table rattling</font>

475
00:22:51,030 --> 00:22:55,500
is the<font color="#E5E5E5"> easiest one because</font><font color="#CCCCCC"> basically</font>

476
00:22:53,940 --> 00:22:58,110
<font color="#CCCCCC">it's like they</font><font color="#E5E5E5"> are used when</font><font color="#CCCCCC"> you have</font>

477
00:22:55,500 --> 00:23:01,020
<font color="#E5E5E5">like a switch statement in C++ for</font>

478
00:22:58,110 --> 00:23:04,169
example<font color="#E5E5E5"> so there is like a jumper that</font>

479
00:23:01,020 --> 00:23:09,150
or that<font color="#CCCCCC"> led that goes</font><font color="#E5E5E5"> directly in the</font>

480
00:23:04,170 --> 00:23:11,790
same binary in this case<font color="#E5E5E5"> like as you can</font>

481
00:23:09,150 --> 00:23:13,740
<font color="#E5E5E5">see there is nothing very</font><font color="#CCCCCC"> particular we</font>

482
00:23:11,790 --> 00:23:16,139
have like an indirect<font color="#E5E5E5"> jump and then we</font>

483
00:23:13,740 --> 00:23:17,550
<font color="#E5E5E5">replace with a director or</font><font color="#CCCCCC"> l32 call to</font>

484
00:23:16,140 --> 00:23:21,240
the red<font color="#CCCCCC"> Pauline switch table</font><font color="#E5E5E5"> grab</font>

485
00:23:17,550 --> 00:23:24,600
function the switch table got function

486
00:23:21,240 --> 00:23:26,310
does<font color="#E5E5E5"> nothing interesting it's basically</font>

487
00:23:24,600 --> 00:23:28,740
only apply<font color="#CCCCCC"> read Pauline</font><font color="#E5E5E5"> because we know</font>

488
00:23:26,310 --> 00:23:30,990
that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> target is like in like a red</font>

489
00:23:28,740 --> 00:23:32,820
<font color="#CCCCCC">polling compatible like binary</font><font color="#E5E5E5"> so there</font>

490
00:23:30,990 --> 00:23:37,530
is no<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do anything else and even</font>

491
00:23:32,820 --> 00:23:40,200
<font color="#CCCCCC">like they arrived at after them the the</font>

492
00:23:37,530 --> 00:23:45,090
data structure is like pretty is is like

493
00:23:40,200 --> 00:23:46,890
<font color="#CCCCCC">16-bit in this case we support all the</font>

494
00:23:45,090 --> 00:23:49,939
registers so there is no need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change</font>

495
00:23:46,890 --> 00:23:49,940
anything by the compiler

496
00:23:51,050 --> 00:23:55,980
<font color="#CCCCCC">okay one important things to say here is</font>

497
00:23:53,970 --> 00:23:57,960
that<font color="#CCCCCC"> after we have implemented</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font>

498
00:23:55,980 --> 00:23:59,840
like<font color="#E5E5E5"> read Pauline we were still</font><font color="#CCCCCC"> not</font>

499
00:23:57,960 --> 00:24:02,460
happy about the performance<font color="#CCCCCC"> because like</font>

500
00:23:59,840 --> 00:24:06,360
we were like thinking<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we could do</font>

501
00:24:02,460 --> 00:24:07,760
more<font color="#E5E5E5"> so we have like analyzed the</font>

502
00:24:06,360 --> 00:24:11,179
problem<font color="#CCCCCC"> and the problem resides</font>

503
00:24:07,760 --> 00:24:14,760
especially in on the important functions

504
00:24:11,180 --> 00:24:17,100
means that we were<font color="#CCCCCC"> losing some</font><font color="#E5E5E5"> time in</font>

505
00:24:14,760 --> 00:24:20,280
<font color="#CCCCCC">died when the</font><font color="#E5E5E5"> the driver were calling</font>

506
00:24:17,100 --> 00:24:22,439
like imported function so we<font color="#E5E5E5"> we talked</font>

507
00:24:20,280 --> 00:24:24,450
about this up a bit and we found out

508
00:24:22,440 --> 00:24:27,420
<font color="#E5E5E5">that</font><font color="#CCCCCC"> after basically</font><font color="#E5E5E5"> the import</font>

509
00:24:24,450 --> 00:24:28,250
the<font color="#CCCCCC"> saber</font><font color="#E5E5E5"> has been like populated by the</font>

510
00:24:27,420 --> 00:24:34,860
loader

511
00:24:28,250 --> 00:24:37,700
<font color="#E5E5E5">there is no no no motivation why we need</font>

512
00:24:34,860 --> 00:24:41,189
to<font color="#E5E5E5"> emit like a</font><font color="#CCCCCC"> still</font><font color="#E5E5E5"> and indirect call</font>

513
00:24:37,700 --> 00:24:43,140
so<font color="#E5E5E5"> basically like you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> Mason the</font>

514
00:24:41,190 --> 00:24:46,650
loader that's basically like<font color="#CCCCCC"> compile</font><font color="#E5E5E5"> the</font>

515
00:24:43,140 --> 00:24:48,000
<font color="#E5E5E5">IAT we apply right Pauline</font><font color="#CCCCCC"> and then we</font>

516
00:24:46,650 --> 00:24:51,300
design<font color="#E5E5E5"> a</font><font color="#CCCCCC"> something that</font><font color="#E5E5E5"> is called the</font>

517
00:24:48,000 --> 00:24:54,210
<font color="#E5E5E5">import optimization because if you think</font>

518
00:24:51,300 --> 00:24:55,710
<font color="#E5E5E5">about the indirect</font><font color="#CCCCCC"> caller exist for</font>

519
00:24:54,210 --> 00:24:57,870
important functionally because you need

520
00:24:55,710 --> 00:25:00,570
to check the IAT<font color="#E5E5E5"> but when the IAT is</font>

521
00:24:57,870 --> 00:25:03,149
like<font color="#CCCCCC"> phillyd</font><font color="#E5E5E5"> there is no no way</font><font color="#CCCCCC"> I mean</font>

522
00:25:00,570 --> 00:25:05,909
it will not change<font color="#CCCCCC"> so why bothering</font>

523
00:25:03,150 --> 00:25:09,480
about like<font color="#E5E5E5"> using indirect call we can</font>

524
00:25:05,910 --> 00:25:12,260
<font color="#E5E5E5">emit like a</font><font color="#CCCCCC"> a direct caller</font><font color="#E5E5E5"> jump in this</font>

525
00:25:09,480 --> 00:25:14,670
case we can see the<font color="#E5E5E5"> new code about the</font>

526
00:25:12,260 --> 00:25:17,520
<font color="#E5E5E5">that uses</font><font color="#CCCCCC"> importer minimization as you</font>

527
00:25:14,670 --> 00:25:19,890
can see there is<font color="#E5E5E5"> like a direct</font><font color="#CCCCCC"> role at</font>

528
00:25:17,520 --> 00:25:21,540
or to call means that the<font color="#E5E5E5"> function is</font>

529
00:25:19,890 --> 00:25:24,240
called<font color="#CCCCCC"> it directly and there is no</font>

530
00:25:21,540 --> 00:25:26,250
speculation<font color="#E5E5E5"> festival in this case so and</font>

531
00:25:24,240 --> 00:25:27,930
we found that<font color="#E5E5E5"> like basically the</font><font color="#CCCCCC"> mission</font>

532
00:25:26,250 --> 00:25:31,860
was complete because the<font color="#E5E5E5"> performance was</font>

533
00:25:27,930 --> 00:25:34,560
like<font color="#CCCCCC"> improvement a</font><font color="#E5E5E5"> lot if you have seen</font>

534
00:25:31,860 --> 00:25:36,929
we still like we are still<font color="#CCCCCC"> saving the</font>

535
00:25:34,560 --> 00:25:47,360
original pointer<font color="#E5E5E5"> we will see now why why</font>

536
00:25:36,930 --> 00:25:51,780
we do that<font color="#E5E5E5"> okay let's speak about the</font>

537
00:25:47,360 --> 00:25:53,459
the data is about<font color="#E5E5E5"> implementation so</font>

538
00:25:51,780 --> 00:25:56,370
basically when you<font color="#CCCCCC"> when you start your</font>

539
00:25:53,460 --> 00:25:59,100
<font color="#CCCCCC">computer and the execution contract goes</font>

540
00:25:56,370 --> 00:26:01,520
<font color="#E5E5E5">to NT kernel they</font><font color="#CCCCCC"> face me knows me knows</font>

541
00:25:59,100 --> 00:26:04,230
one<font color="#CCCCCC"> of the memory manager</font><font color="#E5E5E5"> initialization</font>

542
00:26:01,520 --> 00:26:06,690
<font color="#CCCCCC">check if</font><font color="#E5E5E5"> their infrared</font><font color="#CCCCCC"> polling need to</font>

543
00:26:04,230 --> 00:26:08,550
be<font color="#CCCCCC"> enabled at this stage there is</font>

544
00:26:06,690 --> 00:26:11,300
nothing initialized there is<font color="#E5E5E5"> initialize</font>

545
00:26:08,550 --> 00:26:13,530
<font color="#CCCCCC">early</font><font color="#E5E5E5"> few good mood structures like the</font>

546
00:26:11,300 --> 00:26:16,050
processor control region processor

547
00:26:13,530 --> 00:26:19,170
control block and the PC<font color="#E5E5E5"> stock ins and</font>

548
00:26:16,050 --> 00:26:21,810
not many others<font color="#E5E5E5"> so basically the</font>

549
00:26:19,170 --> 00:26:24,270
function<font color="#E5E5E5"> the function ka determine read</font>

550
00:26:21,810 --> 00:26:26,310
<font color="#E5E5E5">pauline enabled decide</font><font color="#CCCCCC"> if not enable or</font>

551
00:26:24,270 --> 00:26:29,190
not the<font color="#E5E5E5"> Red Pony and import optimization</font>

552
00:26:26,310 --> 00:26:32,460
based on mainly two things the first<font color="#CCCCCC"> one</font>

553
00:26:29,190 --> 00:26:35,040
is<font color="#E5E5E5"> like the if your</font><font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> support</font><font color="#CCCCCC"> the</font>

554
00:26:32,460 --> 00:26:38,040
<font color="#CCCCCC">hardware speculation control features</font><font color="#E5E5E5"> I</font>

555
00:26:35,040 --> 00:26:41,460
mean if your CPU<font color="#E5E5E5"> has IBRS basically</font>

556
00:26:38,040 --> 00:26:43,649
be here I've written that I made the<font color="#CCCCCC"> MDS</font>

557
00:26:41,460 --> 00:26:46,230
Intel<font color="#CCCCCC"> uses different model specific</font>

558
00:26:43,650 --> 00:26:47,700
register and<font color="#CCCCCC"> cpuid classes</font><font color="#E5E5E5"> but basically</font>

559
00:26:46,230 --> 00:26:50,870
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is important because</font><font color="#E5E5E5"> if you think</font>

560
00:26:47,700 --> 00:26:53,820
<font color="#E5E5E5">about that if the CPU is</font><font color="#CCCCCC"> not able to</font>

561
00:26:50,870 --> 00:26:57,060
protect in<font color="#CCCCCC"> our do where we have no way</font>

562
00:26:53,820 --> 00:26:59,159
to protect<font color="#E5E5E5"> for external code so there is</font>

563
00:26:57,060 --> 00:27:01,560
no way to enable<font color="#E5E5E5"> this feature because</font>

564
00:26:59,160 --> 00:27:04,530
<font color="#CCCCCC">like we can protect all the</font><font color="#E5E5E5"> Alpha of the</font>

565
00:27:01,560 --> 00:27:06,300
of the of the<font color="#E5E5E5"> problem and so we disable</font>

566
00:27:04,530 --> 00:27:08,250
<font color="#CCCCCC">the Redpoll</font><font color="#E5E5E5"> in an</font><font color="#CCCCCC"> improper Timmy's ation</font>

567
00:27:06,300 --> 00:27:10,200
another thing that like this function

568
00:27:08,250 --> 00:27:13,860
check is the memory manager feature

569
00:27:10,200 --> 00:27:15,990
setting registry value value in that way

570
00:27:13,860 --> 00:27:17,760
you<font color="#E5E5E5"> can like control if to manually</font>

571
00:27:15,990 --> 00:27:25,410
enable or disable read Pauline and

572
00:27:17,760 --> 00:27:28,890
import optimization<font color="#E5E5E5"> okay so basically</font>

573
00:27:25,410 --> 00:27:30,690
<font color="#E5E5E5">what happens after like the the previous</font>

574
00:27:28,890 --> 00:27:33,320
<font color="#E5E5E5">function</font><font color="#CCCCCC"> as they have decided</font><font color="#E5E5E5"> that like</font>

575
00:27:30,690 --> 00:27:35,970
the direct problem<font color="#E5E5E5"> must be initialized</font>

576
00:27:33,320 --> 00:27:38,040
<font color="#CCCCCC">still the memory manager face</font><font color="#E5E5E5"> me knows</font>

577
00:27:35,970 --> 00:27:41,040
one is<font color="#CCCCCC"> insulin initialization</font><font color="#E5E5E5"> basically</font>

578
00:27:38,040 --> 00:27:43,050
does two things<font color="#E5E5E5"> first perform the SLR on</font>

579
00:27:41,040 --> 00:27:45,210
dynamic VI<font color="#CCCCCC"> II regions like as we have</font>

580
00:27:43,050 --> 00:27:47,159
<font color="#E5E5E5">seen the</font><font color="#CCCCCC"> PDP</font><font color="#E5E5E5"> the page table entry the</font>

581
00:27:45,210 --> 00:27:52,050
page table and like the<font color="#E5E5E5"> PF and database</font>

582
00:27:47,160 --> 00:27:54,780
using<font color="#CCCCCC"> the DVR t like data</font><font color="#E5E5E5"> structures in</font>

583
00:27:52,050 --> 00:27:58,320
<font color="#CCCCCC">second second it like the course like</font>

584
00:27:54,780 --> 00:28:00,780
the right<font color="#E5E5E5"> peninsulas ation function so</font>

585
00:27:58,320 --> 00:28:03,899
basically what we do we analyze<font color="#E5E5E5"> each</font>

586
00:28:00,780 --> 00:28:08,070
like DVR<font color="#CCCCCC"> t table and like we skip the</font>

587
00:28:03,900 --> 00:28:11,580
the one that are<font color="#E5E5E5"> for how</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> say for like</font>

588
00:28:08,070 --> 00:28:14,790
the dynamic via regions when we detect

589
00:28:11,580 --> 00:28:16,949
only<font color="#CCCCCC"> like the DVR the DVR</font><font color="#E5E5E5"> t like entries</font>

590
00:28:14,790 --> 00:28:19,170
that are<font color="#E5E5E5"> related to read pauline we</font>

591
00:28:16,950 --> 00:28:22,260
<font color="#E5E5E5">parse them and we apply read pooling and</font>

592
00:28:19,170 --> 00:28:27,480
for each indirect branch of NT kernel

593
00:28:22,260 --> 00:28:30,120
<font color="#E5E5E5">and of all after</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> week up</font><font color="#CCCCCC"> to the</font>

594
00:28:27,480 --> 00:28:33,660
high<font color="#E5E5E5"> eighty of NT hand hole</font><font color="#CCCCCC"> as you can</font>

595
00:28:30,120 --> 00:28:35,850
as<font color="#E5E5E5"> you probably know both NT n</font><font color="#CCCCCC"> whole</font>

596
00:28:33,660 --> 00:28:37,980
import for like very few models because

597
00:28:35,850 --> 00:28:42,030
like they are the caramel or<font color="#E5E5E5"> they are</font>

598
00:28:37,980 --> 00:28:44,670
the core of the<font color="#E5E5E5"> kernel and yes we apply</font>

599
00:28:42,030 --> 00:28:46,680
even<font color="#E5E5E5"> import optimization</font><font color="#CCCCCC"> i need to to</font>

600
00:28:44,670 --> 00:28:48,600
let you know that<font color="#CCCCCC"> like at this point</font><font color="#E5E5E5"> the</font>

601
00:28:46,680 --> 00:28:51,030
<font color="#CCCCCC">big one doesn't exist</font><font color="#E5E5E5"> because the memory</font>

602
00:28:48,600 --> 00:28:51,719
manager does has no idea how to create a

603
00:28:51,030 --> 00:28:53,850
spouse by

604
00:28:51,720 --> 00:28:55,620
it map<font color="#CCCCCC"> so this is not a big deal because</font>

605
00:28:53,850 --> 00:28:57,168
<font color="#E5E5E5">like the worst things that happen if we</font>

606
00:28:55,620 --> 00:29:00,030
call like something<font color="#CCCCCC"> that is like</font>

607
00:28:57,169 --> 00:29:03,659
<font color="#E5E5E5">indirect branch we set up the IBRS so</font>

608
00:29:00,030 --> 00:29:07,020
it's not<font color="#E5E5E5"> a big a big deal late at phase</font>

609
00:29:03,659 --> 00:29:08,820
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> mmm initialization</font><font color="#E5E5E5"> basically there</font>

610
00:29:07,020 --> 00:29:09,539
<font color="#E5E5E5">is the red pole in sparse bitumen</font>

611
00:29:08,820 --> 00:29:13,500
creation

612
00:29:09,539 --> 00:29:15,629
so in this bitmap<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a su characteristic</font>

613
00:29:13,500 --> 00:29:18,360
<font color="#E5E5E5">for</font><font color="#CCCCCC"> this parse</font><font color="#E5E5E5"> so we don't consume a lot</font>

614
00:29:15,630 --> 00:29:22,789
<font color="#E5E5E5">of user memory</font><font color="#CCCCCC"> RAM memory because if</font>

615
00:29:18,360 --> 00:29:25,610
it's<font color="#E5E5E5"> passed means that like only the</font>

616
00:29:22,789 --> 00:29:28,650
they<font color="#CCCCCC"> need the region of the bitmap</font><font color="#E5E5E5"> are</font>

617
00:29:25,610 --> 00:29:30,990
actually<font color="#E5E5E5"> allocated and the second is</font>

618
00:29:28,650 --> 00:29:34,070
<font color="#E5E5E5">what is that</font><font color="#CCCCCC"> each bit of</font><font color="#E5E5E5"> this bitmap</font>

619
00:29:30,990 --> 00:29:38,520
represent a 64 kilobyte<font color="#CCCCCC"> v VA space</font>

620
00:29:34,070 --> 00:29:42,090
because we we<font color="#E5E5E5"> have noted that every</font>

621
00:29:38,520 --> 00:29:46,470
section in<font color="#E5E5E5"> there like the</font><font color="#CCCCCC"> pm age is like</font>

622
00:29:42,090 --> 00:29:48,360
a liner<font color="#E5E5E5"> to 64-bit normally so another</font>

623
00:29:46,470 --> 00:29:50,340
<font color="#CCCCCC">thing that I need to say is that the</font>

624
00:29:48,360 --> 00:29:52,530
phase<font color="#CCCCCC"> zero of mmm initialization</font>

625
00:29:50,340 --> 00:29:54,418
function<font color="#CCCCCC"> initialized even like the</font>

626
00:29:52,530 --> 00:29:56,460
synthetic function table<font color="#CCCCCC"> for the viertel</font>

627
00:29:54,419 --> 00:29:59,190
<font color="#CCCCCC">unwinder because basically we found</font><font color="#E5E5E5"> like</font>

628
00:29:56,460 --> 00:30:00,870
a<font color="#E5E5E5"> problem that if you have a context</font>

629
00:29:59,190 --> 00:30:04,200
<font color="#CCCCCC">switch</font><font color="#E5E5E5"> if you have an exception</font>

630
00:30:00,870 --> 00:30:09,629
unlike the right<font color="#E5E5E5"> Pauline trampoline code</font>

631
00:30:04,200 --> 00:30:12,240
<font color="#E5E5E5">or</font><font color="#CCCCCC"> even on the new</font><font color="#E5E5E5"> Red Pony</font><font color="#CCCCCC"> and function</font>

632
00:30:09,630 --> 00:30:14,250
call<font color="#E5E5E5"> the vietcong winder has have no</font>

633
00:30:12,240 --> 00:30:16,320
idea how to like unwind the<font color="#CCCCCC"> stock so</font>

634
00:30:14,250 --> 00:30:24,030
basically bad things happen loose<font color="#E5E5E5"> kind</font>

635
00:30:16,320 --> 00:30:26,010
of the<font color="#CCCCCC"> ad or random error basically here</font>

636
00:30:24,030 --> 00:30:30,450
is another important things the boot

637
00:30:26,010 --> 00:30:33,360
drivers at f--<font color="#E5E5E5"> is basically the</font><font color="#CCCCCC"> windows</font>

638
00:30:30,450 --> 00:30:35,370
loader<font color="#CCCCCC"> has like load each</font><font color="#E5E5E5"> boot drivers</font>

639
00:30:33,360 --> 00:30:40,289
in a contiguous and randomized vehicle

640
00:30:35,370 --> 00:30:42,270
address space so<font color="#CCCCCC"> after when</font><font color="#E5E5E5"> NT take like</font>

641
00:30:40,289 --> 00:30:43,950
control of the machine<font color="#CCCCCC"> these both</font>

642
00:30:42,270 --> 00:30:47,850
<font color="#CCCCCC">drivers can be via toy or physical</font>

643
00:30:43,950 --> 00:30:50,429
relocated but how we did that<font color="#E5E5E5"> we didn't</font>

644
00:30:47,850 --> 00:30:52,199
<font color="#E5E5E5">have enough pretties</font><font color="#CCCCCC"> I think I</font><font color="#E5E5E5"> think we</font>

645
00:30:50,429 --> 00:30:54,270
<font color="#E5E5E5">think at least that we didn't have a</font>

646
00:30:52,200 --> 00:30:56,280
pretty smart way<font color="#E5E5E5"> because like basically</font>

647
00:30:54,270 --> 00:30:59,129
the<font color="#CCCCCC"> Windows loader</font><font color="#E5E5E5"> when it</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> each</font>

648
00:30:56,280 --> 00:31:02,730
boot driver<font color="#E5E5E5"> and when I say map it's a</font>

649
00:30:59,130 --> 00:31:04,710
map and read but<font color="#CCCCCC"> not execute we</font><font color="#E5E5E5"> have a</font>

650
00:31:02,730 --> 00:31:05,130
code page at the<font color="#CCCCCC"> end of like each boot</font>

651
00:31:04,710 --> 00:31:07,679
drive

652
00:31:05,130 --> 00:31:09,809
this boot<font color="#CCCCCC"> dislike code page is not</font>

653
00:31:07,679 --> 00:31:12,539
mapping anywhere<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> windows lauder</font>

654
00:31:09,809 --> 00:31:15,418
an installation time the<font color="#E5E5E5"> memory made</font>

655
00:31:12,539 --> 00:31:18,150
manager fees<font color="#E5E5E5"> phase zero at an</font>

656
00:31:15,419 --> 00:31:21,510
installation time<font color="#E5E5E5"> basically like maps</font>

657
00:31:18,150 --> 00:31:24,150
this page to the<font color="#E5E5E5"> actual</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am</font><font color="#CCCCCC"> red pollen</font>

658
00:31:21,510 --> 00:31:26,100
guard function this guard function that

659
00:31:24,150 --> 00:31:28,650
implements the the bitmap<font color="#E5E5E5"> check in</font>

660
00:31:26,100 --> 00:31:31,350
<font color="#CCCCCC">Niemann like the red pollen are like</font>

661
00:31:28,650 --> 00:31:37,010
located in a particular<font color="#E5E5E5"> section</font><font color="#CCCCCC"> of the</font>

662
00:31:31,350 --> 00:31:42,030
anti image that is called the red<font color="#CCCCCC"> pole</font>

663
00:31:37,010 --> 00:31:44,370
so after this like the memory manager

664
00:31:42,030 --> 00:31:47,129
applies the<font color="#CCCCCC"> red Pauline updated the</font>

665
00:31:44,370 --> 00:31:49,678
bitmap and<font color="#E5E5E5"> then at the end applies</font>

666
00:31:47,130 --> 00:31:54,350
import optimization on unlike<font color="#E5E5E5"> each</font>

667
00:31:49,679 --> 00:31:57,840
driver<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> speaking</font><font color="#E5E5E5"> about boot drivers</font>

668
00:31:54,350 --> 00:32:00,418
late<font color="#E5E5E5"> at phase one the Antechinus start</font>

669
00:31:57,840 --> 00:32:02,100
like the each<font color="#CCCCCC"> boat drivers</font><font color="#E5E5E5"> one important</font>

670
00:32:00,419 --> 00:32:04,679
thing<font color="#CCCCCC"> to say is that</font><font color="#E5E5E5"> like here the boot</font>

671
00:32:02,100 --> 00:32:06,539
drivers and for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> NT perspective are</font>

672
00:32:04,679 --> 00:32:08,490
no<font color="#E5E5E5"> little chunk of memories they are</font>

673
00:32:06,539 --> 00:32:11,309
nothing<font color="#E5E5E5"> else there are not bucket by any</font>

674
00:32:08,490 --> 00:32:13,530
section<font color="#CCCCCC"> or by anything so this explain</font>

675
00:32:11,309 --> 00:32:15,840
<font color="#CCCCCC">why you can like a rename or delete your</font>

676
00:32:13,530 --> 00:32:17,789
boot<font color="#E5E5E5"> driver from like allied a live</font>

677
00:32:15,840 --> 00:32:21,928
system<font color="#CCCCCC"> but it</font><font color="#E5E5E5"> is important because it's</font>

678
00:32:17,789 --> 00:32:26,760
a big huge<font color="#CCCCCC"> difference okay in this life</font>

679
00:32:21,929 --> 00:32:28,500
like<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> like drove like scheme for</font>

680
00:32:26,760 --> 00:32:30,960
each boat driver<font color="#CCCCCC"> you can see like each</font>

681
00:32:28,500 --> 00:32:33,450
<font color="#E5E5E5">boat drivers are still as</font><font color="#CCCCCC"> PG</font><font color="#E5E5E5"> either</font>

682
00:32:30,960 --> 00:32:35,039
section<font color="#E5E5E5"> either</font><font color="#CCCCCC"> each section</font><font color="#E5E5E5"> at the at</font>

683
00:32:33,450 --> 00:32:38,130
the<font color="#CCCCCC"> end there is</font><font color="#E5E5E5"> a digital signature and</font>

684
00:32:35,039 --> 00:32:40,110
<font color="#CCCCCC">they're at polling page they read</font><font color="#E5E5E5"> one</font>

685
00:32:38,130 --> 00:32:43,159
<font color="#E5E5E5">the right column page is</font><font color="#CCCCCC"> mapping</font><font color="#E5E5E5"> on the</font>

686
00:32:40,110 --> 00:32:47,459
same<font color="#CCCCCC"> pfn</font><font color="#E5E5E5"> so we don't like consume like</font>

687
00:32:43,159 --> 00:32:49,679
memory this<font color="#CCCCCC"> right column page</font><font color="#E5E5E5"> is only a</font>

688
00:32:47,460 --> 00:32:52,380
page now but in the future<font color="#CCCCCC"> cap can</font>

689
00:32:49,679 --> 00:32:54,090
become more can become even<font color="#E5E5E5"> two pages or</font>

690
00:32:52,380 --> 00:32:59,549
whatever<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> not like a be a big deal</font>

691
00:32:54,090 --> 00:33:01,350
actually<font color="#CCCCCC"> okay the same principle of of</font>

692
00:32:59,549 --> 00:33:03,780
allocating<font color="#E5E5E5"> the Brett</font><font color="#CCCCCC"> role in page at</font><font color="#E5E5E5"> the</font>

693
00:33:01,350 --> 00:33:08,809
<font color="#CCCCCC">Todd at the at the end</font><font color="#E5E5E5"> this is applied</font>

694
00:33:03,780 --> 00:33:11,520
even like<font color="#E5E5E5"> for Mitch</font><font color="#CCCCCC"> bacon driver</font><font color="#E5E5E5"> okay</font>

695
00:33:08,809 --> 00:33:13,559
speaking about image<font color="#E5E5E5"> back at drivers</font><font color="#CCCCCC"> are</font>

696
00:33:11,520 --> 00:33:16,810
drivers<font color="#E5E5E5"> that the user can start with a</font>

697
00:33:13,559 --> 00:33:20,340
<font color="#CCCCCC">see</font><font color="#E5E5E5"> start whatever</font><font color="#CCCCCC"> or like the</font>

698
00:33:16,810 --> 00:33:23,110
the NT kernel can start<font color="#E5E5E5"> after when the</font>

699
00:33:20,340 --> 00:33:25,510
system is<font color="#E5E5E5"> completely initialized this</font>

700
00:33:23,110 --> 00:33:27,370
and this image<font color="#CCCCCC"> back at driver I've the</font>

701
00:33:25,510 --> 00:33:31,840
peculiarity to be like to<font color="#E5E5E5"> be like</font>

702
00:33:27,370 --> 00:33:33,790
<font color="#CCCCCC">beckoned by like a</font><font color="#E5E5E5"> section object so we</font>

703
00:33:31,840 --> 00:33:36,970
<font color="#CCCCCC">apply in right Polly</font><font color="#E5E5E5"> import</font><font color="#CCCCCC"> optimization</font>

704
00:33:33,790 --> 00:33:40,590
entry KCC<font color="#CCCCCC"> our first when</font><font color="#E5E5E5"> the code</font>

705
00:33:36,970 --> 00:33:43,530
integrity model validate each page and

706
00:33:40,590 --> 00:33:46,060
the shallot<font color="#E5E5E5"> page</font><font color="#CCCCCC"> a Brockton memory</font>

707
00:33:43,530 --> 00:33:49,330
<font color="#E5E5E5">second</font><font color="#CCCCCC"> Mumbai the page fault handler</font>

708
00:33:46,060 --> 00:33:51,159
when a prototype<font color="#E5E5E5"> ET fault happens so</font>

709
00:33:49,330 --> 00:33:54,389
means that the shard page has been<font color="#CCCCCC"> like</font>

710
00:33:51,160 --> 00:33:56,920
paged out of the disk<font color="#E5E5E5"> and thought and</font>

711
00:33:54,390 --> 00:33:58,990
part very important to say<font color="#CCCCCC"> that the</font>

712
00:33:56,920 --> 00:34:01,840
<font color="#E5E5E5">fix-up must to be applied and reverted</font>

713
00:33:58,990 --> 00:34:05,200
every time because<font color="#E5E5E5"> for</font><font color="#CCCCCC"> various problem</font>

714
00:34:01,840 --> 00:34:07,510
that we will see in a<font color="#CCCCCC"> while</font><font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the</font>

715
00:34:05,200 --> 00:34:10,360
<font color="#CCCCCC">adopt a problem is</font><font color="#E5E5E5"> that if you</font><font color="#CCCCCC"> think</font>

716
00:34:07,510 --> 00:34:14,050
about<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you start a driver</font><font color="#E5E5E5"> using a see</font>

717
00:34:10,360 --> 00:34:17,169
start driver or like your prefer<font color="#E5E5E5"> prefer</font>

718
00:34:14,050 --> 00:34:21,730
method and then<font color="#CCCCCC"> you map the driver using</font>

719
00:34:17,168 --> 00:34:25,620
like a section object in user mode<font color="#E5E5E5"> what</font>

720
00:34:21,730 --> 00:34:28,000
can happen it happens that<font color="#CCCCCC"> basically the</font>

721
00:34:25,620 --> 00:34:30,569
inside the kernel<font color="#E5E5E5"> there is the image</font>

722
00:34:28,000 --> 00:34:33,730
section<font color="#E5E5E5"> control area that has all the</font>

723
00:34:30,570 --> 00:34:36,880
<font color="#E5E5E5">subsection and segment data structure</font>

724
00:34:33,730 --> 00:34:40,510
and<font color="#E5E5E5"> tracks</font><font color="#CCCCCC"> the Charlotte page basically</font>

725
00:34:36,880 --> 00:34:44,050
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ANU the new controller the data</font>

726
00:34:40,510 --> 00:34:47,380
section control area the page are copied

727
00:34:44,050 --> 00:34:50,230
<font color="#E5E5E5">from the image control area so you</font><font color="#CCCCCC"> can</font>

728
00:34:47,380 --> 00:34:52,179
<font color="#CCCCCC">it can imagine</font><font color="#E5E5E5"> that we need to revert</font>

729
00:34:50,230 --> 00:34:55,179
<font color="#CCCCCC">read pauline and improvisation because</font>

730
00:34:52,179 --> 00:34:57,880
otherwise but things happen and like you

731
00:34:55,179 --> 00:35:00,610
have like<font color="#E5E5E5"> security</font><font color="#CCCCCC"> vulnerability this</font>

732
00:34:57,880 --> 00:35:03,700
slide has<font color="#CCCCCC"> been taken by</font><font color="#E5E5E5"> the from Windows</font>

733
00:35:00,610 --> 00:35:06,010
<font color="#E5E5E5">internals it's very complex</font><font color="#CCCCCC"> I don't have</font>

734
00:35:03,700 --> 00:35:11,500
time to<font color="#CCCCCC"> explain unfortunately but this</font>

735
00:35:06,010 --> 00:35:13,030
is how it works so returning back yes<font color="#CCCCCC"> so</font>

736
00:35:11,500 --> 00:35:14,740
basically<font color="#CCCCCC"> the important things to</font>

737
00:35:13,030 --> 00:35:16,210
<font color="#CCCCCC">remember here is that we apply import</font>

738
00:35:14,740 --> 00:35:18,970
<font color="#E5E5E5">optimization</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> Pauline on the</font>

739
00:35:16,210 --> 00:35:22,570
<font color="#CCCCCC">shared page that</font><font color="#E5E5E5"> are mapping by product</font>

740
00:35:18,970 --> 00:35:24,640
<font color="#CCCCCC">IPT is so when</font><font color="#E5E5E5"> you try to</font><font color="#CCCCCC"> assess if you</font>

741
00:35:22,570 --> 00:35:26,650
remember when you try to offer us<font color="#CCCCCC"> as</font>

742
00:35:24,640 --> 00:35:30,220
<font color="#CCCCCC">Charlotte page there is a fault in</font><font color="#E5E5E5"> the</font>

743
00:35:26,650 --> 00:35:31,960
<font color="#E5E5E5">camera and the private there is</font>

744
00:35:30,220 --> 00:35:33,520
<font color="#E5E5E5">a new page that is are located and the</font>

745
00:35:31,960 --> 00:35:41,470
<font color="#CCCCCC">Charlotte page is copied in</font><font color="#E5E5E5"> the private</font>

746
00:35:33,520 --> 00:35:43,450
page yes

747
00:35:41,470 --> 00:35:45,339
another things that we did is that

748
00:35:43,450 --> 00:35:47,710
implement this stuff on the<font color="#E5E5E5"> secure karna</font>

749
00:35:45,340 --> 00:35:49,300
<font color="#E5E5E5">the second</font><font color="#CCCCCC"> implemented in shot guard</font>

750
00:35:47,710 --> 00:35:51,490
implemented device guard and he's used

751
00:35:49,300 --> 00:35:54,369
it<font color="#E5E5E5"> a lot of times for the new security</font>

752
00:35:51,490 --> 00:35:57,009
features<font color="#E5E5E5"> so we found that like if we</font>

753
00:35:54,369 --> 00:36:00,280
enable secure cannon without enable<font color="#CCCCCC"> SVC</font>

754
00:35:57,010 --> 00:36:02,590
<font color="#E5E5E5">i hv CI there was not a huge difference</font>

755
00:36:00,280 --> 00:36:04,720
<font color="#E5E5E5">because like the the memory memory</font>

756
00:36:02,590 --> 00:36:07,210
manager in tech NT kernel was the one

757
00:36:04,720 --> 00:36:08,939
<font color="#E5E5E5">that was responsible</font><font color="#CCCCCC"> in apply right</font>

758
00:36:07,210 --> 00:36:13,390
Pauline and<font color="#CCCCCC"> Nibiru organization and</font>

759
00:36:08,940 --> 00:36:15,640
secure calendar was not used a lot<font color="#E5E5E5"> in</font>

760
00:36:13,390 --> 00:36:18,160
this case<font color="#E5E5E5"> so there was no difference the</font>

761
00:36:15,640 --> 00:36:20,710
huge difference resides in when you

762
00:36:18,160 --> 00:36:22,660
enable SVC I because when<font color="#E5E5E5"> you nibble SVC</font>

763
00:36:20,710 --> 00:36:25,540
<font color="#E5E5E5">ie you can the norm</font><font color="#CCCCCC"> our kernel there's</font>

764
00:36:22,660 --> 00:36:27,098
no way to touch executable page<font color="#E5E5E5"> this is</font>

765
00:36:25,540 --> 00:36:30,099
by<font color="#CCCCCC"> design because</font><font color="#E5E5E5"> it's the protection</font>

766
00:36:27,099 --> 00:36:32,500
basically in<font color="#CCCCCC"> this</font><font color="#E5E5E5"> lot in the second</font>

767
00:36:30,099 --> 00:36:35,980
level<font color="#E5E5E5"> address translation table there is</font>

768
00:36:32,500 --> 00:36:38,710
not text the right table bit set<font color="#E5E5E5"> so only</font>

769
00:36:35,980 --> 00:36:40,359
<font color="#E5E5E5">the second and can touch the executable</font>

770
00:36:38,710 --> 00:36:42,520
page so what we did is<font color="#CCCCCC"> that we</font>

771
00:36:40,359 --> 00:36:44,020
implemented<font color="#CCCCCC"> from scratch right polling</font>

772
00:36:42,520 --> 00:36:49,150
an<font color="#CCCCCC"> import optimization in the non-secure</font>

773
00:36:44,020 --> 00:36:51,070
kernel one big<font color="#E5E5E5"> difference</font><font color="#CCCCCC"> to say is that</font>

774
00:36:49,150 --> 00:36:53,560
insecure kernel we don't keep<font color="#E5E5E5"> track</font><font color="#CCCCCC"> the</font>

775
00:36:51,070 --> 00:36:56,950
of read<font color="#CCCCCC"> pauline using a bitmap</font>

776
00:36:53,560 --> 00:36:59,589
this is because<font color="#E5E5E5"> this secure can</font><font color="#CCCCCC"> an only</font>

777
00:36:56,950 --> 00:37:02,560
idea of protected image so means that

778
00:36:59,589 --> 00:37:04,420
like an image should<font color="#E5E5E5"> be like right</font>

779
00:37:02,560 --> 00:37:09,279
<font color="#E5E5E5">polling compatible or not</font><font color="#CCCCCC"> there is</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> ad</font>

780
00:37:04,420 --> 00:37:11,589
no other like differences<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> put up a</font>

781
00:37:09,280 --> 00:37:13,960
bit in the second image<font color="#E5E5E5"> data structure</font>

782
00:37:11,589 --> 00:37:19,140
that<font color="#E5E5E5"> the secure kernel has to keep</font><font color="#CCCCCC"> track</font>

783
00:37:13,960 --> 00:37:19,140
of<font color="#CCCCCC"> the protected like binaries</font>

784
00:37:20,540 --> 00:37:26,150
<font color="#E5E5E5">okay as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see here is our the</font>

785
00:37:24,530 --> 00:37:29,060
implementation problem that we face it

786
00:37:26,150 --> 00:37:31,760
<font color="#E5E5E5">there are a lot I don't have any time</font><font color="#CCCCCC"> to</font>

787
00:37:29,060 --> 00:37:33,860
explain all<font color="#CCCCCC"> of that basically I can say</font>

788
00:37:31,760 --> 00:37:35,930
<font color="#CCCCCC">so only</font><font color="#E5E5E5"> something for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> like an</font>

789
00:37:33,860 --> 00:37:38,150
<font color="#E5E5E5">example was like the</font><font color="#CCCCCC"> vor</font><font color="#E5E5E5"> stuck on winder</font>

790
00:37:35,930 --> 00:37:40,460
<font color="#E5E5E5">we had like some problem</font><font color="#CCCCCC"> about the boot</font>

791
00:37:38,150 --> 00:37:42,290
drivers relocation<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> even some</font>

792
00:37:40,460 --> 00:37:43,910
problem because basically when like the

793
00:37:42,290 --> 00:37:46,009
<font color="#CCCCCC">NT can and in the beginning was</font>

794
00:37:43,910 --> 00:37:49,580
relocating the driver via<font color="#E5E5E5"> trolley</font><font color="#CCCCCC"> maybe</font>

795
00:37:46,010 --> 00:37:51,710
a driver could<font color="#CCCCCC"> be like four gigabyte far</font>

796
00:37:49,580 --> 00:37:53,930
from another one so we couldn't apply

797
00:37:51,710 --> 00:37:57,500
import optimization<font color="#CCCCCC"> because as you know</font>

798
00:37:53,930 --> 00:38:00,140
the director<font color="#E5E5E5"> al 32 like coal</font><font color="#CCCCCC"> or jump</font>

799
00:37:57,500 --> 00:38:02,300
<font color="#E5E5E5">uses four gigabyte window so we were</font>

800
00:38:00,140 --> 00:38:03,830
skewered basically<font color="#E5E5E5"> so we have like</font>

801
00:38:02,300 --> 00:38:06,940
problem with the<font color="#E5E5E5"> Czech image debugger</font>

802
00:38:03,830 --> 00:38:09,710
extension<font color="#E5E5E5"> because that was checking was</font>

803
00:38:06,940 --> 00:38:11,900
<font color="#E5E5E5">extracting all the</font><font color="#CCCCCC"> a lot of probably in</font>

804
00:38:09,710 --> 00:38:13,760
<font color="#CCCCCC">Red Pony in like</font><font color="#E5E5E5"> six</font><font color="#CCCCCC"> ups we have</font>

805
00:38:11,900 --> 00:38:15,410
probably<font color="#E5E5E5"> in driver verifier because when</font>

806
00:38:13,760 --> 00:38:17,780
you enable driver verify you need to

807
00:38:15,410 --> 00:38:20,810
think that if<font color="#E5E5E5"> your neighbor on</font><font color="#CCCCCC"> the fly</font>

808
00:38:17,780 --> 00:38:24,230
there is like a modification of the high

809
00:38:20,810 --> 00:38:27,080
eighty like<font color="#CCCCCC"> entries so the driver can</font>

810
00:38:24,230 --> 00:38:29,480
call a<font color="#E5E5E5"> particular like checking function</font>

811
00:38:27,080 --> 00:38:31,700
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of like calling</font><font color="#E5E5E5"> the standard</font>

812
00:38:29,480 --> 00:38:33,050
<font color="#E5E5E5">function we have a problem with private</font>

813
00:38:31,700 --> 00:38:35,299
fix ups and we have a lot of

814
00:38:33,050 --> 00:38:37,910
synchronization issue issues for<font color="#CCCCCC"> example</font>

815
00:38:35,300 --> 00:38:39,860
I don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> time to explain</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> of that</font>

816
00:38:37,910 --> 00:38:41,980
of<font color="#CCCCCC"> these but I can show</font><font color="#E5E5E5"> you a funny</font>

817
00:38:39,860 --> 00:38:45,140
slide at least

818
00:38:41,980 --> 00:38:46,940
so basically<font color="#E5E5E5"> long time ago</font><font color="#CCCCCC"> like when</font><font color="#E5E5E5"> I</font>

819
00:38:45,140 --> 00:38:48,920
was<font color="#E5E5E5"> poking with Alex he told me that</font>

820
00:38:46,940 --> 00:38:51,230
like<font color="#CCCCCC"> people after like</font><font color="#E5E5E5"> touching the mmm</font>

821
00:38:48,920 --> 00:38:53,600
in Microsoft<font color="#CCCCCC"> usual in like pray that</font><font color="#E5E5E5"> all</font>

822
00:38:51,230 --> 00:38:55,550
will continue<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work when I was</font><font color="#CCCCCC"> like</font>

823
00:38:53,600 --> 00:38:56,900
implementing<font color="#E5E5E5"> this in</font><font color="#CCCCCC"> SK</font><font color="#E5E5E5"> basically I</font>

824
00:38:55,550 --> 00:38:58,910
<font color="#E5E5E5">think that I have not</font><font color="#CCCCCC"> prayed enough</font>

825
00:38:56,900 --> 00:39:00,650
because as you can<font color="#CCCCCC"> see I have</font><font color="#E5E5E5"> exported</font>

826
00:38:58,910 --> 00:39:05,930
<font color="#E5E5E5">for the problem</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I was describing</font>

827
00:39:00,650 --> 00:39:07,820
all<font color="#CCCCCC"> the relative offset</font><font color="#E5E5E5"> in when you you</font>

828
00:39:05,930 --> 00:39:10,069
<font color="#CCCCCC">Muzyka you take the driver that</font><font color="#E5E5E5"> is</font>

829
00:39:07,820 --> 00:39:12,590
<font color="#E5E5E5">loaded you map the</font><font color="#CCCCCC"> drive the same driver</font>

830
00:39:10,070 --> 00:39:16,250
in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> user space and you were extracting</font>

831
00:39:12,590 --> 00:39:18,170
<font color="#E5E5E5">all the all the offset so as you all</font>

832
00:39:16,250 --> 00:39:21,380
probably know this<font color="#E5E5E5"> is a bypass a big</font>

833
00:39:18,170 --> 00:39:26,030
bypass<font color="#E5E5E5"> and a big problem of course the</font>

834
00:39:21,380 --> 00:39:29,800
the problem was fixed<font color="#CCCCCC"> and now this is a</font>

835
00:39:26,030 --> 00:39:35,030
lesson that<font color="#CCCCCC"> I've learned basically</font>

836
00:39:29,800 --> 00:39:37,540
<font color="#E5E5E5">okay I have a live demo for you if</font><font color="#CCCCCC"> I'm</font>

837
00:39:35,030 --> 00:39:42,680
<font color="#CCCCCC">able to like do that</font>

838
00:39:37,540 --> 00:39:44,990
can<font color="#E5E5E5"> you see yeah okay as a preface this</font>

839
00:39:42,680 --> 00:39:46,609
is like a test version<font color="#E5E5E5"> of Windows</font><font color="#CCCCCC"> that I</font>

840
00:39:44,990 --> 00:39:48,919
have installed<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> compiled it and</font>

841
00:39:46,610 --> 00:39:50,870
install<font color="#CCCCCC"> it on my own</font><font color="#E5E5E5"> system so it</font>

842
00:39:48,920 --> 00:39:53,830
shouldn't not crash but if crash<font color="#E5E5E5"> please</font>

843
00:39:50,870 --> 00:39:58,250
forgive me

844
00:39:53,830 --> 00:39:59,630
so first of all this is an<font color="#CCCCCC"> application</font>

845
00:39:58,250 --> 00:40:02,210
that<font color="#E5E5E5"> are the bug application that I</font>

846
00:39:59,630 --> 00:40:12,110
<font color="#E5E5E5">wrote for testing</font><font color="#CCCCCC"> this you can see</font><font color="#E5E5E5"> that</font>

847
00:40:02,210 --> 00:40:15,320
like<font color="#E5E5E5"> I</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> I can show you</font><font color="#CCCCCC"> done no just</font>

848
00:40:12,110 --> 00:40:17,090
let me yes basically if you<font color="#CCCCCC"> can see that</font>

849
00:40:15,320 --> 00:40:22,160
is like Red<font color="#CCCCCC"> Bull and input optimization</font>

850
00:40:17,090 --> 00:40:25,940
enabled<font color="#E5E5E5"> right so second things to do is</font>

851
00:40:22,160 --> 00:40:34,700
like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> as we to open a debugger</font><font color="#E5E5E5"> this is</font>

852
00:40:25,940 --> 00:40:37,510
like the back of my<font color="#CCCCCC"> own system so check</font>

853
00:40:34,700 --> 00:40:43,790
the loaded<font color="#CCCCCC"> model</font><font color="#E5E5E5"> if I can see that yes</font>

854
00:40:37,510 --> 00:40:48,620
let<font color="#E5E5E5"> me see there is a lot</font><font color="#CCCCCC"> of like models</font>

855
00:40:43,790 --> 00:40:53,240
loaded of course let's take one<font color="#E5E5E5"> random I</font>

856
00:40:48,620 --> 00:40:54,880
don't know let's take<font color="#CCCCCC"> disk</font><font color="#E5E5E5"> for example</font>

857
00:40:53,240 --> 00:41:02,259
do<font color="#CCCCCC"> you like</font><font color="#E5E5E5"> disk</font>

858
00:40:54,880 --> 00:41:02,260
so let's<font color="#E5E5E5"> parse the DVR</font><font color="#CCCCCC"> t-table</font>

859
00:41:20,960 --> 00:41:26,700
let's put even a base address in<font color="#CCCCCC"> that</font>

860
00:41:23,400 --> 00:41:37,349
way our calculation will be much<font color="#CCCCCC"> faster</font>

861
00:41:26,700 --> 00:41:45,390
where is<font color="#CCCCCC"> disc this one and then create</font>

862
00:41:37,349 --> 00:41:56,519
an<font color="#CCCCCC"> output file I'm Italian so I</font><font color="#E5E5E5"> named in</font>

863
00:41:45,390 --> 00:42:00,210
my file<font color="#CCCCCC"> Ciao Bella</font><font color="#E5E5E5"> thortex</font><font color="#CCCCCC"> T so as you</font>

864
00:41:56,519 --> 00:42:02,758
<font color="#E5E5E5">can</font><font color="#CCCCCC"> see the</font><font color="#E5E5E5"> DVR</font><font color="#CCCCCC"> t included a lot</font><font color="#E5E5E5"> of</font>

865
00:42:00,210 --> 00:42:06,749
imported<font color="#E5E5E5"> the like come on</font><font color="#CCCCCC"> I can't see</font>

866
00:42:02,759 --> 00:42:10,140
<font color="#E5E5E5">that just a moment</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of imported</font>

867
00:42:06,749 --> 00:42:12,209
like Red Pony<font color="#CCCCCC"> fix up and at the end if</font>

868
00:42:10,140 --> 00:42:14,129
we<font color="#E5E5E5"> are lucky we</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> even like yes</font><font color="#CCCCCC"> in</font>

869
00:42:12,210 --> 00:42:17,700
<font color="#CCCCCC">director</font><font color="#E5E5E5"> right Pauline fix ups so</font>

870
00:42:14,130 --> 00:42:23,519
basically<font color="#E5E5E5"> to</font><font color="#CCCCCC"> showed</font><font color="#E5E5E5"> it those we can just</font>

871
00:42:17,700 --> 00:42:28,669
do this if we<font color="#E5E5E5"> are lucky</font><font color="#CCCCCC"> and the code</font><font color="#E5E5E5"> is</font>

872
00:42:23,519 --> 00:42:30,779
<font color="#CCCCCC">not paid out yes it's not in this</font><font color="#E5E5E5"> case</font>

873
00:42:28,670 --> 00:42:33,839
<font color="#E5E5E5">you remember that like import</font>

874
00:42:30,779 --> 00:42:35,999
optimization was enable right so in this

875
00:42:33,839 --> 00:42:37,799
<font color="#E5E5E5">case you can see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know why</font>

876
00:42:35,999 --> 00:42:45,569
you can't<font color="#CCCCCC"> see</font><font color="#E5E5E5"> because this stuff doesn't</font>

877
00:42:37,799 --> 00:42:48,660
<font color="#E5E5E5">work</font><font color="#CCCCCC"> but I will show you without zoom as</font>

878
00:42:45,569 --> 00:42:50,910
you can see like these are a relative

879
00:42:48,660 --> 00:42:55,950
direct call<font color="#E5E5E5"> so it's not important</font>

880
00:42:50,910 --> 00:42:57,839
<font color="#CCCCCC">anymore you can see guys okay so means</font>

881
00:42:55,950 --> 00:42:59,299
that the import<font color="#E5E5E5"> optimization is is</font>

882
00:42:57,839 --> 00:43:02,069
working<font color="#CCCCCC"> correctly</font>

883
00:42:59,299 --> 00:43:04,559
<font color="#CCCCCC">so let's check</font><font color="#E5E5E5"> another one let's second</font>

884
00:43:02,069 --> 00:43:07,380
<font color="#E5E5E5">indirect right</font><font color="#CCCCCC"> Pauline fix up like the</font>

885
00:43:04,559 --> 00:43:09,809
one with not known<font color="#CCCCCC"> onion CFG Red Queen</font>

886
00:43:07,380 --> 00:43:15,730
indirect branch<font color="#E5E5E5"> so let's take</font><font color="#CCCCCC"> this</font>

887
00:43:09,809 --> 00:43:18,310
address go<font color="#CCCCCC"> to the bugger and then</font>

888
00:43:15,730 --> 00:43:19,360
if we are lucky<font color="#E5E5E5"> enough that is not</font><font color="#CCCCCC"> page</font>

889
00:43:18,310 --> 00:43:21,730
<font color="#E5E5E5">it out</font><font color="#CCCCCC"> yes</font>

890
00:43:19,360 --> 00:43:24,280
instead of like<font color="#CCCCCC"> being like a jumper a</font>

891
00:43:21,730 --> 00:43:28,210
yaks jumper<font color="#CCCCCC"> XCX or whatever there is</font>

892
00:43:24,280 --> 00:43:33,220
<font color="#E5E5E5">like a jump of on a function this</font>

893
00:43:28,210 --> 00:43:35,500
function is there at<font color="#E5E5E5"> pulling up a part</font>

894
00:43:33,220 --> 00:43:37,480
for like the the strange like name

895
00:43:35,500 --> 00:43:39,310
because<font color="#E5E5E5"> of course I have not</font><font color="#CCCCCC"> rather the</font>

896
00:43:37,480 --> 00:43:42,670
symbol but this is what that was by

897
00:43:39,310 --> 00:43:44,560
design<font color="#E5E5E5"> this is the check of the Red Pony</font>

898
00:43:42,670 --> 00:43:46,900
<font color="#E5E5E5">in bitmap then there is like the</font>

899
00:43:44,560 --> 00:43:49,290
calculation of the exact<font color="#E5E5E5"> bit and then</font>

900
00:43:46,900 --> 00:43:52,980
there is<font color="#E5E5E5"> like something else like an</font>

901
00:43:49,290 --> 00:43:57,880
indirect call of like<font color="#E5E5E5"> red</font><font color="#CCCCCC"> poling like</font>

902
00:43:52,980 --> 00:44:04,450
function or like<font color="#CCCCCC"> defined</font><font color="#E5E5E5"> the code that</font>

903
00:43:57,880 --> 00:44:06,550
set<font color="#E5E5E5"> VRS yes here is the</font><font color="#CCCCCC"> right Pauline</font>

904
00:44:04,450 --> 00:44:09,939
like stuff because we can see like<font color="#E5E5E5"> that</font>

905
00:44:06,550 --> 00:44:12,750
there is<font color="#E5E5E5"> like even the the</font><font color="#CCCCCC"> L fans and</font>

906
00:44:09,940 --> 00:44:14,100
then at the end you<font color="#E5E5E5"> should find the</font>

907
00:44:12,750 --> 00:44:18,610
[Music]

908
00:44:14,100 --> 00:44:23,830
<font color="#E5E5E5">there the end of red</font><font color="#CCCCCC"> Polly this one so</font>

909
00:44:18,610 --> 00:44:25,870
means that it works<font color="#E5E5E5"> I wanted to show you</font>

910
00:44:23,830 --> 00:44:29,620
<font color="#CCCCCC">that in this system there</font><font color="#E5E5E5"> is even secure</font>

911
00:44:25,870 --> 00:44:32,259
kernel that<font color="#E5E5E5"> is enabled and so we</font><font color="#CCCCCC"> and SVC</font>

912
00:44:29,620 --> 00:44:38,560
is<font color="#E5E5E5"> enabled</font><font color="#CCCCCC"> so means that like the all</font>

913
00:44:32,260 --> 00:44:42,700
the system works<font color="#E5E5E5"> so returning at the at</font>

914
00:44:38,560 --> 00:44:45,370
the at the<font color="#E5E5E5"> presentation some conclusions</font>

915
00:44:42,700 --> 00:44:47,589
<font color="#E5E5E5">here is the way to for you to detect and</font>

916
00:44:45,370 --> 00:44:50,109
read<font color="#CCCCCC"> pauline and</font><font color="#E5E5E5"> into optimization the</font>

917
00:44:47,590 --> 00:44:53,230
unofficial non official way you can use

918
00:44:50,110 --> 00:44:55,530
like the<font color="#CCCCCC"> native z ZW query system</font>

919
00:44:53,230 --> 00:44:58,780
information<font color="#E5E5E5"> with like the speculation</font>

920
00:44:55,530 --> 00:45:04,360
<font color="#E5E5E5">class and that's it it's only to be very</font>

921
00:44:58,780 --> 00:45:06,670
<font color="#E5E5E5">easy very straightforward this</font><font color="#CCCCCC"> is the</font>

922
00:45:04,360 --> 00:45:12,160
proof of<font color="#CCCCCC"> concept that i have detected</font><font color="#E5E5E5"> at</font>

923
00:45:06,670 --> 00:45:15,490
all<font color="#E5E5E5"> works good</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> final</font><font color="#CCCCCC"> totes so</font>

924
00:45:12,160 --> 00:45:16,870
basically in<font color="#E5E5E5"> this talk we have like</font><font color="#CCCCCC"> find</font>

925
00:45:15,490 --> 00:45:19,029
that the<font color="#E5E5E5"> right polling is an affecting</font>

926
00:45:16,870 --> 00:45:22,650
<font color="#CCCCCC">and fast way</font><font color="#E5E5E5"> to defeat speak spectra</font><font color="#CCCCCC"> b2</font>

927
00:45:19,030 --> 00:45:25,000
without losing a lot of<font color="#CCCCCC"> cpu performance</font>

928
00:45:22,650 --> 00:45:27,370
<font color="#E5E5E5">an interesting fact is</font><font color="#CCCCCC"> that we found</font>

929
00:45:25,000 --> 00:45:29,560
<font color="#E5E5E5">that with import optimization the system</font>

930
00:45:27,370 --> 00:45:31,480
is faster<font color="#CCCCCC"> even in normal nor too</font>

931
00:45:29,560 --> 00:45:33,340
<font color="#E5E5E5">Pauline employments so we are trying to</font>

932
00:45:31,480 --> 00:45:35,230
<font color="#CCCCCC">always enable that regardless of</font><font color="#E5E5E5"> read</font>

933
00:45:33,340 --> 00:45:37,750
Pauline<font color="#E5E5E5"> and this is very great</font><font color="#CCCCCC"> he's a</font>

934
00:45:35,230 --> 00:45:39,220
good like achievement one thing<font color="#E5E5E5"> that I</font>

935
00:45:37,750 --> 00:45:41,980
need<font color="#CCCCCC"> to say that implementing this</font>

936
00:45:39,220 --> 00:45:45,609
technology<font color="#E5E5E5"> from scratch was far from</font>

937
00:45:41,980 --> 00:45:49,090
<font color="#E5E5E5">being easy so it was pretty complex but</font>

938
00:45:45,610 --> 00:45:55,510
<font color="#E5E5E5">we</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> it you can</font><font color="#CCCCCC"> try it if you</font><font color="#E5E5E5"> don't</font>

939
00:45:49,090 --> 00:45:57,070
want the latest inside the release okay

940
00:45:55,510 --> 00:45:58,780
someone knowledge meant<font color="#E5E5E5"> I'm pretty new</font>

941
00:45:57,070 --> 00:46:02,620
in the team so I need to<font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> team</font>

942
00:45:58,780 --> 00:46:04,840
because<font color="#E5E5E5"> like they were like</font><font color="#CCCCCC"> very helpful</font>

943
00:46:02,620 --> 00:46:06,460
and like<font color="#E5E5E5"> they helping me a lot so I</font>

944
00:46:04,840 --> 00:46:09,460
<font color="#CCCCCC">think that I I</font><font color="#E5E5E5"> work in a great team</font>

945
00:46:06,460 --> 00:46:11,620
<font color="#E5E5E5">thanks for for for that and then I</font>

946
00:46:09,460 --> 00:46:14,440
wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mint like say thanks for like</font>

947
00:46:11,620 --> 00:46:16,029
the the<font color="#E5E5E5"> three master of spectrum</font>

948
00:46:14,440 --> 00:46:18,730
meltdown that helpin me<font color="#CCCCCC"> to like an</font>

949
00:46:16,030 --> 00:46:19,570
understanding<font color="#CCCCCC"> like spectra and</font><font color="#E5E5E5"> meltdown</font>

950
00:46:18,730 --> 00:46:22,450
in a correct way

951
00:46:19,570 --> 00:46:25,990
<font color="#E5E5E5">especially Pedro that has helped me a</font>

952
00:46:22,450 --> 00:46:27,700
lot<font color="#CCCCCC"> on understanding the basics</font><font color="#E5E5E5"> last the</font>

953
00:46:25,990 --> 00:46:32,379
<font color="#CCCCCC">VC compiler team because they have like</font>

954
00:46:27,700 --> 00:46:35,500
implemented the Red Pony in directing

955
00:46:32,380 --> 00:46:39,810
<font color="#E5E5E5">the compiler we have two minutes</font><font color="#CCCCCC"> for any</font>

956
00:46:35,500 --> 00:46:39,810
<font color="#E5E5E5">questions</font><font color="#CCCCCC"> so I was like on time</font>

957
00:46:49,810 --> 00:46:55,000
for the<font color="#E5E5E5"> rat</font><font color="#CCCCCC"> Pauline itself that endless</font>

958
00:46:52,360 --> 00:46:58,000
loop<font color="#E5E5E5"> why did we choose that as opposed</font>

959
00:46:55,000 --> 00:46:59,740
to calling something<font color="#E5E5E5"> to disable the</font>

960
00:46:58,000 --> 00:47:03,370
speculative<font color="#E5E5E5"> execution or branch</font>

961
00:46:59,740 --> 00:47:06,729
prediction<font color="#E5E5E5"> okay so basically the example</font>

962
00:47:03,370 --> 00:47:08,290
that<font color="#CCCCCC"> I did I did was taken from</font><font color="#E5E5E5"> the</font>

963
00:47:06,730 --> 00:47:10,450
original<font color="#E5E5E5"> implementation of</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> Pauline</font>

964
00:47:08,290 --> 00:47:12,850
<font color="#E5E5E5">you can choose to put whatever whatever</font>

965
00:47:10,450 --> 00:47:16,750
you you think that<font color="#CCCCCC"> is better I mean</font><font color="#E5E5E5"> even</font>

966
00:47:12,850 --> 00:47:20,950
<font color="#E5E5E5">like a speculation barrier is great so</font>

967
00:47:16,750 --> 00:47:24,040
you<font color="#CCCCCC"> can do like</font><font color="#E5E5E5"> insert whatever like we</font>

968
00:47:20,950 --> 00:47:26,560
decided to do<font color="#E5E5E5"> that because</font><font color="#CCCCCC"> like for the</font>

969
00:47:24,040 --> 00:47:29,470
speculation like I mean<font color="#E5E5E5"> because when you</font>

970
00:47:26,560 --> 00:47:32,350
return like when the CPU speculate<font color="#E5E5E5"> at</font>

971
00:47:29,470 --> 00:47:34,689
the end<font color="#E5E5E5"> do nothing that's why we render</font>

972
00:47:32,350 --> 00:47:37,660
we render<font color="#CCCCCC"> it like the speculation</font>

973
00:47:34,690 --> 00:47:40,390
<font color="#E5E5E5">useless that's why I mean you can put an</font>

974
00:47:37,660 --> 00:47:43,210
endless<font color="#CCCCCC"> lobe you can put even like a bad</font>

975
00:47:40,390 --> 00:47:46,870
instruction<font color="#E5E5E5"> you can put even a memory</font>

976
00:47:43,210 --> 00:47:49,030
barrier or it's not a big deal luxury at

977
00:47:46,870 --> 00:47:51,880
that point but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original design of</font>

978
00:47:49,030 --> 00:47:54,390
read Pauline was like inserting like an

979
00:47:51,880 --> 00:47:54,390
<font color="#E5E5E5">endless loop</font>

980
00:48:09,990 --> 00:48:14,379
sorry can't hear you<font color="#CCCCCC"> I think that</font><font color="#E5E5E5"> like</font>

981
00:48:12,280 --> 00:48:16,740
the Microsoft<font color="#E5E5E5"> the microphone doesn't</font>

982
00:48:14,380 --> 00:48:16,740
<font color="#E5E5E5">work</font>

983
00:48:24,090 --> 00:48:28,540
okay<font color="#E5E5E5"> now it's better</font><font color="#CCCCCC"> but were there</font><font color="#E5E5E5"> any</font>

984
00:48:26,650 --> 00:48:30,910
smart ways you tested coverage across

985
00:48:28,540 --> 00:48:33,940
<font color="#E5E5E5">all the processors and</font><font color="#CCCCCC"> you know this</font><font color="#E5E5E5"> is</font>

986
00:48:30,910 --> 00:48:35,560
really<font color="#E5E5E5"> close to all</font><font color="#CCCCCC"> the processors and</font>

987
00:48:33,940 --> 00:48:37,780
<font color="#E5E5E5">windows would be</font><font color="#CCCCCC"> running on so many</font>

988
00:48:35,560 --> 00:48:39,640
different processors<font color="#E5E5E5"> did you have to do</font>

989
00:48:37,780 --> 00:48:42,580
anything more than usual to test the

990
00:48:39,640 --> 00:48:44,920
coverage<font color="#E5E5E5"> so I use are you asking if how</font>

991
00:48:42,580 --> 00:48:47,710
we test on different<font color="#E5E5E5"> processor right yes</font>

992
00:48:44,920 --> 00:48:50,920
this<font color="#E5E5E5"> is a good</font><font color="#CCCCCC"> question III can't reply</font>

993
00:48:47,710 --> 00:48:54,490
now in like in in 30 seconds<font color="#E5E5E5"> so we can</font>

994
00:48:50,920 --> 00:48:57,330
sync<font color="#CCCCCC"> up line about</font><font color="#E5E5E5"> that but these are</font>

995
00:48:54,490 --> 00:48:57,330
<font color="#CCCCCC">good question actually</font>

996
00:49:11,079 --> 00:49:16,900
<font color="#E5E5E5">okay if it's all alright Thank You</font>

997
00:49:14,390 --> 00:49:23,719
<font color="#E5E5E5">Andrea thanks</font><font color="#CCCCCC"> jet and</font>

998
00:49:16,900 --> 00:49:23,719
[Applause]

