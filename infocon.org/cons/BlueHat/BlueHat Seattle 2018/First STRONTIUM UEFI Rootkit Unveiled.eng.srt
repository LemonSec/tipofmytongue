1
00:00:00,030 --> 00:00:05,130
<font color="#E5E5E5">all right welcome</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the hardware</font>

2
00:00:02,580 --> 00:00:07,319
track here<font color="#CCCCCC"> we are gonna move just ever</font>

3
00:00:05,130 --> 00:00:12,540
so slightly further up the stack to<font color="#CCCCCC"> the</font>

4
00:00:07,319 --> 00:00:14,190
trusted boot UEFI this for those of you

5
00:00:12,540 --> 00:00:16,349
who from are<font color="#E5E5E5"> not familiar with this</font>

6
00:00:14,190 --> 00:00:18,000
technology<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is us trying</font><font color="#CCCCCC"> to type</font>

7
00:00:16,350 --> 00:00:20,750
further into the hardware<font color="#E5E5E5"> to make it</font>

8
00:00:18,000 --> 00:00:23,670
harder for attackers to<font color="#E5E5E5"> come in and</font>

9
00:00:20,750 --> 00:00:27,509
compromise customers<font color="#E5E5E5"> what we have today</font>

10
00:00:23,670 --> 00:00:30,000
with John Ian and<font color="#E5E5E5"> Frederick is talking</font>

11
00:00:27,510 --> 00:00:31,800
about<font color="#E5E5E5"> a nation state actor those of you</font>

12
00:00:30,000 --> 00:00:34,260
looking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Russian intrigue this is</font>

13
00:00:31,800 --> 00:00:36,780
the talk to be<font color="#E5E5E5"> at today strontium is one</font>

14
00:00:34,260 --> 00:00:39,420
of the<font color="#E5E5E5"> Russian players that we track</font>

15
00:00:36,780 --> 00:00:41,219
here at Microsoft amongst another couple

16
00:00:39,420 --> 00:00:43,290
of<font color="#E5E5E5"> names including fancy bear there</font>

17
00:00:41,219 --> 00:00:46,379
today<font color="#E5E5E5"> they're gonna walk you through</font>

18
00:00:43,290 --> 00:00:49,379
their<font color="#E5E5E5"> research on attacks by strontium</font>

19
00:00:46,379 --> 00:00:55,649
into the UEFI space<font color="#E5E5E5"> so with that please</font>

20
00:00:49,379 --> 00:00:58,440
<font color="#E5E5E5">welcome them to the blue hat stage all</font>

21
00:00:55,649 --> 00:01:00,930
<font color="#E5E5E5">right</font><font color="#CCCCCC"> thank you Phillip welcome</font><font color="#E5E5E5"> everyone</font>

22
00:00:58,440 --> 00:01:03,120
thank<font color="#CCCCCC"> you for being here</font><font color="#E5E5E5"> so as you can</font>

23
00:01:00,930 --> 00:01:05,820
<font color="#CCCCCC">tell by our title</font><font color="#E5E5E5"> we're gonna talk about</font>

24
00:01:03,120 --> 00:01:09,240
<font color="#CCCCCC">a ufi rootkit so as</font><font color="#E5E5E5"> Phillip says</font>

25
00:01:05,820 --> 00:01:11,460
strontium is a ATP group that is known

26
00:01:09,240 --> 00:01:13,048
with various different<font color="#CCCCCC"> names</font><font color="#E5E5E5"> so at each</font>

27
00:01:11,460 --> 00:01:14,399
<font color="#E5E5E5">set we call them setting it and this is</font>

28
00:01:13,049 --> 00:01:16,200
the<font color="#E5E5E5"> name I'll be using because otherwise</font>

29
00:01:14,400 --> 00:01:18,000
I'll get<font color="#E5E5E5"> all confused</font><font color="#CCCCCC"> up on stage and</font>

30
00:01:16,200 --> 00:01:20,189
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> not something I</font><font color="#E5E5E5"> want to do but</font>

31
00:01:18,000 --> 00:01:22,890
strontium is the<font color="#E5E5E5"> microchip name it's</font>

32
00:01:20,189 --> 00:01:25,199
also known as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> PT 28 as well as fancy</font>

33
00:01:22,890 --> 00:01:27,360
<font color="#CCCCCC">bare sofas sheet and is believed to be</font>

34
00:01:25,200 --> 00:01:30,299
<font color="#E5E5E5">behind a lot of notorious acts that</font>

35
00:01:27,360 --> 00:01:32,610
happened<font color="#CCCCCC"> a few years I'm sure most of</font>

36
00:01:30,299 --> 00:01:35,820
you are aware of<font color="#CCCCCC"> the hack</font><font color="#E5E5E5"> that happened</font>

37
00:01:32,610 --> 00:01:37,590
last election for the<font color="#E5E5E5"> u.s. election</font><font color="#CCCCCC"> the</font>

38
00:01:35,820 --> 00:01:40,048
<font color="#E5E5E5">DNC Ike so they are believed to be</font>

39
00:01:37,590 --> 00:01:44,369
<font color="#E5E5E5">behind that also the water hacks to the</font>

40
00:01:40,049 --> 00:01:46,439
<font color="#E5E5E5">world anti-doping agency</font><font color="#CCCCCC"> that this other</font>

41
00:01:44,369 --> 00:01:48,899
<font color="#E5E5E5">email being leaked by a group we believe</font>

42
00:01:46,439 --> 00:01:50,850
<font color="#E5E5E5">that these are they are behind this hack</font>

43
00:01:48,899 --> 00:01:52,920
as well and we know<font color="#E5E5E5"> that this group has</font>

44
00:01:50,850 --> 00:01:54,869
<font color="#CCCCCC">been very active targeting all types of</font>

45
00:01:52,920 --> 00:01:57,810
organizations<font color="#CCCCCC"> around the world</font><font color="#E5E5E5"> to gather</font>

46
00:01:54,869 --> 00:02:00,509
more<font color="#CCCCCC"> information</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> spy on</font><font color="#E5E5E5"> them</font>

47
00:01:57,810 --> 00:02:02,390
basically and we know that<font color="#E5E5E5"> they've been</font>

48
00:02:00,509 --> 00:02:04,590
<font color="#CCCCCC">using different</font><font color="#E5E5E5"> tools</font><font color="#CCCCCC"> for backdoors</font>

49
00:02:02,390 --> 00:02:07,140
<font color="#E5E5E5">first stage backdoors second stage</font>

50
00:02:04,590 --> 00:02:10,080
backdoor<font color="#E5E5E5"> but we never knew them to</font><font color="#CCCCCC"> be</font>

51
00:02:07,140 --> 00:02:12,330
able<font color="#CCCCCC"> to develop</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> use UEFI rootkit and</font>

52
00:02:10,080 --> 00:02:13,710
this is what we are going<font color="#E5E5E5"> to present you</font>

53
00:02:12,330 --> 00:02:16,650
<font color="#E5E5E5">today so</font>

54
00:02:13,710 --> 00:02:18,870
analysis of this<font color="#E5E5E5"> UFO rootkit as well as</font>

55
00:02:16,650 --> 00:02:21,030
a bit<font color="#E5E5E5"> of</font><font color="#CCCCCC"> our hunting game that was</font>

56
00:02:18,870 --> 00:02:22,770
<font color="#E5E5E5">behind all of this so being able</font><font color="#CCCCCC"> to</font>

57
00:02:21,030 --> 00:02:24,210
uncover<font color="#E5E5E5"> these type of things</font><font color="#CCCCCC"> takes some</font>

58
00:02:22,770 --> 00:02:27,090
time and we're gonna walk<font color="#CCCCCC"> you through</font>

59
00:02:24,210 --> 00:02:30,120
<font color="#CCCCCC">each step that led us to this discovery</font>

60
00:02:27,090 --> 00:02:32,280
<font color="#E5E5E5">so briefly</font><font color="#CCCCCC"> I'm Ryan butyne</font><font color="#E5E5E5"> I'm a</font><font color="#CCCCCC"> moral</font>

61
00:02:30,120 --> 00:02:33,990
researcher working for ESET based in

62
00:02:32,280 --> 00:02:36,420
Montreal<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is my colleague</font><font color="#CCCCCC"> Frederic</font>

63
00:02:33,990 --> 00:02:39,660
<font color="#E5E5E5">and we basically did this research</font>

64
00:02:36,420 --> 00:02:41,429
together<font color="#E5E5E5"> so in a nutshell</font><font color="#CCCCCC"> what we're</font>

65
00:02:39,660 --> 00:02:43,859
gonna see today is first we're<font color="#E5E5E5"> gonna go</font>

66
00:02:41,430 --> 00:02:46,320
a bit on what<font color="#CCCCCC"> is LoJack so I guess</font><font color="#E5E5E5"> that</font>

67
00:02:43,860 --> 00:02:48,240
many<font color="#E5E5E5"> people here are</font><font color="#CCCCCC"> aware of this</font>

68
00:02:46,320 --> 00:02:50,070
anti-theft software and why we're

69
00:02:48,240 --> 00:02:52,650
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> this is because</font><font color="#E5E5E5"> this</font>

70
00:02:50,070 --> 00:02:56,130
sended group<font color="#E5E5E5"> they actually use a</font><font color="#CCCCCC"> Trojan</font>

71
00:02:52,650 --> 00:02:59,910
eyes version of the userland small agent

72
00:02:56,130 --> 00:03:03,510
<font color="#E5E5E5">of though Jack to be</font><font color="#CCCCCC"> able to connect to</font>

73
00:02:59,910 --> 00:03:05,609
a communication control server and<font color="#E5E5E5"> have</font>

74
00:03:03,510 --> 00:03:07,470
the capability<font color="#CCCCCC"> to download execute code</font>

75
00:03:05,610 --> 00:03:09,780
so we're gonna first take a brief look

76
00:03:07,470 --> 00:03:12,270
<font color="#E5E5E5">of the solution and look at the past</font>

77
00:03:09,780 --> 00:03:13,800
research that happened on the older

78
00:03:12,270 --> 00:03:16,520
version of<font color="#E5E5E5"> this agent so several</font>

79
00:03:13,800 --> 00:03:19,640
researchers were published about this

80
00:03:16,520 --> 00:03:22,410
<font color="#E5E5E5">anti-theft software and they basically</font>

81
00:03:19,640 --> 00:03:24,720
put in evidence<font color="#E5E5E5"> some of the burn</font>

82
00:03:22,410 --> 00:03:28,770
abilities that were affecting this the

83
00:03:24,720 --> 00:03:30,960
software then<font color="#CCCCCC"> will tell you how we dug</font>

84
00:03:28,770 --> 00:03:35,040
<font color="#CCCCCC">in into our telemetry and eventually</font>

85
00:03:30,960 --> 00:03:37,320
found<font color="#CCCCCC"> our UEFI rootkit so let's start so</font>

86
00:03:35,040 --> 00:03:39,209
as I said computer a LoJack was<font color="#E5E5E5"> within</font>

87
00:03:37,320 --> 00:03:41,910
what was known<font color="#CCCCCC"> as computer ace in the</font>

88
00:03:39,210 --> 00:03:43,050
past is an intuitive software<font color="#E5E5E5"> so it is</font>

89
00:03:41,910 --> 00:03:45,090
built by this<font color="#E5E5E5"> company</font>

90
00:03:43,050 --> 00:03:48,900
<font color="#E5E5E5">absolute software and it's basically</font>

91
00:03:45,090 --> 00:03:51,300
meant to allow<font color="#CCCCCC"> people that lose or add</font>

92
00:03:48,900 --> 00:03:53,790
their laptop stolen be able to recover

93
00:03:51,300 --> 00:03:56,700
it<font color="#E5E5E5"> and of course when you</font><font color="#CCCCCC"> have this type</font>

94
00:03:53,790 --> 00:03:58,980
of anti<font color="#E5E5E5"> self</font><font color="#CCCCCC"> anti</font><font color="#E5E5E5"> theft software you</font>

95
00:03:56,700 --> 00:04:00,959
need to be you need it to<font color="#E5E5E5"> be as</font>

96
00:03:58,980 --> 00:04:02,850
persistent as possible<font color="#E5E5E5"> so one thing</font><font color="#CCCCCC"> that</font>

97
00:04:00,960 --> 00:04:04,410
made this software very interesting for

98
00:04:02,850 --> 00:04:06,390
research purposes is that<font color="#E5E5E5"> it had this</font>

99
00:04:04,410 --> 00:04:09,090
bias module and you'll find module<font color="#E5E5E5"> that</font>

100
00:04:06,390 --> 00:04:10,709
allowed them to<font color="#E5E5E5"> survive and security</font>

101
00:04:09,090 --> 00:04:13,620
measures<font color="#CCCCCC"> such as reinstalling the</font>

102
00:04:10,710 --> 00:04:15,720
operating system<font color="#E5E5E5"> or replacing let's say</font>

103
00:04:13,620 --> 00:04:18,120
hardest<font color="#E5E5E5"> right because the this module</font>

104
00:04:15,720 --> 00:04:19,500
was able a good<font color="#CCCCCC"> of time to replace the</font>

105
00:04:18,120 --> 00:04:23,250
agent that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> placed on the computer</font>

106
00:04:19,500 --> 00:04:26,340
and be able<font color="#CCCCCC"> to recover the laptop</font><font color="#E5E5E5"> should</font>

107
00:04:23,250 --> 00:04:27,480
it<font color="#E5E5E5"> be stolen and just in a nutshell the</font>

108
00:04:26,340 --> 00:04:29,280
capability<font color="#CCCCCC"> of the</font>

109
00:04:27,480 --> 00:04:32,040
of<font color="#E5E5E5"> this agent it's able to</font><font color="#CCCCCC"> reach out to</font>

110
00:04:29,280 --> 00:04:34,799
a server and<font color="#CCCCCC"> then it</font><font color="#E5E5E5"> can locate it</font>

111
00:04:32,040 --> 00:04:37,350
<font color="#E5E5E5">through various means a GPS tracking or</font>

112
00:04:34,800 --> 00:04:41,010
Wi-Fi triangulation and it can also lock

113
00:04:37,350 --> 00:04:43,020
it remotely<font color="#CCCCCC"> so it can receive commands</font>

114
00:04:41,010 --> 00:04:45,090
from<font color="#E5E5E5"> the server to lock the device so</font>

115
00:04:43,020 --> 00:04:47,609
that<font color="#E5E5E5"> people that</font><font color="#CCCCCC"> are in</font><font color="#E5E5E5"> possession of it</font>

116
00:04:45,090 --> 00:04:49,169
are<font color="#E5E5E5"> not able to access it you</font><font color="#CCCCCC"> can also</font>

117
00:04:47,610 --> 00:04:51,600
remove<font color="#CCCCCC"> lis delete or wipe the entire</font>

118
00:04:49,170 --> 00:04:53,280
<font color="#CCCCCC">system meaning</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> hardware loss will</font>

119
00:04:51,600 --> 00:04:55,580
not<font color="#CCCCCC"> translate to</font><font color="#E5E5E5"> a data leak so this is</font>

120
00:04:53,280 --> 00:04:57,840
<font color="#E5E5E5">something that might</font><font color="#CCCCCC"> be appealing to</font>

121
00:04:55,580 --> 00:05:01,050
corporations<font color="#E5E5E5"> and then you can also use</font>

122
00:04:57,840 --> 00:05:03,479
<font color="#CCCCCC">that to try</font><font color="#E5E5E5"> to recover your stolen</font>

123
00:05:01,050 --> 00:05:06,900
laptop<font color="#E5E5E5"> so this is really briefly</font><font color="#CCCCCC"> what</font>

124
00:05:03,480 --> 00:05:08,760
this what this anti-theft software does

125
00:05:06,900 --> 00:05:11,370
<font color="#E5E5E5">so let's</font><font color="#CCCCCC"> look at the past</font><font color="#E5E5E5"> research shows</font>

126
00:05:08,760 --> 00:05:14,670
as I said there is<font color="#E5E5E5"> this</font><font color="#CCCCCC"> ufi module bias</font>

127
00:05:11,370 --> 00:05:16,800
module that is in this in this software

128
00:05:14,670 --> 00:05:19,440
<font color="#E5E5E5">and it attracted</font><font color="#CCCCCC"> the love attention from</font>

129
00:05:16,800 --> 00:05:22,290
security researcher the first research

130
00:05:19,440 --> 00:05:24,360
that was publicly<font color="#E5E5E5"> released about and</font>

131
00:05:22,290 --> 00:05:25,800
that was being able to detail a<font color="#E5E5E5"> lot of</font>

132
00:05:24,360 --> 00:05:27,750
different abilities<font color="#CCCCCC"> is this one so it</font>

133
00:05:25,800 --> 00:05:30,450
was published<font color="#E5E5E5"> in 2009</font><font color="#CCCCCC"> presented at</font>

134
00:05:27,750 --> 00:05:32,430
blackhat USA<font color="#E5E5E5"> and it was basically</font>

135
00:05:30,450 --> 00:05:35,250
detailing a<font color="#CCCCCC"> lot of vulnerabilities</font><font color="#E5E5E5"> that</font>

136
00:05:32,430 --> 00:05:37,980
<font color="#CCCCCC">are present in</font><font color="#E5E5E5"> that wasn't at</font><font color="#CCCCCC"> the time</font>

137
00:05:35,250 --> 00:05:39,840
on<font color="#E5E5E5"> the small agent computer a small</font>

138
00:05:37,980 --> 00:05:41,970
agent and now I just<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to iterate</font>

139
00:05:39,840 --> 00:05:45,390
<font color="#E5E5E5">that all the vulnerabilities</font><font color="#CCCCCC"> we'll see</font>

140
00:05:41,970 --> 00:05:47,430
<font color="#E5E5E5">today are affecting only past versions</font>

141
00:05:45,390 --> 00:05:49,860
<font color="#E5E5E5">of the agent so this is not the solution</font>

142
00:05:47,430 --> 00:05:51,420
<font color="#E5E5E5">that is that exists now it's</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> past</font>

143
00:05:49,860 --> 00:05:53,750
<font color="#E5E5E5">agents that suffered</font><font color="#CCCCCC"> from these</font>

144
00:05:51,420 --> 00:05:55,800
vulnerabilities<font color="#E5E5E5"> so this is a</font>

145
00:05:53,750 --> 00:05:58,710
infographics that<font color="#E5E5E5"> shows a bit</font><font color="#CCCCCC"> of the</font>

146
00:05:55,800 --> 00:06:01,620
architecture of<font color="#E5E5E5"> the anti-theft software</font>

147
00:05:58,710 --> 00:06:04,289
as it<font color="#CCCCCC"> was known in the early</font><font color="#E5E5E5"> thousand so</font>

148
00:06:01,620 --> 00:06:06,750
the first step is<font color="#E5E5E5"> this</font><font color="#CCCCCC"> bias module so</font>

149
00:06:04,290 --> 00:06:09,450
what it<font color="#E5E5E5"> will do it would contain the the</font>

150
00:06:06,750 --> 00:06:11,400
agent<font color="#CCCCCC"> and was able to dump</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to the</font>

151
00:06:09,450 --> 00:06:13,380
<font color="#CCCCCC">disk</font><font color="#E5E5E5"> and how</font><font color="#CCCCCC"> we'll do</font><font color="#E5E5E5"> this it will</font>

152
00:06:11,400 --> 00:06:16,320
actually<font color="#E5E5E5"> replace the</font><font color="#CCCCCC"> auto</font><font color="#E5E5E5"> check that</font><font color="#CCCCCC"> exe</font>

153
00:06:13,380 --> 00:06:18,510
<font color="#E5E5E5">it's many of you might know what this</font>

154
00:06:16,320 --> 00:06:21,000
does it's early start up a Windows it

155
00:06:18,510 --> 00:06:23,789
will<font color="#E5E5E5"> check your</font><font color="#CCCCCC"> hard drive for for its</font>

156
00:06:21,000 --> 00:06:26,580
integrity<font color="#E5E5E5"> and of course by replacing</font>

157
00:06:23,790 --> 00:06:29,190
<font color="#E5E5E5">this file once</font><font color="#CCCCCC"> windows</font><font color="#E5E5E5"> start it will be</font>

158
00:06:26,580 --> 00:06:31,349
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to execute and the responsibility</font>

159
00:06:29,190 --> 00:06:34,170
of this one was to register the small

160
00:06:31,350 --> 00:06:36,480
agent as a service and and make sure

161
00:06:34,170 --> 00:06:39,870
that it<font color="#E5E5E5"> would be launched every time</font>

162
00:06:36,480 --> 00:06:41,060
that the system<font color="#E5E5E5"> would would start the</font>

163
00:06:39,870 --> 00:06:43,669
small agent itself

164
00:06:41,060 --> 00:06:45,770
it main purpose is to<font color="#CCCCCC"> make sure that the</font>

165
00:06:43,669 --> 00:06:47,599
full recovery agent<font color="#E5E5E5"> so the agent</font>

166
00:06:45,770 --> 00:06:49,729
responsible<font color="#CCCCCC"> to communicate with the</font><font color="#E5E5E5"> CNC</font>

167
00:06:47,600 --> 00:06:51,830
server is always<font color="#E5E5E5"> present on the system</font>

168
00:06:49,730 --> 00:06:55,700
<font color="#CCCCCC">and if it's not</font><font color="#E5E5E5"> it's able</font><font color="#CCCCCC"> to download</font>

169
00:06:51,830 --> 00:06:57,800
<font color="#E5E5E5">and if you shoot a version from absolute</font>

170
00:06:55,700 --> 00:06:59,840
software server and how it does this is

171
00:06:57,800 --> 00:07:02,180
interesting because it will first<font color="#CCCCCC"> pong a</font>

172
00:06:59,840 --> 00:07:04,880
service<font color="#CCCCCC"> toast process injects it and</font>

173
00:07:02,180 --> 00:07:07,250
change<font color="#E5E5E5"> itself as a DLL inject into</font><font color="#CCCCCC"> this</font>

174
00:07:04,880 --> 00:07:09,530
<font color="#E5E5E5">process then spawn and Internet Explorer</font>

175
00:07:07,250 --> 00:07:12,620
process<font color="#E5E5E5"> and then inject the DLL again</font>

176
00:07:09,530 --> 00:07:15,679
<font color="#E5E5E5">and from this Internet Explorer process</font>

177
00:07:12,620 --> 00:07:17,419
will then reach out to a server<font color="#E5E5E5"> to try</font>

178
00:07:15,680 --> 00:07:20,090
to download<font color="#E5E5E5"> and execute stuff so this is</font>

179
00:07:17,419 --> 00:07:22,070
not something we see<font color="#E5E5E5"> that often</font>

180
00:07:20,090 --> 00:07:26,239
legitimate<font color="#CCCCCC"> software this is behavior</font>

181
00:07:22,070 --> 00:07:29,330
that<font color="#E5E5E5"> is very that</font><font color="#CCCCCC"> we see all the time in</font>

182
00:07:26,240 --> 00:07:31,340
malware so this is a bit a bit<font color="#E5E5E5"> different</font>

183
00:07:29,330 --> 00:07:33,109
we don't<font color="#CCCCCC"> see this a lot in legitimate</font>

184
00:07:31,340 --> 00:07:34,729
and then the last<font color="#E5E5E5"> step is of course</font><font color="#CCCCCC"> a</font>

185
00:07:33,110 --> 00:07:36,740
full recovery agent is running<font color="#CCCCCC"> on the</font>

186
00:07:34,729 --> 00:07:38,750
system<font color="#CCCCCC"> and it's able</font><font color="#E5E5E5"> to receive command</font>

187
00:07:36,740 --> 00:07:41,180
from machine C so I'm gonna show<font color="#E5E5E5"> you</font>

188
00:07:38,750 --> 00:07:43,250
<font color="#E5E5E5">only</font><font color="#CCCCCC"> one brand ability that was found at</font>

189
00:07:41,180 --> 00:07:46,280
that<font color="#E5E5E5"> time because it's the only one that</font>

190
00:07:43,250 --> 00:07:49,940
really matters<font color="#CCCCCC"> so here you see</font><font color="#E5E5E5"> a part of</font>

191
00:07:46,280 --> 00:07:52,159
a small agent from from LoJack<font color="#CCCCCC"> so this</font>

192
00:07:49,940 --> 00:07:54,979
is a<font color="#E5E5E5"> configuration file</font><font color="#CCCCCC"> so it's one way</font>

193
00:07:52,160 --> 00:07:58,190
<font color="#E5E5E5">that they use to get the server where it</font>

194
00:07:54,979 --> 00:07:59,570
will connect and as you see not much can

195
00:07:58,190 --> 00:08:03,590
<font color="#CCCCCC">be seen from</font><font color="#E5E5E5"> there it's actually</font>

196
00:07:59,570 --> 00:08:06,370
encrypted<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's not very using</font><font color="#E5E5E5"> tough</font>

197
00:08:03,590 --> 00:08:09,888
encryption it's actually<font color="#E5E5E5"> absorbed with a</font>

198
00:08:06,370 --> 00:08:11,900
single bugs or key which is<font color="#CCCCCC"> zero B 5 in</font>

199
00:08:09,889 --> 00:08:13,729
that<font color="#CCCCCC"> case and as you can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> here you</font>

200
00:08:11,900 --> 00:08:15,409
can clear text you<font color="#E5E5E5"> can see the domain</font>

201
00:08:13,729 --> 00:08:18,710
that<font color="#CCCCCC"> would that it will try to reach out</font>

202
00:08:15,410 --> 00:08:21,289
<font color="#CCCCCC">to</font><font color="#E5E5E5"> should to that download extra</font><font color="#CCCCCC"> to</font>

203
00:08:18,710 --> 00:08:24,049
download the full agent so of course

204
00:08:21,289 --> 00:08:26,330
this<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> very secure</font><font color="#CCCCCC"> there were</font><font color="#E5E5E5"> note</font>

205
00:08:24,050 --> 00:08:29,840
that authentication done at that<font color="#E5E5E5"> time</font><font color="#CCCCCC"> so</font>

206
00:08:26,330 --> 00:08:32,179
if an attacker had access to the<font color="#CCCCCC"> for</font>

207
00:08:29,840 --> 00:08:33,740
<font color="#CCCCCC">confer</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> two right to override</font><font color="#E5E5E5"> this</font>

208
00:08:32,179 --> 00:08:35,569
configuration<font color="#CCCCCC"> file you could change it</font>

209
00:08:33,740 --> 00:08:39,110
and change<font color="#CCCCCC"> the server to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> smaller than</font>

210
00:08:35,570 --> 00:08:41,150
<font color="#E5E5E5">to connect to so as I said the URL is</font>

211
00:08:39,110 --> 00:08:42,919
visible once decrypted and the four

212
00:08:41,150 --> 00:08:44,390
bytes<font color="#E5E5E5"> were sitting it is actually</font><font color="#CCCCCC"> an IP</font>

213
00:08:42,919 --> 00:08:46,670
address<font color="#CCCCCC"> so the small agent</font><font color="#E5E5E5"> will use this</font>

214
00:08:44,390 --> 00:08:48,589
information<font color="#E5E5E5"> to know where to connect so</font>

215
00:08:46,670 --> 00:08:51,140
this is one from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> booty that</font><font color="#CCCCCC"> was</font>

216
00:08:48,589 --> 00:08:52,280
highlighted<font color="#E5E5E5"> if you fast forward 2014</font>

217
00:08:51,140 --> 00:08:55,069
there was another<font color="#E5E5E5"> very interesting</font>

218
00:08:52,280 --> 00:08:57,529
<font color="#CCCCCC">research made by published in</font>

219
00:08:55,070 --> 00:09:00,079
and presented a black<font color="#E5E5E5"> hat</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that was</font>

220
00:08:57,529 --> 00:09:02,209
partly made by<font color="#CCCCCC"> kaspersky and they</font>

221
00:09:00,079 --> 00:09:03,979
basically documented the old<font color="#E5E5E5"> network</font>

222
00:09:02,209 --> 00:09:05,689
protocol<font color="#E5E5E5"> that was used by the small</font>

223
00:09:03,980 --> 00:09:08,000
agent<font color="#E5E5E5"> making it making it even easier</font>

224
00:09:05,690 --> 00:09:10,160
<font color="#CCCCCC">for an attacker to</font><font color="#E5E5E5"> actually be able</font><font color="#CCCCCC"> to</font>

225
00:09:08,000 --> 00:09:12,829
take control<font color="#CCCCCC"> of the system basically and</font>

226
00:09:10,160 --> 00:09:14,750
how this<font color="#CCCCCC"> I'll de sarousch</font>

227
00:09:12,829 --> 00:09:16,969
how the solution works<font color="#E5E5E5"> is that they</font>

228
00:09:14,750 --> 00:09:18,829
absolutely suffer as deals with a lot<font color="#CCCCCC"> of</font>

229
00:09:16,970 --> 00:09:20,810
our manufacturers<font color="#CCCCCC"> or firmware</font>

230
00:09:18,829 --> 00:09:23,089
<font color="#E5E5E5">manufacturers so that their bias module</font>

231
00:09:20,810 --> 00:09:25,250
is included in a lot<font color="#CCCCCC"> of laptops so if</font>

232
00:09:23,089 --> 00:09:26,930
you looked<font color="#E5E5E5"> up in your bias settings</font>

233
00:09:25,250 --> 00:09:28,819
there's a good chance that<font color="#E5E5E5"> the computers</font>

234
00:09:26,930 --> 00:09:30,258
will already be<font color="#E5E5E5"> installed on your</font><font color="#CCCCCC"> system</font>

235
00:09:28,819 --> 00:09:33,649
and<font color="#E5E5E5"> all you need to do is activate it</font>

236
00:09:30,259 --> 00:09:35,240
and what Kaspersky discovered is<font color="#CCCCCC"> that in</font>

237
00:09:33,649 --> 00:09:37,009
some cases<font color="#E5E5E5"> there was some silent</font>

238
00:09:35,240 --> 00:09:40,069
activation<font color="#CCCCCC"> of the things on other things</font>

239
00:09:37,009 --> 00:09:41,690
<font color="#CCCCCC">of concern so if we do a</font><font color="#E5E5E5"> little recap</font>

240
00:09:40,069 --> 00:09:44,029
what I showed<font color="#CCCCCC"> you is</font><font color="#E5E5E5"> this configuration</font>

241
00:09:41,690 --> 00:09:46,910
<font color="#E5E5E5">file which is kind of key in this in</font>

242
00:09:44,029 --> 00:09:49,670
this<font color="#CCCCCC"> all LoJack's campaign because it's</font>

243
00:09:46,910 --> 00:09:51,529
quite easy for<font color="#CCCCCC"> this ol agent</font><font color="#E5E5E5"> to change</font>

244
00:09:49,670 --> 00:09:54,009
its configuration<font color="#CCCCCC"> fund and control where</font>

245
00:09:51,529 --> 00:09:57,350
the small agent will connect to so

246
00:09:54,009 --> 00:09:59,540
that's<font color="#E5E5E5"> kind of the end of the small</font>

247
00:09:57,350 --> 00:10:01,699
<font color="#E5E5E5">introduction so now it's time to</font><font color="#CCCCCC"> dig in</font>

248
00:09:59,540 --> 00:10:04,250
so at that point<font color="#CCCCCC"> like we didn't see</font>

249
00:10:01,699 --> 00:10:06,139
<font color="#CCCCCC">white campaign using these type of</font>

250
00:10:04,250 --> 00:10:09,260
vulnerabilities to<font color="#E5E5E5"> try to compromise</font>

251
00:10:06,139 --> 00:10:10,760
systems<font color="#E5E5E5"> that was until last May</font><font color="#CCCCCC"> where a</font>

252
00:10:09,260 --> 00:10:13,040
<font color="#CCCCCC">blog</font><font color="#E5E5E5"> from our bure networks was</font>

253
00:10:10,760 --> 00:10:15,920
published<font color="#E5E5E5"> basically what they found is</font>

254
00:10:13,040 --> 00:10:18,680
that<font color="#E5E5E5"> a lot of trojan eyes small agent</font>

255
00:10:15,920 --> 00:10:21,110
were in the<font color="#E5E5E5"> world and they see that the</font>

256
00:10:18,680 --> 00:10:23,899
agent is is the same as the legitimate

257
00:10:21,110 --> 00:10:26,480
<font color="#E5E5E5">one but only the configuration file was</font>

258
00:10:23,899 --> 00:10:29,300
patched with new domain<font color="#E5E5E5"> and new IPs and</font>

259
00:10:26,480 --> 00:10:31,910
they were able<font color="#CCCCCC"> to link</font><font color="#E5E5E5"> these new domains</font>

260
00:10:29,300 --> 00:10:33,979
<font color="#E5E5E5">to all domains that were used by</font><font color="#CCCCCC"> the</font>

261
00:10:31,910 --> 00:10:37,040
Senate group in the past so this is how

262
00:10:33,980 --> 00:10:39,199
they were<font color="#E5E5E5"> able to see</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> there's most</font>

263
00:10:37,040 --> 00:10:41,540
likely link between this<font color="#E5E5E5"> LoJack a</font>

264
00:10:39,199 --> 00:10:43,279
campaign and send it so this<font color="#E5E5E5"> is really</font>

265
00:10:41,540 --> 00:10:45,230
<font color="#E5E5E5">the starting point for us so we saw this</font>

266
00:10:43,279 --> 00:10:47,269
we say okay let's<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> no telemetry to</font>

267
00:10:45,230 --> 00:10:49,819
see if there's something<font color="#E5E5E5"> more because if</font>

268
00:10:47,269 --> 00:10:53,329
we go back<font color="#CCCCCC"> to the architecture I showed</font>

269
00:10:49,819 --> 00:10:57,110
you so<font color="#CCCCCC"> the old architecture</font><font color="#E5E5E5"> from 2008 if</font>

270
00:10:53,329 --> 00:11:00,589
we see only the<font color="#E5E5E5"> LoJack example small</font>

271
00:10:57,110 --> 00:11:02,480
agent on the system<font color="#E5E5E5"> the most likely the</font>

272
00:11:00,589 --> 00:11:04,430
<font color="#E5E5E5">most likely way that the agent is own</font>

273
00:11:02,480 --> 00:11:06,230
assistant<font color="#E5E5E5"> is just by dropping it and we</font>

274
00:11:04,430 --> 00:11:08,479
know that<font color="#E5E5E5"> senator several</font><font color="#CCCCCC"> backdoors</font><font color="#E5E5E5"> that</font>

275
00:11:06,230 --> 00:11:10,730
give them full control over<font color="#E5E5E5"> this</font>

276
00:11:08,480 --> 00:11:13,670
meaning<font color="#CCCCCC"> that they could</font><font color="#E5E5E5"> just use a small</font>

277
00:11:10,730 --> 00:11:15,560
agent<font color="#CCCCCC"> to as</font><font color="#E5E5E5"> a very persistent method if</font>

278
00:11:13,670 --> 00:11:17,660
they<font color="#CCCCCC"> should lose access to network a way</font>

279
00:11:15,560 --> 00:11:21,410
to regain it right and the fact that

280
00:11:17,660 --> 00:11:23,150
this software is legitimate<font color="#E5E5E5"> it's what</font>

281
00:11:21,410 --> 00:11:25,219
listed by a lot of<font color="#CCCCCC"> Av so it makes it</font>

282
00:11:23,150 --> 00:11:28,970
easier<font color="#CCCCCC"> to go under the</font><font color="#E5E5E5"> radar so just</font>

283
00:11:25,220 --> 00:11:31,400
that is actually a good<font color="#CCCCCC"> thing but we</font>

284
00:11:28,970 --> 00:11:34,280
still wanted to see if they try<font color="#CCCCCC"> to mimic</font>

285
00:11:31,400 --> 00:11:36,230
the full object solution a bit more so

286
00:11:34,280 --> 00:11:39,230
this<font color="#E5E5E5"> is one</font><font color="#CCCCCC"> of the configuration file</font>

287
00:11:36,230 --> 00:11:40,940
that<font color="#E5E5E5"> was altered</font><font color="#CCCCCC"> by the the attacker and</font>

288
00:11:39,230 --> 00:11:43,100
what's interesting is<font color="#CCCCCC"> that they all use</font>

289
00:11:40,940 --> 00:11:45,080
the same<font color="#E5E5E5"> sample of the legitimate LoJack</font>

290
00:11:43,100 --> 00:11:47,720
small agent so it has all the<font color="#E5E5E5"> same</font>

291
00:11:45,080 --> 00:11:51,380
completion times<font color="#CCCCCC"> them from 2008</font><font color="#E5E5E5"> and all</font>

292
00:11:47,720 --> 00:11:53,840
they did<font color="#CCCCCC"> is to overwrite the so like a</font>

293
00:11:51,380 --> 00:11:55,670
<font color="#E5E5E5">couple of bytes from the configuration</font>

294
00:11:53,840 --> 00:11:57,470
file<font color="#E5E5E5"> change in the IP</font><font color="#CCCCCC"> address changing</font>

295
00:11:55,670 --> 00:12:00,020
the domain name as well<font color="#E5E5E5"> as some other</font>

296
00:11:57,470 --> 00:12:03,260
stuff<font color="#E5E5E5"> but mainly the bulk of the small</font>

297
00:12:00,020 --> 00:12:04,790
agent is exactly the same but since they

298
00:12:03,260 --> 00:12:07,490
<font color="#E5E5E5">were using all the same thing it's it's</font>

299
00:12:04,790 --> 00:12:10,730
actually<font color="#E5E5E5"> easier</font><font color="#CCCCCC"> for us to see and track</font>

300
00:12:07,490 --> 00:12:13,190
all<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these samples that that occur in</font>

301
00:12:10,730 --> 00:12:16,280
our<font color="#CCCCCC"> telemetry</font><font color="#E5E5E5"> so this is what we did and</font>

302
00:12:13,190 --> 00:12:20,120
we found<font color="#CCCCCC"> few</font><font color="#E5E5E5"> organizations that were hit</font>

303
00:12:16,280 --> 00:12:23,870
by this<font color="#E5E5E5"> LoJack's campaign and it's</font>

304
00:12:20,120 --> 00:12:25,970
interesting to note here that<font color="#CCCCCC"> Senate is</font>

305
00:12:23,870 --> 00:12:27,800
targeting a<font color="#E5E5E5"> lot of organizations around</font>

306
00:12:25,970 --> 00:12:29,660
the<font color="#E5E5E5"> world and this LoJack's campaign</font>

307
00:12:27,800 --> 00:12:32,060
<font color="#E5E5E5">targeted only</font><font color="#CCCCCC"> a few</font><font color="#E5E5E5"> of them so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

308
00:12:29,660 --> 00:12:34,310
<font color="#E5E5E5">not as widespread as the other AI</font>

309
00:12:32,060 --> 00:12:35,719
campaign we see so the deterrent the

310
00:12:34,310 --> 00:12:37,369
verticals were mostly military<font color="#CCCCCC"> in</font>

311
00:12:35,720 --> 00:12:39,800
<font color="#CCCCCC">diplomatic organizations which is in</font>

312
00:12:37,370 --> 00:12:43,330
line<font color="#CCCCCC"> with the traditional targeting of</font>

313
00:12:39,800 --> 00:12:45,530
Senate and in<font color="#CCCCCC"> these</font><font color="#E5E5E5"> systems that were</font>

314
00:12:43,330 --> 00:12:49,160
that LoJack's was found and we also

315
00:12:45,530 --> 00:12:53,569
found<font color="#CCCCCC"> traces of</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> Senate tools so a</font>

316
00:12:49,160 --> 00:12:55,760
typical<font color="#CCCCCC"> a typical infection from from</font>

317
00:12:53,570 --> 00:12:57,350
this<font color="#CCCCCC"> LoJack campaign would</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> X agent</font><font color="#E5E5E5"> so</font>

318
00:12:55,760 --> 00:12:59,720
for those<font color="#E5E5E5"> of</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> not familiar with</font><font color="#CCCCCC"> Sen</font>

319
00:12:57,350 --> 00:13:01,610
<font color="#CCCCCC">that</font><font color="#E5E5E5"> X agent is kind of their flagship</font>

320
00:12:59,720 --> 00:13:04,730
<font color="#CCCCCC">backdoor this is what we found on a lot</font>

321
00:13:01,610 --> 00:13:06,680
of system they use<font color="#E5E5E5"> it to execute code to</font>

322
00:13:04,730 --> 00:13:08,630
spy<font color="#E5E5E5"> on the victim basically</font><font color="#CCCCCC"> say regular</font>

323
00:13:06,680 --> 00:13:10,849
<font color="#E5E5E5">backdoor then you have external like so</font>

324
00:13:08,630 --> 00:13:13,370
<font color="#CCCCCC">know is a key proxy tool so it allows</font>

325
00:13:10,850 --> 00:13:15,290
them to<font color="#CCCCCC"> reach computers are not directly</font>

326
00:13:13,370 --> 00:13:18,680
<font color="#E5E5E5">connected</font><font color="#CCCCCC"> to the internet</font><font color="#E5E5E5"> so they use</font>

327
00:13:15,290 --> 00:13:20,060
this external<font color="#E5E5E5"> on a computer that</font><font color="#CCCCCC"> is that</font>

328
00:13:18,680 --> 00:13:22,160
has<font color="#CCCCCC"> access to the Internet</font><font color="#E5E5E5"> and they can</font>

329
00:13:20,060 --> 00:13:24,229
relay the<font color="#E5E5E5"> command to computers which do</font>

330
00:13:22,160 --> 00:13:27,290
have connection<font color="#E5E5E5"> and then finally we sell</font>

331
00:13:24,230 --> 00:13:29,120
<font color="#CCCCCC">LoJack's</font><font color="#E5E5E5"> somewhere in between these and</font>

332
00:13:27,290 --> 00:13:31,939
we didn't know at that<font color="#CCCCCC"> time how the</font>

333
00:13:29,120 --> 00:13:34,120
small agent was appearing there<font color="#E5E5E5"> so of</font>

334
00:13:31,940 --> 00:13:36,350
course<font color="#E5E5E5"> as I said earlier the</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> likely</font>

335
00:13:34,120 --> 00:13:38,029
the most<font color="#E5E5E5"> likely explanation would be</font>

336
00:13:36,350 --> 00:13:40,009
<font color="#CCCCCC">that the ex agent would be used</font><font color="#E5E5E5"> to drop</font>

337
00:13:38,029 --> 00:13:42,529
the small agent but we<font color="#E5E5E5"> still wanted to</font>

338
00:13:40,009 --> 00:13:44,389
<font color="#E5E5E5">dig a bit more right</font><font color="#CCCCCC"> I just want to</font>

339
00:13:42,529 --> 00:13:48,139
highlight some some of<font color="#CCCCCC"> the stuff</font><font color="#E5E5E5"> about</font>

340
00:13:44,389 --> 00:13:50,149
these<font color="#E5E5E5"> LoJack's infection so in some</font>

341
00:13:48,139 --> 00:13:51,529
<font color="#E5E5E5">cases we sell LoJack's that was like the</font>

342
00:13:50,149 --> 00:13:53,420
<font color="#E5E5E5">only thing</font><font color="#CCCCCC"> that was on</font><font color="#E5E5E5"> the system was</font>

343
00:13:51,529 --> 00:13:56,930
LoJack's which is interesting<font color="#E5E5E5"> by itself</font>

344
00:13:53,420 --> 00:13:58,729
<font color="#E5E5E5">because</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> I said</font><font color="#CCCCCC"> earlier these software</font>

345
00:13:56,930 --> 00:14:00,469
since it's a<font color="#CCCCCC"> trojan eyes version of</font>

346
00:13:58,730 --> 00:14:02,120
<font color="#E5E5E5">illegitimate</font><font color="#CCCCCC"> software it's likely to</font><font color="#E5E5E5"> be</font>

347
00:14:00,470 --> 00:14:04,819
<font color="#E5E5E5">white listed so if you have only this on</font>

348
00:14:02,120 --> 00:14:06,740
computer it might help you<font color="#CCCCCC"> to regain</font>

349
00:14:04,819 --> 00:14:08,779
<font color="#E5E5E5">access should you lose access to network</font>

350
00:14:06,740 --> 00:14:10,639
<font color="#E5E5E5">they are where they were also updating</font>

351
00:14:08,779 --> 00:14:13,420
the configuration file<font color="#CCCCCC"> of these LoJack's</font>

352
00:14:10,639 --> 00:14:15,800
<font color="#E5E5E5">agents so they were able</font><font color="#CCCCCC"> to update the</font>

353
00:14:13,420 --> 00:14:18,649
sample there to make<font color="#CCCCCC"> sure that their</font>

354
00:14:15,800 --> 00:14:21,889
servers were always<font color="#E5E5E5"> available then</font>

355
00:14:18,649 --> 00:14:23,839
finally for<font color="#E5E5E5"> the small agent stuff how we</font>

356
00:14:21,889 --> 00:14:28,069
link<font color="#E5E5E5"> it to send it well</font><font color="#CCCCCC"> our were</font><font color="#E5E5E5"> already</font>

357
00:14:23,839 --> 00:14:30,290
stated<font color="#E5E5E5"> that the domains were reused from</font>

358
00:14:28,069 --> 00:14:32,180
<font color="#E5E5E5">past Senate campaigns and we saw the</font>

359
00:14:30,290 --> 00:14:34,069
<font color="#E5E5E5">same</font><font color="#CCCCCC"> thing so IP</font><font color="#E5E5E5"> 10 domains</font><font color="#CCCCCC"> that were</font>

360
00:14:32,180 --> 00:14:36,199
used in<font color="#E5E5E5"> previous campaigns were also</font>

361
00:14:34,069 --> 00:14:38,269
reused in LoJack's campaign then the

362
00:14:36,199 --> 00:14:40,609
tooling of course these compromised

363
00:14:38,269 --> 00:14:42,829
<font color="#E5E5E5">organizations also had other traces of</font>

364
00:14:40,610 --> 00:14:44,540
other<font color="#CCCCCC"> sender tools and then</font><font color="#E5E5E5"> the targets</font>

365
00:14:42,829 --> 00:14:46,459
<font color="#E5E5E5">were kind of the same so if</font><font color="#CCCCCC"> we put</font><font color="#E5E5E5"> all</font>

366
00:14:44,540 --> 00:14:48,829
that<font color="#CCCCCC"> together we can assess with high</font>

367
00:14:46,459 --> 00:14:53,119
confidence<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> is linked as well</font>

368
00:14:48,829 --> 00:14:55,910
to send it so now let's go a<font color="#E5E5E5"> bit wider</font>

369
00:14:53,120 --> 00:14:58,750
<font color="#CCCCCC">so</font><font color="#E5E5E5"> we've assessed that this</font><font color="#CCCCCC"> load</font><font color="#E5E5E5"> drive</font>

370
00:14:55,910 --> 00:15:01,430
campaign<font color="#E5E5E5"> is consisting of course of the</font>

371
00:14:58,750 --> 00:15:03,079
small agent but let's<font color="#E5E5E5"> try and see if we</font>

372
00:15:01,430 --> 00:15:05,719
cannot find<font color="#E5E5E5"> something else if it's not</font>

373
00:15:03,079 --> 00:15:09,170
only<font color="#CCCCCC"> using land but</font><font color="#E5E5E5"> going a bit deeper</font>

374
00:15:05,720 --> 00:15:11,000
right<font color="#E5E5E5"> and last week there was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> like an</font>

375
00:15:09,170 --> 00:15:13,579
<font color="#E5E5E5">interesting blog that was published in</font>

376
00:15:11,000 --> 00:15:15,500
the virus<font color="#E5E5E5"> bulletin blog virus</font><font color="#CCCCCC"> balton is</font>

377
00:15:13,579 --> 00:15:17,540
a security conference<font color="#CCCCCC"> it's going to be</font>

378
00:15:15,500 --> 00:15:19,850
held next<font color="#CCCCCC"> week in</font><font color="#E5E5E5"> Montreal in fact and</font>

379
00:15:17,540 --> 00:15:22,370
there was a guest<font color="#E5E5E5"> blog from Carson Rio I</font>

380
00:15:19,850 --> 00:15:24,199
guess many of<font color="#E5E5E5"> you know this no</font><font color="#CCCCCC"> custom is</font>

381
00:15:22,370 --> 00:15:26,959
the director of great<font color="#E5E5E5"> at Kaspersky and</font>

382
00:15:24,199 --> 00:15:28,939
he<font color="#E5E5E5"> basically wrote an article saying</font>

383
00:15:26,959 --> 00:15:31,790
where are<font color="#CCCCCC"> all the AIDS in the apt and</font>

384
00:15:28,939 --> 00:15:33,649
when he meant by that is<font color="#E5E5E5"> that well a lot</font>

385
00:15:31,790 --> 00:15:34,829
<font color="#CCCCCC">of cool security research is</font><font color="#E5E5E5"> happening</font>

386
00:15:33,649 --> 00:15:37,200
all the<font color="#E5E5E5"> time</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> don't</font>

387
00:15:34,830 --> 00:15:40,230
see these<font color="#E5E5E5"> groups reusing the really high</font>

388
00:15:37,200 --> 00:15:42,690
hand<font color="#E5E5E5"> result of this research Andy then</font>

389
00:15:40,230 --> 00:15:44,880
listed a<font color="#CCCCCC"> couple of things</font><font color="#E5E5E5"> he</font><font color="#CCCCCC"> said we</font>

390
00:15:42,690 --> 00:15:47,370
might<font color="#E5E5E5"> see at some point and one point</font>

391
00:15:44,880 --> 00:15:49,640
was this one which was we have yet to

392
00:15:47,370 --> 00:15:52,850
observe real<font color="#CCCCCC"> while</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> refine malware</font><font color="#E5E5E5"> so</font>

393
00:15:49,640 --> 00:15:55,590
let's see if we<font color="#E5E5E5"> can cross that</font><font color="#CCCCCC"> one out</font>

394
00:15:52,850 --> 00:15:58,080
<font color="#E5E5E5">before going deeper</font><font color="#CCCCCC"> I just want to show</font>

395
00:15:55,590 --> 00:16:00,450
you this so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a degree of</font><font color="#E5E5E5"> a tool</font>

396
00:15:58,080 --> 00:16:02,550
called<font color="#CCCCCC"> readwrite everything so it's</font>

397
00:16:00,450 --> 00:16:04,470
freely<font color="#E5E5E5"> available on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> web at readwrite</font>

398
00:16:02,550 --> 00:16:07,520
everything calm and basically it allows

399
00:16:04,470 --> 00:16:10,110
<font color="#E5E5E5">you to read and write different</font>

400
00:16:07,520 --> 00:16:12,000
configuration items at very low level<font color="#E5E5E5"> at</font>

401
00:16:10,110 --> 00:16:15,150
the order level<font color="#E5E5E5"> so it allows the the</font>

402
00:16:12,000 --> 00:16:18,180
<font color="#E5E5E5">user to see a lot of</font><font color="#CCCCCC"> configuration items</font>

403
00:16:15,150 --> 00:16:20,430
and it's used<font color="#E5E5E5"> to do that it uses a</font>

404
00:16:18,180 --> 00:16:22,620
driver<font color="#E5E5E5"> so the driver is a kernel driver</font>

405
00:16:20,430 --> 00:16:24,979
of course it's signed<font color="#CCCCCC"> as if this</font><font color="#E5E5E5"> is</font>

406
00:16:22,620 --> 00:16:27,540
legitimate software<font color="#E5E5E5"> it is sign of course</font>

407
00:16:24,980 --> 00:16:30,120
<font color="#E5E5E5">all kernel driver now and windows need</font>

408
00:16:27,540 --> 00:16:32,010
to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> signed and this driver we saw it</font>

409
00:16:30,120 --> 00:16:34,890
used in different<font color="#E5E5E5"> tools to be able to</font>

410
00:16:32,010 --> 00:16:37,439
<font color="#CCCCCC">access this Louisville information</font><font color="#E5E5E5"> and</font>

411
00:16:34,890 --> 00:16:39,030
we actually<font color="#E5E5E5"> found it in one tool</font><font color="#CCCCCC"> that</font>

412
00:16:37,440 --> 00:16:41,700
was alongside some LoJack's

413
00:16:39,030 --> 00:16:45,089
compromised<font color="#E5E5E5"> this is a tool</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> info</font>

414
00:16:41,700 --> 00:16:47,420
<font color="#CCCCCC">efi that exe and all it does</font><font color="#E5E5E5"> is to dump</font>

415
00:16:45,090 --> 00:16:50,160
a lot<font color="#E5E5E5"> of information</font><font color="#CCCCCC"> on the low level</font>

416
00:16:47,420 --> 00:16:52,890
settings of a platform<font color="#CCCCCC"> here I'm</font><font color="#E5E5E5"> showing</font>

417
00:16:50,160 --> 00:16:55,350
you a snippet<font color="#E5E5E5"> of a log file that it</font>

418
00:16:52,890 --> 00:16:57,990
produces when it's<font color="#CCCCCC"> executed</font><font color="#E5E5E5"> but of</font>

419
00:16:55,350 --> 00:17:00,390
course it is much longer<font color="#E5E5E5"> than what I'm</font>

420
00:16:57,990 --> 00:17:03,720
<font color="#CCCCCC">showing here and of course if you</font><font color="#E5E5E5"> want</font>

421
00:17:00,390 --> 00:17:05,190
<font color="#CCCCCC">to go and develop ufi</font><font color="#E5E5E5"> rootkit this is a</font>

422
00:17:03,720 --> 00:17:06,839
type of<font color="#E5E5E5"> information you need</font><font color="#CCCCCC"> because</font>

423
00:17:05,190 --> 00:17:09,480
it's really<font color="#CCCCCC"> all</font><font color="#E5E5E5"> dependent so having</font>

424
00:17:06,839 --> 00:17:12,708
<font color="#E5E5E5">access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the sorry the platform</font>

425
00:17:09,480 --> 00:17:15,270
settings is key to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> develop a</font>

426
00:17:12,709 --> 00:17:16,830
<font color="#CCCCCC">ufi rootkit right so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> kind of the</font>

427
00:17:15,270 --> 00:17:18,270
<font color="#E5E5E5">first sign that led us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> believe</font><font color="#CCCCCC"> ok</font>

428
00:17:16,829 --> 00:17:20,639
maybe<font color="#E5E5E5"> there's there's</font><font color="#CCCCCC"> more to this story</font>

429
00:17:18,270 --> 00:17:22,980
<font color="#E5E5E5">maybe there's not only the</font><font color="#CCCCCC"> small</font><font color="#E5E5E5"> agent</font>

430
00:17:20,640 --> 00:17:25,589
but they<font color="#E5E5E5"> actually went a bit further</font><font color="#CCCCCC"> so</font>

431
00:17:22,980 --> 00:17:28,290
if we go back<font color="#CCCCCC"> to the original</font>

432
00:17:25,589 --> 00:17:30,629
architecture<font color="#E5E5E5"> I showed you before the</font>

433
00:17:28,290 --> 00:17:32,340
step before the<font color="#E5E5E5"> user land is actually</font>

434
00:17:30,630 --> 00:17:35,310
the<font color="#CCCCCC"> Auto Check</font><font color="#E5E5E5"> the THC the one I</font>

435
00:17:32,340 --> 00:17:37,800
discussed<font color="#CCCCCC"> previously and interestingly</font>

436
00:17:35,310 --> 00:17:40,139
we did find something<font color="#E5E5E5"> that looks quite a</font>

437
00:17:37,800 --> 00:17:42,840
bit<font color="#CCCCCC"> like this so it's a</font><font color="#E5E5E5"> file or</font><font color="#CCCCCC"> tucci</font>

438
00:17:40,140 --> 00:17:44,610
<font color="#E5E5E5">the THC instead of</font><font color="#CCCCCC"> AutoCheck</font><font color="#E5E5E5"> the THC</font><font color="#CCCCCC"> and</font>

439
00:17:42,840 --> 00:17:47,850
it does something<font color="#E5E5E5"> very similar</font><font color="#CCCCCC"> to what</font>

440
00:17:44,610 --> 00:17:48,629
<font color="#E5E5E5">the reader to</font><font color="#CCCCCC"> check exe from computer s</font>

441
00:17:47,850 --> 00:17:50,760
is<font color="#E5E5E5"> doing</font>

442
00:17:48,630 --> 00:17:53,580
first it<font color="#CCCCCC"> will register</font><font color="#E5E5E5"> service with this</font>

443
00:17:50,760 --> 00:17:55,740
name<font color="#E5E5E5"> this is the original name the</font>

444
00:17:53,580 --> 00:17:58,439
legitimate name that<font color="#CCCCCC"> computerized agent</font>

445
00:17:55,740 --> 00:18:00,570
would use it will then register<font color="#E5E5E5"> the</font><font color="#CCCCCC"> RPC</font>

446
00:17:58,440 --> 00:18:03,780
<font color="#CCCCCC">net P so the small agent executable as</font>

447
00:18:00,570 --> 00:18:05,669
the service so it will be ran and each

448
00:18:03,780 --> 00:18:08,370
time<font color="#E5E5E5"> the service would start and then</font>

449
00:18:05,670 --> 00:18:10,560
the<font color="#CCCCCC"> interesting part is that</font><font color="#E5E5E5"> you cannot</font>

450
00:18:08,370 --> 00:18:12,780
see very<font color="#E5E5E5"> well here but this is basically</font>

451
00:18:10,560 --> 00:18:15,810
a string that is<font color="#CCCCCC"> AutoCheck</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> THC</font>

452
00:18:12,780 --> 00:18:18,389
and it's actually writing<font color="#E5E5E5"> it to the boot</font>

453
00:18:15,810 --> 00:18:20,639
execute registry key which is the key

454
00:18:18,390 --> 00:18:23,550
<font color="#E5E5E5">that holds the path to the auto check</font>

455
00:18:20,640 --> 00:18:25,170
the THC<font color="#E5E5E5"> meaning that it puts puts it</font>

456
00:18:23,550 --> 00:18:27,570
<font color="#E5E5E5">back to the original</font><font color="#CCCCCC"> value so at</font><font color="#E5E5E5"> that</font>

457
00:18:25,170 --> 00:18:30,000
<font color="#E5E5E5">point we didn't</font><font color="#CCCCCC"> know exactly</font><font color="#E5E5E5"> how this</font>

458
00:18:27,570 --> 00:18:32,760
<font color="#CCCCCC">Auto key</font><font color="#E5E5E5"> no THC was launched but we knew</font>

459
00:18:30,000 --> 00:18:36,870
<font color="#E5E5E5">that they were overriding the registry</font>

460
00:18:32,760 --> 00:18:39,960
key to its original<font color="#E5E5E5"> value so let's try</font>

461
00:18:36,870 --> 00:18:42,600
to find something<font color="#CCCCCC"> else right</font><font color="#E5E5E5"> so the the</font>

462
00:18:39,960 --> 00:18:44,490
<font color="#CCCCCC">first tool that</font><font color="#E5E5E5"> really put us on the</font>

463
00:18:42,600 --> 00:18:46,740
right path<font color="#CCCCCC"> is this one</font><font color="#E5E5E5"> so it's called</font>

464
00:18:44,490 --> 00:18:49,710
<font color="#E5E5E5">early writer</font><font color="#CCCCCC"> the underscore read point</font>

465
00:18:46,740 --> 00:18:53,280
that<font color="#E5E5E5"> exe it was found in some LoJack's</font>

466
00:18:49,710 --> 00:18:55,800
<font color="#E5E5E5">install as</font><font color="#CCCCCC"> well and how</font><font color="#E5E5E5"> it's it's only</font>

467
00:18:53,280 --> 00:18:58,200
<font color="#CCCCCC">purpose is to dump the SPI flash memory</font>

468
00:18:55,800 --> 00:19:01,020
<font color="#E5E5E5">and how it does</font><font color="#CCCCCC"> that is by using this</font>

469
00:18:58,200 --> 00:19:02,220
read write everything driver<font color="#E5E5E5"> and you in</font>

470
00:19:01,020 --> 00:19:03,990
the table here<font color="#CCCCCC"> you</font><font color="#E5E5E5"> see the different</font>

471
00:19:02,220 --> 00:19:06,240
input output control code that it's

472
00:19:03,990 --> 00:19:09,690
using so it's able<font color="#CCCCCC"> to read and write</font>

473
00:19:06,240 --> 00:19:11,730
from memory mapped i/o space<font color="#E5E5E5"> also read</font>

474
00:19:09,690 --> 00:19:13,590
and write at the<font color="#CCCCCC"> in the PCI</font>

475
00:19:11,730 --> 00:19:15,840
configuration register so these are the

476
00:19:13,590 --> 00:19:19,530
<font color="#E5E5E5">are you</font><font color="#CCCCCC"> CTL that</font><font color="#E5E5E5"> this tool uses from</font>

477
00:19:15,840 --> 00:19:21,300
<font color="#CCCCCC">readwrite</font><font color="#E5E5E5"> everything and the binary</font>

478
00:19:19,530 --> 00:19:23,580
itself contains a lot of<font color="#E5E5E5"> debug strings</font>

479
00:19:21,300 --> 00:19:25,320
<font color="#CCCCCC">so this is very cool for a reverse</font>

480
00:19:23,580 --> 00:19:27,960
engineer because<font color="#E5E5E5"> it's that much easier</font>

481
00:19:25,320 --> 00:19:29,520
<font color="#CCCCCC">to actually</font><font color="#E5E5E5"> and know what is going on</font>

482
00:19:27,960 --> 00:19:32,940
but<font color="#CCCCCC"> also attending case that the tool</font>

483
00:19:29,520 --> 00:19:35,610
was most<font color="#E5E5E5"> likely being developed every so</font>

484
00:19:32,940 --> 00:19:37,500
it had three main operation the first

485
00:19:35,610 --> 00:19:39,240
<font color="#CCCCCC">one was to blog information on the bias</font>

486
00:19:37,500 --> 00:19:41,790
<font color="#E5E5E5">control register and Fredrik will</font>

487
00:19:39,240 --> 00:19:43,560
explain why<font color="#CCCCCC"> it needed</font><font color="#E5E5E5"> this the second</font>

488
00:19:41,790 --> 00:19:45,570
thing was<font color="#CCCCCC"> to locate the bias region</font><font color="#E5E5E5"> and</font>

489
00:19:43,560 --> 00:19:48,350
then read the<font color="#CCCCCC"> ufi Fuhrman content and</font>

490
00:19:45,570 --> 00:19:52,169
dump it<font color="#CCCCCC"> to a file so how</font><font color="#E5E5E5"> will do this</font>

491
00:19:48,350 --> 00:19:55,080
quite simple this<font color="#E5E5E5"> is a very standard</font>

492
00:19:52,170 --> 00:19:58,620
procedure<font color="#CCCCCC"> to</font><font color="#E5E5E5"> read the</font><font color="#CCCCCC"> ufi</font><font color="#E5E5E5"> so what it</font>

493
00:19:55,080 --> 00:20:00,629
<font color="#E5E5E5">will do is</font><font color="#CCCCCC"> that it will first put in the</font>

494
00:19:58,620 --> 00:20:01,739
order<font color="#E5E5E5"> sequence</font><font color="#CCCCCC"> and flash control</font>

495
00:20:00,630 --> 00:20:04,289
register

496
00:20:01,740 --> 00:20:06,510
the address did a number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> bytes that</font>

497
00:20:04,289 --> 00:20:08,700
it wants<font color="#CCCCCC"> to read so in the</font><font color="#E5E5E5"> field</font><font color="#CCCCCC"> flash</font>

498
00:20:06,510 --> 00:20:12,390
<font color="#E5E5E5">of the byte count and then it would go</font>

499
00:20:08,700 --> 00:20:14,730
<font color="#CCCCCC">ahead and and set the read operation</font>

500
00:20:12,390 --> 00:20:17,850
<font color="#CCCCCC">into the flash cycle so zero zero so</font>

501
00:20:14,730 --> 00:20:20,549
meaning that<font color="#E5E5E5"> the the flash</font><font color="#CCCCCC"> apne knows</font>

502
00:20:17,850 --> 00:20:22,730
that it will need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do a read operation</font>

503
00:20:20,549 --> 00:20:25,168
<font color="#CCCCCC">then what we will do is that it will</font>

504
00:20:22,730 --> 00:20:28,320
write the address it wants to read<font color="#E5E5E5"> into</font>

505
00:20:25,169 --> 00:20:30,809
<font color="#E5E5E5">the</font><font color="#CCCCCC"> other sequencing flash control</font>

506
00:20:28,320 --> 00:20:33,330
register then<font color="#CCCCCC"> write on the flash cycle</font>

507
00:20:30,809 --> 00:20:35,850
go<font color="#CCCCCC"> say into the flash chip</font><font color="#E5E5E5"> let's go read</font>

508
00:20:33,330 --> 00:20:38,100
the the<font color="#E5E5E5"> operation it will then wait for</font>

509
00:20:35,850 --> 00:20:41,129
the all read<font color="#CCCCCC"> cycle to finish by looking</font>

510
00:20:38,100 --> 00:20:43,350
<font color="#E5E5E5">at the specific field</font><font color="#CCCCCC"> ESP Ike cycle in</font>

511
00:20:41,130 --> 00:20:45,210
progress<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a field</font><font color="#E5E5E5"> in the yard</font>

512
00:20:43,350 --> 00:20:46,889
<font color="#E5E5E5">were sequencing flash status register</font>

513
00:20:45,210 --> 00:20:48,870
and as soon as it's zero that means that

514
00:20:46,890 --> 00:20:51,210
<font color="#E5E5E5">the read operation</font><font color="#CCCCCC"> is done and that data</font>

515
00:20:48,870 --> 00:20:53,580
is actually<font color="#E5E5E5"> available in the flash later</font>

516
00:20:51,210 --> 00:20:55,590
register so the the program will read it

517
00:20:53,580 --> 00:20:58,379
from from from<font color="#E5E5E5"> there and then put it in</font>

518
00:20:55,590 --> 00:20:59,970
<font color="#CCCCCC">the</font><font color="#E5E5E5"> file and dump the old firmware image</font>

519
00:20:58,380 --> 00:21:02,820
using<font color="#E5E5E5"> this old procedure</font>

520
00:20:59,970 --> 00:21:06,600
so now<font color="#E5E5E5"> we'll</font><font color="#CCCCCC"> let</font><font color="#E5E5E5"> Frederick walk you</font>

521
00:21:02,820 --> 00:21:08,280
through the<font color="#E5E5E5"> rest of presentation</font><font color="#CCCCCC"> okay so</font>

522
00:21:06,600 --> 00:21:11,039
the next<font color="#CCCCCC"> tool like we found</font><font color="#E5E5E5"> on some</font>

523
00:21:08,280 --> 00:21:14,129
system is called are you<font color="#CCCCCC"> ready binary</font>

524
00:21:11,039 --> 00:21:16,470
and<font color="#E5E5E5"> this tool contains a lot of debug</font>

525
00:21:14,130 --> 00:21:20,669
strings it is very similar<font color="#CCCCCC"> to a re</font>

526
00:21:16,470 --> 00:21:23,340
<font color="#E5E5E5">writer read and it also uses read write</font>

527
00:21:20,669 --> 00:21:25,650
everything<font color="#CCCCCC"> with driver</font><font color="#E5E5E5"> so now that the</font>

528
00:21:23,340 --> 00:21:27,689
UEFI firmwares dump the next thing<font color="#CCCCCC"> that</font>

529
00:21:25,650 --> 00:21:30,270
this<font color="#E5E5E5"> tool will will do is that it</font><font color="#CCCCCC"> will</font>

530
00:21:27,690 --> 00:21:32,100
add the UEFI<font color="#CCCCCC"> rootkit food</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> more in</font>

531
00:21:30,270 --> 00:21:36,240
<font color="#E5E5E5">memory in memory and then it will write</font>

532
00:21:32,100 --> 00:21:39,000
it back to the<font color="#CCCCCC"> SPI flash memory so let's</font>

533
00:21:36,240 --> 00:21:41,850
talk<font color="#CCCCCC"> about the patching the you patching</font>

534
00:21:39,000 --> 00:21:43,169
<font color="#E5E5E5">UEFI firmware so before we dig into this</font>

535
00:21:41,850 --> 00:21:45,090
I<font color="#CCCCCC"> just want to</font><font color="#E5E5E5"> introduce couple things</font>

536
00:21:43,169 --> 00:21:47,460
here<font color="#E5E5E5"> so</font><font color="#CCCCCC"> just make sure that we're on the</font>

537
00:21:45,090 --> 00:21:50,129
same page so<font color="#CCCCCC"> let's first define what</font>

538
00:21:47,460 --> 00:21:52,350
UEFI is so<font color="#E5E5E5"> fi stands for unified</font>

539
00:21:50,130 --> 00:21:54,870
extensible firmware interface<font color="#E5E5E5"> and it is</font>

540
00:21:52,350 --> 00:21:58,110
kind<font color="#E5E5E5"> of a replacement for the legacy</font>

541
00:21:54,870 --> 00:22:00,178
bias<font color="#CCCCCC"> it is kind of a new standard for</font>

542
00:21:58,110 --> 00:22:04,350
for more<font color="#E5E5E5"> development at least for PC</font>

543
00:22:00,179 --> 00:22:06,570
platforms and<font color="#E5E5E5"> for the laptops and UEFI</font>

544
00:22:04,350 --> 00:22:08,760
is is a specification<font color="#E5E5E5"> which</font><font color="#CCCCCC"> tenderize</font>

545
00:22:06,570 --> 00:22:12,270
the interface that exists between<font color="#CCCCCC"> the</font>

546
00:22:08,760 --> 00:22:14,520
firmware<font color="#E5E5E5"> and the operating system a UEFI</font>

547
00:22:12,270 --> 00:22:15,210
compliant system will provide a set of

548
00:22:14,520 --> 00:22:17,580
services

549
00:22:15,210 --> 00:22:19,200
<font color="#E5E5E5">to EFI applications and here just read</font>

550
00:22:17,580 --> 00:22:21,210
operating system loader<font color="#E5E5E5"> there there</font>

551
00:22:19,200 --> 00:22:22,830
could be some other<font color="#E5E5E5"> UEFI applications</font>

552
00:22:21,210 --> 00:22:25,559
but usually it is<font color="#CCCCCC"> in the braiding system</font>

553
00:22:22,830 --> 00:22:27,960
loader so services that will<font color="#CCCCCC"> be</font>

554
00:22:25,559 --> 00:22:29,490
<font color="#CCCCCC">available are the boot services these</font>

555
00:22:27,960 --> 00:22:32,279
<font color="#CCCCCC">services will be available until</font><font color="#E5E5E5"> the</font>

556
00:22:29,490 --> 00:22:34,350
operating system loader<font color="#E5E5E5"> is executed or</font>

557
00:22:32,279 --> 00:22:36,899
more<font color="#E5E5E5"> precisely until it calls exit boot</font>

558
00:22:34,350 --> 00:22:38,428
services and there are the runtime

559
00:22:36,899 --> 00:22:40,770
<font color="#CCCCCC">services which are</font><font color="#E5E5E5"> the services that are</font>

560
00:22:38,429 --> 00:22:44,520
<font color="#E5E5E5">available even when the operating system</font>

561
00:22:40,770 --> 00:22:47,158
<font color="#CCCCCC">is is running</font><font color="#E5E5E5"> so what's interesting with</font>

562
00:22:44,520 --> 00:22:49,049
<font color="#CCCCCC">UEFI</font><font color="#E5E5E5"> is that there is no more Master</font>

563
00:22:47,159 --> 00:22:51,000
Boot Record or volume Boot Record

564
00:22:49,049 --> 00:22:53,399
<font color="#E5E5E5">involved so there's no easy way</font><font color="#CCCCCC"> to</font>

565
00:22:51,000 --> 00:22:54,960
hijack boot<font color="#E5E5E5"> control flow just</font><font color="#CCCCCC"> by writing</font>

566
00:22:53,399 --> 00:22:58,590
to the<font color="#E5E5E5"> first sector of the disk for</font>

567
00:22:54,960 --> 00:23:01,529
instance the second thing I want<font color="#CCCCCC"> reduce</font>

568
00:22:58,590 --> 00:23:05,070
here<font color="#CCCCCC"> is well</font><font color="#E5E5E5"> are the driver execution</font>

569
00:23:01,529 --> 00:23:07,559
environment drivers so<font color="#CCCCCC"> there they are</font>

570
00:23:05,070 --> 00:23:09,750
<font color="#E5E5E5">called the XE drivers so</font><font color="#CCCCCC"> they are P</font>

571
00:23:07,559 --> 00:23:11,908
<font color="#CCCCCC">cough</font><font color="#E5E5E5"> images so basically Windows</font>

572
00:23:09,750 --> 00:23:15,149
executables<font color="#E5E5E5"> and they can do many things</font>

573
00:23:11,909 --> 00:23:16,710
<font color="#E5E5E5">it can abstract</font><font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> they can some</font>

574
00:23:15,149 --> 00:23:18,510
of<font color="#E5E5E5"> them will produce the UEFI standard</font>

575
00:23:16,710 --> 00:23:21,630
it interface so the boot services and

576
00:23:18,510 --> 00:23:23,340
the runtime<font color="#E5E5E5"> services and they can also</font>

577
00:23:21,630 --> 00:23:26,159
<font color="#E5E5E5">be used to extend</font><font color="#CCCCCC"> the platform</font><font color="#E5E5E5"> by</font>

578
00:23:23,340 --> 00:23:30,899
registering<font color="#E5E5E5"> new new services the</font>

579
00:23:26,159 --> 00:23:32,760
so-called<font color="#E5E5E5"> protocols so</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> Lexi drivers</font>

580
00:23:30,899 --> 00:23:34,860
are loaded during<font color="#E5E5E5"> the DEXA phase of the</font>

581
00:23:32,760 --> 00:23:37,289
platform initialization<font color="#CCCCCC"> which is a</font><font color="#E5E5E5"> PHA</font>

582
00:23:34,860 --> 00:23:41,330
that happens before<font color="#CCCCCC"> the operating system</font>

583
00:23:37,289 --> 00:23:43,950
the operating system loader is executed

584
00:23:41,330 --> 00:23:46,260
and<font color="#E5E5E5"> the taxi drivers are loaded by</font><font color="#CCCCCC"> the</font>

585
00:23:43,950 --> 00:23:48,390
<font color="#CCCCCC">Dexy dispatcher will also refer to</font><font color="#E5E5E5"> this</font>

586
00:23:46,260 --> 00:23:51,840
as the<font color="#CCCCCC"> dixie core later on in this</font>

587
00:23:48,390 --> 00:23:54,210
presentation<font color="#CCCCCC"> now the last thing</font><font color="#E5E5E5"> I want</font>

588
00:23:51,840 --> 00:23:55,350
<font color="#E5E5E5">to introduce for now is the</font><font color="#CCCCCC"> UEFI</font>

589
00:23:54,210 --> 00:23:57,450
firmware<font color="#CCCCCC"> playout</font>

590
00:23:55,350 --> 00:24:01,490
so the if<font color="#E5E5E5"> I firmware is located in the</font>

591
00:23:57,450 --> 00:24:04,049
bias<font color="#E5E5E5"> region of the</font><font color="#CCCCCC"> SPI flash memory and</font>

592
00:24:01,490 --> 00:24:06,270
the this region will contain multiple

593
00:24:04,049 --> 00:24:09,149
volumes these volume will contain files

594
00:24:06,270 --> 00:24:11,549
<font color="#E5E5E5">let's just look at it in UEFI</font><font color="#CCCCCC"> 2 which is</font>

595
00:24:09,149 --> 00:24:15,029
an open source<font color="#E5E5E5"> project for manipulating</font>

596
00:24:11,549 --> 00:24:18,029
UEFI firmware so here we see the<font color="#CCCCCC"> typical</font>

597
00:24:15,029 --> 00:24:20,010
content of a<font color="#E5E5E5"> spi flash memory dump</font><font color="#CCCCCC"> the</font>

598
00:24:18,029 --> 00:24:21,899
first thing that<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is there hopefully</font>

599
00:24:20,010 --> 00:24:24,120
you can see<font color="#E5E5E5"> this is the descriptor</font>

600
00:24:21,899 --> 00:24:26,219
region which gives some metadata about

601
00:24:24,120 --> 00:24:28,370
<font color="#E5E5E5">how the data is laid out in the</font><font color="#CCCCCC"> spi</font>

602
00:24:26,220 --> 00:24:30,110
<font color="#CCCCCC">flash memory</font><font color="#E5E5E5"> then we have the Amir</font>

603
00:24:28,370 --> 00:24:32,179
which is the<font color="#E5E5E5"> Intel measurement in Zion</font>

604
00:24:30,110 --> 00:24:35,059
region that contains the intelligent

605
00:24:32,180 --> 00:24:36,650
<font color="#E5E5E5">management engine from work and we have</font>

606
00:24:35,059 --> 00:24:40,580
the<font color="#E5E5E5"> bias region which is the</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> it's</font>

607
00:24:36,650 --> 00:24:42,170
<font color="#CCCCCC">that Erin's interested us</font><font color="#E5E5E5"> now so the</font>

608
00:24:40,580 --> 00:24:44,720
<font color="#CCCCCC">biased region as I mentioned contains</font>

609
00:24:42,170 --> 00:24:47,809
multiple volumes<font color="#E5E5E5"> so let's look at how it</font>

610
00:24:44,720 --> 00:24:51,230
<font color="#CCCCCC">looks so here we have a volume this</font>

611
00:24:47,809 --> 00:24:53,540
volume is<font color="#CCCCCC"> at an F FS v2 meaning firm or</font>

612
00:24:51,230 --> 00:24:56,390
fastest<font color="#E5E5E5"> M version</font><font color="#CCCCCC"> - and it contains</font>

613
00:24:53,540 --> 00:24:59,180
multiple<font color="#E5E5E5"> files these files are named by</font>

614
00:24:56,390 --> 00:25:02,540
<font color="#CCCCCC">GU</font><font color="#E5E5E5"> it's that we can see under the the</font>

615
00:24:59,180 --> 00:25:05,120
name column and when we expand the file

616
00:25:02,540 --> 00:25:07,670
we<font color="#CCCCCC"> have multiple</font><font color="#E5E5E5"> sections one of these</font>

617
00:25:05,120 --> 00:25:09,800
<font color="#E5E5E5">section is the actual UEFI image that</font>

618
00:25:07,670 --> 00:25:11,720
what we can see the<font color="#E5E5E5"> p32</font>

619
00:25:09,800 --> 00:25:13,340
image<font color="#E5E5E5"> section but there are other</font>

620
00:25:11,720 --> 00:25:14,929
section like the Dixie dependency

621
00:25:13,340 --> 00:25:17,449
<font color="#CCCCCC">section which allows to define some</font>

622
00:25:14,929 --> 00:25:18,980
dependencies for UEFI executables

623
00:25:17,450 --> 00:25:21,559
there's the version section which is

624
00:25:18,980 --> 00:25:23,720
pretty<font color="#E5E5E5"> self-explanatory</font><font color="#CCCCCC"> and there's the</font>

625
00:25:21,559 --> 00:25:27,649
user interface section<font color="#CCCCCC"> which</font><font color="#E5E5E5"> allows</font><font color="#CCCCCC"> to</font>

626
00:25:23,720 --> 00:25:29,780
give a human readable<font color="#E5E5E5"> name for the file</font>

627
00:25:27,650 --> 00:25:32,000
so that's what you<font color="#E5E5E5"> can see under the</font>

628
00:25:29,780 --> 00:25:36,678
<font color="#E5E5E5">text column so all of these file here</font>

629
00:25:32,000 --> 00:25:38,600
have a user interface<font color="#E5E5E5"> section okay so</font>

630
00:25:36,679 --> 00:25:40,910
now that now<font color="#E5E5E5"> that we've seen all this</font>

631
00:25:38,600 --> 00:25:42,919
let's go<font color="#CCCCCC"> back to our e</font><font color="#E5E5E5"> writer binary so</font>

632
00:25:40,910 --> 00:25:45,559
what this<font color="#E5E5E5"> tool</font><font color="#CCCCCC"> is do</font><font color="#E5E5E5"> we'll do first is</font>

633
00:25:42,920 --> 00:25:48,350
that<font color="#E5E5E5"> it will will parse</font><font color="#CCCCCC"> out all of these</font>

634
00:25:45,559 --> 00:25:52,129
<font color="#CCCCCC">four more volumes that that are in the</font>

635
00:25:48,350 --> 00:25:55,129
bias region and it will look<font color="#E5E5E5"> for</font><font color="#CCCCCC"> four</font>

636
00:25:52,130 --> 00:26:00,850
specific<font color="#E5E5E5"> files will look for IP</font><font color="#CCCCCC"> ford XE</font>

637
00:25:55,130 --> 00:26:03,080
NTFS<font color="#E5E5E5"> dec c SMI flash and the</font><font color="#CCCCCC"> DEXA core</font>

638
00:26:00,850 --> 00:26:05,840
<font color="#CCCCCC">the reason why it looks for these</font>

639
00:26:03,080 --> 00:26:08,090
specific files<font color="#CCCCCC"> well for IP for dexian</font>

640
00:26:05,840 --> 00:26:09,770
the<font color="#CCCCCC"> DEXA core these are used</font><font color="#E5E5E5"> to find the</font>

641
00:26:08,090 --> 00:26:12,649
firmware volumes were to install the

642
00:26:09,770 --> 00:26:14,690
rootkit usually the<font color="#CCCCCC"> Dexy drivers are all</font>

643
00:26:12,650 --> 00:26:17,270
in the same<font color="#CCCCCC"> volume</font><font color="#E5E5E5"> so when the tool will</font>

644
00:26:14,690 --> 00:26:20,300
<font color="#CCCCCC">be will will find</font><font color="#E5E5E5"> IP for</font><font color="#CCCCCC"> Dexy it knows</font>

645
00:26:17,270 --> 00:26:22,750
that<font color="#E5E5E5"> it is currently parsing the next</font>

646
00:26:20,300 --> 00:26:24,649
<font color="#CCCCCC">driver's volume and it will keep it</font><font color="#E5E5E5"> as a</font>

647
00:26:22,750 --> 00:26:28,580
candidate<font color="#E5E5E5"> for the you if I would</font><font color="#CCCCCC"> get</font>

648
00:26:24,650 --> 00:26:31,429
installation and then DS XE core can be

649
00:26:28,580 --> 00:26:33,199
<font color="#CCCCCC">in another</font><font color="#E5E5E5"> volume so it will do the</font><font color="#CCCCCC"> same</font>

650
00:26:31,429 --> 00:26:34,730
<font color="#CCCCCC">thing when it finds the</font><font color="#E5E5E5"> hexa core volume</font>

651
00:26:33,200 --> 00:26:37,010
<font color="#E5E5E5">it will keep some</font><font color="#CCCCCC"> information about</font><font color="#E5E5E5"> it</font>

652
00:26:34,730 --> 00:26:40,070
<font color="#E5E5E5">and we'll</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> this volume as a candidate</font>

653
00:26:37,010 --> 00:26:41,690
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the UEFI rootkit installation when</font>

654
00:26:40,070 --> 00:26:46,780
the chosen volume will

655
00:26:41,690 --> 00:26:51,880
with<font color="#E5E5E5"> sufficient memory available on it</font>

656
00:26:46,780 --> 00:26:54,770
and then for<font color="#E5E5E5"> NTFS</font><font color="#CCCCCC"> Dexy NTFS XE is the</font>

657
00:26:51,880 --> 00:26:57,230
<font color="#E5E5E5">American Megatron incorporated ntfs</font>

658
00:26:54,770 --> 00:26:58,760
driver<font color="#E5E5E5"> and if it finds it</font><font color="#CCCCCC"> it will just</font>

659
00:26:57,230 --> 00:27:00,680
<font color="#CCCCCC">remove it and</font><font color="#E5E5E5"> we'll see a little bit</font>

660
00:26:58,760 --> 00:27:03,680
<font color="#CCCCCC">more in detail why it does so</font><font color="#E5E5E5"> later on</font>

661
00:27:00,680 --> 00:27:06,110
<font color="#CCCCCC">in this talk</font><font color="#E5E5E5"> and it also looked for SMI</font>

662
00:27:03,680 --> 00:27:08,200
<font color="#E5E5E5">flash it keeps some metadata about it</font>

663
00:27:06,110 --> 00:27:10,669
but doesn't<font color="#E5E5E5"> use it anywhere in the code</font>

664
00:27:08,200 --> 00:27:13,100
<font color="#E5E5E5">interestingly SMI flash is a non</font>

665
00:27:10,670 --> 00:27:14,360
vulnerable<font color="#CCCCCC"> actually driver</font><font color="#E5E5E5"> so what we</font>

666
00:27:13,100 --> 00:27:15,560
believe is that<font color="#E5E5E5"> setting that separator</font>

667
00:27:14,360 --> 00:27:17,270
might have been fiddling with some kind

668
00:27:15,560 --> 00:27:20,260
of exploit for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> vulnerable Dexy</font>

669
00:27:17,270 --> 00:27:24,530
driver<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to be able to bypass</font>

670
00:27:20,260 --> 00:27:26,540
it's like<font color="#CCCCCC"> right protection -</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> - the</font>

671
00:27:24,530 --> 00:27:28,010
<font color="#CCCCCC">bias</font><font color="#E5E5E5"> region</font><font color="#CCCCCC"> of the spi flash memory</font>

672
00:27:26,540 --> 00:27:33,070
<font color="#CCCCCC">we'll see we see that a</font><font color="#E5E5E5"> little bit more</font>

673
00:27:28,010 --> 00:27:35,000
<font color="#E5E5E5">in details later on this talk - okay</font><font color="#CCCCCC"> so</font>

674
00:27:33,070 --> 00:27:38,600
the next<font color="#E5E5E5"> thing it will do is</font><font color="#CCCCCC"> that it</font>

675
00:27:35,000 --> 00:27:40,400
will add the rootkit to<font color="#CCCCCC"> the to the EFI</font>

676
00:27:38,600 --> 00:27:41,959
firmware<font color="#E5E5E5"> and the first thing it will do</font>

677
00:27:40,400 --> 00:27:44,270
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that it</font><font color="#E5E5E5"> will create a firm of a</font>

678
00:27:41,960 --> 00:27:47,420
system file header which<font color="#CCCCCC"> is of type EFI</font>

679
00:27:44,270 --> 00:27:49,580
at<font color="#CCCCCC"> a fast file header</font><font color="#E5E5E5"> then it will</font>

680
00:27:47,420 --> 00:27:51,860
happen the rootkit file which is a

681
00:27:49,580 --> 00:27:54,560
compressed section and this section<font color="#CCCCCC"> will</font>

682
00:27:51,860 --> 00:27:56,540
<font color="#CCCCCC">contains two - section one of these</font>

683
00:27:54,560 --> 00:27:58,550
section is the UEFI executable so the

684
00:27:56,540 --> 00:27:59,899
rootkit itself<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> other section is</font>

685
00:27:58,550 --> 00:28:02,570
the user<font color="#E5E5E5"> interface</font>

686
00:27:59,900 --> 00:28:05,660
sections<font color="#CCCCCC"> giving a name for this</font><font color="#E5E5E5"> rootkit</font>

687
00:28:02,570 --> 00:28:09,260
so the root is called<font color="#CCCCCC"> sec dixie</font><font color="#E5E5E5"> and then</font>

688
00:28:05,660 --> 00:28:11,330
it will write this blob of data at the

689
00:28:09,260 --> 00:28:13,730
end of<font color="#E5E5E5"> either the deck</font><font color="#CCCCCC"> see drivers</font>

690
00:28:11,330 --> 00:28:18,710
<font color="#E5E5E5">volume or</font><font color="#CCCCCC"> the DEXA core volume</font><font color="#E5E5E5"> depending</font>

691
00:28:13,730 --> 00:28:21,980
on where there's enough space<font color="#E5E5E5"> okay so</font>

692
00:28:18,710 --> 00:28:24,860
now that the UEFI firmware contains<font color="#E5E5E5"> the</font>

693
00:28:21,980 --> 00:28:27,100
new if I would<font color="#CCCCCC"> get the next step is to</font>

694
00:28:24,860 --> 00:28:29,929
<font color="#E5E5E5">write</font><font color="#CCCCCC"> it back to the</font><font color="#E5E5E5"> SPI flash memory</font>

695
00:28:27,100 --> 00:28:31,730
once<font color="#E5E5E5"> again</font><font color="#CCCCCC"> before we dig into the</font>

696
00:28:29,930 --> 00:28:33,500
subject and<font color="#E5E5E5"> what the tool exactly does</font>

697
00:28:31,730 --> 00:28:35,630
exactly<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just want to introduce a few</font>

698
00:28:33,500 --> 00:28:38,180
things here<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about bias</font>

699
00:28:35,630 --> 00:28:41,510
<font color="#E5E5E5">right protection mechanisms so the</font>

700
00:28:38,180 --> 00:28:43,490
platform<font color="#CCCCCC"> read here the chipset exposes</font>

701
00:28:41,510 --> 00:28:44,750
<font color="#CCCCCC">write</font><font color="#E5E5E5"> protection mechanisms and these</font>

702
00:28:43,490 --> 00:28:47,450
<font color="#CCCCCC">mechanisms need</font><font color="#E5E5E5"> to be properly</font>

703
00:28:44,750 --> 00:28:49,370
configured by different work today<font color="#E5E5E5"> will</font>

704
00:28:47,450 --> 00:28:50,750
only cover relevant protections to<font color="#CCCCCC"> our</font>

705
00:28:49,370 --> 00:28:52,729
research for instance<font color="#CCCCCC"> we won't talk</font>

706
00:28:50,750 --> 00:28:55,040
<font color="#E5E5E5">about protected range registers which is</font>

707
00:28:52,730 --> 00:28:55,610
mechanism to protect<font color="#E5E5E5"> some specific</font><font color="#CCCCCC"> areas</font>

708
00:28:55,040 --> 00:28:57,500
and<font color="#CCCCCC"> the</font>

709
00:28:55,610 --> 00:28:59,689
has<font color="#E5E5E5"> PA flash memory just because the</font>

710
00:28:57,500 --> 00:29:02,980
tool<font color="#E5E5E5"> doesn't check for for these</font>

711
00:28:59,690 --> 00:29:06,070
settings<font color="#CCCCCC"> the mechanism</font><font color="#E5E5E5"> we'll talk about</font>

712
00:29:02,980 --> 00:29:10,730
today are exposed via the bias control

713
00:29:06,070 --> 00:29:13,610
register so if you want<font color="#E5E5E5"> to write to the</font>

714
00:29:10,730 --> 00:29:16,340
<font color="#CCCCCC">SPI flash memory you need to set the</font>

715
00:29:13,610 --> 00:29:19,040
bias<font color="#CCCCCC"> right</font><font color="#E5E5E5"> enable field</font><font color="#CCCCCC"> MD bias control</font>

716
00:29:16,340 --> 00:29:20,570
<font color="#E5E5E5">register to</font><font color="#CCCCCC"> 1 and when</font><font color="#E5E5E5"> it is set to 1</font>

717
00:29:19,040 --> 00:29:22,879
then you're<font color="#CCCCCC"> able to write to the bias</font>

718
00:29:20,570 --> 00:29:24,439
region<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> SPI flash memory of course</font>

719
00:29:22,880 --> 00:29:27,410
you don't<font color="#E5E5E5"> want any kernel driver to be</font>

720
00:29:24,440 --> 00:29:29,240
able<font color="#CCCCCC"> to corrupt the content of the SK</font>

721
00:29:27,410 --> 00:29:31,669
flash memory<font color="#E5E5E5"> so</font><font color="#CCCCCC"> Intel come up with a</font>

722
00:29:29,240 --> 00:29:33,410
<font color="#CCCCCC">protection mechanism so there's another</font>

723
00:29:31,669 --> 00:29:36,679
field<font color="#CCCCCC"> Envy bias control</font><font color="#E5E5E5"> register called</font>

724
00:29:33,410 --> 00:29:39,080
bias lock enable so when it is<font color="#E5E5E5"> activated</font>

725
00:29:36,679 --> 00:29:45,230
<font color="#E5E5E5">what it does is that</font><font color="#CCCCCC"> it will lock the</font>

726
00:29:39,080 --> 00:29:47,240
bias<font color="#E5E5E5"> right enable field</font><font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> 0 and here</font>

727
00:29:45,230 --> 00:29:49,730
<font color="#E5E5E5">what we what we see is</font><font color="#CCCCCC"> that this field</font>

728
00:29:47,240 --> 00:29:52,760
is<font color="#E5E5E5"> readable</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> right lock once and</font>

729
00:29:49,730 --> 00:29:54,799
right luck once means that once the

730
00:29:52,760 --> 00:29:56,840
firmware set this bit to<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> no</font>

731
00:29:54,799 --> 00:30:02,600
<font color="#CCCCCC">other way to</font><font color="#E5E5E5"> set anything back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 0 then</font>

732
00:29:56,840 --> 00:30:04,220
performing a full platform reason but

733
00:30:02,600 --> 00:30:06,530
there's a problem here<font color="#E5E5E5"> the</font>

734
00:30:04,220 --> 00:30:09,440
<font color="#E5E5E5">implementation of bias lock enable is</font>

735
00:30:06,530 --> 00:30:12,320
actually vulnerable<font color="#CCCCCC"> so how it works is</font>

736
00:30:09,440 --> 00:30:14,540
that when you if bias luck enabled isn't

737
00:30:12,320 --> 00:30:17,120
if by bias<font color="#E5E5E5"> lock enable is set to 1 and</font>

738
00:30:14,540 --> 00:30:20,899
<font color="#CCCCCC">then you</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> rate to the</font><font color="#E5E5E5"> bias right</font>

739
00:30:17,120 --> 00:30:22,189
enable field<font color="#CCCCCC"> you set</font><font color="#E5E5E5"> it to 1</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> value</font>

740
00:30:20,900 --> 00:30:24,140
in the bias control<font color="#E5E5E5"> register will</font>

741
00:30:22,190 --> 00:30:28,309
actually change for a small<font color="#CCCCCC"> amount of</font>

742
00:30:24,140 --> 00:30:31,280
time<font color="#E5E5E5"> and then a an SMI will be triggered</font>

743
00:30:28,309 --> 00:30:33,918
<font color="#CCCCCC">by the</font><font color="#E5E5E5"> platform and the SMI handler will</font>

744
00:30:31,280 --> 00:30:36,260
set bias write enable<font color="#E5E5E5"> to 0 and let's</font>

745
00:30:33,919 --> 00:30:39,380
note here<font color="#CCCCCC"> that the firmware needs to</font>

746
00:30:36,260 --> 00:30:44,540
implement<font color="#E5E5E5"> this specific SMI handler for</font>

747
00:30:39,380 --> 00:30:46,309
<font color="#E5E5E5">this mechanism to be useful but that's</font>

748
00:30:44,540 --> 00:30:48,409
not the<font color="#CCCCCC"> biggest problem here maybe</font>

749
00:30:46,309 --> 00:30:50,720
you've guessed it but what happens<font color="#CCCCCC"> if</font><font color="#E5E5E5"> we</font>

750
00:30:48,410 --> 00:30:53,960
write to the<font color="#CCCCCC"> SPI flash</font><font color="#E5E5E5"> memory before the</font>

751
00:30:50,720 --> 00:30:56,540
SMI handler sets<font color="#CCCCCC"> bias write enable</font><font color="#E5E5E5"> to 0</font>

752
00:30:53,960 --> 00:30:58,309
so there's a race conditional<font color="#CCCCCC"> moaner</font>

753
00:30:56,540 --> 00:31:01,820
ability here there's a paper about<font color="#E5E5E5"> it</font>

754
00:30:58,309 --> 00:31:03,020
<font color="#E5E5E5">and it's called a speed racer so hard</font>

755
00:31:01,820 --> 00:31:04,399
<font color="#CCCCCC">words if you</font><font color="#E5E5E5"> want to exploit this</font>

756
00:31:03,020 --> 00:31:06,260
vulnerability what you need to do is

757
00:31:04,400 --> 00:31:08,660
that<font color="#E5E5E5"> you need to start a</font><font color="#CCCCCC"> thread that</font>

758
00:31:06,260 --> 00:31:09,440
will continuously set by us<font color="#CCCCCC"> right enable</font>

759
00:31:08,660 --> 00:31:11,149
<font color="#CCCCCC">two one</font>

760
00:31:09,440 --> 00:31:14,090
while<font color="#E5E5E5"> another threat is trying to write</font>

761
00:31:11,149 --> 00:31:15,799
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> SPI flash memory and according to</font>

762
00:31:14,090 --> 00:31:18,399
<font color="#E5E5E5">the speed racer's paper</font>

763
00:31:15,799 --> 00:31:20,570
it works on multi-core<font color="#E5E5E5"> processors and</font>

764
00:31:18,399 --> 00:31:24,529
single core processors with

765
00:31:20,570 --> 00:31:28,580
<font color="#CCCCCC">hyper-threading enable so Intel came up</font>

766
00:31:24,529 --> 00:31:31,730
with a patch for this for this for<font color="#E5E5E5"> this</font>

767
00:31:28,580 --> 00:31:33,710
issue and<font color="#CCCCCC"> was introduced in the platform</font>

768
00:31:31,730 --> 00:31:37,190
controller hub<font color="#E5E5E5"> families of Intel chipset</font>

769
00:31:33,710 --> 00:31:39,080
around 2008<font color="#E5E5E5"> so what did is that</font><font color="#CCCCCC"> they</font>

770
00:31:37,190 --> 00:31:41,600
added<font color="#CCCCCC"> a field engi bias control register</font>

771
00:31:39,080 --> 00:31:43,730
so this field<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> SMM bias right</font>

772
00:31:41,600 --> 00:31:45,769
<font color="#E5E5E5">protect</font><font color="#CCCCCC"> disable</font><font color="#E5E5E5"> so it's a bit misleading</font>

773
00:31:43,730 --> 00:31:47,360
<font color="#E5E5E5">because of the disabled you can just get</font>

774
00:31:45,769 --> 00:31:52,250
<font color="#CCCCCC">rid</font><font color="#E5E5E5"> of the disabled and then that's what</font>

775
00:31:47,360 --> 00:31:53,990
<font color="#E5E5E5">it does</font><font color="#CCCCCC"> some how it works is that if it</font>

776
00:31:52,250 --> 00:31:56,919
<font color="#E5E5E5">is enabled</font><font color="#CCCCCC"> there will be no way to write</font>

777
00:31:53,990 --> 00:31:59,840
to the<font color="#E5E5E5"> bias region of the</font><font color="#CCCCCC"> SPI flash</font>

778
00:31:56,919 --> 00:32:03,159
<font color="#E5E5E5">unless all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the cores are running in</font>

779
00:31:59,840 --> 00:32:04,279
system management mode and once again<font color="#CCCCCC"> oh</font>

780
00:32:03,159 --> 00:32:06,590
sorry

781
00:32:04,279 --> 00:32:09,200
once again the firmware must set this

782
00:32:06,590 --> 00:32:11,720
bit to<font color="#CCCCCC"> 1 in order</font><font color="#E5E5E5"> for this mechanism to</font>

783
00:32:09,200 --> 00:32:13,690
be activated<font color="#CCCCCC"> so now that we've</font><font color="#E5E5E5"> seen all</font>

784
00:32:11,720 --> 00:32:16,399
this let's go<font color="#CCCCCC"> back to re</font><font color="#E5E5E5"> writer binary</font>

785
00:32:13,690 --> 00:32:19,490
so of course if I<font color="#CCCCCC"> introduce</font><font color="#E5E5E5"> all of</font><font color="#CCCCCC"> these</font>

786
00:32:16,399 --> 00:32:21,649
<font color="#CCCCCC">mechanism it mean that re write or</font>

787
00:32:19,490 --> 00:32:23,360
binary checks for them so it will check

788
00:32:21,649 --> 00:32:26,120
if<font color="#E5E5E5"> the platform is properly configured</font>

789
00:32:23,360 --> 00:32:30,229
<font color="#E5E5E5">and it also implements the exploit for</font>

790
00:32:26,120 --> 00:32:32,870
the race condition so here's the writing

791
00:32:30,230 --> 00:32:35,480
<font color="#E5E5E5">writing process</font><font color="#CCCCCC"> decision tree so the</font>

792
00:32:32,870 --> 00:32:38,149
first thing that it<font color="#E5E5E5"> will look for is is</font>

793
00:32:35,480 --> 00:32:39,740
bias<font color="#CCCCCC"> write enable I set and if it is</font>

794
00:32:38,149 --> 00:32:41,899
there's<font color="#CCCCCC"> nothing that will stop it from</font>

795
00:32:39,740 --> 00:32:43,730
writing<font color="#CCCCCC"> to the SPI flash memory or at</font>

796
00:32:41,899 --> 00:32:45,229
<font color="#E5E5E5">least to the biased region of</font><font color="#CCCCCC"> DSP</font><font color="#E5E5E5"> the</font>

797
00:32:43,730 --> 00:32:49,220
SPI flash memory<font color="#CCCCCC"> switch</font><font color="#E5E5E5"> will write the</font>

798
00:32:45,230 --> 00:32:52,580
UEFI image if it is not<font color="#E5E5E5"> set it will</font>

799
00:32:49,220 --> 00:32:54,470
check<font color="#CCCCCC"> oh is bias lock enable set and if</font>

800
00:32:52,580 --> 00:32:56,689
it is<font color="#E5E5E5"> not well it will just flip the</font>

801
00:32:54,470 --> 00:33:00,769
bias<font color="#CCCCCC"> write enable</font><font color="#E5E5E5"> bit to</font><font color="#CCCCCC"> one and then it</font>

802
00:32:56,690 --> 00:33:03,080
will write the UEFI image but if it is

803
00:33:00,769 --> 00:33:06,620
not if<font color="#E5E5E5"> it is set then it will check is</font>

804
00:33:03,080 --> 00:33:10,100
SMS<font color="#CCCCCC"> BA SMM bias</font><font color="#E5E5E5"> write protection enabled</font>

805
00:33:06,620 --> 00:33:12,439
<font color="#E5E5E5">and if it is not well it will go to</font><font color="#CCCCCC"> Ray</font>

806
00:33:10,100 --> 00:33:15,439
<font color="#CCCCCC">so it will exploit the erase condition</font>

807
00:33:12,440 --> 00:33:17,869
<font color="#E5E5E5">but if it is activated then it will just</font>

808
00:33:15,440 --> 00:33:20,230
fail<font color="#E5E5E5"> so we spoke about as my flash and</font>

809
00:33:17,869 --> 00:33:22,970
the vulnerable<font color="#CCCCCC"> Lexi driver</font><font color="#E5E5E5"> a bit earlier</font>

810
00:33:20,230 --> 00:33:24,289
<font color="#CCCCCC">and what we believe</font><font color="#E5E5E5"> is that the</font>

811
00:33:22,970 --> 00:33:27,590
check for it because maybe<font color="#E5E5E5"> in another</font>

812
00:33:24,289 --> 00:33:29,990
<font color="#CCCCCC">version they are</font><font color="#E5E5E5"> trying to exploit this</font>

813
00:33:27,590 --> 00:33:31,760
vulnerability<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able to write to</font><font color="#E5E5E5"> the</font>

814
00:33:29,990 --> 00:33:36,530
<font color="#E5E5E5">SPI flash memory even if all of</font><font color="#CCCCCC"> these</font>

815
00:33:31,760 --> 00:33:39,379
<font color="#CCCCCC">mechanisms are properly configured</font><font color="#E5E5E5"> so as</font>

816
00:33:36,530 --> 00:33:42,770
you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> from this from this decision</font>

817
00:33:39,380 --> 00:33:46,850
<font color="#E5E5E5">tree the tool will only work if</font><font color="#CCCCCC"> the</font>

818
00:33:42,770 --> 00:33:48,080
platform<font color="#CCCCCC"> is misconfigured so if the</font>

819
00:33:46,850 --> 00:33:50,629
<font color="#E5E5E5">firmware vendors would have done their</font>

820
00:33:48,080 --> 00:33:52,760
job correctly<font color="#CCCCCC"> the tool would</font><font color="#E5E5E5"> have fail</font>

821
00:33:50,630 --> 00:33:54,490
at writing<font color="#E5E5E5"> the to the</font><font color="#CCCCCC"> SPI flash</font><font color="#E5E5E5"> memory</font>

822
00:33:52,760 --> 00:33:57,080
<font color="#E5E5E5">and who it would have required way more</font>

823
00:33:54,490 --> 00:33:59,690
<font color="#E5E5E5">resources from the attackers to be able</font>

824
00:33:57,080 --> 00:34:02,240
<font color="#CCCCCC">to write to the SPI flash memory</font><font color="#E5E5E5"> so this</font>

825
00:33:59,690 --> 00:34:04,039
is kind of a great example<font color="#E5E5E5"> of how</font>

826
00:34:02,240 --> 00:34:06,020
important for more security<font color="#CCCCCC"> is and how</font>

827
00:34:04,039 --> 00:34:10,340
for more<font color="#E5E5E5"> vendors could have say today</font>

828
00:34:06,020 --> 00:34:12,770
<font color="#E5E5E5">but didn't in this case</font><font color="#CCCCCC"> okay so now</font>

829
00:34:10,340 --> 00:34:14,210
<font color="#E5E5E5">let's look at how what are what is the</font>

830
00:34:12,770 --> 00:34:15,500
<font color="#E5E5E5">sequence of operation that you need to</font>

831
00:34:14,210 --> 00:34:17,540
do if you want to<font color="#E5E5E5"> write to the SPI flash</font>

832
00:34:15,500 --> 00:34:19,940
memory once again it's kind of<font color="#E5E5E5"> standard</font>

833
00:34:17,540 --> 00:34:22,270
way<font color="#CCCCCC"> of</font><font color="#E5E5E5"> doing this</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> believe it's the</font>

834
00:34:19,940 --> 00:34:25,520
only<font color="#CCCCCC"> way</font><font color="#E5E5E5"> of doing this at least</font><font color="#CCCCCC"> on the</font>

835
00:34:22,270 --> 00:34:27,409
Intel platforms so the first thing you

836
00:34:25,520 --> 00:34:29,060
<font color="#E5E5E5">need to find is has me as a giant</font>

837
00:34:27,409 --> 00:34:30,980
<font color="#E5E5E5">mentioned the hardware sequencing flash</font>

838
00:34:29,060 --> 00:34:33,290
control register and this register<font color="#CCCCCC"> is</font>

839
00:34:30,980 --> 00:34:36,918
memory map in the root complex<font color="#E5E5E5"> register</font>

840
00:34:33,290 --> 00:34:38,270
block so the first thing that<font color="#CCCCCC"> you need</font>

841
00:34:36,918 --> 00:34:40,429
<font color="#E5E5E5">to do you need to write</font><font color="#CCCCCC"> the number</font><font color="#E5E5E5"> of</font>

842
00:34:38,270 --> 00:34:42,560
bytes<font color="#CCCCCC"> that you want to write to the</font><font color="#E5E5E5"> SPI</font>

843
00:34:40,429 --> 00:34:44,540
flash memory in the flash data byte

844
00:34:42,560 --> 00:34:47,659
count field<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Hardware sequencing</font>

845
00:34:44,540 --> 00:34:49,489
flash control then the next<font color="#E5E5E5"> thing that</font>

846
00:34:47,659 --> 00:34:52,190
you need<font color="#CCCCCC"> to do is you need to set the</font>

847
00:34:49,489 --> 00:34:54,500
flash cycle<font color="#E5E5E5"> to 1-0 binary meaning that</font>

848
00:34:52,190 --> 00:34:58,550
the kind<font color="#E5E5E5"> of cycle you want to you want</font>

849
00:34:54,500 --> 00:35:01,550
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do is a write cycle then you need to</font>

850
00:34:58,550 --> 00:35:03,920
write to<font color="#E5E5E5"> the flash address where you</font>

851
00:35:01,550 --> 00:35:06,349
<font color="#E5E5E5">want to write in the</font><font color="#CCCCCC"> spi</font><font color="#E5E5E5"> flash memory</font>

852
00:35:03,920 --> 00:35:09,980
<font color="#E5E5E5">and you just put the data you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

853
00:35:06,349 --> 00:35:11,750
write in the flash data registers and

854
00:35:09,980 --> 00:35:13,970
then<font color="#E5E5E5"> you need to tell to the SPI flash</font>

855
00:35:11,750 --> 00:35:15,589
controller that<font color="#E5E5E5"> you want to start the</font>

856
00:35:13,970 --> 00:35:18,529
<font color="#CCCCCC">cycle that</font><font color="#E5E5E5"> you just configured so you do</font>

857
00:35:15,589 --> 00:35:22,430
that<font color="#E5E5E5"> by setting the flash cycle go field</font>

858
00:35:18,530 --> 00:35:24,619
<font color="#CCCCCC">2 to 1</font><font color="#E5E5E5"> and then the SPI flash controller</font>

859
00:35:22,430 --> 00:35:27,680
will set one<font color="#E5E5E5"> field in the</font><font color="#CCCCCC"> Hardware</font>

860
00:35:24,619 --> 00:35:31,040
sequencing flash status<font color="#E5E5E5"> to 1 in this</font>

861
00:35:27,680 --> 00:35:33,129
field is<font color="#CCCCCC"> SPI cycle in progress</font><font color="#E5E5E5"> meaning</font>

862
00:35:31,040 --> 00:35:36,829
<font color="#CCCCCC">that the cycle is ongoing of course and</font>

863
00:35:33,130 --> 00:35:40,190
once once it is completed it

864
00:35:36,829 --> 00:35:42,559
set it back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> and it means yeah it</font>

865
00:35:40,190 --> 00:35:44,119
has<font color="#CCCCCC"> completely so then if you want to</font>

866
00:35:42,559 --> 00:35:46,519
write all the data that that<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font>

867
00:35:44,119 --> 00:35:47,509
write<font color="#E5E5E5"> you just loop from</font><font color="#CCCCCC"> step 3</font><font color="#E5E5E5"> to step</font>

868
00:35:46,519 --> 00:35:52,910
<font color="#E5E5E5">6</font>

869
00:35:47,509 --> 00:35:54,619
until<font color="#E5E5E5"> until you're done so let's take a</font>

870
00:35:52,910 --> 00:35:58,459
minute<font color="#CCCCCC"> and stake take a step back here</font>

871
00:35:54,619 --> 00:36:02,049
so what we're looking<font color="#CCCCCC"> at is a tool that</font>

872
00:35:58,459 --> 00:36:04,249
<font color="#E5E5E5">is able</font><font color="#CCCCCC"> to install you if I root kit</font><font color="#E5E5E5"> and</font>

873
00:36:02,049 --> 00:36:08,680
<font color="#E5E5E5">and write it back to the SPI flash</font>

874
00:36:04,249 --> 00:36:11,058
memory<font color="#CCCCCC"> remotely by software means and</font>

875
00:36:08,680 --> 00:36:13,910
<font color="#E5E5E5">like post exploitation</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that's</font>

876
00:36:11,059 --> 00:36:18,400
kind<font color="#E5E5E5"> of very convenient what we knew</font>

877
00:36:13,910 --> 00:36:22,549
<font color="#CCCCCC">about before</font><font color="#E5E5E5"> was the hacking</font><font color="#CCCCCC"> teams UEFI</font>

878
00:36:18,400 --> 00:36:25,309
rootkit and it<font color="#E5E5E5"> needed physical access</font><font color="#CCCCCC"> to</font>

879
00:36:22,549 --> 00:36:28,400
be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> deploy it on a victim's</font>

880
00:36:25,309 --> 00:36:32,119
machine so that's really more convenient

881
00:36:28,400 --> 00:36:34,099
as I mentioned so yeah and let's just

882
00:36:32,119 --> 00:36:36,079
mention here<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there there are no</font>

883
00:36:34,099 --> 00:36:39,709
proof of hacking teams rootkit being

884
00:36:36,079 --> 00:36:41,690
used in an actual<font color="#CCCCCC"> cyberattack it has</font>

885
00:36:39,709 --> 00:36:43,969
never been<font color="#E5E5E5"> found on a victim's machine</font>

886
00:36:41,690 --> 00:36:45,979
we only have the source code<font color="#CCCCCC"> and income</font>

887
00:36:43,969 --> 00:36:48,920
file<font color="#CCCCCC"> firmware in some email exchange but</font>

888
00:36:45,979 --> 00:36:52,459
we've never found it really deployed on

889
00:36:48,920 --> 00:36:54,920
a<font color="#E5E5E5"> machine so what we did there is</font><font color="#CCCCCC"> that</font>

890
00:36:52,459 --> 00:36:57,259
we extracted the<font color="#E5E5E5"> UEFI rootkit from the</font>

891
00:36:54,920 --> 00:37:01,640
tool and then we looked at ESET UEFI

892
00:36:57,259 --> 00:37:03,769
scanner telemetry<font color="#E5E5E5"> and turns out we found</font>

893
00:37:01,640 --> 00:37:05,930
the rootkit<font color="#E5E5E5"> in the SPI flash memory of a</font>

894
00:37:03,769 --> 00:37:07,939
system<font color="#E5E5E5"> I'm making it the first publicly</font>

895
00:37:05,930 --> 00:37:11,209
known you if I<font color="#E5E5E5"> would get used in</font><font color="#CCCCCC"> a</font>

896
00:37:07,940 --> 00:37:12,709
cyberattack<font color="#E5E5E5"> so if we go back</font><font color="#CCCCCC"> to this</font>

897
00:37:11,209 --> 00:37:15,319
statement that<font color="#CCCCCC"> there's I</font><font color="#E5E5E5"> am showed</font>

898
00:37:12,709 --> 00:37:17,479
earlier<font color="#E5E5E5"> and the presentation that we</font>

899
00:37:15,319 --> 00:37:21,319
<font color="#CCCCCC">have yet to observe real</font><font color="#E5E5E5"> world</font><font color="#CCCCCC"> a ufi</font>

900
00:37:17,479 --> 00:37:24,618
malware<font color="#E5E5E5"> well it turns out</font><font color="#CCCCCC"> that now it's</font>

901
00:37:21,319 --> 00:37:27,109
<font color="#CCCCCC">Jack ok so let's go back</font><font color="#E5E5E5"> to the</font>

902
00:37:24,619 --> 00:37:29,239
technical<font color="#CCCCCC"> part of</font><font color="#E5E5E5"> this presentation and</font>

903
00:37:27,109 --> 00:37:34,160
explain how<font color="#E5E5E5"> there's the UEFI</font><font color="#CCCCCC"> we'll get</font>

904
00:37:29,239 --> 00:37:37,400
work so the efi rootkit is a<font color="#E5E5E5"> Dexy driver</font>

905
00:37:34,160 --> 00:37:42,348
that<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> sexy as we as I mentioned</font>

906
00:37:37,400 --> 00:37:43,849
earlier and it<font color="#E5E5E5"> is loaded by the taxi</font>

907
00:37:42,349 --> 00:37:48,349
dispatcher<font color="#E5E5E5"> every time that the system</font>

908
00:37:43,849 --> 00:37:49,849
will will boot it is<font color="#E5E5E5"> unsigned so secure</font>

909
00:37:48,349 --> 00:37:50,360
boot would catch it<font color="#CCCCCC"> be given that</font><font color="#E5E5E5"> it</font>

910
00:37:49,849 --> 00:37:53,690
were<font color="#E5E5E5"> that</font>

911
00:37:50,360 --> 00:37:55,280
is<font color="#E5E5E5"> properly implemented</font><font color="#CCCCCC"> and if you don't</font>

912
00:37:53,690 --> 00:37:56,510
know about secure boots a mechanism that

913
00:37:55,280 --> 00:37:59,590
<font color="#E5E5E5">will ensure that everything that is</font>

914
00:37:56,510 --> 00:38:02,540
<font color="#E5E5E5">loaded by a firmware is properly signed</font>

915
00:37:59,590 --> 00:38:06,500
and I just put the file<font color="#E5E5E5"> with there just</font>

916
00:38:02,540 --> 00:38:09,529
for future reference<font color="#E5E5E5"> so here we have the</font>

917
00:38:06,500 --> 00:38:11,630
you if I would<font color="#CCCCCC"> get workflow</font><font color="#E5E5E5"> so eight EFI</font>

918
00:38:09,530 --> 00:38:14,450
firmware<font color="#E5E5E5"> when it boots will go through</font>

919
00:38:11,630 --> 00:38:16,520
multiple multiple phases the first phase

920
00:38:14,450 --> 00:38:18,160
<font color="#CCCCCC">is this the</font><font color="#E5E5E5"> security phase where which</font>

921
00:38:16,520 --> 00:38:20,780
<font color="#E5E5E5">is basically the</font><font color="#CCCCCC"> route of</font><font color="#E5E5E5"> trust of</font><font color="#CCCCCC"> your</font>

922
00:38:18,160 --> 00:38:25,190
system<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> it can check that</font>

923
00:38:20,780 --> 00:38:29,780
everything is properly<font color="#E5E5E5"> signed and then</font>

924
00:38:25,190 --> 00:38:31,940
on the next<font color="#E5E5E5"> phase the the pre</font><font color="#CCCCCC"> fi all</font>

925
00:38:29,780 --> 00:38:34,370
<font color="#CCCCCC">right well the next phase the processor</font>

926
00:38:31,940 --> 00:38:36,170
is initialized<font color="#E5E5E5"> the chips is initializing</font>

927
00:38:34,370 --> 00:38:39,560
and so on and then we<font color="#E5E5E5"> go to the part</font>

928
00:38:36,170 --> 00:38:41,710
that that<font color="#E5E5E5"> is interesting for us the exe</font>

929
00:38:39,560 --> 00:38:44,270
dispatcher<font color="#E5E5E5"> so that's that's where the</font>

930
00:38:41,710 --> 00:38:46,640
dispatcher<font color="#E5E5E5"> is run that if dispatcher</font>

931
00:38:44,270 --> 00:38:48,620
will run all of these<font color="#E5E5E5"> XE drivers it can</font>

932
00:38:46,640 --> 00:38:52,580
find and one of these driver will<font color="#E5E5E5"> be the</font>

933
00:38:48,620 --> 00:38:54,529
UEFI rootkit one is<font color="#E5E5E5"> loaded the if I work</font>

934
00:38:52,580 --> 00:38:56,900
it will<font color="#E5E5E5"> create an event this</font><font color="#CCCCCC"> event will</font>

935
00:38:54,530 --> 00:39:01,070
be attached<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> EFI Evan group ready</font>

936
00:38:56,900 --> 00:39:03,380
to boot<font color="#E5E5E5"> this event group is signaled by</font>

937
00:39:01,070 --> 00:39:07,060
the boot<font color="#CCCCCC"> manager</font><font color="#E5E5E5"> which runs on</font><font color="#CCCCCC"> the next</font>

938
00:39:03,380 --> 00:39:09,350
phase of the<font color="#E5E5E5"> the boot sequence and</font>

939
00:39:07,060 --> 00:39:11,150
there's a<font color="#CCCCCC"> notify function which is</font>

940
00:39:09,350 --> 00:39:13,370
basically a<font color="#CCCCCC"> callback that</font><font color="#E5E5E5"> is attached to</font>

941
00:39:11,150 --> 00:39:17,840
this event and<font color="#E5E5E5"> this callback will</font>

942
00:39:13,370 --> 00:39:19,310
contain the<font color="#E5E5E5"> the actual malicious code so</font>

943
00:39:17,840 --> 00:39:22,130
when the boot manager loads at some

944
00:39:19,310 --> 00:39:25,610
point it will signal<font color="#CCCCCC"> the EFI Evan group</font>

945
00:39:22,130 --> 00:39:28,240
ready to boot<font color="#CCCCCC"> MN group and the notify</font>

946
00:39:25,610 --> 00:39:31,460
function will be called

947
00:39:28,240 --> 00:39:32,899
now the notify function does three

948
00:39:31,460 --> 00:39:36,320
things<font color="#CCCCCC"> the first thing it will do</font><font color="#E5E5E5"> is</font>

949
00:39:32,900 --> 00:39:38,210
that<font color="#CCCCCC"> it will install an NTFS driver</font><font color="#E5E5E5"> then</font>

950
00:39:36,320 --> 00:39:40,880
it will drop<font color="#E5E5E5"> a</font><font color="#CCCCCC"> toe</font><font color="#E5E5E5"> cheer at eggsy and</font>

951
00:39:38,210 --> 00:39:42,650
<font color="#E5E5E5">our pc net</font><font color="#CCCCCC"> peter tech z and finally it</font>

952
00:39:40,880 --> 00:39:47,870
will patch a value in the<font color="#CCCCCC"> Windows</font>

953
00:39:42,650 --> 00:39:50,120
<font color="#CCCCCC">registry so the ntfs driver the ntfs</font>

954
00:39:47,870 --> 00:39:53,900
driver is needed<font color="#E5E5E5"> to get file</font><font color="#CCCCCC"> base access</font>

955
00:39:50,120 --> 00:39:56,210
<font color="#E5E5E5">to Windows partition</font><font color="#CCCCCC"> UEFI firmware don't</font>

956
00:39:53,900 --> 00:39:58,250
really need to have an NTFS<font color="#E5E5E5"> driver since</font>

957
00:39:56,210 --> 00:40:00,020
the only<font color="#CCCCCC"> thing it really needs to</font><font color="#E5E5E5"> be</font>

958
00:39:58,250 --> 00:40:02,570
able<font color="#E5E5E5"> to do is to read</font><font color="#CCCCCC"> the efi</font><font color="#E5E5E5"> system</font>

959
00:40:00,020 --> 00:40:03,450
partition where the operating system

960
00:40:02,570 --> 00:40:07,470
loader

961
00:40:03,450 --> 00:40:09,089
is located so well it's it's common to

962
00:40:07,470 --> 00:40:12,569
<font color="#E5E5E5">have you if I firm word that doesn't</font>

963
00:40:09,090 --> 00:40:14,010
<font color="#CCCCCC">have ntfs driver on</font><font color="#E5E5E5"> it and sometimes</font>

964
00:40:12,570 --> 00:40:18,270
when you<font color="#E5E5E5"> find ntfs driver they don't</font>

965
00:40:14,010 --> 00:40:19,710
implement the whole ntfs driver meaning

966
00:40:18,270 --> 00:40:20,940
that the only<font color="#E5E5E5"> implement subset of the</font>

967
00:40:19,710 --> 00:40:24,180
functionality that<font color="#CCCCCC"> you're expecting from</font>

968
00:40:20,940 --> 00:40:26,670
<font color="#CCCCCC">an NTFS driver</font><font color="#E5E5E5"> and that's why it looks</font>

969
00:40:24,180 --> 00:40:28,980
<font color="#E5E5E5">for the NTFS</font><font color="#CCCCCC"> Dexy that we've seen</font>

970
00:40:26,670 --> 00:40:31,710
<font color="#CCCCCC">earlier that it</font><font color="#E5E5E5"> removes</font><font color="#CCCCCC"> its because this</font>

971
00:40:28,980 --> 00:40:33,600
specific driver<font color="#E5E5E5"> only implement reading</font>

972
00:40:31,710 --> 00:40:35,670
operations to the<font color="#E5E5E5"> NTFS partition which</font>

973
00:40:33,600 --> 00:40:37,830
is not interesting for<font color="#E5E5E5"> the rootkit</font>

974
00:40:35,670 --> 00:40:41,670
because it wants to<font color="#E5E5E5"> drop files to disk</font>

975
00:40:37,830 --> 00:40:44,580
<font color="#E5E5E5">and</font><font color="#CCCCCC"> certain separator did not come with</font>

976
00:40:41,670 --> 00:40:47,340
their<font color="#CCCCCC"> own ntfs driver what they did is</font>

977
00:40:44,580 --> 00:40:49,620
that<font color="#E5E5E5"> they just took the ntfs driver from</font>

978
00:40:47,340 --> 00:40:53,300
hacking teams<font color="#CCCCCC"> leak</font>

979
00:40:49,620 --> 00:40:58,350
so this ntfs driver was part of the

980
00:40:53,300 --> 00:41:01,590
vector<font color="#CCCCCC"> ADK project which leaked from</font>

981
00:40:58,350 --> 00:41:04,830
from which<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> part of the of the</font>

982
00:41:01,590 --> 00:41:06,960
leak and in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> project there was</font>

983
00:41:04,830 --> 00:41:08,870
<font color="#CCCCCC">archaea</font><font color="#E5E5E5"> loader which was the</font><font color="#CCCCCC"> ufi rootkit</font>

984
00:41:06,960 --> 00:41:12,390
and there was an NTFS<font color="#E5E5E5"> a driver because</font>

985
00:41:08,870 --> 00:41:14,520
<font color="#E5E5E5">hacking teams you fi fi rootkit needed</font>

986
00:41:12,390 --> 00:41:15,810
to<font color="#CCCCCC"> drop files right so that's</font><font color="#E5E5E5"> what</font>

987
00:41:14,520 --> 00:41:17,520
that's<font color="#E5E5E5"> what they use they just build</font>

988
00:41:15,810 --> 00:41:20,759
their own<font color="#E5E5E5"> version of it and they</font>

989
00:41:17,520 --> 00:41:24,630
embedded it in the in in<font color="#CCCCCC"> there</font><font color="#E5E5E5"> you if I</font>

990
00:41:20,760 --> 00:41:26,850
would get then<font color="#E5E5E5"> the next step is that it</font>

991
00:41:24,630 --> 00:41:28,500
will drop a<font color="#CCCCCC"> two files so that's the cold</font>

992
00:41:26,850 --> 00:41:31,110
responsible for it<font color="#CCCCCC"> so here you</font><font color="#E5E5E5"> can see</font>

993
00:41:28,500 --> 00:41:35,900
that<font color="#E5E5E5"> it drops our PC net P that</font><font color="#CCCCCC"> X Z and</font>

994
00:41:31,110 --> 00:41:37,950
then it will drop<font color="#E5E5E5"> Auto</font><font color="#CCCCCC"> Chee that exit</font>

995
00:41:35,900 --> 00:41:39,510
and the last thing that we will do is

996
00:41:37,950 --> 00:41:41,819
that<font color="#CCCCCC"> it will patch the Windows registry</font>

997
00:41:39,510 --> 00:41:44,790
<font color="#E5E5E5">so to do that what we</font><font color="#CCCCCC"> will do is that it</font>

998
00:41:41,820 --> 00:41:48,960
<font color="#E5E5E5">will open the the backing file for the</font><font color="#CCCCCC"> H</font>

999
00:41:44,790 --> 00:41:51,750
htlm system hive<font color="#CCCCCC"> and then because it</font>

1000
00:41:48,960 --> 00:41:54,510
doesn't have<font color="#CCCCCC"> the logic to to parse the</font>

1001
00:41:51,750 --> 00:41:56,100
registry key structures<font color="#E5E5E5"> so what it does</font>

1002
00:41:54,510 --> 00:41:58,260
is that it looks<font color="#CCCCCC"> for a specific text</font>

1003
00:41:56,100 --> 00:42:01,950
pattern which is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> to check to check</font>

1004
00:41:58,260 --> 00:42:06,090
star and if it finds it it<font color="#CCCCCC"> changed the</font>

1005
00:42:01,950 --> 00:42:08,040
last<font color="#CCCCCC"> k2e and it happens</font><font color="#E5E5E5"> to be the</font><font color="#CCCCCC"> the</font>

1006
00:42:06,090 --> 00:42:11,490
registry key that<font color="#E5E5E5"> Ryan spoke about</font>

1007
00:42:08,040 --> 00:42:13,440
<font color="#CCCCCC">earlier so</font><font color="#E5E5E5"> boot execute</font><font color="#CCCCCC"> so what will</font>

1008
00:42:11,490 --> 00:42:17,370
happen<font color="#CCCCCC"> is that when the operating system</font>

1009
00:42:13,440 --> 00:42:20,490
will load at some point it will run

1010
00:42:17,370 --> 00:42:23,819
<font color="#CCCCCC">-</font><font color="#E5E5E5"> she</font><font color="#CCCCCC"> diggz e</font><font color="#E5E5E5"> and other she did exhibit</font>

1011
00:42:20,490 --> 00:42:25,229
will do<font color="#E5E5E5"> his nasty things but what's</font>

1012
00:42:23,820 --> 00:42:26,940
interesting here is<font color="#E5E5E5"> that it will revert</font>

1013
00:42:25,230 --> 00:42:30,390
<font color="#CCCCCC">back the modification to the</font><font color="#E5E5E5"> Windows</font>

1014
00:42:26,940 --> 00:42:33,480
registry<font color="#E5E5E5"> so until she will will become</font>

1015
00:42:30,390 --> 00:42:35,460
at otech<font color="#E5E5E5"> again so if I'm a user logged</font>

1016
00:42:33,480 --> 00:42:38,880
in in Windows for instance and I look at

1017
00:42:35,460 --> 00:42:44,340
my at<font color="#CCCCCC"> regulate</font><font color="#E5E5E5"> I won't see that this</font>

1018
00:42:38,880 --> 00:42:47,760
modification<font color="#E5E5E5"> happened and the last thing</font>

1019
00:42:44,340 --> 00:42:49,710
last thing I want to talk about today<font color="#E5E5E5"> is</font>

1020
00:42:47,760 --> 00:42:52,700
how<font color="#CCCCCC"> could such an attack have</font><font color="#E5E5E5"> been</font>

1021
00:42:49,710 --> 00:42:58,770
prevented<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I want to talk about</font>

1022
00:42:52,700 --> 00:43:02,490
<font color="#E5E5E5">remediation</font><font color="#CCCCCC"> - so prevention well the</font>

1023
00:42:58,770 --> 00:43:05,100
kind<font color="#E5E5E5"> of the perfect</font><font color="#CCCCCC"> mechanism to to</font>

1024
00:43:02,490 --> 00:43:07,740
block this<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of attack is</font><font color="#E5E5E5"> a secure</font>

1025
00:43:05,100 --> 00:43:09,210
boot<font color="#E5E5E5"> so it should really be activated on</font>

1026
00:43:07,740 --> 00:43:13,049
<font color="#CCCCCC">your platform</font><font color="#E5E5E5"> and hopefully it is</font>

1027
00:43:09,210 --> 00:43:16,670
properly implemented<font color="#E5E5E5"> then you should</font>

1028
00:43:13,050 --> 00:43:19,110
<font color="#CCCCCC">really keep your EFI firmware</font><font color="#E5E5E5"> up-to-date</font>

1029
00:43:16,670 --> 00:43:22,110
<font color="#CCCCCC">just to make sure</font><font color="#E5E5E5"> that all</font><font color="#CCCCCC"> of the latest</font>

1030
00:43:19,110 --> 00:43:23,430
patches available<font color="#E5E5E5"> are on your and your</font>

1031
00:43:22,110 --> 00:43:27,660
<font color="#E5E5E5">machine so it's really a good idea to</font>

1032
00:43:23,430 --> 00:43:28,500
<font color="#CCCCCC">visit</font><font color="#E5E5E5"> your motherboard website just to</font>

1033
00:43:27,660 --> 00:43:32,520
make<font color="#CCCCCC"> sure that you have the latest</font>

1034
00:43:28,500 --> 00:43:35,670
version<font color="#CCCCCC"> installed also</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> if you</font>

1035
00:43:32,520 --> 00:43:36,840
have modern chipsets so something so if

1036
00:43:35,670 --> 00:43:39,390
you have a<font color="#E5E5E5"> platform controller hub</font>

1037
00:43:36,840 --> 00:43:42,480
family is an<font color="#E5E5E5"> Intel chipset</font><font color="#CCCCCC"> just to make</font>

1038
00:43:39,390 --> 00:43:45,359
<font color="#CCCCCC">sure that the protection against</font><font color="#E5E5E5"> the</font>

1039
00:43:42,480 --> 00:43:48,600
against<font color="#E5E5E5"> speed racer' is available</font>

1040
00:43:45,360 --> 00:43:50,730
otherwise<font color="#E5E5E5"> it's kind of there there's no</font>

1041
00:43:48,600 --> 00:43:53,910
<font color="#E5E5E5">way to protect against this this kind of</font>

1042
00:43:50,730 --> 00:43:57,030
attack<font color="#E5E5E5"> and finally you kind of need</font><font color="#CCCCCC"> to</font>

1043
00:43:53,910 --> 00:43:59,850
hope that your firmware<font color="#CCCCCC"> is configured</font>

1044
00:43:57,030 --> 00:44:02,250
<font color="#E5E5E5">with your firmware configure the</font>

1045
00:43:59,850 --> 00:44:04,860
security<font color="#E5E5E5"> mechanisms properly there's not</font>

1046
00:44:02,250 --> 00:44:08,160
much<font color="#CCCCCC"> you can do</font><font color="#E5E5E5"> but having your platform</font>

1047
00:44:04,860 --> 00:44:10,020
<font color="#E5E5E5">up to the your firmware</font><font color="#CCCCCC"> up to date but</font>

1048
00:44:08,160 --> 00:44:12,120
there's a good<font color="#E5E5E5"> news here is that there's</font>

1049
00:44:10,020 --> 00:44:14,570
an<font color="#E5E5E5"> open-source project</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> chips X</font>

1050
00:44:12,120 --> 00:44:17,609
<font color="#E5E5E5">that allows to perform for more security</font>

1051
00:44:14,570 --> 00:44:20,010
<font color="#E5E5E5">assessments so it will check for all of</font>

1052
00:44:17,610 --> 00:44:22,170
the<font color="#CCCCCC"> biased region</font><font color="#E5E5E5"> protection mechanism</font>

1053
00:44:20,010 --> 00:44:24,780
that we spoke<font color="#E5E5E5"> about today and even more</font>

1054
00:44:22,170 --> 00:44:26,670
stuff so if you want<font color="#E5E5E5"> to know if your</font>

1055
00:44:24,780 --> 00:44:31,050
firmware does the job correctly it's

1056
00:44:26,670 --> 00:44:34,650
really the way to<font color="#E5E5E5"> go</font><font color="#CCCCCC"> and finally</font>

1057
00:44:31,050 --> 00:44:37,710
<font color="#CCCCCC">mediation well if you have a UF I would</font>

1058
00:44:34,650 --> 00:44:41,070
get in your<font color="#CCCCCC"> spi</font><font color="#E5E5E5"> flash memory the only</font>

1059
00:44:37,710 --> 00:44:45,570
way of<font color="#CCCCCC"> getting rid of</font><font color="#E5E5E5"> it is to reflash</font>

1060
00:44:41,070 --> 00:44:48,630
your UEFI firmware<font color="#CCCCCC"> it's possible</font><font color="#E5E5E5"> that if</font>

1061
00:44:45,570 --> 00:44:50,370
<font color="#E5E5E5">you install in a UEFI firmware update if</font>

1062
00:44:48,630 --> 00:44:53,040
it rewrites<font color="#E5E5E5"> the whole</font><font color="#CCCCCC"> bias region</font>

1063
00:44:50,370 --> 00:44:55,890
section<font color="#E5E5E5"> then you'll get rid of this</font>

1064
00:44:53,040 --> 00:44:57,900
<font color="#E5E5E5">specific UEFI rootkit but the UEFI</font><font color="#CCCCCC"> would</font>

1065
00:44:55,890 --> 00:45:00,000
<font color="#E5E5E5">can be in</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> place</font><font color="#CCCCCC"> in the spi</font><font color="#E5E5E5"> flash</font>

1066
00:44:57,900 --> 00:45:01,980
memory so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> found only it rewrites the</font>

1067
00:45:00,000 --> 00:45:05,160
bias region<font color="#E5E5E5"> it's not enough but some</font>

1068
00:45:01,980 --> 00:45:08,040
<font color="#E5E5E5">other updates will rewrite</font><font color="#CCCCCC"> the whole spi</font>

1069
00:45:05,160 --> 00:45:10,230
flash memory content<font color="#E5E5E5"> so yeah it could</font>

1070
00:45:08,040 --> 00:45:16,050
work<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not a perfect</font><font color="#CCCCCC"> way of</font><font color="#E5E5E5"> doing</font>

1071
00:45:10,230 --> 00:45:17,760
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and yeah if</font><font color="#CCCCCC"> reflashing</font><font color="#E5E5E5"> your UEFI</font>

1072
00:45:16,050 --> 00:45:19,650
<font color="#E5E5E5">firmware is not an option</font><font color="#CCCCCC"> for you well</font>

1073
00:45:17,760 --> 00:45:22,520
there's not much<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do you can</font><font color="#CCCCCC"> just</font>

1074
00:45:19,650 --> 00:45:25,200
get<font color="#E5E5E5"> rid</font><font color="#CCCCCC"> of your motherboard</font><font color="#E5E5E5"> or your</font>

1075
00:45:22,520 --> 00:45:27,600
laptop and<font color="#CCCCCC"> just get another one</font><font color="#E5E5E5"> unless</font>

1076
00:45:25,200 --> 00:45:31,200
you don't<font color="#E5E5E5"> really care having</font><font color="#CCCCCC"> a UEFI</font>

1077
00:45:27,600 --> 00:45:31,830
<font color="#E5E5E5">rootkit in your system</font><font color="#CCCCCC"> ok now a quick</font>

1078
00:45:31,200 --> 00:45:34,859
conclusion

1079
00:45:31,830 --> 00:45:37,110
<font color="#E5E5E5">so our research proves that efi rootkit</font>

1080
00:45:34,860 --> 00:45:40,050
are not only toys for researchers<font color="#CCCCCC"> to</font>

1081
00:45:37,110 --> 00:45:43,650
play with but they are<font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> threat</font>

1082
00:45:40,050 --> 00:45:45,690
<font color="#E5E5E5">used using</font><font color="#CCCCCC"> cyberattacks</font><font color="#E5E5E5"> so maybe that's</font>

1083
00:45:43,650 --> 00:45:48,480
<font color="#CCCCCC">something you should</font><font color="#E5E5E5"> keep in</font><font color="#CCCCCC"> mind when</font>

1084
00:45:45,690 --> 00:45:50,610
you're defining your<font color="#CCCCCC"> death model and we</font>

1085
00:45:48,480 --> 00:45:51,900
won't stress this enough<font color="#CCCCCC"> firmware must</font>

1086
00:45:50,610 --> 00:45:55,230
be built with<font color="#CCCCCC"> security in mind</font><font color="#E5E5E5"> from</font>

1087
00:45:51,900 --> 00:45:58,890
bottom up<font color="#E5E5E5"> nowadays there's a lot of</font>

1088
00:45:55,230 --> 00:46:00,810
researchers looking into it<font color="#CCCCCC"> so things</font>

1089
00:45:58,890 --> 00:46:02,420
are<font color="#E5E5E5"> getting better but they're still</font>

1090
00:46:00,810 --> 00:46:06,600
work to do

1091
00:46:02,420 --> 00:46:09,030
so that's pretty<font color="#CCCCCC"> much</font><font color="#E5E5E5"> it for us the the</font>

1092
00:46:06,600 --> 00:46:11,819
white paper for this<font color="#E5E5E5"> research is</font>

1093
00:46:09,030 --> 00:46:13,140
<font color="#CCCCCC">available on at</font><font color="#E5E5E5"> we'll have security</font><font color="#CCCCCC"> comm</font>

1094
00:46:11,820 --> 00:46:14,340
so if you want more detail

1095
00:46:13,140 --> 00:46:17,339
you should just<font color="#E5E5E5"> grab a copy there</font>

1096
00:46:14,340 --> 00:46:20,910
otherwise<font color="#CCCCCC"> thank you for having</font><font color="#E5E5E5"> us and if</font>

1097
00:46:17,340 --> 00:46:23,240
there's<font color="#E5E5E5"> time for questions feel free to</font>

1098
00:46:20,910 --> 00:46:23,240
ask<font color="#E5E5E5"> them</font>

1099
00:46:33,490 --> 00:46:37,848
thanks for presenting<font color="#CCCCCC"> research</font><font color="#E5E5E5"> very</font>

1100
00:46:35,690 --> 00:46:39,619
interesting<font color="#E5E5E5"> the question is if you guys</font>

1101
00:46:37,849 --> 00:46:41,750
<font color="#E5E5E5">never found I mean you were very smart</font>

1102
00:46:39,619 --> 00:46:43,700
<font color="#E5E5E5">and hunting and finding all this tool</font>

1103
00:46:41,750 --> 00:46:46,430
set but<font color="#E5E5E5"> you never found the read write</font>

1104
00:46:43,700 --> 00:46:48,589
read write everything and<font color="#CCCCCC"> XE and all</font>

1105
00:46:46,430 --> 00:46:50,058
<font color="#E5E5E5">this tool set how would we</font><font color="#CCCCCC"> possibly the</font>

1106
00:46:48,589 --> 00:46:51,410
<font color="#E5E5E5">text such you a fighting when they're</font>

1107
00:46:50,059 --> 00:46:53,539
installed<font color="#CCCCCC"> I mean do you guys have</font><font color="#E5E5E5"> your</font>

1108
00:46:51,410 --> 00:46:55,069
fight capabilities or any<font color="#CCCCCC"> Avenue for</font>

1109
00:46:53,539 --> 00:47:00,380
detecting things when<font color="#E5E5E5"> they're installed</font>

1110
00:46:55,069 --> 00:47:03,529
<font color="#CCCCCC">without detecting</font><font color="#E5E5E5"> their tool sets</font><font color="#CCCCCC"> all</font>

1111
00:47:00,380 --> 00:47:05,240
<font color="#E5E5E5">right thank you for your</font><font color="#CCCCCC"> question so we</font>

1112
00:47:03,529 --> 00:47:08,559
do have this<font color="#CCCCCC"> ufi scanner that's for the</font>

1113
00:47:05,240 --> 00:47:12,470
<font color="#E5E5E5">referred to so it's able to scan the</font><font color="#CCCCCC"> ufi</font>

1114
00:47:08,559 --> 00:47:14,930
the spi flash memory of course as you

1115
00:47:12,470 --> 00:47:17,149
<font color="#CCCCCC">said since we had access to this ufi</font>

1116
00:47:14,930 --> 00:47:19,490
module because it was embedded into<font color="#CCCCCC"> this</font>

1117
00:47:17,150 --> 00:47:21,710
<font color="#CCCCCC">tool it was easy to</font><font color="#E5E5E5"> write a detection</font>

1118
00:47:19,490 --> 00:47:23,868
for it and then find it<font color="#E5E5E5"> in the real</font>

1119
00:47:21,710 --> 00:47:26,240
world system so<font color="#CCCCCC"> you're right that if we</font>

1120
00:47:23,869 --> 00:47:27,740
don't<font color="#E5E5E5"> have access</font><font color="#CCCCCC"> to this tool it it's</font>

1121
00:47:26,240 --> 00:47:30,529
it's harder but<font color="#E5E5E5"> we still have the</font>

1122
00:47:27,740 --> 00:47:33,020
capability to scan this this<font color="#E5E5E5"> spi flash</font>

1123
00:47:30,529 --> 00:47:34,640
memory and be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find and if</font><font color="#CCCCCC"> arias</font>

1124
00:47:33,020 --> 00:47:44,809
things that might<font color="#E5E5E5"> be lying around in</font>

1125
00:47:34,640 --> 00:47:46,700
<font color="#E5E5E5">this</font><font color="#CCCCCC"> in your</font><font color="#E5E5E5"> SPI flash hello</font><font color="#CCCCCC"> hey guys</font>

1126
00:47:44,809 --> 00:47:49,549
thanks<font color="#CCCCCC"> for the presentation um</font><font color="#E5E5E5"> just</font>

1127
00:47:46,700 --> 00:47:52,700
wanted<font color="#CCCCCC"> to know how you know if</font><font color="#E5E5E5"> you're</font>

1128
00:47:49,549 --> 00:47:56,210
flashing<font color="#CCCCCC"> your your drive</font><font color="#E5E5E5"> or if you're</font>

1129
00:47:52,700 --> 00:47:58,779
flashing<font color="#CCCCCC"> your</font><font color="#E5E5E5"> BIOS</font><font color="#CCCCCC"> but not getting</font><font color="#E5E5E5"> rid</font>

1130
00:47:56,210 --> 00:48:01,940
of the persistence on the machine how

1131
00:47:58,779 --> 00:48:05,089
like how persistent<font color="#E5E5E5"> is that is it does</font>

1132
00:48:01,940 --> 00:48:07,039
<font color="#E5E5E5">it keep does it keep writing back</font><font color="#CCCCCC"> you</font>

1133
00:48:05,089 --> 00:48:10,578
know if you're<font color="#E5E5E5"> not finding</font><font color="#CCCCCC"> it you know</font>

1134
00:48:07,039 --> 00:48:13,849
in the you know on the hard drive that's

1135
00:48:10,579 --> 00:48:16,309
<font color="#CCCCCC">a great</font><font color="#E5E5E5"> question so of course as we seen</font>

1136
00:48:13,849 --> 00:48:18,079
<font color="#CCCCCC">this LoJack's malware has all</font><font color="#E5E5E5"> this</font>

1137
00:48:16,309 --> 00:48:20,210
component<font color="#E5E5E5"> going from the UEFI rootkit</font>

1138
00:48:18,079 --> 00:48:23,029
all the way to this<font color="#E5E5E5"> usually an agent so</font>

1139
00:48:20,210 --> 00:48:24,079
if you're<font color="#E5E5E5"> cleaning only your</font><font color="#CCCCCC"> ufi</font>

1140
00:48:23,029 --> 00:48:26,150
firmware and that you're<font color="#E5E5E5"> not</font>

1141
00:48:24,079 --> 00:48:27,650
reinstalling<font color="#E5E5E5"> your OS</font><font color="#CCCCCC"> and what happens is</font>

1142
00:48:26,150 --> 00:48:29,839
<font color="#CCCCCC">that if you're not cleaning this</font>

1143
00:48:27,650 --> 00:48:31,250
particular malware and it<font color="#E5E5E5"> means</font><font color="#CCCCCC"> that it</font>

1144
00:48:29,839 --> 00:48:32,660
<font color="#E5E5E5">has the</font><font color="#CCCCCC"> capability to connect to the</font>

1145
00:48:31,250 --> 00:48:35,000
server and then download something in

1146
00:48:32,660 --> 00:48:36,920
it's cute<font color="#E5E5E5"> it's so it does not protect</font>

1147
00:48:35,000 --> 00:48:39,349
<font color="#E5E5E5">you just in flashing the firmware so you</font>

1148
00:48:36,920 --> 00:48:39,930
really have<font color="#CCCCCC"> to clean the</font><font color="#E5E5E5"> old system you</font>

1149
00:48:39,349 --> 00:48:42,480
<font color="#E5E5E5">can enjoy</font>

1150
00:48:39,930 --> 00:48:43,919
go and remove the<font color="#CCCCCC"> ufi rootkit</font><font color="#E5E5E5"> which</font>

1151
00:48:42,480 --> 00:48:45,720
brings us back<font color="#E5E5E5"> to what Frederick was</font>

1152
00:48:43,920 --> 00:48:47,310
saying like it's it's not perfect at the

1153
00:48:45,720 --> 00:48:50,009
remediation<font color="#CCCCCC"> its kind</font><font color="#E5E5E5"> of hard right</font>

1154
00:48:47,310 --> 00:48:54,000
<font color="#CCCCCC">because you</font><font color="#E5E5E5"> don't know what how the</font>

1155
00:48:50,010 --> 00:48:55,980
rootkit got there<font color="#E5E5E5"> and by even by</font>

1156
00:48:54,000 --> 00:48:58,620
carefully removing<font color="#E5E5E5"> everything it's like</font>

1157
00:48:55,980 --> 00:49:00,840
<font color="#CCCCCC">you've been kind of</font><font color="#E5E5E5"> own to the deepest</font>

1158
00:48:58,620 --> 00:49:04,650
level<font color="#E5E5E5"> right so it's it's not something</font>

1159
00:49:00,840 --> 00:49:07,140
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you can get out</font><font color="#CCCCCC"> of easily I hope it</font>

1160
00:49:04,650 --> 00:49:11,040
answers your question something else hi

1161
00:49:07,140 --> 00:49:12,529
<font color="#CCCCCC">quick question so</font><font color="#E5E5E5"> you said that they</font>

1162
00:49:11,040 --> 00:49:14,759
were dumping the contents<font color="#E5E5E5"> of the ufi</font>

1163
00:49:12,530 --> 00:49:16,320
<font color="#E5E5E5">memory and like looking looking at that</font>

1164
00:49:14,760 --> 00:49:17,400
before they were writing their boot cake

1165
00:49:16,320 --> 00:49:19,950
was that<font color="#E5E5E5"> correct or did I misunderstand</font>

1166
00:49:17,400 --> 00:49:21,960
that<font color="#E5E5E5"> yeah so the tools we found so both</font>

1167
00:49:19,950 --> 00:49:24,390
the dumper<font color="#CCCCCC"> in the writer tool we found</font>

1168
00:49:21,960 --> 00:49:25,860
them on the<font color="#E5E5E5"> same system yeah and we</font>

1169
00:49:24,390 --> 00:49:27,629
believe so of<font color="#CCCCCC"> course we have no proofs</font>

1170
00:49:25,860 --> 00:49:29,940
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> believe</font><font color="#E5E5E5"> that they</font><font color="#CCCCCC"> actually dump</font>

1171
00:49:27,630 --> 00:49:33,750
the firmware image<font color="#E5E5E5"> and looked at it and</font>

1172
00:49:29,940 --> 00:49:35,250
then to be able<font color="#E5E5E5"> to modify it and then</font>

1173
00:49:33,750 --> 00:49:38,310
they use this other tool that Fredrik

1174
00:49:35,250 --> 00:49:40,170
described to try to write it back to the

1175
00:49:38,310 --> 00:49:41,670
<font color="#CCCCCC">SPFs and</font><font color="#E5E5E5"> so that led to my actual</font>

1176
00:49:40,170 --> 00:49:43,050
<font color="#CCCCCC">question which was like I did I</font><font color="#E5E5E5"> guess</font>

1177
00:49:41,670 --> 00:49:45,450
you didn't since you're not quite sure

1178
00:49:43,050 --> 00:49:46,860
if they actually<font color="#E5E5E5"> exfiltrate it that dump</font>

1179
00:49:45,450 --> 00:49:49,259
then you're not sure like<font color="#E5E5E5"> how long it</font>

1180
00:49:46,860 --> 00:49:55,020
took them to develop<font color="#E5E5E5"> any of that okay</font><font color="#CCCCCC"> no</font>

1181
00:49:49,260 --> 00:49:56,280
no we don't really<font color="#E5E5E5"> know sorry so if</font>

1182
00:49:55,020 --> 00:49:58,650
we're operating<font color="#E5E5E5"> on the assumption that</font>

1183
00:49:56,280 --> 00:50:00,930
an attacker is already able<font color="#E5E5E5"> to place a</font>

1184
00:49:58,650 --> 00:50:05,070
driver into<font color="#E5E5E5"> Dixie</font><font color="#CCCCCC"> that'll be executed</font>

1185
00:50:00,930 --> 00:50:06,419
<font color="#CCCCCC">prior to ready</font><font color="#E5E5E5"> to boot</font><font color="#CCCCCC"> it seems to me</font>

1186
00:50:05,070 --> 00:50:09,480
that a far scarier thing they could do

1187
00:50:06,420 --> 00:50:11,460
is<font color="#E5E5E5"> inject and add handlers in the SMM is</font>

1188
00:50:09,480 --> 00:50:13,560
there any evidence<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> was</font>

1189
00:50:11,460 --> 00:50:16,940
happening<font color="#CCCCCC"> on those</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> well we</font>

1190
00:50:13,560 --> 00:50:16,940
have no evidence of<font color="#CCCCCC"> that No No</font>

1191
00:50:25,130 --> 00:50:31,260
nice presentation<font color="#CCCCCC"> I wanted just to</font><font color="#E5E5E5"> ask a</font>

1192
00:50:28,740 --> 00:50:33,899
quick question<font color="#CCCCCC"> the outer check</font><font color="#E5E5E5"> dot exe</font>

1193
00:50:31,260 --> 00:50:39,140
is<font color="#E5E5E5"> not the digital</font><font color="#CCCCCC"> sign yet the</font>

1194
00:50:33,900 --> 00:50:39,140
diversion<font color="#E5E5E5"> of like</font><font color="#CCCCCC"> dropp'd by the malware</font>

1195
00:50:39,680 --> 00:50:45,720
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> runs in the same even if it's not</font>

1196
00:50:42,810 --> 00:50:49,080
digital sign yet so we<font color="#E5E5E5"> have evidence</font>

1197
00:50:45,720 --> 00:50:51,569
<font color="#CCCCCC">that it ran on several system now</font><font color="#E5E5E5"> how</font>

1198
00:50:49,080 --> 00:50:53,130
exactly<font color="#E5E5E5"> they</font><font color="#CCCCCC"> worried about</font><font color="#E5E5E5"> to it and we</font>

1199
00:50:51,570 --> 00:50:55,560
<font color="#E5E5E5">don't really know but the fact is that</font>

1200
00:50:53,130 --> 00:50:57,840
in<font color="#CCCCCC"> the system that we've seen we</font><font color="#E5E5E5"> we have</font>

1201
00:50:55,560 --> 00:51:00,180
evidence that<font color="#E5E5E5"> this tool was run in the</font>

1202
00:50:57,840 --> 00:51:01,740
early<font color="#CCCCCC"> stages of Windows</font><font color="#E5E5E5"> so of course</font>

1203
00:51:00,180 --> 00:51:05,609
they were able<font color="#E5E5E5"> to do it but as</font><font color="#CCCCCC"> Fredrik</font>

1204
00:51:01,740 --> 00:51:07,379
said these like the system like the

1205
00:51:05,609 --> 00:51:08,940
tools are used<font color="#E5E5E5"> to actually override the</font>

1206
00:51:07,380 --> 00:51:11,070
<font color="#E5E5E5">spi</font><font color="#CCCCCC"> flash memory where</font><font color="#E5E5E5"> either</font>

1207
00:51:08,940 --> 00:51:12,960
misconfigured or all<font color="#CCCCCC"> systems so we might</font>

1208
00:51:11,070 --> 00:51:16,380
<font color="#CCCCCC">be looking at</font><font color="#E5E5E5"> that an attack they were</font>

1209
00:51:12,960 --> 00:51:18,510
able<font color="#CCCCCC"> to focus on a very</font><font color="#E5E5E5"> old version when</font>

1210
00:51:16,380 --> 00:51:21,090
those<font color="#CCCCCC"> they were able to actually own</font>

1211
00:51:18,510 --> 00:51:22,859
that<font color="#CCCCCC"> way so of</font><font color="#E5E5E5"> course all the newer</font>

1212
00:51:21,090 --> 00:51:25,290
protection systems might<font color="#CCCCCC"> not have been</font>

1213
00:51:22,859 --> 00:51:27,660
available on the<font color="#CCCCCC"> system that</font><font color="#E5E5E5"> it was on I</font>

1214
00:51:25,290 --> 00:51:31,550
<font color="#E5E5E5">did</font><font color="#CCCCCC"> buy this the tool he were discussing</font>

1215
00:51:27,660 --> 00:51:31,549
that's clear thank you<font color="#CCCCCC"> very much</font>

1216
00:51:41,620 --> 00:51:45,819
good morning and thank you that<font color="#E5E5E5"> was a</font>

1217
00:51:43,150 --> 00:51:47,860
fantastic<font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> our only window</font>

1218
00:51:45,820 --> 00:51:49,800
space<font color="#E5E5E5"> OS is affected because the apt</font>

1219
00:51:47,860 --> 00:51:52,690
malware drops the modified<font color="#CCCCCC"> Auto Check</font><font color="#E5E5E5"> XE</font>

1220
00:51:49,800 --> 00:51:54,400
yep<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> its</font><font color="#CCCCCC"> windows only</font><font color="#E5E5E5"> and the</font>

1221
00:51:52,690 --> 00:51:56,380
small agent that<font color="#E5E5E5"> we found all the</font>

1222
00:51:54,400 --> 00:52:00,130
versions were all<font color="#E5E5E5"> for</font><font color="#CCCCCC"> Windows and</font><font color="#E5E5E5"> it's</font>

1223
00:51:56,380 --> 00:52:06,570
three windows on the<font color="#CCCCCC"> em hour or at least</font>

1224
00:52:00,130 --> 00:52:06,570
the versions<font color="#CCCCCC"> we hung yeah anything else</font>

1225
00:52:08,600 --> 00:52:12,110
<font color="#CCCCCC">all right thank you guys</font><font color="#E5E5E5"> for a</font><font color="#CCCCCC"> great</font>

1226
00:52:10,580 --> 00:52:18,729
<font color="#CCCCCC">presentation</font><font color="#E5E5E5"> thank you</font>

1227
00:52:12,110 --> 00:52:18,729
[Applause]

