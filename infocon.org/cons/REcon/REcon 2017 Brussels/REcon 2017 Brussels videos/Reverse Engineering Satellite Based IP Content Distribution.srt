1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,420 --> 00:00:13,309
<font color="#E5E5E5">von</font><font color="#CCCCCC"> Arnim 2017</font>

3
00:00:20,690 --> 00:00:24,630
<font color="#E5E5E5">all right my name</font><font color="#CCCCCC"> is Taylor Jacob and</font>

4
00:00:22,980 --> 00:00:26,490
I'm here to<font color="#CCCCCC"> discuss the satellite base</font>

5
00:00:24,630 --> 00:00:29,009
IP protocol that<font color="#E5E5E5"> i reverse-engineered a</font>

6
00:00:26,490 --> 00:00:30,599
couple years ago<font color="#CCCCCC"> this protocol is</font><font color="#E5E5E5"> used</font>

7
00:00:29,010 --> 00:00:32,640
<font color="#E5E5E5">all over North</font><font color="#CCCCCC"> America to distribute</font>

8
00:00:30,600 --> 00:00:34,320
<font color="#E5E5E5">news media video</font><font color="#CCCCCC"> on demand</font><font color="#E5E5E5"> films to</font>

9
00:00:32,640 --> 00:00:38,760
movie theaters<font color="#CCCCCC"> Digital Signage</font><font color="#E5E5E5"> files</font>

10
00:00:34,320 --> 00:00:39,750
amongst other more mundane uses there

11
00:00:38,760 --> 00:00:41,519
<font color="#E5E5E5">are many different protocols that</font>

12
00:00:39,750 --> 00:00:44,340
operate on<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> principles as what I</font>

13
00:00:41,520 --> 00:00:46,170
will discuss today<font color="#CCCCCC"> I can't speak</font><font color="#E5E5E5"> of the</font>

14
00:00:44,340 --> 00:00:48,480
prevalence of this these same<font color="#E5E5E5"> systems or</font>

15
00:00:46,170 --> 00:00:50,040
similar systems being<font color="#E5E5E5"> used</font><font color="#CCCCCC"> in Europe but</font>

16
00:00:48,480 --> 00:00:51,659
based on the<font color="#E5E5E5"> vendor website suspect</font><font color="#CCCCCC"> I</font>

17
00:00:50,040 --> 00:00:53,159
suspect they're similar systems<font color="#CCCCCC"> used</font>

18
00:00:51,659 --> 00:00:59,159
across<font color="#E5E5E5"> the</font><font color="#CCCCCC"> globe and not limited just</font>

19
00:00:53,159 --> 00:01:00,390
<font color="#CCCCCC">North</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> South America</font><font color="#E5E5E5"> so I need to</font>

20
00:00:59,159 --> 00:01:01,409
start<font color="#E5E5E5"> with a little bit of background to</font>

21
00:01:00,390 --> 00:01:02,909
make sure we're all<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same page</font>

22
00:01:01,409 --> 00:01:04,589
<font color="#E5E5E5">although</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are many types of</font>

23
00:01:02,909 --> 00:01:06,060
different satellites circling the<font color="#E5E5E5"> Earth</font>

24
00:01:04,589 --> 00:01:07,800
this presentation<font color="#E5E5E5"> deals specifically</font>

25
00:01:06,060 --> 00:01:09,420
with the<font color="#E5E5E5"> most common type notice most</font>

26
00:01:07,800 --> 00:01:12,750
commonly known type geostationary

27
00:01:09,420 --> 00:01:14,520
satellites these satellites are<font color="#E5E5E5"> well</font>

28
00:01:12,750 --> 00:01:16,020
<font color="#E5E5E5">suited for distributing a variety of</font>

29
00:01:14,520 --> 00:01:19,500
<font color="#CCCCCC">information from a single</font><font color="#E5E5E5"> source or</font><font color="#CCCCCC"> a</font>

30
00:01:16,020 --> 00:01:21,570
large geographic<font color="#E5E5E5"> area most common those</font>

31
00:01:19,500 --> 00:01:23,010
commonly known uses<font color="#E5E5E5"> for TV content but</font>

32
00:01:21,570 --> 00:01:24,589
the<font color="#E5E5E5"> set up is also</font><font color="#CCCCCC"> well suited for the</font>

33
00:01:23,010 --> 00:01:27,150
other types of media<font color="#CCCCCC"> distribution and</font>

34
00:01:24,590 --> 00:01:28,530
there's typically no return<font color="#E5E5E5"> path this</font>

35
00:01:27,150 --> 00:01:29,790
sort of delivery network and<font color="#E5E5E5"> that and</font>

36
00:01:28,530 --> 00:01:31,470
<font color="#CCCCCC">that</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> setup</font><font color="#E5E5E5"> is okay if you're</font>

37
00:01:29,790 --> 00:01:32,850
watching<font color="#CCCCCC"> TV it's</font><font color="#E5E5E5"> not important that</font><font color="#CCCCCC"> you</font>

38
00:01:31,470 --> 00:01:34,740
tell the station<font color="#E5E5E5"> you're watching and if</font>

39
00:01:32,850 --> 00:01:36,030
you're receiving media files they

40
00:01:34,740 --> 00:01:37,289
generally won't<font color="#CCCCCC"> be needed and within</font>

41
00:01:36,030 --> 00:01:43,470
<font color="#E5E5E5">seconds of delivery usually they</font>

42
00:01:37,290 --> 00:01:45,210
position the data days beforehand so for

43
00:01:43,470 --> 00:01:47,280
<font color="#E5E5E5">this my hardware setup is pretty</font><font color="#CCCCCC"> basic</font>

44
00:01:45,210 --> 00:01:48,899
just<font color="#E5E5E5"> standard I use</font><font color="#CCCCCC"> the standard some</font>

45
00:01:47,280 --> 00:01:52,800
standard<font color="#CCCCCC"> c-band dishes which you see</font>

46
00:01:48,900 --> 00:01:56,820
there and a PCI PCI dvb-s card and just

47
00:01:52,800 --> 00:01:59,220
<font color="#CCCCCC">a Linux x86 PC</font><font color="#E5E5E5"> and for the software</font><font color="#CCCCCC"> I</font>

48
00:01:56,820 --> 00:02:00,779
used all open source all open source

49
00:01:59,220 --> 00:02:03,539
software<font color="#E5E5E5"> use DVD</font><font color="#CCCCCC"> snip which is a</font>

50
00:02:00,780 --> 00:02:06,330
transport stream and analyzing tool the

51
00:02:03,540 --> 00:02:09,119
regular<font color="#CCCCCC"> DVB tools like s aptitude DVB</font>

52
00:02:06,330 --> 00:02:11,220
traffic to do some in-depth analysis on

53
00:02:09,119 --> 00:02:12,269
the<font color="#CCCCCC"> transports</font><font color="#E5E5E5"> or to look</font><font color="#CCCCCC"> at the PID s</font>

54
00:02:11,220 --> 00:02:14,640
on the traffic<font color="#E5E5E5"> and then your standard</font>

55
00:02:12,269 --> 00:02:16,650
<font color="#E5E5E5">UNIX tools greps or unique and other</font>

56
00:02:14,640 --> 00:02:18,119
<font color="#CCCCCC">text-based</font><font color="#E5E5E5"> tools and then at some</font><font color="#CCCCCC"> point</font>

57
00:02:16,650 --> 00:02:22,230
<font color="#E5E5E5">I had to start writing my own software</font>

58
00:02:18,120 --> 00:02:23,280
<font color="#CCCCCC">to get deeper into it so before I dive</font>

59
00:02:22,230 --> 00:02:24,899
in I want to briefly<font color="#E5E5E5"> cover some</font>

60
00:02:23,280 --> 00:02:26,600
technical aspects<font color="#E5E5E5"> of the satellite</font>

61
00:02:24,900 --> 00:02:29,069
systems in the video formats

62
00:02:26,600 --> 00:02:31,019
<font color="#CCCCCC">digital BBB is the most prevalent</font>

63
00:02:29,069 --> 00:02:31,489
<font color="#E5E5E5">digital video broadcasting standard in</font>

64
00:02:31,020 --> 00:02:33,170
the world

65
00:02:31,490 --> 00:02:35,630
there's three main types there's dvb-t

66
00:02:33,170 --> 00:02:38,200
for terrestrial dvb-c for cable

67
00:02:35,630 --> 00:02:41,420
television<font color="#E5E5E5"> DBS for dvb-s for satellite</font>

68
00:02:38,200 --> 00:02:42,079
<font color="#CCCCCC">they're newer</font><font color="#E5E5E5"> versions dvb-s</font><font color="#CCCCCC"> to t2</font><font color="#E5E5E5"> and</font>

69
00:02:41,420 --> 00:02:44,750
<font color="#CCCCCC">c2</font>

70
00:02:42,080 --> 00:02:45,950
and although the V and DV be would

71
00:02:44,750 --> 00:02:47,690
indicate that it's for video can also

72
00:02:45,950 --> 00:02:49,220
<font color="#E5E5E5">carry any other type of digital content</font>

73
00:02:47,690 --> 00:02:53,300
in the case of this presentation

74
00:02:49,220 --> 00:02:55,520
specifically IP traffic so the main

75
00:02:53,300 --> 00:02:57,290
<font color="#CCCCCC">difference between B BT C and s is</font><font color="#E5E5E5"> the</font>

76
00:02:55,520 --> 00:02:59,330
transmission medium for T it's the air

77
00:02:57,290 --> 00:03:02,540
for C it's a copper<font color="#CCCCCC"> cable and s it's the</font>

78
00:02:59,330 --> 00:03:03,980
Earth's atmosphere<font color="#CCCCCC"> the physical</font>

79
00:03:02,540 --> 00:03:05,900
<font color="#E5E5E5">interface is generally referred to as a</font>

80
00:03:03,980 --> 00:03:07,459
MUX in all three<font color="#CCCCCC"> DV v flavors in the</font>

81
00:03:05,900 --> 00:03:11,060
case of<font color="#CCCCCC"> dvb-s it's also</font><font color="#E5E5E5"> referred to</font>

82
00:03:07,460 --> 00:03:12,920
rather erroneously as a transponder<font color="#E5E5E5"> and</font>

83
00:03:11,060 --> 00:03:13,880
once the signals are demodulated into a

84
00:03:12,920 --> 00:03:16,760
bit stream they're virtually identical

85
00:03:13,880 --> 00:03:20,420
<font color="#CCCCCC">and the standard way this data is moved</font>

86
00:03:16,760 --> 00:03:26,929
is MPEG transport stream<font color="#CCCCCC"> also called TS</font>

87
00:03:20,420 --> 00:03:29,299
<font color="#CCCCCC">for short</font><font color="#E5E5E5"> and the format's relatively</font>

88
00:03:26,930 --> 00:03:31,550
simple<font color="#CCCCCC"> it's 188 byte packets that have a</font>

89
00:03:29,300 --> 00:03:33,620
simple<font color="#CCCCCC"> 4 by editor</font><font color="#E5E5E5"> and all you really</font>

90
00:03:31,550 --> 00:03:36,380
need<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> for this presentation is it</font>

91
00:03:33,620 --> 00:03:38,060
starts with 47 hex and there's a 13 bit

92
00:03:36,380 --> 00:03:42,140
field called<font color="#CCCCCC"> the packet identifier more</font>

93
00:03:38,060 --> 00:03:44,360
commonly known<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a pid' so on the</font>

94
00:03:42,140 --> 00:03:47,119
transport stream there's 108 108

95
00:03:44,360 --> 00:03:48,320
thousand 191 available<font color="#CCCCCC"> pids and of all</font>

96
00:03:47,120 --> 00:03:50,420
of them<font color="#CCCCCC"> only a fraction will use</font>

97
00:03:48,320 --> 00:03:52,010
simultaneously each pedal carry a

98
00:03:50,420 --> 00:03:54,440
specific<font color="#CCCCCC"> leg of a traffic it can be a</font>

99
00:03:52,010 --> 00:03:57,739
single<font color="#E5E5E5"> video stream audio stream program</font>

100
00:03:54,440 --> 00:03:59,840
metadata or other data traffic<font color="#E5E5E5"> the pr</font><font color="#CCCCCC"> DS</font>

101
00:03:57,740 --> 00:04:01,580
<font color="#CCCCCC">are how a set-top box or</font><font color="#E5E5E5"> other component</font>

102
00:03:59,840 --> 00:04:04,670
can filter out<font color="#E5E5E5"> the content not relevant</font>

103
00:04:01,580 --> 00:04:06,230
<font color="#E5E5E5">to their operation</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example a digital</font>

104
00:04:04,670 --> 00:04:07,970
<font color="#CCCCCC">video channel will</font><font color="#E5E5E5"> be made up a few</font><font color="#CCCCCC"> pits</font>

105
00:04:06,230 --> 00:04:09,890
generally<font color="#E5E5E5"> will have one pit use of the</font>

106
00:04:07,970 --> 00:04:11,900
video stream<font color="#E5E5E5"> another for the audio track</font>

107
00:04:09,890 --> 00:04:13,700
<font color="#CCCCCC">and potentially others for subtitles or</font>

108
00:04:11,900 --> 00:04:14,750
captions or whatever you call<font color="#CCCCCC"> it in</font>

109
00:04:13,700 --> 00:04:18,289
<font color="#E5E5E5">Europe that's what we called in North</font>

110
00:04:14,750 --> 00:04:19,579
America<font color="#CCCCCC"> so the set-top</font><font color="#E5E5E5"> box would filter</font>

111
00:04:18,290 --> 00:04:21,830
those specific<font color="#CCCCCC"> bids and ignore</font>

112
00:04:19,579 --> 00:04:24,289
everything<font color="#E5E5E5"> else and as far as encryption</font>

113
00:04:21,829 --> 00:04:25,880
DVD encryption runs on will run on<font color="#CCCCCC"> that</font>

114
00:04:24,290 --> 00:04:28,790
hundred eighty four byte<font color="#E5E5E5"> payload it's</font>

115
00:04:25,880 --> 00:04:33,020
just the generic<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> 2 B 7 there in my</font>

116
00:04:28,790 --> 00:04:35,540
<font color="#E5E5E5">diagram so and then the second part I</font>

117
00:04:33,020 --> 00:04:40,090
<font color="#E5E5E5">need to cover is perc as the packetized</font>

118
00:04:35,540 --> 00:04:42,380
elementary<font color="#E5E5E5"> stream and PSI data</font><font color="#CCCCCC"> pack</font><font color="#E5E5E5"> and</font>

119
00:04:40,090 --> 00:04:44,030
<font color="#CCCCCC">p/es</font><font color="#E5E5E5"> is the format that defines how the</font>

120
00:04:42,380 --> 00:04:45,469
elementary stream data which is

121
00:04:44,030 --> 00:04:47,960
generally<font color="#CCCCCC"> audio/video SCADA</font><font color="#E5E5E5"> and</font>

122
00:04:45,470 --> 00:04:49,940
transport stream the elementary stream

123
00:04:47,960 --> 00:04:51,710
is packetized in sequential order<font color="#CCCCCC"> in the</font>

124
00:04:49,940 --> 00:04:54,440
PS packets are sent on<font color="#E5E5E5"> the pit the</font>

125
00:04:51,710 --> 00:04:56,030
format of<font color="#E5E5E5"> the video or audio codec isn't</font>

126
00:04:54,440 --> 00:04:58,340
<font color="#E5E5E5">defined and it typically</font><font color="#CCCCCC"> has changed</font>

127
00:04:56,030 --> 00:05:00,530
over<font color="#E5E5E5"> time historically</font><font color="#CCCCCC"> the video would</font>

128
00:04:58,340 --> 00:05:03,560
<font color="#CCCCCC">have been mpeg-2 now it's h.264 and it's</font>

129
00:05:00,530 --> 00:05:05,840
migrating to<font color="#E5E5E5"> HC</font><font color="#CCCCCC"> bc</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> important</font>

130
00:05:03,560 --> 00:05:07,190
<font color="#E5E5E5">part the</font><font color="#CCCCCC"> the important part of</font><font color="#E5E5E5"> that you</font>

131
00:05:05,840 --> 00:05:08,599
need<font color="#E5E5E5"> to know about this is packetized</font>

132
00:05:07,190 --> 00:05:14,540
elementary stream always starts with<font color="#E5E5E5"> a</font>

133
00:05:08,600 --> 00:05:16,130
zero<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> one sequence and hacks and the</font>

134
00:05:14,540 --> 00:05:18,050
other type<font color="#CCCCCC"> of payload PSI is most</font>

135
00:05:16,130 --> 00:05:19,430
commonly described is used to<font color="#E5E5E5"> describe</font>

136
00:05:18,050 --> 00:05:21,230
<font color="#E5E5E5">the</font><font color="#CCCCCC"> layout of</font><font color="#E5E5E5"> a transport stream meaning</font>

137
00:05:19,430 --> 00:05:22,250
how its configured what TV channels are

138
00:05:21,230 --> 00:05:24,050
<font color="#CCCCCC">available what PIDs</font>

139
00:05:22,250 --> 00:05:25,880
are available to find the<font color="#E5E5E5"> video and</font>

140
00:05:24,050 --> 00:05:27,560
audio streams on but there's<font color="#E5E5E5"> many of</font>

141
00:05:25,880 --> 00:05:29,630
other types of psi data<font color="#E5E5E5"> that allow</font>

142
00:05:27,560 --> 00:05:33,320
different<font color="#E5E5E5"> standards to write on top of</font>

143
00:05:29,630 --> 00:05:34,909
the transport stream<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

144
00:05:33,320 --> 00:05:38,200
define<font color="#CCCCCC"> what is necessary for their</font>

145
00:05:34,910 --> 00:05:40,040
application now DVD multi protocol

146
00:05:38,200 --> 00:05:41,479
encapsulation standard is the<font color="#CCCCCC"> standard</font>

147
00:05:40,040 --> 00:05:43,520
that pertains to this presentation<font color="#E5E5E5"> it</font>

148
00:05:41,480 --> 00:05:46,190
defines<font color="#CCCCCC"> the</font><font color="#E5E5E5"> means to carry IP traffic</font>

149
00:05:43,520 --> 00:05:49,099
over<font color="#E5E5E5"> the transport stream the key parts</font>

150
00:05:46,190 --> 00:05:50,660
are one or more<font color="#CCCCCC"> pits can carry dvb MP MP</font>

151
00:05:49,100 --> 00:05:53,180
traffic and all the<font color="#E5E5E5"> pits will operate</font>

152
00:05:50,660 --> 00:05:55,370
independently of<font color="#E5E5E5"> each other each</font><font color="#CCCCCC"> pidz</font>

153
00:05:53,180 --> 00:05:58,010
<font color="#CCCCCC">DV</font><font color="#E5E5E5"> BMP stream may contain more than one</font>

154
00:05:55,370 --> 00:06:00,380
<font color="#CCCCCC">destination IP the intention is to</font><font color="#E5E5E5"> take</font>

155
00:05:58,010 --> 00:06:01,700
<font color="#CCCCCC">the iPAQ IP packets from one pit and put</font>

156
00:06:00,380 --> 00:06:04,909
<font color="#E5E5E5">them underneath ernet network somewhere</font>

157
00:06:01,700 --> 00:06:06,289
<font color="#E5E5E5">once they're decoded</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> North America I</font>

158
00:06:04,910 --> 00:06:08,300
encountered very little unencrypted

159
00:06:06,290 --> 00:06:09,890
unicast IP<font color="#E5E5E5"> traffic but I did see it here</font>

160
00:06:08,300 --> 00:06:11,810
<font color="#E5E5E5">and there the vast</font><font color="#CCCCCC"> majority of the IP</font>

161
00:06:09,890 --> 00:06:13,219
<font color="#E5E5E5">traffic I encountered is multicast GDP</font>

162
00:06:11,810 --> 00:06:17,390
since<font color="#E5E5E5"> the satellite link is usually</font>

163
00:06:13,220 --> 00:06:18,140
<font color="#E5E5E5">single directional so a little bit of</font>

164
00:06:17,390 --> 00:06:20,360
the<font color="#CCCCCC"> background</font>

165
00:06:18,140 --> 00:06:22,669
<font color="#CCCCCC">I've always enjoyed scanning satellites</font>

166
00:06:20,360 --> 00:06:24,770
for news<font color="#E5E5E5"> events feeds sports events etc</font>

167
00:06:22,670 --> 00:06:26,600
<font color="#E5E5E5">and although there's a lot</font><font color="#CCCCCC"> of program</font>

168
00:06:24,770 --> 00:06:28,159
that's<font color="#CCCCCC"> available for</font><font color="#E5E5E5"> subscription it's</font>

169
00:06:26,600 --> 00:06:29,660
always been the foot it's always been

170
00:06:28,160 --> 00:06:32,000
fun<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see which</font><font color="#E5E5E5"> you aren't</font><font color="#CCCCCC"> supposed to</font>

171
00:06:29,660 --> 00:06:33,650
see when scanning signals with<font color="#E5E5E5"> the</font>

172
00:06:32,000 --> 00:06:36,320
satellite set-top box<font color="#E5E5E5"> you look for these</font>

173
00:06:33,650 --> 00:06:37,310
hidden channels<font color="#E5E5E5"> it's coming to run it's</font>

174
00:06:36,320 --> 00:06:39,020
coming to run into<font color="#CCCCCC"> Lots they're</font>

175
00:06:37,310 --> 00:06:41,180
encrypted it's also<font color="#E5E5E5"> common to find a</font>

176
00:06:39,020 --> 00:06:43,219
transponder<font color="#E5E5E5"> transponder</font><font color="#CCCCCC"> transport stream</font>

177
00:06:41,180 --> 00:06:45,200
<font color="#CCCCCC">that lead no programs on and what you</font>

178
00:06:43,220 --> 00:06:45,600
can<font color="#CCCCCC"> see here is a set-top box doing a</font>

179
00:06:45,200 --> 00:06:51,390
blind

180
00:06:45,600 --> 00:06:52,440
and and so anyway so these<font color="#E5E5E5"> transponders</font>

181
00:06:51,390 --> 00:06:53,700
that<font color="#E5E5E5"> have no programs that aren't</font>

182
00:06:52,440 --> 00:06:55,410
encrypted or anything they obviously

183
00:06:53,700 --> 00:06:57,450
have some purpose but<font color="#E5E5E5"> it's not carrying</font>

184
00:06:55,410 --> 00:06:59,370
television traffic and many times

185
00:06:57,450 --> 00:07:02,550
they'll<font color="#CCCCCC"> be satellite based</font><font color="#E5E5E5"> Internet</font>

186
00:06:59,370 --> 00:07:03,930
services but not<font color="#E5E5E5"> always so for years I</font>

187
00:07:02,550 --> 00:07:05,700
always wondered<font color="#CCCCCC"> what they were</font><font color="#E5E5E5"> but and</font>

188
00:07:03,930 --> 00:07:07,020
but I never did<font color="#E5E5E5"> much investigation</font>

189
00:07:05,700 --> 00:07:09,390
assuming it was just an encrypted

190
00:07:07,020 --> 00:07:11,400
Internet traffic<font color="#CCCCCC"> but at some point seven</font>

191
00:07:09,390 --> 00:07:13,050
or eight years ago<font color="#E5E5E5"> I saw hints here and</font>

192
00:07:11,400 --> 00:07:15,270
there<font color="#E5E5E5"> some on some</font><font color="#CCCCCC"> forums</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are being</font>

193
00:07:13,050 --> 00:07:18,200
there being TV channels on these unknown

194
00:07:15,270 --> 00:07:20,099
transponders they were calling<font color="#E5E5E5"> it</font><font color="#CCCCCC"> IPTV</font>

195
00:07:18,200 --> 00:07:21,810
unfortunately all these signals were on

196
00:07:20,100 --> 00:07:24,090
<font color="#E5E5E5">c-band and I have a sieve and dish at</font>

197
00:07:21,810 --> 00:07:25,560
<font color="#CCCCCC">the time so I set up that I set out to</font>

198
00:07:24,090 --> 00:07:28,349
<font color="#E5E5E5">find a c-band dish and started examining</font>

199
00:07:25,560 --> 00:07:30,720
these signals with<font color="#CCCCCC"> one X</font><font color="#E5E5E5"> PC I've always</font>

200
00:07:28,350 --> 00:07:32,310
had<font color="#E5E5E5"> a piece</font><font color="#CCCCCC"> T around</font><font color="#E5E5E5"> with the DVB dvb-s</font>

201
00:07:30,720 --> 00:07:33,750
card so examining it was just a matter

202
00:07:32,310 --> 00:07:35,100
of sitting down<font color="#CCCCCC"> and poking around once I</font>

203
00:07:33,750 --> 00:07:38,580
managed<font color="#E5E5E5"> to find a suitable dish and get</font>

204
00:07:35,100 --> 00:07:40,260
it installed<font color="#CCCCCC"> so once I acquired</font><font color="#E5E5E5"> my first</font>

205
00:07:38,580 --> 00:07:44,240
c-band dish<font color="#E5E5E5"> I installed it and I started</font>

206
00:07:40,260 --> 00:07:44,240
<font color="#E5E5E5">taking notes on these empty transponders</font>

207
00:07:45,260 --> 00:07:50,610
so the process<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I would use to</font>

208
00:07:48,570 --> 00:07:52,860
<font color="#E5E5E5">examine these empty transponders once I</font>

209
00:07:50,610 --> 00:07:54,960
found<font color="#E5E5E5"> what the set-top box was to see</font>

210
00:07:52,860 --> 00:07:56,610
<font color="#CCCCCC">what</font><font color="#E5E5E5"> pigs were present once the</font><font color="#CCCCCC"> Newark</font>

211
00:07:54,960 --> 00:07:59,340
pigs were present I'd start identifying

212
00:07:56,610 --> 00:08:00,390
them at first<font color="#E5E5E5"> I didn't</font><font color="#CCCCCC"> really know what</font>

213
00:07:59,340 --> 00:08:02,489
I was<font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> but if it was</font>

214
00:08:00,390 --> 00:08:05,070
unencrypted and<font color="#E5E5E5"> not a regular</font><font color="#CCCCCC"> PS stream</font>

215
00:08:02,490 --> 00:08:06,810
I was interested<font color="#E5E5E5"> so one of the tools I</font>

216
00:08:05,070 --> 00:08:08,370
used to identify<font color="#E5E5E5"> what pigs were present</font>

217
00:08:06,810 --> 00:08:11,430
with<font color="#CCCCCC"> DVB traffic it's part of the</font>

218
00:08:08,370 --> 00:08:13,500
standard<font color="#CCCCCC"> Linux DVB tools and it operates</font>

219
00:08:11,430 --> 00:08:14,940
<font color="#E5E5E5">by checking every</font><font color="#CCCCCC"> transport</font><font color="#E5E5E5"> are checking</font>

220
00:08:13,500 --> 00:08:16,350
<font color="#E5E5E5">every packet in</font><font color="#CCCCCC"> the transport stream</font>

221
00:08:14,940 --> 00:08:18,840
over second and<font color="#E5E5E5"> Counting what pizza</font>

222
00:08:16,350 --> 00:08:21,360
<font color="#E5E5E5">present and the bandwidth so you can see</font>

223
00:08:18,840 --> 00:08:23,159
<font color="#E5E5E5">in an output</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> the capture on the</font>

224
00:08:21,360 --> 00:08:24,510
<font color="#E5E5E5">right is some</font><font color="#CCCCCC"> a regular TV MUX and</font><font color="#E5E5E5"> you</font>

225
00:08:23,160 --> 00:08:26,670
can see there's a lot of different<font color="#E5E5E5"> pins</font>

226
00:08:24,510 --> 00:08:28,770
and various bit rates and the one on<font color="#CCCCCC"> the</font>

227
00:08:26,670 --> 00:08:31,200
<font color="#E5E5E5">left here</font><font color="#CCCCCC"> is what I'm calling</font><font color="#E5E5E5"> an empty</font>

228
00:08:28,770 --> 00:08:33,960
MUX that has one pit<font color="#E5E5E5"> that has you can</font>

229
00:08:31,200 --> 00:08:37,770
see<font color="#E5E5E5"> almost 72 megabyte 72 megabit of</font>

230
00:08:33,960 --> 00:08:40,650
data<font color="#E5E5E5"> just sitting there so one side</font>

231
00:08:37,770 --> 00:08:43,770
identified one<font color="#E5E5E5"> of these one of these</font>

232
00:08:40,650 --> 00:08:47,010
<font color="#CCCCCC">pigs with lots of traffic</font><font color="#E5E5E5"> let's start to</font>

233
00:08:43,770 --> 00:08:49,230
<font color="#E5E5E5">look at it</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> DB B snoop and DB b snoop</font>

234
00:08:47,010 --> 00:08:51,630
will allow you to<font color="#E5E5E5"> examine and really</font>

235
00:08:49,230 --> 00:08:52,650
find detail whatever<font color="#E5E5E5"> contents is on a</font>

236
00:08:51,630 --> 00:08:56,280
particular<font color="#CCCCCC"> Pig</font>

237
00:08:52,650 --> 00:08:58,199
so<font color="#CCCCCC"> I'd use DB traffic after identified</font>

238
00:08:56,280 --> 00:08:58,980
the pit after<font color="#E5E5E5"> a quick glance you can</font><font color="#CCCCCC"> see</font>

239
00:08:58,200 --> 00:09:03,120
what<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> kind</font>

240
00:08:58,980 --> 00:09:04,440
traffic is being<font color="#E5E5E5"> carried and yeah if you</font>

241
00:09:03,120 --> 00:09:06,120
look at this<font color="#CCCCCC"> example if you look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> this</font>

242
00:09:04,440 --> 00:09:07,860
<font color="#E5E5E5">example here</font><font color="#CCCCCC"> I cut out</font><font color="#E5E5E5"> a lot because it</font>

243
00:09:06,120 --> 00:09:09,750
would have been<font color="#CCCCCC"> have</font><font color="#E5E5E5"> 30 screens worth of</font>

244
00:09:07,860 --> 00:09:11,399
data<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see</font><font color="#CCCCCC"> the it's</font><font color="#E5E5E5"> not you</font>

245
00:09:09,750 --> 00:09:13,740
can see<font color="#CCCCCC"> its</font><font color="#E5E5E5"> IP traffic and in red you</font>

246
00:09:11,399 --> 00:09:15,750
can see<font color="#CCCCCC"> the you</font><font color="#E5E5E5"> can see the IP in the</font>

247
00:09:13,740 --> 00:09:20,279
destination<font color="#E5E5E5"> port so I've definitely got</font>

248
00:09:15,750 --> 00:09:21,630
some sort<font color="#E5E5E5"> of a DB traffic here</font><font color="#CCCCCC"> so yeah a</font>

249
00:09:20,279 --> 00:09:23,010
<font color="#CCCCCC">lot of this process you know</font><font color="#E5E5E5"> I'm</font>

250
00:09:21,630 --> 00:09:24,510
mentioning it<font color="#E5E5E5"> manually but eventually I</font>

251
00:09:23,010 --> 00:09:25,889
programmed it<font color="#CCCCCC"> up because</font><font color="#E5E5E5"> it was kind of</font>

252
00:09:24,510 --> 00:09:31,500
boring<font color="#CCCCCC"> to just like write all this stuff</font>

253
00:09:25,889 --> 00:09:33,300
on paper<font color="#E5E5E5"> so see so anyway</font><font color="#CCCCCC"> DBB snoop will</font>

254
00:09:31,500 --> 00:09:35,310
<font color="#CCCCCC">provided tremendous amount of detail</font>

255
00:09:33,300 --> 00:09:37,290
<font color="#E5E5E5">almost anything about almost anything</font>

256
00:09:35,310 --> 00:09:39,149
<font color="#CCCCCC">and encounters and here's a</font><font color="#E5E5E5"> portion of</font>

257
00:09:37,290 --> 00:09:42,779
the output<font color="#E5E5E5"> well that's actually the</font>

258
00:09:39,149 --> 00:09:44,910
portion of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> output so anyway so</font>

259
00:09:42,779 --> 00:09:47,639
<font color="#E5E5E5">basically since the outputs</font><font color="#CCCCCC"> since the</font>

260
00:09:44,910 --> 00:09:49,050
outputs<font color="#CCCCCC"> txt I was able</font><font color="#E5E5E5"> to pipe</font><font color="#CCCCCC"> the pipes</font>

261
00:09:47,639 --> 00:09:52,139
of stuff through grep and<font color="#CCCCCC"> look at what</font>

262
00:09:49,050 --> 00:09:54,240
<font color="#E5E5E5">ip's were present and you know get other</font>

263
00:09:52,139 --> 00:09:57,600
statistics and figure<font color="#CCCCCC"> out what basically</font>

264
00:09:54,240 --> 00:10:07,230
I<font color="#E5E5E5"> was looking for so sorry I'm a</font><font color="#CCCCCC"> little</font>

265
00:09:57,600 --> 00:10:08,339
lost here so yeah at first<font color="#E5E5E5"> I</font><font color="#CCCCCC"> wasn't</font>

266
00:10:07,230 --> 00:10:09,569
really<font color="#E5E5E5"> sure what I was</font><font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> but</font>

267
00:10:08,339 --> 00:10:11,850
the first thing I did<font color="#E5E5E5"> was to identify</font>

268
00:10:09,569 --> 00:10:13,589
<font color="#E5E5E5">the IPS the IP addresses that were</font>

269
00:10:11,850 --> 00:10:15,149
<font color="#E5E5E5">present then I started</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font>

270
00:10:13,589 --> 00:10:17,459
traffic on each of the<font color="#E5E5E5"> IPS I realized</font>

271
00:10:15,149 --> 00:10:18,839
<font color="#CCCCCC">very quickly</font><font color="#E5E5E5"> but if I did encounter</font>

272
00:10:17,459 --> 00:10:20,489
<font color="#E5E5E5">unicast traffic it wasn't very</font>

273
00:10:18,839 --> 00:10:21,529
<font color="#E5E5E5">interesting multicast was a completely</font>

274
00:10:20,490 --> 00:10:25,199
<font color="#CCCCCC">different story</font>

275
00:10:21,529 --> 00:10:28,199
<font color="#E5E5E5">so looking at a UDP dump looking at a</font>

276
00:10:25,199 --> 00:10:29,490
dump of<font color="#CCCCCC"> the UDP packets you can</font><font color="#E5E5E5"> see here</font>

277
00:10:28,199 --> 00:10:31,319
you can<font color="#CCCCCC"> see here that</font><font color="#E5E5E5"> I've highlighted</font>

278
00:10:29,490 --> 00:10:32,519
the<font color="#CCCCCC"> forty sevens</font><font color="#E5E5E5"> which are spaced one</font>

279
00:10:31,319 --> 00:10:34,349
<font color="#E5E5E5">hundred eighty eight hundred eighty</font>

280
00:10:32,519 --> 00:10:36,089
<font color="#E5E5E5">eight bytes apart and then in blue which</font>

281
00:10:34,350 --> 00:10:37,920
I guess<font color="#E5E5E5"> you can't see</font><font color="#CCCCCC"> very well</font><font color="#E5E5E5"> there's</font>

282
00:10:36,089 --> 00:10:39,839
a bunch of the PE s start sequences so

283
00:10:37,920 --> 00:10:41,430
it's<font color="#E5E5E5"> really obvious in this packet that</font>

284
00:10:39,839 --> 00:10:42,720
there's some<font color="#E5E5E5"> sort of video and there's</font>

285
00:10:41,430 --> 00:10:45,510
some<font color="#CCCCCC"> poor to some sort of transport</font>

286
00:10:42,720 --> 00:10:51,380
<font color="#E5E5E5">stream but how to get it out I didn't</font>

287
00:10:45,510 --> 00:10:54,540
really know at the time so<font color="#E5E5E5"> let's see</font>

288
00:10:51,380 --> 00:10:55,860
yeah by this<font color="#E5E5E5"> point I reached the</font><font color="#CCCCCC"> end by</font>

289
00:10:54,540 --> 00:10:57,599
this point I<font color="#CCCCCC"> had reached the end of the</font>

290
00:10:55,860 --> 00:10:59,310
grapple part of my investigation so I

291
00:10:57,600 --> 00:11:01,260
threw together some<font color="#CCCCCC"> very basic code to</font>

292
00:10:59,310 --> 00:11:03,469
capture the IP packets and manipulate

293
00:11:01,260 --> 00:11:03,470
them

294
00:11:05,500 --> 00:11:10,540
<font color="#CCCCCC">after at first at first this little</font>

295
00:11:09,070 --> 00:11:12,220
program<font color="#CCCCCC"> just displayed what</font><font color="#E5E5E5"> IP use were</font>

296
00:11:10,540 --> 00:11:13,870
present on the<font color="#E5E5E5"> pit</font><font color="#CCCCCC"> then I started to say</font>

297
00:11:12,220 --> 00:11:16,240
the payloads of certain IP used to a

298
00:11:13,870 --> 00:11:18,040
file and<font color="#CCCCCC"> I had my first results the</font>

299
00:11:16,240 --> 00:11:19,630
first success turned out to be linear<font color="#CCCCCC"> TV</font>

300
00:11:18,040 --> 00:11:22,060
channels linear is an<font color="#E5E5E5"> industry standard</font>

301
00:11:19,630 --> 00:11:24,400
<font color="#E5E5E5">term to describe</font><font color="#CCCCCC"> real-time television a</font>

302
00:11:22,060 --> 00:11:26,020
real-time television station these

303
00:11:24,400 --> 00:11:28,150
<font color="#E5E5E5">channels are made up of a single MPEG</font>

304
00:11:26,020 --> 00:11:30,100
transport stream encapsulated in UDP

305
00:11:28,150 --> 00:11:33,370
packets with one channel<font color="#CCCCCC"> per multicast</font>

306
00:11:30,100 --> 00:11:37,180
IP each UDP packet<font color="#E5E5E5"> would contain exactly</font>

307
00:11:33,370 --> 00:11:38,800
<font color="#E5E5E5">seven transport stream packets</font><font color="#CCCCCC"> to</font>

308
00:11:37,180 --> 00:11:40,260
<font color="#CCCCCC">Stander's</font><font color="#E5E5E5"> to transponders on the same</font>

309
00:11:38,800 --> 00:11:42,969
satellite<font color="#CCCCCC"> I had a large line of</font>

310
00:11:40,260 --> 00:11:44,770
encrypted channels<font color="#E5E5E5"> but a few more were</font>

311
00:11:42,970 --> 00:11:46,600
in the clear<font color="#E5E5E5"> once one of these happen to</font>

312
00:11:44,770 --> 00:11:49,390
be NHL<font color="#E5E5E5"> center ice</font><font color="#CCCCCC"> state encrypted</font>

313
00:11:46,600 --> 00:11:50,890
unencrypted for about<font color="#CCCCCC"> two years</font><font color="#E5E5E5"> so to</font>

314
00:11:49,390 --> 00:11:52,300
play<font color="#E5E5E5"> these channels back on a computer I</font>

315
00:11:50,890 --> 00:11:54,430
wrote a<font color="#E5E5E5"> simple program</font><font color="#CCCCCC"> to capture</font><font color="#E5E5E5"> the</font>

316
00:11:52,300 --> 00:11:56,020
<font color="#E5E5E5">UDP packets and Riaan capsulate them on</font>

317
00:11:54,430 --> 00:11:57,579
a different multicast IP which I would

318
00:11:56,020 --> 00:12:01,930
<font color="#CCCCCC">playback</font><font color="#E5E5E5"> in VLC which you can see a</font>

319
00:11:57,580 --> 00:12:05,050
little screenshot here so after<font color="#E5E5E5"> finding</font>

320
00:12:01,930 --> 00:12:06,370
the encapsulated linear<font color="#E5E5E5"> video</font><font color="#CCCCCC"> I still</font>

321
00:12:05,050 --> 00:12:08,800
had no<font color="#CCCCCC"> clue what the majority of their</font>

322
00:12:06,370 --> 00:12:10,840
multicast<font color="#E5E5E5"> IPS were there was one</font>

323
00:12:08,800 --> 00:12:12,459
multicast IP on the same transponders

324
00:12:10,840 --> 00:12:16,840
NHL<font color="#E5E5E5"> center</font><font color="#CCCCCC"> ice that</font><font color="#E5E5E5"> took up most of the</font>

325
00:12:12,460 --> 00:12:18,340
bandwidth<font color="#E5E5E5"> the transponder so I'd learned</font>

326
00:12:16,840 --> 00:12:20,080
from the linear video that each

327
00:12:18,340 --> 00:12:22,480
multicast IP was used for<font color="#E5E5E5"> a single</font>

328
00:12:20,080 --> 00:12:24,430
<font color="#CCCCCC">program if you use the same technique of</font>

329
00:12:22,480 --> 00:12:26,080
saving the<font color="#E5E5E5"> UDP packets to the payload on</font>

330
00:12:24,430 --> 00:12:27,910
the unknown<font color="#E5E5E5"> IP and tried</font><font color="#CCCCCC"> to play them</font>

331
00:12:26,080 --> 00:12:29,350
<font color="#E5E5E5">back</font><font color="#CCCCCC"> every now and then VLC would</font>

332
00:12:27,910 --> 00:12:30,939
attempt to<font color="#E5E5E5"> render a picture start to</font>

333
00:12:29,350 --> 00:12:33,010
play a<font color="#E5E5E5"> short sample of audio and</font><font color="#CCCCCC"> you can</font>

334
00:12:30,940 --> 00:12:34,330
see a example<font color="#CCCCCC"> here</font><font color="#E5E5E5"> of how it would kind</font>

335
00:12:33,010 --> 00:12:36,550
of start<font color="#CCCCCC"> to render something</font><font color="#E5E5E5"> but you</font>

336
00:12:34,330 --> 00:12:38,140
wouldn't<font color="#E5E5E5"> really get</font><font color="#CCCCCC"> anything and I found</font>

337
00:12:36,550 --> 00:12:40,599
examples<font color="#E5E5E5"> of this type of behavior on</font>

338
00:12:38,140 --> 00:12:42,069
numerous satellites<font color="#E5E5E5"> if you examine the</font>

339
00:12:40,600 --> 00:12:43,960
UDP<font color="#CCCCCC"> payload you see all the tell-tale</font>

340
00:12:42,070 --> 00:12:45,880
signs<font color="#CCCCCC"> of the MPEG transport stream and</font>

341
00:12:43,960 --> 00:12:49,780
PS packets but I couldn't figure out how

342
00:12:45,880 --> 00:12:51,400
<font color="#E5E5E5">to extract</font><font color="#CCCCCC"> them so upon closer</font>

343
00:12:49,780 --> 00:12:53,110
examination it<font color="#CCCCCC"> was clear that</font><font color="#E5E5E5"> UDP</font>

344
00:12:51,400 --> 00:12:54,970
payloads had some sort of<font color="#E5E5E5"> header on them</font>

345
00:12:53,110 --> 00:12:57,210
so I wrote some software<font color="#E5E5E5"> to strip some</font>

346
00:12:54,970 --> 00:12:59,560
number<font color="#E5E5E5"> of bytes and save the UDP payload</font>

347
00:12:57,210 --> 00:13:01,420
<font color="#E5E5E5">using the same grep technique it wasn't</font>

348
00:12:59,560 --> 00:13:03,189
difficult<font color="#CCCCCC"> to determine</font><font color="#E5E5E5"> what what the</font>

349
00:13:01,420 --> 00:13:05,229
<font color="#CCCCCC">what was the header and what was the</font>

350
00:13:03,190 --> 00:13:06,370
payload I tried this<font color="#E5E5E5"> blend header</font>

351
00:13:05,230 --> 00:13:08,140
stripping technique on numerous

352
00:13:06,370 --> 00:13:09,250
transponders without much much luck

353
00:13:08,140 --> 00:13:11,050
until<font color="#E5E5E5"> I tried it on the</font><font color="#CCCCCC"> kayuu</font>

354
00:13:09,250 --> 00:13:13,690
transponder<font color="#CCCCCC"> that I had tucked away in my</font>

355
00:13:11,050 --> 00:13:15,130
notes on<font color="#E5E5E5"> this transponder I got lucky</font>

356
00:13:13,690 --> 00:13:16,990
<font color="#E5E5E5">and managed to get some playable video</font>

357
00:13:15,130 --> 00:13:18,710
<font color="#E5E5E5">although I was excited to finally get</font>

358
00:13:16,990 --> 00:13:21,950
video to play without<font color="#E5E5E5"> error</font>

359
00:13:18,710 --> 00:13:23,750
not to be an episode<font color="#CCCCCC"> of</font><font color="#E5E5E5"> dr.</font><font color="#CCCCCC"> Oz American</font>

360
00:13:21,950 --> 00:13:25,220
daytime program<font color="#E5E5E5"> wasn't exactly the</font><font color="#CCCCCC"> most</font>

361
00:13:23,750 --> 00:13:27,560
rewarding prize<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it was progress</font>

362
00:13:25,220 --> 00:13:29,090
nonetheless<font color="#E5E5E5"> still</font><font color="#CCCCCC"> wasn't sure my my</font>

363
00:13:27,560 --> 00:13:30,770
other attempts<font color="#E5E5E5"> previous attempts at</font>

364
00:13:29,090 --> 00:13:35,360
<font color="#E5E5E5">header stripping had not worked yet</font>

365
00:13:30,770 --> 00:13:36,920
on the<font color="#E5E5E5"> other transponders so by this</font>

366
00:13:35,360 --> 00:13:38,240
<font color="#E5E5E5">point I determined the header in</font><font color="#CCCCCC"> the</font>

367
00:13:36,920 --> 00:13:39,920
packet for<font color="#E5E5E5"> a fixed size with a few</font>

368
00:13:38,240 --> 00:13:41,480
<font color="#E5E5E5">exceptions</font><font color="#CCCCCC"> I started</font><font color="#E5E5E5"> looking at the</font>

369
00:13:39,920 --> 00:13:42,920
header more specifically to see if I

370
00:13:41,480 --> 00:13:44,750
<font color="#E5E5E5">could understand why I had not always</font>

371
00:13:42,920 --> 00:13:47,479
been<font color="#CCCCCC"> able to get some</font><font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of video</font><font color="#E5E5E5"> to</font>

372
00:13:44,750 --> 00:13:49,400
play much<font color="#CCCCCC"> like</font><font color="#E5E5E5"> before I</font><font color="#CCCCCC"> used evb</font><font color="#E5E5E5"> snoop</font>

373
00:13:47,480 --> 00:13:51,680
<font color="#E5E5E5">and grep to examine just the UDP packet</font>

374
00:13:49,400 --> 00:13:53,329
headers in<font color="#E5E5E5"> real time and looking at the</font>

375
00:13:51,680 --> 00:13:55,189
slide<font color="#CCCCCC"> you can see almost immediately the</font>

376
00:13:53,330 --> 00:13:57,050
<font color="#E5E5E5">debtors have some sort of</font><font color="#CCCCCC"> 32-bit</font><font color="#E5E5E5"> field</font>

377
00:13:55,190 --> 00:13:59,510
that is interleaved in red<font color="#E5E5E5"> bits in red</font>

378
00:13:57,050 --> 00:14:02,510
interleaved<font color="#E5E5E5"> at separate 32-bit counter</font>

379
00:13:59,510 --> 00:14:04,370
and blue in blue<font color="#CCCCCC"> as the number the</font>

380
00:14:02,510 --> 00:14:05,720
<font color="#CCCCCC">number would</font><font color="#E5E5E5"> increment in each packet I</font>

381
00:14:04,370 --> 00:14:09,170
don't know if you guys<font color="#CCCCCC"> can see I believe</font>

382
00:14:05,720 --> 00:14:10,430
<font color="#E5E5E5">that well but anyway so I started to</font>

383
00:14:09,170 --> 00:14:11,599
look<font color="#E5E5E5"> at the different transponders of my</font>

384
00:14:10,430 --> 00:14:13,130
notes<font color="#CCCCCC"> and I realized that</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> wasn't</font>

385
00:14:11,600 --> 00:14:14,600
dealing<font color="#E5E5E5"> with the same protocol or at</font>

386
00:14:13,130 --> 00:14:17,360
least the<font color="#E5E5E5"> same version of the protocol</font>

387
00:14:14,600 --> 00:14:19,190
<font color="#E5E5E5">and identify</font><font color="#CCCCCC"> I identified at least</font><font color="#E5E5E5"> five</font>

388
00:14:17,360 --> 00:14:21,470
different systems<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> almost</font>

389
00:14:19,190 --> 00:14:23,090
identical<font color="#E5E5E5"> in design very similar on a</font>

390
00:14:21,470 --> 00:14:26,900
technical level but differed nonetheless

391
00:14:23,090 --> 00:14:28,520
<font color="#CCCCCC">I started to focus</font><font color="#E5E5E5"> my efforts on the</font>

392
00:14:26,900 --> 00:14:30,470
high bandwidth<font color="#E5E5E5"> c-band transponder to</font>

393
00:14:28,520 --> 00:14:32,900
carry<font color="#E5E5E5"> NHL</font><font color="#CCCCCC"> center ices</font><font color="#E5E5E5"> I thought it might</font>

394
00:14:30,470 --> 00:14:34,460
yield the<font color="#E5E5E5"> most interesting results from</font>

395
00:14:32,900 --> 00:14:35,750
here on out<font color="#CCCCCC"> I mainly focused my effort</font>

396
00:14:34,460 --> 00:14:39,740
on this<font color="#E5E5E5"> transponder and the unknown</font>

397
00:14:35,750 --> 00:14:41,420
protocol was using so going back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

398
00:14:39,740 --> 00:14:43,220
side you can<font color="#CCCCCC"> see almost all</font><font color="#E5E5E5"> that all the</font>

399
00:14:41,420 --> 00:14:45,439
packets start with<font color="#E5E5E5"> two bytes zero zero</font>

400
00:14:43,220 --> 00:14:47,090
<font color="#E5E5E5">one</font><font color="#CCCCCC"> and I started to speculate that the</font>

401
00:14:45,440 --> 00:14:49,370
interleaved 32-bit field on the header

402
00:14:47,090 --> 00:14:50,900
with some sort of<font color="#CCCCCC"> transmission ID</font><font color="#E5E5E5"> so I</font>

403
00:14:49,370 --> 00:14:52,820
wrote some test code to start saving

404
00:14:50,900 --> 00:14:55,490
each transmission ID to a<font color="#E5E5E5"> unique file</font>

405
00:14:52,820 --> 00:14:56,930
<font color="#E5E5E5">and with this basic change I was</font><font color="#CCCCCC"> able to</font>

406
00:14:55,490 --> 00:14:58,370
<font color="#E5E5E5">render video from a much</font><font color="#CCCCCC"> larger</font>

407
00:14:56,930 --> 00:15:00,229
percentage<font color="#E5E5E5"> of the files and it became</font>

408
00:14:58,370 --> 00:15:01,850
<font color="#E5E5E5">clear why my header stripping previously</font>

409
00:15:00,230 --> 00:15:04,030
we saw<font color="#CCCCCC"> hit-or-miss</font><font color="#E5E5E5"> was that multiple</font>

410
00:15:01,850 --> 00:15:06,260
videos were<font color="#CCCCCC"> being sent at the</font><font color="#E5E5E5"> same time</font>

411
00:15:04,030 --> 00:15:07,760
so<font color="#E5E5E5"> I</font><font color="#CCCCCC"> examined</font><font color="#E5E5E5"> the files that I couldn't</font>

412
00:15:06,260 --> 00:15:09,470
play<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I looked at the packet headers</font>

413
00:15:07,760 --> 00:15:11,270
for clues almost all the transmissions

414
00:15:09,470 --> 00:15:12,980
are sent in a sequential order based on

415
00:15:11,270 --> 00:15:14,150
<font color="#E5E5E5">that counter but in the examples I</font>

416
00:15:12,980 --> 00:15:16,310
couldn't play<font color="#CCCCCC"> the counter wasn't in</font>

417
00:15:14,150 --> 00:15:17,959
sequential order<font color="#E5E5E5"> so I realized</font><font color="#CCCCCC"> this</font>

418
00:15:16,310 --> 00:15:19,729
<font color="#CCCCCC">counter was actually a block number</font><font color="#E5E5E5"> and</font>

419
00:15:17,960 --> 00:15:21,770
the transfer<font color="#E5E5E5"> ensured saving the payload</font>

420
00:15:19,730 --> 00:15:23,960
using the counter as a block<font color="#E5E5E5"> saving</font>

421
00:15:21,770 --> 00:15:26,360
saving<font color="#E5E5E5"> the payload using the counter as</font>

422
00:15:23,960 --> 00:15:27,800
a block as an offset<font color="#E5E5E5"> this cleaned up</font>

423
00:15:26,360 --> 00:15:30,520
almost<font color="#E5E5E5"> all the errors I was getting I</font>

424
00:15:27,800 --> 00:15:32,890
was<font color="#E5E5E5"> able to play back almost every file</font>

425
00:15:30,520 --> 00:15:34,569
so once I was<font color="#CCCCCC"> able to play the majority</font>

426
00:15:32,890 --> 00:15:35,949
of the files being transferred<font color="#E5E5E5"> I also</font>

427
00:15:34,570 --> 00:15:37,360
noticed the running time of<font color="#E5E5E5"> the videos</font>

428
00:15:35,950 --> 00:15:39,610
were significantly longer<font color="#CCCCCC"> than at the</font>

429
00:15:37,360 --> 00:15:40,839
time it took<font color="#CCCCCC"> to download</font><font color="#E5E5E5"> it was only</font>

430
00:15:39,610 --> 00:15:43,180
then that I realized<font color="#CCCCCC"> the files are meant</font>

431
00:15:40,839 --> 00:15:46,300
for playback in the future ie a content

432
00:15:43,180 --> 00:15:47,800
delivery system so being able to save

433
00:15:46,300 --> 00:15:49,930
the media files of the great achievement

434
00:15:47,800 --> 00:15:52,120
<font color="#E5E5E5">but</font><font color="#CCCCCC"> they left a lot to be desired</font><font color="#E5E5E5"> every</font>

435
00:15:49,930 --> 00:15:54,579
<font color="#E5E5E5">file was saved as a 32-bit</font><font color="#CCCCCC"> number and</font>

436
00:15:52,120 --> 00:15:56,320
the<font color="#E5E5E5"> only indication as to what content</font>

437
00:15:54,580 --> 00:15:58,000
was required me to required further

438
00:15:56,320 --> 00:16:00,870
examination which usually was me<font color="#E5E5E5"> trying</font>

439
00:15:58,000 --> 00:16:03,850
<font color="#E5E5E5">to play the file</font><font color="#CCCCCC"> on a media media player</font>

440
00:16:00,870 --> 00:16:05,350
so I'd also received the<font color="#CCCCCC"> files</font><font color="#E5E5E5"> numerous</font>

441
00:16:03,850 --> 00:16:09,310
times<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> no knowledge there was a</font>

442
00:16:05,350 --> 00:16:11,350
retransmission<font color="#CCCCCC"> I also noticed for the</font>

443
00:16:09,310 --> 00:16:13,060
<font color="#E5E5E5">first time at the end</font><font color="#CCCCCC"> of these files</font><font color="#E5E5E5"> the</font>

444
00:16:11,350 --> 00:16:14,260
end of<font color="#E5E5E5"> these files always contain some</font>

445
00:16:13,060 --> 00:16:15,910
seemingly random data

446
00:16:14,260 --> 00:16:17,290
<font color="#CCCCCC">I had a hunter with some sort of error</font>

447
00:16:15,910 --> 00:16:19,899
correction data but I had no way of

448
00:16:17,290 --> 00:16:21,969
<font color="#E5E5E5">proving it at the time seeing the split</font>

449
00:16:19,899 --> 00:16:23,560
between<font color="#E5E5E5"> the thing that split between the</font>

450
00:16:21,970 --> 00:16:25,089
file<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the texture extra data was</font>

451
00:16:23,560 --> 00:16:30,459
pretty<font color="#CCCCCC"> obvious the random</font><font color="#E5E5E5"> data always</font>

452
00:16:25,089 --> 00:16:31,779
started on a packet boundary so I knew

453
00:16:30,459 --> 00:16:33,579
there were other packets in<font color="#CCCCCC"> the stream</font>

454
00:16:31,779 --> 00:16:35,350
<font color="#E5E5E5">that I was nor ignoring and I assumed</font>

455
00:16:33,580 --> 00:16:37,000
they<font color="#CCCCCC"> had</font><font color="#E5E5E5"> they had they had to have some</font>

456
00:16:35,350 --> 00:16:39,190
sort<font color="#E5E5E5"> of control packets the receiving</font>

457
00:16:37,000 --> 00:16:40,839
stations had<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be aware</font><font color="#CCCCCC"> the files Noah</font>

458
00:16:39,190 --> 00:16:43,149
<font color="#CCCCCC">transmit know when the transmission</font>

459
00:16:40,839 --> 00:16:45,339
started<font color="#E5E5E5"> or ended I started logging all</font>

460
00:16:43,149 --> 00:16:46,570
the<font color="#CCCCCC"> non payload packets to a file</font><font color="#E5E5E5"> it</font>

461
00:16:45,339 --> 00:16:48,459
didn't take very long<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> it but</font>

462
00:16:46,570 --> 00:16:50,770
basic<font color="#CCCCCC"> understanding of the other types</font>

463
00:16:48,459 --> 00:16:54,279
all the packets<font color="#E5E5E5"> had the same eight byte</font>

464
00:16:50,770 --> 00:16:55,930
header<font color="#CCCCCC"> eight byte header</font><font color="#E5E5E5"> of a 16-bit</font>

465
00:16:54,279 --> 00:16:58,660
packet I have the 16-bit packet<font color="#E5E5E5"> length</font>

466
00:16:55,930 --> 00:17:00,670
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> 32 bit object</font><font color="#E5E5E5"> field after</font><font color="#CCCCCC"> this</font>

467
00:16:58,660 --> 00:17:02,740
all the packets differed but<font color="#E5E5E5"> since all</font>

468
00:17:00,670 --> 00:17:04,420
<font color="#E5E5E5">the packets</font><font color="#CCCCCC"> use the same object ID field</font>

469
00:17:02,740 --> 00:17:06,250
I started to look<font color="#E5E5E5"> at how other packets</font>

470
00:17:04,420 --> 00:17:08,980
correlated with the file I downloaded

471
00:17:06,250 --> 00:17:10,780
and see what I<font color="#E5E5E5"> could determine</font><font color="#CCCCCC"> the o3</font>

472
00:17:08,980 --> 00:17:13,150
was<font color="#E5E5E5"> the most prevalent packet and it was</font>

473
00:17:10,780 --> 00:17:14,379
the longest<font color="#CCCCCC"> of all of them</font><font color="#E5E5E5"> and a quick</font>

474
00:17:13,150 --> 00:17:16,209
<font color="#CCCCCC">glance she could see ASCII</font><font color="#E5E5E5"> strains</font>

475
00:17:14,380 --> 00:17:17,860
containing what seemed<font color="#E5E5E5"> to be quite</font>

476
00:17:16,209 --> 00:17:20,079
obviously<font color="#E5E5E5"> file names</font><font color="#CCCCCC"> I'll come back to</font>

477
00:17:17,859 --> 00:17:22,030
this in a minute<font color="#E5E5E5"> the other two packets</font>

478
00:17:20,079 --> 00:17:23,889
were the<font color="#E5E5E5"> O</font><font color="#CCCCCC"> 6 and the FS and they only</font>

479
00:17:22,030 --> 00:17:25,899
<font color="#E5E5E5">occurred</font><font color="#CCCCCC"> before and after a transmission</font>

480
00:17:23,890 --> 00:17:27,520
<font color="#E5E5E5">their bodies were really short anyways</font>

481
00:17:25,900 --> 00:17:29,200
it was<font color="#E5E5E5"> soon</font><font color="#CCCCCC"> clear that they were used to</font>

482
00:17:27,520 --> 00:17:30,400
<font color="#CCCCCC">indicate when a new object</font><font color="#E5E5E5"> ID was</font>

483
00:17:29,200 --> 00:17:34,750
starting in the stream or when it was

484
00:17:30,400 --> 00:17:36,760
<font color="#E5E5E5">being removed so that would three packet</font>

485
00:17:34,750 --> 00:17:37,929
like I said<font color="#CCCCCC"> I</font><font color="#E5E5E5"> come back to this</font><font color="#CCCCCC"> was the</font>

486
00:17:36,760 --> 00:17:39,520
one I was<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> for it clearly</font>

487
00:17:37,929 --> 00:17:40,900
contained the file name along with<font color="#CCCCCC"> some</font>

488
00:17:39,520 --> 00:17:41,440
other descriptive information about<font color="#E5E5E5"> the</font>

489
00:17:40,900 --> 00:17:43,240
file

490
00:17:41,440 --> 00:17:43,760
so<font color="#CCCCCC"> I started logging as many of these as</font>

491
00:17:43,240 --> 00:17:45,860
I could

492
00:17:43,760 --> 00:17:48,680
looking for patterns<font color="#CCCCCC"> the process I use</font>

493
00:17:45,860 --> 00:17:50,479
was pretty rudimentary I used them<font color="#E5E5E5"> and</font>

494
00:17:48,680 --> 00:17:52,400
looked at<font color="#E5E5E5"> packaged side-by-side I piped</font>

495
00:17:50,480 --> 00:17:55,070
<font color="#E5E5E5">and</font><font color="#CCCCCC"> grabbed packets with various filters</font>

496
00:17:52,400 --> 00:17:56,390
to see what pattern I could discern the

497
00:17:55,070 --> 00:17:58,010
first problem<font color="#E5E5E5"> was the location of the</font>

498
00:17:56,390 --> 00:18:00,140
ASCII file<font color="#E5E5E5"> name was not at a fixed</font>

499
00:17:58,010 --> 00:18:01,310
offset<font color="#E5E5E5"> into the packet this Monday I had</font>

500
00:18:00,140 --> 00:18:02,540
to<font color="#E5E5E5"> look more to have the packet</font><font color="#CCCCCC"> was</font>

501
00:18:01,310 --> 00:18:04,840
<font color="#E5E5E5">structured to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to program it</font>

502
00:18:02,540 --> 00:18:07,399
programmatically extract the<font color="#E5E5E5"> file name</font>

503
00:18:04,840 --> 00:18:09,530
so my goal was to<font color="#CCCCCC"> try to identify</font><font color="#E5E5E5"> as</font>

504
00:18:07,400 --> 00:18:11,090
<font color="#E5E5E5">many parts of the</font><font color="#CCCCCC"> o3 packet as possible</font>

505
00:18:09,530 --> 00:18:13,070
so<font color="#CCCCCC"> that I said that I could see what</font>

506
00:18:11,090 --> 00:18:14,780
remained<font color="#CCCCCC"> I assumed the packet was</font><font color="#E5E5E5"> made</font>

507
00:18:13,070 --> 00:18:16,310
up of<font color="#CCCCCC"> little</font><font color="#E5E5E5"> endian</font><font color="#CCCCCC"> 32-bit and</font>

508
00:18:14,780 --> 00:18:18,620
<font color="#E5E5E5">null-terminated strings that there were</font>

509
00:18:16,310 --> 00:18:20,929
since there were a lot of<font color="#E5E5E5"> zeros</font><font color="#CCCCCC"> I knew</font>

510
00:18:18,620 --> 00:18:22,969
the total payload<font color="#E5E5E5"> size including the</font>

511
00:18:20,930 --> 00:18:24,410
extra data at a good idea of<font color="#E5E5E5"> the file</font>

512
00:18:22,970 --> 00:18:26,210
size with a few hundred<font color="#CCCCCC"> bytes when the</font>

513
00:18:24,410 --> 00:18:28,760
extra data was removed<font color="#CCCCCC"> I also knew the</font>

514
00:18:26,210 --> 00:18:30,380
transmission block size I was<font color="#E5E5E5"> able to</font>

515
00:18:28,760 --> 00:18:33,140
clearly<font color="#E5E5E5"> see the final name in the packet</font>

516
00:18:30,380 --> 00:18:34,640
as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> so I found a date field that was</font>

517
00:18:33,140 --> 00:18:38,210
usually<font color="#CCCCCC"> within</font><font color="#E5E5E5"> the past week or so in</font>

518
00:18:34,640 --> 00:18:40,340
UNIX timestamp format so I may be

519
00:18:38,210 --> 00:18:41,810
<font color="#CCCCCC">showing</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> age my age</font><font color="#E5E5E5"> here a little bit</font>

520
00:18:40,340 --> 00:18:42,800
<font color="#E5E5E5">but I printed out hex dumps of a couple</font>

521
00:18:41,810 --> 00:18:47,720
of three packets for<font color="#E5E5E5"> all these</font>

522
00:18:42,800 --> 00:18:49,550
<font color="#E5E5E5">properties look I may</font><font color="#CCCCCC"> be showing</font><font color="#E5E5E5"> my age</font>

523
00:18:47,720 --> 00:18:51,380
<font color="#E5E5E5">but I printed out hex dumps of a couple</font>

524
00:18:49,550 --> 00:18:52,730
<font color="#CCCCCC">oh three packets four files</font><font color="#E5E5E5"> I knew all</font>

525
00:18:51,380 --> 00:18:53,500
<font color="#E5E5E5">these properties I've been highlight</font><font color="#CCCCCC"> on</font>

526
00:18:52,730 --> 00:18:56,810
them

527
00:18:53,500 --> 00:18:58,130
so once<font color="#E5E5E5"> I've marked off all these areas</font>

528
00:18:56,810 --> 00:18:59,560
it was obvious that the<font color="#CCCCCC"> fields I was</font>

529
00:18:58,130 --> 00:19:01,610
interested were all clustered together

530
00:18:59,560 --> 00:19:02,810
<font color="#CCCCCC">you may not be able</font><font color="#E5E5E5"> to see it clearly</font>

531
00:19:01,610 --> 00:19:04,669
here<font color="#E5E5E5"> in the photo but there was always</font>

532
00:19:02,810 --> 00:19:07,280
there<font color="#E5E5E5"> was always a 32-bit</font><font color="#CCCCCC"> little-endian</font>

533
00:19:04,670 --> 00:19:09,350
<font color="#CCCCCC">Oh - right</font><font color="#E5E5E5"> above the transmission block</font>

534
00:19:07,280 --> 00:19:12,500
size which is<font color="#E5E5E5"> highlighted in yellow on</font>

535
00:19:09,350 --> 00:19:14,030
there it was followed<font color="#E5E5E5"> by a 32-bit</font>

536
00:19:12,500 --> 00:19:16,100
<font color="#E5E5E5">little-endian length that correlated</font>

537
00:19:14,030 --> 00:19:18,139
with<font color="#E5E5E5"> 13 bytes</font><font color="#CCCCCC"> after the</font><font color="#E5E5E5"> file name which</font>

538
00:19:16,100 --> 00:19:19,639
was usually<font color="#CCCCCC"> the end of the packet based</font>

539
00:19:18,140 --> 00:19:21,230
<font color="#E5E5E5">on this knowledge and a little bit more</font>

540
00:19:19,640 --> 00:19:22,400
human pattern recognition<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> able to</font>

541
00:19:21,230 --> 00:19:25,280
<font color="#E5E5E5">make a parser</font><font color="#CCCCCC"> that was</font><font color="#E5E5E5"> token-based</font>

542
00:19:22,400 --> 00:19:27,050
<font color="#E5E5E5">starting 24 bytes into the packet now</font>

543
00:19:25,280 --> 00:19:28,940
this had some major<font color="#E5E5E5"> flaws and we crash</font>

544
00:19:27,050 --> 00:19:31,340
fairly often<font color="#E5E5E5"> as I didn't know nearly</font>

545
00:19:28,940 --> 00:19:33,590
<font color="#E5E5E5">enough</font><font color="#CCCCCC"> about the format but regardless</font><font color="#E5E5E5"> I</font>

546
00:19:31,340 --> 00:19:35,570
was able<font color="#E5E5E5"> to properly save the</font><font color="#CCCCCC"> file files</font>

547
00:19:33,590 --> 00:19:37,310
with the<font color="#E5E5E5"> correct file names</font><font color="#CCCCCC"> I had some</font>

548
00:19:35,570 --> 00:19:38,899
<font color="#CCCCCC">bounce</font><font color="#E5E5E5"> checking in my parser to stop seg</font>

549
00:19:37,310 --> 00:19:40,669
faulting<font color="#E5E5E5"> and I logged the errors and</font>

550
00:19:38,900 --> 00:19:41,990
whenever<font color="#E5E5E5"> I would miss parson</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> three</font>

551
00:19:40,670 --> 00:19:44,060
packet I would compare<font color="#CCCCCC"> the</font><font color="#E5E5E5"> packet the</font>

552
00:19:41,990 --> 00:19:45,530
crash to what I was expecting<font color="#CCCCCC"> and this</font>

553
00:19:44,060 --> 00:19:47,389
process continued on and off for<font color="#E5E5E5"> a year</font>

554
00:19:45,530 --> 00:19:50,000
<font color="#E5E5E5">- until the parser stop running into</font>

555
00:19:47,390 --> 00:19:51,590
errors I'm sure my parser routine is in

556
00:19:50,000 --> 00:19:53,060
the facsimile of the real<font color="#E5E5E5"> software but</font>

557
00:19:51,590 --> 00:19:55,120
it's been<font color="#E5E5E5"> stable for four to</font><font color="#CCCCCC"> five years</font>

558
00:19:53,060 --> 00:19:55,120
now

559
00:19:55,179 --> 00:19:59,169
so the two big<font color="#E5E5E5"> problems at this point</font>

560
00:19:57,669 --> 00:20:01,119
we're dealing<font color="#CCCCCC"> with the volume</font><font color="#E5E5E5"> and speed</font>

561
00:19:59,169 --> 00:20:03,279
of the transmissions<font color="#CCCCCC"> the big</font><font color="#E5E5E5"> video</font>

562
00:20:01,119 --> 00:20:05,709
<font color="#E5E5E5">on-demand system had two transponders</font>

563
00:20:03,279 --> 00:20:07,659
<font color="#CCCCCC">that combined were a constant 150</font>

564
00:20:05,710 --> 00:20:09,190
megabits<font color="#E5E5E5"> stream</font><font color="#CCCCCC"> I could fill up a two</font>

565
00:20:07,659 --> 00:20:11,229
terabyte<font color="#CCCCCC"> hard drive it's less than</font><font color="#E5E5E5"> two</font>

566
00:20:09,190 --> 00:20:12,759
days and most<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> content I was</font>

567
00:20:11,229 --> 00:20:15,549
collecting<font color="#CCCCCC"> I had a little</font><font color="#E5E5E5"> no interest in</font>

568
00:20:12,759 --> 00:20:16,899
<font color="#E5E5E5">watching and but I was</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> filter</font>

569
00:20:15,549 --> 00:20:19,029
<font color="#E5E5E5">out some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the content based on file</font>

570
00:20:16,899 --> 00:20:20,529
<font color="#E5E5E5">names wasn't an ideal solution and</font>

571
00:20:19,029 --> 00:20:23,259
required me<font color="#E5E5E5"> to manually clean up the</font>

572
00:20:20,529 --> 00:20:24,580
hard drives every few days<font color="#CCCCCC"> but over the</font>

573
00:20:23,259 --> 00:20:26,830
over<font color="#E5E5E5"> the course</font><font color="#CCCCCC"> of a month</font><font color="#E5E5E5"> over the</font>

574
00:20:24,580 --> 00:20:29,049
course of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> month I set up to a</font><font color="#E5E5E5"> set up a</font>

575
00:20:26,830 --> 00:20:31,478
<font color="#CCCCCC">10 terabyte array of</font><font color="#E5E5E5"> 2 terabyte drives I</font>

576
00:20:29,049 --> 00:20:33,399
never<font color="#E5E5E5"> fully addressed the file volume of</font>

577
00:20:31,479 --> 00:20:35,049
the file problem programmatically but

578
00:20:33,399 --> 00:20:36,580
<font color="#CCCCCC">would</font><font color="#E5E5E5"> some string matching I was able to</font>

579
00:20:35,049 --> 00:20:38,918
reject a large enough portion I could

580
00:20:36,580 --> 00:20:41,739
sort through the files once a<font color="#E5E5E5"> month or</font>

581
00:20:38,919 --> 00:20:43,539
so the overall<font color="#E5E5E5"> bitrate was the most</font>

582
00:20:41,739 --> 00:20:45,879
<font color="#E5E5E5">difficult problem tackle this is by far</font>

583
00:20:43,539 --> 00:20:48,158
the<font color="#E5E5E5"> most I</font><font color="#CCCCCC"> abandon I'd ever worked</font><font color="#E5E5E5"> with</font>

584
00:20:45,879 --> 00:20:49,599
<font color="#E5E5E5">the transmissions the transmissions were</font>

585
00:20:48,159 --> 00:20:51,339
constant so I<font color="#E5E5E5"> needed to be able</font><font color="#CCCCCC"> to write</font>

586
00:20:49,599 --> 00:20:52,479
data at least<font color="#E5E5E5"> as fast as a bit rate</font>

587
00:20:51,339 --> 00:20:54,759
because no<font color="#E5E5E5"> amount of buffering would</font>

588
00:20:52,479 --> 00:20:57,159
help<font color="#E5E5E5"> the 10 terabyte array was more than</font>

589
00:20:54,759 --> 00:20:58,599
adequate<font color="#CCCCCC"> to keep up with data rate if I</font>

590
00:20:57,159 --> 00:21:00,369
<font color="#E5E5E5">totally left it alone but doing other</font>

591
00:20:58,599 --> 00:21:04,330
but when doing other operations on the

592
00:21:00,369 --> 00:21:06,759
<font color="#CCCCCC">disk</font><font color="#E5E5E5"> of run there's a problems so the</font>

593
00:21:04,330 --> 00:21:08,289
first thing I<font color="#E5E5E5"> tried to deal with the</font>

594
00:21:06,759 --> 00:21:09,909
first thing I<font color="#E5E5E5"> tried to deal with</font><font color="#CCCCCC"> was to</font>

595
00:21:08,289 --> 00:21:12,820
increase the<font color="#E5E5E5"> buffering on the DVD driver</font>

596
00:21:09,909 --> 00:21:14,739
<font color="#CCCCCC">I tried using</font><font color="#E5E5E5"> a buffer as big as 64</font>

597
00:21:12,820 --> 00:21:16,658
megabytes but<font color="#E5E5E5"> that only covered about</font><font color="#CCCCCC"> 7</font>

598
00:21:14,739 --> 00:21:18,249
seconds<font color="#CCCCCC"> the value had been using before</font>

599
00:21:16,659 --> 00:21:19,690
<font color="#E5E5E5">was 4 to 8 Meg's so it was an</font>

600
00:21:18,249 --> 00:21:21,219
<font color="#E5E5E5">improvement but it alone didn't</font>

601
00:21:19,690 --> 00:21:22,869
eliminate the problem I can't

602
00:21:21,219 --> 00:21:24,190
quantitatively say how<font color="#E5E5E5"> much it helped</font>

603
00:21:22,869 --> 00:21:27,158
but<font color="#E5E5E5"> I still ran into problems very</font>

604
00:21:24,190 --> 00:21:29,019
consistently so from watching the hard

605
00:21:27,159 --> 00:21:30,849
drive light was clear the data that was

606
00:21:29,019 --> 00:21:32,619
being<font color="#E5E5E5"> written did it was being written</font>

607
00:21:30,849 --> 00:21:34,989
to disk in quick bursts of a second and

608
00:21:32,619 --> 00:21:37,029
<font color="#E5E5E5">then a pause for a few seconds</font><font color="#CCCCCC"> I started</font>

609
00:21:34,989 --> 00:21:39,119
to look<font color="#E5E5E5"> at the disk using vmstat and you</font>

610
00:21:37,029 --> 00:21:41,259
could you could also see the burstiness

611
00:21:39,119 --> 00:21:43,330
and you can see that here in the slide

612
00:21:41,259 --> 00:21:45,099
on the<font color="#CCCCCC"> top to</font><font color="#E5E5E5"> the blocks out field there</font>

613
00:21:43,330 --> 00:21:49,269
<font color="#E5E5E5">in red you can see</font><font color="#CCCCCC"> it's writing nothing</font>

614
00:21:45,099 --> 00:21:51,218
and then writing<font color="#CCCCCC"> 4845 45,000 144 and</font>

615
00:21:49,269 --> 00:21:53,440
then<font color="#E5E5E5"> nothing and I'll explain in a</font>

616
00:21:51,219 --> 00:21:55,509
second so I did some<font color="#CCCCCC"> research and found</font>

617
00:21:53,440 --> 00:21:56,799
<font color="#E5E5E5">the kernel settings with a control how</font>

618
00:21:55,509 --> 00:21:59,289
much I know data is cached in memory

619
00:21:56,799 --> 00:22:01,330
until it's flush to disk there's a pair

620
00:21:59,289 --> 00:22:03,249
of settings in the kernel<font color="#CCCCCC"> VM dirty</font>

621
00:22:01,330 --> 00:22:06,810
background bytes and<font color="#E5E5E5"> VM dirty background</font>

622
00:22:03,249 --> 00:22:09,130
ratio and what<font color="#E5E5E5"> these</font><font color="#CCCCCC"> settings</font><font color="#E5E5E5"> do</font>

623
00:22:06,810 --> 00:22:10,929
what this setting does is either<font color="#E5E5E5"> it sets</font>

624
00:22:09,130 --> 00:22:12,430
a<font color="#E5E5E5"> byte limiter or ratio to the amount of</font>

625
00:22:10,930 --> 00:22:15,130
data<font color="#E5E5E5"> being held and I know cash before</font>

626
00:22:12,430 --> 00:22:16,810
<font color="#CCCCCC">flushing it to disk</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> box</font><font color="#E5E5E5"> I was using</font>

627
00:22:15,130 --> 00:22:19,420
<font color="#E5E5E5">had</font><font color="#CCCCCC"> 8 gigs of RAM</font><font color="#E5E5E5"> the default setting</font>

628
00:22:16,810 --> 00:22:21,010
for<font color="#CCCCCC"> the kernel I was using</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> 10% this</font>

629
00:22:19,420 --> 00:22:22,690
box<font color="#CCCCCC"> wasn't using that much</font><font color="#E5E5E5"> RAM for</font>

630
00:22:21,010 --> 00:22:26,470
application<font color="#CCCCCC"> to be conservative four</font><font color="#E5E5E5"> gigs</font>

631
00:22:22,690 --> 00:22:28,090
are being used<font color="#CCCCCC"> in</font><font color="#E5E5E5"> I know</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> four</font>

632
00:22:26,470 --> 00:22:29,500
gigs are being used for<font color="#E5E5E5"> I know caching a</font>

633
00:22:28,090 --> 00:22:30,939
<font color="#E5E5E5">right wouldn't</font><font color="#CCCCCC"> get flush to disk</font><font color="#E5E5E5"> until</font>

634
00:22:29,500 --> 00:22:33,070
approximately<font color="#CCCCCC"> forwarded</font><font color="#E5E5E5"> four hundred</font>

635
00:22:30,940 --> 00:22:35,470
Meg's needed to be flushed 150 megabytes

636
00:22:33,070 --> 00:22:37,389
a rough estimate we take<font color="#E5E5E5"> around 20</font>

637
00:22:35,470 --> 00:22:38,770
<font color="#E5E5E5">seconds to add foreigner Meg's to the</font>

638
00:22:37,390 --> 00:22:39,910
buffer<font color="#E5E5E5"> the problem with the buffers</font>

639
00:22:38,770 --> 00:22:41,470
would still be filling while the data

640
00:22:39,910 --> 00:22:44,620
was written now so that's why<font color="#CCCCCC"> the bursts</font>

641
00:22:41,470 --> 00:22:46,870
<font color="#E5E5E5">are so much closely spaced the real</font>

642
00:22:44,620 --> 00:22:49,479
problem can be seen in the<font color="#CCCCCC"> the upper</font><font color="#E5E5E5"> VM</font>

643
00:22:46,870 --> 00:22:51,040
stats<font color="#E5E5E5"> W a field this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the percentage</font>

644
00:22:49,480 --> 00:22:53,650
<font color="#E5E5E5">of</font><font color="#CCCCCC"> time that the i/o operations are</font>

645
00:22:51,040 --> 00:22:54,970
suspended<font color="#CCCCCC"> and</font><font color="#E5E5E5"> where buffer buffer under</font>

646
00:22:53,650 --> 00:22:56,650
ends<font color="#E5E5E5"> could occur if everything in my</font>

647
00:22:54,970 --> 00:22:58,180
application<font color="#E5E5E5"> had to stop and wait so</font>

648
00:22:56,650 --> 00:23:00,460
basically that<font color="#CCCCCC"> means</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> everything's</font>

649
00:22:58,180 --> 00:23:02,920
<font color="#E5E5E5">waiting</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> io2 happens to seven</font>

650
00:23:00,460 --> 00:23:06,460
that<font color="#E5E5E5"> last row right</font><font color="#CCCCCC"> there with the</font>

651
00:23:02,920 --> 00:23:10,450
yellow so 17<font color="#E5E5E5"> percent of that one second</font>

652
00:23:06,460 --> 00:23:12,280
everything is<font color="#E5E5E5"> just paused so to stop</font>

653
00:23:10,450 --> 00:23:14,350
this behavior I changed the<font color="#CCCCCC"> VM dirty</font>

654
00:23:12,280 --> 00:23:15,700
background ratio bytes to<font color="#E5E5E5"> zero which</font>

655
00:23:14,350 --> 00:23:18,189
meant that<font color="#E5E5E5"> the data was written to disk</font>

656
00:23:15,700 --> 00:23:20,110
as soon as it expired this<font color="#E5E5E5"> immediately</font>

657
00:23:18,190 --> 00:23:21,670
changed the disk access behavior to be

658
00:23:20,110 --> 00:23:23,860
much smoother and<font color="#CCCCCC"> data was written now</font>

659
00:23:21,670 --> 00:23:27,190
as it was received continuously instead

660
00:23:23,860 --> 00:23:29,199
of being so<font color="#E5E5E5"> bursting it also it also</font>

661
00:23:27,190 --> 00:23:30,840
meant also<font color="#CCCCCC"> meant the potential spikes in</font>

662
00:23:29,200 --> 00:23:33,340
i/o blocking were reduced significantly

663
00:23:30,840 --> 00:23:36,399
<font color="#CCCCCC">so you can see</font><font color="#E5E5E5"> this improvement in the</font>

664
00:23:33,340 --> 00:23:37,899
lower<font color="#E5E5E5"> VM lower vmstat output and you can</font>

665
00:23:36,400 --> 00:23:39,540
just see it's like writing a consistent

666
00:23:37,900 --> 00:23:42,850
<font color="#CCCCCC">8,000 in each sample</font>

667
00:23:39,540 --> 00:23:44,379
so after tweaking the<font color="#CCCCCC"> VM dirty settings</font>

668
00:23:42,850 --> 00:23:46,689
my client was<font color="#CCCCCC"> able to write data</font>

669
00:23:44,380 --> 00:23:48,040
reasonably well but<font color="#CCCCCC"> I</font><font color="#E5E5E5"> still in the I</font>

670
00:23:46,690 --> 00:23:50,200
still ran into<font color="#CCCCCC"> problems doing</font><font color="#E5E5E5"> other</font>

671
00:23:48,040 --> 00:23:52,990
<font color="#CCCCCC">filesystem manipulations</font><font color="#E5E5E5"> and very very</font>

672
00:23:50,200 --> 00:23:54,550
specifically deleting a file up<font color="#E5E5E5"> into up</font>

673
00:23:52,990 --> 00:23:56,740
until this<font color="#CCCCCC"> point I was just using</font><font color="#E5E5E5"> the</font>

674
00:23:54,550 --> 00:23:58,690
ext4<font color="#CCCCCC"> filesystem</font><font color="#E5E5E5"> that is the default with</font>

675
00:23:56,740 --> 00:24:00,520
Linux<font color="#CCCCCC"> I never had any reason to</font><font color="#E5E5E5"> use</font>

676
00:23:58,690 --> 00:24:02,740
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> else as it met my needs</font><font color="#CCCCCC"> I</font>

677
00:24:00,520 --> 00:24:06,460
started<font color="#E5E5E5"> researching file deletion times</font>

678
00:24:02,740 --> 00:24:08,080
in the larger<font color="#E5E5E5"> and the larger file is in</font>

679
00:24:06,460 --> 00:24:09,880
<font color="#E5E5E5">the ext for the longer it would take to</font>

680
00:24:08,080 --> 00:24:12,100
delete<font color="#E5E5E5"> due to inodes being fragmented</font>

681
00:24:09,880 --> 00:24:13,720
<font color="#CCCCCC">I did some work on mythtv years before</font>

682
00:24:12,100 --> 00:24:15,550
and I<font color="#CCCCCC"> remember the</font><font color="#E5E5E5"> hardcore users</font>

683
00:24:13,720 --> 00:24:16,600
recommended<font color="#E5E5E5"> something other than</font><font color="#CCCCCC"> ext4</font>

684
00:24:15,550 --> 00:24:18,790
<font color="#CCCCCC">but</font><font color="#E5E5E5"> I couldn't remember</font>

685
00:24:16,600 --> 00:24:21,490
why it turns out that the long deletion

686
00:24:18,790 --> 00:24:23,620
times<font color="#E5E5E5"> were causing the</font><font color="#CCCCCC"> IH</font><font color="#E5E5E5"> I it turns</font><font color="#CCCCCC"> out</font>

687
00:24:21,490 --> 00:24:26,020
it was long deletion times causing IH I

688
00:24:23,620 --> 00:24:27,310
<font color="#CCCCCC">Oh issues</font><font color="#E5E5E5"> did a little bit more</font><font color="#CCCCCC"> research</font>

689
00:24:26,020 --> 00:24:29,350
<font color="#CCCCCC">and I started trying</font><font color="#E5E5E5"> various file</font>

690
00:24:27,310 --> 00:24:31,690
systems<font color="#E5E5E5"> I ended up setting settling on</font>

691
00:24:29,350 --> 00:24:33,610
<font color="#CCCCCC">XF s two main</font><font color="#E5E5E5"> reasons</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> that you can</font>

692
00:24:31,690 --> 00:24:35,440
control how large a block of the<font color="#E5E5E5"> disk</font>

693
00:24:33,610 --> 00:24:37,120
<font color="#E5E5E5">was allocated at a time and the file</font>

694
00:24:35,440 --> 00:24:38,680
deletion time was always<font color="#E5E5E5"> fractions of a</font>

695
00:24:37,120 --> 00:24:41,080
second regardless of how large<font color="#E5E5E5"> the file</font>

696
00:24:38,680 --> 00:24:42,490
was the large block allocation was also

697
00:24:41,080 --> 00:24:45,250
very<font color="#CCCCCC"> useful</font><font color="#E5E5E5"> since almost</font><font color="#CCCCCC"> every file</font>

698
00:24:42,490 --> 00:24:47,860
downloaded with multiple gigs<font color="#CCCCCC"> I set</font><font color="#E5E5E5"> that</font>

699
00:24:45,250 --> 00:24:49,450
value<font color="#E5E5E5"> to one gig and there's some</font><font color="#CCCCCC"> XFS</font>

700
00:24:47,860 --> 00:24:51,610
<font color="#E5E5E5">tools to see how</font><font color="#CCCCCC"> many non contiguous</font>

701
00:24:49,450 --> 00:24:53,290
blocks<font color="#CCCCCC"> of file takes up and with 1 gig</font>

702
00:24:51,610 --> 00:24:55,240
setting even<font color="#E5E5E5"> for really large files in</font>

703
00:24:53,290 --> 00:24:58,500
the order of<font color="#E5E5E5"> 20 order of 20 gigs or more</font>

704
00:24:55,240 --> 00:25:01,660
<font color="#CCCCCC">it'd still be split up into a few</font><font color="#E5E5E5"> pieces</font>

705
00:24:58,500 --> 00:25:03,730
so by this<font color="#E5E5E5"> point I was</font><font color="#CCCCCC"> able stored just</font>

706
00:25:01,660 --> 00:25:06,010
<font color="#CCCCCC">about every media file</font><font color="#E5E5E5"> from the video on</font>

707
00:25:03,730 --> 00:25:07,060
<font color="#E5E5E5">demand distribution system but I still</font>

708
00:25:06,010 --> 00:25:09,190
had problems<font color="#CCCCCC"> here and there</font><font color="#E5E5E5"> due to</font>

709
00:25:07,060 --> 00:25:11,110
reception<font color="#CCCCCC"> problems</font><font color="#E5E5E5"> and but overall I was</font>

710
00:25:09,190 --> 00:25:13,930
<font color="#E5E5E5">able to complete 95 percent or more of</font>

711
00:25:11,110 --> 00:25:21,310
the files and and buffer overruns<font color="#E5E5E5"> due to</font>

712
00:25:13,930 --> 00:25:22,780
<font color="#CCCCCC">i/o or a thing in the past so although</font>

713
00:25:21,310 --> 00:25:24,490
<font color="#E5E5E5">it was quite quite pleased with being</font>

714
00:25:22,780 --> 00:25:26,020
able to store<font color="#E5E5E5"> and organize the files due</font>

715
00:25:24,490 --> 00:25:28,540
to the<font color="#E5E5E5"> nature of</font><font color="#CCCCCC"> so idle due</font><font color="#E5E5E5"> to the</font>

716
00:25:26,020 --> 00:25:30,370
nature<font color="#CCCCCC"> of satellite transmission I would</font>

717
00:25:28,540 --> 00:25:31,720
quite regularly<font color="#E5E5E5"> be missing a few packets</font>

718
00:25:30,370 --> 00:25:33,489
from transmissions<font color="#E5E5E5"> it was quite</font>

719
00:25:31,720 --> 00:25:36,070
<font color="#CCCCCC">frustrating to</font><font color="#E5E5E5"> be missing</font><font color="#CCCCCC"> 1 to 2 packets</font>

720
00:25:33,490 --> 00:25:37,960
from a 20 gig<font color="#E5E5E5"> moving so eventually I</font>

721
00:25:36,070 --> 00:25:41,080
<font color="#E5E5E5">decided that I</font><font color="#CCCCCC"> should take I shouldn't I</font>

722
00:25:37,960 --> 00:25:42,280
<font color="#E5E5E5">should take a look at the</font><font color="#CCCCCC"> FEC up until</font>

723
00:25:41,080 --> 00:25:44,110
that<font color="#E5E5E5"> point it didn't understand much</font>

724
00:25:42,280 --> 00:25:46,030
about<font color="#E5E5E5"> FEC aside from that a high level</font>

725
00:25:44,110 --> 00:25:49,870
<font color="#CCCCCC">of provided data protections using some</font>

726
00:25:46,030 --> 00:25:51,550
fancy<font color="#CCCCCC"> map that and understand at some</font>

727
00:25:49,870 --> 00:25:53,050
point I found<font color="#CCCCCC"> a vendor</font><font color="#E5E5E5"> I found the</font>

728
00:25:51,550 --> 00:25:56,889
vendors website<font color="#E5E5E5"> and mentioned using a</font>

729
00:25:53,050 --> 00:25:58,540
proprietary<font color="#E5E5E5"> FEC method so I started to</font>

730
00:25:56,890 --> 00:26:00,090
do<font color="#CCCCCC"> some research into FEC and I started</font>

731
00:25:58,540 --> 00:26:02,290
<font color="#E5E5E5">looking at the files I was</font><font color="#CCCCCC"> downloading</font>

732
00:26:00,090 --> 00:26:05,020
for<font color="#E5E5E5"> any clues on how I could use</font><font color="#CCCCCC"> to</font>

733
00:26:02,290 --> 00:26:07,840
<font color="#CCCCCC">focus my energy</font><font color="#E5E5E5"> I knew the FEC data</font>

734
00:26:05,020 --> 00:26:09,940
always<font color="#E5E5E5"> fit exactly into the packets and</font>

735
00:26:07,840 --> 00:26:12,189
I knew and I<font color="#CCCCCC"> knew there</font><font color="#E5E5E5"> was no padding</font>

736
00:26:09,940 --> 00:26:15,250
<font color="#CCCCCC">there's no padding on the FEC data like</font>

737
00:26:12,190 --> 00:26:16,900
there was on the<font color="#CCCCCC"> actual file so this led</font>

738
00:26:15,250 --> 00:26:19,360
me<font color="#E5E5E5"> to believe</font><font color="#CCCCCC"> that it was block</font><font color="#E5E5E5"> based I</font>

739
00:26:16,900 --> 00:26:21,040
also noticed the ratio of FEC data had a

740
00:26:19,360 --> 00:26:23,350
close correlation to the file being

741
00:26:21,040 --> 00:26:25,320
transmitted<font color="#CCCCCC"> I started examining</font><font color="#E5E5E5"> other</font>

742
00:26:23,350 --> 00:26:27,850
systems that used the<font color="#E5E5E5"> same protocol</font><font color="#CCCCCC"> I</font>

743
00:26:25,320 --> 00:26:30,100
noticed this ratio differed a little on

744
00:26:27,850 --> 00:26:32,799
different<font color="#E5E5E5"> systems c-band tended to use</font>

745
00:26:30,100 --> 00:26:34,480
redundancy than<font color="#CCCCCC"> kayuu this mostly this</font>

746
00:26:32,799 --> 00:26:35,980
most likely<font color="#CCCCCC"> is because</font><font color="#E5E5E5"> c-band is less</font>

747
00:26:34,480 --> 00:26:40,299
sensitive<font color="#CCCCCC"> to interference and signal</font>

748
00:26:35,980 --> 00:26:41,679
loss than<font color="#CCCCCC"> kayuu band</font><font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of the one</font>

749
00:26:40,299 --> 00:26:43,929
of<font color="#E5E5E5"> the more important observations that</font>

750
00:26:41,679 --> 00:26:45,880
<font color="#E5E5E5">I happen to</font><font color="#CCCCCC"> notice is a single</font><font color="#E5E5E5"> tree a</font>

751
00:26:43,929 --> 00:26:48,640
single packet transmissions FEC was an

752
00:26:45,880 --> 00:26:50,530
exact<font color="#CCCCCC"> copy of the payload</font><font color="#E5E5E5"> so this slide</font>

753
00:26:48,640 --> 00:26:53,049
<font color="#CCCCCC">is an example</font><font color="#E5E5E5"> of a 2 packet file that</font>

754
00:26:50,530 --> 00:26:55,720
was<font color="#CCCCCC"> 2,600 total bytes you could see the</font>

755
00:26:53,049 --> 00:26:59,289
contents<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the same at byte 0</font><font color="#E5E5E5"> and</font>

756
00:26:55,720 --> 00:27:01,150
invite<font color="#CCCCCC"> 1,300 and up until this point</font><font color="#E5E5E5"> I</font>

757
00:26:59,289 --> 00:27:03,220
was mostly<font color="#E5E5E5"> I was mostly overwhelmed with</font>

758
00:27:01,150 --> 00:27:04,990
attempting attempting to know where to

759
00:27:03,220 --> 00:27:08,049
<font color="#CCCCCC">start because</font><font color="#E5E5E5"> I'd focus my energy on the</font>

760
00:27:04,990 --> 00:27:09,730
large files for some reason<font color="#E5E5E5"> so I started</font>

761
00:27:08,049 --> 00:27:10,900
examining examining the smaller

762
00:27:09,730 --> 00:27:14,020
transmissions<font color="#E5E5E5"> and started collecting</font>

763
00:27:10,900 --> 00:27:16,000
<font color="#E5E5E5">samples of 2 3</font><font color="#CCCCCC"> and 4 packet transfers at</font>

764
00:27:14,020 --> 00:27:18,010
some point<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> my research</font><font color="#CCCCCC"> that done</font>

765
00:27:16,000 --> 00:27:19,360
it at some<font color="#E5E5E5"> point during my research I've</font>

766
00:27:18,010 --> 00:27:21,280
done<font color="#E5E5E5"> patent searches and come across</font>

767
00:27:19,360 --> 00:27:22,750
some potentially useful FEC schemes but

768
00:27:21,280 --> 00:27:24,370
hadn't been<font color="#E5E5E5"> able to make sense of them I</font>

769
00:27:22,750 --> 00:27:25,690
eventually went back to these patent

770
00:27:24,370 --> 00:27:28,299
documents and started trying<font color="#E5E5E5"> to piece</font>

771
00:27:25,690 --> 00:27:29,740
together<font color="#E5E5E5"> how it all worked it was this</font>

772
00:27:28,299 --> 00:27:31,059
mundane patent search that actually

773
00:27:29,740 --> 00:27:32,830
proved to be the big breakthrough I

774
00:27:31,059 --> 00:27:36,030
needed<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just didn't know the answer was</font>

775
00:27:32,830 --> 00:27:38,379
sitting<font color="#CCCCCC"> under my nose</font><font color="#E5E5E5"> the whole</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> so</font>

776
00:27:36,030 --> 00:27:41,049
<font color="#CCCCCC">from this point</font><font color="#E5E5E5"> on I</font><font color="#CCCCCC"> started researching</font>

777
00:27:38,380 --> 00:27:42,429
all the<font color="#E5E5E5"> math mentioned mentioned in the</font>

778
00:27:41,049 --> 00:27:44,889
patents and<font color="#E5E5E5"> trying to remember how</font>

779
00:27:42,429 --> 00:27:46,840
matrix math worked<font color="#CCCCCC"> I had to learn all</font>

780
00:27:44,890 --> 00:27:48,659
<font color="#CCCCCC">about finite field Matt finite field</font>

781
00:27:46,840 --> 00:27:51,039
<font color="#CCCCCC">math galloway fields and matrix math</font>

782
00:27:48,659 --> 00:27:52,570
<font color="#E5E5E5">over the course of the over the course</font>

783
00:27:51,039 --> 00:27:54,370
of<font color="#E5E5E5"> a few weeks and many many sheets of</font>

784
00:27:52,570 --> 00:27:58,059
paper I managed to<font color="#E5E5E5"> calculate the</font><font color="#CCCCCC"> FEC of</font>

785
00:27:54,370 --> 00:27:59,590
a small file examples by hand<font color="#E5E5E5"> I don't</font>

786
00:27:58,059 --> 00:28:00,879
want to<font color="#E5E5E5"> turn this into</font><font color="#CCCCCC"> a long math</font>

787
00:27:59,590 --> 00:28:02,470
lesson but I want to walk<font color="#E5E5E5"> through the</font>

788
00:28:00,880 --> 00:28:07,120
<font color="#E5E5E5">high-level overview of how the math</font>

789
00:28:02,470 --> 00:28:08,860
works<font color="#CCCCCC"> for the FEC system so a key part</font>

790
00:28:07,120 --> 00:28:11,320
of the forward error correction is gal

791
00:28:08,860 --> 00:28:13,149
<font color="#CCCCCC">Oy field arithmetic a gallery field it</font>

792
00:28:11,320 --> 00:28:14,918
<font color="#E5E5E5">has two important properties</font><font color="#CCCCCC"> the first</font>

793
00:28:13,150 --> 00:28:16,059
<font color="#E5E5E5">is that it's a set of integers</font><font color="#CCCCCC"> the math</font>

794
00:28:14,919 --> 00:28:18,580
operations addition subtraction

795
00:28:16,059 --> 00:28:20,678
<font color="#CCCCCC">multiplication</font><font color="#E5E5E5"> or division between the</font>

796
00:28:18,580 --> 00:28:23,110
integers<font color="#CCCCCC"> are another</font><font color="#E5E5E5"> integer and the set</font>

797
00:28:20,679 --> 00:28:26,530
the second property<font color="#E5E5E5"> is that the field is</font>

798
00:28:23,110 --> 00:28:28,689
finite<font color="#E5E5E5"> the fec scheme that</font><font color="#CCCCCC"> I'm talking</font>

799
00:28:26,530 --> 00:28:30,190
<font color="#E5E5E5">speaking of and in fact</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> others are</font>

800
00:28:28,690 --> 00:28:31,720
a set of<font color="#E5E5E5"> algebraic</font><font color="#CCCCCC"> equations</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

801
00:28:30,190 --> 00:28:36,340
used to<font color="#E5E5E5"> calculate the missing elements</font>

802
00:28:31,720 --> 00:28:37,990
from the other so performing the math

803
00:28:36,340 --> 00:28:39,520
operations in the<font color="#E5E5E5"> gala field are</font>

804
00:28:37,990 --> 00:28:40,840
different than<font color="#E5E5E5"> standard math addition</font>

805
00:28:39,520 --> 00:28:42,800
and subtraction<font color="#E5E5E5"> are just</font><font color="#CCCCCC"> XOR</font>

806
00:28:40,840 --> 00:28:44,899
multiplication division are a bit more

807
00:28:42,800 --> 00:28:46,399
complicated but the<font color="#CCCCCC"> total possibilities</font>

808
00:28:44,900 --> 00:28:47,780
for<font color="#E5E5E5"> two to eight</font><font color="#CCCCCC"> filled to the eighth</font>

809
00:28:46,400 --> 00:28:49,370
<font color="#CCCCCC">field are small and</font><font color="#E5E5E5"> can easily be</font>

810
00:28:47,780 --> 00:28:52,280
performed in the<font color="#E5E5E5"> computer with a lookup</font>

811
00:28:49,370 --> 00:28:54,020
table<font color="#E5E5E5"> all</font><font color="#CCCCCC"> gallery field math is done</font>

812
00:28:52,280 --> 00:28:56,420
<font color="#E5E5E5">using a primitive polynomial and not</font>

813
00:28:54,020 --> 00:28:58,460
<font color="#E5E5E5">reducible</font><font color="#CCCCCC"> by any other polynomial</font><font color="#E5E5E5"> in the</font>

814
00:28:56,420 --> 00:29:02,890
case of the two to<font color="#E5E5E5"> eight</font><font color="#CCCCCC"> Galloway field</font>

815
00:28:58,460 --> 00:29:04,730
the<font color="#E5E5E5"> polynomials represented</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> my weight</font>

816
00:29:02,890 --> 00:29:06,200
to<font color="#E5E5E5"> represent sorry</font>

817
00:29:04,730 --> 00:29:08,570
yeah it's represented by<font color="#E5E5E5"> the X to the</font>

818
00:29:06,200 --> 00:29:10,670
<font color="#CCCCCC">8th equation there on the bottom</font><font color="#E5E5E5"> so this</font>

819
00:29:08,570 --> 00:29:12,260
is the same polynomial used for<font color="#CCCCCC"> QR codes</font>

820
00:29:10,670 --> 00:29:20,840
reed-solomon and lots of other error

821
00:29:12,260 --> 00:29:22,280
correction schemes so so the<font color="#E5E5E5"> FTC method</font>

822
00:29:20,840 --> 00:29:24,590
<font color="#E5E5E5">I employed I found out later</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> called</font>

823
00:29:22,280 --> 00:29:27,470
the vandermonde<font color="#E5E5E5"> FEC method it</font><font color="#CCCCCC"> consisted</font>

824
00:29:24,590 --> 00:29:30,620
the basic equation<font color="#E5E5E5"> y to the K equals x</font>

825
00:29:27,470 --> 00:29:32,120
sub n times G where why<font color="#E5E5E5"> did the K are</font>

826
00:29:30,620 --> 00:29:34,550
the transmitted code words those are<font color="#E5E5E5"> all</font>

827
00:29:32,120 --> 00:29:36,620
the packets with the FEC data<font color="#E5E5E5"> X to the N</font>

828
00:29:34,550 --> 00:29:39,919
is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> original data</font><font color="#CCCCCC"> and G is this n by</font>

829
00:29:36,620 --> 00:29:42,080
K generator matrix<font color="#E5E5E5"> and you can get back</font>

830
00:29:39,920 --> 00:29:44,030
<font color="#E5E5E5">X to the</font><font color="#CCCCCC"> n with the following equation</font>

831
00:29:42,080 --> 00:29:45,800
which is<font color="#E5E5E5"> X to the</font><font color="#CCCCCC"> N equals Z to the</font><font color="#E5E5E5"> N</font>

832
00:29:44,030 --> 00:29:56,000
times a to the<font color="#E5E5E5"> minus 1 which is your</font>

833
00:29:45,800 --> 00:29:57,889
repair matrix so yes so the second

834
00:29:56,000 --> 00:29:59,720
equation Z<font color="#CCCCCC"> to</font><font color="#E5E5E5"> n is where there you</font>

835
00:29:57,890 --> 00:30:01,610
<font color="#E5E5E5">received code words</font><font color="#CCCCCC"> an a21 is the repair</font>

836
00:29:59,720 --> 00:30:03,170
matrix it's based on your generator

837
00:30:01,610 --> 00:30:05,379
matrix you have<font color="#CCCCCC"> to have at least</font><font color="#E5E5E5"> at</font>

838
00:30:03,170 --> 00:30:08,060
elements of Z to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to recreate X</font>

839
00:30:05,380 --> 00:30:09,650
so the whole principle<font color="#E5E5E5"> the fec system is</font>

840
00:30:08,060 --> 00:30:11,450
you have to<font color="#E5E5E5"> have if you have a system to</font>

841
00:30:09,650 --> 00:30:13,370
ke equations<font color="#E5E5E5"> and n variables so if you</font>

842
00:30:11,450 --> 00:30:15,860
have at<font color="#E5E5E5"> least n pieces you can solve for</font>

843
00:30:13,370 --> 00:30:17,330
<font color="#E5E5E5">the</font><font color="#CCCCCC"> missing values so what is all that</font>

844
00:30:15,860 --> 00:30:19,490
<font color="#E5E5E5">meaning in a real-world implementation</font>

845
00:30:17,330 --> 00:30:21,500
<font color="#E5E5E5">well let's roll up</font><font color="#CCCCCC"> our sleeves</font><font color="#E5E5E5"> and do</font>

846
00:30:19,490 --> 00:30:24,470
<font color="#E5E5E5">some matrix math for</font><font color="#CCCCCC"> example I'll do a</font>

847
00:30:21,500 --> 00:30:26,060
demonstration on a 2x3 FEC scheme this

848
00:30:24,470 --> 00:30:28,730
means there are<font color="#E5E5E5"> 2 bytes</font><font color="#CCCCCC"> that we want to</font>

849
00:30:26,060 --> 00:30:29,990
<font color="#E5E5E5">protect using 3 bytes it's a small</font>

850
00:30:28,730 --> 00:30:33,280
enough example we can do it<font color="#E5E5E5"> quickly and</font>

851
00:30:29,990 --> 00:30:35,450
<font color="#CCCCCC">yet the</font><font color="#E5E5E5"> whole process</font><font color="#CCCCCC"> will be understood</font>

852
00:30:33,280 --> 00:30:38,210
so the first step is to<font color="#CCCCCC"> build a</font>

853
00:30:35,450 --> 00:30:41,270
<font color="#CCCCCC">generator mater matrix and this for</font><font color="#E5E5E5"> this</font>

854
00:30:38,210 --> 00:30:44,930
<font color="#E5E5E5">example would</font><font color="#CCCCCC"> be 2 by 3</font><font color="#E5E5E5"> it'll be--it'll</font>

855
00:30:41,270 --> 00:30:46,250
to be a 2<font color="#CCCCCC"> by 3</font><font color="#E5E5E5"> matrix</font><font color="#CCCCCC"> and Ehrman matrix</font>

856
00:30:44,930 --> 00:30:47,480
and this<font color="#CCCCCC"> is the equation</font><font color="#E5E5E5"> right here and</font>

857
00:30:46,250 --> 00:30:52,890
<font color="#E5E5E5">basically it's just a simple GM at</font>

858
00:30:47,480 --> 00:30:55,799
geometric progression so the<font color="#E5E5E5"> actual so</font>

859
00:30:52,890 --> 00:30:57,899
the<font color="#CCCCCC"> 2x3 vandermonde matrix for the Gallo</font>

860
00:30:55,799 --> 00:31:00,090
<font color="#CCCCCC">I</font><font color="#E5E5E5"> filled to the</font><font color="#CCCCCC"> eighth</font><font color="#E5E5E5"> is figure</font><font color="#CCCCCC"> five</font>

861
00:30:57,899 --> 00:31:02,340
<font color="#E5E5E5">but this</font><font color="#CCCCCC"> isn't</font><font color="#E5E5E5"> that generator matrix to</font>

862
00:31:00,090 --> 00:31:03,870
create<font color="#E5E5E5"> the generator matrix</font><font color="#CCCCCC"> we need to</font>

863
00:31:02,340 --> 00:31:05,309
we need to<font color="#E5E5E5"> get it to standard form</font><font color="#CCCCCC"> by</font>

864
00:31:03,870 --> 00:31:07,229
reducing I'm not going to get into this

865
00:31:05,309 --> 00:31:12,360
but<font color="#E5E5E5"> that's what figure six is right</font>

866
00:31:07,230 --> 00:31:14,429
there and you'll notice<font color="#CCCCCC"> the you'll</font>

867
00:31:12,360 --> 00:31:16,019
notice<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> 2x2 part on the left of</font>

868
00:31:14,429 --> 00:31:17,850
the matrix is all<font color="#E5E5E5"> ones in the diagonal</font>

869
00:31:16,019 --> 00:31:19,799
space this is<font color="#E5E5E5"> called the identity</font><font color="#CCCCCC"> matrix</font>

870
00:31:17,850 --> 00:31:21,990
and<font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> prove that also proved very</font>

871
00:31:19,799 --> 00:31:29,100
useful features later<font color="#E5E5E5"> on in the</font><font color="#CCCCCC"> fe c--</font>

872
00:31:21,990 --> 00:31:31,080
<font color="#E5E5E5">scheme okay so for the two bytes that we</font>

873
00:31:29,100 --> 00:31:33,059
want<font color="#E5E5E5"> to protect their 1f and f7</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font>

874
00:31:31,080 --> 00:31:36,658
got these values<font color="#CCCCCC"> to</font><font color="#E5E5E5"> max actual packets</font>

875
00:31:33,059 --> 00:31:37,918
and<font color="#E5E5E5"> you can see that in Figure 9 here so</font>

876
00:31:36,659 --> 00:31:38,880
now to do the math I don't<font color="#E5E5E5"> know how</font><font color="#CCCCCC"> many</font>

877
00:31:37,919 --> 00:31:40,260
of<font color="#CCCCCC"> you remember</font><font color="#E5E5E5"> how to do matrix</font>

878
00:31:38,880 --> 00:31:43,260
multiplication but I'd completely

879
00:31:40,260 --> 00:31:45,059
forgotten<font color="#E5E5E5"> in a quick review you you flip</font>

880
00:31:43,260 --> 00:31:47,279
the 2 by 1 matrix<font color="#E5E5E5"> on its side and</font><font color="#CCCCCC"> leave</font>

881
00:31:45,059 --> 00:31:49,289
<font color="#CCCCCC">the 2 by 3 2</font><font color="#E5E5E5"> by 3 matrix alone you</font>

882
00:31:47,279 --> 00:31:51,690
multiply the 2 by<font color="#E5E5E5"> 1 matrix on the left</font>

883
00:31:49,289 --> 00:31:55,169
with each row<font color="#E5E5E5"> and end up with a 3 by 1</font>

884
00:31:51,690 --> 00:31:59,190
matrix so to do the math you multiply a

885
00:31:55,169 --> 00:32:00,809
1 F<font color="#E5E5E5"> 1 F by 1 and F 7 by 0 and you follow</font>

886
00:31:59,190 --> 00:32:04,409
this through<font color="#E5E5E5"> for each of the</font><font color="#CCCCCC"> three each</font>

887
00:32:00,809 --> 00:32:06,480
of the three fields<font color="#E5E5E5"> so in a gala we</font>

888
00:32:04,409 --> 00:32:08,460
<font color="#E5E5E5">filled anything</font><font color="#CCCCCC"> x 1.is itself and</font>

889
00:32:06,480 --> 00:32:10,740
anything times<font color="#E5E5E5"> 0 0 so that makes three</font>

890
00:32:08,460 --> 00:32:12,269
<font color="#CCCCCC">of these easy to see the first</font><font color="#E5E5E5"> byte of</font>

891
00:32:10,740 --> 00:32:14,279
<font color="#CCCCCC">the code word</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> 1 F in the second is F</font>

892
00:32:12,269 --> 00:32:16,019
7 the last field I'll give you I'll<font color="#CCCCCC"> give</font>

893
00:32:14,279 --> 00:32:20,279
<font color="#E5E5E5">you some help</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> F times 3 in the</font><font color="#CCCCCC"> galilei</font>

894
00:32:16,019 --> 00:32:23,940
field is 21 F 7 times 2 is<font color="#E5E5E5"> F 3 and 21 X</font>

895
00:32:20,279 --> 00:32:25,679
or 2 F<font color="#CCCCCC"> 3 is</font><font color="#E5E5E5"> d</font><font color="#CCCCCC"> 2 so d 2 is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> fec value</font>

896
00:32:23,940 --> 00:32:27,929
which<font color="#E5E5E5"> would be in the third pack would</font>

897
00:32:25,679 --> 00:32:31,860
<font color="#CCCCCC">be the byte transmitted in the third</font>

898
00:32:27,929 --> 00:32:33,210
packet you also<font color="#E5E5E5"> notice the great</font>

899
00:32:31,860 --> 00:32:34,918
property is the first<font color="#E5E5E5"> two bytes of the</font>

900
00:32:33,210 --> 00:32:37,080
<font color="#CCCCCC">codeword in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> original form</font><font color="#E5E5E5"> are the</font>

901
00:32:34,919 --> 00:32:39,480
same that's because the left section is

902
00:32:37,080 --> 00:32:42,629
always<font color="#E5E5E5"> the identity matrix</font><font color="#CCCCCC"> as as I</font>

903
00:32:39,480 --> 00:32:44,820
mentioned earlier this<font color="#CCCCCC"> is the case this</font>

904
00:32:42,630 --> 00:32:46,139
is<font color="#E5E5E5"> the case</font><font color="#CCCCCC"> for any FEC data rates it</font>

905
00:32:44,820 --> 00:32:47,668
also means that<font color="#CCCCCC"> all the bytes that are</font>

906
00:32:46,139 --> 00:32:52,199
<font color="#CCCCCC">written to</font><font color="#E5E5E5"> disk for a transfer won't</font>

907
00:32:47,669 --> 00:32:53,850
have to be altered later so now that

908
00:32:52,200 --> 00:32:55,409
we've<font color="#E5E5E5"> been able to</font><font color="#CCCCCC"> generate the FEC the</font>

909
00:32:53,850 --> 00:32:57,990
next question is how do we<font color="#E5E5E5"> get how do we</font>

910
00:32:55,409 --> 00:32:59,730
get the<font color="#CCCCCC"> data back out so let's say in</font>

911
00:32:57,990 --> 00:33:01,500
our example<font color="#E5E5E5"> from before</font><font color="#CCCCCC"> that we get get</font>

912
00:32:59,730 --> 00:33:03,120
<font color="#E5E5E5">the first packet a third packet and</font>

913
00:33:01,500 --> 00:33:04,529
we've lost the second since<font color="#CCCCCC"> we've got</font>

914
00:33:03,120 --> 00:33:06,080
<font color="#CCCCCC">two packets</font><font color="#E5E5E5"> of the code words will be</font>

915
00:33:04,529 --> 00:33:09,080
able to<font color="#CCCCCC"> generate the missing bytes</font>

916
00:33:06,080 --> 00:33:11,000
second packet to do so we need<font color="#E5E5E5"> to build</font>

917
00:33:09,080 --> 00:33:13,399
the repair matrix now to do this we take

918
00:33:11,000 --> 00:33:15,440
<font color="#CCCCCC">rows from</font><font color="#E5E5E5"> the generator matrix</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

919
00:33:13,399 --> 00:33:18,168
packet<font color="#E5E5E5"> and we and</font><font color="#CCCCCC"> we build a 2x2 matrix</font>

920
00:33:15,440 --> 00:33:21,019
<font color="#CCCCCC">in this</font><font color="#E5E5E5"> case it'll be what you see here</font>

921
00:33:18,169 --> 00:33:23,059
and what<font color="#CCCCCC"> you see here in Figure</font><font color="#E5E5E5"> 13 the</font>

922
00:33:21,019 --> 00:33:25,669
<font color="#E5E5E5">one in the zero correlates to the first</font>

923
00:33:23,059 --> 00:33:28,330
packet the 3<font color="#CCCCCC"> and 2 are the repair mate</font>

924
00:33:25,669 --> 00:33:30,710
<font color="#E5E5E5">or the generator matrix is third field</font>

925
00:33:28,330 --> 00:33:32,360
so the matrix<font color="#E5E5E5"> needs to be inverted to</font>

926
00:33:30,710 --> 00:33:33,620
<font color="#E5E5E5">create the repair matrix and I'm going</font>

927
00:33:32,360 --> 00:33:36,649
<font color="#E5E5E5">to spare you</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> trouble and show you</font>

928
00:33:33,620 --> 00:33:38,600
and that's figure<font color="#CCCCCC"> 14 there so this gives</font>

929
00:33:36,649 --> 00:33:43,250
us a inverse which<font color="#CCCCCC"> is what we use</font><font color="#E5E5E5"> to</font>

930
00:33:38,600 --> 00:33:46,870
<font color="#E5E5E5">generate X sub n so now we</font><font color="#CCCCCC"> multiply the</font>

931
00:33:43,250 --> 00:33:49,610
<font color="#CCCCCC">2 bytes</font><font color="#E5E5E5"> that we have 1</font><font color="#CCCCCC"> FD 2 by a inverse</font>

932
00:33:46,870 --> 00:33:53,600
now the math is the<font color="#E5E5E5"> same as before basic</font>

933
00:33:49,610 --> 00:33:55,850
matrix<font color="#E5E5E5"> arithmetic now it's a</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple</font>

934
00:33:53,600 --> 00:33:57,949
example<font color="#E5E5E5"> but</font><font color="#CCCCCC"> that explains</font><font color="#E5E5E5"> the process I</font>

935
00:33:55,850 --> 00:33:59,360
did<font color="#CCCCCC"> numerous examples on paper before I</font>

936
00:33:57,950 --> 00:34:01,580
was able<font color="#E5E5E5"> to understand it enough to do</font>

937
00:33:59,360 --> 00:34:03,590
much in software<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> that I</font>

938
00:34:01,580 --> 00:34:05,240
understood how the fec process worked I

939
00:34:03,590 --> 00:34:07,039
started assured to work on a software

940
00:34:05,240 --> 00:34:08,719
implementation<font color="#CCCCCC"> luckily since galloway</font>

941
00:34:07,039 --> 00:34:10,460
field math is very<font color="#E5E5E5"> standard to compute</font>

942
00:34:08,719 --> 00:34:11,868
computer science it didn't take long<font color="#CCCCCC"> to</font>

943
00:34:10,460 --> 00:34:14,210
find<font color="#E5E5E5"> some code online to build</font>

944
00:34:11,869 --> 00:34:15,830
<font color="#E5E5E5">multiplication</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> division tables once</font>

945
00:34:14,210 --> 00:34:18,500
I<font color="#E5E5E5"> did that I wrote software</font><font color="#CCCCCC"> I need I</font>

946
00:34:15,830 --> 00:34:20,239
wrote I wrote<font color="#CCCCCC"> a</font><font color="#E5E5E5"> few</font><font color="#CCCCCC"> functions to reduce</font>

947
00:34:18,500 --> 00:34:21,859
and invert the<font color="#E5E5E5"> matrices by this point I</font>

948
00:34:20,239 --> 00:34:23,689
<font color="#E5E5E5">had all the all the mathematical tools</font>

949
00:34:21,859 --> 00:34:26,810
<font color="#E5E5E5">and software I needed to weave it</font>

950
00:34:23,690 --> 00:34:28,490
together<font color="#E5E5E5"> to be able to do the fec so for</font>

951
00:34:26,810 --> 00:34:30,349
this part<font color="#E5E5E5"> I modified</font><font color="#CCCCCC"> my software to stop</font>

952
00:34:28,489 --> 00:34:31,368
truncating the<font color="#E5E5E5"> fec data out of</font><font color="#CCCCCC"> the files</font>

953
00:34:30,349 --> 00:34:33,619
when I<font color="#CCCCCC"> saved them</font>

954
00:34:31,369 --> 00:34:35,659
I collected a<font color="#CCCCCC"> few examples of complete</font>

955
00:34:33,619 --> 00:34:38,060
files with complete FEC repair sections

956
00:34:35,659 --> 00:34:39,830
and since I should be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> generate</font>

957
00:34:38,060 --> 00:34:42,139
the<font color="#CCCCCC"> FPC sections as</font><font color="#E5E5E5"> well as repair</font>

958
00:34:39,830 --> 00:34:44,359
sections my my first step was to<font color="#E5E5E5"> write</font>

959
00:34:42,139 --> 00:34:46,520
software<font color="#CCCCCC"> they verify the</font><font color="#E5E5E5"> FEC data fields</font>

960
00:34:44,359 --> 00:34:49,520
and the<font color="#E5E5E5"> save files didn't didn't take</font>

961
00:34:46,520 --> 00:34:50,869
very<font color="#E5E5E5"> long</font><font color="#CCCCCC"> to implement this in</font><font color="#E5E5E5"> software</font>

962
00:34:49,520 --> 00:34:53,540
for<font color="#E5E5E5"> files that consisted of less than</font>

963
00:34:50,869 --> 00:34:55,159
<font color="#E5E5E5">100 packets but after that I ran</font><font color="#CCCCCC"> into</font>

964
00:34:53,540 --> 00:34:57,619
<font color="#E5E5E5">problems with</font><font color="#CCCCCC"> wind files the consistent</font>

965
00:34:55,159 --> 00:34:59,599
of 101 packets<font color="#CCCCCC"> I made the assumption</font>

966
00:34:57,619 --> 00:35:01,369
<font color="#CCCCCC">that 100 must not be some</font><font color="#E5E5E5"> arbitrary</font>

967
00:34:59,599 --> 00:35:03,230
limit and the programmers had decided<font color="#E5E5E5"> on</font>

968
00:35:01,369 --> 00:35:04,609
it for some<font color="#CCCCCC"> reason it turns out</font><font color="#E5E5E5"> that</font>

969
00:35:03,230 --> 00:35:07,640
after<font color="#CCCCCC"> a hundred</font><font color="#E5E5E5"> packets the packets</font>

970
00:35:04,609 --> 00:35:10,339
<font color="#CCCCCC">inner lead so</font><font color="#E5E5E5"> that a 100 by X 100 by X</font>

971
00:35:07,640 --> 00:35:12,080
is the largest<font color="#E5E5E5"> scheme the interleaving</font>

972
00:35:10,339 --> 00:35:13,490
<font color="#CCCCCC">data the interleaved data rate we do</font><font color="#E5E5E5"> to</font>

973
00:35:12,080 --> 00:35:16,310
<font color="#CCCCCC">calculate based</font><font color="#E5E5E5"> on the total</font><font color="#CCCCCC"> number of</font>

974
00:35:13,490 --> 00:35:18,439
<font color="#E5E5E5">packets divided by</font><font color="#CCCCCC"> 100</font><font color="#E5E5E5"> and any packets</font>

975
00:35:16,310 --> 00:35:19,549
the<font color="#E5E5E5"> worm present get to get to the even</font>

976
00:35:18,440 --> 00:35:23,180
100 or just consider

977
00:35:19,550 --> 00:35:24,470
at all<font color="#E5E5E5"> zero so all these</font><font color="#CCCCCC"> little things</font>

978
00:35:23,180 --> 00:35:26,390
necessary<font color="#E5E5E5"> to do a complete</font>

979
00:35:24,470 --> 00:35:28,669
implementation will easy to test and

980
00:35:26,390 --> 00:35:32,180
software with complete file and FEC

981
00:35:28,670 --> 00:35:33,620
sections to test against so by now is

982
00:35:32,180 --> 00:35:35,180
<font color="#E5E5E5">elated</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I was able to repair bad</font>

983
00:35:33,620 --> 00:35:37,100
files but I was still not<font color="#E5E5E5"> totally sure</font>

984
00:35:35,180 --> 00:35:38,629
<font color="#CCCCCC">with the FEC</font><font color="#E5E5E5"> rate would</font><font color="#CCCCCC"> be I could make</font>

985
00:35:37,100 --> 00:35:41,120
some assumptions based on<font color="#E5E5E5"> the total file</font>

986
00:35:38,630 --> 00:35:42,770
sizes but I took<font color="#E5E5E5"> a look</font><font color="#CCCCCC"> back at the</font>

987
00:35:41,120 --> 00:35:44,660
myriad of unknown sections in the<font color="#CCCCCC"> O 3</font>

988
00:35:42,770 --> 00:35:45,980
packets<font color="#CCCCCC"> from much</font><font color="#E5E5E5"> earlier and sure</font>

989
00:35:44,660 --> 00:35:48,230
<font color="#CCCCCC">enough there</font><font color="#E5E5E5"> was a field that correlated</font>

990
00:35:45,980 --> 00:35:49,670
<font color="#E5E5E5">the FEC and date array with a 32-bit</font>

991
00:35:48,230 --> 00:35:51,740
field<font color="#CCCCCC"> after the file name the only</font>

992
00:35:49,670 --> 00:35:53,830
<font color="#E5E5E5">reason that I wasn't obvious was it was</font>

993
00:35:51,740 --> 00:35:57,439
it<font color="#E5E5E5"> was stored as the FEC value times 100</font>

994
00:35:53,830 --> 00:35:59,810
<font color="#CCCCCC">so if the FEC scheme was</font><font color="#E5E5E5"> on was a 100 by</font>

995
00:35:57,440 --> 00:36:01,940
106<font color="#E5E5E5"> the field would be ten thousand six</font>

996
00:35:59,810 --> 00:36:04,700
hundred<font color="#E5E5E5"> so once I had this last piece of</font>

997
00:36:01,940 --> 00:36:07,340
<font color="#E5E5E5">information out it was time to try and</font>

998
00:36:04,700 --> 00:36:11,960
do it try<font color="#CCCCCC"> it was time</font><font color="#E5E5E5"> to try and do it</font>

999
00:36:07,340 --> 00:36:13,220
<font color="#E5E5E5">in a real time on the live stream</font><font color="#CCCCCC"> so the</font>

1000
00:36:11,960 --> 00:36:15,320
time it takes<font color="#E5E5E5"> to build</font><font color="#CCCCCC"> the generator</font>

1001
00:36:13,220 --> 00:36:16,939
<font color="#E5E5E5">matrix</font><font color="#CCCCCC"> which is</font><font color="#E5E5E5"> the basic of</font><font color="#CCCCCC"> the basis</font>

1002
00:36:15,320 --> 00:36:18,680
of<font color="#E5E5E5"> the repair matrices is quite quick</font>

1003
00:36:16,940 --> 00:36:20,540
for the<font color="#CCCCCC"> 2 by 3</font><font color="#E5E5E5"> example I</font><font color="#CCCCCC"> just presented</font>

1004
00:36:18,680 --> 00:36:23,240
<font color="#E5E5E5">but with a larger FTC race that are used</font>

1005
00:36:20,540 --> 00:36:26,060
in<font color="#CCCCCC"> a field such as</font><font color="#E5E5E5"> a hundred</font><font color="#CCCCCC"> byte in</font>

1006
00:36:23,240 --> 00:36:27,890
such as<font color="#E5E5E5"> the repair as</font><font color="#CCCCCC"> 105 109</font><font color="#E5E5E5"> takes much</font>

1007
00:36:26,060 --> 00:36:29,870
longer<font color="#E5E5E5"> so I pre calculated the generator</font>

1008
00:36:27,890 --> 00:36:31,910
matrix<font color="#CCCCCC"> as</font><font color="#E5E5E5"> matrices and I stored these in</font>

1009
00:36:29,870 --> 00:36:34,819
a header file<font color="#CCCCCC"> that was compiled into</font><font color="#E5E5E5"> the</font>

1010
00:36:31,910 --> 00:36:36,410
executable<font color="#CCCCCC"> I only stored the section of</font>

1011
00:36:34,820 --> 00:36:39,140
the generator<font color="#E5E5E5"> matrix used to the right</font>

1012
00:36:36,410 --> 00:36:40,850
of the identity<font color="#E5E5E5"> matrix</font><font color="#CCCCCC"> and once</font><font color="#E5E5E5"> I</font>

1013
00:36:39,140 --> 00:36:42,740
implement once I implemented<font color="#E5E5E5"> the FEC I</font>

1014
00:36:40,850 --> 00:36:45,410
was<font color="#CCCCCC"> able to emulate as far as I could to</font>

1015
00:36:42,740 --> 00:36:48,049
tell<font color="#E5E5E5"> the</font><font color="#CCCCCC"> until are as I could</font><font color="#E5E5E5"> the entire</font>

1016
00:36:45,410 --> 00:36:50,180
<font color="#E5E5E5">protocol so if area any i/o errors the</font>

1017
00:36:48,050 --> 00:36:54,110
FEC was able to repair these<font color="#CCCCCC"> in short</font>

1018
00:36:50,180 --> 00:36:55,609
bursts<font color="#E5E5E5"> so in conclusion the biggest</font>

1019
00:36:54,110 --> 00:36:57,320
challenge of<font color="#E5E5E5"> the project for me was the</font>

1020
00:36:55,610 --> 00:36:58,700
<font color="#E5E5E5">FEC as the</font><font color="#CCCCCC"> math was something that never</font>

1021
00:36:57,320 --> 00:37:00,680
<font color="#E5E5E5">really dealt</font><font color="#CCCCCC"> with in</font><font color="#E5E5E5"> my schooling</font>

1022
00:36:58,700 --> 00:37:04,430
aside from<font color="#E5E5E5"> remembering it long enough to</font>

1023
00:37:00,680 --> 00:37:05,629
pass<font color="#E5E5E5"> a test and that was it so I'm sure</font>

1024
00:37:04,430 --> 00:37:07,460
you'll be wondering about<font color="#E5E5E5"> the video</font>

1025
00:37:05,630 --> 00:37:08,990
demand<font color="#E5E5E5"> video</font><font color="#CCCCCC"> on demand</font><font color="#E5E5E5"> system if it's</font>

1026
00:37:07,460 --> 00:37:10,490
still<font color="#CCCCCC"> running the system is running</font><font color="#E5E5E5"> but</font>

1027
00:37:08,990 --> 00:37:12,140
all the files now are encrypted<font color="#CCCCCC"> and</font>

1028
00:37:10,490 --> 00:37:16,399
using some sort<font color="#E5E5E5"> of scheme based on</font>

1029
00:37:12,140 --> 00:37:19,100
<font color="#CCCCCC">aes-256</font><font color="#E5E5E5"> so hopefully I've explained all</font>

1030
00:37:16,400 --> 00:37:21,880
this the way<font color="#CCCCCC"> to</font><font color="#E5E5E5"> understand and thank you</font>

1031
00:37:19,100 --> 00:37:21,880
<font color="#E5E5E5">for listening to</font><font color="#CCCCCC"> my presentation</font>

1032
00:37:21,950 --> 00:37:28,739
[Applause]

1033
00:37:35,670 --> 00:37:40,090
as so once you applied all the

1034
00:37:37,990 --> 00:37:41,950
<font color="#CCCCCC">error-correcting stuff what</font><font color="#E5E5E5"> proportion</font>

1035
00:37:40,090 --> 00:37:46,500
of the data stream<font color="#CCCCCC"> we're able</font><font color="#E5E5E5"> to decode</font>

1036
00:37:41,950 --> 00:37:46,500
successfully<font color="#E5E5E5"> hundred</font><font color="#CCCCCC"> percent</font>

