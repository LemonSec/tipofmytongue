1
00:00:01,650 --> 00:00:07,849
[Music]

2
00:00:08,389 --> 00:00:13,340
<font color="#CCCCCC">rehaan 2017</font>

3
00:00:20,439 --> 00:00:26,450
my name is Chris kolinsky<font color="#CCCCCC"> I am a hacker</font>

4
00:00:24,020 --> 00:00:28,340
from Canada and I'm here today<font color="#E5E5E5"> to talk</font>

5
00:00:26,450 --> 00:00:32,150
about<font color="#E5E5E5"> how to</font><font color="#CCCCCC"> break the code read</font>

6
00:00:28,340 --> 00:00:37,309
protection on the<font color="#E5E5E5"> NXT LPC family of</font>

7
00:00:32,150 --> 00:00:39,410
<font color="#CCCCCC">armed microcontrollers though the LPC</font>

8
00:00:37,309 --> 00:00:42,820
family of microcontrollers<font color="#CCCCCC"> is there a</font>

9
00:00:39,410 --> 00:00:45,949
<font color="#CCCCCC">low-cost</font><font color="#E5E5E5"> 32-bit arm microcontroller</font>

10
00:00:42,820 --> 00:00:48,680
<font color="#CCCCCC">there's a variety of parts in the family</font>

11
00:00:45,949 --> 00:00:51,760
<font color="#E5E5E5">they have an internal flash ranging</font>

12
00:00:48,680 --> 00:00:56,720
anywhere<font color="#E5E5E5"> from</font><font color="#CCCCCC"> 8 to 512 kilobytes and</font>

13
00:00:51,760 --> 00:00:58,339
from 1 to 282 kilobytes of RAM<font color="#E5E5E5"> different</font>

14
00:00:56,720 --> 00:01:01,100
parts from the family have a different

15
00:00:58,339 --> 00:01:05,080
set of various peripherals<font color="#E5E5E5"> including the</font>

16
00:01:01,100 --> 00:01:08,740
you are USB<font color="#CCCCCC"> kin and Ethernet controllers</font>

17
00:01:05,080 --> 00:01:11,509
there's a variety<font color="#CCCCCC"> of parts in the family</font>

18
00:01:08,740 --> 00:01:12,919
<font color="#E5E5E5">they all share a lot in</font><font color="#CCCCCC"> common</font><font color="#E5E5E5"> it's it's</font>

19
00:01:11,510 --> 00:01:17,450
<font color="#E5E5E5">mostly the peripherals in the memory</font>

20
00:01:12,920 --> 00:01:19,880
size that differs between them inside<font color="#CCCCCC"> of</font>

21
00:01:17,450 --> 00:01:21,039
the parts they<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> bootloader for in</font>

22
00:01:19,880 --> 00:01:23,810
system programming

23
00:01:21,039 --> 00:01:27,560
so this bootloader allows you to load

24
00:01:23,810 --> 00:01:29,810
your program<font color="#E5E5E5"> into the flash area it's a</font>

25
00:01:27,560 --> 00:01:32,929
quite a simple bootloader using a serial

26
00:01:29,810 --> 00:01:36,109
protocol<font color="#CCCCCC"> there's a list of</font><font color="#E5E5E5"> the available</font>

27
00:01:32,929 --> 00:01:39,049
commands here including to write<font color="#E5E5E5"> to</font>

28
00:01:36,109 --> 00:01:44,509
flash also<font color="#E5E5E5"> to read from flash using the</font>

29
00:01:39,049 --> 00:01:46,460
<font color="#CCCCCC">isp interface there's existing software</font>

30
00:01:44,509 --> 00:01:49,280
that you can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> to use the isp</font>

31
00:01:46,460 --> 00:01:52,399
interface there's a software<font color="#E5E5E5"> from NXT</font>

32
00:01:49,280 --> 00:01:56,390
<font color="#E5E5E5">that runs in Windows</font><font color="#CCCCCC"> there's a nice</font><font color="#E5E5E5"> open</font>

33
00:01:52,399 --> 00:01:59,030
<font color="#E5E5E5">source program called LPC 21 ISP and</font>

34
00:01:56,390 --> 00:02:00,619
there's some others<font color="#E5E5E5"> too you could write</font>

35
00:01:59,030 --> 00:02:02,479
your<font color="#CCCCCC"> own quite easily they have all the</font>

36
00:02:00,619 --> 00:02:07,639
documentation<font color="#E5E5E5"> for this protocol</font><font color="#CCCCCC"> and the</font>

37
00:02:02,479 --> 00:02:09,919
data sheets inside the bootloader they

38
00:02:07,639 --> 00:02:13,100
have support for<font color="#CCCCCC"> CRP or code read</font>

39
00:02:09,919 --> 00:02:14,929
protection they have<font color="#CCCCCC"> three levels of the</font>

40
00:02:13,100 --> 00:02:18,739
<font color="#E5E5E5">code read protection that they've</font>

41
00:02:14,930 --> 00:02:20,930
defined the CRP level<font color="#CCCCCC"> one will disable</font>

42
00:02:18,740 --> 00:02:23,120
the<font color="#E5E5E5"> read command in the bootloader but</font>

43
00:02:20,930 --> 00:02:27,740
it does still allow flash<font color="#CCCCCC"> rights to some</font>

44
00:02:23,120 --> 00:02:29,780
areas of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> chip the CRP level</font><font color="#CCCCCC"> two will</font>

45
00:02:27,740 --> 00:02:31,550
disable the<font color="#E5E5E5"> read command and also</font>

46
00:02:29,780 --> 00:02:34,910
disable all<font color="#E5E5E5"> flash rights</font>

47
00:02:31,550 --> 00:02:36,500
and then the CRP<font color="#E5E5E5"> level</font><font color="#CCCCCC"> 3 will disable</font>

48
00:02:34,910 --> 00:02:38,120
all<font color="#CCCCCC"> the commands</font><font color="#E5E5E5"> and it will also</font>

49
00:02:36,500 --> 00:02:40,430
<font color="#E5E5E5">disable access</font><font color="#CCCCCC"> to the bootloader</font>

50
00:02:38,120 --> 00:02:43,460
<font color="#E5E5E5">entirely so you have no access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the in</font>

51
00:02:40,430 --> 00:02:44,960
system<font color="#CCCCCC"> programming</font><font color="#E5E5E5"> additionally they</font>

52
00:02:43,460 --> 00:02:47,990
have<font color="#E5E5E5"> a fourth</font><font color="#CCCCCC"> level that they call no</font>

53
00:02:44,960 --> 00:02:49,520
<font color="#E5E5E5">ISP which doesn't disable any of the</font>

54
00:02:47,990 --> 00:02:51,740
debugging features in the chip but<font color="#E5E5E5"> it</font>

55
00:02:49,520 --> 00:02:55,160
does disable the serial bootloader<font color="#E5E5E5"> so</font>

56
00:02:51,740 --> 00:02:58,870
that's an<font color="#E5E5E5"> additional option for the CRP</font>

57
00:02:55,160 --> 00:03:05,030
levels<font color="#CCCCCC"> 1 2 & 3 in any of these the</font>

58
00:02:58,870 --> 00:03:06,980
debugging will be disabled<font color="#CCCCCC"> so here we</font>

59
00:03:05,030 --> 00:03:09,170
have a flow chart showing the<font color="#E5E5E5"> boot</font>

60
00:03:06,980 --> 00:03:11,810
process inside the wrong<font color="#E5E5E5"> bootloader</font>

61
00:03:09,170 --> 00:03:13,780
inside of these chips<font color="#E5E5E5"> so we can see from</font>

62
00:03:11,810 --> 00:03:16,370
reset it<font color="#CCCCCC"> does some initialization</font>

63
00:03:13,780 --> 00:03:19,400
<font color="#E5E5E5">it will do a check then to see if the</font>

64
00:03:16,370 --> 00:03:22,250
code read protection at any level<font color="#E5E5E5"> 1 2 or</font>

65
00:03:19,400 --> 00:03:24,160
<font color="#E5E5E5">3 is set if the</font><font color="#CCCCCC"> code read protection is</font>

66
00:03:22,250 --> 00:03:26,270
set then it<font color="#CCCCCC"> will disable</font><font color="#E5E5E5"> the debugging</font>

67
00:03:24,160 --> 00:03:29,660
<font color="#E5E5E5">otherwise it will enable the debug</font>

68
00:03:26,270 --> 00:03:31,520
interface on<font color="#CCCCCC"> JTAG</font><font color="#E5E5E5"> it does some other</font>

69
00:03:29,660 --> 00:03:33,829
checks like checking<font color="#E5E5E5"> if the watchdog</font>

70
00:03:31,520 --> 00:03:35,450
<font color="#E5E5E5">flagged with that and if so then</font><font color="#CCCCCC"> it will</font>

71
00:03:33,830 --> 00:03:39,200
go<font color="#E5E5E5"> back into the program because it had</font>

72
00:03:35,450 --> 00:03:40,640
a reset due to watchdog otherwise it

73
00:03:39,200 --> 00:03:43,399
will continue and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> will check</font><font color="#CCCCCC"> if the</font>

74
00:03:40,640 --> 00:03:46,670
<font color="#E5E5E5">code read protection level 3 or the</font><font color="#CCCCCC"> no</font>

75
00:03:43,400 --> 00:03:49,130
<font color="#E5E5E5">is PR set these ones will disable</font><font color="#CCCCCC"> access</font>

76
00:03:46,670 --> 00:03:51,799
to the bootloader<font color="#CCCCCC"> if they are not set</font>

77
00:03:49,130 --> 00:03:54,620
then<font color="#CCCCCC"> it will check to</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> if you're</font>

78
00:03:51,800 --> 00:03:56,980
holding<font color="#CCCCCC"> one of the GPIO pins low that</font>

79
00:03:54,620 --> 00:03:59,270
triggers the access to the bootloader<font color="#CCCCCC"> if</font>

80
00:03:56,980 --> 00:04:01,700
it does not go into<font color="#E5E5E5"> the bootloader it</font>

81
00:03:59,270 --> 00:04:03,709
will go<font color="#CCCCCC"> into the application but before</font>

82
00:04:01,700 --> 00:04:06,320
it goes<font color="#E5E5E5"> into the application it will</font>

83
00:04:03,709 --> 00:04:09,230
check if<font color="#E5E5E5"> it considers the</font><font color="#CCCCCC"> flash code</font>

84
00:04:06,320 --> 00:04:11,690
valid and it does this by<font color="#CCCCCC"> calculating a</font>

85
00:04:09,230 --> 00:04:14,780
checksum of the first area of<font color="#E5E5E5"> the</font>

86
00:04:11,690 --> 00:04:16,668
vectors inside<font color="#E5E5E5"> flash</font><font color="#CCCCCC"> if this checksum is</font>

87
00:04:14,780 --> 00:04:18,980
valid then it will jump to<font color="#E5E5E5"> the reset</font>

88
00:04:16,668 --> 00:04:21,858
<font color="#CCCCCC">vector inside flash otherwise it will</font>

89
00:04:18,980 --> 00:04:26,090
<font color="#CCCCCC">fall through again</font><font color="#E5E5E5"> into the bootloader</font>

90
00:04:21,858 --> 00:04:28,250
<font color="#E5E5E5">interface some of the chips have a USB</font>

91
00:04:26,090 --> 00:04:32,929
bootloader in addition to the serial

92
00:04:28,250 --> 00:04:35,000
bootloader<font color="#CCCCCC"> some of them don't</font><font color="#E5E5E5"> some of</font>

93
00:04:32,930 --> 00:04:36,650
them don't support the USB if they do

94
00:04:35,000 --> 00:04:39,560
support<font color="#E5E5E5"> the USB bootloader</font>

95
00:04:36,650 --> 00:04:41,870
then it will determine if<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> the</font>

96
00:04:39,560 --> 00:04:44,720
USB connected by checking<font color="#CCCCCC"> if there's a</font>

97
00:04:41,870 --> 00:04:45,190
high<font color="#CCCCCC"> voltage on the v bus pin of the</font>

98
00:04:44,720 --> 00:04:47,900
<font color="#E5E5E5">chip</font>

99
00:04:45,190 --> 00:04:49,850
so if you want to<font color="#E5E5E5"> disable the USB</font>

100
00:04:47,900 --> 00:04:52,370
interface<font color="#E5E5E5"> and access the serial</font>

101
00:04:49,850 --> 00:04:54,890
bootloader instead you have<font color="#E5E5E5"> to hold the</font>

102
00:04:52,370 --> 00:04:57,710
<font color="#CCCCCC">V bus in low and if all</font><font color="#E5E5E5"> these conditions</font>

103
00:04:54,890 --> 00:05:03,979
are<font color="#CCCCCC"> met</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> eventually it will execute</font>

104
00:04:57,710 --> 00:05:06,020
the serial bootloader out of ROM so we

105
00:05:03,980 --> 00:05:08,510
can see that<font color="#E5E5E5"> there they use a 32-bit</font>

106
00:05:06,020 --> 00:05:11,330
<font color="#E5E5E5">word</font><font color="#CCCCCC"> in flash</font><font color="#E5E5E5"> to define if the code read</font>

107
00:05:08,510 --> 00:05:13,280
protection is set so they have four

108
00:05:11,330 --> 00:05:15,919
values<font color="#E5E5E5"> which will enable some level of</font>

109
00:05:13,280 --> 00:05:18,469
code protection inside<font color="#E5E5E5"> of this chip if</font>

110
00:05:15,920 --> 00:05:20,480
any of those four<font color="#E5E5E5"> possibilities of the</font>

111
00:05:18,470 --> 00:05:21,860
<font color="#E5E5E5">32-bit words are set in this location of</font>

112
00:05:20,480 --> 00:05:24,980
flash then there will be some<font color="#E5E5E5"> locking</font>

113
00:05:21,860 --> 00:05:26,900
set<font color="#E5E5E5"> if any other value exists in this</font>

114
00:05:24,980 --> 00:05:28,400
<font color="#CCCCCC">location in flash then the chip is going</font>

115
00:05:26,900 --> 00:05:31,280
to start up in<font color="#E5E5E5"> the bootloader and be</font>

116
00:05:28,400 --> 00:05:33,140
totally unlocked so out<font color="#CCCCCC"> of the possible</font>

117
00:05:31,280 --> 00:05:37,250
<font color="#E5E5E5">32-bit words there's four</font><font color="#CCCCCC"> of them that</font>

118
00:05:33,140 --> 00:05:38,990
<font color="#E5E5E5">will lock the chip or</font><font color="#CCCCCC"> 4</font><font color="#E5E5E5"> billion</font><font color="#CCCCCC"> 294</font>

119
00:05:37,250 --> 00:05:40,700
million nine hundred<font color="#CCCCCC"> and sixty-seven</font>

120
00:05:38,990 --> 00:05:42,820
thousand<font color="#CCCCCC"> two hundred</font><font color="#E5E5E5"> ninety-two that</font>

121
00:05:40,700 --> 00:05:45,860
<font color="#E5E5E5">will result in the chip being unlocked</font>

122
00:05:42,820 --> 00:05:48,980
<font color="#E5E5E5">so we can see already that this might be</font>

123
00:05:45,860 --> 00:05:52,070
<font color="#CCCCCC">a rather fragile</font><font color="#E5E5E5"> lock on the chip</font><font color="#CCCCCC"> that</font>

124
00:05:48,980 --> 00:05:53,570
<font color="#E5E5E5">there's a</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> good chance that we might</font>

125
00:05:52,070 --> 00:05:59,330
be able<font color="#CCCCCC"> to trigger it to read</font>

126
00:05:53,570 --> 00:06:02,050
<font color="#E5E5E5">incorrectly this is the memory map of</font>

127
00:05:59,330 --> 00:06:05,870
one of the parts this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> for the LPC</font>

128
00:06:02,050 --> 00:06:07,370
<font color="#E5E5E5">1343 chip the other members of the</font>

129
00:06:05,870 --> 00:06:09,140
<font color="#CCCCCC">family are</font><font color="#E5E5E5"> quite similar</font><font color="#CCCCCC"> as far as</font><font color="#E5E5E5"> the</font>

130
00:06:07,370 --> 00:06:12,350
memory layout some blocks might be moved

131
00:06:09,140 --> 00:06:15,770
around<font color="#CCCCCC"> we can see that the flash starts</font>

132
00:06:12,350 --> 00:06:18,670
at address<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and they also list where</font>

133
00:06:15,770 --> 00:06:20,510
the<font color="#E5E5E5"> boot ROM is starting at address</font><font color="#CCCCCC"> 1f</font>

134
00:06:18,670 --> 00:06:23,720
<font color="#CCCCCC">ff0000</font>

135
00:06:20,510 --> 00:06:26,930
and have a 16 K byte bootloader inside

136
00:06:23,720 --> 00:06:30,200
of<font color="#E5E5E5"> this chip most of them have</font><font color="#CCCCCC"> very</font>

137
00:06:26,930 --> 00:06:32,960
<font color="#E5E5E5">similar boot ROM some of the parts like</font>

138
00:06:30,200 --> 00:06:35,390
the<font color="#CCCCCC"> LPC 2148 actually have a bootloader</font>

139
00:06:32,960 --> 00:06:38,000
inside of a flash area at a different

140
00:06:35,390 --> 00:06:42,669
memory location but in general<font color="#E5E5E5"> they're</font>

141
00:06:38,000 --> 00:06:42,670
they're quite<font color="#E5E5E5"> similar to this this</font><font color="#CCCCCC"> setup</font>

142
00:06:45,580 --> 00:06:51,349
so here are<font color="#CCCCCC"> just</font><font color="#E5E5E5"> some quick links for</font>

143
00:06:48,440 --> 00:06:53,750
some useful<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> for using</font><font color="#E5E5E5"> the LPC</font>

144
00:06:51,350 --> 00:06:58,160
chips<font color="#E5E5E5"> the first one at the</font><font color="#CCCCCC"> top is the</font>

145
00:06:53,750 --> 00:07:00,740
LPC 21<font color="#CCCCCC"> ISP this is a nice simple open</font>

146
00:06:58,160 --> 00:07:02,720
<font color="#E5E5E5">source software to</font><font color="#CCCCCC"> program the LPC</font>

147
00:07:00,740 --> 00:07:05,990
family microcontrollers<font color="#E5E5E5"> from the command</font>

148
00:07:02,720 --> 00:07:09,260
line<font color="#E5E5E5"> and then also I shown some links</font>

149
00:07:05,990 --> 00:07:12,070
<font color="#E5E5E5">for various example codes to use the GCC</font>

150
00:07:09,260 --> 00:07:14,289
<font color="#E5E5E5">arm compiler to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to write</font>

151
00:07:12,070 --> 00:07:17,090
programs that will run<font color="#E5E5E5"> on these chips</font>

152
00:07:14,290 --> 00:07:19,480
<font color="#E5E5E5">another option is to use the the</font>

153
00:07:17,090 --> 00:07:23,419
official<font color="#CCCCCC"> tool chain supported by</font><font color="#E5E5E5"> n XP</font>

154
00:07:19,480 --> 00:07:25,190
but generally that's going to be<font color="#E5E5E5"> Windows</font>

155
00:07:23,420 --> 00:07:26,660
compilers and<font color="#CCCCCC"> some of them you actually</font>

156
00:07:25,190 --> 00:07:29,060
have to pay for<font color="#CCCCCC"> it to get</font><font color="#E5E5E5"> the full</font>

157
00:07:26,660 --> 00:07:32,110
<font color="#E5E5E5">feature set</font><font color="#CCCCCC"> so it's kind of nice to be</font>

158
00:07:29,060 --> 00:07:34,940
<font color="#CCCCCC">able to work with GCC</font><font color="#E5E5E5"> and have a more</font>

159
00:07:32,110 --> 00:07:41,690
standard tool chain where everything is

160
00:07:34,940 --> 00:07:42,860
<font color="#E5E5E5">free and open so to start out we're</font>

161
00:07:41,690 --> 00:07:45,020
going<font color="#E5E5E5"> to want to see what they're</font>

162
00:07:42,860 --> 00:07:47,810
<font color="#CCCCCC">actually doing inside the boot ROM so I</font>

163
00:07:45,020 --> 00:07:50,990
write a very simple<font color="#CCCCCC"> program that I can</font>

164
00:07:47,810 --> 00:07:53,060
load inside of a blank<font color="#E5E5E5"> LPC chip and I</font>

165
00:07:50,990 --> 00:07:56,600
put a function<font color="#CCCCCC"> like this inside</font><font color="#E5E5E5"> that</font>

166
00:07:53,060 --> 00:07:58,130
simply sets up a pointer and start with

167
00:07:56,600 --> 00:08:00,320
the pointer pointing to the<font color="#E5E5E5"> beginning of</font>

168
00:07:58,130 --> 00:08:01,820
boot<font color="#E5E5E5"> ROM and then read one byte at a</font>

169
00:08:00,320 --> 00:08:04,760
time<font color="#E5E5E5"> and outputs them out the serial</font>

170
00:08:01,820 --> 00:08:07,240
court because the example code<font color="#E5E5E5"> that's</font>

171
00:08:04,760 --> 00:08:09,950
available is quite nice<font color="#E5E5E5"> and complete and</font>

172
00:08:07,240 --> 00:08:12,830
supports a lot of<font color="#CCCCCC"> the standard c library</font>

173
00:08:09,950 --> 00:08:14,750
functions we<font color="#CCCCCC"> have even print</font><font color="#E5E5E5"> out so it</font>

174
00:08:12,830 --> 00:08:16,580
makes<font color="#E5E5E5"> it nice and simple</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> clean to be</font>

175
00:08:14,750 --> 00:08:18,950
<font color="#E5E5E5">able</font><font color="#CCCCCC"> to read the memory order this chip</font>

176
00:08:16,580 --> 00:08:21,169
so using a function<font color="#E5E5E5"> like this we can</font>

177
00:08:18,950 --> 00:08:22,909
load it into the<font color="#E5E5E5"> chip and have it send</font>

178
00:08:21,169 --> 00:08:24,500
us the contents of<font color="#E5E5E5"> the boot</font><font color="#CCCCCC"> ROM so that</font>

179
00:08:22,910 --> 00:08:31,850
we can see exactly<font color="#E5E5E5"> what it's</font><font color="#CCCCCC"> doing</font>

180
00:08:24,500 --> 00:08:36,440
inside the<font color="#E5E5E5"> bootloader so this is the</font>

181
00:08:31,850 --> 00:08:37,940
beginning<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> bootloader</font><font color="#E5E5E5"> the the</font>

182
00:08:36,440 --> 00:08:40,610
first code that executes<font color="#E5E5E5"> after the chip</font>

183
00:08:37,940 --> 00:08:43,550
is reset this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a disassembly of a part</font>

184
00:08:40,610 --> 00:08:45,470
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the code so we can see that the very</font>

185
00:08:43,549 --> 00:08:48,349
first<font color="#CCCCCC"> thing that it does is it's going</font>

186
00:08:45,470 --> 00:08:51,410
<font color="#CCCCCC">to check if the CRP level</font><font color="#E5E5E5"> one two or</font>

187
00:08:48,350 --> 00:08:53,990
<font color="#CCCCCC">three is set and if they are set then it</font>

188
00:08:51,410 --> 00:08:56,180
<font color="#CCCCCC">will disable</font><font color="#E5E5E5"> the debugging otherwise it</font>

189
00:08:53,990 --> 00:08:58,280
<font color="#E5E5E5">will enable the debugging so we can see</font>

190
00:08:56,180 --> 00:09:00,709
what they do here<font color="#CCCCCC"> is</font><font color="#E5E5E5"> if</font>

191
00:08:58,280 --> 00:09:03,470
<font color="#E5E5E5">CRP one two or three</font><font color="#CCCCCC"> are set then</font>

192
00:09:00,710 --> 00:09:06,050
they're writing the value<font color="#E5E5E5"> eight seven</font>

193
00:09:03,470 --> 00:09:08,270
six<font color="#CCCCCC"> five four</font><font color="#E5E5E5"> three two</font><font color="#CCCCCC"> one to the</font>

194
00:09:06,050 --> 00:09:11,120
register at four zero zero<font color="#E5E5E5"> four eight</font>

195
00:09:08,270 --> 00:09:13,280
<font color="#CCCCCC">three F zero which isn't documented but</font>

196
00:09:11,120 --> 00:09:16,460
clearly this register is<font color="#E5E5E5"> what enables or</font>

197
00:09:13,280 --> 00:09:18,319
disables the debugging<font color="#E5E5E5"> so again if they</font>

198
00:09:16,460 --> 00:09:20,150
write the one specific value to<font color="#E5E5E5"> this</font>

199
00:09:18,320 --> 00:09:22,760
<font color="#CCCCCC">register it will disable</font><font color="#E5E5E5"> the debugging</font>

200
00:09:20,150 --> 00:09:24,140
interface<font color="#CCCCCC"> if anything else</font><font color="#E5E5E5"> is written to</font>

201
00:09:22,760 --> 00:09:26,060
this<font color="#E5E5E5"> register then it will actually</font>

202
00:09:24,140 --> 00:09:35,150
enable the debugging interface<font color="#E5E5E5"> because</font>

203
00:09:26,060 --> 00:09:36,699
the<font color="#CCCCCC"> chip is considered unlocked so in</font>

204
00:09:35,150 --> 00:09:38,660
the in the first<font color="#E5E5E5"> part here they're</font>

205
00:09:36,700 --> 00:09:40,550
setting up whether the debugging<font color="#E5E5E5"> is</font>

206
00:09:38,660 --> 00:09:43,089
enabled or<font color="#CCCCCC"> not and now we can continue</font>

207
00:09:40,550 --> 00:09:46,729
<font color="#CCCCCC">on to the next piece I've cut out just</font>

208
00:09:43,090 --> 00:09:47,990
segments of the<font color="#E5E5E5"> boot</font><font color="#CCCCCC"> rom to cut out the</font>

209
00:09:46,730 --> 00:09:53,990
irrelevant<font color="#E5E5E5"> parts so that</font><font color="#CCCCCC"> we're not</font>

210
00:09:47,990 --> 00:09:56,600
<font color="#CCCCCC">looking at</font><font color="#E5E5E5"> too much disassembly here so</font>

211
00:09:53,990 --> 00:09:59,480
what they will do next is they will look

212
00:09:56,600 --> 00:10:01,220
at the<font color="#E5E5E5"> value</font><font color="#CCCCCC"> in flash that defines if</font>

213
00:09:59,480 --> 00:10:02,930
the code read protection is set and

214
00:10:01,220 --> 00:10:05,360
<font color="#E5E5E5">they're reading</font><font color="#CCCCCC"> this value out of flash</font>

215
00:10:02,930 --> 00:10:08,120
and they're storing<font color="#E5E5E5"> it in a</font><font color="#CCCCCC"> variable</font>

216
00:10:05,360 --> 00:10:10,130
inside of<font color="#E5E5E5"> round in this disassembly I've</font>

217
00:10:08,120 --> 00:10:15,830
labeled this variable<font color="#E5E5E5"> CRP value in</font>

218
00:10:10,130 --> 00:10:17,300
around and then later on in the<font color="#E5E5E5"> code we</font>

219
00:10:15,830 --> 00:10:20,810
<font color="#E5E5E5">can</font><font color="#CCCCCC"> see that they</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> to do some</font>

220
00:10:17,300 --> 00:10:23,089
comparisons to see what<font color="#E5E5E5"> CRP level is set</font>

221
00:10:20,810 --> 00:10:25,369
in the the middle<font color="#E5E5E5"> segment of the</font>

222
00:10:23,089 --> 00:10:28,790
disassembly here they're checking<font color="#E5E5E5"> if the</font>

223
00:10:25,370 --> 00:10:31,640
CRP level<font color="#CCCCCC"> three is set or if the</font><font color="#E5E5E5"> no ISP</font>

224
00:10:28,790 --> 00:10:33,410
<font color="#CCCCCC">value is set and if either of those are</font>

225
00:10:31,640 --> 00:10:35,780
set then it's going<font color="#E5E5E5"> to jump into the</font>

226
00:10:33,410 --> 00:10:38,120
application otherwise it's going<font color="#E5E5E5"> to</font>

227
00:10:35,780 --> 00:10:40,600
check<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see if we're holding a</font><font color="#E5E5E5"> GPIO pin</font>

228
00:10:38,120 --> 00:10:42,950
low to trigger the<font color="#E5E5E5"> bootloader</font><font color="#CCCCCC"> and</font>

229
00:10:40,600 --> 00:10:45,170
<font color="#E5E5E5">they're doing this comparison not</font>

230
00:10:42,950 --> 00:10:46,550
directly against<font color="#E5E5E5"> the value in flash but</font>

231
00:10:45,170 --> 00:10:50,349
they compare against the variable<font color="#CCCCCC"> that</font>

232
00:10:46,550 --> 00:10:50,349
they've<font color="#CCCCCC"> loaded into Ram already</font>

233
00:10:54,600 --> 00:11:01,600
in this screen here<font color="#E5E5E5"> this is a function</font>

234
00:10:57,550 --> 00:11:03,370
that I call select bootloader<font color="#E5E5E5"> the brute</font>

235
00:11:01,600 --> 00:11:06,010
code is going<font color="#E5E5E5"> to end up in this routine</font>

236
00:11:03,370 --> 00:11:08,650
<font color="#CCCCCC">if we</font><font color="#E5E5E5"> don't have the no</font><font color="#CCCCCC"> ISP or the</font><font color="#E5E5E5"> CR P</font>

237
00:11:06,010 --> 00:11:11,260
<font color="#CCCCCC">3 enabled and if the bootloader has been</font>

238
00:11:08,650 --> 00:11:13,329
triggered<font color="#E5E5E5"> so at this point it's going to</font>

239
00:11:11,260 --> 00:11:15,910
check to see<font color="#E5E5E5"> if it should go into the</font>

240
00:11:13,330 --> 00:11:19,060
<font color="#E5E5E5">USB boot loader or the serial bootloader</font>

241
00:11:15,910 --> 00:11:22,350
<font color="#E5E5E5">and again we can</font><font color="#CCCCCC"> see that they they do</font>

242
00:11:19,060 --> 00:11:26,619
the same thing where they're reading the

243
00:11:22,350 --> 00:11:28,930
value from<font color="#CCCCCC"> slash for the CRP</font><font color="#E5E5E5"> and they're</font>

244
00:11:26,620 --> 00:11:33,550
storing it in again the same variable<font color="#E5E5E5"> in</font>

245
00:11:28,930 --> 00:11:35,800
drown so at this point<font color="#CCCCCC"> they have the CRP</font>

246
00:11:33,550 --> 00:11:37,390
value if it's set stored in their

247
00:11:35,800 --> 00:11:45,459
variable<font color="#CCCCCC"> in RAM and they're ready to</font>

248
00:11:37,390 --> 00:11:47,590
<font color="#E5E5E5">enter</font><font color="#CCCCCC"> the serial isp software so in the</font>

249
00:11:45,460 --> 00:11:50,050
serial isp routine this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the very</font>

250
00:11:47,590 --> 00:11:52,720
beginning<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> we can see that they set</font>

251
00:11:50,050 --> 00:11:56,829
<font color="#E5E5E5">up</font><font color="#CCCCCC"> some registers and they're setting</font>

252
00:11:52,720 --> 00:11:58,840
registers<font color="#E5E5E5"> r6 and r7 here to be</font>

253
00:11:56,830 --> 00:12:02,670
initialized with the values<font color="#E5E5E5"> that would</font>

254
00:11:58,840 --> 00:12:05,830
enable CRP level<font color="#E5E5E5"> 2 or CRP level 3 and</font>

255
00:12:02,670 --> 00:12:07,810
then they're continuing directly into

256
00:12:05,830 --> 00:12:10,180
their command loop where<font color="#CCCCCC"> you can send</font>

257
00:12:07,810 --> 00:12:16,510
the<font color="#E5E5E5"> isp commands via the serial</font>

258
00:12:10,180 --> 00:12:19,839
interface this<font color="#E5E5E5"> is deeper into the</font><font color="#CCCCCC"> isp</font>

259
00:12:16,510 --> 00:12:22,060
routine this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> after you've sent it a</font>

260
00:12:19,840 --> 00:12:24,340
command<font color="#E5E5E5"> and it is going to check the</font>

261
00:12:22,060 --> 00:12:26,650
command to see if it's on the list<font color="#E5E5E5"> of of</font>

262
00:12:24,340 --> 00:12:29,470
commands<font color="#E5E5E5"> that would be disabled if code</font>

263
00:12:26,650 --> 00:12:34,150
read protection is set so we can see

264
00:12:29,470 --> 00:12:36,280
that<font color="#E5E5E5"> right from the the very top</font><font color="#CCCCCC"> i've</font>

265
00:12:34,150 --> 00:12:39,459
started where if it's<font color="#E5E5E5"> command such</font><font color="#CCCCCC"> as a</font>

266
00:12:36,280 --> 00:12:42,220
read or a write<font color="#CCCCCC"> to flash</font><font color="#E5E5E5"> then it will</font>

267
00:12:39,460 --> 00:12:44,500
set register r2 to<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> which indicates</font>

268
00:12:42,220 --> 00:12:47,110
later in the program that this is a

269
00:12:44,500 --> 00:12:49,780
command<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would be disabled by CRP</font>

270
00:12:47,110 --> 00:12:52,180
and then they're<font color="#E5E5E5"> going to continue and</font>

271
00:12:49,780 --> 00:12:54,640
they're<font color="#E5E5E5"> going to check to</font><font color="#CCCCCC"> see which CRP</font>

272
00:12:52,180 --> 00:12:57,400
value is actually set now if we look

273
00:12:54,640 --> 00:12:59,740
here<font color="#CCCCCC"> we can see</font><font color="#E5E5E5"> that they're actually</font>

274
00:12:57,400 --> 00:13:01,180
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> the CRP check against this</font>

275
00:12:59,740 --> 00:13:03,760
variable<font color="#E5E5E5"> that they have in RAM at this</font>

276
00:13:01,180 --> 00:13:05,770
point<font color="#E5E5E5"> so inside of the serial bootloader</font>

277
00:13:03,760 --> 00:13:06,840
<font color="#E5E5E5">when they want to know is this command</font>

278
00:13:05,770 --> 00:13:09,600
allowed

279
00:13:06,840 --> 00:13:13,230
they're always<font color="#E5E5E5"> comparing the CRP value</font>

280
00:13:09,600 --> 00:13:14,490
the<font color="#E5E5E5"> LOC value against this this</font><font color="#CCCCCC"> value</font>

281
00:13:13,230 --> 00:13:17,580
<font color="#E5E5E5">that they've already loaded into their</font>

282
00:13:14,490 --> 00:13:19,140
variable in<font color="#E5E5E5"> RAM so at this point they're</font>

283
00:13:17,580 --> 00:13:21,480
<font color="#CCCCCC">not even looking into the flash</font><font color="#E5E5E5"> anymore</font>

284
00:13:19,140 --> 00:13:24,510
<font color="#E5E5E5">to see if it's locked they've loaded</font>

285
00:13:21,480 --> 00:13:32,970
<font color="#E5E5E5">this value after reset and now they're</font>

286
00:13:24,510 --> 00:13:35,550
able to just check in<font color="#CCCCCC"> RAM every time so</font>

287
00:13:32,970 --> 00:13:37,740
to continue<font color="#E5E5E5"> from here</font><font color="#CCCCCC"> I am ready</font><font color="#E5E5E5"> to</font>

288
00:13:35,550 --> 00:13:40,469
<font color="#E5E5E5">start testing on on the chips so I took</font>

289
00:13:37,740 --> 00:13:42,060
a variety<font color="#CCCCCC"> of chips from the</font><font color="#E5E5E5"> family and I</font>

290
00:13:40,470 --> 00:13:44,520
mounted them<font color="#E5E5E5"> on different bread boards</font>

291
00:13:42,060 --> 00:13:47,599
so this is one of<font color="#E5E5E5"> the smaller members of</font>

292
00:13:44,520 --> 00:13:52,020
the LPC family this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> an LPC 812</font><font color="#E5E5E5"> on a</font>

293
00:13:47,600 --> 00:13:54,890
<font color="#E5E5E5">breakout board this is another smaller</font>

294
00:13:52,020 --> 00:14:02,699
member of the family<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the LPC</font>

295
00:13:54,890 --> 00:14:04,560
<font color="#E5E5E5">1114 this is the LPC 1751</font><font color="#CCCCCC"> and you can</font>

296
00:14:02,700 --> 00:14:06,930
see I've<font color="#E5E5E5"> only populated some pins on the</font>

297
00:14:04,560 --> 00:14:09,300
breakout board<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is because really</font><font color="#CCCCCC"> I</font>

298
00:14:06,930 --> 00:14:10,800
<font color="#E5E5E5">only need to power the chip to enter the</font>

299
00:14:09,300 --> 00:14:12,689
bootloader<font color="#E5E5E5"> mode and to have the serial</font>

300
00:14:10,800 --> 00:14:14,280
access I'm not interested<font color="#E5E5E5"> in so many of</font>

301
00:14:12,690 --> 00:14:19,680
the other peripherals so I try<font color="#E5E5E5"> to keep</font>

302
00:14:14,280 --> 00:14:23,420
it simple this<font color="#CCCCCC"> is an LPC</font><font color="#E5E5E5"> 2101 another</font>

303
00:14:19,680 --> 00:14:26,099
member of<font color="#E5E5E5"> the family</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is an LPC</font>

304
00:14:23,420 --> 00:14:28,079
<font color="#CCCCCC">2148 on a nicer breakout board that I</font>

305
00:14:26,100 --> 00:14:29,490
found with<font color="#CCCCCC"> the ZIF socket</font><font color="#E5E5E5"> that's a lot</font>

306
00:14:28,080 --> 00:14:30,780
more convenient<font color="#E5E5E5"> to work with if you're</font>

307
00:14:29,490 --> 00:14:36,150
<font color="#E5E5E5">going to be changing between</font><font color="#CCCCCC"> a lot of</font>

308
00:14:30,780 --> 00:14:38,130
<font color="#CCCCCC">different chips and then</font><font color="#E5E5E5"> another option</font>

309
00:14:36,150 --> 00:14:40,800
is also<font color="#E5E5E5"> to use a premade development</font>

310
00:14:38,130 --> 00:14:44,520
board<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> nollie</font><font color="#CCCCCC"> Max board for the</font>

311
00:14:40,800 --> 00:14:47,310
LPC<font color="#E5E5E5"> 1343 chip</font><font color="#CCCCCC"> this one has been modified</font>

312
00:14:44,520 --> 00:14:50,400
<font color="#CCCCCC">a little bit I've removed</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> of the</font>

313
00:14:47,310 --> 00:14:52,670
capacitors<font color="#E5E5E5"> capacitor</font><font color="#CCCCCC"> c1 and c4 these</font><font color="#E5E5E5"> are</font>

314
00:14:50,400 --> 00:14:55,920
the filter capacitors on the VDD<font color="#E5E5E5"> pins</font>

315
00:14:52,670 --> 00:14:57,750
because<font color="#E5E5E5"> I'm planning</font><font color="#CCCCCC"> to glitch this chip</font>

316
00:14:55,920 --> 00:15:00,839
<font color="#CCCCCC">and that's</font><font color="#E5E5E5"> going to involve quickly</font>

317
00:14:57,750 --> 00:15:02,280
dropping<font color="#E5E5E5"> out the power supply</font><font color="#CCCCCC"> so I don't</font>

318
00:15:00,840 --> 00:15:06,090
want those filter capacitors<font color="#CCCCCC"> they're</font>

319
00:15:02,280 --> 00:15:08,819
going<font color="#E5E5E5"> to be trouble for me also</font><font color="#CCCCCC"> I've cut</font>

320
00:15:06,090 --> 00:15:11,910
two<font color="#E5E5E5"> traces on the board which are for</font>

321
00:15:08,820 --> 00:15:13,650
the<font color="#CCCCCC"> VDD</font><font color="#E5E5E5"> and VDD i/o signals this</font>

322
00:15:11,910 --> 00:15:15,600
development<font color="#E5E5E5"> board is set up nicely that</font>

323
00:15:13,650 --> 00:15:17,970
they give you a spot specifically to

324
00:15:15,600 --> 00:15:19,980
catch<font color="#E5E5E5"> if you want to disable the power</font>

325
00:15:17,970 --> 00:15:20,760
supply from<font color="#E5E5E5"> the board so I've installed</font>

326
00:15:19,980 --> 00:15:22,710
jumpers on the

327
00:15:20,760 --> 00:15:26,520
<font color="#E5E5E5">locations so I can connect with my</font><font color="#CCCCCC"> own</font>

328
00:15:22,710 --> 00:15:28,440
power connection and then also I've

329
00:15:26,520 --> 00:15:30,750
added this green wire<font color="#E5E5E5"> and this green</font>

330
00:15:28,440 --> 00:15:34,230
wire<font color="#E5E5E5"> is just connected between the</font>

331
00:15:30,750 --> 00:15:36,630
<font color="#CCCCCC">ground pin on the debug port and the</font><font color="#E5E5E5"> V</font>

332
00:15:34,230 --> 00:15:38,520
bus signal<font color="#CCCCCC"> going into the chip</font><font color="#E5E5E5"> because</font>

333
00:15:36,630 --> 00:15:40,110
normally this development board is

334
00:15:38,520 --> 00:15:42,510
<font color="#E5E5E5">designed so that you'll be</font><font color="#CCCCCC"> using the USB</font>

335
00:15:40,110 --> 00:15:44,220
<font color="#E5E5E5">bootloader so in order to disable the</font>

336
00:15:42,510 --> 00:15:46,350
USB<font color="#E5E5E5"> bootloader I've added this green</font>

337
00:15:44,220 --> 00:15:48,990
wire which is<font color="#E5E5E5"> simply holding</font><font color="#CCCCCC"> v bus pin</font>

338
00:15:46,350 --> 00:15:55,950
low<font color="#E5E5E5"> so we'll enter the serial bootloader</font>

339
00:15:48,990 --> 00:15:59,790
instead so this is my basic<font color="#CCCCCC"> setup that</font><font color="#E5E5E5"> I</font>

340
00:15:55,950 --> 00:16:02,010
use for free glitching<font color="#E5E5E5"> chips at the the</font>

341
00:15:59,790 --> 00:16:04,020
top I<font color="#CCCCCC"> have an oscilloscope that I use so</font>

342
00:16:02,010 --> 00:16:06,900
that<font color="#CCCCCC"> I can actually see a little</font><font color="#E5E5E5"> bit of</font>

343
00:16:04,020 --> 00:16:09,630
<font color="#CCCCCC">what's going on below</font><font color="#E5E5E5"> that I have a</font>

344
00:16:06,900 --> 00:16:12,090
power supply<font color="#CCCCCC"> dual output adjustable</font>

345
00:16:09,630 --> 00:16:14,850
power supply so I can set two voltage

346
00:16:12,090 --> 00:16:16,380
levels<font color="#E5E5E5"> independently in front of that I</font>

347
00:16:14,850 --> 00:16:19,980
have a little mess of wires and

348
00:16:16,380 --> 00:16:22,080
<font color="#E5E5E5">development boards with an</font><font color="#CCCCCC"> atmel X mega</font>

349
00:16:19,980 --> 00:16:23,730
<font color="#E5E5E5">board that I use for controlling my</font>

350
00:16:22,080 --> 00:16:27,270
glitch and for your talk doing the

351
00:16:23,730 --> 00:16:30,290
serial connection to the chip<font color="#CCCCCC"> I have one</font>

352
00:16:27,270 --> 00:16:33,600
of the<font color="#CCCCCC"> LPC</font><font color="#E5E5E5"> boards on a breakout board</font><font color="#CCCCCC"> I</font>

353
00:16:30,290 --> 00:16:35,099
have another small breadboard<font color="#CCCCCC"> with the</font>

354
00:16:33,600 --> 00:16:37,650
actual<font color="#E5E5E5"> glitcher</font><font color="#CCCCCC"> circuits that'll get</font>

355
00:16:35,100 --> 00:16:39,660
<font color="#E5E5E5">into it more in-depth in a few more</font>

356
00:16:37,650 --> 00:16:42,120
<font color="#CCCCCC">slides</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> I have the oscilloscope</font>

357
00:16:39,660 --> 00:16:43,650
<font color="#E5E5E5">probes connecting in the background I</font>

358
00:16:42,120 --> 00:16:46,590
have the computer<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's connected to</font>

359
00:16:43,650 --> 00:16:50,100
<font color="#E5E5E5">on my computer I'm just running mini-com</font>

360
00:16:46,590 --> 00:16:52,710
I have just a direct serial interface to

361
00:16:50,100 --> 00:16:54,930
the X mega board<font color="#E5E5E5"> that I'm going to be</font>

362
00:16:52,710 --> 00:16:56,970
<font color="#E5E5E5">using and they run a little terminal</font>

363
00:16:54,930 --> 00:17:00,770
program<font color="#E5E5E5"> within the X mega and this is</font>

364
00:16:56,970 --> 00:17:00,770
this<font color="#E5E5E5"> is my interface for the glitcher</font>

365
00:17:07,199 --> 00:17:11,920
so<font color="#CCCCCC"> they have a bit of an</font><font color="#E5E5E5"> idea of what's</font>

366
00:17:09,339 --> 00:17:14,169
going<font color="#CCCCCC"> on inside of the chip</font><font color="#E5E5E5"> during boot</font>

367
00:17:11,920 --> 00:17:17,190
up I do some simple power analysis on

368
00:17:14,170 --> 00:17:20,410
this chip<font color="#CCCCCC"> to do a power analysis I</font>

369
00:17:17,190 --> 00:17:23,040
connect a 10<font color="#CCCCCC"> ohm resistor in series with</font>

370
00:17:20,410 --> 00:17:26,110
the ground<font color="#CCCCCC"> signal going to</font><font color="#E5E5E5"> the chip</font>

371
00:17:23,040 --> 00:17:29,050
<font color="#CCCCCC">these</font><font color="#E5E5E5"> measurements are from an LPC</font><font color="#CCCCCC"> a 12</font>

372
00:17:26,109 --> 00:17:30,550
chip and again as I noted it's<font color="#E5E5E5"> simply a</font>

373
00:17:29,050 --> 00:17:32,530
10 ohm<font color="#E5E5E5"> resistor in series with ground</font>

374
00:17:30,550 --> 00:17:35,080
and I measure the<font color="#CCCCCC"> voltage across this</font>

375
00:17:32,530 --> 00:17:36,550
resistor<font color="#E5E5E5"> so as the power consumption of</font>

376
00:17:35,080 --> 00:17:37,990
the chip is changing<font color="#CCCCCC"> you see a</font>

377
00:17:36,550 --> 00:17:40,240
difference<font color="#E5E5E5"> in the voltage measured</font>

378
00:17:37,990 --> 00:17:41,950
across<font color="#E5E5E5"> this resistor and then on</font><font color="#CCCCCC"> the</font>

379
00:17:40,240 --> 00:17:44,470
<font color="#CCCCCC">Scylla</font><font color="#E5E5E5"> scope we can get these traces</font>

380
00:17:41,950 --> 00:17:46,060
<font color="#E5E5E5">which look quite noisy but still we can</font>

381
00:17:44,470 --> 00:17:49,870
<font color="#CCCCCC">we can see that there's some pattern to</font>

382
00:17:46,060 --> 00:17:52,149
it the image<font color="#CCCCCC"> at the top</font><font color="#E5E5E5"> left is showing</font>

383
00:17:49,870 --> 00:17:54,699
immediately after resetting<font color="#E5E5E5"> the chip and</font>

384
00:17:52,150 --> 00:17:56,740
entering into the application and then

385
00:17:54,700 --> 00:17:58,780
<font color="#CCCCCC">the</font><font color="#E5E5E5"> image is the bottom right is showing</font>

386
00:17:56,740 --> 00:18:01,150
<font color="#E5E5E5">when we reset the chip and it enters</font>

387
00:17:58,780 --> 00:18:03,639
into<font color="#CCCCCC"> the bootloader</font><font color="#E5E5E5"> so we can see that</font>

388
00:18:01,150 --> 00:18:05,950
the<font color="#E5E5E5"> the left half of the image is quite</font>

389
00:18:03,640 --> 00:18:07,210
similar<font color="#E5E5E5"> between the two</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> them and then</font>

390
00:18:05,950 --> 00:18:08,860
around the<font color="#E5E5E5"> middle of the oscilloscope</font>

391
00:18:07,210 --> 00:18:11,080
image we start to see<font color="#E5E5E5"> that there's some</font>

392
00:18:08,860 --> 00:18:12,399
differences<font color="#CCCCCC"> in there so we can't see</font>

393
00:18:11,080 --> 00:18:13,960
<font color="#E5E5E5">exactly which instructions are being</font>

394
00:18:12,400 --> 00:18:15,640
executed<font color="#E5E5E5"> but we can clearly see that</font>

395
00:18:13,960 --> 00:18:20,530
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is some difference in the code</font>

396
00:18:15,640 --> 00:18:22,630
path that's being taken so this<font color="#E5E5E5"> is a</font>

397
00:18:20,530 --> 00:18:24,420
measurement of<font color="#E5E5E5"> the same thing again</font><font color="#CCCCCC"> it's</font>

398
00:18:22,630 --> 00:18:26,830
the reset<font color="#CCCCCC"> and starting the application</font>

399
00:18:24,420 --> 00:18:29,650
comparing to reset<font color="#E5E5E5"> and starting the</font>

400
00:18:26,830 --> 00:18:31,720
bootloader<font color="#CCCCCC"> I've marked with cursors on</font>

401
00:18:29,650 --> 00:18:33,970
the on the scope here so we can see with

402
00:18:31,720 --> 00:18:36,940
the yellow lines the exact point<font color="#E5E5E5"> at</font>

403
00:18:33,970 --> 00:18:38,530
which the code<font color="#CCCCCC"> flow starts to differ</font><font color="#E5E5E5"> so</font>

404
00:18:36,940 --> 00:18:40,750
we can gather from<font color="#E5E5E5"> this that the the</font>

405
00:18:38,530 --> 00:18:42,910
<font color="#E5E5E5">part between the two yellow cursors at</font>

406
00:18:40,750 --> 00:18:45,370
the left of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> image this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> boot</font>

407
00:18:42,910 --> 00:18:46,930
<font color="#E5E5E5">ROM code the</font><font color="#CCCCCC"> initialization and the</font>

408
00:18:45,370 --> 00:18:49,540
initial checking of the<font color="#E5E5E5"> code read</font>

409
00:18:46,930 --> 00:18:52,480
protection<font color="#E5E5E5"> and then everything to the</font>

410
00:18:49,540 --> 00:18:53,649
right<font color="#E5E5E5"> of the cursor differs depending on</font>

411
00:18:52,480 --> 00:18:55,210
whether we've<font color="#E5E5E5"> triggered the bootloader</font>

412
00:18:53,650 --> 00:18:57,510
<font color="#E5E5E5">mode or whether it's going directly</font><font color="#CCCCCC"> into</font>

413
00:18:55,210 --> 00:18:57,510
<font color="#E5E5E5">the application</font>

414
00:19:03,430 --> 00:19:08,360
so this is a video<font color="#E5E5E5"> showing the</font><font color="#CCCCCC"> the live</font>

415
00:19:06,620 --> 00:19:09,860
image from the oscilloscope<font color="#CCCCCC"> right now</font>

416
00:19:08,360 --> 00:19:13,280
it's<font color="#E5E5E5"> starting into the bootloader mode</font>

417
00:19:09,860 --> 00:19:15,139
<font color="#E5E5E5">or it was in the application would this</font>

418
00:19:13,280 --> 00:19:16,070
<font color="#E5E5E5">is going</font><font color="#CCCCCC"> into the bootloader</font><font color="#E5E5E5"> mode</font><font color="#CCCCCC"> now</font>

419
00:19:15,140 --> 00:19:18,680
it's switching<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the application</font>

420
00:19:16,070 --> 00:19:20,210
<font color="#E5E5E5">mode so even though it's noisy and</font><font color="#CCCCCC"> it</font>

421
00:19:18,680 --> 00:19:22,220
jumps around<font color="#E5E5E5"> you can see some definite</font>

422
00:19:20,210 --> 00:19:25,790
patterns<font color="#E5E5E5"> as it switches between the</font>

423
00:19:22,220 --> 00:19:28,400
<font color="#E5E5E5">bootloader and application mode so even</font>

424
00:19:25,790 --> 00:19:30,740
with<font color="#E5E5E5"> these dirty signals we're not going</font>

425
00:19:28,400 --> 00:19:32,810
to<font color="#E5E5E5"> get all</font><font color="#CCCCCC"> of the detail that</font><font color="#E5E5E5"> we might</font>

426
00:19:30,740 --> 00:19:34,490
really<font color="#E5E5E5"> want but it's</font><font color="#CCCCCC"> definitely enough</font>

427
00:19:32,810 --> 00:19:36,200
to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to see if the code flow is</font>

428
00:19:34,490 --> 00:19:37,760
taking<font color="#CCCCCC"> the path</font><font color="#E5E5E5"> that we expect or if</font>

429
00:19:36,200 --> 00:19:40,360
it's going in in some different

430
00:19:37,760 --> 00:19:40,360
<font color="#E5E5E5">direction</font>

431
00:19:46,900 --> 00:19:53,780
this is<font color="#E5E5E5"> showing on another chip this</font><font color="#CCCCCC"> is</font>

432
00:19:50,540 --> 00:19:56,360
looking<font color="#E5E5E5"> at the LPC</font><font color="#CCCCCC"> 1343</font><font color="#E5E5E5"> so the very top</font>

433
00:19:53,780 --> 00:19:58,670
trace<font color="#E5E5E5"> I'm measuring the power</font>

434
00:19:56,360 --> 00:20:02,060
consumption<font color="#E5E5E5"> using a resistor in series</font>

435
00:19:58,670 --> 00:20:05,300
with VDD pins and then near the<font color="#E5E5E5"> bottom</font>

436
00:20:02,060 --> 00:20:07,659
<font color="#E5E5E5">I'm measuring the power supply with the</font>

437
00:20:05,300 --> 00:20:10,580
<font color="#E5E5E5">resistor in series with the ground pins</font>

438
00:20:07,660 --> 00:20:13,180
so<font color="#E5E5E5"> you can get the you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> do the power</font>

439
00:20:10,580 --> 00:20:15,409
analysis on the VDD or on the<font color="#E5E5E5"> ground</font>

440
00:20:13,180 --> 00:20:17,600
<font color="#E5E5E5">generally you'll get a nicer cleaner</font>

441
00:20:15,410 --> 00:20:20,360
signal measuring off the ground<font color="#CCCCCC"> I mean</font>

442
00:20:17,600 --> 00:20:24,560
we can see some<font color="#E5E5E5"> differences in in this</font>

443
00:20:20,360 --> 00:20:25,820
<font color="#E5E5E5">image either</font><font color="#CCCCCC"> on either trace whether</font>

444
00:20:24,560 --> 00:20:28,280
we're looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the VDD or the ground</font>

445
00:20:25,820 --> 00:20:30,379
<font color="#E5E5E5">but it's clearly the</font><font color="#CCCCCC"> the bottom</font><font color="#E5E5E5"> trace or</font>

446
00:20:28,280 --> 00:20:31,910
what the ground is much easier<font color="#CCCCCC"> to</font>

447
00:20:30,380 --> 00:20:33,440
actually<font color="#E5E5E5"> see some differences in what's</font>

448
00:20:31,910 --> 00:20:36,760
<font color="#E5E5E5">going on as we trigger between the</font>

449
00:20:33,440 --> 00:20:36,760
bootloader<font color="#E5E5E5"> and the application mode</font>

450
00:20:41,730 --> 00:20:48,370
so to get<font color="#CCCCCC"> into glitching</font><font color="#E5E5E5"> my glitcher is</font>

451
00:20:45,940 --> 00:20:51,880
based entirely around this chip<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

452
00:20:48,370 --> 00:20:53,860
a<font color="#CCCCCC"> max 46 19</font><font color="#E5E5E5"> chip</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is almost the</font>

453
00:20:51,880 --> 00:20:57,700
<font color="#E5E5E5">entire glitching circuit right here in</font>

454
00:20:53,860 --> 00:21:01,629
this one<font color="#E5E5E5"> chip the max</font><font color="#CCCCCC"> 46 19</font>

455
00:20:57,700 --> 00:21:04,630
is a chip that<font color="#E5E5E5"> contains three</font>

456
00:21:01,630 --> 00:21:08,350
single-pole double-throw<font color="#E5E5E5"> switches with a</font>

457
00:21:04,630 --> 00:21:10,630
fast switching<font color="#E5E5E5"> time and a low series</font>

458
00:21:08,350 --> 00:21:12,040
resistance when they're switched on<font color="#E5E5E5"> so</font>

459
00:21:10,630 --> 00:21:17,350
what this<font color="#E5E5E5"> means is that we're able to</font>

460
00:21:12,040 --> 00:21:19,240
switch<font color="#E5E5E5"> between two inputs and that will</font>

461
00:21:17,350 --> 00:21:21,429
adjust<font color="#E5E5E5"> the</font><font color="#CCCCCC"> output level and we</font><font color="#E5E5E5"> have</font>

462
00:21:19,240 --> 00:21:24,130
switching times that are as low<font color="#CCCCCC"> as 10</font><font color="#E5E5E5"> to</font>

463
00:21:21,430 --> 00:21:26,350
15 nanoseconds<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this means that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font>

464
00:21:24,130 --> 00:21:29,380
very quickly<font color="#E5E5E5"> switch between two voltage</font>

465
00:21:26,350 --> 00:21:33,399
sources<font color="#CCCCCC"> and this is how we'll actually</font>

466
00:21:29,380 --> 00:21:35,920
<font color="#E5E5E5">produce the the glitch output so this is</font>

467
00:21:33,400 --> 00:21:38,110
a diagram again from the<font color="#CCCCCC"> max 46:19</font>

468
00:21:35,920 --> 00:21:41,170
datasheet<font color="#CCCCCC"> just</font><font color="#E5E5E5"> showing the the actual</font>

469
00:21:38,110 --> 00:21:42,639
circuit inside the<font color="#CCCCCC"> Max 46:19</font><font color="#E5E5E5"> and you can</font>

470
00:21:41,170 --> 00:21:46,240
see it's quite simple it<font color="#CCCCCC"> really is just</font>

471
00:21:42,640 --> 00:21:54,040
<font color="#E5E5E5">three switches inside so we have three</font>

472
00:21:46,240 --> 00:21:56,890
inputs<font color="#E5E5E5"> y 0 y 1</font><font color="#CCCCCC"> X 0 X 1 Z 0 Z 1 and then</font>

473
00:21:54,040 --> 00:21:59,050
the<font color="#CCCCCC"> 3 outputs are the x y&z outputs and</font>

474
00:21:56,890 --> 00:22:02,200
the controls<font color="#E5E5E5"> for these switches which</font>

475
00:21:59,050 --> 00:22:06,820
selects the the<font color="#E5E5E5"> 0 input or the</font><font color="#CCCCCC"> 1 input</font>

476
00:22:02,200 --> 00:22:09,400
<font color="#CCCCCC">or a B and C there's also an enable</font><font color="#E5E5E5"> pin</font>

477
00:22:06,820 --> 00:22:12,010
which if you hold<font color="#E5E5E5"> it low then the max</font>

478
00:22:09,400 --> 00:22:14,020
<font color="#CCCCCC">46:19 will output</font><font color="#E5E5E5"> voltage</font><font color="#CCCCCC"> to the chip if</font>

479
00:22:12,010 --> 00:22:15,820
we release that high then<font color="#CCCCCC"> it won't</font><font color="#E5E5E5"> have</font>

480
00:22:14,020 --> 00:22:16,930
any<font color="#CCCCCC"> output to the chip at all</font><font color="#E5E5E5"> so we can</font>

481
00:22:15,820 --> 00:22:19,120
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> use this</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> able to</font>

482
00:22:16,930 --> 00:22:24,130
<font color="#E5E5E5">completely cut</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> the power supply to</font>

483
00:22:19,120 --> 00:22:27,939
<font color="#CCCCCC">the chip so this is the schematic of the</font>

484
00:22:24,130 --> 00:22:29,680
<font color="#CCCCCC">glitcher circuit</font><font color="#E5E5E5"> that I use all that</font>

485
00:22:27,940 --> 00:22:31,180
i've<font color="#CCCCCC"> done here is i tie the three</font>

486
00:22:29,680 --> 00:22:34,360
<font color="#E5E5E5">switches in the chip together in</font>

487
00:22:31,180 --> 00:22:36,340
parallel<font color="#CCCCCC"> so i do this it helps to lower</font>

488
00:22:34,360 --> 00:22:37,810
<font color="#E5E5E5">the effective resistance that we see</font>

489
00:22:36,340 --> 00:22:40,050
through<font color="#E5E5E5"> the chip so</font><font color="#CCCCCC"> it has a little bit</font>

490
00:22:37,810 --> 00:22:42,790
less effect on the voltage level itself

491
00:22:40,050 --> 00:22:45,669
they'll still switch together<font color="#CCCCCC"> very fast</font>

492
00:22:42,790 --> 00:22:47,740
<font color="#E5E5E5">i only actually need</font><font color="#CCCCCC"> one switch because</font>

493
00:22:45,670 --> 00:22:49,860
<font color="#CCCCCC">I'm only</font><font color="#E5E5E5"> switching one thing only the</font>

494
00:22:47,740 --> 00:22:54,510
<font color="#E5E5E5">VDD towards the chip</font>

495
00:22:49,860 --> 00:22:57,870
so I've tied the y1v 1x1 signals

496
00:22:54,510 --> 00:23:00,480
together<font color="#E5E5E5"> and I've tied the y 0 Z 0 X 0</font>

497
00:22:57,870 --> 00:23:04,820
signals together<font color="#E5E5E5"> the same with the</font>

498
00:23:00,480 --> 00:23:11,370
control signals ABC so the outputs from

499
00:23:04,820 --> 00:23:14,750
<font color="#E5E5E5">x y and</font><font color="#CCCCCC"> z</font><font color="#E5E5E5"> 1 sorry the inputs to</font><font color="#CCCCCC"> XY and z</font>

500
00:23:11,370 --> 00:23:17,789
1 are coming from my power<font color="#E5E5E5"> supply and</font>

501
00:23:14,750 --> 00:23:20,820
those will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> the glitch voltage level</font>

502
00:23:17,789 --> 00:23:23,760
that<font color="#CCCCCC"> i said well the input 0 is the</font>

503
00:23:20,820 --> 00:23:25,799
normal power supply level that<font color="#CCCCCC"> I set and</font>

504
00:23:23,760 --> 00:23:27,720
then<font color="#E5E5E5"> the outputs x</font><font color="#CCCCCC"> y</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> z are</font><font color="#E5E5E5"> the</font>

505
00:23:25,799 --> 00:23:29,940
output actually<font color="#CCCCCC"> going to the target chip</font>

506
00:23:27,720 --> 00:23:32,850
so to<font color="#E5E5E5"> control this I just need two</font>

507
00:23:29,940 --> 00:23:35,309
signals<font color="#E5E5E5"> I'm running these to my</font><font color="#CCCCCC"> Atmel</font><font color="#E5E5E5"> X</font>

508
00:23:32,850 --> 00:23:38,730
<font color="#E5E5E5">Mega Development Board that</font><font color="#CCCCCC"> I use so the</font>

509
00:23:35,309 --> 00:23:41,970
enable pin<font color="#E5E5E5"> I run to the X mega port</font><font color="#CCCCCC"> a3</font>

510
00:23:38,730 --> 00:23:45,240
which allows me to enable or disable<font color="#CCCCCC"> the</font>

511
00:23:41,970 --> 00:23:48,210
output to<font color="#E5E5E5"> the chip entirely and then the</font>

512
00:23:45,240 --> 00:23:51,330
control pins<font color="#E5E5E5"> ABC I'm running to another</font>

513
00:23:48,210 --> 00:23:52,830
<font color="#E5E5E5">X mega port a</font><font color="#CCCCCC"> 0 and this is how I'm</font>

514
00:23:51,330 --> 00:24:00,449
going to switch between the normal and

515
00:23:52,830 --> 00:24:03,120
<font color="#CCCCCC">the glitch voltage levels so</font><font color="#E5E5E5"> this is the</font>

516
00:24:00,450 --> 00:24:06,029
<font color="#E5E5E5">actual circuit with</font><font color="#CCCCCC"> the max 4619 this</font><font color="#E5E5E5"> is</font>

517
00:24:03,120 --> 00:24:07,830
basically the whole<font color="#E5E5E5"> glitcher board</font><font color="#CCCCCC"> minus</font>

518
00:24:06,029 --> 00:24:10,889
<font color="#E5E5E5">the X mega that I use as a</font>

519
00:24:07,830 --> 00:24:12,539
<font color="#E5E5E5">microcontroller</font><font color="#CCCCCC"> I like to solderless</font>

520
00:24:10,889 --> 00:24:14,158
breadboards<font color="#CCCCCC"> they're they're</font><font color="#E5E5E5"> very</font>

521
00:24:12,539 --> 00:24:16,169
convenient<font color="#E5E5E5"> to work on they allow you to</font>

522
00:24:14,159 --> 00:24:20,610
change your ideas<font color="#CCCCCC"> very quickly and test</font>

523
00:24:16,169 --> 00:24:22,919
<font color="#CCCCCC">different things out any problems with</font>

524
00:24:20,610 --> 00:24:25,049
with high frequency<font color="#CCCCCC"> noise or anything</font>

525
00:24:22,919 --> 00:24:26,669
like<font color="#E5E5E5"> that really for most of the</font>

526
00:24:25,049 --> 00:24:28,049
projects that<font color="#E5E5E5"> I do I don't</font><font color="#CCCCCC"> notice too</font>

527
00:24:26,669 --> 00:24:29,880
much of a<font color="#E5E5E5"> problem with</font><font color="#CCCCCC"> it I'm able to</font>

528
00:24:28,049 --> 00:24:33,059
ignore it and<font color="#E5E5E5"> kind of do things the the</font>

529
00:24:29,880 --> 00:24:34,769
cheap<font color="#E5E5E5"> and easy way</font><font color="#CCCCCC"> so I enjoy</font><font color="#E5E5E5"> that I'm</font>

530
00:24:33,059 --> 00:24:38,220
able<font color="#CCCCCC"> to just pop a chip</font><font color="#E5E5E5"> into the</font>

531
00:24:34,769 --> 00:24:39,480
<font color="#CCCCCC">breadboard connect these wires and in a</font>

532
00:24:38,220 --> 00:24:46,559
few minutes<font color="#CCCCCC"> I've built a glacier like</font>

533
00:24:39,480 --> 00:24:49,110
this so this<font color="#E5E5E5"> is a picture of an LPC a12</font>

534
00:24:46,559 --> 00:24:50,639
chip<font color="#E5E5E5"> connected to the glitcher as you</font>

535
00:24:49,110 --> 00:24:53,519
can see I'm<font color="#CCCCCC"> very careful always</font><font color="#E5E5E5"> with my</font>

536
00:24:50,639 --> 00:24:55,979
wiring keep everything nice and neat

537
00:24:53,519 --> 00:24:58,370
but really as I said<font color="#CCCCCC"> the noise</font><font color="#E5E5E5"> and</font>

538
00:24:55,980 --> 00:25:00,169
things<font color="#E5E5E5"> that you see in most cases</font>

539
00:24:58,370 --> 00:25:01,639
it's<font color="#E5E5E5"> only a minor</font><font color="#CCCCCC"> annoyance and</font>

540
00:25:00,169 --> 00:25:03,470
<font color="#E5E5E5">everything's</font><font color="#CCCCCC"> actually still</font><font color="#E5E5E5"> going to</font>

541
00:25:01,640 --> 00:25:07,220
work so I<font color="#E5E5E5"> like this quick and dirty</font>

542
00:25:03,470 --> 00:25:11,870
method of<font color="#E5E5E5"> working this is another angle</font>

543
00:25:07,220 --> 00:25:13,850
of<font color="#E5E5E5"> the same same</font><font color="#CCCCCC"> glitcher setup again</font>

544
00:25:11,870 --> 00:25:17,000
showing<font color="#E5E5E5"> off the nice clean wiring that I</font>

545
00:25:13,850 --> 00:25:19,549
tend to do<font color="#E5E5E5"> so</font><font color="#CCCCCC"> here I have everything</font>

546
00:25:17,000 --> 00:25:22,820
labeled<font color="#E5E5E5"> the the blue</font><font color="#CCCCCC"> development board</font>

547
00:25:19,549 --> 00:25:26,629
is an<font color="#E5E5E5"> X mega a</font><font color="#CCCCCC"> 1 X plane board</font><font color="#E5E5E5"> this has</font>

548
00:25:22,820 --> 00:25:30,649
an<font color="#CCCCCC"> Atmel</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> negative which is an AVR that</font>

549
00:25:26,630 --> 00:25:34,669
runs at<font color="#E5E5E5"> 32</font><font color="#CCCCCC"> megahertz</font><font color="#E5E5E5"> then below that on</font>

550
00:25:30,649 --> 00:25:37,668
the<font color="#CCCCCC"> black breadboard I have the max 4619</font>

551
00:25:34,669 --> 00:25:40,429
<font color="#E5E5E5">glitter circuit you can</font><font color="#CCCCCC"> see that I have</font>

552
00:25:37,669 --> 00:25:41,990
a 10<font color="#CCCCCC"> ohm resistor</font><font color="#E5E5E5"> that I put in series</font>

553
00:25:40,429 --> 00:25:43,520
with the ground going<font color="#E5E5E5"> to be able to see</font>

554
00:25:41,990 --> 00:25:46,549
a 12<font color="#E5E5E5"> that's how I'm</font><font color="#CCCCCC"> doing the power</font>

555
00:25:43,520 --> 00:25:47,720
analysis so I simply<font color="#CCCCCC"> put that</font><font color="#E5E5E5"> in series</font>

556
00:25:46,549 --> 00:25:50,360
<font color="#CCCCCC">with ground and I connect the</font>

557
00:25:47,720 --> 00:25:52,580
<font color="#CCCCCC">oscilloscope probe to the side of the</font>

558
00:25:50,360 --> 00:25:54,020
resistor that the LPC chip is connected

559
00:25:52,580 --> 00:25:56,270
to<font color="#E5E5E5"> and that's going to be my power</font>

560
00:25:54,020 --> 00:25:58,100
analysis signal and then at the top

561
00:25:56,270 --> 00:26:00,679
right you can<font color="#CCCCCC"> see that there's the LPC</font>

562
00:25:58,100 --> 00:26:07,129
<font color="#E5E5E5">a12 that I've</font><font color="#CCCCCC"> mounted on a</font><font color="#E5E5E5"> breadboard</font>

563
00:26:00,679 --> 00:26:10,159
for testing for<font color="#CCCCCC"> the power supply</font><font color="#E5E5E5"> to</font>

564
00:26:07,130 --> 00:26:13,820
control the VDD levels to this chip<font color="#CCCCCC"> I</font>

565
00:26:10,159 --> 00:26:16,970
use a<font color="#CCCCCC"> benchtop</font><font color="#E5E5E5"> power supply so it has</font>

566
00:26:13,820 --> 00:26:18,799
two<font color="#CCCCCC"> outputs</font><font color="#E5E5E5"> the first output I can</font><font color="#CCCCCC"> set</font>

567
00:26:16,970 --> 00:26:20,779
the normal VDD level<font color="#CCCCCC"> that the chip will</font>

568
00:26:18,799 --> 00:26:22,250
run at and then I'm<font color="#E5E5E5"> going to use the</font>

569
00:26:20,779 --> 00:26:25,250
second output<font color="#E5E5E5"> and that's how I'm going</font>

570
00:26:22,250 --> 00:26:27,110
<font color="#CCCCCC">to adjust</font><font color="#E5E5E5"> the level of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> voltage drop</font>

571
00:26:25,250 --> 00:26:29,990
<font color="#E5E5E5">while I actually perform a glitch on the</font>

572
00:26:27,110 --> 00:26:31,908
chip there's a lots of<font color="#CCCCCC"> different options</font>

573
00:26:29,990 --> 00:26:34,100
actually<font color="#E5E5E5"> for supplying power to the chip</font>

574
00:26:31,909 --> 00:26:35,980
<font color="#E5E5E5">or you could build a circuit and be able</font>

575
00:26:34,100 --> 00:26:38,539
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have a digitally controllable</font>

576
00:26:35,980 --> 00:26:40,220
personally I like the hands-on method of

577
00:26:38,539 --> 00:26:42,649
having<font color="#E5E5E5"> a</font><font color="#CCCCCC"> benchtop power supply like this</font>

578
00:26:40,220 --> 00:26:44,240
again it lets me quickly connect

579
00:26:42,649 --> 00:26:47,330
<font color="#CCCCCC">different things and test different</font>

580
00:26:44,240 --> 00:26:49,250
ideas if I want and I find it a<font color="#CCCCCC"> very</font>

581
00:26:47,330 --> 00:26:51,139
<font color="#E5E5E5">nice way to work to actually be able to</font>

582
00:26:49,250 --> 00:26:53,960
<font color="#CCCCCC">adjust the knobs</font><font color="#E5E5E5"> and see the difference</font>

583
00:26:51,140 --> 00:26:57,279
in the output<font color="#CCCCCC"> and it's nice and quick it</font>

584
00:26:53,960 --> 00:26:57,279
easy just<font color="#E5E5E5"> to connect everything together</font>

585
00:26:59,179 --> 00:27:04,139
so this shows<font color="#E5E5E5"> the development board</font>

586
00:27:02,399 --> 00:27:06,689
together with the<font color="#CCCCCC"> breadboard</font><font color="#E5E5E5"> with a</font>

587
00:27:04,139 --> 00:27:09,629
<font color="#E5E5E5">glitcher circuit so this is essentially</font>

588
00:27:06,690 --> 00:27:12,210
<font color="#E5E5E5">the whole glitcher circuit - the target</font>

589
00:27:09,629 --> 00:27:15,178
<font color="#E5E5E5">board with the LPC chip and without the</font>

590
00:27:12,210 --> 00:27:16,859
power supply<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the very top we can see</font>

591
00:27:15,179 --> 00:27:19,440
where the inputs from<font color="#CCCCCC"> are the</font><font color="#E5E5E5"> adjustable</font>

592
00:27:16,859 --> 00:27:21,059
power supply will come from<font color="#E5E5E5"> so the white</font>

593
00:27:19,440 --> 00:27:24,179
wire<font color="#CCCCCC"> is going to be ground from</font><font color="#E5E5E5"> the</font>

594
00:27:21,059 --> 00:27:26,879
<font color="#E5E5E5">power supply</font><font color="#CCCCCC"> the red wire</font><font color="#E5E5E5"> is the normal</font>

595
00:27:24,179 --> 00:27:28,350
voltage level and the green wire<font color="#CCCCCC"> is the</font>

596
00:27:26,879 --> 00:27:30,959
second voltage<font color="#E5E5E5"> level that we'll use</font><font color="#CCCCCC"> for</font>

597
00:27:28,350 --> 00:27:33,029
<font color="#CCCCCC">the glitch then we have the</font><font color="#E5E5E5"> VDD and</font>

598
00:27:30,960 --> 00:27:36,119
ground<font color="#E5E5E5"> output towards the target chip</font>

599
00:27:33,029 --> 00:27:38,309
and then other<font color="#CCCCCC"> than this</font><font color="#E5E5E5"> we'll also have</font>

600
00:27:36,119 --> 00:27:41,129
<font color="#E5E5E5">the serial port the UART connected</font>

601
00:27:38,309 --> 00:27:43,499
between<font color="#E5E5E5"> the LPC chip and the explained</font>

602
00:27:41,129 --> 00:27:45,269
development board<font color="#E5E5E5"> but as far as the</font>

603
00:27:43,499 --> 00:27:48,470
glitching circuit goes this is the

604
00:27:45,269 --> 00:27:48,470
<font color="#E5E5E5">entire system right here</font>

605
00:27:52,489 --> 00:27:57,989
that's very<font color="#E5E5E5"> dark so I don't know how</font>

606
00:27:55,859 --> 00:28:01,350
well<font color="#E5E5E5"> you can can see this because of the</font>

607
00:27:57,989 --> 00:28:03,389
colors<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I have but this is the</font><font color="#CCCCCC"> Siad</font>

608
00:28:01,350 --> 00:28:05,908
assembler code that I run<font color="#E5E5E5"> inside of the</font>

609
00:28:03,389 --> 00:28:11,820
X mega chip<font color="#E5E5E5"> to actually control the</font>

610
00:28:05,909 --> 00:28:14,909
glitching so the the basic<font color="#E5E5E5"> concept is</font>

611
00:28:11,820 --> 00:28:17,668
that<font color="#CCCCCC"> I use</font><font color="#E5E5E5"> the out instruction on the</font>

612
00:28:14,909 --> 00:28:20,429
AVR chip<font color="#CCCCCC"> so the out instruction is a</font>

613
00:28:17,669 --> 00:28:22,320
single cycle opcode so this means that

614
00:28:20,429 --> 00:28:25,109
<font color="#E5E5E5">if we're going to execute a series of</font>

615
00:28:22,320 --> 00:28:28,529
out instructions<font color="#CCCCCC"> we can actually change</font>

616
00:28:25,109 --> 00:28:31,859
<font color="#CCCCCC">the output</font><font color="#E5E5E5"> signal on the port at every</font>

617
00:28:28,529 --> 00:28:35,009
<font color="#E5E5E5">clock cycle at 32 megahertz so that</font>

618
00:28:31,859 --> 00:28:37,559
means that we could<font color="#CCCCCC"> actually trigger a</font>

619
00:28:35,009 --> 00:28:40,049
glitch<font color="#E5E5E5"> that would have a length as low</font>

620
00:28:37,559 --> 00:28:41,789
as<font color="#CCCCCC"> thirty one point to five nanoseconds</font>

621
00:28:40,049 --> 00:28:44,249
<font color="#E5E5E5">it'll be a little bit</font><font color="#CCCCCC"> different than</font>

622
00:28:41,789 --> 00:28:47,580
that<font color="#CCCCCC"> actually because of</font><font color="#E5E5E5"> the switch on</font>

623
00:28:44,249 --> 00:28:49,830
<font color="#CCCCCC">and off time within the</font><font color="#E5E5E5"> max</font><font color="#CCCCCC"> 4619 but</font>

624
00:28:47,580 --> 00:28:53,489
generally<font color="#CCCCCC"> speaking it</font><font color="#E5E5E5"> can do quite quite</font>

625
00:28:49,830 --> 00:28:56,879
short glitches so what<font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> doing here is</font>

626
00:28:53,489 --> 00:28:59,940
<font color="#CCCCCC">i have a series of out</font><font color="#E5E5E5"> instructions that</font>

627
00:28:56,879 --> 00:29:02,809
<font color="#E5E5E5">will set</font><font color="#CCCCCC"> the level on this output pin</font>

628
00:28:59,940 --> 00:29:06,629
<font color="#E5E5E5">and before I call my glitch function</font><font color="#CCCCCC"> I</font>

629
00:29:02,809 --> 00:29:09,418
set up some variables<font color="#E5E5E5"> to</font><font color="#CCCCCC"> define what</font>

630
00:29:06,629 --> 00:29:12,540
<font color="#E5E5E5">kind of a glitch waveform that I want so</font>

631
00:29:09,419 --> 00:29:15,690
I can<font color="#CCCCCC"> have</font><font color="#E5E5E5"> it anywhere from one side</font>

632
00:29:12,540 --> 00:29:17,909
at<font color="#CCCCCC"> 32 megahertz</font><font color="#E5E5E5"> up to</font><font color="#CCCCCC"> 8</font><font color="#E5E5E5"> o'clock cycles</font>

633
00:29:15,690 --> 00:29:20,460
at 32 megahertz<font color="#E5E5E5"> it can be changed very</font>

634
00:29:17,910 --> 00:29:21,690
<font color="#E5E5E5">easily within software and I don't have</font>

635
00:29:20,460 --> 00:29:24,570
to have a separate routine for<font color="#E5E5E5"> each</font>

636
00:29:21,690 --> 00:29:26,400
different<font color="#E5E5E5"> length of glitch so this lets</font>

637
00:29:24,570 --> 00:29:28,500
me<font color="#E5E5E5"> kind of change things on the</font><font color="#CCCCCC"> fly and</font>

638
00:29:26,400 --> 00:29:37,110
still have the flexibility to<font color="#CCCCCC"> have these</font>

639
00:29:28,500 --> 00:29:41,040
very short glitches so to<font color="#E5E5E5"> start trying</font>

640
00:29:37,110 --> 00:29:43,800
to<font color="#E5E5E5"> glitch the the chip the easiest way</font>

641
00:29:41,040 --> 00:29:46,320
is<font color="#E5E5E5"> if</font><font color="#CCCCCC"> I'm able to execute</font><font color="#E5E5E5"> a glitch</font>

642
00:29:43,800 --> 00:29:48,510
<font color="#E5E5E5">against code that I know exactly what</font>

643
00:29:46,320 --> 00:29:50,100
the code is doing<font color="#E5E5E5"> and since these</font><font color="#CCCCCC"> are</font>

644
00:29:48,510 --> 00:29:52,170
common microcontrollers I could buy a

645
00:29:50,100 --> 00:29:58,459
blank chip and I can load my<font color="#CCCCCC"> own code</font>

646
00:29:52,170 --> 00:30:01,470
inside<font color="#E5E5E5"> so using the GCC arm tool chain</font><font color="#CCCCCC"> I</font>

647
00:29:58,460 --> 00:30:03,630
write some<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> C code so what I have</font>

648
00:30:01,470 --> 00:30:07,830
<font color="#CCCCCC">here is is a while</font><font color="#E5E5E5"> loop that</font><font color="#CCCCCC"> will</font>

649
00:30:03,630 --> 00:30:09,090
continue executing<font color="#E5E5E5"> forever and I</font><font color="#CCCCCC"> initial</font>

650
00:30:07,830 --> 00:30:12,510
<font color="#CCCCCC">I have two variables that I'll use</font>

651
00:30:09,090 --> 00:30:15,570
inside<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this loop</font><font color="#E5E5E5"> a and B and so I'll</font>

652
00:30:12,510 --> 00:30:17,970
initialize B to a value that I<font color="#CCCCCC"> have set</font>

653
00:30:15,570 --> 00:30:19,980
as number of<font color="#E5E5E5"> glitch loops which in the</font>

654
00:30:17,970 --> 00:30:24,870
case<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this test I actually have set to</font>

655
00:30:19,980 --> 00:30:26,550
16<font color="#CCCCCC"> I will toggle some GPIO pins</font><font color="#E5E5E5"> this</font>

656
00:30:24,870 --> 00:30:28,320
allows me<font color="#CCCCCC"> to have nice synchronization</font>

657
00:30:26,550 --> 00:30:30,060
between the LPC chip and the AVR chip

658
00:30:28,320 --> 00:30:33,810
that will do glitching so that I have my

659
00:30:30,060 --> 00:30:35,909
timing<font color="#E5E5E5"> nice and precise and then I have</font>

660
00:30:33,810 --> 00:30:38,100
in the middle of for loop<font color="#E5E5E5"> so this for</font>

661
00:30:35,910 --> 00:30:41,880
loop is going<font color="#E5E5E5"> to increment the a</font>

662
00:30:38,100 --> 00:30:43,439
<font color="#E5E5E5">variable from</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> until it reaches the the</font>

663
00:30:41,880 --> 00:30:46,050
total number of<font color="#CCCCCC"> glitches</font><font color="#E5E5E5"> who you want to</font>

664
00:30:43,440 --> 00:30:48,720
<font color="#E5E5E5">do and during this loop it's going to</font>

665
00:30:46,050 --> 00:30:50,610
decrement<font color="#CCCCCC"> the B register so what</font><font color="#E5E5E5"> this</font>

666
00:30:48,720 --> 00:30:53,790
<font color="#E5E5E5">does</font><font color="#CCCCCC"> is normally at the end of the loop</font>

667
00:30:50,610 --> 00:30:55,919
<font color="#CCCCCC">we should know</font><font color="#E5E5E5"> that the a variable is</font>

668
00:30:53,790 --> 00:30:58,050
<font color="#E5E5E5">going to end up being 16 because that's</font>

669
00:30:55,920 --> 00:31:03,540
how I have the num which loops<font color="#CCCCCC"> defined</font>

670
00:30:58,050 --> 00:31:06,360
and the B variable<font color="#CCCCCC"> should always be</font><font color="#E5E5E5"> 0 at</font>

671
00:31:03,540 --> 00:31:08,430
the<font color="#E5E5E5"> end of this while loop then I am</font>

672
00:31:06,360 --> 00:31:11,459
<font color="#E5E5E5">checking to see a are the a and the B</font>

673
00:31:08,430 --> 00:31:15,360
values actually<font color="#E5E5E5"> what I expect if the</font>

674
00:31:11,460 --> 00:31:17,190
code is operating normally<font color="#CCCCCC"> then the the</font>

675
00:31:15,360 --> 00:31:19,020
first condition will be true<font color="#CCCCCC"> a equals</font>

676
00:31:17,190 --> 00:31:21,720
<font color="#E5E5E5">number of glitched loops and B equals 0</font>

677
00:31:19,020 --> 00:31:24,360
in this case<font color="#E5E5E5"> I'm printing</font><font color="#CCCCCC"> out the serial</font>

678
00:31:21,720 --> 00:31:25,680
port just<font color="#E5E5E5"> a dot</font><font color="#CCCCCC"> this indicates</font><font color="#E5E5E5"> that</font>

679
00:31:24,360 --> 00:31:26,508
there was no glitch that the code

680
00:31:25,680 --> 00:31:29,159
operated normal

681
00:31:26,509 --> 00:31:31,379
but if this check of the a<font color="#E5E5E5"> and the B</font>

682
00:31:29,159 --> 00:31:33,600
variables<font color="#CCCCCC"> failed that</font><font color="#E5E5E5"> they have a</font>

683
00:31:31,379 --> 00:31:35,549
different value<font color="#E5E5E5"> then I'm going to print</font>

684
00:31:33,600 --> 00:31:37,498
<font color="#E5E5E5">out</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> serial port what those values</font>

685
00:31:35,549 --> 00:31:38,759
were and that<font color="#E5E5E5"> indicates</font><font color="#CCCCCC"> that some kind</font>

686
00:31:37,499 --> 00:31:40,740
<font color="#CCCCCC">of a</font><font color="#E5E5E5"> glitch actually occurred that</font><font color="#CCCCCC"> the</font>

687
00:31:38,759 --> 00:31:50,820
code did<font color="#E5E5E5"> not execute normally like it</font>

688
00:31:40,740 --> 00:31:52,619
would so I wrote this test code<font color="#CCCCCC"> in C</font><font color="#E5E5E5"> so</font>

689
00:31:50,820 --> 00:31:54,840
we could actually look at the assembler

690
00:31:52,619 --> 00:31:56,610
code that would<font color="#E5E5E5"> be generated</font><font color="#CCCCCC"> by GCC</font><font color="#E5E5E5"> to</font>

691
00:31:54,840 --> 00:31:57,990
see exactly<font color="#E5E5E5"> what instructions are going</font>

692
00:31:56,610 --> 00:32:00,449
to be executed<font color="#E5E5E5"> that we're going to try</font>

693
00:31:57,990 --> 00:32:02,220
to glitch<font color="#E5E5E5"> another option would have been</font>

694
00:32:00,450 --> 00:32:05,039
to write the code<font color="#CCCCCC"> directly</font><font color="#E5E5E5"> an assembler</font>

695
00:32:02,220 --> 00:32:06,419
but it's such a simple<font color="#E5E5E5"> test program and</font>

696
00:32:05,039 --> 00:32:09,210
the idea is<font color="#E5E5E5"> only to see if it has an</font>

697
00:32:06,419 --> 00:32:12,299
effect<font color="#CCCCCC"> so I prefer</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> work and see it's</font>

698
00:32:09,210 --> 00:32:13,889
a<font color="#E5E5E5"> nice easy convenient</font><font color="#CCCCCC"> way to work it's</font>

699
00:32:12,299 --> 00:32:16,139
a little bit<font color="#E5E5E5"> nicer</font><font color="#CCCCCC"> than having to write</font>

700
00:32:13,889 --> 00:32:17,969
an assembler for everything<font color="#E5E5E5"> but we can</font>

701
00:32:16,139 --> 00:32:19,860
see that<font color="#CCCCCC"> what the compiler did here is</font>

702
00:32:17,970 --> 00:32:23,429
<font color="#E5E5E5">really quite simple except for all the</font>

703
00:32:19,860 --> 00:32:26,178
<font color="#E5E5E5">extra</font><font color="#CCCCCC"> noise</font><font color="#E5E5E5"> from the listing but</font>

704
00:32:23,429 --> 00:32:29,309
<font color="#E5E5E5">basically it starts with a equals zero a</font>

705
00:32:26,179 --> 00:32:31,049
decrement B it increments<font color="#CCCCCC"> a and it</font>

706
00:32:29,309 --> 00:32:39,178
<font color="#E5E5E5">checks to</font><font color="#CCCCCC"> see if we've</font><font color="#E5E5E5"> hit the end of</font>

707
00:32:31,049 --> 00:32:41,940
the number<font color="#CCCCCC"> of glitch loops yet so this</font>

708
00:32:39,179 --> 00:32:44,070
video is<font color="#CCCCCC"> showing what I feed through</font>

709
00:32:41,940 --> 00:32:46,320
mini-com when I'm<font color="#CCCCCC"> running the test</font><font color="#E5E5E5"> code</font>

710
00:32:44,070 --> 00:32:49,559
so all these dots mean that no glitch

711
00:32:46,320 --> 00:32:51,090
has happened so I waiting for<font color="#CCCCCC"> this</font><font color="#E5E5E5"> for</font>

712
00:32:49,559 --> 00:32:53,490
<font color="#E5E5E5">loop to start and then I'll do a quick</font>

713
00:32:51,090 --> 00:32:54,959
glitch<font color="#CCCCCC"> and as this</font><font color="#E5E5E5"> is running I'm</font>

714
00:32:53,490 --> 00:32:57,029
adjusting<font color="#E5E5E5"> the</font><font color="#CCCCCC"> voltage level on the power</font>

715
00:32:54,960 --> 00:32:59,249
supply<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can see when I start to</font>

716
00:32:57,029 --> 00:33:00,960
lower the<font color="#CCCCCC"> voltage on</font><font color="#E5E5E5"> the power supply</font><font color="#CCCCCC"> we</font>

717
00:32:59,249 --> 00:33:03,450
start to<font color="#E5E5E5"> see some</font><font color="#CCCCCC"> strange responses come</font>

718
00:33:00,960 --> 00:33:05,940
out of the chip so all of<font color="#E5E5E5"> these lines</font>

719
00:33:03,450 --> 00:33:08,850
<font color="#E5E5E5">showing what a and</font><font color="#CCCCCC"> B are are indicating</font>

720
00:33:05,940 --> 00:33:10,710
<font color="#CCCCCC">that a glitch</font><font color="#E5E5E5"> occurred the X's that come</font>

721
00:33:08,850 --> 00:33:13,529
up<font color="#E5E5E5"> that indicates that the chip reset</font>

722
00:33:10,710 --> 00:33:14,789
and we can see a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> X's come up</font>

723
00:33:13,529 --> 00:33:17,429
there at once as I've dropped the

724
00:33:14,789 --> 00:33:18,929
<font color="#E5E5E5">voltage level even lower so because I</font>

725
00:33:17,429 --> 00:33:21,360
start to see a lot of resets at the

726
00:33:18,929 --> 00:33:22,889
<font color="#E5E5E5">voltage</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> so low at that point I</font>

727
00:33:21,360 --> 00:33:25,110
increase the voltage<font color="#E5E5E5"> level a little</font><font color="#CCCCCC"> bit</font>

728
00:33:22,889 --> 00:33:27,299
<font color="#CCCCCC">and what I'm doing here is trying to</font>

729
00:33:25,110 --> 00:33:30,269
<font color="#E5E5E5">find kind of a sweet</font><font color="#CCCCCC"> spot</font><font color="#E5E5E5"> where the chip</font>

730
00:33:27,299 --> 00:33:32,070
runs<font color="#E5E5E5"> and it still has the</font><font color="#CCCCCC"> most strange</font>

731
00:33:30,269 --> 00:33:35,029
effects<font color="#E5E5E5"> coming when I glitch inside this</font>

732
00:33:32,070 --> 00:33:36,990
for<font color="#E5E5E5"> loop</font><font color="#CCCCCC"> so we can see that normally the</font>

733
00:33:35,029 --> 00:33:39,360
value at a should

734
00:33:36,990 --> 00:33:41,610
<font color="#E5E5E5">x10 and the value in B should be zero</font>

735
00:33:39,360 --> 00:33:44,159
but<font color="#E5E5E5"> we got all kinds of</font><font color="#CCCCCC"> different values</font>

736
00:33:41,610 --> 00:33:48,270
<font color="#CCCCCC">depending on exactly which</font><font color="#E5E5E5"> instructions</font>

737
00:33:44,160 --> 00:33:51,600
that we glitched<font color="#E5E5E5"> within the loop</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

738
00:33:48,270 --> 00:33:54,540
lots of results<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are like a is five</font>

739
00:33:51,600 --> 00:33:57,620
zero zero<font color="#CCCCCC"> three zero zero nine</font><font color="#E5E5E5"> this will</font>

740
00:33:54,540 --> 00:34:01,530
be<font color="#E5E5E5"> because a is actually pointing</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

741
00:33:57,620 --> 00:34:05,129
<font color="#CCCCCC">location within</font><font color="#E5E5E5"> RAM</font><font color="#CCCCCC"> where that variable</font>

742
00:34:01,530 --> 00:34:06,420
was stored so because it wasn't just<font color="#E5E5E5"> a</font>

743
00:34:05,130 --> 00:34:07,860
loop where<font color="#CCCCCC"> it was incrementing registers</font>

744
00:34:06,420 --> 00:34:09,869
it would<font color="#E5E5E5"> actually had variables in round</font>

745
00:34:07,860 --> 00:34:11,668
so we<font color="#E5E5E5"> ended up with a pointer instead</font><font color="#CCCCCC"> of</font>

746
00:34:09,869 --> 00:34:13,830
the actual value there because of where

747
00:34:11,668 --> 00:34:15,239
the glitch<font color="#E5E5E5"> broke the loop but we have a</font>

748
00:34:13,830 --> 00:34:16,799
<font color="#E5E5E5">variety of</font><font color="#CCCCCC"> different effects but the</font>

749
00:34:15,239 --> 00:34:18,239
main point here is<font color="#CCCCCC"> just</font><font color="#E5E5E5"> that we're</font>

750
00:34:16,800 --> 00:34:20,580
<font color="#E5E5E5">having some effect on the chip the code</font>

751
00:34:18,239 --> 00:34:24,089
isn't<font color="#CCCCCC"> operating normally all that I'm</font>

752
00:34:20,580 --> 00:34:25,918
doing<font color="#CCCCCC"> at this point is dropping the VDD</font>

753
00:34:24,090 --> 00:34:28,590
supply to the chip very briefly during

754
00:34:25,918 --> 00:34:31,500
<font color="#E5E5E5">that loop so by</font><font color="#CCCCCC"> doing this kind</font><font color="#E5E5E5"> of a</font>

755
00:34:28,590 --> 00:34:33,450
test<font color="#CCCCCC"> this lets</font><font color="#E5E5E5"> me have a nice area</font><font color="#CCCCCC"> to</font>

756
00:34:31,500 --> 00:34:36,119
target where<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> kind of tune things</font>

757
00:34:33,449 --> 00:34:39,000
<font color="#E5E5E5">in and find what length of a glitch and</font>

758
00:34:36,119 --> 00:34:47,250
what voltage<font color="#E5E5E5"> levels will actually most</font>

759
00:34:39,000 --> 00:34:49,409
likely<font color="#E5E5E5"> have a good effect</font><font color="#CCCCCC"> on the chip so</font>

760
00:34:47,250 --> 00:34:53,190
this is showing the oscilloscope image

761
00:34:49,409 --> 00:34:55,800
along with the<font color="#E5E5E5"> the mini-com screenshot</font>

762
00:34:53,190 --> 00:34:58,590
showing<font color="#E5E5E5"> of actually glitching during</font>

763
00:34:55,800 --> 00:35:01,680
this target loop so the top channel is

764
00:34:58,590 --> 00:35:05,040
<font color="#E5E5E5">our power analysis channel the middle</font>

765
00:35:01,680 --> 00:35:07,470
channel there<font color="#CCCCCC"> is showing a</font><font color="#E5E5E5"> GPIO pin it's</font>

766
00:35:05,040 --> 00:35:11,509
<font color="#E5E5E5">pulling</font><font color="#CCCCCC"> the GPIO low while it's within</font>

767
00:35:07,470 --> 00:35:11,509
<font color="#E5E5E5">our four loops that we're targeting</font><font color="#CCCCCC"> and</font>

768
00:35:12,350 --> 00:35:16,710
the bottom<font color="#E5E5E5"> line where there was just</font>

769
00:35:14,310 --> 00:35:18,660
<font color="#E5E5E5">reset so it's always high during this so</font>

770
00:35:16,710 --> 00:35:20,190
we<font color="#E5E5E5"> can see it's attempting to glitch and</font>

771
00:35:18,660 --> 00:35:22,410
it's attempting to glitch and then

772
00:35:20,190 --> 00:35:24,210
finally it stops<font color="#E5E5E5"> and we could see that</font>

773
00:35:22,410 --> 00:35:27,450
when<font color="#E5E5E5"> the glitch actually had an effect</font>

774
00:35:24,210 --> 00:35:30,480
our loop got much shorter<font color="#CCCCCC"> we can see</font>

775
00:35:27,450 --> 00:35:33,540
because the<font color="#CCCCCC"> GPIO</font><font color="#E5E5E5"> was held lower for less</font>

776
00:35:30,480 --> 00:35:35,520
time<font color="#CCCCCC"> and on the bottom window there we</font>

777
00:35:33,540 --> 00:35:37,500
can see<font color="#E5E5E5"> that we ended up with</font><font color="#CCCCCC"> a value a</font>

778
00:35:35,520 --> 00:35:39,450
being<font color="#E5E5E5"> 5 zero zero three</font><font color="#CCCCCC"> zero zero zero</font>

779
00:35:37,500 --> 00:35:42,630
<font color="#E5E5E5">eight so again it was set to the pointer</font>

780
00:35:39,450 --> 00:35:45,390
<font color="#CCCCCC">value not the</font><font color="#E5E5E5"> actual value</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

781
00:35:42,630 --> 00:35:46,020
variable<font color="#E5E5E5"> and we can see</font><font color="#CCCCCC"> that the B</font>

782
00:35:45,390 --> 00:35:47,900
variable

783
00:35:46,020 --> 00:35:50,749
ended up with hex<font color="#CCCCCC"> E</font>

784
00:35:47,900 --> 00:35:53,480
<font color="#CCCCCC">soby would</font><font color="#E5E5E5"> have started out with hex</font><font color="#CCCCCC"> ten</font>

785
00:35:50,749 --> 00:35:55,490
<font color="#E5E5E5">and it got decremented twice</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> F and</font>

786
00:35:53,480 --> 00:35:57,410
<font color="#E5E5E5">then</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> e and then at that</font><font color="#CCCCCC"> point we</font>

787
00:35:55,490 --> 00:36:02,629
broke out of<font color="#E5E5E5"> the loop</font><font color="#CCCCCC"> so the loop is</font>

788
00:35:57,410 --> 00:36:04,129
shorter and the B<font color="#E5E5E5"> variable matches the</font>

789
00:36:02,630 --> 00:36:10,400
length of the loop<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it didn't</font>

790
00:36:04,130 --> 00:36:12,769
count<font color="#E5E5E5"> down all the way this is showing</font>

791
00:36:10,400 --> 00:36:14,749
several<font color="#CCCCCC"> screenshots of glitching and</font>

792
00:36:12,769 --> 00:36:17,390
<font color="#E5E5E5">seeing different effects out of the chip</font>

793
00:36:14,749 --> 00:36:20,749
so at the top<font color="#E5E5E5"> left we</font><font color="#CCCCCC"> have a screenshot</font>

794
00:36:17,390 --> 00:36:22,578
<font color="#E5E5E5">of when we did the glitch but it didn't</font>

795
00:36:20,749 --> 00:36:26,118
<font color="#E5E5E5">actually have any effect so the ending</font>

796
00:36:22,579 --> 00:36:29,630
result<font color="#E5E5E5"> in variable a was hex 10 and B</font>

797
00:36:26,119 --> 00:36:32,480
was<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> below</font><font color="#CCCCCC"> that we can</font><font color="#E5E5E5"> see that the</font>

798
00:36:29,630 --> 00:36:34,700
glitch had an effect a ended up with the

799
00:36:32,480 --> 00:36:38,539
<font color="#CCCCCC">normal value but B ended up with the</font>

800
00:36:34,700 --> 00:36:40,009
value f-f-f-f-f-f-f one of so what has

801
00:36:38,539 --> 00:36:41,599
<font color="#CCCCCC">actually happened here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> we can see</font>

802
00:36:40,009 --> 00:36:45,170
<font color="#E5E5E5">that the loop was extended a little</font><font color="#CCCCCC"> bit</font>

803
00:36:41,599 --> 00:36:47,509
and so the B<font color="#E5E5E5"> variable actually got</font>

804
00:36:45,170 --> 00:36:50,359
decremented more times than normal so it

805
00:36:47,509 --> 00:36:52,400
ended<font color="#CCCCCC"> up</font><font color="#E5E5E5"> with the wrong value at the top</font>

806
00:36:50,359 --> 00:36:54,619
<font color="#E5E5E5">right</font><font color="#CCCCCC"> we can see again that</font><font color="#E5E5E5"> the loop</font>

807
00:36:52,400 --> 00:36:57,589
broke early we have a being<font color="#E5E5E5"> set to</font><font color="#CCCCCC"> a</font>

808
00:36:54,619 --> 00:36:59,420
pointer value<font color="#E5E5E5"> and then we have B set to</font>

809
00:36:57,589 --> 00:37:02,180
hex<font color="#CCCCCC"> e</font><font color="#E5E5E5"> instead of being decremented all</font>

810
00:36:59,420 --> 00:37:04,220
the way down to<font color="#CCCCCC"> zero and at the bottom</font>

811
00:37:02,180 --> 00:37:07,160
<font color="#CCCCCC">right we have another</font><font color="#E5E5E5"> result that comes</font>

812
00:37:04,220 --> 00:37:09,348
up<font color="#E5E5E5"> and again it's similar to the one at</font>

813
00:37:07,160 --> 00:37:12,739
the<font color="#E5E5E5"> bottom left but in this case B was</font>

814
00:37:09,349 --> 00:37:19,489
decremented down to f-f-f-f-f-f-f<font color="#CCCCCC"> 2</font>

815
00:37:12,739 --> 00:37:20,989
instead so now if we<font color="#E5E5E5"> address the glitch</font>

816
00:37:19,489 --> 00:37:24,109
to<font color="#E5E5E5"> hit at a different part of the loop</font>

817
00:37:20,989 --> 00:37:25,849
<font color="#CCCCCC">I've</font><font color="#E5E5E5"> changed the timing so I'm waiting a</font>

818
00:37:24,109 --> 00:37:28,430
few<font color="#E5E5E5"> more clock cycles before</font><font color="#CCCCCC"> I glitch</font>

819
00:37:25,849 --> 00:37:30,589
here it has an effect again so we can

820
00:37:28,430 --> 00:37:32,450
<font color="#CCCCCC">see that the the loop was shortened</font>

821
00:37:30,589 --> 00:37:34,549
because<font color="#E5E5E5"> of the glitch we broke out</font><font color="#CCCCCC"> of</font>

822
00:37:32,450 --> 00:37:36,799
<font color="#CCCCCC">this for loop and we can see again that</font>

823
00:37:34,549 --> 00:37:39,288
<font color="#E5E5E5">the variable a is set to this pointer</font>

824
00:37:36,799 --> 00:37:42,950
value<font color="#E5E5E5"> it tends to get left at and the</font>

825
00:37:39,289 --> 00:37:44,779
variable<font color="#E5E5E5"> V is now set to hex a so the</font>

826
00:37:42,950 --> 00:37:46,999
variable D got decremented a few more

827
00:37:44,779 --> 00:37:51,999
times<font color="#E5E5E5"> because we waited further through</font>

828
00:37:46,999 --> 00:37:55,839
the<font color="#E5E5E5"> for</font><font color="#CCCCCC"> loop to</font><font color="#E5E5E5"> glitch and here we have</font>

829
00:37:51,999 --> 00:37:57,859
screenshots showing the different

830
00:37:55,839 --> 00:38:00,109
<font color="#E5E5E5">results that</font><font color="#CCCCCC"> we have when we glitch at</font>

831
00:37:57,859 --> 00:38:01,910
at this<font color="#E5E5E5"> timing location versus the first</font>

832
00:38:00,109 --> 00:38:05,000
one<font color="#E5E5E5"> so we waited through a</font>

833
00:38:01,910 --> 00:38:06,319
<font color="#E5E5E5">four more</font><font color="#CCCCCC"> rounds of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> for-loop now</font>

834
00:38:05,000 --> 00:38:08,240
something else<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we can notice in</font>

835
00:38:06,320 --> 00:38:11,120
<font color="#E5E5E5">these images</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> especially at</font>

836
00:38:08,240 --> 00:38:13,100
the top left<font color="#E5E5E5"> image you can see when the</font>

837
00:38:11,120 --> 00:38:14,630
<font color="#CCCCCC">fore loop executes</font><font color="#E5E5E5"> and we can see a</font>

838
00:38:13,100 --> 00:38:18,259
little<font color="#CCCCCC"> pattern there</font><font color="#E5E5E5"> in that pattern we</font>

839
00:38:14,630 --> 00:38:19,400
see repeating<font color="#CCCCCC"> exactly 16 times so from</font>

840
00:38:18,260 --> 00:38:21,350
the power analysis we don't necessarily

841
00:38:19,400 --> 00:38:23,240
know what instructions<font color="#E5E5E5"> execute but it</font>

842
00:38:21,350 --> 00:38:25,730
really<font color="#CCCCCC"> is very clear that there's a for</font>

843
00:38:23,240 --> 00:38:28,069
loop<font color="#E5E5E5"> that's executing exactly 16 times</font>

844
00:38:25,730 --> 00:38:29,870
<font color="#E5E5E5">and if we compare to the bottom left</font>

845
00:38:28,070 --> 00:38:32,210
<font color="#E5E5E5">image then you see that it hasn't</font>

846
00:38:29,870 --> 00:38:34,850
executed<font color="#E5E5E5"> 16 times you see</font><font color="#CCCCCC"> it executes</font>

847
00:38:32,210 --> 00:38:36,710
about<font color="#CCCCCC"> five times</font><font color="#E5E5E5"> and then we have the</font>

848
00:38:34,850 --> 00:38:38,870
the glitch<font color="#CCCCCC"> the big spike on</font><font color="#E5E5E5"> the the</font>

849
00:38:36,710 --> 00:38:41,450
power consumption<font color="#CCCCCC"> and then it completes</font>

850
00:38:38,870 --> 00:38:43,730
one<font color="#E5E5E5"> more loop and then it exits so using</font>

851
00:38:41,450 --> 00:38:45,560
this power analysis is<font color="#E5E5E5"> very nice to have</font>

852
00:38:43,730 --> 00:38:47,600
a much better<font color="#E5E5E5"> idea of what's going on</font>

853
00:38:45,560 --> 00:38:49,130
<font color="#E5E5E5">inside the chip it doesn't tell you</font>

854
00:38:47,600 --> 00:39:00,049
<font color="#CCCCCC">everything but you can really get a lot</font>

855
00:38:49,130 --> 00:39:05,930
<font color="#E5E5E5">of clues out of it so now this is</font>

856
00:39:00,050 --> 00:39:07,730
<font color="#CCCCCC">showing a</font><font color="#E5E5E5"> video of from reset we can see</font>

857
00:39:05,930 --> 00:39:09,470
the<font color="#E5E5E5"> channel for there the bottom</font><font color="#CCCCCC"> one in</font>

858
00:39:07,730 --> 00:39:11,270
the oscilloscope<font color="#E5E5E5"> is the reset signal so</font>

859
00:39:09,470 --> 00:39:13,580
on from<font color="#CCCCCC"> the rising edge of reset is</font>

860
00:39:11,270 --> 00:39:15,200
where we're starting<font color="#E5E5E5"> to trigger and then</font>

861
00:39:13,580 --> 00:39:19,490
the top trace again is the<font color="#CCCCCC"> power</font>

862
00:39:15,200 --> 00:39:21,859
analysis<font color="#CCCCCC"> and as it</font><font color="#E5E5E5"> begins here it's</font>

863
00:39:19,490 --> 00:39:23,450
entering into<font color="#E5E5E5"> the application mode and</font>

864
00:39:21,860 --> 00:39:26,690
we're not able<font color="#CCCCCC"> to enter the</font><font color="#E5E5E5"> bootloader</font>

865
00:39:23,450 --> 00:39:29,480
mode because we have the no<font color="#CCCCCC"> ISP set but</font>

866
00:39:26,690 --> 00:39:31,340
by glitching near the location<font color="#E5E5E5"> where</font>

867
00:39:29,480 --> 00:39:32,360
previously<font color="#E5E5E5"> we saw the difference between</font>

868
00:39:31,340 --> 00:39:35,380
entering bootloader

869
00:39:32,360 --> 00:39:39,170
or entering application we<font color="#E5E5E5"> can actually</font>

870
00:39:35,380 --> 00:39:41,240
glitch at this spot and we're<font color="#CCCCCC"> able to</font>

871
00:39:39,170 --> 00:39:42,320
see very clearly on the power analysis

872
00:39:41,240 --> 00:39:44,479
<font color="#E5E5E5">that instead of going</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font>

873
00:39:42,320 --> 00:39:47,660
application like it is now<font color="#E5E5E5"> when the</font>

874
00:39:44,480 --> 00:39:50,470
glitch finally hits and lands<font color="#E5E5E5"> the</font>

875
00:39:47,660 --> 00:39:52,399
following trace on the power analysis is

876
00:39:50,470 --> 00:39:55,040
<font color="#CCCCCC">showing</font><font color="#E5E5E5"> that we're going into the</font>

877
00:39:52,400 --> 00:39:56,420
<font color="#E5E5E5">bootloader instead we can verify this by</font>

878
00:39:55,040 --> 00:39:59,200
sending<font color="#CCCCCC"> a command</font><font color="#E5E5E5"> to the chip and it</font>

879
00:39:56,420 --> 00:40:04,340
does<font color="#CCCCCC"> actually respond to</font><font color="#E5E5E5"> the bootloader</font>

880
00:39:59,200 --> 00:40:08,210
<font color="#E5E5E5">so after we've done this in in my very</font>

881
00:40:04,340 --> 00:40:10,490
simple<font color="#E5E5E5"> X mega code what I've done is</font>

882
00:40:08,210 --> 00:40:13,970
<font color="#E5E5E5">instead of inch in implementing the</font>

883
00:40:10,490 --> 00:40:15,558
entire isp code<font color="#E5E5E5"> myself</font><font color="#CCCCCC"> i simply do a</font>

884
00:40:13,970 --> 00:40:19,368
serial port<font color="#CCCCCC"> pass</font><font color="#E5E5E5"> through</font>

885
00:40:15,559 --> 00:40:20,779
so I run this process<font color="#CCCCCC"> I glitch I'm</font><font color="#E5E5E5"> able</font>

886
00:40:19,369 --> 00:40:24,459
to<font color="#E5E5E5"> enter the bootloader even though it's</font>

887
00:40:20,779 --> 00:40:27,859
been disabled<font color="#E5E5E5"> and then after this step I</font>

888
00:40:24,459 --> 00:40:29,808
<font color="#E5E5E5">can drop back to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> command line</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font>

889
00:40:27,859 --> 00:40:32,749
can use one of<font color="#E5E5E5"> the commonly available</font>

890
00:40:29,809 --> 00:40:36,890
tools<font color="#E5E5E5"> this is now able</font><font color="#CCCCCC"> to read the</font><font color="#E5E5E5"> flash</font>

891
00:40:32,749 --> 00:40:38,839
<font color="#CCCCCC">out of an LPC 1343 chip so it</font><font color="#E5E5E5"> reads it</font>

892
00:40:36,890 --> 00:40:40,189
through the<font color="#E5E5E5"> normal isp interface because</font>

893
00:40:38,839 --> 00:40:42,769
as far<font color="#E5E5E5"> as</font><font color="#CCCCCC"> its concerned this is an</font>

894
00:40:40,189 --> 00:40:47,449
unlocked chip<font color="#E5E5E5"> we can see the Flash</font>

895
00:40:42,769 --> 00:40:49,879
content<font color="#E5E5E5"> and it really</font><font color="#CCCCCC"> is is just that</font>

896
00:40:47,449 --> 00:40:53,089
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> we've been able to identify</font><font color="#E5E5E5"> the</font>

897
00:40:49,880 --> 00:40:54,559
locations in the boot<font color="#E5E5E5"> ROM</font><font color="#CCCCCC"> startup where</font>

898
00:40:53,089 --> 00:40:56,239
it's<font color="#E5E5E5"> checking the code read protection</font>

899
00:40:54,559 --> 00:40:59,119
values<font color="#CCCCCC"> where it's</font><font color="#E5E5E5"> checking if it's</font>

900
00:40:56,239 --> 00:41:01,369
<font color="#E5E5E5">allowed to access the bootloader we</font>

901
00:40:59,119 --> 00:41:04,160
perform a glitch<font color="#CCCCCC"> at that location it's</font>

902
00:41:01,369 --> 00:41:06,019
able<font color="#E5E5E5"> to corrupt the code flow but the</font>

903
00:41:04,160 --> 00:41:08,449
chip still operates<font color="#E5E5E5"> other than a few</font>

904
00:41:06,019 --> 00:41:10,879
corrupted instructions<font color="#E5E5E5"> so we've entered</font>

905
00:41:08,449 --> 00:41:14,029
<font color="#CCCCCC">the bootloader</font><font color="#E5E5E5"> once we've entered the</font>

906
00:41:10,880 --> 00:41:17,390
bootloader<font color="#CCCCCC"> then we can drop back</font><font color="#E5E5E5"> to any</font>

907
00:41:14,029 --> 00:41:19,009
<font color="#CCCCCC">of the LTC programming tools and it's</font>

908
00:41:17,390 --> 00:41:24,769
able<font color="#E5E5E5"> to just read</font><font color="#CCCCCC"> the chip normally as</font>

909
00:41:19,009 --> 00:41:27,349
if<font color="#CCCCCC"> it was an entirely unlock ship so</font>

910
00:41:24,769 --> 00:41:30,439
<font color="#CCCCCC">I've uploaded my my test code for the</font>

911
00:41:27,349 --> 00:41:33,259
glitcher to github<font color="#E5E5E5"> it's not exactly</font>

912
00:41:30,439 --> 00:41:38,538
<font color="#CCCCCC">production-ready code</font><font color="#E5E5E5"> but it's what I</font>

913
00:41:33,259 --> 00:41:42,439
used it it does mostly work it's not

914
00:41:38,539 --> 00:41:45,199
<font color="#E5E5E5">well documented but</font><font color="#CCCCCC"> I guess</font><font color="#E5E5E5"> that's kind</font>

915
00:41:42,439 --> 00:41:47,239
<font color="#CCCCCC">of normal so this was code</font><font color="#E5E5E5"> for the</font>

916
00:41:45,199 --> 00:41:50,569
<font color="#E5E5E5">explained development board the AVR chip</font>

917
00:41:47,239 --> 00:41:53,479
<font color="#E5E5E5">and this has my serial interface code</font>

918
00:41:50,569 --> 00:41:56,479
and<font color="#E5E5E5"> also all the timing code for the</font>

919
00:41:53,479 --> 00:41:59,779
glitches<font color="#E5E5E5"> to control the</font><font color="#CCCCCC"> Mac's 4619 and</font>

920
00:41:56,479 --> 00:42:00,890
and perform<font color="#E5E5E5"> our glitching</font><font color="#CCCCCC"> VI so if</font>

921
00:41:59,779 --> 00:42:02,869
you're interested<font color="#CCCCCC"> you can take a look</font>

922
00:42:00,890 --> 00:42:04,219
there hopefully as time<font color="#CCCCCC"> goes on I might</font>

923
00:42:02,869 --> 00:42:06,049
actually clean<font color="#CCCCCC"> it up a little bit and</font>

924
00:42:04,219 --> 00:42:09,979
document<font color="#E5E5E5"> it a bit better so it'll it'll</font>

925
00:42:06,049 --> 00:42:12,380
<font color="#E5E5E5">be a little bit more</font><font color="#CCCCCC"> usable it's a very</font>

926
00:42:09,979 --> 00:42:13,669
much<font color="#E5E5E5"> a prototype at this point so but as</font>

927
00:42:12,380 --> 00:42:16,449
you<font color="#CCCCCC"> can see it does work for actually</font>

928
00:42:13,670 --> 00:42:16,449
<font color="#E5E5E5">glitching the chip</font>

929
00:42:18,900 --> 00:42:26,590
something interesting<font color="#CCCCCC"> that I saw while I</font>

930
00:42:21,400 --> 00:42:30,820
was working<font color="#CCCCCC"> on this</font><font color="#E5E5E5"> is that there's an</font>

931
00:42:26,590 --> 00:42:34,000
application<font color="#E5E5E5"> note from</font><font color="#CCCCCC"> nxp application</font>

932
00:42:30,820 --> 00:42:36,550
note<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> eight six six this is for a</font>

933
00:42:34,000 --> 00:42:38,920
secondary USB<font color="#CCCCCC"> boot loader</font><font color="#E5E5E5"> they do have</font>

934
00:42:36,550 --> 00:42:40,630
some chips that<font color="#E5E5E5"> have the USB peripheral</font>

935
00:42:38,920 --> 00:42:42,850
but they didn't include<font color="#E5E5E5"> the USB boot</font>

936
00:42:40,630 --> 00:42:44,440
loader in their boot<font color="#CCCCCC"> ROM so they've</font>

937
00:42:42,850 --> 00:42:46,690
provided this application note

938
00:42:44,440 --> 00:42:50,550
explaining<font color="#CCCCCC"> how you can make your own USB</font>

939
00:42:46,690 --> 00:42:53,320
boot loader<font color="#E5E5E5"> and it also supports the</font>

940
00:42:50,550 --> 00:42:55,600
familiar<font color="#E5E5E5"> code read protection levels</font>

941
00:42:53,320 --> 00:42:58,390
what's interesting about this<font color="#E5E5E5"> one</font><font color="#CCCCCC"> though</font>

942
00:42:55,600 --> 00:43:00,460
is that<font color="#E5E5E5"> they only allow read out through</font>

943
00:42:58,390 --> 00:43:03,160
<font color="#E5E5E5">this version</font><font color="#CCCCCC"> of the bootloader if the</font>

944
00:43:00,460 --> 00:43:04,960
code<font color="#E5E5E5"> read protection word is actually</font>

945
00:43:03,160 --> 00:43:10,629
set to<font color="#E5E5E5"> one specific</font><font color="#CCCCCC"> value that they've</font>

946
00:43:04,960 --> 00:43:12,340
defined<font color="#E5E5E5"> as no CRP so we can we can see</font>

947
00:43:10,630 --> 00:43:13,870
here<font color="#E5E5E5"> that they've actually made their</font>

948
00:43:12,340 --> 00:43:16,150
application<font color="#CCCCCC"> though</font><font color="#E5E5E5"> their</font><font color="#CCCCCC"> suggestions for</font>

949
00:43:13,870 --> 00:43:17,740
the user<font color="#CCCCCC"> bootloader</font><font color="#E5E5E5"> is it implemented</font><font color="#CCCCCC"> in</font>

950
00:43:16,150 --> 00:43:22,090
a more<font color="#E5E5E5"> secure way than their actual</font><font color="#CCCCCC"> ROM</font>

951
00:43:17,740 --> 00:43:25,390
bootloader<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> about 4.2 billion</font>

952
00:43:22,090 --> 00:43:26,890
fewer possibilities<font color="#CCCCCC"> to corrupt the CRP</font>

953
00:43:25,390 --> 00:43:31,060
value and actually allow the read out<font color="#CCCCCC"> in</font>

954
00:43:26,890 --> 00:43:32,560
<font color="#CCCCCC">this case so</font><font color="#E5E5E5"> clearly somebody is aware</font>

955
00:43:31,060 --> 00:43:35,049
<font color="#CCCCCC">that there's some</font><font color="#E5E5E5"> issues with the code</font>

956
00:43:32,560 --> 00:43:37,000
read protection<font color="#E5E5E5"> but there's not so much</font>

957
00:43:35,050 --> 00:43:39,390
<font color="#E5E5E5">that they can do inside the ROM</font>

958
00:43:37,000 --> 00:43:39,390
bootloader

959
00:43:45,160 --> 00:43:52,609
now also another<font color="#E5E5E5"> thing that</font><font color="#CCCCCC"> I looked</font><font color="#E5E5E5"> at</font>

960
00:43:49,220 --> 00:43:55,578
on this<font color="#E5E5E5"> chip was looking closely at</font><font color="#CCCCCC"> the</font>

961
00:43:52,609 --> 00:43:57,680
power analysis during<font color="#E5E5E5"> startup so I have</font>

962
00:43:55,579 --> 00:43:59,900
two oscilloscope<font color="#E5E5E5"> screenshots here the</font>

963
00:43:57,680 --> 00:44:02,930
first one<font color="#CCCCCC"> is showing the</font><font color="#E5E5E5"> startup with</font>

964
00:43:59,900 --> 00:44:05,059
the no CRP set so<font color="#E5E5E5"> there's no no read</font>

965
00:44:02,930 --> 00:44:06,828
protection enabled<font color="#CCCCCC"> and then the second</font>

966
00:44:05,059 --> 00:44:09,140
one is<font color="#CCCCCC"> showing</font><font color="#E5E5E5"> if I have the code read</font>

967
00:44:06,829 --> 00:44:10,849
protection level<font color="#E5E5E5"> one enabled so if I</font>

968
00:44:09,140 --> 00:44:12,290
<font color="#E5E5E5">kind of flip back and forth</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> them</font>

969
00:44:10,849 --> 00:44:15,890
you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that they</font><font color="#CCCCCC"> look almost</font>

970
00:44:12,290 --> 00:44:17,180
<font color="#CCCCCC">identical except for the CRP one just</font>

971
00:44:15,890 --> 00:44:19,279
<font color="#CCCCCC">passed a halfway point</font>

972
00:44:17,180 --> 00:44:21,770
there's a little pulse there that's a

973
00:44:19,280 --> 00:44:23,210
little<font color="#CCCCCC"> bit longer so we can see there's</font>

974
00:44:21,770 --> 00:44:26,480
a slight<font color="#CCCCCC"> difference in the</font><font color="#E5E5E5"> code flow</font>

975
00:44:23,210 --> 00:44:29,569
between<font color="#E5E5E5"> no CRP or CRP level one being</font>

976
00:44:26,480 --> 00:44:31,579
set and then if we go back and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> look</font>

977
00:44:29,569 --> 00:44:33,558
<font color="#CCCCCC">at our disassembly of the boot ROM we</font>

978
00:44:31,579 --> 00:44:35,210
can actually<font color="#E5E5E5"> see that directly in the</font>

979
00:44:33,559 --> 00:44:39,170
startup this is where they're<font color="#CCCCCC"> checking</font>

980
00:44:35,210 --> 00:44:41,180
if they have the CRP level<font color="#CCCCCC"> one set</font><font color="#E5E5E5"> to</font>

981
00:44:39,170 --> 00:44:43,880
know if they can enable the<font color="#E5E5E5"> debugging</font>

982
00:44:41,180 --> 00:44:45,680
interface or not so we<font color="#E5E5E5"> can see from</font>

983
00:44:43,880 --> 00:44:47,420
these oscilloscope images exactly where

984
00:44:45,680 --> 00:44:51,049
this piece<font color="#E5E5E5"> of code is</font><font color="#CCCCCC"> being executed</font><font color="#E5E5E5"> and</font>

985
00:44:47,420 --> 00:44:52,819
I didn't actually<font color="#E5E5E5"> test this but I expect</font>

986
00:44:51,049 --> 00:44:55,040
<font color="#E5E5E5">that this might actually be an even</font>

987
00:44:52,819 --> 00:44:57,650
easier target than<font color="#E5E5E5"> the serial bootloader</font>

988
00:44:55,040 --> 00:45:00,259
to try and unlock the chip<font color="#E5E5E5"> because if</font>

989
00:44:57,650 --> 00:45:02,900
you can corrupt this value that's being

990
00:45:00,260 --> 00:45:06,500
written to the undocumented register for

991
00:45:02,900 --> 00:45:08,030
<font color="#E5E5E5">0 0</font><font color="#CCCCCC"> 4 8</font><font color="#E5E5E5"> 3 F</font><font color="#CCCCCC"> 0 then</font><font color="#E5E5E5"> your debugging</font>

992
00:45:06,500 --> 00:45:09,829
<font color="#E5E5E5">interface should be enabled so</font><font color="#CCCCCC"> rather</font>

993
00:45:08,030 --> 00:45:11,420
<font color="#E5E5E5">than having to deal with the serial</font>

994
00:45:09,829 --> 00:45:13,099
<font color="#E5E5E5">bootloader at all you could just plug in</font>

995
00:45:11,420 --> 00:45:16,849
the JTAG debugger<font color="#E5E5E5"> and read out the flash</font>

996
00:45:13,099 --> 00:45:19,430
directly from this again it is clear

997
00:45:16,849 --> 00:45:21,440
from<font color="#E5E5E5"> the code that if any other value</font>

998
00:45:19,430 --> 00:45:23,720
besides<font color="#E5E5E5"> eight seven six five</font><font color="#CCCCCC"> four three</font>

999
00:45:21,440 --> 00:45:25,250
two<font color="#CCCCCC"> one</font><font color="#E5E5E5"> ends up written to this register</font>

1000
00:45:23,720 --> 00:45:27,500
<font color="#E5E5E5">you're going to have a wide</font><font color="#CCCCCC"> open</font>

1001
00:45:25,250 --> 00:45:29,450
debugging port so being able to see this

1002
00:45:27,500 --> 00:45:31,460
code flow difference in the power

1003
00:45:29,450 --> 00:45:33,680
analysis is quite<font color="#E5E5E5"> nice</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> gives</font>

1004
00:45:31,460 --> 00:45:37,270
<font color="#E5E5E5">us an indication exactly when we need</font><font color="#CCCCCC"> to</font>

1005
00:45:33,680 --> 00:45:37,270
glitch within a few clock cycles

1006
00:45:39,120 --> 00:45:44,279
so I took<font color="#E5E5E5"> a look also just at the chips</font>

1007
00:45:41,460 --> 00:45:47,760
directly<font color="#CCCCCC"> I I did a quick</font><font color="#E5E5E5"> decaf of the</font>

1008
00:45:44,280 --> 00:45:50,790
chips<font color="#E5E5E5"> this is an LTC</font><font color="#CCCCCC"> 2148 chip it's one</font>

1009
00:45:47,760 --> 00:45:52,710
of the older<font color="#E5E5E5"> series of LPC chips this</font>

1010
00:45:50,790 --> 00:45:54,960
one<font color="#E5E5E5"> contains</font><font color="#CCCCCC"> the flash bootloader not</font>

1011
00:45:52,710 --> 00:45:56,610
the<font color="#E5E5E5"> ROM bootloader but generally they're</font>

1012
00:45:54,960 --> 00:46:00,990
all still quite similar they're all the

1013
00:45:56,610 --> 00:46:03,480
32-bit<font color="#E5E5E5"> ARM chips in the corner of the</font>

1014
00:46:00,990 --> 00:46:06,600
chip we<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> the part number and</font>

1015
00:46:03,480 --> 00:46:10,320
logo for the chip so<font color="#E5E5E5"> that again this is</font>

1016
00:46:06,600 --> 00:46:12,710
the LPC<font color="#CCCCCC"> 21 48 just for comparison now</font>

1017
00:46:10,320 --> 00:46:18,120
this is one of<font color="#E5E5E5"> the newer series the LPC</font>

1018
00:46:12,710 --> 00:46:19,680
<font color="#E5E5E5">1343 we have again a nice logo and a</font>

1019
00:46:18,120 --> 00:46:22,710
part number<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> corner very</font><font color="#E5E5E5"> easy to</font>

1020
00:46:19,680 --> 00:46:26,450
<font color="#CCCCCC">identify the chip in another corner</font><font color="#E5E5E5"> we</font>

1021
00:46:22,710 --> 00:46:26,450
have a nice<font color="#CCCCCC"> little</font><font color="#E5E5E5"> piece of artwork here</font>

1022
00:46:27,320 --> 00:46:30,840
so looking more towards the<font color="#CCCCCC"> middle</font><font color="#E5E5E5"> of</font>

1023
00:46:29,850 --> 00:46:35,450
<font color="#E5E5E5">the chip where we have the actual</font>

1024
00:46:30,840 --> 00:46:38,070
circuitry this is from the LPC 21 48<font color="#E5E5E5"> and</font>

1025
00:46:35,450 --> 00:46:41,460
we can see that<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> circuitry is</font>

1026
00:46:38,070 --> 00:46:44,610
quite dense<font color="#CCCCCC"> so for an invasive attack</font>

1027
00:46:41,460 --> 00:46:46,560
with probing<font color="#E5E5E5"> I'm sure it can</font><font color="#CCCCCC"> be possible</font>

1028
00:46:44,610 --> 00:46:48,300
<font color="#CCCCCC">but</font><font color="#E5E5E5"> it would need fairly advanced</font>

1029
00:46:46,560 --> 00:46:50,100
equipment it's going<font color="#E5E5E5"> to be tough just</font><font color="#CCCCCC"> to</font>

1030
00:46:48,300 --> 00:46:51,110
put a<font color="#E5E5E5"> needle directly down on top of</font><font color="#CCCCCC"> a</font>

1031
00:46:50,100 --> 00:46:53,569
chip<font color="#CCCCCC"> like this</font>

1032
00:46:51,110 --> 00:46:55,980
<font color="#E5E5E5">also we can see a lot of these sort of</font>

1033
00:46:53,570 --> 00:46:58,380
rectangular pieces<font color="#E5E5E5"> of metal there</font>

1034
00:46:55,980 --> 00:47:00,900
because any<font color="#E5E5E5"> of the metal any of the</font>

1035
00:46:58,380 --> 00:47:03,570
areas on the top layer that<font color="#CCCCCC"> don't have</font>

1036
00:47:00,900 --> 00:47:07,320
metal<font color="#E5E5E5"> they filled in with filler to keep</font>

1037
00:47:03,570 --> 00:47:09,090
the chip well<font color="#CCCCCC"> planar eyes so areas on</font>

1038
00:47:07,320 --> 00:47:11,730
the chip that<font color="#E5E5E5"> are the top layer of the</font>

1039
00:47:09,090 --> 00:47:16,740
<font color="#CCCCCC">chips</font><font color="#E5E5E5"> that are empty are covered with</font>

1040
00:47:11,730 --> 00:47:18,540
metal like this so we have<font color="#E5E5E5"> actually not</font>

1041
00:47:16,740 --> 00:47:21,060
<font color="#E5E5E5">much access to</font><font color="#CCCCCC"> the bottom of</font><font color="#E5E5E5"> the chip</font>

1042
00:47:18,540 --> 00:47:22,590
without<font color="#E5E5E5"> further deep processing</font><font color="#CCCCCC"> and when</font>

1043
00:47:21,060 --> 00:47:24,090
a glitch is possible there's not really

1044
00:47:22,590 --> 00:47:26,460
much reason<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually do an invasive</font>

1045
00:47:24,090 --> 00:47:27,810
attack but because<font color="#E5E5E5"> it's so covered in</font>

1046
00:47:26,460 --> 00:47:29,580
<font color="#CCCCCC">metal this this does make</font><font color="#E5E5E5"> it more</font>

1047
00:47:27,810 --> 00:47:31,680
<font color="#E5E5E5">difficult if you want to do a laser</font>

1048
00:47:29,580 --> 00:47:33,450
attack<font color="#E5E5E5"> or anything like this</font><font color="#CCCCCC"> I mean</font>

1049
00:47:31,680 --> 00:47:34,919
maybe it can still be<font color="#E5E5E5"> possible but it's</font>

1050
00:47:33,450 --> 00:47:36,509
a lot harder<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> kind of thing</font>

1051
00:47:34,920 --> 00:47:39,900
when you<font color="#E5E5E5"> don't actually have access to</font>

1052
00:47:36,510 --> 00:47:42,480
<font color="#CCCCCC">the transistors below so yeah this</font><font color="#E5E5E5"> is</font>

1053
00:47:39,900 --> 00:47:43,830
<font color="#CCCCCC">quite dense</font><font color="#E5E5E5"> this is the 21 48 and the</font>

1054
00:47:42,480 --> 00:47:46,350
newer chips are even smaller

1055
00:47:43,830 --> 00:47:47,640
so from an invasive perspective it's a

1056
00:47:46,350 --> 00:47:50,360
little bit<font color="#CCCCCC"> difficult to work</font><font color="#E5E5E5"> on this</font>

1057
00:47:47,640 --> 00:47:52,960
chip unless you have<font color="#CCCCCC"> high-end equipment</font>

1058
00:47:50,360 --> 00:47:54,940
but the glitching works great<font color="#E5E5E5"> so</font>

1059
00:47:52,960 --> 00:47:57,700
<font color="#E5E5E5">non-invasive attack is is definitely the</font>

1060
00:47:54,940 --> 00:47:59,890
way to<font color="#E5E5E5"> go these</font><font color="#CCCCCC"> chips are quite easy to</font>

1061
00:47:57,700 --> 00:48:01,899
get to glitch<font color="#E5E5E5"> and because you can read</font>

1062
00:47:59,890 --> 00:48:04,390
out<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bootrom so easily and it's set</font>

1063
00:48:01,900 --> 00:48:06,880
up<font color="#CCCCCC"> in such a simple</font><font color="#E5E5E5"> way it's a it's a</font>

1064
00:48:04,390 --> 00:48:15,220
nice<font color="#E5E5E5"> target and it's quite easy to</font>

1065
00:48:06,880 --> 00:48:18,099
unprotect these chips yeah so that's

1066
00:48:15,220 --> 00:48:20,649
that's<font color="#E5E5E5"> about all that I have</font><font color="#CCCCCC"> I hope that</font>

1067
00:48:18,099 --> 00:48:22,660
I've<font color="#CCCCCC"> been able to show how easy it is</font><font color="#E5E5E5"> to</font>

1068
00:48:20,650 --> 00:48:25,420
<font color="#E5E5E5">to build a simple glitch sure to set it</font>

1069
00:48:22,660 --> 00:48:28,779
<font color="#E5E5E5">up</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> get a lot</font><font color="#CCCCCC"> more advanced than</font>

1070
00:48:25,420 --> 00:48:32,140
this<font color="#CCCCCC"> personally I like to do with the</font>

1071
00:48:28,780 --> 00:48:34,510
<font color="#E5E5E5">simple easy cheap way and it works good</font>

1072
00:48:32,140 --> 00:48:36,400
enough<font color="#E5E5E5"> you could get more precise with</font>

1073
00:48:34,510 --> 00:48:38,140
<font color="#CCCCCC">your glitch timing and with different</font>

1074
00:48:36,400 --> 00:48:41,500
<font color="#E5E5E5">click waveforms and all of this kind of</font>

1075
00:48:38,140 --> 00:48:45,009
thing<font color="#E5E5E5"> but I mean in this</font><font color="#CCCCCC"> case all you</font>

1076
00:48:41,500 --> 00:48:47,859
<font color="#CCCCCC">need is</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> Max</font><font color="#E5E5E5"> 46</font><font color="#CCCCCC"> 19 and</font><font color="#E5E5E5"> the power</font>

1077
00:48:45,010 --> 00:48:49,089
supply<font color="#CCCCCC"> and you can have a fine that</font><font color="#E5E5E5"> you</font>

1078
00:48:47,859 --> 00:48:51,310
can have an effect on the chip very

1079
00:48:49,089 --> 00:48:53,170
quickly<font color="#E5E5E5"> and then it's</font><font color="#CCCCCC"> just a matter of</font>

1080
00:48:51,310 --> 00:48:54,700
<font color="#E5E5E5">finding your target location which again</font>

1081
00:48:53,170 --> 00:48:58,930
<font color="#E5E5E5">with the power analysis makes it very</font>

1082
00:48:54,700 --> 00:49:01,540
easy<font color="#E5E5E5"> and the code</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> quite simple</font><font color="#CCCCCC"> yeah</font>

1083
00:48:58,930 --> 00:49:03,069
so the bottom<font color="#CCCCCC"> line</font><font color="#E5E5E5"> is don't trust the</font>

1084
00:49:01,540 --> 00:49:06,580
code read protection too much on<font color="#E5E5E5"> these</font>

1085
00:49:03,070 --> 00:49:10,300
chips<font color="#E5E5E5"> but it's not really too specific</font>

1086
00:49:06,580 --> 00:49:12,640
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the NX</font><font color="#CCCCCC"> PL PC family</font><font color="#E5E5E5"> generally</font><font color="#CCCCCC"> a lot</font>

1087
00:49:10,300 --> 00:49:14,920
<font color="#E5E5E5">of the basic microcontrollers are set up</font>

1088
00:49:12,640 --> 00:49:16,629
in<font color="#E5E5E5"> similar ways the the locks tend to be</font>

1089
00:49:14,920 --> 00:49:18,580
<font color="#E5E5E5">quite fragile so I'm not really</font>

1090
00:49:16,630 --> 00:49:20,380
intending to<font color="#E5E5E5"> pick too much on this</font>

1091
00:49:18,580 --> 00:49:24,460
family<font color="#CCCCCC"> of chips this</font><font color="#E5E5E5"> is just a nice</font>

1092
00:49:20,380 --> 00:49:26,320
<font color="#CCCCCC">example to</font><font color="#E5E5E5"> work with most of the simple</font>

1093
00:49:24,460 --> 00:49:29,380
<font color="#E5E5E5">microcontrollers that have a boot</font><font color="#CCCCCC"> ROM</font>

1094
00:49:26,320 --> 00:49:31,270
with<font color="#CCCCCC"> the bootloader inside</font><font color="#E5E5E5"> will have</font>

1095
00:49:29,380 --> 00:49:32,800
similar defects to this that if you're

1096
00:49:31,270 --> 00:49:35,109
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> find a way to glitch the chip</font>

1097
00:49:32,800 --> 00:49:37,410
<font color="#E5E5E5">then probably you can</font><font color="#CCCCCC"> bypass</font><font color="#E5E5E5"> it in the</font>

1098
00:49:35,109 --> 00:49:37,410
same way

1099
00:49:40,680 --> 00:49:44,000
[Applause]

1100
00:49:59,890 --> 00:50:06,799
hi I would<font color="#E5E5E5"> like to ask do</font><font color="#CCCCCC"> you provide</font>

1101
00:50:03,680 --> 00:50:09,919
<font color="#E5E5E5">the</font><font color="#CCCCCC"> clock from the clicker</font><font color="#E5E5E5"> circuits to</font>

1102
00:50:06,800 --> 00:50:12,920
the MCU as well or was it<font color="#E5E5E5"> running from</font>

1103
00:50:09,920 --> 00:50:14,300
an internal RC oscillator<font color="#CCCCCC"> yes that's</font>

1104
00:50:12,920 --> 00:50:16,190
that's<font color="#CCCCCC"> something that I glossed over for</font>

1105
00:50:14,300 --> 00:50:19,250
sure<font color="#E5E5E5"> these chips are generally running</font>

1106
00:50:16,190 --> 00:50:21,859
from the internal RC<font color="#E5E5E5"> oscillator</font><font color="#CCCCCC"> some of</font>

1107
00:50:19,250 --> 00:50:24,710
the family do need an external<font color="#E5E5E5"> clock the</font>

1108
00:50:21,859 --> 00:50:27,230
LPC<font color="#CCCCCC"> 21:48 for example runs off an</font>

1109
00:50:24,710 --> 00:50:29,150
external clock<font color="#E5E5E5"> in general the whole</font>

1110
00:50:27,230 --> 00:50:31,160
family does<font color="#E5E5E5"> support the external clock</font>

1111
00:50:29,150 --> 00:50:33,440
but during the<font color="#E5E5E5"> boot</font><font color="#CCCCCC"> rom it's running off</font>

1112
00:50:31,160 --> 00:50:35,299
of<font color="#E5E5E5"> the internal clock so for my testing</font>

1113
00:50:33,440 --> 00:50:37,010
I didn't<font color="#CCCCCC"> even supply a clock signal to</font>

1114
00:50:35,300 --> 00:50:39,890
it because it had no effect at the time

1115
00:50:37,010 --> 00:50:43,060
<font color="#CCCCCC">of the program that I</font><font color="#E5E5E5"> was looking at the</font>

1116
00:50:39,890 --> 00:50:45,859
LPC<font color="#CCCCCC"> 2148 when I worked on that one</font>

1117
00:50:43,060 --> 00:50:48,380
something<font color="#E5E5E5"> that I did find</font><font color="#CCCCCC"> that was worth</font>

1118
00:50:45,859 --> 00:50:50,900
noting<font color="#E5E5E5"> was that the development board</font>

1119
00:50:48,380 --> 00:50:53,300
that I was using<font color="#E5E5E5"> had</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 12 megahertz</font>

1120
00:50:50,900 --> 00:50:55,819
oscillator on it which I was able<font color="#E5E5E5"> to</font>

1121
00:50:53,300 --> 00:50:58,190
still glitch the chip but when I

1122
00:50:55,819 --> 00:50:59,990
<font color="#CCCCCC">increased the</font><font color="#E5E5E5"> oscillator speed to 16</font>

1123
00:50:58,190 --> 00:51:02,300
megahertz is that it becomes<font color="#E5E5E5"> much more</font>

1124
00:50:59,990 --> 00:51:03,799
easy to glitch<font color="#E5E5E5"> so if you have the</font>

1125
00:51:02,300 --> 00:51:07,190
<font color="#E5E5E5">ability to run from the external</font>

1126
00:51:03,800 --> 00:51:09,290
<font color="#E5E5E5">oscillator then if you increase</font><font color="#CCCCCC"> it to</font>

1127
00:51:07,190 --> 00:51:11,859
kind of the highest<font color="#CCCCCC"> level that you can</font>

1128
00:51:09,290 --> 00:51:14,390
the chips tend to get easier to glitch

1129
00:51:11,859 --> 00:51:15,770
<font color="#CCCCCC">but I mean unfortunately for me in this</font>

1130
00:51:14,390 --> 00:51:19,549
case most<font color="#E5E5E5"> of these chips were running</font>

1131
00:51:15,770 --> 00:51:21,970
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> internal RC oscillator I have</font>

1132
00:51:19,550 --> 00:51:25,670
one additional<font color="#E5E5E5"> question</font><font color="#CCCCCC"> have you tried</font>

1133
00:51:21,970 --> 00:51:27,259
using the<font color="#CCCCCC"> chip</font><font color="#E5E5E5"> whisperer</font><font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> used</font>

1134
00:51:25,670 --> 00:51:28,609
the chip whisperer<font color="#E5E5E5"> I've heard that it's</font>

1135
00:51:27,260 --> 00:51:30,440
a<font color="#E5E5E5"> good tool but I haven't actually had a</font>

1136
00:51:28,609 --> 00:51:34,240
<font color="#CCCCCC">chance to get</font><font color="#E5E5E5"> any hands-on experience</font>

1137
00:51:30,440 --> 00:51:34,240
with it okay thank<font color="#E5E5E5"> you</font>

1138
00:51:42,920 --> 00:51:46,140
hello

1139
00:51:44,580 --> 00:51:48,480
very nice presentation thank you

1140
00:51:46,140 --> 00:51:51,810
<font color="#CCCCCC">especially</font><font color="#E5E5E5"> because it's a quiet</font><font color="#CCCCCC"> low-cost</font>

1141
00:51:48,480 --> 00:51:53,940
<font color="#E5E5E5">to do this type of attack</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> two</font>

1142
00:51:51,810 --> 00:51:57,600
kind of related questions<font color="#E5E5E5"> the first one</font>

1143
00:51:53,940 --> 00:51:59,130
is how was how long was the<font color="#CCCCCC"> The Glitch</font>

1144
00:51:57,600 --> 00:52:01,830
campaign when you are searching<font color="#E5E5E5"> for the</font>

1145
00:51:59,130 --> 00:52:04,260
characteristics of the glacier and the

1146
00:52:01,830 --> 00:52:06,540
second one<font color="#CCCCCC"> once you</font><font color="#E5E5E5"> find these</font>

1147
00:52:04,260 --> 00:52:09,270
characteristics of<font color="#E5E5E5"> the glitch what's the</font>

1148
00:52:06,540 --> 00:52:12,810
success percentage of repeating<font color="#CCCCCC"> the</font>

1149
00:52:09,270 --> 00:52:15,060
attack so to<font color="#E5E5E5"> find the glitch initially</font>

1150
00:52:12,810 --> 00:52:16,410
on<font color="#E5E5E5"> this one I was fairly lucky I mean</font>

1151
00:52:15,060 --> 00:52:17,940
this<font color="#E5E5E5"> isn't the first</font><font color="#CCCCCC"> chip</font><font color="#E5E5E5"> that I've</font>

1152
00:52:16,410 --> 00:52:20,368
tried<font color="#CCCCCC"> to glitch so I sort of have</font><font color="#E5E5E5"> the</font>

1153
00:52:17,940 --> 00:52:22,260
strategy<font color="#CCCCCC"> that I follow</font><font color="#E5E5E5"> and by loading my</font>

1154
00:52:20,369 --> 00:52:24,240
test code inside which is<font color="#CCCCCC"> four loops</font>

1155
00:52:22,260 --> 00:52:26,700
<font color="#E5E5E5">that I can target</font><font color="#CCCCCC"> it gives you a nice</font>

1156
00:52:24,240 --> 00:52:28,290
targeted area where you have a defined

1157
00:52:26,700 --> 00:52:30,720
effect if you're able<font color="#CCCCCC"> to have an effect</font>

1158
00:52:28,290 --> 00:52:32,640
<font color="#E5E5E5">so I think within the first day</font><font color="#CCCCCC"> of</font>

1159
00:52:30,720 --> 00:52:34,890
playing with this<font color="#E5E5E5"> chip I was able to see</font>

1160
00:52:32,640 --> 00:52:36,839
some effects from the glitching<font color="#CCCCCC"> and then</font>

1161
00:52:34,890 --> 00:52:39,299
it took<font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> longer</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually</font>

1162
00:52:36,840 --> 00:52:42,000
find<font color="#CCCCCC"> the precise points</font><font color="#E5E5E5"> to glitch to</font>

1163
00:52:39,300 --> 00:52:43,710
access the bootloader<font color="#E5E5E5"> but it was it was</font>

1164
00:52:42,000 --> 00:52:47,340
fairly<font color="#E5E5E5"> quick</font><font color="#CCCCCC"> that I was able</font><font color="#E5E5E5"> to do that</font>

1165
00:52:43,710 --> 00:52:48,930
<font color="#E5E5E5">and then the the repeatability so that</font>

1166
00:52:47,340 --> 00:52:51,930
the glitch doesn't<font color="#CCCCCC"> necessarily work</font>

1167
00:52:48,930 --> 00:52:54,690
every time but<font color="#CCCCCC"> if you only need to do</font>

1168
00:52:51,930 --> 00:52:56,490
one glitch in the program to get<font color="#E5E5E5"> to the</font>

1169
00:52:54,690 --> 00:52:59,369
point<font color="#E5E5E5"> where you want and you can try</font>

1170
00:52:56,490 --> 00:53:01,470
many times<font color="#CCCCCC"> then it's</font><font color="#E5E5E5"> not so bad so I</font>

1171
00:52:59,369 --> 00:53:06,540
mean in this<font color="#E5E5E5"> case I'm having a glitch</font>

1172
00:53:01,470 --> 00:53:08,430
success rate of<font color="#E5E5E5"> maybe 1% but I can make</font>

1173
00:53:06,540 --> 00:53:10,259
more than<font color="#E5E5E5"> 100 attempts in a second so</font>

1174
00:53:08,430 --> 00:53:14,629
I'm still having<font color="#CCCCCC"> access</font><font color="#E5E5E5"> with success</font>

1175
00:53:10,260 --> 00:53:14,630
within a second<font color="#E5E5E5"> or two okay thank you</font>

1176
00:53:28,470 --> 00:53:33,029
this talk focused on<font color="#E5E5E5"> you know a glitch</font>

1177
00:53:31,200 --> 00:53:35,549
to break out of some<font color="#E5E5E5"> kind of loop or</font>

1178
00:53:33,030 --> 00:53:37,800
bypass a conditional and<font color="#E5E5E5"> your your</font>

1179
00:53:35,550 --> 00:53:40,920
previous talk<font color="#CCCCCC"> CCC and then</font><font color="#E5E5E5"> recon last</font>

1180
00:53:37,800 --> 00:53:42,300
year<font color="#E5E5E5"> had you glitching to change like a</font>

1181
00:53:40,920 --> 00:53:43,620
branch target<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you were</font><font color="#E5E5E5"> jumping into a</font>

1182
00:53:42,300 --> 00:53:46,260
payload<font color="#E5E5E5"> in memory</font><font color="#CCCCCC"> are you do you see</font>

1183
00:53:43,620 --> 00:53:48,150
that certain architectures or certain

1184
00:53:46,260 --> 00:53:50,520
processor families are more susceptible

1185
00:53:48,150 --> 00:53:52,410
to<font color="#E5E5E5"> certain types of glitches or that you</font>

1186
00:53:50,520 --> 00:53:54,330
can characterize like what's actually

1187
00:53:52,410 --> 00:53:57,089
happening in there based on some

1188
00:53:54,330 --> 00:53:58,620
criteria<font color="#E5E5E5"> on most of the chips that</font><font color="#CCCCCC"> I've</font>

1189
00:53:57,090 --> 00:54:01,230
looked<font color="#E5E5E5"> at I haven't done so much</font>

1190
00:53:58,620 --> 00:54:02,430
characterization<font color="#E5E5E5"> typically I'm just</font>

1191
00:54:01,230 --> 00:54:04,500
looking for something<font color="#E5E5E5"> that's going to</font>

1192
00:54:02,430 --> 00:54:06,660
<font color="#E5E5E5">corrupt an instruction and</font><font color="#CCCCCC"> the exact</font>

1193
00:54:04,500 --> 00:54:09,450
details I'm not<font color="#E5E5E5"> so worried about as long</font>

1194
00:54:06,660 --> 00:54:10,799
<font color="#E5E5E5">as</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't corrupt too much</font><font color="#CCCCCC"> depending</font>

1195
00:54:09,450 --> 00:54:12,419
<font color="#E5E5E5">on the architecture it does make a</font>

1196
00:54:10,800 --> 00:54:14,610
<font color="#CCCCCC">difference if you're using a chip with a</font>

1197
00:54:12,420 --> 00:54:16,710
<font color="#CCCCCC">Harvard architecture</font><font color="#E5E5E5"> or your data memory</font>

1198
00:54:14,610 --> 00:54:18,330
<font color="#E5E5E5">and your code memory aren't shared then</font>

1199
00:54:16,710 --> 00:54:20,100
that can make some types of attacks more

1200
00:54:18,330 --> 00:54:21,779
difficult<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> in this case</font><font color="#CCCCCC"> it doesn't</font>

1201
00:54:20,100 --> 00:54:24,750
<font color="#E5E5E5">really matter</font><font color="#CCCCCC"> because it's such a simple</font>

1202
00:54:21,780 --> 00:54:26,400
target<font color="#E5E5E5"> but as you</font><font color="#CCCCCC"> mentioned for my</font>

1203
00:54:24,750 --> 00:54:28,290
<font color="#E5E5E5">previous talk I wanted to</font><font color="#CCCCCC"> actually put a</font>

1204
00:54:26,400 --> 00:54:30,330
code payload in and have that executed

1205
00:54:28,290 --> 00:54:31,529
so if that<font color="#E5E5E5"> ship had been a Harvard</font>

1206
00:54:30,330 --> 00:54:33,630
architecture that would<font color="#E5E5E5"> have been a lot</font>

1207
00:54:31,530 --> 00:54:37,470
more<font color="#CCCCCC"> difficult to actually</font><font color="#E5E5E5"> get that into</font>

1208
00:54:33,630 --> 00:54:39,540
an executable<font color="#E5E5E5"> area</font><font color="#CCCCCC"> you'd see different</font>

1209
00:54:37,470 --> 00:54:41,910
effects<font color="#CCCCCC"> depending on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> type of</font><font color="#E5E5E5"> the</font>

1210
00:54:39,540 --> 00:54:43,800
chip so on<font color="#CCCCCC"> on a RISC chip your</font>

1211
00:54:41,910 --> 00:54:45,600
instructions are<font color="#E5E5E5"> going to generally be</font>

1212
00:54:43,800 --> 00:54:47,700
<font color="#E5E5E5">all the same length</font><font color="#CCCCCC"> so you're going to</font>

1213
00:54:45,600 --> 00:54:49,020
have<font color="#E5E5E5"> most likely some effect on this</font>

1214
00:54:47,700 --> 00:54:50,580
instruction<font color="#E5E5E5"> and then the rest of the</font>

1215
00:54:49,020 --> 00:54:53,040
code<font color="#CCCCCC"> is going to execute normally if</font>

1216
00:54:50,580 --> 00:54:54,930
you're on a<font color="#E5E5E5"> Sisk</font><font color="#CCCCCC"> where the op codes are</font>

1217
00:54:53,040 --> 00:54:57,720
different<font color="#E5E5E5"> lengths then you can have an</font>

1218
00:54:54,930 --> 00:55:00,029
effect where you<font color="#E5E5E5"> might cause</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> off</font>

1219
00:54:57,720 --> 00:55:01,919
code to be read as an incorrect off code

1220
00:55:00,030 --> 00:55:03,390
<font color="#E5E5E5">in which case it's going to end up</font>

1221
00:55:01,920 --> 00:55:05,700
executing from<font color="#E5E5E5"> the middle of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font>

1222
00:55:03,390 --> 00:55:08,690
<font color="#E5E5E5">instruction</font><font color="#CCCCCC"> and so in this</font><font color="#E5E5E5"> case you can</font>

1223
00:55:05,700 --> 00:55:11,810
have<font color="#CCCCCC"> a more wildly different code flow</font>

1224
00:55:08,690 --> 00:55:11,810
<font color="#E5E5E5">thank you</font>

1225
00:55:24,050 --> 00:55:26,590
thank you

