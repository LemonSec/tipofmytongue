1
00:00:01,650 --> 00:00:13,210
[Music]

2
00:00:08,389 --> 00:00:15,270
<font color="#E5E5E5">recon Arnold 2017</font>

3
00:00:13,210 --> 00:00:15,270
you

4
00:00:20,360 --> 00:00:26,430
<font color="#E5E5E5">hey guys my</font>

5
00:00:23,010 --> 00:00:29,340
here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> hurry we're working on Watson</font>

6
00:00:26,430 --> 00:00:33,019
<font color="#CCCCCC">threat research team and Intel and we</font>

7
00:00:29,340 --> 00:00:35,580
here to present the new presentation

8
00:00:33,020 --> 00:00:39,360
<font color="#CCCCCC">burying</font><font color="#E5E5E5"> the system new vulnerabilities</font>

9
00:00:35,580 --> 00:00:41,099
in<font color="#E5E5E5"> Corbett and revive Isis system</font><font color="#CCCCCC"> before</font>

10
00:00:39,360 --> 00:00:43,850
<font color="#CCCCCC">we go to the presentation I want to say</font>

11
00:00:41,100 --> 00:00:48,180
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to the organizers</font><font color="#E5E5E5"> of recon</font>

12
00:00:43,850 --> 00:00:54,180
<font color="#E5E5E5">Hugo Sam</font><font color="#CCCCCC"> new awesome</font><font color="#E5E5E5"> recon Brussels</font>

13
00:00:48,180 --> 00:00:56,219
awesome<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much yes so today</font>

14
00:00:54,180 --> 00:01:00,329
<font color="#E5E5E5">we will present the new type of an</font>

15
00:00:56,219 --> 00:01:02,760
ability and another<font color="#CCCCCC"> agenda we have</font><font color="#E5E5E5"> that</font>

16
00:01:00,329 --> 00:01:05,880
small recap<font color="#E5E5E5"> about that movie entire</font>

17
00:01:02,760 --> 00:01:10,710
villages then introduction about memory

18
00:01:05,880 --> 00:01:13,890
mapped i/o then description about<font color="#CCCCCC"> animal</font>

19
00:01:10,710 --> 00:01:16,639
<font color="#CCCCCC">bar</font><font color="#E5E5E5"> overlap issue examples of this issue</font>

20
00:01:13,890 --> 00:01:18,840
<font color="#CCCCCC">any device from</font><font color="#E5E5E5"> rancor puta memory</font>

21
00:01:16,640 --> 00:01:22,110
limitations mitigation stools and

22
00:01:18,840 --> 00:01:23,789
conclusion<font color="#E5E5E5"> the regard is really</font>

23
00:01:22,110 --> 00:01:27,420
important for<font color="#E5E5E5"> this presentation because</font>

24
00:01:23,789 --> 00:01:29,909
<font color="#CCCCCC">the venerability</font><font color="#E5E5E5"> is a little bit similar</font>

25
00:01:27,420 --> 00:01:31,260
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous one</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in many</font>

26
00:01:29,909 --> 00:01:33,570
perspective and exploit<font color="#E5E5E5"> the</font>

27
00:01:31,260 --> 00:01:42,450
exploitability<font color="#E5E5E5"> in a module</font><font color="#CCCCCC"> is when we</font>

28
00:01:33,570 --> 00:01:47,220
found<font color="#E5E5E5"> them like this</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thank you so</font>

29
00:01:42,450 --> 00:01:49,200
what is<font color="#CCCCCC"> as my poison pointer bug</font><font color="#E5E5E5"> so in</font>

30
00:01:47,220 --> 00:01:50,729
in statistics system<font color="#CCCCCC"> you have couple</font>

31
00:01:49,200 --> 00:01:53,189
<font color="#E5E5E5">privileges level and the most privileged</font>

32
00:01:50,729 --> 00:01:54,900
<font color="#E5E5E5">it is system and there is a mechanism to</font>

33
00:01:53,189 --> 00:01:59,130
communicate between<font color="#E5E5E5"> the operation system</font>

34
00:01:54,900 --> 00:02:01,710
<font color="#CCCCCC">management mode and the instance going</font>

35
00:01:59,130 --> 00:02:04,740
like<font color="#E5E5E5"> that in person system allocate the</font>

36
00:02:01,710 --> 00:02:07,470
buffer<font color="#E5E5E5"> then pass the address of the</font>

37
00:02:04,740 --> 00:02:09,810
buffer through some structure depends<font color="#E5E5E5"> on</font>

38
00:02:07,470 --> 00:02:13,769
<font color="#E5E5E5">their version of</font><font color="#CCCCCC"> the firmware and then</font>

39
00:02:09,810 --> 00:02:15,480
the<font color="#E5E5E5"> SMM code read that boyfriend the</font>

40
00:02:13,769 --> 00:02:20,150
pencil functionality it can read the

41
00:02:15,480 --> 00:02:22,500
right energy<font color="#CCCCCC"> k1 basis from ER</font><font color="#E5E5E5"> the buffer</font>

42
00:02:20,150 --> 00:02:25,519
<font color="#E5E5E5">the others of the buffer be patient</font>

43
00:02:22,500 --> 00:02:28,680
through general purpose register<font color="#CCCCCC"> RB x</font>

44
00:02:25,519 --> 00:02:31,110
indicate<font color="#E5E5E5"> to there is a mechanism named</font>

45
00:02:28,680 --> 00:02:33,470
<font color="#E5E5E5">calm buffer and the others of</font><font color="#CCCCCC"> combo</font><font color="#E5E5E5"> is</font>

46
00:02:31,110 --> 00:02:38,570
<font color="#E5E5E5">passing through your face ETA table</font>

47
00:02:33,470 --> 00:02:42,020
and in normal<font color="#E5E5E5"> behavior the the others of</font>

48
00:02:38,570 --> 00:02:45,799
this<font color="#CCCCCC"> calm buffer is somewhere controlled</font>

49
00:02:42,020 --> 00:02:48,860
by the<font color="#E5E5E5"> operation system but if we point</font>

50
00:02:45,800 --> 00:02:51,530
<font color="#E5E5E5">in the others back to Sam an S&M doesn't</font>

51
00:02:48,860 --> 00:02:55,250
have a<font color="#E5E5E5"> check and we</font><font color="#CCCCCC"> have arbitrary right</font>

52
00:02:51,530 --> 00:02:57,230
<font color="#E5E5E5">in</font><font color="#CCCCCC"> the Sonam code using this right</font>

53
00:02:55,250 --> 00:03:00,620
primitive we usually control the others

54
00:02:57,230 --> 00:03:03,859
where<font color="#CCCCCC"> to</font><font color="#E5E5E5"> right but we not often control</font>

55
00:03:00,620 --> 00:03:06,500
the data at some of the exploits which

56
00:03:03,860 --> 00:03:10,220
we demonstrate previously we are right

57
00:03:06,500 --> 00:03:14,690
<font color="#E5E5E5">zeros and then to make an exploit to</font>

58
00:03:10,220 --> 00:03:17,300
define the structure<font color="#E5E5E5"> in CPUs a state at</font>

59
00:03:14,690 --> 00:03:20,030
<font color="#E5E5E5">some base registration and when we read</font>

60
00:03:17,300 --> 00:03:22,600
<font color="#E5E5E5">this register the</font><font color="#CCCCCC"> Nexus mi will start</font>

61
00:03:20,030 --> 00:03:26,660
<font color="#E5E5E5">executing from unprotected memory and</font>

62
00:03:22,600 --> 00:03:29,410
ring<font color="#CCCCCC"> 0 attacker can control it and make</font>

63
00:03:26,660 --> 00:03:33,380
a<font color="#CCCCCC"> privileged escalation to the SMM code</font>

64
00:03:29,410 --> 00:03:36,859
then this renewability was fixed it by

65
00:03:33,380 --> 00:03:39,500
adding<font color="#E5E5E5"> the check in SMI handlers so SMI</font>

66
00:03:36,860 --> 00:03:43,820
handler<font color="#E5E5E5"> check the the address is not</font>

67
00:03:39,500 --> 00:03:46,190
pointing<font color="#CCCCCC"> to sm m but what we have what</font>

68
00:03:43,820 --> 00:03:48,799
if we have scenario<font color="#CCCCCC"> band we have</font>

69
00:03:46,190 --> 00:03:52,730
hypervisor<font color="#E5E5E5"> or for example hypervisor</font>

70
00:03:48,800 --> 00:03:55,880
basic protection like<font color="#E5E5E5"> v sm or just</font>

71
00:03:52,730 --> 00:03:58,940
hyper-v<font color="#E5E5E5"> with root mutation in this case</font>

72
00:03:55,880 --> 00:04:01,370
we can point<font color="#E5E5E5"> the others in general</font>

73
00:03:58,940 --> 00:04:03,200
purpose register or income buffer to

74
00:04:01,370 --> 00:04:06,530
some of the structure of the<font color="#E5E5E5"> hypervisor</font>

75
00:04:03,200 --> 00:04:10,429
<font color="#CCCCCC">and</font><font color="#E5E5E5"> override</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and in this case the</font>

76
00:04:06,530 --> 00:04:13,150
untrusted<font color="#E5E5E5"> guests from ring</font><font color="#CCCCCC"> 0 make a</font>

77
00:04:10,430 --> 00:04:16,730
privileged<font color="#E5E5E5"> escalation to the hypervisor</font>

78
00:04:13,150 --> 00:04:19,130
<font color="#CCCCCC">the</font><font color="#E5E5E5"> interesting fact is that</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> if</font>

79
00:04:16,730 --> 00:04:23,240
this when<font color="#E5E5E5"> abilities budget in the former</font>

80
00:04:19,130 --> 00:04:25,940
infirmary is fully<font color="#CCCCCC"> protected the</font>

81
00:04:23,240 --> 00:04:27,890
<font color="#CCCCCC">don't receive guests can use it to make</font>

82
00:04:25,940 --> 00:04:30,590
a privilege escalation like<font color="#CCCCCC"> confused AVG</font>

83
00:04:27,890 --> 00:04:32,440
attack<font color="#E5E5E5"> when there is no vulnerability</font>

84
00:04:30,590 --> 00:04:37,130
but you can still exploit and make a

85
00:04:32,440 --> 00:04:39,380
quad<font color="#CCCCCC"> execution and hypervisor and</font><font color="#E5E5E5"> we</font>

86
00:04:37,130 --> 00:04:42,710
<font color="#CCCCCC">demonstrated the exploit to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> VSM</font>

87
00:04:39,380 --> 00:04:46,850
<font color="#CCCCCC">which basically uses</font><font color="#E5E5E5"> some</font>

88
00:04:42,710 --> 00:04:49,900
vulnerability to compromise<font color="#E5E5E5"> vehement</font>

89
00:04:46,850 --> 00:04:57,470
<font color="#CCCCCC">dumb credentials we made this dam in</font>

90
00:04:49,900 --> 00:05:01,820
2015 there was nice example of SMI point

91
00:04:57,470 --> 00:05:07,090
of vulnerability<font color="#E5E5E5"> founded by HR and then</font>

92
00:05:01,820 --> 00:05:10,250
published by<font color="#CCCCCC"> shaji t is said a sec lot</font>

93
00:05:07,090 --> 00:05:12,440
<font color="#CCCCCC">the vulnerability</font><font color="#E5E5E5"> is pretty similar that</font>

94
00:05:10,250 --> 00:05:14,540
<font color="#CCCCCC">they found so it reading the buffer from</font>

95
00:05:12,440 --> 00:05:16,190
<font color="#E5E5E5">the original purpose registry but the</font>

96
00:05:14,540 --> 00:05:18,740
buffer to<font color="#CCCCCC"> the function with</font><font color="#E5E5E5"> less data</font>

97
00:05:16,190 --> 00:05:21,200
and in the function<font color="#CCCCCC"> request data it</font>

98
00:05:18,740 --> 00:05:22,400
using the function read and you

99
00:05:21,200 --> 00:05:24,469
<font color="#E5E5E5">controlling the</font><font color="#CCCCCC"> offset of the</font>

100
00:05:22,400 --> 00:05:27,289
destination you control the source<font color="#E5E5E5"> and</font>

101
00:05:24,470 --> 00:05:29,780
the size<font color="#E5E5E5"> in this case there</font><font color="#CCCCCC"> is no checks</font>

102
00:05:27,290 --> 00:05:31,910
where the<font color="#E5E5E5"> others will be so if you this</font>

103
00:05:29,780 --> 00:05:34,719
<font color="#E5E5E5">is in the Syrah you can dump and read</font>

104
00:05:31,910 --> 00:05:34,720
and write s<font color="#E5E5E5"> mmm</font>

105
00:05:35,290 --> 00:05:41,450
really nice right right up<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the meat</font>

106
00:05:38,690 --> 00:05:43,719
really<font color="#E5E5E5"> cook</font><font color="#CCCCCC"> published many couple</font>

107
00:05:41,450 --> 00:05:45,979
presentation couple<font color="#E5E5E5"> blog post about</font>

108
00:05:43,720 --> 00:05:51,410
different type of<font color="#CCCCCC"> SMN point of</font>

109
00:05:45,980 --> 00:05:54,970
vulnerability<font color="#CCCCCC"> so how the community and</font>

110
00:05:51,410 --> 00:05:57,140
tenders react on this how we<font color="#E5E5E5"> fix it it</font>

111
00:05:54,970 --> 00:05:59,630
<font color="#CCCCCC">there is a protection</font><font color="#E5E5E5"> which I already</font>

112
00:05:57,140 --> 00:06:02,360
mentioned<font color="#CCCCCC"> to check that the artisanal</font>

113
00:05:59,630 --> 00:06:04,880
<font color="#E5E5E5">point into this and SM Ram and flu</font>

114
00:06:02,360 --> 00:06:07,490
function s enemies buffer<font color="#CCCCCC"> Outsiders</font><font color="#E5E5E5"> and</font>

115
00:06:04,880 --> 00:06:09,020
embellish it<font color="#E5E5E5"> fixing the problem with a</font>

116
00:06:07,490 --> 00:06:12,370
firmware but it doesn't<font color="#CCCCCC"> fixing</font><font color="#E5E5E5"> the</font>

117
00:06:09,020 --> 00:06:15,250
<font color="#E5E5E5">problem with the hypervisor and</font>

118
00:06:12,370 --> 00:06:17,330
<font color="#E5E5E5">vulnerability and</font><font color="#CCCCCC"> them prepares</font>

119
00:06:15,250 --> 00:06:21,170
<font color="#CCCCCC">privilege</font><font color="#E5E5E5"> escalation to the hypervisor</font>

120
00:06:17,330 --> 00:06:24,349
<font color="#CCCCCC">so to fix</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> vulnerability there was</font>

121
00:06:21,170 --> 00:06:28,010
an awesome it occasion<font color="#E5E5E5"> added to them</font>

122
00:06:24,350 --> 00:06:31,700
<font color="#E5E5E5">limit combat for others and this so</font><font color="#CCCCCC"> I</font>

123
00:06:28,010 --> 00:06:35,150
<font color="#CCCCCC">just now should be fix it and there is a</font>

124
00:06:31,700 --> 00:06:37,310
<font color="#CCCCCC">SETI</font><font color="#E5E5E5"> table named</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> as a man</font>

125
00:06:35,150 --> 00:06:39,710
mitigation is<font color="#CCCCCC"> EPA table which is</font>

126
00:06:37,310 --> 00:06:42,470
<font color="#E5E5E5">basically should be initialized by the</font>

127
00:06:39,710 --> 00:06:44,090
program<font color="#E5E5E5"> and we did better person system</font>

128
00:06:42,470 --> 00:06:47,480
which is passing<font color="#E5E5E5"> the configuration of</font>

129
00:06:44,090 --> 00:06:49,909
the mitigation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> various</font><font color="#E5E5E5"> couple bits</font>

130
00:06:47,480 --> 00:06:52,160
there<font color="#E5E5E5"> one is defining that the common</font>

131
00:06:49,910 --> 00:06:54,560
buffer<font color="#E5E5E5"> is</font><font color="#CCCCCC"> fixed</font><font color="#E5E5E5"> and in the definite</font>

132
00:06:52,160 --> 00:06:55,999
location<font color="#E5E5E5"> and the SMM is shaken all of</font>

133
00:06:54,560 --> 00:06:58,729
the input and<font color="#E5E5E5"> output buffer</font>

134
00:06:55,999 --> 00:07:00,709
another one is nested<font color="#E5E5E5"> that</font><font color="#CCCCCC"> meaning that</font>

135
00:06:58,729 --> 00:07:02,899
<font color="#E5E5E5">if you have a pointer inside the comb</font>

136
00:07:00,709 --> 00:07:08,809
buffer it shaking<font color="#CCCCCC"> this pointers as well</font>

137
00:07:02,899 --> 00:07:11,479
and another protection<font color="#E5E5E5"> is that you have</font>

138
00:07:08,809 --> 00:07:14,449
locked<font color="#CCCCCC"> some of the configuration of the</font>

139
00:07:11,479 --> 00:07:17,299
hardware after<font color="#E5E5E5"> execution during the exit</font>

140
00:07:14,449 --> 00:07:21,079
<font color="#CCCCCC">booth services for example an interrupt</font>

141
00:07:17,299 --> 00:07:23,239
controller<font color="#E5E5E5"> immu and so on that kind of</font>

142
00:07:21,079 --> 00:07:27,049
<font color="#E5E5E5">mitigation was added after we published</font>

143
00:07:23,239 --> 00:07:29,448
<font color="#E5E5E5">this research and communicators enters a</font>

144
00:07:27,049 --> 00:07:32,299
little bit about<font color="#E5E5E5"> Emma</font><font color="#CCCCCC"> Mayer because this</font>

145
00:07:29,449 --> 00:07:37,099
<font color="#E5E5E5">buck</font><font color="#CCCCCC"> is really rely on the different</font>

146
00:07:32,299 --> 00:07:39,529
<font color="#CCCCCC">behaviors Mao in in x86 system to</font>

147
00:07:37,099 --> 00:07:42,289
<font color="#CCCCCC">communicate to the device there is PCI</font>

148
00:07:39,529 --> 00:07:44,899
Express protocol and in this protocol

149
00:07:42,289 --> 00:07:49,239
there is a fabrics which which contain

150
00:07:44,899 --> 00:07:52,639
multiple components that components

151
00:07:49,239 --> 00:07:54,619
interconnected to certain topologies in

152
00:07:52,639 --> 00:07:56,559
<font color="#CCCCCC">this topology</font><font color="#E5E5E5"> there is a root complex</font>

153
00:07:54,619 --> 00:07:59,869
<font color="#E5E5E5">which has multiple ports and there is</font>

154
00:07:56,559 --> 00:08:04,300
endpoint switches bridges all of them is

155
00:07:59,869 --> 00:08:07,399
<font color="#E5E5E5">connected via PCI Express link every</font>

156
00:08:04,300 --> 00:08:09,559
physical component has up to eight<font color="#CCCCCC"> bit</font>

157
00:08:07,399 --> 00:08:11,779
of physical functions and<font color="#E5E5E5"> although in</font>

158
00:08:09,559 --> 00:08:15,319
some of them may<font color="#CCCCCC"> integrate to the</font><font color="#E5E5E5"> road</font>

159
00:08:11,779 --> 00:08:18,379
complex<font color="#E5E5E5"> so basically when this protocol</font>

160
00:08:15,319 --> 00:08:22,849
<font color="#CCCCCC">is allowing to talk to the device and</font>

161
00:08:18,379 --> 00:08:25,939
send<font color="#E5E5E5"> DMA and so on every device has PC</font>

162
00:08:22,849 --> 00:08:29,419
config space in a device and that<font color="#CCCCCC"> we see</font>

163
00:08:25,939 --> 00:08:33,680
config space<font color="#E5E5E5"> contain them gathering all</font>

164
00:08:29,419 --> 00:08:37,068
them in this in the<font color="#E5E5E5"> the header then it</font>

165
00:08:33,679 --> 00:08:39,739
<font color="#E5E5E5">contain the</font><font color="#CCCCCC"> PCI</font><font color="#E5E5E5"> Express capability</font>

166
00:08:37,068 --> 00:08:43,669
structure and the extensions<font color="#E5E5E5"> so the</font>

167
00:08:39,740 --> 00:08:50,180
entire structure<font color="#E5E5E5"> is 4k</font><font color="#CCCCCC"> but without</font>

168
00:08:43,669 --> 00:08:53,899
extensions is<font color="#E5E5E5"> 256 bytes to get the</font>

169
00:08:50,180 --> 00:08:56,540
access to them<font color="#CCCCCC"> this NPC configuration</font>

170
00:08:53,899 --> 00:08:59,420
there is two interfaces<font color="#CCCCCC"> one is to get</font>

171
00:08:56,540 --> 00:09:05,300
<font color="#CCCCCC">access to PCIe configuration space using</font>

172
00:08:59,420 --> 00:09:06,079
port io c f8<font color="#CCCCCC"> crc</font><font color="#E5E5E5"> when we construct the</font>

173
00:09:05,300 --> 00:09:08,449
<font color="#E5E5E5">address</font>

174
00:09:06,079 --> 00:09:09,589
knowing the bus device and function and

175
00:09:08,449 --> 00:09:12,050
<font color="#E5E5E5">all set which</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to</font>

176
00:09:09,590 --> 00:09:14,840
from the specific device<font color="#E5E5E5"> and then the</font>

177
00:09:12,050 --> 00:09:17,569
<font color="#CCCCCC">peso</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> CHC we can read and</font><font color="#E5E5E5"> write</font>

178
00:09:14,840 --> 00:09:21,790
<font color="#E5E5E5">the specific register in</font><font color="#CCCCCC"> PC</font>

179
00:09:17,570 --> 00:09:24,830
configuration<font color="#E5E5E5"> to get access to the</font>

180
00:09:21,790 --> 00:09:27,140
extended configuration space<font color="#E5E5E5"> we need to</font>

181
00:09:24,830 --> 00:09:30,140
use an<font color="#E5E5E5"> enhancement configuration access</font>

182
00:09:27,140 --> 00:09:33,380
map mechanism<font color="#E5E5E5"> we just planted as memory</font>

183
00:09:30,140 --> 00:09:35,480
map so it basically memory which is

184
00:09:33,380 --> 00:09:37,160
<font color="#E5E5E5">split by</font><font color="#CCCCCC"> four kilobytes per each bus</font>

185
00:09:35,480 --> 00:09:38,930
device function and through that memory

186
00:09:37,160 --> 00:09:41,990
we can<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the extension</font>

187
00:09:38,930 --> 00:09:44,900
configuration space of the device and

188
00:09:41,990 --> 00:09:48,500
read the register from<font color="#E5E5E5"> there so to read</font>

189
00:09:44,900 --> 00:09:51,890
them<font color="#E5E5E5"> we use in a memory control memory</font>

190
00:09:48,500 --> 00:09:54,530
map configurator<font color="#E5E5E5"> plus bus multiply 32</font>

191
00:09:51,890 --> 00:09:56,240
multiply 8 multiply 1 k<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> device</font>

192
00:09:54,530 --> 00:09:59,180
multiplying multiplying 1 k plus

193
00:09:56,240 --> 00:10:00,950
function<font color="#E5E5E5"> plus a set then</font><font color="#CCCCCC"> we can send</font><font color="#E5E5E5"> the</font>

194
00:09:59,180 --> 00:10:02,839
address<font color="#E5E5E5"> then we use it as a memory</font>

195
00:10:00,950 --> 00:10:07,940
<font color="#CCCCCC">access and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can read and write</font>

196
00:10:02,840 --> 00:10:10,820
register<font color="#E5E5E5"> so they're basically all</font><font color="#CCCCCC"> of</font>

197
00:10:07,940 --> 00:10:14,230
<font color="#E5E5E5">that configuration</font><font color="#CCCCCC"> all of</font><font color="#E5E5E5"> that the same</font>

198
00:10:10,820 --> 00:10:16,610
configuration<font color="#E5E5E5"> is for storing some</font>

199
00:10:14,230 --> 00:10:19,730
configuration register for the device

200
00:10:16,610 --> 00:10:21,530
but even for<font color="#E5E5E5"> K was not enough for modern</font>

201
00:10:19,730 --> 00:10:23,990
devices they want to store much more

202
00:10:21,530 --> 00:10:27,589
like graphics<font color="#E5E5E5"> want to storm megabytes</font>

203
00:10:23,990 --> 00:10:32,480
<font color="#E5E5E5">and here was the era when</font><font color="#CCCCCC"> I'm on my own</font>

204
00:10:27,590 --> 00:10:35,170
<font color="#CCCCCC">became so then</font><font color="#E5E5E5"> a memory is the range of</font>

205
00:10:32,480 --> 00:10:38,750
memory and access to<font color="#CCCCCC"> that range is</font>

206
00:10:35,170 --> 00:10:43,040
forwarding to<font color="#CCCCCC"> the device and you guys</font>

207
00:10:38,750 --> 00:10:45,650
will handle that and this ranges is

208
00:10:43,040 --> 00:10:48,800
defined through<font color="#CCCCCC"> a memory of bars and</font><font color="#E5E5E5"> a</font>

209
00:10:45,650 --> 00:10:50,930
memory of bars is in PCIe config space

210
00:10:48,800 --> 00:10:54,979
which we are talking<font color="#CCCCCC"> a previous slide</font>

211
00:10:50,930 --> 00:10:59,329
<font color="#CCCCCC">and if you see like there is a header of</font>

212
00:10:54,980 --> 00:11:02,450
<font color="#CCCCCC">the PC</font><font color="#E5E5E5"> in configuration space and there</font>

213
00:10:59,330 --> 00:11:05,390
is device ID there's<font color="#E5E5E5"> a vendor ID status</font>

214
00:11:02,450 --> 00:11:09,160
<font color="#E5E5E5">registry some</font><font color="#CCCCCC"> other register</font><font color="#E5E5E5"> and then</font>

215
00:11:05,390 --> 00:11:12,410
the base on the base<font color="#E5E5E5"> r0 is the first</font>

216
00:11:09,160 --> 00:11:14,740
animal<font color="#E5E5E5"> bar</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> you see here there's just</font>

217
00:11:12,410 --> 00:11:17,660
<font color="#E5E5E5">the address</font><font color="#CCCCCC"> so we don't know the size</font>

218
00:11:14,740 --> 00:11:20,370
<font color="#CCCCCC">then and there</font>

219
00:11:17,660 --> 00:11:23,040
the bars<font color="#E5E5E5"> it sells they are</font><font color="#CCCCCC"> self-aligned</font>

220
00:11:20,370 --> 00:11:25,590
<font color="#E5E5E5">minion if you write all as to the bar</font>

221
00:11:23,040 --> 00:11:28,170
the base which it didn't flip from 0 to

222
00:11:25,590 --> 00:11:31,170
1 is<font color="#E5E5E5"> the beliefs which</font><font color="#CCCCCC"> defining</font><font color="#E5E5E5"> the size</font>

223
00:11:28,170 --> 00:11:33,930
of them and<font color="#CCCCCC"> honor you bar</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example if</font>

224
00:11:31,170 --> 00:11:39,540
there<font color="#CCCCCC"> is one bite</font><font color="#E5E5E5"> dinner plate then</font>

225
00:11:33,930 --> 00:11:45,989
<font color="#E5E5E5">meaning that you have the 256 size of</font>

226
00:11:39,540 --> 00:11:48,630
them bar<font color="#E5E5E5"> 256 byte</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is the simplified</font>

227
00:11:45,990 --> 00:11:53,610
<font color="#CCCCCC">version of the layout in the memory</font><font color="#E5E5E5"> just</font>

228
00:11:48,630 --> 00:11:56,490
don't get the small representation<font color="#E5E5E5"> all</font>

229
00:11:53,610 --> 00:11:58,530
<font color="#CCCCCC">very similar</font><font color="#E5E5E5"> us so we have a loader arm</font>

230
00:11:56,490 --> 00:12:01,050
then there is a<font color="#CCCCCC"> cement protected by</font>

231
00:11:58,530 --> 00:12:04,439
<font color="#CCCCCC">summarize there is a graphic memory</font><font color="#E5E5E5"> then</font>

232
00:12:01,050 --> 00:12:06,959
we have told and there is a memory map

233
00:12:04,440 --> 00:12:09,090
config<font color="#E5E5E5"> then there is loader on this all</font>

234
00:12:06,960 --> 00:12:11,520
of<font color="#CCCCCC"> the bar which</font><font color="#E5E5E5"> was defined to</font><font color="#CCCCCC"> PCIe</font>

235
00:12:09,090 --> 00:12:13,110
config space and there is a direct

236
00:12:11,520 --> 00:12:14,760
<font color="#CCCCCC">mapping BIOS and there we have hydrogen</font>

237
00:12:13,110 --> 00:12:18,870
<font color="#E5E5E5">so all of the</font><font color="#CCCCCC"> bars would</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> defined</font>

238
00:12:14,760 --> 00:12:21,930
somewhere<font color="#E5E5E5"> here and here's a couple</font>

239
00:12:18,870 --> 00:12:24,780
examples of<font color="#E5E5E5"> the enema</font><font color="#CCCCCC"> yoke bars there is</font>

240
00:12:21,930 --> 00:12:28,739
the name of<font color="#CCCCCC"> the bar like DDT am a mother</font>

241
00:12:24,780 --> 00:12:32,550
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is has the other four zero zero</font>

242
00:12:28,740 --> 00:12:36,330
zero two zero<font color="#CCCCCC"> ten with ten is all set</font>

243
00:12:32,550 --> 00:12:39,959
and<font color="#E5E5E5"> then it has the sides the two</font>

244
00:12:36,330 --> 00:12:42,000
megabytes<font color="#CCCCCC"> so over them is you</font><font color="#E5E5E5"> can use a</font>

245
00:12:39,960 --> 00:12:47,010
<font color="#CCCCCC">cheap sector to just</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> on my list</font>

246
00:12:42,000 --> 00:12:51,720
and enumerate the known<font color="#E5E5E5"> is a bars</font><font color="#CCCCCC"> Mme</font>

247
00:12:47,010 --> 00:12:55,100
<font color="#CCCCCC">you bar sorry so one of the important</font>

248
00:12:51,720 --> 00:12:57,480
aspects<font color="#E5E5E5"> of the Mme</font><font color="#CCCCCC"> arrange registry</font>

249
00:12:55,100 --> 00:12:59,640
<font color="#CCCCCC">Monroe bars</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that they can be</font>

250
00:12:57,480 --> 00:13:02,010
<font color="#CCCCCC">reallocated ball at runtime</font>

251
00:12:59,640 --> 00:13:05,100
<font color="#CCCCCC">nós can relocate them to</font><font color="#E5E5E5"> any other</font>

252
00:13:02,010 --> 00:13:07,200
location<font color="#CCCCCC"> some of them</font><font color="#E5E5E5"> are your bars is</font>

253
00:13:05,100 --> 00:13:08,850
not relocatable they fix it<font color="#E5E5E5"> or lock it</font>

254
00:13:07,200 --> 00:13:13,560
by the framer but some of them is

255
00:13:08,850 --> 00:13:16,160
relocated and<font color="#E5E5E5"> now Yuri will explain why</font>

256
00:13:13,560 --> 00:13:16,160
it is<font color="#E5E5E5"> in issue</font>

257
00:13:19,920 --> 00:13:26,729
everyone I take it you can hear me<font color="#E5E5E5"> so</font>

258
00:13:24,570 --> 00:13:30,120
I've just I've<font color="#CCCCCC"> just noticed that all of</font>

259
00:13:26,730 --> 00:13:32,550
<font color="#CCCCCC">the animation that I spend hours on it's</font>

260
00:13:30,120 --> 00:13:33,240
<font color="#E5E5E5">pretty much gone from the slides that's</font>

261
00:13:32,550 --> 00:13:34,949
convenient

262
00:13:33,240 --> 00:13:38,100
<font color="#CCCCCC">that's I</font><font color="#E5E5E5"> guess the difference between</font>

263
00:13:34,950 --> 00:13:40,649
PowerPoint and PowerPoint view anyway

264
00:13:38,100 --> 00:13:44,209
so how's<font color="#E5E5E5"> that related to what</font><font color="#CCCCCC"> L it's</font>

265
00:13:40,649 --> 00:13:47,089
been talking<font color="#CCCCCC"> about these issues</font><font color="#E5E5E5"> are</font>

266
00:13:44,209 --> 00:13:49,829
<font color="#CCCCCC">dependent on</font><font color="#E5E5E5"> this memory mapped i/o</font>

267
00:13:47,089 --> 00:13:52,940
configuration<font color="#E5E5E5"> behavior and in fact they</font>

268
00:13:49,829 --> 00:13:58,079
are<font color="#E5E5E5"> kind of a cause by the way firmer</font>

269
00:13:52,940 --> 00:14:01,290
<font color="#E5E5E5">I've talked to the devices talks to the</font>

270
00:13:58,079 --> 00:14:05,010
<font color="#CCCCCC">devices through the memory mapped i/o so</font>

271
00:14:01,290 --> 00:14:07,829
the way the way firmer uses this memory

272
00:14:05,010 --> 00:14:10,170
mapped i/o mechanism and communicates

273
00:14:07,829 --> 00:14:11,880
with the<font color="#CCCCCC"> devices that</font><font color="#E5E5E5"> M different</font>

274
00:14:10,170 --> 00:14:13,680
specifically to the SMI handlers but

275
00:14:11,880 --> 00:14:16,110
keep in mind<font color="#CCCCCC"> that the entire</font><font color="#E5E5E5"> afirma</font>

276
00:14:13,680 --> 00:14:18,899
including the booth firmer<font color="#E5E5E5"> regardless of</font>

277
00:14:16,110 --> 00:14:20,790
which type of firmer that<font color="#E5E5E5"> is your v</font>

278
00:14:18,899 --> 00:14:22,889
<font color="#CCCCCC">based firm or Corbitt based firmer or</font>

279
00:14:20,790 --> 00:14:26,730
just legacy bias or anything<font color="#E5E5E5"> anything</font>

280
00:14:22,889 --> 00:14:31,140
else<font color="#CCCCCC"> also talks to the devices through</font>

281
00:14:26,730 --> 00:14:34,110
the memory mapped i/o<font color="#E5E5E5"> mechanism so there</font>

282
00:14:31,140 --> 00:14:36,209
is a<font color="#CCCCCC"> PCI configuration space an H device</font>

283
00:14:34,110 --> 00:14:38,820
<font color="#E5E5E5">where actually each virtual device or a</font>

284
00:14:36,209 --> 00:14:42,449
function of a device be shaken together

285
00:14:38,820 --> 00:14:44,880
<font color="#E5E5E5">and it has</font><font color="#CCCCCC"> a it has this base address</font>

286
00:14:42,449 --> 00:14:46,740
register which defines<font color="#E5E5E5"> the base of the</font>

287
00:14:44,880 --> 00:14:50,699
memory range for that particular<font color="#E5E5E5"> device</font>

288
00:14:46,740 --> 00:14:53,899
<font color="#E5E5E5">and so what usually as my handlers do as</font>

289
00:14:50,699 --> 00:14:58,170
well as any other<font color="#E5E5E5"> former</font><font color="#CCCCCC"> boot former</font>

290
00:14:53,899 --> 00:15:00,420
they get the base register<font color="#CCCCCC"> they read the</font>

291
00:14:58,170 --> 00:15:03,569
base register to get<font color="#E5E5E5"> the base address of</font>

292
00:15:00,420 --> 00:15:06,569
this<font color="#E5E5E5"> on my range</font><font color="#CCCCCC"> and then they either</font>

293
00:15:03,569 --> 00:15:08,880
read registers<font color="#E5E5E5"> within that range</font>

294
00:15:06,569 --> 00:15:11,519
<font color="#CCCCCC">MOA registers or write those registers</font>

295
00:15:08,880 --> 00:15:16,639
or read modify write those registers so

296
00:15:11,519 --> 00:15:23,370
basically in order to send<font color="#CCCCCC"> io cycles to</font>

297
00:15:16,639 --> 00:15:25,410
to the particular device<font color="#CCCCCC"> and so yeah so</font>

298
00:15:23,370 --> 00:15:29,050
this<font color="#CCCCCC"> is how they essentially</font>

299
00:15:25,410 --> 00:15:33,089
<font color="#E5E5E5">communicates with the devices now</font>

300
00:15:29,050 --> 00:15:36,370
the problem the theory of the problem

301
00:15:33,090 --> 00:15:38,650
becomes<font color="#CCCCCC"> that there is an implicit trust</font>

302
00:15:36,370 --> 00:15:41,080
assumption on<font color="#CCCCCC"> the former site</font><font color="#E5E5E5"> on the</font>

303
00:15:38,650 --> 00:15:43,540
former part that those are<font color="#CCCCCC"> hardwood</font>

304
00:15:41,080 --> 00:15:45,550
<font color="#CCCCCC">registers so therefore they're part</font><font color="#E5E5E5"> of</font>

305
00:15:43,540 --> 00:15:48,790
the<font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> and hardware is part of</font><font color="#E5E5E5"> the</font>

306
00:15:45,550 --> 00:15:51,579
trust<font color="#E5E5E5"> boundary and</font><font color="#CCCCCC"> so basically firmer</font>

307
00:15:48,790 --> 00:15:53,980
<font color="#E5E5E5">but mostly for the most part trusts all</font>

308
00:15:51,580 --> 00:15:56,380
of the hardware<font color="#CCCCCC"> right including those</font>

309
00:15:53,980 --> 00:15:58,120
registers<font color="#E5E5E5"> so there's an assumption that</font>

310
00:15:56,380 --> 00:16:01,750
nobody can change those registers

311
00:15:58,120 --> 00:16:05,050
<font color="#E5E5E5">however those are just rings here</font>

312
00:16:01,750 --> 00:16:08,080
accessible on registers<font color="#CCCCCC"> that could be</font>

313
00:16:05,050 --> 00:16:12,310
<font color="#E5E5E5">modified by any rings error code right</font>

314
00:16:08,080 --> 00:16:14,670
<font color="#E5E5E5">so that's one example of what the</font><font color="#CCCCCC"> rings</font>

315
00:16:12,310 --> 00:16:18,010
error code<font color="#CCCCCC"> or</font><font color="#E5E5E5"> West level code can do or</font>

316
00:16:14,670 --> 00:16:20,589
the<font color="#CCCCCC"> The Cove the ring ring</font><font color="#E5E5E5"> three code if</font>

317
00:16:18,010 --> 00:16:23,530
it has<font color="#E5E5E5"> enough privileges to talk to the</font>

318
00:16:20,590 --> 00:16:25,060
<font color="#CCCCCC">PCIe config space let's say</font><font color="#E5E5E5"> modify</font><font color="#CCCCCC"> PC I</font>

319
00:16:23,530 --> 00:16:30,520
can<font color="#CCCCCC"> take registers like this bar</font>

320
00:16:25,060 --> 00:16:34,300
<font color="#E5E5E5">register so so the the problem is that</font>

321
00:16:30,520 --> 00:16:36,490
the<font color="#E5E5E5"> stream 0 code or</font><font color="#CCCCCC"> os</font><font color="#E5E5E5"> level code can</font>

322
00:16:34,300 --> 00:16:38,760
modify those bar registers<font color="#CCCCCC"> and relocate</font>

323
00:16:36,490 --> 00:16:42,040
the range<font color="#E5E5E5"> for a particular device</font>

324
00:16:38,760 --> 00:16:44,260
<font color="#E5E5E5">somewhere</font><font color="#CCCCCC"> else in physical addressable</font>

325
00:16:42,040 --> 00:16:46,780
space<font color="#CCCCCC"> it could be somewhere in other MMI</font>

326
00:16:44,260 --> 00:16:48,970
oh it could be overlapping with some

327
00:16:46,780 --> 00:16:51,880
other<font color="#E5E5E5"> things but it</font><font color="#CCCCCC"> Cadell can also be</font>

328
00:16:48,970 --> 00:16:54,190
in<font color="#E5E5E5"> the DRAM in the system memory and</font>

329
00:16:51,880 --> 00:16:56,260
specifically one particular location

330
00:16:54,190 --> 00:16:58,990
where the attacker would be interested

331
00:16:56,260 --> 00:17:03,819
in is<font color="#E5E5E5"> the system management mode memory</font>

332
00:16:58,990 --> 00:17:06,690
so the the<font color="#CCCCCC"> the exploit code could modify</font>

333
00:17:03,820 --> 00:17:13,230
and relocate the memory mapped i/o<font color="#E5E5E5"> range</font>

334
00:17:06,690 --> 00:17:15,790
to overlap<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> SRAM then when SMI</font>

335
00:17:13,230 --> 00:17:18,690
<font color="#CCCCCC">interrupts is generated either</font><font color="#E5E5E5"> by</font>

336
00:17:15,790 --> 00:17:22,599
<font color="#E5E5E5">hardware or by the</font><font color="#CCCCCC"> attack code itself</font>

337
00:17:18,690 --> 00:17:25,630
the<font color="#E5E5E5"> the firm</font><font color="#CCCCCC"> res my handler former</font>

338
00:17:22,599 --> 00:17:28,030
attempts to<font color="#E5E5E5"> communicate</font><font color="#CCCCCC"> with the device</font>

339
00:17:25,630 --> 00:17:30,300
to this<font color="#E5E5E5"> memory map</font><font color="#CCCCCC"> that range</font><font color="#E5E5E5"> attempts</font>

340
00:17:28,030 --> 00:17:34,600
<font color="#E5E5E5">to read registers of write registers and</font>

341
00:17:30,300 --> 00:17:38,340
<font color="#CCCCCC">so basically</font><font color="#E5E5E5"> instead of actually sending</font>

342
00:17:34,600 --> 00:17:43,000
<font color="#CCCCCC">cycles to</font><font color="#E5E5E5"> the device as Emma - cycles</font>

343
00:17:38,340 --> 00:17:46,029
which are memory cycles on the<font color="#E5E5E5"> PCI bus</font>

344
00:17:43,000 --> 00:17:47,950
it sends memory transactions to its own

345
00:17:46,029 --> 00:17:49,419
memory<font color="#E5E5E5"> or some other memory</font><font color="#CCCCCC"> work</font>

346
00:17:47,950 --> 00:17:52,570
depending on where the attack have

347
00:17:49,419 --> 00:17:54,730
<font color="#CCCCCC">relocated this</font><font color="#E5E5E5"> mi</font><font color="#CCCCCC"> arrange so that</font>

348
00:17:52,570 --> 00:17:56,649
<font color="#E5E5E5">potentially can either expose data</font>

349
00:17:54,730 --> 00:17:58,750
because it reads its own<font color="#E5E5E5"> memory or</font>

350
00:17:56,649 --> 00:18:01,689
basically<font color="#CCCCCC"> modified modify the control</font>

351
00:17:58,750 --> 00:18:05,559
<font color="#CCCCCC">flow somehow if it reads some attacker</font>

352
00:18:01,690 --> 00:18:07,750
manipulated data or it can<font color="#CCCCCC"> potentially</font>

353
00:18:05,559 --> 00:18:11,889
corrupt<font color="#E5E5E5"> the memory because of the memory</font>

354
00:18:07,750 --> 00:18:13,990
write cycles<font color="#E5E5E5"> to to the my registers</font><font color="#CCCCCC"> so</font>

355
00:18:11,890 --> 00:18:16,510
that's the<font color="#E5E5E5"> theory of the this problem</font>

356
00:18:13,990 --> 00:18:18,940
<font color="#CCCCCC">and</font><font color="#E5E5E5"> what we've observed in multiple</font>

357
00:18:16,510 --> 00:18:21,610
types of former including<font color="#CCCCCC"> efi and</font>

358
00:18:18,940 --> 00:18:24,130
<font color="#CCCCCC">corbett former r is</font><font color="#E5E5E5"> that the SMI</font>

359
00:18:21,610 --> 00:18:30,070
handlers communicate with a<font color="#E5E5E5"> lot of my</font>

360
00:18:24,130 --> 00:18:36,460
<font color="#CCCCCC">own bars an examples include eh CI USB</font>

361
00:18:30,070 --> 00:18:39,428
two bars<font color="#CCCCCC"> gigabit ethernet lan root</font>

362
00:18:36,460 --> 00:18:43,690
complex<font color="#CCCCCC"> mio that's the main MMO for the</font>

363
00:18:39,429 --> 00:18:45,669
<font color="#E5E5E5">pc HS or specifically the spy registers</font>

364
00:18:43,690 --> 00:18:47,620
then basically in order<font color="#E5E5E5"> to communicate</font>

365
00:18:45,669 --> 00:18:51,669
with<font color="#E5E5E5"> the spy flash</font><font color="#CCCCCC"> right to the spy</font>

366
00:18:47,620 --> 00:18:55,209
flash<font color="#CCCCCC"> will read</font><font color="#E5E5E5"> from the spy</font><font color="#CCCCCC"> flash HD is</font>

367
00:18:51,669 --> 00:18:59,260
<font color="#E5E5E5">at a controller</font><font color="#CCCCCC"> mmm io x</font><font color="#E5E5E5"> HCI USB 3</font>

368
00:18:55,210 --> 00:19:02,889
controller integrated graphics device<font color="#E5E5E5"> my</font>

369
00:18:59,260 --> 00:19:06,158
<font color="#CCCCCC">or basically the</font><font color="#E5E5E5"> GTT</font><font color="#CCCCCC"> mmm ADR range for</font>

370
00:19:02,889 --> 00:19:07,719
the graphics device or some other<font color="#CCCCCC"> my OS</font>

371
00:19:06,159 --> 00:19:10,779
like for example<font color="#CCCCCC"> there</font><font color="#E5E5E5"> I think it's a</font>

372
00:19:07,720 --> 00:19:13,779
<font color="#CCCCCC">LED controller or something they're on a</font>

373
00:19:10,779 --> 00:19:15,220
<font color="#E5E5E5">different</font><font color="#CCCCCC"> bus</font><font color="#E5E5E5"> in the specific systems</font><font color="#CCCCCC"> it</font>

374
00:19:13,779 --> 00:19:18,669
could be it could<font color="#E5E5E5"> be more this</font><font color="#CCCCCC"> is what</font>

375
00:19:15,220 --> 00:19:21,220
we've seen<font color="#CCCCCC"> it could be it could be</font><font color="#E5E5E5"> more</font>

376
00:19:18,669 --> 00:19:23,559
so there might be a specific<font color="#CCCCCC"> system that</font>

377
00:19:21,220 --> 00:19:25,240
has a specific SMI handler which

378
00:19:23,559 --> 00:19:29,200
communicates<font color="#E5E5E5"> with a specific device or</font>

379
00:19:25,240 --> 00:19:30,970
maybe<font color="#E5E5E5"> it</font><font color="#CCCCCC"> has some functionality</font><font color="#E5E5E5"> specific</font>

380
00:19:29,200 --> 00:19:35,370
to<font color="#CCCCCC"> that system</font><font color="#E5E5E5"> communicating</font><font color="#CCCCCC"> with a</font>

381
00:19:30,970 --> 00:19:38,950
generic device<font color="#E5E5E5"> so this is an example</font>

382
00:19:35,370 --> 00:19:41,350
this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> example of communicating with</font>

383
00:19:38,950 --> 00:19:42,820
<font color="#CCCCCC">the</font><font color="#E5E5E5"> spy controller in order to read</font>

384
00:19:41,350 --> 00:19:46,480
something<font color="#E5E5E5"> from spy flash or write</font>

385
00:19:42,820 --> 00:19:49,389
something<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use by flash so there is a</font>

386
00:19:46,480 --> 00:19:52,690
command<font color="#CCCCCC"> basically the first command is</font>

387
00:19:49,389 --> 00:19:55,149
attempting to store<font color="#CCCCCC"> a persistent</font>

388
00:19:52,690 --> 00:19:56,799
configuration for the<font color="#CCCCCC"> ufi firmer</font><font color="#E5E5E5"> in</font>

389
00:19:55,149 --> 00:19:58,330
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the spy /</font><font color="#E5E5E5"> it's called you if I</font>

390
00:19:56,799 --> 00:20:00,940
<font color="#E5E5E5">variable if</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> familiar</font><font color="#CCCCCC"> but</font>

391
00:19:58,330 --> 00:20:02,769
basically if the it's the configuration

392
00:20:00,940 --> 00:20:05,229
<font color="#CCCCCC">of the firma</font><font color="#E5E5E5"> so this is the first</font>

393
00:20:02,769 --> 00:20:07,509
<font color="#E5E5E5">command attempts to store something into</font>

394
00:20:05,229 --> 00:20:10,029
the spy flash<font color="#CCCCCC"> this</font><font color="#E5E5E5"> configuration and the</font>

395
00:20:07,509 --> 00:20:12,729
second command just dumps the this<font color="#E5E5E5"> spi</font>

396
00:20:10,029 --> 00:20:15,429
<font color="#E5E5E5">memory memory map range all the</font>

397
00:20:12,729 --> 00:20:18,190
registers<font color="#CCCCCC"> I don't show all the registers</font>

398
00:20:15,429 --> 00:20:20,259
here I'm just<font color="#E5E5E5"> showing</font><font color="#CCCCCC"> the registers that</font>

399
00:20:18,190 --> 00:20:23,139
I'm interested in<font color="#E5E5E5"> and so you can see</font>

400
00:20:20,259 --> 00:20:25,749
that there's the<font color="#CCCCCC"> SPI status and control</font>

401
00:20:23,139 --> 00:20:29,408
register which tells the status of<font color="#E5E5E5"> the</font>

402
00:20:25,749 --> 00:20:31,989
<font color="#E5E5E5">span</font><font color="#CCCCCC"> spi cycle and also</font><font color="#E5E5E5"> sent sent that</font>

403
00:20:29,409 --> 00:20:34,479
<font color="#CCCCCC">SPI psycho on the SPI bus</font><font color="#E5E5E5"> there's a</font>

404
00:20:31,989 --> 00:20:36,909
there's an SPI flash<font color="#E5E5E5"> address it's the</font>

405
00:20:34,479 --> 00:20:41,889
<font color="#E5E5E5">it's the register that is programmed</font>

406
00:20:36,909 --> 00:20:44,139
with<font color="#CCCCCC"> the flash</font><font color="#E5E5E5"> address only</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> SPI</font>

407
00:20:41,889 --> 00:20:46,629
flash device and there's also a whole

408
00:20:44,139 --> 00:20:48,908
<font color="#CCCCCC">bunch of registers that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> programmed</font>

409
00:20:46,629 --> 00:20:51,488
with<font color="#CCCCCC"> the contents of what you want to</font>

410
00:20:48,909 --> 00:20:53,619
write to this<font color="#E5E5E5"> big flash or what you want</font>

411
00:20:51,489 --> 00:20:56,019
<font color="#E5E5E5">to read from the SPI flash so in this</font>

412
00:20:53,619 --> 00:20:59,139
particular case<font color="#E5E5E5"> this is the contents of</font>

413
00:20:56,019 --> 00:21:01,019
that<font color="#E5E5E5"> variable that I've been</font><font color="#CCCCCC"> writing in</font>

414
00:20:59,139 --> 00:21:05,080
the<font color="#E5E5E5"> first command so you</font><font color="#CCCCCC"> can see all</font>

415
00:21:01,019 --> 00:21:07,509
<font color="#CCCCCC">42:42</font><font color="#E5E5E5"> let's be right so</font><font color="#CCCCCC"> the contents of</font>

416
00:21:05,080 --> 00:21:09,189
the variable<font color="#CCCCCC"> was</font><font color="#E5E5E5"> all B's and and you can</font>

417
00:21:07,509 --> 00:21:13,509
see that all<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> registers now</font>

418
00:21:09,190 --> 00:21:17,589
contain the contents of the variable<font color="#CCCCCC"> so</font>

419
00:21:13,509 --> 00:21:19,899
obviously if we overlap this<font color="#E5E5E5"> SPI my</font>

420
00:21:17,589 --> 00:21:22,509
range with with<font color="#E5E5E5"> something else like the</font>

421
00:21:19,899 --> 00:21:26,498
the<font color="#CCCCCC"> SM Ram or or some</font><font color="#E5E5E5"> other page</font>

422
00:21:22,509 --> 00:21:28,179
protected then we can<font color="#E5E5E5"> call the this</font>

423
00:21:26,499 --> 00:21:31,869
<font color="#E5E5E5">contents of the variable</font><font color="#CCCCCC"> spread amount</font>

424
00:21:28,179 --> 00:21:34,960
<font color="#E5E5E5">onto</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> onto that range so</font><font color="#CCCCCC"> how do we</font>

425
00:21:31,869 --> 00:21:37,959
find this type<font color="#CCCCCC"> of issue so</font><font color="#E5E5E5"> obviously you</font>

426
00:21:34,960 --> 00:21:40,539
<font color="#E5E5E5">know it's my handler is writing</font>

427
00:21:37,960 --> 00:21:45,489
something<font color="#CCCCCC"> to spy bar or to of sorry to</font>

428
00:21:40,539 --> 00:21:48,639
any my<font color="#E5E5E5"> bar</font><font color="#CCCCCC"> so it looks like</font><font color="#E5E5E5"> to find all</font>

429
00:21:45,489 --> 00:21:50,259
those problems it's just<font color="#E5E5E5"> easy as dump</font>

430
00:21:48,639 --> 00:21:53,019
the contents of the<font color="#E5E5E5"> year in my range</font>

431
00:21:50,259 --> 00:21:55,269
<font color="#E5E5E5">then cause</font><font color="#CCCCCC"> the SMI</font><font color="#E5E5E5"> and then dump again</font>

432
00:21:53,019 --> 00:22:00,639
and see which registers changed in the

433
00:21:55,269 --> 00:22:01,929
SMI and<font color="#E5E5E5"> now you know that the SMI</font>

434
00:22:00,639 --> 00:22:03,810
handler modified those registers

435
00:22:01,929 --> 00:22:05,970
unfortunately this is a young

436
00:22:03,810 --> 00:22:08,820
<font color="#CCCCCC">a lot more</font><font color="#E5E5E5"> complex</font><font color="#CCCCCC"> than that and</font>

437
00:22:05,970 --> 00:22:10,530
<font color="#CCCCCC">initially we thought it</font><font color="#E5E5E5"> would be very</font>

438
00:22:08,820 --> 00:22:12,590
<font color="#E5E5E5">similar to identify those issues at one</font>

439
00:22:10,530 --> 00:22:14,850
time but in reality it's pretty complex

440
00:22:12,590 --> 00:22:17,669
<font color="#CCCCCC">and the reason is</font><font color="#E5E5E5"> because those are not</font>

441
00:22:14,850 --> 00:22:20,250
<font color="#CCCCCC">the memory contents so in addition to</font>

442
00:22:17,670 --> 00:22:22,530
firmware<font color="#E5E5E5"> other parties are also</font>

443
00:22:20,250 --> 00:22:24,330
<font color="#CCCCCC">brighting to those registers so the</font>

444
00:22:22,530 --> 00:22:27,000
<font color="#E5E5E5">hardware itself the devices or</font>

445
00:22:24,330 --> 00:22:29,730
integrated controllers or some logic in

446
00:22:27,000 --> 00:22:32,820
<font color="#E5E5E5">hardware rights to those registers in</font>

447
00:22:29,730 --> 00:22:35,790
pretty much any<font color="#CCCCCC"> mm-my bar for</font><font color="#E5E5E5"> example</font>

448
00:22:32,820 --> 00:22:39,750
some of<font color="#E5E5E5"> the bars like graphics bars the</font>

449
00:22:35,790 --> 00:22:42,570
the hardware<font color="#E5E5E5"> rights to thousands of</font>

450
00:22:39,750 --> 00:22:45,000
registers in<font color="#E5E5E5"> the in the in the</font><font color="#CCCCCC"> my range</font>

451
00:22:42,570 --> 00:22:47,879
so it's pretty difficult<font color="#E5E5E5"> to actually</font>

452
00:22:45,000 --> 00:22:50,220
identify which registers are have been

453
00:22:47,880 --> 00:22:53,100
<font color="#CCCCCC">modified by the</font><font color="#E5E5E5"> M by the SMI code itself</font>

454
00:22:50,220 --> 00:22:56,070
<font color="#CCCCCC">so that's</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of the high level</font><font color="#E5E5E5"> all</font>

455
00:22:53,100 --> 00:22:57,929
entire flow we could have solved that

456
00:22:56,070 --> 00:23:01,139
<font color="#E5E5E5">problem so basically what we do is</font><font color="#CCCCCC"> a</font>

457
00:22:57,930 --> 00:23:03,330
<font color="#E5E5E5">that we for every</font><font color="#CCCCCC"> my range we dump the</font>

458
00:23:01,140 --> 00:23:06,150
<font color="#CCCCCC">um I</font><font color="#E5E5E5"> arrange multiple times with a delay</font>

459
00:23:03,330 --> 00:23:08,189
let's say<font color="#CCCCCC"> twenty times</font><font color="#E5E5E5"> and we find all</font>

460
00:23:06,150 --> 00:23:11,610
of the registers that<font color="#E5E5E5"> are that normally</font>

461
00:23:08,190 --> 00:23:13,230
change<font color="#E5E5E5"> without as my</font><font color="#CCCCCC"> Amber's so we add</font>

462
00:23:11,610 --> 00:23:14,969
<font color="#E5E5E5">those registers to</font><font color="#CCCCCC"> the list and call it</font>

463
00:23:13,230 --> 00:23:17,910
a<font color="#E5E5E5"> normal difference or something like</font>

464
00:23:14,970 --> 00:23:20,640
that<font color="#CCCCCC"> and then we trigger</font><font color="#E5E5E5"> a smize or</font>

465
00:23:17,910 --> 00:23:23,850
<font color="#E5E5E5">cause a function like the variable right</font>

466
00:23:20,640 --> 00:23:27,930
that would<font color="#CCCCCC"> trigger an SMI and then we</font>

467
00:23:23,850 --> 00:23:31,139
ever ever ever sorry<font color="#E5E5E5"> after every SMI we</font>

468
00:23:27,930 --> 00:23:33,900
dump<font color="#E5E5E5"> that range again</font><font color="#CCCCCC"> see which</font>

469
00:23:31,140 --> 00:23:35,610
registers have changed<font color="#CCCCCC"> and compare them</font>

470
00:23:33,900 --> 00:23:38,820
with<font color="#E5E5E5"> that normal difference with the</font>

471
00:23:35,610 --> 00:23:42,120
registers that normally<font color="#E5E5E5"> change if we see</font>

472
00:23:38,820 --> 00:23:44,639
any new register that is not part of

473
00:23:42,120 --> 00:23:46,139
<font color="#E5E5E5">that</font><font color="#CCCCCC"> normal difference basically</font><font color="#E5E5E5"> we</font>

474
00:23:44,640 --> 00:23:48,750
suspect that<font color="#E5E5E5"> this register might have</font>

475
00:23:46,140 --> 00:23:51,450
been changed in the SMI handler<font color="#E5E5E5"> so we</font>

476
00:23:48,750 --> 00:23:55,410
send an SFI the same as<font color="#CCCCCC"> a my again maybe</font>

477
00:23:51,450 --> 00:23:57,570
even<font color="#E5E5E5"> multiple times to confirm that this</font>

478
00:23:55,410 --> 00:24:01,680
register changes every time<font color="#E5E5E5"> we send the</font>

479
00:23:57,570 --> 00:24:02,790
<font color="#E5E5E5">same SMI and even with that</font><font color="#CCCCCC"> mechanism</font>

480
00:24:01,680 --> 00:24:04,770
there are lots of false positives

481
00:24:02,790 --> 00:24:06,990
<font color="#E5E5E5">because even when we create normal</font>

482
00:24:04,770 --> 00:24:08,940
difference<font color="#E5E5E5"> we don't catch all the</font>

483
00:24:06,990 --> 00:24:11,610
registers<font color="#E5E5E5"> so it happens that when you</font>

484
00:24:08,940 --> 00:24:13,110
trigger an SMI some register changes but

485
00:24:11,610 --> 00:24:15,169
it's not really because<font color="#E5E5E5"> of the SMI</font>

486
00:24:13,110 --> 00:24:18,030
handler but because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the device</font>

487
00:24:15,170 --> 00:24:23,030
<font color="#E5E5E5">decided that at this moment I want</font>

488
00:24:18,030 --> 00:24:35,220
<font color="#CCCCCC">- that you register</font><font color="#E5E5E5"> Oh awesome</font>

489
00:24:23,030 --> 00:24:38,220
it's not the end yeah so<font color="#E5E5E5"> that's an</font>

490
00:24:35,220 --> 00:24:40,710
<font color="#CCCCCC">example essentially just</font><font color="#E5E5E5"> uh just running</font>

491
00:24:38,220 --> 00:24:45,780
<font color="#E5E5E5">this sort of a tool that monitors the</font>

492
00:24:40,710 --> 00:24:48,030
the changes in the<font color="#E5E5E5"> India my</font><font color="#CCCCCC"> bars</font><font color="#E5E5E5"> this</font>

493
00:24:45,780 --> 00:24:53,010
particular example<font color="#E5E5E5"> monitors changes in</font>

494
00:24:48,030 --> 00:24:55,920
the<font color="#CCCCCC"> eh-eh-eh CI</font><font color="#E5E5E5"> USB bar and you can see</font>

495
00:24:53,010 --> 00:24:58,379
that a<font color="#CCCCCC"> Bennett then it created normal</font>

496
00:24:55,920 --> 00:25:00,150
difference<font color="#E5E5E5"> with just two range there's</font>

497
00:24:58,380 --> 00:25:02,970
<font color="#E5E5E5">normally change then it triggered</font>

498
00:25:00,150 --> 00:25:05,370
multiple estimize and the first is my it

499
00:25:02,970 --> 00:25:07,500
found that<font color="#E5E5E5"> one register additional</font>

500
00:25:05,370 --> 00:25:09,000
register changed so we triggered that

501
00:25:07,500 --> 00:25:12,120
asthma again and beverage<font color="#E5E5E5"> stuff didn't</font>

502
00:25:09,000 --> 00:25:15,170
change<font color="#E5E5E5"> it's it's it's it's also it also</font>

503
00:25:12,120 --> 00:25:17,459
can be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> false negative as well because</font>

504
00:25:15,170 --> 00:25:19,440
you know<font color="#E5E5E5"> the SMI handler might be</font>

505
00:25:17,460 --> 00:25:21,750
flipping a bit<font color="#E5E5E5"> flipping one flipping</font>

506
00:25:19,440 --> 00:25:26,400
back<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> on but this</font><font color="#CCCCCC"> is a suspect</font><font color="#E5E5E5"> to</font>

507
00:25:21,750 --> 00:25:29,880
investigate<font color="#E5E5E5"> later so this was a</font><font color="#CCCCCC"> theory</font>

508
00:25:26,400 --> 00:25:31,410
but the<font color="#CCCCCC"> other issues so what an air</font><font color="#E5E5E5"> I'll</font>

509
00:25:29,880 --> 00:25:34,110
give you a few examples<font color="#CCCCCC"> of those issues</font>

510
00:25:31,410 --> 00:25:37,260
<font color="#E5E5E5">in EFI firmware as well as in coreboot</font>

511
00:25:34,110 --> 00:25:39,629
so we'll start<font color="#CCCCCC"> with the ufi how do</font><font color="#E5E5E5"> we</font>

512
00:25:37,260 --> 00:25:43,230
how do we find those issues in<font color="#E5E5E5"> the</font>

513
00:25:39,630 --> 00:25:48,300
binary<font color="#E5E5E5"> let's say we have a efi binaries</font>

514
00:25:43,230 --> 00:25:51,690
<font color="#E5E5E5">we load</font><font color="#CCCCCC"> em Anita in either</font><font color="#E5E5E5"> and how do we</font>

515
00:25:48,300 --> 00:25:54,270
find those<font color="#E5E5E5"> so one way</font><font color="#CCCCCC"> of finding those</font>

516
00:25:51,690 --> 00:25:57,110
type of issues<font color="#E5E5E5"> is you</font><font color="#CCCCCC"> can you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> find</font>

517
00:25:54,270 --> 00:26:00,330
places where SMI handlers or the firmer

518
00:25:57,110 --> 00:26:02,729
that<font color="#E5E5E5"> reads the contents of the base</font>

519
00:26:00,330 --> 00:26:04,889
address register<font color="#CCCCCC"> and because we</font><font color="#E5E5E5"> know</font>

520
00:26:02,730 --> 00:26:06,720
their<font color="#E5E5E5"> addresses for every device</font><font color="#CCCCCC"> we know</font>

521
00:26:04,890 --> 00:26:12,540
the<font color="#E5E5E5"> address of the base address register</font>

522
00:26:06,720 --> 00:26:16,560
so for<font color="#E5E5E5"> example this</font><font color="#CCCCCC"> GB um nyo bar it has</font>

523
00:26:12,540 --> 00:26:18,240
<font color="#CCCCCC">a multiple mi ranges</font><font color="#E5E5E5"> one of them is</font><font color="#CCCCCC"> so</font>

524
00:26:16,560 --> 00:26:23,100
<font color="#CCCCCC">called</font>

525
00:26:18,240 --> 00:26:26,130
mmmm<font color="#CCCCCC"> Mayo bar 8m bar which is</font><font color="#E5E5E5"> defined by</font>

526
00:26:23,100 --> 00:26:31,399
the<font color="#CCCCCC"> other ten hats and GB lamb devices</font>

527
00:26:26,130 --> 00:26:36,090
the above<font color="#E5E5E5"> zero device 25</font><font color="#CCCCCC"> 429</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font>

528
00:26:31,399 --> 00:26:39,120
function<font color="#CCCCCC"> zero so the if the former</font>

529
00:26:36,090 --> 00:26:40,740
<font color="#CCCCCC">government can use</font><font color="#E5E5E5"> two mechanisms as I</font>

530
00:26:39,120 --> 00:26:44,639
<font color="#CCCCCC">described the one is the legacy</font>

531
00:26:40,740 --> 00:26:46,500
mechanism to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> CFAA CFC IO</font><font color="#E5E5E5"> port and</font>

532
00:26:44,639 --> 00:26:49,199
one<font color="#E5E5E5"> is enhanced</font><font color="#CCCCCC"> mechanism through the</font>

533
00:26:46,500 --> 00:26:52,950
memory map<font color="#E5E5E5"> memory map config space so</font>

534
00:26:49,200 --> 00:26:55,350
the first<font color="#CCCCCC"> mechanism used within the</font>

535
00:26:52,950 --> 00:26:57,899
address of that bar register for the

536
00:26:55,350 --> 00:27:00,658
first mechanism<font color="#E5E5E5"> is calculated as a you</font>

537
00:26:57,899 --> 00:27:03,658
<font color="#E5E5E5">know device number</font><font color="#CCCCCC"> left shift 11 bits</font>

538
00:27:00,659 --> 00:27:08,899
plus<font color="#E5E5E5"> the offset</font><font color="#CCCCCC"> there's also</font><font color="#E5E5E5"> of course</font>

539
00:27:03,659 --> 00:27:11,399
boss number left<font color="#E5E5E5"> shift 15 bits I think</font>

540
00:27:08,899 --> 00:27:14,850
in the in the function number but in

541
00:27:11,399 --> 00:27:19,340
this case bus<font color="#CCCCCC"> 0 and function 0</font><font color="#E5E5E5"> so we</font>

542
00:27:14,850 --> 00:27:22,379
<font color="#CCCCCC">have we have an address of that register</font>

543
00:27:19,340 --> 00:27:24,928
<font color="#E5E5E5">which is pretty unique in a lot</font><font color="#CCCCCC"> of cases</font>

544
00:27:22,380 --> 00:27:27,539
or when<font color="#E5E5E5"> it's used for with the legacy</font>

545
00:27:24,929 --> 00:27:29,370
<font color="#CCCCCC">PCI</font><font color="#E5E5E5"> config access mechanism</font><font color="#CCCCCC"> and when you</font>

546
00:27:27,539 --> 00:27:31,350
set<font color="#E5E5E5"> enable bit for the</font><font color="#CCCCCC"> PT</font><font color="#E5E5E5"> I can pick</font>

547
00:27:29,370 --> 00:27:38,158
cycle which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 31 then you have</font>

548
00:27:31,350 --> 00:27:40,469
eight and<font color="#E5E5E5"> a CH 10 for the this my bar</font><font color="#CCCCCC"> of</font>

549
00:27:38,159 --> 00:27:43,049
<font color="#CCCCCC">g/b lam device</font><font color="#E5E5E5"> so for the second</font>

550
00:27:40,470 --> 00:27:46,169
mechanism<font color="#E5E5E5"> it's it's calculated</font><font color="#CCCCCC"> similarly</font>

551
00:27:43,049 --> 00:27:49,019
<font color="#E5E5E5">so you have you have a memory map</font>

552
00:27:46,169 --> 00:27:50,639
context space divided into<font color="#E5E5E5"> four kilobyte</font>

553
00:27:49,019 --> 00:27:52,860
chunks for each<font color="#E5E5E5"> develop out device</font>

554
00:27:50,639 --> 00:27:55,799
function and the ridge there's some

555
00:27:52,860 --> 00:27:58,620
somewhere within the<font color="#E5E5E5"> four kilobyte chunk</font>

556
00:27:55,799 --> 00:28:01,110
for that particular<font color="#E5E5E5"> device and so you</font>

557
00:27:58,620 --> 00:28:03,689
need<font color="#CCCCCC"> to add a memory map config be a</font>

558
00:28:01,110 --> 00:28:06,620
dress of this<font color="#E5E5E5"> memory map in</font><font color="#CCCCCC"> tech</font><font color="#E5E5E5"> space</font>

559
00:28:03,690 --> 00:28:09,659
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you add an offset you need to find</font>

560
00:28:06,620 --> 00:28:11,518
this for<font color="#CCCCCC"> total by chunker</font><font color="#E5E5E5"> within the</font>

561
00:28:09,659 --> 00:28:12,990
memory map<font color="#CCCCCC"> config</font><font color="#E5E5E5"> space and then you</font>

562
00:28:11,519 --> 00:28:16,110
need<font color="#E5E5E5"> to find a register within that</font>

563
00:28:12,990 --> 00:28:19,559
portal by chunk<font color="#E5E5E5"> so you calculate the the</font>

564
00:28:16,110 --> 00:28:22,019
offset to<font color="#CCCCCC"> that register</font><font color="#E5E5E5"> pretty pretty</font>

565
00:28:19,559 --> 00:28:24,570
similarly but remember that<font color="#E5E5E5"> that this</font>

566
00:28:22,019 --> 00:28:28,590
<font color="#E5E5E5">mechanism allows you to access</font><font color="#CCCCCC"> all of</font>

567
00:28:24,570 --> 00:28:30,060
the PCIe header all of the<font color="#CCCCCC"> four</font>

568
00:28:28,590 --> 00:28:33,530
kilobytes of registers rather

569
00:28:30,060 --> 00:28:37,440
<font color="#E5E5E5">100 bridge 256 bytes of registers so</font>

570
00:28:33,530 --> 00:28:39,840
that's why you have<font color="#E5E5E5"> 8 0 10 instead of</font><font color="#CCCCCC"> c8</font>

571
00:28:37,440 --> 00:28:41,940
10 as in the previous so you have a

572
00:28:39,840 --> 00:28:43,949
constant<font color="#E5E5E5"> you have a you have this total</font>

573
00:28:41,940 --> 00:28:46,320
address in memory<font color="#E5E5E5"> physical address in</font>

574
00:28:43,950 --> 00:28:48,900
memory for that particular bar<font color="#CCCCCC"> now you</font>

575
00:28:46,320 --> 00:28:51,780
can identify all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> places where</font><font color="#CCCCCC"> former</font>

576
00:28:48,900 --> 00:28:56,690
uses<font color="#E5E5E5"> that bar or reads that more once</font>

577
00:28:51,780 --> 00:28:59,610
you do that once you do that you can

578
00:28:56,690 --> 00:29:01,710
figure out<font color="#CCCCCC"> it the</font><font color="#E5E5E5"> firmer how the firmer</font>

579
00:28:59,610 --> 00:29:04,860
uses<font color="#E5E5E5"> that bar does it check that the</font>

580
00:29:01,710 --> 00:29:06,180
address is somewhere<font color="#E5E5E5"> else were does it</font>

581
00:29:04,860 --> 00:29:08,639
not right

582
00:29:06,180 --> 00:29:10,560
so does<font color="#E5E5E5"> it read or write to the</font>

583
00:29:08,640 --> 00:29:14,220
registers in<font color="#E5E5E5"> the bar so this is the this</font>

584
00:29:10,560 --> 00:29:16,590
is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> example for the</font><font color="#E5E5E5"> GB land my</font><font color="#CCCCCC"> bar in</font>

585
00:29:14,220 --> 00:29:20,280
the device 25<font color="#E5E5E5"> this is the kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a that</font>

586
00:29:16,590 --> 00:29:24,300
the first we call it<font color="#E5E5E5"> m bar my</font><font color="#CCCCCC"> o</font><font color="#E5E5E5"> the</font>

587
00:29:20,280 --> 00:29:28,110
yellow thing and this<font color="#E5E5E5"> second necessary</font>

588
00:29:24,300 --> 00:29:32,070
the third access there's a third

589
00:29:28,110 --> 00:29:35,879
<font color="#E5E5E5">constants you can see f-80c 8 0 CC</font>

590
00:29:32,070 --> 00:29:38,909
that's reading configuration register

591
00:29:35,880 --> 00:29:40,470
from the<font color="#CCCCCC"> GB lab config space but it's a</font>

592
00:29:38,910 --> 00:29:43,020
different register<font color="#CCCCCC"> it's power management</font>

593
00:29:40,470 --> 00:29:48,900
control status register so the bar

594
00:29:43,020 --> 00:29:52,650
itself is the f-80c aid 0 0 10<font color="#E5E5E5"> it's one</font>

595
00:29:48,900 --> 00:29:55,410
<font color="#E5E5E5">of the Reds</font><font color="#CCCCCC"> and so</font><font color="#E5E5E5"> that's because that's</font>

596
00:29:52,650 --> 00:29:59,100
that's where a firmer reads the<font color="#CCCCCC"> the</font>

597
00:29:55,410 --> 00:30:01,170
actual address<font color="#E5E5E5"> of the bar and now then</font>

598
00:29:59,100 --> 00:30:04,500
later<font color="#CCCCCC"> on you can see</font><font color="#E5E5E5"> that the firm</font><font color="#CCCCCC"> list</font>

599
00:30:01,170 --> 00:30:06,600
is actually<font color="#E5E5E5"> writing or reading some</font>

600
00:30:04,500 --> 00:30:08,820
registers in that bar it's not<font color="#E5E5E5"> very</font>

601
00:30:06,600 --> 00:30:11,280
clear<font color="#CCCCCC"> on this particular screenshot so</font>

602
00:30:08,820 --> 00:30:13,500
it's<font color="#E5E5E5"> better</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at it at the next</font>

603
00:30:11,280 --> 00:30:15,990
<font color="#E5E5E5">screenshot now you can see that the</font>

604
00:30:13,500 --> 00:30:19,370
former<font color="#CCCCCC"> is using that and one more range</font>

605
00:30:15,990 --> 00:30:24,240
and<font color="#E5E5E5"> bar arranged and writing some</font><font color="#CCCCCC"> valise</font>

606
00:30:19,370 --> 00:30:26,909
<font color="#E5E5E5">is a writing some some bridge there that</font>

607
00:30:24,240 --> 00:30:31,050
<font color="#E5E5E5">the attacker controls or writing some</font>

608
00:30:26,910 --> 00:30:34,130
constant value<font color="#E5E5E5"> let's say it is 7 1</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> 3</font><font color="#CCCCCC"> I</font>

609
00:30:31,050 --> 00:30:38,790
don't<font color="#CCCCCC"> know what that constant</font><font color="#E5E5E5"> is to the</font>

610
00:30:34,130 --> 00:30:41,490
address or offset 32 decimal<font color="#E5E5E5"> in this bar</font>

611
00:30:38,790 --> 00:30:42,760
<font color="#CCCCCC">Mme oh so it's writing</font><font color="#E5E5E5"> some ballast to</font>

612
00:30:41,490 --> 00:30:44,710
the registers

613
00:30:42,760 --> 00:30:48,400
<font color="#E5E5E5">so this is the without actually checking</font>

614
00:30:44,710 --> 00:30:52,000
so there's no check for that<font color="#E5E5E5"> mmm I</font>

615
00:30:48,400 --> 00:30:54,120
arranged whether<font color="#CCCCCC"> its overlaps with</font><font color="#E5E5E5"> SM</font>

616
00:30:52,000 --> 00:30:56,799
<font color="#E5E5E5">Ram or whether</font><font color="#CCCCCC"> it's overlapping with</font>

617
00:30:54,120 --> 00:30:58,928
<font color="#CCCCCC">it's overlapping</font><font color="#E5E5E5"> with something else</font><font color="#CCCCCC"> so</font>

618
00:30:56,799 --> 00:31:03,429
there's no<font color="#E5E5E5"> checking so basically by</font>

619
00:30:58,929 --> 00:31:05,410
modifying<font color="#CCCCCC"> Ambar</font><font color="#E5E5E5"> in the config space of</font>

620
00:31:03,429 --> 00:31:09,850
that<font color="#CCCCCC"> GB line</font><font color="#E5E5E5"> device you could</font>

621
00:31:05,410 --> 00:31:13,120
potentially<font color="#E5E5E5"> control where the SMI</font>

622
00:31:09,850 --> 00:31:16,809
handler is writing data this<font color="#E5E5E5"> is another</font>

623
00:31:13,120 --> 00:31:19,299
example<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> USB my bar</font><font color="#CCCCCC"> to and it's</font>

624
00:31:16,809 --> 00:31:22,120
<font color="#E5E5E5">pretty similar</font><font color="#CCCCCC"> so you calculate oh great</font>

625
00:31:19,299 --> 00:31:25,299
<font color="#CCCCCC">I didn't actually put the the actual</font>

626
00:31:22,120 --> 00:31:30,870
final<font color="#E5E5E5"> constant but you can see that</font>

627
00:31:25,299 --> 00:31:36,389
there is a USB base address register is

628
00:31:30,870 --> 00:31:41,918
is<font color="#E5E5E5"> read from the offset</font><font color="#CCCCCC"> 10 packs of</font><font color="#E5E5E5"> the</font>

629
00:31:36,390 --> 00:31:45,940
<font color="#CCCCCC">EHC</font><font color="#E5E5E5"> IMM i/o controller and then there</font>

630
00:31:41,919 --> 00:31:49,000
<font color="#CCCCCC">are accesses to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> offset of that range</font>

631
00:31:45,940 --> 00:31:52,150
that<font color="#E5E5E5"> access to offset 20 at the bottom</font>

632
00:31:49,000 --> 00:31:54,520
of<font color="#E5E5E5"> that slide where</font><font color="#CCCCCC"> it flips the</font><font color="#E5E5E5"> bits</font>

633
00:31:52,150 --> 00:31:59,440
it doesn't<font color="#E5E5E5"> write control values it just</font>

634
00:31:54,520 --> 00:32:03,370
flips the bits so and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> also an</font>

635
00:31:59,440 --> 00:32:05,049
<font color="#CCCCCC">example where the you</font><font color="#E5E5E5"> know in this</font>

636
00:32:03,370 --> 00:32:07,659
<font color="#CCCCCC">system</font><font color="#E5E5E5"> in this assembly you don't you</font>

637
00:32:05,049 --> 00:32:10,330
<font color="#E5E5E5">don't see the actual constant the actual</font>

638
00:32:07,660 --> 00:32:12,790
<font color="#CCCCCC">the full address in the memory map</font>

639
00:32:10,330 --> 00:32:15,939
config space because the addresses<font color="#E5E5E5"> is</font>

640
00:32:12,790 --> 00:32:18,610
calculated but<font color="#E5E5E5"> you do see an</font><font color="#CCCCCC"> address of</font>

641
00:32:15,940 --> 00:32:21,040
the memory map config space then<font color="#CCCCCC"> you see</font>

642
00:32:18,610 --> 00:32:22,899
the real<font color="#CCCCCC"> side of the</font><font color="#E5E5E5"> bar register so</font>

643
00:32:21,040 --> 00:32:26,649
<font color="#CCCCCC">there multiple kind of ways to do</font><font color="#E5E5E5"> that</font>

644
00:32:22,900 --> 00:32:29,140
<font color="#E5E5E5">so it also helps with finding those</font>

645
00:32:26,650 --> 00:32:32,070
issues it also helps<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> the actual</font>

646
00:32:29,140 --> 00:32:33,970
functions<font color="#E5E5E5"> that read or write</font>

647
00:32:32,070 --> 00:32:36,639
configuration space so the first

648
00:32:33,970 --> 00:32:39,030
function<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> left it actually it uses</font>

649
00:32:36,640 --> 00:32:43,030
the legacy piece a configuration

650
00:32:39,030 --> 00:32:46,750
mechanism through<font color="#CCCCCC"> CF HCFC you can see CF</font>

651
00:32:43,030 --> 00:32:49,750
<font color="#E5E5E5">AFC ports there the bottom the bottom</font>

652
00:32:46,750 --> 00:32:53,890
one is<font color="#E5E5E5"> using extended mechanism it uses</font>

653
00:32:49,750 --> 00:32:56,110
memory<font color="#E5E5E5"> map configuration access to read</font>

654
00:32:53,890 --> 00:32:58,450
<font color="#CCCCCC">write configuration registers the</font>

655
00:32:56,110 --> 00:33:01,209
the right part is<font color="#E5E5E5"> just an</font><font color="#CCCCCC"> example how</font>

656
00:32:58,450 --> 00:33:07,929
<font color="#CCCCCC">firmly uses that so you can see that it</font>

657
00:33:01,210 --> 00:33:12,179
writes it reads the register<font color="#E5E5E5"> b8 in a</font>

658
00:33:07,929 --> 00:33:15,360
device 31 and then writes<font color="#E5E5E5"> some value to</font>

659
00:33:12,179 --> 00:33:20,170
to that<font color="#E5E5E5"> register so read-modify-write</font>

660
00:33:15,360 --> 00:33:22,570
<font color="#E5E5E5">yeah it actually yeah it writes and then</font>

661
00:33:20,170 --> 00:33:25,360
returns so basically<font color="#CCCCCC"> what it puts what</font>

662
00:33:22,570 --> 00:33:30,159
<font color="#E5E5E5">it's doing it's</font><font color="#CCCCCC"> it's clearing status</font>

663
00:33:25,360 --> 00:33:32,559
<font color="#E5E5E5">bits most likely</font><font color="#CCCCCC"> so those were examples</font>

664
00:33:30,160 --> 00:33:34,360
in the<font color="#CCCCCC"> u5 firm let's talk about those</font>

665
00:33:32,559 --> 00:33:35,980
<font color="#CCCCCC">examples in the core but by now you</font>

666
00:33:34,360 --> 00:33:38,918
probably understood that these issues

667
00:33:35,980 --> 00:33:41,169
<font color="#E5E5E5">are not are not really specific to the</font>

668
00:33:38,919 --> 00:33:43,450
type<font color="#CCCCCC"> of firm reuse because</font><font color="#E5E5E5"> those issues</font>

669
00:33:41,169 --> 00:33:47,350
are depending on the<font color="#E5E5E5"> platform</font>

670
00:33:43,450 --> 00:33:50,860
architecture<font color="#E5E5E5"> it's the firmer trying to</font>

671
00:33:47,350 --> 00:33:54,459
communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the PCIe dividing</font><font color="#E5E5E5"> point</font>

672
00:33:50,860 --> 00:33:57,549
devices on the PCI on<font color="#E5E5E5"> the platform that</font>

673
00:33:54,460 --> 00:34:00,010
<font color="#E5E5E5">adheres to PCIe architecture so</font>

674
00:33:57,549 --> 00:34:03,309
regardless of which type of firm you

675
00:34:00,010 --> 00:34:07,740
have<font color="#CCCCCC"> Corbet or legacy</font><font color="#E5E5E5"> bias or your</font>

676
00:34:03,309 --> 00:34:07,740
<font color="#CCCCCC">firebase</font><font color="#E5E5E5"> bias those issues might exist</font>

677
00:34:07,830 --> 00:34:13,659
<font color="#E5E5E5">so because we have a source code for a</font>

678
00:34:10,780 --> 00:34:16,450
<font color="#CCCCCC">Corbett and by the way</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> just wanted to</font>

679
00:34:13,659 --> 00:34:18,940
thank Corbett team and wrong<font color="#CCCCCC"> in</font>

680
00:34:16,449 --> 00:34:21,908
<font color="#E5E5E5">particular for</font><font color="#CCCCCC"> Ken</font><font color="#E5E5E5"> about working with</font><font color="#CCCCCC"> us</font>

681
00:34:18,940 --> 00:34:23,649
on this so<font color="#E5E5E5"> because we have a source code</font>

682
00:34:21,909 --> 00:34:26,200
for Corbett we can look at the<font color="#E5E5E5"> source</font>

683
00:34:23,649 --> 00:34:30,750
code<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> order</font><font color="#CCCCCC"> to find those issues on</font>

684
00:34:26,199 --> 00:34:34,060
on on on<font color="#E5E5E5"> Corbett you can you can do this</font>

685
00:34:30,750 --> 00:34:36,909
<font color="#CCCCCC">you can find the functions that read</font>

686
00:34:34,060 --> 00:34:40,000
PCIe configuration register says in the

687
00:34:36,909 --> 00:34:41,530
previous previous slides in the source

688
00:34:40,000 --> 00:34:43,840
<font color="#E5E5E5">code and then you can find functions</font>

689
00:34:41,530 --> 00:34:45,879
that are<font color="#E5E5E5"> writing to the memory mapped</font>

690
00:34:43,840 --> 00:34:49,090
<font color="#E5E5E5">i/o ranges so in</font><font color="#CCCCCC"> particular in Corbett</font>

691
00:34:45,879 --> 00:34:53,949
those are functions<font color="#E5E5E5"> because I</font><font color="#CCCCCC"> read can</font>

692
00:34:49,090 --> 00:34:55,480
take<font color="#E5E5E5"> 32 or PJ we can take 16 to read the</font>

693
00:34:53,949 --> 00:34:58,299
configuration registers and then

694
00:34:55,480 --> 00:35:00,460
functions write 16<font color="#E5E5E5"> write data to or read</font>

695
00:34:58,300 --> 00:35:04,240
16<font color="#E5E5E5"> be 32 in order to read or write</font>

696
00:35:00,460 --> 00:35:07,090
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> mapped registers so in this in</font>

697
00:35:04,240 --> 00:35:08,040
this particular<font color="#E5E5E5"> case you can</font><font color="#CCCCCC"> see that</font>

698
00:35:07,090 --> 00:35:12,000
<font color="#E5E5E5">the</font>

699
00:35:08,040 --> 00:35:14,970
if the firmer<font color="#E5E5E5"> is reading the</font><font color="#CCCCCC"> mm</font><font color="#E5E5E5"> I</font>

700
00:35:12,000 --> 00:35:20,430
<font color="#CCCCCC">arrange from a integrated graphics</font>

701
00:35:14,970 --> 00:35:24,500
device<font color="#CCCCCC"> at offset temp hex</font><font color="#E5E5E5"> and then it's</font>

702
00:35:20,430 --> 00:35:27,240
writing some register to the<font color="#E5E5E5"> PP control</font>

703
00:35:24,500 --> 00:35:31,080
offset of that range in the graphics

704
00:35:27,240 --> 00:35:33,270
range with a specific<font color="#E5E5E5"> with a specific</font>

705
00:35:31,080 --> 00:35:36,600
value which is which it's calculating

706
00:35:33,270 --> 00:35:39,150
before<font color="#CCCCCC"> sometimes in the source code</font>

707
00:35:36,600 --> 00:35:41,940
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> the the developers are naming</font>

708
00:35:39,150 --> 00:35:46,940
<font color="#E5E5E5">the bars with their names as they</font>

709
00:35:41,940 --> 00:35:50,400
defined in the in the platform specs or

710
00:35:46,940 --> 00:35:52,710
chipset specs or SOC specs<font color="#E5E5E5"> and so for</font>

711
00:35:50,400 --> 00:35:55,770
<font color="#E5E5E5">example on info systems you can you can</font>

712
00:35:52,710 --> 00:35:59,250
you<font color="#CCCCCC"> can find those access by just</font><font color="#E5E5E5"> mostly</font>

713
00:35:55,770 --> 00:36:04,020
<font color="#CCCCCC">most of the bars by their names</font><font color="#E5E5E5"> either</font>

714
00:35:59,250 --> 00:36:06,510
<font color="#CCCCCC">are CBA or spy bars by MMA or PCI</font><font color="#E5E5E5"> base</font>

715
00:36:04,020 --> 00:36:08,400
address and so on<font color="#E5E5E5"> so you can look up</font><font color="#CCCCCC"> the</font>

716
00:36:06,510 --> 00:36:10,200
bar<font color="#CCCCCC"> bridge</font><font color="#E5E5E5"> their names and just</font>

717
00:36:08,400 --> 00:36:14,550
essentially<font color="#E5E5E5"> just grab all this was good</font>

718
00:36:10,200 --> 00:36:17,819
by it by the names so that's a that's a

719
00:36:14,550 --> 00:36:21,780
particular<font color="#CCCCCC"> example in a mainboard IO</font>

720
00:36:17,820 --> 00:36:24,660
trap handler<font color="#CCCCCC"> SMI handler in Corbett so</font>

721
00:36:21,780 --> 00:36:26,610
the this SMI handler it's not in

722
00:36:24,660 --> 00:36:28,560
software SMI<font color="#E5E5E5"> handlers so it's not</font><font color="#CCCCCC"> be as</font>

723
00:36:26,610 --> 00:36:30,240
<font color="#E5E5E5">Miami whether you would trigger by</font>

724
00:36:28,560 --> 00:36:33,810
writing some value into<font color="#CCCCCC"> the be to</font>

725
00:36:30,240 --> 00:36:37,609
register io io<font color="#CCCCCC"> port</font><font color="#E5E5E5"> it's an SMI handler</font>

726
00:36:33,810 --> 00:36:41,730
<font color="#CCCCCC">that is caused by the chipset</font><font color="#E5E5E5"> on</font>

727
00:36:37,610 --> 00:36:44,820
trapping of<font color="#E5E5E5"> IO cycle to some other port</font>

728
00:36:41,730 --> 00:36:46,770
it's called IO trap mechanism<font color="#CCCCCC"> won't</font>

729
00:36:44,820 --> 00:36:48,510
describe in details that mechanism<font color="#E5E5E5"> but</font>

730
00:36:46,770 --> 00:36:51,630
basically it's another way to<font color="#E5E5E5"> trigger a</font>

731
00:36:48,510 --> 00:36:54,660
lot of SMI handlers in on the<font color="#E5E5E5"> platforms</font>

732
00:36:51,630 --> 00:36:58,590
probably the second most used<font color="#E5E5E5"> mechanism</font>

733
00:36:54,660 --> 00:37:03,149
to generate<font color="#CCCCCC"> as I am</font><font color="#E5E5E5"> SM eyes and so what</font>

734
00:36:58,590 --> 00:37:07,230
this SMI handler does it reads<font color="#CCCCCC"> a mmm I</font>

735
00:37:03,150 --> 00:37:13,500
<font color="#E5E5E5">arranged base address from</font><font color="#CCCCCC"> ad bus from</font><font color="#E5E5E5"> a</font>

736
00:37:07,230 --> 00:37:16,500
<font color="#E5E5E5">device</font><font color="#CCCCCC"> 0 on bus one at offset 118 hex it</font>

737
00:37:13,500 --> 00:37:17,700
reads the address<font color="#CCCCCC"> and then it's</font><font color="#E5E5E5"> checking</font>

738
00:37:16,500 --> 00:37:22,180
one register it's called

739
00:37:17,700 --> 00:37:24,819
<font color="#CCCCCC">L DTM a VL mode</font><font color="#E5E5E5"> Lev</font>

740
00:37:22,180 --> 00:37:26,740
in that in that<font color="#CCCCCC"> my range</font><font color="#E5E5E5"> it checks</font>

741
00:37:24,819 --> 00:37:30,490
whether<font color="#E5E5E5"> the value is greater than</font><font color="#CCCCCC"> ten</font>

742
00:37:26,740 --> 00:37:33,459
<font color="#CCCCCC">hacks</font><font color="#E5E5E5"> if it is then it tries to either</font>

743
00:37:30,490 --> 00:37:35,649
you know decrease it if it's less than<font color="#CCCCCC"> f</font>

744
00:37:33,460 --> 00:37:41,349
zero<font color="#E5E5E5"> then it tries to increase it so</font>

745
00:37:35,650 --> 00:37:45,670
<font color="#E5E5E5">what it's doing is essentially it's it's</font>

746
00:37:41,349 --> 00:37:47,619
trying<font color="#E5E5E5"> to change the brightness and you</font>

747
00:37:45,670 --> 00:37:49,119
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> don't see this yeah so</font>

748
00:37:47,619 --> 00:37:52,270
basically<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you press the button</font><font color="#CCCCCC"> on</font>

749
00:37:49,119 --> 00:37:54,970
that<font color="#E5E5E5"> corporate system it would generate</font>

750
00:37:52,270 --> 00:37:57,490
an SMI<font color="#E5E5E5"> and depending on which button you</font>

751
00:37:54,970 --> 00:37:58,990
<font color="#CCCCCC">press it decreases the brightness of the</font>

752
00:37:57,490 --> 00:38:03,009
<font color="#E5E5E5">screen or increases the</font><font color="#CCCCCC"> brightness of</font>

753
00:37:58,990 --> 00:38:04,419
the<font color="#CCCCCC"> screen so it does</font><font color="#E5E5E5"> that by writing by</font>

754
00:38:03,010 --> 00:38:06,579
reading the contents<font color="#E5E5E5"> of the register</font>

755
00:38:04,420 --> 00:38:07,720
incrementing or decrementing the

756
00:38:06,579 --> 00:38:10,779
contents of<font color="#E5E5E5"> the register and then</font>

757
00:38:07,720 --> 00:38:13,990
writing<font color="#E5E5E5"> it back so basically potentially</font>

758
00:38:10,779 --> 00:38:16,089
by pressing the button you<font color="#E5E5E5"> can in an</font>

759
00:38:13,990 --> 00:38:19,058
overlapping<font color="#E5E5E5"> that bar with something else</font>

760
00:38:16,089 --> 00:38:22,119
<font color="#E5E5E5">like as a mom you</font><font color="#CCCCCC"> can cause the SMI</font>

761
00:38:19,059 --> 00:38:23,890
<font color="#E5E5E5">handler to overwrite itself and</font><font color="#CCCCCC"> get the</font>

762
00:38:22,119 --> 00:38:30,490
potentially<font color="#E5E5E5"> memory corruption or code</font>

763
00:38:23,890 --> 00:38:32,890
execution<font color="#CCCCCC"> or the ring zero attacker</font>

764
00:38:30,490 --> 00:38:35,459
might generate that as my on<font color="#E5E5E5"> your behalf</font>

765
00:38:32,890 --> 00:38:40,900
without<font color="#CCCCCC"> the present pressing the</font><font color="#E5E5E5"> button</font>

766
00:38:35,460 --> 00:38:43,359
so in other case is a another<font color="#E5E5E5"> case in</font>

767
00:38:40,900 --> 00:38:47,140
<font color="#CCCCCC">the core bit firmer is another as my</font>

768
00:38:43,359 --> 00:38:50,529
handler it's called<font color="#CCCCCC"> back</font><font color="#E5E5E5"> light off which</font>

769
00:38:47,140 --> 00:38:52,538
is<font color="#E5E5E5"> very similar but it's triggered when</font>

770
00:38:50,529 --> 00:38:55,589
you<font color="#E5E5E5"> press the power button and the</font>

771
00:38:52,539 --> 00:39:00,220
system<font color="#E5E5E5"> gives us five soft</font><font color="#CCCCCC"> shut down and</font>

772
00:38:55,589 --> 00:39:02,020
so some eyes are generated the<font color="#E5E5E5"> firmware</font>

773
00:39:00,220 --> 00:39:04,569
takes control<font color="#E5E5E5"> it needs to turn off</font>

774
00:39:02,020 --> 00:39:06,819
devices including it once you turn off

775
00:39:04,569 --> 00:39:11,349
<font color="#CCCCCC">the brightens or not brightness it needs</font>

776
00:39:06,819 --> 00:39:15,250
to turn off the that is back white<font color="#CCCCCC"> to to</font>

777
00:39:11,349 --> 00:39:17,470
the screen and so I don't remember this

778
00:39:15,250 --> 00:39:19,720
specific<font color="#E5E5E5"> system that this is my handler</font>

779
00:39:17,470 --> 00:39:23,379
<font color="#E5E5E5">was on but it's basically what it's</font>

780
00:39:19,720 --> 00:39:26,140
doing<font color="#CCCCCC"> it's again it's reading a register</font>

781
00:39:23,380 --> 00:39:28,539
base<font color="#E5E5E5"> the base where they my</font><font color="#CCCCCC"> advice for</font>

782
00:39:26,140 --> 00:39:30,750
<font color="#CCCCCC">the for the mm IO</font><font color="#E5E5E5"> range of the</font>

783
00:39:28,539 --> 00:39:33,630
integrated<font color="#CCCCCC"> graphics device</font>

784
00:39:30,750 --> 00:39:39,240
and it also writes a different value to

785
00:39:33,630 --> 00:39:43,140
the same<font color="#CCCCCC"> pp control register on</font><font color="#E5E5E5"> entering</font>

786
00:39:39,240 --> 00:39:46,200
<font color="#CCCCCC">s5 so essentially</font><font color="#E5E5E5"> by entering</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> five</font>

787
00:39:43,140 --> 00:39:50,310
<font color="#E5E5E5">you can control the value of the offset</font>

788
00:39:46,200 --> 00:39:52,049
in the memory that<font color="#CCCCCC"> you overlapped</font><font color="#E5E5E5"> well</font>

789
00:39:50,310 --> 00:39:54,170
in the memory<font color="#CCCCCC"> that you overlap with the</font>

790
00:39:52,050 --> 00:39:58,350
with the graphics device of<font color="#CCCCCC"> my Oh</font><font color="#E5E5E5"> Bart a</font>

791
00:39:54,170 --> 00:40:00,630
war<font color="#CCCCCC"> the attacker in this case would need</font>

792
00:39:58,350 --> 00:40:04,140
to simulate this five event trigger

793
00:40:00,630 --> 00:40:07,860
<font color="#E5E5E5">event and prevent the system from going</font>

794
00:40:04,140 --> 00:40:10,290
actually<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> s5 but still causing</font>

795
00:40:07,860 --> 00:40:18,120
the SMI handler by just directly calling

796
00:40:10,290 --> 00:40:20,040
<font color="#E5E5E5">that as my handler so by now you might</font>

797
00:40:18,120 --> 00:40:21,960
<font color="#E5E5E5">have figured</font><font color="#CCCCCC"> that there are lots of</font>

798
00:40:20,040 --> 00:40:23,700
moving<font color="#CCCCCC"> parts in</font><font color="#E5E5E5"> this type of box</font><font color="#CCCCCC"> and</font>

799
00:40:21,960 --> 00:40:26,370
<font color="#CCCCCC">this type of issues there are</font>

800
00:40:23,700 --> 00:40:30,029
<font color="#E5E5E5">limitations the first limitation for the</font>

801
00:40:26,370 --> 00:40:32,609
exploit is that the SMI handlers<font color="#CCCCCC"> or any</font>

802
00:40:30,030 --> 00:40:35,040
other<font color="#CCCCCC"> former</font><font color="#E5E5E5"> is writing to specific</font>

803
00:40:32,610 --> 00:40:36,990
offsets so you don't<font color="#E5E5E5"> really control</font>

804
00:40:35,040 --> 00:40:38,310
fully control<font color="#CCCCCC"> the address you</font><font color="#E5E5E5"> don't have</font>

805
00:40:36,990 --> 00:40:42,029
an arbitrary right

806
00:40:38,310 --> 00:40:47,160
primitive you you only control<font color="#CCCCCC"> the base</font>

807
00:40:42,030 --> 00:40:49,950
address plus the offset<font color="#E5E5E5"> and the bars</font>

808
00:40:47,160 --> 00:40:53,520
<font color="#E5E5E5">like Alex</font><font color="#CCCCCC"> mentions most of</font><font color="#E5E5E5"> the bars are</font>

809
00:40:49,950 --> 00:40:57,660
self aligned<font color="#E5E5E5"> or</font><font color="#CCCCCC"> size aligned so if you</font>

810
00:40:53,520 --> 00:41:01,200
have a 4 kilobyte<font color="#E5E5E5"> large bar</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> my range</font>

811
00:40:57,660 --> 00:41:05,279
<font color="#E5E5E5">then it's aligned on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 4 kilobyte</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> own</font>

812
00:41:01,200 --> 00:41:08,899
boundary<font color="#E5E5E5"> this is not a requirement this</font>

813
00:41:05,280 --> 00:41:12,240
is most of the platform to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> that but</font>

814
00:41:08,900 --> 00:41:15,180
architectural<font color="#E5E5E5"> pci-sig BCI architecture</font>

815
00:41:12,240 --> 00:41:18,000
defined that the bars<font color="#CCCCCC"> might be as small</font>

816
00:41:15,180 --> 00:41:20,339
as<font color="#E5E5E5"> 16 bytes</font><font color="#CCCCCC"> and I wind at 16 bytes</font><font color="#E5E5E5"> so</font>

817
00:41:18,000 --> 00:41:23,070
there might be there might be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> my</font>

818
00:41:20,340 --> 00:41:25,200
ranges<font color="#E5E5E5"> there as small as 16 bytes and</font>

819
00:41:23,070 --> 00:41:28,620
you pretty<font color="#CCCCCC"> much</font><font color="#E5E5E5"> have a point granularity</font>

820
00:41:25,200 --> 00:41:31,259
of the<font color="#E5E5E5"> address that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> control but</font><font color="#CCCCCC"> a 4</font>

821
00:41:28,620 --> 00:41:33,990
<font color="#E5E5E5">4 kilobyte bytes you have pretty just</font>

822
00:41:31,260 --> 00:41:36,540
require quite a few<font color="#E5E5E5"> possibilities</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> Oh</font>

823
00:41:33,990 --> 00:41:39,959
bright but for a larger bars let's say

824
00:41:36,540 --> 00:41:43,110
16 kilobytes<font color="#E5E5E5"> that that becomes more</font>

825
00:41:39,960 --> 00:41:44,100
difficult<font color="#E5E5E5"> for bars that are even larger</font>

826
00:41:43,110 --> 00:41:47,610
<font color="#E5E5E5">like</font>

827
00:41:44,100 --> 00:41:49,740
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> glass part those</font><font color="#E5E5E5"> bars</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> two</font>

828
00:41:47,610 --> 00:41:53,660
megabytes large<font color="#E5E5E5"> or</font><font color="#CCCCCC"> four megabytes large</font>

829
00:41:49,740 --> 00:41:56,310
you have<font color="#CCCCCC"> a very few possibilities and</font>

830
00:41:53,660 --> 00:42:01,310
the<font color="#E5E5E5"> exploit may not be able to control</font>

831
00:41:56,310 --> 00:42:04,470
the<font color="#E5E5E5"> valleys that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> written because the</font>

832
00:42:01,310 --> 00:42:07,170
deferral or the SMI handlers<font color="#E5E5E5"> typically</font>

833
00:42:04,470 --> 00:42:09,540
write specific values or<font color="#E5E5E5"> flip specific</font>

834
00:42:07,170 --> 00:42:12,270
bits<font color="#E5E5E5"> that those offsets or even read a</font>

835
00:42:09,540 --> 00:42:14,460
value then modify it somehow and<font color="#CCCCCC"> write</font>

836
00:42:12,270 --> 00:42:17,640
or read the<font color="#CCCCCC"> valley and</font><font color="#E5E5E5"> write to some</font>

837
00:42:14,460 --> 00:42:19,980
other register so so you<font color="#E5E5E5"> know you you</font>

838
00:42:17,640 --> 00:42:21,480
<font color="#CCCCCC">may you may not the exploit may not</font>

839
00:42:19,980 --> 00:42:24,870
control the<font color="#CCCCCC"> balance</font>

840
00:42:21,480 --> 00:42:28,620
although as you<font color="#CCCCCC"> saw</font><font color="#E5E5E5"> for some my ranges</font>

841
00:42:24,870 --> 00:42:31,350
yeah<font color="#E5E5E5"> the exploit my control so for</font>

842
00:42:28,620 --> 00:42:33,900
<font color="#E5E5E5">example in the variable</font><font color="#CCCCCC"> write example</font>

843
00:42:31,350 --> 00:42:38,370
you saw all the contents<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

844
00:42:33,900 --> 00:42:40,980
<font color="#E5E5E5">variable that you fully control</font><font color="#CCCCCC"> the</font>

845
00:42:38,370 --> 00:42:44,730
other<font color="#E5E5E5"> limitation is that because those</font>

846
00:42:40,980 --> 00:42:48,720
are memory mapped i/o<font color="#E5E5E5"> ranges those are</font>

847
00:42:44,730 --> 00:42:50,040
not regular memory<font color="#E5E5E5"> DRAM ranges then that</font>

848
00:42:48,720 --> 00:42:51,629
means that<font color="#E5E5E5"> the firmware is actually</font>

849
00:42:50,040 --> 00:42:55,470
implementing a protocol in a lot of

850
00:42:51,630 --> 00:42:58,290
<font color="#E5E5E5">cases so it's not</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> writing like I</font>

851
00:42:55,470 --> 00:42:59,910
want to write there to this offset now

852
00:42:58,290 --> 00:43:02,250
it usually implements some sort of

853
00:42:59,910 --> 00:43:05,940
protocol<font color="#E5E5E5"> and protocol could be as simple</font>

854
00:43:02,250 --> 00:43:08,640
as read the<font color="#E5E5E5"> value</font><font color="#CCCCCC"> if that daily has some</font>

855
00:43:05,940 --> 00:43:11,010
you know if if that<font color="#E5E5E5"> register have</font>

856
00:43:08,640 --> 00:43:13,140
specific value<font color="#E5E5E5"> or it's greater or less</font>

857
00:43:11,010 --> 00:43:17,840
than<font color="#CCCCCC"> something then write</font><font color="#E5E5E5"> to somewhere</font>

858
00:43:13,140 --> 00:43:20,609
<font color="#E5E5E5">else that's easily controllable because</font>

859
00:43:17,840 --> 00:43:23,760
you don't<font color="#E5E5E5"> just relocate the bar into</font>

860
00:43:20,610 --> 00:43:26,640
memory you also create the contents in

861
00:43:23,760 --> 00:43:29,520
memory of all of the registers as if

862
00:43:26,640 --> 00:43:32,549
they were in the MMI<font color="#E5E5E5"> range so you can</font>

863
00:43:29,520 --> 00:43:35,460
you can<font color="#E5E5E5"> control that but if the protocol</font>

864
00:43:32,550 --> 00:43:38,220
is more complex<font color="#E5E5E5"> like for example the</font>

865
00:43:35,460 --> 00:43:40,400
<font color="#CCCCCC">former is issuing specific cycles on a</font>

866
00:43:38,220 --> 00:43:42,810
specific boss<font color="#E5E5E5"> then it's typically</font>

867
00:43:40,400 --> 00:43:44,790
<font color="#E5E5E5">writing to some registers then reading</font>

868
00:43:42,810 --> 00:43:47,700
back other words there's polling on the

869
00:43:44,790 --> 00:43:50,279
values in those registers then writing

870
00:43:47,700 --> 00:43:52,919
<font color="#CCCCCC">from something else</font>

871
00:43:50,280 --> 00:43:56,790
so in that<font color="#E5E5E5"> case you may not really be</font>

872
00:43:52,920 --> 00:43:57,570
<font color="#E5E5E5">able</font><font color="#CCCCCC"> to control</font><font color="#E5E5E5"> that because you only</font>

873
00:43:56,790 --> 00:44:00,120
have<font color="#CCCCCC"> one chance</font>

874
00:43:57,570 --> 00:44:04,050
you populated the<font color="#CCCCCC"> afaik in</font><font color="#E5E5E5"> my range</font><font color="#CCCCCC"> in</font>

875
00:44:00,120 --> 00:44:07,380
memory and if the firmer<font color="#E5E5E5"> writes</font>

876
00:44:04,050 --> 00:44:09,030
something and expects it to<font color="#E5E5E5"> change</font><font color="#CCCCCC"> then</font>

877
00:44:07,380 --> 00:44:12,030
you're out<font color="#E5E5E5"> of luck because you don't</font>

878
00:44:09,030 --> 00:44:13,740
have<font color="#E5E5E5"> any agents running in parallel in</font>

879
00:44:12,030 --> 00:44:15,990
certain cases that<font color="#E5E5E5"> might be by passable</font>

880
00:44:13,740 --> 00:44:19,740
<font color="#E5E5E5">and platforms but in larger cases you</font>

881
00:44:15,990 --> 00:44:22,620
<font color="#E5E5E5">are out of luck in this case</font><font color="#CCCCCC"> so plus</font>

882
00:44:19,740 --> 00:44:24,479
there are<font color="#E5E5E5"> lots of</font><font color="#CCCCCC"> conditions</font><font color="#E5E5E5"> the SMI</font>

883
00:44:22,620 --> 00:44:28,230
handler will write to that<font color="#E5E5E5"> bar depending</font>

884
00:44:24,480 --> 00:44:31,410
<font color="#CCCCCC">on let's say platform</font><font color="#E5E5E5"> mode is are we</font>

885
00:44:28,230 --> 00:44:32,790
nice if<font color="#CCCCCC"> I mode or not</font><font color="#E5E5E5"> as they</font><font color="#CCCCCC"> are if</font>

886
00:44:31,410 --> 00:44:35,520
that<font color="#CCCCCC"> device I'm communicating with</font>

887
00:44:32,790 --> 00:44:39,090
supporting<font color="#E5E5E5"> this functionality this this</font>

888
00:44:35,520 --> 00:44:41,600
mode or or this feature<font color="#E5E5E5"> right and</font><font color="#CCCCCC"> plus</font>

889
00:44:39,090 --> 00:44:43,650
even triggering<font color="#E5E5E5"> those SM eyes that</font>

890
00:44:41,600 --> 00:44:45,690
communicate<font color="#CCCCCC"> with the devices</font><font color="#E5E5E5"> might even</font>

891
00:44:43,650 --> 00:44:47,400
cause some complications<font color="#CCCCCC"> because it's</font>

892
00:44:45,690 --> 00:44:49,980
not as<font color="#E5E5E5"> just the trigger</font><font color="#CCCCCC"> S</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> through</font>

893
00:44:47,400 --> 00:44:51,780
writing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> port beats you</font><font color="#CCCCCC"> know there's</font>

894
00:44:49,980 --> 00:44:54,540
<font color="#E5E5E5">asthma handlers that I saw might be</font>

895
00:44:51,780 --> 00:44:57,150
caused when<font color="#CCCCCC"> you enter</font><font color="#E5E5E5"> s3 or exit s3</font>

896
00:44:54,540 --> 00:44:58,860
<font color="#CCCCCC">resume from s3</font><font color="#E5E5E5"> or when you enter a soft</font>

897
00:44:57,150 --> 00:45:00,840
shutdown or something like<font color="#CCCCCC"> that so kind</font>

898
00:44:58,860 --> 00:45:03,770
<font color="#CCCCCC">of a complications on how you</font><font color="#E5E5E5"> even</font>

899
00:45:00,840 --> 00:45:09,000
trigger the identity of the interrupts

900
00:45:03,770 --> 00:45:12,150
<font color="#E5E5E5">so yeah</font><font color="#CCCCCC"> and for certain</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of bars</font>

901
00:45:09,000 --> 00:45:14,310
that<font color="#CCCCCC"> are non architectural basically</font>

902
00:45:12,150 --> 00:45:19,230
they're<font color="#CCCCCC"> not defined in the</font><font color="#E5E5E5"> PCI</font>

903
00:45:14,310 --> 00:45:23,370
compatible space below<font color="#E5E5E5"> 40</font><font color="#CCCCCC"> hex</font><font color="#E5E5E5"> in the PCI</font>

904
00:45:19,230 --> 00:45:26,370
header those bars might be locked<font color="#CCCCCC"> down</font>

905
00:45:23,370 --> 00:45:27,810
by the<font color="#CCCCCC"> former so there is a</font><font color="#E5E5E5"> mechanism in</font>

906
00:45:26,370 --> 00:45:30,990
the<font color="#E5E5E5"> hardware that</font><font color="#CCCCCC"> allows you to just</font>

907
00:45:27,810 --> 00:45:33,720
<font color="#E5E5E5">walk down</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> register and after you</font>

908
00:45:30,990 --> 00:45:36,450
<font color="#E5E5E5">lock it down until until reset nobody</font>

909
00:45:33,720 --> 00:45:39,299
can<font color="#E5E5E5"> change so you cannot for those bars</font>

910
00:45:36,450 --> 00:45:41,669
you cannot relocate<font color="#CCCCCC"> of course the forum</font>

911
00:45:39,300 --> 00:45:43,680
might forget to lock them down<font color="#CCCCCC"> as we saw</font>

912
00:45:41,670 --> 00:45:46,080
many<font color="#E5E5E5"> times but in that case you can</font>

913
00:45:43,680 --> 00:45:47,700
relocate<font color="#CCCCCC"> even lockable bars</font><font color="#E5E5E5"> but if</font>

914
00:45:46,080 --> 00:45:50,400
<font color="#CCCCCC">runner doesn't forget</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> lock down all</font>

915
00:45:47,700 --> 00:45:52,200
<font color="#E5E5E5">the bars then you cannot relocate them</font>

916
00:45:50,400 --> 00:45:54,060
<font color="#CCCCCC">to memory you can</font><font color="#E5E5E5"> relocate something</font>

917
00:45:52,200 --> 00:45:57,660
else<font color="#CCCCCC"> and overlap with the</font><font color="#E5E5E5"> bar but that's</font>

918
00:45:54,060 --> 00:46:00,049
a<font color="#E5E5E5"> different story</font><font color="#CCCCCC"> so what are the</font>

919
00:45:57,660 --> 00:46:04,140
options<font color="#CCCCCC"> for to mitigate those attacks</font>

920
00:46:00,050 --> 00:46:06,810
one<font color="#E5E5E5"> option is that the</font><font color="#CCCCCC"> SMI handlers can</font>

921
00:46:04,140 --> 00:46:08,910
verify<font color="#E5E5E5"> that the address base address of</font>

922
00:46:06,810 --> 00:46:09,960
<font color="#E5E5E5">the my</font><font color="#CCCCCC"> range that I've read from the bar</font>

923
00:46:08,910 --> 00:46:12,060
register

924
00:46:09,960 --> 00:46:13,680
an overlap with<font color="#CCCCCC"> sm ram that's a pretty</font>

925
00:46:12,060 --> 00:46:15,750
straightforward mitigation and it's

926
00:46:13,680 --> 00:46:18,029
similar<font color="#CCCCCC"> to the mitigation that was done</font>

927
00:46:15,750 --> 00:46:20,990
for<font color="#E5E5E5"> the previous type of class of issues</font>

928
00:46:18,030 --> 00:46:23,520
the<font color="#E5E5E5"> pointer bugs and it should be done</font>

929
00:46:20,990 --> 00:46:25,470
<font color="#CCCCCC">it doesn't hurt to really check the</font>

930
00:46:23,520 --> 00:46:30,060
pointer<font color="#CCCCCC"> that your that</font><font color="#E5E5E5"> you're not</font>

931
00:46:25,470 --> 00:46:32,848
writing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> your own code but it only</font>

932
00:46:30,060 --> 00:46:34,259
solves the problem partially<font color="#E5E5E5"> it prevents</font>

933
00:46:32,849 --> 00:46:35,580
you from overwriting the contents of

934
00:46:34,260 --> 00:46:39,990
<font color="#CCCCCC">that sometime but it</font><font color="#E5E5E5"> doesn't prevent you</font>

935
00:46:35,580 --> 00:46:42,598
from pointing<font color="#E5E5E5"> that address that</font><font color="#CCCCCC"> you will</font>

936
00:46:39,990 --> 00:46:44,520
<font color="#E5E5E5">write</font><font color="#CCCCCC"> to to something else outside of</font><font color="#E5E5E5"> SM</font>

937
00:46:42,599 --> 00:46:49,890
<font color="#E5E5E5">app let's say hypervisor protected pages</font>

938
00:46:44,520 --> 00:46:52,680
for understand abs protect pages<font color="#E5E5E5"> so in</font>

939
00:46:49,890 --> 00:46:53,520
<font color="#E5E5E5">that case the mitigation might be a</font>

940
00:46:52,680 --> 00:46:55,919
difference

941
00:46:53,520 --> 00:46:58,259
<font color="#E5E5E5">the</font><font color="#CCCCCC"> permit and as my handlers might</font>

942
00:46:55,920 --> 00:47:01,380
<font color="#E5E5E5">verify that the address base address of</font>

943
00:46:58,260 --> 00:47:04,320
a<font color="#CCCCCC"> on</font><font color="#E5E5E5"> my range</font><font color="#CCCCCC"> is actually in the mio in</font>

944
00:47:01,380 --> 00:47:06,990
the memory map that you saw from<font color="#E5E5E5"> Alex's</font>

945
00:47:04,320 --> 00:47:11,520
<font color="#E5E5E5">part</font><font color="#CCCCCC"> of the presentation it's above</font><font color="#E5E5E5"> this</font>

946
00:47:06,990 --> 00:47:13,169
top of flow<font color="#CCCCCC"> usable</font><font color="#E5E5E5"> DRM so you can check</font>

947
00:47:11,520 --> 00:47:16,259
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the bar</font><font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> in that range</font>

948
00:47:13,170 --> 00:47:19,530
and<font color="#E5E5E5"> not overlapping not pointing</font>

949
00:47:16,260 --> 00:47:21,660
somewhere inside the DRM<font color="#CCCCCC"> that's a good</font>

950
00:47:19,530 --> 00:47:24,119
mitigation although you still<font color="#E5E5E5"> might be</font>

951
00:47:21,660 --> 00:47:27,540
writing<font color="#CCCCCC"> to somewhere</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> shouldn't been</font>

952
00:47:24,119 --> 00:47:29,880
able to<font color="#E5E5E5"> write so it's also partial</font>

953
00:47:27,540 --> 00:47:34,529
mitigation I think so there is another

954
00:47:29,880 --> 00:47:38,369
option<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the the the firmware</font><font color="#CCCCCC"> and as</font>

955
00:47:34,530 --> 00:47:40,650
my handlers might do is when the system

956
00:47:38,369 --> 00:47:43,440
<font color="#CCCCCC">boots the boot firmer might allocate the</font>

957
00:47:40,650 --> 00:47:47,160
default range the<font color="#E5E5E5"> reserved range in the</font>

958
00:47:43,440 --> 00:47:49,440
<font color="#CCCCCC">mm IO and place all the bars there you</font>

959
00:47:47,160 --> 00:47:52,830
know and when the SMI handlers are

960
00:47:49,440 --> 00:47:55,200
invoked at the wrong time during<font color="#E5E5E5"> the OS</font>

961
00:47:52,830 --> 00:47:57,660
execution then the SMI handler might

962
00:47:55,200 --> 00:48:01,830
check the value of the base address for

963
00:47:57,660 --> 00:48:04,109
the my range<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you know check if it's</font>

964
00:48:01,830 --> 00:48:08,009
within<font color="#E5E5E5"> this default preserve range if</font>

965
00:48:04,109 --> 00:48:11,040
it's not forced it into the<font color="#E5E5E5"> default</font>

966
00:48:08,010 --> 00:48:13,859
range<font color="#E5E5E5"> it's in its default location</font><font color="#CCCCCC"> and</font>

967
00:48:11,040 --> 00:48:15,570
use the<font color="#CCCCCC"> default location and then upon</font>

968
00:48:13,859 --> 00:48:16,759
AG that just restore the<font color="#CCCCCC"> U value</font><font color="#E5E5E5"> or</font>

969
00:48:15,570 --> 00:48:19,490
leave it there

970
00:48:16,760 --> 00:48:21,860
<font color="#CCCCCC">it</font><font color="#E5E5E5"> dumps on the</font><font color="#CCCCCC"> firma implementation so</font>

971
00:48:19,490 --> 00:48:24,350
in this case you just<font color="#E5E5E5"> forcing the that</font>

972
00:48:21,860 --> 00:48:27,320
the the SMI handler<font color="#E5E5E5"> runtime former world</font>

973
00:48:24,350 --> 00:48:29,810
<font color="#E5E5E5">rights to a known good locations in a</font>

974
00:48:27,320 --> 00:48:32,390
fixed location<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> M mail and that's</font>

975
00:48:29,810 --> 00:48:36,049
that particular third mitigation was was

976
00:48:32,390 --> 00:48:38,060
done for<font color="#E5E5E5"> the spy bar example with the</font>

977
00:48:36,050 --> 00:48:40,250
arbitrary constants<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the variable</font><font color="#E5E5E5"> it</font>

978
00:48:38,060 --> 00:48:44,259
<font color="#E5E5E5">could be</font><font color="#CCCCCC"> written by the by the by the</font>

979
00:48:40,250 --> 00:48:48,710
<font color="#CCCCCC">exploit so that case starting later</font>

980
00:48:44,260 --> 00:48:52,700
<font color="#CCCCCC">skylight systems I think the the big</font>

981
00:48:48,710 --> 00:48:55,610
former allocates<font color="#CCCCCC"> the arranged at fe0 one</font>

982
00:48:52,700 --> 00:48:59,750
<font color="#E5E5E5">and four zeros in physical addressable</font>

983
00:48:55,610 --> 00:49:06,050
physical addressable space for the<font color="#E5E5E5"> SPI</font>

984
00:48:59,750 --> 00:49:08,870
<font color="#CCCCCC">MMI</font><font color="#E5E5E5"> arranged and so on any SMI PCH type</font>

985
00:49:06,050 --> 00:49:11,450
SMI that should set type SMI<font color="#CCCCCC"> the</font><font color="#E5E5E5"> there's</font>

986
00:49:08,870 --> 00:49:14,690
my handler checks that the base<font color="#E5E5E5"> address</font>

987
00:49:11,450 --> 00:49:17,870
of this<font color="#CCCCCC"> PI my range is at that address</font>

988
00:49:14,690 --> 00:49:23,210
and<font color="#CCCCCC"> if it's not then it basically</font><font color="#E5E5E5"> over</font>

989
00:49:17,870 --> 00:49:27,259
overrides it with with the default<font color="#CCCCCC"> fe0</font>

990
00:49:23,210 --> 00:49:28,970
<font color="#CCCCCC">one value then you</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> them they as my</font>

991
00:49:27,260 --> 00:49:33,680
handler precedes doing but<font color="#E5E5E5"> it be what he</font>

992
00:49:28,970 --> 00:49:35,509
needs<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> basically kind of preventing</font>

993
00:49:33,680 --> 00:49:37,520
you from overlapping the range with

994
00:49:35,510 --> 00:49:40,820
anything<font color="#E5E5E5"> else that you shouldn't have</font>

995
00:49:37,520 --> 00:49:44,300
access<font color="#E5E5E5"> to so that's the</font><font color="#CCCCCC"> canary a</font>

996
00:49:40,820 --> 00:49:47,060
<font color="#E5E5E5">screenshot with this example of this</font>

997
00:49:44,300 --> 00:49:49,430
mitigation first the attacker will<font color="#E5E5E5"> okay</font>

998
00:49:47,060 --> 00:49:51,500
<font color="#CCCCCC">if this</font><font color="#E5E5E5"> as box by bar overlaps it but</font>

999
00:49:49,430 --> 00:49:58,220
something<font color="#E5E5E5"> else just regular</font><font color="#CCCCCC"> DRAM memory</font>

1000
00:49:51,500 --> 00:50:01,760
<font color="#E5E5E5">then causes</font><font color="#CCCCCC"> the variable</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> that gain</font>

1001
00:49:58,220 --> 00:50:06,470
raised<font color="#E5E5E5"> in SMI in upon exit from the SMI</font>

1002
00:50:01,760 --> 00:50:08,690
the I'm<font color="#E5E5E5"> just checking the eval apply</font>

1003
00:50:06,470 --> 00:50:15,040
boring<font color="#E5E5E5"> you can see that it actually</font>

1004
00:50:08,690 --> 00:50:20,240
<font color="#E5E5E5">changed to the tooth default location so</font>

1005
00:50:15,040 --> 00:50:22,630
I'll basically try<font color="#E5E5E5"> to show you that on</font>

1006
00:50:20,240 --> 00:50:22,629
this system

1007
00:50:29,740 --> 00:50:37,910
you may not<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to see that on the</font>

1008
00:50:32,210 --> 00:50:41,440
<font color="#CCCCCC">back</font><font color="#E5E5E5"> but you</font><font color="#CCCCCC"> know you can later on</font><font color="#E5E5E5"> you</font>

1009
00:50:37,910 --> 00:50:44,480
can you can check<font color="#E5E5E5"> so I'm reading a young</font>

1010
00:50:41,440 --> 00:50:47,030
offset<font color="#CCCCCC"> m.x and the device theta-one</font>

1011
00:50:44,480 --> 00:50:50,180
function<font color="#CCCCCC"> v that's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> SBI controller</font><font color="#E5E5E5"> on</font>

1012
00:50:47,030 --> 00:51:02,090
<font color="#E5E5E5">later systems so I'm</font><font color="#CCCCCC"> reading in you can</font>

1013
00:50:50,180 --> 00:51:06,200
see it has value<font color="#E5E5E5"> Fe</font><font color="#CCCCCC"> 0 1 4 zeros yeah on</font>

1014
00:51:02,090 --> 00:51:11,710
this laptop via the<font color="#CCCCCC"> keyboard is typing</font>

1015
00:51:06,200 --> 00:51:11,710
numbers on its own without my help

1016
00:51:12,250 --> 00:51:19,040
so now we'll check the just a number of

1017
00:51:16,040 --> 00:51:31,279
SM eyes you can<font color="#E5E5E5"> see that 15 x sm eyes</font>

1018
00:51:19,040 --> 00:51:37,270
has been generated so<font color="#CCCCCC"> far then then I'm</font>

1019
00:51:31,280 --> 00:51:37,270
<font color="#CCCCCC">relocating the bar yeah some</font>

1020
00:51:38,799 --> 00:51:45,499
sorry since I<font color="#E5E5E5"> started showing that with</font>

1021
00:51:42,229 --> 00:51:50,180
individual commands so I'm<font color="#CCCCCC"> relocating</font>

1022
00:51:45,499 --> 00:51:53,029
the bar to this address<font color="#CCCCCC"> which is in</font>

1023
00:51:50,180 --> 00:51:59,509
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> I before the</font><font color="#E5E5E5"> presentation I</font>

1024
00:51:53,029 --> 00:52:09,079
prepared it<font color="#E5E5E5"> and copied contents of</font><font color="#CCCCCC"> the</font>

1025
00:51:59,509 --> 00:52:12,979
<font color="#CCCCCC">spy bar into that memory so okay</font>

1026
00:52:09,079 --> 00:52:14,960
checking the bar again so you can see

1027
00:52:12,979 --> 00:52:18,680
that it will get it now points<font color="#CCCCCC"> the spy</font>

1028
00:52:14,960 --> 00:52:26,930
<font color="#E5E5E5">spy</font><font color="#CCCCCC"> spi a memory map range that points</font>

1029
00:52:18,680 --> 00:52:32,359
to<font color="#E5E5E5"> DM and then I'm writing contents of</font>

1030
00:52:26,930 --> 00:52:34,609
the variables<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see that the right</font>

1031
00:52:32,359 --> 00:52:37,069
was successful<font color="#E5E5E5"> even if they were the SMI</font>

1032
00:52:34,609 --> 00:52:38,719
handler should not have access<font color="#CCCCCC"> to this</font>

1033
00:52:37,069 --> 00:52:40,729
pi<font color="#CCCCCC"> controller in</font><font color="#E5E5E5"> this case because</font><font color="#CCCCCC"> I</font>

1034
00:52:38,719 --> 00:52:45,099
relocated to some<font color="#CCCCCC"> published memory it's</font>

1035
00:52:40,729 --> 00:52:48,348
not a spy mio range anymore<font color="#CCCCCC"> any longer</font>

1036
00:52:45,099 --> 00:52:53,979
so it's already a sign<font color="#E5E5E5"> that the attack</font>

1037
00:52:48,349 --> 00:52:57,529
didn't really succeed yeah<font color="#E5E5E5"> so I'm I'm</font>

1038
00:52:53,979 --> 00:53:00,649
reading the contents of the bar again

1039
00:52:57,529 --> 00:53:03,950
<font color="#E5E5E5">and you can see</font><font color="#CCCCCC"> that it get restored</font><font color="#E5E5E5"> to</font>

1040
00:53:00,650 --> 00:53:07,099
the<font color="#CCCCCC"> original location I'm checking</font><font color="#E5E5E5"> the</font>

1041
00:53:03,950 --> 00:53:10,609
value<font color="#E5E5E5"> of the SMI</font><font color="#CCCCCC"> and you saw a</font><font color="#E5E5E5"> 15 there</font>

1042
00:53:07,099 --> 00:53:13,400
now it's<font color="#E5E5E5"> 19 hex so you get four SMI</font>

1043
00:53:10,609 --> 00:53:20,269
generated during this operation<font color="#E5E5E5"> one per</font>

1044
00:53:13,400 --> 00:53:26,619
logical<font color="#E5E5E5"> CPU and so I'm</font><font color="#CCCCCC"> I'm checking the</font>

1045
00:53:20,269 --> 00:53:32,689
contents<font color="#E5E5E5"> of the of the bar so mm</font><font color="#CCCCCC"> IO dump</font>

1046
00:53:26,619 --> 00:53:37,660
<font color="#CCCCCC">SPI</font><font color="#E5E5E5"> bar and not a dis address I'll just</font>

1047
00:53:32,690 --> 00:53:39,979
dump it<font color="#E5E5E5"> to somewhere here</font><font color="#CCCCCC"> spi log and</font>

1048
00:53:37,660 --> 00:53:41,989
you can see<font color="#E5E5E5"> that the contents of the</font>

1049
00:53:39,979 --> 00:53:44,569
variable that<font color="#E5E5E5"> I wrote are actually in</font>

1050
00:53:41,989 --> 00:53:45,910
the MMI range so the variable that I

1051
00:53:44,569 --> 00:53:52,000
wrote is

1052
00:53:45,910 --> 00:53:58,660
this it has all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the holidays all of</font>

1053
00:53:52,000 --> 00:54:03,270
the<font color="#CCCCCC"> B's</font><font color="#E5E5E5"> so 40 42 X so that basically</font>

1054
00:53:58,660 --> 00:54:06,069
shows that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> laptop this system</font>

1055
00:54:03,270 --> 00:54:09,339
restores<font color="#E5E5E5"> the SPI</font><font color="#CCCCCC"> mmm I arranged to</font>

1056
00:54:06,069 --> 00:54:11,859
<font color="#E5E5E5">default location and in them and then</font>

1057
00:54:09,339 --> 00:54:20,770
only then proceeds to communicate with

1058
00:54:11,859 --> 00:54:23,020
the SPI flash<font color="#E5E5E5"> device all right so we</font>

1059
00:54:20,770 --> 00:54:26,980
will have a couple<font color="#E5E5E5"> of tools that can</font>

1060
00:54:23,020 --> 00:54:29,319
<font color="#E5E5E5">find those issues at one time</font><font color="#CCCCCC"> obviously</font>

1061
00:54:26,980 --> 00:54:33,700
<font color="#E5E5E5">you can you can proceed</font><font color="#CCCCCC"> with you know</font>

1062
00:54:29,319 --> 00:54:35,980
<font color="#E5E5E5">they this is something the</font><font color="#CCCCCC"> minor is</font><font color="#E5E5E5"> or</font>

1063
00:54:33,700 --> 00:54:38,730
looking at the source<font color="#CCCCCC"> code but we will</font>

1064
00:54:35,980 --> 00:54:43,500
release<font color="#E5E5E5"> couple tools that will help</font>

1065
00:54:38,730 --> 00:54:46,780
finding those issues<font color="#CCCCCC"> so one is</font><font color="#E5E5E5"> that just</font>

1066
00:54:43,500 --> 00:54:49,480
finds all of<font color="#E5E5E5"> the registers that</font><font color="#CCCCCC"> the SMI</font>

1067
00:54:46,780 --> 00:54:51,549
handlers<font color="#CCCCCC"> writes to modify and the other</font>

1068
00:54:49,480 --> 00:54:54,089
one is is the one<font color="#E5E5E5"> that attempts to</font>

1069
00:54:51,549 --> 00:54:58,809
actually relocate all the my<font color="#E5E5E5"> ranges into</font>

1070
00:54:54,089 --> 00:55:01,450
memory then for the semis<font color="#E5E5E5"> and</font><font color="#CCCCCC"> NC there</font>

1071
00:54:58,809 --> 00:55:03,970
if the memory contents changed none<font color="#E5E5E5"> of</font>

1072
00:55:01,450 --> 00:55:06,160
these tools<font color="#E5E5E5"> are perfect they give false</font>

1073
00:55:03,970 --> 00:55:10,980
positives<font color="#E5E5E5"> false negatives so it's more</font>

1074
00:55:06,160 --> 00:55:10,980
<font color="#E5E5E5">of a kind of they need to be</font>

1075
00:55:11,339 --> 00:55:19,029
<font color="#CCCCCC">complemented with manual analysis so</font><font color="#E5E5E5"> the</font>

1076
00:55:16,779 --> 00:55:20,770
root cause of<font color="#CCCCCC"> that of this type of</font>

1077
00:55:19,029 --> 00:55:22,180
issues is that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> firmware assumes that</font>

1078
00:55:20,770 --> 00:55:25,270
they all the<font color="#E5E5E5"> hardware is trusted</font>

1079
00:55:22,180 --> 00:55:28,089
including all of<font color="#E5E5E5"> the you know registers</font>

1080
00:55:25,270 --> 00:55:30,190
<font color="#E5E5E5">in the configuration registers for all</font>

1081
00:55:28,089 --> 00:55:33,520
the hardware devices or the<font color="#E5E5E5"> entire</font>

1082
00:55:30,190 --> 00:55:36,880
<font color="#CCCCCC">chipset</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are not other that are not</font>

1083
00:55:33,520 --> 00:55:41,200
modified by some malicious<font color="#CCCCCC"> code for</font>

1084
00:55:36,880 --> 00:55:42,880
example<font color="#CCCCCC"> lockdown and so the former</font>

1085
00:55:41,200 --> 00:55:46,058
shouldn't assume that<font color="#E5E5E5"> the contents of</font>

1086
00:55:42,880 --> 00:55:48,549
the base address registers are immutable

1087
00:55:46,059 --> 00:55:51,039
<font color="#E5E5E5">because any rings error code can modify</font>

1088
00:55:48,549 --> 00:55:52,869
most of them and they<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be relocated</font>

1089
00:55:51,039 --> 00:55:57,039
<font color="#E5E5E5">to anywhere</font><font color="#CCCCCC"> in memory including on top</font>

1090
00:55:52,869 --> 00:55:58,180
of the<font color="#E5E5E5"> sm ram itself</font><font color="#CCCCCC"> and so therefore</font>

1091
00:55:57,039 --> 00:56:00,010
<font color="#CCCCCC">kind of</font>

1092
00:55:58,180 --> 00:56:02,740
<font color="#CCCCCC">the cumson's or addresses of</font><font color="#E5E5E5"> those</font>

1093
00:56:00,010 --> 00:56:06,490
registers it<font color="#E5E5E5"> this problem is not</font>

1094
00:56:02,740 --> 00:56:08,618
specific to the SMM because the you<font color="#CCCCCC"> know</font>

1095
00:56:06,490 --> 00:56:10,959
<font color="#E5E5E5">the</font><font color="#CCCCCC"> SMM it's pretty obvious target here</font>

1096
00:56:08,619 --> 00:56:16,589
because there is a<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> primer but</font>

1097
00:56:10,960 --> 00:56:19,270
even the way the bit firmer<font color="#CCCCCC"> that reads</font>

1098
00:56:16,589 --> 00:56:22,509
<font color="#E5E5E5">contents of some of the registers upon</font>

1099
00:56:19,270 --> 00:56:26,740
that they resume from sleep using<font color="#CCCCCC"> the</font>

1100
00:56:22,510 --> 00:56:28,539
<font color="#CCCCCC">bit script</font><font color="#E5E5E5"> or reads contents of the my</font>

1101
00:56:26,740 --> 00:56:32,609
ranges from somewhere else<font color="#CCCCCC"> like you five</font>

1102
00:56:28,539 --> 00:56:35,950
variables<font color="#E5E5E5"> it also can be tricked into</font>

1103
00:56:32,609 --> 00:56:37,839
using memory ranges which are not really

1104
00:56:35,950 --> 00:56:40,240
my ranges but some<font color="#E5E5E5"> something else and</font>

1105
00:56:37,839 --> 00:56:42,880
potentially can operate its own code so

1106
00:56:40,240 --> 00:56:46,240
it<font color="#E5E5E5"> former should do the same thing as</font>

1107
00:56:42,880 --> 00:56:50,950
the<font color="#E5E5E5"> runtime program</font><font color="#CCCCCC"> so I think that's</font>

1108
00:56:46,240 --> 00:56:55,910
all we<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> couple minutes</font><font color="#CCCCCC"> for</font>

1109
00:56:50,950 --> 00:57:04,129
questions um thank you<font color="#E5E5E5"> for listening</font>

1110
00:56:55,910 --> 00:57:04,129
[Applause]

1111
00:57:20,500 --> 00:57:25,970
hello<font color="#CCCCCC"> thanks guys for</font><font color="#E5E5E5"> your talk</font><font color="#CCCCCC"> um so</font>

1112
00:57:24,080 --> 00:57:27,589
you were<font color="#E5E5E5"> talking about kind of with the</font>

1113
00:57:25,970 --> 00:57:30,709
goal in<font color="#CCCCCC"> mind of</font><font color="#E5E5E5"> getting code execution</font>

1114
00:57:27,589 --> 00:57:33,109
in the context<font color="#E5E5E5"> of the SMI but have you</font>

1115
00:57:30,710 --> 00:57:34,580
<font color="#CCCCCC">seen this type of attack utilized in the</font>

1116
00:57:33,109 --> 00:57:36,500
virtualized environment where you're a

1117
00:57:34,580 --> 00:57:40,098
guest and<font color="#E5E5E5"> a hypervisor that's allowing</font>

1118
00:57:36,500 --> 00:57:41,330
<font color="#E5E5E5">pass-through to PCI devices causing</font>

1119
00:57:40,099 --> 00:57:43,369
relocation so that you would overwrite

1120
00:57:41,330 --> 00:57:45,200
into the<font color="#CCCCCC"> host kernel or something</font><font color="#E5E5E5"> like</font>

1121
00:57:43,369 --> 00:57:49,190
<font color="#CCCCCC">that to breakout</font>

1122
00:57:45,200 --> 00:57:51,080
yeah thanks Rach<font color="#E5E5E5"> for the question so we</font>

1123
00:57:49,190 --> 00:57:57,250
haven't verified all of the hypervisors

1124
00:57:51,080 --> 00:58:00,470
but<font color="#E5E5E5"> but we have done some analysis on</font>

1125
00:57:57,250 --> 00:58:05,030
<font color="#E5E5E5">let's say</font><font color="#CCCCCC"> VSM and when you are in</font>

1126
00:58:00,470 --> 00:58:07,490
Windows<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> normal world</font><font color="#E5E5E5"> partition it</font>

1127
00:58:05,030 --> 00:58:12,920
allows<font color="#CCCCCC"> it you rights to the bar</font>

1128
00:58:07,490 --> 00:58:15,169
<font color="#E5E5E5">registers so we have not done the full</font>

1129
00:58:12,920 --> 00:58:16,940
analysis of<font color="#E5E5E5"> whether this can</font><font color="#CCCCCC"> be used or</font>

1130
00:58:15,170 --> 00:58:20,570
it cannot<font color="#E5E5E5"> be used as an attack but at</font>

1131
00:58:16,940 --> 00:58:25,820
least the the<font color="#E5E5E5"> entry points are are there</font>

1132
00:58:20,570 --> 00:58:28,330
and for other hypervisors<font color="#CCCCCC"> if that would</font>

1133
00:58:25,820 --> 00:58:31,280
be<font color="#E5E5E5"> possible to use this type of attacks</font>

1134
00:58:28,330 --> 00:58:34,540
against the hypervisors and that would

1135
00:58:31,280 --> 00:58:36,320
be possible<font color="#E5E5E5"> might be possible from</font>

1136
00:58:34,540 --> 00:58:39,140
administrative<font color="#E5E5E5"> guests</font><font color="#CCCCCC"> only</font>

1137
00:58:36,320 --> 00:58:40,730
not from<font color="#CCCCCC"> privileged guests okay and then</font>

1138
00:58:39,140 --> 00:58:43,069
one other quick<font color="#CCCCCC"> question you</font><font color="#E5E5E5"> were</font>

1139
00:58:40,730 --> 00:58:45,530
talking<font color="#E5E5E5"> about a lot</font><font color="#CCCCCC"> of the behavior in</font>

1140
00:58:43,070 --> 00:58:47,690
the<font color="#CCCCCC"> sm is is to do a read modify and</font>

1141
00:58:45,530 --> 00:58:50,869
write so I was just<font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> like this</font>

1142
00:58:47,690 --> 00:58:52,640
vector<font color="#CCCCCC"> if you have an offset into a</font>

1143
00:58:50,869 --> 00:58:54,770
kernel where you have a<font color="#E5E5E5"> predictable</font>

1144
00:58:52,640 --> 00:58:56,540
increments of that counter<font color="#E5E5E5"> is there a</font>

1145
00:58:54,770 --> 00:58:59,390
<font color="#E5E5E5">way basically to block it and loop that</font>

1146
00:58:56,540 --> 00:59:04,400
increment<font color="#E5E5E5"> in normal behavior that does</font>

1147
00:58:59,390 --> 00:59:07,009
<font color="#E5E5E5">that make</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> it does I definitely not</font>

1148
00:59:04,400 --> 00:59:10,730
not<font color="#CCCCCC"> sure that there's a</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> to block it</font>

1149
00:59:07,010 --> 00:59:12,859
in on the kernel level<font color="#E5E5E5"> but also I don't</font>

1150
00:59:10,730 --> 00:59:16,940
<font color="#CCCCCC">think</font><font color="#E5E5E5"> you would attack the kernel itself</font>

1151
00:59:12,859 --> 00:59:19,759
with this<font color="#E5E5E5"> because in in in the in the</font>

1152
00:59:16,940 --> 00:59:21,320
general case<font color="#E5E5E5"> you have to</font><font color="#CCCCCC"> have an access</font>

1153
00:59:19,760 --> 00:59:23,780
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> PCI configuration space</font><font color="#CCCCCC"> of the</font>

1154
00:59:21,320 --> 00:59:25,609
<font color="#E5E5E5">devices so in order</font><font color="#CCCCCC"> to relocate the</font>

1155
00:59:23,780 --> 00:59:28,970
memory<font color="#CCCCCC"> Maps based based addresses</font>

1156
00:59:25,609 --> 00:59:31,308
somewhere<font color="#E5E5E5"> else in the in the memory and</font>

1157
00:59:28,970 --> 00:59:32,988
that<font color="#E5E5E5"> already assumes that</font>

1158
00:59:31,309 --> 00:59:35,869
right access<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> PC a config space</font>

1159
00:59:32,989 --> 00:59:39,979
which is<font color="#CCCCCC"> rank zero</font><font color="#E5E5E5"> in majority of</font><font color="#CCCCCC"> cases</font>

1160
00:59:35,869 --> 00:59:42,619
<font color="#E5E5E5">so I you wouldn't use this attack to</font>

1161
00:59:39,979 --> 00:59:43,999
attack<font color="#CCCCCC"> kernel I guess right well I was</font>

1162
00:59:42,619 --> 00:59:49,789
thinking and virtualized environment but

1163
00:59:43,999 --> 00:59:52,129
yeah<font color="#E5E5E5"> oh yeah okay yeah thank you on the</font>

1164
00:59:49,789 --> 00:59:53,209
virtualized environment sorry<font color="#CCCCCC"> on the in</font>

1165
00:59:52,130 --> 00:59:55,789
the virtualized environment the

1166
00:59:53,209 --> 00:59:58,399
hypervisor might prevent<font color="#E5E5E5"> of course the</font>

1167
00:59:55,789 --> 01:00:00,499
first way to prevent<font color="#E5E5E5"> that is to not</font>

1168
00:59:58,400 --> 01:00:04,909
<font color="#E5E5E5">allow any guests including</font>

1169
01:00:00,499 --> 01:00:07,549
administrative<font color="#E5E5E5"> guests from not allowed</font>

1170
01:00:04,909 --> 01:00:10,309
to modify<font color="#E5E5E5"> the base address of</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> my</font>

1171
01:00:07,549 --> 01:00:14,329
arranges that's the first and pretty

1172
01:00:10,309 --> 01:00:16,159
straightforward and should be done<font color="#E5E5E5"> but</font>

1173
01:00:14,329 --> 01:00:18,589
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can also monitor</font><font color="#E5E5E5"> memory with the</font>

1174
01:00:16,159 --> 01:00:20,509
with<font color="#E5E5E5"> the extended page</font><font color="#CCCCCC"> tables and</font><font color="#E5E5E5"> cause</font>

1175
01:00:18,589 --> 01:00:22,939
<font color="#E5E5E5">apt violations on certain</font><font color="#CCCCCC"> events but</font>

1176
01:00:20,509 --> 01:00:25,089
<font color="#CCCCCC">that would be</font><font color="#E5E5E5"> I guess performance having</font>

1177
01:00:22,939 --> 01:00:25,089
<font color="#CCCCCC">I</font>

1178
01:00:34,729 --> 01:00:39,198
thanks for the interesting talks<font color="#CCCCCC"> I have</font>

1179
01:00:37,009 --> 01:00:40,989
a question regarding the<font color="#E5E5E5"> relocation of</font>

1180
01:00:39,199 --> 01:00:43,429
the<font color="#CCCCCC"> daemon high bar</font>

1181
01:00:40,989 --> 01:00:46,579
register that<font color="#E5E5E5"> you are talking about in</font>

1182
01:00:43,429 --> 01:00:50,509
the last slides it<font color="#CCCCCC"> was thought that some</font>

1183
01:00:46,579 --> 01:00:53,239
<font color="#CCCCCC">are new SMI handler may verify</font><font color="#E5E5E5"> the</font>

1184
01:00:50,509 --> 01:00:54,969
<font color="#CCCCCC">content of the register and restore it</font>

1185
01:00:53,239 --> 01:00:58,189
<font color="#E5E5E5">to the original location right</font>

1186
01:00:54,969 --> 01:01:00,669
but the sort of things that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have not</font>

1187
01:00:58,189 --> 01:01:03,229
<font color="#CCCCCC">understood is that</font><font color="#E5E5E5"> they are whereas</font>

1188
01:01:00,669 --> 01:01:06,078
<font color="#CCCCCC">designing this for a reason that</font><font color="#E5E5E5"> maybe</font>

1189
01:01:03,229 --> 01:01:10,848
some device can would like to relocate

1190
01:01:06,079 --> 01:01:13,489
the hmmm<font color="#CCCCCC"> IO bar register for some reason</font>

1191
01:01:10,849 --> 01:01:16,339
of accessing the memory marker register

1192
01:01:13,489 --> 01:01:18,859
<font color="#E5E5E5">and my question is how</font><font color="#CCCCCC"> can you</font><font color="#E5E5E5"> recognize</font>

1193
01:01:16,339 --> 01:01:21,140
when<font color="#E5E5E5"> it's legal</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> or it's not</font>

1194
01:01:18,859 --> 01:01:23,328
legal<font color="#CCCCCC"> to that I mean there</font><font color="#E5E5E5"> is a some way</font>

1195
01:01:21,140 --> 01:01:31,819
to trigger<font color="#CCCCCC"> against a my handler that is</font>

1196
01:01:23,329 --> 01:01:34,849
another one from<font color="#E5E5E5"> software</font><font color="#CCCCCC"> let me see</font>

1197
01:01:31,819 --> 01:01:38,058
<font color="#CCCCCC">Andrea</font><font color="#E5E5E5"> you had like multiple questions</font>

1198
01:01:34,849 --> 01:01:43,309
in the same in the<font color="#CCCCCC"> same question so it's</font>

1199
01:01:38,059 --> 01:01:45,319
illegal to modify the<font color="#E5E5E5"> you know which</font>

1200
01:01:43,309 --> 01:01:47,569
suffer legitimately can modify the<font color="#E5E5E5"> base</font>

1201
01:01:45,319 --> 01:01:51,799
address registers for<font color="#E5E5E5"> the for the my</font>

1202
01:01:47,569 --> 01:01:55,999
bars<font color="#CCCCCC"> generally</font><font color="#E5E5E5"> PCI can be</font><font color="#CCCCCC"> CI</font>

1203
01:01:51,799 --> 01:02:00,499
architecture allows OS to relocate my

1204
01:01:55,999 --> 01:02:02,118
<font color="#E5E5E5">ranges anytime anytime at once in a lot</font>

1205
01:02:00,499 --> 01:02:05,299
of<font color="#E5E5E5"> cases I don't think that happens</font>

1206
01:02:02,119 --> 01:02:10,239
often<font color="#E5E5E5"> rather than when OS just you know</font>

1207
01:02:05,299 --> 01:02:13,249
<font color="#E5E5E5">bits but this is a PCI architectural</font>

1208
01:02:10,239 --> 01:02:15,439
capability so<font color="#CCCCCC"> that any operating system</font>

1209
01:02:13,249 --> 01:02:17,390
can relocate<font color="#E5E5E5"> ranges because they need to</font>

1210
01:02:15,439 --> 01:02:20,479
do you know devices<font color="#CCCCCC"> maybe at it they</font>

1211
01:02:17,390 --> 01:02:23,359
have ranges<font color="#E5E5E5"> and so they they should be</font>

1212
01:02:20,479 --> 01:02:24,890
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to relocate all the branches</font><font color="#CCCCCC"> so I</font>

1213
01:02:23,359 --> 01:02:27,319
don't<font color="#E5E5E5"> think there is</font><font color="#CCCCCC"> a generic</font><font color="#E5E5E5"> way to</font>

1214
01:02:24,890 --> 01:02:29,239
know where<font color="#E5E5E5"> they were the you know</font>

1215
01:02:27,319 --> 01:02:31,329
relocation of the<font color="#E5E5E5"> ranges is really or</font>

1216
01:02:29,239 --> 01:02:33,559
not

1217
01:02:31,329 --> 01:02:35,900
again with the virtualized environments

1218
01:02:33,559 --> 01:02:37,819
you<font color="#CCCCCC"> can prevent it</font><font color="#E5E5E5"> at runtime exactly</font>

1219
01:02:35,900 --> 01:02:39,380
they lasted lattice mitigation<font color="#E5E5E5"> that you</font>

1220
01:02:37,819 --> 01:02:43,058
show you in your laptop<font color="#E5E5E5"> you show</font><font color="#CCCCCC"> that</font>

1221
01:02:39,380 --> 01:02:46,849
they the Emma Emma<font color="#CCCCCC"> em</font><font color="#E5E5E5"> higher bar</font>

1222
01:02:43,059 --> 01:02:49,669
<font color="#E5E5E5">register has been restored</font><font color="#CCCCCC"> right and</font>

1223
01:02:46,849 --> 01:02:52,459
what I was<font color="#E5E5E5"> wrong wondering there in that</font>

1224
01:02:49,669 --> 01:02:54,199
case you can't do for each SMI handler

1225
01:02:52,459 --> 01:02:56,328
the same things<font color="#E5E5E5"> because maybe someone</font>

1226
01:02:54,199 --> 01:02:58,609
<font color="#E5E5E5">needs to do leg a leak</font>

1227
01:02:56,329 --> 01:03:00,829
oh<font color="#CCCCCC"> okay yeah I get it</font><font color="#E5E5E5"> so you cannot you</font>

1228
01:02:58,609 --> 01:03:03,199
cannot do the same mitigation<font color="#E5E5E5"> for all</font>

1229
01:03:00,829 --> 01:03:09,999
<font color="#E5E5E5">these members that that's that's your</font>

1230
01:03:03,199 --> 01:03:14,479
<font color="#CCCCCC">question I I think you're correct that</font>

1231
01:03:09,999 --> 01:03:16,368
<font color="#E5E5E5">it's not a very generic mitigation and</font>

1232
01:03:14,479 --> 01:03:18,678
that's why there<font color="#CCCCCC"> are like three options</font>

1233
01:03:16,369 --> 01:03:20,150
<font color="#CCCCCC">that the former should consider and a</font>

1234
01:03:18,679 --> 01:03:22,519
kind of combination<font color="#CCCCCC"> of those</font><font color="#E5E5E5"> three</font>

1235
01:03:20,150 --> 01:03:26,449
options should<font color="#E5E5E5"> be implemented</font><font color="#CCCCCC"> I think</font>

1236
01:03:22,519 --> 01:03:28,368
but it also works for if you if you know

1237
01:03:26,449 --> 01:03:30,289
because the<font color="#CCCCCC"> es</font><font color="#E5E5E5"> members are you know</font>

1238
01:03:28,369 --> 01:03:32,809
shouldn't<font color="#E5E5E5"> be installed at runtime they</font>

1239
01:03:30,289 --> 01:03:36,619
should be fixed<font color="#E5E5E5"> so you know well you</font>

1240
01:03:32,809 --> 01:03:38,689
<font color="#E5E5E5">know where each SMI</font><font color="#CCCCCC"> under is is exactly</font>

1241
01:03:36,619 --> 01:03:41,079
which<font color="#E5E5E5"> device it's communicating with</font>

1242
01:03:38,689 --> 01:03:44,239
which show you<font color="#E5E5E5"> mmm I arranged</font><font color="#CCCCCC"> its</font>

1243
01:03:41,079 --> 01:03:46,190
<font color="#CCCCCC">writing to a reading from and in that</font>

1244
01:03:44,239 --> 01:03:49,610
case it<font color="#CCCCCC"> might be a</font>

1245
01:03:46,190 --> 01:03:54,560
<font color="#E5E5E5">a relatively generic mitigation because</font>

1246
01:03:49,610 --> 01:03:55,760
<font color="#CCCCCC">you know that in advance but yeah I</font>

1247
01:03:54,560 --> 01:03:57,830
think<font color="#E5E5E5"> it's a combination of three</font>

1248
01:03:55,760 --> 01:04:07,820
<font color="#E5E5E5">options</font><font color="#CCCCCC"> that should be there</font><font color="#E5E5E5"> yes that's</font>

1249
01:03:57,830 --> 01:04:10,910
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> the question thank you hi I had</font>

1250
01:04:07,820 --> 01:04:13,640
actually suggestion maybe for<font color="#E5E5E5"> a possible</font>

1251
01:04:10,910 --> 01:04:17,089
<font color="#E5E5E5">additional mitigation</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> some devices</font>

1252
01:04:13,640 --> 01:04:19,250
<font color="#CCCCCC">that should not be normally relocated by</font>

1253
01:04:17,090 --> 01:04:21,740
<font color="#E5E5E5">the rest like the same as PI controller</font>

1254
01:04:19,250 --> 01:04:25,310
<font color="#E5E5E5">may be different</font><font color="#CCCCCC"> we could just</font><font color="#E5E5E5"> stores</font>

1255
01:04:21,740 --> 01:04:30,379
the<font color="#E5E5E5"> the bar and not delete it from</font><font color="#CCCCCC"> the</font>

1256
01:04:25,310 --> 01:04:32,740
device<font color="#E5E5E5"> each time</font><font color="#CCCCCC"> yeah except when you</font>

1257
01:04:30,380 --> 01:04:37,280
store the borrow the<font color="#E5E5E5"> cache the value a</font>

1258
01:04:32,740 --> 01:04:39,620
let's say OS or exploit code relocates

1259
01:04:37,280 --> 01:04:41,330
it<font color="#CCCCCC"> you're still</font><font color="#E5E5E5"> writing to your original</font>

1260
01:04:39,620 --> 01:04:42,920
<font color="#E5E5E5">data because they cashed it and you're</font>

1261
01:04:41,330 --> 01:04:44,600
not<font color="#E5E5E5"> using it not reading from the device</font>

1262
01:04:42,920 --> 01:04:47,660
<font color="#E5E5E5">but then you're not really talking to</font>

1263
01:04:44,600 --> 01:04:49,759
<font color="#E5E5E5">the device but</font><font color="#CCCCCC"> yeah the functionality is</font>

1264
01:04:47,660 --> 01:04:51,710
<font color="#CCCCCC">broken but you</font><font color="#E5E5E5"> don't care because</font><font color="#CCCCCC"> this</font>

1265
01:04:49,760 --> 01:04:53,000
is an attack the trouble is it's not

1266
01:04:51,710 --> 01:04:55,940
it's<font color="#E5E5E5"> more than the functionality is</font>

1267
01:04:53,000 --> 01:05:00,020
<font color="#CCCCCC">broken they export code might force you</font>

1268
01:04:55,940 --> 01:05:01,850
to read<font color="#E5E5E5"> write to the cached location</font>

1269
01:05:00,020 --> 01:05:03,890
which now might be<font color="#E5E5E5"> is by something else</font>

1270
01:05:01,850 --> 01:05:06,500
<font color="#E5E5E5">or anything though there's a potential</font>

1271
01:05:03,890 --> 01:05:10,569
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> share that's why this option</font>

1272
01:05:06,500 --> 01:05:13,220
<font color="#CCCCCC">three is is more of a you do cache that</font>

1273
01:05:10,570 --> 01:05:16,460
beforehand when the<font color="#E5E5E5"> firm reboots but you</font>

1274
01:05:13,220 --> 01:05:18,470
also force the via this default location

1275
01:05:16,460 --> 01:05:20,060
into the actual registers so you know

1276
01:05:18,470 --> 01:05:28,069
that<font color="#E5E5E5"> you're actually</font><font color="#CCCCCC"> talking to the</font>

1277
01:05:20,060 --> 01:05:30,350
device as well<font color="#E5E5E5"> so yeah all right</font><font color="#CCCCCC"> I think</font>

1278
01:05:28,070 --> 01:05:32,980
that's time for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> presenter yeah</font>

1279
01:05:30,350 --> 01:05:36,308
thank you

1280
01:05:32,980 --> 01:05:36,309
[Applause]

