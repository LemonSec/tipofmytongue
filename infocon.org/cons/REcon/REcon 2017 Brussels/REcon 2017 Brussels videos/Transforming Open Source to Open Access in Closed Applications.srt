1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,420 --> 00:00:13,309
recon<font color="#CCCCCC"> Arkell 2017</font>

3
00:00:20,199 --> 00:00:25,730
hello everybody<font color="#E5E5E5"> so like you said this</font><font color="#CCCCCC"> is</font>

4
00:00:23,840 --> 00:00:28,640
a this type talk is<font color="#E5E5E5"> entitled a</font>

5
00:00:25,730 --> 00:00:30,829
transforming<font color="#E5E5E5"> open source to open access</font>

6
00:00:28,640 --> 00:00:31,849
and<font color="#E5E5E5"> closed applications specifically</font>

7
00:00:30,829 --> 00:00:35,000
we're<font color="#E5E5E5"> going to be talking today about</font>

8
00:00:31,849 --> 00:00:38,600
<font color="#CCCCCC">how when auditing open source components</font>

9
00:00:35,000 --> 00:00:40,790
<font color="#CCCCCC">of applications like</font><font color="#E5E5E5"> Adobe Reader</font><font color="#CCCCCC"> you</font>

10
00:00:38,600 --> 00:00:42,649
can find bugs<font color="#E5E5E5"> easier instead of</font><font color="#CCCCCC"> looking</font>

11
00:00:40,790 --> 00:00:45,290
<font color="#E5E5E5">at the</font><font color="#CCCCCC"> binary</font><font color="#E5E5E5"> and transfer those bugs</font>

12
00:00:42,649 --> 00:00:46,940
<font color="#E5E5E5">into the closed source</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> which</font>

13
00:00:45,290 --> 00:00:48,920
then you can<font color="#CCCCCC"> actually leverage</font><font color="#E5E5E5"> to write</font>

14
00:00:46,940 --> 00:00:52,699
exploits<font color="#E5E5E5"> we're going to go over several</font>

15
00:00:48,920 --> 00:00:54,859
code matching techniques<font color="#CCCCCC"> that</font><font color="#E5E5E5"> exist and</font>

16
00:00:52,699 --> 00:00:57,108
<font color="#CCCCCC">we'll also go</font><font color="#E5E5E5"> through a series</font><font color="#CCCCCC"> of case</font>

17
00:00:54,859 --> 00:00:58,879
<font color="#CCCCCC">studies that</font><font color="#E5E5E5"> will show the underlying</font>

18
00:00:57,109 --> 00:01:01,190
vulnerability in<font color="#E5E5E5"> in the open</font><font color="#CCCCCC"> source</font>

19
00:00:58,879 --> 00:01:03,800
components<font color="#CCCCCC"> how to pinpoint it in the</font><font color="#E5E5E5"> DLL</font>

20
00:01:01,190 --> 00:01:05,720
that's a<font color="#E5E5E5"> shift with reader along with</font>

21
00:01:03,800 --> 00:01:08,630
how Adobe actually patched the

22
00:01:05,720 --> 00:01:10,580
vulnerability itself so first though

23
00:01:08,630 --> 00:01:11,990
quick introductions<font color="#E5E5E5"> if you don't know</font>

24
00:01:10,580 --> 00:01:14,330
who I<font color="#E5E5E5"> am my name</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> Brian</font><font color="#CCCCCC"> gorn's</font>

25
00:01:11,990 --> 00:01:17,929
malicious input on Twitter<font color="#E5E5E5"> so I'm never</font>

26
00:01:14,330 --> 00:01:20,060
<font color="#E5E5E5">really</font><font color="#CCCCCC"> on Twitter I'm a beast</font><font color="#E5E5E5"> senior</font>

27
00:01:17,929 --> 00:01:21,619
senior manager for<font color="#E5E5E5"> vulnerability</font>

28
00:01:20,060 --> 00:01:24,079
research inside of Trend Micro's

29
00:01:21,619 --> 00:01:26,780
<font color="#CCCCCC">tipping-point</font><font color="#E5E5E5"> organization my primary</font>

30
00:01:24,079 --> 00:01:28,250
purpose in my<font color="#CCCCCC"> life basically</font><font color="#E5E5E5"> now is to</font>

31
00:01:26,780 --> 00:01:30,110
run<font color="#CCCCCC"> the zero day</font><font color="#E5E5E5"> initiative program</font>

32
00:01:28,250 --> 00:01:32,990
which represents the world's largest

33
00:01:30,110 --> 00:01:34,759
vendor<font color="#CCCCCC"> agnostic bug bounty program now</font>

34
00:01:32,990 --> 00:01:36,559
what does that<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> means we work</font>

35
00:01:34,759 --> 00:01:38,360
with<font color="#E5E5E5"> researchers around the</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> we</font>

36
00:01:36,560 --> 00:01:41,299
purchase zero day vulnerabilities from

37
00:01:38,360 --> 00:01:44,479
researchers a<font color="#E5E5E5"> lot here in the EU and in</font>

38
00:01:41,299 --> 00:01:46,130
this<font color="#E5E5E5"> region we produce detection</font>

39
00:01:44,479 --> 00:01:47,539
guidance for the tipping point<font color="#CCCCCC"> IPs and</font>

40
00:01:46,130 --> 00:01:50,210
then we ship<font color="#E5E5E5"> them to the vendors</font><font color="#CCCCCC"> to get</font>

41
00:01:47,539 --> 00:01:51,740
them fixed<font color="#CCCCCC"> we do a lot of vulnerability</font>

42
00:01:50,210 --> 00:01:54,350
purchasing and research<font color="#E5E5E5"> inside of</font>

43
00:01:51,740 --> 00:01:55,939
Microsoft<font color="#CCCCCC"> and Adobe products and in fact</font>

44
00:01:54,350 --> 00:01:57,079
we're<font color="#CCCCCC"> actually one of the top suppliers</font>

45
00:01:55,939 --> 00:01:58,669
for<font color="#E5E5E5"> both of those vendors for</font>

46
00:01:57,079 --> 00:02:01,729
vulnerabilities for multiple years now

47
00:01:58,670 --> 00:02:03,920
I'm also responsible<font color="#E5E5E5"> for organizing and</font>

48
00:02:01,729 --> 00:02:05,630
adjudicating<font color="#E5E5E5"> the ever-popular</font><font color="#CCCCCC"> pound two</font>

49
00:02:03,920 --> 00:02:08,119
own hacking competition<font color="#CCCCCC"> which is</font>

50
00:02:05,630 --> 00:02:10,100
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> happening</font><font color="#E5E5E5"> --hi in March at</font>

51
00:02:08,119 --> 00:02:11,750
<font color="#CCCCCC">Cannes a quest</font><font color="#E5E5E5"> so if you have some zero</font>

52
00:02:10,100 --> 00:02:13,489
days and some<font color="#E5E5E5"> exploits</font><font color="#CCCCCC"> that you would</font>

53
00:02:11,750 --> 00:02:15,049
like<font color="#E5E5E5"> to sell in a public forum</font>

54
00:02:13,489 --> 00:02:16,880
definitely come<font color="#CCCCCC"> on out and check it out</font>

55
00:02:15,049 --> 00:02:19,880
<font color="#E5E5E5">I'll let my colleagues</font><font color="#CCCCCC"> here introduce</font>

56
00:02:16,880 --> 00:02:21,410
themselves<font color="#CCCCCC"> so my name</font><font color="#E5E5E5"> is Abdul I'm a</font>

57
00:02:19,880 --> 00:02:23,420
security<font color="#CCCCCC"> researcher working</font><font color="#E5E5E5"> for the</font>

58
00:02:21,410 --> 00:02:26,359
<font color="#E5E5E5">zierden</font><font color="#CCCCCC"> estate program which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> part of</font>

59
00:02:23,420 --> 00:02:28,549
Trend Micro<font color="#E5E5E5"> now I've been working for</font>

60
00:02:26,359 --> 00:02:31,100
<font color="#E5E5E5">the CBI for the past four years</font>

61
00:02:28,550 --> 00:02:33,380
<font color="#CCCCCC">I do a lot of viability</font><font color="#E5E5E5"> research</font><font color="#CCCCCC"> which</font>

62
00:02:31,100 --> 00:02:35,230
cause analysis and stuff like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> based</font>

63
00:02:33,380 --> 00:02:37,820
off Montreal<font color="#E5E5E5"> Canada</font>

64
00:02:35,230 --> 00:02:39,739
<font color="#CCCCCC">alright I'm Jaisal Spellman</font><font color="#E5E5E5"> go by</font>

65
00:02:37,820 --> 00:02:41,540
<font color="#CCCCCC">wondering which I've been</font><font color="#E5E5E5"> with CDI since</font>

66
00:02:39,740 --> 00:02:44,900
2012<font color="#CCCCCC"> but I've been with tipping point</font>

67
00:02:41,540 --> 00:02:47,329
for<font color="#E5E5E5"> 11 and a half years</font><font color="#CCCCCC"> now I focus a</font>

68
00:02:44,900 --> 00:02:49,610
lot on static analysis and<font color="#E5E5E5"> reverse</font>

69
00:02:47,330 --> 00:02:57,230
engineering and just<font color="#E5E5E5"> really root cause</font>

70
00:02:49,610 --> 00:02:58,790
analysis in general<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so lucky</font>

71
00:02:57,230 --> 00:02:59,869
for<font color="#CCCCCC"> me I and when when we were</font><font color="#E5E5E5"> going</font>

72
00:02:58,790 --> 00:03:02,090
<font color="#CCCCCC">through this presentation</font><font color="#E5E5E5"> I drew the</font>

73
00:02:59,870 --> 00:03:03,500
straw to talk<font color="#CCCCCC"> about the attack surface</font>

74
00:03:02,090 --> 00:03:05,030
<font color="#E5E5E5">that we're going to be going over which</font>

75
00:03:03,500 --> 00:03:07,670
means<font color="#E5E5E5"> I get</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> lucky</font><font color="#CCCCCC"> honour of</font>

76
00:03:05,030 --> 00:03:09,860
presenting<font color="#CCCCCC"> XSLT to this</font><font color="#E5E5E5"> audience which</font>

77
00:03:07,670 --> 00:03:11,929
is very<font color="#E5E5E5"> exciting for</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> because you</font>

78
00:03:09,860 --> 00:03:13,940
<font color="#CCCCCC">likely already know all</font><font color="#E5E5E5"> about XSLT but</font>

79
00:03:11,930 --> 00:03:16,070
there is a point<font color="#CCCCCC"> to this</font><font color="#E5E5E5"> section so</font><font color="#CCCCCC"> that</font>

80
00:03:13,940 --> 00:03:17,720
<font color="#E5E5E5">you can actually start so we can put you</font>

81
00:03:16,070 --> 00:03:21,079
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> place in the sabola Tron</font>

82
00:03:17,720 --> 00:03:23,270
code<font color="#E5E5E5"> to find vulnerabilities so first as</font>

83
00:03:21,080 --> 00:03:26,210
we all know it's very very<font color="#CCCCCC"> very</font><font color="#E5E5E5"> common</font>

84
00:03:23,270 --> 00:03:28,130
now for<font color="#E5E5E5"> applications to integrate open</font>

85
00:03:26,210 --> 00:03:30,590
<font color="#E5E5E5">source projects into their closed source</font>

86
00:03:28,130 --> 00:03:32,989
applications<font color="#E5E5E5"> it's a way</font><font color="#CCCCCC"> for the vendors</font>

87
00:03:30,590 --> 00:03:34,760
<font color="#CCCCCC">to</font><font color="#E5E5E5"> quickly add features</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the product</font>

88
00:03:32,989 --> 00:03:36,980
<font color="#E5E5E5">without</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to go through</font><font color="#CCCCCC"> all of that</font>

89
00:03:34,760 --> 00:03:38,120
really costly engineering effort but<font color="#E5E5E5"> one</font>

90
00:03:36,980 --> 00:03:39,679
of the one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the real problems</font><font color="#CCCCCC"> that</font>

91
00:03:38,120 --> 00:03:41,360
we're starting<font color="#CCCCCC"> to see inside of</font><font color="#E5E5E5"> the zero</font>

92
00:03:39,680 --> 00:03:43,459
day initiative program is the vendors

93
00:03:41,360 --> 00:03:45,350
don't<font color="#E5E5E5"> actually understand the</font><font color="#CCCCCC"> security</font>

94
00:03:43,459 --> 00:03:46,489
side<font color="#E5E5E5"> effects</font><font color="#CCCCCC"> that exists by integrating</font>

95
00:03:45,350 --> 00:03:48,530
these products there's a lot<font color="#E5E5E5"> of</font>

96
00:03:46,489 --> 00:03:50,630
misunderstood assumptions about how the

97
00:03:48,530 --> 00:03:52,459
code works<font color="#CCCCCC"> and</font><font color="#E5E5E5"> as a result this can</font>

98
00:03:50,630 --> 00:03:53,870
interject security<font color="#E5E5E5"> weaknesses into the</font>

99
00:03:52,459 --> 00:03:55,970
applications that<font color="#CCCCCC"> they're shipping</font><font color="#E5E5E5"> to</font>

100
00:03:53,870 --> 00:03:57,739
their end users<font color="#E5E5E5"> there's also a lot of</font>

101
00:03:55,970 --> 00:03:59,570
poorly<font color="#E5E5E5"> implemented components out there</font>

102
00:03:57,739 --> 00:04:02,120
or code that's no<font color="#CCCCCC"> longer being</font>

103
00:03:59,570 --> 00:04:03,739
maintained<font color="#E5E5E5"> and as a result now the</font>

104
00:04:02,120 --> 00:04:06,080
vendor has to take on that burden<font color="#E5E5E5"> of</font>

105
00:04:03,739 --> 00:04:08,330
keeping<font color="#CCCCCC"> that open source project</font><font color="#E5E5E5"> active</font>

106
00:04:06,080 --> 00:04:10,190
and implementing security<font color="#E5E5E5"> features into</font>

107
00:04:08,330 --> 00:04:13,400
that project<font color="#CCCCCC"> long</font><font color="#E5E5E5"> after the project has</font>

108
00:04:10,190 --> 00:04:16,399
<font color="#E5E5E5">died there's also some sometimes missing</font>

109
00:04:13,400 --> 00:04:18,140
security mitigations vetting<font color="#E5E5E5"> that that</font>

110
00:04:16,399 --> 00:04:19,519
don't get rolled in you know some of<font color="#E5E5E5"> the</font>

111
00:04:18,140 --> 00:04:22,610
new mitigations<font color="#CCCCCC"> that are being released</font>

112
00:04:19,519 --> 00:04:25,640
<font color="#CCCCCC">in say edge and things like</font><font color="#E5E5E5"> that</font>

113
00:04:22,610 --> 00:04:26,780
<font color="#E5E5E5">you know the those types of ideas aren't</font>

114
00:04:25,640 --> 00:04:28,729
actually implemented in some of<font color="#CCCCCC"> this</font>

115
00:04:26,780 --> 00:04:31,489
older code that's being<font color="#CCCCCC"> integrated into</font>

116
00:04:28,730 --> 00:04:32,600
the products so what we're<font color="#E5E5E5"> going to do</font>

117
00:04:31,490 --> 00:04:35,630
is we're<font color="#E5E5E5"> going to look at Adobe Reader</font>

118
00:04:32,600 --> 00:04:37,789
<font color="#E5E5E5">as we all know Adobe Reader is a widely</font>

119
00:04:35,630 --> 00:04:39,620
used document reader it's got a ton of

120
00:04:37,789 --> 00:04:41,280
features<font color="#E5E5E5"> for document authors to</font>

121
00:04:39,620 --> 00:04:43,380
generate really<font color="#E5E5E5"> complex</font>

122
00:04:41,280 --> 00:04:45,090
documents and in<font color="#CCCCCC"> vdi we spent a lot of</font>

123
00:04:43,380 --> 00:04:46,500
time looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> dhobi reader we've</font>

124
00:04:45,090 --> 00:04:48,630
done several presentations<font color="#E5E5E5"> over the last</font>

125
00:04:46,500 --> 00:04:50,220
two<font color="#E5E5E5"> years related to vulnerabilities in</font>

126
00:04:48,630 --> 00:04:52,680
this<font color="#E5E5E5"> product including things related to</font>

127
00:04:50,220 --> 00:04:54,810
<font color="#E5E5E5">JavaScript API s</font><font color="#CCCCCC"> well for</font><font color="#E5E5E5"> overflows use</font>

128
00:04:52,680 --> 00:04:56,160
after freeze<font color="#E5E5E5"> all sorts of stuff</font><font color="#CCCCCC"> that</font>

129
00:04:54,810 --> 00:04:57,690
we've talked about<font color="#E5E5E5"> but we're going to</font>

130
00:04:56,160 --> 00:04:59,370
<font color="#E5E5E5">look at specifically today is the code</font>

131
00:04:57,690 --> 00:05:00,660
<font color="#CCCCCC">that Adobe really didn't implement the</font>

132
00:04:59,370 --> 00:05:02,730
stuff that they're actually<font color="#E5E5E5"> bringing in</font>

133
00:05:00,660 --> 00:05:04,820
from<font color="#E5E5E5"> the open source community</font><font color="#CCCCCC"> and the</font>

134
00:05:02,730 --> 00:05:06,600
vulnerabilities that exist in<font color="#CCCCCC"> that so</font>

135
00:05:04,820 --> 00:05:07,950
we're going to<font color="#E5E5E5"> highlight</font><font color="#CCCCCC"> some of the</font>

136
00:05:06,600 --> 00:05:09,720
security<font color="#E5E5E5"> side effects that we just</font>

137
00:05:07,950 --> 00:05:12,810
talked about in the previous slide<font color="#CCCCCC"> but</font>

138
00:05:09,720 --> 00:05:14,250
if we look at Adobe Reader<font color="#CCCCCC"> it has</font>

139
00:05:12,810 --> 00:05:16,890
several open<font color="#CCCCCC"> source projects that</font>

140
00:05:14,250 --> 00:05:18,960
<font color="#E5E5E5">actually integrates</font><font color="#CCCCCC"> one being a modified</font>

141
00:05:16,890 --> 00:05:21,210
version of Lib Tiff's<font color="#E5E5E5"> for</font><font color="#CCCCCC"> test parsing</font>

142
00:05:18,960 --> 00:05:23,669
and also a modified version of<font color="#CCCCCC"> Sublett</font>

143
00:05:21,210 --> 00:05:25,530
<font color="#CCCCCC">Ron</font><font color="#E5E5E5"> which is used for extensible</font>

144
00:05:23,669 --> 00:05:28,919
<font color="#E5E5E5">stylesheet language transformation</font>

145
00:05:25,530 --> 00:05:30,719
handling and unfortunately for<font color="#E5E5E5"> Adobe</font>

146
00:05:28,919 --> 00:05:32,460
this tablet<font color="#CCCCCC"> arm project is now abandoned</font>

147
00:05:30,720 --> 00:05:33,900
<font color="#E5E5E5">there's no more community out there</font>

148
00:05:32,460 --> 00:05:36,060
actually<font color="#E5E5E5"> implementing new features</font>

149
00:05:33,900 --> 00:05:37,560
<font color="#CCCCCC">there's no security</font><font color="#E5E5E5"> fixes going on in</font>

150
00:05:36,060 --> 00:05:39,540
that<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that project</font><font color="#E5E5E5"> in the open source</font>

151
00:05:37,560 --> 00:05:42,120
space and so it's kind of left up to

152
00:05:39,540 --> 00:05:43,620
Adobe now to<font color="#E5E5E5"> actually integrate and fix</font>

153
00:05:42,120 --> 00:05:46,440
all the bugs<font color="#E5E5E5"> that are coming in into</font>

154
00:05:43,620 --> 00:05:49,560
<font color="#CCCCCC">their into their Security Act group in</font>

155
00:05:46,440 --> 00:05:51,180
this in this<font color="#E5E5E5"> old code now if you don't</font>

156
00:05:49,560 --> 00:05:52,680
<font color="#CCCCCC">believe it's that</font><font color="#E5E5E5"> sab</font><font color="#CCCCCC"> Letran is actually</font>

157
00:05:51,180 --> 00:05:54,000
being used<font color="#CCCCCC"> in</font><font color="#E5E5E5"> reader well you can</font>

158
00:05:52,680 --> 00:05:56,160
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> leave the licensing information</font>

159
00:05:54,000 --> 00:05:58,229
<font color="#CCCCCC">and the product they show the fact that</font>

160
00:05:56,160 --> 00:06:01,979
<font color="#CCCCCC">they are integrating</font><font color="#E5E5E5"> that product</font><font color="#CCCCCC"> and it</font>

161
00:05:58,229 --> 00:06:03,900
actually exists in<font color="#CCCCCC"> ax</font><font color="#E5E5E5"> SLE</font><font color="#CCCCCC"> DLL and we</font>

162
00:06:01,979 --> 00:06:04,979
pulled the version<font color="#CCCCCC"> information from the</font>

163
00:06:03,900 --> 00:06:07,620
code<font color="#E5E5E5"> as you can see it on the screen</font>

164
00:06:04,979 --> 00:06:10,860
<font color="#CCCCCC">here it's actually</font><font color="#E5E5E5"> using version 1.0</font>

165
00:06:07,620 --> 00:06:12,300
point to of sab<font color="#CCCCCC"> Letran</font><font color="#E5E5E5"> and so just kind</font>

166
00:06:10,860 --> 00:06:16,320
of just proof<font color="#CCCCCC"> that it is</font><font color="#E5E5E5"> actually</font>

167
00:06:12,300 --> 00:06:18,270
<font color="#CCCCCC">integrated into that DLL now</font><font color="#E5E5E5"> XSLT</font><font color="#CCCCCC"> has</font>

168
00:06:16,320 --> 00:06:21,390
been around since the<font color="#CCCCCC"> late 90s</font>

169
00:06:18,270 --> 00:06:24,000
<font color="#CCCCCC">was part of w3c s</font><font color="#E5E5E5"> extensible stylesheet</font>

170
00:06:21,390 --> 00:06:25,890
language and specifications<font color="#E5E5E5"> and it's</font>

171
00:06:24,000 --> 00:06:28,860
used a lot<font color="#CCCCCC"> by application developers to</font>

172
00:06:25,890 --> 00:06:30,630
transform data<font color="#CCCCCC"> into other formats xml</font>

173
00:06:28,860 --> 00:06:34,200
data into other formats<font color="#E5E5E5"> and back when I</font>

174
00:06:30,630 --> 00:06:37,830
was<font color="#E5E5E5"> developing code</font><font color="#CCCCCC"> in in my everyday</font>

175
00:06:34,200 --> 00:06:39,810
<font color="#E5E5E5">life I used</font><font color="#CCCCCC"> XSLT a</font><font color="#E5E5E5"> lot and XML a lot to</font>

176
00:06:37,830 --> 00:06:41,280
define<font color="#E5E5E5"> this and bring it into a system</font>

177
00:06:39,810 --> 00:06:43,979
<font color="#CCCCCC">and transform it to different formats</font>

178
00:06:41,280 --> 00:06:46,619
<font color="#CCCCCC">like HTML</font><font color="#E5E5E5"> plain</font><font color="#CCCCCC"> text where you can also</font>

179
00:06:43,979 --> 00:06:49,070
transform it into XSL formatting objects

180
00:06:46,620 --> 00:06:51,930
for later use but what's important about

181
00:06:49,070 --> 00:06:53,669
<font color="#CCCCCC">XSLT are the logic elements that exist</font>

182
00:06:51,930 --> 00:06:55,289
<font color="#CCCCCC">that do processing</font>

183
00:06:53,669 --> 00:06:57,060
and these logic elements<font color="#CCCCCC"> are used</font><font color="#E5E5E5"> to</font>

184
00:06:55,289 --> 00:06:59,280
<font color="#E5E5E5">describe the</font><font color="#CCCCCC"> transformations that are</font>

185
00:06:57,060 --> 00:07:01,710
<font color="#E5E5E5">going to be applied to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> XML that</font><font color="#CCCCCC"> is</font>

186
00:06:59,280 --> 00:07:04,529
transforming<font color="#E5E5E5"> so we have things like for</font>

187
00:07:01,710 --> 00:07:06,508
each which<font color="#E5E5E5"> will</font><font color="#CCCCCC"> select every XML node</font>

188
00:07:04,529 --> 00:07:09,180
inside of a node set and perform

189
00:07:06,509 --> 00:07:11,129
processing<font color="#CCCCCC"> on it there's</font><font color="#E5E5E5"> eczema ssl</font>

190
00:07:09,180 --> 00:07:13,919
attribute which will create an<font color="#CCCCCC"> attribute</font>

191
00:07:11,129 --> 00:07:16,740
on<font color="#E5E5E5"> it on a node an output</font><font color="#CCCCCC"> node</font><font color="#E5E5E5"> so</font>

192
00:07:13,919 --> 00:07:18,539
there's copy that will copy node and put

193
00:07:16,740 --> 00:07:20,039
it to the output<font color="#CCCCCC"> and there's a</font><font color="#E5E5E5"> value of</font>

194
00:07:18,539 --> 00:07:22,020
which will actually<font color="#CCCCCC"> select the value of</font>

195
00:07:20,039 --> 00:07:28,669
the<font color="#CCCCCC"> XML node and print it out</font><font color="#E5E5E5"> into the</font>

196
00:07:22,020 --> 00:07:31,590
output<font color="#E5E5E5"> now to also understand X at the</font>

197
00:07:28,669 --> 00:07:34,469
<font color="#E5E5E5">XSLT format you also need to understand</font>

198
00:07:31,590 --> 00:07:37,198
<font color="#E5E5E5">how XPath works because XPath is used to</font>

199
00:07:34,469 --> 00:07:39,689
query the XML document to select nodes

200
00:07:37,199 --> 00:07:41,340
and perform calculations<font color="#E5E5E5"> on the data</font>

201
00:07:39,689 --> 00:07:44,029
<font color="#E5E5E5">that's coming in as it's going to be</font>

202
00:07:41,340 --> 00:07:47,938
transformed<font color="#E5E5E5"> you know we have I put a</font>

203
00:07:44,029 --> 00:07:51,539
<font color="#CCCCCC">XSLT</font><font color="#E5E5E5"> or an XPath</font><font color="#CCCCCC"> on the screen here /</font>

204
00:07:47,939 --> 00:07:53,099
music /<font color="#CCCCCC"> artists square bracket</font><font color="#E5E5E5"> 1 this is</font>

205
00:07:51,539 --> 00:07:54,568
<font color="#E5E5E5">going to select the first artists</font>

206
00:07:53,099 --> 00:07:56,938
element<font color="#E5E5E5"> that is a child of a music</font>

207
00:07:54,569 --> 00:07:58,919
element in an XML document and<font color="#E5E5E5"> start and</font>

208
00:07:56,939 --> 00:08:01,949
then allow<font color="#CCCCCC"> it to be have processing</font>

209
00:07:58,919 --> 00:08:04,318
performed on it now XPath functions

210
00:08:01,949 --> 00:08:07,139
actually adds<font color="#E5E5E5"> flexibility to the XPath</font>

211
00:08:04,319 --> 00:08:09,509
itself you can you can use node set to

212
00:08:07,139 --> 00:08:12,539
<font color="#E5E5E5">actually get a set of nodes related to</font>

213
00:08:09,509 --> 00:08:15,419
XML string to actually do evaluations<font color="#E5E5E5"> on</font>

214
00:08:12,539 --> 00:08:16,860
on<font color="#E5E5E5"> a different string arguments boolean</font>

215
00:08:15,419 --> 00:08:18,628
and number to do the same thing for

216
00:08:16,860 --> 00:08:20,550
<font color="#E5E5E5">boolean to numbers so there's a lot of</font>

217
00:08:18,629 --> 00:08:22,620
<font color="#CCCCCC">functionality that exists an XPath and a</font>

218
00:08:20,550 --> 00:08:24,240
lot of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> that exists in</font><font color="#E5E5E5"> these</font>

219
00:08:22,620 --> 00:08:28,560
projects<font color="#E5E5E5"> that can be</font><font color="#CCCCCC"> audited and looked</font>

220
00:08:24,240 --> 00:08:30,089
at for vulnerabilities so<font color="#CCCCCC"> XSLT transform</font>

221
00:08:28,560 --> 00:08:31,169
<font color="#E5E5E5">really simple looks like this on the</font>

222
00:08:30,089 --> 00:08:37,919
<font color="#E5E5E5">screen is</font><font color="#CCCCCC"> probably hard to</font><font color="#E5E5E5"> read in the</font>

223
00:08:31,169 --> 00:08:39,419
back but this XML on your left is a the

224
00:08:37,919 --> 00:08:41,549
<font color="#E5E5E5">XML</font><font color="#CCCCCC"> that contains a catalog with</font>

225
00:08:39,419 --> 00:08:43,919
<font color="#E5E5E5">multiple CDs which a bunch of metadata</font>

226
00:08:41,549 --> 00:08:45,269
related<font color="#CCCCCC"> to the CD itself and then</font><font color="#E5E5E5"> there</font>

227
00:08:43,919 --> 00:08:47,939
in the middle here there's actually<font color="#CCCCCC"> an</font>

228
00:08:45,269 --> 00:08:50,220
<font color="#CCCCCC">XSLT document that's</font><font color="#E5E5E5"> going to transform</font>

229
00:08:47,940 --> 00:08:52,320
<font color="#E5E5E5">that XML into</font><font color="#CCCCCC"> the HTML that you</font><font color="#E5E5E5"> see on</font>

230
00:08:50,220 --> 00:08:53,970
the<font color="#CCCCCC"> screen and you can look at that if</font>

231
00:08:52,320 --> 00:08:57,000
you look at<font color="#E5E5E5"> the XML it's kind of hard to</font>

232
00:08:53,970 --> 00:08:58,740
<font color="#E5E5E5">see but there is a for each logic</font>

233
00:08:57,000 --> 00:09:01,199
element in here that's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to select</font>

234
00:08:58,740 --> 00:09:03,660
every every CD<font color="#E5E5E5"> that is a child of</font>

235
00:09:01,199 --> 00:09:05,000
catalog and then perform processing<font color="#CCCCCC"> on</font>

236
00:09:03,660 --> 00:09:08,420
<font color="#CCCCCC">it using the value</font>

237
00:09:05,000 --> 00:09:09,650
of<font color="#CCCCCC"> XSLT logic element so as a result</font><font color="#E5E5E5"> you</font>

238
00:09:08,420 --> 00:09:11,750
<font color="#CCCCCC">can start doing</font><font color="#E5E5E5"> processing and</font>

239
00:09:09,650 --> 00:09:14,120
transforming data that is<font color="#E5E5E5"> XML formatted</font>

240
00:09:11,750 --> 00:09:16,850
<font color="#E5E5E5">into HTML and produce this really</font>

241
00:09:14,120 --> 00:09:22,580
amazing<font color="#CCCCCC"> CD collection</font><font color="#E5E5E5"> HTML page which</font>

242
00:09:16,850 --> 00:09:25,250
everybody loves so if we look at exactly

243
00:09:22,580 --> 00:09:27,590
<font color="#E5E5E5">how</font><font color="#CCCCCC"> you would actually call the</font>

244
00:09:25,250 --> 00:09:31,190
underlying<font color="#CCCCCC"> XSLT engine in</font><font color="#E5E5E5"> Adobe Reader</font>

245
00:09:27,590 --> 00:09:34,100
<font color="#CCCCCC">you have many ways in Adobe</font><font color="#E5E5E5"> Reader to</font>

246
00:09:31,190 --> 00:09:35,930
actually do that<font color="#E5E5E5"> one is</font><font color="#CCCCCC"> xsa and the more</font>

247
00:09:34,100 --> 00:09:38,690
common way<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> seeing is actually</font>

248
00:09:35,930 --> 00:09:41,540
people using javascript api to<font color="#CCCCCC"> trigger</font>

249
00:09:38,690 --> 00:09:43,640
<font color="#E5E5E5">that underlying engine so what we see</font>

250
00:09:41,540 --> 00:09:45,740
<font color="#CCCCCC">here is in the first</font><font color="#E5E5E5"> variable is</font>

251
00:09:43,640 --> 00:09:48,319
actually<font color="#E5E5E5"> the XML document that we're</font>

252
00:09:45,740 --> 00:09:51,290
going to<font color="#E5E5E5"> transform the next variable is</font>

253
00:09:48,320 --> 00:09:53,570
the XSL document the transform itself

254
00:09:51,290 --> 00:09:55,310
<font color="#CCCCCC">this will trigger the underlying code</font>

255
00:09:53,570 --> 00:09:58,130
that we can use<font color="#CCCCCC"> to trigger</font>

256
00:09:55,310 --> 00:10:00,229
vulnerabilities in the<font color="#CCCCCC"> XSLT engine what</font>

257
00:09:58,130 --> 00:10:03,380
you have to do is you have to<font color="#E5E5E5"> parse the</font>

258
00:10:00,230 --> 00:10:06,530
the XML document variable bring it into

259
00:10:03,380 --> 00:10:10,010
<font color="#E5E5E5">a</font><font color="#CCCCCC"> Dom</font><font color="#E5E5E5"> and then select the root node and</font>

260
00:10:06,530 --> 00:10:11,930
then apply the XSL transform<font color="#E5E5E5"> on that</font>

261
00:10:10,010 --> 00:10:13,850
root node<font color="#E5E5E5"> and as</font><font color="#CCCCCC"> and underneath the</font>

262
00:10:11,930 --> 00:10:16,670
covers<font color="#E5E5E5"> you're going to be exercising the</font>

263
00:10:13,850 --> 00:10:21,350
establish on source code<font color="#E5E5E5"> that has been</font>

264
00:10:16,670 --> 00:10:23,569
compiled into a XLE dll now there's this

265
00:10:21,350 --> 00:10:25,400
is just the beginning<font color="#E5E5E5"> of how you start</font>

266
00:10:23,570 --> 00:10:28,040
up<font color="#E5E5E5"> triggering some vulnerabilities in</font>

267
00:10:25,400 --> 00:10:30,800
this code to understand what type of

268
00:10:28,040 --> 00:10:32,030
<font color="#E5E5E5">bugs and where to look in the code we're</font>

269
00:10:30,800 --> 00:10:33,729
going<font color="#CCCCCC"> to show</font><font color="#E5E5E5"> you a couple places where</font>

270
00:10:32,030 --> 00:10:36,439
<font color="#E5E5E5">you can at</font><font color="#CCCCCC"> least start looking for bugs</font>

271
00:10:33,730 --> 00:10:38,180
<font color="#CCCCCC">in this case what</font><font color="#E5E5E5"> you're seeing is the</font>

272
00:10:36,440 --> 00:10:40,580
definition<font color="#E5E5E5"> of all the different logic</font>

273
00:10:38,180 --> 00:10:42,829
<font color="#CCCCCC">elements that exist in</font><font color="#E5E5E5"> sabola Tron</font>

274
00:10:40,580 --> 00:10:44,300
that's being used by Adobe Reader<font color="#E5E5E5"> and</font>

275
00:10:42,830 --> 00:10:46,100
this enumeration here talks about<font color="#CCCCCC"> the</font>

276
00:10:44,300 --> 00:10:47,540
<font color="#E5E5E5">different lot there defines</font><font color="#CCCCCC"> the</font>

277
00:10:46,100 --> 00:10:50,839
different logic<font color="#CCCCCC"> elements and you can see</font>

278
00:10:47,540 --> 00:10:53,569
that copy of<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> there value</font><font color="#CCCCCC"> of is in</font>

279
00:10:50,839 --> 00:10:56,450
there attribute is in there for each all

280
00:10:53,570 --> 00:11:00,200
<font color="#E5E5E5">of the different</font><font color="#CCCCCC"> XSLT logic elements are</font>

281
00:10:56,450 --> 00:11:01,850
defined<font color="#CCCCCC"> here now where is the processing</font>

282
00:11:00,200 --> 00:11:04,880
<font color="#E5E5E5">for all of these different logic</font>

283
00:11:01,850 --> 00:11:07,400
elements<font color="#E5E5E5"> located well there's a class in</font>

284
00:11:04,880 --> 00:11:09,650
<font color="#CCCCCC">establish Ron called</font><font color="#E5E5E5"> XSL elements and</font>

285
00:11:07,400 --> 00:11:11,750
inside the execute method<font color="#CCCCCC"> there's</font>

286
00:11:09,650 --> 00:11:14,050
actually a<font color="#CCCCCC"> giant switch case</font><font color="#E5E5E5"> switch</font><font color="#CCCCCC"> to</font>

287
00:11:11,750 --> 00:11:16,310
case that actually<font color="#E5E5E5"> goes</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> and</font>

288
00:11:14,050 --> 00:11:17,599
performance processing on<font color="#CCCCCC"> the different</font>

289
00:11:16,310 --> 00:11:19,160
logic<font color="#CCCCCC"> elements</font>

290
00:11:17,600 --> 00:11:21,350
so if you're going<font color="#E5E5E5"> to go start</font><font color="#CCCCCC"> looking</font>

291
00:11:19,160 --> 00:11:24,110
for<font color="#E5E5E5"> vulnerabilities as it relates to the</font>

292
00:11:21,350 --> 00:11:25,970
processing of XSL logic<font color="#CCCCCC"> elements</font><font color="#E5E5E5"> you</font>

293
00:11:24,110 --> 00:11:28,100
<font color="#E5E5E5">want to start looking</font><font color="#CCCCCC"> in the execute</font>

294
00:11:25,970 --> 00:11:32,060
method and<font color="#E5E5E5"> we'll actually</font><font color="#CCCCCC"> talk about in</font>

295
00:11:28,100 --> 00:11:33,830
<font color="#CCCCCC">a dual section about</font><font color="#E5E5E5"> some</font>

296
00:11:32,060 --> 00:11:37,400
vulnerabilities that existed<font color="#E5E5E5"> in this</font>

297
00:11:33,830 --> 00:11:39,260
code<font color="#E5E5E5"> now</font><font color="#CCCCCC"> XPath functions are also</font>

298
00:11:37,400 --> 00:11:43,370
<font color="#E5E5E5">implemented in stab electrons and these</font>

299
00:11:39,260 --> 00:11:45,200
reside in expr dot<font color="#E5E5E5"> CPP and again it's</font>

300
00:11:43,370 --> 00:11:47,900
<font color="#CCCCCC">another switch statement that exists in</font>

301
00:11:45,200 --> 00:11:50,390
this code<font color="#E5E5E5"> an expression</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> func</font>

302
00:11:47,900 --> 00:11:51,709
method and<font color="#CCCCCC"> we've lifted</font><font color="#E5E5E5"> listed some</font><font color="#CCCCCC"> here</font>

303
00:11:50,390 --> 00:11:54,710
on<font color="#E5E5E5"> the slides</font><font color="#CCCCCC"> but there has been</font>

304
00:11:51,710 --> 00:11:57,230
vulnerable<font color="#CCCCCC"> ''tis in XPath processing as</font>

305
00:11:54,710 --> 00:11:58,850
<font color="#E5E5E5">well and</font><font color="#CCCCCC"> too you can actually</font><font color="#E5E5E5"> if you're</font>

306
00:11:57,230 --> 00:12:01,010
<font color="#E5E5E5">going to go audit and look for</font>

307
00:11:58,850 --> 00:12:03,800
vulnerabilities<font color="#E5E5E5"> in this open source code</font>

308
00:12:01,010 --> 00:12:05,540
<font color="#E5E5E5">you want</font><font color="#CCCCCC"> to look here for XPath style</font>

309
00:12:03,800 --> 00:12:07,579
vulnerabilities<font color="#E5E5E5"> and then what you</font><font color="#CCCCCC"> can</font>

310
00:12:05,540 --> 00:12:09,579
transform<font color="#E5E5E5"> those</font><font color="#CCCCCC"> into the same</font>

311
00:12:07,580 --> 00:12:12,620
vulnerabilities inside of Adobe<font color="#CCCCCC"> Reader</font>

312
00:12:09,580 --> 00:12:15,080
now we've also seen inside of<font color="#E5E5E5"> this code</font>

313
00:12:12,620 --> 00:12:16,850
<font color="#CCCCCC">some</font><font color="#E5E5E5"> issues related to heap and</font><font color="#CCCCCC"> list</font>

314
00:12:15,080 --> 00:12:19,520
implementations<font color="#E5E5E5"> and so it's another</font>

315
00:12:16,850 --> 00:12:21,800
place<font color="#CCCCCC"> for you to start looking if we</font>

316
00:12:19,520 --> 00:12:23,660
look<font color="#CCCCCC"> back at the vulnerabilities that</font>

317
00:12:21,800 --> 00:12:26,900
have occurred inside<font color="#CCCCCC"> of Adobe readers</font>

318
00:12:23,660 --> 00:12:29,360
<font color="#CCCCCC">XSLT engine we</font><font color="#E5E5E5"> can see back in 2002</font>

319
00:12:26,900 --> 00:12:32,090
<font color="#E5E5E5">Adobe actually fixed two vulnerabilities</font>

320
00:12:29,360 --> 00:12:33,950
in this engine<font color="#CCCCCC"> and we'll talk about</font>

321
00:12:32,090 --> 00:12:35,240
those bugs here in a second<font color="#CCCCCC"> they've got</font>

322
00:12:33,950 --> 00:12:37,460
an<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> back story</font><font color="#E5E5E5"> that actually</font>

323
00:12:35,240 --> 00:12:39,410
<font color="#E5E5E5">affects the latest patch that</font><font color="#CCCCCC"> Abdullah</font>

324
00:12:37,460 --> 00:12:41,570
<font color="#E5E5E5">talked about these were discussed at</font>

325
00:12:39,410 --> 00:12:43,250
length<font color="#E5E5E5"> on the conference circuit but the</font>

326
00:12:41,570 --> 00:12:45,410
<font color="#E5E5E5">community really</font><font color="#CCCCCC"> hasn't paid attention</font>

327
00:12:43,250 --> 00:12:47,720
to<font color="#E5E5E5"> this</font><font color="#CCCCCC"> codebase much since those</font>

328
00:12:45,410 --> 00:12:50,480
discussions then in the zero day

329
00:12:47,720 --> 00:12:51,950
initiative program in<font color="#E5E5E5"> 2015 we started to</font>

330
00:12:50,480 --> 00:12:54,500
see new submissions<font color="#E5E5E5"> from multiple</font>

331
00:12:51,950 --> 00:12:56,540
researchers in this codebase coming<font color="#E5E5E5"> into</font>

332
00:12:54,500 --> 00:12:58,220
our<font color="#E5E5E5"> program</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it got us interested in</font>

333
00:12:56,540 --> 00:13:00,319
how exactly they were going about

334
00:12:58,220 --> 00:13:02,720
finding the vulnerabilities in a<font color="#CCCCCC"> w</font>

335
00:13:00,320 --> 00:13:04,610
reader<font color="#E5E5E5"> and it all comes back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two</font>

336
00:13:02,720 --> 00:13:06,350
source code analysis of sabola Tron and

337
00:13:04,610 --> 00:13:07,670
fuzzing techniques that they're using<font color="#E5E5E5"> to</font>

338
00:13:06,350 --> 00:13:09,920
finding<font color="#E5E5E5"> these bugs and so we'll kind of</font>

339
00:13:07,670 --> 00:13:15,079
go over<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of those here in</font><font color="#E5E5E5"> a second</font>

340
00:13:09,920 --> 00:13:17,000
<font color="#CCCCCC">now if we're to kind of give</font><font color="#E5E5E5"> you an</font><font color="#CCCCCC"> idea</font>

341
00:13:15,080 --> 00:13:18,590
of<font color="#E5E5E5"> where some of the bugs are located we</font>

342
00:13:17,000 --> 00:13:20,780
kind<font color="#CCCCCC"> of generally generated this table</font>

343
00:13:18,590 --> 00:13:24,170
here<font color="#CCCCCC"> the name</font><font color="#E5E5E5"> column just has the</font>

344
00:13:20,780 --> 00:13:26,839
different source code locations for<font color="#E5E5E5"> for</font>

345
00:13:24,170 --> 00:13:28,670
<font color="#E5E5E5">toad inside of</font><font color="#CCCCCC"> Sabbat Ron along with</font>

346
00:13:26,840 --> 00:13:31,260
<font color="#CCCCCC">descriptions of</font><font color="#E5E5E5"> what that code actually</font>

347
00:13:28,670 --> 00:13:33,089
<font color="#CCCCCC">does</font><font color="#E5E5E5"> and then the corresponding</font><font color="#CCCCCC"> CBE's</font>

348
00:13:31,260 --> 00:13:35,040
that were discovered<font color="#E5E5E5"> in those in those</font>

349
00:13:33,090 --> 00:13:36,690
source codes of source code locations

350
00:13:35,040 --> 00:13:39,719
<font color="#E5E5E5">and you can see there's a couple here</font>

351
00:13:36,690 --> 00:13:42,540
<font color="#E5E5E5">from 2012</font><font color="#CCCCCC"> and the rest of them are from</font>

352
00:13:39,720 --> 00:13:44,310
2016<font color="#E5E5E5"> in fact all of these bugs were</font>

353
00:13:42,540 --> 00:13:47,430
actually at the leaf patched in January

354
00:13:44,310 --> 00:13:50,310
of<font color="#CCCCCC"> this year but assigned</font><font color="#E5E5E5"> CVEs of 2016</font>

355
00:13:47,430 --> 00:13:51,630
for whatever reason so what we're<font color="#E5E5E5"> going</font>

356
00:13:50,310 --> 00:13:54,209
to do now is I'm<font color="#E5E5E5"> going to hand it over</font>

357
00:13:51,630 --> 00:13:57,750
to Jaisal<font color="#E5E5E5"> where he's going to talk about</font>

358
00:13:54,210 --> 00:13:59,310
how you can pinpoint the vulnerability

359
00:13:57,750 --> 00:14:01,470
in a closed source application using

360
00:13:59,310 --> 00:14:10,290
some techniques<font color="#CCCCCC"> after you've</font><font color="#E5E5E5"> audited the</font>

361
00:14:01,470 --> 00:14:11,510
code of<font color="#CCCCCC"> sabitch on to find</font><font color="#E5E5E5"> bugs so the</font>

362
00:14:10,290 --> 00:14:14,130
first thing<font color="#E5E5E5"> I want to</font><font color="#CCCCCC"> mention is that</font>

363
00:14:11,510 --> 00:14:16,970
we're not<font color="#E5E5E5"> doing a straight</font><font color="#CCCCCC"> Bend</font><font color="#E5E5E5"> if</font>

364
00:14:14,130 --> 00:14:19,110
against a built<font color="#E5E5E5"> binary in part because</font>

365
00:14:16,970 --> 00:14:21,840
initially<font color="#E5E5E5"> wasn't entirely sure how easy</font>

366
00:14:19,110 --> 00:14:24,450
<font color="#E5E5E5">would be to build it but also because</font>

367
00:14:21,840 --> 00:14:26,730
<font color="#CCCCCC">there</font><font color="#E5E5E5"> a number of preprocessor defines</font>

368
00:14:24,450 --> 00:14:28,470
and you can't<font color="#E5E5E5"> initially we didn't know</font>

369
00:14:26,730 --> 00:14:31,980
whether or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> what all those values</font>

370
00:14:28,470 --> 00:14:33,840
<font color="#E5E5E5">were</font><font color="#CCCCCC"> in addition to</font><font color="#E5E5E5"> that adobe has</font>

371
00:14:31,980 --> 00:14:36,540
<font color="#E5E5E5">implemented a decent number</font><font color="#CCCCCC"> of changes</font>

372
00:14:33,840 --> 00:14:38,850
<font color="#CCCCCC">on top of what's public they did</font><font color="#E5E5E5"> open</font>

373
00:14:36,540 --> 00:14:40,770
source their modifications<font color="#CCCCCC"> a few years</font>

374
00:14:38,850 --> 00:14:42,870
ago<font color="#E5E5E5"> but they have not done to any time</font>

375
00:14:40,770 --> 00:14:45,030
the recent past<font color="#E5E5E5"> and the Sabbath</font><font color="#CCCCCC"> on</font>

376
00:14:42,870 --> 00:14:48,390
source<font color="#E5E5E5"> that is available is incredibly</font>

377
00:14:45,030 --> 00:14:50,400
old so start off using<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> is</font>

378
00:14:48,390 --> 00:14:53,100
a very very<font color="#E5E5E5"> well</font><font color="#CCCCCC"> known technique</font><font color="#E5E5E5"> and</font>

379
00:14:50,400 --> 00:14:55,890
<font color="#E5E5E5">that's just looking</font><font color="#CCCCCC"> for strings so here</font>

380
00:14:53,100 --> 00:14:59,370
we have this struct has<font color="#E5E5E5"> a pointer to</font><font color="#CCCCCC"> a</font>

381
00:14:55,890 --> 00:15:02,189
string followed<font color="#E5E5E5"> by two</font><font color="#CCCCCC"> two enum values</font>

382
00:14:59,370 --> 00:15:03,960
<font color="#E5E5E5">an</font><font color="#CCCCCC"> x</font><font color="#E5E5E5"> functor and x type</font><font color="#CCCCCC"> but in the</font>

383
00:15:02,190 --> 00:15:07,680
binary<font color="#E5E5E5"> that's just going to look like</font>

384
00:15:03,960 --> 00:15:09,240
<font color="#E5E5E5">raw of integers and since this is a</font>

385
00:15:07,680 --> 00:15:11,819
32-bit application that we're looking<font color="#E5E5E5"> at</font>

386
00:15:09,240 --> 00:15:14,400
it's only going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a D word each and</font>

387
00:15:11,820 --> 00:15:17,550
so if we<font color="#CCCCCC"> look for last in position</font><font color="#E5E5E5"> we</font>

388
00:15:14,400 --> 00:15:19,319
<font color="#CCCCCC">see a structure</font><font color="#E5E5E5"> and we can kind of glean</font>

389
00:15:17,550 --> 00:15:21,120
<font color="#CCCCCC">that this is the exact same structure we</font>

390
00:15:19,320 --> 00:15:24,600
were just looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> function</font>

391
00:15:21,120 --> 00:15:27,170
information table on<font color="#E5E5E5"> its own</font><font color="#CCCCCC"> this</font>

392
00:15:24,600 --> 00:15:29,820
<font color="#E5E5E5">structure is</font><font color="#CCCCCC"> not all that useful</font>

393
00:15:27,170 --> 00:15:31,979
<font color="#CCCCCC">specifically</font><font color="#E5E5E5"> because it does map from</font>

394
00:15:29,820 --> 00:15:34,320
the a facility function names to their

395
00:15:31,980 --> 00:15:36,150
IDs<font color="#E5E5E5"> but then their IDs are not the</font>

396
00:15:34,320 --> 00:15:38,040
easiest<font color="#CCCCCC"> to find and if you were to do a</font>

397
00:15:36,150 --> 00:15:40,560
search<font color="#CCCCCC"> for say last which</font><font color="#E5E5E5"> is hex 1a</font>

398
00:15:38,040 --> 00:15:41,990
<font color="#CCCCCC">you'll get a bunch</font><font color="#E5E5E5"> of references</font><font color="#CCCCCC"> they're</font>

399
00:15:40,560 --> 00:15:44,300
a bunch of<font color="#E5E5E5"> hits and not</font>

400
00:15:41,990 --> 00:15:45,830
really go anywhere<font color="#E5E5E5"> thankfully one of the</font>

401
00:15:44,300 --> 00:15:48,949
entries in<font color="#E5E5E5"> there is one that's called</font>

402
00:15:45,830 --> 00:15:52,459
<font color="#E5E5E5">system property</font><font color="#CCCCCC"> and that one has value</font>

403
00:15:48,950 --> 00:15:54,440
it has an ID<font color="#E5E5E5"> of hex</font><font color="#CCCCCC"> 3b and</font><font color="#E5E5E5"> takes a</font>

404
00:15:52,459 --> 00:15:55,969
string<font color="#E5E5E5"> and this one is specifically</font>

405
00:15:54,440 --> 00:15:58,610
<font color="#E5E5E5">useful</font><font color="#CCCCCC"> because if you look at</font><font color="#E5E5E5"> the code</font>

406
00:15:55,970 --> 00:16:00,440
it is<font color="#E5E5E5"> responsible</font><font color="#CCCCCC"> for returning</font><font color="#E5E5E5"> version</font>

407
00:15:58,610 --> 00:16:05,080
information<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> accessibility</font><font color="#E5E5E5"> engine</font>

408
00:16:00,440 --> 00:16:08,510
itself looking at the code<font color="#E5E5E5"> we see that</font>

409
00:16:05,080 --> 00:16:11,060
within this<font color="#E5E5E5"> call func function we have a</font>

410
00:16:08,510 --> 00:16:12,709
switch statement<font color="#E5E5E5"> which I kind of hid</font>

411
00:16:11,060 --> 00:16:15,410
away<font color="#E5E5E5"> but in this particular case for</font>

412
00:16:12,709 --> 00:16:18,109
<font color="#E5E5E5">system property we have a few strings</font>

413
00:16:15,410 --> 00:16:20,000
that<font color="#E5E5E5"> are guaranteed to be referenced and</font>

414
00:16:18,110 --> 00:16:21,050
this is just quite<font color="#CCCCCC"> fantastic for</font>

415
00:16:20,000 --> 00:16:23,510
whatever reason today<font color="#E5E5E5"> we'd never</font>

416
00:16:21,050 --> 00:16:26,149
<font color="#CCCCCC">modified this and this code</font><font color="#E5E5E5"> base is so</font>

417
00:16:23,510 --> 00:16:29,300
old that ginger allcom<font color="#E5E5E5"> is now I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> a</font>

418
00:16:26,149 --> 00:16:31,970
<font color="#CCCCCC">Polish website for some other completely</font>

419
00:16:29,300 --> 00:16:35,240
different<font color="#CCCCCC"> purpose not software related</font>

420
00:16:31,970 --> 00:16:36,920
<font color="#E5E5E5">at all but by looking for these strings</font>

421
00:16:35,240 --> 00:16:39,170
and then looking<font color="#CCCCCC"> for where one</font>

422
00:16:36,920 --> 00:16:41,300
particular<font color="#E5E5E5"> function in particular uses</font>

423
00:16:39,170 --> 00:16:44,540
them we're able to see<font color="#E5E5E5"> exactly where</font>

424
00:16:41,300 --> 00:16:47,540
<font color="#E5E5E5">call func may be and ends up being this</font>

425
00:16:44,540 --> 00:16:50,329
<font color="#E5E5E5">function which is probably</font><font color="#CCCCCC"> impossible to</font>

426
00:16:47,540 --> 00:16:52,520
read perfectly find them<font color="#CCCCCC"> but it</font>

427
00:16:50,329 --> 00:16:54,829
references vendor<font color="#CCCCCC"> vendor you're a ginger</font>

428
00:16:52,520 --> 00:16:56,360
<font color="#CCCCCC">Alliance and ginger allcom and if we</font>

429
00:16:54,829 --> 00:16:59,180
were to keep going<font color="#E5E5E5"> up we would</font>

430
00:16:56,360 --> 00:17:01,010
eventually see that<font color="#CCCCCC"> e x FF system</font>

431
00:16:59,180 --> 00:17:02,989
property value being<font color="#CCCCCC"> reference</font><font color="#E5E5E5"> I would</font>

432
00:17:01,010 --> 00:17:04,640
<font color="#E5E5E5">have shown that but it ends</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> being</font>

433
00:17:02,990 --> 00:17:06,740
kind<font color="#CCCCCC"> of worthless</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that math is</font>

434
00:17:04,640 --> 00:17:08,990
performed on<font color="#E5E5E5"> it and it doesn't it</font>

435
00:17:06,740 --> 00:17:14,059
<font color="#E5E5E5">doesn't end up</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> x3 be like it is in</font>

436
00:17:08,990 --> 00:17:16,309
<font color="#CCCCCC">these</font><font color="#E5E5E5"> structure itself kind of expanding</font>

437
00:17:14,059 --> 00:17:18,199
on that<font color="#E5E5E5"> and one that is incredibly</font>

438
00:17:16,309 --> 00:17:21,050
useful I've used it<font color="#E5E5E5"> in reader a lot and</font>

439
00:17:18,199 --> 00:17:23,089
in flash is looking for<font color="#E5E5E5"> just data</font>

440
00:17:21,050 --> 00:17:25,099
structures so in the<font color="#CCCCCC"> previous example we</font>

441
00:17:23,089 --> 00:17:26,659
<font color="#E5E5E5">had a pointer to</font><font color="#CCCCCC"> a string followed by</font>

442
00:17:25,099 --> 00:17:28,760
two integers<font color="#CCCCCC"> and those integers</font><font color="#E5E5E5"> were</font>

443
00:17:26,660 --> 00:17:30,500
just enum values but you can expand on

444
00:17:28,760 --> 00:17:32,690
<font color="#CCCCCC">that and</font><font color="#E5E5E5"> look for any array or any</font>

445
00:17:30,500 --> 00:17:36,380
<font color="#E5E5E5">content structure where you have and a</font>

446
00:17:32,690 --> 00:17:38,929
bunch of<font color="#E5E5E5"> static data this</font><font color="#CCCCCC"> also works</font><font color="#E5E5E5"> for</font>

447
00:17:36,380 --> 00:17:41,000
if a function<font color="#E5E5E5"> has static data and is</font>

448
00:17:38,929 --> 00:17:42,080
going<font color="#CCCCCC"> to place it in a data</font><font color="#E5E5E5"> section</font>

449
00:17:41,000 --> 00:17:44,330
because then you can<font color="#E5E5E5"> look for those</font>

450
00:17:42,080 --> 00:17:46,790
values<font color="#CCCCCC"> and more</font><font color="#E5E5E5"> often than not you're</font>

451
00:17:44,330 --> 00:17:48,320
able<font color="#CCCCCC"> to find them</font><font color="#E5E5E5"> sometimes the compiler</font>

452
00:17:46,790 --> 00:17:49,970
will create multiple copies of a table

453
00:17:48,320 --> 00:17:51,350
but<font color="#E5E5E5"> you can still find the references</font>

454
00:17:49,970 --> 00:17:53,809
and<font color="#E5E5E5"> then to kind of</font>

455
00:17:51,350 --> 00:17:55,668
code matching techniques if on<font color="#CCCCCC"> top of</font>

456
00:17:53,809 --> 00:17:58,639
that so in this particular<font color="#E5E5E5"> case</font>

457
00:17:55,669 --> 00:18:01,580
EXO<font color="#CCCCCC"> canoes and enum and token</font><font color="#E5E5E5"> at sign</font>

458
00:17:58,639 --> 00:18:03,590
token D<font color="#E5E5E5"> : token</font><font color="#CCCCCC"> L / N and</font><font color="#E5E5E5"> L bracket</font>

459
00:18:01,580 --> 00:18:05,779
we're all I looked for basically<font color="#E5E5E5"> just</font>

460
00:18:03,590 --> 00:18:07,580
converting those into<font color="#CCCCCC"> little endian V</font>

461
00:18:05,779 --> 00:18:10,669
words and then looking<font color="#CCCCCC"> for the raw hex</font>

462
00:18:07,580 --> 00:18:13,549
string<font color="#E5E5E5"> and ended up finding exactly that</font>

463
00:18:10,669 --> 00:18:15,019
strings that's<font color="#E5E5E5"> B X B</font><font color="#CCCCCC"> five and</font><font color="#E5E5E5"> seven and</font>

464
00:18:13,549 --> 00:18:18,379
<font color="#E5E5E5">now we know exactly</font><font color="#CCCCCC"> where the</font><font color="#E5E5E5"> neighbor</font>

465
00:18:15,019 --> 00:18:21,350
<font color="#E5E5E5">table is using this was able</font><font color="#CCCCCC"> to then</font>

466
00:18:18,380 --> 00:18:22,730
<font color="#E5E5E5">find where some of the</font><font color="#CCCCCC"> utf-8 functions</font>

467
00:18:21,350 --> 00:18:26,509
that<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> be talking</font><font color="#CCCCCC"> about</font>

468
00:18:22,730 --> 00:18:29,779
<font color="#E5E5E5">we're located kind of in the same vein</font>

469
00:18:26,509 --> 00:18:32,720
<font color="#E5E5E5">you can just do looking for straight hex</font>

470
00:18:29,779 --> 00:18:35,629
values<font color="#CCCCCC"> for one</font><font color="#E5E5E5"> of the functions that was</font>

471
00:18:32,720 --> 00:18:38,389
vulnerable<font color="#CCCCCC"> Abdul just looked for DC 0 0</font>

472
00:18:35,629 --> 00:18:40,730
or X<font color="#CCCCCC"> CD 0 0 1 &</font><font color="#E5E5E5"> 2</font><font color="#CCCCCC"> and was able</font><font color="#E5E5E5"> to find</font>

473
00:18:38,389 --> 00:18:42,168
the find and isolate the function but

474
00:18:40,730 --> 00:18:45,950
being able to<font color="#E5E5E5"> look for data structures</font>

475
00:18:42,169 --> 00:18:48,409
themselves<font color="#CCCCCC"> can be incredibly useful one</font>

476
00:18:45,950 --> 00:18:49,789
of the things<font color="#E5E5E5"> I had mentioned</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> not</font>

477
00:18:48,409 --> 00:18:51,440
being able to<font color="#E5E5E5"> build and do a been</font>

478
00:18:49,789 --> 00:18:54,169
difficult that is that you have

479
00:18:51,440 --> 00:18:57,320
<font color="#E5E5E5">preprocessor defines and this is</font>

480
00:18:54,169 --> 00:19:00,049
probably<font color="#CCCCCC"> also</font><font color="#E5E5E5"> not very</font><font color="#CCCCCC"> readable but you</font>

481
00:18:57,320 --> 00:19:02,450
have huge chunks of<font color="#E5E5E5"> code in cell</font><font color="#CCCCCC"> Letran</font>

482
00:19:00,049 --> 00:19:05,090
that are going<font color="#CCCCCC"> to vary based on</font><font color="#E5E5E5"> the</font>

483
00:19:02,450 --> 00:19:07,039
<font color="#E5E5E5">value</font><font color="#CCCCCC"> of these preprocessor values and</font>

484
00:19:05,090 --> 00:19:09,439
in this<font color="#E5E5E5"> particular case you have</font>

485
00:19:07,039 --> 00:19:11,919
basically an entire function<font color="#E5E5E5"> that will</font>

486
00:19:09,440 --> 00:19:14,480
look<font color="#E5E5E5"> very very different</font><font color="#CCCCCC"> based on</font><font color="#E5E5E5"> that</font>

487
00:19:11,919 --> 00:19:16,669
there aren't<font color="#CCCCCC"> that many places</font><font color="#E5E5E5"> where you</font>

488
00:19:14,480 --> 00:19:18,200
<font color="#E5E5E5">can kind of discern what that looks like</font>

489
00:19:16,669 --> 00:19:19,879
outside of<font color="#E5E5E5"> looking at a particular</font>

490
00:19:18,200 --> 00:19:23,899
function and looking for the absence of

491
00:19:19,879 --> 00:19:25,939
or presence of<font color="#E5E5E5"> certain code blocks but</font>

492
00:19:23,899 --> 00:19:29,418
<font color="#E5E5E5">thankfully there are a few places such</font>

493
00:19:25,940 --> 00:19:32,210
as this XSL<font color="#CCCCCC"> off name structure that has</font>

494
00:19:29,419 --> 00:19:34,669
a string that<font color="#CCCCCC"> is only present</font><font color="#E5E5E5"> when this</font>

495
00:19:32,210 --> 00:19:36,740
<font color="#CCCCCC">c t underscore change</font><font color="#E5E5E5"> which is one of</font>

496
00:19:34,669 --> 00:19:39,649
<font color="#E5E5E5">the more prevalent preprocessor defines</font>

497
00:19:36,740 --> 00:19:41,450
<font color="#E5E5E5">is actually defined so by looking for</font>

498
00:19:39,649 --> 00:19:44,870
forward compatible<font color="#CCCCCC"> we're able to see</font>

499
00:19:41,450 --> 00:19:47,720
that<font color="#E5E5E5"> this that in the production builds</font>

500
00:19:44,870 --> 00:19:50,479
of Adobe<font color="#CCCCCC"> Reader</font><font color="#E5E5E5"> they did in fact</font><font color="#CCCCCC"> use C T</font>

501
00:19:47,720 --> 00:19:52,820
underscore change<font color="#E5E5E5"> and on that note I'm</font>

502
00:19:50,480 --> 00:19:54,580
going to hand it<font color="#E5E5E5"> over to dual taking</font>

503
00:19:52,820 --> 00:19:58,360
over books themselves

504
00:19:54,580 --> 00:20:00,790
right<font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> going to be covering</font><font color="#CCCCCC"> a</font>

505
00:19:58,360 --> 00:20:02,379
<font color="#E5E5E5">bunch of bugs</font><font color="#CCCCCC"> here basically the</font>

506
00:20:00,790 --> 00:20:05,740
previous ones that have<font color="#E5E5E5"> been found in</font>

507
00:20:02,380 --> 00:20:08,590
<font color="#E5E5E5">the</font><font color="#CCCCCC"> excess Lae XSLT parser in Adobe</font>

508
00:20:05,740 --> 00:20:09,820
<font color="#E5E5E5">Reader I'm going to go</font><font color="#CCCCCC"> over a bunch</font><font color="#E5E5E5"> of</font>

509
00:20:08,590 --> 00:20:12,490
bugs of different types

510
00:20:09,820 --> 00:20:14,220
I'll also be<font color="#E5E5E5"> covering</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> all bugs the</font>

511
00:20:12,490 --> 00:20:17,530
first two bugs that were found<font color="#E5E5E5"> by</font>

512
00:20:14,220 --> 00:20:20,440
<font color="#CCCCCC">Nicolas Gregoire also known as by caused</font>

513
00:20:17,530 --> 00:20:22,450
by<font color="#E5E5E5"> a</font><font color="#CCCCCC"> guy I won as a heat based buffer</font>

514
00:20:20,440 --> 00:20:26,560
overflow and the other one is a type

515
00:20:22,450 --> 00:20:28,720
confusion<font color="#CCCCCC"> the reason</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> us like going</font>

516
00:20:26,560 --> 00:20:30,669
<font color="#CCCCCC">through these bugs is that it</font><font color="#E5E5E5"> gives</font><font color="#CCCCCC"> it</font>

517
00:20:28,720 --> 00:20:31,990
gives<font color="#CCCCCC"> us like an idea of how Adobe</font>

518
00:20:30,670 --> 00:20:34,530
patches these bugs

519
00:20:31,990 --> 00:20:39,400
basically they<font color="#CCCCCC"> patch these bugs twice</font>

520
00:20:34,530 --> 00:20:40,720
once in 2012 and the and once in 2016<font color="#CCCCCC"> so</font>

521
00:20:39,400 --> 00:20:43,900
<font color="#E5E5E5">basically there was like a four years</font>

522
00:20:40,720 --> 00:20:47,230
gap between these two patches<font color="#E5E5E5"> so it's</font>

523
00:20:43,900 --> 00:20:52,120
kind of interesting<font color="#E5E5E5"> so outside of the</font>

524
00:20:47,230 --> 00:20:55,420
key based<font color="#CCCCCC"> off row</font><font color="#E5E5E5"> flow so Excel elements</font>

525
00:20:52,120 --> 00:20:59,199
in<font color="#CCCCCC"> a sublet on are priced inside a class</font>

526
00:20:55,420 --> 00:21:01,450
called XSL element<font color="#E5E5E5"> inside it has a</font>

527
00:20:59,200 --> 00:21:04,690
method<font color="#CCCCCC"> called execute that contains a</font>

528
00:21:01,450 --> 00:21:07,390
big switch case and parses the elements

529
00:21:04,690 --> 00:21:11,080
based<font color="#E5E5E5"> on the type so the way this works</font>

530
00:21:07,390 --> 00:21:13,180
<font color="#E5E5E5">is that it checks</font><font color="#CCCCCC"> whether each element</font>

531
00:21:11,080 --> 00:21:14,679
has has a name attribute and then what

532
00:21:13,180 --> 00:21:17,910
it<font color="#CCCCCC"> does</font><font color="#E5E5E5"> is it grabs can make the value</font>

533
00:21:14,680 --> 00:21:20,830
<font color="#CCCCCC">and then calculates the length</font><font color="#E5E5E5"> of it</font>

534
00:21:17,910 --> 00:21:22,840
allocates<font color="#E5E5E5"> like a buffer based on that</font>

535
00:21:20,830 --> 00:21:26,379
<font color="#E5E5E5">length and then tries</font><font color="#CCCCCC"> to convert it from</font>

536
00:21:22,840 --> 00:21:28,990
utf-8 utf-16<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is done inside a</font>

537
00:21:26,380 --> 00:21:31,210
function<font color="#E5E5E5"> called is valid and</font><font color="#CCCCCC"> C name</font>

538
00:21:28,990 --> 00:21:34,270
<font color="#E5E5E5">basically as you guys can see I don't</font>

539
00:21:31,210 --> 00:21:35,860
think<font color="#E5E5E5"> you guys can see in the back</font><font color="#CCCCCC"> but</font>

540
00:21:34,270 --> 00:21:38,830
it does the string condition inside

541
00:21:35,860 --> 00:21:42,490
utf-8 sterling and then allocates a

542
00:21:38,830 --> 00:21:47,169
buffer passes it<font color="#CCCCCC"> to a TF 8 3 a</font><font color="#E5E5E5"> 16 for</font>

543
00:21:42,490 --> 00:21:48,700
<font color="#CCCCCC">the conversion</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> went back to the</font>

544
00:21:47,170 --> 00:21:51,010
Letran source code just<font color="#E5E5E5"> to do some</font>

545
00:21:48,700 --> 00:21:53,110
analysis and<font color="#CCCCCC"> we figured</font><font color="#E5E5E5"> out that the</font>

546
00:21:51,010 --> 00:21:55,750
core of this bug was because of the way

547
00:21:53,110 --> 00:21:58,060
the strength<font color="#E5E5E5"> the</font><font color="#CCCCCC"> length of the string</font>

548
00:21:55,750 --> 00:22:01,390
was being calculated<font color="#E5E5E5"> basically inside</font>

549
00:21:58,060 --> 00:22:03,300
<font color="#CCCCCC">utf-8 sterling and the way this works is</font>

550
00:22:01,390 --> 00:22:05,160
<font color="#E5E5E5">that it loops through</font>

551
00:22:03,300 --> 00:22:07,830
through their name<font color="#E5E5E5"> through the string</font>

552
00:22:05,160 --> 00:22:10,830
<font color="#E5E5E5">like bite by bite</font><font color="#CCCCCC"> and sex for the length</font>

553
00:22:07,830 --> 00:22:12,750
of it of each bite<font color="#E5E5E5"> of each character</font>

554
00:22:10,830 --> 00:22:16,139
basically<font color="#E5E5E5"> and it keeps incrementing by</font>

555
00:22:12,750 --> 00:22:17,280
<font color="#E5E5E5">one but in special in special cases when</font>

556
00:22:16,140 --> 00:22:19,170
you have<font color="#CCCCCC"> like Unicode string or</font>

557
00:22:17,280 --> 00:22:21,210
something<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> it doesn't</font><font color="#CCCCCC"> calculate</font>

558
00:22:19,170 --> 00:22:22,620
it actually calculate it<font color="#E5E5E5"> calculates it</font>

559
00:22:21,210 --> 00:22:22,980
but it doesn't<font color="#CCCCCC"> add the length to the</font>

560
00:22:22,620 --> 00:22:24,629
count

561
00:22:22,980 --> 00:22:26,550
it keeps incrementing the count by one

562
00:22:24,630 --> 00:22:29,940
so that<font color="#CCCCCC"> basically leads to a</font>

563
00:22:26,550 --> 00:22:33,149
miscalculated miscalculated length that

564
00:22:29,940 --> 00:22:37,290
length is later used<font color="#E5E5E5"> in allocation and</font>

565
00:22:33,150 --> 00:22:41,840
then it's passed to utf-8 utf-16<font color="#E5E5E5"> where</font>

566
00:22:37,290 --> 00:22:41,840
there's actual hit<font color="#CCCCCC"> baseball</font><font color="#E5E5E5"> also happens</font>

567
00:22:43,580 --> 00:22:51,899
<font color="#E5E5E5">all right so the way</font><font color="#CCCCCC"> we pointed this out</font>

568
00:22:48,540 --> 00:22:54,899
in<font color="#E5E5E5"> adobe basically</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> dll the</font>

569
00:22:51,900 --> 00:22:58,380
<font color="#E5E5E5">compiled dll is</font><font color="#CCCCCC"> by looking for DC zero</font>

570
00:22:54,900 --> 00:23:02,340
<font color="#CCCCCC">zero and if you do that directly in</font>

571
00:22:58,380 --> 00:23:05,220
<font color="#E5E5E5">lndian</font><font color="#CCCCCC"> Sai utf-8 to ATF sixteen</font><font color="#E5E5E5"> so the D</font>

572
00:23:02,340 --> 00:23:07,169
<font color="#E5E5E5">compiled code here basically roughly</font>

573
00:23:05,220 --> 00:23:10,610
matches the sub block<font color="#E5E5E5"> from source code</font>

574
00:23:07,170 --> 00:23:14,370
<font color="#E5E5E5">so</font><font color="#CCCCCC"> adobe didn't really touch that code</font>

575
00:23:10,610 --> 00:23:16,770
they didn't<font color="#CCCCCC"> modify anything</font><font color="#E5E5E5"> and from</font>

576
00:23:14,370 --> 00:23:18,510
utf-8 utf-16<font color="#CCCCCC"> ik just can can grab the</font>

577
00:23:16,770 --> 00:23:21,000
<font color="#E5E5E5">extras and then you can hand up and is</font>

578
00:23:18,510 --> 00:23:23,640
valid<font color="#E5E5E5"> and</font><font color="#CCCCCC"> cname</font><font color="#E5E5E5"> the first function</font>

579
00:23:21,000 --> 00:23:28,980
called inside here and<font color="#CCCCCC"> C name basically</font>

580
00:23:23,640 --> 00:23:31,260
the utf-8<font color="#CCCCCC"> stare length and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

581
00:23:28,980 --> 00:23:32,910
same case it hasn't<font color="#CCCCCC"> been touched so it's</font>

582
00:23:31,260 --> 00:23:36,800
<font color="#E5E5E5">roughly the same code in</font><font color="#CCCCCC"> sublet ROM</font>

583
00:23:32,910 --> 00:23:36,800
<font color="#E5E5E5">which is kind of interesting</font>

584
00:23:37,520 --> 00:23:43,800
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so as of the patch</font><font color="#CCCCCC"> the way they</font>

585
00:23:41,220 --> 00:23:46,050
pass it back in<font color="#CCCCCC"> 22 2012 was kind of</font>

586
00:23:43,800 --> 00:23:47,970
interesting so we grabbed a bunch<font color="#E5E5E5"> of</font>

587
00:23:46,050 --> 00:23:50,610
<font color="#E5E5E5">their elves from previous versions and</font>

588
00:23:47,970 --> 00:23:52,710
<font color="#CCCCCC">Adobe is generous enough to put all</font>

589
00:23:50,610 --> 00:23:55,800
these and the previous<font color="#CCCCCC"> one it is on the</font>

590
00:23:52,710 --> 00:23:58,830
<font color="#CCCCCC">FTP server</font><font color="#E5E5E5"> and we were kind of expecting</font>

591
00:23:55,800 --> 00:24:01,320
<font color="#E5E5E5">to see some changes inside</font><font color="#CCCCCC"> the length</font>

592
00:23:58,830 --> 00:24:03,929
calculation function<font color="#E5E5E5"> but in fact what</font>

593
00:24:01,320 --> 00:24:06,240
they did is they they modified the

594
00:24:03,930 --> 00:24:08,160
conversion function<font color="#E5E5E5"> and they</font><font color="#CCCCCC"> added an</font>

595
00:24:06,240 --> 00:24:11,250
extra<font color="#CCCCCC"> argument to it which is the source</font>

596
00:24:08,160 --> 00:24:13,360
length and then obviously they just use

597
00:24:11,250 --> 00:24:15,429
<font color="#E5E5E5">it to keep</font><font color="#CCCCCC"> track of what's being</font>

598
00:24:13,360 --> 00:24:19,689
<font color="#E5E5E5">keep track of</font><font color="#CCCCCC"> us being written</font><font color="#E5E5E5"> which</font>

599
00:24:15,429 --> 00:24:21,790
didn't actually make<font color="#E5E5E5"> sense so until 2016</font>

600
00:24:19,690 --> 00:24:24,130
when we want to<font color="#E5E5E5"> be receive the like a</font>

601
00:24:21,790 --> 00:24:27,220
bug from<font color="#CCCCCC"> the same researcher Nicholas a</font>

602
00:24:24,130 --> 00:24:29,679
<font color="#E5E5E5">guy</font><font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> Nicholas Gregoire</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> submitted</font>

603
00:24:27,220 --> 00:24:33,730
the<font color="#E5E5E5"> bug that we trigger the same the</font>

604
00:24:29,679 --> 00:24:36,309
same exact class so we<font color="#E5E5E5"> submit this book</font>

605
00:24:33,730 --> 00:24:39,940
to Adobe and then got passed in January

606
00:24:36,309 --> 00:24:41,740
20 2017 like a<font color="#E5E5E5"> couple weeks ago we dip</font>

607
00:24:39,940 --> 00:24:44,200
the bug and this time they<font color="#CCCCCC"> actually did</font>

608
00:24:41,740 --> 00:24:48,460
it right so they modified the the<font color="#E5E5E5"> utf-8</font>

609
00:24:44,200 --> 00:24:51,190
single<font color="#CCCCCC"> car length</font><font color="#E5E5E5"> no excuse me</font>

610
00:24:48,460 --> 00:24:53,280
<font color="#E5E5E5">they actually modify the</font><font color="#CCCCCC"> TF still length</font>

611
00:24:51,190 --> 00:24:55,630
<font color="#E5E5E5">function that does the calculation and</font>

612
00:24:53,280 --> 00:24:58,059
in<font color="#E5E5E5"> this specific case you guys can see</font>

613
00:24:55,630 --> 00:25:01,570
that<font color="#E5E5E5"> it calls utf-8 single car</font><font color="#CCCCCC"> length</font>

614
00:24:58,059 --> 00:25:02,830
<font color="#CCCCCC">just to calculate</font><font color="#E5E5E5"> the actual character</font>

615
00:25:01,570 --> 00:25:05,168
length and then they added<font color="#E5E5E5"> to the</font>

616
00:25:02,830 --> 00:25:07,178
counting<font color="#CCCCCC"> such as incrementing the count</font>

617
00:25:05,169 --> 00:25:12,400
by one so basically<font color="#E5E5E5"> they got</font><font color="#CCCCCC"> it right</font>

618
00:25:07,179 --> 00:25:13,210
like four years<font color="#E5E5E5"> later</font><font color="#CCCCCC"> alright so the</font>

619
00:25:12,400 --> 00:25:15,640
<font color="#CCCCCC">next book that I'm going to</font><font color="#E5E5E5"> be</font>

620
00:25:13,210 --> 00:25:19,200
discussing is the<font color="#E5E5E5"> second bug that was</font>

621
00:25:15,640 --> 00:25:22,230
discovered by<font color="#CCCCCC"> Nicholas back in 2012</font><font color="#E5E5E5"> and</font>

622
00:25:19,200 --> 00:25:24,910
<font color="#CCCCCC">basically this is a type confusion bug</font>

623
00:25:22,230 --> 00:25:27,990
<font color="#E5E5E5">he specifically calls</font><font color="#CCCCCC"> describe</font><font color="#E5E5E5"> it as a</font>

624
00:25:24,910 --> 00:25:30,760
sexy top confusion<font color="#CCCCCC"> just kind</font><font color="#E5E5E5"> of cool</font>

625
00:25:27,990 --> 00:25:35,260
<font color="#CCCCCC">alright so the root cause of this bug is</font>

626
00:25:30,760 --> 00:25:37,419
in an expert function called<font color="#E5E5E5"> lang so the</font>

627
00:25:35,260 --> 00:25:40,629
way that<font color="#CCCCCC"> the way line works basically</font>

628
00:25:37,419 --> 00:25:42,340
just first<font color="#E5E5E5"> of all it checks the number</font>

629
00:25:40,630 --> 00:25:45,880
<font color="#CCCCCC">of</font><font color="#E5E5E5"> arguments being passed to it</font><font color="#CCCCCC"> it</font>

630
00:25:42,340 --> 00:25:49,299
<font color="#E5E5E5">checks whether it's</font><font color="#CCCCCC"> sex</font><font color="#E5E5E5"> the type of the</font>

631
00:25:45,880 --> 00:25:51,250
argument<font color="#E5E5E5"> in case that Lang is being</font>

632
00:25:49,299 --> 00:25:55,120
executed against the<font color="#CCCCCC"> note set what it</font>

633
00:25:51,250 --> 00:25:57,460
does is it tries<font color="#E5E5E5"> to convert nodes to two</font>

634
00:25:55,120 --> 00:26:01,178
elements and that's being<font color="#E5E5E5"> done inside a</font>

635
00:25:57,460 --> 00:26:03,549
macro<font color="#CCCCCC"> called</font><font color="#E5E5E5"> to e so to be specifically</font>

636
00:26:01,179 --> 00:26:06,520
interesting as it<font color="#E5E5E5"> uses another another</font>

637
00:26:03,549 --> 00:26:08,860
macro called cast<font color="#E5E5E5"> and gases is an</font>

638
00:26:06,520 --> 00:26:10,510
<font color="#E5E5E5">interesting case as basically a bit</font>

639
00:26:08,860 --> 00:26:14,229
called<font color="#E5E5E5"> dynamic cast but it does it in</font>

640
00:26:10,510 --> 00:26:16,090
<font color="#E5E5E5">the debug mode</font><font color="#CCCCCC"> if it in</font><font color="#E5E5E5"> production it</font>

641
00:26:14,230 --> 00:26:17,770
just does<font color="#E5E5E5"> it this like the classic C</font>

642
00:26:16,090 --> 00:26:21,389
style and<font color="#E5E5E5"> that's basically what causes</font>

643
00:26:17,770 --> 00:26:21,389
the whole type confusion issue

644
00:26:23,160 --> 00:26:28,030
so pointing this out in<font color="#CCCCCC"> Adobe is pretty</font>

645
00:26:26,470 --> 00:26:30,880
<font color="#E5E5E5">much a</font><font color="#CCCCCC"> straightforward goal we have to</font>

646
00:26:28,030 --> 00:26:32,379
do this like<font color="#CCCCCC"> run</font><font color="#E5E5E5"> a search on</font><font color="#CCCCCC"> lang</font>

647
00:26:30,880 --> 00:26:35,110
and then we're<font color="#E5E5E5"> going to end up with</font>

648
00:26:32,380 --> 00:26:37,150
three<font color="#E5E5E5"> hits and it's pretty much trivial</font>

649
00:26:35,110 --> 00:26:38,740
to to find<font color="#E5E5E5"> the right one</font><font color="#CCCCCC"> so what the</font>

650
00:26:37,150 --> 00:26:41,679
right one<font color="#CCCCCC"> is going to land you inside a</font>

651
00:26:38,740 --> 00:26:46,140
<font color="#E5E5E5">function with a huge switch case this is</font>

652
00:26:41,679 --> 00:26:46,140
this is not<font color="#E5E5E5"> a problem pretty much easy</font>

653
00:26:46,770 --> 00:26:51,129
so that's it's<font color="#E5E5E5"> the same case that</font>

654
00:26:49,179 --> 00:26:54,700
<font color="#E5E5E5">happened with the</font><font color="#CCCCCC"> previous one basically</font>

655
00:26:51,130 --> 00:26:58,840
<font color="#CCCCCC">nicolas submitted a park in 2016 that</font>

656
00:26:54,700 --> 00:27:00,280
<font color="#CCCCCC">triggered this walk again and again we</font>

657
00:26:58,840 --> 00:27:01,780
<font color="#E5E5E5">went back with the old dll's and we</font>

658
00:27:00,280 --> 00:27:03,668
started this<font color="#E5E5E5"> thing just to see what</font>

659
00:27:01,780 --> 00:27:05,770
happened back<font color="#E5E5E5"> in 2012 and basically what</font>

660
00:27:03,669 --> 00:27:07,630
they did<font color="#CCCCCC"> is they just make sure</font><font color="#E5E5E5"> that a</font>

661
00:27:05,770 --> 00:27:09,820
<font color="#E5E5E5">certain</font><font color="#CCCCCC"> type of node is being casted</font>

662
00:27:07,630 --> 00:27:11,770
<font color="#CCCCCC">right</font><font color="#E5E5E5"> but you can you can</font><font color="#CCCCCC"> figure</font>

663
00:27:09,820 --> 00:27:13,210
<font color="#E5E5E5">retrigger the bug again by giving it</font>

664
00:27:11,770 --> 00:27:15,610
like<font color="#E5E5E5"> other types of nodes and</font><font color="#CCCCCC"> that's</font>

665
00:27:13,210 --> 00:27:17,770
exactly what<font color="#E5E5E5"> Nicholas did basically he</font>

666
00:27:15,610 --> 00:27:20,020
gave it a command<font color="#E5E5E5"> mode I guess and in</font>

667
00:27:17,770 --> 00:27:23,679
some other of the type of<font color="#CCCCCC"> text node and</font>

668
00:27:20,020 --> 00:27:26,889
he was he<font color="#E5E5E5"> was able to trigger it</font><font color="#CCCCCC"> this is</font>

669
00:27:23,679 --> 00:27:28,390
the diff of the January 2017 patch and

670
00:27:26,890 --> 00:27:32,230
basically they did<font color="#E5E5E5"> it</font><font color="#CCCCCC"> right this time</font>

671
00:27:28,390 --> 00:27:34,390
and they called a<font color="#E5E5E5"> function called</font><font color="#CCCCCC"> RIT</font>

672
00:27:32,230 --> 00:27:41,890
dynamic<font color="#CCCCCC"> tasks to do that</font><font color="#E5E5E5"> casting in a</font>

673
00:27:34,390 --> 00:27:44,740
<font color="#CCCCCC">the right</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so I'm going to be</font>

674
00:27:41,890 --> 00:27:46,570
talking<font color="#CCCCCC"> about some modern bugs basically</font>

675
00:27:44,740 --> 00:27:48,490
<font color="#E5E5E5">this one is an outer boundary that's one</font>

676
00:27:46,570 --> 00:27:51,460
of my favorite it's really easy<font color="#E5E5E5"> to spot</font>

677
00:27:48,490 --> 00:27:53,650
in source code at words found by<font color="#E5E5E5"> one of</font>

678
00:27:51,460 --> 00:27:59,260
our<font color="#E5E5E5"> researchers</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> Whaley</font><font color="#CCCCCC"> and he's</font>

679
00:27:53,650 --> 00:28:01,809
based<font color="#E5E5E5"> off Singapore</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so this</font>

680
00:27:59,260 --> 00:28:03,760
<font color="#E5E5E5">one is in</font><font color="#CCCCCC"> the way</font>

681
00:28:01,809 --> 00:28:06,840
expat functions are<font color="#E5E5E5"> being handled inside</font>

682
00:28:03,760 --> 00:28:11,559
<font color="#CCCCCC">a sublet</font><font color="#E5E5E5"> Ron basically the way it</font><font color="#CCCCCC"> works</font>

683
00:28:06,840 --> 00:28:13,750
when like the expat functions in<font color="#E5E5E5"> sublet</font>

684
00:28:11,559 --> 00:28:16,690
on they check for<font color="#E5E5E5"> the arguments 1st</font>

685
00:28:13,750 --> 00:28:19,750
argument types and then it references

686
00:28:16,690 --> 00:28:21,610
these<font color="#E5E5E5"> these arguments and all</font><font color="#CCCCCC"> the checks</font>

687
00:28:19,750 --> 00:28:23,440
are<font color="#CCCCCC"> being done</font><font color="#E5E5E5"> inside macros</font><font color="#CCCCCC"> so for</font>

688
00:28:21,610 --> 00:28:25,209
example check<font color="#E5E5E5"> args count basically</font>

689
00:28:23,440 --> 00:28:26,950
checks if<font color="#E5E5E5"> the number of</font><font color="#CCCCCC"> arguments is</font>

690
00:28:25,210 --> 00:28:31,480
right if not<font color="#E5E5E5"> then it's going to be</font>

691
00:28:26,950 --> 00:28:33,820
allowed physically so if you check the

692
00:28:31,480 --> 00:28:34,870
pattern<font color="#E5E5E5"> inside a function called</font><font color="#CCCCCC"> call</font>

693
00:28:33,820 --> 00:28:36,700
func the implements or

694
00:28:34,870 --> 00:28:38,919
<font color="#E5E5E5">expert functions you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> again notice</font>

695
00:28:36,700 --> 00:28:41,520
<font color="#E5E5E5">that what happens is they do</font><font color="#CCCCCC"> take check</font>

696
00:28:38,920 --> 00:28:44,080
args<font color="#E5E5E5"> and the reference of these arcs</font>

697
00:28:41,520 --> 00:28:46,330
<font color="#CCCCCC">only in one case which is a substring</font>

698
00:28:44,080 --> 00:28:47,919
afternoon substring before<font color="#E5E5E5"> the reference</font>

699
00:28:46,330 --> 00:28:50,169
darks<font color="#E5E5E5"> and then they check</font><font color="#CCCCCC"> for the args</font>

700
00:28:47,920 --> 00:28:59,320
<font color="#E5E5E5">and that's exactly happened here and</font>

701
00:28:50,170 --> 00:29:02,320
this caused that upon grid right<font color="#E5E5E5"> so it's</font>

702
00:28:59,320 --> 00:29:04,780
<font color="#E5E5E5">not that</font><font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> spot this one</font><font color="#CCCCCC"> basically</font>

703
00:29:02,320 --> 00:29:07,450
this<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> the function that contains</font>

704
00:29:04,780 --> 00:29:10,510
<font color="#E5E5E5">the whole switch case that implements</font>

705
00:29:07,450 --> 00:29:12,190
all these XPath functions<font color="#CCCCCC"> but you can</font>

706
00:29:10,510 --> 00:29:15,640
use one of the techniques that we did I

707
00:29:12,190 --> 00:29:17,050
described before<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is basically just</font>

708
00:29:15,640 --> 00:29:19,120
<font color="#E5E5E5">look for rank and then you're gonna</font>

709
00:29:17,050 --> 00:29:21,309
you're going to be<font color="#CCCCCC"> able to just land</font>

710
00:29:19,120 --> 00:29:23,949
inside<font color="#CCCCCC"> call funk and from there you</font><font color="#E5E5E5"> can</font>

711
00:29:21,309 --> 00:29:26,740
calculate calculated<font color="#CCCCCC"> axe the case</font><font color="#E5E5E5"> number</font>

712
00:29:23,950 --> 00:29:29,650
<font color="#E5E5E5">and then you can learn from we can land</font>

713
00:29:26,740 --> 00:29:31,059
<font color="#E5E5E5">in substring before and after</font><font color="#CCCCCC"> by the</font><font color="#E5E5E5"> way</font>

714
00:29:29,650 --> 00:29:33,600
both are handled inside<font color="#E5E5E5"> the same switch</font>

715
00:29:31,059 --> 00:29:36,399
case so it's all good

716
00:29:33,600 --> 00:29:38,500
so as for<font color="#E5E5E5"> the patch I think you guys</font>

717
00:29:36,400 --> 00:29:42,460
like probably<font color="#E5E5E5"> figure it out they just</font>

718
00:29:38,500 --> 00:29:43,900
<font color="#E5E5E5">moved</font><font color="#CCCCCC"> the dogs check before</font><font color="#E5E5E5"> referencing</font>

719
00:29:42,460 --> 00:29:50,710
the actual<font color="#CCCCCC"> arc so it's kind of</font>

720
00:29:43,900 --> 00:29:52,059
straightforward<font color="#CCCCCC"> alright so then next</font>

721
00:29:50,710 --> 00:29:54,490
<font color="#E5E5E5">month I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be talking</font><font color="#CCCCCC"> about this</font>

722
00:29:52,059 --> 00:29:57,090
<font color="#E5E5E5">a little bit more complicated than</font><font color="#CCCCCC"> the</font>

723
00:29:54,490 --> 00:30:01,000
<font color="#CCCCCC">other</font><font color="#E5E5E5"> one it's an out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> bond right and</font>

724
00:29:57,090 --> 00:30:04,510
it has been found<font color="#E5E5E5"> by really - so this</font>

725
00:30:01,000 --> 00:30:07,179
one basically<font color="#CCCCCC"> affects like how lists are</font>

726
00:30:04,510 --> 00:30:09,300
being implemented inside<font color="#CCCCCC"> sublet Ron</font><font color="#E5E5E5"> so</font>

727
00:30:07,179 --> 00:30:12,580
<font color="#CCCCCC">subwoofer implements the list object and</font>

728
00:30:09,300 --> 00:30:15,928
they're just basic structure of<font color="#E5E5E5"> ordered</font>

729
00:30:12,580 --> 00:30:18,939
<font color="#E5E5E5">lists according to what they they say</font>

730
00:30:15,929 --> 00:30:20,650
anyways so two<font color="#E5E5E5"> things we have</font><font color="#CCCCCC"> to we have</font>

731
00:30:18,940 --> 00:30:22,600
to notice<font color="#CCCCCC"> or we have to study about this</font>

732
00:30:20,650 --> 00:30:27,690
list object which is<font color="#E5E5E5"> the constructor and</font>

733
00:30:22,600 --> 00:30:30,219
that<font color="#CCCCCC"> pend method so in the constructor a</font>

734
00:30:27,690 --> 00:30:33,429
variable called original block size is

735
00:30:30,220 --> 00:30:35,770
being set to<font color="#CCCCCC"> 2 to the</font><font color="#E5E5E5"> power log block</font>

736
00:30:33,429 --> 00:30:39,490
size and there's no check against that

737
00:30:35,770 --> 00:30:43,780
value<font color="#E5E5E5"> whatsoever in append specifically</font>

738
00:30:39,490 --> 00:30:45,730
that value is used in a loop and that

739
00:30:43,780 --> 00:30:46,520
<font color="#E5E5E5">value is used in an allocation of a</font>

740
00:30:45,730 --> 00:30:48,920
buffer and

741
00:30:46,520 --> 00:30:51,710
and a value<font color="#CCCCCC"> a value</font><font color="#E5E5E5"> is being appended to</font>

742
00:30:48,920 --> 00:30:54,050
that to<font color="#CCCCCC"> that specific block and then I</font>

743
00:30:51,710 --> 00:30:56,360
think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it is that if someone</font>

744
00:30:54,050 --> 00:30:58,370
controls that that size<font color="#E5E5E5"> that length then</font>

745
00:30:56,360 --> 00:31:00,610
they<font color="#CCCCCC"> configured some kind of</font><font color="#E5E5E5"> entity</font>

746
00:30:58,370 --> 00:31:04,790
<font color="#E5E5E5">rapid eventually allocating a very small</font>

747
00:31:00,610 --> 00:31:10,429
buffer and then writing out<font color="#E5E5E5"> of</font><font color="#CCCCCC"> onto that</font>

748
00:31:04,790 --> 00:31:12,050
buffer to that object<font color="#CCCCCC"> so this is</font>

749
00:31:10,430 --> 00:31:15,560
<font color="#E5E5E5">specifically what happened inside create</font>

750
00:31:12,050 --> 00:31:17,960
context basically all the the expat

751
00:31:15,560 --> 00:31:21,200
expat expressions are handled inside

752
00:31:17,960 --> 00:31:23,330
<font color="#E5E5E5">that create context function so first it</font>

753
00:31:21,200 --> 00:31:25,250
defines a valise variable called called

754
00:31:23,330 --> 00:31:27,639
reached<font color="#E5E5E5"> and it's set to the predator</font>

755
00:31:25,250 --> 00:31:30,260
count<font color="#E5E5E5"> predicates count so basically</font>

756
00:31:27,640 --> 00:31:33,410
predicates are things that<font color="#E5E5E5"> the user can</font>

757
00:31:30,260 --> 00:31:35,180
control inside XPath expressions so in

758
00:31:33,410 --> 00:31:38,870
this case the predicate is controlled by

759
00:31:35,180 --> 00:31:42,050
the user<font color="#E5E5E5"> and later</font><font color="#CCCCCC"> there's a call to</font>

760
00:31:38,870 --> 00:31:44,840
reach that append<font color="#E5E5E5"> 0 so basically if if I</font>

761
00:31:42,050 --> 00:31:47,389
use<font color="#E5E5E5"> it defines a certain number</font><font color="#CCCCCC"> of fats</font>

762
00:31:44,840 --> 00:31:51,050
counting he will be able<font color="#CCCCCC"> to figure</font><font color="#E5E5E5"> I can</font>

763
00:31:47,390 --> 00:31:53,510
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the wrap which is then be passed that</font>

764
00:31:51,050 --> 00:31:58,090
the values gonna<font color="#CCCCCC"> be</font><font color="#E5E5E5"> passed</font><font color="#CCCCCC"> on allocation</font>

765
00:31:53,510 --> 00:31:58,090
and then<font color="#CCCCCC"> will</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to go out of</font><font color="#CCCCCC"> bound</font>

766
00:31:59,770 --> 00:32:05,930
<font color="#CCCCCC">alright so pinpointing this one is I do</font>

767
00:32:03,170 --> 00:32:07,850
<font color="#CCCCCC">B is not really straightforward first we</font>

768
00:32:05,930 --> 00:32:10,340
have to find create context and from

769
00:32:07,850 --> 00:32:13,250
there we will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to find create LT</font>

770
00:32:10,340 --> 00:32:15,709
context<font color="#CCCCCC"> level that function calls a</font>

771
00:32:13,250 --> 00:32:17,900
function twice<font color="#E5E5E5"> I called I call that this</font>

772
00:32:15,710 --> 00:32:19,040
constructor and if you de compile it

773
00:32:17,900 --> 00:32:20,930
you're going to see<font color="#E5E5E5"> exactly that it</font>

774
00:32:19,040 --> 00:32:22,460
matches the<font color="#CCCCCC"> sub block form code and</font>

775
00:32:20,930 --> 00:32:29,390
nothing nothing<font color="#E5E5E5"> has been changed there</font>

776
00:32:22,460 --> 00:32:34,250
<font color="#CCCCCC">too so the next</font><font color="#E5E5E5"> one so that we can check</font>

777
00:32:29,390 --> 00:32:36,110
which<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> depend basically</font><font color="#CCCCCC"> adobe</font>

778
00:32:34,250 --> 00:32:38,420
just<font color="#CCCCCC"> copy-paste the same thing they</font>

779
00:32:36,110 --> 00:32:40,879
didn't use they didn't modify any of<font color="#E5E5E5"> the</font>

780
00:32:38,420 --> 00:32:42,530
code and as you guys can see<font color="#E5E5E5"> that does</font>

781
00:32:40,880 --> 00:32:44,630
the same thing grabs that original block

782
00:32:42,530 --> 00:32:47,920
size use it in an allocation<font color="#E5E5E5"> and then</font>

783
00:32:44,630 --> 00:32:47,920
writes that to that block

784
00:32:51,050 --> 00:32:56,399
<font color="#E5E5E5">all right as for the patch</font><font color="#CCCCCC"> I don't pass</font>

785
00:32:55,440 --> 00:32:59,040
it in a really interesting way

786
00:32:56,400 --> 00:33:01,440
<font color="#CCCCCC">personally I was I was expecting</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> to</font>

787
00:32:59,040 --> 00:33:03,659
do some some checks on the other

788
00:33:01,440 --> 00:33:05,970
valuable initially<font color="#E5E5E5"> but what they did is</font>

789
00:33:03,660 --> 00:33:08,400
<font color="#CCCCCC">they</font><font color="#E5E5E5"> did they implemented some checks</font>

790
00:33:05,970 --> 00:33:10,380
inside<font color="#E5E5E5"> that</font><font color="#CCCCCC"> end function</font><font color="#E5E5E5"> so they make</font>

791
00:33:08,400 --> 00:33:13,170
<font color="#E5E5E5">sure that the value is in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> certain</font>

792
00:33:10,380 --> 00:33:14,730
range<font color="#CCCCCC"> if not then it's going</font><font color="#E5E5E5"> to be set</font>

793
00:33:13,170 --> 00:33:17,640
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> negative value</font><font color="#CCCCCC"> and then the</font>

794
00:33:14,730 --> 00:33:20,010
allocation is<font color="#CCCCCC"> going to fail</font><font color="#E5E5E5"> so basically</font>

795
00:33:17,640 --> 00:33:21,930
the check is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> check and decide the</font>

796
00:33:20,010 --> 00:33:25,100
length is greater than<font color="#CCCCCC"> four zero to zero</font>

797
00:33:21,930 --> 00:33:28,830
<font color="#E5E5E5">or is the negative</font><font color="#CCCCCC"> value if that check</font>

798
00:33:25,100 --> 00:33:30,810
succeeds then fine if it fails then<font color="#E5E5E5"> it's</font>

799
00:33:28,830 --> 00:33:38,580
<font color="#E5E5E5">going to be set</font><font color="#CCCCCC"> to minus one</font><font color="#E5E5E5"> and Dan's</font>

800
00:33:30,810 --> 00:33:41,010
allocation just fail so the last part

801
00:33:38,580 --> 00:33:43,560
<font color="#E5E5E5">I'm going to be covering is a double</font>

802
00:33:41,010 --> 00:33:46,980
<font color="#E5E5E5">free and this one was found by</font><font color="#CCCCCC"> Whaley</font>

803
00:33:43,560 --> 00:33:48,720
<font color="#CCCCCC">too interestingly Nicholas found this</font>

804
00:33:46,980 --> 00:33:49,920
book<font color="#CCCCCC"> too he submitted it to us but</font><font color="#E5E5E5"> we</font>

805
00:33:48,720 --> 00:33:54,300
had to reject<font color="#E5E5E5"> it</font><font color="#CCCCCC"> because there was a</font>

806
00:33:49,920 --> 00:33:56,520
duplicate submission so insights of

807
00:33:54,300 --> 00:33:59,159
later<font color="#CCCCCC"> on they implement something called</font>

808
00:33:56,520 --> 00:34:00,750
the guarded pointers and basically these

809
00:33:59,160 --> 00:34:02,940
these are pointers that<font color="#E5E5E5"> they allocate</font>

810
00:34:00,750 --> 00:34:04,920
themselves automatically<font color="#E5E5E5"> on exit or when</font>

811
00:34:02,940 --> 00:34:06,870
something out<font color="#CCCCCC"> of bound</font><font color="#E5E5E5"> out-of-band</font>

812
00:34:04,920 --> 00:34:08,790
happens like an error is triggered

813
00:34:06,870 --> 00:34:10,259
anything like that<font color="#E5E5E5"> so what's interesting</font>

814
00:34:08,790 --> 00:34:12,960
<font color="#E5E5E5">about the implementation</font><font color="#CCCCCC"> is the</font>

815
00:34:10,260 --> 00:34:15,480
assignment<font color="#E5E5E5"> operator which which can</font>

816
00:34:12,960 --> 00:34:19,380
<font color="#E5E5E5">which returns a uh dull pointer so</font><font color="#CCCCCC"> there</font>

817
00:34:15,480 --> 00:34:21,149
<font color="#CCCCCC">is there's no</font><font color="#E5E5E5"> there's you can they</font>

818
00:34:19,380 --> 00:34:23,580
cannot<font color="#E5E5E5"> actually track these or there's</font>

819
00:34:21,149 --> 00:34:25,850
no cut like there's no counter for these

820
00:34:23,580 --> 00:34:29,668
or reference counting as we call it<font color="#CCCCCC"> so</font>

821
00:34:25,850 --> 00:34:31,799
<font color="#CCCCCC">in certain cases if if you have</font>

822
00:34:29,668 --> 00:34:33,540
reference to<font color="#E5E5E5"> that to that tota a GP</font>

823
00:34:31,800 --> 00:34:35,310
inside a function<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> no way that</font>

824
00:34:33,540 --> 00:34:37,739
<font color="#CCCCCC">the function can get into the lifetime</font>

825
00:34:35,310 --> 00:34:40,320
<font color="#CCCCCC">of this of these pointers so basically</font>

826
00:34:37,739 --> 00:34:41,819
if an error is triggered then the first

827
00:34:40,320 --> 00:34:43,050
point is going<font color="#E5E5E5"> to be freed and then the</font>

828
00:34:41,820 --> 00:34:45,470
reference<font color="#E5E5E5"> grab is freedom then you're</font>

829
00:34:43,050 --> 00:34:48,030
going<font color="#E5E5E5"> to end up in a bad</font><font color="#CCCCCC"> situation</font>

830
00:34:45,469 --> 00:34:52,290
so this<font color="#E5E5E5"> specifically happened inside a</font>

831
00:34:48,030 --> 00:34:56,820
<font color="#CCCCCC">XF filter case</font><font color="#E5E5E5"> okay this is really bad</font>

832
00:34:52,290 --> 00:34:58,950
so in the end there's right here<font color="#CCCCCC"> there</font>

833
00:34:56,820 --> 00:35:00,630
<font color="#CCCCCC">is a filtered see</font><font color="#E5E5E5"> GP pointer which is</font>

834
00:34:58,950 --> 00:35:03,210
assigned<font color="#E5E5E5"> to you see</font>

835
00:35:00,630 --> 00:35:04,710
<font color="#CCCCCC">for the set to</font><font color="#E5E5E5"> you see and basically</font>

836
00:35:03,210 --> 00:35:07,320
you're gonna<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can end up with</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> row</font>

837
00:35:04,710 --> 00:35:10,380
pointed<font color="#E5E5E5"> inside so let's see when you're</font>

838
00:35:07,320 --> 00:35:12,480
<font color="#E5E5E5">dealing with XPath functions you can</font>

839
00:35:10,380 --> 00:35:14,430
force it force it force it<font color="#E5E5E5"> to trigger an</font>

840
00:35:12,480 --> 00:35:16,320
error by calling a fake function and

841
00:35:14,430 --> 00:35:20,040
that's<font color="#E5E5E5"> going to force these GP pointers</font>

842
00:35:16,320 --> 00:35:21,900
to deallocate or to free themselves<font color="#CCCCCC"> so</font>

843
00:35:20,040 --> 00:35:25,529
<font color="#E5E5E5">you can end up with with new</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> being</font>

844
00:35:21,900 --> 00:35:27,360
freed and then filtered C to be free<font color="#CCCCCC"> too</font>

845
00:35:25,530 --> 00:35:31,470
so you<font color="#E5E5E5"> can end up in a double</font><font color="#CCCCCC"> free</font>

846
00:35:27,360 --> 00:35:33,890
situation here so<font color="#CCCCCC"> I don't be implemented</font>

847
00:35:31,470 --> 00:35:35,730
this<font color="#CCCCCC"> in a</font><font color="#E5E5E5"> really interesting way</font>

848
00:35:33,890 --> 00:35:39,810
basically as you guys can see it just

849
00:35:35,730 --> 00:35:43,140
retrieves the reference<font color="#E5E5E5"> and then stores</font>

850
00:35:39,810 --> 00:35:45,540
it another local variable<font color="#E5E5E5"> later in code</font>

851
00:35:43,140 --> 00:35:47,879
<font color="#E5E5E5">it just grabs one reference and then</font>

852
00:35:45,540 --> 00:35:49,890
deletes it and then grabs the next the

853
00:35:47,880 --> 00:35:51,960
other variable and<font color="#E5E5E5"> then deleted</font><font color="#CCCCCC"> too and</font>

854
00:35:49,890 --> 00:35:59,609
that's how and what was<font color="#E5E5E5"> triggered</font><font color="#CCCCCC"> by</font>

855
00:35:51,960 --> 00:36:00,870
Adobe so as for<font color="#E5E5E5"> the patch they they</font>

856
00:35:59,610 --> 00:36:03,120
<font color="#CCCCCC">patch it in a really interesting way too</font>

857
00:36:00,870 --> 00:36:05,490
which is basically they remove the code

858
00:36:03,120 --> 00:36:08,400
responsible for deleting<font color="#CCCCCC"> then the second</font>

859
00:36:05,490 --> 00:36:09,870
reference<font color="#E5E5E5"> but you still have a reference</font>

860
00:36:08,400 --> 00:36:12,510
<font color="#E5E5E5">in the stack valuable so if someone</font>

861
00:36:09,870 --> 00:36:14,730
<font color="#CCCCCC">actually was able to to force that</font>

862
00:36:12,510 --> 00:36:16,740
reference<font color="#E5E5E5"> to</font><font color="#CCCCCC"> deallocate</font><font color="#E5E5E5"> again then</font>

863
00:36:14,730 --> 00:36:18,990
you're going to<font color="#E5E5E5"> be in a difficult</font>

864
00:36:16,740 --> 00:36:21,540
<font color="#E5E5E5">situation</font><font color="#CCCCCC"> so I'm going to</font><font color="#E5E5E5"> give it</font><font color="#CCCCCC"> to</font>

865
00:36:18,990 --> 00:36:27,890
turn to Brian now<font color="#E5E5E5"> so he's gonna he can</font>

866
00:36:21,540 --> 00:36:30,540
conclude all this<font color="#E5E5E5"> wrap it up</font><font color="#CCCCCC"> alright so</font>

867
00:36:27,890 --> 00:36:32,279
what why<font color="#E5E5E5"> is all this interesting the</font>

868
00:36:30,540 --> 00:36:34,440
thing is instead of<font color="#E5E5E5"> having</font><font color="#CCCCCC"> to actually</font>

869
00:36:32,280 --> 00:36:36,510
<font color="#E5E5E5">audit the binary you can go directly</font><font color="#CCCCCC"> to</font>

870
00:36:34,440 --> 00:36:39,000
<font color="#E5E5E5">the source and look for</font><font color="#CCCCCC"> vulnerabilities</font>

871
00:36:36,510 --> 00:36:39,630
and find vulnerabilities in a lot easier

872
00:36:39,000 --> 00:36:41,520
way

873
00:36:39,630 --> 00:36:43,230
so<font color="#E5E5E5"> stablish ron has been around for a</font>

874
00:36:41,520 --> 00:36:44,820
long<font color="#CCCCCC"> time and one of the things that we</font>

875
00:36:43,230 --> 00:36:47,930
actually<font color="#CCCCCC"> learned by looking at it</font><font color="#E5E5E5"> I</font>

876
00:36:44,820 --> 00:36:51,210
think<font color="#E5E5E5"> we look back to</font><font color="#CCCCCC"> Adobe Reader 9</font>

877
00:36:47,930 --> 00:36:54,480
yeah yeah so<font color="#CCCCCC"> Bill did some analysis</font>

878
00:36:51,210 --> 00:36:56,850
where he looked at the<font color="#CCCCCC"> dll that was</font>

879
00:36:54,480 --> 00:36:59,130
containing the<font color="#CCCCCC"> XSLT engine looked back</font>

880
00:36:56,850 --> 00:37:00,960
every single release of Adobe<font color="#CCCCCC"> Reader</font>

881
00:36:59,130 --> 00:37:03,000
since<font color="#E5E5E5"> said there we read or nine came</font>

882
00:37:00,960 --> 00:37:05,130
out and they really<font color="#CCCCCC"> only implemented</font>

883
00:37:03,000 --> 00:37:07,290
security fixes<font color="#E5E5E5"> in every one of those</font>

884
00:37:05,130 --> 00:37:09,300
updates and in<font color="#E5E5E5"> white paper that will</font>

885
00:37:07,290 --> 00:37:12,040
release<font color="#E5E5E5"> in the coming months we'll go</font>

886
00:37:09,300 --> 00:37:13,450
over basically<font color="#E5E5E5"> every single security fix</font>

887
00:37:12,040 --> 00:37:15,970
<font color="#E5E5E5">that they've implemented inside of this</font>

888
00:37:13,450 --> 00:37:17,649
engine<font color="#E5E5E5"> over the years and it really</font>

889
00:37:15,970 --> 00:37:20,259
<font color="#CCCCCC">provides like an interesting way you can</font>

890
00:37:17,650 --> 00:37:22,330
use some of<font color="#CCCCCC"> the techniques that Jaisal</font>

891
00:37:20,260 --> 00:37:24,460
talked about related to pinpointing the

892
00:37:22,330 --> 00:37:26,470
vulnerability in Adobe<font color="#CCCCCC"> Reader</font><font color="#E5E5E5"> and look</font>

893
00:37:24,460 --> 00:37:28,930
for<font color="#E5E5E5"> that vulnerability in</font><font color="#CCCCCC"> the code and</font>

894
00:37:26,470 --> 00:37:30,609
<font color="#E5E5E5">for programs like like the</font><font color="#CCCCCC"> 0-2</font>

895
00:37:28,930 --> 00:37:32,109
initiative<font color="#CCCCCC"> we're buying vulnerabilities</font>

896
00:37:30,610 --> 00:37:34,270
I mean that's a<font color="#E5E5E5"> perfectly valid way to</font>

897
00:37:32,110 --> 00:37:35,470
go look for<font color="#CCCCCC"> bugs and find bugs and if</font>

898
00:37:34,270 --> 00:37:37,000
you look at<font color="#E5E5E5"> our contest we're</font><font color="#CCCCCC"> actually</font>

899
00:37:35,470 --> 00:37:39,669
would pay somebody like<font color="#E5E5E5"> fifty thousand</font>

900
00:37:37,000 --> 00:37:41,290
dollars for for an exploit against a

901
00:37:39,670 --> 00:37:43,900
deadly reader by and they<font color="#E5E5E5"> can easily</font>

902
00:37:41,290 --> 00:37:45,670
<font color="#CCCCCC">just go audit some open source</font><font color="#E5E5E5"> code find</font>

903
00:37:43,900 --> 00:37:47,230
the bugs and Adobe Reader<font color="#CCCCCC"> and</font><font color="#E5E5E5"> write an</font>

904
00:37:45,670 --> 00:37:49,120
exploit and bring it to the contest<font color="#CCCCCC"> so</font>

905
00:37:47,230 --> 00:37:52,300
it's an<font color="#E5E5E5"> interesting technique that you</font>

906
00:37:49,120 --> 00:37:54,970
<font color="#CCCCCC">can</font><font color="#E5E5E5"> use Adobe Reader is a very very</font>

907
00:37:52,300 --> 00:37:57,340
<font color="#E5E5E5">popular software inside of enterprises</font>

908
00:37:54,970 --> 00:37:58,959
in fact I was meeting<font color="#E5E5E5"> with some</font>

909
00:37:57,340 --> 00:38:00,820
<font color="#CCCCCC">government officials this</font><font color="#E5E5E5"> morning</font><font color="#CCCCCC"> and I</font>

910
00:37:58,960 --> 00:38:03,190
was<font color="#E5E5E5"> looking at their laptops all of them</font>

911
00:38:00,820 --> 00:38:05,710
had<font color="#CCCCCC"> there'll be reader on it so it makes</font>

912
00:38:03,190 --> 00:38:08,740
a very<font color="#CCCCCC"> very interesting target to go</font>

913
00:38:05,710 --> 00:38:10,720
audit and look at<font color="#E5E5E5"> looking you know many</font>

914
00:38:08,740 --> 00:38:13,120
<font color="#E5E5E5">of these projects you know no longer</font>

915
00:38:10,720 --> 00:38:14,799
<font color="#E5E5E5">have communities available to them to</font>

916
00:38:13,120 --> 00:38:16,660
develop<font color="#E5E5E5"> security fixes or any</font>

917
00:38:14,800 --> 00:38:20,350
improvements at all and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really then</font>

918
00:38:16,660 --> 00:38:22,660
on the on the vendor<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go find and fix</font>

919
00:38:20,350 --> 00:38:24,190
the incoming security vulnerabilities

920
00:38:22,660 --> 00:38:25,810
and because they didn't implement<font color="#E5E5E5"> the</font>

921
00:38:24,190 --> 00:38:27,250
code to<font color="#CCCCCC"> begin with</font><font color="#E5E5E5"> they may not</font><font color="#CCCCCC"> have a</font>

922
00:38:25,810 --> 00:38:30,640
good<font color="#E5E5E5"> understanding and as we've seen</font>

923
00:38:27,250 --> 00:38:33,430
here with the bugs that a<font color="#CCCCCC"> dualist talked</font>

924
00:38:30,640 --> 00:38:35,500
about is that<font color="#E5E5E5"> many times</font><font color="#CCCCCC"> they don't</font>

925
00:38:33,430 --> 00:38:37,210
<font color="#CCCCCC">actually fix them correctly and so the</font>

926
00:38:35,500 --> 00:38:40,390
two bugs that<font color="#E5E5E5"> were actually discovered</font>

927
00:38:37,210 --> 00:38:42,340
in<font color="#E5E5E5"> 2012</font><font color="#CCCCCC"> had been around</font><font color="#E5E5E5"> still around</font><font color="#CCCCCC"> for</font>

928
00:38:40,390 --> 00:38:43,720
many many<font color="#CCCCCC"> years until</font><font color="#E5E5E5"> most recent they</font>

929
00:38:42,340 --> 00:38:46,600
were passionless recently with the<font color="#E5E5E5"> new</font>

930
00:38:43,720 --> 00:38:48,819
incoming submissions into<font color="#CCCCCC"> our program so</font>

931
00:38:46,600 --> 00:38:50,589
just kind<font color="#CCCCCC"> of leave</font><font color="#E5E5E5"> it at that you know</font>

932
00:38:48,820 --> 00:38:53,830
it's an interesting code<font color="#E5E5E5"> base</font><font color="#CCCCCC"> to look at</font>

933
00:38:50,590 --> 00:38:55,980
you<font color="#E5E5E5"> can kind of trend transform those</font>

934
00:38:53,830 --> 00:38:57,640
those<font color="#E5E5E5"> open source bugs into</font><font color="#CCCCCC"> close source</font>

935
00:38:55,980 --> 00:38:58,930
application weaknesses

936
00:38:57,640 --> 00:39:00,700
and we hope you enjoyed the<font color="#CCCCCC"> presentation</font>

937
00:38:58,930 --> 00:39:03,600
<font color="#CCCCCC">or</font><font color="#E5E5E5"> you're here to</font><font color="#CCCCCC"> answer any questions</font>

938
00:39:00,700 --> 00:39:03,600
<font color="#E5E5E5">if you have any</font>

939
00:39:05,300 --> 00:39:09,260
[Applause]

940
00:39:06,160 --> 00:39:09,259
[Music]

941
00:39:22,160 --> 00:39:29,848
yes so I have a<font color="#E5E5E5"> question regarding not</font>

942
00:39:26,220 --> 00:39:31,560
automatically matching source<font color="#E5E5E5"> to</font><font color="#CCCCCC"> by me</font>

943
00:39:29,849 --> 00:39:33,089
<font color="#E5E5E5">by compiling</font><font color="#CCCCCC"> source so</font><font color="#E5E5E5"> you said the</font>

944
00:39:31,560 --> 00:39:34,980
defines become an issue<font color="#E5E5E5"> because you</font>

945
00:39:33,089 --> 00:39:35,520
<font color="#E5E5E5">don't know which defines are used by</font>

946
00:39:34,980 --> 00:39:37,849
Adobe

947
00:39:35,520 --> 00:39:41,640
have you tried similarity techniques to

948
00:39:37,849 --> 00:39:44,420
find which defines are used or not like

949
00:39:41,640 --> 00:39:47,879
automatically trying to determine<font color="#E5E5E5"> these</font>

950
00:39:44,420 --> 00:39:50,490
<font color="#E5E5E5">so we have but at least when I'm doing</font>

951
00:39:47,880 --> 00:39:52,440
things<font color="#E5E5E5"> I like</font><font color="#CCCCCC"> to go more</font><font color="#E5E5E5"> I like to be</font>

952
00:39:50,490 --> 00:39:54,540
<font color="#E5E5E5">very static to know for sure and so</font>

953
00:39:52,440 --> 00:39:57,570
finding things<font color="#E5E5E5"> like the that array of</font>

954
00:39:54,540 --> 00:40:01,349
<font color="#E5E5E5">strings where you know for sure that it</font>

955
00:39:57,570 --> 00:40:03,300
has that<font color="#E5E5E5"> particular define I usually try</font>

956
00:40:01,349 --> 00:40:05,430
and<font color="#E5E5E5"> go for that just so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> know I</font><font color="#CCCCCC"> can</font>

957
00:40:03,300 --> 00:40:10,140
build<font color="#E5E5E5"> a list rather than having to do</font>

958
00:40:05,430 --> 00:40:12,680
<font color="#E5E5E5">bend if similarities that's a personal</font>

959
00:40:10,140 --> 00:40:12,680
preference though

960
00:40:16,859 --> 00:40:18,920
you

961
00:40:21,200 --> 00:40:28,808
perfect<font color="#E5E5E5"> thank you very much thank you</font>

962
00:40:24,340 --> 00:40:28,809
[Applause]

