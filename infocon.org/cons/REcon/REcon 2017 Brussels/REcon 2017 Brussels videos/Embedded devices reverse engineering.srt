1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,960 --> 00:00:13,309
<font color="#E5E5E5">uncle 2017</font>

3
00:00:20,910 --> 00:00:29,439
hi everyone

4
00:00:23,380 --> 00:00:31,299
so I'm Victor Ventura and well first<font color="#E5E5E5"> of</font>

5
00:00:29,439 --> 00:00:33,460
<font color="#E5E5E5">all we have some disclaimer design it's</font>

6
00:00:31,300 --> 00:00:35,739
our own view so it's not<font color="#E5E5E5"> does not</font>

7
00:00:33,460 --> 00:00:36,129
<font color="#E5E5E5">necessarily represent IBM position on</font>

8
00:00:35,739 --> 00:00:39,879
this

9
00:00:36,129 --> 00:00:42,899
so I'm Victor<font color="#E5E5E5"> fitara I work for IBM</font>

10
00:00:39,879 --> 00:00:44,500
x-force read<font color="#E5E5E5"> well</font>

11
00:00:42,899 --> 00:00:46,149
<font color="#CCCCCC">ba-ba-ba-ba-ba-ba-ba</font><font color="#E5E5E5"> I don't really</font>

12
00:00:44,500 --> 00:00:49,480
think<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this really matters why</font><font color="#E5E5E5"> were</font>

13
00:00:46,149 --> 00:00:53,350
<font color="#E5E5E5">I what I am alright I have so but an</font>

14
00:00:49,480 --> 00:00:55,750
epic<font color="#E5E5E5"> you so a little bit about me I work</font>

15
00:00:53,350 --> 00:00:57,429
for the same<font color="#E5E5E5"> team as Victor it is IBM</font>

16
00:00:55,750 --> 00:01:01,929
x-force<font color="#CCCCCC"> red team</font><font color="#E5E5E5"> we cover</font>

17
00:00:57,429 --> 00:01:04,509
<font color="#E5E5E5">amia</font><font color="#CCCCCC"> amia region and we</font><font color="#E5E5E5"> have a lot of</font>

18
00:01:01,929 --> 00:01:06,670
work<font color="#E5E5E5"> you know in different areas of</font>

19
00:01:04,509 --> 00:01:10,119
security covering a<font color="#E5E5E5"> beta devices reverse</font>

20
00:01:06,670 --> 00:01:12,580
engineering<font color="#E5E5E5"> and penetration testing so</font>

21
00:01:10,119 --> 00:01:15,640
why are we<font color="#E5E5E5"> going to cut to to to speak</font>

22
00:01:12,580 --> 00:01:19,030
today about this<font color="#CCCCCC"> topic</font><font color="#E5E5E5"> very recently we</font>

23
00:01:15,640 --> 00:01:21,899
had a<font color="#E5E5E5"> interesting project testing one</font>

24
00:01:19,030 --> 00:01:25,869
device which might be used<font color="#E5E5E5"> in automotive</font>

25
00:01:21,899 --> 00:01:29,619
industry and it was based on<font color="#CCCCCC"> three rtos</font>

26
00:01:25,869 --> 00:01:32,349
and<font color="#CCCCCC"> ARM cores and we had some</font>

27
00:01:29,619 --> 00:01:34,869
interesting<font color="#E5E5E5"> findings during the during</font>

28
00:01:32,349 --> 00:01:36,789
this<font color="#E5E5E5"> project and also we discovered</font>

29
00:01:34,869 --> 00:01:40,149
there are not too much<font color="#E5E5E5"> resources about</font>

30
00:01:36,789 --> 00:01:42,130
security on the<font color="#CCCCCC"> free rtos</font><font color="#E5E5E5"> so that was</font>

31
00:01:40,149 --> 00:01:45,069
the big problem<font color="#E5E5E5"> on the one side and the</font>

32
00:01:42,130 --> 00:01:48,580
other<font color="#E5E5E5"> side there we had some issues</font>

33
00:01:45,069 --> 00:01:51,700
actually<font color="#E5E5E5"> reversing the embedded filmer</font>

34
00:01:48,580 --> 00:01:53,200
for the device<font color="#CCCCCC"> let me get to it</font><font color="#E5E5E5"> so after</font>

35
00:01:51,700 --> 00:01:55,509
a lot of<font color="#CCCCCC"> time</font><font color="#E5E5E5"> spent reading</font>

36
00:01:53,200 --> 00:01:57,009
documentation reading header files<font color="#E5E5E5"> we</font>

37
00:01:55,509 --> 00:01:59,319
decided it<font color="#E5E5E5"> might be</font><font color="#CCCCCC"> interesting for</font><font color="#E5E5E5"> some</font>

38
00:01:57,009 --> 00:02:01,629
of you which might come<font color="#E5E5E5"> into</font><font color="#CCCCCC"> this a</font>

39
00:01:59,319 --> 00:02:06,640
<font color="#CCCCCC">similar position to share with you some</font>

40
00:02:01,629 --> 00:02:11,500
of our findings<font color="#CCCCCC"> so how many of</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> did</font>

41
00:02:06,640 --> 00:02:14,110
some<font color="#E5E5E5"> embedded development</font><font color="#CCCCCC"> oh we have</font>

42
00:02:11,500 --> 00:02:16,150
some<font color="#CCCCCC"> hands excellent so that is good so</font>

43
00:02:14,110 --> 00:02:18,640
for<font color="#E5E5E5"> you this couple of slides will not</font>

44
00:02:16,150 --> 00:02:22,330
be interesting so<font color="#E5E5E5"> I'm going to show you</font>

45
00:02:18,640 --> 00:02:24,820
how a<font color="#E5E5E5"> different mindset is needed when</font>

46
00:02:22,330 --> 00:02:27,070
you<font color="#E5E5E5"> are working on a</font><font color="#CCCCCC"> bidi device</font><font color="#E5E5E5"> we are</font>

47
00:02:24,820 --> 00:02:29,019
<font color="#CCCCCC">all used to</font><font color="#E5E5E5"> desktop stuff we have</font>

48
00:02:27,070 --> 00:02:29,980
developing software we have reversing it

49
00:02:29,020 --> 00:02:33,489
we have<font color="#CCCCCC"> another</font>

50
00:02:29,980 --> 00:02:35,619
<font color="#E5E5E5">and that is something that is common we</font>

51
00:02:33,489 --> 00:02:39,220
know<font color="#E5E5E5"> that we have mostly to</font><font color="#CCCCCC"> Architecture</font>

52
00:02:35,620 --> 00:02:41,110
stick both<font color="#CCCCCC"> Basel</font><font color="#E5E5E5"> metal most common stuff</font>

53
00:02:39,220 --> 00:02:43,540
<font color="#E5E5E5">for running on Windows</font><font color="#CCCCCC"> so we are very</font>

54
00:02:41,110 --> 00:02:46,209
<font color="#E5E5E5">very</font><font color="#CCCCCC"> aware of all</font><font color="#E5E5E5"> constraints and there</font>

55
00:02:43,540 --> 00:02:48,429
is a lot<font color="#CCCCCC"> of resources</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> also</font>

56
00:02:46,209 --> 00:02:51,250
hardware is<font color="#E5E5E5"> very much hidden from us</font>

57
00:02:48,430 --> 00:02:53,170
there are some drivers<font color="#E5E5E5"> which might or</font>

58
00:02:51,250 --> 00:02:55,120
might not be interesting<font color="#E5E5E5"> to us</font><font color="#CCCCCC"> but</font>

59
00:02:53,170 --> 00:02:57,690
usually<font color="#CCCCCC"> hardware is already predefined</font>

60
00:02:55,120 --> 00:03:01,450
and we access it as a black<font color="#CCCCCC"> box</font>

61
00:02:57,690 --> 00:03:04,269
operating system provides<font color="#CCCCCC"> a black box so</font>

62
00:03:01,450 --> 00:03:05,950
level of abstraction<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the hardware to</font>

63
00:03:04,269 --> 00:03:08,079
the software world<font color="#CCCCCC"> so that is the main</font>

64
00:03:05,950 --> 00:03:10,750
<font color="#E5E5E5">purpose of all drivers in the operating</font>

65
00:03:08,079 --> 00:03:13,959
<font color="#E5E5E5">system</font><font color="#CCCCCC"> and that is</font><font color="#E5E5E5"> very much different</font>

66
00:03:10,750 --> 00:03:17,440
<font color="#E5E5E5">in the business</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> in a beaded world</font>

67
00:03:13,959 --> 00:03:19,359
we have small<font color="#CCCCCC"> CPU micro CPU usually</font>

68
00:03:17,440 --> 00:03:21,489
there<font color="#CCCCCC"> are a lot of choices today</font><font color="#E5E5E5"> when I</font>

69
00:03:19,359 --> 00:03:23,890
started there was only one or two traces

70
00:03:21,489 --> 00:03:27,519
<font color="#E5E5E5">Intel or Motorola now we have a lot of</font>

71
00:03:23,890 --> 00:03:30,069
<font color="#E5E5E5">different architectures and very common</font>

72
00:03:27,519 --> 00:03:32,709
<font color="#E5E5E5">and</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> powerful devices coming for arm</font>

73
00:03:30,069 --> 00:03:36,910
usually cortex m0d

74
00:03:32,709 --> 00:03:39,400
m3 and m4 devices because<font color="#E5E5E5"> they are of</font>

75
00:03:36,910 --> 00:03:42,609
the family which is<font color="#CCCCCC"> made for embedded</font>

76
00:03:39,400 --> 00:03:44,470
devices<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you have a a family</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> arm</font>

77
00:03:42,609 --> 00:03:46,950
which is<font color="#E5E5E5"> for application purposes and</font>

78
00:03:44,470 --> 00:03:50,799
<font color="#CCCCCC">and which</font><font color="#E5E5E5"> is for embedded devices and</font>

79
00:03:46,950 --> 00:03:52,869
they came<font color="#CCCCCC"> into with a lot of</font><font color="#E5E5E5"> peripherals</font>

80
00:03:50,799 --> 00:03:54,910
<font color="#E5E5E5">all</font><font color="#CCCCCC"> are integrated</font><font color="#E5E5E5"> in it</font><font color="#CCCCCC"> and problem is</font>

81
00:03:52,870 --> 00:03:56,829
when you're developing<font color="#CCCCCC"> for embedded</font>

82
00:03:54,910 --> 00:03:59,049
stuff you need<font color="#E5E5E5"> to be aware of both</font>

83
00:03:56,829 --> 00:04:02,200
hardware and software<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you cannot</font>

84
00:03:59,049 --> 00:04:04,030
<font color="#CCCCCC">dress</font><font color="#E5E5E5"> it and develop software for device</font>

85
00:04:02,200 --> 00:04:09,280
that you never saw<font color="#CCCCCC"> before because</font><font color="#E5E5E5"> it</font>

86
00:04:04,030 --> 00:04:13,900
will not<font color="#CCCCCC"> work</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Ubiquiti of embedded</font>

87
00:04:09,280 --> 00:04:15,549
device is because<font color="#E5E5E5"> today we we we see</font>

88
00:04:13,900 --> 00:04:18,160
<font color="#E5E5E5">that</font><font color="#CCCCCC"> ability</font><font color="#E5E5E5"> devices that everywhere</font>

89
00:04:15,549 --> 00:04:20,410
<font color="#E5E5E5">today</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is much cheaper</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> put a</font>

90
00:04:18,160 --> 00:04:23,020
<font color="#E5E5E5">microcontroller on something than simple</font>

91
00:04:20,410 --> 00:04:27,310
transistor before so you have it

92
00:04:23,020 --> 00:04:30,130
everywhere from<font color="#E5E5E5"> the cups for a coffee</font>

93
00:04:27,310 --> 00:04:32,710
which<font color="#E5E5E5"> already have some indicators</font><font color="#CCCCCC"> about</font>

94
00:04:30,130 --> 00:04:35,219
temperature and<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> until the small</font>

95
00:04:32,710 --> 00:04:38,080
toys to big toys to cars

96
00:04:35,220 --> 00:04:40,630
<font color="#E5E5E5">so even</font><font color="#CCCCCC"> our car is one big embedded</font>

97
00:04:38,080 --> 00:04:42,099
system with wheels on<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and it's</font>

98
00:04:40,630 --> 00:04:43,130
<font color="#E5E5E5">driving and it's becoming very</font>

99
00:04:42,099 --> 00:04:48,419
interesting

100
00:04:43,130 --> 00:04:51,630
target for different attacks so tools of

101
00:04:48,419 --> 00:04:53,849
<font color="#E5E5E5">choice are more or less similar for from</font>

102
00:04:51,630 --> 00:04:57,030
both sides so<font color="#E5E5E5"> we used to work usually</font>

103
00:04:53,850 --> 00:04:59,430
<font color="#CCCCCC">with the Ida or</font><font color="#E5E5E5"> radar or whatever on the</font>

104
00:04:57,030 --> 00:05:01,500
<font color="#E5E5E5">desktop and we can use the same on the</font>

105
00:04:59,430 --> 00:05:05,759
<font color="#E5E5E5">mobile as long as it</font><font color="#CCCCCC"> supports</font><font color="#E5E5E5"> our target</font>

106
00:05:01,500 --> 00:05:08,190
<font color="#CCCCCC">architecture but problem</font><font color="#E5E5E5"> is for example</font>

107
00:05:05,759 --> 00:05:10,470
our favorite tool is Ida Pro<font color="#E5E5E5"> of course</font>

108
00:05:08,190 --> 00:05:12,389
<font color="#E5E5E5">but it has some quirks for example to</font>

109
00:05:10,470 --> 00:05:15,530
load<font color="#CCCCCC"> these example favorites</font><font color="#E5E5E5"> we are</font>

110
00:05:12,389 --> 00:05:18,300
going to show you later<font color="#CCCCCC"> we needed to set</font>

111
00:05:15,530 --> 00:05:20,190
<font color="#E5E5E5">numerous places to</font><font color="#CCCCCC"> heavy</font><font color="#E5E5E5"> decodes</font>

112
00:05:18,300 --> 00:05:23,539
correctly so it is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit</font>

113
00:05:20,190 --> 00:05:25,500
complicated setup<font color="#CCCCCC"> and it is</font><font color="#E5E5E5"> very useful</font>

114
00:05:23,539 --> 00:05:26,610
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you are</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> going to show</font>

115
00:05:25,500 --> 00:05:31,139
you<font color="#E5E5E5"> today because it is still</font>

116
00:05:26,610 --> 00:05:34,680
<font color="#CCCCCC">work-in-progress is to use structures</font>

117
00:05:31,139 --> 00:05:36,330
dynamically created in<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> so this is</font>

118
00:05:34,680 --> 00:05:39,389
why we are going to speak a little<font color="#CCCCCC"> bit</font>

119
00:05:36,330 --> 00:05:43,770
<font color="#CCCCCC">about architecture of free RTOS to help</font>

120
00:05:39,389 --> 00:05:46,080
us discover functions<font color="#E5E5E5"> so when we are</font>

121
00:05:43,770 --> 00:05:49,590
<font color="#CCCCCC">talking about 3rds it will be little</font><font color="#E5E5E5"> bit</font>

122
00:05:46,080 --> 00:05:52,080
<font color="#CCCCCC">cleaner</font><font color="#E5E5E5"> so we saw problems with if any</font>

123
00:05:49,590 --> 00:05:53,820
of this is not properly set<font color="#E5E5E5"> up we will</font>

124
00:05:52,080 --> 00:05:57,840
have<font color="#E5E5E5"> problems</font><font color="#CCCCCC"> with modern instructions</font>

125
00:05:53,820 --> 00:06:01,139
<font color="#E5E5E5">so if you don't set</font><font color="#CCCCCC"> up this segment</font>

126
00:05:57,840 --> 00:06:03,000
default register value<font color="#E5E5E5"> to p21 it will</font>

127
00:06:01,139 --> 00:06:05,310
not decode some<font color="#CCCCCC"> destructions properly</font>

128
00:06:03,000 --> 00:06:11,039
for example or<font color="#E5E5E5"> you will</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to manually</font>

129
00:06:05,310 --> 00:06:12,539
switch each line<font color="#CCCCCC"> to thumb modes as any</font>

130
00:06:11,039 --> 00:06:15,120
ability devices<font color="#CCCCCC"> knowledge that they are</font>

131
00:06:12,539 --> 00:06:16,620
<font color="#E5E5E5">everywhere most popular and busy devices</font>

132
00:06:15,120 --> 00:06:19,860
are currently<font color="#E5E5E5"> running on Mars</font>

133
00:06:16,620 --> 00:06:22,199
<font color="#E5E5E5">so imagine designing something and to</font>

134
00:06:19,860 --> 00:06:24,570
put it millions of<font color="#CCCCCC"> kilometres away</font><font color="#E5E5E5"> and</font>

135
00:06:22,199 --> 00:06:28,889
to try to fix it<font color="#CCCCCC"> the bucket and maintain</font>

136
00:06:24,570 --> 00:06:30,990
it<font color="#E5E5E5"> it is big problem and developers need</font>

137
00:06:28,889 --> 00:06:34,020
<font color="#CCCCCC">to be aware of the take a limited amount</font>

138
00:06:30,990 --> 00:06:36,090
of<font color="#E5E5E5"> memory and resources they must be</font>

139
00:06:34,020 --> 00:06:38,609
<font color="#E5E5E5">aware that power consumption must be</font>

140
00:06:36,090 --> 00:06:41,400
control<font color="#E5E5E5"> they must take care of</font><font color="#CCCCCC"> real-time</font>

141
00:06:38,610 --> 00:06:43,650
responses and device must be self

142
00:06:41,400 --> 00:06:46,409
<font color="#E5E5E5">sustainable and resilient</font><font color="#CCCCCC"> what does it</font>

143
00:06:43,650 --> 00:06:49,888
mean<font color="#E5E5E5"> about 200 days after the Mars rover</font>

144
00:06:46,409 --> 00:06:52,849
landed on Mars<font color="#CCCCCC"> there was an issue it has</font>

145
00:06:49,889 --> 00:06:55,200
<font color="#E5E5E5">two computers in it for resilience and</font>

146
00:06:52,849 --> 00:06:56,219
they are designed<font color="#CCCCCC"> in case the</font><font color="#E5E5E5"> primary</font>

147
00:06:55,200 --> 00:06:59,789
computer

148
00:06:56,220 --> 00:07:02,220
has any problems<font color="#E5E5E5"> to shut</font><font color="#CCCCCC"> down and hand</font>

149
00:06:59,790 --> 00:07:04,170
over<font color="#CCCCCC"> to the secondary computer</font><font color="#E5E5E5"> problem</font>

150
00:07:02,220 --> 00:07:04,920
<font color="#CCCCCC">OHS device started stopped responding to</font>

151
00:07:04,170 --> 00:07:07,200
any commands

152
00:07:04,920 --> 00:07:10,200
why because primary control computer was

153
00:07:07,200 --> 00:07:12,479
stuck and devices<font color="#E5E5E5"> unable to switch to</font>

154
00:07:10,200 --> 00:07:14,760
secondary computer<font color="#E5E5E5"> luckily there was a</font>

155
00:07:12,480 --> 00:07:16,320
third communication<font color="#CCCCCC"> device it was</font>

156
00:07:14,760 --> 00:07:20,340
<font color="#CCCCCC">independent of all</font><font color="#E5E5E5"> this and it was</font>

157
00:07:16,320 --> 00:07:22,290
<font color="#E5E5E5">enabled that</font><font color="#CCCCCC"> control from the earth</font><font color="#E5E5E5"> send</font>

158
00:07:20,340 --> 00:07:25,080
commands<font color="#E5E5E5"> to shut down primary computer</font>

159
00:07:22,290 --> 00:07:27,300
<font color="#E5E5E5">and switch over to secondary computer so</font>

160
00:07:25,080 --> 00:07:29,370
it is very<font color="#E5E5E5"> very important about</font>

161
00:07:27,300 --> 00:07:33,510
resilience and<font color="#CCCCCC"> self-sustainability of</font>

162
00:07:29,370 --> 00:07:35,760
these devices<font color="#E5E5E5"> what are we seeing is</font><font color="#CCCCCC"> that</font>

163
00:07:33,510 --> 00:07:39,090
first problems are<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> up from</font><font color="#E5E5E5"> the</font>

164
00:07:35,760 --> 00:07:41,370
hardware side so you have<font color="#E5E5E5"> data and your</font>

165
00:07:39,090 --> 00:07:43,200
ports available<font color="#E5E5E5"> so you are able to</font>

166
00:07:41,370 --> 00:07:45,330
connect and<font color="#E5E5E5"> debug device of course in</font>

167
00:07:43,200 --> 00:07:47,430
case of<font color="#CCCCCC"> Mars rover if somebody sit and</font>

168
00:07:45,330 --> 00:07:49,380
<font color="#E5E5E5">start debugging your device we will have</font>

169
00:07:47,430 --> 00:07:53,550
much serious issues the security<font color="#CCCCCC"> of the</font>

170
00:07:49,380 --> 00:07:56,340
device<font color="#E5E5E5"> at this point but for the</font>

171
00:07:53,550 --> 00:07:58,530
<font color="#E5E5E5">earthbound device this</font><font color="#CCCCCC"> is a big issue we</font>

172
00:07:56,340 --> 00:08:01,650
have exposed<font color="#E5E5E5"> buses so you are able to</font>

173
00:07:58,530 --> 00:08:03,719
<font color="#CCCCCC">just tap into</font><font color="#E5E5E5"> the virus</font><font color="#CCCCCC"> own device and</font>

174
00:08:01,650 --> 00:08:05,359
to read all protocols<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are running</font>

175
00:08:03,720 --> 00:08:08,010
<font color="#E5E5E5">there if you can</font><font color="#CCCCCC"> decode it of course</font>

176
00:08:05,360 --> 00:08:09,450
<font color="#E5E5E5">then we have unprotected storage for</font>

177
00:08:08,010 --> 00:08:11,580
<font color="#E5E5E5">example you</font><font color="#CCCCCC"> must have</font><font color="#E5E5E5"> devices here</font>

178
00:08:09,450 --> 00:08:14,550
internal flash<font color="#E5E5E5"> RAM</font><font color="#CCCCCC"> but it</font><font color="#E5E5E5"> does have</font><font color="#CCCCCC"> also</font>

179
00:08:11,580 --> 00:08:17,609
external memory for whatever purpose for

180
00:08:14,550 --> 00:08:21,090
logs for<font color="#CCCCCC"> failure for</font><font color="#E5E5E5"> temporary</font><font color="#CCCCCC"> storage</font>

181
00:08:17,610 --> 00:08:23,460
like<font color="#E5E5E5"> SD card so you can tap</font><font color="#CCCCCC"> into that</font>

182
00:08:21,090 --> 00:08:25,500
<font color="#E5E5E5">and collect information there are also a</font>

183
00:08:23,460 --> 00:08:27,539
lot of communication interfaces mostly

184
00:08:25,500 --> 00:08:30,000
radio interfaces which<font color="#E5E5E5"> are used for</font>

185
00:08:27,540 --> 00:08:33,270
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> and we already know they are</font>

186
00:08:30,000 --> 00:08:35,309
easy<font color="#E5E5E5"> to hack from time to time there are</font>

187
00:08:33,270 --> 00:08:39,598
<font color="#E5E5E5">very common the buggy consoles are all</font>

188
00:08:35,309 --> 00:08:41,338
left<font color="#E5E5E5"> running so developers forgets to</font>

189
00:08:39,599 --> 00:08:44,570
disable debugging features before<font color="#E5E5E5"> they</font>

190
00:08:41,339 --> 00:08:47,370
release so<font color="#E5E5E5"> that enable us to get to the</font>

191
00:08:44,570 --> 00:08:51,060
bootloader it<font color="#CCCCCC"> enable</font><font color="#E5E5E5"> us to download</font><font color="#CCCCCC"> the</font>

192
00:08:47,370 --> 00:08:53,640
<font color="#CCCCCC">funeral devices and to do whatever we</font>

193
00:08:51,060 --> 00:08:56,130
<font color="#CCCCCC">need to do with</font><font color="#E5E5E5"> it so there are</font><font color="#CCCCCC"> also</font>

194
00:08:53,640 --> 00:08:57,689
software requirements and first<font color="#CCCCCC"> author</font>

195
00:08:56,130 --> 00:09:00,870
<font color="#CCCCCC">requires it</font><font color="#E5E5E5"> needs to be tailored</font>

196
00:08:57,690 --> 00:09:02,970
specifically to embedded hardware<font color="#CCCCCC"> to</font>

197
00:09:00,870 --> 00:09:04,860
<font color="#CCCCCC">handle of the device</font><font color="#E5E5E5"> that he takes the</font>

198
00:09:02,970 --> 00:09:07,230
features<font color="#CCCCCC"> it is a big problem</font><font color="#E5E5E5"> you usually</font>

199
00:09:04,860 --> 00:09:09,680
have two teams<font color="#E5E5E5"> one is Harvard</font><font color="#CCCCCC"> very open</font>

200
00:09:07,230 --> 00:09:12,560
<font color="#E5E5E5">team the other is software development</font>

201
00:09:09,680 --> 00:09:14,180
so how the team will choose<font color="#E5E5E5"> architecture</font>

202
00:09:12,560 --> 00:09:16,880
<font color="#E5E5E5">they think it will</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> for them</font>

203
00:09:14,180 --> 00:09:20,060
<font color="#E5E5E5">software team needs to</font><font color="#CCCCCC"> adjust</font><font color="#E5E5E5"> and it</font>

204
00:09:16,880 --> 00:09:22,279
comes to some problem because<font color="#E5E5E5"> CPU speed</font>

205
00:09:20,060 --> 00:09:24,079
memory<font color="#E5E5E5"> to Train available storage they</font>

206
00:09:22,279 --> 00:09:26,180
almost devil all impact software

207
00:09:24,080 --> 00:09:30,430
development<font color="#E5E5E5"> of course again power</font>

208
00:09:26,180 --> 00:09:33,349
consumption error handling<font color="#CCCCCC"> soft and and</font>

209
00:09:30,430 --> 00:09:36,319
bugs resilience<font color="#E5E5E5"> so software developers</font>

210
00:09:33,350 --> 00:09:38,390
must be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> adjust their processes</font>

211
00:09:36,320 --> 00:09:41,390
<font color="#CCCCCC">and their code to specific architecture</font>

212
00:09:38,390 --> 00:09:43,040
<font color="#E5E5E5">how to do it there</font><font color="#CCCCCC"> is a lot of different</font>

213
00:09:41,390 --> 00:09:44,959
<font color="#CCCCCC">hardware as we already mentioned</font><font color="#E5E5E5"> you</font>

214
00:09:43,040 --> 00:09:47,020
have all different<font color="#E5E5E5"> architectures with</font>

215
00:09:44,959 --> 00:09:50,630
different<font color="#E5E5E5"> endianness different</font>

216
00:09:47,020 --> 00:09:53,480
peripherals<font color="#CCCCCC"> and you need to account</font><font color="#E5E5E5"> for</font>

217
00:09:50,630 --> 00:09:55,730
<font color="#CCCCCC">all possibilities</font><font color="#E5E5E5"> of a combination of</font>

218
00:09:53,480 --> 00:09:57,529
different<font color="#CCCCCC"> devices so the common solution</font>

219
00:09:55,730 --> 00:10:00,050
for this use something of existing

220
00:09:57,529 --> 00:10:02,779
frameworks and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> real-time operating</font>

221
00:10:00,050 --> 00:10:05,990
systems which will<font color="#E5E5E5"> help you to solve</font>

222
00:10:02,779 --> 00:10:11,060
<font color="#E5E5E5">this</font><font color="#CCCCCC"> into controllable manner</font><font color="#E5E5E5"> one of the</font>

223
00:10:05,990 --> 00:10:14,510
very common operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> that'll use</font>

224
00:10:11,060 --> 00:10:16,640
is free<font color="#CCCCCC"> RTS it is nice because</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font>

225
00:10:14,510 --> 00:10:19,610
<font color="#CCCCCC">open source</font><font color="#E5E5E5"> it is available in the</font>

226
00:10:16,640 --> 00:10:20,900
<font color="#CCCCCC">market for</font><font color="#E5E5E5"> a lot of Thai long time</font><font color="#CCCCCC"> there</font>

227
00:10:19,610 --> 00:10:24,200
is a commercial<font color="#CCCCCC"> version which is</font>

228
00:10:20,900 --> 00:10:25,850
certified<font color="#CCCCCC"> for security bla bla bla so it</font>

229
00:10:24,200 --> 00:10:27,830
might<font color="#CCCCCC"> be</font><font color="#E5E5E5"> interesting if you want to take</font>

230
00:10:25,850 --> 00:10:31,610
a<font color="#E5E5E5"> look at more details on the</font><font color="#CCCCCC"> site that</font>

231
00:10:27,830 --> 00:10:34,070
<font color="#CCCCCC">is down there</font><font color="#E5E5E5"> it ran on</font><font color="#CCCCCC"> almost every</font>

232
00:10:31,610 --> 00:10:35,660
possible<font color="#CCCCCC"> platform including</font><font color="#E5E5E5"> Arduino so</font>

233
00:10:34,070 --> 00:10:38,029
if you want to<font color="#E5E5E5"> try it at home you</font><font color="#CCCCCC"> can</font>

234
00:10:35,660 --> 00:10:39,800
play with<font color="#E5E5E5"> it no problem it's easy to</font>

235
00:10:38,029 --> 00:10:43,670
<font color="#E5E5E5">port</font><font color="#CCCCCC"> to new</font><font color="#E5E5E5"> platforms you need to change</font>

236
00:10:39,800 --> 00:10:48,050
only<font color="#CCCCCC"> three files which</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> dependence</font>

237
00:10:43,670 --> 00:10:51,650
<font color="#E5E5E5">everything else is run as ease and it</font>

238
00:10:48,050 --> 00:10:56,719
support multitasking<font color="#E5E5E5"> it even has a tiny</font>

239
00:10:51,650 --> 00:10:58,760
footprint so on top<font color="#E5E5E5"> of this basic</font>

240
00:10:56,720 --> 00:11:00,860
<font color="#E5E5E5">operating system we have additional</font>

241
00:10:58,760 --> 00:11:04,160
modules which are<font color="#CCCCCC"> available</font><font color="#E5E5E5"> to make our</font>

242
00:11:00,860 --> 00:11:08,240
free<font color="#E5E5E5"> RDS device more usable so first and</font>

243
00:11:04,160 --> 00:11:11,510
most important is tcp/ip stack<font color="#CCCCCC"> then we</font>

244
00:11:08,240 --> 00:11:14,149
have fat<font color="#CCCCCC"> filesystem</font><font color="#E5E5E5"> command line and IR</font>

245
00:11:11,510 --> 00:11:19,420
support which includes<font color="#E5E5E5"> GPIO you all know</font>

246
00:11:14,149 --> 00:11:24,110
what is the payoff okay I assume<font color="#E5E5E5"> yes</font>

247
00:11:19,420 --> 00:11:24,589
so basic structure of<font color="#CCCCCC"> free</font><font color="#E5E5E5"> rqf</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> shown</font>

248
00:11:24,110 --> 00:11:27,230
here

249
00:11:24,590 --> 00:11:29,780
we have<font color="#E5E5E5"> hardware of</font><font color="#CCCCCC"> the lowest level</font>

250
00:11:27,230 --> 00:11:32,780
then we have<font color="#E5E5E5"> hardware dependent codes</font>

251
00:11:29,780 --> 00:11:34,790
<font color="#E5E5E5">those three files</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I showed you then</font>

252
00:11:32,780 --> 00:11:36,860
we have<font color="#E5E5E5"> core those are hundred</font>

253
00:11:34,790 --> 00:11:39,140
independent files which<font color="#E5E5E5"> are same and</font>

254
00:11:36,860 --> 00:11:40,700
provide the same<font color="#CCCCCC"> functionalities and we</font>

255
00:11:39,140 --> 00:11:44,000
have user code which will actually<font color="#E5E5E5"> be</font>

256
00:11:40,700 --> 00:11:48,380
<font color="#E5E5E5">executing on top of</font><font color="#CCCCCC"> three RTOS and it</font>

257
00:11:44,000 --> 00:11:51,260
will serve the purpose we intended<font color="#E5E5E5"> so</font>

258
00:11:48,380 --> 00:11:53,570
main<font color="#E5E5E5"> component is task scheduler task</font>

259
00:11:51,260 --> 00:11:58,720
scheduler is the orchestrator which will

260
00:11:53,570 --> 00:12:01,310
take<font color="#E5E5E5"> care</font><font color="#CCCCCC"> of executing tasks tasks our</font>

261
00:11:58,720 --> 00:12:03,560
<font color="#CCCCCC">programmer provided pieces of course</font>

262
00:12:01,310 --> 00:12:06,290
<font color="#E5E5E5">actually it would be like programs on</font>

263
00:12:03,560 --> 00:12:08,780
the desktop<font color="#E5E5E5"> that</font><font color="#CCCCCC"> runs specific functions</font>

264
00:12:06,290 --> 00:12:12,650
and they execute concurrently<font color="#CCCCCC"> so it is</font>

265
00:12:08,780 --> 00:12:16,939
multitasking<font color="#CCCCCC"> each task has a separate</font>

266
00:12:12,650 --> 00:12:19,459
stack and<font color="#E5E5E5"> you will see</font><font color="#CCCCCC"> later how that</font>

267
00:12:16,940 --> 00:12:21,710
<font color="#E5E5E5">stack is handled there are quarantines</font>

268
00:12:19,460 --> 00:12:23,300
it is the I mentioned this but this is

269
00:12:21,710 --> 00:12:25,190
all what was not used anymore

270
00:12:23,300 --> 00:12:27,949
I<font color="#E5E5E5"> think it is not even supported anymore</font>

271
00:12:25,190 --> 00:12:29,840
<font color="#E5E5E5">and we have communication with</font><font color="#CCCCCC"> inter</font>

272
00:12:27,950 --> 00:12:30,980
<font color="#CCCCCC">process communication so they</font><font color="#E5E5E5"> take use</font>

273
00:12:29,840 --> 00:12:33,410
to exchange<font color="#CCCCCC"> information between</font>

274
00:12:30,980 --> 00:12:35,780
processes semaphore and<font color="#CCCCCC"> logistics for</font>

275
00:12:33,410 --> 00:12:38,390
signalization<font color="#CCCCCC"> and timers for measuring</font>

276
00:12:35,780 --> 00:12:43,189
time<font color="#E5E5E5"> as you say</font><font color="#CCCCCC"> real-time</font><font color="#E5E5E5"> is really</font>

277
00:12:38,390 --> 00:12:46,150
important in this case<font color="#CCCCCC"> the most</font>

278
00:12:43,190 --> 00:12:49,250
important structure are released

279
00:12:46,150 --> 00:12:52,610
everything<font color="#CCCCCC"> inferior</font><font color="#E5E5E5"> to s is contained in</font>

280
00:12:49,250 --> 00:12:55,060
some form of<font color="#CCCCCC"> list</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we have takes task</font>

281
00:12:52,610 --> 00:13:01,940
<font color="#CCCCCC">ready list which is most important list</font>

282
00:12:55,060 --> 00:13:04,160
which has pointers to records<font color="#E5E5E5"> of</font><font color="#CCCCCC"> task</font>

283
00:13:01,940 --> 00:13:07,040
control blocks<font color="#CCCCCC"> task control</font><font color="#E5E5E5"> both contain</font>

284
00:13:04,160 --> 00:13:09,500
all necessary information<font color="#E5E5E5"> for the</font>

285
00:13:07,040 --> 00:13:11,540
<font color="#CCCCCC">customer created tasks so when you</font>

286
00:13:09,500 --> 00:13:13,730
create first task you will create task

287
00:13:11,540 --> 00:13:17,540
control box<font color="#E5E5E5"> somewhere in memory and</font><font color="#CCCCCC"> you</font>

288
00:13:13,730 --> 00:13:21,350
will add it<font color="#CCCCCC"> as a number</font><font color="#E5E5E5"> one in your task</font>

289
00:13:17,540 --> 00:13:25,069
ready list but when you<font color="#E5E5E5"> create first</font>

290
00:13:21,350 --> 00:13:28,730
task one more task will<font color="#CCCCCC"> be automatically</font>

291
00:13:25,070 --> 00:13:35,030
created<font color="#E5E5E5"> which one</font>

292
00:13:28,730 --> 00:13:36,830
and ideas I<font color="#E5E5E5"> don't so first</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> tasks</font>

293
00:13:35,030 --> 00:13:40,130
will<font color="#E5E5E5"> be idle</font><font color="#CCCCCC"> tasks which will take care</font>

294
00:13:36,830 --> 00:13:41,690
<font color="#CCCCCC">of all the unused CPU cycles and then</font>

295
00:13:40,130 --> 00:13:43,189
all the<font color="#E5E5E5"> others so when you intention</font>

296
00:13:41,690 --> 00:13:48,340
<font color="#CCCCCC">your first task</font><font color="#E5E5E5"> it will create</font>

297
00:13:43,190 --> 00:13:51,890
automatically automatically idle<font color="#CCCCCC"> tasks</font>

298
00:13:48,340 --> 00:13:54,500
<font color="#CCCCCC">so we have a</font><font color="#E5E5E5"> little bit about queues so</font>

299
00:13:51,890 --> 00:13:57,230
again<font color="#CCCCCC"> there are lists with some specific</font>

300
00:13:54,500 --> 00:14:01,640
to it<font color="#E5E5E5"> semaphores there they can be</font>

301
00:13:57,230 --> 00:14:04,040
<font color="#E5E5E5">binary semaphores or or multiple servers</font>

302
00:14:01,640 --> 00:14:07,580
and they can use views to communicate

303
00:14:04,040 --> 00:14:11,660
between signal<font color="#E5E5E5"> between the processes and</font>

304
00:14:07,580 --> 00:14:15,650
new taxes are used to protect<font color="#CCCCCC"> access</font><font color="#E5E5E5"> to</font>

305
00:14:11,660 --> 00:14:17,240
resources<font color="#CCCCCC"> during the multitasking now</font>

306
00:14:15,650 --> 00:14:19,579
what will happen<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> have two tasks</font>

307
00:14:17,240 --> 00:14:22,400
<font color="#E5E5E5">one is of highest priority than</font><font color="#CCCCCC"> the</font>

308
00:14:19,580 --> 00:14:26,900
other and each<font color="#E5E5E5"> of them needs to access</font>

309
00:14:22,400 --> 00:14:29,600
to resources so first will<font color="#CCCCCC"> be started</font>

310
00:14:26,900 --> 00:14:31,250
with<font color="#CCCCCC"> high-level tasks it will create</font>

311
00:14:29,600 --> 00:14:33,890
<font color="#E5E5E5">high level vortex protecting the</font>

312
00:14:31,250 --> 00:14:36,740
resource<font color="#E5E5E5"> then you will have lower task</font>

313
00:14:33,890 --> 00:14:39,199
executes it will create mutex taxes the

314
00:14:36,740 --> 00:14:41,330
other other resource which is<font color="#E5E5E5"> not</font>

315
00:14:39,200 --> 00:14:43,940
claimed yet by<font color="#E5E5E5"> the higher level</font><font color="#CCCCCC"> tasks</font>

316
00:14:41,330 --> 00:14:46,490
<font color="#E5E5E5">and it will create mutex now you will go</font>

317
00:14:43,940 --> 00:14:48,410
into situation that<font color="#E5E5E5"> you're blocked</font>

318
00:14:46,490 --> 00:14:50,630
<font color="#E5E5E5">because your high level</font><font color="#CCCCCC"> task cannot</font>

319
00:14:48,410 --> 00:14:53,510
access resource which<font color="#CCCCCC"> is locked by the</font>

320
00:14:50,630 --> 00:14:55,910
lower a lot<font color="#E5E5E5"> of level tasks and vice</font>

321
00:14:53,510 --> 00:14:59,330
versa so Botox<font color="#E5E5E5"> or ball blocked and you</font>

322
00:14:55,910 --> 00:15:03,469
cannot you cannot proceed<font color="#E5E5E5"> so freely</font>

323
00:14:59,330 --> 00:15:07,580
<font color="#E5E5E5">resolves this by temporarily raising the</font>

324
00:15:03,470 --> 00:15:10,670
level of the process which is waiting

325
00:15:07,580 --> 00:15:13,070
for mutex from higher level process<font color="#CCCCCC"> so</font>

326
00:15:10,670 --> 00:15:16,130
in this case lower lower level<font color="#E5E5E5"> tasks</font>

327
00:15:13,070 --> 00:15:18,470
<font color="#E5E5E5">will be upgraded to high level</font><font color="#CCCCCC"> priority</font>

328
00:15:16,130 --> 00:15:20,990
so it will be able<font color="#E5E5E5"> to take the</font><font color="#CCCCCC"> loonatics</font>

329
00:15:18,470 --> 00:15:25,790
and proceed accordingly<font color="#CCCCCC"> it will not be</font>

330
00:15:20,990 --> 00:15:27,860
<font color="#CCCCCC">waiting for the higher level tasks so</font>

331
00:15:25,790 --> 00:15:30,140
there are some<font color="#E5E5E5"> security features which</font>

332
00:15:27,860 --> 00:15:30,950
are always<font color="#E5E5E5"> embedded in free</font><font color="#CCCCCC"> r2f some</font><font color="#E5E5E5"> are</font>

333
00:15:30,140 --> 00:15:34,370
<font color="#E5E5E5">Adam</font>

334
00:15:30,950 --> 00:15:36,710
so first add-on is<font color="#E5E5E5"> SSL library it</font>

335
00:15:34,370 --> 00:15:39,110
doesn't came with reactors it is

336
00:15:36,710 --> 00:15:41,820
separate library from vault fascism<font color="#E5E5E5"> I</font>

337
00:15:39,110 --> 00:15:44,430
believe it is a traditional

338
00:15:41,820 --> 00:15:48,030
is much smaller than the standard

339
00:15:44,430 --> 00:15:49,620
<font color="#CCCCCC">OpenSSL and if you are aware</font><font color="#E5E5E5"> most of the</font>

340
00:15:48,030 --> 00:15:52,290
vulnerabilities we<font color="#E5E5E5"> shared in the last</font>

341
00:15:49,620 --> 00:15:54,650
<font color="#E5E5E5">couple of</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> too serious a little</font><font color="#CCCCCC"> we</font>

342
00:15:52,290 --> 00:15:57,870
related<font color="#CCCCCC"> to open SSL</font><font color="#E5E5E5"> it became too big</font>

343
00:15:54,650 --> 00:16:00,480
for its purpose and it's difficult<font color="#CCCCCC"> to</font>

344
00:15:57,870 --> 00:16:03,180
<font color="#E5E5E5">maintaining so this this operating</font>

345
00:16:00,480 --> 00:16:05,130
<font color="#E5E5E5">system is using another library which is</font>

346
00:16:03,180 --> 00:16:08,069
<font color="#E5E5E5">very nice</font><font color="#CCCCCC"> and small and support</font>

347
00:16:05,130 --> 00:16:10,200
everything<font color="#E5E5E5"> that you actually need it has</font>

348
00:16:08,070 --> 00:16:12,750
some<font color="#CCCCCC"> elementary spec</font><font color="#E5E5E5"> colorful protection</font>

349
00:16:10,200 --> 00:16:16,110
<font color="#E5E5E5">and it supports different privilege</font>

350
00:16:12,750 --> 00:16:19,740
levels for the tasks but that is limited

351
00:16:16,110 --> 00:16:21,930
only to<font color="#E5E5E5"> cortex and three devices which</font>

352
00:16:19,740 --> 00:16:24,720
can remember<font color="#E5E5E5"> the protection unit so in</font>

353
00:16:21,930 --> 00:16:31,770
this case you can create<font color="#E5E5E5"> tasks of</font>

354
00:16:24,720 --> 00:16:32,430
different<font color="#CCCCCC"> privileges that is not the</font>

355
00:16:31,770 --> 00:16:36,360
best approach

356
00:16:32,430 --> 00:16:38,729
<font color="#CCCCCC">because it is easy</font><font color="#E5E5E5"> to do to to to to go</font>

357
00:16:36,360 --> 00:16:41,220
around<font color="#CCCCCC"> problem is</font><font color="#E5E5E5"> that from unprivileged</font>

358
00:16:38,730 --> 00:16:43,380
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> you can't create</font><font color="#CCCCCC"> privileged tasks</font>

359
00:16:41,220 --> 00:16:45,060
so if you<font color="#E5E5E5"> manage to exploit something</font>

360
00:16:43,380 --> 00:16:48,330
the training<font color="#E5E5E5"> rather than unprivileged</font>

361
00:16:45,060 --> 00:16:50,040
<font color="#E5E5E5">tasks you</font><font color="#CCCCCC"> can rope your way out of</font><font color="#E5E5E5"> it by</font>

362
00:16:48,330 --> 00:16:52,440
<font color="#CCCCCC">creating privileged tasks and getting</font>

363
00:16:50,040 --> 00:16:54,449
<font color="#CCCCCC">access difference between privileged and</font>

364
00:16:52,440 --> 00:16:57,360
unprivileged<font color="#CCCCCC"> tasks are privileged das</font>

365
00:16:54,450 --> 00:17:00,060
<font color="#CCCCCC">has access to its own</font><font color="#E5E5E5"> stack and to all</font>

366
00:16:57,360 --> 00:17:01,980
other<font color="#E5E5E5"> sects unprivileged us tasks can</font>

367
00:17:00,060 --> 00:17:07,589
access only<font color="#E5E5E5"> his</font><font color="#CCCCCC"> own resources</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> his</font>

368
00:17:01,980 --> 00:17:10,020
own stack yep<font color="#CCCCCC"> so we have a stack from</font>

369
00:17:07,589 --> 00:17:11,790
<font color="#E5E5E5">powerful</font><font color="#CCCCCC"> protections rudimentary so it</font>

370
00:17:10,020 --> 00:17:14,369
is in<font color="#CCCCCC"> - there</font><font color="#E5E5E5"> are two possible ones</font>

371
00:17:11,790 --> 00:17:17,550
<font color="#E5E5E5">while it will just simple check if your</font>

372
00:17:14,369 --> 00:17:19,649
stack pointer<font color="#CCCCCC"> is somewhere in the range</font>

373
00:17:17,550 --> 00:17:24,180
<font color="#CCCCCC">where it should</font><font color="#E5E5E5"> be expected the other</font>

374
00:17:19,650 --> 00:17:29,180
one will add small canneries to measure

375
00:17:24,180 --> 00:17:31,770
if it is on the<font color="#CCCCCC"> expected point and</font>

376
00:17:29,180 --> 00:17:33,060
problem is the<font color="#E5E5E5"> tcp/ip</font><font color="#CCCCCC"> stack is not</font><font color="#E5E5E5"> very</font>

377
00:17:31,770 --> 00:17:34,879
resilient<font color="#E5E5E5"> because this is a</font><font color="#CCCCCC"> bigger</font>

378
00:17:33,060 --> 00:17:37,560
device<font color="#E5E5E5"> it is not made to suffer</font>

379
00:17:34,880 --> 00:17:40,650
<font color="#E5E5E5">harassment of million users connecting</font>

380
00:17:37,560 --> 00:17:44,190
to it all the<font color="#E5E5E5"> time so</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> do any more</font>

381
00:17:40,650 --> 00:17:46,320
intensive<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> scan on this</font>

382
00:17:44,190 --> 00:17:48,510
device they might experience<font color="#E5E5E5"> some issues</font>

383
00:17:46,320 --> 00:17:51,240
and this<font color="#CCCCCC"> will</font><font color="#E5E5E5"> see that</font><font color="#CCCCCC"> very often it's</font>

384
00:17:48,510 --> 00:17:53,340
<font color="#CCCCCC">catered</font><font color="#E5E5E5"> devices so this is why really we</font>

385
00:17:51,240 --> 00:17:57,090
never scan SCADA devices in the<font color="#CCCCCC"> product</font>

386
00:17:53,340 --> 00:18:00,600
there they have really sensitive<font color="#E5E5E5"> tcp/ip</font>

387
00:17:57,090 --> 00:18:03,629
<font color="#CCCCCC">stacks</font><font color="#E5E5E5"> and of course it's free RTS is</font>

388
00:18:00,600 --> 00:18:05,310
developed in C it will<font color="#E5E5E5"> here it's all the</font>

389
00:18:03,630 --> 00:18:10,860
possible issues<font color="#CCCCCC"> that you have in any</font>

390
00:18:05,310 --> 00:18:12,450
<font color="#E5E5E5">other state programs to be fair</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> I was</font>

391
00:18:10,860 --> 00:18:14,129
searching<font color="#CCCCCC"> for such a vulnerability</font>

392
00:18:12,450 --> 00:18:15,510
<font color="#CCCCCC">Spiritist</font><font color="#E5E5E5"> for two months they couldn't</font>

393
00:18:14,130 --> 00:18:18,180
<font color="#E5E5E5">find any it doesn't mean they don't</font>

394
00:18:15,510 --> 00:18:20,610
exist<font color="#E5E5E5"> but I couldn't find them but you</font>

395
00:18:18,180 --> 00:18:22,970
might<font color="#CCCCCC"> find in</font><font color="#E5E5E5"> the custom created tasks</font>

396
00:18:20,610 --> 00:18:26,250
<font color="#E5E5E5">so they</font><font color="#CCCCCC"> can introduce vulnerabilities</font>

397
00:18:22,970 --> 00:18:27,750
<font color="#E5E5E5">3rds is relatively safe from it and you</font>

398
00:18:26,250 --> 00:18:30,540
can always investigate<font color="#E5E5E5"> it because it is</font>

399
00:18:27,750 --> 00:18:32,580
open-source<font color="#CCCCCC"> and everything</font><font color="#E5E5E5"> that we</font>

400
00:18:30,540 --> 00:18:34,470
<font color="#E5E5E5">discussed so far could be fine and</font>

401
00:18:32,580 --> 00:18:39,030
<font color="#E5E5E5">tracked into source codes that are</font>

402
00:18:34,470 --> 00:18:40,770
provided on the site we are<font color="#E5E5E5"> going to</font>

403
00:18:39,030 --> 00:18:42,720
<font color="#E5E5E5">develop a simple application that</font>

404
00:18:40,770 --> 00:18:47,070
<font color="#CCCCCC">whitter will later be destroying here</font>

405
00:18:42,720 --> 00:18:48,870
for purpose<font color="#CCCCCC"> of demonstration and we are</font>

406
00:18:47,070 --> 00:18:50,909
going to develop<font color="#E5E5E5"> some simple application</font>

407
00:18:48,870 --> 00:18:52,860
because it will be easier for<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to see</font>

408
00:18:50,910 --> 00:18:54,750
<font color="#E5E5E5">and to show you what is important so</font>

409
00:18:52,860 --> 00:18:57,659
<font color="#CCCCCC">we'll create application which</font><font color="#E5E5E5"> have only</font>

410
00:18:54,750 --> 00:18:59,880
<font color="#E5E5E5">two goals one is to track you button is</font>

411
00:18:57,660 --> 00:19:02,760
pressed and the button<font color="#E5E5E5"> is pressed it</font>

412
00:18:59,880 --> 00:19:07,290
will toggle<font color="#E5E5E5"> the</font><font color="#CCCCCC"> length so it</font><font color="#E5E5E5"> is very</font>

413
00:19:02,760 --> 00:19:10,010
<font color="#E5E5E5">simple and this is</font><font color="#CCCCCC"> the basically texture</font>

414
00:19:07,290 --> 00:19:12,899
that first come<font color="#CCCCCC"> to mind so we have</font>

415
00:19:10,010 --> 00:19:15,150
<font color="#CCCCCC">correct us we have a task scheduler</font>

416
00:19:12,900 --> 00:19:17,700
running the two tasks<font color="#E5E5E5"> first task we</font>

417
00:19:15,150 --> 00:19:20,520
check if<font color="#E5E5E5"> the button is</font><font color="#CCCCCC"> pressed do the</font>

418
00:19:17,700 --> 00:19:22,500
debounce and everything and then you put

419
00:19:20,520 --> 00:19:25,530
the data<font color="#CCCCCC"> kick</font><font color="#E5E5E5"> you information</font><font color="#CCCCCC"> that</font>

420
00:19:22,500 --> 00:19:28,230
button is pressed<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other task is</font>

421
00:19:25,530 --> 00:19:29,850
<font color="#CCCCCC">let's</font><font color="#E5E5E5"> double task it will verify if they</font>

422
00:19:28,230 --> 00:19:32,640
take you health information that he

423
00:19:29,850 --> 00:19:35,639
expects<font color="#E5E5E5"> and he will turn off or turn</font><font color="#CCCCCC"> on</font>

424
00:19:32,640 --> 00:19:38,460
<font color="#CCCCCC">delay that accordingly this</font><font color="#E5E5E5"> is nice but</font>

425
00:19:35,640 --> 00:19:40,830
it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> bad this is not how it is done</font>

426
00:19:38,460 --> 00:19:43,010
actually<font color="#E5E5E5"> on embedded</font><font color="#CCCCCC"> devices so</font><font color="#E5E5E5"> I</font>

427
00:19:40,830 --> 00:19:45,629
created a little bit better detector

428
00:19:43,010 --> 00:19:47,940
problem with first architecture is the

429
00:19:45,630 --> 00:19:50,670
<font color="#E5E5E5">device will ever go to sleep so we have</font>

430
00:19:47,940 --> 00:19:53,520
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> power consumption in this case</font>

431
00:19:50,670 --> 00:19:54,150
I have changed a button<font color="#CCCCCC"> here alert to be</font>

432
00:19:53,520 --> 00:19:56,490
interrupt

433
00:19:54,150 --> 00:19:57,870
<font color="#E5E5E5">so device can go to sleep and only when</font>

434
00:19:56,490 --> 00:20:00,480
you<font color="#E5E5E5"> press the button</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will generate</font>

435
00:19:57,870 --> 00:20:02,909
<font color="#CCCCCC">interrupt</font><font color="#E5E5E5"> and wake up device device will</font>

436
00:20:00,480 --> 00:20:05,640
<font color="#CCCCCC">detect that</font><font color="#E5E5E5"> it is waking up by external</font>

437
00:20:02,910 --> 00:20:07,080
<font color="#CCCCCC">interrupt</font><font color="#E5E5E5"> and it'll trigger the Beanery</font>

438
00:20:05,640 --> 00:20:10,150
binary<font color="#E5E5E5"> semaphore</font>

439
00:20:07,080 --> 00:20:12,760
it will became available<font color="#E5E5E5"> let's toggle</font>

440
00:20:10,150 --> 00:20:14,740
<font color="#CCCCCC">tasks they'll wait for</font><font color="#E5E5E5"> binary semaphore</font>

441
00:20:12,760 --> 00:20:17,800
to became available and<font color="#E5E5E5"> then see the</font>

442
00:20:14,740 --> 00:20:21,850
text that it is<font color="#CCCCCC"> available</font><font color="#E5E5E5"> it will turn</font>

443
00:20:17,800 --> 00:20:24,300
on the LED and and make semaphore again

444
00:20:21,850 --> 00:20:27,969
<font color="#E5E5E5">unavailable so it cannot do two things</font>

445
00:20:24,300 --> 00:20:29,919
<font color="#CCCCCC">here</font><font color="#E5E5E5"> at occupies on the same time so</font>

446
00:20:27,970 --> 00:20:34,000
next time only<font color="#CCCCCC"> button handler needs to</font>

447
00:20:29,920 --> 00:20:37,180
set the semaphore again so how it<font color="#E5E5E5"> is</font>

448
00:20:34,000 --> 00:20:39,970
<font color="#CCCCCC">done it is very</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> so bold lines are</font>

449
00:20:37,180 --> 00:20:41,940
<font color="#CCCCCC">Hardware dependent</font><font color="#E5E5E5"> lines so set</font><font color="#CCCCCC"> of</font>

450
00:20:39,970 --> 00:20:44,530
Carter is<font color="#CCCCCC"> Harvard</font><font color="#E5E5E5"> dependent as expected</font>

451
00:20:41,940 --> 00:20:48,160
<font color="#E5E5E5">everything else is not</font><font color="#CCCCCC"> car dependent so</font>

452
00:20:44,530 --> 00:20:49,930
we created the one task which<font color="#CCCCCC"> is led</font>

453
00:20:48,160 --> 00:20:52,390
semaphore<font color="#CCCCCC"> handlers tasks and we start</font>

454
00:20:49,930 --> 00:20:54,100
the<font color="#E5E5E5"> task scheduler</font><font color="#CCCCCC"> if we ever get</font>

455
00:20:52,390 --> 00:20:55,960
<font color="#CCCCCC">returned one there is a</font><font color="#E5E5E5"> problem with our</font>

456
00:20:54,100 --> 00:20:57,790
application<font color="#CCCCCC"> it should never return tasks</font>

457
00:20:55,960 --> 00:21:03,550
<font color="#E5E5E5">scheduled</font><font color="#CCCCCC"> and start running should never</font>

458
00:20:57,790 --> 00:21:06,550
return<font color="#CCCCCC"> and two functions first one is</font><font color="#E5E5E5"> we</font>

459
00:21:03,550 --> 00:21:08,500
<font color="#E5E5E5">got related to legs so how to toggle the</font>

460
00:21:06,550 --> 00:21:11,800
<font color="#E5E5E5">leg</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> looks like if semaphore is</font>

461
00:21:08,500 --> 00:21:14,020
available it<font color="#E5E5E5"> will wait forever if it is</font>

462
00:21:11,800 --> 00:21:15,909
not available<font color="#CCCCCC"> then became available it</font>

463
00:21:14,020 --> 00:21:18,129
will<font color="#E5E5E5"> trigger toggle the light</font>

464
00:21:15,910 --> 00:21:20,290
I<font color="#E5E5E5"> gave altered at</font><font color="#CCCCCC"> the at the night way</font>

465
00:21:18,130 --> 00:21:21,940
of triggering<font color="#E5E5E5"> leg because</font><font color="#CCCCCC"> it's may</font><font color="#E5E5E5"> be</font>

466
00:21:20,290 --> 00:21:24,760
interesting<font color="#E5E5E5"> for something else later</font>

467
00:21:21,940 --> 00:21:27,130
<font color="#E5E5E5">we'll</font><font color="#CCCCCC"> be showing this later and we have</font>

468
00:21:24,760 --> 00:21:30,280
interrupt handler in this case<font color="#E5E5E5"> our</font>

469
00:21:27,130 --> 00:21:33,220
button is on line<font color="#CCCCCC"> 8 so</font><font color="#E5E5E5"> we need specific</font>

470
00:21:30,280 --> 00:21:35,950
<font color="#E5E5E5">interrupts which</font><font color="#CCCCCC"> will handle line 8</font><font color="#E5E5E5"> we</font>

471
00:21:33,220 --> 00:21:38,230
check if it is line 8 and do what<font color="#E5E5E5"> we</font>

472
00:21:35,950 --> 00:21:43,930
<font color="#CCCCCC">need so we</font><font color="#E5E5E5"> really make them for</font>

473
00:21:38,230 --> 00:21:47,140
available<font color="#E5E5E5"> and let's let trigger what</font>

474
00:21:43,930 --> 00:21:49,480
remains is to<font color="#E5E5E5"> go from the source</font><font color="#CCCCCC"> to the</font>

475
00:21:47,140 --> 00:21:52,540
<font color="#CCCCCC">hassle do compilation</font><font color="#E5E5E5"> pepper all over</font>

476
00:21:49,480 --> 00:21:55,810
<font color="#E5E5E5">blah blah</font><font color="#CCCCCC"> and he will upload everything</font>

477
00:21:52,540 --> 00:21:58,540
to<font color="#CCCCCC"> our device</font><font color="#E5E5E5"> power it on and will</font>

478
00:21:55,810 --> 00:22:00,639
detect<font color="#E5E5E5"> that it is running so we have</font>

479
00:21:58,540 --> 00:22:03,370
created<font color="#CCCCCC"> our first ability device</font><font color="#E5E5E5"> they</font>

480
00:22:00,640 --> 00:22:06,620
expect some profit from it of course<font color="#E5E5E5"> we</font>

481
00:22:03,370 --> 00:22:10,158
don't do<font color="#CCCCCC"> stuff for</font><font color="#E5E5E5"> free but</font>

482
00:22:06,620 --> 00:22:12,379
we make<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of mistakes</font><font color="#E5E5E5"> and dark Dark</font>

483
00:22:10,159 --> 00:22:14,419
Lord of Mordor is looking at you<font color="#E5E5E5"> and he</font>

484
00:22:12,380 --> 00:22:20,659
<font color="#E5E5E5">will do something bad to our device so</font>

485
00:22:14,419 --> 00:22:23,260
<font color="#CCCCCC">whitter</font><font color="#E5E5E5"> Dark Lord please okay so um one</font>

486
00:22:20,659 --> 00:22:26,840
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the things that it's interesting so</font>

487
00:22:23,260 --> 00:22:29,570
we have the good thing and the<font color="#CCCCCC"> bad thing</font>

488
00:22:26,840 --> 00:22:31,699
about<font color="#CCCCCC"> these embedded</font><font color="#E5E5E5"> systems and well</font>

489
00:22:29,570 --> 00:22:34,090
the good<font color="#E5E5E5"> thing is that they</font><font color="#CCCCCC"> are deeply</font>

490
00:22:31,700 --> 00:22:36,679
tied into the into the into the MCU<font color="#E5E5E5"> and</font>

491
00:22:34,090 --> 00:22:38,480
this means<font color="#E5E5E5"> that you have</font><font color="#CCCCCC"> a lot of</font>

492
00:22:36,679 --> 00:22:40,490
<font color="#E5E5E5">documentation</font><font color="#CCCCCC"> you can throw to the to</font>

493
00:22:38,480 --> 00:22:43,159
the<font color="#E5E5E5"> to the SE electronics for instance</font>

494
00:22:40,490 --> 00:22:47,570
we for this example we used we focused

495
00:22:43,159 --> 00:22:52,250
more<font color="#CCCCCC"> on the stm32f4 MCU</font><font color="#E5E5E5"> which is based</font>

496
00:22:47,570 --> 00:22:53,840
on<font color="#E5E5E5"> the on the arm</font><font color="#CCCCCC"> six m0</font><font color="#E5E5E5"> core and the</font>

497
00:22:52,250 --> 00:22:55,610
good thing is<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> embedded devices</font>

498
00:22:53,840 --> 00:22:58,100
they<font color="#CCCCCC"> need to be developed for the</font>

499
00:22:55,610 --> 00:22:59,270
specific MCU so this allows you to<font color="#E5E5E5"> that</font>

500
00:22:58,100 --> 00:23:01,610
you will have a lot of<font color="#E5E5E5"> documentation</font>

501
00:22:59,270 --> 00:23:04,070
about<font color="#E5E5E5"> the MCU the</font><font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> all the</font>

502
00:23:01,610 --> 00:23:06,110
architecture and this is a good<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> on</font>

503
00:23:04,070 --> 00:23:08,990
<font color="#CCCCCC">yet on the other side the bad thing is</font>

504
00:23:06,110 --> 00:23:10,490
<font color="#CCCCCC">that it's tied to</font><font color="#E5E5E5"> the MCU</font><font color="#CCCCCC"> so if you have</font>

505
00:23:08,990 --> 00:23:13,100
your<font color="#E5E5E5"> firmware you and you don't know</font>

506
00:23:10,490 --> 00:23:14,510
what is the target<font color="#CCCCCC"> of it so it will</font><font color="#E5E5E5"> be</font>

507
00:23:13,100 --> 00:23:16,370
hard for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to understand what's</font><font color="#E5E5E5"> going</font>

508
00:23:14,510 --> 00:23:19,070
<font color="#E5E5E5">on inside it because you</font><font color="#CCCCCC"> won't know how</font>

509
00:23:16,370 --> 00:23:22,219
<font color="#E5E5E5">the starting address is you don't know</font>

510
00:23:19,070 --> 00:23:26,840
how to approach it<font color="#E5E5E5"> so it's a good</font><font color="#CCCCCC"> thing</font>

511
00:23:22,220 --> 00:23:28,399
<font color="#E5E5E5">and it's a bad thing</font><font color="#CCCCCC"> so let's imagine</font>

512
00:23:26,840 --> 00:23:30,559
that we don't have a lot of<font color="#E5E5E5"> string</font>

513
00:23:28,399 --> 00:23:32,120
analysis usually<font color="#CCCCCC"> you think this kind</font><font color="#E5E5E5"> of</font>

514
00:23:30,559 --> 00:23:34,039
systems don't<font color="#E5E5E5"> really need to output</font><font color="#CCCCCC"> a</font>

515
00:23:32,120 --> 00:23:35,418
<font color="#E5E5E5">lot of things to the user so if you look</font>

516
00:23:34,039 --> 00:23:38,090
<font color="#E5E5E5">at the strings you don't get that many</font>

517
00:23:35,419 --> 00:23:42,770
things that<font color="#E5E5E5"> many that much information</font>

518
00:23:38,090 --> 00:23:45,678
has<font color="#CCCCCC"> levin said because the codes</font><font color="#E5E5E5"> of that</font>

519
00:23:42,770 --> 00:23:47,899
the user<font color="#E5E5E5"> code on</font><font color="#CCCCCC"> PRT OS</font><font color="#E5E5E5"> is embedded so</font>

520
00:23:45,679 --> 00:23:49,250
deeply into the operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> you</font>

521
00:23:47,899 --> 00:23:51,860
don't<font color="#E5E5E5"> really have</font><font color="#CCCCCC"> the syscalls that you</font>

522
00:23:49,250 --> 00:23:54,289
can search<font color="#CCCCCC"> for there are some of them</font>

523
00:23:51,860 --> 00:23:56,270
that<font color="#CCCCCC"> you become that is reused when</font><font color="#E5E5E5"> you</font>

524
00:23:54,289 --> 00:23:59,240
compile your<font color="#E5E5E5"> code like the scheduler but</font>

525
00:23:56,270 --> 00:24:05,168
<font color="#CCCCCC">in reality you don't have that</font><font color="#E5E5E5"> fiscals</font>

526
00:23:59,240 --> 00:24:05,169
to read memory<font color="#E5E5E5"> to read the some kind of</font>

527
00:24:05,440 --> 00:24:10,909
of<font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> don't have that so it's</font>

528
00:24:07,940 --> 00:24:12,830
not<font color="#CCCCCC"> that easy to look</font><font color="#E5E5E5"> and see where you</font>

529
00:24:10,909 --> 00:24:14,840
are<font color="#E5E5E5"> going to start and from the memory</font>

530
00:24:12,830 --> 00:24:16,939
point of view it's<font color="#CCCCCC"> not protected so when</font>

531
00:24:14,840 --> 00:24:18,590
your<font color="#CCCCCC"> application</font><font color="#E5E5E5"> is running basically</font>

532
00:24:16,940 --> 00:24:20,269
<font color="#E5E5E5">you are reading and writing from all</font>

533
00:24:18,590 --> 00:24:22,789
memory addresses depending on

534
00:24:20,269 --> 00:24:25,399
<font color="#E5E5E5">you are trying to read from a register</font>

535
00:24:22,789 --> 00:24:27,769
which<font color="#CCCCCC"> is site to give to a pin output or</font>

536
00:24:25,399 --> 00:24:29,748
or input or if you are<font color="#E5E5E5"> looking at the</font>

537
00:24:27,769 --> 00:24:31,369
<font color="#CCCCCC">ATO on an external interrupts so</font>

538
00:24:29,749 --> 00:24:34,009
everything<font color="#CCCCCC"> our memory addresses so you</font>

539
00:24:31,369 --> 00:24:35,570
<font color="#E5E5E5">don't really have the abstraction layer</font>

540
00:24:34,009 --> 00:24:38,149
that you have on normal<font color="#E5E5E5"> operating</font>

541
00:24:35,570 --> 00:24:40,039
systems and this leads us<font color="#E5E5E5"> to some kind</font>

542
00:24:38,149 --> 00:24:42,468
of difficulties when you're trying<font color="#E5E5E5"> to</font>

543
00:24:40,039 --> 00:24:44,089
reverse engineer<font color="#E5E5E5"> an application the RTOS</font>

544
00:24:42,469 --> 00:24:45,940
image because you don't really<font color="#E5E5E5"> have</font><font color="#CCCCCC"> the</font>

545
00:24:44,089 --> 00:24:53,059
usual desktop

546
00:24:45,940 --> 00:24:55,489
approach so can<font color="#E5E5E5"> we the first thing is</font>

547
00:24:53,059 --> 00:24:57,499
that we need by default<font color="#E5E5E5"> when we put the</font>

548
00:24:55,489 --> 00:25:00,139
image into<font color="#E5E5E5"> either like Vlad and said you</font>

549
00:24:57,499 --> 00:25:02,119
need to set<font color="#E5E5E5"> the initial the initial</font>

550
00:25:00,139 --> 00:25:04,549
address for the image<font color="#E5E5E5"> you need to have</font>

551
00:25:02,119 --> 00:25:05,629
some some<font color="#E5E5E5"> information the size of the</font>

552
00:25:04,549 --> 00:25:08,690
image you need to know<font color="#E5E5E5"> were exact</font>

553
00:25:05,629 --> 00:25:13,609
<font color="#CCCCCC">article and either will disassemble it</font>

554
00:25:08,690 --> 00:25:15,799
but the thing is the entry point<font color="#CCCCCC"> and it</font>

555
00:25:13,609 --> 00:25:17,089
might<font color="#E5E5E5"> be not very easy</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> the entry</font>

556
00:25:15,799 --> 00:25:18,469
point to see how your problem is

557
00:25:17,089 --> 00:25:19,999
<font color="#CCCCCC">starting you</font><font color="#E5E5E5"> can wandering around and</font>

558
00:25:18,469 --> 00:25:22,429
try to search for<font color="#E5E5E5"> it but it's not</font><font color="#CCCCCC"> that</font>

559
00:25:19,999 --> 00:25:25,700
<font color="#CCCCCC">easy and either</font><font color="#E5E5E5"> you might not detect it</font>

560
00:25:22,429 --> 00:25:31,329
so can<font color="#E5E5E5"> we</font><font color="#CCCCCC"> find it</font><font color="#E5E5E5"> how can</font><font color="#CCCCCC"> we do</font><font color="#E5E5E5"> it yes</font>

561
00:25:25,700 --> 00:25:35,059
we can<font color="#E5E5E5"> and one of the things that DST 32</font>

562
00:25:31,329 --> 00:25:38,089
by default they have they have a group

563
00:25:35,059 --> 00:25:40,719
of interrupt handlers that<font color="#CCCCCC"> will</font><font color="#E5E5E5"> help</font>

564
00:25:38,089 --> 00:25:43,999
<font color="#E5E5E5">that will by default</font><font color="#CCCCCC"> help the the</font>

565
00:25:40,719 --> 00:25:47,119
<font color="#CCCCCC">firmware</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> know how to be a wonder the</font>

566
00:25:43,999 --> 00:25:50,539
first<font color="#E5E5E5"> DMC</font><font color="#CCCCCC"> oh boots up</font><font color="#E5E5E5"> so in order</font><font color="#CCCCCC"> to</font>

567
00:25:47,119 --> 00:25:53,089
know where the<font color="#CCCCCC"> dead Enders</font><font color="#E5E5E5"> are the this</font>

568
00:25:50,539 --> 00:25:56,479
MCU has<font color="#E5E5E5"> the interpreter table which</font>

569
00:25:53,089 --> 00:26:00,769
pretty much is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> table</font><font color="#CCCCCC"> that holds all</font>

570
00:25:56,479 --> 00:26:03,200
the<font color="#CCCCCC"> information about about what kind of</font>

571
00:26:00,769 --> 00:26:05,169
interrupts can exist<font color="#E5E5E5"> on the MCU and one</font>

572
00:26:03,200 --> 00:26:09,229
of these interrupts<font color="#E5E5E5"> is the reset so</font>

573
00:26:05,169 --> 00:26:12,469
<font color="#CCCCCC">what's the reset more</font><font color="#E5E5E5"> then simply I</font>

574
00:26:09,229 --> 00:26:15,049
would so when you put the device<font color="#CCCCCC"> its</font>

575
00:26:12,469 --> 00:26:18,979
reset it's nothing else than that so if

576
00:26:15,049 --> 00:26:21,979
<font color="#E5E5E5">we look at the at this table and we</font>

577
00:26:18,979 --> 00:26:24,859
looked for the<font color="#E5E5E5"> interrupt</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the reset</font>

578
00:26:21,979 --> 00:26:26,809
interrupt handler<font color="#CCCCCC"> we</font><font color="#E5E5E5"> pretty much might</font>

579
00:26:24,859 --> 00:26:29,119
have<font color="#E5E5E5"> that's that that answer so if you</font>

580
00:26:26,809 --> 00:26:32,029
look there<font color="#E5E5E5"> you see that all going from</font>

581
00:26:29,119 --> 00:26:33,289
<font color="#E5E5E5">bottom to top</font><font color="#CCCCCC"> you have this is the the</font>

582
00:26:32,029 --> 00:26:34,020
actual<font color="#E5E5E5"> table that you can get from the</font>

583
00:26:33,289 --> 00:26:35,250
documentation

584
00:26:34,020 --> 00:26:36,780
and you can see<font color="#E5E5E5"> that you have</font><font color="#CCCCCC"> the</font>

585
00:26:35,250 --> 00:26:41,130
initial stack pointer and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> you have</font>

586
00:26:36,780 --> 00:26:43,860
the reset<font color="#E5E5E5"> so this table pretty much goes</font>

587
00:26:41,130 --> 00:26:46,140
to<font color="#CCCCCC"> this at the beginning of the image at</font>

588
00:26:43,860 --> 00:26:48,389
offset zero zero so<font color="#CCCCCC"> you can see that you</font>

589
00:26:46,140 --> 00:26:51,240
<font color="#E5E5E5">have some code there that was not is not</font>

590
00:26:48,390 --> 00:26:56,450
actually put into<font color="#E5E5E5"> that that table form</font>

591
00:26:51,240 --> 00:26:59,220
so what<font color="#E5E5E5"> we did was we</font><font color="#CCCCCC"> tried to get a</font>

592
00:26:56,450 --> 00:27:01,080
<font color="#CCCCCC">plugin that would help</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> to have a</font>

593
00:26:59,220 --> 00:27:02,190
mapping<font color="#CCCCCC"> between these</font><font color="#E5E5E5"> values and the</font>

594
00:27:01,080 --> 00:27:04,260
actual values that<font color="#E5E5E5"> are on the</font>

595
00:27:02,190 --> 00:27:07,440
documentation<font color="#CCCCCC"> so decided to first of all</font>

596
00:27:04,260 --> 00:27:09,629
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> have and</font><font color="#E5E5E5"> after we run the script</font>

597
00:27:07,440 --> 00:27:11,850
<font color="#CCCCCC">we'll see it like this</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we also added</font>

598
00:27:09,630 --> 00:27:13,410
<font color="#E5E5E5">some</font><font color="#CCCCCC"> documents some comments that will</font>

599
00:27:11,850 --> 00:27:15,990
help us<font color="#E5E5E5"> to initially understand what's</font>

600
00:27:13,410 --> 00:27:17,790
going<font color="#E5E5E5"> on so first we have the</font><font color="#CCCCCC"> the stack</font>

601
00:27:15,990 --> 00:27:19,980
<font color="#CCCCCC">valid then we have the reset</font><font color="#E5E5E5"> Handler and</font>

602
00:27:17,790 --> 00:27:23,399
there are other<font color="#CCCCCC"> members</font><font color="#E5E5E5"> like there's</font>

603
00:27:19,980 --> 00:27:25,650
like the the systick handler<font color="#CCCCCC"> or the SVC</font>

604
00:27:23,400 --> 00:27:29,850
<font color="#E5E5E5">handle which are used by the fire gos</font><font color="#CCCCCC"> to</font>

605
00:27:25,650 --> 00:27:33,840
manage the tasks so if we now after we

606
00:27:29,850 --> 00:27:35,939
<font color="#E5E5E5">have this the both addresses for the</font>

607
00:27:33,840 --> 00:27:38,520
<font color="#CCCCCC">intro table we can go there and we can</font>

608
00:27:35,940 --> 00:27:40,559
actually see what is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on so as soon</font>

609
00:27:38,520 --> 00:27:43,500
as<font color="#CCCCCC"> this device boots in this case what</font>

610
00:27:40,559 --> 00:27:45,960
<font color="#E5E5E5">she's doing is is basically putting the</font>

611
00:27:43,500 --> 00:27:48,840
initial stack address into the<font color="#E5E5E5"> stack</font>

612
00:27:45,960 --> 00:27:50,730
pointer which<font color="#E5E5E5"> which much can be the</font>

613
00:27:48,840 --> 00:27:53,879
first the<font color="#E5E5E5"> first action that</font><font color="#CCCCCC"> it does so</font>

614
00:27:50,730 --> 00:27:56,040
now we have<font color="#E5E5E5"> a now we have an entry</font><font color="#CCCCCC"> point</font>

615
00:27:53,880 --> 00:27:59,100
and<font color="#E5E5E5"> this helps us</font><font color="#CCCCCC"> to start our analysis</font>

616
00:27:56,040 --> 00:28:00,270
now we really can can see what our<font color="#E5E5E5"> code</font>

617
00:27:59,100 --> 00:28:03,300
starts to being executed

618
00:28:00,270 --> 00:28:05,879
of course<font color="#CCCCCC"> as we</font><font color="#E5E5E5"> said this is highly</font>

619
00:28:03,300 --> 00:28:08,309
<font color="#E5E5E5">dependent</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the MCU so the good thing</font>

620
00:28:05,880 --> 00:28:10,080
<font color="#E5E5E5">is that it's well documented and</font>

621
00:28:08,309 --> 00:28:12,690
probably if you know which MCU you are

622
00:28:10,080 --> 00:28:14,189
your image targets<font color="#E5E5E5"> you can go online and</font>

623
00:28:12,690 --> 00:28:16,650
<font color="#CCCCCC">search</font><font color="#E5E5E5"> for the documentation and you'll</font>

624
00:28:14,190 --> 00:28:19,200
find that that<font color="#E5E5E5"> the description of</font><font color="#CCCCCC"> that</font>

625
00:28:16,650 --> 00:28:24,360
<font color="#E5E5E5">table which will help you to understand</font>

626
00:28:19,200 --> 00:28:26,940
exactly<font color="#E5E5E5"> what it's doing</font><font color="#CCCCCC"> so now we have</font>

627
00:28:24,360 --> 00:28:31,290
an entry point<font color="#E5E5E5"> we know how to start but</font>

628
00:28:26,940 --> 00:28:33,330
as I said<font color="#E5E5E5"> also everything in our TRS is</font>

629
00:28:31,290 --> 00:28:35,879
pretty<font color="#E5E5E5"> much reading from memory</font><font color="#CCCCCC"> and</font>

630
00:28:33,330 --> 00:28:38,100
<font color="#CCCCCC">writing to memory addresses so there's</font>

631
00:28:35,880 --> 00:28:42,300
no<font color="#CCCCCC"> sis calls</font><font color="#E5E5E5"> so if you remember</font><font color="#CCCCCC"> I said</font>

632
00:28:38,100 --> 00:28:44,870
<font color="#CCCCCC">that all the peripherals</font><font color="#E5E5E5"> incidentally</font>

633
00:28:42,300 --> 00:28:47,100
use they are<font color="#CCCCCC"> managed</font><font color="#E5E5E5"> by the dresses so</font>

634
00:28:44,870 --> 00:28:49,830
these<font color="#E5E5E5"> ranges and the</font>

635
00:28:47,100 --> 00:28:52,080
<font color="#CCCCCC">offsets</font><font color="#E5E5E5"> can they be useful</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> us yeah</font>

636
00:28:49,830 --> 00:28:53,189
of<font color="#E5E5E5"> course they can for that from from</font>

637
00:28:52,080 --> 00:28:57,270
reading<font color="#E5E5E5"> that we can understand exactly</font>

638
00:28:53,190 --> 00:28:59,789
what what our image is doing so again<font color="#E5E5E5"> we</font>

639
00:28:57,270 --> 00:29:01,770
can go to to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> documentation of the</font>

640
00:28:59,789 --> 00:29:04,200
<font color="#CCCCCC">statistic and see you and what we did</font>

641
00:29:01,770 --> 00:29:06,960
was well since we are<font color="#E5E5E5"> doing a</font><font color="#CCCCCC"> plugin</font><font color="#E5E5E5"> to</font>

642
00:29:04,200 --> 00:29:10,049
help us we basically<font color="#CCCCCC"> ran up a plugin</font>

643
00:29:06,960 --> 00:29:12,720
<font color="#CCCCCC">that will have that has some information</font>

644
00:29:10,049 --> 00:29:14,340
about the documentation<font color="#E5E5E5"> it will list all</font>

645
00:29:12,720 --> 00:29:17,309
the<font color="#CCCCCC"> registers</font><font color="#E5E5E5"> that I mean we manipulated</font>

646
00:29:14,340 --> 00:29:19,080
<font color="#E5E5E5">the functions that that money put each</font>

647
00:29:17,309 --> 00:29:21,840
register so that<font color="#E5E5E5"> we can go directly</font><font color="#CCCCCC"> to</font>

648
00:29:19,080 --> 00:29:25,110
<font color="#CCCCCC">the</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> that we want to</font><font color="#E5E5E5"> see and and</font>

649
00:29:21,840 --> 00:29:27,389
also it will<font color="#E5E5E5"> have that well comments</font>

650
00:29:25,110 --> 00:29:30,120
that will help us to<font color="#CCCCCC"> manage it so in the</font>

651
00:29:27,390 --> 00:29:33,990
<font color="#E5E5E5">end we can see things like</font><font color="#CCCCCC"> this so for</font>

652
00:29:30,120 --> 00:29:36,330
<font color="#E5E5E5">instance in this case we know</font><font color="#CCCCCC"> that we</font>

653
00:29:33,990 --> 00:29:38,250
are attributing the<font color="#E5E5E5"> console the clock</font>

654
00:29:36,330 --> 00:29:41,789
control register this<font color="#E5E5E5"> is important for</font>

655
00:29:38,250 --> 00:29:44,039
instance because<font color="#E5E5E5"> if you want to see an a</font>

656
00:29:41,789 --> 00:29:46,530
peripheral that has some<font color="#E5E5E5"> kind of GPIO</font>

657
00:29:44,039 --> 00:29:49,230
reader right<font color="#E5E5E5"> it will have to have a</font>

658
00:29:46,530 --> 00:29:52,889
clock control register<font color="#CCCCCC"> attributed to it</font>

659
00:29:49,230 --> 00:29:56,120
so if by chance because some of these

660
00:29:52,890 --> 00:29:58,380
<font color="#E5E5E5">addresses can</font><font color="#CCCCCC"> be generated</font><font color="#E5E5E5"> in real</font><font color="#CCCCCC"> time</font>

661
00:29:56,120 --> 00:30:01,289
even though if you cannot<font color="#E5E5E5"> find the</font>

662
00:29:58,380 --> 00:30:03,240
explicit accreditor where the the GPIO

663
00:30:01,289 --> 00:30:05,129
is being written<font color="#CCCCCC"> you can just search for</font>

664
00:30:03,240 --> 00:30:07,230
<font color="#CCCCCC">this kind of registers which will tell</font>

665
00:30:05,130 --> 00:30:09,929
you<font color="#CCCCCC"> exactly which give air your buses</font>

666
00:30:07,230 --> 00:30:12,059
are<font color="#CCCCCC"> being used so because some of these</font>

667
00:30:09,929 --> 00:30:15,390
addresses<font color="#CCCCCC"> they can be are coded</font><font color="#E5E5E5"> and they</font>

668
00:30:12,059 --> 00:30:17,460
can be<font color="#CCCCCC"> generating</font><font color="#E5E5E5"> in memory however the</font>

669
00:30:15,390 --> 00:30:19,799
compiled of tends to generate<font color="#CCCCCC"> some of</font>

670
00:30:17,460 --> 00:30:21,600
<font color="#E5E5E5">them to keep some of them</font><font color="#CCCCCC"> hard-coded so</font>

671
00:30:19,799 --> 00:30:23,450
that it doesn't need<font color="#E5E5E5"> to make so much so</font>

672
00:30:21,600 --> 00:30:26,178
much<font color="#CCCCCC"> so many operations</font><font color="#E5E5E5"> during execution</font>

673
00:30:23,450 --> 00:30:30,000
<font color="#E5E5E5">the other one that is really</font><font color="#CCCCCC"> interesting</font>

674
00:30:26,179 --> 00:30:33,419
to see<font color="#E5E5E5"> is the Cystic the Cystic will</font>

675
00:30:30,000 --> 00:30:35,909
generate a clock basically and we'll

676
00:30:33,419 --> 00:30:37,710
call the interrupts the<font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> the</font>

677
00:30:35,909 --> 00:30:40,940
systick interrupt<font color="#E5E5E5"> every time the clock</font>

678
00:30:37,710 --> 00:30:43,830
reaches zero<font color="#E5E5E5"> so if you want to check for</font>

679
00:30:40,940 --> 00:30:46,500
<font color="#E5E5E5">tasks that</font><font color="#CCCCCC"> are in the loop</font><font color="#E5E5E5"> this is the</font>

680
00:30:43,830 --> 00:30:48,059
place to go and this will<font color="#E5E5E5"> this will tell</font>

681
00:30:46,500 --> 00:30:50,130
you exactly<font color="#CCCCCC"> how the clock is behaving</font>

682
00:30:48,059 --> 00:30:51,830
which is<font color="#E5E5E5"> also really important so that</font>

683
00:30:50,130 --> 00:30:55,320
<font color="#CCCCCC">you</font><font color="#E5E5E5"> if you for instance</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have a</font>

684
00:30:51,830 --> 00:30:57,570
firmware which is checking on certain

685
00:30:55,320 --> 00:30:59,800
intervals for<font color="#CCCCCC"> some signal that is coming</font>

686
00:30:57,570 --> 00:31:02,139
<font color="#CCCCCC">from an</font><font color="#E5E5E5"> external service</font>

687
00:30:59,800 --> 00:31:04,690
that<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can be it so it's it's also</font>

688
00:31:02,140 --> 00:31:09,130
<font color="#E5E5E5">very</font><font color="#CCCCCC"> interesting to</font><font color="#E5E5E5"> check the other</font>

689
00:31:04,690 --> 00:31:10,750
thing is that what we did<font color="#E5E5E5"> was</font><font color="#CCCCCC"> okay now</font>

690
00:31:09,130 --> 00:31:13,030
we<font color="#E5E5E5"> can see exactly a little now we can</font>

691
00:31:10,750 --> 00:31:14,980
see<font color="#E5E5E5"> exactly which which functions are</font>

692
00:31:13,030 --> 00:31:16,690
manipulating<font color="#CCCCCC"> the registers so we can go</font>

693
00:31:14,980 --> 00:31:18,670
<font color="#E5E5E5">you can have</font><font color="#CCCCCC"> a more</font><font color="#E5E5E5"> direct</font><font color="#CCCCCC"> approach we</font>

694
00:31:16,690 --> 00:31:20,380
can look into<font color="#CCCCCC"> the those functions</font><font color="#E5E5E5"> and</font>

695
00:31:18,670 --> 00:31:23,080
see exactly what<font color="#E5E5E5"> they are doing because</font>

696
00:31:20,380 --> 00:31:24,250
<font color="#E5E5E5">of those Watson is armed</font><font color="#CCCCCC"> so everyone</font>

697
00:31:23,080 --> 00:31:26,560
that knows<font color="#CCCCCC"> em</font><font color="#E5E5E5"> can will be able to</font>

698
00:31:24,250 --> 00:31:29,470
understand it<font color="#CCCCCC"> so this is much more about</font>

699
00:31:26,560 --> 00:31:31,030
how what what would<font color="#E5E5E5"> be the methodology</font>

700
00:31:29,470 --> 00:31:32,980
<font color="#E5E5E5">to get there instead</font><font color="#CCCCCC"> of just looking</font><font color="#E5E5E5"> at</font>

701
00:31:31,030 --> 00:31:36,580
<font color="#E5E5E5">the</font><font color="#CCCCCC"> code without</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> wandering</font>

702
00:31:32,980 --> 00:31:38,230
without<font color="#CCCCCC"> reading know where to look so in</font>

703
00:31:36,580 --> 00:31:40,090
this case for instance<font color="#E5E5E5"> what we what we</font>

704
00:31:38,230 --> 00:31:44,200
<font color="#CCCCCC">have</font><font color="#E5E5E5"> done is we are looking at the the</font>

705
00:31:40,090 --> 00:31:46,990
<font color="#E5E5E5">Cystic function and as you can see</font><font color="#CCCCCC"> up</font>

706
00:31:44,200 --> 00:31:49,300
<font color="#CCCCCC">there it's we are</font><font color="#E5E5E5"> setting</font><font color="#CCCCCC"> the reload</font>

707
00:31:46,990 --> 00:31:52,330
value and we are<font color="#E5E5E5"> doing the control</font>

708
00:31:49,300 --> 00:31:54,820
register so these specific registers

709
00:31:52,330 --> 00:31:57,040
<font color="#E5E5E5">they belong to the core to the harm core</font>

710
00:31:54,820 --> 00:31:58,990
not to the MCU because you have two

711
00:31:57,040 --> 00:32:00,940
<font color="#E5E5E5">different kinds</font><font color="#CCCCCC"> of registers</font><font color="#E5E5E5"> you'll have</font>

712
00:31:58,990 --> 00:32:02,620
the registers<font color="#CCCCCC"> which belong to the core</font>

713
00:32:00,940 --> 00:32:04,990
<font color="#E5E5E5">to the arm core and you'll have the</font>

714
00:32:02,620 --> 00:32:07,659
registers<font color="#CCCCCC"> which</font><font color="#E5E5E5"> are on the MCU so they</font>

715
00:32:04,990 --> 00:32:10,720
are not they are not the same and they

716
00:32:07,660 --> 00:32:13,360
are protected<font color="#CCCCCC"> in different ways but in</font>

717
00:32:10,720 --> 00:32:14,890
this case this is<font color="#CCCCCC"> just an example what</font>

718
00:32:13,360 --> 00:32:18,219
we are seeing<font color="#CCCCCC"> here</font><font color="#E5E5E5"> is that we</font><font color="#CCCCCC"> are</font>

719
00:32:14,890 --> 00:32:20,260
<font color="#E5E5E5">telling the we are configuring the</font>

720
00:32:18,220 --> 00:32:23,920
register for<font color="#E5E5E5"> the Cystic so the first one</font>

721
00:32:20,260 --> 00:32:26,470
we<font color="#CCCCCC"> are giving</font><font color="#E5E5E5"> the hit a thousand ticks</font>

722
00:32:23,920 --> 00:32:27,910
<font color="#E5E5E5">and after thousand ticks it will do</font>

723
00:32:26,470 --> 00:32:29,890
something<font color="#E5E5E5"> and that's defined</font><font color="#CCCCCC"> by the</font>

724
00:32:27,910 --> 00:32:31,720
second register<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> Cystic control</font>

725
00:32:29,890 --> 00:32:35,200
<font color="#E5E5E5">register so if you look at the</font>

726
00:32:31,720 --> 00:32:38,590
documentation<font color="#E5E5E5"> you should be going</font>

727
00:32:35,200 --> 00:32:43,450
<font color="#CCCCCC">through</font><font color="#E5E5E5"> the next one</font><font color="#CCCCCC"> oh sorry</font>

728
00:32:38,590 --> 00:32:44,830
<font color="#CCCCCC">no</font><font color="#E5E5E5"> problem crashes okay yeah so we're on</font>

729
00:32:43,450 --> 00:32:46,660
if you go if you look at the

730
00:32:44,830 --> 00:32:50,379
documentation<font color="#CCCCCC"> this casing</font><font color="#E5E5E5"> arm you will</font>

731
00:32:46,660 --> 00:32:52,540
see that those three bits are the ones

732
00:32:50,380 --> 00:32:54,910
that configure actually the register<font color="#E5E5E5"> so</font>

733
00:32:52,540 --> 00:32:57,010
<font color="#CCCCCC">when we do when we move the seven</font><font color="#E5E5E5"> into</font>

734
00:32:54,910 --> 00:32:59,050
<font color="#E5E5E5">the into that register what we are</font>

735
00:32:57,010 --> 00:33:01,000
saying is that well<font color="#E5E5E5"> we want the clock</font>

736
00:32:59,050 --> 00:33:03,909
source<font color="#E5E5E5"> to be one we want</font><font color="#CCCCCC"> the ticking to</font>

737
00:33:01,000 --> 00:33:05,650
be one and<font color="#E5E5E5"> one the clock enabled so the</font>

738
00:33:03,910 --> 00:33:07,000
clock source is just<font color="#E5E5E5"> saying that it's a</font>

739
00:33:05,650 --> 00:33:10,780
hardware clock it will go directly

740
00:33:07,000 --> 00:33:12,059
funded from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPU the</font><font color="#CCCCCC"> tick in is</font>

741
00:33:10,780 --> 00:33:14,639
saying there

742
00:33:12,059 --> 00:33:16,259
when the clock comes<font color="#E5E5E5"> to zero</font><font color="#CCCCCC"> it will</font>

743
00:33:14,639 --> 00:33:19,079
release<font color="#E5E5E5"> an interrupt and</font><font color="#CCCCCC"> it will stay</font>

744
00:33:16,259 --> 00:33:21,539
and<font color="#CCCCCC"> if you wait</font><font color="#E5E5E5"> it will not move on to</font>

745
00:33:19,079 --> 00:33:22,948
<font color="#CCCCCC">the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> circle and enable basically to</font>

746
00:33:21,539 --> 00:33:25,229
enable<font color="#CCCCCC"> the clock in its enabling the</font>

747
00:33:22,949 --> 00:33:26,789
clock<font color="#E5E5E5"> so in this case what</font><font color="#CCCCCC"> this</font>

748
00:33:25,229 --> 00:33:29,729
application<font color="#E5E5E5"> is doing is that at every</font>

749
00:33:26,789 --> 00:33:33,119
<font color="#E5E5E5">thousand</font><font color="#CCCCCC"> clicks it will generate an</font>

750
00:33:29,729 --> 00:33:35,279
interrupt<font color="#E5E5E5"> and it will wait so this is</font>

751
00:33:33,119 --> 00:33:38,519
kind<font color="#E5E5E5"> of thing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you find on</font><font color="#CCCCCC"> the</font>

752
00:33:35,279 --> 00:33:41,989
documentation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> n</font><font color="#E5E5E5"> on of all</font><font color="#CCCCCC"> MCU s in</font>

753
00:33:38,519 --> 00:33:44,819
<font color="#E5E5E5">this case all MCU s based on the the arm</font>

754
00:33:41,989 --> 00:33:46,829
<font color="#CCCCCC">6m zero will</font><font color="#E5E5E5"> have this kind of clock</font>

755
00:33:44,819 --> 00:33:48,779
<font color="#E5E5E5">which can be configured on whatever you</font>

756
00:33:46,829 --> 00:33:50,759
want<font color="#E5E5E5"> but depending on</font><font color="#CCCCCC"> the phase arm</font>

757
00:33:48,779 --> 00:33:52,139
<font color="#E5E5E5">course on depending on n different MCS</font>

758
00:33:50,759 --> 00:33:56,519
<font color="#E5E5E5">you can have you</font><font color="#CCCCCC"> can have different</font>

759
00:33:52,139 --> 00:33:58,859
registers so the thing here<font color="#CCCCCC"> is that this</font>

760
00:33:56,519 --> 00:34:00,929
what we did was<font color="#CCCCCC"> basically we</font><font color="#E5E5E5"> tried to</font>

761
00:33:58,859 --> 00:34:02,759
have kind<font color="#E5E5E5"> of plug-in that would help us</font>

762
00:34:00,929 --> 00:34:04,589
<font color="#CCCCCC">to understand</font><font color="#E5E5E5"> that code much easier than</font>

763
00:34:02,759 --> 00:34:07,109
<font color="#CCCCCC">just</font><font color="#E5E5E5"> looking and knowing the dresses</font>

764
00:34:04,589 --> 00:34:09,328
from the<font color="#E5E5E5"> top of our heads so the other</font>

765
00:34:07,109 --> 00:34:13,098
thing that it's also<font color="#E5E5E5"> interesting is that</font>

766
00:34:09,329 --> 00:34:14,940
when you have a free art<font color="#E5E5E5"> your SOS</font>

767
00:34:13,099 --> 00:34:17,759
<font color="#E5E5E5">basically you will have critical</font>

768
00:34:14,940 --> 00:34:20,909
sections and this is<font color="#E5E5E5"> really important</font>

769
00:34:17,759 --> 00:34:22,230
<font color="#E5E5E5">because sometimes you cannot wait you</font>

770
00:34:20,909 --> 00:34:23,909
cannot have an interrupt<font color="#CCCCCC"> while you are</font>

771
00:34:22,230 --> 00:34:25,409
doing<font color="#E5E5E5"> something if you are breaking</font><font color="#CCCCCC"> a</font>

772
00:34:23,909 --> 00:34:28,169
car you cannot have an interrupt to<font color="#CCCCCC"> say</font>

773
00:34:25,409 --> 00:34:31,349
well stop breaking and keep on so there

774
00:34:28,168 --> 00:34:33,658
are the harm processor has two specific

775
00:34:31,349 --> 00:34:38,369
<font color="#E5E5E5">instructions which allow you to enable</font>

776
00:34:33,659 --> 00:34:39,629
<font color="#E5E5E5">or disable their interrupts which is a</font>

777
00:34:38,369 --> 00:34:42,029
good place<font color="#CCCCCC"> to</font><font color="#E5E5E5"> start looking</font>

778
00:34:39,629 --> 00:34:44,279
if you are trying<font color="#E5E5E5"> to do the reverse</font>

779
00:34:42,029 --> 00:34:46,589
engineering<font color="#E5E5E5"> of an application it's a</font>

780
00:34:44,279 --> 00:34:49,409
good place<font color="#E5E5E5"> because most probably</font>

781
00:34:46,589 --> 00:34:54,980
critical codes<font color="#CCCCCC"> for your</font><font color="#E5E5E5"> your application</font>

782
00:34:49,409 --> 00:34:54,980
will<font color="#CCCCCC"> be inside disable enable block of</font>

783
00:34:55,339 --> 00:35:01,470
<font color="#CCCCCC">disable interrupt enable interrupt block</font>

784
00:34:57,539 --> 00:35:03,299
of code so the other thing that that<font color="#E5E5E5"> we</font>

785
00:35:01,470 --> 00:35:06,598
try<font color="#E5E5E5"> to do is basically list all the</font>

786
00:35:03,299 --> 00:35:08,609
functions<font color="#E5E5E5"> that enable the the interrupts</font>

787
00:35:06,599 --> 00:35:10,950
because that will be<font color="#E5E5E5"> the end of our</font>

788
00:35:08,609 --> 00:35:13,259
block so<font color="#E5E5E5"> we want to go from bottom</font><font color="#CCCCCC"> to up</font>

789
00:35:10,950 --> 00:35:15,558
to<font color="#E5E5E5"> up so in this case</font><font color="#CCCCCC"> we'll we just</font>

790
00:35:13,259 --> 00:35:17,490
<font color="#CCCCCC">resolved functions that that has the</font>

791
00:35:15,559 --> 00:35:18,720
instruction<font color="#E5E5E5"> to enable the interrupts and</font>

792
00:35:17,490 --> 00:35:21,000
then we list all functions that

793
00:35:18,720 --> 00:35:22,529
basically call that function<font color="#E5E5E5"> and this</font>

794
00:35:21,000 --> 00:35:24,030
<font color="#E5E5E5">helps us to understand that in this case</font>

795
00:35:22,529 --> 00:35:28,050
<font color="#E5E5E5">for instance we are the</font>

796
00:35:24,030 --> 00:35:29,490
the function the<font color="#CCCCCC"> 1.e4 disables the</font>

797
00:35:28,050 --> 00:35:31,260
interrupts right at the beginning<font color="#CCCCCC"> of its</font>

798
00:35:29,490 --> 00:35:35,129
<font color="#E5E5E5">execution and then it will be in able</font>

799
00:35:31,260 --> 00:35:36,570
them we really really down the code<font color="#E5E5E5"> so</font>

800
00:35:35,130 --> 00:35:38,610
if we wanted<font color="#E5E5E5"> to understand exactly what</font>

801
00:35:36,570 --> 00:35:40,170
that<font color="#E5E5E5"> block of code was doing the good</font>

802
00:35:38,610 --> 00:35:42,210
thing would be to try<font color="#E5E5E5"> to understand</font>

803
00:35:40,170 --> 00:35:45,480
<font color="#CCCCCC">exactly what's</font><font color="#E5E5E5"> going on between that</font>

804
00:35:42,210 --> 00:35:46,860
<font color="#CCCCCC">deadlock</font><font color="#E5E5E5"> so in here it's</font><font color="#CCCCCC"> a same function</font>

805
00:35:45,480 --> 00:35:49,980
but you'll see<font color="#CCCCCC"> that we are calling there</font>

806
00:35:46,860 --> 00:35:51,990
the CDC which we identified as being<font color="#E5E5E5"> one</font>

807
00:35:49,980 --> 00:35:54,060
<font color="#CCCCCC">of the the function that</font><font color="#E5E5E5"> we're inside it</font>

808
00:35:51,990 --> 00:35:56,459
<font color="#CCCCCC">it has</font><font color="#E5E5E5"> the code to re-enable the</font>

809
00:35:54,060 --> 00:35:58,640
interrupts now enable and disable<font color="#E5E5E5"> the</font>

810
00:35:56,460 --> 00:36:01,650
<font color="#E5E5E5">interrupts is not that linear because</font>

811
00:35:58,640 --> 00:36:04,410
there are a group of each interrupts

812
00:36:01,650 --> 00:36:06,600
will have<font color="#E5E5E5"> different priorities</font><font color="#CCCCCC"> and there</font>

813
00:36:04,410 --> 00:36:09,750
are a couple of priorities that<font color="#CCCCCC"> will</font>

814
00:36:06,600 --> 00:36:12,960
<font color="#E5E5E5">actually make</font><font color="#CCCCCC"> this the kernel of the ask</font>

815
00:36:09,750 --> 00:36:14,760
<font color="#E5E5E5">us to stop and execute the function at</font>

816
00:36:12,960 --> 00:36:17,220
the anvil<font color="#CCCCCC"> that has that handle that</font>

817
00:36:14,760 --> 00:36:21,330
<font color="#E5E5E5">interrupts so it really depends</font><font color="#CCCCCC"> on the</font>

818
00:36:17,220 --> 00:36:24,509
<font color="#CCCCCC">the</font><font color="#E5E5E5"> priority of your code again there</font>

819
00:36:21,330 --> 00:36:28,350
are there are registers<font color="#E5E5E5"> that are used to</font>

820
00:36:24,510 --> 00:36:31,470
<font color="#E5E5E5">define the</font><font color="#CCCCCC"> priorities of each each each</font>

821
00:36:28,350 --> 00:36:33,060
<font color="#CCCCCC">Handler and again that's just a register</font>

822
00:36:31,470 --> 00:36:34,970
inside the<font color="#CCCCCC"> MCU just need to look at the</font>

823
00:36:33,060 --> 00:36:37,799
documentation you'll have exactly

824
00:36:34,970 --> 00:36:39,899
exactly<font color="#E5E5E5"> what registers we are talking</font>

825
00:36:37,800 --> 00:36:43,110
about so there<font color="#E5E5E5"> are a</font><font color="#CCCCCC"> couple of</font><font color="#E5E5E5"> other</font>

826
00:36:39,900 --> 00:36:45,810
<font color="#E5E5E5">really interesting registers like the</font>

827
00:36:43,110 --> 00:36:48,450
the<font color="#CCCCCC"> sis config X which is basically a</font>

828
00:36:45,810 --> 00:36:50,490
register<font color="#CCCCCC"> that fuel money put well</font><font color="#E5E5E5"> going</font>

829
00:36:48,450 --> 00:36:52,259
<font color="#E5E5E5">a</font><font color="#CCCCCC"> little back all MCU is they have</font>

830
00:36:50,490 --> 00:36:55,790
several<font color="#E5E5E5"> pins and those pins will be</font>

831
00:36:52,260 --> 00:36:59,640
connected<font color="#CCCCCC"> to a multi multiplier</font>

832
00:36:55,790 --> 00:37:01,650
multiplier which basically will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> an a</font>

833
00:36:59,640 --> 00:37:03,420
will enable<font color="#E5E5E5"> will be enabled or disabled</font>

834
00:37:01,650 --> 00:37:05,340
according with<font color="#E5E5E5"> the bits</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> have so</font>

835
00:37:03,420 --> 00:37:07,020
<font color="#E5E5E5">what this means is that you</font><font color="#CCCCCC"> basically</font>

836
00:37:05,340 --> 00:37:09,000
<font color="#E5E5E5">have all depending on the</font><font color="#CCCCCC"> architects but</font>

837
00:37:07,020 --> 00:37:11,520
on this architecture you have<font color="#E5E5E5"> two buses</font>

838
00:37:09,000 --> 00:37:12,900
which have several GPIO s and then you

839
00:37:11,520 --> 00:37:16,070
need<font color="#E5E5E5"> to select which ones you want to</font>

840
00:37:12,900 --> 00:37:19,080
check so this register the<font color="#CCCCCC"> Cisco 'fuck</font>

841
00:37:16,070 --> 00:37:21,300
ext which basically allows you<font color="#CCCCCC"> to</font>

842
00:37:19,080 --> 00:37:24,390
configure which external<font color="#E5E5E5"> interrupts you</font>

843
00:37:21,300 --> 00:37:26,850
want to have into your<font color="#E5E5E5"> MCU</font><font color="#CCCCCC"> and then you</font>

844
00:37:24,390 --> 00:37:28,680
have the the ext<font color="#E5E5E5"> I register which</font>

845
00:37:26,850 --> 00:37:30,600
basically allows you<font color="#CCCCCC"> to define the</font>

846
00:37:28,680 --> 00:37:34,020
<font color="#CCCCCC">angles</font><font color="#E5E5E5"> for those interrupts and the</font>

847
00:37:30,600 --> 00:37:36,380
<font color="#CCCCCC">pings that you'll have also the clock</font>

848
00:37:34,020 --> 00:37:38,160
<font color="#E5E5E5">source we have already talked about and</font>

849
00:37:36,380 --> 00:37:40,050
<font color="#E5E5E5">the</font><font color="#CCCCCC"> nvi reg</font>

850
00:37:38,160 --> 00:37:43,230
as well the net vector<font color="#CCCCCC"> interrupt control</font>

851
00:37:40,050 --> 00:37:46,800
which also<font color="#E5E5E5"> it's the one that allows you</font>

852
00:37:43,230 --> 00:37:48,780
<font color="#E5E5E5">to define actually to define the</font><font color="#CCCCCC"> the</font>

853
00:37:46,800 --> 00:37:50,640
<font color="#E5E5E5">interrupts that you will have so how you</font>

854
00:37:48,780 --> 00:37:52,080
<font color="#CCCCCC">land all</font><font color="#E5E5E5"> those interrupts in which are</font>

855
00:37:50,640 --> 00:37:56,009
the<font color="#E5E5E5"> priority</font><font color="#CCCCCC"> that you have on those</font>

856
00:37:52,080 --> 00:37:58,350
interrupts<font color="#CCCCCC"> if the ext I allows you to do</font>

857
00:37:56,010 --> 00:37:59,430
to define which are which ones are the

858
00:37:58,350 --> 00:38:03,630
external<font color="#E5E5E5"> interrupts that</font><font color="#CCCCCC"> you will be</font>

859
00:37:59,430 --> 00:38:05,669
<font color="#CCCCCC">using</font><font color="#E5E5E5"> and on which pins the the</font><font color="#CCCCCC"> nvi will</font>

860
00:38:03,630 --> 00:38:07,770
allow you<font color="#E5E5E5"> to define the priority</font><font color="#CCCCCC"> of</font>

861
00:38:05,670 --> 00:38:10,380
those of those<font color="#E5E5E5"> of</font><font color="#CCCCCC"> those interrupts</font><font color="#E5E5E5"> and</font>

862
00:38:07,770 --> 00:38:11,790
then we have the the<font color="#E5E5E5"> clock which is</font><font color="#CCCCCC"> also</font>

863
00:38:10,380 --> 00:38:14,460
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> because if you</font><font color="#E5E5E5"> want to have</font>

864
00:38:11,790 --> 00:38:16,440
a GPIO<font color="#E5E5E5"> external</font><font color="#CCCCCC"> which accelerated</font><font color="#E5E5E5"> to</font>

865
00:38:14,460 --> 00:38:19,770
read from an esper<font color="#E5E5E5"> some of from a flash</font>

866
00:38:16,440 --> 00:38:22,200
<font color="#E5E5E5">flash memory or</font><font color="#CCCCCC"> from some other</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font>

867
00:38:19,770 --> 00:38:25,460
external<font color="#E5E5E5"> device</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will need to give it</font>

868
00:38:22,200 --> 00:38:29,069
a clock so even if you<font color="#E5E5E5"> don't find the</font>

869
00:38:25,460 --> 00:38:31,890
<font color="#E5E5E5">address that allows you to</font><font color="#CCCCCC"> identify</font>

870
00:38:29,070 --> 00:38:34,560
which pin you are using you can<font color="#E5E5E5"> check</font>

871
00:38:31,890 --> 00:38:36,060
this register to see which pins are

872
00:38:34,560 --> 00:38:38,220
being enabled which<font color="#CCCCCC"> GPIOs are being</font>

873
00:38:36,060 --> 00:38:41,130
enabled so it gives you a clue<font color="#E5E5E5"> or where</font>

874
00:38:38,220 --> 00:38:42,899
<font color="#CCCCCC">to</font><font color="#E5E5E5"> find afterwards what you need so and</font>

875
00:38:41,130 --> 00:38:46,110
based on this basically what we did was

876
00:38:42,900 --> 00:38:48,660
<font color="#E5E5E5">well we define the list of registers so</font>

877
00:38:46,110 --> 00:38:51,090
the<font color="#CCCCCC"> plugin that we that we</font><font color="#E5E5E5"> did when is</font>

878
00:38:48,660 --> 00:38:52,890
<font color="#CCCCCC">advocated basically</font><font color="#E5E5E5"> search the code for</font>

879
00:38:51,090 --> 00:38:54,750
all of<font color="#E5E5E5"> these registers and will and</font>

880
00:38:52,890 --> 00:38:56,220
which will<font color="#E5E5E5"> give</font><font color="#CCCCCC"> us this output which</font>

881
00:38:54,750 --> 00:38:58,230
allows us<font color="#E5E5E5"> to understand which functions</font>

882
00:38:56,220 --> 00:39:00,419
are doing what and at the same time<font color="#E5E5E5"> it</font>

883
00:38:58,230 --> 00:39:01,530
will<font color="#E5E5E5"> also add some codes some comments</font>

884
00:39:00,420 --> 00:39:03,690
<font color="#E5E5E5">on the code so that you</font><font color="#CCCCCC"> want your money</font>

885
00:39:01,530 --> 00:39:05,190
<font color="#E5E5E5">going through it and looking at the code</font>

886
00:39:03,690 --> 00:39:09,000
you can<font color="#E5E5E5"> more a</font><font color="#CCCCCC"> seven under single of</font>

887
00:39:05,190 --> 00:39:10,890
what's going<font color="#E5E5E5"> on so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is some</font><font color="#CCCCCC"> there's</font>

888
00:39:09,000 --> 00:39:15,630
<font color="#E5E5E5">a lot of work to be done</font><font color="#CCCCCC"> on this on</font><font color="#E5E5E5"> this</font>

889
00:39:10,890 --> 00:39:18,930
basically because there's this<font color="#E5E5E5"> is highly</font>

890
00:39:15,630 --> 00:39:20,970
depending on the on the<font color="#E5E5E5"> MCU so not all</font>

891
00:39:18,930 --> 00:39:22,020
<font color="#E5E5E5">of them will</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same registers</font><font color="#E5E5E5"> so</font>

892
00:39:20,970 --> 00:39:24,330
that we need<font color="#E5E5E5"> to implement some</font>

893
00:39:22,020 --> 00:39:25,980
heuristics<font color="#CCCCCC"> to find registers which is</font>

894
00:39:24,330 --> 00:39:28,110
which<font color="#CCCCCC"> is which are</font><font color="#E5E5E5"> being created</font>

895
00:39:25,980 --> 00:39:30,240
dynamically so that we can know<font color="#CCCCCC"> we can</font>

896
00:39:28,110 --> 00:39:32,520
also try to help<font color="#CCCCCC"> analyze</font><font color="#E5E5E5"> identify which</font>

897
00:39:30,240 --> 00:39:35,419
which interrupts in which<font color="#E5E5E5"> external</font>

898
00:39:32,520 --> 00:39:37,740
devices are<font color="#E5E5E5"> being used there's also</font>

899
00:39:35,420 --> 00:39:40,050
<font color="#E5E5E5">another one another thing that we want</font>

900
00:39:37,740 --> 00:39:41,549
to do which basically<font color="#E5E5E5"> looks at the table</font>

901
00:39:40,050 --> 00:39:43,380
that we talked about<font color="#E5E5E5"> in decodes if you</font>

902
00:39:41,550 --> 00:39:47,160
automatically the<font color="#CCCCCC"> code that</font><font color="#E5E5E5"> are being</font>

903
00:39:43,380 --> 00:39:49,230
<font color="#CCCCCC">pointed to it and well there's a lot of</font>

904
00:39:47,160 --> 00:39:52,140
work to be<font color="#CCCCCC"> done especially because</font>

905
00:39:49,230 --> 00:39:53,820
there's so many<font color="#E5E5E5"> different</font><font color="#CCCCCC"> ends you</font><font color="#E5E5E5"> use</font>

906
00:39:52,140 --> 00:39:56,160
<font color="#E5E5E5">many different</font><font color="#CCCCCC"> course that can be used</font>

907
00:39:53,820 --> 00:39:58,860
that doing this for all<font color="#CCCCCC"> of them it's</font>

908
00:39:56,160 --> 00:40:00,629
<font color="#CCCCCC">really about it's a huge task</font><font color="#E5E5E5"> of reading</font>

909
00:39:58,860 --> 00:40:03,660
<font color="#E5E5E5">documentation and copy documentation so</font>

910
00:40:00,630 --> 00:40:05,700
the idea is that this plug-in<font color="#E5E5E5"> can be</font>

911
00:40:03,660 --> 00:40:08,670
<font color="#CCCCCC">updated by anyone</font><font color="#E5E5E5"> and then anyone can</font>

912
00:40:05,700 --> 00:40:10,620
<font color="#E5E5E5">just basically vote as they need another</font>

913
00:40:08,670 --> 00:40:13,050
thing<font color="#E5E5E5"> that we would like to to achieve</font>

914
00:40:10,620 --> 00:40:14,730
<font color="#E5E5E5">is the identification of the type</font><font color="#CCCCCC"> of</font>

915
00:40:13,050 --> 00:40:16,770
image which<font color="#E5E5E5"> is something that</font><font color="#CCCCCC"> is not</font>

916
00:40:14,730 --> 00:40:19,260
that they're easy<font color="#E5E5E5"> and again it's</font><font color="#CCCCCC"> fairly</font>

917
00:40:16,770 --> 00:40:22,290
dependent on the on the<font color="#CCCCCC"> MCS on the</font><font color="#E5E5E5"> CPUs</font>

918
00:40:19,260 --> 00:40:31,800
and<font color="#E5E5E5"> all thank you</font>

919
00:40:22,290 --> 00:40:38,400
that's basically it<font color="#E5E5E5"> we have time for</font>

920
00:40:31,800 --> 00:40:41,880
questions<font color="#E5E5E5"> if you have</font><font color="#CCCCCC"> Hey</font>

921
00:40:38,400 --> 00:40:44,640
I have one<font color="#CCCCCC"> question but it's because</font><font color="#E5E5E5"> I</font>

922
00:40:41,880 --> 00:40:47,340
haven't<font color="#E5E5E5"> understood you were talking</font>

923
00:40:44,640 --> 00:40:48,060
<font color="#E5E5E5">about the interrupter</font><font color="#CCCCCC"> levels</font><font color="#E5E5E5"> can you</font>

924
00:40:47,340 --> 00:40:51,420
<font color="#CCCCCC">receive it</font>

925
00:40:48,060 --> 00:40:53,190
can you react sane that<font color="#E5E5E5"> sorry you were</font>

926
00:40:51,420 --> 00:40:55,050
speaking about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> interrupts level it's</font>

927
00:40:53,190 --> 00:40:58,470
<font color="#E5E5E5">the art of years I have not</font><font color="#CCCCCC"> understood</font>

928
00:40:55,050 --> 00:41:00,540
<font color="#CCCCCC">so when you when we enable or disable</font>

929
00:40:58,470 --> 00:41:02,790
interrupts that's possible the<font color="#CCCCCC"> MCU will</font>

930
00:41:00,540 --> 00:41:05,430
do that however<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to give it a</font>

931
00:41:02,790 --> 00:41:07,590
priority<font color="#E5E5E5"> and there are certain certain</font>

932
00:41:05,430 --> 00:41:09,419
level of priority<font color="#E5E5E5"> between three and</font><font color="#CCCCCC"> one</font>

933
00:41:07,590 --> 00:41:12,000
which even though we<font color="#E5E5E5"> disable the</font>

934
00:41:09,420 --> 00:41:14,790
<font color="#E5E5E5">interrupts the the</font><font color="#CCCCCC"> call will always and</font>

935
00:41:12,000 --> 00:41:16,890
execute the handler<font color="#E5E5E5"> because and even the</font>

936
00:41:14,790 --> 00:41:19,920
<font color="#E5E5E5">ask us kernel will stop to execute that</font>

937
00:41:16,890 --> 00:41:21,330
that task so<font color="#E5E5E5"> you can really when we see</font>

938
00:41:19,920 --> 00:41:23,850
that<font color="#E5E5E5"> we are disabled and</font><font color="#CCCCCC"> our enable</font>

939
00:41:21,330 --> 00:41:25,920
interrupts we must be careful<font color="#CCCCCC"> because</font><font color="#E5E5E5"> we</font>

940
00:41:23,850 --> 00:41:28,200
<font color="#E5E5E5">not we cannot assume that that will</font>

941
00:41:25,920 --> 00:41:30,330
happen<font color="#CCCCCC"> 100% of</font><font color="#E5E5E5"> our code if you have a</font>

942
00:41:28,200 --> 00:41:32,490
test which<font color="#E5E5E5"> is yet one even if you are</font>

943
00:41:30,330 --> 00:41:33,660
running something else that that<font color="#E5E5E5"> handler</font>

944
00:41:32,490 --> 00:41:35,700
will be executed<font color="#E5E5E5"> when the interrupt</font>

945
00:41:33,660 --> 00:41:38,220
occurs<font color="#E5E5E5"> even if you disable them it's</font>

946
00:41:35,700 --> 00:41:42,350
like the higher quell<font color="#E5E5E5"> more or less yeah</font>

947
00:41:38,220 --> 00:41:42,350
<font color="#CCCCCC">okay yeah</font><font color="#E5E5E5"> thanks</font>

948
00:41:46,300 --> 00:41:53,680
nobody<font color="#CCCCCC"> know</font><font color="#E5E5E5"> me okay</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so thank you</font>

949
00:41:51,110 --> 00:41:53,680
<font color="#CCCCCC">guys thank</font><font color="#E5E5E5"> you</font>

950
00:41:53,690 --> 00:41:58,909
[Applause]

