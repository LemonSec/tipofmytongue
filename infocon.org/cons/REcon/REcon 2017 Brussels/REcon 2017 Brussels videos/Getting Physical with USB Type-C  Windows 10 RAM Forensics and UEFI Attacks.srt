1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,960 --> 00:00:13,309
<font color="#CCCCCC">hoggle 2017</font>

3
00:00:17,660 --> 00:00:19,720
you

4
00:00:21,070 --> 00:00:27,380
<font color="#E5E5E5">all right welcome everyone</font>

5
00:00:23,869 --> 00:00:29,689
sorry for the surprise and<font color="#CCCCCC"> TB anus I</font>

6
00:00:27,380 --> 00:00:33,500
wasn't sure what I talked about<font color="#CCCCCC"> but I</font>

7
00:00:29,689 --> 00:00:37,610
figured<font color="#E5E5E5"> out last night</font><font color="#CCCCCC"> so did a fox</font>

8
00:00:33,500 --> 00:00:40,309
going<font color="#CCCCCC"> to be about USB type-c and what</font>

9
00:00:37,610 --> 00:00:43,780
that<font color="#E5E5E5"> means</font><font color="#CCCCCC"> for DMA attacks against</font>

10
00:00:40,309 --> 00:00:46,690
Windows specifically<font color="#E5E5E5"> and also some EFI</font>

11
00:00:43,780 --> 00:00:49,460
realizations<font color="#CCCCCC"> that come across with that</font>

12
00:00:46,690 --> 00:00:51,739
<font color="#CCCCCC">especially in the</font><font color="#E5E5E5"> light of</font><font color="#CCCCCC"> type-c</font>

13
00:00:49,460 --> 00:00:54,890
becoming much more<font color="#CCCCCC"> prevalent</font><font color="#E5E5E5"> in office</font>

14
00:00:51,739 --> 00:00:58,669
of machines out<font color="#CCCCCC"> there so</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a little</font>

15
00:00:54,890 --> 00:01:01,190
bit about myself<font color="#E5E5E5"> I live and dream in</font>

16
00:00:58,670 --> 00:01:03,379
Windows when I go to sleep I just<font color="#E5E5E5"> see</font>

17
00:01:01,190 --> 00:01:05,840
<font color="#E5E5E5">kernel code</font><font color="#CCCCCC"> and I've been</font><font color="#E5E5E5"> doing this for</font>

18
00:01:03,379 --> 00:01:08,710
about 17 years now which seems like a

19
00:01:05,840 --> 00:01:10,660
really long<font color="#CCCCCC"> time so I like to</font><font color="#E5E5E5"> look at</font>

20
00:01:08,710 --> 00:01:12,979
Windows and operating systems in general

21
00:01:10,660 --> 00:01:15,229
<font color="#CCCCCC">I'm mostly dabble on the software side</font>

22
00:01:12,979 --> 00:01:17,229
<font color="#E5E5E5">but every once in a while I like to</font>

23
00:01:15,229 --> 00:01:19,820
<font color="#E5E5E5">remind myself</font><font color="#CCCCCC"> that there's hardware to</font>

24
00:01:17,229 --> 00:01:22,700
<font color="#E5E5E5">oops I've done some stuff around SMC</font>

25
00:01:19,820 --> 00:01:26,508
firmware<font color="#CCCCCC"> and today I'll be talking</font><font color="#E5E5E5"> about</font>

26
00:01:22,700 --> 00:01:29,750
<font color="#E5E5E5">you know type C</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> thunderbolt so</font>

27
00:01:26,509 --> 00:01:32,570
basically what's happening these days<font color="#E5E5E5"> is</font>

28
00:01:29,750 --> 00:01:37,970
<font color="#E5E5E5">just they're starting to be cheap not</font>

29
00:01:32,570 --> 00:01:39,889
<font color="#E5E5E5">fpga-based affordable USB</font><font color="#CCCCCC"> 2 PCIe</font><font color="#E5E5E5"> devices</font>

30
00:01:37,970 --> 00:01:41,990
for<font color="#CCCCCC"> example like the one I've got</font><font color="#E5E5E5"> right</font>

31
00:01:39,890 --> 00:01:44,119
here<font color="#E5E5E5"> which is in a few hundred</font><font color="#CCCCCC"> dollars</font>

32
00:01:41,990 --> 00:01:46,280
<font color="#E5E5E5">which is still expensive but it's way</font>

33
00:01:44,119 --> 00:01:47,659
cheaper than<font color="#E5E5E5"> other kinds of devices that</font>

34
00:01:46,280 --> 00:01:49,820
<font color="#E5E5E5">would give you access to the PCI bus</font>

35
00:01:47,659 --> 00:01:52,220
which are actually<font color="#CCCCCC"> either thousands of</font>

36
00:01:49,820 --> 00:01:54,350
dollars or you need to<font color="#CCCCCC"> you know buy and</font>

37
00:01:52,220 --> 00:01:56,570
build<font color="#E5E5E5"> your own FPGA and do your own</font>

38
00:01:54,350 --> 00:02:00,259
programming<font color="#E5E5E5"> of it second thing that's</font>

39
00:01:56,570 --> 00:02:03,048
happening is<font color="#CCCCCC"> type</font><font color="#E5E5E5"> C it's bringing sound</font>

40
00:02:00,259 --> 00:02:05,329
about<font color="#CCCCCC"> three to</font><font color="#E5E5E5"> Windows devices and</font><font color="#CCCCCC"> not</font>

41
00:02:03,049 --> 00:02:07,310
just Mac devices<font color="#E5E5E5"> so this is leading</font><font color="#CCCCCC"> to</font>

42
00:02:05,329 --> 00:02:10,419
an explosion<font color="#E5E5E5"> of Thunderbolt</font><font color="#CCCCCC"> 3 capable</font>

43
00:02:07,310 --> 00:02:14,420
devices and Thunderbolt 3 is<font color="#E5E5E5"> basically</font>

44
00:02:10,419 --> 00:02:16,518
PCI Express over cables<font color="#E5E5E5"> so we're</font>

45
00:02:14,420 --> 00:02:18,679
<font color="#CCCCCC">starting</font><font color="#E5E5E5"> to get USB</font><font color="#CCCCCC"> 2 PCI Express</font>

46
00:02:16,519 --> 00:02:21,410
becoming a commodity<font color="#E5E5E5"> we're starting to</font>

47
00:02:18,680 --> 00:02:23,720
see PCI Express over<font color="#E5E5E5"> USB type-c become a</font>

48
00:02:21,410 --> 00:02:27,160
commodity<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> combining is</font><font color="#CCCCCC"> together</font>

49
00:02:23,720 --> 00:02:29,720
you can now very cheaply<font color="#E5E5E5"> have access to</font>

50
00:02:27,160 --> 00:02:33,560
the PCI<font color="#CCCCCC"> Express bus of another machine</font>

51
00:02:29,720 --> 00:02:36,470
<font color="#E5E5E5">over the USB bus from another which is</font>

52
00:02:33,560 --> 00:02:40,819
exactly what I'll<font color="#E5E5E5"> be showing today so</font>

53
00:02:36,470 --> 00:02:42,680
this used to<font color="#E5E5E5"> class for example</font><font color="#CCCCCC"> 9000 $199</font>

54
00:02:40,819 --> 00:02:44,690
you can still buy<font color="#E5E5E5"> this today something</font>

55
00:02:42,680 --> 00:02:46,580
<font color="#CCCCCC">called</font><font color="#E5E5E5"> a capture guard and if you've got</font>

56
00:02:44,690 --> 00:02:49,160
<font color="#E5E5E5">nine thousand</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> hundred</font><font color="#CCCCCC"> ninety-nine</font>

57
00:02:46,580 --> 00:02:52,280
<font color="#E5E5E5">dollars you buy one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these cards and</font>

58
00:02:49,160 --> 00:02:56,420
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can do memory acquisition and lost</font>

59
00:02:52,280 --> 00:02:58,880
<font color="#E5E5E5">password recovery</font><font color="#CCCCCC"> on other machines but</font>

60
00:02:56,420 --> 00:03:00,890
with modern<font color="#CCCCCC"> hardware today you can</font>

61
00:02:58,880 --> 00:03:02,720
rebuild<font color="#CCCCCC"> pretty much exactly that for</font>

62
00:03:00,890 --> 00:03:04,518
<font color="#E5E5E5">about</font><font color="#CCCCCC"> three hundred fifty dollars</font><font color="#E5E5E5"> and</font>

63
00:03:02,720 --> 00:03:05,930
that's<font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> lazy like I am because</font>

64
00:03:04,519 --> 00:03:07,730
<font color="#E5E5E5">otherwise you could just actually buy</font>

65
00:03:05,930 --> 00:03:09,230
the chips<font color="#E5E5E5"> that you need and it would</font>

66
00:03:07,730 --> 00:03:10,819
cost you probably<font color="#CCCCCC"> about</font><font color="#E5E5E5"> fifty dollars</font>

67
00:03:09,230 --> 00:03:13,548
<font color="#E5E5E5">instead but if you just want to buy you</font>

68
00:03:10,819 --> 00:03:15,890
know ready-made cards<font color="#E5E5E5"> plug them in</font>

69
00:03:13,549 --> 00:03:18,860
together<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> three hundred and fifty</font>

70
00:03:15,890 --> 00:03:20,390
<font color="#E5E5E5">dollars and again</font><font color="#CCCCCC"> it's not cheap yet but</font>

71
00:03:18,860 --> 00:03:22,480
it's still a lot<font color="#E5E5E5"> better than nine</font>

72
00:03:20,390 --> 00:03:24,529
thousand one<font color="#CCCCCC"> hundred ninety nine dollars</font>

73
00:03:22,480 --> 00:03:26,660
<font color="#CCCCCC">so I'll talk</font><font color="#E5E5E5"> a bit about previous</font>

74
00:03:24,530 --> 00:03:27,830
research around the space because

75
00:03:26,660 --> 00:03:30,290
<font color="#CCCCCC">obviously there's been</font><font color="#E5E5E5"> a lot of work</font>

76
00:03:27,830 --> 00:03:32,930
done<font color="#E5E5E5"> around external DMA attacks around</font>

77
00:03:30,290 --> 00:03:35,150
<font color="#CCCCCC">thunderbolt</font><font color="#E5E5E5"> so I just want to point out</font>

78
00:03:32,930 --> 00:03:36,650
the existing<font color="#E5E5E5"> body work around that I'll</font>

79
00:03:35,150 --> 00:03:38,450
talk<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit about pipe seat and</font>

80
00:03:36,650 --> 00:03:40,130
specifically<font color="#CCCCCC"> founder Bowl</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> over</font>

81
00:03:38,450 --> 00:03:42,048
<font color="#CCCCCC">type</font><font color="#E5E5E5"> see kind of how</font><font color="#CCCCCC"> that looks</font><font color="#E5E5E5"> like and</font>

82
00:03:40,130 --> 00:03:44,299
what the<font color="#E5E5E5"> security is and then I'll talk</font>

83
00:03:42,049 --> 00:03:47,209
<font color="#CCCCCC">about a</font><font color="#E5E5E5"> very specific very special chip</font>

84
00:03:44,299 --> 00:03:50,660
<font color="#E5E5E5">called the USB</font><font color="#CCCCCC"> 33 80</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

85
00:03:47,209 --> 00:03:51,739
<font color="#E5E5E5">power this whole attack or really talk</font>

86
00:03:50,660 --> 00:03:53,959
about<font color="#CCCCCC"> something</font><font color="#E5E5E5"> called the using my</font>

87
00:03:51,739 --> 00:03:56,510
<font color="#E5E5E5">driver framework or you MDF which is a</font>

88
00:03:53,959 --> 00:03:58,489
really nice<font color="#E5E5E5"> windows built-in framework</font>

89
00:03:56,510 --> 00:04:01,340
for writing<font color="#CCCCCC"> PCI and USB drivers</font><font color="#E5E5E5"> and</font>

90
00:03:58,489 --> 00:04:03,530
<font color="#E5E5E5">about two hours of code so if you can</font>

91
00:04:01,340 --> 00:04:04,940
<font color="#E5E5E5">can do see you can probably write PCI</font>

92
00:04:03,530 --> 00:04:07,310
Express<font color="#CCCCCC"> drivers in the Windows</font><font color="#E5E5E5"> now and</font>

93
00:04:04,940 --> 00:04:09,950
then I'll<font color="#E5E5E5"> talk specifically about some</font>

94
00:04:07,310 --> 00:04:12,950
<font color="#CCCCCC">very interesting windows physical memory</font>

95
00:04:09,950 --> 00:04:14,480
forensic details<font color="#E5E5E5"> some structures that</font>

96
00:04:12,950 --> 00:04:16,880
are<font color="#E5E5E5"> in</font><font color="#CCCCCC"> physical memory that are often</font>

97
00:04:14,480 --> 00:04:19,039
misunderstood<font color="#CCCCCC"> will get to the bottom</font><font color="#E5E5E5"> of</font>

98
00:04:16,880 --> 00:04:21,289
where those structures live why they're

99
00:04:19,039 --> 00:04:23,450
there and<font color="#CCCCCC"> the interesting data we can</font>

100
00:04:21,289 --> 00:04:24,950
get<font color="#CCCCCC"> from them and</font><font color="#E5E5E5"> finally we'll talk</font>

101
00:04:23,450 --> 00:04:26,590
<font color="#CCCCCC">about how to actually mount an attack</font>

102
00:04:24,950 --> 00:04:28,659
<font color="#E5E5E5">using everything we've learned</font>

103
00:04:26,590 --> 00:04:31,190
specifically targeted<font color="#CCCCCC"> towards windows</font>

104
00:04:28,660 --> 00:04:33,020
leveraging some<font color="#CCCCCC"> of the stuff that</font><font color="#E5E5E5"> efi is</font>

105
00:04:31,190 --> 00:04:35,300
going to make possible<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us and then</font>

106
00:04:33,020 --> 00:04:38,120
we'll<font color="#E5E5E5"> wrap</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with some concluding</font>

107
00:04:35,300 --> 00:04:39,950
<font color="#CCCCCC">thoughts on this so of course I want to</font>

108
00:04:38,120 --> 00:04:41,840
<font color="#E5E5E5">point out as probably many of</font><font color="#CCCCCC"> you know</font>

109
00:04:39,950 --> 00:04:43,550
that<font color="#E5E5E5"> external</font><font color="#CCCCCC"> pour DMA attacks have been</font>

110
00:04:41,840 --> 00:04:46,369
around for a while<font color="#CCCCCC"> I think one of the</font>

111
00:04:43,550 --> 00:04:47,180
main popularized ones was a<font color="#CCCCCC"> FireWire</font>

112
00:04:46,370 --> 00:04:49,220
again

113
00:04:47,180 --> 00:04:52,220
Apple computers where you<font color="#E5E5E5"> could plug in</font>

114
00:04:49,220 --> 00:04:54,590
a fake<font color="#E5E5E5"> iPod or something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> the Linux</font>

115
00:04:52,220 --> 00:04:57,260
machine<font color="#E5E5E5"> I pretended it was a laptop an</font>

116
00:04:54,590 --> 00:04:59,840
iPod and because firewire essentially

117
00:04:57,260 --> 00:05:01,460
<font color="#E5E5E5">gave you</font><font color="#CCCCCC"> DMA access and bus mastering</font><font color="#E5E5E5"> it</font>

118
00:04:59,840 --> 00:05:05,090
was a<font color="#E5E5E5"> really nice way</font><font color="#CCCCCC"> to externally</font>

119
00:05:01,460 --> 00:05:07,489
attack<font color="#CCCCCC"> Mac laptops</font><font color="#E5E5E5"> and a few of the</font>

120
00:05:05,090 --> 00:05:07,940
<font color="#CCCCCC">windows laptops that had</font><font color="#E5E5E5"> firewire as</font>

121
00:05:07,490 --> 00:05:10,250
well

122
00:05:07,940 --> 00:05:12,230
this was<font color="#E5E5E5"> also doable through Express</font>

123
00:05:10,250 --> 00:05:15,530
card<font color="#E5E5E5"> because when Express card came out</font>

124
00:05:12,230 --> 00:05:17,030
<font color="#E5E5E5">is essentially a PCI Express</font><font color="#CCCCCC"> bus</font><font color="#E5E5E5"> inside</font>

125
00:05:15,530 --> 00:05:19,190
of your laptop<font color="#E5E5E5"> so there's been other</font>

126
00:05:17,030 --> 00:05:21,409
attacks against other types of ports

127
00:05:19,190 --> 00:05:23,330
<font color="#CCCCCC">that at</font><font color="#E5E5E5"> some point</font><font color="#CCCCCC"> we're very prevalent</font>

128
00:05:21,410 --> 00:05:25,310
<font color="#E5E5E5">of course today no one has Express card</font>

129
00:05:23,330 --> 00:05:27,609
on their laptop<font color="#E5E5E5"> anymore no one probably</font>

130
00:05:25,310 --> 00:05:30,470
<font color="#CCCCCC">has firewire on their laptop anymore</font>

131
00:05:27,610 --> 00:05:34,400
<font color="#CCCCCC">those initial attacks actually</font><font color="#E5E5E5"> led</font><font color="#CCCCCC"> to</font>

132
00:05:30,470 --> 00:05:36,889
some<font color="#CCCCCC"> changes done</font><font color="#E5E5E5"> to by OS vendors one</font>

133
00:05:34,400 --> 00:05:40,099
thing<font color="#E5E5E5"> that happened is many OSS stopped</font>

134
00:05:36,889 --> 00:05:43,030
allowing bus mastering<font color="#E5E5E5"> and/or DMA until</font>

135
00:05:40,100 --> 00:05:46,070
the user logged in or they applied

136
00:05:43,030 --> 00:05:48,049
<font color="#CCCCCC">blocks on generic class of the devices</font>

137
00:05:46,070 --> 00:05:50,330
or simply<font color="#E5E5E5"> when the machine is locked</font>

138
00:05:48,050 --> 00:05:52,880
they don't allow certain operations to

139
00:05:50,330 --> 00:05:55,400
happen at the end<font color="#CCCCCC"> of the day though</font><font color="#E5E5E5"> for</font>

140
00:05:52,880 --> 00:05:56,990
compatibility reasons<font color="#E5E5E5"> there are certain</font>

141
00:05:55,400 --> 00:05:59,150
device classes<font color="#E5E5E5"> though that still end up</font>

142
00:05:56,990 --> 00:06:02,720
having bus mastering and of course you

143
00:05:59,150 --> 00:06:04,640
can own and control<font color="#CCCCCC"> the device ID</font><font color="#E5E5E5"> no</font>

144
00:06:02,720 --> 00:06:06,560
vendor ID you<font color="#CCCCCC"> can still</font><font color="#E5E5E5"> pretend you're</font>

145
00:06:04,640 --> 00:06:08,630
one of those<font color="#CCCCCC"> devices that still gets bus</font>

146
00:06:06,560 --> 00:06:10,640
<font color="#E5E5E5">mastering in still gets DMA but it was</font>

147
00:06:08,630 --> 00:06:13,490
kind of the first<font color="#CCCCCC"> time that OS vendors</font>

148
00:06:10,640 --> 00:06:15,770
started locking<font color="#E5E5E5"> things down now over its</font>

149
00:06:13,490 --> 00:06:17,470
<font color="#CCCCCC">Thunderbolt specifically which you know</font>

150
00:06:15,770 --> 00:06:22,039
became very popular thanks to<font color="#E5E5E5"> Apple</font>

151
00:06:17,470 --> 00:06:25,039
<font color="#E5E5E5">snare of course did some attacks against</font>

152
00:06:22,039 --> 00:06:27,440
<font color="#E5E5E5">this such as the dimmest</font><font color="#CCCCCC"> arias Jobs's</font>

153
00:06:25,039 --> 00:06:30,229
<font color="#E5E5E5">and of course Trammell Hudson with the</font>

154
00:06:27,440 --> 00:06:32,870
famous<font color="#CCCCCC"> Thunder</font><font color="#E5E5E5"> strike attack</font><font color="#CCCCCC"> a lot of</font>

155
00:06:30,229 --> 00:06:35,300
<font color="#CCCCCC">these first of all</font><font color="#E5E5E5"> relied on option ROM</font>

156
00:06:32,870 --> 00:06:37,220
so the idea was<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> plug in PCI</font>

157
00:06:35,300 --> 00:06:39,490
Express Hardware over<font color="#CCCCCC"> thunderbolt and</font>

158
00:06:37,220 --> 00:06:41,539
<font color="#E5E5E5">then the option ROM would execute and</font>

159
00:06:39,490 --> 00:06:43,460
execute malicious payload against<font color="#CCCCCC"> the</font>

160
00:06:41,539 --> 00:06:45,080
<font color="#E5E5E5">machine and that the work specifically</font>

161
00:06:43,460 --> 00:06:47,960
really<font color="#E5E5E5"> well against Apple computers</font>

162
00:06:45,080 --> 00:06:51,169
because<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> ufi is essentially</font><font color="#E5E5E5"> based</font>

163
00:06:47,960 --> 00:06:53,030
off<font color="#E5E5E5"> efi 1.12 with lots and lots</font><font color="#CCCCCC"> of</font>

164
00:06:51,169 --> 00:06:54,710
improvements but it doesn't have secure

165
00:06:53,030 --> 00:06:57,559
boot enabled so without secure boot

166
00:06:54,710 --> 00:06:58,849
<font color="#E5E5E5">option roms just execute and there's no</font>

167
00:06:57,560 --> 00:07:00,889
offending code code<font color="#CCCCCC"> signing or anything</font>

168
00:06:58,849 --> 00:07:03,469
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> now very recently</font>

169
00:07:00,889 --> 00:07:05,479
<font color="#CCCCCC">has</font><font color="#E5E5E5"> actually closed off a lot of those</font>

170
00:07:03,469 --> 00:07:07,520
attacks now option roms don't<font color="#E5E5E5"> execute at</font>

171
00:07:05,479 --> 00:07:09,710
all<font color="#CCCCCC"> anymore unless you</font><font color="#E5E5E5"> press a special</font>

172
00:07:07,520 --> 00:07:12,039
sequence<font color="#E5E5E5"> so again thanks</font><font color="#CCCCCC"> to Trammell and</font>

173
00:07:09,710 --> 00:07:15,198
snare<font color="#CCCCCC"> athol locked</font><font color="#E5E5E5"> on a lot of their</font>

174
00:07:12,039 --> 00:07:18,560
their<font color="#E5E5E5"> interfaces as</font><font color="#CCCCCC"> well on</font><font color="#E5E5E5"> top of that</font>

175
00:07:15,199 --> 00:07:20,389
we now have iommu or<font color="#CCCCCC"> vtd that's enabled</font>

176
00:07:18,560 --> 00:07:22,400
by default<font color="#E5E5E5"> on Macs as well which</font>

177
00:07:20,389 --> 00:07:25,310
prevents against DMA access<font color="#E5E5E5"> even if you</font>

178
00:07:22,400 --> 00:07:26,628
can do<font color="#E5E5E5"> it around OS base memory so you</font>

179
00:07:25,310 --> 00:07:29,509
<font color="#E5E5E5">have the first bypass the security</font>

180
00:07:26,629 --> 00:07:31,039
<font color="#E5E5E5">around that now again these attacks were</font>

181
00:07:29,509 --> 00:07:33,110
really useful<font color="#CCCCCC"> but because they relied on</font>

182
00:07:31,039 --> 00:07:35,449
Thunderbolt or Thunderbolt to their

183
00:07:33,110 --> 00:07:37,189
limited<font color="#CCCCCC"> mostly to Mac hardware there's</font>

184
00:07:35,449 --> 00:07:39,560
very little<font color="#E5E5E5"> Windows machines out</font><font color="#CCCCCC"> there</font>

185
00:07:37,189 --> 00:07:42,889
that had these types<font color="#E5E5E5"> of ports that you</font>

186
00:07:39,560 --> 00:07:45,860
<font color="#E5E5E5">could that you could influence what</font>

187
00:07:42,889 --> 00:07:47,779
changed<font color="#E5E5E5"> is a presentation than</font><font color="#CCCCCC"> a few</font>

188
00:07:45,860 --> 00:07:50,270
<font color="#E5E5E5">years ago by Joe Fitzpatrick and Joe</font>

189
00:07:47,779 --> 00:07:51,800
Fitzpatrick discovered this USB 3

190
00:07:50,270 --> 00:07:55,580
through 80 device<font color="#CCCCCC"> which essentially</font>

191
00:07:51,800 --> 00:07:58,490
<font color="#E5E5E5">gives you a USB 3 to mini PCI Express</font>

192
00:07:55,580 --> 00:08:01,068
interface<font color="#CCCCCC"> got one</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> here very</font><font color="#E5E5E5"> tiny</font>

193
00:07:58,490 --> 00:08:03,740
little device PCI Express<font color="#CCCCCC"> mini PCI</font>

194
00:08:01,069 --> 00:08:05,810
Express on one end USB 3<font color="#E5E5E5"> on the other</font>

195
00:08:03,740 --> 00:08:07,759
and you<font color="#CCCCCC"> have a very</font><font color="#E5E5E5"> small package that</font>

196
00:08:05,810 --> 00:08:09,770
gives<font color="#E5E5E5"> you essentially a bridge between</font>

197
00:08:07,759 --> 00:08:11,690
any commands<font color="#E5E5E5"> you want to send across USB</font>

198
00:08:09,770 --> 00:08:14,089
and that you want to see across PCI

199
00:08:11,690 --> 00:08:16,520
Express<font color="#E5E5E5"> or vice versa right and this</font>

200
00:08:14,089 --> 00:08:18,080
really is a game changer<font color="#CCCCCC"> for the types</font>

201
00:08:16,520 --> 00:08:20,330
<font color="#E5E5E5">of attacks we're going to talk about</font>

202
00:08:18,080 --> 00:08:22,960
because this used to be you<font color="#E5E5E5"> know giant</font>

203
00:08:20,330 --> 00:08:27,740
<font color="#E5E5E5">boxes and FPGAs or very expensive</font>

204
00:08:22,960 --> 00:08:28,940
hardware<font color="#E5E5E5"> this is basically $150 and it's</font>

205
00:08:27,740 --> 00:08:30,740
probably<font color="#CCCCCC"> you can probably get</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> for</font>

206
00:08:28,940 --> 00:08:34,159
cheaper than<font color="#CCCCCC"> that if you</font><font color="#E5E5E5"> wanted to make</font>

207
00:08:30,740 --> 00:08:36,948
your<font color="#CCCCCC"> own equivalent one now it has one</font>

208
00:08:34,159 --> 00:08:39,860
<font color="#CCCCCC">problem which is it</font><font color="#E5E5E5"> can only do 32-bit</font>

209
00:08:36,948 --> 00:08:42,198
DMA so one of<font color="#E5E5E5"> the big problems</font><font color="#CCCCCC"> there on</font>

210
00:08:39,860 --> 00:08:43,519
the attacks<font color="#E5E5E5"> were how do</font><font color="#CCCCCC"> I attack a</font>

211
00:08:42,198 --> 00:08:46,310
modern operating<font color="#E5E5E5"> system which</font><font color="#CCCCCC"> of course</font>

212
00:08:43,519 --> 00:08:49,579
has physical addresses above just<font color="#CCCCCC"> a 4</font>

213
00:08:46,310 --> 00:08:51,260
gigabyte range<font color="#E5E5E5"> the initial</font><font color="#CCCCCC"> usage of this</font>

214
00:08:49,579 --> 00:08:54,109
device also<font color="#E5E5E5"> is only about</font><font color="#CCCCCC"> three</font>

215
00:08:51,260 --> 00:08:57,110
megabytes a second<font color="#CCCCCC"> Joe</font><font color="#E5E5E5"> was using the PCI</font>

216
00:08:54,110 --> 00:08:59,540
<font color="#CCCCCC">n and PCI PCI</font><font color="#E5E5E5"> out endpoints which</font>

217
00:08:57,110 --> 00:09:02,269
essentially<font color="#E5E5E5"> just do configuration</font>

218
00:08:59,540 --> 00:09:04,310
register access<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> three megabytes</font><font color="#E5E5E5"> a</font>

219
00:09:02,269 --> 00:09:06,949
second<font color="#CCCCCC"> can</font><font color="#E5E5E5"> take a while to mount an</font>

220
00:09:04,310 --> 00:09:08,268
attack<font color="#E5E5E5"> and also unfortunately</font><font color="#CCCCCC"> this type</font>

221
00:09:06,949 --> 00:09:11,029
of<font color="#E5E5E5"> hardware doesn't allow you to have an</font>

222
00:09:08,269 --> 00:09:13,279
<font color="#CCCCCC">option ROM lets you modify lots and lots</font>

223
00:09:11,029 --> 00:09:14,450
of registers<font color="#E5E5E5"> but you cannot provide an</font>

224
00:09:13,279 --> 00:09:17,150
<font color="#CCCCCC">option on with it</font><font color="#E5E5E5"> so you can do</font>

225
00:09:14,450 --> 00:09:21,110
BMA attacks but not directly have the OS

226
00:09:17,150 --> 00:09:24,980
execute code both frisk<font color="#CCCCCC"> then a few years</font>

227
00:09:21,110 --> 00:09:27,860
<font color="#CCCCCC">later modernize the attack</font><font color="#E5E5E5"> by adding DMA</font>

228
00:09:24,980 --> 00:09:29,510
support to this little piece of hardware

229
00:09:27,860 --> 00:09:32,480
<font color="#E5E5E5">because it actually has we're going to</font>

230
00:09:29,510 --> 00:09:35,240
see<font color="#CCCCCC"> for DMA endpoints</font><font color="#E5E5E5"> and by enabling</font>

231
00:09:32,480 --> 00:09:38,270
the DMA endpoints over USB<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> now</font>

232
00:09:35,240 --> 00:09:40,760
do<font color="#E5E5E5"> attacks or dumps at 150 megabytes a</font>

233
00:09:38,270 --> 00:09:43,550
second over USB<font color="#E5E5E5"> 3 which is a hell of a</font>

234
00:09:40,760 --> 00:09:45,560
lot faster<font color="#CCCCCC"> than 3</font><font color="#E5E5E5"> megabytes he also</font>

235
00:09:43,550 --> 00:09:47,719
basically<font color="#CCCCCC"> bypass the need</font><font color="#E5E5E5"> to have the</font>

236
00:09:45,560 --> 00:09:49,670
official tool chain from the<font color="#CCCCCC"> comp again</font>

237
00:09:47,720 --> 00:09:51,410
<font color="#CCCCCC">that makes a</font><font color="#E5E5E5"> chipset which is under NDA</font>

238
00:09:49,670 --> 00:09:53,870
<font color="#E5E5E5">which only worked in certain operating</font>

239
00:09:51,410 --> 00:09:56,360
systems<font color="#CCCCCC"> so he originally wrote a Linux</font>

240
00:09:53,870 --> 00:09:57,950
driver that allows flashing the hardware

241
00:09:56,360 --> 00:10:00,470
and then after that it could be used

242
00:09:57,950 --> 00:10:02,300
from<font color="#CCCCCC"> Windows as well we also figured</font><font color="#E5E5E5"> out</font>

243
00:10:00,470 --> 00:10:04,190
<font color="#E5E5E5">a really simple way</font><font color="#CCCCCC"> to talk to the usb</font>

244
00:10:02,300 --> 00:10:05,780
side which is simply program<font color="#E5E5E5"> it and</font>

245
00:10:04,190 --> 00:10:08,420
pretend it's an<font color="#CCCCCC"> Android phone</font><font color="#E5E5E5"> or a</font>

246
00:10:05,780 --> 00:10:10,670
<font color="#E5E5E5">Google Google glass</font><font color="#CCCCCC"> to be more specific</font>

247
00:10:08,420 --> 00:10:12,829
<font color="#CCCCCC">and then with a simple Android driver on</font>

248
00:10:10,670 --> 00:10:15,079
the<font color="#CCCCCC"> windows side or any side you can</font>

249
00:10:12,830 --> 00:10:17,240
talk to the USB<font color="#CCCCCC"> port so this made it a</font>

250
00:10:15,080 --> 00:10:19,250
lot<font color="#E5E5E5"> more usable and</font><font color="#CCCCCC"> as a github with</font>

251
00:10:17,240 --> 00:10:22,550
implants based on<font color="#E5E5E5"> this device for</font><font color="#CCCCCC"> Linux</font>

252
00:10:19,250 --> 00:10:26,300
for<font color="#E5E5E5"> Mac and for Windows typically</font>

253
00:10:22,550 --> 00:10:29,390
leveraging<font color="#E5E5E5"> Thunderbolt 2 or going</font>

254
00:10:26,300 --> 00:10:31,640
through<font color="#E5E5E5"> various</font><font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of interconnects</font>

255
00:10:29,390 --> 00:10:34,069
<font color="#E5E5E5">in the middle so there's already bought</font>

256
00:10:31,640 --> 00:10:35,120
<font color="#E5E5E5">a huge body of work here so you know</font>

257
00:10:34,070 --> 00:10:37,490
what what<font color="#E5E5E5"> did I do</font>

258
00:10:35,120 --> 00:10:39,620
what am I here<font color="#E5E5E5"> to talk about well</font><font color="#CCCCCC"> first</font>

259
00:10:37,490 --> 00:10:42,260
of<font color="#CCCCCC"> all I fixed some small bugs</font><font color="#E5E5E5"> in the</font>

260
00:10:39,620 --> 00:10:43,940
actual firmware<font color="#E5E5E5"> that most people</font><font color="#CCCCCC"> haven't</font>

261
00:10:42,260 --> 00:10:45,980
<font color="#CCCCCC">have been flashing on this other bit of</font>

262
00:10:43,940 --> 00:10:49,010
<font color="#E5E5E5">data sheets and realized some</font><font color="#CCCCCC"> of the</font>

263
00:10:45,980 --> 00:10:51,200
registers were off<font color="#E5E5E5"> this ship has a</font>

264
00:10:49,010 --> 00:10:53,510
little<font color="#CCCCCC"> stability issues if you touch</font>

265
00:10:51,200 --> 00:10:55,550
some wrong parts of RAM or if you dump

266
00:10:53,510 --> 00:10:56,420
memory too quickly<font color="#CCCCCC"> there's lots of</font>

267
00:10:55,550 --> 00:10:58,640
<font color="#E5E5E5">things that are going to make it</font>

268
00:10:56,420 --> 00:11:00,439
<font color="#CCCCCC">basically die out so I</font><font color="#E5E5E5"> figured out how</font>

269
00:10:58,640 --> 00:11:02,090
to basically<font color="#E5E5E5"> make it work a little bit</font>

270
00:11:00,440 --> 00:11:04,220
more reliably<font color="#E5E5E5"> especially if you actually</font>

271
00:11:02,090 --> 00:11:06,020
use<font color="#E5E5E5"> USB</font><font color="#CCCCCC"> 2 which is a little bit slower</font>

272
00:11:04,220 --> 00:11:08,780
<font color="#E5E5E5">you'll get about 50 megabytes a second</font>

273
00:11:06,020 --> 00:11:11,060
it's a lot more<font color="#CCCCCC"> reliable</font><font color="#E5E5E5"> and instead</font><font color="#CCCCCC"> of</font>

274
00:11:08,780 --> 00:11:12,290
relying on<font color="#E5E5E5"> the Linux PCI driver to</font>

275
00:11:11,060 --> 00:11:15,979
actually flash the EPROM

276
00:11:12,290 --> 00:11:17,719
<font color="#CCCCCC">I created a you MDF driver which I'll</font>

277
00:11:15,980 --> 00:11:19,160
talk about which basically means it can

278
00:11:17,720 --> 00:11:20,420
easily be<font color="#CCCCCC"> used</font><font color="#E5E5E5"> in Windows now without</font>

279
00:11:19,160 --> 00:11:23,390
requiring<font color="#E5E5E5"> the boot and the</font><font color="#CCCCCC"> linux</font>

280
00:11:20,420 --> 00:11:25,130
partition<font color="#E5E5E5"> at first and most importantly</font>

281
00:11:23,390 --> 00:11:27,530
part of this talk figured<font color="#E5E5E5"> out a</font>

282
00:11:25,130 --> 00:11:29,660
universal implant techniques that works

283
00:11:27,530 --> 00:11:31,670
always with memory under<font color="#CCCCCC"> 4 gigabytes</font>

284
00:11:29,660 --> 00:11:33,589
<font color="#CCCCCC">that you don't</font><font color="#E5E5E5"> have to basically hunt</font>

285
00:11:31,670 --> 00:11:35,719
for specific OS techniques to get access

286
00:11:33,590 --> 00:11:37,910
<font color="#E5E5E5">to something that I'll get you that</font><font color="#CCCCCC"> lets</font>

287
00:11:35,720 --> 00:11:39,800
you execute the implant<font color="#E5E5E5"> using efi</font>

288
00:11:37,910 --> 00:11:41,600
runtime services<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can actually be</font>

289
00:11:39,800 --> 00:11:43,490
something<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> Universal I don't see</font>

290
00:11:41,600 --> 00:11:45,890
<font color="#E5E5E5">that you have</font><font color="#CCCCCC"> UEFI is always under 4</font>

291
00:11:43,490 --> 00:11:47,660
gigs<font color="#E5E5E5"> specifically on Windows</font><font color="#CCCCCC"> we're also</font>

292
00:11:45,890 --> 00:11:49,250
leveraging the<font color="#E5E5E5"> Hal heap so I'll talk</font>

293
00:11:47,660 --> 00:11:51,920
<font color="#E5E5E5">about the Hal heap and kind of pilots</font>

294
00:11:49,250 --> 00:11:53,960
how it's relevant<font color="#E5E5E5"> to this and also</font>

295
00:11:51,920 --> 00:11:56,240
modernize the attack to work across USB

296
00:11:53,960 --> 00:11:58,880
type-c<font color="#E5E5E5"> because again the original</font><font color="#CCCCCC"> attack</font>

297
00:11:56,240 --> 00:12:01,280
<font color="#CCCCCC">scent</font><font color="#E5E5E5"> of a thunderbolt</font><font color="#CCCCCC"> so a few limited</font>

298
00:11:58,880 --> 00:12:03,650
Windows laptops<font color="#E5E5E5"> and mostly Mac's with</font>

299
00:12:01,280 --> 00:12:05,750
<font color="#E5E5E5">type</font><font color="#CCCCCC"> C this opens</font><font color="#E5E5E5"> it up</font><font color="#CCCCCC"> to basically</font>

300
00:12:03,650 --> 00:12:07,640
<font color="#E5E5E5">everything so again important to</font>

301
00:12:05,750 --> 00:12:10,760
acknowledge all the work<font color="#CCCCCC"> that</font><font color="#E5E5E5"> went in</font>

302
00:12:07,640 --> 00:12:12,350
before<font color="#E5E5E5"> that so first of all let's talk</font>

303
00:12:10,760 --> 00:12:15,170
about<font color="#E5E5E5"> kind of type C and founder Bowl</font>

304
00:12:12,350 --> 00:12:17,540
<font color="#E5E5E5">three so basic attack C is a</font>

305
00:12:15,170 --> 00:12:19,699
specification for connector and<font color="#E5E5E5"> a cable</font>

306
00:12:17,540 --> 00:12:22,579
<font color="#E5E5E5">it's basically a reversible USB</font>

307
00:12:19,700 --> 00:12:24,260
connector it can support<font color="#E5E5E5"> up to 100 watts</font>

308
00:12:22,580 --> 00:12:26,600
of power delivery at 20 volts which is

309
00:12:24,260 --> 00:12:28,189
huge<font color="#E5E5E5"> and the key thing</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this cable</font>

310
00:12:26,600 --> 00:12:31,310
<font color="#E5E5E5">is it can be programmed</font><font color="#CCCCCC"> to support</font>

311
00:12:28,190 --> 00:12:32,780
alternate modes<font color="#E5E5E5"> and there's so far three</font>

312
00:12:31,310 --> 00:12:35,209
standards for alternate modes<font color="#CCCCCC"> the</font>

313
00:12:32,780 --> 00:12:37,400
DisplayPort alternate mode<font color="#E5E5E5"> a thunderbolt</font>

314
00:12:35,210 --> 00:12:38,930
alternate mode and<font color="#E5E5E5"> HDMI alternate mode</font>

315
00:12:37,400 --> 00:12:40,910
button in theory you could drive

316
00:12:38,930 --> 00:12:42,890
Ethernet over<font color="#CCCCCC"> this cable as well</font><font color="#E5E5E5"> you</font>

317
00:12:40,910 --> 00:12:45,350
could drive basically<font color="#E5E5E5"> anything that can</font>

318
00:12:42,890 --> 00:12:47,660
be<font color="#CCCCCC"> signaled</font><font color="#E5E5E5"> accordingly over this cable</font>

319
00:12:45,350 --> 00:12:48,860
<font color="#CCCCCC">and so it's Thunderbolt</font><font color="#E5E5E5"> 3 since about</font>

320
00:12:47,660 --> 00:12:51,079
June 2015

321
00:12:48,860 --> 00:12:54,800
you can now route Thunderbolt<font color="#E5E5E5"> 3 signals</font>

322
00:12:51,080 --> 00:12:56,630
<font color="#E5E5E5">over</font><font color="#CCCCCC"> type-c</font><font color="#E5E5E5"> a little bit slower then</font>

323
00:12:54,800 --> 00:12:59,270
defaults on<font color="#E5E5E5"> table</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> can go at 40</font>

324
00:12:56,630 --> 00:13:01,310
gigabits<font color="#E5E5E5"> over</font><font color="#CCCCCC"> type-c today it's still</font>

325
00:12:59,270 --> 00:13:02,740
<font color="#E5E5E5">only</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> whether it is generation 2</font>

326
00:13:01,310 --> 00:13:06,079
coming out which<font color="#E5E5E5"> will which</font><font color="#CCCCCC"> will add it</font>

327
00:13:02,740 --> 00:13:08,060
then<font color="#CCCCCC"> skylake chipsets</font><font color="#E5E5E5"> which are you know</font>

328
00:13:06,080 --> 00:13:09,730
<font color="#E5E5E5">the almost latest Intel chipset</font><font color="#CCCCCC"> so</font>

329
00:13:08,060 --> 00:13:12,229
before cable<font color="#E5E5E5"> a came out this</font><font color="#CCCCCC"> year</font>

330
00:13:09,730 --> 00:13:14,630
<font color="#CCCCCC">skyleigh chipsets now have native</font>

331
00:13:12,230 --> 00:13:14,990
Thunderbolt 3 controllers and the<font color="#CCCCCC"> actual</font>

332
00:13:14,630 --> 00:13:17,900
chip

333
00:13:14,990 --> 00:13:19,339
so most<font color="#E5E5E5"> brand-new Windows laptops and</font>

334
00:13:17,900 --> 00:13:22,069
<font color="#CCCCCC">even lap Windows laptop from</font><font color="#E5E5E5"> about a</font>

335
00:13:19,339 --> 00:13:24,650
<font color="#CCCCCC">year ago</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a used dale from</font><font color="#E5E5E5"> a year</font>

336
00:13:22,070 --> 00:13:27,050
and a half ago<font color="#E5E5E5"> now come in the</font><font color="#CCCCCC"> mid-range</font>

337
00:13:24,650 --> 00:13:30,350
<font color="#E5E5E5">option usually with the Thunderbolt 3 or</font>

338
00:13:27,050 --> 00:13:32,920
<font color="#E5E5E5">USB type-c connector Apple MacBook Pros</font>

339
00:13:30,350 --> 00:13:35,750
of course<font color="#CCCCCC"> now</font><font color="#E5E5E5"> come with</font><font color="#CCCCCC"> 4 of them and</font>

340
00:13:32,920 --> 00:13:38,329
<font color="#E5E5E5">new motherboards as well that are coming</font>

341
00:13:35,750 --> 00:13:40,540
out<font color="#CCCCCC"> now have Thunderbolt</font><font color="#E5E5E5"> for desktops as</font>

342
00:13:38,330 --> 00:13:43,590
well<font color="#E5E5E5"> so we're really</font><font color="#CCCCCC"> seeing any more</font>

343
00:13:40,540 --> 00:13:47,199
to us be seeing<font color="#E5E5E5"> from Apple and also from</font>

344
00:13:43,590 --> 00:13:49,470
PC manufacturers now Thunderbolt<font color="#E5E5E5"> 3</font>

345
00:13:47,200 --> 00:13:52,870
specifically<font color="#E5E5E5"> is a highly highly</font>

346
00:13:49,470 --> 00:13:55,210
<font color="#E5E5E5">proprietary standard even to use it on</font>

347
00:13:52,870 --> 00:13:57,430
<font color="#E5E5E5">Windows you need special Intel drivers</font>

348
00:13:55,210 --> 00:13:59,770
<font color="#E5E5E5">that your PC manufacturers supposed to</font>

349
00:13:57,430 --> 00:14:02,170
ship<font color="#CCCCCC"> Windows does not have a built-in</font>

350
00:13:59,770 --> 00:14:03,400
Thunderbolt<font color="#E5E5E5"> 3 driver and from what I've</font>

351
00:14:02,170 --> 00:14:04,900
heard<font color="#CCCCCC"> from my friends at Microsoft they</font>

352
00:14:03,400 --> 00:14:06,640
don't even<font color="#E5E5E5"> have access</font><font color="#CCCCCC"> to the spec so</font>

353
00:14:04,900 --> 00:14:10,120
they can't even<font color="#E5E5E5"> write a driver it's</font>

354
00:14:06,640 --> 00:14:11,980
highly nd8<font color="#E5E5E5"> by Intel then your BIOS</font>

355
00:14:10,120 --> 00:14:13,350
actually also<font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to support and</font>

356
00:14:11,980 --> 00:14:16,060
enable<font color="#CCCCCC"> a Thunderbolt 3 controller</font>

357
00:14:13,350 --> 00:14:18,700
specifically to enable some security

358
00:14:16,060 --> 00:14:21,010
levels<font color="#E5E5E5"> and the way it works on PC is if</font>

359
00:14:18,700 --> 00:14:23,040
you plug in<font color="#E5E5E5"> a fundable 3 device the</font>

360
00:14:21,010 --> 00:14:25,750
driver is actually<font color="#E5E5E5"> going to notify you</font>

361
00:14:23,040 --> 00:14:27,339
new Thunderbolt<font color="#E5E5E5"> device has been attached</font>

362
00:14:25,750 --> 00:14:29,800
<font color="#CCCCCC">and you actually have to</font><font color="#E5E5E5"> be an</font>

363
00:14:27,340 --> 00:14:32,380
<font color="#CCCCCC">administrator press ok then</font><font color="#E5E5E5"> you get a</font>

364
00:14:29,800 --> 00:14:34,839
<font color="#E5E5E5">dialog that asks you would</font><font color="#CCCCCC"> you like to</font>

365
00:14:32,380 --> 00:14:37,450
<font color="#E5E5E5">enable this Thunderbolt 3 device and you</font>

366
00:14:34,840 --> 00:14:39,310
<font color="#CCCCCC">can say just this time</font><font color="#E5E5E5"> nope or always</font>

367
00:14:37,450 --> 00:14:40,210
<font color="#E5E5E5">allow so you have to ask</font><font color="#CCCCCC"> that</font>

368
00:14:39,310 --> 00:14:42,550
<font color="#E5E5E5">administrator</font>

369
00:14:40,210 --> 00:14:44,320
manually<font color="#E5E5E5"> authorize the connection of a</font>

370
00:14:42,550 --> 00:14:46,540
<font color="#CCCCCC">thunderbolt 3 device</font><font color="#E5E5E5"> which in theory</font>

371
00:14:44,320 --> 00:14:48,850
sounds<font color="#E5E5E5"> pretty secure of course the</font>

372
00:14:46,540 --> 00:14:51,160
<font color="#E5E5E5">question is you know is that admin</font>

373
00:14:48,850 --> 00:14:52,690
<font color="#CCCCCC">dialog a security boundary</font><font color="#E5E5E5"> you know</font>

374
00:14:51,160 --> 00:14:54,910
those the driver have an undocumented

375
00:14:52,690 --> 00:14:57,370
<font color="#E5E5E5">octal I haven't</font><font color="#CCCCCC"> looked at it I don't</font>

376
00:14:54,910 --> 00:14:59,439
know<font color="#E5E5E5"> but you know history would suggest</font>

377
00:14:57,370 --> 00:15:01,720
there's probably a way for<font color="#E5E5E5"> non admin to</font>

378
00:14:59,440 --> 00:15:03,040
to click that button anyway but<font color="#E5E5E5"> that's</font>

379
00:15:01,720 --> 00:15:05,170
not what I'm looking<font color="#CCCCCC"> at today I'm not</font>

380
00:15:03,040 --> 00:15:07,480
you know dissecting the security<font color="#E5E5E5"> of that</font>

381
00:15:05,170 --> 00:15:09,430
driver but by<font color="#CCCCCC"> default you get</font><font color="#E5E5E5"> a little a</font>

382
00:15:07,480 --> 00:15:11,590
<font color="#E5E5E5">little pop up there now that</font><font color="#CCCCCC"> actually</font>

383
00:15:09,430 --> 00:15:15,370
<font color="#E5E5E5">depends though on how</font><font color="#CCCCCC"> you've programmed</font>

384
00:15:11,590 --> 00:15:19,320
<font color="#E5E5E5">your BIOS so this Dell laptop has a few</font>

385
00:15:15,370 --> 00:15:22,150
options<font color="#CCCCCC"> for example it has an option to</font>

386
00:15:19,320 --> 00:15:23,770
<font color="#CCCCCC">set the security level</font><font color="#E5E5E5"> and by default</font>

387
00:15:22,150 --> 00:15:26,829
secured<font color="#E5E5E5"> levels set to user authorization</font>

388
00:15:23,770 --> 00:15:28,840
<font color="#CCCCCC">this is what makes</font><font color="#E5E5E5"> Windows have that</font>

389
00:15:26,830 --> 00:15:31,750
will pop up through<font color="#E5E5E5"> the</font><font color="#CCCCCC"> thunderbolt</font>

390
00:15:28,840 --> 00:15:33,760
driver<font color="#CCCCCC"> if I set it to</font><font color="#E5E5E5"> no security then</font>

391
00:15:31,750 --> 00:15:35,440
that<font color="#CCCCCC"> pop-up</font><font color="#E5E5E5"> won't matter</font><font color="#CCCCCC"> as soon as I</font>

392
00:15:33,760 --> 00:15:38,860
<font color="#CCCCCC">plug in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> device the controller will</font>

393
00:15:35,440 --> 00:15:40,840
will activate it secure<font color="#CCCCCC"> connect</font><font color="#E5E5E5"> means</font>

394
00:15:38,860 --> 00:15:42,730
that the<font color="#E5E5E5"> device not</font><font color="#CCCCCC"> only gives you a</font>

395
00:15:40,840 --> 00:15:45,370
<font color="#CCCCCC">pop-up</font><font color="#E5E5E5"> but actually has a unique ID and</font>

396
00:15:42,730 --> 00:15:47,800
in theory<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you plug in any other</font>

397
00:15:45,370 --> 00:15:50,110
Thunderbolt 3 device of the same type

398
00:15:47,800 --> 00:15:51,910
<font color="#E5E5E5">but</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> a different serial number it'll</font>

399
00:15:50,110 --> 00:15:53,870
still basically recognize<font color="#E5E5E5"> that so I</font>

400
00:15:51,910 --> 00:15:56,990
might<font color="#E5E5E5"> either authorize this thing</font>

401
00:15:53,870 --> 00:15:59,120
here or I might authorize any kind<font color="#E5E5E5"> of</font>

402
00:15:56,990 --> 00:16:01,250
<font color="#E5E5E5">Thunder fundable three boxes</font><font color="#CCCCCC"> bios a</font>

403
00:15:59,120 --> 00:16:03,110
<font color="#E5E5E5">manufacturer so default level if</font><font color="#CCCCCC"> I</font>

404
00:16:01,250 --> 00:16:04,970
authorize<font color="#E5E5E5"> this</font><font color="#CCCCCC"> one authorizes all other</font>

405
00:16:03,110 --> 00:16:06,800
ones<font color="#E5E5E5"> like it the idea of secure</font>

406
00:16:04,970 --> 00:16:09,230
connected it only authorizes<font color="#E5E5E5"> this one</font>

407
00:16:06,800 --> 00:16:11,390
<font color="#E5E5E5">and the most secure level is DisplayPort</font>

408
00:16:09,230 --> 00:16:13,370
only which basically turns<font color="#E5E5E5"> off PCI</font>

409
00:16:11,390 --> 00:16:15,860
Express<font color="#E5E5E5"> signaling it only allows</font>

410
00:16:13,370 --> 00:16:17,420
DisplayPort<font color="#CCCCCC"> is an alternate mode and</font><font color="#E5E5E5"> of</font>

411
00:16:15,860 --> 00:16:20,810
course there's supposed to be no data

412
00:16:17,420 --> 00:16:22,760
over DisplayPort alone<font color="#E5E5E5"> of course what's</font>

413
00:16:20,810 --> 00:16:27,050
interesting is the Dell laptop has by

414
00:16:22,760 --> 00:16:29,180
default<font color="#CCCCCC"> always</font><font color="#E5E5E5"> allowed Dell</font><font color="#CCCCCC"> Docs and I</font>

415
00:16:27,050 --> 00:16:30,709
haven't<font color="#E5E5E5"> looked at this either we have</font><font color="#CCCCCC"> to</font>

416
00:16:29,180 --> 00:16:32,810
reverse engineer firmware<font color="#E5E5E5"> but I'm</font>

417
00:16:30,710 --> 00:16:35,240
<font color="#E5E5E5">willing to bet that always</font><font color="#CCCCCC"> allow Dell</font>

418
00:16:32,810 --> 00:16:38,239
<font color="#CCCCCC">Doc's mean if you have the vendor ID of</font>

419
00:16:35,240 --> 00:16:40,070
Dell and the device<font color="#E5E5E5"> ID of doc</font><font color="#CCCCCC"> you'll</font>

420
00:16:38,240 --> 00:16:43,100
probably get<font color="#E5E5E5"> through in by positive and</font>

421
00:16:40,070 --> 00:16:45,320
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> said by default you also have</font>

422
00:16:43,100 --> 00:16:47,240
some other options<font color="#E5E5E5"> which are not on by</font>

423
00:16:45,320 --> 00:16:49,760
default but<font color="#E5E5E5"> they're</font><font color="#CCCCCC"> very interesting</font><font color="#E5E5E5"> one</font>

424
00:16:47,240 --> 00:16:52,279
is to enable<font color="#CCCCCC"> thunderbolt</font><font color="#E5E5E5"> at boot and one</font>

425
00:16:49,760 --> 00:16:54,500
is to enable<font color="#CCCCCC"> Thunderbolt and PCI Express</font>

426
00:16:52,279 --> 00:16:56,900
behind<font color="#E5E5E5"> Thunderbolt pre boots</font><font color="#CCCCCC"> so this</font>

427
00:16:54,500 --> 00:16:58,580
basically gives<font color="#E5E5E5"> you access to the</font><font color="#CCCCCC"> second</font>

428
00:16:56,900 --> 00:17:00,740
you power on<font color="#E5E5E5"> the machine you'll have</font>

429
00:16:58,580 --> 00:17:02,180
<font color="#E5E5E5">Thunderbolt</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> access and this one is</font>

430
00:17:00,740 --> 00:17:02,570
while the machine is booting up you'll

431
00:17:02,180 --> 00:17:03,920
<font color="#E5E5E5">have</font>

432
00:17:02,570 --> 00:17:07,100
<font color="#CCCCCC">Thunderbolt 3 axis so highly</font>

433
00:17:03,920 --> 00:17:09,829
configurable<font color="#E5E5E5"> and by default</font><font color="#CCCCCC"> always</font><font color="#E5E5E5"> allow</font>

434
00:17:07,099 --> 00:17:12,319
Dell<font color="#CCCCCC"> DOCSIS on and user authorization is</font>

435
00:17:09,829 --> 00:17:14,359
on<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> Emmanuel enabled the</font><font color="#E5E5E5"> boot</font>

436
00:17:12,319 --> 00:17:17,178
<font color="#E5E5E5">options just have a little bit more fun</font>

437
00:17:14,359 --> 00:17:18,469
<font color="#CCCCCC">with the device so here's some</font>

438
00:17:17,179 --> 00:17:21,829
interesting<font color="#E5E5E5"> facts about this though if</font>

439
00:17:18,470 --> 00:17:24,319
you enable Thunderbolt 3 pre-boot or<font color="#E5E5E5"> at</font>

440
00:17:21,829 --> 00:17:26,300
<font color="#E5E5E5">boot you basically give up the security</font>

441
00:17:24,319 --> 00:17:28,550
because<font color="#E5E5E5"> efi does not have a little</font>

442
00:17:26,300 --> 00:17:30,950
<font color="#CCCCCC">pop-up to ask you do you want</font><font color="#E5E5E5"> to allow</font>

443
00:17:28,550 --> 00:17:33,260
the advice or<font color="#E5E5E5"> not so regardless of a</font>

444
00:17:30,950 --> 00:17:35,000
security level that you set as soon<font color="#E5E5E5"> as</font>

445
00:17:33,260 --> 00:17:36,980
you enable<font color="#E5E5E5"> Thunderbolt at boot you're</font>

446
00:17:35,000 --> 00:17:39,559
screwed because<font color="#E5E5E5"> as soon</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> plug it in</font>

447
00:17:36,980 --> 00:17:41,240
in EFI mode I'll have philosophy if I

448
00:17:39,559 --> 00:17:43,070
firmware<font color="#E5E5E5"> regardless of secure boot</font>

449
00:17:41,240 --> 00:17:44,960
settings<font color="#E5E5E5"> so already I could you know</font>

450
00:17:43,070 --> 00:17:47,720
inject<font color="#E5E5E5"> something in the machine at boot</font>

451
00:17:44,960 --> 00:17:50,900
<font color="#E5E5E5">but even after boot windows does not</font>

452
00:17:47,720 --> 00:17:53,179
reset the bus<font color="#CCCCCC"> or rather the Intel secure</font>

453
00:17:50,900 --> 00:17:55,160
driver doesn't reset it<font color="#CCCCCC"> so as</font><font color="#E5E5E5"> long</font><font color="#CCCCCC"> as</font>

454
00:17:53,179 --> 00:17:57,410
they don't unplug<font color="#E5E5E5"> and replug the Sun</font>

455
00:17:55,160 --> 00:17:59,750
durable<font color="#E5E5E5"> 3 device if it was plugged in</font>

456
00:17:57,410 --> 00:18:02,150
<font color="#E5E5E5">that boot it'll silently remain active</font>

457
00:17:59,750 --> 00:18:04,580
regardless<font color="#E5E5E5"> of the driver and what it</font>

458
00:18:02,150 --> 00:18:06,890
says<font color="#CCCCCC"> so basically bypass</font><font color="#E5E5E5"> is completely</font>

459
00:18:04,580 --> 00:18:07,850
the<font color="#CCCCCC"> whole point obviously if you turn it</font>

460
00:18:06,890 --> 00:18:10,220
on in legacy

461
00:18:07,850 --> 00:18:13,039
<font color="#E5E5E5">no security this also completely</font>

462
00:18:10,220 --> 00:18:14,210
bypasses the authorization<font color="#E5E5E5"> and while</font>

463
00:18:13,039 --> 00:18:15,740
people are<font color="#E5E5E5"> still going to have fun</font>

464
00:18:14,210 --> 00:18:18,020
durable devices and<font color="#CCCCCC"> Thunderbolt 2</font>

465
00:18:15,740 --> 00:18:20,000
devices<font color="#CCCCCC"> in many cases they're</font><font color="#E5E5E5"> likely</font>

466
00:18:18,020 --> 00:18:22,160
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> need to enable legacy</font><font color="#E5E5E5"> mode in</font>

467
00:18:20,000 --> 00:18:24,710
fact just searching<font color="#E5E5E5"> on Google last night</font>

468
00:18:22,160 --> 00:18:26,750
<font color="#E5E5E5">going</font><font color="#CCCCCC"> over a few forums I saw a lot of</font>

469
00:18:24,710 --> 00:18:28,160
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know forum posts from people</font><font color="#CCCCCC"> saying</font>

470
00:18:26,750 --> 00:18:28,370
I<font color="#E5E5E5"> can't get this to work what should I</font>

471
00:18:28,160 --> 00:18:30,380
do

472
00:18:28,370 --> 00:18:33,199
and people suggesting oh just that at

473
00:18:30,380 --> 00:18:33,919
the<font color="#E5E5E5"> legacy mode or no security mode the</font>

474
00:18:33,200 --> 00:18:36,380
other<font color="#E5E5E5"> thing that's very</font><font color="#CCCCCC"> interesting</font>

475
00:18:33,919 --> 00:18:38,450
<font color="#E5E5E5">about</font><font color="#CCCCCC"> this and I can show</font><font color="#E5E5E5"> to you</font><font color="#CCCCCC"> because</font>

476
00:18:36,380 --> 00:18:42,470
I can't do a project<font color="#E5E5E5"> so just trust me</font><font color="#CCCCCC"> on</font>

477
00:18:38,450 --> 00:18:46,549
this<font color="#CCCCCC"> is when I plug in</font><font color="#E5E5E5"> this PCI Express</font>

478
00:18:42,470 --> 00:18:48,289
<font color="#E5E5E5">to fundable 3 device which is designed</font>

479
00:18:46,549 --> 00:18:51,190
<font color="#E5E5E5">to let</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> use an external</font><font color="#CCCCCC"> video card</font>

480
00:18:48,289 --> 00:18:53,419
when I plug it in what Thunderbolt

481
00:18:51,190 --> 00:18:57,919
<font color="#E5E5E5">security driver says is you're plugging</font>

482
00:18:53,419 --> 00:19:00,890
in a PCI<font color="#CCCCCC"> Express box</font><font color="#E5E5E5"> and I authorize it</font>

483
00:18:57,919 --> 00:19:03,169
once I've authorized the<font color="#CCCCCC"> box</font><font color="#E5E5E5"> regardless</font>

484
00:19:00,890 --> 00:19:05,990
of what I put in the PCI<font color="#CCCCCC"> Express slot</font>

485
00:19:03,169 --> 00:19:07,789
it's authorized<font color="#E5E5E5"> so if I normally have a</font>

486
00:19:05,990 --> 00:19:09,950
video card in here or some<font color="#E5E5E5"> other PCI</font>

487
00:19:07,789 --> 00:19:11,480
Express device and you come in<font color="#E5E5E5"> and which</font>

488
00:19:09,950 --> 00:19:13,820
I've authorized and you come in<font color="#E5E5E5"> and swap</font>

489
00:19:11,480 --> 00:19:16,880
it out and put a different<font color="#E5E5E5"> card inside</font>

490
00:19:13,820 --> 00:19:20,178
<font color="#E5E5E5">I'm owned because even in the strongest</font>

491
00:19:16,880 --> 00:19:21,620
secure ID unique ID mode it still

492
00:19:20,179 --> 00:19:23,539
doesn't recognize that<font color="#E5E5E5"> I've actually got</font>

493
00:19:21,620 --> 00:19:25,489
a different PCI Express device plug in

494
00:19:23,539 --> 00:19:26,539
the bridge<font color="#E5E5E5"> which just seems completely</font>

495
00:19:25,490 --> 00:19:28,370
broken<font color="#E5E5E5"> to me</font>

496
00:19:26,539 --> 00:19:29,690
so you're<font color="#E5E5E5"> authorizing the bridge not</font>

497
00:19:28,370 --> 00:19:32,330
actually the device that's<font color="#E5E5E5"> going to be</font>

498
00:19:29,690 --> 00:19:34,809
on the bridge<font color="#E5E5E5"> and then of</font><font color="#CCCCCC"> course with</font>

499
00:19:32,330 --> 00:19:37,280
<font color="#E5E5E5">the default allow Dell</font><font color="#CCCCCC"> Docs by default</font>

500
00:19:34,809 --> 00:19:38,809
<font color="#CCCCCC">I'm pretty sure if</font><font color="#E5E5E5"> you just put</font><font color="#CCCCCC"> the</font>

501
00:19:37,280 --> 00:19:41,350
right vid in and did in there

502
00:19:38,809 --> 00:19:43,580
maybe there's a symmetric key who knows

503
00:19:41,350 --> 00:19:46,039
pretty<font color="#CCCCCC"> sure you can bypass that as well</font>

504
00:19:43,580 --> 00:19:48,530
so there's a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> nice security</font>

505
00:19:46,039 --> 00:19:51,890
toggles<font color="#E5E5E5"> but in practice</font><font color="#CCCCCC"> they're they're</font>

506
00:19:48,530 --> 00:19:54,080
<font color="#CCCCCC">not</font><font color="#E5E5E5"> really strongly implemented today so</font>

507
00:19:51,890 --> 00:19:57,620
let's talk<font color="#CCCCCC"> about the three 380 itself</font>

508
00:19:54,080 --> 00:19:59,720
the<font color="#E5E5E5"> three 380 basically is a</font><font color="#CCCCCC"> 15</font><font color="#E5E5E5"> dollar</font>

509
00:19:57,620 --> 00:20:01,668
chip<font color="#E5E5E5"> now with the dev board a little bit</font>

510
00:19:59,720 --> 00:20:05,030
<font color="#E5E5E5">more expensive and it gives you PCI</font>

511
00:20:01,669 --> 00:20:06,890
Express donation<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two USB 3.0 has four</font>

512
00:20:05,030 --> 00:20:08,510
DMA channels<font color="#E5E5E5"> so you can do in and out</font>

513
00:20:06,890 --> 00:20:10,789
<font color="#E5E5E5">depending</font><font color="#CCCCCC"> on how you</font><font color="#E5E5E5"> program them and</font>

514
00:20:08,510 --> 00:20:13,760
has<font color="#CCCCCC"> two</font><font color="#E5E5E5"> PCI channels as well so you can</font>

515
00:20:10,789 --> 00:20:15,890
set<font color="#CCCCCC"> n mio</font><font color="#E5E5E5"> touchs PCI configuration</font>

516
00:20:13,760 --> 00:20:17,270
registers and<font color="#CCCCCC"> so on and so forth</font><font color="#E5E5E5"> and it</font>

517
00:20:15,890 --> 00:20:19,460
has specifically channels for

518
00:20:17,270 --> 00:20:21,260
<font color="#E5E5E5">configuring the device as well so you</font>

519
00:20:19,460 --> 00:20:24,350
can<font color="#CCCCCC"> access almost</font><font color="#E5E5E5"> any piece</font>

520
00:20:21,260 --> 00:20:26,240
<font color="#CCCCCC">i header register almost UN</font><font color="#E5E5E5"> USB register</font>

521
00:20:24,350 --> 00:20:27,830
<font color="#CCCCCC">and the idea is you can</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font>

522
00:20:26,240 --> 00:20:30,919
implement your own<font color="#E5E5E5"> USB device or</font>

523
00:20:27,830 --> 00:20:34,250
implement your own<font color="#E5E5E5"> PCI Express device on</font>

524
00:20:30,919 --> 00:20:37,130
top<font color="#CCCCCC"> of that it even</font><font color="#E5E5E5"> has on the chip</font><font color="#CCCCCC"> on</font>

525
00:20:34,250 --> 00:20:39,679
the controller and<font color="#E5E5E5"> 8051 microcontroller</font>

526
00:20:37,130 --> 00:20:41,540
<font color="#CCCCCC">and that 8051 mech</font><font color="#E5E5E5"> controller can be</font>

527
00:20:39,679 --> 00:20:43,130
connected<font color="#E5E5E5"> with EEPROM</font><font color="#CCCCCC"> and it can</font>

528
00:20:41,540 --> 00:20:45,889
actually<font color="#E5E5E5"> have code</font><font color="#CCCCCC"> that executes</font><font color="#E5E5E5"> and</font>

529
00:20:43,130 --> 00:20:49,400
that 8051 has full access to<font color="#E5E5E5"> all the</font>

530
00:20:45,890 --> 00:20:51,200
<font color="#E5E5E5">registers as well and there's a company</font>

531
00:20:49,400 --> 00:20:53,330
<font color="#CCCCCC">in Taiwan or China I'm not sure they</font>

532
00:20:51,200 --> 00:20:55,370
have<font color="#E5E5E5"> both websites called B plus and B</font>

533
00:20:53,330 --> 00:20:58,480
plus<font color="#E5E5E5"> will actually sell you some</font>

534
00:20:55,370 --> 00:21:01,459
development kits<font color="#E5E5E5"> they'll sell you the PP</font>

535
00:20:58,480 --> 00:21:03,770
<font color="#CCCCCC">3380 which</font><font color="#E5E5E5"> is an actual PCI Express card</font>

536
00:21:01,460 --> 00:21:06,620
<font color="#E5E5E5">that one has an 8 kilobyte EEPROM</font>

537
00:21:03,770 --> 00:21:08,299
<font color="#E5E5E5">they'll say the USB 3 380 VB which is</font>

538
00:21:06,620 --> 00:21:11,030
what I showed<font color="#CCCCCC"> you earlier</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> the</font>

539
00:21:08,299 --> 00:21:13,820
small<font color="#E5E5E5"> meaning PCI Express version which</font>

540
00:21:11,030 --> 00:21:16,340
has only<font color="#CCCCCC"> 2 and</font><font color="#E5E5E5"> 56 by EEPROM and they</font>

541
00:21:13,820 --> 00:21:17,629
also have an<font color="#CCCCCC"> Express card version but no</font>

542
00:21:16,340 --> 00:21:19,580
one has been<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to actually get that</font>

543
00:21:17,630 --> 00:21:21,200
to<font color="#E5E5E5"> work with with some of the attacks</font>

544
00:21:19,580 --> 00:21:23,299
<font color="#E5E5E5">were going to talk</font><font color="#CCCCCC"> about now</font>

545
00:21:21,200 --> 00:21:25,760
unfortunately<font color="#E5E5E5"> a few months ago</font><font color="#CCCCCC"> PL XO</font>

546
00:21:23,299 --> 00:21:28,280
actually makes the chip<font color="#E5E5E5"> got bought</font><font color="#CCCCCC"> by</font>

547
00:21:25,760 --> 00:21:30,860
Broadcom<font color="#CCCCCC"> and now</font><font color="#E5E5E5"> an NDA to access data</font>

548
00:21:28,280 --> 00:21:32,690
sheets you need an NDA to do anything so

549
00:21:30,860 --> 00:21:33,889
thankfully you know I've got<font color="#CCCCCC"> all the I</font>

550
00:21:32,690 --> 00:21:36,020
got all the<font color="#E5E5E5"> stuff before the acquisition</font>

551
00:21:33,890 --> 00:21:38,030
happened<font color="#E5E5E5"> and otherwise</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have to sign</font><font color="#CCCCCC"> up</font>

552
00:21:36,020 --> 00:21:40,370
with<font color="#CCCCCC"> a Broadcom account and worry</font><font color="#E5E5E5"> about</font>

553
00:21:38,030 --> 00:21:43,549
that again there's a few problems<font color="#CCCCCC"> the</font>

554
00:21:40,370 --> 00:21:45,080
chip can<font color="#E5E5E5"> only do 32-bit DMA so you're</font>

555
00:21:43,549 --> 00:21:47,750
stuck with address of the<font color="#E5E5E5"> low</font><font color="#CCCCCC"> 4</font>

556
00:21:45,080 --> 00:21:50,090
gigabytes<font color="#E5E5E5"> and also if you do DMA to an</font>

557
00:21:47,750 --> 00:21:52,970
incorrect address basically a memory

558
00:21:50,090 --> 00:21:55,668
hole or reserved region of<font color="#CCCCCC"> RAM or an MMI</font>

559
00:21:52,970 --> 00:21:57,140
oh the device<font color="#E5E5E5"> usually lock up in some</font>

560
00:21:55,669 --> 00:21:59,299
<font color="#E5E5E5">cases you</font><font color="#CCCCCC"> actually have to power it off</font>

561
00:21:57,140 --> 00:22:00,710
<font color="#E5E5E5">wait a few seconds power it back on</font>

562
00:21:59,299 --> 00:22:03,679
<font color="#CCCCCC">sorry</font><font color="#E5E5E5"> let's just</font><font color="#CCCCCC"> read plug and unplug</font>

563
00:22:00,710 --> 00:22:05,750
<font color="#CCCCCC">the device dies if you DMA on</font><font color="#E5E5E5"> valid</font>

564
00:22:03,679 --> 00:22:07,549
memory of course<font color="#E5E5E5"> both</font><font color="#CCCCCC"> of those are big</font>

565
00:22:05,750 --> 00:22:10,400
<font color="#CCCCCC">issues</font><font color="#E5E5E5"> because modern operating systems</font>

566
00:22:07,549 --> 00:22:12,710
<font color="#E5E5E5">have memory above 4 gigabytes a lot of</font>

567
00:22:10,400 --> 00:22:15,110
times most<font color="#E5E5E5"> of the time and you don't</font>

568
00:22:12,710 --> 00:22:17,240
know<font color="#E5E5E5"> ahead of time what</font><font color="#CCCCCC"> the physical</font>

569
00:22:15,110 --> 00:22:19,309
address<font color="#CCCCCC"> space of</font><font color="#E5E5E5"> the other machine looks</font>

570
00:22:17,240 --> 00:22:21,169
like<font color="#CCCCCC"> obviously there's some</font><font color="#E5E5E5"> well-known</font>

571
00:22:19,309 --> 00:22:23,178
addresses like SMM<font color="#CCCCCC"> Ram that you should</font>

572
00:22:21,169 --> 00:22:24,980
never touch but you might touch some

573
00:22:23,179 --> 00:22:27,290
specific memory hold on<font color="#E5E5E5"> this</font><font color="#CCCCCC"> veil and</font>

574
00:22:24,980 --> 00:22:30,049
then a whole device locks up which makes

575
00:22:27,290 --> 00:22:31,639
attacking and<font color="#E5E5E5"> reliability</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> harder</font>

576
00:22:30,049 --> 00:22:33,379
and<font color="#E5E5E5"> this is kind of what interesting</font>

577
00:22:31,640 --> 00:22:34,309
mean can I find ways<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make this a</font>

578
00:22:33,380 --> 00:22:36,529
<font color="#E5E5E5">little bit better</font>

579
00:22:34,309 --> 00:22:39,379
so out of the box<font color="#E5E5E5"> when you buy this 3380</font>

580
00:22:36,529 --> 00:22:42,169
device<font color="#CCCCCC"> it's in the kind of a nerve state</font>

581
00:22:39,379 --> 00:22:44,928
<font color="#E5E5E5">the PCI</font><font color="#CCCCCC"> Express interface is active but</font>

582
00:22:42,169 --> 00:22:47,779
<font color="#E5E5E5">the USB side is not so you have to flash</font>

583
00:22:44,929 --> 00:22:50,539
it with your<font color="#CCCCCC"> own custom serial EEPROM</font>

584
00:22:47,779 --> 00:22:53,809
and that serial<font color="#CCCCCC"> Ephrem has basically</font><font color="#E5E5E5"> up</font>

585
00:22:50,539 --> 00:22:56,119
to 256 bytes<font color="#CCCCCC"> at minimum of configuration</font>

586
00:22:53,809 --> 00:22:57,979
registers and you can through the EEPROM

587
00:22:56,119 --> 00:23:00,709
configure how this device is<font color="#E5E5E5"> going to</font>

588
00:22:57,979 --> 00:23:03,499
act<font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> configure the</font><font color="#CCCCCC"> PCI ID the</font>

589
00:23:00,710 --> 00:23:05,840
device ID<font color="#E5E5E5"> and any other control register</font>

590
00:23:03,499 --> 00:23:09,200
that<font color="#E5E5E5"> you want so at minimum</font><font color="#CCCCCC"> you need</font><font color="#E5E5E5"> a</font>

591
00:23:05,840 --> 00:23:11,119
<font color="#E5E5E5">little header</font><font color="#CCCCCC"> then you can specify the</font>

592
00:23:09,200 --> 00:23:14,539
<font color="#E5E5E5">size of the firmware and then in this</font>

593
00:23:11,119 --> 00:23:16,699
<font color="#E5E5E5">case we are setting the USB control</font>

594
00:23:14,539 --> 00:23:18,679
register to this<font color="#E5E5E5"> value which if you look</font>

595
00:23:16,700 --> 00:23:22,609
<font color="#E5E5E5">at the data sheet basically enables the</font>

596
00:23:18,679 --> 00:23:25,279
USB<font color="#CCCCCC"> 5 so if we set these these</font><font color="#E5E5E5"> bytes in</font>

597
00:23:22,609 --> 00:23:27,139
the<font color="#E5E5E5"> sealy prom this will then enable the</font>

598
00:23:25,279 --> 00:23:29,839
<font color="#E5E5E5">USB controller that's kind of the very</font>

599
00:23:27,139 --> 00:23:32,238
basic step the way the firmware works is

600
00:23:29,839 --> 00:23:34,549
you essentially<font color="#E5E5E5"> it's all big endian and</font>

601
00:23:32,239 --> 00:23:36,830
you take the register<font color="#CCCCCC"> that you want to</font>

602
00:23:34,549 --> 00:23:38,349
modify and<font color="#CCCCCC"> you're divided by</font><font color="#E5E5E5"> 4 into a</font>

603
00:23:36,830 --> 00:23:42,349
register index so if you want to modify

604
00:23:38,349 --> 00:23:44,389
<font color="#E5E5E5">register</font><font color="#CCCCCC"> HC divided</font><font color="#E5E5E5"> by 4 at 0 x 23 and</font>

605
00:23:42,349 --> 00:23:46,908
then<font color="#E5E5E5"> you specify if it's a USB</font>

606
00:23:44,389 --> 00:23:49,279
controller register or if it's a<font color="#CCCCCC"> pci</font>

607
00:23:46,909 --> 00:23:52,070
<font color="#CCCCCC">express register in</font><font color="#E5E5E5"> this case it's USB</font>

608
00:23:49,279 --> 00:23:54,080
<font color="#E5E5E5">and then the data comes after that so</font>

609
00:23:52,070 --> 00:23:56,479
this<font color="#E5E5E5"> is how we're setting this value in</font>

610
00:23:54,080 --> 00:23:58,399
the USB<font color="#E5E5E5"> control register now other</font>

611
00:23:56,479 --> 00:24:00,529
<font color="#E5E5E5">things we'd like to</font><font color="#CCCCCC"> do is give this</font>

612
00:23:58,399 --> 00:24:03,099
thing a more interesting<font color="#E5E5E5"> PCI Express</font>

613
00:24:00,529 --> 00:24:05,989
vendor and device ID for example

614
00:24:03,099 --> 00:24:07,789
<font color="#CCCCCC">Broadcom is B</font><font color="#E5E5E5"> reader this</font><font color="#CCCCCC"> is actually</font>

615
00:24:05,989 --> 00:24:10,549
going to give the device<font color="#E5E5E5"> bus master</font>

616
00:24:07,789 --> 00:24:12,710
access even<font color="#E5E5E5"> during logon even before</font>

617
00:24:10,549 --> 00:24:15,589
<font color="#E5E5E5">logon so we're going to configure PCI</font>

618
00:24:12,710 --> 00:24:18,739
register<font color="#E5E5E5"> 0 to give us that PCI vendor ID</font>

619
00:24:15,589 --> 00:24:21,080
and that<font color="#CCCCCC"> device ID then we're going</font><font color="#E5E5E5"> to</font>

620
00:24:18,739 --> 00:24:23,239
program the DMA endpoints one<font color="#E5E5E5"> endpoint</font>

621
00:24:21,080 --> 00:24:25,158
for out<font color="#E5E5E5"> for</font><font color="#CCCCCC"> writes because</font><font color="#E5E5E5"> we're likely</font>

622
00:24:23,239 --> 00:24:27,169
going<font color="#E5E5E5"> to want more speed</font><font color="#CCCCCC"> on reads less</font>

623
00:24:25,159 --> 00:24:29,239
on writes and three different<font color="#CCCCCC"> DMA</font><font color="#E5E5E5"> and</font>

624
00:24:27,169 --> 00:24:31,309
<font color="#CCCCCC">endpoints for</font><font color="#E5E5E5"> reads each of these</font>

625
00:24:29,239 --> 00:24:33,559
endpoints<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> 16 megabytes a second</font>

626
00:24:31,309 --> 00:24:35,779
so you<font color="#CCCCCC"> can do the</font><font color="#E5E5E5"> math</font><font color="#CCCCCC"> that gives us a</font>

627
00:24:33,559 --> 00:24:38,359
pretty pretty fast<font color="#CCCCCC"> transfer</font><font color="#E5E5E5"> speed</font>

628
00:24:35,779 --> 00:24:40,789
<font color="#E5E5E5">especially we can multi thread things as</font>

629
00:24:38,359 --> 00:24:43,759
well<font color="#E5E5E5"> so now I've got our DMA</font><font color="#CCCCCC"> and points</font>

630
00:24:40,789 --> 00:24:45,769
active<font color="#E5E5E5"> we've got a fake</font><font color="#CCCCCC"> pci ID</font><font color="#E5E5E5"> the last</font>

631
00:24:43,759 --> 00:24:47,440
thing that we<font color="#CCCCCC"> need to do is for example</font>

632
00:24:45,769 --> 00:24:49,570
set up that<font color="#CCCCCC"> Google glass you</font>

633
00:24:47,440 --> 00:24:51,490
the ID<font color="#E5E5E5"> this will make the USB side look</font>

634
00:24:49,570 --> 00:24:53,439
like a Google glass<font color="#CCCCCC"> it'll make the PCI</font>

635
00:24:51,490 --> 00:24:55,179
<font color="#CCCCCC">Express side looked like a bra comm SD</font>

636
00:24:53,440 --> 00:24:58,029
card driver<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is essentially a</font>

637
00:24:55,179 --> 00:25:01,090
standard<font color="#CCCCCC"> seal EEPROM that for</font><font color="#E5E5E5"> example</font>

638
00:24:58,029 --> 00:25:02,889
also<font color="#E5E5E5"> used in his attacks and</font><font color="#CCCCCC"> the Google</font>

639
00:25:01,090 --> 00:25:05,980
glass is just<font color="#CCCCCC"> so we can</font><font color="#E5E5E5"> then drop an</font>

640
00:25:02,889 --> 00:25:07,508
android adb driver<font color="#CCCCCC"> without having</font><font color="#E5E5E5"> to</font>

641
00:25:05,980 --> 00:25:09,399
<font color="#E5E5E5">write a custom signed driver for that</font>

642
00:25:07,509 --> 00:25:11,159
<font color="#E5E5E5">but we'll see there's not you don't</font>

643
00:25:09,399 --> 00:25:13,539
<font color="#E5E5E5">necessarily need to</font><font color="#CCCCCC"> go down that route</font>

644
00:25:11,159 --> 00:25:16,299
<font color="#E5E5E5">now one</font><font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> mention is</font><font color="#CCCCCC"> that a</font><font color="#E5E5E5"> PP</font>

645
00:25:13,539 --> 00:25:18,970
380<font color="#CCCCCC"> but</font><font color="#E5E5E5"> PCI</font><font color="#CCCCCC"> 1 not the</font><font color="#E5E5E5"> one I'm using</font>

646
00:25:16,299 --> 00:25:21,549
<font color="#E5E5E5">actually has an</font><font color="#CCCCCC"> 80 kilobyte a prime</font><font color="#E5E5E5"> so</font>

647
00:25:18,970 --> 00:25:24,220
because the 8051 chip that's there which

648
00:25:21,549 --> 00:25:27,039
is only not running has full access to

649
00:25:24,220 --> 00:25:28,389
USB<font color="#E5E5E5"> and</font><font color="#CCCCCC"> PCI this entire attack that I'm</font>

650
00:25:27,039 --> 00:25:28,960
actually doing through two separate

651
00:25:28,389 --> 00:25:31,269
machines

652
00:25:28,960 --> 00:25:34,179
I could have<font color="#E5E5E5"> implemented all</font><font color="#CCCCCC"> of this in</font>

653
00:25:31,269 --> 00:25:35,919
the 8051<font color="#CCCCCC"> EEPROM</font><font color="#E5E5E5"> in a single tiny device</font>

654
00:25:34,179 --> 00:25:38,169
that just plugs in our USB<font color="#CCCCCC"> C board</font><font color="#E5E5E5"> right</font>

655
00:25:35,919 --> 00:25:40,450
so it doesn't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> look this</font><font color="#E5E5E5"> unwieldy</font>

656
00:25:38,169 --> 00:25:42,759
<font color="#E5E5E5">it can be a simple</font><font color="#CCCCCC"> type</font><font color="#E5E5E5"> C device that</font>

657
00:25:40,450 --> 00:25:44,590
you know the right ASIC or<font color="#E5E5E5"> even this</font>

658
00:25:42,759 --> 00:25:46,360
<font color="#E5E5E5">little chip you plug it in it's a little</font>

659
00:25:44,590 --> 00:25:46,899
<font color="#CCCCCC">a</font><font color="#E5E5E5"> prime on it and you mount the attack</font>

660
00:25:46,360 --> 00:25:48,519
directly

661
00:25:46,899 --> 00:25:50,229
this kids are gonna<font color="#E5E5E5"> mount the attack and</font>

662
00:25:48,519 --> 00:25:52,240
the reads from<font color="#E5E5E5"> this machine to the other</font>

663
00:25:50,230 --> 00:25:53,860
<font color="#E5E5E5">but because</font><font color="#CCCCCC"> it has its own chip</font><font color="#E5E5E5"> it's</font>

664
00:25:52,240 --> 00:25:55,690
very easy<font color="#E5E5E5"> to just program</font><font color="#CCCCCC"> the code</font>

665
00:25:53,860 --> 00:25:58,240
directly<font color="#E5E5E5"> again this is very</font><font color="#CCCCCC"> surprising</font>

666
00:25:55,690 --> 00:26:00,279
right because before this type<font color="#CCCCCC"> of chip</font>

667
00:25:58,240 --> 00:26:01,840
you have<font color="#E5E5E5"> to have your own</font><font color="#CCCCCC"> FPGA what</font>

668
00:26:00,279 --> 00:26:04,929
<font color="#CCCCCC">we'll do what's narrated for</font><font color="#E5E5E5"> example it</font>

669
00:26:01,840 --> 00:26:07,629
<font color="#E5E5E5">just put</font><font color="#CCCCCC"> MIPS on it this</font><font color="#E5E5E5"> just makes it</font>

670
00:26:04,929 --> 00:26:09,370
much much much easier<font color="#CCCCCC"> you on top of that</font>

671
00:26:07,629 --> 00:26:12,340
<font color="#E5E5E5">even have some nice</font><font color="#CCCCCC"> little diagnostic</font>

672
00:26:09,370 --> 00:26:15,668
LEDs that<font color="#CCCCCC"> B+ put on this we have 4 LEDs</font>

673
00:26:12,340 --> 00:26:17,590
<font color="#CCCCCC">3 orange and one blue</font><font color="#E5E5E5"> and this can be</font>

674
00:26:15,669 --> 00:26:19,299
very<font color="#CCCCCC"> useful</font><font color="#E5E5E5"> during development</font><font color="#CCCCCC"> actually</font>

675
00:26:17,590 --> 00:26:21,850
<font color="#CCCCCC">in a blink the LEDs and see what's going</font>

676
00:26:19,299 --> 00:26:23,379
on<font color="#CCCCCC"> and specifically</font><font color="#E5E5E5"> if using 8051</font>

677
00:26:21,850 --> 00:26:26,019
you can use the LEDs<font color="#E5E5E5"> this kind of</font>

678
00:26:23,379 --> 00:26:28,059
<font color="#E5E5E5">signaling to know ok</font><font color="#CCCCCC"> I'm connected ok</font>

679
00:26:26,019 --> 00:26:30,789
the DMA work ok the attack is at<font color="#E5E5E5"> this</font>

680
00:26:28,059 --> 00:26:32,379
<font color="#E5E5E5">stage</font><font color="#CCCCCC"> it's a really nice neat little</font>

681
00:26:30,789 --> 00:26:34,658
package of<font color="#E5E5E5"> against everything you could</font>

682
00:26:32,379 --> 00:26:36,490
need<font color="#CCCCCC"> it's like almost like</font><font color="#E5E5E5"> they thought</font>

683
00:26:34,659 --> 00:26:40,779
<font color="#E5E5E5">about whether</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> target market was</font>

684
00:26:36,490 --> 00:26:43,480
going<font color="#CCCCCC"> to be so you plug it in</font><font color="#E5E5E5"> without</font>

685
00:26:40,779 --> 00:26:45,639
the firmware<font color="#CCCCCC"> and you're going to see a</font>

686
00:26:43,480 --> 00:26:47,860
USB serial<font color="#CCCCCC"> 4 control on one side and</font>

687
00:26:45,639 --> 00:26:50,080
you're<font color="#E5E5E5"> going to see nothing on the other</font>

688
00:26:47,860 --> 00:26:51,758
so the<font color="#CCCCCC"> first thing we need to do is</font>

689
00:26:50,080 --> 00:26:53,918
<font color="#E5E5E5">program that serial EEPROM</font>

690
00:26:51,759 --> 00:26:56,500
to<font color="#E5E5E5"> program the serial EEPROM we need an</font>

691
00:26:53,919 --> 00:27:00,159
actual driver<font color="#E5E5E5"> to attach to the PCI</font>

692
00:26:56,500 --> 00:27:01,180
Express<font color="#CCCCCC"> device memory map the bars and</font>

693
00:27:00,159 --> 00:27:04,150
then<font color="#E5E5E5"> acts</font>

694
00:27:01,180 --> 00:27:06,550
the rest<font color="#CCCCCC"> are stupor M the serial port</font><font color="#E5E5E5"> so</font>

695
00:27:04,150 --> 00:27:08,800
for this you need a driver<font color="#E5E5E5"> now writing</font>

696
00:27:06,550 --> 00:27:10,750
PCI Express<font color="#CCCCCC"> driver sounds like a really</font>

697
00:27:08,800 --> 00:27:12,820
<font color="#E5E5E5">hard thing</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> but it turns out that</font>

698
00:27:10,750 --> 00:27:14,830
Microsoft<font color="#E5E5E5"> made it really really easy</font>

699
00:27:12,820 --> 00:27:17,379
with<font color="#E5E5E5"> something they</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> you MDF which</font>

700
00:27:14,830 --> 00:27:18,639
<font color="#CCCCCC">is a user mode driver framework and I'm</font>

701
00:27:17,380 --> 00:27:21,430
not going to teach you how<font color="#CCCCCC"> to write a</font>

702
00:27:18,640 --> 00:27:24,670
driver<font color="#E5E5E5"> but I'll basically show you in a</font>

703
00:27:21,430 --> 00:27:27,130
few slides<font color="#CCCCCC"> just how easy this is</font><font color="#E5E5E5"> so we</font>

704
00:27:24,670 --> 00:27:29,890
need a<font color="#E5E5E5"> driver to map the MM i/o range on</font>

705
00:27:27,130 --> 00:27:32,770
the PCI Express<font color="#E5E5E5"> device and we need to</font>

706
00:27:29,890 --> 00:27:35,320
flash the EEPROM now a real<font color="#E5E5E5"> kernel-mode</font>

707
00:27:32,770 --> 00:27:37,030
<font color="#E5E5E5">driver is hard to write lease the blue</font>

708
00:27:35,320 --> 00:27:38,830
screens of death and<font color="#E5E5E5"> also has to be</font>

709
00:27:37,030 --> 00:27:40,149
<font color="#E5E5E5">science</font><font color="#CCCCCC"> especially in the latest</font>

710
00:27:38,830 --> 00:27:42,280
versions<font color="#E5E5E5"> of Windows 10 it has to be</font>

711
00:27:40,150 --> 00:27:45,160
signed<font color="#E5E5E5"> by Microsoft submitted to the</font>

712
00:27:42,280 --> 00:27:47,980
<font color="#CCCCCC">wickel certification page and you</font><font color="#E5E5E5"> know</font>

713
00:27:45,160 --> 00:27:50,800
<font color="#CCCCCC">tough luck getting a you know DMA attack</font>

714
00:27:47,980 --> 00:27:53,350
driver<font color="#E5E5E5"> serial EEPROM flasher</font><font color="#CCCCCC"> signed by</font>

715
00:27:50,800 --> 00:27:56,500
Microsoft<font color="#E5E5E5"> now the nice thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that you</font>

716
00:27:53,350 --> 00:28:00,010
MDF in specifically<font color="#E5E5E5"> Windows 8 and later</font>

717
00:27:56,500 --> 00:28:01,960
<font color="#E5E5E5">now has full access to the PCI</font><font color="#CCCCCC"> Express</font>

718
00:28:00,010 --> 00:28:04,210
bus<font color="#CCCCCC"> and with the right</font><font color="#E5E5E5"> settings in your</font>

719
00:28:01,960 --> 00:28:06,040
INF file you can actually<font color="#E5E5E5"> just memory</font>

720
00:28:04,210 --> 00:28:08,350
map PCI Express memory<font color="#E5E5E5"> and user mode and</font>

721
00:28:06,040 --> 00:28:10,899
natively access it as well as natively

722
00:28:08,350 --> 00:28:12,850
access any registers as well<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> mvf</font>

723
00:28:10,900 --> 00:28:14,740
drivers<font color="#CCCCCC"> are dll's that</font><font color="#E5E5E5"> running user mode</font>

724
00:28:12,850 --> 00:28:16,899
and so you<font color="#E5E5E5"> don't have all</font><font color="#CCCCCC"> the strict</font>

725
00:28:14,740 --> 00:28:19,990
signing<font color="#CCCCCC"> cheques in fact the only signing</font>

726
00:28:16,900 --> 00:28:22,570
check is at installation if it's signed

727
00:28:19,990 --> 00:28:25,300
by<font color="#CCCCCC"> something in your local trust</font>

728
00:28:22,570 --> 00:28:26,830
<font color="#E5E5E5">Authority</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example what else did</font>

729
00:28:25,300 --> 00:28:28,510
when<font color="#CCCCCC"> he published</font><font color="#E5E5E5"> the Windows driver if</font>

730
00:28:26,830 --> 00:28:31,449
he<font color="#E5E5E5"> just basically wrote a little Staller</font>

731
00:28:28,510 --> 00:28:34,120
<font color="#E5E5E5">that has his certificate installs it</font>

732
00:28:31,450 --> 00:28:35,710
into your trusted routes installs the

733
00:28:34,120 --> 00:28:37,899
driver and then deletes a certificate

734
00:28:35,710 --> 00:28:40,900
<font color="#E5E5E5">once it is installed there's no</font><font color="#CCCCCC"> load</font>

735
00:28:37,900 --> 00:28:42,430
time<font color="#E5E5E5"> checks whatsoever so technically um</font>

736
00:28:40,900 --> 00:28:44,380
<font color="#E5E5E5">user mode drivers don't</font><font color="#CCCCCC"> have to be</font>

737
00:28:42,430 --> 00:28:46,450
signed when they load they just have to

738
00:28:44,380 --> 00:28:48,310
<font color="#CCCCCC">be signed when they were installed and</font>

739
00:28:46,450 --> 00:28:50,920
they just have to<font color="#E5E5E5"> be signed by something</font>

740
00:28:48,310 --> 00:28:53,350
<font color="#E5E5E5">in your local certificate store unlike</font>

741
00:28:50,920 --> 00:28:56,080
real<font color="#E5E5E5"> occur demo drivers which are much</font>

742
00:28:53,350 --> 00:28:59,050
more<font color="#CCCCCC"> hard-coded than that so</font><font color="#E5E5E5"> basically</font>

743
00:28:56,080 --> 00:29:01,060
<font color="#CCCCCC">you MDF driver</font><font color="#E5E5E5"> just needs an INF file</font>

744
00:28:59,050 --> 00:29:04,180
where you configure<font color="#E5E5E5"> these two settings</font>

745
00:29:01,060 --> 00:29:06,280
allow direct harder access and register

746
00:29:04,180 --> 00:29:08,830
access<font color="#E5E5E5"> using Gizem of mapping and then</font>

747
00:29:06,280 --> 00:29:10,840
<font color="#E5E5E5">you put in the</font><font color="#CCCCCC"> DCI device ID that you</font>

748
00:29:08,830 --> 00:29:13,270
want to control and the first one here

749
00:29:10,840 --> 00:29:14,720
is when the<font color="#CCCCCC"> device comes up in its</font>

750
00:29:13,270 --> 00:29:16,789
default<font color="#CCCCCC"> State</font>

751
00:29:14,720 --> 00:29:18,980
basically before<font color="#E5E5E5"> we program</font><font color="#CCCCCC"> it and this</font>

752
00:29:16,789 --> 00:29:20,840
is after we program<font color="#CCCCCC"> it as a Broadcom SD</font>

753
00:29:18,980 --> 00:29:23,030
card reader<font color="#CCCCCC"> so this can act as the</font>

754
00:29:20,840 --> 00:29:27,168
driver<font color="#E5E5E5"> both for the original on flash</font>

755
00:29:23,030 --> 00:29:29,629
device<font color="#CCCCCC"> also</font><font color="#E5E5E5"> after our custom flash once</font>

756
00:29:27,169 --> 00:29:32,120
you have the INF file done basically

757
00:29:29,630 --> 00:29:35,750
like three<font color="#E5E5E5"> lines of code</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> create your</font>

758
00:29:32,120 --> 00:29:38,719
driver object ten lines of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> to then</font>

759
00:29:35,750 --> 00:29:40,490
<font color="#E5E5E5">create the device which will react</font>

760
00:29:38,720 --> 00:29:42,470
whenever the device<font color="#E5E5E5"> is plugged in and</font>

761
00:29:40,490 --> 00:29:44,570
then when the device is<font color="#E5E5E5"> plugged in</font>

762
00:29:42,470 --> 00:29:46,789
that's when you have<font color="#CCCCCC"> fifteen lines of</font>

763
00:29:44,570 --> 00:29:50,870
code<font color="#CCCCCC"> to basically enumerate the</font>

764
00:29:46,789 --> 00:29:52,640
resources<font color="#E5E5E5"> find the</font><font color="#CCCCCC"> Bram bar</font><font color="#E5E5E5"> see that</font>

765
00:29:50,870 --> 00:29:55,520
it's<font color="#CCCCCC"> eight kilobytes</font><font color="#E5E5E5"> which is the</font>

766
00:29:52,640 --> 00:29:58,580
<font color="#E5E5E5">default size of the MM i/o range</font>

767
00:29:55,520 --> 00:30:01,280
basically<font color="#CCCCCC"> map it and I'll snap in user</font>

768
00:29:58,580 --> 00:30:03,260
<font color="#E5E5E5">mode</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> can flash</font><font color="#CCCCCC"> it and we're</font>

769
00:30:01,280 --> 00:30:05,510
pretty much<font color="#E5E5E5"> done except if we want to be</font>

770
00:30:03,260 --> 00:30:08,240
good programmers we<font color="#E5E5E5"> also they need to</font>

771
00:30:05,510 --> 00:30:11,000
clean<font color="#CCCCCC"> up when</font><font color="#E5E5E5"> the harder is released so</font>

772
00:30:08,240 --> 00:30:13,640
<font color="#E5E5E5">four slides of about 40 lines of code</font>

773
00:30:11,000 --> 00:30:16,039
and we've got a PCI Express<font color="#E5E5E5"> driver and</font>

774
00:30:13,640 --> 00:30:18,950
it doesn't get assigned and we<font color="#CCCCCC"> can flash</font>

775
00:30:16,039 --> 00:30:20,960
the firmware on this thing once we've

776
00:30:18,950 --> 00:30:23,659
<font color="#E5E5E5">done this then basically it'll come up</font>

777
00:30:20,960 --> 00:30:25,490
<font color="#E5E5E5">as an</font><font color="#CCCCCC"> android google glass device and</font>

778
00:30:23,659 --> 00:30:27,049
just<font color="#CCCCCC"> getting the google drivers which</font>

779
00:30:25,490 --> 00:30:29,120
<font color="#CCCCCC">already signed anyway the use demo</font>

780
00:30:27,049 --> 00:30:32,570
drivers as well<font color="#E5E5E5"> will now give us a win</font>

781
00:30:29,120 --> 00:30:34,639
USB interface now<font color="#CCCCCC"> long-term my plan is</font>

782
00:30:32,570 --> 00:30:37,908
to<font color="#CCCCCC"> actually write a proper</font><font color="#E5E5E5"> non google</font>

783
00:30:34,640 --> 00:30:40,159
glass relying USB driver for this<font color="#E5E5E5"> using</font>

784
00:30:37,909 --> 00:30:42,140
<font color="#CCCCCC">um DF</font><font color="#E5E5E5"> but because</font><font color="#CCCCCC"> ole has already done</font>

785
00:30:40,159 --> 00:30:44,210
<font color="#CCCCCC">all the work with this</font><font color="#E5E5E5"> PCI leach tool</font><font color="#CCCCCC"> I</font>

786
00:30:42,140 --> 00:30:46,280
didn't want to<font color="#E5E5E5"> reinvent the wheel</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> to</font>

787
00:30:44,210 --> 00:30:47,360
make to<font color="#CCCCCC"> keep</font><font color="#E5E5E5"> this tool working with some</font>

788
00:30:46,280 --> 00:30:49,940
<font color="#E5E5E5">of the stuff I'm</font><font color="#CCCCCC"> going to show</font>

789
00:30:47,360 --> 00:30:51,860
I just kept it as a<font color="#E5E5E5"> Google glass so then</font>

790
00:30:49,940 --> 00:30:54,049
it works natively<font color="#E5E5E5"> with with his code</font>

791
00:30:51,860 --> 00:30:55,668
<font color="#E5E5E5">DCI</font><font color="#CCCCCC"> leach is really really nice and you</font>

792
00:30:54,049 --> 00:30:57,530
do a whole bunch<font color="#E5E5E5"> of things here</font><font color="#CCCCCC"> I've</font>

793
00:30:55,669 --> 00:30:59,059
<font color="#CCCCCC">basically extended it</font><font color="#E5E5E5"> for some of the</font>

794
00:30:57,530 --> 00:31:01,580
<font color="#E5E5E5">things we're going to be talking</font><font color="#CCCCCC"> about</font>

795
00:30:59,059 --> 00:31:03,620
in this section<font color="#E5E5E5"> so now I've got a Google</font>

796
00:31:01,580 --> 00:31:06,889
<font color="#CCCCCC">glass on</font><font color="#E5E5E5"> one side and I've got a PCI</font>

797
00:31:03,620 --> 00:31:08,149
<font color="#CCCCCC">Express device on the</font><font color="#E5E5E5"> other so now what</font>

798
00:31:06,890 --> 00:31:10,250
<font color="#E5E5E5">are the fun things we can do with this</font>

799
00:31:08,150 --> 00:31:13,549
is now I have<font color="#CCCCCC"> DMA access to the bottom</font>

800
00:31:10,250 --> 00:31:15,500
<font color="#E5E5E5">32 bits of memory</font><font color="#CCCCCC"> well first I</font><font color="#E5E5E5"> want to</font>

801
00:31:13,549 --> 00:31:17,360
talk about the<font color="#CCCCCC"> hell heap</font><font color="#E5E5E5"> the hell heap</font>

802
00:31:15,500 --> 00:31:20,870
is something I first talked<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> sis</font>

803
00:31:17,360 --> 00:31:23,209
can about<font color="#E5E5E5"> five years ago</font><font color="#CCCCCC"> using as far as</font>

804
00:31:20,870 --> 00:31:24,709
some<font color="#CCCCCC"> a CPI physical attacks</font><font color="#E5E5E5"> and ever</font>

805
00:31:23,210 --> 00:31:26,809
<font color="#E5E5E5">since then people have found more and</font>

806
00:31:24,710 --> 00:31:27,770
<font color="#E5E5E5">more interesting ways of abusing the Hal</font>

807
00:31:26,809 --> 00:31:28,870
<font color="#E5E5E5">heap</font>

808
00:31:27,770 --> 00:31:30,920
<font color="#E5E5E5">but there's a lot of misunderstanding</font>

809
00:31:28,870 --> 00:31:33,649
exactly<font color="#E5E5E5"> about</font><font color="#CCCCCC"> how the hell heap works</font>

810
00:31:30,920 --> 00:31:35,720
<font color="#E5E5E5">where it is a lot of people say that</font>

811
00:31:33,650 --> 00:31:37,610
static when in<font color="#E5E5E5"> fact it isn't so I really</font>

812
00:31:35,720 --> 00:31:40,100
want to<font color="#E5E5E5"> drill down and kind of have the</font>

813
00:31:37,610 --> 00:31:41,209
final word on what what the hell heap is

814
00:31:40,100 --> 00:31:43,459
and what it means<font color="#CCCCCC"> for you</font>

815
00:31:41,210 --> 00:31:45,680
so the<font color="#CCCCCC"> hell heap is</font><font color="#E5E5E5"> basically how we</font>

816
00:31:43,460 --> 00:31:48,920
refer to<font color="#E5E5E5"> a special region of address</font>

817
00:31:45,680 --> 00:31:50,570
<font color="#CCCCCC">space that</font><font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> bootloader and</font>

818
00:31:48,920 --> 00:31:53,630
the<font color="#CCCCCC"> Windows heart of fractionally or</font><font color="#E5E5E5"> to</font>

819
00:31:50,570 --> 00:31:55,730
how<font color="#CCCCCC"> pre allocator</font><font color="#E5E5E5"> pre reserved even</font>

820
00:31:53,630 --> 00:31:59,120
before<font color="#E5E5E5"> boots and the virtual address</font>

821
00:31:55,730 --> 00:32:02,840
<font color="#E5E5E5">space</font><font color="#CCCCCC"> of this has always been FFC zero</font>

822
00:31:59,120 --> 00:32:05,360
zero zero zero<font color="#E5E5E5"> until ffs</font><font color="#CCCCCC"> ffs'</font><font color="#E5E5E5"> s FS for</font>

823
00:32:02,840 --> 00:32:07,760
total<font color="#E5E5E5"> four megabytes so everyone kind of</font>

824
00:32:05,360 --> 00:32:09,979
knows not<font color="#E5E5E5"> to touch this region that's</font>

825
00:32:07,760 --> 00:32:11,600
what a<font color="#CCCCCC"> hal</font><font color="#E5E5E5"> can allocate things because</font>

826
00:32:09,980 --> 00:32:13,490
the hal needs to allocate things before

827
00:32:11,600 --> 00:32:14,719
the memory manager comes up so we need

828
00:32:13,490 --> 00:32:17,510
to make<font color="#CCCCCC"> sure the memory manager never</font>

829
00:32:14,720 --> 00:32:19,490
tries<font color="#CCCCCC"> to users</font><font color="#E5E5E5"> ref lattices but a</font>

830
00:32:17,510 --> 00:32:22,940
megabyte<font color="#E5E5E5"> after the beginning of the hell</font>

831
00:32:19,490 --> 00:32:24,560
space is what a heap itself starts so

832
00:32:22,940 --> 00:32:27,200
that<font color="#CCCCCC"> Hal heap and the allocations I</font>

833
00:32:24,560 --> 00:32:28,850
shall make<font color="#E5E5E5"> are</font><font color="#CCCCCC"> one megabyte after the</font>

834
00:32:27,200 --> 00:32:33,830
<font color="#E5E5E5">beginning of the address range which is</font>

835
00:32:28,850 --> 00:32:36,530
<font color="#CCCCCC">FF d 0 0 0 0 0 0 and on 64-bit</font><font color="#E5E5E5"> this is</font>

836
00:32:33,830 --> 00:32:40,939
simply<font color="#E5E5E5"> sign extended so becomes FF FF FF</font>

837
00:32:36,530 --> 00:32:42,830
FF FF FF<font color="#E5E5E5"> the 0 0 0 0 0 0 on any Windows</font>

838
00:32:40,940 --> 00:32:46,100
machine<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> going to have some data</font>

839
00:32:42,830 --> 00:32:49,370
there except in<font color="#E5E5E5"> creators update so in</font>

840
00:32:46,100 --> 00:32:52,129
Windows 10<font color="#CCCCCC"> coming out this April</font>

841
00:32:49,370 --> 00:32:54,409
redstone<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> they have now randomized this</font>

842
00:32:52,130 --> 00:32:57,440
region so no longer<font color="#CCCCCC"> is at that address</font>

843
00:32:54,410 --> 00:33:00,020
<font color="#E5E5E5">and it is the final Kermode address that</font>

844
00:32:57,440 --> 00:33:02,000
had<font color="#E5E5E5"> resisted randomization for many many</font>

845
00:33:00,020 --> 00:33:03,830
years<font color="#CCCCCC"> now this is going to be randomized</font>

846
00:33:02,000 --> 00:33:05,450
<font color="#CCCCCC">as well</font><font color="#E5E5E5"> the blue border basically</font>

847
00:33:03,830 --> 00:33:06,860
decides where to<font color="#E5E5E5"> put it and tells</font>

848
00:33:05,450 --> 00:33:08,990
<font color="#E5E5E5">everything else after</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but we're</font>

849
00:33:06,860 --> 00:33:12,199
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to see the physical</font><font color="#E5E5E5"> access there's</font>

850
00:33:08,990 --> 00:33:14,660
there's some ways around that now in a

851
00:33:12,200 --> 00:33:18,010
lot of<font color="#E5E5E5"> places that</font><font color="#CCCCCC"> Hal heap in physical</font>

852
00:33:14,660 --> 00:33:19,760
<font color="#CCCCCC">memory is set to begin</font><font color="#E5E5E5"> at zero</font><font color="#CCCCCC"> X 100,000</font>

853
00:33:18,010 --> 00:33:22,940
especially on older<font color="#E5E5E5"> versions of Windows</font>

854
00:33:19,760 --> 00:33:25,220
for<font color="#CCCCCC"> example even</font><font color="#E5E5E5"> on on a blog on</font><font color="#CCCCCC"> course</font>

855
00:33:22,940 --> 00:33:26,990
security<font color="#E5E5E5"> called extremely abusive intel</font>

856
00:33:25,220 --> 00:33:29,360
page tables<font color="#E5E5E5"> to rid of the presentation</font>

857
00:33:26,990 --> 00:33:32,600
<font color="#E5E5E5">but those assumption though the hell he</font>

858
00:33:29,360 --> 00:33:35,990
put 0<font color="#E5E5E5"> X is at 0 X</font><font color="#CCCCCC"> 100,000 and it's at 0</font>

859
00:33:32,600 --> 00:33:39,169
X<font color="#CCCCCC"> 1,000 Windows 8.1</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Messick is</font><font color="#E5E5E5"> yes</font>

860
00:33:35,990 --> 00:33:41,450
usually<font color="#CCCCCC"> there is some memory there but</font>

861
00:33:39,170 --> 00:33:41,900
<font color="#E5E5E5">actually in some cases</font><font color="#CCCCCC"> the researchers</font>

862
00:33:41,450 --> 00:33:43,670
weren't we

863
00:33:41,900 --> 00:33:45,230
looking at the<font color="#CCCCCC"> hell heap</font><font color="#E5E5E5"> they thought</font>

864
00:33:43,670 --> 00:33:47,900
<font color="#CCCCCC">there were</font><font color="#E5E5E5"> so we'll talk about</font><font color="#CCCCCC"> what</font>

865
00:33:45,230 --> 00:33:49,640
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> is there and they don't have to</font>

866
00:33:47,900 --> 00:33:51,500
how he<font color="#E5E5E5"> doesn't have to be a good address</font>

867
00:33:49,640 --> 00:33:54,230
<font color="#CCCCCC">will</font><font color="#E5E5E5"> actually see where it where it's</font>

868
00:33:51,500 --> 00:33:56,660
really<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be it's a static that</font>

869
00:33:54,230 --> 00:33:58,370
the physical allocation<font color="#E5E5E5"> isn't static but</font>

870
00:33:56,660 --> 00:34:00,560
it can be predicted<font color="#E5E5E5"> if you understand</font>

871
00:33:58,370 --> 00:34:02,959
<font color="#E5E5E5">where it comes</font><font color="#CCCCCC"> from same thing for the</font>

872
00:34:00,560 --> 00:34:05,360
virtual addresses even<font color="#CCCCCC"> before redstone</font>

873
00:34:02,960 --> 00:34:07,970
<font color="#CCCCCC">two people kind of assumed that within</font>

874
00:34:05,360 --> 00:34:09,560
that<font color="#CCCCCC"> hell rain I'll keep range</font><font color="#E5E5E5"> certain</font>

875
00:34:07,970 --> 00:34:11,810
allocations are always somewhere but

876
00:34:09,560 --> 00:34:14,029
<font color="#CCCCCC">that's actually not</font><font color="#E5E5E5"> the true did reality</font>

877
00:34:11,810 --> 00:34:15,080
<font color="#E5E5E5">and finally this in the region that we</font>

878
00:34:14,030 --> 00:34:18,020
call the<font color="#E5E5E5"> hell heap</font>

879
00:34:15,080 --> 00:34:19,520
it was<font color="#E5E5E5"> actually an actual heap in there</font>

880
00:34:18,020 --> 00:34:21,770
and then there's<font color="#E5E5E5"> actual other</font>

881
00:34:19,520 --> 00:34:23,719
allocations that<font color="#CCCCCC"> are made as well so the</font>

882
00:34:21,770 --> 00:34:26,418
hell heap is kind of<font color="#E5E5E5"> a very misused work</font>

883
00:34:23,719 --> 00:34:27,889
is there the<font color="#CCCCCC"> hal addressed space then</font><font color="#E5E5E5"> is</font>

884
00:34:26,418 --> 00:34:30,020
what back<font color="#E5E5E5"> stuff called the hal heap</font><font color="#CCCCCC"> and</font>

885
00:34:27,889 --> 00:34:31,969
<font color="#CCCCCC">sati dress base and there's a heap</font>

886
00:34:30,020 --> 00:34:33,320
inside that hal heap address<font color="#CCCCCC"> base</font><font color="#E5E5E5"> but</font>

887
00:34:31,969 --> 00:34:35,178
there's<font color="#E5E5E5"> other non heap stuff as well so</font>

888
00:34:33,320 --> 00:34:38,540
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> can understand why</font><font color="#E5E5E5"> people get</font>

889
00:34:35,179 --> 00:34:39,918
<font color="#E5E5E5">confused about about all of this so</font>

890
00:34:38,540 --> 00:34:43,130
first<font color="#E5E5E5"> of all let's see how allocations</font>

891
00:34:39,918 --> 00:34:44,899
<font color="#E5E5E5">come to be in this in this heap so first</font>

892
00:34:43,130 --> 00:34:46,940
of all<font color="#CCCCCC"> we have a hollow</font><font color="#E5E5E5"> allocator and</font>

893
00:34:44,899 --> 00:34:48,739
the virtual allocator is very simple it

894
00:34:46,940 --> 00:34:51,918
starts at a base address which<font color="#CCCCCC"> i've been</font>

895
00:34:48,739 --> 00:34:54,109
<font color="#CCCCCC">told</font><font color="#E5E5E5"> very recently was</font><font color="#CCCCCC"> FFF d 0 0 0 0</font><font color="#E5E5E5"> and</font>

896
00:34:51,918 --> 00:34:56,600
it just grabs the next available virtual

897
00:34:54,110 --> 00:34:58,340
address so there's no randomization<font color="#E5E5E5"> or</font>

898
00:34:56,600 --> 00:35:01,400
ordering here just the<font color="#E5E5E5"> next available</font>

899
00:34:58,340 --> 00:35:03,200
address the physical<font color="#E5E5E5"> a locator which</font>

900
00:35:01,400 --> 00:35:05,240
<font color="#E5E5E5">then decides which physical page is</font>

901
00:35:03,200 --> 00:35:07,359
going to be map behind<font color="#CCCCCC"> that virtual page</font>

902
00:35:05,240 --> 00:35:09,470
it's a little bit more complicated

903
00:35:07,360 --> 00:35:12,650
first of all<font color="#E5E5E5"> it checks for a special</font>

904
00:35:09,470 --> 00:35:14,990
flag called<font color="#CCCCCC"> this card low</font><font color="#E5E5E5"> memory which</font>

905
00:35:12,650 --> 00:35:17,540
<font color="#CCCCCC">you can actually</font><font color="#E5E5E5"> enable bcdedit</font><font color="#CCCCCC"> as i'll</font>

906
00:35:14,990 --> 00:35:20,299
<font color="#CCCCCC">show</font><font color="#E5E5E5"> you at the end on</font><font color="#CCCCCC"> ethics systems</font>

907
00:35:17,540 --> 00:35:23,840
some systems<font color="#CCCCCC"> have an APEC which is most</font>

908
00:35:20,300 --> 00:35:26,120
systems today this is set is set by

909
00:35:23,840 --> 00:35:28,730
default<font color="#E5E5E5"> so this card low memories</font>

910
00:35:26,120 --> 00:35:30,560
<font color="#E5E5E5">automatically</font><font color="#CCCCCC"> turn on if you have a pic</font>

911
00:35:28,730 --> 00:35:33,800
system<font color="#CCCCCC"> like a really old</font>

912
00:35:30,560 --> 00:35:37,160
you know x86 with a single CPU<font color="#E5E5E5"> then it</font>

913
00:35:33,800 --> 00:35:39,860
is not disabled so it's disabled so they

914
00:35:37,160 --> 00:35:42,410
<font color="#CCCCCC">do not</font><font color="#E5E5E5"> discard low memory they use low</font>

915
00:35:39,860 --> 00:35:44,060
<font color="#E5E5E5">memory also</font><font color="#CCCCCC"> if you have hyper-v enabled</font>

916
00:35:42,410 --> 00:35:44,899
and you're not<font color="#CCCCCC"> bleeding on the root</font>

917
00:35:44,060 --> 00:35:47,270
partition

918
00:35:44,900 --> 00:35:50,360
it'll also be disabled<font color="#CCCCCC"> so we're going</font><font color="#E5E5E5"> to</font>

919
00:35:47,270 --> 00:35:52,370
use low memory<font color="#E5E5E5"> then it's going to check</font>

920
00:35:50,360 --> 00:35:53,570
what<font color="#E5E5E5"> is the maximum physical page you're</font>

921
00:35:52,370 --> 00:35:56,120
willing to<font color="#E5E5E5"> except for</font><font color="#CCCCCC"> this allocation</font>

922
00:35:53,570 --> 00:35:59,180
<font color="#CCCCCC">because</font><font color="#E5E5E5"> whenever</font><font color="#CCCCCC"> you a locate memory</font>

923
00:35:56,120 --> 00:36:02,990
you<font color="#E5E5E5"> specify what's the maximum if the</font>

924
00:35:59,180 --> 00:36:04,549
<font color="#E5E5E5">maximum is below one megabyte and you</font>

925
00:36:02,990 --> 00:36:07,359
have less<font color="#CCCCCC"> than</font><font color="#E5E5E5"> one megabyte worth of</font>

926
00:36:04,550 --> 00:36:11,120
pages and this<font color="#E5E5E5"> card low</font><font color="#CCCCCC"> memory is</font>

927
00:36:07,360 --> 00:36:12,770
disabled<font color="#E5E5E5"> we're going to pick</font><font color="#CCCCCC"> 0 X</font><font color="#E5E5E5"> 1000 as</font>

928
00:36:11,120 --> 00:36:15,410
the first address<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to start</font>

929
00:36:12,770 --> 00:36:17,690
allocating at<font color="#E5E5E5"> 4 kilobytes of page 1 page</font>

930
00:36:15,410 --> 00:36:21,410
2 page 3<font color="#CCCCCC"> if on the</font><font color="#E5E5E5"> other hand this card</font>

931
00:36:17,690 --> 00:36:23,360
low memory<font color="#E5E5E5"> is turned on and there is no</font>

932
00:36:21,410 --> 00:36:25,609
requirement<font color="#CCCCCC"> for your</font><font color="#E5E5E5"> physical address to</font>

933
00:36:23,360 --> 00:36:28,010
be below<font color="#E5E5E5"> 1 megabyte then we're going to</font>

934
00:36:25,610 --> 00:36:30,020
start<font color="#E5E5E5"> at 1</font><font color="#CCCCCC"> megabytes and at 1 megabyte</font>

935
00:36:28,010 --> 00:36:32,060
are going to find free pages or

936
00:36:30,020 --> 00:36:33,710
temporary firmware page anything<font color="#CCCCCC"> that's</font>

937
00:36:32,060 --> 00:36:36,110
marked as firmware temporary or as free

938
00:36:33,710 --> 00:36:37,310
starting at 1 megabyte so basically

939
00:36:36,110 --> 00:36:39,050
there's two<font color="#CCCCCC"> possibilities either we</font>

940
00:36:37,310 --> 00:36:41,960
allocate starting at a Meg<font color="#E5E5E5"> or we</font>

941
00:36:39,050 --> 00:36:43,310
allocate starting at<font color="#E5E5E5"> 4 kilobytes based</font>

942
00:36:41,960 --> 00:36:46,100
on the type of<font color="#E5E5E5"> machine you have and</font>

943
00:36:43,310 --> 00:36:49,759
based on what the requester actually

944
00:36:46,100 --> 00:36:52,279
wants so here's an<font color="#CCCCCC"> example of</font><font color="#E5E5E5"> a machine</font>

945
00:36:49,760 --> 00:36:56,630
at boot up we can see here<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> hal</font>

946
00:36:52,280 --> 00:36:58,490
has started using page 103<font color="#E5E5E5"> because it</font>

947
00:36:56,630 --> 00:37:00,050
started<font color="#E5E5E5"> at</font><font color="#CCCCCC"> 100</font><font color="#E5E5E5"> but I</font><font color="#CCCCCC"> already had</font>

948
00:36:58,490 --> 00:37:02,359
<font color="#E5E5E5">something at 100 from the bootloader</font>

949
00:37:00,050 --> 00:37:03,440
I already had something<font color="#CCCCCC"> at 101 I</font><font color="#E5E5E5"> already</font>

950
00:37:02,360 --> 00:37:07,070
had something<font color="#E5E5E5"> at 102</font>

951
00:37:03,440 --> 00:37:09,410
<font color="#E5E5E5">so it started allocating at 103 so for</font>

952
00:37:07,070 --> 00:37:12,410
example on these machines<font color="#E5E5E5"> the hell he</font>

953
00:37:09,410 --> 00:37:15,080
doesn't<font color="#E5E5E5"> start at physical page 0</font><font color="#CCCCCC"> X 100</font>

954
00:37:12,410 --> 00:37:17,060
if any tag that assumed that would<font color="#CCCCCC"> break</font>

955
00:37:15,080 --> 00:37:19,850
automatically because<font color="#CCCCCC"> I actually do have</font>

956
00:37:17,060 --> 00:37:22,220
<font color="#CCCCCC">3 allocations here on my other machine</font>

957
00:37:19,850 --> 00:37:24,890
at home<font color="#CCCCCC"> it</font><font color="#E5E5E5"> actually does start at 100 so</font>

958
00:37:22,220 --> 00:37:26,839
<font color="#CCCCCC">it'll start somewhere near 100 and there</font>

959
00:37:24,890 --> 00:37:28,370
your guarantee that<font color="#CCCCCC"> it pages will be</font>

960
00:37:26,840 --> 00:37:30,140
contiguous<font color="#E5E5E5"> and so you get to</font><font color="#CCCCCC"> the</font>

961
00:37:28,370 --> 00:37:31,730
<font color="#CCCCCC">beginning but</font><font color="#E5E5E5"> you might have</font><font color="#CCCCCC"> to do some</font>

962
00:37:30,140 --> 00:37:34,100
scanning<font color="#CCCCCC"> it's not in still going to be</font>

963
00:37:31,730 --> 00:37:37,400
easier<font color="#E5E5E5"> X 100 or it could</font><font color="#CCCCCC"> have actually</font>

964
00:37:34,100 --> 00:37:39,980
<font color="#E5E5E5">been starting at 1 if I had a pick</font>

965
00:37:37,400 --> 00:37:41,870
machine or<font color="#E5E5E5"> 5 enabled if I disabled</font>

966
00:37:39,980 --> 00:37:44,480
discard low memory<font color="#E5E5E5"> so that's where you</font>

967
00:37:41,870 --> 00:37:47,420
<font color="#E5E5E5">get a little bit of variance now what</font>

968
00:37:44,480 --> 00:37:49,790
<font color="#CCCCCC">actually lives in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> Hal he well any</font>

969
00:37:47,420 --> 00:37:52,970
allocations that<font color="#E5E5E5"> are done very early</font><font color="#CCCCCC"> at</font>

970
00:37:49,790 --> 00:37:55,190
boot by the hell<font color="#E5E5E5"> before the kernels</font>

971
00:37:52,970 --> 00:37:58,459
actually initialize the<font color="#E5E5E5"> very manager so</font>

972
00:37:55,190 --> 00:38:02,930
there's an actual heap that<font color="#CCCCCC"> is used by</font>

973
00:37:58,460 --> 00:38:06,140
how<font color="#CCCCCC"> mm allocate</font><font color="#E5E5E5"> memory there's a CPI so</font>

974
00:38:02,930 --> 00:38:08,270
another a<font color="#E5E5E5"> CPI tables are cached it uses</font>

975
00:38:06,140 --> 00:38:09,740
the Hal heap<font color="#E5E5E5"> also</font><font color="#CCCCCC"> something called</font>

976
00:38:08,270 --> 00:38:11,810
<font color="#E5E5E5">allocate early pay</font>

977
00:38:09,740 --> 00:38:14,600
just whenever driver wants early<font color="#CCCCCC"> pages</font>

978
00:38:11,810 --> 00:38:16,190
it uses the<font color="#CCCCCC"> Hal</font><font color="#E5E5E5"> heap the page tables for</font>

979
00:38:14,600 --> 00:38:18,290
the Hal heap itself<font color="#CCCCCC"> come from the Hal</font>

980
00:38:16,190 --> 00:38:20,300
heap<font color="#CCCCCC"> and if you have a</font><font color="#E5E5E5"> kernel debugger</font>

981
00:38:18,290 --> 00:38:22,279
plugged in the same allocation that's

982
00:38:20,300 --> 00:38:24,860
going to be coming<font color="#CCCCCC"> from the Hal heap as</font>

983
00:38:22,280 --> 00:38:26,690
well<font color="#E5E5E5"> plus any DMA buffers I need to be</font>

984
00:38:24,860 --> 00:38:29,210
<font color="#E5E5E5">allocated there so there's a whole bunch</font>

985
00:38:26,690 --> 00:38:30,530
of stuff that uses the<font color="#E5E5E5"> Hal heat so the</font>

986
00:38:29,210 --> 00:38:31,910
structure of how it's<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> going to</font>

987
00:38:30,530 --> 00:38:33,730
<font color="#E5E5E5">look like in virtual address space is</font>

988
00:38:31,910 --> 00:38:36,950
<font color="#E5E5E5">also going to be a little bit different</font>

989
00:38:33,730 --> 00:38:40,250
<font color="#E5E5E5">for example if you have kernel debugging</font>

990
00:38:36,950 --> 00:38:42,770
enabled<font color="#E5E5E5"> then the very first</font><font color="#CCCCCC"> thing that</font>

991
00:38:40,250 --> 00:38:45,260
gets<font color="#CCCCCC"> allocated</font><font color="#E5E5E5"> into Hal heap is going to</font>

992
00:38:42,770 --> 00:38:47,570
be a kernel debugger structure a<font color="#E5E5E5"> little</font>

993
00:38:45,260 --> 00:38:49,130
structure the hell<font color="#CCCCCC"> uses to identify</font><font color="#E5E5E5"> the</font>

994
00:38:47,570 --> 00:38:52,610
physical device using for currently

995
00:38:49,130 --> 00:38:54,650
bugging<font color="#E5E5E5"> if you don't have a kernel</font>

996
00:38:52,610 --> 00:38:56,300
debugger<font color="#E5E5E5"> attached then the first</font>

997
00:38:54,650 --> 00:38:58,550
allocation is going to get made is

998
00:38:56,300 --> 00:39:00,980
<font color="#E5E5E5">actually going to be a timer</font><font color="#CCCCCC"> object and</font>

999
00:38:58,550 --> 00:39:03,410
a timer object lives in the internal

1000
00:39:00,980 --> 00:39:04,850
heat so the basis of the internal<font color="#E5E5E5"> heat</font>

1001
00:39:03,410 --> 00:39:07,279
is going<font color="#E5E5E5"> to end up being a little bit</font>

1002
00:39:04,850 --> 00:39:09,200
<font color="#CCCCCC">different because debug devices come</font>

1003
00:39:07,280 --> 00:39:10,520
from the internal<font color="#CCCCCC"> heap</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the first</font>

1004
00:39:09,200 --> 00:39:12,439
thing that<font color="#E5E5E5"> we allocated the kernel</font>

1005
00:39:10,520 --> 00:39:15,320
debugging device<font color="#CCCCCC"> the internal</font><font color="#E5E5E5"> heat</font>

1006
00:39:12,440 --> 00:39:17,210
begins here<font color="#E5E5E5"> it is on the other hand you</font>

1007
00:39:15,320 --> 00:39:18,830
<font color="#E5E5E5">don't have currently bugging then</font>

1008
00:39:17,210 --> 00:39:20,150
something else is<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> use</font>

1009
00:39:18,830 --> 00:39:22,520
<font color="#E5E5E5">that address</font><font color="#CCCCCC"> and I'm going</font><font color="#E5E5E5"> to see what</font>

1010
00:39:20,150 --> 00:39:23,930
it<font color="#CCCCCC"> is and then the first internal heap</font>

1011
00:39:22,520 --> 00:39:27,109
allocation actually<font color="#CCCCCC"> has to start a page</font>

1012
00:39:23,930 --> 00:39:29,868
later so the<font color="#E5E5E5"> actual internal heap part</font>

1013
00:39:27,109 --> 00:39:31,790
of the<font color="#E5E5E5"> Hal</font><font color="#CCCCCC"> heap</font><font color="#E5E5E5"> doesn't by default</font>

1014
00:39:29,869 --> 00:39:33,170
actually<font color="#E5E5E5"> start at the beginning</font><font color="#CCCCCC"> of the</font>

1015
00:39:31,790 --> 00:39:35,210
Hal heat but actually starts a page

1016
00:39:33,170 --> 00:39:36,740
later unless<font color="#CCCCCC"> you have a debugger plugged</font>

1017
00:39:35,210 --> 00:39:38,119
in so you can imagine<font color="#CCCCCC"> what a lot of</font>

1018
00:39:36,740 --> 00:39:39,890
researchers probably when they're<font color="#CCCCCC"> doing</font>

1019
00:39:38,119 --> 00:39:41,480
<font color="#E5E5E5">their work they have a debugger attached</font>

1020
00:39:39,890 --> 00:39:43,310
and so they<font color="#CCCCCC"> think</font><font color="#E5E5E5"> this is at the</font>

1021
00:39:41,480 --> 00:39:45,170
beginning<font color="#CCCCCC"> of the internal heap when in</font>

1022
00:39:43,310 --> 00:39:47,180
<font color="#E5E5E5">fact in most cases going to be that</font>

1023
00:39:45,170 --> 00:39:48,470
other address this is free deterministic

1024
00:39:47,180 --> 00:39:51,140
so it's<font color="#E5E5E5"> going to be one of those two</font>

1025
00:39:48,470 --> 00:39:54,020
depending on if you<font color="#CCCCCC"> have a currently</font>

1026
00:39:51,140 --> 00:39:56,990
bugger<font color="#E5E5E5"> plugged in or not then within</font>

1027
00:39:54,020 --> 00:39:58,730
that internal heat<font color="#E5E5E5"> like I mentioned the</font>

1028
00:39:56,990 --> 00:40:01,729
currently bugger<font color="#E5E5E5"> device might be</font>

1029
00:39:58,730 --> 00:40:04,400
registered<font color="#CCCCCC"> then a timer object</font><font color="#E5E5E5"> gets</font>

1030
00:40:01,730 --> 00:40:06,080
<font color="#CCCCCC">registered</font><font color="#E5E5E5"> then the USB controller gets</font>

1031
00:40:04,400 --> 00:40:08,450
registered<font color="#E5E5E5"> and if you actually do have</font>

1032
00:40:06,080 --> 00:40:11,330
<font color="#E5E5E5">currently bugging then a secondary copy</font>

1033
00:40:08,450 --> 00:40:13,879
of a debug device get registered<font color="#E5E5E5"> so</font>

1034
00:40:11,330 --> 00:40:15,500
ultimately if you watch the allocations

1035
00:40:13,880 --> 00:40:17,180
<font color="#CCCCCC">that I made there which are</font><font color="#E5E5E5"> always done</font>

1036
00:40:15,500 --> 00:40:20,030
<font color="#E5E5E5">in the same order and it always the</font><font color="#CCCCCC"> same</font>

1037
00:40:17,180 --> 00:40:23,000
size<font color="#E5E5E5"> you can pretty much predict what</font>

1038
00:40:20,030 --> 00:40:23,220
it's<font color="#CCCCCC"> going to look like and so you know</font>

1039
00:40:23,000 --> 00:40:24,480
this

1040
00:40:23,220 --> 00:40:27,000
is a diagram<font color="#E5E5E5"> that will make more sense</font>

1041
00:40:24,480 --> 00:40:28,920
on the next slide<font color="#E5E5E5"> and once I publish</font><font color="#CCCCCC"> it</font>

1042
00:40:27,000 --> 00:40:33,180
but basically<font color="#CCCCCC"> this is the entire space</font>

1043
00:40:28,920 --> 00:40:35,550
of the internal heap and the how and<font color="#E5E5E5"> you</font>

1044
00:40:33,180 --> 00:40:37,020
can understand you know you are able<font color="#E5E5E5"> to</font>

1045
00:40:35,550 --> 00:40:39,450
<font color="#E5E5E5">understand</font><font color="#CCCCCC"> once</font><font color="#E5E5E5"> you know the allocations</font>

1046
00:40:37,020 --> 00:40:41,250
<font color="#E5E5E5">what every single thing of what every</font>

1047
00:40:39,450 --> 00:40:43,890
<font color="#E5E5E5">one of these things is so on every</font>

1048
00:40:41,250 --> 00:40:44,760
machine while you're booting up the<font color="#E5E5E5"> hell</font>

1049
00:40:43,890 --> 00:40:46,650
he was<font color="#E5E5E5"> going to have the same</font>

1050
00:40:44,760 --> 00:40:48,780
allocations<font color="#E5E5E5"> at least for Windows 10</font>

1051
00:40:46,650 --> 00:40:50,790
right obviously<font color="#E5E5E5"> max I can add more code</font>

1052
00:40:48,780 --> 00:40:53,160
in more places<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this can change but</font>

1053
00:40:50,790 --> 00:40:55,529
it is hyper deterministic once you know

1054
00:40:53,160 --> 00:40:57,839
where to actually<font color="#E5E5E5"> start so for example</font>

1055
00:40:55,530 --> 00:40:59,880
this<font color="#E5E5E5"> is mostly for reference</font><font color="#CCCCCC"> on that</font>

1056
00:40:57,840 --> 00:41:01,800
earlier picture these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> all the</font>

1057
00:40:59,880 --> 00:41:04,500
allocations were able<font color="#CCCCCC"> to see with their</font>

1058
00:41:01,800 --> 00:41:05,730
fixed size and the<font color="#E5E5E5"> six data types in</font>

1059
00:41:04,500 --> 00:41:07,650
fact one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> interesting things I</font>

1060
00:41:05,730 --> 00:41:09,900
noticed<font color="#E5E5E5"> while doing the analysis there's</font>

1061
00:41:07,650 --> 00:41:12,930
actually a bug in the in<font color="#CCCCCC"> the code and</font>

1062
00:41:09,900 --> 00:41:15,240
<font color="#CCCCCC">how</font><font color="#E5E5E5"> that allocates double the amount</font><font color="#CCCCCC"> of</font>

1063
00:41:12,930 --> 00:41:17,669
space that<font color="#CCCCCC"> it needs it takes a unicode</font>

1064
00:41:15,240 --> 00:41:19,200
<font color="#CCCCCC">string very has the</font><font color="#E5E5E5"> NA number of bytes</font>

1065
00:41:17,670 --> 00:41:20,670
<font color="#E5E5E5">and it thinks it's a number of</font>

1066
00:41:19,200 --> 00:41:22,589
characters and<font color="#E5E5E5"> it</font><font color="#CCCCCC"> multiplies by two</font>

1067
00:41:20,670 --> 00:41:24,540
again<font color="#CCCCCC"> so you know there's a little</font><font color="#E5E5E5"> bit</font>

1068
00:41:22,590 --> 00:41:26,369
of<font color="#E5E5E5"> a waste in the hell heap as well but</font>

1069
00:41:24,540 --> 00:41:28,230
it can all be understood once you see

1070
00:41:26,369 --> 00:41:31,109
what the static allocations are actually

1071
00:41:28,230 --> 00:41:32,670
going to be so what have we<font color="#E5E5E5"> learned here</font>

1072
00:41:31,109 --> 00:41:36,180
<font color="#E5E5E5">so first of all we've learned that if</font>

1073
00:41:32,670 --> 00:41:38,099
the<font color="#CCCCCC"> curly bugger is attached then SSD 0</font>

1074
00:41:36,180 --> 00:41:41,040
<font color="#CCCCCC">0 0</font><font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be the internal size of</font>

1075
00:41:38,099 --> 00:41:42,900
the hell<font color="#E5E5E5"> and the first the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> internal</font>

1076
00:41:41,040 --> 00:41:45,540
base address<font color="#E5E5E5"> of the hell and the first</font>

1077
00:41:42,900 --> 00:41:48,450
timer object<font color="#E5E5E5"> is going to be at 0 x f8</font>

1078
00:41:45,540 --> 00:41:49,859
<font color="#E5E5E5">plus some variable size because the</font>

1079
00:41:48,450 --> 00:41:51,990
first allocation is actually going to be

1080
00:41:49,859 --> 00:41:54,240
the debugger object then the<font color="#E5E5E5"> timer</font>

1081
00:41:51,990 --> 00:41:56,399
object<font color="#CCCCCC"> if you don't have currently</font>

1082
00:41:54,240 --> 00:41:59,310
<font color="#E5E5E5">bugging then something else is going</font><font color="#CCCCCC"> to</font>

1083
00:41:56,400 --> 00:42:02,670
be at<font color="#CCCCCC"> ffd 0 0 0</font><font color="#E5E5E5"> you can wait</font><font color="#CCCCCC"> for it</font><font color="#E5E5E5"> and</font>

1084
00:41:59,310 --> 00:42:04,980
the how<font color="#E5E5E5"> people actually start</font><font color="#CCCCCC"> ffv 0 1 0</font>

1085
00:42:02,670 --> 00:42:07,140
0 0<font color="#E5E5E5"> and the first</font><font color="#CCCCCC"> object there will be a</font>

1086
00:42:04,980 --> 00:42:09,060
timer objects now it's nice about<font color="#E5E5E5"> that</font>

1087
00:42:07,140 --> 00:42:10,650
<font color="#E5E5E5">timer object</font><font color="#CCCCCC"> it's got some callbacks</font><font color="#E5E5E5"> in</font>

1088
00:42:09,060 --> 00:42:12,900
it and essentially if you have<font color="#E5E5E5"> an</font>

1089
00:42:10,650 --> 00:42:15,390
arbitrary<font color="#CCCCCC"> write vulnerability either</font><font color="#E5E5E5"> in</font>

1090
00:42:12,900 --> 00:42:16,740
virtual<font color="#E5E5E5"> memory or in physical memory you</font>

1091
00:42:15,390 --> 00:42:18,270
can pass one<font color="#E5E5E5"> of the timer object</font>

1092
00:42:16,740 --> 00:42:19,709
callbacks<font color="#CCCCCC"> which is going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a</font>

1093
00:42:18,270 --> 00:42:22,290
deterministic address or it's either

1094
00:42:19,710 --> 00:42:24,480
<font color="#E5E5E5">going to be over here</font><font color="#CCCCCC"> or over there plus</font>

1095
00:42:22,290 --> 00:42:26,220
some offset<font color="#E5E5E5"> if you pass the time</font><font color="#CCCCCC"> Rob's</font><font color="#E5E5E5"> a</font>

1096
00:42:24,480 --> 00:42:28,530
<font color="#E5E5E5">callback you get instant code execution</font>

1097
00:42:26,220 --> 00:42:31,230
<font color="#E5E5E5">and this has actually been leveraged in</font>

1098
00:42:28,530 --> 00:42:33,150
<font color="#E5E5E5">you know the core security blog they</font>

1099
00:42:31,230 --> 00:42:34,470
attack this object but again they<font color="#E5E5E5"> meet</font>

1100
00:42:33,150 --> 00:42:36,930
some assumptions about<font color="#CCCCCC"> where it's going</font>

1101
00:42:34,470 --> 00:42:39,149
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> which don't</font><font color="#E5E5E5"> always hold true</font>

1102
00:42:36,930 --> 00:42:41,430
now<font color="#CCCCCC"> after</font><font color="#E5E5E5"> these initial allocations</font>

1103
00:42:39,150 --> 00:42:43,080
<font color="#E5E5E5">every other allocation can</font><font color="#CCCCCC"> be somewhere</font>

1104
00:42:41,430 --> 00:42:45,210
<font color="#CCCCCC">else so there's a whole number of other</font>

1105
00:42:43,080 --> 00:42:47,490
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that may come into place and then</font>

1106
00:42:45,210 --> 00:42:49,610
into play<font color="#CCCCCC"> and let me spend</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> in ECPI</font>

1107
00:42:47,490 --> 00:42:52,140
tables you<font color="#CCCCCC"> have and so on and so forth</font>

1108
00:42:49,610 --> 00:42:54,980
<font color="#E5E5E5">so for physical memory said that either</font>

1109
00:42:52,140 --> 00:42:58,830
starts<font color="#E5E5E5"> at a megabyte or</font><font color="#CCCCCC"> it starts at</font>

1110
00:42:54,980 --> 00:43:00,690
<font color="#CCCCCC">four kilobytes but individual allocation</font>

1111
00:42:58,830 --> 00:43:03,779
<font color="#E5E5E5">skin themselves specify a maximum</font>

1112
00:43:00,690 --> 00:43:06,360
address<font color="#CCCCCC"> for example a CPI cache memory</font>

1113
00:43:03,780 --> 00:43:08,490
and<font color="#CCCCCC"> DMA memory</font><font color="#E5E5E5"> always</font><font color="#CCCCCC"> wants to be below</font>

1114
00:43:06,360 --> 00:43:11,070
<font color="#E5E5E5">16 megabytes so it sets that as a cap</font>

1115
00:43:08,490 --> 00:43:13,919
and then another allocation called the

1116
00:43:11,070 --> 00:43:16,590
low stub always wants to be below a

1117
00:43:13,920 --> 00:43:18,900
<font color="#E5E5E5">megabyte</font><font color="#CCCCCC"> which means that in a default</font>

1118
00:43:16,590 --> 00:43:22,550
system<font color="#CCCCCC"> where the hell he starts</font>

1119
00:43:18,900 --> 00:43:25,920
allocating at<font color="#CCCCCC"> zero x100 at</font><font color="#E5E5E5"> one megabyte</font>

1120
00:43:22,550 --> 00:43:28,130
<font color="#E5E5E5">because the low stub is the</font><font color="#CCCCCC"> only thing</font>

1121
00:43:25,920 --> 00:43:30,930
that requests being below<font color="#E5E5E5"> one megabyte</font>

1122
00:43:28,130 --> 00:43:32,880
the<font color="#E5E5E5"> only page will have below a med is</font>

1123
00:43:30,930 --> 00:43:36,299
the low stub and the low stub will

1124
00:43:32,880 --> 00:43:39,330
always be as<font color="#E5E5E5"> your</font><font color="#CCCCCC"> x1000 now one on earth</font>

1125
00:43:36,300 --> 00:43:42,000
is a low stub the low stub is one of the

1126
00:43:39,330 --> 00:43:43,680
most undocumented structures that<font color="#E5E5E5"> I've</font>

1127
00:43:42,000 --> 00:43:45,180
seen in<font color="#E5E5E5"> my entire reverse engineering</font>

1128
00:43:43,680 --> 00:43:48,089
history<font color="#E5E5E5"> no one</font><font color="#CCCCCC"> is even</font><font color="#E5E5E5"> talked</font><font color="#CCCCCC"> about this</font>

1129
00:43:45,180 --> 00:43:51,120
ever<font color="#E5E5E5"> it is a tiny little piece of 16-bit</font>

1130
00:43:48,090 --> 00:43:54,180
code that still lives in even in 64-bit

1131
00:43:51,120 --> 00:43:55,620
<font color="#CCCCCC">windows and it's used</font><font color="#E5E5E5"> in two cases when</font>

1132
00:43:54,180 --> 00:43:57,540
you're<font color="#E5E5E5"> booting up the processors at</font>

1133
00:43:55,620 --> 00:43:59,580
boots<font color="#E5E5E5"> because as some of you probably</font>

1134
00:43:57,540 --> 00:44:01,140
<font color="#CCCCCC">know when you boot up your fancy</font><font color="#E5E5E5"> KB Lake</font>

1135
00:43:59,580 --> 00:44:03,810
processor what is the<font color="#E5E5E5"> boot up ass a</font>

1136
00:44:01,140 --> 00:44:06,810
<font color="#E5E5E5">16-bit processor thinking there's only</font>

1137
00:44:03,810 --> 00:44:09,930
<font color="#E5E5E5">six out of</font><font color="#CCCCCC"> 40k of memory so we need to</font>

1138
00:44:06,810 --> 00:44:11,790
have some<font color="#E5E5E5"> memory in 640k real mode to</font>

1139
00:44:09,930 --> 00:44:14,100
bring it up in protected mode and then

1140
00:44:11,790 --> 00:44:16,200
bring<font color="#CCCCCC"> it</font><font color="#E5E5E5"> up in long mode that's what a</font>

1141
00:44:14,100 --> 00:44:17,880
low stop does second thing the low<font color="#CCCCCC"> stop</font>

1142
00:44:16,200 --> 00:44:20,370
does is when<font color="#E5E5E5"> you bring</font><font color="#CCCCCC"> your machine to</font>

1143
00:44:17,880 --> 00:44:23,190
sleep<font color="#CCCCCC"> as you bring your machine</font><font color="#E5E5E5"> to s1</font>

1144
00:44:20,370 --> 00:44:26,190
you're<font color="#E5E5E5"> okay but s2 and s3 sleep</font><font color="#CCCCCC"> states</font>

1145
00:44:23,190 --> 00:44:27,600
they wipe the CPUs<font color="#CCCCCC"> States so when the</font>

1146
00:44:26,190 --> 00:44:29,700
<font color="#CCCCCC">CPU</font><font color="#E5E5E5"> resumes from sleep</font>

1147
00:44:27,600 --> 00:44:32,460
what does it<font color="#E5E5E5"> think it is a 16-bit</font>

1148
00:44:29,700 --> 00:44:34,080
processor with<font color="#E5E5E5"> only 640 KB of memory so</font>

1149
00:44:32,460 --> 00:44:36,180
the low<font color="#E5E5E5"> stub re initializes</font><font color="#CCCCCC"> the</font>

1150
00:44:34,080 --> 00:44:37,680
processor brings it back in protected

1151
00:44:36,180 --> 00:44:40,020
mode<font color="#E5E5E5"> brings it back</font><font color="#CCCCCC"> in long mode and</font>

1152
00:44:37,680 --> 00:44:42,140
brings you back where<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to be</font><font color="#E5E5E5"> so</font>

1153
00:44:40,020 --> 00:44:43,410
the low stuff has been in Windows since

1154
00:44:42,140 --> 00:44:45,270
<font color="#E5E5E5">nt1</font>

1155
00:44:43,410 --> 00:44:46,899
never seen anyone<font color="#E5E5E5"> on the internet</font><font color="#CCCCCC"> even</font>

1156
00:44:45,270 --> 00:44:49,119
talk<font color="#CCCCCC"> about the status</font><font color="#E5E5E5"> exists</font>

1157
00:44:46,900 --> 00:44:50,950
and because of the allocation policies

1158
00:44:49,119 --> 00:44:54,579
on modern hardware<font color="#E5E5E5"> it's always going to</font>

1159
00:44:50,950 --> 00:44:57,220
<font color="#CCCCCC">be</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> 1000 which has some interesting</font>

1160
00:44:54,579 --> 00:45:00,400
<font color="#E5E5E5">opportunities because that low stub</font>

1161
00:44:57,220 --> 00:45:01,839
<font color="#E5E5E5">isn't just</font><font color="#CCCCCC"> 16-bit code it's a little G</font>

1162
00:45:00,400 --> 00:45:06,940
<font color="#CCCCCC">DT as well a little</font>

1163
00:45:01,839 --> 00:45:08,380
<font color="#E5E5E5">IDT an identity map and perhaps most</font>

1164
00:45:06,940 --> 00:45:10,869
interestingly a structure<font color="#E5E5E5"> called</font>

1165
00:45:08,380 --> 00:45:12,970
processor state which is documented<font color="#E5E5E5"> in</font>

1166
00:45:10,869 --> 00:45:15,869
the symbol files<font color="#E5E5E5"> and in the header files</font>

1167
00:45:12,970 --> 00:45:18,788
<font color="#E5E5E5">and that processor state structure</font>

1168
00:45:15,869 --> 00:45:21,160
contains<font color="#CCCCCC"> cr3</font>

1169
00:45:18,789 --> 00:45:26,109
the instruction pointer<font color="#E5E5E5"> the stack</font>

1170
00:45:21,160 --> 00:45:28,598
<font color="#CCCCCC">pointer and RCX</font><font color="#E5E5E5"> and so basically you can</font>

1171
00:45:26,109 --> 00:45:31,538
leak<font color="#CCCCCC"> at a fixed virtual address on any</font>

1172
00:45:28,599 --> 00:45:34,329
fixed physical address on almost any

1173
00:45:31,539 --> 00:45:36,760
machine in<font color="#CCCCCC"> the world</font><font color="#E5E5E5"> at address 0 X 1000</font>

1174
00:45:34,329 --> 00:45:39,849
the address<font color="#E5E5E5"> of the kernel page directory</font>

1175
00:45:36,760 --> 00:45:41,049
<font color="#CCCCCC">PML 4 or CR 3 which</font><font color="#E5E5E5"> of course once you</font>

1176
00:45:39,849 --> 00:45:43,779
have this physical<font color="#E5E5E5"> memory acquisition</font>

1177
00:45:41,049 --> 00:45:45,339
becomes really<font color="#CCCCCC"> easy and on</font><font color="#E5E5E5"> almost any</font>

1178
00:45:43,779 --> 00:45:48,130
modern machine it's going<font color="#E5E5E5"> to be a you</font>

1179
00:45:45,339 --> 00:45:49,960
<font color="#E5E5E5">know 0 X 1000 plus whatever the offset</font>

1180
00:45:48,130 --> 00:45:51,640
of the structure<font color="#CCCCCC"> you can also get</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> NS</font>

1181
00:45:49,960 --> 00:45:53,020
<font color="#E5E5E5">of the kernel entry points you can</font><font color="#CCCCCC"> get</font>

1182
00:45:51,640 --> 00:45:54,520
the address<font color="#CCCCCC"> of the kernel stack and you</font>

1183
00:45:53,020 --> 00:45:57,420
<font color="#CCCCCC">get the address</font><font color="#E5E5E5"> of the loader block</font>

1184
00:45:54,520 --> 00:45:59,890
which is<font color="#E5E5E5"> another key boot structure plus</font>

1185
00:45:57,420 --> 00:46:02,619
what's really nice is the low stuff

1186
00:45:59,890 --> 00:46:04,420
<font color="#E5E5E5">actually has a self map pointer which</font>

1187
00:46:02,619 --> 00:46:06,460
gives you the virtual address of the low

1188
00:46:04,420 --> 00:46:08,349
stub so you know where<font color="#E5E5E5"> it is in RAM</font>

1189
00:46:06,460 --> 00:46:09,730
because<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> pretty much fixed and it</font>

1190
00:46:08,349 --> 00:46:11,529
also tells you where<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> in virtual</font>

1191
00:46:09,730 --> 00:46:14,680
memory<font color="#E5E5E5"> and you know it's in</font><font color="#CCCCCC"> the Hal heat</font>

1192
00:46:11,529 --> 00:46:16,119
somewhere<font color="#E5E5E5"> at some offset off the heat so</font>

1193
00:46:14,680 --> 00:46:18,129
even in creators update when they

1194
00:46:16,119 --> 00:46:19,960
randomized the Hal heap<font color="#E5E5E5"> well you know</font>

1195
00:46:18,130 --> 00:46:22,390
exactly<font color="#E5E5E5"> where it's going to be if you</font>

1196
00:46:19,960 --> 00:46:24,549
<font color="#E5E5E5">can access your X 1000 with an arbitrary</font>

1197
00:46:22,390 --> 00:46:28,150
<font color="#CCCCCC">read primitive and be or with the DMA</font>

1198
00:46:24,549 --> 00:46:30,460
attack<font color="#E5E5E5"> so basically now that we have the</font>

1199
00:46:28,150 --> 00:46:33,039
low stub we can get the address<font color="#CCCCCC"> of the</font>

1200
00:46:30,460 --> 00:46:34,960
Hal heap in virtual<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> and even if</font>

1201
00:46:33,039 --> 00:46:37,630
you have a<font color="#E5E5E5"> system where the</font><font color="#CCCCCC"> low stop is</font>

1202
00:46:34,960 --> 00:46:40,359
not as<font color="#E5E5E5"> your X 1000 it's going to be a 0</font>

1203
00:46:37,630 --> 00:46:41,920
<font color="#E5E5E5">X 2,000 or 3,000 in the case where this</font>

1204
00:46:40,359 --> 00:46:43,180
<font color="#CCCCCC">card low memory is not enabled</font><font color="#E5E5E5"> right</font>

1205
00:46:41,920 --> 00:46:45,670
because the housing<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> its other</font>

1206
00:46:43,180 --> 00:46:47,049
allocations<font color="#E5E5E5"> of 0 X 1000 2000 the low</font>

1207
00:46:45,670 --> 00:46:48,880
stuff can<font color="#E5E5E5"> be somewhere else</font><font color="#CCCCCC"> after that</font>

1208
00:46:47,049 --> 00:46:52,089
so it's either<font color="#CCCCCC"> at 1,000 or somewhere</font>

1209
00:46:48,880 --> 00:46:54,250
near<font color="#CCCCCC"> 1,000</font><font color="#E5E5E5"> if you have an x86 pic system</font>

1210
00:46:52,089 --> 00:46:55,750
and you can just scan<font color="#E5E5E5"> around that so now</font>

1211
00:46:54,250 --> 00:46:58,059
we have the<font color="#E5E5E5"> CR 3 structure</font><font color="#CCCCCC"> we have the</font>

1212
00:46:55,750 --> 00:46:59,589
<font color="#E5E5E5">page directory and we can now do some</font>

1213
00:46:58,059 --> 00:47:00,400
interesting attacks with virtual

1214
00:46:59,589 --> 00:47:02,410
addresses

1215
00:47:00,400 --> 00:47:04,600
Plus on top of<font color="#CCCCCC"> that which is</font><font color="#E5E5E5"> not a topic</font>

1216
00:47:02,410 --> 00:47:06,759
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> that structures used for</font>

1217
00:47:04,600 --> 00:47:08,710
<font color="#CCCCCC">ACPI sleep</font><font color="#E5E5E5"> so you have a really nice</font>

1218
00:47:06,760 --> 00:47:10,690
persistence point where if you put your

1219
00:47:08,710 --> 00:47:12,880
<font color="#CCCCCC">own code in the low stop and the</font><font color="#E5E5E5"> Machine</font>

1220
00:47:10,690 --> 00:47:14,860
goes to s2 or s3 sleep<font color="#E5E5E5"> when it comes</font>

1221
00:47:12,880 --> 00:47:16,330
back<font color="#E5E5E5"> you take direct control</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> cpu</font>

1222
00:47:14,860 --> 00:47:18,760
before anything else<font color="#E5E5E5"> even gets</font><font color="#CCCCCC"> to run on</font>

1223
00:47:16,330 --> 00:47:20,730
it so a little bit out of scope<font color="#CCCCCC"> for now</font>

1224
00:47:18,760 --> 00:47:24,070
but some interesting research<font color="#E5E5E5"> for later</font>

1225
00:47:20,730 --> 00:47:25,690
<font color="#E5E5E5">ok so that's a low stub but I also said</font>

1226
00:47:24,070 --> 00:47:29,200
there's another allocation<font color="#E5E5E5"> that happens</font>

1227
00:47:25,690 --> 00:47:31,420
in the<font color="#CCCCCC"> hell at ffd zero zero zero zero</font>

1228
00:47:29,200 --> 00:47:32,890
<font color="#CCCCCC">if you don't have the currently bugger</font>

1229
00:47:31,420 --> 00:47:34,450
enabled<font color="#E5E5E5"> if you have the currently bugger</font>

1230
00:47:32,890 --> 00:47:37,569
enabled<font color="#E5E5E5"> then this is</font><font color="#CCCCCC"> actually gonna be</font>

1231
00:47:34,450 --> 00:47:40,450
<font color="#CCCCCC">user X</font><font color="#E5E5E5"> 1000 this other allocation is</font>

1232
00:47:37,570 --> 00:47:42,280
done super early<font color="#CCCCCC"> at boot</font><font color="#E5E5E5"> as early as</font>

1233
00:47:40,450 --> 00:47:44,080
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> except you give the exception</font>

1234
00:47:42,280 --> 00:47:47,830
of the debugger<font color="#E5E5E5"> and it's a structure</font>

1235
00:47:44,080 --> 00:47:49,299
called<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ACPI bias</font><font color="#E5E5E5"> multi node which</font><font color="#CCCCCC"> is</font>

1236
00:47:47,830 --> 00:47:52,990
a piece<font color="#CCCCCC"> of code that's</font><font color="#E5E5E5"> been around since</font>

1237
00:47:49,300 --> 00:47:55,630
<font color="#CCCCCC">nt1</font><font color="#E5E5E5"> based on the old 16-bit</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> real</font>

1238
00:47:52,990 --> 00:47:57,459
mode called<font color="#E5E5E5"> MTD techcom which used to</font>

1239
00:47:55,630 --> 00:48:00,040
run on<font color="#CCCCCC"> old systems to detect your</font>

1240
00:47:57,460 --> 00:48:03,850
hardware<font color="#E5E5E5"> and it created this</font><font color="#CCCCCC"> ACPI bias</font>

1241
00:48:00,040 --> 00:48:06,040
<font color="#E5E5E5">multi node what's that structure well</font>

1242
00:48:03,850 --> 00:48:10,270
it's the physical<font color="#CCCCCC"> address</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> ACPI</font>

1243
00:48:06,040 --> 00:48:13,330
tables and then an<font color="#E5E5E5"> array of</font><font color="#CCCCCC"> ACPI</font><font color="#E5E5E5"> eh</font><font color="#CCCCCC"> 20</font>

1244
00:48:10,270 --> 00:48:15,700
entries and<font color="#CCCCCC"> ei 20 entries was the old</font>

1245
00:48:13,330 --> 00:48:17,830
way in the 1980s<font color="#E5E5E5"> that by doing</font>

1246
00:48:15,700 --> 00:48:20,799
<font color="#CCCCCC">interrupts 15 you could</font><font color="#E5E5E5"> get a physical</font>

1247
00:48:17,830 --> 00:48:23,049
<font color="#E5E5E5">map of all</font><font color="#CCCCCC"> the physical pages and their</font>

1248
00:48:20,800 --> 00:48:25,510
current<font color="#E5E5E5"> use which ones are holes which</font>

1249
00:48:23,050 --> 00:48:26,230
ones host<font color="#E5E5E5"> OS memory which</font><font color="#CCCCCC"> ones should</font>

1250
00:48:25,510 --> 00:48:30,070
<font color="#E5E5E5">not be touched</font>

1251
00:48:26,230 --> 00:48:33,280
etc even<font color="#CCCCCC"> today on a brand-new 64-bit</font>

1252
00:48:30,070 --> 00:48:35,710
system with<font color="#E5E5E5"> EFI and with no bias nothing</font>

1253
00:48:33,280 --> 00:48:39,100
like that<font color="#E5E5E5"> Windows and Linux</font><font color="#CCCCCC"> still</font>

1254
00:48:35,710 --> 00:48:40,990
creates<font color="#CCCCCC"> EA 20 entries by either</font><font color="#E5E5E5"> getting</font>

1255
00:48:39,100 --> 00:48:44,230
them from<font color="#E5E5E5"> the BIOS or emulating the BIOS</font>

1256
00:48:40,990 --> 00:48:46,270
the<font color="#E5E5E5"> EFI map so these 5 specification</font><font color="#CCCCCC"> has</font>

1257
00:48:44,230 --> 00:48:48,880
<font color="#E5E5E5">this whole new way of creating memory</font>

1258
00:48:46,270 --> 00:48:51,250
<font color="#E5E5E5">Maps what every OS does is it takes that</font>

1259
00:48:48,880 --> 00:48:52,840
in<font color="#CCCCCC"> rebuild the EA 20 map</font><font color="#E5E5E5"> because that's</font>

1260
00:48:51,250 --> 00:48:54,580
what<font color="#CCCCCC"> our</font><font color="#E5E5E5"> West guys have been</font><font color="#CCCCCC"> doing for</font>

1261
00:48:52,840 --> 00:48:56,650
you know 20 years<font color="#E5E5E5"> that's what they want</font>

1262
00:48:54,580 --> 00:48:59,860
to<font color="#E5E5E5"> get back to so basically</font><font color="#CCCCCC"> that</font>

1263
00:48:56,650 --> 00:49:03,190
structure contains in virtual memory at

1264
00:48:59,860 --> 00:49:06,310
a fixed address<font color="#CCCCCC"> essentially every single</font>

1265
00:49:03,190 --> 00:49:09,640
<font color="#CCCCCC">physical page and range I should say</font><font color="#E5E5E5"> and</font>

1266
00:49:06,310 --> 00:49:11,259
if it's<font color="#E5E5E5"> usable or if it's reserved so</font>

1267
00:49:09,640 --> 00:49:14,319
now combining<font color="#E5E5E5"> these two things we have a</font>

1268
00:49:11,260 --> 00:49:16,959
fixed address in<font color="#E5E5E5"> RAM where we can get</font>

1269
00:49:14,319 --> 00:49:18,430
<font color="#CCCCCC">Paige directory of the kernel</font><font color="#E5E5E5"> plus the</font>

1270
00:49:16,959 --> 00:49:21,219
virtual address<font color="#E5E5E5"> space of</font><font color="#CCCCCC"> the Hal heaps</font>

1271
00:49:18,430 --> 00:49:22,989
and we have an<font color="#E5E5E5"> almost</font><font color="#CCCCCC"> guaranteed address</font>

1272
00:49:21,219 --> 00:49:26,380
<font color="#E5E5E5">in virtual memory which</font><font color="#CCCCCC"> is either going</font>

1273
00:49:22,989 --> 00:49:29,410
to be<font color="#CCCCCC"> F F D 0 0 0</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> F F D 0 1 0 0 0</font>

1274
00:49:26,380 --> 00:49:31,690
<font color="#E5E5E5">which has a complete physical memory map</font>

1275
00:49:29,410 --> 00:49:34,509
<font color="#E5E5E5">and remember the two problems we</font><font color="#CCCCCC"> had</font>

1276
00:49:31,690 --> 00:49:36,009
with<font color="#E5E5E5"> the USB 3 380 was we needed</font><font color="#CCCCCC"> to</font>

1277
00:49:34,509 --> 00:49:37,809
attack<font color="#E5E5E5"> something below 4 gigabytes</font>

1278
00:49:36,009 --> 00:49:39,609
reliably<font color="#E5E5E5"> and we needed to</font><font color="#CCCCCC"> know the</font>

1279
00:49:37,809 --> 00:49:41,410
<font color="#E5E5E5">physical memory map is because if we</font>

1280
00:49:39,609 --> 00:49:43,509
<font color="#E5E5E5">touch an invalid page</font><font color="#CCCCCC"> and we crash and</font>

1281
00:49:41,410 --> 00:49:44,828
<font color="#CCCCCC">the whole device goes offline</font><font color="#E5E5E5"> now I know</font>

1282
00:49:43,509 --> 00:49:49,779
what's going to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> an invalid</font><font color="#E5E5E5"> page or</font>

1283
00:49:44,829 --> 00:49:52,630
not<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> I can attack the</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> what</font>

1284
00:49:49,779 --> 00:49:55,390
do we do now<font color="#E5E5E5"> well we can attack the</font><font color="#CCCCCC"> ECPI</font>

1285
00:49:52,630 --> 00:49:57,249
sleep interface we can<font color="#E5E5E5"> attack the CPI</font>

1286
00:49:55,390 --> 00:49:58,839
tables but those are all going<font color="#E5E5E5"> to be</font>

1287
00:49:57,249 --> 00:50:00,698
complicated<font color="#E5E5E5"> attacks and they're going to</font>

1288
00:49:58,839 --> 00:50:02,349
rely on the<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> going to sleep or</font>

1289
00:50:00,699 --> 00:50:03,789
they're going<font color="#E5E5E5"> to rely on the CPI</font>

1290
00:50:02,349 --> 00:50:06,640
interpreter

1291
00:50:03,789 --> 00:50:08,739
<font color="#E5E5E5">we'd like to attack</font><font color="#CCCCCC"> vos itself the OS</font><font color="#E5E5E5"> is</font>

1292
00:50:06,640 --> 00:50:11,049
likely<font color="#CCCCCC"> going to be somewhere above the 4</font>

1293
00:50:08,739 --> 00:50:13,239
gigabyte range<font color="#E5E5E5"> so what we're going to do</font>

1294
00:50:11,049 --> 00:50:16,559
is we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> tack</font><font color="#CCCCCC"> efi instead of</font>

1295
00:50:13,239 --> 00:50:20,229
<font color="#CCCCCC">attacking the OS now efi is something</font>

1296
00:50:16,559 --> 00:50:22,209
basically called runtime<font color="#CCCCCC"> services</font><font color="#E5E5E5"> and</font>

1297
00:50:20,229 --> 00:50:24,430
what's<font color="#E5E5E5"> interesting about efi that it</font>

1298
00:50:22,209 --> 00:50:26,859
still has<font color="#CCCCCC"> to support 32-bit systems</font>

1299
00:50:24,430 --> 00:50:28,690
especially<font color="#CCCCCC"> because</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> cpu still boots</font>

1300
00:50:26,859 --> 00:50:30,880
up in 16-bit mode and then jumps<font color="#E5E5E5"> in</font>

1301
00:50:28,690 --> 00:50:32,859
<font color="#E5E5E5">32-bit protected mode especially</font><font color="#CCCCCC"> because</font>

1302
00:50:30,880 --> 00:50:35,529
you<font color="#CCCCCC"> can still install 32-bit windows on</font>

1303
00:50:32,859 --> 00:50:37,690
any laptop in the world<font color="#CCCCCC"> 32-bit Windows</font>

1304
00:50:35,529 --> 00:50:41,170
wouldn't know how<font color="#E5E5E5"> to react to 64-bit</font>

1305
00:50:37,690 --> 00:50:43,900
physical addresses<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> efi is</font>

1306
00:50:41,170 --> 00:50:45,969
guaranteed to<font color="#E5E5E5"> have all the</font><font color="#CCCCCC"> TEL occasions</font>

1307
00:50:43,900 --> 00:50:48,519
below the 4 gigabyte range<font color="#E5E5E5"> on any</font>

1308
00:50:45,969 --> 00:50:50,079
machine<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> world so if we</font><font color="#CCCCCC"> can attack</font>

1309
00:50:48,519 --> 00:50:53,288
<font color="#E5E5E5">efi we don't need to worry about where</font>

1310
00:50:50,079 --> 00:50:55,440
the OS<font color="#E5E5E5"> is we can guarantee the presence</font>

1311
00:50:53,289 --> 00:50:58,180
<font color="#E5E5E5">of the pages below the 4 gigabyte range</font>

1312
00:50:55,440 --> 00:50:59,949
now attacking<font color="#E5E5E5"> me if i some sounds like</font>

1313
00:50:58,180 --> 00:51:01,359
something you<font color="#E5E5E5"> can do at boot but it's</font>

1314
00:50:59,949 --> 00:51:03,910
actually<font color="#E5E5E5"> something you can</font><font color="#CCCCCC"> do after</font><font color="#E5E5E5"> boot</font>

1315
00:51:01,359 --> 00:51:06,910
as<font color="#CCCCCC"> well because efi has a set</font><font color="#E5E5E5"> of runtime</font>

1316
00:51:03,910 --> 00:51:08,680
<font color="#E5E5E5">services and runtime</font><font color="#CCCCCC"> services provide</font>

1317
00:51:06,910 --> 00:51:11,618
the operating systems with access to

1318
00:51:08,680 --> 00:51:14,140
time access to<font color="#E5E5E5"> the ability</font><font color="#CCCCCC"> to reset the</font>

1319
00:51:11,619 --> 00:51:17,079
system<font color="#E5E5E5"> access to environment variables</font>

1320
00:51:14,140 --> 00:51:19,719
and access<font color="#E5E5E5"> to updating firmware and</font><font color="#CCCCCC"> OS</font>

1321
00:51:17,079 --> 00:51:22,989
10<font color="#E5E5E5"> or mac OS and</font><font color="#CCCCCC"> linux and</font><font color="#E5E5E5"> windows</font>

1322
00:51:19,719 --> 00:51:25,089
they all use efi runtime services<font color="#E5E5E5"> so we</font>

1323
00:51:22,989 --> 00:51:27,309
can pass those we can then have<font color="#CCCCCC"> our</font>

1324
00:51:25,089 --> 00:51:28,180
<font color="#E5E5E5">implant</font><font color="#CCCCCC"> be called</font><font color="#E5E5E5"> regardless of what the</font>

1325
00:51:27,309 --> 00:51:29,950
OSS

1326
00:51:28,180 --> 00:51:31,990
so we have to find where those runtime

1327
00:51:29,950 --> 00:51:33,960
services<font color="#CCCCCC"> are they're described in</font><font color="#E5E5E5"> a</font>

1328
00:51:31,990 --> 00:51:37,118
table called a runtime service table

1329
00:51:33,960 --> 00:51:39,150
<font color="#E5E5E5">this is allocated in the</font><font color="#CCCCCC"> EFI pool and</font>

1330
00:51:37,119 --> 00:51:42,010
the<font color="#CCCCCC"> EFI pool has some nice little</font>

1331
00:51:39,150 --> 00:51:44,619
signatures that<font color="#E5E5E5"> we can look for one for</font>

1332
00:51:42,010 --> 00:51:46,690
free allocations<font color="#E5E5E5"> one for actual</font>

1333
00:51:44,619 --> 00:51:49,539
allocations<font color="#E5E5E5"> and one for the tail of the</font>

1334
00:51:46,690 --> 00:51:51,910
allocation so in between<font color="#CCCCCC"> a peak a 2-0</font>

1335
00:51:49,539 --> 00:51:54,549
and<font color="#E5E5E5"> the peak al there's going to be an</font>

1336
00:51:51,910 --> 00:51:57,279
allocation and then<font color="#E5E5E5"> the runtime</font><font color="#CCCCCC"> services</font>

1337
00:51:54,549 --> 00:52:00,460
table itself has a signature which<font color="#CCCCCC"> is</font>

1338
00:51:57,279 --> 00:52:02,829
run<font color="#E5E5E5"> serve so if I just scan all memory</font>

1339
00:52:00,460 --> 00:52:04,180
<font color="#E5E5E5">below</font><font color="#CCCCCC"> 4 gigabytes</font><font color="#E5E5E5"> and I jump over the</font>

1340
00:52:02,829 --> 00:52:05,799
addresses which I know<font color="#CCCCCC"> are invalid</font>

1341
00:52:04,180 --> 00:52:08,710
<font color="#CCCCCC">because I've read</font><font color="#E5E5E5"> the memory map in the</font>

1342
00:52:05,799 --> 00:52:10,569
<font color="#CCCCCC">ACPI bias</font><font color="#E5E5E5"> multi node I can</font><font color="#CCCCCC"> find a</font>

1343
00:52:08,710 --> 00:52:12,369
runtime services<font color="#E5E5E5"> table</font><font color="#CCCCCC"> I can make sure</font>

1344
00:52:10,569 --> 00:52:15,609
<font color="#E5E5E5">I've got the right thing because if I</font>

1345
00:52:12,369 --> 00:52:17,650
add up<font color="#CCCCCC"> the header size the</font><font color="#E5E5E5"> tail size and</font>

1346
00:52:15,609 --> 00:52:20,140
cross correlated with the runtime table

1347
00:52:17,650 --> 00:52:21,789
size I can basically<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure I've got</font>

1348
00:52:20,140 --> 00:52:23,680
the right thing and<font color="#E5E5E5"> the few slides</font>

1349
00:52:21,789 --> 00:52:25,930
you'll see<font color="#E5E5E5"> the picture of</font><font color="#CCCCCC"> that now the</font>

1350
00:52:23,680 --> 00:52:29,319
one<font color="#E5E5E5"> difficulty is that windows take that</font>

1351
00:52:25,930 --> 00:52:31,779
runtime service<font color="#E5E5E5"> table and virtualizes</font>

1352
00:52:29,319 --> 00:52:34,900
<font color="#CCCCCC">aka Maps in virtual memory</font><font color="#E5E5E5"> all of the</font>

1353
00:52:31,779 --> 00:52:36,760
functions<font color="#E5E5E5"> and changes their address plus</font>

1354
00:52:34,900 --> 00:52:38,740
if you<font color="#CCCCCC"> have device guard turned on it</font>

1355
00:52:36,760 --> 00:52:40,900
will<font color="#CCCCCC"> in some cases around</font><font color="#E5E5E5"> them in</font><font color="#CCCCCC"> detail</font>

1356
00:52:38,740 --> 00:52:43,470
one as well so<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> kind of changes</font>

1357
00:52:40,900 --> 00:52:46,270
all those pointers<font color="#E5E5E5"> move them elsewhere</font>

1358
00:52:43,470 --> 00:52:48,730
<font color="#E5E5E5">passes them to</font><font color="#CCCCCC"> the Hal and then</font><font color="#E5E5E5"> to how</font>

1359
00:52:46,270 --> 00:52:51,099
hand selects only<font color="#CCCCCC"> a few of those</font>

1360
00:52:48,730 --> 00:52:53,950
pointers and then stores them<font color="#E5E5E5"> in another</font>

1361
00:52:51,099 --> 00:52:56,049
table<font color="#E5E5E5"> which means that if you do</font><font color="#CCCCCC"> find a</font>

1362
00:52:53,950 --> 00:52:57,430
table<font color="#E5E5E5"> the pointers in there are not</font>

1363
00:52:56,049 --> 00:52:59,740
going to be valid<font color="#E5E5E5"> anymore because</font>

1364
00:52:57,430 --> 00:53:01,808
they're moved somewhere<font color="#CCCCCC"> else and number</font>

1365
00:52:59,740 --> 00:53:03,729
<font color="#E5E5E5">two even if you find a</font><font color="#CCCCCC"> table and patch</font>

1366
00:53:01,809 --> 00:53:06,160
it<font color="#E5E5E5"> windows doesn't actually use</font><font color="#CCCCCC"> a</font>

1367
00:53:03,730 --> 00:53:07,869
runtime services<font color="#E5E5E5"> table</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses its</font><font color="#CCCCCC"> own</font>

1368
00:53:06,160 --> 00:53:10,868
copy<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> table which is</font><font color="#E5E5E5"> moved</font>

1369
00:53:07,869 --> 00:53:14,740
elsewhere<font color="#CCCCCC"> so this kind of sounded kind</font>

1370
00:53:10,869 --> 00:53:18,160
<font color="#E5E5E5">of depressing at first however for some</font>

1371
00:53:14,740 --> 00:53:21,339
<font color="#E5E5E5">interesting reason when</font><font color="#CCCCCC"> Windows patches</font>

1372
00:53:18,160 --> 00:53:23,920
the<font color="#CCCCCC"> efi when it moves the FI</font><font color="#E5E5E5"> run time</font>

1373
00:53:21,339 --> 00:53:26,799
functions elsewhere<font color="#E5E5E5"> it actually I think</font>

1374
00:53:23,920 --> 00:53:28,900
accidentally or bizarrely<font color="#E5E5E5"> patches the</font>

1375
00:53:26,799 --> 00:53:31,420
<font color="#CCCCCC">runtime table with the address</font><font color="#E5E5E5"> of the</font>

1376
00:53:28,900 --> 00:53:33,640
new functions so even though nothing<font color="#CCCCCC"> is</font>

1377
00:53:31,420 --> 00:53:35,940
<font color="#E5E5E5">going to use those that runtime table</font>

1378
00:53:33,640 --> 00:53:38,589
anymore<font color="#CCCCCC"> Windows still takes care of</font>

1379
00:53:35,940 --> 00:53:40,720
updating the wrong time table with where

1380
00:53:38,589 --> 00:53:41,980
it put the functions then it makes its

1381
00:53:40,720 --> 00:53:43,509
own table

1382
00:53:41,980 --> 00:53:45,790
so if we can<font color="#E5E5E5"> actually still find the</font>

1383
00:53:43,510 --> 00:53:47,829
original<font color="#E5E5E5"> firmware table</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> have been</font>

1384
00:53:45,790 --> 00:53:50,470
<font color="#E5E5E5">passed by the US with the new pointers</font>

1385
00:53:47,829 --> 00:53:52,599
and on top of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there are two</font>

1386
00:53:50,470 --> 00:53:54,339
pointers that<font color="#E5E5E5"> it doesn't touch which</font>

1387
00:53:52,599 --> 00:53:57,220
will have the physical address left in

1388
00:53:54,339 --> 00:53:59,140
there so graphically<font color="#E5E5E5"> I can explain</font><font color="#CCCCCC"> it a</font>

1389
00:53:57,220 --> 00:54:03,490
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit better here is essentially</font>

1390
00:53:59,140 --> 00:54:07,990
<font color="#E5E5E5">the FI runtime table</font><font color="#CCCCCC"> and here is the</font>

1391
00:54:03,490 --> 00:54:10,270
pool header<font color="#E5E5E5"> with a size of</font><font color="#CCCCCC"> b0 and a type</font>

1392
00:54:07,990 --> 00:54:12,569
of<font color="#CCCCCC"> six which means runtime memory</font><font color="#E5E5E5"> then</font>

1393
00:54:10,270 --> 00:54:14,710
at the<font color="#E5E5E5"> bottom I've</font><font color="#CCCCCC"> got the pool tail</font>

1394
00:54:12,570 --> 00:54:16,780
with the<font color="#CCCCCC"> size of</font><font color="#E5E5E5"> b0</font>

1395
00:54:14,710 --> 00:54:19,240
and so in<font color="#CCCCCC"> between I've got the FI</font>

1396
00:54:16,780 --> 00:54:22,390
runtime<font color="#CCCCCC"> services and there's a</font><font color="#E5E5E5"> signature</font>

1397
00:54:19,240 --> 00:54:25,750
here that says run serve<font color="#E5E5E5"> you can see all</font>

1398
00:54:22,390 --> 00:54:28,328
these pointers<font color="#E5E5E5"> of SSSs SSSs SSSs</font><font color="#CCCCCC"> this is</font>

1399
00:54:25,750 --> 00:54:30,490
where the kernel<font color="#E5E5E5"> remap the addresses so</font>

1400
00:54:28,329 --> 00:54:31,660
I have the virtual<font color="#CCCCCC"> address and then in</font>

1401
00:54:30,490 --> 00:54:33,879
the middle there's two functions<font color="#E5E5E5"> that</font>

1402
00:54:31,660 --> 00:54:36,190
still have completely different pointers

1403
00:54:33,880 --> 00:54:37,930
which are the physical address<font color="#E5E5E5"> so they</font>

1404
00:54:36,190 --> 00:54:40,060
actually<font color="#CCCCCC"> leaked the physical address</font><font color="#E5E5E5"> of</font>

1405
00:54:37,930 --> 00:54:41,470
at least<font color="#E5E5E5"> two of the functions plus if</font>

1406
00:54:40,060 --> 00:54:43,060
<font color="#E5E5E5">you do have virtual memory access the</font>

1407
00:54:41,470 --> 00:54:46,629
page directory<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> get to the</font>

1408
00:54:43,060 --> 00:54:49,060
virtual functions<font color="#E5E5E5"> as well now what makes</font>

1409
00:54:46,630 --> 00:54:51,640
<font color="#E5E5E5">it even easier</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that all the runtime</font>

1410
00:54:49,060 --> 00:54:53,828
functions<font color="#E5E5E5"> in the firmware they actually</font>

1411
00:54:51,640 --> 00:54:55,240
live in a PE file so<font color="#E5E5E5"> all those functions</font>

1412
00:54:53,829 --> 00:54:57,819
<font color="#CCCCCC">are actually gonna</font><font color="#E5E5E5"> be pointers to</font>

1413
00:54:55,240 --> 00:54:59,500
functions in the same<font color="#CCCCCC"> P file so if you</font>

1414
00:54:57,819 --> 00:55:01,839
have the<font color="#E5E5E5"> physical address of one of the</font>

1415
00:54:59,500 --> 00:55:04,030
functions you<font color="#CCCCCC"> can just look up until you</font>

1416
00:55:01,839 --> 00:55:05,710
find a PE header or MZ header and then

1417
00:55:04,030 --> 00:55:07,900
<font color="#E5E5E5">you know where the actual if I</font><font color="#CCCCCC"> runtime</font>

1418
00:55:05,710 --> 00:55:09,339
driver is you can<font color="#E5E5E5"> get as a base address</font>

1419
00:55:07,900 --> 00:55:12,099
and you can just some simple<font color="#CCCCCC"> math to</font>

1420
00:55:09,339 --> 00:55:14,770
<font color="#CCCCCC">figure</font><font color="#E5E5E5"> out well</font><font color="#CCCCCC"> okay if this address</font>

1421
00:55:12,099 --> 00:55:17,020
physical<font color="#E5E5E5"> is you know close</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> this</font>

1422
00:55:14,770 --> 00:55:19,240
address virtual<font color="#E5E5E5"> and I've got a</font><font color="#CCCCCC"> D header</font>

1423
00:55:17,020 --> 00:55:21,849
<font color="#CCCCCC">I can</font><font color="#E5E5E5"> figure out the diff and I can get</font>

1424
00:55:19,240 --> 00:55:24,848
the physical<font color="#CCCCCC"> address</font><font color="#E5E5E5"> of all the</font><font color="#CCCCCC"> pages or</font>

1425
00:55:21,849 --> 00:55:26,140
because we've got<font color="#CCCCCC"> PML for we</font><font color="#E5E5E5"> could also</font>

1426
00:55:24,849 --> 00:55:27,819
just<font color="#CCCCCC"> use the virtual</font><font color="#E5E5E5"> addresses directly</font>

1427
00:55:26,140 --> 00:55:30,098
<font color="#E5E5E5">right since we do</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> kernel space</font>

1428
00:55:27,819 --> 00:55:31,779
directory we can<font color="#E5E5E5"> look up those addresses</font>

1429
00:55:30,099 --> 00:55:34,630
but<font color="#E5E5E5"> the point is we</font><font color="#CCCCCC"> actually don't</font><font color="#E5E5E5"> have</font>

1430
00:55:31,780 --> 00:55:36,700
<font color="#E5E5E5">to because of the physical pointers</font>

1431
00:55:34,630 --> 00:55:39,900
leaking we can get the<font color="#E5E5E5"> virtual pointers</font>

1432
00:55:36,700 --> 00:55:43,029
<font color="#E5E5E5">as well so now basically we can patch</font>

1433
00:55:39,900 --> 00:55:46,030
not the table but one<font color="#CCCCCC"> of the functions</font>

1434
00:55:43,030 --> 00:55:48,400
<font color="#CCCCCC">that's pointed to by the table</font><font color="#E5E5E5"> with our</font>

1435
00:55:46,030 --> 00:55:50,980
own implant code and the<font color="#CCCCCC"> only thing</font>

1436
00:55:48,400 --> 00:55:53,170
that's<font color="#CCCCCC"> left is</font><font color="#E5E5E5"> getting the call</font><font color="#CCCCCC"> getting</font>

1437
00:55:50,980 --> 00:55:55,820
the implant<font color="#CCCCCC"> to run and this is</font>

1438
00:55:53,170 --> 00:55:57,620
<font color="#CCCCCC">unfortunately</font><font color="#E5E5E5"> kind of an open</font><font color="#CCCCCC"> problem</font>

1439
00:55:55,820 --> 00:55:59,990
<font color="#CCCCCC">because</font><font color="#E5E5E5"> windows does not have a simple</font>

1440
00:55:57,620 --> 00:56:04,160
<font color="#E5E5E5">mechanism</font><font color="#CCCCCC"> that's a non admin you can use</font>

1441
00:55:59,990 --> 00:56:08,359
to<font color="#E5E5E5"> basically get an</font><font color="#CCCCCC"> EFI function to run</font>

1442
00:56:04,160 --> 00:56:10,190
the BCD<font color="#CCCCCC"> which uses</font><font color="#E5E5E5"> EFI</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> only be</font>

1443
00:56:08,360 --> 00:56:11,900
accessed by admins<font color="#E5E5E5"> the firmer</font>

1444
00:56:10,190 --> 00:56:13,610
environment variables even<font color="#E5E5E5"> to read a</font>

1445
00:56:11,900 --> 00:56:15,470
<font color="#CCCCCC">firm environment variable you have</font><font color="#E5E5E5"> to be</font>

1446
00:56:13,610 --> 00:56:17,000
an admin in<font color="#E5E5E5"> Windows so there's no</font>

1447
00:56:15,470 --> 00:56:19,399
command<font color="#CCCCCC"> I've been able to</font><font color="#E5E5E5"> find yet to</font>

1448
00:56:17,000 --> 00:56:20,840
force a<font color="#E5E5E5"> fi function to run but</font>

1449
00:56:19,400 --> 00:56:23,270
<font color="#E5E5E5">periodically you're going to get things</font>

1450
00:56:20,840 --> 00:56:25,850
like the memory diagnostic<font color="#E5E5E5"> Windows</font>

1451
00:56:23,270 --> 00:56:28,670
<font color="#E5E5E5">Defender volume snapshot</font><font color="#CCCCCC"> System Restore</font>

1452
00:56:25,850 --> 00:56:30,560
<font color="#CCCCCC">they will end up calling get variable</font><font color="#E5E5E5"> at</font>

1453
00:56:28,670 --> 00:56:32,510
some point and if you hook to get

1454
00:56:30,560 --> 00:56:34,610
<font color="#E5E5E5">variable you will eventually get code</font>

1455
00:56:32,510 --> 00:56:36,590
execution<font color="#E5E5E5"> but you do have to kind of</font>

1456
00:56:34,610 --> 00:56:38,960
wait around for the system<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able to</font>

1457
00:56:36,590 --> 00:56:41,120
<font color="#E5E5E5">do that so someone figures out a way</font><font color="#CCCCCC"> to</font>

1458
00:56:38,960 --> 00:56:44,660
trigger this you know I'd welcome the

1459
00:56:41,120 --> 00:56:48,319
<font color="#E5E5E5">the input so let me actually do a quick</font>

1460
00:56:44,660 --> 00:56:50,600
<font color="#E5E5E5">little demo I'm going to plug in the the</font>

1461
00:56:48,320 --> 00:56:54,110
PCI device here should probably turn off

1462
00:56:50,600 --> 00:56:56,480
the<font color="#E5E5E5"> power first</font><font color="#CCCCCC"> and then I'm</font><font color="#E5E5E5"> going to be</font>

1463
00:56:54,110 --> 00:57:00,230
<font color="#CCCCCC">CI leach to try to get the runtime table</font>

1464
00:56:56,480 --> 00:57:02,650
<font color="#E5E5E5">hoping that it works let's do it this</font>

1465
00:57:00,230 --> 00:57:02,650
way<font color="#CCCCCC"> instead</font>

1466
00:57:08,099 --> 00:57:14,640
okay so that's<font color="#E5E5E5"> one into that plug this</font>

1467
00:57:11,910 --> 00:57:15,949
in<font color="#CCCCCC"> here and hoping we'll get</font><font color="#E5E5E5"> that a</font>

1468
00:57:14,640 --> 00:57:24,479
<font color="#E5E5E5">little</font><font color="#CCCCCC"> dig adieu</font><font color="#E5E5E5"> silent</font>

1469
00:57:15,949 --> 00:57:26,489
okay let's plug this here so it<font color="#E5E5E5"> has</font>

1470
00:57:24,479 --> 00:57:30,959
powered up there's some leds leds are

1471
00:57:26,489 --> 00:57:34,380
good and<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> allow the</font>

1472
00:57:30,959 --> 00:57:37,308
<font color="#E5E5E5">connection of the box okay you didn't</font>

1473
00:57:34,380 --> 00:57:40,199
hear but those little<font color="#CCCCCC"> dig</font><font color="#E5E5E5"> dig</font><font color="#CCCCCC"> ado and</font>

1474
00:57:37,309 --> 00:57:44,180
<font color="#E5E5E5">let me try</font><font color="#CCCCCC"> to find my admin command from</font>

1475
00:57:40,199 --> 00:57:46,829
<font color="#E5E5E5">now</font><font color="#CCCCCC"> I should have it open oh there it is</font>

1476
00:57:44,180 --> 00:57:51,419
so I'm going<font color="#CCCCCC"> to try one</font><font color="#E5E5E5"> command which</font><font color="#CCCCCC"> is</font>

1477
00:57:46,829 --> 00:57:52,890
to search actually<font color="#E5E5E5"> to dump the</font><font color="#CCCCCC"> I you</font>

1478
00:57:51,420 --> 00:57:56,430
reuse the<font color="#E5E5E5"> command called patch because I</font>

1479
00:57:52,890 --> 00:58:00,989
was lazy<font color="#CCCCCC"> but this should find the memory</font>

1480
00:57:56,430 --> 00:58:02,519
<font color="#E5E5E5">map boom so it's called patch I've</font>

1481
00:58:00,989 --> 00:58:04,859
nothing to<font color="#E5E5E5"> dispatch what</font><font color="#CCCCCC"> does command</font>

1482
00:58:02,519 --> 00:58:06,419
<font color="#E5E5E5">does is it looks at the</font><font color="#CCCCCC"> a CPI bias multi</font>

1483
00:58:04,859 --> 00:58:09,299
<font color="#CCCCCC">node which again is</font><font color="#E5E5E5"> going to be</font>

1484
00:58:06,420 --> 00:58:11,819
<font color="#CCCCCC">hard-coded in physical memory or</font><font color="#E5E5E5"> we can</font>

1485
00:58:09,299 --> 00:58:14,219
scan for<font color="#E5E5E5"> it and now I know exactly</font><font color="#CCCCCC"> all</font>

1486
00:58:11,819 --> 00:58:16,229
<font color="#CCCCCC">the physical addresses on this laptop</font>

1487
00:58:14,219 --> 00:58:17,969
<font color="#CCCCCC">that I can access</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of them are</font>

1488
00:58:16,229 --> 00:58:20,089
reserved so I better not touch them the

1489
00:58:17,969 --> 00:58:23,369
ones that are<font color="#E5E5E5"> not reserved</font><font color="#CCCCCC"> I can dump</font>

1490
00:58:20,089 --> 00:58:26,038
then I can search<font color="#CCCCCC"> for the runtime table</font>

1491
00:58:23,369 --> 00:58:27,390
using that<font color="#CCCCCC"> information so I'll</font><font color="#E5E5E5"> run a</font>

1492
00:58:26,039 --> 00:58:29,369
search the<font color="#E5E5E5"> search will</font><font color="#CCCCCC"> take a little</font><font color="#E5E5E5"> bit</font>

1493
00:58:27,390 --> 00:58:31,469
<font color="#E5E5E5">of time and I know if you can see but</font>

1494
00:58:29,369 --> 00:58:33,479
<font color="#E5E5E5">the LEDs are kind of blinking here to</font>

1495
00:58:31,469 --> 00:58:36,059
<font color="#E5E5E5">indicate that as access is going on and</font>

1496
00:58:33,479 --> 00:58:38,368
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be searching for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> at</font>

1497
00:58:36,059 --> 00:58:40,859
<font color="#E5E5E5">runtime table and if we find it demo</font>

1498
00:58:38,369 --> 00:58:42,690
gods<font color="#CCCCCC"> it'll print out the function</font>

1499
00:58:40,859 --> 00:58:49,400
pointers and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data that's</font><font color="#E5E5E5"> actually</font>

1500
00:58:42,690 --> 00:58:51,569
<font color="#E5E5E5">there and this hassles can the entire</font>

1501
00:58:49,400 --> 00:58:53,160
address<font color="#CCCCCC"> space</font><font color="#E5E5E5"> physical address space</font>

1502
00:58:51,569 --> 00:58:54,299
<font color="#CCCCCC">because we</font><font color="#E5E5E5"> don't know where the runtime</font>

1503
00:58:53,160 --> 00:58:58,799
table is<font color="#E5E5E5"> going to be we know the below</font>

1504
00:58:54,299 --> 00:59:00,239
<font color="#CCCCCC">four gigs somewhere it</font><font color="#E5E5E5"> actually should</font>

1505
00:58:58,799 --> 00:59:02,219
<font color="#CCCCCC">have passed and aflac</font><font color="#E5E5E5"> to that otherwise</font>

1506
00:59:00,239 --> 00:59:05,549
<font color="#E5E5E5">is going to crash so I'll do it one more</font>

1507
00:59:02,219 --> 00:59:07,920
<font color="#E5E5E5">time well it's actually scanning</font><font color="#CCCCCC"> just to</font>

1508
00:59:05,549 --> 00:59:09,299
kind<font color="#E5E5E5"> of conclude some thoughts here so</font>

1509
00:59:07,920 --> 00:59:12,119
first of all<font color="#E5E5E5"> if you actually run Windows</font>

1510
00:59:09,299 --> 00:59:13,670
10<font color="#E5E5E5"> with hyper-v nabel's two things are</font>

1511
00:59:12,119 --> 00:59:16,109
going to<font color="#CCCCCC"> happen is a the firmware</font>

1512
00:59:13,670 --> 00:59:18,930
services are<font color="#CCCCCC"> going to be in</font><font color="#E5E5E5"> VT l1</font>

1513
00:59:16,109 --> 00:59:21,150
they're going to be in the protected

1514
00:59:18,930 --> 00:59:21,990
region of the hypervisor memory and so

1515
00:59:21,150 --> 00:59:24,330
if you do try to do

1516
00:59:21,990 --> 00:59:25,919
<font color="#E5E5E5">DNA attack against the efi memory you</font>

1517
00:59:24,330 --> 00:59:28,740
won't be able<font color="#E5E5E5"> to would devise guard</font>

1518
00:59:25,920 --> 00:59:30,540
turned on<font color="#CCCCCC"> you're actually</font><font color="#E5E5E5"> okay but</font>

1519
00:59:28,740 --> 00:59:32,368
here's<font color="#E5E5E5"> the interesting</font><font color="#CCCCCC"> thing they only</font>

1520
00:59:30,540 --> 00:59:34,350
run the<font color="#E5E5E5"> firmware this was an earlier</font>

1521
00:59:32,369 --> 00:59:36,090
slide they only run<font color="#E5E5E5"> the firmware in</font><font color="#CCCCCC"> v</font><font color="#E5E5E5"> TL</font>

1522
00:59:34,350 --> 00:59:40,140
<font color="#CCCCCC">one</font><font color="#E5E5E5"> and the protected environment if</font>

1523
00:59:36,090 --> 00:59:41,970
it's actually not<font color="#E5E5E5"> W X or X so if your</font>

1524
00:59:40,140 --> 00:59:43,410
<font color="#CCCCCC">former</font><font color="#E5E5E5"> developer like I'm surface did</font>

1525
00:59:41,970 --> 00:59:45,868
the right thing<font color="#CCCCCC"> and the former is not</font>

1526
00:59:43,410 --> 00:59:47,549
<font color="#E5E5E5">writable and executable they actually</font>

1527
00:59:45,869 --> 00:59:49,290
don't protect it<font color="#E5E5E5"> because they assume</font>

1528
00:59:47,550 --> 00:59:49,800
it's okay it's<font color="#E5E5E5"> not writable everything's</font>

1529
00:59:49,290 --> 00:59:51,900
fine

1530
00:59:49,800 --> 00:59:54,330
they only<font color="#E5E5E5"> protect it if it's actually</font>

1531
00:59:51,900 --> 00:59:56,160
writable and executable<font color="#E5E5E5"> they protect it</font>

1532
00:59:54,330 --> 00:59:57,650
in the hypervisor<font color="#E5E5E5"> to make sure it rings</font>

1533
00:59:56,160 --> 00:59:59,850
your exploits<font color="#E5E5E5"> and attack it so</font>

1534
00:59:57,650 --> 01:00:02,700
<font color="#CCCCCC">ironically</font><font color="#E5E5E5"> while trying to</font><font color="#CCCCCC"> protect the</font>

1535
00:59:59,850 --> 01:00:04,740
firmware<font color="#E5E5E5"> for ring</font><font color="#CCCCCC"> 0 exploits</font><font color="#E5E5E5"> they deep</font>

1536
01:00:02,700 --> 01:00:06,660
<font color="#CCCCCC">protect it on most</font><font color="#E5E5E5"> systems against DMA</font>

1537
01:00:04,740 --> 01:00:09,390
exploits<font color="#E5E5E5"> so if you have like vulnerable</font>

1538
01:00:06,660 --> 01:00:12,299
<font color="#E5E5E5">EFI firmware to ring</font><font color="#CCCCCC"> 0 exploits</font>

1539
01:00:09,390 --> 01:00:14,640
<font color="#CCCCCC">it'll be</font><font color="#E5E5E5"> protected if you have firmware</font>

1540
01:00:12,300 --> 01:00:17,070
that's not<font color="#CCCCCC"> vulnerable because</font><font color="#E5E5E5"> it's W X</font>

1541
01:00:14,640 --> 01:00:18,390
or X they won't protect it with<font color="#E5E5E5"> the RM</font>

1542
01:00:17,070 --> 01:00:18,960
mu and<font color="#E5E5E5"> then you can actually patch it</font>

1543
01:00:18,390 --> 01:00:21,150
with<font color="#CCCCCC"> the MA</font>

1544
01:00:18,960 --> 01:00:26,040
so that's kind of weird<font color="#E5E5E5"> the second thing</font>

1545
01:00:21,150 --> 01:00:27,990
is that<font color="#E5E5E5"> memory that use less than</font><font color="#CCCCCC"> one</font>

1546
01:00:26,040 --> 01:00:30,750
megabyte memory option<font color="#CCCCCC"> if you use</font>

1547
01:00:27,990 --> 01:00:33,089
bcdedit<font color="#CCCCCC"> and set first megabyte policy to</font>

1548
01:00:30,750 --> 01:00:34,500
<font color="#CCCCCC">use all this</font><font color="#E5E5E5"> should make</font><font color="#CCCCCC"> it a little</font><font color="#E5E5E5"> bit</font>

1549
01:00:33,090 --> 01:00:36,150
harder for<font color="#E5E5E5"> an attacker to find a</font><font color="#CCCCCC"> low</font>

1550
01:00:34,500 --> 01:00:37,380
stub because now you're going<font color="#CCCCCC"> to be the</font>

1551
01:00:36,150 --> 01:00:39,450
<font color="#CCCCCC">coroner case</font><font color="#E5E5E5"> you're going</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> the</font>

1552
01:00:37,380 --> 01:00:40,590
coroner case where allocations don't

1553
01:00:39,450 --> 01:00:42,779
start on the<font color="#CCCCCC"> medaka byte but they</font>

1554
01:00:40,590 --> 01:00:43,980
started<font color="#CCCCCC"> four kilobytes</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> now that low</font>

1555
01:00:42,780 --> 01:00:45,420
stuff is going<font color="#E5E5E5"> to be somewhere in the</font>

1556
01:00:43,980 --> 01:00:47,609
<font color="#CCCCCC">middle of all the other allocations</font>

1557
01:00:45,420 --> 01:00:49,500
again by default<font color="#CCCCCC"> the first megabyte</font>

1558
01:00:47,609 --> 01:00:51,090
policies to ignore the first megabyte

1559
01:00:49,500 --> 01:00:53,460
that's why the<font color="#E5E5E5"> only thing that ends up</font>

1560
01:00:51,090 --> 01:00:55,080
there is a low stuff<font color="#E5E5E5"> and of course if</font>

1561
01:00:53,460 --> 01:00:57,420
you have a laptop<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Thunderbolt</font>

1562
01:00:55,080 --> 01:00:59,940
you know<font color="#E5E5E5"> don't use in Windows always</font>

1563
01:00:57,420 --> 01:01:02,070
enable don't disable<font color="#CCCCCC"> Thunderbolt</font>

1564
01:00:59,940 --> 01:01:04,050
security and I would<font color="#E5E5E5"> recommend not</font>

1565
01:01:02,070 --> 01:01:06,660
<font color="#E5E5E5">enabling things like always trust</font>

1566
01:01:04,050 --> 01:01:08,310
they'll dock<font color="#CCCCCC"> and</font><font color="#E5E5E5"> definitely</font><font color="#CCCCCC"> don't enable</font>

1567
01:01:06,660 --> 01:01:10,710
Thunderbolt at boots<font color="#E5E5E5"> because that</font>

1568
01:01:08,310 --> 01:01:13,440
bypasses<font color="#E5E5E5"> you know all of the security</font>

1569
01:01:10,710 --> 01:01:15,990
<font color="#CCCCCC">that Windows then gives you there we go</font>

1570
01:01:13,440 --> 01:01:18,090
so this finished<font color="#E5E5E5"> found</font><font color="#CCCCCC"> EFI runtime</font>

1571
01:01:15,990 --> 01:01:19,470
services<font color="#CCCCCC"> and here's</font><font color="#E5E5E5"> all the virtual</font>

1572
01:01:18,090 --> 01:01:21,359
addresses where the runtime functions

1573
01:01:19,470 --> 01:01:23,220
are on the<font color="#E5E5E5"> Dell and again notice these</font>

1574
01:01:21,359 --> 01:01:24,779
two pointers here which are<font color="#CCCCCC"> leaks</font>

1575
01:01:23,220 --> 01:01:26,279
physical addresses you're not going to

1576
01:01:24,780 --> 01:01:28,170
allow<font color="#E5E5E5"> me</font><font color="#CCCCCC"> to figure</font><font color="#E5E5E5"> out where everything</font>

1577
01:01:26,280 --> 01:01:29,550
<font color="#E5E5E5">else's you can't patch these two because</font>

1578
01:01:28,170 --> 01:01:31,830
nothing calls them<font color="#E5E5E5"> that's why they're</font>

1579
01:01:29,550 --> 01:01:34,710
still<font color="#E5E5E5"> old but you can now use this to</font>

1580
01:01:31,830 --> 01:01:35,670
patch everything else<font color="#E5E5E5"> so this now gives</font>

1581
01:01:34,710 --> 01:01:37,920
you<font color="#E5E5E5"> you</font>

1582
01:01:35,670 --> 01:01:40,380
Universal attack against<font color="#CCCCCC"> Windows</font>

1583
01:01:37,920 --> 01:01:42,990
machines and<font color="#E5E5E5"> even against Linux</font><font color="#CCCCCC"> both</font>

1584
01:01:40,380 --> 01:01:46,049
<font color="#E5E5E5">actually read it a lot</font><font color="#CCCCCC"> of work</font><font color="#E5E5E5"> earlier</font>

1585
01:01:42,990 --> 01:01:46,410
against limits machines as well so wrap

1586
01:01:46,049 --> 01:01:48,540
up

1587
01:01:46,410 --> 01:01:50,940
<font color="#CCCCCC">Joanne dolfe</font><font color="#E5E5E5"> obviously there wants</font><font color="#CCCCCC"> to</font>

1588
01:01:48,540 --> 01:01:52,650
kind<font color="#E5E5E5"> of figure</font><font color="#CCCCCC"> out the USB through 380</font>

1589
01:01:50,940 --> 01:01:54,420
they did the initial firmware<font color="#E5E5E5"> for it</font>

1590
01:01:52,650 --> 01:01:55,920
<font color="#E5E5E5">they did the original</font><font color="#CCCCCC"> presentation on</font>

1591
01:01:54,420 --> 01:01:58,380
this so<font color="#E5E5E5"> they you know these are huge</font>

1592
01:01:55,920 --> 01:02:00,119
kudos for helping me you<font color="#E5E5E5"> know be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

1593
01:01:58,380 --> 01:02:02,609
do this version<font color="#E5E5E5"> of the attack</font><font color="#CCCCCC"> that</font>

1594
01:02:00,119 --> 01:02:04,680
focuses on<font color="#E5E5E5"> Windows with Thunderbolt 3</font><font color="#CCCCCC"> of</font>

1595
01:02:02,609 --> 01:02:07,160
<font color="#CCCCCC">course there and Trammell for all the</font>

1596
01:02:04,680 --> 01:02:10,140
<font color="#CCCCCC">Sun durable</font><font color="#E5E5E5"> work they did before that</font>

1597
01:02:07,160 --> 01:02:12,149
also<font color="#CCCCCC"> friend of mine from Microsoft she</font>

1598
01:02:10,140 --> 01:02:13,799
allowed me<font color="#CCCCCC"> to plug the device into her</font>

1599
01:02:12,150 --> 01:02:15,839
Microsoft corporate laptop for the first

1600
01:02:13,799 --> 01:02:17,849
time to try out how things<font color="#E5E5E5"> were working</font>

1601
01:02:15,839 --> 01:02:19,259
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> hex dump I'm like</font><font color="#CCCCCC"> here's</font><font color="#E5E5E5"> our</font>

1602
01:02:17,849 --> 01:02:22,140
corporate credentials<font color="#E5E5E5"> who uses your</font>

1603
01:02:19,260 --> 01:02:23,520
corporate password cool it works<font color="#CCCCCC"> and I</font>

1604
01:02:22,140 --> 01:02:25,230
also really want<font color="#E5E5E5"> to thank the Recon</font>

1605
01:02:23,520 --> 01:02:27,299
organizers<font color="#E5E5E5"> for doing an amazing job with</font>

1606
01:02:25,230 --> 01:02:29,339
<font color="#CCCCCC">the first recon Brussels I think it's</font>

1607
01:02:27,299 --> 01:02:31,369
amazing<font color="#CCCCCC"> and I'm</font><font color="#E5E5E5"> honored to have</font><font color="#CCCCCC"> been</font>

1608
01:02:29,339 --> 01:02:34,170
here for the first<font color="#E5E5E5"> for the first</font><font color="#CCCCCC"> one so</font>

1609
01:02:31,369 --> 01:02:37,859
big<font color="#E5E5E5"> shout out to to everyone from</font><font color="#CCCCCC"> recon</font>

1610
01:02:34,170 --> 01:02:40,260
<font color="#E5E5E5">who are so hard to bring us here so with</font>

1611
01:02:37,859 --> 01:02:41,910
that I'll open<font color="#E5E5E5"> up to any questions</font>

1612
01:02:40,260 --> 01:02:43,950
<font color="#E5E5E5">although I'm guessing some of you are</font>

1613
01:02:41,910 --> 01:02:45,690
getting<font color="#CCCCCC"> hungry but thank you again for</font>

1614
01:02:43,950 --> 01:02:47,899
your<font color="#CCCCCC"> time</font><font color="#E5E5E5"> and thank you again for for</font>

1615
01:02:45,690 --> 01:02:56,590
recon for hosting for hosting<font color="#E5E5E5"> me</font>

1616
01:02:47,900 --> 01:03:02,150
[Applause]

1617
01:02:56,590 --> 01:03:03,530
looks like we got<font color="#CCCCCC"> one in</font><font color="#E5E5E5"> the back so you</font>

1618
01:03:02,150 --> 01:03:05,930
made<font color="#E5E5E5"> it an assertion at the beginning</font>

1619
01:03:03,530 --> 01:03:07,910
<font color="#E5E5E5">that even if you run Thunderbolt in sort</font>

1620
01:03:05,930 --> 01:03:09,680
of<font color="#E5E5E5"> the most secure mode where it's using</font>

1621
01:03:07,910 --> 01:03:11,960
a unique ID<font color="#E5E5E5"> on the device and doing a</font>

1622
01:03:09,680 --> 01:03:14,149
challenge<font color="#CCCCCC"> response</font><font color="#E5E5E5"> that it's actually</font>

1623
01:03:11,960 --> 01:03:15,470
only authorizing the bridge rather than

1624
01:03:14,150 --> 01:03:17,330
the device you're saying like you've got

1625
01:03:15,470 --> 01:03:19,879
a<font color="#E5E5E5"> doc you're slapping in different PCI</font>

1626
01:03:17,330 --> 01:03:21,500
cards and if you slap out a different

1627
01:03:19,880 --> 01:03:23,720
<font color="#E5E5E5">PCI card it'll still actually have</font>

1628
01:03:21,500 --> 01:03:27,080
authorized<font color="#E5E5E5"> the doc not the card</font><font color="#CCCCCC"> I don't</font>

1629
01:03:23,720 --> 01:03:28,399
<font color="#CCCCCC">think that's true</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> the I mean the</font>

1630
01:03:27,080 --> 01:03:31,460
thing is I don't think<font color="#E5E5E5"> there's any</font>

1631
01:03:28,400 --> 01:03:33,410
devices<font color="#E5E5E5"> out that actually use the random</font>

1632
01:03:31,460 --> 01:03:34,850
ID the unique ID<font color="#CCCCCC"> and the challenge</font>

1633
01:03:33,410 --> 01:03:37,609
response<font color="#E5E5E5"> protocol so I don't think</font><font color="#CCCCCC"> you</font>

1634
01:03:34,850 --> 01:03:39,890
could<font color="#E5E5E5"> actually test it yet but basically</font>

1635
01:03:37,610 --> 01:03:42,170
it should<font color="#CCCCCC"> be the</font><font color="#E5E5E5"> actual PCI device</font>

1636
01:03:39,890 --> 01:03:43,850
itself not like bridges in between which

1637
01:03:42,170 --> 01:03:46,430
are sending the challenges in doing the

1638
01:03:43,850 --> 01:03:48,319
responses<font color="#E5E5E5"> so you're saying that the</font>

1639
01:03:46,430 --> 01:03:50,899
design<font color="#E5E5E5"> is actually safe against us but</font>

1640
01:03:48,320 --> 01:03:54,590
the<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> of the power doors is</font>

1641
01:03:50,900 --> 01:03:56,420
incorrect<font color="#E5E5E5"> right I'm saying that it's not</font>

1642
01:03:54,590 --> 01:03:58,340
<font color="#E5E5E5">the mode that</font><font color="#CCCCCC"> like Dell uses by default</font>

1643
01:03:56,420 --> 01:04:00,020
<font color="#CCCCCC">it was just one of</font><font color="#E5E5E5"> those optional modes</font>

1644
01:03:58,340 --> 01:04:01,370
for the<font color="#E5E5E5"> Thunderbolt security level sure</font>

1645
01:04:00,020 --> 01:04:02,870
but what I'm saying is<font color="#E5E5E5"> if I if I</font>

1646
01:04:01,370 --> 01:04:04,370
actually go on<font color="#CCCCCC"> the bias and</font><font color="#E5E5E5"> I enabled</font>

1647
01:04:02,870 --> 01:04:07,180
that mode which is an option

1648
01:04:04,370 --> 01:04:10,130
I tried it out<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> still lets me so</font>

1649
01:04:07,180 --> 01:04:12,049
if you<font color="#CCCCCC"> have an implemented device is not</font>

1650
01:04:10,130 --> 01:04:13,670
actually a thing that so you can turn<font color="#E5E5E5"> on</font>

1651
01:04:12,050 --> 01:04:14,720
<font color="#E5E5E5">the mode but basically yeah I'm right I</font>

1652
01:04:13,670 --> 01:04:15,920
guess that could be a<font color="#E5E5E5"> Dell saying</font>

1653
01:04:14,720 --> 01:04:19,779
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> they're turning on the mode</font>

1654
01:04:15,920 --> 01:04:22,310
and<font color="#E5E5E5"> not actually use not actually</font>

1655
01:04:19,780 --> 01:04:23,900
enforcing the<font color="#CCCCCC"> policy that I require the</font>

1656
01:04:22,310 --> 01:04:25,220
<font color="#CCCCCC">unique guide</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is which in my book</font>

1657
01:04:23,900 --> 01:04:27,200
is<font color="#E5E5E5"> broken it should have a warning</font>

1658
01:04:25,220 --> 01:04:28,790
<font color="#E5E5E5">saying you know this is not supported or</font>

1659
01:04:27,200 --> 01:04:35,930
something like that<font color="#CCCCCC"> I think you just are</font>

1660
01:04:28,790 --> 01:04:37,490
<font color="#CCCCCC">doing that</font><font color="#E5E5E5"> kind of like the old secure</font>

1661
01:04:35,930 --> 01:04:41,960
boot<font color="#CCCCCC"> firmwares which wouldn't actually</font>

1662
01:04:37,490 --> 01:04:47,270
<font color="#E5E5E5">check the signature</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> AA</font><font color="#CCCCCC"> proms anyone</font>

1663
01:04:41,960 --> 01:04:48,860
have any<font color="#E5E5E5"> other questions all right then</font>

1664
01:04:47,270 --> 01:04:50,109
<font color="#E5E5E5">when I</font><font color="#CCCCCC"> fifty enjoy your lunch</font><font color="#E5E5E5"> thank you</font>

1665
01:04:48,860 --> 01:04:52,170
<font color="#CCCCCC">very much</font>

1666
01:04:50,109 --> 01:04:52,170
you

1667
01:04:59,200 --> 01:05:01,259
<font color="#CCCCCC">you</font>

