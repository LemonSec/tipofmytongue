1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,990 --> 00:00:13,309
<font color="#E5E5E5">uncle 2017</font>

3
00:00:20,570 --> 00:00:23,600
so

4
00:00:21,940 --> 00:00:25,010
this talk<font color="#E5E5E5"> I think</font>

5
00:00:23,600 --> 00:00:26,690
<font color="#CCCCCC">writing shellcode is fun I've</font><font color="#E5E5E5"> been doing</font>

6
00:00:25,010 --> 00:00:28,340
it for<font color="#E5E5E5"> number of years now</font>

7
00:00:26,690 --> 00:00:30,440
<font color="#CCCCCC">and I think it's</font><font color="#E5E5E5"> time to</font><font color="#CCCCCC"> update some of</font>

8
00:00:28,340 --> 00:00:32,360
<font color="#E5E5E5">the publicly</font><font color="#CCCCCC"> available</font><font color="#E5E5E5"> shellcode</font><font color="#CCCCCC"> and</font>

9
00:00:30,440 --> 00:00:34,100
ideas<font color="#E5E5E5"> that we have out there and so</font>

10
00:00:32,360 --> 00:00:36,080
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> basically two parts</font><font color="#E5E5E5"> let's talk</font>

11
00:00:34,100 --> 00:00:38,210
there's a background<font color="#CCCCCC"> and then we're</font>

12
00:00:36,080 --> 00:00:40,940
going<font color="#CCCCCC"> to go</font><font color="#E5E5E5"> into some of the actual more</font>

13
00:00:38,210 --> 00:00:44,870
fun topics<font color="#E5E5E5"> so today I'm going to be</font>

14
00:00:40,940 --> 00:00:48,620
targeting<font color="#E5E5E5"> sequence hash API</font><font color="#CCCCCC"> it's either</font>

15
00:00:44,870 --> 00:00:50,720
called<font color="#E5E5E5"> the the hash API</font><font color="#CCCCCC"> Metasploit</font>

16
00:00:48,620 --> 00:00:52,339
<font color="#E5E5E5">payload hash does anybody who knows who</font>

17
00:00:50,720 --> 00:00:55,339
<font color="#CCCCCC">that what that is out there</font><font color="#E5E5E5"> anybody</font>

18
00:00:52,340 --> 00:00:58,870
hands<font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> hands</font><font color="#CCCCCC"> okay so it uses a</font>

19
00:00:55,340 --> 00:01:02,180
<font color="#E5E5E5">four byte hash</font><font color="#CCCCCC"> basically a thirteen bit</font>

20
00:00:58,870 --> 00:01:05,149
<font color="#CCCCCC">roar instruction or simply rotate and it</font>

21
00:01:02,180 --> 00:01:07,760
<font color="#E5E5E5">has roots that go back</font><font color="#CCCCCC"> to 2003 from</font>

22
00:01:05,150 --> 00:01:11,060
<font color="#CCCCCC">escapes</font><font color="#E5E5E5"> understanding window shell code</font>

23
00:01:07,760 --> 00:01:13,370
paper<font color="#E5E5E5"> and it's really compact really</font>

24
00:01:11,060 --> 00:01:15,640
efficient it's actually<font color="#E5E5E5"> really awesome</font>

25
00:01:13,370 --> 00:01:17,420
because it parses the export table and

26
00:01:15,640 --> 00:01:18,770
it works like this

27
00:01:17,420 --> 00:01:21,200
let<font color="#E5E5E5"> me just go ahead and explain</font><font color="#CCCCCC"> to you</font>

28
00:01:18,770 --> 00:01:24,170
if so what does is of<font color="#CCCCCC"> the call over the</font>

29
00:01:21,200 --> 00:01:27,920
actual hash<font color="#CCCCCC"> API it goes into the actual</font>

30
00:01:24,170 --> 00:01:31,009
<font color="#E5E5E5">payload logic and then it there there's</font>

31
00:01:27,920 --> 00:01:35,119
a very<font color="#CCCCCC"> strict</font><font color="#E5E5E5"> API how this works it will</font>

32
00:01:31,009 --> 00:01:37,159
pop the return address into EVP and so

33
00:01:35,119 --> 00:01:38,960
<font color="#E5E5E5">it'll push everything</font><font color="#CCCCCC"> for x86 so push</font>

34
00:01:37,159 --> 00:01:40,789
everything<font color="#CCCCCC"> onto the stack and then</font><font color="#E5E5E5"> it</font>

35
00:01:38,960 --> 00:01:44,389
will make<font color="#CCCCCC"> a call to EBP so it goes into</font>

36
00:01:40,789 --> 00:01:47,060
the hash<font color="#E5E5E5"> API itself then it's going to</font>

37
00:01:44,390 --> 00:01:50,509
parse the export address table<font color="#CCCCCC"> and jump</font>

38
00:01:47,060 --> 00:01:53,929
into<font color="#E5E5E5"> the windows</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> return</font>

39
00:01:50,509 --> 00:01:55,939
<font color="#E5E5E5">back to the payload logic and it will</font>

40
00:01:53,929 --> 00:01:59,060
continue<font color="#CCCCCC"> until</font><font color="#E5E5E5"> there's no more payload</font>

41
00:01:55,939 --> 00:02:02,779
logic<font color="#CCCCCC"> and you have done whatever you</font>

42
00:01:59,060 --> 00:02:05,630
wanted<font color="#CCCCCC"> to do so how do you defend some</font>

43
00:02:02,780 --> 00:02:08,179
defeats<font color="#E5E5E5"> now remember I don't I don't</font>

44
00:02:05,630 --> 00:02:11,329
know<font color="#E5E5E5"> if I mentioned it</font><font color="#CCCCCC"> but the the hash</font>

45
00:02:08,179 --> 00:02:14,750
API came out in August<font color="#E5E5E5"> 2009</font><font color="#CCCCCC"> okay</font>

46
00:02:11,330 --> 00:02:17,150
so<font color="#E5E5E5"> just keep</font><font color="#CCCCCC"> that in</font><font color="#E5E5E5"> mind</font><font color="#CCCCCC"> you can defeat</font>

47
00:02:14,750 --> 00:02:19,310
the hash API with<font color="#E5E5E5"> Emmet I mean there's</font>

48
00:02:17,150 --> 00:02:22,400
many many<font color="#E5E5E5"> mitigations in Emmet right and</font>

49
00:02:19,310 --> 00:02:24,200
if you can get to the payload<font color="#CCCCCC"> you have</font>

50
00:02:22,400 --> 00:02:25,400
to bypass<font color="#CCCCCC"> a</font><font color="#E5E5E5"> number of things there's</font>

51
00:02:24,200 --> 00:02:26,780
going to be a<font color="#E5E5E5"> couple things to stop you</font>

52
00:02:25,400 --> 00:02:31,820
<font color="#CCCCCC">and we're</font><font color="#E5E5E5"> going to go into</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there's</font>

53
00:02:26,780 --> 00:02:33,820
also<font color="#CCCCCC"> a jitter banality butcher names</font>

54
00:02:31,820 --> 00:02:36,049
<font color="#CCCCCC">that's my job</font>

55
00:02:33,820 --> 00:02:37,410
but this<font color="#CCCCCC"> Franck article is great because</font>

56
00:02:36,050 --> 00:02:40,740
it talks about

57
00:02:37,410 --> 00:02:42,240
hash collisions<font color="#E5E5E5"> and there was actually a</font>

58
00:02:40,740 --> 00:02:44,130
tool that<font color="#E5E5E5"> came out</font><font color="#CCCCCC"> called halting</font>

59
00:02:42,240 --> 00:02:47,580
attacks via obstructing configurations

60
00:02:44,130 --> 00:02:50,430
and it was a DARPA<font color="#E5E5E5"> fast-track tool that</font>

61
00:02:47,580 --> 00:02:52,380
was made by<font color="#E5E5E5"> digital operatives and what</font>

62
00:02:50,430 --> 00:02:55,020
it does it<font color="#CCCCCC"> will inject a dll in the</font>

63
00:02:52,380 --> 00:02:58,799
first loaded modules list and it<font color="#E5E5E5"> will</font>

64
00:02:55,020 --> 00:03:00,630
contain all<font color="#E5E5E5"> pre computed collisions so</font>

65
00:02:58,800 --> 00:03:02,730
that once<font color="#E5E5E5"> you started walk-in the export</font>

66
00:03:00,630 --> 00:03:05,160
table<font color="#E5E5E5"> you would crash instead of getting</font>

67
00:03:02,730 --> 00:03:06,660
<font color="#E5E5E5">successful exploitation and then there's</font>

68
00:03:05,160 --> 00:03:07,590
control<font color="#E5E5E5"> flow guard return flow guard and</font>

69
00:03:06,660 --> 00:03:09,240
we're not<font color="#E5E5E5"> really going to talk about</font>

70
00:03:07,590 --> 00:03:14,180
that in this talk<font color="#E5E5E5"> because it's a</font>

71
00:03:09,240 --> 00:03:17,430
different<font color="#CCCCCC"> beast so specifically I think</font>

72
00:03:14,180 --> 00:03:21,420
<font color="#CCCCCC">af more than collar were introduced to</font>

73
00:03:17,430 --> 00:03:23,760
<font color="#E5E5E5">stop the hash</font><font color="#CCCCCC"> api call</font><font color="#E5E5E5"> if you if you see</font>

74
00:03:21,420 --> 00:03:26,940
here it was<font color="#E5E5E5"> introduced in 2010 you</font><font color="#CCCCCC"> know</font>

75
00:03:23,760 --> 00:03:30,179
<font color="#E5E5E5">like very quickly after and uh it</font>

76
00:03:26,940 --> 00:03:34,050
<font color="#E5E5E5">basically stops the reading of export</font>

77
00:03:30,180 --> 00:03:36,960
table via<font color="#CCCCCC"> hardware breakpoints</font><font color="#E5E5E5"> and it's</font>

78
00:03:34,050 --> 00:03:40,710
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> cool it worked</font><font color="#E5E5E5"> pretty well</font><font color="#CCCCCC"> for a</font>

79
00:03:36,960 --> 00:03:44,100
couple<font color="#CCCCCC"> years</font><font color="#E5E5E5"> but and then they added in</font>

80
00:03:40,710 --> 00:03:48,300
<font color="#E5E5E5">2014 the plus and that includes kernel</font>

81
00:03:44,100 --> 00:03:51,120
<font color="#E5E5E5">base so the</font><font color="#CCCCCC"> collar that was introduced</font>

82
00:03:48,300 --> 00:03:54,330
in 2013<font color="#E5E5E5"> and what that does it blocks any</font>

83
00:03:51,120 --> 00:03:57,420
returns or jumps directly<font color="#E5E5E5"> into a</font><font color="#CCCCCC"> Windows</font>

84
00:03:54,330 --> 00:03:59,910
<font color="#E5E5E5">API so it's more of an anti</font><font color="#CCCCCC"> rob but</font><font color="#E5E5E5"> if</font>

85
00:03:57,420 --> 00:04:02,760
you<font color="#E5E5E5"> remember when I quickly explain how</font>

86
00:03:59,910 --> 00:04:05,459
the hash API works<font color="#E5E5E5"> it does a jump from</font>

87
00:04:02,760 --> 00:04:07,920
<font color="#E5E5E5">the hash API into the payload so these</font>

88
00:04:05,459 --> 00:04:10,830
two protections actually<font color="#CCCCCC"> mitigates</font>

89
00:04:07,920 --> 00:04:14,790
against the the hash<font color="#CCCCCC"> API</font><font color="#E5E5E5"> itself because</font>

90
00:04:10,830 --> 00:04:18,840
of it doesn't<font color="#E5E5E5"> jump into the Windows API</font>

91
00:04:14,790 --> 00:04:20,459
<font color="#E5E5E5">so technically um</font><font color="#CCCCCC"> Ettore met i</font>

92
00:04:18,839 --> 00:04:23,969
<font color="#CCCCCC">pronounced</font><font color="#E5E5E5"> it two different ways</font>

93
00:04:20,459 --> 00:04:27,000
however<font color="#CCCCCC"> i'm doing it is considered end</font>

94
00:04:23,970 --> 00:04:30,570
of life<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> going to end july 31st</font>

95
00:04:27,000 --> 00:04:32,220
2018<font color="#E5E5E5"> but it still works and you can see</font>

96
00:04:30,570 --> 00:04:35,340
<font color="#CCCCCC">I say it depends on your threat model</font>

97
00:04:32,220 --> 00:04:38,820
because this is the recent tor browser

98
00:04:35,340 --> 00:04:40,950
exploit<font color="#E5E5E5"> versus</font><font color="#CCCCCC"> MN so if some of</font><font color="#E5E5E5"> these</font>

99
00:04:38,820 --> 00:04:42,840
<font color="#E5E5E5">people</font><font color="#CCCCCC"> that were doing the things that</font>

100
00:04:40,950 --> 00:04:44,760
<font color="#E5E5E5">they should have been doing had</font><font color="#CCCCCC"> Emmit</font>

101
00:04:42,840 --> 00:04:48,419
<font color="#E5E5E5">they wouldn't even gotten to the payload</font>

102
00:04:44,760 --> 00:04:50,240
<font color="#E5E5E5">because this is a stack pivot mitigation</font>

103
00:04:48,419 --> 00:04:52,250
right so it

104
00:04:50,240 --> 00:04:56,289
they're<font color="#CCCCCC"> using</font><font color="#E5E5E5"> Sachdeva to get to the</font>

105
00:04:52,250 --> 00:04:58,940
payload<font color="#E5E5E5"> and so if if they had a better</font>

106
00:04:56,289 --> 00:05:00,520
payload or<font color="#E5E5E5"> paid more for the payload</font>

107
00:04:58,940 --> 00:05:04,130
they wouldn't have this issue right so

108
00:05:00,520 --> 00:05:07,340
<font color="#CCCCCC">Emmet does still work and it's kind of</font>

109
00:05:04,130 --> 00:05:09,680
the case where it's like the the iPhone

110
00:05:07,340 --> 00:05:11,508
in your pocket<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it's easy to</font>

111
00:05:09,680 --> 00:05:14,210
<font color="#CCCCCC">implement versus control flow guard</font>

112
00:05:11,509 --> 00:05:15,740
where developers have to compile it in I

113
00:05:14,210 --> 00:05:19,669
think<font color="#CCCCCC"> edge</font><font color="#E5E5E5"> is the only browser that has</font>

114
00:05:15,740 --> 00:05:25,250
it right<font color="#E5E5E5"> now so how do you there's been</font>

115
00:05:19,669 --> 00:05:27,680
several bypasses for<font color="#E5E5E5"> Emmet af+ at</font>

116
00:05:25,250 --> 00:05:30,199
<font color="#CCCCCC">skyline on his skyper blog</font><font color="#E5E5E5"> I had to</font>

117
00:05:27,680 --> 00:05:32,900
actually<font color="#E5E5E5"> go to archive.org</font><font color="#CCCCCC"> because the</font>

118
00:05:30,199 --> 00:05:35,000
blog is no longer up and I'm sad<font color="#E5E5E5"> it's a</font>

119
00:05:32,900 --> 00:05:39,888
great it was a great<font color="#E5E5E5"> blog and he</font>

120
00:05:35,000 --> 00:05:41,960
described a ret<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> C style</font><font color="#CCCCCC"> bypass</font>

121
00:05:39,889 --> 00:05:44,449
he's an NC dll and<font color="#CCCCCC"> I believe</font><font color="#E5E5E5"> those hard</font>

122
00:05:41,960 --> 00:05:45,620
coded addresses and my slides are gonna

123
00:05:44,449 --> 00:05:47,120
<font color="#E5E5E5">be available</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the links are in there</font>

124
00:05:45,620 --> 00:05:51,259
if you want<font color="#E5E5E5"> to check it out and then</font>

125
00:05:47,120 --> 00:05:53,870
there's a<font color="#CCCCCC"> pitot Porter Peter he also had</font>

126
00:05:51,259 --> 00:05:57,800
a blog post on<font color="#CCCCCC"> erasing the hardware</font>

127
00:05:53,870 --> 00:05:59,570
breakpoints and using<font color="#CCCCCC"> um</font><font color="#E5E5E5"> NC continue and</font>

128
00:05:57,800 --> 00:06:01,729
it would you know<font color="#CCCCCC"> even you</font><font color="#E5E5E5"> know more</font>

129
00:05:59,570 --> 00:06:03,919
<font color="#CCCCCC">hardware breakpoints no more export</font>

130
00:06:01,729 --> 00:06:08,599
address filtering and<font color="#E5E5E5"> then offensive</font>

131
00:06:03,919 --> 00:06:11,570
<font color="#CCCCCC">security had a very similar bypass and</font>

132
00:06:08,599 --> 00:06:14,690
they would<font color="#CCCCCC"> there's a Emmett function</font>

133
00:06:11,570 --> 00:06:17,860
that would<font color="#E5E5E5"> call a DW set</font><font color="#CCCCCC"> contact thread</font>

134
00:06:14,690 --> 00:06:21,199
which<font color="#E5E5E5"> would also zero the the</font><font color="#CCCCCC"> hardware</font>

135
00:06:17,860 --> 00:06:25,370
breakpoints<font color="#E5E5E5"> so in the caller check is</font>

136
00:06:21,199 --> 00:06:27,259
much easier<font color="#E5E5E5"> Jared Monti in 2014 he he</font>

137
00:06:25,370 --> 00:06:29,419
<font color="#CCCCCC">just all he had to do if you get</font><font color="#E5E5E5"> the</font>

138
00:06:27,259 --> 00:06:31,219
address<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a library a he's moving into</font>

139
00:06:29,419 --> 00:06:32,659
<font color="#CCCCCC">a register and then do you reference it</font>

140
00:06:31,219 --> 00:06:36,530
back into<font color="#E5E5E5"> the register even call it</font>

141
00:06:32,659 --> 00:06:39,169
directly<font color="#E5E5E5"> so</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> easy now</font><font color="#CCCCCC"> after</font>

142
00:06:36,530 --> 00:06:41,388
reading Jared's paper<font color="#E5E5E5"> I decided to put</font>

143
00:06:39,169 --> 00:06:42,889
this<font color="#CCCCCC"> in to be DF</font><font color="#E5E5E5"> itself in back of a</font>

144
00:06:41,389 --> 00:06:45,319
factory<font color="#CCCCCC"> and so I made some import</font>

145
00:06:42,889 --> 00:06:47,270
address table payloads<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would use</font>

146
00:06:45,319 --> 00:06:50,690
the actual<font color="#CCCCCC"> funks that were in the import</font>

147
00:06:47,270 --> 00:06:54,440
table<font color="#E5E5E5"> directly and this bypass</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> Emmet</font>

148
00:06:50,690 --> 00:06:56,569
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> AF and caller checks</font><font color="#E5E5E5"> and later</font>

149
00:06:54,440 --> 00:06:58,580
on I actually<font color="#E5E5E5"> added patching of the</font>

150
00:06:56,569 --> 00:07:02,340
import address table<font color="#E5E5E5"> so that I could add</font>

151
00:06:58,580 --> 00:07:06,659
whatever api's I wanted<font color="#CCCCCC"> anytime</font>

152
00:07:02,340 --> 00:07:08,400
but you know this<font color="#CCCCCC"> wasn't um everything I</font>

153
00:07:06,660 --> 00:07:09,900
wanted<font color="#E5E5E5"> to do because I wanted to</font>

154
00:07:08,400 --> 00:07:12,479
actually do some position independent

155
00:07:09,900 --> 00:07:14,760
<font color="#E5E5E5">import address table</font><font color="#CCCCCC"> payloads to</font><font color="#E5E5E5"> see</font>

156
00:07:12,480 --> 00:07:16,820
what would<font color="#E5E5E5"> happen so this was you</font><font color="#CCCCCC"> know</font>

157
00:07:14,760 --> 00:07:19,940
<font color="#E5E5E5">fast forward December 2014</font>

158
00:07:16,820 --> 00:07:22,170
so I do some<font color="#CCCCCC"> research and looking</font><font color="#E5E5E5"> around</font>

159
00:07:19,940 --> 00:07:23,520
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know what what's been done prior</font>

160
00:07:22,170 --> 00:07:25,230
work in<font color="#E5E5E5"> Sosuke</font>

161
00:07:23,520 --> 00:07:27,090
<font color="#CCCCCC">Matt Miller I think you might be</font><font color="#E5E5E5"> on the</font>

162
00:07:25,230 --> 00:07:29,540
email team I'm not<font color="#CCCCCC"> sure I know he works</font>

163
00:07:27,090 --> 00:07:30,979
in Microsoft<font color="#E5E5E5"> on the mitigation work but</font>

164
00:07:29,540 --> 00:07:34,070
[Music]

165
00:07:30,980 --> 00:07:37,020
he had in his paper he talked<font color="#CCCCCC"> about</font>

166
00:07:34,070 --> 00:07:38,940
parsing the import address table<font color="#CCCCCC"> not</font>

167
00:07:37,020 --> 00:07:41,880
import<font color="#CCCCCC"> address table</font><font color="#E5E5E5"> export address</font>

168
00:07:38,940 --> 00:07:44,160
table<font color="#E5E5E5"> and loading a DLL being load</font>

169
00:07:41,880 --> 00:07:46,920
library<font color="#CCCCCC"> loading a DLL so that you had</font>

170
00:07:44,160 --> 00:07:49,800
everything<font color="#E5E5E5"> you needed</font><font color="#CCCCCC"> in that</font><font color="#E5E5E5"> one DLL</font>

171
00:07:46,920 --> 00:07:53,580
like<font color="#CCCCCC"> ws2 32 and you could</font><font color="#E5E5E5"> just call the</font>

172
00:07:49,800 --> 00:07:55,110
api's directly that<font color="#E5E5E5"> DLL</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> a couple</font>

173
00:07:53,580 --> 00:07:58,680
<font color="#E5E5E5">issues</font><font color="#CCCCCC"> with it if you look</font><font color="#E5E5E5"> at it from a</font>

174
00:07:55,110 --> 00:08:00,230
perspective<font color="#E5E5E5"> because you get the parts to</font>

175
00:07:58,680 --> 00:08:03,390
export address table<font color="#E5E5E5"> so that was kind of</font>

176
00:08:00,230 --> 00:08:06,300
not a non-starter<font color="#CCCCCC"> and then there was a</font>

177
00:08:03,390 --> 00:08:08,099
<font color="#E5E5E5">PTR</font><font color="#CCCCCC"> Peto I mean this guy</font><font color="#E5E5E5"> has done</font><font color="#CCCCCC"> a lot</font>

178
00:08:06,300 --> 00:08:12,330
<font color="#CCCCCC">of work it's pretty</font><font color="#E5E5E5"> amazing</font>

179
00:08:08,100 --> 00:08:14,490
same<font color="#E5E5E5"> frack article he talks about import</font>

180
00:08:12,330 --> 00:08:16,140
<font color="#CCCCCC">address table parser and that was enough</font>

181
00:08:14,490 --> 00:08:19,110
to<font color="#E5E5E5"> get me started</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> here's the actual</font>

182
00:08:16,140 --> 00:08:20,340
code<font color="#CCCCCC"> and I don't</font><font color="#E5E5E5"> know what operating</font>

183
00:08:19,110 --> 00:08:25,260
systems is for I think<font color="#CCCCCC"> I might have an</font>

184
00:08:20,340 --> 00:08:27,599
<font color="#CCCCCC">XP service pack 1 or 2 but it it got</font><font color="#E5E5E5"> it</font>

185
00:08:25,260 --> 00:08:29,510
got<font color="#E5E5E5"> my head going where I can understand</font>

186
00:08:27,600 --> 00:08:33,780
what I wanted to do so I wrote my<font color="#CCCCCC"> own</font>

187
00:08:29,510 --> 00:08:37,200
<font color="#E5E5E5">stub and basically what it does it finds</font>

188
00:08:33,780 --> 00:08:38,610
PD P header<font color="#E5E5E5"> import table</font><font color="#CCCCCC"> r-va</font>

189
00:08:37,200 --> 00:08:42,000
and then loops through<font color="#E5E5E5"> and finds</font>

190
00:08:38,610 --> 00:08:45,270
kernel32 but it used be empty string

191
00:08:42,000 --> 00:08:47,880
matching right<font color="#CCCCCC"> and then you go into</font><font color="#E5E5E5"> the</font>

192
00:08:45,270 --> 00:08:49,290
next slide<font color="#CCCCCC"> I add next</font><font color="#E5E5E5"> I'll go through</font>

193
00:08:47,880 --> 00:08:51,990
and<font color="#E5E5E5"> find load library</font><font color="#CCCCCC"> and get process</font>

194
00:08:49,290 --> 00:08:54,510
<font color="#E5E5E5">address but what I added at the</font><font color="#CCCCCC"> top is a</font>

195
00:08:51,990 --> 00:08:55,740
set<font color="#CCCCCC"> bounds check because</font><font color="#E5E5E5"> it once you're</font>

196
00:08:54,510 --> 00:08:58,080
if you're looping through the import

197
00:08:55,740 --> 00:08:59,550
table<font color="#E5E5E5"> sometimes the memory address we're</font>

198
00:08:58,080 --> 00:09:04,290
going to read is out of<font color="#E5E5E5"> bounds</font>

199
00:08:59,550 --> 00:09:06,240
and so I added a ff0000<font color="#CCCCCC"> check to make</font>

200
00:09:04,290 --> 00:09:08,849
sure<font color="#CCCCCC"> that I did</font><font color="#E5E5E5"> not go</font><font color="#CCCCCC"> out of bounds so</font>

201
00:09:06,240 --> 00:09:10,680
this actually worked<font color="#E5E5E5"> pretty good it was</font>

202
00:09:08,850 --> 00:09:13,680
very<font color="#CCCCCC"> stable and so I bolted on a</font><font color="#E5E5E5"> reverse</font>

203
00:09:10,680 --> 00:09:14,459
<font color="#E5E5E5">TCP shell and I bypassed caller</font><font color="#CCCCCC"> eaf</font>

204
00:09:13,680 --> 00:09:16,739
checks and

205
00:09:14,460 --> 00:09:18,300
and the<font color="#CCCCCC"> POCs</font><font color="#E5E5E5"> I was running and so then I</font>

206
00:09:16,740 --> 00:09:21,450
was<font color="#E5E5E5"> like others in school you met that</font>

207
00:09:18,300 --> 00:09:22,290
<font color="#E5E5E5">I'll email the</font><font color="#CCCCCC"> EMA team</font><font color="#E5E5E5"> and this was</font>

208
00:09:21,450 --> 00:09:25,980
<font color="#CCCCCC">their</font><font color="#E5E5E5"> response</font>

209
00:09:22,290 --> 00:09:27,810
pretty much<font color="#CCCCCC"> so</font><font color="#E5E5E5"> apparently they knew</font>

210
00:09:25,980 --> 00:09:29,820
about import table parsers I mean they

211
00:09:27,810 --> 00:09:32,459
<font color="#E5E5E5">get they get millions of crash dumps a</font>

212
00:09:29,820 --> 00:09:34,950
month I'm sure so they have they had to

213
00:09:32,460 --> 00:09:37,740
know right<font color="#E5E5E5"> and so my POC was limited</font>

214
00:09:34,950 --> 00:09:39,690
just to<font color="#E5E5E5"> load</font><font color="#CCCCCC"> library a and get processed</font>

215
00:09:37,740 --> 00:09:41,910
<font color="#E5E5E5">address in the import table of the main</font>

216
00:09:39,690 --> 00:09:45,180
module so I didn't do anything really

217
00:09:41,910 --> 00:09:47,250
exciting<font color="#E5E5E5"> so this was December 2014 and I</font>

218
00:09:45,180 --> 00:09:49,319
just put<font color="#E5E5E5"> it</font><font color="#CCCCCC"> like on a file system and</font>

219
00:09:47,250 --> 00:09:51,740
<font color="#E5E5E5">just let us sit there</font><font color="#CCCCCC"> just kind of you</font>

220
00:09:49,320 --> 00:09:54,860
<font color="#CCCCCC">know went back to real life and work</font><font color="#E5E5E5"> and</font>

221
00:09:51,740 --> 00:09:57,960
I'll just you know<font color="#CCCCCC"> look into</font><font color="#E5E5E5"> Twitter and</font>

222
00:09:54,860 --> 00:10:02,400
Casey Smith<font color="#E5E5E5"> it Casey Smith there's a lot</font>

223
00:09:57,960 --> 00:10:03,750
of he<font color="#E5E5E5"> executes he</font><font color="#CCCCCC"> execute code and</font>

224
00:10:02,400 --> 00:10:05,310
places<font color="#E5E5E5"> that you're not</font><font color="#CCCCCC"> expecting it</font>

225
00:10:03,750 --> 00:10:07,920
they're like<font color="#CCCCCC"> signed binaries like</font><font color="#E5E5E5"> I must</font>

226
00:10:05,310 --> 00:10:09,660
build<font color="#E5E5E5"> and stuff like that so</font><font color="#CCCCCC"> he bypasses</font>

227
00:10:07,920 --> 00:10:12,860
whitelisting<font color="#E5E5E5"> solutions I see him talking</font>

228
00:10:09,660 --> 00:10:15,000
<font color="#CCCCCC">about EAF mitigations</font><font color="#E5E5E5"> getting flagged in</font>

229
00:10:12,860 --> 00:10:15,720
<font color="#E5E5E5">Excel and I knew exactly what his</font>

230
00:10:15,000 --> 00:10:18,990
problem was

231
00:10:15,720 --> 00:10:21,480
so<font color="#E5E5E5"> I</font><font color="#CCCCCC"> sending</font><font color="#E5E5E5"> my import address table</font>

232
00:10:18,990 --> 00:10:23,730
stub<font color="#CCCCCC"> then we started collaborating and</font>

233
00:10:21,480 --> 00:10:25,500
<font color="#E5E5E5">decides you can be up today and there's</font>

234
00:10:23,730 --> 00:10:28,590
a link there<font color="#E5E5E5"> you can go see when I</font>

235
00:10:25,500 --> 00:10:30,980
release the code to him and so<font color="#CCCCCC"> he went</font>

236
00:10:28,590 --> 00:10:32,190
crazy this he was using everywhere like

237
00:10:30,980 --> 00:10:35,370
everywhere

238
00:10:32,190 --> 00:10:37,620
however we tried using<font color="#CCCCCC"> powershell which</font>

239
00:10:35,370 --> 00:10:39,090
<font color="#CCCCCC">i thought personally</font><font color="#E5E5E5"> was strange because</font>

240
00:10:37,620 --> 00:10:40,800
if you're running<font color="#E5E5E5"> powershell you have</font>

241
00:10:39,090 --> 00:10:43,530
full<font color="#E5E5E5"> access to the windows api anyway</font>

242
00:10:40,800 --> 00:10:47,609
but sometimes since<font color="#CCCCCC"> PSCs have small</font>

243
00:10:43,530 --> 00:10:49,860
constraints so it didn't have load

244
00:10:47,610 --> 00:10:53,060
library<font color="#E5E5E5"> load library a in the import</font>

245
00:10:49,860 --> 00:10:55,140
table so we<font color="#E5E5E5"> started talking about</font><font color="#CCCCCC"> it and</font>

246
00:10:53,060 --> 00:10:57,420
<font color="#E5E5E5">we're going</font><font color="#CCCCCC"> to use a loaded module</font>

247
00:10:55,140 --> 00:10:59,670
another dll in memory so<font color="#CCCCCC"> he wrote in</font>

248
00:10:57,420 --> 00:11:02,969
addition that<font color="#E5E5E5"> used the same four bytes</font>

249
00:10:59,670 --> 00:11:05,010
<font color="#CCCCCC">hash to find dll</font><font color="#E5E5E5"> and in the loaded</font>

250
00:11:02,970 --> 00:11:08,310
modules<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it so you can need to</font><font color="#E5E5E5"> know</font>

251
00:11:05,010 --> 00:11:13,050
your target<font color="#E5E5E5"> he</font><font color="#CCCCCC"> borrowed code from the</font>

252
00:11:08,310 --> 00:11:15,869
<font color="#CCCCCC">city of</font><font color="#E5E5E5"> your hash api</font><font color="#CCCCCC"> stub and so the</font>

253
00:11:13,050 --> 00:11:18,300
havoc protection to defeat this because

254
00:11:15,870 --> 00:11:19,980
we did<font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> name that's what we're using</font>

255
00:11:18,300 --> 00:11:22,020
not just<font color="#CCCCCC"> the short name because that</font>

256
00:11:19,980 --> 00:11:24,480
wouldn't<font color="#CCCCCC"> work you would actually have</font><font color="#E5E5E5"> to</font>

257
00:11:22,020 --> 00:11:27,250
throw up<font color="#CCCCCC"> or not throw up but uh inserts</font>

258
00:11:24,480 --> 00:11:29,800
<font color="#E5E5E5">mini mini dll's</font><font color="#CCCCCC"> to</font>

259
00:11:27,250 --> 00:11:32,340
<font color="#CCCCCC">a</font><font color="#E5E5E5"> collision</font><font color="#CCCCCC"> and what you're going to see</font>

260
00:11:29,800 --> 00:11:35,709
is there<font color="#E5E5E5"> are many dll's at work</font>

261
00:11:32,340 --> 00:11:39,070
so we were both<font color="#CCCCCC"> happy with this so we</font>

262
00:11:35,710 --> 00:11:40,750
had<font color="#CCCCCC"> to</font><font color="#E5E5E5"> two steps</font><font color="#CCCCCC"> and we started talking</font>

263
00:11:39,070 --> 00:11:42,520
<font color="#CCCCCC">about it we're like we knew by this</font>

264
00:11:40,750 --> 00:11:45,220
point that if<font color="#E5E5E5"> you had get</font><font color="#CCCCCC"> processed</font>

265
00:11:42,520 --> 00:11:49,230
<font color="#CCCCCC">address anywhere in your module space</font>

266
00:11:45,220 --> 00:11:52,570
<font color="#CCCCCC">any dll</font><font color="#E5E5E5"> you could get low library a by</font>

267
00:11:49,230 --> 00:11:54,490
getting the<font color="#E5E5E5"> kernel32 handle you know and</font>

268
00:11:52,570 --> 00:11:57,130
then call and get processed address with

269
00:11:54,490 --> 00:11:58,510
a string load<font color="#CCCCCC"> library a and then you can</font>

270
00:11:57,130 --> 00:12:01,510
do you<font color="#E5E5E5"> have full</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> to the windows</font>

271
00:11:58,510 --> 00:12:04,120
<font color="#CCCCCC">API</font><font color="#E5E5E5"> so and then to bypass</font><font color="#CCCCCC"> caller but</font><font color="#E5E5E5"> we</font>

272
00:12:01,510 --> 00:12:06,189
did is we you know load library<font color="#E5E5E5"> A's</font><font color="#CCCCCC"> in</font>

273
00:12:04,120 --> 00:12:08,380
the ax<font color="#CCCCCC"> and we remove</font><font color="#E5E5E5"> it we push it on</font>

274
00:12:06,190 --> 00:12:10,150
the stack and then<font color="#CCCCCC"> move the pointer tbx</font>

275
00:12:08,380 --> 00:12:15,130
and then we call<font color="#CCCCCC"> it through an indirect</font>

276
00:12:10,150 --> 00:12:18,370
pointer so now we had four<font color="#E5E5E5"> stubs that we</font>

277
00:12:15,130 --> 00:12:20,439
could use so<font color="#E5E5E5"> that was pretty good we</font>

278
00:12:18,370 --> 00:12:23,380
<font color="#E5E5E5">were excited</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that but</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to</font>

279
00:12:20,440 --> 00:12:26,050
<font color="#E5E5E5">know where I could</font><font color="#CCCCCC"> use them</font><font color="#E5E5E5"> so I wrote</font>

280
00:12:23,380 --> 00:12:27,790
some scripts<font color="#E5E5E5"> that would go through in</font>

281
00:12:26,050 --> 00:12:29,170
<font color="#E5E5E5">find anywhere</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> library and get</font>

282
00:12:27,790 --> 00:12:31,240
<font color="#E5E5E5">process address was on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> windows</font>

283
00:12:29,170 --> 00:12:33,160
system<font color="#E5E5E5"> these were clean systems</font>

284
00:12:31,240 --> 00:12:34,630
nothing really installed<font color="#E5E5E5"> there is going</font>

285
00:12:33,160 --> 00:12:39,969
<font color="#E5E5E5">to be some overlap</font><font color="#CCCCCC"> because you have sis</font>

286
00:12:34,630 --> 00:12:41,920
well you know system 32<font color="#E5E5E5"> and but this is</font>

287
00:12:39,970 --> 00:12:44,320
a lot you can<font color="#E5E5E5"> see that Microsoft has</font>

288
00:12:41,920 --> 00:12:46,390
made<font color="#E5E5E5"> a concerned or somewhat of an</font>

289
00:12:44,320 --> 00:12:49,470
effort<font color="#E5E5E5"> to decrease</font><font color="#CCCCCC"> the library and get</font>

290
00:12:46,390 --> 00:12:52,330
process address<font color="#CCCCCC"> in the import table</font>

291
00:12:49,470 --> 00:12:54,550
which is<font color="#E5E5E5"> just you know pretty cool and</font>

292
00:12:52,330 --> 00:12:55,990
<font color="#E5E5E5">so we had a lot of information</font><font color="#CCCCCC"> we</font>

293
00:12:54,550 --> 00:12:59,099
thought<font color="#E5E5E5"> this was cool so we're going to</font>

294
00:12:55,990 --> 00:13:01,600
submit<font color="#CCCCCC"> to a conference and</font><font color="#E5E5E5"> this was</font>

295
00:12:59,100 --> 00:13:04,380
about May<font color="#E5E5E5"> and we're like all</font><font color="#CCCCCC"> right I</font>

296
00:13:01,600 --> 00:13:07,210
think<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> ready cement and then June</font>

297
00:13:04,380 --> 00:13:10,780
my world fell<font color="#CCCCCC"> apart</font><font color="#E5E5E5"> there was the</font>

298
00:13:07,210 --> 00:13:12,940
angular exploit kit that used get

299
00:13:10,780 --> 00:13:15,339
<font color="#E5E5E5">process address</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> 32 import</font>

300
00:13:12,940 --> 00:13:18,880
address<font color="#CCCCCC"> table and fire I published it</font>

301
00:13:15,339 --> 00:13:22,270
<font color="#CCCCCC">and I almost retired I was</font><font color="#E5E5E5"> pretty</font>

302
00:13:18,880 --> 00:13:23,800
<font color="#CCCCCC">depressed</font><font color="#E5E5E5"> but we decided to go ahead</font>

303
00:13:22,270 --> 00:13:25,390
<font color="#CCCCCC">with a blog post</font><font color="#E5E5E5"> because we</font><font color="#CCCCCC"> wanted</font><font color="#E5E5E5"> to</font>

304
00:13:23,800 --> 00:13:27,550
release<font color="#CCCCCC"> the POC</font><font color="#E5E5E5"> and what one</font><font color="#CCCCCC"> of the</font>

305
00:13:25,390 --> 00:13:32,140
<font color="#E5E5E5">things that we had in the</font><font color="#CCCCCC"> POC is</font><font color="#E5E5E5"> we had</font>

306
00:13:27,550 --> 00:13:33,880
dependency Walker style<font color="#CCCCCC"> what we would do</font>

307
00:13:32,140 --> 00:13:36,130
<font color="#E5E5E5">is part</font><font color="#CCCCCC"> of the script you give it a</font>

308
00:13:33,880 --> 00:13:38,980
binary<font color="#E5E5E5"> that your target is and it would</font>

309
00:13:36,130 --> 00:13:41,050
use the<font color="#CCCCCC"> output from</font><font color="#E5E5E5"> my mind</font>

310
00:13:38,980 --> 00:13:42,670
my scans of load<font color="#CCCCCC"> library across all</font>

311
00:13:41,050 --> 00:13:45,010
<font color="#E5E5E5">these systems and you give it an</font>

312
00:13:42,670 --> 00:13:47,439
operating system<font color="#E5E5E5"> and it would go</font><font color="#CCCCCC"> through</font>

313
00:13:45,010 --> 00:13:49,900
and recursively<font color="#E5E5E5"> look at what is loaded</font>

314
00:13:47,440 --> 00:13:51,460
in every<font color="#E5E5E5"> DLL and</font><font color="#CCCCCC"> it would give</font><font color="#E5E5E5"> you an</font>

315
00:13:49,900 --> 00:13:53,920
<font color="#CCCCCC">option</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> what they're not option but</font>

316
00:13:51,460 --> 00:13:55,900
would tell you what dll's to use and so

317
00:13:53,920 --> 00:13:57,870
it would indent<font color="#E5E5E5"> aesthetically right so</font>

318
00:13:55,900 --> 00:14:01,300
<font color="#CCCCCC">it was actually kind of cool</font><font color="#E5E5E5"> but</font>

319
00:13:57,870 --> 00:14:04,330
wouldn't release<font color="#E5E5E5"> it we left</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of a</font>

320
00:14:01,300 --> 00:14:06,550
bug we didn't put an exit function<font color="#CCCCCC"> those</font>

321
00:14:04,330 --> 00:14:08,290
<font color="#E5E5E5">reverse</font><font color="#CCCCCC"> TCP shell no exit function so it</font>

322
00:14:06,550 --> 00:14:10,599
<font color="#CCCCCC">crashed right away and</font><font color="#E5E5E5"> that was</font>

323
00:14:08,290 --> 00:14:14,230
<font color="#E5E5E5">definitely by design and so we talked</font>

324
00:14:10,600 --> 00:14:16,480
<font color="#CCCCCC">about it we're like you know there there</font>

325
00:14:14,230 --> 00:14:21,310
we want<font color="#E5E5E5"> more payloads we want to be able</font>

326
00:14:16,480 --> 00:14:23,050
<font color="#E5E5E5">to basically reusable</font><font color="#CCCCCC"> Metasploit has but</font>

327
00:14:21,310 --> 00:14:23,920
it's going<font color="#E5E5E5"> to take a lot</font><font color="#CCCCCC"> of work and you</font>

328
00:14:23,050 --> 00:14:25,569
know I<font color="#CCCCCC"> said</font><font color="#E5E5E5"> you know what I'm going</font><font color="#CCCCCC"> to</font>

329
00:14:23,920 --> 00:14:30,579
I'm going<font color="#CCCCCC"> to do this I got some</font><font color="#E5E5E5"> ideas</font>

330
00:14:25,570 --> 00:14:33,160
<font color="#CCCCCC">and that</font><font color="#E5E5E5"> brings us to</font><font color="#CCCCCC"> the fun part I had</font>

331
00:14:30,580 --> 00:14:36,190
two<font color="#E5E5E5"> ideas first I was going to remove</font>

332
00:14:33,160 --> 00:14:37,300
the<font color="#E5E5E5"> steam viewer hash API stub replace</font>

333
00:14:36,190 --> 00:14:40,570
<font color="#E5E5E5">it with something that I didn't know</font>

334
00:14:37,300 --> 00:14:42,880
what okay<font color="#E5E5E5"> or I could</font><font color="#CCCCCC"> build something</font>

335
00:14:40,570 --> 00:14:47,550
that would rewrite<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> payloads for</font>

336
00:14:42,880 --> 00:14:50,740
me and unfortunately<font color="#CCCCCC"> or fortunately</font><font color="#E5E5E5"> I</font>

337
00:14:47,550 --> 00:14:56,020
decided to rewrite all<font color="#CCCCCC"> the things with</font>

338
00:14:50,740 --> 00:14:59,950
automation<font color="#CCCCCC"> and so Metasploit payloads</font>

339
00:14:56,020 --> 00:15:01,540
<font color="#E5E5E5">follow a specific pattern it basically</font>

340
00:14:59,950 --> 00:15:04,000
works where you push<font color="#E5E5E5"> everything onto the</font>

341
00:15:01,540 --> 00:15:06,160
stack this<font color="#CCCCCC"> is this is for the x86 side</font>

342
00:15:04,000 --> 00:15:08,710
the<font color="#E5E5E5"> x64 side is very similar but</font><font color="#CCCCCC"> just</font>

343
00:15:06,160 --> 00:15:10,839
<font color="#E5E5E5">different different calling right so the</font>

344
00:15:08,710 --> 00:15:14,530
last<font color="#E5E5E5"> thing you push is the actual hash</font>

345
00:15:10,840 --> 00:15:18,190
and then you call EBP appreciate forward

346
00:15:14,530 --> 00:15:20,350
and so I devised<font color="#E5E5E5"> this workflow I my</font>

347
00:15:18,190 --> 00:15:21,730
script would take input<font color="#E5E5E5"> either be a</font>

348
00:15:20,350 --> 00:15:24,240
stand-in or from file

349
00:15:21,730 --> 00:15:26,680
<font color="#CCCCCC">I would disassemble</font><font color="#E5E5E5"> and I use capstone</font>

350
00:15:24,240 --> 00:15:29,770
<font color="#E5E5E5">because I use</font><font color="#CCCCCC"> capstone of EDF and</font><font color="#E5E5E5"> it's</font>

351
00:15:26,680 --> 00:15:31,719
really<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use right and then I'll</font>

352
00:15:29,770 --> 00:15:34,300
<font color="#E5E5E5">capture the blocks of instructions and</font>

353
00:15:31,720 --> 00:15:37,060
so every<font color="#E5E5E5"> instruction I would tag with a</font>

354
00:15:34,300 --> 00:15:38,709
unique<font color="#E5E5E5"> identifier saying</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so this</font>

355
00:15:37,060 --> 00:15:40,390
<font color="#E5E5E5">is part of</font><font color="#CCCCCC"> this block so I had</font>

356
00:15:38,710 --> 00:15:43,300
everything<font color="#E5E5E5"> I'll capture the api's I</font>

357
00:15:40,390 --> 00:15:44,530
would capture<font color="#E5E5E5"> control flow I would</font>

358
00:15:43,300 --> 00:15:45,969
actually<font color="#E5E5E5"> go through and when I see a</font>

359
00:15:44,530 --> 00:15:47,890
<font color="#E5E5E5">control flow statement I'll give it a</font>

360
00:15:45,970 --> 00:15:49,930
<font color="#CCCCCC">unique identifier</font><font color="#E5E5E5"> and then I would go</font>

361
00:15:47,890 --> 00:15:51,280
<font color="#E5E5E5">back through and find a location where</font>

362
00:15:49,930 --> 00:15:52,290
<font color="#CCCCCC">that was and I'd slap a unique</font>

363
00:15:51,280 --> 00:15:53,639
identifier on<font color="#E5E5E5"> there so</font>

364
00:15:52,290 --> 00:15:57,329
I could kind<font color="#CCCCCC"> of figure out what was</font>

365
00:15:53,639 --> 00:15:59,070
<font color="#E5E5E5">going on without having</font><font color="#CCCCCC"> to emulation and</font>

366
00:15:57,329 --> 00:16:00,420
I had to protect<font color="#CCCCCC"> low</font><font color="#E5E5E5"> by very a and get</font>

367
00:15:59,070 --> 00:16:02,040
<font color="#E5E5E5">processed</font><font color="#CCCCCC"> sad just</font><font color="#E5E5E5"> from being clobbered</font>

368
00:16:00,420 --> 00:16:03,360
<font color="#E5E5E5">throughout the entire payload and I had</font>

369
00:16:02,040 --> 00:16:07,410
to figure<font color="#E5E5E5"> out how to do that with</font>

370
00:16:03,360 --> 00:16:11,880
<font color="#CCCCCC">automation</font><font color="#E5E5E5"> and I went at it for five</font>

371
00:16:07,410 --> 00:16:13,350
days<font color="#E5E5E5"> straight</font><font color="#CCCCCC"> 1215 hour</font><font color="#E5E5E5"> days</font><font color="#CCCCCC"> and when I</font>

372
00:16:11,880 --> 00:16:15,420
solved the<font color="#CCCCCC"> problem more popped up</font>

373
00:16:13,350 --> 00:16:16,829
because there were some payloads<font color="#E5E5E5"> that</font>

374
00:16:15,420 --> 00:16:18,360
had they weren't very<font color="#E5E5E5"> straightforward</font>

375
00:16:16,829 --> 00:16:22,739
that conditional statements they would

376
00:16:18,360 --> 00:16:25,050
have conditional loops and<font color="#E5E5E5"> I was</font>

377
00:16:22,740 --> 00:16:27,779
<font color="#CCCCCC">crossing the</font><font color="#E5E5E5"> threshold where if I</font><font color="#CCCCCC"> would</font>

378
00:16:25,050 --> 00:16:29,459
just<font color="#E5E5E5"> sat down and wrote these payloads</font>

379
00:16:27,779 --> 00:16:30,750
out I probably<font color="#E5E5E5"> not amount of time I</font>

380
00:16:29,459 --> 00:16:33,388
<font color="#E5E5E5">probably could have knocked out you know</font>

381
00:16:30,750 --> 00:16:35,220
15 to 20 at least<font color="#E5E5E5"> because I could have</font>

382
00:16:33,389 --> 00:16:37,980
some efficiencies getting understanding

383
00:16:35,220 --> 00:16:39,569
repeat processes so I decided just to

384
00:16:37,980 --> 00:16:41,550
burn it<font color="#CCCCCC"> down I'm</font><font color="#E5E5E5"> like I'm done</font>

385
00:16:39,569 --> 00:16:43,589
I'm<font color="#CCCCCC"> going to go to the original</font><font color="#E5E5E5"> idea</font>

386
00:16:41,550 --> 00:16:47,399
that I had the first idea<font color="#E5E5E5"> and that was</font>

387
00:16:43,589 --> 00:16:50,750
<font color="#E5E5E5">to replace the</font><font color="#CCCCCC"> viewers hash API</font><font color="#E5E5E5"> with</font>

388
00:16:47,399 --> 00:16:53,940
something else so what<font color="#CCCCCC"> I came</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> with</font>

389
00:16:50,750 --> 00:16:57,300
was this is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original</font><font color="#E5E5E5"> right you have</font>

390
00:16:53,940 --> 00:17:01,889
the hash API<font color="#E5E5E5"> plus actual payload logic</font>

391
00:16:57,300 --> 00:17:05,209
<font color="#E5E5E5">and I decide</font><font color="#CCCCCC"> to use</font><font color="#E5E5E5"> the import</font><font color="#CCCCCC"> address</font>

392
00:17:01,889 --> 00:17:08,760
table stub and then an offset<font color="#CCCCCC"> table and</font>

393
00:17:05,209 --> 00:17:12,299
because<font color="#CCCCCC"> you have to translate the four</font>

394
00:17:08,760 --> 00:17:13,619
byte hash to something if you're<font color="#E5E5E5"> not</font>

395
00:17:12,299 --> 00:17:15,780
using the export table you have<font color="#CCCCCC"> to</font>

396
00:17:13,619 --> 00:17:18,299
<font color="#E5E5E5">figure out what it</font><font color="#CCCCCC"> is so what I did is I</font>

397
00:17:15,780 --> 00:17:20,790
<font color="#E5E5E5">took all the api's and then I unique</font>

398
00:17:18,299 --> 00:17:24,480
them put them in<font color="#E5E5E5"> the string so but I had</font>

399
00:17:20,790 --> 00:17:28,379
some requirements<font color="#CCCCCC"> I had to</font><font color="#E5E5E5"> had to keep</font>

400
00:17:24,480 --> 00:17:31,020
it really useful in read execute memory

401
00:17:28,380 --> 00:17:34,049
<font color="#E5E5E5">not just read write execute</font><font color="#CCCCCC"> in case I</font>

402
00:17:31,020 --> 00:17:37,918
put it<font color="#E5E5E5"> into an executable where the the</font>

403
00:17:34,049 --> 00:17:41,700
<font color="#CCCCCC">D section</font><font color="#E5E5E5"> was only read execute right so</font>

404
00:17:37,919 --> 00:17:44,100
no no<font color="#E5E5E5"> encoding within the payload itself</font>

405
00:17:41,700 --> 00:17:47,880
<font color="#E5E5E5">without moving it to stack or some other</font>

406
00:17:44,100 --> 00:17:51,540
location<font color="#CCCCCC"> and trying</font><font color="#E5E5E5"> to keep it as</font><font color="#CCCCCC"> small</font>

407
00:17:47,880 --> 00:17:53,700
as<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> now import table parsing is</font>

408
00:17:51,540 --> 00:17:55,210
much more expensive than export table

409
00:17:53,700 --> 00:17:58,210
parsing

410
00:17:55,210 --> 00:18:02,640
and I had to support<font color="#CCCCCC"> any Metasploit code</font>

411
00:17:58,210 --> 00:18:05,320
that used the former hash<font color="#E5E5E5"> API</font><font color="#CCCCCC"> so the the</font>

412
00:18:02,640 --> 00:18:07,929
<font color="#E5E5E5">the first four steps are the</font><font color="#CCCCCC"> same right</font>

413
00:18:05,320 --> 00:18:10,510
<font color="#CCCCCC">check</font><font color="#E5E5E5"> input this assemble captured</font>

414
00:18:07,929 --> 00:18:13,480
blocks<font color="#CCCCCC"> capture api's so</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> reuse some</font>

415
00:18:10,510 --> 00:18:15,610
code so<font color="#CCCCCC"> that was good but</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> I had to</font>

416
00:18:13,480 --> 00:18:17,620
build<font color="#CCCCCC"> a lookup table and then I define</font>

417
00:18:15,610 --> 00:18:19,469
<font color="#E5E5E5">the appropriate import</font><font color="#CCCCCC"> address table</font><font color="#E5E5E5"> for</font>

418
00:18:17,620 --> 00:18:22,270
the executable<font color="#E5E5E5"> and then I have to have</font>

419
00:18:19,470 --> 00:18:25,510
appropriate output<font color="#E5E5E5"> for whatever you need</font>

420
00:18:22,270 --> 00:18:27,480
<font color="#CCCCCC">it for so the offset table approach</font>

421
00:18:25,510 --> 00:18:30,220
works as<font color="#E5E5E5"> follows</font>

422
00:18:27,480 --> 00:18:33,730
you can see here you have<font color="#CCCCCC"> four byte</font>

423
00:18:30,220 --> 00:18:38,350
sections followed by<font color="#CCCCCC"> two by one by two</font>

424
00:18:33,730 --> 00:18:41,010
blocks and the first<font color="#E5E5E5"> bytes is the dll</font>

425
00:18:38,350 --> 00:18:45,280
that's the<font color="#E5E5E5"> location from that point to</font>

426
00:18:41,010 --> 00:18:48,760
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ASCII or</font><font color="#E5E5E5"> the ANSI representation of</font>

427
00:18:45,280 --> 00:18:52,750
what should<font color="#CCCCCC"> be</font><font color="#E5E5E5"> called and the API same</font>

428
00:18:48,760 --> 00:18:55,390
thing<font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> of a string and</font>

429
00:18:52,750 --> 00:18:57,040
<font color="#E5E5E5">so all these are null</font><font color="#CCCCCC"> terminated it</font>

430
00:18:55,390 --> 00:19:00,250
makes it<font color="#E5E5E5"> very easy once you push it onto</font>

431
00:18:57,040 --> 00:19:01,899
the stack<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can see you get some</font>

432
00:19:00,250 --> 00:19:06,429
code reuse out of<font color="#E5E5E5"> this because I unique</font>

433
00:19:01,900 --> 00:19:09,910
the string so there's no rethinks right

434
00:19:06,429 --> 00:19:13,179
so you see here this is calling kernel32

435
00:19:09,910 --> 00:19:16,390
to the next<font color="#CCCCCC"> api is when</font><font color="#E5E5E5"> exact I'm</font>

436
00:19:13,179 --> 00:19:19,570
calling kernel32 again<font color="#E5E5E5"> and the next API</font>

437
00:19:16,390 --> 00:19:21,880
is<font color="#E5E5E5"> X a thread so on so forth so there is</font>

438
00:19:19,570 --> 00:19:26,500
some reuse and I thought<font color="#E5E5E5"> that was going</font>

439
00:19:21,880 --> 00:19:27,820
<font color="#E5E5E5">pretty well</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the code</font><font color="#E5E5E5"> pretty</font>

440
00:19:26,500 --> 00:19:31,510
<font color="#E5E5E5">straightforward I think everybody</font>

441
00:19:27,820 --> 00:19:32,980
understands<font color="#CCCCCC"> that by now but how it</font>

442
00:19:31,510 --> 00:19:35,470
worked<font color="#E5E5E5"> was you jump over</font><font color="#CCCCCC"> the lookup</font>

443
00:19:32,980 --> 00:19:37,690
table<font color="#CCCCCC"> I check</font><font color="#E5E5E5"> the first hash and lookup</font>

444
00:19:35,470 --> 00:19:40,900
table and then I continue until there's

445
00:19:37,690 --> 00:19:43,990
a match<font color="#E5E5E5"> there found</font><font color="#CCCCCC"> I move the DLL</font>

446
00:19:40,900 --> 00:19:46,990
offset to<font color="#CCCCCC"> Al</font><font color="#E5E5E5"> I normalize in use load</font>

447
00:19:43,990 --> 00:19:50,620
<font color="#CCCCCC">library a to get the</font><font color="#E5E5E5"> actual to load the</font>

448
00:19:46,990 --> 00:19:54,429
<font color="#E5E5E5">DLL memory and then I will save the DLL</font>

449
00:19:50,620 --> 00:19:56,409
handle I'll put the<font color="#E5E5E5"> API offset in</font><font color="#CCCCCC"> Al a</font>

450
00:19:54,429 --> 00:19:58,870
normalized<font color="#E5E5E5"> then you get process address</font>

451
00:19:56,410 --> 00:20:00,730
to<font color="#E5E5E5"> get the windows API handle and then I</font>

452
00:19:58,870 --> 00:20:04,270
have to<font color="#E5E5E5"> prepare to call the windows</font><font color="#CCCCCC"> API</font>

453
00:20:00,730 --> 00:20:06,340
so I cleared the stack<font color="#E5E5E5"> I save</font><font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> down</font>

454
00:20:04,270 --> 00:20:07,690
the stack<font color="#E5E5E5"> so</font><font color="#CCCCCC"> then when I do a pop ID it</font>

455
00:20:06,340 --> 00:20:10,570
<font color="#E5E5E5">ends up back in</font><font color="#CCCCCC"> the ax</font>

456
00:20:07,690 --> 00:20:12,370
I<font color="#CCCCCC"> say the return</font><font color="#E5E5E5"> address</font><font color="#CCCCCC"> to EBP</font><font color="#E5E5E5"> because</font>

457
00:20:10,570 --> 00:20:15,399
<font color="#E5E5E5">that's not covered and then I call the</font>

458
00:20:12,370 --> 00:20:17,379
<font color="#E5E5E5">windows API by</font><font color="#CCCCCC"> calling EAX on the return</font>

459
00:20:15,400 --> 00:20:19,780
<font color="#CCCCCC">I'm going to come back I fixed up</font><font color="#E5E5E5"> the</font>

460
00:20:17,380 --> 00:20:22,000
EBP to point back<font color="#CCCCCC"> to the beginning of</font>

461
00:20:19,780 --> 00:20:24,520
<font color="#E5E5E5">the import table stub and I returned</font>

462
00:20:22,000 --> 00:20:26,650
<font color="#CCCCCC">back to</font><font color="#E5E5E5"> the payload logic so if you're</font>

463
00:20:24,520 --> 00:20:28,570
going<font color="#E5E5E5"> to look at it from</font><font color="#CCCCCC"> a like a just</font>

464
00:20:26,650 --> 00:20:31,510
image you can<font color="#CCCCCC"> see here I'm going to do a</font>

465
00:20:28,570 --> 00:20:33,960
call<font color="#E5E5E5"> over just like Stephen Pierce</font>

466
00:20:31,510 --> 00:20:37,629
Ashley bi or<font color="#CCCCCC"> there Metasploit payloads I</font>

467
00:20:33,960 --> 00:20:39,070
do a call over<font color="#CCCCCC"> and then I pop EBP well</font>

468
00:20:37,630 --> 00:20:42,070
that<font color="#E5E5E5"> this is at this point it is the</font>

469
00:20:39,070 --> 00:20:44,590
Metasploit actual logic<font color="#E5E5E5"> of running the</font>

470
00:20:42,070 --> 00:20:47,860
<font color="#E5E5E5">show so then I return</font><font color="#CCCCCC"> back into the</font>

471
00:20:44,590 --> 00:20:50,350
import address table stub<font color="#E5E5E5"> and I tried to</font>

472
00:20:47,860 --> 00:20:52,629
not<font color="#CCCCCC"> go back to</font><font color="#E5E5E5"> the beginning of the stub</font>

473
00:20:50,350 --> 00:20:55,840
every time I tried to<font color="#CCCCCC"> stay within</font><font color="#E5E5E5"> just</font>

474
00:20:52,630 --> 00:20:59,080
<font color="#E5E5E5">go</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the lookup table and with all the</font>

475
00:20:55,840 --> 00:21:01,870
<font color="#E5E5E5">different payloads they even I got it</font>

476
00:20:59,080 --> 00:21:05,110
down to<font color="#E5E5E5"> one register where I could I</font>

477
00:21:01,870 --> 00:21:06,639
could push the two values<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> uh</font>

478
00:21:05,110 --> 00:21:11,290
varying that process<font color="#CCCCCC"> address onto the</font>

479
00:21:06,640 --> 00:21:13,200
stack and call from one value<font color="#E5E5E5"> just do an</font>

480
00:21:11,290 --> 00:21:15,970
offset plus<font color="#E5E5E5"> one or a plus for the</font>

481
00:21:13,200 --> 00:21:17,200
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> was is that</font><font color="#E5E5E5"> you</font>

482
00:21:15,970 --> 00:21:19,690
would<font color="#E5E5E5"> just get clobbered when I went to</font>

483
00:21:17,200 --> 00:21:21,370
<font color="#E5E5E5">a more complicated payload so I have to</font>

484
00:21:19,690 --> 00:21:25,870
go back to the<font color="#E5E5E5"> beginning of the import</font>

485
00:21:21,370 --> 00:21:27,669
address table<font color="#E5E5E5"> finding stub so then you</font>

486
00:21:25,870 --> 00:21:29,340
will call<font color="#E5E5E5"> I</font><font color="#CCCCCC"> would actually do a call</font>

487
00:21:27,670 --> 00:21:31,840
instead of a jump to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> windows API</font>

488
00:21:29,340 --> 00:21:35,949
<font color="#E5E5E5">return</font><font color="#CCCCCC"> back into the lookup table</font><font color="#E5E5E5"> and</font>

489
00:21:31,840 --> 00:21:37,570
then do a return to the payload logic

490
00:21:35,950 --> 00:21:39,670
then continue until there's no more

491
00:21:37,570 --> 00:21:43,510
payload logic right

492
00:21:39,670 --> 00:21:45,190
so the initial POC only<font color="#E5E5E5"> took 12 hours to</font>

493
00:21:43,510 --> 00:21:46,780
make<font color="#E5E5E5"> the offset</font><font color="#CCCCCC"> table to design it</font>

494
00:21:45,190 --> 00:21:49,960
everything took about<font color="#E5E5E5"> 12 hours</font>

495
00:21:46,780 --> 00:21:52,420
adding the<font color="#CCCCCC"> workflow yeah I took about</font>

496
00:21:49,960 --> 00:21:53,410
another<font color="#E5E5E5"> 12</font><font color="#CCCCCC"> finalising the tool</font><font color="#E5E5E5"> you don't</font>

497
00:21:52,420 --> 00:21:55,780
even<font color="#E5E5E5"> talk to me about it</font>

498
00:21:53,410 --> 00:21:59,410
it<font color="#E5E5E5"> took a lot of time but I'm happy</font>

499
00:21:55,780 --> 00:22:03,580
where where it's going and what's really

500
00:21:59,410 --> 00:22:06,970
what's really fun about this<font color="#E5E5E5"> is now the</font>

501
00:22:03,580 --> 00:22:09,070
API hashes are but besides getting them

502
00:22:06,970 --> 00:22:11,530
the first time now the API hashes are

503
00:22:09,070 --> 00:22:13,419
completely meaningless<font color="#CCCCCC"> after I figure</font>

504
00:22:11,530 --> 00:22:15,730
out<font color="#E5E5E5"> what API there are I can do whatever</font>

505
00:22:13,420 --> 00:22:18,640
I want<font color="#CCCCCC"> with them and come to find out</font>

506
00:22:15,730 --> 00:22:20,249
that<font color="#CCCCCC"> anti-viruses depend on them for</font>

507
00:22:18,640 --> 00:22:24,190
signatures

508
00:22:20,249 --> 00:22:28,029
yeah<font color="#E5E5E5"> and you know think about what</font>

509
00:22:24,190 --> 00:22:29,919
<font color="#E5E5E5">happens if we mangle them so I added the</font>

510
00:22:28,029 --> 00:22:59,200
ability<font color="#E5E5E5"> to mangle the hashes</font><font color="#CCCCCC"> so let me</font>

511
00:22:29,919 --> 00:23:02,229
show a demo<font color="#CCCCCC"> of that so the</font><font color="#E5E5E5"> first thing</font>

512
00:22:59,200 --> 00:23:03,969
I'm going<font color="#CCCCCC"> to do is</font><font color="#E5E5E5"> just run msi venom do</font>

513
00:23:02,229 --> 00:23:08,080
a<font color="#CCCCCC"> reverse</font><font color="#E5E5E5"> TCP shell and I'm going to put</font>

514
00:23:03,969 --> 00:23:14,619
it into<font color="#E5E5E5"> a straight binary file just</font>

515
00:23:08,080 --> 00:23:15,279
<font color="#CCCCCC">normal binary</font><font color="#E5E5E5"> output</font><font color="#CCCCCC"> right now I'm</font><font color="#E5E5E5"> going</font>

516
00:23:14,619 --> 00:23:17,439
to use

517
00:23:15,279 --> 00:23:25,389
vitalica little<font color="#E5E5E5"> Fido</font><font color="#CCCCCC"> I'm going to cat</font>

518
00:23:17,440 --> 00:23:28,119
the output D of the binary format<font color="#CCCCCC"> into</font>

519
00:23:25,389 --> 00:23:29,949
Fido<font color="#CCCCCC"> and I'm going</font><font color="#E5E5E5"> to call a little</font>

520
00:23:28,119 --> 00:23:33,668
<font color="#CCCCCC">debris a get processed address and</font>

521
00:23:29,950 --> 00:23:35,679
<font color="#E5E5E5">that's for the main module and because</font>

522
00:23:33,669 --> 00:23:37,299
I'm targeting a certain binary I know

523
00:23:35,679 --> 00:23:39,429
that load<font color="#CCCCCC"> library a get processed</font>

524
00:23:37,299 --> 00:23:41,979
<font color="#E5E5E5">addresses in the import table of</font>

525
00:23:39,429 --> 00:23:43,570
executables that<font color="#E5E5E5"> I'm targeting so you</font>

526
00:23:41,979 --> 00:23:45,759
can see here that<font color="#CCCCCC"> I stripped off steven</font>

527
00:23:43,570 --> 00:23:48,039
sashen<font color="#E5E5E5"> API call I</font><font color="#CCCCCC"> just assemble the</font>

528
00:23:45,759 --> 00:23:50,979
payload and<font color="#E5E5E5"> I print out what api's are</font>

529
00:23:48,039 --> 00:23:54,190
being used and then I share the string

530
00:23:50,979 --> 00:23:55,839
table just kind of a check<font color="#E5E5E5"> and then I go</font>

531
00:23:54,190 --> 00:23:59,200
through<font color="#CCCCCC"> and do all</font><font color="#E5E5E5"> the rest now I'm</font>

532
00:23:55,839 --> 00:24:04,649
going to use<font color="#E5E5E5"> backdoor factory to pin to</font>

533
00:23:59,200 --> 00:24:04,649
section and throw it on<font color="#CCCCCC"> the VM</font>

534
00:24:08,820 --> 00:24:18,870
and of course<font color="#CCCCCC"> av flags it right away</font>

535
00:24:12,390 --> 00:24:20,550
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is Windows Defender I'm going to do</font>

536
00:24:18,870 --> 00:24:27,719
the same thing except I'm<font color="#CCCCCC"> going to use -</font>

537
00:24:20,550 --> 00:24:30,180
<font color="#CCCCCC">M form angle you can see I go through</font>

538
00:24:27,720 --> 00:24:32,160
and<font color="#CCCCCC"> show that I'm mingling</font><font color="#E5E5E5"> each hash and</font>

539
00:24:30,180 --> 00:24:33,750
then what I do<font color="#E5E5E5"> is I go into the actual</font>

540
00:24:32,160 --> 00:24:36,050
payload logic and I'd update<font color="#E5E5E5"> the hashes</font>

541
00:24:33,750 --> 00:24:36,050
to<font color="#E5E5E5"> match</font>

542
00:24:46,340 --> 00:24:59,730
it did<font color="#E5E5E5"> not catch it right away so I set</font>

543
00:24:48,990 --> 00:25:01,880
up a netcat listener and there you<font color="#CCCCCC"> have</font>

544
00:24:59,730 --> 00:25:01,880
<font color="#E5E5E5">it</font>

545
00:25:19,780 --> 00:25:24,530
<font color="#E5E5E5">all right so as</font><font color="#CCCCCC"> you as you already know</font>

546
00:25:22,820 --> 00:25:27,760
this<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> Fido just because I</font>

547
00:25:24,530 --> 00:25:31,580
<font color="#E5E5E5">couldn't think</font><font color="#CCCCCC"> of any</font><font color="#E5E5E5"> anything creative</font>

548
00:25:27,760 --> 00:25:33,770
<font color="#CCCCCC">so it accepts</font><font color="#E5E5E5"> stand in and it will</font>

549
00:25:31,580 --> 00:25:35,439
process the payload<font color="#E5E5E5"> based on target</font>

550
00:25:33,770 --> 00:25:39,470
executable and I'll be in the next<font color="#CCCCCC"> demo</font>

551
00:25:35,440 --> 00:25:40,730
<font color="#E5E5E5">or you can you can provide if you know</font>

552
00:25:39,470 --> 00:25:43,250
about<font color="#E5E5E5"> the target executable</font><font color="#CCCCCC"> you can</font>

553
00:25:40,730 --> 00:25:45,830
provide what<font color="#E5E5E5"> you want to use so if you</font>

554
00:25:43,250 --> 00:25:49,429
want to<font color="#E5E5E5"> you know it has a get process</font>

555
00:25:45,830 --> 00:25:51,350
address<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just say GPA and then you</font>

556
00:25:49,429 --> 00:25:52,790
can actually with<font color="#E5E5E5"> flash</font><font color="#CCCCCC"> B you can</font>

557
00:25:51,350 --> 00:25:54,830
provide the target binary it will go

558
00:25:52,790 --> 00:25:58,250
<font color="#E5E5E5">through and do a dependency Walker style</font>

559
00:25:54,830 --> 00:25:59,689
<font color="#E5E5E5">recursive look with all the dll's you</font>

560
00:25:58,250 --> 00:26:03,710
can give the target<font color="#CCCCCC"> LS because it does</font>

561
00:25:59,690 --> 00:26:06,590
matter<font color="#E5E5E5"> and I have XP Vista 7 8 and 10</font>

562
00:26:03,710 --> 00:26:08,120
<font color="#E5E5E5">with all</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> dependent like with all</font>

563
00:26:06,590 --> 00:26:10,580
the load library<font color="#E5E5E5"> a stuff I do need to</font>

564
00:26:08,120 --> 00:26:12,739
<font color="#E5E5E5">update it based on stuff I found within</font>

565
00:26:10,580 --> 00:26:14,720
the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> couple days</font><font color="#E5E5E5"> which is pretty</font>

566
00:26:12,740 --> 00:26:17,660
<font color="#E5E5E5">exciting and then you can either take</font>

567
00:26:14,720 --> 00:26:20,600
stand in or you can give it<font color="#CCCCCC"> a code</font><font color="#E5E5E5"> and</font>

568
00:26:17,660 --> 00:26:23,240
I'll show you<font color="#E5E5E5"> what D and L stand for in</font>

569
00:26:20,600 --> 00:26:24,559
a second<font color="#E5E5E5"> but yeah we'll go over that and</font>

570
00:26:23,240 --> 00:26:26,090
then<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have different you can you can</font>

571
00:26:24,559 --> 00:26:28,790
<font color="#E5E5E5">mangle</font><font color="#CCCCCC"> like I just</font><font color="#E5E5E5"> showed you can have</font>

572
00:26:26,090 --> 00:26:31,340
different outputs such as C<font color="#E5E5E5"> Python and</font>

573
00:26:28,790 --> 00:26:34,850
c-sharp output and the normal output is

574
00:26:31,340 --> 00:26:36,620
stand out<font color="#E5E5E5"> binary format raw binary</font>

575
00:26:34,850 --> 00:26:41,178
<font color="#E5E5E5">format and you can pick your parser</font>

576
00:26:36,620 --> 00:26:42,709
stubs<font color="#E5E5E5"> and so you have GPA ll GPA load</font>

577
00:26:41,179 --> 00:26:44,330
library<font color="#E5E5E5"> a process address and you have</font>

578
00:26:42,710 --> 00:26:46,520
<font color="#CCCCCC">extern so if you're going to</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> an</font>

579
00:26:44,330 --> 00:26:49,100
<font color="#CCCCCC">extern you need to know what dll you're</font>

580
00:26:46,520 --> 00:26:51,139
targeting that's in<font color="#E5E5E5"> memory and what</font>

581
00:26:49,100 --> 00:26:52,459
import table or what part of the import

582
00:26:51,140 --> 00:26:57,799
table and there's<font color="#E5E5E5"> only two</font><font color="#CCCCCC"> options</font>

583
00:26:52,460 --> 00:27:00,710
<font color="#CCCCCC">and so with testing</font><font color="#E5E5E5"> I had a lot of</font>

584
00:26:57,799 --> 00:27:04,160
<font color="#CCCCCC">issues with some core</font><font color="#E5E5E5"> dll's</font>

585
00:27:00,710 --> 00:27:06,710
like on<font color="#E5E5E5"> Windows 7 and I was building a</font>

586
00:27:04,160 --> 00:27:08,510
<font color="#CCCCCC">blacklist</font><font color="#E5E5E5"> just to avoid them and it kept</font>

587
00:27:06,710 --> 00:27:11,419
growing<font color="#E5E5E5"> and I was starting to worry of</font>

588
00:27:08,510 --> 00:27:15,740
<font color="#CCCCCC">what was</font><font color="#E5E5E5"> going on and it</font><font color="#CCCCCC"> was only like</font><font color="#E5E5E5"> I</font>

589
00:27:11,419 --> 00:27:18,320
said<font color="#E5E5E5"> Windows 7 through 10</font><font color="#CCCCCC"> and if you if</font>

590
00:27:15,740 --> 00:27:20,260
you look you see<font color="#E5E5E5"> kernel32 there and I</font>

591
00:27:18,320 --> 00:27:24,470
thought<font color="#E5E5E5"> it was weird that kernel32 had</font>

592
00:27:20,260 --> 00:27:27,700
get process<font color="#E5E5E5"> address in its import table</font>

593
00:27:24,470 --> 00:27:30,300
so I just ignore<font color="#CCCCCC"> that I was just above</font>

594
00:27:27,700 --> 00:27:34,030
come to find out it was<font color="#CCCCCC"> ap</font><font color="#E5E5E5"> IMS</font><font color="#CCCCCC"> wind</font><font color="#E5E5E5"> core</font>

595
00:27:30,300 --> 00:27:37,030
dll's<font color="#E5E5E5"> and these are the exposed</font>

596
00:27:34,030 --> 00:27:42,670
implementation of the windows<font color="#CCCCCC"> API</font><font color="#E5E5E5"> and</font>

597
00:27:37,030 --> 00:27:45,280
<font color="#CCCCCC">they've</font><font color="#E5E5E5"> existed</font><font color="#CCCCCC"> since Windows 7</font><font color="#E5E5E5"> and get</font>

598
00:27:42,670 --> 00:27:46,870
process addresses implemented as<font color="#CCCCCC"> well as</font>

599
00:27:45,280 --> 00:27:48,670
load<font color="#CCCCCC"> library and I'll go into that in a</font>

600
00:27:46,870 --> 00:27:50,699
second<font color="#E5E5E5"> but that process address is</font>

601
00:27:48,670 --> 00:27:53,320
implemented in the library loader

602
00:27:50,700 --> 00:27:56,260
<font color="#CCCCCC">there's there's a like some letters and</font>

603
00:27:53,320 --> 00:27:58,000
some numbers behind it<font color="#E5E5E5"> a</font><font color="#CCCCCC"> dll</font><font color="#E5E5E5"> and they're</font>

604
00:27:56,260 --> 00:28:02,280
normally used<font color="#CCCCCC"> in system dll's because</font>

605
00:27:58,000 --> 00:28:04,870
it's for portability reasons and<font color="#E5E5E5"> there</font>

606
00:28:02,280 --> 00:28:07,450
it's in every process<font color="#E5E5E5"> like these are in</font>

607
00:28:04,870 --> 00:28:10,149
every process<font color="#E5E5E5"> and it's predictable they</font>

608
00:28:07,450 --> 00:28:11,650
are they are and you can<font color="#CCCCCC"> use them if</font>

609
00:28:10,150 --> 00:28:14,110
they're in<font color="#CCCCCC"> the import table of a DLL</font>

610
00:28:11,650 --> 00:28:14,620
<font color="#CCCCCC">yeah I tested that and it's</font><font color="#E5E5E5"> actually</font>

611
00:28:14,110 --> 00:28:16,719
<font color="#E5E5E5">pretty cool</font>

612
00:28:14,620 --> 00:28:18,429
<font color="#E5E5E5">and it's everywhere</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is I don't know</font>

613
00:28:16,720 --> 00:28:23,470
if I<font color="#CCCCCC"> can state</font><font color="#E5E5E5"> this enough it's in every</font>

614
00:28:18,430 --> 00:28:25,900
process<font color="#E5E5E5"> because it's in kernel32 so</font>

615
00:28:23,470 --> 00:28:29,290
there's a view of kernel32<font color="#E5E5E5"> you can see</font>

616
00:28:25,900 --> 00:28:31,660
the<font color="#CCCCCC"> api ms wind letter or wind core</font>

617
00:28:29,290 --> 00:28:35,080
library loader dll<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you see get</font>

618
00:28:31,660 --> 00:28:37,210
process<font color="#E5E5E5"> and it's in the import table so</font>

619
00:28:35,080 --> 00:28:39,399
let me just explain<font color="#E5E5E5"> kind of what what</font>

620
00:28:37,210 --> 00:28:41,950
we're talking<font color="#E5E5E5"> about here all we need to</font>

621
00:28:39,400 --> 00:28:43,540
<font color="#E5E5E5">get processed address in any DLL import</font>

622
00:28:41,950 --> 00:28:46,810
table to access the<font color="#CCCCCC"> entire</font><font color="#E5E5E5"> Windows API</font>

623
00:28:43,540 --> 00:28:48,760
<font color="#E5E5E5">through import table parsing since</font>

624
00:28:46,810 --> 00:28:51,460
Windows<font color="#E5E5E5"> 7 there's been get process</font>

625
00:28:48,760 --> 00:28:53,170
address<font color="#CCCCCC"> in kernel32 import table so</font>

626
00:28:51,460 --> 00:28:55,840
we've had a<font color="#E5E5E5"> very stable</font>

627
00:28:53,170 --> 00:29:00,070
II met<font color="#E5E5E5"> AF and</font><font color="#CCCCCC"> call our bypassed</font>

628
00:28:55,840 --> 00:29:03,100
<font color="#E5E5E5">opportunity since Windows 7 just I I</font>

629
00:29:00,070 --> 00:29:05,080
haven't<font color="#E5E5E5"> heard anyone using this so I</font>

630
00:29:03,100 --> 00:29:09,250
think<font color="#E5E5E5"> this is pretty cool</font>

631
00:29:05,080 --> 00:29:10,810
and by the way<font color="#CCCCCC"> def process address is</font>

632
00:29:09,250 --> 00:29:15,900
not<font color="#E5E5E5"> the only one because</font><font color="#CCCCCC"> within the</font>

633
00:29:10,810 --> 00:29:17,730
library loader<font color="#E5E5E5"> DLL there's also</font><font color="#CCCCCC"> library</font>

634
00:29:15,900 --> 00:29:20,490
load library

635
00:29:17,730 --> 00:29:23,890
<font color="#E5E5E5">EXR extended I think that means extended</font>

636
00:29:20,490 --> 00:29:28,600
exa<font color="#CCCCCC"> and the difference they're basically</font>

637
00:29:23,890 --> 00:29:32,200
the same<font color="#E5E5E5"> load library a is load library</font>

638
00:29:28,600 --> 00:29:34,449
<font color="#CCCCCC">X a with a 0 as a third flag so that's</font>

639
00:29:32,200 --> 00:29:36,970
what we call the library<font color="#E5E5E5"> a that's that's</font>

640
00:29:34,450 --> 00:29:39,340
what's being handled<font color="#E5E5E5"> and this is</font>

641
00:29:36,970 --> 00:29:42,760
<font color="#E5E5E5">completely reliable in</font><font color="#CCCCCC"> one to seven</font>

642
00:29:39,340 --> 00:29:44,649
<font color="#CCCCCC">I found</font><font color="#E5E5E5"> I don't have a</font><font color="#CCCCCC"> Windows 8 VMO me</font>

643
00:29:42,760 --> 00:29:47,410
right now I can't trust<font color="#E5E5E5"> it but it's not</font>

644
00:29:44,650 --> 00:29:52,270
<font color="#E5E5E5">reliable</font><font color="#CCCCCC"> on Windows 10</font><font color="#E5E5E5"> not yet</font>

645
00:29:47,410 --> 00:29:54,400
and and yeah but you can you<font color="#CCCCCC"> can</font>

646
00:29:52,270 --> 00:29:58,690
actually use this it's<font color="#E5E5E5"> pretty great so I</font>

647
00:29:54,400 --> 00:30:15,040
have a demo with the<font color="#E5E5E5"> tor</font><font color="#CCCCCC"> browser the</font>

648
00:29:58,690 --> 00:30:16,630
recent one<font color="#E5E5E5"> all right so first what I'm</font>

649
00:30:15,040 --> 00:30:20,470
going<font color="#CCCCCC"> to show</font><font color="#E5E5E5"> you here</font><font color="#CCCCCC"> is I went ahead</font>

650
00:30:16,630 --> 00:30:23,860
and disabled<font color="#CCCCCC"> the</font><font color="#E5E5E5"> stack pivot check I'm</font>

651
00:30:20,470 --> 00:30:34,060
going to run the original<font color="#E5E5E5"> exploit show</font>

652
00:30:23,860 --> 00:30:38,530
you the<font color="#E5E5E5"> AAF gets flagged</font><font color="#CCCCCC"> okay you can</font>

653
00:30:34,060 --> 00:30:40,000
see at the bottom there now if you were

654
00:30:38,530 --> 00:30:42,070
<font color="#E5E5E5">to buy</font><font color="#CCCCCC"> pass you have to call it we get</font>

655
00:30:40,000 --> 00:30:45,160
flagged<font color="#E5E5E5"> unless you were to completely</font>

656
00:30:42,070 --> 00:30:46,570
<font color="#CCCCCC">bypass or change it and so let me</font><font color="#E5E5E5"> just</font>

657
00:30:45,160 --> 00:30:50,170
point this out real quick<font color="#CCCCCC"> so what I did</font>

658
00:30:46,570 --> 00:30:52,689
<font color="#E5E5E5">is I get I took the Firefox executable</font>

659
00:30:50,170 --> 00:30:55,330
that's what<font color="#E5E5E5"> tor browser</font><font color="#CCCCCC"> is using I did</font><font color="#E5E5E5"> a</font>

660
00:30:52,690 --> 00:30:57,040
<font color="#E5E5E5">slash</font><font color="#CCCCCC"> B and what it did</font><font color="#E5E5E5"> what much scrip</font>

661
00:30:55,330 --> 00:31:01,060
is doing<font color="#E5E5E5"> right now is checking for</font>

662
00:30:57,040 --> 00:31:04,420
Windows<font color="#E5E5E5"> 7 that ability</font><font color="#CCCCCC"> and I'm going</font>

663
00:31:01,060 --> 00:31:06,190
<font color="#CCCCCC">through and and actually doing the</font>

664
00:31:04,420 --> 00:31:08,170
recursive parsing to figure out what

665
00:31:06,190 --> 00:31:11,920
would<font color="#E5E5E5"> be loaded in memory now it's not</font>

666
00:31:08,170 --> 00:31:15,190
<font color="#E5E5E5">going to look at the custom DLL</font><font color="#CCCCCC"> that</font>

667
00:31:11,920 --> 00:31:23,080
come with Firefox<font color="#CCCCCC"> it's just looking</font><font color="#E5E5E5"> at</font>

668
00:31:15,190 --> 00:31:25,920
what is in the system<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so the</font>

669
00:31:23,080 --> 00:31:28,720
output<font color="#E5E5E5"> as you can see it will show the</font>

670
00:31:25,920 --> 00:31:30,940
what load library<font color="#E5E5E5"> load</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> and get</font>

671
00:31:28,720 --> 00:31:34,240
process<font color="#E5E5E5"> miners are available so these</font>

672
00:31:30,940 --> 00:31:37,600
<font color="#E5E5E5">dll's have these</font><font color="#CCCCCC"> two api's in their</font>

673
00:31:34,240 --> 00:31:40,240
import table<font color="#E5E5E5"> and then you'll see GPA</font>

674
00:31:37,600 --> 00:31:45,060
binaries available<font color="#E5E5E5"> and you can see that</font>

675
00:31:40,240 --> 00:31:47,920
I've outlined<font color="#E5E5E5"> the</font><font color="#CCCCCC"> api ms wind core dll's</font>

676
00:31:45,060 --> 00:31:49,770
and so you can use these and I think

677
00:31:47,920 --> 00:31:54,809
that's what I'm going<font color="#E5E5E5"> to do next in the</font>

678
00:31:49,770 --> 00:32:03,270
the video let's so I'm going to<font color="#CCCCCC"> use</font>

679
00:31:54,809 --> 00:32:07,350
kernel32 and I I am gap using<font color="#E5E5E5"> kernel32</font>

680
00:32:03,270 --> 00:32:10,289
<font color="#E5E5E5">and it's using</font><font color="#CCCCCC"> extern a so</font><font color="#E5E5E5"> I'm using the</font>

681
00:32:07,350 --> 00:32:13,408
get process<font color="#CCCCCC"> address in</font><font color="#E5E5E5"> kernel32 in the</font>

682
00:32:10,289 --> 00:32:15,809
<font color="#E5E5E5">API Ms Winslow</font><font color="#CCCCCC"> derp</font><font color="#E5E5E5"> DLL that's in the</font>

683
00:32:13,409 --> 00:32:18,090
import table<font color="#E5E5E5"> and what I'm pushing that</font>

684
00:32:15,809 --> 00:32:21,870
through I call it the tor browser

685
00:32:18,090 --> 00:32:24,539
<font color="#E5E5E5">encoder it's because it needs to be a</font>

686
00:32:21,870 --> 00:32:27,120
JavaScript object and so I'm<font color="#E5E5E5"> just it</font>

687
00:32:24,539 --> 00:32:31,350
happens to<font color="#CCCCCC"> be a Python list and so I</font>

688
00:32:27,120 --> 00:32:36,029
just print the Python list<font color="#E5E5E5"> and I'm what</font>

689
00:32:31,350 --> 00:32:40,289
<font color="#E5E5E5">I am what</font><font color="#CCCCCC"> I did</font><font color="#E5E5E5"> here next is</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just put</font>

690
00:32:36,029 --> 00:32:42,570
the put the<font color="#E5E5E5"> list there in a JavaScript</font>

691
00:32:40,289 --> 00:32:44,610
script<font color="#E5E5E5"> and then I've already copied it</font>

692
00:32:42,570 --> 00:32:48,899
over<font color="#CCCCCC"> so I'm going to</font><font color="#E5E5E5"> uncomment it and</font>

693
00:32:44,610 --> 00:32:54,229
then execute<font color="#E5E5E5"> the payload demonstrate</font>

694
00:32:48,899 --> 00:32:54,229
that<font color="#CCCCCC"> eaf was bypassed</font><font color="#E5E5E5"> yes and caller</font>

695
00:33:05,539 --> 00:33:15,799
there you go

696
00:33:08,500 --> 00:33:15,799
[Applause]

697
00:33:22,540 --> 00:33:31,129
<font color="#CCCCCC">alright so there are some</font><font color="#E5E5E5"> issues not</font>

698
00:33:27,380 --> 00:33:33,800
necessarily<font color="#CCCCCC"> with my script so if you're</font>

699
00:33:31,130 --> 00:33:37,850
using<font color="#CCCCCC"> Metasploit and you're using</font><font color="#E5E5E5"> your</font>

700
00:33:33,800 --> 00:33:41,210
you have<font color="#CCCCCC"> Beck right so my my</font><font color="#E5E5E5"> API is</font>

701
00:33:37,850 --> 00:33:44,540
compatible with meterpreter<font color="#E5E5E5"> with the</font>

702
00:33:41,210 --> 00:33:47,030
stage payloads<font color="#E5E5E5"> that</font><font color="#CCCCCC"> have the hash API</font>

703
00:33:44,540 --> 00:33:48,950
call the<font color="#CCCCCC"> problem is</font><font color="#E5E5E5"> I meant right so</font>

704
00:33:47,030 --> 00:33:51,440
whenever you get<font color="#E5E5E5"> a stage payload coming</font>

705
00:33:48,950 --> 00:33:54,170
back<font color="#CCCCCC"> over the second stage if you're</font>

706
00:33:51,440 --> 00:33:56,150
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> multi stage</font><font color="#CCCCCC"> it's going to have</font>

707
00:33:54,170 --> 00:33:59,660
<font color="#CCCCCC">Stephen Pierce ash API call</font><font color="#E5E5E5"> so it will</font>

708
00:33:56,150 --> 00:34:02,000
fail<font color="#CCCCCC"> so Metasploit needs to be good to</font>

709
00:33:59,660 --> 00:34:03,380
to make this fully compatible<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font>

710
00:34:02,000 --> 00:34:06,460
to run run your own<font color="#E5E5E5"> version</font><font color="#CCCCCC"> and</font>

711
00:34:03,380 --> 00:34:08,690
<font color="#CCCCCC">Metasploit or or we update</font><font color="#E5E5E5"> Metasploit</font>

712
00:34:06,460 --> 00:34:10,340
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> will take a lot</font><font color="#CCCCCC"> of work I also</font>

713
00:34:08,690 --> 00:34:14,120
have to do for<font color="#E5E5E5"> parity I have to do</font>

714
00:34:10,340 --> 00:34:17,690
Windows x64 side of the house<font color="#CCCCCC"> so yeah</font>

715
00:34:14,120 --> 00:34:19,850
<font color="#E5E5E5">that's it's pretty much all I have</font>

716
00:34:17,690 --> 00:34:23,630
as far as control flow guard<font color="#E5E5E5"> return flow</font>

717
00:34:19,850 --> 00:34:25,699
guard implications<font color="#CCCCCC"> I cannot make an</font>

718
00:34:23,630 --> 00:34:29,480
intelligent assessment on that<font color="#E5E5E5"> at</font><font color="#CCCCCC"> this</font>

719
00:34:25,699 --> 00:34:32,960
<font color="#E5E5E5">point I don't know enough what the</font>

720
00:34:29,480 --> 00:34:34,340
impact<font color="#CCCCCC"> could be so the code is going</font><font color="#E5E5E5"> to</font>

721
00:34:32,960 --> 00:34:38,230
<font color="#CCCCCC">be there I'm going</font><font color="#E5E5E5"> to release it here in</font>

722
00:34:34,340 --> 00:34:38,230
the next<font color="#CCCCCC"> couple of minutes</font><font color="#E5E5E5"> any questions</font>

723
00:34:44,379 --> 00:34:54,149
<font color="#E5E5E5">all right well thanks</font>

724
00:34:47,340 --> 00:34:54,149
[Applause]

