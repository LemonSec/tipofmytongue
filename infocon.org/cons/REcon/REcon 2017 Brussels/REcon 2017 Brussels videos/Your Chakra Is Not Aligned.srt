1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,420 --> 00:00:13,309
<font color="#E5E5E5">Tom Arnold 2017</font>

3
00:00:20,280 --> 00:00:26,720
so<font color="#CCCCCC"> too</font>

4
00:00:21,950 --> 00:00:29,660
I'm going to talk<font color="#CCCCCC"> about Shaq chakra</font>

5
00:00:26,720 --> 00:00:31,669
which is<font color="#CCCCCC"> the Microsoft</font><font color="#E5E5E5"> edge</font><font color="#CCCCCC"> scripting</font>

6
00:00:29,660 --> 00:00:34,220
engine<font color="#E5E5E5"> there's actually a bit of</font><font color="#CCCCCC"> a</font>

7
00:00:31,670 --> 00:00:37,190
backstory<font color="#CCCCCC"> to this talk that</font><font color="#E5E5E5"> involves</font>

8
00:00:34,220 --> 00:00:38,900
<font color="#E5E5E5">recon because at the last three</font><font color="#CCCCCC"> con</font><font color="#E5E5E5"> I</font>

9
00:00:37,190 --> 00:00:41,030
gave a talk<font color="#CCCCCC"> on how to find</font>

10
00:00:38,900 --> 00:00:42,920
vulnerabilities in Adobe<font color="#E5E5E5"> Flash but I was</font>

11
00:00:41,030 --> 00:00:45,260
sort<font color="#CCCCCC"> of I'm finishing up my</font><font color="#E5E5E5"> work and</font>

12
00:00:42,920 --> 00:00:47,150
trying<font color="#E5E5E5"> to figure out what to do</font><font color="#CCCCCC"> next</font>

13
00:00:45,260 --> 00:00:49,370
<font color="#E5E5E5">and so one suggested to me that I look</font>

14
00:00:47,150 --> 00:00:51,680
at chakra<font color="#E5E5E5"> and at that point I didn't</font>

15
00:00:49,370 --> 00:00:56,480
even<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that Microsoft had</font><font color="#E5E5E5"> open source</font>

16
00:00:51,680 --> 00:00:59,240
<font color="#E5E5E5">their JavaScript engine</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> gave it a</font>

17
00:00:56,480 --> 00:01:01,010
shot<font color="#E5E5E5"> and ended up having a lot of bugs</font>

18
00:00:59,240 --> 00:01:03,560
<font color="#CCCCCC">so today I'm going to</font><font color="#E5E5E5"> talk a</font><font color="#CCCCCC"> bit about</font>

19
00:01:01,010 --> 00:01:07,130
what I found and the approach I<font color="#CCCCCC"> took to</font>

20
00:01:03,560 --> 00:01:08,540
find them so Who am<font color="#E5E5E5"> I I'm Natalie</font>

21
00:01:07,130 --> 00:01:11,839
<font color="#E5E5E5">Silvana vich and I'm a security</font>

22
00:01:08,540 --> 00:01:14,720
<font color="#E5E5E5">researcher on Google's Project zero I'm</font>

23
00:01:11,840 --> 00:01:17,000
a neck<font color="#CCCCCC"> mist enthusiast I love</font><font color="#E5E5E5"> finding</font>

24
00:01:14,720 --> 00:01:21,350
bugs in browsers and flash and<font color="#E5E5E5"> pretty</font>

25
00:01:17,000 --> 00:01:24,170
much anything that processes script so I

26
00:01:21,350 --> 00:01:26,300
wanted edge and what<font color="#E5E5E5"> is chakra edge is</font>

27
00:01:24,170 --> 00:01:28,520
the new Internet Explorer<font color="#E5E5E5"> it's a</font>

28
00:01:26,300 --> 00:01:32,090
Microsoft's new default browser on

29
00:01:28,520 --> 00:01:35,690
Windows 10 and chakra is<font color="#CCCCCC"> edges open</font>

30
00:01:32,090 --> 00:01:37,490
source<font color="#CCCCCC"> like my script engine it's</font>

31
00:01:35,690 --> 00:01:39,679
regularly updated so it's kind of nice

32
00:01:37,490 --> 00:01:41,958
<font color="#CCCCCC">they didn't just you know</font><font color="#E5E5E5"> offload the</font>

33
00:01:39,679 --> 00:01:43,520
code<font color="#E5E5E5"> one and then that was</font><font color="#CCCCCC"> it you can</font>

34
00:01:41,959 --> 00:01:45,830
actually see active<font color="#E5E5E5"> development and do</font>

35
00:01:43,520 --> 00:01:48,410
the CVEs as they get fixed and<font color="#E5E5E5"> that sort</font>

36
00:01:45,830 --> 00:01:50,179
of thing and it<font color="#E5E5E5"> accepts external</font>

37
00:01:48,410 --> 00:01:54,740
<font color="#E5E5E5">contributions so you can be the change</font>

38
00:01:50,179 --> 00:01:56,420
you<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> see in Microsoft edge so</font>

39
00:01:54,740 --> 00:01:58,610
what is<font color="#CCCCCC"> ekam script ikema script is a</font>

40
00:01:56,420 --> 00:02:00,440
<font color="#CCCCCC">javascript standard it's wet developers</font>

41
00:01:58,610 --> 00:02:03,289
implement<font color="#E5E5E5"> when they try to create a</font>

42
00:02:00,440 --> 00:02:05,000
necklace crypt engine and it is a<font color="#E5E5E5"> living</font>

43
00:02:03,289 --> 00:02:07,190
standard there's always new versions

44
00:02:05,000 --> 00:02:10,729
coming<font color="#E5E5E5"> out the most recent one was</font><font color="#CCCCCC"> equi</font>

45
00:02:07,190 --> 00:02:13,910
<font color="#E5E5E5">script</font><font color="#CCCCCC"> 7 which was released in June so</font>

46
00:02:10,729 --> 00:02:15,260
what<font color="#E5E5E5"> is newness matter um</font><font color="#CCCCCC"> somebody</font>

47
00:02:13,910 --> 00:02:17,209
<font color="#E5E5E5">realized quite quickly when you look at</font>

48
00:02:15,260 --> 00:02:20,000
<font color="#E5E5E5">JavaScript engines is that</font><font color="#CCCCCC"> the standard</font>

49
00:02:17,209 --> 00:02:21,980
is not specify implementation<font color="#E5E5E5"> they say</font>

50
00:02:20,000 --> 00:02:24,140
well the script<font color="#E5E5E5"> needs to do but not how</font>

51
00:02:21,980 --> 00:02:26,599
<font color="#E5E5E5">to implement it</font><font color="#CCCCCC"> so much</font><font color="#E5E5E5"> so when you're</font>

52
00:02:24,140 --> 00:02:28,250
creating a new equity<font color="#E5E5E5"> engine you</font>

53
00:02:26,599 --> 00:02:30,709
developers need<font color="#CCCCCC"> to make design decisions</font>

54
00:02:28,250 --> 00:02:32,780
<font color="#CCCCCC">and the design decisions are somewhat</font>

55
00:02:30,709 --> 00:02:34,310
untested and sometimes<font color="#CCCCCC"> there's</font>

56
00:02:32,780 --> 00:02:35,600
trade-offs there's things like<font color="#CCCCCC"> security</font>

57
00:02:34,310 --> 00:02:37,490
versus performance

58
00:02:35,600 --> 00:02:38,750
how many checks do you put in but

59
00:02:37,490 --> 00:02:40,160
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was like other reason things</font>

60
00:02:38,750 --> 00:02:42,350
get done I'm you know ease of

61
00:02:40,160 --> 00:02:44,750
<font color="#CCCCCC">development that sort of thing</font><font color="#E5E5E5"> and quite</font>

62
00:02:42,350 --> 00:02:46,190
often if you look at some of<font color="#E5E5E5"> the older</font>

63
00:02:44,750 --> 00:02:48,710
browsers<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see where this stuff</font>

64
00:02:46,190 --> 00:02:50,420
went wrong you can see you know things

65
00:02:48,710 --> 00:02:52,190
that<font color="#CCCCCC"> got</font><font color="#E5E5E5"> read</font><font color="#CCCCCC"> written</font><font color="#E5E5E5"> things that they</font>

66
00:02:50,420 --> 00:02:55,160
made a concerted<font color="#CCCCCC"> effort</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> rid of</font>

67
00:02:52,190 --> 00:02:56,870
bugs<font color="#CCCCCC"> in</font><font color="#E5E5E5"> you know some</font><font color="#CCCCCC"> part especially</font>

68
00:02:55,160 --> 00:02:58,910
WebKit<font color="#CCCCCC"> and Firefox</font><font color="#E5E5E5"> you can see like all</font>

69
00:02:56,870 --> 00:03:00,200
<font color="#E5E5E5">the angry comments</font><font color="#CCCCCC"> by developers as we</font>

70
00:02:58,910 --> 00:03:02,359
<font color="#E5E5E5">tried to</font><font color="#CCCCCC"> fix a certain part over and</font>

71
00:03:00,200 --> 00:03:05,929
<font color="#E5E5E5">over</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you don't have a smooth Vantage</font>

72
00:03:02,360 --> 00:03:07,820
with a new<font color="#CCCCCC"> x-men</font><font color="#E5E5E5"> script engine</font><font color="#CCCCCC"> I'm just</font>

73
00:03:05,930 --> 00:03:09,350
both from the side<font color="#E5E5E5"> of you know trying to</font>

74
00:03:07,820 --> 00:03:12,920
secure<font color="#E5E5E5"> it it's not clear where the weak</font>

75
00:03:09,350 --> 00:03:14,900
points are<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also from trying</font><font color="#E5E5E5"> to find</font>

76
00:03:12,920 --> 00:03:17,119
bugs<font color="#E5E5E5"> there</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> wasn't as much to</font>

77
00:03:14,900 --> 00:03:19,700
<font color="#E5E5E5">start with because there hadn't</font><font color="#CCCCCC"> been so</font>

78
00:03:17,120 --> 00:03:21,620
many bugs<font color="#E5E5E5"> found yet</font><font color="#CCCCCC"> and in general M</font>

79
00:03:19,700 --> 00:03:23,600
attacks mature over time<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think this is</font>

80
00:03:21,620 --> 00:03:25,820
<font color="#E5E5E5">really kind of the first few people</font>

81
00:03:23,600 --> 00:03:28,430
<font color="#CCCCCC">who've looked at Shaq right I'm</font><font color="#E5E5E5"> sure</font>

82
00:03:25,820 --> 00:03:30,350
there'll be many bugs in<font color="#E5E5E5"> the future one</font>

83
00:03:28,430 --> 00:03:32,360
thing I<font color="#E5E5E5"> should be surprised about is I</font>

84
00:03:30,350 --> 00:03:33,920
thought that there<font color="#E5E5E5"> would be not a lot of</font>

85
00:03:32,360 --> 00:03:36,560
bug collisions because you know in a new

86
00:03:33,920 --> 00:03:38,329
product there should be a lot<font color="#CCCCCC"> of bugs</font>

87
00:03:36,560 --> 00:03:40,040
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ML been found yet but it turned</font>

88
00:03:38,330 --> 00:03:42,170
out that<font color="#E5E5E5"> basically like many people</font>

89
00:03:40,040 --> 00:03:44,209
converged on the same bugs<font color="#CCCCCC"> and I'm not</font>

90
00:03:42,170 --> 00:03:44,750
sure what what that happened<font color="#CCCCCC"> why that</font>

91
00:03:44,210 --> 00:03:46,610
happened

92
00:03:44,750 --> 00:03:48,680
it may be that<font color="#CCCCCC"> they were very obvious</font>

93
00:03:46,610 --> 00:03:51,380
bugs or they were very<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> to bugs</font>

94
00:03:48,680 --> 00:03:54,380
that were found in<font color="#E5E5E5"> other browsers so</font>

95
00:03:51,380 --> 00:03:57,380
<font color="#E5E5E5">where my goals I wanted to find a lot of</font>

96
00:03:54,380 --> 00:03:58,970
<font color="#CCCCCC">bugs</font><font color="#E5E5E5"> in chakra</font><font color="#CCCCCC"> I understand it</font><font color="#E5E5E5"> improves</font>

97
00:03:57,380 --> 00:04:01,760
some of the weak areas early drive

98
00:03:58,970 --> 00:04:03,980
improvements in those areas<font color="#E5E5E5"> and I was</font>

99
00:04:01,760 --> 00:04:05,870
hoping to<font color="#CCCCCC"> find a deep</font><font color="#E5E5E5"> and unusual bugs</font>

100
00:04:03,980 --> 00:04:08,239
<font color="#CCCCCC">asterisk</font><font color="#E5E5E5"> because that didn't end up</font>

101
00:04:05,870 --> 00:04:11,540
happening<font color="#E5E5E5"> everyone pretty much fat</font><font color="#CCCCCC"> found</font>

102
00:04:08,240 --> 00:04:14,150
the same set<font color="#CCCCCC"> of bugs and my approach was</font>

103
00:04:11,540 --> 00:04:17,329
mostly code review my find<font color="#E5E5E5"> especially I</font>

104
00:04:14,150 --> 00:04:19,790
was here in situation<font color="#E5E5E5"> of wanting</font><font color="#CCCCCC"> to find</font>

105
00:04:17,329 --> 00:04:22,340
a lot of<font color="#E5E5E5"> bugs and kind of do a</font>

106
00:04:19,790 --> 00:04:24,320
comprehensive<font color="#E5E5E5"> bug finding</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> find</font>

107
00:04:22,340 --> 00:04:26,090
all the similar bugs so they can be<font color="#CCCCCC"> fix</font>

108
00:04:24,320 --> 00:04:29,000
<font color="#E5E5E5">I'm code review is typically</font><font color="#CCCCCC"> the best</font>

109
00:04:26,090 --> 00:04:30,289
<font color="#E5E5E5">them you find quality bugs and you kind</font>

110
00:04:29,000 --> 00:04:32,930
of know<font color="#E5E5E5"> their quality</font><font color="#CCCCCC"> upfront because</font>

111
00:04:30,290 --> 00:04:35,120
you know what's causing them I thought I

112
00:04:32,930 --> 00:04:36,920
would<font color="#E5E5E5"> find bugs so you know maybe live</font>

113
00:04:35,120 --> 00:04:40,520
longer and<font color="#CCCCCC"> are more likely to</font><font color="#E5E5E5"> be used by</font>

114
00:04:36,920 --> 00:04:42,500
attackers all that turned out not<font color="#CCCCCC"> to be</font>

115
00:04:40,520 --> 00:04:45,919
the<font color="#E5E5E5"> case and also</font><font color="#CCCCCC"> I found</font><font color="#E5E5E5"> it easier to</font>

116
00:04:42,500 --> 00:04:48,290
<font color="#E5E5E5">fix or gets the entire classes of bugs</font>

117
00:04:45,919 --> 00:04:49,469
fixed<font color="#E5E5E5"> something</font><font color="#CCCCCC"> I found interesting is I</font>

118
00:04:48,290 --> 00:04:51,930
was<font color="#E5E5E5"> talking to one of the other</font>

119
00:04:49,470 --> 00:04:55,160
people that found a similar bike and

120
00:04:51,930 --> 00:04:57,450
used it<font color="#CCCCCC"> in tow and he says that you</font><font color="#E5E5E5"> know</font>

121
00:04:55,160 --> 00:05:00,690
<font color="#E5E5E5">it wasn't even</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> you know if it use</font>

122
00:04:57,450 --> 00:05:02,010
after free is it<font color="#CCCCCC"> at</font><font color="#E5E5E5"> overflow and that</font>

123
00:05:00,690 --> 00:05:03,630
sort of thing and<font color="#CCCCCC"> that's kind of typical</font>

124
00:05:02,010 --> 00:05:04,890
of bugs you find through fuzzing<font color="#E5E5E5"> and</font>

125
00:05:03,630 --> 00:05:06,150
sometimes it's not always clear<font color="#E5E5E5"> what</font>

126
00:05:04,890 --> 00:05:08,159
causes them but if you spend a lot<font color="#E5E5E5"> of</font>

127
00:05:06,150 --> 00:05:09,929
time<font color="#E5E5E5"> looking at the code you can figure</font>

128
00:05:08,160 --> 00:05:12,830
out<font color="#E5E5E5"> why they happen and hopefully find</font>

129
00:05:09,930 --> 00:05:17,730
like all<font color="#CCCCCC"> ten places where that happens</font>

130
00:05:12,830 --> 00:05:19,770
so how do you start I have my<font color="#CCCCCC"> rtfs there</font>

131
00:05:17,730 --> 00:05:21,600
reading the standard my opinion is

132
00:05:19,770 --> 00:05:24,330
<font color="#CCCCCC">really important if you want to</font><font color="#E5E5E5"> find I'm</font>

133
00:05:21,600 --> 00:05:27,480
good browser bugs and<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> on script</font>

134
00:05:24,330 --> 00:05:29,729
engines<font color="#CCCCCC"> you would be amazed</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> the stuff</font>

135
00:05:27,480 --> 00:05:33,180
that's in there<font color="#CCCCCC"> there's a pretty crazy</font>

136
00:05:29,730 --> 00:05:34,650
stuff at a lot of it causes bugs<font color="#CCCCCC"> if you</font>

137
00:05:33,180 --> 00:05:36,660
can't bring yourself to read the

138
00:05:34,650 --> 00:05:41,280
standard<font color="#E5E5E5"> I'd recommend the Mozilla Docs</font>

139
00:05:36,660 --> 00:05:44,840
<font color="#CCCCCC">they're fantabulous they have you</font><font color="#E5E5E5"> know</font>

140
00:05:41,280 --> 00:05:48,270
every<font color="#CCCCCC"> method a description</font><font color="#E5E5E5"> of the method</font>

141
00:05:44,840 --> 00:05:50,010
<font color="#CCCCCC">browser compatibility</font><font color="#E5E5E5"> in a table</font><font color="#CCCCCC"> and</font>

142
00:05:48,270 --> 00:05:51,719
then send a link to<font color="#E5E5E5"> the ACMA script</font>

143
00:05:50,010 --> 00:05:52,590
standard<font color="#E5E5E5"> where you can find more</font>

144
00:05:51,720 --> 00:05:54,840
<font color="#E5E5E5">information</font>

145
00:05:52,590 --> 00:05:57,179
you think you died and went<font color="#CCCCCC"> to echo</font>

146
00:05:54,840 --> 00:05:58,770
script documentation heaven which by<font color="#E5E5E5"> the</font>

147
00:05:57,180 --> 00:06:02,250
way is where<font color="#E5E5E5"> I totally hope I go when I</font>

148
00:05:58,770 --> 00:06:05,880
die<font color="#E5E5E5"> many features are infrequently</font><font color="#CCCCCC"> used</font>

149
00:06:02,250 --> 00:06:07,590
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the ones</font><font color="#E5E5E5"> that cause bugs</font><font color="#CCCCCC"> I</font>

150
00:06:05,880 --> 00:06:10,830
find like there's almost a<font color="#CCCCCC"> trade off</font>

151
00:06:07,590 --> 00:06:13,109
<font color="#E5E5E5">like every so often you do find a bug in</font>

152
00:06:10,830 --> 00:06:15,539
a really commonly<font color="#E5E5E5"> used feature but most</font>

153
00:06:13,110 --> 00:06:17,790
of the bugs are in<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> staffs that</font>

154
00:06:15,540 --> 00:06:20,700
less than<font color="#CCCCCC"> 1% of web pages or</font><font color="#E5E5E5"> even way</font>

155
00:06:17,790 --> 00:06:22,590
less than<font color="#CCCCCC"> that ever use and the future</font>

156
00:06:20,700 --> 00:06:24,419
is can be<font color="#E5E5E5"> very deeply intertwined</font><font color="#CCCCCC"> quite</font>

157
00:06:22,590 --> 00:06:25,979
often on one thing that<font color="#E5E5E5"> turns up in the</font>

158
00:06:24,419 --> 00:06:29,669
standard has really deep reaching

159
00:06:25,979 --> 00:06:33,140
<font color="#E5E5E5">impacts other places and one example of</font>

160
00:06:29,669 --> 00:06:36,359
<font color="#CCCCCC">this is the array dot species creator so</font>

161
00:06:33,140 --> 00:06:38,250
the idea here is<font color="#E5E5E5"> in JavaScript there's</font>

162
00:06:36,360 --> 00:06:40,710
lots of different array methods where

163
00:06:38,250 --> 00:06:43,140
<font color="#CCCCCC">it'll copy the results</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> a new array</font>

164
00:06:40,710 --> 00:06:45,180
for example slice<font color="#E5E5E5"> it was just sub array</font>

165
00:06:43,140 --> 00:06:46,530
and it will get<font color="#E5E5E5"> two indexes and then</font>

166
00:06:45,180 --> 00:06:48,930
create a<font color="#E5E5E5"> new array and copy</font><font color="#CCCCCC"> your array</font>

167
00:06:46,530 --> 00:06:50,640
into it<font color="#E5E5E5"> but then you know the problem is</font>

168
00:06:48,930 --> 00:06:52,440
let's say the thing<font color="#E5E5E5"> I'm slicing is</font>

169
00:06:50,640 --> 00:06:54,780
actually a subclass<font color="#CCCCCC"> of array and not</font>

170
00:06:52,440 --> 00:06:58,110
actually the array<font color="#E5E5E5"> do I return the new</font>

171
00:06:54,780 --> 00:06:59,318
thing as a subclass<font color="#E5E5E5"> or you're just like</font>

172
00:06:58,110 --> 00:07:01,210
<font color="#CCCCCC">regular array</font>

173
00:06:59,319 --> 00:07:02,469
and of course instead of<font color="#CCCCCC"> picking one</font><font color="#E5E5E5"> why</font>

174
00:07:01,210 --> 00:07:04,448
<font color="#E5E5E5">don't we make this a configurable</font>

175
00:07:02,469 --> 00:07:06,189
property and then you<font color="#E5E5E5"> can specify which</font>

176
00:07:04,449 --> 00:07:08,619
<font color="#CCCCCC">one you want</font><font color="#E5E5E5"> and this is of</font><font color="#CCCCCC"> course</font>

177
00:07:06,189 --> 00:07:11,800
<font color="#E5E5E5">easily implemented by inserting a call</font>

178
00:07:08,619 --> 00:07:13,990
into<font color="#CCCCCC"> the script</font><font color="#E5E5E5"> into every single native</font>

179
00:07:11,800 --> 00:07:15,490
array call so<font color="#CCCCCC"> that's you know</font><font color="#E5E5E5"> basically</font>

180
00:07:13,990 --> 00:07:19,869
impacts everything<font color="#E5E5E5"> you do with an array</font>

181
00:07:15,490 --> 00:07:21,610
and makes it vulnerable and this<font color="#CCCCCC"> sum can</font>

182
00:07:19,869 --> 00:07:23,710
interact with<font color="#E5E5E5"> some other design feature</font>

183
00:07:21,610 --> 00:07:26,589
ISM<font color="#E5E5E5"> for example I think</font><font color="#CCCCCC"> one of the most</font>

184
00:07:23,710 --> 00:07:28,539
important things<font color="#E5E5E5"> in design decisions in</font>

185
00:07:26,589 --> 00:07:30,939
creating an ACMA engine is how a<font color="#E5E5E5"> raise</font>

186
00:07:28,539 --> 00:07:32,680
and<font color="#E5E5E5"> how objects work and most of</font>

187
00:07:30,939 --> 00:07:35,259
browsers do something<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> I'm this</font>

188
00:07:32,680 --> 00:07:37,300
is exactly what chakra does which<font color="#CCCCCC"> is you</font>

189
00:07:35,259 --> 00:07:38,830
start<font color="#CCCCCC"> off</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> a very small I'm not</font>

190
00:07:37,300 --> 00:07:41,830
complex array and then<font color="#E5E5E5"> as you add</font><font color="#CCCCCC"> new</font>

191
00:07:38,830 --> 00:07:45,159
features<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> it becomes</font><font color="#CCCCCC"> a more complex</font>

192
00:07:41,830 --> 00:07:46,688
<font color="#E5E5E5">object so in chakra you start off let</font><font color="#CCCCCC"> me</font>

193
00:07:45,159 --> 00:07:48,430
<font color="#E5E5E5">just have integers in your array and</font>

194
00:07:46,689 --> 00:07:49,749
then<font color="#CCCCCC"> your an integer</font><font color="#E5E5E5"> array</font><font color="#CCCCCC"> is soon as</font>

195
00:07:48,430 --> 00:07:51,369
you<font color="#E5E5E5"> get a float added to you you become</font>

196
00:07:49,749 --> 00:07:53,199
<font color="#CCCCCC">a float array and</font><font color="#E5E5E5"> that has to be twice</font>

197
00:07:51,369 --> 00:07:56,680
<font color="#E5E5E5">as long</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> there is</font><font color="#CCCCCC"> eight bytes</font><font color="#E5E5E5"> and</font>

198
00:07:53,199 --> 00:07:58,569
an array and<font color="#CCCCCC"> then if you add an object</font>

199
00:07:56,680 --> 00:08:00,189
to it it then becomes<font color="#E5E5E5"> a</font><font color="#CCCCCC"> var array and</font>

200
00:07:58,569 --> 00:08:01,899
<font color="#E5E5E5">that means instead of having</font><font color="#CCCCCC"> numbers in</font>

201
00:08:00,189 --> 00:08:03,819
the array of<font color="#E5E5E5"> pointers to objects and</font>

202
00:08:01,899 --> 00:08:05,709
then<font color="#E5E5E5"> the very final stage of an array</font>

203
00:08:03,819 --> 00:08:07,330
which doesn't happen very often is<font color="#E5E5E5"> what</font>

204
00:08:05,709 --> 00:08:09,009
if you configure<font color="#E5E5E5"> a property to an array</font>

205
00:08:07,330 --> 00:08:10,899
what if you make one<font color="#E5E5E5"> element of the</font>

206
00:08:09,009 --> 00:08:12,159
array read-only<font color="#E5E5E5"> then you have to</font>

207
00:08:10,899 --> 00:08:13,809
<font color="#CCCCCC">actually have a structure with the</font>

208
00:08:12,159 --> 00:08:17,669
property of<font color="#CCCCCC"> every element</font><font color="#E5E5E5"> in it and</font>

209
00:08:13,809 --> 00:08:21,399
<font color="#E5E5E5">that's what they call an</font><font color="#CCCCCC"> s5 array and</font>

210
00:08:17,669 --> 00:08:23,080
how do<font color="#E5E5E5"> we implement this they</font><font color="#CCCCCC"> actually</font>

211
00:08:21,399 --> 00:08:25,689
like swap out the view table like they

212
00:08:23,080 --> 00:08:28,269
very literally you know cast<font color="#E5E5E5"> the object</font>

213
00:08:25,689 --> 00:08:30,759
to<font color="#CCCCCC"> byte and</font><font color="#E5E5E5"> then change the</font><font color="#CCCCCC"> table to be</font>

214
00:08:28,269 --> 00:08:32,799
something<font color="#CCCCCC"> different and I found that</font>

215
00:08:30,759 --> 00:08:34,750
fairly<font color="#CCCCCC"> surprising but like that's</font><font color="#E5E5E5"> what</font>

216
00:08:32,799 --> 00:08:37,478
happens and<font color="#E5E5E5"> it has some</font><font color="#CCCCCC"> interesting</font>

217
00:08:34,750 --> 00:08:38,620
consequences<font color="#E5E5E5"> and with regards to bugs so</font>

218
00:08:37,479 --> 00:08:40,690
<font color="#CCCCCC">to give an</font><font color="#E5E5E5"> idea of how this works you</font>

219
00:08:38,620 --> 00:08:42,279
<font color="#CCCCCC">have your</font><font color="#E5E5E5"> inter a and the way arrays are</font>

220
00:08:40,690 --> 00:08:47,350
structured and this is actually a<font color="#E5E5E5"> fairly</font>

221
00:08:42,279 --> 00:08:48,970
elegant design they<font color="#CCCCCC"> have every array</font>

222
00:08:47,350 --> 00:08:50,860
store isn't<font color="#CCCCCC"> a real object and then it</font>

223
00:08:48,970 --> 00:08:53,920
has<font color="#CCCCCC"> a head that points to a</font><font color="#E5E5E5"> segment of</font>

224
00:08:50,860 --> 00:08:55,990
the array and the<font color="#E5E5E5"> segment has like where</font>

225
00:08:53,920 --> 00:08:56,769
it starts<font color="#E5E5E5"> and it's data in it and that</font>

226
00:08:55,990 --> 00:08:58,930
sort<font color="#CCCCCC"> of thing</font>

227
00:08:56,769 --> 00:09:01,029
so whatever<font color="#CCCCCC"> things note about this is a</font>

228
00:08:58,930 --> 00:09:02,589
lot<font color="#E5E5E5"> of browsers have a concept of a</font>

229
00:09:01,029 --> 00:09:04,449
sparse array and a dense<font color="#E5E5E5"> array and</font>

230
00:09:02,589 --> 00:09:06,430
<font color="#CCCCCC">chakra doesn't really have that</font>

231
00:09:04,449 --> 00:09:09,550
basically<font color="#E5E5E5"> your dense array is just</font><font color="#CCCCCC"> a</font>

232
00:09:06,430 --> 00:09:11,739
very very<font color="#E5E5E5"> small</font><font color="#CCCCCC"> sparse array and then if</font>

233
00:09:09,550 --> 00:09:12,819
it if it becomes sparse they can just

234
00:09:11,740 --> 00:09:15,190
add more segments

235
00:09:12,820 --> 00:09:17,590
so if you change the<font color="#CCCCCC"> take let's say you</font>

236
00:09:15,190 --> 00:09:19,300
added a float to this<font color="#E5E5E5"> it</font><font color="#CCCCCC"> changes its</font>

237
00:09:17,590 --> 00:09:21,610
type it swaps out the V table and then

238
00:09:19,300 --> 00:09:23,170
it goes down<font color="#E5E5E5"> this chain and for every</font>

239
00:09:21,610 --> 00:09:24,880
segment<font color="#E5E5E5"> it will allocate it so it's now</font>

240
00:09:23,170 --> 00:09:32,290
twice the<font color="#E5E5E5"> size I'm putting the things</font>

241
00:09:24,880 --> 00:09:33,189
those floats and then move on<font color="#E5E5E5"> so think</font>

242
00:09:32,290 --> 00:09:36,069
of example of how these<font color="#CCCCCC"> two things</font>

243
00:09:33,190 --> 00:09:39,820
combine<font color="#CCCCCC"> to cause bugs and there's this</font>

244
00:09:36,070 --> 00:09:42,460
bug<font color="#E5E5E5"> which is in a radar array dot filter</font>

245
00:09:39,820 --> 00:09:45,280
and there's a similar one<font color="#CCCCCC"> in a radar map</font>

246
00:09:42,460 --> 00:09:48,850
<font color="#E5E5E5">so to show how this works</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> script</font>

247
00:09:45,280 --> 00:09:51,610
<font color="#CCCCCC">engine first you start off</font><font color="#E5E5E5"> and you want</font>

248
00:09:48,850 --> 00:09:55,570
to do this method<font color="#E5E5E5"> which basically</font><font color="#CCCCCC"> it</font>

249
00:09:51,610 --> 00:09:57,970
runs a function on<font color="#E5E5E5"> every item in an</font>

250
00:09:55,570 --> 00:10:00,010
array<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then if this function</font><font color="#E5E5E5"> you</font>

251
00:09:57,970 --> 00:10:01,540
provided returns<font color="#E5E5E5"> true it goes</font><font color="#CCCCCC"> into the</font>

252
00:10:00,010 --> 00:10:03,520
new array otherwise it does<font color="#E5E5E5"> not go into</font>

253
00:10:01,540 --> 00:10:05,980
<font color="#E5E5E5">that array so you start</font><font color="#CCCCCC"> off you have</font><font color="#E5E5E5"> to</font>

254
00:10:03,520 --> 00:10:07,329
<font color="#CCCCCC">create the array and realize this is a</font>

255
00:10:05,980 --> 00:10:11,710
constructor you provide it can be

256
00:10:07,330 --> 00:10:15,520
anything<font color="#E5E5E5"> and then it does the call on</font>

257
00:10:11,710 --> 00:10:17,920
every<font color="#CCCCCC"> single one and then it calls</font><font color="#E5E5E5"> this</font>

258
00:10:15,520 --> 00:10:19,750
direct set item map function and that's

259
00:10:17,920 --> 00:10:22,270
kind of where<font color="#E5E5E5"> the problem is this one's</font>

260
00:10:19,750 --> 00:10:23,920
actually<font color="#E5E5E5"> only defined for the variable</font>

261
00:10:22,270 --> 00:10:26,260
arrays and none of<font color="#E5E5E5"> the other array types</font>

262
00:10:23,920 --> 00:10:28,719
<font color="#E5E5E5">so if you call it</font><font color="#CCCCCC"> it's type confusion</font>

263
00:10:26,260 --> 00:10:30,640
and the mistake here is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

264
00:10:28,720 --> 00:10:31,960
developer assumed that<font color="#E5E5E5"> when you're</font>

265
00:10:30,640 --> 00:10:33,580
<font color="#CCCCCC">creating the new array it would be an</font>

266
00:10:31,960 --> 00:10:35,350
<font color="#CCCCCC">object array</font><font color="#E5E5E5"> because that's what by</font>

267
00:10:33,580 --> 00:10:38,710
default the constructor does<font color="#E5E5E5"> but you can</font>

268
00:10:35,350 --> 00:10:40,540
override<font color="#CCCCCC"> it and then that will cause</font>

269
00:10:38,710 --> 00:10:42,760
<font color="#CCCCCC">height confusion and here's what</font><font color="#E5E5E5"> this</font>

270
00:10:40,540 --> 00:10:44,290
<font color="#CCCCCC">looks like in JavaScript I'm starting at</font>

271
00:10:42,760 --> 00:10:46,300
<font color="#E5E5E5">the bottom</font><font color="#CCCCCC"> you create the array and</font><font color="#E5E5E5"> then</font>

272
00:10:44,290 --> 00:10:48,819
you redefine I'm in the middle<font color="#E5E5E5"> the</font>

273
00:10:46,300 --> 00:10:50,020
species that<font color="#E5E5E5"> and that's what returns</font>

274
00:10:48,820 --> 00:10:53,200
<font color="#E5E5E5">dummy which</font><font color="#CCCCCC"> is a constructor that</font>

275
00:10:50,020 --> 00:10:56,590
<font color="#E5E5E5">actually makes your array another</font>

276
00:10:53,200 --> 00:10:59,550
property<font color="#E5E5E5"> of</font><font color="#CCCCCC"> gem I read about this is</font>

277
00:10:56,590 --> 00:11:03,130
like<font color="#E5E5E5"> absolutely</font><font color="#CCCCCC"> wild</font><font color="#E5E5E5"> but you can put</font>

278
00:10:59,550 --> 00:11:08,020
interceptors getters and setters<font color="#CCCCCC"> on the</font>

279
00:11:03,130 --> 00:11:12,189
index of an array<font color="#E5E5E5"> and this has all sorts</font>

280
00:11:08,020 --> 00:11:13,530
<font color="#E5E5E5">of interesting impacts like here here's</font>

281
00:11:12,190 --> 00:11:16,060
how it works

282
00:11:13,530 --> 00:11:17,829
you have your array and<font color="#E5E5E5"> then you call</font>

283
00:11:16,060 --> 00:11:22,329
<font color="#E5E5E5">object</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> define property</font><font color="#CCCCCC"> add a getter</font>

284
00:11:17,830 --> 00:11:24,010
and a setter to<font color="#E5E5E5"> this array and then if</font>

285
00:11:22,330 --> 00:11:25,810
you<font color="#E5E5E5"> change it it will call this getter</font>

286
00:11:24,010 --> 00:11:26,319
and setter<font color="#E5E5E5"> and what's</font><font color="#CCCCCC"> even kind</font><font color="#E5E5E5"> of weird</font>

287
00:11:25,810 --> 00:11:28,268
is

288
00:11:26,320 --> 00:11:29,680
quite often if<font color="#CCCCCC"> you've</font><font color="#E5E5E5"> used like internal</font>

289
00:11:28,269 --> 00:11:31,509
properties whenever a like what so you

290
00:11:29,680 --> 00:11:35,199
call<font color="#E5E5E5"> a</font><font color="#CCCCCC"> ray dot push on that it</font><font color="#E5E5E5"> will</font>

291
00:11:31,509 --> 00:11:37,269
still trigger<font color="#E5E5E5"> this</font><font color="#CCCCCC"> access sir and that</font>

292
00:11:35,199 --> 00:11:40,779
can do all sorts<font color="#CCCCCC"> of things</font><font color="#E5E5E5"> that the</font>

293
00:11:37,269 --> 00:11:42,339
developer wasn't expecting and<font color="#E5E5E5"> this gets</font>

294
00:11:40,779 --> 00:11:45,459
<font color="#CCCCCC">even more</font><font color="#E5E5E5"> interesting if you</font><font color="#CCCCCC"> look at how</font>

295
00:11:42,339 --> 00:11:47,920
objects work in JavaScript<font color="#E5E5E5"> so every</font>

296
00:11:45,459 --> 00:11:52,180
<font color="#CCCCCC">object it has</font><font color="#E5E5E5"> its class hierarchy and</font>

297
00:11:47,920 --> 00:11:54,969
<font color="#E5E5E5">this is defined by the prototype</font><font color="#CCCCCC"> so you</font>

298
00:11:52,180 --> 00:11:57,219
go<font color="#E5E5E5"> you</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> off let's say you're</font><font color="#CCCCCC"> trying</font>

299
00:11:54,970 --> 00:11:59,139
<font color="#E5E5E5">to get a property like property</font><font color="#CCCCCC"> one</font>

300
00:11:57,220 --> 00:12:00,699
you'll go and see if it's<font color="#CCCCCC"> in the array</font>

301
00:11:59,139 --> 00:12:02,170
object if it's not you<font color="#E5E5E5"> get the prototype</font>

302
00:12:00,699 --> 00:12:03,490
<font color="#CCCCCC">and if it's not there</font><font color="#E5E5E5"> you get the</font>

303
00:12:02,170 --> 00:12:05,229
prototypes prototype and<font color="#E5E5E5"> go all the way</font>

304
00:12:03,490 --> 00:12:07,449
up the chain<font color="#CCCCCC"> until it's no and that's</font>

305
00:12:05,230 --> 00:12:09,910
<font color="#E5E5E5">how you get a property let's say you</font>

306
00:12:07,449 --> 00:12:11,800
define the property of not the array but

307
00:12:09,910 --> 00:12:14,620
the prototype object that<font color="#E5E5E5"> is given</font><font color="#CCCCCC"> to</font>

308
00:12:11,800 --> 00:12:17,920
all<font color="#E5E5E5"> arrays</font><font color="#CCCCCC"> then you keep</font><font color="#E5E5E5"> that also works</font>

309
00:12:14,620 --> 00:12:19,839
<font color="#E5E5E5">and then you create these arrays after</font>

310
00:12:17,920 --> 00:12:21,729
you've done<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and without ever</font>

311
00:12:19,839 --> 00:12:24,639
touching<font color="#E5E5E5"> the array it will still</font><font color="#CCCCCC"> um</font>

312
00:12:21,730 --> 00:12:26,560
trigger these<font color="#E5E5E5"> I'm accessors now it's not</font>

313
00:12:24,639 --> 00:12:28,600
<font color="#E5E5E5">perfect because if you initialize the</font>

314
00:12:26,560 --> 00:12:30,040
array like and<font color="#E5E5E5"> be it doesn't work but if</font>

315
00:12:28,600 --> 00:12:31,269
you are creating an empty<font color="#CCCCCC"> array and I'm</font>

316
00:12:30,040 --> 00:12:34,060
<font color="#E5E5E5">putting stuff into</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> I'm you can</font>

317
00:12:31,269 --> 00:12:36,310
actually intercept<font color="#E5E5E5"> to this before you've</font>

318
00:12:34,060 --> 00:12:38,319
ever<font color="#CCCCCC"> touched</font><font color="#E5E5E5"> the array and what's cool</font>

319
00:12:36,310 --> 00:12:41,229
about<font color="#CCCCCC"> that is if it's done in a native</font>

320
00:12:38,319 --> 00:12:42,519
method<font color="#E5E5E5"> in the engine quite often</font><font color="#CCCCCC"> you it</font>

321
00:12:41,230 --> 00:12:46,029
will call the setter and<font color="#E5E5E5"> you can get a</font>

322
00:12:42,519 --> 00:12:47,889
handle to<font color="#CCCCCC"> that array before</font><font color="#E5E5E5"> it's even</font>

323
00:12:46,029 --> 00:12:51,100
been returned to<font color="#E5E5E5"> you which can</font><font color="#CCCCCC"> cause</font>

324
00:12:47,889 --> 00:12:54,279
bugs<font color="#CCCCCC"> you're an example of a bug caused</font>

325
00:12:51,100 --> 00:12:56,290
by this and<font color="#CCCCCC"> also</font><font color="#E5E5E5"> and the array typing so</font>

326
00:12:54,279 --> 00:12:59,069
it's<font color="#E5E5E5"> pretty simple this is</font><font color="#CCCCCC"> a radar</font><font color="#E5E5E5"> to</font>

327
00:12:56,290 --> 00:13:01,149
string which is<font color="#CCCCCC"> also</font><font color="#E5E5E5"> called a join and</font>

328
00:12:59,069 --> 00:13:02,319
<font color="#CCCCCC">just</font><font color="#E5E5E5"> basically a cycle through</font><font color="#CCCCCC"> every</font>

329
00:13:01,149 --> 00:13:05,110
element<font color="#E5E5E5"> in the array and then converts</font>

330
00:13:02,319 --> 00:13:06,729
it to a to a string so it does this<font color="#E5E5E5"> and</font>

331
00:13:05,110 --> 00:13:09,069
it tries to<font color="#E5E5E5"> get it and this is actually</font>

332
00:13:06,730 --> 00:13:10,930
a templated function so we'll call in

333
00:13:09,069 --> 00:13:12,939
and then it<font color="#E5E5E5"> will try</font><font color="#CCCCCC"> and convert the</font>

334
00:13:10,930 --> 00:13:14,500
item which connects acute script<font color="#E5E5E5"> and</font>

335
00:13:12,939 --> 00:13:15,699
then that can<font color="#CCCCCC"> actually do this thing</font>

336
00:13:14,500 --> 00:13:17,560
where it's watched<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vtable</font>

337
00:13:15,699 --> 00:13:20,050
out and at that<font color="#E5E5E5"> point it's too late</font>

338
00:13:17,560 --> 00:13:21,099
<font color="#CCCCCC">right</font><font color="#E5E5E5"> you're in</font><font color="#CCCCCC"> a templated function and</font>

339
00:13:20,050 --> 00:13:23,019
it's not<font color="#E5E5E5"> going to like go back and</font>

340
00:13:21,100 --> 00:13:25,540
<font color="#CCCCCC">change you to</font><font color="#E5E5E5"> have the right template so</font>

341
00:13:23,019 --> 00:13:27,399
then<font color="#E5E5E5"> everything you do after that is on</font>

342
00:13:25,540 --> 00:13:29,800
the wrong<font color="#E5E5E5"> type and it's</font><font color="#CCCCCC"> type confusion</font>

343
00:13:27,399 --> 00:13:31,779
and here's an<font color="#E5E5E5"> example of the code</font><font color="#CCCCCC"> that</font>

344
00:13:29,800 --> 00:13:33,459
causes<font color="#E5E5E5"> this notice that</font><font color="#CCCCCC"> you're like</font>

345
00:13:31,779 --> 00:13:36,880
<font color="#E5E5E5">actually putting the getter and setter</font>

346
00:13:33,459 --> 00:13:38,170
<font color="#E5E5E5">on the index so that's the thing</font><font color="#CCCCCC"> that</font>

347
00:13:36,880 --> 00:13:39,840
<font color="#E5E5E5">you</font><font color="#CCCCCC"> grow is the code that can</font><font color="#E5E5E5"> change the</font>

348
00:13:38,170 --> 00:13:42,430
array type

349
00:13:39,840 --> 00:13:45,190
another interesting<font color="#E5E5E5"> JavaScript property</font>

350
00:13:42,430 --> 00:13:46,750
is a proxy<font color="#CCCCCC"> and this is basically you</font>

351
00:13:45,190 --> 00:13:48,910
<font color="#CCCCCC">know what if you know you're</font><font color="#E5E5E5"> not</font>

352
00:13:46,750 --> 00:13:50,080
satisfied<font color="#E5E5E5"> with using other things</font><font color="#CCCCCC"> - the</font>

353
00:13:48,910 --> 00:13:52,660
bug<font color="#E5E5E5"> JavaScript you wanted to bug</font>

354
00:13:50,080 --> 00:13:54,700
<font color="#CCCCCC">JavaScript in</font><font color="#E5E5E5"> JavaScript well then you</font>

355
00:13:52,660 --> 00:13:57,730
need<font color="#CCCCCC"> to have this some function called a</font>

356
00:13:54,700 --> 00:14:00,160
<font color="#E5E5E5">proxy</font><font color="#CCCCCC"> and I can intercept</font><font color="#E5E5E5"> everything</font>

357
00:13:57,730 --> 00:14:01,420
<font color="#E5E5E5">that you do to</font><font color="#CCCCCC"> an object</font><font color="#E5E5E5"> and I'd</font>

358
00:14:00,160 --> 00:14:02,650
encourage<font color="#E5E5E5"> you to read the spec</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font>

359
00:14:01,420 --> 00:14:05,199
like it's<font color="#E5E5E5"> just it's very so</font>

360
00:14:02,650 --> 00:14:06,490
full-featured you know<font color="#E5E5E5"> you can make</font><font color="#CCCCCC"> it</font>

361
00:14:05,200 --> 00:14:08,350
<font color="#E5E5E5">an execute code if you call the</font>

362
00:14:06,490 --> 00:14:10,660
constructor if you get a property if you

363
00:14:08,350 --> 00:14:12,190
get the property definition there's a

364
00:14:10,660 --> 00:14:15,069
very<font color="#E5E5E5"> very large number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> things you can</font>

365
00:14:12,190 --> 00:14:18,130
intercept<font color="#E5E5E5"> them using this method and it</font>

366
00:14:15,070 --> 00:14:20,830
<font color="#CCCCCC">causes</font><font color="#E5E5E5"> like a number of problems both in</font>

367
00:14:18,130 --> 00:14:23,260
browsers<font color="#CCCCCC"> are also</font><font color="#E5E5E5"> issues and flash due</font>

368
00:14:20,830 --> 00:14:25,930
to this<font color="#E5E5E5"> basically because this is</font>

369
00:14:23,260 --> 00:14:28,530
<font color="#E5E5E5">supported every single operation that</font>

370
00:14:25,930 --> 00:14:30,729
handles an object in JavaScript has to

371
00:14:28,530 --> 00:14:33,520
you<font color="#CCCCCC"> know consider the possibility that</font>

372
00:14:30,730 --> 00:14:34,360
the call could<font color="#E5E5E5"> be intercepted and you</font>

373
00:14:33,520 --> 00:14:35,439
know that's that's a hard<font color="#CCCCCC"> thing to</font>

374
00:14:34,360 --> 00:14:37,780
<font color="#CCCCCC">always have on your mind</font>

375
00:14:35,440 --> 00:14:39,760
there's always mistakes that<font color="#E5E5E5"> are due to</font>

376
00:14:37,780 --> 00:14:43,449
not realizing<font color="#CCCCCC"> that an object could be a</font>

377
00:14:39,760 --> 00:14:45,310
<font color="#E5E5E5">proxy here's one that happened in chakra</font>

378
00:14:43,450 --> 00:14:48,700
I'm one of the interceptors you can get

379
00:14:45,310 --> 00:14:52,569
on a proxy is on the prototype so when

380
00:14:48,700 --> 00:14:55,150
you you know<font color="#E5E5E5"> how I showed the proxy</font>

381
00:14:52,570 --> 00:14:56,260
chain if you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a or the prototype</font>

382
00:14:55,150 --> 00:14:57,760
<font color="#CCCCCC">chain if you</font><font color="#E5E5E5"> have a products again</font>

383
00:14:56,260 --> 00:14:59,410
that's not<font color="#E5E5E5"> true just at one point in the</font>

384
00:14:57,760 --> 00:15:03,819
chain you call a method<font color="#E5E5E5"> and then that</font>

385
00:14:59,410 --> 00:15:05,680
returns to the next prototype<font color="#E5E5E5"> and this</font>

386
00:15:03,820 --> 00:15:07,690
<font color="#CCCCCC">is unfortunate because in</font><font color="#E5E5E5"> chakra and</font>

387
00:15:05,680 --> 00:15:09,819
actually most engines I've looked at

388
00:15:07,690 --> 00:15:11,410
they perform a check when setting a

389
00:15:09,820 --> 00:15:13,060
prototype<font color="#E5E5E5"> you know it can</font><font color="#CCCCCC"> be certain</font>

390
00:15:11,410 --> 00:15:16,150
<font color="#E5E5E5">things can't be certain things and</font><font color="#CCCCCC"> even</font>

391
00:15:13,060 --> 00:15:18,670
more<font color="#E5E5E5"> sometimes you want to do things to</font>

392
00:15:16,150 --> 00:15:20,790
the object to make<font color="#E5E5E5"> it perform</font><font color="#CCCCCC"> better as</font>

393
00:15:18,670 --> 00:15:23,319
a prototype make it a certain type

394
00:15:20,790 --> 00:15:27,370
<font color="#E5E5E5">remove certain optimizations that sort</font>

395
00:15:23,320 --> 00:15:30,490
of thing and this doesn't happen if you

396
00:15:27,370 --> 00:15:33,310
have a proxy<font color="#E5E5E5"> giving back the prototype</font>

397
00:15:30,490 --> 00:15:35,920
so in this case this<font color="#CCCCCC"> is a function</font>

398
00:15:33,310 --> 00:15:38,920
internal feel from array and this is if

399
00:15:35,920 --> 00:15:40,209
you for example sort<font color="#E5E5E5"> an array you want</font>

400
00:15:38,920 --> 00:15:41,890
to get all the<font color="#E5E5E5"> objects out of</font><font color="#CCCCCC"> the</font>

401
00:15:40,210 --> 00:15:44,890
prototype first before you sort it

402
00:15:41,890 --> 00:15:47,920
<font color="#E5E5E5">otherwise</font><font color="#CCCCCC"> sort will become more complex</font>

403
00:15:44,890 --> 00:15:49,510
<font color="#E5E5E5">so before it costs or it will use this</font>

404
00:15:47,920 --> 00:15:50,920
function<font color="#E5E5E5"> to get all the properties of</font>

405
00:15:49,510 --> 00:15:51,590
the prototype and put<font color="#E5E5E5"> them into the main</font>

406
00:15:50,920 --> 00:15:55,430
array

407
00:15:51,590 --> 00:15:57,260
for sorting it<font color="#E5E5E5"> and this one you</font><font color="#CCCCCC"> can see</font>

408
00:15:55,430 --> 00:15:59,589
<font color="#E5E5E5">at the bottom it gets the prototype and</font>

409
00:15:57,260 --> 00:16:03,380
it made the assumption that<font color="#E5E5E5"> the</font>

410
00:15:59,590 --> 00:16:05,060
<font color="#E5E5E5">prototype is of a certain</font><font color="#CCCCCC"> type that it</font>

411
00:16:03,380 --> 00:16:06,740
is of<font color="#E5E5E5"> our array because normally when</font>

412
00:16:05,060 --> 00:16:08,989
you set the prototype of<font color="#CCCCCC"> an array and</font>

413
00:16:06,740 --> 00:16:10,130
<font color="#CCCCCC">make</font><font color="#E5E5E5"> sure that it's of our array but in</font>

414
00:16:08,990 --> 00:16:12,080
this case and that violates<font color="#E5E5E5"> that</font>

415
00:16:10,130 --> 00:16:15,020
<font color="#CCCCCC">assumption and it's once again type</font>

416
00:16:12,080 --> 00:16:17,720
confusion<font color="#E5E5E5"> I'm due to</font><font color="#CCCCCC"> this direct set</font>

417
00:16:15,020 --> 00:16:20,329
item at which only<font color="#E5E5E5"> works on certain</font>

418
00:16:17,720 --> 00:16:26,510
<font color="#E5E5E5">array types which is not guaranteed to</font>

419
00:16:20,330 --> 00:16:28,100
be<font color="#E5E5E5"> the case and this is</font><font color="#CCCCCC"> the code here</font>

420
00:16:26,510 --> 00:16:30,020
I'm just to show how this works<font color="#CCCCCC"> to</font>

421
00:16:28,100 --> 00:16:33,310
<font color="#E5E5E5">create the proxy with the handler</font><font color="#CCCCCC"> and it</font>

422
00:16:30,020 --> 00:16:37,970
has the prototype intercepted at the<font color="#E5E5E5"> top</font>

423
00:16:33,310 --> 00:16:42,099
another fun feature of<font color="#CCCCCC"> javascript is new</font>

424
00:16:37,970 --> 00:16:44,630
target and this<font color="#E5E5E5"> is another kind of weird</font>

425
00:16:42,100 --> 00:16:46,460
<font color="#E5E5E5">property you it gets used for</font><font color="#CCCCCC"> sub</font>

426
00:16:44,630 --> 00:16:48,470
<font color="#CCCCCC">classing but you can also</font><font color="#E5E5E5"> just use it</font>

427
00:16:46,460 --> 00:16:51,160
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> using reflect to create any object</font>

428
00:16:48,470 --> 00:16:54,860
you<font color="#E5E5E5"> want with any prototype you want and</font>

429
00:16:51,160 --> 00:16:56,930
<font color="#E5E5E5">it's not that frequently used but what's</font>

430
00:16:54,860 --> 00:16:59,210
interesting is implemented in<font color="#E5E5E5"> chakra so</font>

431
00:16:56,930 --> 00:17:01,400
that if you have new target on a

432
00:16:59,210 --> 00:17:03,080
function it's<font color="#CCCCCC"> just an extra parameter</font><font color="#E5E5E5"> so</font>

433
00:17:01,400 --> 00:17:04,490
they'll push the extra<font color="#E5E5E5"> parameter on the</font>

434
00:17:03,080 --> 00:17:06,410
stack and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> increment it and then</font>

435
00:17:04,490 --> 00:17:08,959
have a flag which was<font color="#E5E5E5"> great but</font>

436
00:17:06,410 --> 00:17:11,090
unfortunately<font color="#E5E5E5"> another call also</font><font color="#CCCCCC"> did this</font>

437
00:17:08,959 --> 00:17:14,990
<font color="#CCCCCC">or something</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> so this was a</font>

438
00:17:11,089 --> 00:17:18,050
really fun bug basically if you create a

439
00:17:14,990 --> 00:17:20,030
proxy<font color="#E5E5E5"> which does new target on a Val</font>

440
00:17:18,050 --> 00:17:23,000
you'll get type confusion because<font color="#CCCCCC"> eval</font>

441
00:17:20,030 --> 00:17:25,069
can also get a extra<font color="#CCCCCC"> Arg for another</font>

442
00:17:23,000 --> 00:17:29,120
<font color="#CCCCCC">reason I</font><font color="#E5E5E5"> really like this bug because</font>

443
00:17:25,069 --> 00:17:32,090
<font color="#E5E5E5">you can tweet it</font><font color="#CCCCCC"> it if you had</font><font color="#E5E5E5"> a proxy</font>

444
00:17:29,120 --> 00:17:34,969
on eval it's a fairly bad type confusion

445
00:17:32,090 --> 00:17:36,800
and this is kind of<font color="#E5E5E5"> I'd say also</font><font color="#CCCCCC"> a case</font>

446
00:17:34,970 --> 00:17:38,560
of untested<font color="#E5E5E5"> code I'm a lot of the other</font>

447
00:17:36,800 --> 00:17:40,220
stuff I<font color="#CCCCCC"> shows you is kind of weird</font>

448
00:17:38,560 --> 00:17:41,870
<font color="#CCCCCC">JavaScript this is something you</font>

449
00:17:40,220 --> 00:17:43,250
absolutely<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to do if</font>

450
00:17:41,870 --> 00:17:45,590
you're going<font color="#CCCCCC"> to write your javascript in</font>

451
00:17:43,250 --> 00:17:49,010
<font color="#CCCCCC">vigor in JavaScript</font><font color="#E5E5E5"> and I guess just</font><font color="#CCCCCC"> no</font>

452
00:17:45,590 --> 00:17:51,080
one ever tried it and<font color="#E5E5E5"> then there's this</font>

453
00:17:49,010 --> 00:17:53,060
<font color="#E5E5E5">last bug you know not every bug is due</font>

454
00:17:51,080 --> 00:17:55,850
to you<font color="#CCCCCC"> know we our JavaScript features</font>

455
00:17:53,060 --> 00:17:58,940
sometimes<font color="#E5E5E5"> mistakes happen</font><font color="#CCCCCC"> and there was</font>

456
00:17:55,850 --> 00:18:01,189
this one where this I<font color="#E5E5E5"> served as</font><font color="#CCCCCC"> a bottom</font>

457
00:17:58,940 --> 00:18:02,720
I think<font color="#E5E5E5"> wasn't very much intended to be</font>

458
00:18:01,190 --> 00:18:06,190
some sort<font color="#E5E5E5"> of hard error</font>

459
00:18:02,720 --> 00:18:09,320
but it<font color="#E5E5E5"> wasn't so this is just a simple</font>

460
00:18:06,190 --> 00:18:10,760
uninitialized variable if you have<font color="#E5E5E5"> one</font>

461
00:18:09,320 --> 00:18:12,439
<font color="#E5E5E5">two or three</font><font color="#CCCCCC"> yards it does the</font><font color="#E5E5E5"> right</font>

462
00:18:10,760 --> 00:18:14,408
thing if you have more args it just<font color="#CCCCCC"> stem</font>

463
00:18:12,440 --> 00:18:17,270
falls through and<font color="#E5E5E5"> doesn't initialize it</font>

464
00:18:14,409 --> 00:18:22,490
<font color="#CCCCCC">and this was also I'm wonderfully</font>

465
00:18:17,270 --> 00:18:24,889
tweetable<font color="#CCCCCC"> very easy bug to reproduce so</font>

466
00:18:22,490 --> 00:18:26,900
that's it<font color="#CCCCCC"> I think from doing this I</font>

467
00:18:24,890 --> 00:18:28,580
learned a lot<font color="#E5E5E5"> about how the micro</font><font color="#CCCCCC"> script</font>

468
00:18:26,900 --> 00:18:30,860
implementation choices lead to bugs

469
00:18:28,580 --> 00:18:33,770
<font color="#CCCCCC">there's lots of things in JavaScript</font>

470
00:18:30,860 --> 00:18:36,500
<font color="#CCCCCC">that are very unusual</font><font color="#E5E5E5"> and not</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> well</font>

471
00:18:33,770 --> 00:18:38,450
used in web pages and you know can lead

472
00:18:36,500 --> 00:18:40,850
to a large<font color="#CCCCCC"> number of bugs</font><font color="#E5E5E5"> so it's a you</font>

473
00:18:38,450 --> 00:18:42,679
<font color="#CCCCCC">know you're doing this on yourself learn</font>

474
00:18:40,850 --> 00:18:45,408
about<font color="#CCCCCC"> the vendor use features and</font>

475
00:18:42,679 --> 00:18:49,549
especially<font color="#E5E5E5"> the ones</font><font color="#CCCCCC"> that add in to</font><font color="#E5E5E5"> em in</font>

476
00:18:45,409 --> 00:18:51,590
execution points and you could think

477
00:18:49,549 --> 00:18:53,230
<font color="#E5E5E5">you'll find a lot</font><font color="#CCCCCC"> more bugs</font><font color="#E5E5E5"> and then I'm</font>

478
00:18:51,590 --> 00:18:56,330
going<font color="#E5E5E5"> to end with a bit</font><font color="#CCCCCC"> of a call to</font>

479
00:18:53,230 --> 00:18:59,270
<font color="#E5E5E5">join the party</font><font color="#CCCCCC"> a few</font><font color="#E5E5E5"> people have</font><font color="#CCCCCC"> been</font>

480
00:18:56,330 --> 00:19:00,889
working<font color="#E5E5E5"> on chakra</font><font color="#CCCCCC"> not very many yet so</font>

481
00:18:59,270 --> 00:19:02,960
I'd encourage everyone<font color="#E5E5E5"> you know if you</font>

482
00:19:00,890 --> 00:19:04,880
thought<font color="#E5E5E5"> these bugs are</font><font color="#CCCCCC"> cool you</font><font color="#E5E5E5"> know try</font>

483
00:19:02,960 --> 00:19:07,970
your hand at it<font color="#CCCCCC"> I bet there's a lot</font><font color="#E5E5E5"> more</font>

484
00:19:04,880 --> 00:19:10,100
bikes to be<font color="#CCCCCC"> found that's it I thanks a</font>

485
00:19:07,970 --> 00:19:12,080
<font color="#E5E5E5">lot and if anyone has any questions they</font>

486
00:19:10,100 --> 00:19:17,139
can<font color="#CCCCCC"> ask them</font>

487
00:19:12,080 --> 00:19:17,139
[Applause]

