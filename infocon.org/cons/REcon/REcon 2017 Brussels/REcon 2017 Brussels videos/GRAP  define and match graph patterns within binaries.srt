1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,420 --> 00:00:13,309
<font color="#E5E5E5">Tom Arnold 2017</font>

3
00:00:16,320 --> 00:00:18,379
you

4
00:00:20,120 --> 00:00:25,980
<font color="#CCCCCC">okay so we're going to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font>

5
00:00:23,760 --> 00:00:27,510
but emerging within binaries<font color="#E5E5E5"> and the</font>

6
00:00:25,980 --> 00:00:30,590
button that we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> design our</font>

7
00:00:27,510 --> 00:00:32,910
graphs<font color="#E5E5E5"> so we will see how we can write</font>

8
00:00:30,590 --> 00:00:34,890
pattern that graph<font color="#CCCCCC"> and match them</font><font color="#E5E5E5"> within</font>

9
00:00:32,910 --> 00:00:38,940
binaries<font color="#E5E5E5"> just a quick</font><font color="#CCCCCC"> words about</font>

10
00:00:34,890 --> 00:00:41,670
ourselves<font color="#CCCCCC"> so I am voluntary I'm Malou</font>

11
00:00:38,940 --> 00:00:42,089
<font color="#E5E5E5">analyst at Airbus and I'm Jenna thank</font>

12
00:00:41,670 --> 00:00:44,010
you

13
00:00:42,090 --> 00:00:48,840
I'm also a malware<font color="#E5E5E5"> on a list but</font><font color="#CCCCCC"> that</font>

14
00:00:44,010 --> 00:00:51,570
<font color="#CCCCCC">storm shield so through our presentation</font>

15
00:00:48,840 --> 00:00:53,370
<font color="#E5E5E5">we will talk about malware sample which</font>

16
00:00:51,570 --> 00:00:55,940
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> backspace actually that's more like</font>

17
00:00:53,370 --> 00:01:00,449
a malware family<font color="#E5E5E5"> it was first seen in</font>

18
00:00:55,940 --> 00:01:03,420
2015<font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> what so what we found</font>

19
00:01:00,449 --> 00:01:06,149
in what is<font color="#E5E5E5"> what we find in the back</font>

20
00:01:03,420 --> 00:01:07,490
space is a small decryption function

21
00:01:06,150 --> 00:01:09,900
that will decrypt encrypted

22
00:01:07,490 --> 00:01:13,740
configuration variables such as<font color="#E5E5E5"> C and</font>

23
00:01:09,900 --> 00:01:16,590
<font color="#CCCCCC">C's for our registry entries so what we</font>

24
00:01:13,740 --> 00:01:18,929
see is that the decryption<font color="#E5E5E5"> function is</font>

25
00:01:16,590 --> 00:01:22,049
quite simple<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> routine here</font>

26
00:01:18,930 --> 00:01:24,600
we can see<font color="#E5E5E5"> it on the left so</font><font color="#CCCCCC"> you have</font>

27
00:01:22,049 --> 00:01:27,090
simply<font color="#CCCCCC"> a loop with a call which has an</font>

28
00:01:24,600 --> 00:01:30,390
<font color="#CCCCCC">argument 11 then followed with a serve</font>

29
00:01:27,090 --> 00:01:34,460
that has as argument 25 in the<font color="#CCCCCC"> backspace</font>

30
00:01:30,390 --> 00:01:39,300
family we<font color="#CCCCCC"> find many variants of this</font>

31
00:01:34,460 --> 00:01:41,729
<font color="#E5E5E5">decryption sample so with this kind of</font>

32
00:01:39,300 --> 00:01:43,860
family<font color="#E5E5E5"> what we want to do is first to do</font>

33
00:01:41,730 --> 00:01:46,530
detection so<font color="#CCCCCC"> they detect the</font><font color="#E5E5E5"> malware</font>

34
00:01:43,860 --> 00:01:48,600
<font color="#CCCCCC">then to classify the variants based on</font>

35
00:01:46,530 --> 00:01:51,150
the decryption<font color="#E5E5E5"> algorithm that is</font><font color="#CCCCCC"> used</font>

36
00:01:48,600 --> 00:01:53,460
and then to be able<font color="#E5E5E5"> to decrypt the</font>

37
00:01:51,150 --> 00:01:56,640
configuration variables since we know

38
00:01:53,460 --> 00:01:58,800
which algorithm is being used<font color="#E5E5E5"> one thing</font>

39
00:01:56,640 --> 00:02:01,530
you can use to do that<font color="#CCCCCC"> is to use the app</font>

40
00:01:58,800 --> 00:02:04,050
<font color="#CCCCCC">RI it works on</font><font color="#E5E5E5"> bytes so it will</font><font color="#CCCCCC"> write a</font>

41
00:02:01,530 --> 00:02:06,060
regular expressions and<font color="#E5E5E5"> byte and so it</font>

42
00:02:04,050 --> 00:02:08,250
will<font color="#E5E5E5"> look like the</font><font color="#CCCCCC"> following expression</font>

43
00:02:06,060 --> 00:02:10,470
you will save<font color="#E5E5E5"> in order to detect the jaw</font>

44
00:02:08,250 --> 00:02:13,319
with the then the served you will say<font color="#CCCCCC"> ok</font>

45
00:02:10,470 --> 00:02:15,840
I need<font color="#E5E5E5"> the byte 80 then I need any bite</font>

46
00:02:13,319 --> 00:02:18,208
you can take anybody<font color="#CCCCCC"> any debate 11 which</font>

47
00:02:15,840 --> 00:02:21,269
is<font color="#CCCCCC"> the argument</font><font color="#E5E5E5"> here of the drawer 11</font>

48
00:02:18,209 --> 00:02:23,519
then I need the<font color="#CCCCCC"> bad is about</font><font color="#E5E5E5"> 80 then any</font>

49
00:02:21,269 --> 00:02:27,360
<font color="#E5E5E5">bytes then the by 25 which is the</font>

50
00:02:23,519 --> 00:02:28,520
<font color="#E5E5E5">argument of sub but this way of</font><font color="#CCCCCC"> writing</font>

51
00:02:27,360 --> 00:02:30,950
<font color="#E5E5E5">a</font>

52
00:02:28,520 --> 00:02:32,840
<font color="#E5E5E5">a matching</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> signature is not really</font>

53
00:02:30,950 --> 00:02:35,359
easy<font color="#E5E5E5"> to read so what we wanted to do</font>

54
00:02:32,840 --> 00:02:37,430
with<font color="#E5E5E5"> grab was to add signatures that are</font>

55
00:02:35,360 --> 00:02:39,890
<font color="#E5E5E5">based on the instructions that</font><font color="#CCCCCC"> are</font>

56
00:02:37,430 --> 00:02:42,550
<font color="#E5E5E5">within the binary and how they are</font>

57
00:02:39,890 --> 00:02:44,839
linked<font color="#CCCCCC"> to</font><font color="#E5E5E5"> each other so the kind of</font>

58
00:02:42,550 --> 00:02:47,450
signature<font color="#E5E5E5"> that we want to do is to say</font>

59
00:02:44,840 --> 00:02:50,150
<font color="#E5E5E5">for this</font><font color="#CCCCCC"> sample we want to say</font><font color="#E5E5E5"> okay if</font>

60
00:02:47,450 --> 00:02:52,790
now find me absorb that has as argument

61
00:02:50,150 --> 00:02:57,680
<font color="#CCCCCC">211 and it is directly followed with a</font>

62
00:02:52,790 --> 00:02:59,420
sub that has had argument<font color="#CCCCCC"> 225 I'll</font>

63
00:02:57,680 --> 00:03:01,990
present a quick<font color="#E5E5E5"> overview of the web</font>

64
00:02:59,420 --> 00:03:05,839
project<font color="#E5E5E5"> so since we're working</font><font color="#CCCCCC"> on graphs</font>

65
00:03:01,990 --> 00:03:09,590
<font color="#E5E5E5">we</font><font color="#CCCCCC"> used the dart language</font><font color="#E5E5E5"> to represent</font>

66
00:03:05,840 --> 00:03:12,140
graphs<font color="#CCCCCC"> that is a simple text file that</font>

67
00:03:09,590 --> 00:03:14,090
<font color="#CCCCCC">we will see a</font><font color="#E5E5E5"> lot of examples later but</font>

68
00:03:12,140 --> 00:03:17,750
it's quite simple to<font color="#E5E5E5"> write the graphs in</font>

69
00:03:14,090 --> 00:03:19,130
<font color="#E5E5E5">this language</font><font color="#CCCCCC"> and grab</font><font color="#E5E5E5"> these at the same</font>

70
00:03:17,750 --> 00:03:21,020
time it's under<font color="#CCCCCC"> own tool</font><font color="#E5E5E5"> that you can</font>

71
00:03:19,130 --> 00:03:24,380
use<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the command line then it has</font>

72
00:03:21,020 --> 00:03:27,050
Python bindings<font color="#E5E5E5"> to leverage the</font>

73
00:03:24,380 --> 00:03:28,549
algorithms from<font color="#CCCCCC"> grab from</font><font color="#E5E5E5"> Python and we</font>

74
00:03:27,050 --> 00:03:29,990
also developed an Ida<font color="#E5E5E5"> plugin so</font>

75
00:03:28,550 --> 00:03:34,430
everything is open source and<font color="#E5E5E5"> available</font>

76
00:03:29,990 --> 00:03:36,500
online<font color="#E5E5E5"> so</font><font color="#CCCCCC"> grab as two main components</font>

77
00:03:34,430 --> 00:03:40,550
<font color="#CCCCCC">the first one is</font><font color="#E5E5E5"> a dessert sampler that</font>

78
00:03:36,500 --> 00:03:42,140
<font color="#CCCCCC">will take binaries and give you a dot</font>

79
00:03:40,550 --> 00:03:45,230
<font color="#E5E5E5">file that is a graph representing the</font>

80
00:03:42,140 --> 00:03:47,390
binary so it's it's coded with Python

81
00:03:45,230 --> 00:03:49,369
<font color="#E5E5E5">and it's based on capstone</font><font color="#CCCCCC"> and the other</font>

82
00:03:47,390 --> 00:03:51,769
part<font color="#E5E5E5"> of graph is</font><font color="#CCCCCC"> a graph</font><font color="#E5E5E5"> matching your</font>

83
00:03:49,370 --> 00:03:53,780
<font color="#CCCCCC">libraries</font><font color="#E5E5E5"> that can pass dot</font><font color="#CCCCCC"> files and</font>

84
00:03:51,770 --> 00:03:56,800
then can do the graphs matching this

85
00:03:53,780 --> 00:04:01,400
part is more<font color="#CCCCCC"> coded</font><font color="#E5E5E5"> in C and C++</font>

86
00:03:56,800 --> 00:04:04,190
so a typical<font color="#E5E5E5"> workflow for our analysis</font>

87
00:04:01,400 --> 00:04:06,140
with grab will be to<font color="#E5E5E5"> write pattern so</font>

88
00:04:04,190 --> 00:04:07,430
that's what we have here<font color="#E5E5E5"> pattern dot</font><font color="#CCCCCC"> dot</font>

89
00:04:06,140 --> 00:04:09,019
so you will<font color="#E5E5E5"> write a pattern for</font>

90
00:04:07,430 --> 00:04:12,080
<font color="#CCCCCC">backspace then</font><font color="#E5E5E5"> you want to analyze</font>

91
00:04:09,020 --> 00:04:13,520
<font color="#E5E5E5">activate that agree so you give it to</font>

92
00:04:12,080 --> 00:04:14,660
the<font color="#CCCCCC"> desertion row</font><font color="#E5E5E5"> that will give you a</font>

93
00:04:13,520 --> 00:04:16,310
<font color="#E5E5E5">button</font>

94
00:04:14,660 --> 00:04:19,399
<font color="#E5E5E5">backspace that dot which is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> desert</font>

95
00:04:16,310 --> 00:04:22,070
<font color="#E5E5E5">animal part as a graph and then we will</font>

96
00:04:19,399 --> 00:04:24,349
give the pattern and these<font color="#CCCCCC"> are symbols</font>

97
00:04:22,070 --> 00:04:25,940
<font color="#E5E5E5">graph to the graph matching library that</font>

98
00:04:24,350 --> 00:04:27,970
will give you matches and<font color="#CCCCCC"> extracts the</font>

99
00:04:25,940 --> 00:04:29,810
instructions that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> were interested</font><font color="#E5E5E5"> in</font>

100
00:04:27,970 --> 00:04:34,550
so

101
00:04:29,810 --> 00:04:37,310
backspace is a binary<font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> it's a</font>

102
00:04:34,550 --> 00:04:40,409
sequence<font color="#CCCCCC"> of bytes</font><font color="#E5E5E5"> those bytes can be</font>

103
00:04:37,310 --> 00:04:43,379
interpreted in assembly language so

104
00:04:40,409 --> 00:04:46,709
<font color="#CCCCCC">a sequence of instructions so</font><font color="#E5E5E5"> we can see</font>

105
00:04:43,379 --> 00:04:51,259
the legs on the<font color="#E5E5E5"> subroutine for</font><font color="#CCCCCC"> the</font>

106
00:04:46,709 --> 00:04:55,769
encrypt the decryption<font color="#E5E5E5"> then we can</font>

107
00:04:51,259 --> 00:05:00,989
create<font color="#CCCCCC"> a</font><font color="#E5E5E5"> graph</font><font color="#CCCCCC"> theory so the</font><font color="#E5E5E5"> flow of the</font>

108
00:04:55,769 --> 00:05:02,999
execution of<font color="#E5E5E5"> the instruction</font><font color="#CCCCCC"> and in the</font>

109
00:05:00,989 --> 00:05:05,909
<font color="#E5E5E5">standalone rule we use recursive</font>

110
00:05:02,999 --> 00:05:10,999
<font color="#E5E5E5">function to</font><font color="#CCCCCC"> create this graph</font><font color="#E5E5E5"> and we are</font>

111
00:05:05,909 --> 00:05:14,459
best for<font color="#E5E5E5"> the disassembler in on capstone</font>

112
00:05:10,999 --> 00:05:19,349
but for the<font color="#CCCCCC"> Ida plug-in we use the</font><font color="#E5E5E5"> idle</font>

113
00:05:14,459 --> 00:05:22,610
<font color="#CCCCCC">engine for the graph so we can create</font>

114
00:05:19,349 --> 00:05:28,829
the graph at<font color="#E5E5E5"> the right we have</font>

115
00:05:22,610 --> 00:05:31,229
comfortable<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> French web</font><font color="#E5E5E5"> we have</font>

116
00:05:28,829 --> 00:05:34,019
the graph of<font color="#E5E5E5"> backspace</font><font color="#CCCCCC"> ok at the right</font>

117
00:05:31,229 --> 00:05:38,938
and we want to match<font color="#CCCCCC"> the pattern at the</font>

118
00:05:34,019 --> 00:05:42,509
<font color="#CCCCCC">left which is the</font><font color="#E5E5E5"> decryption routine to</font>

119
00:05:38,939 --> 00:05:46,110
do so we<font color="#CCCCCC"> use the usual we can use the</font>

120
00:05:42,509 --> 00:05:48,419
usual<font color="#E5E5E5"> algorithm so at the left we have</font>

121
00:05:46,110 --> 00:05:51,629
<font color="#CCCCCC">the</font><font color="#E5E5E5"> pattern and at the right we</font><font color="#CCCCCC"> have the</font>

122
00:05:48,419 --> 00:05:55,139
test graph and the goal<font color="#E5E5E5"> is just to</font>

123
00:05:51,629 --> 00:05:57,809
search the first<font color="#E5E5E5"> call</font><font color="#CCCCCC"> so okay we found</font>

124
00:05:55,139 --> 00:06:00,749
<font color="#E5E5E5">the</font><font color="#CCCCCC"> first call</font><font color="#E5E5E5"> then we got to look to</font>

125
00:05:57,809 --> 00:06:03,209
<font color="#E5E5E5">the children there is an</font><font color="#CCCCCC"> ad</font><font color="#E5E5E5"> so we got to</font>

126
00:06:00,749 --> 00:06:05,519
look<font color="#E5E5E5"> to the right we have the</font><font color="#CCCCCC"> absorb</font><font color="#E5E5E5"> so</font>

127
00:06:03,209 --> 00:06:08,610
<font color="#CCCCCC">we</font><font color="#E5E5E5"> got to try the other child so we have</font>

128
00:06:05,519 --> 00:06:12,119
the push so we got a search for another

129
00:06:08,610 --> 00:06:15,089
<font color="#E5E5E5">call so</font><font color="#CCCCCC"> okay we match a</font><font color="#E5E5E5"> coal the same</font>

130
00:06:12,119 --> 00:06:17,759
<font color="#E5E5E5">things we have a head so we could we go</font>

131
00:06:15,089 --> 00:06:20,459
to look to the push at the right the

132
00:06:17,759 --> 00:06:23,629
right children<font color="#E5E5E5"> and</font><font color="#CCCCCC"> no so we</font><font color="#E5E5E5"> tried</font><font color="#CCCCCC"> the</font>

133
00:06:20,459 --> 00:06:27,419
<font color="#CCCCCC">other one yeah we match the ad so again</font>

134
00:06:23,629 --> 00:06:31,409
there is a cone<font color="#E5E5E5"> yeah there is a compound</font>

135
00:06:27,419 --> 00:06:36,239
okay<font color="#E5E5E5"> so next and so on so we found a</font>

136
00:06:31,409 --> 00:06:38,729
push<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and so on okay it's pretty</font>

137
00:06:36,239 --> 00:06:42,899
<font color="#E5E5E5">simple but you need to check every child</font>

138
00:06:38,729 --> 00:06:47,550
of the node and it's pretty<font color="#CCCCCC"> flow</font><font color="#E5E5E5"> on big</font>

139
00:06:42,899 --> 00:06:49,559
graphs so since the usual solution<font color="#CCCCCC"> is</font>

140
00:06:47,550 --> 00:06:51,509
<font color="#E5E5E5">pretty slow and grab and de</font><font color="#CCCCCC"> Grasse we</font>

141
00:06:49,559 --> 00:06:52,960
<font color="#CCCCCC">want it to have a fast resolution so</font><font color="#E5E5E5"> we</font>

142
00:06:51,509 --> 00:06:55,690
want it to a different algorithm

143
00:06:52,960 --> 00:06:57,849
so one thing<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can say about control</font>

144
00:06:55,690 --> 00:07:00,610
progress is<font color="#CCCCCC"> that they are not any graphs</font>

145
00:06:57,850 --> 00:07:02,470
so the first<font color="#E5E5E5"> property they have is that</font>

146
00:07:00,610 --> 00:07:05,500
usually when<font color="#CCCCCC"> you're when you will</font><font color="#E5E5E5"> do</font>

147
00:07:02,470 --> 00:07:07,120
decimal<font color="#CCCCCC"> them you'll see that</font><font color="#E5E5E5"> a node in</font>

148
00:07:05,500 --> 00:07:08,889
the control<font color="#E5E5E5"> flow graph</font><font color="#CCCCCC"> are that</font><font color="#E5E5E5"> most</font><font color="#CCCCCC"> 2</font>

149
00:07:07,120 --> 00:07:12,760
children<font color="#CCCCCC"> it happens when you have</font><font color="#E5E5E5"> for</font>

150
00:07:08,889 --> 00:07:14,860
<font color="#E5E5E5">instance</font><font color="#CCCCCC"> quick sorry a conditional jump</font>

151
00:07:12,760 --> 00:07:16,930
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> a 1 check that will be reached</font>

152
00:07:14,860 --> 00:07:17,980
<font color="#CCCCCC">when the condition is</font><font color="#E5E5E5"> fulfilled and one</font>

153
00:07:16,930 --> 00:07:19,900
child<font color="#CCCCCC"> that</font><font color="#E5E5E5"> will be</font><font color="#CCCCCC"> reached when the</font>

154
00:07:17,980 --> 00:07:22,090
<font color="#E5E5E5">condition is</font><font color="#CCCCCC"> not fulfilled</font><font color="#E5E5E5"> so that's the</font>

155
00:07:19,900 --> 00:07:25,299
first property we have in control for

156
00:07:22,090 --> 00:07:27,159
graph another<font color="#E5E5E5"> property</font><font color="#CCCCCC"> that the children</font>

157
00:07:25,300 --> 00:07:31,360
are<font color="#CCCCCC"> not symmetrical usually you will</font>

158
00:07:27,160 --> 00:07:32,740
find that one<font color="#CCCCCC"> of the child is directly</font>

159
00:07:31,360 --> 00:07:35,290
<font color="#E5E5E5">the following instruction at the next</font>

160
00:07:32,740 --> 00:07:36,729
address<font color="#E5E5E5"> and the other child is a remote</font>

161
00:07:35,290 --> 00:07:39,280
instruction somewhere else in the

162
00:07:36,729 --> 00:07:42,010
<font color="#CCCCCC">program</font><font color="#E5E5E5"> so we cannot invert them so we</font>

163
00:07:39,280 --> 00:07:44,440
will force that<font color="#E5E5E5"> in your graph you</font><font color="#CCCCCC"> cannot</font>

164
00:07:42,010 --> 00:07:46,780
invert the order<font color="#CCCCCC"> of children so what you</font>

165
00:07:44,440 --> 00:07:49,090
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to see now is that once we say</font><font color="#E5E5E5"> that</font>

166
00:07:46,780 --> 00:07:50,650
<font color="#E5E5E5">children are order in the graphs the</font>

167
00:07:49,090 --> 00:07:52,479
<font color="#CCCCCC">object</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> manipulating and not</font>

168
00:07:50,650 --> 00:07:56,469
really graphs anymore and that will help

169
00:07:52,479 --> 00:07:58,719
us have<font color="#CCCCCC"> a very fast matching the other</font>

170
00:07:56,470 --> 00:08:00,400
thing we can<font color="#CCCCCC"> say about patterns</font><font color="#E5E5E5"> so I</font>

171
00:07:58,720 --> 00:08:02,890
talked<font color="#CCCCCC"> about control flow graphs in</font>

172
00:08:00,400 --> 00:08:05,289
general but patterns are specific as

173
00:08:02,890 --> 00:08:07,390
which so earlier it's easier to match

174
00:08:05,289 --> 00:08:09,610
them from their first node so we<font color="#CCCCCC"> will</font>

175
00:08:07,390 --> 00:08:12,940
fault that every pattern has the first

176
00:08:09,610 --> 00:08:16,780
node so the first node it's a root<font color="#E5E5E5"> node</font>

177
00:08:12,940 --> 00:08:18,400
that that from this node<font color="#CCCCCC"> every other</font>

178
00:08:16,780 --> 00:08:20,080
node of the graph<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be reached so on</font>

179
00:08:18,400 --> 00:08:22,060
the example on the right<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> our</font>

180
00:08:20,080 --> 00:08:23,500
button for<font color="#CCCCCC"> backspace</font><font color="#E5E5E5"> you have the first</font>

181
00:08:22,060 --> 00:08:25,090
node on<font color="#CCCCCC"> the top which is a root node</font>

182
00:08:23,500 --> 00:08:27,820
because from from<font color="#CCCCCC"> its you</font><font color="#E5E5E5"> can reach</font>

183
00:08:25,090 --> 00:08:29,429
every other node<font color="#E5E5E5"> okay so with this</font>

184
00:08:27,820 --> 00:08:31,210
restriction<font color="#E5E5E5"> we will have phase matching</font>

185
00:08:29,430 --> 00:08:34,000
<font color="#CCCCCC">I'll explain why</font>

186
00:08:31,210 --> 00:08:36,458
so this<font color="#E5E5E5"> slide will show</font><font color="#CCCCCC"> you how we</font><font color="#E5E5E5"> can</font>

187
00:08:34,000 --> 00:08:39,909
<font color="#CCCCCC">represent a pattern</font><font color="#E5E5E5"> or on a different</font>

188
00:08:36,458 --> 00:08:42,280
<font color="#CCCCCC">form</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> pattern we have</font><font color="#E5E5E5"> now are what</font>

189
00:08:39,909 --> 00:08:44,290
we see on the<font color="#CCCCCC"> left so we have a curl and</font>

190
00:08:42,280 --> 00:08:46,360
<font color="#CCCCCC">added compare the new push on the</font><font color="#E5E5E5"> push</font>

191
00:08:44,290 --> 00:08:47,860
and<font color="#E5E5E5"> the children</font><font color="#CCCCCC"> are order we have child</font>

192
00:08:46,360 --> 00:08:50,830
<font color="#E5E5E5">number</font><font color="#CCCCCC"> one and child number</font><font color="#E5E5E5"> two and</font>

193
00:08:47,860 --> 00:08:52,930
child number one here so there is with

194
00:08:50,830 --> 00:08:55,690
<font color="#E5E5E5">this kind of thing since we have a root</font>

195
00:08:52,930 --> 00:08:58,959
node which<font color="#E5E5E5"> is so cool there is</font><font color="#CCCCCC"> a unique</font>

196
00:08:55,690 --> 00:09:01,000
way to<font color="#E5E5E5"> number this graph with a</font>

197
00:08:58,959 --> 00:09:03,069
depth-first search<font color="#CCCCCC"> so that is the</font>

198
00:09:01,000 --> 00:09:04,720
following<font color="#CCCCCC"> I take the root node so</font>

199
00:09:03,070 --> 00:09:07,000
difficult<font color="#CCCCCC"> I</font>

200
00:09:04,720 --> 00:09:09,910
this one<font color="#E5E5E5"> one then they take the first</font>

201
00:09:07,000 --> 00:09:12,220
child<font color="#E5E5E5"> of the call I get here to the ad</font>

202
00:09:09,910 --> 00:09:14,050
<font color="#E5E5E5">I'm number</font><font color="#CCCCCC"> it to</font><font color="#E5E5E5"> then I take the first</font>

203
00:09:12,220 --> 00:09:16,420
<font color="#E5E5E5">child and number is three then I go back</font>

204
00:09:14,050 --> 00:09:18,490
<font color="#CCCCCC">to the call I will do to the child</font>

205
00:09:16,420 --> 00:09:21,160
<font color="#E5E5E5">number two number</font><font color="#CCCCCC"> H four</font><font color="#E5E5E5"> and go to the</font>

206
00:09:18,490 --> 00:09:24,160
<font color="#CCCCCC">chine number one number is five so I can</font>

207
00:09:21,160 --> 00:09:26,560
describe it<font color="#E5E5E5"> in a text way as this so</font>

208
00:09:24,160 --> 00:09:28,990
<font color="#E5E5E5">it's equivalent to the pattern and that</font>

209
00:09:26,560 --> 00:09:32,050
means<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I'm looking</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> button for</font>

210
00:09:28,990 --> 00:09:34,569
<font color="#E5E5E5">a graph which</font><font color="#CCCCCC"> has as a first Noda</font><font color="#E5E5E5"> cool</font>

211
00:09:32,050 --> 00:09:37,990
then it<font color="#CCCCCC"> has a first</font><font color="#E5E5E5"> child if you take it</font>

212
00:09:34,569 --> 00:09:39,670
<font color="#E5E5E5">you get to an ad then I take again</font><font color="#CCCCCC"> the</font>

213
00:09:37,990 --> 00:09:43,180
first child<font color="#E5E5E5"> if you take it to get to a</font>

214
00:09:39,670 --> 00:09:45,790
compare then you go back<font color="#E5E5E5"> to the first to</font>

215
00:09:43,180 --> 00:09:47,800
the node number 1<font color="#E5E5E5"> which was</font><font color="#CCCCCC"> the call so</font>

216
00:09:45,790 --> 00:09:49,449
you go<font color="#E5E5E5"> back here and say okay</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> you</font>

217
00:09:47,800 --> 00:09:51,969
take a little child<font color="#E5E5E5"> number</font><font color="#CCCCCC"> 2 and</font><font color="#E5E5E5"> you get</font>

218
00:09:49,449 --> 00:09:54,189
to a push<font color="#E5E5E5"> then take the 5 mm the child</font>

219
00:09:51,970 --> 00:09:57,610
number<font color="#CCCCCC"> 1 and get</font><font color="#E5E5E5"> to another push so this</font>

220
00:09:54,189 --> 00:09:59,290
representation<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> text where this text</font>

221
00:09:57,610 --> 00:10:02,050
representation is equivalent to<font color="#E5E5E5"> the</font>

222
00:09:59,290 --> 00:10:04,930
pattern representation as a graph so

223
00:10:02,050 --> 00:10:06,670
once you have this we were the question

224
00:10:04,930 --> 00:10:08,410
we need to ask is can we<font color="#CCCCCC"> perform the</font>

225
00:10:06,670 --> 00:10:10,360
traversal<font color="#E5E5E5"> of the pattern within the test</font>

226
00:10:08,410 --> 00:10:11,500
graph so we<font color="#E5E5E5"> saw</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the pattern on</font><font color="#CCCCCC"> the</font>

227
00:10:10,360 --> 00:10:13,149
left<font color="#E5E5E5"> is equivalent to the text</font>

228
00:10:11,500 --> 00:10:17,279
representation<font color="#CCCCCC"> I add</font><font color="#E5E5E5"> some color because</font>

229
00:10:13,149 --> 00:10:20,439
<font color="#CCCCCC">it's nicer with karora</font><font color="#E5E5E5"> yes it is okay so</font>

230
00:10:17,279 --> 00:10:22,629
now it's easier<font color="#E5E5E5"> I need to find the first</font>

231
00:10:20,439 --> 00:10:23,860
<font color="#E5E5E5">thing I need</font><font color="#CCCCCC"> to do is to find</font><font color="#E5E5E5"> root</font><font color="#CCCCCC"> note</font>

232
00:10:22,629 --> 00:10:25,750
that would be a<font color="#E5E5E5"> call so I have a</font>

233
00:10:23,860 --> 00:10:28,269
candidate and<font color="#E5E5E5"> the right here which</font><font color="#CCCCCC"> is</font>

234
00:10:25,750 --> 00:10:30,610
this one then<font color="#E5E5E5"> I get to the you know I</font>

235
00:10:28,269 --> 00:10:34,389
get to<font color="#E5E5E5"> the add part so I need to see</font>

236
00:10:30,610 --> 00:10:35,949
here<font color="#CCCCCC"> if is there a node</font><font color="#E5E5E5"> a child number</font>

237
00:10:34,389 --> 00:10:37,509
<font color="#E5E5E5">one that we didn't add so I take the</font>

238
00:10:35,949 --> 00:10:39,910
child number<font color="#E5E5E5"> one here I get to</font><font color="#CCCCCC"> observe</font>

239
00:10:37,509 --> 00:10:41,949
<font color="#CCCCCC">so it doesn't match I have to go back so</font>

240
00:10:39,910 --> 00:10:45,339
I have to find another root node that

241
00:10:41,949 --> 00:10:47,500
could be a cool so there is one<font color="#CCCCCC"> here now</font>

242
00:10:45,339 --> 00:10:49,389
I ask is there a child<font color="#E5E5E5"> number one that</font>

243
00:10:47,500 --> 00:10:51,279
is another yes I will number<font color="#E5E5E5"> this one</font>

244
00:10:49,389 --> 00:10:53,290
too<font color="#CCCCCC"> so I get there is there a child</font>

245
00:10:51,279 --> 00:10:55,870
<font color="#E5E5E5">number one that is a compare yes it</font>

246
00:10:53,290 --> 00:10:58,480
works<font color="#E5E5E5"> then okay take me back to the</font>

247
00:10:55,870 --> 00:11:01,660
child number<font color="#CCCCCC"> two the node</font><font color="#E5E5E5"> number one so</font>

248
00:10:58,480 --> 00:11:03,370
back to the call so I get there I<font color="#E5E5E5"> ask is</font>

249
00:11:01,660 --> 00:11:06,759
there a child number<font color="#E5E5E5"> two that is</font><font color="#CCCCCC"> a push</font>

250
00:11:03,370 --> 00:11:10,110
it works<font color="#E5E5E5"> I say is there a child number</font>

251
00:11:06,759 --> 00:11:14,410
one that is a push it also works so this

252
00:11:10,110 --> 00:11:15,970
gives us a matching for the pattern from

253
00:11:14,410 --> 00:11:17,280
the pattern to the<font color="#E5E5E5"> test web so</font><font color="#CCCCCC"> that is</font>

254
00:11:15,970 --> 00:11:19,710
the algorithm<font color="#E5E5E5"> that we will</font>

255
00:11:17,280 --> 00:11:22,199
so the difference with the<font color="#CCCCCC"> previous</font>

256
00:11:19,710 --> 00:11:25,800
algorithm<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that now</font><font color="#E5E5E5"> that children</font><font color="#CCCCCC"> are</font>

257
00:11:22,200 --> 00:11:27,330
ordered<font color="#CCCCCC"> use we saw that we know that</font>

258
00:11:25,800 --> 00:11:29,130
we're looking<font color="#CCCCCC"> for child number 1</font><font color="#E5E5E5"> or</font>

259
00:11:27,330 --> 00:11:33,780
child<font color="#E5E5E5"> number 2 so you don't have the</font>

260
00:11:29,130 --> 00:11:35,880
exponential factor<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> you will</font><font color="#E5E5E5"> only</font>

261
00:11:33,780 --> 00:11:39,959
have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> premium last</font><font color="#E5E5E5"> time for matching</font>

262
00:11:35,880 --> 00:11:41,700
so it's much faster<font color="#CCCCCC"> okay so I</font><font color="#E5E5E5"> will stop</font>

263
00:11:39,960 --> 00:11:43,710
<font color="#CCCCCC">with algorithms now I will go back to</font>

264
00:11:41,700 --> 00:11:45,930
<font color="#E5E5E5">the pattern</font><font color="#CCCCCC"> so I talked about</font><font color="#E5E5E5"> how we can</font>

265
00:11:43,710 --> 00:11:48,510
match them but now<font color="#CCCCCC"> we'll say what our</font>

266
00:11:45,930 --> 00:11:51,989
<font color="#E5E5E5">patterns how do they look like</font><font color="#CCCCCC"> so on the</font>

267
00:11:48,510 --> 00:11:54,390
left you<font color="#CCCCCC"> have a pattern</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> backspace</font>

268
00:11:51,990 --> 00:11:55,950
which was a decryption with him<font color="#E5E5E5"> and so</font>

269
00:11:54,390 --> 00:11:57,600
we said that pattern<font color="#E5E5E5"> they are dot files</font>

270
00:11:55,950 --> 00:12:00,390
with specific fields because we will use

271
00:11:57,600 --> 00:12:02,490
<font color="#E5E5E5">like conditions we use conditions and up</font>

272
00:12:00,390 --> 00:12:03,780
close<font color="#E5E5E5"> on our</font><font color="#CCCCCC"> on arguments of</font>

273
00:12:02,490 --> 00:12:07,500
instructions on the<font color="#CCCCCC"> addresses</font>

274
00:12:03,780 --> 00:12:10,550
<font color="#CCCCCC">instruction so on so on</font><font color="#E5E5E5"> the right here</font>

275
00:12:07,500 --> 00:12:13,140
<font color="#CCCCCC">you have a an example</font><font color="#E5E5E5"> of a</font><font color="#CCCCCC"> pattern for a</font>

276
00:12:10,550 --> 00:12:15,089
for backspace that matches exactly<font color="#E5E5E5"> the</font>

277
00:12:13,140 --> 00:12:17,449
two instructions<font color="#CCCCCC"> door</font><font color="#E5E5E5"> and sub so what it</font>

278
00:12:15,090 --> 00:12:20,550
<font color="#E5E5E5">says here so it's a dot file it says</font>

279
00:12:17,450 --> 00:12:21,839
<font color="#E5E5E5">likewise that's a dot keyword then we</font>

280
00:12:20,550 --> 00:12:23,609
have the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the pattern so it</font>

281
00:12:21,839 --> 00:12:26,400
decrypts<font color="#E5E5E5"> with the Google</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the sub</font>

282
00:12:23,610 --> 00:12:28,920
<font color="#E5E5E5">then it has we say it has</font><font color="#CCCCCC"> node it has</font>

283
00:12:26,400 --> 00:12:30,750
two<font color="#E5E5E5"> nodes the first node is a with the</font>

284
00:12:28,920 --> 00:12:33,150
condition and<font color="#E5E5E5"> the node is okay I want to</font>

285
00:12:30,750 --> 00:12:35,520
<font color="#E5E5E5">match an instruction</font><font color="#CCCCCC"> that has</font><font color="#E5E5E5"> Sora as</font>

286
00:12:33,150 --> 00:12:39,209
its sub code and has as argument<font color="#CCCCCC"> number</font>

287
00:12:35,520 --> 00:12:41,339
<font color="#E5E5E5">211</font><font color="#CCCCCC"> I have another</font><font color="#E5E5E5"> node that is B and</font>

288
00:12:39,210 --> 00:12:43,470
the condition is I want<font color="#E5E5E5"> to match an</font>

289
00:12:41,339 --> 00:12:46,410
<font color="#CCCCCC">opcode</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> 7</font><font color="#E5E5E5"> and that has as</font>

290
00:12:43,470 --> 00:12:48,360
argument<font color="#E5E5E5"> number 225</font><font color="#CCCCCC"> and then the part</font>

291
00:12:46,410 --> 00:12:51,959
here specifies<font color="#E5E5E5"> the edges so there is a</font>

292
00:12:48,360 --> 00:12:54,000
<font color="#CCCCCC">net from node a to not be so it means I</font>

293
00:12:51,960 --> 00:12:58,680
have a child from the base<font color="#E5E5E5"> that is not</font>

294
00:12:54,000 --> 00:13:02,339
be okay a few<font color="#CCCCCC"> more things about node</font>

295
00:12:58,680 --> 00:13:06,209
options<font color="#E5E5E5"> and Egyptians in our pattern</font>

296
00:13:02,339 --> 00:13:07,920
language so I said that the pattern

297
00:13:06,210 --> 00:13:09,450
graphs are supposed to have a root node

298
00:13:07,920 --> 00:13:11,760
that is a node from which you can reach

299
00:13:09,450 --> 00:13:14,780
every other node so in<font color="#CCCCCC"> order</font><font color="#E5E5E5"> to specify</font>

300
00:13:11,760 --> 00:13:17,550
<font color="#E5E5E5">this node</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to you can say</font>

301
00:13:14,780 --> 00:13:21,810
<font color="#CCCCCC">adsorption root is true that means</font><font color="#E5E5E5"> this</font>

302
00:13:17,550 --> 00:13:23,790
node is a root you have<font color="#E5E5E5"> the count field</font>

303
00:13:21,810 --> 00:13:25,589
that says specifies the condition so we

304
00:13:23,790 --> 00:13:29,390
so we<font color="#E5E5E5"> can have a</font><font color="#CCCCCC"> condition and of course</font>

305
00:13:25,589 --> 00:13:31,880
for<font color="#E5E5E5"> instance we have the gate idea</font><font color="#CCCCCC"> fly</font>

306
00:13:29,390 --> 00:13:33,920
<font color="#CCCCCC">you</font><font color="#E5E5E5"> get a diamond - it will tell</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> up</font>

307
00:13:31,880 --> 00:13:35,930
okay<font color="#CCCCCC"> when you find the match for this</font>

308
00:13:33,920 --> 00:13:37,699
<font color="#CCCCCC">note I'm</font><font color="#E5E5E5"> interested in</font><font color="#CCCCCC"> this in this</font>

309
00:13:35,930 --> 00:13:39,890
<font color="#E5E5E5">match so I want you to print it or I</font>

310
00:13:37,700 --> 00:13:43,490
want you to keep it aside so<font color="#CCCCCC"> I can</font>

311
00:13:39,890 --> 00:13:45,680
access<font color="#E5E5E5"> it later okay so that's</font><font color="#CCCCCC"> four node</font>

312
00:13:43,490 --> 00:13:48,050
<font color="#E5E5E5">options for trade options for edge of</font>

313
00:13:45,680 --> 00:13:50,030
edges option sorry<font color="#E5E5E5"> we thought that</font><font color="#CCCCCC"> child</font>

314
00:13:48,050 --> 00:13:52,099
<font color="#E5E5E5">are numbered either one or</font><font color="#CCCCCC"> two so we</font>

315
00:13:50,030 --> 00:13:53,630
have<font color="#CCCCCC"> an option</font><font color="#E5E5E5"> to specify on an edge if</font>

316
00:13:52,100 --> 00:13:57,140
it's a child number<font color="#E5E5E5"> one or child number</font>

317
00:13:53,630 --> 00:13:58,910
two so the example below is the same

318
00:13:57,140 --> 00:14:01,100
<font color="#E5E5E5">pattern</font><font color="#CCCCCC"> as previously</font><font color="#E5E5E5"> but with every</font>

319
00:13:58,910 --> 00:14:03,589
option explicit in so we have still the

320
00:14:01,100 --> 00:14:05,000
condition<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> okay this node is the</font>

321
00:14:03,590 --> 00:14:07,340
<font color="#CCCCCC">route</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that the first node</font><font color="#E5E5E5"> of the</font>

322
00:14:05,000 --> 00:14:10,820
pattern we were interested<font color="#E5E5E5"> in this node</font>

323
00:14:07,340 --> 00:14:13,010
and I want you to<font color="#CCCCCC"> March the node with a</font>

324
00:14:10,820 --> 00:14:14,510
so that the name of<font color="#CCCCCC"> the node for the not</font>

325
00:14:13,010 --> 00:14:17,030
be I'm interested also in the nodes who

326
00:14:14,510 --> 00:14:18,950
you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> market be and the child</font>

327
00:14:17,030 --> 00:14:20,089
number<font color="#E5E5E5"> of the edge was one because they</font>

328
00:14:18,950 --> 00:14:23,930
<font color="#E5E5E5">are following</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> other that's</font>

329
00:14:20,090 --> 00:14:27,950
<font color="#CCCCCC">sequential</font><font color="#E5E5E5"> instructions okay so back on</font>

330
00:14:23,930 --> 00:14:29,719
conditions conditions and we<font color="#E5E5E5"> will be</font>

331
00:14:27,950 --> 00:14:32,780
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make conditions</font><font color="#E5E5E5"> on instructions</font>

332
00:14:29,720 --> 00:14:35,000
and there will be conditions on the full

333
00:14:32,780 --> 00:14:39,110
string of the instructions like<font color="#E5E5E5"> move yay</font>

334
00:14:35,000 --> 00:14:40,610
a<font color="#E5E5E5"> a X something for instance</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> will</font>

335
00:14:39,110 --> 00:14:42,560
have a condition<font color="#E5E5E5"> and the address</font>

336
00:14:40,610 --> 00:14:45,170
condition on the<font color="#CCCCCC"> opcode on the argument</font>

337
00:14:42,560 --> 00:14:47,209
of the number<font color="#E5E5E5"> of arguments and the text</font>

338
00:14:45,170 --> 00:14:50,209
<font color="#E5E5E5">of the arguments so these are string</font>

339
00:14:47,210 --> 00:14:52,820
<font color="#E5E5E5">field we will also have conditions and</font>

340
00:14:50,210 --> 00:14:55,730
the number of incoming and<font color="#E5E5E5"> the number of</font>

341
00:14:52,820 --> 00:14:59,980
a growing edges sorry

342
00:14:55,730 --> 00:15:04,300
so that means the number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> others and</font>

343
00:14:59,980 --> 00:15:04,300
the number of children of a node

344
00:15:08,860 --> 00:15:18,460
I have an example here<font color="#CCCCCC"> that</font><font color="#E5E5E5"> says I'm</font>

345
00:15:15,790 --> 00:15:20,650
<font color="#E5E5E5">looking for a function that is</font>

346
00:15:18,460 --> 00:15:24,250
<font color="#E5E5E5">frequently called so that</font><font color="#CCCCCC"> there is a</font>

347
00:15:20,650 --> 00:15:27,939
call to<font color="#E5E5E5"> this node</font><font color="#CCCCCC"> so the call is the</font><font color="#E5E5E5"> not</font>

348
00:15:24,250 --> 00:15:33,840
a and the<font color="#CCCCCC"> instruction decode is B and</font>

349
00:15:27,940 --> 00:15:33,840
then there is a nature between<font color="#E5E5E5"> a and B</font>

350
00:15:35,100 --> 00:15:39,550
<font color="#CCCCCC">so the number of the at the edge is 2</font>

351
00:15:37,960 --> 00:15:41,170
<font color="#E5E5E5">because it's a it's not a following</font>

352
00:15:39,550 --> 00:15:45,189
<font color="#E5E5E5">instruction it is</font><font color="#CCCCCC"> a remote instruction</font>

353
00:15:41,170 --> 00:15:48,520
and the condition we have an not be that

354
00:15:45,190 --> 00:15:50,560
it<font color="#E5E5E5"> has multiple incoming nodes that will</font>

355
00:15:48,520 --> 00:16:03,870
help us<font color="#E5E5E5"> find functions that are</font>

356
00:15:50,560 --> 00:16:07,569
frequently<font color="#E5E5E5"> called in the code okay so</font>

357
00:16:03,870 --> 00:16:10,840
until<font color="#E5E5E5"> now I explained how</font><font color="#CCCCCC"> we can match</font>

358
00:16:07,570 --> 00:16:12,520
one node to one instruction but what we

359
00:16:10,840 --> 00:16:15,220
will<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to do next is to match one</font>

360
00:16:12,520 --> 00:16:17,290
node to multiple instructions like<font color="#E5E5E5"> when</font>

361
00:16:15,220 --> 00:16:19,270
you want<font color="#E5E5E5"> to match basic blocks sometimes</font>

362
00:16:17,290 --> 00:16:20,410
you don't care how many<font color="#E5E5E5"> instructions are</font>

363
00:16:19,270 --> 00:16:23,500
<font color="#CCCCCC">written</font><font color="#E5E5E5"> the basic</font><font color="#CCCCCC"> block you want</font><font color="#E5E5E5"> to</font>

364
00:16:20,410 --> 00:16:25,870
<font color="#E5E5E5">metric say</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> this node</font><font color="#CCCCCC"> needs much a</font>

365
00:16:23,500 --> 00:16:28,690
whole basic<font color="#CCCCCC"> block</font><font color="#E5E5E5"> so we can specify a</font>

366
00:16:25,870 --> 00:16:30,540
minimum number<font color="#E5E5E5"> of matches for</font><font color="#CCCCCC"> all node</font>

367
00:16:28,690 --> 00:16:32,230
on the<font color="#E5E5E5"> maximum number of matches</font>

368
00:16:30,540 --> 00:16:34,630
internally works on sequential

369
00:16:32,230 --> 00:16:36,400
instructions<font color="#E5E5E5"> using basic blocks so these</font>

370
00:16:34,630 --> 00:16:40,150
are<font color="#E5E5E5"> instructions that have one father on</font>

371
00:16:36,400 --> 00:16:43,209
one<font color="#E5E5E5"> child so it looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you have</font>

372
00:16:40,150 --> 00:16:45,520
a basic<font color="#CCCCCC"> block that</font><font color="#E5E5E5"> we see here in Ida so</font>

373
00:16:43,210 --> 00:16:46,900
there is the<font color="#E5E5E5"> art</font><font color="#CCCCCC"> wind coming node 2</font>

374
00:16:45,520 --> 00:16:48,880
<font color="#CCCCCC">outgoing node</font><font color="#E5E5E5"> and only three</font>

375
00:16:46,900 --> 00:16:50,290
instructions here to match<font color="#E5E5E5"> this kind of</font>

376
00:16:48,880 --> 00:16:52,330
things in<font color="#CCCCCC"> grabs you just have to say</font>

377
00:16:50,290 --> 00:16:53,949
<font color="#E5E5E5">okay I want</font><font color="#CCCCCC"> you to match any</font>

378
00:16:52,330 --> 00:16:56,530
<font color="#CCCCCC">instructions that what it means come is</font>

379
00:16:53,950 --> 00:16:58,930
true and<font color="#E5E5E5"> then you I need you to match</font>

380
00:16:56,530 --> 00:17:02,199
one or more instructions<font color="#E5E5E5"> or repeat this</font>

381
00:16:58,930 --> 00:17:03,910
plus if I want to match<font color="#E5E5E5"> three push</font>

382
00:17:02,200 --> 00:17:06,280
<font color="#CCCCCC">instruction I will write something like</font>

383
00:17:03,910 --> 00:17:08,139
<font color="#E5E5E5">that like the I want instruction with</font>

384
00:17:06,280 --> 00:17:11,470
<font color="#E5E5E5">the opcode push and I want them</font><font color="#CCCCCC"> to be</font>

385
00:17:08,140 --> 00:17:14,290
repeated three times so by default<font color="#E5E5E5"> the</font>

386
00:17:11,470 --> 00:17:16,150
graph will take the most<font color="#E5E5E5"> matching</font>

387
00:17:14,290 --> 00:17:17,949
instructions when you<font color="#E5E5E5"> specify a</font>

388
00:17:16,150 --> 00:17:19,970
<font color="#E5E5E5">repetition which you have an option to</font>

389
00:17:17,949 --> 00:17:24,770
<font color="#E5E5E5">change that you can say lazy</font>

390
00:17:19,970 --> 00:17:26,209
<font color="#E5E5E5">is true so the first point was greedy</font>

391
00:17:24,770 --> 00:17:30,049
<font color="#E5E5E5">repeat like you take the most of them</font>

392
00:17:26,209 --> 00:17:31,940
with<font color="#CCCCCC"> lady repeat we</font><font color="#E5E5E5"> will stop when the</font>

393
00:17:30,049 --> 00:17:34,820
next mission is<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see is fulfilled I'll</font>

394
00:17:31,940 --> 00:17:37,669
give an example<font color="#E5E5E5"> here so back to back</font>

395
00:17:34,820 --> 00:17:39,649
<font color="#CCCCCC">page sample we had a decryption loop so</font>

396
00:17:37,669 --> 00:17:41,240
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> interested especially in the door</font>

397
00:17:39,650 --> 00:17:43,909
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> sub instructions but we can say</font>

398
00:17:41,240 --> 00:17:46,400
okay I want<font color="#E5E5E5"> a look that looks a bit like</font>

399
00:17:43,909 --> 00:17:48,260
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so I will want</font><font color="#CCCCCC"> to match one two</font>

400
00:17:46,400 --> 00:17:49,820
five any instructions we<font color="#CCCCCC"> have three here</font>

401
00:17:48,260 --> 00:17:51,950
<font color="#E5E5E5">but maybe there is less maybe there is</font>

402
00:17:49,820 --> 00:17:53,840
more then we have the growth and we<font color="#CCCCCC"> have</font>

403
00:17:51,950 --> 00:17:55,730
the sub then we have again<font color="#E5E5E5"> and one</font><font color="#CCCCCC"> two</font>

404
00:17:53,840 --> 00:17:58,189
five<font color="#E5E5E5"> instructions then we have a</font>

405
00:17:55,730 --> 00:17:59,870
conditional jump that<font color="#E5E5E5"> loops back to the</font>

406
00:17:58,190 --> 00:18:01,549
beginning of<font color="#E5E5E5"> the loop</font><font color="#CCCCCC"> so the pattern</font>

407
00:17:59,870 --> 00:18:04,899
will<font color="#E5E5E5"> look like that we I will have here</font>

408
00:18:01,549 --> 00:18:07,220
<font color="#CCCCCC">that's a dot representation</font><font color="#E5E5E5"> on graphs</font>

409
00:18:04,900 --> 00:18:09,350
one<font color="#CCCCCC"> two five an instruction then the</font>

410
00:18:07,220 --> 00:18:12,350
exhaust<font color="#E5E5E5"> the sub 1 to 5</font><font color="#CCCCCC"> any instruction</font>

411
00:18:09,350 --> 00:18:13,969
then the<font color="#E5E5E5"> conditional jump will go up it</font>

412
00:18:12,350 --> 00:18:15,889
will<font color="#CCCCCC"> where's the pattern will look like</font>

413
00:18:13,970 --> 00:18:18,710
<font color="#E5E5E5">that we say</font><font color="#CCCCCC"> ok I'm looking</font><font color="#E5E5E5"> for any</font>

414
00:18:15,890 --> 00:18:20,960
instruction<font color="#E5E5E5"> with it that max</font><font color="#CCCCCC"> 5 times and</font>

415
00:18:18,710 --> 00:18:23,270
I want<font color="#E5E5E5"> you to stop once the next</font>

416
00:18:20,960 --> 00:18:25,940
<font color="#E5E5E5">condition is fulfilled so it will match</font>

417
00:18:23,270 --> 00:18:28,340
for this node<font color="#E5E5E5"> age will match move add</font>

418
00:18:25,940 --> 00:18:29,929
move then here it<font color="#E5E5E5"> will stop because the</font>

419
00:18:28,340 --> 00:18:32,780
next<font color="#CCCCCC"> condition and B should fill</font><font color="#E5E5E5"> because</font>

420
00:18:29,929 --> 00:18:35,720
we have a go on<font color="#E5E5E5"> then B will match the C</font>

421
00:18:32,780 --> 00:18:39,049
will match sub<font color="#E5E5E5"> D will match again mini</font>

422
00:18:35,720 --> 00:18:40,549
<font color="#E5E5E5">instruction so</font><font color="#CCCCCC"> we compare move and it</font>

423
00:18:39,049 --> 00:18:43,070
will<font color="#E5E5E5"> stop</font><font color="#CCCCCC"> on the last one because</font><font color="#E5E5E5"> the</font>

424
00:18:40,549 --> 00:18:45,139
<font color="#E5E5E5">last one it says that it was instruction</font>

425
00:18:43,070 --> 00:18:46,520
to begin<font color="#E5E5E5"> with J and</font><font color="#CCCCCC"> you have two</font>

426
00:18:45,140 --> 00:18:50,900
children<font color="#CCCCCC"> so that the case with the</font>

427
00:18:46,520 --> 00:18:54,350
conditional jump here<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so back to</font>

428
00:18:50,900 --> 00:18:57,590
our backstage samples so I'm going<font color="#E5E5E5"> to do</font>

429
00:18:54,350 --> 00:19:02,750
a demo we<font color="#CCCCCC"> have a 100 backspace</font><font color="#E5E5E5"> sample</font><font color="#CCCCCC"> i</font>

430
00:18:57,590 --> 00:19:05,360
want to disassemble them and then<font color="#E5E5E5"> i want</font>

431
00:19:02,750 --> 00:19:07,600
to detect<font color="#E5E5E5"> the decryption</font><font color="#CCCCCC"> algorithm that</font>

432
00:19:05,360 --> 00:19:10,340
I saw that is the one we reverse<font color="#E5E5E5"> NIDA</font>

433
00:19:07,600 --> 00:19:13,309
<font color="#E5E5E5">then I want to find variants of this</font>

434
00:19:10,340 --> 00:19:14,840
decryption algorithm<font color="#E5E5E5"> and finally I will</font>

435
00:19:13,309 --> 00:19:23,389
<font color="#CCCCCC">need to detect</font><font color="#E5E5E5"> all these decryption</font>

436
00:19:14,840 --> 00:19:25,639
algorithms so demo time<font color="#CCCCCC"> okay so I have</font>

437
00:19:23,390 --> 00:19:29,390
my samples here so 100 samples of

438
00:19:25,640 --> 00:19:31,820
backspace<font color="#CCCCCC"> and I have a pattern so that's</font>

439
00:19:29,390 --> 00:19:33,410
the one<font color="#E5E5E5"> between the side so we</font><font color="#CCCCCC"> have a</font>

440
00:19:31,820 --> 00:19:37,570
<font color="#E5E5E5">lazy repeat we have</font>

441
00:19:33,410 --> 00:19:40,880
we<font color="#CCCCCC"> found</font><font color="#E5E5E5"> eggs or here then the sub</font><font color="#CCCCCC"> I</font>

442
00:19:37,570 --> 00:19:43,580
want to match<font color="#E5E5E5"> it against the the</font><font color="#CCCCCC"> sample</font>

443
00:19:40,880 --> 00:19:46,309
<font color="#E5E5E5">we know so I I</font><font color="#CCCCCC"> asked wrapped</font><font color="#E5E5E5"> to match it</font>

444
00:19:43,580 --> 00:19:47,899
against sample this<font color="#E5E5E5"> one</font><font color="#CCCCCC"> so that the one</font>

445
00:19:46,309 --> 00:19:50,510
we worked on so first it will

446
00:19:47,900 --> 00:19:52,370
disassemble the the binary then it

447
00:19:50,510 --> 00:19:54,429
learns the pattern so there<font color="#E5E5E5"> is one</font>

448
00:19:52,370 --> 00:19:57,469
pattern<font color="#E5E5E5"> that was round</font><font color="#CCCCCC"> the test graph</font>

449
00:19:54,429 --> 00:20:00,470
which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sample has a thousand node</font>

450
00:19:57,470 --> 00:20:02,870
and it found one matching<font color="#E5E5E5"> yeah so the</font>

451
00:20:00,470 --> 00:20:04,760
matching<font color="#E5E5E5"> is described here so we</font><font color="#CCCCCC"> have</font>

452
00:20:02,870 --> 00:20:05,870
the<font color="#E5E5E5"> restriction that match</font><font color="#CCCCCC"> with see the</font>

453
00:20:04,760 --> 00:20:07,549
glow<font color="#CCCCCC"> and the step that we were looking</font>

454
00:20:05,870 --> 00:20:10,100
<font color="#CCCCCC">for okay</font>

455
00:20:07,549 --> 00:20:11,990
so that was for one<font color="#E5E5E5"> sample I want to do</font>

456
00:20:10,100 --> 00:20:17,000
it in a way some print of backspace<font color="#E5E5E5"> to</font>

457
00:20:11,990 --> 00:20:19,429
see what happens<font color="#E5E5E5"> okay so it will take a</font>

458
00:20:17,000 --> 00:20:22,730
<font color="#E5E5E5">white because it should need to this as</font>

459
00:20:19,429 --> 00:20:25,850
decimal<font color="#E5E5E5"> 99 samples it takes around 20</font>

460
00:20:22,730 --> 00:20:28,010
seconds<font color="#CCCCCC"> so</font><font color="#E5E5E5"> much we will see</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> lot of</font>

461
00:20:25,850 --> 00:20:29,899
<font color="#E5E5E5">matching and a lot of text and then I</font>

462
00:20:28,010 --> 00:20:34,010
will show you another<font color="#E5E5E5"> option to have</font>

463
00:20:29,900 --> 00:20:38,570
less less less verbose output and more

464
00:20:34,010 --> 00:20:40,669
<font color="#CCCCCC">quite</font><font color="#E5E5E5"> one with one one one sample per</font>

465
00:20:38,570 --> 00:20:43,189
line<font color="#CCCCCC"> so that's what I say we have lot of</font>

466
00:20:40,669 --> 00:20:45,440
text so<font color="#CCCCCC"> now</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> asked it to do it</font><font color="#E5E5E5"> quietly</font>

467
00:20:43,190 --> 00:20:46,730
<font color="#E5E5E5">so</font><font color="#CCCCCC"> it will be much</font><font color="#E5E5E5"> quicker because we</font>

468
00:20:45,440 --> 00:20:51,470
don't<font color="#E5E5E5"> have to listen</font><font color="#CCCCCC"> to the files again</font>

469
00:20:46,730 --> 00:20:53,299
<font color="#CCCCCC">and show you that if I show the folders</font>

470
00:20:51,470 --> 00:20:57,650
now we have the dot files which are<font color="#E5E5E5"> the</font>

471
00:20:53,299 --> 00:21:00,289
decimal<font color="#CCCCCC"> diversions of</font><font color="#E5E5E5"> the binaries okay</font>

472
00:20:57,650 --> 00:21:03,400
so now<font color="#CCCCCC"> I just launch it again but with</font>

473
00:21:00,289 --> 00:21:06,770
the quiet section<font color="#E5E5E5"> so here I see all the</font>

474
00:21:03,400 --> 00:21:11,299
pattern that<font color="#E5E5E5"> all the memories that</font>

475
00:21:06,770 --> 00:21:12,980
matched or pattern but I don't see the

476
00:21:11,299 --> 00:21:14,389
one that didn't match so<font color="#E5E5E5"> we find a</font><font color="#CCCCCC"> lot</font>

477
00:21:12,980 --> 00:21:16,130
of<font color="#E5E5E5"> samples that choose the same</font>

478
00:21:14,390 --> 00:21:18,740
decryption algorithm exactly the same

479
00:21:16,130 --> 00:21:21,280
let me be you there are more so I will<font color="#E5E5E5"> I</font>

480
00:21:18,740 --> 00:21:24,590
will ascribe<font color="#CCCCCC"> to show me all the binary</font>

481
00:21:21,280 --> 00:21:27,080
so<font color="#CCCCCC"> okay we see that some samples match</font>

482
00:21:24,590 --> 00:21:29,149
and some others didn't match<font color="#E5E5E5"> so what I</font>

483
00:21:27,080 --> 00:21:30,939
wanted<font color="#E5E5E5"> to do next was to find</font><font color="#CCCCCC"> variance</font>

484
00:21:29,150 --> 00:21:35,990
to find variance I went back to<font color="#E5E5E5"> Ida</font>

485
00:21:30,940 --> 00:21:39,020
<font color="#E5E5E5">which is here okay so here</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have the</font>

486
00:21:35,990 --> 00:21:40,760
<font color="#E5E5E5">Google algorithm I will see how it is</font>

487
00:21:39,020 --> 00:21:42,470
<font color="#CCCCCC">called so what we see that it's very</font>

488
00:21:40,760 --> 00:21:43,940
<font color="#E5E5E5">simple you have a first date o'clock</font>

489
00:21:42,470 --> 00:21:46,820
<font color="#CCCCCC">then the loop then another basic</font><font color="#E5E5E5"> block</font>

490
00:21:43,940 --> 00:21:49,370
<font color="#CCCCCC">we will</font><font color="#E5E5E5"> see how it is called</font>

491
00:21:46,820 --> 00:21:51,050
so there is a<font color="#E5E5E5"> function here that has a</font>

492
00:21:49,370 --> 00:21:53,629
lot of<font color="#E5E5E5"> calls to</font><font color="#CCCCCC"> the decryption every</font>

493
00:21:51,050 --> 00:21:55,639
algorithm<font color="#E5E5E5"> it's always two pushes because</font>

494
00:21:53,630 --> 00:21:58,550
<font color="#CCCCCC">there's other arguments</font><font color="#E5E5E5"> then a call to</font>

495
00:21:55,640 --> 00:22:00,680
the<font color="#E5E5E5"> decryption function so I wanted</font><font color="#CCCCCC"> to</font>

496
00:21:58,550 --> 00:22:07,399
write a pattern to see<font color="#CCCCCC"> and to detect</font>

497
00:22:00,680 --> 00:22:09,950
this so what I did<font color="#E5E5E5"> let this pattern</font><font color="#CCCCCC"> so I</font>

498
00:22:07,400 --> 00:22:12,320
<font color="#CCCCCC">ask that</font><font color="#E5E5E5"> we find something with two</font>

499
00:22:09,950 --> 00:22:15,440
pushes<font color="#E5E5E5"> then the call then again two</font>

500
00:22:12,320 --> 00:22:18,350
pushes<font color="#CCCCCC"> another</font><font color="#E5E5E5"> call four times in the</font>

501
00:22:15,440 --> 00:22:21,020
old point to a function that<font color="#E5E5E5"> is that has</font>

502
00:22:18,350 --> 00:22:23,020
a first basic block then<font color="#CCCCCC"> a look then an</font>

503
00:22:21,020 --> 00:22:26,300
<font color="#CCCCCC">N basic block then a</font><font color="#E5E5E5"> return instruction</font>

504
00:22:23,020 --> 00:22:28,129
<font color="#E5E5E5">and what I say here that I'm only</font>

505
00:22:26,300 --> 00:22:28,610
interested<font color="#E5E5E5"> in</font><font color="#CCCCCC"> getting the loop so I say</font>

506
00:22:28,130 --> 00:22:32,570
get ID

507
00:22:28,610 --> 00:22:37,580
<font color="#CCCCCC">I said get ID</font><font color="#E5E5E5"> only on the loop node so</font>

508
00:22:32,570 --> 00:22:41,240
I'll show you<font color="#E5E5E5"> how</font><font color="#CCCCCC"> high</font><font color="#E5E5E5"> droops like with</font>

509
00:22:37,580 --> 00:22:45,409
that<font color="#E5E5E5"> and I have a</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> version because</font>

510
00:22:41,240 --> 00:22:47,060
it's always<font color="#E5E5E5"> better with Quran okay so we</font>

511
00:22:45,410 --> 00:22:48,560
have here<font color="#CCCCCC"> two precious than the core</font>

512
00:22:47,060 --> 00:22:50,210
<font color="#CCCCCC">then</font><font color="#E5E5E5"> to put it another call the all</font>

513
00:22:48,560 --> 00:22:51,679
point to the same<font color="#E5E5E5"> function and</font><font color="#CCCCCC"> we</font>

514
00:22:50,210 --> 00:22:56,080
<font color="#E5E5E5">interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the loop here which is</font>

515
00:22:51,680 --> 00:22:56,080
where the decryption algorithm happened

516
00:22:56,170 --> 00:23:11,350
<font color="#E5E5E5">okay so now I need</font><font color="#CCCCCC"> to match it against</font>

517
00:22:59,080 --> 00:23:13,189
my samples okay so I find here the first

518
00:23:11,350 --> 00:23:16,429
decryption algorithm that we already

519
00:23:13,190 --> 00:23:18,800
know we exhort<font color="#CCCCCC"> 11 and 25</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> again the</font>

520
00:23:16,430 --> 00:23:21,920
same<font color="#E5E5E5"> here we have another one there is a</font>

521
00:23:18,800 --> 00:23:24,889
sub then exorbitant other constant then

522
00:23:21,920 --> 00:23:27,260
another sub then there is again the<font color="#CCCCCC"> same</font>

523
00:23:24,890 --> 00:23:29,780
one then while we<font color="#E5E5E5"> will find</font><font color="#CCCCCC"> that there</font>

524
00:23:27,260 --> 00:23:33,500
are many<font color="#E5E5E5"> more</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> won't see them show you</font>

525
00:23:29,780 --> 00:23:38,660
them<font color="#E5E5E5"> all but what we did next was write</font>

526
00:23:33,500 --> 00:23:40,850
a<font color="#E5E5E5"> pattern for this these decryption</font>

527
00:23:38,660 --> 00:23:44,750
violence<font color="#E5E5E5"> so we have a very</font><font color="#CCCCCC"> small</font><font color="#E5E5E5"> pattern</font>

528
00:23:40,850 --> 00:23:47,030
so the first one is<font color="#E5E5E5"> when we</font><font color="#CCCCCC"> new so 11:25</font>

529
00:23:44,750 --> 00:23:49,130
this one is the<font color="#E5E5E5"> one we just saw the with</font>

530
00:23:47,030 --> 00:23:52,040
<font color="#CCCCCC">B and 12 and there were like five other</font>

531
00:23:49,130 --> 00:23:54,620
ones that<font color="#E5E5E5"> I won't detail so what we do</font>

532
00:23:52,040 --> 00:23:57,280
now is we<font color="#E5E5E5"> want to match them against the</font>

533
00:23:54,620 --> 00:23:57,280
back space<font color="#E5E5E5"> centers</font>

534
00:24:02,210 --> 00:24:09,000
so what we see here that a<font color="#CCCCCC"> lot</font><font color="#E5E5E5"> more</font>

535
00:24:06,680 --> 00:24:10,920
samples matched and we know which

536
00:24:09,000 --> 00:24:12,960
algorithm was used<font color="#E5E5E5"> so here on the</font>

537
00:24:10,920 --> 00:24:14,850
pattern that<font color="#E5E5E5"> met with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> gossip here it</font>

538
00:24:12,960 --> 00:24:18,510
was<font color="#CCCCCC"> observed</font><font color="#E5E5E5"> or sub</font><font color="#CCCCCC"> here there</font><font color="#E5E5E5"> is</font>

539
00:24:14,850 --> 00:24:20,370
<font color="#E5E5E5">another one another one etcetera so one</font>

540
00:24:18,510 --> 00:24:25,770
more<font color="#CCCCCC"> thing which wanted</font><font color="#E5E5E5"> to know is that</font>

541
00:24:20,370 --> 00:24:27,979
<font color="#E5E5E5">we had still had some unmatch binary so</font>

542
00:24:25,770 --> 00:24:30,200
oops

543
00:24:27,980 --> 00:24:31,640
so I want to<font color="#CCCCCC"> know why they don't</font><font color="#E5E5E5"> match</font>

544
00:24:30,200 --> 00:24:34,500
<font color="#E5E5E5">okay</font>

545
00:24:31,640 --> 00:24:37,020
<font color="#CCCCCC">one C</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> thing we did that you read in</font>

546
00:24:34,500 --> 00:24:39,720
this<font color="#E5E5E5"> order but it works okay which we</font>

547
00:24:37,020 --> 00:24:42,629
asked for a taxonomist<font color="#CCCCCC"> X names we see</font>

548
00:24:39,720 --> 00:24:44,490
that it's<font color="#CCCCCC"> you P so it's a some some</font>

549
00:24:42,630 --> 00:24:49,290
person seemed to be packed with<font color="#CCCCCC"> you pigs</font>

550
00:24:44,490 --> 00:24:52,710
<font color="#E5E5E5">so what I do is I wanted to have a quick</font>

551
00:24:49,290 --> 00:24:55,050
signature for<font color="#E5E5E5"> this GPX files so I will</font>

552
00:24:52,710 --> 00:24:58,170
<font color="#CCCCCC">look for basic block loops that mean</font>

553
00:24:55,050 --> 00:25:00,200
basic<font color="#E5E5E5"> blocks that loops to themselves so</font>

554
00:24:58,170 --> 00:25:03,500
I have a<font color="#CCCCCC"> pattern for that that I will</font>

555
00:25:00,200 --> 00:25:03,500
<font color="#E5E5E5">use now</font>

556
00:25:09,750 --> 00:25:16,210
on this<font color="#E5E5E5"> pattern so</font><font color="#CCCCCC"> I find two basic</font>

557
00:25:13,300 --> 00:25:18,220
block<font color="#E5E5E5"> loop</font><font color="#CCCCCC"> I didn't really look into</font>

558
00:25:16,210 --> 00:25:20,200
<font color="#E5E5E5">what they are doing but I want to treat</font>

559
00:25:18,220 --> 00:25:22,480
<font color="#E5E5E5">them as signatures so I wrote a</font><font color="#CCCCCC"> jpg</font>

560
00:25:20,200 --> 00:25:23,050
signature which is<font color="#E5E5E5"> which contains these</font>

561
00:25:22,480 --> 00:25:27,250
two<font color="#E5E5E5"> loops</font>

562
00:25:23,050 --> 00:25:35,350
<font color="#E5E5E5">EPX loop one big slip</font><font color="#CCCCCC"> to so what I did</font>

563
00:25:27,250 --> 00:25:37,180
<font color="#CCCCCC">next was to match them okay</font><font color="#E5E5E5"> so there are</font>

564
00:25:35,350 --> 00:25:39,459
there seems to be more<font color="#CCCCCC"> sample</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> box</font>

565
00:25:37,180 --> 00:25:44,320
which depicts and I always match the<font color="#CCCCCC"> two</font>

566
00:25:39,460 --> 00:25:46,600
loops so I know how to detect volumes of

567
00:25:44,320 --> 00:25:48,669
<font color="#CCCCCC">back</font><font color="#E5E5E5"> space in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> detect fights</font>

568
00:25:46,600 --> 00:25:50,500
<font color="#E5E5E5">packed with</font><font color="#CCCCCC"> GPS</font><font color="#E5E5E5"> so I want to</font><font color="#CCCCCC"> detect them</font>

569
00:25:48,670 --> 00:26:06,700
both so I will combine<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two the two</font>

570
00:25:50,500 --> 00:26:08,650
<font color="#E5E5E5">signatures and I will merge them okay</font>

571
00:26:06,700 --> 00:26:11,260
it's better<font color="#E5E5E5"> so we still have a few</font>

572
00:26:08,650 --> 00:26:12,820
unmatched binaries but most of them we

573
00:26:11,260 --> 00:26:14,379
see<font color="#E5E5E5"> that there are either a violent of</font>

574
00:26:12,820 --> 00:26:19,480
<font color="#E5E5E5">backspace</font><font color="#CCCCCC"> and we know which algorithm is</font>

575
00:26:14,380 --> 00:26:23,020
used<font color="#E5E5E5"> or they are packed with GPS okay</font>

576
00:26:19,480 --> 00:26:26,050
back to the side so what we saw<font color="#E5E5E5"> that is</font>

577
00:26:23,020 --> 00:26:27,820
that we found<font color="#E5E5E5"> seven volumes of</font><font color="#CCCCCC"> GPX</font><font color="#E5E5E5"> so</font>

578
00:26:26,050 --> 00:26:31,540
there was a there was<font color="#E5E5E5"> the first one with</font>

579
00:26:27,820 --> 00:26:35,439
a draw<font color="#CCCCCC"> 11 and step 25,000 otherone but</font>

580
00:26:31,540 --> 00:26:37,389
we saw then five other patterns we also

581
00:26:35,440 --> 00:26:40,380
found out<font color="#E5E5E5"> that some my name is are</font>

582
00:26:37,390 --> 00:26:43,510
packed with GPX<font color="#E5E5E5"> and we were to a small</font>

583
00:26:40,380 --> 00:26:47,230
quick<font color="#E5E5E5"> signature for this file we match</font>

584
00:26:43,510 --> 00:26:50,620
them so what we did is on<font color="#E5E5E5"> all 100</font>

585
00:26:47,230 --> 00:26:52,450
backspace samples took around<font color="#E5E5E5"> 20 seconds</font>

586
00:26:50,620 --> 00:26:55,060
<font color="#E5E5E5">to the decimal</font><font color="#CCCCCC"> Rams</font><font color="#E5E5E5"> then to do</font><font color="#CCCCCC"> the</font>

587
00:26:52,450 --> 00:26:57,970
<font color="#E5E5E5">matching of nine patterns it took a</font>

588
00:26:55,060 --> 00:27:00,190
little<font color="#E5E5E5"> more than two seconds</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> the</font>

589
00:26:57,970 --> 00:27:03,370
<font color="#E5E5E5">end we see that</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are like 17 files</font>

590
00:27:00,190 --> 00:27:05,230
that are packed with GPX<font color="#CCCCCC"> they hunt the</font>

591
00:27:03,370 --> 00:27:07,300
half of the samples<font color="#CCCCCC"> that have the first</font>

592
00:27:05,230 --> 00:27:10,360
<font color="#E5E5E5">pattern that we looked at and the other</font>

593
00:27:07,300 --> 00:27:13,540
patterns are<font color="#CCCCCC"> used sometimes</font><font color="#E5E5E5"> and in the</font>

594
00:27:10,360 --> 00:27:18,580
end there<font color="#E5E5E5"> was this 11 memories that</font><font color="#CCCCCC"> we</font>

595
00:27:13,540 --> 00:27:21,280
did not identify correctly so<font color="#CCCCCC"> ok</font>

596
00:27:18,580 --> 00:27:26,520
to simplify the creation of

597
00:27:21,280 --> 00:27:30,879
<font color="#CCCCCC">scripts we create</font><font color="#E5E5E5"> Python bindings of the</font>

598
00:27:26,520 --> 00:27:34,120
C++ library with<font color="#CCCCCC"> weight and</font><font color="#E5E5E5"> now with</font>

599
00:27:30,880 --> 00:27:37,090
item we can<font color="#CCCCCC"> do the sum we</font><font color="#E5E5E5"> can note</font>

600
00:27:34,120 --> 00:27:39,250
patterns and<font color="#CCCCCC"> test</font><font color="#E5E5E5"> graphs you can</font><font color="#CCCCCC"> not</font>

601
00:27:37,090 --> 00:27:42,370
grab a<font color="#E5E5E5"> pattern graph in</font><font color="#CCCCCC"> death graph we</font>

602
00:27:39,250 --> 00:27:45,940
can match<font color="#E5E5E5"> patterns and pass all the</font>

603
00:27:42,370 --> 00:27:49,000
results so here we have some example<font color="#E5E5E5"> of</font>

604
00:27:45,940 --> 00:27:53,230
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> script so at the beginning we</font>

605
00:27:49,000 --> 00:27:58,240
have the<font color="#E5E5E5"> input of a library then we have</font>

606
00:27:53,230 --> 00:28:02,500
the we load the pattern that<font color="#E5E5E5"> file we</font>

607
00:27:58,240 --> 00:28:06,130
extract the graph from the binaries<font color="#E5E5E5"> with</font>

608
00:28:02,500 --> 00:28:10,150
this<font color="#CCCCCC"> and file then we</font><font color="#E5E5E5"> load the test</font>

609
00:28:06,130 --> 00:28:15,490
<font color="#E5E5E5">graph and after we match the the graph</font>

610
00:28:10,150 --> 00:28:19,060
the pattern in the test graph so here is

611
00:28:15,490 --> 00:28:23,710
an<font color="#CCCCCC"> example of the pattern</font><font color="#E5E5E5"> we want to</font>

612
00:28:19,060 --> 00:28:28,360
match<font color="#E5E5E5"> three bushes</font><font color="#CCCCCC"> so we use the match</font>

613
00:28:23,710 --> 00:28:32,080
graph and now we can get all matching

614
00:28:28,360 --> 00:28:35,679
patterns then you can select<font color="#E5E5E5"> the bushes</font>

615
00:28:32,080 --> 00:28:39,449
patterns<font color="#E5E5E5"> and now we can with the species</font>

616
00:28:35,680 --> 00:28:42,790
patterns we<font color="#E5E5E5"> can get all</font><font color="#CCCCCC"> majid</font>

617
00:28:39,450 --> 00:28:46,420
instructions then we can say<font color="#CCCCCC"> ok I want</font>

618
00:28:42,790 --> 00:28:49,629
<font color="#E5E5E5">to get the IDP so it give all</font>

619
00:28:46,420 --> 00:28:53,050
instruction with<font color="#E5E5E5"> the get IDP and then we</font>

620
00:28:49,630 --> 00:28:56,380
take the<font color="#E5E5E5"> first instructions so now we</font>

621
00:28:53,050 --> 00:29:01,649
have the<font color="#CCCCCC"> instruction</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can request</font>

622
00:28:56,380 --> 00:29:04,990
some information like<font color="#E5E5E5"> the addresses</font><font color="#CCCCCC"> all</font>

623
00:29:01,650 --> 00:29:10,330
the old instruction strings the opcode

624
00:29:04,990 --> 00:29:15,850
the arguments<font color="#E5E5E5"> and so on so ok we can</font>

625
00:29:10,330 --> 00:29:18,610
match<font color="#E5E5E5"> the description loop and we saw</font>

626
00:29:15,850 --> 00:29:21,639
<font color="#CCCCCC">that we have a lot of pushes and call to</font>

627
00:29:18,610 --> 00:29:24,850
the decryption strings so we want to

628
00:29:21,640 --> 00:29:28,750
match<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two pushes and the call</font><font color="#E5E5E5"> to the</font>

629
00:29:24,850 --> 00:29:31,659
decryption routine<font color="#CCCCCC"> ok so we have we want</font>

630
00:29:28,750 --> 00:29:34,840
<font color="#E5E5E5">to check match the first bushes which is</font>

631
00:29:31,660 --> 00:29:36,700
the<font color="#E5E5E5"> length then the encrypted string</font>

632
00:29:34,840 --> 00:29:43,000
then the code to<font color="#CCCCCC"> the entry point of</font><font color="#E5E5E5"> the</font>

633
00:29:36,700 --> 00:29:47,050
<font color="#CCCCCC">function</font><font color="#E5E5E5"> to decrypt both strings so we</font>

634
00:29:43,000 --> 00:29:51,640
have the decryption<font color="#E5E5E5"> entry point we can</font>

635
00:29:47,050 --> 00:29:54,159
match<font color="#CCCCCC"> the address</font><font color="#E5E5E5"> of the all the</font>

636
00:29:51,640 --> 00:29:56,500
decryption loop so we<font color="#CCCCCC"> have the address</font>

637
00:29:54,160 --> 00:30:04,440
<font color="#CCCCCC">of the match</font>

638
00:29:56,500 --> 00:30:08,470
<font color="#CCCCCC">oh damn it ok so to get the</font><font color="#E5E5E5"> entry point</font>

639
00:30:04,440 --> 00:30:14,110
we know that<font color="#CCCCCC"> the function is very slow</font>

640
00:30:08,470 --> 00:30:16,660
very tiny<font color="#E5E5E5"> so we can say</font><font color="#CCCCCC"> and we know also</font>

641
00:30:14,110 --> 00:30:21,399
that the decryption<font color="#E5E5E5"> on three</font><font color="#CCCCCC"> point is</font>

642
00:30:16,660 --> 00:30:25,810
before<font color="#E5E5E5"> the decryption loop</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so you can</font>

643
00:30:21,400 --> 00:30:28,750
<font color="#CCCCCC">say we</font><font color="#E5E5E5"> want to search a node between the</font>

644
00:30:25,810 --> 00:30:32,350
decryption address and between<font color="#E5E5E5"> the</font>

645
00:30:28,750 --> 00:30:35,770
decryption address<font color="#CCCCCC"> minus 30 and we want</font>

646
00:30:32,350 --> 00:30:38,909
<font color="#E5E5E5">to match a node with at least five or</font>

647
00:30:35,770 --> 00:30:38,910
more incoming

648
00:30:39,090 --> 00:30:56,250
so<font color="#CCCCCC"> let us demo so this creates is see we</font>

649
00:30:50,980 --> 00:31:01,660
<font color="#E5E5E5">have the import then we get the the</font>

650
00:30:56,250 --> 00:31:06,640
<font color="#CCCCCC">binaries we create the graph then we</font>

651
00:31:01,660 --> 00:31:10,560
<font color="#CCCCCC">have those patterns to match the the</font>

652
00:31:06,640 --> 00:31:13,650
<font color="#E5E5E5">entry point then to match the profiles</font>

653
00:31:10,560 --> 00:31:18,100
before the call of the decryption

654
00:31:13,650 --> 00:31:22,900
function and we implement the all

655
00:31:18,100 --> 00:31:25,810
variants<font color="#CCCCCC"> of the decryption algorithm so</font>

656
00:31:22,900 --> 00:31:35,850
here you have<font color="#CCCCCC"> step though sub</font><font color="#E5E5E5"> add and so</font>

657
00:31:25,810 --> 00:31:35,850
on so

658
00:31:37,270 --> 00:31:46,990
we have my lord<font color="#E5E5E5"> okay so we got to</font>

659
00:31:41,220 --> 00:31:51,180
execute<font color="#E5E5E5"> the script with a sample so now</font>

660
00:31:46,990 --> 00:31:54,820
<font color="#E5E5E5">you can decrypt those strings so we have</font>

661
00:31:51,180 --> 00:32:00,100
the<font color="#CCCCCC"> sample</font><font color="#E5E5E5"> we match the Decrypter third</font>

662
00:31:54,820 --> 00:32:03,580
<font color="#E5E5E5">okay then we found the address of this</font>

663
00:32:00,100 --> 00:32:07,629
routine here we match the entry point

664
00:32:03,580 --> 00:32:11,980
with the more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> or more than</font>

665
00:32:07,630 --> 00:32:13,780
five<font color="#E5E5E5"> incoming between the address of the</font>

666
00:32:11,980 --> 00:32:18,220
decryption<font color="#CCCCCC"> -30</font>

667
00:32:13,780 --> 00:32:21,280
then the<font color="#CCCCCC"> address of the decryption</font><font color="#E5E5E5"> so we</font>

668
00:32:18,220 --> 00:32:24,730
found the<font color="#E5E5E5"> decryption function it's the</font>

669
00:32:21,280 --> 00:32:26,410
<font color="#E5E5E5">entry point so</font><font color="#CCCCCC"> now we got to</font><font color="#E5E5E5"> look for</font>

670
00:32:24,730 --> 00:32:29,830
the the<font color="#CCCCCC"> partials</font>

671
00:32:26,410 --> 00:32:34,630
okay with the entry point of<font color="#CCCCCC"> the</font>

672
00:32:29,830 --> 00:32:38,919
function<font color="#E5E5E5"> and then we match 35 calls to</font>

673
00:32:34,630 --> 00:32:41,050
this decryption function and so after

674
00:32:38,920 --> 00:32:44,710
this<font color="#E5E5E5"> we take the string</font><font color="#CCCCCC"> the encrypted</font>

675
00:32:41,050 --> 00:32:46,419
string<font color="#CCCCCC"> then we decrypt it with the the</font>

676
00:32:44,710 --> 00:32:50,800
algorithm<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now you can see we</font><font color="#E5E5E5"> have</font>

677
00:32:46,420 --> 00:32:57,190
some registers and some text files<font color="#E5E5E5"> and</font>

678
00:32:50,800 --> 00:33:05,250
<font color="#E5E5E5">so</font><font color="#CCCCCC"> on so now we can do this on all</font>

679
00:32:57,190 --> 00:33:11,050
samples so here we have first samples

680
00:33:05,250 --> 00:33:15,730
with strings<font color="#E5E5E5"> registries</font><font color="#CCCCCC"> then we can find</font>

681
00:33:11,050 --> 00:33:18,879
some<font color="#E5E5E5"> eglee on other samples and so on so</font>

682
00:33:15,730 --> 00:33:23,220
there<font color="#E5E5E5"> we have all the strings of the</font>

683
00:33:18,880 --> 00:33:23,220
configuration and so on of backspace

684
00:33:24,140 --> 00:33:29,470
[Music]

685
00:33:25,990 --> 00:33:32,750
so<font color="#E5E5E5"> okay we have a</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> but you can be</font>

686
00:33:29,470 --> 00:33:36,020
nice to<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> plug-in clue in either to</font>

687
00:33:32,750 --> 00:33:39,490
match those those buttons<font color="#E5E5E5"> so we have an</font>

688
00:33:36,020 --> 00:33:43,040
Ida<font color="#CCCCCC"> plug-in we convert the Ida graph to</font>

689
00:33:39,490 --> 00:33:47,050
<font color="#E5E5E5">for grab then we can match patterns with</font>

690
00:33:43,040 --> 00:33:50,720
<font color="#E5E5E5">P grab which is the Python binding and</font>

691
00:33:47,050 --> 00:33:53,629
then we can with the UI<font color="#CCCCCC"> bros those</font>

692
00:33:50,720 --> 00:33:57,670
matches and put some color<font color="#CCCCCC"> on it and</font>

693
00:33:53,630 --> 00:34:02,150
then we apply some<font color="#E5E5E5"> filters technique so</font>

694
00:33:57,670 --> 00:34:05,060
match a single<font color="#CCCCCC"> pattern for example for</font>

695
00:34:02,150 --> 00:34:10,280
FC for<font color="#CCCCCC"> a set key</font><font color="#E5E5E5"> we have two small loops</font>

696
00:34:05,060 --> 00:34:13,310
for the<font color="#E5E5E5"> initialization and if we create</font>

697
00:34:10,280 --> 00:34:17,720
just<font color="#CCCCCC"> one pattern</font><font color="#E5E5E5"> for those two loop we</font>

698
00:34:13,310 --> 00:34:21,739
have<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of false positives so</font><font color="#E5E5E5"> we</font>

699
00:34:17,719 --> 00:34:25,339
<font color="#E5E5E5">create some filter techniques</font><font color="#CCCCCC"> it's quite</font>

700
00:34:21,739 --> 00:34:28,250
<font color="#E5E5E5">simple in abuse so for example the set</font>

701
00:34:25,340 --> 00:34:31,580
key of our<font color="#CCCCCC"> a/c phone</font><font color="#E5E5E5"> we have two loops</font>

702
00:34:28,250 --> 00:34:32,929
for the first group is the<font color="#CCCCCC"> first pattern</font>

703
00:34:31,580 --> 00:34:36,319
and the second<font color="#E5E5E5"> loop is the second</font>

704
00:34:32,929 --> 00:34:40,129
pattern so if we<font color="#E5E5E5"> don't have those groups</font>

705
00:34:36,320 --> 00:34:43,040
in the function<font color="#E5E5E5"> it's not all function so</font>

706
00:34:40,130 --> 00:34:45,700
<font color="#CCCCCC">you can see at the right we have the two</font>

707
00:34:43,040 --> 00:34:49,790
patterns<font color="#CCCCCC"> all</font><font color="#E5E5E5"> okay it's accepted but if</font>

708
00:34:45,699 --> 00:34:53,710
the you we have<font color="#E5E5E5"> just one pattern it's</font>

709
00:34:49,790 --> 00:34:59,540
rejected we have also<font color="#E5E5E5"> the right</font>

710
00:34:53,710 --> 00:35:02,600
techniques so<font color="#E5E5E5"> also quite simple we have</font>

711
00:34:59,540 --> 00:35:06,140
two loops but<font color="#E5E5E5"> if we are more than the</font>

712
00:35:02,600 --> 00:35:09,290
<font color="#CCCCCC">mod and two loops in the in the function</font>

713
00:35:06,140 --> 00:35:13,490
so if we match for<font color="#E5E5E5"> example three time</font>

714
00:35:09,290 --> 00:35:15,950
<font color="#E5E5E5">the pattern one the function</font><font color="#CCCCCC"> is rejected</font>

715
00:35:13,490 --> 00:35:17,870
<font color="#CCCCCC">too because we just</font><font color="#E5E5E5"> want the first part</font>

716
00:35:15,950 --> 00:35:21,529
at the first loop one time in the second

717
00:35:17,870 --> 00:35:26,569
loop one time<font color="#E5E5E5"> two then we have the</font>

718
00:35:21,530 --> 00:35:31,520
threshold<font color="#CCCCCC"> so sometimes with the pattern</font>

719
00:35:26,570 --> 00:35:35,540
can have some errors<font color="#E5E5E5"> so at the right we</font>

720
00:35:31,520 --> 00:35:39,140
have<font color="#E5E5E5"> four patents for one</font><font color="#CCCCCC"> function so we</font>

721
00:35:35,540 --> 00:35:43,279
match all pattern so ok it's<font color="#CCCCCC"> good but</font>

722
00:35:39,140 --> 00:35:48,348
the middle the pattern<font color="#E5E5E5"> number five four</font>

723
00:35:43,279 --> 00:35:50,990
three are not here<font color="#E5E5E5"> so the function is</font>

724
00:35:48,349 --> 00:35:54,260
also<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example the function</font><font color="#E5E5E5"> of</font>

725
00:35:50,990 --> 00:35:57,439
decryption<font color="#E5E5E5"> but we missed some some</font>

726
00:35:54,260 --> 00:35:59,660
patterns so we created threshold<font color="#E5E5E5"> so here</font>

727
00:35:57,440 --> 00:36:02,660
we have a<font color="#E5E5E5"> threshold of point</font><font color="#CCCCCC"> seventy</font>

728
00:35:59,660 --> 00:36:06,259
<font color="#CCCCCC">five that means</font><font color="#E5E5E5"> that at</font><font color="#CCCCCC"> least we</font><font color="#E5E5E5"> want</font>

729
00:36:02,660 --> 00:36:08,839
three out of four patterns<font color="#E5E5E5"> so in the</font>

730
00:36:06,260 --> 00:36:11,779
<font color="#E5E5E5">middle</font><font color="#CCCCCC"> its accepted too but at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> left</font>

731
00:36:08,839 --> 00:36:16,490
<font color="#E5E5E5">we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> have two out of four so we</font>

732
00:36:11,779 --> 00:36:21,049
really we reject this function<font color="#E5E5E5"> the last</font>

733
00:36:16,490 --> 00:36:24,500
one is the overlapping so in for example

734
00:36:21,049 --> 00:36:27,170
<font color="#E5E5E5">again the FC for set key we have the two</font>

735
00:36:24,500 --> 00:36:31,400
loops<font color="#E5E5E5"> we create one pattern for the</font>

736
00:36:27,170 --> 00:36:34,640
first and another for the<font color="#CCCCCC"> Siam and if we</font>

737
00:36:31,400 --> 00:36:36,950
match the same with those two pattern

738
00:36:34,640 --> 00:36:39,618
that means<font color="#E5E5E5"> we match the same loop and we</font>

739
00:36:36,950 --> 00:36:44,419
don't want this<font color="#E5E5E5"> but in the</font><font color="#CCCCCC"> example at</font>

740
00:36:39,619 --> 00:36:46,940
the left we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to match of the two</font>

741
00:36:44,420 --> 00:36:48,920
matches<font color="#CCCCCC"> of the first pattern</font><font color="#E5E5E5"> and one of</font>

742
00:36:46,940 --> 00:36:51,559
the second there is an overlapping

743
00:36:48,920 --> 00:36:55,430
between<font color="#CCCCCC"> the first and</font><font color="#E5E5E5"> the second so if</font>

744
00:36:51,559 --> 00:37:01,369
we<font color="#E5E5E5"> remove the pattern number</font><font color="#CCCCCC"> one for the</font>

745
00:36:55,430 --> 00:37:03,649
overlapping we have<font color="#E5E5E5"> valid matches at</font><font color="#CCCCCC"> the</font>

746
00:37:01,369 --> 00:37:09,049
right so we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> say okay it's our</font>

747
00:37:03,650 --> 00:37:13,220
function<font color="#CCCCCC"> this technique is not yet</font>

748
00:37:09,049 --> 00:37:16,180
implemented<font color="#E5E5E5"> in either graph so the</font>

749
00:37:13,220 --> 00:37:19,848
creation<font color="#E5E5E5"> of a rule for the</font><font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> is</font>

750
00:37:16,180 --> 00:37:23,808
quite simple<font color="#CCCCCC"> - so for the SC 430 we</font>

751
00:37:19,849 --> 00:37:26,420
create the<font color="#E5E5E5"> the first loop so loop</font><font color="#CCCCCC"> one</font>

752
00:37:23,809 --> 00:37:28,519
will give the the pass through<font color="#E5E5E5"> the dot</font>

753
00:37:26,420 --> 00:37:32,029
sign to the pattern<font color="#E5E5E5"> then we give a name</font>

754
00:37:28,519 --> 00:37:34,578
<font color="#E5E5E5">a decryption</font><font color="#CCCCCC"> a description of this</font>

755
00:37:32,029 --> 00:37:37,579
<font color="#E5E5E5">pattern then</font><font color="#CCCCCC"> we say okay a minimum</font>

756
00:37:34,579 --> 00:37:41,599
pattern is<font color="#CCCCCC"> one so</font><font color="#E5E5E5"> that means I want to</font>

757
00:37:37,579 --> 00:37:44,779
match one time this pattern or more then

758
00:37:41,599 --> 00:37:49,190
we fix<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> pattern</font><font color="#E5E5E5"> so we say I want</font>

759
00:37:44,779 --> 00:37:51,800
at a next<font color="#E5E5E5"> one time this pattern so we</font>

760
00:37:49,190 --> 00:37:53,660
must match<font color="#CCCCCC"> just one time the</font>

761
00:37:51,800 --> 00:37:57,440
the first group<font color="#CCCCCC"> we do the same things</font>

762
00:37:53,660 --> 00:38:00,200
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> second loop then we</font><font color="#CCCCCC"> create a the</font>

763
00:37:57,440 --> 00:38:03,170
function<font color="#E5E5E5"> pattern so we gave the two</font>

764
00:38:00,200 --> 00:38:06,439
loops<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we we must</font><font color="#E5E5E5"> match those to</font>

765
00:38:03,170 --> 00:38:08,810
the two loops in the function set key of

766
00:38:06,440 --> 00:38:13,220
<font color="#E5E5E5">FC form then we put the</font><font color="#CCCCCC"> threshold that</font>

767
00:38:08,810 --> 00:38:16,730
<font color="#E5E5E5">here is one so it means we must get the</font>

768
00:38:13,220 --> 00:38:19,399
to the to attempt<font color="#E5E5E5"> to regulate the</font>

769
00:38:16,730 --> 00:38:43,850
<font color="#CCCCCC">function then a name a description and</font>

770
00:38:19,400 --> 00:38:49,340
<font color="#E5E5E5">data so they know okay so</font><font color="#CCCCCC"> you load</font><font color="#E5E5E5"> the</font>

771
00:38:43,850 --> 00:38:52,220
plug-in you get so<font color="#E5E5E5"> the fingerprint is to</font>

772
00:38:49,340 --> 00:38:57,830
find the patterns<font color="#E5E5E5"> so okay we launched</font>

773
00:38:52,220 --> 00:39:02,930
<font color="#E5E5E5">here</font><font color="#CCCCCC"> we can see we have matched some</font>

774
00:38:57,830 --> 00:39:05,420
<font color="#E5E5E5">patterns so we can click on</font><font color="#CCCCCC"> it and then</font>

775
00:39:02,930 --> 00:39:09,529
we have the decryption routine<font color="#E5E5E5"> okay but</font>

776
00:39:05,420 --> 00:39:12,890
sometimes we don't know really where out

777
00:39:09,530 --> 00:39:14,650
the matched<font color="#E5E5E5"> so we put some color in</font><font color="#CCCCCC"> it</font>

778
00:39:12,890 --> 00:39:17,930
<font color="#CCCCCC">so here</font><font color="#E5E5E5"> beam's</font>

779
00:39:14,650 --> 00:39:21,140
okay<font color="#CCCCCC"> and then we</font><font color="#E5E5E5"> have the color on the</font>

780
00:39:17,930 --> 00:39:25,100
<font color="#E5E5E5">two instruction for the decryption loop</font>

781
00:39:21,140 --> 00:39:32,810
<font color="#CCCCCC">and we have some color on the entry</font>

782
00:39:25,100 --> 00:39:37,670
<font color="#E5E5E5">points so here we have okay is the</font>

783
00:39:32,810 --> 00:39:47,240
pushes for the<font color="#E5E5E5"> strings and if we are</font>

784
00:39:37,670 --> 00:39:53,630
<font color="#E5E5E5">knowing renamed okay then we launch</font>

785
00:39:47,240 --> 00:39:56,180
<font color="#E5E5E5">again the scan here we have the name</font><font color="#CCCCCC"> of</font>

786
00:39:53,630 --> 00:39:59,530
<font color="#CCCCCC">the function also with the number of</font>

787
00:39:56,180 --> 00:39:59,529
<font color="#E5E5E5">instruction and so on</font>

788
00:40:02,670 --> 00:40:05,970
so<font color="#E5E5E5"> okay</font>

789
00:40:06,640 --> 00:40:13,000
<font color="#CCCCCC">SC for the match are not efficient</font>

790
00:40:09,640 --> 00:40:18,060
<font color="#E5E5E5">because the</font><font color="#CCCCCC"> boots are very</font><font color="#E5E5E5"> small in very</font>

791
00:40:13,000 --> 00:40:21,580
generic<font color="#E5E5E5"> so we have we still have many</font>

792
00:40:18,060 --> 00:40:24,180
false<font color="#CCCCCC"> positives</font><font color="#E5E5E5"> but we have few false</font>

793
00:40:21,580 --> 00:40:29,140
negative<font color="#E5E5E5"> which is cool</font>

794
00:40:24,180 --> 00:40:35,049
<font color="#E5E5E5">so the the cooling is appropriate</font><font color="#CCCCCC"> okay</font>

795
00:40:29,140 --> 00:40:37,799
and we<font color="#E5E5E5"> can try maybe to create other</font>

796
00:40:35,050 --> 00:40:42,490
signatures for other cryptographic

797
00:40:37,800 --> 00:40:47,220
algorithm placards and<font color="#E5E5E5"> so on and maybe</font>

798
00:40:42,490 --> 00:40:53,339
we can<font color="#E5E5E5"> put the filtering techniques in</font>

799
00:40:47,220 --> 00:40:56,350
<font color="#CCCCCC">pig wrap because it's only in Ida grab</font>

800
00:40:53,340 --> 00:41:00,880
so the<font color="#CCCCCC"> perspective</font><font color="#E5E5E5"> some limitation of</font>

801
00:40:56,350 --> 00:41:05,170
our<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> all the arguments instruction</font>

802
00:41:00,880 --> 00:41:08,020
opcode<font color="#E5E5E5"> and so on are</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our strings so</font>

803
00:41:05,170 --> 00:41:11,740
sometimes we have<font color="#CCCCCC"> to do some dirty hack</font>

804
00:41:08,020 --> 00:41:14,890
to get for<font color="#E5E5E5"> example here the conditional</font>

805
00:41:11,740 --> 00:41:19,600
jump<font color="#E5E5E5"> so we want to match an instruction</font>

806
00:41:14,890 --> 00:41:21,129
strings that begin with J<font color="#E5E5E5"> okay and we</font>

807
00:41:19,600 --> 00:41:25,150
want<font color="#E5E5E5"> the</font><font color="#CCCCCC"> node to have two children</font>

808
00:41:21,130 --> 00:41:28,300
<font color="#E5E5E5">because in the graph the instruction</font>

809
00:41:25,150 --> 00:41:31,869
with children<font color="#CCCCCC"> our</font><font color="#E5E5E5"> codes and conditional</font>

810
00:41:28,300 --> 00:41:35,890
jumps so we are<font color="#E5E5E5"> lucky codes begin with C</font>

811
00:41:31,869 --> 00:41:38,980
so<font color="#E5E5E5"> okay then we have other problem</font>

812
00:41:35,890 --> 00:41:42,100
because in<font color="#E5E5E5"> the standalone tool we use</font>

813
00:41:38,980 --> 00:41:45,220
the capstone engine in<font color="#CCCCCC"> in either we use</font>

814
00:41:42,100 --> 00:41:48,180
<font color="#E5E5E5">the Ida engine so sometimes with for</font>

815
00:41:45,220 --> 00:41:54,100
<font color="#E5E5E5">example the variables we have in either</font>

816
00:41:48,180 --> 00:41:58,750
<font color="#CCCCCC">25h for the</font><font color="#E5E5E5"> integrity small value 25 and</font>

817
00:41:54,100 --> 00:42:04,569
in capstone we have oxt 5 so again<font color="#E5E5E5"> dirty</font>

818
00:41:58,750 --> 00:42:09,330
hack to catch both cases so<font color="#CCCCCC"> aku we catch</font>

819
00:42:04,570 --> 00:42:09,330
25 or the<font color="#CCCCCC"> Oh X 25</font>

820
00:42:09,419 --> 00:42:15,879
so the solution is semantics<font color="#E5E5E5"> the IDB and</font>

821
00:42:13,269 --> 00:42:20,828
<font color="#E5E5E5">that is to say okay I want to check if</font>

822
00:42:15,880 --> 00:42:23,069
my argument<font color="#E5E5E5"> one is a register or I want</font>

823
00:42:20,829 --> 00:42:26,319
to check if the opcode is the

824
00:42:23,069 --> 00:42:29,469
conditional jumps<font color="#E5E5E5"> and so on the same</font>

825
00:42:26,319 --> 00:42:34,329
thing for<font color="#E5E5E5"> the fog one if we want to</font>

826
00:42:29,469 --> 00:42:41,349
<font color="#E5E5E5">catch an intent integers</font><font color="#CCCCCC"> with the value</font>

827
00:42:34,329 --> 00:42:44,229
25 but maybe in<font color="#E5E5E5"> grab me</font><font color="#CCCCCC"> too okay okay</font>

828
00:42:41,349 --> 00:42:48,069
there is another limitation<font color="#E5E5E5"> of the how</font>

829
00:42:44,229 --> 00:42:49,868
<font color="#CCCCCC">wide</font><font color="#E5E5E5"> pattern that is that we can we</font>

830
00:42:48,069 --> 00:42:53,288
explain how<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can do note repetition</font>

831
00:42:49,869 --> 00:42:55,329
but there is one limitation<font color="#E5E5E5"> that that is</font>

832
00:42:53,289 --> 00:42:57,160
the following we can either when with

833
00:42:55,329 --> 00:42:58,959
<font color="#CCCCCC">not repetition we can either say I want</font>

834
00:42:57,160 --> 00:43:00,819
the<font color="#E5E5E5"> least number of matched instructions</font>

835
00:42:58,959 --> 00:43:02,828
or I want the<font color="#CCCCCC"> maximum number of</font><font color="#E5E5E5"> matched</font>

836
00:43:00,819 --> 00:43:05,979
<font color="#E5E5E5">instruction there is no</font><font color="#CCCCCC"> in-between so</font>

837
00:43:02,829 --> 00:43:09,369
the problem is this<font color="#E5E5E5"> one we have a button</font>

838
00:43:05,979 --> 00:43:11,799
<font color="#CCCCCC">that says</font><font color="#E5E5E5"> I want to match one</font><font color="#CCCCCC"> two for</font>

839
00:43:09,369 --> 00:43:13,509
any instruction then I want to match

840
00:43:11,799 --> 00:43:16,029
exhort<font color="#E5E5E5"> and I want to</font><font color="#CCCCCC"> match your color</font>

841
00:43:13,509 --> 00:43:17,229
then I say ok this<font color="#E5E5E5"> is our forming</font>

842
00:43:16,029 --> 00:43:20,469
instruction so it's<font color="#E5E5E5"> one two</font><font color="#CCCCCC"> five</font>

843
00:43:17,229 --> 00:43:22,390
anything<font color="#E5E5E5"> then</font><font color="#CCCCCC"> the called a nickel and so</font>

844
00:43:20,469 --> 00:43:24,880
there is a<font color="#E5E5E5"> lazy</font><font color="#CCCCCC"> whippet here</font><font color="#E5E5E5"> we can</font>

845
00:43:22,390 --> 00:43:26,469
<font color="#E5E5E5">either put true or false if we put true</font>

846
00:43:24,880 --> 00:43:28,630
it will<font color="#E5E5E5"> mean that we</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> take the</font>

847
00:43:26,469 --> 00:43:30,609
least number of<font color="#E5E5E5"> instructions if you put</font>

848
00:43:28,630 --> 00:43:32,979
false<font color="#E5E5E5"> we want to take the maximum number</font>

849
00:43:30,609 --> 00:43:36,479
<font color="#CCCCCC">of instructions so</font><font color="#E5E5E5"> we will see how to</font>

850
00:43:32,979 --> 00:43:39,368
match this<font color="#CCCCCC"> pattern under on a binary</font>

851
00:43:36,479 --> 00:43:42,149
graph that<font color="#E5E5E5"> would have a push then a push</font>

852
00:43:39,369 --> 00:43:45,339
then ago then another<font color="#CCCCCC"> glower</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> call</font>

853
00:43:42,150 --> 00:43:48,099
so with the follow with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the current</font>

854
00:43:45,339 --> 00:43:51,549
to set if we put lazy repeat<font color="#E5E5E5"> to through</font>

855
00:43:48,099 --> 00:43:55,059
the matching for the any node will stop

856
00:43:51,549 --> 00:43:57,189
once it switches eggs or so for n it

857
00:43:55,059 --> 00:43:59,439
<font color="#E5E5E5">will take push push then it will stop</font>

858
00:43:57,189 --> 00:44:02,109
then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> gore node will match the absorb</font>

859
00:43:59,439 --> 00:44:04,868
<font color="#E5E5E5">then the call node will try to matrix or</font>

860
00:44:02,109 --> 00:44:06,429
it doesn't<font color="#E5E5E5"> work so there is no match so</font>

861
00:44:04,869 --> 00:44:08,859
it doesn't work with<font color="#CCCCCC"> lazy whip it at</font>

862
00:44:06,429 --> 00:44:11,169
crew<font color="#E5E5E5"> if we put lady repeat that false so</font>

863
00:44:08,859 --> 00:44:13,328
any the any node will try to match the

864
00:44:11,169 --> 00:44:14,469
maximum number<font color="#CCCCCC"> of instruction so the</font>

865
00:44:13,329 --> 00:44:18,609
problem is<font color="#E5E5E5"> it is greedy</font>

866
00:44:14,469 --> 00:44:20,589
so the any node<font color="#CCCCCC"> which match push push</font>

867
00:44:18,609 --> 00:44:22,890
door and go<font color="#E5E5E5"> because it matches for</font>

868
00:44:20,589 --> 00:44:25,500
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> and then we get to the door</font>

869
00:44:22,890 --> 00:44:28,230
that<font color="#E5E5E5"> finds a cool so it doesn't matter</font>

870
00:44:25,500 --> 00:44:31,680
<font color="#E5E5E5">it</font><font color="#CCCCCC"> doesn't work either so there is no</font>

871
00:44:28,230 --> 00:44:33,720
way<font color="#CCCCCC"> for all two now to match this binary</font>

872
00:44:31,680 --> 00:44:36,000
<font color="#E5E5E5">thing with this</font><font color="#CCCCCC"> pattern</font><font color="#E5E5E5"> but it is</font>

873
00:44:33,720 --> 00:44:38,098
<font color="#CCCCCC">counterintuitive because as with regular</font>

874
00:44:36,000 --> 00:44:40,650
<font color="#CCCCCC">expressions we'd like</font><font color="#E5E5E5"> to say okay I</font>

875
00:44:38,099 --> 00:44:43,799
don't<font color="#CCCCCC"> care</font><font color="#E5E5E5"> if any takes one two three or</font>

876
00:44:40,650 --> 00:44:46,170
<font color="#CCCCCC">four instructions I would like to test</font>

877
00:44:43,799 --> 00:44:48,779
them all so of course the solution<font color="#E5E5E5"> may</font>

878
00:44:46,170 --> 00:44:51,329
be also for<font color="#E5E5E5"> grab v2 would be to try</font>

879
00:44:48,779 --> 00:44:53,640
every<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> repetitions</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> one two</font>

880
00:44:51,329 --> 00:44:55,829
three<font color="#CCCCCC"> four of course it will</font><font color="#E5E5E5"> be slower</font>

881
00:44:53,640 --> 00:45:00,210
so<font color="#CCCCCC"> we will</font><font color="#E5E5E5"> need to watch watch out for</font>

882
00:44:55,829 --> 00:45:02,369
an impact<font color="#CCCCCC"> on performance</font><font color="#E5E5E5"> okay we have a</font>

883
00:45:00,210 --> 00:45:04,500
lot of more<font color="#CCCCCC"> IG that</font><font color="#E5E5E5"> we would like to</font>

884
00:45:02,369 --> 00:45:06,720
<font color="#E5E5E5">implement in the</font><font color="#CCCCCC"> patterns</font><font color="#E5E5E5"> one thing that</font>

885
00:45:04,500 --> 00:45:09,269
it's limited<font color="#CCCCCC"> also with the current</font>

886
00:45:06,720 --> 00:45:12,209
<font color="#CCCCCC">version is that for basic blocks we only</font>

887
00:45:09,269 --> 00:45:14,038
have instructions on the into the

888
00:45:12,210 --> 00:45:16,140
<font color="#E5E5E5">condition and basic blocks for now</font><font color="#CCCCCC"> will</font>

889
00:45:14,039 --> 00:45:18,630
apply<font color="#E5E5E5"> to every node and which we would</font>

890
00:45:16,140 --> 00:45:20,640
<font color="#CCCCCC">like to say is I won't find your basic</font>

891
00:45:18,630 --> 00:45:22,500
blocks that has at<font color="#CCCCCC"> least one</font><font color="#E5E5E5"> X or</font>

892
00:45:20,640 --> 00:45:24,299
instruction or find me a basic block

893
00:45:22,500 --> 00:45:26,190
that has at least tubes or instructions

894
00:45:24,299 --> 00:45:27,839
<font color="#E5E5E5">on one compare instruction that we</font>

895
00:45:26,190 --> 00:45:30,599
cannot do for<font color="#E5E5E5"> now so maybe we will also</font>

896
00:45:27,839 --> 00:45:33,690
<font color="#E5E5E5">work on that later so we said that</font>

897
00:45:30,599 --> 00:45:36,150
children<font color="#E5E5E5"> are numbered so you</font><font color="#CCCCCC"> have to</font>

898
00:45:33,690 --> 00:45:37,799
specify when you do<font color="#E5E5E5"> edges if you're</font>

899
00:45:36,150 --> 00:45:40,410
talking<font color="#CCCCCC"> about line number</font><font color="#E5E5E5"> one or trend</font>

900
00:45:37,799 --> 00:45:41,369
<font color="#CCCCCC">number two</font><font color="#E5E5E5"> sometimes we will want to say</font>

901
00:45:40,410 --> 00:45:44,490
<font color="#E5E5E5">okay I don't care</font>

902
00:45:41,369 --> 00:45:46,049
so is it<font color="#E5E5E5"> maybe the for instance</font><font color="#CCCCCC"> for</font>

903
00:45:44,490 --> 00:45:48,390
conditional jump you could say this

904
00:45:46,049 --> 00:45:50,009
could<font color="#CCCCCC"> be</font><font color="#E5E5E5"> the child for when the</font>

905
00:45:48,390 --> 00:45:51,509
condition is<font color="#E5E5E5"> fulfilled or for when the</font>

906
00:45:50,009 --> 00:45:53,309
condition is<font color="#CCCCCC"> not fulfilled I don't care</font>

907
00:45:51,509 --> 00:45:55,380
<font color="#E5E5E5">so we would like to add an option</font><font color="#CCCCCC"> that</font>

908
00:45:53,309 --> 00:45:57,869
<font color="#E5E5E5">would be child number is a question mark</font>

909
00:45:55,380 --> 00:46:01,980
<font color="#E5E5E5">and so the algorithm</font><font color="#CCCCCC"> should try the both</font>

910
00:45:57,869 --> 00:46:04,319
options then as<font color="#E5E5E5"> the</font><font color="#CCCCCC"> nettan</font><font color="#E5E5E5"> explained we</font>

911
00:46:01,980 --> 00:46:06,509
would like<font color="#CCCCCC"> Twitter buttons in bag web</font>

912
00:46:04,319 --> 00:46:09,180
which would be<font color="#CCCCCC"> labeled</font><font color="#E5E5E5"> for us to say</font>

913
00:46:06,509 --> 00:46:11,460
okay<font color="#E5E5E5"> I have five buttons</font><font color="#CCCCCC"> I want to match</font>

914
00:46:09,180 --> 00:46:13,589
if we find three<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> that's enough</font>

915
00:46:11,460 --> 00:46:15,869
<font color="#CCCCCC">or we would like to say</font><font color="#E5E5E5"> okay I have two</font>

916
00:46:13,589 --> 00:46:19,078
patterns p1 and p2<font color="#E5E5E5"> find me of a binary</font>

917
00:46:15,869 --> 00:46:21,210
that has one match of p1<font color="#E5E5E5"> that is</font>

918
00:46:19,079 --> 00:46:23,279
directly followed<font color="#E5E5E5"> by a matter of p2</font><font color="#CCCCCC"> that</font>

919
00:46:21,210 --> 00:46:26,069
is there is one<font color="#E5E5E5"> instruction of p1 that</font>

920
00:46:23,279 --> 00:46:28,049
has as a child an instruction of p2<font color="#E5E5E5"> that</font>

921
00:46:26,069 --> 00:46:31,319
<font color="#CCCCCC">we would like to</font><font color="#E5E5E5"> do some pattern linking</font>

922
00:46:28,049 --> 00:46:33,779
like that the last point is<font color="#CCCCCC"> that for now</font>

923
00:46:31,319 --> 00:46:35,840
we constructed the graphs

924
00:46:33,779 --> 00:46:38,120
manually with writing

925
00:46:35,840 --> 00:46:40,520
a text file<font color="#E5E5E5"> it works it's okay when you</font>

926
00:46:38,120 --> 00:46:42,920
<font color="#E5E5E5">have a when you</font><font color="#CCCCCC"> reduce</font><font color="#E5E5E5"> to it it's quite</font>

927
00:46:40,520 --> 00:46:45,140
fast<font color="#E5E5E5"> but it would still be</font><font color="#CCCCCC"> zero to be</font>

928
00:46:42,920 --> 00:46:47,570
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to select</font><font color="#CCCCCC"> node in</font><font color="#E5E5E5"> Ida and then</font>

929
00:46:45,140 --> 00:46:50,480
click<font color="#CCCCCC"> export and</font><font color="#E5E5E5"> will generate a nice</font>

930
00:46:47,570 --> 00:46:52,220
<font color="#E5E5E5">dot file with all the nodes and all the</font>

931
00:46:50,480 --> 00:46:56,360
<font color="#E5E5E5">edges that</font><font color="#CCCCCC"> you want it will be much</font>

932
00:46:52,220 --> 00:46:59,419
faster<font color="#E5E5E5"> to create patterns okay</font><font color="#CCCCCC"> so this</font>

933
00:46:56,360 --> 00:47:01,940
<font color="#E5E5E5">will end or all talk the conclusion is</font>

934
00:46:59,420 --> 00:47:04,730
that graph is at the same time a

935
00:47:01,940 --> 00:47:07,970
thunderdrum tool it has<font color="#E5E5E5"> peyton manning's</font>

936
00:47:04,730 --> 00:47:11,150
<font color="#E5E5E5">we have an</font><font color="#CCCCCC"> IDE a plug-in our goal was</font><font color="#E5E5E5"> to</font>

937
00:47:07,970 --> 00:47:13,069
<font color="#E5E5E5">create a tool that can make a graph</font>

938
00:47:11,150 --> 00:47:15,980
<font color="#E5E5E5">buttons that</font><font color="#CCCCCC"> are easy to</font><font color="#E5E5E5"> write and easy</font>

939
00:47:13,070 --> 00:47:17,720
to understand<font color="#CCCCCC"> we believe it is useful</font>

940
00:47:15,980 --> 00:47:21,290
for<font color="#CCCCCC"> detection and</font><font color="#E5E5E5"> automatic</font><font color="#CCCCCC"> analysis we</font>

941
00:47:17,720 --> 00:47:23,779
show<font color="#E5E5E5"> that on</font><font color="#CCCCCC"> backspace and it works</font><font color="#E5E5E5"> the</font>

942
00:47:21,290 --> 00:47:27,400
tool is a<font color="#CCCCCC"> fully open source</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can</font>

943
00:47:23,780 --> 00:47:27,400
find it online<font color="#CCCCCC"> at this address</font><font color="#E5E5E5"> as</font>

944
00:47:27,460 --> 00:47:32,870
perspectives for the future<font color="#E5E5E5"> maybe for</font>

945
00:47:29,690 --> 00:47:35,810
the v2 we would like to<font color="#E5E5E5"> add some button</font>

946
00:47:32,870 --> 00:47:39,080
features we talked about processing<font color="#CCCCCC"> stem</font>

947
00:47:35,810 --> 00:47:41,620
antics information from instructions<font color="#CCCCCC"> we</font>

948
00:47:39,080 --> 00:47:43,790
talked about condition and basic blocks

949
00:47:41,620 --> 00:47:46,850
we would like<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to create</font>

950
00:47:43,790 --> 00:47:49,850
patterns<font color="#E5E5E5"> directly within either</font><font color="#CCCCCC"> and then</font>

951
00:47:46,850 --> 00:47:52,700
we would like to<font color="#E5E5E5"> have many more</font><font color="#CCCCCC"> examples</font>

952
00:47:49,850 --> 00:47:55,460
that<font color="#E5E5E5"> work on crypto algorithms we were</font>

953
00:47:52,700 --> 00:47:58,879
going to try<font color="#CCCCCC"> with AES and on Packers on</font>

954
00:47:55,460 --> 00:48:00,890
<font color="#CCCCCC">incumbent</font><font color="#E5E5E5"> Packers so this will end</font><font color="#CCCCCC"> also</font>

955
00:47:58,880 --> 00:48:03,310
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> for listening</font><font color="#E5E5E5"> and we will try</font>

956
00:48:00,890 --> 00:48:03,310
to answer questions

957
00:48:05,070 --> 00:48:12,690
[Applause]

958
00:48:10,040 --> 00:48:15,500
thank you for the talk<font color="#CCCCCC"> very</font><font color="#E5E5E5"> good talk</font><font color="#CCCCCC"> I</font>

959
00:48:12,690 --> 00:48:19,290
will<font color="#E5E5E5"> ring if</font><font color="#CCCCCC"> you had thought about using</font>

960
00:48:15,500 --> 00:48:22,500
<font color="#E5E5E5">since you can</font><font color="#CCCCCC"> have capstone in Adana I</font>

961
00:48:19,290 --> 00:48:25,170
<font color="#E5E5E5">think I haven't tried</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> but could you</font>

962
00:48:22,500 --> 00:48:27,510
just<font color="#CCCCCC"> use capstone everywhere I did not</font>

963
00:48:25,170 --> 00:48:30,990
buy<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so ready to use captain NIDA</font>

964
00:48:27,510 --> 00:48:33,240
<font color="#E5E5E5">yeah we thought</font><font color="#CCCCCC"> about it but we have not</font>

965
00:48:30,990 --> 00:48:35,629
decided yet<font color="#E5E5E5"> another thing</font><font color="#CCCCCC"> to put</font><font color="#E5E5E5"> into</font>

966
00:48:33,240 --> 00:48:35,629
<font color="#E5E5E5">the</font><font color="#CCCCCC"> design</font>

967
00:48:47,650 --> 00:48:51,189
[Applause]

