1
00:00:01,650 --> 00:00:13,309
[Music]

2
00:00:08,990 --> 00:00:13,309
<font color="#CCCCCC">hoggle 2017</font>

3
00:00:20,570 --> 00:00:26,369
<font color="#E5E5E5">okay</font>

4
00:00:23,310 --> 00:00:28,109
<font color="#E5E5E5">about us I'm</font><font color="#CCCCCC"> Andre VI ma'am security</font>

5
00:00:26,369 --> 00:00:30,840
<font color="#E5E5E5">researcher and security research</font>

6
00:00:28,109 --> 00:00:33,150
engineer of Microsoft<font color="#E5E5E5"> now I have worked</font>

7
00:00:30,840 --> 00:00:35,820
it for<font color="#CCCCCC"> three years for the</font><font color="#E5E5E5"> Talos</font><font color="#CCCCCC"> the</font>

8
00:00:33,150 --> 00:00:38,820
Cisco Talos team and I'm<font color="#CCCCCC"> specialized</font><font color="#E5E5E5"> in</font>

9
00:00:35,820 --> 00:00:41,580
<font color="#E5E5E5">windows internal and low-level reverse</font>

10
00:00:38,820 --> 00:00:43,710
engineering<font color="#CCCCCC"> I have a</font><font color="#E5E5E5"> previous work</font><font color="#CCCCCC"> at</font>

11
00:00:41,580 --> 00:00:48,930
<font color="#E5E5E5">for products</font><font color="#CCCCCC"> web bruton safer birdshot</font>

12
00:00:43,710 --> 00:00:51,120
<font color="#CCCCCC">that our companies</font><font color="#E5E5E5"> and located even on</font>

13
00:00:48,930 --> 00:00:52,949
one is in Italy<font color="#CCCCCC"> I'm the</font><font color="#E5E5E5"> original</font>

14
00:00:51,120 --> 00:00:55,169
designer of the first UEFI boot<font color="#CCCCCC"> fit in</font>

15
00:00:52,949 --> 00:00:57,269
<font color="#E5E5E5">the year 2012 and the first patch</font><font color="#CCCCCC"> got</font>

16
00:00:55,170 --> 00:01:02,430
the 8.1 bypass presented in the year

17
00:00:57,269 --> 00:01:05,339
2014 and I'm<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> designer of</font><font color="#E5E5E5"> the</font>

18
00:01:02,430 --> 00:01:09,210
<font color="#E5E5E5">Windows PC driver that we are going</font><font color="#CCCCCC"> to</font>

19
00:01:05,339 --> 00:01:11,548
<font color="#CCCCCC">present and I'm Richard Johnson I'm</font><font color="#E5E5E5"> the</font>

20
00:01:09,210 --> 00:01:13,830
research<font color="#E5E5E5"> technical lead for Cisco</font><font color="#CCCCCC"> Telus</font>

21
00:01:11,549 --> 00:01:16,200
we have a team<font color="#CCCCCC"> that does vonner ability</font>

22
00:01:13,830 --> 00:01:18,689
research and I<font color="#E5E5E5"> help guide those efforts</font>

23
00:01:16,200 --> 00:01:21,240
you may see<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of our vulnerabilities</font>

24
00:01:18,689 --> 00:01:24,649
in the past year and<font color="#CCCCCC"> we focus on</font>

25
00:01:21,240 --> 00:01:28,740
technology<font color="#E5E5E5"> is mostly for finding bugs</font>

26
00:01:24,650 --> 00:01:29,999
<font color="#E5E5E5">and so this was as he mentioned</font><font color="#CCCCCC"> some I</font>

27
00:01:28,740 --> 00:01:32,490
<font color="#CCCCCC">talked to the last couple years</font><font color="#E5E5E5"> that</font>

28
00:01:29,999 --> 00:01:34,820
<font color="#E5E5E5">recon have been in the focus of</font>

29
00:01:32,490 --> 00:01:37,408
<font color="#E5E5E5">high-performance</font><font color="#CCCCCC"> applied to fuzzing and</font>

30
00:01:34,820 --> 00:01:40,798
engineering technologies that<font color="#E5E5E5"> give us</font>

31
00:01:37,409 --> 00:01:42,810
feedback driven buzzing and componentize

32
00:01:40,799 --> 00:01:44,630
is the different parts of the<font color="#CCCCCC"> process to</font>

33
00:01:42,810 --> 00:01:47,310
try to<font color="#E5E5E5"> make it as fast as possible</font><font color="#CCCCCC"> I</font>

34
00:01:44,630 --> 00:01:49,890
came across this new architectural

35
00:01:47,310 --> 00:01:53,119
feature in Intel CPUs called<font color="#E5E5E5"> Intel</font>

36
00:01:49,890 --> 00:01:55,469
processor<font color="#E5E5E5"> trace about two years ago and</font>

37
00:01:53,119 --> 00:01:58,259
<font color="#E5E5E5">basically it's a hardware supported</font>

38
00:01:55,469 --> 00:02:01,619
mechanism for doing<font color="#E5E5E5"> code coverage and I</font>

39
00:01:58,259 --> 00:02:03,030
made a<font color="#E5E5E5"> prototype for this in 2015 that</font>

40
00:02:01,619 --> 00:02:05,759
worked for Linux<font color="#E5E5E5"> because there was</font>

41
00:02:03,030 --> 00:02:08,130
experimental support<font color="#E5E5E5"> via some</font>

42
00:02:05,759 --> 00:02:09,869
<font color="#CCCCCC">open-source drivers after</font><font color="#E5E5E5"> evaluating it</font>

43
00:02:08,130 --> 00:02:11,100
I realized that<font color="#CCCCCC"> this would be a</font><font color="#E5E5E5"> great</font>

44
00:02:09,869 --> 00:02:14,850
thing<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bring to</font><font color="#E5E5E5"> the Windows operating</font>

45
00:02:11,100 --> 00:02:16,620
system<font color="#CCCCCC"> but the Intel support for it was</font>

46
00:02:14,850 --> 00:02:20,010
not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be suitable</font><font color="#E5E5E5"> for what we</font>

47
00:02:16,620 --> 00:02:21,990
were looking for<font color="#E5E5E5"> so last year at recon</font>

48
00:02:20,010 --> 00:02:23,850
we had our very first version<font color="#CCCCCC"> of the</font>

49
00:02:21,990 --> 00:02:26,100
<font color="#E5E5E5">Windows driver working like an hour</font>

50
00:02:23,850 --> 00:02:28,859
<font color="#E5E5E5">before we got on stage</font><font color="#CCCCCC"> and it was</font><font color="#E5E5E5"> doing</font>

51
00:02:26,100 --> 00:02:29,850
a raw<font color="#E5E5E5"> decode and so we're going to talk</font>

52
00:02:28,860 --> 00:02:31,260
<font color="#CCCCCC">about the last</font><font color="#E5E5E5"> six months</font><font color="#CCCCCC"> of</font>

53
00:02:29,850 --> 00:02:33,750
developments which have<font color="#E5E5E5"> brought all</font>

54
00:02:31,260 --> 00:02:34,739
<font color="#CCCCCC">kinds of support to</font><font color="#E5E5E5"> the driver</font>

55
00:02:33,750 --> 00:02:36,810
and this picks up where the<font color="#E5E5E5"> last one</font>

56
00:02:34,740 --> 00:02:38,370
<font color="#E5E5E5">went off so Andre is</font><font color="#CCCCCC"> going to give you</font>

57
00:02:36,810 --> 00:02:40,110
the<font color="#CCCCCC"> introduction of the technical</font>

58
00:02:38,370 --> 00:02:42,210
<font color="#E5E5E5">details of the driver and a low level of</font>

59
00:02:40,110 --> 00:02:44,910
Malaysian and some<font color="#E5E5E5"> generals and then</font>

60
00:02:42,210 --> 00:02:51,540
we'll address that<font color="#E5E5E5"> as applied to fuzzing</font>

61
00:02:44,910 --> 00:02:54,420
and<font color="#E5E5E5"> binding bugs</font><font color="#CCCCCC"> okay</font>

62
00:02:51,540 --> 00:02:56,250
speaking about<font color="#CCCCCC"> process cadres the</font>

63
00:02:54,420 --> 00:02:59,579
process of trace is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> is a new feature</font>

64
00:02:56,250 --> 00:03:01,770
of the latest Intel skylake CPU<font color="#E5E5E5"> it's</font>

65
00:02:59,580 --> 00:03:04,020
very<font color="#E5E5E5"> useful because it can trace</font>

66
00:03:01,770 --> 00:03:07,880
whatever<font color="#E5E5E5"> your CPU is</font><font color="#CCCCCC"> going to execute</font>

67
00:03:04,020 --> 00:03:11,459
<font color="#E5E5E5">like in hardware and it has some</font>

68
00:03:07,880 --> 00:03:13,560
particular benefit especially<font color="#CCCCCC"> for code</font>

69
00:03:11,459 --> 00:03:15,120
coverage for dynamic code coverage for

70
00:03:13,560 --> 00:03:17,040
example<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> would like to understand</font>

71
00:03:15,120 --> 00:03:21,150
what<font color="#CCCCCC"> a</font><font color="#E5E5E5"> particular piece of software</font>

72
00:03:17,040 --> 00:03:25,100
<font color="#CCCCCC">would like to</font><font color="#E5E5E5"> to do for malware analysis</font>

73
00:03:21,150 --> 00:03:30,330
or for whatever<font color="#E5E5E5"> I mean the news</font><font color="#CCCCCC"> HR</font>

74
00:03:25,100 --> 00:03:32,160
<font color="#E5E5E5">values for I would like before because</font>

75
00:03:30,330 --> 00:03:35,340
we have not<font color="#CCCCCC"> a lot of time I would like</font>

76
00:03:32,160 --> 00:03:39,959
<font color="#E5E5E5">to we are quite fast in the in</font>

77
00:03:35,340 --> 00:03:41,880
describing the owl is the<font color="#CCCCCC"> inter pcs is</font>

78
00:03:39,959 --> 00:03:43,440
executed in a<font color="#CCCCCC"> senior</font><font color="#E5E5E5"> CPU and I would</font>

79
00:03:41,880 --> 00:03:45,590
like<font color="#E5E5E5"> to concentrate of the new fee on a</font>

80
00:03:43,440 --> 00:03:51,000
new feature<font color="#CCCCCC"> of the of our driver</font>

81
00:03:45,590 --> 00:03:53,250
<font color="#E5E5E5">basically being</font><font color="#CCCCCC"> faster</font><font color="#E5E5E5"> then to discover</font>

82
00:03:51,000 --> 00:03:56,489
the Intel processor<font color="#CCCCCC"> trace in a CPU its</font>

83
00:03:53,250 --> 00:04:00,870
you can do even in a user mode only

84
00:03:56,489 --> 00:04:04,110
<font color="#CCCCCC">emitting to CPUID instruction</font><font color="#E5E5E5"> with two</font>

85
00:04:00,870 --> 00:04:06,420
different<font color="#E5E5E5"> lives one</font><font color="#CCCCCC"> is used to detect</font>

86
00:04:04,110 --> 00:04:09,780
the support for Intel processor trace

87
00:04:06,420 --> 00:04:11,250
the second one is easy to detect the

88
00:04:09,780 --> 00:04:14,549
feature<font color="#CCCCCC"> of processor trace because</font>

89
00:04:11,250 --> 00:04:17,579
<font color="#CCCCCC">different CPU can implement different</font>

90
00:04:14,549 --> 00:04:19,380
<font color="#E5E5E5">features processor test has been</font>

91
00:04:17,579 --> 00:04:21,269
<font color="#E5E5E5">implemented as been implemented in the</font>

92
00:04:19,380 --> 00:04:25,050
first time<font color="#E5E5E5"> in the first in</font><font color="#CCCCCC"> Broadwell</font>

93
00:04:21,269 --> 00:04:26,820
<font color="#CCCCCC">Akita tours but it was</font><font color="#E5E5E5"> limited now in</font>

94
00:04:25,050 --> 00:04:30,330
<font color="#CCCCCC">skylight there is the full support and</font>

95
00:04:26,820 --> 00:04:35,010
<font color="#CCCCCC">you can trace</font><font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> would like the XT</font>

96
00:04:30,330 --> 00:04:37,859
<font color="#CCCCCC">on CPU</font><font color="#E5E5E5"> either will be related by Intel</font>

97
00:04:35,010 --> 00:04:41,969
in the second quarter<font color="#CCCCCC"> of 2017 its</font>

98
00:04:37,860 --> 00:04:44,160
they are quite done<font color="#CCCCCC"> okay here in this</font>

99
00:04:41,970 --> 00:04:45,990
<font color="#CCCCCC">slide I</font><font color="#E5E5E5"> would like to show the</font><font color="#CCCCCC"> decode</font>

100
00:04:44,160 --> 00:04:47,230
<font color="#E5E5E5">for the testing process or trace as you</font>

101
00:04:45,990 --> 00:04:50,740
can see it's quite easy

102
00:04:47,230 --> 00:04:56,890
and there's nothing a special all your

103
00:04:50,740 --> 00:04:58,990
pair of<font color="#CCCCCC"> cpuid instructions okay let's</font>

104
00:04:56,890 --> 00:05:01,419
speaking about why<font color="#E5E5E5"> it is so interest</font>

105
00:04:58,990 --> 00:05:03,640
<font color="#E5E5E5">it's because</font><font color="#CCCCCC"> it's simply implemented in</font>

106
00:05:01,420 --> 00:05:05,140
<font color="#E5E5E5">theory in hardware one of the basic</font>

107
00:05:03,640 --> 00:05:07,840
<font color="#CCCCCC">things that we can say about this is</font>

108
00:05:05,140 --> 00:05:11,070
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is not detectable by software</font><font color="#CCCCCC"> I</font>

109
00:05:07,840 --> 00:05:13,090
mean<font color="#E5E5E5"> in user mode software and one</font>

110
00:05:11,070 --> 00:05:15,820
important<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> to say that</font><font color="#CCCCCC"> you can</font>

111
00:05:13,090 --> 00:05:21,909
trace<font color="#E5E5E5"> whatever you want ever even</font><font color="#CCCCCC"> SMA</font>

112
00:05:15,820 --> 00:05:23,950
<font color="#CCCCCC">SMI SMM</font><font color="#E5E5E5"> handler and even an hypervisor</font>

113
00:05:21,910 --> 00:05:27,490
code or whatever<font color="#E5E5E5"> the only things that</font>

114
00:05:23,950 --> 00:05:29,860
you<font color="#E5E5E5"> can trace its like the SD exercycle</font>

115
00:05:27,490 --> 00:05:31,810
container bodies it's a good things

116
00:05:29,860 --> 00:05:35,620
because<font color="#E5E5E5"> that's reacts by design</font><font color="#CCCCCC"> issue</font>

117
00:05:31,810 --> 00:05:38,190
<font color="#E5E5E5">the work in I</font><font color="#CCCCCC"> mean oscillate employment</font>

118
00:05:35,620 --> 00:05:43,180
[Music]

119
00:05:38,190 --> 00:05:45,219
<font color="#E5E5E5">okay even here quite fast how it works</font>

120
00:05:43,180 --> 00:05:48,670
<font color="#CCCCCC">the process the race</font><font color="#E5E5E5"> traces works</font><font color="#CCCCCC"> into</font>

121
00:05:45,220 --> 00:05:50,530
entry mode it can trace using three

122
00:05:48,670 --> 00:05:52,810
<font color="#CCCCCC">different kind</font><font color="#E5E5E5"> of filtering the first is</font>

123
00:05:50,530 --> 00:05:54,580
<font color="#E5E5E5">why by current privilege their level I</font>

124
00:05:52,810 --> 00:05:56,620
mean you can differentiate between

125
00:05:54,580 --> 00:05:59,800
<font color="#CCCCCC">camera</font><font color="#E5E5E5"> mode software and user mode</font>

126
00:05:56,620 --> 00:06:02,290
software the second filtering mode is a

127
00:05:59,800 --> 00:06:04,360
by<font color="#CCCCCC"> PML</font><font color="#E5E5E5"> for page table in that way you</font>

128
00:06:02,290 --> 00:06:05,890
<font color="#E5E5E5">can trace only a single process because</font>

129
00:06:04,360 --> 00:06:06,280
you can instruct the processor<font color="#CCCCCC"> trace</font>

130
00:06:05,890 --> 00:06:08,950
<font color="#CCCCCC">trace</font>

131
00:06:06,280 --> 00:06:11,710
only<font color="#E5E5E5"> are</font><font color="#CCCCCC"> specifically</font><font color="#E5E5E5"> ml's physical</font>

132
00:06:08,950 --> 00:06:14,620
address page table in that way you<font color="#E5E5E5"> can</font>

133
00:06:11,710 --> 00:06:16,780
trace only a single<font color="#E5E5E5"> process otherwise</font>

134
00:06:14,620 --> 00:06:18,700
<font color="#E5E5E5">the last filtering mode is by</font>

135
00:06:16,780 --> 00:06:21,789
<font color="#E5E5E5">instruction pointer you can set a start</font>

136
00:06:18,700 --> 00:06:23,710
<font color="#CCCCCC">point and</font><font color="#E5E5E5"> the end point and and say and</font>

137
00:06:21,790 --> 00:06:28,210
<font color="#E5E5E5">ask the processor tries to trace only</font>

138
00:06:23,710 --> 00:06:31,000
that window of code and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is very cool</font>

139
00:06:28,210 --> 00:06:32,830
they also put logging<font color="#E5E5E5"> this it's done</font>

140
00:06:31,000 --> 00:06:35,800
directly memory<font color="#E5E5E5"> in physical memory</font>

141
00:06:32,830 --> 00:06:38,229
<font color="#CCCCCC">that's why we need a driver to manage</font>

142
00:06:35,800 --> 00:06:41,200
that<font color="#CCCCCC"> and the day logging could be</font>

143
00:06:38,230 --> 00:06:42,910
implemented<font color="#CCCCCC"> in</font><font color="#E5E5E5"> two things in</font><font color="#CCCCCC"> Thruway the</font>

144
00:06:41,200 --> 00:06:46,570
first one in single range<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a</font>

145
00:06:42,910 --> 00:06:48,910
<font color="#CCCCCC">circularbuffer and the basis is written</font>

146
00:06:46,570 --> 00:06:52,390
always in the same<font color="#E5E5E5"> place in memory the</font>

147
00:06:48,910 --> 00:06:56,559
second type is<font color="#CCCCCC"> the table of typical</font>

148
00:06:52,390 --> 00:07:00,219
address<font color="#E5E5E5"> also known as tapa</font>

149
00:06:56,559 --> 00:07:02,199
<font color="#E5E5E5">okay even here like quite fast</font><font color="#CCCCCC"> to</font>

150
00:07:00,219 --> 00:07:04,269
<font color="#CCCCCC">implement the single range you</font><font color="#E5E5E5"> have you</font>

151
00:07:02,199 --> 00:07:06,729
<font color="#CCCCCC">should allocate a continuous physical</font>

152
00:07:04,269 --> 00:07:08,679
memory buffer<font color="#E5E5E5"> and then you should set to</font>

153
00:07:06,729 --> 00:07:11,859
proper<font color="#E5E5E5"> model specific register one is</font>

154
00:07:08,679 --> 00:07:14,229
the<font color="#E5E5E5"> air P hi P output wave and the</font>

155
00:07:11,859 --> 00:07:17,409
output mask<font color="#CCCCCC"> and then you have to start</font>

156
00:07:14,229 --> 00:07:22,119
<font color="#E5E5E5">the tracer and setting the trace key n</font>

157
00:07:17,409 --> 00:07:23,919
<font color="#CCCCCC">flag in the controller the register the</font>

158
00:07:22,119 --> 00:07:29,289
buffer is automatically<font color="#CCCCCC"> speeded in a</font>

159
00:07:23,919 --> 00:07:30,909
<font color="#E5E5E5">circular manner by the</font><font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> the table of</font>

160
00:07:29,289 --> 00:07:35,049
physical address<font color="#E5E5E5"> the table of physical</font>

161
00:07:30,909 --> 00:07:38,099
addresses<font color="#E5E5E5"> is is a better implementation</font>

162
00:07:35,049 --> 00:07:40,599
of the output because you can set the

163
00:07:38,099 --> 00:07:43,149
<font color="#E5E5E5">values physical physical memory address</font>

164
00:07:40,599 --> 00:07:45,849
<font color="#CCCCCC">and you can create</font><font color="#E5E5E5"> a like a table in</font>

165
00:07:43,149 --> 00:07:49,629
<font color="#CCCCCC">which you insert</font><font color="#E5E5E5"> the CPU worldwide</font>

166
00:07:45,849 --> 00:07:51,819
exactly memory it's very it's very<font color="#E5E5E5"> smart</font>

167
00:07:49,629 --> 00:07:55,809
because you can even set a<font color="#E5E5E5"> PMI</font><font color="#CCCCCC"> interrupt</font>

168
00:07:51,819 --> 00:07:59,199
<font color="#CCCCCC">that is raised by</font><font color="#E5E5E5"> the CPU if I charge a</font>

169
00:07:55,809 --> 00:08:02,319
much<font color="#CCCCCC"> attempt part</font><font color="#E5E5E5"> of the buffer is still</font>

170
00:07:59,199 --> 00:08:04,119
led by the<font color="#E5E5E5"> DeLaughter</font><font color="#CCCCCC"> and then you can</font>

171
00:08:02,319 --> 00:08:09,399
stop you can resume you can<font color="#E5E5E5"> do whatever</font>

172
00:08:04,119 --> 00:08:13,299
you want<font color="#CCCCCC"> okay different kind of packets</font>

173
00:08:09,399 --> 00:08:14,919
to to<font color="#CCCCCC"> log the software execution</font><font color="#E5E5E5"> process</font>

174
00:08:13,299 --> 00:08:19,479
<font color="#CCCCCC">so</font><font color="#E5E5E5"> stress is</font><font color="#CCCCCC"> a different</font><font color="#E5E5E5"> kind of of</font>

175
00:08:14,919 --> 00:08:21,308
<font color="#CCCCCC">stress pocket</font><font color="#E5E5E5"> there are a lot of timing</font>

176
00:08:19,479 --> 00:08:24,039
<font color="#E5E5E5">pockets that we are not interesting to</font>

177
00:08:21,309 --> 00:08:26,019
<font color="#E5E5E5">the</font><font color="#CCCCCC"> pocket</font><font color="#E5E5E5"> that we are interesting to</font>

178
00:08:24,039 --> 00:08:28,859
<font color="#CCCCCC">our the branch pockets they taken not</font>

179
00:08:26,019 --> 00:08:32,289
taken<font color="#E5E5E5"> the target APN flow update pockets</font>

180
00:08:28,859 --> 00:08:34,240
there are those pocket are the most

181
00:08:32,289 --> 00:08:37,029
interested because<font color="#E5E5E5"> you can with those</font>

182
00:08:34,240 --> 00:08:40,149
you can trace<font color="#CCCCCC"> the execution and</font><font color="#E5E5E5"> soft of</font>

183
00:08:37,029 --> 00:08:43,000
the software and<font color="#CCCCCC"> follow its execution</font>

184
00:08:40,149 --> 00:08:48,670
<font color="#CCCCCC">even</font><font color="#E5E5E5"> maybe checking the source the the</font>

185
00:08:43,000 --> 00:08:52,269
assembly<font color="#E5E5E5"> codes here is a big diagram</font><font color="#CCCCCC"> I</font>

186
00:08:48,670 --> 00:08:53,860
<font color="#E5E5E5">will refer you</font><font color="#CCCCCC"> to the internal if you</font>

187
00:08:52,269 --> 00:08:56,649
would like to understand the

188
00:08:53,860 --> 00:08:59,980
<font color="#E5E5E5">nitty-gritty details of each pockets the</font>

189
00:08:56,649 --> 00:09:03,040
one that we<font color="#CCCCCC"> as I say Saturday one that</font>

190
00:08:59,980 --> 00:09:07,119
we are<font color="#E5E5E5"> interesting to our them</font>

191
00:09:03,040 --> 00:09:12,248
branch pockets<font color="#CCCCCC"> taken note taken target</font>

192
00:09:07,119 --> 00:09:19,629
IP<font color="#E5E5E5"> and</font><font color="#CCCCCC"> rope it okay let's speak about</font>

193
00:09:12,249 --> 00:09:21,489
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Intel PT driver implementation</font><font color="#E5E5E5"> okay</font>

194
00:09:19,629 --> 00:09:24,160
we have<font color="#E5E5E5"> decided to write this driver to</font>

195
00:09:21,489 --> 00:09:26,319
be able<font color="#CCCCCC"> to perform</font><font color="#E5E5E5"> the trace</font><font color="#CCCCCC"> directly</font>

196
00:09:24,160 --> 00:09:28,499
from from<font color="#CCCCCC"> our Windows operating system</font>

197
00:09:26,319 --> 00:09:31,719
at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> time of these of this</font>

198
00:09:28,499 --> 00:09:34,509
presentation<font color="#CCCCCC"> the drive is quite stable</font>

199
00:09:31,720 --> 00:09:36,189
<font color="#E5E5E5">and in this version is 0.5 it support</font>

200
00:09:34,509 --> 00:09:38,889
all the filtering mode combination and

201
00:09:36,189 --> 00:09:41,139
<font color="#E5E5E5">output modes is the some new feature of</font>

202
00:09:38,889 --> 00:09:43,299
<font color="#E5E5E5">these releases that it supports even</font>

203
00:09:41,139 --> 00:09:45,489
<font color="#E5E5E5">multi processors and the support even</font>

204
00:09:43,299 --> 00:09:48,519
<font color="#CCCCCC">camera</font><font color="#E5E5E5"> mode code tracing as I ever told</font>

205
00:09:45,489 --> 00:09:50,999
you<font color="#E5E5E5"> can use the processor tries to trace</font>

206
00:09:48,519 --> 00:09:55,629
even<font color="#E5E5E5"> camera software without any problem</font>

207
00:09:50,999 --> 00:09:58,600
and in the developing of this driver we

208
00:09:55,629 --> 00:10:02,649
have we had<font color="#CCCCCC"> overcome</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of problems</font>

209
00:09:58,600 --> 00:10:05,439
like<font color="#E5E5E5"> one of the most big problems of the</font>

210
00:10:02,649 --> 00:10:07,929
mapping of<font color="#E5E5E5"> the PMI</font><font color="#CCCCCC"> interrupts because</font>

211
00:10:05,439 --> 00:10:10,449
there was not no commentation at all for

212
00:10:07,929 --> 00:10:13,959
how to do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and even our the multi</font>

213
00:10:10,449 --> 00:10:15,969
<font color="#CCCCCC">processor</font><font color="#E5E5E5"> because you have to manage</font><font color="#CCCCCC"> and</font>

214
00:10:13,959 --> 00:10:23,439
you have to enable the<font color="#E5E5E5"> process of</font><font color="#CCCCCC"> trace</font>

215
00:10:15,970 --> 00:10:26,230
<font color="#CCCCCC">to once in each processor ok let's speak</font>

216
00:10:23,439 --> 00:10:28,779
<font color="#E5E5E5">first</font><font color="#CCCCCC"> about the PMI interrupts the PMI</font>

217
00:10:26,230 --> 00:10:31,660
<font color="#CCCCCC">interrupts</font><font color="#E5E5E5"> is as been raised by the</font>

218
00:10:28,779 --> 00:10:35,829
processor trace<font color="#E5E5E5"> when the our buffer is</font>

219
00:10:31,660 --> 00:10:37,868
full and to do that we have<font color="#CCCCCC"> programmed</font>

220
00:10:35,829 --> 00:10:41,169
<font color="#CCCCCC">the</font><font color="#E5E5E5"> table of physical addresses in</font>

221
00:10:37,869 --> 00:10:43,559
inserting<font color="#CCCCCC"> these PMI</font><font color="#E5E5E5"> interrupt</font><font color="#CCCCCC"> requests</font>

222
00:10:41,169 --> 00:10:47,619
<font color="#E5E5E5">at the end of the octave of</font><font color="#CCCCCC"> the buffer</font>

223
00:10:43,559 --> 00:10:49,659
how we can be able<font color="#CCCCCC"> to manage</font><font color="#E5E5E5"> that when</font>

224
00:10:47,619 --> 00:10:52,299
the PMI<font color="#CCCCCC"> interrupts</font><font color="#E5E5E5"> race we suspend the</font>

225
00:10:49,659 --> 00:10:55,839
target process<font color="#CCCCCC"> done</font><font color="#E5E5E5"> the physical the</font>

226
00:10:52,299 --> 00:10:57,699
physical memory<font color="#E5E5E5"> and then resume we had</font>

227
00:10:55,839 --> 00:11:00,189
some problem implemented this because as

228
00:10:57,699 --> 00:11:03,728
you as you probably know they all the

229
00:11:00,189 --> 00:11:07,269
<font color="#E5E5E5">interrupts inside the x86 architecture</font>

230
00:11:03,729 --> 00:11:09,249
and<font color="#CCCCCC"> run out of a high higher</font><font color="#E5E5E5"> quell and</font>

231
00:11:07,269 --> 00:11:11,350
this is a quite a problem<font color="#CCCCCC"> because</font><font color="#E5E5E5"> of</font>

232
00:11:09,249 --> 00:11:14,210
<font color="#E5E5E5">from that</font><font color="#CCCCCC"> coding you can</font><font color="#E5E5E5"> you can do</font>

233
00:11:11,350 --> 00:11:18,870
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> anything</font>

234
00:11:14,210 --> 00:11:19,860
and even the user mode buffer very fast

235
00:11:18,870 --> 00:11:22,890
<font color="#E5E5E5">even here</font>

236
00:11:19,860 --> 00:11:25,860
we have<font color="#CCCCCC"> never found</font><font color="#E5E5E5"> a way</font><font color="#CCCCCC"> to directly</font>

237
00:11:22,890 --> 00:11:29,040
map the physical the<font color="#E5E5E5"> physical memory in</font>

238
00:11:25,860 --> 00:11:32,940
a user mode buffer and we<font color="#CCCCCC"> do this in a</font>

239
00:11:29,040 --> 00:11:34,740
smarter manner<font color="#CCCCCC"> I think it's not we</font>

240
00:11:32,940 --> 00:11:39,120
respect the security monitor boundaries

241
00:11:34,740 --> 00:11:41,670
<font color="#E5E5E5">and we map it only the logic buffer and</font>

242
00:11:39,120 --> 00:11:43,320
that's all in user mode and not in

243
00:11:41,670 --> 00:11:46,319
<font color="#E5E5E5">camera</font><font color="#CCCCCC"> mode is important because if you</font>

244
00:11:43,320 --> 00:11:49,410
use a<font color="#CCCCCC"> very big</font><font color="#E5E5E5"> bus you have the problem</font>

245
00:11:46,320 --> 00:11:51,150
that<font color="#E5E5E5"> for the the virtual address space</font>

246
00:11:49,410 --> 00:11:56,420
<font color="#E5E5E5">that now it's not a problem</font><font color="#CCCCCC"> League</font>

247
00:11:51,150 --> 00:11:56,420
succeed in 64-bit systems what could be

248
00:11:57,200 --> 00:12:04,590
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> here is where the things get</font>

249
00:12:01,470 --> 00:12:06,270
interesting because<font color="#E5E5E5"> in version 0.5 we</font>

250
00:12:04,590 --> 00:12:08,460
have been<font color="#E5E5E5"> able to support the</font>

251
00:12:06,270 --> 00:12:13,530
<font color="#CCCCCC">multiprocessor and multi thread the</font>

252
00:12:08,460 --> 00:12:16,170
multi-threaded application each CPU<font color="#E5E5E5"> as</font>

253
00:12:13,530 --> 00:12:19,980
we have implemented in<font color="#E5E5E5"> in that way in</font>

254
00:12:16,170 --> 00:12:23,069
which the each CPU as its<font color="#E5E5E5"> buffer</font>

255
00:12:19,980 --> 00:12:26,010
associated with it and it's a<font color="#E5E5E5"> map in</font>

256
00:12:23,070 --> 00:12:28,380
user mode and we<font color="#E5E5E5"> see nearly</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> PM</font><font color="#CCCCCC"> high</font>

257
00:12:26,010 --> 00:12:30,180
<font color="#CCCCCC">interrupt</font><font color="#E5E5E5"> where the</font><font color="#CCCCCC"> buffer is will be</font>

258
00:12:28,380 --> 00:12:32,850
seen at the but here there<font color="#CCCCCC"> is a problem</font>

259
00:12:30,180 --> 00:12:36,780
<font color="#E5E5E5">because if we fire at the</font><font color="#CCCCCC"> NPM I</font>

260
00:12:32,850 --> 00:12:39,270
interrupt and in the same way the user

261
00:12:36,780 --> 00:12:43,740
mode application is not fast and is not

262
00:12:39,270 --> 00:12:46,710
able<font color="#CCCCCC"> to detect which view is at the</font>

263
00:12:43,740 --> 00:12:49,800
buffer<font color="#E5E5E5"> fula in a real-time way</font><font color="#CCCCCC"> nomnom</font>

264
00:12:46,710 --> 00:12:51,930
fast enough way then we have switched

265
00:12:49,800 --> 00:12:55,050
the implementation implementing the user

266
00:12:51,930 --> 00:12:59,099
mode callbacks<font color="#CCCCCC"> I mean our user</font>

267
00:12:55,050 --> 00:13:02,130
application as a spoon<font color="#E5E5E5"> one thread for</font><font color="#CCCCCC"> it</font>

268
00:12:59,100 --> 00:13:04,920
for us for each CPU<font color="#E5E5E5"> and each trader is</font>

269
00:13:02,130 --> 00:13:08,070
therapy mi<font color="#CCCCCC"> a PMI callback function in</font>

270
00:13:04,920 --> 00:13:11,160
that<font color="#CCCCCC"> way when a CPU</font><font color="#E5E5E5"> as the basket is</font>

271
00:13:08,070 --> 00:13:14,280
full called the exactly right<font color="#CCCCCC"> the user</font>

272
00:13:11,160 --> 00:13:15,990
mode<font color="#CCCCCC"> call</font><font color="#E5E5E5"> backup area we have tested</font>

273
00:13:14,280 --> 00:13:20,310
<font color="#CCCCCC">that even in</font><font color="#E5E5E5"> multi real big</font>

274
00:13:15,990 --> 00:13:24,590
<font color="#E5E5E5">multiprocessor environment if we</font><font color="#CCCCCC"> don't</font>

275
00:13:20,310 --> 00:13:26,300
<font color="#CCCCCC">decode in</font><font color="#E5E5E5"> real time the binary log</font><font color="#CCCCCC"> to</font>

276
00:13:24,590 --> 00:13:28,520
transform it in a<font color="#E5E5E5"> human readable text</font>

277
00:13:26,300 --> 00:13:32,719
<font color="#E5E5E5">the</font><font color="#CCCCCC"> performance are really good</font><font color="#E5E5E5"> I mean</font>

278
00:13:28,520 --> 00:13:35,090
<font color="#E5E5E5">we can see the some slowdowns or</font>

279
00:13:32,720 --> 00:13:37,810
something in the trace of the

280
00:13:35,090 --> 00:13:37,810
application

281
00:13:37,940 --> 00:13:42,650
speaking in summary we have<font color="#E5E5E5"> overcome</font>

282
00:13:40,520 --> 00:13:45,170
this problem but the only<font color="#CCCCCC"> problem that</font>

283
00:13:42,650 --> 00:13:46,850
we add is<font color="#CCCCCC"> managed</font><font color="#E5E5E5"> in managing</font><font color="#CCCCCC"> the</font>

284
00:13:45,170 --> 00:13:49,550
<font color="#E5E5E5">multi-threaded application because as</font>

285
00:13:46,850 --> 00:13:51,770
you already know for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> CPU point of view</font>

286
00:13:49,550 --> 00:13:53,449
<font color="#CCCCCC">a trait doesn't exist I mean the CPU</font><font color="#E5E5E5"> is</font>

287
00:13:51,770 --> 00:13:56,660
a<font color="#E5E5E5"> execute some codes</font>

288
00:13:53,450 --> 00:13:58,190
that's not distributors and know if it's

289
00:13:56,660 --> 00:14:05,209
a<font color="#CCCCCC"> one it belongs to</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> thread or</font>

290
00:13:58,190 --> 00:14:07,760
another one<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> if you try</font><font color="#E5E5E5"> to launch</font>

291
00:14:05,210 --> 00:14:10,280
<font color="#CCCCCC">calc the standard calculator in Windows</font>

292
00:14:07,760 --> 00:14:12,860
10 you<font color="#E5E5E5"> will find that there is it's not</font>

293
00:14:10,280 --> 00:14:14,810
<font color="#E5E5E5">a standard process it's a new up</font>

294
00:14:12,860 --> 00:14:18,530
container process that spawn another

295
00:14:14,810 --> 00:14:22,430
<font color="#E5E5E5">process this is an example of the</font>

296
00:14:18,530 --> 00:14:24,800
increasing complex of the even<font color="#E5E5E5"> the</font>

297
00:14:22,430 --> 00:14:27,620
<font color="#E5E5E5">standard process</font><font color="#CCCCCC"> that's spawn</font><font color="#E5E5E5"> another</font>

298
00:14:24,800 --> 00:14:29,959
process or multi-threaded<font color="#E5E5E5"> and here it</font>

299
00:14:27,620 --> 00:14:33,350
could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> it could be a problem</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> our</font>

300
00:14:29,960 --> 00:14:37,100
<font color="#E5E5E5">tracing purposes because because of that</font>

301
00:14:33,350 --> 00:14:39,350
and food to overcome<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can use we</font>

302
00:14:37,100 --> 00:14:42,470
<font color="#E5E5E5">can identify the paging information</font>

303
00:14:39,350 --> 00:14:45,320
packets of<font color="#E5E5E5"> each process and use the</font>

304
00:14:42,470 --> 00:14:48,860
<font color="#E5E5E5">process of tracing only instructing</font><font color="#CCCCCC"> it</font>

305
00:14:45,320 --> 00:14:50,600
to filtering<font color="#E5E5E5"> by</font><font color="#CCCCCC"> CR tree</font><font color="#E5E5E5"> but we have a</font>

306
00:14:48,860 --> 00:14:52,460
big drawback because<font color="#E5E5E5"> the size of</font><font color="#CCCCCC"> the</font>

307
00:14:50,600 --> 00:14:55,490
<font color="#E5E5E5">logger is huge I mean in that way</font><font color="#CCCCCC"> you</font>

308
00:14:52,460 --> 00:14:57,590
<font color="#E5E5E5">can you trace all the</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> of the in</font>

309
00:14:55,490 --> 00:15:00,400
the user that runs in user mode<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font>

310
00:14:57,590 --> 00:15:04,610
loader code and whatever<font color="#E5E5E5"> and this is a</font>

311
00:15:00,400 --> 00:15:06,530
is a problem the second way to<font color="#E5E5E5"> overcome</font>

312
00:15:04,610 --> 00:15:08,510
<font color="#CCCCCC">this is could be to register a process</font>

313
00:15:06,530 --> 00:15:10,520
<font color="#CCCCCC">thread</font><font color="#E5E5E5"> creation</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> back in kernel</font>

314
00:15:08,510 --> 00:15:13,760
mode<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> a trace</font><font color="#E5E5E5"> only one processor</font>

315
00:15:10,520 --> 00:15:16,280
time this<font color="#E5E5E5"> solution is simple and it</font>

316
00:15:13,760 --> 00:15:18,500
<font color="#CCCCCC">works</font><font color="#E5E5E5"> but sometimes is not acceptable</font>

317
00:15:16,280 --> 00:15:19,910
because for example<font color="#CCCCCC"> some malware or some</font>

318
00:15:18,500 --> 00:15:23,060
complex<font color="#E5E5E5"> components like for example</font>

319
00:15:19,910 --> 00:15:26,990
<font color="#CCCCCC">Microsoft</font><font color="#E5E5E5"> Word</font><font color="#CCCCCC"> require</font><font color="#E5E5E5"> the interaction</font>

320
00:15:23,060 --> 00:15:32,540
from<font color="#E5E5E5"> the from different process and this</font>

321
00:15:26,990 --> 00:15:36,870
<font color="#E5E5E5">is a problem but we are researching a</font>

322
00:15:32,540 --> 00:15:40,089
<font color="#E5E5E5">new way to do this because the</font>

323
00:15:36,870 --> 00:15:43,560
originally we would like<font color="#CCCCCC"> to enable</font>

324
00:15:40,089 --> 00:15:46,690
processor<font color="#CCCCCC"> trace by each trade by in</font>

325
00:15:43,560 --> 00:15:49,900
using the<font color="#CCCCCC"> earth red</font><font color="#E5E5E5"> construction the</font>

326
00:15:46,690 --> 00:15:52,540
trade is known on Lena<font color="#E5E5E5"> in</font><font color="#CCCCCC"> this software</font>

327
00:15:49,900 --> 00:15:56,350
<font color="#E5E5E5">only</font><font color="#CCCCCC"> Windows kernel</font><font color="#E5E5E5"> know how to manage</font>

328
00:15:52,540 --> 00:15:59,680
the threads<font color="#E5E5E5"> and our original idea</font><font color="#CCCCCC"> were</font>

329
00:15:56,350 --> 00:16:03,130
was to intercept the<font color="#E5E5E5"> thread context</font>

330
00:15:59,680 --> 00:16:05,500
switch our code and save manually<font color="#E5E5E5"> all</font>

331
00:16:03,130 --> 00:16:08,950
the demo<font color="#E5E5E5"> specific register used in</font>

332
00:16:05,500 --> 00:16:11,230
processor trace<font color="#CCCCCC"> to - Ana at one area and</font>

333
00:16:08,950 --> 00:16:16,529
then<font color="#E5E5E5"> restore back when the context which</font>

334
00:16:11,230 --> 00:16:20,200
are<font color="#E5E5E5"> restored the</font><font color="#CCCCCC"> original</font><font color="#E5E5E5"> thread and</font>

335
00:16:16,529 --> 00:16:22,330
when I was<font color="#E5E5E5"> doing this I was manually</font>

336
00:16:20,200 --> 00:16:27,070
saving all the<font color="#CCCCCC"> model specific</font><font color="#E5E5E5"> register</font>

337
00:16:22,330 --> 00:16:29,740
<font color="#E5E5E5">on an external Buster but someone has</font>

338
00:16:27,070 --> 00:16:32,200
been<font color="#E5E5E5"> point to me an existence of another</font>

339
00:16:29,740 --> 00:16:35,050
<font color="#CCCCCC">very cool instruction that is not is not</font>

340
00:16:32,200 --> 00:16:37,300
known by the research community<font color="#E5E5E5"> but is</font>

341
00:16:35,050 --> 00:16:40,709
very<font color="#E5E5E5"> useful do you remember the old push</font>

342
00:16:37,300 --> 00:16:43,779
<font color="#E5E5E5">ad instruction in x86 architecture</font>

343
00:16:40,709 --> 00:16:46,660
basically what it<font color="#CCCCCC"> does is that it pushes</font>

344
00:16:43,779 --> 00:16:49,390
<font color="#E5E5E5">all the general purpose register in user</font>

345
00:16:46,660 --> 00:16:54,430
in a user mode stock<font color="#CCCCCC"> directly only</font><font color="#E5E5E5"> using</font>

346
00:16:49,390 --> 00:16:56,500
one instructions now the in 64-bit

347
00:16:54,430 --> 00:17:00,310
<font color="#E5E5E5">environment something like that doesn't</font>

348
00:16:56,500 --> 00:17:03,670
<font color="#CCCCCC">exist anymore but Intelli</font>

349
00:17:00,310 --> 00:17:08,409
has made this new cool<font color="#E5E5E5"> instruction</font>

350
00:17:03,670 --> 00:17:12,329
college except the<font color="#CCCCCC"> XA is a new op code</font>

351
00:17:08,410 --> 00:17:17,429
in the MV 64 instruction set that

352
00:17:12,329 --> 00:17:21,339
<font color="#CCCCCC">basically save as' saves all the some</font>

353
00:17:17,429 --> 00:17:23,470
extended register some register that

354
00:17:21,339 --> 00:17:26,290
<font color="#CCCCCC">belongs to the</font><font color="#E5E5E5"> Intel Architecture</font><font color="#CCCCCC"> arcade</font>

355
00:17:23,470 --> 00:17:28,870
or on a specific<font color="#E5E5E5"> area I mean I have</font>

356
00:17:26,290 --> 00:17:35,440
found that the<font color="#CCCCCC"> xav instruction can save</font>

357
00:17:28,870 --> 00:17:37,959
MMX sse<font color="#CCCCCC"> ABX AVX registers and is i</font>

358
00:17:35,440 --> 00:17:40,720
<font color="#E5E5E5">written I have written here that would</font>

359
00:17:37,960 --> 00:17:44,620
his avx-512<font color="#E5E5E5"> because I didn't know the</font>

360
00:17:40,720 --> 00:17:46,570
<font color="#E5E5E5">existence the cool feature</font><font color="#CCCCCC"> about the</font>

361
00:17:44,620 --> 00:17:48,290
cool feature about<font color="#CCCCCC"> D click Save is that</font>

362
00:17:46,570 --> 00:17:50,330
you can save<font color="#CCCCCC"> even the</font>

363
00:17:48,290 --> 00:17:52,159
register that belongs to Intel processor

364
00:17:50,330 --> 00:17:54,800
trace and the new Intel<font color="#E5E5E5"> memory</font>

365
00:17:52,160 --> 00:17:56,780
protection extension<font color="#CCCCCC"> and it is very cool</font>

366
00:17:54,800 --> 00:18:00,230
<font color="#E5E5E5">because using only one instruction we</font>

367
00:17:56,780 --> 00:18:01,910
can save all<font color="#CCCCCC"> the registers that belongs</font>

368
00:18:00,230 --> 00:18:04,670
to the processor<font color="#CCCCCC"> place directly</font><font color="#E5E5E5"> in a</font>

369
00:18:01,910 --> 00:18:08,210
very very<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> manner without any</font>

370
00:18:04,670 --> 00:18:10,370
problem if you open<font color="#CCCCCC"> the Intel manual you</font>

371
00:18:08,210 --> 00:18:12,320
will<font color="#E5E5E5"> find that you use to do use this</font>

372
00:18:10,370 --> 00:18:15,320
<font color="#E5E5E5">destruction it's a bit complex because</font>

373
00:18:12,320 --> 00:18:17,570
there is an<font color="#E5E5E5"> extraction that is belong</font>

374
00:18:15,320 --> 00:18:19,399
solely<font color="#E5E5E5"> to user mode and to set to what</font>

375
00:18:17,570 --> 00:18:21,889
to save<font color="#CCCCCC"> you have to set an extended</font>

376
00:18:19,400 --> 00:18:26,020
<font color="#E5E5E5">control register in user mode using a</font>

377
00:18:21,890 --> 00:18:29,090
new instruction that's called exit<font color="#CCCCCC"> V</font><font color="#E5E5E5"> V</font>

378
00:18:26,020 --> 00:18:32,060
but to be able<font color="#E5E5E5"> to save the model</font>

379
00:18:29,090 --> 00:18:34,070
specific register directly you have<font color="#E5E5E5"> to</font>

380
00:18:32,060 --> 00:18:38,240
<font color="#CCCCCC">use another instruction you have</font><font color="#E5E5E5"> to use</font>

381
00:18:34,070 --> 00:18:44,000
the<font color="#E5E5E5"> Excel s that issue issue it means</font>

382
00:18:38,240 --> 00:18:50,270
<font color="#E5E5E5">it's a supervisor and it's good to</font><font color="#CCCCCC"> use</font>

383
00:18:44,000 --> 00:18:53,510
it in<font color="#CCCCCC"> kernel mode our driver support</font>

384
00:18:50,270 --> 00:18:55,190
completely<font color="#E5E5E5"> safe</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it was very funny</font>

385
00:18:53,510 --> 00:18:57,230
<font color="#E5E5E5">because when I</font><font color="#CCCCCC"> have inter</font><font color="#E5E5E5"> implemented</font>

386
00:18:55,190 --> 00:18:59,360
<font color="#E5E5E5">this I have found that the new Windows</font>

387
00:18:57,230 --> 00:19:01,910
10<font color="#E5E5E5"> context switches are already</font>

388
00:18:59,360 --> 00:19:04,699
implement the support of<font color="#E5E5E5"> disabled but</font>

389
00:19:01,910 --> 00:19:08,030
only for user mode our original

390
00:19:04,700 --> 00:19:10,820
<font color="#CCCCCC">intention was</font><font color="#E5E5E5"> to find a way to intercept</font>

391
00:19:08,030 --> 00:19:12,530
or<font color="#E5E5E5"> divest the keys web context</font><font color="#CCCCCC"> routines</font>

392
00:19:10,820 --> 00:19:14,570
<font color="#E5E5E5">that is the kernel</font><font color="#CCCCCC"> mode routine that</font>

393
00:19:12,530 --> 00:19:16,190
Windows uses<font color="#E5E5E5"> to perform the</font><font color="#CCCCCC"> country</font>

394
00:19:14,570 --> 00:19:19,429
<font color="#CCCCCC">switcher from one project to another</font>

395
00:19:16,190 --> 00:19:21,650
thread<font color="#E5E5E5"> if we are able</font><font color="#CCCCCC"> to intercept</font><font color="#E5E5E5"> this</font>

396
00:19:19,430 --> 00:19:23,270
we can save all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> model specific</font>

397
00:19:21,650 --> 00:19:25,490
register belongs to<font color="#E5E5E5"> processor trace</font>

398
00:19:23,270 --> 00:19:27,470
directly<font color="#CCCCCC"> now in an area and</font><font color="#E5E5E5"> then restore</font>

399
00:19:25,490 --> 00:19:31,100
later<font color="#E5E5E5"> in that</font><font color="#CCCCCC"> way we can implement the</font>

400
00:19:27,470 --> 00:19:35,030
tracing by thread<font color="#E5E5E5"> that is a completely</font>

401
00:19:31,100 --> 00:19:37,760
software<font color="#E5E5E5"> in a company lives in a</font>

402
00:19:35,030 --> 00:19:40,700
completely<font color="#E5E5E5"> software point of view but we</font>

403
00:19:37,760 --> 00:19:44,060
<font color="#E5E5E5">found some problem because as you</font>

404
00:19:40,700 --> 00:19:45,980
probably<font color="#E5E5E5"> know</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can't touch in any</font>

405
00:19:44,060 --> 00:19:47,770
<font color="#E5E5E5">camera mode in an office or</font><font color="#CCCCCC"> in any</font>

406
00:19:45,980 --> 00:19:50,990
kernel<font color="#E5E5E5"> mode function</font><font color="#CCCCCC"> in an official way</font>

407
00:19:47,770 --> 00:19:53,870
<font color="#E5E5E5">using for</font><font color="#CCCCCC"> example an oak</font><font color="#E5E5E5"> I don't know</font>

408
00:19:50,990 --> 00:19:56,300
<font color="#CCCCCC">the occurred diversion or whatever</font>

409
00:19:53,870 --> 00:19:58,530
because<font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> particle will blue</font>

410
00:19:56,300 --> 00:20:02,520
screen of<font color="#CCCCCC"> that your system</font>

411
00:19:58,530 --> 00:20:05,100
and we found<font color="#E5E5E5"> that this way</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not</font>

412
00:20:02,520 --> 00:20:07,110
<font color="#CCCCCC">sensible</font><font color="#E5E5E5"> in a public system I mean we</font>

413
00:20:05,100 --> 00:20:09,060
can<font color="#E5E5E5"> use our debug system in a debug</font>

414
00:20:07,110 --> 00:20:11,490
environment you can do that to em<font color="#E5E5E5"> Parker</font>

415
00:20:09,060 --> 00:20:14,580
doesn't run and it's not<font color="#CCCCCC"> a problem</font><font color="#E5E5E5"> but</font>

416
00:20:11,490 --> 00:20:17,820
it's<font color="#CCCCCC"> not a viable</font><font color="#E5E5E5"> way in a production</font>

417
00:20:14,580 --> 00:20:22,740
system<font color="#E5E5E5"> the second solution that we found</font>

418
00:20:17,820 --> 00:20:25,200
<font color="#CCCCCC">it's the usage</font><font color="#E5E5E5"> or the usage of etw if</font>

419
00:20:22,740 --> 00:20:27,810
you check the documentation<font color="#E5E5E5"> about</font><font color="#CCCCCC"> etw</font>

420
00:20:25,200 --> 00:20:31,530
<font color="#CCCCCC">there is a way to intercept this the</font>

421
00:20:27,810 --> 00:20:33,659
context<font color="#CCCCCC"> switch our</font><font color="#E5E5E5"> body it's we are we</font>

422
00:20:31,530 --> 00:20:38,160
<font color="#CCCCCC">are still</font><font color="#E5E5E5"> doing some research</font><font color="#CCCCCC"> because</font>

423
00:20:33,660 --> 00:20:41,670
the<font color="#CCCCCC"> API are very complex</font><font color="#E5E5E5"> and we are</font>

424
00:20:38,160 --> 00:20:44,340
trying<font color="#E5E5E5"> to guess if we are</font><font color="#CCCCCC"> able to use in</font>

425
00:20:41,670 --> 00:20:52,860
a legal way<font color="#E5E5E5"> etw to implemented a today</font>

426
00:20:44,340 --> 00:20:54,870
that way the deposit rate<font color="#E5E5E5"> by trade</font><font color="#CCCCCC"> okay</font>

427
00:20:52,860 --> 00:21:00,600
another<font color="#E5E5E5"> cool feature of the the new</font>

428
00:20:54,870 --> 00:21:04,379
releases<font color="#CCCCCC"> is that we the</font><font color="#E5E5E5"> drivers will now</font>

429
00:21:00,600 --> 00:21:06,929
fully support the camera mode<font color="#E5E5E5"> tracing we</font>

430
00:21:04,380 --> 00:21:10,140
have implemented<font color="#E5E5E5"> the 11 new</font><font color="#CCCCCC"> Kevin</font><font color="#E5E5E5"> LED</font>

431
00:21:06,930 --> 00:21:14,670
<font color="#E5E5E5">eyes that you can attach to your driver</font>

432
00:21:10,140 --> 00:21:17,340
<font color="#E5E5E5">and you you can use it manually</font><font color="#CCCCCC"> to</font>

433
00:21:14,670 --> 00:21:20,550
decide what to trace<font color="#CCCCCC"> to decide how to</font>

434
00:21:17,340 --> 00:21:24,120
trace and to do whatever from a<font color="#CCCCCC"> cabinet</font>

435
00:21:20,550 --> 00:21:26,190
driver but we were not<font color="#E5E5E5"> happy</font><font color="#CCCCCC"> with this</font>

436
00:21:24,120 --> 00:21:28,139
because<font color="#CCCCCC"> we would like even to implement</font>

437
00:21:26,190 --> 00:21:31,530
the<font color="#CCCCCC"> DES tracing from a user mode</font>

438
00:21:28,140 --> 00:21:33,120
application<font color="#E5E5E5"> then we have we have created</font>

439
00:21:31,530 --> 00:21:35,220
some high OCT else that you can

440
00:21:33,120 --> 00:21:40,560
<font color="#E5E5E5">communicate with with my drive with our</font>

441
00:21:35,220 --> 00:21:44,970
driver and it's<font color="#E5E5E5"> able to do</font><font color="#CCCCCC"> Canon tracing</font>

442
00:21:40,560 --> 00:21:47,629
directly in from user model and to do

443
00:21:44,970 --> 00:21:52,020
<font color="#E5E5E5">this we have overcame a</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of security</font>

444
00:21:47,630 --> 00:21:55,290
problems<font color="#E5E5E5"> but now you can do that from</font>

445
00:21:52,020 --> 00:22:01,010
our user mode application you can<font color="#E5E5E5"> even</font>

446
00:21:55,290 --> 00:22:01,010
trace the<font color="#E5E5E5"> kernel code</font>

447
00:22:01,530 --> 00:22:07,560
I say I<font color="#CCCCCC"> wrote here that in this way we</font>

448
00:22:05,130 --> 00:22:09,600
we are able<font color="#E5E5E5"> to for example</font><font color="#CCCCCC"> trace the</font>

449
00:22:07,560 --> 00:22:11,700
loading or unloading of a<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> model</font>

450
00:22:09,600 --> 00:22:13,919
or even<font color="#CCCCCC"> if you maybe you are studying</font>

451
00:22:11,700 --> 00:22:16,440
some<font color="#CCCCCC"> hydro CTL in a</font><font color="#E5E5E5"> rootkit or whatever</font>

452
00:22:13,920 --> 00:22:18,960
<font color="#CCCCCC">you can even trace</font><font color="#E5E5E5"> only the ioctl code</font>

453
00:22:16,440 --> 00:22:22,850
because as you know the IOC<font color="#CCCCCC"> T CTL</font>

454
00:22:18,960 --> 00:22:24,840
<font color="#CCCCCC">internal</font><font color="#E5E5E5"> environment</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> processes a</font>

455
00:22:22,850 --> 00:22:31,409
synchronous<font color="#E5E5E5"> a synchronously</font>

456
00:22:24,840 --> 00:22:35,030
<font color="#E5E5E5">when a user mode application asks ok</font>

457
00:22:31,410 --> 00:22:36,720
<font color="#E5E5E5">some quick words about how to use the</font>

458
00:22:35,030 --> 00:22:38,910
<font color="#CCCCCC">the driver</font>

459
00:22:36,720 --> 00:22:41,640
the as you can see the the code is<font color="#E5E5E5"> quite</font>

460
00:22:38,910 --> 00:22:47,100
simple<font color="#E5E5E5"> first of all you have</font><font color="#CCCCCC"> to grab a</font>

461
00:22:41,640 --> 00:22:48,990
<font color="#E5E5E5">handle of the of our device it's quite</font>

462
00:22:47,100 --> 00:22:52,169
easily<font color="#E5E5E5"> the device name is</font><font color="#CCCCCC"> naming the</font>

463
00:22:48,990 --> 00:22:55,590
windows<font color="#E5E5E5"> Intel PT dev after that you have</font>

464
00:22:52,170 --> 00:22:58,830
<font color="#CCCCCC">to</font><font color="#E5E5E5"> fill and a data structure name at the</font>

465
00:22:55,590 --> 00:23:03,120
PTU<font color="#E5E5E5"> Zurich that is in</font><font color="#CCCCCC"> ISA request and</font>

466
00:22:58,830 --> 00:23:07,830
then you have to ask the<font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> manager</font><font color="#CCCCCC"> to</font>

467
00:23:03,120 --> 00:23:14,250
send the ioctl to our device specify the

468
00:23:07,830 --> 00:23:17,790
user request<font color="#CCCCCC"> after all the after this</font>

469
00:23:14,250 --> 00:23:19,650
<font color="#CCCCCC">did the trace</font><font color="#E5E5E5"> stamps you can decide the</font>

470
00:23:17,790 --> 00:23:22,080
where to stop the trains using<font color="#E5E5E5"> another</font>

471
00:23:19,650 --> 00:23:24,990
ioctl<font color="#E5E5E5"> this is very important because if</font>

472
00:23:22,080 --> 00:23:27,000
you close the application in without

473
00:23:24,990 --> 00:23:30,180
<font color="#E5E5E5">doing that</font><font color="#CCCCCC"> it means</font><font color="#E5E5E5"> that your processor</font>

474
00:23:27,000 --> 00:23:32,010
<font color="#CCCCCC">is still a tracing</font><font color="#E5E5E5"> of something and this</font>

475
00:23:30,180 --> 00:23:35,880
could<font color="#CCCCCC"> lead a problem if you try to</font>

476
00:23:32,010 --> 00:23:39,180
unload our driver because the processor

477
00:23:35,880 --> 00:23:41,310
is<font color="#CCCCCC"> not cleared</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> the driver is</font><font color="#E5E5E5"> able to</font>

478
00:23:39,180 --> 00:23:45,000
detect this<font color="#CCCCCC"> and to overcome</font><font color="#E5E5E5"> this but</font>

479
00:23:41,310 --> 00:23:49,770
like it's a good good practice to do

480
00:23:45,000 --> 00:23:52,590
that for multiprocessor code you can

481
00:23:49,770 --> 00:23:54,540
spawn a<font color="#E5E5E5"> user mode thread directly</font>

482
00:23:52,590 --> 00:23:58,560
<font color="#CCCCCC">without any problem and then from the</font>

483
00:23:54,540 --> 00:24:03,500
user model<font color="#E5E5E5"> ready you have to</font><font color="#CCCCCC"> omit to</font>

484
00:23:58,560 --> 00:24:06,350
call the i/o manager to send the

485
00:24:03,500 --> 00:24:10,920
<font color="#E5E5E5">register PMI routine</font><font color="#CCCCCC"> hi-oh</font><font color="#E5E5E5"> CTL to our</font>

486
00:24:06,350 --> 00:24:13,409
device that's all then you wait you wait

487
00:24:10,920 --> 00:24:14,600
in<font color="#E5E5E5"> an infinity loop infinite</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> an</font>

488
00:24:13,410 --> 00:24:18,559
infinite loop

489
00:24:14,600 --> 00:24:21,379
and the early things<font color="#E5E5E5"> to</font><font color="#CCCCCC"> take care is</font>

490
00:24:18,559 --> 00:24:24,080
that there is a parameter<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> sleep</font>

491
00:24:21,380 --> 00:24:26,260
hex<font color="#E5E5E5"> function that is named a</font><font color="#CCCCCC"> Haller</font>

492
00:24:24,080 --> 00:24:30,649
table or<font color="#CCCCCC"> not you have to</font><font color="#E5E5E5"> insert through</font>

493
00:24:26,260 --> 00:24:34,340
that way<font color="#E5E5E5"> every time</font><font color="#CCCCCC"> the the CPU buster</font>

494
00:24:30,650 --> 00:24:39,169
gets<font color="#E5E5E5"> fitted the callback as will be</font>

495
00:24:34,340 --> 00:24:42,168
coded<font color="#E5E5E5"> without any problem</font><font color="#CCCCCC"> ok now it's</font>

496
00:24:39,169 --> 00:24:46,100
time<font color="#CCCCCC"> for a demo I don't know how much of</font>

497
00:24:42,169 --> 00:24:52,990
<font color="#E5E5E5">us we have a very we have to be very</font>

498
00:24:46,100 --> 00:25:03,350
<font color="#E5E5E5">fast</font><font color="#CCCCCC"> ok I have prepared a demo for</font><font color="#E5E5E5"> you</font>

499
00:24:52,990 --> 00:25:05,020
<font color="#E5E5E5">ok you can see ok as you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> there</font>

500
00:25:03,350 --> 00:25:07,399
is the code<font color="#CCCCCC"> of a very simple application</font>

501
00:25:05,020 --> 00:25:09,039
it has<font color="#CCCCCC"> gone leave us some question to</font>

502
00:25:07,400 --> 00:25:24,190
<font color="#E5E5E5">the user</font>

503
00:25:09,039 --> 00:25:30,200
let's try to<font color="#E5E5E5"> run it and no current</font><font color="#CCCCCC"> with</font>

504
00:25:24,190 --> 00:25:34,280
target process<font color="#E5E5E5"> is is our simple</font>

505
00:25:30,200 --> 00:25:37,090
application<font color="#CCCCCC"> Andreea</font><font color="#E5E5E5"> you can see here</font><font color="#CCCCCC"> oh</font>

506
00:25:34,280 --> 00:25:37,090
yeah right

507
00:25:40,840 --> 00:25:44,860
<font color="#CCCCCC">ok just</font><font color="#E5E5E5"> a moment</font>

508
00:25:49,190 --> 00:25:55,999
how many CPU<font color="#E5E5E5"> at at the beginning</font><font color="#CCCCCC"> let's</font>

509
00:25:53,029 --> 00:25:59,139
do one only<font color="#E5E5E5"> one CPU</font><font color="#CCCCCC"> he's asking you to</font>

510
00:25:55,999 --> 00:26:02,359
increase<font color="#E5E5E5"> the font</font><font color="#CCCCCC"> size okay</font>

511
00:25:59,139 --> 00:26:03,168
and you can probably just mirror it some

512
00:26:02,359 --> 00:26:06,789
<font color="#CCCCCC">sweet switch</font>

513
00:26:03,169 --> 00:26:06,789
yeah it's<font color="#CCCCCC"> saying that it's better but</font>

514
00:26:09,640 --> 00:26:13,990
so while he's<font color="#E5E5E5"> setting this up I'll recap</font>

515
00:26:12,309 --> 00:26:16,090
a little<font color="#CCCCCC"> bit about what</font><font color="#E5E5E5"> he</font><font color="#CCCCCC"> just went</font>

516
00:26:13,990 --> 00:26:18,549
<font color="#E5E5E5">over so our new driver when we presented</font>

517
00:26:16,090 --> 00:26:21,970
<font color="#CCCCCC">it last year in</font><font color="#E5E5E5"> June</font><font color="#CCCCCC"> all we had shown is</font>

518
00:26:18,549 --> 00:26:23,889
the raw capture<font color="#E5E5E5"> of the binary trace and</font>

519
00:26:21,970 --> 00:26:26,440
so those packets<font color="#E5E5E5"> have taken not taken</font>

520
00:26:23,890 --> 00:26:28,690
taken IP and timing was all that we had

521
00:26:26,440 --> 00:26:30,250
available<font color="#CCCCCC"> so we had to figure</font><font color="#E5E5E5"> out how to</font>

522
00:26:28,690 --> 00:26:31,720
decode this and<font color="#CCCCCC"> he's going</font><font color="#E5E5E5"> to show you</font>

523
00:26:30,250 --> 00:26:35,140
tracing in different modes<font color="#E5E5E5"> and</font>

524
00:26:31,720 --> 00:26:39,250
visualizing<font color="#E5E5E5"> an Ida so okay can you see</font>

525
00:26:35,140 --> 00:26:43,090
now<font color="#E5E5E5"> okay let's do in the</font><font color="#CCCCCC"> beginning for</font>

526
00:26:39,250 --> 00:26:45,630
one only one processor how many reckon

527
00:26:43,090 --> 00:26:49,678
conferences have you attended<font color="#CCCCCC"> the guys</font>

528
00:26:45,630 --> 00:26:50,860
let's say<font color="#E5E5E5"> three let's try with three</font>

529
00:26:49,679 --> 00:26:54,429
<font color="#E5E5E5">okay</font>

530
00:26:50,860 --> 00:26:58,209
the application<font color="#E5E5E5"> has ended saying you are</font>

531
00:26:54,429 --> 00:27:03,400
<font color="#E5E5E5">on a good track that's it the exact is</font>

532
00:26:58,210 --> 00:27:11,429
exit and try to open<font color="#E5E5E5"> the executable in</font>

533
00:27:03,400 --> 00:27:11,429
using<font color="#CCCCCC"> haider okay here there is the code</font>

534
00:27:14,870 --> 00:27:23,309
our goal is to trace<font color="#E5E5E5"> the software we</font>

535
00:27:19,169 --> 00:27:29,400
<font color="#E5E5E5">have developed the</font><font color="#CCCCCC"> Ida plug-in that does</font>

536
00:27:23,309 --> 00:27:34,610
<font color="#E5E5E5">this</font><font color="#CCCCCC"> for us let's feed it</font><font color="#E5E5E5"> with the text</font>

537
00:27:29,400 --> 00:27:42,620
log wait a moment

538
00:27:34,610 --> 00:27:42,620
<font color="#E5E5E5">okay an exception but as you can see</font>

539
00:27:43,700 --> 00:27:49,900
this is exactly<font color="#E5E5E5"> the code that it has run</font>

540
00:27:46,740 --> 00:27:49,900
[Applause]

541
00:27:51,620 --> 00:27:58,289
the exception was not<font color="#CCCCCC"> voluntary of</font>

542
00:27:53,970 --> 00:28:00,630
<font color="#CCCCCC">course</font><font color="#E5E5E5"> and so we use a library from</font>

543
00:27:58,289 --> 00:28:02,789
<font color="#E5E5E5">Intel called Lib</font><font color="#CCCCCC"> IPT it's open</font><font color="#E5E5E5"> source</font>

544
00:28:00,630 --> 00:28:06,059
and it provides the decoding of<font color="#E5E5E5"> the</font>

545
00:28:02,789 --> 00:28:07,559
binary trace to a text file that<font color="#E5E5E5"> we're</font>

546
00:28:06,059 --> 00:28:08,700
parsing<font color="#CCCCCC"> and</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> plug-in for</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> now oh</font>

547
00:28:07,559 --> 00:28:10,770
<font color="#E5E5E5">yeah</font>

548
00:28:08,700 --> 00:28:13,230
later we'll integrate the decoding

549
00:28:10,770 --> 00:28:14,850
within<font color="#CCCCCC"> the plugin okay now I wish I</font>

550
00:28:13,230 --> 00:28:18,740
would like even<font color="#E5E5E5"> to</font><font color="#CCCCCC"> show you the same</font>

551
00:28:14,850 --> 00:28:23,539
what it using<font color="#E5E5E5"> multiprocessor environment</font>

552
00:28:18,740 --> 00:28:23,539
let's see what is the part of my process

553
00:28:25,039 --> 00:28:33,629
how many how many processor<font color="#CCCCCC"> four and now</font>

554
00:28:30,000 --> 00:28:36,330
let's say<font color="#CCCCCC"> 8 conferences okay the</font><font color="#E5E5E5"> results</font>

555
00:28:33,630 --> 00:28:39,630
<font color="#CCCCCC">are</font><font color="#E5E5E5"> different and you can see in the in</font>

556
00:28:36,330 --> 00:28:43,850
the summary each processors are<font color="#E5E5E5"> is on a</font>

557
00:28:39,630 --> 00:28:49,080
buffer with different number of<font color="#E5E5E5"> packets</font>

558
00:28:43,850 --> 00:28:53,490
<font color="#CCCCCC">ok it's this dump as you can see there</font>

559
00:28:49,080 --> 00:28:56,580
are different<font color="#E5E5E5"> binary files and text file</font>

560
00:28:53,490 --> 00:29:00,110
for each processors<font color="#CCCCCC"> now we increase the</font>

561
00:28:56,580 --> 00:29:00,110
font size just<font color="#E5E5E5"> a moment</font>

562
00:29:02,960 --> 00:29:10,960
can you see guys<font color="#E5E5E5"> yeah as you can</font><font color="#CCCCCC"> see</font>

563
00:29:06,830 --> 00:29:13,760
<font color="#CCCCCC">these are CPU number one it has all the</font>

564
00:29:10,960 --> 00:29:16,490
<font color="#CCCCCC">pockets they'd taken not taken and the</font>

565
00:29:13,760 --> 00:29:18,620
paging page origination enable and

566
00:29:16,490 --> 00:29:22,450
disable<font color="#E5E5E5"> because the context feature of</font>

567
00:29:18,620 --> 00:29:25,699
<font color="#E5E5E5">Windows and switch to</font><font color="#CCCCCC"> different thread</font>

568
00:29:22,450 --> 00:29:27,170
this<font color="#E5E5E5"> is one CPU but for</font><font color="#CCCCCC"> example if you</font>

569
00:29:25,700 --> 00:29:31,100
<font color="#CCCCCC">are lucky we are not lucky</font>

570
00:29:27,170 --> 00:29:33,020
there is even some logs that<font color="#CCCCCC"> are quite</font>

571
00:29:31,100 --> 00:29:37,909
clear<font color="#CCCCCC"> because it means that</font><font color="#E5E5E5"> the windows</font>

572
00:29:33,020 --> 00:29:39,800
as executed this executable only for a

573
00:29:37,910 --> 00:29:42,830
<font color="#E5E5E5">small period of</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is not the</font>

574
00:29:39,800 --> 00:29:45,260
<font color="#E5E5E5">case</font><font color="#CCCCCC"> because likely we the context</font>

575
00:29:42,830 --> 00:29:47,659
<font color="#CCCCCC">switch</font><font color="#E5E5E5"> that's run for this for each</font>

576
00:29:45,260 --> 00:29:51,140
<font color="#CCCCCC">different CPU but sometimes it</font><font color="#E5E5E5"> happens</font>

577
00:29:47,660 --> 00:29:54,770
that<font color="#CCCCCC"> even the logger for</font><font color="#E5E5E5"> one processor</font>

578
00:29:51,140 --> 00:29:56,810
is empty<font color="#E5E5E5"> and it is our</font><font color="#CCCCCC"> implementation</font>

579
00:29:54,770 --> 00:29:59,240
can<font color="#E5E5E5"> you blow up one of those text files</font>

580
00:29:56,810 --> 00:30:00,740
again<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> I just</font><font color="#CCCCCC"> wanted to point out so</font>

581
00:29:59,240 --> 00:30:03,170
when you read these text<font color="#E5E5E5"> files you can</font>

582
00:30:00,740 --> 00:30:05,180
see that<font color="#E5E5E5"> for indirect branches and</font>

583
00:30:03,170 --> 00:30:08,120
return addresses we actually get the

584
00:30:05,180 --> 00:30:10,210
full 64-bit<font color="#E5E5E5"> target address</font><font color="#CCCCCC"> but if you</font>

585
00:30:08,120 --> 00:30:12,080
look at like the<font color="#E5E5E5"> TNT</font><font color="#CCCCCC"> packets those are</font>

586
00:30:10,210 --> 00:30:13,580
indicating whether or not a conditional

587
00:30:12,080 --> 00:30:15,800
branch was taken so they only<font color="#E5E5E5"> store a</font>

588
00:30:13,580 --> 00:30:18,080
<font color="#E5E5E5">single bit that determines whether</font><font color="#CCCCCC"> or</font>

589
00:30:15,800 --> 00:30:20,090
<font color="#E5E5E5">not you took the true or false branch so</font>

590
00:30:18,080 --> 00:30:22,669
you have to recover<font color="#E5E5E5"> that later on and</font>

591
00:30:20,090 --> 00:30:23,840
disassemble in real time to recover<font color="#E5E5E5"> what</font>

592
00:30:22,670 --> 00:30:28,870
the target<font color="#E5E5E5"> address is</font><font color="#CCCCCC"> word for those</font>

593
00:30:23,840 --> 00:30:31,520
conditional branches we have time yeah I

594
00:30:28,870 --> 00:30:34,520
would like to show even on experimental

595
00:30:31,520 --> 00:30:38,090
demo that the<font color="#E5E5E5"> users cabinet</font><font color="#CCCCCC"> placing</font>

596
00:30:34,520 --> 00:30:40,820
<font color="#E5E5E5">directly for user mode for this demo I</font>

597
00:30:38,090 --> 00:30:43,399
ever choose an ACP driver<font color="#E5E5E5"> not for a</font>

598
00:30:40,820 --> 00:30:45,770
<font color="#E5E5E5">specific</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> randomly</font>

599
00:30:43,400 --> 00:30:48,020
<font color="#CCCCCC">chosen and it's I found that</font><font color="#E5E5E5"> today</font>

600
00:30:45,770 --> 00:30:52,129
system calls<font color="#E5E5E5"> this interface a lot of</font>

601
00:30:48,020 --> 00:30:55,150
times let's try to do<font color="#E5E5E5"> even these</font><font color="#CCCCCC"> boot</font><font color="#E5E5E5"> to</font>

602
00:30:52,130 --> 00:30:55,150
take even<font color="#E5E5E5"> those dump</font>

603
00:30:59,970 --> 00:31:15,490
the Explorer has been blocking<font color="#E5E5E5"> amazing</font>

604
00:31:04,020 --> 00:31:18,400
<font color="#E5E5E5">okay let's say yes</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> CPI dot sees let's</font>

605
00:31:15,490 --> 00:31:21,640
say go number of process of<font color="#CCCCCC"> Sibiu like</font>

606
00:31:18,400 --> 00:31:24,610
just one<font color="#CCCCCC"> for lifetime</font><font color="#E5E5E5"> okay it</font><font color="#CCCCCC"> ask I'm</font>

607
00:31:21,640 --> 00:31:27,520
tracing<font color="#CCCCCC"> do something</font><font color="#E5E5E5"> and then stop me</font><font color="#CCCCCC"> I</font>

608
00:31:24,610 --> 00:31:30,429
do for example<font color="#E5E5E5"> some movement on the my</font>

609
00:31:27,520 --> 00:31:37,210
<font color="#CCCCCC">PC</font><font color="#E5E5E5"> and then at</font><font color="#CCCCCC"> appointee of</font><font color="#E5E5E5"> point of</font>

610
00:31:30,430 --> 00:31:39,910
<font color="#E5E5E5">time I will say stop in this time we</font>

611
00:31:37,210 --> 00:31:42,130
were quite<font color="#CCCCCC"> lucky because</font><font color="#E5E5E5"> as you can see</font>

612
00:31:39,910 --> 00:31:43,890
the<font color="#E5E5E5"> processor number one has taken some</font>

613
00:31:42,130 --> 00:31:51,730
<font color="#E5E5E5">packets</font>

614
00:31:43,890 --> 00:31:54,490
let's see what are those pockets<font color="#CCCCCC"> okay as</font>

615
00:31:51,730 --> 00:31:56,230
<font color="#E5E5E5">you can see there is not so a lot of</font><font color="#CCCCCC"> a</font>

616
00:31:54,490 --> 00:31:59,020
lot<font color="#CCCCCC"> of time or jeez</font><font color="#E5E5E5"> a lot of things</font>

617
00:31:56,230 --> 00:32:07,060
registered er what something is<font color="#E5E5E5"> has been</font>

618
00:31:59,020 --> 00:32:10,180
taken let's try to<font color="#E5E5E5"> use our plugin to be</font>

619
00:32:07,060 --> 00:32:12,639
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> trace words you can see this is</font>

620
00:32:10,180 --> 00:32:15,090
the code<font color="#CCCCCC"> of a CPI</font><font color="#E5E5E5"> unfortunately I have</font>

621
00:32:12,640 --> 00:32:18,100
<font color="#E5E5E5">not seen what about this</font><font color="#CCCCCC"> because it's a</font>

622
00:32:15,090 --> 00:32:22,080
unemployed release of a new of Windows

623
00:32:18,100 --> 00:32:22,080
10 but let's<font color="#CCCCCC"> try</font>

624
00:32:27,950 --> 00:32:33,330
<font color="#E5E5E5">okay the plug-in has work it you can see</font>

625
00:32:31,500 --> 00:32:35,070
you can see now because<font color="#CCCCCC"> the driver entry</font>

626
00:32:33,330 --> 00:32:37,949
<font color="#CCCCCC">has</font><font color="#E5E5E5"> never been called it has</font><font color="#CCCCCC"> been</font>

627
00:32:35,070 --> 00:32:40,230
already<font color="#CCCCCC"> colored in the in when you ever</font>

628
00:32:37,950 --> 00:32:41,970
<font color="#CCCCCC">switch it</font><font color="#E5E5E5"> on your system but if you see</font>

629
00:32:40,230 --> 00:32:45,000
the logger there is a lot<font color="#E5E5E5"> of time</font><font color="#CCCCCC"> collet</font>

630
00:32:41,970 --> 00:32:46,730
is this<font color="#E5E5E5"> special function that could be</font>

631
00:32:45,000 --> 00:32:53,010
<font color="#CCCCCC">on your CTL or whatever</font>

632
00:32:46,730 --> 00:32:58,200
let's try could go yes this is ioctl<font color="#CCCCCC"> you</font>

633
00:32:53,010 --> 00:33:01,080
can see just a moment I will this<font color="#E5E5E5"> is a</font>

634
00:32:58,200 --> 00:33:02,580
this<font color="#CCCCCC"> should be blindly without knowing</font>

635
00:33:01,080 --> 00:33:04,889
anything about the interface of<font color="#E5E5E5"> the</font>

636
00:33:02,580 --> 00:33:06,809
driver<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can probably say that this is</font>

637
00:33:04,890 --> 00:33:09,600
an area your CTL because the code<font color="#CCCCCC"> is</font>

638
00:33:06,809 --> 00:33:12,299
<font color="#CCCCCC">executed a lot of times because for the</font>

639
00:33:09,600 --> 00:33:14,668
<font color="#E5E5E5">color the color is</font><font color="#CCCCCC"> darker</font><font color="#E5E5E5"> and it means</font>

640
00:33:12,299 --> 00:33:17,030
<font color="#E5E5E5">that the CPU</font><font color="#CCCCCC"> has executed is a function</font>

641
00:33:14,669 --> 00:33:23,210
a<font color="#E5E5E5"> lot of times as you can see there are</font>

642
00:33:17,030 --> 00:33:23,210
tracer to all the<font color="#E5E5E5"> branches this is</font><font color="#CCCCCC"> oh</font>

643
00:33:23,299 --> 00:33:30,120
come on<font color="#CCCCCC"> this will go smoothly it's</font><font color="#E5E5E5"> it's</font>

644
00:33:27,210 --> 00:33:33,710
not taken and you can see there is the

645
00:33:30,120 --> 00:33:37,739
branch and all the branches<font color="#CCCCCC"> are twisted</font>

646
00:33:33,710 --> 00:33:39,600
<font color="#E5E5E5">and that is the</font><font color="#CCCCCC"> DM</font><font color="#E5E5E5"> about the cabinet</font>

647
00:33:37,740 --> 00:33:41,820
<font color="#E5E5E5">tracing from user mode from kernel mode</font>

648
00:33:39,600 --> 00:33:44,100
<font color="#E5E5E5">if you develop your driver you are even</font>

649
00:33:41,820 --> 00:33:47,220
minute be able to trace the driver entry

650
00:33:44,100 --> 00:33:48,629
or driver<font color="#E5E5E5"> unload routine</font><font color="#CCCCCC"> I can show the</font>

651
00:33:47,220 --> 00:33:50,130
right now because first we<font color="#E5E5E5"> don't have</font>

652
00:33:48,630 --> 00:33:51,780
<font color="#E5E5E5">time</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> second and</font><font color="#CCCCCC"> my computer is</font>

653
00:33:50,130 --> 00:33:55,049
<font color="#CCCCCC">switched on in</font><font color="#E5E5E5"> our relays employment</font>

654
00:33:51,780 --> 00:33:57,809
<font color="#E5E5E5">because for doing that of course we we</font>

655
00:33:55,049 --> 00:34:00,690
can't use a<font color="#CCCCCC"> final driver but it's</font>

656
00:33:57,809 --> 00:34:02,549
<font color="#CCCCCC">passable</font><font color="#E5E5E5"> we if you</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> that in a if you</font>

657
00:34:00,690 --> 00:34:04,590
write<font color="#E5E5E5"> your cabinet driver and you sign</font>

658
00:34:02,549 --> 00:34:07,940
in your<font color="#E5E5E5"> kernel driver you</font><font color="#CCCCCC"> can you can</font>

659
00:34:04,590 --> 00:34:07,939
that you<font color="#CCCCCC"> can do whatever you would</font><font color="#E5E5E5"> like</font>

660
00:34:10,850 --> 00:34:23,520
<font color="#CCCCCC">okay that's right</font><font color="#E5E5E5"> or back today so now</font>

661
00:34:18,780 --> 00:34:25,950
we'll switch<font color="#CCCCCC"> okay yes so yeah so to</font>

662
00:34:23,520 --> 00:34:28,590
recap the<font color="#E5E5E5"> driver now supports kernel</font>

663
00:34:25,949 --> 00:34:31,710
tracing and user mode tracing you can

664
00:34:28,590 --> 00:34:34,020
filter<font color="#E5E5E5"> based upon the CR</font><font color="#CCCCCC"> 3 so a</font><font color="#E5E5E5"> single</font>

665
00:34:31,710 --> 00:34:37,470
whole process you can trace the<font color="#CCCCCC"> entire</font>

666
00:34:34,020 --> 00:34:39,449
kernel<font color="#E5E5E5"> space</font><font color="#CCCCCC"> or you can isolate ranges</font>

667
00:34:37,469 --> 00:34:41,250
of contiguous<font color="#E5E5E5"> IP</font>

668
00:34:39,449 --> 00:34:43,408
that then you<font color="#E5E5E5"> get up to four different</font>

669
00:34:41,250 --> 00:34:46,290
ranges so now I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> demonstrate</font>

670
00:34:43,409 --> 00:34:51,000
this in a practical<font color="#E5E5E5"> real-world scenario</font>

671
00:34:46,290 --> 00:34:53,310
inside of<font color="#E5E5E5"> AFL so we have this fast</font>

672
00:34:51,000 --> 00:34:54,629
racing<font color="#E5E5E5"> engine and you'll see some</font>

673
00:34:53,310 --> 00:34:56,940
performance numbers that are<font color="#CCCCCC"> real-world</font>

674
00:34:54,629 --> 00:35:00,420
<font color="#E5E5E5">here but in the manuals they are</font>

675
00:34:56,940 --> 00:35:03,869
targeting of 5 to<font color="#CCCCCC"> 15% trace overhead for</font>

676
00:35:00,420 --> 00:35:05,099
<font color="#E5E5E5">the entire system</font><font color="#CCCCCC"> so per core</font><font color="#E5E5E5"> you should</font>

677
00:35:03,869 --> 00:35:07,170
be able to trace both kernel-mode

678
00:35:05,099 --> 00:35:10,380
operations and<font color="#E5E5E5"> user-mode operations or</font>

679
00:35:07,170 --> 00:35:12,920
only<font color="#CCCCCC"> a 5 to 15%</font><font color="#E5E5E5"> and I'll actually be</font>

680
00:35:10,380 --> 00:35:20,670
<font color="#CCCCCC">able to show you</font><font color="#E5E5E5"> that how</font><font color="#CCCCCC"> that works</font>

681
00:35:12,920 --> 00:35:22,400
<font color="#CCCCCC">then I'm sorry</font><font color="#E5E5E5"> yes yes</font><font color="#CCCCCC"> oh I'm sorry that</font>

682
00:35:20,670 --> 00:35:26,000
<font color="#CCCCCC">will help</font>

683
00:35:22,400 --> 00:35:26,000
that's one yes

684
00:35:35,990 --> 00:35:40,649
<font color="#E5E5E5">okay</font>

685
00:35:38,090 --> 00:35:43,080
so how do<font color="#E5E5E5"> we use this and apply it for</font>

686
00:35:40,650 --> 00:35:45,480
vulnerability discovery<font color="#CCCCCC"> so who here is</font>

687
00:35:43,080 --> 00:35:48,480
familiar<font color="#E5E5E5"> with American fuzzy lab has</font>

688
00:35:45,480 --> 00:35:51,240
used it we have<font color="#E5E5E5"> people who do fuzzing in</font>

689
00:35:48,480 --> 00:35:54,900
the crowd<font color="#CCCCCC"> okay a good portion</font><font color="#E5E5E5"> here so in</font>

690
00:35:51,240 --> 00:35:57,240
the last few years<font color="#E5E5E5"> we've</font><font color="#CCCCCC"> seen</font><font color="#E5E5E5"> well an</font>

691
00:35:54,900 --> 00:36:00,120
evolutionary jump in fuzzing technology

692
00:35:57,240 --> 00:36:03,540
<font color="#CCCCCC">basically we've gone</font><font color="#E5E5E5"> from using dumb</font>

693
00:36:00,120 --> 00:36:05,850
fuzzing or<font color="#E5E5E5"> grammar based fuzzing that</font>

694
00:36:03,540 --> 00:36:07,290
wasn't able<font color="#CCCCCC"> to determine whether or</font><font color="#E5E5E5"> not</font>

695
00:36:05,850 --> 00:36:09,900
the samples that<font color="#CCCCCC"> were being generated</font>

696
00:36:07,290 --> 00:36:13,830
were useful to<font color="#E5E5E5"> applying a new technology</font>

697
00:36:09,900 --> 00:36:15,120
or engineering<font color="#CCCCCC"> an older</font><font color="#E5E5E5"> technology into</font>

698
00:36:13,830 --> 00:36:16,799
something that's performant enough to be

699
00:36:15,120 --> 00:36:20,040
<font color="#E5E5E5">used and we call that evolutionary</font>

700
00:36:16,800 --> 00:36:22,680
fuzzing so we take the idea of<font color="#E5E5E5"> dumb</font>

701
00:36:20,040 --> 00:36:24,840
fuzzing mutation and we combine it<font color="#CCCCCC"> with</font>

702
00:36:22,680 --> 00:36:27,180
a the<font color="#CCCCCC"> ability to collect</font><font color="#E5E5E5"> a feedback</font>

703
00:36:24,840 --> 00:36:29,340
<font color="#CCCCCC">signal using</font><font color="#E5E5E5"> code coverage and then we</font>

704
00:36:27,180 --> 00:36:31,740
assess the fitness of that new randomly

705
00:36:29,340 --> 00:36:34,170
generated input<font color="#E5E5E5"> against the entire</font>

706
00:36:31,740 --> 00:36:35,640
<font color="#E5E5E5">lifetime of</font><font color="#CCCCCC"> your fuzzing cycle so</font>

707
00:36:34,170 --> 00:36:37,070
<font color="#CCCCCC">basically what we can</font><font color="#E5E5E5"> do is we can look</font>

708
00:36:35,640 --> 00:36:39,990
at<font color="#E5E5E5"> this code coverage information</font>

709
00:36:37,070 --> 00:36:41,820
<font color="#E5E5E5">determine if this newly generated input</font>

710
00:36:39,990 --> 00:36:43,740
actually<font color="#CCCCCC"> gets us to a different part of</font>

711
00:36:41,820 --> 00:36:45,870
the code<font color="#CCCCCC"> and if it does</font><font color="#E5E5E5"> and we'll</font>

712
00:36:43,740 --> 00:36:48,299
introduce<font color="#E5E5E5"> that into our entire pool of</font>

713
00:36:45,870 --> 00:36:50,759
samples and continue to mutate and fuzz

714
00:36:48,300 --> 00:36:53,640
those as we go<font color="#CCCCCC"> so over time we're</font>

715
00:36:50,760 --> 00:36:55,530
<font color="#E5E5E5">refining our set of inputs and getting</font>

716
00:36:53,640 --> 00:36:57,359
we're building a corpus<font color="#E5E5E5"> and each one of</font>

717
00:36:55,530 --> 00:37:00,420
those<font color="#E5E5E5"> inputs exercises a slightly</font>

718
00:36:57,360 --> 00:37:02,880
different<font color="#CCCCCC"> part of the code and in effect</font>

719
00:37:00,420 --> 00:37:04,430
<font color="#CCCCCC">what</font><font color="#E5E5E5"> we've seen is the last three or</font>

720
00:37:02,880 --> 00:37:07,590
<font color="#CCCCCC">four</font><font color="#E5E5E5"> years since this has been available</font>

721
00:37:04,430 --> 00:37:09,359
<font color="#CCCCCC">this is highly</font><font color="#E5E5E5"> optimized your compute</font>

722
00:37:07,590 --> 00:37:14,250
time when it comes to<font color="#CCCCCC"> doing dumb fuzzing</font>

723
00:37:09,360 --> 00:37:16,320
<font color="#CCCCCC">and so the the last couple of talks I've</font>

724
00:37:14,250 --> 00:37:18,420
given have focused on<font color="#CCCCCC"> this</font><font color="#E5E5E5"> technology</font>

725
00:37:16,320 --> 00:37:20,130
and<font color="#E5E5E5"> so I encourage</font><font color="#CCCCCC"> you to</font><font color="#E5E5E5"> go look</font><font color="#CCCCCC"> at</font>

726
00:37:18,420 --> 00:37:22,470
<font color="#E5E5E5">previous slide decks which are on the</font>

727
00:37:20,130 --> 00:37:24,750
<font color="#CCCCCC">Recon</font><font color="#E5E5E5"> website or my</font><font color="#CCCCCC"> website at moe</font><font color="#E5E5E5"> flow</font>

728
00:37:22,470 --> 00:37:26,580
<font color="#CCCCCC">network but basically through</font>

729
00:37:24,750 --> 00:37:28,290
researching<font color="#E5E5E5"> this I've resolved that the</font>

730
00:37:26,580 --> 00:37:30,720
main things<font color="#CCCCCC"> that we need</font><font color="#E5E5E5"> to effectively</font>

731
00:37:28,290 --> 00:37:32,400
<font color="#E5E5E5">deploy this technology is we need a fast</font>

732
00:37:30,720 --> 00:37:34,890
<font color="#E5E5E5">tracing engine and of course that was</font>

733
00:37:32,400 --> 00:37:36,840
<font color="#E5E5E5">the inspiration to look into Intel</font>

734
00:37:34,890 --> 00:37:39,240
processor trace<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> promise of</font>

735
00:37:36,840 --> 00:37:41,130
<font color="#CCCCCC">15%</font><font color="#E5E5E5"> overhead against closed source</font>

736
00:37:39,240 --> 00:37:43,500
binary software<font color="#E5E5E5"> is pretty incredible</font>

737
00:37:41,130 --> 00:37:46,110
compared to the technologies<font color="#CCCCCC"> that we've</font>

738
00:37:43,500 --> 00:37:48,480
had available<font color="#CCCCCC"> before previously</font>

739
00:37:46,110 --> 00:37:50,880
<font color="#CCCCCC">hardware tracings not new to Intel</font><font color="#E5E5E5"> since</font>

740
00:37:48,480 --> 00:37:53,220
the p4 there's been the ability<font color="#CCCCCC"> to do</font>

741
00:37:50,880 --> 00:37:56,430
<font color="#CCCCCC">Hardware tracing</font><font color="#E5E5E5"> there's mechanisms</font>

742
00:37:53,220 --> 00:37:59,040
called<font color="#E5E5E5"> branch traced or BTS which is</font>

743
00:37:56,430 --> 00:38:01,379
works in a<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> fashion but was not</font>

744
00:37:59,040 --> 00:38:03,740
designed in a way that<font color="#CCCCCC"> was optimized it</font>

745
00:38:01,380 --> 00:38:05,730
didn't write<font color="#CCCCCC"> to physical Ram</font><font color="#E5E5E5"> it did it</font>

746
00:38:03,740 --> 00:38:08,819
polluted your cache<font color="#CCCCCC"> and things like</font><font color="#E5E5E5"> that</font>

747
00:38:05,730 --> 00:38:10,650
<font color="#CCCCCC">so we saw massive slowdown and then you</font>

748
00:38:08,820 --> 00:38:13,710
have another<font color="#E5E5E5"> option which</font><font color="#CCCCCC"> is called a</font>

749
00:38:10,650 --> 00:38:17,370
last branch record which is only 32

750
00:38:13,710 --> 00:38:19,050
<font color="#E5E5E5">registers in modern processors</font><font color="#CCCCCC"> and those</font>

751
00:38:17,370 --> 00:38:21,480
only<font color="#E5E5E5"> give you the last 32 branches</font><font color="#CCCCCC"> so</font>

752
00:38:19,050 --> 00:38:24,450
you'd have to<font color="#E5E5E5"> interrupt every time every</font>

753
00:38:21,480 --> 00:38:26,940
32 branches to parse<font color="#E5E5E5"> that and use</font><font color="#CCCCCC"> that</font>

754
00:38:24,450 --> 00:38:28,649
<font color="#E5E5E5">and or you'd have to write</font><font color="#CCCCCC"> a driver</font><font color="#E5E5E5"> that</font>

755
00:38:26,940 --> 00:38:30,960
<font color="#E5E5E5">flushes that out to a</font><font color="#CCCCCC"> different cache</font>

756
00:38:28,650 --> 00:38:33,750
and do<font color="#CCCCCC"> other</font><font color="#E5E5E5"> things so while this isn't</font>

757
00:38:30,960 --> 00:38:36,510
<font color="#E5E5E5">new this is designed</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> first time</font>

758
00:38:33,750 --> 00:38:38,250
to<font color="#CCCCCC"> be a highly performant</font><font color="#E5E5E5"> up until Intel</font>

759
00:38:36,510 --> 00:38:41,220
processor trace it was actually faster

760
00:38:38,250 --> 00:38:42,930
<font color="#CCCCCC">to use</font><font color="#E5E5E5"> software based tracers</font><font color="#CCCCCC"> things</font>

761
00:38:41,220 --> 00:38:45,419
that would do dynamic binary

762
00:38:42,930 --> 00:38:48,839
instrumentation using<font color="#CCCCCC"> dynamo</font><font color="#E5E5E5"> REO or pin</font>

763
00:38:45,420 --> 00:38:51,420
or something<font color="#CCCCCC"> like that so now we have</font>

764
00:38:48,840 --> 00:38:53,070
this fast<font color="#E5E5E5"> racing engine that's great we</font>

765
00:38:51,420 --> 00:38:56,850
need fast logging which is something

766
00:38:53,070 --> 00:38:59,370
<font color="#E5E5E5">that we get out</font><font color="#CCCCCC"> of the design of AFL AFL</font>

767
00:38:56,850 --> 00:39:01,580
uses a bloom filter<font color="#CCCCCC"> that allows you to</font>

768
00:38:59,370 --> 00:39:04,230
<font color="#E5E5E5">quickly look up whether or not you've</font>

769
00:39:01,580 --> 00:39:07,200
done the same<font color="#CCCCCC"> code coverage so instead</font>

770
00:39:04,230 --> 00:39:09,810
of parsing a text file or binary<font color="#E5E5E5"> file</font>

771
00:39:07,200 --> 00:39:13,830
that's just a list of<font color="#E5E5E5"> addresses of basic</font>

772
00:39:09,810 --> 00:39:15,960
blocks consecutively<font color="#E5E5E5"> we'd actually parse</font>

773
00:39:13,830 --> 00:39:18,990
<font color="#E5E5E5">that real time and fill</font><font color="#CCCCCC"> a bloom filter</font>

774
00:39:15,960 --> 00:39:22,290
<font color="#CCCCCC">so you can</font><font color="#E5E5E5"> just check to see</font><font color="#CCCCCC"> if the 64k</font>

775
00:39:18,990 --> 00:39:24,299
of<font color="#CCCCCC"> ram is identical to another 64k of</font>

776
00:39:22,290 --> 00:39:27,870
ram<font color="#E5E5E5"> instead of doing a comparison of</font>

777
00:39:24,300 --> 00:39:29,220
<font color="#E5E5E5">each address</font><font color="#CCCCCC"> and then through some</font><font color="#E5E5E5"> of my</font>

778
00:39:27,870 --> 00:39:31,529
other research<font color="#E5E5E5"> there's been other</font>

779
00:39:29,220 --> 00:39:35,759
attempts<font color="#E5E5E5"> evolutionary fuzzing starting</font>

780
00:39:31,530 --> 00:39:38,700
about 2004 or 2005<font color="#CCCCCC"> jared</font><font color="#E5E5E5"> DeMott did some</font>

781
00:39:35,760 --> 00:39:39,690
of<font color="#E5E5E5"> his PhD research on this and he had</font>

782
00:39:38,700 --> 00:39:42,020
something<font color="#CCCCCC"> called the evolutionary</font>

783
00:39:39,690 --> 00:39:46,710
puzzling system<font color="#CCCCCC"> but it was based upon</font>

784
00:39:42,020 --> 00:39:48,270
basically<font color="#E5E5E5"> the BTS record or a debugger</font>

785
00:39:46,710 --> 00:39:50,400
<font color="#CCCCCC">breakpoint</font><font color="#E5E5E5"> so it's quite slow and it's</font>

786
00:39:48,270 --> 00:39:53,070
tracing and it was also<font color="#CCCCCC"> over engineered</font>

787
00:39:50,400 --> 00:39:54,660
<font color="#E5E5E5">trying to incorporate too much of the</font>

788
00:39:53,070 --> 00:39:57,420
research that's an evolutionary like

789
00:39:54,660 --> 00:39:59,210
biology<font color="#E5E5E5"> side of things so so the key is</font>

790
00:39:57,420 --> 00:40:01,420
<font color="#CCCCCC">to have this fast racing</font><font color="#E5E5E5"> engine</font>

791
00:39:59,210 --> 00:40:05,060
<font color="#CCCCCC">efficient logging and to keep the</font>

792
00:40:01,420 --> 00:40:07,580
analysis to the minimum<font color="#E5E5E5"> so 2013</font><font color="#CCCCCC"> Michael</font>

793
00:40:05,060 --> 00:40:10,099
<font color="#CCCCCC">Zaleski who's contributed a lot of great</font>

794
00:40:07,580 --> 00:40:12,200
stuff<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our industry produce the first</font>

795
00:40:10,099 --> 00:40:14,869
<font color="#CCCCCC">performant</font><font color="#E5E5E5"> open-source evolutionary</font>

796
00:40:12,200 --> 00:40:17,680
<font color="#CCCCCC">funds are called American fuzzy</font><font color="#E5E5E5"> lab</font><font color="#CCCCCC"> it</font>

797
00:40:14,869 --> 00:40:20,359
uses<font color="#CCCCCC"> a pretty comprehensive list</font><font color="#E5E5E5"> of</font>

798
00:40:17,680 --> 00:40:22,790
types of fuzzing strategies<font color="#E5E5E5"> whether it's</font>

799
00:40:20,359 --> 00:40:26,119
flipping by flipping<font color="#E5E5E5"> D word flipping and</font>

800
00:40:22,790 --> 00:40:29,390
so on<font color="#CCCCCC"> crossovers and various</font><font color="#E5E5E5"> types of</font>

801
00:40:26,119 --> 00:40:33,230
mutation<font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses originally used block</font>

802
00:40:29,390 --> 00:40:35,480
coverage via<font color="#E5E5E5"> a plug-in or a post process</font>

803
00:40:33,230 --> 00:40:37,820
of the GCC compilation it would compile

804
00:40:35,480 --> 00:40:40,040
your code to assembler and then annotate

805
00:40:37,820 --> 00:40:42,200
<font color="#E5E5E5">the assembler</font><font color="#CCCCCC"> to add callbacks hooks at</font>

806
00:40:40,040 --> 00:40:44,450
every basic block entry<font color="#E5E5E5"> point and then</font>

807
00:40:42,200 --> 00:40:46,250
that's through that modified source code

808
00:40:44,450 --> 00:40:49,939
that's how you got<font color="#E5E5E5"> your code coverage</font>

809
00:40:46,250 --> 00:40:52,099
and then as I<font color="#CCCCCC"> mentioned he takes</font><font color="#E5E5E5"> those</font>

810
00:40:49,940 --> 00:40:53,960
edge transitions basically shifts

811
00:40:52,099 --> 00:40:56,510
absorbs them together<font color="#E5E5E5"> and then</font>

812
00:40:53,960 --> 00:40:59,750
increments offsets<font color="#E5E5E5"> into this bloom</font>

813
00:40:56,510 --> 00:41:02,540
filter or or byte map<font color="#E5E5E5"> that is basically</font>

814
00:40:59,750 --> 00:41:04,609
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to track you know whether or</font><font color="#CCCCCC"> not</font>

815
00:41:02,540 --> 00:41:06,259
you've seen<font color="#CCCCCC"> this edge before</font><font color="#E5E5E5"> now you</font>

816
00:41:04,609 --> 00:41:08,750
can't<font color="#E5E5E5"> get out what those addresses were</font>

817
00:41:06,260 --> 00:41:11,540
originally because<font color="#E5E5E5"> it's simply an offset</font>

818
00:41:08,750 --> 00:41:13,160
<font color="#CCCCCC">into this mapping but you can very</font>

819
00:41:11,540 --> 00:41:15,259
<font color="#CCCCCC">quickly look</font><font color="#E5E5E5"> up have I been here</font><font color="#CCCCCC"> before</font>

820
00:41:13,160 --> 00:41:18,170
and<font color="#CCCCCC"> that's all we care about</font><font color="#E5E5E5"> as far as</font>

821
00:41:15,260 --> 00:41:19,940
whether<font color="#CCCCCC"> or not to keep that sample and</font>

822
00:41:18,170 --> 00:41:21,380
then of<font color="#CCCCCC"> course it was</font><font color="#E5E5E5"> written on top of</font>

823
00:41:19,940 --> 00:41:24,859
the POSIX API so it wasn't

824
00:41:21,380 --> 00:41:27,109
<font color="#CCCCCC">windows-compatible out the gate the</font>

825
00:41:24,859 --> 00:41:29,779
benefits<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> has the tracks</font><font color="#E5E5E5"> edge</font>

826
00:41:27,109 --> 00:41:32,240
transitions and not just<font color="#E5E5E5"> block entry</font><font color="#CCCCCC"> it</font>

827
00:41:29,780 --> 00:41:34,550
<font color="#E5E5E5">uses the bloom</font><font color="#CCCCCC"> filter</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> a fork</font>

828
00:41:32,240 --> 00:41:37,189
server built into it<font color="#E5E5E5"> so basically after</font>

829
00:41:34,550 --> 00:41:38,990
your process has initialized<font color="#E5E5E5"> it waited</font>

830
00:41:37,190 --> 00:41:40,580
and so all your libraries are loaded and

831
00:41:38,990 --> 00:41:42,799
<font color="#CCCCCC">all the linking and everything is done</font>

832
00:41:40,580 --> 00:41:44,960
<font color="#E5E5E5">and then once you get to</font><font color="#CCCCCC"> the parser code</font>

833
00:41:42,800 --> 00:41:46,670
then<font color="#E5E5E5"> it would fork and so you skip all</font>

834
00:41:44,960 --> 00:41:49,430
that initialization time which is an

835
00:41:46,670 --> 00:41:51,859
optimization<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then very importantly</font>

836
00:41:49,430 --> 00:41:54,589
<font color="#CCCCCC">he introduced persistent mode fuzzing</font>

837
00:41:51,859 --> 00:41:56,240
which is an in-memory<font color="#E5E5E5"> type of fuzzing</font>

838
00:41:54,589 --> 00:41:58,310
where you're not exiting and<font color="#E5E5E5"> recreating</font>

839
00:41:56,240 --> 00:42:01,189
the process<font color="#E5E5E5"> every time you're giving it</font>

840
00:41:58,310 --> 00:42:02,960
a pointer to<font color="#CCCCCC"> a function</font><font color="#E5E5E5"> and the number</font>

841
00:42:01,190 --> 00:42:05,930
of arguments<font color="#CCCCCC"> to that function and saying</font>

842
00:42:02,960 --> 00:42:08,420
<font color="#CCCCCC">ok once you exit this section of code</font>

843
00:42:05,930 --> 00:42:10,790
<font color="#E5E5E5">start over again and take our new</font><font color="#CCCCCC"> inputs</font>

844
00:42:08,420 --> 00:42:12,410
as inputs to<font color="#CCCCCC"> this</font><font color="#E5E5E5"> function and so that</font>

845
00:42:10,790 --> 00:42:12,950
also reduces<font color="#CCCCCC"> the</font><font color="#E5E5E5"> amount</font><font color="#CCCCCC"> of code that</font>

846
00:42:12,410 --> 00:42:15,649
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> tracing</font>

847
00:42:12,950 --> 00:42:19,399
executing<font color="#E5E5E5"> down to the minimal points as</font>

848
00:42:15,650 --> 00:42:21,980
an optimization and then importantly<font color="#CCCCCC"> you</font>

849
00:42:19,400 --> 00:42:24,589
can use this to build<font color="#E5E5E5"> a corpus on open</font>

850
00:42:21,980 --> 00:42:26,180
<font color="#E5E5E5">source</font><font color="#CCCCCC"> software it's very fast and so</font>

851
00:42:24,589 --> 00:42:28,430
you can use those as inputs into<font color="#E5E5E5"> your</font>

852
00:42:26,180 --> 00:42:30,828
pipeline on<font color="#CCCCCC"> maybe slower</font><font color="#E5E5E5"> or more</font>

853
00:42:28,430 --> 00:42:35,960
heavyweight analysis on other types of

854
00:42:30,829 --> 00:42:37,940
fuzzing so the way they do their tracing

855
00:42:35,960 --> 00:42:41,119
is every block it's a unique ID<font color="#E5E5E5"> the</font>

856
00:42:37,940 --> 00:42:43,010
edges are indexed<font color="#CCCCCC"> to that map it creates</font>

857
00:42:41,119 --> 00:42:47,329
that<font color="#E5E5E5"> hash</font><font color="#CCCCCC"> using the</font><font color="#E5E5E5"> shift in the zohr</font>

858
00:42:43,010 --> 00:42:49,250
<font color="#E5E5E5">and then we increment</font><font color="#CCCCCC"> the map so this</font>

859
00:42:47,329 --> 00:42:50,660
was great<font color="#E5E5E5"> I was looking into this and</font>

860
00:42:49,250 --> 00:42:53,599
<font color="#E5E5E5">how to optimize this and bring this to</font>

861
00:42:50,660 --> 00:42:55,640
<font color="#CCCCCC">the Windows platform obviously we can't</font>

862
00:42:53,599 --> 00:42:57,109
use what we can't use source code

863
00:42:55,640 --> 00:42:58,848
instrumentation for the majority<font color="#CCCCCC"> that's</font>

864
00:42:57,109 --> 00:43:00,680
our software that we're<font color="#E5E5E5"> targeting so we</font>

865
00:42:58,849 --> 00:43:03,230
needed<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that could</font><font color="#E5E5E5"> do binary</font>

866
00:43:00,680 --> 00:43:05,750
targeting<font color="#CCCCCC"> and so this seemed ideal</font>

867
00:43:03,230 --> 00:43:08,390
versus the other options of<font color="#E5E5E5"> using pin or</font>

868
00:43:05,750 --> 00:43:10,460
<font color="#E5E5E5">dynamo</font><font color="#CCCCCC"> Rio</font><font color="#E5E5E5"> and so on until last summer</font>

869
00:43:08,390 --> 00:43:13,430
<font color="#CCCCCC">you know we</font><font color="#E5E5E5"> decided</font><font color="#CCCCCC"> to start</font><font color="#E5E5E5"> looking</font>

870
00:43:10,460 --> 00:43:16,280
<font color="#E5E5E5">into this well around</font><font color="#CCCCCC"> that same time of</font>

871
00:43:13,430 --> 00:43:19,279
my talk at Intel<font color="#CCCCCC"> are at recon</font><font color="#E5E5E5"> last year</font>

872
00:43:16,280 --> 00:43:21,349
<font color="#CCCCCC">Ivan fatrick from Google I think he's</font>

873
00:43:19,280 --> 00:43:24,260
project zero<font color="#E5E5E5"> or Google security released</font>

874
00:43:21,349 --> 00:43:26,990
<font color="#E5E5E5">when</font><font color="#CCCCCC"> AFL which was a port of Michael</font>

875
00:43:24,260 --> 00:43:29,300
Zaleski's AFL<font color="#CCCCCC"> to Windows using dynamo</font>

876
00:43:26,990 --> 00:43:31,729
Rio at the<font color="#E5E5E5"> back end</font><font color="#CCCCCC"> are you guys</font>

877
00:43:29,300 --> 00:43:33,770
familiar with<font color="#CCCCCC"> 10 or dynamo Rio they're</font>

878
00:43:31,730 --> 00:43:36,619
basically loaders for<font color="#E5E5E5"> your program and</font>

879
00:43:33,770 --> 00:43:38,780
<font color="#E5E5E5">as you visit each new basic block of</font>

880
00:43:36,619 --> 00:43:41,780
<font color="#CCCCCC">code</font><font color="#E5E5E5"> it caches that allows you to modify</font>

881
00:43:38,780 --> 00:43:43,819
<font color="#E5E5E5">it in</font><font color="#CCCCCC"> real-time so</font><font color="#E5E5E5"> it's a kind</font><font color="#CCCCCC"> of heavy</font>

882
00:43:41,780 --> 00:43:45,680
eval<font color="#CCCCCC"> Grimes works the same way if you're</font>

883
00:43:43,819 --> 00:43:49,460
familiar with<font color="#E5E5E5"> that so it was using that</font>

884
00:43:45,680 --> 00:43:51,078
<font color="#E5E5E5">as a back</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> it's really cool it works</font>

885
00:43:49,460 --> 00:43:52,730
<font color="#E5E5E5">it was like the first thing</font><font color="#CCCCCC"> that you</font>

886
00:43:51,079 --> 00:43:55,700
could<font color="#E5E5E5"> just go download right now and</font>

887
00:43:52,730 --> 00:43:56,210
start<font color="#CCCCCC"> fuzzing Windows GDI in five</font>

888
00:43:55,700 --> 00:43:58,839
<font color="#E5E5E5">minutes</font>

889
00:43:56,210 --> 00:44:02,240
beautiful<font color="#CCCCCC"> the</font><font color="#E5E5E5"> biggest things that</font>

890
00:43:58,839 --> 00:44:04,130
allowed it to be<font color="#E5E5E5"> a performance is that</font>

891
00:44:02,240 --> 00:44:06,560
it<font color="#CCCCCC"> uses this persistent mode where it</font>

892
00:44:04,130 --> 00:44:08,569
doesn't exit the process so these

893
00:44:06,560 --> 00:44:10,009
loaders like pin or<font color="#E5E5E5"> dynamo Rio they have</font>

894
00:44:08,569 --> 00:44:13,190
to disassemble<font color="#E5E5E5"> your program to</font>

895
00:44:10,010 --> 00:44:15,260
instrument them<font color="#CCCCCC"> so he was able to in I</font>

896
00:44:13,190 --> 00:44:17,569
did some experimentation on trying to do

897
00:44:15,260 --> 00:44:19,520
forking<font color="#E5E5E5"> in Windows the previous talks</font>

898
00:44:17,569 --> 00:44:21,800
and<font color="#E5E5E5"> it turns out it's</font><font color="#CCCCCC"> just real pain</font><font color="#E5E5E5"> so</font>

899
00:44:19,520 --> 00:44:23,960
using persistent mode you<font color="#E5E5E5"> get things</font>

900
00:44:21,800 --> 00:44:25,520
like you<font color="#E5E5E5"> don't worry about</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> SLR because</font>

901
00:44:23,960 --> 00:44:27,680
you're not<font color="#E5E5E5"> exiting the process</font>

902
00:44:25,520 --> 00:44:28,820
and you don't have<font color="#E5E5E5"> to read and you don't</font>

903
00:44:27,680 --> 00:44:30,649
have<font color="#E5E5E5"> to read us assemble the process</font>

904
00:44:28,820 --> 00:44:33,050
<font color="#E5E5E5">every</font><font color="#CCCCCC"> time because</font><font color="#E5E5E5"> you're using that</font>

905
00:44:30,650 --> 00:44:37,790
code cache<font color="#E5E5E5"> so</font><font color="#CCCCCC"> what AFL turned out to be</font>

906
00:44:33,050 --> 00:44:39,470
<font color="#E5E5E5">pretty well</font><font color="#CCCCCC"> engineered and basically you</font>

907
00:44:37,790 --> 00:44:41,330
can<font color="#E5E5E5"> tell it how many iterations to</font>

908
00:44:39,470 --> 00:44:42,950
persist<font color="#E5E5E5"> like you know maybe do a</font>

909
00:44:41,330 --> 00:44:44,660
thousand<font color="#CCCCCC"> iterations and then</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> ahead</font>

910
00:44:42,950 --> 00:44:46,730
<font color="#CCCCCC">and exit</font><font color="#E5E5E5"> and restart the</font><font color="#CCCCCC"> process so that</font>

911
00:44:44,660 --> 00:44:48,379
<font color="#E5E5E5">we can if we have any memory leaks or</font>

912
00:44:46,730 --> 00:44:50,450
we're<font color="#E5E5E5"> not quite cleaning up properly</font>

913
00:44:48,380 --> 00:44:54,050
we<font color="#E5E5E5"> can just handle that through delaying</font>

914
00:44:50,450 --> 00:44:56,359
the restart now persistence is key

915
00:44:54,050 --> 00:44:58,640
because<font color="#E5E5E5"> every time you load this in the</font>

916
00:44:56,360 --> 00:45:01,010
<font color="#CCCCCC">DDI it's going to disassemble</font><font color="#E5E5E5"> it so if</font>

917
00:44:58,640 --> 00:45:04,400
we were to<font color="#CCCCCC"> just do</font><font color="#E5E5E5"> it every time we get</font>

918
00:45:01,010 --> 00:45:07,190
<font color="#E5E5E5">to executions a second on</font><font color="#CCCCCC"> this GDI plus</font>

919
00:45:04,400 --> 00:45:08,750
demo I'm going<font color="#E5E5E5"> to show you if we</font>

920
00:45:07,190 --> 00:45:11,120
<font color="#CCCCCC">persisted a</font><font color="#E5E5E5"> hundred</font><font color="#CCCCCC"> times before</font><font color="#E5E5E5"> we</font>

921
00:45:08,750 --> 00:45:12,890
<font color="#E5E5E5">started</font><font color="#CCCCCC"> 72 executions</font><font color="#E5E5E5"> a second and so</font><font color="#CCCCCC"> on</font>

922
00:45:11,120 --> 00:45:18,859
<font color="#CCCCCC">it reaches its ceiling somewhere around</font>

923
00:45:12,890 --> 00:45:21,200
a thousand or<font color="#CCCCCC"> so iterations so we've now</font>

924
00:45:18,860 --> 00:45:24,910
integrated our<font color="#CCCCCC"> Intel PT driver into one</font>

925
00:45:21,200 --> 00:45:27,439
<font color="#E5E5E5">AFL as an alternative tracer engine and</font>

926
00:45:24,910 --> 00:45:29,540
now this brings<font color="#CCCCCC"> some problems because</font>

927
00:45:27,440 --> 00:45:31,790
<font color="#E5E5E5">the reason I had them show you the text</font>

928
00:45:29,540 --> 00:45:34,190
version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that dump was that we don't</font>

929
00:45:31,790 --> 00:45:35,690
have all the<font color="#CCCCCC"> addresses in the log files</font>

930
00:45:34,190 --> 00:45:39,590
so we<font color="#E5E5E5"> have to recover some of those</font>

931
00:45:35,690 --> 00:45:41,210
along<font color="#CCCCCC"> the way the we don't have</font>

932
00:45:39,590 --> 00:45:42,710
persistence mode working quite yet

933
00:45:41,210 --> 00:45:44,720
<font color="#E5E5E5">unfortunately I've done some</font>

934
00:45:42,710 --> 00:45:47,210
experimentation here it's around the

935
00:45:44,720 --> 00:45:49,009
<font color="#E5E5E5">corner</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the next time we</font><font color="#CCCCCC"> presented</font><font color="#E5E5E5"> to</font>

936
00:45:47,210 --> 00:45:51,890
hack in the<font color="#CCCCCC"> Box</font><font color="#E5E5E5"> this will be available</font>

937
00:45:49,010 --> 00:45:53,540
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> building my tooling on top of Alex</font>

938
00:45:51,890 --> 00:45:56,120
<font color="#CCCCCC">and s-two is</font><font color="#E5E5E5"> great work from last year</font>

939
00:45:53,540 --> 00:45:59,980
recon<font color="#E5E5E5"> on the application verify</font><font color="#CCCCCC"> your</font>

940
00:45:56,120 --> 00:46:02,509
<font color="#CCCCCC">hooking system and so basically</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font>

941
00:45:59,980 --> 00:46:05,120
<font color="#E5E5E5">using the IP filtering mode so you</font><font color="#CCCCCC"> can</font>

942
00:46:02,510 --> 00:46:08,150
specify up to<font color="#CCCCCC"> four dll's that you want</font>

943
00:46:05,120 --> 00:46:09,500
to trace or you know four<font color="#CCCCCC"> modules or any</font>

944
00:46:08,150 --> 00:46:14,120
address ranges in your process that you

945
00:46:09,500 --> 00:46:15,980
<font color="#E5E5E5">want to trace and so on the current</font>

946
00:46:14,120 --> 00:46:17,450
status now is that we do accurately

947
00:46:15,980 --> 00:46:20,720
decode the full trace so doing

948
00:46:17,450 --> 00:46:22,069
disassembly online and using<font color="#E5E5E5"> a cache for</font>

949
00:46:20,720 --> 00:46:24,259
<font color="#CCCCCC">the control flow graph</font><font color="#E5E5E5"> that you recover</font>

950
00:46:22,070 --> 00:46:26,090
<font color="#E5E5E5">so I first</font><font color="#CCCCCC"> look to see</font><font color="#E5E5E5"> if we've already</font>

951
00:46:24,260 --> 00:46:28,130
resolved what this upcoming<font color="#E5E5E5"> conditional</font>

952
00:46:26,090 --> 00:46:30,470
branches<font color="#E5E5E5"> if so then it's a quick index</font>

953
00:46:28,130 --> 00:46:31,460
<font color="#E5E5E5">if not I have to disassemble forward to</font>

954
00:46:30,470 --> 00:46:33,470
determine the targets<font color="#E5E5E5"> for the</font>

955
00:46:31,460 --> 00:46:35,339
conditional branch and then store those

956
00:46:33,470 --> 00:46:38,529
in<font color="#CCCCCC"> a structure</font>

957
00:46:35,339 --> 00:46:40,029
the edge and source<font color="#CCCCCC"> destination are</font>

958
00:46:38,530 --> 00:46:41,800
recorded as expected<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we're not</font>

959
00:46:40,030 --> 00:46:44,950
reduced to basic blocks we actually do

960
00:46:41,800 --> 00:46:46,690
<font color="#E5E5E5">get the edges and I'm currently just</font>

961
00:46:44,950 --> 00:46:49,598
using<font color="#CCCCCC"> create process so we're doing</font><font color="#E5E5E5"> this</font>

962
00:46:46,690 --> 00:46:53,170
iteratively<font color="#E5E5E5"> rather than forking your</font>

963
00:46:49,599 --> 00:46:54,820
persistence mode yet<font color="#E5E5E5"> so in order to</font>

964
00:46:53,170 --> 00:46:56,980
determine<font color="#E5E5E5"> the performance of this</font>

965
00:46:54,820 --> 00:46:59,230
tracing mechanism I first made a dummy

966
00:46:56,980 --> 00:47:00,880
<font color="#E5E5E5">looping benchmark so basically it was</font>

967
00:46:59,230 --> 00:47:03,190
<font color="#CCCCCC">just creating the process and waiting</font>

968
00:47:00,880 --> 00:47:05,290
for<font color="#CCCCCC"> it to exit so we get our kind of</font>

969
00:47:03,190 --> 00:47:06,849
maximum bounds on how many<font color="#E5E5E5"> iterations</font>

970
00:47:05,290 --> 00:47:09,160
we'll be able to<font color="#E5E5E5"> execute with this</font>

971
00:47:06,849 --> 00:47:11,320
sample<font color="#CCCCCC"> in this case I found</font><font color="#E5E5E5"> that we</font>

972
00:47:09,160 --> 00:47:13,839
could<font color="#E5E5E5"> get 85 executions a second without</font>

973
00:47:11,320 --> 00:47:16,270
<font color="#E5E5E5">doing any tracing we're just generating</font>

974
00:47:13,839 --> 00:47:17,680
the fuzz or input and running it<font color="#CCCCCC"> without</font>

975
00:47:16,270 --> 00:47:19,480
anything<font color="#E5E5E5"> like that</font>

976
00:47:17,680 --> 00:47:21,310
<font color="#E5E5E5">we're not parsing the log file and</font><font color="#CCCCCC"> not</font>

977
00:47:19,480 --> 00:47:23,440
do anything so once we enable the

978
00:47:21,310 --> 00:47:25,299
tracing that was reduced to 72

979
00:47:23,440 --> 00:47:28,089
executions a second<font color="#E5E5E5"> which is right</font><font color="#CCCCCC"> in</font>

980
00:47:25,300 --> 00:47:29,740
that<font color="#E5E5E5"> sweet zone of 15% overhead the</font>

981
00:47:28,089 --> 00:47:34,299
<font color="#E5E5E5">Intel was promised</font><font color="#CCCCCC"> for this particular</font>

982
00:47:29,740 --> 00:47:36,970
sample so<font color="#CCCCCC"> parsing the log file was an</font>

983
00:47:34,300 --> 00:47:41,369
additional<font color="#E5E5E5"> 22 percent overhead</font><font color="#CCCCCC"> so now</font>

984
00:47:36,970 --> 00:47:44,410
we're down to<font color="#E5E5E5"> 55 executions a second and</font>

985
00:47:41,369 --> 00:47:44,829
I'll demo<font color="#E5E5E5"> what this all means for</font><font color="#CCCCCC"> you</font>

986
00:47:44,410 --> 00:47:49,390
here

987
00:47:44,829 --> 00:47:50,980
so we'll compare it<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> I'm going to</font>

988
00:47:49,390 --> 00:47:53,200
show you<font color="#E5E5E5"> so we're going to fuzz</font><font color="#CCCCCC"> gi+</font><font color="#E5E5E5"> this</font>

989
00:47:50,980 --> 00:47:55,869
is an experiment<font color="#CCCCCC"> that comes with the win</font>

990
00:47:53,200 --> 00:47:58,000
<font color="#CCCCCC">AFL out the gate you just pass it some</font>

991
00:47:55,869 --> 00:48:00,400
image files and it uses<font color="#CCCCCC"> windows to</font>

992
00:47:58,000 --> 00:48:03,339
render them<font color="#CCCCCC"> without rendering</font><font color="#E5E5E5"> to the</font>

993
00:48:00,400 --> 00:48:06,220
screen and this is<font color="#CCCCCC"> a live demo of that</font>

994
00:48:03,339 --> 00:48:08,470
working<font color="#E5E5E5"> so currently this</font><font color="#CCCCCC"> is using</font>

995
00:48:06,220 --> 00:48:10,209
<font color="#CCCCCC">dynamo reo and</font><font color="#E5E5E5"> persistence mode with the</font>

996
00:48:08,470 --> 00:48:13,839
maximum<font color="#CCCCCC"> number of iterations possible</font>

997
00:48:10,210 --> 00:48:15,819
<font color="#E5E5E5">and we see that it's getting 127</font>

998
00:48:13,839 --> 00:48:18,670
executions a second the lighting is not

999
00:48:15,819 --> 00:48:20,290
<font color="#E5E5E5">good here unfortunately</font><font color="#CCCCCC"> but hopefully</font>

1000
00:48:18,670 --> 00:48:26,280
you guys can<font color="#E5E5E5"> see that</font><font color="#CCCCCC"> a little bit I can</font>

1001
00:48:20,290 --> 00:48:26,279
increase<font color="#CCCCCC"> the font so this</font><font color="#E5E5E5"> quickly here</font>

1002
00:48:26,720 --> 00:48:31,859
so yeah<font color="#E5E5E5"> so what we're</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at here</font><font color="#CCCCCC"> is</font>

1003
00:48:29,880 --> 00:48:33,480
this number<font color="#E5E5E5"> specifically so</font><font color="#CCCCCC"> we get a</font><font color="#E5E5E5"> one</font>

1004
00:48:31,859 --> 00:48:35,848
<font color="#E5E5E5">hundred twenty six executions a second</font>

1005
00:48:33,480 --> 00:48:42,029
<font color="#E5E5E5">using</font><font color="#CCCCCC"> Dinamo Rio vs GDI so let's see how</font>

1006
00:48:35,849 --> 00:48:44,640
our Windows PC<font color="#E5E5E5"> driver performs and</font>

1007
00:48:42,029 --> 00:48:47,369
comparison<font color="#E5E5E5"> oh sorry that's me decoding</font>

1008
00:48:44,640 --> 00:48:47,900
the log here so let's redirect<font color="#E5E5E5"> that out</font>

1009
00:48:47,369 --> 00:48:51,000
to null

1010
00:48:47,900 --> 00:48:53,190
<font color="#E5E5E5">okay so we're seeing with</font><font color="#CCCCCC"> that overhead</font>

1011
00:48:51,000 --> 00:48:54,779
of<font color="#CCCCCC"> the 15 percent</font><font color="#E5E5E5"> we're tracing and then</font>

1012
00:48:53,190 --> 00:48:57,450
the additional overhead<font color="#E5E5E5"> of 22 percent</font>

1013
00:48:54,779 --> 00:48:58,829
<font color="#E5E5E5">we're decoding</font><font color="#CCCCCC"> this will creep up</font><font color="#E5E5E5"> a</font>

1014
00:48:57,450 --> 00:49:01,410
little bit but we're only<font color="#CCCCCC"> getting about</font>

1015
00:48:58,829 --> 00:49:03,359
<font color="#E5E5E5">40 40 something executions a second</font>

1016
00:49:01,410 --> 00:49:05,848
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> a little bit disappointing with</font>

1017
00:49:03,359 --> 00:49:07,140
kind of we're hoping<font color="#CCCCCC"> to see a little</font><font color="#E5E5E5"> bit</font>

1018
00:49:05,849 --> 00:49:08,730
faster<font color="#CCCCCC"> now you have to keep in mind</font>

1019
00:49:07,140 --> 00:49:10,589
again<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this is just iterative</font>

1020
00:49:08,730 --> 00:49:12,180
tracing<font color="#E5E5E5"> we're not doing in memory</font>

1021
00:49:10,589 --> 00:49:14,549
fuzzing so once we get to doing<font color="#E5E5E5"> in</font>

1022
00:49:12,180 --> 00:49:16,288
memory fuzzing this number will<font color="#E5E5E5"> increase</font>

1023
00:49:14,549 --> 00:49:19,079
significantly<font color="#E5E5E5"> however</font><font color="#CCCCCC"> this is not</font><font color="#E5E5E5"> the</font>

1024
00:49:16,289 --> 00:49:21,299
end of<font color="#E5E5E5"> the story</font><font color="#CCCCCC"> I originally was doing</font>

1025
00:49:19,079 --> 00:49:24,359
all my testing against<font color="#E5E5E5"> their</font><font color="#CCCCCC"> setup with</font>

1026
00:49:21,299 --> 00:49:26,220
the GDI<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> wrapper</font><font color="#CCCCCC"> and as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see</font>

1027
00:49:24,359 --> 00:49:28,710
in my<font color="#E5E5E5"> command line</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is tracing</font>

1028
00:49:26,220 --> 00:49:31,680
only the<font color="#E5E5E5"> windows</font><font color="#CCCCCC"> codex</font><font color="#E5E5E5"> DLL and the GDI</font>

1029
00:49:28,710 --> 00:49:34,740
<font color="#CCCCCC">plus</font><font color="#E5E5E5"> DLL in the process so I made</font>

1030
00:49:31,680 --> 00:49:36,868
<font color="#E5E5E5">another demo in order to compare the</font>

1031
00:49:34,740 --> 00:49:42,118
<font color="#CCCCCC">performance</font><font color="#E5E5E5"> and this time we'll trace</font>

1032
00:49:36,869 --> 00:49:44,519
<font color="#CCCCCC">lib PNG using window film</font><font color="#E5E5E5"> and so this is</font>

1033
00:49:42,119 --> 00:49:48,839
just<font color="#E5E5E5"> what a lip PNG statically compiled</font>

1034
00:49:44,519 --> 00:49:51,209
into a small harness that<font color="#CCCCCC"> will just load</font>

1035
00:49:48,839 --> 00:49:52,828
<font color="#E5E5E5">a PNG file</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> fuzz it and then it</font>

1036
00:49:51,210 --> 00:49:54,900
will do a<font color="#CCCCCC"> fix-up checksums</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then it</font>

1037
00:49:52,829 --> 00:49:56,130
will parse it through<font color="#CCCCCC"> Lib PNG and we see</font>

1038
00:49:54,900 --> 00:49:57,900
that<font color="#E5E5E5"> the performance becomes quite a</font>

1039
00:49:56,130 --> 00:50:01,589
business<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> dynamo</font>

1040
00:49:57,900 --> 00:50:05,130
<font color="#CCCCCC">Rio that's expected</font><font color="#E5E5E5"> but we're seeing</font>

1041
00:50:01,589 --> 00:50:07,319
only a half an X 0.5 executions<font color="#E5E5E5"> per</font>

1042
00:50:05,130 --> 00:50:09,960
second<font color="#E5E5E5"> so this is quite slow obviously</font>

1043
00:50:07,319 --> 00:50:11,670
this is<font color="#CCCCCC"> not where we</font><font color="#E5E5E5"> want to be and this</font>

1044
00:50:09,960 --> 00:50:13,769
<font color="#E5E5E5">is because since this</font><font color="#CCCCCC"> was statically</font>

1045
00:50:11,670 --> 00:50:16,049
compiled all<font color="#CCCCCC"> of the code involved</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> lib</font>

1046
00:50:13,769 --> 00:50:18,299
PNG including the encryption<font color="#E5E5E5"> or</font>

1047
00:50:16,049 --> 00:50:20,240
<font color="#E5E5E5">compression and things like that are</font>

1048
00:50:18,299 --> 00:50:23,880
included<font color="#E5E5E5"> here which causes some issues</font>

1049
00:50:20,240 --> 00:50:26,279
<font color="#E5E5E5">in</font><font color="#CCCCCC"> dynamo REO</font><font color="#E5E5E5"> back-end now here's the</font>

1050
00:50:23,880 --> 00:50:29,700
fun<font color="#CCCCCC"> part we have a constant overhead</font>

1051
00:50:26,279 --> 00:50:31,740
when we use<font color="#E5E5E5"> Intel PT so using Intel PT</font>

1052
00:50:29,700 --> 00:50:33,960
we can see that we're back up in<font color="#E5E5E5"> that</font>

1053
00:50:31,740 --> 00:50:36,180
this will creep<font color="#E5E5E5"> up to about 55 60</font>

1054
00:50:33,960 --> 00:50:37,859
executions a second so instead of being

1055
00:50:36,180 --> 00:50:38,210
only<font color="#E5E5E5"> a half an execution a second this</font>

1056
00:50:37,859 --> 00:50:40,310
is a

1057
00:50:38,210 --> 00:50:42,020
times faster than the<font color="#CCCCCC"> dynamo real</font>

1058
00:50:40,310 --> 00:50:43,849
<font color="#CCCCCC">back-end</font><font color="#E5E5E5"> and this is doing</font><font color="#CCCCCC"> a full cup of</font>

1059
00:50:42,020 --> 00:50:47,150
code<font color="#E5E5E5"> coverage tracing finding new paths</font>

1060
00:50:43,849 --> 00:50:49,300
and so on<font color="#E5E5E5"> so so with this</font><font color="#CCCCCC"> engine we've</font>

1061
00:50:47,150 --> 00:50:52,160
done<font color="#E5E5E5"> 100 times performance increase</font>

1062
00:50:49,300 --> 00:50:54,050
<font color="#E5E5E5">depending</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> your target application</font><font color="#CCCCCC"> and</font>

1063
00:50:52,160 --> 00:50:55,549
this is not specifically chosen<font color="#E5E5E5"> this was</font>

1064
00:50:54,050 --> 00:50:59,690
just randomly I had<font color="#E5E5E5"> this buzzer laying</font>

1065
00:50:55,550 --> 00:51:01,369
around<font color="#E5E5E5"> and uses the demos so yeah so</font>

1066
00:50:59,690 --> 00:51:05,280
that's<font color="#E5E5E5"> my demos for this plugged into</font>

1067
00:51:01,369 --> 00:51:05,640
one AFL thank you

1068
00:51:05,280 --> 00:51:10,930
[Music]

1069
00:51:05,640 --> 00:51:14,890
[Applause]

1070
00:51:10,930 --> 00:51:16,848
and so just<font color="#E5E5E5"> some closing remarks now</font>

1071
00:51:14,890 --> 00:51:19,430
<font color="#CCCCCC">number one</font><font color="#E5E5E5"> all the code that</font><font color="#CCCCCC"> we've</font>

1072
00:51:16,849 --> 00:51:20,119
written<font color="#E5E5E5"> is already open source or going</font>

1073
00:51:19,430 --> 00:51:22,848
to be open<font color="#E5E5E5"> source</font>

1074
00:51:20,119 --> 00:51:26,089
we're on github<font color="#CCCCCC"> slash</font><font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> PD</font><font color="#E5E5E5"> real</font>

1075
00:51:22,849 --> 00:51:28,040
simple the driver is already<font color="#E5E5E5"> there</font><font color="#CCCCCC"> I</font>

1076
00:51:26,089 --> 00:51:29,599
actually have a pull request from<font color="#E5E5E5"> Andre</font>

1077
00:51:28,040 --> 00:51:31,400
over<font color="#E5E5E5"> last night so the the latest</font>

1078
00:51:29,599 --> 00:51:34,550
version is on<font color="#E5E5E5"> github it'll be merged</font>

1079
00:51:31,400 --> 00:51:36,440
<font color="#E5E5E5">tonight</font><font color="#CCCCCC"> the win</font><font color="#E5E5E5"> AFL need a little</font>

1080
00:51:34,550 --> 00:51:39,680
<font color="#CCCCCC">cleanup I was up til</font><font color="#E5E5E5"> 3:30 last night</font>

1081
00:51:36,440 --> 00:51:41,270
<font color="#E5E5E5">making my final preparations so that</font>

1082
00:51:39,680 --> 00:51:43,430
code will be<font color="#E5E5E5"> up next week</font>

1083
00:51:41,270 --> 00:51:45,230
<font color="#E5E5E5">and then we just have a few more things</font>

1084
00:51:43,430 --> 00:51:46,640
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to</font><font color="#E5E5E5"> address</font><font color="#CCCCCC"> but obviously</font>

1085
00:51:45,230 --> 00:51:48,680
you know<font color="#CCCCCC"> we see</font><font color="#E5E5E5"> that code coverage is</font>

1086
00:51:46,640 --> 00:51:51,140
being<font color="#E5E5E5"> finally harnessed to make our</font>

1087
00:51:48,680 --> 00:51:54,140
fuzzing<font color="#E5E5E5"> better we can load this</font>

1088
00:51:51,140 --> 00:51:58,069
information into<font color="#CCCCCC"> Ida to do our</font><font color="#E5E5E5"> analysis</font>

1089
00:51:54,140 --> 00:51:59,868
<font color="#E5E5E5">of crash or of a malware or whatever it</font>

1090
00:51:58,070 --> 00:52:01,339
might be<font color="#E5E5E5"> and using the hardware support</font>

1091
00:51:59,869 --> 00:52:03,020
<font color="#CCCCCC">a tracing</font><font color="#E5E5E5"> engine we don't have any</font>

1092
00:52:01,339 --> 00:52:05,060
issues like<font color="#E5E5E5"> you would have with other</font>

1093
00:52:03,020 --> 00:52:08,270
software<font color="#E5E5E5"> based instrumentation and</font>

1094
00:52:05,060 --> 00:52:10,250
hooking engines you know once you<font color="#CCCCCC"> know</font>

1095
00:52:08,270 --> 00:52:12,259
<font color="#E5E5E5">one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our future plans is to</font><font color="#CCCCCC"> get this</font>

1096
00:52:10,250 --> 00:52:14,480
<font color="#E5E5E5">into a hypervisor so that we can trace</font>

1097
00:52:12,260 --> 00:52:16,910
<font color="#E5E5E5">the guests inside of a hypervisor</font>

1098
00:52:14,480 --> 00:52:19,580
<font color="#E5E5E5">and then your you know your malware</font>

1099
00:52:16,910 --> 00:52:21,500
tracing will be<font color="#E5E5E5"> basically you know</font>

1100
00:52:19,580 --> 00:52:26,020
unobservable and you won't be able<font color="#CCCCCC"> to</font>

1101
00:52:21,500 --> 00:52:28,849
<font color="#E5E5E5">disable it in that method there are</font>

1102
00:52:26,020 --> 00:52:31,520
capabilities<font color="#E5E5E5"> of deploying until</font><font color="#CCCCCC"> PG to</font>

1103
00:52:28,849 --> 00:52:33,619
trace<font color="#E5E5E5"> things like</font><font color="#CCCCCC"> SGX mode and SMM and</font>

1104
00:52:31,520 --> 00:52:37,580
<font color="#CCCCCC">bmm and those are</font><font color="#E5E5E5"> kind of future areas</font>

1105
00:52:33,619 --> 00:52:39,920
<font color="#CCCCCC">of</font><font color="#E5E5E5"> work and then also</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> my end goal is</font>

1106
00:52:37,580 --> 00:52:41,540
of course<font color="#E5E5E5"> to get this fully supported</font>

1107
00:52:39,920 --> 00:52:43,880
with persistent mode and everything as

1108
00:52:41,540 --> 00:52:47,300
<font color="#E5E5E5">well</font><font color="#CCCCCC"> one thing</font><font color="#E5E5E5"> that we need</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> as</font>

1109
00:52:43,880 --> 00:52:50,040
part<font color="#E5E5E5"> of that is to finish the etw base</font>

1110
00:52:47,300 --> 00:52:52,890
<font color="#E5E5E5">thread context</font><font color="#CCCCCC"> which awareness the</font>

1111
00:52:50,040 --> 00:52:55,320
we need to separate these logs out into

1112
00:52:52,890 --> 00:52:57,569
a per threat instance<font color="#E5E5E5"> otherwise you have</font>

1113
00:52:55,320 --> 00:52:59,880
<font color="#CCCCCC">to use the timing information</font><font color="#E5E5E5"> and to</font>

1114
00:52:57,570 --> 00:53:01,530
determine<font color="#E5E5E5"> where the synchronization is</font>

1115
00:52:59,880 --> 00:53:03,990
between the threads<font color="#E5E5E5"> and that slows down</font>

1116
00:53:01,530 --> 00:53:06,570
<font color="#CCCCCC">the</font><font color="#E5E5E5"> parsing a lot so our goal is to get</font>

1117
00:53:03,990 --> 00:53:07,830
the logs<font color="#E5E5E5"> individualized before you do</font>

1118
00:53:06,570 --> 00:53:09,540
your parsing and so you only<font color="#CCCCCC"> have to</font>

1119
00:53:07,830 --> 00:53:11,910
<font color="#E5E5E5">parse</font><font color="#CCCCCC"> the thread</font><font color="#E5E5E5"> that you care about</font>

1120
00:53:09,540 --> 00:53:15,990
<font color="#E5E5E5">that's doing your you know</font><font color="#CCCCCC"> your by our</font>

1121
00:53:11,910 --> 00:53:18,720
networks<font color="#E5E5E5"> IO and did you have</font><font color="#CCCCCC"> any further</font>

1122
00:53:15,990 --> 00:53:20,580
comments or<font color="#CCCCCC"> illusions</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> I wanted</font>

1123
00:53:18,720 --> 00:53:23,069
<font color="#E5E5E5">to say that the new version that we are</font>

1124
00:53:20,580 --> 00:53:25,319
<font color="#CCCCCC">going to relate I already support a save</font>

1125
00:53:23,070 --> 00:53:28,500
feature and if you download it<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

1126
00:53:25,320 --> 00:53:31,640
test it<font color="#E5E5E5"> directly and it's quite a cool</font>

1127
00:53:28,500 --> 00:53:34,530
feature and<font color="#CCCCCC"> how to Lisa</font><font color="#E5E5E5"> my my opinion</font>

1128
00:53:31,640 --> 00:53:36,960
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so you can get this code and</font><font color="#E5E5E5"> you</font>

1129
00:53:34,530 --> 00:53:45,330
<font color="#CCCCCC">can reach us on</font><font color="#E5E5E5"> Twitter and thank you</font>

1130
00:53:36,960 --> 00:53:47,610
<font color="#E5E5E5">very much hopefully I</font><font color="#CCCCCC"> think we might</font>

1131
00:53:45,330 --> 00:53:52,190
<font color="#E5E5E5">have a minute</font><font color="#CCCCCC"> for questions where it's</font>

1132
00:53:47,610 --> 00:53:52,190
<font color="#E5E5E5">just on time yes</font>

1133
00:53:58,690 --> 00:54:10,740
I think<font color="#E5E5E5"> okay you trace inside the</font>

1134
00:54:07,000 --> 00:54:13,690
virtual<font color="#E5E5E5"> machine</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> currently there are</font>

1135
00:54:10,740 --> 00:54:15,189
we there aren't any hypervisors that

1136
00:54:13,690 --> 00:54:17,590
currently expose<font color="#CCCCCC"> this and virtualize</font>

1137
00:54:15,190 --> 00:54:19,600
this<font color="#E5E5E5"> so for example and the</font><font color="#CCCCCC"> other</font>

1138
00:54:17,590 --> 00:54:21,640
hardware tracing modes<font color="#E5E5E5"> the hypervisor</font>

1139
00:54:19,600 --> 00:54:24,009
<font color="#E5E5E5">has to virtualize</font><font color="#CCCCCC"> the support for</font>

1140
00:54:21,640 --> 00:54:26,620
writing<font color="#E5E5E5"> those MSRs this does exist like</font>

1141
00:54:24,010 --> 00:54:29,680
for example<font color="#E5E5E5"> in</font><font color="#CCCCCC"> vmware using the BTS</font>

1142
00:54:26,620 --> 00:54:31,060
mechanism but<font color="#CCCCCC"> intel PT is rather new so</font>

1143
00:54:29,680 --> 00:54:32,950
there aren't<font color="#CCCCCC"> any hypervisors that are</font>

1144
00:54:31,060 --> 00:54:36,310
available yet so we are either<font color="#E5E5E5"> going to</font>

1145
00:54:32,950 --> 00:54:37,779
have<font color="#CCCCCC"> to modify then or KVM and we've</font>

1146
00:54:36,310 --> 00:54:40,000
been actually<font color="#E5E5E5"> even</font><font color="#CCCCCC"> just today talking</font>

1147
00:54:37,780 --> 00:54:42,970
<font color="#E5E5E5">about</font><font color="#CCCCCC"> perhaps being able to</font><font color="#E5E5E5"> trace the</font>

1148
00:54:40,000 --> 00:54:45,670
<font color="#E5E5E5">entirety of the hypervisor and then</font>

1149
00:54:42,970 --> 00:54:46,959
later on<font color="#CCCCCC"> pull out only the user mode</font>

1150
00:54:45,670 --> 00:54:49,780
<font color="#E5E5E5">process or kernel threads that you're</font>

1151
00:54:46,960 --> 00:54:51,130
interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> so currently no but</font>

1152
00:54:49,780 --> 00:54:54,550
<font color="#E5E5E5">absolutely we'll continue working on</font>

1153
00:54:51,130 --> 00:54:55,720
this<font color="#E5E5E5"> until we get there</font><font color="#CCCCCC"> okay yeah and</font><font color="#E5E5E5"> I</font>

1154
00:54:54,550 --> 00:55:00,220
know that that will hopefully be

1155
00:54:55,720 --> 00:55:06,100
applicable for<font color="#CCCCCC"> kuku sandbox</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> were</font>

1156
00:55:00,220 --> 00:55:07,390
there<font color="#E5E5E5"> any other</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> feel free</font>

1157
00:55:06,100 --> 00:55:09,140
to grab us thank you<font color="#E5E5E5"> very</font><font color="#CCCCCC"> much for your</font>

1158
00:55:07,390 --> 00:55:13,408
attention

1159
00:55:09,140 --> 00:55:13,408
[Applause]

