1
00:00:02,399 --> 00:00:07,200
hey everyone russ here from the reg team

2
00:00:04,880 --> 00:00:09,920
our next talk comes to us from godaddy

3
00:00:07,200 --> 00:00:12,480
security engineer john wade

4
00:00:09,920 --> 00:00:13,360
john's talk is titled linux incident

5
00:00:12,480 --> 00:00:16,320
response

6
00:00:13,360 --> 00:00:18,400
windows of opportunity after the talk

7
00:00:16,320 --> 00:00:20,400
there'll be a live q and a with john

8
00:00:18,400 --> 00:00:21,439
just click the link that'll be displayed

9
00:00:20,400 --> 00:00:23,519
at the end of the talk

10
00:00:21,439 --> 00:00:25,920
and you'll be taken to the live q a

11
00:00:23,519 --> 00:00:27,198
channel so have all your questions for

12
00:00:25,920 --> 00:00:31,840
john ready

13
00:00:27,199 --> 00:00:31,840
john over to you

14
00:00:38,800 --> 00:00:42,078
hi everybody my name is john wade thank

15
00:00:40,719 --> 00:00:42,960
you for joining me at cactus con for

16
00:00:42,079 --> 00:00:46,399
linux ir

17
00:00:42,960 --> 00:00:48,719
windows of opportunity

18
00:00:46,399 --> 00:00:49,760
a little bit about myself i work good a

19
00:00:48,719 --> 00:00:50,960
i've been there for a little bit over

20
00:00:49,760 --> 00:00:52,800
the past decade

21
00:00:50,960 --> 00:00:54,960
primarily been a blue teamer but i've

22
00:00:52,800 --> 00:00:56,320
won some other hats as well

23
00:00:54,960 --> 00:00:58,160
including threat intelligence and

24
00:00:56,320 --> 00:01:00,079
security engineering i've been lucky

25
00:00:58,160 --> 00:01:00,718
enough to be involved in a handful of

26
00:01:00,079 --> 00:01:02,559
projects

27
00:01:00,719 --> 00:01:04,640
that receive public recognition i look

28
00:01:02,559 --> 00:01:06,240
forward to continuing that streak

29
00:01:04,640 --> 00:01:07,760
outside of work i'm a big horror movie

30
00:01:06,240 --> 00:01:08,399
fan as well as a fan of artsy indie

31
00:01:07,760 --> 00:01:09,920
games

32
00:01:08,400 --> 00:01:11,840
favorite horror movie is the beholder

33
00:01:09,920 --> 00:01:13,280
slasher sleepway camp my favorite game

34
00:01:11,840 --> 00:01:14,880
of all time is shadow colossus

35
00:01:13,280 --> 00:01:17,680
though lately hades is absolutely

36
00:01:14,880 --> 00:01:20,240
consumed my life

37
00:01:17,680 --> 00:01:20,960
uh so what can we expect from this talk

38
00:01:20,240 --> 00:01:22,880
well

39
00:01:20,960 --> 00:01:24,640
initially this talk is for narcissistic

40
00:01:22,880 --> 00:01:26,000
intermediates and anybody who wants to

41
00:01:24,640 --> 00:01:27,840
get a better insight into what

42
00:01:26,000 --> 00:01:29,520
instant response on linux looks like as

43
00:01:27,840 --> 00:01:31,040
well as current open source capabilities

44
00:01:29,520 --> 00:01:32,720
that anybody can stand up within their

45
00:01:31,040 --> 00:01:34,479
own home lab

46
00:01:32,720 --> 00:01:36,400
to make this content as successful as

47
00:01:34,479 --> 00:01:37,840
possible we're going to cover simplified

48
00:01:36,400 --> 00:01:39,360
investigation methodology

49
00:01:37,840 --> 00:01:41,119
and how we can use that methodology to

50
00:01:39,360 --> 00:01:42,560
not only perform instant response

51
00:01:41,119 --> 00:01:44,799
but also ensure we're ingesting the

52
00:01:42,560 --> 00:01:46,159
right data to get the job done

53
00:01:44,799 --> 00:01:48,000
we're going to run through a scenario in

54
00:01:46,159 --> 00:01:48,560
which we work to identify what has

55
00:01:48,000 --> 00:01:51,119
occurred

56
00:01:48,560 --> 00:01:52,880
on a host what will be what will be

57
00:01:51,119 --> 00:01:54,640
covered

58
00:01:52,880 --> 00:01:56,798
how tooling differs from windows to

59
00:01:54,640 --> 00:01:59,520
linux uh the investigation

60
00:01:56,799 --> 00:02:00,560
method for dummies simplified uh we to

61
00:01:59,520 --> 00:02:03,280
break down that process

62
00:02:00,560 --> 00:02:04,960
into easily consumable chunks uh we're

63
00:02:03,280 --> 00:02:07,439
gonna identify what data you need

64
00:02:04,960 --> 00:02:09,119
to perform basic investigation when i

65
00:02:07,439 --> 00:02:10,720
briefly discussed the home lab setup

66
00:02:09,119 --> 00:02:12,800
that i created for this talk

67
00:02:10,720 --> 00:02:13,760
uh we're going to discuss what does this

68
00:02:12,800 --> 00:02:16,080
malware look like

69
00:02:13,760 --> 00:02:17,359
inside that basic home lab and how can

70
00:02:16,080 --> 00:02:19,520
basic logs and learning

71
00:02:17,360 --> 00:02:21,520
tell you that story and we're also going

72
00:02:19,520 --> 00:02:23,280
to do a short mention of why lsof is the

73
00:02:21,520 --> 00:02:26,560
best linux trios tool

74
00:02:23,280 --> 00:02:27,840
and why you should stop using it uh what

75
00:02:26,560 --> 00:02:29,120
won't be covered

76
00:02:27,840 --> 00:02:30,959
we're not going to discuss much about

77
00:02:29,120 --> 00:02:32,560
how great cisbond is

78
00:02:30,959 --> 00:02:34,959
we're not really going to go crazy in

79
00:02:32,560 --> 00:02:36,000
depth uh doing an analysis of this piece

80
00:02:34,959 --> 00:02:37,360
of malware

81
00:02:36,000 --> 00:02:39,280
we're not really going to do an in-depth

82
00:02:37,360 --> 00:02:41,040
walkthrough of responding to this as a

83
00:02:39,280 --> 00:02:43,200
full incident response

84
00:02:41,040 --> 00:02:44,799
incident this is just the initial

85
00:02:43,200 --> 00:02:46,480
investigation

86
00:02:44,800 --> 00:02:48,160
we're not going to discuss prevention in

87
00:02:46,480 --> 00:02:48,640
linux and we're actually not going to

88
00:02:48,160 --> 00:02:50,400
discuss

89
00:02:48,640 --> 00:02:52,319
the full setup of the home lab as far as

90
00:02:50,400 --> 00:02:54,080
how to do each piece here and there

91
00:02:52,319 --> 00:02:55,359
i'll include a github link later at the

92
00:02:54,080 --> 00:02:57,120
end of the talk

93
00:02:55,360 --> 00:02:58,400
with a ton of resources the slides

94
00:02:57,120 --> 00:03:00,159
everything that hopefully can at least

95
00:02:58,400 --> 00:03:04,000
get you started

96
00:03:00,159 --> 00:03:06,000
and kind of mirroring this setup

97
00:03:04,000 --> 00:03:08,080
so what's the big difference between

98
00:03:06,000 --> 00:03:10,959
instant response on linux and windows

99
00:03:08,080 --> 00:03:11,920
uh really it comes down to tooling uh

100
00:03:10,959 --> 00:03:13,519
windows sysmon

101
00:03:11,920 --> 00:03:14,958
is exceptionally hard to beat when it

102
00:03:13,519 --> 00:03:16,159
comes to gathering operating system

103
00:03:14,959 --> 00:03:18,640
level data

104
00:03:16,159 --> 00:03:19,599
audit d can come somewhat close but

105
00:03:18,640 --> 00:03:21,119
really there's a

106
00:03:19,599 --> 00:03:22,720
the more data you pull out of audit d

107
00:03:21,120 --> 00:03:25,440
and the more specific you are the more

108
00:03:22,720 --> 00:03:27,200
performance issues you have um if you're

109
00:03:25,440 --> 00:03:30,159
working with osquary for example

110
00:03:27,200 --> 00:03:32,399
uh their performance tips actually

111
00:03:30,159 --> 00:03:34,079
suggest using audi as low as possible

112
00:03:32,400 --> 00:03:35,599
filtering it more and more and more and

113
00:03:34,080 --> 00:03:36,159
depending on what kernel versions you're

114
00:03:35,599 --> 00:03:38,319
on

115
00:03:36,159 --> 00:03:39,280
uh changes what your options are for

116
00:03:38,319 --> 00:03:41,599
filtering

117
00:03:39,280 --> 00:03:43,840
um so if you're on an older centos host

118
00:03:41,599 --> 00:03:46,000
versus a newer ubuntu host there's a

119
00:03:43,840 --> 00:03:47,280
vastly different level of filtering that

120
00:03:46,000 --> 00:03:50,319
you can do there

121
00:03:47,280 --> 00:03:52,799
um powershell script logging is awesome

122
00:03:50,319 --> 00:03:54,159
on windows but on linux it's not really

123
00:03:52,799 --> 00:03:55,760
an easy replacement

124
00:03:54,159 --> 00:03:58,000
for doing bash script logging for

125
00:03:55,760 --> 00:03:59,760
example or shell or pearl or python

126
00:03:58,000 --> 00:04:01,439
any of that script logging there's not a

127
00:03:59,760 --> 00:04:03,359
good way to do that in linux

128
00:04:01,439 --> 00:04:04,879
uh managing security settings across the

129
00:04:03,360 --> 00:04:07,280
fleet of windows is super easy

130
00:04:04,879 --> 00:04:08,000
standardized with gps uh with linux

131
00:04:07,280 --> 00:04:09,840
there's

132
00:04:08,000 --> 00:04:11,360
you know you're almost spoiled by choice

133
00:04:09,840 --> 00:04:12,640
but that just means that there's

134
00:04:11,360 --> 00:04:15,200
more ways to do it there's more ways to

135
00:04:12,640 --> 00:04:16,560
screw it up there's more ways not to do

136
00:04:15,200 --> 00:04:18,719
it at all

137
00:04:16,560 --> 00:04:19,680
so the reality is it's just a bigger

138
00:04:18,720 --> 00:04:22,240
hassle uh

139
00:04:19,680 --> 00:04:23,120
it seems for a lot more people the other

140
00:04:22,240 --> 00:04:26,320
really big difference

141
00:04:23,120 --> 00:04:28,160
is the malware targets themselves the

142
00:04:26,320 --> 00:04:30,320
vast majority of links malware

143
00:04:28,160 --> 00:04:31,840
doesn't directly target the user you're

144
00:04:30,320 --> 00:04:34,479
not getting you know

145
00:04:31,840 --> 00:04:35,599
elf files in your email to download and

146
00:04:34,479 --> 00:04:37,919
click and open

147
00:04:35,600 --> 00:04:38,960
um instead the malware typically targets

148
00:04:37,919 --> 00:04:40,880
a vulnerable service

149
00:04:38,960 --> 00:04:43,440
that's exposed to the internet or what

150
00:04:40,880 --> 00:04:45,440
have you like i said windows

151
00:04:43,440 --> 00:04:47,040
the huge majority of that malware is

152
00:04:45,440 --> 00:04:47,919
actually targeted directly at the user

153
00:04:47,040 --> 00:04:49,280
it uses

154
00:04:47,919 --> 00:04:51,359
the big weak point there that they're

155
00:04:49,280 --> 00:04:53,919
going to have them execute and kick off

156
00:04:51,360 --> 00:04:53,919
that malware

157
00:04:54,800 --> 00:04:58,560
so let's get into our simplified

158
00:04:55,919 --> 00:05:01,198
investigation flow um

159
00:04:58,560 --> 00:05:02,160
luckily the investigation between linux

160
00:05:01,199 --> 00:05:04,160
and windows

161
00:05:02,160 --> 00:05:05,520
same thing same methodology nothing too

162
00:05:04,160 --> 00:05:07,680
specific um

163
00:05:05,520 --> 00:05:10,080
here there's a ton of great information

164
00:05:07,680 --> 00:05:11,680
out there from sans mandate et cetera

165
00:05:10,080 --> 00:05:13,199
um that you can reference for how to

166
00:05:11,680 --> 00:05:15,600
perform incident response

167
00:05:13,199 --> 00:05:17,600
we're just scratching the surface of one

168
00:05:15,600 --> 00:05:19,199
small section of instant response here

169
00:05:17,600 --> 00:05:20,479
uh i personally prefer to dump things

170
00:05:19,199 --> 00:05:22,800
down a bit when i'm introducing

171
00:05:20,479 --> 00:05:25,360
newcomers to investigations

172
00:05:22,800 --> 00:05:25,840
so i focus on these four main questions

173
00:05:25,360 --> 00:05:28,960
who

174
00:05:25,840 --> 00:05:30,479
what when and where um for most people

175
00:05:28,960 --> 00:05:32,880
these questions are nothing new

176
00:05:30,479 --> 00:05:33,919
um we're gonna use the relationship

177
00:05:32,880 --> 00:05:35,840
though to help you during your

178
00:05:33,919 --> 00:05:37,039
investigation to not get sidetracked

179
00:05:35,840 --> 00:05:39,919
make sure you don't miss important

180
00:05:37,039 --> 00:05:41,360
information by moving on too soon

181
00:05:39,919 --> 00:05:42,960
going forward investigation we're going

182
00:05:41,360 --> 00:05:44,800
to keep these questions in mind to help

183
00:05:42,960 --> 00:05:47,280
keep us on the right track

184
00:05:44,800 --> 00:05:50,639
for me the who pretty simple comes ip

185
00:05:47,280 --> 00:05:52,320
addresses host names usernames uids etc

186
00:05:50,639 --> 00:05:53,759
pass it down to i wouldn't say a

187
00:05:52,320 --> 00:05:56,800
specific person but

188
00:05:53,759 --> 00:05:57,440
person is is usually the best comparison

189
00:05:56,800 --> 00:05:59,840
there

190
00:05:57,440 --> 00:06:01,440
uh what what's kind of actions on intent

191
00:05:59,840 --> 00:06:04,560
uh what happened

192
00:06:01,440 --> 00:06:05,440
um when pretty straightforward that's a

193
00:06:04,560 --> 00:06:08,000
date time

194
00:06:05,440 --> 00:06:10,400
where that could be affected hosts a

195
00:06:08,000 --> 00:06:12,720
little bit different than the who

196
00:06:10,400 --> 00:06:14,159
could be geolocation information uh

197
00:06:12,720 --> 00:06:15,840
related to ip address but

198
00:06:14,160 --> 00:06:17,520
still different so that gives you more

199
00:06:15,840 --> 00:06:22,159
uh

200
00:06:17,520 --> 00:06:24,479
locational uh data per se

201
00:06:22,160 --> 00:06:25,759
and speaking of data to be able to

202
00:06:24,479 --> 00:06:27,840
perform an investigation

203
00:06:25,759 --> 00:06:29,199
you've got to have data to start with

204
00:06:27,840 --> 00:06:30,638
that's why when you start setting up any

205
00:06:29,199 --> 00:06:32,639
logging infrastructure you need to take

206
00:06:30,639 --> 00:06:34,880
a moment to think about and plan out

207
00:06:32,639 --> 00:06:35,919
what data to ingest sending everything

208
00:06:34,880 --> 00:06:37,199
in the kitchen sink

209
00:06:35,919 --> 00:06:38,880
can actually be worse than not getting

210
00:06:37,199 --> 00:06:39,919
enough data in the first place

211
00:06:38,880 --> 00:06:40,960
particularly in an enterprise

212
00:06:39,919 --> 00:06:42,799
environment

213
00:06:40,960 --> 00:06:44,638
those costs can skyrocket add up very

214
00:06:42,800 --> 00:06:46,400
quickly and cause you to actually

215
00:06:44,639 --> 00:06:48,880
not ingest what you need to in the first

216
00:06:46,400 --> 00:06:49,758
place so if we take our simple questions

217
00:06:48,880 --> 00:06:52,319
from before

218
00:06:49,759 --> 00:06:53,599
and you review your log sources and

219
00:06:52,319 --> 00:06:56,160
answer those questions you know

220
00:06:53,599 --> 00:06:57,039
do you know do your logs help you answer

221
00:06:56,160 --> 00:06:58,880
the who

222
00:06:57,039 --> 00:07:01,280
do you have logs that show whether the

223
00:06:58,880 --> 00:07:02,880
action was successful or unsuccessful

224
00:07:01,280 --> 00:07:04,638
is there enough time information in the

225
00:07:02,880 --> 00:07:06,880
event um

226
00:07:04,639 --> 00:07:07,759
so for example here we've got a nice

227
00:07:06,880 --> 00:07:10,080
apache

228
00:07:07,759 --> 00:07:10,880
log we've got the who got a timestamp so

229
00:07:10,080 --> 00:07:13,919
we've got the win

230
00:07:10,880 --> 00:07:16,080
we've got a what but more specifically

231
00:07:13,919 --> 00:07:18,400
we have a status code it tells us if it

232
00:07:16,080 --> 00:07:20,159
was successful or not successful

233
00:07:18,400 --> 00:07:21,919
uh so in this case we have that that's

234
00:07:20,160 --> 00:07:24,960
great but other things like

235
00:07:21,919 --> 00:07:26,159
application debug logs um a lot of times

236
00:07:24,960 --> 00:07:28,318
those are

237
00:07:26,160 --> 00:07:30,000
very low value they a lot of times don't

238
00:07:28,319 --> 00:07:31,280
have time stamps

239
00:07:30,000 --> 00:07:33,919
they don't necessarily have any

240
00:07:31,280 --> 00:07:36,638
information about who sometimes the even

241
00:07:33,919 --> 00:07:39,680
the what is so vague it's hard to tell

242
00:07:36,639 --> 00:07:41,360
so choose your data sources you know

243
00:07:39,680 --> 00:07:42,720
closely and keep those questions in mind

244
00:07:41,360 --> 00:07:44,560
when you're picking them

245
00:07:42,720 --> 00:07:45,840
the mind attack framework is really the

246
00:07:44,560 --> 00:07:47,039
best resource to assist you when you're

247
00:07:45,840 --> 00:07:49,758
attempting to map

248
00:07:47,039 --> 00:07:50,719
attacker techniques to a data source um

249
00:07:49,759 --> 00:07:52,960
so while the majority of

250
00:07:50,720 --> 00:07:54,560
my attack documentation and blogs are

251
00:07:52,960 --> 00:07:58,000
crazy heavily window-centric

252
00:07:54,560 --> 00:08:00,080
i think every single blog and you know

253
00:07:58,000 --> 00:08:02,000
even graphics like this one is probably

254
00:08:00,080 --> 00:08:05,039
going to reference windows event ids

255
00:08:02,000 --> 00:08:07,280
um that that's obviously a challenge but

256
00:08:05,039 --> 00:08:09,199
they do have a matrix specific for linux

257
00:08:07,280 --> 00:08:12,000
that can help you prioritize what logs

258
00:08:09,199 --> 00:08:12,720
or at least log type to ingest based on

259
00:08:12,000 --> 00:08:15,120
antique

260
00:08:12,720 --> 00:08:16,879
technique we're not going to cover much

261
00:08:15,120 --> 00:08:19,199
more about the attack framework here

262
00:08:16,879 --> 00:08:20,160
there's a ton of really great talks that

263
00:08:19,199 --> 00:08:21,520
already exist out there

264
00:08:20,160 --> 00:08:23,680
i strongly suggest when you go down this

265
00:08:21,520 --> 00:08:27,840
route check a couple of those out

266
00:08:23,680 --> 00:08:27,840
those those can help a ton

267
00:08:28,319 --> 00:08:31,759
as far as our lab environment here um

268
00:08:30,720 --> 00:08:33,519
live environment is going to be

269
00:08:31,759 --> 00:08:34,640
comprised of links host

270
00:08:33,519 --> 00:08:36,640
that we need to monitor ensure that we

271
00:08:34,640 --> 00:08:38,958
have our simplified that we can answer

272
00:08:36,640 --> 00:08:40,319
our simplified investigation questions

273
00:08:38,958 --> 00:08:42,000
here i've broken down the questions a

274
00:08:40,320 --> 00:08:44,159
bit into what type of logs

275
00:08:42,000 --> 00:08:46,320
can help us answer the questions for the

276
00:08:44,159 --> 00:08:47,519
who it's as you probably expect

277
00:08:46,320 --> 00:08:49,680
prospect execution and network

278
00:08:47,519 --> 00:08:52,399
connection logs can help us identify

279
00:08:49,680 --> 00:08:55,040
either specific usernames ip addresses

280
00:08:52,399 --> 00:08:57,360
for what file system logs uh a great way

281
00:08:55,040 --> 00:09:00,880
to show actions like file creation

282
00:08:57,360 --> 00:09:03,040
deletion uh renames etc uh when

283
00:09:00,880 --> 00:09:04,080
uh luckily uh a lot of the standardized

284
00:09:03,040 --> 00:09:06,079
logs and linux

285
00:09:04,080 --> 00:09:08,399
timestamps are everywhere uh so that

286
00:09:06,080 --> 00:09:12,320
that's pretty easy to solve for that

287
00:09:08,399 --> 00:09:13,279
um where uh can be answered by not only

288
00:09:12,320 --> 00:09:17,040
which hosts these

289
00:09:13,279 --> 00:09:18,959
logs came from but you can also

290
00:09:17,040 --> 00:09:20,319
particularly through elastic enrich a

291
00:09:18,959 --> 00:09:23,359
lot of your

292
00:09:20,320 --> 00:09:25,120
ip data with grip so you know you know

293
00:09:23,360 --> 00:09:26,399
geographically where these things may

294
00:09:25,120 --> 00:09:28,320
have occurred

295
00:09:26,399 --> 00:09:29,440
um to simplify our lives a little bit

296
00:09:28,320 --> 00:09:30,800
we're actually going to be testing out

297
00:09:29,440 --> 00:09:31,680
elastic's new elastic security

298
00:09:30,800 --> 00:09:33,599
functionality

299
00:09:31,680 --> 00:09:36,000
which they released i debated late last

300
00:09:33,600 --> 00:09:38,240
year i think it was november sometime

301
00:09:36,000 --> 00:09:39,760
um the claim there is that they have one

302
00:09:38,240 --> 00:09:41,680
essentially managed agent that can

303
00:09:39,760 --> 00:09:43,120
provide you and pull off all of these

304
00:09:41,680 --> 00:09:45,199
host level information that you need you

305
00:09:43,120 --> 00:09:45,760
don't need to manage file beat magic

306
00:09:45,200 --> 00:09:48,320
beat

307
00:09:45,760 --> 00:09:50,240
configs for each log you want to pull in

308
00:09:48,320 --> 00:09:53,519
it kind of just does that for you

309
00:09:50,240 --> 00:09:55,360
um and there's there's a ton of other

310
00:09:53,519 --> 00:09:56,800
you know blog sources we could come in

311
00:09:55,360 --> 00:09:59,200
but the the aim here

312
00:09:56,800 --> 00:10:00,319
is to you know answer those basic

313
00:09:59,200 --> 00:10:01,360
questions with this few bells and

314
00:10:00,320 --> 00:10:02,880
whistles as possible

315
00:10:01,360 --> 00:10:06,880
make this as accessible to everybody as

316
00:10:02,880 --> 00:10:06,880
possible easy to set up as possible

317
00:10:08,000 --> 00:10:11,440
so here's the very basic home lab setup

318
00:10:10,160 --> 00:10:13,519
that we've got

319
00:10:11,440 --> 00:10:14,959
we have network segmentation setup for

320
00:10:13,519 --> 00:10:17,279
malware versus monitoring

321
00:10:14,959 --> 00:10:19,680
that's going through a pf sense router

322
00:10:17,279 --> 00:10:22,720
virtual machine

323
00:10:19,680 --> 00:10:24,560
so it manages the acl's for us

324
00:10:22,720 --> 00:10:26,800
malware is only talking to what it

325
00:10:24,560 --> 00:10:29,760
absolutely has to talk to

326
00:10:26,800 --> 00:10:29,760
pretty straightforward there

327
00:10:29,920 --> 00:10:33,199
the bower hosts have like i said the

328
00:10:31,200 --> 00:10:33,920
elastic agent installed for the log

329
00:10:33,200 --> 00:10:36,160
collection

330
00:10:33,920 --> 00:10:37,199
uh we also have os query installed there

331
00:10:36,160 --> 00:10:39,199
uh in case we want to

332
00:10:37,200 --> 00:10:40,160
do any ad hoc information collection or

333
00:10:39,200 --> 00:10:41,680
things that we're not going to get from

334
00:10:40,160 --> 00:10:44,000
logs

335
00:10:41,680 --> 00:10:45,920
within elastic security itself we're

336
00:10:44,000 --> 00:10:47,040
only utilizing the default detection set

337
00:10:45,920 --> 00:10:48,560
that they provide

338
00:10:47,040 --> 00:10:50,000
we haven't created any custom or

339
00:10:48,560 --> 00:10:51,518
targeted detections or anything like

340
00:10:50,000 --> 00:10:53,360
that

341
00:10:51,519 --> 00:10:55,120
and then everything you see here is open

342
00:10:53,360 --> 00:10:58,079
source it's free

343
00:10:55,120 --> 00:10:59,279
guides are pretty easily accessible for

344
00:10:58,079 --> 00:11:00,800
the monitoring side of the house

345
00:10:59,279 --> 00:11:03,439
and we're going to use some circuits and

346
00:11:00,800 --> 00:11:06,479
zeke os query obviously over there

347
00:11:03,440 --> 00:11:09,839
um the whole thing is built on esxi

348
00:11:06,480 --> 00:11:13,120
so vmware um

349
00:11:09,839 --> 00:11:14,800
one of the biggest things people

350
00:11:13,120 --> 00:11:16,160
i guess seem to forget snapshots are

351
00:11:14,800 --> 00:11:19,279
your friend

352
00:11:16,160 --> 00:11:20,959
um take a snapshot do something did it

353
00:11:19,279 --> 00:11:23,360
work did it not work cool

354
00:11:20,959 --> 00:11:24,160
go back to your snapshot you know don't

355
00:11:23,360 --> 00:11:25,839
spend

356
00:11:24,160 --> 00:11:28,160
hours and hours reconfiguring something

357
00:11:25,839 --> 00:11:30,399
because you forgot to take the snapshot

358
00:11:28,160 --> 00:11:32,800
before you ran your malware

359
00:11:30,399 --> 00:11:34,240
i also suggest building a lab don't just

360
00:11:32,800 --> 00:11:35,839
run the script that sets everything up

361
00:11:34,240 --> 00:11:37,519
for you

362
00:11:35,839 --> 00:11:39,760
build the lab yourself at least the

363
00:11:37,519 --> 00:11:41,920
first couple times

364
00:11:39,760 --> 00:11:43,600
because learning how it works and how to

365
00:11:41,920 --> 00:11:45,519
set it up but more importantly how to

366
00:11:43,600 --> 00:11:47,279
troubleshoot issues

367
00:11:45,519 --> 00:11:49,600
you know where those logs should be

368
00:11:47,279 --> 00:11:51,680
where the configurations of items are

369
00:11:49,600 --> 00:11:53,279
gives you a ton of knowledge around how

370
00:11:51,680 --> 00:11:54,560
things work in linux how they should

371
00:11:53,279 --> 00:11:56,320
work

372
00:11:54,560 --> 00:11:58,319
what's normal what's not normal as far

373
00:11:56,320 --> 00:12:00,160
as the file system goes

374
00:11:58,320 --> 00:12:01,600
um but also more importantly it gives

375
00:12:00,160 --> 00:12:02,800
you the ability to kind of self-service

376
00:12:01,600 --> 00:12:05,040
your own playground

377
00:12:02,800 --> 00:12:05,839
uh you know new tooling comes out test

378
00:12:05,040 --> 00:12:07,279
it

379
00:12:05,839 --> 00:12:08,959
is it cool is it not cool does it have

380
00:12:07,279 --> 00:12:10,240
features you like that maybe

381
00:12:08,959 --> 00:12:12,160
you know hey if you have an enterprise

382
00:12:10,240 --> 00:12:13,839
something else suggested to them

383
00:12:12,160 --> 00:12:15,839
um that was a big reason for me playing

384
00:12:13,839 --> 00:12:17,519
with elastic here you know it came out

385
00:12:15,839 --> 00:12:18,720
november i was super excited to

386
00:12:17,519 --> 00:12:21,120
be able to turn around and use that in

387
00:12:18,720 --> 00:12:21,120
my talk

388
00:12:21,839 --> 00:12:25,360
uh so let's let's get to the main event

389
00:12:23,680 --> 00:12:26,800
right um

390
00:12:25,360 --> 00:12:28,240
we've identified what questions we're

391
00:12:26,800 --> 00:12:29,599
going to attempt to answer as well what

392
00:12:28,240 --> 00:12:30,800
data sources we're going to use to

393
00:12:29,600 --> 00:12:32,880
answer those questions

394
00:12:30,800 --> 00:12:34,399
uh so let's let's go to star show let's

395
00:12:32,880 --> 00:12:36,320
detonate a sample

396
00:12:34,399 --> 00:12:37,600
um in this case we're going to be

397
00:12:36,320 --> 00:12:38,000
detonating something from the system d

398
00:12:37,600 --> 00:12:40,160
minor

399
00:12:38,000 --> 00:12:41,680
family uh it's kind of a interesting

400
00:12:40,160 --> 00:12:43,439
family i like it a lot

401
00:12:41,680 --> 00:12:45,120
it's a bit unique in that its primary

402
00:12:43,440 --> 00:12:46,560
targets are typically

403
00:12:45,120 --> 00:12:49,200
you know vulnerable and exposed

404
00:12:46,560 --> 00:12:52,000
enterprise services goes after jenkins

405
00:12:49,200 --> 00:12:53,519
salt postgres hadoop and other

406
00:12:52,000 --> 00:12:55,200
enterprise services it's not going after

407
00:12:53,519 --> 00:12:56,560
your wordpress your joomlas it's going

408
00:12:55,200 --> 00:12:58,000
after things that

409
00:12:56,560 --> 00:12:59,599
you know in all reality shouldn't be

410
00:12:58,000 --> 00:13:00,880
hanging on the internet at all

411
00:12:59,600 --> 00:13:02,880
but clearly there's enough of it out

412
00:13:00,880 --> 00:13:05,200
there that a whole family of malware

413
00:13:02,880 --> 00:13:06,720
exists

414
00:13:05,200 --> 00:13:08,639
and on top of that it does some

415
00:13:06,720 --> 00:13:10,800
interesting things once it gets going

416
00:13:08,639 --> 00:13:11,839
um so hopefully you know that

417
00:13:10,800 --> 00:13:12,800
interesting behavior is something we're

418
00:13:11,839 --> 00:13:14,560
going to look to uncover

419
00:13:12,800 --> 00:13:17,040
with the uh data we get on the elastic

420
00:13:14,560 --> 00:13:18,719
agent um to closely match this

421
00:13:17,040 --> 00:13:20,480
real world scenario uh actually let me

422
00:13:18,720 --> 00:13:22,720
go back slide and show you you know

423
00:13:20,480 --> 00:13:23,600
my malware hosts i've installed jenkins

424
00:13:22,720 --> 00:13:25,839
i've installed

425
00:13:23,600 --> 00:13:27,519
postgres as well on there both of those

426
00:13:25,839 --> 00:13:31,279
are actually vulnerable versions

427
00:13:27,519 --> 00:13:32,320
um but otherwise it pretty much default

428
00:13:31,279 --> 00:13:33,760
config i haven't

429
00:13:32,320 --> 00:13:35,839
configuration wise i haven't tried to

430
00:13:33,760 --> 00:13:38,079
make that any more vulnerable than it is

431
00:13:35,839 --> 00:13:39,279
um so that's why you know in this kind

432
00:13:38,079 --> 00:13:40,560
of world scenario

433
00:13:39,279 --> 00:13:42,800
we'll execute our malware under the

434
00:13:40,560 --> 00:13:44,638
jenkins user

435
00:13:42,800 --> 00:13:46,079
jenkins itself has a ton of remote code

436
00:13:44,639 --> 00:13:49,040
execution vulnerabilities and

437
00:13:46,079 --> 00:13:50,880
quite a few versions so being able to

438
00:13:49,040 --> 00:13:51,120
you know execute a small bash script on

439
00:13:50,880 --> 00:13:53,199
a

440
00:13:51,120 --> 00:13:56,160
jenkins host is certainly within the

441
00:13:53,199 --> 00:13:56,160
realm of possibility

442
00:13:57,040 --> 00:14:00,160
so let's get started with some alerts um

443
00:13:58,959 --> 00:14:01,199
after executing our sample

444
00:14:00,160 --> 00:14:03,920
we'll give it a few minutes to kind of

445
00:14:01,199 --> 00:14:05,920
bake um we're not just going to

446
00:14:03,920 --> 00:14:07,040
run it and immediately stop everything

447
00:14:05,920 --> 00:14:08,240
we're going to let it sit and do its

448
00:14:07,040 --> 00:14:10,959
thing for a little bit

449
00:14:08,240 --> 00:14:11,440
um and as we can see uh we we have a

450
00:14:10,959 --> 00:14:13,839
good

451
00:14:11,440 --> 00:14:15,120
decent number of alerts here um these

452
00:14:13,839 --> 00:14:16,000
are all the default detections like i

453
00:14:15,120 --> 00:14:19,199
said um

454
00:14:16,000 --> 00:14:20,160
this detection view and cabana gives us

455
00:14:19,199 --> 00:14:21,920
a pretty

456
00:14:20,160 --> 00:14:23,920
good view of information out of the gate

457
00:14:21,920 --> 00:14:25,760
we get some who some wins somewhere

458
00:14:23,920 --> 00:14:28,959
information

459
00:14:25,760 --> 00:14:30,000
jenkins username is called out the

460
00:14:28,959 --> 00:14:32,319
jenkins

461
00:14:30,000 --> 00:14:34,000
you know jinkies zero one uh host name

462
00:14:32,320 --> 00:14:35,120
for each event so we've got kind of the

463
00:14:34,000 --> 00:14:37,920
the who and the where

464
00:14:35,120 --> 00:14:39,440
pretty quickly um we also kind of have a

465
00:14:37,920 --> 00:14:40,639
pretty basic idea of what might be

466
00:14:39,440 --> 00:14:42,240
happening

467
00:14:40,639 --> 00:14:44,000
we see some alert for proxy port

468
00:14:42,240 --> 00:14:46,720
activity um

469
00:14:44,000 --> 00:14:47,040
immediately followed by base64 uh you

470
00:14:46,720 --> 00:14:50,160
know

471
00:14:47,040 --> 00:14:51,599
encoding or decoding activity um so

472
00:14:50,160 --> 00:14:53,600
right off the bat that tells me you know

473
00:14:51,600 --> 00:14:54,800
i've got a payload that was basically c4

474
00:14:53,600 --> 00:14:55,519
encoded that got pulled down from the

475
00:14:54,800 --> 00:14:58,399
internet

476
00:14:55,519 --> 00:14:59,600
and then decoded at the very least

477
00:14:58,399 --> 00:15:00,720
obviously there could be a lot more

478
00:14:59,600 --> 00:15:03,120
going on but

479
00:15:00,720 --> 00:15:05,600
the three second view i've got something

480
00:15:03,120 --> 00:15:05,600
to start with

481
00:15:06,079 --> 00:15:09,359
so let's take a look at the some of

482
00:15:07,680 --> 00:15:10,959
these processes right so

483
00:15:09,360 --> 00:15:12,880
there's a the analyze button that kind

484
00:15:10,959 --> 00:15:14,160
of go into this view um

485
00:15:12,880 --> 00:15:16,160
so you can better see the relationship

486
00:15:14,160 --> 00:15:18,240
between processes um

487
00:15:16,160 --> 00:15:19,680
here we can see that the sus process uh

488
00:15:18,240 --> 00:15:21,839
spawned a couple of nsh

489
00:15:19,680 --> 00:15:23,040
processes which led to some further you

490
00:15:21,839 --> 00:15:25,920
know base64

491
00:15:23,040 --> 00:15:28,319
uh usage as well as two instances of the

492
00:15:25,920 --> 00:15:31,439
chatter command or change attribute

493
00:15:28,320 --> 00:15:34,720
um usually a tool which can provide you

494
00:15:31,440 --> 00:15:36,959
with this kind of bird's eye view

495
00:15:34,720 --> 00:15:38,079
can really help explain the relationship

496
00:15:36,959 --> 00:15:41,040
between the processes

497
00:15:38,079 --> 00:15:42,800
and what's actually happening versus you

498
00:15:41,040 --> 00:15:45,680
know if you're just looking at the

499
00:15:42,800 --> 00:15:47,359
wall of text following parent pids and

500
00:15:45,680 --> 00:15:49,040
pids and child processes

501
00:15:47,360 --> 00:15:50,720
it's it can be a lot harder to to

502
00:15:49,040 --> 00:15:54,880
quickly identify

503
00:15:50,720 --> 00:15:57,040
what the flow might be

504
00:15:54,880 --> 00:15:58,639
uh if we transition over into elastic's

505
00:15:57,040 --> 00:16:02,079
kind of timeline view

506
00:15:58,639 --> 00:16:03,360
here um we search for any activity

507
00:16:02,079 --> 00:16:04,239
performed by the jenkins user let's

508
00:16:03,360 --> 00:16:05,600
let's narrow it down

509
00:16:04,240 --> 00:16:08,480
let's start with just with jenkins for

510
00:16:05,600 --> 00:16:08,880
now um you can pretty quickly see

511
00:16:08,480 --> 00:16:10,320
there's

512
00:16:08,880 --> 00:16:12,079
you know even just for the 12-minute

513
00:16:10,320 --> 00:16:15,279
period that this thing was running

514
00:16:12,079 --> 00:16:17,599
um we can excuse me um

515
00:16:15,279 --> 00:16:18,959
we generate a ton of events um we can

516
00:16:17,600 --> 00:16:21,519
already identify

517
00:16:18,959 --> 00:16:22,079
uh that flow reserve in the analyzer

518
00:16:21,519 --> 00:16:23,920
view

519
00:16:22,079 --> 00:16:26,319
with the sus executable kick it off ben

520
00:16:23,920 --> 00:16:27,279
sh which then forks to perform base 64

521
00:16:26,320 --> 00:16:29,680
decoding

522
00:16:27,279 --> 00:16:31,279
um quite a handful of them here uh you

523
00:16:29,680 --> 00:16:32,479
also get the command line so you can

524
00:16:31,279 --> 00:16:34,320
actually see

525
00:16:32,480 --> 00:16:36,639
some of what might be echoed into base

526
00:16:34,320 --> 00:16:39,600
64. uh

527
00:16:36,639 --> 00:16:41,040
dash d for decode um you can also see

528
00:16:39,600 --> 00:16:43,279
you know files get created

529
00:16:41,040 --> 00:16:44,959
uh deleted you can see uh volley jenkins

530
00:16:43,279 --> 00:16:46,079
sus that's our malicious file that we

531
00:16:44,959 --> 00:16:48,638
mainly kicked off uh

532
00:16:46,079 --> 00:16:51,839
deletes itself so that's pretty

533
00:16:48,639 --> 00:16:51,839
interesting as well

534
00:16:52,880 --> 00:16:57,199
so let's do actually a quick analysis of

535
00:16:54,959 --> 00:16:59,439
the base64 decode

536
00:16:57,199 --> 00:17:00,959
i pulled it out of the the data there

537
00:16:59,440 --> 00:17:02,560
was available

538
00:17:00,959 --> 00:17:04,159
just copy and paste it into vim here so

539
00:17:02,560 --> 00:17:05,918
we can take a look at it and then

540
00:17:04,160 --> 00:17:08,400
actually i did a quick basic support

541
00:17:05,919 --> 00:17:10,400
decode on it um

542
00:17:08,400 --> 00:17:12,319
i like to take notes particularly stuff

543
00:17:10,400 --> 00:17:13,439
like this taking notes is super helpful

544
00:17:12,319 --> 00:17:16,079
always save them off

545
00:17:13,439 --> 00:17:16,079
organize them

546
00:17:16,640 --> 00:17:21,280
so the the output of that uh echoed

547
00:17:19,439 --> 00:17:24,079
string in the base64 decode

548
00:17:21,280 --> 00:17:25,359
is there at the bottom um we can clearly

549
00:17:24,079 --> 00:17:25,678
see here attacker attempting to remove

550
00:17:25,359 --> 00:17:27,359
the

551
00:17:25,679 --> 00:17:29,200
immutable bit so that's going to be the

552
00:17:27,359 --> 00:17:31,120
chatter change attribute

553
00:17:29,200 --> 00:17:32,320
dash i uh the dash is actually going to

554
00:17:31,120 --> 00:17:33,678
remove the immutable bit

555
00:17:32,320 --> 00:17:35,360
it was a plus it would have added the

556
00:17:33,679 --> 00:17:36,480
immutable bit um

557
00:17:35,360 --> 00:17:37,918
if you're not familiar with the

558
00:17:36,480 --> 00:17:38,799
immutable bit it just means you can't

559
00:17:37,919 --> 00:17:40,799
change it

560
00:17:38,799 --> 00:17:42,320
uh doesn't matter if you root doesn't

561
00:17:40,799 --> 00:17:43,039
matter what type of user permissions you

562
00:17:42,320 --> 00:17:44,879
have

563
00:17:43,039 --> 00:17:46,080
if the immutable bit is set in a file or

564
00:17:44,880 --> 00:17:48,400
directory you

565
00:17:46,080 --> 00:17:50,159
can't do anything with it you can't add

566
00:17:48,400 --> 00:17:51,760
to it nothing

567
00:17:50,160 --> 00:17:53,919
so it's pretty interesting here that our

568
00:17:51,760 --> 00:17:55,280
attackers are very specifically

569
00:17:53,919 --> 00:17:57,679
removing the mutable bit from that

570
00:17:55,280 --> 00:17:59,120
directory and then running a secondary

571
00:17:57,679 --> 00:18:00,320
command to remove the

572
00:17:59,120 --> 00:18:02,639
immutable bit from anything that might

573
00:18:00,320 --> 00:18:07,678
be inside the directory

574
00:18:02,640 --> 00:18:09,200
um let's see and then um

575
00:18:07,679 --> 00:18:11,039
actually they check to see if the file

576
00:18:09,200 --> 00:18:12,400
exists and they check to see if it does

577
00:18:11,039 --> 00:18:14,080
remove it they check to see if the

578
00:18:12,400 --> 00:18:16,160
directory exists if it doesn't

579
00:18:14,080 --> 00:18:17,840
they make it um so we already have

580
00:18:16,160 --> 00:18:19,520
actually some kind of you can almost say

581
00:18:17,840 --> 00:18:23,520
iocs here right

582
00:18:19,520 --> 00:18:25,918
that temp dot x11 unix um

583
00:18:23,520 --> 00:18:27,039
would be a good ice a good iot if you're

584
00:18:25,919 --> 00:18:30,000
not familiar with that

585
00:18:27,039 --> 00:18:30,879
path uh that's actually where the x11

586
00:18:30,000 --> 00:18:32,960
window system

587
00:18:30,880 --> 00:18:34,160
writes its socket files um so that

588
00:18:32,960 --> 00:18:36,559
directory is

589
00:18:34,160 --> 00:18:37,600
fairly common um but typically you're

590
00:18:36,559 --> 00:18:38,480
only going to find one or two of your

591
00:18:37,600 --> 00:18:40,399
files in there and that should be

592
00:18:38,480 --> 00:18:42,880
sockets you're not going to find

593
00:18:40,400 --> 00:18:43,840
you know data files or executables um in

594
00:18:42,880 --> 00:18:46,799
there that that would be

595
00:18:43,840 --> 00:18:46,799
pretty highly suspicious

596
00:18:47,440 --> 00:18:50,559
uh so if we dive further down the the

597
00:18:49,520 --> 00:18:52,160
process rabbit hole

598
00:18:50,559 --> 00:18:53,918
uh you kind of see all hell break loose

599
00:18:52,160 --> 00:18:56,240
here um there's a

600
00:18:53,919 --> 00:18:57,679
ton of ford processes so much so that

601
00:18:56,240 --> 00:18:59,679
you you can't even begin

602
00:18:57,679 --> 00:19:01,760
uh to see them all in the analyzer view

603
00:18:59,679 --> 00:19:03,280
uh this is you know like i said the

604
00:19:01,760 --> 00:19:04,960
elastic security is actually still in

605
00:19:03,280 --> 00:19:06,639
beta and this is kind of one of the

606
00:19:04,960 --> 00:19:08,799
challenges i've already run into is this

607
00:19:06,640 --> 00:19:13,200
is as far as zoomed out as you can get

608
00:19:08,799 --> 00:19:13,200
uh this is not even close

609
00:19:13,520 --> 00:19:16,879
to being able to pull this this whole

610
00:19:15,360 --> 00:19:19,199
thing into context right

611
00:19:16,880 --> 00:19:19,919
um so the analyzer here is only showing

612
00:19:19,200 --> 00:19:23,280
you know

613
00:19:19,919 --> 00:19:25,440
first whatever um number of events here

614
00:19:23,280 --> 00:19:27,039
um but even if we could zoom out further

615
00:19:25,440 --> 00:19:28,480
uh there was a further warning that

616
00:19:27,039 --> 00:19:31,120
this was only going to display the first

617
00:19:28,480 --> 00:19:33,280
215 uh process events

618
00:19:31,120 --> 00:19:34,719
um so even if we zoom out further we we

619
00:19:33,280 --> 00:19:37,039
trick it and we we

620
00:19:34,720 --> 00:19:38,720
get that feature request in we're still

621
00:19:37,039 --> 00:19:39,840
not getting all the data

622
00:19:38,720 --> 00:19:42,480
so that's something to kind of keep in

623
00:19:39,840 --> 00:19:44,799
mind as you're testing and using tools

624
00:19:42,480 --> 00:19:46,559
um you know what what are the

625
00:19:44,799 --> 00:19:47,679
limitations to display a lot of data at

626
00:19:46,559 --> 00:19:49,760
once

627
00:19:47,679 --> 00:19:52,240
or is there a better way for you to chop

628
00:19:49,760 --> 00:19:55,600
that up in the chunks

629
00:19:52,240 --> 00:19:57,200
that's just something to be aware of um

630
00:19:55,600 --> 00:19:58,159
it's also a great reason to test out

631
00:19:57,200 --> 00:20:00,400
stuff like this in your homeland

632
00:19:58,160 --> 00:20:02,000
particularly if it's open source

633
00:20:00,400 --> 00:20:04,960
find out that issue before you you

634
00:20:02,000 --> 00:20:04,960
really need to rely on

635
00:20:05,120 --> 00:20:08,320
um it kind of interesting to point out

636
00:20:06,960 --> 00:20:10,240
here you know

637
00:20:08,320 --> 00:20:11,439
the largest majority of these commands

638
00:20:10,240 --> 00:20:11,840
you're seeing these these are all kind

639
00:20:11,440 --> 00:20:13,600
of

640
00:20:11,840 --> 00:20:15,039
your generic built-in batch commands

641
00:20:13,600 --> 00:20:16,639
right cut grab

642
00:20:15,039 --> 00:20:18,720
uh there's a couple crontab references

643
00:20:16,640 --> 00:20:21,120
here graphic makes arts but

644
00:20:18,720 --> 00:20:22,480
uh for the largest part here we're not

645
00:20:21,120 --> 00:20:23,120
seeing a bunch of executables struck

646
00:20:22,480 --> 00:20:27,120
we're seeing

647
00:20:23,120 --> 00:20:27,120
you know shell scripts being run here

648
00:20:27,200 --> 00:20:30,559
um from wherever earlier timeline and

649
00:20:29,919 --> 00:20:32,000
analyzer

650
00:20:30,559 --> 00:20:33,520
reviews we saw some references to

651
00:20:32,000 --> 00:20:34,880
crontab we just saw in the last image as

652
00:20:33,520 --> 00:20:36,480
well

653
00:20:34,880 --> 00:20:38,159
in this timeline view i've specifically

654
00:20:36,480 --> 00:20:41,520
bubbled up all of the

655
00:20:38,159 --> 00:20:44,240
file related events and we can see

656
00:20:41,520 --> 00:20:45,840
early on that a new cron tab for jenkins

657
00:20:44,240 --> 00:20:48,559
user was installed

658
00:20:45,840 --> 00:20:49,760
so when you first go to modifier crontab

659
00:20:48,559 --> 00:20:51,520
we we see this

660
00:20:49,760 --> 00:20:53,360
temp file created and then we actually

661
00:20:51,520 --> 00:20:55,918
save that quantum

662
00:20:53,360 --> 00:20:56,719
installs it into varsitron crontabs for

663
00:20:55,919 --> 00:20:57,679
the user

664
00:20:56,720 --> 00:21:00,080
and that's actually where that gets

665
00:20:57,679 --> 00:21:02,000
written so we can see the creation of

666
00:21:00,080 --> 00:21:03,280
the temp file and then the rename of the

667
00:21:02,000 --> 00:21:06,240
actual jenkins file

668
00:21:03,280 --> 00:21:06,799
here um so this kind of answers one of

669
00:21:06,240 --> 00:21:09,840
our

670
00:21:06,799 --> 00:21:10,799
other questions of what right uh on

671
00:21:09,840 --> 00:21:11,678
linux and you know if you're not from

672
00:21:10,799 --> 00:21:14,400
the cron is

673
00:21:11,679 --> 00:21:15,120
your classic task schedule scheduler uh

674
00:21:14,400 --> 00:21:17,200
and much like

675
00:21:15,120 --> 00:21:18,479
it's windows counterpart is a favorite

676
00:21:17,200 --> 00:21:21,679
of attackers looking

677
00:21:18,480 --> 00:21:23,760
for means of persistence um it's one of

678
00:21:21,679 --> 00:21:25,120
the most common persistence mechanisms

679
00:21:23,760 --> 00:21:26,879
on links if not the most

680
00:21:25,120 --> 00:21:30,479
uh followed up by you know creating a

681
00:21:26,880 --> 00:21:32,000
service for example

682
00:21:30,480 --> 00:21:33,840
uh so let's take a look at that crown

683
00:21:32,000 --> 00:21:35,360
tab right to revert crown tap we're

684
00:21:33,840 --> 00:21:36,559
actually going to rely on the output of

685
00:21:35,360 --> 00:21:37,760
a os query task

686
00:21:36,559 --> 00:21:39,120
so one of the few things you can do with

687
00:21:37,760 --> 00:21:39,840
those queries you can kind of set a

688
00:21:39,120 --> 00:21:42,559
series of

689
00:21:39,840 --> 00:21:44,080
questions to interrogate your system um

690
00:21:42,559 --> 00:21:46,240
and then have that output

691
00:21:44,080 --> 00:21:47,280
push to your file and ingest that into

692
00:21:46,240 --> 00:21:48,400
elastic right

693
00:21:47,280 --> 00:21:51,039
uh so in this case that's what we've

694
00:21:48,400 --> 00:21:52,640
done here uh on the schedule we say hey

695
00:21:51,039 --> 00:21:54,320
what's the the cron tab for every user

696
00:21:52,640 --> 00:21:56,960
let's dump out the entirety of

697
00:21:54,320 --> 00:21:58,639
what it is and we'll ingest it on a

698
00:21:56,960 --> 00:22:00,400
schedule so

699
00:21:58,640 --> 00:22:02,080
this is the the crown tab that actually

700
00:22:00,400 --> 00:22:05,039
got created

701
00:22:02,080 --> 00:22:06,879
for our jenkins user we can see it's

702
00:22:05,039 --> 00:22:09,200
going to run you know

703
00:22:06,880 --> 00:22:10,640
every every day the month every it's

704
00:22:09,200 --> 00:22:14,159
going to run constantly

705
00:22:10,640 --> 00:22:17,039
on the 20th minute of every hour right

706
00:22:14,159 --> 00:22:17,520
uh and it's going to run a shell script

707
00:22:17,039 --> 00:22:19,280
uh

708
00:22:17,520 --> 00:22:20,879
if it has any output it's all going to

709
00:22:19,280 --> 00:22:23,120
devnull uh it's running in the

710
00:22:20,880 --> 00:22:25,679
background

711
00:22:23,120 --> 00:22:26,959
um so it's it's a it's a pretty kind of

712
00:22:25,679 --> 00:22:28,559
pretty interesting thing but uh

713
00:22:26,960 --> 00:22:30,559
super super common for persistence

714
00:22:28,559 --> 00:22:34,639
particularly cron that another shell

715
00:22:30,559 --> 00:22:34,639
script is written off and utilized

716
00:22:36,400 --> 00:22:40,080
so like before let's let's dig in a

717
00:22:38,480 --> 00:22:41,679
little bit uh let's do some quick

718
00:22:40,080 --> 00:22:44,240
analysis on this shell script

719
00:22:41,679 --> 00:22:45,120
um what what's what's it trying to do

720
00:22:44,240 --> 00:22:47,840
here

721
00:22:45,120 --> 00:22:49,918
um so just like before the the top half

722
00:22:47,840 --> 00:22:52,959
here is what was actually in that

723
00:22:49,919 --> 00:22:55,200
dot unhdb.sh and then the bottom half

724
00:22:52,960 --> 00:22:56,799
is actually just the the decoded base

725
00:22:55,200 --> 00:22:58,960
64.

726
00:22:56,799 --> 00:23:00,080
um right out of the gate we can see our

727
00:22:58,960 --> 00:23:02,240
attacker is setting up

728
00:23:00,080 --> 00:23:04,320
um some variables and functions to use

729
00:23:02,240 --> 00:23:05,120
later uh we're not going to dig super

730
00:23:04,320 --> 00:23:07,918
deep

731
00:23:05,120 --> 00:23:09,360
here but the key takeaways should be

732
00:23:07,919 --> 00:23:11,760
that you can kind of identify

733
00:23:09,360 --> 00:23:12,639
some of the functionality here right um

734
00:23:11,760 --> 00:23:15,520
attackers

735
00:23:12,640 --> 00:23:17,039
specifically using dns over https uh to

736
00:23:15,520 --> 00:23:19,760
resort to resolve uh

737
00:23:17,039 --> 00:23:21,600
torsox proxies um they're writing the

738
00:23:19,760 --> 00:23:23,280
word exit to a file named i

739
00:23:21,600 --> 00:23:25,360
and then executing that and removing

740
00:23:23,280 --> 00:23:26,720
that that's kind of weird but you have a

741
00:23:25,360 --> 00:23:29,678
very specific file name

742
00:23:26,720 --> 00:23:30,159
that we can maybe look at later um and

743
00:23:29,679 --> 00:23:32,159
then

744
00:23:30,159 --> 00:23:33,679
using that torus locks proxy that they

745
00:23:32,159 --> 00:23:35,200
identified previously

746
00:23:33,679 --> 00:23:38,640
they're going to download and execute

747
00:23:35,200 --> 00:23:40,960
something that has a very specifically

748
00:23:38,640 --> 00:23:41,919
specific file name uh the file name is

749
00:23:40,960 --> 00:23:45,360
actually derived

750
00:23:41,919 --> 00:23:47,600
from the md5 sum of the current date

751
00:23:45,360 --> 00:23:50,000
um so that's going to give us a pretty

752
00:23:47,600 --> 00:23:53,120
unique and long file name

753
00:23:50,000 --> 00:23:54,799
um so all the file names here um we've

754
00:23:53,120 --> 00:23:55,360
actually already seen in our timeline

755
00:23:54,799 --> 00:23:57,279
view

756
00:23:55,360 --> 00:23:59,600
in some previous slides specifically

757
00:23:57,279 --> 00:24:01,120
that i file we saw already

758
00:23:59,600 --> 00:24:03,439
definitely already saw references to

759
00:24:01,120 --> 00:24:05,918
temp doc x11 unix

760
00:24:03,440 --> 00:24:07,120
um this kind of leads us into yet

761
00:24:05,919 --> 00:24:10,720
another question

762
00:24:07,120 --> 00:24:11,760
what exactly is that further file that

763
00:24:10,720 --> 00:24:13,520
executable file is going to get

764
00:24:11,760 --> 00:24:16,240
downloaded and run

765
00:24:13,520 --> 00:24:17,360
what's it doing so let's uh let's go

766
00:24:16,240 --> 00:24:18,000
back let's go back and see if we can

767
00:24:17,360 --> 00:24:21,760
figure out what's going

768
00:24:18,000 --> 00:24:22,720
on there uh so luckily with their naming

769
00:24:21,760 --> 00:24:26,080
scheme it's

770
00:24:22,720 --> 00:24:29,679
not too difficult to find a

771
00:24:26,080 --> 00:24:32,559
file name that's 35 characters

772
00:24:29,679 --> 00:24:32,960
not not super common for those to exist

773
00:24:32,559 --> 00:24:35,120
in

774
00:24:32,960 --> 00:24:36,799
uh home directories for other users uh

775
00:24:35,120 --> 00:24:38,959
chicken some directory by the way if you

776
00:24:36,799 --> 00:24:40,080
if you didn't know is is var l jenkins

777
00:24:38,960 --> 00:24:43,200
um

778
00:24:40,080 --> 00:24:44,639
if you that's another piece of os query

779
00:24:43,200 --> 00:24:45,120
if you wanted you could set up the task

780
00:24:44,640 --> 00:24:49,360
to

781
00:24:45,120 --> 00:24:51,279
pull that out but okay okay we can find

782
00:24:49,360 --> 00:24:52,559
that pretty pretty easily here

783
00:24:51,279 --> 00:24:54,559
checking the analyzer view for the

784
00:24:52,559 --> 00:24:55,520
process we can actually see that after

785
00:24:54,559 --> 00:24:58,559
executing itself

786
00:24:55,520 --> 00:24:59,679
immediately deletes itself and creates a

787
00:24:58,559 --> 00:25:01,039
file that

788
00:24:59,679 --> 00:25:03,200
you know in a directory we're now pretty

789
00:25:01,039 --> 00:25:06,640
familiar with that temp dot x11 unix

790
00:25:03,200 --> 00:25:08,480
it actually creates a file named 22. um

791
00:25:06,640 --> 00:25:09,760
let's kind of continue down this what

792
00:25:08,480 --> 00:25:11,520
train of thinking to see if we can

793
00:25:09,760 --> 00:25:15,840
determine the purpose

794
00:25:11,520 --> 00:25:15,840
of this you know executable

795
00:25:16,960 --> 00:25:21,039
so with our next our network connection

796
00:25:19,760 --> 00:25:22,720
logs i mean these are all logs that are

797
00:25:21,039 --> 00:25:25,039
coming directly off that elastic agent

798
00:25:22,720 --> 00:25:26,559
so far this is nothing you know this

799
00:25:25,039 --> 00:25:28,320
isn't a tap it's not like it's directly

800
00:25:26,559 --> 00:25:29,760
off the agent um

801
00:25:28,320 --> 00:25:31,760
it's pretty easy to see some some

802
00:25:29,760 --> 00:25:33,600
scanning activity going on here so we've

803
00:25:31,760 --> 00:25:36,799
got our process executable there in the

804
00:25:33,600 --> 00:25:38,320
second column and uh we're scanning

805
00:25:36,799 --> 00:25:40,480
we're trying to connect to something

806
00:25:38,320 --> 00:25:40,879
we're disconnecting so not only these

807
00:25:40,480 --> 00:25:44,880
all

808
00:25:40,880 --> 00:25:44,880
actually you know live hosts

809
00:25:45,279 --> 00:25:48,960
but we're hitting the exact same port

810
00:25:47,760 --> 00:25:49,520
and every single one of them and we're

811
00:25:48,960 --> 00:25:52,640
doing it

812
00:25:49,520 --> 00:25:54,158
pretty pretty quick there almost that

813
00:25:52,640 --> 00:25:57,840
entire

814
00:25:54,159 --> 00:26:01,600
table uh is within the same second

815
00:25:57,840 --> 00:26:05,279
um if you're if you're not aware uh port

816
00:26:01,600 --> 00:26:07,678
5432 that's postgres um

817
00:26:05,279 --> 00:26:09,520
this this malware family uh very well

818
00:26:07,679 --> 00:26:12,559
known for scanning

819
00:26:09,520 --> 00:26:15,200
that's how it moves laterally

820
00:26:12,559 --> 00:26:16,158
but also how it finds new victims on the

821
00:26:15,200 --> 00:26:18,159
internet

822
00:26:16,159 --> 00:26:20,159
so it's actually going to scan the local

823
00:26:18,159 --> 00:26:22,799
subnets first and then continue on into

824
00:26:20,159 --> 00:26:25,360
the internet itself

825
00:26:22,799 --> 00:26:27,679
in this case um you know i did set up

826
00:26:25,360 --> 00:26:30,479
that vulnerable postgres machine

827
00:26:27,679 --> 00:26:31,840
uh surprisingly the defaults are not

828
00:26:30,480 --> 00:26:34,880
vulnerable enough

829
00:26:31,840 --> 00:26:36,320
uh wasn't listening uh

830
00:26:34,880 --> 00:26:37,919
for every single ip address was only

831
00:26:36,320 --> 00:26:39,120
listing a localhost so we didn't get to

832
00:26:37,919 --> 00:26:41,679
move loudly there

833
00:26:39,120 --> 00:26:42,320
kind of a bummer um but does go to show

834
00:26:41,679 --> 00:26:44,640
that

835
00:26:42,320 --> 00:26:45,439
a lot of these vulnerabilities that take

836
00:26:44,640 --> 00:26:47,520
advantage of

837
00:26:45,440 --> 00:26:49,520
you know multiple setups like that a lot

838
00:26:47,520 --> 00:26:51,039
of somebody's almost gone out of the way

839
00:26:49,520 --> 00:26:53,279
to make that thing more vulnerable

840
00:26:51,039 --> 00:26:54,158
that's not a bad default config that's

841
00:26:53,279 --> 00:26:57,919
that's somebody

842
00:26:54,159 --> 00:27:00,080
you know going out of the way um

843
00:26:57,919 --> 00:27:01,520
if if we had seen this move loudly to

844
00:27:00,080 --> 00:27:03,600
that postgres host

845
00:27:01,520 --> 00:27:05,120
uh what we would have seen was largely

846
00:27:03,600 --> 00:27:06,799
almost the exact same behavior on that

847
00:27:05,120 --> 00:27:08,639
other host

848
00:27:06,799 --> 00:27:10,080
but let's take out this this noisy

849
00:27:08,640 --> 00:27:12,159
scanning activity

850
00:27:10,080 --> 00:27:13,439
and see what other network connections

851
00:27:12,159 --> 00:27:17,279
network activity

852
00:27:13,440 --> 00:27:17,279
we might build reserve to observe

853
00:27:17,520 --> 00:27:21,360
without the noisy scanning it's pretty

854
00:27:19,279 --> 00:27:24,240
clear to see we've got a bit of you know

855
00:27:21,360 --> 00:27:25,199
curl activity that's uh to both regular

856
00:27:24,240 --> 00:27:27,039
web resources

857
00:27:25,200 --> 00:27:28,799
as well as the stocks proxies that we

858
00:27:27,039 --> 00:27:31,919
you know mentioned earlier

859
00:27:28,799 --> 00:27:33,520
um the last entries here are actually

860
00:27:31,919 --> 00:27:36,120
you know kind of yet another unique

861
00:27:33,520 --> 00:27:40,000
executable we can see the the file name

862
00:27:36,120 --> 00:27:41,760
c8d9 you know whatever same sort of uh

863
00:27:40,000 --> 00:27:43,039
idea looks like it's going to be a 35

864
00:27:41,760 --> 00:27:46,559
character kind of an md5

865
00:27:43,039 --> 00:27:46,960
scenario um but now we have another

866
00:27:46,559 --> 00:27:50,720
question

867
00:27:46,960 --> 00:27:53,039
uh what's that doing um so let's

868
00:27:50,720 --> 00:27:54,399
you know we have some more logs seen

869
00:27:53,039 --> 00:27:55,840
like i mentioned earlier we got some

870
00:27:54,399 --> 00:27:57,199
zeke we got some circada we have some

871
00:27:55,840 --> 00:27:58,080
additional network logs we can we can

872
00:27:57,200 --> 00:28:00,470
poke at

873
00:27:58,080 --> 00:28:01,840
um so let's let's look at those

874
00:28:00,470 --> 00:28:03,120
[Music]

875
00:28:01,840 --> 00:28:05,600
and see if we can determine if there's

876
00:28:03,120 --> 00:28:08,158
anything more specific uh that will help

877
00:28:05,600 --> 00:28:08,158
us out here

878
00:28:08,960 --> 00:28:14,000
um so these are circadia logs uh

879
00:28:12,080 --> 00:28:17,199
elastic and circada definitely had a

880
00:28:14,000 --> 00:28:18,320
fight uh for me i refuse to ingest them

881
00:28:17,200 --> 00:28:19,760
so we're going to cheat a little bit

882
00:28:18,320 --> 00:28:20,639
this is just directly out of fast dot

883
00:28:19,760 --> 00:28:22,158
log that's just

884
00:28:20,640 --> 00:28:23,679
the text file log that ceracotta will

885
00:28:22,159 --> 00:28:27,120
spit out at you

886
00:28:23,679 --> 00:28:29,600
um this is the standard

887
00:28:27,120 --> 00:28:30,639
uh emerging types open rule set it's a

888
00:28:29,600 --> 00:28:33,439
pretty good rule says a

889
00:28:30,640 --> 00:28:34,480
ton of rules it's like 28 000 um so just

890
00:28:33,440 --> 00:28:35,600
kind of be aware of

891
00:28:34,480 --> 00:28:37,440
there might be a little tuning involved

892
00:28:35,600 --> 00:28:38,399
depending on what you're running on your

893
00:28:37,440 --> 00:28:41,279
network

894
00:28:38,399 --> 00:28:42,799
um but you can pretty clearly see here

895
00:28:41,279 --> 00:28:46,640
hey we've got curl

896
00:28:42,799 --> 00:28:48,559
socks proxy uh identified that uh an elf

897
00:28:46,640 --> 00:28:49,760
uh was downloaded which is alpha is just

898
00:28:48,559 --> 00:28:52,320
the uh

899
00:28:49,760 --> 00:28:53,520
you know links executable file format uh

900
00:28:52,320 --> 00:28:55,120
more stocks proxy

901
00:28:53,520 --> 00:28:57,120
and then actually finally at the end we

902
00:28:55,120 --> 00:28:59,279
see cryptocurrency minor check-in

903
00:28:57,120 --> 00:29:00,239
and if you uh you know backtrack you can

904
00:28:59,279 --> 00:29:04,960
see that's

905
00:29:00,240 --> 00:29:07,360
i said cmip that 136 243 90 99

906
00:29:04,960 --> 00:29:09,360
cmp so we did finally end there with the

907
00:29:07,360 --> 00:29:11,600
the cryptocurrency miner

908
00:29:09,360 --> 00:29:13,120
um in a perfect world you know like i

909
00:29:11,600 --> 00:29:14,799
mentioned

910
00:29:13,120 --> 00:29:16,320
elk was a you know elastic wasn't really

911
00:29:14,799 --> 00:29:17,918
having me in just these

912
00:29:16,320 --> 00:29:20,240
they were fighting today but in a

913
00:29:17,919 --> 00:29:23,760
perfect world were these ingested

914
00:29:20,240 --> 00:29:25,520
they would have displayed alongside the

915
00:29:23,760 --> 00:29:27,039
host space alerts right there in the

916
00:29:25,520 --> 00:29:28,720
elastic security section

917
00:29:27,039 --> 00:29:30,480
uh that's how that is designed so

918
00:29:28,720 --> 00:29:31,840
hopefully in the future um

919
00:29:30,480 --> 00:29:33,360
you know like i said it's beta those

920
00:29:31,840 --> 00:29:34,158
things work a little bit easier out of

921
00:29:33,360 --> 00:29:36,320
the box

922
00:29:34,159 --> 00:29:37,200
uh whether it's you know the the agent

923
00:29:36,320 --> 00:29:39,200
or file beat

924
00:29:37,200 --> 00:29:41,840
or whatever uh that that just ships and

925
00:29:39,200 --> 00:29:41,840
works

926
00:29:42,320 --> 00:29:46,559
um so let's let's take a moment let's

927
00:29:45,039 --> 00:29:47,760
kind of recap what we've learned we

928
00:29:46,559 --> 00:29:49,678
you know we definitely rushed through

929
00:29:47,760 --> 00:29:51,600
that quickly right you know normally

930
00:29:49,679 --> 00:29:53,679
you're not going to do an investigation

931
00:29:51,600 --> 00:29:55,760
uh in something like 30 minutes you're

932
00:29:53,679 --> 00:29:58,880
gonna you're gonna spend a lot more time

933
00:29:55,760 --> 00:30:01,200
um but for the very very

934
00:29:58,880 --> 00:30:01,919
basics of answering our questions right

935
00:30:01,200 --> 00:30:04,240
our super

936
00:30:01,919 --> 00:30:05,440
super simplified questions the who what

937
00:30:04,240 --> 00:30:07,840
when where

938
00:30:05,440 --> 00:30:10,559
uh who we we've had a jenkins user we've

939
00:30:07,840 --> 00:30:13,120
got that jenkins 01 host name

940
00:30:10,559 --> 00:30:14,080
um you know what what did we observe we

941
00:30:13,120 --> 00:30:17,120
observed that sus

942
00:30:14,080 --> 00:30:18,240
the initial sus executable a handful of

943
00:30:17,120 --> 00:30:20,639
shell scripts

944
00:30:18,240 --> 00:30:22,640
i got a crontab configured with two

945
00:30:20,640 --> 00:30:25,520
uniquely named executables

946
00:30:22,640 --> 00:30:27,360
uh we had scanning activity we had

947
00:30:25,520 --> 00:30:30,639
crypto mining activity

948
00:30:27,360 --> 00:30:32,399
um when the time stamps for all of our

949
00:30:30,640 --> 00:30:32,799
logging shows is this when this activity

950
00:30:32,399 --> 00:30:35,840
started

951
00:30:32,799 --> 00:30:37,520
first alert started at 1724 we actually

952
00:30:35,840 --> 00:30:41,600
continued to get alerts

953
00:30:37,520 --> 00:30:43,840
for another six minutes um and had we

954
00:30:41,600 --> 00:30:45,120
you know allowed this to run even longer

955
00:30:43,840 --> 00:30:48,720
once that cron tab hit

956
00:30:45,120 --> 00:30:48,719
we've all started right back up again

957
00:30:49,279 --> 00:30:53,120
luckily in this case the where well

958
00:30:50,960 --> 00:30:54,799
limited to just our jenkins one host

959
00:30:53,120 --> 00:30:57,120
um like i said we we didn't actually

960
00:30:54,799 --> 00:30:59,840
move loudly to the the postgres host

961
00:30:57,120 --> 00:31:01,678
we were lucky in that case um but very

962
00:30:59,840 --> 00:31:04,959
easily could have

963
00:31:01,679 --> 00:31:06,240
um as far as some of the other

964
00:31:04,960 --> 00:31:07,440
interesting things that we saw not

965
00:31:06,240 --> 00:31:09,120
necessarily related to the

966
00:31:07,440 --> 00:31:11,360
questions there you know all those shell

967
00:31:09,120 --> 00:31:12,639
scripts were spawning a lot of children

968
00:31:11,360 --> 00:31:14,479
uh and that's actually one of the

969
00:31:12,640 --> 00:31:15,360
challenges that we you know kind of

970
00:31:14,480 --> 00:31:16,640
observed here

971
00:31:15,360 --> 00:31:19,120
because we don't have script-based

972
00:31:16,640 --> 00:31:19,840
logging is if you're viewing this from

973
00:31:19,120 --> 00:31:22,000
the

974
00:31:19,840 --> 00:31:23,279
operating system level you don't always

975
00:31:22,000 --> 00:31:23,840
have the context that those are all

976
00:31:23,279 --> 00:31:26,399
related

977
00:31:23,840 --> 00:31:27,678
in one shell script right so that's

978
00:31:26,399 --> 00:31:29,918
that's definitely a challenge

979
00:31:27,679 --> 00:31:32,159
particularly for linux

980
00:31:29,919 --> 00:31:33,519
ton of base 60 40 coding but that

981
00:31:32,159 --> 00:31:34,559
actually was a pretty good indicator for

982
00:31:33,519 --> 00:31:37,279
us that

983
00:31:34,559 --> 00:31:38,720
um our attacker had a payload that they

984
00:31:37,279 --> 00:31:40,720
were pulling down somewhere and

985
00:31:38,720 --> 00:31:42,480
and decoding wasn't just you know one

986
00:31:40,720 --> 00:31:43,679
executable and ran and that was it there

987
00:31:42,480 --> 00:31:45,360
was a lot of actually

988
00:31:43,679 --> 00:31:47,919
pulling down additional payloads or

989
00:31:45,360 --> 00:31:49,120
modules um like i said crontab set up

990
00:31:47,919 --> 00:31:52,480
for persistence

991
00:31:49,120 --> 00:31:53,760
um i would say i don't think i've ever

992
00:31:52,480 --> 00:31:55,679
really seen

993
00:31:53,760 --> 00:31:57,600
an incident or attack where there really

994
00:31:55,679 --> 00:31:58,720
is no persistence

995
00:31:57,600 --> 00:32:01,199
so that's something that i would

996
00:31:58,720 --> 00:32:02,880
strongly suggest if you're getting stuck

997
00:32:01,200 --> 00:32:04,720
if you don't know what's happening

998
00:32:02,880 --> 00:32:06,799
there's a piece of puzzle you're missing

999
00:32:04,720 --> 00:32:08,720
make sure you found your persistence uh

1000
00:32:06,799 --> 00:32:10,639
it's it's going to be there

1001
00:32:08,720 --> 00:32:11,760
um like i said we had an executable drop

1002
00:32:10,640 --> 00:32:13,440
for scanning that one

1003
00:32:11,760 --> 00:32:15,519
specifically was actually scanning for

1004
00:32:13,440 --> 00:32:18,159
the postgres

1005
00:32:15,519 --> 00:32:19,279
this family like i mentioned earlier can

1006
00:32:18,159 --> 00:32:19,679
scan for a lot of different things

1007
00:32:19,279 --> 00:32:21,600
though

1008
00:32:19,679 --> 00:32:22,799
scan for vulnerable jenkins scan for

1009
00:32:21,600 --> 00:32:26,480
phone basalt

1010
00:32:22,799 --> 00:32:27,600
hadoop a lot of other enterprise things

1011
00:32:26,480 --> 00:32:29,200
we kind of got lucky that it was

1012
00:32:27,600 --> 00:32:30,320
scanning for postgresql that's what i

1013
00:32:29,200 --> 00:32:31,679
set up but

1014
00:32:30,320 --> 00:32:33,760
it could have scanned for a handful of

1015
00:32:31,679 --> 00:32:35,679
things as well uh then we saw the the

1016
00:32:33,760 --> 00:32:38,480
actual pool dropped

1017
00:32:35,679 --> 00:32:38,480
for crypto mining

1018
00:32:40,000 --> 00:32:44,399
so i kind of promised you earlier um i

1019
00:32:42,799 --> 00:32:45,440
tell you a little bit about lsrf and why

1020
00:32:44,399 --> 00:32:47,120
it's my favorite links command and

1021
00:32:45,440 --> 00:32:49,919
pretty much the the only one you need

1022
00:32:47,120 --> 00:32:51,120
to do initial links yeah triage uh on an

1023
00:32:49,919 --> 00:32:52,799
older uh

1024
00:32:51,120 --> 00:32:54,320
system not old but just on any system

1025
00:32:52,799 --> 00:32:56,399
really um but

1026
00:32:54,320 --> 00:32:58,399
it represents an older and really a less

1027
00:32:56,399 --> 00:33:00,799
secure way of performing

1028
00:32:58,399 --> 00:33:01,840
any any sort of investigation right uh

1029
00:33:00,799 --> 00:33:03,440
ultimately

1030
00:33:01,840 --> 00:33:06,240
you you shouldn't be getting outside on

1031
00:33:03,440 --> 00:33:09,200
a house directly to do anything

1032
00:33:06,240 --> 00:33:10,240
um but elsewhere off still my favorite

1033
00:33:09,200 --> 00:33:12,960
tool of all time

1034
00:33:10,240 --> 00:33:14,480
um it can tell you you know it tells you

1035
00:33:12,960 --> 00:33:17,039
all open files and links

1036
00:33:14,480 --> 00:33:18,320
links everything's a file so it really

1037
00:33:17,039 --> 00:33:19,760
tells you everything

1038
00:33:18,320 --> 00:33:22,639
uh you can look at every process that's

1039
00:33:19,760 --> 00:33:24,640
run by a user you can look at every

1040
00:33:22,640 --> 00:33:26,559
connection that's opened by a user or

1041
00:33:24,640 --> 00:33:29,600
every socket that's opened by a user

1042
00:33:26,559 --> 00:33:30,720
you can filter um you know out by user

1043
00:33:29,600 --> 00:33:32,399
by command

1044
00:33:30,720 --> 00:33:33,840
you can have it output just the pids so

1045
00:33:32,399 --> 00:33:37,518
you can just push it into kill

1046
00:33:33,840 --> 00:33:41,039
super easy love it to death it replaces

1047
00:33:37,519 --> 00:33:42,480
ps netstat uh all the other things that

1048
00:33:41,039 --> 00:33:43,519
attackers love to replace when they get

1049
00:33:42,480 --> 00:33:45,360
on your box

1050
00:33:43,519 --> 00:33:46,799
uh attackers always forget about srf

1051
00:33:45,360 --> 00:33:49,199
always sleeping on it

1052
00:33:46,799 --> 00:33:50,080
um so usually it's a it's a great tool

1053
00:33:49,200 --> 00:33:51,760
but like i said

1054
00:33:50,080 --> 00:33:53,678
stop it don't get out of the host to run

1055
00:33:51,760 --> 00:33:57,279
your commands you shouldn't do it

1056
00:33:53,679 --> 00:33:58,720
move on uh consider using any other edr

1057
00:33:57,279 --> 00:34:01,120
command execution tool

1058
00:33:58,720 --> 00:34:02,480
uh velociraptor is a great open source

1059
00:34:01,120 --> 00:34:04,239
kind of edr tool

1060
00:34:02,480 --> 00:34:05,760
similar to os query it has its own query

1061
00:34:04,240 --> 00:34:06,640
language that you can gather data from

1062
00:34:05,760 --> 00:34:10,079
endpoints

1063
00:34:06,640 --> 00:34:11,760
um alternatively you know yeah

1064
00:34:10,079 --> 00:34:13,760
for quick and dirty command execution on

1065
00:34:11,760 --> 00:34:14,480
a host salt and ansible are both great

1066
00:34:13,760 --> 00:34:15,599
options

1067
00:34:14,480 --> 00:34:17,280
particularly if you're already using

1068
00:34:15,599 --> 00:34:18,159
them for your configuration management

1069
00:34:17,280 --> 00:34:21,200
on linux

1070
00:34:18,159 --> 00:34:21,679
you're doing that right um you can

1071
00:34:21,199 --> 00:34:23,199
either

1072
00:34:21,679 --> 00:34:24,639
run one-off commands or you can create

1073
00:34:23,199 --> 00:34:25,439
your own script uh to do what you need

1074
00:34:24,639 --> 00:34:27,280
to do

1075
00:34:25,440 --> 00:34:28,720
uh so it's a great way to kind of do ad

1076
00:34:27,280 --> 00:34:31,520
hoc commands you don't have to get in

1077
00:34:28,719 --> 00:34:31,520
that box directly

1078
00:34:33,119 --> 00:34:36,879
if we had hopped on uh this box and done

1079
00:34:35,839 --> 00:34:39,359
soft this

1080
00:34:36,879 --> 00:34:40,560
specifically is dash p9 it's the the one

1081
00:34:39,359 --> 00:34:42,399
to look at all the uh

1082
00:34:40,560 --> 00:34:43,839
connections right this is kind of the

1083
00:34:42,399 --> 00:34:46,960
day that we would have seen

1084
00:34:43,839 --> 00:34:48,960
we can see um that

1085
00:34:46,960 --> 00:34:50,560
executable for scanning uh it actually

1086
00:34:48,960 --> 00:34:51,359
pretends you know changes its name when

1087
00:34:50,560 --> 00:34:53,520
you

1088
00:34:51,359 --> 00:34:55,040
see it in the process list but we can

1089
00:34:53,520 --> 00:34:58,560
see here all the sends

1090
00:34:55,040 --> 00:35:00,880
outbound that thing sent um

1091
00:34:58,560 --> 00:35:02,078
nothing connected luckily i had acl set

1092
00:35:00,880 --> 00:35:02,800
up so i'm not blasting the internet at

1093
00:35:02,079 --> 00:35:04,480
large

1094
00:35:02,800 --> 00:35:05,839
so those are all just send it just

1095
00:35:04,480 --> 00:35:07,440
waiting um

1096
00:35:05,839 --> 00:35:09,040
and then last one there is our

1097
00:35:07,440 --> 00:35:10,720
cryptominer uh you can see it's got an

1098
00:35:09,040 --> 00:35:14,640
established connection

1099
00:35:10,720 --> 00:35:16,560
to check in um i'm a super huge fan

1100
00:35:14,640 --> 00:35:18,400
i suggest everybody go play with it but

1101
00:35:16,560 --> 00:35:20,560
don't do it on a on a real host you care

1102
00:35:18,400 --> 00:35:20,560
about

1103
00:35:22,000 --> 00:35:25,359
and uh that's that's gonna be it for me

1104
00:35:23,599 --> 00:35:26,880
guys i appreciate you all tuning in i'm

1105
00:35:25,359 --> 00:35:28,960
gonna get like i said i'm gonna get help

1106
00:35:26,880 --> 00:35:30,160
i'll be uploading a copy of these slides

1107
00:35:28,960 --> 00:35:31,440
this was a nice list

1108
00:35:30,160 --> 00:35:34,160
of all the resources i used or

1109
00:35:31,440 --> 00:35:35,280
referenced while creating my home lab

1110
00:35:34,160 --> 00:35:37,279
as well as the other content for the

1111
00:35:35,280 --> 00:35:45,839
talk so feel free to check it out

1112
00:35:37,280 --> 00:35:45,839
appreciate it thanks guys

1113
00:36:02,960 --> 00:36:05,040
you

