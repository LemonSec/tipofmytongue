1
00:00:04,160 --> 00:00:07,680
howdy everyone

2
00:00:05,440 --> 00:00:09,519
russ with the reg team here to introduce

3
00:00:07,680 --> 00:00:12,879
our next speakers

4
00:00:09,519 --> 00:00:15,679
cisco talus researchers nick byasini

5
00:00:12,880 --> 00:00:16,960
and edmund brumigan will be presenting a

6
00:00:15,679 --> 00:00:19,439
talk titled

7
00:00:16,960 --> 00:00:20,960
the crimeware arms race modern

8
00:00:19,439 --> 00:00:23,359
techniques in malware

9
00:00:20,960 --> 00:00:25,680
armoring and evasion at the end of the

10
00:00:23,359 --> 00:00:26,800
talk you can join a live q a with our

11
00:00:25,680 --> 00:00:28,160
presenters

12
00:00:26,800 --> 00:00:29,920
simply click the link that will be

13
00:00:28,160 --> 00:00:33,040
displayed at the end of the talk and

14
00:00:29,920 --> 00:00:36,719
you'll be taken to the live q a channel

15
00:00:33,040 --> 00:00:36,719
nick and edmund over to you

16
00:00:41,120 --> 00:00:44,800
okay thank you for joining us today

17
00:00:43,120 --> 00:00:45,760
we're going to talk to you a bit about

18
00:00:44,800 --> 00:00:48,480
the crimeware

19
00:00:45,760 --> 00:00:48,480
arms race

20
00:00:50,160 --> 00:00:55,279
who am i my name is nick biazini i'm a

21
00:00:52,800 --> 00:00:56,559
threat researcher with cisco talos i

22
00:00:55,280 --> 00:00:59,680
actually got my start as

23
00:00:56,559 --> 00:01:01,120
a soccer analyst working in a 24x7

24
00:00:59,680 --> 00:01:03,600
government stock

25
00:01:01,120 --> 00:01:06,158
over the years i've been an analyst lead

26
00:01:03,600 --> 00:01:08,080
analyst manage teams of analysts

27
00:01:06,159 --> 00:01:09,680
basically done everything except for

28
00:01:08,080 --> 00:01:10,560
write code which is a great thing

29
00:01:09,680 --> 00:01:13,119
because no one

30
00:01:10,560 --> 00:01:14,799
no one should ever use my code anywhere

31
00:01:13,119 --> 00:01:16,720
other than on my laptop

32
00:01:14,799 --> 00:01:18,880
but what i do now is i basically hunt

33
00:01:16,720 --> 00:01:20,479
threats and do research all day

34
00:01:18,880 --> 00:01:22,158
my notable research has been around

35
00:01:20,479 --> 00:01:23,360
exploit kits in the past i

36
00:01:22,159 --> 00:01:26,000
did a lot of stuff around domain

37
00:01:23,360 --> 00:01:27,600
shattering and angular exploit kit

38
00:01:26,000 --> 00:01:30,080
now i spend most of my time hunting

39
00:01:27,600 --> 00:01:30,080
crimeware

40
00:01:30,960 --> 00:01:34,798
awesome my name is edmund brumigen i'm

41
00:01:33,040 --> 00:01:35,600
also a security researcher with cisco

42
00:01:34,799 --> 00:01:37,680
tallows

43
00:01:35,600 --> 00:01:39,520
uh so i love malware that's that's what

44
00:01:37,680 --> 00:01:42,399
we do day in day out we're

45
00:01:39,520 --> 00:01:44,399
neck deep in malware constantly uh prior

46
00:01:42,399 --> 00:01:45,119
to joining talos i spent the better part

47
00:01:44,399 --> 00:01:47,200
of the

48
00:01:45,119 --> 00:01:48,640
previous decade doing digital forensics

49
00:01:47,200 --> 00:01:50,720
and incident response

50
00:01:48,640 --> 00:01:52,479
in a variety of different roles within

51
00:01:50,720 --> 00:01:54,000
security operations teams i've held

52
00:01:52,479 --> 00:01:56,320
pretty much every role you can have

53
00:01:54,000 --> 00:01:58,719
on a security operations team prior to

54
00:01:56,320 --> 00:02:01,600
coming over and joining talos

55
00:01:58,719 --> 00:02:02,559
so what are we going to cover today well

56
00:02:01,600 --> 00:02:04,479
we're going to cover

57
00:02:02,560 --> 00:02:05,680
malware armoring and evasion so we're

58
00:02:04,479 --> 00:02:07,520
going to talk a little bit about

59
00:02:05,680 --> 00:02:09,679
malware armoring what it is what it

60
00:02:07,520 --> 00:02:12,640
looks like what it's designed to uh

61
00:02:09,679 --> 00:02:14,080
to achieve for adversaries that bake it

62
00:02:12,640 --> 00:02:15,359
into their malware we're also going to

63
00:02:14,080 --> 00:02:17,200
talk about evasion

64
00:02:15,360 --> 00:02:18,800
some of the differences between armoring

65
00:02:17,200 --> 00:02:20,000
and evasion some of the techniques that

66
00:02:18,800 --> 00:02:21,520
we're seeing

67
00:02:20,000 --> 00:02:23,200
adversaries leverage across the threat

68
00:02:21,520 --> 00:02:25,120
landscape and then we're going to follow

69
00:02:23,200 --> 00:02:26,958
it up with a pretty in-depth uh case

70
00:02:25,120 --> 00:02:28,400
study on a specific piece of malware

71
00:02:26,959 --> 00:02:29,280
that nick and i were involved in

72
00:02:28,400 --> 00:02:31,519
researching

73
00:02:29,280 --> 00:02:33,519
uh that kind of provides a textbook

74
00:02:31,519 --> 00:02:36,080
example of the types of techniques

75
00:02:33,519 --> 00:02:38,000
that we're seeing adversaries implement

76
00:02:36,080 --> 00:02:41,440
within their malware to try to evade

77
00:02:38,000 --> 00:02:45,440
uh detection evade analysis environments

78
00:02:41,440 --> 00:02:47,040
uh render um analysis more difficult

79
00:02:45,440 --> 00:02:48,400
and and things of that nature and then

80
00:02:47,040 --> 00:02:50,000
at the end we'll talk about ways that

81
00:02:48,400 --> 00:02:53,280
you can detect and defend against these

82
00:02:50,000 --> 00:02:55,599
sort of mechanisms within malware

83
00:02:53,280 --> 00:02:57,200
so let's start out with an introduction

84
00:02:55,599 --> 00:03:00,640
to armoring and evasion

85
00:02:57,200 --> 00:03:01,760
as concepts so malware armoring is

86
00:03:00,640 --> 00:03:04,720
designed to prevent

87
00:03:01,760 --> 00:03:05,679
analysis of an executable and this is

88
00:03:04,720 --> 00:03:07,680
commonly

89
00:03:05,680 --> 00:03:09,280
uh implemented within various malware

90
00:03:07,680 --> 00:03:10,959
that you see across the threat landscape

91
00:03:09,280 --> 00:03:12,720
but it doesn't necessarily have to be

92
00:03:10,959 --> 00:03:13,519
malware but that's where you see it most

93
00:03:12,720 --> 00:03:16,080
common

94
00:03:13,519 --> 00:03:16,879
uh it's designed to make analysis more

95
00:03:16,080 --> 00:03:18,959
difficult

96
00:03:16,879 --> 00:03:21,440
to make it take as long as possible and

97
00:03:18,959 --> 00:03:23,280
to be as difficult as possible

98
00:03:21,440 --> 00:03:25,359
for someone actually performing the

99
00:03:23,280 --> 00:03:27,440
analysis of the sample and this

100
00:03:25,360 --> 00:03:28,879
takes a lot of different forms you'll

101
00:03:27,440 --> 00:03:31,120
see code obviously

102
00:03:28,879 --> 00:03:33,359
and you'll see obfuscation of the

103
00:03:31,120 --> 00:03:33,760
windows apis that malware will typically

104
00:03:33,360 --> 00:03:36,319
use

105
00:03:33,760 --> 00:03:37,359
to gain different functionality that the

106
00:03:36,319 --> 00:03:40,000
malware may be

107
00:03:37,360 --> 00:03:41,200
trying to perform such as initiating

108
00:03:40,000 --> 00:03:43,280
network connections

109
00:03:41,200 --> 00:03:45,119
and some of the environmental things

110
00:03:43,280 --> 00:03:48,000
that you see malware implement

111
00:03:45,120 --> 00:03:49,599
it also attempts to prevent proper

112
00:03:48,000 --> 00:03:51,280
disassembly so you'll see

113
00:03:49,599 --> 00:03:53,359
different techniques used within the

114
00:03:51,280 --> 00:03:56,400
code itself to try to make

115
00:03:53,360 --> 00:03:59,840
disassemblers not accurately disassemble

116
00:03:56,400 --> 00:04:01,280
the the code into an analyzable form

117
00:03:59,840 --> 00:04:01,599
you'll see the implementation of things

118
00:04:01,280 --> 00:04:04,959
like

119
00:04:01,599 --> 00:04:06,720
junk code tons of useless instructions

120
00:04:04,959 --> 00:04:08,319
that when you're an analyst and you're

121
00:04:06,720 --> 00:04:09,840
trying to walk through code execution

122
00:04:08,319 --> 00:04:11,599
flow makes that process

123
00:04:09,840 --> 00:04:13,519
much more difficult makes it harder to

124
00:04:11,599 --> 00:04:15,679
follow you'll also see this

125
00:04:13,519 --> 00:04:17,040
for dynamic analysis to prevent dynamic

126
00:04:15,680 --> 00:04:18,320
analysis in the form of things like

127
00:04:17,040 --> 00:04:20,239
debugger detection

128
00:04:18,320 --> 00:04:21,918
so the the main idea here is that

129
00:04:20,238 --> 00:04:23,599
armoring is designed to stop the

130
00:04:21,918 --> 00:04:25,359
researchers that are doing the code

131
00:04:23,600 --> 00:04:27,120
execution flow analysis that are

132
00:04:25,360 --> 00:04:29,759
analyzing the actual

133
00:04:27,120 --> 00:04:31,040
disassembled payload now contrast that

134
00:04:29,759 --> 00:04:33,120
with evasion

135
00:04:31,040 --> 00:04:36,160
which sometimes can look similar but is

136
00:04:33,120 --> 00:04:37,919
designed to evade analysis environments

137
00:04:36,160 --> 00:04:40,240
so when you think about malware analysis

138
00:04:37,919 --> 00:04:42,000
right a lot of researchers will run

139
00:04:40,240 --> 00:04:44,080
instrumented environments is things like

140
00:04:42,000 --> 00:04:45,680
sandboxes and they'll attempt to

141
00:04:44,080 --> 00:04:47,840
detonate malware samples in those

142
00:04:45,680 --> 00:04:50,080
environments to determine what those

143
00:04:47,840 --> 00:04:53,039
samples are designed to do and so

144
00:04:50,080 --> 00:04:55,120
evasion techniques are typically used to

145
00:04:53,040 --> 00:04:57,280
prevent the execution of malware within

146
00:04:55,120 --> 00:04:59,280
these environments by detecting that

147
00:04:57,280 --> 00:05:01,440
the malware is uh being executed in a

148
00:04:59,280 --> 00:05:03,198
virtual machine for instance or

149
00:05:01,440 --> 00:05:04,560
performing environmental detection to

150
00:05:03,199 --> 00:05:05,919
determine the environment that the

151
00:05:04,560 --> 00:05:07,360
malware is operational in

152
00:05:05,919 --> 00:05:09,120
so that it can make a decision as to

153
00:05:07,360 --> 00:05:10,160
whether or not it should exhibit any of

154
00:05:09,120 --> 00:05:12,080
the malicious behavior

155
00:05:10,160 --> 00:05:14,320
it's been designed to do you'll see a

156
00:05:12,080 --> 00:05:16,000
lot of anti-sandbox types of techniques

157
00:05:14,320 --> 00:05:19,280
implemented in malware

158
00:05:16,000 --> 00:05:21,520
to avoid being executed in environments

159
00:05:19,280 --> 00:05:24,159
that are known to be instrumented to

160
00:05:21,520 --> 00:05:26,159
enable easy analysis of the sample so

161
00:05:24,160 --> 00:05:28,240
evasion is designed to stop that

162
00:05:26,160 --> 00:05:30,000
execution from occurring

163
00:05:28,240 --> 00:05:31,680
so the the main takeaway here when

164
00:05:30,000 --> 00:05:32,639
you're talking about armoring versus

165
00:05:31,680 --> 00:05:34,800
evasion

166
00:05:32,639 --> 00:05:36,880
is they may look similar and there are

167
00:05:34,800 --> 00:05:40,479
many techniques that are designed for

168
00:05:36,880 --> 00:05:42,719
armoring and evasion but the idea or the

169
00:05:40,479 --> 00:05:44,400
the thing that the malware author is

170
00:05:42,720 --> 00:05:46,880
attempting to achieve is different in

171
00:05:44,400 --> 00:05:48,960
those cases armoring is designed to

172
00:05:46,880 --> 00:05:50,800
prevent analysis of the code present

173
00:05:48,960 --> 00:05:52,239
within the malware whereas evasion is

174
00:05:50,800 --> 00:05:53,680
designed to avoid

175
00:05:52,240 --> 00:05:55,199
execution in environments that the

176
00:05:53,680 --> 00:05:56,319
malware is not interested in whether

177
00:05:55,199 --> 00:05:58,080
that's a sandbox

178
00:05:56,319 --> 00:06:00,319
or whether that's systems located in

179
00:05:58,080 --> 00:06:02,479
different geographic regions

180
00:06:00,319 --> 00:06:04,840
and so i'll i'll pass it over to nick to

181
00:06:02,479 --> 00:06:06,719
talk about armoring a little bit more in

182
00:06:04,840 --> 00:06:09,039
detail thanks edmund

183
00:06:06,720 --> 00:06:10,160
so let's dig a little deeper on armoring

184
00:06:09,039 --> 00:06:12,240
techniques

185
00:06:10,160 --> 00:06:14,080
uh so armoring as edmund said is

186
00:06:12,240 --> 00:06:15,600
designed primarily to impede the

187
00:06:14,080 --> 00:06:16,318
researcher right prevent the code

188
00:06:15,600 --> 00:06:18,400
analysis

189
00:06:16,319 --> 00:06:19,520
so the common things you'll see are code

190
00:06:18,400 --> 00:06:22,159
obfuscation

191
00:06:19,520 --> 00:06:23,440
uh and that can even go as far as code

192
00:06:22,160 --> 00:06:24,960
encryption and that

193
00:06:23,440 --> 00:06:26,479
primarily is done through things called

194
00:06:24,960 --> 00:06:27,520
crypters and i'll get more into that in

195
00:06:26,479 --> 00:06:28,960
a second

196
00:06:27,520 --> 00:06:31,520
additionally you'll see a lot of stuff

197
00:06:28,960 --> 00:06:32,638
like packers on various ways to do

198
00:06:31,520 --> 00:06:34,960
malware loading

199
00:06:32,639 --> 00:06:37,199
just a quick caveat here so there's

200
00:06:34,960 --> 00:06:38,560
malware loading which is how malware is

201
00:06:37,199 --> 00:06:40,479
loaded onto an end system

202
00:06:38,560 --> 00:06:42,160
and there are loaders which is malware

203
00:06:40,479 --> 00:06:44,318
that loads additional malware

204
00:06:42,160 --> 00:06:46,319
i'm talking about how malware is loaded

205
00:06:44,319 --> 00:06:48,400
onto n systems when i say loaders

206
00:06:46,319 --> 00:06:50,639
in this particular context and then

207
00:06:48,400 --> 00:06:53,120
again lots of examples of junk code

208
00:06:50,639 --> 00:06:54,080
whether that's in the actual code

209
00:06:53,120 --> 00:06:57,199
messing with the

210
00:06:54,080 --> 00:06:59,359
the assembly or trying to to make the

211
00:06:57,199 --> 00:07:01,360
disassembly not operate properly

212
00:06:59,360 --> 00:07:03,680
all of those types of things are ways

213
00:07:01,360 --> 00:07:05,440
that armoring can occur

214
00:07:03,680 --> 00:07:07,199
so where i'm going to start today is

215
00:07:05,440 --> 00:07:08,719
with malware loaders and go a little

216
00:07:07,199 --> 00:07:09,440
more detailed into that i mentioned

217
00:07:08,720 --> 00:07:12,479
before

218
00:07:09,440 --> 00:07:14,080
that malware loaders is the uh the way

219
00:07:12,479 --> 00:07:14,639
in which malware is loaded onto end

220
00:07:14,080 --> 00:07:16,719
systems

221
00:07:14,639 --> 00:07:18,560
right uh one of the more common ways

222
00:07:16,720 --> 00:07:20,479
that we see that is through the use of

223
00:07:18,560 --> 00:07:22,479
packers encrypters

224
00:07:20,479 --> 00:07:24,880
the best way to think of a packer is

225
00:07:22,479 --> 00:07:25,758
it's like a self-extracting executable

226
00:07:24,880 --> 00:07:28,240
right like a

227
00:07:25,759 --> 00:07:30,400
zip compression effectively it allows

228
00:07:28,240 --> 00:07:32,160
you to take an executable and make it

229
00:07:30,400 --> 00:07:34,080
smaller and more compact

230
00:07:32,160 --> 00:07:35,759
originally it was created to make it so

231
00:07:34,080 --> 00:07:36,400
that it'd be easier to transmit over the

232
00:07:35,759 --> 00:07:38,720
network

233
00:07:36,400 --> 00:07:40,159
or store on a system but in today's

234
00:07:38,720 --> 00:07:42,400
world you know network

235
00:07:40,160 --> 00:07:44,639
traffic and data storage is extremely

236
00:07:42,400 --> 00:07:46,479
cheap so it's not really necessary

237
00:07:44,639 --> 00:07:48,080
in today's world we primarily see it

238
00:07:46,479 --> 00:07:50,800
being used by adversaries

239
00:07:48,080 --> 00:07:52,960
to make analysis more difficult uh and

240
00:07:50,800 --> 00:07:55,199
additionally we usually see these done

241
00:07:52,960 --> 00:07:57,280
uh in combination with crypters a

242
00:07:55,199 --> 00:07:58,479
crypter is basically a way to encrypt or

243
00:07:57,280 --> 00:08:00,638
obfuscate data

244
00:07:58,479 --> 00:08:01,840
that could be full encryption simple

245
00:08:00,639 --> 00:08:03,599
obfuscation

246
00:08:01,840 --> 00:08:05,039
some sort of xor key there's a million

247
00:08:03,599 --> 00:08:07,440
different ways that you can

248
00:08:05,039 --> 00:08:09,199
obfuscate or make it difficult to

249
00:08:07,440 --> 00:08:10,800
analyze

250
00:08:09,199 --> 00:08:13,039
at its core the way that this operates

251
00:08:10,800 --> 00:08:15,120
though is when the malicious executable

252
00:08:13,039 --> 00:08:18,560
is executed the decrypter code

253
00:08:15,120 --> 00:08:21,360
is executed which informs the executable

254
00:08:18,560 --> 00:08:24,639
how to actually decrypt the crypted sec

255
00:08:21,360 --> 00:08:27,039
session this then allows you to have

256
00:08:24,639 --> 00:08:27,919
the actual malicious content live only

257
00:08:27,039 --> 00:08:29,840
in memory

258
00:08:27,919 --> 00:08:31,359
not on the end system that'll hinder

259
00:08:29,840 --> 00:08:34,000
things like data analysis

260
00:08:31,360 --> 00:08:35,200
make it difficult to detect initially

261
00:08:34,000 --> 00:08:36,799
from things like uh

262
00:08:35,200 --> 00:08:38,959
like an antivirus because it's not

263
00:08:36,799 --> 00:08:40,640
operating at disk you really need to

264
00:08:38,958 --> 00:08:43,039
look specifically in memory for the

265
00:08:40,640 --> 00:08:44,640
malicious behavior

266
00:08:43,039 --> 00:08:46,240
but that's not the only way that we'll

267
00:08:44,640 --> 00:08:47,920
see them do this type of

268
00:08:46,240 --> 00:08:49,519
malicious behavior one of the more

269
00:08:47,920 --> 00:08:50,479
common things we'll see is assembler

270
00:08:49,519 --> 00:08:52,160
obfuscation

271
00:08:50,480 --> 00:08:54,080
and you can see a couple of examples

272
00:08:52,160 --> 00:08:56,399
here it'll do things like

273
00:08:54,080 --> 00:08:58,640
have useless instructions you know have

274
00:08:56,399 --> 00:09:00,640
um obfuscated calls or jumps

275
00:08:58,640 --> 00:09:02,240
make it difficult to understand and walk

276
00:09:00,640 --> 00:09:04,000
through the flow they'll do a bunch of

277
00:09:02,240 --> 00:09:06,080
substituted instructions

278
00:09:04,000 --> 00:09:07,279
involving a lot of steps and something

279
00:09:06,080 --> 00:09:10,000
that could normally take

280
00:09:07,279 --> 00:09:10,720
one or two steps again it's specifically

281
00:09:10,000 --> 00:09:13,440
designed

282
00:09:10,720 --> 00:09:14,720
to make the analysis by a researcher

283
00:09:13,440 --> 00:09:16,880
tedious

284
00:09:14,720 --> 00:09:18,480
very difficult and harder to follow the

285
00:09:16,880 --> 00:09:21,519
actual flow that the malicious

286
00:09:18,480 --> 00:09:21,519
executable follows

287
00:09:21,600 --> 00:09:25,440
now one of the common things that we'll

288
00:09:22,959 --> 00:09:27,599
see as far as detection is concerned

289
00:09:25,440 --> 00:09:29,600
is behavior-based detection you'll see

290
00:09:27,600 --> 00:09:31,760
here an example of a dll

291
00:09:29,600 --> 00:09:33,440
injection detection so you can see on

292
00:09:31,760 --> 00:09:36,080
the left there's a series

293
00:09:33,440 --> 00:09:37,120
of behaviors or tasks that they're

294
00:09:36,080 --> 00:09:39,600
looking for

295
00:09:37,120 --> 00:09:40,640
in order to say yes a dll is currently

296
00:09:39,600 --> 00:09:42,399
being injected

297
00:09:40,640 --> 00:09:43,680
so what the adversaries do is they look

298
00:09:42,399 --> 00:09:45,839
for ways to break

299
00:09:43,680 --> 00:09:47,760
that behavior detection and one of the

300
00:09:45,839 --> 00:09:50,080
ways that they do that is by addressing

301
00:09:47,760 --> 00:09:52,000
specifically windows api calls

302
00:09:50,080 --> 00:09:54,800
in this case let's look at the virtual

303
00:09:52,000 --> 00:09:56,399
aleks type of api call

304
00:09:54,800 --> 00:09:58,399
so one of the common things you'll see

305
00:09:56,399 --> 00:09:59,200
is an adversary make an api call i mean

306
00:09:58,399 --> 00:10:01,600
that that's

307
00:09:59,200 --> 00:10:03,040
a very easy detection mechanism that's

308
00:10:01,600 --> 00:10:04,800
used commonly in av

309
00:10:03,040 --> 00:10:06,719
and various other ways to determine

310
00:10:04,800 --> 00:10:08,399
malicious activity is occurring

311
00:10:06,720 --> 00:10:10,800
in this particular instance they kind of

312
00:10:08,399 --> 00:10:12,320
took a a unique approach to it

313
00:10:10,800 --> 00:10:14,560
the way that they did it instead of

314
00:10:12,320 --> 00:10:15,360
actually calling the windows api

315
00:10:14,560 --> 00:10:17,760
directly

316
00:10:15,360 --> 00:10:19,839
is they scanned memory looking for that

317
00:10:17,760 --> 00:10:21,760
specific api call location

318
00:10:19,839 --> 00:10:24,720
and then they created a hash that

319
00:10:21,760 --> 00:10:26,959
identified where that api call resides

320
00:10:24,720 --> 00:10:28,959
so you can see here instead of saying

321
00:10:26,959 --> 00:10:29,839
virtual alec you know the api called a

322
00:10:28,959 --> 00:10:31,839
virtual alec

323
00:10:29,839 --> 00:10:33,440
they then are referencing specifically

324
00:10:31,839 --> 00:10:35,680
the hash

325
00:10:33,440 --> 00:10:37,839
now to take this even a step further

326
00:10:35,680 --> 00:10:40,560
they're using the call window proc

327
00:10:37,839 --> 00:10:42,320
api to actually execute this so what

328
00:10:40,560 --> 00:10:44,640
that does is it provides an even

329
00:10:42,320 --> 00:10:46,240
deeper layer of obfuscation so if you

330
00:10:44,640 --> 00:10:48,640
look here on the screen if you were

331
00:10:46,240 --> 00:10:49,440
obfuscated or executing not using

332
00:10:48,640 --> 00:10:51,120
windows

333
00:10:49,440 --> 00:10:53,279
call windows proc you see the virtual

334
00:10:51,120 --> 00:10:55,200
alec being clearly seen and provide you

335
00:10:53,279 --> 00:10:57,360
information about the executable

336
00:10:55,200 --> 00:10:58,720
things like that but in the area where

337
00:10:57,360 --> 00:11:00,640
the actual windows

338
00:10:58,720 --> 00:11:02,079
the call windows proc is being executed

339
00:11:00,640 --> 00:11:03,839
there's very little data

340
00:11:02,079 --> 00:11:05,839
makes it much much more difficult to

341
00:11:03,839 --> 00:11:07,760
track down it makes it harder on the

342
00:11:05,839 --> 00:11:10,800
researcher the effect is the same

343
00:11:07,760 --> 00:11:13,040
to the end user into the malicious actor

344
00:11:10,800 --> 00:11:14,240
but the the analysis becomes much more

345
00:11:13,040 --> 00:11:17,599
tedious and annoying

346
00:11:14,240 --> 00:11:18,800
to undertake now another thing that

347
00:11:17,600 --> 00:11:21,200
we'll commonly see

348
00:11:18,800 --> 00:11:22,479
it's not uncommon to see malware check

349
00:11:21,200 --> 00:11:24,720
for things like

350
00:11:22,480 --> 00:11:25,519
names of processes associated with av

351
00:11:24,720 --> 00:11:28,399
right that's

352
00:11:25,519 --> 00:11:29,120
pretty standard behavior amongst malware

353
00:11:28,399 --> 00:11:31,120
authors

354
00:11:29,120 --> 00:11:32,560
but we do see interesting variants of

355
00:11:31,120 --> 00:11:35,440
this to just make it

356
00:11:32,560 --> 00:11:36,560
annoying and tedious for us you can see

357
00:11:35,440 --> 00:11:38,800
here an example

358
00:11:36,560 --> 00:11:39,760
where instead of scanning by the actual

359
00:11:38,800 --> 00:11:42,640
process name

360
00:11:39,760 --> 00:11:43,600
they're scanning by a crc32c checksum of

361
00:11:42,640 --> 00:11:45,760
the process name

362
00:11:43,600 --> 00:11:47,360
it's achieving the same goal but when

363
00:11:45,760 --> 00:11:47,839
you're actually trying to analyze the

364
00:11:47,360 --> 00:11:49,600
code

365
00:11:47,839 --> 00:11:51,200
it's a different process and a different

366
00:11:49,600 --> 00:11:53,200
flow that you have to work through

367
00:11:51,200 --> 00:11:56,800
it's not that same type of process

368
00:11:53,200 --> 00:11:58,800
engagement that you're used to

369
00:11:56,800 --> 00:12:00,880
now to kind of take it all together uh

370
00:11:58,800 --> 00:12:02,880
so you have this concept of of malware

371
00:12:00,880 --> 00:12:05,040
loading right where it's being decrypted

372
00:12:02,880 --> 00:12:06,639
at some stage well one of the initial

373
00:12:05,040 --> 00:12:09,360
things that we've started to see

374
00:12:06,639 --> 00:12:10,160
is they've they've done multi-stage

375
00:12:09,360 --> 00:12:12,560
decrypting

376
00:12:10,160 --> 00:12:14,880
and some of that will even include

377
00:12:12,560 --> 00:12:15,760
retrieving data from a malware server at

378
00:12:14,880 --> 00:12:17,839
runtime

379
00:12:15,760 --> 00:12:19,760
now you can imagine how difficult this

380
00:12:17,839 --> 00:12:21,519
makes things like static analysis

381
00:12:19,760 --> 00:12:24,319
because if you're looking at the actual

382
00:12:21,519 --> 00:12:26,560
file unless you're able to pull the

383
00:12:24,320 --> 00:12:29,120
those components down from those malware

384
00:12:26,560 --> 00:12:31,119
servers it's not complete functionality

385
00:12:29,120 --> 00:12:32,560
it may not even appear malicious on the

386
00:12:31,120 --> 00:12:34,800
end system again

387
00:12:32,560 --> 00:12:36,479
it's all about trying to make it

388
00:12:34,800 --> 00:12:38,959
difficult for analysis

389
00:12:36,480 --> 00:12:40,560
trying to to kind of hide true

390
00:12:38,959 --> 00:12:40,880
functionality i mean if you think about

391
00:12:40,560 --> 00:12:43,040
it

392
00:12:40,880 --> 00:12:45,279
from a modular malware perspective you

393
00:12:43,040 --> 00:12:47,040
could be downloading additional modules

394
00:12:45,279 --> 00:12:48,240
as you're actually executing so you

395
00:12:47,040 --> 00:12:51,199
can't necessarily

396
00:12:48,240 --> 00:12:52,639
see what is going on or what the true

397
00:12:51,200 --> 00:12:55,200
intention of the malware is

398
00:12:52,639 --> 00:12:55,760
when you're doing your analysis offline

399
00:12:55,200 --> 00:12:57,360
on on

400
00:12:55,760 --> 00:12:59,120
static analysis going through your your

401
00:12:57,360 --> 00:13:01,920
disassemblers your ida pros your

402
00:12:59,120 --> 00:13:01,920
hedgerows whatever

403
00:13:02,720 --> 00:13:06,079
so as you can see here this kind of ties

404
00:13:05,279 --> 00:13:07,519
together how

405
00:13:06,079 --> 00:13:09,199
all of these armament techniques can

406
00:13:07,519 --> 00:13:11,120
work so you have in this case

407
00:13:09,200 --> 00:13:13,200
a sample of hawkeye right that hawkeye

408
00:13:11,120 --> 00:13:15,200
is being loaded onto the system

409
00:13:13,200 --> 00:13:17,200
uh using a malware loader well what they

410
00:13:15,200 --> 00:13:19,839
do is they process hollow and

411
00:13:17,200 --> 00:13:20,880
and embed and inject that malicious

412
00:13:19,839 --> 00:13:24,320
process in this case

413
00:13:20,880 --> 00:13:26,720
into reg asm the that executable however

414
00:13:24,320 --> 00:13:27,360
the executable itself is never unpacked

415
00:13:26,720 --> 00:13:30,959
on disk

416
00:13:27,360 --> 00:13:33,680
it's never decrypted on disk if you scan

417
00:13:30,959 --> 00:13:34,000
the file it is unlikely that it'll find

418
00:13:33,680 --> 00:13:36,560
it

419
00:13:34,000 --> 00:13:38,079
you know that this will only really be

420
00:13:36,560 --> 00:13:41,040
visible when it is actually

421
00:13:38,079 --> 00:13:43,279
executed in memory it makes it far more

422
00:13:41,040 --> 00:13:45,439
difficult to do forensic investigations

423
00:13:43,279 --> 00:13:46,639
to detect executables that are not

424
00:13:45,440 --> 00:13:48,560
actively running

425
00:13:46,639 --> 00:13:50,959
there's a lot of benefits this type of

426
00:13:48,560 --> 00:13:52,800
armament and this shows you the lengths

427
00:13:50,959 --> 00:13:54,079
to which adversaries will go

428
00:13:52,800 --> 00:13:55,920
but let me go ahead and hand it back

429
00:13:54,079 --> 00:13:58,399
over to edmund to talk a little bit more

430
00:13:55,920 --> 00:14:00,319
thoroughly about evasion techniques

431
00:13:58,399 --> 00:14:02,240
thanks so yeah we've talked a little bit

432
00:14:00,320 --> 00:14:03,360
about malware armoring and how that's

433
00:14:02,240 --> 00:14:06,720
designed to

434
00:14:03,360 --> 00:14:08,639
impede the code analysis uh that may be

435
00:14:06,720 --> 00:14:10,560
performed uh when researchers are trying

436
00:14:08,639 --> 00:14:12,320
to determine what malware is

437
00:14:10,560 --> 00:14:14,079
uh what it does the the different

438
00:14:12,320 --> 00:14:15,519
functionality that's built into it

439
00:14:14,079 --> 00:14:17,519
when they're performing that analysis

440
00:14:15,519 --> 00:14:18,399
statically or or even dynamically in

441
00:14:17,519 --> 00:14:20,079
some cases

442
00:14:18,399 --> 00:14:21,760
uh but there are other techniques that

443
00:14:20,079 --> 00:14:24,079
we commonly see implemented within

444
00:14:21,760 --> 00:14:26,480
malware that are designed to evade

445
00:14:24,079 --> 00:14:28,160
analysis environments altogether so the

446
00:14:26,480 --> 00:14:29,680
whole idea behind this is that the

447
00:14:28,160 --> 00:14:30,880
malware author knows that they want to

448
00:14:29,680 --> 00:14:33,199
execute malware

449
00:14:30,880 --> 00:14:34,880
on a specific set of systems based on

450
00:14:33,199 --> 00:14:36,560
you know who they're targeting

451
00:14:34,880 --> 00:14:38,240
or the types of information they want to

452
00:14:36,560 --> 00:14:40,160
gather and they want to prevent

453
00:14:38,240 --> 00:14:41,680
their malware from executing in

454
00:14:40,160 --> 00:14:43,120
unintended environments

455
00:14:41,680 --> 00:14:45,120
and in a lot of cases they're

456
00:14:43,120 --> 00:14:45,839
specifically looking for analysis

457
00:14:45,120 --> 00:14:49,199
environments

458
00:14:45,839 --> 00:14:51,680
so malware analysis labs uh antivirus

459
00:14:49,199 --> 00:14:54,319
sandboxes um in places that are

460
00:14:51,680 --> 00:14:56,800
instrumented that are designed to

461
00:14:54,320 --> 00:14:58,320
provide that analysis process and speed

462
00:14:56,800 --> 00:14:59,680
it up in a lot of cases

463
00:14:58,320 --> 00:15:02,320
and so that takes a lot of different

464
00:14:59,680 --> 00:15:04,079
forms right you'll see a lot of

465
00:15:02,320 --> 00:15:05,760
emphasis put on detecting whether or not

466
00:15:04,079 --> 00:15:07,359
the malware is being executed in a

467
00:15:05,760 --> 00:15:10,240
virtual environment versus a

468
00:15:07,360 --> 00:15:10,880
a physical system our authors recognize

469
00:15:10,240 --> 00:15:12,959
that

470
00:15:10,880 --> 00:15:15,680
most of the the victims that they will

471
00:15:12,959 --> 00:15:17,680
be trying to get malware infections

472
00:15:15,680 --> 00:15:19,760
on are typically going to be using a

473
00:15:17,680 --> 00:15:21,519
physical system a desktop computer or a

474
00:15:19,760 --> 00:15:23,760
laptop or something of that nature

475
00:15:21,519 --> 00:15:25,760
so they try to avoid executing any of

476
00:15:23,760 --> 00:15:27,760
the malicious activities in the malware

477
00:15:25,760 --> 00:15:29,279
in virtual environments because most of

478
00:15:27,760 --> 00:15:30,639
the time those virtual environments are

479
00:15:29,279 --> 00:15:32,639
going to be associated with

480
00:15:30,639 --> 00:15:34,399
analysis environments which is not what

481
00:15:32,639 --> 00:15:36,560
they're looking for

482
00:15:34,399 --> 00:15:37,839
to take that a step further a lot of

483
00:15:36,560 --> 00:15:39,758
malware will also

484
00:15:37,839 --> 00:15:41,279
look for user interaction with the

485
00:15:39,759 --> 00:15:42,639
system before any of the malicious

486
00:15:41,279 --> 00:15:44,959
activity occurs

487
00:15:42,639 --> 00:15:45,920
so there will be different checks that

488
00:15:44,959 --> 00:15:47,439
are performed

489
00:15:45,920 --> 00:15:48,880
and in a lot of cases there will be

490
00:15:47,440 --> 00:15:49,759
things like sleep functions and

491
00:15:48,880 --> 00:15:52,639
iterations

492
00:15:49,759 --> 00:15:52,959
that'll basically just sit there looking

493
00:15:52,639 --> 00:15:54,959
for

494
00:15:52,959 --> 00:15:56,880
user interaction whether that's active

495
00:15:54,959 --> 00:15:57,518
window state changes that would indicate

496
00:15:56,880 --> 00:16:00,000
a user

497
00:15:57,519 --> 00:16:01,680
is at a keyboard changing active windows

498
00:16:00,000 --> 00:16:04,000
going from program to program

499
00:16:01,680 --> 00:16:04,959
uh you'll also see things like sandbox

500
00:16:04,000 --> 00:16:06,639
detection where

501
00:16:04,959 --> 00:16:08,800
they'll specifically be looking for

502
00:16:06,639 --> 00:16:10,639
artifacts in the uh

503
00:16:08,800 --> 00:16:12,399
the operating system that are indicative

504
00:16:10,639 --> 00:16:13,920
that it's a sandbox computer

505
00:16:12,399 --> 00:16:16,079
looking at things like the registry

506
00:16:13,920 --> 00:16:17,839
looking at for the presence of specific

507
00:16:16,079 --> 00:16:20,239
dlls looking for

508
00:16:17,839 --> 00:16:22,160
running processes all of these different

509
00:16:20,240 --> 00:16:22,720
artifacts that if found would indicate

510
00:16:22,160 --> 00:16:25,519
that they're

511
00:16:22,720 --> 00:16:26,240
being executed in a virtual environment

512
00:16:25,519 --> 00:16:28,399
so that in

513
00:16:26,240 --> 00:16:30,240
in most cases the malware will terminate

514
00:16:28,399 --> 00:16:31,279
execution or do something different

515
00:16:30,240 --> 00:16:33,040
altogether

516
00:16:31,279 --> 00:16:35,759
to make the executable appear as if it's

517
00:16:33,040 --> 00:16:37,279
benign so the idea no malicious activity

518
00:16:35,759 --> 00:16:38,800
occurs until all of these checks are

519
00:16:37,279 --> 00:16:40,800
performed and the malware

520
00:16:38,800 --> 00:16:42,240
is confident it is executing in the

521
00:16:40,800 --> 00:16:44,160
environment it's intending to

522
00:16:42,240 --> 00:16:45,440
execute in which is typically end-user

523
00:16:44,160 --> 00:16:47,680
systems uh and

524
00:16:45,440 --> 00:16:49,519
in like i mentioned there are often long

525
00:16:47,680 --> 00:16:50,160
periods of inactivity associated with

526
00:16:49,519 --> 00:16:52,240
this

527
00:16:50,160 --> 00:16:53,680
so the malware will attempt to sleep for

528
00:16:52,240 --> 00:16:55,199
extended periods when you think about

529
00:16:53,680 --> 00:16:56,560
sandbox environments

530
00:16:55,199 --> 00:16:58,319
uh you know one of the the key

531
00:16:56,560 --> 00:16:58,719
characteristics is that typically when

532
00:16:58,320 --> 00:17:00,880
you

533
00:16:58,720 --> 00:17:02,480
push a sample into a sandbox environment

534
00:17:00,880 --> 00:17:05,359
and detonate that sample

535
00:17:02,480 --> 00:17:07,199
there's a predefined uh time period that

536
00:17:05,359 --> 00:17:09,039
the sample will be executed so

537
00:17:07,199 --> 00:17:11,120
you'll push it in it'll be executed in a

538
00:17:09,039 --> 00:17:13,359
virtual machine uh the virtual machine

539
00:17:11,119 --> 00:17:15,678
will run for a specific period of time

540
00:17:13,359 --> 00:17:16,479
in which case a decision will be made is

541
00:17:15,679 --> 00:17:18,559
the the

542
00:17:16,480 --> 00:17:20,079
executable malicious or benign and so

543
00:17:18,559 --> 00:17:20,879
you'll also see periods of that

544
00:17:20,079 --> 00:17:22,879
inactivity

545
00:17:20,880 --> 00:17:24,000
that attempt to subvert this process by

546
00:17:22,880 --> 00:17:27,120
waiting 5

547
00:17:24,000 --> 00:17:28,160
10 15 or or more minutes before anything

548
00:17:27,119 --> 00:17:31,520
malicious occurs

549
00:17:28,160 --> 00:17:33,840
to attempt to to trick the sandboxes

550
00:17:31,520 --> 00:17:35,600
into making a benign determination

551
00:17:33,840 --> 00:17:37,520
now in terms of identifying and

552
00:17:35,600 --> 00:17:39,199
defeating sandboxes there are a myriad

553
00:17:37,520 --> 00:17:40,559
of different mechanisms that malware can

554
00:17:39,200 --> 00:17:42,240
use to perform this

555
00:17:40,559 --> 00:17:43,918
uh so looking for things like hardware

556
00:17:42,240 --> 00:17:45,039
identifiers that would be indicative

557
00:17:43,919 --> 00:17:46,320
that the malware is running in a

558
00:17:45,039 --> 00:17:48,879
hypervisor

559
00:17:46,320 --> 00:17:50,480
trying to match uh usernames uh so a lot

560
00:17:48,880 --> 00:17:53,360
of public sandboxes

561
00:17:50,480 --> 00:17:55,280
uh that a lot that are commonly used by

562
00:17:53,360 --> 00:17:57,678
by analysts and malware researchers

563
00:17:55,280 --> 00:17:58,559
are also known to adversaries and when

564
00:17:57,679 --> 00:18:00,559
you

565
00:17:58,559 --> 00:18:01,678
execute a malware sample in these

566
00:18:00,559 --> 00:18:03,760
environments they're running

567
00:18:01,679 --> 00:18:05,679
under a specific user account within say

568
00:18:03,760 --> 00:18:07,760
windows uh well uh

569
00:18:05,679 --> 00:18:09,520
threat actors have you know taken note

570
00:18:07,760 --> 00:18:11,360
of the common user names present

571
00:18:09,520 --> 00:18:12,559
uh for those accounts and they'll check

572
00:18:11,360 --> 00:18:14,399
the username of the

573
00:18:12,559 --> 00:18:16,639
the where the malware is running and if

574
00:18:14,400 --> 00:18:17,280
that username matches a known sandbox

575
00:18:16,640 --> 00:18:19,679
username

576
00:18:17,280 --> 00:18:21,280
it won't detonate properly uh looking

577
00:18:19,679 --> 00:18:23,919
for things like processes that would be

578
00:18:21,280 --> 00:18:26,080
indicative of analysis tools being run

579
00:18:23,919 --> 00:18:27,360
uh that are commonly used while

580
00:18:26,080 --> 00:18:29,678
analyzing malware

581
00:18:27,360 --> 00:18:31,439
looking for debuggers checking the file

582
00:18:29,679 --> 00:18:33,600
system for the presence of sandbox

583
00:18:31,440 --> 00:18:35,520
related uh dynamic link libraries

584
00:18:33,600 --> 00:18:37,199
that would indicate that you know the

585
00:18:35,520 --> 00:18:38,080
the sample is being executed in a

586
00:18:37,200 --> 00:18:39,600
sandbox

587
00:18:38,080 --> 00:18:41,280
uh one other interesting thing is

588
00:18:39,600 --> 00:18:44,559
password protection so

589
00:18:41,280 --> 00:18:47,039
requiring positive user interaction to

590
00:18:44,559 --> 00:18:48,559
facilitate the execution process gives

591
00:18:47,039 --> 00:18:49,200
the malware a pretty good idea that it's

592
00:18:48,559 --> 00:18:51,280
not being

593
00:18:49,200 --> 00:18:52,720
automatically executed and then like i

594
00:18:51,280 --> 00:18:53,760
previously mentioned the use of sleep

595
00:18:52,720 --> 00:18:56,160
counters which

596
00:18:53,760 --> 00:18:58,000
can be used to subvert that sandbox

597
00:18:56,160 --> 00:18:58,720
execution by not doing anything

598
00:18:58,000 --> 00:19:00,960
malicious

599
00:18:58,720 --> 00:19:02,880
until after a period of time that would

600
00:19:00,960 --> 00:19:03,440
commonly be associated with a sandbox

601
00:19:02,880 --> 00:19:06,480
run

602
00:19:03,440 --> 00:19:07,919
counter so i mentioned password

603
00:19:06,480 --> 00:19:10,000
protection this is one of the most

604
00:19:07,919 --> 00:19:12,480
common mechanisms we see to try to

605
00:19:10,000 --> 00:19:14,000
evade sandboxes the idea here is you'll

606
00:19:12,480 --> 00:19:15,120
you'll see an email similar to the one

607
00:19:14,000 --> 00:19:17,120
on the slide

608
00:19:15,120 --> 00:19:19,120
where the adversary will send a

609
00:19:17,120 --> 00:19:19,439
malicious office document for instance

610
00:19:19,120 --> 00:19:21,600
to

611
00:19:19,440 --> 00:19:22,559
a potential victim and in the email

612
00:19:21,600 --> 00:19:24,399
they'll say hey

613
00:19:22,559 --> 00:19:26,320
here's the password for the office

614
00:19:24,400 --> 00:19:27,200
document and in order for the office

615
00:19:26,320 --> 00:19:30,320
document to be

616
00:19:27,200 --> 00:19:32,880
opened by the victim they have to input

617
00:19:30,320 --> 00:19:33,600
the the password for the the office

618
00:19:32,880 --> 00:19:36,000
document

619
00:19:33,600 --> 00:19:38,320
now if you were to push this into a

620
00:19:36,000 --> 00:19:39,919
sandbox that wasn't aware of

621
00:19:38,320 --> 00:19:42,240
password protection and didn't provide

622
00:19:39,919 --> 00:19:43,760
the mechanism to input that password

623
00:19:42,240 --> 00:19:45,280
nothing malicious would ever occur

624
00:19:43,760 --> 00:19:46,400
because the file would just sit there at

625
00:19:45,280 --> 00:19:49,039
the password prompt

626
00:19:46,400 --> 00:19:50,960
and no macros would be executed and

627
00:19:49,039 --> 00:19:53,200
nothing bad would happen

628
00:19:50,960 --> 00:19:54,960
but if you're an actual intended victim

629
00:19:53,200 --> 00:19:56,559
and you input that password

630
00:19:54,960 --> 00:19:58,080
and enable macros that's when the

631
00:19:56,559 --> 00:20:01,760
malicious activity occurs

632
00:19:58,080 --> 00:20:05,120
so it's a a good way that we see um

633
00:20:01,760 --> 00:20:06,799
to evade sandbox sandbox analysis

634
00:20:05,120 --> 00:20:08,399
in a lot of cases and you can kind of

635
00:20:06,799 --> 00:20:10,080
see the output there

636
00:20:08,400 --> 00:20:12,240
in this particular case the macros were

637
00:20:10,080 --> 00:20:13,918
designed to execute on auto open

638
00:20:12,240 --> 00:20:15,840
but one of the other things we see a lot

639
00:20:13,919 --> 00:20:17,919
of times is rather than executing when

640
00:20:15,840 --> 00:20:19,760
the office document is open

641
00:20:17,919 --> 00:20:21,200
the macros will be set up to only

642
00:20:19,760 --> 00:20:22,960
execute on close

643
00:20:21,200 --> 00:20:24,799
which means that again in a lot of

644
00:20:22,960 --> 00:20:25,280
sandbox environments even if you do

645
00:20:24,799 --> 00:20:28,400
support

646
00:20:25,280 --> 00:20:29,520
password um entering into the the the

647
00:20:28,400 --> 00:20:31,440
prompt

648
00:20:29,520 --> 00:20:33,360
the malicious activity won't occur until

649
00:20:31,440 --> 00:20:35,120
the office document is closed the the

650
00:20:33,360 --> 00:20:35,760
macros won't kick off the infection

651
00:20:35,120 --> 00:20:37,199
process

652
00:20:35,760 --> 00:20:39,840
unless the documents close so unless

653
00:20:37,200 --> 00:20:41,919
your sandbox supports closing the

654
00:20:39,840 --> 00:20:45,199
document as well you'll again never see

655
00:20:41,919 --> 00:20:45,200
the malicious activity occur

656
00:20:46,240 --> 00:20:50,000
so one of the the more interesting um

657
00:20:48,400 --> 00:20:52,320
techniques that i've seen recently was

658
00:20:50,000 --> 00:20:54,640
with gravity rat which is a malware

659
00:20:52,320 --> 00:20:56,399
family that we did some analysis on

660
00:20:54,640 --> 00:20:58,880
uh where they were actually checking the

661
00:20:56,400 --> 00:21:01,039
cpu's thermal temperature to determine

662
00:20:58,880 --> 00:21:02,000
if the malware was being executed in a

663
00:21:01,039 --> 00:21:03,440
sandbox

664
00:21:02,000 --> 00:21:05,200
so they were using the windows

665
00:21:03,440 --> 00:21:05,600
management instrumentation framework to

666
00:21:05,200 --> 00:21:07,440
check

667
00:21:05,600 --> 00:21:09,120
what the current temperature of the cpu

668
00:21:07,440 --> 00:21:12,559
is so if you execute

669
00:21:09,120 --> 00:21:15,520
this wmi command on a physical system

670
00:21:12,559 --> 00:21:17,520
it spits back a reporting of the current

671
00:21:15,520 --> 00:21:19,440
thermal temperature of the cpu

672
00:21:17,520 --> 00:21:21,200
but if you're executing this in a

673
00:21:19,440 --> 00:21:22,960
hypervisor environment like let's say

674
00:21:21,200 --> 00:21:24,880
vmware or virtualbox

675
00:21:22,960 --> 00:21:26,559
it will error because that sort of

676
00:21:24,880 --> 00:21:28,159
information isn't available in a virtual

677
00:21:26,559 --> 00:21:29,840
machine so it's a pretty

678
00:21:28,159 --> 00:21:31,520
interesting way to identify whether or

679
00:21:29,840 --> 00:21:32,639
not the malware is being executed on a

680
00:21:31,520 --> 00:21:34,480
physical system

681
00:21:32,640 --> 00:21:36,000
or within a virtual environment that may

682
00:21:34,480 --> 00:21:38,559
indicate that it's being analyzed in a

683
00:21:36,000 --> 00:21:38,559
sandbox

684
00:21:38,720 --> 00:21:42,480
so another pretty common uh technique we

685
00:21:41,440 --> 00:21:45,200
see is the

686
00:21:42,480 --> 00:21:45,919
checking for the number of cpu cores

687
00:21:45,200 --> 00:21:47,679
that are present

688
00:21:45,919 --> 00:21:49,039
in the environment that the malware is

689
00:21:47,679 --> 00:21:51,840
being executed in

690
00:21:49,039 --> 00:21:52,559
uh so in a lot of environments uh the

691
00:21:51,840 --> 00:21:54,320
idea

692
00:21:52,559 --> 00:21:56,480
when you're creating virtual machines is

693
00:21:54,320 --> 00:21:58,000
to only give them the amount of

694
00:21:56,480 --> 00:22:00,400
available system resources that

695
00:21:58,000 --> 00:22:01,280
are required so that you can save

696
00:22:00,400 --> 00:22:03,600
resources

697
00:22:01,280 --> 00:22:04,720
and run multiple virtual machines a

698
00:22:03,600 --> 00:22:07,199
byproduct of this

699
00:22:04,720 --> 00:22:09,120
is that in a lot of cases the resources

700
00:22:07,200 --> 00:22:10,880
that are given to virtual machines that

701
00:22:09,120 --> 00:22:12,000
are used in a lot of malware analysis

702
00:22:10,880 --> 00:22:13,760
environments

703
00:22:12,000 --> 00:22:15,520
don't match what you would typically see

704
00:22:13,760 --> 00:22:16,240
on a physical system nowadays when you

705
00:22:15,520 --> 00:22:18,639
think about

706
00:22:16,240 --> 00:22:19,280
you know any cheap laptop that you buy

707
00:22:18,640 --> 00:22:21,440
from

708
00:22:19,280 --> 00:22:23,360
a major retailer nowadays you've got at

709
00:22:21,440 --> 00:22:25,039
least two cores and in most cases you've

710
00:22:23,360 --> 00:22:26,719
got four quarters or more

711
00:22:25,039 --> 00:22:29,280
but in a lot of vms people still

712
00:22:26,720 --> 00:22:31,280
configure them with you know single cpus

713
00:22:29,280 --> 00:22:32,399
uh so a lot of malware recognizes this

714
00:22:31,280 --> 00:22:34,480
and they'll check for

715
00:22:32,400 --> 00:22:35,679
the existence of multiple cpu cores and

716
00:22:34,480 --> 00:22:38,480
if they don't see

717
00:22:35,679 --> 00:22:40,400
you know two or more cpu cores or if

718
00:22:38,480 --> 00:22:42,480
they only see one cpu core

719
00:22:40,400 --> 00:22:44,000
they'll assume they're being analyzed

720
00:22:42,480 --> 00:22:47,039
and they'll terminate the malicious

721
00:22:44,000 --> 00:22:47,039
execution process

722
00:22:48,159 --> 00:22:51,440
uh some other common uh techniques that

723
00:22:50,000 --> 00:22:54,000
we see is checking

724
00:22:51,440 --> 00:22:55,600
running processes on the system so there

725
00:22:54,000 --> 00:22:57,520
are a lot of utilities that are pretty

726
00:22:55,600 --> 00:22:58,959
common during malware analysis

727
00:22:57,520 --> 00:23:01,039
uh different tools that have been

728
00:22:58,960 --> 00:23:03,679
developed that make the analysis more

729
00:23:01,039 --> 00:23:04,158
efficient more effective and just like

730
00:23:03,679 --> 00:23:05,919
the

731
00:23:04,159 --> 00:23:07,760
uh malware researchers you know are

732
00:23:05,919 --> 00:23:09,919
familiar with those tools so are

733
00:23:07,760 --> 00:23:11,840
adversaries so a lot of malware will

734
00:23:09,919 --> 00:23:13,440
attempt to enumerate the running

735
00:23:11,840 --> 00:23:15,199
processes on the system and they'll

736
00:23:13,440 --> 00:23:17,440
check for the presence of

737
00:23:15,200 --> 00:23:19,520
different processes running that may be

738
00:23:17,440 --> 00:23:20,159
indicative of analysis tools present on

739
00:23:19,520 --> 00:23:21,679
the system

740
00:23:20,159 --> 00:23:24,880
and then if they detect those the the

741
00:23:21,679 --> 00:23:28,080
malware will terminate

742
00:23:24,880 --> 00:23:30,799
another common technique is checking the

743
00:23:28,080 --> 00:23:32,399
uh system up time uh so trying to

744
00:23:30,799 --> 00:23:34,879
determine how long since

745
00:23:32,400 --> 00:23:36,080
the last time the system was booted up a

746
00:23:34,880 --> 00:23:37,679
lot of malware will check

747
00:23:36,080 --> 00:23:39,678
and they'll make a determination if the

748
00:23:37,679 --> 00:23:40,559
system's been up for less than you know

749
00:23:39,679 --> 00:23:43,360
15 minutes

750
00:23:40,559 --> 00:23:45,840
the malware will assume it's being uh

751
00:23:43,360 --> 00:23:48,158
analyzed and it will terminate execution

752
00:23:45,840 --> 00:23:49,039
in a lot of sandbox configurations uh

753
00:23:48,159 --> 00:23:51,520
you create the

754
00:23:49,039 --> 00:23:53,120
the sandbox vm you snapshot it and then

755
00:23:51,520 --> 00:23:54,960
you revert to snapshot every time you

756
00:23:53,120 --> 00:23:57,678
try to detonate a new malware sample

757
00:23:54,960 --> 00:23:59,200
but if you didn't let your vm run for

758
00:23:57,679 --> 00:24:01,200
you know a couple hours

759
00:23:59,200 --> 00:24:02,799
um before you took that initial snapshot

760
00:24:01,200 --> 00:24:04,000
it will look like the system just booted

761
00:24:02,799 --> 00:24:06,639
up and malware knows about

762
00:24:04,000 --> 00:24:08,240
this and in a lot of cases it'll do

763
00:24:06,640 --> 00:24:10,080
those system uptime checks to

764
00:24:08,240 --> 00:24:11,919
make sure that the system has been

765
00:24:10,080 --> 00:24:13,600
running for an extended period

766
00:24:11,919 --> 00:24:15,200
which makes it more likely that it's

767
00:24:13,600 --> 00:24:16,840
actually being executed on a victim

768
00:24:15,200 --> 00:24:19,279
computer rather than a sandbox

769
00:24:16,840 --> 00:24:21,360
environment

770
00:24:19,279 --> 00:24:23,039
one of the other common artifacts we'll

771
00:24:21,360 --> 00:24:25,120
see now or check for is

772
00:24:23,039 --> 00:24:26,799
recent document metadata so if you think

773
00:24:25,120 --> 00:24:28,639
about on a windows system

774
00:24:26,799 --> 00:24:30,879
you're constantly opening up different

775
00:24:28,640 --> 00:24:32,960
different documents

776
00:24:30,880 --> 00:24:34,880
but if you think about certain sandbox

777
00:24:32,960 --> 00:24:37,039
environments or virtual machines

778
00:24:34,880 --> 00:24:38,720
those files may not be present so if

779
00:24:37,039 --> 00:24:40,640
you're creating a malware analysis

780
00:24:38,720 --> 00:24:43,600
environment it's important that you put

781
00:24:40,640 --> 00:24:45,360
uh common document files uh within the

782
00:24:43,600 --> 00:24:46,000
common locations within windows because

783
00:24:45,360 --> 00:24:47,520
malware will

784
00:24:46,000 --> 00:24:49,520
check for that they'll check for recent

785
00:24:47,520 --> 00:24:51,918
document artifacts they'll also check

786
00:24:49,520 --> 00:24:53,760
certain directories within windows where

787
00:24:51,919 --> 00:24:54,559
documents are typically stored and if

788
00:24:53,760 --> 00:24:57,760
they don't see

789
00:24:54,559 --> 00:24:59,360
any indication of normal long-term user

790
00:24:57,760 --> 00:25:00,320
activity the malware will once again

791
00:24:59,360 --> 00:25:02,320
assume it's being

792
00:25:00,320 --> 00:25:04,000
uh detonated in an analysis environment

793
00:25:02,320 --> 00:25:05,200
and terminate prior to showing any of

794
00:25:04,000 --> 00:25:08,320
the malicious activity

795
00:25:05,200 --> 00:25:10,960
the malware is actually designed to do

796
00:25:08,320 --> 00:25:11,600
so the good news is that there are a lot

797
00:25:10,960 --> 00:25:13,520
of

798
00:25:11,600 --> 00:25:15,600
anti-vm detection tools that have been

799
00:25:13,520 --> 00:25:17,120
developed that if you're creating a

800
00:25:15,600 --> 00:25:18,959
malware analysis environment if you're

801
00:25:17,120 --> 00:25:20,639
standing up or creating your own sandbox

802
00:25:18,960 --> 00:25:22,400
if you're installing cuckoo or

803
00:25:20,640 --> 00:25:23,760
if you're just setting up vms for your

804
00:25:22,400 --> 00:25:24,559
own personal malware analysis

805
00:25:23,760 --> 00:25:25,840
environment

806
00:25:24,559 --> 00:25:28,080
you should really check out these

807
00:25:25,840 --> 00:25:31,439
utilities because they typically

808
00:25:28,080 --> 00:25:32,720
provide a way to run an executable or

809
00:25:31,440 --> 00:25:35,679
script within the vm

810
00:25:32,720 --> 00:25:36,720
before you are ready to put it into your

811
00:25:35,679 --> 00:25:38,080
analysis lab

812
00:25:36,720 --> 00:25:40,559
and they will let you know what they

813
00:25:38,080 --> 00:25:42,639
find so they simulate a lot of the same

814
00:25:40,559 --> 00:25:44,399
detection techniques that are present

815
00:25:42,640 --> 00:25:46,000
within malware and they'll let you know

816
00:25:44,400 --> 00:25:47,600
if you're

817
00:25:46,000 --> 00:25:50,000
sufficiently hardened against those

818
00:25:47,600 --> 00:25:50,719
sorts of techniques so alcazar is one

819
00:25:50,000 --> 00:25:52,960
example

820
00:25:50,720 --> 00:25:54,480
a paranoid fish is another example where

821
00:25:52,960 --> 00:25:56,400
when you're initially standing up your

822
00:25:54,480 --> 00:25:58,480
vms you can get these utilities

823
00:25:56,400 --> 00:26:00,080
run them in your vm and then look at the

824
00:25:58,480 --> 00:26:01,039
report to see if you need to harden your

825
00:26:00,080 --> 00:26:03,199
hypervisor

826
00:26:01,039 --> 00:26:04,879
if there's artifacts that are present in

827
00:26:03,200 --> 00:26:05,919
your system that are easily detectable

828
00:26:04,880 --> 00:26:08,080
by malware

829
00:26:05,919 --> 00:26:08,960
and this will make your your sandbox way

830
00:26:08,080 --> 00:26:11,199
more effective

831
00:26:08,960 --> 00:26:13,279
when you're trying to analyze malware

832
00:26:11,200 --> 00:26:15,200
that you may come across in the wild

833
00:26:13,279 --> 00:26:16,400
vbox hardened loader is another good

834
00:26:15,200 --> 00:26:18,400
example of

835
00:26:16,400 --> 00:26:20,640
a situation where you can harden the

836
00:26:18,400 --> 00:26:22,960
hypervisor from within the host

837
00:26:20,640 --> 00:26:23,679
system itself so that when you create

838
00:26:22,960 --> 00:26:25,600
vms

839
00:26:23,679 --> 00:26:27,840
a lot of the registry based metadata the

840
00:26:25,600 --> 00:26:29,199
hardware profile of the vm

841
00:26:27,840 --> 00:26:31,360
isn't indicative that it's present

842
00:26:29,200 --> 00:26:34,799
within virtualbox it looks more like

843
00:26:31,360 --> 00:26:36,399
a legitimate physical system

844
00:26:34,799 --> 00:26:38,080
so with that i'll pass it back over to

845
00:26:36,400 --> 00:26:39,440
nick to talk about uh some of what we

846
00:26:38,080 --> 00:26:42,879
see from from a network

847
00:26:39,440 --> 00:26:44,799
communications perspective thanks edmund

848
00:26:42,880 --> 00:26:47,200
so to this point we've kind of focused

849
00:26:44,799 --> 00:26:47,840
primarily on the actual evasion and

850
00:26:47,200 --> 00:26:50,880
armoring

851
00:26:47,840 --> 00:26:52,158
of the executable or of the code itself

852
00:26:50,880 --> 00:26:54,000
i'm going to spend a little bit of time

853
00:26:52,159 --> 00:26:54,640
talking about how adversaries kind of

854
00:26:54,000 --> 00:26:57,760
hide

855
00:26:54,640 --> 00:26:59,120
from a network perspective

856
00:26:57,760 --> 00:27:01,919
so this is something that we see

857
00:26:59,120 --> 00:27:03,840
commonly uh there are a couple of major

858
00:27:01,919 --> 00:27:06,080
categories that they fall into

859
00:27:03,840 --> 00:27:06,959
uh one of the biggest ones is tor

860
00:27:06,080 --> 00:27:10,639
back-end so

861
00:27:06,960 --> 00:27:11,360
it's either tor or um i2p.re or one of

862
00:27:10,640 --> 00:27:13,840
these other

863
00:27:11,360 --> 00:27:15,760
anonymous network services that allows

864
00:27:13,840 --> 00:27:18,720
adversaries to kind of hide

865
00:27:15,760 --> 00:27:19,840
their true malicious content in a in an

866
00:27:18,720 --> 00:27:20,559
environment that's a little more

867
00:27:19,840 --> 00:27:22,720
challenging

868
00:27:20,559 --> 00:27:23,918
uh to identify uh one of the other

869
00:27:22,720 --> 00:27:24,880
things that we commonly see is

870
00:27:23,919 --> 00:27:26,960
geofencing

871
00:27:24,880 --> 00:27:28,240
uh this is just saying i'm only gonna

872
00:27:26,960 --> 00:27:30,159
execute if you are

873
00:27:28,240 --> 00:27:31,440
in a place that i want you to be when

874
00:27:30,159 --> 00:27:34,640
execution occurs

875
00:27:31,440 --> 00:27:36,240
uh we see this from time time it is

876
00:27:34,640 --> 00:27:38,320
occasionally used by

877
00:27:36,240 --> 00:27:39,440
uh commodity malware authors as well as

878
00:27:38,320 --> 00:27:41,600
a way to kind of

879
00:27:39,440 --> 00:27:43,120
restrict where their malware is being

880
00:27:41,600 --> 00:27:44,559
detonated

881
00:27:43,120 --> 00:27:46,559
and then we see a bunch of different

882
00:27:44,559 --> 00:27:49,120
behaviors and ways around

883
00:27:46,559 --> 00:27:50,720
proxy connections there has been a long

884
00:27:49,120 --> 00:27:52,158
time where people have used compromised

885
00:27:50,720 --> 00:27:52,640
systems but i'm going to talk a little

886
00:27:52,159 --> 00:27:54,159
bit

887
00:27:52,640 --> 00:27:56,559
about some of the newer techniques that

888
00:27:54,159 --> 00:27:58,159
we've seen

889
00:27:56,559 --> 00:28:00,879
as far as threats that we've covered

890
00:27:58,159 --> 00:28:01,520
that display this type of behavior um

891
00:28:00,880 --> 00:28:04,159
one of the

892
00:28:01,520 --> 00:28:06,080
the that's a lot of rat behavior

893
00:28:04,159 --> 00:28:08,240
actually athena go and load a rat

894
00:28:06,080 --> 00:28:09,760
and and some of the stuff that that

895
00:28:08,240 --> 00:28:11,679
edmund mentioned with gravity rat as

896
00:28:09,760 --> 00:28:12,799
well not just on the network side but on

897
00:28:11,679 --> 00:28:15,200
the evasion side

898
00:28:12,799 --> 00:28:16,559
we commonly see rats implementing a lot

899
00:28:15,200 --> 00:28:18,559
of these techniques

900
00:28:16,559 --> 00:28:20,799
additionally we've seen jasper loader do

901
00:28:18,559 --> 00:28:22,960
some interesting stuff around geofencing

902
00:28:20,799 --> 00:28:25,440
and then exploit kits and malvertising

903
00:28:22,960 --> 00:28:27,039
are always great examples for ways that

904
00:28:25,440 --> 00:28:30,159
adversaries are going to

905
00:28:27,039 --> 00:28:31,279
kind of obfuscate their intentions using

906
00:28:30,159 --> 00:28:32,799
network techniques

907
00:28:31,279 --> 00:28:35,760
just because the behavior is so

908
00:28:32,799 --> 00:28:37,840
dependent on network behavior

909
00:28:35,760 --> 00:28:39,360
so let's start by talking about uh tour

910
00:28:37,840 --> 00:28:41,600
back-ends and toward a web

911
00:28:39,360 --> 00:28:42,639
so basically what adversaries are doing

912
00:28:41,600 --> 00:28:44,879
and we've seen this

913
00:28:42,640 --> 00:28:46,000
on in exploit kits as i was doing my

914
00:28:44,880 --> 00:28:48,159
research is

915
00:28:46,000 --> 00:28:50,240
they have made it so that the initial

916
00:28:48,159 --> 00:28:52,399
system that's connected to the internet

917
00:28:50,240 --> 00:28:54,720
has very little functionality it's

918
00:28:52,399 --> 00:28:56,639
basically configured as a pass-through

919
00:28:54,720 --> 00:28:58,240
the way that they do that is varied

920
00:28:56,640 --> 00:28:59,760
there's a lot of different ways you can

921
00:28:58,240 --> 00:29:02,080
use stuff like torta web

922
00:28:59,760 --> 00:29:04,080
this is actually surprisingly simple i

923
00:29:02,080 --> 00:29:06,080
configured this in like 20 minutes

924
00:29:04,080 --> 00:29:07,199
you basically can stand up a server

925
00:29:06,080 --> 00:29:09,840
install toward a web

926
00:29:07,200 --> 00:29:11,760
and tell it where to point to and from

927
00:29:09,840 --> 00:29:13,760
the clear web you can access whatever

928
00:29:11,760 --> 00:29:15,919
content on the dark web you want

929
00:29:13,760 --> 00:29:16,960
now the reason this is appealing to

930
00:29:15,919 --> 00:29:19,760
adversaries

931
00:29:16,960 --> 00:29:21,279
is now instead of having to host malware

932
00:29:19,760 --> 00:29:23,120
on systems that say

933
00:29:21,279 --> 00:29:25,279
law enforcement can easily seize and

934
00:29:23,120 --> 00:29:26,000
take down all you're doing is seizing

935
00:29:25,279 --> 00:29:28,320
and take down

936
00:29:26,000 --> 00:29:29,760
taking down a server that points to

937
00:29:28,320 --> 00:29:30,639
another server that's sitting on the

938
00:29:29,760 --> 00:29:32,559
dark web

939
00:29:30,640 --> 00:29:34,000
on the dark web is where all of the

940
00:29:32,559 --> 00:29:35,678
malicious content resides

941
00:29:34,000 --> 00:29:37,440
all the malware executables that kind of

942
00:29:35,679 --> 00:29:40,240
stuff it really makes

943
00:29:37,440 --> 00:29:40,960
your tracking down on the back end much

944
00:29:40,240 --> 00:29:42,559
more difficult

945
00:29:40,960 --> 00:29:44,399
and we see this not just for malicious

946
00:29:42,559 --> 00:29:45,360
behavior but for command and control

947
00:29:44,399 --> 00:29:47,918
behavior

948
00:29:45,360 --> 00:29:49,199
just trying to get as much of the

949
00:29:47,919 --> 00:29:51,279
malicious activity

950
00:29:49,200 --> 00:29:52,960
off of the clearweb and moving it to the

951
00:29:51,279 --> 00:29:55,360
dark web just to make

952
00:29:52,960 --> 00:29:56,000
analysis and even like law enforcement

953
00:29:55,360 --> 00:29:59,199
action

954
00:29:56,000 --> 00:30:01,120
that much more difficult now i mentioned

955
00:29:59,200 --> 00:30:04,399
geofencing a couple of times

956
00:30:01,120 --> 00:30:06,639
the basic concept here is i will only

957
00:30:04,399 --> 00:30:08,320
provide you the malicious content if you

958
00:30:06,640 --> 00:30:10,799
are where i want you to be

959
00:30:08,320 --> 00:30:12,240
an easiest example to that more recently

960
00:30:10,799 --> 00:30:14,879
is jasper loader

961
00:30:12,240 --> 00:30:16,720
jasper loader specifically targets italy

962
00:30:14,880 --> 00:30:19,679
they use something called pec

963
00:30:16,720 --> 00:30:20,399
emails in italy there is a standardized

964
00:30:19,679 --> 00:30:23,200
process

965
00:30:20,399 --> 00:30:25,199
for sending people invoices and that

966
00:30:23,200 --> 00:30:26,080
includes using this this service called

967
00:30:25,200 --> 00:30:28,480
pec

968
00:30:26,080 --> 00:30:29,120
so they they leverage that to send

969
00:30:28,480 --> 00:30:32,000
people

970
00:30:29,120 --> 00:30:32,879
malicious links what's interesting is if

971
00:30:32,000 --> 00:30:34,399
you're in italy

972
00:30:32,880 --> 00:30:35,880
and you click the link as you can see on

973
00:30:34,399 --> 00:30:37,039
the right here it's a get for

974
00:30:35,880 --> 00:30:38,880
documento.zip

975
00:30:37,039 --> 00:30:40,559
right well if you're in italy you get

976
00:30:38,880 --> 00:30:42,720
the malware it's not hard

977
00:30:40,559 --> 00:30:44,559
however if you are outside of italy you

978
00:30:42,720 --> 00:30:48,159
then get directed to

979
00:30:44,559 --> 00:30:51,760
us cnnic.cn which is the china

980
00:30:48,159 --> 00:30:53,600
nick organization now from a

981
00:30:51,760 --> 00:30:55,440
execution perspective since they're

982
00:30:53,600 --> 00:30:58,240
using pec emails which is

983
00:30:55,440 --> 00:31:00,240
only used in italy your victimology is

984
00:30:58,240 --> 00:31:02,000
going to be primarily italian

985
00:31:00,240 --> 00:31:03,760
the reason that you do this is

986
00:31:02,000 --> 00:31:04,799
specifically to avoid things like

987
00:31:03,760 --> 00:31:06,640
sandboxes

988
00:31:04,799 --> 00:31:08,399
or researchers from all around the world

989
00:31:06,640 --> 00:31:11,440
that are attempting to do this

990
00:31:08,399 --> 00:31:13,360
in order to analyze this malware truly

991
00:31:11,440 --> 00:31:14,960
you have to have a system that appears

992
00:31:13,360 --> 00:31:18,559
as though it's residing in italy

993
00:31:14,960 --> 00:31:20,720
which again is not a huge ask but it

994
00:31:18,559 --> 00:31:22,720
increases the difficulty increases the

995
00:31:20,720 --> 00:31:23,679
the effort required to do the actual

996
00:31:22,720 --> 00:31:25,440
analysis

997
00:31:23,679 --> 00:31:27,519
and things like sandboxes may not even

998
00:31:25,440 --> 00:31:29,440
support the type of functionality

999
00:31:27,519 --> 00:31:32,480
to allow you to look like you're coming

1000
00:31:29,440 --> 00:31:34,960
from another country

1001
00:31:32,480 --> 00:31:36,640
so i've mentioned proxy connections and

1002
00:31:34,960 --> 00:31:38,640
there are lots of examples of this but

1003
00:31:36,640 --> 00:31:40,559
what we see more and more of is this use

1004
00:31:38,640 --> 00:31:43,760
of port map or ngrok

1005
00:31:40,559 --> 00:31:44,879
the the concept here is uh it allows you

1006
00:31:43,760 --> 00:31:47,360
to access

1007
00:31:44,880 --> 00:31:48,720
systems from anywhere so from a

1008
00:31:47,360 --> 00:31:51,039
malicious perspective

1009
00:31:48,720 --> 00:31:53,200
you have a victim pc and you have a c2

1010
00:31:51,039 --> 00:31:54,158
server so basically what happens is your

1011
00:31:53,200 --> 00:31:56,880
c2 server

1012
00:31:54,159 --> 00:31:59,039
will establish an open vpn connection to

1013
00:31:56,880 --> 00:32:00,000
in this case portmap.io but it could be

1014
00:31:59,039 --> 00:32:01,919
ngrok or any

1015
00:32:00,000 --> 00:32:04,880
of the other services associated with

1016
00:32:01,919 --> 00:32:05,840
this uh when this openvpn connection is

1017
00:32:04,880 --> 00:32:08,720
established

1018
00:32:05,840 --> 00:32:10,320
portmap.io basically assigns a domain to

1019
00:32:08,720 --> 00:32:12,640
that connection that allows you to

1020
00:32:10,320 --> 00:32:15,439
access that openvpn connection

1021
00:32:12,640 --> 00:32:17,360
from anywhere using that domain so what

1022
00:32:15,440 --> 00:32:19,360
the bad guys do is they then embed

1023
00:32:17,360 --> 00:32:21,199
that domain in their malware so when a

1024
00:32:19,360 --> 00:32:24,000
victim gets compromised

1025
00:32:21,200 --> 00:32:24,799
they are connecting to a port map dot io

1026
00:32:24,000 --> 00:32:27,120
domain

1027
00:32:24,799 --> 00:32:29,120
which then forwards that connection all

1028
00:32:27,120 --> 00:32:31,360
the way through to the c2 server

1029
00:32:29,120 --> 00:32:32,559
the c2 server can then respond to port

1030
00:32:31,360 --> 00:32:34,879
map.io

1031
00:32:32,559 --> 00:32:36,720
which then will forward the responses on

1032
00:32:34,880 --> 00:32:38,080
to the end system

1033
00:32:36,720 --> 00:32:40,640
now you can imagine why this is

1034
00:32:38,080 --> 00:32:42,960
attractive for the adversary the victim

1035
00:32:40,640 --> 00:32:44,960
never knows the true identity of the c2

1036
00:32:42,960 --> 00:32:46,399
server all they have is a domain that

1037
00:32:44,960 --> 00:32:48,799
points to port map

1038
00:32:46,399 --> 00:32:49,678
and then from a defense and protection

1039
00:32:48,799 --> 00:32:52,240
perspective

1040
00:32:49,679 --> 00:32:54,000
you know portmap.io is potentially used

1041
00:32:52,240 --> 00:32:54,720
by a lot of companies it's an official

1042
00:32:54,000 --> 00:32:56,320
business

1043
00:32:54,720 --> 00:32:58,480
utility that's used by a lot of

1044
00:32:56,320 --> 00:33:00,559
enterprises so it becomes more difficult

1045
00:32:58,480 --> 00:33:01,679
to do things like blanket block port

1046
00:33:00,559 --> 00:33:03,120
map.io

1047
00:33:01,679 --> 00:33:05,279
additionally you're not going to have

1048
00:33:03,120 --> 00:33:07,600
things like blacklisting across the

1049
00:33:05,279 --> 00:33:09,440
board be happening for portmap.io right

1050
00:33:07,600 --> 00:33:11,519
it is a legitimate business tool

1051
00:33:09,440 --> 00:33:13,519
so you're going to have to piecemeal

1052
00:33:11,519 --> 00:33:14,960
through specific c2 domains

1053
00:33:13,519 --> 00:33:17,279
instead of blacklisting the entire

1054
00:33:14,960 --> 00:33:18,320
domain again allowing adversaries to

1055
00:33:17,279 --> 00:33:20,240
take advantage

1056
00:33:18,320 --> 00:33:22,840
allowing communication to bypass

1057
00:33:20,240 --> 00:33:24,640
simplistic types of security controls as

1058
00:33:22,840 --> 00:33:26,240
well

1059
00:33:24,640 --> 00:33:27,919
okay so let's talk a little bit about

1060
00:33:26,240 --> 00:33:30,000
malvertising and exploit kits

1061
00:33:27,919 --> 00:33:31,440
these kind of go hand in hand and both

1062
00:33:30,000 --> 00:33:34,960
of them can use

1063
00:33:31,440 --> 00:33:36,480
various types of network uh protections

1064
00:33:34,960 --> 00:33:38,399
along the way

1065
00:33:36,480 --> 00:33:40,960
we commonly will see advertising do

1066
00:33:38,399 --> 00:33:42,000
things like uh geo-fencing but in kind

1067
00:33:40,960 --> 00:33:43,919
of a different way

1068
00:33:42,000 --> 00:33:45,840
they'll try and figure out what type of

1069
00:33:43,919 --> 00:33:47,120
payload to deliver to you based on where

1070
00:33:45,840 --> 00:33:48,799
you are

1071
00:33:47,120 --> 00:33:50,799
so for those of you that aren't really

1072
00:33:48,799 --> 00:33:52,000
familiar with how malvertising works

1073
00:33:50,799 --> 00:33:54,080
let me kind of walk you through it

1074
00:33:52,000 --> 00:33:56,320
quickly every time you

1075
00:33:54,080 --> 00:33:58,480
click a web page whether it's click a

1076
00:33:56,320 --> 00:34:00,080
link hit enter on a url whatever

1077
00:33:58,480 --> 00:34:01,600
what's happening is you're communicating

1078
00:34:00,080 --> 00:34:03,039
with a bunch of systems that you don't

1079
00:34:01,600 --> 00:34:04,639
necessarily realize

1080
00:34:03,039 --> 00:34:06,240
yes you're communicating with the web

1081
00:34:04,640 --> 00:34:08,800
page that's serving you the

1082
00:34:06,240 --> 00:34:10,399
the actual content but behind the scenes

1083
00:34:08,800 --> 00:34:11,359
that web page is communicating with a

1084
00:34:10,399 --> 00:34:13,279
publisher

1085
00:34:11,359 --> 00:34:15,119
talking to an ad exchange and

1086
00:34:13,280 --> 00:34:17,599
advertisers and actually

1087
00:34:15,119 --> 00:34:19,679
opening up real-time bidding for every

1088
00:34:17,599 --> 00:34:20,800
piece of ad space that's available on

1089
00:34:19,679 --> 00:34:22,480
that web page

1090
00:34:20,800 --> 00:34:24,720
and this happens literally in a

1091
00:34:22,480 --> 00:34:25,199
microsecond it happens every time you

1092
00:34:24,719 --> 00:34:27,199
click

1093
00:34:25,199 --> 00:34:29,759
and every time you hit enter so as you

1094
00:34:27,199 --> 00:34:30,078
can imagine it is very attractive avenue

1095
00:34:29,760 --> 00:34:32,560
for

1096
00:34:30,079 --> 00:34:34,560
actors to take advantage of what we

1097
00:34:32,560 --> 00:34:35,440
commonly see is kind of a two-fold

1098
00:34:34,560 --> 00:34:37,119
approach

1099
00:34:35,440 --> 00:34:38,560
you have bad actors who actually

1100
00:34:37,119 --> 00:34:41,599
participate in the bidding

1101
00:34:38,560 --> 00:34:43,599
and will buy ads at a very low price so

1102
00:34:41,599 --> 00:34:44,800
it allows them to push this malicious

1103
00:34:43,599 --> 00:34:46,000
content

1104
00:34:44,800 --> 00:34:48,159
the other thing that we'll see is

1105
00:34:46,000 --> 00:34:50,960
they'll actually compromise

1106
00:34:48,159 --> 00:34:51,440
advertisers or ad exchanges directly and

1107
00:34:50,960 --> 00:34:53,679
add

1108
00:34:51,440 --> 00:34:55,440
malicious content to all the ads that

1109
00:34:53,679 --> 00:34:58,000
are being rendered out of that ad

1110
00:34:55,440 --> 00:34:59,760
exchange or that advertiser specifically

1111
00:34:58,000 --> 00:35:02,960
the basic behavior for this though

1112
00:34:59,760 --> 00:35:04,160
is you have a typical ad but that ad has

1113
00:35:02,960 --> 00:35:06,160
a little bit extra

1114
00:35:04,160 --> 00:35:08,078
on to it what it typically is doing is

1115
00:35:06,160 --> 00:35:10,240
interacting with something called a tds

1116
00:35:08,079 --> 00:35:11,680
which is a traffic direction service it

1117
00:35:10,240 --> 00:35:13,759
basically directs

1118
00:35:11,680 --> 00:35:15,279
the the victim to where they need to go

1119
00:35:13,760 --> 00:35:17,520
so that can do things like

1120
00:35:15,280 --> 00:35:19,040
direct you to an exploit kit or it could

1121
00:35:17,520 --> 00:35:21,520
direct you to a benign page

1122
00:35:19,040 --> 00:35:22,480
it could direct you to say a fake adobe

1123
00:35:21,520 --> 00:35:25,119
flash update

1124
00:35:22,480 --> 00:35:25,680
or a tech support scam the ways that you

1125
00:35:25,119 --> 00:35:28,240
can get

1126
00:35:25,680 --> 00:35:29,520
malicious content will vary widely

1127
00:35:28,240 --> 00:35:31,598
depending on

1128
00:35:29,520 --> 00:35:33,280
where you are what type of system you're

1129
00:35:31,599 --> 00:35:34,240
on so so for instance if you're on your

1130
00:35:33,280 --> 00:35:36,160
mobile phone

1131
00:35:34,240 --> 00:35:37,680
and you're viewing a web page it doesn't

1132
00:35:36,160 --> 00:35:39,598
make much sense for an ad

1133
00:35:37,680 --> 00:35:41,359
an adversary to send you to an exploit

1134
00:35:39,599 --> 00:35:42,079
kit because you can't be compromised on

1135
00:35:41,359 --> 00:35:44,240
your phone

1136
00:35:42,079 --> 00:35:45,599
by an exploit kit but what you can do is

1137
00:35:44,240 --> 00:35:48,000
be susceptible to

1138
00:35:45,599 --> 00:35:50,240
uh a fake flash update a tech support

1139
00:35:48,000 --> 00:35:51,920
scam or some sort of android malware say

1140
00:35:50,240 --> 00:35:53,759
if you're on an android platform

1141
00:35:51,920 --> 00:35:55,680
this is how this type of network

1142
00:35:53,760 --> 00:35:58,079
protection can operate

1143
00:35:55,680 --> 00:35:59,520
now on the back end we have seen exploit

1144
00:35:58,079 --> 00:36:01,119
kits use things like tor

1145
00:35:59,520 --> 00:36:02,720
on the back end and do other types of

1146
00:36:01,119 --> 00:36:05,359
geo fencing to help

1147
00:36:02,720 --> 00:36:06,480
protect the type of um information

1148
00:36:05,359 --> 00:36:07,759
that's exposed

1149
00:36:06,480 --> 00:36:09,680
these are the types of things that we

1150
00:36:07,760 --> 00:36:10,960
commonly see so let's kind of

1151
00:36:09,680 --> 00:36:13,440
tie it all together and i'll hand it

1152
00:36:10,960 --> 00:36:14,800
back to edmond thank you

1153
00:36:13,440 --> 00:36:17,280
so yeah we wanted to kind of walk

1154
00:36:14,800 --> 00:36:20,079
through a case study and uh

1155
00:36:17,280 --> 00:36:21,440
we wanted to focus on a threat that

1156
00:36:20,079 --> 00:36:22,880
takes advantage of a lot of the

1157
00:36:21,440 --> 00:36:24,320
different techniques that that we see

1158
00:36:22,880 --> 00:36:25,920
across the board

1159
00:36:24,320 --> 00:36:27,599
in a lot of cases you'll see malware

1160
00:36:25,920 --> 00:36:29,599
implement a subset of these

1161
00:36:27,599 --> 00:36:30,640
but uh with asteroth it's also referred

1162
00:36:29,599 --> 00:36:32,800
to as gildma

1163
00:36:30,640 --> 00:36:34,799
uh we we saw them implement pretty much

1164
00:36:32,800 --> 00:36:36,000
it seemed like every mechanism under the

1165
00:36:34,800 --> 00:36:37,920
sun that they could

1166
00:36:36,000 --> 00:36:40,079
to try to ensure that they were only

1167
00:36:37,920 --> 00:36:41,280
analyzing in the specific environments

1168
00:36:40,079 --> 00:36:42,960
they were interested in

1169
00:36:41,280 --> 00:36:45,280
and so this is what the the overall

1170
00:36:42,960 --> 00:36:48,079
infection process kind of looks like

1171
00:36:45,280 --> 00:36:49,200
asteroth is a banking trojan that was

1172
00:36:48,079 --> 00:36:51,760
heavily targeting

1173
00:36:49,200 --> 00:36:54,078
brazilian financial institutions so they

1174
00:36:51,760 --> 00:36:56,960
were interested in victims located

1175
00:36:54,079 --> 00:36:58,960
in brazil so the initial distribution

1176
00:36:56,960 --> 00:37:00,480
mechanism used by asteroth is email

1177
00:36:58,960 --> 00:37:01,680
based so they would send an email the

1178
00:37:00,480 --> 00:37:04,480
email had a

1179
00:37:01,680 --> 00:37:06,319
link if the victim clicks on the link

1180
00:37:04,480 --> 00:37:08,640
they're redirected to

1181
00:37:06,320 --> 00:37:09,520
a web server that the attacker has

1182
00:37:08,640 --> 00:37:12,560
planted an

1183
00:37:09,520 --> 00:37:14,880
invisible iframe on the iframe functions

1184
00:37:12,560 --> 00:37:15,759
as a soft redirect over to the actual

1185
00:37:14,880 --> 00:37:17,599
attacker

1186
00:37:15,760 --> 00:37:20,240
distribution infrastructure which is

1187
00:37:17,599 --> 00:37:22,079
responsible for delivering a zip archive

1188
00:37:20,240 --> 00:37:24,160
inside of the zip archive is a windows

1189
00:37:22,079 --> 00:37:26,320
shortcut file if the victim

1190
00:37:24,160 --> 00:37:27,839
opens that shortcut file they initiate

1191
00:37:26,320 --> 00:37:29,520
the infection process which is a

1192
00:37:27,839 --> 00:37:33,040
multi-stage infection

1193
00:37:29,520 --> 00:37:33,920
uh that involves some some jscript lol

1194
00:37:33,040 --> 00:37:36,720
bin usage

1195
00:37:33,920 --> 00:37:38,800
the retrieval of additional payloads but

1196
00:37:36,720 --> 00:37:41,118
one of the most interesting

1197
00:37:38,800 --> 00:37:43,280
aspects of this infection was the myriad

1198
00:37:41,119 --> 00:37:45,680
of anti-analysis

1199
00:37:43,280 --> 00:37:46,720
and evasion techniques that the malware

1200
00:37:45,680 --> 00:37:48,560
author had used

1201
00:37:46,720 --> 00:37:50,078
to try to make sure they were only being

1202
00:37:48,560 --> 00:37:51,279
executed in environments they were

1203
00:37:50,079 --> 00:37:53,200
interested in and i'll kind of walk

1204
00:37:51,280 --> 00:37:54,800
through what those look like

1205
00:37:53,200 --> 00:37:56,399
so i mentioned this is an email-based

1206
00:37:54,800 --> 00:37:58,720
threat and here are a couple examples of

1207
00:37:56,400 --> 00:38:00,640
some of the lure emails that we saw

1208
00:37:58,720 --> 00:38:02,560
that were attempting to entice potential

1209
00:38:00,640 --> 00:38:04,000
victims to infect themselves with

1210
00:38:02,560 --> 00:38:06,560
asteroth you can see they put a lot

1211
00:38:04,000 --> 00:38:08,640
of effort into making the emails appear

1212
00:38:06,560 --> 00:38:10,640
legitimate the the one on the right

1213
00:38:08,640 --> 00:38:11,920
uh was purporting to be associated with

1214
00:38:10,640 --> 00:38:14,000
a localized

1215
00:38:11,920 --> 00:38:15,839
uh rental car organization you can see

1216
00:38:14,000 --> 00:38:18,160
they actually had taken the graphical

1217
00:38:15,839 --> 00:38:18,880
elements from the official website of

1218
00:38:18,160 --> 00:38:21,279
the

1219
00:38:18,880 --> 00:38:23,520
organization and they were using those

1220
00:38:21,280 --> 00:38:26,800
to try to win credibility to the email

1221
00:38:23,520 --> 00:38:29,119
itself and you can see the link there

1222
00:38:26,800 --> 00:38:31,040
to the malicious content to kick off the

1223
00:38:29,119 --> 00:38:33,040
infection process

1224
00:38:31,040 --> 00:38:34,960
so if you click that link uh you're

1225
00:38:33,040 --> 00:38:38,640
taken to a webpage

1226
00:38:34,960 --> 00:38:40,800
and the webpage only contains an iframe

1227
00:38:38,640 --> 00:38:43,118
that is responsible for redirecting the

1228
00:38:40,800 --> 00:38:44,880
client system to the actual distribution

1229
00:38:43,119 --> 00:38:46,800
infrastructure one thing of interest

1230
00:38:44,880 --> 00:38:48,640
is the relative positioning of this

1231
00:38:46,800 --> 00:38:51,520
iframe it was

1232
00:38:48,640 --> 00:38:53,598
configured to load off screen so it was

1233
00:38:51,520 --> 00:38:55,200
invisible to the victim but

1234
00:38:53,599 --> 00:38:57,280
once that redirection had occurred the

1235
00:38:55,200 --> 00:38:58,879
victim has delivered a zip archive and

1236
00:38:57,280 --> 00:39:02,079
inside of that zip archive

1237
00:38:58,880 --> 00:39:04,720
is an lnk file a malicious lnk file

1238
00:39:02,079 --> 00:39:05,520
so the lnk file is responsible for

1239
00:39:04,720 --> 00:39:07,839
writing a

1240
00:39:05,520 --> 00:39:10,640
malicious jscript file on the system and

1241
00:39:07,839 --> 00:39:12,720
then executing it to kick off the actual

1242
00:39:10,640 --> 00:39:14,480
retrieval of malicious content and bust

1243
00:39:12,720 --> 00:39:16,480
the infection process

1244
00:39:14,480 --> 00:39:17,520
so you can see the the call to get

1245
00:39:16,480 --> 00:39:20,160
object

1246
00:39:17,520 --> 00:39:22,640
to retrieve and execute a script located

1247
00:39:20,160 --> 00:39:26,960
on an attacker controlled server there

1248
00:39:22,640 --> 00:39:29,279
so that stage 2 jscript that's delivered

1249
00:39:26,960 --> 00:39:31,040
is heavily obfuscated with multiple

1250
00:39:29,280 --> 00:39:33,440
layers of obu station but

1251
00:39:31,040 --> 00:39:35,040
uh once you get through the uh the divi

1252
00:39:33,440 --> 00:39:36,640
station of the jscript loader you can

1253
00:39:35,040 --> 00:39:38,480
see it's responsible for

1254
00:39:36,640 --> 00:39:40,400
uh retrieving additional malicious

1255
00:39:38,480 --> 00:39:42,000
content um so

1256
00:39:40,400 --> 00:39:43,440
you can see that the comments there are

1257
00:39:42,000 --> 00:39:45,680
actually ones that i added while i was

1258
00:39:43,440 --> 00:39:47,200
analyzing this and de-obescating it

1259
00:39:45,680 --> 00:39:48,720
but what it's responsible for doing is

1260
00:39:47,200 --> 00:39:51,839
breaking up stage three

1261
00:39:48,720 --> 00:39:52,598
into three different chunks uh and using

1262
00:39:51,839 --> 00:39:54,240
a random

1263
00:39:52,599 --> 00:39:56,400
pseudo-randomization function to

1264
00:39:54,240 --> 00:39:58,560
randomize the url structure that will be

1265
00:39:56,400 --> 00:40:01,839
used to retrieve stage 3.

1266
00:39:58,560 --> 00:40:03,520
those are then combined to create three

1267
00:40:01,839 --> 00:40:05,839
separate uris

1268
00:40:03,520 --> 00:40:07,040
which the malware will then go out and

1269
00:40:05,839 --> 00:40:09,200
attempt to retrieve

1270
00:40:07,040 --> 00:40:11,440
malicious executables from in this case

1271
00:40:09,200 --> 00:40:12,160
they had actually split the stage three

1272
00:40:11,440 --> 00:40:14,800
payload

1273
00:40:12,160 --> 00:40:17,040
into three binary blobs so you you can

1274
00:40:14,800 --> 00:40:19,119
see the three http requests

1275
00:40:17,040 --> 00:40:21,040
uh that would be responsible for

1276
00:40:19,119 --> 00:40:23,520
retrieving the binary blobs

1277
00:40:21,040 --> 00:40:25,359
which once it was back on the the victim

1278
00:40:23,520 --> 00:40:26,079
system they would be combined to create

1279
00:40:25,359 --> 00:40:28,560
the

1280
00:40:26,079 --> 00:40:29,760
stage 3 dll which has been injected and

1281
00:40:28,560 --> 00:40:32,240
executed

1282
00:40:29,760 --> 00:40:34,079
so that stage 3 dll is what actually

1283
00:40:32,240 --> 00:40:35,598
implements a lot of the anti-analysis

1284
00:40:34,079 --> 00:40:36,720
and evasion that we've been talking

1285
00:40:35,599 --> 00:40:38,400
about and you can see

1286
00:40:36,720 --> 00:40:40,160
there's a laundry list of different

1287
00:40:38,400 --> 00:40:42,480
checks that are performed to determine

1288
00:40:40,160 --> 00:40:44,799
if the malware should continue to run

1289
00:40:42,480 --> 00:40:46,560
and if those all pass that only then

1290
00:40:44,800 --> 00:40:48,240
will the malware actually execute the

1291
00:40:46,560 --> 00:40:50,400
malicious capabilities

1292
00:40:48,240 --> 00:40:51,279
so this is what the code execution flow

1293
00:40:50,400 --> 00:40:53,920
looks like

1294
00:40:51,280 --> 00:40:55,359
uh for the anti-analysis stuff uh you

1295
00:40:53,920 --> 00:40:57,839
can see it's it's like a

1296
00:40:55,359 --> 00:41:00,160
minefield right um all of those uh

1297
00:40:57,839 --> 00:41:00,960
anti-analysis checks and sandbox checks

1298
00:41:00,160 --> 00:41:03,680
are performed

1299
00:41:00,960 --> 00:41:04,960
and if any of the uh the checks fail

1300
00:41:03,680 --> 00:41:06,960
indicating that the malware is being

1301
00:41:04,960 --> 00:41:09,119
executed in a virtual environment

1302
00:41:06,960 --> 00:41:10,720
rather than simply terminating execution

1303
00:41:09,119 --> 00:41:12,880
the malware will actually

1304
00:41:10,720 --> 00:41:14,560
reboot the system forcibly which is kind

1305
00:41:12,880 --> 00:41:16,560
of interesting we don't see that a lot

1306
00:41:14,560 --> 00:41:18,400
most of the time if malware

1307
00:41:16,560 --> 00:41:20,000
is implementing anti-analysis and one of

1308
00:41:18,400 --> 00:41:21,520
the checks fails uh the malware

1309
00:41:20,000 --> 00:41:24,400
will just terminate execution in this

1310
00:41:21,520 --> 00:41:27,119
case it would forcibly reboot the system

1311
00:41:24,400 --> 00:41:28,400
so uh let's kind of uh walk through some

1312
00:41:27,119 --> 00:41:29,280
of the the checks that the malware

1313
00:41:28,400 --> 00:41:30,800
performed

1314
00:41:29,280 --> 00:41:32,319
uh one of the the first things that it

1315
00:41:30,800 --> 00:41:33,520
would do is it would check for the

1316
00:41:32,319 --> 00:41:36,079
presence of

1317
00:41:33,520 --> 00:41:36,800
guest additions those utilities that you

1318
00:41:36,079 --> 00:41:38,880
can install

1319
00:41:36,800 --> 00:41:40,240
inside of a vm within vmware or

1320
00:41:38,880 --> 00:41:41,920
virtualbox

1321
00:41:40,240 --> 00:41:43,919
that make the user experience more

1322
00:41:41,920 --> 00:41:45,680
seamless that enable things like copy

1323
00:41:43,920 --> 00:41:46,319
paste and shared folders and things of

1324
00:41:45,680 --> 00:41:48,078
that nature

1325
00:41:46,319 --> 00:41:49,839
when you install those guest additions

1326
00:41:48,079 --> 00:41:51,760
they leave a ton of artifacts within the

1327
00:41:49,839 --> 00:41:53,680
vm within the registry as well as

1328
00:41:51,760 --> 00:41:55,599
uh via the presence of different

1329
00:41:53,680 --> 00:41:56,960
executables and processes that may be

1330
00:41:55,599 --> 00:41:58,240
running so now we would check for that

1331
00:41:56,960 --> 00:42:01,119
to determine if it was

1332
00:41:58,240 --> 00:42:03,439
uh being executed in a vm they would

1333
00:42:01,119 --> 00:42:05,920
also profile the hardware subsystem

1334
00:42:03,440 --> 00:42:08,000
of the infected machine to determine if

1335
00:42:05,920 --> 00:42:09,839
they could identify any hardware devices

1336
00:42:08,000 --> 00:42:11,119
that would be indicative of

1337
00:42:09,839 --> 00:42:13,839
the various hypervisors that are

1338
00:42:11,119 --> 00:42:17,839
commonly used a key mu

1339
00:42:13,839 --> 00:42:17,839
virtual box vmware things of that nature

1340
00:42:18,319 --> 00:42:21,200
one of the interesting checks that they

1341
00:42:19,680 --> 00:42:22,720
did was they actually looked at the

1342
00:42:21,200 --> 00:42:25,439
system bios date

1343
00:42:22,720 --> 00:42:26,720
to determine if it matched june 23rd

1344
00:42:25,440 --> 00:42:30,000
1999

1345
00:42:26,720 --> 00:42:33,520
which upon researching actually appears

1346
00:42:30,000 --> 00:42:36,960
to be the default system bios date stamp

1347
00:42:33,520 --> 00:42:36,960
associated with virtualbox

1348
00:42:37,040 --> 00:42:40,240
in addition to this one they also

1349
00:42:39,359 --> 00:42:42,799
checked for

1350
00:42:40,240 --> 00:42:44,160
the existing of running processes in the

1351
00:42:42,800 --> 00:42:46,720
vm that may indicate

1352
00:42:44,160 --> 00:42:48,319
that analysis tools were being run and

1353
00:42:46,720 --> 00:42:49,759
you can see the the list of all of the

1354
00:42:48,319 --> 00:42:51,440
different utilities that they were

1355
00:42:49,760 --> 00:42:52,960
specifically interested in

1356
00:42:51,440 --> 00:42:54,560
in addition to you know things like

1357
00:42:52,960 --> 00:42:56,240
debuggers and uh

1358
00:42:54,560 --> 00:42:58,319
disassemblers they were also looking for

1359
00:42:56,240 --> 00:43:01,040
a lot of the dynamic analysis tools

1360
00:42:58,319 --> 00:43:02,560
that malware analysts run in virtual

1361
00:43:01,040 --> 00:43:03,359
environments in their malware analysis

1362
00:43:02,560 --> 00:43:05,680
labs

1363
00:43:03,359 --> 00:43:07,359
as they're attempting to analyze malware

1364
00:43:05,680 --> 00:43:08,960
so if any of these processes were

1365
00:43:07,359 --> 00:43:10,078
detected the malware would reboot the

1366
00:43:08,960 --> 00:43:12,000
system

1367
00:43:10,079 --> 00:43:14,000
likewise they would try to get a handle

1368
00:43:12,000 --> 00:43:16,160
on uh various dlls

1369
00:43:14,000 --> 00:43:17,040
which if they exist on the system

1370
00:43:16,160 --> 00:43:19,118
indicate that

1371
00:43:17,040 --> 00:43:21,599
they're running in the sandboxy sandbox

1372
00:43:19,119 --> 00:43:21,599
environment

1373
00:43:23,040 --> 00:43:28,720
uh the uh an additional check was uh

1374
00:43:26,240 --> 00:43:30,319
for the product id they had a couple of

1375
00:43:28,720 --> 00:43:31,520
static values that they were checking

1376
00:43:30,319 --> 00:43:33,520
for and if the product

1377
00:43:31,520 --> 00:43:35,040
id of the system that the malware was

1378
00:43:33,520 --> 00:43:37,200
executing in matched these

1379
00:43:35,040 --> 00:43:39,119
values it was indicative that they were

1380
00:43:37,200 --> 00:43:42,640
being executed in a sandbox and

1381
00:43:39,119 --> 00:43:44,240
execution with terminate they were also

1382
00:43:42,640 --> 00:43:46,078
looking at the user

1383
00:43:44,240 --> 00:43:48,160
account that the malware was running in

1384
00:43:46,079 --> 00:43:51,040
to match them against a

1385
00:43:48,160 --> 00:43:52,640
list of username values that would also

1386
00:43:51,040 --> 00:43:55,839
indicate they were being analyzed

1387
00:43:52,640 --> 00:43:55,839
in a sandbox environment

1388
00:43:57,040 --> 00:44:01,200
they were checking for the presence of

1389
00:43:59,040 --> 00:44:02,880
hardware devices associated with soft

1390
00:44:01,200 --> 00:44:05,919
ice as well

1391
00:44:02,880 --> 00:44:07,680
to try to determine if analysis tools or

1392
00:44:05,920 --> 00:44:10,640
an analysis environment we're present

1393
00:44:07,680 --> 00:44:11,520
they also use the is debugger present

1394
00:44:10,640 --> 00:44:13,118
trick that's

1395
00:44:11,520 --> 00:44:15,839
really really common across various

1396
00:44:13,119 --> 00:44:15,839
malware out there

1397
00:44:16,560 --> 00:44:20,960
they were also using the peb the process

1398
00:44:19,200 --> 00:44:22,319
environment block to determine if there

1399
00:44:20,960 --> 00:44:23,920
was a debugger presence

1400
00:44:22,319 --> 00:44:25,440
and in addition to that they were

1401
00:44:23,920 --> 00:44:26,880
loading ncdl

1402
00:44:25,440 --> 00:44:28,720
and they were checking for the presence

1403
00:44:26,880 --> 00:44:30,400
of functions that are associated with

1404
00:44:28,720 --> 00:44:31,520
wine that would indicate that the

1405
00:44:30,400 --> 00:44:36,720
malware is being run

1406
00:44:31,520 --> 00:44:39,200
in a wine emulated environment

1407
00:44:36,720 --> 00:44:39,919
uh there was another set of dlls that

1408
00:44:39,200 --> 00:44:42,000
were also

1409
00:44:39,920 --> 00:44:43,599
checked for that would indicate that uh

1410
00:44:42,000 --> 00:44:45,119
they were running in a sandbox

1411
00:44:43,599 --> 00:44:47,040
uh and they would also look for

1412
00:44:45,119 --> 00:44:48,880
executables that were

1413
00:44:47,040 --> 00:44:50,720
associated with the key new hypervisor

1414
00:44:48,880 --> 00:44:53,359
as well to determine if the vm was in

1415
00:44:50,720 --> 00:44:55,118
a q environment and then finally they

1416
00:44:53,359 --> 00:44:56,880
were checking the language settings of

1417
00:44:55,119 --> 00:44:59,599
the system so they had a substring

1418
00:44:56,880 --> 00:44:59,920
poor 2 p-o-r-t-u and they were checking

1419
00:44:59,599 --> 00:45:01,680
the

1420
00:44:59,920 --> 00:45:03,760
language set of the system the malware

1421
00:45:01,680 --> 00:45:04,319
was executing on and they would only

1422
00:45:03,760 --> 00:45:06,560
continue

1423
00:45:04,319 --> 00:45:07,520
execution if the language set of the

1424
00:45:06,560 --> 00:45:10,640
system was

1425
00:45:07,520 --> 00:45:12,720
portuguese or a

1426
00:45:10,640 --> 00:45:14,960
portuguese variation present within

1427
00:45:12,720 --> 00:45:17,520
windows

1428
00:45:14,960 --> 00:45:19,200
so assuming all of those checks pass and

1429
00:45:17,520 --> 00:45:20,720
the malware is confident that is not

1430
00:45:19,200 --> 00:45:22,640
being analyzed and that it's not being

1431
00:45:20,720 --> 00:45:24,879
executed in a virtual environment

1432
00:45:22,640 --> 00:45:26,640
uh the malware would go out and retrieve

1433
00:45:24,880 --> 00:45:28,800
a stage four payload

1434
00:45:26,640 --> 00:45:30,240
uh and the stage four payload would then

1435
00:45:28,800 --> 00:45:31,839
be injected into the

1436
00:45:30,240 --> 00:45:34,160
user init process using process

1437
00:45:31,839 --> 00:45:36,160
hollowing um and so you can kind of see

1438
00:45:34,160 --> 00:45:37,440
the the functions associated with the

1439
00:45:36,160 --> 00:45:39,279
stage four payload

1440
00:45:37,440 --> 00:45:41,280
there was a lot of demonology referenced

1441
00:45:39,280 --> 00:45:42,720
throughout the uh the infection process

1442
00:45:41,280 --> 00:45:44,400
throughout the campaigns

1443
00:45:42,720 --> 00:45:46,000
um and one of the things that they had

1444
00:45:44,400 --> 00:45:47,920
done was they their versioning

1445
00:45:46,000 --> 00:45:49,520
of the malware was based on the names of

1446
00:45:47,920 --> 00:45:51,839
various uh demons

1447
00:45:49,520 --> 00:45:53,759
uh just during the analysis process uh

1448
00:45:51,839 --> 00:45:54,240
we identified that the uh the malware

1449
00:45:53,760 --> 00:45:56,560
had been

1450
00:45:54,240 --> 00:45:57,439
revisioned several times so this is a

1451
00:45:56,560 --> 00:45:59,759
constantly

1452
00:45:57,440 --> 00:46:01,520
evolving threat that's got continuous

1453
00:45:59,760 --> 00:46:02,880
development taking place

1454
00:46:01,520 --> 00:46:04,880
and one of the things that stage four

1455
00:46:02,880 --> 00:46:07,119
would do is it would check for

1456
00:46:04,880 --> 00:46:08,560
the existence of the latest version of

1457
00:46:07,119 --> 00:46:10,079
asteroth and if it

1458
00:46:08,560 --> 00:46:11,839
wasn't on the system it would go out and

1459
00:46:10,079 --> 00:46:13,599
retrieve that latest version just during

1460
00:46:11,839 --> 00:46:14,319
the the period of time we were analyzing

1461
00:46:13,599 --> 00:46:16,160
samples

1462
00:46:14,319 --> 00:46:17,440
we saw that version increment several

1463
00:46:16,160 --> 00:46:20,078
times

1464
00:46:17,440 --> 00:46:20,880
so in the case that uh that stage four

1465
00:46:20,079 --> 00:46:23,280
kicks off

1466
00:46:20,880 --> 00:46:24,240
and the the system's been infected uh

1467
00:46:23,280 --> 00:46:25,359
the

1468
00:46:24,240 --> 00:46:27,598
malware would actually go out and

1469
00:46:25,359 --> 00:46:29,359
retrieve additional modules and

1470
00:46:27,599 --> 00:46:31,200
the module payloads that were retrieved

1471
00:46:29,359 --> 00:46:32,880
would actually be stored using alternate

1472
00:46:31,200 --> 00:46:34,000
data streams on the system just another

1473
00:46:32,880 --> 00:46:36,880
mechanism to make

1474
00:46:34,000 --> 00:46:39,200
uh detection more difficult so stage

1475
00:46:36,880 --> 00:46:41,200
four ran through the entire list of

1476
00:46:39,200 --> 00:46:42,560
anti-analysis checks that i previously

1477
00:46:41,200 --> 00:46:44,799
described

1478
00:46:42,560 --> 00:46:46,160
in addition they also checked for the

1479
00:46:44,800 --> 00:46:48,240
system host name

1480
00:46:46,160 --> 00:46:49,200
so common sandboxes that are pretty

1481
00:46:48,240 --> 00:46:50,879
heavily used

1482
00:46:49,200 --> 00:46:52,480
across the information security industry

1483
00:46:50,880 --> 00:46:54,720
typically feature vms

1484
00:46:52,480 --> 00:46:56,079
that have specific host names so they

1485
00:46:54,720 --> 00:46:57,520
had a list of host names and they would

1486
00:46:56,079 --> 00:46:59,200
check the host name to the system that

1487
00:46:57,520 --> 00:47:00,640
stage four was executing on

1488
00:46:59,200 --> 00:47:02,879
to attempt to determine if they were

1489
00:47:00,640 --> 00:47:04,640
being executed on uh in a sandbox

1490
00:47:02,880 --> 00:47:06,400
environment you can see uh tequila boom

1491
00:47:04,640 --> 00:47:09,759
boom which is a pretty

1492
00:47:06,400 --> 00:47:12,000
commonly known vm hostname out there

1493
00:47:09,760 --> 00:47:13,359
so one of the real interesting ways that

1494
00:47:12,000 --> 00:47:15,599
uh commanding control was

1495
00:47:13,359 --> 00:47:16,640
uh initiated was through the use of

1496
00:47:15,599 --> 00:47:18,240
youtube channels

1497
00:47:16,640 --> 00:47:19,920
so what they would do is they would uh

1498
00:47:18,240 --> 00:47:22,240
the malware would attempt to retrieve

1499
00:47:19,920 --> 00:47:23,680
the c2 domains to use to establish a

1500
00:47:22,240 --> 00:47:26,000
command and control channel

1501
00:47:23,680 --> 00:47:26,799
with the attacker by going out to

1502
00:47:26,000 --> 00:47:28,880
youtube

1503
00:47:26,800 --> 00:47:30,640
and retrieving those c2 domains and you

1504
00:47:28,880 --> 00:47:32,720
can see that they had a list of youtube

1505
00:47:30,640 --> 00:47:35,839
channel urls that would be

1506
00:47:32,720 --> 00:47:37,279
accessed to try to retrieve the list of

1507
00:47:35,839 --> 00:47:39,759
domains the malware should use

1508
00:47:37,280 --> 00:47:41,839
to initiate command and control

1509
00:47:39,760 --> 00:47:43,760
communications

1510
00:47:41,839 --> 00:47:45,759
so the way this worked was the youtube

1511
00:47:43,760 --> 00:47:48,000
channels that the adversary had

1512
00:47:45,760 --> 00:47:49,280
created that were publicly available on

1513
00:47:48,000 --> 00:47:50,960
the internet

1514
00:47:49,280 --> 00:47:53,280
they used channel descriptions to

1515
00:47:50,960 --> 00:47:54,240
contain an encrypted and encoded list of

1516
00:47:53,280 --> 00:47:55,760
c2 domains

1517
00:47:54,240 --> 00:47:57,520
you can see an example of one of these

1518
00:47:55,760 --> 00:48:00,400
descriptions here where within the

1519
00:47:57,520 --> 00:48:01,920
the three pipe delimiters uh the list of

1520
00:48:00,400 --> 00:48:03,760
c2 domains has been

1521
00:48:01,920 --> 00:48:05,520
uh encrypted and then obfuscated with

1522
00:48:03,760 --> 00:48:07,599
base64 encoding

1523
00:48:05,520 --> 00:48:09,200
um and so we wrote a utility to

1524
00:48:07,599 --> 00:48:10,800
de-obfuscate that process and you can

1525
00:48:09,200 --> 00:48:11,359
see what that looks like here you take

1526
00:48:10,800 --> 00:48:13,040
the

1527
00:48:11,359 --> 00:48:15,279
youtube channel that you're interested

1528
00:48:13,040 --> 00:48:16,880
in uh and then you

1529
00:48:15,280 --> 00:48:18,400
use the blob that's present within the

1530
00:48:16,880 --> 00:48:20,640
youtube channel description and it'll

1531
00:48:18,400 --> 00:48:22,800
perform that decryption and decoding

1532
00:48:20,640 --> 00:48:23,680
and spit you out a list of the actual c2

1533
00:48:22,800 --> 00:48:25,680
domains that the

1534
00:48:23,680 --> 00:48:27,839
malware will attempt to initiate uh

1535
00:48:25,680 --> 00:48:29,359
communications with

1536
00:48:27,839 --> 00:48:30,640
in the case that the youtube channels

1537
00:48:29,359 --> 00:48:32,400
have been taken down or weren't

1538
00:48:30,640 --> 00:48:33,759
available there was actually a failback

1539
00:48:32,400 --> 00:48:35,920
c2 mechanism

1540
00:48:33,760 --> 00:48:38,160
whereby a hard-coded url present within

1541
00:48:35,920 --> 00:48:40,880
the malware could also be used to obtain

1542
00:48:38,160 --> 00:48:43,200
a list of c2 messages or a list of c2

1543
00:48:40,880 --> 00:48:45,040
domains to use

1544
00:48:43,200 --> 00:48:46,640
and this is what the the actual c2

1545
00:48:45,040 --> 00:48:48,558
beacon format look like

1546
00:48:46,640 --> 00:48:50,000
once a command and control channel had

1547
00:48:48,559 --> 00:48:50,720
been established you can see a lot of

1548
00:48:50,000 --> 00:48:52,640
the

1549
00:48:50,720 --> 00:48:55,040
normal information about the infected

1550
00:48:52,640 --> 00:48:56,720
system that we see pretty commonly with

1551
00:48:55,040 --> 00:48:58,558
command and control during things like

1552
00:48:56,720 --> 00:49:00,558
bot registration and things of that

1553
00:48:58,559 --> 00:49:03,440
nature

1554
00:49:00,559 --> 00:49:04,240
so this provided a case study in uh

1555
00:49:03,440 --> 00:49:06,400
evasion

1556
00:49:04,240 --> 00:49:09,040
techniques uh this malware was very very

1557
00:49:06,400 --> 00:49:10,800
evasive and the adversary behind it took

1558
00:49:09,040 --> 00:49:13,440
a lot of steps to ensure that they were

1559
00:49:10,800 --> 00:49:15,040
only uh executing within victim and

1560
00:49:13,440 --> 00:49:16,160
systems that they were interested in in

1561
00:49:15,040 --> 00:49:18,720
this case it was

1562
00:49:16,160 --> 00:49:19,759
uh the customers of brazilian financial

1563
00:49:18,720 --> 00:49:21,839
institutions

1564
00:49:19,760 --> 00:49:23,200
so from a defense and detection

1565
00:49:21,839 --> 00:49:24,720
standpoint you know there are a lot of

1566
00:49:23,200 --> 00:49:25,680
ways that you can detect this sort of

1567
00:49:24,720 --> 00:49:28,640
activity

1568
00:49:25,680 --> 00:49:30,879
um and this isn't just specific to

1569
00:49:28,640 --> 00:49:33,279
asteroth or malware evasion but these

1570
00:49:30,880 --> 00:49:36,079
are all best practices that can be used

1571
00:49:33,280 --> 00:49:38,160
in a variety of different scenarios to

1572
00:49:36,079 --> 00:49:40,000
actively detect and be able to respond

1573
00:49:38,160 --> 00:49:41,759
to different intrusions

1574
00:49:40,000 --> 00:49:43,839
part of defending against these sort of

1575
00:49:41,760 --> 00:49:46,000
threats is establishing a comprehensive

1576
00:49:43,839 --> 00:49:48,240
defense in-depth security architecture

1577
00:49:46,000 --> 00:49:49,839
that's multi-layered which each with

1578
00:49:48,240 --> 00:49:52,799
each security control working

1579
00:49:49,839 --> 00:49:56,400
in uh in parallel to provide the most

1580
00:49:52,800 --> 00:49:59,920
comprehensive protection possible

1581
00:49:56,400 --> 00:50:01,520
and so with that i will uh

1582
00:49:59,920 --> 00:50:03,280
i will leave you with uh you know one of

1583
00:50:01,520 --> 00:50:04,800
the things we do at talos is

1584
00:50:03,280 --> 00:50:06,400
we try to make as much information

1585
00:50:04,800 --> 00:50:08,480
available as possible

1586
00:50:06,400 --> 00:50:09,839
uh and so there's some resources if you

1587
00:50:08,480 --> 00:50:11,359
want to stay up to date on some of the

1588
00:50:09,839 --> 00:50:13,520
latest research that we're

1589
00:50:11,359 --> 00:50:15,040
we're doing this is available to uh you

1590
00:50:13,520 --> 00:50:16,400
know anyone that's interested in malware

1591
00:50:15,040 --> 00:50:17,440
that's interested in the latest threats

1592
00:50:16,400 --> 00:50:19,040
that we're seeing across the threat

1593
00:50:17,440 --> 00:50:20,480
landscape so i highly recommend checking

1594
00:50:19,040 --> 00:50:21,119
it out and with uh with that i'll open

1595
00:50:20,480 --> 00:50:27,839
it up for

1596
00:50:21,119 --> 00:50:27,839
any q a thanks everyone

1597
00:50:45,599 --> 00:50:47,680
you

