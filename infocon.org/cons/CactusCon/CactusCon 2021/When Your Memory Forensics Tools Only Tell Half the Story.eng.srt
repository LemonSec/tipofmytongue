1
00:00:04,960 --> 00:00:08,000
hey

2
00:00:05,359 --> 00:00:10,639
everyone russ with the reg team it's my

3
00:00:08,000 --> 00:00:12,719
pleasure to introduce our next speaker

4
00:00:10,639 --> 00:00:14,559
aaron sparling is an officer with the

5
00:00:12,719 --> 00:00:15,280
portland police bureau in portland

6
00:00:14,559 --> 00:00:17,198
oregon

7
00:00:15,280 --> 00:00:18,720
where he serves in the investigations

8
00:00:17,199 --> 00:00:21,039
branch of the forensic

9
00:00:18,720 --> 00:00:22,160
evidence divisions digital forensics

10
00:00:21,039 --> 00:00:24,800
unit

11
00:00:22,160 --> 00:00:26,240
aaron's talk today is titled when your

12
00:00:24,800 --> 00:00:29,359
memory forensics

13
00:00:26,240 --> 00:00:31,439
tools only tell half the story at the

14
00:00:29,359 --> 00:00:32,399
end of the talk there'll be a live q a

15
00:00:31,439 --> 00:00:33,840
with aaron

16
00:00:32,399 --> 00:00:35,680
just click the link that will be

17
00:00:33,840 --> 00:00:36,960
displayed at the end of the talk and

18
00:00:35,680 --> 00:00:40,320
you'll be taken to the q

19
00:00:36,960 --> 00:00:45,840
a channel so without any further delay

20
00:00:40,320 --> 00:00:45,840
here's aaron

21
00:00:49,520 --> 00:00:52,559
welcome to the presentation when your

22
00:00:51,440 --> 00:00:54,879
forensic tool

23
00:00:52,559 --> 00:00:55,839
only tells part of the story finding

24
00:00:54,879 --> 00:00:59,039
code injection

25
00:00:55,840 --> 00:01:00,559
with memory analysis i guess before

26
00:00:59,039 --> 00:01:01,760
diving into my presentation i should

27
00:01:00,559 --> 00:01:04,239
introduce myself

28
00:01:01,760 --> 00:01:05,920
my name is aaron sparling i'm an officer

29
00:01:04,239 --> 00:01:08,080
with the portland police bureau

30
00:01:05,920 --> 00:01:10,080
i've been with portland for almost 16

31
00:01:08,080 --> 00:01:12,000
years now for the last eight and a half

32
00:01:10,080 --> 00:01:13,520
i've been doing digital forensics and

33
00:01:12,000 --> 00:01:14,560
during that time i've been fortunate

34
00:01:13,520 --> 00:01:16,798
enough to been assigned to a couple

35
00:01:14,560 --> 00:01:18,560
different task forces

36
00:01:16,799 --> 00:01:19,840
to include the fbi cyber crimes task

37
00:01:18,560 --> 00:01:22,320
force and the united states secret

38
00:01:19,840 --> 00:01:23,840
service electronics crimes task force

39
00:01:22,320 --> 00:01:25,439
i currently am the chairman of the

40
00:01:23,840 --> 00:01:26,960
technical advisory council

41
00:01:25,439 --> 00:01:29,199
for the united states secret services

42
00:01:26,960 --> 00:01:32,240
national computer forensic institute

43
00:01:29,200 --> 00:01:34,479
in the ncfi in hoover alabama

44
00:01:32,240 --> 00:01:35,280
i have a couple certifications and most

45
00:01:34,479 --> 00:01:37,039
importantly

46
00:01:35,280 --> 00:01:38,720
i'm not a spelling bee champion so if

47
00:01:37,040 --> 00:01:40,079
you see a grammatical error or spelling

48
00:01:38,720 --> 00:01:42,479
error let me know and i'll change my

49
00:01:40,079 --> 00:01:42,479
slides

50
00:01:43,119 --> 00:01:47,200
so what's the end game for this

51
00:01:45,200 --> 00:01:48,640
presentation

52
00:01:47,200 --> 00:01:50,560
well luckily we're only going to have a

53
00:01:48,640 --> 00:01:51,600
few powerpoint slides to go through and

54
00:01:50,560 --> 00:01:53,520
during that time

55
00:01:51,600 --> 00:01:55,360
we're going to loosely define for the

56
00:01:53,520 --> 00:01:57,920
purpose of this presentation

57
00:01:55,360 --> 00:01:59,759
code injection we're going to talk about

58
00:01:57,920 --> 00:02:00,799
some of the tools used for doing the

59
00:01:59,759 --> 00:02:03,520
analysis

60
00:02:00,799 --> 00:02:05,119
of code injection more specifically

61
00:02:03,520 --> 00:02:06,798
memory analysis

62
00:02:05,119 --> 00:02:08,160
but really the bulk of this presentation

63
00:02:06,799 --> 00:02:09,920
is going to be in demo land

64
00:02:08,160 --> 00:02:12,079
where i'm going to walk through three

65
00:02:09,919 --> 00:02:15,119
memory samples illustrating some

66
00:02:12,080 --> 00:02:17,040
small workflows two of those samples

67
00:02:15,120 --> 00:02:18,560
are going to be pretty easy wins it's

68
00:02:17,040 --> 00:02:20,640
where we're going to walk through

69
00:02:18,560 --> 00:02:22,319
a methodology where the tools are

70
00:02:20,640 --> 00:02:24,160
telling us everything that we'd expect

71
00:02:22,319 --> 00:02:27,359
them to tell us

72
00:02:24,160 --> 00:02:29,200
and the third memory image is really the

73
00:02:27,360 --> 00:02:31,360
thesis of this whole presentation

74
00:02:29,200 --> 00:02:32,640
it's here where the tool is going to be

75
00:02:31,360 --> 00:02:33,840
pointing us in a direction

76
00:02:32,640 --> 00:02:36,000
but it's not going to be giving us a

77
00:02:33,840 --> 00:02:38,959
complete story and it's going to require

78
00:02:36,000 --> 00:02:40,400
us the analyst to dig a little deeper to

79
00:02:38,959 --> 00:02:42,640
get to

80
00:02:40,400 --> 00:02:44,160
those artifacts and that evidence of

81
00:02:42,640 --> 00:02:47,518
code injection that we need in order to

82
00:02:44,160 --> 00:02:47,519
move forward with our investigation

83
00:02:48,000 --> 00:02:52,239
so let's loosely define code injection

84
00:02:50,400 --> 00:02:54,160
so for the purpose of the presentation

85
00:02:52,239 --> 00:02:55,760
i'm just going to say it's the active

86
00:02:54,160 --> 00:02:56,799
injecting code and in this case

87
00:02:55,760 --> 00:02:58,560
malicious code

88
00:02:56,800 --> 00:03:00,640
into the memory address of a targeted

89
00:02:58,560 --> 00:03:01,840
process and then executing that code

90
00:03:00,640 --> 00:03:05,119
within the context

91
00:03:01,840 --> 00:03:06,720
of the injected process now i know there

92
00:03:05,120 --> 00:03:08,239
are numerous types of code injection

93
00:03:06,720 --> 00:03:10,080
techniques out there

94
00:03:08,239 --> 00:03:11,760
i've listed probably the three that i

95
00:03:10,080 --> 00:03:12,959
think are the most recognized

96
00:03:11,760 --> 00:03:15,120
and that maybe you guys might be the

97
00:03:12,959 --> 00:03:15,760
most familiar with and that's dll

98
00:03:15,120 --> 00:03:18,640
injection

99
00:03:15,760 --> 00:03:20,319
or remote dll injection reflective dll

100
00:03:18,640 --> 00:03:22,720
injection which is sometimes leveraged

101
00:03:20,319 --> 00:03:25,359
by shell code loading a malicious dll

102
00:03:22,720 --> 00:03:27,840
and hollow process injection or process

103
00:03:25,360 --> 00:03:27,840
hollowing

104
00:03:28,000 --> 00:03:31,920
so what does a code injection recipe

105
00:03:30,000 --> 00:03:32,480
look like and again this is a very

106
00:03:31,920 --> 00:03:34,238
generic

107
00:03:32,480 --> 00:03:36,000
recipe i know there's more complex ones

108
00:03:34,239 --> 00:03:37,680
out there and i've also gone ahead

109
00:03:36,000 --> 00:03:40,720
inside the squiggly brackets

110
00:03:37,680 --> 00:03:42,959
and added some common windows

111
00:03:40,720 --> 00:03:44,080
uh native libraries and apis that

112
00:03:42,959 --> 00:03:47,920
malicious code

113
00:03:44,080 --> 00:03:50,319
will leverage for creating recipes

114
00:03:47,920 --> 00:03:51,599
for code injection so the first thing

115
00:03:50,319 --> 00:03:53,359
the malicious code needs to do

116
00:03:51,599 --> 00:03:55,518
is obtain a list of the active running

117
00:03:53,360 --> 00:03:56,959
processes on the system it wants to see

118
00:03:55,519 --> 00:03:58,239
what's running so i can figure out what

119
00:03:56,959 --> 00:04:00,080
it wants to pick on or

120
00:03:58,239 --> 00:04:02,159
inject itself into and in this case

121
00:04:00,080 --> 00:04:03,519
we're just going to pick on notepad.exe

122
00:04:02,159 --> 00:04:05,040
for this example as we walk through the

123
00:04:03,519 --> 00:04:07,760
recipe

124
00:04:05,040 --> 00:04:09,798
so we've isolated notepad.exe the next

125
00:04:07,760 --> 00:04:11,280
thing we want to do is open a handle to

126
00:04:09,799 --> 00:04:14,120
notepad.exe

127
00:04:11,280 --> 00:04:15,680
and then suspend that process suspend

128
00:04:14,120 --> 00:04:18,160
notepad.exe

129
00:04:15,680 --> 00:04:19,440
so that we can then allocate some of its

130
00:04:18,160 --> 00:04:22,880
memory

131
00:04:19,440 --> 00:04:22,880
and change the permissions

132
00:04:23,120 --> 00:04:27,600
something like page execute read write

133
00:04:25,919 --> 00:04:29,840
this will allow us to then

134
00:04:27,600 --> 00:04:33,120
write or move our malicious code into

135
00:04:29,840 --> 00:04:35,119
that newly allocated memory range

136
00:04:33,120 --> 00:04:36,639
be able to execute and write code within

137
00:04:35,120 --> 00:04:39,440
that that memory range

138
00:04:36,639 --> 00:04:42,960
and then resume a thread or resume or

139
00:04:39,440 --> 00:04:45,280
re-execute the program

140
00:04:42,960 --> 00:04:46,880
and like i said malicious code or

141
00:04:45,280 --> 00:04:49,280
malware authors will leverage

142
00:04:46,880 --> 00:04:50,080
native windows apis these are not

143
00:04:49,280 --> 00:04:53,440
malicious

144
00:04:50,080 --> 00:04:55,359
uh on their own but they can be used for

145
00:04:53,440 --> 00:04:56,960
malicious intent if they're used in the

146
00:04:55,360 --> 00:05:00,800
right fashion

147
00:04:56,960 --> 00:05:00,799
within the malware or within the code

148
00:05:01,440 --> 00:05:04,719
so the tools i'm going to use for the

149
00:05:02,880 --> 00:05:07,840
analysis

150
00:05:04,720 --> 00:05:09,280
the bulk of um or the entire

151
00:05:07,840 --> 00:05:11,119
demo is going to be done inside of a

152
00:05:09,280 --> 00:05:13,039
virtual machine and in this case i'll be

153
00:05:11,120 --> 00:05:15,520
utilizing the rimnex virtual machine

154
00:05:13,039 --> 00:05:17,440
the latest version which is version 7.

155
00:05:15,520 --> 00:05:19,840
if you're not familiar with remnix

156
00:05:17,440 --> 00:05:21,360
remnix is a virtual machine that is

157
00:05:19,840 --> 00:05:22,080
developed and maintained by lenny

158
00:05:21,360 --> 00:05:24,080
zelster

159
00:05:22,080 --> 00:05:26,560
who is the course author and course lead

160
00:05:24,080 --> 00:05:28,320
for the sans forensic 610 reverse

161
00:05:26,560 --> 00:05:32,080
engineering malware course

162
00:05:28,320 --> 00:05:34,400
and this is a a vm that he and his team

163
00:05:32,080 --> 00:05:36,880
keep frequently updated they have all

164
00:05:34,400 --> 00:05:38,560
kinds of tools installed in it for doing

165
00:05:36,880 --> 00:05:40,159
static and dynamic and code level

166
00:05:38,560 --> 00:05:41,520
analysis in regards to malware and

167
00:05:40,160 --> 00:05:44,960
malicious documents

168
00:05:41,520 --> 00:05:46,960
as well as memory analysis code analysis

169
00:05:44,960 --> 00:05:48,560
and then some file system level

170
00:05:46,960 --> 00:05:49,919
forensics as well

171
00:05:48,560 --> 00:05:52,320
it's freely available for anyone to

172
00:05:49,919 --> 00:05:54,560
download and use

173
00:05:52,320 --> 00:05:56,080
the tool i'll be using for memory

174
00:05:54,560 --> 00:05:57,440
analysis will be the volatility

175
00:05:56,080 --> 00:05:59,680
framework

176
00:05:57,440 --> 00:06:01,680
in this case i'll be using volatility 3.

177
00:05:59,680 --> 00:06:03,360
i do recognize that it is

178
00:06:01,680 --> 00:06:04,960
limited in terms of its plug-in support

179
00:06:03,360 --> 00:06:07,280
because it's still in beta

180
00:06:04,960 --> 00:06:09,280
but for the purpose of this presentation

181
00:06:07,280 --> 00:06:12,159
there's plenty of plugins that

182
00:06:09,280 --> 00:06:12,960
will work just fine for code analysis

183
00:06:12,160 --> 00:06:15,759
i'll be using

184
00:06:12,960 --> 00:06:16,880
radar 2 or r2 and then for code

185
00:06:15,759 --> 00:06:20,720
de-obfuscation

186
00:06:16,880 --> 00:06:22,240
i'll be using cyber chef

187
00:06:20,720 --> 00:06:25,759
so with that it looks like it's time to

188
00:06:22,240 --> 00:06:25,759
just jump right into demo land

189
00:06:25,919 --> 00:06:30,799
so moving over to my rimnex virtual

190
00:06:28,000 --> 00:06:33,280
machine you can see that i've got

191
00:06:30,800 --> 00:06:34,000
the first memory image loaded up here

192
00:06:33,280 --> 00:06:37,440
and i'll walk through

193
00:06:34,000 --> 00:06:39,840
my syntax so for those of you that have

194
00:06:37,440 --> 00:06:41,120
never used volatility before

195
00:06:39,840 --> 00:06:43,119
i'm going to show you real quick what my

196
00:06:41,120 --> 00:06:44,800
command line syntax is so

197
00:06:43,120 --> 00:06:46,319
the vol 3 is calling the volatility

198
00:06:44,800 --> 00:06:49,280
framework the dash

199
00:06:46,319 --> 00:06:51,039
f is pointing it at my memory image

200
00:06:49,280 --> 00:06:53,440
which is this frontone.line

201
00:06:51,039 --> 00:06:54,800
i'm saying render it in the pretty mode

202
00:06:53,440 --> 00:06:59,520
and then i'm saying run

203
00:06:54,800 --> 00:07:01,599
the ps list plugin and take that output

204
00:06:59,520 --> 00:07:03,758
pipe it to grep and search for the

205
00:07:01,599 --> 00:07:05,919
presence of svc host or service host

206
00:07:03,759 --> 00:07:07,840
and explore and you can see we get some

207
00:07:05,919 --> 00:07:10,318
output

208
00:07:07,840 --> 00:07:11,599
on the left we get the process id the

209
00:07:10,319 --> 00:07:14,800
parent process id

210
00:07:11,599 --> 00:07:15,759
the name of the process address and

211
00:07:14,800 --> 00:07:19,120
memory

212
00:07:15,759 --> 00:07:20,400
we get threads and handles the session

213
00:07:19,120 --> 00:07:23,919
id column

214
00:07:20,400 --> 00:07:25,440
here and then we get uh some heuristics

215
00:07:23,919 --> 00:07:28,560
for whether or not it is

216
00:07:25,440 --> 00:07:30,560
a 64 or 32-bit process

217
00:07:28,560 --> 00:07:32,000
now this memory image comes from a

218
00:07:30,560 --> 00:07:33,759
64-bit system

219
00:07:32,000 --> 00:07:35,759
everything that's flag false means that

220
00:07:33,759 --> 00:07:39,520
it's saying that these are

221
00:07:35,759 --> 00:07:41,680
64-bit processes if it's flagged true it

222
00:07:39,520 --> 00:07:44,400
means it's a 32-bit process running on a

223
00:07:41,680 --> 00:07:46,560
64-bit system

224
00:07:44,400 --> 00:07:47,599
so as we scroll through here we see we

225
00:07:46,560 --> 00:07:50,240
have

226
00:07:47,599 --> 00:07:51,199
two explorers which in and of itself is

227
00:07:50,240 --> 00:07:53,919
not malicious

228
00:07:51,199 --> 00:07:55,120
or suspicious per se until we get over

229
00:07:53,919 --> 00:07:56,639
here to the sessions

230
00:07:55,120 --> 00:07:58,960
column and we see that both of these

231
00:07:56,639 --> 00:08:00,479
explorers have a session id of one

232
00:07:58,960 --> 00:08:02,799
and you'll also notice that this last

233
00:08:00,479 --> 00:08:06,080
explorer is also a 32-bit process

234
00:08:02,800 --> 00:08:08,080
running on a 64-bit system

235
00:08:06,080 --> 00:08:09,599
so one of these should have a session id

236
00:08:08,080 --> 00:08:11,120
of two

237
00:08:09,599 --> 00:08:14,240
the other thing you'll notice with

238
00:08:11,120 --> 00:08:15,199
process id or pid 4224 and 4268 these

239
00:08:14,240 --> 00:08:16,879
service hosts

240
00:08:15,199 --> 00:08:18,720
they're both 32-bit service hosts

241
00:08:16,879 --> 00:08:21,280
running on a 64-bit system

242
00:08:18,720 --> 00:08:23,520
but more importantly their parent is

243
00:08:21,280 --> 00:08:26,400
this 2096

244
00:08:23,520 --> 00:08:27,758
where if we were to look what 676 is for

245
00:08:26,400 --> 00:08:30,080
the rest of these service hosts we would

246
00:08:27,759 --> 00:08:32,399
see that 676 is services which

247
00:08:30,080 --> 00:08:34,079
is the proper parent-to-child

248
00:08:32,399 --> 00:08:36,799
relationship

249
00:08:34,080 --> 00:08:38,560
so immediately we have a starting point

250
00:08:36,799 --> 00:08:40,799
a pivot point

251
00:08:38,559 --> 00:08:41,919
let me clear my screen and i'll show you

252
00:08:40,799 --> 00:08:45,839
what i've done

253
00:08:41,919 --> 00:08:45,839
i've pre-cooked a couple directories

254
00:08:45,920 --> 00:08:50,079
and what i decided to do was we're just

255
00:08:48,480 --> 00:08:52,399
going to go ahead and pin it

256
00:08:50,080 --> 00:08:54,560
on paid 4224 which is one of our

257
00:08:52,399 --> 00:08:57,360
suspicious service hosts

258
00:08:54,560 --> 00:08:58,560
so i went ahead and dumped the entire

259
00:08:57,360 --> 00:09:01,920
memory range

260
00:08:58,560 --> 00:09:04,000
virtual memory range of paid four two

261
00:09:01,920 --> 00:09:06,160
two four using the mim map plugin and

262
00:09:04,000 --> 00:09:08,640
dumping it to this directory

263
00:09:06,160 --> 00:09:09,839
and then i used the floss tool and i ran

264
00:09:08,640 --> 00:09:12,399
the floss tool

265
00:09:09,839 --> 00:09:14,240
against this dump file and outputted

266
00:09:12,399 --> 00:09:15,680
that to a text file so that we can more

267
00:09:14,240 --> 00:09:18,800
granularly search

268
00:09:15,680 --> 00:09:21,839
um through this text file through

269
00:09:18,800 --> 00:09:22,959
all the strings that were created from

270
00:09:21,839 --> 00:09:24,240
this dump file

271
00:09:22,959 --> 00:09:26,319
and for those who aren't familiar with

272
00:09:24,240 --> 00:09:28,080
floss floss is a strings

273
00:09:26,320 --> 00:09:29,920
utility tool that has some

274
00:09:28,080 --> 00:09:33,360
de-obfuscation

275
00:09:29,920 --> 00:09:35,199
abilities built into it that is

276
00:09:33,360 --> 00:09:36,800
freely available and designed and

277
00:09:35,200 --> 00:09:38,399
developed and maintained by the folks

278
00:09:36,800 --> 00:09:40,479
from the flare team from mandi at

279
00:09:38,399 --> 00:09:43,839
fireeye

280
00:09:40,480 --> 00:09:45,040
so now that we have a strings document

281
00:09:43,839 --> 00:09:46,640
that we can search through

282
00:09:45,040 --> 00:09:48,319
let's do that and the first thing i'm

283
00:09:46,640 --> 00:09:51,839
going to do which might seem

284
00:09:48,320 --> 00:09:51,839
a little counter-intuitive

285
00:09:52,399 --> 00:09:55,440
is i'm going to run the strings command

286
00:09:54,720 --> 00:09:59,200
with a dash

287
00:09:55,440 --> 00:10:01,200
n1000 against my text document

288
00:09:59,200 --> 00:10:02,399
because what i want to do first is i'm

289
00:10:01,200 --> 00:10:06,000
looking for large

290
00:10:02,399 --> 00:10:07,839
sections of data that might

291
00:10:06,000 --> 00:10:10,000
resemble something of interest so

292
00:10:07,839 --> 00:10:12,560
scrolling to the top of my output

293
00:10:10,000 --> 00:10:13,920
i immediately see a reference to a web

294
00:10:12,560 --> 00:10:16,959
inject 32

295
00:10:13,920 --> 00:10:18,000
which quickly peaks my interest which is

296
00:10:16,959 --> 00:10:19,599
followed by

297
00:10:18,000 --> 00:10:22,880
a section of data which looks like it

298
00:10:19,600 --> 00:10:25,360
might be base64 encoding

299
00:10:22,880 --> 00:10:27,360
looking below that i see a vnc64 and

300
00:10:25,360 --> 00:10:30,720
again a big section of data that might

301
00:10:27,360 --> 00:10:34,000
be base64 encoded but we're not sure

302
00:10:30,720 --> 00:10:35,120
so we now have this web inject that we

303
00:10:34,000 --> 00:10:37,279
can pivot on

304
00:10:35,120 --> 00:10:40,720
as we search through our strings

305
00:10:37,279 --> 00:10:40,720
document so let's do that

306
00:10:43,839 --> 00:10:49,839
so graphing for web inject we see the

307
00:10:46,959 --> 00:10:52,719
reference to the web inject 32

308
00:10:49,839 --> 00:10:54,320
and then we see that section of data

309
00:10:52,720 --> 00:10:56,399
that i highlighted before

310
00:10:54,320 --> 00:10:57,600
that might be base64 encoded we don't

311
00:10:56,399 --> 00:10:59,120
know but i'm going to go ahead and i'm

312
00:10:57,600 --> 00:11:00,240
going to copy that to my clipboard for

313
00:10:59,120 --> 00:11:01,519
now because we're going to come back to

314
00:11:00,240 --> 00:11:03,360
that

315
00:11:01,519 --> 00:11:05,040
but looking through here we also see

316
00:11:03,360 --> 00:11:07,360
reference to a new

317
00:11:05,040 --> 00:11:09,599
string which might be a domain we see

318
00:11:07,360 --> 00:11:12,160
this https this temnosa

319
00:11:09,600 --> 00:11:13,120
and this web inject underscore new dot

320
00:11:12,160 --> 00:11:15,360
dat

321
00:11:13,120 --> 00:11:17,440
so now by grepping for web inject we

322
00:11:15,360 --> 00:11:20,240
also have found reference to a domain

323
00:11:17,440 --> 00:11:21,839
and we're also able to copy and

324
00:11:20,240 --> 00:11:25,519
potentially isolate

325
00:11:21,839 --> 00:11:28,880
this section of data so before we

326
00:11:25,519 --> 00:11:29,600
pivot on this domain name let's go ahead

327
00:11:28,880 --> 00:11:32,399
and take

328
00:11:29,600 --> 00:11:33,839
the data that we copied um that might be

329
00:11:32,399 --> 00:11:36,959
base64 and let's

330
00:11:33,839 --> 00:11:38,720
see if in fact it is base64. so i've

331
00:11:36,959 --> 00:11:41,920
placed it in a cyber chef

332
00:11:38,720 --> 00:11:43,519
and using the from base64 as my decoder

333
00:11:41,920 --> 00:11:46,000
i've decoded the output

334
00:11:43,519 --> 00:11:48,399
and we see the presence of what might be

335
00:11:46,000 --> 00:11:51,760
an mz header

336
00:11:48,399 --> 00:11:53,680
or a pe file we see something that

337
00:11:51,760 --> 00:11:55,519
resembles a dos stub

338
00:11:53,680 --> 00:11:57,199
where this program can't be run in dos

339
00:11:55,519 --> 00:11:58,959
mode reference to pe

340
00:11:57,200 --> 00:12:00,160
we don't know if that's just by chance

341
00:11:58,959 --> 00:12:01,359
or if that's actually portable

342
00:12:00,160 --> 00:12:02,800
executable

343
00:12:01,360 --> 00:12:04,399
but as we start to look a little bit

344
00:12:02,800 --> 00:12:08,560
farther it looks like

345
00:12:04,399 --> 00:12:10,639
legitimate headers or sections within a

346
00:12:08,560 --> 00:12:11,359
pe header right so like the read-only

347
00:12:10,639 --> 00:12:14,240
data

348
00:12:11,360 --> 00:12:17,279
the data section the text section and

349
00:12:14,240 --> 00:12:18,959
the relocation section

350
00:12:17,279 --> 00:12:21,839
and immediately below that we see a

351
00:12:18,959 --> 00:12:21,839
bunch of just

352
00:12:22,079 --> 00:12:27,519
what is possibly data so

353
00:12:25,120 --> 00:12:29,120
one of the unique um things about

354
00:12:27,519 --> 00:12:32,560
cybershaft is we can actually

355
00:12:29,120 --> 00:12:33,600
dump this out to a data file for

356
00:12:32,560 --> 00:12:36,000
analysis

357
00:12:33,600 --> 00:12:37,680
and i've already done that um for you

358
00:12:36,000 --> 00:12:39,040
guys so

359
00:12:37,680 --> 00:12:40,880
pre-cooked so i'm just going to clear

360
00:12:39,040 --> 00:12:42,480
this out and we're going to come back to

361
00:12:40,880 --> 00:12:45,760
that in a little bit

362
00:12:42,480 --> 00:12:48,880
so before we take a look at that

363
00:12:45,760 --> 00:12:50,839
um dump file we're going to take a look

364
00:12:48,880 --> 00:12:53,839
at the tim nosa

365
00:12:50,839 --> 00:12:53,839
domain

366
00:12:55,200 --> 00:13:00,639
and see what that might what we might

367
00:12:57,920 --> 00:13:02,880
discover by grepping for that

368
00:13:00,639 --> 00:13:03,839
and again this is a fairly robust output

369
00:13:02,880 --> 00:13:06,160
but it's not

370
00:13:03,839 --> 00:13:07,600
incredibly big and so scrolling back up

371
00:13:06,160 --> 00:13:10,000
to the top

372
00:13:07,600 --> 00:13:11,360
and we start to move through it you'll

373
00:13:10,000 --> 00:13:14,560
notice

374
00:13:11,360 --> 00:13:16,079
there's this interesting string dot exe

375
00:13:14,560 --> 00:13:18,239
and if we come down a little bit farther

376
00:13:16,079 --> 00:13:20,000
we can see that that is referenced with

377
00:13:18,240 --> 00:13:23,120
that domain

378
00:13:20,000 --> 00:13:27,600
so instantly this peaks my interest

379
00:13:23,120 --> 00:13:30,560
and i want to pivot or look and see

380
00:13:27,600 --> 00:13:31,040
does this particular string.exe does it

381
00:13:30,560 --> 00:13:34,160
exist

382
00:13:31,040 --> 00:13:36,160
anywhere within my memory image and one

383
00:13:34,160 --> 00:13:38,880
of the ways i can do that

384
00:13:36,160 --> 00:13:40,959
is i can leverage yara within the

385
00:13:38,880 --> 00:13:42,320
volatility framework and i've gone ahead

386
00:13:40,959 --> 00:13:43,839
and pre-cooked this

387
00:13:42,320 --> 00:13:45,360
because it takes about four minutes for

388
00:13:43,839 --> 00:13:47,600
this particular plug-in to run but i'll

389
00:13:45,360 --> 00:13:49,920
walk you through my syntax

390
00:13:47,600 --> 00:13:51,519
so i've run volatility 3 again render in

391
00:13:49,920 --> 00:13:52,160
the pretty mode and in this case i'm

392
00:13:51,519 --> 00:13:55,360
saying

393
00:13:52,160 --> 00:13:56,959
run the vag yara scan plugin with the

394
00:13:55,360 --> 00:14:00,079
dash dash yara dash

395
00:13:56,959 --> 00:14:02,638
rules and then give it the string this

396
00:14:00,079 --> 00:14:03,839
long string.exe as our rule

397
00:14:02,639 --> 00:14:05,199
and like i said three and a half four

398
00:14:03,839 --> 00:14:06,959
minutes later it's done scanning the

399
00:14:05,199 --> 00:14:09,519
entire memory

400
00:14:06,959 --> 00:14:12,399
image and it will give you the virtual

401
00:14:09,519 --> 00:14:14,720
offset of where the rule match was found

402
00:14:12,399 --> 00:14:16,000
its corresponding pid in this case four

403
00:14:14,720 --> 00:14:17,680
two two four

404
00:14:16,000 --> 00:14:19,120
you'll also notice that we found it in

405
00:14:17,680 --> 00:14:22,319
four two two six eight

406
00:14:19,120 --> 00:14:24,000
both of those are the suspicious svc

407
00:14:22,320 --> 00:14:27,279
hosts that we saw in our ps list

408
00:14:24,000 --> 00:14:31,600
output but now we see three other

409
00:14:27,279 --> 00:14:35,120
new processes three eight eight 4564

410
00:14:31,600 --> 00:14:36,079
and 5100 well we don't know what those

411
00:14:35,120 --> 00:14:38,639
are

412
00:14:36,079 --> 00:14:39,439
but we can quickly find out so i clear

413
00:14:38,639 --> 00:14:41,920
out my screen

414
00:14:39,440 --> 00:14:42,560
i up arrow and we're going to go back to

415
00:14:41,920 --> 00:14:44,399
the ps

416
00:14:42,560 --> 00:14:48,119
list plugin and we're going to say dash

417
00:14:44,399 --> 00:14:52,560
dash pid and we're going to say 5100

418
00:14:48,120 --> 00:14:54,720
4564 and 3884 i believe

419
00:14:52,560 --> 00:14:56,638
and so this is saying just search for

420
00:14:54,720 --> 00:14:59,440
the presence of these three processes

421
00:14:56,639 --> 00:15:00,399
it finds 3884 which happens to be the

422
00:14:59,440 --> 00:15:03,839
parent process

423
00:15:00,399 --> 00:15:05,199
of 4564 and 5100 and all three are

424
00:15:03,839 --> 00:15:09,199
chrome

425
00:15:05,199 --> 00:15:13,279
okay well that's interesting so

426
00:15:09,199 --> 00:15:14,479
let's um let's pivot on one of these and

427
00:15:13,279 --> 00:15:17,199
so we're going to go ahead and just

428
00:15:14,480 --> 00:15:18,240
pivot on 5100

429
00:15:17,199 --> 00:15:20,240
and what we're going to do is we're

430
00:15:18,240 --> 00:15:24,320
going to come back up to 5100 here

431
00:15:20,240 --> 00:15:30,160
and just grab this virtual offset

432
00:15:24,320 --> 00:15:33,759
because i want to know what was going on

433
00:15:30,160 --> 00:15:36,719
with um this particular process in

434
00:15:33,759 --> 00:15:38,959
regards to that long string.exe

435
00:15:36,720 --> 00:15:40,079
what what within memory within this

436
00:15:38,959 --> 00:15:42,079
process

437
00:15:40,079 --> 00:15:44,560
was surrounding that and this will make

438
00:15:42,079 --> 00:15:46,319
more sense here in a second

439
00:15:44,560 --> 00:15:47,758
and i'll walk you through what my syntax

440
00:15:46,320 --> 00:15:49,759
was

441
00:15:47,759 --> 00:15:50,800
so i've jumped into valshell and for

442
00:15:49,759 --> 00:15:51,839
those of you that are familiar with

443
00:15:50,800 --> 00:15:54,560
volatility 2

444
00:15:51,839 --> 00:15:56,079
6 valshall is a plug-in within the

445
00:15:54,560 --> 00:15:58,239
volatility framework

446
00:15:56,079 --> 00:16:00,160
where now in volatility 3 it's kind of

447
00:15:58,240 --> 00:16:02,320
its own standalone framework

448
00:16:00,160 --> 00:16:04,319
so you'd run val shell pointed at the

449
00:16:02,320 --> 00:16:06,800
memory image dash w says hey

450
00:16:04,320 --> 00:16:08,079
interpret this as a windows memory image

451
00:16:06,800 --> 00:16:11,599
and drop me into the current

452
00:16:08,079 --> 00:16:12,800
context of pid 5100 and we can see that

453
00:16:11,600 --> 00:16:14,959
we are

454
00:16:12,800 --> 00:16:17,199
so what i want to do next is i want to

455
00:16:14,959 --> 00:16:22,079
display the bytes

456
00:16:17,199 --> 00:16:24,880
at the offset where that um

457
00:16:22,079 --> 00:16:26,479
yara rule match was and i'm going to say

458
00:16:24,880 --> 00:16:28,079
show me the bytes starting at that

459
00:16:26,480 --> 00:16:30,959
offset

460
00:16:28,079 --> 00:16:32,399
for the next 256 bytes and we see here

461
00:16:30,959 --> 00:16:35,439
is that exe

462
00:16:32,399 --> 00:16:36,720
the string we see a url to a web inject

463
00:16:35,440 --> 00:16:40,959
32

464
00:16:36,720 --> 00:16:47,199
we see the reference to our temnosa

465
00:16:40,959 --> 00:16:47,199
domain so real quickly we were able to

466
00:16:47,680 --> 00:16:52,079
see you know identify a whole another

467
00:16:50,560 --> 00:16:55,599
process this chrome process

468
00:16:52,079 --> 00:16:56,638
and pivot on it the next thing that

469
00:16:55,600 --> 00:16:58,800
we're going to want to do because we're

470
00:16:56,639 --> 00:17:02,880
talking about code injection

471
00:16:58,800 --> 00:17:04,480
is take a look at pid 5100 but we're

472
00:17:02,880 --> 00:17:08,720
going to utilize the malphine

473
00:17:04,480 --> 00:17:12,079
plugin and i'm going to say

474
00:17:08,720 --> 00:17:13,360
run malphine against pid 5100 but i want

475
00:17:12,079 --> 00:17:19,359
to grip for

476
00:17:13,359 --> 00:17:22,399
the presence of an mz header

477
00:17:19,359 --> 00:17:23,678
and i'm saying show me one line before

478
00:17:22,400 --> 00:17:26,799
and seven lines after

479
00:17:23,679 --> 00:17:27,600
any matches and you can see here within

480
00:17:26,799 --> 00:17:31,200
chrome

481
00:17:27,599 --> 00:17:32,879
process id 5100 at this

482
00:17:31,200 --> 00:17:34,799
offset in memory this virtual offset in

483
00:17:32,880 --> 00:17:37,360
memory is the start

484
00:17:34,799 --> 00:17:39,600
this is this is the the range we have a

485
00:17:37,360 --> 00:17:42,479
bad short a virtual address descriptor

486
00:17:39,600 --> 00:17:44,159
that is flagged page execute read write

487
00:17:42,480 --> 00:17:45,200
so this has page execute read write

488
00:17:44,160 --> 00:17:47,360
permissions

489
00:17:45,200 --> 00:17:49,520
and then it also has the magic value of

490
00:17:47,360 --> 00:17:52,719
what might be a portable executable file

491
00:17:49,520 --> 00:17:55,918
sitting at this memory address

492
00:17:52,720 --> 00:17:57,679
so that's immediately interesting to me

493
00:17:55,919 --> 00:17:59,360
so i'm going to copy this memory address

494
00:17:57,679 --> 00:18:01,039
right here because we want to validate

495
00:17:59,360 --> 00:18:02,080
this and one of the ways that we can do

496
00:18:01,039 --> 00:18:06,000
that

497
00:18:02,080 --> 00:18:06,000
is by using the vat info plug-in

498
00:18:06,160 --> 00:18:11,200
so we can use the vat info plug-in pid

499
00:18:09,200 --> 00:18:12,480
5100

500
00:18:11,200 --> 00:18:15,200
and then we'll just grep for the

501
00:18:12,480 --> 00:18:18,080
presence of that memory address

502
00:18:15,200 --> 00:18:19,520
and see what that info has to say so

503
00:18:18,080 --> 00:18:21,840
that info

504
00:18:19,520 --> 00:18:22,879
ran it against 5100 at this memory

505
00:18:21,840 --> 00:18:25,918
address or

506
00:18:22,880 --> 00:18:28,480
540 thousand

507
00:18:25,919 --> 00:18:30,559
it it it too shows that it's flagged for

508
00:18:28,480 --> 00:18:33,520
page execute read write

509
00:18:30,559 --> 00:18:34,879
so now we have two plugins within the

510
00:18:33,520 --> 00:18:37,840
volatility framework

511
00:18:34,880 --> 00:18:40,400
showing us that a particular um range

512
00:18:37,840 --> 00:18:42,799
within process 5100

513
00:18:40,400 --> 00:18:43,840
has a vad set for page execute read

514
00:18:42,799 --> 00:18:44,879
write

515
00:18:43,840 --> 00:18:46,799
well now we're going to want to take a

516
00:18:44,880 --> 00:18:47,120
closer look at like what is going on at

517
00:18:46,799 --> 00:18:50,559
this

518
00:18:47,120 --> 00:18:51,840
at this address at 5400

519
00:18:50,559 --> 00:18:53,760
because again remember we're talking

520
00:18:51,840 --> 00:18:54,879
about looking and validating code

521
00:18:53,760 --> 00:18:56,400
injection

522
00:18:54,880 --> 00:18:58,640
so we're going to drop back into vault

523
00:18:56,400 --> 00:18:58,640
shell

524
00:18:58,799 --> 00:19:04,240
and we're going to drop back into pin

525
00:19:01,360 --> 00:19:04,240
5100

526
00:19:05,679 --> 00:19:10,240
and we're going to say let's display the

527
00:19:08,840 --> 00:19:13,600
bytes

528
00:19:10,240 --> 00:19:16,480
at this address but show me

529
00:19:13,600 --> 00:19:16,480
10 24.

530
00:19:16,799 --> 00:19:20,639
and when we do that we see that mz

531
00:19:19,200 --> 00:19:22,400
header that we were talking about

532
00:19:20,640 --> 00:19:24,080
but now again we start to see reference

533
00:19:22,400 --> 00:19:26,000
to the dos stub again this program

534
00:19:24,080 --> 00:19:29,439
cannot be run in dos mode

535
00:19:26,000 --> 00:19:30,080
and then we also see reference to pe

536
00:19:29,440 --> 00:19:32,480
again

537
00:19:30,080 --> 00:19:34,159
and we see sections or what we

538
00:19:32,480 --> 00:19:34,799
reasonably believe to be the headers for

539
00:19:34,160 --> 00:19:36,559
sections

540
00:19:34,799 --> 00:19:38,400
of a p e header or sections of a p e

541
00:19:36,559 --> 00:19:40,320
header so we see the text section the

542
00:19:38,400 --> 00:19:42,400
read-only data section the data section

543
00:19:40,320 --> 00:19:45,760
relocation section

544
00:19:42,400 --> 00:19:49,360
so it might we can

545
00:19:45,760 --> 00:19:50,240
it's easy for us now to to notif or

546
00:19:49,360 --> 00:19:52,639
notice that

547
00:19:50,240 --> 00:19:54,160
it looks like we have what looks like to

548
00:19:52,640 --> 00:19:56,039
be a portable executable

549
00:19:54,160 --> 00:19:57,440
sitting in the memory address range of

550
00:19:56,039 --> 00:20:00,640
chrome.exe

551
00:19:57,440 --> 00:20:00,640
at this offset

552
00:20:00,960 --> 00:20:08,559
now if you remember we um

553
00:20:06,240 --> 00:20:08,559
dumped

554
00:20:10,080 --> 00:20:17,199
our file from cyber chef

555
00:20:13,280 --> 00:20:17,200
so if you remember i've got a cyber chef

556
00:20:18,799 --> 00:20:22,480
directory here where we dumped the web

557
00:20:20,799 --> 00:20:25,840
inject that we decoded

558
00:20:22,480 --> 00:20:27,840
from base64 and dumped it to a bin file

559
00:20:25,840 --> 00:20:29,678
well one of the things that we can do is

560
00:20:27,840 --> 00:20:32,399
we could run we could just run the

561
00:20:29,679 --> 00:20:35,120
file command against it and see what the

562
00:20:32,400 --> 00:20:37,679
file command says and it recognizes it

563
00:20:35,120 --> 00:20:40,959
as a 32-bit executable

564
00:20:37,679 --> 00:20:44,559
a dll okay

565
00:20:40,960 --> 00:20:47,360
well let's run one other tool

566
00:20:44,559 --> 00:20:48,879
against it and in this case we'll run

567
00:20:47,360 --> 00:20:52,399
the object tool with the dash

568
00:20:48,880 --> 00:20:56,559
x command or condition

569
00:20:52,400 --> 00:20:59,760
and we're seeing it's executable

570
00:20:56,559 --> 00:21:03,039
32-bit it's a dll

571
00:20:59,760 --> 00:21:04,000
so the other thing that i look at is the

572
00:21:03,039 --> 00:21:05,919
compile time

573
00:21:04,000 --> 00:21:07,520
and i can tell you that for this

574
00:21:05,919 --> 00:21:08,960
investigation this compile time was

575
00:21:07,520 --> 00:21:10,559
actually quite important

576
00:21:08,960 --> 00:21:12,559
but for this demo i'm really just

577
00:21:10,559 --> 00:21:16,720
interested in confirming that it's

578
00:21:12,559 --> 00:21:19,840
32-bit and that it's a dll

579
00:21:16,720 --> 00:21:22,960
so let me just recap what we did

580
00:21:19,840 --> 00:21:25,678
we ran the ps list plug-in

581
00:21:22,960 --> 00:21:26,960
we grepped for the presence of service

582
00:21:25,679 --> 00:21:29,679
host and explorer

583
00:21:26,960 --> 00:21:32,080
we found two service hosts and one

584
00:21:29,679 --> 00:21:33,440
explorer that were 32-bit and also had a

585
00:21:32,080 --> 00:21:34,480
few other conditions that were a little

586
00:21:33,440 --> 00:21:37,280
suspicious

587
00:21:34,480 --> 00:21:38,080
we pivoted on pid4224 which was service

588
00:21:37,280 --> 00:21:41,120
host

589
00:21:38,080 --> 00:21:43,360
dumped its entire memory address range

590
00:21:41,120 --> 00:21:44,799
for that particular process ran floss

591
00:21:43,360 --> 00:21:46,240
against it created a text file and

592
00:21:44,799 --> 00:21:48,559
started grepping

593
00:21:46,240 --> 00:21:49,919
located a reference to a web inject

594
00:21:48,559 --> 00:21:53,440
grepped the web inject

595
00:21:49,919 --> 00:21:54,960
pulled out some code a section of data

596
00:21:53,440 --> 00:21:55,840
that looked like it might be base64

597
00:21:54,960 --> 00:21:58,240
encoded

598
00:21:55,840 --> 00:21:59,760
decoded that with cyber shaft had the

599
00:21:58,240 --> 00:22:00,799
presence of what looked like a portable

600
00:21:59,760 --> 00:22:02,400
executable file

601
00:22:00,799 --> 00:22:03,918
within cyber chef we were able to dump

602
00:22:02,400 --> 00:22:07,120
the decoded section

603
00:22:03,919 --> 00:22:10,400
to a data file

604
00:22:07,120 --> 00:22:11,840
we then uh went back to grepping through

605
00:22:10,400 --> 00:22:14,559
our

606
00:22:11,840 --> 00:22:16,639
strings file and we pivoted on the

607
00:22:14,559 --> 00:22:17,520
domain name of tim nosa that we found

608
00:22:16,640 --> 00:22:20,000
and that's where we found that

609
00:22:17,520 --> 00:22:22,480
interesting string.exe

610
00:22:20,000 --> 00:22:24,080
when we scanned yara for that we found

611
00:22:22,480 --> 00:22:24,799
three new processes which all were

612
00:22:24,080 --> 00:22:27,918
explore

613
00:22:24,799 --> 00:22:30,240
one of those was 5100 we pivoted on 5100

614
00:22:27,919 --> 00:22:32,480
and utilizing and leveraging malfund

615
00:22:30,240 --> 00:22:33,679
it showed that there was the presence of

616
00:22:32,480 --> 00:22:37,200
an mz header

617
00:22:33,679 --> 00:22:40,080
as well as a vad range at the

618
00:22:37,200 --> 00:22:41,200
540 000 that was flagged page execute

619
00:22:40,080 --> 00:22:43,039
read write

620
00:22:41,200 --> 00:22:44,799
we then pivot on that into vowel shell

621
00:22:43,039 --> 00:22:48,559
took a look at what was going on

622
00:22:44,799 --> 00:22:50,158
and we found what looked like a portable

623
00:22:48,559 --> 00:22:51,440
executable file sitting within the

624
00:22:50,159 --> 00:22:55,679
memory address

625
00:22:51,440 --> 00:22:58,240
range or the memory range of chrome.exe

626
00:22:55,679 --> 00:23:00,320
so that was pretty quick quick way to

627
00:22:58,240 --> 00:23:01,600
identify code injection our tools did

628
00:23:00,320 --> 00:23:02,720
everything that we thought it would do

629
00:23:01,600 --> 00:23:04,559
and it showed us everything that we

630
00:23:02,720 --> 00:23:08,080
thought we were going to see

631
00:23:04,559 --> 00:23:10,000
so let's move on to a second

632
00:23:08,080 --> 00:23:11,439
memory image and here i've gone ahead

633
00:23:10,000 --> 00:23:14,080
and just

634
00:23:11,440 --> 00:23:14,480
ran volatility 3 against our gray skull

635
00:23:14,080 --> 00:23:15,918
image

636
00:23:14,480 --> 00:23:17,600
rendered it in the pretty mode and just

637
00:23:15,919 --> 00:23:20,000
jumped straight to malphite and said

638
00:23:17,600 --> 00:23:22,000
look for the presence of an mz header

639
00:23:20,000 --> 00:23:24,240
and in this case it wasn't able to find

640
00:23:22,000 --> 00:23:26,080
it so it scanned the entire memory range

641
00:23:24,240 --> 00:23:27,520
looking for the presence of an mz header

642
00:23:26,080 --> 00:23:29,120
against all the processes and it didn't

643
00:23:27,520 --> 00:23:31,360
find it

644
00:23:29,120 --> 00:23:33,600
so we also know that sometimes with

645
00:23:31,360 --> 00:23:35,600
reflective dll injection

646
00:23:33,600 --> 00:23:37,678
shell code might be used and one of the

647
00:23:35,600 --> 00:23:40,959
things that shellcode

648
00:23:37,679 --> 00:23:43,520
utilizes is a no op sled or a knob sled

649
00:23:40,960 --> 00:23:44,640
not always but in some cases so now

650
00:23:43,520 --> 00:23:46,080
we're just going to run the malphine

651
00:23:44,640 --> 00:23:48,559
plug-in and i'm just going to grip for

652
00:23:46,080 --> 00:23:49,600
the presence of a no op

653
00:23:48,559 --> 00:23:51,120
and one of the things we have to be

654
00:23:49,600 --> 00:23:52,559
careful is sometimes we'll get false

655
00:23:51,120 --> 00:23:55,199
positives because

656
00:23:52,559 --> 00:23:57,200
that's just a hex value of 90 so it's

657
00:23:55,200 --> 00:24:00,960
it's possible it's going to come across

658
00:23:57,200 --> 00:24:03,279
a hex value of 90. um but as it's

659
00:24:00,960 --> 00:24:04,080
as it's nullifying plug-ins running it's

660
00:24:03,279 --> 00:24:07,279
scanning the entire

661
00:24:04,080 --> 00:24:09,279
memory range looking for any

662
00:24:07,279 --> 00:24:10,960
vads that reflect page execute read

663
00:24:09,279 --> 00:24:12,559
write as well as a few other things that

664
00:24:10,960 --> 00:24:14,240
have to do with map path to disk

665
00:24:12,559 --> 00:24:16,000
but then i'm also passing it to grep and

666
00:24:14,240 --> 00:24:18,720
saying look for the presence

667
00:24:16,000 --> 00:24:21,120
of a no op and let's see what it's able

668
00:24:18,720 --> 00:24:21,120
to find

669
00:24:25,520 --> 00:24:28,720
and we can see here that we get a return

670
00:24:28,320 --> 00:24:31,439
for

671
00:24:28,720 --> 00:24:33,600
two no-ops found but what's interesting

672
00:24:31,440 --> 00:24:36,400
is it sits at this memory address

673
00:24:33,600 --> 00:24:37,760
but if you'll notice the second no op

674
00:24:36,400 --> 00:24:40,240
immediately follows it

675
00:24:37,760 --> 00:24:41,440
so this might be indicative of a no op

676
00:24:40,240 --> 00:24:43,360
sled

677
00:24:41,440 --> 00:24:45,120
so that is or an upselect so that's

678
00:24:43,360 --> 00:24:48,240
pretty interesting to me

679
00:24:45,120 --> 00:24:50,399
well last time the last in the last

680
00:24:48,240 --> 00:24:53,279
memory image we picked on service hosts

681
00:24:50,400 --> 00:24:54,720
or we pivot on service host 4224 let's

682
00:24:53,279 --> 00:24:57,840
see what happens if we grep

683
00:24:54,720 --> 00:25:00,159
for explorer

684
00:24:57,840 --> 00:25:01,039
so remember in the first memory image

685
00:25:00,159 --> 00:25:03,440
when we ran the

686
00:25:01,039 --> 00:25:04,799
first plugin which was pslist i went

687
00:25:03,440 --> 00:25:06,799
ahead and grepped for the presence of

688
00:25:04,799 --> 00:25:08,559
svc host and explorer we found both but

689
00:25:06,799 --> 00:25:09,120
we pivoted on explore or on service

690
00:25:08,559 --> 00:25:11,120
hosts

691
00:25:09,120 --> 00:25:12,559
in this memory image we're just going to

692
00:25:11,120 --> 00:25:17,840
grip for explorer

693
00:25:12,559 --> 00:25:17,840
and see what if that gets us anywhere

694
00:25:20,000 --> 00:25:23,919
and again you know malphine's gotta scan

695
00:25:22,240 --> 00:25:26,400
the entire memory image

696
00:25:23,919 --> 00:25:28,159
and then pipe it to grep and look for

697
00:25:26,400 --> 00:25:30,320
this condition which is explore

698
00:25:28,159 --> 00:25:33,679
so it generally takes like 20 seconds

699
00:25:30,320 --> 00:25:35,200
it's not incredibly slow

700
00:25:33,679 --> 00:25:37,360
and this is running in a virtual machine

701
00:25:35,200 --> 00:25:42,240
too

702
00:25:37,360 --> 00:25:44,639
so here malfund has found 6824 pid6824

703
00:25:42,240 --> 00:25:48,000
which is an explorer.exe

704
00:25:44,640 --> 00:25:48,559
at this memory address and this is the

705
00:25:48,000 --> 00:25:50,559
range

706
00:25:48,559 --> 00:25:52,158
but this is the start of this memory

707
00:25:50,559 --> 00:25:55,600
address it's a bad short

708
00:25:52,159 --> 00:25:57,919
and it's flagged page execute read write

709
00:25:55,600 --> 00:26:00,158
but if you'll notice this memory address

710
00:25:57,919 --> 00:26:01,679
happens to be the exact same

711
00:26:00,159 --> 00:26:05,039
memory address where we found the

712
00:26:01,679 --> 00:26:09,520
presence of this no up or this hex 90.

713
00:26:05,039 --> 00:26:14,879
so now this is incredibly interesting

714
00:26:09,520 --> 00:26:18,240
so let's take this memory address

715
00:26:14,880 --> 00:26:20,640
and let's pivot on it so like before

716
00:26:18,240 --> 00:26:22,799
we used fall shell so let's stick with

717
00:26:20,640 --> 00:26:22,799
it

718
00:26:22,840 --> 00:26:27,199
and

719
00:26:25,600 --> 00:26:28,959
we're going to do dash w because it's a

720
00:26:27,200 --> 00:26:33,039
windows dash dash

721
00:26:28,960 --> 00:26:33,039
pid and our pit is 6824

722
00:26:34,720 --> 00:26:37,760
so again we're going to drop into the

723
00:26:36,159 --> 00:26:41,520
current context of pid

724
00:26:37,760 --> 00:26:41,520
6824 within valsha

725
00:26:48,559 --> 00:26:55,039
and we are going to display bytes again

726
00:26:52,559 --> 00:26:57,120
and we're going to set it at that offset

727
00:26:55,039 --> 00:26:57,520
and we're going to give it a count of i

728
00:26:57,120 --> 00:27:00,320
don't know

729
00:26:57,520 --> 00:27:00,320
256.

730
00:27:03,520 --> 00:27:09,918
and again here is that hex 9090

731
00:27:07,279 --> 00:27:11,440
and we see some output here in the ascii

732
00:27:09,919 --> 00:27:13,279
but we're not really sure

733
00:27:11,440 --> 00:27:14,720
you know is this shell code is this not

734
00:27:13,279 --> 00:27:16,320
shell code

735
00:27:14,720 --> 00:27:17,760
one of the things that we can do is we

736
00:27:16,320 --> 00:27:20,799
can just up arrow

737
00:27:17,760 --> 00:27:23,360
and we can change the display bytes

738
00:27:20,799 --> 00:27:24,240
to the disassemble capabilities within

739
00:27:23,360 --> 00:27:25,439
vault shell

740
00:27:24,240 --> 00:27:28,320
and we can do a little bit of

741
00:27:25,440 --> 00:27:31,919
disassembly and see if

742
00:27:28,320 --> 00:27:35,120
this looks like legitimate assembly code

743
00:27:31,919 --> 00:27:35,679
and we see the no ops stacked on top of

744
00:27:35,120 --> 00:27:38,639
each other

745
00:27:35,679 --> 00:27:40,720
immediately followed by a jump and we

746
00:27:38,640 --> 00:27:42,799
start to see references to registers

747
00:27:40,720 --> 00:27:44,960
64-bit registers

748
00:27:42,799 --> 00:27:46,559
and so we start to see stuff that

749
00:27:44,960 --> 00:27:50,480
reasonably looks like

750
00:27:46,559 --> 00:27:53,840
a legitimate assembly code well

751
00:27:50,480 --> 00:27:55,360
the next step would be to take a closer

752
00:27:53,840 --> 00:27:58,399
look

753
00:27:55,360 --> 00:27:59,439
at this section and we can exit out of

754
00:27:58,399 --> 00:28:01,840
all shell

755
00:27:59,440 --> 00:28:02,799
we're going to make a directory and

756
00:28:01,840 --> 00:28:05,439
we're going to call it

757
00:28:02,799 --> 00:28:05,440
malfind

758
00:28:07,919 --> 00:28:12,960
and now what i'm going to do is i'm just

759
00:28:10,399 --> 00:28:12,959
going to

760
00:28:14,840 --> 00:28:17,840
dump

761
00:28:22,399 --> 00:28:27,918
that section and i'll walk you through

762
00:28:25,279 --> 00:28:29,360
my syntax

763
00:28:27,919 --> 00:28:31,360
so what i've done here is i'm running

764
00:28:29,360 --> 00:28:33,918
volatility again but i'm saying

765
00:28:31,360 --> 00:28:35,520
output the dump to my malphine directory

766
00:28:33,919 --> 00:28:37,799
that we've created

767
00:28:35,520 --> 00:28:39,200
and i'm saying run malphine against

768
00:28:37,799 --> 00:28:42,080
pid6824

769
00:28:39,200 --> 00:28:42,559
and then giving it the dump command and

770
00:28:42,080 --> 00:28:43,918
so

771
00:28:42,559 --> 00:28:46,080
it's going to go through it's going to

772
00:28:43,919 --> 00:28:47,919
do that give us the output

773
00:28:46,080 --> 00:28:49,439
which we see here here's our copies of

774
00:28:47,919 --> 00:28:53,279
the of the no

775
00:28:49,440 --> 00:28:55,679
op i'll clear out my screen

776
00:28:53,279 --> 00:28:56,480
we'll do a quick little sanity check

777
00:28:55,679 --> 00:28:59,840
into our

778
00:28:56,480 --> 00:29:03,919
mail and here is

779
00:28:59,840 --> 00:29:04,480
that section where we think we might

780
00:29:03,919 --> 00:29:07,600
have

781
00:29:04,480 --> 00:29:10,320
potentially shell code

782
00:29:07,600 --> 00:29:12,158
well we can do a quick little code level

783
00:29:10,320 --> 00:29:13,760
analysis before we pass this off to a

784
00:29:12,159 --> 00:29:14,480
reverser or maybe you are your own

785
00:29:13,760 --> 00:29:16,158
reverser

786
00:29:14,480 --> 00:29:18,159
and so one of the ways that we can look

787
00:29:16,159 --> 00:29:21,679
at that is with um

788
00:29:18,159 --> 00:29:21,679
r2 or radar2

789
00:29:22,559 --> 00:29:26,559
so i'm going to put in i'm going to type

790
00:29:24,840 --> 00:29:27,918
in

791
00:29:26,559 --> 00:29:41,840
my commands and then i'll walk you

792
00:29:27,919 --> 00:29:41,840
through what it's doing

793
00:29:45,679 --> 00:29:50,960
so i'll walk what i've done is i've

794
00:29:49,360 --> 00:29:54,320
called r2

795
00:29:50,960 --> 00:29:57,440
i'm saying this is a intel x86 processor

796
00:29:54,320 --> 00:29:59,120
it's 64-bit i'm saying disassemble it in

797
00:29:57,440 --> 00:30:02,159
the quiet mode and then print that

798
00:29:59,120 --> 00:30:04,158
disassembly to standard out

799
00:30:02,159 --> 00:30:05,760
so what you can see here is we've seen

800
00:30:04,159 --> 00:30:07,600
just a little bit more

801
00:30:05,760 --> 00:30:09,200
detail than what ball shell was able to

802
00:30:07,600 --> 00:30:11,360
show us so

803
00:30:09,200 --> 00:30:13,520
you know again we see what looks like

804
00:30:11,360 --> 00:30:14,399
the presence of a no-op sled immediately

805
00:30:13,520 --> 00:30:18,720
followed by

806
00:30:14,399 --> 00:30:21,520
a jump of a keyword to some

807
00:30:18,720 --> 00:30:23,840
location in memory then we start to see

808
00:30:21,520 --> 00:30:25,679
registers being moved around we see

809
00:30:23,840 --> 00:30:28,320
the rax register being pushed onto the

810
00:30:25,679 --> 00:30:30,399
stack so this looks like

811
00:30:28,320 --> 00:30:32,639
legitimate code and now that we've

812
00:30:30,399 --> 00:30:34,320
dumped this we could pass this on to one

813
00:30:32,640 --> 00:30:36,000
of our reverse engineers

814
00:30:34,320 --> 00:30:37,840
and they could try to emulate this or

815
00:30:36,000 --> 00:30:40,960
reverse it and see what is going on

816
00:30:37,840 --> 00:30:44,320
with this particular piece of code so

817
00:30:40,960 --> 00:30:45,760
again i'll recap what i did was

818
00:30:44,320 --> 00:30:48,158
we went ahead and jumped straight to the

819
00:30:45,760 --> 00:30:49,600
malphine plug-in and we grew up for the

820
00:30:48,159 --> 00:30:52,480
presence of an mz header

821
00:30:49,600 --> 00:30:54,320
and we didn't find one so we just we

822
00:30:52,480 --> 00:30:55,360
said hey let's go ahead and grip for a

823
00:30:54,320 --> 00:30:57,519
no up

824
00:30:55,360 --> 00:30:59,840
and when we grew up for a no op we saw

825
00:30:57,519 --> 00:31:03,360
it found the presence of a no op

826
00:30:59,840 --> 00:31:05,600
at this memory address range and it

827
00:31:03,360 --> 00:31:06,719
we saw two no-ops stacked right on top

828
00:31:05,600 --> 00:31:09,039
of each other

829
00:31:06,720 --> 00:31:09,919
that was of interest well because in the

830
00:31:09,039 --> 00:31:11,760
previous one

831
00:31:09,919 --> 00:31:13,519
we pivoted it on at service house i

832
00:31:11,760 --> 00:31:15,360
decided let's just pivot on explorer so

833
00:31:13,519 --> 00:31:17,120
we ran malphine a third time but this

834
00:31:15,360 --> 00:31:20,158
time we said let's grab for explore

835
00:31:17,120 --> 00:31:21,199
and when we did malphine found that

836
00:31:20,159 --> 00:31:24,000
explorer had

837
00:31:21,200 --> 00:31:24,960
a vad at this exact same address that

838
00:31:24,000 --> 00:31:27,919
was flagged

839
00:31:24,960 --> 00:31:30,880
page execute read write we found that to

840
00:31:27,919 --> 00:31:33,360
be incredibly interesting

841
00:31:30,880 --> 00:31:35,519
so we decided to validate that with the

842
00:31:33,360 --> 00:31:38,080
vat info plug-in

843
00:31:35,519 --> 00:31:39,919
and we ran the vat info plug-in just

844
00:31:38,080 --> 00:31:42,799
against pin 6824

845
00:31:39,919 --> 00:31:44,720
grepping for that memory address and yes

846
00:31:42,799 --> 00:31:47,600
we found that it was indeed

847
00:31:44,720 --> 00:31:49,039
flagged page execute read write so we

848
00:31:47,600 --> 00:31:50,639
dropped into vault shell

849
00:31:49,039 --> 00:31:52,879
and when we dropped into vol show we

850
00:31:50,640 --> 00:31:54,880
said hey display the bytes

851
00:31:52,880 --> 00:31:56,080
at this memory address the memory

852
00:31:54,880 --> 00:31:56,799
address where we found the presence of

853
00:31:56,080 --> 00:32:00,080
the no op

854
00:31:56,799 --> 00:32:02,000
and show us the next 256 bytes we saw

855
00:32:00,080 --> 00:32:03,039
some output that may or may not resemble

856
00:32:02,000 --> 00:32:05,120
shell code

857
00:32:03,039 --> 00:32:07,200
so since we weren't sure we decided to

858
00:32:05,120 --> 00:32:10,080
use the disassembly command within ball

859
00:32:07,200 --> 00:32:11,679
shell to disassemble those 256 bytes

860
00:32:10,080 --> 00:32:14,799
and we saw something that looked pretty

861
00:32:11,679 --> 00:32:16,399
much like assembly so we exited out of

862
00:32:14,799 --> 00:32:18,559
all shell we created a directory called

863
00:32:16,399 --> 00:32:20,000
malfind we ran the malphia and plug in

864
00:32:18,559 --> 00:32:23,039
one more time but this time

865
00:32:20,000 --> 00:32:26,799
we ran it against pid6824 and we

866
00:32:23,039 --> 00:32:27,360
dumped it the um those sections that now

867
00:32:26,799 --> 00:32:28,799
for the two

868
00:32:27,360 --> 00:32:32,158
the two memory sections that malfine

869
00:32:28,799 --> 00:32:34,320
identified into our dump directory

870
00:32:32,159 --> 00:32:37,039
and then we leveraged at the end we

871
00:32:34,320 --> 00:32:40,158
leveraged red error r2

872
00:32:37,039 --> 00:32:41,840
to against our dump section so that we

873
00:32:40,159 --> 00:32:42,720
could do a little bit deeper code level

874
00:32:41,840 --> 00:32:44,879
analysis

875
00:32:42,720 --> 00:32:46,880
and see if we were going down a rabbit

876
00:32:44,880 --> 00:32:49,840
hole or if our tool was reporting we

877
00:32:46,880 --> 00:32:51,679
think it should be reporting

878
00:32:49,840 --> 00:32:54,480
so let's move to our third memory

879
00:32:51,679 --> 00:32:56,320
example and i'll kick this one off

880
00:32:54,480 --> 00:32:58,320
and this is going to be the one where

881
00:32:56,320 --> 00:32:59,760
it's going to it's going to point us

882
00:32:58,320 --> 00:33:02,960
in some directions but it's going to

883
00:32:59,760 --> 00:33:05,840
make us work for it and so

884
00:33:02,960 --> 00:33:07,600
again we ran volatility 3 this is

885
00:33:05,840 --> 00:33:09,600
against our pizza.line

886
00:33:07,600 --> 00:33:11,199
memory image and we jumped right into

887
00:33:09,600 --> 00:33:13,199
the malphine plug-in because again we're

888
00:33:11,200 --> 00:33:15,120
talking about code injection

889
00:33:13,200 --> 00:33:17,200
and i'm saying grep for the presence of

890
00:33:15,120 --> 00:33:18,879
an mz or a no op because in the first

891
00:33:17,200 --> 00:33:20,480
memory image we had great luck by

892
00:33:18,880 --> 00:33:22,159
searching for mz headers

893
00:33:20,480 --> 00:33:24,240
the second memory image we had a lot of

894
00:33:22,159 --> 00:33:26,799
luck by looking for a no op

895
00:33:24,240 --> 00:33:27,519
well we find note presence of an mz

896
00:33:26,799 --> 00:33:29,519
header

897
00:33:27,519 --> 00:33:31,279
and we see plenty of no ops but they

898
00:33:29,519 --> 00:33:32,640
don't appear to be like a no-op sled

899
00:33:31,279 --> 00:33:34,559
where they're stacked right on top of

900
00:33:32,640 --> 00:33:36,640
each other so these could just be false

901
00:33:34,559 --> 00:33:39,678
positives where we just have hex 90s

902
00:33:36,640 --> 00:33:44,480
somewhere in our output

903
00:33:39,679 --> 00:33:46,399
so remember before we grew up for

904
00:33:44,480 --> 00:33:49,360
service hosts and explorer so we'll do

905
00:33:46,399 --> 00:33:49,360
svc host

906
00:33:50,240 --> 00:33:57,760
and explorer and let's see if malphine

907
00:33:55,360 --> 00:33:58,639
flags either a service host or an

908
00:33:57,760 --> 00:34:01,440
explorer

909
00:33:58,640 --> 00:34:06,000
or explorer.exe is having any vads that

910
00:34:01,440 --> 00:34:08,879
are flagged for page execute read write

911
00:34:06,000 --> 00:34:09,918
we'll notice that there's one two three

912
00:34:08,879 --> 00:34:13,440
service hosts

913
00:34:09,918 --> 00:34:17,440
and one explorer that um malphine

914
00:34:13,440 --> 00:34:17,839
has found to have bads that are flagged

915
00:34:17,440 --> 00:34:20,240
page

916
00:34:17,839 --> 00:34:21,520
execute read write so i'll clear my

917
00:34:20,239 --> 00:34:25,199
screen out

918
00:34:21,520 --> 00:34:26,399
we'll go ahead and we will up arrow

919
00:34:25,199 --> 00:34:27,678
and now what i'm going to do is i'm

920
00:34:26,399 --> 00:34:28,638
going to say hey i want to see a little

921
00:34:27,679 --> 00:34:31,918
more detail

922
00:34:28,639 --> 00:34:35,119
about what's going on show me

923
00:34:31,918 --> 00:34:39,359
the eight lines after you hit on

924
00:34:35,119 --> 00:34:41,919
these service hosts and explorer within

925
00:34:39,359 --> 00:34:41,918
malphite

926
00:34:42,719 --> 00:34:47,520
so we can see here's you know pid 164

927
00:34:45,960 --> 00:34:51,520
servicehost.exe

928
00:34:47,520 --> 00:34:53,759
at this address in memory

929
00:34:51,520 --> 00:34:54,960
that vad starts and it's flagged page

930
00:34:53,760 --> 00:34:57,920
execute read write

931
00:34:54,960 --> 00:34:58,720
it's a little bit output it's not overly

932
00:34:57,920 --> 00:35:00,320
concerning

933
00:34:58,720 --> 00:35:02,240
skipped out another service host this

934
00:35:00,320 --> 00:35:04,560
one two three two

935
00:35:02,240 --> 00:35:05,359
no output but it is flagged page execute

936
00:35:04,560 --> 00:35:06,880
read write

937
00:35:05,359 --> 00:35:09,200
again we go through we see a little bit

938
00:35:06,880 --> 00:35:10,560
of output a little bit output

939
00:35:09,200 --> 00:35:12,480
and this is where i was like well this

940
00:35:10,560 --> 00:35:13,759
is super interesting

941
00:35:12,480 --> 00:35:16,079
and so one of the things that i've

942
00:35:13,760 --> 00:35:19,839
realized over time is that the

943
00:35:16,079 --> 00:35:20,880
absence of data can be as telling or

944
00:35:19,839 --> 00:35:24,200
more telling

945
00:35:20,880 --> 00:35:25,440
than the data itself so if we go back to

946
00:35:24,200 --> 00:35:26,799
pid1232

947
00:35:25,440 --> 00:35:28,640
this service host we can see that

948
00:35:26,800 --> 00:35:29,520
there's no data here at all there's

949
00:35:28,640 --> 00:35:32,879
nothing

950
00:35:29,520 --> 00:35:33,920
but the vad is flagged page execute read

951
00:35:32,880 --> 00:35:37,119
write

952
00:35:33,920 --> 00:35:40,079
so that to me was a little interesting

953
00:35:37,119 --> 00:35:42,240
so i immediately pivoted on this so

954
00:35:40,079 --> 00:35:44,320
we're going to grab this memory range

955
00:35:42,240 --> 00:35:46,240
and we're going to copy it and i'll

956
00:35:44,320 --> 00:35:48,240
clear my screen out

957
00:35:46,240 --> 00:35:50,959
and just like before we're going to drop

958
00:35:48,240 --> 00:35:50,959
into vault shell

959
00:35:57,040 --> 00:36:01,440
and we're going to drop into the current

960
00:35:58,480 --> 00:36:03,359
context of processpid123do

961
00:36:01,440 --> 00:36:04,640
and i'm i'm assuming you're starting to

962
00:36:03,359 --> 00:36:07,680
see a little bit of a pattern

963
00:36:04,640 --> 00:36:11,118
in our methodology here and so

964
00:36:07,680 --> 00:36:13,440
we're going to instead of displaying the

965
00:36:11,119 --> 00:36:17,440
bytes we're going to disassemble

966
00:36:13,440 --> 00:36:21,040
at this memory address

967
00:36:17,440 --> 00:36:22,880
and we'll do a count of

968
00:36:21,040 --> 00:36:26,320
i don't know we'll do 1024. we'll start

969
00:36:22,880 --> 00:36:28,160
with 1024.

970
00:36:26,320 --> 00:36:30,160
and as you notice with the output

971
00:36:28,160 --> 00:36:32,399
there's again there appears to be

972
00:36:30,160 --> 00:36:33,920
no data so i'll clear my screen so you

973
00:36:32,400 --> 00:36:36,640
can see all up arrow

974
00:36:33,920 --> 00:36:37,680
and we can change this 1024 to i don't

975
00:36:36,640 --> 00:36:41,118
know 2048

976
00:36:37,680 --> 00:36:44,480
so we'll just double it

977
00:36:41,119 --> 00:36:47,119
and again no data

978
00:36:44,480 --> 00:36:47,920
so i'll clear my screen again and let's

979
00:36:47,119 --> 00:36:51,040
just say hey

980
00:36:47,920 --> 00:36:52,839
let's do 4096 which is an entire frame

981
00:36:51,040 --> 00:36:55,839
in memory

982
00:36:52,839 --> 00:36:55,839
um

983
00:36:58,079 --> 00:37:01,200
and see what this gets us

984
00:37:01,839 --> 00:37:05,279
well that's interesting so here we're

985
00:37:04,560 --> 00:37:07,599
seeing

986
00:37:05,280 --> 00:37:08,400
nothing and this is where i was like

987
00:37:07,599 --> 00:37:11,440
what is going

988
00:37:08,400 --> 00:37:13,920
on and i realized and i remembered

989
00:37:11,440 --> 00:37:14,720
that there's malware out there that will

990
00:37:13,920 --> 00:37:16,880
sometimes

991
00:37:14,720 --> 00:37:18,640
wipe the first physical frame of

992
00:37:16,880 --> 00:37:20,480
memories and in some cases it'll be

993
00:37:18,640 --> 00:37:23,520
it'll overwrite the actual

994
00:37:20,480 --> 00:37:26,000
um header of the pe file that it's

995
00:37:23,520 --> 00:37:26,800
of the of the executable that's injected

996
00:37:26,000 --> 00:37:30,560
into memory

997
00:37:26,800 --> 00:37:32,480
or it can as you notice there's a range

998
00:37:30,560 --> 00:37:34,560
of memory that's been allocated

999
00:37:32,480 --> 00:37:36,000
that's flagged page execute read write

1000
00:37:34,560 --> 00:37:38,160
it's possible that they could have just

1001
00:37:36,000 --> 00:37:39,280
skipped this first page and then started

1002
00:37:38,160 --> 00:37:42,160
the code injection

1003
00:37:39,280 --> 00:37:43,680
in the following page in memory and

1004
00:37:42,160 --> 00:37:45,520
that's what i kind of was thinking

1005
00:37:43,680 --> 00:37:48,319
was happening so i was like well let's

1006
00:37:45,520 --> 00:37:50,400
just grab this last

1007
00:37:48,320 --> 00:37:52,720
memory i just range here at the bottom

1008
00:37:50,400 --> 00:37:55,680
i'll clear my screen out

1009
00:37:52,720 --> 00:37:55,680
and let's start there

1010
00:37:55,839 --> 00:38:02,078
and so pasting this in and we'll just do

1011
00:37:59,200 --> 00:38:02,078
a count of 10

1012
00:38:02,839 --> 00:38:05,839
24.

1013
00:38:06,400 --> 00:38:11,599
aha here you will notice

1014
00:38:09,520 --> 00:38:14,560
that we start to see what looks like

1015
00:38:11,599 --> 00:38:17,760
some legitimate code

1016
00:38:14,560 --> 00:38:18,320
that's of interest so if we would have

1017
00:38:17,760 --> 00:38:21,760
looked

1018
00:38:18,320 --> 00:38:23,680
um a little bit more in this and i've

1019
00:38:21,760 --> 00:38:25,599
pre-cooked it for the sake of this

1020
00:38:23,680 --> 00:38:26,799
of this demo but i can tell you if you

1021
00:38:25,599 --> 00:38:29,280
would have done a little bit further

1022
00:38:26,800 --> 00:38:30,960
investigation within vault shell

1023
00:38:29,280 --> 00:38:32,480
you would have been able to find that

1024
00:38:30,960 --> 00:38:47,839
this memory address

1025
00:38:32,480 --> 00:38:47,839
and i'll put it in here

1026
00:38:48,640 --> 00:38:53,279
we find the presence of an mz header so

1027
00:38:51,680 --> 00:38:54,960
this is within that new region that we

1028
00:38:53,280 --> 00:38:55,920
were looking at we can see again the dos

1029
00:38:54,960 --> 00:38:59,280
stub

1030
00:38:55,920 --> 00:38:59,280
you know if we wanted to

1031
00:38:59,599 --> 00:39:03,359
change this to 10 24

1032
00:39:08,560 --> 00:39:11,759
you get a little bit more robust output

1033
00:39:10,400 --> 00:39:15,040
and we start to see

1034
00:39:11,760 --> 00:39:17,440
you know references to again

1035
00:39:15,040 --> 00:39:18,960
the pe header so reference sections

1036
00:39:17,440 --> 00:39:21,839
within the pe header

1037
00:39:18,960 --> 00:39:25,040
so we know we're on the right track so

1038
00:39:21,839 --> 00:39:25,040
we're going to quit out of this

1039
00:39:26,000 --> 00:39:29,680
and i'll clear my screen so you can see

1040
00:39:28,079 --> 00:39:30,960
and we're going to make a directory and

1041
00:39:29,680 --> 00:39:35,118
we're going to call it

1042
00:39:30,960 --> 00:39:35,920
now find and just like in the previous

1043
00:39:35,119 --> 00:39:39,359
example

1044
00:39:35,920 --> 00:39:42,160
we're going to dump

1045
00:39:39,359 --> 00:39:43,598
the section so we're going to dump kid

1046
00:39:42,160 --> 00:39:46,879
one two three four

1047
00:39:43,599 --> 00:39:48,000
dash dash dump but before we say enter

1048
00:39:46,880 --> 00:39:51,200
we have to tell it

1049
00:39:48,000 --> 00:39:51,200
where we want it to dump to

1050
00:39:52,240 --> 00:39:56,640
and with uh volatility three i put the

1051
00:39:54,160 --> 00:39:59,160
dump directory before the plugin

1052
00:39:56,640 --> 00:40:00,640
so we're saying hey run malphine against

1053
00:39:59,160 --> 00:40:02,319
pid1232

1054
00:40:00,640 --> 00:40:04,160
dump the sections that are flagged page

1055
00:40:02,320 --> 00:40:04,960
execute read write and send them to our

1056
00:40:04,160 --> 00:40:07,520
malfind

1057
00:40:04,960 --> 00:40:07,520
directory

1058
00:40:08,079 --> 00:40:12,560
in this case it's only one section we'll

1059
00:40:10,480 --> 00:40:13,760
do a quick little sanity check to see if

1060
00:40:12,560 --> 00:40:17,680
it dumped it

1061
00:40:13,760 --> 00:40:20,000
and it did okay well

1062
00:40:17,680 --> 00:40:21,200
let's take a look and see if we can't

1063
00:40:20,000 --> 00:40:25,119
recover

1064
00:40:21,200 --> 00:40:27,040
that uh injected

1065
00:40:25,119 --> 00:40:28,319
file within this within this memory

1066
00:40:27,040 --> 00:40:31,119
range

1067
00:40:28,319 --> 00:40:31,839
so one of the ways that we can do that

1068
00:40:31,119 --> 00:40:35,119
is we can

1069
00:40:31,839 --> 00:40:39,839
open up this dump section

1070
00:40:35,119 --> 00:40:39,839
within a hex editor

1071
00:40:40,800 --> 00:40:44,880
and we can use the search feature

1072
00:40:45,040 --> 00:40:52,079
for 4d5a which is our mz header

1073
00:40:48,720 --> 00:40:54,240
and we can see that it finds it right

1074
00:40:52,079 --> 00:40:54,240
here

1075
00:40:55,839 --> 00:40:59,920
close this out so you can see here's our

1076
00:40:57,119 --> 00:41:02,480
4d5a mz

1077
00:40:59,920 --> 00:41:04,560
up here again we see this program cannot

1078
00:41:02,480 --> 00:41:07,119
be run in dos mode

1079
00:41:04,560 --> 00:41:09,440
and then we start to see sections of the

1080
00:41:07,119 --> 00:41:14,800
pe header

1081
00:41:09,440 --> 00:41:16,400
so because we're inside of a hex editor

1082
00:41:14,800 --> 00:41:18,400
we can go ahead and try to carve this

1083
00:41:16,400 --> 00:41:19,280
out and one of the ways that we can do

1084
00:41:18,400 --> 00:41:22,079
that

1085
00:41:19,280 --> 00:41:23,200
is just basically highlighting all of

1086
00:41:22,079 --> 00:41:27,520
the bytes

1087
00:41:23,200 --> 00:41:27,520
above the start of our mz header

1088
00:41:27,760 --> 00:41:39,760
right clicking saying delete

1089
00:41:34,079 --> 00:41:43,200
and then we're going to save as

1090
00:41:39,760 --> 00:41:49,200
and we're going to call it one two three

1091
00:41:43,200 --> 00:41:53,839
two dot bin

1092
00:41:49,200 --> 00:41:53,839
and close out of our hex editor

1093
00:41:57,280 --> 00:42:02,319
and if we look in our current directory

1094
00:41:58,960 --> 00:42:03,920
we should now have a 1232.bin and one of

1095
00:42:02,319 --> 00:42:07,440
the things that we can do is we can just

1096
00:42:03,920 --> 00:42:07,440
run the file command against that

1097
00:42:09,680 --> 00:42:14,720
and the file command is showing this to

1098
00:42:11,200 --> 00:42:17,759
be a portable executable 32 bits

1099
00:42:14,720 --> 00:42:18,959
and looking it shows it as a dll and

1100
00:42:17,760 --> 00:42:23,319
like before

1101
00:42:18,960 --> 00:42:26,319
we can run obstump dash x against

1102
00:42:23,319 --> 00:42:26,319
r1232.bin

1103
00:42:27,440 --> 00:42:31,200
a little more robust than our last

1104
00:42:29,359 --> 00:42:31,759
output but we'll scroll back up to the

1105
00:42:31,200 --> 00:42:34,960
top

1106
00:42:31,760 --> 00:42:38,240
and we see in fact it's 32-bit

1107
00:42:34,960 --> 00:42:40,800
it's a dll it's an executable and

1108
00:42:38,240 --> 00:42:43,040
a compile time that's you know almost 10

1109
00:42:40,800 --> 00:42:44,079
years old

1110
00:42:43,040 --> 00:42:47,200
well we still don't know what we're

1111
00:42:44,079 --> 00:42:49,440
dealing with so

1112
00:42:47,200 --> 00:42:50,799
you can run clam scan because it's baked

1113
00:42:49,440 --> 00:42:55,200
into rimnix

1114
00:42:50,800 --> 00:42:56,079
against our band file that we carved out

1115
00:42:55,200 --> 00:42:57,359
and for those of you that aren't

1116
00:42:56,079 --> 00:42:58,240
familiar with camscan it's basically

1117
00:42:57,359 --> 00:43:00,799
just an av

1118
00:42:58,240 --> 00:43:02,959
scanner with a bunch of other things

1119
00:43:00,800 --> 00:43:04,880
that you can do with it but

1120
00:43:02,960 --> 00:43:06,800
we're essentially just running av

1121
00:43:04,880 --> 00:43:07,359
against our one two three two bit dot

1122
00:43:06,800 --> 00:43:10,160
bin

1123
00:43:07,359 --> 00:43:10,960
file that we just carved out of memory

1124
00:43:10,160 --> 00:43:13,359
and

1125
00:43:10,960 --> 00:43:14,880
pretty quickly we get a reference for a

1126
00:43:13,359 --> 00:43:19,520
hit to the mordo

1127
00:43:14,880 --> 00:43:19,520
virus and so we could come back

1128
00:43:20,079 --> 00:43:22,319
to

1129
00:43:24,640 --> 00:43:29,200
a web browser and put in morto virus and

1130
00:43:27,520 --> 00:43:30,640
we'll see here a couple write-ups

1131
00:43:29,200 --> 00:43:33,520
and if we open up one of them like this

1132
00:43:30,640 --> 00:43:36,640
one here from f-secure labs

1133
00:43:33,520 --> 00:43:38,839
we can scroll through this analysis and

1134
00:43:36,640 --> 00:43:42,160
we see some references

1135
00:43:38,839 --> 00:43:44,799
um to some embedded passwords

1136
00:43:42,160 --> 00:43:48,000
within the binary we also see references

1137
00:43:44,800 --> 00:43:50,400
to run dll32.exe run as admin

1138
00:43:48,000 --> 00:43:51,520
and then also that this particular

1139
00:43:50,400 --> 00:43:55,520
malware scans

1140
00:43:51,520 --> 00:43:58,640
for the presence of av

1141
00:43:55,520 --> 00:44:00,319
so let's take a close look at this and

1142
00:43:58,640 --> 00:44:03,200
see if in fact

1143
00:44:00,319 --> 00:44:04,319
this is you know what we're dealing with

1144
00:44:03,200 --> 00:44:07,759
and so we'll run

1145
00:44:04,319 --> 00:44:08,720
the floss tool against our carved out

1146
00:44:07,760 --> 00:44:10,160
binary

1147
00:44:08,720 --> 00:44:12,240
pump it out to less so that we can

1148
00:44:10,160 --> 00:44:13,598
scroll through it

1149
00:44:12,240 --> 00:44:16,078
and as we scroll down through this

1150
00:44:13,599 --> 00:44:20,079
output we start to see

1151
00:44:16,079 --> 00:44:23,520
references to run dll32.exe

1152
00:44:20,079 --> 00:44:24,960
run as admin okay and then we also see

1153
00:44:23,520 --> 00:44:27,440
what looks like

1154
00:44:24,960 --> 00:44:28,400
passwords or could reasonably be

1155
00:44:27,440 --> 00:44:29,920
passwords

1156
00:44:28,400 --> 00:44:31,920
right well the word password and then as

1157
00:44:29,920 --> 00:44:35,359
you scroll through here you see some

1158
00:44:31,920 --> 00:44:36,800
some pretty commonly used passwords um

1159
00:44:35,359 --> 00:44:40,078
and then as we continue down through

1160
00:44:36,800 --> 00:44:43,599
this output we're going to start to see

1161
00:44:40,079 --> 00:44:46,720
uh references to some api calls

1162
00:44:43,599 --> 00:44:48,839
but then also we'll start to see

1163
00:44:46,720 --> 00:44:52,640
references to

1164
00:44:48,839 --> 00:44:55,599
um different av engines

1165
00:44:52,640 --> 00:44:56,319
like here is references to some of the

1166
00:44:55,599 --> 00:44:59,359
different av

1167
00:44:56,319 --> 00:45:01,359
engines so it's av aware

1168
00:44:59,359 --> 00:45:03,598
so we can and then also you'll see a

1169
00:45:01,359 --> 00:45:06,799
reference

1170
00:45:03,599 --> 00:45:09,839
to run dll32.exe

1171
00:45:06,800 --> 00:45:12,960
we still see a reference to um

1172
00:45:09,839 --> 00:45:15,839
svc host so there's a lot of good stuff

1173
00:45:12,960 --> 00:45:16,400
in this output that um like here's the

1174
00:45:15,839 --> 00:45:20,640
referenced

1175
00:45:16,400 --> 00:45:23,839
svc host that corroborates that hey yes

1176
00:45:20,640 --> 00:45:27,359
we've more than likely just carved out

1177
00:45:23,839 --> 00:45:30,160
a mortal virus sample so

1178
00:45:27,359 --> 00:45:32,319
let me recap what we did on this third

1179
00:45:30,160 --> 00:45:34,879
memory image

1180
00:45:32,319 --> 00:45:36,240
we used volatility we jumped straight to

1181
00:45:34,880 --> 00:45:38,800
the malphine plug-in

1182
00:45:36,240 --> 00:45:41,279
we said hey in the first two examples we

1183
00:45:38,800 --> 00:45:42,720
had a lot of success in example one by

1184
00:45:41,280 --> 00:45:43,680
looking and searching for the presence

1185
00:45:42,720 --> 00:45:46,480
of an mz header

1186
00:45:43,680 --> 00:45:48,799
the second one we had a lot of success

1187
00:45:46,480 --> 00:45:51,280
looking for the presence of a no op

1188
00:45:48,800 --> 00:45:53,200
let's look for both of those at once

1189
00:45:51,280 --> 00:45:54,640
nothing was found we got some no ops

1190
00:45:53,200 --> 00:45:55,919
they look like false positives because

1191
00:45:54,640 --> 00:45:57,598
they weren't stacked on top of each

1192
00:45:55,920 --> 00:45:59,680
other in memory

1193
00:45:57,599 --> 00:46:01,520
so then we said hey let's just run

1194
00:45:59,680 --> 00:46:02,720
malphine again and grep for explorer and

1195
00:46:01,520 --> 00:46:06,160
service host

1196
00:46:02,720 --> 00:46:08,000
we it flagged on both svc host and

1197
00:46:06,160 --> 00:46:10,078
explorer as having

1198
00:46:08,000 --> 00:46:11,119
ads that were flagged as page execute

1199
00:46:10,079 --> 00:46:12,960
read write

1200
00:46:11,119 --> 00:46:15,040
however we need a little more

1201
00:46:12,960 --> 00:46:16,720
information so we ran it again and said

1202
00:46:15,040 --> 00:46:17,920
show us eight bytes after the hit

1203
00:46:16,720 --> 00:46:21,520
so that we could get a little bit of the

1204
00:46:17,920 --> 00:46:24,079
output and we noticed with pid1232 which

1205
00:46:21,520 --> 00:46:26,880
was a servicehost.exe

1206
00:46:24,079 --> 00:46:27,359
that there was no data being displayed

1207
00:46:26,880 --> 00:46:29,119
so

1208
00:46:27,359 --> 00:46:31,200
in order for us to investigate that a

1209
00:46:29,119 --> 00:46:32,720
little bit further we opened up ball

1210
00:46:31,200 --> 00:46:34,799
shell we dropped into the current

1211
00:46:32,720 --> 00:46:37,279
context of kid1232

1212
00:46:34,800 --> 00:46:38,240
and we started disassembling at the

1213
00:46:37,280 --> 00:46:39,599
address where

1214
00:46:38,240 --> 00:46:41,439
malphine was starting at the address

1215
00:46:39,599 --> 00:46:43,920
that malphine was flagging

1216
00:46:41,440 --> 00:46:45,520
and we weren't seeing anything so we got

1217
00:46:43,920 --> 00:46:47,520
through the first frame

1218
00:46:45,520 --> 00:46:48,880
we decided to jump into the second frame

1219
00:46:47,520 --> 00:46:51,599
and that's when we started to see what

1220
00:46:48,880 --> 00:46:53,520
looked like legitimate assembly code

1221
00:46:51,599 --> 00:46:56,079
because i pre-cooked the offset we

1222
00:46:53,520 --> 00:46:58,319
displayed a section within that second

1223
00:46:56,079 --> 00:46:59,200
frame that showed the presence of an mz

1224
00:46:58,319 --> 00:47:02,160
header

1225
00:46:59,200 --> 00:47:04,319
so we dropped out a malfund made a dump

1226
00:47:02,160 --> 00:47:05,200
directory called malphine ran melphine

1227
00:47:04,319 --> 00:47:07,359
again this time

1228
00:47:05,200 --> 00:47:08,640
dumping those sections or in this case a

1229
00:47:07,359 --> 00:47:11,759
single section that was

1230
00:47:08,640 --> 00:47:13,359
single vad arranged that was flagged and

1231
00:47:11,760 --> 00:47:14,240
put that into a hex editor search for

1232
00:47:13,359 --> 00:47:16,400
the presence

1233
00:47:14,240 --> 00:47:17,680
of the 4d5a which would be the start of

1234
00:47:16,400 --> 00:47:21,599
the pe file

1235
00:47:17,680 --> 00:47:21,598
and carve that out with the hex editor

1236
00:47:22,480 --> 00:47:25,680
or you know saved it as a bin file and

1237
00:47:24,640 --> 00:47:27,920
then we ran a couple

1238
00:47:25,680 --> 00:47:29,759
you know quick um we ran the file

1239
00:47:27,920 --> 00:47:31,200
command and object against it to see

1240
00:47:29,760 --> 00:47:32,960
what it was being reported as it was

1241
00:47:31,200 --> 00:47:34,640
coming back as a 32-bit dll

1242
00:47:32,960 --> 00:47:36,079
and then we ran clam scan against it and

1243
00:47:34,640 --> 00:47:36,879
we got a positive hit for the mortal

1244
00:47:36,079 --> 00:47:40,079
virus

1245
00:47:36,880 --> 00:47:43,440
did a quick little ocean look up

1246
00:47:40,079 --> 00:47:46,000
on our web browser to get a couple of

1247
00:47:43,440 --> 00:47:47,040
indicators of what this virus might

1248
00:47:46,000 --> 00:47:49,599
entail

1249
00:47:47,040 --> 00:47:50,960
and then we ran the floss tool against

1250
00:47:49,599 --> 00:47:53,680
the

1251
00:47:50,960 --> 00:47:56,000
binary that we carved out of memory then

1252
00:47:53,680 --> 00:47:57,839
we called 1232.bin

1253
00:47:56,000 --> 00:47:59,599
and then we searched through the output

1254
00:47:57,839 --> 00:48:02,319
and we saw matches

1255
00:47:59,599 --> 00:48:04,800
within the strings output that matched

1256
00:48:02,319 --> 00:48:07,920
the indicators within the write-up

1257
00:48:04,800 --> 00:48:08,880
so you can see how with this particular

1258
00:48:07,920 --> 00:48:10,400
memory image

1259
00:48:08,880 --> 00:48:12,559
and again i said this is kind of like

1260
00:48:10,400 --> 00:48:15,359
the thesis of this whole talk

1261
00:48:12,559 --> 00:48:17,920
malphine is saying hey there's something

1262
00:48:15,359 --> 00:48:20,400
weird about pid1232

1263
00:48:17,920 --> 00:48:20,960
but i don't have any data to show you

1264
00:48:20,400 --> 00:48:24,319
and so

1265
00:48:20,960 --> 00:48:27,440
if you were new let me

1266
00:48:24,319 --> 00:48:31,599
um if you were

1267
00:48:27,440 --> 00:48:33,839
say new to uh

1268
00:48:31,599 --> 00:48:35,760
doing memory analysis and you haven't

1269
00:48:33,839 --> 00:48:37,680
spent a lot of time

1270
00:48:35,760 --> 00:48:39,280
doing this analysis and especially we're

1271
00:48:37,680 --> 00:48:40,960
super familiar with maybe the malphine

1272
00:48:39,280 --> 00:48:43,359
plug-in

1273
00:48:40,960 --> 00:48:44,720
it would be easy to just skip over this

1274
00:48:43,359 --> 00:48:45,759
one two three two because there's

1275
00:48:44,720 --> 00:48:48,558
nothing here

1276
00:48:45,760 --> 00:48:50,640
and most folks they're usually looking

1277
00:48:48,559 --> 00:48:53,760
for like the presence of an mz header

1278
00:48:50,640 --> 00:48:55,359
and so again it's the tool is telling us

1279
00:48:53,760 --> 00:48:58,319
there's something going on here there's

1280
00:48:55,359 --> 00:49:01,040
something going on with pid1232

1281
00:48:58,319 --> 00:49:03,440
um but this is all it's going to show us

1282
00:49:01,040 --> 00:49:05,920
and so again it was the absence of data

1283
00:49:03,440 --> 00:49:08,480
in this case that was more telling than

1284
00:49:05,920 --> 00:49:11,599
this just random data

1285
00:49:08,480 --> 00:49:13,599
and so we were able to pivot on that and

1286
00:49:11,599 --> 00:49:17,040
that's where knowing how your tool works

1287
00:49:13,599 --> 00:49:18,720
knowing how to investigate um

1288
00:49:17,040 --> 00:49:20,240
these processes a little bit deeper

1289
00:49:18,720 --> 00:49:23,040
within your tool

1290
00:49:20,240 --> 00:49:24,879
will actually help solve or answer some

1291
00:49:23,040 --> 00:49:26,800
of these questions when the tool or the

1292
00:49:24,880 --> 00:49:30,480
or the plug-in is only getting you

1293
00:49:26,800 --> 00:49:34,079
so far so that is it for the demos

1294
00:49:30,480 --> 00:49:36,559
let me jump back over to my slide deck

1295
00:49:34,079 --> 00:49:37,200
here are some of the references to the

1296
00:49:36,559 --> 00:49:40,559
tools

1297
00:49:37,200 --> 00:49:43,680
that i used as well as

1298
00:49:40,559 --> 00:49:46,240
some other webinars and books and stuff

1299
00:49:43,680 --> 00:49:48,879
out there that you might want to access

1300
00:49:46,240 --> 00:49:50,000
and then i will be available for

1301
00:49:48,880 --> 00:49:52,480
questions

1302
00:49:50,000 --> 00:49:54,240
i really appreciate you taking the time

1303
00:49:52,480 --> 00:49:59,839
to watch this presentation

1304
00:49:54,240 --> 00:49:59,839
and thank you very much

1305
00:50:16,480 --> 00:50:18,559
you

