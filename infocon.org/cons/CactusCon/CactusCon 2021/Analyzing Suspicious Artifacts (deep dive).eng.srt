1
00:00:03,600 --> 00:00:08,400
russ here from the reg team

2
00:00:05,520 --> 00:00:09,280
our next speakers are malware analysis

3
00:00:08,400 --> 00:00:12,559
specialist t

4
00:00:09,280 --> 00:00:15,599
the veyox and senior consultant jonas

5
00:00:12,559 --> 00:00:17,919
eichinger their talk today is titled

6
00:00:15,599 --> 00:00:20,800
analyzing suspicious artifacts

7
00:00:17,920 --> 00:00:23,600
a deep dive you'll have an opportunity

8
00:00:20,800 --> 00:00:24,640
to engage in a live q a discussion after

9
00:00:23,600 --> 00:00:26,480
the talk

10
00:00:24,640 --> 00:00:28,640
a link will be displayed at the end of

11
00:00:26,480 --> 00:00:29,119
the talk and clicking on the link will

12
00:00:28,640 --> 00:00:31,679
take you

13
00:00:29,119 --> 00:00:34,239
straight away to the live q a channel so

14
00:00:31,679 --> 00:00:37,680
you can interact with our speakers

15
00:00:34,239 --> 00:00:37,680
gentlemen over to you

16
00:00:40,800 --> 00:00:45,360
all right thank you and welcome everyone

17
00:00:43,280 --> 00:00:47,840
um this is our talk analyzing

18
00:00:45,360 --> 00:00:48,960
malicious artifacts there's a lot to dig

19
00:00:47,840 --> 00:00:50,719
into so we're going to

20
00:00:48,960 --> 00:00:52,480
go through a few slides quickly in the

21
00:00:50,719 --> 00:00:53,760
beginning and then jump right into some

22
00:00:52,480 --> 00:00:56,959
demos

23
00:00:53,760 --> 00:00:59,199
this is part one um

24
00:00:56,960 --> 00:01:00,239
of at least a two maybe three part four

25
00:00:59,199 --> 00:01:04,959
part series

26
00:01:00,239 --> 00:01:04,959
so let's go ahead and get started

27
00:01:05,360 --> 00:01:12,400
so my name is clay um i'm a

28
00:01:08,799 --> 00:01:16,080
manager in uh our cybersock at uh

29
00:01:12,400 --> 00:01:17,600
sra security risk advisors and i lead

30
00:01:16,080 --> 00:01:19,360
our cyber threat

31
00:01:17,600 --> 00:01:20,960
intelligence and our cyber threat

32
00:01:19,360 --> 00:01:25,039
analysis teams

33
00:01:20,960 --> 00:01:28,479
um i'm also a part of our internal

34
00:01:25,040 --> 00:01:32,079
sock training development and

35
00:01:28,479 --> 00:01:33,360
jonas hi i'm jonas eisenger i'm a senior

36
00:01:32,079 --> 00:01:36,479
consultant

37
00:01:33,360 --> 00:01:39,600
with security risk advisors or sra

38
00:01:36,479 --> 00:01:41,920
and i primarily work in the service

39
00:01:39,600 --> 00:01:43,520
science of digital forensics as a lead

40
00:01:41,920 --> 00:01:46,560
investigator

41
00:01:43,520 --> 00:01:49,759
as well as an analyst

42
00:01:46,560 --> 00:01:52,320
an engineer with the cyber uh threat

43
00:01:49,759 --> 00:01:54,159
analysis team so that's where we do a

44
00:01:52,320 --> 00:01:55,758
lot of our reverse engineering work

45
00:01:54,159 --> 00:01:58,240
and then i contribute to the

46
00:01:55,759 --> 00:02:00,880
architecture and engineering

47
00:01:58,240 --> 00:02:00,880
group as well

48
00:02:01,360 --> 00:02:06,399
awesome so we're going to go over just a

49
00:02:05,200 --> 00:02:10,000
quick overview

50
00:02:06,399 --> 00:02:11,120
a general approach um quick uh note

51
00:02:10,000 --> 00:02:12,319
about the tools we're going to be

52
00:02:11,120 --> 00:02:15,680
demoing and

53
00:02:12,319 --> 00:02:19,440
get right into it so

54
00:02:15,680 --> 00:02:21,440
um why are we doing this so

55
00:02:19,440 --> 00:02:22,959
um we're digging into this to find out

56
00:02:21,440 --> 00:02:26,400
like what what is the threat

57
00:02:22,959 --> 00:02:30,480
exactly right pull out some iocs

58
00:02:26,400 --> 00:02:31,440
um and work towards improving our

59
00:02:30,480 --> 00:02:33,920
defensive and our

60
00:02:31,440 --> 00:02:34,720
learning capabilities i may note on the

61
00:02:33,920 --> 00:02:37,839
side to

62
00:02:34,720 --> 00:02:38,560
the type of cyber threat intelligence

63
00:02:37,840 --> 00:02:42,319
that

64
00:02:38,560 --> 00:02:46,000
that these items

65
00:02:42,319 --> 00:02:48,160
speak to another very important one

66
00:02:46,000 --> 00:02:50,480
is gaining intelligence into current

67
00:02:48,160 --> 00:02:53,440
threats so this is strategic

68
00:02:50,480 --> 00:02:55,040
threat intelligence and we're seeing

69
00:02:53,440 --> 00:02:57,359
more and more organizations

70
00:02:55,040 --> 00:02:59,679
starting to do this which is great

71
00:02:57,360 --> 00:03:03,280
because really the best source

72
00:02:59,680 --> 00:03:03,840
of threat intelligence is internally

73
00:03:03,280 --> 00:03:07,360
sourced

74
00:03:03,840 --> 00:03:09,120
information um could from come from

75
00:03:07,360 --> 00:03:13,840
ongoing phishing attacks

76
00:03:09,120 --> 00:03:13,840
forensics investigations etc

77
00:03:14,720 --> 00:03:21,599
and the general approach here um

78
00:03:18,159 --> 00:03:23,280
opsec is always critical

79
00:03:21,599 --> 00:03:24,720
right we don't want to tip off our tip

80
00:03:23,280 --> 00:03:28,239
our hand show our hand to

81
00:03:24,720 --> 00:03:32,080
the attackers so offline analysis

82
00:03:28,239 --> 00:03:34,239
and no public sandboxes um

83
00:03:32,080 --> 00:03:35,680
a good approach also is to prioritize

84
00:03:34,239 --> 00:03:40,080
analysis

85
00:03:35,680 --> 00:03:42,319
what goals um set some goals

86
00:03:40,080 --> 00:03:44,560
and work towards those those will help

87
00:03:42,319 --> 00:03:47,040
keep everyone focused

88
00:03:44,560 --> 00:03:48,480
and keep the investigation moving along

89
00:03:47,040 --> 00:03:50,239
a few goals might be

90
00:03:48,480 --> 00:03:51,518
um determining whether or not something

91
00:03:50,239 --> 00:03:54,480
is malicious

92
00:03:51,519 --> 00:03:56,080
this talk has made the determination

93
00:03:54,480 --> 00:03:57,518
that it is malicious and so we're going

94
00:03:56,080 --> 00:04:02,319
to dig into that further

95
00:03:57,519 --> 00:04:02,319
um what type of mana of malware is this

96
00:04:02,560 --> 00:04:06,799
track we could track these findings and

97
00:04:05,360 --> 00:04:08,959
save them

98
00:04:06,799 --> 00:04:11,280
for so we can do timeline analysis right

99
00:04:08,959 --> 00:04:14,480
is this attack we've seen before

100
00:04:11,280 --> 00:04:16,399
can we associate this with a certain

101
00:04:14,480 --> 00:04:18,159
threat group have we've seen this type

102
00:04:16,399 --> 00:04:21,358
of these types of ttps

103
00:04:18,160 --> 00:04:24,000
before those sorts of things so some

104
00:04:21,358 --> 00:04:25,039
those are some basic and maybe slightly

105
00:04:24,000 --> 00:04:28,479
more advanced

106
00:04:25,040 --> 00:04:29,919
goals that we can work towards

107
00:04:28,479 --> 00:04:32,400
a general approach we're going to take

108
00:04:29,919 --> 00:04:34,639
here with the pe files of portable

109
00:04:32,400 --> 00:04:36,880
executable files

110
00:04:34,639 --> 00:04:38,560
going to focus on static analysis and

111
00:04:36,880 --> 00:04:40,479
we'll do a little bit of dynamic

112
00:04:38,560 --> 00:04:42,880
analysis as well

113
00:04:40,479 --> 00:04:45,120
but focusing on imports and exports

114
00:04:42,880 --> 00:04:48,159
focusing on the windows api

115
00:04:45,120 --> 00:04:49,759
um by doing this we can uh

116
00:04:48,160 --> 00:04:52,160
perhaps hone in on some of the

117
00:04:49,759 --> 00:04:54,479
functionality and capabilities

118
00:04:52,160 --> 00:04:57,360
um within the the piece of malware that

119
00:04:54,479 --> 00:04:59,039
we're analyzing

120
00:04:57,360 --> 00:05:00,880
and we'll go ahead and move on to shell

121
00:04:59,040 --> 00:05:03,280
code

122
00:05:00,880 --> 00:05:04,560
all right so the other type of malicious

123
00:05:03,280 --> 00:05:04,960
code that we're going to be looking at

124
00:05:04,560 --> 00:05:08,639
today

125
00:05:04,960 --> 00:05:10,719
is shell code now code is really just a

126
00:05:08,639 --> 00:05:14,240
name for any sort of a payload

127
00:05:10,720 --> 00:05:15,440
of executable code that is going to try

128
00:05:14,240 --> 00:05:18,720
and uh be run

129
00:05:15,440 --> 00:05:21,520
in um network environment

130
00:05:18,720 --> 00:05:22,800
so the name itself kind of comes from

131
00:05:21,520 --> 00:05:24,320
the fact that

132
00:05:22,800 --> 00:05:26,320
this type of code this malicious code is

133
00:05:24,320 --> 00:05:30,400
usually used as kind of a

134
00:05:26,320 --> 00:05:32,719
initial entry way to give an attacker

135
00:05:30,400 --> 00:05:33,919
remote shell access hence the name shell

136
00:05:32,720 --> 00:05:37,120
code

137
00:05:33,919 --> 00:05:38,639
so really even though that's not what

138
00:05:37,120 --> 00:05:41,120
would be happening it might not be

139
00:05:38,639 --> 00:05:44,000
opening up a reverse shell necessarily

140
00:05:41,120 --> 00:05:45,360
um that's kind of the the lineage of of

141
00:05:44,000 --> 00:05:47,600
the term shell code

142
00:05:45,360 --> 00:05:49,440
um and if we look at shell code from a

143
00:05:47,600 --> 00:05:51,280
technical perspective

144
00:05:49,440 --> 00:05:52,639
right we're looking at a position

145
00:05:51,280 --> 00:05:54,880
independent code

146
00:05:52,639 --> 00:05:56,400
so the show code when it gets executed

147
00:05:54,880 --> 00:05:58,080
it can't always assume

148
00:05:56,400 --> 00:06:00,479
that it's going to be executed from the

149
00:05:58,080 --> 00:06:02,880
same block of memory it's going to be

150
00:06:00,479 --> 00:06:04,639
injected at different times into

151
00:06:02,880 --> 00:06:06,400
different types of applications and so

152
00:06:04,639 --> 00:06:08,160
maybe and it's going to be you know kind

153
00:06:06,400 --> 00:06:11,280
of hard coded for that instance

154
00:06:08,160 --> 00:06:14,639
and so as a malware uh analyst

155
00:06:11,280 --> 00:06:17,679
we have to figure out a base pointer

156
00:06:14,639 --> 00:06:19,440
and then draft from that point on uh

157
00:06:17,680 --> 00:06:22,479
to be able to actually make sure that we

158
00:06:19,440 --> 00:06:24,719
can run that position independent code

159
00:06:22,479 --> 00:06:26,240
during the analysis so there are a

160
00:06:24,720 --> 00:06:28,319
couple of different tools

161
00:06:26,240 --> 00:06:29,919
that we're going to be taking a look at

162
00:06:28,319 --> 00:06:31,680
and they all support

163
00:06:29,919 --> 00:06:34,560
the ability to kind of set those

164
00:06:31,680 --> 00:06:38,400
reference points

165
00:06:34,560 --> 00:06:39,280
awesome some tools that we will be

166
00:06:38,400 --> 00:06:42,159
demoing

167
00:06:39,280 --> 00:06:43,039
are captured on this slide if you have

168
00:06:42,160 --> 00:06:46,080
any questions

169
00:06:43,039 --> 00:06:47,280
please reach out in the chat we are

170
00:06:46,080 --> 00:06:49,359
going to kind of move through these

171
00:06:47,280 --> 00:06:51,359
demos quickly we want to try to squeeze

172
00:06:49,360 --> 00:06:53,759
a lot in

173
00:06:51,360 --> 00:06:54,960
so without any further ado let's go

174
00:06:53,759 --> 00:06:57,440
ahead and get started

175
00:06:54,960 --> 00:06:59,280
the first demo is going to actually be a

176
00:06:57,440 --> 00:07:00,479
nice sort of segue from the previous

177
00:06:59,280 --> 00:07:02,239
talk when we were looking at

178
00:07:00,479 --> 00:07:03,680
malicious documents so it's going to

179
00:07:02,240 --> 00:07:09,440
start with a malicious document

180
00:07:03,680 --> 00:07:09,440
and pull out something interesting

181
00:07:11,039 --> 00:07:15,199
okay so um yeah before we get into the

182
00:07:14,080 --> 00:07:17,199
demos there is

183
00:07:15,199 --> 00:07:18,400
um a certain amount of background

184
00:07:17,199 --> 00:07:20,800
knowledge that

185
00:07:18,400 --> 00:07:21,679
that that is expected for people to know

186
00:07:20,800 --> 00:07:24,400
um

187
00:07:21,680 --> 00:07:25,520
if you do have questions don't hesitate

188
00:07:24,400 --> 00:07:28,560
to to reach out

189
00:07:25,520 --> 00:07:32,639
and uh we can we can point you and

190
00:07:28,560 --> 00:07:32,639
direct you to some useful resources

191
00:07:34,800 --> 00:07:38,080
so for this demo we are going to take a

192
00:07:37,280 --> 00:07:40,880
look at a

193
00:07:38,080 --> 00:07:41,680
word document and you we're going to use

194
00:07:40,880 --> 00:07:45,680
oled

195
00:07:41,680 --> 00:07:48,080
to do so um so i wanna

196
00:07:45,680 --> 00:07:49,039
um the goal here actually well let's go

197
00:07:48,080 --> 00:07:52,159
ahead and just dig right in

198
00:07:49,039 --> 00:07:55,840
um using ole dump

199
00:07:52,160 --> 00:07:59,840
on this sample so found a nice sample to

200
00:07:55,840 --> 00:08:02,479
to uh to use for this demonstration um

201
00:07:59,840 --> 00:08:03,520
there's uh quite a bit of vba code

202
00:08:02,479 --> 00:08:06,639
included

203
00:08:03,520 --> 00:08:10,000
that's what this uppercase m

204
00:08:06,639 --> 00:08:13,360
signifies but there's this also in

205
00:08:10,000 --> 00:08:16,560
capital o this object um

206
00:08:13,360 --> 00:08:19,759
pool here so this is interesting

207
00:08:16,560 --> 00:08:22,639
um i want to find out what this

208
00:08:19,759 --> 00:08:23,759
is exactly it's i'm assuming it might be

209
00:08:22,639 --> 00:08:27,440
an executable

210
00:08:23,759 --> 00:08:30,400
right so um so let's

211
00:08:27,440 --> 00:08:32,399
um look at ole dump here let's see what

212
00:08:30,400 --> 00:08:35,919
the options are

213
00:08:32,399 --> 00:08:39,760
just a quick overview here

214
00:08:35,919 --> 00:08:44,560
um okay so yeah we can do a hex dump

215
00:08:39,760 --> 00:08:44,560
we can also do an ascii dump strings

216
00:08:45,200 --> 00:08:53,040
and it can handle uh compression as well

217
00:08:48,720 --> 00:08:57,519
so let's try a few of these out here

218
00:08:53,040 --> 00:09:00,399
you know the stream is 16.

219
00:08:57,519 --> 00:09:01,600
so let's just look at that okay so that

220
00:09:00,399 --> 00:09:05,120
gives us a bunch of stuff

221
00:09:01,600 --> 00:09:07,279
looks okay that looks like a windows

222
00:09:05,120 --> 00:09:08,560
file path i think we're on the right

223
00:09:07,279 --> 00:09:14,560
track here

224
00:09:08,560 --> 00:09:17,760
um let's go ahead and do this decompress

225
00:09:14,560 --> 00:09:18,399
and just do the hex dump here and see

226
00:09:17,760 --> 00:09:21,600
what we get

227
00:09:18,399 --> 00:09:22,480
okay so this is what we want just a hex

228
00:09:21,600 --> 00:09:24,320
dump

229
00:09:22,480 --> 00:09:28,160
of that object that's embedded in the

230
00:09:24,320 --> 00:09:28,160
file so let's save this

231
00:09:29,800 --> 00:09:36,160
sample2.hex okay

232
00:09:33,120 --> 00:09:37,519
great so i'm going to go ahead and open

233
00:09:36,160 --> 00:09:41,120
this just take a look at it

234
00:09:37,519 --> 00:09:43,040
real quick yeah

235
00:09:41,120 --> 00:09:44,720
great all right so while we're here

236
00:09:43,040 --> 00:09:46,240
going to go ahead and select all

237
00:09:44,720 --> 00:09:49,120
and do a copy now there are different

238
00:09:46,240 --> 00:09:52,000
ways of doing this

239
00:09:49,120 --> 00:09:53,200
for this demonstration i'm going to use

240
00:09:52,000 --> 00:09:56,000
cyber chef here

241
00:09:53,200 --> 00:09:57,600
um running it locally on my remnix

242
00:09:56,000 --> 00:10:05,839
machine

243
00:09:57,600 --> 00:10:05,839
so i'm going to paste the hex here

244
00:10:06,160 --> 00:10:09,279
let me try this again

245
00:10:09,519 --> 00:10:12,320
select all

246
00:10:13,200 --> 00:10:20,800
copy that out paste

247
00:10:17,600 --> 00:10:22,399
okay much better scroll up to the top

248
00:10:20,800 --> 00:10:25,760
here

249
00:10:22,399 --> 00:10:27,839
all right so from hex that's the recipe

250
00:10:25,760 --> 00:10:30,880
we want to apply

251
00:10:27,839 --> 00:10:32,720
and doing so it looks like okay so this

252
00:10:30,880 --> 00:10:34,880
is looking good uh we see this

253
00:10:32,720 --> 00:10:37,040
this program cannot be run in dos mode

254
00:10:34,880 --> 00:10:39,120
um this is a good indicator that you're

255
00:10:37,040 --> 00:10:41,839
close to the beginning of a pe file

256
00:10:39,120 --> 00:10:42,160
the windows portable executable and we

257
00:10:41,839 --> 00:10:47,200
see

258
00:10:42,160 --> 00:10:50,880
mz that's um the beginning of

259
00:10:47,200 --> 00:10:51,760
a windows pe file those are the magic

260
00:10:50,880 --> 00:10:55,040
bits there

261
00:10:51,760 --> 00:10:56,720
so and um

262
00:10:55,040 --> 00:10:58,839
so we don't know if you don't know where

263
00:10:56,720 --> 00:11:01,839
mz is you can just

264
00:10:58,839 --> 00:11:05,680
guess okay

265
00:11:01,839 --> 00:11:05,680
take a little another chunk out

266
00:11:06,720 --> 00:11:10,560
this will update okay good we're getting

267
00:11:12,839 --> 00:11:16,800
close

268
00:11:14,399 --> 00:11:16,800
awesome

269
00:11:17,839 --> 00:11:21,839
all right so now let's go ahead and save

270
00:11:19,600 --> 00:11:21,839
this

271
00:11:22,160 --> 00:11:29,760
to save it there that's fine

272
00:11:25,920 --> 00:11:32,000
all right get this out of the way

273
00:11:29,760 --> 00:11:34,079
and hopefully this will come through in

274
00:11:32,000 --> 00:11:38,000
the video

275
00:11:34,079 --> 00:11:38,000
let's go ahead and close this okay

276
00:11:38,720 --> 00:11:45,760
all right so we should have our

277
00:11:42,640 --> 00:11:47,839
file that is okay great

278
00:11:45,760 --> 00:11:48,800
looks like it's a dll okay so we're

279
00:11:47,839 --> 00:11:51,680
already learning

280
00:11:48,800 --> 00:11:52,079
some information about the object that

281
00:11:51,680 --> 00:11:56,079
was

282
00:11:52,079 --> 00:11:59,439
embedded in this word document

283
00:11:56,079 --> 00:12:00,959
so the basic process there was we used

284
00:11:59,440 --> 00:12:03,519
lle dump

285
00:12:00,959 --> 00:12:04,880
to extract a file from a malicious word

286
00:12:03,519 --> 00:12:09,040
document

287
00:12:04,880 --> 00:12:12,320
and that we created a hex dump of that

288
00:12:09,040 --> 00:12:15,360
dumped that into uh cyber chef um

289
00:12:12,320 --> 00:12:16,240
to do and apply the from hex recipe and

290
00:12:15,360 --> 00:12:18,320
that

291
00:12:16,240 --> 00:12:19,920
that gave us a binary that we downloaded

292
00:12:18,320 --> 00:12:22,480
and saved

293
00:12:19,920 --> 00:12:23,360
and what we're gonna do next is i'm

294
00:12:22,480 --> 00:12:26,560
gonna

295
00:12:23,360 --> 00:12:28,639
in this demo

296
00:12:26,560 --> 00:12:31,680
and i'm gonna transfer this stuff over

297
00:12:28,639 --> 00:12:35,040
to a windows machine a windows vm

298
00:12:31,680 --> 00:12:38,160
that is isolated and has a number of

299
00:12:35,040 --> 00:12:39,839
tools that are gonna allow us to take a

300
00:12:38,160 --> 00:12:41,279
closer look and analyze different

301
00:12:39,839 --> 00:12:45,680
aspects of

302
00:12:41,279 --> 00:12:48,720
um of this sample here

303
00:12:45,680 --> 00:12:51,279
all right so that was the first demo um

304
00:12:48,720 --> 00:12:53,760
and again if you have any questions

305
00:12:51,279 --> 00:12:56,160
don't hesitate to reach out

306
00:12:53,760 --> 00:12:57,120
and we'll go ahead and dive right into

307
00:12:56,160 --> 00:13:00,880
the second demo

308
00:12:57,120 --> 00:13:04,399
now so we're going to

309
00:13:00,880 --> 00:13:08,079
look at a new sample here and go through

310
00:13:04,399 --> 00:13:09,680
a general process that i like to take um

311
00:13:08,079 --> 00:13:12,319
there are different you know variations

312
00:13:09,680 --> 00:13:16,239
of this but my general process

313
00:13:12,320 --> 00:13:17,600
is to open the binary we're looking at

314
00:13:16,240 --> 00:13:21,279
this sample here

315
00:13:17,600 --> 00:13:24,880
um using using pe bear um

316
00:13:21,279 --> 00:13:27,680
really like pe bear a lot you can use

317
00:13:24,880 --> 00:13:29,200
pe studio as well um get a lot of the

318
00:13:27,680 --> 00:13:31,760
same information

319
00:13:29,200 --> 00:13:32,399
um but here one of the first things i'll

320
00:13:31,760 --> 00:13:35,519
look for

321
00:13:32,399 --> 00:13:36,560
is this optional header under dll

322
00:13:35,519 --> 00:13:39,760
characteristics

323
00:13:36,560 --> 00:13:41,359
you'll see dll can move so this has to

324
00:13:39,760 --> 00:13:44,800
do with aslr

325
00:13:41,360 --> 00:13:48,800
the randomization of memory addresses

326
00:13:44,800 --> 00:13:50,319
when this thing runs so it's randomized

327
00:13:48,800 --> 00:13:53,279
now

328
00:13:50,320 --> 00:13:56,079
i went ahead and wanted to show you

329
00:13:53,279 --> 00:13:59,439
compared it to

330
00:13:56,079 --> 00:14:01,920
when this is not set so it'll be it'll

331
00:13:59,440 --> 00:14:04,560
when this runs the same memory addresses

332
00:14:01,920 --> 00:14:07,599
will be used

333
00:14:04,560 --> 00:14:09,760
so how i did that here so that's one

334
00:14:07,600 --> 00:14:14,320
first step that i did

335
00:14:09,760 --> 00:14:16,639
or that i do i use a cff explorer

336
00:14:14,320 --> 00:14:17,680
pop the binary in there go to the

337
00:14:16,639 --> 00:14:20,800
optional header

338
00:14:17,680 --> 00:14:23,680
you'll see dll characteristics

339
00:14:20,800 --> 00:14:25,920
click here and you'll see dll can move

340
00:14:23,680 --> 00:14:28,638
if you unselect this

341
00:14:25,920 --> 00:14:29,439
say okay and then save it then you'll

342
00:14:28,639 --> 00:14:32,480
get that

343
00:14:29,440 --> 00:14:36,560
um you'll you'll have it

344
00:14:32,480 --> 00:14:39,760
set to where it's uh that's not set

345
00:14:36,560 --> 00:14:42,959
um so that's typically the first thing

346
00:14:39,760 --> 00:14:47,680
that i do um when doing this initial

347
00:14:42,959 --> 00:14:50,959
static analysis so from here

348
00:14:47,680 --> 00:14:55,760
we can also look at imports right so

349
00:14:50,959 --> 00:14:55,760
we do see a few imports here

350
00:14:55,839 --> 00:14:59,760
looking at the kernel 32 we do see a

351
00:14:58,160 --> 00:15:03,600
number

352
00:14:59,760 --> 00:15:06,639
of windows api functions

353
00:15:03,600 --> 00:15:09,279
that are imported whether they're used

354
00:15:06,639 --> 00:15:13,199
or not is another story

355
00:15:09,279 --> 00:15:16,800
so let's go ahead and uh

356
00:15:13,199 --> 00:15:20,399
opened plot this into ida here ida

357
00:15:16,800 --> 00:15:23,839
the free version and

358
00:15:20,399 --> 00:15:27,120
i'm gonna go over here to imports um

359
00:15:23,839 --> 00:15:30,160
and here you can i'm going to focus in

360
00:15:27,120 --> 00:15:34,079
on virtual alec

361
00:15:30,160 --> 00:15:37,199
when a lot of dll injection

362
00:15:34,079 --> 00:15:39,359
um happens

363
00:15:37,199 --> 00:15:40,399
and malware does that a lot it's very

364
00:15:39,360 --> 00:15:43,120
common

365
00:15:40,399 --> 00:15:45,199
and it uses virtual alloc or virtual

366
00:15:43,120 --> 00:15:48,720
ilock ex

367
00:15:45,199 --> 00:15:52,839
to accomplish that so that's one of

368
00:15:48,720 --> 00:15:56,480
the first functions i normally look for

369
00:15:52,839 --> 00:15:58,959
um i also look for is debugger present

370
00:15:56,480 --> 00:15:59,920
um this is just an anti-analysis

371
00:15:58,959 --> 00:16:02,638
technique

372
00:15:59,920 --> 00:16:03,199
that a lot a lot of malware authors use

373
00:16:02,639 --> 00:16:05,120
um

374
00:16:03,199 --> 00:16:06,639
and this can be implemented in a number

375
00:16:05,120 --> 00:16:08,639
of different ways

376
00:16:06,639 --> 00:16:09,759
sometimes you'll see the actual import

377
00:16:08,639 --> 00:16:11,360
of the function

378
00:16:09,759 --> 00:16:12,880
other times they sort of import the

379
00:16:11,360 --> 00:16:13,920
function in a more clever way and you

380
00:16:12,880 --> 00:16:16,399
don't see it

381
00:16:13,920 --> 00:16:18,000
so those are much more difficult to

382
00:16:16,399 --> 00:16:22,160
catch

383
00:16:18,000 --> 00:16:25,600
however we do see it clearly here

384
00:16:22,160 --> 00:16:27,040
so with these two functions we're going

385
00:16:25,600 --> 00:16:30,160
to focus on just for this

386
00:16:27,040 --> 00:16:31,519
example because i know what's going to

387
00:16:30,160 --> 00:16:33,439
happen with this one but

388
00:16:31,519 --> 00:16:35,839
what we're going to try to do is see if

389
00:16:33,440 --> 00:16:38,480
we can't

390
00:16:35,839 --> 00:16:39,279
this address space and see if anything

391
00:16:38,480 --> 00:16:42,480
interesting

392
00:16:39,279 --> 00:16:46,160
is dumped into it or loaded into it as

393
00:16:42,480 --> 00:16:46,160
it's executing so to do that

394
00:16:46,959 --> 00:16:51,839
we'll load the sample into

395
00:16:51,920 --> 00:16:54,959
x32 debug

396
00:16:55,279 --> 00:17:00,959
here we go i'll adjust

397
00:16:59,360 --> 00:17:04,400
the size of things for the video here

398
00:17:00,959 --> 00:17:08,399
and pretty zoom in a little bit so

399
00:17:04,400 --> 00:17:11,199
we're going to set a couple break points

400
00:17:08,400 --> 00:17:11,199
the first one

401
00:17:11,679 --> 00:17:15,280
will set for is debugger present

402
00:17:17,439 --> 00:17:22,880
and we can see down here that yes a

403
00:17:19,839 --> 00:17:22,879
breakpoint was set

404
00:17:23,199 --> 00:17:27,039
and we'll set one on virtual alloc

405
00:17:30,559 --> 00:17:34,960
okay great go over here to the

406
00:17:33,360 --> 00:17:38,559
breakpoints tab

407
00:17:34,960 --> 00:17:40,720
and see we have these set so i'll also

408
00:17:38,559 --> 00:17:47,760
break up this entry point here

409
00:17:40,720 --> 00:17:50,320
so we're going to go ahead and run this

410
00:17:47,760 --> 00:17:51,919
and here we see his debugger present so

411
00:17:50,320 --> 00:17:54,000
if you're not familiar with this windows

412
00:17:51,919 --> 00:17:57,200
api function you can um

413
00:17:54,000 --> 00:17:59,760
search it up look at their documentation

414
00:17:57,200 --> 00:18:01,600
and find out that when this returns a

415
00:17:59,760 --> 00:18:04,080
one

416
00:18:01,600 --> 00:18:06,000
debugger is present otherwise it'll

417
00:18:04,080 --> 00:18:10,639
return to zero

418
00:18:06,000 --> 00:18:10,640
so if we sort of let this do its thing

419
00:18:12,480 --> 00:18:18,559
keeping on eax here on this register

420
00:18:15,760 --> 00:18:20,240
we see that it's set to one and that's

421
00:18:18,559 --> 00:18:23,440
the value that's going to be returned

422
00:18:20,240 --> 00:18:26,480
so we're gonna patch this in place we're

423
00:18:23,440 --> 00:18:28,559
gonna modify this value

424
00:18:26,480 --> 00:18:29,520
and set it to zero and hopefully we'll

425
00:18:28,559 --> 00:18:32,960
get past this

426
00:18:29,520 --> 00:18:32,960
anti-analysis technique

427
00:18:35,520 --> 00:18:38,720
looks good so go ahead and play here and

428
00:18:38,080 --> 00:18:42,559
here we're at

429
00:18:38,720 --> 00:18:44,320
virtual alloc um the

430
00:18:42,559 --> 00:18:45,678
one of the the last parameter here

431
00:18:44,320 --> 00:18:50,879
should be the address

432
00:18:45,679 --> 00:18:50,880
um that's going to be cleared

433
00:18:52,320 --> 00:18:58,240
and allocated so

434
00:18:56,640 --> 00:18:59,840
um we don't know when all of this is

435
00:18:58,240 --> 00:19:02,880
going to happen exactly

436
00:18:59,840 --> 00:19:05,199
um as you'll see in a minute things can

437
00:19:02,880 --> 00:19:09,520
get a little bit more complicated so

438
00:19:05,200 --> 00:19:13,039
um go down here

439
00:19:09,520 --> 00:19:15,440
we'll follow this in this dump here

440
00:19:13,039 --> 00:19:16,320
just in case we catch it see if this

441
00:19:15,440 --> 00:19:20,480
value changes

442
00:19:16,320 --> 00:19:21,760
no um ebx well maybe they're using this

443
00:19:20,480 --> 00:19:24,080
value right so let's follow

444
00:19:21,760 --> 00:19:25,280
this in dump two so since we don't know

445
00:19:24,080 --> 00:19:27,520
for sure

446
00:19:25,280 --> 00:19:29,120
i'm just casting a wide net and

447
00:19:27,520 --> 00:19:31,200
hopefully one of these

448
00:19:29,120 --> 00:19:32,399
will find something interesting to be

449
00:19:31,200 --> 00:19:38,640
get loaded into

450
00:19:32,400 --> 00:19:43,120
into that space so let's continue

451
00:19:38,640 --> 00:19:46,960
this is running okay pause it again

452
00:19:43,120 --> 00:19:49,600
again at virtual alloc so let's step

453
00:19:46,960 --> 00:19:49,600
through here

454
00:19:50,400 --> 00:19:56,720
get right before this jump

455
00:19:53,520 --> 00:19:58,480
um let's check the dumps here so far

456
00:19:56,720 --> 00:20:02,480
nothing so i don't think any of those

457
00:19:58,480 --> 00:20:02,480
worked so let's try these values

458
00:20:02,960 --> 00:20:10,000
try this first one

459
00:20:06,880 --> 00:20:11,039
oh cmd.exe that looks interesting come

460
00:20:10,000 --> 00:20:14,400
over here

461
00:20:11,039 --> 00:20:20,320
load ebx into the second one here

462
00:20:14,400 --> 00:20:23,360
and we'll continue on

463
00:20:20,320 --> 00:20:24,960
and this is

464
00:20:23,360 --> 00:20:26,399
um something interesting we're showing

465
00:20:24,960 --> 00:20:31,520
you zw

466
00:20:26,400 --> 00:20:33,280
um allocate virtual memory so this is um

467
00:20:31,520 --> 00:20:36,320
a different api function i would say

468
00:20:33,280 --> 00:20:36,320
it's a little bit

469
00:20:37,120 --> 00:20:43,039
closer to um

470
00:20:40,799 --> 00:20:44,000
what's the word i'm looking for it's a

471
00:20:43,039 --> 00:20:46,720
little bit

472
00:20:44,000 --> 00:20:47,440
it like calling this function directly

473
00:20:46,720 --> 00:20:50,720
where

474
00:20:47,440 --> 00:20:51,520
virtual alec i think calls this function

475
00:20:50,720 --> 00:20:54,320
so this is

476
00:20:51,520 --> 00:20:55,039
going a little bit lower level basically

477
00:20:54,320 --> 00:20:57,120
but you see

478
00:20:55,039 --> 00:20:59,360
you notice it's not calling it in the

479
00:20:57,120 --> 00:21:02,320
same way

480
00:20:59,360 --> 00:21:03,439
and so i think this is just a technique

481
00:21:02,320 --> 00:21:05,678
that's used to sort of

482
00:21:03,440 --> 00:21:07,280
abstract that away and and sort of hide

483
00:21:05,679 --> 00:21:10,559
it from us

484
00:21:07,280 --> 00:21:12,320
otherwise you know

485
00:21:10,559 --> 00:21:14,639
we didn't see this in the imports

486
00:21:12,320 --> 00:21:16,320
essentially so we didn't know that oh

487
00:21:14,640 --> 00:21:18,000
we could set a breakpoint at that

488
00:21:16,320 --> 00:21:20,000
function perhaps

489
00:21:18,000 --> 00:21:22,559
but now we could right if we wanted to

490
00:21:20,000 --> 00:21:22,559
go ahead and

491
00:21:22,640 --> 00:21:26,640
set a breakpoint we can go ahead and do

492
00:21:24,400 --> 00:21:26,640
that

493
00:21:27,200 --> 00:21:31,840
and we'll watch this value as well so

494
00:21:28,880 --> 00:21:31,840
this is calling this

495
00:21:31,919 --> 00:21:36,720
let's go to a different dump here and

496
00:21:34,960 --> 00:21:40,880
again we don't know if this is

497
00:21:36,720 --> 00:21:40,880
right correct or not that looks familiar

498
00:21:42,159 --> 00:21:46,240
right looks pretty similar address is

499
00:21:44,960 --> 00:21:50,320
close

500
00:21:46,240 --> 00:21:50,320
um go to a new one

501
00:21:50,720 --> 00:21:53,360
keep going

502
00:21:56,080 --> 00:22:00,240
okay not seeing anything cleared so what

503
00:21:58,559 --> 00:22:03,678
we should see is

504
00:22:00,240 --> 00:22:06,240
this um this dump should be zeroed out

505
00:22:03,679 --> 00:22:07,360
before anything is loaded into it so we

506
00:22:06,240 --> 00:22:12,720
don't see that happening so we're going

507
00:22:07,360 --> 00:22:15,918
to continue

508
00:22:12,720 --> 00:22:15,919
and hopefully

509
00:22:16,880 --> 00:22:20,400
we'll see something good loaded

510
00:22:20,720 --> 00:22:24,480
maybe maybe not oh let's look at this

511
00:22:23,840 --> 00:22:27,360
value here

512
00:22:24,480 --> 00:22:29,120
let me go back to dump five this value

513
00:22:27,360 --> 00:22:32,158
here

514
00:22:29,120 --> 00:22:32,158
follow that in the dump

515
00:22:35,679 --> 00:22:39,120
okay looks like it's still running

516
00:22:39,919 --> 00:22:48,000
so i'm gonna go ahead and

517
00:22:44,640 --> 00:22:52,840
just in case i did this too late

518
00:22:48,000 --> 00:22:55,840
i'm gonna follow this in the memory map

519
00:22:52,840 --> 00:22:55,840
here

520
00:22:55,919 --> 00:22:59,600
and i'm going to dump this to a file

521
00:23:02,799 --> 00:23:10,639
and i'm hoping we get lucky here

522
00:23:08,720 --> 00:23:13,520
okay that's still running i'm not gonna

523
00:23:10,640 --> 00:23:16,880
mess with that but what i will do

524
00:23:13,520 --> 00:23:18,559
is just to come here okay there is

525
00:23:16,880 --> 00:23:21,280
it's not empty so there's something

526
00:23:18,559 --> 00:23:21,280
there so let's

527
00:23:21,440 --> 00:23:24,559
um just to use a different tool here

528
00:23:23,039 --> 00:23:28,080
let's use

529
00:23:24,559 --> 00:23:28,080
pe studio and open this

530
00:23:28,400 --> 00:23:35,679
aha it looks like we did get lucky here

531
00:23:32,240 --> 00:23:39,679
a bunch of strings oh interesting

532
00:23:35,679 --> 00:23:39,679
okay cool powershell

533
00:23:40,840 --> 00:23:46,158
127.0.0.1 localhost

534
00:23:43,440 --> 00:23:48,840
um and here we see a download string

535
00:23:46,159 --> 00:23:52,559
okay so this is interesting

536
00:23:48,840 --> 00:23:52,559
so awesome

537
00:23:55,360 --> 00:23:58,639
so we saved this to a file so what i'll

538
00:23:57,760 --> 00:24:02,320
go ahead and do

539
00:23:58,640 --> 00:24:06,159
is so to summarize what we

540
00:24:02,320 --> 00:24:09,760
what we've done is we used pe

541
00:24:06,159 --> 00:24:13,039
bear to look at the um the imports

542
00:24:09,760 --> 00:24:16,400
the optional header we noticed that

543
00:24:13,039 --> 00:24:19,760
the dll can move that this was set so

544
00:24:16,400 --> 00:24:23,520
we used cff explorer

545
00:24:19,760 --> 00:24:27,440
to disable that flag to remove it

546
00:24:23,520 --> 00:24:32,960
and then re save that file so

547
00:24:27,440 --> 00:24:35,520
aslr is not set loaded that into ida

548
00:24:32,960 --> 00:24:37,039
freeware looking for some interesting

549
00:24:35,520 --> 00:24:40,879
apis

550
00:24:37,039 --> 00:24:42,720
windows 8 api functions that might be of

551
00:24:40,880 --> 00:24:46,720
interest to us

552
00:24:42,720 --> 00:24:51,279
and set points on those

553
00:24:46,720 --> 00:24:54,080
within x32 debug

554
00:24:51,279 --> 00:24:55,600
and sort of step through this and let it

555
00:24:54,080 --> 00:25:00,240
run a few times here

556
00:24:55,600 --> 00:25:03,600
and then we noticed this address which

557
00:25:00,240 --> 00:25:05,600
i'm assuming was set last by this

558
00:25:03,600 --> 00:25:07,199
allocate virtual memory looks like

559
00:25:05,600 --> 00:25:11,439
that's the memory

560
00:25:07,200 --> 00:25:15,840
address that was used to dump this

561
00:25:11,440 --> 00:25:19,760
which could be a dll into memory

562
00:25:15,840 --> 00:25:22,799
inside that memory it looks like there's

563
00:25:19,760 --> 00:25:25,440
inside that dll there's a reference to

564
00:25:22,799 --> 00:25:25,440
powershell

565
00:25:25,679 --> 00:25:31,120
create token privilege some interesting

566
00:25:28,320 --> 00:25:34,158
functions here

567
00:25:31,120 --> 00:25:38,158
and what else can we see

568
00:25:34,159 --> 00:25:38,159
reference to some dlls

569
00:25:38,559 --> 00:25:45,440
um let's go back down oh

570
00:25:42,640 --> 00:25:46,480
something base 64. i don't know um keep

571
00:25:45,440 --> 00:25:48,080
going

572
00:25:46,480 --> 00:25:49,520
see if there's anything else of interest

573
00:25:48,080 --> 00:25:51,840
here

574
00:25:49,520 --> 00:25:54,559
and this is just sort of the process

575
00:25:51,840 --> 00:25:56,399
right we're not sure exactly what we'll

576
00:25:54,559 --> 00:25:58,559
find but we're

577
00:25:56,400 --> 00:26:01,760
just taking a look seeing if anything

578
00:25:58,559 --> 00:26:01,760
interesting stands out

579
00:26:03,360 --> 00:26:07,120
perhaps something more we can dig into

580
00:26:09,120 --> 00:26:16,879
um i've seen this before

581
00:26:13,200 --> 00:26:19,120
um and i'll show this in a

582
00:26:16,880 --> 00:26:20,320
demo coming up next the same sort of

583
00:26:19,120 --> 00:26:23,918
pattern

584
00:26:20,320 --> 00:26:26,399
um anything else of

585
00:26:23,919 --> 00:26:26,400
interest

586
00:26:27,440 --> 00:26:31,840
some reference to kerberos and again

587
00:26:30,320 --> 00:26:32,480
just because you see it here doesn't

588
00:26:31,840 --> 00:26:35,760
mean

589
00:26:32,480 --> 00:26:39,440
um it's actually being used okay

590
00:26:35,760 --> 00:26:41,919
here's um looks like a user agent string

591
00:26:39,440 --> 00:26:41,919
perhaps

592
00:26:42,720 --> 00:26:48,240
um okay that could be interesting

593
00:26:46,000 --> 00:26:52,080
if it's trying to download something or

594
00:26:48,240 --> 00:26:55,679
communicate with a c2

595
00:26:52,080 --> 00:26:57,360
okay so got some

596
00:26:55,679 --> 00:26:58,880
stuff that we could start to dig into

597
00:26:57,360 --> 00:27:01,918
here um

598
00:26:58,880 --> 00:27:07,120
i'll conclude this demo for now

599
00:27:01,919 --> 00:27:10,559
but we do and i'll stop this

600
00:27:07,120 --> 00:27:13,678
we could dig into that more and

601
00:27:10,559 --> 00:27:16,639
do some more analysis but

602
00:27:13,679 --> 00:27:18,080
we were able to pull out a dll which

603
00:27:16,640 --> 00:27:21,520
looks like

604
00:27:18,080 --> 00:27:23,600
it might have a beacon inside um

605
00:27:21,520 --> 00:27:24,879
and executing powershell perhaps that

606
00:27:23,600 --> 00:27:28,240
powershell is

607
00:27:24,880 --> 00:27:31,120
um might be attempting to download uh

608
00:27:28,240 --> 00:27:34,000
the next stage perhaps so we'll go ahead

609
00:27:31,120 --> 00:27:37,120
and conclude this demo here

610
00:27:34,000 --> 00:27:40,080
and see you on the next one all right

611
00:27:37,120 --> 00:27:40,879
so that was the second demo um again

612
00:27:40,080 --> 00:27:43,360
questions

613
00:27:40,880 --> 00:27:44,399
drop them in the chat and um and we'll

614
00:27:43,360 --> 00:27:49,840
get back to you

615
00:27:44,399 --> 00:27:49,840
and um on to the third

616
00:27:50,399 --> 00:27:53,760
for this demo we are going to be looking

617
00:27:53,440 --> 00:27:57,039
at

618
00:27:53,760 --> 00:28:02,960
a cobalt strike beacon

619
00:27:57,039 --> 00:28:06,399
and it's stayed stageless

620
00:28:02,960 --> 00:28:10,640
so i copied this hex out

621
00:28:06,399 --> 00:28:13,840
converted it to a binary here

622
00:28:10,640 --> 00:28:15,360
and now we can kind of start looking at

623
00:28:13,840 --> 00:28:18,959
it from

624
00:28:15,360 --> 00:28:18,959
you know an analyst point of view

625
00:28:19,279 --> 00:28:24,240
opening it up in pe bear here

626
00:28:24,320 --> 00:28:31,120
you can look at a few things here

627
00:28:27,440 --> 00:28:34,000
the general information

628
00:28:31,120 --> 00:28:34,000
optional header

629
00:28:34,320 --> 00:28:40,799
looks like the dlo can move so

630
00:28:37,440 --> 00:28:40,799
aslr is set

631
00:28:42,159 --> 00:28:48,399
we can come in look at the imports here

632
00:28:45,039 --> 00:28:48,399
i mean we do see a bunch

633
00:28:49,200 --> 00:28:53,760
some particular ones of interest will be

634
00:28:50,640 --> 00:28:53,760
this virtual protect

635
00:28:54,000 --> 00:28:57,039
create process

636
00:28:57,200 --> 00:29:03,279
um open process um

637
00:29:00,640 --> 00:29:06,080
even this create tool help 32 snapshot

638
00:29:03,279 --> 00:29:10,320
that can be used in creative ways

639
00:29:06,080 --> 00:29:12,639
um what else here

640
00:29:10,320 --> 00:29:16,080
i think those are the big ones uh create

641
00:29:12,640 --> 00:29:19,200
pipe that can be that looks interesting

642
00:29:16,080 --> 00:29:20,480
virtual alec again load library um these

643
00:29:19,200 --> 00:29:24,640
are all signs of

644
00:29:20,480 --> 00:29:25,279
um well the functions in particular that

645
00:29:24,640 --> 00:29:29,039
are signs

646
00:29:25,279 --> 00:29:32,480
of potentially a reflective dll would be

647
00:29:29,039 --> 00:29:32,480
load library a

648
00:29:33,600 --> 00:29:45,039
virtual alloc and

649
00:29:40,480 --> 00:29:45,039
uh what else get process

650
00:29:47,760 --> 00:29:50,720
get current process

651
00:29:52,159 --> 00:29:58,880
see if there are any others here

652
00:29:55,679 --> 00:29:59,919
um yeah so the those those three in

653
00:29:58,880 --> 00:30:02,880
combination

654
00:29:59,919 --> 00:30:03,600
kind of um lead me to think that this

655
00:30:02,880 --> 00:30:07,440
could be or

656
00:30:03,600 --> 00:30:10,559
a reflective dll um

657
00:30:07,440 --> 00:30:15,360
you can look at exports

658
00:30:10,559 --> 00:30:18,080
and yeah here reflective dll

659
00:30:15,360 --> 00:30:19,439
says it right there for us that's great

660
00:30:18,080 --> 00:30:21,360
it's not always the case but looking at

661
00:30:19,440 --> 00:30:24,640
shell code

662
00:30:21,360 --> 00:30:28,879
that typically or that can be

663
00:30:24,640 --> 00:30:32,799
we also use c beacon dot dll

664
00:30:28,880 --> 00:30:35,039
so right off the bat i know um

665
00:30:32,799 --> 00:30:36,799
just having been through this and i know

666
00:30:35,039 --> 00:30:40,080
where the sample came from

667
00:30:36,799 --> 00:30:44,158
this is a cobalt strike beacon

668
00:30:40,080 --> 00:30:47,918
and it's pretty obvious

669
00:30:44,159 --> 00:30:50,240
with all of these indicators

670
00:30:47,919 --> 00:30:52,640
now what's it doing exactly well

671
00:30:50,240 --> 00:30:55,679
probably c2 traffic of some sort

672
00:30:52,640 --> 00:30:59,120
um so it's there

673
00:30:55,679 --> 00:30:59,919
and it can you know be used for that

674
00:30:59,120 --> 00:31:01,518
purpose

675
00:30:59,919 --> 00:31:03,360
so what else can we dig into a little

676
00:31:01,519 --> 00:31:06,880
bit there is

677
00:31:03,360 --> 00:31:09,918
a cs debug we can load it up in here um

678
00:31:06,880 --> 00:31:11,200
say find shell code um

679
00:31:09,919 --> 00:31:12,799
set a few other things here and let's

680
00:31:11,200 --> 00:31:15,279
just see what happens let's see what we

681
00:31:12,799 --> 00:31:15,279
get here

682
00:31:17,519 --> 00:31:20,640
so without digging into it too much

683
00:31:19,279 --> 00:31:22,159
further

684
00:31:20,640 --> 00:31:23,919
we were able to at least make that

685
00:31:22,159 --> 00:31:26,799
determination

686
00:31:23,919 --> 00:31:29,279
by looking at the at the properties that

687
00:31:26,799 --> 00:31:29,279
this is a

688
00:31:29,519 --> 00:31:35,279
cobalt stripe beacon so here's um

689
00:31:32,960 --> 00:31:36,640
yeah we get some information back from a

690
00:31:35,279 --> 00:31:40,000
c debug

691
00:31:36,640 --> 00:31:45,200
um not going to use any of that for this

692
00:31:40,000 --> 00:31:47,519
example but you do see some the pebb

693
00:31:45,200 --> 00:31:48,640
and some other information here for us

694
00:31:47,519 --> 00:31:51,200
that might be useful

695
00:31:48,640 --> 00:31:52,399
if we were gonna perhaps dig into this

696
00:31:51,200 --> 00:31:54,559
further

697
00:31:52,399 --> 00:31:56,080
but for now for the sake of time we'll

698
00:31:54,559 --> 00:32:01,200
we'll end it there

699
00:31:56,080 --> 00:32:03,840
and get back to the talk thanks

700
00:32:01,200 --> 00:32:04,240
okay so in this demo i'm going to take a

701
00:32:03,840 --> 00:32:07,600
look

702
00:32:04,240 --> 00:32:09,519
at a combo strike beacon

703
00:32:07,600 --> 00:32:11,120
it's a staged beacon i'm going to be

704
00:32:09,519 --> 00:32:13,440
taking a look at it with a couple of

705
00:32:11,120 --> 00:32:16,000
different tools one is xxd

706
00:32:13,440 --> 00:32:18,559
hex editor for the command line and then

707
00:32:16,000 --> 00:32:20,960
two different emulators

708
00:32:18,559 --> 00:32:22,799
shell code debug and speakeasy and kind

709
00:32:20,960 --> 00:32:26,000
of compare and contrast the two

710
00:32:22,799 --> 00:32:26,000
running through the same sample

711
00:32:27,360 --> 00:32:30,959
all right so to start out the show code

712
00:32:29,919 --> 00:32:33,679
demo

713
00:32:30,960 --> 00:32:34,480
i'm going to go ahead and take a look at

714
00:32:33,679 --> 00:32:37,360
the

715
00:32:34,480 --> 00:32:39,200
files that i have to work with here so

716
00:32:37,360 --> 00:32:43,039
we have a couple of examples we have

717
00:32:39,200 --> 00:32:44,559
some cobot strike staged and stageless

718
00:32:43,039 --> 00:32:48,080
beacons

719
00:32:44,559 --> 00:32:48,080
right now we're going to be looking at

720
00:32:48,880 --> 00:32:56,159
32-bit code a lot of the malware

721
00:32:52,000 --> 00:32:59,200
that i've seen in engagements before um

722
00:32:56,159 --> 00:33:00,399
seem to be uh 32-bit at this page at

723
00:32:59,200 --> 00:33:02,000
this point still so

724
00:33:00,399 --> 00:33:03,678
um we're going to be taking a deep dive

725
00:33:02,000 --> 00:33:05,919
into those 32-bit

726
00:33:03,679 --> 00:33:06,880
uh beacons and then we also have a set

727
00:33:05,919 --> 00:33:10,399
of um

728
00:33:06,880 --> 00:33:13,279
interpreter uh reverse trials as well

729
00:33:10,399 --> 00:33:14,959
so we're going to take a look at both

730
00:33:13,279 --> 00:33:17,600
those here

731
00:33:14,960 --> 00:33:18,260
um first and then right i'm going to run

732
00:33:17,600 --> 00:33:19,519
xd

733
00:33:18,260 --> 00:33:23,120
[Music]

734
00:33:19,519 --> 00:33:26,559
to just get a hex value look at these

735
00:33:23,120 --> 00:33:27,840
show codes that i have so let's look at

736
00:33:26,559 --> 00:33:33,440
the

737
00:33:27,840 --> 00:33:33,439
stage file first so this is nice

738
00:33:34,960 --> 00:33:41,039
you can already begin to identify

739
00:33:38,320 --> 00:33:42,480
certain bits and pieces in the show code

740
00:33:41,039 --> 00:33:46,320
for instance we have here

741
00:33:42,480 --> 00:33:46,320
something looks like a user agent string

742
00:33:46,559 --> 00:33:51,760
and an ip address this is a

743
00:33:50,240 --> 00:33:53,919
quick way if you have access to

744
00:33:51,760 --> 00:33:54,640
shellcode you can obviously take a look

745
00:33:53,919 --> 00:33:57,200
at the um

746
00:33:54,640 --> 00:33:58,880
it's just the hex value view and then

747
00:33:57,200 --> 00:34:01,679
the ascii

748
00:33:58,880 --> 00:34:02,240
decoding of it and you can already tell

749
00:34:01,679 --> 00:34:05,760
a lot

750
00:34:02,240 --> 00:34:09,440
about shotgun from that however

751
00:34:05,760 --> 00:34:12,960
i want to go ahead and run this through

752
00:34:09,440 --> 00:34:16,320
sc debug so i'm going to run sc debug

753
00:34:12,960 --> 00:34:19,440
sedb g

754
00:34:16,320 --> 00:34:20,879
c so the console version dash f for the

755
00:34:19,440 --> 00:34:24,079
file

756
00:34:20,879 --> 00:34:26,480
i'll begin with looking at the stage

757
00:34:24,079 --> 00:34:26,480
beacon

758
00:34:28,159 --> 00:34:31,919
and i'm going to run a couple of other

759
00:34:29,599 --> 00:34:34,000
parameters i'm going to run dash

760
00:34:31,918 --> 00:34:35,279
s which is going to allow me to set how

761
00:34:34,000 --> 00:34:37,199
many steps

762
00:34:35,280 --> 00:34:38,260
um the emulator should actually step

763
00:34:37,199 --> 00:34:39,598
through um

764
00:34:38,260 --> 00:34:41,280
[Music]

765
00:34:39,599 --> 00:34:42,960
so how many instructions it should step

766
00:34:41,280 --> 00:34:46,839
through for this shell code

767
00:34:42,960 --> 00:34:50,399
i found 10 million to be

768
00:34:46,839 --> 00:34:52,719
um usually sufficient for

769
00:34:50,399 --> 00:34:52,719
most

770
00:34:54,480 --> 00:34:57,520
shell code beacons that are that are

771
00:34:56,159 --> 00:35:00,720
staged

772
00:34:57,520 --> 00:35:04,000
so this makes it basically

773
00:35:00,720 --> 00:35:06,240
stop uh the emulation after 10 000 steps

774
00:35:04,000 --> 00:35:08,320
and that usually uh gives it enough time

775
00:35:06,240 --> 00:35:11,520
to get through most of

776
00:35:08,320 --> 00:35:13,599
the shell code payload at least the

777
00:35:11,520 --> 00:35:14,640
this the first initial stage part

778
00:35:13,599 --> 00:35:15,920
obviously it

779
00:35:14,640 --> 00:35:18,078
can't reach out to the internet because

780
00:35:15,920 --> 00:35:20,400
this is uh offline

781
00:35:18,079 --> 00:35:21,119
so it's not going to be able to uh pull

782
00:35:20,400 --> 00:35:24,079
down

783
00:35:21,119 --> 00:35:26,079
uh that next stage and the c2 is not up

784
00:35:24,079 --> 00:35:30,240
so

785
00:35:26,079 --> 00:35:33,680
so that's and then das dash

786
00:35:30,240 --> 00:35:34,799
r is going to give us a report at the

787
00:35:33,680 --> 00:35:45,839
end as well

788
00:35:34,800 --> 00:35:45,839
so we're going to run that

789
00:35:51,680 --> 00:35:56,560
ah there we go okay sorry missed the

790
00:35:54,240 --> 00:35:56,560
zero

791
00:35:57,119 --> 00:36:00,160
but as we can see

792
00:36:01,680 --> 00:36:06,799
was able to load up the shell code

793
00:36:07,200 --> 00:36:11,118
loads up the win inet

794
00:36:11,680 --> 00:36:20,240
api and then makes a

795
00:36:15,839 --> 00:36:23,040
connection out to sip address which is

796
00:36:20,240 --> 00:36:23,919
the c2 callback that was set up for this

797
00:36:23,040 --> 00:36:27,920
beacon

798
00:36:23,920 --> 00:36:31,359
on port 80. we have the actual

799
00:36:27,920 --> 00:36:34,480
path that it's going to try and

800
00:36:31,359 --> 00:36:37,359
pull um something that i

801
00:36:34,480 --> 00:36:37,760
staged from we have the user agent that

802
00:36:37,359 --> 00:36:42,400
the

803
00:36:37,760 --> 00:36:45,520
beacon is going to use for that

804
00:36:42,400 --> 00:36:46,240
the internet callback you can see that

805
00:36:45,520 --> 00:36:49,920
it's also

806
00:36:46,240 --> 00:36:53,279
allocating memory

807
00:36:49,920 --> 00:36:55,760
for the next

808
00:36:53,280 --> 00:36:57,359
uh portion from uh the internet callback

809
00:36:55,760 --> 00:37:02,240
rates via the

810
00:36:57,359 --> 00:37:02,240
internet read file for that buffer of

811
00:37:02,480 --> 00:37:08,480
60 000 bytes which was allocated here

812
00:37:06,079 --> 00:37:09,920
but obviously it's because there's no

813
00:37:08,480 --> 00:37:11,440
active c2 it's not gonna be able to

814
00:37:09,920 --> 00:37:12,720
download anything so it just kind of

815
00:37:11,440 --> 00:37:14,400
stops here

816
00:37:12,720 --> 00:37:16,720
and then we run out of our step counts

817
00:37:14,400 --> 00:37:17,599
and it ends the analysis so we can see

818
00:37:16,720 --> 00:37:20,720
that it

819
00:37:17,599 --> 00:37:24,240
um reads uh

820
00:37:20,720 --> 00:37:28,319
um so it uh it does a dll memory

821
00:37:24,240 --> 00:37:32,399
um uh read that was detected

822
00:37:28,320 --> 00:37:36,190
um we have a

823
00:37:32,400 --> 00:37:38,160
signature found for the hash or harmony

824
00:37:36,190 --> 00:37:41,760
[Music]

825
00:37:38,160 --> 00:37:45,839
and yeah

826
00:37:41,760 --> 00:37:45,839
that is what we can see with

827
00:37:45,920 --> 00:37:54,079
the shell bug debug utility

828
00:37:49,359 --> 00:37:55,839
and then i also want to give a

829
00:37:54,079 --> 00:37:57,520
run this through another tool that i've

830
00:37:55,839 --> 00:37:59,680
been using

831
00:37:57,520 --> 00:38:01,680
more recently which is speakeasy which

832
00:37:59,680 --> 00:38:04,799
is another

833
00:38:01,680 --> 00:38:10,160
malware emulator brought up by the

834
00:38:04,800 --> 00:38:13,520
folks at fireeye mandiant so speakeasy

835
00:38:10,160 --> 00:38:17,200
runs on the unicorn emulation engine and

836
00:38:13,520 --> 00:38:19,680
in kiwimo and that has a python

837
00:38:17,200 --> 00:38:21,200
backend for for interacting with it so

838
00:38:19,680 --> 00:38:24,359
run speakeasy

839
00:38:21,200 --> 00:38:26,319
we're going to run run underscore

840
00:38:24,359 --> 00:38:30,839
speakeasy.pi

841
00:38:26,320 --> 00:38:32,640
and we're just going to load our file as

842
00:38:30,839 --> 00:38:35,920
well

843
00:38:32,640 --> 00:38:37,200
that and i think here the parameters are

844
00:38:35,920 --> 00:38:42,240
going to run our dash

845
00:38:37,200 --> 00:38:42,240
r dash a architecture x

846
00:38:44,839 --> 00:38:47,839
a6

847
00:38:58,839 --> 00:39:01,839
wow

848
00:39:02,960 --> 00:39:11,040
all right so similar concept here

849
00:39:07,680 --> 00:39:13,839
again we're seeing the kernel loading

850
00:39:11,040 --> 00:39:15,440
this library the when inet library here

851
00:39:13,839 --> 00:39:19,359
we have the connection

852
00:39:15,440 --> 00:39:22,320
being opened here we have the actual

853
00:39:19,359 --> 00:39:22,319
ip address

854
00:39:22,480 --> 00:39:26,320
the port which was featured

855
00:39:26,560 --> 00:39:30,799
in the previous and the shell by debug

856
00:39:29,280 --> 00:39:33,839
port 80 here it's not

857
00:39:30,800 --> 00:39:36,160
uh i guess humanly

858
00:39:33,839 --> 00:39:38,078
it's not a human visible form here but

859
00:39:36,160 --> 00:39:41,520
this uh zero x50

860
00:39:38,079 --> 00:39:43,040
um that is hex for for 80.

861
00:39:41,520 --> 00:39:44,880
so we do get that information there as

862
00:39:43,040 --> 00:39:49,839
well same with

863
00:39:44,880 --> 00:39:52,079
the path that it's going to request

864
00:39:49,839 --> 00:39:53,359
we do have these internet flags which i

865
00:39:52,079 --> 00:39:56,400
don't believe

866
00:39:53,359 --> 00:39:56,720
are captured in the shell bug debug and

867
00:39:56,400 --> 00:39:59,760
the

868
00:39:56,720 --> 00:40:01,839
um show code debug tool

869
00:39:59,760 --> 00:40:03,200
um and then again here we have the

870
00:40:01,839 --> 00:40:06,160
actual

871
00:40:03,200 --> 00:40:07,200
um http request using the when inet

872
00:40:06,160 --> 00:40:10,960
library

873
00:40:07,200 --> 00:40:13,040
with user agent as well

874
00:40:10,960 --> 00:40:16,720
and then again here the internet read

875
00:40:13,040 --> 00:40:16,720
file where it's going to try and

876
00:40:17,359 --> 00:40:21,839
read that memory from the internet

877
00:40:20,400 --> 00:40:25,359
address

878
00:40:21,839 --> 00:40:27,920
and um then it uh

879
00:40:25,359 --> 00:40:29,119
catches a unhandled interrupt obviously

880
00:40:27,920 --> 00:40:31,520
you can't get that

881
00:40:29,119 --> 00:40:33,520
uh i can't get that file from the c2

882
00:40:31,520 --> 00:40:34,160
server and so it finishes the emulation

883
00:40:33,520 --> 00:40:36,640
so

884
00:40:34,160 --> 00:40:37,598
um both really good tools i think in my

885
00:40:36,640 --> 00:40:40,720
opinion

886
00:40:37,599 --> 00:40:43,920
for quick analysis

887
00:40:40,720 --> 00:40:43,919
of shell code

888
00:40:45,200 --> 00:40:49,520
shellcode debug is been around for a

889
00:40:48,400 --> 00:40:52,880
while

890
00:40:49,520 --> 00:40:56,400
i think it's nice from

891
00:40:52,880 --> 00:40:56,960
a single user perspective but i think

892
00:40:56,400 --> 00:41:00,160
that

893
00:40:56,960 --> 00:41:04,400
speakeasy does seem to run uh

894
00:41:00,160 --> 00:41:07,440
quite a bit faster and i think

895
00:41:04,400 --> 00:41:08,800
has some more capabilities to to be

896
00:41:07,440 --> 00:41:12,560
automated as well

897
00:41:08,800 --> 00:41:13,520
um using uh it has a container as well

898
00:41:12,560 --> 00:41:17,520
that it can

899
00:41:13,520 --> 00:41:19,680
deploy each uh analysis into

900
00:41:17,520 --> 00:41:23,040
so you could possibly look at scaling

901
00:41:19,680 --> 00:41:26,240
this to to a whole enterprise

902
00:41:23,040 --> 00:41:28,079
scale so really two great tools to look

903
00:41:26,240 --> 00:41:35,118
at for

904
00:41:28,079 --> 00:41:38,240
show code analysis of malware

905
00:41:35,119 --> 00:41:39,760
all right so that was it for all of our

906
00:41:38,240 --> 00:41:41,598
demos and our talk

907
00:41:39,760 --> 00:41:44,000
we really just want to say a special

908
00:41:41,599 --> 00:41:46,800
thank you to dan astor for creating

909
00:41:44,000 --> 00:41:48,800
uh some of the shell code that we take

910
00:41:46,800 --> 00:41:50,880
that we took a look at today so thanks

911
00:41:48,800 --> 00:41:52,560
dan for for making that for us

912
00:41:50,880 --> 00:41:54,400
um we just want to say thank you to

913
00:41:52,560 --> 00:41:56,880
cactus khan for having us

914
00:41:54,400 --> 00:41:59,359
and for putting on this awesome uh

915
00:41:56,880 --> 00:42:00,240
conference uh for everyone uh just thank

916
00:41:59,359 --> 00:42:03,759
you to you for

917
00:42:00,240 --> 00:42:06,879
everyone who was able to to come out and

918
00:42:03,760 --> 00:42:08,160
watch our talk and uh and chat with us

919
00:42:06,880 --> 00:42:10,640
on the discord

920
00:42:08,160 --> 00:42:11,279
um yeah uh thanks you for for being here

921
00:42:10,640 --> 00:42:12,480
we're gonna

922
00:42:11,280 --> 00:42:14,720
be here clay and i are gonna be in the

923
00:42:12,480 --> 00:42:16,640
discord for a while and just answer

924
00:42:14,720 --> 00:42:18,000
any questions if you want to talk about

925
00:42:16,640 --> 00:42:20,480
any of

926
00:42:18,000 --> 00:42:21,040
the tools that we uh were able to demo

927
00:42:20,480 --> 00:42:23,760
um

928
00:42:21,040 --> 00:42:24,800
uh yeah just hit us up on discord and

929
00:42:23,760 --> 00:42:28,480
thank you so much

930
00:42:24,800 --> 00:42:28,480
yep thank you everyone appreciate it

931
00:42:29,280 --> 00:42:31,839
see ya

932
00:42:52,640 --> 00:42:54,720
you

