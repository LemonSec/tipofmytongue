1
00:00:02,800 --> 00:00:05,439
hey everyone alex here to introduce our

2
00:00:04,480 --> 00:00:08,000
next presenter

3
00:00:05,440 --> 00:00:08,800
dr anker choudry who works as a cyber

4
00:00:08,000 --> 00:00:10,320
security

5
00:00:08,800 --> 00:00:12,000
engineer for lincoln heritage life

6
00:00:10,320 --> 00:00:13,599
insurance company he has worked for

7
00:00:12,000 --> 00:00:15,040
bishop fox and blackberry limited

8
00:00:13,599 --> 00:00:16,800
security teams in the past

9
00:00:15,040 --> 00:00:18,560
and his talk today is entitled can

10
00:00:16,800 --> 00:00:19,920
artificial intelligence detect advanced

11
00:00:18,560 --> 00:00:21,359
persistent threats

12
00:00:19,920 --> 00:00:23,359
make sure to stay tuned after the talk

13
00:00:21,359 --> 00:00:31,039
for a live q a just go ahead and click

14
00:00:23,359 --> 00:00:33,920
the link on your screen

15
00:00:31,039 --> 00:00:35,760
hello all my name is ankur chadri uh

16
00:00:33,920 --> 00:00:37,840
this is my presentation

17
00:00:35,760 --> 00:00:40,559
on the topic can artificial intelligence

18
00:00:37,840 --> 00:00:43,600
detect advanced persistent threats

19
00:00:40,559 --> 00:00:46,879
so during next 45 minutes

20
00:00:43,600 --> 00:00:49,840
or so we will explore the question can

21
00:00:46,879 --> 00:00:51,440
ai in its current stage detect uh

22
00:00:49,840 --> 00:00:54,719
sophisticated attacks like

23
00:00:51,440 --> 00:00:54,718
advanced persistent threat

24
00:00:55,120 --> 00:00:59,358
so a little bit about myself i received

25
00:00:57,520 --> 00:01:00,800
my doctorate from arizona state

26
00:00:59,359 --> 00:01:03,359
university

27
00:01:00,800 --> 00:01:05,438
last year and i am currently working as

28
00:01:03,359 --> 00:01:07,600
a senior cyber security engineer at

29
00:01:05,438 --> 00:01:09,600
lincoln heritage

30
00:01:07,600 --> 00:01:11,360
i have been quite active in both

31
00:01:09,600 --> 00:01:12,080
academia and industry side of cyber

32
00:01:11,360 --> 00:01:15,040
security

33
00:01:12,080 --> 00:01:16,479
i co-founded devil sec which is a

34
00:01:15,040 --> 00:01:18,960
hacking club

35
00:01:16,479 --> 00:01:20,080
at asu so if you do have time please

36
00:01:18,960 --> 00:01:22,399
check it out

37
00:01:20,080 --> 00:01:23,360
in past i've worked for companies like

38
00:01:22,400 --> 00:01:26,080
bishop fox

39
00:01:23,360 --> 00:01:27,840
blackberry very public services and csc

40
00:01:26,080 --> 00:01:30,960
private limited

41
00:01:27,840 --> 00:01:34,880
bishop fox and blackberry are

42
00:01:30,960 --> 00:01:37,439
sponsors of this conference so

43
00:01:34,880 --> 00:01:38,240
that's a happy coincidence and this is

44
00:01:37,439 --> 00:01:40,479
my contact

45
00:01:38,240 --> 00:01:41,759
information if you want to reach out to

46
00:01:40,479 --> 00:01:45,679
me after

47
00:01:41,759 --> 00:01:48,880
the talk so this is the

48
00:01:45,680 --> 00:01:51,840
agenda that i have in mind so we'll

49
00:01:48,880 --> 00:01:54,079
explore like why do we want to use ai in

50
00:01:51,840 --> 00:01:57,360
cyber security and in particular why

51
00:01:54,079 --> 00:01:59,279
at this point in time it is relevant

52
00:01:57,360 --> 00:02:02,240
the next question i'll answer is what is

53
00:01:59,280 --> 00:02:05,360
advanced persistent threat

54
00:02:02,240 --> 00:02:08,560
we will also look at the cases which

55
00:02:05,360 --> 00:02:11,680
are not apts

56
00:02:08,560 --> 00:02:14,080
we will consider some apt stages

57
00:02:11,680 --> 00:02:14,879
and case studies to better understand

58
00:02:14,080 --> 00:02:19,360
the

59
00:02:14,879 --> 00:02:22,399
past apt attacks

60
00:02:19,360 --> 00:02:25,440
then we will dive into the motivation

61
00:02:22,400 --> 00:02:26,319
of this data set for advanced persistent

62
00:02:25,440 --> 00:02:30,000
thread that we

63
00:02:26,319 --> 00:02:33,040
created to benchmark the ai models

64
00:02:30,000 --> 00:02:35,840
we will see how the

65
00:02:33,040 --> 00:02:36,319
state-of-the-art ai models behave on

66
00:02:35,840 --> 00:02:39,840
this

67
00:02:36,319 --> 00:02:41,920
apt data set then we will see the

68
00:02:39,840 --> 00:02:43,920
experimental results and finally i'll

69
00:02:41,920 --> 00:02:47,760
conclude the talk

70
00:02:43,920 --> 00:02:51,440
with some discussion for the future

71
00:02:47,760 --> 00:02:54,560
so ai is intelligent way of

72
00:02:51,440 --> 00:02:56,400
analyzing an environment by an agent and

73
00:02:54,560 --> 00:02:59,680
then updating its model

74
00:02:56,400 --> 00:03:02,159
of the world and taking better actions

75
00:02:59,680 --> 00:03:02,720
so this is the diagram that you will see

76
00:03:02,159 --> 00:03:05,920
in

77
00:03:02,720 --> 00:03:09,200
most of the ai frameworks

78
00:03:05,920 --> 00:03:11,599
and the agent in this case is

79
00:03:09,200 --> 00:03:14,799
trying to maximize his chances of

80
00:03:11,599 --> 00:03:14,799
achieving the desired goal

81
00:03:14,959 --> 00:03:18,800
so why it makes sense to use ai in cyber

82
00:03:17,599 --> 00:03:21,040
security

83
00:03:18,800 --> 00:03:22,000
ai mimics the cognitive function of

84
00:03:21,040 --> 00:03:26,159
human brain

85
00:03:22,000 --> 00:03:27,280
very closely so we are trying to use ai

86
00:03:26,159 --> 00:03:30,798
models

87
00:03:27,280 --> 00:03:31,519
in many cases to mimic the stealthy

88
00:03:30,799 --> 00:03:34,560
attacks and

89
00:03:31,519 --> 00:03:36,239
identify and detect some of the

90
00:03:34,560 --> 00:03:38,640
methods that are used by modern

91
00:03:36,239 --> 00:03:41,519
attackers

92
00:03:38,640 --> 00:03:43,440
also it can be used in cases of

93
00:03:41,519 --> 00:03:47,519
proactive cyber security where

94
00:03:43,440 --> 00:03:50,799
we are trying to deceive the attacker

95
00:03:47,519 --> 00:03:53,760
and we are trying to play some kind of

96
00:03:50,799 --> 00:03:55,599
intelligent game with the adversary so

97
00:03:53,760 --> 00:03:58,480
honey pots

98
00:03:55,599 --> 00:04:01,679
are one of the techniques that is used

99
00:03:58,480 --> 00:04:04,959
and there is research in the field of

100
00:04:01,680 --> 00:04:06,480
cyber deception where the defender is

101
00:04:04,959 --> 00:04:08,799
trying to

102
00:04:06,480 --> 00:04:09,679
identify the best response to the

103
00:04:08,799 --> 00:04:13,439
attackers

104
00:04:09,680 --> 00:04:14,640
attack methods so this is one example of

105
00:04:13,439 --> 00:04:18,880
how we can

106
00:04:14,640 --> 00:04:18,880
actively deceive adversary

107
00:04:19,120 --> 00:04:22,720
and why does it make sense to use ai

108
00:04:21,839 --> 00:04:26,000
these

109
00:04:22,720 --> 00:04:31,120
at this point in time so it's estimated

110
00:04:26,000 --> 00:04:34,080
if you look at this graph

111
00:04:31,120 --> 00:04:35,919
that in 2021 there will be 25 billion

112
00:04:34,080 --> 00:04:38,240
iot devices

113
00:04:35,919 --> 00:04:42,560
and the spending on cyber security will

114
00:04:38,240 --> 00:04:45,040
be around 1 trillion dollars

115
00:04:42,560 --> 00:04:48,880
there will be a shortage in cyber

116
00:04:45,040 --> 00:04:51,040
security workforce by 3.5 millions

117
00:04:48,880 --> 00:04:52,880
and already 65 percent of the

118
00:04:51,040 --> 00:04:56,160
organizations are reporting that

119
00:04:52,880 --> 00:04:59,280
they have shortage of cyber security

120
00:04:56,160 --> 00:04:59,759
staff and those organizations which do

121
00:04:59,280 --> 00:05:02,479
have

122
00:04:59,759 --> 00:05:04,080
enough personnels in the cyber security

123
00:05:02,479 --> 00:05:07,120
department

124
00:05:04,080 --> 00:05:09,520
they think that

125
00:05:07,120 --> 00:05:12,560
professionals are not trained enough to

126
00:05:09,520 --> 00:05:15,359
deal with the modern threats

127
00:05:12,560 --> 00:05:16,080
so to manage this kind of complexity and

128
00:05:15,360 --> 00:05:21,520
this kind of

129
00:05:16,080 --> 00:05:24,240
workload ai becomes very very important

130
00:05:21,520 --> 00:05:26,000
so next we will see how the national

131
00:05:24,240 --> 00:05:26,479
institute of standards and technology

132
00:05:26,000 --> 00:05:29,919
defines

133
00:05:26,479 --> 00:05:31,120
advanced persistent threats so these are

134
00:05:29,919 --> 00:05:33,280
little bit different from

135
00:05:31,120 --> 00:05:34,479
our traditional attacks in the sense

136
00:05:33,280 --> 00:05:37,039
that attacker

137
00:05:34,479 --> 00:05:38,000
pursues his objective repeatedly over a

138
00:05:37,039 --> 00:05:41,440
extended period of

139
00:05:38,000 --> 00:05:42,720
time and if you have defense mechanisms

140
00:05:41,440 --> 00:05:45,199
in place like

141
00:05:42,720 --> 00:05:45,919
your intrusion detection system or

142
00:05:45,199 --> 00:05:49,280
modern

143
00:05:45,919 --> 00:05:51,280
distributed firewall the adversary is

144
00:05:49,280 --> 00:05:54,320
able to identify those

145
00:05:51,280 --> 00:05:57,919
defense mechanisms and adapt to them so

146
00:05:54,320 --> 00:05:59,039
if you have say endpoint detection

147
00:05:57,919 --> 00:06:01,359
system

148
00:05:59,039 --> 00:06:02,240
the attacker can wait out the scanning

149
00:06:01,360 --> 00:06:06,000
cycle of

150
00:06:02,240 --> 00:06:09,600
that particular security product

151
00:06:06,000 --> 00:06:12,319
even if you are able to detect their

152
00:06:09,600 --> 00:06:13,840
current attack kill chain they have

153
00:06:12,319 --> 00:06:16,080
alternate means by which

154
00:06:13,840 --> 00:06:18,000
they can maintain desired level of

155
00:06:16,080 --> 00:06:21,680
persistence to achieve

156
00:06:18,000 --> 00:06:24,560
their goal so let's

157
00:06:21,680 --> 00:06:24,960
break down each component of apt so what

158
00:06:24,560 --> 00:06:28,000
does

159
00:06:24,960 --> 00:06:28,479
advance means it means that these are

160
00:06:28,000 --> 00:06:31,600
not

161
00:06:28,479 --> 00:06:33,120
your everyday script kiddies they are

162
00:06:31,600 --> 00:06:35,440
well funded organization

163
00:06:33,120 --> 00:06:36,800
so if you look at some of the apt groups

164
00:06:35,440 --> 00:06:40,160
like apt 28

165
00:06:36,800 --> 00:06:43,440
or apd41 they are funded on

166
00:06:40,160 --> 00:06:46,240
a national scale so they are

167
00:06:43,440 --> 00:06:47,199
basically really out there to get you

168
00:06:46,240 --> 00:06:49,120
they use

169
00:06:47,199 --> 00:06:50,560
some of the attack tools and attack

170
00:06:49,120 --> 00:06:54,560
factors

171
00:06:50,560 --> 00:06:57,120
which you will not find on

172
00:06:54,560 --> 00:06:59,520
your traditional set of tools and

173
00:06:57,120 --> 00:07:02,960
techniques

174
00:06:59,520 --> 00:07:06,240
and because it's at a scale

175
00:07:02,960 --> 00:07:09,919
of uh nation state they

176
00:07:06,240 --> 00:07:11,360
are often trying to attack a high value

177
00:07:09,919 --> 00:07:14,318
target for example

178
00:07:11,360 --> 00:07:14,880
one of the apt attacks carried out

179
00:07:14,319 --> 00:07:19,520
against

180
00:07:14,880 --> 00:07:19,520
sony was sponsored by north korea

181
00:07:19,919 --> 00:07:23,280
the next component is persistent so as

182
00:07:22,960 --> 00:07:25,359
we

183
00:07:23,280 --> 00:07:26,479
mentioned in the definition provided by

184
00:07:25,360 --> 00:07:30,160
nist that

185
00:07:26,479 --> 00:07:30,560
they are motivated and they can gain

186
00:07:30,160 --> 00:07:32,960
back

187
00:07:30,560 --> 00:07:34,720
any connection attempts to their

188
00:07:32,960 --> 00:07:35,919
malicious software on your internal

189
00:07:34,720 --> 00:07:39,120
network

190
00:07:35,919 --> 00:07:42,560
even if you disconnect it the first time

191
00:07:39,120 --> 00:07:44,800
they follow a evasive technique which

192
00:07:42,560 --> 00:07:45,680
basically tries to evade any kind of

193
00:07:44,800 --> 00:07:48,960
detection

194
00:07:45,680 --> 00:07:52,240
system you have in place so it's

195
00:07:48,960 --> 00:07:52,239
a slow and low approach

196
00:07:52,879 --> 00:07:56,479
and it is called threat because it leads

197
00:07:55,039 --> 00:07:59,440
to

198
00:07:56,479 --> 00:08:01,120
the disclosure of sensitive information

199
00:07:59,440 --> 00:08:04,160
for example

200
00:08:01,120 --> 00:08:06,720
the data leaked

201
00:08:04,160 --> 00:08:08,879
about the health care information or

202
00:08:06,720 --> 00:08:12,639
credit card of a company can

203
00:08:08,879 --> 00:08:15,840
be a significant damage the latest

204
00:08:12,639 --> 00:08:20,080
attack that we observed was

205
00:08:15,840 --> 00:08:23,758
the attack on solar winds and it was a

206
00:08:20,080 --> 00:08:25,440
huge hit to their pr it can obviously

207
00:08:23,759 --> 00:08:28,800
lead to disruption of normal

208
00:08:25,440 --> 00:08:32,000
operations in an organization

209
00:08:28,800 --> 00:08:33,760
and needless to say it's a big loss of

210
00:08:32,000 --> 00:08:37,279
reputation

211
00:08:33,760 --> 00:08:40,159
and because these attacks use this kind

212
00:08:37,279 --> 00:08:42,640
of evasive mechanisms

213
00:08:40,159 --> 00:08:43,760
the simple signature based detection

214
00:08:42,640 --> 00:08:47,199
mechanisms

215
00:08:43,760 --> 00:08:50,319
used by modern ideas or firewalls

216
00:08:47,200 --> 00:08:53,600
they are not enough to

217
00:08:50,320 --> 00:08:56,640
detect the series of events mounted by

218
00:08:53,600 --> 00:08:56,640
apt attackers

219
00:08:57,600 --> 00:09:01,200
and this table shows that it has

220
00:09:00,399 --> 00:09:04,959
impacted

221
00:09:01,200 --> 00:09:08,720
almost all important sectors automotive

222
00:09:04,959 --> 00:09:11,599
communication energy banking

223
00:09:08,720 --> 00:09:13,440
so it is very important that we

224
00:09:11,600 --> 00:09:14,880
understand the motivation behind these

225
00:09:13,440 --> 00:09:18,000
attacks and develop

226
00:09:14,880 --> 00:09:19,519
sophisticated means by which we can

227
00:09:18,000 --> 00:09:22,959
detect and block

228
00:09:19,519 --> 00:09:25,360
these attacks so this

229
00:09:22,959 --> 00:09:26,560
is one of the ways of representing

230
00:09:25,360 --> 00:09:29,279
various

231
00:09:26,560 --> 00:09:30,880
stages of an apt attack and this was

232
00:09:29,279 --> 00:09:34,320
something that we came up

233
00:09:30,880 --> 00:09:35,519
in our survey on advanced persistent

234
00:09:34,320 --> 00:09:38,800
threats

235
00:09:35,519 --> 00:09:40,480
technique solution and challenges in

236
00:09:38,800 --> 00:09:43,359
ieee communication

237
00:09:40,480 --> 00:09:44,720
surveys and tutorials so we came up with

238
00:09:43,360 --> 00:09:47,120
this attack

239
00:09:44,720 --> 00:09:50,320
tree which represents the different sub

240
00:09:47,120 --> 00:09:53,040
goals of apt starting from

241
00:09:50,320 --> 00:09:54,880
stage one where the attacker performs

242
00:09:53,040 --> 00:09:58,079
reconnaissance

243
00:09:54,880 --> 00:09:59,839
gains initial foothold into the target

244
00:09:58,080 --> 00:10:02,640
organization

245
00:09:59,839 --> 00:10:03,279
learns which systems are critical

246
00:10:02,640 --> 00:10:06,399
basically

247
00:10:03,279 --> 00:10:10,160
it is termed as lateral movement then

248
00:10:06,399 --> 00:10:13,519
perform some detrimental activity on

249
00:10:10,160 --> 00:10:15,839
one high value target and achieve their

250
00:10:13,519 --> 00:10:20,720
desired objective

251
00:10:15,839 --> 00:10:22,720
and it is often followed by the

252
00:10:20,720 --> 00:10:25,760
post exploitation activities which

253
00:10:22,720 --> 00:10:28,320
include deletion of logs and

254
00:10:25,760 --> 00:10:29,519
removal of any footprints that can help

255
00:10:28,320 --> 00:10:35,120
the defender

256
00:10:29,519 --> 00:10:35,120
organization trace steps of the attacker

257
00:10:35,519 --> 00:10:38,959
so if we look at these phases one by one

258
00:10:38,240 --> 00:10:40,880
during the

259
00:10:38,959 --> 00:10:42,079
reconnaissance phase the goal of the

260
00:10:40,880 --> 00:10:44,320
attacker is to

261
00:10:42,079 --> 00:10:46,560
gather as much information about the

262
00:10:44,320 --> 00:10:49,279
target organization

263
00:10:46,560 --> 00:10:50,160
identify the websites frequented by the

264
00:10:49,279 --> 00:10:53,600
employees

265
00:10:50,160 --> 00:10:55,600
their social media account what sort of

266
00:10:53,600 --> 00:10:57,839
habits they are into for example if

267
00:10:55,600 --> 00:11:01,839
there is someone

268
00:10:57,839 --> 00:11:02,560
who is into fitness it makes sense for

269
00:11:01,839 --> 00:11:05,680
the

270
00:11:02,560 --> 00:11:08,079
apg team to send a

271
00:11:05,680 --> 00:11:08,959
spam email to that person with some

272
00:11:08,079 --> 00:11:12,399
offer on

273
00:11:08,959 --> 00:11:12,880
some fitness string and this information

274
00:11:12,399 --> 00:11:15,200
can

275
00:11:12,880 --> 00:11:17,279
help the attacker move to the second

276
00:11:15,200 --> 00:11:19,920
stage which is establishing foothold in

277
00:11:17,279 --> 00:11:19,920
the network

278
00:11:20,560 --> 00:11:26,959
so during the second stage the attackers

279
00:11:24,480 --> 00:11:28,079
basically compromise some known

280
00:11:26,959 --> 00:11:32,560
vulnerability

281
00:11:28,079 --> 00:11:34,800
or unknown vulnerability that they

282
00:11:32,560 --> 00:11:35,920
observed from dark web or deep web

283
00:11:34,800 --> 00:11:38,479
forums

284
00:11:35,920 --> 00:11:39,040
they can also use business emails to

285
00:11:38,480 --> 00:11:43,839
send

286
00:11:39,040 --> 00:11:43,839
spam emails with malicious documents

287
00:11:44,640 --> 00:11:48,000
and this helps them gain initial entry

288
00:11:47,279 --> 00:11:51,279
into

289
00:11:48,000 --> 00:11:54,560
one of the end systems

290
00:11:51,279 --> 00:11:56,959
or one of the edge devices or endpoints

291
00:11:54,560 --> 00:12:00,079
of the organization

292
00:11:56,959 --> 00:12:02,959
and this leads them into the third stage

293
00:12:00,079 --> 00:12:06,239
which is basically moving slow and low

294
00:12:02,959 --> 00:12:10,000
evading detection basically moving

295
00:12:06,240 --> 00:12:13,440
literally in the organization

296
00:12:10,000 --> 00:12:15,839
and identifying some

297
00:12:13,440 --> 00:12:17,279
critical systems uh using this lateral

298
00:12:15,839 --> 00:12:18,880
movement

299
00:12:17,279 --> 00:12:20,560
so using this lateral movement the

300
00:12:18,880 --> 00:12:24,480
malware can spread

301
00:12:20,560 --> 00:12:27,839
into neighboring machines some critical

302
00:12:24,480 --> 00:12:30,000
active directory systems some of the

303
00:12:27,839 --> 00:12:32,959
tools that have been observed include

304
00:12:30,000 --> 00:12:34,480
windows command execution mimiket's

305
00:12:32,959 --> 00:12:37,040
windows

306
00:12:34,480 --> 00:12:38,880
local security authority and the

307
00:12:37,040 --> 00:12:41,680
attacker tries to

308
00:12:38,880 --> 00:12:43,839
identify some important nodes in the

309
00:12:41,680 --> 00:12:47,839
system for example a very

310
00:12:43,839 --> 00:12:53,839
critical ftp server or a database server

311
00:12:47,839 --> 00:12:53,839
which has the relevant information

312
00:12:55,040 --> 00:12:59,360
so after the attacker has identified

313
00:12:57,760 --> 00:13:01,760
this information they

314
00:12:59,360 --> 00:13:03,519
try to exfiltrate it to one of the

315
00:13:01,760 --> 00:13:06,560
command and control center

316
00:13:03,519 --> 00:13:10,480
that they own they can have

317
00:13:06,560 --> 00:13:13,680
google drives or ftp servers

318
00:13:10,480 --> 00:13:16,240
and this step has to be carried in

319
00:13:13,680 --> 00:13:16,239
a manner

320
00:13:17,440 --> 00:13:22,320
that creates detection by the intrusion

321
00:13:20,000 --> 00:13:24,880
detection and prevention systems

322
00:13:22,320 --> 00:13:25,440
so often they can exfiltrate this

323
00:13:24,880 --> 00:13:29,120
traffic

324
00:13:25,440 --> 00:13:32,240
over dns or basically

325
00:13:29,120 --> 00:13:34,639
they can use the

326
00:13:32,240 --> 00:13:35,760
batching of the data basically

327
00:13:34,639 --> 00:13:39,199
distribute the data

328
00:13:35,760 --> 00:13:42,240
into small chunks which basically

329
00:13:39,199 --> 00:13:44,639
fly low under the radar of the detection

330
00:13:42,240 --> 00:13:48,720
mechanism that has been

331
00:13:44,639 --> 00:13:52,639
employed by the target organization

332
00:13:48,720 --> 00:13:53,199
and it often is a important activity

333
00:13:52,639 --> 00:13:56,240
carried

334
00:13:53,199 --> 00:13:59,359
out over a long period of time

335
00:13:56,240 --> 00:14:02,639
so like the sony hack that happened

336
00:13:59,360 --> 00:14:06,560
the duration was around 140 days

337
00:14:02,639 --> 00:14:09,600
or so so you can imagine that

338
00:14:06,560 --> 00:14:12,560
any detection mechanism which is

339
00:14:09,600 --> 00:14:14,639
trying to identify these patterns it's

340
00:14:12,560 --> 00:14:17,760
difficult for them to

341
00:14:14,639 --> 00:14:20,880
correlate the time series of these

342
00:14:17,760 --> 00:14:20,880
malicious activities

343
00:14:21,839 --> 00:14:26,480
the last stage is that attacker uses

344
00:14:25,199 --> 00:14:28,800
some mechanisms to

345
00:14:26,480 --> 00:14:29,519
ensure that even if they are detected

346
00:14:28,800 --> 00:14:33,040
and blocked

347
00:14:29,519 --> 00:14:36,560
by the target organization they can

348
00:14:33,040 --> 00:14:39,120
gain back that persistence

349
00:14:36,560 --> 00:14:40,319
and they should ensure that they are

350
00:14:39,120 --> 00:14:42,560
covering their tracks

351
00:14:40,320 --> 00:14:45,199
to prevent any kind of forensic analysis

352
00:14:42,560 --> 00:14:48,560
basically deleting logs if there are

353
00:14:45,199 --> 00:14:50,479
dropper files by a particular malware

354
00:14:48,560 --> 00:14:53,199
the goal is to delete those dropper

355
00:14:50,480 --> 00:14:56,720
files those dynamic link libraries

356
00:14:53,199 --> 00:15:00,479
and we will see an example of

357
00:14:56,720 --> 00:15:02,000
this nature where we will observe all

358
00:15:00,480 --> 00:15:05,199
these activities

359
00:15:02,000 --> 00:15:05,199
uh coming into play

360
00:15:06,480 --> 00:15:09,680
so let's talk about one of the major

361
00:15:08,480 --> 00:15:13,279
reaches that happened

362
00:15:09,680 --> 00:15:17,199
on one of the credit bureaus

363
00:15:13,279 --> 00:15:18,639
in 2017 and it was claimed to be an apt

364
00:15:17,199 --> 00:15:23,359
attack so

365
00:15:18,639 --> 00:15:26,720
equifax was one of the largest breach

366
00:15:23,360 --> 00:15:28,720
and it compromised the data of 143

367
00:15:26,720 --> 00:15:31,279
million people

368
00:15:28,720 --> 00:15:33,199
and attackers basically exploited a

369
00:15:31,279 --> 00:15:36,959
unpatched vulnerability

370
00:15:33,199 --> 00:15:39,279
that had a high severity score

371
00:15:36,959 --> 00:15:41,920
cbss core which is known as common

372
00:15:39,279 --> 00:15:45,360
vulnerability scoring system

373
00:15:41,920 --> 00:15:47,120
uh for rating the risk associated with

374
00:15:45,360 --> 00:15:49,519
different vulnerabilities so it was a

375
00:15:47,120 --> 00:15:52,880
high severity vulnerability and

376
00:15:49,519 --> 00:15:56,240
that compromised the account of

377
00:15:52,880 --> 00:16:00,880
143 million people so think about

378
00:15:56,240 --> 00:16:00,880
this for a second is this napt attack

379
00:16:04,000 --> 00:16:11,040
so if the answer is no you are right

380
00:16:07,360 --> 00:16:12,399
uh this was one of the targeted attacks

381
00:16:11,040 --> 00:16:14,800
and

382
00:16:12,399 --> 00:16:17,680
the attackers basically exploited a

383
00:16:14,800 --> 00:16:20,719
known vulnerability which was unpatched

384
00:16:17,680 --> 00:16:23,599
they compromised the portal website

385
00:16:20,720 --> 00:16:24,480
which had apache strut software and this

386
00:16:23,600 --> 00:16:26,720
web server

387
00:16:24,480 --> 00:16:28,079
allowed them to gain access to database

388
00:16:26,720 --> 00:16:30,320
server

389
00:16:28,079 --> 00:16:33,439
and eventually exfiltrate the data to

390
00:16:30,320 --> 00:16:37,440
their command and control center so

391
00:16:33,440 --> 00:16:40,160
a lot of times companies try to

392
00:16:37,440 --> 00:16:42,800
shift the blame claiming that something

393
00:16:40,160 --> 00:16:45,120
that happened is an apt attack but

394
00:16:42,800 --> 00:16:47,839
in this particular case this was not an

395
00:16:45,120 --> 00:16:47,839
apd attack

396
00:16:48,800 --> 00:16:54,560
so if we try to differentiate between

397
00:16:51,120 --> 00:16:57,120
traditional attacks and apt attacks the

398
00:16:54,560 --> 00:16:59,119
summary is that apt attacks are carried

399
00:16:57,120 --> 00:17:01,920
out by highly sophisticated

400
00:16:59,120 --> 00:17:04,799
organizations they are well funded their

401
00:17:01,920 --> 00:17:08,079
target is very specific for example sony

402
00:17:04,799 --> 00:17:11,839
or equifax

403
00:17:08,079 --> 00:17:15,280
or any kind of nuclear facility in

404
00:17:11,839 --> 00:17:18,559
ukraine there was a compromise

405
00:17:15,280 --> 00:17:20,959
of the nuclear facility of iran

406
00:17:18,559 --> 00:17:22,240
known as tuxnet so their target is very

407
00:17:20,959 --> 00:17:24,000
specific

408
00:17:22,240 --> 00:17:26,000
and their purpose is either to gain

409
00:17:24,000 --> 00:17:30,840
competitive advantage or

410
00:17:26,000 --> 00:17:33,679
gain a strategic benefit over the target

411
00:17:30,840 --> 00:17:37,280
and their approach is

412
00:17:33,679 --> 00:17:40,080
not the approach of a

413
00:17:37,280 --> 00:17:40,639
standalone hacker where the idea is to

414
00:17:40,080 --> 00:17:44,320
just

415
00:17:40,640 --> 00:17:45,679
show off something or use a smash and

416
00:17:44,320 --> 00:17:49,200
grab approach to

417
00:17:45,679 --> 00:17:52,240
basically show off to your friends or

418
00:17:49,200 --> 00:17:55,600
basically compromise one

419
00:17:52,240 --> 00:17:58,320
particular component of organization

420
00:17:55,600 --> 00:17:59,199
the attackers use a very slow and low

421
00:17:58,320 --> 00:18:02,960
approach

422
00:17:59,200 --> 00:18:03,360
they adapt to the defense mechanisms in

423
00:18:02,960 --> 00:18:05,679
place

424
00:18:03,360 --> 00:18:06,799
and the activities itself carried out

425
00:18:05,679 --> 00:18:09,600
over a very

426
00:18:06,799 --> 00:18:09,918
long duration of time so let's look at

427
00:18:09,600 --> 00:18:13,760
the

428
00:18:09,919 --> 00:18:18,400
case studies of hydreck which was

429
00:18:13,760 --> 00:18:18,400
apt exploit against the

430
00:18:18,799 --> 00:18:22,080
google which targeted our zero-day

431
00:18:20,320 --> 00:18:26,720
vulnerability uh

432
00:18:22,080 --> 00:18:30,639
and later the cv he was assigned

433
00:18:26,720 --> 00:18:33,360
to this vulnerability the attackers were

434
00:18:30,640 --> 00:18:35,200
able to successfully establish foothold

435
00:18:33,360 --> 00:18:37,520
in several organizations using this

436
00:18:35,200 --> 00:18:40,640
exploit

437
00:18:37,520 --> 00:18:42,960
so this attack was carried

438
00:18:40,640 --> 00:18:44,080
out by using social engineering tricks

439
00:18:42,960 --> 00:18:48,320
and enticing

440
00:18:44,080 --> 00:18:52,159
users to click on some

441
00:18:48,320 --> 00:18:52,639
links and the zero-day vulnerabilities

442
00:18:52,160 --> 00:18:56,160
with

443
00:18:52,640 --> 00:18:58,559
these cv ids had some

444
00:18:56,160 --> 00:18:59,360
javascript running at back back end

445
00:18:58,559 --> 00:19:03,280
which was

446
00:18:59,360 --> 00:19:06,719
basically obfuscated and hided the real

447
00:19:03,280 --> 00:19:06,720
intention of the attacker

448
00:19:07,200 --> 00:19:14,559
the exploit targeted object handling

449
00:19:10,240 --> 00:19:16,880
flow in the html of internet explorer so

450
00:19:14,559 --> 00:19:18,879
internet explorer was trying to access

451
00:19:16,880 --> 00:19:22,320
one of the

452
00:19:18,880 --> 00:19:25,360
deleted element and the element was

453
00:19:22,320 --> 00:19:29,280
itself incorrectly analyzed

454
00:19:25,360 --> 00:19:30,879
so when later this code was reverse

455
00:19:29,280 --> 00:19:33,678
engineered

456
00:19:30,880 --> 00:19:35,679
the security team observed that binary

457
00:19:33,679 --> 00:19:38,080
shell code

458
00:19:35,679 --> 00:19:39,200
so basically if you perform a xor

459
00:19:38,080 --> 00:19:42,320
operation

460
00:19:39,200 --> 00:19:45,679
using a particular key on the

461
00:19:42,320 --> 00:19:46,960
payload you identify that the decoded

462
00:19:45,679 --> 00:19:50,880
instruction

463
00:19:46,960 --> 00:19:53,200
points to installer executable

464
00:19:50,880 --> 00:19:55,679
which is the shell code of hydraulic

465
00:19:53,200 --> 00:19:55,679
installer

466
00:19:57,679 --> 00:20:05,440
so what this hydra

467
00:20:02,400 --> 00:20:08,320
exploit does to maintain exp

468
00:20:05,440 --> 00:20:09,760
access is ensure that it uses a dropper

469
00:20:08,320 --> 00:20:13,918
file which generates a

470
00:20:09,760 --> 00:20:17,280
random service and it drops a component

471
00:20:13,919 --> 00:20:20,720
dynamic link library from its resource

472
00:20:17,280 --> 00:20:24,240
at a particular location and it

473
00:20:20,720 --> 00:20:24,640
adds this to one of the registry entries

474
00:20:24,240 --> 00:20:28,159
to

475
00:20:24,640 --> 00:20:28,159
maintain persistence

476
00:20:29,679 --> 00:20:34,960
it goes on and creates a service with

477
00:20:32,720 --> 00:20:36,000
some characteristics which allows it

478
00:20:34,960 --> 00:20:39,520
access

479
00:20:36,000 --> 00:20:42,640
which allows it to automatically start

480
00:20:39,520 --> 00:20:46,000
in case it is shut down

481
00:20:42,640 --> 00:20:48,159
and this dynamic link library is a

482
00:20:46,000 --> 00:20:49,200
component is executed under the context

483
00:20:48,159 --> 00:20:54,159
of generic

484
00:20:49,200 --> 00:20:57,520
host process servicehost.exe

485
00:20:54,159 --> 00:21:00,080
once the hydrec is done with

486
00:20:57,520 --> 00:21:00,840
the exploit it deletes its traces by

487
00:21:00,080 --> 00:21:03,918
proving

488
00:21:00,840 --> 00:21:05,918
the hydra dropper file from the list of

489
00:21:03,919 --> 00:21:09,039
registries

490
00:21:05,919 --> 00:21:10,559
so the below registry entry which we saw

491
00:21:09,039 --> 00:21:14,320
was used to maintain access

492
00:21:10,559 --> 00:21:16,399
is deleted and the dropper component

493
00:21:14,320 --> 00:21:17,200
creates a batch file which eventually

494
00:21:16,400 --> 00:21:20,240
deletes the

495
00:21:17,200 --> 00:21:20,240
hydraulic dropper file

496
00:21:21,760 --> 00:21:24,799
let's have a look at another example of

497
00:21:23,760 --> 00:21:27,760
apt attack

498
00:21:24,799 --> 00:21:28,639
which was the target breach that

499
00:21:27,760 --> 00:21:34,480
happened so

500
00:21:28,640 --> 00:21:34,480
in this case the one of the vendor pc

501
00:21:34,799 --> 00:21:37,918
was infected with malware and the

502
00:21:37,200 --> 00:21:41,679
attackers

503
00:21:37,919 --> 00:21:44,080
compromised its credential in step one

504
00:21:41,679 --> 00:21:46,159
they used the compromise credentials to

505
00:21:44,080 --> 00:21:50,960
connect to the main system

506
00:21:46,159 --> 00:21:50,960
one of the vendor application server

507
00:21:51,840 --> 00:21:55,840
so this shows that reconnaissance and

508
00:21:54,080 --> 00:21:59,120
foothold establishment

509
00:21:55,840 --> 00:22:02,720
involved exploiting

510
00:21:59,120 --> 00:22:04,879
the vendor pc and using

511
00:22:02,720 --> 00:22:07,760
it to connect to the main system of the

512
00:22:04,880 --> 00:22:10,400
target network

513
00:22:07,760 --> 00:22:11,520
because this vendor application was

514
00:22:10,400 --> 00:22:14,640
trusted

515
00:22:11,520 --> 00:22:18,158
the detection mechanism

516
00:22:14,640 --> 00:22:21,280
in a target organization did not detect

517
00:22:18,159 --> 00:22:23,679
uh any or did not point to any

518
00:22:21,280 --> 00:22:25,360
lateral movement that was going to

519
00:22:23,679 --> 00:22:28,240
happen

520
00:22:25,360 --> 00:22:30,479
so the attackers used this stolen token

521
00:22:28,240 --> 00:22:32,960
to create a fake admin account and

522
00:22:30,480 --> 00:22:34,320
propagated attack on the internal

523
00:22:32,960 --> 00:22:36,640
network

524
00:22:34,320 --> 00:22:37,840
they went on and connected to some of

525
00:22:36,640 --> 00:22:41,440
the pcs

526
00:22:37,840 --> 00:22:43,520
with the fake admin credentials

527
00:22:41,440 --> 00:22:44,720
so this shows that lateral movement

528
00:22:43,520 --> 00:22:48,400
happened

529
00:22:44,720 --> 00:22:50,720
in step 3 of this exploit

530
00:22:48,400 --> 00:22:53,200
they infected the internal systems on

531
00:22:50,720 --> 00:22:55,840
the target organization

532
00:22:53,200 --> 00:22:58,000
and installed malware on some critical

533
00:22:55,840 --> 00:23:00,959
systems

534
00:22:58,000 --> 00:23:04,240
with the goal of exfiltrating data out

535
00:23:00,960 --> 00:23:04,240
of the target organization

536
00:23:06,159 --> 00:23:10,640
and eventually they used ftp as a

537
00:23:09,200 --> 00:23:13,600
mechanism to send the

538
00:23:10,640 --> 00:23:14,799
stolen data over network share to their

539
00:23:13,600 --> 00:23:17,678
remote

540
00:23:14,799 --> 00:23:19,360
command and control center so this shows

541
00:23:17,679 --> 00:23:23,360
you that there are

542
00:23:19,360 --> 00:23:26,719
uh four or five stages in an apt attack

543
00:23:23,360 --> 00:23:29,439
so there is also post exfiltration

544
00:23:26,720 --> 00:23:31,919
and deletion of logs which is part of

545
00:23:29,440 --> 00:23:35,280
apt attack but

546
00:23:31,919 --> 00:23:36,000
in our research it's not very important

547
00:23:35,280 --> 00:23:38,399
because it does

548
00:23:36,000 --> 00:23:39,440
not add further value to our machine

549
00:23:38,400 --> 00:23:42,080
learning models

550
00:23:39,440 --> 00:23:43,919
that we will discuss as part of this

551
00:23:42,080 --> 00:23:46,960
research

552
00:23:43,919 --> 00:23:49,760
but these four stages will be

553
00:23:46,960 --> 00:23:50,640
important and will refer to them

554
00:23:49,760 --> 00:23:55,520
throughout the

555
00:23:50,640 --> 00:23:55,520
next phase of this talk

556
00:23:56,960 --> 00:24:03,440
so we have seen previously in like a few

557
00:24:00,640 --> 00:24:04,080
last few slides that apt attacks are

558
00:24:03,440 --> 00:24:07,279
very difficult

559
00:24:04,080 --> 00:24:10,399
to detect so another reason

560
00:24:07,279 --> 00:24:13,760
we went on and created this

561
00:24:10,400 --> 00:24:15,440
data set for apt detection dapt 2020 was

562
00:24:13,760 --> 00:24:17,840
that

563
00:24:15,440 --> 00:24:19,840
we wanted to benchmark if the current ai

564
00:24:17,840 --> 00:24:21,279
models are good enough to detect apt

565
00:24:19,840 --> 00:24:24,000
attacks

566
00:24:21,279 --> 00:24:26,080
and the data sets that these a model

567
00:24:24,000 --> 00:24:28,880
screen on to

568
00:24:26,080 --> 00:24:30,320
claim that they are getting 90 detection

569
00:24:28,880 --> 00:24:33,039
accuracy or 100

570
00:24:30,320 --> 00:24:35,678
detection accuracy are those data sets

571
00:24:33,039 --> 00:24:39,520
themselves are good enough

572
00:24:35,679 --> 00:24:41,440
and as a

573
00:24:39,520 --> 00:24:44,158
snapshot of what we are going to see

574
00:24:41,440 --> 00:24:47,440
next is that existing data sets

575
00:24:44,159 --> 00:24:49,120
fail to model all phases of apt attacks

576
00:24:47,440 --> 00:24:51,760
and they don't cover all the attack

577
00:24:49,120 --> 00:24:54,959
vectors of the apt attack so

578
00:24:51,760 --> 00:24:58,720
we tried to provide coverage of both

579
00:24:54,960 --> 00:25:01,840
of these when we generated this

580
00:24:58,720 --> 00:25:01,840
apt data set

581
00:25:02,159 --> 00:25:06,720
so we created a system where we had the

582
00:25:05,279 --> 00:25:08,960
gateway router

583
00:25:06,720 --> 00:25:10,240
providing access to a public virtual

584
00:25:08,960 --> 00:25:14,640
machine which had

585
00:25:10,240 --> 00:25:16,640
some vulnerable softwares for example

586
00:25:14,640 --> 00:25:18,679
mutiladi or dam vulnerable

587
00:25:16,640 --> 00:25:21,200
web application bad store

588
00:25:18,679 --> 00:25:24,799
metaexploitable

589
00:25:21,200 --> 00:25:27,200
and the red team was asked to

590
00:25:24,799 --> 00:25:28,480
first compromise the service on the

591
00:25:27,200 --> 00:25:32,240
public

592
00:25:28,480 --> 00:25:34,480
machine then move on to the private

593
00:25:32,240 --> 00:25:37,600
virtual machine which was hosted on the

594
00:25:34,480 --> 00:25:40,480
internal private network

595
00:25:37,600 --> 00:25:42,158
and after compromising the private

596
00:25:40,480 --> 00:25:44,159
virtual machine

597
00:25:42,159 --> 00:25:46,080
basically exploiting these services like

598
00:25:44,159 --> 00:25:49,360
samba web application

599
00:25:46,080 --> 00:25:52,399
or wordpress

600
00:25:49,360 --> 00:25:53,760
their goal was to exfiltrate the data to

601
00:25:52,400 --> 00:25:58,159
their command and control

602
00:25:53,760 --> 00:25:58,799
center using any mechanism like secured

603
00:25:58,159 --> 00:26:01,840
copy

604
00:25:58,799 --> 00:26:05,360
or sftp or

605
00:26:01,840 --> 00:26:08,080
using a client to exfiltrate data to the

606
00:26:05,360 --> 00:26:10,959
google drive they created

607
00:26:08,080 --> 00:26:12,559
we used elasticsearch log stash and

608
00:26:10,960 --> 00:26:16,000
kibana

609
00:26:12,559 --> 00:26:19,760
basically elk stack to

610
00:26:16,000 --> 00:26:24,159
record the host log information

611
00:26:19,760 --> 00:26:27,520
and network packet capture

612
00:26:24,159 --> 00:26:30,720
which helped us record the

613
00:26:27,520 --> 00:26:34,000
network and host activity of

614
00:26:30,720 --> 00:26:37,360
the red team during the duration of

615
00:26:34,000 --> 00:26:37,360
this data set creation

616
00:26:37,440 --> 00:26:44,320
so you can see different networks the

617
00:26:41,279 --> 00:26:46,799
file bit which is a component of elk

618
00:26:44,320 --> 00:26:47,520
or basically agent of elk which helps

619
00:26:46,799 --> 00:26:51,279
collect

620
00:26:47,520 --> 00:26:55,039
this logs is on a api network

621
00:26:51,279 --> 00:26:59,520
and the private network connects

622
00:26:55,039 --> 00:27:02,960
the public vm private vm and log server

623
00:26:59,520 --> 00:27:05,600
and the red team was using

624
00:27:02,960 --> 00:27:07,279
the exposed service on the public

625
00:27:05,600 --> 00:27:11,039
network

626
00:27:07,279 --> 00:27:13,760
to access the public vm first

627
00:27:11,039 --> 00:27:15,919
and then eventually leading up to the

628
00:27:13,760 --> 00:27:20,879
goal of private vm

629
00:27:15,919 --> 00:27:21,679
and exfiltrating the data so what we did

630
00:27:20,880 --> 00:27:24,880
was we

631
00:27:21,679 --> 00:27:28,000
broke up the apt

632
00:27:24,880 --> 00:27:31,360
attack across multiple days so

633
00:27:28,000 --> 00:27:34,880
during day one we asked a

634
00:27:31,360 --> 00:27:37,279
group of students to perform

635
00:27:34,880 --> 00:27:39,600
the normal activities on these services

636
00:27:37,279 --> 00:27:42,480
that were exposed on public network

637
00:27:39,600 --> 00:27:43,439
so they did bring get post requests they

638
00:27:42,480 --> 00:27:46,480
pulled

639
00:27:43,440 --> 00:27:49,600
web pages they used

640
00:27:46,480 --> 00:27:52,159
curl to

641
00:27:49,600 --> 00:27:54,158
test some of the links on these

642
00:27:52,159 --> 00:27:54,880
vulnerable services they uploaded the

643
00:27:54,159 --> 00:27:58,080
files

644
00:27:54,880 --> 00:28:01,120
downloaded the files so this was done to

645
00:27:58,080 --> 00:28:04,879
baseline how the normal

646
00:28:01,120 --> 00:28:06,399
behavior of the users looks like

647
00:28:04,880 --> 00:28:08,000
during the second day the red team

648
00:28:06,399 --> 00:28:11,120
performed reconnaissance

649
00:28:08,000 --> 00:28:13,679
using different tools and techniques

650
00:28:11,120 --> 00:28:14,959
such as work suite or they use account

651
00:28:13,679 --> 00:28:18,880
discovery techniques

652
00:28:14,960 --> 00:28:22,960
or sql map the idea was to cover

653
00:28:18,880 --> 00:28:22,960
as many ttps as possible

654
00:28:24,000 --> 00:28:27,360
once they had the reconnaissance

655
00:28:26,000 --> 00:28:30,640
information the

656
00:28:27,360 --> 00:28:33,279
next stage was foothold establishment

657
00:28:30,640 --> 00:28:34,720
where the red team basically used things

658
00:28:33,279 --> 00:28:38,960
like php reversal

659
00:28:34,720 --> 00:28:43,279
or net cat or sql injection to

660
00:28:38,960 --> 00:28:47,200
exploit the vulnerabilities on the

661
00:28:43,279 --> 00:28:50,480
public vm that we can see in the

662
00:28:47,200 --> 00:28:50,480
top left of this figure

663
00:28:50,559 --> 00:28:56,559
and the idea was to gain root access

664
00:28:54,399 --> 00:28:57,439
or gain some kind of persistence on the

665
00:28:56,559 --> 00:29:00,720
public

666
00:28:57,440 --> 00:29:02,880
vm of the network so

667
00:29:00,720 --> 00:29:04,559
during next day they use lateral

668
00:29:02,880 --> 00:29:07,600
movement to

669
00:29:04,559 --> 00:29:11,520
target the services on the private vm

670
00:29:07,600 --> 00:29:13,360
like sum up or dns so these were little

671
00:29:11,520 --> 00:29:15,360
bit difficult to target

672
00:29:13,360 --> 00:29:18,080
compared to the services on the public

673
00:29:15,360 --> 00:29:18,080
virtual machine

674
00:29:18,480 --> 00:29:22,159
so they performed nmap scan they

675
00:29:20,880 --> 00:29:26,000
exploited some

676
00:29:22,159 --> 00:29:28,240
authentication and

677
00:29:26,000 --> 00:29:30,559
used uh authentication vulnerabilities

678
00:29:28,240 --> 00:29:33,200
and used some scripts to target

679
00:29:30,559 --> 00:29:35,120
the vulnerabilities on this private

680
00:29:33,200 --> 00:29:38,159
network

681
00:29:35,120 --> 00:29:40,080
and on day five they used uh tools and

682
00:29:38,159 --> 00:29:43,360
techniques like

683
00:29:40,080 --> 00:29:43,918
google drive client to exfiltrate the

684
00:29:43,360 --> 00:29:46,959
data

685
00:29:43,919 --> 00:29:51,200
or using ftp to

686
00:29:46,960 --> 00:29:51,200
exfiltrate the data to their ftp server

687
00:29:51,679 --> 00:30:00,159
or simple tools like w put or

688
00:29:54,880 --> 00:30:03,200
scp so as you can see that we

689
00:30:00,159 --> 00:30:06,799
did all the individual activities during

690
00:30:03,200 --> 00:30:10,640
these different days to ensure that

691
00:30:06,799 --> 00:30:11,200
we can observe each individual activity

692
00:30:10,640 --> 00:30:14,640
of

693
00:30:11,200 --> 00:30:19,039
the apt attack that we

694
00:30:14,640 --> 00:30:23,840
defined during the

695
00:30:19,039 --> 00:30:26,879
example of this target hack

696
00:30:23,840 --> 00:30:27,678
so that was the motivation uh to perform

697
00:30:26,880 --> 00:30:30,960
them on

698
00:30:27,679 --> 00:30:33,919
different days another key

699
00:30:30,960 --> 00:30:34,640
thing was that we carried out a lot of

700
00:30:33,919 --> 00:30:38,480
normal

701
00:30:34,640 --> 00:30:40,799
activities during that these days and

702
00:30:38,480 --> 00:30:43,120
large percentage of traffic was normal

703
00:30:40,799 --> 00:30:45,200
activity so

704
00:30:43,120 --> 00:30:47,199
this was done to ensure that the

705
00:30:45,200 --> 00:30:49,520
percentage of attack traffic remained

706
00:30:47,200 --> 00:30:51,760
very low compared to the normal traffic

707
00:30:49,520 --> 00:30:53,840
so we had the student team

708
00:30:51,760 --> 00:30:55,520
doing the normal activity during all

709
00:30:53,840 --> 00:30:58,639
these days

710
00:30:55,520 --> 00:31:01,440
and the red team trying to do

711
00:30:58,640 --> 00:31:01,760
these attack steps and trying to blend

712
00:31:01,440 --> 00:31:05,840
in

713
00:31:01,760 --> 00:31:05,840
to the normal traffic

714
00:31:06,640 --> 00:31:13,200
so when we compared the data set that we

715
00:31:10,000 --> 00:31:16,080
created dapd 2020

716
00:31:13,200 --> 00:31:16,640
with other data sets we observe that

717
00:31:16,080 --> 00:31:20,158
most

718
00:31:16,640 --> 00:31:23,279
data sets they perform only

719
00:31:20,159 --> 00:31:27,279
first three phases of apt attack like

720
00:31:23,279 --> 00:31:29,440
cic ids was a well-known data set that

721
00:31:27,279 --> 00:31:30,880
performed just a normal traffic

722
00:31:29,440 --> 00:31:33,200
reconnaissance and foothold

723
00:31:30,880 --> 00:31:35,120
establishment

724
00:31:33,200 --> 00:31:36,480
similarly other data sets that are

725
00:31:35,120 --> 00:31:39,039
popularly used to

726
00:31:36,480 --> 00:31:40,799
benchmark machine learning models they

727
00:31:39,039 --> 00:31:43,120
were missing the lateral movement and

728
00:31:40,799 --> 00:31:45,519
data exfiltration which was

729
00:31:43,120 --> 00:31:46,158
carried out in our data set so this was

730
00:31:45,519 --> 00:31:51,200
to provide

731
00:31:46,159 --> 00:31:51,200
completion of all phases of apt attack

732
00:31:51,279 --> 00:31:54,880
so next i'll discuss the machine

733
00:31:52,880 --> 00:31:57,760
learning models

734
00:31:54,880 --> 00:31:59,279
so the idea was to use semi supervised

735
00:31:57,760 --> 00:32:02,000
machine learning models

736
00:31:59,279 --> 00:32:04,000
and by developing a baseline of normal

737
00:32:02,000 --> 00:32:06,080
behavior

738
00:32:04,000 --> 00:32:08,080
any deviation from this baseline

739
00:32:06,080 --> 00:32:11,360
behavior was indicative of

740
00:32:08,080 --> 00:32:12,080
the anomaly and semi supervised

741
00:32:11,360 --> 00:32:15,439
approaches

742
00:32:12,080 --> 00:32:19,678
are prevalent in anomaly detection

743
00:32:15,440 --> 00:32:22,240
research where the idea is to make

744
00:32:19,679 --> 00:32:22,880
distinction between normal and anomalous

745
00:32:22,240 --> 00:32:26,240
traffic

746
00:32:22,880 --> 00:32:30,000
when the large percentage of traffic is

747
00:32:26,240 --> 00:32:31,760
normal and only small percentage of

748
00:32:30,000 --> 00:32:34,799
traffic is anomalous so

749
00:32:31,760 --> 00:32:39,039
semi-supervised models uh perform

750
00:32:34,799 --> 00:32:42,559
well in those scenarios

751
00:32:39,039 --> 00:32:44,320
so one class support vector machine

752
00:32:42,559 --> 00:32:45,600
are known to be particularly effective

753
00:32:44,320 --> 00:32:48,240
in scenarios when

754
00:32:45,600 --> 00:32:50,158
there is a large percentage of normal

755
00:32:48,240 --> 00:32:52,559
traffic and small fraction of anomalous

756
00:32:50,159 --> 00:32:52,559
data

757
00:32:52,640 --> 00:32:55,840
so the idea is to train the model on

758
00:32:54,799 --> 00:32:58,799
labeled example

759
00:32:55,840 --> 00:33:00,000
of class with more data and any

760
00:32:58,799 --> 00:33:04,559
deviations from that

761
00:33:00,000 --> 00:33:06,960
are anomalous the

762
00:33:04,559 --> 00:33:10,158
stacked auto encoders are specific type

763
00:33:06,960 --> 00:33:12,880
of feed forward neural network

764
00:33:10,159 --> 00:33:14,080
that find the compact latent space

765
00:33:12,880 --> 00:33:17,440
representation of

766
00:33:14,080 --> 00:33:19,360
input which can be later leveraged for

767
00:33:17,440 --> 00:33:22,720
reconstruction

768
00:33:19,360 --> 00:33:24,158
so auto encoders have hidden layer and

769
00:33:22,720 --> 00:33:26,880
there is basically compression

770
00:33:24,159 --> 00:33:28,880
operations that occurs between the input

771
00:33:26,880 --> 00:33:30,559
and hidden layer

772
00:33:28,880 --> 00:33:32,399
and they use the notion of

773
00:33:30,559 --> 00:33:35,440
reconstruction

774
00:33:32,399 --> 00:33:37,360
between the hidden layer and output

775
00:33:35,440 --> 00:33:40,399
layer

776
00:33:37,360 --> 00:33:41,439
so the compression function in the stack

777
00:33:40,399 --> 00:33:44,559
auto encoder

778
00:33:41,440 --> 00:33:46,399
is followed by reconstruction

779
00:33:44,559 --> 00:33:47,840
and this is done with a deep neural

780
00:33:46,399 --> 00:33:51,678
network

781
00:33:47,840 --> 00:33:52,000
as opposed to a single non-linear layer

782
00:33:51,679 --> 00:33:55,440
in

783
00:33:52,000 --> 00:33:58,640
other neural network other

784
00:33:55,440 --> 00:33:58,640
neural network frameworks

785
00:33:58,960 --> 00:34:03,519
the output of stack auto encoder is then

786
00:34:03,600 --> 00:34:09,839
forced uh to basically mimic the input

787
00:34:06,640 --> 00:34:11,839
and the loss function seeks to minimize

788
00:34:09,839 --> 00:34:13,040
the distance between the original input

789
00:34:11,839 --> 00:34:15,918
and reconstruction

790
00:34:13,040 --> 00:34:18,800
output so what we do is we first train

791
00:34:15,918 --> 00:34:20,879
the stackout encoder on normal traffic

792
00:34:18,800 --> 00:34:23,359
followed by testing it on both normal

793
00:34:20,879 --> 00:34:25,679
and anomalous data

794
00:34:23,359 --> 00:34:27,918
the expectation is that although stack

795
00:34:25,679 --> 00:34:31,679
auto encoder can correctly

796
00:34:27,918 --> 00:34:33,199
reconstruct the normal data it fails to

797
00:34:31,679 --> 00:34:36,720
do so effectively

798
00:34:33,199 --> 00:34:38,399
for a normal abnormal data so

799
00:34:36,719 --> 00:34:41,118
basically the data with high

800
00:34:38,399 --> 00:34:44,960
reconstruction error can be flagged as

801
00:34:41,119 --> 00:34:46,560
anomalous but staccato encoder is

802
00:34:44,960 --> 00:34:48,720
limited in the sense that they are

803
00:34:46,560 --> 00:34:50,719
not capable of detecting contextual

804
00:34:48,719 --> 00:34:55,359
anomalies

805
00:34:50,719 --> 00:34:57,839
which are significant in

806
00:34:55,359 --> 00:34:59,200
advance persistent threats so basically

807
00:34:57,839 --> 00:35:01,440
we use

808
00:34:59,200 --> 00:35:02,879
long term short memory stack auto

809
00:35:01,440 --> 00:35:06,480
encoder to

810
00:35:02,880 --> 00:35:09,760
use this time series correlation between

811
00:35:06,480 --> 00:35:12,880
different phases of apt attack

812
00:35:09,760 --> 00:35:15,599
this is because the input layer of stack

813
00:35:12,880 --> 00:35:19,200
auto encoder only accept a single

814
00:35:15,599 --> 00:35:21,760
network packet as input and stackover

815
00:35:19,200 --> 00:35:25,359
encoder that uses lstm cells

816
00:35:21,760 --> 00:35:25,359
instead use hidden layers

817
00:35:26,160 --> 00:35:32,319
as the lstm cells instead of like a

818
00:35:30,000 --> 00:35:34,480
single neuron which is in case of a

819
00:35:32,320 --> 00:35:38,079
stack order encoder

820
00:35:34,480 --> 00:35:38,480
so this helps in the use of basic cell

821
00:35:38,079 --> 00:35:42,839
as

822
00:35:38,480 --> 00:35:44,320
lstm helps in successful time series

823
00:35:42,839 --> 00:35:46,720
analysis

824
00:35:44,320 --> 00:35:49,760
and this modified stackover encoder is

825
00:35:46,720 --> 00:35:52,078
known as lstm stack autoencoder

826
00:35:49,760 --> 00:35:53,040
so this compresses the network traffic

827
00:35:52,079 --> 00:35:55,680
packets in

828
00:35:53,040 --> 00:35:58,000
multiple time series steps and then

829
00:35:55,680 --> 00:36:01,759
basically reconstructs

830
00:35:58,000 --> 00:36:03,920
those so this is the information

831
00:36:01,760 --> 00:36:05,599
on data that we collected we collected

832
00:36:03,920 --> 00:36:07,760
network traffic data

833
00:36:05,599 --> 00:36:09,680
which compromised which comprised of

834
00:36:07,760 --> 00:36:12,400
syslogs dns logs

835
00:36:09,680 --> 00:36:12,960
access and authentication logs the logs

836
00:36:12,400 --> 00:36:16,079
of

837
00:36:12,960 --> 00:36:19,119
sql servers and

838
00:36:16,079 --> 00:36:23,839
we used pcap files and we

839
00:36:19,119 --> 00:36:26,640
basically extracted 84 features

840
00:36:23,839 --> 00:36:26,960
from the network traffic data such as

841
00:36:26,640 --> 00:36:29,920
floor

842
00:36:26,960 --> 00:36:32,240
duration the total forward packet trade

843
00:36:29,920 --> 00:36:36,400
the total backward packet rate

844
00:36:32,240 --> 00:36:36,399
the inter arrival time between two flows

845
00:36:36,640 --> 00:36:40,560
so we used different measurement metrics

846
00:36:39,520 --> 00:36:43,200
so first one was

847
00:36:40,560 --> 00:36:44,160
a precision recall curve the precision

848
00:36:43,200 --> 00:36:47,680
is two positive

849
00:36:44,160 --> 00:36:50,000
divided by uh total data basically the

850
00:36:47,680 --> 00:36:51,598
true positive and false positive the

851
00:36:50,000 --> 00:36:54,480
recall

852
00:36:51,599 --> 00:36:57,200
is true positive divided by 2 positive

853
00:36:54,480 --> 00:37:01,119
plus false negative

854
00:36:57,200 --> 00:37:04,319
and the reason we used pr curve

855
00:37:01,119 --> 00:37:05,119
is because the attack representation is

856
00:37:04,320 --> 00:37:07,520
often

857
00:37:05,119 --> 00:37:09,119
very small fraction of the total data so

858
00:37:07,520 --> 00:37:12,000
it will be around maybe two percent of

859
00:37:09,119 --> 00:37:15,359
the total data set

860
00:37:12,000 --> 00:37:17,280
the roc area under curve

861
00:37:15,359 --> 00:37:20,078
receiver optimize optimized

862
00:37:17,280 --> 00:37:20,079
characteristics

863
00:37:20,240 --> 00:37:24,399
receiver operating characteristic

864
00:37:24,880 --> 00:37:28,079
basically uses the false positive rate

865
00:37:27,119 --> 00:37:31,839
in comparison

866
00:37:28,079 --> 00:37:34,960
to precision used in pr curves or

867
00:37:31,839 --> 00:37:34,960
precision recall curve

868
00:37:35,200 --> 00:37:39,520
the issue is that false positive rate is

869
00:37:38,079 --> 00:37:44,079
less sensitive to changes

870
00:37:39,520 --> 00:37:48,560
if the number of false positives

871
00:37:44,079 --> 00:37:50,640
are very high so basically

872
00:37:48,560 --> 00:37:53,680
normal traffic's being classified as

873
00:37:50,640 --> 00:37:56,640
attacks is one case of false positive

874
00:37:53,680 --> 00:37:58,480
whereas the precision looks only at the

875
00:37:56,640 --> 00:38:02,879
class of positive samples which

876
00:37:58,480 --> 00:38:05,280
in our case is basically anomalies

877
00:38:02,880 --> 00:38:07,280
so it provides a better matrix when

878
00:38:05,280 --> 00:38:08,400
particular class is uh severally

879
00:38:07,280 --> 00:38:13,200
underrepresented

880
00:38:08,400 --> 00:38:13,200
in our case the apt attack phases

881
00:38:14,480 --> 00:38:18,960
so performance of algorithm on different

882
00:38:16,960 --> 00:38:23,119
data sets

883
00:38:18,960 --> 00:38:25,280
using accuracy or roc curve

884
00:38:23,119 --> 00:38:26,480
can also become a little bit misleading

885
00:38:25,280 --> 00:38:29,839
in the context

886
00:38:26,480 --> 00:38:33,520
because they have different

887
00:38:29,839 --> 00:38:36,960
percentage or degrees of anomalies so

888
00:38:33,520 --> 00:38:40,640
one observation was that

889
00:38:36,960 --> 00:38:44,160
the attack traffic in cic ids

890
00:38:40,640 --> 00:38:48,960
is 22 whereas in the

891
00:38:44,160 --> 00:38:54,160
case of unb 2015

892
00:38:48,960 --> 00:38:54,160
the attack traffic uh was around 14

893
00:38:57,119 --> 00:39:03,359
so we use another parameter basically

894
00:39:00,400 --> 00:39:05,280
confidence value p after normalizing the

895
00:39:03,359 --> 00:39:08,640
reconstruction error across

896
00:39:05,280 --> 00:39:10,640
the test sample between 0 and 1

897
00:39:08,640 --> 00:39:11,920
and when the reconstruction error is

898
00:39:10,640 --> 00:39:15,118
large the value of

899
00:39:11,920 --> 00:39:17,520
p is close to 1. thus p indicates the

900
00:39:15,119 --> 00:39:20,000
confidence with which the model predicts

901
00:39:17,520 --> 00:39:23,280
input as anomaly

902
00:39:20,000 --> 00:39:26,960
so to plot the pr curve we first set

903
00:39:23,280 --> 00:39:30,400
a threshold value we then use the

904
00:39:26,960 --> 00:39:33,200
test input and find how the

905
00:39:30,400 --> 00:39:35,200
value of this confidence interval is

906
00:39:33,200 --> 00:39:37,200
compared to this threshold

907
00:39:35,200 --> 00:39:39,598
if it is above the threshold we classify

908
00:39:37,200 --> 00:39:41,118
it as

909
00:39:39,599 --> 00:39:43,520
anomaly and if it is lower than

910
00:39:41,119 --> 00:39:45,680
threshold it is normal

911
00:39:43,520 --> 00:39:46,640
so i ideal classifier should be able to

912
00:39:45,680 --> 00:39:49,839
predict the

913
00:39:46,640 --> 00:39:53,040
test label of each input with

914
00:39:49,839 --> 00:39:55,200
complete confidence so if there is an

915
00:39:53,040 --> 00:39:56,400
anomaly and the classifier is doing well

916
00:39:55,200 --> 00:39:59,439
the value

917
00:39:56,400 --> 00:40:02,640
of this confidence

918
00:39:59,440 --> 00:40:05,440
value p should be 1 for the normal

919
00:40:02,640 --> 00:40:07,598
traffic and it should be

920
00:40:05,440 --> 00:40:08,880
for the anomalous traffic the value of p

921
00:40:07,599 --> 00:40:10,560
should be 1

922
00:40:08,880 --> 00:40:13,680
while for the normal traffic it should

923
00:40:10,560 --> 00:40:13,680
be predicted as zero

924
00:40:14,960 --> 00:40:18,240
and we also used a baseline no skill

925
00:40:17,200 --> 00:40:21,359
classifier that

926
00:40:18,240 --> 00:40:22,078
outputs a value of the confidence

927
00:40:21,359 --> 00:40:26,799
interval

928
00:40:22,079 --> 00:40:30,960
one in all cases of input data

929
00:40:26,800 --> 00:40:34,000
and it is shown in the plots that follow

930
00:40:30,960 --> 00:40:34,000
using dotted lines

931
00:40:35,280 --> 00:40:39,040
the abundance of attack data in one

932
00:40:37,119 --> 00:40:41,440
phase helps the accuracy of

933
00:40:39,040 --> 00:40:42,640
overall anomaly detection system which

934
00:40:41,440 --> 00:40:46,079
may be

935
00:40:42,640 --> 00:40:46,879
highly realized unreliable in some other

936
00:40:46,079 --> 00:40:49,920
context

937
00:40:46,880 --> 00:40:53,839
so that is the reasoning behind

938
00:40:49,920 --> 00:40:53,839
these metrics that we used

939
00:40:54,720 --> 00:41:02,078
so we observed uh how these different

940
00:40:58,960 --> 00:41:04,800
ai algorithms stack auto encoder lstm

941
00:41:02,079 --> 00:41:04,800
and lstm

942
00:41:04,880 --> 00:41:08,880
stack photo encoder and svm perform

943
00:41:09,280 --> 00:41:13,200
so stackover encoder performs uh

944
00:41:12,079 --> 00:41:15,520
satisfactorily

945
00:41:13,200 --> 00:41:19,598
in two settings that is detecting a

946
00:41:15,520 --> 00:41:22,000
reconnaissance attack on cic ids 2018

947
00:41:19,599 --> 00:41:23,520
and detecting a foothold establishment

948
00:41:22,000 --> 00:41:27,520
on our data set if you

949
00:41:23,520 --> 00:41:29,680
look at the bottom right

950
00:41:27,520 --> 00:41:30,170
in case of reconnaissance the anomaly

951
00:41:29,680 --> 00:41:32,799
detection

952
00:41:30,170 --> 00:41:35,920
[Music]

953
00:41:32,800 --> 00:41:36,480
performed by stackout encoder works well

954
00:41:35,920 --> 00:41:40,000
only

955
00:41:36,480 --> 00:41:42,240
for cic ids 2018

956
00:41:40,000 --> 00:41:42,240
and

957
00:41:43,040 --> 00:41:48,640
for this case the no skill classifier

958
00:41:46,079 --> 00:41:52,880
has a precision value 0.23

959
00:41:48,640 --> 00:41:52,879
corresponding to the

960
00:41:53,680 --> 00:42:02,078
anomalies and the no skill classifier is

961
00:41:57,599 --> 00:42:04,400
far better compared to other data sets

962
00:42:02,079 --> 00:42:06,240
with the far better than any of the

963
00:42:04,400 --> 00:42:09,920
other data sets with the high precision

964
00:42:06,240 --> 00:42:16,720
value of 0.87 for some threshold

965
00:42:09,920 --> 00:42:19,000
in case of foothold establishment phase

966
00:42:16,720 --> 00:42:21,520
stackout encoder behaves very

967
00:42:19,000 --> 00:42:24,560
unsatisfactorily and it is as bad as

968
00:42:21,520 --> 00:42:26,400
no skill classifier and the

969
00:42:24,560 --> 00:42:28,000
lateral movement and detects filtration

970
00:42:26,400 --> 00:42:31,760
were not in

971
00:42:28,000 --> 00:42:33,280
some of the other data sets and on dapt

972
00:42:31,760 --> 00:42:36,319
2020

973
00:42:33,280 --> 00:42:39,359
stack auto encoder performed very badly

974
00:42:36,319 --> 00:42:39,359
for these two stages

975
00:42:41,359 --> 00:42:44,720
in case of lstm stack auto encoder there

976
00:42:44,319 --> 00:42:47,680
was

977
00:42:44,720 --> 00:42:49,200
a significant improvement in

978
00:42:47,680 --> 00:42:52,879
reconnaissance phase the

979
00:42:49,200 --> 00:42:56,319
performance or maximum precision value

980
00:42:52,880 --> 00:42:59,359
increased to about 0.9

981
00:42:56,319 --> 00:43:00,160
this is to an extent an indication that

982
00:42:59,359 --> 00:43:03,598
there exists

983
00:43:00,160 --> 00:43:06,319
some contextual information

984
00:43:03,599 --> 00:43:06,720
particularly in case of cic ids 2018

985
00:43:06,319 --> 00:43:12,319
that

986
00:43:06,720 --> 00:43:14,399
is detected by lstm stack encoder

987
00:43:12,319 --> 00:43:15,920
for the foothold establishment the

988
00:43:14,400 --> 00:43:19,440
performance is

989
00:43:15,920 --> 00:43:22,880
as bad as a no skill classifier for lstm

990
00:43:19,440 --> 00:43:27,839
stack auto encoder and it is

991
00:43:22,880 --> 00:43:27,839
bad for other data sets as well

992
00:43:28,240 --> 00:43:34,078
the performance of the lstm stack auto

993
00:43:31,839 --> 00:43:36,160
encoder on or data set because no other

994
00:43:34,079 --> 00:43:38,240
data set had lateral movement

995
00:43:36,160 --> 00:43:39,520
ended exfiltration was much worse

996
00:43:38,240 --> 00:43:42,640
compared to

997
00:43:39,520 --> 00:43:42,640
stack auto encoder

998
00:43:43,280 --> 00:43:48,240
so lastly in case of support vector

999
00:43:46,560 --> 00:43:50,078
machine

1000
00:43:48,240 --> 00:43:52,160
in reconnaissance phase the learning

1001
00:43:50,079 --> 00:43:55,760
classifier performs as bad as

1002
00:43:52,160 --> 00:43:59,279
no skill classifier for all data set

1003
00:43:55,760 --> 00:44:03,119
except cic ids 2018

1004
00:43:59,280 --> 00:44:03,119
that you see in the red line

1005
00:44:04,160 --> 00:44:09,839
and it's performed quite well compared

1006
00:44:07,520 --> 00:44:13,520
to their previous data set cicidas

1007
00:44:09,839 --> 00:44:16,720
2017 and unb 2015.

1008
00:44:13,520 --> 00:44:18,400
it essentially implies that like for cic

1009
00:44:16,720 --> 00:44:20,879
ids 2018

1010
00:44:18,400 --> 00:44:24,720
there were a lot more reconnaissance

1011
00:44:20,880 --> 00:44:24,720
attempts compared to other data sets

1012
00:44:26,880 --> 00:44:34,000
the foothold establishment phase

1013
00:44:30,480 --> 00:44:35,280
is one case where support vector machine

1014
00:44:34,000 --> 00:44:38,400
performed well on

1015
00:44:35,280 --> 00:44:41,599
our data set dapt

1016
00:44:38,400 --> 00:44:44,480
2020 compared to

1017
00:44:41,599 --> 00:44:44,480
other data sets

1018
00:44:44,800 --> 00:44:51,599
for most of the other data sets

1019
00:44:48,800 --> 00:44:52,560
it's as bad as the no scale classifier

1020
00:44:51,599 --> 00:44:54,319
and

1021
00:44:52,560 --> 00:44:56,078
for the lateral movement and data

1022
00:44:54,319 --> 00:44:58,160
exfiltration

1023
00:44:56,079 --> 00:45:05,119
support vector machine performed very

1024
00:44:58,160 --> 00:45:08,000
poorly on our dataset

1025
00:45:05,119 --> 00:45:09,920
so next we did some observation of

1026
00:45:08,000 --> 00:45:12,960
different phases of apt attack

1027
00:45:09,920 --> 00:45:15,359
uh reconnaissance foothold establishment

1028
00:45:12,960 --> 00:45:18,720
lateral movement and exfiltration

1029
00:45:15,359 --> 00:45:22,720
using uh the

1030
00:45:18,720 --> 00:45:22,720
receiver operating characteristic

1031
00:45:23,359 --> 00:45:26,640
so area under curve area under curve roc

1032
00:45:26,400 --> 00:45:30,240
and

1033
00:45:26,640 --> 00:45:30,240
area under curve pr

1034
00:45:31,200 --> 00:45:34,879
so these roc curves uh represent that

1035
00:45:33,680 --> 00:45:37,919
true positive against

1036
00:45:34,880 --> 00:45:40,720
false positive and the graphical uh

1037
00:45:37,920 --> 00:45:41,839
or the table illustrates the diagnostic

1038
00:45:40,720 --> 00:45:44,879
ability of

1039
00:45:41,839 --> 00:45:49,279
the binary classifier for varying

1040
00:45:44,880 --> 00:45:50,000
degree of threshold so aucpr summarizes

1041
00:45:49,280 --> 00:45:52,640
the curves

1042
00:45:50,000 --> 00:45:55,119
precision against recall and auc roc is

1043
00:45:52,640 --> 00:45:55,118
the value

1044
00:45:56,319 --> 00:45:59,599
so auc roc value when it is close to 1

1045
00:45:59,040 --> 00:46:01,920
it

1046
00:45:59,599 --> 00:46:04,560
implies that it's good performance

1047
00:46:01,920 --> 00:46:06,640
whereas if it is close to 0.5

1048
00:46:04,560 --> 00:46:08,000
it means it's making uh the classifier

1049
00:46:06,640 --> 00:46:11,598
is making

1050
00:46:08,000 --> 00:46:14,160
random guess auc roc is good for

1051
00:46:11,599 --> 00:46:15,839
interoperability however if anomaly

1052
00:46:14,160 --> 00:46:18,879
detection mechanism is

1053
00:46:15,839 --> 00:46:19,279
sensitive to performance on the positive

1054
00:46:18,880 --> 00:46:22,800
class

1055
00:46:19,280 --> 00:46:26,480
as opposed to negative class aucpr is

1056
00:46:22,800 --> 00:46:29,040
a good metric for anomaly detection

1057
00:46:26,480 --> 00:46:31,599
so we can see that for reconnaissance

1058
00:46:29,040 --> 00:46:34,720
the aucroc is

1059
00:46:31,599 --> 00:46:37,920
detected very well by stack auto encoder

1060
00:46:34,720 --> 00:46:39,759
on all data sets uh the stack

1061
00:46:37,920 --> 00:46:45,680
autoencoder lstm

1062
00:46:39,760 --> 00:46:45,680
does well on the cic ids 2017

1063
00:46:46,400 --> 00:46:52,000
compared to other data sets but it's not

1064
00:46:49,040 --> 00:46:55,680
a regular pattern

1065
00:46:52,000 --> 00:46:56,000
the aucpr values were consistently low

1066
00:46:55,680 --> 00:46:59,680
on

1067
00:46:56,000 --> 00:47:02,400
all data set in the

1068
00:46:59,680 --> 00:47:03,680
foothold establishment phase stack auto

1069
00:47:02,400 --> 00:47:06,720
encoder showed

1070
00:47:03,680 --> 00:47:08,560
better performance compared to other ai

1071
00:47:06,720 --> 00:47:11,680
models

1072
00:47:08,560 --> 00:47:16,480
particularly in case of dapt 2020

1073
00:47:11,680 --> 00:47:16,480
where the value was 0.846

1074
00:47:16,880 --> 00:47:22,480
for the foothold establishment auc

1075
00:47:20,000 --> 00:47:22,480
roc

1076
00:47:23,359 --> 00:47:30,000
in case of lateral movement

1077
00:47:26,720 --> 00:47:30,000
and data exfiltration

1078
00:47:31,040 --> 00:47:39,040
the or ai models are

1079
00:47:34,240 --> 00:47:41,680
consistently performed up badly

1080
00:47:39,040 --> 00:47:43,680
so they achieved low value for all

1081
00:47:41,680 --> 00:47:45,598
unsupervised learning algorithms

1082
00:47:43,680 --> 00:47:47,839
and it shows that attack factors

1083
00:47:45,599 --> 00:47:51,040
employed

1084
00:47:47,839 --> 00:47:52,078
in our data sets were highly stealthy

1085
00:47:51,040 --> 00:47:54,400
and the

1086
00:47:52,079 --> 00:47:57,040
ai models were not able to detect them

1087
00:47:54,400 --> 00:47:57,040
accurately

1088
00:47:57,839 --> 00:48:01,359
so in conclusion the reliable detection

1089
00:48:00,240 --> 00:48:05,040
of apt attacks

1090
00:48:01,359 --> 00:48:08,160
is a very challenging task so we

1091
00:48:05,040 --> 00:48:11,839
did our best to generate a data set

1092
00:48:08,160 --> 00:48:13,200
dapd 2020 which covers all the phases of

1093
00:48:11,839 --> 00:48:16,480
an apt attack

1094
00:48:13,200 --> 00:48:18,720
we showed using state-of-the-art

1095
00:48:16,480 --> 00:48:22,880
semi-supervised machine learning models

1096
00:48:18,720 --> 00:48:26,078
that these attacks are very stealthy and

1097
00:48:22,880 --> 00:48:27,440
these models do not show a consistent

1098
00:48:26,079 --> 00:48:29,599
detection

1099
00:48:27,440 --> 00:48:31,520
of all phases of apt attack on these

1100
00:48:29,599 --> 00:48:34,400
data sets

1101
00:48:31,520 --> 00:48:35,040
so we need to develop some better ai

1102
00:48:34,400 --> 00:48:38,160
models

1103
00:48:35,040 --> 00:48:40,000
for apt detection so if you

1104
00:48:38,160 --> 00:48:41,279
want to have a look at the data set it

1105
00:48:40,000 --> 00:48:44,880
is hosted at

1106
00:48:41,280 --> 00:48:48,240
this location and with that

1107
00:48:44,880 --> 00:48:51,359
i will conclude my talk and uh

1108
00:48:48,240 --> 00:49:03,839
i can answer any questions

1109
00:48:51,359 --> 00:49:03,839
thank you

1110
00:49:12,800 --> 00:49:14,880
you

