1
00:00:00,000 --> 00:00:02,720
i welcome all of like 40 of you welcome

2
00:00:02,720 --> 00:00:04,080
for actually thank you for actually

3
00:00:04,080 --> 00:00:06,720
showing up this is reverse engineering

4
00:00:06,720 --> 00:00:09,519
dll files okay just a show of hands who

5
00:00:09,519 --> 00:00:11,920
actually knows what a dll file is or

6
00:00:11,920 --> 00:00:13,679
they've probably seen it

7
00:00:13,679 --> 00:00:15,120
yeah

8
00:00:15,120 --> 00:00:17,119
so they always tell you like don't touch

9
00:00:17,119 --> 00:00:18,560
those don't delete them it's going to

10
00:00:18,560 --> 00:00:20,720
screw everything up don't go to system

11
00:00:20,720 --> 00:00:23,359
32 and just start deleting

12
00:00:23,359 --> 00:00:26,000
but it's okay

13
00:00:27,680 --> 00:00:29,679
this is what we're going to cover

14
00:00:29,679 --> 00:00:32,558
we're going to do a history of dlls and

15
00:00:32,558 --> 00:00:35,200
what they are how do they work and then

16
00:00:35,200 --> 00:00:36,239
all the little

17
00:00:36,239 --> 00:00:38,320
intricacies of it before we finally dive

18
00:00:38,320 --> 00:00:40,000
into reversing the reason why we're

19
00:00:40,000 --> 00:00:41,440
doing this is because you can't just

20
00:00:41,440 --> 00:00:43,360
jump right in you really have to know

21
00:00:43,360 --> 00:00:44,960
what it is and how it works before we

22
00:00:44,960 --> 00:00:46,559
can reverse it this is true of just

23
00:00:46,559 --> 00:00:48,559
about anything you don't just like start

24
00:00:48,559 --> 00:00:50,079
pulling apart your car if you don't know

25
00:00:50,079 --> 00:00:53,039
how to put it back together

26
00:00:54,000 --> 00:00:55,280
all right these are the tools we're

27
00:00:55,280 --> 00:00:57,120
going to be using ida pro

28
00:00:57,120 --> 00:01:00,719
cff exploder the pels c compiler

29
00:01:00,719 --> 00:01:04,559
x64 dbg ghidra and process hacker all of

30
00:01:04,559 --> 00:01:07,040
these tools are free with the exception

31
00:01:07,040 --> 00:01:09,360
of ida but that's that's still free sort

32
00:01:09,360 --> 00:01:11,520
of

33
00:01:11,680 --> 00:01:12,960
all right

34
00:01:12,960 --> 00:01:16,400
first off what the hell is a dll all

35
00:01:16,400 --> 00:01:18,400
right way back in the day i'm like

36
00:01:18,400 --> 00:01:20,799
turkey i'm talking like way back in dos

37
00:01:20,799 --> 00:01:21,680
days

38
00:01:21,680 --> 00:01:23,600
this is a time when uh there were com

39
00:01:23,600 --> 00:01:25,360
files these little tiny files they were

40
00:01:25,360 --> 00:01:29,600
limited to about 60 64 kilobytes of data

41
00:01:29,600 --> 00:01:31,520
you really did not have much space to

42
00:01:31,520 --> 00:01:33,680
work with i remember there was these old

43
00:01:33,680 --> 00:01:36,159
books right and um if you wanted any

44
00:01:36,159 --> 00:01:37,600
code it all had to be statically

45
00:01:37,600 --> 00:01:40,240
compiled in it would be like a floppy

46
00:01:40,240 --> 00:01:42,479
disk drive it'll have like a

47
00:01:42,479 --> 00:01:45,200
zip program inside and what you would do

48
00:01:45,200 --> 00:01:47,040
is you would you would copy and paste

49
00:01:47,040 --> 00:01:49,360
the uh the zip code and then you would

50
00:01:49,360 --> 00:01:50,960
just work with that

51
00:01:50,960 --> 00:01:53,600
size was limited space was limited like

52
00:01:53,600 --> 00:01:55,840
i said 64 kilobytes isn't much to work

53
00:01:55,840 --> 00:01:56,799
with

54
00:01:56,799 --> 00:01:58,399
and um

55
00:01:58,399 --> 00:02:00,560
you just kind of rolled with that it it

56
00:02:00,560 --> 00:02:03,119
was really the dark ages

57
00:02:03,119 --> 00:02:04,320
so

58
00:02:04,320 --> 00:02:06,880
enter dynamic linking i mean the same

59
00:02:06,880 --> 00:02:09,758
thing with linux and unix kind of showed

60
00:02:09,758 --> 00:02:12,000
up around the same time but it changed

61
00:02:12,000 --> 00:02:14,000
everything what we could do is we could

62
00:02:14,000 --> 00:02:15,840
take rather than statically linking

63
00:02:15,840 --> 00:02:18,239
everything together we could actually br

64
00:02:18,239 --> 00:02:20,560
we could break up the entire process you

65
00:02:20,560 --> 00:02:22,720
know i don't have to have one program

66
00:02:22,720 --> 00:02:24,560
responsible for doing zip files or

67
00:02:24,560 --> 00:02:25,840
opening like

68
00:02:25,840 --> 00:02:27,440
special database files or whatever i

69
00:02:27,440 --> 00:02:29,360
could break everything up so that way i

70
00:02:29,360 --> 00:02:31,200
could focus on just my program and let

71
00:02:31,200 --> 00:02:33,040
someone else do whatever

72
00:02:33,040 --> 00:02:35,280
so this allowed you know programs to be

73
00:02:35,280 --> 00:02:37,519
bigger and more complex so this is

74
00:02:37,519 --> 00:02:39,440
pretty much how windows did it way back

75
00:02:39,440 --> 00:02:41,920
in the day

76
00:02:42,640 --> 00:02:44,239
well let me go back i want to talk about

77
00:02:44,239 --> 00:02:46,400
that a little more so way way back in

78
00:02:46,400 --> 00:02:48,879
the day so like windows 3.1 and version

79
00:02:48,879 --> 00:02:50,959
one they had this thing it was called

80
00:02:50,959 --> 00:02:53,519
gdi that's like the graphic desktop

81
00:02:53,519 --> 00:02:56,959
interface and user.dll so user so these

82
00:02:56,959 --> 00:02:58,319
they're all executables so they were

83
00:02:58,319 --> 00:03:00,879
basically like dynamically put together

84
00:03:00,879 --> 00:03:02,959
the only way microsoft had figured out

85
00:03:02,959 --> 00:03:04,560
all right how to like

86
00:03:04,560 --> 00:03:06,159
layer stuff in such a way that they

87
00:03:06,159 --> 00:03:08,800
could like have a g have a gooey it's

88
00:03:08,800 --> 00:03:10,239
like there's no way it would all fit on

89
00:03:10,239 --> 00:03:12,000
one executable they had to break it up

90
00:03:12,000 --> 00:03:14,879
and this is how they did it

91
00:03:15,120 --> 00:03:16,080
all right

92
00:03:16,080 --> 00:03:19,280
how do dlls run and load code

93
00:03:19,280 --> 00:03:21,040
well a program

94
00:03:21,040 --> 00:03:24,159
is written and compiled as a dll file as

95
00:03:24,159 --> 00:03:25,920
a compiler flag

96
00:03:25,920 --> 00:03:28,319
see functions are set to what's called

97
00:03:28,319 --> 00:03:29,760
exportable

98
00:03:29,760 --> 00:03:30,799
so

99
00:03:30,799 --> 00:03:32,640
that's kind of like how a program breaks

100
00:03:32,640 --> 00:03:34,959
it up you can't um

101
00:03:34,959 --> 00:03:37,599
you'll have a function say zip or

102
00:03:37,599 --> 00:03:39,280
encrypt or something like that and what

103
00:03:39,280 --> 00:03:40,560
they'll do is they'll take this

104
00:03:40,560 --> 00:03:42,720
particular function and they'll break it

105
00:03:42,720 --> 00:03:45,200
up and they'll set it as exportable they

106
00:03:45,200 --> 00:03:47,200
do that in order for other programs to

107
00:03:47,200 --> 00:03:48,400
be able to call that particular

108
00:03:48,400 --> 00:03:50,720
functionality

109
00:03:50,720 --> 00:03:52,560
okay program b

110
00:03:52,560 --> 00:03:55,040
i basically just said that but you call

111
00:03:55,040 --> 00:03:57,280
a number of win32 apis

112
00:03:57,280 --> 00:04:00,239
like load library all that does it as it

113
00:04:00,239 --> 00:04:02,400
says it loads a particular library we

114
00:04:02,400 --> 00:04:04,799
call a function called get proc address

115
00:04:04,799 --> 00:04:06,400
what that does is it

116
00:04:06,400 --> 00:04:08,879
takes the proc it takes basically like a

117
00:04:08,879 --> 00:04:12,000
the name or an ordinal of a uh

118
00:04:12,000 --> 00:04:14,159
of like a function you know like say i

119
00:04:14,159 --> 00:04:16,478
have kernel 32 and i want to i don't

120
00:04:16,478 --> 00:04:18,639
know zip a file i know i keep calling

121
00:04:18,639 --> 00:04:21,120
zip but zip changed everything you know

122
00:04:21,120 --> 00:04:23,440
compression back in the day was crappy

123
00:04:23,440 --> 00:04:25,280
they had this thing it's called hoffman

124
00:04:25,280 --> 00:04:27,040
compression anyway i have any idea what

125
00:04:27,040 --> 00:04:28,560
the hell that is it was more like

126
00:04:28,560 --> 00:04:31,120
encoding you know you'd have like

127
00:04:31,120 --> 00:04:33,759
say a text file and it would look for

128
00:04:33,759 --> 00:04:37,199
like characters um in repetition it

129
00:04:37,199 --> 00:04:38,240
would ins

130
00:04:38,240 --> 00:04:41,360
and said you'd instead of having like

131
00:04:41,360 --> 00:04:45,199
a a it'd be like 2a it was really crappy

132
00:04:45,199 --> 00:04:46,960
so someone who came along and said let's

133
00:04:46,960 --> 00:04:50,560
zip it just changed everything anyway

134
00:04:50,560 --> 00:04:52,160
going back to load library get proc

135
00:04:52,160 --> 00:04:54,400
address so git proc address just allows

136
00:04:54,400 --> 00:04:57,680
us to pick the particular name of a dll

137
00:04:57,680 --> 00:04:59,520
exported entry

138
00:04:59,520 --> 00:05:03,120
so function b program b will create the

139
00:05:03,120 --> 00:05:04,880
function prototype and call said

140
00:05:04,880 --> 00:05:05,840
function

141
00:05:05,840 --> 00:05:07,199
there are a ton of different ways to

142
00:05:07,199 --> 00:05:09,280
load dll code but the traditional way to

143
00:05:09,280 --> 00:05:11,759
do it is via the instantiation of

144
00:05:11,759 --> 00:05:14,560
another program

145
00:05:14,880 --> 00:05:16,560
dll events

146
00:05:16,560 --> 00:05:18,160
okay so

147
00:05:18,160 --> 00:05:20,479
a dll is like a c program or any other

148
00:05:20,479 --> 00:05:22,400
program it'll have what's called a main

149
00:05:22,400 --> 00:05:23,520
function

150
00:05:23,520 --> 00:05:25,280
so the main function is like the first

151
00:05:25,280 --> 00:05:26,880
thing that gets called initially when

152
00:05:26,880 --> 00:05:28,320
you first load it

153
00:05:28,320 --> 00:05:30,160
the difference between a dll file and a

154
00:05:30,160 --> 00:05:32,639
normal executable file is the code

155
00:05:32,639 --> 00:05:34,479
inside the main is optional there

156
00:05:34,479 --> 00:05:36,400
doesn't have to be anything

157
00:05:36,400 --> 00:05:37,360
so

158
00:05:37,360 --> 00:05:38,800
i thought that was pretty cool it's like

159
00:05:38,800 --> 00:05:41,280
yeah what is your code dude nothing

160
00:05:41,280 --> 00:05:43,120
but

161
00:05:43,120 --> 00:05:45,280
okay so there's these events

162
00:05:45,280 --> 00:05:47,759
right so an event so you can have like

163
00:05:47,759 --> 00:05:49,360
events when you first fire off an

164
00:05:49,360 --> 00:05:51,280
executable like the events won't

165
00:05:51,280 --> 00:05:53,919
actually fire until you instantiate the

166
00:05:53,919 --> 00:05:55,840
dll file so there'll be like different

167
00:05:55,840 --> 00:05:58,240
kinds of events

168
00:05:58,240 --> 00:06:00,240
okay these are the events

169
00:06:00,240 --> 00:06:02,160
the uh event one is

170
00:06:02,160 --> 00:06:04,400
process attach so when you call like

171
00:06:04,400 --> 00:06:06,479
load library this is the code that gets

172
00:06:06,479 --> 00:06:09,199
executed first thread attach happens

173
00:06:09,199 --> 00:06:11,759
whenever you instantiate a new thread

174
00:06:11,759 --> 00:06:14,800
dll dll thread detach same thing but

175
00:06:14,800 --> 00:06:16,479
when the thread is destroyed and

176
00:06:16,479 --> 00:06:18,160
processed attached whenever the code is

177
00:06:18,160 --> 00:06:20,639
done

178
00:06:20,639 --> 00:06:22,240
so i found

179
00:06:22,240 --> 00:06:24,000
i know it's kind of like blurring off of

180
00:06:24,000 --> 00:06:25,919
here but it's uh it says bug at the

181
00:06:25,919 --> 00:06:28,240
bottom i found that the process attach

182
00:06:28,240 --> 00:06:30,800
event goes off several times once load

183
00:06:30,800 --> 00:06:32,479
library is done i think it's like a bug

184
00:06:32,479 --> 00:06:34,319
or a thread thing right on microsoft

185
00:06:34,319 --> 00:06:36,639
never fixed it

186
00:06:36,639 --> 00:06:37,680
okay

187
00:06:37,680 --> 00:06:39,759
so this is what the code looks like i

188
00:06:39,759 --> 00:06:41,120
don't know if it's kind of hard i tried

189
00:06:41,120 --> 00:06:42,639
to blow it up as much as i possibly

190
00:06:42,639 --> 00:06:43,440
could

191
00:06:43,440 --> 00:06:44,880
without it making it look too much like

192
00:06:44,880 --> 00:06:47,680
crap all right process attach

193
00:06:47,680 --> 00:06:50,240
when i first instantiate the dll file

194
00:06:50,240 --> 00:06:51,360
this is the first thing that's going to

195
00:06:51,360 --> 00:06:53,520
go off because once i call load library

196
00:06:53,520 --> 00:06:54,960
that goes off

197
00:06:54,960 --> 00:06:57,440
when i'm done when i call free library

198
00:06:57,440 --> 00:06:59,520
the second part is going to go off then

199
00:06:59,520 --> 00:07:01,120
the last part here is my exported

200
00:07:01,120 --> 00:07:04,560
function i called it joefunk

201
00:07:05,199 --> 00:07:07,440
oh

202
00:07:07,680 --> 00:07:08,720
okay

203
00:07:08,720 --> 00:07:10,240
imports

204
00:07:10,240 --> 00:07:12,240
this is where it gets really complicated

205
00:07:12,240 --> 00:07:14,560
and i try to not make it as complicated

206
00:07:14,560 --> 00:07:15,919
but it's

207
00:07:15,919 --> 00:07:17,599
essentially part of the windows

208
00:07:17,599 --> 00:07:19,840
operating system so the concept of

209
00:07:19,840 --> 00:07:22,319
statically so the concept of dynamically

210
00:07:22,319 --> 00:07:24,560
linking things goes back to uh the

211
00:07:24,560 --> 00:07:28,240
import exports the import export

212
00:07:28,240 --> 00:07:29,440
process

213
00:07:29,440 --> 00:07:31,840
so you'll have a program right and you

214
00:07:31,840 --> 00:07:33,680
can't j it's uh

215
00:07:33,680 --> 00:07:35,280
you don't really want to like statically

216
00:07:35,280 --> 00:07:36,880
compile everything in

217
00:07:36,880 --> 00:07:39,120
so you'll take and par you'll take

218
00:07:39,120 --> 00:07:41,680
certain functions that you want

219
00:07:41,680 --> 00:07:44,319
and you'll import them so in this

220
00:07:44,319 --> 00:07:46,319
particular so like in this particular

221
00:07:46,319 --> 00:07:47,919
case um

222
00:07:47,919 --> 00:07:49,840
i don't want to statically compile in

223
00:07:49,840 --> 00:07:52,800
everything from win inet so i just want

224
00:07:52,800 --> 00:07:54,960
internet close handle internet read file

225
00:07:54,960 --> 00:07:56,080
etc

226
00:07:56,080 --> 00:07:58,000
so it's just like the imports are just

227
00:07:58,000 --> 00:07:59,759
like a table of all the functions you

228
00:07:59,759 --> 00:08:01,199
want

229
00:08:01,199 --> 00:08:03,199
and typically the imports will be uh and

230
00:08:03,199 --> 00:08:05,039
imports can be either in an executable

231
00:08:05,039 --> 00:08:07,120
or a dll files rather than statically

232
00:08:07,120 --> 00:08:08,479
linking everything in which will make

233
00:08:08,479 --> 00:08:10,879
this really big massive file programs

234
00:08:10,879 --> 00:08:14,319
make use of imports

235
00:08:14,319 --> 00:08:16,639
all right exports these are the most

236
00:08:16,639 --> 00:08:18,080
these are the most

237
00:08:18,080 --> 00:08:21,360
useful ones so a dll file can optionally

238
00:08:21,360 --> 00:08:24,000
but usually have an export that is if

239
00:08:24,000 --> 00:08:24,879
you want

240
00:08:24,879 --> 00:08:26,479
actual code for other programs to

241
00:08:26,479 --> 00:08:28,080
actually utilize

242
00:08:28,080 --> 00:08:30,000
you you have an export

243
00:08:30,000 --> 00:08:33,599
so programs will use said dll files

244
00:08:33,599 --> 00:08:35,599
and

245
00:08:35,599 --> 00:08:37,279
sorry let me start again programs that

246
00:08:37,279 --> 00:08:40,000
use dll files are mostly interested in

247
00:08:40,000 --> 00:08:42,479
not the events section but rather the

248
00:08:42,479 --> 00:08:45,360
code that's exported for example here we

249
00:08:45,360 --> 00:08:49,200
see crc32 the cyclic cyclic redundancy

250
00:08:49,200 --> 00:08:52,080
check i have not used that in so long

251
00:08:52,080 --> 00:08:53,040
but

252
00:08:53,040 --> 00:08:55,440
it's exported from a particular dll file

253
00:08:55,440 --> 00:09:00,000
called lib mupf lib mupdf

254
00:09:00,000 --> 00:09:01,839
and we see the appropriate file it's

255
00:09:01,839 --> 00:09:03,200
associated with

256
00:09:03,200 --> 00:09:05,680
so like i said functions right here

257
00:09:05,680 --> 00:09:07,920
they're either called by name or by

258
00:09:07,920 --> 00:09:10,320
ordinal

259
00:09:10,320 --> 00:09:11,920
okay

260
00:09:11,920 --> 00:09:13,440
ordinals

261
00:09:13,440 --> 00:09:15,680
so sometimes if you ever open up a

262
00:09:15,680 --> 00:09:17,040
program here you'll be like what the

263
00:09:17,040 --> 00:09:18,240
 is this

264
00:09:18,240 --> 00:09:19,279
it's like

265
00:09:19,279 --> 00:09:21,360
you don't see the name you just see a

266
00:09:21,360 --> 00:09:22,880
number

267
00:09:22,880 --> 00:09:23,920
so

268
00:09:23,920 --> 00:09:26,000
git proc address it doesn't care i mean

269
00:09:26,000 --> 00:09:28,000
when you load library and stanchionate

270
00:09:28,000 --> 00:09:29,519
instantiate a program you can pass

271
00:09:29,519 --> 00:09:30,959
what's called like an ordinal which is

272
00:09:30,959 --> 00:09:33,360
just a number it's a 32-bit number and

273
00:09:33,360 --> 00:09:35,360
it's representative of a function it's

274
00:09:35,360 --> 00:09:36,399
confusing

275
00:09:36,399 --> 00:09:38,320
it's kind of a form of obfuscation but

276
00:09:38,320 --> 00:09:40,160
not really

277
00:09:40,160 --> 00:09:41,360
okay

278
00:09:41,360 --> 00:09:44,000
like i said it's more of a reference to

279
00:09:44,000 --> 00:09:45,839
a it's more of a reference than an

280
00:09:45,839 --> 00:09:47,839
actual function name

281
00:09:47,839 --> 00:09:51,040
and as i said um it's all a 32-bit

282
00:09:51,040 --> 00:09:53,440
number in this particular example

283
00:09:53,440 --> 00:09:55,600
we'll see didn't i have that here oh

284
00:09:55,600 --> 00:09:59,120
yeah we'll see um windsock

285
00:09:59,120 --> 00:10:01,839
with no names instead of numbers

286
00:10:01,839 --> 00:10:03,600
and you'll see

287
00:10:03,600 --> 00:10:05,120
numbers instead of names and you're like

288
00:10:05,120 --> 00:10:07,680
what the

289
00:10:07,760 --> 00:10:08,800
but

290
00:10:08,800 --> 00:10:10,880
the exports you can actually look them

291
00:10:10,880 --> 00:10:11,920
up

292
00:10:11,920 --> 00:10:13,600
if you actually oh if you were to

293
00:10:13,600 --> 00:10:16,000
actually open winsock32

294
00:10:16,000 --> 00:10:18,880
and follow along you can actually see

295
00:10:18,880 --> 00:10:20,560
the different names associated with the

296
00:10:20,560 --> 00:10:22,959
numbers

297
00:10:23,760 --> 00:10:27,440
so in this particular case you can see

298
00:10:27,440 --> 00:10:30,800
hint 36

299
00:10:31,040 --> 00:10:34,079
and where the do they go

300
00:10:34,079 --> 00:10:35,920
yeah

301
00:10:35,920 --> 00:10:36,959
my bad

302
00:10:36,959 --> 00:10:37,920
okay

303
00:10:37,920 --> 00:10:40,160
sometimes i'm sorry to skip over that

304
00:10:40,160 --> 00:10:42,720
but basically it's like it's just a name

305
00:10:42,720 --> 00:10:44,720
instead of having a name you have a

306
00:10:44,720 --> 00:10:47,200
number and it's easy to bypass because

307
00:10:47,200 --> 00:10:49,360
you can just look it up

308
00:10:49,360 --> 00:10:50,320
okay

309
00:10:50,320 --> 00:10:52,640
sometimes once a while you look at a dll

310
00:10:52,640 --> 00:10:55,279
file and you see something like this

311
00:10:55,279 --> 00:10:57,760
okay what this means is sometimes you

312
00:10:57,760 --> 00:10:59,360
know there's lots of different dlls that

313
00:10:59,360 --> 00:11:01,440
have been added over the years this is

314
00:11:01,440 --> 00:11:02,240
uh

315
00:11:02,240 --> 00:11:04,240
microsoft invented this thing called com

316
00:11:04,240 --> 00:11:07,519
files com files are a d are just a

317
00:11:07,519 --> 00:11:09,360
entire

318
00:11:09,360 --> 00:11:10,480
and

319
00:11:10,480 --> 00:11:12,959
just total madness you know in the

320
00:11:12,959 --> 00:11:14,480
heydays you know when they thought we're

321
00:11:14,480 --> 00:11:16,240
going to use internet explorer for

322
00:11:16,240 --> 00:11:17,839
everything we're going to use activex

323
00:11:17,839 --> 00:11:19,040
for everything

324
00:11:19,040 --> 00:11:20,399
this is they said we're going to use

325
00:11:20,399 --> 00:11:22,800
this we're going to like use

326
00:11:22,800 --> 00:11:24,640
objects and names and references it

327
00:11:24,640 --> 00:11:26,399
didn't make any sense but they're still

328
00:11:26,399 --> 00:11:28,079
around today and you'll still encounter

329
00:11:28,079 --> 00:11:29,920
them all the time but if you see these

330
00:11:29,920 --> 00:11:32,320
exported functions just run away

331
00:11:32,320 --> 00:11:34,000
screaming but this is what the this is

332
00:11:34,000 --> 00:11:35,519
you'll see these three are these four

333
00:11:35,519 --> 00:11:37,760
instantiations

334
00:11:37,760 --> 00:11:40,800
so as i said o l e com not to be

335
00:11:40,800 --> 00:11:43,440
confused with dos com files ole stands

336
00:11:43,440 --> 00:11:45,760
for object linking and embedding

337
00:11:45,760 --> 00:11:48,079
and com stands for component object

338
00:11:48,079 --> 00:11:50,959
model like i said active s madness i

339
00:11:50,959 --> 00:11:52,959
ain't touching this rabbit hole

340
00:11:52,959 --> 00:11:54,639
if you're interested and you're crazy

341
00:11:54,639 --> 00:11:56,560
you can actually download a tool it

342
00:11:56,560 --> 00:11:58,240
comes with microsoft it'll tell you all

343
00:11:58,240 --> 00:11:59,680
the craziness about all the little

344
00:11:59,680 --> 00:12:02,079
functions and how to i'll call it

345
00:12:02,079 --> 00:12:03,760
we've been trying to get away from this

346
00:12:03,760 --> 00:12:05,760
microsoft invented.net you know to try

347
00:12:05,760 --> 00:12:07,760
and step away from this but it's still

348
00:12:07,760 --> 00:12:09,200
there once it's there it's never going

349
00:12:09,200 --> 00:12:11,200
to go away

350
00:12:11,200 --> 00:12:13,519
it's like a feature you know something

351
00:12:13,519 --> 00:12:15,760
gets built in like uh

352
00:12:15,760 --> 00:12:17,680
an example would be i don't know like

353
00:12:17,680 --> 00:12:19,839
some some guy at the airport 20 years

354
00:12:19,839 --> 00:12:21,760
ago from now actually um

355
00:12:21,760 --> 00:12:23,680
he tried to light his shoes on fire

356
00:12:23,680 --> 00:12:25,120
right and to this day i still have to

357
00:12:25,120 --> 00:12:27,040
take my shoes off at the airport it's

358
00:12:27,040 --> 00:12:30,959
embedded in now we can't get rid of it

359
00:12:31,760 --> 00:12:32,639
okay

360
00:12:32,639 --> 00:12:34,720
calling our dll code

361
00:12:34,720 --> 00:12:36,480
okay like i said there's many many

362
00:12:36,480 --> 00:12:38,639
different ways to call our dll code and

363
00:12:38,639 --> 00:12:40,079
when i say many i'll get into those

364
00:12:40,079 --> 00:12:41,920
later but like i said the traditional

365
00:12:41,920 --> 00:12:44,240
way is with git proc address and load

366
00:12:44,240 --> 00:12:46,399
library there's also this thing called

367
00:12:46,399 --> 00:12:48,800
run dll 32 which i'm sure you heard of

368
00:12:48,800 --> 00:12:49,680
maybe

369
00:12:49,680 --> 00:12:50,839
i don't

370
00:12:50,839 --> 00:12:52,480
know

371
00:12:52,480 --> 00:12:55,200
but as you can see our c code i also

372
00:12:55,200 --> 00:12:57,600
include a c sharp code because i like c

373
00:12:57,600 --> 00:13:00,240
sharp but you can see right here load

374
00:13:00,240 --> 00:13:03,120
load library with our library name

375
00:13:03,120 --> 00:13:05,279
checking to see if it worked

376
00:13:05,279 --> 00:13:06,720
our function name

377
00:13:06,720 --> 00:13:09,040
git proc address our export name and we

378
00:13:09,040 --> 00:13:10,639
call it

379
00:13:10,639 --> 00:13:13,040
so in a traditional program it'll fail

380
00:13:13,040 --> 00:13:14,959
it'll up if you don't know the

381
00:13:14,959 --> 00:13:16,000
actually

382
00:13:16,000 --> 00:13:17,680
if you don't know the arguments that get

383
00:13:17,680 --> 00:13:18,880
passed to it

384
00:13:18,880 --> 00:13:20,639
then it'll up it'll give you some

385
00:13:20,639 --> 00:13:22,959
some compiler error dll files are a

386
00:13:22,959 --> 00:13:24,160
little bit different

387
00:13:24,160 --> 00:13:26,079
it's all blind you have to know what

388
00:13:26,079 --> 00:13:27,839
goes in and what comes out

389
00:13:27,839 --> 00:13:30,320
so it's a little more unforgiving

390
00:13:30,320 --> 00:13:32,160
but this makes it ideal for reverse

391
00:13:32,160 --> 00:13:34,399
engineering because we can blindly throw

392
00:13:34,399 --> 00:13:38,240
our data at it and see what comes back

393
00:13:38,240 --> 00:13:41,279
okay run dll32 what

394
00:13:41,279 --> 00:13:43,839
okay so run dll32 is what's used for

395
00:13:43,839 --> 00:13:45,600
calling and running exported dll

396
00:13:45,600 --> 00:13:46,800
functions without writing our little

397
00:13:46,800 --> 00:13:48,560
wrapper program

398
00:13:48,560 --> 00:13:50,959
so when i say wrapper program i mean

399
00:13:50,959 --> 00:13:52,399
something like this

400
00:13:52,399 --> 00:13:54,800
so if we're too lazy to write this we'll

401
00:13:54,800 --> 00:13:56,959
we'll use run dll32

402
00:13:56,959 --> 00:13:59,519
so the syntax is just basically run

403
00:13:59,519 --> 00:14:02,320
dll32 the the name of the library the

404
00:14:02,320 --> 00:14:03,920
function the function arg it's not

405
00:14:03,920 --> 00:14:05,680
really particularly hard you'll see it

406
00:14:05,680 --> 00:14:08,160
used by installers

407
00:14:08,160 --> 00:14:11,600
malware all sorts of things

408
00:14:11,600 --> 00:14:13,040
okay

409
00:14:13,040 --> 00:14:14,639
dll

410
00:14:14,639 --> 00:14:17,680
so run dll32 as an execution order like

411
00:14:17,680 --> 00:14:19,920
i said when you instantiate it it'll

412
00:14:19,920 --> 00:14:21,600
first run the code that's in the process

413
00:14:21,600 --> 00:14:23,040
attached event

414
00:14:23,040 --> 00:14:25,680
then any particular exported stuff

415
00:14:25,680 --> 00:14:27,040
and then the

416
00:14:27,040 --> 00:14:29,040
detach process events

417
00:14:29,040 --> 00:14:31,040
and since threads aren't used then

418
00:14:31,040 --> 00:14:33,920
you're not going to see that

419
00:14:34,000 --> 00:14:37,120
okay so this is an example of a program

420
00:14:37,120 --> 00:14:39,040
a dll program

421
00:14:39,040 --> 00:14:41,120
run dll will run this first

422
00:14:41,120 --> 00:14:43,120
then second if there's anything in there

423
00:14:43,120 --> 00:14:44,800
and then and then the last one this so i

424
00:14:44,800 --> 00:14:48,639
just have a quick example run dll32

425
00:14:48,639 --> 00:14:50,639
it'll run execute this first the next

426
00:14:50,639 --> 00:14:52,720
window will say second the last one

427
00:14:52,720 --> 00:14:54,160
yeah

428
00:14:54,160 --> 00:14:56,480
okay

429
00:14:56,480 --> 00:14:58,639
i know we are anonymous you remember

430
00:14:58,639 --> 00:14:59,600
that

431
00:14:59,600 --> 00:15:01,519
yeah

432
00:15:01,519 --> 00:15:04,560
okay so dll files when you've they have

433
00:15:04,560 --> 00:15:07,279
what's called a search order so a dll

434
00:15:07,279 --> 00:15:09,360
file will not particularly just

435
00:15:09,360 --> 00:15:12,639
a dll file will um it'll run things from

436
00:15:12,639 --> 00:15:14,639
certain locations

437
00:15:14,639 --> 00:15:16,560
it can be exploited

438
00:15:16,560 --> 00:15:17,360
but

439
00:15:17,360 --> 00:15:20,079
ideally they run from a partic they run

440
00:15:20,079 --> 00:15:22,399
in a particular order so if you drop a

441
00:15:22,399 --> 00:15:25,279
dll file into the uh into the directory

442
00:15:25,279 --> 00:15:27,440
most likely most likely it'll run it but

443
00:15:27,440 --> 00:15:28,720
sometimes not

444
00:15:28,720 --> 00:15:31,199
but it has a particular order

445
00:15:31,199 --> 00:15:33,360
first one is if it's already loaded into

446
00:15:33,360 --> 00:15:34,800
memory then it's just going to load from

447
00:15:34,800 --> 00:15:37,440
there because why why wouldn't it

448
00:15:37,440 --> 00:15:39,040
next it'll read from something from

449
00:15:39,040 --> 00:15:41,120
what's called a manifest file

450
00:15:41,120 --> 00:15:42,720
then there'll be what's called the known

451
00:15:42,720 --> 00:15:45,440
dlls directory then the launch folder

452
00:15:45,440 --> 00:15:47,360
the current folder the system folder and

453
00:15:47,360 --> 00:15:48,800
then finally the path

454
00:15:48,800 --> 00:15:51,199
path you know throw to throw back hey

455
00:15:51,199 --> 00:15:53,199
day trying for trying to do that

456
00:15:53,199 --> 00:15:56,399
compatibility you know with like

457
00:15:56,399 --> 00:15:59,440
unix system posix whatever but that gets

458
00:15:59,440 --> 00:16:01,600
executed last

459
00:16:01,600 --> 00:16:04,000
okay known dlls

460
00:16:04,000 --> 00:16:06,399
a known d so known dlls it's a

461
00:16:06,399 --> 00:16:08,320
particularly so people have been trying

462
00:16:08,320 --> 00:16:11,279
to exploit this whole thing for a while

463
00:16:11,279 --> 00:16:13,199
and uh microsoft came with this idea all

464
00:16:13,199 --> 00:16:15,120
right let's have a list of dll files

465
00:16:15,120 --> 00:16:17,040
that if you try and sideload your

466
00:16:17,040 --> 00:16:18,959
then uh it's not gonna work

467
00:16:18,959 --> 00:16:20,000
so

468
00:16:20,000 --> 00:16:22,399
the known dlls registry key

469
00:16:22,399 --> 00:16:25,440
will contain a list of dll files here

470
00:16:25,440 --> 00:16:28,079
that you cannot sideload

471
00:16:28,079 --> 00:16:30,079
so let's conclude so if you try and like

472
00:16:30,079 --> 00:16:31,920
load your own system if you try and load

473
00:16:31,920 --> 00:16:33,440
your own kernel 32 it's not going to

474
00:16:33,440 --> 00:16:35,600
work if you try and load your your own

475
00:16:35,600 --> 00:16:37,360
user 32 it's not going to work i think

476
00:16:37,360 --> 00:16:40,079
they did it also for like compatibility

477
00:16:40,079 --> 00:16:42,079
also you know back in the day there were

478
00:16:42,079 --> 00:16:43,600
if you if you were to run like windows

479
00:16:43,600 --> 00:16:45,600
95 kernel 32 with

480
00:16:45,600 --> 00:16:47,839
uh with windows 98 kernel 32 would just

481
00:16:47,839 --> 00:16:49,279
 everything up and they're trying to

482
00:16:49,279 --> 00:16:52,880
like say oh let's not do that

483
00:16:52,880 --> 00:16:54,160
okay

484
00:16:54,160 --> 00:16:56,160
there's all so it's like a it's also

485
00:16:56,160 --> 00:16:57,680
like a minor form of security

486
00:16:57,680 --> 00:16:59,759
restriction but well not really not

487
00:16:59,759 --> 00:17:01,680
always

488
00:17:01,680 --> 00:17:03,759
okay again it's hard to read it's like

489
00:17:03,759 --> 00:17:05,599
you have to blow everything up but there

490
00:17:05,599 --> 00:17:07,439
is a list here of all the different dll

491
00:17:07,439 --> 00:17:10,959
files that you cannot sideload normally

492
00:17:10,959 --> 00:17:14,000
so like comm 32 gdi

493
00:17:14,000 --> 00:17:17,199
image help kernel 32 is obviously there

494
00:17:17,199 --> 00:17:19,679
ps api

495
00:17:19,679 --> 00:17:21,359
this is just core functionality within

496
00:17:21,359 --> 00:17:22,959
windows like

497
00:17:22,959 --> 00:17:25,039
windsock here is used for pretty much

498
00:17:25,039 --> 00:17:26,400
sockets

499
00:17:26,400 --> 00:17:28,799
shell 32 for

500
00:17:28,799 --> 00:17:31,120
shell execute windows stuff a bunch of

501
00:17:31,120 --> 00:17:32,559
stuff they don't want you with

502
00:17:32,559 --> 00:17:33,840
it

503
00:17:33,840 --> 00:17:35,039
okay

504
00:17:35,039 --> 00:17:37,440
exploiting the search order

505
00:17:37,440 --> 00:17:39,120
you can actually exploit this and you

506
00:17:39,120 --> 00:17:40,960
can get vulnerability money for it

507
00:17:40,960 --> 00:17:43,520
there's a number of cves out

508
00:17:43,520 --> 00:17:45,200
what you can do is you can if you can

509
00:17:45,200 --> 00:17:46,960
load your own code

510
00:17:46,960 --> 00:17:48,960
um basically you're sidestepping the

511
00:17:48,960 --> 00:17:51,679
entire process you see um if you have

512
00:17:51,679 --> 00:17:54,320
like a program that's signed or you have

513
00:17:54,320 --> 00:17:56,160
a or you have unsigned code you want to

514
00:17:56,160 --> 00:17:57,679
make it signed or something is running

515
00:17:57,679 --> 00:17:59,679
elevated you want to make it elevated

516
00:17:59,679 --> 00:18:02,960
you drop your dll file that you wrote

517
00:18:02,960 --> 00:18:04,880
and the program will actually execute it

518
00:18:04,880 --> 00:18:06,320
on your behalf

519
00:18:06,320 --> 00:18:07,919
since there's a number of dll files

520
00:18:07,919 --> 00:18:10,080
they're not in this particular sorry

521
00:18:10,080 --> 00:18:11,760
since there's a number of dll files that

522
00:18:11,760 --> 00:18:13,520
are not in this particular list but are

523
00:18:13,520 --> 00:18:16,000
still called then we can exploit it

524
00:18:16,000 --> 00:18:18,160
so an example would be like

525
00:18:18,160 --> 00:18:20,720
version a lot of programs will use a dll

526
00:18:20,720 --> 00:18:22,799
called version 32.

527
00:18:22,799 --> 00:18:25,200
a lot of modern programs use this dll

528
00:18:25,200 --> 00:18:27,440
called

529
00:18:27,520 --> 00:18:31,039
vs it's like vc 140 version something or

530
00:18:31,039 --> 00:18:32,880
another it's basically a dll file that

531
00:18:32,880 --> 00:18:35,120
gets included by uh

532
00:18:35,120 --> 00:18:37,520
compilers you know for that backward

533
00:18:37,520 --> 00:18:39,679
functionality but since it's not

534
00:18:39,679 --> 00:18:41,520
actually in here we can drop our own and

535
00:18:41,520 --> 00:18:43,679
we can exploit it

536
00:18:43,679 --> 00:18:45,679
so an example here

537
00:18:45,679 --> 00:18:48,799
i have final fantasy

538
00:18:48,799 --> 00:18:50,720
we have an install here

539
00:18:50,720 --> 00:18:52,880
um you can tell if something's elevated

540
00:18:52,880 --> 00:18:54,880
because it'll have that stupid um it's

541
00:18:54,880 --> 00:18:56,480
kind of hard to see here but it'll have

542
00:18:56,480 --> 00:18:58,880
that little shield next to it

543
00:18:58,880 --> 00:19:00,960
the shield represents like this is an

544
00:19:00,960 --> 00:19:02,400
admin program

545
00:19:02,400 --> 00:19:04,559
if you can sideload an app if you can

546
00:19:04,559 --> 00:19:06,880
sideload an admin only program something

547
00:19:06,880 --> 00:19:09,360
that's elevated now your dll is elevated

548
00:19:09,360 --> 00:19:12,160
so it's a form of privilege escalation

549
00:19:12,160 --> 00:19:14,720
also if you um also there's a bonus if

550
00:19:14,720 --> 00:19:17,360
something is signed and trusted or it'll

551
00:19:17,360 --> 00:19:19,280
also get around smart screen you know

552
00:19:19,280 --> 00:19:21,039
that little thing that pops up the uac

553
00:19:21,039 --> 00:19:22,720
thing says hey

554
00:19:22,720 --> 00:19:24,559
this is a problem this is a problem or i

555
00:19:24,559 --> 00:19:26,320
cannot run this because i don't trust it

556
00:19:26,320 --> 00:19:28,720
you get around that if you sideload a

557
00:19:28,720 --> 00:19:32,000
program that's already like trusted

558
00:19:32,000 --> 00:19:33,120
okay

559
00:19:33,120 --> 00:19:35,440
redirection now i said before about

560
00:19:35,440 --> 00:19:37,679
known dll files and not being able to

561
00:19:37,679 --> 00:19:40,960
load like a like like your own user 32

562
00:19:40,960 --> 00:19:42,720
microsoft came out with this thing

563
00:19:42,720 --> 00:19:45,840
manifest files and basically it's xml

564
00:19:45,840 --> 00:19:48,799
code all the origin so newer executables

565
00:19:48,799 --> 00:19:50,880
will contain this little tiny bit of xml

566
00:19:50,880 --> 00:19:54,240
code and the xml code is responsible for

567
00:19:54,240 --> 00:19:56,320
specifying things like this program

568
00:19:56,320 --> 00:19:58,559
should run as an admin like if you add

569
00:19:58,559 --> 00:20:00,720
the entry for admin then it's magically

570
00:20:00,720 --> 00:20:02,000
the little uh

571
00:20:02,000 --> 00:20:03,919
the little uh uh what's it called the

572
00:20:03,919 --> 00:20:05,520
little shield that's what it's called a

573
00:20:05,520 --> 00:20:07,840
little shield will appear older programs

574
00:20:07,840 --> 00:20:09,760
do not have a manifest file but

575
00:20:09,760 --> 00:20:12,080
microsoft you know it'll uh it doesn't

576
00:20:12,080 --> 00:20:13,679
care about that actually it's funny when

577
00:20:13,679 --> 00:20:16,000
you run an older program

578
00:20:16,000 --> 00:20:18,000
microsoft will automatically add the x

579
00:20:18,000 --> 00:20:20,240
uh will automatically tag the file with

580
00:20:20,240 --> 00:20:21,760
a manifest file

581
00:20:21,760 --> 00:20:23,679
but like it does so internally so it

582
00:20:23,679 --> 00:20:25,679
doesn't actually modify the file but

583
00:20:25,679 --> 00:20:27,360
like it'll memorize like hey this is a

584
00:20:27,360 --> 00:20:29,600
manifest with it

585
00:20:29,600 --> 00:20:31,039
like i said it's a relatively new

586
00:20:31,039 --> 00:20:32,480
feature but

587
00:20:32,480 --> 00:20:35,520
there's certain elements of the xml file

588
00:20:35,520 --> 00:20:38,240
that we want the file entry tag allows

589
00:20:38,240 --> 00:20:40,640
us to specify our own dlls and this goes

590
00:20:40,640 --> 00:20:42,640
at the very very top of the execution

591
00:20:42,640 --> 00:20:43,600
order

592
00:20:43,600 --> 00:20:44,480
so

593
00:20:44,480 --> 00:20:46,159
if we want to if we want to load around

594
00:20:46,159 --> 00:20:49,360
kernel 32 or user 32 we do it with

595
00:20:49,360 --> 00:20:51,200
manifest

596
00:20:51,200 --> 00:20:52,559
so

597
00:20:52,559 --> 00:20:54,559
sorry here i'm trying to like talk at

598
00:20:54,559 --> 00:20:56,000
the right volume can people hear me

599
00:20:56,000 --> 00:20:57,600
should i like talk like this or should i

600
00:20:57,600 --> 00:20:59,440
talk like this

601
00:20:59,440 --> 00:21:01,600
all right

602
00:21:01,600 --> 00:21:03,919
all right i keep using this cff exploder

603
00:21:03,919 --> 00:21:05,840
program but it is by far one of the

604
00:21:05,840 --> 00:21:08,480
coolest tools for viewing um

605
00:21:08,480 --> 00:21:11,120
dll or for viewing executable stuff like

606
00:21:11,120 --> 00:21:12,880
it'll have all this stuff like the uh

607
00:21:12,880 --> 00:21:16,000
different headers imports exports

608
00:21:16,000 --> 00:21:18,240
resources so like resources will be like

609
00:21:18,240 --> 00:21:20,159
you know icons pictures you can actually

610
00:21:20,159 --> 00:21:21,600
steal those and use them in your own

611
00:21:21,600 --> 00:21:23,760
program and this is how you do it

612
00:21:23,760 --> 00:21:25,679
but anyway

613
00:21:25,679 --> 00:21:28,240
you can actually view the uh manifest

614
00:21:28,240 --> 00:21:29,919
file the manifest file here will have

615
00:21:29,919 --> 00:21:32,080
all the different informations this uh

616
00:21:32,080 --> 00:21:34,880
mcafee ui controller handler whatever

617
00:21:34,880 --> 00:21:36,720
but you can see right here request

618
00:21:36,720 --> 00:21:38,640
privileges it wants to be run as

619
00:21:38,640 --> 00:21:40,320
administrator otherwise it won't run at

620
00:21:40,320 --> 00:21:41,840
all so it'll have that little shield

621
00:21:41,840 --> 00:21:43,280
next to it

622
00:21:43,280 --> 00:21:45,760
but what we're really interested here is

623
00:21:45,760 --> 00:21:47,360
the file one

624
00:21:47,360 --> 00:21:49,919
where the is it

625
00:21:49,919 --> 00:21:52,320
sorry

626
00:21:53,520 --> 00:21:54,960
well you're just gonna have to take my

627
00:21:54,960 --> 00:21:56,400
word for it there's gonna be like a

628
00:21:56,400 --> 00:21:58,640
little thing that says file on it and we

629
00:21:58,640 --> 00:22:01,360
can include our own

630
00:22:01,360 --> 00:22:03,440
okay hooks

631
00:22:03,440 --> 00:22:04,799
i know this is like it keeps getting

632
00:22:04,799 --> 00:22:06,400
complicated more and more complicated

633
00:22:06,400 --> 00:22:08,480
i'm sorry my talks get so complicated

634
00:22:08,480 --> 00:22:10,320
but there's always this this like you

635
00:22:10,320 --> 00:22:12,159
have to know this and you hope to know

636
00:22:12,159 --> 00:22:13,919
this you're like willing and blind you

637
00:22:13,919 --> 00:22:16,320
don't know how to code but it's okay

638
00:22:16,320 --> 00:22:18,640
well anyway so windows

639
00:22:18,640 --> 00:22:20,320
in their infinite knowledge you know

640
00:22:20,320 --> 00:22:22,640
they've they've provided functionality

641
00:22:22,640 --> 00:22:25,039
to alter and monitor their in their

642
00:22:25,039 --> 00:22:27,360
internal subsystem and environment so

643
00:22:27,360 --> 00:22:28,960
what this means is like

644
00:22:28,960 --> 00:22:30,320
um

645
00:22:30,320 --> 00:22:32,320
if i want to monitor like uh whenever

646
00:22:32,320 --> 00:22:34,880
someone like opens a new window then i

647
00:22:34,880 --> 00:22:37,600
can perform my own actions so this can

648
00:22:37,600 --> 00:22:39,039
lead to a lot of madness you know what i

649
00:22:39,039 --> 00:22:41,120
mean so if someone opens up a new window

650
00:22:41,120 --> 00:22:42,640
and then i draw a box that shows a

651
00:22:42,640 --> 00:22:44,720
smiley face i don't know why i would do

652
00:22:44,720 --> 00:22:46,240
that maybe an old school virus would do

653
00:22:46,240 --> 00:22:47,919
that whatever

654
00:22:47,919 --> 00:22:50,320
so there are a number of callbacks

655
00:22:50,320 --> 00:22:52,559
that utilize this particular function

656
00:22:52,559 --> 00:22:54,400
the function here is called set windows

657
00:22:54,400 --> 00:22:55,600
hook

658
00:22:55,600 --> 00:22:57,520
and like i said it allows us to monitor

659
00:22:57,520 --> 00:22:58,640
this stuff

660
00:22:58,640 --> 00:23:00,720
so we can um we can actually monitor a

661
00:23:00,720 --> 00:23:02,480
number of things like uh

662
00:23:02,480 --> 00:23:03,840
the keyboard

663
00:23:03,840 --> 00:23:05,039
the mouse

664
00:23:05,039 --> 00:23:07,360
so why would you hook the keyboard

665
00:23:07,360 --> 00:23:09,840
keylogger

666
00:23:10,240 --> 00:23:12,799
i'm sorry

667
00:23:18,799 --> 00:23:21,360
the re caveat here is you can only hook

668
00:23:21,360 --> 00:23:22,559
certain things

669
00:23:22,559 --> 00:23:24,320
you can only hook stuff within your own

670
00:23:24,320 --> 00:23:25,120
uh

671
00:23:25,120 --> 00:23:27,360
with within your own address space but

672
00:23:27,360 --> 00:23:29,919
you can bypass that with dll files

673
00:23:29,919 --> 00:23:32,240
so one thing i have not talked about and

674
00:23:32,240 --> 00:23:33,520
i don't really want to jump down that

675
00:23:33,520 --> 00:23:35,679
rabbit hole is the entire system or

676
00:23:35,679 --> 00:23:37,360
functionality within windows is these

677
00:23:37,360 --> 00:23:40,480
things called window messages

678
00:23:40,480 --> 00:23:42,400
microsoft and their infinite wisdom has

679
00:23:42,400 --> 00:23:44,640
decided to devise this system of what

680
00:23:44,640 --> 00:23:46,720
are called window messages things will

681
00:23:46,720 --> 00:23:48,640
get passed around all the time

682
00:23:48,640 --> 00:23:50,640
so something like a new window is

683
00:23:50,640 --> 00:23:52,799
created or you you scroll your mouse or

684
00:23:52,799 --> 00:23:54,559
whatever a certain like event will fire

685
00:23:54,559 --> 00:23:56,640
off and it'll be like a window message

686
00:23:56,640 --> 00:23:58,320
all the hooks do is they they follow

687
00:23:58,320 --> 00:23:59,840
that window message and inside will

688
00:23:59,840 --> 00:24:03,120
contain the data you want

689
00:24:03,120 --> 00:24:04,720
but yeah i'm not going down that rabbit

690
00:24:04,720 --> 00:24:06,320
hole

691
00:24:06,320 --> 00:24:07,360
okay

692
00:24:07,360 --> 00:24:10,960
shared memory spaces so ex so um in the

693
00:24:10,960 --> 00:24:12,720
basic windows model

694
00:24:12,720 --> 00:24:14,640
like a process will have basically

695
00:24:14,640 --> 00:24:16,480
access to its own address space you can

696
00:24:16,480 --> 00:24:18,320
it can't with other address spaces

697
00:24:18,320 --> 00:24:20,320
because if you go back to the dos days

698
00:24:20,320 --> 00:24:22,000
everyone just shared their own address

699
00:24:22,000 --> 00:24:23,279
space and everything was supposed to be

700
00:24:23,279 --> 00:24:25,440
like please don't screw with mine there

701
00:24:25,440 --> 00:24:27,840
was no trust involved microsoft comes

702
00:24:27,840 --> 00:24:29,440
along and says all right let's make it

703
00:24:29,440 --> 00:24:30,880
so that way programs have their own

704
00:24:30,880 --> 00:24:32,960
address space and they can't with

705
00:24:32,960 --> 00:24:34,240
each other

706
00:24:34,240 --> 00:24:36,480
if you saw the old in back in the days

707
00:24:36,480 --> 00:24:38,559
like windows 95 or windows 98 you'll see

708
00:24:38,559 --> 00:24:40,480
like a blue screen of death basically

709
00:24:40,480 --> 00:24:42,640
what that was is it's um something

710
00:24:42,640 --> 00:24:44,960
violating the trust and writing from one

711
00:24:44,960 --> 00:24:46,480
user space to another user space

712
00:24:46,480 --> 00:24:48,000
typically like user space in the

713
00:24:48,000 --> 00:24:50,159
kernel's base or back and forth

714
00:24:50,159 --> 00:24:53,360
but programs try to adhere to the pos to

715
00:24:53,360 --> 00:24:55,679
the concept of this is my address space

716
00:24:55,679 --> 00:24:57,360
don't with it

717
00:24:57,360 --> 00:24:58,159
so

718
00:24:58,159 --> 00:25:01,279
dll files we can actually bypass this by

719
00:25:01,279 --> 00:25:03,279
including what's called our own shared

720
00:25:03,279 --> 00:25:04,559
segment

721
00:25:04,559 --> 00:25:07,360
if if you instantiate a particular way

722
00:25:07,360 --> 00:25:09,039
if you instantiate your program in a

723
00:25:09,039 --> 00:25:10,880
particular way and include the little

724
00:25:10,880 --> 00:25:12,320
shared section

725
00:25:12,320 --> 00:25:14,720
your dll file can now

726
00:25:14,720 --> 00:25:16,240
run in the address space of other

727
00:25:16,240 --> 00:25:18,880
programs or the entire system so the way

728
00:25:18,880 --> 00:25:21,039
we so um we would do this for example if

729
00:25:21,039 --> 00:25:22,799
we want to use a key logger and work on

730
00:25:22,799 --> 00:25:25,039
everything this is one i wrote you can

731
00:25:25,039 --> 00:25:26,159
i don't know if you can write that down

732
00:25:26,159 --> 00:25:28,400
i'll be handing out the slide soon but

733
00:25:28,400 --> 00:25:30,559
like i said a key logger if you can get

734
00:25:30,559 --> 00:25:32,320
your dll code to run in every other

735
00:25:32,320 --> 00:25:34,159
address space then you can log all the

736
00:25:34,159 --> 00:25:36,480
keys of everyone and this is basically

737
00:25:36,480 --> 00:25:38,080
how hard this is basically how key

738
00:25:38,080 --> 00:25:39,760
loggers have worked since the start of

739
00:25:39,760 --> 00:25:42,320
windows 95 and on i mean i remember the

740
00:25:42,320 --> 00:25:44,720
nsa has come up with other ways

741
00:25:44,720 --> 00:25:45,760
um

742
00:25:45,760 --> 00:25:47,120
like for example

743
00:25:47,120 --> 00:25:49,600
direct input direct input you know it's

744
00:25:49,600 --> 00:25:51,440
like

745
00:25:51,440 --> 00:25:52,799
um

746
00:25:52,799 --> 00:25:55,520
like direct input is like

747
00:25:55,520 --> 00:25:56,960
i'm kind of going off topic here but

748
00:25:56,960 --> 00:26:00,000
like direct input is like uh

749
00:26:00,000 --> 00:26:01,760
like you have a key like you have like a

750
00:26:01,760 --> 00:26:03,360
controller or something like that or

751
00:26:03,360 --> 00:26:05,840
like a joystick or whatever direct input

752
00:26:05,840 --> 00:26:07,279
actually controls that and it'll

753
00:26:07,279 --> 00:26:09,360
actually monitor the keyboard for you

754
00:26:09,360 --> 00:26:11,679
and you can watch that and it'll bypass

755
00:26:11,679 --> 00:26:13,039
everything because who the hell is going

756
00:26:13,039 --> 00:26:15,279
to exploit you know like

757
00:26:15,279 --> 00:26:17,600
yeah directx only a crazy person or the

758
00:26:17,600 --> 00:26:19,279
nsa

759
00:26:19,279 --> 00:26:21,360
okay

760
00:26:21,360 --> 00:26:23,440
more and more more and more madness i

761
00:26:23,440 --> 00:26:26,480
know app init dll files

762
00:26:26,480 --> 00:26:28,880
yeah so imagine you wanted to say take a

763
00:26:28,880 --> 00:26:30,559
dll file and have it running address

764
00:26:30,559 --> 00:26:31,919
space of everything everything

765
00:26:31,919 --> 00:26:34,159
everything without running any code

766
00:26:34,159 --> 00:26:36,159
they have this thing called app init dll

767
00:26:36,159 --> 00:26:37,279
files

768
00:26:37,279 --> 00:26:39,360
it's an interesting functionality it was

769
00:26:39,360 --> 00:26:41,279
a it was around you know around they

770
00:26:41,279 --> 00:26:43,279
introduced it around windows 98 and then

771
00:26:43,279 --> 00:26:46,720
they took it away around windows

772
00:26:46,720 --> 00:26:48,720
xp i think

773
00:26:48,720 --> 00:26:51,919
no probably windows 7.

774
00:26:54,799 --> 00:26:56,880
basically what you could do is you could

775
00:26:56,880 --> 00:26:59,279
specify your own appointment dll files

776
00:26:59,279 --> 00:27:01,919
and anything that instantiated user32

777
00:27:01,919 --> 00:27:04,000
which was everything or almost

778
00:27:04,000 --> 00:27:05,520
everything anything that's not a council

779
00:27:05,520 --> 00:27:06,400
program

780
00:27:06,400 --> 00:27:08,559
and it'll load your it'll load your code

781
00:27:08,559 --> 00:27:10,320
and you can do whatever you want with it

782
00:27:10,320 --> 00:27:12,480
but of course this can cause lots of

783
00:27:12,480 --> 00:27:14,880
madness lots of install in instability

784
00:27:14,880 --> 00:27:16,799
and everything will break so this is

785
00:27:16,799 --> 00:27:18,399
this used to be super popular with

786
00:27:18,399 --> 00:27:20,000
malware but it's since gone the wayside

787
00:27:20,000 --> 00:27:21,679
since this feature is not now turned off

788
00:27:21,679 --> 00:27:24,159
by default

789
00:27:24,159 --> 00:27:25,760
there's another one

790
00:27:25,760 --> 00:27:27,520
of course like i said microsoft and

791
00:27:27,520 --> 00:27:29,039
their infinite wisdom they keep adding

792
00:27:29,039 --> 00:27:30,559
stuff breaking everything making it

793
00:27:30,559 --> 00:27:33,279
easier for us malware writers to just

794
00:27:33,279 --> 00:27:35,120
go nuts and go ham

795
00:27:35,120 --> 00:27:37,039
so there's another way someone said

796
00:27:37,039 --> 00:27:38,880
microsoft said well what if we want to

797
00:27:38,880 --> 00:27:41,840
hook everything not just you know like

798
00:27:41,840 --> 00:27:44,320
use not just things that run user 32 but

799
00:27:44,320 --> 00:27:47,039
everything so they came up with absurd

800
00:27:47,039 --> 00:27:49,840
dlls

801
00:27:50,080 --> 00:27:52,480
so basically the way you instantiate

802
00:27:52,480 --> 00:27:54,000
you look for uh

803
00:27:54,000 --> 00:27:56,320
you look for this registry key here you

804
00:27:56,320 --> 00:27:57,919
go to the session manager you create a

805
00:27:57,919 --> 00:28:01,039
new entry you type it in and it runs

806
00:28:01,039 --> 00:28:04,080
sorry thing about this is there's it's

807
00:28:04,080 --> 00:28:06,559
not off by default all you have to do is

808
00:28:06,559 --> 00:28:08,799
re re-add the registry entry and boom

809
00:28:08,799 --> 00:28:10,320
there it is

810
00:28:10,320 --> 00:28:12,320
and again this will everything up

811
00:28:12,320 --> 00:28:14,559
or can

812
00:28:14,559 --> 00:28:15,520
okay

813
00:28:15,520 --> 00:28:18,559
dll injection

814
00:28:18,559 --> 00:28:20,320
again has anyone heard of dll injection

815
00:28:20,320 --> 00:28:21,840
maybe like like a class or something

816
00:28:21,840 --> 00:28:23,279
like that it's like what is that what

817
00:28:23,279 --> 00:28:25,679
the is going on

818
00:28:25,679 --> 00:28:26,960
okay so

819
00:28:26,960 --> 00:28:28,559
since i said the tradition the

820
00:28:28,559 --> 00:28:30,240
traditional way quote-unquote to

821
00:28:30,240 --> 00:28:32,320
instantiate a dll is you know like the

822
00:28:32,320 --> 00:28:34,240
git proc address load library way but

823
00:28:34,240 --> 00:28:36,159
there's great um people over the years

824
00:28:36,159 --> 00:28:38,240
have come up with crazier way crazier

825
00:28:38,240 --> 00:28:40,399
ways and crazier methods and microsoft

826
00:28:40,399 --> 00:28:41,919
of course and their infant knowledge has

827
00:28:41,919 --> 00:28:44,720
you know given us methods of doing it

828
00:28:44,720 --> 00:28:46,960
so there's these are the most popular

829
00:28:46,960 --> 00:28:48,880
ones i've come across for injecting your

830
00:28:48,880 --> 00:28:51,440
own code and other stuff via dll file

831
00:28:51,440 --> 00:28:52,880
but the most popular ones are create

832
00:28:52,880 --> 00:28:55,279
remote thread create thread create

833
00:28:55,279 --> 00:28:56,399
thread again

834
00:28:56,399 --> 00:28:57,520
so

835
00:28:57,520 --> 00:29:00,159
this one for example so microsoft the

836
00:29:00,159 --> 00:29:02,320
way they work is they'll be like a uh

837
00:29:02,320 --> 00:29:04,799
top level like dll name and then if you

838
00:29:04,799 --> 00:29:07,120
go lower in the system like

839
00:29:07,120 --> 00:29:09,279
nt dllan it'll have this and if you go

840
00:29:09,279 --> 00:29:11,279
even lower it calls this

841
00:29:11,279 --> 00:29:13,520
so basically i'm sorry that's confusing

842
00:29:13,520 --> 00:29:15,440
but at the very top if you call this

843
00:29:15,440 --> 00:29:17,279
internally microsoft will call this and

844
00:29:17,279 --> 00:29:18,640
internally further we'll call this

845
00:29:18,640 --> 00:29:20,720
before it goes into kernel in

846
00:29:20,720 --> 00:29:23,360
but anyway you can use those to exploit

847
00:29:23,360 --> 00:29:27,719
and run dll code in other programs

848
00:29:27,919 --> 00:29:29,919
okay does it sound hard it's because it

849
00:29:29,919 --> 00:29:31,600
is hard i mean this whole thing is hard

850
00:29:31,600 --> 00:29:32,799
but it's like

851
00:29:32,799 --> 00:29:35,039
there's a lot of involvement in or into

852
00:29:35,039 --> 00:29:36,960
actually running your dll code into

853
00:29:36,960 --> 00:29:38,080
another program because it's not

854
00:29:38,080 --> 00:29:40,799
normally done

855
00:29:40,799 --> 00:29:42,720
um so like for example first you would

856
00:29:42,720 --> 00:29:44,720
like assign yourself a privilege token

857
00:29:44,720 --> 00:29:46,159
because you can't normally write into

858
00:29:46,159 --> 00:29:47,760
another program's address space so you

859
00:29:47,760 --> 00:29:49,520
need the debug privilege then you need

860
00:29:49,520 --> 00:29:51,360
to call this function and this one and

861
00:29:51,360 --> 00:29:53,039
this one then this one this one then it

862
00:29:53,039 --> 00:29:55,200
works you know i could make an entire

863
00:29:55,200 --> 00:29:57,120
talk on that entire subject but i don't

864
00:29:57,120 --> 00:30:00,080
want to this is uh this is different

865
00:30:00,080 --> 00:30:02,320
okay so if you actually want to follow

866
00:30:02,320 --> 00:30:04,240
along i don't i don't though but you

867
00:30:04,240 --> 00:30:05,919
basically you would open the process you

868
00:30:05,919 --> 00:30:07,360
would allocate some memory inside the

869
00:30:07,360 --> 00:30:09,360
process you write the process memory

870
00:30:09,360 --> 00:30:11,360
inside you call this and then it would

871
00:30:11,360 --> 00:30:12,960
run your code

872
00:30:12,960 --> 00:30:14,480
now the reason why a program would

873
00:30:14,480 --> 00:30:16,000
typically want to use this particular

874
00:30:16,000 --> 00:30:18,000
method is maybe like cheating at

875
00:30:18,000 --> 00:30:19,520
something cheating at video games is

876
00:30:19,520 --> 00:30:20,559
popular

877
00:30:20,559 --> 00:30:22,159
this is how you would do it you drop

878
00:30:22,159 --> 00:30:24,159
your code inside and you run it and no

879
00:30:24,159 --> 00:30:26,159
one's the wiser

880
00:30:26,159 --> 00:30:27,279
um

881
00:30:27,279 --> 00:30:29,200
another popular the popular reason why

882
00:30:29,200 --> 00:30:31,360
you would do this is you're not going to

883
00:30:31,360 --> 00:30:32,799
modify a function you know i mean you're

884
00:30:32,799 --> 00:30:35,039
not going to modify the program

885
00:30:35,039 --> 00:30:36,960
modern programs now they care they're

886
00:30:36,960 --> 00:30:39,039
all signed you know and if you try and

887
00:30:39,039 --> 00:30:41,120
modify a program that's signed and now

888
00:30:41,120 --> 00:30:42,720
all of a sudden this trust is broken it

889
00:30:42,720 --> 00:30:44,640
won't sign it won't run but this is how

890
00:30:44,640 --> 00:30:45,840
you do it this is how you run your own

891
00:30:45,840 --> 00:30:48,720
code inside of a signed program

892
00:30:48,720 --> 00:30:49,760
okay

893
00:30:49,760 --> 00:30:52,880
dll etc blah blah blah blah blah blah

894
00:30:52,880 --> 00:30:54,559
all right the last thing i want to touch

895
00:30:54,559 --> 00:30:58,159
on is kernel 32 nt dll these are the co

896
00:30:58,159 --> 00:31:00,159
these are the base components of windows

897
00:31:00,159 --> 00:31:02,640
i don't know if i said this but most if

898
00:31:02,640 --> 00:31:04,480
not all of windows functionality all

899
00:31:04,480 --> 00:31:07,600
stem from these particular dll files

900
00:31:07,600 --> 00:31:10,000
nt.dll is considered these the like

901
00:31:10,000 --> 00:31:12,240
lowest of the lowest of the low it has

902
00:31:12,240 --> 00:31:14,000
all the wrapper functions from all three

903
00:31:14,000 --> 00:31:16,880
of these but they're unsupported or

904
00:31:16,880 --> 00:31:18,480
officially from microsoft they're like

905
00:31:18,480 --> 00:31:20,799
they don't exist but they exist

906
00:31:20,799 --> 00:31:23,600
functions within a dll file will be like

907
00:31:23,600 --> 00:31:26,000
either start with nt or zw i don't know

908
00:31:26,000 --> 00:31:27,840
what zw stands for and people have been

909
00:31:27,840 --> 00:31:29,519
speculating for years

910
00:31:29,519 --> 00:31:30,640
but

911
00:31:30,640 --> 00:31:33,440
i don't know

912
00:31:33,440 --> 00:31:36,559
take your own guess is what zw means

913
00:31:36,559 --> 00:31:37,519
um

914
00:31:37,519 --> 00:31:39,760
anyway at the lowest of low level you'll

915
00:31:39,760 --> 00:31:41,120
see like

916
00:31:41,120 --> 00:31:43,679
you'll see like dll uh dll calls like

917
00:31:43,679 --> 00:31:46,320
exports you know like it'll start with

918
00:31:46,320 --> 00:31:49,200
it can be like nt write file it could be

919
00:31:49,200 --> 00:31:51,679
zw create file it could be like nt

920
00:31:51,679 --> 00:31:53,840
create thread um

921
00:31:53,840 --> 00:31:56,159
nt message box or something crazy like

922
00:31:56,159 --> 00:31:56,960
that

923
00:31:56,960 --> 00:31:58,399
now if you're actually interested in

924
00:31:58,399 --> 00:32:00,720
jumping down that rabbit hole there's a

925
00:32:00,720 --> 00:32:01,760
there's a

926
00:32:01,760 --> 00:32:04,159
group out there called react os

927
00:32:04,159 --> 00:32:05,679
this particular group they've been

928
00:32:05,679 --> 00:32:07,760
trying to break down windows and reverse

929
00:32:07,760 --> 00:32:09,440
engineer it for years and they've made a

930
00:32:09,440 --> 00:32:12,080
lot of progress you know they actually

931
00:32:12,080 --> 00:32:16,159
have a program a version of windows that

932
00:32:16,159 --> 00:32:17,600
that'll actually run and boot and

933
00:32:17,600 --> 00:32:18,880
everything and they've managed to

934
00:32:18,880 --> 00:32:20,559
completely reverse engineer the entire

935
00:32:20,559 --> 00:32:22,080
project themselves

936
00:32:22,080 --> 00:32:23,760
quite impressive

937
00:32:23,760 --> 00:32:26,320
even for me

938
00:32:26,880 --> 00:32:28,000
yawn

939
00:32:28,000 --> 00:32:29,679
i know i can go over i can go over this

940
00:32:29,679 --> 00:32:31,679
crap all day long but this is essential

941
00:32:31,679 --> 00:32:33,919
you know to reverse engineering stuff

942
00:32:33,919 --> 00:32:35,840
um if you don't know this at the deep

943
00:32:35,840 --> 00:32:38,080
the most deepest of levels then this

944
00:32:38,080 --> 00:32:40,240
isn't really going to work

945
00:32:40,240 --> 00:32:42,720
so we know that deal so we all know that

946
00:32:42,720 --> 00:32:45,360
dll files can be reversed dynamically by

947
00:32:45,360 --> 00:32:46,480
looking for

948
00:32:46,480 --> 00:32:48,480
load library calls

949
00:32:48,480 --> 00:32:50,799
and git proc address calls we know that

950
00:32:50,799 --> 00:32:53,039
exported dll functions are imported by

951
00:32:53,039 --> 00:32:54,640
executables

952
00:32:54,640 --> 00:32:57,600
using again dll proc address and we know

953
00:32:57,600 --> 00:32:59,919
what the little events are once we know

954
00:32:59,919 --> 00:33:01,519
all this then we can actually start

955
00:33:01,519 --> 00:33:03,440
diving into function we can actually

956
00:33:03,440 --> 00:33:05,440
start diving into reverse engineering

957
00:33:05,440 --> 00:33:06,240
now

958
00:33:06,240 --> 00:33:08,159
as i said before the reason why would we

959
00:33:08,159 --> 00:33:09,600
we would even attempt to reverse

960
00:33:09,600 --> 00:33:11,519
engineer a dll in the first place is

961
00:33:11,519 --> 00:33:13,919
like i said things are broken up and um

962
00:33:13,919 --> 00:33:15,360
if you want to take functionality from

963
00:33:15,360 --> 00:33:16,720
one program and put it into another we

964
00:33:16,720 --> 00:33:18,799
would versus enjoy the dll

965
00:33:18,799 --> 00:33:19,760
so

966
00:33:19,760 --> 00:33:21,679
going back to the react os

967
00:33:21,679 --> 00:33:24,559
i said over here or even the early days

968
00:33:24,559 --> 00:33:26,480
of programmers you know like we actually

969
00:33:26,480 --> 00:33:28,240
can attribute things like

970
00:33:28,240 --> 00:33:30,640
libreoffice or openoffice or whatever

971
00:33:30,640 --> 00:33:32,880
they're called now to pioneers in

972
00:33:32,880 --> 00:33:35,279
reverse engineering actually taking like

973
00:33:35,279 --> 00:33:37,440
microsoft's uh

974
00:33:37,440 --> 00:33:38,559
office

975
00:33:38,559 --> 00:33:40,559
and word and like reverse engineering

976
00:33:40,559 --> 00:33:41,760
and taking their functionality and

977
00:33:41,760 --> 00:33:43,120
putting in their own and like not

978
00:33:43,120 --> 00:33:45,200
telling microsoft and

979
00:33:45,200 --> 00:33:47,600
running it anyway

980
00:33:47,600 --> 00:33:48,480
okay

981
00:33:48,480 --> 00:33:49,919
that did not turn out as well as i

982
00:33:49,919 --> 00:33:52,000
wanted because there's a conversion like

983
00:33:52,000 --> 00:33:55,120
i said the open office people they try

984
00:33:55,120 --> 00:33:57,440
it's not an ex reversing isn't an exact

985
00:33:57,440 --> 00:33:59,440
science people try

986
00:33:59,440 --> 00:34:01,200
but this is as good as they come along

987
00:34:01,200 --> 00:34:04,000
this is uh open office impress and this

988
00:34:04,000 --> 00:34:06,240
is attempting to run a powerpoint it

989
00:34:06,240 --> 00:34:08,560
works but kind of

990
00:34:08,560 --> 00:34:09,679
okay

991
00:34:09,679 --> 00:34:10,719
so

992
00:34:10,719 --> 00:34:12,159
when it comes to reverse engineering

993
00:34:12,159 --> 00:34:14,000
programs

994
00:34:14,000 --> 00:34:16,079
the big ones the big two

995
00:34:16,079 --> 00:34:18,639
these are d compilers or disassemblers

996
00:34:18,639 --> 00:34:20,639
there's ghidra and there's ida those are

997
00:34:20,639 --> 00:34:22,639
the big ones they've come out they're uh

998
00:34:22,639 --> 00:34:24,320
ida's tried and true has been around the

999
00:34:24,320 --> 00:34:27,280
longest ghidras written by the nsa it's

1000
00:34:27,280 --> 00:34:29,199
i guess it's fairly recent

1001
00:34:29,199 --> 00:34:32,159
guide is nice because it's free ida is

1002
00:34:32,159 --> 00:34:35,359
also free

1003
00:34:35,359 --> 00:34:36,800
it's floating around out there i'm not

1004
00:34:36,800 --> 00:34:38,239
going to say it's on a torrent but it's

1005
00:34:38,239 --> 00:34:39,520
out there

1006
00:34:39,520 --> 00:34:41,199
kedra is free too but again it's written

1007
00:34:41,199 --> 00:34:42,719
by the nsa a lot of people don't trust

1008
00:34:42,719 --> 00:34:46,399
the nsa i don't trust the nsa

1009
00:34:46,560 --> 00:34:47,440
okay

1010
00:34:47,440 --> 00:34:49,760
poc or get the out of here

1011
00:34:49,760 --> 00:34:51,040
okay so

1012
00:34:51,040 --> 00:34:52,239
i started

1013
00:34:52,239 --> 00:34:53,918
going through my computer which i've had

1014
00:34:53,918 --> 00:34:55,440
a few years and just shuttling through

1015
00:34:55,440 --> 00:34:57,119
piling through all these dll files

1016
00:34:57,119 --> 00:34:58,720
wondering what what looks interesting

1017
00:34:58,720 --> 00:35:00,240
reverse engineer

1018
00:35:00,240 --> 00:35:01,040
so

1019
00:35:01,040 --> 00:35:02,560
um i was actually

1020
00:35:02,560 --> 00:35:04,640
i forget i was running some game or

1021
00:35:04,640 --> 00:35:06,079
something like i think it was installing

1022
00:35:06,079 --> 00:35:08,400
some emulator and it installed mcafee

1023
00:35:08,400 --> 00:35:10,640
for me i hate that you know you buy a

1024
00:35:10,640 --> 00:35:12,960
new laptop it has all this shovelware

1025
00:35:12,960 --> 00:35:14,000
you know what i'm talking about right

1026
00:35:14,000 --> 00:35:15,599
like candy crush or whatever the

1027
00:35:15,599 --> 00:35:17,680
they always seem to include mcafee

1028
00:35:17,680 --> 00:35:20,000
i don't know does micros does mcafee

1029
00:35:20,000 --> 00:35:21,760
just sell their soul or

1030
00:35:21,760 --> 00:35:23,200
other people places sell their soul and

1031
00:35:23,200 --> 00:35:25,680
mac if he dumps all this i don't know

1032
00:35:25,680 --> 00:35:27,599
anyway these are the dll files we're

1033
00:35:27,599 --> 00:35:28,800
going to actually be attempting to

1034
00:35:28,800 --> 00:35:30,480
reverse engineer

1035
00:35:30,480 --> 00:35:31,760
we have

1036
00:35:31,760 --> 00:35:34,240
mick dll probably uh mcafee and not

1037
00:35:34,240 --> 00:35:36,000
mcdonald's

1038
00:35:36,000 --> 00:35:37,520
we have

1039
00:35:37,520 --> 00:35:40,160
cpu cpu utility

1040
00:35:40,160 --> 00:35:41,760
which is used for you know finding

1041
00:35:41,760 --> 00:35:43,280
information on

1042
00:35:43,280 --> 00:35:44,880
internal stuff

1043
00:35:44,880 --> 00:35:46,000
i don't know if you've ever used a

1044
00:35:46,000 --> 00:35:48,480
program called cpu id but gamers will

1045
00:35:48,480 --> 00:35:49,839
actually use this to get like

1046
00:35:49,839 --> 00:35:53,040
information like say this is my program

1047
00:35:53,040 --> 00:35:54,720
and it has these drivers and i need the

1048
00:35:54,720 --> 00:35:56,079
latest drivers so that way i can have

1049
00:35:56,079 --> 00:35:58,240
the actual absolute best program

1050
00:35:58,240 --> 00:35:59,920
absolute desk best performance or

1051
00:35:59,920 --> 00:36:01,920
whatever or people use it to you know

1052
00:36:01,920 --> 00:36:04,079
brag on forums or reddit or whatever

1053
00:36:04,079 --> 00:36:05,760
saying my computer is better than yours

1054
00:36:05,760 --> 00:36:08,000
they would use a program called cpuid i

1055
00:36:08,000 --> 00:36:10,160
should really like bring that up but

1056
00:36:10,160 --> 00:36:11,359
oh well

1057
00:36:11,359 --> 00:36:13,440
anyway and finally i was going through

1058
00:36:13,440 --> 00:36:14,800
asus

1059
00:36:14,800 --> 00:36:17,680
and asus has um again they're a hardware

1060
00:36:17,680 --> 00:36:19,040
computer company they're a hardware

1061
00:36:19,040 --> 00:36:20,960
company they produce you know like

1062
00:36:20,960 --> 00:36:22,720
motherboards and

1063
00:36:22,720 --> 00:36:25,119
not processors but mostly hardware

1064
00:36:25,119 --> 00:36:26,640
i came across this dll file i'm like

1065
00:36:26,640 --> 00:36:28,720
that looks interesting so let's reverse

1066
00:36:28,720 --> 00:36:30,720
and already

1067
00:36:30,720 --> 00:36:31,599
okay

1068
00:36:31,599 --> 00:36:34,460
cpu util from the cpu id company

1069
00:36:34,460 --> 00:36:35,839
[Music]

1070
00:36:35,839 --> 00:36:38,320
now when i look at the exports entry

1071
00:36:38,320 --> 00:36:42,240
there's three entries c p c u l or c u i

1072
00:36:42,240 --> 00:36:44,560
init or i don't know what is that an l

1073
00:36:44,560 --> 00:36:46,000
or an i i don't know

1074
00:36:46,000 --> 00:36:50,400
c u update and get number of processors

1075
00:36:50,400 --> 00:36:54,320
okay so what does ghidra say

1076
00:36:54,320 --> 00:36:56,320
says when we attempt to reverse engineer

1077
00:36:56,320 --> 00:36:58,640
the process we see a pointer to a

1078
00:36:58,640 --> 00:37:00,160
structure

1079
00:37:00,160 --> 00:37:01,839
we see

1080
00:37:01,839 --> 00:37:03,920
the pushing of said structure onto the

1081
00:37:03,920 --> 00:37:06,160
stack before calling this particular

1082
00:37:06,160 --> 00:37:08,720
function i know it's kind of hard to see

1083
00:37:08,720 --> 00:37:12,240
because you know impress impress and

1084
00:37:12,240 --> 00:37:14,320
and microsoft's powerpoint they don't

1085
00:37:14,320 --> 00:37:15,680
always come together so it moves some of

1086
00:37:15,680 --> 00:37:18,160
these around but this says get native

1087
00:37:18,160 --> 00:37:20,400
system info

1088
00:37:20,400 --> 00:37:22,480
and the internal documents for

1089
00:37:22,480 --> 00:37:24,800
microsoft's get native system info is

1090
00:37:24,800 --> 00:37:25,760
this

1091
00:37:25,760 --> 00:37:27,599
this is just

1092
00:37:27,599 --> 00:37:30,160
ignore it

1093
00:37:30,240 --> 00:37:32,320
oh god

1094
00:37:32,320 --> 00:37:34,400
keep screwing all of that up and i'm

1095
00:37:34,400 --> 00:37:35,359
sorry

1096
00:37:35,359 --> 00:37:37,040
all right so when we're reverse

1097
00:37:37,040 --> 00:37:39,280
engineering stuff it's it's never easy

1098
00:37:39,280 --> 00:37:40,800
it's always a pain in the ass but

1099
00:37:40,800 --> 00:37:42,800
sometimes you'll get lucky in this

1100
00:37:42,800 --> 00:37:44,800
particular case going back to our get

1101
00:37:44,800 --> 00:37:47,200
native system info we know it's a

1102
00:37:47,200 --> 00:37:48,640
structure because you know it's being

1103
00:37:48,640 --> 00:37:51,040
called by an address instead typically

1104
00:37:51,040 --> 00:37:52,880
you won't call your you won't typically

1105
00:37:52,880 --> 00:37:55,520
call your structure directly

1106
00:37:55,520 --> 00:37:56,480
like

1107
00:37:56,480 --> 00:37:58,240
in a register it'll be on it'll be

1108
00:37:58,240 --> 00:37:59,760
placed on the stack or something like

1109
00:37:59,760 --> 00:38:02,839
that you'll call it by reference

1110
00:38:02,839 --> 00:38:05,680
anyway according to msdn which is a

1111
00:38:05,680 --> 00:38:07,599
great source for everything there'll be

1112
00:38:07,599 --> 00:38:09,599
uh the particular function that we see

1113
00:38:09,599 --> 00:38:12,160
being called get native system info

1114
00:38:12,160 --> 00:38:13,760
will actually actually cause that

1115
00:38:13,760 --> 00:38:15,440
structure right here

1116
00:38:15,440 --> 00:38:16,960
and you can actually look up the

1117
00:38:16,960 --> 00:38:18,800
structure right here and what it does

1118
00:38:18,800 --> 00:38:20,640
and how it works so the function here

1119
00:38:20,640 --> 00:38:22,400
what it'll do is it'll fill up the

1120
00:38:22,400 --> 00:38:24,240
structure for you you instantiate the

1121
00:38:24,240 --> 00:38:26,560
structure and it fills up and it fills

1122
00:38:26,560 --> 00:38:28,800
up the little uh the structure for you i

1123
00:38:28,800 --> 00:38:32,079
mean you instantiate the api and the api

1124
00:38:32,079 --> 00:38:34,160
fills out the structure and if you look

1125
00:38:34,160 --> 00:38:35,119
down

1126
00:38:35,119 --> 00:38:37,280
seventh one down get number of

1127
00:38:37,280 --> 00:38:38,480
processors

1128
00:38:38,480 --> 00:38:41,040
pretty easy don't have to do anything we

1129
00:38:41,040 --> 00:38:43,440
already know we know how it does it if

1130
00:38:43,440 --> 00:38:44,800
we want to do it ourselves this is how

1131
00:38:44,800 --> 00:38:47,200
we would do it

1132
00:38:47,200 --> 00:38:49,520
okay

1133
00:38:49,920 --> 00:38:54,800
mc delete files deferred and mc and uh

1134
00:38:54,800 --> 00:38:56,400
yeah i guess it's from that

1135
00:38:56,400 --> 00:38:57,839
sorry about that

1136
00:38:57,839 --> 00:39:00,160
mcafee this is the dll file this is the

1137
00:39:00,160 --> 00:39:02,480
uh this is the actual uh program this is

1138
00:39:02,480 --> 00:39:04,800
the export name

1139
00:39:04,800 --> 00:39:07,440
okay so the first thing i do

1140
00:39:07,440 --> 00:39:08,880
whenever i'm attempting to reverse

1141
00:39:08,880 --> 00:39:11,280
engineer anything i'll drop it into ida

1142
00:39:11,280 --> 00:39:12,720
or i'll drop it into ghidra and i'm

1143
00:39:12,720 --> 00:39:15,599
gonna take a look at how it works

1144
00:39:15,599 --> 00:39:17,520
usually a lot of the modern

1145
00:39:17,520 --> 00:39:19,280
disassemblers and decompilers they'll

1146
00:39:19,280 --> 00:39:21,119
take a lot of the work out for out of it

1147
00:39:21,119 --> 00:39:23,280
for me they'll tell me what kind of data

1148
00:39:23,280 --> 00:39:25,680
it thinks it expects

1149
00:39:25,680 --> 00:39:28,160
it'll tell me what like it'll tell me

1150
00:39:28,160 --> 00:39:30,240
like i think it's using this structure i

1151
00:39:30,240 --> 00:39:32,960
think it takes this so when i'm reverse

1152
00:39:32,960 --> 00:39:34,160
engineering something i don't have to

1153
00:39:34,160 --> 00:39:36,480
make that blind guess i just already

1154
00:39:36,480 --> 00:39:38,160
done a lot of the work for me not all of

1155
00:39:38,160 --> 00:39:39,680
it but some of it

1156
00:39:39,680 --> 00:39:41,680
we can actually follow along

1157
00:39:41,680 --> 00:39:44,160
a little bit in our disassem in our

1158
00:39:44,160 --> 00:39:46,079
disassembler the beauty of reverse

1159
00:39:46,079 --> 00:39:48,079
engineering dlls is that so i don't

1160
00:39:48,079 --> 00:39:50,240
always have to dump into the debugger a

1161
00:39:50,240 --> 00:39:51,760
lot of the times i can just follow along

1162
00:39:51,760 --> 00:39:53,119
in the disassembler and kind of get an

1163
00:39:53,119 --> 00:39:55,599
idea of what's going on

1164
00:39:55,599 --> 00:39:57,520
so in this particular case

1165
00:39:57,520 --> 00:40:00,079
mc mcdonald's delete files deferred or

1166
00:40:00,079 --> 00:40:01,520
whatever

1167
00:40:01,520 --> 00:40:04,480
it seems to be calling a function called

1168
00:40:04,480 --> 00:40:06,800
find first file that makes sense because

1169
00:40:06,800 --> 00:40:08,839
it's you know deleting

1170
00:40:08,839 --> 00:40:11,599
files it first says here if we're

1171
00:40:11,599 --> 00:40:13,119
successful i know it's hard to follow

1172
00:40:13,119 --> 00:40:14,480
along with assembly code it actually

1173
00:40:14,480 --> 00:40:15,839
makes a lot of sense when you actually

1174
00:40:15,839 --> 00:40:17,760
mess around with it long enough

1175
00:40:17,760 --> 00:40:19,599
we're jumping to here we're checking to

1176
00:40:19,599 --> 00:40:21,359
see if there's a file

1177
00:40:21,359 --> 00:40:23,520
if so then jump to this and then we call

1178
00:40:23,520 --> 00:40:24,640
this

1179
00:40:24,640 --> 00:40:26,000
yeah

1180
00:40:26,000 --> 00:40:27,280
easy enough

1181
00:40:27,280 --> 00:40:29,760
but if we dive in we can actually see

1182
00:40:29,760 --> 00:40:32,400
this particular function here called

1183
00:40:32,400 --> 00:40:35,760
move file move file e x again has been a

1184
00:40:35,760 --> 00:40:37,760
great program so have you ever had like

1185
00:40:37,760 --> 00:40:39,599
a you ever had i don't know have you

1186
00:40:39,599 --> 00:40:41,200
ever used a program have you if you've

1187
00:40:41,200 --> 00:40:42,640
used windows and you've tried to delete

1188
00:40:42,640 --> 00:40:44,079
a file and it says it won't because it's

1189
00:40:44,079 --> 00:40:45,040
in use

1190
00:40:45,040 --> 00:40:47,119
it sucks right microsoft has come up

1191
00:40:47,119 --> 00:40:48,880
with a way for to actually get rid of

1192
00:40:48,880 --> 00:40:50,400
that file

1193
00:40:50,400 --> 00:40:53,760
you call move file ex and what it'll do

1194
00:40:53,760 --> 00:40:56,880
is um it it'll just move it to another

1195
00:40:56,880 --> 00:40:58,319
directory or another location we

1196
00:40:58,319 --> 00:40:59,839
actually we can actually specify the

1197
00:40:59,839 --> 00:41:02,000
recycle bin or something like that

1198
00:41:02,000 --> 00:41:04,319
and then this little flags here

1199
00:41:04,319 --> 00:41:06,079
well there's a little flag for it called

1200
00:41:06,079 --> 00:41:08,560
move file until reboot what that does

1201
00:41:08,560 --> 00:41:10,240
internally

1202
00:41:10,240 --> 00:41:12,960
you know it marks it saying just as just

1203
00:41:12,960 --> 00:41:14,560
before this program just before the

1204
00:41:14,560 --> 00:41:16,800
computer shuts down then move it the

1205
00:41:16,800 --> 00:41:18,640
idea is

1206
00:41:18,640 --> 00:41:20,319
it's no longer in use and you can and

1207
00:41:20,319 --> 00:41:21,680
you can remove it

1208
00:41:21,680 --> 00:41:24,319
so going back to our function move file

1209
00:41:24,319 --> 00:41:26,240
deferred that makes sense you know it's

1210
00:41:26,240 --> 00:41:27,760
going to delete the files it's going to

1211
00:41:27,760 --> 00:41:29,760
defer it to a later time and internally

1212
00:41:29,760 --> 00:41:32,319
it's using

1213
00:41:32,480 --> 00:41:33,760
move file

1214
00:41:33,760 --> 00:41:35,680
easy

1215
00:41:35,680 --> 00:41:37,599
as i said thus far we've been lucky

1216
00:41:37,599 --> 00:41:39,280
enough to get around get away with just

1217
00:41:39,280 --> 00:41:41,599
using the d compiler slash disassembler

1218
00:41:41,599 --> 00:41:43,760
however it's one thing to decompile

1219
00:41:43,760 --> 00:41:45,440
something it's another thing to actually

1220
00:41:45,440 --> 00:41:47,200
jump in the debugger i know debuggers

1221
00:41:47,200 --> 00:41:49,119
suck but it's the only way

1222
00:41:49,119 --> 00:41:51,839
i prefer this program called x64dbg

1223
00:41:51,839 --> 00:41:53,280
there's others that have been used

1224
00:41:53,280 --> 00:41:54,880
throughout the years all the old school

1225
00:41:54,880 --> 00:41:57,040
tutorials on youtube they'll use ollie

1226
00:41:57,040 --> 00:41:59,839
dbg which is dead no one uses anymore

1227
00:41:59,839 --> 00:42:01,520
and there is immunity debugger which is

1228
00:42:01,520 --> 00:42:04,000
dead and there's another one i kind of

1229
00:42:04,000 --> 00:42:06,160
shut it kind of like went off but

1230
00:42:06,160 --> 00:42:08,319
there's one in turn there's the one that

1231
00:42:08,319 --> 00:42:09,520
comes with

1232
00:42:09,520 --> 00:42:12,720
ida and it sucks gdb it sucks

1233
00:42:12,720 --> 00:42:15,599
um wind bag or wind dbg it sucks

1234
00:42:15,599 --> 00:42:17,359
no one likes i don't like them some

1235
00:42:17,359 --> 00:42:18,640
people use them but i think you're crazy

1236
00:42:18,640 --> 00:42:21,599
to use them this is the best one

1237
00:42:21,599 --> 00:42:23,359
it might be

1238
00:42:23,359 --> 00:42:25,040
like i said before we can just start

1239
00:42:25,040 --> 00:42:26,960
reverse engineering a program we need a

1240
00:42:26,960 --> 00:42:30,160
way to actually instantiate the program

1241
00:42:30,160 --> 00:42:32,560
i've written the small little skeleton

1242
00:42:32,560 --> 00:42:34,240
program that pretty much does the same

1243
00:42:34,240 --> 00:42:35,920
thing it makes it easier to just drag

1244
00:42:35,920 --> 00:42:38,240
and drop and run our code

1245
00:42:38,240 --> 00:42:41,119
this is our skeleton program

1246
00:42:41,119 --> 00:42:43,520
as you can see here it's i try to make

1247
00:42:43,520 --> 00:42:45,520
it as simple as possible

1248
00:42:45,520 --> 00:42:48,800
we have we're instantiating our dll file

1249
00:42:48,800 --> 00:42:50,800
we're calling load library to load it

1250
00:42:50,800 --> 00:42:52,319
into memory

1251
00:42:52,319 --> 00:42:54,640
we're instantiating the function

1252
00:42:54,640 --> 00:42:55,839
prototype

1253
00:42:55,839 --> 00:42:57,599
we're getting the proc address of the

1254
00:42:57,599 --> 00:42:59,440
function type i throw in a bunch of

1255
00:42:59,440 --> 00:43:01,359
knobs so it's easier to find and then i

1256
00:43:01,359 --> 00:43:03,359
call my thing and then i return i like

1257
00:43:03,359 --> 00:43:06,720
that return leap yeah

1258
00:43:06,720 --> 00:43:08,079
okay so

1259
00:43:08,079 --> 00:43:10,000
ideally we have a if we have an idea

1260
00:43:10,000 --> 00:43:11,359
that um

1261
00:43:11,359 --> 00:43:13,839
ideal if we i'm sorry if we have a fun

1262
00:43:13,839 --> 00:43:15,280
if we have a function we're trying to

1263
00:43:15,280 --> 00:43:16,800
reverse engineer it we're going to have

1264
00:43:16,800 --> 00:43:19,359
to single step into it well you single

1265
00:43:19,359 --> 00:43:21,040
step into a program to kind of get an

1266
00:43:21,040 --> 00:43:22,800
idea of what the program's doing and

1267
00:43:22,800 --> 00:43:24,160
that's how we do it

1268
00:43:24,160 --> 00:43:26,480
you can um if you were to just step over

1269
00:43:26,480 --> 00:43:28,079
the thing it'll just crash or whatever

1270
00:43:28,079 --> 00:43:30,800
we have no idea what it does so the idea

1271
00:43:30,800 --> 00:43:33,119
is we jump into our debugger and we step

1272
00:43:33,119 --> 00:43:35,280
in and we see what happens when we start

1273
00:43:35,280 --> 00:43:37,200
throwing random data at it it might

1274
00:43:37,200 --> 00:43:39,280
crash it might not if you pass an

1275
00:43:39,280 --> 00:43:40,800
integer to a program and it takes a

1276
00:43:40,800 --> 00:43:42,640
string it's probably going to crash or

1277
00:43:42,640 --> 00:43:44,160
you say you send a string and then you

1278
00:43:44,160 --> 00:43:46,319
don't send the right one and it crashes

1279
00:43:46,319 --> 00:43:48,880
so it's all about trial and error

1280
00:43:48,880 --> 00:43:50,640
okay so i come across this program it's

1281
00:43:50,640 --> 00:43:54,880
called mcdonald's shell execute

1282
00:43:54,880 --> 00:43:56,560
like i said the first thing i do is i

1283
00:43:56,560 --> 00:43:59,359
load it in i can show you why ida is

1284
00:43:59,359 --> 00:44:01,280
better than ghidra here

1285
00:44:01,280 --> 00:44:03,599
as you can see ida says i think it's

1286
00:44:03,599 --> 00:44:05,599
taking a wide character you know like a

1287
00:44:05,599 --> 00:44:07,599
character array

1288
00:44:07,599 --> 00:44:10,000
guidra thinks it takes a short a short

1289
00:44:10,000 --> 00:44:11,440
is like an integer i don't know see

1290
00:44:11,440 --> 00:44:12,480
that's the difference like i was saying

1291
00:44:12,480 --> 00:44:14,319
i pass an integer it crashes i pass a

1292
00:44:14,319 --> 00:44:16,880
string it works but it also crashes but

1293
00:44:16,880 --> 00:44:18,800
this is why ida in my opinion is better

1294
00:44:18,800 --> 00:44:21,359
than ghidra

1295
00:44:21,440 --> 00:44:24,000
since it says shell execute on it it's

1296
00:44:24,000 --> 00:44:26,880
mcafee shall execute so it means if i

1297
00:44:26,880 --> 00:44:29,359
run mine i'm no longer running mac i'm

1298
00:44:29,359 --> 00:44:31,440
not running shell execute on my box i'm

1299
00:44:31,440 --> 00:44:33,119
running mcafees so

1300
00:44:33,119 --> 00:44:35,520
please don't log my malware it's i'm

1301
00:44:35,520 --> 00:44:37,440
running it on on mcafee's would have

1302
00:44:37,440 --> 00:44:39,280
because mcafee's not malware mcafee is

1303
00:44:39,280 --> 00:44:41,440
the malware finder

1304
00:44:41,440 --> 00:44:43,680
anyway

1305
00:44:43,680 --> 00:44:46,160
msdn is your best absolute friend it'll

1306
00:44:46,160 --> 00:44:48,240
contain all the info on all the stuff

1307
00:44:48,240 --> 00:44:49,520
and you can follow along with what

1308
00:44:49,520 --> 00:44:51,520
things take and what things do

1309
00:44:51,520 --> 00:44:54,319
shell execute very popular functionality

1310
00:44:54,319 --> 00:44:56,000
it'll uh lets us do a lot of things it

1311
00:44:56,000 --> 00:44:59,119
lets us create processes it lets us

1312
00:44:59,119 --> 00:45:02,319
go to um go to web pages those are the

1313
00:45:02,319 --> 00:45:04,400
big two favorites

1314
00:45:04,400 --> 00:45:06,319
and this last one right here and cmd

1315
00:45:06,319 --> 00:45:07,760
show that's like whether we show the

1316
00:45:07,760 --> 00:45:09,040
window or not so you could literally

1317
00:45:09,040 --> 00:45:10,800
instantiate command prompt run some

1318
00:45:10,800 --> 00:45:12,400
commands on it and not show anyone

1319
00:45:12,400 --> 00:45:15,200
because it's now hidden

1320
00:45:15,520 --> 00:45:17,040
okay

1321
00:45:17,040 --> 00:45:19,119
as i said before when i'm reverse

1322
00:45:19,119 --> 00:45:20,400
engineering something i want to be able

1323
00:45:20,400 --> 00:45:22,640
to find stuff so if you go back to my

1324
00:45:22,640 --> 00:45:25,440
program here i added what's called a

1325
00:45:25,440 --> 00:45:28,319
knob sled problem that's a kind of a

1326
00:45:28,319 --> 00:45:30,800
popular thing with those you know those

1327
00:45:30,800 --> 00:45:32,640
hackers and buffer overflow writer

1328
00:45:32,640 --> 00:45:33,520
people

1329
00:45:33,520 --> 00:45:35,440
but i find a knob sled easy to find

1330
00:45:35,440 --> 00:45:36,880
internally in a program when i'm single

1331
00:45:36,880 --> 00:45:38,319
stepping through it

1332
00:45:38,319 --> 00:45:40,960
just so i know what the hell is going on

1333
00:45:40,960 --> 00:45:42,800
even if even if i wrote the program i

1334
00:45:42,800 --> 00:45:44,640
still i still can't always find where

1335
00:45:44,640 --> 00:45:47,440
the hell things are at but anyway you

1336
00:45:47,440 --> 00:45:49,040
can see right here this is our

1337
00:45:49,040 --> 00:45:51,920
instantiation of the same c code load

1338
00:45:51,920 --> 00:45:56,160
library get proc address take it run it

1339
00:45:56,160 --> 00:45:58,720
so what i'm going to do is i'm going to

1340
00:45:58,720 --> 00:46:00,240
pass it some data and i'm going to

1341
00:46:00,240 --> 00:46:03,680
single step into it and see what happens

1342
00:46:03,680 --> 00:46:06,079
so towards the bottom we see our call to

1343
00:46:06,079 --> 00:46:07,680
shell execute

1344
00:46:07,680 --> 00:46:10,480
we can see shell execute here is taking

1345
00:46:10,480 --> 00:46:12,160
something called open if you were to

1346
00:46:12,160 --> 00:46:14,160
refer to the documents which i didn't

1347
00:46:14,160 --> 00:46:15,760
include because i'm an idiot

1348
00:46:15,760 --> 00:46:18,560
but um the documents show that run means

1349
00:46:18,560 --> 00:46:20,800
it'll take like a

1350
00:46:20,800 --> 00:46:22,400
run means it'll attempt to open a

1351
00:46:22,400 --> 00:46:24,319
program you know like from the basically

1352
00:46:24,319 --> 00:46:25,839
if you're like trying to run something

1353
00:46:25,839 --> 00:46:27,680
at like the command line or not even the

1354
00:46:27,680 --> 00:46:29,920
command line 10 minutes all right i'm

1355
00:46:29,920 --> 00:46:31,680
speeding it up i'm almost done

1356
00:46:31,680 --> 00:46:33,280
okay so if you were to run something

1357
00:46:33,280 --> 00:46:34,800
from the command line not even the

1358
00:46:34,800 --> 00:46:36,400
command like the run box then it's going

1359
00:46:36,400 --> 00:46:37,760
to run it

1360
00:46:37,760 --> 00:46:40,000
so if i throw my aaa in there it's

1361
00:46:40,000 --> 00:46:41,520
probably not going to work

1362
00:46:41,520 --> 00:46:42,400
but

1363
00:46:42,400 --> 00:46:44,400
we at least know it's calling wrong we

1364
00:46:44,400 --> 00:46:46,240
at least know it's calling open which

1365
00:46:46,240 --> 00:46:47,599
means we can know that we can mess with

1366
00:46:47,599 --> 00:46:49,440
that

1367
00:46:49,440 --> 00:46:50,160
so

1368
00:46:50,160 --> 00:46:52,319
when i jumped in when i dived into a

1369
00:46:52,319 --> 00:46:54,720
particular function i saw right before

1370
00:46:54,720 --> 00:46:56,720
the open call i saw this thing right

1371
00:46:56,720 --> 00:46:59,680
here i dived into that and i see

1372
00:46:59,680 --> 00:47:02,400
internet crack url so it is my

1373
00:47:02,400 --> 00:47:05,599
understanding that if i pass aaa into

1374
00:47:05,599 --> 00:47:07,520
internet crack url you know which works

1375
00:47:07,520 --> 00:47:08,800
for like

1376
00:47:08,800 --> 00:47:11,040
you know like internet stuff then it's

1377
00:47:11,040 --> 00:47:12,400
probably not gonna work

1378
00:47:12,400 --> 00:47:14,720
so i've come to the assumption or

1379
00:47:14,720 --> 00:47:16,720
conclusion that you know maybe i could

1380
00:47:16,720 --> 00:47:18,480
pass um

1381
00:47:18,480 --> 00:47:21,040
urls to it and see what happens

1382
00:47:21,040 --> 00:47:24,319
so i have uh god hold on a sec this is

1383
00:47:24,319 --> 00:47:26,480
the video and now is the time to start

1384
00:47:26,480 --> 00:47:28,559
video one

1385
00:47:28,559 --> 00:47:31,760
where the frick is it

1386
00:47:33,040 --> 00:47:35,839
video one

1387
00:47:35,839 --> 00:47:36,720
okay

1388
00:47:36,720 --> 00:47:39,280
so i modify my thing now that we know it

1389
00:47:39,280 --> 00:47:42,960
takes uh urls so we're going to pass my

1390
00:47:42,960 --> 00:47:44,480
website to it

1391
00:47:44,480 --> 00:47:47,839
and see what happens run my code

1392
00:47:47,839 --> 00:47:49,920
blindly and it opens my website so i've

1393
00:47:49,920 --> 00:47:51,920
now successfully reverse engineered the

1394
00:47:51,920 --> 00:47:53,680
program and we've now found out that it

1395
00:47:53,680 --> 00:47:55,839
takes

1396
00:47:55,839 --> 00:47:59,599
urls instead of just ah

1397
00:47:59,839 --> 00:48:02,720
all right let's go back to this

1398
00:48:02,720 --> 00:48:03,680
okay

1399
00:48:03,680 --> 00:48:05,680
finally we have

1400
00:48:05,680 --> 00:48:09,440
download file from easy ui lib dot dll

1401
00:48:09,440 --> 00:48:12,880
it's brought to us by asus

1402
00:48:12,880 --> 00:48:14,800
we drop the thing into the disassembler

1403
00:48:14,800 --> 00:48:16,240
the first thing we see is we see it

1404
00:48:16,240 --> 00:48:19,280
takes a string a string an integer

1405
00:48:19,280 --> 00:48:20,720
we don't really know much

1406
00:48:20,720 --> 00:48:22,559
we don't know much else about that but

1407
00:48:22,559 --> 00:48:24,559
when i dive into the thing

1408
00:48:24,559 --> 00:48:27,200
um i see a bunch of weird code for

1409
00:48:27,200 --> 00:48:30,400
example post message format message that

1410
00:48:30,400 --> 00:48:33,200
means it's it's most likely a gui app

1411
00:48:33,200 --> 00:48:35,200
if i instantiate it as a normal program

1412
00:48:35,200 --> 00:48:36,480
and it's a gui app it's probably going

1413
00:48:36,480 --> 00:48:38,319
to break but i found it didn't break it

1414
00:48:38,319 --> 00:48:40,720
doesn't really care

1415
00:48:40,720 --> 00:48:43,280
so first thing i do is i modify my

1416
00:48:43,280 --> 00:48:44,800
skeleton program

1417
00:48:44,800 --> 00:48:46,800
be sure to always switch between 32 and

1418
00:48:46,800 --> 00:48:49,119
64-bit mode when compiling if this is a

1419
00:48:49,119 --> 00:48:51,680
64-bit compile if this is a 64-bit you

1420
00:48:51,680 --> 00:48:53,359
know dll file and you try and load it as

1421
00:48:53,359 --> 00:48:54,960
a 32-bit program it's just going to

1422
00:48:54,960 --> 00:48:56,240
crash you're going to like scream why

1423
00:48:56,240 --> 00:48:57,920
the is it working and then you come

1424
00:48:57,920 --> 00:49:00,160
to that conclusion so first thing i do

1425
00:49:00,160 --> 00:49:02,319
is i create i modify my skeleton program

1426
00:49:02,319 --> 00:49:05,280
i may use three different i use three

1427
00:49:05,280 --> 00:49:06,960
different um

1428
00:49:06,960 --> 00:49:09,680
arguments like i said string string int

1429
00:49:09,680 --> 00:49:10,559
so

1430
00:49:10,559 --> 00:49:12,720
string string ant and i'm gonna follow

1431
00:49:12,720 --> 00:49:14,160
along

1432
00:49:14,160 --> 00:49:17,920
so like i said i stop here dive in what

1433
00:49:17,920 --> 00:49:19,119
happens

1434
00:49:19,119 --> 00:49:20,640
so while i was single stepping this

1435
00:49:20,640 --> 00:49:22,160
thing it became quickly apparent that

1436
00:49:22,160 --> 00:49:24,079
this thing was massive there were a lot

1437
00:49:24,079 --> 00:49:26,000
of different routines it was jumping all

1438
00:49:26,000 --> 00:49:28,000
over the place what the is going on

1439
00:49:28,000 --> 00:49:29,599
the only part i saw towards the

1440
00:49:29,599 --> 00:49:31,040
beginning was something called wait for

1441
00:49:31,040 --> 00:49:33,200
single object wait for a single object

1442
00:49:33,200 --> 00:49:35,280
is this thing it's for threading i don't

1443
00:49:35,280 --> 00:49:36,480
know if you know anything about

1444
00:49:36,480 --> 00:49:37,760
threading they never teach you about

1445
00:49:37,760 --> 00:49:39,119
threading when you're taking programming

1446
00:49:39,119 --> 00:49:40,960
classes because it sucks

1447
00:49:40,960 --> 00:49:43,200
threading is basically like you have a

1448
00:49:43,200 --> 00:49:46,000
program um okay like this so

1449
00:49:46,000 --> 00:49:48,079
imagine you have a program right and you

1450
00:49:48,079 --> 00:49:50,400
like say come come run some really

1451
00:49:50,400 --> 00:49:52,160
complex program

1452
00:49:52,160 --> 00:49:54,240
some complex code you press start and

1453
00:49:54,240 --> 00:49:55,920
then you try and move the window and

1454
00:49:55,920 --> 00:49:58,000
then it says it's uh not responding and

1455
00:49:58,000 --> 00:49:59,119
it crashes

1456
00:49:59,119 --> 00:50:01,119
yeah that sucks right but so someone

1457
00:50:01,119 --> 00:50:02,640
came up with this thing called threading

1458
00:50:02,640 --> 00:50:05,119
right so you have a you have a jobs and

1459
00:50:05,119 --> 00:50:06,480
code that will run in the background

1460
00:50:06,480 --> 00:50:08,079
it'll do this so the thread will

1461
00:50:08,079 --> 00:50:10,079
basically like run that so that way you

1462
00:50:10,079 --> 00:50:11,280
can move the window around or do

1463
00:50:11,280 --> 00:50:12,559
whatever do whatever it breaks up

1464
00:50:12,559 --> 00:50:14,480
functionality so we can come to the

1465
00:50:14,480 --> 00:50:16,640
assumption that perhaps it's calling

1466
00:50:16,640 --> 00:50:18,800
some sort of thread in order to download

1467
00:50:18,800 --> 00:50:22,000
code or download a file

1468
00:50:22,000 --> 00:50:23,280
okay

1469
00:50:23,280 --> 00:50:25,839
so i have this idea i think um threading

1470
00:50:25,839 --> 00:50:28,160
so i'm assuming the dll the uh windows

1471
00:50:28,160 --> 00:50:30,800
30 win32 code for for create thread

1472
00:50:30,800 --> 00:50:32,800
might be present somewhere

1473
00:50:32,800 --> 00:50:35,680
ida sees the reference to it but no

1474
00:50:35,680 --> 00:50:37,520
reference like it'll see

1475
00:50:37,520 --> 00:50:40,480
ida will see the import to it it'll look

1476
00:50:40,480 --> 00:50:42,319
for references to it but it's not

1477
00:50:42,319 --> 00:50:44,079
anywhere that really sucks so it's being

1478
00:50:44,079 --> 00:50:46,720
called some other crazy way

1479
00:50:46,720 --> 00:50:48,480
so when i'm running through the thing

1480
00:50:48,480 --> 00:50:50,240
running forward isn't really working so

1481
00:50:50,240 --> 00:50:52,160
i'm going to try working backward so if

1482
00:50:52,160 --> 00:50:53,599
you're single stepping with your program

1483
00:50:53,599 --> 00:50:54,800
you're diving in you're not really

1484
00:50:54,800 --> 00:50:56,640
finding anything that you want then

1485
00:50:56,640 --> 00:50:57,680
you're going to try and like go

1486
00:50:57,680 --> 00:50:58,880
backwards

1487
00:50:58,880 --> 00:51:01,119
and maybe have some better get some

1488
00:51:01,119 --> 00:51:02,880
better idea of what's going on so we

1489
00:51:02,880 --> 00:51:05,520
know the program is called download file

1490
00:51:05,520 --> 00:51:07,040
and we know a little if we know a little

1491
00:51:07,040 --> 00:51:10,400
about win32 code internet read file is

1492
00:51:10,400 --> 00:51:11,520
typically what you're going to call in

1493
00:51:11,520 --> 00:51:12,640
order to download something off the

1494
00:51:12,640 --> 00:51:14,960
internet

1495
00:51:14,960 --> 00:51:16,640
see like i said this is the first this

1496
00:51:16,640 --> 00:51:19,839
is the perfect thing it aligns perfectly

1497
00:51:19,839 --> 00:51:22,319
internet read file which i found like

1498
00:51:22,319 --> 00:51:23,839
which i found and this is the imports

1499
00:51:23,839 --> 00:51:25,680
table by the way i found it inside

1500
00:51:25,680 --> 00:51:27,920
internet file it takes a file

1501
00:51:27,920 --> 00:51:30,160
takes a fl takes a buffer takes that

1502
00:51:30,160 --> 00:51:31,520
basically it's going to download the

1503
00:51:31,520 --> 00:51:32,400
file

1504
00:51:32,400 --> 00:51:34,160
usually it's used in conjunction with

1505
00:51:34,160 --> 00:51:36,000
one of these three i looked it up

1506
00:51:36,000 --> 00:51:37,599
there's only this one these other two

1507
00:51:37,599 --> 00:51:39,760
are not inside

1508
00:51:39,760 --> 00:51:40,720
so

1509
00:51:40,720 --> 00:51:42,319
open it up in our program look for

1510
00:51:42,319 --> 00:51:44,240
external references to it we find this

1511
00:51:44,240 --> 00:51:46,720
little function here and we see this is

1512
00:51:46,720 --> 00:51:48,319
like the craziness

1513
00:51:48,319 --> 00:51:49,760
of the code

1514
00:51:49,760 --> 00:51:52,319
so once we have this particular area we

1515
00:51:52,319 --> 00:51:54,960
can then you know like set breakpoints

1516
00:51:54,960 --> 00:51:56,240
on it kind of get an idea of what's

1517
00:51:56,240 --> 00:51:57,440
going on

1518
00:51:57,440 --> 00:51:58,640
so

1519
00:51:58,640 --> 00:52:00,400
so as so at the very beginning i was

1520
00:52:00,400 --> 00:52:02,240
right i realized right here that they

1521
00:52:02,240 --> 00:52:04,480
are doing um create so what i did was i

1522
00:52:04,480 --> 00:52:06,240
basically i traced backwards from this

1523
00:52:06,240 --> 00:52:08,800
one i come across this is what's calling

1524
00:52:08,800 --> 00:52:10,480
it and they're using some crazy thing

1525
00:52:10,480 --> 00:52:12,960
called afx begin thread afx begin thread

1526
00:52:12,960 --> 00:52:15,040
you know it's a win32 api but it's not

1527
00:52:15,040 --> 00:52:16,640
called the traditional way microsoft and

1528
00:52:16,640 --> 00:52:18,079
they're ready knowledge decided to add

1529
00:52:18,079 --> 00:52:20,160
something called mfc to make programming

1530
00:52:20,160 --> 00:52:21,760
even more complicated

1531
00:52:21,760 --> 00:52:22,720
and

1532
00:52:22,720 --> 00:52:24,079
this is how they're doing it this is how

1533
00:52:24,079 --> 00:52:25,440
they're instantiating a new thread i was

1534
00:52:25,440 --> 00:52:26,720
right

1535
00:52:26,720 --> 00:52:29,040
so run to our external references from

1536
00:52:29,040 --> 00:52:31,839
that and we see download file as calling

1537
00:52:31,839 --> 00:52:33,359
that particular instantiation of

1538
00:52:33,359 --> 00:52:34,800
createthread sorry i'm like trying to go

1539
00:52:34,800 --> 00:52:36,000
through as fast as possible i only got

1540
00:52:36,000 --> 00:52:37,520
three minutes i only have a few more

1541
00:52:37,520 --> 00:52:39,280
slides i swear

1542
00:52:39,280 --> 00:52:41,119
okay so we

1543
00:52:41,119 --> 00:52:43,440
we have our code we have exa we have an

1544
00:52:43,440 --> 00:52:45,599
idea of where we think we're at you know

1545
00:52:45,599 --> 00:52:47,520
where it might call this code

1546
00:52:47,520 --> 00:52:49,359
and we we traced it backwards so we're

1547
00:52:49,359 --> 00:52:51,359
creating a new thread so what we're

1548
00:52:51,359 --> 00:52:52,480
going to do is we're going to set

1549
00:52:52,480 --> 00:52:54,480
breakpoints around this particular area

1550
00:52:54,480 --> 00:52:56,800
and follow the data we passed to it so

1551
00:52:56,800 --> 00:52:58,400
going back to our original program if we

1552
00:52:58,400 --> 00:53:00,720
have you know ah

1553
00:53:00,720 --> 00:53:03,119
numbers and all that we should see it

1554
00:53:03,119 --> 00:53:05,920
here around internet read file

1555
00:53:05,920 --> 00:53:08,079
so going back to our thing

1556
00:53:08,079 --> 00:53:10,000
internet read file like i said takes a

1557
00:53:10,000 --> 00:53:12,559
handle from an open request takes the

1558
00:53:12,559 --> 00:53:15,200
url and we're going to try and see what

1559
00:53:15,200 --> 00:53:16,880
the hell's inside when we break point on

1560
00:53:16,880 --> 00:53:18,160
it

1561
00:53:18,160 --> 00:53:21,040
so the first thing i saw i saw internet

1562
00:53:21,040 --> 00:53:22,800
read file

1563
00:53:22,800 --> 00:53:25,440
i saw my code i saw this thing at the

1564
00:53:25,440 --> 00:53:27,280
bottom it said right i saw something

1565
00:53:27,280 --> 00:53:29,440
inside that was called dynamically

1566
00:53:29,440 --> 00:53:31,599
so sometimes you'll find in your code

1567
00:53:31,599 --> 00:53:33,440
you won't see actual calls you'll see

1568
00:53:33,440 --> 00:53:35,200
something called like a register and

1569
00:53:35,200 --> 00:53:36,960
then you have no idea what it is so in

1570
00:53:36,960 --> 00:53:38,240
this particular case you're only going

1571
00:53:38,240 --> 00:53:39,839
to find it by stepping in a debugger and

1572
00:53:39,839 --> 00:53:41,680
the only way you can actually look is by

1573
00:53:41,680 --> 00:53:43,359
single stepping and finding it in this

1574
00:53:43,359 --> 00:53:44,800
particular case i'm like wondering what

1575
00:53:44,800 --> 00:53:46,480
the is that so i didn't know it was

1576
00:53:46,480 --> 00:53:48,880
i um i doubt i dove into this and then i

1577
00:53:48,880 --> 00:53:50,400
found this call here

1578
00:53:50,400 --> 00:53:52,400
write file so it would make sense you

1579
00:53:52,400 --> 00:53:54,559
would call write file in tandem with uh

1580
00:53:54,559 --> 00:53:55,920
internet read file you know because you

1581
00:53:55,920 --> 00:53:58,240
got to save your somewhere right

1582
00:53:58,240 --> 00:53:59,920
so on a whim i was wondering what kind

1583
00:53:59,920 --> 00:54:02,240
of data can i pass to it so in order to

1584
00:54:02,240 --> 00:54:04,400
save time or if you're sorry if you're

1585
00:54:04,400 --> 00:54:06,480
attempting to reverse engineer a program

1586
00:54:06,480 --> 00:54:08,160
and you want to know what data it takes

1587
00:54:08,160 --> 00:54:09,520
and you have a kind of a vague idea

1588
00:54:09,520 --> 00:54:11,119
what's going on you can speed up the

1589
00:54:11,119 --> 00:54:13,440
process considerably if you just pass

1590
00:54:13,440 --> 00:54:15,599
certain data to it and see what happens

1591
00:54:15,599 --> 00:54:18,079
i see three func i see three different

1592
00:54:18,079 --> 00:54:20,960
arguments i pass data to it

1593
00:54:20,960 --> 00:54:23,440
i add a url to one side url the other

1594
00:54:23,440 --> 00:54:24,720
side so maybe one of them is a

1595
00:54:24,720 --> 00:54:26,319
destination directory and i say it

1596
00:54:26,319 --> 00:54:28,000
let's try it and actually that's what

1597
00:54:28,000 --> 00:54:29,280
happened

1598
00:54:29,280 --> 00:54:31,200
see here towards the bottom i passed

1599
00:54:31,200 --> 00:54:33,200
something to it i passed uh i think i

1600
00:54:33,200 --> 00:54:35,920
passed like my website or something like

1601
00:54:35,920 --> 00:54:38,319
that index and it downloaded something

1602
00:54:38,319 --> 00:54:40,319
and it had this weird file name i found

1603
00:54:40,319 --> 00:54:42,000
i could not control the file name it

1604
00:54:42,000 --> 00:54:43,920
just threw in a bunch of madness i don't

1605
00:54:43,920 --> 00:54:45,520
think it knows what data it is so i

1606
00:54:45,520 --> 00:54:47,200
don't think it's a bunch of less than or

1607
00:54:47,200 --> 00:54:50,480
equal or less than signs but whatever

1608
00:54:50,480 --> 00:54:52,880
run the code seems to run open it up

1609
00:54:52,880 --> 00:54:54,720
it's a jpeg file

1610
00:54:54,720 --> 00:54:56,880
yeah so here i have my video i know i'm

1611
00:54:56,880 --> 00:54:58,480
going as fast as i can but you have to

1612
00:54:58,480 --> 00:55:00,480
admit though you you guys like had me

1613
00:55:00,480 --> 00:55:01,839
set up like

1614
00:55:01,839 --> 00:55:03,040
five minutes late so i have a little bit

1615
00:55:03,040 --> 00:55:05,119
of time

1616
00:55:05,119 --> 00:55:06,960
you you robbed me of five minutes so i'm

1617
00:55:06,960 --> 00:55:10,000
gonna use those five minutes

1618
00:55:10,000 --> 00:55:12,559
okay like i said open up my skeleton

1619
00:55:12,559 --> 00:55:13,599
program

1620
00:55:13,599 --> 00:55:16,160
blindly going at it

1621
00:55:16,160 --> 00:55:18,160
take my website

1622
00:55:18,160 --> 00:55:20,240
throw it in there add it in the

1623
00:55:20,240 --> 00:55:21,920
destination directory let's see what

1624
00:55:21,920 --> 00:55:23,520
happens okay

1625
00:55:23,520 --> 00:55:26,319
testing nothing open it up

1626
00:55:26,319 --> 00:55:28,079
there's that weird file with less than

1627
00:55:28,079 --> 00:55:29,040
signs

1628
00:55:29,040 --> 00:55:30,799
we think we know what it is i know what

1629
00:55:30,799 --> 00:55:33,359
it is i think it's a jpeg file so i name

1630
00:55:33,359 --> 00:55:36,000
it you know whatever.jpg and now we've

1631
00:55:36,000 --> 00:55:38,000
actually managed to reverse engineer a

1632
00:55:38,000 --> 00:55:39,119
program where we don't know what the

1633
00:55:39,119 --> 00:55:41,119
hell it does and we've actually managed

1634
00:55:41,119 --> 00:55:44,319
it to make it download code

1635
00:55:44,319 --> 00:55:46,640
and it's all undocumented that's great

1636
00:55:46,640 --> 00:55:48,640
okay so did it work yes it worked so

1637
00:55:48,640 --> 00:55:51,119
like we said the function takes the file

1638
00:55:51,119 --> 00:55:53,839
the file the function takes the file

1639
00:55:53,839 --> 00:55:54,880
name

1640
00:55:54,880 --> 00:55:56,960
sorry let me start again hell yeah the

1641
00:55:56,960 --> 00:55:58,559
file name

1642
00:55:58,559 --> 00:55:59,839
of the

1643
00:55:59,839 --> 00:56:02,240
 it sorry

1644
00:56:02,240 --> 00:56:05,119
take that go forward come on okay so now

1645
00:56:05,119 --> 00:56:06,880
we know and knowing is half the battle

1646
00:56:06,880 --> 00:56:08,799
and these are the works cited it's a i'm

1647
00:56:08,799 --> 00:56:10,480
not always smoking crack here but if

1648
00:56:10,480 --> 00:56:12,160
anyone has any questions i'll talk to

1649
00:56:12,160 --> 00:56:13,599
you after this i know i only have like

1650
00:56:13,599 --> 00:56:15,119
one minute left

1651
00:56:15,119 --> 00:56:16,400
but um

1652
00:56:16,400 --> 00:56:18,799
yeah a lot of reverse engineering dll

1653
00:56:18,799 --> 00:56:20,799
files it's uh it's a lot of it's blind

1654
00:56:20,799 --> 00:56:21,839
what you're doing is you're taking

1655
00:56:21,839 --> 00:56:23,520
random data throwing in and seeing what

1656
00:56:23,520 --> 00:56:25,200
happens and hoping for the best

1657
00:56:25,200 --> 00:56:27,359
um in my particular case i go after a

1658
00:56:27,359 --> 00:56:29,359
lot of things that look interesting

1659
00:56:29,359 --> 00:56:31,359
if i'm writing malware for example i

1660
00:56:31,359 --> 00:56:32,720
don't write malware all the time only

1661
00:56:32,720 --> 00:56:34,240
sometimes

1662
00:56:34,240 --> 00:56:36,079
i'm looking for functions that download

1663
00:56:36,079 --> 00:56:37,839
files that run files here's looking for

1664
00:56:37,839 --> 00:56:39,760
things that run when exact create

1665
00:56:39,760 --> 00:56:42,160
process shell execute those are the best

1666
00:56:42,160 --> 00:56:44,079
thing to reverse engineer because then

1667
00:56:44,079 --> 00:56:45,520
you can imitate other program

1668
00:56:45,520 --> 00:56:46,960
functionality without actually looking

1669
00:56:46,960 --> 00:56:48,480
without it actually looking like your

1670
00:56:48,480 --> 00:56:49,599
own

1671
00:56:49,599 --> 00:56:50,720
so

1672
00:56:50,720 --> 00:56:52,480
like i said in this particular context

1673
00:56:52,480 --> 00:56:54,319
if i'm running like uh if i'm

1674
00:56:54,319 --> 00:56:56,400
downloading malware under the context of

1675
00:56:56,400 --> 00:56:59,119
mcafee who the hell would do that right

1676
00:56:59,119 --> 00:57:00,160
so

1677
00:57:00,160 --> 00:57:01,920
that's why we do it

1678
00:57:01,920 --> 00:57:03,440
do i have any particular questions in

1679
00:57:03,440 --> 00:57:04,960
the two minutes or one minute i have

1680
00:57:04,960 --> 00:57:06,079
left

1681
00:57:06,079 --> 00:57:08,079
or is that like way too over everyone

1682
00:57:08,079 --> 00:57:10,640
else's head

1683
00:57:10,880 --> 00:57:12,680
okay no questions got it

1684
00:57:12,680 --> 00:57:14,240
[Applause]

1685
00:57:14,240 --> 00:57:16,959
oh my god

1686
00:57:17,920 --> 00:57:19,680
oh my god

1687
00:57:19,680 --> 00:57:23,078
way too technical

