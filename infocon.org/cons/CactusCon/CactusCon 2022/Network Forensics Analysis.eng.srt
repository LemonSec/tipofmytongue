1
00:00:00,960 --> 00:00:02,879
hello and welcome to the network

2
00:00:02,879 --> 00:00:05,040
forensics analysis talk

3
00:00:05,040 --> 00:00:07,440
my name is ramya talhi i am senior

4
00:00:07,440 --> 00:00:09,840
incident response consultant at cisco

5
00:00:09,840 --> 00:00:13,040
telus intelligence group

6
00:00:14,160 --> 00:00:16,239
for today agenda will be talking about

7
00:00:16,239 --> 00:00:17,840
couple of topics

8
00:00:17,840 --> 00:00:20,080
we'll be starting with defining the

9
00:00:20,080 --> 00:00:22,480
network forensics what it is and what it

10
00:00:22,480 --> 00:00:23,519
does

11
00:00:23,519 --> 00:00:25,840
the second topic for the tools and

12
00:00:25,840 --> 00:00:28,480
platforms that is available and can be

13
00:00:28,480 --> 00:00:31,920
used widely the third topic we will be

14
00:00:31,920 --> 00:00:34,640
talking about the dilemma with some

15
00:00:34,640 --> 00:00:37,760
encrypted protocols such as tls

16
00:00:37,760 --> 00:00:41,680
ssh rdb etc and how we can overcome

17
00:00:41,680 --> 00:00:43,600
those challenges

18
00:00:43,600 --> 00:00:47,120
and the fourth topic is for real world

19
00:00:47,120 --> 00:00:49,760
apt advanced persistent

20
00:00:49,760 --> 00:00:52,079
threat attacks scenarios

21
00:00:52,079 --> 00:00:54,160
where they are using

22
00:00:54,160 --> 00:00:56,559
and utilizing some encrypted protocols

23
00:00:56,559 --> 00:01:00,480
such as dns over https to hide their

24
00:01:00,480 --> 00:01:03,120
compromise

25
00:01:03,680 --> 00:01:06,080
so let's start with network forensic

26
00:01:06,080 --> 00:01:07,920
definition i have found a good

27
00:01:07,920 --> 00:01:10,080
definition in wikipedia for network

28
00:01:10,080 --> 00:01:12,560
forensics which says

29
00:01:12,560 --> 00:01:15,759
it's a sub-branch of digital forensics

30
00:01:15,759 --> 00:01:18,400
relating to the monitoring and analysis

31
00:01:18,400 --> 00:01:20,400
of computer network traffic for the

32
00:01:20,400 --> 00:01:23,040
purpose of information gathering legal

33
00:01:23,040 --> 00:01:26,240
evidence or intelligent detection

34
00:01:26,240 --> 00:01:28,720
so network projects is a branch of

35
00:01:28,720 --> 00:01:31,119
digital projects beside

36
00:01:31,119 --> 00:01:32,640
other

37
00:01:32,640 --> 00:01:36,159
hosts memory mobile phones etc

38
00:01:36,159 --> 00:01:39,360
and once we combine a network forensics

39
00:01:39,360 --> 00:01:43,040
with other datasets like host or memory

40
00:01:43,040 --> 00:01:45,520
we would generate a good visibility and

41
00:01:45,520 --> 00:01:48,798
investigation journey

42
00:01:49,200 --> 00:01:50,960
all right so couple of tools and

43
00:01:50,960 --> 00:01:53,119
platforms we have

44
00:01:53,119 --> 00:01:54,720
to perform the network forensics

45
00:01:54,720 --> 00:01:57,200
analysis job the first tool which is

46
00:01:57,200 --> 00:01:59,040
very commonly known

47
00:01:59,040 --> 00:02:02,479
uh in this field uh called wireshark

48
00:02:02,479 --> 00:02:05,680
wireshark is a tool to read

49
00:02:05,680 --> 00:02:06,560
and

50
00:02:06,560 --> 00:02:10,000
filter the investigate any b cap file or

51
00:02:10,000 --> 00:02:13,200
trace files if you have a b cap file the

52
00:02:13,200 --> 00:02:16,000
first thing you go into wi-fi to just

53
00:02:16,000 --> 00:02:17,599
lock it to what

54
00:02:17,599 --> 00:02:19,120
what's going on

55
00:02:19,120 --> 00:02:21,760
as a conversation also you can look into

56
00:02:21,760 --> 00:02:24,319
statistics you can walk into end point

57
00:02:24,319 --> 00:02:27,440
etc as we will see in the next slide

58
00:02:27,440 --> 00:02:30,239
uh it has another

59
00:02:30,239 --> 00:02:31,920
version called t-shark which is a

60
00:02:31,920 --> 00:02:33,760
command-line version

61
00:02:33,760 --> 00:02:35,599
you it's really

62
00:02:35,599 --> 00:02:38,000
a useful tool if if you are looking into

63
00:02:38,000 --> 00:02:41,599
a scriptable option for this tool

64
00:02:41,599 --> 00:02:44,879
tcp dump is exactly as t-sharp does but

65
00:02:44,879 --> 00:02:46,720
it have

66
00:02:46,720 --> 00:02:49,760
it is based on the ppf filter

67
00:02:49,760 --> 00:02:51,360
and also it doesn't understand

68
00:02:51,360 --> 00:02:54,560
application layer it is much faster than

69
00:02:54,560 --> 00:02:57,680
let's say tshark in reading huge pcap

70
00:02:57,680 --> 00:02:59,360
file

71
00:02:59,360 --> 00:03:01,920
but it has a limitation to understand

72
00:03:01,920 --> 00:03:02,879
layer

73
00:03:02,879 --> 00:03:04,480
7 so that's why

74
00:03:04,480 --> 00:03:07,679
the speed come from

75
00:03:08,159 --> 00:03:10,159
sometimes you need to swap

76
00:03:10,159 --> 00:03:13,680
between them so you need to use tcp dump

77
00:03:13,680 --> 00:03:16,080
to slice this packet back and send it to

78
00:03:16,080 --> 00:03:18,319
the oil shaft called d-shock and vice

79
00:03:18,319 --> 00:03:19,920
versa

80
00:03:19,920 --> 00:03:22,319
zeke is a fantastic tool to read the

81
00:03:22,319 --> 00:03:24,239
metadata of

82
00:03:24,239 --> 00:03:26,239
most of the protocols

83
00:03:26,239 --> 00:03:29,280
used in the internet things like tls ssh

84
00:03:29,280 --> 00:03:31,280
rdb http

85
00:03:31,280 --> 00:03:34,239
whatever protocol is there it has

86
00:03:34,239 --> 00:03:36,799
ability to read it and also to provide

87
00:03:36,799 --> 00:03:37,840
you with

88
00:03:37,840 --> 00:03:40,720
information uh things like

89
00:03:40,720 --> 00:03:42,959
if you look into tls

90
00:03:42,959 --> 00:03:44,640
like the issuer

91
00:03:44,640 --> 00:03:46,159
um

92
00:03:46,159 --> 00:03:50,239
also it provides you with the hash etc

93
00:03:50,239 --> 00:03:51,920
for the ideas sometimes we are looking

94
00:03:51,920 --> 00:03:54,239
into scanning the pickup without going

95
00:03:54,239 --> 00:03:56,400
into the details

96
00:03:56,400 --> 00:03:59,040
so we are looking into signature-based

97
00:03:59,040 --> 00:04:00,720
dedication rules

98
00:04:00,720 --> 00:04:03,360
things like snorts or rikata it is a

99
00:04:03,360 --> 00:04:05,439
good option to have

100
00:04:05,439 --> 00:04:08,959
to pass the pickup through the ideas

101
00:04:08,959 --> 00:04:11,280
so you can just install snort

102
00:04:11,280 --> 00:04:12,799
or

103
00:04:12,799 --> 00:04:14,879
sorry cutter to

104
00:04:14,879 --> 00:04:17,519
scan your pickup

105
00:04:17,519 --> 00:04:19,279
network miner is a nice tool to

106
00:04:19,279 --> 00:04:21,279
visualize the picab you you are just

107
00:04:21,279 --> 00:04:23,759
importing the v cabin to this tool and

108
00:04:23,759 --> 00:04:25,600
it will provide you all the information

109
00:04:25,600 --> 00:04:27,600
without

110
00:04:27,600 --> 00:04:28,880
without knowing anything about the

111
00:04:28,880 --> 00:04:30,320
pickup just

112
00:04:30,320 --> 00:04:32,320
going through the tabs and you'll see

113
00:04:32,320 --> 00:04:35,520
much and tons of information

114
00:04:35,520 --> 00:04:36,960
for example if there is any picture

115
00:04:36,960 --> 00:04:38,960
being traversed in clear text it will be

116
00:04:38,960 --> 00:04:41,600
available there you can see export lock

117
00:04:41,600 --> 00:04:43,520
into the that picture

118
00:04:43,520 --> 00:04:47,520
the same from the password etc

119
00:04:48,560 --> 00:04:50,720
okay so let's look into the network

120
00:04:50,720 --> 00:04:53,600
forex challenges so we we got couple of

121
00:04:53,600 --> 00:04:55,840
uh network forensics challenges in here

122
00:04:55,840 --> 00:04:57,600
which have

123
00:04:57,600 --> 00:04:59,759
a big impact into the network forensics

124
00:04:59,759 --> 00:05:01,360
investigation

125
00:05:01,360 --> 00:05:03,759
also for network monitoring for any

126
00:05:03,759 --> 00:05:04,880
environment

127
00:05:04,880 --> 00:05:07,600
uh we will discuss about those

128
00:05:07,600 --> 00:05:10,639
points and how we can overcome each of

129
00:05:10,639 --> 00:05:12,880
them

130
00:05:13,039 --> 00:05:14,160
we'll be discussing a couple of

131
00:05:14,160 --> 00:05:16,560
challenges that might limit the ability

132
00:05:16,560 --> 00:05:20,240
to investigate the network traffic

133
00:05:20,240 --> 00:05:23,840
the first one is inventory assets

134
00:05:23,840 --> 00:05:26,320
collecting the packet capture we need to

135
00:05:26,320 --> 00:05:28,960
have a list of inventory assets if we

136
00:05:28,960 --> 00:05:31,199
don't know for example uh where is the

137
00:05:31,199 --> 00:05:32,639
critical surface

138
00:05:32,639 --> 00:05:36,000
or servers that we are aiming to

139
00:05:36,000 --> 00:05:37,759
have

140
00:05:37,759 --> 00:05:40,240
the packet capture out of it we would

141
00:05:40,240 --> 00:05:43,280
not be able to collect it and acquire it

142
00:05:43,280 --> 00:05:45,600
or even monitor it

143
00:05:45,600 --> 00:05:48,080
so if we don't know the asset

144
00:05:48,080 --> 00:05:50,720
that we have then we don't know what to

145
00:05:50,720 --> 00:05:53,440
protect and what to monitor as well

146
00:05:53,440 --> 00:05:55,199
the the second thing is the network

147
00:05:55,199 --> 00:05:57,600
baselining baselining here we mean

148
00:05:57,600 --> 00:06:00,319
uh we need to understand our network

149
00:06:00,319 --> 00:06:02,639
very well especially in terms of

150
00:06:02,639 --> 00:06:05,440
throughput also the protocol being used

151
00:06:05,440 --> 00:06:07,440
a couple of statistics that we have and

152
00:06:07,440 --> 00:06:11,199
we will see an example in the next slide

153
00:06:11,199 --> 00:06:16,080
encryption so encryption is the most

154
00:06:16,080 --> 00:06:19,680
challenge that we have in network

155
00:06:19,680 --> 00:06:21,680
the sophistication side

156
00:06:21,680 --> 00:06:24,639
things like tls search rdb and other

157
00:06:24,639 --> 00:06:26,880
protocols other encrypted protocol as

158
00:06:26,880 --> 00:06:27,759
well

159
00:06:27,759 --> 00:06:30,560
um that attacker now uh

160
00:06:30,560 --> 00:06:31,840
utilize

161
00:06:31,840 --> 00:06:35,600
things like drh which is dns over https

162
00:06:35,600 --> 00:06:38,240
where they hide their traffic

163
00:06:38,240 --> 00:06:41,039
based on this protocol so we'll see

164
00:06:41,039 --> 00:06:43,840
how we can utilize some

165
00:06:43,840 --> 00:06:46,319
tricks and tips to understand the

166
00:06:46,319 --> 00:06:49,039
pattern of the attackers

167
00:06:49,039 --> 00:06:50,720
the last thing is the data source is

168
00:06:50,720 --> 00:06:53,039
availability and usability we need to

169
00:06:53,039 --> 00:06:54,080
have the

170
00:06:54,080 --> 00:06:55,599
data sources

171
00:06:55,599 --> 00:06:58,000
to be available and usable

172
00:06:58,000 --> 00:07:01,120
so both of them need to be

173
00:07:01,120 --> 00:07:04,400
existed in place

174
00:07:06,080 --> 00:07:08,319
if you look into the cis cyber security

175
00:07:08,319 --> 00:07:10,720
control you will see the control number

176
00:07:10,720 --> 00:07:13,440
one is inventive and control of interval

177
00:07:13,440 --> 00:07:15,520
wise assets

178
00:07:15,520 --> 00:07:18,800
so this spot the priority number one for

179
00:07:18,800 --> 00:07:21,199
this inventory assets so figure out your

180
00:07:21,199 --> 00:07:23,520
assets that matter

181
00:07:23,520 --> 00:07:24,560
can be

182
00:07:24,560 --> 00:07:27,039
application can be safe forms can be

183
00:07:27,039 --> 00:07:28,319
services

184
00:07:28,319 --> 00:07:30,720
so find out the important and the

185
00:07:30,720 --> 00:07:33,360
critical mission of your business

186
00:07:33,360 --> 00:07:35,599
then

187
00:07:35,599 --> 00:07:38,080
after that you have the all information

188
00:07:38,080 --> 00:07:39,440
about them

189
00:07:39,440 --> 00:07:42,080
make sure it's protected make sure it is

190
00:07:42,080 --> 00:07:45,039
monitored so in this topic we'll focus

191
00:07:45,039 --> 00:07:46,160
on

192
00:07:46,160 --> 00:07:48,479
the monitoring and investigation as well

193
00:07:48,479 --> 00:07:50,800
so finding out the inventory having the

194
00:07:50,800 --> 00:07:52,879
inventory in place having all the

195
00:07:52,879 --> 00:07:55,520
details about them

196
00:07:55,520 --> 00:07:57,120
patch them

197
00:07:57,120 --> 00:07:58,479
back up them

198
00:07:58,479 --> 00:07:59,520
test them

199
00:07:59,520 --> 00:08:01,120
all these very

200
00:08:01,120 --> 00:08:03,919
critical information and critical

201
00:08:03,919 --> 00:08:07,680
mission to have in your environment

202
00:08:09,039 --> 00:08:10,960
find out the pattern to find

203
00:08:10,960 --> 00:08:13,360
abnormalities in our network

204
00:08:13,360 --> 00:08:15,840
does need a network-based mining we can

205
00:08:15,840 --> 00:08:18,080
look into our protocols

206
00:08:18,080 --> 00:08:20,319
traverse to our network we can look into

207
00:08:20,319 --> 00:08:22,240
that robot we can look into default

208
00:08:22,240 --> 00:08:25,120
statistics to find out those

209
00:08:25,120 --> 00:08:27,440
metrics to identify

210
00:08:27,440 --> 00:08:29,360
the maliciousness of the traffic in our

211
00:08:29,360 --> 00:08:31,520
network

212
00:08:31,520 --> 00:08:33,519
for an example for the packet length we

213
00:08:33,519 --> 00:08:36,479
can log into the dns if the packet of

214
00:08:36,479 --> 00:08:38,080
the dns length

215
00:08:38,080 --> 00:08:41,760
exceeded that amount of identified

216
00:08:41,760 --> 00:08:44,880
packet length that mean we need to have

217
00:08:44,880 --> 00:08:46,399
to receive

218
00:08:46,399 --> 00:08:48,480
alerts

219
00:08:48,480 --> 00:08:51,519
and it should be a red flag

220
00:08:51,519 --> 00:08:52,480
also

221
00:08:52,480 --> 00:08:54,640
the iteration the same goes for payload

222
00:08:54,640 --> 00:08:57,120
and toby if it's higher that's mean

223
00:08:57,120 --> 00:08:59,760
disabled investigation egress and

224
00:08:59,760 --> 00:09:01,600
ingress as we can see here we can

225
00:09:01,600 --> 00:09:04,480
identify exfiltration in this picture we

226
00:09:04,480 --> 00:09:05,839
can see

227
00:09:05,839 --> 00:09:08,959
from the end of january we have spike

228
00:09:08,959 --> 00:09:10,640
until 400

229
00:09:10,640 --> 00:09:12,399
so that means

230
00:09:12,399 --> 00:09:14,000
we have seen

231
00:09:14,000 --> 00:09:16,240
abnormal traffic especially in the

232
00:09:16,240 --> 00:09:17,279
weekend

233
00:09:17,279 --> 00:09:19,519
it's not in office hours

234
00:09:19,519 --> 00:09:22,399
and also we can see

235
00:09:22,399 --> 00:09:23,760
a different

236
00:09:23,760 --> 00:09:26,240
protocol like a protocol that we are not

237
00:09:26,240 --> 00:09:29,440
using for a huge amount of bandwidth so

238
00:09:29,440 --> 00:09:31,680
a lot of use cases actually can be built

239
00:09:31,680 --> 00:09:33,120
over those for

240
00:09:33,120 --> 00:09:36,120
category

241
00:09:36,560 --> 00:09:38,880
let's jump into network profiling and we

242
00:09:38,880 --> 00:09:40,959
can use this network profile especially

243
00:09:40,959 --> 00:09:43,040
for the encrypted traffic as we

244
00:09:43,040 --> 00:09:46,399
discussed earlier the network traffic

245
00:09:46,399 --> 00:09:50,399
has a big challenge for the encryption

246
00:09:50,399 --> 00:09:53,600
most of that protocols we have used

247
00:09:53,600 --> 00:09:54,959
today

248
00:09:54,959 --> 00:09:58,000
is encrypted if you log into the http

249
00:09:58,000 --> 00:10:00,560
base for example it does use tls

250
00:10:00,560 --> 00:10:03,519
rdb use traders we have ssh which is

251
00:10:03,519 --> 00:10:05,519
encrypted we have

252
00:10:05,519 --> 00:10:07,920
many many protocols is encrypted by

253
00:10:07,920 --> 00:10:10,000
default

254
00:10:10,000 --> 00:10:12,320
uh also these encryption actually it's

255
00:10:12,320 --> 00:10:15,920
limit limiting the uh the ability to for

256
00:10:15,920 --> 00:10:18,160
the investigation and monitoring but

257
00:10:18,160 --> 00:10:19,440
still we have

258
00:10:19,440 --> 00:10:21,040
some ways

259
00:10:21,040 --> 00:10:23,120
and workarounds to find out the

260
00:10:23,120 --> 00:10:25,839
malicious traffic over there and we will

261
00:10:25,839 --> 00:10:28,959
discuss about ga3 which is

262
00:10:28,959 --> 00:10:31,760
a way to identify and profile the

263
00:10:31,760 --> 00:10:33,360
theater's traffic

264
00:10:33,360 --> 00:10:36,560
that initiated from the host machine

265
00:10:36,560 --> 00:10:39,600
also for j3s which is the same as j3

266
00:10:39,600 --> 00:10:40,480
bots

267
00:10:40,480 --> 00:10:44,079
but this is to identify the surface

268
00:10:44,079 --> 00:10:48,000
the third one jarm is a way to identify

269
00:10:48,000 --> 00:10:49,680
the servers

270
00:10:49,680 --> 00:10:51,360
and we can

271
00:10:51,360 --> 00:10:53,920
actually categorize the safe hubs based

272
00:10:53,920 --> 00:10:56,480
on their tls mechanism as we will see in

273
00:10:56,480 --> 00:10:57,760
the next slide

274
00:10:57,760 --> 00:11:00,399
we have hash and hash saver which used

275
00:11:00,399 --> 00:11:03,360
for ssh fingerprint if you look into

276
00:11:03,360 --> 00:11:06,079
ssh connection for example and you are

277
00:11:06,079 --> 00:11:08,800
connecting from your host or laptop into

278
00:11:08,800 --> 00:11:10,320
the server

279
00:11:10,320 --> 00:11:13,440
actually those connection can be used to

280
00:11:13,440 --> 00:11:17,600
identify you and or identify anyone

281
00:11:17,600 --> 00:11:21,680
from the uh the collection of the ssh

282
00:11:21,680 --> 00:11:23,120
as we will see

283
00:11:23,120 --> 00:11:26,160
the rdb remote desktop

284
00:11:26,160 --> 00:11:28,480
it does use tls and we have

285
00:11:28,480 --> 00:11:30,560
very interesting

286
00:11:30,560 --> 00:11:31,519
actually

287
00:11:31,519 --> 00:11:34,079
information about it to find out

288
00:11:34,079 --> 00:11:36,399
the use of that being logged into that

289
00:11:36,399 --> 00:11:39,279
rdb to identify the attacker activities

290
00:11:39,279 --> 00:11:42,800
as well the community id is a way to

291
00:11:42,800 --> 00:11:44,640
profile the

292
00:11:44,640 --> 00:11:46,640
let's say

293
00:11:46,640 --> 00:11:48,079
the net flow

294
00:11:48,079 --> 00:11:51,760
so we it's actually a hash

295
00:11:51,760 --> 00:11:52,959
value

296
00:11:52,959 --> 00:11:54,720
being generated

297
00:11:54,720 --> 00:11:57,600
for the flaws itself more details in the

298
00:11:57,600 --> 00:12:00,320
next slide

299
00:12:00,399 --> 00:12:03,360
so talking about j3 now

300
00:12:03,360 --> 00:12:05,519
uh it's a way to

301
00:12:05,519 --> 00:12:07,839
read actually the hello packet of the

302
00:12:07,839 --> 00:12:10,959
tls handshake as we know

303
00:12:10,959 --> 00:12:12,880
and as you can see from this picture

304
00:12:12,880 --> 00:12:16,560
actually j3 will calculate couple of

305
00:12:16,560 --> 00:12:19,120
fields from tls hero packet

306
00:12:19,120 --> 00:12:21,839
and will provide you with md5 hash those

307
00:12:21,839 --> 00:12:23,360
md5 hash

308
00:12:23,360 --> 00:12:26,480
should indicate into specific client

309
00:12:26,480 --> 00:12:26,790
uh

310
00:12:26,790 --> 00:12:28,079
[Music]

311
00:12:28,079 --> 00:12:28,959
this

312
00:12:28,959 --> 00:12:32,480
this profiling actually being built by

313
00:12:32,480 --> 00:12:34,079
salesforce team

314
00:12:34,079 --> 00:12:35,920
uh and

315
00:12:35,920 --> 00:12:38,240
actually they are doing a very fantastic

316
00:12:38,240 --> 00:12:39,120
job

317
00:12:39,120 --> 00:12:41,200
uh and to determine

318
00:12:41,200 --> 00:12:44,639
the way to profile these encrypted

319
00:12:44,639 --> 00:12:47,680
packets as we will see uh j3 j3s and

320
00:12:47,680 --> 00:12:50,079
hash as well

321
00:12:50,079 --> 00:12:50,959
so

322
00:12:50,959 --> 00:12:52,959
how it works actually it does calculate

323
00:12:52,959 --> 00:12:56,480
md5 hash value based on this version

324
00:12:56,480 --> 00:13:00,079
if you are in 1.2 if you are at 1.3 it

325
00:13:00,079 --> 00:13:01,519
does

326
00:13:01,519 --> 00:13:04,560
it has some different hash for those

327
00:13:04,560 --> 00:13:06,720
values as well so any value being

328
00:13:06,720 --> 00:13:09,760
changed in those parameters it will

329
00:13:09,760 --> 00:13:12,639
accordingly change the

330
00:13:12,639 --> 00:13:14,480
md5 hash as well

331
00:13:14,480 --> 00:13:17,519
i accepted ciphers list of extensions so

332
00:13:17,519 --> 00:13:20,240
if there is more extension or less those

333
00:13:20,240 --> 00:13:21,360
will affect

334
00:13:21,360 --> 00:13:22,639
by

335
00:13:22,639 --> 00:13:25,360
the calculation as well

336
00:13:25,360 --> 00:13:28,320
elliptic curve analytic curve format

337
00:13:28,320 --> 00:13:31,440
all of these should be

338
00:13:31,760 --> 00:13:35,040
actually matched to have a same value of

339
00:13:35,040 --> 00:13:37,839
the md5

340
00:13:38,240 --> 00:13:40,639
the same goes for j3s

341
00:13:40,639 --> 00:13:43,279
s here means the the cfr

342
00:13:43,279 --> 00:13:44,480
so

343
00:13:44,480 --> 00:13:48,959
j3 is the difference between j3 and j3s

344
00:13:48,959 --> 00:13:51,519
the j3 actually looking into the client

345
00:13:51,519 --> 00:13:55,199
hello tls handshake we have j3s looking

346
00:13:55,199 --> 00:13:57,120
into the server hello since we are

347
00:13:57,120 --> 00:14:00,000
talking here about the server

348
00:14:00,000 --> 00:14:02,320
so from the safer side it will calculate

349
00:14:02,320 --> 00:14:06,079
three parameters and tls only not like

350
00:14:06,079 --> 00:14:07,519
j3

351
00:14:07,519 --> 00:14:10,480
as we have more than three so in here in

352
00:14:10,480 --> 00:14:13,279
j3s we are looking into theories version

353
00:14:13,279 --> 00:14:15,920
accepted ciphers list of extensions that

354
00:14:15,920 --> 00:14:17,680
set we don't have

355
00:14:17,680 --> 00:14:21,440
elliptic curve etc so it will look into

356
00:14:21,440 --> 00:14:23,199
these three

357
00:14:23,199 --> 00:14:25,680
parameters and it will determine

358
00:14:25,680 --> 00:14:28,639
the md5 and it will calculate the md5

359
00:14:28,639 --> 00:14:33,600
hash for you so it should be unique

360
00:14:34,720 --> 00:14:37,519
we have here some of useful use cases

361
00:14:37,519 --> 00:14:41,600
for identifying j3 and j3s fingerprint

362
00:14:41,600 --> 00:14:43,199
if we look into the for example

363
00:14:43,199 --> 00:14:46,560
profiling toward client and also tour

364
00:14:46,560 --> 00:14:47,760
safer

365
00:14:47,760 --> 00:14:50,320
what we can do actually is looking into

366
00:14:50,320 --> 00:14:52,639
j3 fingerprints

367
00:14:52,639 --> 00:14:55,680
for an example this is the hash md5 hash

368
00:14:55,680 --> 00:14:59,199
of j3 of torque lined of some previous

369
00:14:59,199 --> 00:15:00,959
versions

370
00:15:00,959 --> 00:15:03,519
where you can actually do some threat

371
00:15:03,519 --> 00:15:06,399
hunting and to build some use cases if

372
00:15:06,399 --> 00:15:08,880
you if you have a theme if you have any

373
00:15:08,880 --> 00:15:11,680
dataset that you are looking to

374
00:15:11,680 --> 00:15:14,560
that does have j3 then

375
00:15:14,560 --> 00:15:18,320
you can just lock into the haystack

376
00:15:18,320 --> 00:15:19,920
for these hashes

377
00:15:19,920 --> 00:15:22,399
and also you can generate your own

378
00:15:22,399 --> 00:15:23,839
absolutely

379
00:15:23,839 --> 00:15:27,199
for j3s it's the same for the server

380
00:15:27,199 --> 00:15:29,279
if someone like uh

381
00:15:29,279 --> 00:15:32,079
just running the tour as a surfer then

382
00:15:32,079 --> 00:15:33,759
you can look into the finger movement

383
00:15:33,759 --> 00:15:37,120
for this hash as well

384
00:15:37,440 --> 00:15:39,920
some attacker actually manipulate these

385
00:15:39,920 --> 00:15:42,079
values as we will see in the next slide

386
00:15:42,079 --> 00:15:45,680
so we can discuss this further

387
00:15:46,560 --> 00:15:49,519
another example is here for ransomware

388
00:15:49,519 --> 00:15:52,079
families so we have trick bot and emote

389
00:15:52,079 --> 00:15:53,360
it

390
00:15:53,360 --> 00:15:55,759
one of the things that you can look into

391
00:15:55,759 --> 00:15:57,600
the ransomware you can look into the

392
00:15:57,600 --> 00:16:00,320
client for an example j3 we have trick

393
00:16:00,320 --> 00:16:02,639
bot communication tls

394
00:16:02,639 --> 00:16:04,880
and also we have

395
00:16:04,880 --> 00:16:08,160
the c2 safe response so this is the c27

396
00:16:08,160 --> 00:16:10,560
response of the attacker say for

397
00:16:10,560 --> 00:16:12,000
backhand

398
00:16:12,000 --> 00:16:14,240
the same goes for emoted so

399
00:16:14,240 --> 00:16:18,320
you can see how how useful is j3 and ga3

400
00:16:18,320 --> 00:16:21,279
is for identifying the malicious traffic

401
00:16:21,279 --> 00:16:22,959
in your environment either from the

402
00:16:22,959 --> 00:16:26,320
client side or from the safe website

403
00:16:26,320 --> 00:16:27,759
both should be

404
00:16:27,759 --> 00:16:30,880
actually uh useful to identify those and

405
00:16:30,880 --> 00:16:33,360
you can investigate this further looking

406
00:16:33,360 --> 00:16:36,480
into other data sets and also for those

407
00:16:36,480 --> 00:16:39,440
and points which which actually generate

408
00:16:39,440 --> 00:16:40,800
those uh

409
00:16:40,800 --> 00:16:44,240
communication and connections

410
00:16:44,320 --> 00:16:46,320
now let's jump into some search engine

411
00:16:46,320 --> 00:16:48,320
for j3

412
00:16:48,320 --> 00:16:50,720
we have actually two websites in here

413
00:16:50,720 --> 00:16:51,880
the first one

414
00:16:51,880 --> 00:16:53,440
j3er.com

415
00:16:53,440 --> 00:16:55,920
where it provides you with

416
00:16:55,920 --> 00:16:58,880
a search capability google like

417
00:16:58,880 --> 00:17:00,959
search engine where you just paste the

418
00:17:00,959 --> 00:17:04,640
jf3 value and you can identify what is

419
00:17:04,640 --> 00:17:07,280
this client uh

420
00:17:07,280 --> 00:17:10,640
actually of the same form so this this

421
00:17:10,640 --> 00:17:13,280
is the first website and we have another

422
00:17:13,280 --> 00:17:16,720
website in the next slide

423
00:17:17,199 --> 00:17:19,760
this is another website you can log into

424
00:17:19,760 --> 00:17:23,439
abuse.ch j3 fingerprint and you can log

425
00:17:23,439 --> 00:17:27,599
into a specific j3 after you are looking

426
00:17:27,599 --> 00:17:29,760
into uh for example if you have a list

427
00:17:29,760 --> 00:17:32,400
of j3 fingerprint you can look into them

428
00:17:32,400 --> 00:17:36,080
and it has actually a good um

429
00:17:36,080 --> 00:17:38,640
a good function or good feature here to

430
00:17:38,640 --> 00:17:41,520
list for listing reason where it does

431
00:17:41,520 --> 00:17:43,919
label by the malware family if you look

432
00:17:43,919 --> 00:17:45,919
into the first hash here we have trick

433
00:17:45,919 --> 00:17:46,720
bot

434
00:17:46,720 --> 00:17:48,320
and how many malware samples being

435
00:17:48,320 --> 00:17:50,640
submitted into this website also it

436
00:17:50,640 --> 00:17:53,039
shows you sometimes time for the first

437
00:17:53,039 --> 00:17:54,000
scene

438
00:17:54,000 --> 00:17:54,799
so

439
00:17:54,799 --> 00:17:57,840
it's really make our life easier by

440
00:17:57,840 --> 00:18:01,360
looking into the j3 once you have this

441
00:18:01,360 --> 00:18:02,720
implementation

442
00:18:02,720 --> 00:18:05,840
then you can just figure out uh what

443
00:18:05,840 --> 00:18:08,400
client is connected to what server

444
00:18:08,400 --> 00:18:11,760
from the tls even though if it's

445
00:18:11,760 --> 00:18:14,960
vergil 1.3 where there is no hostname

446
00:18:14,960 --> 00:18:16,720
being

447
00:18:16,720 --> 00:18:19,360
embedded with the tls since it is

448
00:18:19,360 --> 00:18:23,840
encrypted not like 1.2 etc

449
00:18:24,960 --> 00:18:27,520
now enough talking about j3bj3s let's

450
00:18:27,520 --> 00:18:29,919
talk about impersonation so

451
00:18:29,919 --> 00:18:32,720
can the attacker now manipulate and uh

452
00:18:32,720 --> 00:18:36,320
impersonate the j3 absolutely yes

453
00:18:36,320 --> 00:18:39,200
it's impersonated and it have been seen

454
00:18:39,200 --> 00:18:42,320
in the wild so changing the cypher suite

455
00:18:42,320 --> 00:18:45,280
of tiers version will change the j3

456
00:18:45,280 --> 00:18:47,039
completely

457
00:18:47,039 --> 00:18:50,160
as we have discussed earlier we have a

458
00:18:50,160 --> 00:18:52,160
couple of elements

459
00:18:52,160 --> 00:18:54,000
for tls like taylor's version if you

460
00:18:54,000 --> 00:18:56,160
just change that if you just change some

461
00:18:56,160 --> 00:18:58,960
extensions adding removing

462
00:18:58,960 --> 00:19:01,200
then this will be

463
00:19:01,200 --> 00:19:02,799
changed accordingly

464
00:19:02,799 --> 00:19:04,559
other factors needed to tackle this

465
00:19:04,559 --> 00:19:06,559
issue so what we can do to tackle this

466
00:19:06,559 --> 00:19:09,039
issue we can look into other data sets

467
00:19:09,039 --> 00:19:11,039
like other dls characteristics and

468
00:19:11,039 --> 00:19:12,880
extensions

469
00:19:12,880 --> 00:19:16,080
also from host correlation if you have

470
00:19:16,080 --> 00:19:19,039
a data from the host itself you can just

471
00:19:19,039 --> 00:19:23,520
correlate it with the host event as well

472
00:19:23,679 --> 00:19:25,520
one of the things that you can utilize

473
00:19:25,520 --> 00:19:28,320
in partial to manipulate and impersonate

474
00:19:28,320 --> 00:19:29,600
the tls

475
00:19:29,600 --> 00:19:32,480
is to use enable to decipher suite

476
00:19:32,480 --> 00:19:34,320
command

477
00:19:34,320 --> 00:19:37,200
then you can position

478
00:19:37,200 --> 00:19:40,640
in extension uh as we have seen here

479
00:19:40,640 --> 00:19:43,200
called tlsth edss

480
00:19:43,200 --> 00:19:45,520
uh into lower

481
00:19:45,520 --> 00:19:48,720
priority so changing the priority or the

482
00:19:48,720 --> 00:19:50,160
position

483
00:19:50,160 --> 00:19:53,760
of specific talents cipher suite

484
00:19:53,760 --> 00:19:56,480
will change and impersonate the tls

485
00:19:56,480 --> 00:19:59,440
accordingly so attacker might use this

486
00:19:59,440 --> 00:20:01,280
way or another way

487
00:20:01,280 --> 00:20:03,679
to just manipulate

488
00:20:03,679 --> 00:20:05,120
tls and this is just for the

489
00:20:05,120 --> 00:20:08,640
investigation you can manipulate the

490
00:20:08,640 --> 00:20:10,000
the tls

491
00:20:10,000 --> 00:20:13,360
uh in etls actually exchange extensions

492
00:20:13,360 --> 00:20:18,959
to change the md5 fingerprint of the j3

493
00:20:19,120 --> 00:20:21,120
there are a couple of limitations for

494
00:20:21,120 --> 00:20:25,120
identifying j3 and j3s fingerprints

495
00:20:25,120 --> 00:20:26,960
one of them is

496
00:20:26,960 --> 00:20:29,520
these fingerprints merely based on the

497
00:20:29,520 --> 00:20:32,240
taylor cipher suites so it doesn't look

498
00:20:32,240 --> 00:20:35,600
after the sci-fi suites

499
00:20:35,600 --> 00:20:37,520
also uh it doesn't look into the

500
00:20:37,520 --> 00:20:39,600
different characteristics things like

501
00:20:39,600 --> 00:20:41,840
alpn which is application

502
00:20:41,840 --> 00:20:44,400
called negotiation it doesn't look into

503
00:20:44,400 --> 00:20:46,400
it and it doesn't look into anything

504
00:20:46,400 --> 00:20:49,440
else than these dls characteristics

505
00:20:49,440 --> 00:20:52,320
which is already determined

506
00:20:52,320 --> 00:20:54,000
from the previous

507
00:20:54,000 --> 00:20:55,840
discussion

508
00:20:55,840 --> 00:20:59,120
also this makes the j3 not very unique

509
00:20:59,120 --> 00:21:00,720
and some clients

510
00:21:00,720 --> 00:21:05,520
might share the same md5 fingerprint uh

511
00:21:05,520 --> 00:21:07,120
bear in mind that

512
00:21:07,120 --> 00:21:10,000
these md5 finger fingerprint might match

513
00:21:10,000 --> 00:21:14,000
with other so there is a percentage uh

514
00:21:14,000 --> 00:21:17,679
or some false positive within the j3 and

515
00:21:17,679 --> 00:21:22,080
j3s so this should be considered uh

516
00:21:22,080 --> 00:21:24,159
once you are doing the

517
00:21:24,159 --> 00:21:26,640
or building the use cases and doing the

518
00:21:26,640 --> 00:21:28,400
threat hunting

519
00:21:28,400 --> 00:21:31,280
or investigation can be manipulated by

520
00:21:31,280 --> 00:21:33,360
changing the cypher suites extension as

521
00:21:33,360 --> 00:21:35,919
we have seen from the powershell you can

522
00:21:35,919 --> 00:21:38,720
just manipulate it with lowering or

523
00:21:38,720 --> 00:21:39,840
position

524
00:21:39,840 --> 00:21:44,559
uh the tls into a different position

525
00:21:44,559 --> 00:21:47,600
so j3 and j3s is good tool

526
00:21:47,600 --> 00:21:51,280
and good mechanism to trace the tls but

527
00:21:51,280 --> 00:21:52,640
it doesn't

528
00:21:52,640 --> 00:21:55,280
doesn't provide you with accurate

529
00:21:55,280 --> 00:21:56,840
and

530
00:21:56,840 --> 00:22:00,159
uh let's say clear answer

531
00:22:00,159 --> 00:22:01,840
if this is

532
00:22:01,840 --> 00:22:05,120
uh if this fingerprint is for ex-client

533
00:22:05,120 --> 00:22:06,159
or why

534
00:22:06,159 --> 00:22:08,240
but it at least it provides you with

535
00:22:08,240 --> 00:22:09,679
some context

536
00:22:09,679 --> 00:22:13,840
surrounding the use cases that you have

537
00:22:14,640 --> 00:22:17,679
the salesforce team actually built

538
00:22:17,679 --> 00:22:21,520
recently charm fingerprint so this is

539
00:22:21,520 --> 00:22:22,480
let's say

540
00:22:22,480 --> 00:22:24,559
another level that we have for tls

541
00:22:24,559 --> 00:22:27,600
fingerprint but the main differences

542
00:22:27,600 --> 00:22:32,240
between j3 and charm is charm is made by

543
00:22:32,240 --> 00:22:35,280
live scanning for those earphones and

544
00:22:35,280 --> 00:22:37,840
it's just considered for the safer while

545
00:22:37,840 --> 00:22:40,640
j3 and j3s is a passive

546
00:22:40,640 --> 00:22:43,679
uh tool where it calculates the md5

547
00:22:43,679 --> 00:22:47,600
fingerprint for client and server

548
00:22:48,640 --> 00:22:51,600
so a job actually is an active transport

549
00:22:51,600 --> 00:22:53,280
layer security tier let's say for

550
00:22:53,280 --> 00:22:56,159
fingerprint tool it is active so you

551
00:22:56,159 --> 00:22:56,960
need

552
00:22:56,960 --> 00:22:59,919
to interact actively with the server to

553
00:22:59,919 --> 00:23:02,320
collect these java finger and print

554
00:23:02,320 --> 00:23:04,000
so scanning with the jar and provide the

555
00:23:04,000 --> 00:23:06,080
ability to identify and develop server

556
00:23:06,080 --> 00:23:06,840
on the

557
00:23:06,840 --> 00:23:09,520
internet um

558
00:23:09,520 --> 00:23:11,360
you might have a couple of servers so

559
00:23:11,360 --> 00:23:13,200
let's say you have a load balancer and

560
00:23:13,200 --> 00:23:15,760
you have a couple of servers behind that

561
00:23:15,760 --> 00:23:18,159
load balancer if you go for example and

562
00:23:18,159 --> 00:23:20,640
see salesforce or

563
00:23:20,640 --> 00:23:23,440
for google they they they have a lot of

564
00:23:23,440 --> 00:23:25,200
servers to serve

565
00:23:25,200 --> 00:23:27,039
the clients

566
00:23:27,039 --> 00:23:29,280
but using the germ

567
00:23:29,280 --> 00:23:31,200
can you can have

568
00:23:31,200 --> 00:23:35,919
a unified fingerprint can indicate this

569
00:23:35,919 --> 00:23:38,559
this fingerprint

570
00:23:38,559 --> 00:23:41,679
just related to a specific company or

571
00:23:41,679 --> 00:23:44,320
specific provider as you will see in the

572
00:23:44,320 --> 00:23:46,799
next slides

573
00:23:46,799 --> 00:23:49,600
we can use jump to quickly verify all

574
00:23:49,600 --> 00:23:51,600
safer and globe have the same serious

575
00:23:51,600 --> 00:23:54,000
configuration so it's really looking

576
00:23:54,000 --> 00:23:56,240
into the tls configuration to identify

577
00:23:56,240 --> 00:23:58,559
the cipher of groups

578
00:23:58,559 --> 00:24:01,039
as we said google cell swaps you have

579
00:24:01,039 --> 00:24:03,679
multiple servers might share the same to

580
00:24:03,679 --> 00:24:06,480
this configuration those servers will

581
00:24:06,480 --> 00:24:09,120
provide you with a single unique

582
00:24:09,120 --> 00:24:11,200
fingerprint of the job

583
00:24:11,200 --> 00:24:12,559
since they are

584
00:24:12,559 --> 00:24:14,880
they have shared tails configuration

585
00:24:14,880 --> 00:24:16,000
so

586
00:24:16,000 --> 00:24:19,039
also it's called this disparate uh

587
00:24:19,039 --> 00:24:20,640
same forms on the internet by

588
00:24:20,640 --> 00:24:22,080
configuration

589
00:24:22,080 --> 00:24:25,360
to identify the server might belong to

590
00:24:25,360 --> 00:24:28,000
google or the salesforce as we described

591
00:24:28,000 --> 00:24:29,200
earlier

592
00:24:29,200 --> 00:24:32,240
also to identify the malware on c2

593
00:24:32,240 --> 00:24:33,520
infrastructure

594
00:24:33,520 --> 00:24:36,000
and other militia server on the internet

595
00:24:36,000 --> 00:24:39,039
you might have the jam fingerprint for

596
00:24:39,039 --> 00:24:41,039
the c2 back end

597
00:24:41,039 --> 00:24:43,360
so you can utilize charm to actively

598
00:24:43,360 --> 00:24:46,720
scan the servers and identify those

599
00:24:46,720 --> 00:24:50,080
tls configuration

600
00:24:51,919 --> 00:24:54,559
so here we have two different

601
00:24:54,559 --> 00:24:57,760
uh examples we have the salesforce

602
00:24:57,760 --> 00:25:00,000
cell phones and we have google servers

603
00:25:00,000 --> 00:25:02,400
we can see in the upper of this picture

604
00:25:02,400 --> 00:25:03,440
we have

605
00:25:03,440 --> 00:25:06,480
uh we have implemented or executed the

606
00:25:06,480 --> 00:25:07,600
germ

607
00:25:07,600 --> 00:25:10,240
python script to the salesforce team

608
00:25:10,240 --> 00:25:12,840
saidswatch.com and also we have

609
00:25:12,840 --> 00:25:15,840
fours.com both of them

610
00:25:15,840 --> 00:25:19,360
shared the same tls configuration now we

611
00:25:19,360 --> 00:25:22,880
have a single unique uh jar and finger

612
00:25:22,880 --> 00:25:23,840
i'm going to

613
00:25:23,840 --> 00:25:25,200
indicate

614
00:25:25,200 --> 00:25:27,360
into this empty ls configuration so we

615
00:25:27,360 --> 00:25:29,520
are we are looking

616
00:25:29,520 --> 00:25:31,919
and we are dealing with the same

617
00:25:31,919 --> 00:25:33,360
entity

618
00:25:33,360 --> 00:25:36,080
also the same goes for the server of the

619
00:25:36,080 --> 00:25:38,559
googles of the google we can see google

620
00:25:38,559 --> 00:25:40,799
and youtube they are sharing the same

621
00:25:40,799 --> 00:25:42,400
tls configuration

622
00:25:42,400 --> 00:25:44,159
so it's really provide you with the

623
00:25:44,159 --> 00:25:46,880
context about what you are dealing with

624
00:25:46,880 --> 00:25:48,880
what what kind of the self-helps that we

625
00:25:48,880 --> 00:25:51,200
have even though we have a different ip

626
00:25:51,200 --> 00:25:54,080
as you can see in the this picture

627
00:25:54,080 --> 00:25:55,360
but still

628
00:25:55,360 --> 00:25:57,360
we have the same dls configuration and

629
00:25:57,360 --> 00:26:00,400
we have the same unique charm

630
00:26:00,400 --> 00:26:03,120
fingerprint

631
00:26:03,679 --> 00:26:06,080
now let's look into the rdb or remote

632
00:26:06,080 --> 00:26:07,919
digital protocol

633
00:26:07,919 --> 00:26:11,520
we know that rdb is encrypted by tls and

634
00:26:11,520 --> 00:26:13,279
there's a couple of ways that we can

635
00:26:13,279 --> 00:26:15,120
deal with rdb

636
00:26:15,120 --> 00:26:18,559
to unleash and discover mobile formation

637
00:26:18,559 --> 00:26:21,039
and pivot into different

638
00:26:21,039 --> 00:26:24,159
data points that can be beneficial for

639
00:26:24,159 --> 00:26:27,120
the investigation

640
00:26:27,600 --> 00:26:29,919
looking into the rdb protocol in

641
00:26:29,919 --> 00:26:33,840
wireshark for an example you can see

642
00:26:33,840 --> 00:26:36,960
clearly what user being used

643
00:26:36,960 --> 00:26:38,960
during the rdb session

644
00:26:38,960 --> 00:26:40,480
if you look into

645
00:26:40,480 --> 00:26:43,600
the image and below you can see

646
00:26:43,600 --> 00:26:47,760
in ascii format that we have cookie

647
00:26:47,760 --> 00:26:50,559
equal testing so the testing is the

648
00:26:50,559 --> 00:26:53,200
username being used so i just use this

649
00:26:53,200 --> 00:26:54,000
in

650
00:26:54,000 --> 00:26:57,200
in the lab and i have used the user

651
00:26:57,200 --> 00:27:00,640
called testing just to show you that we

652
00:27:00,640 --> 00:27:02,720
can capture this information and this is

653
00:27:02,720 --> 00:27:04,840
very critical information you can

654
00:27:04,840 --> 00:27:08,159
utilize your scene to do threat hunting

655
00:27:08,159 --> 00:27:10,320
based on specific users

656
00:27:10,320 --> 00:27:12,559
some attacker used

657
00:27:12,559 --> 00:27:15,520
or create their users in the systems so

658
00:27:15,520 --> 00:27:18,080
you can track those users using the

659
00:27:18,080 --> 00:27:21,840
cookie field and the rdb

660
00:27:23,600 --> 00:27:25,760
now it's the time for ssh finger event

661
00:27:25,760 --> 00:27:27,679
we will see how we can

662
00:27:27,679 --> 00:27:29,919
identify the ssh connection how we can

663
00:27:29,919 --> 00:27:33,279
identify the client the server

664
00:27:33,279 --> 00:27:35,039
we can identify even the operating

665
00:27:35,039 --> 00:27:37,200
system being used by the client and

666
00:27:37,200 --> 00:27:40,000
server as well

667
00:27:40,960 --> 00:27:43,679
cell sports team have developed hash and

668
00:27:43,679 --> 00:27:46,399
hash server to identify

669
00:27:46,399 --> 00:27:49,200
and fingerprint the ssh connections for

670
00:27:49,200 --> 00:27:52,240
the client and server so it's

671
00:27:52,240 --> 00:27:56,159
exactly as j3 but for ssh so it is md5

672
00:27:56,159 --> 00:27:58,320
hash value uh

673
00:27:58,320 --> 00:28:00,399
from the set of the algorithm and ssh

674
00:28:00,399 --> 00:28:02,960
protocol after tcp hand check so we have

675
00:28:02,960 --> 00:28:06,000
tcp handshake and firsthand then we will

676
00:28:06,000 --> 00:28:07,039
have

677
00:28:07,039 --> 00:28:10,159
ssh connection and transactions

678
00:28:10,159 --> 00:28:13,600
so from these connection uh hash safe on

679
00:28:13,600 --> 00:28:16,320
dash can be calculated based on the

680
00:28:16,320 --> 00:28:20,720
algorithm called ssh message kicks in it

681
00:28:20,720 --> 00:28:22,880
it's transferred in clear text so you

682
00:28:22,880 --> 00:28:25,679
can read it without encryption so it's

683
00:28:25,679 --> 00:28:27,360
being transferred from client to the

684
00:28:27,360 --> 00:28:29,919
server in clear text you can look into

685
00:28:29,919 --> 00:28:32,320
for example in wireshark it does include

686
00:28:32,320 --> 00:28:34,720
the different client application strings

687
00:28:34,720 --> 00:28:38,240
as we will see in the next slide

688
00:28:38,720 --> 00:28:41,520
cable of benefits using hash and hash

689
00:28:41,520 --> 00:28:44,399
server so we can utilize it to attribute

690
00:28:44,399 --> 00:28:46,399
to such connection with creative

691
00:28:46,399 --> 00:28:49,600
accuracy than only by ib we can look

692
00:28:49,600 --> 00:28:51,039
into

693
00:28:51,039 --> 00:28:52,080
the

694
00:28:52,080 --> 00:28:54,480
connection and application being used

695
00:28:54,480 --> 00:28:56,159
for resistance for an example if you are

696
00:28:56,159 --> 00:28:58,240
looking if you are using potty if you

697
00:28:58,240 --> 00:29:00,000
are using any other

698
00:29:00,000 --> 00:29:02,960
systems or even an ubuntu or any linux

699
00:29:02,960 --> 00:29:05,200
machine and you are using the terminal

700
00:29:05,200 --> 00:29:08,880
we can identify those as a user agent

701
00:29:08,880 --> 00:29:11,440
so we can see the client

702
00:29:11,440 --> 00:29:14,000
version and operating system as well

703
00:29:14,000 --> 00:29:17,120
with the same conversion of ssh and

704
00:29:17,120 --> 00:29:19,840
the operating system

705
00:29:19,840 --> 00:29:22,080
uh one of the things that we can utilize

706
00:29:22,080 --> 00:29:24,240
hash and hacksafer is

707
00:29:24,240 --> 00:29:26,960
with regardless of the nut devices so if

708
00:29:26,960 --> 00:29:29,760
you have a couple of workstations being

709
00:29:29,760 --> 00:29:31,919
compromised by uh

710
00:29:31,919 --> 00:29:34,720
attacker what we can do is we can look

711
00:29:34,720 --> 00:29:38,799
into the ssh string of hash server and

712
00:29:38,799 --> 00:29:41,600
hash so we can log into the client on

713
00:29:41,600 --> 00:29:42,799
the server

714
00:29:42,799 --> 00:29:46,240
uh regardless of the nut devices as we

715
00:29:46,240 --> 00:29:48,720
will have these ssh connection

716
00:29:48,720 --> 00:29:51,679
uh being captured and hashed

717
00:29:51,679 --> 00:29:54,640
by those two algorithm it's analogous to

718
00:29:54,640 --> 00:29:57,039
http user agent so

719
00:29:57,039 --> 00:30:00,480
you can use it as http user agent and

720
00:30:00,480 --> 00:30:04,080
web browser so we can identify as such

721
00:30:04,080 --> 00:30:06,000
version if it's version 2 or anything

722
00:30:06,000 --> 00:30:08,240
else or they are using open ssh or any

723
00:30:08,240 --> 00:30:10,880
other different

724
00:30:11,200 --> 00:30:12,159
tool

725
00:30:12,159 --> 00:30:14,000
then we can identify the operating

726
00:30:14,000 --> 00:30:16,399
system

727
00:30:17,279 --> 00:30:19,520
let's discuss about client and server

728
00:30:19,520 --> 00:30:21,679
ssh communication and how it's being

729
00:30:21,679 --> 00:30:22,720
done

730
00:30:22,720 --> 00:30:25,600
so once the client need to communicate

731
00:30:25,600 --> 00:30:27,600
with the server in this search first

732
00:30:27,600 --> 00:30:28,480
place

733
00:30:28,480 --> 00:30:30,640
will have the tcp three-way handshake

734
00:30:30,640 --> 00:30:33,039
and after that it will have ssh

735
00:30:33,039 --> 00:30:35,039
communication we can see from this

736
00:30:35,039 --> 00:30:36,960
illustration we have self-help

737
00:30:36,960 --> 00:30:38,799
identification string client

738
00:30:38,799 --> 00:30:40,880
identification string where

739
00:30:40,880 --> 00:30:43,440
everyone from client and server will

740
00:30:43,440 --> 00:30:46,640
send their strings which is user agent

741
00:30:46,640 --> 00:30:50,480
like in http or in browser

742
00:30:50,480 --> 00:30:53,200
this strings actually contain the ssh

743
00:30:53,200 --> 00:30:55,840
protocol and the client also the

744
00:30:55,840 --> 00:30:58,320
operatic system we can see we have open

745
00:30:58,320 --> 00:31:01,840
ssh and ubuntu as a server and we have

746
00:31:01,840 --> 00:31:04,159
open ssh and

747
00:31:04,159 --> 00:31:07,360
debian or raspberry buy from this from

748
00:31:07,360 --> 00:31:09,918
the client

749
00:31:10,240 --> 00:31:12,960
so after that we have ssh message geeks

750
00:31:12,960 --> 00:31:14,080
in it

751
00:31:14,080 --> 00:31:16,559
two message one from the client one from

752
00:31:16,559 --> 00:31:19,120
the safer and both of them can be used

753
00:31:19,120 --> 00:31:21,760
to generate the hash and hash saver

754
00:31:21,760 --> 00:31:24,960
fingerprint md5 value

755
00:31:24,960 --> 00:31:27,039
we have two section here clip text and

756
00:31:27,039 --> 00:31:29,440
encrypted so clear text can be

757
00:31:29,440 --> 00:31:32,880
utilized by the finger printing for user

758
00:31:32,880 --> 00:31:35,440
agent like for the string from the

759
00:31:35,440 --> 00:31:37,919
client server and also

760
00:31:37,919 --> 00:31:40,399
search message kicks in it for hash and

761
00:31:40,399 --> 00:31:42,720
hash save for fingerprint the encrypted

762
00:31:42,720 --> 00:31:46,000
part is for the data payload where it's

763
00:31:46,000 --> 00:31:49,600
encrypted and it's not visible for

764
00:31:49,600 --> 00:31:52,719
for the man in the middle

765
00:31:53,200 --> 00:31:55,360
looking into the hash algorithm from the

766
00:31:55,360 --> 00:31:57,519
client how it's been happening from the

767
00:31:57,519 --> 00:31:58,880
wire shark

768
00:31:58,880 --> 00:32:01,679
practically we can look into the packet

769
00:32:01,679 --> 00:32:03,279
called client key exchange

770
00:32:03,279 --> 00:32:06,159
initialization and we can see the value

771
00:32:06,159 --> 00:32:08,640
so the below value actually used to

772
00:32:08,640 --> 00:32:12,159
generate the md5 value out of the hash

773
00:32:12,159 --> 00:32:14,399
so the hash actually will be calculated

774
00:32:14,399 --> 00:32:16,799
from using these values from the client

775
00:32:16,799 --> 00:32:18,480
and the server from the next slide we

776
00:32:18,480 --> 00:32:19,519
will see

777
00:32:19,519 --> 00:32:22,159
how this being calculated from the safer

778
00:32:22,159 --> 00:32:24,399
site

779
00:32:24,399 --> 00:32:26,640
here is how the high server calculate

780
00:32:26,640 --> 00:32:28,799
this value from the same for key

781
00:32:28,799 --> 00:32:31,120
exchange initialization and it has

782
00:32:31,120 --> 00:32:32,960
different value where it will be used to

783
00:32:32,960 --> 00:32:35,840
calculate the md5 hash for the hash save

784
00:32:35,840 --> 00:32:38,159
up so now we have

785
00:32:38,159 --> 00:32:40,640
uh hash and hash server where we have

786
00:32:40,640 --> 00:32:43,919
client and the safer hash value we can

787
00:32:43,919 --> 00:32:47,039
use it for our threat hunting

788
00:32:47,039 --> 00:32:49,200
in our environment to see

789
00:32:49,200 --> 00:32:51,760
who is communicating to who and in what

790
00:32:51,760 --> 00:32:53,919
client so we can see the operating

791
00:32:53,919 --> 00:32:55,519
system the client

792
00:32:55,519 --> 00:33:00,080
and also the end points

793
00:33:00,799 --> 00:33:03,440
we can look into ssh client string which

794
00:33:03,440 --> 00:33:05,279
is in another packet

795
00:33:05,279 --> 00:33:08,480
so from the client side we can see

796
00:33:08,480 --> 00:33:11,840
clearly here that the client used ssh

797
00:33:11,840 --> 00:33:16,320
version 2 open ssh 407 so we can map

798
00:33:16,320 --> 00:33:18,640
that with our

799
00:33:18,640 --> 00:33:20,480
actually

800
00:33:20,480 --> 00:33:21,919
ssh

801
00:33:21,919 --> 00:33:25,840
and ssh fingerprint as well

802
00:33:26,320 --> 00:33:28,480
now we'll be talking about the hashtag

803
00:33:28,480 --> 00:33:31,279
dilemma so if you have been in a

804
00:33:31,279 --> 00:33:33,679
situation where you have a lot of big

805
00:33:33,679 --> 00:33:38,000
caps let's say over 500 gb and you have

806
00:33:38,000 --> 00:33:39,519
been asked to

807
00:33:39,519 --> 00:33:41,840
investigate for any maliciousness within

808
00:33:41,840 --> 00:33:45,360
those packets so it is not an easy task

809
00:33:45,360 --> 00:33:48,000
to handle so we have couple of ways

810
00:33:48,000 --> 00:33:50,799
to show you how you can handle such

811
00:33:50,799 --> 00:33:52,880
situation and what are the things that

812
00:33:52,880 --> 00:33:54,960
you need to consider

813
00:33:54,960 --> 00:33:59,840
in prior to go within this investigation

814
00:34:00,880 --> 00:34:03,279
first thing that we need to look into is

815
00:34:03,279 --> 00:34:05,519
slicing and merging what do you mean by

816
00:34:05,519 --> 00:34:07,360
that is

817
00:34:07,360 --> 00:34:10,800
by defining this the right scope so we

818
00:34:10,800 --> 00:34:14,639
do have a timeline and we do have

819
00:34:14,639 --> 00:34:17,280
an overview about the incident of about

820
00:34:17,280 --> 00:34:20,159
the case that we we need to to lock into

821
00:34:20,159 --> 00:34:23,199
it or also the threat hunting so we have

822
00:34:23,199 --> 00:34:25,679
couple of things that we can look into

823
00:34:25,679 --> 00:34:27,520
or also we have source hybrid

824
00:34:27,520 --> 00:34:29,359
destination ib anything that can be

825
00:34:29,359 --> 00:34:31,359
filterable

826
00:34:31,359 --> 00:34:32,719
then we can

827
00:34:32,719 --> 00:34:36,320
just shrink the time or we have we can't

828
00:34:36,320 --> 00:34:38,480
select specific

829
00:34:38,480 --> 00:34:41,599
any criteria that might

830
00:34:41,599 --> 00:34:44,239
align with our investigation in this

831
00:34:44,239 --> 00:34:45,679
case if you have

832
00:34:45,679 --> 00:34:48,879
let's say one terabyte of packets then

833
00:34:48,879 --> 00:34:50,639
it will come down

834
00:34:50,639 --> 00:34:54,560
maybe 80 percent less or more than that

835
00:34:54,560 --> 00:34:59,040
if we have the writer formation in hand

836
00:35:00,320 --> 00:35:02,560
so one of the things that we can use is

837
00:35:02,560 --> 00:35:03,920
to use

838
00:35:03,920 --> 00:35:06,720
edit cap so edit cab is a tool

839
00:35:06,720 --> 00:35:08,400
already

840
00:35:08,400 --> 00:35:10,160
packaged with the wire shark if you

841
00:35:10,160 --> 00:35:11,920
install it in your machine

842
00:35:11,920 --> 00:35:15,440
then you can use it to slice

843
00:35:15,440 --> 00:35:17,440
the packet based on

844
00:35:17,440 --> 00:35:19,599
the time for example if we need to have

845
00:35:19,599 --> 00:35:22,079
to specify the start time and stop time

846
00:35:22,079 --> 00:35:24,000
we have a specific timeline we can use

847
00:35:24,000 --> 00:35:29,440
dash a capital or dash b and we can use

848
00:35:29,440 --> 00:35:33,040
the format as described in this slide

849
00:35:33,040 --> 00:35:36,079
to identify the timeline so we need we

850
00:35:36,079 --> 00:35:38,640
are interested to look into

851
00:35:38,640 --> 00:35:40,000
let's say

852
00:35:40,000 --> 00:35:41,280
one week

853
00:35:41,280 --> 00:35:44,960
ago then we can specify the time

854
00:35:44,960 --> 00:35:48,560
the time step based on what we have

855
00:35:48,560 --> 00:35:51,440
from the scoping

856
00:35:52,079 --> 00:35:56,000
another way to look into the pcap is by

857
00:35:56,000 --> 00:35:57,839
splitting

858
00:35:57,839 --> 00:35:58,720
the

859
00:35:58,720 --> 00:36:01,520
the single p-cap into different

860
00:36:01,520 --> 00:36:04,480
p-caps based on specific amount of

861
00:36:04,480 --> 00:36:06,000
packet

862
00:36:06,000 --> 00:36:08,160
in this example i have used edit cap

863
00:36:08,160 --> 00:36:09,040
dash

864
00:36:09,040 --> 00:36:12,800
c1000 which means that

865
00:36:12,800 --> 00:36:15,119
you are telling the edit cap to just

866
00:36:15,119 --> 00:36:18,240
count the first 1000 packet and throw it

867
00:36:18,240 --> 00:36:20,880
into a single file then start from from

868
00:36:20,880 --> 00:36:22,640
that

869
00:36:22,640 --> 00:36:25,520
so what i'm doing here i'm reading tcb.p

870
00:36:25,520 --> 00:36:28,560
cap read the first 1000 throw it out

871
00:36:28,560 --> 00:36:32,000
into the current folder and

872
00:36:32,000 --> 00:36:34,240
just do this

873
00:36:34,240 --> 00:36:37,359
continuously and throw that into tcb

874
00:36:37,359 --> 00:36:39,520
underscore analysis that we cap as you

875
00:36:39,520 --> 00:36:42,960
can see here is we have a list of the

876
00:36:42,960 --> 00:36:46,960
pcap files every and each file have 1000

877
00:36:46,960 --> 00:36:49,760
packets this is very useful to split it

878
00:36:49,760 --> 00:36:53,280
out into a different

879
00:36:53,520 --> 00:36:55,760
and a different p caps where you can

880
00:36:55,760 --> 00:36:57,040
look into

881
00:36:57,040 --> 00:36:59,440
just small amount of packets and also

882
00:36:59,440 --> 00:37:01,280
it's very useful

883
00:37:01,280 --> 00:37:04,000
to use a different tools

884
00:37:04,000 --> 00:37:07,440
so it's easily uh loaded into your

885
00:37:07,440 --> 00:37:11,920
tool things like network miner and etc

886
00:37:12,079 --> 00:37:14,800
now a time to merge all them together so

887
00:37:14,800 --> 00:37:17,920
we what we can do actually is to merge

888
00:37:17,920 --> 00:37:20,960
the the needed result out of the p cap

889
00:37:20,960 --> 00:37:23,440
that we have analyzed into a single p

890
00:37:23,440 --> 00:37:24,960
cap so

891
00:37:24,960 --> 00:37:29,040
merge cap then dash w which we mean that

892
00:37:29,040 --> 00:37:30,880
we need to output into the single file

893
00:37:30,880 --> 00:37:33,760
which called out that p cap

894
00:37:33,760 --> 00:37:37,599
and we can also combine them with all

895
00:37:37,599 --> 00:37:39,760
the output of all

896
00:37:39,760 --> 00:37:41,680
the splitted picab

897
00:37:41,680 --> 00:37:43,760
we are looking for so a that we can't

898
00:37:43,760 --> 00:37:45,119
beat at picab

899
00:37:45,119 --> 00:37:47,680
both of them will be made together into

900
00:37:47,680 --> 00:37:52,240
a single vial called out that pickup

901
00:37:54,000 --> 00:37:56,560
what we can do actually after we have

902
00:37:56,560 --> 00:37:59,839
these analysis to use some ideas things

903
00:37:59,839 --> 00:38:02,480
like snort or cerricator and here i have

904
00:38:02,480 --> 00:38:06,320
used snort to read the file that pick up

905
00:38:06,320 --> 00:38:08,000
and reading the configuration called

906
00:38:08,000 --> 00:38:09,599
snort.conf

907
00:38:09,599 --> 00:38:12,240
dash l to show you the result in the

908
00:38:12,240 --> 00:38:13,920
screen

909
00:38:13,920 --> 00:38:16,640
so snot actually is

910
00:38:16,640 --> 00:38:20,240
an ids has a lot of signature built in

911
00:38:20,240 --> 00:38:23,200
you can develop your own you can also

912
00:38:23,200 --> 00:38:26,240
have some community rules or you can

913
00:38:26,240 --> 00:38:28,800
purchase you need to any

914
00:38:28,800 --> 00:38:31,040
snow signature

915
00:38:31,040 --> 00:38:32,960
or you can use cericata which is

916
00:38:32,960 --> 00:38:35,680
available all uh publicly in the

917
00:38:35,680 --> 00:38:36,720
internet

918
00:38:36,720 --> 00:38:39,599
then you can scan the entire pcap to

919
00:38:39,599 --> 00:38:41,200
look into any

920
00:38:41,200 --> 00:38:46,400
match with uh signatures that available

921
00:38:46,400 --> 00:38:49,520
from from the snort

922
00:38:51,440 --> 00:38:55,040
we'll be talking about two avt use cases

923
00:38:55,040 --> 00:38:56,960
utilized by

924
00:38:56,960 --> 00:38:59,440
a different attacker group that being

925
00:38:59,440 --> 00:39:00,640
reported

926
00:39:00,640 --> 00:39:04,160
publicly and how that

927
00:39:04,160 --> 00:39:05,760
utilized

928
00:39:05,760 --> 00:39:08,480
different protocols to evade the cyber

929
00:39:08,480 --> 00:39:11,359
security controls and even to be hidden

930
00:39:11,359 --> 00:39:12,400
in their

931
00:39:12,400 --> 00:39:15,800
network traffic

932
00:39:16,320 --> 00:39:19,599
the first case is for dns over https

933
00:39:19,599 --> 00:39:21,359
malware which called

934
00:39:21,359 --> 00:39:22,720
doh

935
00:39:22,720 --> 00:39:25,839
and the attacker here used the uh to

936
00:39:25,839 --> 00:39:28,640
evade all the cyber security

937
00:39:28,640 --> 00:39:30,960
detection tools and network monitoring

938
00:39:30,960 --> 00:39:33,440
systems as well and we will see how they

939
00:39:33,440 --> 00:39:35,520
are deploying their malware and what to

940
00:39:35,520 --> 00:39:38,240
do about it

941
00:39:39,280 --> 00:39:41,839
let's first look into the dlh and

942
00:39:41,839 --> 00:39:43,359
identify

943
00:39:43,359 --> 00:39:45,200
the main characteristics of this

944
00:39:45,200 --> 00:39:48,880
protocol so it is dns over https and

945
00:39:48,880 --> 00:39:52,400
it's used by 443 tcp

946
00:39:52,400 --> 00:39:54,480
as if it was tls

947
00:39:54,480 --> 00:39:58,720
and querying dns using https to protocol

948
00:39:58,720 --> 00:40:00,480
so there is no more

949
00:40:00,480 --> 00:40:02,720
53 udp protocol

950
00:40:02,720 --> 00:40:05,680
of traffic in here

951
00:40:05,680 --> 00:40:08,720
also we have more privacy and it does

952
00:40:08,720 --> 00:40:11,920
make security analyst job harder by

953
00:40:11,920 --> 00:40:13,920
investigating these

954
00:40:13,920 --> 00:40:15,520
traffic

955
00:40:15,520 --> 00:40:18,160
since it is fully encrypted

956
00:40:18,160 --> 00:40:21,359
and blindly passing all

957
00:40:21,359 --> 00:40:23,440
the cyber security monitoring tools if

958
00:40:23,440 --> 00:40:24,640
it's not

959
00:40:24,640 --> 00:40:27,440
using any mile in the middle decryption

960
00:40:27,440 --> 00:40:30,079
so couple of browsers supported it

961
00:40:30,079 --> 00:40:34,720
like firefox chrome etc so advisory here

962
00:40:34,720 --> 00:40:36,960
welcoming the uh to hide

963
00:40:36,960 --> 00:40:39,760
in the haystack

964
00:40:39,760 --> 00:40:42,720
so attacker loves

965
00:40:42,720 --> 00:40:46,160
actually to have uh evasion

966
00:40:46,160 --> 00:40:49,440
over any cyber security monitoring tools

967
00:40:49,440 --> 00:40:53,839
to hide their track and also to mislead

968
00:40:53,839 --> 00:40:57,359
the cyber security analysts

969
00:40:58,480 --> 00:41:00,800
first manual sample will be looking into

970
00:41:00,800 --> 00:41:01,760
his

971
00:41:01,760 --> 00:41:03,280
six spot

972
00:41:03,280 --> 00:41:04,400
where

973
00:41:04,400 --> 00:41:06,480
the attacker actually used

974
00:41:06,480 --> 00:41:09,760
their code to use doh which is dns over

975
00:41:09,760 --> 00:41:11,200
https

976
00:41:11,200 --> 00:41:12,800
so i will be

977
00:41:12,800 --> 00:41:15,680
looking into their code and how they are

978
00:41:15,680 --> 00:41:17,839
utilizing drh

979
00:41:17,839 --> 00:41:21,680
to achieve their objectives

980
00:41:21,680 --> 00:41:24,880
this is the snippet of the malware code

981
00:41:24,880 --> 00:41:27,440
in the first square we can see that

982
00:41:27,440 --> 00:41:32,160
two domains being encoded by rc4 format

983
00:41:32,160 --> 00:41:34,240
and both of them uh

984
00:41:34,240 --> 00:41:35,920
both of the domain are actually ending

985
00:41:35,920 --> 00:41:38,560
with that hk after you

986
00:41:38,560 --> 00:41:40,480
decode it

987
00:41:40,480 --> 00:41:43,440
and then and the function which is in

988
00:41:43,440 --> 00:41:45,839
the other square we have

989
00:41:45,839 --> 00:41:47,119
doh

990
00:41:47,119 --> 00:41:49,760
so actually what this function

991
00:41:49,760 --> 00:41:51,200
does is

992
00:41:51,200 --> 00:41:53,839
looking into or resolving

993
00:41:53,839 --> 00:41:57,040
those domain using dns.google.com where

994
00:41:57,040 --> 00:41:59,599
it does support doh

995
00:41:59,599 --> 00:42:00,800
and also

996
00:42:00,800 --> 00:42:04,160
they are actually using type a where

997
00:42:04,160 --> 00:42:06,160
they can translate

998
00:42:06,160 --> 00:42:07,599
to the ip

999
00:42:07,599 --> 00:42:10,720
we will see how this request being being

1000
00:42:10,720 --> 00:42:13,440
done from the next slide

1001
00:42:13,440 --> 00:42:15,760
so the attacker actually used

1002
00:42:15,760 --> 00:42:17,520
the dodge heavily

1003
00:42:17,520 --> 00:42:19,040
in this sample

1004
00:42:19,040 --> 00:42:19,690
just to

1005
00:42:19,690 --> 00:42:20,800
[Music]

1006
00:42:20,800 --> 00:42:25,280
do the dns lookup for those domains

1007
00:42:25,520 --> 00:42:27,440
this is the other snippet that we can

1008
00:42:27,440 --> 00:42:31,359
see demonstrate that how the dns

1009
00:42:31,359 --> 00:42:34,800
resolving have been handled so we have a

1010
00:42:34,800 --> 00:42:36,800
get request and to

1011
00:42:36,800 --> 00:42:38,960
google the dns.gov

1012
00:42:38,960 --> 00:42:40,640
google.com

1013
00:42:40,640 --> 00:42:43,200
that asking to resolve this domain which

1014
00:42:43,200 --> 00:42:47,119
ending with that hk the type a which is

1015
00:42:47,119 --> 00:42:50,800
one of the types that dns have

1016
00:42:50,800 --> 00:42:51,920
to

1017
00:42:51,920 --> 00:42:54,720
resolve this domain into the ip and we

1018
00:42:54,720 --> 00:42:57,440
can see the json format in the below

1019
00:42:57,440 --> 00:43:00,560
section we can see the ib have been

1020
00:43:00,560 --> 00:43:02,720
appeared for us after resolving from the

1021
00:43:02,720 --> 00:43:05,680
google which starting with one one nine

1022
00:43:05,680 --> 00:43:07,440
two eight four eight

1023
00:43:07,440 --> 00:43:09,280
and two three one

1024
00:43:09,280 --> 00:43:12,319
so attacker successfully

1025
00:43:12,319 --> 00:43:14,480
accomplished their objective by

1026
00:43:14,480 --> 00:43:16,079
resolving

1027
00:43:16,079 --> 00:43:19,599
the dns of their domain after

1028
00:43:19,599 --> 00:43:21,200
decode

1029
00:43:21,200 --> 00:43:23,920
their domain from the malware code from

1030
00:43:23,920 --> 00:43:26,400
the rc4 they do

1031
00:43:26,400 --> 00:43:29,200
they are doing the resolving using the

1032
00:43:29,200 --> 00:43:32,000
dns that google did come and they can

1033
00:43:32,000 --> 00:43:35,920
accomplish their objective later on

1034
00:43:37,599 --> 00:43:41,599
we have another use case used the oah in

1035
00:43:41,599 --> 00:43:45,839
different way so the attacker here can

1036
00:43:45,839 --> 00:43:48,240
actually they will load a malware binary

1037
00:43:48,240 --> 00:43:50,960
from the internet using doh and we will

1038
00:43:50,960 --> 00:43:52,240
see how

1039
00:43:52,240 --> 00:43:54,880
this have been accomplished also we will

1040
00:43:54,880 --> 00:43:56,319
see

1041
00:43:56,319 --> 00:43:59,200
how you can see and log into this and

1042
00:43:59,200 --> 00:44:01,919
wireshark

1043
00:44:02,800 --> 00:44:04,880
the first thing you will notice in wi-fi

1044
00:44:04,880 --> 00:44:06,560
that the server name which is

1045
00:44:06,560 --> 00:44:08,400
dns.google.com

1046
00:44:08,400 --> 00:44:10,480
from the http traffic so this is

1047
00:44:10,480 --> 00:44:14,240
actually decrypted from wi-fi it

1048
00:44:14,240 --> 00:44:17,359
does show you that the dns.google.com

1049
00:44:17,359 --> 00:44:19,119
being

1050
00:44:19,119 --> 00:44:22,480
communicated using http to resolve

1051
00:44:22,480 --> 00:44:25,440
specific domains

1052
00:44:26,240 --> 00:44:28,880
here we can look into the full picture

1053
00:44:28,880 --> 00:44:29,760
where

1054
00:44:29,760 --> 00:44:33,480
the attacker used get command into

1055
00:44:33,480 --> 00:44:36,720
dns.google.com to resolve mimikatz

1056
00:44:36,720 --> 00:44:37,760
domain

1057
00:44:37,760 --> 00:44:40,720
using text record without using dns sec

1058
00:44:40,720 --> 00:44:43,359
which is set to false and we have the

1059
00:44:43,359 --> 00:44:45,599
full uri and below

1060
00:44:45,599 --> 00:44:48,240
we can look into the follow up i here

1061
00:44:48,240 --> 00:44:51,520
and we can see the user agent of the

1062
00:44:51,520 --> 00:44:54,400
attacker where he is using chrome

1063
00:44:54,400 --> 00:44:57,520
version on renders

1064
00:44:58,480 --> 00:45:00,640
once he did that you can look into the

1065
00:45:00,640 --> 00:45:03,040
full payload in here you can see this

1066
00:45:03,040 --> 00:45:05,119
payload started with

1067
00:45:05,119 --> 00:45:09,040
tvq and this is base64 format and

1068
00:45:09,040 --> 00:45:11,440
anything in base64 format starting with

1069
00:45:11,440 --> 00:45:13,520
tvq usually

1070
00:45:13,520 --> 00:45:16,839
it does indicate that it is a

1071
00:45:16,839 --> 00:45:19,760
binary so the attacker successfully able

1072
00:45:19,760 --> 00:45:21,119
to

1073
00:45:21,119 --> 00:45:24,319
retrieve the payload in base64 using

1074
00:45:24,319 --> 00:45:25,920
domain

1075
00:45:25,920 --> 00:45:29,680
over https or dns over https

1076
00:45:29,680 --> 00:45:31,280
using

1077
00:45:31,280 --> 00:45:35,440
just https traffic so the analyst when

1078
00:45:35,440 --> 00:45:37,720
he log into the traffic he will see

1079
00:45:37,720 --> 00:45:40,400
https traffic and

1080
00:45:40,400 --> 00:45:42,480
he will not be able to see all these

1081
00:45:42,480 --> 00:45:45,480
information

1082
00:45:46,400 --> 00:45:48,319
i would like to thank you all for your

1083
00:45:48,319 --> 00:45:51,280
time and i appreciate you have been here

1084
00:45:51,280 --> 00:45:53,920
and it's the time for the questions if

1085
00:45:53,920 --> 00:45:57,720
anyone have any questions

1086
00:46:12,960 --> 00:46:15,040
you

