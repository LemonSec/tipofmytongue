1
00:00:01,680 --> 00:00:03,199
hey cactus con

2
00:00:03,199 --> 00:00:05,359
my name is ross burke and today we'll be

3
00:00:05,359 --> 00:00:07,919
talking about packet sector which is my

4
00:00:07,919 --> 00:00:10,080
tool we'll talk about that and

5
00:00:10,080 --> 00:00:11,920
leveraging t-sharp for network traffic

6
00:00:11,920 --> 00:00:14,559
analysis

7
00:00:14,799 --> 00:00:17,119
so before we jump into it too deep i'll

8
00:00:17,119 --> 00:00:18,960
just give you a brief overview of who i

9
00:00:18,960 --> 00:00:20,800
am and maybe why you should listen to me

10
00:00:20,800 --> 00:00:23,039
right um so my name is ross burke like i

11
00:00:23,039 --> 00:00:25,760
mentioned i am a security consultant and

12
00:00:25,760 --> 00:00:28,000
a cyber security instructor at a local

13
00:00:28,000 --> 00:00:31,359
university um in houston texas which is

14
00:00:31,359 --> 00:00:33,680
my next point so i'm from houston texas

15
00:00:33,680 --> 00:00:35,280
born and raised lived there my whole

16
00:00:35,280 --> 00:00:37,760
life so i'm a texans fan you know all

17
00:00:37,760 --> 00:00:40,960
that all that fun stuff um but

18
00:00:40,960 --> 00:00:43,040
i guess my one fun fact or my hobby is

19
00:00:43,040 --> 00:00:45,600
that i'm a board game enthusiast so i'm

20
00:00:45,600 --> 00:00:48,559
a huge fan of board games um and i

21
00:00:48,559 --> 00:00:50,640
happen to think they're pretty cool so a

22
00:00:50,640 --> 00:00:53,120
wild night for me might be pouring a

23
00:00:53,120 --> 00:00:55,440
glass of red wine and enjoying a board

24
00:00:55,440 --> 00:00:56,960
game and

25
00:00:56,960 --> 00:00:58,399
yeah that's my

26
00:00:58,399 --> 00:01:02,160
that's my fun time right um but yeah so

27
00:01:02,160 --> 00:01:04,159
uh nice to be here thank you for having

28
00:01:04,159 --> 00:01:07,520
me and uh let's go jump into the agenda

29
00:01:07,520 --> 00:01:10,080
so for today for this session um it's

30
00:01:10,080 --> 00:01:13,360
going to be a sort of half and half half

31
00:01:13,360 --> 00:01:15,520
sort of powerpoint presentation half

32
00:01:15,520 --> 00:01:16,400
demo

33
00:01:16,400 --> 00:01:17,920
um so

34
00:01:17,920 --> 00:01:19,200
just for now

35
00:01:19,200 --> 00:01:20,880
we'll talk about what t-sharp is for

36
00:01:20,880 --> 00:01:22,240
those of you who may not be familiar

37
00:01:22,240 --> 00:01:23,759
with what t-shark is

38
00:01:23,759 --> 00:01:24,880
we'll actually talk about some of the

39
00:01:24,880 --> 00:01:27,360
basics you can use to even begin

40
00:01:27,360 --> 00:01:29,680
even today starting to look at random

41
00:01:29,680 --> 00:01:31,360
pcaps and see what data you can pull

42
00:01:31,360 --> 00:01:33,920
back just by testing some simple uh

43
00:01:33,920 --> 00:01:35,840
t-shirt queries that i give you um

44
00:01:35,840 --> 00:01:38,320
within this slide deck here and then

45
00:01:38,320 --> 00:01:40,400
we'll talk about packet sifter which is

46
00:01:40,400 --> 00:01:41,119
the

47
00:01:41,119 --> 00:01:42,960
open source tool that i created that

48
00:01:42,960 --> 00:01:44,799
leverages t-shark and i'll show you how

49
00:01:44,799 --> 00:01:46,960
to use that um of course within the demo

50
00:01:46,960 --> 00:01:49,040
portion so that is the agenda for today

51
00:01:49,040 --> 00:01:51,200
hopefully that sounds good and uh let's

52
00:01:51,200 --> 00:01:53,840
jump right into it

53
00:01:53,840 --> 00:01:56,560
t-sharp uh so t-shark is much like

54
00:01:56,560 --> 00:01:58,479
wireshark if you're familiar with that

55
00:01:58,479 --> 00:02:00,399
which is a network protocol analyzer

56
00:02:00,399 --> 00:02:03,600
except it exists on the command line so

57
00:02:03,600 --> 00:02:06,399
you don't have this pretty gui uh with

58
00:02:06,399 --> 00:02:08,239
all your little buttons and bells and

59
00:02:08,239 --> 00:02:10,318
whistles that you can click on stuff uh

60
00:02:10,318 --> 00:02:12,000
all that all those good things

61
00:02:12,000 --> 00:02:14,080
aren't really available right we have to

62
00:02:14,080 --> 00:02:16,239
use the command line to accomplish what

63
00:02:16,239 --> 00:02:18,160
we need to um

64
00:02:18,160 --> 00:02:20,400
for protocol network protocol analyzing

65
00:02:20,400 --> 00:02:23,840
so tshark is great because it enhances

66
00:02:23,840 --> 00:02:25,920
the capabilities that you can do um

67
00:02:25,920 --> 00:02:28,080
using the command line so now i can use

68
00:02:28,080 --> 00:02:30,319
things like sort i can use things like

69
00:02:30,319 --> 00:02:34,000
unique said awk and so on even you know

70
00:02:34,000 --> 00:02:35,200
i should have put grup there but right

71
00:02:35,200 --> 00:02:37,120
but grep can be used as well which is a

72
00:02:37,120 --> 00:02:39,360
great tool to use um so you can use all

73
00:02:39,360 --> 00:02:40,800
these

74
00:02:40,800 --> 00:02:43,519
relatively known command line options

75
00:02:43,519 --> 00:02:46,160
and arguments and tools

76
00:02:46,160 --> 00:02:48,160
and pipe that into t-sharp or use

77
00:02:48,160 --> 00:02:49,599
t-sharp to pipe that into the other

78
00:02:49,599 --> 00:02:50,800
tools

79
00:02:50,800 --> 00:02:52,959
either way it's a great opportunity to

80
00:02:52,959 --> 00:02:54,879
explore sort of enhanced capabilities

81
00:02:54,879 --> 00:02:56,959
you might not get using something like

82
00:02:56,959 --> 00:02:59,280
the gui um so we'll talk about some of

83
00:02:59,280 --> 00:03:00,879
that and i'll show you some again i'll

84
00:03:00,879 --> 00:03:02,080
show you some queries you can use to

85
00:03:02,080 --> 00:03:04,800
begin making an impact today uh and

86
00:03:04,800 --> 00:03:07,200
analyzing network traffic

87
00:03:07,200 --> 00:03:08,959
um so

88
00:03:08,959 --> 00:03:10,400
you might be thinking

89
00:03:10,400 --> 00:03:12,400
well why would i need to use t-sharp if

90
00:03:12,400 --> 00:03:14,000
i can just use wireshark i don't really

91
00:03:14,000 --> 00:03:15,599
see the point you know like i said it's

92
00:03:15,599 --> 00:03:17,200
pretty it's nice i have all these you

93
00:03:17,200 --> 00:03:18,640
know sweet colors on the screen right we

94
00:03:18,640 --> 00:03:20,560
have green and blue and purple all that

95
00:03:20,560 --> 00:03:23,440
fun stuff um which little side note you

96
00:03:23,440 --> 00:03:25,200
can do in t sharp as well get the nice

97
00:03:25,200 --> 00:03:27,680
colors but um so you might be thinking

98
00:03:27,680 --> 00:03:29,360
right like why do i need to use this and

99
00:03:29,360 --> 00:03:31,519
i can just use the gui um but you might

100
00:03:31,519 --> 00:03:33,120
not have that opportunity

101
00:03:33,120 --> 00:03:34,400
all the time

102
00:03:34,400 --> 00:03:36,000
sometimes you might have appliances

103
00:03:36,000 --> 00:03:37,599
where they don't have a gui interface

104
00:03:37,599 --> 00:03:39,280
there's no gui front end so you might

105
00:03:39,280 --> 00:03:40,959
just have to leverage the command line

106
00:03:40,959 --> 00:03:42,080
to do it

107
00:03:42,080 --> 00:03:44,640
other times the gui is just

108
00:03:44,640 --> 00:03:46,640
not sufficient enough when it has you

109
00:03:46,640 --> 00:03:48,080
know such a large amount of data in

110
00:03:48,080 --> 00:03:51,360
there to to sort of process right so uh

111
00:03:51,360 --> 00:03:52,879
one of the benefits of wireshark and

112
00:03:52,879 --> 00:03:54,400
t-shark is the

113
00:03:54,400 --> 00:03:57,040
protocol analyzers you can get um and

114
00:03:57,040 --> 00:03:58,799
you can leverage to sort of dissect some

115
00:03:58,799 --> 00:04:00,319
of the data you're seeing and there's

116
00:04:00,319 --> 00:04:02,560
some rules that fire even within t-sharp

117
00:04:02,560 --> 00:04:05,040
and wireshark uh to sort of pick out

118
00:04:05,040 --> 00:04:07,200
noteworthy activity something like a

119
00:04:07,200 --> 00:04:10,159
duplicate sequence number um sort of

120
00:04:10,159 --> 00:04:11,680
offs you know there's there's a bunch of

121
00:04:11,680 --> 00:04:13,599
different things you can fire on right

122
00:04:13,599 --> 00:04:15,519
and all that stuff takes processing time

123
00:04:15,519 --> 00:04:18,320
so if i have a gigabyte large pcap and i

124
00:04:18,320 --> 00:04:20,639
try to pipe that through wireshark

125
00:04:20,639 --> 00:04:22,240
if you've never done that you should try

126
00:04:22,240 --> 00:04:24,560
it for fun um but it's a frustrating

127
00:04:24,560 --> 00:04:26,880
experience right because you're waiting

128
00:04:26,880 --> 00:04:29,280
on wireshark to do all this aggregation

129
00:04:29,280 --> 00:04:32,479
all this enrichment and dissect all

130
00:04:32,479 --> 00:04:35,120
these protocols uh and it takes a while

131
00:04:35,120 --> 00:04:36,880
and each one of your queries you use

132
00:04:36,880 --> 00:04:38,560
within wireshark might take a long time

133
00:04:38,560 --> 00:04:41,120
to return as well and so

134
00:04:41,120 --> 00:04:42,720
that is why you might want to use

135
00:04:42,720 --> 00:04:44,960
t-shark instead because now i can just

136
00:04:44,960 --> 00:04:46,800
run t-shark and without having all this

137
00:04:46,800 --> 00:04:49,360
gooey front end i can get back my data

138
00:04:49,360 --> 00:04:51,520
relatively easily i can sift through

139
00:04:51,520 --> 00:04:53,840
that data to make smaller p caps to make

140
00:04:53,840 --> 00:04:55,919
it more digestible for wireshark as well

141
00:04:55,919 --> 00:04:57,440
so there's a lot of benefit from using a

142
00:04:57,440 --> 00:05:00,639
command line interface uh to use our

143
00:05:00,639 --> 00:05:02,639
network protocol analyzer on the command

144
00:05:02,639 --> 00:05:05,360
line rather than using it in a gui

145
00:05:05,360 --> 00:05:07,039
so

146
00:05:07,039 --> 00:05:08,880
let's talk about the basics right so now

147
00:05:08,880 --> 00:05:10,400
we know why we need to use it right

148
00:05:10,400 --> 00:05:13,280
because uh pcas might be too large uh we

149
00:05:13,280 --> 00:05:14,560
don't want to sit there and wait for our

150
00:05:14,560 --> 00:05:17,199
data to come back so let's dig into some

151
00:05:17,199 --> 00:05:19,120
of the basics that we can use and so on

152
00:05:19,120 --> 00:05:21,440
the screen here i have listed a very

153
00:05:21,440 --> 00:05:24,400
very basic uh t-sharp command

154
00:05:24,400 --> 00:05:25,440
and the

155
00:05:25,440 --> 00:05:27,360
sort of associated options are listed

156
00:05:27,360 --> 00:05:29,039
out there so we're going to read in our

157
00:05:29,039 --> 00:05:31,680
input which is the tac r

158
00:05:31,680 --> 00:05:33,360
input dot p-cap so that's going to read

159
00:05:33,360 --> 00:05:36,479
in our input file um the tach in is

160
00:05:36,479 --> 00:05:38,160
saying i don't want to perform hostname

161
00:05:38,160 --> 00:05:39,520
resolution

162
00:05:39,520 --> 00:05:41,919
which i think by default uh your your

163
00:05:41,919 --> 00:05:43,680
t-sharp and your wireshark profile will

164
00:05:43,680 --> 00:05:45,360
do this for you it won't

165
00:05:45,360 --> 00:05:47,440
resolve host names um but just to be

166
00:05:47,440 --> 00:05:49,440
safe i always put that in there

167
00:05:49,440 --> 00:05:51,199
because you don't want to poke the bear

168
00:05:51,199 --> 00:05:52,880
you don't want to tip off the attacker

169
00:05:52,880 --> 00:05:54,479
that you're sort of you know

170
00:05:54,479 --> 00:05:56,000
investigating them so you don't want to

171
00:05:56,000 --> 00:05:58,080
have dns queries just beating out

172
00:05:58,080 --> 00:06:00,080
because it's within your pcap and t

173
00:06:00,080 --> 00:06:02,080
shark and wireshark are trying to

174
00:06:02,080 --> 00:06:05,199
resolve host names so to be more subtle

175
00:06:05,199 --> 00:06:06,560
about it you turn off hostname

176
00:06:06,560 --> 00:06:08,639
resolution or you just cut off internet

177
00:06:08,639 --> 00:06:10,880
access on the vm you're using to analyze

178
00:06:10,880 --> 00:06:12,639
the pcap there's several different

179
00:06:12,639 --> 00:06:14,880
options but that's a good one that i

180
00:06:14,880 --> 00:06:16,720
always put in there um it's always a

181
00:06:16,720 --> 00:06:20,240
staple um and then the tag capital y is

182
00:06:20,240 --> 00:06:23,440
going to be your wireshark filter

183
00:06:23,440 --> 00:06:25,520
so our wireshark display filter i should

184
00:06:25,520 --> 00:06:27,360
say so

185
00:06:27,360 --> 00:06:28,880
if you've ever used wireshark you know

186
00:06:28,880 --> 00:06:31,039
that you can do great things like in

187
00:06:31,039 --> 00:06:32,199
this example

188
00:06:32,199 --> 00:06:34,560
tcp.deskport equals 80.

189
00:06:34,560 --> 00:06:35,600
and

190
00:06:35,600 --> 00:06:37,120
one of the benefits of wireshark is it

191
00:06:37,120 --> 00:06:39,039
has all these dissectors all these

192
00:06:39,039 --> 00:06:41,440
parsed fields if you will uh where you

193
00:06:41,440 --> 00:06:43,960
can just call out i want to look at only

194
00:06:43,960 --> 00:06:45,919
tcp.deskport and i want to make sure

195
00:06:45,919 --> 00:06:49,120
that it equals 80 which is the http port

196
00:06:49,120 --> 00:06:51,759
so you can leverage that on the command

197
00:06:51,759 --> 00:06:53,599
line with t-sharp so it's not just

198
00:06:53,599 --> 00:06:55,199
wireshark you can use this stuff so i

199
00:06:55,199 --> 00:06:56,960
can just feed this into my t-sharp

200
00:06:56,960 --> 00:07:00,000
command and filter out only

201
00:07:00,000 --> 00:07:02,000
web traffic or potentially web traffic

202
00:07:02,000 --> 00:07:05,199
right um and then the last part tac w is

203
00:07:05,199 --> 00:07:07,120
output.pcapp so i'm going to write out

204
00:07:07,120 --> 00:07:09,759
my output to a file rather than printing

205
00:07:09,759 --> 00:07:11,759
it to my console

206
00:07:11,759 --> 00:07:14,639
and so this is the output of that um so

207
00:07:14,639 --> 00:07:16,960
what i did is i just ran the command at

208
00:07:16,960 --> 00:07:18,800
the very top there

209
00:07:18,800 --> 00:07:21,280
and uh i went ahead

210
00:07:21,280 --> 00:07:22,479
and

211
00:07:22,479 --> 00:07:24,960
ran a head command to just pipe out the

212
00:07:24,960 --> 00:07:28,000
output from that pcap so i ran t shark

213
00:07:28,000 --> 00:07:31,759
tack r output.pcap and piped it to head

214
00:07:31,759 --> 00:07:32,880
so again

215
00:07:32,880 --> 00:07:34,160
like i mentioned you can use some of

216
00:07:34,160 --> 00:07:36,080
these native command line tools to

217
00:07:36,080 --> 00:07:37,120
enhance

218
00:07:37,120 --> 00:07:38,960
the capabilities on the command line

219
00:07:38,960 --> 00:07:41,520
using tshark so now i read in my pcapp

220
00:07:41,520 --> 00:07:43,919
and i just want the first 20 lines and

221
00:07:43,919 --> 00:07:46,000
you see we have 20 lines here

222
00:07:46,000 --> 00:07:47,680
and it's all

223
00:07:47,680 --> 00:07:50,639
port 80 traffic so destination port 80

224
00:07:50,639 --> 00:07:52,000
in this instance which we're going to

225
00:07:52,000 --> 00:07:53,759
assume is web traffic

226
00:07:53,759 --> 00:07:55,840
but you can see that this filter

227
00:07:55,840 --> 00:07:58,479
it worked right so now we have

228
00:07:58,479 --> 00:08:00,240
destination port 80 traffic all

229
00:08:00,240 --> 00:08:02,800
contained into one p cap so

230
00:08:02,800 --> 00:08:05,440
pretty nifty pretty easy to do um with

231
00:08:05,440 --> 00:08:07,919
wireshark you can do this yes but with

232
00:08:07,919 --> 00:08:09,440
t-shark if you know what you want to

233
00:08:09,440 --> 00:08:12,080
pull out why load it into a gui why do

234
00:08:12,080 --> 00:08:13,440
all this extra work when you can just

235
00:08:13,440 --> 00:08:14,319
run

236
00:08:14,319 --> 00:08:17,120
this command here right so um

237
00:08:17,120 --> 00:08:18,319
great stuff

238
00:08:18,319 --> 00:08:20,479
it's awesome um and if you ever use

239
00:08:20,479 --> 00:08:22,639
wireshark you might be familiar with the

240
00:08:22,639 --> 00:08:25,599
statistics portion of it so um

241
00:08:25,599 --> 00:08:26,960
you might pull down the protocol

242
00:08:26,960 --> 00:08:29,759
hierarchy you might do endpoints uh

243
00:08:29,759 --> 00:08:31,520
might look at sort of who's the biggest

244
00:08:31,520 --> 00:08:32,559
talkers

245
00:08:32,559 --> 00:08:35,200
within that pcap things like that um of

246
00:08:35,200 --> 00:08:37,440
course are available in t shark as well

247
00:08:37,440 --> 00:08:42,159
so within t shark there is the tac q

248
00:08:42,159 --> 00:08:45,200
and tack z option um so these are going

249
00:08:45,200 --> 00:08:46,160
to be new

250
00:08:46,160 --> 00:08:48,399
uh options that we haven't seen yet and

251
00:08:48,399 --> 00:08:50,480
so again we're going to read in our pcap

252
00:08:50,480 --> 00:08:51,519
we're going to turn off hostname

253
00:08:51,519 --> 00:08:53,680
resolution and we're going to do attack

254
00:08:53,680 --> 00:08:55,839
q meaning we don't want to see all the

255
00:08:55,839 --> 00:08:56,800
output

256
00:08:56,800 --> 00:08:58,959
of reading in that p cap so if i just do

257
00:08:58,959 --> 00:09:00,160
a t shark

258
00:09:00,160 --> 00:09:01,279
tack r

259
00:09:01,279 --> 00:09:04,080
input dot p cap it'll read every single

260
00:09:04,080 --> 00:09:06,240
packet and print it to the console which

261
00:09:06,240 --> 00:09:08,800
we don't want to do that so to suppress

262
00:09:08,800 --> 00:09:11,600
that let's give it a tac queue for quiet

263
00:09:11,600 --> 00:09:13,440
so we're going to suppress that output

264
00:09:13,440 --> 00:09:16,640
and then give it a tax z so the tax z is

265
00:09:16,640 --> 00:09:20,080
saying let's run statistics and so now i

266
00:09:20,080 --> 00:09:22,320
can use all the native wireshark to

267
00:09:22,320 --> 00:09:24,240
statistical functions that you might be

268
00:09:24,240 --> 00:09:25,680
familiar with

269
00:09:25,680 --> 00:09:28,080
just within the command line right and

270
00:09:28,080 --> 00:09:30,399
so now i run tax z

271
00:09:30,399 --> 00:09:31,839
io

272
00:09:31,839 --> 00:09:35,120
comma phs which stands for input output

273
00:09:35,120 --> 00:09:36,959
protocol hierarchy

274
00:09:36,959 --> 00:09:39,600
and so um on the next slide

275
00:09:39,600 --> 00:09:40,880
you'll see what that looks like and

276
00:09:40,880 --> 00:09:42,399
again if you've ever used wireshark and

277
00:09:42,399 --> 00:09:44,320
use statistics you'll be familiar with

278
00:09:44,320 --> 00:09:46,320
what the output looks like

279
00:09:46,320 --> 00:09:48,480
one thing i did want to highlight is in

280
00:09:48,480 --> 00:09:50,399
this bottom right corner here if you

281
00:09:50,399 --> 00:09:52,720
aren't familiar with what t-sharp can do

282
00:09:52,720 --> 00:09:54,640
on the statistics portion if you just

283
00:09:54,640 --> 00:09:56,080
run t-shark

284
00:09:56,080 --> 00:09:58,880
hyphen z help it'll show you all the

285
00:09:58,880 --> 00:10:01,519
sort of options you can provide um with

286
00:10:01,519 --> 00:10:04,880
a statistical statistical portion of it

287
00:10:04,880 --> 00:10:06,959
so highly recommend checking that out

288
00:10:06,959 --> 00:10:07,760
and

289
00:10:07,760 --> 00:10:09,279
sort of seeing what you can do because

290
00:10:09,279 --> 00:10:10,959
you can do a lot of stuff and it's it's

291
00:10:10,959 --> 00:10:12,320
pretty cool

292
00:10:12,320 --> 00:10:14,240
so this is the output of that command

293
00:10:14,240 --> 00:10:16,160
you see i ran the command i piped it to

294
00:10:16,160 --> 00:10:19,040
head just to show the first 20 lines and

295
00:10:19,040 --> 00:10:22,399
we did protocol hierarchy statistics phs

296
00:10:22,399 --> 00:10:25,760
and you see all the various

297
00:10:25,760 --> 00:10:27,600
hierarch protocols in a hierarchical

298
00:10:27,600 --> 00:10:29,839
fashion right so it shows you the frames

299
00:10:29,839 --> 00:10:32,399
the bytes and so we can pick out that we

300
00:10:32,399 --> 00:10:34,880
have dns traffic we have udp dns traffic

301
00:10:34,880 --> 00:10:38,079
in here we have some uh ntp traffic in

302
00:10:38,079 --> 00:10:40,880
here and so on and so forth so again

303
00:10:40,880 --> 00:10:43,120
very easy to do without doing many

304
00:10:43,120 --> 00:10:45,360
clicks i can just write this command and

305
00:10:45,360 --> 00:10:47,839
have the protocol hierarchy

306
00:10:47,839 --> 00:10:50,240
outputted to a file that i can reference

307
00:10:50,240 --> 00:10:52,800
later um or you know whatever you want

308
00:10:52,800 --> 00:10:54,320
to do with it right but it's a cool

309
00:10:54,320 --> 00:10:56,160
thing to use

310
00:10:56,160 --> 00:10:58,079
um and then my very favorite part of

311
00:10:58,079 --> 00:10:58,880
this

312
00:10:58,880 --> 00:11:01,040
part of t-shark rather is the field

313
00:11:01,040 --> 00:11:03,360
extraction so we're going to add a few

314
00:11:03,360 --> 00:11:05,360
new commands to what we already learned

315
00:11:05,360 --> 00:11:07,680
so um again we're going to do t-sharp

316
00:11:07,680 --> 00:11:09,680
we're going to read in our input.pcapp

317
00:11:09,680 --> 00:11:10,959
we're going to turn off hostname

318
00:11:10,959 --> 00:11:13,440
resolution and we're going to filter on

319
00:11:13,440 --> 00:11:16,079
http traffic so we're going to rely on

320
00:11:16,079 --> 00:11:18,880
the t shark dissector to

321
00:11:18,880 --> 00:11:21,440
give us only http traffic and we're

322
00:11:21,440 --> 00:11:23,440
going to give it the tac t

323
00:11:23,440 --> 00:11:25,839
which is going to be set the format of

324
00:11:25,839 --> 00:11:27,920
the output so whatever output is printed

325
00:11:27,920 --> 00:11:30,480
to our screen we want it to be in you

326
00:11:30,480 --> 00:11:32,880
can provide json you can provide fields

327
00:11:32,880 --> 00:11:34,399
for instance which is what we're using

328
00:11:34,399 --> 00:11:37,040
here so you can give out um or you can

329
00:11:37,040 --> 00:11:39,279
request rather from t-shirt different

330
00:11:39,279 --> 00:11:41,200
sorts of output and in this instance

331
00:11:41,200 --> 00:11:43,440
we're going to look for the fields so

332
00:11:43,440 --> 00:11:45,920
from our output we only want fields

333
00:11:45,920 --> 00:11:47,120
extracted

334
00:11:47,120 --> 00:11:49,680
and the field specifically that we want

335
00:11:49,680 --> 00:11:52,880
is the http dot user underscore agent

336
00:11:52,880 --> 00:11:53,760
field

337
00:11:53,760 --> 00:11:55,839
and so whenever you supply a field that

338
00:11:55,839 --> 00:11:57,839
you want to parse out you have to give

339
00:11:57,839 --> 00:12:00,639
it attack e every time so if i had two

340
00:12:00,639 --> 00:12:02,000
fields here that i was trying to parse

341
00:12:02,000 --> 00:12:04,560
out um i would do tac e

342
00:12:04,560 --> 00:12:08,480
http dot user underscore agent space tac

343
00:12:08,480 --> 00:12:09,279
e

344
00:12:09,279 --> 00:12:11,680
i don't know hdp dot host for the host

345
00:12:11,680 --> 00:12:14,240
header right so you can give it several

346
00:12:14,240 --> 00:12:16,160
different um field options and make

347
00:12:16,160 --> 00:12:17,839
almost like a report that you can just

348
00:12:17,839 --> 00:12:19,600
pull out of the data which again you

349
00:12:19,600 --> 00:12:20,399
can't

350
00:12:20,399 --> 00:12:21,600
i don't think you can really do with

351
00:12:21,600 --> 00:12:23,839
wireshark could be mistaken because uh

352
00:12:23,839 --> 00:12:25,040
people do some crazy things with

353
00:12:25,040 --> 00:12:26,800
wireshark but uh you don't get that

354
00:12:26,800 --> 00:12:28,560
capability that i understand and it's

355
00:12:28,560 --> 00:12:30,800
not as easy to do um

356
00:12:30,800 --> 00:12:32,639
if you used t-sharp you can do this

357
00:12:32,639 --> 00:12:33,680
stuff right

358
00:12:33,680 --> 00:12:36,399
one thing to call out is the

359
00:12:36,399 --> 00:12:38,160
fields that can be extracted or listed

360
00:12:38,160 --> 00:12:39,839
in this document here

361
00:12:39,839 --> 00:12:41,279
there's a lot if you haven't looked at

362
00:12:41,279 --> 00:12:44,480
it i think the http port or sorry

363
00:12:44,480 --> 00:12:47,360
protocol rather has thousands of fields

364
00:12:47,360 --> 00:12:49,360
you can pull out you can pull out

365
00:12:49,360 --> 00:12:51,440
the cookies you can pull out the header

366
00:12:51,440 --> 00:12:53,360
individual headers itself you can do a

367
00:12:53,360 --> 00:12:55,839
lot of crazy stuff so uh

368
00:12:55,839 --> 00:12:58,079
definitely a good thing to check out

369
00:12:58,079 --> 00:12:59,760
um but let's look at the output of this

370
00:12:59,760 --> 00:13:02,240
right so the output of this command

371
00:13:02,240 --> 00:13:05,680
is this so you see here i ran the

372
00:13:05,680 --> 00:13:08,240
command and i pulled out the http dot

373
00:13:08,240 --> 00:13:11,440
user underscore agent field and we have

374
00:13:11,440 --> 00:13:13,600
this output which is great because now

375
00:13:13,600 --> 00:13:15,360
we're only seeing what we want which is

376
00:13:15,360 --> 00:13:17,600
that user agent right if i see

377
00:13:17,600 --> 00:13:20,160
suspicious user agents in my web or yeah

378
00:13:20,160 --> 00:13:22,560
my web traffic or this pcapp in general

379
00:13:22,560 --> 00:13:23,680
then i know

380
00:13:23,680 --> 00:13:25,360
something might be fishy

381
00:13:25,360 --> 00:13:27,680
but one thing i wanted to highlight is

382
00:13:27,680 --> 00:13:29,760
you see those gaps in here there's blank

383
00:13:29,760 --> 00:13:31,360
spaces

384
00:13:31,360 --> 00:13:33,920
in between these results that is because

385
00:13:33,920 --> 00:13:37,519
i'm only pulling out http traffic um not

386
00:13:37,519 --> 00:13:40,320
all http traffic has user agents right

387
00:13:40,320 --> 00:13:43,360
if we think about how web traffic works

388
00:13:43,360 --> 00:13:45,120
the client

389
00:13:45,120 --> 00:13:47,600
issues a request and a client

390
00:13:47,600 --> 00:13:50,000
typically includes the user agent field

391
00:13:50,000 --> 00:13:52,240
it's optional but typically they'll use

392
00:13:52,240 --> 00:13:54,639
the user agent field uh in the in the

393
00:13:54,639 --> 00:13:55,680
request

394
00:13:55,680 --> 00:13:58,160
the server responds to that client and

395
00:13:58,160 --> 00:13:59,279
it doesn't

396
00:13:59,279 --> 00:14:01,519
include a user agent field it might have

397
00:14:01,519 --> 00:14:03,120
a sort of

398
00:14:03,120 --> 00:14:05,440
server identifier right a banner if you

399
00:14:05,440 --> 00:14:07,360
will that says hey i'm an apache web

400
00:14:07,360 --> 00:14:10,320
server or i'm an iis web server but it

401
00:14:10,320 --> 00:14:12,880
doesn't have a user agent field so

402
00:14:12,880 --> 00:14:14,240
all of these

403
00:14:14,240 --> 00:14:16,720
we can assume our associated web traffic

404
00:14:16,720 --> 00:14:18,639
without user agents

405
00:14:18,639 --> 00:14:19,920
um so

406
00:14:19,920 --> 00:14:21,600
we don't really care about that right i

407
00:14:21,600 --> 00:14:22,880
don't want to see a bunch of blank

408
00:14:22,880 --> 00:14:25,839
spaces in my results so what we can do

409
00:14:25,839 --> 00:14:28,160
is we can enhance this by saying

410
00:14:28,160 --> 00:14:30,959
i only want to filter for values that

411
00:14:30,959 --> 00:14:34,079
contain the user agent field so i don't

412
00:14:34,079 --> 00:14:37,360
care about uh the initial send synaptic

413
00:14:37,360 --> 00:14:39,920
uh you know three-way handshake part of

414
00:14:39,920 --> 00:14:41,760
it i don't care about responses from

415
00:14:41,760 --> 00:14:44,399
servers i only want to see when a client

416
00:14:44,399 --> 00:14:46,560
initiates a request and includes a user

417
00:14:46,560 --> 00:14:48,639
agent so by running this

418
00:14:48,639 --> 00:14:50,480
and we run the similar um

419
00:14:50,480 --> 00:14:52,880
parameters we ran on the last slide you

420
00:14:52,880 --> 00:14:55,120
see we don't have any spaces anymore so

421
00:14:55,120 --> 00:14:57,120
we only get back the data we care about

422
00:14:57,120 --> 00:15:00,560
which is again the user agent field

423
00:15:00,560 --> 00:15:01,680
so

424
00:15:01,680 --> 00:15:03,279
now that we have that

425
00:15:03,279 --> 00:15:04,720
let's run

426
00:15:04,720 --> 00:15:06,880
some native linux

427
00:15:06,880 --> 00:15:09,120
commands and enrich that data a little

428
00:15:09,120 --> 00:15:12,000
bit so i can run my command that i just

429
00:15:12,000 --> 00:15:14,160
showed previously and let's pipe that

430
00:15:14,160 --> 00:15:15,279
into sort

431
00:15:15,279 --> 00:15:17,360
so what that's going to do is let's just

432
00:15:17,360 --> 00:15:20,480
group the like values together

433
00:15:20,480 --> 00:15:22,320
let's unique them and get a count of

434
00:15:22,320 --> 00:15:24,320
that so i want to aggregate those

435
00:15:24,320 --> 00:15:29,519
results and give me a unique count so um

436
00:15:29,519 --> 00:15:32,079
moving on right we have the sort the

437
00:15:32,079 --> 00:15:34,079
second sort that we use um and we're

438
00:15:34,079 --> 00:15:36,800
going to do a uh number sort so we're

439
00:15:36,800 --> 00:15:39,680
going to sort from the lowest to the

440
00:15:39,680 --> 00:15:40,800
greatest

441
00:15:40,800 --> 00:15:42,639
least to greatest i guess you could say

442
00:15:42,639 --> 00:15:45,759
and that is what the output is here so

443
00:15:45,759 --> 00:15:48,800
running this i aggregate the user agents

444
00:15:48,800 --> 00:15:51,040
that are contained within this pcap and

445
00:15:51,040 --> 00:15:54,320
i want to look at the lowest common uh

446
00:15:54,320 --> 00:15:56,240
user agent in the pcap so give me the

447
00:15:56,240 --> 00:15:58,800
least common and so at the very top you

448
00:15:58,800 --> 00:15:59,920
see we have

449
00:15:59,920 --> 00:16:02,880
a one value which is the number of curl

450
00:16:02,880 --> 00:16:05,920
request 7.69.1

451
00:16:05,920 --> 00:16:09,519
contained within the pcap and so on so

452
00:16:09,519 --> 00:16:11,360
just running this quick command

453
00:16:11,360 --> 00:16:13,839
um you can tell that this this value

454
00:16:13,839 --> 00:16:15,920
here this 129

455
00:16:15,920 --> 00:16:16,639
uh

456
00:16:16,639 --> 00:16:18,079
count for the

457
00:16:18,079 --> 00:16:21,440
pixel c android uh user agent it's

458
00:16:21,440 --> 00:16:23,680
pretty common in this pcap i might not

459
00:16:23,680 --> 00:16:25,680
really care about that if it's a common

460
00:16:25,680 --> 00:16:27,519
user agent you know if i see chrome or

461
00:16:27,519 --> 00:16:28,800
my c

462
00:16:28,800 --> 00:16:31,040
you know edge or whatever it might be i

463
00:16:31,040 --> 00:16:32,560
don't really care about that but if i

464
00:16:32,560 --> 00:16:35,519
see curl happening in my pcap that i'm

465
00:16:35,519 --> 00:16:38,720
not familiar with if i see you know the

466
00:16:38,720 --> 00:16:40,480
python uh

467
00:16:40,480 --> 00:16:43,440
request or python web server um in the

468
00:16:43,440 --> 00:16:45,040
host header for instance if i'm doing

469
00:16:45,040 --> 00:16:46,560
other sorts of aggregation on different

470
00:16:46,560 --> 00:16:48,240
values

471
00:16:48,240 --> 00:16:50,720
then it might be sort of suspicious to

472
00:16:50,720 --> 00:16:53,120
me right so not only does this work for

473
00:16:53,120 --> 00:16:54,959
something like the user agent but you

474
00:16:54,959 --> 00:16:58,720
can do this on other values host names

475
00:16:58,720 --> 00:17:01,040
you can do it on website names you can

476
00:17:01,040 --> 00:17:03,440
do it on ip addresses you could do all

477
00:17:03,440 --> 00:17:05,760
sorts of aggregation and really

478
00:17:05,760 --> 00:17:08,559
hunt through the pcap you're looking at

479
00:17:08,559 --> 00:17:11,839
without using and relying on wireshark

480
00:17:11,839 --> 00:17:14,000
to do that work for you so it's a great

481
00:17:14,000 --> 00:17:16,799
opportunity and t-shark is awesome and

482
00:17:16,799 --> 00:17:19,199
if you've never seen this stuff before i

483
00:17:19,199 --> 00:17:21,439
highly recommend using it because again

484
00:17:21,439 --> 00:17:24,480
i'm a t-sharp fanboy i love it i use it

485
00:17:24,480 --> 00:17:26,079
so much that i forgot how to do some

486
00:17:26,079 --> 00:17:28,000
stuff in wireshark even because i rely

487
00:17:28,000 --> 00:17:30,080
on t-sharp so much

488
00:17:30,080 --> 00:17:31,280
which is

489
00:17:31,280 --> 00:17:32,880
you know that's fine right you look cool

490
00:17:32,880 --> 00:17:34,400
when you're hacking on the command line

491
00:17:34,400 --> 00:17:36,080
right instead of using the gui and

492
00:17:36,080 --> 00:17:38,160
that's the dream right so um i highly

493
00:17:38,160 --> 00:17:39,760
recommend looking into t shark if you

494
00:17:39,760 --> 00:17:41,679
haven't um

495
00:17:41,679 --> 00:17:43,840
but yeah so let's pivot into package

496
00:17:43,840 --> 00:17:44,880
sifter

497
00:17:44,880 --> 00:17:46,480
so

498
00:17:46,480 --> 00:17:49,760
i recognized that uh there was a problem

499
00:17:49,760 --> 00:17:51,840
right and package sifter was a solution

500
00:17:51,840 --> 00:17:53,840
to that problem so the problem is is if

501
00:17:53,840 --> 00:17:56,480
we use wireshark a lot and we have large

502
00:17:56,480 --> 00:17:58,559
pcaps um

503
00:17:58,559 --> 00:18:00,720
it takes a while to load this data

504
00:18:00,720 --> 00:18:03,520
and we become sad analysts right which

505
00:18:03,520 --> 00:18:04,640
we don't want to become sad little

506
00:18:04,640 --> 00:18:06,320
analysts right i know it's cute over

507
00:18:06,320 --> 00:18:07,600
here but we don't want to be like that

508
00:18:07,600 --> 00:18:09,200
we want to be happy and ready to do our

509
00:18:09,200 --> 00:18:11,919
job and super efficient in what we do

510
00:18:11,919 --> 00:18:15,679
and so um i found that uh yeah t-shark

511
00:18:15,679 --> 00:18:16,640
is great

512
00:18:16,640 --> 00:18:17,360
but

513
00:18:17,360 --> 00:18:19,360
things like using the statistics portion

514
00:18:19,360 --> 00:18:21,679
to pull out protocol hierarchy and

515
00:18:21,679 --> 00:18:24,080
endpoint biggest talkers and things of

516
00:18:24,080 --> 00:18:25,120
that nature

517
00:18:25,120 --> 00:18:27,520
it's uh repetitive to continuously do

518
00:18:27,520 --> 00:18:28,799
that on the command line write that

519
00:18:28,799 --> 00:18:31,520
command out get the data and then sort

520
00:18:31,520 --> 00:18:33,679
of read it in a human human readable

521
00:18:33,679 --> 00:18:36,880
format right um so

522
00:18:36,880 --> 00:18:39,120
what package sifter does

523
00:18:39,120 --> 00:18:40,480
is instead of having to type all those

524
00:18:40,480 --> 00:18:42,880
things out individually what packet

525
00:18:42,880 --> 00:18:45,840
sifter does is it receives the input

526
00:18:45,840 --> 00:18:47,600
which is this large p cap on the left

527
00:18:47,600 --> 00:18:49,840
here packet sifter the tool which is a

528
00:18:49,840 --> 00:18:51,360
script that will run

529
00:18:51,360 --> 00:18:54,400
it's a bash script so it's very portable

530
00:18:54,400 --> 00:18:56,960
and what it'll do is it'll pull out

531
00:18:56,960 --> 00:18:59,120
various different data points for you

532
00:18:59,120 --> 00:19:01,280
automatically so you don't have to do it

533
00:19:01,280 --> 00:19:03,360
yourself and there's also enrichment

534
00:19:03,360 --> 00:19:05,200
capabilities which we'll talk about here

535
00:19:05,200 --> 00:19:06,400
as well

536
00:19:06,400 --> 00:19:09,600
so just from the top um excuse me

537
00:19:09,600 --> 00:19:12,240
it pulls out text files so it'll create

538
00:19:12,240 --> 00:19:14,320
your protocol hierarchy it'll create

539
00:19:14,320 --> 00:19:17,760
your http statistics tcp ip statistics

540
00:19:17,760 --> 00:19:20,320
it runs a bunch of statistical values um

541
00:19:20,320 --> 00:19:22,799
or requests rather against that pcap and

542
00:19:22,799 --> 00:19:24,559
prints it all for you in one nice little

543
00:19:24,559 --> 00:19:26,160
place so that you don't have to run

544
00:19:26,160 --> 00:19:28,880
those individual commands yourself

545
00:19:28,880 --> 00:19:30,080
time saver

546
00:19:30,080 --> 00:19:31,840
love doing that that's one of the first

547
00:19:31,840 --> 00:19:33,280
places that i look at whenever i get a

548
00:19:33,280 --> 00:19:35,360
new p cap that i'm investigating

549
00:19:35,360 --> 00:19:37,520
um so

550
00:19:37,520 --> 00:19:39,440
the second portion is it'll carve out

551
00:19:39,440 --> 00:19:41,440
smaller p caps so what it'll do is it'll

552
00:19:41,440 --> 00:19:44,240
take one large p cap and then carve out

553
00:19:44,240 --> 00:19:45,520
several different ones depending on the

554
00:19:45,520 --> 00:19:47,760
protocol so automatically it'll pull out

555
00:19:47,760 --> 00:19:51,200
hdp traffic smb traffic ftp traffic and

556
00:19:51,200 --> 00:19:52,480
dns traffic

557
00:19:52,480 --> 00:19:55,039
into four different pcaps for you so if

558
00:19:55,039 --> 00:19:57,120
i want to only look at dns traffic i

559
00:19:57,120 --> 00:19:59,280
already have a pcap that is contained or

560
00:19:59,280 --> 00:20:01,919
that only contains rather dns traffic

561
00:20:01,919 --> 00:20:03,520
which makes it easier for me to work

562
00:20:03,520 --> 00:20:05,760
with as an analyst

563
00:20:05,760 --> 00:20:07,440
the next thing it'll do is it'll carve

564
00:20:07,440 --> 00:20:10,080
out all the objects all the web traffic

565
00:20:10,080 --> 00:20:11,760
objects and the smb objects

566
00:20:11,760 --> 00:20:13,440
automatically and throw it into a

567
00:20:13,440 --> 00:20:16,159
tarball for you so if i'm investigating

568
00:20:16,159 --> 00:20:17,280
um

569
00:20:17,280 --> 00:20:19,039
you know some sort of potential web

570
00:20:19,039 --> 00:20:20,880
traffic compromise where i see a user

571
00:20:20,880 --> 00:20:23,200
downloaded something suspicious um this

572
00:20:23,200 --> 00:20:25,039
will pull it out for you of course the

573
00:20:25,039 --> 00:20:27,760
caveat to that is is be safe when you're

574
00:20:27,760 --> 00:20:29,360
unzipping it and clicking on things you

575
00:20:29,360 --> 00:20:30,559
don't want to run things that you

576
00:20:30,559 --> 00:20:31,679
shouldn't run

577
00:20:31,679 --> 00:20:33,520
right but that's why it zipped up just

578
00:20:33,520 --> 00:20:34,720
because there's a little bit of extra

579
00:20:34,720 --> 00:20:36,240
protection there you have to do the work

580
00:20:36,240 --> 00:20:38,640
to unzip it um but it does it for you so

581
00:20:38,640 --> 00:20:40,320
you don't have to do that yourself

582
00:20:40,320 --> 00:20:43,919
and lastly um it has capabilities with

583
00:20:43,919 --> 00:20:46,640
virustotal and abuse ipdb

584
00:20:46,640 --> 00:20:48,880
so what you'll do what you'll do and

585
00:20:48,880 --> 00:20:50,799
what i'll show you in the demo is you

586
00:20:50,799 --> 00:20:53,360
feed it your api keys for virus total

587
00:20:53,360 --> 00:20:55,200
and abuse ipdb

588
00:20:55,200 --> 00:20:57,679
um and once it gets those api keys what

589
00:20:57,679 --> 00:20:59,840
it'll do is it'll take the output from

590
00:20:59,840 --> 00:21:00,559
the

591
00:21:00,559 --> 00:21:03,760
http and smb objects and it will do an

592
00:21:03,760 --> 00:21:06,720
md5 lookup on all the objects and

593
00:21:06,720 --> 00:21:09,360
compare it with the virustotal results

594
00:21:09,360 --> 00:21:10,720
so what that does is it'll create a new

595
00:21:10,720 --> 00:21:13,360
text file for you it'll show you

596
00:21:13,360 --> 00:21:15,039
the results of those findings so it'll

597
00:21:15,039 --> 00:21:17,120
say this object was found to be

598
00:21:17,120 --> 00:21:20,000
malicious this object excuse me was

599
00:21:20,000 --> 00:21:22,720
found to be benign and it really helps

600
00:21:22,720 --> 00:21:25,120
the analyst just run this pcap through

601
00:21:25,120 --> 00:21:27,280
package sifter and then i already have

602
00:21:27,280 --> 00:21:30,000
output that i know might be potential

603
00:21:30,000 --> 00:21:31,600
indicator or compromise right a

604
00:21:31,600 --> 00:21:33,120
virustotal says

605
00:21:33,120 --> 00:21:36,000
45 out of 67 vendors found this file to

606
00:21:36,000 --> 00:21:38,159
be malicious then i know that might be

607
00:21:38,159 --> 00:21:40,080
something noteworthy to look at it gives

608
00:21:40,080 --> 00:21:41,600
you the file name so you can go back

609
00:21:41,600 --> 00:21:44,480
into the pcap find the file and sort of

610
00:21:44,480 --> 00:21:46,799
see the the beginning parts of that uh

611
00:21:46,799 --> 00:21:48,559
conversation so you can really dive in

612
00:21:48,559 --> 00:21:50,640
to see why this user downloaded what

613
00:21:50,640 --> 00:21:53,200
they did right um so it does that for

614
00:21:53,200 --> 00:21:56,799
web traffic and smb traffic um so which

615
00:21:56,799 --> 00:22:00,000
is which is great and lastly the abuse

616
00:22:00,000 --> 00:22:03,039
ipdb integration what it'll do is it'll

617
00:22:03,039 --> 00:22:05,600
look up the dns a records within the

618
00:22:05,600 --> 00:22:07,919
pcap and it'll look up the ip addresses

619
00:22:07,919 --> 00:22:10,480
and see was this a record associate or

620
00:22:10,480 --> 00:22:12,720
was its ip address rather associated

621
00:22:12,720 --> 00:22:14,880
with known malicious activity and so

622
00:22:14,880 --> 00:22:17,200
you'll get another report that says uh

623
00:22:17,200 --> 00:22:20,159
the confidence level out of 100 is 50

624
00:22:20,159 --> 00:22:22,640
for this ip address so this ip address

625
00:22:22,640 --> 00:22:25,440
within the last 30 days has a you know

626
00:22:25,440 --> 00:22:27,919
abuse scorer if you will of 50 out of

627
00:22:27,919 --> 00:22:29,440
100 so it might be something noteworthy

628
00:22:29,440 --> 00:22:30,480
to look at

629
00:22:30,480 --> 00:22:33,360
um if i'm an american you know business

630
00:22:33,360 --> 00:22:35,440
american association that doesn't do

631
00:22:35,440 --> 00:22:37,280
business with something like maybe

632
00:22:37,280 --> 00:22:39,919
russia or china or whatever it might be

633
00:22:39,919 --> 00:22:42,400
if i see that i have web traffic or dns

634
00:22:42,400 --> 00:22:44,720
traffic rather um

635
00:22:44,720 --> 00:22:47,360
beating out and it's registered to an ip

636
00:22:47,360 --> 00:22:50,400
address in china or russia then that

637
00:22:50,400 --> 00:22:51,760
might be something noteworthy for me to

638
00:22:51,760 --> 00:22:54,799
look at as an analyst so it parses out a

639
00:22:54,799 --> 00:22:57,280
bunch of data for you so that it'll ease

640
00:22:57,280 --> 00:22:59,840
the analysis for an analyst so i don't

641
00:22:59,840 --> 00:23:01,679
have to go into this pcap this

642
00:23:01,679 --> 00:23:04,240
potentially large pcap and extract

643
00:23:04,240 --> 00:23:06,799
objects manually look up ip addresses

644
00:23:06,799 --> 00:23:09,760
manually and carve out data manually it

645
00:23:09,760 --> 00:23:11,679
does all that for you and again on the

646
00:23:11,679 --> 00:23:14,159
command line with bash so it's super

647
00:23:14,159 --> 00:23:16,400
portable um and

648
00:23:16,400 --> 00:23:18,000
we'll talk about that in the demo right

649
00:23:18,000 --> 00:23:20,000
so i'll show you how this tool works and

650
00:23:20,000 --> 00:23:21,679
we'll do a small little

651
00:23:21,679 --> 00:23:23,840
investigation so you can see how this

652
00:23:23,840 --> 00:23:26,080
tool works in action

653
00:23:26,080 --> 00:23:28,559
so with that i will see you in the demo

654
00:23:28,559 --> 00:23:30,960
portion

655
00:23:31,360 --> 00:23:34,000
okay so now let's jump into the demo

656
00:23:34,000 --> 00:23:36,320
portion of this presentation what you're

657
00:23:36,320 --> 00:23:38,480
looking at here is the

658
00:23:38,480 --> 00:23:41,039
github repository for packet sifter you

659
00:23:41,039 --> 00:23:43,679
can find it at github.com forward slash

660
00:23:43,679 --> 00:23:45,600
packet sifter forward slash packet

661
00:23:45,600 --> 00:23:47,039
sifter tool

662
00:23:47,039 --> 00:23:48,640
the main thing i want to highlight here

663
00:23:48,640 --> 00:23:52,000
is the requirements to run packet sifter

664
00:23:52,000 --> 00:23:54,320
at the very least what you will need is

665
00:23:54,320 --> 00:23:56,480
t-shark of course we've been talking

666
00:23:56,480 --> 00:23:58,960
about it for the past 20 minutes or so

667
00:23:58,960 --> 00:24:01,360
i love t-shark i built this tool off of

668
00:24:01,360 --> 00:24:03,600
t-sharp so you will need that

669
00:24:03,600 --> 00:24:05,760
but if you want to run the

670
00:24:05,760 --> 00:24:07,120
integrations that i built with

671
00:24:07,120 --> 00:24:10,799
virustotal and abuse ipdb you will need

672
00:24:10,799 --> 00:24:12,000
jq

673
00:24:12,000 --> 00:24:14,640
to format the json output and you will

674
00:24:14,640 --> 00:24:18,240
need curl to make the actual api calls

675
00:24:18,240 --> 00:24:20,720
so make sure you have both of those and

676
00:24:20,720 --> 00:24:22,640
tshark as well

677
00:24:22,640 --> 00:24:25,200
so once you download the tool there are

678
00:24:25,200 --> 00:24:26,960
three things you will need to extract

679
00:24:26,960 --> 00:24:29,760
from it you will need the tool itself

680
00:24:29,760 --> 00:24:32,880
package center dot sh you will need the

681
00:24:32,880 --> 00:24:35,679
virustotal initial.sh which is the

682
00:24:35,679 --> 00:24:38,000
initialization script for virustotal and

683
00:24:38,000 --> 00:24:40,159
you will also need abuse ipdb

684
00:24:40,159 --> 00:24:42,240
initialization script so these three

685
00:24:42,240 --> 00:24:44,720
scripts you will need to run the tool so

686
00:24:44,720 --> 00:24:46,480
let's go ahead and jump into the command

687
00:24:46,480 --> 00:24:47,840
line portion

688
00:24:47,840 --> 00:24:50,799
okay so now we are on the command line

689
00:24:50,799 --> 00:24:51,600
let's

690
00:24:51,600 --> 00:24:53,279
close this out just so we don't see this

691
00:24:53,279 --> 00:24:55,039
in the background here to distract us or

692
00:24:55,039 --> 00:24:57,760
anything but so i downloaded the tool um

693
00:24:57,760 --> 00:24:59,039
i mentioned we needed those three

694
00:24:59,039 --> 00:25:00,559
scripts and i have those three scripts

695
00:25:00,559 --> 00:25:01,840
listed here

696
00:25:01,840 --> 00:25:03,600
with run capabilities so we can go ahead

697
00:25:03,600 --> 00:25:06,080
and execute these so

698
00:25:06,080 --> 00:25:08,880
i'm not going to show you my virus total

699
00:25:08,880 --> 00:25:11,039
api key because those are hard to come

700
00:25:11,039 --> 00:25:13,039
by takes a little bit more work than

701
00:25:13,039 --> 00:25:16,159
abuse ipdb to get an api key so i will

702
00:25:16,159 --> 00:25:17,840
not show you that but i will show you

703
00:25:17,840 --> 00:25:21,200
the initialization script uh with abuse

704
00:25:21,200 --> 00:25:22,559
ipdb

705
00:25:22,559 --> 00:25:25,360
so let's go ahead and run this

706
00:25:25,360 --> 00:25:27,039
and it needs to run in the same

707
00:25:27,039 --> 00:25:29,840
directory as package sifter itself or it

708
00:25:29,840 --> 00:25:31,279
will not work

709
00:25:31,279 --> 00:25:33,760
so all it's asking for here is the

710
00:25:33,760 --> 00:25:36,640
80 character api key for abuse ipdb

711
00:25:36,640 --> 00:25:38,640
which you can get freely just by going

712
00:25:38,640 --> 00:25:39,760
to the website

713
00:25:39,760 --> 00:25:42,000
logging in creating an account and

714
00:25:42,000 --> 00:25:45,200
requesting an api key

715
00:25:45,200 --> 00:25:47,919
we've given the api key and now um you

716
00:25:47,919 --> 00:25:50,559
should ideally get a google.com response

717
00:25:50,559 --> 00:25:52,799
back this indicates that the curl

718
00:25:52,799 --> 00:25:55,120
request was successful and the tool is

719
00:25:55,120 --> 00:25:59,520
set up with your abuse ipdb api key

720
00:25:59,520 --> 00:26:01,120
if you do not get this

721
00:26:01,120 --> 00:26:03,279
then there could be a whole slew of

722
00:26:03,279 --> 00:26:04,799
issues potentially right you have to

723
00:26:04,799 --> 00:26:07,120
kind of test to see what went wrong

724
00:26:07,120 --> 00:26:08,880
maybe your internet connection isn't you

725
00:26:08,880 --> 00:26:09,600
know

726
00:26:09,600 --> 00:26:11,039
up and running you might have a proxy

727
00:26:11,039 --> 00:26:13,360
that isn't configured correctly uh you

728
00:26:13,360 --> 00:26:14,960
might not have curl installed you might

729
00:26:14,960 --> 00:26:17,039
not have jq installed it all just

730
00:26:17,039 --> 00:26:18,400
depends so you just have to do some

731
00:26:18,400 --> 00:26:20,159
troubleshooting but as long as you give

732
00:26:20,159 --> 00:26:21,600
it an api key that's valid and you have

733
00:26:21,600 --> 00:26:24,000
a valid internet connection out

734
00:26:24,000 --> 00:26:25,919
you should be you know good to go so

735
00:26:25,919 --> 00:26:28,240
here we are we are good to go and now um

736
00:26:28,240 --> 00:26:29,200
again i'm not going to show you the

737
00:26:29,200 --> 00:26:32,159
virus total one and uh just

738
00:26:32,159 --> 00:26:34,240
on the side there uh i know i just

739
00:26:34,240 --> 00:26:36,960
exposed my abuse ipdb

740
00:26:36,960 --> 00:26:39,360
api key but like i mentioned super easy

741
00:26:39,360 --> 00:26:41,760
to come by so i will detonate that api

742
00:26:41,760 --> 00:26:43,600
key after this recording so

743
00:26:43,600 --> 00:26:46,159
nobody can uh leverage that api key and

744
00:26:46,159 --> 00:26:48,240
the spirit of good opsec right

745
00:26:48,240 --> 00:26:49,120
so

746
00:26:49,120 --> 00:26:52,080
now let's change into my output folder

747
00:26:52,080 --> 00:26:55,120
this just a nice place to put all the

748
00:26:55,120 --> 00:26:56,559
output data

749
00:26:56,559 --> 00:26:59,279
from the tool itself so i'm going to run

750
00:26:59,279 --> 00:27:01,120
packet sifter and i'm going to run it

751
00:27:01,120 --> 00:27:03,440
with the tac h

752
00:27:03,440 --> 00:27:04,960
argument first just so we can see the

753
00:27:04,960 --> 00:27:07,039
help file that prints out so it'll

754
00:27:07,039 --> 00:27:08,720
highlight the various options that you

755
00:27:08,720 --> 00:27:11,440
can use with packet sifter the required

756
00:27:11,440 --> 00:27:14,400
option tak i is for the input file you

757
00:27:14,400 --> 00:27:16,720
will need that to pass in your pcap

758
00:27:16,720 --> 00:27:19,200
argument so you will always need that

759
00:27:19,200 --> 00:27:21,120
and if you have the integration set up

760
00:27:21,120 --> 00:27:24,000
for abuse ipdb and virustotal you can

761
00:27:24,000 --> 00:27:25,120
use the

762
00:27:25,120 --> 00:27:26,240
tac a

763
00:27:26,240 --> 00:27:29,520
for the abuse ipdb integration or attack

764
00:27:29,520 --> 00:27:30,240
v

765
00:27:30,240 --> 00:27:32,880
for virustotal and also if you want to

766
00:27:32,880 --> 00:27:35,440
resolve host names in the pcap itself

767
00:27:35,440 --> 00:27:36,399
again

768
00:27:36,399 --> 00:27:37,760
you might not want to do that because

769
00:27:37,760 --> 00:27:39,200
you don't want to necessarily tip off

770
00:27:39,200 --> 00:27:40,880
the attacker that you're investigating

771
00:27:40,880 --> 00:27:41,600
them

772
00:27:41,600 --> 00:27:43,600
if you didn't want to you know

773
00:27:43,600 --> 00:27:45,760
resolve host names you could run that

774
00:27:45,760 --> 00:27:49,919
with attack r so before this demo um i

775
00:27:49,919 --> 00:27:51,840
did run it and that's what this file is

776
00:27:51,840 --> 00:27:53,520
here just so we don't have to sit and

777
00:27:53,520 --> 00:27:56,000
wait and i don't want to you know again

778
00:27:56,000 --> 00:27:57,279
poke the bear if there's any actual

779
00:27:57,279 --> 00:27:59,360
malicious traffic in this pcap so i have

780
00:27:59,360 --> 00:28:01,039
it on the side here we can look at it

781
00:28:01,039 --> 00:28:02,399
later but

782
00:28:02,399 --> 00:28:05,200
just going to run packet sifter

783
00:28:05,200 --> 00:28:08,320
with the input file of

784
00:28:08,320 --> 00:28:09,840
demo

785
00:28:09,840 --> 00:28:12,640
dot pcapp i'm going to run it with the

786
00:28:12,640 --> 00:28:15,679
abuse ipdb integration and the virus

787
00:28:15,679 --> 00:28:18,799
total integration so when i hit enter

788
00:28:18,799 --> 00:28:20,240
a lot of stuff happens real quick but

789
00:28:20,240 --> 00:28:21,360
the main thing that happens is it's

790
00:28:21,360 --> 00:28:23,760
going to print out uh the metadata of

791
00:28:23,760 --> 00:28:25,360
the pcap itself so this gives you

792
00:28:25,360 --> 00:28:27,520
information like how many packets are in

793
00:28:27,520 --> 00:28:28,640
the pcap

794
00:28:28,640 --> 00:28:31,039
the packet size uh the bit rate all this

795
00:28:31,039 --> 00:28:33,039
sort of sort of fun stuff right that you

796
00:28:33,039 --> 00:28:34,399
kind of just

797
00:28:34,399 --> 00:28:36,000
want to verify right we have hashes so

798
00:28:36,000 --> 00:28:37,200
we can verify that we're looking at what

799
00:28:37,200 --> 00:28:40,080
we expect to look at all that fun stuff

800
00:28:40,080 --> 00:28:42,720
but after that it prints out a bunch of

801
00:28:42,720 --> 00:28:44,799
supplemental data about what's going on

802
00:28:44,799 --> 00:28:47,919
so already we have an i o statistics.txt

803
00:28:47,919 --> 00:28:50,159
file that was printed out this contains

804
00:28:50,159 --> 00:28:51,919
the protocol hierarchy that i mentioned

805
00:28:51,919 --> 00:28:54,080
before in the slides previously and it

806
00:28:54,080 --> 00:28:56,320
also contains the input and output

807
00:28:56,320 --> 00:28:58,480
broken up in 30 second intervals so this

808
00:28:58,480 --> 00:29:01,200
could be a way to detect something like

809
00:29:01,200 --> 00:29:03,279
beaconing right if i have a host that's

810
00:29:03,279 --> 00:29:05,360
communicating consistently every 30

811
00:29:05,360 --> 00:29:07,200
seconds this would be something you can

812
00:29:07,200 --> 00:29:09,360
use to spot that activity

813
00:29:09,360 --> 00:29:11,520
it also prints out iep statistics and

814
00:29:11,520 --> 00:29:14,240
tcp statistics so it has layered three

815
00:29:14,240 --> 00:29:16,240
information in one file layer four

816
00:29:16,240 --> 00:29:18,159
information and one file and also the

817
00:29:18,159 --> 00:29:20,640
individual conversations at layer three

818
00:29:20,640 --> 00:29:22,720
and layer four as well a lot of good

819
00:29:22,720 --> 00:29:24,480
information in there

820
00:29:24,480 --> 00:29:26,799
and now it is sifting through the http

821
00:29:26,799 --> 00:29:28,960
data so it'll print some metadata about

822
00:29:28,960 --> 00:29:31,919
the http traffic in the pcap and it also

823
00:29:31,919 --> 00:29:33,679
extracted all the

824
00:29:33,679 --> 00:29:35,520
http objects

825
00:29:35,520 --> 00:29:37,760
and put them in a tarball and it also

826
00:29:37,760 --> 00:29:40,559
because i passed it that tac-v argument

827
00:29:40,559 --> 00:29:42,880
it went ahead and looked up the md5s

828
00:29:42,880 --> 00:29:45,679
with virustotal so now we should have an

829
00:29:45,679 --> 00:29:48,159
extra couple of files in there of output

830
00:29:48,159 --> 00:29:50,480
that indicate uh that the virustotal

831
00:29:50,480 --> 00:29:52,320
integration was successful and we'll

832
00:29:52,320 --> 00:29:53,679
take a look at that at the end of this

833
00:29:53,679 --> 00:29:54,640
here

834
00:29:54,640 --> 00:29:56,399
likewise smb

835
00:29:56,399 --> 00:29:59,360
similar activity with http extracts it

836
00:29:59,360 --> 00:30:02,000
does look ups all that sort of fun stuff

837
00:30:02,000 --> 00:30:04,080
dns so it's going to create a new dns

838
00:30:04,080 --> 00:30:06,080
pcap it's going to extract the text

839
00:30:06,080 --> 00:30:07,919
records in the dns

840
00:30:07,919 --> 00:30:09,200
traffic as well and just in case there

841
00:30:09,200 --> 00:30:11,279
might be any sort of you know covert

842
00:30:11,279 --> 00:30:13,679
communications and text traffic it also

843
00:30:13,679 --> 00:30:15,279
pulls out the a records and because i

844
00:30:15,279 --> 00:30:17,919
passed it the tac a argument

845
00:30:17,919 --> 00:30:20,399
it is going to look up the ip addresses

846
00:30:20,399 --> 00:30:24,159
in the a record returns um against abuse

847
00:30:24,159 --> 00:30:26,960
ipdb so we'll see has there been any ip

848
00:30:26,960 --> 00:30:29,200
addresses that are known malicious ip

849
00:30:29,200 --> 00:30:32,480
addresses according to abuse ipdb uh

850
00:30:32,480 --> 00:30:34,399
what is the actual geolocation of these

851
00:30:34,399 --> 00:30:37,120
ip addresses all sorts of the fun stuff

852
00:30:37,120 --> 00:30:38,320
there

853
00:30:38,320 --> 00:30:40,240
this error comes out every once in a

854
00:30:40,240 --> 00:30:42,399
while i think i have a situation with

855
00:30:42,399 --> 00:30:44,000
it's a dissector book so i have an issue

856
00:30:44,000 --> 00:30:45,840
with my t shark i don't worry about that

857
00:30:45,840 --> 00:30:47,360
if that happens to you it doesn't

858
00:30:47,360 --> 00:30:49,039
doesn't ruin anything it's just a

859
00:30:49,039 --> 00:30:51,600
t-sharp issue more than anything else

860
00:30:51,600 --> 00:30:53,440
and lastly it

861
00:30:53,440 --> 00:30:56,320
will carve out ftp traffic if it exists

862
00:30:56,320 --> 00:30:59,200
if it does not it'll delete the ftp

863
00:30:59,200 --> 00:31:01,919
pcap request that it made so there won't

864
00:31:01,919 --> 00:31:03,840
be any extra files for you to look at

865
00:31:03,840 --> 00:31:05,440
but that's it

866
00:31:05,440 --> 00:31:08,080
so within a few minutes um and honestly

867
00:31:08,080 --> 00:31:09,200
it's less than that i was kind of just

868
00:31:09,200 --> 00:31:10,720
talking through it right but within a

869
00:31:10,720 --> 00:31:14,559
minute or so it made the api calls and

870
00:31:14,559 --> 00:31:16,720
pulled back a bunch of data and now

871
00:31:16,720 --> 00:31:19,039
let's clear the screen here

872
00:31:19,039 --> 00:31:21,600
and let's run ls you see we have a whole

873
00:31:21,600 --> 00:31:23,600
bunch of files that came out of that and

874
00:31:23,600 --> 00:31:25,919
so each one of these files as an analyst

875
00:31:25,919 --> 00:31:28,640
can aid you in the analysis of your pcap

876
00:31:28,640 --> 00:31:29,519
and so

877
00:31:29,519 --> 00:31:31,840
for me um the first thing i want to look

878
00:31:31,840 --> 00:31:34,240
at is the input output statistics

879
00:31:34,240 --> 00:31:36,240
because this will give me an idea of the

880
00:31:36,240 --> 00:31:39,200
protocol hierarchy in the pcap so let's

881
00:31:39,200 --> 00:31:42,559
go ahead and do a less against the i o

882
00:31:42,559 --> 00:31:44,559
statistics file here

883
00:31:44,559 --> 00:31:46,640
and so i mentioned it'll carve out

884
00:31:46,640 --> 00:31:48,240
potential beaconing so it has a 30

885
00:31:48,240 --> 00:31:50,320
second interval it shows you the frames

886
00:31:50,320 --> 00:31:54,559
and bytes in each interval um again

887
00:31:54,559 --> 00:31:56,720
not full proof defined beaconing but it

888
00:31:56,720 --> 00:31:58,720
can help you to see what was the biggest

889
00:31:58,720 --> 00:32:00,640
part of the conversation um was there

890
00:32:00,640 --> 00:32:01,760
consistent

891
00:32:01,760 --> 00:32:04,000
bytes out or frames out things of that

892
00:32:04,000 --> 00:32:04,880
nature

893
00:32:04,880 --> 00:32:06,320
but if we scroll down to this we get

894
00:32:06,320 --> 00:32:09,039
that protocol hierarchy statistics

895
00:32:09,039 --> 00:32:10,640
that i showed in the slide deck

896
00:32:10,640 --> 00:32:12,480
previously and so this will highlight

897
00:32:12,480 --> 00:32:14,240
the various protocols embedded in the

898
00:32:14,240 --> 00:32:16,640
actual pcap itself so if you don't know

899
00:32:16,640 --> 00:32:18,399
what you're looking at this can give you

900
00:32:18,399 --> 00:32:20,720
a brief overview of oh hey i have smb

901
00:32:20,720 --> 00:32:23,519
traffic i have ldap traffic i know i

902
00:32:23,519 --> 00:32:26,159
have web traffic and there's media files

903
00:32:26,159 --> 00:32:28,159
in this traffic and i have some tls

904
00:32:28,159 --> 00:32:30,799
traffic as well and also some art right

905
00:32:30,799 --> 00:32:32,720
so it just gives you a sort of brief

906
00:32:32,720 --> 00:32:34,640
overview of what you can expect to be

907
00:32:34,640 --> 00:32:37,440
looking at within this pcapp itself so

908
00:32:37,440 --> 00:32:38,720
that's one of the favor my favorite ones

909
00:32:38,720 --> 00:32:40,080
that i go to initially in the beginning

910
00:32:40,080 --> 00:32:43,519
of my analysis portion of a pcap so now

911
00:32:43,519 --> 00:32:46,399
that we have that let's take a look at

912
00:32:46,399 --> 00:32:49,120
for me let's take a look at the http

913
00:32:49,120 --> 00:32:50,960
traffic because i like to see clear text

914
00:32:50,960 --> 00:32:52,960
traffic because that's the most exciting

915
00:32:52,960 --> 00:32:55,919
stuff for me right so i'm going to do a

916
00:32:55,919 --> 00:32:59,760
quick dive into the hdp info portion

917
00:32:59,760 --> 00:33:01,679
and all this does will give you

918
00:33:01,679 --> 00:33:04,159
sort of metadata aggregation

919
00:33:04,159 --> 00:33:08,000
highlights of various http methods

920
00:33:08,000 --> 00:33:11,039
response codes all sorts of fun stuff um

921
00:33:11,039 --> 00:33:13,360
and when you go down to this bottom

922
00:33:13,360 --> 00:33:16,080
portion it'll give you the requests by

923
00:33:16,080 --> 00:33:18,080
host so it'll give you the it pulls out

924
00:33:18,080 --> 00:33:20,480
the host header and it'll tell you maybe

925
00:33:20,480 --> 00:33:23,440
what uris were attached to that host and

926
00:33:23,440 --> 00:33:26,640
so from here we see antivirus

927
00:33:26,640 --> 00:33:29,440
up that y.com which is a little

928
00:33:29,440 --> 00:33:31,360
suspicious right because

929
00:33:31,360 --> 00:33:33,679
if it's anti-virus update

930
00:33:33,679 --> 00:33:35,440
seems to be a typo there could be some

931
00:33:35,440 --> 00:33:38,159
sort of typo squatting domain right we

932
00:33:38,159 --> 00:33:39,760
also see a

933
00:33:39,760 --> 00:33:42,000
naked ip address as one of the host

934
00:33:42,000 --> 00:33:45,679
headers in the web traffic which

935
00:33:45,679 --> 00:33:47,600
more often than not we're gonna see web

936
00:33:47,600 --> 00:33:50,320
traffic uh sort of you know dns happens

937
00:33:50,320 --> 00:33:52,080
we resolve a host name to find an ip

938
00:33:52,080 --> 00:33:55,120
address we don't just really see raw

939
00:33:55,120 --> 00:33:57,039
ip addresses

940
00:33:57,039 --> 00:33:59,039
you know in the host header itself in

941
00:33:59,039 --> 00:34:01,519
web traffic so if i see that then i know

942
00:34:01,519 --> 00:34:03,360
this might be some sort of hard-coded

943
00:34:03,360 --> 00:34:05,279
value maybe in a piece of malware for

944
00:34:05,279 --> 00:34:07,679
instance so this is something we can

945
00:34:07,679 --> 00:34:10,159
look at and highlight here and also i

946
00:34:10,159 --> 00:34:13,040
see down here what looks like

947
00:34:13,040 --> 00:34:14,320
victory punk

948
00:34:14,320 --> 00:34:15,918
hyphen dc

949
00:34:15,918 --> 00:34:17,599
so it looks like maybe

950
00:34:17,599 --> 00:34:19,839
a host name maybe a domain controller

951
00:34:19,839 --> 00:34:22,960
for instance i also see desktop in here

952
00:34:22,960 --> 00:34:25,119
as well and so this is beaconing out

953
00:34:25,119 --> 00:34:28,000
over 443 to another

954
00:34:28,000 --> 00:34:30,480
raw ip address rather than an actual

955
00:34:30,480 --> 00:34:32,839
hostname like

956
00:34:32,839 --> 00:34:34,960
antivirusupdate.com so

957
00:34:34,960 --> 00:34:37,679
within a few minutes of analyzing the

958
00:34:37,679 --> 00:34:40,399
output of packet sifter i was able to

959
00:34:40,399 --> 00:34:41,918
extract

960
00:34:41,918 --> 00:34:44,159
various indicators of compromise like

961
00:34:44,159 --> 00:34:46,639
this ip address here this ip address

962
00:34:46,639 --> 00:34:47,440
here

963
00:34:47,440 --> 00:34:50,159
and potentially a typo squad domain here

964
00:34:50,159 --> 00:34:51,918
so all sorts of things that we can you

965
00:34:51,918 --> 00:34:54,480
know analyze write down take notes

966
00:34:54,480 --> 00:34:57,280
document and look at later so very

967
00:34:57,280 --> 00:34:59,040
quickly we're able to discern that there

968
00:34:59,040 --> 00:35:01,359
is potentially something malicious going

969
00:35:01,359 --> 00:35:02,400
on because

970
00:35:02,400 --> 00:35:04,800
i would ideally not see my host name

971
00:35:04,800 --> 00:35:08,000
beaconing out to a sort of random ip

972
00:35:08,000 --> 00:35:09,359
address if you will so that's

973
00:35:09,359 --> 00:35:12,240
interesting and there's another case of

974
00:35:12,240 --> 00:35:14,240
that here so

975
00:35:14,240 --> 00:35:15,599
very cool stuff that we're able to

976
00:35:15,599 --> 00:35:17,280
extract from this

977
00:35:17,280 --> 00:35:20,079
output file of package sifter

978
00:35:20,079 --> 00:35:21,200
so

979
00:35:21,200 --> 00:35:22,320
in the sake of time we're not going to

980
00:35:22,320 --> 00:35:24,000
dive into every single one of these but

981
00:35:24,000 --> 00:35:26,480
the the idea is that packet sifter gives

982
00:35:26,480 --> 00:35:29,119
you a bunch of information spits it out

983
00:35:29,119 --> 00:35:30,880
in a bunch of different files and just

984
00:35:30,880 --> 00:35:33,599
lets you at your leisure at whatever

985
00:35:33,599 --> 00:35:36,240
cadence and and sort of methodology you

986
00:35:36,240 --> 00:35:38,880
want to use to extract information from

987
00:35:38,880 --> 00:35:40,079
this pcap

988
00:35:40,079 --> 00:35:40,880
so

989
00:35:40,880 --> 00:35:43,359
i'm going to highlight the integration

990
00:35:43,359 --> 00:35:47,040
output that we use the abuse ipdb and

991
00:35:47,040 --> 00:35:49,280
the virustotal integration output so

992
00:35:49,280 --> 00:35:53,000
real quickly let's look at the

993
00:35:53,000 --> 00:35:54,839
iplookup

994
00:35:54,839 --> 00:35:57,200
results.txt files this is the output

995
00:35:57,200 --> 00:36:00,079
from the abuse ipdb integration and so

996
00:36:00,079 --> 00:36:01,680
what it does is it'll look up the ip

997
00:36:01,680 --> 00:36:03,920
address show you the domain associated

998
00:36:03,920 --> 00:36:06,160
with it print out the abuse confidence

999
00:36:06,160 --> 00:36:08,240
score it'll also print out the country

1000
00:36:08,240 --> 00:36:10,480
code and the country name so

1001
00:36:10,480 --> 00:36:12,640
i can look through here and see if does

1002
00:36:12,640 --> 00:36:15,200
anything look familiar or does anything

1003
00:36:15,200 --> 00:36:17,359
look like i shouldn't be talking to it

1004
00:36:17,359 --> 00:36:19,119
right if i'm a us organization like i

1005
00:36:19,119 --> 00:36:20,880
mentioned previously and i see the

1006
00:36:20,880 --> 00:36:23,599
country code ru in my pcap maybe i

1007
00:36:23,599 --> 00:36:25,440
should extract that ip address write

1008
00:36:25,440 --> 00:36:29,440
that down and do further analysis on it

1009
00:36:29,440 --> 00:36:31,359
one little caveat to this is this is a

1010
00:36:31,359 --> 00:36:33,920
crowd-sourced abuse confidence score

1011
00:36:33,920 --> 00:36:36,560
meaning anybody and everybody can report

1012
00:36:36,560 --> 00:36:38,640
anything they want so just be careful

1013
00:36:38,640 --> 00:36:41,119
when you're using this if i see uh you

1014
00:36:41,119 --> 00:36:42,160
know

1015
00:36:42,160 --> 00:36:43,760
a 100

1016
00:36:43,760 --> 00:36:45,920
score for something like a microsoft

1017
00:36:45,920 --> 00:36:46,800
update

1018
00:36:46,800 --> 00:36:49,520
ip address which i've seen before

1019
00:36:49,520 --> 00:36:51,359
then you might you know think hey this

1020
00:36:51,359 --> 00:36:52,560
might not be that malicious maybe

1021
00:36:52,560 --> 00:36:54,480
somebody just got it wrong so just be

1022
00:36:54,480 --> 00:36:55,520
careful

1023
00:36:55,520 --> 00:36:57,520
again yeah i mentioned microsoft.com

1024
00:36:57,520 --> 00:37:00,560
here i've seen this these ip addresses

1025
00:37:00,560 --> 00:37:02,400
referenced many times in high abuse

1026
00:37:02,400 --> 00:37:04,079
scores just because people don't really

1027
00:37:04,079 --> 00:37:06,320
understand why endpoints are beating out

1028
00:37:06,320 --> 00:37:09,280
to microsoft.com but it could just be

1029
00:37:09,280 --> 00:37:10,640
again just because they want to just

1030
00:37:10,640 --> 00:37:13,440
update and it's normal microsoft traffic

1031
00:37:13,440 --> 00:37:15,200
right so

1032
00:37:15,200 --> 00:37:16,720
with that

1033
00:37:16,720 --> 00:37:18,960
i know in this pcapp uh if i want to

1034
00:37:18,960 --> 00:37:21,440
look at really quickly just see do i

1035
00:37:21,440 --> 00:37:24,400
have any high abuse confidence scores

1036
00:37:24,400 --> 00:37:27,280
what i can do is do a grep against that

1037
00:37:27,280 --> 00:37:30,960
file the iplookup results file and see

1038
00:37:30,960 --> 00:37:34,000
all the results back really quickly and

1039
00:37:34,000 --> 00:37:35,920
so i can get a quick look does anybody

1040
00:37:35,920 --> 00:37:38,640
have a maybe higher than 50 abuse

1041
00:37:38,640 --> 00:37:40,800
confidence score within that file

1042
00:37:40,800 --> 00:37:44,160
and i see a 16 i see a five but i don't

1043
00:37:44,160 --> 00:37:46,400
see anything too high so i didn't really

1044
00:37:46,400 --> 00:37:47,200
get

1045
00:37:47,200 --> 00:37:48,560
for me in my opinion i don't see

1046
00:37:48,560 --> 00:37:50,320
anything that's a quick win for me to

1047
00:37:50,320 --> 00:37:52,079
look at and investigate so i'm just

1048
00:37:52,079 --> 00:37:55,119
going to move on and let's look at the

1049
00:37:55,119 --> 00:37:58,720
http vt results

1050
00:37:58,720 --> 00:38:01,200
this is the output from the

1051
00:38:01,200 --> 00:38:03,200
virustotal integration

1052
00:38:03,200 --> 00:38:04,560
so

1053
00:38:04,560 --> 00:38:06,720
real quickly just a brief overview of

1054
00:38:06,720 --> 00:38:09,280
what the output looks like this message

1055
00:38:09,280 --> 00:38:12,400
file and it's the hash not found means

1056
00:38:12,400 --> 00:38:14,960
that the file is not found in virustotal

1057
00:38:14,960 --> 00:38:16,839
that means this file can either

1058
00:38:16,839 --> 00:38:19,359
be custom malware designed for your

1059
00:38:19,359 --> 00:38:20,960
organization itself which is pretty

1060
00:38:20,960 --> 00:38:23,359
scary or it can just be a simple file

1061
00:38:23,359 --> 00:38:25,200
that happens to not exist in

1062
00:38:25,200 --> 00:38:28,640
virustotal's database right so uh

1063
00:38:28,640 --> 00:38:30,560
doesn't mean good or bad it sort of

1064
00:38:30,560 --> 00:38:33,440
requires further analysis but

1065
00:38:33,440 --> 00:38:36,000
let me find one here so one file that

1066
00:38:36,000 --> 00:38:38,960
was found that it was undetected meaning

1067
00:38:38,960 --> 00:38:40,560
virustotal believes that it's not

1068
00:38:40,560 --> 00:38:41,680
malicious

1069
00:38:41,680 --> 00:38:43,839
is uh this hash here

1070
00:38:43,839 --> 00:38:44,560
so

1071
00:38:44,560 --> 00:38:46,480
this is what the output looks like if

1072
00:38:46,480 --> 00:38:48,079
you're going to find a file that does

1073
00:38:48,079 --> 00:38:50,560
exist in virustotal so in the sake of

1074
00:38:50,560 --> 00:38:52,640
time what i like to do is i just grep

1075
00:38:52,640 --> 00:38:54,480
for the word malicious

1076
00:38:54,480 --> 00:38:55,920
similar to what i did with the abuse

1077
00:38:55,920 --> 00:38:57,839
ipdb

1078
00:38:57,839 --> 00:38:59,680
output i will just grab for the word

1079
00:38:59,680 --> 00:39:01,839
malicious against that file

1080
00:39:01,839 --> 00:39:02,880
and see

1081
00:39:02,880 --> 00:39:05,520
did any file come back malicious and so

1082
00:39:05,520 --> 00:39:07,760
i see oh there was this file here had a

1083
00:39:07,760 --> 00:39:11,280
score of 47 as malicious so now what i

1084
00:39:11,280 --> 00:39:14,320
can do is just grab this

1085
00:39:14,320 --> 00:39:17,520
i know i have a score of 47 against this

1086
00:39:17,520 --> 00:39:18,560
and so

1087
00:39:18,560 --> 00:39:19,839
let me

1088
00:39:19,839 --> 00:39:22,160
grep for that against this file so i'm

1089
00:39:22,160 --> 00:39:25,280
going to grep for malicious against http

1090
00:39:25,280 --> 00:39:26,599
vt

1091
00:39:26,599 --> 00:39:28,640
results and

1092
00:39:28,640 --> 00:39:31,520
i'm going to give it the tax capital c

1093
00:39:31,520 --> 00:39:32,880
and three

1094
00:39:32,880 --> 00:39:34,800
as an argument so what this does is

1095
00:39:34,800 --> 00:39:37,040
it'll print three lines before my grep

1096
00:39:37,040 --> 00:39:39,359
match and three lines after my gret

1097
00:39:39,359 --> 00:39:40,400
match

1098
00:39:40,400 --> 00:39:43,839
and so this will isolate the md5 in

1099
00:39:43,839 --> 00:39:47,119
question that was malicious potentially

1100
00:39:47,119 --> 00:39:49,040
so i can grab this

1101
00:39:49,040 --> 00:39:49,920
and

1102
00:39:49,920 --> 00:39:52,079
continuing on with grepping i can grep

1103
00:39:52,079 --> 00:39:53,760
against the

1104
00:39:53,760 --> 00:39:57,680
http hashto object.txt file which is

1105
00:39:57,680 --> 00:40:00,000
another output from that integration and

1106
00:40:00,000 --> 00:40:03,040
all this text file has is the

1107
00:40:03,040 --> 00:40:06,000
md5 hash and the coinciding

1108
00:40:06,000 --> 00:40:07,760
name of the file that was found in the

1109
00:40:07,760 --> 00:40:10,319
pcap and that is what this looks like so

1110
00:40:10,319 --> 00:40:13,200
if i grep for this hash against this

1111
00:40:13,200 --> 00:40:14,240
http

1112
00:40:14,240 --> 00:40:16,880
object.txt file i find that the

1113
00:40:16,880 --> 00:40:19,440
redbutton.png

1114
00:40:19,440 --> 00:40:22,000
associated with this md5

1115
00:40:22,000 --> 00:40:23,359
so

1116
00:40:23,359 --> 00:40:25,119
i can take this

1117
00:40:25,119 --> 00:40:27,280
and like any good analyst would do go

1118
00:40:27,280 --> 00:40:28,960
into virus total

1119
00:40:28,960 --> 00:40:30,400
let's plug this

1120
00:40:30,400 --> 00:40:31,760
hash in there

1121
00:40:31,760 --> 00:40:32,640
and

1122
00:40:32,640 --> 00:40:35,040
all of a sudden i have the actual output

1123
00:40:35,040 --> 00:40:36,400
and so i can

1124
00:40:36,400 --> 00:40:39,119
do normal sock analyst work look through

1125
00:40:39,119 --> 00:40:41,280
this look at the community section of

1126
00:40:41,280 --> 00:40:43,040
virustotal see if i can find anything

1127
00:40:43,040 --> 00:40:44,960
interesting but i'm saying it looks like

1128
00:40:44,960 --> 00:40:46,319
trickbot

1129
00:40:46,319 --> 00:40:48,000
is the uh

1130
00:40:48,000 --> 00:40:51,520
malware that's listed here so

1131
00:40:51,520 --> 00:40:53,760
very easily very quickly i was able to

1132
00:40:53,760 --> 00:40:55,079
find that this

1133
00:40:55,079 --> 00:40:56,640
redbutton.png

1134
00:40:56,640 --> 00:40:57,520
is

1135
00:40:57,520 --> 00:41:02,000
a trickbot executable so

1136
00:41:02,000 --> 00:41:03,599
one thing to highlight right is that

1137
00:41:03,599 --> 00:41:06,920
this red button isn't redbutton.ei it's

1138
00:41:06,920 --> 00:41:10,240
redbutton.png so it's trying to hide

1139
00:41:10,240 --> 00:41:13,520
itself to appear to be a picture file

1140
00:41:13,520 --> 00:41:15,520
and so if i'm an analyst and i'm looking

1141
00:41:15,520 --> 00:41:18,000
through pcapp data i might not have

1142
00:41:18,000 --> 00:41:20,359
looked twice at that if i just see

1143
00:41:20,359 --> 00:41:22,960
redbutton.png from a get request you

1144
00:41:22,960 --> 00:41:24,560
know okay whatever it's downloading

1145
00:41:24,560 --> 00:41:26,160
images that's

1146
00:41:26,160 --> 00:41:28,400
normal web traffic for a client but

1147
00:41:28,400 --> 00:41:30,800
because i use packetcitre to do this i

1148
00:41:30,800 --> 00:41:32,880
was able to get the hash automatically

1149
00:41:32,880 --> 00:41:34,880
done for me that look up automatically

1150
00:41:34,880 --> 00:41:37,280
done for me and i'm able to isolate that

1151
00:41:37,280 --> 00:41:40,960
hey redbutton.png is in fact not a png

1152
00:41:40,960 --> 00:41:43,520
it is a binary of some sort that it

1153
00:41:43,520 --> 00:41:46,839
looks to be associated with trickbot

1154
00:41:46,839 --> 00:41:48,560
so

1155
00:41:48,560 --> 00:41:50,880
there's more to this there's

1156
00:41:50,880 --> 00:41:52,560
several different rabbit holes we can go

1157
00:41:52,560 --> 00:41:53,359
down

1158
00:41:53,359 --> 00:41:54,720
uh we don't really have the time for

1159
00:41:54,720 --> 00:41:56,640
that unfortunately

1160
00:41:56,640 --> 00:41:59,280
and so that is how to use package sifter

1161
00:41:59,280 --> 00:42:02,720
and t-sharp to enhance your pcap

1162
00:42:02,720 --> 00:42:04,319
analysis

1163
00:42:04,319 --> 00:42:06,400
i'm a huge fan of t-shark if you have

1164
00:42:06,400 --> 00:42:08,640
any questions about t-sharp or package

1165
00:42:08,640 --> 00:42:10,640
center for that matter any suggestions

1166
00:42:10,640 --> 00:42:12,720
uh please feel free to reach out to me

1167
00:42:12,720 --> 00:42:15,200
i'll also be on the discord

1168
00:42:15,200 --> 00:42:16,720
kind of while this is streaming so that

1169
00:42:16,720 --> 00:42:18,079
i can answer any questions that might

1170
00:42:18,079 --> 00:42:19,599
pop up but if you think anything

1171
00:42:19,599 --> 00:42:21,119
anything after

1172
00:42:21,119 --> 00:42:22,720
please feel free to reach out i love

1173
00:42:22,720 --> 00:42:25,440
talking about this stuff and

1174
00:42:25,440 --> 00:42:26,880
that is it for me

1175
00:42:26,880 --> 00:42:28,400
cactus con

1176
00:42:28,400 --> 00:42:29,839
thank you for having me i really

1177
00:42:29,839 --> 00:42:31,760
appreciate the opportunity and i am

1178
00:42:31,760 --> 00:42:33,520
looking forward to next year where i

1179
00:42:33,520 --> 00:42:35,839
will ideally be there in person so i can

1180
00:42:35,839 --> 00:42:38,000
enjoy the face-to-face component of this

1181
00:42:38,000 --> 00:42:41,280
so again thank you for having me and uh

1182
00:42:41,280 --> 00:42:43,680
my name is ross bert and

1183
00:42:43,680 --> 00:42:47,160
have a good day

1184
00:43:02,960 --> 00:43:05,040
you

