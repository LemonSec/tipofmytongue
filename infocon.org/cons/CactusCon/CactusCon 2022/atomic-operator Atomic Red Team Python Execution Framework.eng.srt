1
00:00:00,640 --> 00:00:03,679
hello everyone my name is josh rickard

2
00:00:03,679 --> 00:00:05,200
and today we're going to talk about

3
00:00:05,200 --> 00:00:07,200
atomic operator

4
00:00:07,200 --> 00:00:09,040
atomic operator is an open source

5
00:00:09,040 --> 00:00:10,880
project that i released

6
00:00:10,880 --> 00:00:14,080
that is a python execution framework for

7
00:00:14,080 --> 00:00:16,560
the atomic red team project by red

8
00:00:16,560 --> 00:00:18,560
canary

9
00:00:18,560 --> 00:00:21,119
um today we're going to talk about you

10
00:00:21,119 --> 00:00:23,279
know what atomic routine or a little bit

11
00:00:23,279 --> 00:00:26,080
about myself first and then uh we'll go

12
00:00:26,080 --> 00:00:28,560
into you know what what

13
00:00:28,560 --> 00:00:30,560
the atomic red team project is and what

14
00:00:30,560 --> 00:00:31,599
it's for

15
00:00:31,599 --> 00:00:33,920
and then we'll go into uh atomic

16
00:00:33,920 --> 00:00:36,559
operator as well as the features and

17
00:00:36,559 --> 00:00:39,840
functionality um and a little bit of why

18
00:00:39,840 --> 00:00:42,719
uh why you would use atomic operator

19
00:00:42,719 --> 00:00:45,360
and then we'll go into more of a demo

20
00:00:45,360 --> 00:00:47,920
um i would say overall

21
00:00:47,920 --> 00:00:49,520
half the presentation is going to be

22
00:00:49,520 --> 00:00:51,920
slides and then the other half is going

23
00:00:51,920 --> 00:00:55,680
to be a demo so um in about 20 30

24
00:00:55,680 --> 00:00:57,360
minutes you you'll get to the actual

25
00:00:57,360 --> 00:01:01,120
demo so let's get started

26
00:01:02,480 --> 00:01:05,600
again my name is josh rickard i am i

27
00:01:05,600 --> 00:01:08,880
kind of have a weird background i um

28
00:01:08,880 --> 00:01:11,360
i i think at least uh you know i started

29
00:01:11,360 --> 00:01:14,560
a help desk um i actually

30
00:01:14,560 --> 00:01:16,799
did that about six months maybe

31
00:01:16,799 --> 00:01:18,799
um and then kind of moved into a system

32
00:01:18,799 --> 00:01:21,520
support role um where i supported a lot

33
00:01:21,520 --> 00:01:22,960
of group policy

34
00:01:22,960 --> 00:01:23,920
um

35
00:01:23,920 --> 00:01:27,119
deployment of a large amounts of

36
00:01:27,119 --> 00:01:28,479
operating systems

37
00:01:28,479 --> 00:01:30,320
let's say you know thousands of

38
00:01:30,320 --> 00:01:31,520
computers

39
00:01:31,520 --> 00:01:35,600
using mdt secm things like that and then

40
00:01:35,600 --> 00:01:37,840
um really kind of moved into a system

41
00:01:37,840 --> 00:01:39,439
administration role

42
00:01:39,439 --> 00:01:41,840
after doing that for a little bit um i

43
00:01:41,840 --> 00:01:44,560
actually was recruited to go and

44
00:01:44,560 --> 00:01:46,240
work on the security team because i had

45
00:01:46,240 --> 00:01:48,560
a pretty key knowledge of windows

46
00:01:48,560 --> 00:01:50,240
internals and how it worked

47
00:01:50,240 --> 00:01:52,399
so i worked on the security team and

48
00:01:52,399 --> 00:01:55,840
focused mostly on digital forensics some

49
00:01:55,840 --> 00:02:00,159
ir but mostly on the df um side

50
00:02:00,159 --> 00:02:01,840
at that point you know i wanted to

51
00:02:01,840 --> 00:02:05,040
automate everything um i actually worked

52
00:02:05,040 --> 00:02:07,119
at a higher education

53
00:02:07,119 --> 00:02:08,959
place where there wasn't a lot of money

54
00:02:08,959 --> 00:02:10,479
a lot of budget at that time and

55
00:02:10,479 --> 00:02:13,440
security was kind of a um

56
00:02:13,440 --> 00:02:15,360
wasn't a shiny thing

57
00:02:15,360 --> 00:02:17,760
and uh you know try to automate around

58
00:02:17,760 --> 00:02:20,000
fishing uh fishing response

59
00:02:20,000 --> 00:02:22,080
vulnerability management and anything

60
00:02:22,080 --> 00:02:24,319
else that we could because we had to

61
00:02:24,319 --> 00:02:25,599
build it

62
00:02:25,599 --> 00:02:28,480
and i also started to release a lot of

63
00:02:28,480 --> 00:02:31,040
uh open source tools at that time um i

64
00:02:31,040 --> 00:02:33,360
actually released an outlook reporter

65
00:02:33,360 --> 00:02:36,360
button or whatever um for i think it was

66
00:02:36,360 --> 00:02:38,640
2015 or 14

67
00:02:38,640 --> 00:02:40,000
and um

68
00:02:40,000 --> 00:02:42,480
released that online and then got uh my

69
00:02:42,480 --> 00:02:45,200
last job which was at fish me slash

70
00:02:45,200 --> 00:02:47,760
coffins and i did that for um three

71
00:02:47,760 --> 00:02:50,800
years took their reporter button from i

72
00:02:50,800 --> 00:02:53,840
think 1 million to 18 million installs

73
00:02:53,840 --> 00:02:58,159
in three years uh my team um and myself

74
00:02:58,159 --> 00:02:59,280
and uh

75
00:02:59,280 --> 00:03:00,720
you know i was getting into management

76
00:03:00,720 --> 00:03:02,080
and all that and

77
00:03:02,080 --> 00:03:04,239
uh decided to kind of make that switch

78
00:03:04,239 --> 00:03:06,720
and moved into my current role

79
00:03:06,720 --> 00:03:09,599
um which is a uh was a security research

80
00:03:09,599 --> 00:03:11,440
engineer and now i'm a security

81
00:03:11,440 --> 00:03:15,440
solutions uh architect uh at swimlin

82
00:03:15,440 --> 00:03:16,239
so

83
00:03:16,239 --> 00:03:18,800
you can find me on twitter at ms

84
00:03:18,800 --> 00:03:20,239
administrator

85
00:03:20,239 --> 00:03:23,760
um i also ms stands for microsoft

86
00:03:23,760 --> 00:03:27,760
administrator uh and then github.com

87
00:03:27,760 --> 00:03:29,920
ms administrator as well and you can

88
00:03:29,920 --> 00:03:33,280
find me on my blog at let's automate dot

89
00:03:33,280 --> 00:03:34,000
it

90
00:03:34,000 --> 00:03:36,799
um you'll also notice this uh unicorn

91
00:03:36,799 --> 00:03:39,440
headpiece here that's actually me

92
00:03:39,440 --> 00:03:41,200
um i

93
00:03:41,200 --> 00:03:43,360
i just love that thing but you'll see

94
00:03:43,360 --> 00:03:45,120
also that my video just

95
00:03:45,120 --> 00:03:47,280
disappeared all actually that will

96
00:03:47,280 --> 00:03:48,560
happen occasionally throughout the

97
00:03:48,560 --> 00:03:50,480
presentation uh don't be worried i'm

98
00:03:50,480 --> 00:03:52,959
still here

99
00:03:53,200 --> 00:03:56,560
all right now let's get into it

100
00:03:56,560 --> 00:04:00,080
over time you know as we've evolved in

101
00:04:00,080 --> 00:04:03,760
security we've kind of needed a way to

102
00:04:03,760 --> 00:04:06,799
manage risk or or manage the way that an

103
00:04:06,799 --> 00:04:08,720
attacker thinks from a defensive

104
00:04:08,720 --> 00:04:12,000
perspective um we have tried to do this

105
00:04:12,000 --> 00:04:14,640
i think the first you know um

106
00:04:14,640 --> 00:04:16,478
instance of this we're probably all

107
00:04:16,478 --> 00:04:19,600
aware of is the uh attack kill chain

108
00:04:19,600 --> 00:04:22,320
um which you know was a really really

109
00:04:22,320 --> 00:04:24,800
good attempt at a time um it kind of

110
00:04:24,800 --> 00:04:29,040
laid and paid path um for what we all

111
00:04:29,040 --> 00:04:31,919
know as the big standard now is mitre

112
00:04:31,919 --> 00:04:32,960
attack

113
00:04:32,960 --> 00:04:34,479
a miter attack

114
00:04:34,479 --> 00:04:37,199
is a framework

115
00:04:37,199 --> 00:04:38,880
from a miter

116
00:04:38,880 --> 00:04:41,360
that for enterprise and they have other

117
00:04:41,360 --> 00:04:43,040
different frameworks they have one for

118
00:04:43,040 --> 00:04:47,919
ics um and they have uh pre-attack they

119
00:04:47,919 --> 00:04:49,520
which i think is getting merged in or

120
00:04:49,520 --> 00:04:51,120
did get merged in

121
00:04:51,120 --> 00:04:52,560
mobile and

122
00:04:52,560 --> 00:04:54,160
there's others i think

123
00:04:54,160 --> 00:04:55,040
um

124
00:04:55,040 --> 00:04:57,759
but what we need to understand is that

125
00:04:57,759 --> 00:05:01,280
mitre attack is is strictly um

126
00:05:01,280 --> 00:05:05,759
data around uh adversarial um so actors

127
00:05:05,759 --> 00:05:08,240
malicious actors uh their tactics

128
00:05:08,240 --> 00:05:10,720
techniques and also just general common

129
00:05:10,720 --> 00:05:12,160
knowledge

130
00:05:12,160 --> 00:05:15,199
but it is a framework um it is uh

131
00:05:15,199 --> 00:05:17,120
something that we that we need to

132
00:05:17,120 --> 00:05:20,800
understand that it is a framework

133
00:05:20,800 --> 00:05:23,440
so here is a typical example

134
00:05:23,440 --> 00:05:25,120
that you'll see for a lot of miter

135
00:05:25,120 --> 00:05:26,160
attack

136
00:05:26,160 --> 00:05:28,080
this is their their dashboard on their

137
00:05:28,080 --> 00:05:31,520
site um it is really kind of laid out in

138
00:05:31,520 --> 00:05:32,960
a very

139
00:05:32,960 --> 00:05:35,919
great way to kind of digest from

140
00:05:35,919 --> 00:05:39,360
beginner to to advanced um you have a

141
00:05:39,360 --> 00:05:41,280
list of um

142
00:05:41,280 --> 00:05:43,600
what we call these these columns or what

143
00:05:43,600 --> 00:05:45,280
we call tactics

144
00:05:45,280 --> 00:05:48,880
and so the tactics are the individual um

145
00:05:48,880 --> 00:05:51,120
let's let's call them phases that an

146
00:05:51,120 --> 00:05:53,440
attacker could go through not that they

147
00:05:53,440 --> 00:05:56,000
will that they could go through

148
00:05:56,000 --> 00:05:57,199
and so

149
00:05:57,199 --> 00:05:58,560
not all of these

150
00:05:58,560 --> 00:06:00,319
we may not even know because we don't

151
00:06:00,319 --> 00:06:02,880
have visibility or whatever it is but we

152
00:06:02,880 --> 00:06:05,440
understand that an attacker performs

153
00:06:05,440 --> 00:06:08,639
this kind of chain of actions um and

154
00:06:08,639 --> 00:06:11,919
it's not uh that they have to go one to

155
00:06:11,919 --> 00:06:14,240
the other uh they could jump they maybe

156
00:06:14,240 --> 00:06:16,960
we start off at execution or initial

157
00:06:16,960 --> 00:06:18,720
access maybe we don't know anything

158
00:06:18,720 --> 00:06:20,479
about the reconnaissance or whatever it

159
00:06:20,479 --> 00:06:21,919
is

160
00:06:21,919 --> 00:06:23,600
so

161
00:06:23,600 --> 00:06:25,120
with that we have those individual

162
00:06:25,120 --> 00:06:28,880
tactics and underneath each tactic

163
00:06:28,880 --> 00:06:31,520
is a list of techniques or sub

164
00:06:31,520 --> 00:06:32,880
techniques

165
00:06:32,880 --> 00:06:34,960
and those techniques

166
00:06:34,960 --> 00:06:35,840
are

167
00:06:35,840 --> 00:06:39,120
how an attacker could

168
00:06:39,120 --> 00:06:41,600
accomplish that tactic

169
00:06:41,600 --> 00:06:42,319
so

170
00:06:42,319 --> 00:06:43,280
uh

171
00:06:43,280 --> 00:06:46,080
for example resource development is the

172
00:06:46,080 --> 00:06:47,360
tactic

173
00:06:47,360 --> 00:06:49,199
some of the ways that they could

174
00:06:49,199 --> 00:06:51,599
accomplish that is by

175
00:06:51,599 --> 00:06:53,759
establishing accounts in your

176
00:06:53,759 --> 00:06:54,880
environment

177
00:06:54,880 --> 00:06:56,960
or compromising accounts

178
00:06:56,960 --> 00:06:59,759
before they they get that initial access

179
00:06:59,759 --> 00:07:02,720
maybe they found lake craig's online um

180
00:07:02,720 --> 00:07:04,400
whatever you know that they're they're

181
00:07:04,400 --> 00:07:06,400
building those those resources or they

182
00:07:06,400 --> 00:07:08,639
just acquire infrastructure right uh

183
00:07:08,639 --> 00:07:10,639
staging for their c2

184
00:07:10,639 --> 00:07:12,960
maybe staging further malicious code

185
00:07:12,960 --> 00:07:15,759
binaries whatever but they're doing that

186
00:07:15,759 --> 00:07:18,800
resource development at that point

187
00:07:18,800 --> 00:07:19,599
so

188
00:07:19,599 --> 00:07:21,280
you have to understand that not all of

189
00:07:21,280 --> 00:07:23,360
them again are going to be

190
00:07:23,360 --> 00:07:25,759
something that we know or we can know

191
00:07:25,759 --> 00:07:27,280
but um

192
00:07:27,280 --> 00:07:29,759
each one of these one or more techniques

193
00:07:29,759 --> 00:07:34,240
or sub-techniques or how an actor could

194
00:07:34,240 --> 00:07:37,120
perform or acquire their goal or that

195
00:07:37,120 --> 00:07:38,400
phase

196
00:07:38,400 --> 00:07:40,080
or that tactic

197
00:07:40,080 --> 00:07:42,960
i hope that makes sense

198
00:07:43,680 --> 00:07:46,720
but as i mentioned we have to really

199
00:07:46,720 --> 00:07:49,759
understand that mitre attack in general

200
00:07:49,759 --> 00:07:52,000
is just a blueprint

201
00:07:52,000 --> 00:07:55,599
it is not a prescribed you must do it

202
00:07:55,599 --> 00:07:57,919
this way you must use all of our

203
00:07:57,919 --> 00:08:01,280
functions and all of our data to

204
00:08:01,280 --> 00:08:03,680
understand your risk or understand how

205
00:08:03,680 --> 00:08:06,479
an attacker may attack your organization

206
00:08:06,479 --> 00:08:08,319
that is not true

207
00:08:08,319 --> 00:08:11,280
it is a literal blueprint and a

208
00:08:11,280 --> 00:08:12,560
framework

209
00:08:12,560 --> 00:08:14,160
has the kind of

210
00:08:14,160 --> 00:08:16,639
name that is what framework means is it

211
00:08:16,639 --> 00:08:19,520
is a blueprint it is a as a guiding

212
00:08:19,520 --> 00:08:22,080
principle that that you can use

213
00:08:22,080 --> 00:08:23,280
uh to

214
00:08:23,280 --> 00:08:25,199
in your environment but

215
00:08:25,199 --> 00:08:27,919
you will alter it and you will make you

216
00:08:27,919 --> 00:08:30,479
will modify it to your needs

217
00:08:30,479 --> 00:08:32,240
certain techniques

218
00:08:32,240 --> 00:08:34,320
uh even tactics

219
00:08:34,320 --> 00:08:37,200
do are are not applicable maybe to your

220
00:08:37,200 --> 00:08:38,719
organization

221
00:08:38,719 --> 00:08:42,080
right so or to a certain environment uh

222
00:08:42,080 --> 00:08:46,480
or a certain set of um hosts or services

223
00:08:46,480 --> 00:08:47,839
within your

224
00:08:47,839 --> 00:08:49,680
organization right

225
00:08:49,680 --> 00:08:52,720
so you have to kind of mold it in to fit

226
00:08:52,720 --> 00:08:54,720
your needs and that's that's a whole

227
00:08:54,720 --> 00:08:56,480
other topic

228
00:08:56,480 --> 00:08:57,920
on how to do that

229
00:08:57,920 --> 00:09:00,399
but it is a blueprint and it is a way to

230
00:09:00,399 --> 00:09:02,399
kind of give that guiding light

231
00:09:02,399 --> 00:09:04,720
and and provide a way to

232
00:09:04,720 --> 00:09:07,040
um

233
00:09:07,279 --> 00:09:10,800
build defensive posture against common

234
00:09:10,800 --> 00:09:11,680
again

235
00:09:11,680 --> 00:09:13,839
tactics adversarial tactics techniques

236
00:09:13,839 --> 00:09:17,040
and common knowledge um it is all about

237
00:09:17,040 --> 00:09:19,600
um utilizing data that they've acquired

238
00:09:19,600 --> 00:09:21,440
that they have

239
00:09:21,440 --> 00:09:24,080
researched they have gathered from from

240
00:09:24,080 --> 00:09:24,959
others

241
00:09:24,959 --> 00:09:27,440
and build it out build out this entire

242
00:09:27,440 --> 00:09:30,000
framework that is based on real life

243
00:09:30,000 --> 00:09:32,320
information as that evolves so will the

244
00:09:32,320 --> 00:09:35,040
framework um so

245
00:09:35,040 --> 00:09:36,800
one of the things again we have to

246
00:09:36,800 --> 00:09:39,120
understand that it is not a pr

247
00:09:39,120 --> 00:09:41,279
prescribed um

248
00:09:41,279 --> 00:09:43,360
you must do it this way you cannot get

249
00:09:43,360 --> 00:09:45,279
miter attack certified you know blah

250
00:09:45,279 --> 00:09:47,360
blah blah

251
00:09:47,360 --> 00:09:50,240
you you uh literally

252
00:09:50,240 --> 00:09:51,839
use it and

253
00:09:51,839 --> 00:09:54,000
adjust it to your needs

254
00:09:54,000 --> 00:09:55,519
so

255
00:09:55,519 --> 00:09:58,080
hopefully i beat that with

256
00:09:58,080 --> 00:10:01,920
yeah hopefully i'm off my soapbox

257
00:10:01,920 --> 00:10:02,959
so

258
00:10:02,959 --> 00:10:04,800
some things that we need to understand

259
00:10:04,800 --> 00:10:07,440
here are also the different

260
00:10:07,440 --> 00:10:10,399
components i guess of a miter attack

261
00:10:10,399 --> 00:10:11,760
itself

262
00:10:11,760 --> 00:10:13,680
so miter attack has made up a lot of

263
00:10:13,680 --> 00:10:16,640
different objects or or um

264
00:10:16,640 --> 00:10:17,680
entities

265
00:10:17,680 --> 00:10:20,160
and one of those as we know are going to

266
00:10:20,160 --> 00:10:21,600
be pretty basic it's going to be

267
00:10:21,600 --> 00:10:25,040
techniques these are um

268
00:10:25,040 --> 00:10:28,079
different ways that um someone may

269
00:10:28,079 --> 00:10:31,040
capture evidence or or i'm sorry

270
00:10:31,040 --> 00:10:33,760
may capture credentials right um

271
00:10:33,760 --> 00:10:35,680
you could do it via memory they could do

272
00:10:35,680 --> 00:10:36,880
it via

273
00:10:36,880 --> 00:10:39,120
brute force whatever it is and there's a

274
00:10:39,120 --> 00:10:40,560
lot of different ways a lot of different

275
00:10:40,560 --> 00:10:42,800
techniques to to acquire depending on

276
00:10:42,800 --> 00:10:45,600
that tactic and that phase

277
00:10:45,600 --> 00:10:47,920
also again the tactics which we are

278
00:10:47,920 --> 00:10:50,320
pretty familiar with so we can roll up

279
00:10:50,320 --> 00:10:52,320
and we understand that these techniques

280
00:10:52,320 --> 00:10:55,200
belong to this phase or this tactic or

281
00:10:55,200 --> 00:10:57,600
multiple

282
00:10:57,839 --> 00:11:00,720
mitigations mitre also provides these

283
00:11:00,720 --> 00:11:04,079
sets of mitigations that are linked to

284
00:11:04,079 --> 00:11:05,519
techniques

285
00:11:05,519 --> 00:11:08,480
so we understand that from a technique

286
00:11:08,480 --> 00:11:10,480
perspective

287
00:11:10,480 --> 00:11:12,720
they have provided these mitigations

288
00:11:12,720 --> 00:11:15,279
that we can use usually they're pretty

289
00:11:15,279 --> 00:11:17,920
um high level they don't go into you

290
00:11:17,920 --> 00:11:18,640
know

291
00:11:18,640 --> 00:11:20,399
block this port or

292
00:11:20,399 --> 00:11:22,560
maybe maybe they do but like these event

293
00:11:22,560 --> 00:11:24,959
ids that they're beginning to with the

294
00:11:24,959 --> 00:11:27,600
data components and all data source

295
00:11:27,600 --> 00:11:29,360
features that they're adding

296
00:11:29,360 --> 00:11:31,360
but there's still you know a lot of work

297
00:11:31,360 --> 00:11:32,800
that needs to be done there and a lot of

298
00:11:32,800 --> 00:11:34,079
research

299
00:11:34,079 --> 00:11:36,160
but we have a we have a way to

300
00:11:36,160 --> 00:11:37,760
understand that that

301
00:11:37,760 --> 00:11:40,079
what these tactics we can view all the

302
00:11:40,079 --> 00:11:42,959
mitigations for that phase but again not

303
00:11:42,959 --> 00:11:44,560
all of them are going to be applicable

304
00:11:44,560 --> 00:11:46,480
to to us

305
00:11:46,480 --> 00:11:48,399
we can also see

306
00:11:48,399 --> 00:11:50,720
that relationships uh between the

307
00:11:50,720 --> 00:11:53,040
techniques and the actors

308
00:11:53,040 --> 00:11:56,800
and actors or malicious apt groups or

309
00:11:56,800 --> 00:11:58,240
malicious groups

310
00:11:58,240 --> 00:11:59,120
um

311
00:11:59,120 --> 00:12:01,040
just basically they're

312
00:12:01,040 --> 00:12:02,959
um they're hackers

313
00:12:02,959 --> 00:12:06,240
right and or groups of them and so

314
00:12:06,240 --> 00:12:08,720
they've defined these based on again

315
00:12:08,720 --> 00:12:11,680
research and data and reports and so on

316
00:12:11,680 --> 00:12:14,000
and so forth to gather this information

317
00:12:14,000 --> 00:12:15,920
and so they kind of broke down you know

318
00:12:15,920 --> 00:12:17,600
these actors and understand their

319
00:12:17,600 --> 00:12:20,000
different techniques which then allows

320
00:12:20,000 --> 00:12:22,000
us to understand the different phases

321
00:12:22,000 --> 00:12:25,120
that an attack or an actor could perform

322
00:12:25,120 --> 00:12:27,600
but it also gives us the ability to see

323
00:12:27,600 --> 00:12:29,920
what kind of mitigations we can look at

324
00:12:29,920 --> 00:12:31,839
from an actor perspective

325
00:12:31,839 --> 00:12:34,880
if we're trying to prevent apt-1 or

326
00:12:34,880 --> 00:12:37,440
whatever to to from hitting us we can

327
00:12:37,440 --> 00:12:39,440
look at those mitigations

328
00:12:39,440 --> 00:12:41,440
and understand the different phases that

329
00:12:41,440 --> 00:12:42,720
they have taken

330
00:12:42,720 --> 00:12:45,040
to perform their different techniques

331
00:12:45,040 --> 00:12:46,240
so

332
00:12:46,240 --> 00:12:49,440
we also have these other relationships

333
00:12:49,440 --> 00:12:52,160
our malware and tools so we can look at

334
00:12:52,160 --> 00:12:55,600
it from an actor's perspective where

335
00:12:55,600 --> 00:12:57,920
we have uh known malware that they have

336
00:12:57,920 --> 00:13:00,639
used known tools that they have used and

337
00:13:00,639 --> 00:13:04,160
we can actually relate those now to

338
00:13:04,160 --> 00:13:07,360
different techniques so we can say that

339
00:13:07,360 --> 00:13:10,560
this tool is going to be used in this

340
00:13:10,560 --> 00:13:12,880
tactic or in this phase

341
00:13:12,880 --> 00:13:15,760
and this very specific use case or

342
00:13:15,760 --> 00:13:17,120
technique

343
00:13:17,120 --> 00:13:20,000
by this specific actor and here are some

344
00:13:20,000 --> 00:13:22,160
mitigations for it right so there's a

345
00:13:22,160 --> 00:13:24,560
huge web of interconnectedness within

346
00:13:24,560 --> 00:13:26,160
mitre attack which is uh really

347
00:13:26,160 --> 00:13:29,200
ingenious and really well done um and i

348
00:13:29,200 --> 00:13:30,959
think that they put a lot of thought

349
00:13:30,959 --> 00:13:32,639
into it and a lot of feedback from the

350
00:13:32,639 --> 00:13:34,639
community to kind of build this this

351
00:13:34,639 --> 00:13:36,959
framework to help us secure

352
00:13:36,959 --> 00:13:38,560
our organization our environments and

353
00:13:38,560 --> 00:13:40,000
our in our world

354
00:13:40,000 --> 00:13:43,120
um so kudos to mitre love them uh i love

355
00:13:43,120 --> 00:13:45,519
the framework i think it's awesome

356
00:13:45,519 --> 00:13:46,240
so

357
00:13:46,240 --> 00:13:48,480
this is a little bit of you know how we

358
00:13:48,480 --> 00:13:52,240
can understand miter and miter attack

359
00:13:52,240 --> 00:13:54,720
um but we also have kind of some some

360
00:13:54,720 --> 00:13:56,639
gaps there and this is where we'll get

361
00:13:56,639 --> 00:13:58,639
into a little bit of where atomic red

362
00:13:58,639 --> 00:13:59,839
team is

363
00:13:59,839 --> 00:14:02,560
so let's take for example uh command and

364
00:14:02,560 --> 00:14:04,880
scripting interpreter uh which is the

365
00:14:04,880 --> 00:14:08,000
the technique and powershell is the sub

366
00:14:08,000 --> 00:14:10,880
technique of that on technique

367
00:14:10,880 --> 00:14:13,040
so we can see that

368
00:14:13,040 --> 00:14:16,320
it is t one zero five nine dash or i'm

369
00:14:16,320 --> 00:14:19,120
sorry dot zero zero one uh eight power

370
00:14:19,120 --> 00:14:21,120
show is very familiar but i think to

371
00:14:21,120 --> 00:14:23,279
almost everybody if you have windows in

372
00:14:23,279 --> 00:14:26,000
your environment you're probably using

373
00:14:26,000 --> 00:14:29,440
powershell in some um some fashion

374
00:14:29,440 --> 00:14:31,440
so you can look and they'll show you all

375
00:14:31,440 --> 00:14:33,199
the different what they call procedures

376
00:14:33,199 --> 00:14:36,240
they mean um different events or or um

377
00:14:36,240 --> 00:14:38,160
apt groups that have used powershell and

378
00:14:38,160 --> 00:14:40,639
they know this um they'll actually have

379
00:14:40,639 --> 00:14:42,639
data sources that you can use and

380
00:14:42,639 --> 00:14:44,560
permissions and blah blah blah all this

381
00:14:44,560 --> 00:14:45,920
kind of defined

382
00:14:45,920 --> 00:14:48,880
but for this one single technique

383
00:14:48,880 --> 00:14:52,000
we must understand a lot of information

384
00:14:52,000 --> 00:14:54,320
all right we need to understand for this

385
00:14:54,320 --> 00:14:56,320
single sub technique

386
00:14:56,320 --> 00:14:58,240
adversaries can use powershell to

387
00:14:58,240 --> 00:15:01,279
perform any number of actions oh man any

388
00:15:01,279 --> 00:15:03,199
number of actions

389
00:15:03,199 --> 00:15:05,680
or a number of actions whatever it is

390
00:15:05,680 --> 00:15:06,800
still a lot

391
00:15:06,800 --> 00:15:08,720
um we can understand that they can use

392
00:15:08,720 --> 00:15:10,959
it to execute code

393
00:15:10,959 --> 00:15:12,959
that's pretty self-explanatory we

394
00:15:12,959 --> 00:15:15,600
understand that they can use start

395
00:15:15,600 --> 00:15:17,440
process you have to understand what a

396
00:15:17,440 --> 00:15:19,360
commandlet is

397
00:15:19,360 --> 00:15:21,760
um and they can actually run just an

398
00:15:21,760 --> 00:15:24,320
executable or they can run uh invoke

399
00:15:24,320 --> 00:15:26,000
command

400
00:15:26,000 --> 00:15:27,839
so we have to again understand what

401
00:15:27,839 --> 00:15:29,440
those can do

402
00:15:29,440 --> 00:15:32,079
we also need to understand that

403
00:15:32,079 --> 00:15:33,360
there's a lot of different tools

404
00:15:33,360 --> 00:15:36,240
offensive tools and other tools out

405
00:15:36,240 --> 00:15:38,800
there that are written in powershell

406
00:15:38,800 --> 00:15:41,839
like empire power spoil posh c2 ps

407
00:15:41,839 --> 00:15:44,160
attack so on and so forth

408
00:15:44,160 --> 00:15:47,199
um and they can actually just execute it

409
00:15:47,199 --> 00:15:50,320
straight from powershell.exe the binary

410
00:15:50,320 --> 00:15:51,199
or

411
00:15:51,199 --> 00:15:54,720
from the included uh underlying the ll

412
00:15:54,720 --> 00:15:57,880
of system.management.automation.dlo

413
00:15:58,880 --> 00:16:00,800
which is just exposed through the.net

414
00:16:00,800 --> 00:16:03,120
framework and windows cli

415
00:16:03,120 --> 00:16:04,880
so again

416
00:16:04,880 --> 00:16:06,880
why i'm showing you this is that

417
00:16:06,880 --> 00:16:10,160
this is just one technique uh one sub

418
00:16:10,160 --> 00:16:12,320
technique and you know i don't know how

419
00:16:12,320 --> 00:16:14,560
many there is maybe 300 whatever you

420
00:16:14,560 --> 00:16:16,240
know different techniques or maybe

421
00:16:16,240 --> 00:16:18,800
that's way off i don't still remember

422
00:16:18,800 --> 00:16:20,800
um but

423
00:16:20,800 --> 00:16:23,120
we have to understand it at that level

424
00:16:23,120 --> 00:16:24,959
across all of

425
00:16:24,959 --> 00:16:26,720
all of these uh techniques and it's

426
00:16:26,720 --> 00:16:29,120
almost that's impossible for anybody to

427
00:16:29,120 --> 00:16:31,360
remember know that information

428
00:16:31,360 --> 00:16:34,079
i mean if you do please uh let's talk

429
00:16:34,079 --> 00:16:36,560
because i want to dump your brain i

430
00:16:36,560 --> 00:16:37,440
guess

431
00:16:37,440 --> 00:16:39,920
um but what i'm saying is that there's a

432
00:16:39,920 --> 00:16:41,680
lot of information a lot of knowledge

433
00:16:41,680 --> 00:16:44,480
and expertise that we need to cover the

434
00:16:44,480 --> 00:16:47,680
entirety of miter attack

435
00:16:47,680 --> 00:16:49,279
luckily

436
00:16:49,279 --> 00:16:52,480
fine fine people uh i love red canary i

437
00:16:52,480 --> 00:16:53,759
think they're an awesome award and what

438
00:16:53,759 --> 00:16:57,120
they're doing um and giving back

439
00:16:57,120 --> 00:16:59,600
you know they started the uh atomic red

440
00:16:59,600 --> 00:17:02,880
team project um many many years ago

441
00:17:02,880 --> 00:17:06,319
and it is exploded and a lot of people

442
00:17:06,319 --> 00:17:08,000
give back to it and a lot of people

443
00:17:08,000 --> 00:17:09,599
participated

444
00:17:09,599 --> 00:17:11,679
but i just wanted to give a huge shout

445
00:17:11,679 --> 00:17:15,359
out to red canary for for doing this um

446
00:17:15,359 --> 00:17:17,359
they even have a very specific community

447
00:17:17,359 --> 00:17:18,959
manager for their open source school

448
00:17:18,959 --> 00:17:20,079
like

449
00:17:20,079 --> 00:17:21,039
they have

450
00:17:21,039 --> 00:17:23,359
lots and lots of dedication towards this

451
00:17:23,359 --> 00:17:27,599
project so um kudos to them

452
00:17:27,599 --> 00:17:28,640
again

453
00:17:28,640 --> 00:17:30,240
atomic red team is where we're gonna

454
00:17:30,240 --> 00:17:33,280
focus this is the logo um as you can see

455
00:17:33,280 --> 00:17:36,559
it's it's an atomic it's red carry um

456
00:17:36,559 --> 00:17:39,760
you know in the center but it is a

457
00:17:39,760 --> 00:17:42,880
complete framework around mitre attack

458
00:17:42,880 --> 00:17:46,799
to help us test and prepare

459
00:17:46,799 --> 00:17:49,039
so they have their own website um it is

460
00:17:49,039 --> 00:17:51,360
atomic operator or i'm sorry atomic red

461
00:17:51,360 --> 00:17:53,760
team i think that io i should have

462
00:17:53,760 --> 00:17:56,880
looked at that um but it's uh you know

463
00:17:56,880 --> 00:17:58,080
basically there's a lot of different

464
00:17:58,080 --> 00:18:00,799
projects under this umbrella and there's

465
00:18:00,799 --> 00:18:03,760
atomic red team which is the actual test

466
00:18:03,760 --> 00:18:05,840
um we'll go into that there is a

467
00:18:05,840 --> 00:18:08,240
powershell based framework similar to

468
00:18:08,240 --> 00:18:09,679
atomic operator

469
00:18:09,679 --> 00:18:12,720
um actually many many years ago

470
00:18:12,720 --> 00:18:15,039
i think in 2018 i i

471
00:18:15,039 --> 00:18:18,320
rewrote um what invoke atomic was to an

472
00:18:18,320 --> 00:18:20,960
actual powershell module um it has since

473
00:18:20,960 --> 00:18:23,200
been taken over by many other great

474
00:18:23,200 --> 00:18:25,440
people so um

475
00:18:25,440 --> 00:18:27,280
yeah but but i

476
00:18:27,280 --> 00:18:29,520
i have a kind of a history around i

477
00:18:29,520 --> 00:18:32,799
guess atomic red team and a voc atomic

478
00:18:32,799 --> 00:18:35,200
they also have the atomic test harness

479
00:18:35,200 --> 00:18:38,160
uh project and chain reactor uh both of

480
00:18:38,160 --> 00:18:42,080
those i have not fully used um so i i'm

481
00:18:42,080 --> 00:18:45,039
not an expert in that but um i imported

482
00:18:45,039 --> 00:18:49,120
that slack and we'll hope wherever i can

483
00:18:50,000 --> 00:18:52,799
so to explain a little bit about atomic

484
00:18:52,799 --> 00:18:56,160
red team uh atomic red team is really a

485
00:18:56,160 --> 00:18:59,919
set of tests or what they call atomics

486
00:18:59,919 --> 00:19:02,880
and those tests are used to emulate or

487
00:19:02,880 --> 00:19:05,440
they're supposed to emulate or simulate

488
00:19:05,440 --> 00:19:07,120
depending on your

489
00:19:07,120 --> 00:19:09,760
osce knowledge they're sure

490
00:19:09,760 --> 00:19:13,200
the miter attack uh techniques used by

491
00:19:13,200 --> 00:19:15,200
malicious actors so let me let me

492
00:19:15,200 --> 00:19:17,679
refractor that um

493
00:19:17,679 --> 00:19:20,559
so these tests are supposed to help with

494
00:19:20,559 --> 00:19:22,080
identifying

495
00:19:22,080 --> 00:19:22,840
uh

496
00:19:22,840 --> 00:19:26,160
certain uh techniques and how they could

497
00:19:26,160 --> 00:19:29,600
be used against you by malicious actors

498
00:19:29,600 --> 00:19:30,400
so

499
00:19:30,400 --> 00:19:32,400
it's a huge uh repository i think

500
00:19:32,400 --> 00:19:35,919
there's like 800 or or man i i should

501
00:19:35,919 --> 00:19:37,440
have looked at that too but there's a

502
00:19:37,440 --> 00:19:39,200
lot of different tests

503
00:19:39,200 --> 00:19:41,440
uh and i'll explain what that looks like

504
00:19:41,440 --> 00:19:44,000
but one of the key pieces that we must

505
00:19:44,000 --> 00:19:46,480
understand with atomic red team and that

506
00:19:46,480 --> 00:19:48,880
entire project is it's all about

507
00:19:48,880 --> 00:19:50,640
preparation you know just like with

508
00:19:50,640 --> 00:19:53,120
digital forensics or incident response

509
00:19:53,120 --> 00:19:54,559
preparation is key

510
00:19:54,559 --> 00:19:57,200
and one of the huge goals that that

511
00:19:57,200 --> 00:20:00,080
atomic red team i think provides is

512
00:20:00,080 --> 00:20:02,000
allowing us to prepare

513
00:20:02,000 --> 00:20:04,559
so we can actually know what we can and

514
00:20:04,559 --> 00:20:06,880
cannot detect within our environment

515
00:20:06,880 --> 00:20:09,280
allows us to test things

516
00:20:09,280 --> 00:20:11,600
um also i think atomic red team in

517
00:20:11,600 --> 00:20:15,360
general is a huge learning tool for

518
00:20:15,360 --> 00:20:17,280
people just getting into

519
00:20:17,280 --> 00:20:19,360
cyber security

520
00:20:19,360 --> 00:20:21,520
understand these techniques and under

521
00:20:21,520 --> 00:20:23,760
look at the code look at the examples

522
00:20:23,760 --> 00:20:26,159
look at all of that and actually

523
00:20:26,159 --> 00:20:28,240
run it just on your machine like a demo

524
00:20:28,240 --> 00:20:31,039
vm or whatever um it'll allow you to

525
00:20:31,039 --> 00:20:33,919
understand how an attacker could abuse

526
00:20:33,919 --> 00:20:35,440
something or how they could look at

527
00:20:35,440 --> 00:20:37,039
something helps from a defensive

528
00:20:37,039 --> 00:20:39,360
perspective and also an offensive

529
00:20:39,360 --> 00:20:40,720
perspective

530
00:20:40,720 --> 00:20:43,120
so it's a great great knowledge tool for

531
00:20:43,120 --> 00:20:45,679
anybody trying to learn uh individually

532
00:20:45,679 --> 00:20:47,200
you want a great resource that's

533
00:20:47,200 --> 00:20:48,480
probably one of the first things that i

534
00:20:48,480 --> 00:20:50,960
would tell you

535
00:20:51,600 --> 00:20:53,840
so here's an example of what this looks

536
00:20:53,840 --> 00:20:56,000
like this is one atomic and this is for

537
00:20:56,000 --> 00:20:58,320
powershell again um and it's gonna have

538
00:20:58,320 --> 00:21:00,640
a brief description of you know from

539
00:21:00,640 --> 00:21:02,640
mitre but that's going to list all the

540
00:21:02,640 --> 00:21:04,720
different tests one thing that we must

541
00:21:04,720 --> 00:21:07,840
understand is that each one of these uh

542
00:21:07,840 --> 00:21:09,039
techniques

543
00:21:09,039 --> 00:21:12,320
or atomics can have one or more tests

544
00:21:12,320 --> 00:21:15,280
uh some of them will have just one uh

545
00:21:15,280 --> 00:21:17,679
many i think just have one but then you

546
00:21:17,679 --> 00:21:20,080
have ones like power show is extremely

547
00:21:20,080 --> 00:21:22,480
common i think there's like 12 14 15

548
00:21:22,480 --> 00:21:24,720
something like that different tests for

549
00:21:24,720 --> 00:21:26,559
different situations

550
00:21:26,559 --> 00:21:28,159
with powershell

551
00:21:28,159 --> 00:21:29,360
so

552
00:21:29,360 --> 00:21:31,200
you can actually when we look at these

553
00:21:31,200 --> 00:21:33,600
and we drill down we can see uh how

554
00:21:33,600 --> 00:21:34,960
they're kind of parsed out into this

555
00:21:34,960 --> 00:21:36,559
markdown file

556
00:21:36,559 --> 00:21:38,960
and we'll see it an explanation

557
00:21:38,960 --> 00:21:42,400
we'll see the supported platforms

558
00:21:42,400 --> 00:21:45,440
we'll see any inputs to that test

559
00:21:45,440 --> 00:21:47,360
and the actual commands that could be

560
00:21:47,360 --> 00:21:51,600
ran uh also as well uh cleanup commands

561
00:21:51,600 --> 00:21:53,919
uh prereq commands and get prereq

562
00:21:53,919 --> 00:21:57,039
commands um great thing about this is

563
00:21:57,039 --> 00:21:59,840
that this is all driven by

564
00:21:59,840 --> 00:22:01,520
this other file

565
00:22:01,520 --> 00:22:04,000
called it's a yaml file

566
00:22:04,000 --> 00:22:06,559
and this yaml file is what generates

567
00:22:06,559 --> 00:22:08,400
that that markdown

568
00:22:08,400 --> 00:22:10,799
so it makes it more readable uh for for

569
00:22:10,799 --> 00:22:12,799
most people and

570
00:22:12,799 --> 00:22:14,799
with the atomic test you can actually

571
00:22:14,799 --> 00:22:17,039
see each individual test and this is

572
00:22:17,039 --> 00:22:19,440
what uh atomic operator will use to

573
00:22:19,440 --> 00:22:23,840
drive um the execution of this code um

574
00:22:23,840 --> 00:22:27,679
automatically for you

575
00:22:27,679 --> 00:22:30,000
but just like anything uh you know

576
00:22:30,000 --> 00:22:32,159
having that yaml file is great like i

577
00:22:32,159 --> 00:22:32,960
said

578
00:22:32,960 --> 00:22:34,480
but you have to have some delivery

579
00:22:34,480 --> 00:22:35,679
mechanism

580
00:22:35,679 --> 00:22:39,120
and that delivery mechanism is

581
00:22:39,120 --> 00:22:41,440
some we need something to operate you

582
00:22:41,440 --> 00:22:44,240
know to to take that data that that has

583
00:22:44,240 --> 00:22:47,039
been defined by the community and make

584
00:22:47,039 --> 00:22:49,120
it actionable

585
00:22:49,120 --> 00:22:51,840
that's where atomic operator comes in

586
00:22:51,840 --> 00:22:53,840
uh atomic operator is an open source

587
00:22:53,840 --> 00:22:57,200
tool like i said um that that i wrote

588
00:22:57,200 --> 00:22:59,440
for my needs but it kind of

589
00:22:59,440 --> 00:23:02,320
expanded and uh now it's a larger

590
00:23:02,320 --> 00:23:03,200
project

591
00:23:03,200 --> 00:23:05,600
but it's a python package

592
00:23:05,600 --> 00:23:08,320
and it is used to execute those atomic

593
00:23:08,320 --> 00:23:10,799
tests or atomic red team test

594
00:23:10,799 --> 00:23:12,480
atomics

595
00:23:12,480 --> 00:23:14,559
across multiple different operating

596
00:23:14,559 --> 00:23:16,960
systems and i'll

597
00:23:16,960 --> 00:23:18,240
we'll talk about all the different

598
00:23:18,240 --> 00:23:21,120
features next

599
00:23:21,760 --> 00:23:22,400
so

600
00:23:22,400 --> 00:23:25,520
a little bit about why i i created it

601
00:23:25,520 --> 00:23:28,720
so i needed a way to test a lot of

602
00:23:28,720 --> 00:23:30,640
different um

603
00:23:30,640 --> 00:23:31,679
products

604
00:23:31,679 --> 00:23:32,559
and

605
00:23:32,559 --> 00:23:33,440
um

606
00:23:33,440 --> 00:23:35,760
you know have the ability to just test a

607
00:23:35,760 --> 00:23:38,080
are we detecting things correctly

608
00:23:38,080 --> 00:23:40,480
um do we have our the right the correct

609
00:23:40,480 --> 00:23:42,480
detection rules a lot of my job is i

610
00:23:42,480 --> 00:23:44,480
interface with uh pretty much every

611
00:23:44,480 --> 00:23:48,559
single security product known to man

612
00:23:48,559 --> 00:23:49,919
at my company because we have

613
00:23:49,919 --> 00:23:51,679
integrations for them and everything

614
00:23:51,679 --> 00:23:52,720
else

615
00:23:52,720 --> 00:23:55,200
but we uh have to build a lot of

616
00:23:55,200 --> 00:23:57,520
automation around that and we we are the

617
00:23:57,520 --> 00:23:59,760
drivers for a lot of that so

618
00:23:59,760 --> 00:24:01,440
i um

619
00:24:01,440 --> 00:24:04,080
you know we need a lot of data then we

620
00:24:04,080 --> 00:24:06,000
need to be able to test different uh

621
00:24:06,000 --> 00:24:08,320
products so i use atomic red team just

622
00:24:08,320 --> 00:24:10,400
for that um just to kind of generate

623
00:24:10,400 --> 00:24:11,360
alerts

624
00:24:11,360 --> 00:24:14,240
uh build sim build detection rules build

625
00:24:14,240 --> 00:24:16,720
automation around those use cases box

626
00:24:16,720 --> 00:24:18,720
and so on and so forth

627
00:24:18,720 --> 00:24:22,320
um i also use it to again test

628
00:24:22,320 --> 00:24:24,880
different specific products so testing

629
00:24:24,880 --> 00:24:28,240
edr tools sim tools whatever it is

630
00:24:28,240 --> 00:24:30,880
um whether it's elastic splunk or

631
00:24:30,880 --> 00:24:34,159
crowdstrike or microsoft defender or

632
00:24:34,159 --> 00:24:36,240
any of the other you know hundreds out

633
00:24:36,240 --> 00:24:37,279
there

634
00:24:37,279 --> 00:24:39,760
we use them to to test all the time

635
00:24:39,760 --> 00:24:40,640
and

636
00:24:40,640 --> 00:24:41,360
i

637
00:24:41,360 --> 00:24:43,440
and i dabble in a little bit of uh i

638
00:24:43,440 --> 00:24:45,120
guess you call it purple teaming or

639
00:24:45,120 --> 00:24:48,400
whatever um with defensive evasion and

640
00:24:48,400 --> 00:24:51,039
how i can understand how

641
00:24:51,039 --> 00:24:53,360
an adversary could leverage

642
00:24:53,360 --> 00:24:55,678
um

643
00:24:55,919 --> 00:24:57,679
evasion basically

644
00:24:57,679 --> 00:24:59,520
plus there's tons of other you know

645
00:24:59,520 --> 00:25:01,679
reasons but these were kind of the core

646
00:25:01,679 --> 00:25:04,320
reasons that i needed it i also needed

647
00:25:04,320 --> 00:25:05,679
python

648
00:25:05,679 --> 00:25:08,240
and i needed it because i deal with a

649
00:25:08,240 --> 00:25:10,559
lot of linux hosts a lot of cinews

650
00:25:10,559 --> 00:25:13,120
powershell is great and and it works but

651
00:25:13,120 --> 00:25:15,200
it's not native so

652
00:25:15,200 --> 00:25:17,120
i needed something that i

653
00:25:17,120 --> 00:25:18,880
use from the day to day which is python

654
00:25:18,880 --> 00:25:20,080
now

655
00:25:20,080 --> 00:25:21,039
but

656
00:25:21,039 --> 00:25:22,720
now let's get into the features

657
00:25:22,720 --> 00:25:25,600
so atomic operator can run tests on

658
00:25:25,600 --> 00:25:29,520
windows linux and mac os systems

659
00:25:29,520 --> 00:25:32,480
uh both locally and remotely

660
00:25:32,480 --> 00:25:34,240
what that means is that if i'm on a

661
00:25:34,240 --> 00:25:37,520
windows host i can ssh into a mac os or

662
00:25:37,520 --> 00:25:39,039
linux if it's open

663
00:25:39,039 --> 00:25:40,960
and run those tests

664
00:25:40,960 --> 00:25:43,840
if i'm on mac os or linux i can actually

665
00:25:43,840 --> 00:25:46,000
remote into a

666
00:25:46,000 --> 00:25:48,880
windows host using powershell remote

667
00:25:48,880 --> 00:25:50,960
or vice versa you know any combination

668
00:25:50,960 --> 00:25:54,400
thereof um which is a huge winner um

669
00:25:54,400 --> 00:25:55,840
from the project that's kind of one of

670
00:25:55,840 --> 00:25:58,480
the main drivers that that i think

671
00:25:58,480 --> 00:26:00,320
sets it apart

672
00:26:00,320 --> 00:26:03,360
there's a command line uh tool and it's

673
00:26:03,360 --> 00:26:06,240
a importable python package most

674
00:26:06,240 --> 00:26:07,600
familiar you're probably going to use

675
00:26:07,600 --> 00:26:09,039
the command line tool we'll get into

676
00:26:09,039 --> 00:26:10,720
that in the demo

677
00:26:10,720 --> 00:26:12,799
but you can also use it as an importable

678
00:26:12,799 --> 00:26:14,960
python package as well meaning you can

679
00:26:14,960 --> 00:26:16,880
integrate it into your own automation or

680
00:26:16,880 --> 00:26:20,080
own scripts as needed

681
00:26:20,080 --> 00:26:22,159
you can actually select uh and prompt

682
00:26:22,159 --> 00:26:23,600
have it prompt you

683
00:26:23,600 --> 00:26:25,840
different inputs or specific even

684
00:26:25,840 --> 00:26:28,559
specific tests and there's other options

685
00:26:28,559 --> 00:26:31,200
around that where you can actually drive

686
00:26:31,200 --> 00:26:33,440
it uh via fully automated or

687
00:26:33,440 --> 00:26:36,000
interactively

688
00:26:36,000 --> 00:26:38,799
and you can automate it even further uh

689
00:26:38,799 --> 00:26:42,000
via a true configuration uh

690
00:26:42,000 --> 00:26:43,840
platform and i'll show you what that

691
00:26:43,840 --> 00:26:46,559
looks like in the demo

692
00:26:46,559 --> 00:26:48,159
first thing you need to understand with

693
00:26:48,159 --> 00:26:49,840
atomic operator though is that it is

694
00:26:49,840 --> 00:26:52,480
python 3.6 and greater

695
00:26:52,480 --> 00:26:55,919
so python 3.6 to 310

696
00:26:55,919 --> 00:26:58,240
at the time of this recording

697
00:26:58,240 --> 00:27:01,039
also uh you can find the repository

698
00:27:01,039 --> 00:27:04,400
under github.com swimlane

699
00:27:04,400 --> 00:27:07,840
atomic operator or view the documents

700
00:27:07,840 --> 00:27:10,080
which if you just go to atomic operator

701
00:27:10,080 --> 00:27:12,640
dash operator dot com

702
00:27:12,640 --> 00:27:14,159
it will always redirect you to the

703
00:27:14,159 --> 00:27:15,919
latest documentation

704
00:27:15,919 --> 00:27:19,279
and you can view past versions if needed

705
00:27:19,279 --> 00:27:21,679
so first thing we need to do is you know

706
00:27:21,679 --> 00:27:24,320
when you get it installed is pip install

707
00:27:24,320 --> 00:27:26,640
atomic dash operator and you're off to

708
00:27:26,640 --> 00:27:29,120
the races

709
00:27:29,840 --> 00:27:35,720
all right now let's get into the demo

710
00:27:38,399 --> 00:27:41,279
okay now let's get into the demo

711
00:27:41,279 --> 00:27:42,799
the first thing we want to do is you

712
00:27:42,799 --> 00:27:44,559
know make sure you have shell i'm using

713
00:27:44,559 --> 00:27:46,960
mac os but you could use you know

714
00:27:46,960 --> 00:27:49,600
another operating system if you want

715
00:27:49,600 --> 00:27:52,399
just make sure you have a python 3 and

716
00:27:52,399 --> 00:27:55,200
pip 3 install

717
00:27:55,200 --> 00:27:57,200
uh if you do then you could just go

718
00:27:57,200 --> 00:27:58,080
ahead

719
00:27:58,080 --> 00:28:01,679
and type in let's say pip 3

720
00:28:01,679 --> 00:28:03,440
i'm actually going to use

721
00:28:03,440 --> 00:28:06,640
python36 because of my environment but

722
00:28:06,640 --> 00:28:08,399
pip install

723
00:28:08,399 --> 00:28:11,360
atomic operator

724
00:28:12,880 --> 00:28:14,960
and you can see it's installing uh

725
00:28:14,960 --> 00:28:17,600
straight from tip and we're good to go

726
00:28:17,600 --> 00:28:20,080
so i'll clear out

727
00:28:20,080 --> 00:28:22,240
what thing that you'll notice once you

728
00:28:22,240 --> 00:28:23,760
actually have it installed

729
00:28:23,760 --> 00:28:25,120
you'll be able to

730
00:28:25,120 --> 00:28:27,600
automatically just kind of access the

731
00:28:27,600 --> 00:28:29,919
command line feature which is probably

732
00:28:29,919 --> 00:28:31,120
the most

733
00:28:31,120 --> 00:28:33,440
um useful and probably the way most

734
00:28:33,440 --> 00:28:35,919
people will actually use atomic operator

735
00:28:35,919 --> 00:28:38,480
but you can access it uh bm you know

736
00:28:38,480 --> 00:28:39,840
just typing in

737
00:28:39,840 --> 00:28:42,640
atomic operator of course

738
00:28:42,640 --> 00:28:44,960
and just typing uh enter

739
00:28:44,960 --> 00:28:46,880
and so what that will do is basically

740
00:28:46,880 --> 00:28:48,960
tell you uh a couple different uh

741
00:28:48,960 --> 00:28:50,480
functions so there's a built-in help

742
00:28:50,480 --> 00:28:53,120
system uh it's kind of dynamic uh

743
00:28:53,120 --> 00:28:54,720
meaning that if you type in the wrong

744
00:28:54,720 --> 00:28:57,039
command it will automatically you know

745
00:28:57,039 --> 00:28:58,880
tell you hey you typed in the wrong

746
00:28:58,880 --> 00:28:59,919
command

747
00:28:59,919 --> 00:29:02,480
um try this

748
00:29:02,480 --> 00:29:05,279
but it uses a google python fire if

749
00:29:05,279 --> 00:29:07,919
you're not familiar but it is a

750
00:29:07,919 --> 00:29:10,480
better kind of modern uh command line

751
00:29:10,480 --> 00:29:12,480
tool

752
00:29:12,480 --> 00:29:14,320
anyways uh you have kind of the the

753
00:29:14,320 --> 00:29:16,320
brief description here and really it's

754
00:29:16,320 --> 00:29:18,799
all about uh understanding what the kind

755
00:29:18,799 --> 00:29:21,679
of format of this is of the help so you

756
00:29:21,679 --> 00:29:24,799
have the name uh synopsis usually uh but

757
00:29:24,799 --> 00:29:26,799
then command so the synopsis is

758
00:29:26,799 --> 00:29:28,559
basically telling you okay type in

759
00:29:28,559 --> 00:29:31,279
atomic operator and then sum command

760
00:29:31,279 --> 00:29:33,279
uh and really the only three there's

761
00:29:33,279 --> 00:29:35,120
only three commands uh available in the

762
00:29:35,120 --> 00:29:38,320
command line uh but they have um

763
00:29:38,320 --> 00:29:40,799
different options for each one of course

764
00:29:40,799 --> 00:29:44,480
so uh atomic operator command run is

765
00:29:44,480 --> 00:29:46,159
probably is going to be the the biggest

766
00:29:46,159 --> 00:29:46,960
one

767
00:29:46,960 --> 00:29:49,520
uh but first typically you would run

768
00:29:49,520 --> 00:29:52,480
like get atomics and what this will do

769
00:29:52,480 --> 00:29:55,200
is actually download the red canary

770
00:29:55,200 --> 00:29:57,760
atomic red team project the entire

771
00:29:57,760 --> 00:30:00,799
repository into your local system based

772
00:30:00,799 --> 00:30:03,679
on whatever path that you're located

773
00:30:03,679 --> 00:30:04,480
so

774
00:30:04,480 --> 00:30:06,840
you can just type in atomic

775
00:30:06,840 --> 00:30:09,840
operator and we'll just type in get

776
00:30:09,840 --> 00:30:12,399
atomics

777
00:30:14,000 --> 00:30:16,000
and once we do this

778
00:30:16,000 --> 00:30:18,000
you'll see kind of the the response

779
00:30:18,000 --> 00:30:19,840
there and it kind of gives you the path

780
00:30:19,840 --> 00:30:22,720
of where to actually download it to if i

781
00:30:22,720 --> 00:30:24,480
was to

782
00:30:24,480 --> 00:30:26,399
ls

783
00:30:26,399 --> 00:30:29,279
we would actually be able to

784
00:30:29,279 --> 00:30:32,279
see

785
00:30:32,330 --> 00:30:36,520
[Music]

786
00:30:36,880 --> 00:30:39,760
to atomic operator

787
00:30:39,760 --> 00:30:42,000
and then red guitar bomb and you'll be

788
00:30:42,000 --> 00:30:43,679
able to see that entire repository is

789
00:30:43,679 --> 00:30:46,000
right there

790
00:30:46,480 --> 00:30:48,559
so once we actually have that installed

791
00:30:48,559 --> 00:30:50,960
then we can actually uh start running

792
00:30:50,960 --> 00:30:53,520
tests if we want to um there's a lot of

793
00:30:53,520 --> 00:30:55,360
different options but i first

794
00:30:55,360 --> 00:30:57,760
recommend that you use the help

795
00:30:57,760 --> 00:30:59,440
so we'll run

796
00:30:59,440 --> 00:31:01,440
atomic operator and then use the run

797
00:31:01,440 --> 00:31:02,640
command

798
00:31:02,640 --> 00:31:04,559
we will actually type in

799
00:31:04,559 --> 00:31:06,399
help

800
00:31:06,399 --> 00:31:08,720
and it will print out all the help so

801
00:31:08,720 --> 00:31:10,320
these are a lot of different parameters

802
00:31:10,320 --> 00:31:11,519
and a lot of different i'll kind of go

803
00:31:11,519 --> 00:31:13,519
through these um but i wanted to show

804
00:31:13,519 --> 00:31:15,440
you as i scroll up uh the different

805
00:31:15,440 --> 00:31:18,159
methods so as you can see this is the

806
00:31:18,159 --> 00:31:20,240
main method in which we run the atomic

807
00:31:20,240 --> 00:31:21,440
tests

808
00:31:21,440 --> 00:31:22,720
there's a lot of different flags and

809
00:31:22,720 --> 00:31:25,440
arguments and those are listed below

810
00:31:25,440 --> 00:31:27,519
you again just have a basic description

811
00:31:27,519 --> 00:31:29,360
and args but

812
00:31:29,360 --> 00:31:31,360
the arguments

813
00:31:31,360 --> 00:31:32,559
are where you need to actually pay

814
00:31:32,559 --> 00:31:34,159
attention

815
00:31:34,159 --> 00:31:36,159
so with atomic operator when you use the

816
00:31:36,159 --> 00:31:39,200
run command by default it will actually

817
00:31:39,200 --> 00:31:42,320
run all techniques so

818
00:31:42,320 --> 00:31:43,919
it'll actually prompt you and they do

819
00:31:43,919 --> 00:31:46,720
want to make sure but it will run all

820
00:31:46,720 --> 00:31:47,919
techniques

821
00:31:47,919 --> 00:31:50,240
um so if you want to run all of them

822
00:31:50,240 --> 00:31:52,320
great you don't have to do much but if

823
00:31:52,320 --> 00:31:54,960
you want to run a very select few

824
00:31:54,960 --> 00:31:56,559
then you actually have to start typing

825
00:31:56,559 --> 00:31:57,760
those in

826
00:31:57,760 --> 00:32:00,320
um and we'll show you that same with

827
00:32:00,320 --> 00:32:03,440
test gui ids uh within the atomic or

828
00:32:03,440 --> 00:32:06,320
anatomic uh file

829
00:32:06,320 --> 00:32:08,559
you actually switch over and i'll show

830
00:32:08,559 --> 00:32:09,679
you

831
00:32:09,679 --> 00:32:14,399
um i'll just use one as an example here

832
00:32:14,399 --> 00:32:17,600
and you see this auto generated gui id

833
00:32:17,600 --> 00:32:19,919
in this atomic

834
00:32:19,919 --> 00:32:22,880
this is the test gui id for that single

835
00:32:22,880 --> 00:32:25,440
test so you can specify that specific

836
00:32:25,440 --> 00:32:29,720
test in the command line

837
00:32:29,760 --> 00:32:32,880
all right let's go back here

838
00:32:32,880 --> 00:32:35,360
additionally you can actually

839
00:32:35,360 --> 00:32:37,519
pass in a parameter it's called select

840
00:32:37,519 --> 00:32:39,279
test so if you

841
00:32:39,279 --> 00:32:40,960
type in uh

842
00:32:40,960 --> 00:32:42,880
you know all the techniques and you want

843
00:32:42,880 --> 00:32:45,760
to actually select individual tests

844
00:32:45,760 --> 00:32:47,760
from each one of those techniques which

845
00:32:47,760 --> 00:32:50,159
would be a lot but you could do that and

846
00:32:50,159 --> 00:32:52,720
it will actually prompt you and

847
00:32:52,720 --> 00:32:55,120
have you choose like a multi-select uh

848
00:32:55,120 --> 00:32:57,519
window

849
00:32:57,519 --> 00:32:59,360
by default we already know the atomics

850
00:32:59,360 --> 00:33:00,640
path since we actually already

851
00:33:00,640 --> 00:33:02,720
downloaded it so we'll search for it and

852
00:33:02,720 --> 00:33:04,320
try to find it if you put it in a

853
00:33:04,320 --> 00:33:06,080
different location

854
00:33:06,080 --> 00:33:08,640
then you need to provide that path as

855
00:33:08,640 --> 00:33:10,960
part of that parameter by default if you

856
00:33:10,960 --> 00:33:14,320
just run atomic operator get atomics

857
00:33:14,320 --> 00:33:16,480
and then the run command it already

858
00:33:16,480 --> 00:33:19,120
knows that path

859
00:33:19,200 --> 00:33:22,320
uh check prereq so this is by default it

860
00:33:22,320 --> 00:33:25,760
is false and this is a uh prereq command

861
00:33:25,760 --> 00:33:27,840
that we will actually you know want to

862
00:33:27,840 --> 00:33:31,200
check um meaning when i look at this uh

863
00:33:31,200 --> 00:33:32,960
like an atomic test

864
00:33:32,960 --> 00:33:34,080
um

865
00:33:34,080 --> 00:33:36,960
that wasn't a good one

866
00:33:37,200 --> 00:33:41,039
uh there's this uh get prereq command

867
00:33:41,039 --> 00:33:42,080
and

868
00:33:42,080 --> 00:33:44,159
basically pre-direct command uh the

869
00:33:44,159 --> 00:33:45,840
pre-recommend here

870
00:33:45,840 --> 00:33:47,120
is really

871
00:33:47,120 --> 00:33:49,360
check uh prereqs

872
00:33:49,360 --> 00:33:50,720
um and

873
00:33:50,720 --> 00:33:54,720
the get prereqs uh down here is the get

874
00:33:54,720 --> 00:33:56,559
prereq command so it'll run those

875
00:33:56,559 --> 00:33:58,880
dependencies a lot of times those are

876
00:33:58,880 --> 00:34:01,039
already there if you're experiencing use

877
00:34:01,039 --> 00:34:04,399
atomic red team if not then um you need

878
00:34:04,399 --> 00:34:07,279
to actually specify hey i want to run uh

879
00:34:07,279 --> 00:34:09,760
the get prereq command uh to download

880
00:34:09,760 --> 00:34:13,520
any uh arbitrary let's say files or just

881
00:34:13,520 --> 00:34:14,960
to check hey do you have powershell

882
00:34:14,960 --> 00:34:17,280
installed or hey do you have uh this

883
00:34:17,280 --> 00:34:18,839
rootkit uh

884
00:34:18,839 --> 00:34:22,079
installed and uh or the the binaries to

885
00:34:22,079 --> 00:34:23,520
build that root kit

886
00:34:23,520 --> 00:34:25,599
and same with um you know get

887
00:34:25,599 --> 00:34:26,960
prerequisite actually check to see if

888
00:34:26,960 --> 00:34:28,560
it's there and then the git pre-rep will

889
00:34:28,560 --> 00:34:30,320
actually um

890
00:34:30,320 --> 00:34:32,399
download any of those or

891
00:34:32,399 --> 00:34:34,639
make sure that any of those prereqs are

892
00:34:34,639 --> 00:34:35,839
there

893
00:34:35,839 --> 00:34:38,639
uh there's a cleanup command uh

894
00:34:38,639 --> 00:34:42,320
cleanup um this is also by default um

895
00:34:42,320 --> 00:34:43,280
off

896
00:34:43,280 --> 00:34:44,960
but um

897
00:34:44,960 --> 00:34:48,239
basically you can run this uh cleanup

898
00:34:48,239 --> 00:34:50,560
command that's defined in that test uh

899
00:34:50,560 --> 00:34:54,399
or any test um and automatically you

900
00:34:54,399 --> 00:34:58,000
know run that at the end uh basically

901
00:34:58,000 --> 00:35:00,720
the order will be if you selected all of

902
00:35:00,720 --> 00:35:03,520
three of these options the check prereqs

903
00:35:03,520 --> 00:35:05,839
get prereqs and cleanup

904
00:35:05,839 --> 00:35:07,680
the order would be

905
00:35:07,680 --> 00:35:09,920
um prereq command

906
00:35:09,920 --> 00:35:12,560
uh well it'd actually be git prereq

907
00:35:12,560 --> 00:35:14,720
then the prereq command

908
00:35:14,720 --> 00:35:16,720
then the command will actually be ran no

909
00:35:16,720 --> 00:35:17,839
matter what

910
00:35:17,839 --> 00:35:20,160
and then the cleanup come in

911
00:35:20,160 --> 00:35:22,720
so um just be mindful of those those

912
00:35:22,720 --> 00:35:23,839
inputs

913
00:35:23,839 --> 00:35:26,560
uh there's also a by default we'll try

914
00:35:26,560 --> 00:35:30,480
to copy all source files um they're

915
00:35:30,480 --> 00:35:32,320
it's pretty accurate there are some

916
00:35:32,320 --> 00:35:35,680
probably blogs out there with it since

917
00:35:35,680 --> 00:35:38,400
it's hard to test every single copy but

918
00:35:38,400 --> 00:35:39,760
for the most part

919
00:35:39,760 --> 00:35:41,680
my testing and some of the tests that

920
00:35:41,680 --> 00:35:44,160
i've written it seems to be like copying

921
00:35:44,160 --> 00:35:46,400
most of the source and bin files

922
00:35:46,400 --> 00:35:49,200
um but if you run into any issues just

923
00:35:49,200 --> 00:35:50,560
let me know um

924
00:35:50,560 --> 00:35:53,280
we'll get a fix pretty quick

925
00:35:53,280 --> 00:35:55,760
so this will by default copy all those

926
00:35:55,760 --> 00:35:57,680
source files when you're doing a remote

927
00:35:57,680 --> 00:35:59,920
connection um to

928
00:35:59,920 --> 00:36:02,560
that remote host

929
00:36:02,560 --> 00:36:05,839
command timeout is really um all about

930
00:36:05,839 --> 00:36:08,400
hey if there's some sort of connection

931
00:36:08,400 --> 00:36:10,640
issue or something like that

932
00:36:10,640 --> 00:36:13,119
we'll actually wait um for 20 minutes or

933
00:36:13,119 --> 00:36:16,240
two i'm sorry 20 seconds uh and then if

934
00:36:16,240 --> 00:36:19,680
uh if we didn't get a response um then

935
00:36:19,680 --> 00:36:22,480
we'll actually you know fail and say hey

936
00:36:22,480 --> 00:36:23,280
um

937
00:36:23,280 --> 00:36:25,839
this failed you can run debug or debug

938
00:36:25,839 --> 00:36:28,480
logs it'll actually just output a lot

939
00:36:28,480 --> 00:36:31,200
more detail about the tests being ran

940
00:36:31,200 --> 00:36:34,160
and um prompt for input args this is

941
00:36:34,160 --> 00:36:36,880
another option where um if you do not

942
00:36:36,880 --> 00:36:37,920
know

943
00:36:37,920 --> 00:36:40,480
the inputs so for example if you're not

944
00:36:40,480 --> 00:36:41,680
familiar

945
00:36:41,680 --> 00:36:44,320
um here's a test there's input arguments

946
00:36:44,320 --> 00:36:46,240
that are defined rootkit source

947
00:36:46,240 --> 00:36:48,640
rookitpath and rootkit name and

948
00:36:48,640 --> 00:36:49,920
tintfolder

949
00:36:49,920 --> 00:36:52,320
so all of those have a default value and

950
00:36:52,320 --> 00:36:54,320
we'll replace those for you

951
00:36:54,320 --> 00:36:56,240
automatically but if you wanted to

952
00:36:56,240 --> 00:36:59,520
specify an alternate uh value besides

953
00:36:59,520 --> 00:37:01,280
that default then you can actually have

954
00:37:01,280 --> 00:37:03,839
it prompt you and to enter what that

955
00:37:03,839 --> 00:37:05,680
value should be

956
00:37:05,680 --> 00:37:07,520
this is more interactive probably you're

957
00:37:07,520 --> 00:37:09,280
only going to use this when you're doing

958
00:37:09,280 --> 00:37:11,359
like one test um

959
00:37:11,359 --> 00:37:13,280
one or two tests if you do all of them

960
00:37:13,280 --> 00:37:14,720
it's going to take you a while they got

961
00:37:14,720 --> 00:37:16,000
to go through them

962
00:37:16,000 --> 00:37:17,200
but um

963
00:37:17,200 --> 00:37:18,880
it is useful

964
00:37:18,880 --> 00:37:21,760
uh return atomic so this is actually

965
00:37:21,760 --> 00:37:24,400
something that i needed but um it is

966
00:37:24,400 --> 00:37:26,560
useful for others as well if you didn't

967
00:37:26,560 --> 00:37:28,720
want to run

968
00:37:28,720 --> 00:37:30,880
those tests but you want to just return

969
00:37:30,880 --> 00:37:33,440
the parse structure of those atomic

970
00:37:33,440 --> 00:37:34,560
tests

971
00:37:34,560 --> 00:37:36,960
then you can just do that and and it'll

972
00:37:36,960 --> 00:37:39,520
literally return um

973
00:37:39,520 --> 00:37:41,920
custom models and objects um that are

974
00:37:41,920 --> 00:37:43,440
parsable and

975
00:37:43,440 --> 00:37:44,320
um

976
00:37:44,320 --> 00:37:45,119
can

977
00:37:45,119 --> 00:37:47,839
be converted to json and dicks and all

978
00:37:47,839 --> 00:37:51,119
this other stuff um from return atomics

979
00:37:51,119 --> 00:37:53,280
so you just pass that in and it'll

980
00:37:53,280 --> 00:37:55,599
return those instead of running

981
00:37:55,599 --> 00:37:56,400
uh

982
00:37:56,400 --> 00:37:58,079
we'll get to this but this is an

983
00:37:58,079 --> 00:38:00,160
optional uh configuration file that you

984
00:38:00,160 --> 00:38:02,800
can provide that allows you to run a lot

985
00:38:02,800 --> 00:38:06,800
of remote tests or just tests in general

986
00:38:06,800 --> 00:38:10,240
with different configurations

987
00:38:11,119 --> 00:38:15,119
and there's also this config file only

988
00:38:15,119 --> 00:38:17,359
this is very specific kind of use case

989
00:38:17,359 --> 00:38:19,440
but if you passed in

990
00:38:19,440 --> 00:38:20,960
all techniques

991
00:38:20,960 --> 00:38:23,520
but you only really wanted to to run you

992
00:38:23,520 --> 00:38:25,280
accidentally you know

993
00:38:25,280 --> 00:38:26,400
pass it in

994
00:38:26,400 --> 00:38:29,280
um then you could actually

995
00:38:29,280 --> 00:38:31,200
say oh only run the ones that i've

996
00:38:31,200 --> 00:38:34,480
defined in my config file

997
00:38:34,480 --> 00:38:36,960
when we get into the the next kind of

998
00:38:36,960 --> 00:38:39,520
set of parameters i know this is a lot

999
00:38:39,520 --> 00:38:42,480
but we have hosts so you can actually

1000
00:38:42,480 --> 00:38:45,040
provide one or more host

1001
00:38:45,040 --> 00:38:46,560
and if you do

1002
00:38:46,560 --> 00:38:49,119
then we will attempt to run those tests

1003
00:38:49,119 --> 00:38:51,440
not locally but remotely

1004
00:38:51,440 --> 00:38:54,560
and you must provide a username

1005
00:38:54,560 --> 00:38:56,240
at least

1006
00:38:56,240 --> 00:38:57,040
for

1007
00:38:57,040 --> 00:39:00,400
each of those hosts that you've defined

1008
00:39:00,400 --> 00:39:02,400
if you have different

1009
00:39:02,400 --> 00:39:04,079
authentication

1010
00:39:04,079 --> 00:39:05,520
for each host

1011
00:39:05,520 --> 00:39:07,119
that's where the config file will come

1012
00:39:07,119 --> 00:39:09,839
in and we'll explain that

1013
00:39:09,839 --> 00:39:12,320
you optionally you need to provide a

1014
00:39:12,320 --> 00:39:13,440
password

1015
00:39:13,440 --> 00:39:15,520
and and or

1016
00:39:15,520 --> 00:39:17,760
an ssh key path

1017
00:39:17,760 --> 00:39:20,320
or the actual private key and this is

1018
00:39:20,320 --> 00:39:23,599
only for ssh so typically that would be

1019
00:39:23,599 --> 00:39:27,440
linux and mac os systems um but

1020
00:39:27,440 --> 00:39:30,640
and username and password are used for

1021
00:39:30,640 --> 00:39:35,839
uh windows remote management or ws man

1022
00:39:36,240 --> 00:39:38,880
you can also verify ssl

1023
00:39:38,880 --> 00:39:41,200
especially over rdp typically you won't

1024
00:39:41,200 --> 00:39:42,880
come across this a lot of people don't

1025
00:39:42,880 --> 00:39:46,560
have ssl on for rdp but if you do great

1026
00:39:46,560 --> 00:39:48,240
use it

1027
00:39:48,240 --> 00:39:51,040
and you can specify a different ssh port

1028
00:39:51,040 --> 00:39:53,599
for that host and as well as the timeout

1029
00:39:53,599 --> 00:39:57,119
value for that ssh connection um there's

1030
00:39:57,119 --> 00:39:59,200
additional flags that can be accepted

1031
00:39:59,200 --> 00:40:00,720
but basically

1032
00:40:00,720 --> 00:40:03,520
those will be a dictionary and they'll

1033
00:40:03,520 --> 00:40:05,760
map them to the input name and their

1034
00:40:05,760 --> 00:40:07,839
values

1035
00:40:07,839 --> 00:40:09,520
again this is probably something you

1036
00:40:09,520 --> 00:40:12,079
wouldn't use a lot um but

1037
00:40:12,079 --> 00:40:14,319
you could

1038
00:40:14,319 --> 00:40:16,240
okay i know that was a lot uh there was

1039
00:40:16,240 --> 00:40:18,960
a lot of a lot of inputs there a lot of

1040
00:40:18,960 --> 00:40:20,620
options a lot of features

1041
00:40:20,620 --> 00:40:21,839
[Music]

1042
00:40:21,839 --> 00:40:24,640
i definitely recommend whatever you do

1043
00:40:24,640 --> 00:40:27,200
is to open up and

1044
00:40:27,200 --> 00:40:31,200
go to atomic operator.com you can list

1045
00:40:31,200 --> 00:40:34,240
out a lot more detail about those inputs

1046
00:40:34,240 --> 00:40:36,000
and how to use them in certain

1047
00:40:36,000 --> 00:40:38,400
situations so there's if you find

1048
00:40:38,400 --> 00:40:39,839
anything missing or anything

1049
00:40:39,839 --> 00:40:41,839
documentation you know

1050
00:40:41,839 --> 00:40:43,839
maybe you're you're afraid or you're

1051
00:40:43,839 --> 00:40:46,160
just not familiar with code um

1052
00:40:46,160 --> 00:40:48,079
documentation

1053
00:40:48,079 --> 00:40:51,280
i will happily always accept

1054
00:40:51,280 --> 00:40:54,160
documentation updates um i am not a

1055
00:40:54,160 --> 00:40:57,119
document writer um i tried to explain

1056
00:40:57,119 --> 00:40:59,280
his best from from my perspective but i

1057
00:40:59,280 --> 00:41:01,119
wrote the things so

1058
00:41:01,119 --> 00:41:03,920
i have a different um

1059
00:41:03,920 --> 00:41:06,560
view on the project than others so

1060
00:41:06,560 --> 00:41:08,960
please submit documentation updates or

1061
00:41:08,960 --> 00:41:10,319
anything like that and if you have

1062
00:41:10,319 --> 00:41:11,920
questions on how to do that let me know

1063
00:41:11,920 --> 00:41:14,319
and i'll answer

1064
00:41:14,319 --> 00:41:19,200
okay so let's take a look at that uh

1065
00:41:19,200 --> 00:41:21,839
you know run command and what we want to

1066
00:41:21,839 --> 00:41:26,000
do is we actually want to run techniques

1067
00:41:26,000 --> 00:41:27,599
and um

1068
00:41:27,599 --> 00:41:29,520
we will

1069
00:41:29,520 --> 00:41:31,680
attempt

1070
00:41:31,680 --> 00:41:34,680
to

1071
00:41:35,040 --> 00:41:38,640
so we will go ahead and start to look at

1072
00:41:38,640 --> 00:41:41,280
the atomic operator run command we will

1073
00:41:41,280 --> 00:41:44,240
do atomic operator run techniques i'm

1074
00:41:44,240 --> 00:41:48,400
going to specify a very specific one and

1075
00:41:48,400 --> 00:41:50,000
i will uh

1076
00:41:50,000 --> 00:41:52,880
just provide the basic details and not

1077
00:41:52,880 --> 00:41:54,560
provide any of those other switches and

1078
00:41:54,560 --> 00:41:56,480
hit enter

1079
00:41:56,480 --> 00:41:58,319
what this will do is it'll run and it'll

1080
00:41:58,319 --> 00:42:00,400
start outputting some logs and we'll see

1081
00:42:00,400 --> 00:42:01,440
that here

1082
00:42:01,440 --> 00:42:02,480
soon

1083
00:42:02,480 --> 00:42:03,839
and

1084
00:42:03,839 --> 00:42:06,000
the main thing that we'll see is that

1085
00:42:06,000 --> 00:42:08,560
okay i've provided that technique

1086
00:42:08,560 --> 00:42:10,960
um and that technique has individual

1087
00:42:10,960 --> 00:42:12,000
tests

1088
00:42:12,000 --> 00:42:13,839
um within it right

1089
00:42:13,839 --> 00:42:16,480
one or more tests

1090
00:42:16,480 --> 00:42:19,280
and you'll notice that the first kind of

1091
00:42:19,280 --> 00:42:22,160
info print here is that

1092
00:42:22,160 --> 00:42:25,680
that test specifically is for windows

1093
00:42:25,680 --> 00:42:28,240
and is not supported on my operating

1094
00:42:28,240 --> 00:42:30,560
system or this operating system so it's

1095
00:42:30,560 --> 00:42:32,000
skipping

1096
00:42:32,000 --> 00:42:34,160
same with liz this windows firewall

1097
00:42:34,160 --> 00:42:35,839
again i'm on a mac

1098
00:42:35,839 --> 00:42:37,680
and it'll say hey

1099
00:42:37,680 --> 00:42:39,359
you can't run this on this operating

1100
00:42:39,359 --> 00:42:41,280
system so we're going to skip

1101
00:42:41,280 --> 00:42:43,920
the next one it's going to say oh all

1102
00:42:43,920 --> 00:42:46,319
right we're going to run this one

1103
00:42:46,319 --> 00:42:49,200
and this is the actual output from that

1104
00:42:49,200 --> 00:42:50,720
ram test

1105
00:42:50,720 --> 00:42:54,079
so we can see the entire dump of my

1106
00:42:54,079 --> 00:42:56,319
network information or whatever

1107
00:42:56,319 --> 00:42:58,000
all right there and then it kind of goes

1108
00:42:58,000 --> 00:43:00,240
through and it does the same thing

1109
00:43:00,240 --> 00:43:03,920
uh for the other ones because hey

1110
00:43:03,920 --> 00:43:06,319
they're not uh they're not applicable to

1111
00:43:06,319 --> 00:43:07,920
my operating system

1112
00:43:07,920 --> 00:43:11,520
so we kind of built in that logic to

1113
00:43:11,520 --> 00:43:13,119
make sure that a you're not trying to

1114
00:43:13,119 --> 00:43:15,359
run you know windows or whatever on your

1115
00:43:15,359 --> 00:43:17,680
local machine when it's not windows

1116
00:43:17,680 --> 00:43:19,760
um but we still kind of

1117
00:43:19,760 --> 00:43:22,079
output that to say hey we did skip it so

1118
00:43:22,079 --> 00:43:25,440
you so you just kind of acknowledge that

1119
00:43:25,440 --> 00:43:27,040
the other thing is that we'll you know

1120
00:43:27,040 --> 00:43:29,920
run mac os firewall rules uh for some

1121
00:43:29,920 --> 00:43:32,800
reason i'm getting a command timeout um

1122
00:43:32,800 --> 00:43:34,160
and that could be for a lot of different

1123
00:43:34,160 --> 00:43:37,599
reasons uh mostly because probably my

1124
00:43:37,599 --> 00:43:40,160
system is uh

1125
00:43:40,160 --> 00:43:41,680
barely locked in

1126
00:43:41,680 --> 00:43:44,319
um but you can see also that each

1127
00:43:44,319 --> 00:43:46,800
individual test that was ran will

1128
00:43:46,800 --> 00:43:49,680
actually output um

1129
00:43:49,680 --> 00:43:53,839
there uh kind of in a json object uh

1130
00:43:53,839 --> 00:43:55,440
kind of output that you could type it to

1131
00:43:55,440 --> 00:43:58,240
you wherever um and it kind of has the

1132
00:43:58,240 --> 00:44:00,240
format of the tesco id

1133
00:44:00,240 --> 00:44:02,079
where you ran it whether it was a remote

1134
00:44:02,079 --> 00:44:03,839
or local host

1135
00:44:03,839 --> 00:44:07,280
the command and the technique id and

1136
00:44:07,280 --> 00:44:09,280
the command is like the output um and

1137
00:44:09,280 --> 00:44:11,520
you'll see that

1138
00:44:11,520 --> 00:44:15,200
right here um so the other one uh since

1139
00:44:15,200 --> 00:44:17,520
it didn't actually run because we got

1140
00:44:17,520 --> 00:44:19,040
the um

1141
00:44:19,040 --> 00:44:20,400
you know warning

1142
00:44:20,400 --> 00:44:23,520
command actually timed out um then we

1143
00:44:23,520 --> 00:44:24,880
actually you know

1144
00:44:24,880 --> 00:44:27,920
failed back and um still say hey we

1145
00:44:27,920 --> 00:44:29,839
tried to run it but we didn't get any

1146
00:44:29,839 --> 00:44:31,359
response

1147
00:44:31,359 --> 00:44:33,680
so you can kind of use that data as you

1148
00:44:33,680 --> 00:44:37,200
need but we can tell that hey we have um

1149
00:44:37,200 --> 00:44:38,800
you know ran this test and you can see

1150
00:44:38,800 --> 00:44:40,720
that we have a lot of uh different time

1151
00:44:40,720 --> 00:44:43,760
stamps uh already available for us

1152
00:44:43,760 --> 00:44:45,760
some of the the cool thing

1153
00:44:45,760 --> 00:44:49,520
about um atomic operator is that we do

1154
00:44:49,520 --> 00:44:52,640
output all of it to a log file

1155
00:44:52,640 --> 00:44:53,920
so everything that you saw in that

1156
00:44:53,920 --> 00:44:54,880
console

1157
00:44:54,880 --> 00:44:56,800
will be printed out here and there's

1158
00:44:56,800 --> 00:44:58,560
going to be different ones uh you know

1159
00:44:58,560 --> 00:45:00,319
for errors there's going to be air

1160
00:45:00,319 --> 00:45:01,839
there's no errors

1161
00:45:01,839 --> 00:45:04,000
warnings you're going to see hey we try

1162
00:45:04,000 --> 00:45:06,720
to run that but command timed out so

1163
00:45:06,720 --> 00:45:08,160
you'll have different logs for for

1164
00:45:08,160 --> 00:45:10,240
different types of data so if you ever

1165
00:45:10,240 --> 00:45:12,640
need to troubleshoot or you know just

1166
00:45:12,640 --> 00:45:14,960
you'll want to save it and look back um

1167
00:45:14,960 --> 00:45:16,960
we'll have kind of a running log

1168
00:45:16,960 --> 00:45:18,720
always outputted

1169
00:45:18,720 --> 00:45:19,440
to

1170
00:45:19,440 --> 00:45:20,960
wherever that package is actually

1171
00:45:20,960 --> 00:45:22,880
installed

1172
00:45:22,880 --> 00:45:25,280
okay

1173
00:45:25,359 --> 00:45:26,720
so

1174
00:45:26,720 --> 00:45:29,200
let's take a look at

1175
00:45:29,200 --> 00:45:32,720
atomic operator and we will actually

1176
00:45:32,720 --> 00:45:34,960
do the um

1177
00:45:34,960 --> 00:45:37,440
techniques but i want to

1178
00:45:37,440 --> 00:45:39,520
um

1179
00:45:39,520 --> 00:45:43,200
uh i wanted to select

1180
00:45:43,200 --> 00:45:45,440
test

1181
00:45:45,440 --> 00:45:48,400
i think i spelled that right

1182
00:45:48,720 --> 00:45:50,160
so it's going to go through it's kind of

1183
00:45:50,160 --> 00:45:51,760
iterating through and you can see that

1184
00:45:51,760 --> 00:45:54,560
it will actually prompt me um to select

1185
00:45:54,560 --> 00:45:57,440
which test i want to individually within

1186
00:45:57,440 --> 00:45:58,880
that technique

1187
00:45:58,880 --> 00:46:02,160
um itself and you can actually select um

1188
00:46:02,160 --> 00:46:05,200
individually or more than one

1189
00:46:05,200 --> 00:46:06,079
right

1190
00:46:06,079 --> 00:46:07,440
um

1191
00:46:07,440 --> 00:46:09,440
i think it's just these

1192
00:46:09,440 --> 00:46:11,839
and i can actually select those and run

1193
00:46:11,839 --> 00:46:13,280
just those tests

1194
00:46:13,280 --> 00:46:16,720
so again my output is a lot less um

1195
00:46:16,720 --> 00:46:18,880
we're actually going to see that we only

1196
00:46:18,880 --> 00:46:20,800
selected and we ran that one to that

1197
00:46:20,800 --> 00:46:21,920
first test

1198
00:46:21,920 --> 00:46:23,839
which is here's the output

1199
00:46:23,839 --> 00:46:26,079
and we're actually running that second

1200
00:46:26,079 --> 00:46:28,319
one it's asking me for my password i hit

1201
00:46:28,319 --> 00:46:30,880
enter you know blah blah blah

1202
00:46:30,880 --> 00:46:31,760
and

1203
00:46:31,760 --> 00:46:32,800
blog

1204
00:46:32,800 --> 00:46:34,880
so you can actually go through and

1205
00:46:34,880 --> 00:46:40,720
select individual tests as um as needed

1206
00:46:41,119 --> 00:46:42,880
so if i wanted to

1207
00:46:42,880 --> 00:46:46,079
run um that select test but i want to

1208
00:46:46,079 --> 00:46:46,960
check

1209
00:46:46,960 --> 00:46:48,960
uh prereqs

1210
00:46:48,960 --> 00:46:49,920
and

1211
00:46:49,920 --> 00:46:53,359
uh get rerex

1212
00:46:53,359 --> 00:46:57,160
it clean up

1213
00:46:58,160 --> 00:47:00,560
again it's going to prompt me

1214
00:47:00,560 --> 00:47:02,319
and i'm going to say i just want this

1215
00:47:02,319 --> 00:47:03,839
one

1216
00:47:03,839 --> 00:47:06,319
and go so good thing about this is that

1217
00:47:06,319 --> 00:47:08,960
it really didn't have any um

1218
00:47:08,960 --> 00:47:10,800
it didn't really have any uh prereqs

1219
00:47:10,800 --> 00:47:13,359
basically because there's no output uh

1220
00:47:13,359 --> 00:47:14,880
because there was no commands to being

1221
00:47:14,880 --> 00:47:18,000
run so um you can kind of see where

1222
00:47:18,000 --> 00:47:20,720
where that is i'll have to uh maybe

1223
00:47:20,720 --> 00:47:23,040
put something there to kind of say that

1224
00:47:23,040 --> 00:47:25,440
hey we attempted but there's none um but

1225
00:47:25,440 --> 00:47:28,480
right now it's just no output

1226
00:47:28,480 --> 00:47:30,960
okay

1227
00:47:33,040 --> 00:47:35,760
so that's pretty like i mean that's

1228
00:47:35,760 --> 00:47:38,559
gonna be most of your you know typical

1229
00:47:38,559 --> 00:47:40,480
use cases right

1230
00:47:40,480 --> 00:47:42,800
again you can actually just say i want

1231
00:47:42,800 --> 00:47:45,040
to return all atomics actually i'll do

1232
00:47:45,040 --> 00:47:47,760
that um so if i leave

1233
00:47:47,760 --> 00:47:50,000
techniques blank

1234
00:47:50,000 --> 00:47:52,400
and we just want to

1235
00:47:52,400 --> 00:47:53,359
return

1236
00:47:53,359 --> 00:47:54,640
atomics

1237
00:47:54,640 --> 00:47:57,119
um it'll actually run it iterate through

1238
00:47:57,119 --> 00:47:59,440
every single atomic defined uh in every

1239
00:47:59,440 --> 00:48:01,440
single test and it's going to dump a

1240
00:48:01,440 --> 00:48:03,920
bunch of data but um you can see there's

1241
00:48:03,920 --> 00:48:06,000
an atomic and these are different models

1242
00:48:06,000 --> 00:48:08,800
for each atomic and their test

1243
00:48:08,800 --> 00:48:11,599
and they're barely accessible by their

1244
00:48:11,599 --> 00:48:13,440
property names and and they can be

1245
00:48:13,440 --> 00:48:15,520
converted to json and blah blah so you

1246
00:48:15,520 --> 00:48:16,800
can pipe these

1247
00:48:16,800 --> 00:48:18,960
especially for the command line it's a

1248
00:48:18,960 --> 00:48:20,400
little bit more difficult when we get

1249
00:48:20,400 --> 00:48:23,280
into the python package import um you'll

1250
00:48:23,280 --> 00:48:26,160
be able to use this data a lot more and

1251
00:48:26,160 --> 00:48:29,440
i'll show you what that means

1252
00:48:30,240 --> 00:48:35,839
okay so let's look at our help again

1253
00:48:36,240 --> 00:48:37,760
and

1254
00:48:37,760 --> 00:48:42,160
let's take a look at um

1255
00:48:44,100 --> 00:48:45,760
[Music]

1256
00:48:45,760 --> 00:48:47,520
command timeline i mean those are pretty

1257
00:48:47,520 --> 00:48:50,319
all straightforward um i'm actually

1258
00:48:50,319 --> 00:48:52,160
going to show you

1259
00:48:52,160 --> 00:48:53,040
um

1260
00:48:53,040 --> 00:48:54,559
and i'm going to actually

1261
00:48:54,559 --> 00:48:55,520
move

1262
00:48:55,520 --> 00:48:57,040
um

1263
00:48:57,040 --> 00:48:58,640
my

1264
00:48:58,640 --> 00:48:59,839
uh

1265
00:48:59,839 --> 00:49:01,440
me

1266
00:49:01,440 --> 00:49:05,440
over here because i'm going to try to

1267
00:49:09,599 --> 00:49:10,880
run

1268
00:49:10,880 --> 00:49:12,480
this test without showing you any

1269
00:49:12,480 --> 00:49:14,839
passwords

1270
00:49:14,839 --> 00:49:16,559
um

1271
00:49:16,559 --> 00:49:19,599
let's say hosts

1272
00:49:19,599 --> 00:49:22,000
yeah you can't see any cool

1273
00:49:22,000 --> 00:49:25,000
so

1274
00:49:30,960 --> 00:49:34,960
let me move me over some more

1275
00:49:39,599 --> 00:49:42,640
okay so i'm actually going to try to

1276
00:49:42,640 --> 00:49:46,240
remote into to a specific host and run

1277
00:49:46,240 --> 00:49:48,880
uh some tests run that test

1278
00:49:48,880 --> 00:49:50,960
and so you'll see kind of the the output

1279
00:49:50,960 --> 00:49:55,960
as we as we go here um

1280
00:49:58,480 --> 00:49:59,599
running

1281
00:49:59,599 --> 00:50:02,480
running it's running

1282
00:50:07,200 --> 00:50:09,200
oh i know why

1283
00:50:09,200 --> 00:50:11,440
sorry guys

1284
00:50:11,440 --> 00:50:14,480
i wasn't connected my vpn you know demos

1285
00:50:14,480 --> 00:50:15,839
live right

1286
00:50:15,839 --> 00:50:18,480
fun times

1287
00:50:25,520 --> 00:50:26,559
all right

1288
00:50:26,559 --> 00:50:28,880
so now we're going to run it again

1289
00:50:28,880 --> 00:50:29,920
and

1290
00:50:29,920 --> 00:50:32,720
um we'll actually

1291
00:50:32,720 --> 00:50:34,079
run that out

1292
00:50:34,079 --> 00:50:39,079
let it kind of process here

1293
00:50:41,119 --> 00:50:43,920
and of course

1294
00:50:43,920 --> 00:50:46,079
because i

1295
00:50:46,079 --> 00:50:47,599
here's the wrong

1296
00:50:47,599 --> 00:50:48,640
host

1297
00:50:48,640 --> 00:50:50,480
that's what i get for using my history

1298
00:50:50,480 --> 00:50:53,480
here

1299
00:50:57,920 --> 00:50:59,359
there we go

1300
00:50:59,359 --> 00:51:00,960
so you'll see that it'll just start

1301
00:51:00,960 --> 00:51:02,240
running and it's running every single

1302
00:51:02,240 --> 00:51:04,079
one of those tests that it can on that

1303
00:51:04,079 --> 00:51:07,280
remote host um this is a cenos box that

1304
00:51:07,280 --> 00:51:10,079
are that i ran it on um and we'll kind

1305
00:51:10,079 --> 00:51:12,800
of scroll up a little bit just so we can

1306
00:51:12,800 --> 00:51:14,400
see some info

1307
00:51:14,400 --> 00:51:16,240
we can see that hey we're going to skip

1308
00:51:16,240 --> 00:51:19,280
this um we are running those different

1309
00:51:19,280 --> 00:51:21,119
tests um

1310
00:51:21,119 --> 00:51:23,200
it's it's gonna try to run those because

1311
00:51:23,200 --> 00:51:24,720
it's hard to actually determine what

1312
00:51:24,720 --> 00:51:26,800
operating system you're in uh especially

1313
00:51:26,800 --> 00:51:28,880
from a remote if you have it specified

1314
00:51:28,880 --> 00:51:31,119
uh specifically hey this is linux hey

1315
00:51:31,119 --> 00:51:33,119
blah blah i was gonna add an option for

1316
00:51:33,119 --> 00:51:35,040
that but

1317
00:51:35,040 --> 00:51:39,040
so far it's just kind of noise

1318
00:51:39,040 --> 00:51:41,200
so um you can see that there's a warning

1319
00:51:41,200 --> 00:51:43,040
connection here because hey i'm trying

1320
00:51:43,040 --> 00:51:45,520
to re connect over a windows

1321
00:51:45,520 --> 00:51:48,240
protocol on a linux box uh but we can

1322
00:51:48,240 --> 00:51:49,680
kind of skip down and you can start

1323
00:51:49,680 --> 00:51:52,720
dumping out information from that host

1324
00:51:52,720 --> 00:51:55,040
and again similar output that you're

1325
00:51:55,040 --> 00:51:56,400
going to see

1326
00:51:56,400 --> 00:51:58,160
basically because arp is missing on that

1327
00:51:58,160 --> 00:52:00,480
machine it's going to skip everything

1328
00:52:00,480 --> 00:52:02,319
running around arp

1329
00:52:02,319 --> 00:52:03,920
you can see that we're running these

1330
00:52:03,920 --> 00:52:06,960
other commands and requests open

1331
00:52:06,960 --> 00:52:10,240
we're gonna try to uh run this uh temp

1332
00:52:10,240 --> 00:52:12,160
and so you can see that we've actually

1333
00:52:12,160 --> 00:52:13,520
converted

1334
00:52:13,520 --> 00:52:16,319
in this test um this actual powershell

1335
00:52:16,319 --> 00:52:20,559
script uh path to a temp path and uh

1336
00:52:20,559 --> 00:52:21,920
it'll actually

1337
00:52:21,920 --> 00:52:24,960
run that uh on that that host because it

1338
00:52:24,960 --> 00:52:27,359
does have a remote powershell on there

1339
00:52:27,359 --> 00:52:30,960
or i'm sorry uh it it does have a

1340
00:52:30,960 --> 00:52:34,079
powershell for on that host

1341
00:52:34,079 --> 00:52:35,280
and

1342
00:52:35,280 --> 00:52:36,880
you can kind of see some more

1343
00:52:36,880 --> 00:52:38,960
authentication successful i mean there's

1344
00:52:38,960 --> 00:52:41,359
lots of logs and lots of information

1345
00:52:41,359 --> 00:52:42,800
being dumped out

1346
00:52:42,800 --> 00:52:44,559
but we're able to actually run those

1347
00:52:44,559 --> 00:52:47,760
tests all remotely from from that host

1348
00:52:47,760 --> 00:52:50,079
which is pretty cool

1349
00:52:50,079 --> 00:52:52,880
so without taking too much time

1350
00:52:52,880 --> 00:52:55,119
i want to show you one kind of last

1351
00:52:55,119 --> 00:52:56,400
thing

1352
00:52:56,400 --> 00:52:58,160
and this is going to be the

1353
00:52:58,160 --> 00:53:00,400
configuration file that we talked about

1354
00:53:00,400 --> 00:53:02,720
so with atomic operator

1355
00:53:02,720 --> 00:53:05,280
you can actually you know pass in

1356
00:53:05,280 --> 00:53:07,040
uh that config file

1357
00:53:07,040 --> 00:53:08,880
and i'll let you kind of go through

1358
00:53:08,880 --> 00:53:10,720
your docs for that but

1359
00:53:10,720 --> 00:53:11,599
um

1360
00:53:11,599 --> 00:53:12,640
let me

1361
00:53:12,640 --> 00:53:15,040
try to

1362
00:53:21,280 --> 00:53:22,000
so

1363
00:53:22,000 --> 00:53:24,480
we will um we have this kind of

1364
00:53:24,480 --> 00:53:25,760
inventory

1365
00:53:25,760 --> 00:53:28,960
and um the entire document is

1366
00:53:28,960 --> 00:53:30,400
all in yml

1367
00:53:30,400 --> 00:53:31,839
so if you're not familiar with the emel

1368
00:53:31,839 --> 00:53:33,520
um please

1369
00:53:33,520 --> 00:53:35,280
get get them there here because it's pr

1370
00:53:35,280 --> 00:53:37,920
it's pretty common for config but um i i

1371
00:53:37,920 --> 00:53:40,400
enjoy yaml because it allows me to do um

1372
00:53:40,400 --> 00:53:43,119
what i'm about to show you so

1373
00:53:43,119 --> 00:53:45,280
the minimum that you're going to need

1374
00:53:45,280 --> 00:53:48,960
for a um single you know for for running

1375
00:53:48,960 --> 00:53:50,240
a test

1376
00:53:50,240 --> 00:53:51,599
would be

1377
00:53:51,599 --> 00:53:53,119
um

1378
00:53:53,119 --> 00:53:54,839
literally atomic

1379
00:53:54,839 --> 00:53:58,480
test and we don't even need

1380
00:53:58,480 --> 00:54:00,240
any of this

1381
00:54:00,240 --> 00:54:03,598
you could just specify

1382
00:54:05,839 --> 00:54:08,079
the gui ids so you can literally just

1383
00:54:08,079 --> 00:54:10,240
have this and you know which guides that

1384
00:54:10,240 --> 00:54:11,599
you want to run

1385
00:54:11,599 --> 00:54:15,440
and it'll actually show you that

1386
00:54:16,480 --> 00:54:17,599
so

1387
00:54:17,599 --> 00:54:21,119
that that's the absolute minimum

1388
00:54:21,200 --> 00:54:23,040
secondarily you could have something

1389
00:54:23,040 --> 00:54:25,920
like this where i'm actually just going

1390
00:54:25,920 --> 00:54:28,000
to copy this again and show you down

1391
00:54:28,000 --> 00:54:29,599
here

1392
00:54:29,599 --> 00:54:31,680
so you can have

1393
00:54:31,680 --> 00:54:33,520
you want to specify for each one of

1394
00:54:33,520 --> 00:54:34,640
those

1395
00:54:34,640 --> 00:54:36,960
tests

1396
00:54:36,960 --> 00:54:38,960
some input arguments

1397
00:54:38,960 --> 00:54:41,280
so remember we have those default values

1398
00:54:41,280 --> 00:54:43,280
uh defined in a test where you can

1399
00:54:43,280 --> 00:54:46,240
actually um change them here and kind of

1400
00:54:46,240 --> 00:54:47,760
automate around them

1401
00:54:47,760 --> 00:54:50,079
um so depending on your you know how

1402
00:54:50,079 --> 00:54:50,880
you're

1403
00:54:50,880 --> 00:54:52,400
set up or how you're going to use this

1404
00:54:52,400 --> 00:54:53,359
project

1405
00:54:53,359 --> 00:54:55,200
but you could actually you know swap

1406
00:54:55,200 --> 00:54:57,520
that that value and when it runs that

1407
00:54:57,520 --> 00:54:59,440
test it'll just replace

1408
00:54:59,440 --> 00:55:01,760
whatever that argument input file or

1409
00:55:01,760 --> 00:55:03,680
whatever the name is for that input

1410
00:55:03,680 --> 00:55:05,520
argument with whatever value you

1411
00:55:05,520 --> 00:55:06,640
provided

1412
00:55:06,640 --> 00:55:09,599
so again this is all local um same with

1413
00:55:09,599 --> 00:55:11,280
the other example

1414
00:55:11,280 --> 00:55:14,880
um but let's say you wanted to run

1415
00:55:14,880 --> 00:55:16,960
tests across multiple different

1416
00:55:16,960 --> 00:55:19,359
operating systems and they have multiple

1417
00:55:19,359 --> 00:55:21,920
different configurations uh

1418
00:55:21,920 --> 00:55:24,319
configurations is what i mean is uh

1419
00:55:24,319 --> 00:55:25,839
authentications

1420
00:55:25,839 --> 00:55:28,319
so with this kind of format we can

1421
00:55:28,319 --> 00:55:31,280
actually have a lot of different layers

1422
00:55:31,280 --> 00:55:33,839
so with this atomic test we can actually

1423
00:55:33,839 --> 00:55:35,839
provide an inventory

1424
00:55:35,839 --> 00:55:39,280
an inventory is a list of one or more

1425
00:55:39,280 --> 00:55:41,359
computers or systems that you can

1426
00:55:41,359 --> 00:55:43,440
actually define their authentication

1427
00:55:43,440 --> 00:55:46,000
credentials for so we can say for this

1428
00:55:46,000 --> 00:55:46,880
test

1429
00:55:46,880 --> 00:55:48,400
i actually want to run

1430
00:55:48,400 --> 00:55:51,280
um which this you would never really do

1431
00:55:51,280 --> 00:55:53,760
this but this is an example um you would

1432
00:55:53,760 --> 00:55:56,480
you could actually say um or for this

1433
00:55:56,480 --> 00:55:58,799
test let's actually make one

1434
00:55:58,799 --> 00:56:00,480
um we'll say

1435
00:56:00,480 --> 00:56:02,720
linux2 group

1436
00:56:02,720 --> 00:56:06,799
and maybe even mac os one group right

1437
00:56:06,799 --> 00:56:09,440
so we have these kind of inventories for

1438
00:56:09,440 --> 00:56:11,760
this specific test

1439
00:56:11,760 --> 00:56:15,200
and in our inventory key right here

1440
00:56:15,200 --> 00:56:17,839
we can actually define

1441
00:56:17,839 --> 00:56:20,160
up different sets of inventories so you

1442
00:56:20,160 --> 00:56:22,640
can say for linux 1 i want to use the

1443
00:56:22,640 --> 00:56:24,720
ssh executor

1444
00:56:24,720 --> 00:56:27,040
meaning i want to

1445
00:56:27,040 --> 00:56:28,240
i want to run

1446
00:56:28,240 --> 00:56:30,720
these over ssh

1447
00:56:30,720 --> 00:56:33,119
you provide that authentication

1448
00:56:33,119 --> 00:56:34,319
for that

1449
00:56:34,319 --> 00:56:36,640
group that their group of hosts and then

1450
00:56:36,640 --> 00:56:38,720
you have one or more host under that

1451
00:56:38,720 --> 00:56:39,680
group

1452
00:56:39,680 --> 00:56:40,480
so

1453
00:56:40,480 --> 00:56:44,079
i could say for linux two

1454
00:56:44,079 --> 00:56:45,760
want and i'm just gonna

1455
00:56:45,760 --> 00:56:48,640
copy this again

1456
00:56:49,280 --> 00:56:51,200
i want

1457
00:56:51,200 --> 00:56:55,040
um where am i here

1458
00:56:55,599 --> 00:56:57,280
i want um

1459
00:56:57,280 --> 00:56:58,799
let's get rid of that

1460
00:56:58,799 --> 00:57:00,799
i want username and password i'm just

1461
00:57:00,799 --> 00:57:02,720
going to leave all that other default

1462
00:57:02,720 --> 00:57:04,880
and i'm just going to you know change

1463
00:57:04,880 --> 00:57:05,920
these

1464
00:57:05,920 --> 00:57:09,359
um to to whatever arbitrary you know ips

1465
00:57:09,359 --> 00:57:12,559
or domains uh that i want and at that

1466
00:57:12,559 --> 00:57:15,760
point now i can say

1467
00:57:15,760 --> 00:57:18,799
i could have you know

1468
00:57:20,960 --> 00:57:24,559
hundreds uh underneath there and

1469
00:57:24,559 --> 00:57:26,400
they are all going to use this one set

1470
00:57:26,400 --> 00:57:28,960
of credentials that are provided um or i

1471
00:57:28,960 --> 00:57:31,040
could have two in this one or one and

1472
00:57:31,040 --> 00:57:33,040
this one um so on and so forth so you

1473
00:57:33,040 --> 00:57:35,359
kind of have a layered approach and you

1474
00:57:35,359 --> 00:57:37,520
could build this out over time

1475
00:57:37,520 --> 00:57:40,160
as you begin to test and actually just

1476
00:57:40,160 --> 00:57:42,480
automate the entire running of all those

1477
00:57:42,480 --> 00:57:44,480
tests their inputs and the

1478
00:57:44,480 --> 00:57:46,720
authentication mechanism just by passing

1479
00:57:46,720 --> 00:57:49,119
in this configuration button

1480
00:57:49,119 --> 00:57:50,880
so it's pretty useful especially when

1481
00:57:50,880 --> 00:57:52,240
you want to automate on lots of

1482
00:57:52,240 --> 00:57:54,400
different hosts across lots of different

1483
00:57:54,400 --> 00:57:57,040
types of environments um in different

1484
00:57:57,040 --> 00:57:59,599
environments maybe you're in mssp maybe

1485
00:57:59,599 --> 00:58:01,200
you're not

1486
00:58:01,200 --> 00:58:03,280
yeah you can you can run these in in

1487
00:58:03,280 --> 00:58:04,880
multiple different environments or

1488
00:58:04,880 --> 00:58:06,079
networks

1489
00:58:06,079 --> 00:58:10,000
as you've seen fit so configuration file

1490
00:58:10,000 --> 00:58:12,880
is out there um there's a an entire

1491
00:58:12,880 --> 00:58:14,799
large document kind of explaining that

1492
00:58:14,799 --> 00:58:16,720
that a little bit clearer

1493
00:58:16,720 --> 00:58:18,240
please again read through those

1494
00:58:18,240 --> 00:58:20,720
documentation and make sure that um

1495
00:58:20,720 --> 00:58:22,799
you're following there

1496
00:58:22,799 --> 00:58:25,839
um last thing i want to actually

1497
00:58:25,839 --> 00:58:28,960
show you the readme

1498
00:58:28,960 --> 00:58:31,920
and we're gonna you know look at we kind

1499
00:58:31,920 --> 00:58:35,520
of support uh python 3.6 to i have to

1500
00:58:35,520 --> 00:58:38,720
actually change that to 3.9 or 3.10

1501
00:58:38,720 --> 00:58:41,599
since it's out um on windows mac and

1502
00:58:41,599 --> 00:58:43,359
linux

1503
00:58:43,359 --> 00:58:44,319
we

1504
00:58:44,319 --> 00:58:46,480
kind of have the y and the features but

1505
00:58:46,480 --> 00:58:49,119
then you can dive into different pieces

1506
00:58:49,119 --> 00:58:51,280
of the the documentation which is all

1507
00:58:51,280 --> 00:58:53,760
rendered on that atomic operator.com but

1508
00:58:53,760 --> 00:58:56,000
if you just wanted to see it from um the

1509
00:58:56,000 --> 00:58:58,559
repository you can view it there as well

1510
00:58:58,559 --> 00:59:01,760
look at the requirements how you install

1511
00:59:01,760 --> 00:59:03,440
there's certain caveats when you start

1512
00:59:03,440 --> 00:59:06,559
getting into windows um

1513
00:59:06,559 --> 00:59:09,280
there's some prereqs basically that you

1514
00:59:09,280 --> 00:59:12,799
may have to to check um like let me go

1515
00:59:12,799 --> 00:59:14,400
here

1516
00:59:14,400 --> 00:59:15,839
basically you need to make sure that

1517
00:59:15,839 --> 00:59:18,720
powershell remoting is enabled and when

1518
00:59:18,720 --> 00:59:21,920
ram is uh set up and you're allowed to

1519
00:59:21,920 --> 00:59:23,680
remote into that system so it kind of

1520
00:59:23,680 --> 00:59:25,520
have some some powershell code that you

1521
00:59:25,520 --> 00:59:28,720
can um use to help troubleshoot or to to

1522
00:59:28,720 --> 00:59:31,680
get it going on a windows host

1523
00:59:31,680 --> 00:59:34,400
so i hope that that uh i hope that

1524
00:59:34,400 --> 00:59:36,720
helped you understand atomic operator

1525
00:59:36,720 --> 00:59:39,280
how you can use it um how it can benefit

1526
00:59:39,280 --> 00:59:42,079
you if you have any questions at all

1527
00:59:42,079 --> 00:59:43,920
please let me know

1528
00:59:43,920 --> 00:59:46,000
you can reach out to me on twitter uh

1529
00:59:46,000 --> 00:59:49,359
github repository um or

1530
00:59:49,359 --> 00:59:50,480
in slack

1531
00:59:50,480 --> 00:59:53,280
or in discord wherever um i'm all around

1532
00:59:53,280 --> 00:59:54,799
everywhere so

1533
00:59:54,799 --> 00:59:59,319
thank you all and have a great day

