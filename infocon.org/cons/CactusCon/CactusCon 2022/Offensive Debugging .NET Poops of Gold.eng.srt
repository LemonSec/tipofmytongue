1
00:00:07,520 --> 00:00:10,240
what's up y'all how y'all doing

2
00:00:10,240 --> 00:00:12,400
yeah it's been a long day i was walking

3
00:00:12,400 --> 00:00:14,559
around for three hours trying to do a

4
00:00:14,559 --> 00:00:15,679
scavenger you probably just see me

5
00:00:15,679 --> 00:00:17,440
walking around looking wandering

6
00:00:17,440 --> 00:00:19,439
aimlessly and all that stuff

7
00:00:19,439 --> 00:00:21,359
uh oh it's been fun uh cactus concerts

8
00:00:21,359 --> 00:00:23,920
my first time here uh first talk i'm

9
00:00:23,920 --> 00:00:25,279
ever giving here

10
00:00:25,279 --> 00:00:26,080
um

11
00:00:26,080 --> 00:00:28,080
and i think i'm we're the last technical

12
00:00:28,080 --> 00:00:29,920
talk of the day maybe so we're going to

13
00:00:29,920 --> 00:00:31,519
get real technical we're going real deep

14
00:00:31,519 --> 00:00:34,160
and talking about offensive debugging

15
00:00:34,160 --> 00:00:37,200
and looking at net memory dumps for gold

16
00:00:37,200 --> 00:00:40,719
poops as i call them right

17
00:00:40,719 --> 00:00:41,920
so who am i

18
00:00:41,920 --> 00:00:44,239
my name is leron gray i also go by daddy

19
00:00:44,239 --> 00:00:45,840
coco man in some circles you probably

20
00:00:45,840 --> 00:00:48,160
see me in your ctfs hopefully winning i

21
00:00:48,160 --> 00:00:51,199
hope i'm waiting uh my twitter is at uh

22
00:00:51,199 --> 00:00:54,160
on my social media is generally at mcomi

23
00:00:54,160 --> 00:00:57,600
i'm on the azure red team at microsoft

24
00:00:57,600 --> 00:00:59,840
i currently have

25
00:00:59,840 --> 00:01:01,359
two degrees from dakota state i'm

26
00:01:01,359 --> 00:01:03,600
working on my phd currently i'm so i'm a

27
00:01:03,600 --> 00:01:05,760
phd student as well

28
00:01:05,760 --> 00:01:08,400
i was in the navy for about 10 years

29
00:01:08,400 --> 00:01:10,479
got out

30
00:01:10,479 --> 00:01:12,560
and now i became a red teamer pentester

31
00:01:12,560 --> 00:01:14,240
life right

32
00:01:14,240 --> 00:01:17,439
uh i do a lot of python python tools are

33
00:01:17,439 --> 00:01:19,920
my my my niche i'll write anything all

34
00:01:19,920 --> 00:01:22,400
day every day

35
00:01:22,400 --> 00:01:25,520
and i also ctf a lot as i just mentioned

36
00:01:25,520 --> 00:01:27,280
me walking around for three hours and

37
00:01:27,280 --> 00:01:29,840
i'm not bitter about it

38
00:01:29,840 --> 00:01:31,360
i'm also a nerdco rapper i go by the

39
00:01:31,360 --> 00:01:35,119
name oh my um i was on the uh the defcon

40
00:01:35,119 --> 00:01:36,159
uh

41
00:01:36,159 --> 00:01:38,079
tapes last two years you can also find

42
00:01:38,079 --> 00:01:39,280
my stuff online i always got to promote

43
00:01:39,280 --> 00:01:41,200
my music right one of those soundcloud

44
00:01:41,200 --> 00:01:42,399
wrappers

45
00:01:42,399 --> 00:01:44,960
so you always got to check out my music

46
00:01:44,960 --> 00:01:47,040
when i'm not not a software engineer

47
00:01:47,040 --> 00:01:48,560
although technically it's in my title

48
00:01:48,560 --> 00:01:50,640
security software engineer but

49
00:01:50,640 --> 00:01:51,759
i'm not traditionally like i don't have

50
00:01:51,759 --> 00:01:53,119
a computer science degree so i can't

51
00:01:53,119 --> 00:01:55,759
tell you things about like threads and

52
00:01:55,759 --> 00:01:57,360
and memory i can't get too deep into it

53
00:01:57,360 --> 00:01:59,680
i know a little bit but not enough and

54
00:01:59,680 --> 00:02:02,159
bring that up because uh

55
00:02:02,159 --> 00:02:03,280
we're going to be talking a little bit

56
00:02:03,280 --> 00:02:05,040
about that today in this talk and i may

57
00:02:05,040 --> 00:02:06,719
not have all the answers but hopefully

58
00:02:06,719 --> 00:02:08,399
if you have any questions as we get

59
00:02:08,399 --> 00:02:10,479
towards the end we can i can answer them

60
00:02:10,479 --> 00:02:12,160
as much as possible

61
00:02:12,160 --> 00:02:15,599
i'm not that great at win debug which is

62
00:02:15,599 --> 00:02:16,879
also ironic that's what we're talking

63
00:02:16,879 --> 00:02:18,879
about today um and so there's a lot of

64
00:02:18,879 --> 00:02:20,239
things in when debug i may not know

65
00:02:20,239 --> 00:02:21,520
about you may find something that's

66
00:02:21,520 --> 00:02:24,080
easier as as we uh

67
00:02:24,080 --> 00:02:25,840
as i show the demo you might be things

68
00:02:25,840 --> 00:02:27,120
that are easier

69
00:02:27,120 --> 00:02:28,720
than the way i'm doing them

70
00:02:28,720 --> 00:02:30,720
that's cool uh

71
00:02:30,720 --> 00:02:32,000
i've only touched windy bug in like the

72
00:02:32,000 --> 00:02:33,599
last couple months and i learned a lot

73
00:02:33,599 --> 00:02:34,959
and it's great

74
00:02:34,959 --> 00:02:36,160
i'm not afraid to roast you because i'm

75
00:02:36,160 --> 00:02:37,680
from brooklyn and a lot of people think

76
00:02:37,680 --> 00:02:39,200
i'm just mean on twitter nah i'm just

77
00:02:39,200 --> 00:02:40,959
from new york

78
00:02:40,959 --> 00:02:42,239
and i'm not any of these other dope

79
00:02:42,239 --> 00:02:43,760
nerdcore rappers i'm definitely not

80
00:02:43,760 --> 00:02:45,360
whitey cracker or any of dualcore i

81
00:02:45,360 --> 00:02:47,200
think that's pretty obvious and uh the

82
00:02:47,200 --> 00:02:48,720
guy on the right dale chase who's also

83
00:02:48,720 --> 00:02:52,160
from brooklyn i'm not him but

84
00:02:52,160 --> 00:02:53,840
he feels like i look at him i think he's

85
00:02:53,840 --> 00:02:55,280
about to steal somebody's girl so maybe

86
00:02:55,280 --> 00:02:56,879
maybe i wish i was him

87
00:02:56,879 --> 00:02:58,480
all right so off topic uh anybody know

88
00:02:58,480 --> 00:03:00,000
what this is before we get into the talk

89
00:03:00,000 --> 00:03:02,959
can anybody see what that is

90
00:03:03,519 --> 00:03:06,319
yeah yeah balsamic yeah yeah so elmo was

91
00:03:06,319 --> 00:03:07,200
on a

92
00:03:07,200 --> 00:03:08,959
jimmy fallon the other day

93
00:03:08,959 --> 00:03:10,720
and uh i didn't really get the joke on

94
00:03:10,720 --> 00:03:12,319
why people thought it was funny

95
00:03:12,319 --> 00:03:14,560
because um i'm from new york

96
00:03:14,560 --> 00:03:16,640
and i've never heard the hard r said in

97
00:03:16,640 --> 00:03:18,640
vinegar we don't do hard r's in my house

98
00:03:18,640 --> 00:03:19,519
so

99
00:03:19,519 --> 00:03:21,599
i heard balsamic vinegar i say balsamic

100
00:03:21,599 --> 00:03:22,959
vinegar this is really off topic it has

101
00:03:22,959 --> 00:03:24,560
nothing to do with the actual talk uh

102
00:03:24,560 --> 00:03:26,480
just it's just something that that's

103
00:03:26,480 --> 00:03:27,599
really been bothering me the last couple

104
00:03:27,599 --> 00:03:30,400
weeks anyway so let's get to actual talk

105
00:03:30,400 --> 00:03:31,920
all right so the agenda we're going to

106
00:03:31,920 --> 00:03:33,519
talk uh some things about like offensive

107
00:03:33,519 --> 00:03:34,799
security basics then we're going to get

108
00:03:34,799 --> 00:03:37,360
into net debugging and some dump

109
00:03:37,360 --> 00:03:39,840
analysis with an attacker mindset and

110
00:03:39,840 --> 00:03:41,599
finally i'll demo a tool i wrote called

111
00:03:41,599 --> 00:03:43,440
turd shovel

112
00:03:43,440 --> 00:03:44,959
this is not an official microsoft tool

113
00:03:44,959 --> 00:03:46,159
it's on my personal github they wouldn't

114
00:03:46,159 --> 00:03:48,400
let me um

115
00:03:48,400 --> 00:03:50,080
so it's about the basics having an

116
00:03:50,080 --> 00:03:52,480
attacker mindset generally the questions

117
00:03:52,480 --> 00:03:53,760
you ask are

118
00:03:53,760 --> 00:03:55,360
what's available to me like what do i

119
00:03:55,360 --> 00:03:56,480
have

120
00:03:56,480 --> 00:03:57,920
what i want to make available so what is

121
00:03:57,920 --> 00:04:00,319
my end goal the pen test or red team and

122
00:04:00,319 --> 00:04:01,840
then how do i connect the dots from what

123
00:04:01,840 --> 00:04:04,319
i have to where i want to get

124
00:04:04,319 --> 00:04:05,599
there's a lot of tools and frameworks

125
00:04:05,599 --> 00:04:07,040
that are out there that we use in our

126
00:04:07,040 --> 00:04:08,400
basic skills right some command line

127
00:04:08,400 --> 00:04:10,000
tools so you should know your way around

128
00:04:10,000 --> 00:04:13,439
a shell power shell bash whatever

129
00:04:13,439 --> 00:04:14,959
some tools some basic tools like nmap

130
00:04:14,959 --> 00:04:17,279
that everyone uses metasploit these are

131
00:04:17,279 --> 00:04:18,798
like the real basic things you might

132
00:04:18,798 --> 00:04:20,238
come across as you're learning offensive

133
00:04:20,238 --> 00:04:22,079
security

134
00:04:22,079 --> 00:04:23,680
and then as you go along you have to

135
00:04:23,680 --> 00:04:25,600
learn how to exploit and do proper post

136
00:04:25,600 --> 00:04:27,520
exploitation right so

137
00:04:27,520 --> 00:04:28,800
the way that you loot an environment

138
00:04:28,800 --> 00:04:30,800
really depends on the the type of

139
00:04:30,800 --> 00:04:32,800
environment that it is right it could be

140
00:04:32,800 --> 00:04:34,560
by the operating system so the way that

141
00:04:34,560 --> 00:04:37,360
you look at linux versus windows or the

142
00:04:37,360 --> 00:04:39,520
way that you look at on-premises versus

143
00:04:39,520 --> 00:04:43,159
cloud is very different

144
00:04:45,280 --> 00:04:46,960
there we go and then some some more

145
00:04:46,960 --> 00:04:48,320
intermediate skills and these aren't

146
00:04:48,320 --> 00:04:50,000
really ranked in any particular way i

147
00:04:50,000 --> 00:04:51,199
just call them like intermediate skills

148
00:04:51,199 --> 00:04:52,639
right as you start to grow in your

149
00:04:52,639 --> 00:04:54,400
offensive security mindset

150
00:04:54,400 --> 00:04:56,080
a lot of these tools are i'm sorry a lot

151
00:04:56,080 --> 00:04:57,759
of these skills are supported by tools

152
00:04:57,759 --> 00:04:59,440
that people at

153
00:04:59,440 --> 00:05:00,880
super smart have written and made it

154
00:05:00,880 --> 00:05:01,919
easier for

155
00:05:01,919 --> 00:05:02,800
uh

156
00:05:02,800 --> 00:05:04,639
uh offensive security

157
00:05:04,639 --> 00:05:06,400
people to to use right so we talk about

158
00:05:06,400 --> 00:05:09,039
enumeration tools uh there's some

159
00:05:09,039 --> 00:05:10,720
popular ones that are used for ctfs

160
00:05:10,720 --> 00:05:11,919
right that just like enumerate

161
00:05:11,919 --> 00:05:14,320
everything really noisy uh things like

162
00:05:14,320 --> 00:05:16,080
patching uh passing the hash passing the

163
00:05:16,080 --> 00:05:17,600
ticket these are more intermediate

164
00:05:17,600 --> 00:05:19,120
concepts about lateral movement and

165
00:05:19,120 --> 00:05:21,440
stuff like that um doing things like

166
00:05:21,440 --> 00:05:23,600
non-default c2 profiles most people

167
00:05:23,600 --> 00:05:26,800
might use like empire or or uh well

168
00:05:26,800 --> 00:05:28,080
bishop fox is here right so it's like

169
00:05:28,080 --> 00:05:29,680
sliver or something like that and they

170
00:05:29,680 --> 00:05:31,199
may just use the default profile but you

171
00:05:31,199 --> 00:05:33,520
have to eventually learn how to

172
00:05:33,520 --> 00:05:35,120
blend in with your environment right and

173
00:05:35,120 --> 00:05:37,360
so as you start to grow you start to

174
00:05:37,360 --> 00:05:38,880
learn what you should and shouldn't do

175
00:05:38,880 --> 00:05:40,080
when it comes to

176
00:05:40,080 --> 00:05:41,840
using the tools that help supplement

177
00:05:41,840 --> 00:05:43,680
these sort of intermediate skills

178
00:05:43,680 --> 00:05:45,039
understanding source code is also very

179
00:05:45,039 --> 00:05:46,720
important even if you can't write code

180
00:05:46,720 --> 00:05:48,479
right it's very important that you

181
00:05:48,479 --> 00:05:50,960
are able to at least read and understand

182
00:05:50,960 --> 00:05:52,720
some concepts of what's going on if

183
00:05:52,720 --> 00:05:53,759
you're not completely familiar with the

184
00:05:53,759 --> 00:05:55,280
language i hate looking at c sharp

185
00:05:55,280 --> 00:05:56,319
there's so many people at microsoft

186
00:05:56,319 --> 00:05:58,000
writing.net i don't like it but i can

187
00:05:58,000 --> 00:05:59,520
still look through it right

188
00:05:59,520 --> 00:06:02,240
and sort of understand what's happening

189
00:06:02,240 --> 00:06:03,600
and then finally there's some basic

190
00:06:03,600 --> 00:06:04,800
exploitation right everybody was like

191
00:06:04,800 --> 00:06:08,400
but for overflows and ocp or or uh uh

192
00:06:08,400 --> 00:06:10,960
the uh the pen uh certified pen tester

193
00:06:10,960 --> 00:06:13,360
from from ine stuff like that

194
00:06:13,360 --> 00:06:15,520
then as we get more advanced

195
00:06:15,520 --> 00:06:17,840
uh there's more software exploitation we

196
00:06:17,840 --> 00:06:18,720
talk about

197
00:06:18,720 --> 00:06:21,680
binaries right

198
00:06:21,680 --> 00:06:23,440
breaking protocols and breaking

199
00:06:23,440 --> 00:06:25,840
cryptography there's some complex chains

200
00:06:25,840 --> 00:06:28,160
of attacks last year there was a lot of

201
00:06:28,160 --> 00:06:29,840
active directory certificate service

202
00:06:29,840 --> 00:06:31,600
attacks a lot of them and printer

203
00:06:31,600 --> 00:06:33,199
attacks

204
00:06:33,199 --> 00:06:34,400
all over the summer yeah i was making a

205
00:06:34,400 --> 00:06:35,919
lot of work for people i saw that behind

206
00:06:35,919 --> 00:06:37,680
the scenes and then like anything to do

207
00:06:37,680 --> 00:06:38,639
with kubernetes it's just really

208
00:06:38,639 --> 00:06:40,400
advanced so

209
00:06:40,400 --> 00:06:42,720
for offensive tools um

210
00:06:42,720 --> 00:06:44,319
debugging tools are typically not

211
00:06:44,319 --> 00:06:46,960
mentioned outside of exploit development

212
00:06:46,960 --> 00:06:48,880
you might see things like gdb

213
00:06:48,880 --> 00:06:51,280
or wind debug or ollie debug x64 all

214
00:06:51,280 --> 00:06:52,960
these debuggers and obviously compilers

215
00:06:52,960 --> 00:06:55,360
guidro whatever um they're typically

216
00:06:55,360 --> 00:06:57,280
talked about in the concepts of either

217
00:06:57,280 --> 00:06:58,960
reverse engineering malware analysis but

218
00:06:58,960 --> 00:07:00,960
from an offensive standpoint you know

219
00:07:00,960 --> 00:07:02,240
you talk about them outside of exploit

220
00:07:02,240 --> 00:07:03,759
development

221
00:07:03,759 --> 00:07:04,720
there are

222
00:07:04,720 --> 00:07:06,240
some tools that are

223
00:07:06,240 --> 00:07:07,919
made that are actually the results of

224
00:07:07,919 --> 00:07:09,599
the bugging work that people have done

225
00:07:09,599 --> 00:07:11,599
for example mimi cats right as an

226
00:07:11,599 --> 00:07:13,199
attacker we know we run mimi cats we get

227
00:07:13,199 --> 00:07:15,280
credits but the work that goes behind

228
00:07:15,280 --> 00:07:17,440
developing the functionality of mimikats

229
00:07:17,440 --> 00:07:19,919
involves that guy sitting and when debug

230
00:07:19,919 --> 00:07:22,720
and staring at uh assembly all day and

231
00:07:22,720 --> 00:07:24,960
and all sorts of function calls right

232
00:07:24,960 --> 00:07:27,360
and so there's even though we as

233
00:07:27,360 --> 00:07:28,960
consumers of these tools may just know

234
00:07:28,960 --> 00:07:30,479
point and click right there's a lot of

235
00:07:30,479 --> 00:07:32,080
work that goes behind

236
00:07:32,080 --> 00:07:33,280
developing these tools in the first

237
00:07:33,280 --> 00:07:35,520
place

238
00:07:36,000 --> 00:07:37,440
this also includes like any tool that

239
00:07:37,440 --> 00:07:39,120
involves hooking or injecting into

240
00:07:39,120 --> 00:07:41,280
processes right any time that you are

241
00:07:41,280 --> 00:07:42,400
using the tool right that means that

242
00:07:42,400 --> 00:07:44,479
someone had to go figure out how the

243
00:07:44,479 --> 00:07:46,240
the uh the

244
00:07:46,240 --> 00:07:48,160
particular process works right the calls

245
00:07:48,160 --> 00:07:50,080
that it makes and anything that involves

246
00:07:50,080 --> 00:07:51,520
that usually involves some sort of

247
00:07:51,520 --> 00:07:52,879
debugger

248
00:07:52,879 --> 00:07:54,800
or things like that

249
00:07:54,800 --> 00:07:57,199
so here's an example of

250
00:07:57,199 --> 00:07:59,840
mr gentle kiwi um working on me cast

251
00:07:59,840 --> 00:08:01,520
this is way back in 2015 right so he was

252
00:08:01,520 --> 00:08:03,360
deep and we went debug even back then as

253
00:08:03,360 --> 00:08:05,199
he was developing mimi cast and

254
00:08:05,199 --> 00:08:07,280
occasionally he'll uh he'll post like

255
00:08:07,280 --> 00:08:08,560
screenshots i couldn't find a more

256
00:08:08,560 --> 00:08:09,919
recent one but like he'll post

257
00:08:09,919 --> 00:08:12,319
screenshots of him and wind debug and

258
00:08:12,319 --> 00:08:15,120
working on new functionality

259
00:08:15,120 --> 00:08:16,400
so let's talk about

260
00:08:16,400 --> 00:08:19,680
net debugging specifically

261
00:08:19,680 --> 00:08:21,919
it's like a shadow effect anyway um so

262
00:08:21,919 --> 00:08:22,879
there's

263
00:08:22,879 --> 00:08:24,319
two main types of memory dumps right we

264
00:08:24,319 --> 00:08:26,319
have the user level versus the kernel

265
00:08:26,319 --> 00:08:28,560
level where the user level typically the

266
00:08:28,560 --> 00:08:30,240
processes versus the kernel level might

267
00:08:30,240 --> 00:08:31,759
involve the entire machine the types of

268
00:08:31,759 --> 00:08:32,799
things that you would probably find in

269
00:08:32,799 --> 00:08:34,799
like forensics right the whole memory

270
00:08:34,799 --> 00:08:37,360
dump of an entire computer

271
00:08:37,360 --> 00:08:39,440
but we're going to focus on dumps of a

272
00:08:39,440 --> 00:08:41,519
single process that are using.net

273
00:08:41,519 --> 00:08:44,800
managed assemblies so really any process

274
00:08:44,800 --> 00:08:47,040
that's been written with the dotnet

275
00:08:47,040 --> 00:08:50,399
framework or dotnetcore.net

276
00:08:50,399 --> 00:08:52,399
and there's definitely definitely a lot

277
00:08:52,399 --> 00:08:57,040
of ways to analyze net memory dumps

278
00:08:57,279 --> 00:08:59,200
so there are some tools

279
00:08:59,200 --> 00:09:01,279
but these tools that are for memory

280
00:09:01,279 --> 00:09:03,360
analysis are usually meant for engineers

281
00:09:03,360 --> 00:09:04,480
right they're meant to help them figure

282
00:09:04,480 --> 00:09:06,399
out what went wrong so like performance

283
00:09:06,399 --> 00:09:08,959
analyzers and and sort of tracing where

284
00:09:08,959 --> 00:09:10,160
where some of their code might have been

285
00:09:10,160 --> 00:09:12,320
faulty and it's usually sort of meant

286
00:09:12,320 --> 00:09:13,120
for

287
00:09:13,120 --> 00:09:15,600
dumps that are a result of a crash not

288
00:09:15,600 --> 00:09:17,519
an intentional dump of a process that

289
00:09:17,519 --> 00:09:19,200
you may have taken

290
00:09:19,200 --> 00:09:21,279
so you have things like wind debug with

291
00:09:21,279 --> 00:09:23,279
the sun of strike dll if you were to

292
00:09:23,279 --> 00:09:24,880
download windy bug nowadays you really

293
00:09:24,880 --> 00:09:25,839
don't have to worry about it if you get

294
00:09:25,839 --> 00:09:27,360
the new windy bug preview it actually

295
00:09:27,360 --> 00:09:29,120
comes with it but prior to that you had

296
00:09:29,120 --> 00:09:31,839
to go out and grab the dll

297
00:09:31,839 --> 00:09:34,959
in order to do the sort of

298
00:09:34,959 --> 00:09:38,640
analysis for net processes in windybug

299
00:09:38,640 --> 00:09:39,680
there's a story but i'm not gonna get

300
00:09:39,680 --> 00:09:40,880
into it it actually wasn't that

301
00:09:40,880 --> 00:09:41,839
interesting i don't know about that in a

302
00:09:41,839 --> 00:09:42,720
slide

303
00:09:42,720 --> 00:09:44,320
so this visual studio

304
00:09:44,320 --> 00:09:46,240
um and visual studio has a bunch of

305
00:09:46,240 --> 00:09:49,440
performance analysis analyzers

306
00:09:49,440 --> 00:09:50,880
to help

307
00:09:50,880 --> 00:09:53,120
technicians or engineers figure out what

308
00:09:53,120 --> 00:09:54,320
helped cause

309
00:09:54,320 --> 00:09:56,320
a crash of their process

310
00:09:56,320 --> 00:09:57,519
there's a whole blog post about it if

311
00:09:57,519 --> 00:09:58,959
you're interested on the devlogs on

312
00:09:58,959 --> 00:10:01,120
microsoft.com

313
00:10:01,120 --> 00:10:02,800
there are some new global tools that are

314
00:10:02,800 --> 00:10:04,720
written in net core

315
00:10:04,720 --> 00:10:06,880
and they're meant for net core 3.0 and

316
00:10:06,880 --> 00:10:08,640
up they're command line tools they're

317
00:10:08,640 --> 00:10:10,399
cross-platform so they work on windows

318
00:10:10,399 --> 00:10:12,079
and linux

319
00:10:12,079 --> 00:10:13,680
operating systems and

320
00:10:13,680 --> 00:10:15,120
and the other one

321
00:10:15,120 --> 00:10:17,440
mac os osx

322
00:10:17,440 --> 00:10:18,720
and they don't require any sort of

323
00:10:18,720 --> 00:10:21,440
native debugger in order to use them

324
00:10:21,440 --> 00:10:23,440
and finally there's a library which you

325
00:10:23,440 --> 00:10:25,920
can go check out on github called clrmd

326
00:10:25,920 --> 00:10:27,480
which is the

327
00:10:27,480 --> 00:10:30,000
microsoft.diagnostics.runtime namespace

328
00:10:30,000 --> 00:10:32,240
and this is a library that's used for

329
00:10:32,240 --> 00:10:34,959
introspection of net processes and dumps

330
00:10:34,959 --> 00:10:37,440
so that's live introspection so if a net

331
00:10:37,440 --> 00:10:38,880
process is running you can sort of use

332
00:10:38,880 --> 00:10:40,240
it as a debugger and build your own

333
00:10:40,240 --> 00:10:42,160
tools around that

334
00:10:42,160 --> 00:10:43,519
and it supports both the dotnet

335
00:10:43,519 --> 00:10:44,560
framework

336
00:10:44,560 --> 00:10:47,600
and net core

337
00:10:47,600 --> 00:10:48,720
so there's some commands that are

338
00:10:48,720 --> 00:10:49,760
similar regardless of whether you're

339
00:10:49,760 --> 00:10:51,920
using dotnet i'm sorry uh windybug or

340
00:10:51,920 --> 00:10:53,440
the.net tools

341
00:10:53,440 --> 00:10:55,600
one of them is dump heap and dump heap

342
00:10:55,600 --> 00:10:58,399
will display information about objects

343
00:10:58,399 --> 00:11:00,800
that have been garbage collected

344
00:11:00,800 --> 00:11:02,560
and some statistics about those objects

345
00:11:02,560 --> 00:11:04,240
as well

346
00:11:04,240 --> 00:11:06,399
then we have the dump method table which

347
00:11:06,399 --> 00:11:08,160
displays information about the method

348
00:11:08,160 --> 00:11:09,440
table at the address and the method

349
00:11:09,440 --> 00:11:12,560
table is sort of how a is think of it

350
00:11:12,560 --> 00:11:14,480
sort of a schema for like a class right

351
00:11:14,480 --> 00:11:17,279
you create a class in in any language

352
00:11:17,279 --> 00:11:19,680
um or and you have a scheme of what the

353
00:11:19,680 --> 00:11:21,200
attributes and the properties are and

354
00:11:21,200 --> 00:11:22,720
all that stuff like that so we can set

355
00:11:22,720 --> 00:11:24,640
that to be the method table

356
00:11:24,640 --> 00:11:26,560
then we have dump objects which dumps

357
00:11:26,560 --> 00:11:28,240
the actual object

358
00:11:28,240 --> 00:11:30,399
so which is an instance of that method

359
00:11:30,399 --> 00:11:32,720
table

360
00:11:33,040 --> 00:11:35,440
and then gc root which we're not going

361
00:11:35,440 --> 00:11:37,440
to get into today but it displays

362
00:11:37,440 --> 00:11:38,880
information about references to the

363
00:11:38,880 --> 00:11:40,079
object so

364
00:11:40,079 --> 00:11:42,399
if i have some sort of like system dot

365
00:11:42,399 --> 00:11:45,519
string right um object i can see

366
00:11:45,519 --> 00:11:48,399
what objects are pointing to this string

367
00:11:48,399 --> 00:11:50,240
um it's what i was told i've never

368
00:11:50,240 --> 00:11:51,839
actually run it myself but also that

369
00:11:51,839 --> 00:11:53,440
it's really expensive because now you're

370
00:11:53,440 --> 00:11:56,000
asking the uh executable i'm sorry

371
00:11:56,000 --> 00:11:57,680
you're asking the dump

372
00:11:57,680 --> 00:11:59,360
everything that points to me please tell

373
00:11:59,360 --> 00:12:00,880
me what that is and when you have like

374
00:12:00,880 --> 00:12:02,800
large memory dumps like 16

375
00:12:02,800 --> 00:12:04,880
20 gigabytes like it could be a lot of

376
00:12:04,880 --> 00:12:06,560
processing

377
00:12:06,560 --> 00:12:08,639
so you might want to use that sparingly

378
00:12:08,639 --> 00:12:11,120
there's some decompilers

379
00:12:11,120 --> 00:12:12,959
which are the tools to really just

380
00:12:12,959 --> 00:12:14,880
decompile the dot-net assemblies back to

381
00:12:14,880 --> 00:12:16,320
source code

382
00:12:16,320 --> 00:12:18,000
there's il spy which is a little older

383
00:12:18,000 --> 00:12:19,600
but it still works there's a vs code

384
00:12:19,600 --> 00:12:22,000
extension for it if you happen to have

385
00:12:22,000 --> 00:12:24,000
managed libraries in your folder you can

386
00:12:24,000 --> 00:12:25,440
just sort of decompile it right there in

387
00:12:25,440 --> 00:12:27,120
vs code

388
00:12:27,120 --> 00:12:28,639
there's visual studio of course you can

389
00:12:28,639 --> 00:12:29,680
do that

390
00:12:29,680 --> 00:12:32,639
the one i prefer uh is dot peek

391
00:12:32,639 --> 00:12:35,120
from jetbrains it's really easy to use

392
00:12:35,120 --> 00:12:36,880
and it also interfaces with visual

393
00:12:36,880 --> 00:12:38,959
studio if that's what you you know if

394
00:12:38,959 --> 00:12:41,920
that's the environment that you like

395
00:12:41,920 --> 00:12:43,519
so we're going to show you what

396
00:12:43,519 --> 00:12:45,680
decompiling a

397
00:12:45,680 --> 00:12:47,839
net

398
00:12:47,839 --> 00:12:51,639
assembly looks like

399
00:12:52,240 --> 00:12:53,680
that is windy bug

400
00:12:53,680 --> 00:12:56,480
so here i have uh dot peak open and i

401
00:12:56,480 --> 00:12:57,360
know the

402
00:12:57,360 --> 00:12:58,720
column on the left is pretty small but

403
00:12:58,720 --> 00:13:00,720
we're not so much interested in that i'm

404
00:13:00,720 --> 00:13:03,360
just going to open up this executable

405
00:13:03,360 --> 00:13:05,839
that i have sitting around here and it's

406
00:13:05,839 --> 00:13:08,079
called key vault pie.exe we're just

407
00:13:08,079 --> 00:13:09,680
going to call it keyboardmanager.exe

408
00:13:09,680 --> 00:13:11,200
it's just misnamed

409
00:13:11,200 --> 00:13:14,000
and i open it up

410
00:13:14,480 --> 00:13:16,000
and then on the left side let me see if

411
00:13:16,000 --> 00:13:18,880
i can zoom in just a little bit

412
00:13:18,880 --> 00:13:21,200
yeah there we go um we can see things

413
00:13:21,200 --> 00:13:22,720
like it pulls the metadata from this

414
00:13:22,720 --> 00:13:23,920
assembly

415
00:13:23,920 --> 00:13:26,480
uh pulls the resources that are involved

416
00:13:26,480 --> 00:13:29,120
um the references so what

417
00:13:29,120 --> 00:13:31,360
dll what.net or i'm sorry what managed

418
00:13:31,360 --> 00:13:32,839
assemblies does this

419
00:13:32,839 --> 00:13:34,560
uh

420
00:13:34,560 --> 00:13:37,040
program reference right so azure core

421
00:13:37,040 --> 00:13:39,040
azure identity uh we see a couple

422
00:13:39,040 --> 00:13:40,800
interesting things in here right so i

423
00:13:40,800 --> 00:13:42,079
know that

424
00:13:42,079 --> 00:13:43,360
i can just tell from looking at this

425
00:13:43,360 --> 00:13:44,720
between azure identity and azure

426
00:13:44,720 --> 00:13:46,880
security key vault secrets that there is

427
00:13:46,880 --> 00:13:49,360
some identity that is being used

428
00:13:49,360 --> 00:13:51,279
probably to retrieve a secret or set a

429
00:13:51,279 --> 00:13:52,959
secret right either way it's an identity

430
00:13:52,959 --> 00:13:54,480
that has access to a key vault most

431
00:13:54,480 --> 00:13:56,160
likely just common sense

432
00:13:56,160 --> 00:13:57,279
and there's a couple of other things in

433
00:13:57,279 --> 00:14:00,079
here too right uh the security

434
00:14:00,079 --> 00:14:01,680
cryptography algorithms one is pretty

435
00:14:01,680 --> 00:14:03,360
interesting to me uh

436
00:14:03,360 --> 00:14:04,399
just because that means that something

437
00:14:04,399 --> 00:14:06,800
is being encrypted at some point in time

438
00:14:06,800 --> 00:14:08,800
and then as we keep going

439
00:14:08,800 --> 00:14:10,560
further down

440
00:14:10,560 --> 00:14:12,000
let me make sure i use the right yeah i

441
00:14:12,000 --> 00:14:14,000
use the right keyboard all right um

442
00:14:14,000 --> 00:14:15,600
we can actually pull out the source code

443
00:14:15,600 --> 00:14:17,680
and we can see that this

444
00:14:17,680 --> 00:14:20,240
particular

445
00:14:20,240 --> 00:14:22,399
library has two i'm sorry this

446
00:14:22,399 --> 00:14:23,279
particular

447
00:14:23,279 --> 00:14:26,000
program has two major functions right it

448
00:14:26,000 --> 00:14:27,519
has its main

449
00:14:27,519 --> 00:14:28,839
and then it has

450
00:14:28,839 --> 00:14:32,320
a function called decrypt so here's the

451
00:14:32,320 --> 00:14:33,680
main

452
00:14:33,680 --> 00:14:36,319
and i'm going to

453
00:14:36,880 --> 00:14:39,760
just zoom in here

454
00:14:42,639 --> 00:14:45,360
there we go

455
00:14:45,360 --> 00:14:49,199
and sure enough right uh this

456
00:14:49,199 --> 00:14:50,959
main reaches out to a key vault and

457
00:14:50,959 --> 00:14:53,120
actually first it reads a key um from

458
00:14:53,120 --> 00:14:55,120
some key on disk and for the purposes of

459
00:14:55,120 --> 00:14:56,720
the demo and the rest of this talk uh

460
00:14:56,720 --> 00:14:57,920
this we're going to pretend like this

461
00:14:57,920 --> 00:15:00,000
key is coming is not on disk right we're

462
00:15:00,000 --> 00:15:01,040
going to pretend like it's coming from

463
00:15:01,040 --> 00:15:02,560
somewhere else uh just sort of just

464
00:15:02,560 --> 00:15:04,079
trivializes demo

465
00:15:04,079 --> 00:15:06,160
um it reads this key

466
00:15:06,160 --> 00:15:07,920
and then it reaches out to a key vault

467
00:15:07,920 --> 00:15:09,440
and it gets all the secrets in the key

468
00:15:09,440 --> 00:15:10,320
vault

469
00:15:10,320 --> 00:15:13,760
and then it decrypts the secret here's a

470
00:15:13,760 --> 00:15:15,760
comment with the format of what the

471
00:15:15,760 --> 00:15:19,440
secret looks like so there is a message

472
00:15:19,440 --> 00:15:21,519
which will assume to be the value

473
00:15:21,519 --> 00:15:23,680
there is a nonce which is used for

474
00:15:23,680 --> 00:15:25,279
one-time encryption so you should only

475
00:15:25,279 --> 00:15:26,920
be using your nonsense

476
00:15:26,920 --> 00:15:29,519
nonsenses once

477
00:15:29,519 --> 00:15:31,440
and then there's a tag which tells me

478
00:15:31,440 --> 00:15:33,680
that before i even go any further um and

479
00:15:33,680 --> 00:15:35,279
even though i i guess i kind of already

480
00:15:35,279 --> 00:15:37,040
know

481
00:15:37,040 --> 00:15:38,720
the combination of these three suggests

482
00:15:38,720 --> 00:15:41,040
that it's an aes encryption right which

483
00:15:41,040 --> 00:15:42,800
sort of is backed up by the fact that we

484
00:15:42,800 --> 00:15:43,759
saw

485
00:15:43,759 --> 00:15:44,560
this

486
00:15:44,560 --> 00:15:46,320
system security cryptography algorithms

487
00:15:46,320 --> 00:15:48,320
right so we can assume that whatever is

488
00:15:48,320 --> 00:15:50,079
being encrypted or decrypted is coming

489
00:15:50,079 --> 00:15:53,120
out of that particular name space

490
00:15:53,120 --> 00:15:55,120
and if we sure enough if we look up i

491
00:15:55,120 --> 00:15:56,160
guess generally you would start at the

492
00:15:56,160 --> 00:15:57,199
beginning of the script and not at the

493
00:15:57,199 --> 00:15:58,320
bottom

494
00:15:58,320 --> 00:15:59,199
but

495
00:15:59,199 --> 00:16:00,800
if we go up here we can see that there

496
00:16:00,800 --> 00:16:04,560
is a call to asgcm

497
00:16:04,560 --> 00:16:07,199
and it is taking the secret that we pull

498
00:16:07,199 --> 00:16:08,959
from the key vault

499
00:16:08,959 --> 00:16:11,199
um

500
00:16:11,519 --> 00:16:13,839
decoding it from base64

501
00:16:13,839 --> 00:16:16,240
and then decrypting it with the gcm

502
00:16:16,240 --> 00:16:18,240
algorithm right so there's a couple

503
00:16:18,240 --> 00:16:19,360
things that we know so we know that

504
00:16:19,360 --> 00:16:21,360
every secret has this format right based

505
00:16:21,360 --> 00:16:23,759
on the comment and based on just how the

506
00:16:23,759 --> 00:16:25,759
decryption function works

507
00:16:25,759 --> 00:16:26,800
uh

508
00:16:26,800 --> 00:16:30,000
we know that there is a key that is read

509
00:16:30,000 --> 00:16:32,240
in to this program in order to decrypt

510
00:16:32,240 --> 00:16:34,839
it but we don't know what the key is

511
00:16:34,839 --> 00:16:38,240
and we know that all it does is just

512
00:16:38,240 --> 00:16:41,120
prints out the uh

513
00:16:41,360 --> 00:16:43,040
the results of the secret being

514
00:16:43,040 --> 00:16:45,519
decrypted

515
00:16:49,759 --> 00:16:51,519
so let's talk about analyzing a dump of

516
00:16:51,519 --> 00:16:53,680
this process

517
00:16:53,680 --> 00:16:55,120
but first we're going to go off topic

518
00:16:55,120 --> 00:16:57,759
again so a couple weeks ago only less

519
00:16:57,759 --> 00:17:00,160
than a week before black history month

520
00:17:00,160 --> 00:17:02,000
buzzfeed decided to say that beyonce was

521
00:17:02,000 --> 00:17:04,640
hard holding a hard drive she was not

522
00:17:04,640 --> 00:17:06,640
holding a hard drive there's an rca port

523
00:17:06,640 --> 00:17:08,079
on the back of this

524
00:17:08,079 --> 00:17:10,319
right uh

525
00:17:10,319 --> 00:17:12,079
and it just turned out to be like an mp3

526
00:17:12,079 --> 00:17:13,359
player this has nothing to do with the

527
00:17:13,359 --> 00:17:15,439
topic again it's just really off topic i

528
00:17:15,439 --> 00:17:16,720
just thought it was funny because that's

529
00:17:16,720 --> 00:17:18,480
clearly not a hard drive

530
00:17:18,480 --> 00:17:19,359
anyway

531
00:17:19,359 --> 00:17:20,959
so we're talking about attacking a dump

532
00:17:20,959 --> 00:17:22,480
we don't care about things like the

533
00:17:22,480 --> 00:17:24,000
threads counters and performances right

534
00:17:24,000 --> 00:17:25,199
we don't

535
00:17:25,199 --> 00:17:27,119
i don't care how performant your

536
00:17:27,119 --> 00:17:28,559
your process is i want to know what the

537
00:17:28,559 --> 00:17:30,400
secrets are in your process

538
00:17:30,400 --> 00:17:31,360
you want those secrets and their

539
00:17:31,360 --> 00:17:34,000
credentials if they're already right

540
00:17:34,000 --> 00:17:35,520
the cloud services are really good for

541
00:17:35,520 --> 00:17:37,200
this type of information because when

542
00:17:37,200 --> 00:17:38,240
you have things like serverless

543
00:17:38,240 --> 00:17:39,840
technologies right all it is it's just

544
00:17:39,840 --> 00:17:41,120
somebody uploading their code to the

545
00:17:41,120 --> 00:17:43,360
cloud it executes and in the case of

546
00:17:43,360 --> 00:17:45,200
maybe like a web app or something if it

547
00:17:45,200 --> 00:17:47,360
is exploitable and an attacker gains

548
00:17:47,360 --> 00:17:49,360
access

549
00:17:49,360 --> 00:17:52,879
you're typically not going to find

550
00:17:53,039 --> 00:17:54,400
the normal sort of things you may find

551
00:17:54,400 --> 00:17:55,840
like managed identities right an

552
00:17:55,840 --> 00:17:57,600
identity that represents that object in

553
00:17:57,600 --> 00:18:00,080
the cloud you may find references to

554
00:18:00,080 --> 00:18:02,559
databases whatever the backend thing is

555
00:18:02,559 --> 00:18:03,520
it's a little different you're not going

556
00:18:03,520 --> 00:18:06,640
to go as in-depth on your um

557
00:18:06,640 --> 00:18:08,720
your post-exploitation as you would on

558
00:18:08,720 --> 00:18:10,320
on-premises right not

559
00:18:10,320 --> 00:18:11,280
the way that you look for lateral

560
00:18:11,280 --> 00:18:12,320
movement in the cloud is different than

561
00:18:12,320 --> 00:18:13,760
the way that you look for it on premises

562
00:18:13,760 --> 00:18:15,760
i guess that's what i'm getting at

563
00:18:15,760 --> 00:18:17,760
but we can still find some goodies on

564
00:18:17,760 --> 00:18:20,880
workstations and servers and these are

565
00:18:20,880 --> 00:18:22,960
user workstations and

566
00:18:22,960 --> 00:18:26,559
on-premises service and net processes

567
00:18:26,559 --> 00:18:28,480
sometimes live memory analysis is

568
00:18:28,480 --> 00:18:29,600
preferred

569
00:18:29,600 --> 00:18:31,039
but it's not always possible there are

570
00:18:31,039 --> 00:18:33,440
some situations and i've we've had two

571
00:18:33,440 --> 00:18:35,200
on our team in the last year

572
00:18:35,200 --> 00:18:36,640
where live memory analysis was not

573
00:18:36,640 --> 00:18:38,320
possible but we found some dumps we were

574
00:18:38,320 --> 00:18:39,840
able to analyze

575
00:18:39,840 --> 00:18:41,600
and tools like kefi if you're familiar

576
00:18:41,600 --> 00:18:43,120
with that that comes from i believe

577
00:18:43,120 --> 00:18:44,320
spectre ops

578
00:18:44,320 --> 00:18:46,320
and what it does is that it uses clrmd

579
00:18:46,320 --> 00:18:47,520
which we talked about is that c sharp

580
00:18:47,520 --> 00:18:51,440
library to inject into a keepass process

581
00:18:51,440 --> 00:18:55,120
and then force the decryption of secrets

582
00:18:55,120 --> 00:18:56,799
whether or not the user you know is

583
00:18:56,799 --> 00:18:58,320
trying to do it so

584
00:18:58,320 --> 00:18:59,600
um

585
00:18:59,600 --> 00:19:01,200
you can attack a process live but we're

586
00:19:01,200 --> 00:19:03,600
gonna talk about just attacking um or

587
00:19:03,600 --> 00:19:05,760
looking through dumps themselves there's

588
00:19:05,760 --> 00:19:07,200
a lot of other tools like that like like

589
00:19:07,200 --> 00:19:09,440
keepass that do that

590
00:19:09,440 --> 00:19:11,919
so why were you using strings or grep

591
00:19:11,919 --> 00:19:13,840
well tools like strings and grep they

592
00:19:13,840 --> 00:19:14,960
look for

593
00:19:14,960 --> 00:19:17,280
strings of defined lengths and

594
00:19:17,280 --> 00:19:18,559
endianness

595
00:19:18,559 --> 00:19:20,000
if the strings are defined in the source

596
00:19:20,000 --> 00:19:22,480
code you might see them in the dump

597
00:19:22,480 --> 00:19:24,240
but

598
00:19:24,240 --> 00:19:26,080
in c sharp strings are like this weird

599
00:19:26,080 --> 00:19:29,600
mix of managed code and unmanaged code

600
00:19:29,600 --> 00:19:32,240
so a system.string object is a net

601
00:19:32,240 --> 00:19:34,480
object but underneath it's still calling

602
00:19:34,480 --> 00:19:36,720
no the c objects that are behind it to

603
00:19:36,720 --> 00:19:38,480
be uh

604
00:19:38,480 --> 00:19:40,160
and those are represented as unmanaged

605
00:19:40,160 --> 00:19:41,039
code

606
00:19:41,039 --> 00:19:43,760
managed objects are structured right and

607
00:19:43,760 --> 00:19:44,720
strings

608
00:19:44,720 --> 00:19:46,080
the command strings it's not really

609
00:19:46,080 --> 00:19:47,600
meant to understand structured objects

610
00:19:47,600 --> 00:19:49,440
right it just looks for plain text

611
00:19:49,440 --> 00:19:50,320
strings

612
00:19:50,320 --> 00:19:52,160
so in a large dump how do you really

613
00:19:52,160 --> 00:19:53,679
know what's relevant

614
00:19:53,679 --> 00:19:55,280
to the other objects that you're looking

615
00:19:55,280 --> 00:19:56,880
for if you're talking about like you

616
00:19:56,880 --> 00:19:58,480
know again like

617
00:19:58,480 --> 00:20:00,960
20 gigabyte dumps like looking through

618
00:20:00,960 --> 00:20:02,240
strings isn't really going to tell you

619
00:20:02,240 --> 00:20:03,600
much you might find things in there you

620
00:20:03,600 --> 00:20:05,440
might get lucky

621
00:20:05,440 --> 00:20:06,799
and you might find like big blobs of

622
00:20:06,799 --> 00:20:08,240
strings maybe like access tokens those

623
00:20:08,240 --> 00:20:10,240
are pretty noticeable but

624
00:20:10,240 --> 00:20:11,840
you generally want to

625
00:20:11,840 --> 00:20:13,360
use the tool that is most appropriate

626
00:20:13,360 --> 00:20:15,039
for the job

627
00:20:15,039 --> 00:20:16,960
some of the things that you can't see

628
00:20:16,960 --> 00:20:18,880
are secrets that are just straight up

629
00:20:18,880 --> 00:20:20,799
bytes so for example aes keys are

630
00:20:20,799 --> 00:20:22,640
typically symmetric aes keys are

631
00:20:22,640 --> 00:20:24,480
typically just a string of random bytes

632
00:20:24,480 --> 00:20:25,840
you're not going to see that in a

633
00:20:25,840 --> 00:20:28,799
strings or graph command

634
00:20:29,360 --> 00:20:31,039
so we're going to go over two scenarios

635
00:20:31,039 --> 00:20:32,559
one is this key vault manager we're

636
00:20:32,559 --> 00:20:33,840
going to look through a dump of this key

637
00:20:33,840 --> 00:20:35,600
vault manager

638
00:20:35,600 --> 00:20:36,880
and as we mentioned all it does is

639
00:20:36,880 --> 00:20:38,240
retrieve secrets from the key vault it

640
00:20:38,240 --> 00:20:39,360
decrypts them and we're going to say

641
00:20:39,360 --> 00:20:41,039
that we found a dump of this program

642
00:20:41,039 --> 00:20:42,960
somewhere

643
00:20:42,960 --> 00:20:44,559
the other scenario we're going to go

644
00:20:44,559 --> 00:20:46,720
through is

645
00:20:46,720 --> 00:20:48,960
we've

646
00:20:48,960 --> 00:20:52,400
uh we found our our way to a host where

647
00:20:52,400 --> 00:20:54,080
a user is logged in

648
00:20:54,080 --> 00:20:55,840
and we took a dump of their powershell

649
00:20:55,840 --> 00:20:57,840
session why because powershell is a net

650
00:20:57,840 --> 00:20:59,360
process right it's written on the dotnet

651
00:20:59,360 --> 00:21:01,440
framework and so we can analyze it the

652
00:21:01,440 --> 00:21:04,240
same way that we analyze any other

653
00:21:04,240 --> 00:21:06,880
net process

654
00:21:10,880 --> 00:21:12,559
wow i'll just jump to the end of my

655
00:21:12,559 --> 00:21:16,520
slides well anyway

656
00:21:16,559 --> 00:21:18,320
so here we have the new windy bug if you

657
00:21:18,320 --> 00:21:20,640
haven't seen it it's a lot

658
00:21:20,640 --> 00:21:21,760
more

659
00:21:21,760 --> 00:21:24,320
user-friendly looking than the previous

660
00:21:24,320 --> 00:21:26,480
windy bug that's just my opinion

661
00:21:26,480 --> 00:21:28,720
and i'm going to open up this

662
00:21:28,720 --> 00:21:32,480
uh this key vault dump here

663
00:21:32,480 --> 00:21:35,520
zoom in as much as possible

664
00:21:36,320 --> 00:21:38,480
so the first thing i want to do is

665
00:21:38,480 --> 00:21:40,000
um and i may not have to do it here but

666
00:21:40,000 --> 00:21:41,360
i'm just going to show it anyway

667
00:21:41,360 --> 00:21:43,840
is that when you load this dump you may

668
00:21:43,840 --> 00:21:46,159
actually have to run this command

669
00:21:46,159 --> 00:21:47,600
analyze v

670
00:21:47,600 --> 00:21:48,799
and the reason you have to do that is

671
00:21:48,799 --> 00:21:50,240
because

672
00:21:50,240 --> 00:21:51,840
when debug needs to reach out to the

673
00:21:51,840 --> 00:21:53,520
microsoft symbol server and pull out all

674
00:21:53,520 --> 00:21:55,840
the relevant symbols debugging symbols

675
00:21:55,840 --> 00:21:57,200
that it can find that are in this

676
00:21:57,200 --> 00:22:00,159
process and sort of just pull them down

677
00:22:00,159 --> 00:22:01,600
from the server and

678
00:22:01,600 --> 00:22:02,400
and

679
00:22:02,400 --> 00:22:04,960
help you analyze right if you don't have

680
00:22:04,960 --> 00:22:05,679
the

681
00:22:05,679 --> 00:22:07,679
debugging symbols you're going to find

682
00:22:07,679 --> 00:22:10,240
yourself and

683
00:22:10,240 --> 00:22:11,039
you're going to find yourself doing a

684
00:22:11,039 --> 00:22:14,000
lot more work right uh when you compile

685
00:22:14,000 --> 00:22:15,600
a binary like.net it always has like

686
00:22:15,600 --> 00:22:17,760
that dot pdb file right those are the

687
00:22:17,760 --> 00:22:18,880
types of files you want for your

688
00:22:18,880 --> 00:22:20,400
debuggers

689
00:22:20,400 --> 00:22:22,320
and so it just went through analyze the

690
00:22:22,320 --> 00:22:23,600
whole thing and now i can run some

691
00:22:23,600 --> 00:22:25,039
commands so the first thing i want to

692
00:22:25,039 --> 00:22:26,400
know is

693
00:22:26,400 --> 00:22:28,080
when this dump was taken

694
00:22:28,080 --> 00:22:29,840
what was on the heap

695
00:22:29,840 --> 00:22:31,360
and we can run this command and sorry

696
00:22:31,360 --> 00:22:32,960
it's all way at the bottom

697
00:22:32,960 --> 00:22:37,039
but can i spit it no i can't

698
00:22:37,039 --> 00:22:39,600
one second

699
00:22:39,840 --> 00:22:40,960
all right nevermind all right so we're

700
00:22:40,960 --> 00:22:42,880
going to say dump heap

701
00:22:42,880 --> 00:22:44,080
and

702
00:22:44,080 --> 00:22:44,960
um

703
00:22:44,960 --> 00:22:46,480
i want to know give me the statistics i

704
00:22:46,480 --> 00:22:47,520
don't want to know everything just give

705
00:22:47,520 --> 00:22:49,840
me the statistics and that gives you

706
00:22:49,840 --> 00:22:51,280
the type of objects that are sitting on

707
00:22:51,280 --> 00:22:53,039
the heap

708
00:22:53,039 --> 00:22:55,760
as well as accounts of all of them

709
00:22:55,760 --> 00:22:57,760
so here there's

710
00:22:57,760 --> 00:22:59,760
uh

711
00:22:59,760 --> 00:23:01,760
i lost my cursing there we go uh here

712
00:23:01,760 --> 00:23:02,919
there's

713
00:23:02,919 --> 00:23:05,840
2115 system.strings

714
00:23:05,840 --> 00:23:08,640
i can see that there's 391 azure

715
00:23:08,640 --> 00:23:10,000
security key vault secret secret

716
00:23:10,000 --> 00:23:11,840
property objects in here

717
00:23:11,840 --> 00:23:12,799
right

718
00:23:12,799 --> 00:23:14,960
and this tells me that okay at the time

719
00:23:14,960 --> 00:23:16,159
this number's taken there's at least

720
00:23:16,159 --> 00:23:17,840
this many objects in there and so we can

721
00:23:17,840 --> 00:23:20,000
go inspect those objects and see what

722
00:23:20,000 --> 00:23:22,480
they contain

723
00:23:22,480 --> 00:23:24,640
you can also do a filter because now i

724
00:23:24,640 --> 00:23:26,400
know that there is azure related stuff

725
00:23:26,400 --> 00:23:28,799
in here so i'm going to type i'm looking

726
00:23:28,799 --> 00:23:30,480
for this type

727
00:23:30,480 --> 00:23:32,720
and this type takes a string which is

728
00:23:32,720 --> 00:23:34,559
gives you all

729
00:23:34,559 --> 00:23:36,159
objects that are that have this

730
00:23:36,159 --> 00:23:37,919
substring in them so if i do azure it's

731
00:23:37,919 --> 00:23:40,159
just going to give me every object type

732
00:23:40,159 --> 00:23:42,240
that has azure in it right and this

733
00:23:42,240 --> 00:23:44,000
works of course for any i'm i work at

734
00:23:44,000 --> 00:23:46,080
microsoft so like i'm using azure but

735
00:23:46,080 --> 00:23:47,840
this is the aws gcp whatever it doesn't

736
00:23:47,840 --> 00:23:50,320
really matter uh you can use you can

737
00:23:50,320 --> 00:23:52,720
search for any type you can look for

738
00:23:52,720 --> 00:23:55,200
things that are in the um the framework

739
00:23:55,200 --> 00:23:56,880
itself right so i can look for system

740
00:23:56,880 --> 00:23:58,159
it'll pull back everything that has

741
00:23:58,159 --> 00:23:59,600
system in it

742
00:23:59,600 --> 00:24:01,360
and so as i'm looking through

743
00:24:01,360 --> 00:24:03,360
i'm curious about a lot of things

744
00:24:03,360 --> 00:24:05,520
uh we're in this scenario we're

745
00:24:05,520 --> 00:24:06,720
pretending like we didn't see the source

746
00:24:06,720 --> 00:24:08,320
code right we only found the dump so we

747
00:24:08,320 --> 00:24:10,000
don't really know what the program is

748
00:24:10,000 --> 00:24:11,679
doing even though we know what the

749
00:24:11,679 --> 00:24:12,960
program is doing

750
00:24:12,960 --> 00:24:14,080
and i'm going to look through and i'm

751
00:24:14,080 --> 00:24:15,760
going to try to find interesting things

752
00:24:15,760 --> 00:24:17,919
like for example here is an azure

753
00:24:17,919 --> 00:24:20,240
identity azure cli credential that's

754
00:24:20,240 --> 00:24:22,400
interesting to me because this means

755
00:24:22,400 --> 00:24:24,159
that this object in memory was holding

756
00:24:24,159 --> 00:24:25,279
the credential that was used to

757
00:24:25,279 --> 00:24:28,080
authenticate to the key vault

758
00:24:28,080 --> 00:24:29,360
and so

759
00:24:29,360 --> 00:24:31,120
on this left side here

760
00:24:31,120 --> 00:24:32,720
is the method table we talked about

761
00:24:32,720 --> 00:24:35,120
right the method table is the schema for

762
00:24:35,120 --> 00:24:36,880
the object and it's saying that the

763
00:24:36,880 --> 00:24:39,520
method table for this cli credential

764
00:24:39,520 --> 00:24:41,919
is right here before we go on we're

765
00:24:41,919 --> 00:24:44,080
going to keep looking for other things

766
00:24:44,080 --> 00:24:47,840
and we're going to see things like

767
00:24:52,080 --> 00:24:54,000
i can't find it so let me

768
00:24:54,000 --> 00:24:57,039
do the proper search

769
00:24:58,840 --> 00:25:02,559
secret we go the 191

770
00:25:02,559 --> 00:25:04,240
key vault secrets right

771
00:25:04,240 --> 00:25:05,760
so these are all representations of the

772
00:25:05,760 --> 00:25:08,159
actual secrets as they're seen by net so

773
00:25:08,159 --> 00:25:09,279
there's two things that we're already

774
00:25:09,279 --> 00:25:11,120
interested in that's the credential

775
00:25:11,120 --> 00:25:12,240
and that's the secret so we're going to

776
00:25:12,240 --> 00:25:13,679
start with

777
00:25:13,679 --> 00:25:16,159
the secret because it's smaller and

778
00:25:16,159 --> 00:25:18,240
easier to go over so if i click on here

779
00:25:18,240 --> 00:25:19,600
because the new dot

780
00:25:19,600 --> 00:25:21,279
i'm sorry well when debug just sort of

781
00:25:21,279 --> 00:25:23,039
lets you click your way through a lot of

782
00:25:23,039 --> 00:25:24,080
things

783
00:25:24,080 --> 00:25:26,080
you can pull this this method table for

784
00:25:26,080 --> 00:25:28,400
this key vault secret

785
00:25:28,400 --> 00:25:30,960
and what it gives you is every instance

786
00:25:30,960 --> 00:25:32,640
of the key vault secret

787
00:25:32,640 --> 00:25:34,799
and the address that it lives at so all

788
00:25:34,799 --> 00:25:36,640
these right here on the left hand side

789
00:25:36,640 --> 00:25:37,919
are addresses

790
00:25:37,919 --> 00:25:39,200
and the right are all the method tables

791
00:25:39,200 --> 00:25:41,520
which is why they're all the same

792
00:25:41,520 --> 00:25:43,039
and really we can pick any one of these

793
00:25:43,039 --> 00:25:44,799
and it's going to take us to a it's

794
00:25:44,799 --> 00:25:46,080
going to take us to

795
00:25:46,080 --> 00:25:46,799
the

796
00:25:46,799 --> 00:25:49,520
instance of that object

797
00:25:49,520 --> 00:25:51,120
also when you're clicking on things

798
00:25:51,120 --> 00:25:52,240
there are commands that are running

799
00:25:52,240 --> 00:25:54,240
behind the scenes right so like if i

800
00:25:54,240 --> 00:25:55,679
click on this it's actually running dump

801
00:25:55,679 --> 00:25:57,120
object

802
00:25:57,120 --> 00:25:58,799
and giving it the address of whatever it

803
00:25:58,799 --> 00:26:01,520
is that i click on

804
00:26:01,919 --> 00:26:03,919
so we're gonna pick a random one

805
00:26:03,919 --> 00:26:06,080
and

806
00:26:06,080 --> 00:26:06,960
this

807
00:26:06,960 --> 00:26:08,840
one of the random secrets right it has a

808
00:26:08,840 --> 00:26:11,360
properties uh value it has a properties

809
00:26:11,360 --> 00:26:12,240
field

810
00:26:12,240 --> 00:26:14,400
and it has a values field

811
00:26:14,400 --> 00:26:16,799
well right after that i i know that if

812
00:26:16,799 --> 00:26:18,559
i'm writing in.net

813
00:26:18,559 --> 00:26:21,039
and i want to pull the value of a secret

814
00:26:21,039 --> 00:26:22,720
that i've pulled like from a keyboard

815
00:26:22,720 --> 00:26:24,880
well then i call like secret.value right

816
00:26:24,880 --> 00:26:27,039
so i'm interested in and what this value

817
00:26:27,039 --> 00:26:28,320
is and right off the bat if you click

818
00:26:28,320 --> 00:26:29,679
this

819
00:26:29,679 --> 00:26:31,679
we get the actual secret that was

820
00:26:31,679 --> 00:26:33,200
contained

821
00:26:33,200 --> 00:26:36,720
that was pulled from this uh

822
00:26:36,720 --> 00:26:38,159
this dump right that was pulled from the

823
00:26:38,159 --> 00:26:39,679
key vault right at the time i don't know

824
00:26:39,679 --> 00:26:41,360
what secret this is i know i have the

825
00:26:41,360 --> 00:26:44,080
value now right and that is the message

826
00:26:44,080 --> 00:26:46,640
which is that base64 encoding the nonce

827
00:26:46,640 --> 00:26:48,320
and the tag which is basically what we

828
00:26:48,320 --> 00:26:50,559
saw in the uh the comet in the source

829
00:26:50,559 --> 00:26:52,320
code earlier

830
00:26:52,320 --> 00:26:55,360
i can go through the properties

831
00:26:55,360 --> 00:26:56,960
and i can just sort of click through

832
00:26:56,960 --> 00:26:58,159
things until i find something else

833
00:26:58,159 --> 00:26:59,919
that's really interesting so for example

834
00:26:59,919 --> 00:27:03,520
the identifier of this secret contains

835
00:27:03,520 --> 00:27:04,880
the id

836
00:27:04,880 --> 00:27:06,720
which is the resource the object id

837
00:27:06,720 --> 00:27:08,320
which is the entire resource id that

838
00:27:08,320 --> 00:27:09,760
azure sees

839
00:27:09,760 --> 00:27:12,640
and that also consists of the vault uri

840
00:27:12,640 --> 00:27:14,000
the name and the version so the id

841
00:27:14,000 --> 00:27:15,840
actually has all three of these right so

842
00:27:15,840 --> 00:27:16,799
we're just going to look at the id

843
00:27:16,799 --> 00:27:18,720
itself

844
00:27:18,720 --> 00:27:22,320
and you can see that is a uri scheme

845
00:27:22,320 --> 00:27:23,520
and keep in mind like as you're clicking

846
00:27:23,520 --> 00:27:25,360
through these on the right here and the

847
00:27:25,360 --> 00:27:27,120
type you can also see the type of object

848
00:27:27,120 --> 00:27:28,159
that they are

849
00:27:28,159 --> 00:27:29,440
so

850
00:27:29,440 --> 00:27:32,320
i know that a string representation of a

851
00:27:32,320 --> 00:27:33,600
uri

852
00:27:33,600 --> 00:27:35,679
object is going to give me the full

853
00:27:35,679 --> 00:27:37,760
string like as we can humans would read

854
00:27:37,760 --> 00:27:40,000
it right so i click on this and now it

855
00:27:40,000 --> 00:27:42,320
tells me that here's the string and that

856
00:27:42,320 --> 00:27:45,120
was that turdshovelvault.vault.azure.net

857
00:27:45,120 --> 00:27:48,640
this is some secret 25 right so now we

858
00:27:48,640 --> 00:27:49,600
have

859
00:27:49,600 --> 00:27:50,399
the

860
00:27:50,399 --> 00:27:52,960
name of the secret we have the value of

861
00:27:52,960 --> 00:27:55,039
the secret

862
00:27:55,039 --> 00:27:56,720
if we wanted to

863
00:27:56,720 --> 00:28:01,320
we can go back to the credential object

864
00:28:04,559 --> 00:28:06,480
and we can try looking through here

865
00:28:06,480 --> 00:28:08,159
the problem is

866
00:28:08,159 --> 00:28:10,480
some of these dot net objects are very

867
00:28:10,480 --> 00:28:11,919
large right there's a lot of pointers

868
00:28:11,919 --> 00:28:13,200
there's a lot of pointers pointing to

869
00:28:13,200 --> 00:28:14,799
other things left and right

870
00:28:14,799 --> 00:28:18,720
and so we can try to go through this

871
00:28:18,720 --> 00:28:20,000
and you notice that there's a lot more

872
00:28:20,000 --> 00:28:21,919
values here if i click on any one of

873
00:28:21,919 --> 00:28:23,679
these it's going to have

874
00:28:23,679 --> 00:28:25,200
a lot more

875
00:28:25,200 --> 00:28:27,919
things in them right

876
00:28:27,919 --> 00:28:29,679
and it gets kind of messy uh trying to

877
00:28:29,679 --> 00:28:31,679
go through all this stuff one by one

878
00:28:31,679 --> 00:28:32,960
because especially when you have a large

879
00:28:32,960 --> 00:28:34,480
jump right there are

880
00:28:34,480 --> 00:28:37,760
i think there are a hundred secrets

881
00:28:37,760 --> 00:28:39,760
there's a hundred secrets in this dump

882
00:28:39,760 --> 00:28:40,880
and if i would try to go through these

883
00:28:40,880 --> 00:28:42,640
one by one right i'd be sitting here

884
00:28:42,640 --> 00:28:44,559
clicking all day nobody got time for

885
00:28:44,559 --> 00:28:46,720
that

886
00:28:46,960 --> 00:28:48,399
before we move on uh there's nothing we

887
00:28:48,399 --> 00:28:50,320
want to look at and that was we remember

888
00:28:50,320 --> 00:28:51,520
that the

889
00:28:51,520 --> 00:28:54,640
the value of those secrets are encrypted

890
00:28:54,640 --> 00:28:56,320
right with gcm

891
00:28:56,320 --> 00:28:59,840
so we can look for an object

892
00:29:00,000 --> 00:29:02,640
uh not that

893
00:29:02,640 --> 00:29:05,520
we can dump the heap

894
00:29:06,559 --> 00:29:07,190
looking for

895
00:29:07,190 --> 00:29:09,039
[Music]

896
00:29:09,039 --> 00:29:12,720
the object that has gcm in it and sure

897
00:29:12,720 --> 00:29:16,159
enough there's 190 of them

898
00:29:16,159 --> 00:29:19,360
so if we click on this method table

899
00:29:19,360 --> 00:29:21,200
and we go through the same process again

900
00:29:21,200 --> 00:29:22,720
we're going to look for

901
00:29:22,720 --> 00:29:23,919
we're trying to find the key right

902
00:29:23,919 --> 00:29:25,919
wherever that key is in memory somewhere

903
00:29:25,919 --> 00:29:27,360
and it's a set of bytes we don't know

904
00:29:27,360 --> 00:29:29,360
what it is and i'll be honest with y'all

905
00:29:29,360 --> 00:29:30,399
i actually don't know what the key is

906
00:29:30,399 --> 00:29:33,919
either because i forgot to get push my

907
00:29:33,919 --> 00:29:36,000
samples before i left home and so i had

908
00:29:36,000 --> 00:29:37,520
to rewrite this this morning so i have

909
00:29:37,520 --> 00:29:38,559
no idea what the key is we're going to

910
00:29:38,559 --> 00:29:40,640
learn what this is together right i just

911
00:29:40,640 --> 00:29:42,240
i know where the key is at in memory but

912
00:29:42,240 --> 00:29:44,960
i don't know what it is

913
00:29:46,000 --> 00:29:48,159
and so as we look at this gcm object

914
00:29:48,159 --> 00:29:49,840
right there's a key handle

915
00:29:49,840 --> 00:29:51,679
and there's two fields that are sort of

916
00:29:51,679 --> 00:29:53,039
static fields

917
00:29:53,039 --> 00:29:55,440
and they tell you what the uh

918
00:29:55,440 --> 00:29:57,120
the minimum maximum size of the knots

919
00:29:57,120 --> 00:30:00,159
can be which is in this case 12

920
00:30:00,159 --> 00:30:03,200
the recommended is 16 i guess c sharp

921
00:30:03,200 --> 00:30:05,200
there's a whole issue about it on github

922
00:30:05,200 --> 00:30:06,640
and it's kind of wild but the

923
00:30:06,640 --> 00:30:07,760
recommended

924
00:30:07,760 --> 00:30:10,399
bite size is 16 not 12.

925
00:30:10,399 --> 00:30:12,640
um and there's a tag size and there's

926
00:30:12,640 --> 00:30:14,080
this key handle but if you click in the

927
00:30:14,080 --> 00:30:16,799
key handle it gives us an address

928
00:30:16,799 --> 00:30:18,320
to another handle and it just sort of

929
00:30:18,320 --> 00:30:19,679
stops there right we can go look at this

930
00:30:19,679 --> 00:30:21,840
in memory and not really understand

931
00:30:21,840 --> 00:30:24,159
what's happening when we get there

932
00:30:24,159 --> 00:30:27,120
so first before we look at that handle

933
00:30:27,120 --> 00:30:28,480
we're going to just go look at the

934
00:30:28,480 --> 00:30:29,440
object

935
00:30:29,440 --> 00:30:31,600
in memory itself

936
00:30:31,600 --> 00:30:33,919
what does that look like right

937
00:30:33,919 --> 00:30:35,200
and you have to forgive me because

938
00:30:35,200 --> 00:30:38,799
there's no way for me to uh

939
00:30:39,039 --> 00:30:41,200
effectively zoom in on this memory thing

940
00:30:41,200 --> 00:30:42,640
so i'm going to try to do the best i can

941
00:30:42,640 --> 00:30:43,760
zooming in

942
00:30:43,760 --> 00:30:46,559
but uh

943
00:30:46,960 --> 00:30:49,039
they did not make it

944
00:30:49,039 --> 00:30:51,840
the easiest to do

945
00:30:52,960 --> 00:30:53,760
all right

946
00:30:53,760 --> 00:30:55,440
so we're gonna go to that address i just

947
00:30:55,440 --> 00:30:58,399
copied and pasted it

948
00:30:58,559 --> 00:31:00,399
and there's a couple of things that

949
00:31:00,399 --> 00:31:02,240
as i'm looking at this now that i know

950
00:31:02,240 --> 00:31:04,480
right i can say okay well there's the

951
00:31:04,480 --> 00:31:06,240
key is right here on the screen

952
00:31:06,240 --> 00:31:07,360
how do we get there how do we get to

953
00:31:07,360 --> 00:31:09,360
that point well the first thing we're

954
00:31:09,360 --> 00:31:10,640
sitting at this pointer that it's on the

955
00:31:10,640 --> 00:31:12,159
top do you need to zoom in a little bit

956
00:31:12,159 --> 00:31:13,519
more

957
00:31:13,519 --> 00:31:15,279
yeah are you good

958
00:31:15,279 --> 00:31:16,720
you zoom in a little more

959
00:31:16,720 --> 00:31:18,799
just just a little bit

960
00:31:18,799 --> 00:31:22,399
i don't want to like overdo it

961
00:31:24,880 --> 00:31:26,159
hopefully that works a little better

962
00:31:26,159 --> 00:31:28,399
right

963
00:31:31,360 --> 00:31:33,519
right

964
00:31:33,519 --> 00:31:36,960
uh lost the spot

965
00:31:39,760 --> 00:31:41,440
okay we're back here all right so the

966
00:31:41,440 --> 00:31:43,760
first thing that we see is what appears

967
00:31:43,760 --> 00:31:45,279
to be a pointer

968
00:31:45,279 --> 00:31:47,840
the address is 7f f 8

969
00:31:47,840 --> 00:31:50,640
5 4 f 5 9 a c 0.

970
00:31:50,640 --> 00:31:52,720
this address is the method table right

971
00:31:52,720 --> 00:31:54,880
this defines this says that this object

972
00:31:54,880 --> 00:31:57,279
in memory starting right here is an aes

973
00:31:57,279 --> 00:31:59,440
gcm object that method table address

974
00:31:59,440 --> 00:32:00,559
that we looked at before that we sort of

975
00:32:00,559 --> 00:32:01,760
just clicked through

976
00:32:01,760 --> 00:32:03,120
so this tells me right here that that's

977
00:32:03,120 --> 00:32:04,399
what that is

978
00:32:04,399 --> 00:32:07,600
the next thing is that key handle

979
00:32:07,600 --> 00:32:09,600
pointer that didn't lead to anywhere

980
00:32:09,600 --> 00:32:12,080
else so this is the next address

981
00:32:12,080 --> 00:32:13,919
that is sitting in memory right at the

982
00:32:13,919 --> 00:32:15,200
beginning of

983
00:32:15,200 --> 00:32:17,120
the method table so the question is

984
00:32:17,120 --> 00:32:18,720
where is the key in all this right

985
00:32:18,720 --> 00:32:20,640
where's the actual key how do we find

986
00:32:20,640 --> 00:32:21,919
that out

987
00:32:21,919 --> 00:32:23,120
well

988
00:32:23,120 --> 00:32:26,320
if we go look at the source code

989
00:32:27,519 --> 00:32:29,840
oh wow

990
00:32:30,880 --> 00:32:32,000
if we go look at the source code we're

991
00:32:32,000 --> 00:32:33,760
going to see a couple of things

992
00:32:33,760 --> 00:32:35,679
this is what the gcm object looks like

993
00:32:35,679 --> 00:32:38,399
right we have the non we have the non

994
00:32:38,399 --> 00:32:40,720
bite sizes we saw that in the windy bug

995
00:32:40,720 --> 00:32:43,120
right we have the tag byte sizes we also

996
00:32:43,120 --> 00:32:45,200
saw that and we know that when we

997
00:32:45,200 --> 00:32:47,440
instantiate the object

998
00:32:47,440 --> 00:32:49,760
it runs this import key

999
00:32:49,760 --> 00:32:50,799
function

1000
00:32:50,799 --> 00:32:52,159
so what happens to that key where does

1001
00:32:52,159 --> 00:32:54,159
it go

1002
00:32:54,159 --> 00:32:55,200
we're going to look at the windows

1003
00:32:55,200 --> 00:32:57,840
implementation of this aes gcm object

1004
00:32:57,840 --> 00:33:00,320
because the linux implementation uses

1005
00:33:00,320 --> 00:33:04,000
openssl whereas windows does not

1006
00:33:04,000 --> 00:33:05,120
and we're going to see that here's the

1007
00:33:05,120 --> 00:33:09,039
keyhandle object that we just saw right

1008
00:33:09,760 --> 00:33:12,480
this key handle is

1009
00:33:12,480 --> 00:33:14,559
a representation of this interop and so

1010
00:33:14,559 --> 00:33:17,200
this is a low level call and interop for

1011
00:33:17,200 --> 00:33:19,440
bcrypt at bcrypt's import key and we

1012
00:33:19,440 --> 00:33:22,480
sort of just pass at the key

1013
00:33:22,799 --> 00:33:24,080
so we're going to follow this key handle

1014
00:33:24,080 --> 00:33:25,279
because that's where we that's where we

1015
00:33:25,279 --> 00:33:26,640
want to go we know it has the key in it

1016
00:33:26,640 --> 00:33:29,679
somewhere as we keep moving on

1017
00:33:29,679 --> 00:33:31,679
we see a couple things

1018
00:33:31,679 --> 00:33:33,200
that are really interesting

1019
00:33:33,200 --> 00:33:35,760
one we notice that there is

1020
00:33:35,760 --> 00:33:37,279
that key handle returns what's called

1021
00:33:37,279 --> 00:33:40,480
the safe key handle object right

1022
00:33:40,480 --> 00:33:42,000
and as we sort of continue down this

1023
00:33:42,000 --> 00:33:44,640
code we can see things like

1024
00:33:44,640 --> 00:33:46,480
there's a key size that gets pulled

1025
00:33:46,480 --> 00:33:49,200
which is the the length of the key

1026
00:33:49,200 --> 00:33:52,000
there is a blob size which is the length

1027
00:33:52,000 --> 00:33:54,080
of the key data blob header which we'll

1028
00:33:54,080 --> 00:33:55,760
talk about in a second plus the length

1029
00:33:55,760 --> 00:33:58,480
of the key size so this key size and

1030
00:33:58,480 --> 00:34:00,799
this blob size are sort of represented

1031
00:34:00,799 --> 00:34:02,559
somewhere in memory

1032
00:34:02,559 --> 00:34:03,919
but

1033
00:34:03,919 --> 00:34:07,120
it's represented sort of as the

1034
00:34:07,120 --> 00:34:08,960
um

1035
00:34:08,960 --> 00:34:11,760
it's represented here in this actual

1036
00:34:11,760 --> 00:34:14,960
blob object as we start

1037
00:34:14,960 --> 00:34:16,320
making our pointers and doing all the

1038
00:34:16,320 --> 00:34:18,320
crazy things so we we take the header

1039
00:34:18,320 --> 00:34:20,399
this blob header which we will get to in

1040
00:34:20,399 --> 00:34:22,320
a second and then that header points to

1041
00:34:22,320 --> 00:34:23,839
some magic number

1042
00:34:23,839 --> 00:34:25,679
or magic header

1043
00:34:25,679 --> 00:34:28,560
uh then it also points to a version

1044
00:34:28,560 --> 00:34:31,040
and it points to the size of the key

1045
00:34:31,040 --> 00:34:34,639
which is in our case 16 bytes so what is

1046
00:34:34,639 --> 00:34:37,280
this and then later the key gets copied

1047
00:34:37,280 --> 00:34:39,040
to this blob right

1048
00:34:39,040 --> 00:34:39,918
so

1049
00:34:39,918 --> 00:34:41,440
what is the key header or the blob

1050
00:34:41,440 --> 00:34:42,960
header right if we look down here here's

1051
00:34:42,960 --> 00:34:45,520
the actual structs for that blob header

1052
00:34:45,520 --> 00:34:48,560
and we see that the magic header is

1053
00:34:48,560 --> 00:34:51,280
4d42444b

1054
00:34:51,280 --> 00:34:52,960
this is the magic header that says this

1055
00:34:52,960 --> 00:34:54,320
is where your

1056
00:34:54,320 --> 00:34:57,680
aes gcm key is going to start

1057
00:34:57,680 --> 00:34:59,280
the version number is one which is some

1058
00:34:59,280 --> 00:35:00,800
arbitrary number we really care so much

1059
00:35:00,800 --> 00:35:03,599
about that but this means that as we

1060
00:35:03,599 --> 00:35:05,040
look at the struct

1061
00:35:05,040 --> 00:35:07,119
that there is going to be some value of

1062
00:35:07,119 --> 00:35:08,200
4d

1063
00:35:08,200 --> 00:35:11,200
42444b followed by a one and they're

1064
00:35:11,200 --> 00:35:12,880
both going to be four bytes each because

1065
00:35:12,880 --> 00:35:13,680
they're

1066
00:35:13,680 --> 00:35:14,839
unsigned

1067
00:35:14,839 --> 00:35:17,200
integers and so this one is going to be

1068
00:35:17,200 --> 00:35:19,440
represented by zero one as we look at it

1069
00:35:19,440 --> 00:35:22,960
zero one zero zero zero zero zero zero

1070
00:35:22,960 --> 00:35:25,280
and then after that

1071
00:35:25,280 --> 00:35:27,760
here comes the key

1072
00:35:27,760 --> 00:35:31,560
so if we go back to wind debug

1073
00:35:34,800 --> 00:35:38,079
if i can get the magnifier

1074
00:35:41,200 --> 00:35:42,720
we're looking for that value right does

1075
00:35:42,720 --> 00:35:44,480
anyone see it already

1076
00:35:44,480 --> 00:35:48,560
i know maybe it's a little too small but

1077
00:35:51,920 --> 00:35:53,200
anything that looks like a header up

1078
00:35:53,200 --> 00:35:54,800
here notice we're not looking for

1079
00:35:54,800 --> 00:35:56,400
further below around that secret value

1080
00:35:56,400 --> 00:35:57,839
30.

1081
00:35:57,839 --> 00:35:59,119
but if you can't see it give you a

1082
00:35:59,119 --> 00:36:00,560
little bit of time but

1083
00:36:00,560 --> 00:36:04,160
as we go what as we go through this uh

1084
00:36:04,160 --> 00:36:05,520
this struct

1085
00:36:05,520 --> 00:36:07,359
um here it is right here's this header

1086
00:36:07,359 --> 00:36:10,079
and it's represented by the letters kdbm

1087
00:36:10,079 --> 00:36:12,079
this kdbm is also listed somewhere else

1088
00:36:12,079 --> 00:36:13,520
in the source code and it's like just as

1089
00:36:13,520 --> 00:36:15,200
a comment saying this is what you're

1090
00:36:15,200 --> 00:36:16,560
going to see in memory so it's really

1091
00:36:16,560 --> 00:36:18,400
convenient to notice that but this is

1092
00:36:18,400 --> 00:36:20,800
the actual header it tells us that this

1093
00:36:20,800 --> 00:36:22,720
is where the key starts followed by that

1094
00:36:22,720 --> 00:36:24,000
one that we mentioned right so the

1095
00:36:24,000 --> 00:36:27,359
version so zero one zero zero zero zero

1096
00:36:27,359 --> 00:36:30,000
and then followed by the key size

1097
00:36:30,000 --> 00:36:31,280
which is

1098
00:36:31,280 --> 00:36:33,200
uh

1099
00:36:33,200 --> 00:36:35,359
32 bytes i said 16 before i'm sorry i

1100
00:36:35,359 --> 00:36:38,839
made 32 it's actually 32 bytes

1101
00:36:38,839 --> 00:36:40,800
so this

1102
00:36:40,800 --> 00:36:43,520
represents this

1103
00:36:43,520 --> 00:36:45,920
block of four bytes represents the key

1104
00:36:45,920 --> 00:36:48,160
size and then right after that here

1105
00:36:48,160 --> 00:36:49,359
comes the key

1106
00:36:49,359 --> 00:36:51,040
so this is our key right here like i

1107
00:36:51,040 --> 00:36:52,160
said i don't really know the key i

1108
00:36:52,160 --> 00:36:53,280
didn't know the key was when we started

1109
00:36:53,280 --> 00:36:54,720
here but now we just found it we went

1110
00:36:54,720 --> 00:36:57,440
through we looked at the uh not only

1111
00:36:57,440 --> 00:36:59,200
the structs in wind debug but we

1112
00:36:59,200 --> 00:37:01,200
referenced the source code to understand

1113
00:37:01,200 --> 00:37:03,599
how the struct was built

1114
00:37:03,599 --> 00:37:05,280
what indicators we should look for for

1115
00:37:05,280 --> 00:37:06,240
the key

1116
00:37:06,240 --> 00:37:08,400
and we can go back into wind debug

1117
00:37:08,400 --> 00:37:11,200
and now finally pull this entire gcm key

1118
00:37:11,200 --> 00:37:12,400
out of here

1119
00:37:12,400 --> 00:37:14,000
i would pull it out and decrypt it for

1120
00:37:14,000 --> 00:37:15,359
you but

1121
00:37:15,359 --> 00:37:17,200
guess who forgot to

1122
00:37:17,200 --> 00:37:19,440
get push their decryption script

1123
00:37:19,440 --> 00:37:22,400
this morning or yesterday so

1124
00:37:22,400 --> 00:37:25,920
um but basically this is the uh uh

1125
00:37:25,920 --> 00:37:28,160
the gcm key we can pull this out and do

1126
00:37:28,160 --> 00:37:31,119
our decryption of the uh

1127
00:37:31,119 --> 00:37:32,800
of the key vault secret right because

1128
00:37:32,800 --> 00:37:35,119
now we have the nonce we have the tag we

1129
00:37:35,119 --> 00:37:37,280
have the value which is the ciphertext

1130
00:37:37,280 --> 00:37:39,040
and we have the key and we just throw

1131
00:37:39,040 --> 00:37:41,440
those values in the magic machine and we

1132
00:37:41,440 --> 00:37:43,599
can decrypt the

1133
00:37:43,599 --> 00:37:45,040
key vault secrets

1134
00:37:45,040 --> 00:37:46,480
yay

1135
00:37:46,480 --> 00:37:47,599
all right

1136
00:37:47,599 --> 00:37:49,040
we're going to do one more

1137
00:37:49,040 --> 00:37:50,720
and this one is

1138
00:37:50,720 --> 00:37:51,520
uh

1139
00:37:51,520 --> 00:37:53,040
powershell

1140
00:37:53,040 --> 00:37:56,480
so i took a dump of

1141
00:37:56,480 --> 00:37:58,240
a powershell process

1142
00:37:58,240 --> 00:38:00,079
and it's very similar in its nature

1143
00:38:00,079 --> 00:38:00,880
right

1144
00:38:00,880 --> 00:38:03,040
it's

1145
00:38:03,040 --> 00:38:04,800
dot net

1146
00:38:04,800 --> 00:38:07,359
what's happening

1147
00:38:08,560 --> 00:38:11,759
gotta stop debugging first

1148
00:38:12,720 --> 00:38:13,839
i see i was like i was trying to like

1149
00:38:13,839 --> 00:38:16,839
reach the menu but my window kept moving

1150
00:38:16,839 --> 00:38:19,280
wild all right

1151
00:38:19,280 --> 00:38:22,800
so open up this other dump file

1152
00:38:29,920 --> 00:38:31,920
refresh bam and we can do sort of the

1153
00:38:31,920 --> 00:38:33,839
same thing but the problem is

1154
00:38:33,839 --> 00:38:35,920
a process like powershell which is like

1155
00:38:35,920 --> 00:38:37,520
so complex right there's a lot of stuff

1156
00:38:37,520 --> 00:38:39,119
going on underneath there if you take a

1157
00:38:39,119 --> 00:38:40,400
dump of a powershell process you're

1158
00:38:40,400 --> 00:38:43,839
likely to get uh between 200 and

1159
00:38:43,839 --> 00:38:46,560
600 megabytes of memory um even if you

1160
00:38:46,560 --> 00:38:47,920
haven't really done anything right

1161
00:38:47,920 --> 00:38:49,520
that's just how how massive it is as a

1162
00:38:49,520 --> 00:38:51,440
framework

1163
00:38:51,440 --> 00:38:53,280
and we can look through here uh doing

1164
00:38:53,280 --> 00:38:54,720
the same

1165
00:38:54,720 --> 00:38:56,079
dump heap tricks

1166
00:38:56,079 --> 00:38:57,839
right or a command that's not really

1167
00:38:57,839 --> 00:39:00,839
trick

1168
00:39:00,880 --> 00:39:02,240
and we get

1169
00:39:02,240 --> 00:39:03,200
similar

1170
00:39:03,200 --> 00:39:04,960
uh

1171
00:39:04,960 --> 00:39:06,880
uh objects right some object structure

1172
00:39:06,880 --> 00:39:08,240
we get the counts

1173
00:39:08,240 --> 00:39:09,920
and there are some things that are are

1174
00:39:09,920 --> 00:39:11,680
interesting in a powershell script or a

1175
00:39:11,680 --> 00:39:14,880
powershell session for example if i were

1176
00:39:14,880 --> 00:39:17,040
to open up powershell and i pressed up

1177
00:39:17,040 --> 00:39:18,880
right i would go to my history right

1178
00:39:18,880 --> 00:39:20,720
which means that there is an object in a

1179
00:39:20,720 --> 00:39:22,960
powershell session that represents not

1180
00:39:22,960 --> 00:39:25,119
only the active history of that session

1181
00:39:25,119 --> 00:39:26,800
but also the history that you would find

1182
00:39:26,800 --> 00:39:29,119
on disk in the uh the powershell history

1183
00:39:29,119 --> 00:39:30,240
file

1184
00:39:30,240 --> 00:39:32,079
itself

1185
00:39:32,079 --> 00:39:34,079
there is other things like for example

1186
00:39:34,079 --> 00:39:36,560
when a script is run

1187
00:39:36,560 --> 00:39:38,000
so you're running a powershell script

1188
00:39:38,000 --> 00:39:39,440
and it gets

1189
00:39:39,440 --> 00:39:42,480
compiled into script block data right so

1190
00:39:42,480 --> 00:39:43,680
a lot of people do the script block

1191
00:39:43,680 --> 00:39:45,119
logging hopefully if you work in a sock

1192
00:39:45,119 --> 00:39:46,640
and you're you're logging all your

1193
00:39:46,640 --> 00:39:47,839
things correctly

1194
00:39:47,839 --> 00:39:50,560
um but that is represented by net object

1195
00:39:50,560 --> 00:39:52,400
which we would be able to find in here

1196
00:39:52,400 --> 00:39:54,320
if i had run a script and i had not now

1197
00:39:54,320 --> 00:39:56,320
that i think about it but we can find

1198
00:39:56,320 --> 00:39:58,079
things like

1199
00:39:58,079 --> 00:39:59,920
my history info

1200
00:39:59,920 --> 00:40:04,240
so if i do a stat type for history

1201
00:40:05,119 --> 00:40:07,119
i come across

1202
00:40:07,119 --> 00:40:08,880
3 000

1203
00:40:08,880 --> 00:40:11,520
i'm sorry no that's not 48 uh history

1204
00:40:11,520 --> 00:40:13,359
info objects which represents 48

1205
00:40:13,359 --> 00:40:14,800
commands that i've run in the past in my

1206
00:40:14,800 --> 00:40:16,079
powershell session

1207
00:40:16,079 --> 00:40:17,520
more interestingly

1208
00:40:17,520 --> 00:40:21,200
there is a history info array

1209
00:40:21,200 --> 00:40:22,160
which

1210
00:40:22,160 --> 00:40:24,240
is actually just

1211
00:40:24,240 --> 00:40:26,960
a list of all the history info objects

1212
00:40:26,960 --> 00:40:28,560
so i don't actually have to go one by

1213
00:40:28,560 --> 00:40:30,480
one through the history info i can just

1214
00:40:30,480 --> 00:40:31,839
pull the array

1215
00:40:31,839 --> 00:40:34,799
and um

1216
00:40:34,880 --> 00:40:37,440
and pull every single

1217
00:40:37,440 --> 00:40:39,359
uh command that i've run in my my

1218
00:40:39,359 --> 00:40:41,440
session so if i click on this random one

1219
00:40:41,440 --> 00:40:42,880
for example

1220
00:40:42,880 --> 00:40:44,480
this is an array so we're just gonna

1221
00:40:44,480 --> 00:40:45,839
sort of click through

1222
00:40:45,839 --> 00:40:49,640
this is the element zero

1223
00:40:52,800 --> 00:40:54,560
and click on command line

1224
00:40:54,560 --> 00:40:57,119
and you can see that i ran cred

1225
00:40:57,119 --> 00:40:58,880
get credential right so i created some

1226
00:40:58,880 --> 00:41:00,319
credential object

1227
00:41:00,319 --> 00:41:01,680
uh in this

1228
00:41:01,680 --> 00:41:04,240
in this uh powershell session

1229
00:41:04,240 --> 00:41:06,000
now underneath when you do something

1230
00:41:06,000 --> 00:41:08,560
like get credential on windows only on

1231
00:41:08,560 --> 00:41:09,680
windows

1232
00:41:09,680 --> 00:41:10,480
uh

1233
00:41:10,480 --> 00:41:12,400
that credential object right that secure

1234
00:41:12,400 --> 00:41:14,560
string value for your password

1235
00:41:14,560 --> 00:41:16,480
gets encrypted by

1236
00:41:16,480 --> 00:41:19,200
d poppy i call it dp api i call it d

1237
00:41:19,200 --> 00:41:20,480
poppy because that's also my stripper

1238
00:41:20,480 --> 00:41:23,119
name and so it all makes sense to me

1239
00:41:23,119 --> 00:41:25,040
but

1240
00:41:25,040 --> 00:41:25,839
that

1241
00:41:25,839 --> 00:41:27,440
particular object in memory is only

1242
00:41:27,440 --> 00:41:29,200
encrypted in a way that the process

1243
00:41:29,200 --> 00:41:32,079
itself can decrypt it so you can't

1244
00:41:32,079 --> 00:41:33,680
actually take the value of those bytes

1245
00:41:33,680 --> 00:41:34,720
and try to

1246
00:41:34,720 --> 00:41:36,400
decrypt it outside of the process

1247
00:41:36,400 --> 00:41:38,480
because it's specifically

1248
00:41:38,480 --> 00:41:40,079
that memory is specifically encrypted

1249
00:41:40,079 --> 00:41:42,400
with the same process flag right

1250
00:41:42,400 --> 00:41:43,920
so if you were to try to pull this

1251
00:41:43,920 --> 00:41:45,280
credential out it wouldn't really help

1252
00:41:45,280 --> 00:41:46,880
you in that spot and that's where things

1253
00:41:46,880 --> 00:41:49,520
like live uh

1254
00:41:49,520 --> 00:41:50,400
um

1255
00:41:50,400 --> 00:41:52,240
debugging and injection

1256
00:41:52,240 --> 00:41:55,359
uh you could actually force all the

1257
00:41:55,359 --> 00:41:57,520
secure strings to be decrypted in memory

1258
00:41:57,520 --> 00:41:59,040
in another user's power cell session

1259
00:41:59,040 --> 00:42:00,560
without really asking them to do that

1260
00:42:00,560 --> 00:42:02,480
right but on linux

1261
00:42:02,480 --> 00:42:04,720
uh

1262
00:42:05,119 --> 00:42:07,520
dp api depoppy doesn't exist right and

1263
00:42:07,520 --> 00:42:09,040
it turns out that like everything on

1264
00:42:09,040 --> 00:42:10,720
linux is just like a plain text in

1265
00:42:10,720 --> 00:42:12,560
memory it's called secure string still

1266
00:42:12,560 --> 00:42:14,560
in linux because it doesn't get logged

1267
00:42:14,560 --> 00:42:15,599
right you're not going to see it in your

1268
00:42:15,599 --> 00:42:17,119
logs

1269
00:42:17,119 --> 00:42:18,560
it's never going to be accidentally

1270
00:42:18,560 --> 00:42:21,040
printed out so it's a secure string but

1271
00:42:21,040 --> 00:42:23,520
by the implementation

1272
00:42:23,520 --> 00:42:26,319
if you were to dump a net process

1273
00:42:26,319 --> 00:42:29,680
a powershell process in memory on linux

1274
00:42:29,680 --> 00:42:31,920
and you were to look for secure string

1275
00:42:31,920 --> 00:42:33,599
objects you would see them in plain text

1276
00:42:33,599 --> 00:42:34,560
here we're not going to be able to see

1277
00:42:34,560 --> 00:42:35,280
that

1278
00:42:35,280 --> 00:42:36,400
but that's just something that's that's

1279
00:42:36,400 --> 00:42:38,480
really interesting and so

1280
00:42:38,480 --> 00:42:40,640
i can pull this git credential um down

1281
00:42:40,640 --> 00:42:41,920
and do all my

1282
00:42:41,920 --> 00:42:43,520
crazy things

1283
00:42:43,520 --> 00:42:45,520
but

1284
00:42:45,520 --> 00:42:46,960
that's a lot of work and powershell is

1285
00:42:46,960 --> 00:42:48,800
very large right

1286
00:42:48,800 --> 00:42:49,520
so

1287
00:42:49,520 --> 00:42:51,760
as a result of

1288
00:42:51,760 --> 00:42:53,920
not wanting to click through wind debug

1289
00:42:53,920 --> 00:42:56,319
all the time

1290
00:42:56,319 --> 00:42:59,280
i wrote a tool

1291
00:42:59,280 --> 00:43:03,440
and this tool is called turd shovel

1292
00:43:03,680 --> 00:43:06,240
right it's my logo it's on github

1293
00:43:06,240 --> 00:43:08,119
github.com

1294
00:43:08,119 --> 00:43:11,520
daddycocomainslash church

1295
00:43:11,520 --> 00:43:12,640
and i'm just going to give a

1296
00:43:12,640 --> 00:43:15,359
demonstration of that

1297
00:43:18,000 --> 00:43:19,760
ignore that that was a ctf flag that you

1298
00:43:19,760 --> 00:43:23,720
probably saw the qr code for

1299
00:43:28,480 --> 00:43:30,000
so i've already installed it uh this it

1300
00:43:30,000 --> 00:43:31,359
sits on pi pi

1301
00:43:31,359 --> 00:43:33,760
um and you know what let me actually do

1302
00:43:33,760 --> 00:43:35,680
the actual slide for it first all right

1303
00:43:35,680 --> 00:43:36,560
so

1304
00:43:36,560 --> 00:43:38,240
church shovel is a cli tool that allows

1305
00:43:38,240 --> 00:43:40,640
you to dump the objects from net memory

1306
00:43:40,640 --> 00:43:42,720
dumps without actually having to click

1307
00:43:42,720 --> 00:43:44,400
through everything as we just did again

1308
00:43:44,400 --> 00:43:45,839
there were 100 secrets in that first

1309
00:43:45,839 --> 00:43:47,200
dump i'm not going to sit there and be

1310
00:43:47,200 --> 00:43:48,880
clicking all day i don't have time for

1311
00:43:48,880 --> 00:43:50,240
that

1312
00:43:50,240 --> 00:43:52,240
it's only usable in python 3.8

1313
00:43:52,240 --> 00:43:53,440
specifically

1314
00:43:53,440 --> 00:43:54,800
for now and that is because of a

1315
00:43:54,800 --> 00:43:57,440
dependency on python net which has not

1316
00:43:57,440 --> 00:44:00,560
yet been updated to its new version and

1317
00:44:00,560 --> 00:44:01,920
so

1318
00:44:01,920 --> 00:44:04,000
you can only use it with python 3.8

1319
00:44:04,000 --> 00:44:05,839
eventually when python net supports more

1320
00:44:05,839 --> 00:44:07,359
versions

1321
00:44:07,359 --> 00:44:09,280
officially it supports more versions we

1322
00:44:09,280 --> 00:44:12,319
can go up to 310 i think

1323
00:44:12,319 --> 00:44:14,480
it also uses clr md which is a c-sharp

1324
00:44:14,480 --> 00:44:17,359
library underneath

1325
00:44:17,839 --> 00:44:19,280
it might make sense to write turn

1326
00:44:19,280 --> 00:44:21,839
trouble in c-sharp but i don't do that i

1327
00:44:21,839 --> 00:44:23,280
don't write in c sharp unless i have to

1328
00:44:23,280 --> 00:44:25,599
so so now we good

1329
00:44:25,599 --> 00:44:27,119
so let's

1330
00:44:27,119 --> 00:44:30,560
let's let's open this up

1331
00:44:33,839 --> 00:44:37,560
go to my samples folder

1332
00:44:40,079 --> 00:44:41,440
and i have this little ascii poop you

1333
00:44:41,440 --> 00:44:42,880
know it's cool

1334
00:44:42,880 --> 00:44:43,760
um

1335
00:44:43,760 --> 00:44:44,960
and the first thing i'm going to do

1336
00:44:44,960 --> 00:44:47,440
right there's a help menu

1337
00:44:47,440 --> 00:44:49,280
that's not how you spell help it's a

1338
00:44:49,280 --> 00:44:50,800
help menu

1339
00:44:50,800 --> 00:44:52,160
but the first thing i'm going to do is

1340
00:44:52,160 --> 00:44:54,079
i'm going to have to load the memory

1341
00:44:54,079 --> 00:44:57,280
dump right so i'm going to load

1342
00:44:57,280 --> 00:44:59,200
this dump and what it does it goes

1343
00:44:59,200 --> 00:45:00,240
through

1344
00:45:00,240 --> 00:45:02,800
using clr md it finds all the unique

1345
00:45:02,800 --> 00:45:04,640
object types and net the things that we

1346
00:45:04,640 --> 00:45:07,200
saw on dump heap earlier in windybug

1347
00:45:07,200 --> 00:45:09,440
and

1348
00:45:09,440 --> 00:45:11,119
lets you just start playing around with

1349
00:45:11,119 --> 00:45:12,800
this we can run the same commands right

1350
00:45:12,800 --> 00:45:14,480
dump heap

1351
00:45:14,480 --> 00:45:17,040
and i can do a filter for

1352
00:45:17,040 --> 00:45:20,400
uh again azure right

1353
00:45:20,400 --> 00:45:22,560
and i get sort of the same similar view

1354
00:45:22,560 --> 00:45:24,960
to what we saw it oh whoa

1355
00:45:24,960 --> 00:45:26,640
i forgot i can't you can't resize this

1356
00:45:26,640 --> 00:45:29,599
because of uh

1357
00:45:29,599 --> 00:45:30,640
reasons

1358
00:45:30,640 --> 00:45:33,200
anyway

1359
00:45:33,200 --> 00:45:34,400
so we're going to similar view to what

1360
00:45:34,400 --> 00:45:37,359
we saw in in wind debug right we have

1361
00:45:37,359 --> 00:45:40,000
the objects themselves uh the sides of

1362
00:45:40,000 --> 00:45:42,000
the objects and the address that they're

1363
00:45:42,000 --> 00:45:44,160
at

1364
00:45:45,280 --> 00:45:47,839
then we can do things like

1365
00:45:47,839 --> 00:45:50,079
well

1366
00:45:50,079 --> 00:45:52,720
dump an object right and so if i look

1367
00:45:52,720 --> 00:45:55,040
for something like

1368
00:45:55,040 --> 00:45:58,920
a key vault secret

1369
00:46:00,640 --> 00:46:01,760
there's going to be one in here

1370
00:46:01,760 --> 00:46:03,280
somewhere

1371
00:46:03,280 --> 00:46:06,319
well let's just do this then

1372
00:46:06,880 --> 00:46:08,960
uh dump

1373
00:46:08,960 --> 00:46:10,720
that's not right either

1374
00:46:10,720 --> 00:46:14,359
filter secret

1375
00:46:14,560 --> 00:46:15,920
if i pull this object right sitting at

1376
00:46:15,920 --> 00:46:17,599
this address this is the keyboard secret

1377
00:46:17,599 --> 00:46:20,640
if i dump object

1378
00:46:22,560 --> 00:46:24,560
well now i get a json representation of

1379
00:46:24,560 --> 00:46:26,480
what this object is without having to go

1380
00:46:26,480 --> 00:46:28,160
through all the nonsense of clicking

1381
00:46:28,160 --> 00:46:30,000
each field individually one by one

1382
00:46:30,000 --> 00:46:31,520
because that's way too much work so the

1383
00:46:31,520 --> 00:46:32,800
first thing that we see right was that

1384
00:46:32,800 --> 00:46:35,040
value and we can see the the json value

1385
00:46:35,040 --> 00:46:36,880
that's here

1386
00:46:36,880 --> 00:46:38,960
we can see other information about what

1387
00:46:38,960 --> 00:46:41,839
a key vault secret object holds right so

1388
00:46:41,839 --> 00:46:43,760
uh when was it created when was it

1389
00:46:43,760 --> 00:46:46,319
updated does it expire is it valid

1390
00:46:46,319 --> 00:46:47,680
before or after date these are all

1391
00:46:47,680 --> 00:46:49,119
settings you can set in azure for a key

1392
00:46:49,119 --> 00:46:50,240
vault secret

1393
00:46:50,240 --> 00:46:51,680
uh the name of the secret itself was

1394
00:46:51,680 --> 00:46:53,200
some secret 30.

1395
00:46:53,200 --> 00:46:54,960
the uri for the vault was search trouble

1396
00:46:54,960 --> 00:46:57,440
vault and we can just dump an entire

1397
00:46:57,440 --> 00:46:58,400
object

1398
00:46:58,400 --> 00:46:59,760
in dot memory now you can't do this for

1399
00:46:59,760 --> 00:47:01,280
all objects because some objects like

1400
00:47:01,280 --> 00:47:03,440
the ones in powershell like super large

1401
00:47:03,440 --> 00:47:04,960
and even though

1402
00:47:04,960 --> 00:47:07,520
i mean you technically can dump it i i

1403
00:47:07,520 --> 00:47:10,079
wouldn't recommend it um so you start

1404
00:47:10,079 --> 00:47:11,359
out to know like what you're looking for

1405
00:47:11,359 --> 00:47:15,359
and be very selective in in dumping um

1406
00:47:15,359 --> 00:47:17,040
particularly objects because a lot of

1407
00:47:17,040 --> 00:47:18,560
them may have pointers that point to

1408
00:47:18,560 --> 00:47:20,559
themselves or reference themselves or

1409
00:47:20,559 --> 00:47:21,920
reference something that referenced it

1410
00:47:21,920 --> 00:47:23,520
and is like this whole circular loop so

1411
00:47:23,520 --> 00:47:25,680
i tried to stop that as much as possible

1412
00:47:25,680 --> 00:47:26,880
but uh

1413
00:47:26,880 --> 00:47:29,359
you know bugs or bugs right

1414
00:47:29,359 --> 00:47:31,839
but um again that's just one secret

1415
00:47:31,839 --> 00:47:33,520
right so what if i want to dump all the

1416
00:47:33,520 --> 00:47:35,040
secrets i don't really care what they

1417
00:47:35,040 --> 00:47:36,240
are i just want to dump all of them well

1418
00:47:36,240 --> 00:47:38,720
then i can do dump type and i can do

1419
00:47:38,720 --> 00:47:40,319
types

1420
00:47:40,319 --> 00:47:42,559
and i get this autocomplete for all the

1421
00:47:42,559 --> 00:47:44,960
types that are found inside of this

1422
00:47:44,960 --> 00:47:46,960
uh process right those unique types that

1423
00:47:46,960 --> 00:47:48,960
we saw when i loaded up the program

1424
00:47:48,960 --> 00:47:51,440
and i can do things something like azure

1425
00:47:51,440 --> 00:47:52,720
dot

1426
00:47:52,720 --> 00:47:55,440
uh was it security

1427
00:47:55,440 --> 00:47:57,040
and you can go up and down the menu

1428
00:47:57,040 --> 00:47:58,319
right um

1429
00:47:58,319 --> 00:48:00,559
what this will do when i run this

1430
00:48:00,559 --> 00:48:02,720
this will dump every single secret

1431
00:48:02,720 --> 00:48:05,440
that is found in that

1432
00:48:05,440 --> 00:48:06,880
process and

1433
00:48:06,880 --> 00:48:08,480
you can save it to disk if you wanted to

1434
00:48:08,480 --> 00:48:09,440
right

1435
00:48:09,440 --> 00:48:10,240
uh

1436
00:48:10,240 --> 00:48:11,440
hitting save

1437
00:48:11,440 --> 00:48:13,040
and then save true and it will just save

1438
00:48:13,040 --> 00:48:14,720
everything to disk so now you have json

1439
00:48:14,720 --> 00:48:16,880
representations of every net object all

1440
00:48:16,880 --> 00:48:19,520
these secrets

1441
00:48:19,520 --> 00:48:21,119
that you can decrypt with the key that

1442
00:48:21,119 --> 00:48:22,559
you found

1443
00:48:22,559 --> 00:48:23,280
for

1444
00:48:23,280 --> 00:48:25,760
gcm

1445
00:48:28,000 --> 00:48:30,240
you can also do something like

1446
00:48:30,240 --> 00:48:32,880
memory and if we go look at the

1447
00:48:32,880 --> 00:48:36,559
uh let's see so dump types

1448
00:48:36,559 --> 00:48:38,000
it was

1449
00:48:38,000 --> 00:48:39,839
system

1450
00:48:39,839 --> 00:48:41,520
dot security

1451
00:48:41,520 --> 00:48:42,720
acmg

1452
00:48:42,720 --> 00:48:45,439
aehcm

1453
00:48:46,720 --> 00:48:48,640
oh you know what actually

1454
00:48:48,640 --> 00:48:50,799
don't

1455
00:48:51,520 --> 00:48:54,079
heap i need that original address of the

1456
00:48:54,079 --> 00:48:57,760
the asgcm object

1457
00:48:59,839 --> 00:49:01,119
i can go actually go to this point

1458
00:49:01,119 --> 00:49:03,760
because remember that this object

1459
00:49:03,760 --> 00:49:05,119
first had the method table then had some

1460
00:49:05,119 --> 00:49:06,800
other values and they had the key i

1461
00:49:06,800 --> 00:49:08,640
could just dump the memory

1462
00:49:08,640 --> 00:49:10,319
with dump mem

1463
00:49:10,319 --> 00:49:12,480
at with the address

1464
00:49:12,480 --> 00:49:14,839
of any one of these

1465
00:49:14,839 --> 00:49:17,680
objects i'll say the length

1466
00:49:17,680 --> 00:49:19,359
was

1467
00:49:19,359 --> 00:49:22,240
i think it was about

1468
00:49:22,559 --> 00:49:24,160
we'll just say 64. i remember called the

1469
00:49:24,160 --> 00:49:25,839
time i had

1470
00:49:25,839 --> 00:49:27,839
and sure enough yep there's that kdbm

1471
00:49:27,839 --> 00:49:29,760
that we saw and we can pull the bytes

1472
00:49:29,760 --> 00:49:30,880
out of

1473
00:49:30,880 --> 00:49:31,760
the

1474
00:49:31,760 --> 00:49:34,000
memory directly without having to go

1475
00:49:34,000 --> 00:49:36,079
through all that stuff again so once you

1476
00:49:36,079 --> 00:49:37,920
start to learn what the structure of

1477
00:49:37,920 --> 00:49:39,280
your objects are that you're looking for

1478
00:49:39,280 --> 00:49:40,720
you can go directly to those objects

1479
00:49:40,720 --> 00:49:43,040
without having to

1480
00:49:43,040 --> 00:49:45,040
do all the clicky things

1481
00:49:45,040 --> 00:49:47,280
so there's that that's my my cool

1482
00:49:47,280 --> 00:49:48,640
contribution to society in the last

1483
00:49:48,640 --> 00:49:51,200
couple of months

1484
00:49:54,640 --> 00:49:57,119
and that that is it so

1485
00:49:57,119 --> 00:49:59,200
uh do you have any questions are we

1486
00:49:59,200 --> 00:50:01,200
doing qa here is that that the thing

1487
00:50:01,200 --> 00:50:04,160
okay yeah any questions

1488
00:50:06,400 --> 00:50:08,160
you got a question oh no i was just

1489
00:50:08,160 --> 00:50:09,839
reminding me

1490
00:50:09,839 --> 00:50:13,119
oh yeah yeah thank you thank you

1491
00:50:13,119 --> 00:50:14,800
well cool sounds like there's no

1492
00:50:14,800 --> 00:50:17,680
questions there's any questions

1493
00:50:18,640 --> 00:50:20,879
okay

1494
00:50:22,000 --> 00:50:23,680
i asked her if there were any questions

1495
00:50:23,680 --> 00:50:24,839
online

1496
00:50:24,839 --> 00:50:27,599
okay nothing nothing

1497
00:50:27,599 --> 00:50:30,160
there we go we gucci all right well

1498
00:50:30,160 --> 00:50:31,760
i'm uh again i'm the ron you can catch

1499
00:50:31,760 --> 00:50:34,319
me uh at mcom my on twitter

1500
00:50:34,319 --> 00:50:36,800
give me a follow uh

1501
00:50:36,800 --> 00:50:37,599
and

1502
00:50:37,599 --> 00:50:38,960
thanks for coming out

1503
00:50:38,960 --> 00:50:40,670
appreciate it

1504
00:50:40,670 --> 00:50:46,619
[Applause]

1505
00:51:09,760 --> 00:51:11,839
you

