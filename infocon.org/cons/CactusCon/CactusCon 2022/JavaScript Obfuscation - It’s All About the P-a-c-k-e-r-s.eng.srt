1
00:00:06,399 --> 00:00:08,720
javascript obfuscation it's all about

2
00:00:08,720 --> 00:00:10,719
the packer

3
00:00:10,719 --> 00:00:12,639
a few words about myself my name is aur

4
00:00:12,639 --> 00:00:16,239
katz i'm former osp israel chapter lead

5
00:00:16,239 --> 00:00:18,160
i'm data driven security researchers

6
00:00:18,160 --> 00:00:20,160
with me which means data plays a

7
00:00:20,160 --> 00:00:22,160
significant role in my day-to-day

8
00:00:22,160 --> 00:00:23,840
research and and some of the work that

9
00:00:23,840 --> 00:00:27,840
i'm doing is driven by data

10
00:00:27,920 --> 00:00:29,359
when i try to

11
00:00:29,359 --> 00:00:31,439
define my role i'm saying that i'm

12
00:00:31,439 --> 00:00:33,360
trying to move security challenges into

13
00:00:33,360 --> 00:00:35,440
the science and solution space and i

14
00:00:35,440 --> 00:00:37,760
think this research and the story behind

15
00:00:37,760 --> 00:00:39,920
the research tell a story that compiled

16
00:00:39,920 --> 00:00:42,320
with that kind of notion

17
00:00:42,320 --> 00:00:44,399
and last and definitely

18
00:00:44,399 --> 00:00:47,120
not least i have a boring social network

19
00:00:47,120 --> 00:00:49,600
persona therefore i don't encourage you

20
00:00:49,600 --> 00:00:52,480
in any other way or any given way

21
00:00:52,480 --> 00:00:54,879
to follow me on twitter on or underscore

22
00:00:54,879 --> 00:00:57,520
cuts please don't do that as i was

23
00:00:57,520 --> 00:00:59,680
saying boring

24
00:00:59,680 --> 00:01:01,199
let's get started

25
00:01:01,199 --> 00:01:04,080
so how did i ended up here right uh over

26
00:01:04,080 --> 00:01:05,600
a year ago i was doing some research

27
00:01:05,600 --> 00:01:07,439
about javascript affiliation

28
00:01:07,439 --> 00:01:09,600
and during and and as a result of that

29
00:01:09,600 --> 00:01:11,040
research i published three different

30
00:01:11,040 --> 00:01:13,280
blogs try to describe different elements

31
00:01:13,280 --> 00:01:16,720
or aspects of javascription i was going

32
00:01:16,720 --> 00:01:18,240
over some of the techniques being used

33
00:01:18,240 --> 00:01:20,799
in the wild and trying to create a

34
00:01:20,799 --> 00:01:23,119
dictionary based kind of notion for that

35
00:01:23,119 --> 00:01:25,680
i was going on a specific example and

36
00:01:25,680 --> 00:01:28,240
taking that example and breaking that to

37
00:01:28,240 --> 00:01:30,079
very small pieces and trying to follow

38
00:01:30,079 --> 00:01:30,880
those

39
00:01:30,880 --> 00:01:33,280
kind of code and try to figure out what

40
00:01:33,280 --> 00:01:35,280
really happens out there which is uh

41
00:01:35,280 --> 00:01:36,799
that the image that you see in front of

42
00:01:36,799 --> 00:01:39,119
you and the last one was i tried to show

43
00:01:39,119 --> 00:01:40,720
some trends on

44
00:01:40,720 --> 00:01:42,320
you know javascript javascript

45
00:01:42,320 --> 00:01:43,759
foundation being used on phishing

46
00:01:43,759 --> 00:01:44,960
websites

47
00:01:44,960 --> 00:01:47,759
and and when i was doing that and that's

48
00:01:47,759 --> 00:01:49,600
the interesting part and as you can see

49
00:01:49,600 --> 00:01:51,920
in the image in front of you when you

50
00:01:51,920 --> 00:01:54,079
look on obfuscated javascript code it's

51
00:01:54,079 --> 00:01:55,360
really really hard to understand what

52
00:01:55,360 --> 00:01:57,280
really happens here and it's a bit

53
00:01:57,280 --> 00:01:58,479
challenging to do that it's not

54
00:01:58,479 --> 00:02:00,320
impossible it's not something that this

55
00:02:00,320 --> 00:02:02,159
is you know cannot be done

56
00:02:02,159 --> 00:02:03,920
but once you go over those examples and

57
00:02:03,920 --> 00:02:06,560
try to do some defuscation and debugging

58
00:02:06,560 --> 00:02:08,399
for that you will have some challenges

59
00:02:08,399 --> 00:02:11,680
and and definitely don't have skill

60
00:02:11,680 --> 00:02:14,239
in the context of creating the ability

61
00:02:14,239 --> 00:02:18,720
to identify a mass amount of files or

62
00:02:18,720 --> 00:02:21,120
pages that are using javascript station

63
00:02:21,120 --> 00:02:23,599
so that's initiated my project and these

64
00:02:23,599 --> 00:02:25,599
are the four objectives that i had once

65
00:02:25,599 --> 00:02:27,920
i started this research project

66
00:02:27,920 --> 00:02:30,080
so the first one the first objective was

67
00:02:30,080 --> 00:02:32,000
to try to figure out if i can find a

68
00:02:32,000 --> 00:02:34,560
technique that will enable me to do

69
00:02:34,560 --> 00:02:37,360
detection for obfuscating javascript

70
00:02:37,360 --> 00:02:39,280
and preferably doing that for a

71
00:02:39,280 --> 00:02:41,040
malicious office scale javascript and

72
00:02:41,040 --> 00:02:43,360
we'll spend a significant amount of time

73
00:02:43,360 --> 00:02:45,920
to talk about you know what's why why

74
00:02:45,920 --> 00:02:47,280
i'm mentioning malicious right why

75
00:02:47,280 --> 00:02:48,720
javascript location is not modification

76
00:02:48,720 --> 00:02:51,440
by default the second objective was to

77
00:02:51,440 --> 00:02:53,440
do that at scale as i mentioned it's not

78
00:02:53,440 --> 00:02:56,480
about doing 5 10 or 20 kind of those

79
00:02:56,480 --> 00:02:58,319
five per you know

80
00:02:58,319 --> 00:03:00,080
a given time frame hour a day or

81
00:03:00,080 --> 00:03:02,159
whatever it's about the scale it's about

82
00:03:02,159 --> 00:03:04,720
doing that on huge amount of files and

83
00:03:04,720 --> 00:03:07,120
doing that really quickly and that's the

84
00:03:07,120 --> 00:03:10,000
third element here which was my choice

85
00:03:10,000 --> 00:03:12,879
to use a static analysis technique for

86
00:03:12,879 --> 00:03:13,920
doing that

87
00:03:13,920 --> 00:03:16,319
i don't want to be able to render those

88
00:03:16,319 --> 00:03:19,200
pages that i suspect that are using

89
00:03:19,200 --> 00:03:21,200
javascript obfuscation that's part of my

90
00:03:21,200 --> 00:03:23,519
limitation i need to do that on the

91
00:03:23,519 --> 00:03:25,519
actual file that's been sent without

92
00:03:25,519 --> 00:03:27,519
being able to render that file

93
00:03:27,519 --> 00:03:29,280
and some of the reasons behind that are

94
00:03:29,280 --> 00:03:31,040
related to performance and this is some

95
00:03:31,040 --> 00:03:33,840
of my objective in that context

96
00:03:33,840 --> 00:03:35,760
and the last objective which is an

97
00:03:35,760 --> 00:03:38,239
important one was that my assumption of

98
00:03:38,239 --> 00:03:40,159
pareto principle which means in other

99
00:03:40,159 --> 00:03:41,440
words

100
00:03:41,440 --> 00:03:44,959
i'm not in here into detecting any kind

101
00:03:44,959 --> 00:03:47,840
or any version or a variation of the

102
00:03:47,840 --> 00:03:51,440
ability to do to use javascript station

103
00:03:51,440 --> 00:03:54,319
it's about trying to use

104
00:03:54,319 --> 00:03:56,560
our ability to map

105
00:03:56,560 --> 00:03:59,040
the most use the most popular

106
00:03:59,040 --> 00:04:00,640
javascript package

107
00:04:00,640 --> 00:04:02,080
javascript packet are the software that

108
00:04:02,080 --> 00:04:04,000
being used to to

109
00:04:04,000 --> 00:04:06,560
offscate a given javascript code

110
00:04:06,560 --> 00:04:08,799
using the ability to detect those

111
00:04:08,799 --> 00:04:11,680
packers and by using and by detecting

112
00:04:11,680 --> 00:04:14,560
them eliminated 80 of the problem of

113
00:04:14,560 --> 00:04:16,320
javascript officiation being used in the

114
00:04:16,320 --> 00:04:18,639
world because those packers their most

115
00:04:18,639 --> 00:04:21,199
used one create the most

116
00:04:21,199 --> 00:04:23,199
value in the context of detection and

117
00:04:23,199 --> 00:04:25,120
that was one of the objectives that i

118
00:04:25,120 --> 00:04:27,120
had in mind

119
00:04:27,120 --> 00:04:28,960
and here are some links to to the to the

120
00:04:28,960 --> 00:04:30,160
research that i was doing over a year

121
00:04:30,160 --> 00:04:32,800
ago uh so when i started this project i

122
00:04:32,800 --> 00:04:34,320
had a few questions so the first

123
00:04:34,320 --> 00:04:37,040
question that came to mind was hey how

124
00:04:37,040 --> 00:04:39,040
uh or in other words why and how

125
00:04:39,040 --> 00:04:40,800
javascript is being obfuscated so what

126
00:04:40,800 --> 00:04:42,479
are the reasons for that and we'll try

127
00:04:42,479 --> 00:04:44,000
to address that

128
00:04:44,000 --> 00:04:45,440
what are the numbers behind the use of

129
00:04:45,440 --> 00:04:47,440
javascript obfuscation in the world so

130
00:04:47,440 --> 00:04:49,840
right i chose some project but but is it

131
00:04:49,840 --> 00:04:51,680
valuable do we see a lot of those

132
00:04:51,680 --> 00:04:53,199
numbers out there do you see these

133
00:04:53,199 --> 00:04:54,880
techniques being used in the web and

134
00:04:54,880 --> 00:04:56,160
what are the numbers behind that and

135
00:04:56,160 --> 00:04:57,919
that was a really important thing for me

136
00:04:57,919 --> 00:04:59,440
to address

137
00:04:59,440 --> 00:05:02,160
um the the the third question was is it

138
00:05:02,160 --> 00:05:04,240
possible to detect office kid in

139
00:05:04,240 --> 00:05:05,840
javascript right

140
00:05:05,840 --> 00:05:07,600
and and right this is why we are here

141
00:05:07,600 --> 00:05:09,600
today and me trying to figure out if we

142
00:05:09,600 --> 00:05:11,120
can do that or not as part of my

143
00:05:11,120 --> 00:05:12,240
research

144
00:05:12,240 --> 00:05:13,600
and last and and

145
00:05:13,600 --> 00:05:16,240
and i touched that and i will continue

146
00:05:16,240 --> 00:05:17,600
to address that

147
00:05:17,600 --> 00:05:19,199
what does it mean of escalation does it

148
00:05:19,199 --> 00:05:21,120
mean malicious when we see something

149
00:05:21,120 --> 00:05:23,600
obfuscated that's directly indicate that

150
00:05:23,600 --> 00:05:25,440
something is malicious well the

151
00:05:25,440 --> 00:05:28,240
intuitive answer is that it's no but we

152
00:05:28,240 --> 00:05:30,960
will address that in more details

153
00:05:30,960 --> 00:05:32,479
so let's get started from the beginning

154
00:05:32,479 --> 00:05:34,560
why jobs can be confiscated so

155
00:05:34,560 --> 00:05:37,199
javascript is a client-side scripting

156
00:05:37,199 --> 00:05:39,039
language running in most cases in our

157
00:05:39,039 --> 00:05:40,479
browsers

158
00:05:40,479 --> 00:05:41,520
and

159
00:05:41,520 --> 00:05:44,080
once we have this a code that run on our

160
00:05:44,080 --> 00:05:45,919
browser we actually have the code so we

161
00:05:45,919 --> 00:05:48,960
can actually understand the logic

162
00:05:48,960 --> 00:05:52,479
and and the steps that you know happens

163
00:05:52,479 --> 00:05:54,479
once that code is being executed it's

164
00:05:54,479 --> 00:05:55,919
really simple

165
00:05:55,919 --> 00:05:57,919
so in other words if someone want to

166
00:05:57,919 --> 00:05:59,840
make sure that the code that's run on

167
00:05:59,840 --> 00:06:01,440
our browser

168
00:06:01,440 --> 00:06:04,720
is not well understand right it's not

169
00:06:04,720 --> 00:06:06,319
it's really hard to understand that

170
00:06:06,319 --> 00:06:09,039
chord or it's really hard to debug that

171
00:06:09,039 --> 00:06:10,000
code

172
00:06:10,000 --> 00:06:11,680
that's the reason why we'll do

173
00:06:11,680 --> 00:06:13,199
obfuscation

174
00:06:13,199 --> 00:06:15,440
and in a sense right as i mentioned

175
00:06:15,440 --> 00:06:17,199
before it's not impossible to do the

176
00:06:17,199 --> 00:06:18,880
obfuscation for your code so it's a

177
00:06:18,880 --> 00:06:21,440
security web security right it's making

178
00:06:21,440 --> 00:06:24,080
uh our ability to understand that code

179
00:06:24,080 --> 00:06:27,039
the toronto browser are much harder so

180
00:06:27,039 --> 00:06:28,880
that's the incentive for someone to use

181
00:06:28,880 --> 00:06:29,840
that

182
00:06:29,840 --> 00:06:31,520
but there is another incentive for that

183
00:06:31,520 --> 00:06:32,400
which is

184
00:06:32,400 --> 00:06:34,880
in the relationship between

185
00:06:34,880 --> 00:06:38,000
um defenders and threat actors right we

186
00:06:38,000 --> 00:06:40,319
have abilities to detect those kind of

187
00:06:40,319 --> 00:06:42,160
you know malicious files that are being

188
00:06:42,160 --> 00:06:44,800
sent to our browser or to our computer

189
00:06:44,800 --> 00:06:46,479
and some of those techniques being used

190
00:06:46,479 --> 00:06:48,880
are hash based or text-based detection

191
00:06:48,880 --> 00:06:49,919
techniques

192
00:06:49,919 --> 00:06:52,560
and once you use an office skate

193
00:06:52,560 --> 00:06:55,599
to obfuscate the code that you send

194
00:06:55,599 --> 00:06:57,199
to the clients

195
00:06:57,199 --> 00:06:59,360
that mean that from a detection point of

196
00:06:59,360 --> 00:07:00,960
view it's much harder to detect that by

197
00:07:00,960 --> 00:07:03,520
text or hash detection and that's one of

198
00:07:03,520 --> 00:07:05,599
the incentives for some you know threat

199
00:07:05,599 --> 00:07:07,440
actor to use those techniques to make

200
00:07:07,440 --> 00:07:10,080
our life much harder and in a way to try

201
00:07:10,080 --> 00:07:12,160
to evade detection from

202
00:07:12,160 --> 00:07:13,919
adversary point of view

203
00:07:13,919 --> 00:07:16,160
now there is a different translation for

204
00:07:16,160 --> 00:07:18,479
that and that's something in my mind of

205
00:07:18,479 --> 00:07:21,759
the relationship between um defender and

206
00:07:21,759 --> 00:07:24,400
adversaries right so from a defensive

207
00:07:24,400 --> 00:07:26,080
point of view when you need more

208
00:07:26,080 --> 00:07:28,080
resources right you need to more

209
00:07:28,080 --> 00:07:30,479
resources to to go over some files and

210
00:07:30,479 --> 00:07:32,000
try to figure out what really happens on

211
00:07:32,000 --> 00:07:34,639
those files because they were obfuscated

212
00:07:34,639 --> 00:07:37,039
uh that might result with more time and

213
00:07:37,039 --> 00:07:39,680
once those two conditions are met the

214
00:07:39,680 --> 00:07:41,759
chances are that you will have lower

215
00:07:41,759 --> 00:07:43,199
detection because you need to work

216
00:07:43,199 --> 00:07:44,800
harder to do that whether they you are

217
00:07:44,800 --> 00:07:47,360
doing that manually right as i was doing

218
00:07:47,360 --> 00:07:49,039
at the beginning what if you are doing

219
00:07:49,039 --> 00:07:51,199
that automatically it will require more

220
00:07:51,199 --> 00:07:53,680
processing time to do that and from an

221
00:07:53,680 --> 00:07:55,360
adversary point of view

222
00:07:55,360 --> 00:07:57,039
most changes is that they will see

223
00:07:57,039 --> 00:07:58,639
higher success rates

224
00:07:58,639 --> 00:08:01,680
which means more revenue more money

225
00:08:01,680 --> 00:08:03,440
you know more damage that they can

226
00:08:03,440 --> 00:08:05,440
create and that equation is something

227
00:08:05,440 --> 00:08:06,160
that

228
00:08:06,160 --> 00:08:08,000
in my mind expect a lot of the things

229
00:08:08,000 --> 00:08:09,280
that we see out there a lot of the

230
00:08:09,280 --> 00:08:11,919
trends right regardless of obfuscation a

231
00:08:11,919 --> 00:08:13,360
lot of thread that we see out there are

232
00:08:13,360 --> 00:08:15,840
derived from that equation

233
00:08:15,840 --> 00:08:17,520
so we talked about the y let's talk

234
00:08:17,520 --> 00:08:19,199
about the how right

235
00:08:19,199 --> 00:08:21,680
so how javascript uh uh how javascript

236
00:08:21,680 --> 00:08:24,800
is being obfuscated so one way to do it

237
00:08:24,800 --> 00:08:26,720
is to create a repetitive meaningless

238
00:08:26,720 --> 00:08:29,120
function of varnish or you can

239
00:08:29,120 --> 00:08:31,120
you create a code that contains a lot of

240
00:08:31,120 --> 00:08:33,200
you know those things and when you look

241
00:08:33,200 --> 00:08:34,640
into that code it's really really hard

242
00:08:34,640 --> 00:08:36,799
to understand what's the meaning of the

243
00:08:36,799 --> 00:08:38,240
code what's the context of being

244
00:08:38,240 --> 00:08:40,159
executed because there is a

245
00:08:40,159 --> 00:08:41,760
repetitiveness because there is

246
00:08:41,760 --> 00:08:43,839
meaningless kind of function environment

247
00:08:43,839 --> 00:08:45,680
that are really not readable and

248
00:08:45,680 --> 00:08:47,279
therefore it's really hard to understand

249
00:08:47,279 --> 00:08:48,640
that

250
00:08:48,640 --> 00:08:50,279
another way to do that is to use

251
00:08:50,279 --> 00:08:52,880
anti-debugging code techniques meaning

252
00:08:52,880 --> 00:08:54,480
once you want to try to understand it

253
00:08:54,480 --> 00:08:56,320
because when you want to try to go over

254
00:08:56,320 --> 00:08:58,320
that code and do debugging for that code

255
00:08:58,320 --> 00:09:00,320
you will have some problem in doing that

256
00:09:00,320 --> 00:09:02,160
right it's not impossible but it will

257
00:09:02,160 --> 00:09:04,959
make your life much harder

258
00:09:04,959 --> 00:09:07,200
and the last element well right and

259
00:09:07,200 --> 00:09:09,360
these are three really generic kind of

260
00:09:09,360 --> 00:09:11,920
notions of how javascript is being

261
00:09:11,920 --> 00:09:14,160
obfuscated um

262
00:09:14,160 --> 00:09:17,120
consuming more computing resources or

263
00:09:17,120 --> 00:09:18,160
time

264
00:09:18,160 --> 00:09:20,080
and in other words for example

265
00:09:20,080 --> 00:09:23,600
introducing dead code or timers into the

266
00:09:23,600 --> 00:09:26,080
javascript that you you're using will at

267
00:09:26,080 --> 00:09:27,839
the end of the day create much more

268
00:09:27,839 --> 00:09:31,519
processing time or much more um um you

269
00:09:31,519 --> 00:09:32,399
know

270
00:09:32,399 --> 00:09:35,040
debug debugging time and as a result of

271
00:09:35,040 --> 00:09:37,200
that time is uh is a factor for

272
00:09:37,200 --> 00:09:38,880
detection and as a result of that they

273
00:09:38,880 --> 00:09:40,880
might have a greater

274
00:09:40,880 --> 00:09:42,800
well success rate in the in the context

275
00:09:42,800 --> 00:09:46,560
of things will not be detected on time

276
00:09:46,560 --> 00:09:48,000
so we talked about the why we talked

277
00:09:48,000 --> 00:09:50,080
about the how now let's get to practice

278
00:09:50,080 --> 00:09:51,120
right so

279
00:09:51,120 --> 00:09:52,880
over here you go i was doing my research

280
00:09:52,880 --> 00:09:54,800
and and and as part of binary server was

281
00:09:54,800 --> 00:09:56,880
able to see four different samples these

282
00:09:56,880 --> 00:09:59,519
are snapshots from four different files

283
00:09:59,519 --> 00:10:01,519
that i was able to see

284
00:10:01,519 --> 00:10:03,279
that were off schedule javascript files

285
00:10:03,279 --> 00:10:05,760
that were obfuscated and when i at the

286
00:10:05,760 --> 00:10:07,920
beginning look into those files and into

287
00:10:07,920 --> 00:10:09,920
those snapshots from those files they

288
00:10:09,920 --> 00:10:11,920
were saying hey they are definitely not

289
00:10:11,920 --> 00:10:14,240
the same but when i tried to zoom out i

290
00:10:14,240 --> 00:10:15,760
was saying hey there's something here

291
00:10:15,760 --> 00:10:17,440
i'm not sure about it but wait wait wait

292
00:10:17,440 --> 00:10:19,360
before saying that there is something

293
00:10:19,360 --> 00:10:20,959
that might be

294
00:10:20,959 --> 00:10:22,880
similar between them i can tell you they

295
00:10:22,880 --> 00:10:24,240
are not the same

296
00:10:24,240 --> 00:10:26,079
different file why why do i know that

297
00:10:26,079 --> 00:10:27,519
there are different files because the

298
00:10:27,519 --> 00:10:30,079
two upper examples are coming from two

299
00:10:30,079 --> 00:10:33,920
fishing pages different fishing pages

300
00:10:33,920 --> 00:10:35,920
the first one from a

301
00:10:35,920 --> 00:10:38,720
tech industry kind of fishing page uh

302
00:10:38,720 --> 00:10:41,200
the second one from a banking uh fishing

303
00:10:41,200 --> 00:10:44,720
page different not related whatsoever

304
00:10:44,720 --> 00:10:47,600
the two lower ones the the the right one

305
00:10:47,600 --> 00:10:49,600
is a mellow dropper on on the left you

306
00:10:49,600 --> 00:10:51,200
can see mage card

307
00:10:51,200 --> 00:10:54,079
uh javascript being obfuscated meaning

308
00:10:54,079 --> 00:10:55,839
you know different thread different you

309
00:10:55,839 --> 00:10:56,720
know

310
00:10:56,720 --> 00:10:59,920
code that was originally created right

311
00:10:59,920 --> 00:11:02,560
no relation no threat actors are related

312
00:11:02,560 --> 00:11:04,399
but there is something that related to

313
00:11:04,399 --> 00:11:06,480
those things and as i mentioned there is

314
00:11:06,480 --> 00:11:09,440
some pattern here that is repetitive and

315
00:11:09,440 --> 00:11:12,079
that's the pattern here so you see an

316
00:11:12,079 --> 00:11:14,079
anonymous function that get two

317
00:11:14,079 --> 00:11:16,079
variables and and in that function you

318
00:11:16,079 --> 00:11:17,839
have a variable that

319
00:11:17,839 --> 00:11:19,920
contains a

320
00:11:19,920 --> 00:11:22,399
function drawn into that and that

321
00:11:22,399 --> 00:11:24,480
function has a while with a decreasing

322
00:11:24,480 --> 00:11:26,640
on an integer value and then there is

323
00:11:26,640 --> 00:11:28,000
some pushing and shifting meaning

324
00:11:28,000 --> 00:11:30,880
there's some manipulation on a payload

325
00:11:30,880 --> 00:11:32,800
it's part of that function

326
00:11:32,800 --> 00:11:34,480
and that function is actually

327
00:11:34,480 --> 00:11:37,120
representing some functionality for a

328
00:11:37,120 --> 00:11:39,279
javascript off skater or javascript

329
00:11:39,279 --> 00:11:40,480
packer

330
00:11:40,480 --> 00:11:43,360
and that functionality might look a bit

331
00:11:43,360 --> 00:11:45,279
different right as we can see on those

332
00:11:45,279 --> 00:11:47,279
four different examples but the

333
00:11:47,279 --> 00:11:49,680
functionality and the structure of that

334
00:11:49,680 --> 00:11:51,760
functionality functionality is

335
00:11:51,760 --> 00:11:53,440
repetitive

336
00:11:53,440 --> 00:11:56,240
and that actually led me to say hey so

337
00:11:56,240 --> 00:11:58,800
if there is a structure right i cannot

338
00:11:58,800 --> 00:12:01,760
do detection of that function by using

339
00:12:01,760 --> 00:12:03,200
hash values

340
00:12:03,200 --> 00:12:04,320
or

341
00:12:04,320 --> 00:12:07,200
or text because it's constantly changing

342
00:12:07,200 --> 00:12:09,600
but if there is structure maybe i can

343
00:12:09,600 --> 00:12:12,079
detect that structure in a way and in

344
00:12:12,079 --> 00:12:13,519
order to do that

345
00:12:13,519 --> 00:12:15,360
i was moving into the solution space

346
00:12:15,360 --> 00:12:17,040
where i created some sort of a proof of

347
00:12:17,040 --> 00:12:19,120
concept and in that proof of concept i

348
00:12:19,120 --> 00:12:20,240
was using

349
00:12:20,240 --> 00:12:23,440
a parsing for javascript

350
00:12:23,440 --> 00:12:26,079
named ast which is abstract symmetric

351
00:12:26,079 --> 00:12:28,639
tree and that kind of

352
00:12:28,639 --> 00:12:29,839
well

353
00:12:29,839 --> 00:12:32,399
ability to take a javascript and

354
00:12:32,399 --> 00:12:35,680
represent it as a json file kind of

355
00:12:35,680 --> 00:12:38,639
format as you can see on your right with

356
00:12:38,639 --> 00:12:41,200
a really really structured way with the

357
00:12:41,200 --> 00:12:42,959
ability to say

358
00:12:42,959 --> 00:12:45,040
here is the javascript functionality

359
00:12:45,040 --> 00:12:48,000
being translated to an

360
00:12:48,000 --> 00:12:51,200
structure that we know the values and

361
00:12:51,200 --> 00:12:54,880
the attributes of that structure

362
00:12:54,880 --> 00:12:56,959
and when i had that structure out of

363
00:12:56,959 --> 00:12:59,920
that json kind of structure i was able

364
00:12:59,920 --> 00:13:02,079
to say hey so i can run on that

365
00:13:02,079 --> 00:13:05,040
structure and try to pull up some of

366
00:13:05,040 --> 00:13:08,959
those indications and some of those

367
00:13:08,959 --> 00:13:11,519
metadata of that javascript

368
00:13:11,519 --> 00:13:14,240
functionality being executed and just

369
00:13:14,240 --> 00:13:17,200
ask the relevant question on that and be

370
00:13:17,200 --> 00:13:19,760
able to detect the structure of that and

371
00:13:19,760 --> 00:13:22,320
once i know that that structure is

372
00:13:22,320 --> 00:13:23,279
unique

373
00:13:23,279 --> 00:13:26,480
in a way i created a signature for that

374
00:13:26,480 --> 00:13:28,240
kind of functionality for that

375
00:13:28,240 --> 00:13:30,480
obfuscation functionality

376
00:13:30,480 --> 00:13:32,560
and if i will be able to prove that that

377
00:13:32,560 --> 00:13:35,200
functionality is unique to that packer i

378
00:13:35,200 --> 00:13:37,120
created a really unique and genuine

379
00:13:37,120 --> 00:13:39,440
signature so that the technique that was

380
00:13:39,440 --> 00:13:42,480
the technique i was using um i act well

381
00:13:42,480 --> 00:13:45,120
i implemented that as a proof of concept

382
00:13:45,120 --> 00:13:46,959
and started to say hey so now it's the

383
00:13:46,959 --> 00:13:48,800
time for me to validate it how can i

384
00:13:48,800 --> 00:13:51,440
take that tool that i created as part of

385
00:13:51,440 --> 00:13:53,680
my research and try to validate that

386
00:13:53,680 --> 00:13:55,440
against different

387
00:13:55,440 --> 00:13:57,839
data sets to be able to say hey the the

388
00:13:57,839 --> 00:13:59,680
concept that i suggested

389
00:13:59,680 --> 00:14:01,279
is really working right

390
00:14:01,279 --> 00:14:03,920
the the it's not just a theory it's it's

391
00:14:03,920 --> 00:14:06,320
something in practice can work

392
00:14:06,320 --> 00:14:08,720
in order to do that i was doing some you

393
00:14:08,720 --> 00:14:11,360
know first step was to try to figure out

394
00:14:11,360 --> 00:14:13,279
well a different

395
00:14:13,279 --> 00:14:14,320
um

396
00:14:14,320 --> 00:14:16,399
package that i want to map and create

397
00:14:16,399 --> 00:14:18,160
signature those structure based

398
00:14:18,160 --> 00:14:20,560
signature for those uh packers and i

399
00:14:20,560 --> 00:14:22,240
have five different packages that was

400
00:14:22,240 --> 00:14:24,240
able to find the first two and we'll go

401
00:14:24,240 --> 00:14:26,399
over that really quickly it's not

402
00:14:26,399 --> 00:14:28,399
it's not the really main issue here

403
00:14:28,399 --> 00:14:31,279
today uh the first two ones are really

404
00:14:31,279 --> 00:14:32,720
simple kind of

405
00:14:32,720 --> 00:14:35,680
uh off skaters that are doing very well

406
00:14:35,680 --> 00:14:37,440
they're not new ones and they're doing a

407
00:14:37,440 --> 00:14:40,399
lot of those kind of fusion out there um

408
00:14:40,399 --> 00:14:42,480
the third and fourth and the fifth we

409
00:14:42,480 --> 00:14:44,720
will go over them quickly are doing a

410
00:14:44,720 --> 00:14:48,560
very well repetitive and a well-known

411
00:14:48,560 --> 00:14:50,880
kind of obfuscation functionality which

412
00:14:50,880 --> 00:14:53,040
is to take a payload and do some

413
00:14:53,040 --> 00:14:54,959
manipulation on that payload whether

414
00:14:54,959 --> 00:14:57,519
that to split that payload or to encrypt

415
00:14:57,519 --> 00:15:01,440
that payload and then the the offscater

416
00:15:01,440 --> 00:15:04,000
code or of skating or de-office scaling

417
00:15:04,000 --> 00:15:06,639
code will run on that payload will do

418
00:15:06,639 --> 00:15:07,839
the

419
00:15:07,839 --> 00:15:09,760
de-office gating of that creating the

420
00:15:09,760 --> 00:15:12,639
original code that needs to be executed

421
00:15:12,639 --> 00:15:15,120
and that code will be executed once

422
00:15:15,120 --> 00:15:17,360
being rendered and the functionality of

423
00:15:17,360 --> 00:15:18,639
the malicious functionality for that

424
00:15:18,639 --> 00:15:20,800
javascript will be executed right that's

425
00:15:20,800 --> 00:15:22,800
the basic concept of that so you see the

426
00:15:22,800 --> 00:15:25,440
cactus on the number the third one and

427
00:15:25,440 --> 00:15:27,199
you can see that the fourth and the

428
00:15:27,199 --> 00:15:29,199
fifth one the packer and the shift push

429
00:15:29,199 --> 00:15:30,880
one right the fifth one is the one that

430
00:15:30,880 --> 00:15:33,360
we saw before the fourth one as you can

431
00:15:33,360 --> 00:15:35,040
see i called it packer and we will talk

432
00:15:35,040 --> 00:15:37,199
about the reason why i called him pecker

433
00:15:37,199 --> 00:15:39,120
and we'll so we'll see some example of

434
00:15:39,120 --> 00:15:42,000
that later on right so i have

435
00:15:42,000 --> 00:15:44,079
five different packers that was able to

436
00:15:44,079 --> 00:15:44,880
create

437
00:15:44,880 --> 00:15:47,360
a structure based signature with those

438
00:15:47,360 --> 00:15:48,320
packers

439
00:15:48,320 --> 00:15:50,160
and i was saying hey that's time to

440
00:15:50,160 --> 00:15:52,480
evaluate that so let's see how i

441
00:15:52,480 --> 00:15:54,000
evaluated it right you can see on the

442
00:15:54,000 --> 00:15:56,880
left side five different packers and we

443
00:15:56,880 --> 00:15:59,040
can see started see some data sets so

444
00:15:59,040 --> 00:16:01,279
the first data set was which was a bit

445
00:16:01,279 --> 00:16:03,120
dirty but it was good enough for the

446
00:16:03,120 --> 00:16:05,199
beginning of the research was a phishing

447
00:16:05,199 --> 00:16:08,480
database with over 100 000 different

448
00:16:08,480 --> 00:16:11,600
pages and i evaluated those

449
00:16:11,600 --> 00:16:14,079
different uh packers and the signature

450
00:16:14,079 --> 00:16:15,600
that the pattern-based signature that i

451
00:16:15,600 --> 00:16:16,959
created for that packet i was able to

452
00:16:16,959 --> 00:16:18,480
see detection which is a good thing

453
00:16:18,480 --> 00:16:20,639
right that means that uh i'm on the

454
00:16:20,639 --> 00:16:23,519
right track and then i was doing more

455
00:16:23,519 --> 00:16:25,600
validation with a much more precise and

456
00:16:25,600 --> 00:16:28,240
much more quality kind of data set which

457
00:16:28,240 --> 00:16:30,560
i labeled as malware he had different

458
00:16:30,560 --> 00:16:32,800
samples not just now but it was has some

459
00:16:32,800 --> 00:16:35,839
crypto mining javascript there it has a

460
00:16:35,839 --> 00:16:37,839
bit fishing pages over there but it was

461
00:16:37,839 --> 00:16:40,240
really quality one really label and

462
00:16:40,240 --> 00:16:42,079
really good one and i was able to see

463
00:16:42,079 --> 00:16:43,920
detection as well which is a really

464
00:16:43,920 --> 00:16:46,160
great thing right i'm doing something

465
00:16:46,160 --> 00:16:49,839
new i'm detecting things that i had some

466
00:16:49,839 --> 00:16:52,720
issues with detecting before because

467
00:16:52,720 --> 00:16:53,759
right

468
00:16:53,759 --> 00:16:54,959
as i mentioned

469
00:16:54,959 --> 00:16:57,440
obfuscation create a lot of challenges

470
00:16:57,440 --> 00:16:59,360
when you use really

471
00:16:59,360 --> 00:17:01,440
traditional kind of detection techniques

472
00:17:01,440 --> 00:17:04,000
such as textbooks and hash base and from

473
00:17:04,000 --> 00:17:06,480
my point of view and my objective to be

474
00:17:06,480 --> 00:17:09,439
able to detect those kind of examples

475
00:17:09,439 --> 00:17:11,280
without you know those kind of

476
00:17:11,280 --> 00:17:13,280
techniques that was the new kind of

477
00:17:13,280 --> 00:17:15,599
detection that i had now

478
00:17:15,599 --> 00:17:18,240
first two data sets are classified as

479
00:17:18,240 --> 00:17:19,359
malicious

480
00:17:19,359 --> 00:17:21,599
the second to the data set that i was

481
00:17:21,599 --> 00:17:25,760
using alexa and some random data set

482
00:17:25,760 --> 00:17:28,319
are data sets that represent something

483
00:17:28,319 --> 00:17:30,400
that i would assume is benign right

484
00:17:30,400 --> 00:17:33,039
going to alexa top

485
00:17:33,039 --> 00:17:36,559
18 000 most popular website

486
00:17:36,559 --> 00:17:38,320
uh go over those

487
00:17:38,320 --> 00:17:40,160
websites and try to figure out if

488
00:17:40,160 --> 00:17:41,679
javascript authorization techniques are

489
00:17:41,679 --> 00:17:44,240
being used on those pages um

490
00:17:44,240 --> 00:17:46,160
that's give me the ability to know which

491
00:17:46,160 --> 00:17:48,320
really happened on the benign side of

492
00:17:48,320 --> 00:17:50,400
data and i was able to see some

493
00:17:50,400 --> 00:17:51,919
detection there and that's interesting

494
00:17:51,919 --> 00:17:53,679
right and we'll cover that

495
00:17:53,679 --> 00:17:55,039
so let's start with the numbers right

496
00:17:55,039 --> 00:17:57,200
which is detection rate so you can see

497
00:17:57,200 --> 00:17:59,919
the phishing is 2.1 which as i mentioned

498
00:17:59,919 --> 00:18:03,200
it's a bit dirty kind of a data set not

499
00:18:03,200 --> 00:18:05,679
clean enough not curated enough but

500
00:18:05,679 --> 00:18:08,080
detection as well when you go to the

501
00:18:08,080 --> 00:18:11,280
malware data set you can see 26

502
00:18:11,280 --> 00:18:13,840
of that data set was using obfuscation

503
00:18:13,840 --> 00:18:16,000
techniques only those five packers right

504
00:18:16,000 --> 00:18:17,440
we might have more

505
00:18:17,440 --> 00:18:19,280
and that's an amazing number that number

506
00:18:19,280 --> 00:18:21,120
told me that well

507
00:18:21,120 --> 00:18:24,480
obfuscation well javascript fusion

508
00:18:24,480 --> 00:18:27,039
has become a really

509
00:18:27,039 --> 00:18:29,440
well trivial kind of techniques being

510
00:18:29,440 --> 00:18:30,880
used in the world

511
00:18:30,880 --> 00:18:33,280
to create much more challenges for us

512
00:18:33,280 --> 00:18:35,039
from a defensive point of view it became

513
00:18:35,039 --> 00:18:37,280
a mainstream in that sense and that's

514
00:18:37,280 --> 00:18:38,559
something that we definitely need to

515
00:18:38,559 --> 00:18:41,200
address now when we look into the alexa

516
00:18:41,200 --> 00:18:42,799
and the random data set we can see that

517
00:18:42,799 --> 00:18:45,840
the detection rate is 0.5 which is low

518
00:18:45,840 --> 00:18:48,160
but it's not zero meaning

519
00:18:48,160 --> 00:18:49,760
javascript fascination is being used out

520
00:18:49,760 --> 00:18:52,160
there for benign website why do i know

521
00:18:52,160 --> 00:18:54,160
that they are benign because i was going

522
00:18:54,160 --> 00:18:56,480
over those examples i was going over

523
00:18:56,480 --> 00:18:58,480
those detections

524
00:18:58,480 --> 00:18:59,200
and

525
00:18:59,200 --> 00:19:01,760
it was clear to me and and i was you

526
00:19:01,760 --> 00:19:03,600
know validated that that it's not a

527
00:19:03,600 --> 00:19:06,240
malicious website or malicious content

528
00:19:06,240 --> 00:19:08,640
or malicious code that got into those

529
00:19:08,640 --> 00:19:12,240
website it was benign and legit code

530
00:19:12,240 --> 00:19:13,919
being obfuscated which is an important

531
00:19:13,919 --> 00:19:17,679
thing to to to to say in that context so

532
00:19:17,679 --> 00:19:19,520
inside javascript fusion detection is

533
00:19:19,520 --> 00:19:21,360
accurate right uh the malicious being

534
00:19:21,360 --> 00:19:23,360
detected as obfuscated which is makes

535
00:19:23,360 --> 00:19:26,160
sense uh the alexander random as well i

536
00:19:26,160 --> 00:19:28,480
was going to be over those examples

537
00:19:28,480 --> 00:19:31,120
i was not having like that we created

538
00:19:31,120 --> 00:19:33,679
the technique that profile

539
00:19:33,679 --> 00:19:36,640
a javascript packer right

540
00:19:36,640 --> 00:19:37,520
and

541
00:19:37,520 --> 00:19:39,600
by doing a lot of validation what i was

542
00:19:39,600 --> 00:19:41,120
able to say is that

543
00:19:41,120 --> 00:19:43,200
all the things that i detected

544
00:19:43,200 --> 00:19:45,760
are actually that signature for those

545
00:19:45,760 --> 00:19:48,000
packers and not something else meaning

546
00:19:48,000 --> 00:19:49,120
it's not

547
00:19:49,120 --> 00:19:51,600
something that looks very similar to the

548
00:19:51,600 --> 00:19:54,080
obfuscation techniques that i

549
00:19:54,080 --> 00:19:56,000
created signature for them and as a

550
00:19:56,000 --> 00:19:57,280
result of that

551
00:19:57,280 --> 00:19:59,360
we might define that as false positive

552
00:19:59,360 --> 00:20:01,919
it was accurate detection because it was

553
00:20:01,919 --> 00:20:05,039
an obfuscator that is being detected

554
00:20:05,039 --> 00:20:07,120
hope that makes sense um

555
00:20:07,120 --> 00:20:09,360
detection over 4 000 new phishing

556
00:20:09,360 --> 00:20:11,440
malware domain that were detected right

557
00:20:11,440 --> 00:20:13,679
again going back to my objectives it's

558
00:20:13,679 --> 00:20:15,679
to introduce techniques that will help

559
00:20:15,679 --> 00:20:18,720
us detect and those 4k is the new kind

560
00:20:18,720 --> 00:20:20,880
of detection that i didn't have before

561
00:20:20,880 --> 00:20:23,360
which means i'm i'm like i'm on the

562
00:20:23,360 --> 00:20:24,480
right track

563
00:20:24,480 --> 00:20:27,280
i'm doing some well value creation by

564
00:20:27,280 --> 00:20:29,360
doing that kind of detection

565
00:20:29,360 --> 00:20:31,039
um some of the package that we're able

566
00:20:31,039 --> 00:20:33,600
to see are associated uh with malicious

567
00:20:33,600 --> 00:20:35,600
activity right they had

568
00:20:35,600 --> 00:20:39,039
well most of their usage were seen on

569
00:20:39,039 --> 00:20:40,640
data that was classified in malicious

570
00:20:40,640 --> 00:20:42,640
and not on data that was classified as

571
00:20:42,640 --> 00:20:43,679
benign

572
00:20:43,679 --> 00:20:45,200
meaning

573
00:20:45,200 --> 00:20:48,400
if i will be able to detect those kind

574
00:20:48,400 --> 00:20:49,919
of

575
00:20:49,919 --> 00:20:52,960
techniques being used in the wild

576
00:20:52,960 --> 00:20:55,360
with high certainty i would be able to

577
00:20:55,360 --> 00:20:57,679
say that that kind of activity is

578
00:20:57,679 --> 00:20:59,440
malicious right it's a statistical kind

579
00:20:59,440 --> 00:21:02,240
of decision some some benign website can

580
00:21:02,240 --> 00:21:05,039
use that techniques but data show that

581
00:21:05,039 --> 00:21:07,120
most cases it's malicious therefore i

582
00:21:07,120 --> 00:21:09,520
can conclude that kind of conclusion

583
00:21:09,520 --> 00:21:12,159
statistical conclusion um

584
00:21:12,159 --> 00:21:14,240
and what we learned here which is a

585
00:21:14,240 --> 00:21:16,080
really really important insight is that

586
00:21:16,080 --> 00:21:18,159
obfuscation doesn't equal to malicious

587
00:21:18,159 --> 00:21:19,120
meaning

588
00:21:19,120 --> 00:21:20,799
well when we detect something that is

589
00:21:20,799 --> 00:21:23,520
obfuscated it's not malicious by default

590
00:21:23,520 --> 00:21:25,120
and therefore there are two questions

591
00:21:25,120 --> 00:21:26,400
that come to mind that need to be

592
00:21:26,400 --> 00:21:28,320
addressed and we'll try to address them

593
00:21:28,320 --> 00:21:30,640
from this point forward which are first

594
00:21:30,640 --> 00:21:32,640
one um

595
00:21:32,640 --> 00:21:35,440
so we saw benign website using

596
00:21:35,440 --> 00:21:37,760
obfuscation what's the reason for that

597
00:21:37,760 --> 00:21:40,080
why should a benign website do security

598
00:21:40,080 --> 00:21:42,159
web security and obfuscate some of the

599
00:21:42,159 --> 00:21:43,679
content that he has

600
00:21:43,679 --> 00:21:45,600
we'll try to address that question the

601
00:21:45,600 --> 00:21:48,080
second question is so

602
00:21:48,080 --> 00:21:49,840
we know that obfuscation doesn't equal

603
00:21:49,840 --> 00:21:51,919
to malicious can we introduce a

604
00:21:51,919 --> 00:21:54,480
technique right an approach that will

605
00:21:54,480 --> 00:21:56,840
enable us to say hey

606
00:21:56,840 --> 00:21:58,720
um

607
00:21:58,720 --> 00:22:00,000
so

608
00:22:00,000 --> 00:22:02,080
let's assume that now we know to detect

609
00:22:02,080 --> 00:22:04,159
that something is obfuscated it's not an

610
00:22:04,159 --> 00:22:05,760
assumption we showed that we have a

611
00:22:05,760 --> 00:22:07,760
technique to do that now can we

612
00:22:07,760 --> 00:22:10,000
differentiate between something that is

613
00:22:10,000 --> 00:22:12,320
obfuscated and it's malicious versus

614
00:22:12,320 --> 00:22:14,320
something that is obfuscated which is

615
00:22:14,320 --> 00:22:15,280
denied

616
00:22:15,280 --> 00:22:16,400
that's something that we'll need to

617
00:22:16,400 --> 00:22:17,919
address and that's technique that i will

618
00:22:17,919 --> 00:22:20,480
hopefully introduce in next few slides

619
00:22:20,480 --> 00:22:22,640
um moving forward so the ques the first

620
00:22:22,640 --> 00:22:24,240
question right was

621
00:22:24,240 --> 00:22:25,200
um

622
00:22:25,200 --> 00:22:28,240
what are the use cases in in

623
00:22:28,240 --> 00:22:30,559
benign website that we see of escalation

624
00:22:30,559 --> 00:22:32,720
into them so few use cases the most you

625
00:22:32,720 --> 00:22:35,039
know relevant one or the most you know

626
00:22:35,039 --> 00:22:36,240
reused one

627
00:22:36,240 --> 00:22:38,320
email addresses masking don't ask me why

628
00:22:38,320 --> 00:22:41,280
but some websites well i can understand

629
00:22:41,280 --> 00:22:43,360
why if you you want to avoid some

630
00:22:43,360 --> 00:22:45,200
scanners or you know scanning that are

631
00:22:45,200 --> 00:22:47,280
not rendering the page to go over your

632
00:22:47,280 --> 00:22:49,840
pages and collect email addresses and

633
00:22:49,840 --> 00:22:52,320
reuse them if you do some information

634
00:22:52,320 --> 00:22:54,159
you will make their heart life much

635
00:22:54,159 --> 00:22:56,320
harder therefore the chance that they

636
00:22:56,320 --> 00:22:58,960
will harvest those email addresses is

637
00:22:58,960 --> 00:23:01,280
lower again it's not impossible to do

638
00:23:01,280 --> 00:23:02,960
rendering for the page and collect that

639
00:23:02,960 --> 00:23:04,400
kind of information

640
00:23:04,400 --> 00:23:06,799
um cookie client functionality i don't

641
00:23:06,799 --> 00:23:08,480
want to try to explain that that's not

642
00:23:08,480 --> 00:23:10,480
really good practices but some

643
00:23:10,480 --> 00:23:12,880
obfuscation is being done around that

644
00:23:12,880 --> 00:23:15,440
areas to try to do again security web

645
00:23:15,440 --> 00:23:16,799
security and try to hide some of the

646
00:23:16,799 --> 00:23:17,919
functionality of the javascript

647
00:23:17,919 --> 00:23:20,240
functionality being done on the browser

648
00:23:20,240 --> 00:23:22,640
doing some manipulation cookies

649
00:23:22,640 --> 00:23:24,720
third-party scripts this is the most

650
00:23:24,720 --> 00:23:27,840
popular one uh advertising services

651
00:23:27,840 --> 00:23:30,640
translation services that

652
00:23:30,640 --> 00:23:33,679
actually are third-party services that

653
00:23:33,679 --> 00:23:35,919
some websites are integrating into their

654
00:23:35,919 --> 00:23:36,880
web

655
00:23:36,880 --> 00:23:38,720
websites

656
00:23:38,720 --> 00:23:39,840
will be

657
00:23:39,840 --> 00:23:43,039
obfuscated by those third party for our

658
00:23:43,039 --> 00:23:44,720
providers sorry

659
00:23:44,720 --> 00:23:47,679
so in a sense we can see a lot of those

660
00:23:47,679 --> 00:23:50,000
websites using the same services

661
00:23:50,000 --> 00:23:53,200
meanings in many cases using the same

662
00:23:53,200 --> 00:23:55,440
code being obfuscated and we'll talk

663
00:23:55,440 --> 00:23:57,200
about the meaning of that same code

664
00:23:57,200 --> 00:23:58,640
being obfuscated in the context of some

665
00:23:58,640 --> 00:23:59,840
of the techniques that we have to

666
00:23:59,840 --> 00:24:01,039
introduce

667
00:24:01,039 --> 00:24:02,960
but that's uh something that we're able

668
00:24:02,960 --> 00:24:05,600
to see heavily being used

669
00:24:05,600 --> 00:24:07,919
and the last and definitely

670
00:24:07,919 --> 00:24:09,440
something that i don't want to try to

671
00:24:09,440 --> 00:24:11,520
explain but a lot of adult content

672
00:24:11,520 --> 00:24:14,080
websites are using uh obfuscation

673
00:24:14,080 --> 00:24:15,520
techniques

674
00:24:15,520 --> 00:24:18,240
probably from for their own reasons

675
00:24:18,240 --> 00:24:20,080
again

676
00:24:20,080 --> 00:24:22,000
showing the data don't want to try to

677
00:24:22,000 --> 00:24:24,799
understand that um cool

678
00:24:24,799 --> 00:24:26,799
so we talked about the first question

679
00:24:26,799 --> 00:24:28,720
that we have about what's the reason

680
00:24:28,720 --> 00:24:30,159
being obviously let's talk about the

681
00:24:30,159 --> 00:24:31,840
second question that we have in mind

682
00:24:31,840 --> 00:24:33,919
which is how can we differentiate

683
00:24:33,919 --> 00:24:35,919
between something that is obfuscated as

684
00:24:35,919 --> 00:24:38,480
malicious versus b9 and we'll offer a

685
00:24:38,480 --> 00:24:40,559
solution that has two parts the first

686
00:24:40,559 --> 00:24:42,799
one will address false false positive

687
00:24:42,799 --> 00:24:45,039
the second one address was a true

688
00:24:45,039 --> 00:24:46,640
positive sorry

689
00:24:46,640 --> 00:24:48,640
the first positive will say hey let's

690
00:24:48,640 --> 00:24:49,760
try to

691
00:24:49,760 --> 00:24:52,000
take the benign data set that we haven't

692
00:24:52,000 --> 00:24:53,600
tried to figure out what we can do in

693
00:24:53,600 --> 00:24:54,799
order to

694
00:24:54,799 --> 00:24:56,559
to innovate widely some of the things

695
00:24:56,559 --> 00:24:58,720
that we see there the second approach

696
00:24:58,720 --> 00:25:01,440
will say hey we have files and let's use

697
00:25:01,440 --> 00:25:03,200
a machine learning approach for

698
00:25:03,200 --> 00:25:05,120
classifying those files as malicious

699
00:25:05,120 --> 00:25:06,559
right

700
00:25:06,559 --> 00:25:08,000
so so

701
00:25:08,000 --> 00:25:09,440
these are the two approaches let's start

702
00:25:09,440 --> 00:25:11,919
from the beginning for the first for the

703
00:25:11,919 --> 00:25:13,200
first time

704
00:25:13,200 --> 00:25:16,559
first one sorry uh false positives uh so

705
00:25:16,559 --> 00:25:17,919
think about it like that you can see

706
00:25:17,919 --> 00:25:20,480
here uh um um

707
00:25:20,480 --> 00:25:23,279
relationship graph on on on the screen

708
00:25:23,279 --> 00:25:25,039
where you can see

709
00:25:25,039 --> 00:25:26,880
um

710
00:25:26,880 --> 00:25:31,039
the two main uh gray circle alexa and

711
00:25:31,039 --> 00:25:33,600
random representing those two data sets

712
00:25:33,600 --> 00:25:36,320
each one of them is being connected to a

713
00:25:36,320 --> 00:25:38,400
orange kind of circles

714
00:25:38,400 --> 00:25:40,960
representing hash value of scripts that

715
00:25:40,960 --> 00:25:42,480
we were able to see

716
00:25:42,480 --> 00:25:44,559
associated with those website and

717
00:25:44,559 --> 00:25:46,720
actually being obfuscated

718
00:25:46,720 --> 00:25:49,840
those orange circles are actually

719
00:25:49,840 --> 00:25:52,640
connected to domain that we were able to

720
00:25:52,640 --> 00:25:56,960
see using that hash for those scripts so

721
00:25:56,960 --> 00:25:59,039
in other words go back let's go back to

722
00:25:59,039 --> 00:26:01,440
the third party example some third party

723
00:26:01,440 --> 00:26:04,559
exam from third party service is having

724
00:26:04,559 --> 00:26:07,279
some code that you need to add to your

725
00:26:07,279 --> 00:26:09,520
website he will do a full station for

726
00:26:09,520 --> 00:26:11,840
that code the same code it's the same

727
00:26:11,840 --> 00:26:13,120
obfuscation

728
00:26:13,120 --> 00:26:15,520
it's the same hash value to the to that

729
00:26:15,520 --> 00:26:18,159
file if that file is being used by many

730
00:26:18,159 --> 00:26:20,159
different domains out there

731
00:26:20,159 --> 00:26:22,240
popular domains

732
00:26:22,240 --> 00:26:24,880
we can go and say hey that hash value

733
00:26:24,880 --> 00:26:27,120
for it for script that being used like

734
00:26:27,120 --> 00:26:28,000
that

735
00:26:28,000 --> 00:26:30,159
is a benign one it doesn't mean it's

736
00:26:30,159 --> 00:26:32,799
malicious and as a result of that we can

737
00:26:32,799 --> 00:26:34,880
eliminate a lot of the noise that might

738
00:26:34,880 --> 00:26:37,440
come up from us detecting some

739
00:26:37,440 --> 00:26:39,760
obfuscated code being associated with

740
00:26:39,760 --> 00:26:42,240
benign websites right and

741
00:26:42,240 --> 00:26:44,480
you know in in that sense remove a lot

742
00:26:44,480 --> 00:26:46,640
of the false positive that we might have

743
00:26:46,640 --> 00:26:48,640
so that's the technique that that that

744
00:26:48,640 --> 00:26:50,720
we can take to to mitigate and try to

745
00:26:50,720 --> 00:26:52,559
make it much more clearer

746
00:26:52,559 --> 00:26:54,640
using that on the data set that we had i

747
00:26:54,640 --> 00:26:56,000
was able to

748
00:26:56,000 --> 00:26:59,120
uh eliminate 20 of the problem right

749
00:26:59,120 --> 00:27:00,400
it's not a huge number but it's the

750
00:27:00,400 --> 00:27:02,400
beginning right if i had much more data

751
00:27:02,400 --> 00:27:03,279
much

752
00:27:03,279 --> 00:27:06,640
larger data sets for the b9

753
00:27:06,640 --> 00:27:09,279
websites uh obviously those numbers will

754
00:27:09,279 --> 00:27:11,279
go up but that's a technique that will

755
00:27:11,279 --> 00:27:12,480
enable us to to solve some of the

756
00:27:12,480 --> 00:27:14,480
problem right first step right false

757
00:27:14,480 --> 00:27:17,440
positive second step uh true positives

758
00:27:17,440 --> 00:27:18,640
um

759
00:27:18,640 --> 00:27:19,840
and the approach is machine learning

760
00:27:19,840 --> 00:27:21,760
right and i will do that

761
00:27:21,760 --> 00:27:23,600
very simplistic i will not get into

762
00:27:23,600 --> 00:27:25,840
detail it's not about the machinery

763
00:27:25,840 --> 00:27:28,559
techniques and whether i use the right

764
00:27:28,559 --> 00:27:30,480
one or the wrong one i'm not a machine

765
00:27:30,480 --> 00:27:31,760
learning expert

766
00:27:31,760 --> 00:27:34,080
uh i i know something about machine

767
00:27:34,080 --> 00:27:35,919
learning but it's not why i'm here i'm

768
00:27:35,919 --> 00:27:38,080
here to show an approach or a technique

769
00:27:38,080 --> 00:27:40,000
that might be used obviously that

770
00:27:40,000 --> 00:27:41,919
technique can be refined and have much

771
00:27:41,919 --> 00:27:44,480
version much better representation for

772
00:27:44,480 --> 00:27:45,840
that so

773
00:27:45,840 --> 00:27:46,640
so

774
00:27:46,640 --> 00:27:48,159
let's start from the beginning try to

775
00:27:48,159 --> 00:27:49,679
better understand what we're seeing so

776
00:27:49,679 --> 00:27:51,440
this is the file this is an office kd

777
00:27:51,440 --> 00:27:52,640
file the same one that we saw at the

778
00:27:52,640 --> 00:27:53,840
beginning right

779
00:27:53,840 --> 00:27:55,520
and you can see it's not really readable

780
00:27:55,520 --> 00:27:57,760
but each file you can look at that file

781
00:27:57,760 --> 00:28:00,240
as something as as an object it has all

782
00:28:00,240 --> 00:28:02,399
kind of attributes and we can look into

783
00:28:02,399 --> 00:28:04,799
those attributes or features

784
00:28:04,799 --> 00:28:06,720
and try to collect those features so for

785
00:28:06,720 --> 00:28:08,640
example if you have an array in that

786
00:28:08,640 --> 00:28:10,000
file

787
00:28:10,000 --> 00:28:11,919
counting the amount of elements of that

788
00:28:11,919 --> 00:28:14,080
array is a feature

789
00:28:14,080 --> 00:28:16,640
looking into those elements and

790
00:28:16,640 --> 00:28:18,960
having the length of that those elements

791
00:28:18,960 --> 00:28:21,440
can also be a feature uh looking on

792
00:28:21,440 --> 00:28:23,440
different characters that being used in

793
00:28:23,440 --> 00:28:25,279
those elements can also be featured

794
00:28:25,279 --> 00:28:27,679
right these are those kind of features

795
00:28:27,679 --> 00:28:30,000
different features could be

796
00:28:30,000 --> 00:28:32,399
identifiers right identify would be a

797
00:28:32,399 --> 00:28:34,960
function name or variable names or stuff

798
00:28:34,960 --> 00:28:37,840
like that right so looking on those and

799
00:28:37,840 --> 00:28:40,640
say hey how many identifiers start with

800
00:28:40,640 --> 00:28:42,559
underscore 0x as you can see in the

801
00:28:42,559 --> 00:28:45,120
example here it's a well-known technique

802
00:28:45,120 --> 00:28:46,880
being used to create an office kde code

803
00:28:46,880 --> 00:28:48,960
that is not readable

804
00:28:48,960 --> 00:28:50,399
how many

805
00:28:50,399 --> 00:28:52,320
identifying total unique identifying

806
00:28:52,320 --> 00:28:54,559
total we can see on a given page these

807
00:28:54,559 --> 00:28:56,640
are kind of featured and we use some of

808
00:28:56,640 --> 00:28:57,919
those features only three of those

809
00:28:57,919 --> 00:29:00,559
features to try to see how we can create

810
00:29:00,559 --> 00:29:02,720
a module that will enable us to do a

811
00:29:02,720 --> 00:29:05,279
better detection a better classification

812
00:29:05,279 --> 00:29:07,679
of data sets known to be malicious or

813
00:29:07,679 --> 00:29:08,640
benign

814
00:29:08,640 --> 00:29:11,120
based on what we are seeing right so

815
00:29:11,120 --> 00:29:13,279
let's put it on a graph right and i took

816
00:29:13,279 --> 00:29:16,559
one like i took a partial portion of the

817
00:29:16,559 --> 00:29:19,200
data set that we have took out

818
00:29:19,200 --> 00:29:20,240
those

819
00:29:20,240 --> 00:29:23,840
files that were identified as being um

820
00:29:23,840 --> 00:29:25,919
related to push shift packer one of the

821
00:29:25,919 --> 00:29:27,440
packages that we have it's important to

822
00:29:27,440 --> 00:29:29,520
say that the context of each packer and

823
00:29:29,520 --> 00:29:30,480
the

824
00:29:30,480 --> 00:29:33,200
features of that packer

825
00:29:33,200 --> 00:29:34,960
and how they are being used

826
00:29:34,960 --> 00:29:37,039
and i will try to show that with two

827
00:29:37,039 --> 00:29:38,799
features the left one right what you can

828
00:29:38,799 --> 00:29:40,159
wait you can see on the left is the

829
00:29:40,159 --> 00:29:42,000
unique indent fire meaning the number of

830
00:29:42,000 --> 00:29:43,600
unique identifiers that we were able to

831
00:29:43,600 --> 00:29:47,279
see on the files that we know that were

832
00:29:47,279 --> 00:29:50,000
well obfuscated by push shift packer and

833
00:29:50,000 --> 00:29:52,480
on the right side you can see number of

834
00:29:52,480 --> 00:29:55,360
elements in array right again collected

835
00:29:55,360 --> 00:29:56,960
from those files

836
00:29:56,960 --> 00:29:59,200
and we have three data sets two of them

837
00:29:59,200 --> 00:30:01,440
related to b9 which is random and alexa

838
00:30:01,440 --> 00:30:04,000
and the green one right the the blue and

839
00:30:04,000 --> 00:30:06,080
the red are the random analysis and the

840
00:30:06,080 --> 00:30:08,159
green one is something that was

841
00:30:08,159 --> 00:30:09,840
classified as part of the

842
00:30:09,840 --> 00:30:12,799
malware data set so only by looking on

843
00:30:12,799 --> 00:30:14,399
this graph we can see something very

844
00:30:14,399 --> 00:30:15,679
clear that there are different

845
00:30:15,679 --> 00:30:17,039
classification there are different

846
00:30:17,039 --> 00:30:19,440
groups here that will enable us to say

847
00:30:19,440 --> 00:30:22,640
hey if a given feature has a value

848
00:30:22,640 --> 00:30:24,480
whatever that value is

849
00:30:24,480 --> 00:30:27,120
that mean that that group is associated

850
00:30:27,120 --> 00:30:28,640
with a behavior

851
00:30:28,640 --> 00:30:31,200
but is more relevant to malware rather

852
00:30:31,200 --> 00:30:32,720
than to something

853
00:30:32,720 --> 00:30:35,360
which is more benign meaning random well

854
00:30:35,360 --> 00:30:38,399
the random data set or alexa right so we

855
00:30:38,399 --> 00:30:40,960
already see three groups just by looking

856
00:30:40,960 --> 00:30:43,039
at that but more to that if we will take

857
00:30:43,039 --> 00:30:45,200
the the group on the center that that is

858
00:30:45,200 --> 00:30:47,760
close to two zeros right and we'll focus

859
00:30:47,760 --> 00:30:50,480
on that what we were able to see

860
00:30:50,480 --> 00:30:52,799
is that even on that

861
00:30:52,799 --> 00:30:54,960
group if we will do much closer look

862
00:30:54,960 --> 00:30:56,880
into that we can see that features make

863
00:30:56,880 --> 00:30:58,240
sense meaning

864
00:30:58,240 --> 00:31:00,640
we have the ability to create some sort

865
00:31:00,640 --> 00:31:03,919
of a decision tree of those features and

866
00:31:03,919 --> 00:31:06,320
some values for those features that will

867
00:31:06,320 --> 00:31:08,080
enable us to say

868
00:31:08,080 --> 00:31:10,320
on a given obfuscated file whether that

869
00:31:10,320 --> 00:31:13,279
file is benign or malicious and this is

870
00:31:13,279 --> 00:31:15,679
what i created right a decision tree as

871
00:31:15,679 --> 00:31:17,519
you can see in front of you

872
00:31:17,519 --> 00:31:21,200
and will not get too much into details

873
00:31:21,200 --> 00:31:23,200
on how that decision tree was created

874
00:31:23,200 --> 00:31:25,120
and what's the meaning of each

875
00:31:25,120 --> 00:31:27,760
node of that tree but just as an example

876
00:31:27,760 --> 00:31:29,919
if we take the most

877
00:31:29,919 --> 00:31:32,720
right path of that three

878
00:31:32,720 --> 00:31:34,320
and we have as i mentioned three

879
00:31:34,320 --> 00:31:36,240
features here the first one is the

880
00:31:36,240 --> 00:31:38,159
number of identifier meaning function

881
00:31:38,159 --> 00:31:39,600
name variable names let's start with

882
00:31:39,600 --> 00:31:41,919
underscore zero x the second feature

883
00:31:41,919 --> 00:31:44,080
number of elements in array and the

884
00:31:44,080 --> 00:31:46,320
third feature the number of unique

885
00:31:46,320 --> 00:31:48,960
identifiers only by

886
00:31:48,960 --> 00:31:51,360
taking those three features we we were

887
00:31:51,360 --> 00:31:55,360
able to identify over 50 percent of the

888
00:31:55,360 --> 00:31:57,279
data set as being classified as

889
00:31:57,279 --> 00:32:00,320
malicious meaning we sold 50 of the

890
00:32:00,320 --> 00:32:02,799
problem only on that path of the tree

891
00:32:02,799 --> 00:32:03,600
saying

892
00:32:03,600 --> 00:32:05,840
when a given file has

893
00:32:05,840 --> 00:32:08,159
more than 20 um identifiers starting

894
00:32:08,159 --> 00:32:10,159
with underscore theory x and more than

895
00:32:10,159 --> 00:32:11,360
17

896
00:32:11,360 --> 00:32:14,240
elements in an array and more than 92

897
00:32:14,240 --> 00:32:16,159
unique identifier

898
00:32:16,159 --> 00:32:17,679
then with a

899
00:32:17,679 --> 00:32:19,600
very high certainty in our case in this

900
00:32:19,600 --> 00:32:21,760
case of of this experiment

901
00:32:21,760 --> 00:32:24,399
that far represents something that is

902
00:32:24,399 --> 00:32:27,360
classified as malicious right this is

903
00:32:27,360 --> 00:32:29,519
well machine learning in a very simple

904
00:32:29,519 --> 00:32:31,360
and simplistic kind of representation of

905
00:32:31,360 --> 00:32:33,760
that hopefully that makes sense so we

906
00:32:33,760 --> 00:32:35,919
had four questions right we have at the

907
00:32:35,919 --> 00:32:37,120
beginning of the research and the

908
00:32:37,120 --> 00:32:38,960
beginning of my presentation we talked

909
00:32:38,960 --> 00:32:41,200
about the why and the how right and we

910
00:32:41,200 --> 00:32:42,399
address that

911
00:32:42,399 --> 00:32:44,640
we try to show some numbers in the wild

912
00:32:44,640 --> 00:32:46,320
and what those numbers represent and we

913
00:32:46,320 --> 00:32:49,360
were able to see that as well right 96

914
00:32:49,360 --> 00:32:51,919
of the malware data set were already

915
00:32:51,919 --> 00:32:54,799
classified as being obfuscated that's an

916
00:32:54,799 --> 00:32:56,640
amazing number

917
00:32:56,640 --> 00:32:59,279
right we try to answer the question does

918
00:32:59,279 --> 00:33:00,320
javascript

919
00:33:00,320 --> 00:33:02,080
office kitchen

920
00:33:02,080 --> 00:33:03,840
equal to malicious and we address that

921
00:33:03,840 --> 00:33:05,919
as well um

922
00:33:05,919 --> 00:33:07,760
and last and definitely not least we

923
00:33:07,760 --> 00:33:09,440
were able to see

924
00:33:09,440 --> 00:33:10,559
techniques

925
00:33:10,559 --> 00:33:12,799
that will enable us to say hey

926
00:33:12,799 --> 00:33:15,200
here is a given file we know how to

927
00:33:15,200 --> 00:33:18,000
identify that being obfuscated in order

928
00:33:18,000 --> 00:33:21,039
to that we have the ability to show

929
00:33:21,039 --> 00:33:24,159
if that file is malicious or not in a

930
00:33:24,159 --> 00:33:26,799
machine learning statistical way right

931
00:33:26,799 --> 00:33:28,080
um

932
00:33:28,080 --> 00:33:30,399
few of my next steps in power as part of

933
00:33:30,399 --> 00:33:32,799
this research right um

934
00:33:32,799 --> 00:33:36,320
i want to release the code for that um

935
00:33:36,320 --> 00:33:38,240
for this project i'm working on that

936
00:33:38,240 --> 00:33:40,640
hopefully in the next few months adding

937
00:33:40,640 --> 00:33:42,559
signature for additional packers right i

938
00:33:42,559 --> 00:33:44,799
cover five i would like to

939
00:33:44,799 --> 00:33:47,919
add more uh refine some of the data set

940
00:33:47,919 --> 00:33:50,080
that i'm using to be able to show better

941
00:33:50,080 --> 00:33:52,240
result right i talked about the phishing

942
00:33:52,240 --> 00:33:54,559
which is a bit data set that is a flaky

943
00:33:54,559 --> 00:33:56,000
one

944
00:33:56,000 --> 00:33:57,600
add more features into the machine

945
00:33:57,600 --> 00:33:58,880
learning model

946
00:33:58,880 --> 00:34:02,320
and slow the ability to algorithmically

947
00:34:02,320 --> 00:34:04,640
look into

948
00:34:04,640 --> 00:34:07,440
obfuscated files and create those

949
00:34:07,440 --> 00:34:09,520
signatures that i was creating

950
00:34:09,520 --> 00:34:11,599
i created them mainly right i was going

951
00:34:11,599 --> 00:34:13,199
over those files and look was looking

952
00:34:13,199 --> 00:34:16,159
for some you know functionality that is

953
00:34:16,159 --> 00:34:18,800
associated with obfuscation and i was

954
00:34:18,800 --> 00:34:20,399
able to see that that functionality is

955
00:34:20,399 --> 00:34:22,960
being always been used as part of that

956
00:34:22,960 --> 00:34:25,280
packer and and i was able to do a

957
00:34:25,280 --> 00:34:27,280
signature for that doing that

958
00:34:27,280 --> 00:34:29,280
algorithmically or automatically will

959
00:34:29,280 --> 00:34:30,879
make much more sense and create much

960
00:34:30,879 --> 00:34:32,560
more accurate results

961
00:34:32,560 --> 00:34:33,679
um

962
00:34:33,679 --> 00:34:35,839
so i promised to talk about the package

963
00:34:35,839 --> 00:34:39,440
right the that that uh obfuscation of

964
00:34:39,440 --> 00:34:42,159
functionality that we we saw in the in

965
00:34:42,159 --> 00:34:43,520
previous slides because you know the

966
00:34:43,520 --> 00:34:45,040
name of the president is all about the

967
00:34:45,040 --> 00:34:47,119
packer right and some of you might ask

968
00:34:47,119 --> 00:34:49,440
yourself and i don't want to

969
00:34:49,440 --> 00:34:51,359
i don't want you to do this lose

970
00:34:51,359 --> 00:34:53,199
sleeping hours over that right why did

971
00:34:53,199 --> 00:34:55,359
it choose packers with the dashes right

972
00:34:55,359 --> 00:34:57,440
so the the reason for that because i saw

973
00:34:57,440 --> 00:35:00,640
that given uh function and the variables

974
00:35:00,640 --> 00:35:02,880
for that function are p a c

975
00:35:02,880 --> 00:35:05,280
c k e r which is back right so that's

976
00:35:05,280 --> 00:35:07,920
the reason for that but wait so

977
00:35:07,920 --> 00:35:09,440
part of the technique that i was

978
00:35:09,440 --> 00:35:11,040
suggesting is to

979
00:35:11,040 --> 00:35:13,599
avoid looking into those kind of

980
00:35:13,599 --> 00:35:15,440
variables name looking to the structure

981
00:35:15,440 --> 00:35:17,760
right variable 9 can change well i was

982
00:35:17,760 --> 00:35:19,760
doing a right decision on that because

983
00:35:19,760 --> 00:35:22,320
as i was continuing my research i was

984
00:35:22,320 --> 00:35:24,480
able to see some example

985
00:35:24,480 --> 00:35:25,839
for

986
00:35:25,839 --> 00:35:27,680
the same functionality but now being

987
00:35:27,680 --> 00:35:30,560
using with with the verbal name

988
00:35:30,560 --> 00:35:32,240
p-a-c-k-e-d

989
00:35:32,240 --> 00:35:33,440
right because

990
00:35:33,440 --> 00:35:35,440
instead of r at the end

991
00:35:35,440 --> 00:35:38,000
right i'm always making a nice decision

992
00:35:38,000 --> 00:35:39,680
but it's not the end for that because i

993
00:35:39,680 --> 00:35:41,200
was able to see another functionality

994
00:35:41,200 --> 00:35:43,440
for that using even more obfuscated kind

995
00:35:43,440 --> 00:35:45,599
of one not readable kind of version of

996
00:35:45,599 --> 00:35:48,720
that with the underscore x one seven six

997
00:35:48,720 --> 00:35:51,920
five x one right those values uh which

998
00:35:51,920 --> 00:35:54,000
may which makes much more sense in my

999
00:35:54,000 --> 00:35:55,760
ability to choose

1000
00:35:55,760 --> 00:35:57,920
not to use those kind of varva's name as

1001
00:35:57,920 --> 00:36:00,240
part of the signature for for

1002
00:36:00,240 --> 00:36:01,839
for the things that i was doing and as a

1003
00:36:01,839 --> 00:36:03,440
result of that i was saying to myself

1004
00:36:03,440 --> 00:36:05,760
hey so maybe i should change the name of

1005
00:36:05,760 --> 00:36:07,839
my presentation it's all about the

1006
00:36:07,839 --> 00:36:09,160
underscore

1007
00:36:09,160 --> 00:36:12,160
0x167 okay so that was my joke for today

1008
00:36:12,160 --> 00:36:14,079
hopefully it was a funny one

1009
00:36:14,079 --> 00:36:17,440
it was a geeky kind of funny one uh so

1010
00:36:17,440 --> 00:36:18,800
at this point of time i want to thank

1011
00:36:18,800 --> 00:36:20,720
you very much if you have any question

1012
00:36:20,720 --> 00:36:22,560
if you have any concerns

1013
00:36:22,560 --> 00:36:24,160
don't be afraid to reach out to me i'm

1014
00:36:24,160 --> 00:36:26,160
here to answer some of your questions

1015
00:36:26,160 --> 00:36:29,319
thank you

1016
00:36:50,640 --> 00:36:52,720
you

