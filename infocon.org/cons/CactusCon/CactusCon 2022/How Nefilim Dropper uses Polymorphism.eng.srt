1
00:00:03,120 --> 00:00:05,200
hi my presentation is on the

2
00:00:05,200 --> 00:00:09,279
polymorphism in the nephilim dropper

3
00:00:10,240 --> 00:00:12,719
hi i'm mark embrick my current day job

4
00:00:12,719 --> 00:00:14,400
is as a malware analyst

5
00:00:14,400 --> 00:00:16,000
i wanted to show people an interesting

6
00:00:16,000 --> 00:00:17,440
piece of malware

7
00:00:17,440 --> 00:00:19,199
before the pandemic i went to defcon

8
00:00:19,199 --> 00:00:20,720
every year and every year i came away

9
00:00:20,720 --> 00:00:22,400
inspired by the work other people are

10
00:00:22,400 --> 00:00:23,359
doing

11
00:00:23,359 --> 00:00:24,480
when you see someone else do it it

12
00:00:24,480 --> 00:00:27,519
doesn't seem so far away right

13
00:00:27,519 --> 00:00:30,000
so let me stop my video here so i'm not

14
00:00:30,000 --> 00:00:32,320
taking up screen space and let's

15
00:00:32,320 --> 00:00:34,880
go on

16
00:00:36,160 --> 00:00:39,520
okay so what is polymorphism here is the

17
00:00:39,520 --> 00:00:41,200
wikipedia definition

18
00:00:41,200 --> 00:00:43,520
it's polymorphic code that uses a

19
00:00:43,520 --> 00:00:45,920
polymorphic engine to mutate while

20
00:00:45,920 --> 00:00:48,800
keeping the original algorithm intact

21
00:00:48,800 --> 00:00:50,320
what i'm going to talk about is not

22
00:00:50,320 --> 00:00:52,239
exactly that

23
00:00:52,239 --> 00:00:55,360
the malware file doesn't change itself

24
00:00:55,360 --> 00:00:57,520
the dropper uses a function to write a

25
00:00:57,520 --> 00:01:00,320
slightly different file each time

26
00:01:00,320 --> 00:01:02,640
such that the file hash is different

27
00:01:02,640 --> 00:01:06,400
but the dropped file functions the same

28
00:01:06,400 --> 00:01:08,400
so let's jump to the end that's what you

29
00:01:08,400 --> 00:01:09,680
want to see right

30
00:01:09,680 --> 00:01:11,600
i use the dropper to write the payload

31
00:01:11,600 --> 00:01:14,560
malware four times it generated

32
00:01:14,560 --> 00:01:16,960
four different file hashes we got a bit

33
00:01:16,960 --> 00:01:19,040
lucky that virustotal knows one of the

34
00:01:19,040 --> 00:01:20,880
hashes

35
00:01:20,880 --> 00:01:22,880
and as you can see fires total lights up

36
00:01:22,880 --> 00:01:26,080
like crazy for that malware file so the

37
00:01:26,080 --> 00:01:28,240
thread actors have an interest in

38
00:01:28,240 --> 00:01:30,000
changing the file hash such that your

39
00:01:30,000 --> 00:01:33,920
anti-malware tools don't know the hash

40
00:01:34,720 --> 00:01:36,400
and we can't talk about this topic

41
00:01:36,400 --> 00:01:39,200
without david bianco's pyramid of pain

42
00:01:39,200 --> 00:01:41,439
there is a reason hash values show up at

43
00:01:41,439 --> 00:01:43,439
the bottom of the pyramid

44
00:01:43,439 --> 00:01:45,840
let's take a look at one way to generate

45
00:01:45,840 --> 00:01:47,680
malware payload with different file

46
00:01:47,680 --> 00:01:50,079
hashes

47
00:01:50,560 --> 00:01:53,040
here is the main thing in the function

48
00:01:53,040 --> 00:01:55,360
that generates the polymorphism

49
00:01:55,360 --> 00:01:56,719
don't worry i don't expect you to

50
00:01:56,719 --> 00:01:58,320
understand this at a glance we'll go

51
00:01:58,320 --> 00:01:59,920
into it

52
00:01:59,920 --> 00:02:01,920
the main things to note here are the

53
00:02:01,920 --> 00:02:04,320
randomize and r d functions that are

54
00:02:04,320 --> 00:02:07,360
highlighted in yellow

55
00:02:07,360 --> 00:02:10,000
let's drop into a sidebar what is the r

56
00:02:10,000 --> 00:02:11,599
d function

57
00:02:11,599 --> 00:02:13,520
in yellow that's the entirety of a

58
00:02:13,520 --> 00:02:14,800
script that i ran to test the

59
00:02:14,800 --> 00:02:17,120
functionality of r d

60
00:02:17,120 --> 00:02:19,040
note that the randomize statement is

61
00:02:19,040 --> 00:02:20,959
commented out

62
00:02:20,959 --> 00:02:23,520
each time we run r and d in this case we

63
00:02:23,520 --> 00:02:26,640
get a random value between zero and one

64
00:02:26,640 --> 00:02:29,200
but without randomize each time we run r

65
00:02:29,200 --> 00:02:31,519
and d we get the same value

66
00:02:31,519 --> 00:02:34,000
r and d is calculated only once and the

67
00:02:34,000 --> 00:02:37,680
same value is used over and over again

68
00:02:37,680 --> 00:02:39,200
and in this test

69
00:02:39,200 --> 00:02:41,040
i enabled randomize

70
00:02:41,040 --> 00:02:42,800
and we can see that a different random

71
00:02:42,800 --> 00:02:45,200
number is generated each time

72
00:02:45,200 --> 00:02:46,879
a few other things to note

73
00:02:46,879 --> 00:02:49,200
the range of values includes zero but

74
00:02:49,200 --> 00:02:52,160
not one so greater than or equal to zero

75
00:02:52,160 --> 00:02:54,080
and less than one

76
00:02:54,080 --> 00:02:56,000
and at least on the host i was testing

77
00:02:56,000 --> 00:02:56,800
on

78
00:02:56,800 --> 00:02:59,280
r d returned seven decimal places to the

79
00:02:59,280 --> 00:03:02,000
right of the period

80
00:03:02,480 --> 00:03:04,400
so now that we understand

81
00:03:04,400 --> 00:03:06,239
r d and randomize let's go back to the

82
00:03:06,239 --> 00:03:08,000
polymorphic code

83
00:03:08,000 --> 00:03:10,720
we can see that randomize is enabled and

84
00:03:10,720 --> 00:03:12,480
we see that r d

85
00:03:12,480 --> 00:03:16,400
is used to generate my return value

86
00:03:16,400 --> 00:03:18,080
now i'm looking at the stuff below the

87
00:03:18,080 --> 00:03:20,560
dotted line we can see

88
00:03:20,560 --> 00:03:22,000
the code to figure out the range of

89
00:03:22,000 --> 00:03:23,519
possible values

90
00:03:23,519 --> 00:03:25,920
if r d returns a zero

91
00:03:25,920 --> 00:03:27,920
the smallest possible value

92
00:03:27,920 --> 00:03:29,519
we get a nine

93
00:03:29,519 --> 00:03:34,120
if r and d returns 0.9999999

94
00:03:34,799 --> 00:03:38,799
the largest possible value we return to

95
00:03:38,799 --> 00:03:43,360
so our range of values is from 2 to 9.

96
00:03:43,360 --> 00:03:45,280
before we move on take a look at the if

97
00:03:45,280 --> 00:03:48,480
statement we only do the r d stuff if

98
00:03:48,480 --> 00:03:50,080
the value in the array that we're

99
00:03:50,080 --> 00:03:54,319
looking at is equal to 999 999

100
00:03:54,319 --> 00:03:57,920
so your next question should be

101
00:03:57,920 --> 00:04:02,879
where does 999 999 occur in the code

102
00:04:02,879 --> 00:04:05,439
we find that value occurs only in one

103
00:04:05,439 --> 00:04:06,400
array

104
00:04:06,400 --> 00:04:10,640
and only those four times in a row

105
00:04:10,720 --> 00:04:12,640
so let's drop into another sidebar now

106
00:04:12,640 --> 00:04:14,080
that we know some of the background

107
00:04:14,080 --> 00:04:16,079
information we can figure out how

108
00:04:16,079 --> 00:04:18,639
polymorphic is this dropper

109
00:04:18,639 --> 00:04:20,959
meaning how many unique file hashes are

110
00:04:20,959 --> 00:04:24,160
possible from this code

111
00:04:24,479 --> 00:04:27,440
we determined that the range of values

112
00:04:27,440 --> 00:04:30,320
will be between two and nine so eight

113
00:04:30,320 --> 00:04:31,759
unique values

114
00:04:31,759 --> 00:04:34,240
and we found that we would use rd only

115
00:04:34,240 --> 00:04:36,800
four times in the entirety of the code

116
00:04:36,800 --> 00:04:38,479
so we're talking about eight to the

117
00:04:38,479 --> 00:04:39,680
fourth power

118
00:04:39,680 --> 00:04:42,720
which is 4096 possible unique file

119
00:04:42,720 --> 00:04:44,240
hashes

120
00:04:44,240 --> 00:04:45,840
but if you're a math nerd you might have

121
00:04:45,840 --> 00:04:46,880
noticed that

122
00:04:46,880 --> 00:04:50,000
only when r and d returns a 0

123
00:04:50,000 --> 00:04:52,400
do we get a 9 value

124
00:04:52,400 --> 00:04:55,199
the next smallest value r and d can

125
00:04:55,199 --> 00:04:59,000
return 0.000001

126
00:04:59,600 --> 00:05:01,759
returns an 8

127
00:05:01,759 --> 00:05:05,360
meaning returning a 9 is extremely rare

128
00:05:05,360 --> 00:05:07,680
remember the 7 decimal places

129
00:05:07,680 --> 00:05:10,639
that means 1 in 10 million chances are

130
00:05:10,639 --> 00:05:13,199
we're going to get a 9 value

131
00:05:13,199 --> 00:05:15,360
so functionally it's more like 7

132
00:05:15,360 --> 00:05:17,600
possible values to the fourth power

133
00:05:17,600 --> 00:05:18,320
2

134
00:05:18,320 --> 00:05:22,080
401 possible file hashes

135
00:05:22,080 --> 00:05:24,720
and that's the polymorphism

136
00:05:24,720 --> 00:05:26,720
hopefully you're thinking how do we get

137
00:05:26,720 --> 00:05:28,880
there i want more information on what

138
00:05:28,880 --> 00:05:30,800
this dropper does

139
00:05:30,800 --> 00:05:31,680
so

140
00:05:31,680 --> 00:05:34,479
let's loop back to the start

141
00:05:34,479 --> 00:05:36,240
if you want to follow along or dig into

142
00:05:36,240 --> 00:05:36,960
it

143
00:05:36,960 --> 00:05:39,039
on your own time you can find the

144
00:05:39,039 --> 00:05:41,360
article

145
00:05:41,360 --> 00:05:44,560
on this malware in the sans diary where

146
00:05:44,560 --> 00:05:46,880
xavier mertens discusses the obfuscation

147
00:05:46,880 --> 00:05:48,960
of this malware dropper

148
00:05:48,960 --> 00:05:51,120
to find this article search for russian

149
00:05:51,120 --> 00:05:53,680
dolls vbs obfuscation

150
00:05:53,680 --> 00:05:56,240
and xavier did us a great favor by

151
00:05:56,240 --> 00:05:57,759
uploading the malware sample to malware

152
00:05:57,759 --> 00:05:59,919
bazaar so you can retrieve the file from

153
00:05:59,919 --> 00:06:03,520
there and go through it on your own

154
00:06:04,479 --> 00:06:07,520
when we first open the vbs we see a lot

155
00:06:07,520 --> 00:06:09,120
of comments

156
00:06:09,120 --> 00:06:11,120
the lines that begin with a single quote

157
00:06:11,120 --> 00:06:13,199
and the lines that begin with rem

158
00:06:13,199 --> 00:06:14,960
those are comments with just garbage

159
00:06:14,960 --> 00:06:16,240
text

160
00:06:16,240 --> 00:06:17,520
so

161
00:06:17,520 --> 00:06:20,160
why would the threat actors do this i

162
00:06:20,160 --> 00:06:21,840
assume that there are some security

163
00:06:21,840 --> 00:06:23,840
products that do some analysis on files

164
00:06:23,840 --> 00:06:24,880
to guess

165
00:06:24,880 --> 00:06:27,039
whether the file is malicious by reading

166
00:06:27,039 --> 00:06:29,199
the content and counting words versus

167
00:06:29,199 --> 00:06:30,800
programming language commands or

168
00:06:30,800 --> 00:06:32,880
functions

169
00:06:32,880 --> 00:06:34,880
the point is that this vbs when you

170
00:06:34,880 --> 00:06:37,120
first look at it has very little content

171
00:06:37,120 --> 00:06:39,600
that is clearly malicious

172
00:06:39,600 --> 00:06:42,560
in yellow and green we see examples of

173
00:06:42,560 --> 00:06:43,759
the comments

174
00:06:43,759 --> 00:06:45,759
and the non-highlighted stuff that's the

175
00:06:45,759 --> 00:06:48,800
actual code it's an array of values and

176
00:06:48,800 --> 00:06:51,759
that's an obfuscation

177
00:06:52,639 --> 00:06:54,479
so first thing we want to do is get rid

178
00:06:54,479 --> 00:06:56,000
of the comment lines

179
00:06:56,000 --> 00:06:58,560
grep is a great tool to use here

180
00:06:58,560 --> 00:07:00,960
we can see that we only got rid of 63

181
00:07:00,960 --> 00:07:02,560
lines of code but it was a lot of

182
00:07:02,560 --> 00:07:04,960
garbage

183
00:07:06,000 --> 00:07:08,639
we still have 600 lines of code

184
00:07:08,639 --> 00:07:10,960
many of those those lines are very very

185
00:07:10,960 --> 00:07:13,919
long so where do we start

186
00:07:13,919 --> 00:07:16,319
if we look at the code most of it most

187
00:07:16,319 --> 00:07:18,560
of it is made up of variables with an

188
00:07:18,560 --> 00:07:21,440
array of values assigned to it

189
00:07:21,440 --> 00:07:24,000
but then we have that execute function

190
00:07:24,000 --> 00:07:25,440
call

191
00:07:25,440 --> 00:07:27,680
i wonder what that code looks like

192
00:07:27,680 --> 00:07:31,840
if i take out the array assignments

193
00:07:32,080 --> 00:07:34,160
we use grip again to separate the array

194
00:07:34,160 --> 00:07:36,720
assignments from the rest of the code

195
00:07:36,720 --> 00:07:40,080
turns out that 556 lines of code are

196
00:07:40,080 --> 00:07:41,520
array assignments

197
00:07:41,520 --> 00:07:44,240
and the leftover is 73 lines of other

198
00:07:44,240 --> 00:07:45,520
code

199
00:07:45,520 --> 00:07:48,560
let's take a look at the other code

200
00:07:48,560 --> 00:07:51,759
ah man more comments

201
00:07:51,759 --> 00:07:53,919
and in this case since it was just a few

202
00:07:53,919 --> 00:07:56,240
lines just those lines had comments i

203
00:07:56,240 --> 00:07:59,840
just manually deleted them

204
00:08:00,160 --> 00:08:01,919
and let's take a look at the other code

205
00:08:01,919 --> 00:08:03,120
again

206
00:08:03,120 --> 00:08:04,560
so

207
00:08:04,560 --> 00:08:06,400
this is most of the code that was left

208
00:08:06,400 --> 00:08:08,879
over this probably doesn't make sense to

209
00:08:08,879 --> 00:08:11,440
anyone and that's by design

210
00:08:11,440 --> 00:08:13,360
the threat actors don't want you to be

211
00:08:13,360 --> 00:08:15,199
able to tell what this code is trying to

212
00:08:15,199 --> 00:08:16,800
do at a glance

213
00:08:16,800 --> 00:08:18,479
but

214
00:08:18,479 --> 00:08:21,039
what we can see here is that we have a

215
00:08:21,039 --> 00:08:23,599
function limpid and that function gets

216
00:08:23,599 --> 00:08:25,120
called a lot

217
00:08:25,120 --> 00:08:26,960
i snipped most of function limpet just

218
00:08:26,960 --> 00:08:29,199
to make this more readable but we'll

219
00:08:29,199 --> 00:08:32,559
take a closer look at it right now

220
00:08:32,559 --> 00:08:34,799
here is the entire code of function

221
00:08:34,799 --> 00:08:36,080
limpet

222
00:08:36,080 --> 00:08:37,839
remember the randomize and r d we

223
00:08:37,839 --> 00:08:39,679
discussed earlier that's where this is

224
00:08:39,679 --> 00:08:41,599
that's where it's from

225
00:08:41,599 --> 00:08:43,839
so what does this function do

226
00:08:43,839 --> 00:08:47,519
let's take a look at it line by line

227
00:08:48,240 --> 00:08:49,600
on the left we have the code from the

228
00:08:49,600 --> 00:08:51,920
vbs and on the right we have my attempt

229
00:08:51,920 --> 00:08:54,000
at recreating that code in a way that's

230
00:08:54,000 --> 00:08:56,320
more understandable for myself

231
00:08:56,320 --> 00:08:59,440
so chivalrous and pbl are just constants

232
00:08:59,440 --> 00:09:00,959
that are defined

233
00:09:00,959 --> 00:09:03,120
hmx is a value that is passed into the

234
00:09:03,120 --> 00:09:04,320
function

235
00:09:04,320 --> 00:09:07,200
kon blah blah blah is a variable that

236
00:09:07,200 --> 00:09:10,720
holds the smallest array address of hmx

237
00:09:10,720 --> 00:09:12,480
so now we know that the values passed

238
00:09:12,480 --> 00:09:15,600
into the function are always arrays

239
00:09:15,600 --> 00:09:18,399
oos blah blah blah is a variable that

240
00:09:18,399 --> 00:09:20,959
holds the largest array address

241
00:09:20,959 --> 00:09:23,040
so on the right side i call them my

242
00:09:23,040 --> 00:09:27,120
array start and my array end

243
00:09:28,480 --> 00:09:30,800
now let's take a look at the for loop

244
00:09:30,800 --> 00:09:32,640
that follows

245
00:09:32,640 --> 00:09:36,240
remember that kon and os are the start

246
00:09:36,240 --> 00:09:37,839
and end of the array

247
00:09:37,839 --> 00:09:40,000
so we're looping through the values of

248
00:09:40,000 --> 00:09:42,880
the passed in array

249
00:09:44,880 --> 00:09:47,279
and we saw this if statement earlier

250
00:09:47,279 --> 00:09:49,760
this is where the polymorphism happens

251
00:09:49,760 --> 00:09:51,880
whenever we find that

252
00:09:51,880 --> 00:09:54,959
99999 value we do some math and end up

253
00:09:54,959 --> 00:09:59,040
with a random value between 2 and 9.

254
00:10:00,560 --> 00:10:03,360
and if the value is not

255
00:10:03,360 --> 00:10:05,760
nine nine nine nine nine which is the

256
00:10:05,760 --> 00:10:07,120
normal case

257
00:10:07,120 --> 00:10:09,519
which is everything else in the arrays

258
00:10:09,519 --> 00:10:11,760
except for those four times

259
00:10:11,760 --> 00:10:13,600
we do a bit of math which ends up as

260
00:10:13,600 --> 00:10:15,440
just minus seven

261
00:10:15,440 --> 00:10:17,360
and then we convert that number into an

262
00:10:17,360 --> 00:10:19,839
ascii character

263
00:10:20,560 --> 00:10:22,399
so let's do another sidebar let's just

264
00:10:22,399 --> 00:10:24,079
take a quick look at the values in the

265
00:10:24,079 --> 00:10:25,200
arrays

266
00:10:25,200 --> 00:10:28,480
note that we see a lot of 7 values and

267
00:10:28,480 --> 00:10:33,040
nothing larger than 255 plus 7 262.

268
00:10:33,040 --> 00:10:34,880
this kind of confirms that we're on the

269
00:10:34,880 --> 00:10:37,439
right track

270
00:10:38,959 --> 00:10:41,440
so it turns out function limpet is a

271
00:10:41,440 --> 00:10:42,720
decoder

272
00:10:42,720 --> 00:10:44,399
it's the thing that converts an array of

273
00:10:44,399 --> 00:10:46,480
numbers into text and here's my

274
00:10:46,480 --> 00:10:48,399
pseudocode of what limpit does

275
00:10:48,399 --> 00:10:50,800
you pass in an array of values to the

276
00:10:50,800 --> 00:10:52,079
function

277
00:10:52,079 --> 00:10:53,920
it loops through the array

278
00:10:53,920 --> 00:10:57,519
if the value is 99999

279
00:10:57,519 --> 00:11:01,200
return a random value between 2 and 9.

280
00:11:01,200 --> 00:11:03,920
else subtract 9 from the value convert

281
00:11:03,920 --> 00:11:06,320
that number into a character

282
00:11:06,320 --> 00:11:10,000
and return the decoded text

283
00:11:11,600 --> 00:11:13,279
before we go any further let's try

284
00:11:13,279 --> 00:11:15,200
manually decoding some of the values to

285
00:11:15,200 --> 00:11:17,040
make sure it works

286
00:11:17,040 --> 00:11:18,959
so the first time we call limpit we're

287
00:11:18,959 --> 00:11:22,240
passing this rsl blah blah blah value

288
00:11:22,240 --> 00:11:24,320
the beginning of the array looks like

289
00:11:24,320 --> 00:11:25,120
this

290
00:11:25,120 --> 00:11:30,399
77 124 117 etcetera

291
00:11:30,399 --> 00:11:31,600
so

292
00:11:31,600 --> 00:11:34,320
when we do our math on 77 we subtract 7

293
00:11:34,320 --> 00:11:36,640
we get 70. we look up that value at

294
00:11:36,640 --> 00:11:38,880
asciitable.com we see that the cap that

295
00:11:38,880 --> 00:11:41,360
is a capital f

296
00:11:41,360 --> 00:11:44,079
then we take the second value 124

297
00:11:44,079 --> 00:11:46,880
subtract seven we get 117.

298
00:11:46,880 --> 00:11:49,360
look that up on asciitable.com we get a

299
00:11:49,360 --> 00:11:50,720
lowercase u

300
00:11:50,720 --> 00:11:53,040
so so far our return value is capital f

301
00:11:53,040 --> 00:11:55,360
lowercase u and of course of course

302
00:11:55,360 --> 00:12:00,800
you're thinking fu is for function right

303
00:12:02,160 --> 00:12:04,800
but remember we have over 500 rows of

304
00:12:04,800 --> 00:12:07,279
these arrays so doing it manually is

305
00:12:07,279 --> 00:12:09,200
just way too slow

306
00:12:09,200 --> 00:12:10,959
we want to borrow the throat actors code

307
00:12:10,959 --> 00:12:13,440
modify it a bit such that when we just

308
00:12:13,440 --> 00:12:15,040
print the decoded stuff

309
00:12:15,040 --> 00:12:17,279
rather than running it

310
00:12:17,279 --> 00:12:19,360
so remember back when i separated the

311
00:12:19,360 --> 00:12:21,519
assignments from the code

312
00:12:21,519 --> 00:12:23,120
we can take the file with just the

313
00:12:23,120 --> 00:12:25,760
assignments and add our own code with

314
00:12:25,760 --> 00:12:28,320
the intent of decoding stuff

315
00:12:28,320 --> 00:12:30,320
so that's what i did i added my own

316
00:12:30,320 --> 00:12:32,320
version of the decoder function my

317
00:12:32,320 --> 00:12:33,440
decoder

318
00:12:33,440 --> 00:12:35,040
and the two lines of code below the

319
00:12:35,040 --> 00:12:36,959
dotted line to the assignments file and

320
00:12:36,959 --> 00:12:39,120
ran it

321
00:12:39,120 --> 00:12:42,240
and here's what that output looks like

322
00:12:42,240 --> 00:12:44,639
we can ctrl c in that dialog box to copy

323
00:12:44,639 --> 00:12:46,399
the content and paste it into a text

324
00:12:46,399 --> 00:12:48,720
editor to take a closer look at it

325
00:12:48,720 --> 00:12:50,480
you may be thinking but with a little

326
00:12:50,480 --> 00:12:52,560
more work you can decode the whole thing

327
00:12:52,560 --> 00:12:54,720
and output it to a text file yep they're

328
00:12:54,720 --> 00:12:56,639
correct i didn't choose to do it that

329
00:12:56,639 --> 00:12:58,560
way i don't have a good excuse it's just

330
00:12:58,560 --> 00:13:01,120
the way it went

331
00:13:01,120 --> 00:13:03,279
anyway we got really lucky in that the

332
00:13:03,279 --> 00:13:05,279
first thing we looked at is a super

333
00:13:05,279 --> 00:13:06,720
important function

334
00:13:06,720 --> 00:13:07,519
so

335
00:13:07,519 --> 00:13:10,160
let's take a look at that function

336
00:13:10,160 --> 00:13:13,360
and yep you guessed it more comments

337
00:13:13,360 --> 00:13:15,200
so let's do some grip magic to get rid

338
00:13:15,200 --> 00:13:19,399
of those comments and take another

339
00:13:20,079 --> 00:13:21,920
let's focus on the stuff highlighted in

340
00:13:21,920 --> 00:13:23,519
yellow first

341
00:13:23,519 --> 00:13:26,399
see the save to file that's exactly what

342
00:13:26,399 --> 00:13:27,760
it sounds like

343
00:13:27,760 --> 00:13:29,680
that's how you write a file to disk the

344
00:13:29,680 --> 00:13:32,160
stuff in green i found interesting too

345
00:13:32,160 --> 00:13:34,800
it appears the thread actors built into

346
00:13:34,800 --> 00:13:36,639
building their own debugging type

347
00:13:36,639 --> 00:13:37,839
logging

348
00:13:37,839 --> 00:13:40,160
so at the start of this function it logs

349
00:13:40,160 --> 00:13:42,639
f dropped start

350
00:13:42,639 --> 00:13:44,800
this function writes a file to disk so

351
00:13:44,800 --> 00:13:49,519
guessing f dropped means file dropped

352
00:13:49,519 --> 00:13:51,680
so let's take a closer look at that for

353
00:13:51,680 --> 00:13:53,040
loop

354
00:13:53,040 --> 00:13:54,959
we're looping through an array made up

355
00:13:54,959 --> 00:13:56,079
of

356
00:13:56,079 --> 00:13:57,680
a bunch of values

357
00:13:57,680 --> 00:14:00,079
the array is actually more than 500

358
00:14:00,079 --> 00:14:01,199
elements

359
00:14:01,199 --> 00:14:03,600
where each one of those elements is its

360
00:14:03,600 --> 00:14:05,600
own array of values

361
00:14:05,600 --> 00:14:07,199
i turned off word wrap so we can

362
00:14:07,199 --> 00:14:09,120
actually read the code better

363
00:14:09,120 --> 00:14:11,279
and note that the thing highlighted in

364
00:14:11,279 --> 00:14:14,959
green is our old friend function limit

365
00:14:14,959 --> 00:14:16,720
so we know that

366
00:14:16,720 --> 00:14:20,000
we're taking this array of 500 elements

367
00:14:20,000 --> 00:14:22,079
where each element is an array and we're

368
00:14:22,079 --> 00:14:24,160
sending each one of those arrays

369
00:14:24,160 --> 00:14:28,639
to function limpet to decode

370
00:14:29,519 --> 00:14:33,040
note that the first element is rum

371
00:14:33,040 --> 00:14:37,439
are you m so let's take a look at that

372
00:14:37,519 --> 00:14:40,399
okay so rum is

373
00:14:40,399 --> 00:14:42,320
what we expected it's an array of

374
00:14:42,320 --> 00:14:44,880
integer values and since it's the first

375
00:14:44,880 --> 00:14:46,480
thing we're writing how much do you want

376
00:14:46,480 --> 00:14:48,480
to bet that the first two values decode

377
00:14:48,480 --> 00:14:50,240
to m z

378
00:14:50,240 --> 00:14:51,760
let's test it out with the thing we used

379
00:14:51,760 --> 00:14:53,760
earlier

380
00:14:53,760 --> 00:14:55,199
and unfortunately i had a bit of a fail

381
00:14:55,199 --> 00:14:56,000
here

382
00:14:56,000 --> 00:14:58,079
so what happened to that dialog box i

383
00:14:58,079 --> 00:15:01,680
mean we see mz but then nothing

384
00:15:01,680 --> 00:15:03,839
my guess is that the values after mz

385
00:15:03,839 --> 00:15:05,399
were not printable characters so

386
00:15:05,399 --> 00:15:07,680
wscript.echo gave me what it could and

387
00:15:07,680 --> 00:15:10,639
then failed uh nicely

388
00:15:10,639 --> 00:15:12,800
anyway it's enough for now to see that

389
00:15:12,800 --> 00:15:15,120
it starts with mg so it's exactly what

390
00:15:15,120 --> 00:15:17,199
we're expecting we're writing a portable

391
00:15:17,199 --> 00:15:20,000
executable file

392
00:15:20,720 --> 00:15:22,240
but we want the whole file that gets

393
00:15:22,240 --> 00:15:24,560
dropped right so like before we take the

394
00:15:24,560 --> 00:15:26,560
thread actors code

395
00:15:26,560 --> 00:15:28,639
perform the same functions just make it

396
00:15:28,639 --> 00:15:30,320
more readable

397
00:15:30,320 --> 00:15:31,920
here is the function i added to my

398
00:15:31,920 --> 00:15:33,920
previous vbs functionally it's the same

399
00:15:33,920 --> 00:15:36,480
as their code it really is their code i

400
00:15:36,480 --> 00:15:38,399
just changed the path and some variable

401
00:15:38,399 --> 00:15:40,480
names

402
00:15:40,480 --> 00:15:42,720
like the thread actors code we're taking

403
00:15:42,720 --> 00:15:45,440
the list of 500 plus arrays sending

404
00:15:45,440 --> 00:15:48,079
sending them to our decoder function and

405
00:15:48,079 --> 00:15:50,399
then writing the decoded stuff to disk

406
00:15:50,399 --> 00:15:52,720
in this case i'm writing to

407
00:15:52,720 --> 00:15:56,600
a file named dropfile1.txt

408
00:15:57,600 --> 00:15:58,920
so here's what

409
00:15:58,920 --> 00:16:00,800
droppedfile1.txt looks like in axe

410
00:16:00,800 --> 00:16:01,920
editor

411
00:16:01,920 --> 00:16:03,759
we can see the mz

412
00:16:03,759 --> 00:16:06,000
and it looks like a portable executable

413
00:16:06,000 --> 00:16:08,639
file

414
00:16:08,639 --> 00:16:11,040
so i ran it a few more times

415
00:16:11,040 --> 00:16:13,680
each new file resulted in a different

416
00:16:13,680 --> 00:16:15,040
file hash

417
00:16:15,040 --> 00:16:17,040
and as we saw earlier the first time we

418
00:16:17,040 --> 00:16:19,440
ran it virus total knew the file and it

419
00:16:19,440 --> 00:16:21,040
was well detected

420
00:16:21,040 --> 00:16:23,519
but runs two through four

421
00:16:23,519 --> 00:16:25,040
virus total doesn't know these file

422
00:16:25,040 --> 00:16:26,959
hashes at all so

423
00:16:26,959 --> 00:16:29,040
if your antivirus is looking for file

424
00:16:29,040 --> 00:16:31,600
hashes known bad by virustotal it

425
00:16:31,600 --> 00:16:34,639
doesn't know these files

426
00:16:34,880 --> 00:16:37,279
so now you should be asking well what

427
00:16:37,279 --> 00:16:40,079
about empash

428
00:16:40,959 --> 00:16:43,360
fire's total does give us the impact but

429
00:16:43,360 --> 00:16:44,399
i had

430
00:16:44,399 --> 00:16:46,560
uh trouble searching virustotal using

431
00:16:46,560 --> 00:16:49,360
the impash i think you need to use a

432
00:16:49,360 --> 00:16:52,079
paid comp to do that search

433
00:16:52,079 --> 00:16:54,399
but i was able to take that in patch

434
00:16:54,399 --> 00:16:56,800
value and search for it in malware

435
00:16:56,800 --> 00:16:59,279
bazaar

436
00:16:59,519 --> 00:17:02,639
malware bazaar returned 26 hits

437
00:17:02,639 --> 00:17:06,240
all received between june 2 and june 3

438
00:17:06,240 --> 00:17:08,240
of 2021.

439
00:17:08,240 --> 00:17:11,119
the top sample here is the same hash as

440
00:17:11,119 --> 00:17:12,799
our dropped file

441
00:17:12,799 --> 00:17:15,599
so i think these 25 other samples are

442
00:17:15,599 --> 00:17:17,359
other dropped files with different

443
00:17:17,359 --> 00:17:21,678
variations of those four random bytes

444
00:17:22,319 --> 00:17:23,919
let's do another side

445
00:17:23,919 --> 00:17:25,919
maybe you haven't heard of empash so

446
00:17:25,919 --> 00:17:29,919
let's talk about what is an impash

447
00:17:29,919 --> 00:17:32,000
mandiant explains it really well in an

448
00:17:32,000 --> 00:17:35,039
article here the gist of it is that a

449
00:17:35,039 --> 00:17:37,600
portable executable file uses windows

450
00:17:37,600 --> 00:17:40,400
apis for functions like load library

451
00:17:40,400 --> 00:17:42,559
which can be used for process injection

452
00:17:42,559 --> 00:17:45,840
or running something

453
00:17:45,840 --> 00:17:49,280
file can be used to write a file

454
00:17:49,280 --> 00:17:52,000
when a portable executable a pe file

455
00:17:52,000 --> 00:17:54,880
makes a windows api call we call that an

456
00:17:54,880 --> 00:18:00,000
import as in i'm importing this function

457
00:18:00,000 --> 00:18:03,039
can take the list of api calls imports

458
00:18:03,039 --> 00:18:05,440
and their specific order within the

459
00:18:05,440 --> 00:18:06,720
executable

460
00:18:06,720 --> 00:18:08,960
hash that and come up with the thing we

461
00:18:08,960 --> 00:18:12,400
call an impact or import hash

462
00:18:12,400 --> 00:18:15,360
the point being that even if you do this

463
00:18:15,360 --> 00:18:17,440
kind of polymorphism to change the file

464
00:18:17,440 --> 00:18:19,840
hash the in patch will remain the same

465
00:18:19,840 --> 00:18:22,799
in our dropped files

466
00:18:23,679 --> 00:18:25,760
so out of curiosity what kind of imports

467
00:18:25,760 --> 00:18:28,320
do we see from our dropped files let's

468
00:18:28,320 --> 00:18:30,000
take a look at one of the files in pe

469
00:18:30,000 --> 00:18:32,320
studio which lists the imports

470
00:18:32,320 --> 00:18:35,440
we see that there are 108 imports and i

471
00:18:35,440 --> 00:18:39,200
highlighted one of them here write file

472
00:18:39,200 --> 00:18:41,360
since we see right file we can make a

473
00:18:41,360 --> 00:18:43,039
pretty good guess that this malware

474
00:18:43,039 --> 00:18:47,039
sample will write another file to disk

475
00:18:47,360 --> 00:18:49,520
and here is another import

476
00:18:49,520 --> 00:18:52,000
we see that this malware sample is

477
00:18:52,000 --> 00:18:53,679
importing the connect function from

478
00:18:53,679 --> 00:18:56,080
ws232

479
00:18:56,080 --> 00:18:58,559
the ws being winsock

480
00:18:58,559 --> 00:19:00,640
this tells us that this sample probably

481
00:19:00,640 --> 00:19:02,799
makes a network request like a c2

482
00:19:02,799 --> 00:19:03,840
connection

483
00:19:03,840 --> 00:19:06,240
or maybe download yet more files or

484
00:19:06,240 --> 00:19:09,640
xfill stuff

485
00:19:10,240 --> 00:19:11,600
if you don't know what the connect

486
00:19:11,600 --> 00:19:12,799
function does

487
00:19:12,799 --> 00:19:13,919
you search for it in your favorite

488
00:19:13,919 --> 00:19:16,240
search engine and find the microsoft

489
00:19:16,240 --> 00:19:17,600
documentation

490
00:19:17,600 --> 00:19:20,080
this code is from the microsoft

491
00:19:20,080 --> 00:19:22,160
documentation showing how you would use

492
00:19:22,160 --> 00:19:25,160
connect

493
00:19:26,799 --> 00:19:30,000
to sum it up we saw the sample had 108

494
00:19:30,000 --> 00:19:32,240
imported functions which should be a

495
00:19:32,240 --> 00:19:34,000
large enough sample size to give us a

496
00:19:34,000 --> 00:19:35,840
useful inpatch value

497
00:19:35,840 --> 00:19:37,200
on the other hand think of a sample that

498
00:19:37,200 --> 00:19:39,200
has no inputs at all

499
00:19:39,200 --> 00:19:40,640
that's going to result in many many

500
00:19:40,640 --> 00:19:42,480
false positives if you ever want to have

501
00:19:42,480 --> 00:19:45,840
a left create a file with zero size take

502
00:19:45,840 --> 00:19:47,039
a hash of it

503
00:19:47,039 --> 00:19:48,960
and look that up on virus total check

504
00:19:48,960 --> 00:19:50,640
the community section

505
00:19:50,640 --> 00:19:52,000
you'll see people claiming it's all

506
00:19:52,000 --> 00:19:55,039
kinds of different malware

507
00:19:55,520 --> 00:19:57,440
and in this sample we saw that there

508
00:19:57,440 --> 00:20:00,880
were four dlls imported kernel 32 user

509
00:20:00,880 --> 00:20:03,520
32 ws232

510
00:20:03,520 --> 00:20:04,840
com

511
00:20:04,840 --> 00:20:07,840
ctl32 not an expert here but the imports

512
00:20:07,840 --> 00:20:09,840
that were interesting to me were these

513
00:20:09,840 --> 00:20:14,000
connect write file load library

514
00:20:14,000 --> 00:20:15,919
so we can guess that this malware sample

515
00:20:15,919 --> 00:20:18,400
will write a file to disk

516
00:20:18,400 --> 00:20:20,400
maybe run a dll

517
00:20:20,400 --> 00:20:24,480
and maybe create a network connection

518
00:20:26,559 --> 00:20:28,240
so back to the dropped files and the

519
00:20:28,240 --> 00:20:30,240
polymorphism

520
00:20:30,240 --> 00:20:32,320
how do we find out what's different in

521
00:20:32,320 --> 00:20:35,919
the four files remember that our array

522
00:20:35,919 --> 00:20:40,240
that had the 999 999 values

523
00:20:40,240 --> 00:20:42,320
we can look for the values before or

524
00:20:42,320 --> 00:20:44,720
after the random values

525
00:20:44,720 --> 00:20:46,880
in my case i searched for the seven

526
00:20:46,880 --> 00:20:49,280
bytes before the random values

527
00:20:49,280 --> 00:20:50,880
which you can see in the last line of

528
00:20:50,880 --> 00:20:53,280
the slide

529
00:20:53,840 --> 00:20:56,240
in each of the files

530
00:20:56,240 --> 00:20:58,640
this set of values occurred only once

531
00:20:58,640 --> 00:21:00,960
and at the same address

532
00:21:00,960 --> 00:21:03,120
followed by four bytes which were made

533
00:21:03,120 --> 00:21:06,400
up of values between two and eight

534
00:21:06,400 --> 00:21:08,000
remember the nine values are extremely

535
00:21:08,000 --> 00:21:10,400
rare one in ten million we didn't get

536
00:21:10,400 --> 00:21:12,960
any nines

537
00:21:13,200 --> 00:21:15,760
so the next cool thing to do would be to

538
00:21:15,760 --> 00:21:17,919
determine where in the code the random

539
00:21:17,919 --> 00:21:20,320
values exist like

540
00:21:20,320 --> 00:21:22,159
do they exist in fields that just aren't

541
00:21:22,159 --> 00:21:24,880
used or are they

542
00:21:24,880 --> 00:21:27,919
in some other way in some function area

543
00:21:27,919 --> 00:21:30,880
that is not used at all or just ignored

544
00:21:30,880 --> 00:21:32,480
but i didn't do that i'm not

545
00:21:32,480 --> 00:21:34,000
knowledgeable enough on pe file

546
00:21:34,000 --> 00:21:36,880
structure to pursue that

547
00:21:36,880 --> 00:21:39,200
so back to our vbs

548
00:21:39,200 --> 00:21:41,120
there were still a lot more functions

549
00:21:41,120 --> 00:21:43,440
that we haven't looked at yet

550
00:21:43,440 --> 00:21:46,799
so what else does this dropper do

551
00:21:46,799 --> 00:21:49,360
turns out there are 17 blocks of

552
00:21:49,360 --> 00:21:51,520
obfuscated code in addition to the

553
00:21:51,520 --> 00:21:54,799
encoded file that was dropped

554
00:21:54,799 --> 00:21:56,720
we expect most of those blocks to be

555
00:21:56,720 --> 00:21:59,440
additional functions

556
00:21:59,440 --> 00:22:00,240
so

557
00:22:00,240 --> 00:22:03,120
let's take a look at the second block

558
00:22:03,120 --> 00:22:05,840
turns out that this block is a function

559
00:22:05,840 --> 00:22:08,480
that does some wmi to get the size of

560
00:22:08,480 --> 00:22:09,679
the disk

561
00:22:09,679 --> 00:22:12,480
see the yellow highlighted things select

562
00:22:12,480 --> 00:22:15,440
star from win32 logical disk so we want

563
00:22:15,440 --> 00:22:18,320
to find out the size of the hard drive

564
00:22:18,320 --> 00:22:19,760
why would the threat actors want to do

565
00:22:19,760 --> 00:22:21,760
that

566
00:22:21,760 --> 00:22:23,440
the second highlighted thing gives us a

567
00:22:23,440 --> 00:22:24,240
clue

568
00:22:24,240 --> 00:22:25,840
the throat actors want to know if the

569
00:22:25,840 --> 00:22:29,120
hard drive is under 50 gigabytes in size

570
00:22:29,120 --> 00:22:32,880
i'm guessing that the fs fch

571
00:22:32,880 --> 00:22:36,720
means something like file system check

572
00:22:37,760 --> 00:22:39,919
so if we fail this check meaning the

573
00:22:39,919 --> 00:22:42,559
hard drive is smaller than 50 gigabytes

574
00:22:42,559 --> 00:22:45,360
we log a false message and then we run

575
00:22:45,360 --> 00:22:47,200
ldj well

576
00:22:47,200 --> 00:22:51,039
what is ldj let's take a look

577
00:22:51,039 --> 00:22:52,720
time for another sidebar

578
00:22:52,720 --> 00:22:56,159
what is ldj

579
00:22:56,320 --> 00:22:58,880
note that ldj is just another one of the

580
00:22:58,880 --> 00:23:01,280
obfuscated code blocks

581
00:23:01,280 --> 00:23:03,200
in the red highlighted thing the thread

582
00:23:03,200 --> 00:23:05,280
actor is testing if the file name of the

583
00:23:05,280 --> 00:23:07,440
vbs is the string

584
00:23:07,440 --> 00:23:10,440
82984

585
00:23:10,720 --> 00:23:14,000
if so we log sandbox push and end the

586
00:23:14,000 --> 00:23:15,360
function

587
00:23:15,360 --> 00:23:18,480
if not we run more stuff we run function

588
00:23:18,480 --> 00:23:20,720
dla blah blah blah

589
00:23:20,720 --> 00:23:22,960
we run function nimbus

590
00:23:22,960 --> 00:23:25,440
and then we do wscript.quit

591
00:23:25,440 --> 00:23:26,960
which ends the execution of the whole

592
00:23:26,960 --> 00:23:29,520
vbs

593
00:23:30,000 --> 00:23:31,919
now i kind of want to know what dla and

594
00:23:31,919 --> 00:23:34,480
nimbus do

595
00:23:35,600 --> 00:23:38,640
dla is yet another obfuscated function

596
00:23:38,640 --> 00:23:41,039
and here's the code

597
00:23:41,039 --> 00:23:43,279
note the thing highlighted in green

598
00:23:43,279 --> 00:23:45,200
this function wants us to do some kind

599
00:23:45,200 --> 00:23:47,679
of http request

600
00:23:47,679 --> 00:23:48,880
then we take a look at the yellow

601
00:23:48,880 --> 00:23:50,559
highlighted stuff

602
00:23:50,559 --> 00:23:53,039
we pass in some value to the function

603
00:23:53,039 --> 00:23:54,480
and we see that

604
00:23:54,480 --> 00:23:56,559
the passed in thing is part of the get

605
00:23:56,559 --> 00:23:57,600
request

606
00:23:57,600 --> 00:24:00,080
and then there's a send call

607
00:24:00,080 --> 00:24:02,640
so whatever is passed into this function

608
00:24:02,640 --> 00:24:05,279
that's where we send the get request

609
00:24:05,279 --> 00:24:08,400
meaning we're expecting an fqdn or ip

610
00:24:08,400 --> 00:24:09,840
address

611
00:24:09,840 --> 00:24:11,840
let's fit back flip back to the previous

612
00:24:11,840 --> 00:24:15,279
slide what were we passing yet

613
00:24:15,840 --> 00:24:18,480
so this http request is not going to

614
00:24:18,480 --> 00:24:21,279
work in that the get request is

615
00:24:21,279 --> 00:24:24,559
sending to dash

616
00:24:25,520 --> 00:24:28,080
so theoretically this function may be to

617
00:24:28,080 --> 00:24:30,720
reach out to c2 like a beacon but it

618
00:24:30,720 --> 00:24:32,080
appears that this feature just isn't

619
00:24:32,080 --> 00:24:34,399
used

620
00:24:35,120 --> 00:24:38,719
so let's take a look at nimbus

621
00:24:39,279 --> 00:24:41,200
nimbus is a very simple script just

622
00:24:41,200 --> 00:24:42,960
these two lines

623
00:24:42,960 --> 00:24:46,159
all this does is delete a file

624
00:24:46,159 --> 00:24:47,400
in this case

625
00:24:47,400 --> 00:24:49,679
wscript.script full name

626
00:24:49,679 --> 00:24:52,080
which means delete the vbs that is

627
00:24:52,080 --> 00:24:53,520
running

628
00:24:53,520 --> 00:24:55,760
so this appears to be the thread actors

629
00:24:55,760 --> 00:24:57,600
cleaning up after themselves

630
00:24:57,600 --> 00:24:59,600
they are destroying the evidence that is

631
00:24:59,600 --> 00:25:02,480
the vbs file

632
00:25:03,679 --> 00:25:05,679
so if our hard drive is under 50

633
00:25:05,679 --> 00:25:09,760
gigabytes we send a http get to nowhere

634
00:25:09,760 --> 00:25:11,760
we delete the vbs file

635
00:25:11,760 --> 00:25:13,279
and we end the script

636
00:25:13,279 --> 00:25:14,480
so

637
00:25:14,480 --> 00:25:15,919
seems like they're cleaning up after

638
00:25:15,919 --> 00:25:19,840
themselves just just destroying evidence

639
00:25:19,840 --> 00:25:21,440
so one more thing

640
00:25:21,440 --> 00:25:23,360
why 50 gigabytes

641
00:25:23,360 --> 00:25:25,440
had a hunch and started creating a new

642
00:25:25,440 --> 00:25:28,880
vm and virtualbox by default a win 10

643
00:25:28,880 --> 00:25:31,279
64-bit vm

644
00:25:31,279 --> 00:25:34,720
defaults to a 50 gigabyte disk

645
00:25:34,720 --> 00:25:36,480
when you calculate it the way the vbs

646
00:25:36,480 --> 00:25:37,440
does

647
00:25:37,440 --> 00:25:40,000
the result comes in slightly smaller

648
00:25:40,000 --> 00:25:41,600
than 50 gigabytes

649
00:25:41,600 --> 00:25:44,880
so a default wind 10 64-bit vm in

650
00:25:44,880 --> 00:25:46,159
virtualbox

651
00:25:46,159 --> 00:25:47,200
would

652
00:25:47,200 --> 00:25:52,400
be too small for the vbs to run

653
00:25:52,799 --> 00:25:54,640
as a guess to why the threat threat

654
00:25:54,640 --> 00:25:57,039
actors would do this this is just uh

655
00:25:57,039 --> 00:25:59,200
anti-analysis as in

656
00:25:59,200 --> 00:26:01,600
if you're running this vbs in a small vm

657
00:26:01,600 --> 00:26:03,360
you're probably doing malware analysis

658
00:26:03,360 --> 00:26:06,240
you're probably not a real user at a

659
00:26:06,240 --> 00:26:07,679
real host

660
00:26:07,679 --> 00:26:08,400
so

661
00:26:08,400 --> 00:26:10,080
we're not going to show you what the vbs

662
00:26:10,080 --> 00:26:12,320
does

663
00:26:14,240 --> 00:26:15,440
and i'm guessing that we don't want to

664
00:26:15,440 --> 00:26:16,880
go through each function we don't want

665
00:26:16,880 --> 00:26:19,360
to go through all 17 one at a time so

666
00:26:19,360 --> 00:26:20,720
here's a summary of what the other

667
00:26:20,720 --> 00:26:22,960
functions do and we can take a look at

668
00:26:22,960 --> 00:26:25,840
just the interesting stuff

669
00:26:26,320 --> 00:26:28,480
we see other anti-analysis things like

670
00:26:28,480 --> 00:26:30,400
checking four number of cores if under

671
00:26:30,400 --> 00:26:32,960
three quit destroy evidence

672
00:26:32,960 --> 00:26:35,919
if physical memory is under 1030

673
00:26:35,919 --> 00:26:38,640
megabytes quit and destroy evidence

674
00:26:38,640 --> 00:26:40,480
the functions on this page that i found

675
00:26:40,480 --> 00:26:43,120
interesting are function num

676
00:26:43,120 --> 00:26:45,200
which the thread actors labeled fs

677
00:26:45,200 --> 00:26:46,240
process

678
00:26:46,240 --> 00:26:47,919
this does some checking on running

679
00:26:47,919 --> 00:26:51,039
processes other interesting one is

680
00:26:51,039 --> 00:26:55,120
function era which is labeled front

681
00:26:55,120 --> 00:26:57,200
this is the thing that actually runs the

682
00:26:57,200 --> 00:26:59,200
dropped dll

683
00:26:59,200 --> 00:27:01,520
and our list of functions continues we

684
00:27:01,520 --> 00:27:02,960
have

685
00:27:02,960 --> 00:27:04,559
other functions that do various things

686
00:27:04,559 --> 00:27:06,480
and interesting ones from here are the

687
00:27:06,480 --> 00:27:09,679
ones highlighted in green i liked

688
00:27:09,679 --> 00:27:13,520
f message and f lock file

689
00:27:13,520 --> 00:27:14,799
so let's take a look at the interesting

690
00:27:14,799 --> 00:27:16,400
ones

691
00:27:16,400 --> 00:27:18,080
in f message

692
00:27:18,080 --> 00:27:20,000
we see that the threat actors pop up a

693
00:27:20,000 --> 00:27:22,799
message box with that specific error

694
00:27:22,799 --> 00:27:24,799
message highlighted in yellow

695
00:27:24,799 --> 00:27:29,080
the can't start msvcr101.dll

696
00:27:30,720 --> 00:27:32,320
and here's what that error message looks

697
00:27:32,320 --> 00:27:34,480
like

698
00:27:34,480 --> 00:27:36,799
and my guess is that this is a false

699
00:27:36,799 --> 00:27:38,159
flag they're trying to convince the

700
00:27:38,159 --> 00:27:41,279
victim that the vbs ran into some error

701
00:27:41,279 --> 00:27:43,440
it didn't really do anything so just go

702
00:27:43,440 --> 00:27:46,080
on with your life

703
00:27:47,039 --> 00:27:51,200
however that msvcr101.dll

704
00:27:51,200 --> 00:27:53,600
i guess that file doesn't actually exist

705
00:27:53,600 --> 00:27:55,279
i did a search for it

706
00:27:55,279 --> 00:27:57,440
and the first hit is trend micro

707
00:27:57,440 --> 00:27:59,600
identifying that as part of a malware

708
00:27:59,600 --> 00:28:01,600
sample

709
00:28:01,600 --> 00:28:03,520
the next couple of hits show that

710
00:28:03,520 --> 00:28:05,760
msvcr110

711
00:28:05,760 --> 00:28:07,440
is a legit filename

712
00:28:07,440 --> 00:28:09,120
i don't know if this is just the typo by

713
00:28:09,120 --> 00:28:10,799
the threat actors or they intentionally

714
00:28:10,799 --> 00:28:13,440
use the fake fun name

715
00:28:13,440 --> 00:28:15,600
my point here being that the fake error

716
00:28:15,600 --> 00:28:17,200
message kind of backfires on the threat

717
00:28:17,200 --> 00:28:18,399
actors

718
00:28:18,399 --> 00:28:19,919
they want the victim to think that

719
00:28:19,919 --> 00:28:22,559
nothing actually ran but if the victim

720
00:28:22,559 --> 00:28:24,880
searches for that file name

721
00:28:24,880 --> 00:28:27,120
they will find something suspicious

722
00:28:27,120 --> 00:28:29,200
right

723
00:28:29,200 --> 00:28:31,600
so let's move on and take a look at f

724
00:28:31,600 --> 00:28:34,158
lock file

725
00:28:34,960 --> 00:28:37,039
so in this code what

726
00:28:37,039 --> 00:28:40,480
we're doing is if a file named adobe dot

727
00:28:40,480 --> 00:28:42,880
url already exists this is the thing in

728
00:28:42,880 --> 00:28:45,360
yellow if it already exists

729
00:28:45,360 --> 00:28:48,000
run ldj which is the thing that deletes

730
00:28:48,000 --> 00:28:51,120
the vbs and ends the process

731
00:28:51,120 --> 00:28:53,039
otherwise

732
00:28:53,039 --> 00:28:54,960
we see we go to the green highlighted

733
00:28:54,960 --> 00:28:58,000
section else we create the adobe.url

734
00:28:58,000 --> 00:29:01,039
file which only contains a hyperlink to

735
00:29:01,039 --> 00:29:03,440
adobe.com

736
00:29:03,440 --> 00:29:05,279
so one thing you may be asking is well

737
00:29:05,279 --> 00:29:08,240
what is sandhill

738
00:29:08,480 --> 00:29:10,840
santel is yet another function that

739
00:29:10,840 --> 00:29:14,080
returned that was obfuscated and all

740
00:29:14,080 --> 00:29:15,200
this does

741
00:29:15,200 --> 00:29:17,279
is return the environment valuable

742
00:29:17,279 --> 00:29:19,120
variable temp

743
00:29:19,120 --> 00:29:21,039
and below the dotted line is what it

744
00:29:21,039 --> 00:29:24,000
looked like on

745
00:29:24,840 --> 00:29:27,600
myvm so since we haven't seen anything

746
00:29:27,600 --> 00:29:30,480
malicious in this uh f lock file i

747
00:29:30,480 --> 00:29:31,760
actually tried it

748
00:29:31,760 --> 00:29:33,760
it's exactly what you'd expect it's a

749
00:29:33,760 --> 00:29:35,919
shortcut that only contains a hyperlink

750
00:29:35,919 --> 00:29:37,679
to adobe.com

751
00:29:37,679 --> 00:29:39,440
there's nothing malicious about it at

752
00:29:39,440 --> 00:29:41,039
all so

753
00:29:41,039 --> 00:29:42,320
why would the threat actors be doing

754
00:29:42,320 --> 00:29:44,720
this check

755
00:29:45,360 --> 00:29:47,279
my guess is that they're using the

756
00:29:47,279 --> 00:29:50,960
adobe.url file as a mutex

757
00:29:50,960 --> 00:29:53,919
meaning if the adobe.url file already

758
00:29:53,919 --> 00:29:54,960
exists

759
00:29:54,960 --> 00:29:57,760
this this host was already a victim of

760
00:29:57,760 --> 00:29:59,840
the attack so there's no need to run the

761
00:29:59,840 --> 00:30:02,639
vbs again

762
00:30:03,760 --> 00:30:06,480
and here's another interesting check fs

763
00:30:06,480 --> 00:30:07,600
process

764
00:30:07,600 --> 00:30:10,399
this actually does two checks

765
00:30:10,399 --> 00:30:12,240
the yellow highlight shows that the

766
00:30:12,240 --> 00:30:14,000
script queries

767
00:30:14,000 --> 00:30:16,240
all running processes

768
00:30:16,240 --> 00:30:18,159
the green highlighted thing steps

769
00:30:18,159 --> 00:30:20,320
through the list of running processes

770
00:30:20,320 --> 00:30:22,480
and if any of the running processes

771
00:30:22,480 --> 00:30:25,840
matches the name in a list in the script

772
00:30:25,840 --> 00:30:28,720
we quit and destroy evidence

773
00:30:28,720 --> 00:30:30,880
the orange highlight counts the number

774
00:30:30,880 --> 00:30:32,480
of running processes

775
00:30:32,480 --> 00:30:34,480
if there are less than 28 quit and

776
00:30:34,480 --> 00:30:36,880
destroy evidence

777
00:30:36,880 --> 00:30:37,840
so

778
00:30:37,840 --> 00:30:39,600
what's in the list

779
00:30:39,600 --> 00:30:41,919
sorry i know this is uh really small to

780
00:30:41,919 --> 00:30:43,960
read and even then i couldn't fit all

781
00:30:43,960 --> 00:30:46,080
139 items

782
00:30:46,080 --> 00:30:48,480
but in this list we do see a lot of

783
00:30:48,480 --> 00:30:50,720
malware analysis things like procmon

784
00:30:50,720 --> 00:30:53,840
process explorer ollie debug windy bug

785
00:30:53,840 --> 00:30:56,639
tcp dump

786
00:30:57,679 --> 00:30:59,840
and probably our most important function

787
00:30:59,840 --> 00:31:01,279
f run

788
00:31:01,279 --> 00:31:03,360
this is the thing that runs the dropped

789
00:31:03,360 --> 00:31:04,960
file

790
00:31:04,960 --> 00:31:07,519
the key thing is highlighted in yellow

791
00:31:07,519 --> 00:31:11,039
where we see run dll32 is used to run

792
00:31:11,039 --> 00:31:13,640
ratio.drc

793
00:31:13,640 --> 00:31:16,000
ratio.drc is a file that is dropped

794
00:31:16,000 --> 00:31:18,799
earlier the one that has the four

795
00:31:18,799 --> 00:31:21,120
randomized values in it

796
00:31:21,120 --> 00:31:23,440
in green we saw the we see the functions

797
00:31:23,440 --> 00:31:26,240
that we saw before and http get request

798
00:31:26,240 --> 00:31:28,480
to nowhere and nimbus which deletes the

799
00:31:28,480 --> 00:31:31,480
vbs

800
00:31:33,120 --> 00:31:35,360
and i snipped this part out of ephron in

801
00:31:35,360 --> 00:31:36,559
the previous slide to make it more

802
00:31:36,559 --> 00:31:38,240
readable but this is pretty interesting

803
00:31:38,240 --> 00:31:39,519
too

804
00:31:39,519 --> 00:31:41,760
remember earlier there was a function

805
00:31:41,760 --> 00:31:44,159
that checked if the bbs

806
00:31:44,159 --> 00:31:47,600
file was named 82984

807
00:31:47,600 --> 00:31:50,720
we see that if statement again

808
00:31:50,720 --> 00:31:53,679
this time if it's the testing file name

809
00:31:53,679 --> 00:31:55,519
rather than run the dropped file with

810
00:31:55,519 --> 00:31:57,039
rundllr32

811
00:31:57,039 --> 00:31:59,519
we're just running calc.exe

812
00:31:59,519 --> 00:32:02,399
so if you ever heard the term pop calc

813
00:32:02,399 --> 00:32:03,840
this is what they mean

814
00:32:03,840 --> 00:32:06,320
you run calc.exe to test that the thing

815
00:32:06,320 --> 00:32:09,600
you're trying to do works

816
00:32:11,279 --> 00:32:13,200
so remember back at the beginning the

817
00:32:13,200 --> 00:32:15,039
xavier martin's article was named

818
00:32:15,039 --> 00:32:17,279
russian doll or something something

819
00:32:17,279 --> 00:32:18,880
well that was a pretty good description

820
00:32:18,880 --> 00:32:20,960
in that there there are layers this

821
00:32:20,960 --> 00:32:23,679
malware right the innermost stall would

822
00:32:23,679 --> 00:32:26,880
be the payload the dll that gets dropped

823
00:32:26,880 --> 00:32:29,039
then there is a vbs script which

824
00:32:29,039 --> 00:32:31,679
obfuscates the dll payload making it

825
00:32:31,679 --> 00:32:34,720
unreadable without processing

826
00:32:34,720 --> 00:32:36,640
then there is another layer of

827
00:32:36,640 --> 00:32:40,000
obfuscation where we take each function

828
00:32:40,000 --> 00:32:42,640
from the vbs we obfuscate that into an

829
00:32:42,640 --> 00:32:46,000
array of integer values

830
00:32:46,640 --> 00:32:48,880
okay so it's time to start wrapping this

831
00:32:48,880 --> 00:32:51,440
up as a malware analyst my job is to

832
00:32:51,440 --> 00:32:53,360
relay some information to some other

833
00:32:53,360 --> 00:32:54,840
teams that need

834
00:32:54,840 --> 00:32:57,679
it first i need to get information to my

835
00:32:57,679 --> 00:32:59,200
internet response team as quickly as

836
00:32:59,200 --> 00:33:02,240
possible so they can contain the attack

837
00:33:02,240 --> 00:33:04,159
i want to report back to my internet

838
00:33:04,159 --> 00:33:07,279
response people that if the vbs ran on

839
00:33:07,279 --> 00:33:09,440
the victim host we should find some new

840
00:33:09,440 --> 00:33:12,880
files the ratio.drc file

841
00:33:12,880 --> 00:33:15,039
and the which is the dll that was

842
00:33:15,039 --> 00:33:17,600
dropped for the abs and the adobe dot

843
00:33:17,600 --> 00:33:20,399
url file which is totally benign

844
00:33:20,399 --> 00:33:23,760
but they appear to be using it as mutex

845
00:33:23,760 --> 00:33:25,679
i also want my internet response people

846
00:33:25,679 --> 00:33:29,120
to look for the run dll32 process which

847
00:33:29,120 --> 00:33:31,919
executes ratio.drc

848
00:33:31,919 --> 00:33:34,399
and finally remember that error message

849
00:33:34,399 --> 00:33:36,320
msvcr101

850
00:33:36,320 --> 00:33:38,720
we can ask victim users if they saw that

851
00:33:38,720 --> 00:33:41,279
error message

852
00:33:42,960 --> 00:33:45,600
i also want to get information to my

853
00:33:45,600 --> 00:33:47,360
threat detection team

854
00:33:47,360 --> 00:33:49,039
this would be the people who create

855
00:33:49,039 --> 00:33:52,159
methods to detect malicious activity

856
00:33:52,159 --> 00:33:54,640
first we have a couple of ideas from the

857
00:33:54,640 --> 00:33:57,360
run dll32 execution

858
00:33:57,360 --> 00:34:00,880
should we be seeing run dll32 execute a

859
00:34:00,880 --> 00:34:04,960
file with a drc extension

860
00:34:04,960 --> 00:34:07,039
in general this should just be files

861
00:34:07,039 --> 00:34:10,239
with a dll extension right

862
00:34:10,239 --> 00:34:13,119
next should we be using run dlo32 to

863
00:34:13,119 --> 00:34:15,520
execute files from temp

864
00:34:15,520 --> 00:34:17,520
shouldn't your dlls be in a system

865
00:34:17,520 --> 00:34:21,839
folder like windows system32

866
00:34:22,000 --> 00:34:24,000
next we'd like to review the process

867
00:34:24,000 --> 00:34:25,280
ancestry

868
00:34:25,280 --> 00:34:26,960
a vbs file

869
00:34:26,960 --> 00:34:29,839
will probably be executed by w script or

870
00:34:29,839 --> 00:34:31,280
c script

871
00:34:31,280 --> 00:34:33,679
should w script or c script be running

872
00:34:33,679 --> 00:34:35,679
run dll32

873
00:34:35,679 --> 00:34:37,599
i don't actually know how common this is

874
00:34:37,599 --> 00:34:38,800
i'm guessing

875
00:34:38,800 --> 00:34:42,399
or hoping not very common

876
00:34:43,839 --> 00:34:45,440
i also have a threat enzo team that

877
00:34:45,440 --> 00:34:48,239
wants information on tactics techniques

878
00:34:48,239 --> 00:34:50,800
and procedures ttps

879
00:34:50,800 --> 00:34:52,480
so i want to provide them with some

880
00:34:52,480 --> 00:34:55,679
highlights using the attack techniques

881
00:34:55,679 --> 00:34:58,320
under execution we have user execution

882
00:34:58,320 --> 00:35:00,720
the vbs file needs to be run

883
00:35:00,720 --> 00:35:02,640
it could be that the vbs file was

884
00:35:02,640 --> 00:35:05,520
actually a macro in a microsoft office

885
00:35:05,520 --> 00:35:07,920
file in which case the victim thought

886
00:35:07,920 --> 00:35:09,839
that they were just opening a dock or

887
00:35:09,839 --> 00:35:11,440
spreadsheet

888
00:35:11,440 --> 00:35:13,920
we also have visual basic which should

889
00:35:13,920 --> 00:35:15,520
be kind of obvious in that it's a vbs

890
00:35:15,520 --> 00:35:17,839
file

891
00:35:19,359 --> 00:35:22,560
and we have a bunch of wmi queries which

892
00:35:22,560 --> 00:35:24,320
were used to gather information on the

893
00:35:24,320 --> 00:35:25,920
victimhost

894
00:35:25,920 --> 00:35:28,160
it appears these queries were used to

895
00:35:28,160 --> 00:35:30,560
determine if the victim host was a real

896
00:35:30,560 --> 00:35:35,680
victim or a malware analysis sandbox

897
00:35:37,200 --> 00:35:38,880
there were also techniques that fit

898
00:35:38,880 --> 00:35:40,640
under defense evasion

899
00:35:40,640 --> 00:35:43,280
there were execution guard rails

900
00:35:43,280 --> 00:35:45,280
remember the specific file name that the

901
00:35:45,280 --> 00:35:47,200
thread actors used for testing if the

902
00:35:47,200 --> 00:35:49,000
vbs file was named

903
00:35:49,000 --> 00:35:52,480
82984 then don't run the dll just pop

904
00:35:52,480 --> 00:35:54,160
calc

905
00:35:54,160 --> 00:35:57,680
we also have the adobe.url mutex if the

906
00:35:57,680 --> 00:36:00,960
mutex is already there don't run the dll

907
00:36:00,960 --> 00:36:04,960
and of course the wmi stuff we mentioned

908
00:36:04,960 --> 00:36:07,440
just a few slides ago if it looks like

909
00:36:07,440 --> 00:36:11,040
an analysis analysis sandbox don't run

910
00:36:11,040 --> 00:36:13,040
the dll

911
00:36:13,040 --> 00:36:15,839
we also see signed binary proxy

912
00:36:15,839 --> 00:36:17,040
execution

913
00:36:17,040 --> 00:36:18,720
in that the threat actors are using

914
00:36:18,720 --> 00:36:22,079
totally legit run dll32 to execute

915
00:36:22,079 --> 00:36:25,079
ratio.drc

916
00:36:25,599 --> 00:36:27,359
and that's the end of my presentation

917
00:36:27,359 --> 00:36:28,880
the rest of the slides are just

918
00:36:28,880 --> 00:36:30,079
references

919
00:36:30,079 --> 00:36:31,599
i'll be over in the chat to answer any

920
00:36:31,599 --> 00:36:33,920
questions you have and if you have any

921
00:36:33,920 --> 00:36:35,760
other feedback please do let me know

922
00:36:35,760 --> 00:36:37,440
thank you very much that's all i have

923
00:36:37,440 --> 00:36:40,440
today

924
00:37:09,599 --> 00:37:11,680
you

