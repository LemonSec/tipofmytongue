1
00:00:03,520 --> 00:00:05,440
hello everyone

2
00:00:05,440 --> 00:00:07,120
welcome to cactus con this is my first

3
00:00:07,120 --> 00:00:08,160
time here

4
00:00:08,160 --> 00:00:11,040
i'm really excited to be here in person

5
00:00:11,040 --> 00:00:11,840
um

6
00:00:11,840 --> 00:00:13,280
thank you for joining me for this

7
00:00:13,280 --> 00:00:16,960
session of some api security api is

8
00:00:16,960 --> 00:00:18,880
great it's nice we all like it we all

9
00:00:18,880 --> 00:00:20,080
use it

10
00:00:20,080 --> 00:00:22,480
but it has its pitfalls and we're going

11
00:00:22,480 --> 00:00:25,039
to discuss that today

12
00:00:25,039 --> 00:00:25,840
so

13
00:00:25,840 --> 00:00:28,240
let's start with the quiz

14
00:00:28,240 --> 00:00:33,119
what do all these logos have in common

15
00:00:36,000 --> 00:00:38,640
i'm sure there are several answers but

16
00:00:38,640 --> 00:00:40,960
um the one that i'm aiming at is that

17
00:00:40,960 --> 00:00:42,480
all of those had

18
00:00:42,480 --> 00:00:44,800
some sort of breach or vulnerability

19
00:00:44,800 --> 00:00:47,039
exposed around apis

20
00:00:47,039 --> 00:00:49,120
and this is only in the last year

21
00:00:49,120 --> 00:00:51,039
maybe even less so

22
00:00:51,039 --> 00:00:52,399
probably next year if i'm giving the

23
00:00:52,399 --> 00:00:56,399
same lecture i will need smaller logos

24
00:00:56,399 --> 00:00:58,719
who am i my name is erez i'm the head of

25
00:00:58,719 --> 00:01:02,399
security research at checkmarks

26
00:01:02,399 --> 00:01:04,239
i'm fascinated by information security

27
00:01:04,239 --> 00:01:05,840
and application security in general

28
00:01:05,840 --> 00:01:07,439
application security started as

29
00:01:07,439 --> 00:01:08,720
something that is

30
00:01:08,720 --> 00:01:10,960
very limited to code but these days

31
00:01:10,960 --> 00:01:12,880
application security is much wider than

32
00:01:12,880 --> 00:01:16,479
that we move from uh the code you write

33
00:01:16,479 --> 00:01:18,799
to the code you use to dependencies open

34
00:01:18,799 --> 00:01:20,560
source apis

35
00:01:20,560 --> 00:01:23,840
uh containers everything that is cloud

36
00:01:23,840 --> 00:01:26,400
and even supply chains so we need to

37
00:01:26,400 --> 00:01:28,479
move forward and this is to me it's

38
00:01:28,479 --> 00:01:30,000
fascinating

39
00:01:30,000 --> 00:01:31,840
i'm a software developer

40
00:01:31,840 --> 00:01:32,960
um

41
00:01:32,960 --> 00:01:34,159
originally

42
00:01:34,159 --> 00:01:35,200
but

43
00:01:35,200 --> 00:01:37,119
i realized that i'm better at breaking

44
00:01:37,119 --> 00:01:39,360
things than actually building them so i

45
00:01:39,360 --> 00:01:40,960
did this transition

46
00:01:40,960 --> 00:01:42,240
i'm a strong believer in spreading

47
00:01:42,240 --> 00:01:43,759
security awareness this is one of the

48
00:01:43,759 --> 00:01:46,640
reasons i'm here i lead os projects

49
00:01:46,640 --> 00:01:49,439
including the api security project that

50
00:01:49,439 --> 00:01:52,079
we're going to talk in depth about

51
00:01:52,079 --> 00:01:53,600
during this talk

52
00:01:53,600 --> 00:01:55,360
and i'm also the founder of the apsec

53
00:01:55,360 --> 00:01:58,719
village in defcon

54
00:01:59,040 --> 00:02:01,360
on top of all that i have a superpower

55
00:02:01,360 --> 00:02:04,159
and this super power is the fact that i

56
00:02:04,159 --> 00:02:07,280
see a lot of mistakes out there

57
00:02:07,280 --> 00:02:09,199
through the projects and through

58
00:02:09,199 --> 00:02:10,560
our customers

59
00:02:10,560 --> 00:02:13,200
i see many many mistakes and the

60
00:02:13,200 --> 00:02:15,280
mistakes giving us the

61
00:02:15,280 --> 00:02:16,959
the secret power of

62
00:02:16,959 --> 00:02:18,720
predicting the future

63
00:02:18,720 --> 00:02:21,040
because the technology moves forward we

64
00:02:21,040 --> 00:02:22,879
know that

65
00:02:22,879 --> 00:02:25,440
security sometimes stay behind and then

66
00:02:25,440 --> 00:02:27,520
we start to see the mistakes and the

67
00:02:27,520 --> 00:02:29,200
problems accumulate

68
00:02:29,200 --> 00:02:32,319
and we are definitely in a point where

69
00:02:32,319 --> 00:02:34,879
a lot of problems and lack of

70
00:02:34,879 --> 00:02:37,920
information comes around api and api

71
00:02:37,920 --> 00:02:39,280
security

72
00:02:39,280 --> 00:02:41,760
so what is an api

73
00:02:41,760 --> 00:02:44,000
i'm not going to read you the entire

74
00:02:44,000 --> 00:02:45,840
wikipedia

75
00:02:45,840 --> 00:02:47,360
paragraph about that

76
00:02:47,360 --> 00:02:50,239
but basically api we all know that it's

77
00:02:50,239 --> 00:02:52,080
an interface or communication protocol

78
00:02:52,080 --> 00:02:54,160
between a client and a server

79
00:02:54,160 --> 00:02:56,080
and a client as a server can be

80
00:02:56,080 --> 00:02:58,800
basically anything and if we look at the

81
00:02:58,800 --> 00:03:00,640
simple graphic here

82
00:03:00,640 --> 00:03:02,560
in the bottom of the slide we can see

83
00:03:02,560 --> 00:03:04,560
that the apis are the glue or the

84
00:03:04,560 --> 00:03:06,560
connections or the pipes between

85
00:03:06,560 --> 00:03:08,159
different components

86
00:03:08,159 --> 00:03:09,840
so we have component one talking to

87
00:03:09,840 --> 00:03:11,760
component two and component four talking

88
00:03:11,760 --> 00:03:13,440
to component one

89
00:03:13,440 --> 00:03:14,879
and this

90
00:03:14,879 --> 00:03:17,870
talking is done by apis

91
00:03:17,870 --> 00:03:20,640
[Music]

92
00:03:20,640 --> 00:03:23,120
so what is api security what are we

93
00:03:23,120 --> 00:03:24,560
going to talk about

94
00:03:24,560 --> 00:03:26,799
to understand what api security is i

95
00:03:26,799 --> 00:03:28,799
want to discuss the question what uses

96
00:03:28,799 --> 00:03:30,159
apis

97
00:03:30,159 --> 00:03:32,319
so

98
00:03:32,319 --> 00:03:34,239
basically everything really um

99
00:03:34,239 --> 00:03:37,440
microservices and mobile and iot

100
00:03:37,440 --> 00:03:38,239
um

101
00:03:38,239 --> 00:03:41,200
cannot really survive without talking to

102
00:03:41,200 --> 00:03:44,400
some sort of server

103
00:03:44,400 --> 00:03:47,040
every b2b these days is using an

104
00:03:47,040 --> 00:03:51,280
extensive uh list of apis um everything

105
00:03:51,280 --> 00:03:52,879
that is serverless everything that is

106
00:03:52,879 --> 00:03:55,920
cloud and also the very popular these

107
00:03:55,920 --> 00:03:58,239
days single page applications

108
00:03:58,239 --> 00:04:00,879
really everything uses apis and we

109
00:04:00,879 --> 00:04:04,080
really love apis apis are great we love

110
00:04:04,080 --> 00:04:06,400
them and they're very useful

111
00:04:06,400 --> 00:04:07,599
and

112
00:04:07,599 --> 00:04:09,920
every modern application basically uses

113
00:04:09,920 --> 00:04:12,480
them so when i talk about api security

114
00:04:12,480 --> 00:04:15,040
what i'm actually saying is the security

115
00:04:15,040 --> 00:04:17,199
of api based apps

116
00:04:17,199 --> 00:04:18,160
and

117
00:04:18,160 --> 00:04:20,079
actually this is the modern application

118
00:04:20,079 --> 00:04:21,839
security this is

119
00:04:21,839 --> 00:04:24,080
where we are now there is no application

120
00:04:24,080 --> 00:04:26,880
security without looking at api security

121
00:04:26,880 --> 00:04:29,040
this is not something we can do anymore

122
00:04:29,040 --> 00:04:30,960
we cannot ignore that part

123
00:04:30,960 --> 00:04:32,560
of security

124
00:04:32,560 --> 00:04:35,120
so i mentioned modern so let's let's

125
00:04:35,120 --> 00:04:37,600
mention the differences between modern

126
00:04:37,600 --> 00:04:40,080
and traditional applications

127
00:04:40,080 --> 00:04:41,199
so

128
00:04:41,199 --> 00:04:42,960
let's start with what is similar in

129
00:04:42,960 --> 00:04:44,880
traditional applications

130
00:04:44,880 --> 00:04:47,199
and in modern applications we have

131
00:04:47,199 --> 00:04:48,479
a user

132
00:04:48,479 --> 00:04:50,479
contacting some sort of client in the

133
00:04:50,479 --> 00:04:53,520
past it used to be only

134
00:04:53,520 --> 00:04:54,880
a web browser

135
00:04:54,880 --> 00:04:57,600
these days it can be

136
00:04:57,600 --> 00:04:59,600
iot mobile

137
00:04:59,600 --> 00:05:02,160
smart toaster

138
00:05:02,160 --> 00:05:04,479
bot whatever we don't really care and

139
00:05:04,479 --> 00:05:06,160
the user doesn't really care how do you

140
00:05:06,160 --> 00:05:08,160
interpret that

141
00:05:08,160 --> 00:05:10,240
all the user want is the same in both

142
00:05:10,240 --> 00:05:11,919
ways to get back the information they

143
00:05:11,919 --> 00:05:13,120
are looking for

144
00:05:13,120 --> 00:05:14,000
or

145
00:05:14,000 --> 00:05:16,479
to do the activity they are expecting

146
00:05:16,479 --> 00:05:18,400
this is similar

147
00:05:18,400 --> 00:05:20,639
another similarity is the server that is

148
00:05:20,639 --> 00:05:22,479
talking to a database

149
00:05:22,479 --> 00:05:24,720
in the past we had an actual server

150
00:05:24,720 --> 00:05:26,479
maybe even a server room

151
00:05:26,479 --> 00:05:29,360
talking to a database these days the

152
00:05:29,360 --> 00:05:31,280
server can be

153
00:05:31,280 --> 00:05:33,440
an aggregation of

154
00:05:33,440 --> 00:05:36,960
of microservices or whatever

155
00:05:36,960 --> 00:05:40,720
also the database hopefully is no longer

156
00:05:40,720 --> 00:05:43,680
the dreaded sql server but some sort of

157
00:05:43,680 --> 00:05:47,440
elastic or i don't know sql but again

158
00:05:47,440 --> 00:05:49,520
the similarity is the same the the

159
00:05:49,520 --> 00:05:51,039
result is the same you get some sort of

160
00:05:51,039 --> 00:05:53,680
information from the database to the

161
00:05:53,680 --> 00:05:54,639
server

162
00:05:54,639 --> 00:05:56,479
and here starts the the interesting part

163
00:05:56,479 --> 00:05:58,400
the difference

164
00:05:58,400 --> 00:06:00,639
in traditional application the client

165
00:06:00,639 --> 00:06:04,400
would set a get request

166
00:06:04,880 --> 00:06:07,520
the server would

167
00:06:07,520 --> 00:06:09,840
do the logic part the understanding of

168
00:06:09,840 --> 00:06:12,319
what's happening and

169
00:06:12,319 --> 00:06:15,520
reply with a completely rendered html

170
00:06:15,520 --> 00:06:16,880
page

171
00:06:16,880 --> 00:06:19,520
these days it's not the same anymore

172
00:06:19,520 --> 00:06:22,560
currently our client sends a series of

173
00:06:22,560 --> 00:06:24,560
api get requests

174
00:06:24,560 --> 00:06:26,479
and gets back

175
00:06:26,479 --> 00:06:28,800
raw and sells with

176
00:06:28,800 --> 00:06:32,319
parameters and information

177
00:06:33,280 --> 00:06:34,800
the logic part

178
00:06:34,800 --> 00:06:37,280
happens on the client

179
00:06:37,280 --> 00:06:39,039
and this is

180
00:06:39,039 --> 00:06:41,919
an interesting part of the difference so

181
00:06:41,919 --> 00:06:44,319
we see less abstraction layers also and

182
00:06:44,319 --> 00:06:46,000
we see that the client and server and

183
00:06:46,000 --> 00:06:48,000
also database many times speak the same

184
00:06:48,000 --> 00:06:51,520
json language we see that json is

185
00:06:51,520 --> 00:06:53,919
what connects everything obviously we

186
00:06:53,919 --> 00:06:55,759
can use something else but this is the

187
00:06:55,759 --> 00:06:57,199
most popular one

188
00:06:57,199 --> 00:06:59,360
so the differences we see are that the

189
00:06:59,360 --> 00:07:03,520
server is used more as a proxy for data

190
00:07:03,520 --> 00:07:05,199
the rendering component is the client

191
00:07:05,199 --> 00:07:06,560
not the server

192
00:07:06,560 --> 00:07:08,639
and the user state is usually maintained

193
00:07:08,639 --> 00:07:10,880
and monitored by the client these are

194
00:07:10,880 --> 00:07:12,400
all interesting things that we will

195
00:07:12,400 --> 00:07:13,199
touch

196
00:07:13,199 --> 00:07:14,400
a bit later

197
00:07:14,400 --> 00:07:16,319
also we need to remember that clients

198
00:07:16,319 --> 00:07:18,639
consume raw data this is the data that

199
00:07:18,639 --> 00:07:20,800
comes directly from the server

200
00:07:20,800 --> 00:07:22,880
more parameters are sent in each http

201
00:07:22,880 --> 00:07:25,120
request we see

202
00:07:25,120 --> 00:07:27,039
different parameters object ids and

203
00:07:27,039 --> 00:07:28,800
values and filters

204
00:07:28,800 --> 00:07:30,960
and everything is just sent raw

205
00:07:30,960 --> 00:07:32,240
on

206
00:07:32,240 --> 00:07:34,560
sometimes json sometimes something else

207
00:07:34,560 --> 00:07:36,080
but

208
00:07:36,080 --> 00:07:38,880
just flying through deal

209
00:07:38,880 --> 00:07:40,800
and the last point is that apis expose

210
00:07:40,800 --> 00:07:42,240
the underlying implementation of the

211
00:07:42,240 --> 00:07:44,400
application and we will discuss that

212
00:07:44,400 --> 00:07:47,199
also so what makes an api so vulnerable

213
00:07:47,199 --> 00:07:48,800
why are we talking specifically about

214
00:07:48,800 --> 00:07:52,000
the vulnerabilities of apis

215
00:07:52,000 --> 00:07:54,000
first of all there's a lot of them every

216
00:07:54,000 --> 00:07:58,720
endpoint of an api is an entrance point

217
00:07:58,720 --> 00:08:00,080
everything makes

218
00:08:00,080 --> 00:08:03,280
endpoints attack surface bigger

219
00:08:03,280 --> 00:08:06,400
and if in the past we had users

220
00:08:06,400 --> 00:08:08,800
that they have just one doorway in

221
00:08:08,800 --> 00:08:10,800
component a here for example and they

222
00:08:10,800 --> 00:08:13,520
had to do some sort of authentication

223
00:08:13,520 --> 00:08:15,199
authorization and then move to component

224
00:08:15,199 --> 00:08:16,160
bc

225
00:08:16,160 --> 00:08:18,560
and to the data or assets

226
00:08:18,560 --> 00:08:20,720
um now we have

227
00:08:20,720 --> 00:08:23,520
maybe malicious users that are not going

228
00:08:23,520 --> 00:08:25,599
through the the right order maybe they

229
00:08:25,599 --> 00:08:27,599
find the component h that talks directly

230
00:08:27,599 --> 00:08:28,400
to b

231
00:08:28,400 --> 00:08:30,479
maybe they can talk directly to b

232
00:08:30,479 --> 00:08:31,919
o to c

233
00:08:31,919 --> 00:08:34,320
um they don't necessarily have to go

234
00:08:34,320 --> 00:08:36,000
through the same

235
00:08:36,000 --> 00:08:36,958
the same

236
00:08:36,958 --> 00:08:40,479
process that happened in the past

237
00:08:40,479 --> 00:08:43,200
another reason that apis are vulnerable

238
00:08:43,200 --> 00:08:45,040
clients consume raw data and we discuss

239
00:08:45,040 --> 00:08:46,160
that

240
00:08:46,160 --> 00:08:48,640
more parameters are sent and

241
00:08:48,640 --> 00:08:50,800
you don't always know where you send

242
00:08:50,800 --> 00:08:52,560
your stuff to

243
00:08:52,560 --> 00:08:54,399
to be more exact

244
00:08:54,399 --> 00:08:55,760
you know where you send it to you don't

245
00:08:55,760 --> 00:08:58,080
know what happened to that afterwards so

246
00:08:58,080 --> 00:08:59,360
for example if we see here that

247
00:08:59,360 --> 00:09:02,000
component one two and four are part of

248
00:09:02,000 --> 00:09:03,680
some sort of

249
00:09:03,680 --> 00:09:05,760
safe let's call it perimeter

250
00:09:05,760 --> 00:09:07,920
um component one sends some information

251
00:09:07,920 --> 00:09:09,600
to component two but what they don't

252
00:09:09,600 --> 00:09:11,120
know is that component two will then

253
00:09:11,120 --> 00:09:13,519
send it to component three

254
00:09:13,519 --> 00:09:15,920
the other way is also relevant

255
00:09:15,920 --> 00:09:18,399
component one is getting component two's

256
00:09:18,399 --> 00:09:20,959
information and believes it's secure and

257
00:09:20,959 --> 00:09:23,519
safe but what they don't know is that

258
00:09:23,519 --> 00:09:25,120
component two got it from component

259
00:09:25,120 --> 00:09:26,560
three actually

260
00:09:26,560 --> 00:09:29,279
so this is a problem

261
00:09:29,279 --> 00:09:31,360
and the last thing that makes apis

262
00:09:31,360 --> 00:09:33,839
vulnerable is the flexibility of ci cd

263
00:09:33,839 --> 00:09:35,600
yeah the flexibility is great it's

264
00:09:35,600 --> 00:09:37,839
amazing

265
00:09:38,640 --> 00:09:40,240
it's effortless

266
00:09:40,240 --> 00:09:41,440
but

267
00:09:41,440 --> 00:09:43,360
it really it takes just a few clicks to

268
00:09:43,360 --> 00:09:46,000
spin up new apis you see hosts

269
00:09:46,000 --> 00:09:47,920
and and completely

270
00:09:47,920 --> 00:09:49,760
new sets of apis with just a click of a

271
00:09:49,760 --> 00:09:50,959
button

272
00:09:50,959 --> 00:09:51,920
and

273
00:09:51,920 --> 00:09:54,160
it's almost too easy really we see that

274
00:09:54,160 --> 00:09:56,640
all the time people are just

275
00:09:56,640 --> 00:09:58,240
waking up in the morning deciding to

276
00:09:58,240 --> 00:10:00,320
have a completely completely new set of

277
00:10:00,320 --> 00:10:02,399
apis in the past you had to to work

278
00:10:02,399 --> 00:10:05,600
through some problems now in 10 minutes

279
00:10:05,600 --> 00:10:07,519
you can have that running and working

280
00:10:07,519 --> 00:10:10,399
for you or against you

281
00:10:10,399 --> 00:10:12,720
the rate of updates and changes in apis

282
00:10:12,720 --> 00:10:14,640
it may be too fast to handle

283
00:10:14,640 --> 00:10:17,120
and we see that apis become how to track

284
00:10:17,120 --> 00:10:20,000
we see more and more shadow or orphan

285
00:10:20,000 --> 00:10:21,680
it's the same thing

286
00:10:21,680 --> 00:10:23,440
apis out there

287
00:10:23,440 --> 00:10:25,760
and we find a lot of exposed apis that

288
00:10:25,760 --> 00:10:27,600
no one really remembers what they are

289
00:10:27,600 --> 00:10:31,600
who they are who actually spun them up

290
00:10:31,600 --> 00:10:32,959
this is a problem

291
00:10:32,959 --> 00:10:35,040
so let's stop for a second

292
00:10:35,040 --> 00:10:36,800
i'm not trying to depress everyone this

293
00:10:36,800 --> 00:10:40,000
is not all bad news in general

294
00:10:40,000 --> 00:10:41,760
we see that traditional vulnerabilities

295
00:10:41,760 --> 00:10:43,440
are becoming less common in api-based

296
00:10:43,440 --> 00:10:45,440
applications

297
00:10:45,440 --> 00:10:47,600
we see less sql injections due to

298
00:10:47,600 --> 00:10:50,000
increasing use of frameworks or orms so

299
00:10:50,000 --> 00:10:51,360
this is becoming

300
00:10:51,360 --> 00:10:52,640
less and less of a problem i'm not

301
00:10:52,640 --> 00:10:54,640
saying it's not a problem but it's less

302
00:10:54,640 --> 00:10:55,680
common

303
00:10:55,680 --> 00:10:59,040
um c surf again we see other other ways

304
00:10:59,040 --> 00:11:01,040
of doing that instead of cookies so due

305
00:11:01,040 --> 00:11:03,040
to authorization headers instead of

306
00:11:03,040 --> 00:11:05,360
cookies this is getting better

307
00:11:05,360 --> 00:11:07,680
path manipulations

308
00:11:07,680 --> 00:11:09,360
cloud-based storage

309
00:11:09,360 --> 00:11:12,000
is trying to solve that

310
00:11:12,000 --> 00:11:14,000
there is path manipulation in cloud as

311
00:11:14,000 --> 00:11:16,160
well we see that and we see abuse of

312
00:11:16,160 --> 00:11:18,079
that but again this is less common and

313
00:11:18,079 --> 00:11:19,279
less severe

314
00:11:19,279 --> 00:11:22,079
and in general many other classic

315
00:11:22,079 --> 00:11:24,640
security issues are being solved by

316
00:11:24,640 --> 00:11:26,640
software as a service

317
00:11:26,640 --> 00:11:28,240
so how do we bridge the gap how do we

318
00:11:28,240 --> 00:11:30,160
bridge the gap between the security

319
00:11:30,160 --> 00:11:32,640
knowledge that we had as let's call it

320
00:11:32,640 --> 00:11:36,160
traditional application security

321
00:11:36,160 --> 00:11:37,680
staff or engineers

322
00:11:37,680 --> 00:11:40,000
and the new modern world

323
00:11:40,000 --> 00:11:43,680
ruled by apis that we have around us

324
00:11:43,680 --> 00:11:44,399
so

325
00:11:44,399 --> 00:11:46,640
usually what i do when i have

326
00:11:46,640 --> 00:11:49,839
some missing information i go to osp if

327
00:11:49,839 --> 00:11:51,839
any of you don't know owasp

328
00:11:51,839 --> 00:11:53,360
this is a good time to write it down and

329
00:11:53,360 --> 00:11:55,680
look it up later consider it your

330
00:11:55,680 --> 00:11:57,440
mandatory homework

331
00:11:57,440 --> 00:12:00,240
osp is a great organization

332
00:12:00,240 --> 00:12:02,079
that is

333
00:12:02,079 --> 00:12:04,160
working very very hard on making

334
00:12:04,160 --> 00:12:07,040
information accessible to everyone

335
00:12:07,040 --> 00:12:08,560
the closest thing

336
00:12:08,560 --> 00:12:11,360
i could i could see is the the os top 10

337
00:12:11,360 --> 00:12:13,920
or stop 10 is something that um many

338
00:12:13,920 --> 00:12:15,920
people know the only thing people know

339
00:12:15,920 --> 00:12:17,360
about us

340
00:12:17,360 --> 00:12:19,440
as many other projects as well

341
00:12:19,440 --> 00:12:20,639
um

342
00:12:20,639 --> 00:12:22,320
so we took a look at that this is the

343
00:12:22,320 --> 00:12:25,279
one from 2017 when we had a discussion

344
00:12:25,279 --> 00:12:26,399
um

345
00:12:26,399 --> 00:12:28,880
so there is now a new one but basically

346
00:12:28,880 --> 00:12:30,720
we took a look and said no this is not

347
00:12:30,720 --> 00:12:33,120
this does not fit the model or the api

348
00:12:33,120 --> 00:12:34,079
based

349
00:12:34,079 --> 00:12:35,440
applications

350
00:12:35,440 --> 00:12:39,519
so we decided to actually create

351
00:12:39,519 --> 00:12:41,440
a new project

352
00:12:41,440 --> 00:12:43,920
and by way i mean myself and

353
00:12:43,920 --> 00:12:45,200
in onge

354
00:12:45,200 --> 00:12:47,920
he now works at traceable

355
00:12:47,920 --> 00:12:49,600
and we decided to bridge the gap with

356
00:12:49,600 --> 00:12:50,480
this

357
00:12:50,480 --> 00:12:53,279
new security project and this is where

358
00:12:53,279 --> 00:12:56,399
we created the osp api security top 10

359
00:12:56,399 --> 00:12:57,680
and

360
00:12:57,680 --> 00:12:58,460
i'm going to

361
00:12:58,460 --> 00:12:59,680
[Music]

362
00:12:59,680 --> 00:13:02,160
explain to you each of every category

363
00:13:02,160 --> 00:13:03,680
with some examples

364
00:13:03,680 --> 00:13:07,680
so we can understand a little bit

365
00:13:07,680 --> 00:13:10,000
how does the the ecosystem of api

366
00:13:10,000 --> 00:13:12,000
security looks like

367
00:13:12,000 --> 00:13:15,760
so um let's start with the one we just

368
00:13:15,760 --> 00:13:18,639
shamelessly stole from the os top 10

369
00:13:18,639 --> 00:13:21,040
injection and it's insufficient logging

370
00:13:21,040 --> 00:13:23,200
and monitoring these are api eight and

371
00:13:23,200 --> 00:13:24,560
ten

372
00:13:24,560 --> 00:13:25,760
um

373
00:13:25,760 --> 00:13:28,079
many asked us why we dropped it from a1

374
00:13:28,079 --> 00:13:32,800
to a8 in our uh in our session in our um

375
00:13:32,800 --> 00:13:35,200
in our model of api security

376
00:13:35,200 --> 00:13:38,800
um first of all again this was 2017

377
00:13:38,800 --> 00:13:42,079
um osp since then dropped it for two to

378
00:13:42,079 --> 00:13:44,800
eight three four from the top ten itself

379
00:13:44,800 --> 00:13:46,320
but

380
00:13:46,320 --> 00:13:47,519
this is something that i already

381
00:13:47,519 --> 00:13:48,480
mentioned

382
00:13:48,480 --> 00:13:50,560
uh injection is number one because of

383
00:13:50,560 --> 00:13:52,240
sql injections they are less common

384
00:13:52,240 --> 00:13:56,160
because of olms and increasing use of

385
00:13:56,160 --> 00:13:57,600
nosql

386
00:13:57,600 --> 00:13:58,880
and

387
00:13:58,880 --> 00:14:00,560
again i want to say that no sql

388
00:14:00,560 --> 00:14:02,240
injections are a thing but usually not

389
00:14:02,240 --> 00:14:05,120
as common or severe so we decided we

390
00:14:05,120 --> 00:14:07,920
definitely want to keep it in the top 10

391
00:14:07,920 --> 00:14:09,360
but

392
00:14:09,360 --> 00:14:11,199
drop it down to number eight

393
00:14:11,199 --> 00:14:12,560
regarding insufficient logging and

394
00:14:12,560 --> 00:14:14,079
monitoring there is nothing special i

395
00:14:14,079 --> 00:14:16,639
can say regarding

396
00:14:16,639 --> 00:14:20,160
from from the api perspective

397
00:14:20,320 --> 00:14:22,720
really attack attackers rely on lack of

398
00:14:22,720 --> 00:14:24,800
monitoring and timely response

399
00:14:24,800 --> 00:14:26,800
to achieve the goals so

400
00:14:26,800 --> 00:14:28,639
this is something that

401
00:14:28,639 --> 00:14:30,399
every application must have

402
00:14:30,399 --> 00:14:31,920
some sort of logging and monitoring

403
00:14:31,920 --> 00:14:36,240
again not related to apis whatsoever

404
00:14:37,199 --> 00:14:39,600
this brings us to the most interesting

405
00:14:39,600 --> 00:14:41,600
and problematic

406
00:14:41,600 --> 00:14:43,199
category

407
00:14:43,199 --> 00:14:46,079
which is access control access control

408
00:14:46,079 --> 00:14:47,920
is by far

409
00:14:47,920 --> 00:14:50,959
the biggest issue in api security and

410
00:14:50,959 --> 00:14:52,959
the issue is so big that it actually got

411
00:14:52,959 --> 00:14:54,639
its own slide

412
00:14:54,639 --> 00:14:56,560
please remember that access control is

413
00:14:56,560 --> 00:14:59,680
api securities biggest challenge

414
00:14:59,680 --> 00:15:00,560
and

415
00:15:00,560 --> 00:15:02,480
let me show you why

416
00:15:02,480 --> 00:15:04,240
three of the top five

417
00:15:04,240 --> 00:15:06,079
out of the top 10

418
00:15:06,079 --> 00:15:08,240
are actually about access control we can

419
00:15:08,240 --> 00:15:08,959
see

420
00:15:08,959 --> 00:15:12,720
two items here api one and api 5 about

421
00:15:12,720 --> 00:15:13,760
broken

422
00:15:13,760 --> 00:15:15,600
authorization and one about broken

423
00:15:15,600 --> 00:15:17,199
authentication

424
00:15:17,199 --> 00:15:19,920
let's start going one by one

425
00:15:19,920 --> 00:15:22,320
so we will start with a broken

426
00:15:22,320 --> 00:15:24,720
authentication here

427
00:15:24,720 --> 00:15:27,279
boken authentication can happen

428
00:15:27,279 --> 00:15:30,000
because of two different uh

429
00:15:30,000 --> 00:15:31,759
similarly different

430
00:15:31,759 --> 00:15:33,360
reasons one of them is lack of

431
00:15:33,360 --> 00:15:35,560
protection the other one is

432
00:15:35,560 --> 00:15:38,320
misimplementation of that protection

433
00:15:38,320 --> 00:15:39,680
so

434
00:15:39,680 --> 00:15:41,839
for example here is a set of different

435
00:15:41,839 --> 00:15:43,360
api endpoints

436
00:15:43,360 --> 00:15:45,519
uh we can see login and login from from

437
00:15:45,519 --> 00:15:47,440
mobile or forward password also we can

438
00:15:47,440 --> 00:15:49,040
see an

439
00:15:49,040 --> 00:15:50,800
api endpoint to update your location or

440
00:15:50,800 --> 00:15:52,079
edit the photo

441
00:15:52,079 --> 00:15:53,279
and we have

442
00:15:53,279 --> 00:15:55,759
some general protection for that entire

443
00:15:55,759 --> 00:15:57,440
set of apis

444
00:15:57,440 --> 00:15:58,880
but what we need to remember that

445
00:15:58,880 --> 00:16:01,519
everything that is around logging

446
00:16:01,519 --> 00:16:03,199
must have its own

447
00:16:03,199 --> 00:16:06,240
extra protection and by extra protection

448
00:16:06,240 --> 00:16:07,360
i mean

449
00:16:07,360 --> 00:16:08,399
capture

450
00:16:08,399 --> 00:16:09,759
or

451
00:16:09,759 --> 00:16:12,720
2fa or account lockout mechanism

452
00:16:12,720 --> 00:16:15,360
basically anything that will avoid

453
00:16:15,360 --> 00:16:17,199
brute force or credential stuffing or

454
00:16:17,199 --> 00:16:19,440
password spraying

455
00:16:19,440 --> 00:16:22,240
must be in them because if not you will

456
00:16:22,240 --> 00:16:25,279
have broken authentication

457
00:16:25,279 --> 00:16:27,839
the misimplementation part is

458
00:16:27,839 --> 00:16:30,880
sometimes harder to catch because you do

459
00:16:30,880 --> 00:16:32,000
have

460
00:16:32,000 --> 00:16:34,000
a security mechanism

461
00:16:34,000 --> 00:16:35,519
but sometimes you misimplement it for

462
00:16:35,519 --> 00:16:36,720
example

463
00:16:36,720 --> 00:16:39,759
we see a lot of engineers using

464
00:16:39,759 --> 00:16:42,480
jwt for the security but then

465
00:16:42,480 --> 00:16:45,120
readability support and algorithm

466
00:16:45,120 --> 00:16:47,600
um that it called none basically you're

467
00:16:47,600 --> 00:16:52,160
using jwt without any encryption

468
00:16:52,480 --> 00:16:54,079
sometimes there is no validation of

469
00:16:54,079 --> 00:16:56,880
authentication provider so we see

470
00:16:56,880 --> 00:16:58,959
applications that are checking that they

471
00:16:58,959 --> 00:16:59,839
got

472
00:16:59,839 --> 00:17:01,440
an authenticated

473
00:17:01,440 --> 00:17:03,759
user but they did not check where this

474
00:17:03,759 --> 00:17:06,000
authentication came from

475
00:17:06,000 --> 00:17:08,079
and sometimes we see passwords stored

476
00:17:08,079 --> 00:17:10,000
without salts which is

477
00:17:10,000 --> 00:17:12,079
yes you do store a password and you do

478
00:17:12,079 --> 00:17:14,640
have a password mechanism but it's weak

479
00:17:14,640 --> 00:17:15,599
so

480
00:17:15,599 --> 00:17:18,720
many many many different uh different

481
00:17:18,720 --> 00:17:21,359
ways to shoot your own foot

482
00:17:21,359 --> 00:17:22,319
but

483
00:17:22,319 --> 00:17:23,359
this is

484
00:17:23,359 --> 00:17:26,799
something that is very very common

485
00:17:26,799 --> 00:17:28,000
the reason it's common is that

486
00:17:28,000 --> 00:17:30,080
authentication endpoints are exposed to

487
00:17:30,080 --> 00:17:32,400
anyone by design we want them to be

488
00:17:32,400 --> 00:17:35,120
exposed to user this is the purpose of

489
00:17:35,120 --> 00:17:36,080
them

490
00:17:36,080 --> 00:17:37,760
and we know that software and security

491
00:17:37,760 --> 00:17:40,240
engineers have misconceptions

492
00:17:40,240 --> 00:17:43,039
um we see all the time that api keys are

493
00:17:43,039 --> 00:17:45,840
used for authentication and people are

494
00:17:45,840 --> 00:17:47,280
confusing authorization and

495
00:17:47,280 --> 00:17:49,600
authentication

496
00:17:49,600 --> 00:17:51,039
this is a problem

497
00:17:51,039 --> 00:17:53,760
not to mention the multiple ways you can

498
00:17:53,760 --> 00:17:56,240
authenticate these days obviously the

499
00:17:56,240 --> 00:17:58,640
authentication on an iot device would

500
00:17:58,640 --> 00:18:00,240
not be the same as an authentication on

501
00:18:00,240 --> 00:18:02,960
mobile it would definitely be different

502
00:18:02,960 --> 00:18:05,039
than some legacy web

503
00:18:05,039 --> 00:18:07,600
and god forbid the the infamous

504
00:18:07,600 --> 00:18:10,000
deep links with credentials that goes

505
00:18:10,000 --> 00:18:13,760
directly into assets of applications

506
00:18:13,760 --> 00:18:15,760
moving on to the uh

507
00:18:15,760 --> 00:18:19,039
to authorization so we have

508
00:18:19,039 --> 00:18:21,600
a broken object level authorization

509
00:18:21,600 --> 00:18:25,760
it also got the nickname uh ebola

510
00:18:26,000 --> 00:18:26,840
when

511
00:18:26,840 --> 00:18:29,039
your when your object level

512
00:18:29,039 --> 00:18:30,640
authorization is okay

513
00:18:30,640 --> 00:18:32,720
what you will see is a user

514
00:18:32,720 --> 00:18:35,760
is asking for a specific asset their

515
00:18:35,760 --> 00:18:37,039
asset

516
00:18:37,039 --> 00:18:39,120
and then they get a response yeah okay

517
00:18:39,120 --> 00:18:40,640
sure that's yours

518
00:18:40,640 --> 00:18:44,080
if they ask for an asset of another user

519
00:18:44,080 --> 00:18:46,000
they will get no that's not yours you're

520
00:18:46,000 --> 00:18:48,400
not authorized to get that

521
00:18:48,400 --> 00:18:50,240
if it's not if it's not working like

522
00:18:50,240 --> 00:18:52,080
that it's very simple you have a

523
00:18:52,080 --> 00:18:53,520
situation of broken object level

524
00:18:53,520 --> 00:18:55,520
authorization

525
00:18:55,520 --> 00:18:57,280
why is that common

526
00:18:57,280 --> 00:19:00,240
you remember that that part

527
00:19:00,240 --> 00:19:02,640
the attack surface is much wider

528
00:19:02,640 --> 00:19:05,200
we can try and get these assets from

529
00:19:05,200 --> 00:19:08,080
anywhere without being authorized

530
00:19:08,080 --> 00:19:09,840
also there is no security solution that

531
00:19:09,840 --> 00:19:12,240
exists that solves the problem there's

532
00:19:12,240 --> 00:19:13,039
no

533
00:19:13,039 --> 00:19:15,600
silver bullet it needs to be baked into

534
00:19:15,600 --> 00:19:16,720
the logic

535
00:19:16,720 --> 00:19:18,720
of creating the creation of the

536
00:19:18,720 --> 00:19:19,840
application

537
00:19:19,840 --> 00:19:22,080
and this is always something that is

538
00:19:22,080 --> 00:19:23,360
unless

539
00:19:23,360 --> 00:19:25,520
addressed from the beginning might be a

540
00:19:25,520 --> 00:19:26,880
problem

541
00:19:26,880 --> 00:19:29,919
um usually at that point some people are

542
00:19:29,919 --> 00:19:31,760
moving in comfortably in their seats and

543
00:19:31,760 --> 00:19:33,760
saying why are you calling ebola and not

544
00:19:33,760 --> 00:19:36,160
idle

545
00:19:36,160 --> 00:19:38,480
why did you have to change the name so i

546
00:19:38,480 --> 00:19:39,919
will explain

547
00:19:39,919 --> 00:19:42,080
we believe that um it's not really

548
00:19:42,080 --> 00:19:44,320
accurate to use idol and the reason is

549
00:19:44,320 --> 00:19:48,000
that the d in idol is means direct idol

550
00:19:48,000 --> 00:19:50,960
is insecure direct object reference

551
00:19:50,960 --> 00:19:53,360
we don't think the problem is the direct

552
00:19:53,360 --> 00:19:56,240
part the directness

553
00:19:56,240 --> 00:19:57,919
so idol implies that the object

554
00:19:57,919 --> 00:19:59,679
reference should be indirect like a

555
00:19:59,679 --> 00:20:01,919
salted hash map or random string for

556
00:20:01,919 --> 00:20:03,360
every id

557
00:20:03,360 --> 00:20:04,880
we don't think this is this should be

558
00:20:04,880 --> 00:20:06,320
the mechanism we believe that the

559
00:20:06,320 --> 00:20:08,640
problem is not the object reference but

560
00:20:08,640 --> 00:20:10,480
it is the lack of authorization

561
00:20:10,480 --> 00:20:12,480
theoretically

562
00:20:12,480 --> 00:20:14,320
there is a situation where every user

563
00:20:14,320 --> 00:20:17,520
will try to access any object

564
00:20:17,520 --> 00:20:19,760
they need to be to go through some sort

565
00:20:19,760 --> 00:20:21,039
of utilization

566
00:20:21,039 --> 00:20:22,559
and not just hope that they will not

567
00:20:22,559 --> 00:20:25,120
guess the name

568
00:20:25,120 --> 00:20:28,399
of a specific asset

569
00:20:29,039 --> 00:20:30,799
also what would happen if you ask your

570
00:20:30,799 --> 00:20:32,320
developer to implement indirect

571
00:20:32,320 --> 00:20:34,480
mechanism in every place that receives

572
00:20:34,480 --> 00:20:35,440
id

573
00:20:35,440 --> 00:20:36,640
i have

574
00:20:36,640 --> 00:20:39,600
news for you it will not happen

575
00:20:39,600 --> 00:20:41,440
hopefully not that violent but it will

576
00:20:41,440 --> 00:20:43,360
not happen

577
00:20:43,360 --> 00:20:45,039
so that was broken object level

578
00:20:45,039 --> 00:20:47,440
authorization let's go to broken

579
00:20:47,440 --> 00:20:49,440
function level authorization

580
00:20:49,440 --> 00:20:51,440
while broken object level authorization

581
00:20:51,440 --> 00:20:54,480
was what kind of object or asset you are

582
00:20:54,480 --> 00:20:55,440
allowed

583
00:20:55,440 --> 00:20:56,640
to touch

584
00:20:56,640 --> 00:20:58,400
or access

585
00:20:58,400 --> 00:21:00,799
broken function level authorization

586
00:21:00,799 --> 00:21:02,960
is talking about what you are allowed to

587
00:21:02,960 --> 00:21:04,159
do with that

588
00:21:04,159 --> 00:21:05,440
so

589
00:21:05,440 --> 00:21:07,440
um

590
00:21:07,440 --> 00:21:10,880
in a in a way um when we look at

591
00:21:10,880 --> 00:21:12,960
different apis they have

592
00:21:12,960 --> 00:21:16,080
different levels of access

593
00:21:16,080 --> 00:21:18,080
we can see a public api here for example

594
00:21:18,080 --> 00:21:20,240
both an admin and regular user

595
00:21:20,240 --> 00:21:22,799
can get a profile of a user this is

596
00:21:22,799 --> 00:21:25,280
something that is public and it's okay

597
00:21:25,280 --> 00:21:27,200
and they are both supposed to get an

598
00:21:27,200 --> 00:21:28,840
okay with that

599
00:21:28,840 --> 00:21:32,640
but when an admin goes to the admin api

600
00:21:32,640 --> 00:21:34,880
and asked to delete a user now delete is

601
00:21:34,880 --> 00:21:36,640
a different function it's not like

602
00:21:36,640 --> 00:21:37,919
getting it

603
00:21:37,919 --> 00:21:40,240
they should get an ok but when a regular

604
00:21:40,240 --> 00:21:43,120
user uses the delete function

605
00:21:43,120 --> 00:21:45,679
they're supposed to be told that they're

606
00:21:45,679 --> 00:21:46,720
not

607
00:21:46,720 --> 00:21:48,559
authorized to do that

608
00:21:48,559 --> 00:21:50,480
if this mechanism does not work what you

609
00:21:50,480 --> 00:21:51,919
have is broken function level

610
00:21:51,919 --> 00:21:53,280
authorization

611
00:21:53,280 --> 00:21:56,240
or buffalo in short if you want

612
00:21:56,240 --> 00:21:58,799
why is it so common in apis so function

613
00:21:58,799 --> 00:22:00,559
level authorization can be implemented

614
00:22:00,559 --> 00:22:02,720
in different ways it can be implemented

615
00:22:02,720 --> 00:22:04,880
in code configuration api gateways

616
00:22:04,880 --> 00:22:06,240
infrastructure

617
00:22:06,240 --> 00:22:08,320
really every place

618
00:22:08,320 --> 00:22:09,760
in the chain can have that

619
00:22:09,760 --> 00:22:11,600
implementation

620
00:22:11,600 --> 00:22:13,039
we all know what happens when many

621
00:22:13,039 --> 00:22:15,440
people are in charge of one specific

622
00:22:15,440 --> 00:22:17,280
thing

623
00:22:17,280 --> 00:22:19,440
who is doing that in the end

624
00:22:19,440 --> 00:22:21,280
no one

625
00:22:21,280 --> 00:22:23,840
and that happens a lot where everyone

626
00:22:23,840 --> 00:22:25,679
thinks that someone else will make sure

627
00:22:25,679 --> 00:22:26,880
that

628
00:22:26,880 --> 00:22:28,320
this is done but

629
00:22:28,320 --> 00:22:29,840
eventually it does not

630
00:22:29,840 --> 00:22:33,360
also it's easier to detect and exploit

631
00:22:33,360 --> 00:22:34,880
when we're talking about apis the

632
00:22:34,880 --> 00:22:36,480
endpoints are predictable and i want to

633
00:22:36,480 --> 00:22:38,799
show you how predictable they are

634
00:22:38,799 --> 00:22:40,400
so in traditional

635
00:22:40,400 --> 00:22:42,880
in the traditional days let's call it

636
00:22:42,880 --> 00:22:45,919
uh to get a user's profile you would use

637
00:22:45,919 --> 00:22:48,159
some sort of get request

638
00:22:48,159 --> 00:22:49,280
and

639
00:22:49,280 --> 00:22:51,520
through some sort of user's view with

640
00:22:51,520 --> 00:22:53,679
the user id

641
00:22:53,679 --> 00:22:55,919
the deletion of a user would probably be

642
00:22:55,919 --> 00:22:56,960
through

643
00:22:56,960 --> 00:22:58,240
um

644
00:22:58,240 --> 00:23:00,799
some sort of cumbersome admin panel or

645
00:23:00,799 --> 00:23:02,320
user management

646
00:23:02,320 --> 00:23:03,520
page

647
00:23:03,520 --> 00:23:05,360
every everyone had their own way of

648
00:23:05,360 --> 00:23:07,200
doing that and this is how it looked

649
00:23:07,200 --> 00:23:10,880
like these days with apis

650
00:23:10,880 --> 00:23:12,480
this is how it looks like

651
00:23:12,480 --> 00:23:15,039
you want to get the profile of a user or

652
00:23:15,039 --> 00:23:17,039
you want to delete it this is really the

653
00:23:17,039 --> 00:23:19,679
same you just change the function

654
00:23:19,679 --> 00:23:20,640
so

655
00:23:20,640 --> 00:23:23,600
in the in the past harder to predict

656
00:23:23,600 --> 00:23:26,159
and now very very easy to predict you

657
00:23:26,159 --> 00:23:28,080
just it's so easy that it's it's

658
00:23:28,080 --> 00:23:30,080
completely automatic these days when

659
00:23:30,080 --> 00:23:34,240
you're having uh penetration tools um

660
00:23:34,400 --> 00:23:36,880
they're just switching the function and

661
00:23:36,880 --> 00:23:38,320
you get everything

662
00:23:38,320 --> 00:23:40,159
let's see how it looks like in real life

663
00:23:40,159 --> 00:23:41,760
access control in real life so this is

664
00:23:41,760 --> 00:23:42,720
something

665
00:23:42,720 --> 00:23:45,440
from several months ago um

666
00:23:45,440 --> 00:23:48,400
my my team in in checkmarks we found api

667
00:23:48,400 --> 00:23:51,039
vulnerabilities disclosed by researchers

668
00:23:51,039 --> 00:23:52,240
this is us

669
00:23:52,240 --> 00:23:53,520
you can see the

670
00:23:53,520 --> 00:23:54,960
you can find it

671
00:23:54,960 --> 00:23:56,480
online also

672
00:23:56,480 --> 00:23:58,799
we basically managed to take over

673
00:23:58,799 --> 00:24:00,960
coursera api

674
00:24:00,960 --> 00:24:04,640
because of access control issues and to

675
00:24:04,640 --> 00:24:06,559
and to hijack the accounts

676
00:24:06,559 --> 00:24:08,640
um

677
00:24:08,640 --> 00:24:10,480
when i say hijack an account or get

678
00:24:10,480 --> 00:24:12,720
access to assets it can be

679
00:24:12,720 --> 00:24:15,520
files or private things but it can be

680
00:24:15,520 --> 00:24:17,520
everything or anything

681
00:24:17,520 --> 00:24:18,799
for example

682
00:24:18,799 --> 00:24:20,960
this one another thing that our group

683
00:24:20,960 --> 00:24:23,279
did more than a year ago

684
00:24:23,279 --> 00:24:24,480
um

685
00:24:24,480 --> 00:24:26,720
we found an api issue with a smart

686
00:24:26,720 --> 00:24:29,279
vacuum cleaner that also had a camera on

687
00:24:29,279 --> 00:24:32,480
the smart vacuum cleaner

688
00:24:32,960 --> 00:24:34,559
basically the assets that we managed to

689
00:24:34,559 --> 00:24:36,320
get there are

690
00:24:36,320 --> 00:24:37,200
that

691
00:24:37,200 --> 00:24:40,000
we managed to get video streams

692
00:24:40,000 --> 00:24:41,919
from the camera of the vacuum cleaner

693
00:24:41,919 --> 00:24:44,080
and location

694
00:24:44,080 --> 00:24:46,080
basically everything the name and

695
00:24:46,080 --> 00:24:48,559
address of the users

696
00:24:48,559 --> 00:24:50,480
you need to remember access control is

697
00:24:50,480 --> 00:24:51,840
everything if you don't have access

698
00:24:51,840 --> 00:24:54,159
control this is pretty much game over

699
00:24:54,159 --> 00:24:56,880
for your application

700
00:24:56,880 --> 00:24:58,080
moving on

701
00:24:58,080 --> 00:25:00,559
you still have still have the strength

702
00:25:00,559 --> 00:25:04,240
needed for for a few more

703
00:25:05,919 --> 00:25:09,679
okay moving on to excess data

704
00:25:09,679 --> 00:25:12,320
access data

705
00:25:12,320 --> 00:25:14,480
has two different categories in it

706
00:25:14,480 --> 00:25:16,240
excessive data exposure and mass

707
00:25:16,240 --> 00:25:17,440
assignment

708
00:25:17,440 --> 00:25:19,120
these are actually

709
00:25:19,120 --> 00:25:22,080
um one of one in the opposite

710
00:25:22,080 --> 00:25:22,799
of

711
00:25:22,799 --> 00:25:24,240
i mean they're the opposite of each

712
00:25:24,240 --> 00:25:26,000
other and let's see how

713
00:25:26,000 --> 00:25:28,880
so this is bob bob is using uh the super

714
00:25:28,880 --> 00:25:29,919
safe app

715
00:25:29,919 --> 00:25:31,919
and the reason he's using it is because

716
00:25:31,919 --> 00:25:33,679
he's sure that

717
00:25:33,679 --> 00:25:35,679
his information is safe

718
00:25:35,679 --> 00:25:36,640
and

719
00:25:36,640 --> 00:25:38,799
the users can only see his name role in

720
00:25:38,799 --> 00:25:40,080
hobby

721
00:25:40,080 --> 00:25:42,159
and this is the only thing that bob does

722
00:25:42,159 --> 00:25:43,679
want to share and

723
00:25:43,679 --> 00:25:45,279
um

724
00:25:45,279 --> 00:25:47,679
he believes that this is the situation

725
00:25:47,679 --> 00:25:50,000
but when someone

726
00:25:50,000 --> 00:25:51,440
is actually looking at what happens

727
00:25:51,440 --> 00:25:53,360
behind the scenes there's the mobile

728
00:25:53,360 --> 00:25:54,240
phone

729
00:25:54,240 --> 00:25:57,360
run by api you see the mobile phone

730
00:25:57,360 --> 00:26:00,080
sends a get for to get bob's profile and

731
00:26:00,080 --> 00:26:02,640
they get this they get this json

732
00:26:02,640 --> 00:26:06,159
and in the json you can see that

733
00:26:06,159 --> 00:26:07,919
not only the picture and the name and

734
00:26:07,919 --> 00:26:10,000
the role and the hobbies are here but

735
00:26:10,000 --> 00:26:11,840
also the address

736
00:26:11,840 --> 00:26:14,240
so the fact that you don't see it on the

737
00:26:14,240 --> 00:26:16,240
application does not mean it was not

738
00:26:16,240 --> 00:26:17,600
sent

739
00:26:17,600 --> 00:26:19,440
to the application

740
00:26:19,440 --> 00:26:22,080
and what we see is many applications

741
00:26:22,080 --> 00:26:25,120
that are filtering sensitive data on the

742
00:26:25,120 --> 00:26:26,159
client

743
00:26:26,159 --> 00:26:29,039
and this is always a bad idea always

744
00:26:29,039 --> 00:26:30,480
there is

745
00:26:30,480 --> 00:26:34,240
zero reasons to use that

746
00:26:36,559 --> 00:26:39,200
why is it so common again so rest

747
00:26:39,200 --> 00:26:40,720
standards encourage developers to

748
00:26:40,720 --> 00:26:43,600
implement apis in a generic way

749
00:26:43,600 --> 00:26:45,760
we see all the time

750
00:26:45,760 --> 00:26:48,159
generic functions like to json yeah just

751
00:26:48,159 --> 00:26:50,960
take the entire user object

752
00:26:50,960 --> 00:26:53,520
make to json and send it somewhere

753
00:26:53,520 --> 00:26:56,559
this is very very easy to json to string

754
00:26:56,559 --> 00:26:58,640
all these functions

755
00:26:58,640 --> 00:27:00,880
um

756
00:27:00,880 --> 00:27:04,080
sometimes we do that without thinking

757
00:27:04,080 --> 00:27:05,760
who is the consumer of that specific

758
00:27:05,760 --> 00:27:08,000
information or who is the consumer in

759
00:27:08,000 --> 00:27:09,279
the next step

760
00:27:09,279 --> 00:27:10,799
if we send it to someone that's supposed

761
00:27:10,799 --> 00:27:13,039
to get it that's fine but maybe the next

762
00:27:13,039 --> 00:27:15,279
step is not fine anymore this is

763
00:27:15,279 --> 00:27:16,880
something that is very very hard to

764
00:27:16,880 --> 00:27:18,159
follow

765
00:27:18,159 --> 00:27:21,520
and this is bob's case in real life how

766
00:27:21,520 --> 00:27:25,760
many here are uh using three fun

767
00:27:25,919 --> 00:27:28,320
okay i don't expect anyone to admit

768
00:27:28,320 --> 00:27:29,919
if you don't know what refund is is

769
00:27:29,919 --> 00:27:32,240
basically a matchmaking

770
00:27:32,240 --> 00:27:34,640
tinder style application for people who

771
00:27:34,640 --> 00:27:35,679
believe that

772
00:27:35,679 --> 00:27:38,159
two is not enough

773
00:27:38,159 --> 00:27:40,000
this is probably the best way i can say

774
00:27:40,000 --> 00:27:40,799
that

775
00:27:40,799 --> 00:27:42,240
and

776
00:27:42,240 --> 00:27:45,039
a researcher called alex lomas

777
00:27:45,039 --> 00:27:47,279
from pentest partners

778
00:27:47,279 --> 00:27:49,279
it's an old one but i i like to show

779
00:27:49,279 --> 00:27:51,279
that every time so

780
00:27:51,279 --> 00:27:53,520
um he found exactly that he saw that

781
00:27:53,520 --> 00:27:56,000
information that is coming from uh from

782
00:27:56,000 --> 00:27:57,840
the servers to the application

783
00:27:57,840 --> 00:27:59,520
does not only have

784
00:27:59,520 --> 00:28:00,880
um

785
00:28:00,880 --> 00:28:03,279
you know the loud photos and the name

786
00:28:03,279 --> 00:28:04,880
and the and and all the public

787
00:28:04,880 --> 00:28:06,720
information but also

788
00:28:06,720 --> 00:28:08,799
um sensitive information like phone

789
00:28:08,799 --> 00:28:09,840
numbers

790
00:28:09,840 --> 00:28:12,159
uh exact location

791
00:28:12,159 --> 00:28:13,679
um

792
00:28:13,679 --> 00:28:16,799
pictures that are not public etc so this

793
00:28:16,799 --> 00:28:18,320
is exactly how it looks like in real

794
00:28:18,320 --> 00:28:19,279
life

795
00:28:19,279 --> 00:28:21,200
obviously alex lomas did the responsible

796
00:28:21,200 --> 00:28:22,880
thing and mapped it around the white

797
00:28:22,880 --> 00:28:24,020
house

798
00:28:24,020 --> 00:28:25,520
[Music]

799
00:28:25,520 --> 00:28:29,120
that made a lot of noise back then

800
00:28:29,360 --> 00:28:30,880
but yeah this is exactly how it looks

801
00:28:30,880 --> 00:28:32,559
like when you filter things on the

802
00:28:32,559 --> 00:28:34,640
client side and believe that things are

803
00:28:34,640 --> 00:28:35,760
safe

804
00:28:35,760 --> 00:28:37,520
api six is the other way around is the

805
00:28:37,520 --> 00:28:39,679
mass assignment when you get information

806
00:28:39,679 --> 00:28:41,840
that is not completely

807
00:28:41,840 --> 00:28:42,880
vetted

808
00:28:42,880 --> 00:28:44,480
so modern frameworks encourage

809
00:28:44,480 --> 00:28:45,919
developers to use mass assignment

810
00:28:45,919 --> 00:28:47,120
functions

811
00:28:47,120 --> 00:28:48,640
very very similar to the way they

812
00:28:48,640 --> 00:28:50,080
encourage us to

813
00:28:50,080 --> 00:28:52,399
to spill and leak our information they

814
00:28:52,399 --> 00:28:54,159
also encourage us to get them for

815
00:28:54,159 --> 00:28:56,480
example this is how it's how simple it

816
00:28:56,480 --> 00:28:58,399
is to to create a new user

817
00:28:58,399 --> 00:29:01,039
in ojs or rail you just take

818
00:29:01,039 --> 00:29:03,120
the entire body from the request

819
00:29:03,120 --> 00:29:05,760
throw it into a new object and that it

820
00:29:05,760 --> 00:29:08,240
you have a user congratulations

821
00:29:08,240 --> 00:29:11,120
the problem is that this thing might

822
00:29:11,120 --> 00:29:13,840
contain sensitive parameters that a user

823
00:29:13,840 --> 00:29:16,080
should not have access to

824
00:29:16,080 --> 00:29:19,360
an example again by bob

825
00:29:19,360 --> 00:29:20,799
may look like that

826
00:29:20,799 --> 00:29:24,880
so if bob sends a post request for a new

827
00:29:24,880 --> 00:29:27,360
user well his username is bob and the

828
00:29:27,360 --> 00:29:29,919
password is one two three four five six

829
00:29:29,919 --> 00:29:32,720
um this is legit this is okay

830
00:29:32,720 --> 00:29:35,279
but what if bob is not using the client

831
00:29:35,279 --> 00:29:37,440
but using some other tool to send the

832
00:29:37,440 --> 00:29:38,559
post

833
00:29:38,559 --> 00:29:40,320
and it has not only his username and

834
00:29:40,320 --> 00:29:42,320
password maybe you can try something

835
00:29:42,320 --> 00:29:44,480
else how about adding a role admin for

836
00:29:44,480 --> 00:29:45,919
example

837
00:29:45,919 --> 00:29:48,159
that might work if there is well it will

838
00:29:48,159 --> 00:29:50,000
work if there is no mechanism checking

839
00:29:50,000 --> 00:29:51,440
that checking what you're getting if

840
00:29:51,440 --> 00:29:54,240
you're using the code on the left bob is

841
00:29:54,240 --> 00:29:56,399
now an admin on your system

842
00:29:56,399 --> 00:29:58,559
and we see that much more than we want

843
00:29:58,559 --> 00:30:00,399
to

844
00:30:00,399 --> 00:30:03,440
so this is the access data part

845
00:30:03,440 --> 00:30:04,960
the last part

846
00:30:04,960 --> 00:30:06,960
the last category is the category that

847
00:30:06,960 --> 00:30:09,120
we did not find a name for so we called

848
00:30:09,120 --> 00:30:12,000
it devops or devsecops or

849
00:30:12,000 --> 00:30:14,640
general things

850
00:30:14,640 --> 00:30:16,240
lack of resources and rate limiting

851
00:30:16,240 --> 00:30:18,399
security misconfigurations and improper

852
00:30:18,399 --> 00:30:20,960
assets management

853
00:30:20,960 --> 00:30:23,120
lack of resources and rate limiting i

854
00:30:23,120 --> 00:30:25,360
think it's quite self-explanatory when a

855
00:30:25,360 --> 00:30:27,679
resource and it can be anything

856
00:30:27,679 --> 00:30:29,919
really anything that we're using

857
00:30:29,919 --> 00:30:32,480
files and memory and cpu

858
00:30:32,480 --> 00:30:35,039
access to database whatever

859
00:30:35,039 --> 00:30:37,600
when it is exposed to the web

860
00:30:37,600 --> 00:30:40,559
there should be a defined use limit

861
00:30:40,559 --> 00:30:41,600
um

862
00:30:41,600 --> 00:30:43,360
if it's a request then a numbered

863
00:30:43,360 --> 00:30:45,679
frequency and of course in files it's

864
00:30:45,679 --> 00:30:47,520
the size or string it's the length of

865
00:30:47,520 --> 00:30:48,399
them

866
00:30:48,399 --> 00:30:50,799
but we must remember that and not only

867
00:30:50,799 --> 00:30:52,240
because of the reason

868
00:30:52,240 --> 00:30:54,080
of denial of service the nerve service

869
00:30:54,080 --> 00:30:56,320
is something that we all talk about with

870
00:30:56,320 --> 00:30:57,600
rate limiting

871
00:30:57,600 --> 00:30:59,039
but we should not

872
00:30:59,039 --> 00:31:01,279
forget again

873
00:31:01,279 --> 00:31:03,279
the access control the brute force

874
00:31:03,279 --> 00:31:05,440
attacks brute force attacks if there is

875
00:31:05,440 --> 00:31:07,600
no lack of resources

876
00:31:07,600 --> 00:31:09,039
um

877
00:31:09,039 --> 00:31:11,039
there's no rate limiting

878
00:31:11,039 --> 00:31:12,960
um boot force can happen very easily

879
00:31:12,960 --> 00:31:14,559
with credential stuffing and password

880
00:31:14,559 --> 00:31:18,320
spam spraying and whatever

881
00:31:18,320 --> 00:31:21,760
security misconfigurations this is uh

882
00:31:21,760 --> 00:31:23,679
this is where things got wild and we

883
00:31:23,679 --> 00:31:25,919
actually cheated we just took a big

884
00:31:25,919 --> 00:31:27,519
bucket of bad things

885
00:31:27,519 --> 00:31:29,120
and put it under one security

886
00:31:29,120 --> 00:31:31,760
misconfiguration the funny part is that

887
00:31:31,760 --> 00:31:34,320
um the os top 10 the original one not

888
00:31:34,320 --> 00:31:36,080
the api one actually added

889
00:31:36,080 --> 00:31:39,120
misconfiguration also as a category so

890
00:31:39,120 --> 00:31:41,200
uh we really like our bucket of bad

891
00:31:41,200 --> 00:31:42,240
things now

892
00:31:42,240 --> 00:31:44,159
um it includes everything it includes

893
00:31:44,159 --> 00:31:46,000
weak encryption it includes unnecessary

894
00:31:46,000 --> 00:31:48,640
exposed http methods it

895
00:31:48,640 --> 00:31:50,480
includes everything that should be false

896
00:31:50,480 --> 00:31:52,080
but is true or should be true but is

897
00:31:52,080 --> 00:31:53,360
false

898
00:31:53,360 --> 00:31:55,519
csrf protections

899
00:31:55,519 --> 00:31:58,080
detailed errors calls

900
00:31:58,080 --> 00:31:59,679
you name it there are so many things

901
00:31:59,679 --> 00:32:00,720
like that

902
00:32:00,720 --> 00:32:01,840
um

903
00:32:01,840 --> 00:32:03,760
and checklists out there that we need to

904
00:32:03,760 --> 00:32:05,279
keep an eye on

905
00:32:05,279 --> 00:32:08,000
these are very very relevant in our

906
00:32:08,000 --> 00:32:09,760
modern api

907
00:32:09,760 --> 00:32:11,919
environment

908
00:32:11,919 --> 00:32:15,519
and the last one the last one is my

909
00:32:15,519 --> 00:32:17,360
my favorite and least favorite together

910
00:32:17,360 --> 00:32:19,120
i don't know how it happened but

911
00:32:19,120 --> 00:32:20,960
this is improper assets management

912
00:32:20,960 --> 00:32:23,039
important asset management

913
00:32:23,039 --> 00:32:25,200
is a housekeeping issue sometimes it's

914
00:32:25,200 --> 00:32:27,600
not a vulnerability by itself

915
00:32:27,600 --> 00:32:30,000
but some but most of the times if you

916
00:32:30,000 --> 00:32:32,000
have an improper asset management this

917
00:32:32,000 --> 00:32:33,760
is the source of all evil

918
00:32:33,760 --> 00:32:37,679
in your api security it can be one of

919
00:32:37,679 --> 00:32:38,880
two different

920
00:32:38,880 --> 00:32:41,519
but similar again housekeeping issues

921
00:32:41,519 --> 00:32:43,519
either lack of documentation

922
00:32:43,519 --> 00:32:45,600
this is an example from from real life

923
00:32:45,600 --> 00:32:47,519
just the name of the

924
00:32:47,519 --> 00:32:50,240
the name of the target is is

925
00:32:50,240 --> 00:32:53,120
is different we found a payment api of a

926
00:32:53,120 --> 00:32:54,880
company

927
00:32:54,880 --> 00:32:57,679
everyone could easily say what does

928
00:32:57,679 --> 00:33:00,000
version 2 download transactions as pdf

929
00:33:00,000 --> 00:33:01,120
is

930
00:33:01,120 --> 00:33:03,120
they have a very good documentation of

931
00:33:03,120 --> 00:33:05,519
that another one was version 2 transfer

932
00:33:05,519 --> 00:33:07,279
money

933
00:33:07,279 --> 00:33:10,000
and then we found version 0 legacy b2b

934
00:33:10,000 --> 00:33:11,840
export all users

935
00:33:11,840 --> 00:33:13,519
no one knew what it is no one knew what

936
00:33:13,519 --> 00:33:14,720
it's about

937
00:33:14,720 --> 00:33:17,679
export from where to whom

938
00:33:17,679 --> 00:33:18,960
no idea

939
00:33:18,960 --> 00:33:21,039
this is a bad thing to have open in your

940
00:33:21,039 --> 00:33:23,279
system

941
00:33:23,279 --> 00:33:25,760
another side is the exposed

942
00:33:25,760 --> 00:33:28,880
risky apis when you not only forget them

943
00:33:28,880 --> 00:33:29,919
but you

944
00:33:29,919 --> 00:33:32,320
forget to cover them one can be

945
00:33:32,320 --> 00:33:34,320
the reason of the other so this is

946
00:33:34,320 --> 00:33:35,600
another

947
00:33:35,600 --> 00:33:36,960
true target

948
00:33:36,960 --> 00:33:39,200
again not the right name

949
00:33:39,200 --> 00:33:40,880
and they were very happy because they

950
00:33:40,880 --> 00:33:41,840
used

951
00:33:41,840 --> 00:33:44,000
api gateway

952
00:33:44,000 --> 00:33:46,080
it worked very very well

953
00:33:46,080 --> 00:33:48,320
for the payments api and for the mobile

954
00:33:48,320 --> 00:33:49,519
api

955
00:33:49,519 --> 00:33:51,200
but it worked well only on those they

956
00:33:51,200 --> 00:33:53,919
remembered to cover because someone

957
00:33:53,919 --> 00:33:56,960
forgot somewhere along the way to cover

958
00:33:56,960 --> 00:33:58,399
beta api

959
00:33:58,399 --> 00:34:01,600
and this entire set of apis were totally

960
00:34:01,600 --> 00:34:02,880
exposed

961
00:34:02,880 --> 00:34:05,600
you can imagine also that if a beta api

962
00:34:05,600 --> 00:34:07,679
is exposed there are some shortcuts

963
00:34:07,679 --> 00:34:10,000
there that should definitely not exist

964
00:34:10,000 --> 00:34:11,918
on apis and definitely not open to the

965
00:34:11,918 --> 00:34:14,319
public

966
00:34:15,040 --> 00:34:18,239
we really see a lot of those

967
00:34:18,239 --> 00:34:21,440
this is common because of the simplicity

968
00:34:21,440 --> 00:34:23,440
of ci cd and

969
00:34:23,440 --> 00:34:25,280
again i

970
00:34:25,280 --> 00:34:27,520
i try and explain to people that there

971
00:34:27,520 --> 00:34:29,918
is such a thing as too fast i mean

972
00:34:29,918 --> 00:34:32,000
sometimes too fast is not

973
00:34:32,000 --> 00:34:34,639
the best way also developers are focused

974
00:34:34,639 --> 00:34:36,639
on delivering and not documenting i

975
00:34:36,639 --> 00:34:39,520
believe that documentation was my

976
00:34:39,520 --> 00:34:42,800
the thing i hate this most hated most in

977
00:34:42,800 --> 00:34:46,480
in my job as a developer

978
00:34:46,560 --> 00:34:48,079
developers like to deliver they like to

979
00:34:48,079 --> 00:34:51,599
build not to develop not to document

980
00:34:51,599 --> 00:34:53,918
and it shows

981
00:34:53,918 --> 00:34:55,199
and

982
00:34:55,199 --> 00:34:56,719
really with cloud and deployment

983
00:34:56,719 --> 00:34:59,040
automation it's so easy to spin up new

984
00:34:59,040 --> 00:35:01,119
apis and

985
00:35:01,119 --> 00:35:02,640
we have api's hosts that have been

986
00:35:02,640 --> 00:35:03,839
forgotten

987
00:35:03,839 --> 00:35:05,200
complete environments that have been

988
00:35:05,200 --> 00:35:08,000
forgotten and this is something that

989
00:35:08,000 --> 00:35:10,160
you can know just by

990
00:35:10,160 --> 00:35:12,480
walking in an open space of a

991
00:35:12,480 --> 00:35:14,960
of a company of developers and hearing

992
00:35:14,960 --> 00:35:17,119
in the in the air someone yelling what

993
00:35:17,119 --> 00:35:20,079
the heck is a qa3 old apcom or something

994
00:35:20,079 --> 00:35:21,119
like that

995
00:35:21,119 --> 00:35:21,920
and

996
00:35:21,920 --> 00:35:24,800
we do hear that sometimes if you do it's

997
00:35:24,800 --> 00:35:26,800
a red flag

998
00:35:26,800 --> 00:35:28,960
so that was the top 10

999
00:35:28,960 --> 00:35:31,040
i hope it was not too much

1000
00:35:31,040 --> 00:35:33,040
i want to summarize some stuff for you

1001
00:35:33,040 --> 00:35:35,440
to to take home with you

1002
00:35:35,440 --> 00:35:36,960
so

1003
00:35:36,960 --> 00:35:39,200
i hope i showed you that modern api

1004
00:35:39,200 --> 00:35:41,280
based apps are different than the

1005
00:35:41,280 --> 00:35:42,720
traditional ones

1006
00:35:42,720 --> 00:35:44,640
i hope i managed to convince you that

1007
00:35:44,640 --> 00:35:46,079
being different they have their own

1008
00:35:46,079 --> 00:35:48,000
security issues

1009
00:35:48,000 --> 00:35:50,320
and they should be treated as those the

1010
00:35:50,320 --> 00:35:52,240
attack surface is much wider this is

1011
00:35:52,240 --> 00:35:54,079
something we need to remember we know

1012
00:35:54,079 --> 00:35:55,760
that instinctively but we need to

1013
00:35:55,760 --> 00:35:59,119
remember it actively everything we add

1014
00:35:59,119 --> 00:36:02,800
makes our attack surface wider

1015
00:36:02,800 --> 00:36:04,400
there is more data moving between

1016
00:36:04,400 --> 00:36:06,880
components we don't always have control

1017
00:36:06,880 --> 00:36:08,560
on this data we don't always know where

1018
00:36:08,560 --> 00:36:11,200
it came from or what the purpose of it

1019
00:36:11,200 --> 00:36:12,480
this is something that we need to

1020
00:36:12,480 --> 00:36:15,839
remember while we are writing our code

1021
00:36:15,839 --> 00:36:19,359
and access control is a real challenge

1022
00:36:19,359 --> 00:36:20,960
don't forget that

1023
00:36:20,960 --> 00:36:24,200
thank you

1024
00:36:29,200 --> 00:36:30,960
questions

1025
00:36:30,960 --> 00:36:32,400
yes please

1026
00:36:32,400 --> 00:36:34,400
yeah so uh

1027
00:36:34,400 --> 00:36:37,280
your examples seem to be taken from rest

1028
00:36:37,280 --> 00:36:39,280
and i'm wondering what the top 10

1029
00:36:39,280 --> 00:36:41,760
ranking is equivalent for

1030
00:36:41,760 --> 00:36:45,200
odata or soap

1031
00:36:45,520 --> 00:36:48,400
okay so yeah the reason that

1032
00:36:48,400 --> 00:36:50,720
the examples are around rust is because

1033
00:36:50,720 --> 00:36:52,880
this is the most popular one and it was

1034
00:36:52,880 --> 00:36:55,359
almost the the only one when we wrote

1035
00:36:55,359 --> 00:36:56,160
that

1036
00:36:56,160 --> 00:36:57,599
top ten

1037
00:36:57,599 --> 00:36:59,359
we're actually starting to work on a new

1038
00:36:59,359 --> 00:37:00,320
version

1039
00:37:00,320 --> 00:37:01,760
uh hopefully

1040
00:37:01,760 --> 00:37:04,079
it will include graphql and others

1041
00:37:04,079 --> 00:37:07,839
um so you can expect that towards um

1042
00:37:07,839 --> 00:37:09,920
probably middle or towards the end of

1043
00:37:09,920 --> 00:37:11,440
the year

1044
00:37:11,440 --> 00:37:13,920
the ideas are the same but you are

1045
00:37:13,920 --> 00:37:15,760
completely right there are some changes

1046
00:37:15,760 --> 00:37:17,440
that are relevant

1047
00:37:17,440 --> 00:37:19,280
for different types of

1048
00:37:19,280 --> 00:37:20,640
api

1049
00:37:20,640 --> 00:37:23,640
technology

1050
00:37:30,480 --> 00:37:33,920
we have a running microphone

1051
00:37:34,480 --> 00:37:36,480
so i've seen a lot of

1052
00:37:36,480 --> 00:37:38,560
other apis out there like swagger's a

1053
00:37:38,560 --> 00:37:40,320
new one that i've started to see out

1054
00:37:40,320 --> 00:37:41,920
there to where people just pull down

1055
00:37:41,920 --> 00:37:44,720
this you know whole you know api and

1056
00:37:44,720 --> 00:37:47,119
line that into an application

1057
00:37:47,119 --> 00:37:48,880
makes me nervous right because all of a

1058
00:37:48,880 --> 00:37:50,560
sudden we're starting to trust other

1059
00:37:50,560 --> 00:37:53,680
libraries other examples other apis are

1060
00:37:53,680 --> 00:37:55,680
there some apis that are good more

1061
00:37:55,680 --> 00:37:58,079
intrinsic or is it literally just how

1062
00:37:58,079 --> 00:38:00,560
it's used as an api like should we just

1063
00:38:00,560 --> 00:38:02,720
not be trusting some of these you know

1064
00:38:02,720 --> 00:38:04,079
kind of pre-built modules that we

1065
00:38:04,079 --> 00:38:06,160
download from github

1066
00:38:06,160 --> 00:38:08,000
if someone that knows me will hear these

1067
00:38:08,000 --> 00:38:10,160
questions one after the other they would

1068
00:38:10,160 --> 00:38:13,280
think i actually implanted them

1069
00:38:13,280 --> 00:38:15,280
because another topic we're discussing

1070
00:38:15,280 --> 00:38:18,320
now is not only the way that we treat

1071
00:38:18,320 --> 00:38:21,680
apis with our information

1072
00:38:21,680 --> 00:38:24,079
but also the way that we trust other

1073
00:38:24,079 --> 00:38:26,480
apis exactly what you say and i think

1074
00:38:26,480 --> 00:38:28,240
that we need to make that extra step

1075
00:38:28,240 --> 00:38:30,560
this transition of

1076
00:38:30,560 --> 00:38:32,320
let's take a similarity from open source

1077
00:38:32,320 --> 00:38:33,920
open source has a lot of dependencies

1078
00:38:33,920 --> 00:38:36,480
and again it's great it's good amazing

1079
00:38:36,480 --> 00:38:38,560
we love it it makes everything fast

1080
00:38:38,560 --> 00:38:41,280
sounds like api right but then sometimes

1081
00:38:41,280 --> 00:38:42,640
we have

1082
00:38:42,640 --> 00:38:43,680
problems

1083
00:38:43,680 --> 00:38:46,079
specific packages are problematic and

1084
00:38:46,079 --> 00:38:49,280
supply chain etc the same with api

1085
00:38:49,280 --> 00:38:51,359
suddenly you might find that a specific

1086
00:38:51,359 --> 00:38:54,160
api you trusted is not as trusted as

1087
00:38:54,160 --> 00:38:56,079
it's supposed to be

1088
00:38:56,079 --> 00:38:58,000
or maybe it's even malicious or maybe

1089
00:38:58,000 --> 00:39:00,240
they just themselves did not care about

1090
00:39:00,240 --> 00:39:03,839
security so this is definitely

1091
00:39:03,839 --> 00:39:07,920
another new front for the api top ten

1092
00:39:07,920 --> 00:39:09,440
this is definitely something we need to

1093
00:39:09,440 --> 00:39:11,119
take care of because

1094
00:39:11,119 --> 00:39:13,040
the trust issue here

1095
00:39:13,040 --> 00:39:16,720
is is getting problematic

1096
00:39:19,760 --> 00:39:22,480
more questions

1097
00:39:26,839 --> 00:39:31,040
okay so if anyone still uh wants to chat

1098
00:39:31,040 --> 00:39:33,680
i'm here for the next couple of hours

1099
00:39:33,680 --> 00:39:36,560
just walking around

1100
00:39:37,440 --> 00:39:39,520
question from uh questions online cool

1101
00:39:39,520 --> 00:39:41,119
is there a tool out there that we can

1102
00:39:41,119 --> 00:39:43,599
find out those exposed apis that are

1103
00:39:43,599 --> 00:39:46,079
forgotten

1104
00:39:46,320 --> 00:39:48,160
i think there are many different tools

1105
00:39:48,160 --> 00:39:51,119
i'm not going to name any specific ones

1106
00:39:51,119 --> 00:39:54,160
there are different tools that are

1107
00:39:54,160 --> 00:39:56,880
trying to find automatically

1108
00:39:56,880 --> 00:39:59,680
your apis

1109
00:40:02,640 --> 00:40:06,160
i think that the best way is to do it

1110
00:40:06,160 --> 00:40:08,400
not totally automatic but do it in a way

1111
00:40:08,400 --> 00:40:11,280
that is

1112
00:40:11,280 --> 00:40:13,200
you know smart in a way that will you're

1113
00:40:13,200 --> 00:40:15,520
looking things in in areas that you may

1114
00:40:15,520 --> 00:40:19,119
have forgotten them and things like that

1115
00:40:19,119 --> 00:40:20,720
also you can you can

1116
00:40:20,720 --> 00:40:22,240
try to look at the

1117
00:40:22,240 --> 00:40:23,520
at other

1118
00:40:23,520 --> 00:40:27,119
other tools like osp zap which is

1119
00:40:27,119 --> 00:40:28,400
open source

1120
00:40:28,400 --> 00:40:32,720
and others but the outputs out there

1121
00:40:35,440 --> 00:40:37,359
okay i'm not sure i really answered the

1122
00:40:37,359 --> 00:40:41,040
last one or just dance around it but

1123
00:40:43,359 --> 00:40:45,119
okay yeah there's someone typing

1124
00:40:45,119 --> 00:40:47,599
something potentially someone typing

1125
00:40:47,599 --> 00:40:49,119
that's what it says

1126
00:40:49,119 --> 00:40:53,160
he's holding everyone hostages

1127
00:40:58,640 --> 00:41:00,880
i guess i do have a follow-on question

1128
00:41:00,880 --> 00:41:03,119
if you were to design

1129
00:41:03,119 --> 00:41:07,040
an api model or

1130
00:41:18,640 --> 00:41:20,480
it's extremely broad how how do you

1131
00:41:20,480 --> 00:41:23,119
design secure api this is

1132
00:41:23,119 --> 00:41:25,200
probably a topic for a book or

1133
00:41:25,200 --> 00:41:26,720
or a phd

1134
00:41:26,720 --> 00:41:29,119
but i think that awareness is is the the

1135
00:41:29,119 --> 00:41:30,400
main thing i

1136
00:41:30,400 --> 00:41:32,400
i need to push here just to understand

1137
00:41:32,400 --> 00:41:35,359
what might go wrong and understand

1138
00:41:35,359 --> 00:41:38,000
the parts that are a bit squeaky and not

1139
00:41:38,000 --> 00:41:40,160
completely secured

1140
00:41:40,160 --> 00:41:41,680
and keep

1141
00:41:41,680 --> 00:41:44,240
again access control keep it in mind

1142
00:41:44,240 --> 00:41:46,560
from the get-go

1143
00:41:46,560 --> 00:41:48,319
and making sure that you document

1144
00:41:48,319 --> 00:41:49,839
everything that you have

1145
00:41:49,839 --> 00:41:51,839
very clear protocols of spinning up a

1146
00:41:51,839 --> 00:41:54,960
new api very very clear protocols of

1147
00:41:54,960 --> 00:41:56,720
deprecating ones

1148
00:41:56,720 --> 00:41:58,800
if you don't use something remove it if

1149
00:41:58,800 --> 00:42:00,880
you have a version that is not in use

1150
00:42:00,880 --> 00:42:03,599
remove it

1151
00:42:03,599 --> 00:42:07,280
that is that just awareness

1152
00:42:08,319 --> 00:42:10,480
okay they never they never finish it up

1153
00:42:10,480 --> 00:42:12,800
okay so thank you everyone i appreciate

1154
00:42:12,800 --> 00:42:16,079
you coming here

1155
00:42:16,079 --> 00:42:19,240
be safe

1156
00:42:42,240 --> 00:42:45,479
thank you

1157
00:42:55,440 --> 00:42:56,640
yeah i

1158
00:42:56,640 --> 00:42:58,960
have to

1159
00:43:11,119 --> 00:43:12,480
this is exactly what the talk is all

1160
00:43:12,480 --> 00:43:13,599
about

1161
00:43:13,599 --> 00:43:16,800
so when they say okay you need

