1
00:00:19,539 --> 00:00:25,880
okay okay good

2
00:00:23,119 --> 00:00:30,460
my name is Syed I'm a network engineer

3
00:00:25,880 --> 00:00:34,280
at Oracle cloud infrastructure and I

4
00:00:30,460 --> 00:00:37,100
want to thank you Oracle and to sudo for

5
00:00:34,280 --> 00:00:39,500
sponsoring the hackathon I want to thank

6
00:00:37,100 --> 00:00:41,000
you Nana for organizing that Akutan I

7
00:00:39,500 --> 00:00:42,829
want to thank you my teammates and

8
00:00:41,000 --> 00:00:45,740
colleagues whelped me actually

9
00:00:42,829 --> 00:00:48,400
throughout the building up the hackathon

10
00:00:45,740 --> 00:00:52,370
and then on the Sunday running it

11
00:00:48,400 --> 00:00:55,399
rocketing the hackathon so just a quick

12
00:00:52,370 --> 00:00:58,010
recap it was the eighth hackathon

13
00:00:55,399 --> 00:00:59,899
organized by naina he roughly had 50

14
00:00:58,010 --> 00:01:03,140
participant working in 10 different

15
00:00:59,899 --> 00:01:05,390
teams there were a lot of college

16
00:01:03,140 --> 00:01:07,579
students so it's always great that

17
00:01:05,390 --> 00:01:09,549
there's a chance for college students to

18
00:01:07,579 --> 00:01:12,079
come and work with network professionals

19
00:01:09,549 --> 00:01:14,120
we had bunch of first-timers so that

20
00:01:12,079 --> 00:01:17,259
shows there's always room to grow and

21
00:01:14,120 --> 00:01:21,140
new people to show up in the hackathon

22
00:01:17,260 --> 00:01:23,270
so hackathon our goals so the team of

23
00:01:21,140 --> 00:01:26,900
hackathon was deploying active marketing

24
00:01:23,270 --> 00:01:29,810
infrastructure so each team has a task

25
00:01:26,900 --> 00:01:33,890
to extract the topology using some kind

26
00:01:29,810 --> 00:01:35,659
of automation from Network used that

27
00:01:33,890 --> 00:01:38,840
topology information to build a network

28
00:01:35,659 --> 00:01:41,630
map or network graph and once they had a

29
00:01:38,840 --> 00:01:43,549
network map they were they had to

30
00:01:41,630 --> 00:01:46,520
calculate all the possible best paths

31
00:01:43,549 --> 00:01:49,310
between any two given endpoints and once

32
00:01:46,520 --> 00:01:50,929
they had all the best paths they had to

33
00:01:49,310 --> 00:01:53,540
make sure they can probe all those best

34
00:01:50,930 --> 00:01:57,290
paths and record any failure as it

35
00:01:53,540 --> 00:01:59,509
happens on any of those paths so how the

36
00:01:57,290 --> 00:02:03,080
experience of the day was so we started

37
00:01:59,509 --> 00:02:05,360
the day with giving an overview of hack

38
00:02:03,080 --> 00:02:07,189
and with the topology information look

39
00:02:05,360 --> 00:02:09,799
like we gave them an overview of

40
00:02:07,189 --> 00:02:13,040
different tools they can use to solve

41
00:02:09,799 --> 00:02:14,720
the problem so it was interesting

42
00:02:13,040 --> 00:02:16,970
throughout the process that how many

43
00:02:14,720 --> 00:02:19,160
people actually know about X ibgp but

44
00:02:16,970 --> 00:02:21,290
never had a chance to actually work on

45
00:02:19,160 --> 00:02:22,829
XM bgp so it was a good chance for them

46
00:02:21,290 --> 00:02:25,440
to get some hands-on

47
00:02:22,830 --> 00:02:28,080
with xwp there were some powered cements

48
00:02:25,440 --> 00:02:31,200
who never heard about BGP and his family

49
00:02:28,080 --> 00:02:33,240
LS or worked on a tool called escapee

50
00:02:31,200 --> 00:02:35,280
and then Python said it was a good

51
00:02:33,240 --> 00:02:38,010
experience learning experience for them

52
00:02:35,280 --> 00:02:41,820
as well so the team started working on

53
00:02:38,010 --> 00:02:43,920
hack from 10:30 to 6 p.m. at 6 p.m. we

54
00:02:41,820 --> 00:02:47,190
had a hard stop and everyone had to

55
00:02:43,920 --> 00:02:49,980
present their work so every team had 5

56
00:02:47,190 --> 00:02:54,660
minutes to present their work and winner

57
00:02:49,980 --> 00:02:56,850
was decided based on the voting so we

58
00:02:54,660 --> 00:02:59,400
always encourage people to bring their

59
00:02:56,850 --> 00:03:01,950
own project so this time around we had a

60
00:02:59,400 --> 00:03:05,790
project that God was erected from Nanog

61
00:03:01,950 --> 00:03:08,100
67 Pike on console servers using

62
00:03:05,790 --> 00:03:10,650
raspberry PI's and actually they were

63
00:03:08,100 --> 00:03:13,500
they are one of the winners of hackathon

64
00:03:10,650 --> 00:03:15,920
as well along with net buffs so without

65
00:03:13,500 --> 00:03:18,240
any further ado I'll invite Ned buffs

66
00:03:15,920 --> 00:03:20,850
followed by Python to share their

67
00:03:18,240 --> 00:03:23,550
experience of hackathon and their

68
00:03:20,850 --> 00:03:26,000
approach how they approached solving the

69
00:03:23,550 --> 00:03:26,000
hackathon

70
00:03:37,989 --> 00:03:43,550
good afternoon everyone I hope you guys

71
00:03:40,670 --> 00:03:45,530
are having good nanak sessions so yeah

72
00:03:43,550 --> 00:03:52,129
team Ned buff via students from

73
00:03:45,530 --> 00:03:54,620
University of Colorado Boulder I like to

74
00:03:52,129 --> 00:03:56,359
thank firstly Nanak for arranging this

75
00:03:54,620 --> 00:03:59,390
hackathon and giving us the opportunity

76
00:03:56,360 --> 00:04:01,819
to participate in it I'd also like to

77
00:03:59,390 --> 00:04:04,130
thank Oracle and de Soto for giving us

78
00:04:01,819 --> 00:04:07,310
the cloud platform or to perform the

79
00:04:04,130 --> 00:04:09,859
hack so the problem statement was given

80
00:04:07,310 --> 00:04:13,610
us basically was to network automation

81
00:04:09,860 --> 00:04:15,590
so we we needed to build a system to

82
00:04:13,610 --> 00:04:19,549
monitor the network and detect the

83
00:04:15,590 --> 00:04:22,729
failures so we for moving forward with

84
00:04:19,548 --> 00:04:25,099
this we monitored the parts for all the

85
00:04:22,729 --> 00:04:28,760
networks all the parts from point A to

86
00:04:25,100 --> 00:04:30,740
point B as you know that a large amount

87
00:04:28,760 --> 00:04:34,789
of data is flowing from one point to

88
00:04:30,740 --> 00:04:36,500
another so we use time as a metric to

89
00:04:34,790 --> 00:04:40,370
going forward with the monitoring path

90
00:04:36,500 --> 00:04:43,490
of since time complexity we had we

91
00:04:40,370 --> 00:04:45,710
automated the whole curve whole network

92
00:04:43,490 --> 00:04:50,240
topology monitoring process and we use

93
00:04:45,710 --> 00:04:52,430
made use of some open source tools so

94
00:04:50,240 --> 00:04:54,650
the hackathon goal which we move forward

95
00:04:52,430 --> 00:04:56,750
with was to extract a topology

96
00:04:54,650 --> 00:04:58,909
information like all possible paths the

97
00:04:56,750 --> 00:05:03,380
number of hops the interface nodes

98
00:04:58,910 --> 00:05:05,240
informations we monitored that and we

99
00:05:03,380 --> 00:05:07,639
detected failures for that if the

100
00:05:05,240 --> 00:05:11,780
failures were detected we raise the

101
00:05:07,639 --> 00:05:14,389
necessary actions so we pass this

102
00:05:11,780 --> 00:05:19,400
information from the network topology

103
00:05:14,389 --> 00:05:22,510
using bt pls bgp LS is a tool that can

104
00:05:19,400 --> 00:05:25,340
use to extract the IGP information and

105
00:05:22,510 --> 00:05:29,360
give it to an external entity why our

106
00:05:25,340 --> 00:05:34,280
BGP and for that taking the information

107
00:05:29,360 --> 00:05:36,800
out of BGP LS we use X our BGP so X a

108
00:05:34,280 --> 00:05:40,070
BGP gives us the information in a form

109
00:05:36,800 --> 00:05:41,810
of JSON format and for extracting the

110
00:05:40,070 --> 00:05:44,870
information and passing through it we

111
00:05:41,810 --> 00:05:47,479
use made use of Python in JSON and as

112
00:05:44,870 --> 00:05:50,120
you can see we found out the router IDs

113
00:05:47,479 --> 00:05:51,770
out addresses or

114
00:05:50,120 --> 00:05:56,660
that through this information which we

115
00:05:51,770 --> 00:05:58,639
got on exa bgp then we made this is the

116
00:05:56,660 --> 00:06:02,000
topology which was given to us we had

117
00:05:58,639 --> 00:06:04,660
six routers so we found out the best all

118
00:06:02,000 --> 00:06:07,820
possible paths from point A to point B

119
00:06:04,660 --> 00:06:11,000
using a tool network X Network X is a

120
00:06:07,820 --> 00:06:13,159
tool that can graph the network and you

121
00:06:11,000 --> 00:06:17,060
can study structures dynamics and

122
00:06:13,160 --> 00:06:19,580
functionalities so this is the workflow

123
00:06:17,060 --> 00:06:24,139
be followed now so first we created the

124
00:06:19,580 --> 00:06:27,260
probes that be near for monitoring then

125
00:06:24,139 --> 00:06:31,370
weekly a send us pro from host a to host

126
00:06:27,260 --> 00:06:34,310
B on the same machine we received the

127
00:06:31,370 --> 00:06:37,490
same probes we extracted the information

128
00:06:34,310 --> 00:06:40,220
regarding the time between and the send

129
00:06:37,490 --> 00:06:41,900
and they received a packet we calculated

130
00:06:40,220 --> 00:06:43,580
those time calculated the time

131
00:06:41,900 --> 00:06:46,669
difference between them and set and

132
00:06:43,580 --> 00:06:49,010
threshold if the delay that had was

133
00:06:46,669 --> 00:06:52,099
greater than the threshold we generated

134
00:06:49,010 --> 00:06:54,260
a ticket otherwise this whole script was

135
00:06:52,100 --> 00:06:59,389
going back to step 1 and continuously

136
00:06:54,260 --> 00:07:02,090
monitoring the whole process so the 4

137
00:06:59,389 --> 00:07:04,700
probe creations we made use of scape e

138
00:07:02,090 --> 00:07:08,560
scabies a strong powerful tool via n

139
00:07:04,700 --> 00:07:11,539
Python package which can use to create

140
00:07:08,560 --> 00:07:14,960
packets and send from point A to point B

141
00:07:11,539 --> 00:07:18,169
so we created IP GRE packets at

142
00:07:14,960 --> 00:07:20,419
different mo packets which hurts overs

143
00:07:18,169 --> 00:07:22,430
and the destination addresses we

144
00:07:20,419 --> 00:07:25,880
integrated those packets in a single

145
00:07:22,430 --> 00:07:29,000
variable and we integrated the payload

146
00:07:25,880 --> 00:07:33,560
which contained at time then we send the

147
00:07:29,000 --> 00:07:36,050
packet using this KP function and as you

148
00:07:33,560 --> 00:07:37,639
can see this is the screenshot of the

149
00:07:36,050 --> 00:07:42,770
packet which we received back on the

150
00:07:37,639 --> 00:07:44,479
incidence so we calculated the time

151
00:07:42,770 --> 00:07:47,080
difference for that we fetch the

152
00:07:44,479 --> 00:07:49,490
information from the received packet and

153
00:07:47,080 --> 00:07:51,770
took the difference of the same time and

154
00:07:49,490 --> 00:07:55,130
the received time and certain threshold

155
00:07:51,770 --> 00:07:57,530
for that if the value goes beyond it

156
00:07:55,130 --> 00:08:00,200
will be automated in script that can

157
00:07:57,530 --> 00:08:02,409
generate an email and which candy is the

158
00:08:00,200 --> 00:08:02,409
ticket

159
00:08:04,850 --> 00:08:11,780
so this is a small demo of what we did

160
00:08:08,090 --> 00:08:14,719
with the tools which I mentioned earlier

161
00:08:11,780 --> 00:08:17,250
so on the right you can see we are

162
00:08:14,720 --> 00:08:20,280
created a Python script that sends the

163
00:08:17,250 --> 00:08:22,919
package from host a to host B and on the

164
00:08:20,280 --> 00:08:24,960
left hand side it's the Python script

165
00:08:22,919 --> 00:08:27,060
that is receiving the packets fetching

166
00:08:24,960 --> 00:08:30,270
the information regarding the time and

167
00:08:27,060 --> 00:08:32,909
displaying an error message so when this

168
00:08:30,270 --> 00:08:35,809
error message takes place we report the

169
00:08:32,909 --> 00:08:38,760
failure and send an email which will

170
00:08:35,809 --> 00:08:41,520
raise a ticket so far raising the ticket

171
00:08:38,760 --> 00:08:43,740
we have used fresh disk so as you can

172
00:08:41,520 --> 00:08:47,069
see in the highlighted part the error

173
00:08:43,740 --> 00:08:49,770
message contains the error like what is

174
00:08:47,070 --> 00:08:52,260
the error like high latency and on which

175
00:08:49,770 --> 00:08:54,329
route like the which route the packet is

176
00:08:52,260 --> 00:08:59,040
taking on that packet we are erasing an

177
00:08:54,330 --> 00:09:02,550
error so as you guys know that hackathon

178
00:08:59,040 --> 00:09:04,740
is one-day event and we did many things

179
00:09:02,550 --> 00:09:08,760
but we still had many things in mind to

180
00:09:04,740 --> 00:09:13,620
do so as this hack was constrained to 6

181
00:09:08,760 --> 00:09:17,610
doubters we thought of scaling we have a

182
00:09:13,620 --> 00:09:20,610
my something scripts ready like we can

183
00:09:17,610 --> 00:09:24,000
scale this whole hack from for a complex

184
00:09:20,610 --> 00:09:27,510
network also we can take the failures

185
00:09:24,000 --> 00:09:29,370
and reroute the traffic to a different

186
00:09:27,510 --> 00:09:32,160
paths because we already have the path

187
00:09:29,370 --> 00:09:34,860
from point A to point B different paths

188
00:09:32,160 --> 00:09:37,680
from point A to point B also we can

189
00:09:34,860 --> 00:09:39,930
visualize the error message using a

190
00:09:37,680 --> 00:09:43,079
graphical tool and create a dashboard

191
00:09:39,930 --> 00:09:47,130
regarding that for that we was thinking

192
00:09:43,080 --> 00:09:50,040
to use graph Anna so there are many

193
00:09:47,130 --> 00:09:53,339
things that we learn from this hack we

194
00:09:50,040 --> 00:09:57,079
learn many tools or just represented us

195
00:09:53,339 --> 00:10:01,410
by Oracle we had a chance to dig into it

196
00:09:57,080 --> 00:10:03,839
as like I said earlier like time is

197
00:10:01,410 --> 00:10:06,329
constrained time is money we learn that

198
00:10:03,839 --> 00:10:09,540
how network program ability can be used

199
00:10:06,330 --> 00:10:12,079
to reduce the time complexity and make

200
00:10:09,540 --> 00:10:15,120
an efficient network automated script

201
00:10:12,079 --> 00:10:15,709
since it was a one-day event we needed

202
00:10:15,120 --> 00:10:17,600
to plan

203
00:10:15,710 --> 00:10:21,830
so we planned step by step created a

204
00:10:17,600 --> 00:10:23,690
workflow and got the results also we

205
00:10:21,830 --> 00:10:26,510
divided the work among our teams

206
00:10:23,690 --> 00:10:29,420
according to the strengths and then we

207
00:10:26,510 --> 00:10:32,390
integrated those steps and got the

208
00:10:29,420 --> 00:10:35,420
results so there were many tools which

209
00:10:32,390 --> 00:10:38,449
we got and we didn't know about it but

210
00:10:35,420 --> 00:10:40,579
of us stuck at many points but we then

211
00:10:38,450 --> 00:10:43,340
give up and move forward with it that

212
00:10:40,580 --> 00:10:46,220
was the main strength which we think we

213
00:10:43,340 --> 00:10:47,810
got from this hack these are the team

214
00:10:46,220 --> 00:10:54,020
members that perform the hackathon

215
00:10:47,810 --> 00:10:56,270
together and thank you guys I like to

216
00:10:54,020 --> 00:10:58,310
thank Nanak and Oracle for this event

217
00:10:56,270 --> 00:10:59,060
I'd also like to thank my professor Jose

218
00:10:58,310 --> 00:11:01,640
Santos

219
00:10:59,060 --> 00:11:03,109
Gavin a person and Levi Perry go for

220
00:11:01,640 --> 00:11:19,040
giving us the opportunity to do this

221
00:11:03,110 --> 00:11:21,820
thank you I'm Ryan worden from

222
00:11:19,040 --> 00:11:21,819
convergent media

223
00:11:28,760 --> 00:11:33,750
I'm Ryan Rawdon I'm with conversin media

224
00:11:31,530 --> 00:11:37,910
and I was working with Anand Oliver and

225
00:11:33,750 --> 00:11:37,910
Taylor on the PyCon project

226
00:11:48,940 --> 00:11:54,490
all right so the theme of the neon 76

227
00:11:52,090 --> 00:11:56,410
hackathon was active monitoring as

228
00:11:54,490 --> 00:11:59,200
mentioned by Syed I had brought in a

229
00:11:56,410 --> 00:12:01,750
project from Nanak 67 which was to

230
00:11:59,200 --> 00:12:05,590
establish console server infrastructure

231
00:12:01,750 --> 00:12:09,310
using open source in self assembling or

232
00:12:05,590 --> 00:12:12,040
self discovering framework and commodity

233
00:12:09,310 --> 00:12:13,810
hardware some common issues that I think

234
00:12:12,040 --> 00:12:15,310
we've all experienced with managing

235
00:12:13,810 --> 00:12:20,969
console infrastructure especially across

236
00:12:15,310 --> 00:12:24,040
multiple locations console vendors and

237
00:12:20,970 --> 00:12:25,360
capability of local personnel is the the

238
00:12:24,040 --> 00:12:26,890
islands that we have of different

239
00:12:25,360 --> 00:12:28,690
devices that perform different function

240
00:12:26,890 --> 00:12:30,550
or service different devices poor

241
00:12:28,690 --> 00:12:31,930
documentation of what devices are

242
00:12:30,550 --> 00:12:33,939
connected to what console especially

243
00:12:31,930 --> 00:12:36,010
when you need it most little or no

244
00:12:33,940 --> 00:12:37,990
proactive testing of what devices are

245
00:12:36,010 --> 00:12:40,600
available and working correctly on

246
00:12:37,990 --> 00:12:42,460
console and then the pain that can come

247
00:12:40,600 --> 00:12:43,870
with when you need the console but you

248
00:12:42,460 --> 00:12:45,040
can't necessarily find it you don't know

249
00:12:43,870 --> 00:12:47,050
if it took tup or if it's working

250
00:12:45,040 --> 00:12:48,430
correctly I think all everybody has

251
00:12:47,050 --> 00:12:50,589
probably experienced the case where you

252
00:12:48,430 --> 00:12:52,599
reach out to an on-site contact whether

253
00:12:50,590 --> 00:12:55,830
it's a non-technical individual in an

254
00:12:52,600 --> 00:12:58,210
office whether it's new or broken or a

255
00:12:55,830 --> 00:12:59,740
room Mohan's personnel who has to

256
00:12:58,210 --> 00:13:00,760
troubleshoot your console and get you

257
00:12:59,740 --> 00:13:05,950
hopefully your out-of-band access

258
00:13:00,760 --> 00:13:08,530
working so the project born of the 2016

259
00:13:05,950 --> 00:13:10,540
annex 67 hackathon was to develop an

260
00:13:08,530 --> 00:13:12,160
open source self discovering framework

261
00:13:10,540 --> 00:13:14,319
that would allow you to use commodity

262
00:13:12,160 --> 00:13:16,420
hardware operating over a trusted or

263
00:13:14,320 --> 00:13:18,280
untrusted Network to give you a single

264
00:13:16,420 --> 00:13:20,260
view of all your console capabilities

265
00:13:18,280 --> 00:13:23,500
regardless of location and maybe even

266
00:13:20,260 --> 00:13:24,760
vendor over time this would then give

267
00:13:23,500 --> 00:13:26,680
you the beans to pick and implement the

268
00:13:24,760 --> 00:13:28,630
advanced features that you want such as

269
00:13:26,680 --> 00:13:30,910
user concurrency what their to read or

270
00:13:28,630 --> 00:13:33,280
read/write logging of console output to

271
00:13:30,910 --> 00:13:35,500
file or desist log and then also point

272
00:13:33,280 --> 00:13:37,329
and click access ideally such as is

273
00:13:35,500 --> 00:13:40,480
offered and some of the more advanced

274
00:13:37,330 --> 00:13:42,580
commercial platforms so in theory all

275
00:13:40,480 --> 00:13:44,110
you need is a USB serial adapter and

276
00:13:42,580 --> 00:13:47,470
then some device to give you that remote

277
00:13:44,110 --> 00:13:48,670
access the Raspberry Pi is a platform

278
00:13:47,470 --> 00:13:50,620
that I think we're all familiar with

279
00:13:48,670 --> 00:13:52,360
ubiquity of and there's a lot of other

280
00:13:50,620 --> 00:13:53,890
similar ones that can be used to drop

281
00:13:52,360 --> 00:13:58,570
and get this capability wherever you

282
00:13:53,890 --> 00:14:00,610
need it the idea is to have a API and a

283
00:13:58,570 --> 00:14:02,350
framework where you power up a device

284
00:14:00,610 --> 00:14:04,360
and it runs an agent that

285
00:14:02,350 --> 00:14:06,760
in self-report things such as its

286
00:14:04,360 --> 00:14:09,040
interfaces its addresses and the console

287
00:14:06,760 --> 00:14:11,890
ports that are available so that you can

288
00:14:09,040 --> 00:14:13,209
maintain an inventory of all the console

289
00:14:11,890 --> 00:14:15,430
connections available in the different

290
00:14:13,210 --> 00:14:19,560
locations these are deployed what the

291
00:14:15,430 --> 00:14:21,520
connectivity is 3G or 4G out-of-band or

292
00:14:19,560 --> 00:14:24,459
third-party vendor provide connectivity

293
00:14:21,520 --> 00:14:25,900
or a local trusted network this would

294
00:14:24,460 --> 00:14:28,830
give you the means to access those

295
00:14:25,900 --> 00:14:32,140
devices over whatever is in the middle

296
00:14:28,830 --> 00:14:34,240
the actual workflow ends up being that

297
00:14:32,140 --> 00:14:36,340
you have the periodic registrations from

298
00:14:34,240 --> 00:14:38,590
the raspberry PI's out in the field they

299
00:14:36,340 --> 00:14:40,240
call to the web server and in turn get

300
00:14:38,590 --> 00:14:42,190
back some amount of configuration

301
00:14:40,240 --> 00:14:43,990
information that will be used to

302
00:14:42,190 --> 00:14:46,150
configure the local console ports as

303
00:14:43,990 --> 00:14:48,730
well as step three which is optionally

304
00:14:46,150 --> 00:14:50,500
open an SSH tunnel to a server in your

305
00:14:48,730 --> 00:14:52,480
central infrastructure this way

306
00:14:50,500 --> 00:14:54,610
regardless of who else's network is in

307
00:14:52,480 --> 00:14:56,320
the middle what vendor ISM or firewall

308
00:14:54,610 --> 00:14:58,300
policy might be in there as long as you

309
00:14:56,320 --> 00:15:00,190
have that SSH capability back to your

310
00:14:58,300 --> 00:15:02,740
central location inside or outside your

311
00:15:00,190 --> 00:15:04,900
network you can then port forward to

312
00:15:02,740 --> 00:15:06,640
port back to the device in question to

313
00:15:04,900 --> 00:15:09,220
access it for console or other

314
00:15:06,640 --> 00:15:11,530
troubleshooting purposes so the

315
00:15:09,220 --> 00:15:13,030
raspberry pi is inexpensive you can buy

316
00:15:11,530 --> 00:15:14,350
a bunch of them and deploy them and use

317
00:15:13,030 --> 00:15:16,540
them for either this purpose or other

318
00:15:14,350 --> 00:15:18,370
troubleshooting or probe purposes this

319
00:15:16,540 --> 00:15:19,510
is to some degree how this is on theme

320
00:15:18,370 --> 00:15:22,150
with the hackathon even though was a

321
00:15:19,510 --> 00:15:26,890
project off of the in-band testing and

322
00:15:22,150 --> 00:15:30,100
monitoring aspect the initial work in

323
00:15:26,890 --> 00:15:32,170
2016 we used Python 3 with flask and

324
00:15:30,100 --> 00:15:34,510
bootstrap and at minimal external

325
00:15:32,170 --> 00:15:37,240
dependencies to provide a web server and

326
00:15:34,510 --> 00:15:40,000
API where the agent would be fired up

327
00:15:37,240 --> 00:15:42,910
and given just the endpoint of the API

328
00:15:40,000 --> 00:15:44,200
to register with and then everything

329
00:15:42,910 --> 00:15:47,709
else would be pulled from the server

330
00:15:44,200 --> 00:15:49,870
side config this web server would also

331
00:15:47,710 --> 00:15:52,150
provide the UI for the listing of

332
00:15:49,870 --> 00:15:56,200
devices console ports addresses and

333
00:15:52,150 --> 00:15:57,579
status of the infrastructure the self

334
00:15:56,200 --> 00:15:59,320
registering agent would then also be

335
00:15:57,580 --> 00:16:04,300
able to open that SSH connection to an

336
00:15:59,320 --> 00:16:06,400
SSH jump box essentially so after that

337
00:16:04,300 --> 00:16:08,829
hackathon the next steps were to add

338
00:16:06,400 --> 00:16:10,390
some more web and UI capabilities to

339
00:16:08,830 --> 00:16:12,670
support the configure bail configure

340
00:16:10,390 --> 00:16:14,490
ability of the environment established

341
00:16:12,670 --> 00:16:16,300
the actual programmatic console access

342
00:16:14,490 --> 00:16:18,550
the in browser

343
00:16:16,300 --> 00:16:20,920
until access once that foundation was in

344
00:16:18,550 --> 00:16:22,870
place and potentially other things like

345
00:16:20,920 --> 00:16:25,260
had a proxy agent for joining other

346
00:16:22,870 --> 00:16:27,640
vendors infrastructure or running

347
00:16:25,260 --> 00:16:29,680
registered with API on their behalf or

348
00:16:27,640 --> 00:16:31,689
physical configurations for deploying

349
00:16:29,680 --> 00:16:33,010
these in racks or whatever level of

350
00:16:31,690 --> 00:16:37,870
ruggedized ation required for an

351
00:16:33,010 --> 00:16:40,630
environment so the agent starts up it

352
00:16:37,870 --> 00:16:43,660
will tell its own whole time based on

353
00:16:40,630 --> 00:16:46,060
how volatile it expects to be its

354
00:16:43,660 --> 00:16:48,699
hostname so it can be uniquely enough

355
00:16:46,060 --> 00:16:51,849
identified its interfaces and addresses

356
00:16:48,700 --> 00:16:54,190
both ipv4 and ipv6 and then the list of

357
00:16:51,850 --> 00:16:55,750
whatever tt Y's are available locally

358
00:16:54,190 --> 00:16:59,320
that should be able to provide console

359
00:16:55,750 --> 00:17:00,640
access from the server at the towards

360
00:16:59,320 --> 00:17:02,500
the bottom of this screenshot we then

361
00:17:00,640 --> 00:17:03,760
get back the status of the registration

362
00:17:02,500 --> 00:17:05,680
and then any other configuration

363
00:17:03,760 --> 00:17:09,369
information for example the tunnel

364
00:17:05,680 --> 00:17:11,530
server and port to register on the UI

365
00:17:09,369 --> 00:17:14,739
provides a fairly straightforward list

366
00:17:11,530 --> 00:17:16,629
of the devices one of the one of the

367
00:17:14,740 --> 00:17:19,120
goals that we chose where the top three

368
00:17:16,630 --> 00:17:20,800
to add some additional capabilities and

369
00:17:19,119 --> 00:17:24,250
establish some level of the console

370
00:17:20,800 --> 00:17:26,169
access so in this screenshot we have the

371
00:17:24,250 --> 00:17:28,270
list of devices and in this case the one

372
00:17:26,170 --> 00:17:30,970
main demo device the two ports available

373
00:17:28,270 --> 00:17:32,830
on it and then the descriptions which is

374
00:17:30,970 --> 00:17:34,780
a new capability added throughout the

375
00:17:32,830 --> 00:17:38,409
process of learning and working on the

376
00:17:34,780 --> 00:17:40,420
project together in the device details

377
00:17:38,410 --> 00:17:42,610
we added the click to configure

378
00:17:40,420 --> 00:17:44,950
capability towards the bottom here to be

379
00:17:42,610 --> 00:17:46,629
able to provide a you know instead of

380
00:17:44,950 --> 00:17:47,950
going into configuration files and

381
00:17:46,630 --> 00:17:50,080
mapping ports and descriptions on

382
00:17:47,950 --> 00:17:51,730
everything hopefully providing configure

383
00:17:50,080 --> 00:17:53,590
ability through this single view as well

384
00:17:51,730 --> 00:17:57,580
regardless of how many of the deployed

385
00:17:53,590 --> 00:17:58,780
devices or ports there are that same

386
00:17:57,580 --> 00:18:01,020
mechanism hopefully can be used to

387
00:17:58,780 --> 00:18:03,550
deploy to configure baud rates and other

388
00:18:01,020 --> 00:18:06,010
configurations necessary to light up the

389
00:18:03,550 --> 00:18:08,080
downstream us people downstream serial

390
00:18:06,010 --> 00:18:11,730
ports and persist that configuration

391
00:18:08,080 --> 00:18:14,350
over time we also were researching the

392
00:18:11,730 --> 00:18:16,630
WebSockets capability used to get an

393
00:18:14,350 --> 00:18:18,280
in-browser access to the console so that

394
00:18:16,630 --> 00:18:20,350
when you have the list of devices and

395
00:18:18,280 --> 00:18:22,780
console ports available you just click

396
00:18:20,350 --> 00:18:25,929
on one and you are able to access the

397
00:18:22,780 --> 00:18:28,370
console of the downstream device we got

398
00:18:25,930 --> 00:18:30,260
some islands of the connectivity

399
00:18:28,370 --> 00:18:32,030
and proof-of-concept working in this

400
00:18:30,260 --> 00:18:33,530
case the WebSocket server was up and

401
00:18:32,030 --> 00:18:34,760
running and starting to be integrated

402
00:18:33,530 --> 00:18:36,530
into the codebase by the end of the day

403
00:18:34,760 --> 00:18:38,200
and we were able to carry events from

404
00:18:36,530 --> 00:18:39,980
one browser through the server and back

405
00:18:38,200 --> 00:18:41,690
potentially laying the groundwork for

406
00:18:39,980 --> 00:18:45,440
being able to talk to a console server

407
00:18:41,690 --> 00:18:49,520
back-end and provide concurrency between

408
00:18:45,440 --> 00:18:51,260
multiple users so throughout the day the

409
00:18:49,520 --> 00:18:52,730
team and individuals researched a bunch

410
00:18:51,260 --> 00:18:53,840
of new topics that were outside of our

411
00:18:52,730 --> 00:18:55,670
comfort zone

412
00:18:53,840 --> 00:18:57,530
WebSockets was something new to all of

413
00:18:55,670 --> 00:18:59,530
us especially being network engineers

414
00:18:57,530 --> 00:19:01,910
not doing much GUI development

415
00:18:59,530 --> 00:19:04,070
interacting with the TTI's themselves

416
00:19:01,910 --> 00:19:05,660
via Python the serial module

417
00:19:04,070 --> 00:19:07,428
specifically interacted with a device

418
00:19:05,660 --> 00:19:11,900
directly to eliminate external

419
00:19:07,429 --> 00:19:14,270
dependencies and more features using the

420
00:19:11,900 --> 00:19:16,520
Twitter bootstrap and some old rusty

421
00:19:14,270 --> 00:19:18,050
jQuery skills we all dust it off to add

422
00:19:16,520 --> 00:19:20,090
the client-side capability for

423
00:19:18,050 --> 00:19:22,399
configuration so with this we

424
00:19:20,090 --> 00:19:24,169
implemented the various UI tweaks and

425
00:19:22,400 --> 00:19:26,720
and provide some experience for the

426
00:19:24,170 --> 00:19:29,030
college student that was on our team we

427
00:19:26,720 --> 00:19:30,980
also integrated that WebSockets proof of

428
00:19:29,030 --> 00:19:32,780
concept to be able to interact with the

429
00:19:30,980 --> 00:19:34,550
users and push and pull data from the

430
00:19:32,780 --> 00:19:38,450
server without having to pull the server

431
00:19:34,550 --> 00:19:41,720
with repeated HTTP requests or takeaways

432
00:19:38,450 --> 00:19:43,640
were that flask and bootstrap and other

433
00:19:41,720 --> 00:19:47,900
similar technologies in Python 3 and

434
00:19:43,640 --> 00:19:50,950
elsewhere provide a simplified means for

435
00:19:47,900 --> 00:19:53,000
non developers like network engineers to

436
00:19:50,950 --> 00:19:55,760
mock-up or create this kind of

437
00:19:53,000 --> 00:19:57,320
infrastructure however WebSockets and

438
00:19:55,760 --> 00:19:58,760
things like synchronous i/o and then the

439
00:19:57,320 --> 00:20:00,590
multi-threading of those two with the

440
00:19:58,760 --> 00:20:02,929
web server talking to the various

441
00:20:00,590 --> 00:20:05,840
back-end services are substantially more

442
00:20:02,929 --> 00:20:07,010
complicated so we we got a great

443
00:20:05,840 --> 00:20:08,870
experience that some things outside of

444
00:20:07,010 --> 00:20:11,330
our comfort zone but trying to implement

445
00:20:08,870 --> 00:20:13,250
the UI workflow and the end-to-end

446
00:20:11,330 --> 00:20:17,480
console access will take quite a bit

447
00:20:13,250 --> 00:20:18,710
more planning and and research as always

448
00:20:17,480 --> 00:20:20,480
there are less technical takeaways from

449
00:20:18,710 --> 00:20:23,300
the skills as the the colleagues on the

450
00:20:20,480 --> 00:20:25,309
net buffs team mentioned the soft skills

451
00:20:23,300 --> 00:20:26,870
of working with strangers on new topics

452
00:20:25,309 --> 00:20:29,000
you know Meeks built for the first time

453
00:20:26,870 --> 00:20:31,189
communicating digging into things and

454
00:20:29,000 --> 00:20:32,929
getting outside of your comfort zone it

455
00:20:31,190 --> 00:20:34,790
is inherently uncomfortable but it's

456
00:20:32,929 --> 00:20:36,790
it's a fun experience and it's great to

457
00:20:34,790 --> 00:20:39,710
have that that time set aside to do it

458
00:20:36,790 --> 00:20:41,810
so there's other future work great great

459
00:20:39,710 --> 00:20:43,820
options left for this project one is

460
00:20:41,810 --> 00:20:46,370
continue integrating the WebSockets for

461
00:20:43,820 --> 00:20:47,629
console access basic authentication so

462
00:20:46,370 --> 00:20:51,709
you have a privileged system of read

463
00:20:47,630 --> 00:20:53,000
read write no access identify what the

464
00:20:51,710 --> 00:20:54,560
ideal hardware configuration would be

465
00:20:53,000 --> 00:20:56,090
for a proof-of-concept deployment and

466
00:20:54,560 --> 00:20:57,980
maybe in one of our employers and it

467
00:20:56,090 --> 00:21:00,320
works to see how this holds up to some

468
00:20:57,980 --> 00:21:02,360
real-world use cases one of the best

469
00:21:00,320 --> 00:21:03,919
most interesting ones is being able to

470
00:21:02,360 --> 00:21:05,659
drop one of these in a box with a bunch

471
00:21:03,920 --> 00:21:07,310
of USB dongles and get it to an office

472
00:21:05,660 --> 00:21:10,820
somewhere and just have to get cabled up

473
00:21:07,310 --> 00:21:13,460
with a data providers USB dongle or

474
00:21:10,820 --> 00:21:14,960
something being able to extend and

475
00:21:13,460 --> 00:21:16,910
abstract the configuration of this

476
00:21:14,960 --> 00:21:18,560
server and agent behavior as well as the

477
00:21:16,910 --> 00:21:20,270
continued add UI access to the

478
00:21:18,560 --> 00:21:23,389
configuration of the downstream device

479
00:21:20,270 --> 00:21:25,610
serial ports and then another

480
00:21:23,390 --> 00:21:27,800
interesting idea is the if you have a

481
00:21:25,610 --> 00:21:29,929
bunch say you have a bunch of Cisco you

482
00:21:27,800 --> 00:21:31,399
know 20 I know ones deployed with 64

483
00:21:29,930 --> 00:21:34,130
serial ports all over your network in

484
00:21:31,400 --> 00:21:36,050
these islands well it's kind of like dou

485
00:21:34,130 --> 00:21:38,090
XK CD comic of when you want to create

486
00:21:36,050 --> 00:21:39,470
new standards you suddenly just add one

487
00:21:38,090 --> 00:21:41,510
more thing to the mix and you haven't

488
00:21:39,470 --> 00:21:43,040
really solved anything for this to add

489
00:21:41,510 --> 00:21:45,020
value in an existing console

490
00:21:43,040 --> 00:21:47,360
infrastructure an ideal case might be

491
00:21:45,020 --> 00:21:49,400
having a proxy agent that is able to

492
00:21:47,360 --> 00:21:51,469
talk to your existing confluence console

493
00:21:49,400 --> 00:21:53,420
infrastructure and register in the UI

494
00:21:51,470 --> 00:21:56,750
and then proxy commands back and forth

495
00:21:53,420 --> 00:21:58,790
out of that as well so again as

496
00:21:56,750 --> 00:22:00,620
mentioned by our colleagues on net buffs

497
00:21:58,790 --> 00:22:02,420
Thank You fortitudo and oracle and Nan

498
00:22:00,620 --> 00:22:04,129
out for organizing this event it really

499
00:22:02,420 --> 00:22:06,170
is great to get out and do something

500
00:22:04,130 --> 00:22:08,060
different and set aside this time when

501
00:22:06,170 --> 00:22:09,470
during our week in our day jobs it may

502
00:22:08,060 --> 00:22:11,300
be hard to go out and do something new

503
00:22:09,470 --> 00:22:13,850
like this family's interested in the

504
00:22:11,300 --> 00:22:15,290
code or contributing I do hope to

505
00:22:13,850 --> 00:22:17,750
continue working on this project it's

506
00:22:15,290 --> 00:22:20,389
it's got some pencil promise for this

507
00:22:17,750 --> 00:22:22,280
decentralized aspect of monitoring and

508
00:22:20,390 --> 00:22:24,950
console infrastructure there's the

509
00:22:22,280 --> 00:22:27,399
github URL and any contributions are

510
00:22:24,950 --> 00:22:31,509
welcome thank you

511
00:22:27,400 --> 00:22:33,409
[Applause]

512
00:22:31,509 --> 00:22:34,820
so there are a few minutes left if

513
00:22:33,409 --> 00:22:36,499
everybody had questions about the

514
00:22:34,820 --> 00:22:42,918
hackathon or either of these projects

515
00:22:36,499 --> 00:22:44,979
both teams are available all right thank

516
00:22:42,919 --> 00:22:44,979
you

517
00:22:45,710 --> 00:22:50,779
[Applause]

518
00:22:55,559 --> 00:22:57,620
you

