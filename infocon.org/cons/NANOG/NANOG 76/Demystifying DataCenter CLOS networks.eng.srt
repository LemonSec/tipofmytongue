1
00:00:11,309 --> 00:00:16,079
everyone

2
00:00:12,549 --> 00:00:18,360
hey amigo de siouah and

3
00:00:16,079 --> 00:00:20,580
we're gonna talk about the overview of

4
00:00:18,360 --> 00:00:23,550
Yahoo data in a fabric version 3 which

5
00:00:20,580 --> 00:00:28,560
is a like basically how to build clone

6
00:00:23,550 --> 00:00:31,050
networks so we're gonna cover what's

7
00:00:28,560 --> 00:00:35,820
actually a Clos different close

8
00:00:31,050 --> 00:00:37,949
apologies details operational what we've

9
00:00:35,820 --> 00:00:41,850
actually seen in real world scaling

10
00:00:37,949 --> 00:00:42,660
Automation etc so first of all what's a

11
00:00:41,850 --> 00:00:44,519
Clos

12
00:00:42,660 --> 00:00:47,220
everybody thinks that it's an acronym it

13
00:00:44,519 --> 00:00:48,809
actually isn't a close up ology is named

14
00:00:47,220 --> 00:00:53,190
after Charles Clos who published a paper

15
00:00:48,809 --> 00:00:55,080
in 1953 you guys can read the paper name

16
00:00:53,190 --> 00:00:58,379
over there at I need to repeat it but

17
00:00:55,080 --> 00:01:00,239
essentially in 1953 a mathematician

18
00:00:58,379 --> 00:01:03,239
called Charles Clos he came up with a

19
00:01:00,239 --> 00:01:05,190
concept of a multi stage network that is

20
00:01:03,239 --> 00:01:08,070
based on an ingress middle and egress

21
00:01:05,190 --> 00:01:10,490
stage that forms a non-blocking topology

22
00:01:08,070 --> 00:01:12,690
and mathematical representation of it

23
00:01:10,490 --> 00:01:14,460
one big thing that he came up with is

24
00:01:12,690 --> 00:01:17,658
that this topology can be recursive so

25
00:01:14,460 --> 00:01:20,160
it can grow almost infinite scale and

26
00:01:17,659 --> 00:01:23,190
this is what everybody actually calls a

27
00:01:20,160 --> 00:01:25,200
leaf spine design it's actually a folded

28
00:01:23,190 --> 00:01:28,350
clothes which is a closed it is folded

29
00:01:25,200 --> 00:01:30,240
on itself a very simple way to think

30
00:01:28,350 --> 00:01:32,520
about a Clos is something called a B'nai

31
00:01:30,240 --> 00:01:35,130
network named after a flock of Bnei who

32
00:01:32,520 --> 00:01:38,399
is a chuck mathematician they came up

33
00:01:35,130 --> 00:01:41,250
with a easier way to think about the

34
00:01:38,400 --> 00:01:43,080
paper that Charles Clore wrote as you

35
00:01:41,250 --> 00:01:46,770
can see this is a banana worker that is

36
00:01:43,080 --> 00:01:49,500
effectively build out of radix for

37
00:01:46,770 --> 00:01:51,449
switches in order to create a radix 16

38
00:01:49,500 --> 00:01:54,780
infrastructure and what you're looking

39
00:01:51,450 --> 00:01:57,810
at is an ingress a middle and an equal

40
00:01:54,780 --> 00:01:59,700
stake and the middle stage is recursive

41
00:01:57,810 --> 00:02:01,800
which itself was made out of an ingress

42
00:01:59,700 --> 00:02:05,790
middle and egress stage this is a

43
00:02:01,800 --> 00:02:08,098
stereotypical closed apology on how to

44
00:02:05,790 --> 00:02:10,259
build something that's bigger than the

45
00:02:08,098 --> 00:02:15,540
smallest radix element of the network

46
00:02:10,258 --> 00:02:17,909
now not surprisingly people have been

47
00:02:15,540 --> 00:02:20,870
using closed for topologies for many

48
00:02:17,909 --> 00:02:23,579
many years starting with Bell switches

49
00:02:20,870 --> 00:02:26,370
like actual plain old telephone switches

50
00:02:23,580 --> 00:02:28,560
and most routers and switches these days

51
00:02:26,370 --> 00:02:29,580
are actually build our small closed

52
00:02:28,560 --> 00:02:32,440
apologies in them

53
00:02:29,580 --> 00:02:34,720
about 20 years ago people were still

54
00:02:32,440 --> 00:02:37,750
making switches using crossbar fabrics

55
00:02:34,720 --> 00:02:41,080
that fully interconnect every line card

56
00:02:37,750 --> 00:02:42,970
to each other but in the last 15 years

57
00:02:41,080 --> 00:02:44,980
or so most of the switches are actually

58
00:02:42,970 --> 00:02:46,900
made out of individual line cards and

59
00:02:44,980 --> 00:02:48,730
fabric cards line cars interconnect with

60
00:02:46,900 --> 00:02:51,180
fabric cards actually forming a closed

61
00:02:48,730 --> 00:02:54,040
apology inside of a actual bit chassis

62
00:02:51,180 --> 00:02:55,480
also most modern line cards these days

63
00:02:54,040 --> 00:02:58,120
that are used in multi chip architecture

64
00:02:55,480 --> 00:03:00,369
are made or built in a coat upon

65
00:02:58,120 --> 00:03:02,709
themselves of how to interconnect from

66
00:03:00,370 --> 00:03:05,110
the front facing ports potentially to

67
00:03:02,709 --> 00:03:09,940
the switch in Asics and then from there

68
00:03:05,110 --> 00:03:11,770
to the fabric Asics so one way to think

69
00:03:09,940 --> 00:03:15,520
about a closer Paula G is something we

70
00:03:11,770 --> 00:03:17,770
call a virtual chassis this is like what

71
00:03:15,520 --> 00:03:21,010
a chassis kind of looks like leaf is a

72
00:03:17,770 --> 00:03:23,470
spa a line card spine is a fabric card

73
00:03:21,010 --> 00:03:27,130
and if you think about a close-up ology

74
00:03:23,470 --> 00:03:32,079
like this like it's essentially one

75
00:03:27,130 --> 00:03:33,940
massive switch and the way that you kind

76
00:03:32,080 --> 00:03:35,380
of think about this virtual chassis

77
00:03:33,940 --> 00:03:37,510
topology design is that all

78
00:03:35,380 --> 00:03:40,470
interconnection that goes in and out of

79
00:03:37,510 --> 00:03:43,480
this topology goes through a leaf

80
00:03:40,470 --> 00:03:45,700
essentially just like in a large chassis

81
00:03:43,480 --> 00:03:47,018
unless you do a multi chassis system you

82
00:03:45,700 --> 00:03:51,429
don't interconnect through the fabric

83
00:03:47,019 --> 00:03:52,989
everything goes out the front side like

84
00:03:51,430 --> 00:03:56,110
any clothes apology the scaling

85
00:03:52,989 --> 00:03:58,480
characteristics here are the port count

86
00:03:56,110 --> 00:04:00,940
on the spine dictates how many leaks you

87
00:03:58,480 --> 00:04:02,410
can connect and the number of spines

88
00:04:00,940 --> 00:04:05,859
dictates how much of a subscription

89
00:04:02,410 --> 00:04:07,989
you're going to have another possible

90
00:04:05,860 --> 00:04:09,100
design is aperture line card there's a

91
00:04:07,989 --> 00:04:11,739
lot of line cards that have built this

92
00:04:09,100 --> 00:04:14,890
way which is ports connected to a

93
00:04:11,739 --> 00:04:17,890
back-end fabric the mathematically this

94
00:04:14,890 --> 00:04:20,019
is the same actually three-stage Clos

95
00:04:17,890 --> 00:04:21,728
but this is only two thirds of a

96
00:04:20,019 --> 00:04:23,740
three-stage Clos that is represented

97
00:04:21,728 --> 00:04:26,050
here and then you have multiple of these

98
00:04:23,740 --> 00:04:29,370
building elements that are are there 30g

99
00:04:26,050 --> 00:04:31,870
tours or maybe 48 tours like in

100
00:04:29,370 --> 00:04:35,169
Facebook's and LinkedIn's blog post that

101
00:04:31,870 --> 00:04:37,870
they posted that you connect many of

102
00:04:35,169 --> 00:04:39,460
them through a common fabric in fact you

103
00:04:37,870 --> 00:04:40,720
can interconnect them on multiple

104
00:04:39,460 --> 00:04:43,450
different planes create a multi

105
00:04:40,720 --> 00:04:46,240
dimensional networks and in fact

106
00:04:43,450 --> 00:04:48,370
these aren't mutually exclusive there's

107
00:04:46,240 --> 00:04:49,900
a lot of topology because Chloe you can

108
00:04:48,370 --> 00:04:52,330
do a lot of recursion in order to scale

109
00:04:49,900 --> 00:04:54,539
it out every one of these fabs could

110
00:04:52,330 --> 00:04:57,219
actually be a virtual chassis every

111
00:04:54,540 --> 00:04:58,720
component of a virtual chassis could be

112
00:04:57,220 --> 00:05:00,970
a virtual LAN card you could use virtual

113
00:04:58,720 --> 00:05:03,100
chassis of virtual LAN cards and vice

114
00:05:00,970 --> 00:05:05,320
versa many many different ways you can

115
00:05:03,100 --> 00:05:06,760
put together these topologies and

116
00:05:05,320 --> 00:05:10,990
typically these connect to a common

117
00:05:06,760 --> 00:05:13,330
fabric so as we were putting this

118
00:05:10,990 --> 00:05:15,700
presentation together I found this slide

119
00:05:13,330 --> 00:05:17,109
deck that I used in 2008 at Nanak 40

120
00:05:15,700 --> 00:05:20,560
what we're talking about the need for

121
00:05:17,110 --> 00:05:23,350
hundred gig and this is what we were

122
00:05:20,560 --> 00:05:26,080
building back in 2006 and I look back on

123
00:05:23,350 --> 00:05:28,090
this and kind of look at it wow we were

124
00:05:26,080 --> 00:05:32,349
talking that this is way too many paths

125
00:05:28,090 --> 00:05:33,820
way too many cables in 2006 boy did we

126
00:05:32,350 --> 00:05:38,950
not realize what we're going to build

127
00:05:33,820 --> 00:05:40,780
today so without further ado you are

128
00:05:38,950 --> 00:05:43,450
going to talk a little bit about we

129
00:05:40,780 --> 00:05:46,809
actually we're building 2012 yeah so

130
00:05:43,450 --> 00:05:48,969
from 2008 you guys have seen the

131
00:05:46,810 --> 00:05:51,130
pictures from before now first of all

132
00:05:48,970 --> 00:05:53,920
things you do 2012 that was the year

133
00:05:51,130 --> 00:05:58,540
that we actually deploy the first closed

134
00:05:53,920 --> 00:06:01,930
design in our data centers so now since

135
00:05:58,540 --> 00:06:05,380
then we have different sizes of clusters

136
00:06:01,930 --> 00:06:08,170
in production and they could scale to up

137
00:06:05,380 --> 00:06:11,260
to 20 K thousand dealt and theoretically

138
00:06:08,170 --> 00:06:16,000
with today's devices that they can even

139
00:06:11,260 --> 00:06:18,789
be a scale even larger this is basically

140
00:06:16,000 --> 00:06:20,860
the ability to scale and the plasto main

141
00:06:18,790 --> 00:06:23,830
is basically the trade-off right now

142
00:06:20,860 --> 00:06:28,330
yeah so that's actually a very big thing

143
00:06:23,830 --> 00:06:30,250
boom we were doing this design blast

144
00:06:28,330 --> 00:06:32,440
domain is kind of two components one is

145
00:06:30,250 --> 00:06:35,020
how much will you lose at any given

146
00:06:32,440 --> 00:06:38,260
point if you lose this entire topology

147
00:06:35,020 --> 00:06:40,090
for whatever reason another one is we

148
00:06:38,260 --> 00:06:41,590
wanted to kind of build building blocks

149
00:06:40,090 --> 00:06:43,840
that we could evolve as technology

150
00:06:41,590 --> 00:06:46,659
evolves so as new chips has come out

151
00:06:43,840 --> 00:06:48,489
higher radix lower radix faster or

152
00:06:46,660 --> 00:06:50,530
whatnot we didn't want to have to

153
00:06:48,490 --> 00:06:52,090
replace the entire infrastructure we own

154
00:06:50,530 --> 00:06:54,219
the one accurate place a building block

155
00:06:52,090 --> 00:06:55,719
of an infrastructure and that to us was

156
00:06:54,220 --> 00:06:59,860
a really big

157
00:06:55,720 --> 00:07:03,550
driving point alright and we also have

158
00:06:59,860 --> 00:07:05,350
we build many clusters with different

159
00:07:03,550 --> 00:07:08,140
variants of sizes and then we can

160
00:07:05,350 --> 00:07:10,330
actually interconnect them with the

161
00:07:08,140 --> 00:07:12,539
Fabri layer that on top we are going to

162
00:07:10,330 --> 00:07:17,229
see the details in the next few slides

163
00:07:12,540 --> 00:07:20,260
also we have different speed so the

164
00:07:17,230 --> 00:07:22,690
ability to deploy different sizes at the

165
00:07:20,260 --> 00:07:24,490
different time give us the ability is to

166
00:07:22,690 --> 00:07:27,100
deploy different technologies at

167
00:07:24,490 --> 00:07:29,140
different time so we have the old one

168
00:07:27,100 --> 00:07:32,170
that are running 10 gig to the servers

169
00:07:29,140 --> 00:07:34,150
now we have could have like 25 gig and a

170
00:07:32,170 --> 00:07:37,630
hundred in the core in two different

171
00:07:34,150 --> 00:07:40,030
places in the data centers for the

172
00:07:37,630 --> 00:07:44,050
overview we have these clusters are all

173
00:07:40,030 --> 00:07:46,900
running on layer 3 your stacked or BGP

174
00:07:44,050 --> 00:07:48,850
based and it's fully automated we will

175
00:07:46,900 --> 00:07:56,979
see in the next few slides about the

176
00:07:48,850 --> 00:07:58,690
details so the higher level topology for

177
00:07:56,980 --> 00:08:01,330
the high level topology we can see that

178
00:07:58,690 --> 00:08:04,090
on the top we have a DC when aggregation

179
00:08:01,330 --> 00:08:06,640
layer and in underneath there we could

180
00:08:04,090 --> 00:08:11,200
have one or more clusters that are

181
00:08:06,640 --> 00:08:13,300
interconnected slew a fab layer so the

182
00:08:11,200 --> 00:08:15,490
egress of each of the clusters are

183
00:08:13,300 --> 00:08:18,340
through a type of devices we called

184
00:08:15,490 --> 00:08:21,150
egress routers or EDRs we are going to

185
00:08:18,340 --> 00:08:24,719
see that detail but in any case that

186
00:08:21,150 --> 00:08:28,539
each clusters could have one or more or

187
00:08:24,720 --> 00:08:29,919
better case is for more eg RS in each of

188
00:08:28,540 --> 00:08:34,210
the clusters then are there

189
00:08:29,919 --> 00:08:38,079
interconnected with the fab devices so

190
00:08:34,210 --> 00:08:40,390
zooming down to each of the clusters we

191
00:08:38,080 --> 00:08:42,520
are seeing that either they have a

192
00:08:40,390 --> 00:08:46,569
number of VCS the typical number of

193
00:08:42,520 --> 00:08:48,010
busiest in our environment are 4 and the

194
00:08:46,570 --> 00:08:50,410
tours each of the tours are

195
00:08:48,010 --> 00:08:53,950
interconnected with each of these

196
00:08:50,410 --> 00:08:56,140
species the number of the tours that are

197
00:08:53,950 --> 00:08:59,680
available that in each of the clusters

198
00:08:56,140 --> 00:09:02,170
varies and then the typical size is 512

199
00:08:59,680 --> 00:09:04,329
if you think about the origin for this

200
00:09:02,170 --> 00:09:06,550
design was kind of we used to build

201
00:09:04,330 --> 00:09:08,160
these for post networks made at a for

202
00:09:06,550 --> 00:09:09,479
really big

203
00:09:08,160 --> 00:09:12,300
biggest switches that you could buy in

204
00:09:09,480 --> 00:09:15,180
the market the design is kind of similar

205
00:09:12,300 --> 00:09:20,839
we just change what instead of one big

206
00:09:15,180 --> 00:09:20,839
massive piece of iron we replace it with

207
00:09:21,950 --> 00:09:30,060
right so and we can build our VC's as

208
00:09:26,580 --> 00:09:31,890
demand right so if we actually need a

209
00:09:30,060 --> 00:09:35,040
more oversubscription or less

210
00:09:31,890 --> 00:09:37,170
oversubscription we can build more BC to

211
00:09:35,040 --> 00:09:40,290
accommodate for that so this is just a

212
00:09:37,170 --> 00:09:44,520
typical setup that suit our application

213
00:09:40,290 --> 00:09:46,530
or traffic patterns better but to adapt

214
00:09:44,520 --> 00:09:51,380
you but it's very easy to adapt to other

215
00:09:46,530 --> 00:09:55,079
traffic patterns or profiles and on

216
00:09:51,380 --> 00:09:56,700
HBC's those are the things that you

217
00:09:55,080 --> 00:10:00,810
might have seen past but when more

218
00:09:56,700 --> 00:10:01,940
detail he was going to talk about so

219
00:10:00,810 --> 00:10:05,640
we've talked a little bit before about

220
00:10:01,940 --> 00:10:07,740
virtual chassis a few minutes ago there

221
00:10:05,640 --> 00:10:11,100
are two big reasons for why we chose a

222
00:10:07,740 --> 00:10:13,170
virtual chassis type of design the

223
00:10:11,100 --> 00:10:15,410
biggest one is if you look at the cost

224
00:10:13,170 --> 00:10:21,180
of a large-scale data center network

225
00:10:15,410 --> 00:10:22,530
back when we had 40 gig roughly 40% of

226
00:10:21,180 --> 00:10:25,109
the cost of the entire network was

227
00:10:22,530 --> 00:10:27,620
interconnect and now hundred gig world

228
00:10:25,110 --> 00:10:29,790
that's exceeding 60 Plus percent

229
00:10:27,620 --> 00:10:31,860
compared to the cost of the actual

230
00:10:29,790 --> 00:10:34,589
switches and chips

231
00:10:31,860 --> 00:10:36,540
so obviously the biggest bang for the

232
00:10:34,590 --> 00:10:38,610
buck is going to be actually to minimize

233
00:10:36,540 --> 00:10:40,319
the cost of that interconnect the way

234
00:10:38,610 --> 00:10:42,480
that you can minimize the cost of an

235
00:10:40,320 --> 00:10:45,360
interconnect is by bringing things

236
00:10:42,480 --> 00:10:49,980
really really close together so instead

237
00:10:45,360 --> 00:10:54,180
of using even SR optics you can use DAC

238
00:10:49,980 --> 00:10:56,130
that's 3 meter or 5 meter and a virtual

239
00:10:54,180 --> 00:10:59,359
chassis design lends itself really nice

240
00:10:56,130 --> 00:11:03,810
to this cable minimization

241
00:10:59,360 --> 00:11:05,460
another thing that we did is a virtual

242
00:11:03,810 --> 00:11:08,130
LAN card design works really well when

243
00:11:05,460 --> 00:11:10,310
you want to distribute kind of in pods

244
00:11:08,130 --> 00:11:12,960
so to say across the data center floor

245
00:11:10,310 --> 00:11:15,270
we were migrating from a previous design

246
00:11:12,960 --> 00:11:17,220
to a new design and when you do that we

247
00:11:15,270 --> 00:11:18,199
had positions available all over the

248
00:11:17,220 --> 00:11:20,780
data center across

249
00:11:18,200 --> 00:11:23,150
and now to three kilometers of data

250
00:11:20,780 --> 00:11:25,970
center floor and it made sense for us to

251
00:11:23,150 --> 00:11:28,459
centralize our VC's in order to be able

252
00:11:25,970 --> 00:11:32,330
to plug things in from anywhere in the

253
00:11:28,460 --> 00:11:35,060
data center now in order to minimize

254
00:11:32,330 --> 00:11:36,710
that cost we had to obviously optimize

255
00:11:35,060 --> 00:11:39,020
for distance and the way that we did it

256
00:11:36,710 --> 00:11:40,760
is that since the spines are what's in

257
00:11:39,020 --> 00:11:43,640
the middle and the lease connect to the

258
00:11:40,760 --> 00:11:45,860
spines we basically placed the spines in

259
00:11:43,640 --> 00:11:49,819
the middle and then we had a leaf left

260
00:11:45,860 --> 00:11:51,290
leaf right with the the ports that are

261
00:11:49,820 --> 00:11:52,760
closest to each other kind of what

262
00:11:51,290 --> 00:11:54,800
interconnects and the further side out

263
00:11:52,760 --> 00:11:59,150
is what goes out to the data center

264
00:11:54,800 --> 00:12:01,280
floor the top of racks now when we were

265
00:11:59,150 --> 00:12:03,560
putting this together in 2011 we

266
00:12:01,280 --> 00:12:04,520
obviously decided we needed a mock-up we

267
00:12:03,560 --> 00:12:05,869
needed to see what this is actually

268
00:12:04,520 --> 00:12:09,650
going to look like you see what we're

269
00:12:05,870 --> 00:12:11,240
gonna have to optimize this is a mock-up

270
00:12:09,650 --> 00:12:16,310
that was actually done by two of our

271
00:12:11,240 --> 00:12:19,310
best data center ops people and the

272
00:12:16,310 --> 00:12:20,599
mock-up served two purposes one is when

273
00:12:19,310 --> 00:12:21,949
you read to see what a miss water rate

274
00:12:20,600 --> 00:12:25,280
is going to be in a typical data center

275
00:12:21,950 --> 00:12:27,230
so our two most careful guys 2000 ports

276
00:12:25,280 --> 00:12:29,270
how many are gonna be messed up the

277
00:12:27,230 --> 00:12:31,730
answer was roughly five percent so

278
00:12:29,270 --> 00:12:33,380
clearly we needed something to make it

279
00:12:31,730 --> 00:12:35,750
harder to make mistakes to make it

280
00:12:33,380 --> 00:12:38,030
easier to do things correctly also the

281
00:12:35,750 --> 00:12:40,640
spoke quite loudly of the need to

282
00:12:38,030 --> 00:12:43,280
automation be written in order to verify

283
00:12:40,640 --> 00:12:45,140
the wiring another thing that we were

284
00:12:43,280 --> 00:12:49,310
joking that this is a shit-ton of cable

285
00:12:45,140 --> 00:12:53,900
we waited 1014 kilograms this is

286
00:12:49,310 --> 00:12:56,949
literally a metric ton of cable now we

287
00:12:53,900 --> 00:13:01,010
thousand cables here it's a lot of cable

288
00:12:56,950 --> 00:13:03,320
now needless to say we solve this what

289
00:13:01,010 --> 00:13:06,319
you're actually looking at is what's in

290
00:13:03,320 --> 00:13:09,020
production this is two separate VC's one

291
00:13:06,320 --> 00:13:11,960
is from cluster a one is from cluster B

292
00:13:09,020 --> 00:13:15,260
one on top of each other essentially as

293
00:13:11,960 --> 00:13:16,790
you can see we've spent quite a bit of

294
00:13:15,260 --> 00:13:19,040
time designing custom length cable

295
00:13:16,790 --> 00:13:21,410
bundles to make miss wiring incredibly

296
00:13:19,040 --> 00:13:22,969
hard because the cables are like

297
00:13:21,410 --> 00:13:25,699
actually designed with less than a

298
00:13:22,970 --> 00:13:27,380
two-and-a-half-inch tolerance so when we

299
00:13:25,700 --> 00:13:28,940
pull something out they almost stay

300
00:13:27,380 --> 00:13:31,250
right in place and it's really hard to

301
00:13:28,940 --> 00:13:31,970
miss wire also we're at your custom

302
00:13:31,250 --> 00:13:34,639
design the

303
00:13:31,970 --> 00:13:37,879
and cable management for both handling

304
00:13:34,639 --> 00:13:39,649
two tons of cable on each side and also

305
00:13:37,879 --> 00:13:40,699
making sure that this much cable when it

306
00:13:39,649 --> 00:13:44,599
lays in each other doesn't actually

307
00:13:40,699 --> 00:13:46,969
crush itself because that has actually

308
00:13:44,599 --> 00:13:53,299
could have happened and has happened

309
00:13:46,970 --> 00:13:55,279
when we didn't use these things now for

310
00:13:53,299 --> 00:13:57,529
the routing topology of how there's over

311
00:13:55,279 --> 00:14:00,259
to you are yeah

312
00:13:57,529 --> 00:14:02,839
so let's switch more to the details

313
00:14:00,259 --> 00:14:05,449
regarding to how we actually make the

314
00:14:02,839 --> 00:14:06,409
locking arrangement and the protocol to

315
00:14:05,449 --> 00:14:09,348
work

316
00:14:06,409 --> 00:14:13,129
so from this percept this is one of the

317
00:14:09,349 --> 00:14:15,769
clusters we have visas and of them are

318
00:14:13,129 --> 00:14:17,749
running on the same as number we are

319
00:14:15,769 --> 00:14:21,429
going to see the details inside the VC

320
00:14:17,749 --> 00:14:24,139
soon about the routing arrangement and

321
00:14:21,429 --> 00:14:26,598
each of the tours were actually run a

322
00:14:24,139 --> 00:14:30,889
different AAS number from each other and

323
00:14:26,599 --> 00:14:32,479
from the VCS as well so the tour each of

324
00:14:30,889 --> 00:14:35,899
the tours actually runs to each bgp

325
00:14:32,479 --> 00:14:39,619
peers to a single leaf on each one of

326
00:14:35,899 --> 00:14:41,869
these virtual chasis and they also have

327
00:14:39,619 --> 00:14:43,939
the networking statement for the

328
00:14:41,869 --> 00:14:46,459
loopback addresses all the hosts on that

329
00:14:43,939 --> 00:14:52,699
and they are advertising to each of

330
00:14:46,459 --> 00:14:55,008
these species here's the Loom in of each

331
00:14:52,699 --> 00:14:58,098
of the VCS that I previously mentioned

332
00:14:55,009 --> 00:15:01,369
that only has one a assembler because

333
00:14:58,099 --> 00:15:05,479
then we run eyes BTS internally in each

334
00:15:01,369 --> 00:15:08,319
of these species spine in these cases

335
00:15:05,479 --> 00:15:10,699
are rubbery fractures for the beef and

336
00:15:08,319 --> 00:15:13,069
spine if I treat sessions are

337
00:15:10,699 --> 00:15:15,498
point-to-point so therefore that we are

338
00:15:13,069 --> 00:15:18,649
using actually update source in with

339
00:15:15,499 --> 00:15:20,119
local interfaces spine also have the net

340
00:15:18,649 --> 00:15:23,749
worth statement for all the spine leaf

341
00:15:20,119 --> 00:15:26,359
interfaces and we aggregate together on

342
00:15:23,749 --> 00:15:27,529
the other hand the leaf also has been a

343
00:15:26,359 --> 00:15:30,649
burst even for the leaf tour

344
00:15:27,529 --> 00:15:34,639
interconnects so we also aggregate that

345
00:15:30,649 --> 00:15:38,299
part the leaves uses neck hop cell for

346
00:15:34,639 --> 00:15:39,919
the spine if I three sessions and all

347
00:15:38,299 --> 00:15:41,629
the Leachman that half the dresses are

348
00:15:39,919 --> 00:15:44,749
learned from BGP and there's no edge

349
00:15:41,629 --> 00:15:45,800
between the VC and all the virtual

350
00:15:44,749 --> 00:15:49,279
classes are using the

351
00:15:45,800 --> 00:15:51,140
and so VC 1 B 2 B 3 and B 4 are always

352
00:15:49,279 --> 00:15:52,730
using the same you know there's a couple

353
00:15:51,140 --> 00:15:56,510
of reasons for why we decided to do this

354
00:15:52,730 --> 00:15:58,790
one is we wanted to eliminate an IP from

355
00:15:56,510 --> 00:16:02,230
this design because otherwise if you

356
00:15:58,790 --> 00:16:04,279
have an IG pni BGP you could have

357
00:16:02,230 --> 00:16:05,660
oscillations and micro black holes from

358
00:16:04,279 --> 00:16:08,420
the two particles converging together

359
00:16:05,660 --> 00:16:11,329
not at the same time also the reason for

360
00:16:08,420 --> 00:16:14,240
why we chose to use the same ASN is is

361
00:16:11,329 --> 00:16:16,819
that we actually didn't want for traffic

362
00:16:14,240 --> 00:16:20,570
to go through another tour and bounce

363
00:16:16,820 --> 00:16:23,120
around so this way we use bgp zone AAS

364
00:16:20,570 --> 00:16:26,810
flu prevention mechanisms to stop that

365
00:16:23,120 --> 00:16:29,029
propagation and a third reason is we

366
00:16:26,810 --> 00:16:31,250
wanted to hide the old state of what

367
00:16:29,029 --> 00:16:33,019
happens inside a VC from anything

368
00:16:31,250 --> 00:16:35,149
outside of it there's no point to

369
00:16:33,019 --> 00:16:36,860
anybody knowing about it because there's

370
00:16:35,149 --> 00:16:38,990
a remesh component outside of it that

371
00:16:36,860 --> 00:16:40,220
we'll talk about in a second but it

372
00:16:38,990 --> 00:16:42,800
essentially hides a lot of the

373
00:16:40,220 --> 00:16:45,079
complexity of all that cable mess and

374
00:16:42,800 --> 00:16:47,540
all the bounces that might occur if

375
00:16:45,079 --> 00:16:49,160
somebody if a device goes down or if

376
00:16:47,540 --> 00:16:51,439
somebody accidentally sticks their hand

377
00:16:49,160 --> 00:16:53,990
in and gets the cable loose it will hide

378
00:16:51,440 --> 00:16:55,760
it from all other planes and that was an

379
00:16:53,990 --> 00:16:58,310
important component your design yeah so

380
00:16:55,760 --> 00:16:59,720
to that point interconnect between the

381
00:16:58,310 --> 00:17:01,819
spinal leaf so there are copper

382
00:16:59,720 --> 00:17:03,649
sometimes they are branded and sometimes

383
00:17:01,820 --> 00:17:05,569
with the temperature changes they

384
00:17:03,649 --> 00:17:08,059
actually could actually disconnect and

385
00:17:05,569 --> 00:17:10,069
the way that we actually aggregate them

386
00:17:08,059 --> 00:17:13,010
and only advising that the aggregates

387
00:17:10,069 --> 00:17:18,980
make the height based all those details

388
00:17:13,010 --> 00:17:21,980
and allow lot insurance so ok so here we

389
00:17:18,980 --> 00:17:24,709
were talking about the egress how

390
00:17:21,980 --> 00:17:26,990
because we just talked about PCs and a

391
00:17:24,709 --> 00:17:30,860
tours and how do we get stuff out from

392
00:17:26,990 --> 00:17:33,500
from there right so we use this devices

393
00:17:30,860 --> 00:17:35,959
cord we call eg ours is egress router is

394
00:17:33,500 --> 00:17:39,490
actually the same classes of devices as

395
00:17:35,960 --> 00:17:42,890
the Spinelli and however the EGR

396
00:17:39,490 --> 00:17:45,110
topological wises are like tours they

397
00:17:42,890 --> 00:17:47,780
connect to each of the species and using

398
00:17:45,110 --> 00:17:49,550
a distinct AAS number and they are

399
00:17:47,780 --> 00:17:51,379
distinct among themselves and also

400
00:17:49,550 --> 00:17:53,780
distinct from any other tours within the

401
00:17:51,380 --> 00:17:56,450
same cluster so these each ours are

402
00:17:53,780 --> 00:17:58,800
special each eg ours to connect to

403
00:17:56,450 --> 00:18:01,320
multiple lives in a single busy

404
00:17:58,800 --> 00:18:04,950
and they also aggregate the entire

405
00:18:01,320 --> 00:18:06,629
subnets of the the clusters and that's a

406
00:18:04,950 --> 00:18:09,180
variation in a traditional claw

407
00:18:06,630 --> 00:18:11,850
architecture that typically you don't

408
00:18:09,180 --> 00:18:13,350
actually do path hiding inside a clue

409
00:18:11,850 --> 00:18:16,110
because you don't

410
00:18:13,350 --> 00:18:19,439
Ramesh quite this early but by

411
00:18:16,110 --> 00:18:21,810
introducing earlier layer of a remesh we

412
00:18:19,440 --> 00:18:24,540
could actually hide all complexity of

413
00:18:21,810 --> 00:18:27,030
the entire cluster not just the VC but

414
00:18:24,540 --> 00:18:29,330
the whole cluster of 20,000 potential

415
00:18:27,030 --> 00:18:31,470
servers away from anything else that

416
00:18:29,330 --> 00:18:34,949
anything that happens inside protocol

417
00:18:31,470 --> 00:18:36,390
stack like any port bounces and whatnot

418
00:18:34,950 --> 00:18:38,760
completely hidden from the rest of the

419
00:18:36,390 --> 00:18:41,850
data center that's very important and

420
00:18:38,760 --> 00:18:43,350
because not only just one cluster we are

421
00:18:41,850 --> 00:18:46,620
looking at here we are also looking at

422
00:18:43,350 --> 00:18:48,419
multiple clusters so being able to hide

423
00:18:46,620 --> 00:18:51,030
the details of each cast is very

424
00:18:48,420 --> 00:18:53,880
important to the entire data center so

425
00:18:51,030 --> 00:18:56,790
here that we introduce a fab layer as

426
00:18:53,880 --> 00:18:59,430
you see from before to interconnect the

427
00:18:56,790 --> 00:19:03,090
CTS with other ages in the other

428
00:18:59,430 --> 00:19:05,370
clusters so here that we can connect

429
00:19:03,090 --> 00:19:05,820
multiple ones here we just depicted two

430
00:19:05,370 --> 00:19:09,540
of them

431
00:19:05,820 --> 00:19:13,290
so this eg Arsene runs EG p eb p to the

432
00:19:09,540 --> 00:19:15,600
fab lives above and from there on the

433
00:19:13,290 --> 00:19:18,420
fab devices we actually use remove

434
00:19:15,600 --> 00:19:23,010
private so that multiple clusters eg

435
00:19:18,420 --> 00:19:25,470
ours can use the same SN number so they

436
00:19:23,010 --> 00:19:28,350
redistribute this aggregated route from

437
00:19:25,470 --> 00:19:32,310
each of these clusters to like internal

438
00:19:28,350 --> 00:19:35,159
GPS in our case or SPF to the DCT Balaji

439
00:19:32,310 --> 00:19:37,530
now remember how I talked before that

440
00:19:35,160 --> 00:19:39,450
the difference between a virtual chassis

441
00:19:37,530 --> 00:19:41,899
type of topology and a virtual line

442
00:19:39,450 --> 00:19:44,580
quarterback apology is whether you allow

443
00:19:41,900 --> 00:19:49,050
connectivity from effectively the middle

444
00:19:44,580 --> 00:19:51,899
stage so inside our clusters we use a

445
00:19:49,050 --> 00:19:54,000
virtual chassis topology but you connect

446
00:19:51,900 --> 00:19:55,800
multiple virtual clusters together and

447
00:19:54,000 --> 00:19:57,900
to allow for uplink we actually use a

448
00:19:55,800 --> 00:19:59,780
virtual LAN card model where we have

449
00:19:57,900 --> 00:20:02,220
multiple planes of virtual LAN cards and

450
00:19:59,780 --> 00:20:04,530
that's what actually interconnects our

451
00:20:02,220 --> 00:20:06,030
clusters together yeah so this is

452
00:20:04,530 --> 00:20:08,460
basically a virtual lanka

453
00:20:06,030 --> 00:20:10,460
on top of a tree chest and have a tool

454
00:20:08,460 --> 00:20:14,370
budget assets oh yeah

455
00:20:10,460 --> 00:20:16,440
now people talk about in cast a buffer

456
00:20:14,370 --> 00:20:17,969
pressure and people say in cast is not a

457
00:20:16,440 --> 00:20:20,430
thing buffering is not a thing in the

458
00:20:17,970 --> 00:20:21,660
data center it actually is a thing and

459
00:20:20,430 --> 00:20:25,170
you have to be really careful with how

460
00:20:21,660 --> 00:20:26,370
you design for it now when you have even

461
00:20:25,170 --> 00:20:28,500
when you have completely non

462
00:20:26,370 --> 00:20:32,370
oversubscribed network as the case in at

463
00:20:28,500 --> 00:20:34,050
the spine in our virtual chassis is

464
00:20:32,370 --> 00:20:36,449
completely one-to-one in fact some of

465
00:20:34,050 --> 00:20:37,139
our designs even offer speed up through

466
00:20:36,450 --> 00:20:40,140
the fabric

467
00:20:37,140 --> 00:20:42,180
we still have buffer pressure and but

468
00:20:40,140 --> 00:20:44,970
that buffer pressure at riding to class

469
00:20:42,180 --> 00:20:47,820
device or above can more than handle it

470
00:20:44,970 --> 00:20:49,710
now at the leaf layer is where we

471
00:20:47,820 --> 00:20:51,389
actually do all of our subscription

472
00:20:49,710 --> 00:20:53,790
that's the torch of the leaf layer and

473
00:20:51,390 --> 00:20:55,200
at the leaf we see a lot of buffer

474
00:20:53,790 --> 00:20:56,879
pressure but it's though within reason

475
00:20:55,200 --> 00:20:58,620
for what a torrent you can do but you

476
00:20:56,880 --> 00:21:01,410
have to be really careful with what you

477
00:20:58,620 --> 00:21:02,939
do there the next layer where we see

478
00:21:01,410 --> 00:21:05,430
buffer pressures actually at our tours

479
00:21:02,940 --> 00:21:08,130
tours are actually interesting because

480
00:21:05,430 --> 00:21:09,870
not only do is that where you do over

481
00:21:08,130 --> 00:21:12,120
subscription it's also when you do a

482
00:21:09,870 --> 00:21:14,280
speed change and anytime you do a speed

483
00:21:12,120 --> 00:21:17,070
change of hundred gig going down to 25

484
00:21:14,280 --> 00:21:18,690
gig you're effectively going to be

485
00:21:17,070 --> 00:21:20,460
draining at a slower rate that you're

486
00:21:18,690 --> 00:21:22,710
inputting and you have to make sure that

487
00:21:20,460 --> 00:21:25,740
you design properly to handle the

488
00:21:22,710 --> 00:21:30,380
buffers over there and this is actual

489
00:21:25,740 --> 00:21:33,090
graphs that we do in real time because

490
00:21:30,380 --> 00:21:34,980
different we'll talk about it in a

491
00:21:33,090 --> 00:21:36,870
couple of slides yeah so we basically

492
00:21:34,980 --> 00:21:38,550
have to continuously collect these

493
00:21:36,870 --> 00:21:41,669
metrics and then to our central

494
00:21:38,550 --> 00:21:44,070
intelligence in order to do any of the

495
00:21:41,670 --> 00:21:46,130
changes that we are going to do we are

496
00:21:44,070 --> 00:21:49,649
going to say in the next few slides

497
00:21:46,130 --> 00:21:51,240
scale scaling so the way you scale this

498
00:21:49,650 --> 00:21:54,030
architecture like I was mentioning

499
00:21:51,240 --> 00:21:58,110
before if you want to change the over

500
00:21:54,030 --> 00:22:00,720
subscription you basically you change

501
00:21:58,110 --> 00:22:02,399
different things inside of a VC we can

502
00:22:00,720 --> 00:22:04,950
change the number of basically each

503
00:22:02,400 --> 00:22:06,810
position as McCallum by controlling the

504
00:22:04,950 --> 00:22:09,510
radix of the spine and the radix of the

505
00:22:06,810 --> 00:22:11,000
leaf where radix is the port count and

506
00:22:09,510 --> 00:22:13,500
it follows a realist simple formula of

507
00:22:11,000 --> 00:22:15,780
radix to spine times radix of Li divided

508
00:22:13,500 --> 00:22:18,240
by two that is how many positions you

509
00:22:15,780 --> 00:22:21,149
can create so if you're using a trying

510
00:22:18,240 --> 00:22:23,550
to class device both answers are 32 so

511
00:22:21,150 --> 00:22:26,490
32 times 32 you get 512

512
00:22:23,550 --> 00:22:29,580
you can use a barefoot classic device

513
00:22:26,490 --> 00:22:31,650
for spine which is 64 ports the end user

514
00:22:29,580 --> 00:22:36,720
trying to class the device for the leaf

515
00:22:31,650 --> 00:22:38,870
64 times 30 mm 24 you can use to

516
00:22:36,720 --> 00:22:41,930
tomahawk class devices to get up to

517
00:22:38,870 --> 00:22:45,840
8,192 positions which can scale up to

518
00:22:41,930 --> 00:22:47,370
320,000 nodes it's up to you how big you

519
00:22:45,840 --> 00:22:49,980
want to make a blaster main it's up to

520
00:22:47,370 --> 00:22:51,750
you to figure out what portion of those

521
00:22:49,980 --> 00:22:54,240
edge positions you want to dedicate to

522
00:22:51,750 --> 00:22:55,740
uplink set of a cluster as opposed to

523
00:22:54,240 --> 00:22:58,680
down links because that's where you can

524
00:22:55,740 --> 00:23:00,450
kind of control oversubscription at the

525
00:22:58,680 --> 00:23:01,170
Tor layer the oversubscription ratio is

526
00:23:00,450 --> 00:23:02,670
really easy

527
00:23:01,170 --> 00:23:06,300
it's just dictated by the number of

528
00:23:02,670 --> 00:23:09,510
visas you build if you're using again

529
00:23:06,300 --> 00:23:11,520
try and choose you build 12 V sees your

530
00:23:09,510 --> 00:23:13,980
site 5 + 3 is you put probably sees you

531
00:23:11,520 --> 00:23:16,710
one to one you build four of them you're

532
00:23:13,980 --> 00:23:18,210
23 and you can always add more VCS as

533
00:23:16,710 --> 00:23:22,350
long as you have enough uplink ports

534
00:23:18,210 --> 00:23:24,120
available on the top of racks now to

535
00:23:22,350 --> 00:23:26,250
connect multiple clusters in the intra

536
00:23:24,120 --> 00:23:28,919
cluster of a subscription ratio you

537
00:23:26,250 --> 00:23:32,370
basically can control it by how many

538
00:23:28,920 --> 00:23:33,750
fabs have wide and also how many planes

539
00:23:32,370 --> 00:23:36,689
are fast because you can add additional

540
00:23:33,750 --> 00:23:39,540
capacity by either horizontal scaling

541
00:23:36,690 --> 00:23:41,190
you add additional eg RS or you add

542
00:23:39,540 --> 00:23:43,440
additional fabs or you add additional eg

543
00:23:41,190 --> 00:23:45,510
RS and additional fabs you can add them

544
00:23:43,440 --> 00:23:47,610
as multiple planes you can even decide

545
00:23:45,510 --> 00:23:49,560
that some point is that dedicated for

546
00:23:47,610 --> 00:23:51,240
inter cluster connectivity and other

547
00:23:49,560 --> 00:23:55,500
planes are dedicated for connectivity

548
00:23:51,240 --> 00:23:58,830
outside the clusters so completely up to

549
00:23:55,500 --> 00:24:00,990
you and also just like everything in

550
00:23:58,830 --> 00:24:03,540
close completely recursive you can even

551
00:24:00,990 --> 00:24:06,660
make a fab into a VC and being with your

552
00:24:03,540 --> 00:24:08,909
scale to hundreds or thousands of

553
00:24:06,660 --> 00:24:10,860
different clusters in a given topology

554
00:24:08,910 --> 00:24:13,980
yeah so you can though we can almost

555
00:24:10,860 --> 00:24:17,310
scale this in a 3d fashion horizontal

556
00:24:13,980 --> 00:24:19,830
vertical and depth exactly and that's an

557
00:24:17,310 --> 00:24:21,510
important design and what's more is you

558
00:24:19,830 --> 00:24:25,790
want to be able to scale it over time

559
00:24:21,510 --> 00:24:25,790
different ways yes

560
00:24:26,400 --> 00:24:31,500
Automation obviously we have been

561
00:24:28,740 --> 00:24:33,140
talking about the scaling and obviously

562
00:24:31,500 --> 00:24:37,080
we haven't seen the pictures of

563
00:24:33,140 --> 00:24:39,990
thousands of links or you know tens of

564
00:24:37,080 --> 00:24:41,790
hundred thousands of devices so this is

565
00:24:39,990 --> 00:24:44,190
a lot of complexity that we have to

566
00:24:41,790 --> 00:24:47,159
manage so we have to turn into

567
00:24:44,190 --> 00:24:49,670
automation in order to manage all these

568
00:24:47,160 --> 00:24:54,120
links all these scales all these devices

569
00:24:49,670 --> 00:24:57,570
so just it's not only the number of

570
00:24:54,120 --> 00:24:59,459
devices or links but also the the

571
00:24:57,570 --> 00:25:02,309
changes that actually has to happen

572
00:24:59,460 --> 00:25:04,200
within these clusters because this is

573
00:25:02,309 --> 00:25:05,700
the dynamic environment somebody may

574
00:25:04,200 --> 00:25:08,820
actually submit the request and

575
00:25:05,700 --> 00:25:10,650
something has to change and when you

576
00:25:08,820 --> 00:25:12,720
have really large network and these

577
00:25:10,650 --> 00:25:15,600
requests that come say really

578
00:25:12,720 --> 00:25:18,990
dynamically so all of these things

579
00:25:15,600 --> 00:25:21,870
actually has to manage by automation and

580
00:25:18,990 --> 00:25:26,340
we basically treated the network as the

581
00:25:21,870 --> 00:25:28,709
CIC the principles and we the devices

582
00:25:26,340 --> 00:25:31,350
and topology and configuration we model

583
00:25:28,710 --> 00:25:35,070
them and abstract them by template and

584
00:25:31,350 --> 00:25:38,490
database we integrate the inventory

585
00:25:35,070 --> 00:25:39,990
management systems DNS and with the

586
00:25:38,490 --> 00:25:41,720
zero-touch provisioning they are

587
00:25:39,990 --> 00:25:45,750
basically Boost track to automatically

588
00:25:41,720 --> 00:25:49,500
we also separate the config intent and

589
00:25:45,750 --> 00:25:52,080
the config state so that it basically we

590
00:25:49,500 --> 00:25:54,240
have build a complete control loop by

591
00:25:52,080 --> 00:25:59,189
the state machines so there is actually

592
00:25:54,240 --> 00:26:01,230
a talk that we did in non lock 68 so if

593
00:25:59,190 --> 00:26:03,780
you guys want to see the details it's on

594
00:26:01,230 --> 00:26:06,059
a web and to zoom in a little more and

595
00:26:03,780 --> 00:26:09,178
then see ICD principles there was just a

596
00:26:06,059 --> 00:26:15,059
talk on CRC D on the network we take it

597
00:26:09,179 --> 00:26:16,710
to two very we take C ICD in this kind

598
00:26:15,059 --> 00:26:18,330
of Polish is very seriously in fact

599
00:26:16,710 --> 00:26:20,370
anytime we're bringing up a top of rack

600
00:26:18,330 --> 00:26:22,080
that goes through a hundred sixty five

601
00:26:20,370 --> 00:26:24,360
states in order to actually before

602
00:26:22,080 --> 00:26:28,860
passes traffic and when automation those

603
00:26:24,360 --> 00:26:31,409
165 states take tens of seconds but the

604
00:26:28,860 --> 00:26:34,500
basic principle is that for each link we

605
00:26:31,410 --> 00:26:37,320
will turn it up no IP addresses LDP

606
00:26:34,500 --> 00:26:39,779
verify only after that we will actually

607
00:26:37,320 --> 00:26:41,820
put IP addresses perform thing checks

608
00:26:39,779 --> 00:26:44,849
only after that if it passes cleanly

609
00:26:41,820 --> 00:26:46,158
we'll put bgp protocols up no routes

610
00:26:44,849 --> 00:26:48,928
exchanged make sure that actually

611
00:26:46,159 --> 00:26:51,179
sessions are established and then one

612
00:26:48,929 --> 00:26:53,849
plane at a time we will turn up the

613
00:26:51,179 --> 00:26:55,289
route you know switch route maps whatnot

614
00:26:53,849 --> 00:26:56,759
in order to make sure there's proper

615
00:26:55,289 --> 00:26:59,279
route propagation that it doesn't

616
00:26:56,759 --> 00:27:02,219
actually take out a VC because we've

617
00:26:59,279 --> 00:27:05,759
just somehow added too many routes and

618
00:27:02,219 --> 00:27:07,619
now a poor old you know Trident plus

619
00:27:05,759 --> 00:27:08,940
class device they can only handle four

620
00:27:07,619 --> 00:27:11,099
to eight thousand routes that and just

621
00:27:08,940 --> 00:27:14,099
blow up that would go through that one

622
00:27:11,099 --> 00:27:16,799
plane at a time every state transition

623
00:27:14,099 --> 00:27:18,718
there is a set of scripts that verify

624
00:27:16,799 --> 00:27:20,580
and make sure that the network is still

625
00:27:18,719 --> 00:27:22,289
healthy everything is still good it's

626
00:27:20,580 --> 00:27:23,899
doing as intended before we move on if

627
00:27:22,289 --> 00:27:27,408
you don't do that

628
00:27:23,899 --> 00:27:30,899
running in network of the scale is

629
00:27:27,409 --> 00:27:33,330
difficult to put it mildly right we also

630
00:27:30,899 --> 00:27:35,089
can do the candor astray so the the

631
00:27:33,330 --> 00:27:37,739
automation also control the canneries

632
00:27:35,089 --> 00:27:39,960
because if there's something that has to

633
00:27:37,739 --> 00:27:43,080
be propagating in the network in a

634
00:27:39,960 --> 00:27:45,749
large-scale fashion the elevation was is

635
00:27:43,080 --> 00:27:47,879
able to actually just localize it and

636
00:27:45,749 --> 00:27:50,099
then do the kenri first and only after

637
00:27:47,879 --> 00:27:52,168
the verification is successful then move

638
00:27:50,099 --> 00:27:55,619
to the next session of portion of the

639
00:27:52,169 --> 00:27:57,599
network so those things is what we built

640
00:27:55,619 --> 00:28:01,769
into the automation in order to commonly

641
00:27:57,599 --> 00:28:04,019
release the changes into the network so

642
00:28:01,769 --> 00:28:05,399
operation experience we've learned from

643
00:28:04,019 --> 00:28:08,609
this and springing this for the last

644
00:28:05,399 --> 00:28:10,468
well for six years this is a very stable

645
00:28:08,609 --> 00:28:12,899
protocol stack because we've built in

646
00:28:10,469 --> 00:28:16,289
all sorts of aggregation it's been

647
00:28:12,899 --> 00:28:18,059
incredibly stable in fact in 2012 the

648
00:28:16,289 --> 00:28:21,029
network used to converging about 250

649
00:28:18,059 --> 00:28:24,178
milliseconds end-to-end in 2018 that

650
00:28:21,029 --> 00:28:26,460
dropped down to 125 milliseconds that's

651
00:28:24,179 --> 00:28:29,399
pretty impressive we think with running

652
00:28:26,460 --> 00:28:32,700
so many stages of a clone something else

653
00:28:29,399 --> 00:28:34,109
even in 2018 they're still PGP stacks

654
00:28:32,700 --> 00:28:38,609
out there that will cause of micro black

655
00:28:34,109 --> 00:28:40,739
hole it is sad state of affairs what we

656
00:28:38,609 --> 00:28:44,099
mean by that is that an edge ribbon

657
00:28:40,739 --> 00:28:48,389
update comes in BGP process processes it

658
00:28:44,099 --> 00:28:50,158
and then sends out a rib an edge rib out

659
00:28:48,389 --> 00:28:51,689
before it actually installs it and

660
00:28:50,159 --> 00:28:53,850
confirms that it's installed it into the

661
00:28:51,690 --> 00:28:56,220
fab which essentially means hi

662
00:28:53,850 --> 00:28:57,480
come for me and when I get the packet

663
00:28:56,220 --> 00:28:58,290
well I have no idea what you deal with

664
00:28:57,480 --> 00:29:01,080
that throw it away

665
00:28:58,290 --> 00:29:04,649
it is really sad that that's still the

666
00:29:01,080 --> 00:29:06,240
case in 2018 also we've had a

667
00:29:04,650 --> 00:29:07,980
significantly lower hardware failure

668
00:29:06,240 --> 00:29:09,300
rate than we expected when we were first

669
00:29:07,980 --> 00:29:10,020
deploying this we were kind of going

670
00:29:09,300 --> 00:29:13,320
okay

671
00:29:10,020 --> 00:29:16,139
cheapo five-ish thousand dollar class

672
00:29:13,320 --> 00:29:18,510
devices compared to a half a million

673
00:29:16,140 --> 00:29:21,270
dollar chassis these can't pass I'll be

674
00:29:18,510 --> 00:29:22,740
as reliable as the chassis we actually

675
00:29:21,270 --> 00:29:25,560
learn it's the exact opposite

676
00:29:22,740 --> 00:29:27,810
these devices are simple these devices

677
00:29:25,560 --> 00:29:30,330
also each have their own redundant power

678
00:29:27,810 --> 00:29:36,149
redundant fan they actually have better

679
00:29:30,330 --> 00:29:37,679
cooling propagation like they cool

680
00:29:36,150 --> 00:29:40,020
things better so they didn't overheat as

681
00:29:37,680 --> 00:29:42,210
much as a large chassis so the hardware

682
00:29:40,020 --> 00:29:44,460
failure rate has actually been fivefold

683
00:29:42,210 --> 00:29:46,530
less than what it was with large-scale

684
00:29:44,460 --> 00:29:49,470
chassis we've been actually really

685
00:29:46,530 --> 00:29:51,360
surprised by that also it's been very

686
00:29:49,470 --> 00:29:53,850
easy to install and continuously manage

687
00:29:51,360 --> 00:29:56,909
and grow them bigger and bigger in fact

688
00:29:53,850 --> 00:29:59,760
as the network scale by I think factor

689
00:29:56,910 --> 00:30:01,410
of four since we rolled this out the

690
00:29:59,760 --> 00:30:04,230
team that reigns this scale down by a

691
00:30:01,410 --> 00:30:07,080
factor of five it's amazing what happens

692
00:30:04,230 --> 00:30:08,670
when you have really good automation now

693
00:30:07,080 --> 00:30:12,090
the skillset of a team definitely

694
00:30:08,670 --> 00:30:15,240
leveled up yeah and then to add to that

695
00:30:12,090 --> 00:30:17,490
actually so for each of these how where

696
00:30:15,240 --> 00:30:20,160
failures it actually affects smaller

697
00:30:17,490 --> 00:30:22,590
number of devices effective so when we

698
00:30:20,160 --> 00:30:24,960
change them is actually affecting you

699
00:30:22,590 --> 00:30:27,419
know pretty much the failures isolated

700
00:30:24,960 --> 00:30:29,010
in certain regions or certain very

701
00:30:27,420 --> 00:30:30,390
limited amount of servers that we see

702
00:30:29,010 --> 00:30:32,760
the same and we can also troubleshoot

703
00:30:30,390 --> 00:30:34,380
them much better because in a large

704
00:30:32,760 --> 00:30:36,360
chassis when you have lost through the

705
00:30:34,380 --> 00:30:38,820
fabric it's really really hard to

706
00:30:36,360 --> 00:30:41,070
troubleshoot it as an operator but when

707
00:30:38,820 --> 00:30:43,020
the fabric is another component and you

708
00:30:41,070 --> 00:30:45,600
have paint available to you or even

709
00:30:43,020 --> 00:30:47,850
things better you can actually deploy

710
00:30:45,600 --> 00:30:49,530
code that will do continues testing and

711
00:30:47,850 --> 00:30:51,330
will inform you that there is a problem

712
00:30:49,530 --> 00:30:53,430
go fix it and or potentially

713
00:30:51,330 --> 00:30:55,649
automatically shut down the problem

714
00:30:53,430 --> 00:30:57,510
because I have two thousand pathways

715
00:30:55,650 --> 00:31:01,680
it's not a problem with we shut down one

716
00:30:57,510 --> 00:31:03,180
of them also we've experimented quite a

717
00:31:01,680 --> 00:31:04,800
bit with our oversubscription ratios

718
00:31:03,180 --> 00:31:07,140
through the years when we first rolled

719
00:31:04,800 --> 00:31:07,530
these out we did a mess to point five to

720
00:31:07,140 --> 00:31:11,300
one

721
00:31:07,530 --> 00:31:13,830
the top of rack up then we did 32 to 1 4

722
00:31:11,300 --> 00:31:15,419
out of the cluster in between clusters

723
00:31:13,830 --> 00:31:18,240
because we thought that we weren't going

724
00:31:15,420 --> 00:31:20,040
to have like when you have groups of 20

725
00:31:18,240 --> 00:31:21,330
thousand servers and we have you know

726
00:31:20,040 --> 00:31:23,010
several hundred thousand servers in the

727
00:31:21,330 --> 00:31:25,740
given data center the cross

728
00:31:23,010 --> 00:31:28,080
communication while statistically is

729
00:31:25,740 --> 00:31:29,760
very likely to occur is not going to be

730
00:31:28,080 --> 00:31:32,730
a reality so we started with thirty to

731
00:31:29,760 --> 00:31:34,830
one there since then we've gone from 2.5

732
00:31:32,730 --> 00:31:36,990
to on top of rack to five two on top of

733
00:31:34,830 --> 00:31:39,240
rack and now back to 2.5 to one top of

734
00:31:36,990 --> 00:31:42,060
rack just that's where our traffic

735
00:31:39,240 --> 00:31:43,380
profiles dictate and we've been it's

736
00:31:42,060 --> 00:31:47,040
fairly easy for us to change with

737
00:31:43,380 --> 00:31:50,580
oversubscription ratio there is for the

738
00:31:47,040 --> 00:31:51,360
cross cluster we've only been going in

739
00:31:50,580 --> 00:31:54,960
one direction

740
00:31:51,360 --> 00:31:58,469
we've gone from 32 to 1 to 16 to 1 to 81

741
00:31:54,960 --> 00:32:00,630
to 41 and now we're moving you into a

742
00:31:58,470 --> 00:32:04,920
different topology that will not be over

743
00:32:00,630 --> 00:32:06,270
subscribing them at all just this has

744
00:32:04,920 --> 00:32:08,100
been what's been the case through the

745
00:32:06,270 --> 00:32:10,590
years we essentially thought we're gonna

746
00:32:08,100 --> 00:32:12,419
have to build them remove that

747
00:32:10,590 --> 00:32:14,220
oversubscription much faster because

748
00:32:12,420 --> 00:32:16,200
we're expected and they me of a fabrics

749
00:32:14,220 --> 00:32:18,060
to become a reality much sooner it

750
00:32:16,200 --> 00:32:20,940
hadn't but finally it looks like it

751
00:32:18,060 --> 00:32:22,620
might so there's actually a good use

752
00:32:20,940 --> 00:32:25,250
case I'm sure that will change to

753
00:32:22,620 --> 00:32:27,979
perform an event too right yeah

754
00:32:25,250 --> 00:32:31,910
also buffer management techniques

755
00:32:27,980 --> 00:32:35,220
there's a this concept of an alpha value

756
00:32:31,910 --> 00:32:38,670
for managing buffers and it basically

757
00:32:35,220 --> 00:32:40,440
says in a shared buffer architecture

758
00:32:38,670 --> 00:32:42,450
where is the proportion of the total

759
00:32:40,440 --> 00:32:46,320
buffer that I will allow to a single

760
00:32:42,450 --> 00:32:48,330
port bursting what we found is that the

761
00:32:46,320 --> 00:32:51,960
best value in our network at least has

762
00:32:48,330 --> 00:32:53,669
been alpha 8 basically 8/9 of a gate of

763
00:32:51,960 --> 00:32:55,920
a buffer could be allocated to any given

764
00:32:53,670 --> 00:32:58,740
port in order to absorb the microburst

765
00:32:55,920 --> 00:33:00,510
now we've learned that that's not always

766
00:32:58,740 --> 00:33:02,340
the case and there are some applications

767
00:33:00,510 --> 00:33:04,140
that really don't like alpha 8 that want

768
00:33:02,340 --> 00:33:06,209
something different and in our cases

769
00:33:04,140 --> 00:33:10,140
it's either the application like alpha 8

770
00:33:06,210 --> 00:33:12,810
or officail and we can actually detect

771
00:33:10,140 --> 00:33:15,000
when that happens because when you're

772
00:33:12,810 --> 00:33:16,980
running out for 8 and even though there

773
00:33:15,000 --> 00:33:19,440
is buffer pressure we very very very

774
00:33:16,980 --> 00:33:20,820
rarely see buffer drops but when we do

775
00:33:19,440 --> 00:33:22,470
see buffer drops we've

776
00:33:20,820 --> 00:33:24,600
actually learned that if you switch from

777
00:33:22,470 --> 00:33:27,870
alpha eight to offer two but four drops

778
00:33:24,600 --> 00:33:29,699
go away and there's a lot more fairness

779
00:33:27,870 --> 00:33:31,139
so we've actually build automation that

780
00:33:29,700 --> 00:33:32,760
will detect when these conditions occur

781
00:33:31,140 --> 00:33:36,090
and that's what we actually monitor

782
00:33:32,760 --> 00:33:39,260
buffer pressure as we do and be able to

783
00:33:36,090 --> 00:33:43,459
switch between the cases one as needed

784
00:33:39,260 --> 00:33:49,679
perfect I guess that's kind of it so

785
00:33:43,460 --> 00:33:51,570
questions comments hackles and I guess

786
00:33:49,679 --> 00:33:54,630
in closing this stuff was actually

787
00:33:51,570 --> 00:33:55,950
fairly simple and the reason why we have

788
00:33:54,630 --> 00:33:58,140
given this presentation with this much

789
00:33:55,950 --> 00:34:01,590
detail of configs is to make sure people

790
00:33:58,140 --> 00:34:03,299
understand this is simple there's been

791
00:34:01,590 --> 00:34:04,709
people talking about needing to invent

792
00:34:03,299 --> 00:34:06,418
whole new protocols to do this

793
00:34:04,710 --> 00:34:08,040
you really don't bgp is a very

794
00:34:06,419 --> 00:34:08,609
extensible way and this isn't rocket

795
00:34:08,040 --> 00:34:16,080
science

796
00:34:08,609 --> 00:34:18,409
so go ahead use hi first of all thank

797
00:34:16,080 --> 00:34:21,569
you for the feedback really interesting

798
00:34:18,409 --> 00:34:23,730
I work for a French cloud hosting

799
00:34:21,570 --> 00:34:25,889
company and we have built our own IP

800
00:34:23,730 --> 00:34:29,310
fabric recently and we made totally

801
00:34:25,889 --> 00:34:31,260
different technical choices mostly

802
00:34:29,310 --> 00:34:34,139
because we have different environments I

803
00:34:31,260 --> 00:34:37,080
guess I noticed you're not talking about

804
00:34:34,139 --> 00:34:40,200
any underlay versus overlay different

805
00:34:37,080 --> 00:34:43,259
situation I assume you don't handle

806
00:34:40,199 --> 00:34:47,489
multi services this is all this is all

807
00:34:43,260 --> 00:34:50,040
underway okay okay so next question and

808
00:34:47,489 --> 00:34:52,888
it's not a trick question why do you

809
00:34:50,040 --> 00:34:56,820
have Google stack for the underlay why

810
00:34:52,889 --> 00:35:01,100
not just go only for ipv6 because not

811
00:34:56,820 --> 00:35:03,900
everything has an overlay okay

812
00:35:01,100 --> 00:35:10,109
interesting response my team will be

813
00:35:03,900 --> 00:35:13,890
happy to hear about that and third and

814
00:35:10,109 --> 00:35:17,819
final question I think you said you like

815
00:35:13,890 --> 00:35:21,450
using motion based silicon devices did

816
00:35:17,820 --> 00:35:24,840
you write your own our stack on top of

817
00:35:21,450 --> 00:35:28,049
those or are you like leveraging

818
00:35:24,840 --> 00:35:31,370
something else we're actually kind of in

819
00:35:28,050 --> 00:35:34,730
between we use

820
00:35:31,370 --> 00:35:37,759
i we did not write around OS tack what

821
00:35:34,730 --> 00:35:39,530
we actually do is we work with other

822
00:35:37,760 --> 00:35:41,660
stacks and we drop a lot of our own

823
00:35:39,530 --> 00:35:43,760
agents on top of it they take control

824
00:35:41,660 --> 00:35:46,750
over that stack and we find that that's

825
00:35:43,760 --> 00:35:50,330
a happy medium for us for example I

826
00:35:46,750 --> 00:35:53,860
think if you the next 68 presentation

827
00:35:50,330 --> 00:35:57,319
talks about how we drop troubleshooting

828
00:35:53,860 --> 00:35:59,510
Damons on top of other vendor stacks

829
00:35:57,320 --> 00:36:01,550
with drop configuration controllers on

830
00:35:59,510 --> 00:36:01,910
top of a management controller on top of

831
00:36:01,550 --> 00:36:03,710
it

832
00:36:01,910 --> 00:36:06,290
various other things but we don't

833
00:36:03,710 --> 00:36:09,130
actually take over the core right so

834
00:36:06,290 --> 00:36:11,509
this actually allow us to get like

835
00:36:09,130 --> 00:36:13,790
multi-vendor environment because we

836
00:36:11,510 --> 00:36:15,740
could use vendor a band will be even to

837
00:36:13,790 --> 00:36:19,220
see they all use different OSS

838
00:36:15,740 --> 00:36:20,899
on top then how do we actually abstract

839
00:36:19,220 --> 00:36:23,270
that right so we're basically dropping

840
00:36:20,900 --> 00:36:25,280
our only agent the agents deal with

841
00:36:23,270 --> 00:36:27,950
whatever that the Southbank have talked

842
00:36:25,280 --> 00:36:30,800
has to happen and basically pour back to

843
00:36:27,950 --> 00:36:32,750
our central intelligence where that we

844
00:36:30,800 --> 00:36:34,730
can make their love decisions or make it

845
00:36:32,750 --> 00:36:39,290
the configuration generation decisions

846
00:36:34,730 --> 00:36:41,780
from oh ok yeah thank you yeah hi this

847
00:36:39,290 --> 00:36:45,350
is paul condom to lock networks thanks

848
00:36:41,780 --> 00:36:47,720
very good discussion one quick question

849
00:36:45,350 --> 00:36:50,450
were there any specific considerations

850
00:36:47,720 --> 00:36:52,879
around congestion management and you run

851
00:36:50,450 --> 00:36:55,279
any workloads that either are require

852
00:36:52,880 --> 00:36:58,400
lossless or very low loss type

853
00:36:55,280 --> 00:37:00,320
configuration um yes so we do not run

854
00:36:58,400 --> 00:37:02,000
workload that require lossless we are

855
00:37:00,320 --> 00:37:03,980
very much against lossless because

856
00:37:02,000 --> 00:37:06,170
lossless is nothing more than let me

857
00:37:03,980 --> 00:37:10,070
reserve a lot of capacity that I can't

858
00:37:06,170 --> 00:37:12,740
then use a huge portion of our workload

859
00:37:10,070 --> 00:37:14,530
is Hadoop shouldn't surprise you since I

860
00:37:12,740 --> 00:37:18,470
mean we're the guys that open sourced it

861
00:37:14,530 --> 00:37:22,760
and that work part that moves a lot of

862
00:37:18,470 --> 00:37:24,620
data and with our topology we don't have

863
00:37:22,760 --> 00:37:26,930
issues with running Hadoop in that

864
00:37:24,620 --> 00:37:29,630
apology because again we can control

865
00:37:26,930 --> 00:37:32,180
over subscription as needed and when you

866
00:37:29,630 --> 00:37:34,730
tune buffering the right way we aren't

867
00:37:32,180 --> 00:37:37,370
seen issues are you doing any kind of

868
00:37:34,730 --> 00:37:38,820
ecn threshold setting on the switches or

869
00:37:37,370 --> 00:37:40,830
something that not doing

870
00:37:38,820 --> 00:37:45,240
anything like that so we are doing a

871
00:37:40,830 --> 00:37:47,580
little bit of a trick there's a couple

872
00:37:45,240 --> 00:37:50,339
of methodologies to cause a fast

873
00:37:47,580 --> 00:37:52,230
retransmit in case of loss for example

874
00:37:50,340 --> 00:37:53,820
in our topology we know that if a packet

875
00:37:52,230 --> 00:37:56,460
has been in the network for longer than

876
00:37:53,820 --> 00:37:58,680
50 milliseconds it's impossible it's

877
00:37:56,460 --> 00:38:01,640
lost because the buffer simply can't

878
00:37:58,680 --> 00:38:04,620
hold anymore so we actually have a

879
00:38:01,640 --> 00:38:06,690
IP route setting deployed onto our

880
00:38:04,620 --> 00:38:11,279
servers let's say now if you are within

881
00:38:06,690 --> 00:38:13,710
my cluster and begin fast we transmit at

882
00:38:11,280 --> 00:38:15,690
50 milliseconds if you are within my

883
00:38:13,710 --> 00:38:19,380
datacenter begin fast retransmit in 25

884
00:38:15,690 --> 00:38:23,180
milliseconds and we the data that we

885
00:38:19,380 --> 00:38:27,960
have is that we can basically get to

886
00:38:23,180 --> 00:38:33,299
99.997% of a lossless Network with those

887
00:38:27,960 --> 00:38:36,960
settings alone and McGorry and Johns

888
00:38:33,300 --> 00:38:39,750
Hopkins APL good talk how do you handle

889
00:38:36,960 --> 00:38:41,940
the differences in hardware generations

890
00:38:39,750 --> 00:38:45,390
and the increase of T km that you get

891
00:38:41,940 --> 00:38:48,090
with in with different chipsets like you

892
00:38:45,390 --> 00:38:50,609
know as you move from you know tried

893
00:38:48,090 --> 00:38:53,010
into jericho to jericho plus jericho to

894
00:38:50,610 --> 00:38:56,670
now and all that that gives you you know

895
00:38:53,010 --> 00:38:58,530
a lot more fib possibilities you know

896
00:38:56,670 --> 00:39:03,690
but you know if you're constrained by

897
00:38:58,530 --> 00:39:05,610
worst-case across your clusters then so

898
00:39:03,690 --> 00:39:08,100
that's a great question this is actually

899
00:39:05,610 --> 00:39:10,560
one of the reasons why we do the ramesh

900
00:39:08,100 --> 00:39:11,910
that we do at the EGR layer is we kind

901
00:39:10,560 --> 00:39:15,180
of hide the complexity of the entire

902
00:39:11,910 --> 00:39:16,859
cluster so to us a cluster is one

903
00:39:15,180 --> 00:39:18,270
generation and then what the next

904
00:39:16,860 --> 00:39:20,670
generation is we build the next cluster

905
00:39:18,270 --> 00:39:23,940
we added into common fabric plane and

906
00:39:20,670 --> 00:39:27,330
within that cluster we can do whatever

907
00:39:23,940 --> 00:39:30,120
we can do there we can also upgrade the

908
00:39:27,330 --> 00:39:32,670
fabric layer and cluster a B but not C

909
00:39:30,120 --> 00:39:35,819
and as long as cluster C is hiding

910
00:39:32,670 --> 00:39:38,550
everything else from upstream and is

911
00:39:35,820 --> 00:39:39,870
also everything for other clusters

912
00:39:38,550 --> 00:39:42,660
you're only getting the aggregate routes

913
00:39:39,870 --> 00:39:46,049
you're not limited anymore now as far as

914
00:39:42,660 --> 00:39:47,790
Jericho versus Trident for example it's

915
00:39:46,050 --> 00:39:50,040
a deeper system versus a shallow buffer

916
00:39:47,790 --> 00:39:52,220
system I'd be very careful with mixing

917
00:39:50,040 --> 00:39:52,220
them

918
00:39:52,309 --> 00:39:57,630
I'd be super careful mixing them in fact

919
00:39:54,900 --> 00:39:59,640
we don't mix those yeah but we have gone

920
00:39:57,630 --> 00:40:02,339
through multiple generations of hardware

921
00:39:59,640 --> 00:40:05,970
as we went from try to plus your toilet

922
00:40:02,339 --> 00:40:08,490
to and you know three etc it's basically

923
00:40:05,970 --> 00:40:10,019
been a another cluster that was deployed

924
00:40:08,490 --> 00:40:10,500
and that's kind of the building block

925
00:40:10,019 --> 00:40:13,500
for it

926
00:40:10,500 --> 00:40:15,599
so so you tune your your route handling

927
00:40:13,500 --> 00:40:18,119
across generations even though each one

928
00:40:15,599 --> 00:40:20,880
is locked into a particular you know

929
00:40:18,119 --> 00:40:22,829
each cluster is only one generation but

930
00:40:20,880 --> 00:40:23,880
then between the clusters you tune that

931
00:40:22,829 --> 00:40:26,869
they take advantage

932
00:40:23,880 --> 00:40:30,240
well if yes because effectively so you

933
00:40:26,869 --> 00:40:32,819
can obviously a trident plus might have

934
00:40:30,240 --> 00:40:35,129
only eight thousand dual stack routes

935
00:40:32,819 --> 00:40:38,400
that you can pass in but a trident three

936
00:40:35,130 --> 00:40:41,700
you can do 200 some one thousand but

937
00:40:38,400 --> 00:40:43,650
what comes out of a what does a given

938
00:40:41,700 --> 00:40:44,879
cluster actually need to know it needs

939
00:40:43,650 --> 00:40:48,420
to know the aggregate routes from

940
00:40:44,880 --> 00:40:50,400
outside world it may be default for how

941
00:40:48,420 --> 00:40:51,900
to get to the outside world so it's a

942
00:40:50,400 --> 00:40:53,309
very limited number of routes that are

943
00:40:51,900 --> 00:40:54,930
actually need to be fed into the cluster

944
00:40:53,309 --> 00:40:57,089
that are from outside the cluster well

945
00:40:54,930 --> 00:40:58,859
then you don't care right and that's

946
00:40:57,089 --> 00:41:02,250
actually why we did the design is that

947
00:40:58,859 --> 00:41:06,269
we there's very little state that needs

948
00:41:02,250 --> 00:41:07,980
to be exchanged and it this is what

949
00:41:06,269 --> 00:41:10,049
actually helps us in both scaling and

950
00:41:07,980 --> 00:41:16,470
converging sure we minimize state as

951
00:41:10,049 --> 00:41:18,599
much as possible Thanks okay hi my name

952
00:41:16,470 --> 00:41:22,049
is Shannon I have couple of questions

953
00:41:18,599 --> 00:41:25,319
the first one with the disaggregated

954
00:41:22,049 --> 00:41:29,579
chassis you have multiple levels of ecmp

955
00:41:25,319 --> 00:41:32,730
in the network so along with it it

956
00:41:29,579 --> 00:41:35,549
brings a hashing problem where the

957
00:41:32,730 --> 00:41:38,130
second level hashing may hash to a

958
00:41:35,549 --> 00:41:41,390
single link and that could cause some

959
00:41:38,130 --> 00:41:44,509
had head-of-line blocking so how do you

960
00:41:41,390 --> 00:41:47,578
have you faced some problems like that I

961
00:41:44,509 --> 00:41:50,190
would use all those so we have seen a

962
00:41:47,579 --> 00:41:53,789
problem when we were testing the very

963
00:41:50,190 --> 00:41:55,769
initial set of these designs the way

964
00:41:53,789 --> 00:41:57,720
that we address them is that every other

965
00:41:55,769 --> 00:42:00,410
layer we actually employ different

966
00:41:57,720 --> 00:42:03,828
hashing technique and that is actually

967
00:42:00,410 --> 00:42:03,828
codified in and

968
00:42:04,679 --> 00:42:09,279
I'm not gonna give away broad comes IT

969
00:42:07,289 --> 00:42:10,900
suffice it to say we use different

970
00:42:09,279 --> 00:42:13,569
hashing techniques a different level and

971
00:42:10,900 --> 00:42:15,519
that solves the problem but you

972
00:42:13,569 --> 00:42:20,979
absolutely must do that otherwise you

973
00:42:15,519 --> 00:42:23,968
will get polarization yeah but every

974
00:42:20,979 --> 00:42:26,859
vendor I'm aware of has now a knob to

975
00:42:23,969 --> 00:42:30,130
change which hash behavior you use and

976
00:42:26,859 --> 00:42:33,130
just change them as you go up yeah the

977
00:42:30,130 --> 00:42:35,799
second question is have you done any

978
00:42:33,130 --> 00:42:38,519
kind of cost modeling to compare this

979
00:42:35,799 --> 00:42:41,709
kind of a disaggregated chassis over a

980
00:42:38,519 --> 00:42:44,218
actual chassis oh yes when the number of

981
00:42:41,709 --> 00:42:47,499
cables and the components you are using

982
00:42:44,219 --> 00:42:49,299
you said I I know you are running for a

983
00:42:47,499 --> 00:42:52,419
long time but is it the economically

984
00:42:49,299 --> 00:42:57,969
making sense to this is one-seventh the

985
00:42:52,419 --> 00:43:00,759
cost at least for us and part of a

986
00:42:57,969 --> 00:43:03,189
reason is that if you think about when a

987
00:43:00,759 --> 00:43:04,900
vendor makes a large chassis they're

988
00:43:03,189 --> 00:43:06,999
going to sell maybe a couple hundred

989
00:43:04,900 --> 00:43:11,109
thousand of them right and there's a lot

990
00:43:06,999 --> 00:43:13,959
of R&D in backplane cooling etc but

991
00:43:11,109 --> 00:43:16,929
small chasse's are sold in millions so

992
00:43:13,959 --> 00:43:19,169
they're cheaper to make there's a lot

993
00:43:16,929 --> 00:43:22,359
you can distribute R&D over a lot more

994
00:43:19,169 --> 00:43:24,879
the equivalent port counts are insane

995
00:43:22,359 --> 00:43:26,799
like much much cheaper then really if

996
00:43:24,880 --> 00:43:30,249
you're interconnected all the components

997
00:43:26,799 --> 00:43:32,049
via copper gak it's not that much more

998
00:43:30,249 --> 00:43:35,169
expensive than comp then the electrical

999
00:43:32,049 --> 00:43:38,439
PCB so the cost of goods is

1000
00:43:35,169 --> 00:43:41,578
significantly lower and the fact that

1001
00:43:38,439 --> 00:43:45,009
the R&D is spread across so much more

1002
00:43:41,579 --> 00:43:47,380
devices makes it a lot cheaper and

1003
00:43:45,009 --> 00:43:49,089
latency is not playing any role with

1004
00:43:47,380 --> 00:43:53,380
this kind of aggregated chassis given

1005
00:43:49,089 --> 00:43:55,269
number of hops has increased I mean the

1006
00:43:53,380 --> 00:43:57,609
reality is that even in an integrated

1007
00:43:55,269 --> 00:43:59,558
chassis you're still going through all

1008
00:43:57,609 --> 00:44:02,169
of those ASA cops anyway so all you've

1009
00:43:59,559 --> 00:44:04,689
done is actually said my electrical PC

1010
00:44:02,169 --> 00:44:07,629
my electrical backplane is now 3 meters

1011
00:44:04,689 --> 00:44:11,259
long as opposed to like one and a half

1012
00:44:07,630 --> 00:44:13,700
and speed of light through you know that

1013
00:44:11,259 --> 00:44:15,740
cable kind of fast enough

1014
00:44:13,700 --> 00:44:18,250
ending our environment is actually

1015
00:44:15,740 --> 00:44:21,558
bounded by the amount of buffer that a

1016
00:44:18,250 --> 00:44:23,450
that can hold a packet right so we know

1017
00:44:21,559 --> 00:44:25,549
how many stage these packets is going to

1018
00:44:23,450 --> 00:44:27,828
travel through and that's the amount of

1019
00:44:25,549 --> 00:44:34,460
time that maximum that you can see for

1020
00:44:27,829 --> 00:44:37,190
packet delay thank you no problem Andrew

1021
00:44:34,460 --> 00:44:38,900
tell technologies for your spine layer

1022
00:44:37,190 --> 00:44:42,650
have you guys considered spine groups

1023
00:44:38,900 --> 00:44:45,200
instead of feces and if so have we

1024
00:44:42,650 --> 00:44:47,569
consider one spine groups so we

1025
00:44:45,200 --> 00:44:48,640
absolutely have like I said everything

1026
00:44:47,569 --> 00:44:53,808
could be

1027
00:44:48,640 --> 00:44:55,368
recursed so yes we have in fact like I

1028
00:44:53,809 --> 00:44:58,880
mentioned inside like the fabric layer

1029
00:44:55,369 --> 00:45:01,490
every fab could be its own DC itself

1030
00:44:58,880 --> 00:45:03,799
which is effectively spine groups you

1031
00:45:01,490 --> 00:45:07,490
can scale any dimension that you want

1032
00:45:03,799 --> 00:45:10,009
any which way for us maximum design of

1033
00:45:07,490 --> 00:45:12,049
8100 edge ports was sufficient at the

1034
00:45:10,010 --> 00:45:13,730
current thing if somebody needs more and

1035
00:45:12,049 --> 00:45:17,589
those aren't hosts edge ports those are

1036
00:45:13,730 --> 00:45:19,670
edge ports out to top of rack positions

1037
00:45:17,589 --> 00:45:23,839
well we might be comfortable running

1038
00:45:19,670 --> 00:45:25,640
40,000 nodes so about 15 megawatts of

1039
00:45:23,839 --> 00:45:27,049
power in a single blast I mean I sure as

1040
00:45:25,640 --> 00:45:29,629
hell wouldn't want to go any higher than

1041
00:45:27,049 --> 00:45:37,579
that on a single blast domain but that's

1042
00:45:29,630 --> 00:45:39,650
just me Thank You Leslie Daigle think

1043
00:45:37,579 --> 00:45:41,150
again enterprises really enjoyed the

1044
00:45:39,650 --> 00:45:43,790
talk thanks

1045
00:45:41,150 --> 00:45:47,420
but one question following up on the is

1046
00:45:43,790 --> 00:45:50,240
it cheaper than big iron and when you

1047
00:45:47,420 --> 00:45:54,170
did your cost comparison of pcs you know

1048
00:45:50,240 --> 00:45:56,209
a gaggle of PCs versus large boxes and

1049
00:45:54,170 --> 00:45:58,369
the amount of and your comment about the

1050
00:45:56,210 --> 00:46:01,099
amount of research were you factoring in

1051
00:45:58,369 --> 00:46:05,540
your own time and matter of research you

1052
00:46:01,099 --> 00:46:08,660
had to do yes cool thanks absolutely and

1053
00:46:05,540 --> 00:46:11,540
in fact the topologies if you scale it

1054
00:46:08,660 --> 00:46:13,549
down to a more enterprise friendly size

1055
00:46:11,540 --> 00:46:15,558
like a thousand host or two thousand

1056
00:46:13,549 --> 00:46:18,589
five thousand host the topology gets a

1057
00:46:15,559 --> 00:46:19,730
lot simpler and it actually gets to a

1058
00:46:18,589 --> 00:46:21,859
point where maybe you don't need to

1059
00:46:19,730 --> 00:46:24,680
build a C ICD type of automation system

1060
00:46:21,859 --> 00:46:27,200
you can kind of do a build ones quick

1061
00:46:24,680 --> 00:46:29,690
script and forget which drops the cost

1062
00:46:27,200 --> 00:46:36,410
of and lower to enterprises like lowers

1063
00:46:29,690 --> 00:46:37,260
the barrier of entry cool right on time

1064
00:46:36,410 --> 00:46:44,788
thanks everyone

1065
00:46:37,260 --> 00:46:44,789
[Applause]

1066
00:46:49,780 --> 00:46:51,840
you

