1
00:00:09,960 --> 00:00:16,990
hey good morning everybody welcome to

2
00:00:13,330 --> 00:00:18,820
the nanog 76 hackathon so I'm Michael

3
00:00:16,990 --> 00:00:20,139
I'm going to give a really really brief

4
00:00:18,820 --> 00:00:21,939
introduction of what's going to be

5
00:00:20,140 --> 00:00:25,180
happening today and then I'm gonna pass

6
00:00:21,939 --> 00:00:27,460
it over to Syed and Deepak from our

7
00:00:25,180 --> 00:00:31,000
sponsor Oracle who helped with this

8
00:00:27,460 --> 00:00:32,950
hackathon together along with Hussein

9
00:00:31,000 --> 00:00:34,450
from to sudo who helped provide all the

10
00:00:32,950 --> 00:00:39,070
virtual lab infrastructure that you'll

11
00:00:34,450 --> 00:00:41,620
be working on today so after after I'm

12
00:00:39,070 --> 00:00:43,480
done talking and Saez done talking we're

13
00:00:41,620 --> 00:00:47,769
going to encourage everybody to form

14
00:00:43,480 --> 00:00:49,330
teams to then compete on this I know

15
00:00:47,770 --> 00:00:51,400
that there's been a lot of great

16
00:00:49,330 --> 00:00:53,110
activity in the slack channel where

17
00:00:51,400 --> 00:00:57,010
people were coming up with some ideas to

18
00:00:53,110 --> 00:00:59,010
work on Syed and Deepak are also going

19
00:00:57,010 --> 00:01:02,320
to go over some exercises that you could

20
00:00:59,010 --> 00:01:04,539
choose to complete instead so if if you

21
00:01:02,320 --> 00:01:06,189
decide to go that route please form a

22
00:01:04,540 --> 00:01:08,430
team of about five and it looks like

23
00:01:06,189 --> 00:01:11,470
people have grouped off already

24
00:01:08,430 --> 00:01:13,150
otherwise if anybody once the

25
00:01:11,470 --> 00:01:15,400
introductions are done and the

26
00:01:13,150 --> 00:01:18,640
presentation is given if people still

27
00:01:15,400 --> 00:01:21,670
have had a problem forming a team please

28
00:01:18,640 --> 00:01:25,450
either come up and talk to this table

29
00:01:21,670 --> 00:01:28,270
here that has Hussain Jeff and Steve

30
00:01:25,450 --> 00:01:29,950
from the hackathon committee so we'll be

31
00:01:28,270 --> 00:01:32,080
able to help you out either form teams

32
00:01:29,950 --> 00:01:34,510
or help out during the hack and then

33
00:01:32,080 --> 00:01:38,560
also our friends from Oracle please

34
00:01:34,510 --> 00:01:40,240
please wave Oracle table you could thank

35
00:01:38,560 --> 00:01:42,640
them for sponsoring this as well as go

36
00:01:40,240 --> 00:01:45,699
to them and ask for help on whatever it

37
00:01:42,640 --> 00:01:47,200
is that you're working on I just want to

38
00:01:45,700 --> 00:01:48,700
also give you a little overview of

39
00:01:47,200 --> 00:01:49,840
what's going to happen during the day so

40
00:01:48,700 --> 00:01:51,430
we're going to give this introduction

41
00:01:49,840 --> 00:01:53,440
afterwards you're going to form teams

42
00:01:51,430 --> 00:01:56,290
and start working we'll break for lunch

43
00:01:53,440 --> 00:01:57,940
at around noon we'll break again during

44
00:01:56,290 --> 00:02:00,070
the middle of the day and keep you like

45
00:01:57,940 --> 00:02:02,530
well fed and well hydrated as you work

46
00:02:00,070 --> 00:02:04,419
we're then going to have presentations

47
00:02:02,530 --> 00:02:08,500
where everybody here gets to present

48
00:02:04,420 --> 00:02:11,909
your work at at 6 o'clock you'll then

49
00:02:08,500 --> 00:02:14,349
vote for who you think is the best team

50
00:02:11,909 --> 00:02:17,560
then we'll break and have a little

51
00:02:14,349 --> 00:02:20,079
reception outside so any questions

52
00:02:17,560 --> 00:02:21,610
please come and talk to me or one of the

53
00:02:20,080 --> 00:02:24,250
other friendly people who raised their

54
00:02:21,610 --> 00:02:26,410
hands just a moment ago and then I'd

55
00:02:24,250 --> 00:02:28,569
like to pass everything over to these

56
00:02:26,410 --> 00:02:35,590
two who will go over what you're going

57
00:02:28,569 --> 00:02:39,190
to be working on today are you guys can

58
00:02:35,590 --> 00:02:41,530
hear me okay cool my name is Syed I'm a

59
00:02:39,190 --> 00:02:43,239
network engineer in Oracle cloud

60
00:02:41,530 --> 00:02:46,690
infrastructure and I'll be presenting

61
00:02:43,239 --> 00:02:48,610
with Deepak and I also have like Mike

62
00:02:46,690 --> 00:02:49,840
pointed out a bunch of other team

63
00:02:48,610 --> 00:02:51,849
members he'll be helping me out

64
00:02:49,840 --> 00:02:53,590
throughout the day running the hackathon

65
00:02:51,849 --> 00:02:57,190
and answer any questions that you might

66
00:02:53,590 --> 00:02:58,870
have so let's get started so let's say

67
00:02:57,190 --> 00:03:00,670
if we have a network topology that

68
00:02:58,870 --> 00:03:02,590
looked like this just a couple of

69
00:03:00,670 --> 00:03:05,200
endpoints with few switches in between

70
00:03:02,590 --> 00:03:08,140
and if there's a failure in the network

71
00:03:05,200 --> 00:03:10,149
it's relatively easy to identify failure

72
00:03:08,140 --> 00:03:12,488
in a simple network and once we have

73
00:03:10,150 --> 00:03:15,010
identified the failure we can fix it and

74
00:03:12,489 --> 00:03:17,830
everything is in healthy state and we

75
00:03:15,010 --> 00:03:19,569
are good to go but the reality is we

76
00:03:17,830 --> 00:03:21,879
have Network that look like this

77
00:03:19,569 --> 00:03:23,619
so with the core distribution and access

78
00:03:21,879 --> 00:03:26,079
layer and you might name those later

79
00:03:23,620 --> 00:03:28,450
differently but there are there is done

80
00:03:26,080 --> 00:03:30,760
NC on each layer or even if we are using

81
00:03:28,450 --> 00:03:32,890
class fabric it's a really densely

82
00:03:30,760 --> 00:03:35,950
connected topology of a spine of leaf

83
00:03:32,890 --> 00:03:38,379
nodes so it's it's really complicated

84
00:03:35,950 --> 00:03:41,079
network or if we look into the data

85
00:03:38,379 --> 00:03:43,090
center it might look like this but we're

86
00:03:41,080 --> 00:03:44,709
not here to solve structure cabling

87
00:03:43,090 --> 00:03:46,840
problems we are here to talk about

88
00:03:44,709 --> 00:03:48,849
network monitoring and that's the theme

89
00:03:46,840 --> 00:03:51,760
of our hackathon today so you'll be

90
00:03:48,849 --> 00:03:53,500
talking about active monitoring so just

91
00:03:51,760 --> 00:03:55,959
give you a quick overview for agenda

92
00:03:53,500 --> 00:03:58,030
today I'll go over the problem statement

93
00:03:55,959 --> 00:04:01,720
then we'll talk about the hackathon

94
00:03:58,030 --> 00:04:04,209
goals if you're like tasks that each

95
00:04:01,720 --> 00:04:06,159
team needs to complete for the hackathon

96
00:04:04,209 --> 00:04:08,379
I'll give you a brief overview about the

97
00:04:06,159 --> 00:04:10,269
topology and then we will talk about

98
00:04:08,379 --> 00:04:12,250
different tools and protocols that we

99
00:04:10,269 --> 00:04:14,950
think might help you solve the problem

100
00:04:12,250 --> 00:04:16,959
but feel free to use any tools and

101
00:04:14,950 --> 00:04:18,668
protocols that you think it's more

102
00:04:16,959 --> 00:04:20,889
reasonable to solve the problem this is

103
00:04:18,668 --> 00:04:23,620
just to provide you a guideline because

104
00:04:20,889 --> 00:04:26,020
we have varying set of skills and in the

105
00:04:23,620 --> 00:04:32,410
group so just to get you started give

106
00:04:26,020 --> 00:04:34,128
you some base to work on ok so just the

107
00:04:32,410 --> 00:04:36,349
code the opposite of networking

108
00:04:34,129 --> 00:04:38,149
is not working said someone smart I'm I

109
00:04:36,349 --> 00:04:40,550
kinda agree to that so what's the

110
00:04:38,149 --> 00:04:42,819
problem that we are trying to solve

111
00:04:40,550 --> 00:04:44,779
today so in large-scale dance

112
00:04:42,819 --> 00:04:47,749
complicated and accurate we need tools

113
00:04:44,779 --> 00:04:50,659
that can identify and isolate failures

114
00:04:47,749 --> 00:04:53,389
so we can fix them and we have more

115
00:04:50,659 --> 00:04:56,959
robust Network that's highly available

116
00:04:53,389 --> 00:04:58,699
and network active marketing give us

117
00:04:56,959 --> 00:05:01,550
that great is a great tool to use

118
00:04:58,699 --> 00:05:03,379
because its uses sensors and agents to

119
00:05:01,550 --> 00:05:05,899
simulate customer traffic and it can

120
00:05:03,379 --> 00:05:08,779
test for end-to-end reach ability it can

121
00:05:05,899 --> 00:05:12,189
test for packet loss and can test for a

122
00:05:08,779 --> 00:05:15,529
latency across the network but thing is

123
00:05:12,189 --> 00:05:17,659
since if you have use active monitoring

124
00:05:15,529 --> 00:05:19,639
it uses probes and if you have multiple

125
00:05:17,659 --> 00:05:21,529
active paths in the network how you can

126
00:05:19,639 --> 00:05:23,360
make sure that your probes are covering

127
00:05:21,529 --> 00:05:26,449
all the active paths in the network and

128
00:05:23,360 --> 00:05:26,689
I explained more on that in the next

129
00:05:26,449 --> 00:05:28,939
slide

130
00:05:26,689 --> 00:05:31,399
yeah so I'm on the right we have the

131
00:05:28,939 --> 00:05:33,709
topology that we'll be using in the

132
00:05:31,399 --> 00:05:36,829
hackathon today so you have six routers

133
00:05:33,709 --> 00:05:39,829
and two hosts concerning all links have

134
00:05:36,829 --> 00:05:42,589
equal cost between host and host B we

135
00:05:39,829 --> 00:05:46,969
have four possible best paths that we

136
00:05:42,589 --> 00:05:53,779
can use R 1 R 2 R 4 R 6 R 1 R 2 R 5 r 6

137
00:05:46,969 --> 00:05:56,089
r1 r3 r5 r6 or r1 r3 r4 r6 so how we can

138
00:05:53,779 --> 00:05:59,808
make sure that when we are sending a

139
00:05:56,089 --> 00:06:01,339
probe it covers all those four possible

140
00:05:59,809 --> 00:06:03,709
paths because if normally if I'm just

141
00:06:01,339 --> 00:06:06,559
sending a probe from host h2s B it would

142
00:06:03,709 --> 00:06:10,099
go to r1 and it can use either go to r2

143
00:06:06,559 --> 00:06:13,099
or r3 and from r2 it can either go to r4

144
00:06:10,099 --> 00:06:15,438
and r5 and I know I'm skip skipping some

145
00:06:13,099 --> 00:06:17,748
of the ICMP hashing details but this is

146
00:06:15,439 --> 00:06:20,689
just to keep it simple let's say we have

147
00:06:17,749 --> 00:06:23,899
all equal cost paths and you're just

148
00:06:20,689 --> 00:06:26,869
talking about a probe is going from host

149
00:06:23,899 --> 00:06:28,610
a to host B so how can we come up with a

150
00:06:26,869 --> 00:06:31,159
mechanism that we can more digital

151
00:06:28,610 --> 00:06:34,849
deterministically tell that a probe will

152
00:06:31,159 --> 00:06:36,679
take a path a or and then the second

153
00:06:34,849 --> 00:06:38,869
side of probe will take path B and then

154
00:06:36,679 --> 00:06:41,359
and that way we can cover all four

155
00:06:38,869 --> 00:06:44,469
possible paths and identify any failures

156
00:06:41,360 --> 00:06:46,909
as it happens on any of those four paths

157
00:06:44,469 --> 00:06:48,199
so that's the goal we will be working

158
00:06:46,909 --> 00:06:50,808
towards

159
00:06:48,199 --> 00:06:54,409
and just the step wise what are the

160
00:06:50,809 --> 00:06:56,389
hackathon goals first one is we expect

161
00:06:54,409 --> 00:06:58,248
every team to extract topology

162
00:06:56,389 --> 00:07:01,099
information using some kind of

163
00:06:58,249 --> 00:07:02,839
automation you then once you have the

164
00:07:01,099 --> 00:07:05,779
topology information you can build a

165
00:07:02,839 --> 00:07:08,299
graph or network map using node links

166
00:07:05,779 --> 00:07:10,729
and matrix once you have the graph you

167
00:07:08,299 --> 00:07:12,948
can use that to compute all the best

168
00:07:10,729 --> 00:07:14,989
possible paths between two end points in

169
00:07:12,949 --> 00:07:17,569
our case it will be hosted in hose B or

170
00:07:14,989 --> 00:07:20,508
Devlin and they have two boxes once you

171
00:07:17,569 --> 00:07:22,610
have all the best paths calculated then

172
00:07:20,509 --> 00:07:24,979
you can construct a pro packet and make

173
00:07:22,610 --> 00:07:28,399
sure that you can probe all the four

174
00:07:24,979 --> 00:07:30,318
possible best paths in the network then

175
00:07:28,399 --> 00:07:32,419
once you have that you're probing all

176
00:07:30,319 --> 00:07:34,399
the best paths just introduce a failure

177
00:07:32,419 --> 00:07:37,159
in one of the pads and make sure you can

178
00:07:34,399 --> 00:07:40,129
account that using your probes and there

179
00:07:37,159 --> 00:07:42,919
is a bonus one if you can visualize the

180
00:07:40,129 --> 00:07:48,589
collected data in matrix so that that

181
00:07:42,919 --> 00:07:50,688
will be the bonus part okay just a quick

182
00:07:48,589 --> 00:07:54,050
overview of topology again on the right

183
00:07:50,689 --> 00:07:56,569
you can see the topology diagram you'll

184
00:07:54,050 --> 00:07:59,119
be using today for the hackathon I have

185
00:07:56,569 --> 00:08:00,949
included all the interface and IP

186
00:07:59,119 --> 00:08:03,589
information so it's just a quick one

187
00:08:00,949 --> 00:08:08,360
stop shop to look at all the details in

188
00:08:03,589 --> 00:08:11,059
the network we have six vm x juniper vm

189
00:08:08,360 --> 00:08:14,119
x instances are one through our six we

190
00:08:11,059 --> 00:08:17,929
have two Ubuntu hosts Devon and f2

191
00:08:14,119 --> 00:08:20,599
connected to R 1 and R 6 we are using is

192
00:08:17,929 --> 00:08:23,719
is as the IGP but feel free to change it

193
00:08:20,599 --> 00:08:27,529
if you want to we have configured BGP LS

194
00:08:23,719 --> 00:08:31,610
on R 1 and R 6 and on devlin and f2 you

195
00:08:27,529 --> 00:08:34,519
can run IX a BGP instance to pair with R

196
00:08:31,610 --> 00:08:38,389
1 and R 6 and we'll talk more about bt

197
00:08:34,519 --> 00:08:42,250
pls next so any questions so far before

198
00:08:38,389 --> 00:08:42,250
I start talking about protocols into

199
00:08:42,578 --> 00:08:49,189
yeah so in the end we'll have the links

200
00:08:46,129 --> 00:08:54,019
for all the necessary documents and that

201
00:08:49,189 --> 00:08:57,110
you'll need okay cool so bt pls

202
00:08:54,019 --> 00:09:01,340
what is bt pls bt pls is basically

203
00:08:57,110 --> 00:09:05,090
another NLRA of BGP defined in RFC seven

204
00:09:01,340 --> 00:09:08,090
five - what it does it uses BGP TLV

205
00:09:05,090 --> 00:09:11,390
fields to define objects so that's like

206
00:09:08,090 --> 00:09:15,320
nodes links and IP prefixes and then it

207
00:09:11,390 --> 00:09:17,780
uses a new type of vgp path attribute to

208
00:09:15,320 --> 00:09:20,780
define attribute it's a non-transitive

209
00:09:17,780 --> 00:09:23,449
optional attribute to define attributes

210
00:09:20,780 --> 00:09:26,350
of all these objects sounds like note

211
00:09:23,450 --> 00:09:29,210
attribute can define node name router ID

212
00:09:26,350 --> 00:09:31,600
multiple topology identifiers link

213
00:09:29,210 --> 00:09:34,130
attribute can define local IP remote IP

214
00:09:31,600 --> 00:09:36,830
local and mode router ID and the

215
00:09:34,130 --> 00:09:41,570
bandwidth available on that particular

216
00:09:36,830 --> 00:09:43,640
link so what can we use it for so let's

217
00:09:41,570 --> 00:09:46,520
say if I have a topology and I'm trying

218
00:09:43,640 --> 00:09:49,280
to build a topology map for it and

219
00:09:46,520 --> 00:09:51,949
choose for like offline path computation

220
00:09:49,280 --> 00:09:54,319
or T purposes and my network has

221
00:09:51,950 --> 00:09:56,600
multiple IP domain so I don't really

222
00:09:54,320 --> 00:09:58,610
need to have a host in each IGP depend

223
00:09:56,600 --> 00:10:03,050
to collect node information from that

224
00:09:58,610 --> 00:10:05,630
domain I can just export my IGP into BGP

225
00:10:03,050 --> 00:10:08,660
LS database and then just use BGP Alice

226
00:10:05,630 --> 00:10:10,670
to communicate to the rest of the

227
00:10:08,660 --> 00:10:11,930
network or any external entity to

228
00:10:10,670 --> 00:10:14,900
distribute all the node and link

229
00:10:11,930 --> 00:10:16,699
information in my network if you still

230
00:10:14,900 --> 00:10:19,640
feel like what the heck I'm talking

231
00:10:16,700 --> 00:10:21,860
about so hopefully this will give you a

232
00:10:19,640 --> 00:10:23,750
bit more visual details to it so this is

233
00:10:21,860 --> 00:10:27,170
basically a snippet from juniper router

234
00:10:23,750 --> 00:10:31,340
I'm showing you three nodes and if I

235
00:10:27,170 --> 00:10:34,400
look more into yeah the first one you

236
00:10:31,340 --> 00:10:37,610
can see it has information about router

237
00:10:34,400 --> 00:10:40,160
ID host name what protocol it's running

238
00:10:37,610 --> 00:10:44,090
what area it's part of and all they have

239
00:10:40,160 --> 00:10:46,969
good bits and if I look into VG pls for

240
00:10:44,090 --> 00:10:50,750
the link you can see it has information

241
00:10:46,970 --> 00:10:53,810
about local and remote IP on that link

242
00:10:50,750 --> 00:10:56,990
what star local and mode router ID was

243
00:10:53,810 --> 00:10:58,520
the T matrix for that link so once you

244
00:10:56,990 --> 00:11:02,240
have that information you can pretty

245
00:10:58,520 --> 00:11:06,050
much define the topology using it and

246
00:11:02,240 --> 00:11:08,720
like I said you can run X a beach P with

247
00:11:06,050 --> 00:11:11,390
R 1 or R 6 to get that bgp LS updates

248
00:11:08,720 --> 00:11:14,810
under on the host so you can process it

249
00:11:11,390 --> 00:11:17,930
so here's a quick snippet of XIV GP

250
00:11:14,810 --> 00:11:20,469
Conte fell so the important bit is the

251
00:11:17,930 --> 00:11:23,510
family address I'm using so it's bgp ALS

252
00:11:20,470 --> 00:11:25,490
you can use a script to parse the JSON

253
00:11:23,510 --> 00:11:28,970
the updates you are receiving from bt

254
00:11:25,490 --> 00:11:31,040
pls as json you can be used any strip to

255
00:11:28,970 --> 00:11:32,810
parse that information and this this is

256
00:11:31,040 --> 00:11:37,459
just a message format you're gonna be

257
00:11:32,810 --> 00:11:39,859
receiving from router to the host the

258
00:11:37,460 --> 00:11:42,560
important part is again the NS LS

259
00:11:39,860 --> 00:11:46,040
another I type if it's a type one that

260
00:11:42,560 --> 00:11:48,739
means it's a node LS if its type two

261
00:11:46,040 --> 00:11:51,650
means it's a link LS if it's a type 3

262
00:11:48,740 --> 00:11:55,190
means it's ipv4 prefix if it's a type 4

263
00:11:51,650 --> 00:11:58,520
means it's ipv6 prefix so again you have

264
00:11:55,190 --> 00:12:00,320
option that you dump this update

265
00:11:58,520 --> 00:12:03,260
messages to a file and then write a

266
00:12:00,320 --> 00:12:04,850
script in your own preferred programming

267
00:12:03,260 --> 00:12:07,310
language to parse the information you

268
00:12:04,850 --> 00:12:10,430
need to build topology or we'll give you

269
00:12:07,310 --> 00:12:13,849
an overview of JQ how you can use JQ to

270
00:12:10,430 --> 00:12:18,319
parse JSON and extract information that

271
00:12:13,850 --> 00:12:22,160
you want ok so now you have information

272
00:12:18,320 --> 00:12:23,780
about nodes and links in a topology you

273
00:12:22,160 --> 00:12:25,670
need to build a graph to be able to

274
00:12:23,780 --> 00:12:27,829
compute all possible best paths in the

275
00:12:25,670 --> 00:12:30,349
national network so there are multiple

276
00:12:27,830 --> 00:12:34,040
graphing utilities you can use in python

277
00:12:30,350 --> 00:12:37,370
you have network xor i graph in golang

278
00:12:34,040 --> 00:12:40,459
you have Gore F I just feel network X is

279
00:12:37,370 --> 00:12:42,680
like really easy to use really easy to

280
00:12:40,460 --> 00:12:45,080
understand so on the right if you see a

281
00:12:42,680 --> 00:12:47,569
network topology that has three routers

282
00:12:45,080 --> 00:12:51,230
in it in Python you can just import a

283
00:12:47,570 --> 00:12:54,290
networks library initialize a undirected

284
00:12:51,230 --> 00:12:56,660
graph and you can add R 1 R 2 R 3 nodes

285
00:12:54,290 --> 00:12:58,969
and then you can add edges as this is

286
00:12:56,660 --> 00:13:03,319
basically the links between them so r1

287
00:12:58,970 --> 00:13:05,120
r2 r1 r3 and r2 r3 and then that that

288
00:13:03,320 --> 00:13:07,040
will give you a graph and you can see

289
00:13:05,120 --> 00:13:09,380
that it has a graph with three nodes and

290
00:13:07,040 --> 00:13:12,620
three edges so once you have the graph

291
00:13:09,380 --> 00:13:14,480
you can run shortest path algorithm on

292
00:13:12,620 --> 00:13:18,680
that to figure out all the best paths

293
00:13:14,480 --> 00:13:21,260
between two endpoints okay so so far we

294
00:13:18,680 --> 00:13:23,599
have topology information and we have

295
00:13:21,260 --> 00:13:26,960
created a graph to extract all the best

296
00:13:23,600 --> 00:13:28,640
possible paths in the network now our

297
00:13:26,960 --> 00:13:31,010
challenge begins to how we can

298
00:13:28,640 --> 00:13:34,390
all those best parts so like I said

299
00:13:31,010 --> 00:13:37,730
initially that if you are sending probe

300
00:13:34,390 --> 00:13:40,430
from host a to a host B it can take any

301
00:13:37,730 --> 00:13:44,170
path so how we can deterministic elite L

302
00:13:40,430 --> 00:13:46,579
it can take a path a or pad B so here

303
00:13:44,170 --> 00:13:49,819
I'll just give you a quick overview of

304
00:13:46,580 --> 00:13:51,800
GRE so what GRE is generic routing

305
00:13:49,820 --> 00:13:54,110
encapsulation protocol what it does it

306
00:13:51,800 --> 00:13:56,839
just in caps your IP packet in an other

307
00:13:54,110 --> 00:13:58,220
outer IP header that has a new source it

308
00:13:56,840 --> 00:14:01,130
can have a new source and destination

309
00:13:58,220 --> 00:14:03,380
and once it can't you didn't capsulate

310
00:14:01,130 --> 00:14:06,320
that outer header it gets routed based

311
00:14:03,380 --> 00:14:08,480
on whatever the inner IP header is and

312
00:14:06,320 --> 00:14:09,740
we are talking about here the state less

313
00:14:08,480 --> 00:14:12,080
GRE we are not talking about

314
00:14:09,740 --> 00:14:14,000
establishing a tunnel or anything of

315
00:14:12,080 --> 00:14:17,720
that sort and in the next slide I will

316
00:14:14,000 --> 00:14:19,160
give you more detail example of it so if

317
00:14:17,720 --> 00:14:22,880
you're interested using this solution

318
00:14:19,160 --> 00:14:24,560
I'll tell you more about it okay so

319
00:14:22,880 --> 00:14:28,250
again on the right we have the topology

320
00:14:24,560 --> 00:14:32,000
I'll be using for the lab so if you look

321
00:14:28,250 --> 00:14:34,190
at it we have dev one r1 r2 so if I'm

322
00:14:32,000 --> 00:14:37,040
trying to probe making sure that my

323
00:14:34,190 --> 00:14:41,980
probe actually follow dev 1 to R 1 to R

324
00:14:37,040 --> 00:14:45,110
2 I can there's an illustration of

325
00:14:41,980 --> 00:14:47,090
header that I can use or GRE in-cab that

326
00:14:45,110 --> 00:14:49,640
I can use to make sure that my packet

327
00:14:47,090 --> 00:14:51,590
take actually that path so if you look

328
00:14:49,640 --> 00:14:55,760
the innermost header it has source and

329
00:14:51,590 --> 00:14:59,840
dust as that one IP and if you look at

330
00:14:55,760 --> 00:15:02,569
the r1 actually or the outer IP header

331
00:14:59,840 --> 00:15:06,020
it has sources still as Devon box but

332
00:15:02,570 --> 00:15:09,760
the destination is said to the directly

333
00:15:06,020 --> 00:15:15,140
connected interface on r2 and r1 so it

334
00:15:09,760 --> 00:15:17,569
10.1.1.1 basically the IP right here and

335
00:15:15,140 --> 00:15:20,689
if I look at the outermost header

336
00:15:17,570 --> 00:15:22,970
it has source as still the Devon box and

337
00:15:20,690 --> 00:15:27,340
the destination is set to directly

338
00:15:22,970 --> 00:15:30,470
connected increase on r1 with Devon box

339
00:15:27,340 --> 00:15:34,250
so what's going to happen when if I send

340
00:15:30,470 --> 00:15:36,770
this packet through this network so the

341
00:15:34,250 --> 00:15:38,900
first packet will get router based on

342
00:15:36,770 --> 00:15:42,189
the outermost header so it will go from

343
00:15:38,900 --> 00:15:45,100
dev one to r1 and if I have

344
00:15:42,190 --> 00:15:47,740
GRE D cap filter configured on interface

345
00:15:45,100 --> 00:15:50,110
in rest interface I will get rid of the

346
00:15:47,740 --> 00:15:54,580
outermost header and I've included a

347
00:15:50,110 --> 00:15:56,470
quick snippet for GRE D cap filter it's

348
00:15:54,580 --> 00:15:59,890
already configured on all of the routers

349
00:15:56,470 --> 00:16:01,720
if you want to go use that so what will

350
00:15:59,890 --> 00:16:04,800
happen it will get rid of our remotest

351
00:16:01,720 --> 00:16:10,080
header so now you have a packet with

352
00:16:04,800 --> 00:16:12,939
source 20.00 - and destination as

353
00:16:10,080 --> 00:16:15,580
10.1.1.1 since it's a diagnostician is

354
00:16:12,940 --> 00:16:18,010
directly connected interface of r1 to r2

355
00:16:15,580 --> 00:16:21,820
it will make sure it goes from r1 to r2

356
00:16:18,010 --> 00:16:25,540
and then when it reaches to r2 the

357
00:16:21,820 --> 00:16:28,150
second outermost header will get decap

358
00:16:25,540 --> 00:16:34,480
so now there's a packet that has source

359
00:16:28,150 --> 00:16:36,189
as 2000 - and destination as 20.00 r2 as

360
00:16:34,480 --> 00:16:43,870
well so it gets out the back - to have

361
00:16:36,190 --> 00:16:47,470
one box any questions so far hopefully

362
00:16:43,870 --> 00:16:51,490
everybody is still awake ok so next we

363
00:16:47,470 --> 00:16:53,230
will talk about skp that will walk you

364
00:16:51,490 --> 00:16:56,980
over how we can construct the packets

365
00:16:53,230 --> 00:17:00,280
and send it to the network and deepak

366
00:16:56,980 --> 00:17:02,460
will take over from here so just click

367
00:17:00,280 --> 00:17:02,459
down

368
00:17:29,690 --> 00:17:36,600
so we need a tool to create the packets

369
00:17:33,330 --> 00:17:39,449
and the option for you is to write your

370
00:17:36,600 --> 00:17:42,510
own in any programming language of your

371
00:17:39,450 --> 00:17:45,330
choice go see whatever but it will take

372
00:17:42,510 --> 00:17:48,090
you enormous amount of time so something

373
00:17:45,330 --> 00:17:57,449
we are suggesting but feel free to use

374
00:17:48,090 --> 00:18:00,709
whatever you like is Cappy so so it's

375
00:17:57,450 --> 00:18:03,950
Cappy is written in Python it's free

376
00:18:00,710 --> 00:18:06,810
it's GPL version two very powerful

377
00:18:03,950 --> 00:18:08,430
packet manipulation tool or a library

378
00:18:06,810 --> 00:18:11,429
written in Python you can write your own

379
00:18:08,430 --> 00:18:13,920
scripts Cappy importing the proper

380
00:18:11,430 --> 00:18:16,530
libraries or you can just use it as a

381
00:18:13,920 --> 00:18:19,290
shell you can open up multiple shells

382
00:18:16,530 --> 00:18:21,720
one shell to send the packets the other

383
00:18:19,290 --> 00:18:24,659
shell to sniff or receive the packets

384
00:18:21,720 --> 00:18:28,500
and do the processing of the packets as

385
00:18:24,660 --> 00:18:31,530
one as soon as you receive it so it can

386
00:18:28,500 --> 00:18:35,520
send packets we have dissected Forge you

387
00:18:31,530 --> 00:18:40,080
can write numerous network tools just

388
00:18:35,520 --> 00:18:41,970
with Scapa and those tools discovery

389
00:18:40,080 --> 00:18:44,820
scanning traced routing some of the

390
00:18:41,970 --> 00:18:49,080
buckets for those kind of tools so let's

391
00:18:44,820 --> 00:18:51,990
get into skep II so I'm having a simple

392
00:18:49,080 --> 00:18:54,990
example which is just creating an IP

393
00:18:51,990 --> 00:18:58,190
packet with ICMP so I've opened up two

394
00:18:54,990 --> 00:19:01,590
shells and the center you see SCAP II

395
00:18:58,190 --> 00:19:05,270
where and by the way you have to run

396
00:19:01,590 --> 00:19:09,270
SCAP e as root or sudo you cannot run at

397
00:19:05,270 --> 00:19:12,780
your user level so all your pods have

398
00:19:09,270 --> 00:19:16,200
SCAP e you can open up two shells event

399
00:19:12,780 --> 00:19:19,920
to start playing with it this is just

400
00:19:16,200 --> 00:19:23,580
for ICMP echo request and reply the

401
00:19:19,920 --> 00:19:26,670
bottom bottom screen of the screen you

402
00:19:23,580 --> 00:19:28,110
see the shell which is sniffing you're

403
00:19:26,670 --> 00:19:30,330
showing the interface you are showing

404
00:19:28,110 --> 00:19:32,370
the filter you have to use a proper

405
00:19:30,330 --> 00:19:34,800
filter to see tell what source or

406
00:19:32,370 --> 00:19:38,189
destination IP you are expecting about

407
00:19:34,800 --> 00:19:39,169
type of packet at size ICMP or TCP or

408
00:19:38,190 --> 00:19:40,790
whatever and

409
00:19:39,170 --> 00:19:43,100
how many packets if you want to justly

410
00:19:40,790 --> 00:19:48,379
see few packets you can run it

411
00:19:43,100 --> 00:19:49,969
indefinitely you can specify like the

412
00:19:48,380 --> 00:19:51,950
number of packets or you can run in a

413
00:19:49,970 --> 00:19:53,270
for loop you can do numerous things for

414
00:19:51,950 --> 00:19:55,130
that once you receive a packet you can

415
00:19:53,270 --> 00:19:57,290
do a summary of it and it will tell you

416
00:19:55,130 --> 00:19:59,810
what what packet you received from there

417
00:19:57,290 --> 00:20:01,129
and what time stamp is which is one

418
00:19:59,810 --> 00:20:04,780
important thing when you are probing is

419
00:20:01,130 --> 00:20:08,090
you want to see the round-trip time so

420
00:20:04,780 --> 00:20:11,660
on the top great an IP packet show the

421
00:20:08,090 --> 00:20:14,060
source destination ICMP that ICMP type

422
00:20:11,660 --> 00:20:16,520
put a payload if you want to and then

423
00:20:14,060 --> 00:20:18,649
construct the packet by putting a slash

424
00:20:16,520 --> 00:20:22,460
between all the different constituents

425
00:20:18,650 --> 00:20:24,860
and then use the send of escapee to send

426
00:20:22,460 --> 00:20:26,810
that packet over the wire and the other

427
00:20:24,860 --> 00:20:29,929
side you are sniffing it and you are

428
00:20:26,810 --> 00:20:31,820
getting the packet on it escapee is

429
00:20:29,930 --> 00:20:34,910
powerful enough if you have a GUI then

430
00:20:31,820 --> 00:20:36,290
you can even see the diagram of like

431
00:20:34,910 --> 00:20:37,880
what the packet looks like when you send

432
00:20:36,290 --> 00:20:39,230
it and then you receive it so you can

433
00:20:37,880 --> 00:20:40,940
see the different constituents of the

434
00:20:39,230 --> 00:20:42,560
packet and here I am showing that this

435
00:20:40,940 --> 00:20:45,560
is the source destination on the left

436
00:20:42,560 --> 00:20:47,210
side what you constructed and what type

437
00:20:45,560 --> 00:20:49,550
of request it was send what was the

438
00:20:47,210 --> 00:20:56,290
payload and on the other side the

439
00:20:49,550 --> 00:20:59,560
received packet from this particular so

440
00:20:56,290 --> 00:21:05,450
if you want to run it in a for loop a

441
00:20:59,560 --> 00:21:09,860
simple just use Python range 5 put 5

442
00:21:05,450 --> 00:21:11,900
packets same payload send packets the

443
00:21:09,860 --> 00:21:14,810
the receiving filter changed because now

444
00:21:11,900 --> 00:21:17,090
we have 5 as a count and then we are

445
00:21:14,810 --> 00:21:19,010
specifying a lambda function which is

446
00:21:17,090 --> 00:21:20,570
doing a summary on each one of them so

447
00:21:19,010 --> 00:21:22,310
you can write your own separate function

448
00:21:20,570 --> 00:21:24,710
where you can specify what you want to

449
00:21:22,310 --> 00:21:28,970
do with the packet right the received

450
00:21:24,710 --> 00:21:31,850
packet you want to get the timestamp you

451
00:21:28,970 --> 00:21:34,070
want to get what was what was the

452
00:21:31,850 --> 00:21:36,080
payload of the packet what was the

453
00:21:34,070 --> 00:21:39,169
source address what was the destination

454
00:21:36,080 --> 00:21:42,980
address so going back to what side was

455
00:21:39,170 --> 00:21:45,020
showing up in the IP GRE like sequence

456
00:21:42,980 --> 00:21:46,820
of packets which you are creating you

457
00:21:45,020 --> 00:21:49,639
can play with the payload and put in

458
00:21:46,820 --> 00:21:51,669
stuff in there some sequence number some

459
00:21:49,640 --> 00:21:53,500
time stamp something

460
00:21:51,670 --> 00:21:55,900
and then when you receive the packet

461
00:21:53,500 --> 00:21:58,510
back open it up and see what is in the

462
00:21:55,900 --> 00:22:00,220
payload and then compare it with you

463
00:21:58,510 --> 00:22:02,470
know with the time you receive it so

464
00:22:00,220 --> 00:22:04,600
just giving you an idea of like how

465
00:22:02,470 --> 00:22:13,870
scrappy can be used for any questions on

466
00:22:04,600 --> 00:22:19,870
scrappy now let's move on to Jake Jake

467
00:22:13,870 --> 00:22:24,100
you so said was pointing to like the

468
00:22:19,870 --> 00:22:26,020
output from BGP LS which is a JSON we

469
00:22:24,100 --> 00:22:28,510
need something to parse that JSON

470
00:22:26,020 --> 00:22:30,550
because for proving or finding the

471
00:22:28,510 --> 00:22:33,010
different parts you will have to process

472
00:22:30,550 --> 00:22:35,800
this JSON and get the links and nodes

473
00:22:33,010 --> 00:22:37,330
out of the output how do you do that you

474
00:22:35,800 --> 00:22:38,889
can write your own Python program you

475
00:22:37,330 --> 00:22:41,199
can write in Java whatever programming

476
00:22:38,890 --> 00:22:43,690
language this is just a suggestion on

477
00:22:41,200 --> 00:22:45,400
one of the tool which you can use but

478
00:22:43,690 --> 00:22:49,090
feel free to use whatever you want to

479
00:22:45,400 --> 00:22:52,480
use right so it's a JQ is a very

480
00:22:49,090 --> 00:22:54,939
lightweight json processor and you know

481
00:22:52,480 --> 00:22:58,140
like most of the vendors now allow you

482
00:22:54,940 --> 00:23:02,260
to convert your CLI output into JSON and

483
00:22:58,140 --> 00:23:04,120
also like XR v GP or any other tool by

484
00:23:02,260 --> 00:23:05,590
the way we have X a BGP already

485
00:23:04,120 --> 00:23:09,399
installed on the part so if you want to

486
00:23:05,590 --> 00:23:12,669
use it for DG pls and the output which

487
00:23:09,400 --> 00:23:15,580
we'll get from the parser you can take

488
00:23:12,670 --> 00:23:20,230
that JSON and run it through JQ to find

489
00:23:15,580 --> 00:23:22,510
out all your links and nodes so what is

490
00:23:20,230 --> 00:23:24,430
VQ it's it's same as like in the same

491
00:23:22,510 --> 00:23:28,840
family of tools as like said or graph

492
00:23:24,430 --> 00:23:31,870
and if you look at for Gamal that is why

493
00:23:28,840 --> 00:23:34,300
queue for XML there's XML starlett for

494
00:23:31,870 --> 00:23:38,080
HTML that is pop which is in the same

495
00:23:34,300 --> 00:23:40,810
category of tools single tool with no

496
00:23:38,080 --> 00:23:44,699
dependencies which you can install

497
00:23:40,810 --> 00:23:51,370
written in C and very very powerful and

498
00:23:44,700 --> 00:23:52,540
some extra stuff on JQ it's it's it's in

499
00:23:51,370 --> 00:23:54,760
the domain of the functional programming

500
00:23:52,540 --> 00:23:58,210
languages so you have things like nap

501
00:23:54,760 --> 00:24:02,640
filter select you can do flat nap

502
00:23:58,210 --> 00:24:06,580
and other things it's doing complete so

503
00:24:02,640 --> 00:24:10,360
you can take J cube and

504
00:24:06,580 --> 00:24:12,370
you can run or you can write an

505
00:24:10,360 --> 00:24:14,500
interpreter for someone has done it

506
00:24:12,370 --> 00:24:17,529
actually interpreter for a programming

507
00:24:14,500 --> 00:24:20,500
language called brain followed by a

508
00:24:17,529 --> 00:24:22,330
curse word starts with F and that

509
00:24:20,500 --> 00:24:24,940
programming language they have written

510
00:24:22,330 --> 00:24:26,889
interpreter in JQ which is Turing

511
00:24:24,940 --> 00:24:29,980
complete and what it means is anything

512
00:24:26,890 --> 00:24:33,669
which is computationally feasible to

513
00:24:29,980 --> 00:24:35,559
solve can be solved with JQ so that

514
00:24:33,669 --> 00:24:38,019
particular language is just 8 set of

515
00:24:35,559 --> 00:24:41,470
commands and instructions and it's

516
00:24:38,019 --> 00:24:43,179
during complete and an interpreter for

517
00:24:41,470 --> 00:24:44,950
that particular language is written in

518
00:24:43,179 --> 00:24:47,080
JQ so what I'm trying to say it's very

519
00:24:44,950 --> 00:24:49,419
very powerful it's a full feature set of

520
00:24:47,080 --> 00:24:51,639
a programming language like Java C or

521
00:24:49,419 --> 00:24:56,169
any other language which you normally

522
00:24:51,639 --> 00:24:59,019
use which you can do it in JQ so for

523
00:24:56,169 --> 00:25:01,899
going through JQ what we did is like

524
00:24:59,019 --> 00:25:06,010
just a simple example this is the CLI

525
00:25:01,899 --> 00:25:08,168
output on the left and and you have a

526
00:25:06,010 --> 00:25:10,450
JSON output on the right you pipe it to

527
00:25:08,169 --> 00:25:13,330
this position and you can get the JSON

528
00:25:10,450 --> 00:25:15,250
from this Juniper router so there are

529
00:25:13,330 --> 00:25:18,220
two blocks of a two interfaces the first

530
00:25:15,250 --> 00:25:21,580
block I have shown an equivalent JSON

531
00:25:18,220 --> 00:25:27,279
which will receive from the conversion

532
00:25:21,580 --> 00:25:29,350
of this into JSON format and the first

533
00:25:27,279 --> 00:25:31,419
and foremost important thing this is to

534
00:25:29,350 --> 00:25:32,889
understand the schema can use whatever

535
00:25:31,419 --> 00:25:34,600
you want to use use there are a number

536
00:25:32,889 --> 00:25:37,479
of tools online you can cut and paste

537
00:25:34,600 --> 00:25:40,000
the JSON output there and it can tell

538
00:25:37,480 --> 00:25:42,820
you that the schema of the JSON or you

539
00:25:40,000 --> 00:25:45,179
can go and read through this JSON and

540
00:25:42,820 --> 00:25:47,350
try to figure out what are the different

541
00:25:45,179 --> 00:25:48,700
attributes in the JSON what are the

542
00:25:47,350 --> 00:25:50,289
different arrays in there how many

543
00:25:48,700 --> 00:25:53,649
nestings of arrays in there and how can

544
00:25:50,289 --> 00:25:56,980
go to a particular level and then filter

545
00:25:53,649 --> 00:25:58,959
it out the NLRA types is something what

546
00:25:56,980 --> 00:26:00,940
you might have to look for to find out

547
00:25:58,960 --> 00:26:04,480
the links and nodes and go through your

548
00:26:00,940 --> 00:26:06,190
JSON and Jake you can help into that so

549
00:26:04,480 --> 00:26:07,929
we'll just concentrate on the first

550
00:26:06,190 --> 00:26:10,720
block because I didn't want to put too

551
00:26:07,929 --> 00:26:15,309
much on in terms of JSON formatted JSON

552
00:26:10,720 --> 00:26:17,980
on the screen so the top one is a the

553
00:26:15,309 --> 00:26:19,539
interface what the interface is what the

554
00:26:17,980 --> 00:26:21,970
is eyes agency

555
00:26:19,539 --> 00:26:27,549
level is what the state of it priority

556
00:26:21,970 --> 00:26:30,249
IP address and other things so I I mean

557
00:26:27,549 --> 00:26:32,559
if you guys are used to vs code you can

558
00:26:30,249 --> 00:26:34,389
just use a plug-in like JSON to TS and

559
00:26:32,559 --> 00:26:37,178
then quickly get the schema of your JSON

560
00:26:34,389 --> 00:26:38,590
and you will see there is at the top

561
00:26:37,179 --> 00:26:41,109
level there's a root object which

562
00:26:38,590 --> 00:26:43,749
contains and which contains an array of

563
00:26:41,109 --> 00:26:45,549
ice ice adjacency information then I

564
00:26:43,749 --> 00:26:47,609
said Jason's information contains

565
00:26:45,549 --> 00:26:50,408
attributes and I assess adjacency

566
00:26:47,609 --> 00:26:53,529
another nested array into it and that

567
00:26:50,409 --> 00:26:56,679
nested array is adjacency array has all

568
00:26:53,529 --> 00:26:58,450
the details which you need about the you

569
00:26:56,679 --> 00:26:59,979
know like if you want to figure out what

570
00:26:58,450 --> 00:27:04,509
the interface it or the name of the

571
00:26:59,979 --> 00:27:08,679
interface is and and if altima if you

572
00:27:04,509 --> 00:27:13,690
want to create a CSV out of it so the

573
00:27:08,679 --> 00:27:16,389
basic basic filter is a dot JQ as a

574
00:27:13,690 --> 00:27:18,999
concept of filter if you say JQ single

575
00:27:16,389 --> 00:27:23,769
code start and use it with your XML

576
00:27:18,999 --> 00:27:27,039
sorry with your JSON you can you can get

577
00:27:23,769 --> 00:27:30,099
a pretty print of your JSON that's a

578
00:27:27,039 --> 00:27:33,820
pretty plain filter the first one after

579
00:27:30,099 --> 00:27:35,889
that after the dot is two square

580
00:27:33,820 --> 00:27:39,220
brackets the square brackets opening and

581
00:27:35,889 --> 00:27:40,928
closing which is like a flat map of a

582
00:27:39,220 --> 00:27:44,769
functional programming language so it

583
00:27:40,929 --> 00:27:46,539
takes out the outer what you call the

584
00:27:44,769 --> 00:27:48,940
one after the I sized agency indeed

585
00:27:46,539 --> 00:27:51,429
formation that's an array the top array

586
00:27:48,940 --> 00:27:55,299
it will take it out it's like a flat map

587
00:27:51,429 --> 00:27:57,159
and gets you into the contents after

588
00:27:55,299 --> 00:28:00,849
that so let's say if you were interested

589
00:27:57,159 --> 00:28:03,429
in the xmlns attribute of it that's how

590
00:28:00,849 --> 00:28:05,859
you will write the you have taken out

591
00:28:03,429 --> 00:28:08,320
from the outer array then you've gone

592
00:28:05,859 --> 00:28:10,210
into the first element of it and because

593
00:28:08,320 --> 00:28:11,739
there is only one element inside that

594
00:28:10,210 --> 00:28:13,450
outer array and then you go into the

595
00:28:11,739 --> 00:28:16,389
attributes and then you want to get the

596
00:28:13,450 --> 00:28:18,669
XML and s value of it there is an online

597
00:28:16,389 --> 00:28:21,488
tool called JQ play dot org if you don't

598
00:28:18,669 --> 00:28:26,470
want to do it on the command line as you

599
00:28:21,489 --> 00:28:31,149
try out playing with JQ you will see the

600
00:28:26,470 --> 00:28:33,039
output on this on the right and then you

601
00:28:31,149 --> 00:28:33,489
can construct a test you would not do it

602
00:28:33,039 --> 00:28:35,590
in a prod

603
00:28:33,490 --> 00:28:37,960
an environment but you're all the JSON

604
00:28:35,590 --> 00:28:40,780
on a website like Jake you played our

605
00:28:37,960 --> 00:28:45,130
butt for this hack at least you can try

606
00:28:40,780 --> 00:28:50,200
it out and construct and play with this

607
00:28:45,130 --> 00:28:53,380
thing so if you want to go into the ISI

608
00:28:50,200 --> 00:28:56,260
agents edges and see the 0 and the it

609
00:28:53,380 --> 00:28:57,880
just sensory details you have to blocks

610
00:28:56,260 --> 00:28:59,710
the first one you want to go in the

611
00:28:57,880 --> 00:29:01,360
first interface and you want to get the

612
00:28:59,710 --> 00:29:04,050
name of that particular interface so

613
00:29:01,360 --> 00:29:07,899
this is the J cube query you can either

614
00:29:04,050 --> 00:29:10,690
pipe it because it's you it works like

615
00:29:07,900 --> 00:29:13,120
streams as well so you can get the JSON

616
00:29:10,690 --> 00:29:18,309
file and then pipe it to JQ and JK would

617
00:29:13,120 --> 00:29:23,350
print the name of the interface with

618
00:29:18,309 --> 00:29:27,070
this particular query then if there are

619
00:29:23,350 --> 00:29:30,879
multiple elements in an internal array

620
00:29:27,070 --> 00:29:33,070
and you want to filter it out with a

621
00:29:30,880 --> 00:29:35,230
particular criteria Here I am trying to

622
00:29:33,070 --> 00:29:38,139
filter it out with a select select

623
00:29:35,230 --> 00:29:41,559
interface name the data which the data

624
00:29:38,140 --> 00:29:46,090
constituent is a 0.0 so it will go into

625
00:29:41,559 --> 00:29:51,730
and and just get the a 0.0 element of

626
00:29:46,090 --> 00:29:55,540
that array internal array then the goal

627
00:29:51,730 --> 00:30:00,760
is to create a CSV so there are

628
00:29:55,540 --> 00:30:04,590
different operators in JQ you can form a

629
00:30:00,760 --> 00:30:07,360
JSON object out of the intermediate

630
00:30:04,590 --> 00:30:09,760
output obtained from JQ so the last part

631
00:30:07,360 --> 00:30:12,639
of this JQ query if you see after the

632
00:30:09,760 --> 00:30:15,970
select the last of last pipe is creating

633
00:30:12,640 --> 00:30:18,340
a custom json system name and interface

634
00:30:15,970 --> 00:30:20,710
name which you see in the output you can

635
00:30:18,340 --> 00:30:23,919
give any name of the property we want to

636
00:30:20,710 --> 00:30:28,780
but that's what you are getting it which

637
00:30:23,920 --> 00:30:32,440
will be used for creating a CSV so in

638
00:30:28,780 --> 00:30:35,350
this what we added is square brackets

639
00:30:32,440 --> 00:30:37,929
system name and interface name and then

640
00:30:35,350 --> 00:30:40,270
we are passing it to at CSV which spits

641
00:30:37,929 --> 00:30:42,610
out the CSV out this is just for one

642
00:30:40,270 --> 00:30:45,760
element of the array and that particular

643
00:30:42,610 --> 00:30:47,360
table so I mean it's too much to grasp

644
00:30:45,760 --> 00:30:49,940
in this 10 minutes but

645
00:30:47,360 --> 00:30:51,709
you have this PowerPoint you can look

646
00:30:49,940 --> 00:30:53,570
through it and go through the example

647
00:30:51,710 --> 00:30:56,360
and see it one additional thing is route

648
00:30:53,570 --> 00:30:58,970
put in this JQ statement this route put

649
00:30:56,360 --> 00:31:01,189
is to making sure that you proper like

650
00:30:58,970 --> 00:31:04,010
JK will try to escape the double quotes

651
00:31:01,190 --> 00:31:07,010
which is there in the output like vmx 19

652
00:31:04,010 --> 00:31:08,420
1 1 that is in double quotes already the

653
00:31:07,010 --> 00:31:10,010
data is already in double quotes so it

654
00:31:08,420 --> 00:31:11,929
will try to escape it out you don't want

655
00:31:10,010 --> 00:31:14,450
those extra double quotes so you can

656
00:31:11,929 --> 00:31:18,559
just use route put on Jake you play

657
00:31:14,450 --> 00:31:21,530
dot-org also you have a switch to turn

658
00:31:18,559 --> 00:31:24,830
on the output or a compact output or

659
00:31:21,530 --> 00:31:29,330
there are different options on line this

660
00:31:24,830 --> 00:31:31,520
one little bit change in the the Select

661
00:31:29,330 --> 00:31:35,149
query but now you are able to glean all

662
00:31:31,520 --> 00:31:39,639
the interfaces from the table and that's

663
00:31:35,150 --> 00:31:46,960
the CSV so think all links all nodes in

664
00:31:39,640 --> 00:31:46,960
this format any questions on Jake you

665
00:31:53,470 --> 00:31:58,780
you can write you a Python program to

666
00:31:55,510 --> 00:32:04,690
parse the JSON any language of your

667
00:31:58,780 --> 00:32:08,410
choice now for JSON there's nothing

668
00:32:04,690 --> 00:32:10,060
better than GQ if you want to if you up

669
00:32:08,410 --> 00:32:15,070
if you're thinking in terms of sad dark

670
00:32:10,060 --> 00:32:20,560
to do things rather than writing full

671
00:32:15,070 --> 00:32:22,840
flat Python program to parse or JSON key

672
00:32:20,560 --> 00:32:25,330
thing understanding the schema that's

673
00:32:22,840 --> 00:32:27,780
one if you understand the schema this

674
00:32:25,330 --> 00:32:35,379
particular tool allows you to quickly

675
00:32:27,780 --> 00:32:39,040
frame queries so now the bonus part if

676
00:32:35,380 --> 00:32:41,440
you want to do visualization graph Anna

677
00:32:39,040 --> 00:32:43,240
is already installed in flux Vivi's

678
00:32:41,440 --> 00:32:47,590
already installed graph on is running on

679
00:32:43,240 --> 00:32:52,540
the normal port for 3000 you can you can

680
00:32:47,590 --> 00:32:55,720
format your output from what you get

681
00:32:52,540 --> 00:32:56,350
from JQ into or what you want what you

682
00:32:55,720 --> 00:32:59,980
want

683
00:32:56,350 --> 00:33:02,919
the proach to look like said suggested

684
00:32:59,980 --> 00:33:07,810
some are one or two or three or five you

685
00:33:02,920 --> 00:33:13,330
can create those probes and and kind of

686
00:33:07,810 --> 00:33:16,899
like do you create those probes and then

687
00:33:13,330 --> 00:33:19,419
you run your program which is capi to

688
00:33:16,900 --> 00:33:21,670
send to the different devices once you

689
00:33:19,420 --> 00:33:25,620
get the packet back you open it up you

690
00:33:21,670 --> 00:33:28,810
check what you got in that try to create

691
00:33:25,620 --> 00:33:31,330
kind of like something which you can

692
00:33:28,810 --> 00:33:33,760
insert at time series data into in flux

693
00:33:31,330 --> 00:33:38,020
once it gets inserted into in flux you

694
00:33:33,760 --> 00:33:41,620
can see it on Gravano so this one

695
00:33:38,020 --> 00:33:43,960
example this is the format is called

696
00:33:41,620 --> 00:33:45,820
Klein protocol format order in flux you

697
00:33:43,960 --> 00:33:48,130
can create a text file like this you can

698
00:33:45,820 --> 00:33:50,860
import into in flux this in this there I

699
00:33:48,130 --> 00:33:54,190
am using two tags the probe number and

700
00:33:50,860 --> 00:33:55,659
the time the RTT time and the sequence

701
00:33:54,190 --> 00:33:57,970
number if you are using something like a

702
00:33:55,660 --> 00:33:59,530
sequence number or the probe number it's

703
00:33:57,970 --> 00:34:01,680
up to you to design whatever you want to

704
00:33:59,530 --> 00:34:04,420
do and then the timestamp at which you

705
00:34:01,680 --> 00:34:07,480
receive the packet back these are the

706
00:34:04,420 --> 00:34:11,560
data points for in flux you can improve

707
00:34:07,480 --> 00:34:14,650
influx into import this data into influx

708
00:34:11,560 --> 00:34:17,290
with this once you are on a graph on ax

709
00:34:14,650 --> 00:34:21,700
admin admin is the password and your

710
00:34:17,290 --> 00:34:25,389
part go to port 3000 login and then you

711
00:34:21,699 --> 00:34:26,919
have you have to configure for the first

712
00:34:25,389 --> 00:34:29,770
time it will ask you to change the

713
00:34:26,920 --> 00:34:32,710
password you leave it is the same as

714
00:34:29,770 --> 00:34:35,920
admin and then you show the data source

715
00:34:32,710 --> 00:34:38,470
as in flux try to connect it and flips

716
00:34:35,920 --> 00:34:42,909
by default runs on port 80 0 it's sorry

717
00:34:38,469 --> 00:34:44,830
yeah put 8 0 8 say 8 6 and then you can

718
00:34:42,909 --> 00:34:47,319
check their connectivity and you should

719
00:34:44,830 --> 00:34:53,529
get something the data source is working

720
00:34:47,320 --> 00:34:56,050
properly so and then you have graph Anna

721
00:34:53,530 --> 00:34:58,270
you have panels and you can create the

722
00:34:56,050 --> 00:35:00,250
panels you can specify the query like

723
00:34:58,270 --> 00:35:03,040
what probe what value you have to look

724
00:35:00,250 --> 00:35:04,900
for you can create multiple panels so

725
00:35:03,040 --> 00:35:06,700
play with it if you agree to the bonus

726
00:35:04,900 --> 00:35:10,420
stage if you need help we are here we

727
00:35:06,700 --> 00:35:11,770
can point to like write tutorials or

728
00:35:10,420 --> 00:35:14,170
whatever there is already some links

729
00:35:11,770 --> 00:35:16,600
there or we can help you to create the

730
00:35:14,170 --> 00:35:18,760
dashboards so these are the packages

731
00:35:16,600 --> 00:35:23,529
already installed on the part scappini

732
00:35:18,760 --> 00:35:26,580
network ax X a VG p JQ n flux and this

733
00:35:23,530 --> 00:35:31,290
is the credentials and the login details

734
00:35:26,580 --> 00:35:31,290
questions for both of us

735
00:35:55,160 --> 00:35:58,950
yea-ah

736
00:35:56,520 --> 00:36:02,130
so special thanks to two pseudo I'll for

737
00:35:58,950 --> 00:36:03,750
setting up laughs for us man see your

738
00:36:02,130 --> 00:36:10,050
paper with all the details how he can

739
00:36:03,750 --> 00:36:12,930
access the lab let's get started

740
00:36:10,050 --> 00:36:16,890
these are all the links probably you'll

741
00:36:12,930 --> 00:36:22,230
need to so like Scapa cheat sheet JQ

742
00:36:16,890 --> 00:36:23,730
playground that Deepak mentioned you

743
00:36:22,230 --> 00:36:26,400
cannot hear you okay cool

744
00:36:23,730 --> 00:36:28,500
better okay so all the useful links so

745
00:36:26,400 --> 00:36:31,380
Scapa cheat sheet that you can use to

746
00:36:28,500 --> 00:36:35,430
construct packet JQ playground that

747
00:36:31,380 --> 00:36:38,300
Deepak mansion some crap on a docks and

748
00:36:35,430 --> 00:36:40,200
get repo for getting all the slides and

749
00:36:38,300 --> 00:36:42,330
actually some of the documents so

750
00:36:40,200 --> 00:36:45,270
there's a nice diagram of topology that

751
00:36:42,330 --> 00:36:48,480
you can pull from if you just clone that

752
00:36:45,270 --> 00:36:50,280
git repo on your laptop so you'll get

753
00:36:48,480 --> 00:36:55,020
all the slides and other information

754
00:36:50,280 --> 00:36:57,630
that we have put in that git repo I'll

755
00:36:55,020 --> 00:37:00,810
leave this slide on so you can use all

756
00:36:57,630 --> 00:37:05,190
the links on this slide and let's get

757
00:37:00,810 --> 00:37:12,500
started I'll give it to Michael so does

758
00:37:05,190 --> 00:37:16,760
anybody not have a team okay we have

759
00:37:12,500 --> 00:37:16,760
just one just one person

760
00:37:19,329 --> 00:37:26,299
okay so so anyway so anybody who doesn't

761
00:37:24,920 --> 00:37:30,729
have a team please raise your hand

762
00:37:26,299 --> 00:37:33,140
so everybody look around at the piece so

763
00:37:30,729 --> 00:37:34,939
the people that have raised their hands

764
00:37:33,140 --> 00:37:37,098
you could go and talk to other people to

765
00:37:34,940 --> 00:37:39,349
see what they're working on and anybody

766
00:37:37,099 --> 00:37:40,640
who does have a team and saw somebody

767
00:37:39,349 --> 00:37:42,739
raising their hand if they want to be

768
00:37:40,640 --> 00:37:44,269
kind enough to reach out maybe say like

769
00:37:42,739 --> 00:37:45,769
hey you should come and join my team

770
00:37:44,269 --> 00:37:48,529
because my team's going to do this

771
00:37:45,769 --> 00:37:50,709
amazing thing so once your teams are

772
00:37:48,529 --> 00:37:50,710
formed

773
00:37:55,900 --> 00:38:05,930
yeah would would anybody like to so

774
00:38:00,109 --> 00:38:09,710
anybody who is not working on the goals

775
00:38:05,930 --> 00:38:11,660
that Syed and Deepak presented on if

776
00:38:09,710 --> 00:38:13,309
anybody is doing their own project would

777
00:38:11,660 --> 00:38:16,578
you like to come up here and pitch to

778
00:38:13,309 --> 00:38:18,969
the three people who do not have do not

779
00:38:16,579 --> 00:38:18,969
have teams

780
00:38:26,200 --> 00:38:32,470
oh thanks so much hi I'm Ryan rod and

781
00:38:30,610 --> 00:38:35,080
I'm a network architect with conversin

782
00:38:32,470 --> 00:38:36,819
based out of Chicago and I'm gonna be

783
00:38:35,080 --> 00:38:38,799
continuing hopefully a project that

784
00:38:36,820 --> 00:38:43,270
started at the first and hackathon in

785
00:38:38,800 --> 00:38:45,070
2016 which was to assemble commodity

786
00:38:43,270 --> 00:38:47,740
console servers from raspberry PI's or

787
00:38:45,070 --> 00:38:51,190
similar hardware the goal was to have it

788
00:38:47,740 --> 00:38:53,410
be a self discovering SS aging back to

789
00:38:51,190 --> 00:38:54,550
the central server so that you can SSH

790
00:38:53,410 --> 00:38:56,290
directly into the device across

791
00:38:54,550 --> 00:38:58,780
firewalls and other network boundaries I

792
00:38:56,290 --> 00:39:00,700
have them be self discovering so you

793
00:38:58,780 --> 00:39:01,900
have a single view of all consoles and

794
00:39:00,700 --> 00:39:04,899
their downstream connected devices

795
00:39:01,900 --> 00:39:06,100
ideally a WebSockets browser client so

796
00:39:04,900 --> 00:39:07,860
you can point-and-click to gain access

797
00:39:06,100 --> 00:39:10,870
to the server the downstream devices

798
00:39:07,860 --> 00:39:12,700
through the browser and a bunch of other

799
00:39:10,870 --> 00:39:14,259
use cases that would help you know

800
00:39:12,700 --> 00:39:15,790
rather than having to talk somebody in a

801
00:39:14,260 --> 00:39:17,830
remote office through connect you know

802
00:39:15,790 --> 00:39:19,540
to this console port and web X here and

803
00:39:17,830 --> 00:39:21,130
type these commands to get it you know

804
00:39:19,540 --> 00:39:23,140
fix something or deploying your network

805
00:39:21,130 --> 00:39:25,120
this is a device you maybe could ship

806
00:39:23,140 --> 00:39:26,950
out with a 4G dongle attached to it and

807
00:39:25,120 --> 00:39:29,109
it phones home as soon as powered up and

808
00:39:26,950 --> 00:39:30,310
plugged into something else we used

809
00:39:29,110 --> 00:39:35,020
within Deus era networks know their

810
00:39:30,310 --> 00:39:36,910
locations so in nano 67 hackathon we had

811
00:39:35,020 --> 00:39:39,009
developed a framework where it's self

812
00:39:36,910 --> 00:39:40,750
registered with the main API you could

813
00:39:39,010 --> 00:39:42,420
see the list of active devices and there

814
00:39:40,750 --> 00:39:45,190
are downstream ports that were available

815
00:39:42,420 --> 00:39:47,800
they opened SSH connection back to the

816
00:39:45,190 --> 00:39:51,160
specified SSH server and the next steps

817
00:39:47,800 --> 00:39:53,740
would be working on getting that console

818
00:39:51,160 --> 00:39:56,020
port exposed via a command or a command

819
00:39:53,740 --> 00:39:58,180
line or SSH access and then ideally the

820
00:39:56,020 --> 00:40:00,730
WebSocket server and client if anybody

821
00:39:58,180 --> 00:40:03,220
is interested in that this is a whole

822
00:40:00,730 --> 00:40:04,210
all in Python 3 so anybody who's

823
00:40:03,220 --> 00:40:06,850
comfortable with that and knows

824
00:40:04,210 --> 00:40:07,450
WebSockets in particular I have no

825
00:40:06,850 --> 00:40:09,490
knowledge of that

826
00:40:07,450 --> 00:40:11,649
and could use a help with that aspect of

827
00:40:09,490 --> 00:40:12,850
it so if Emily's interested I'm over

828
00:40:11,650 --> 00:40:14,620
there I've got some hardware with me to

829
00:40:12,850 --> 00:40:22,230
help facilitate development testing as

830
00:40:14,620 --> 00:40:22,230
well thank you anybody else

831
00:40:24,650 --> 00:40:30,750
okay so once you have your teams formed

832
00:40:27,980 --> 00:40:32,820
please send a representative up to the

833
00:40:30,750 --> 00:40:33,930
front table to get some instructions on

834
00:40:32,820 --> 00:40:37,370
how to set up your virtual

835
00:40:33,930 --> 00:40:40,649
infrastructure as well as let's know

836
00:40:37,370 --> 00:40:43,259
what pod you are so that people aren't

837
00:40:40,650 --> 00:40:44,940
everybody's not going to try to work on

838
00:40:43,260 --> 00:40:46,200
the same virtual infrastructure and then

839
00:40:44,940 --> 00:40:48,020
you'll can also write down all the

840
00:40:46,200 --> 00:40:51,210
members of your team so we know who

841
00:40:48,020 --> 00:40:57,570
who's working on what project okay

842
00:40:51,210 --> 00:40:59,430
any other general questions all right

843
00:40:57,570 --> 00:41:01,170
good luck today if you have any

844
00:40:59,430 --> 00:41:02,970
questions you could visit this table up

845
00:41:01,170 --> 00:41:05,970
in the front or the table way in the

846
00:41:02,970 --> 00:41:09,859
back ends one of your friendly hackathon

847
00:41:05,970 --> 00:41:14,790
mentors will help out all right like

848
00:41:09,860 --> 00:41:16,860
okay so we followed the god today and

849
00:41:14,790 --> 00:41:19,100
basically an overview of what we did was

850
00:41:16,860 --> 00:41:22,170
be established bgp and the dev boxes

851
00:41:19,100 --> 00:41:24,779
received and parceling state information

852
00:41:22,170 --> 00:41:26,550
with EXA bgp we fed that into that work

853
00:41:24,780 --> 00:41:27,750
x2 builder graft and as a weighted

854
00:41:26,550 --> 00:41:30,650
weights and edges so we can calculate

855
00:41:27,750 --> 00:41:33,180
the best path using network X and then

856
00:41:30,650 --> 00:41:37,560
finally we crafted some packets with

857
00:41:33,180 --> 00:41:40,350
escapee to test link for failure

858
00:41:37,560 --> 00:41:41,940
scenarios so first basically we ran into

859
00:41:40,350 --> 00:41:43,589
an issue with XM easy P at the beginning

860
00:41:41,940 --> 00:41:45,390
we didn't think it was installed just

861
00:41:43,590 --> 00:41:47,250
because the binary wasn't accessible so

862
00:41:45,390 --> 00:41:49,620
lost a little bit of time doing an

863
00:41:47,250 --> 00:41:51,420
apt-get install and then the boon to

864
00:41:49,620 --> 00:41:53,310
version actually ended up having a bug

865
00:41:51,420 --> 00:41:55,560
where it tried to send md5 for

866
00:41:53,310 --> 00:41:57,630
everything so lost a little bit of time

867
00:41:55,560 --> 00:41:59,430
on that but once we use the installed

868
00:41:57,630 --> 00:42:02,810
version provided we were able to

869
00:41:59,430 --> 00:42:05,970
establish BGP on the boxes and then

870
00:42:02,810 --> 00:42:08,070
parse out you're able to parse output

871
00:42:05,970 --> 00:42:10,500
via script received for each route

872
00:42:08,070 --> 00:42:11,670
received we weren't able to get that

873
00:42:10,500 --> 00:42:12,750
working we were playing around with it a

874
00:42:11,670 --> 00:42:15,090
little bit but we weren't able to get

875
00:42:12,750 --> 00:42:19,050
that JSON so what we did as a workaround

876
00:42:15,090 --> 00:42:21,270
was once once we have BGP established of

877
00:42:19,050 --> 00:42:22,470
course not only is the dev box receiving

878
00:42:21,270 --> 00:42:24,870
the route but the juniper is also

879
00:42:22,470 --> 00:42:27,600
sending the route so we logged on to the

880
00:42:24,870 --> 00:42:29,790
juniper box and just did the show route

881
00:42:27,600 --> 00:42:32,460
advertising protocol BGP piped it the

882
00:42:29,790 --> 00:42:35,430
display JSON copy that into a file and

883
00:42:32,460 --> 00:42:36,930
then pasted it into a Python interpreter

884
00:42:35,430 --> 00:42:38,069
played around a little bit with that

885
00:42:36,930 --> 00:42:40,210
and that we're

886
00:42:38,070 --> 00:42:42,300
x4 network X we just did a couple

887
00:42:40,210 --> 00:42:46,720
imports we added the correct weights

888
00:42:42,300 --> 00:42:49,030
that were fed to us from from the BGP LS

889
00:42:46,720 --> 00:42:50,980
information and then using Network X we

890
00:42:49,030 --> 00:42:53,050
were able to calculate both best pass

891
00:42:50,980 --> 00:42:55,450
using the provided single source

892
00:42:53,050 --> 00:43:00,670
Dijkstra path method available in

893
00:42:55,450 --> 00:43:05,799
network X and force KP I'm gonna pass it

894
00:43:00,670 --> 00:43:07,780
off so for this KP initially it got a

895
00:43:05,800 --> 00:43:09,970
bit tricky in at least sending out the

896
00:43:07,780 --> 00:43:11,440
ICMP ping packets as well but eventually

897
00:43:09,970 --> 00:43:13,480
we were successful enough to actually

898
00:43:11,440 --> 00:43:17,020
send that and then we started forming

899
00:43:13,480 --> 00:43:19,060
more packets the GRE and cap packets and

900
00:43:17,020 --> 00:43:20,590
then sending them forward so based on

901
00:43:19,060 --> 00:43:24,279
whatever information we received from

902
00:43:20,590 --> 00:43:26,290
the network X we had those many paths in

903
00:43:24,280 --> 00:43:29,170
there and those many packets for each of

904
00:43:26,290 --> 00:43:33,270
those paths and we send them in a loop

905
00:43:29,170 --> 00:43:36,520
and after that like so when we run the

906
00:43:33,270 --> 00:43:40,509
sniff script where we are actually

907
00:43:36,520 --> 00:43:44,050
sniffing for those packets so we get for

908
00:43:40,510 --> 00:43:48,370
all the paths we get these so it

909
00:43:44,050 --> 00:43:50,350
calculates the RTD and then as you see

910
00:43:48,370 --> 00:43:52,480
the second loss field it's like one two

911
00:43:50,350 --> 00:43:55,000
five three one is nothing but the router

912
00:43:52,480 --> 00:43:55,750
path that it takes basically R 1 R 2 R 5

913
00:43:55,000 --> 00:43:58,660
and so on

914
00:43:55,750 --> 00:44:02,110
for all of those paths so we had that

915
00:43:58,660 --> 00:44:04,450
and a transfer says fully for n number

916
00:44:02,110 --> 00:44:07,810
of packets being generated and then we

917
00:44:04,450 --> 00:44:09,700
did the failure scenario where we say

918
00:44:07,810 --> 00:44:12,460
for instance our link goes down between

919
00:44:09,700 --> 00:44:15,430
r2 and r4 and it was able to sniff and

920
00:44:12,460 --> 00:44:18,040
probe correctly that information that

921
00:44:15,430 --> 00:44:20,740
all the routes I mean all the paths that

922
00:44:18,040 --> 00:44:22,779
included that link wall down and but it

923
00:44:20,740 --> 00:44:24,370
was successfully able to probe the rest

924
00:44:22,780 --> 00:44:28,390
of the links which was still up not

925
00:44:24,370 --> 00:44:32,100
using that link so that's that was

926
00:44:28,390 --> 00:44:34,450
pretty much with this KP and yeah so

927
00:44:32,100 --> 00:44:36,069
this is what we had today so then for

928
00:44:34,450 --> 00:44:38,169
future work we were looking to actually

929
00:44:36,070 --> 00:44:39,940
take the data you saw in the last slide

930
00:44:38,170 --> 00:44:41,230
and actually record it into in flux and

931
00:44:39,940 --> 00:44:43,510
maybe visualize it with the graph on oh

932
00:44:41,230 --> 00:44:45,010
and then we can actually set up some

933
00:44:43,510 --> 00:44:46,480
alerts with a graph on I let's say I'll

934
00:44:45,010 --> 00:44:48,100
link down or something like that so

935
00:44:46,480 --> 00:44:50,220
that's what we have thanks so much for

936
00:44:48,100 --> 00:44:50,220
listening

937
00:44:50,300 --> 00:44:55,500
[Applause]

938
00:44:53,119 --> 00:44:57,299
when we were continuing work on the

939
00:44:55,500 --> 00:45:01,940
PyCon project I was describing earlier

940
00:44:57,299 --> 00:45:04,230
from the Nanna hackathon of 2016 the

941
00:45:01,940 --> 00:45:05,790
recap of the use cases we're looking to

942
00:45:04,230 --> 00:45:07,230
solve or cases where you're deploying

943
00:45:05,790 --> 00:45:09,299
new equipment in the field or having to

944
00:45:07,230 --> 00:45:11,480
talk users through troubleshooting over

945
00:45:09,299 --> 00:45:13,619
the phone they may not be equipped to do

946
00:45:11,480 --> 00:45:16,380
the goal was to take some commodity

947
00:45:13,619 --> 00:45:17,940
hardware and solve this faster and

948
00:45:16,380 --> 00:45:21,089
cheaper than some off-the-shelf

949
00:45:17,940 --> 00:45:22,349
proprietary platforms that you might

950
00:45:21,089 --> 00:45:25,040
have a longer lead time to get and

951
00:45:22,349 --> 00:45:27,930
configure and deploy in your environment

952
00:45:25,040 --> 00:45:29,609
the overall mechanism that was already

953
00:45:27,930 --> 00:45:31,950
in place prior to today is that the

954
00:45:29,609 --> 00:45:33,900
devices can be deployed they call back

955
00:45:31,950 --> 00:45:35,848
to the central API that the agent is

956
00:45:33,900 --> 00:45:38,130
started with and they report their

957
00:45:35,849 --> 00:45:39,510
addresses the port's that they're the

958
00:45:38,130 --> 00:45:41,400
console ports they have available and

959
00:45:39,510 --> 00:45:44,250
then they can also be given information

960
00:45:41,400 --> 00:45:47,940
to tunnel back to an SSH server for

961
00:45:44,250 --> 00:45:49,440
remote SSH access in the future I think

962
00:45:47,940 --> 00:45:50,970
we're all familiar with the kind of

963
00:45:49,440 --> 00:45:52,799
ubiquity of Raspberry Pi on the related

964
00:45:50,970 --> 00:45:54,839
hardware the last few years it's cheap

965
00:45:52,799 --> 00:45:57,359
its reliable it's easy to stock and

966
00:45:54,839 --> 00:46:01,170
deploy and automate against with your

967
00:45:57,359 --> 00:46:02,880
software of choice our next steps that

968
00:46:01,170 --> 00:46:04,170
we outlined a few years ago that the

969
00:46:02,880 --> 00:46:08,309
project's been pretty much dormant since

970
00:46:04,170 --> 00:46:09,930
then was to apply some add some

971
00:46:08,309 --> 00:46:12,359
WebSockets to get a browser-based

972
00:46:09,930 --> 00:46:15,089
experience to access the console and

973
00:46:12,359 --> 00:46:17,640
potentially have simultaneous use or

974
00:46:15,089 --> 00:46:19,799
maybe exclusivity and then also have

975
00:46:17,640 --> 00:46:22,440
more UI and API enhancements that you

976
00:46:19,799 --> 00:46:24,630
can interact with the the data manually

977
00:46:22,440 --> 00:46:28,140
or programmatically to automate against

978
00:46:24,630 --> 00:46:31,980
it as well so today we were picking up

979
00:46:28,140 --> 00:46:33,540
where we left off and the agent does

980
00:46:31,980 --> 00:46:34,829
startup it registers it reports

981
00:46:33,540 --> 00:46:36,240
everything and it gets some config

982
00:46:34,829 --> 00:46:40,440
information back for the tunnel server

983
00:46:36,240 --> 00:46:42,899
this is nothing particularly new in the

984
00:46:40,440 --> 00:46:45,000
UI we made some enhancements for how the

985
00:46:42,900 --> 00:46:46,799
data is presented and also started

986
00:46:45,000 --> 00:46:49,309
adding the capability for the server to

987
00:46:46,799 --> 00:46:51,270
take some configuration data of how the

988
00:46:49,309 --> 00:46:53,670
console is connected to downstream

989
00:46:51,270 --> 00:46:55,680
devices so in this case the main thing

990
00:46:53,670 --> 00:46:58,049
demonstrated is the de port descriptions

991
00:46:55,680 --> 00:47:00,149
which are configurable in the device

992
00:46:58,049 --> 00:47:01,500
details page you're able to click on

993
00:47:00,150 --> 00:47:02,670
those and edit them through the page as

994
00:47:01,500 --> 00:47:04,530
opposed to have to as

995
00:47:02,670 --> 00:47:07,080
to have to hard code it in the database

996
00:47:04,530 --> 00:47:10,020
or any llamó files this came with some

997
00:47:07,080 --> 00:47:11,940
changes to how the console port

998
00:47:10,020 --> 00:47:14,040
information is aged and tracked in the

999
00:47:11,940 --> 00:47:16,080
database as well so that this

1000
00:47:14,040 --> 00:47:21,630
information and other information can be

1001
00:47:16,080 --> 00:47:23,279
persisted as configuration Oliver also

1002
00:47:21,630 --> 00:47:26,820
made a lot of progress on researching

1003
00:47:23,280 --> 00:47:28,530
the WebSockets functionality and we got

1004
00:47:26,820 --> 00:47:30,300
a proof-of-concept embedded so that

1005
00:47:28,530 --> 00:47:32,460
multiple users can load the WebSockets

1006
00:47:30,300 --> 00:47:34,950
now you're able to see actions replicate

1007
00:47:32,460 --> 00:47:36,000
from one user to another however we

1008
00:47:34,950 --> 00:47:38,669
don't have it interacting with the

1009
00:47:36,000 --> 00:47:40,110
console back-end yet we do have a script

1010
00:47:38,670 --> 00:47:42,480
made by another teammate that is able to

1011
00:47:40,110 --> 00:47:44,310
open the serial console and that can be

1012
00:47:42,480 --> 00:47:45,990
embedded in the agent as part of our the

1013
00:47:44,310 --> 00:47:49,259
next steps on the project to hopefully

1014
00:47:45,990 --> 00:47:50,430
get some data flowing across it so we

1015
00:47:49,260 --> 00:47:52,470
gained a bunch of experience with

1016
00:47:50,430 --> 00:47:54,029
researching into WebSockets and then the

1017
00:47:52,470 --> 00:47:55,740
asynchronous workflows that come with

1018
00:47:54,030 --> 00:47:58,230
that I think none of us have really ever

1019
00:47:55,740 --> 00:48:00,419
touched anything like this before

1020
00:47:58,230 --> 00:48:02,340
interacting with the tty through the

1021
00:48:00,420 --> 00:48:05,070
Python serial module was a first for all

1022
00:48:02,340 --> 00:48:07,530
of us as well and then also we kind of

1023
00:48:05,070 --> 00:48:09,810
brushed off some of our experience with

1024
00:48:07,530 --> 00:48:11,460
bootstrap and jQuery to make some of

1025
00:48:09,810 --> 00:48:14,940
these UI changes and implement more a

1026
00:48:11,460 --> 00:48:16,290
few more api routes and then i describe

1027
00:48:14,940 --> 00:48:21,030
some of those UI tweaks and progress

1028
00:48:16,290 --> 00:48:23,940
made their takeaways are flask and

1029
00:48:21,030 --> 00:48:25,560
bootstrap do simplify non-developer aka

1030
00:48:23,940 --> 00:48:27,330
network engineer and and other people

1031
00:48:25,560 --> 00:48:29,490
hacking on this the progress is

1032
00:48:27,330 --> 00:48:30,540
accelerated however when you go to do

1033
00:48:29,490 --> 00:48:32,069
something like WebSockets and

1034
00:48:30,540 --> 00:48:34,350
asynchronous i/o and everything else

1035
00:48:32,070 --> 00:48:36,540
especially through a stack like we are

1036
00:48:34,350 --> 00:48:39,089
trying to aim for it is much more

1037
00:48:36,540 --> 00:48:41,000
humbling of an experience so trying to

1038
00:48:39,090 --> 00:48:44,760
implement the whole workflow through the

1039
00:48:41,000 --> 00:48:46,650
WebSockets front-end the API and and

1040
00:48:44,760 --> 00:48:48,210
kind of database middle layer and then

1041
00:48:46,650 --> 00:48:49,530
the real time interaction with the

1042
00:48:48,210 --> 00:48:51,510
consoles will take quite a bit more

1043
00:48:49,530 --> 00:48:53,810
planning but we have a few more building

1044
00:48:51,510 --> 00:48:55,710
blocks and proof concepts to work with

1045
00:48:53,810 --> 00:48:56,759
that's pretty much it thanks to

1046
00:48:55,710 --> 00:48:57,880
everybody on the team for your help

1047
00:48:56,760 --> 00:49:03,410
today

1048
00:48:57,880 --> 00:49:08,670
[Applause]

1049
00:49:03,410 --> 00:49:15,118
so hot hi everyone so we are the rookies

1050
00:49:08,670 --> 00:49:19,259
I'm to me now run off ribbon and sudden

1051
00:49:15,119 --> 00:49:19,650
shoot if I'm correct yeah so the next

1052
00:49:19,259 --> 00:49:21,779
line

1053
00:49:19,650 --> 00:49:23,130
yeah so this is the roadmap that we

1054
00:49:21,779 --> 00:49:25,710
decided to follow

1055
00:49:23,130 --> 00:49:30,089
we decided first to get of course the

1056
00:49:25,710 --> 00:49:32,910
topology of the of the network and then

1057
00:49:30,089 --> 00:49:37,288
to try to we try to build the network

1058
00:49:32,910 --> 00:49:40,288
graph and to use this graph to get the

1059
00:49:37,289 --> 00:49:43,529
only possible path to the two hosts and

1060
00:49:40,289 --> 00:49:49,099
then we try to construct construct probe

1061
00:49:43,529 --> 00:49:52,349
packets and they last the last step was

1062
00:49:49,099 --> 00:49:55,170
introducing and accounting failures but

1063
00:49:52,349 --> 00:49:57,930
wasn't able to do that so we just we

1064
00:49:55,170 --> 00:50:01,079
divided the team into two smaller groups

1065
00:49:57,930 --> 00:50:03,480
the first team or the first group was

1066
00:50:01,079 --> 00:50:07,680
supposed to do the three first part and

1067
00:50:03,480 --> 00:50:12,359
the second team was working on the three

1068
00:50:07,680 --> 00:50:15,210
last the three last parts that you can

1069
00:50:12,359 --> 00:50:19,380
see on the on the board so pro now we

1070
00:50:15,210 --> 00:50:21,150
will talk about this overview so this is

1071
00:50:19,380 --> 00:50:23,640
the overview block diagram of what we

1072
00:50:21,150 --> 00:50:25,470
were trying to do the ones in green is

1073
00:50:23,640 --> 00:50:27,210
once which were successfully able to do

1074
00:50:25,470 --> 00:50:29,308
it most of it and the light green Sun

1075
00:50:27,210 --> 00:50:32,670
were we ran out of time you were unable

1076
00:50:29,309 --> 00:50:36,150
to implement it so as you can see we use

1077
00:50:32,670 --> 00:50:37,799
X a BGP to collect the flows and you we

1078
00:50:36,150 --> 00:50:40,319
wrote a script to parse that information

1079
00:50:37,799 --> 00:50:43,319
and write it to a database for this

1080
00:50:40,319 --> 00:50:45,210
hackathon we just use yes we we didn't

1081
00:50:43,319 --> 00:50:48,269
have enough time to move to enter in

1082
00:50:45,210 --> 00:50:50,460
flux TB so we just stuck to CSV and we

1083
00:50:48,269 --> 00:50:53,819
had visualization on one side and we set

1084
00:50:50,460 --> 00:50:56,880
up an alert square email us email client

1085
00:50:53,819 --> 00:50:59,250
if it sees any changes it says sense was

1086
00:50:56,880 --> 00:51:00,779
an email and we have pro packets which

1087
00:50:59,250 --> 00:51:02,730
the team too has worked on they will

1088
00:51:00,779 --> 00:51:05,759
talk more about it and integrate into

1089
00:51:02,730 --> 00:51:07,950
the part selection for passing the data

1090
00:51:05,759 --> 00:51:10,950
we took the data which was being written

1091
00:51:07,950 --> 00:51:13,078
into our text file and we were passing

1092
00:51:10,950 --> 00:51:13,890
that information and writing into a CSV

1093
00:51:13,079 --> 00:51:16,019
file

1094
00:51:13,890 --> 00:51:18,390
collecting all the informations all the

1095
00:51:16,019 --> 00:51:20,098
information which we need it in two

1096
00:51:18,390 --> 00:51:21,089
separate files one for notes and one for

1097
00:51:20,099 --> 00:51:22,380
links so that we have clear

1098
00:51:21,089 --> 00:51:25,828
understanding of what's happening where

1099
00:51:22,380 --> 00:51:27,749
and then we used used Network X to

1100
00:51:25,829 --> 00:51:34,680
visualize this information and which

1101
00:51:27,749 --> 00:51:38,910
Lazar attributes related to that hello

1102
00:51:34,680 --> 00:51:42,359
for the second part we started trying to

1103
00:51:38,910 --> 00:51:47,219
or we were struggling to how to identify

1104
00:51:42,359 --> 00:51:48,420
the best possible path so we basically

1105
00:51:47,219 --> 00:51:50,400
get the notes and they're linked

1106
00:51:48,420 --> 00:51:53,459
information from the from Abitibi link

1107
00:51:50,400 --> 00:51:56,489
estate but at some point we assume that

1108
00:51:53,459 --> 00:51:58,979
we're going to have equal cost and we

1109
00:51:56,489 --> 00:52:00,630
discard to the possibility to to to

1110
00:51:58,979 --> 00:52:02,729
calculate the best path from the from

1111
00:52:00,630 --> 00:52:05,969
the house point of view so we basically

1112
00:52:02,729 --> 00:52:07,950
live for for for later on and please

1113
00:52:05,969 --> 00:52:10,200
Jane so we basically put the effort

1114
00:52:07,950 --> 00:52:12,808
because it took it took us some time to

1115
00:52:10,200 --> 00:52:16,499
build a profile send and automate the

1116
00:52:12,809 --> 00:52:19,440
the continuous probe sending that we

1117
00:52:16,499 --> 00:52:22,169
basically implemented as a cron job in

1118
00:52:19,440 --> 00:52:24,269
the in the dev device so we are

1119
00:52:22,170 --> 00:52:29,130
constantly monitoring their reach

1120
00:52:24,269 --> 00:52:31,439
ability for future roadmap Bob we want

1121
00:52:29,130 --> 00:52:33,809
to clean up the instead of using CSV use

1122
00:52:31,440 --> 00:52:35,940
in flex DB and cleaning up the email

1123
00:52:33,809 --> 00:52:38,249
client I have a very busy basic humidity

1124
00:52:35,940 --> 00:52:39,959
line and make it as close to real time

1125
00:52:38,249 --> 00:52:42,439
as possible both visualization as well

1126
00:52:39,959 --> 00:52:45,719
as alerts when it comes to alerting and

1127
00:52:42,440 --> 00:52:48,390
best part calculation what we want to

1128
00:52:45,719 --> 00:52:50,309
implement that and I didn't wanna fill

1129
00:52:48,390 --> 00:52:52,049
your links and writing remediation

1130
00:52:50,309 --> 00:52:54,930
scripts if if there was if there's a

1131
00:52:52,049 --> 00:52:59,549
failure to go back and fix it by a

1132
00:52:54,930 --> 00:53:01,698
config change or just by alerting thank

1133
00:52:59,549 --> 00:53:01,699
you

1134
00:53:01,910 --> 00:53:11,040
[Applause]

1135
00:53:07,550 --> 00:53:13,200
okay so we're a team pod 3 so what we

1136
00:53:11,040 --> 00:53:16,080
did was first get a better understanding

1137
00:53:13,200 --> 00:53:18,720
of xcb GP and what we did was once we

1138
00:53:16,080 --> 00:53:21,299
started that process Geoff one of our

1139
00:53:18,720 --> 00:53:24,419
team members started to work on Python

1140
00:53:21,300 --> 00:53:25,710
to parse that data then what once we

1141
00:53:24,420 --> 00:53:27,900
have that parsed data then we feed it

1142
00:53:25,710 --> 00:53:30,150
into network X to have a network graph

1143
00:53:27,900 --> 00:53:32,450
constantly updated as we get new

1144
00:53:30,150 --> 00:53:37,440
information and then scampi was a pain

1145
00:53:32,450 --> 00:53:39,629
we'll talk about it really quickly so we

1146
00:53:37,440 --> 00:53:42,240
split it onto two parts so in an

1147
00:53:39,630 --> 00:53:45,030
announced means that the path is valid

1148
00:53:42,240 --> 00:53:47,549
so what we did was we give Network X

1149
00:53:45,030 --> 00:53:49,820
this data set here where it tells you ok

1150
00:53:47,550 --> 00:53:52,020
router 1 has reach ability to router to

1151
00:53:49,820 --> 00:53:53,400
router 2 has reach ability to model and

1152
00:53:52,020 --> 00:53:55,560
so on and so forth so the announce is

1153
00:53:53,400 --> 00:53:58,890
good the network graph will map that if

1154
00:53:55,560 --> 00:54:01,590
a link goes down we send a withdrawal

1155
00:53:58,890 --> 00:54:05,460
and then our team member took that and

1156
00:54:01,590 --> 00:54:07,020
took it out of the network graph so I'm

1157
00:54:05,460 --> 00:54:09,420
not gonna linger on this it doesn't make

1158
00:54:07,020 --> 00:54:11,130
a lot of sense but this is what we tried

1159
00:54:09,420 --> 00:54:13,110
to visualize of what was going on this

1160
00:54:11,130 --> 00:54:15,000
was the data that was gathered from X of

1161
00:54:13,110 --> 00:54:18,660
EGP through Python parsing it to give us

1162
00:54:15,000 --> 00:54:21,360
this data that we fed into Network X and

1163
00:54:18,660 --> 00:54:24,270
then this is Scapa here so what we did

1164
00:54:21,360 --> 00:54:26,700
was very similar to one of the teams we

1165
00:54:24,270 --> 00:54:28,590
set it on these four paths right these

1166
00:54:26,700 --> 00:54:31,020
are the four best possible paths in

1167
00:54:28,590 --> 00:54:32,910
terms of hops the ending values there

1168
00:54:31,020 --> 00:54:34,680
show the route that it took all right

1169
00:54:32,910 --> 00:54:38,670
router one to two to four to six and

1170
00:54:34,680 --> 00:54:45,450
four five to six and so on and that's it

1171
00:54:38,670 --> 00:54:51,230
so oh yeah future roadmap will get

1172
00:54:45,450 --> 00:54:51,230
influx working with grow fauna thank you

1173
00:54:56,369 --> 00:55:02,200
so hi everyone we are team met buffs and

1174
00:54:59,770 --> 00:55:05,859
we are students in the University of

1175
00:55:02,200 --> 00:55:07,629
Colorado Boulder so honestly this

1176
00:55:05,859 --> 00:55:09,520
hackathon was a little overwhelming for

1177
00:55:07,630 --> 00:55:11,560
all of us because of the number of tools

1178
00:55:09,520 --> 00:55:14,560
and the number of objectives we had to

1179
00:55:11,560 --> 00:55:17,320
achieve but yeah I think we tried to

1180
00:55:14,560 --> 00:55:20,619
manage and try to do what best we could

1181
00:55:17,320 --> 00:55:22,839
do in the given amount of time so this

1182
00:55:20,619 --> 00:55:24,550
is the topology that we were given and

1183
00:55:22,839 --> 00:55:26,619
from that we tried to find out all the

1184
00:55:24,550 --> 00:55:28,839
best possible paths using Network X tool

1185
00:55:26,619 --> 00:55:31,720
and we could find out these number of

1186
00:55:28,839 --> 00:55:37,330
paths based on which we try to build a

1187
00:55:31,720 --> 00:55:39,160
network monitoring logic so this is a

1188
00:55:37,330 --> 00:55:41,049
code snapshot this may not be visible to

1189
00:55:39,160 --> 00:55:45,160
all of you but what we have done here is

1190
00:55:41,050 --> 00:55:47,230
we've used KP two of you know based on

1191
00:55:45,160 --> 00:55:50,560
the number of paths that we found using

1192
00:55:47,230 --> 00:55:53,410
Network X we use KP to create those

1193
00:55:50,560 --> 00:55:56,140
number of Pro packets for the number of

1194
00:55:53,410 --> 00:55:59,950
hops based out of each of the route that

1195
00:55:56,140 --> 00:56:03,220
we got and those Pro packets will be

1196
00:55:59,950 --> 00:56:06,189
sent from dev one - dev - and a response

1197
00:56:03,220 --> 00:56:07,868
will be received from dev - so the pro

1198
00:56:06,190 --> 00:56:11,230
packet that we created each of those pro

1199
00:56:07,869 --> 00:56:14,950
packets had the timestamp value for the

1200
00:56:11,230 --> 00:56:16,599
time the packet was sent at and when the

1201
00:56:14,950 --> 00:56:19,569
packet is received is received with the

1202
00:56:16,599 --> 00:56:21,339
timestamp of for the arrival time so we

1203
00:56:19,570 --> 00:56:23,470
took out the time difference to find out

1204
00:56:21,339 --> 00:56:26,890
latency in each of the parts in each of

1205
00:56:23,470 --> 00:56:29,080
the routes now this code snippet that

1206
00:56:26,890 --> 00:56:30,910
you see the first part of that is a

1207
00:56:29,080 --> 00:56:33,460
function that's calculating the time

1208
00:56:30,910 --> 00:56:35,560
difference and if the time difference is

1209
00:56:33,460 --> 00:56:36,790
more than one second or you know you can

1210
00:56:35,560 --> 00:56:40,210
take any number but we have just taken

1211
00:56:36,790 --> 00:56:42,910
one second as a latency value so if that

1212
00:56:40,210 --> 00:56:45,250
value on any route is more than one

1213
00:56:42,910 --> 00:56:48,759
second for a packet then we will trigger

1214
00:56:45,250 --> 00:56:51,520
an email will basically raise a ticket

1215
00:56:48,760 --> 00:56:54,700
with a tool called

1216
00:56:51,520 --> 00:56:58,150
freshdesk which is a ticketing tool used

1217
00:56:54,700 --> 00:57:00,368
by many organizations so that ticketing

1218
00:56:58,150 --> 00:57:03,030
tool will have a message that will

1219
00:57:00,369 --> 00:57:05,950
contain the route that had latency and

1220
00:57:03,030 --> 00:57:07,599
the monitoring team will take the

1221
00:57:05,950 --> 00:57:09,788
necessary action to fix that

1222
00:57:07,599 --> 00:57:14,829
because we didn't I mean as of now we

1223
00:57:09,789 --> 00:57:20,650
didn't plan on how to fix the issue so

1224
00:57:14,829 --> 00:57:24,249
this is a small video that yeah so we

1225
00:57:20,650 --> 00:57:26,890
try to just capture what we did so so

1226
00:57:24,249 --> 00:57:29,709
one part of the screen is the part

1227
00:57:26,890 --> 00:57:31,569
that's sniffing the packet back at dev 1

1228
00:57:29,709 --> 00:57:33,729
and the other part is actually running

1229
00:57:31,569 --> 00:57:35,650
the entire script which has propak 'its

1230
00:57:33,729 --> 00:57:38,439
so you can see the message there

1231
00:57:35,650 --> 00:57:40,449
highlighted part it says delay in this

1232
00:57:38,440 --> 00:57:43,089
route is higher than the threshold so we

1233
00:57:40,449 --> 00:57:45,400
are creating a new ticket based on the

1234
00:57:43,089 --> 00:57:47,019
latency or the threshold value so the

1235
00:57:45,400 --> 00:57:51,400
ticket looks something like this it will

1236
00:57:47,019 --> 00:57:52,868
have the content so the ticket is

1237
00:57:51,400 --> 00:57:54,609
automatically created with the contain

1238
00:57:52,869 --> 00:57:56,859
something like there is a high latency

1239
00:57:54,609 --> 00:58:03,670
on our one or two or four-hour six route

1240
00:57:56,859 --> 00:58:06,489
please take necessary action and this is

1241
00:58:03,670 --> 00:58:07,930
now coming to the X of e gb part we

1242
00:58:06,489 --> 00:58:10,029
didn't know much about XR bgp so we

1243
00:58:07,930 --> 00:58:12,459
tried to use the file that was given to

1244
00:58:10,029 --> 00:58:15,249
us the JSON file to parse some of the

1245
00:58:12,459 --> 00:58:16,989
information such as the neighbor ID our

1246
00:58:15,249 --> 00:58:22,718
neighbour address interface ID and

1247
00:58:16,989 --> 00:58:24,999
printed using pretty table in the UI so

1248
00:58:22,719 --> 00:58:27,489
for our project this is the future scope

1249
00:58:24,999 --> 00:58:29,948
we would want to scale this to a high

1250
00:58:27,489 --> 00:58:31,509
number of 4 devices as of now we did a

1251
00:58:29,949 --> 00:58:33,640
very small test

1252
00:58:31,509 --> 00:58:36,339
with just a few number of devices but in

1253
00:58:33,640 --> 00:58:38,170
future we would like to see whether this

1254
00:58:36,339 --> 00:58:41,170
works actually in a production network

1255
00:58:38,170 --> 00:58:43,719
with a large number of devices and also

1256
00:58:41,170 --> 00:58:45,969
we would like to add more features and

1257
00:58:43,719 --> 00:58:50,229
more metrics apart from the latency that

1258
00:58:45,969 --> 00:58:51,999
we try to capture and so with since we

1259
00:58:50,229 --> 00:58:53,379
just did monitoring at the moment we

1260
00:58:51,999 --> 00:58:55,509
would also like to incorporate some

1261
00:58:53,380 --> 00:58:57,789
traffic engineering where we can take

1262
00:58:55,509 --> 00:59:00,430
some action based on the fault or based

1263
00:58:57,789 --> 00:59:04,509
on the latency or some issue that we

1264
00:59:00,430 --> 00:59:07,359
find alright so the takeaway from that

1265
00:59:04,509 --> 00:59:08,199
entire day was we got to use KP this was

1266
00:59:07,359 --> 00:59:11,259
new for us

1267
00:59:08,199 --> 00:59:13,690
dislike XIV GP n BG pls and network X

1268
00:59:11,259 --> 00:59:16,839
but we did spend a lot of time using

1269
00:59:13,690 --> 00:59:18,309
scape e just like most of you so that

1270
00:59:16,839 --> 00:59:21,009
was a good learning for us and we would

1271
00:59:18,309 --> 00:59:23,820
like to use its KP and that too

1272
00:59:21,010 --> 00:59:28,330
in any other automation that we would do

1273
00:59:23,820 --> 00:59:30,520
in future and apart from that some not

1274
00:59:28,330 --> 00:59:32,529
so like some things that we learned were

1275
00:59:30,520 --> 00:59:35,170
like planning in a short amount of time

1276
00:59:32,530 --> 00:59:36,780
how can you plan a hack like this

1277
00:59:35,170 --> 00:59:38,860
we did some teamwork we assigned

1278
00:59:36,780 --> 00:59:41,860
different roles to each member in the

1279
00:59:38,860 --> 00:59:45,760
team so that we could make the most of

1280
00:59:41,860 --> 00:59:47,730
the short time and yeah some other

1281
00:59:45,760 --> 01:00:00,520
things like hacking and time management

1282
00:59:47,730 --> 01:00:04,360
these are team members thank you hello

1283
01:00:00,520 --> 01:00:08,620
are we good hi We're Team four or in

1284
01:00:04,360 --> 01:00:09,760
team zero all at the same time we had

1285
01:00:08,620 --> 01:00:12,160
fun trying to figure out how to do a

1286
01:00:09,760 --> 01:00:15,460
PowerPoint onto the screen and before

1287
01:00:12,160 --> 01:00:17,589
that we had fun doing the hackathon so

1288
01:00:15,460 --> 01:00:26,830
if we're gonna go into the first part of

1289
01:00:17,590 --> 01:00:29,380
it this is the exit BGP everyone my name

1290
01:00:26,830 --> 01:00:32,170
is Mark so we kind of did the same thing

1291
01:00:29,380 --> 01:00:36,190
I think a lot of people did we divided

1292
01:00:32,170 --> 01:00:40,030
and conquered so myself and David took

1293
01:00:36,190 --> 01:00:46,630
the exit BGP and Network X and

1294
01:00:40,030 --> 01:00:47,710
determining the best paths so myself or

1295
01:00:46,630 --> 01:00:49,840
David I don't think we had any

1296
01:00:47,710 --> 01:00:51,160
experience at the exit BGP before so we

1297
01:00:49,840 --> 01:00:53,710
spent a lot of time trying to figure out

1298
01:00:51,160 --> 01:00:55,750
how the data came back when it was

1299
01:00:53,710 --> 01:00:59,020
stored trying to figure out how we could

1300
01:00:55,750 --> 01:01:01,450
normalize it put into JSON so spend a

1301
01:00:59,020 --> 01:01:03,150
lot of time there finally we got the

1302
01:01:01,450 --> 01:01:06,279
data normalized

1303
01:01:03,150 --> 01:01:08,080
we have it now to the point where all

1304
01:01:06,280 --> 01:01:12,550
the structures in place where we can

1305
01:01:08,080 --> 01:01:15,370
populate the network x graphs what you

1306
01:01:12,550 --> 01:01:18,130
see up here is manually populated but

1307
01:01:15,370 --> 01:01:20,500
all the nodes are being populated with

1308
01:01:18,130 --> 01:01:23,430
code and the first block of addresses

1309
01:01:20,500 --> 01:01:28,230
are also being populated with code again

1310
01:01:23,430 --> 01:01:32,919
data that's being received by XM EGP I

1311
01:01:28,230 --> 01:01:34,810
would say next steps are to also same

1312
01:01:32,920 --> 01:01:37,210
thing we manually added the weights

1313
01:01:34,810 --> 01:01:39,549
in here they were all communicated as 10

1314
01:01:37,210 --> 01:01:42,430
so it'd be nice if we had some different

1315
01:01:39,550 --> 01:01:45,010
weights we noticed that they weren't

1316
01:01:42,430 --> 01:01:47,230
those values weren't being introduced

1317
01:01:45,010 --> 01:01:48,609
into X of BGP for some reason so we were

1318
01:01:47,230 --> 01:01:52,359
just able to manually see that the

1319
01:01:48,609 --> 01:01:56,590
weights were 10 I know that we can get

1320
01:01:52,359 --> 01:01:58,920
the way it's pretty easily by yeah next

1321
01:01:56,590 --> 01:02:01,570
steps are the framework is all there to

1322
01:01:58,920 --> 01:02:04,540
make all of this completely done with

1323
01:02:01,570 --> 01:02:07,150
code first is going in and you know hand

1324
01:02:04,540 --> 01:02:09,720
jamming it which I think most teams did

1325
01:02:07,150 --> 01:02:14,050
I'm at least for the the network X piece

1326
01:02:09,720 --> 01:02:18,009
and yeah I'm gonna hand it off work the

1327
01:02:14,050 --> 01:02:20,619
monitoring piece copy all right then we

1328
01:02:18,010 --> 01:02:23,890
did the Scapa piece which we divided

1329
01:02:20,619 --> 01:02:26,080
into two probes and the probe code in

1330
01:02:23,890 --> 01:02:27,910
the receive code the pro code was just

1331
01:02:26,080 --> 01:02:30,220
sending the timestamp and the payload

1332
01:02:27,910 --> 01:02:36,629
and the segment it was going over based

1333
01:02:30,220 --> 01:02:36,629
upon some manually entered data and then

1334
01:02:37,260 --> 01:02:41,320
that's actually this is the received

1335
01:02:39,970 --> 01:02:45,848
code so this cool

1336
01:02:41,320 --> 01:02:48,400
so this off that payload what would

1337
01:02:45,849 --> 01:02:50,560
happen would be in SCAP II they were to

1338
01:02:48,400 --> 01:02:53,260
throw that packet to that function

1339
01:02:50,560 --> 01:02:56,500
called calculate our TT and it would

1340
01:02:53,260 --> 01:02:58,480
print off into the file and it'd be good

1341
01:02:56,500 --> 01:03:01,420
this is the probe that we're doing but

1342
01:02:58,480 --> 01:03:03,580
most of it was just mainly entered

1343
01:03:01,420 --> 01:03:05,070
there's no sissy output we did it by

1344
01:03:03,580 --> 01:03:09,098
segments instead of hops just like

1345
01:03:05,070 --> 01:03:11,560
segment one would be R 2 R 3 R 4 R 6

1346
01:03:09,099 --> 01:03:13,750
test that segment there's your air TT

1347
01:03:11,560 --> 01:03:22,589
and then just send the probe packets as

1348
01:03:13,750 --> 01:03:22,589
it will so that was it thanks

1349
01:03:25,980 --> 01:03:33,480
yeah sometime

1350
01:04:12,770 --> 01:04:24,090
sorry it's kind of hard to drive and use

1351
01:04:17,070 --> 01:04:26,190
the microphone so we were able to get

1352
01:04:24,090 --> 01:04:28,710
the structure down get everything put

1353
01:04:26,190 --> 01:04:30,420
into the correct dictionaries and start

1354
01:04:28,710 --> 01:04:34,650
getting the data in as you can see the

1355
01:04:30,420 --> 01:04:35,580
all the nodes are being added in but the

1356
01:04:34,650 --> 01:04:37,620
edges of course

1357
01:04:35,580 --> 01:04:40,680
liyan I think what most people did was

1358
01:04:37,620 --> 01:04:43,529
putting these in manually and then

1359
01:04:40,680 --> 01:04:47,819
running it through the canned network

1360
01:04:43,530 --> 01:04:52,020
acts methods router info again all

1361
01:04:47,820 --> 01:04:53,940
dynamically brought in so I figured

1362
01:04:52,020 --> 01:04:56,460
another team code code I'd show some

1363
01:04:53,940 --> 01:05:12,570
code that we worked on too so one minute

1364
01:04:56,460 --> 01:05:16,710
and that's it thanks all right I think

1365
01:05:12,570 --> 01:05:19,500
we have enough votes in so we are going

1366
01:05:16,710 --> 01:05:22,440
to call it a tie between net buffs and

1367
01:05:19,500 --> 01:05:26,040
PyCon so a round of applause really to

1368
01:05:22,440 --> 01:05:30,800
everybody who hacked well and learned a

1369
01:05:26,040 --> 01:05:34,920
lot and hopefully made new friends today

1370
01:05:30,800 --> 01:05:36,270
let's do the raffle and so the stuff

1371
01:05:34,920 --> 01:05:38,700
that we're raffling off this time

1372
01:05:36,270 --> 01:05:40,800
so everybody pull out your cards we have

1373
01:05:38,700 --> 01:05:44,520
a total of eight things that we're

1374
01:05:40,800 --> 01:05:47,370
giving away four of the circuit

1375
01:05:44,520 --> 01:05:50,640
playground Express from Adafruit

1376
01:05:47,370 --> 01:05:52,410
and we also have Kanak it's raspberry pi

1377
01:05:50,640 --> 01:05:58,140
B pluses so you can build your own

1378
01:05:52,410 --> 01:06:02,810
console servers okay I will pull the

1379
01:05:58,140 --> 01:06:02,810
ticket and if you have it come on up

1380
01:06:02,880 --> 01:06:13,930
five nine one six zero seven seven are

1381
01:06:10,600 --> 01:06:16,680
you here us a present to win that's

1382
01:06:13,930 --> 01:06:16,680
right okay

1383
01:06:17,100 --> 01:06:30,520
are you right here okay good okay all

1384
01:06:30,040 --> 01:06:51,400
right

1385
01:06:30,520 --> 01:06:54,030
choose okay all right okay we're getting

1386
01:06:51,400 --> 01:06:57,340
an alternate now this one is for the

1387
01:06:54,030 --> 01:07:01,260
circuit playground Express this looks

1388
01:06:57,340 --> 01:07:06,180
cool okay I chose a number at random

1389
01:07:01,260 --> 01:07:06,180
five nine one six zero seven nine

1390
01:07:20,130 --> 01:07:47,350
there you go all right okay okay five

1391
01:07:42,820 --> 01:07:51,940
nine one six one zero six six one zero

1392
01:07:47,350 --> 01:08:00,930
six anyone's oh it's why you're there

1393
01:07:51,940 --> 01:08:00,930
good okay all right you get a rest right

1394
01:08:08,480 --> 01:08:18,488
[Music]

1395
01:08:09,720 --> 01:08:19,719
one of these okay okay oh this one here

1396
01:08:18,488 --> 01:08:22,139
okay that's why I lost count

1397
01:08:19,720 --> 01:08:22,140
okay

1398
01:08:25,089 --> 01:08:50,979
five nine one six zero nine zero six

1399
01:08:30,189 --> 01:08:54,870
zero nine zero anybody yeah okay there

1400
01:08:50,979 --> 01:08:54,870
you go you're gonna take your picture

1401
01:08:57,240 --> 01:09:14,950
you keep it it's yours yeah welcome okay

1402
01:09:05,700 --> 01:09:31,358
where's Barry Pike alright five nine one

1403
01:09:14,950 --> 01:09:44,170
six zero seven three looks right okay

1404
01:09:31,359 --> 01:09:46,950
here you go okay five nine one six zero

1405
01:09:44,170 --> 01:09:46,950
six one

1406
01:09:49,109 --> 01:09:54,200
[Applause]

1407
01:09:51,189 --> 01:10:05,629
there you go and she's gonna take your

1408
01:09:54,200 --> 01:10:08,720
paycheck okay all right all right goes

1409
01:10:05,630 --> 01:10:09,680
to you guys have gotten a lot faster at

1410
01:10:08,720 --> 01:10:13,310
checking your tickets by the way I

1411
01:10:09,680 --> 01:10:29,870
appreciate that if I have nine one six

1412
01:10:13,310 --> 01:10:39,020
zero nine two there you go

1413
01:10:29,870 --> 01:10:39,200
he's gonna take your picture oh okay all

1414
01:10:39,020 --> 01:10:47,990
right

1415
01:10:39,200 --> 01:11:01,250
and today's last prize goes to five nine

1416
01:10:47,990 --> 01:11:02,710
one six zero five eight hey remember you

1417
01:11:01,250 --> 01:11:09,110
can build a console server out of this

1418
01:11:02,710 --> 01:11:11,560
thank you okay thank you all right

1419
01:11:09,110 --> 01:11:11,559
thanks

1420
01:11:11,939 --> 01:11:21,209
I just posted a link to the survey for

1421
01:11:19,979 --> 01:11:22,619
the hackathon if you could please

1422
01:11:21,209 --> 01:11:24,959
complete that and give us your feedback

1423
01:11:22,619 --> 01:11:27,869
on a new experience today that'd be

1424
01:11:24,959 --> 01:11:30,919
appreciated I posted in a slack channel

1425
01:11:27,869 --> 01:11:34,018
it's also on the same page where the

1426
01:11:30,919 --> 01:11:36,419
surveys will be for the rest of the

1427
01:11:34,019 --> 01:11:38,880
Nanog conference so if you don't fill it

1428
01:11:36,419 --> 01:11:46,079
out now please fill it out this week

1429
01:11:38,880 --> 01:11:49,709
Thanks and so thanks again for everybody

1430
01:11:46,079 --> 01:11:51,780
who participated in here I hope

1431
01:11:49,709 --> 01:11:54,360
everybody had a good experience there is

1432
01:11:51,780 --> 01:11:57,179
there's a reception right outside so

1433
01:11:54,360 --> 01:11:59,969
please everybody go to it drink and eat

1434
01:11:57,179 --> 01:12:01,380
and be merry be sure to like talk to

1435
01:11:59,969 --> 01:12:02,969
other people that you haven't yet talked

1436
01:12:01,380 --> 01:12:06,449
to you today especially thank our

1437
01:12:02,969 --> 01:12:09,209
sponsors from Oracle and to pseudo for

1438
01:12:06,449 --> 01:12:13,188
the teams that won please come and see

1439
01:12:09,209 --> 01:12:15,688
me and aside from Oracle to figure out

1440
01:12:13,189 --> 01:12:18,090
how we're going to do the presentations

1441
01:12:15,689 --> 01:12:21,239
during the plenary session that's going

1442
01:12:18,090 --> 01:12:24,239
to be on Tuesday afternoon everybody

1443
01:12:21,239 --> 01:12:25,919
please save any work that you care about

1444
01:12:24,239 --> 01:12:28,530
that happened on these development

1445
01:12:25,919 --> 01:12:30,659
machines we're going to be destroying

1446
01:12:28,530 --> 01:12:35,880
all the virtual infrastructure later

1447
01:12:30,659 --> 01:12:37,379
tonight I don't think the the PyCon team

1448
01:12:35,880 --> 01:12:38,249
is going to be worried about this since

1449
01:12:37,380 --> 01:12:39,989
they didn't use the virtual

1450
01:12:38,249 --> 01:12:41,909
infrastructure but for team buffs we're

1451
01:12:39,989 --> 01:12:44,789
going to leave your stuff around so that

1452
01:12:41,909 --> 01:12:47,549
you can get a presentation together for

1453
01:12:44,789 --> 01:12:49,590
for Tuesday if there's any other

1454
01:12:47,550 --> 01:12:51,780
questions please come and talk to me or

1455
01:12:49,590 --> 01:12:53,429
anybody else from the sponsors or the

1456
01:12:51,780 --> 01:12:56,449
hackathon theme and again thank you very

1457
01:12:53,429 --> 01:12:56,449
much and see you outside

1458
01:13:05,370 --> 01:13:07,430
you

