1
00:00:10,300 --> 00:00:14,910
okay i'm<font color="#CCCCCC"> getting the thumbs up we're</font>

2
00:00:12,220 --> 00:00:14,910
going to go ahead<font color="#E5E5E5"> and start</font>

3
00:00:19,910 --> 00:00:26,270
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the session on porting your</font>

4
00:00:22,730 --> 00:00:27,770
ipv4 applications to v4 v6<font color="#CCCCCC"> dual-stack if</font>

5
00:00:26,270 --> 00:00:33,019
that's not the session you intended to

6
00:00:27,770 --> 00:00:35,860
attend then you're in the wrong room the

7
00:00:33,020 --> 00:00:38,600
gratuitous why is this important slide

8
00:00:35,860 --> 00:00:42,199
that figure is not actually updated as

9
00:00:38,600 --> 00:00:45,019
of last night that figure is from a few

10
00:00:42,199 --> 00:00:48,170
<font color="#E5E5E5">days ago as you can see we have about</font>

11
00:00:45,019 --> 00:00:52,550
<font color="#E5E5E5">700 26 days remaining in the hi</font><font color="#CCCCCC"> Ana free</font>

12
00:00:48,170 --> 00:00:53,840
pool for ipv4 given the two-year

13
00:00:52,550 --> 00:00:58,180
development cycle on a lot of

14
00:00:53,840 --> 00:00:58,180
applications it's time<font color="#CCCCCC"> to get moving</font>

15
00:00:58,420 --> 00:01:03,739
there is a lot of text<font color="#E5E5E5"> ahead in the</font>

16
00:01:01,280 --> 00:01:05,869
slides I apologize<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that but there</font>

17
00:01:03,739 --> 00:01:07,940
just aren't really good cool graphical

18
00:01:05,869 --> 00:01:08,990
ways to present this information at

19
00:01:07,940 --> 00:01:11,509
least I haven't<font color="#E5E5E5"> been able to come</font><font color="#CCCCCC"> up</font>

20
00:01:08,990 --> 00:01:17,119
with anybody if you have ideas I'm open

21
00:01:11,509 --> 00:01:20,750
to them<font color="#CCCCCC"> okay the basic steps in porting</font>

22
00:01:17,119 --> 00:01:24,530
your application there's a sample code

23
00:01:20,750 --> 00:01:26,899
available at that same URL and you're

24
00:01:24,530 --> 00:01:28,759
welcome<font color="#CCCCCC"> to use all of that example</font><font color="#E5E5E5"> code</font>

25
00:01:26,899 --> 00:01:31,069
all of the examples are written in v4

26
00:01:28,759 --> 00:01:34,280
and then ported to v6 there's three

27
00:01:31,069 --> 00:01:37,849
languages there currently see Perl and

28
00:01:34,280 --> 00:01:43,160
Python coming soon will be Ruby<font color="#CCCCCC"> and then</font>

29
00:01:37,849 --> 00:01:46,880
<font color="#E5E5E5">probably Java change the variable names</font>

30
00:01:43,160 --> 00:01:49,130
if you change your variable names as<font color="#CCCCCC"> you</font>

31
00:01:46,880 --> 00:01:52,250
start changing structure types and such

32
00:01:49,130 --> 00:01:54,259
then the variable names can actually act

33
00:01:52,250 --> 00:01:57,649
as a flag for the other places in your

34
00:01:54,259 --> 00:02:00,789
<font color="#E5E5E5">code that you probably need</font><font color="#CCCCCC"> to update I</font>

35
00:01:57,649 --> 00:02:02,989
didn't do that in some of the cases

36
00:02:00,789 --> 00:02:09,580
further<font color="#E5E5E5"> on because the code was simple</font>

37
00:02:02,989 --> 00:02:09,580
enough but sorry about<font color="#CCCCCC"> that</font>

38
00:02:09,830 --> 00:02:16,010
it can actually be a helpful technique

39
00:02:12,920 --> 00:02:18,059
it certainly helped in the sea version

40
00:02:16,010 --> 00:02:20,790
look for the old variable names as

41
00:02:18,060 --> 00:02:22,530
markers and then basically once you've

42
00:02:20,790 --> 00:02:25,049
done that it boils down<font color="#E5E5E5"> to the usual</font>

43
00:02:22,530 --> 00:02:30,990
compile repair recompile followed by

44
00:02:25,050 --> 00:02:34,350
test p bug retest the general changes AF

45
00:02:30,990 --> 00:02:36,420
inet becomes known as AF inet<font color="#CCCCCC"> 6 it's</font>

46
00:02:34,350 --> 00:02:39,120
<font color="#E5E5E5">kind of a misnomer that it's AF inet 6</font>

47
00:02:36,420 --> 00:02:41,670
because<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> actually support map to</font>

48
00:02:39,120 --> 00:02:44,730
be<font color="#E5E5E5"> for addresses as well as v6 in that</font>

49
00:02:41,670 --> 00:02:48,059
address family sockaddr in becomes a

50
00:02:44,730 --> 00:02:49,950
sockaddr in<font color="#CCCCCC"> six except that if you need</font>

51
00:02:48,060 --> 00:02:52,500
something that<font color="#E5E5E5"> sort of refers to enough</font>

52
00:02:49,950 --> 00:02:54,540
space to accommodate either hand or can

53
00:02:52,500 --> 00:02:57,300
be used as a pointer for both that can

54
00:02:54,540 --> 00:02:58,980
be<font color="#E5E5E5"> cast back and forth as needed there's</font>

55
00:02:57,300 --> 00:03:01,740
this special structure called a sockaddr

56
00:02:58,980 --> 00:03:03,480
storage<font color="#E5E5E5"> that's defined that is</font>

57
00:03:01,740 --> 00:03:06,270
<font color="#CCCCCC">guaranteed to</font><font color="#E5E5E5"> be a superset of all of</font>

58
00:03:03,480 --> 00:03:08,929
the different sockaddr types supported

59
00:03:06,270 --> 00:03:10,879
on the system

60
00:03:08,930 --> 00:03:13,969
most of the structures have the same

61
00:03:10,879 --> 00:03:16,670
members<font color="#E5E5E5"> although sometimes they renamed</font>

62
00:03:13,969 --> 00:03:18,950
them fortuitously they have<font color="#E5E5E5"> very similar</font>

63
00:03:16,670 --> 00:03:22,328
constants and mostly it's just the

64
00:03:18,950 --> 00:03:25,189
address<font color="#E5E5E5"> size that changes in most cases</font>

65
00:03:22,329 --> 00:03:26,810
you may actually depending on your

66
00:03:25,189 --> 00:03:30,409
application have to check address

67
00:03:26,810 --> 00:03:33,230
scoping v6 introduced a new concept of

68
00:03:30,409 --> 00:03:34,939
address scope where you have<font color="#CCCCCC"> link local</font>

69
00:03:33,230 --> 00:03:37,250
addresses that are only good for<font color="#E5E5E5"> the</font>

70
00:03:34,939 --> 00:03:39,950
local subnet they're not routed to other

71
00:03:37,250 --> 00:03:44,450
networks you have site local addresses

72
00:03:39,950 --> 00:03:46,939
that may have a differing meaning as to

73
00:03:44,450 --> 00:03:48,589
what their particular range of grouting

74
00:03:46,939 --> 00:03:51,138
is and then you of course have global

75
00:03:48,590 --> 00:03:54,170
addresses which are what we're used to

76
00:03:51,139 --> 00:03:56,090
dealing with<font color="#E5E5E5"> it</font><font color="#CCCCCC"> before</font>

77
00:03:54,170 --> 00:03:58,220
most of the applications you'll be

78
00:03:56,090 --> 00:03:59,930
porting from v4 that won't be<font color="#E5E5E5"> an issue</font>

79
00:03:58,220 --> 00:04:02,300
because<font color="#E5E5E5"> that concept didn't exist in</font>

80
00:03:59,930 --> 00:04:05,870
before but it's not really covered in

81
00:04:02,300 --> 00:04:08,030
<font color="#E5E5E5">this example so heads up for that other</font>

82
00:04:05,870 --> 00:04:11,830
possible<font color="#E5E5E5"> gotchas that are not covered in</font>

83
00:04:08,030 --> 00:04:14,600
the examples if you keep IP addresses in

84
00:04:11,830 --> 00:04:17,030
log files or have them as fields in your

85
00:04:14,600 --> 00:04:18,769
databases things like<font color="#E5E5E5"> that you're going</font>

86
00:04:17,029 --> 00:04:21,619
<font color="#E5E5E5">to have to resize those fields in the</font>

87
00:04:18,769 --> 00:04:23,720
database prevent potentially and you may

88
00:04:21,620 --> 00:04:27,500
need to update<font color="#E5E5E5"> your log parsers as well</font>

89
00:04:23,720 --> 00:04:30,050
as your log writing software to handle

90
00:04:27,500 --> 00:04:31,580
that and any other parsing or other

91
00:04:30,050 --> 00:04:34,520
routines that need to deal with IP

92
00:04:31,580 --> 00:04:36,229
addresses mostly these should be library

93
00:04:34,520 --> 00:04:38,750
functions so you update the one library

94
00:04:36,229 --> 00:04:42,590
function and it pretty much accommodates

95
00:04:38,750 --> 00:04:45,280
for most of your<font color="#E5E5E5"> code but yeah it's</font>

96
00:04:42,590 --> 00:04:45,280
something to look out for

97
00:04:45,320 --> 00:04:51,740
with that<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> delve into each of the</font>

98
00:04:47,630 --> 00:04:55,880
three porting examples again heavily

99
00:04:51,740 --> 00:04:57,950
referencing the handout data the handout

100
00:04:55,880 --> 00:05:01,219
actually contains<font color="#E5E5E5"> side-by-side gifts of</font>

101
00:04:57,950 --> 00:05:04,219
each of the sample applications there's

102
00:05:01,220 --> 00:05:06,650
a client and server for each language

103
00:05:04,220 --> 00:05:08,690
and there's a v4 version of the client

104
00:05:06,650 --> 00:05:11,539
on<font color="#CCCCCC"> the left side</font><font color="#E5E5E5"> of the diff and a v6</font>

105
00:05:08,690 --> 00:05:14,870
version or a dual stack version on<font color="#CCCCCC"> the</font>

106
00:05:11,540 --> 00:05:16,670
right side and then all of the source

107
00:05:14,870 --> 00:05:18,950
code is<font color="#E5E5E5"> easily downloadable from the</font>

108
00:05:16,670 --> 00:05:24,200
same website and you're<font color="#CCCCCC"> welcome to use</font>

109
00:05:18,950 --> 00:05:25,849
<font color="#CCCCCC">it for</font><font color="#E5E5E5"> whatever purposes so the easy</font>

110
00:05:24,200 --> 00:05:28,729
part<font color="#E5E5E5"> of migrating the server went pretty</font>

111
00:05:25,850 --> 00:05:31,070
straightforward there's an additional

112
00:05:28,730 --> 00:05:35,240
include file that you need for<font color="#E5E5E5"> C which</font>

113
00:05:31,070 --> 00:05:37,490
<font color="#CCCCCC">is net I net / I n dot H i renamed sock</font>

114
00:05:35,240 --> 00:05:39,800
ft<font color="#CCCCCC"> the sock ft</font><font color="#E5E5E5"> 6 just</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> i can use</font>

115
00:05:37,490 --> 00:05:42,920
it as a tag for finding things<font color="#E5E5E5"> that</font>

116
00:05:39,800 --> 00:05:45,320
needed to be updated sockaddr

117
00:05:42,920 --> 00:05:48,650
instructors changed to sockaddr in<font color="#E5E5E5"> 6 as</font>

118
00:05:45,320 --> 00:05:50,570
mentioned before and<font color="#CCCCCC"> i renamed the</font>

119
00:05:48,650 --> 00:05:53,349
variable which was<font color="#E5E5E5"> desk soon two deaths</font>

120
00:05:50,570 --> 00:05:56,180
in sick so<font color="#CCCCCC"> i can track that as well</font>

121
00:05:53,350 --> 00:05:58,040
there's a few changes<font color="#CCCCCC"> to the way that</font>

122
00:05:56,180 --> 00:06:00,800
that structure gets initialized in the

123
00:05:58,040 --> 00:06:03,710
process there are some different

124
00:06:00,800 --> 00:06:07,529
arguments in<font color="#CCCCCC"> the socket call as well as</font>

125
00:06:03,710 --> 00:06:09,058
setsockopt bind and listen

126
00:06:07,529 --> 00:06:10,529
and then there are some changes<font color="#CCCCCC"> to the</font>

127
00:06:09,059 --> 00:06:14,659
variables in the socket related error

128
00:06:10,529 --> 00:06:19,139
messages am I going too fast too slow

129
00:06:14,659 --> 00:06:20,969
<font color="#E5E5E5">just right</font><font color="#CCCCCC"> everybody's sleeping I'm</font>

130
00:06:19,139 --> 00:06:24,899
seeing nods to just right<font color="#CCCCCC"> okay I'll</font>

131
00:06:20,969 --> 00:06:26,879
continue the client migration was a

132
00:06:24,899 --> 00:06:30,029
little bit harder than<font color="#E5E5E5"> the server but it</font>

133
00:06:26,879 --> 00:06:32,849
was<font color="#E5E5E5"> actually pretty similar the hairy</font>

134
00:06:30,029 --> 00:06:35,189
parts of that were that<font color="#E5E5E5"> you needed a</font>

135
00:06:32,849 --> 00:06:39,239
helper function<font color="#E5E5E5"> to front and the inet</font>

136
00:06:35,189 --> 00:06:41,609
m2p call for the different possible

137
00:06:39,239 --> 00:06:43,409
return structures from get<font color="#E5E5E5"> out our info</font>

138
00:06:41,609 --> 00:06:47,008
depending on whether returned an inet or

139
00:06:43,409 --> 00:06:49,739
<font color="#E5E5E5">nine and six type structure it's</font>

140
00:06:47,009 --> 00:06:51,449
unfortunate<font color="#CCCCCC"> that high net n2p was not</font>

141
00:06:49,739 --> 00:06:53,549
written with<font color="#CCCCCC"> the fact that that could</font>

142
00:06:51,449 --> 00:06:57,449
<font color="#CCCCCC">happen in mind such that it could just</font>

143
00:06:53,549 --> 00:06:59,998
be called with that information get post

144
00:06:57,449 --> 00:07:03,869
my name gets<font color="#E5E5E5"> served by name get changed</font>

145
00:06:59,999 --> 00:07:06,659
out to get a tour info which is actually

146
00:07:03,869 --> 00:07:09,779
kind of the Swiss Army get whatever by

147
00:07:06,659 --> 00:07:11,429
<font color="#E5E5E5">whatever solution it's actually a lot</font>

148
00:07:09,779 --> 00:07:15,808
easier<font color="#E5E5E5"> to use once you learn to use</font><font color="#CCCCCC"> it</font>

149
00:07:11,429 --> 00:07:18,058
<font color="#E5E5E5">but it is quite</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> different paradigm so</font>

150
00:07:15,809 --> 00:07:20,279
that changes<font color="#E5E5E5"> things and then the other</font>

151
00:07:18,059 --> 00:07:22,739
big thing to worry about is if you use

152
00:07:20,279 --> 00:07:25,259
get a tour info it dynamically allocates

153
00:07:22,739 --> 00:07:28,649
a linked list for you and returns a

154
00:07:25,259 --> 00:07:30,979
pointer to you in the thing you called

155
00:07:28,649 --> 00:07:30,979
it with

156
00:07:34,020 --> 00:07:39,060
so that's that memory needs to be freed

157
00:07:37,379 --> 00:07:42,080
or your application<font color="#CCCCCC"> has the risk of</font>

158
00:07:39,060 --> 00:07:45,300
leaking memory if you call it repeatedly

159
00:07:42,080 --> 00:07:46,909
this is the eye chart warning if you can

160
00:07:45,300 --> 00:07:50,009
read this your eyes are better than mine

161
00:07:46,909 --> 00:07:55,229
copyright 2009 hurricane electric all

162
00:07:50,009 --> 00:07:58,979
rights reserved moving on so the old way

163
00:07:55,229 --> 00:08:02,099
we did a get host by name and an inet

164
00:07:58,979 --> 00:08:05,400
adder call to parse it if it was a IP v4

165
00:08:02,099 --> 00:08:07,199
address the new way and then we had<font color="#CCCCCC"> to</font>

166
00:08:05,400 --> 00:08:11,840
call this<font color="#E5E5E5"> get served by name to resolve</font>

167
00:08:07,199 --> 00:08:14,699
the service multiple separate stop steps

168
00:08:11,840 --> 00:08:17,250
the new way we just<font color="#CCCCCC"> call get add or info</font>

169
00:08:14,699 --> 00:08:20,250
<font color="#E5E5E5">with all the right arguments and it</font>

170
00:08:17,250 --> 00:08:22,380
returns everything for us so you can see

171
00:08:20,250 --> 00:08:23,970
this is much simpler<font color="#CCCCCC"> than all of the</font>

172
00:08:22,380 --> 00:08:27,800
code on the previous two slides and it

173
00:08:23,970 --> 00:08:27,800
does pretty much the same<font color="#CCCCCC"> thing</font>

174
00:08:27,969 --> 00:08:34,719
the process of trying<font color="#E5E5E5"> to connect is a</font>

175
00:08:30,099 --> 00:08:39,338
little bit different in ipv4 this is

176
00:08:34,719 --> 00:08:41,409
where it gets<font color="#E5E5E5"> hard to read the you know</font>

177
00:08:39,339 --> 00:08:43,149
we had to do a loop to try each of the

178
00:08:41,409 --> 00:08:46,000
possible addresses but they were all

179
00:08:43,149 --> 00:08:47,980
ipv4 addresses so we<font color="#CCCCCC"> only needed to</font>

180
00:08:46,000 --> 00:08:50,259
create one socket outside of the loop

181
00:08:47,980 --> 00:08:52,089
and then iterate over trying each

182
00:08:50,259 --> 00:08:54,129
connection on that socket with repeated

183
00:08:52,089 --> 00:08:58,449
calls to connect it to a successful

184
00:08:54,129 --> 00:09:00,519
<font color="#E5E5E5">connection in</font><font color="#CCCCCC"> the in the</font><font color="#E5E5E5"> new paradigm we</font>

185
00:08:58,449 --> 00:09:03,609
we actually have to create the socket

186
00:09:00,519 --> 00:09:06,129
and destroy it each time within the<font color="#E5E5E5"> loop</font>

187
00:09:03,610 --> 00:09:10,779
<font color="#E5E5E5">and that's because we</font><font color="#CCCCCC"> don't know whether</font>

188
00:09:06,129 --> 00:09:14,319
we need<font color="#CCCCCC"> nif for a 9 f4i net6 type socket</font>

189
00:09:10,779 --> 00:09:15,850
when we create the socket so we have to

190
00:09:14,319 --> 00:09:18,300
create it inside the loop as we parse

191
00:09:15,850 --> 00:09:18,300
each one

192
00:09:19,490 --> 00:09:25,190
the easy parts again use the same

193
00:09:22,459 --> 00:09:27,949
variable name flagging mostly update the

194
00:09:25,190 --> 00:09:30,770
same structure<font color="#E5E5E5"> names and calls through</font>

195
00:09:27,950 --> 00:09:32,899
exactly<font color="#E5E5E5"> the same method get a tour info</font>

196
00:09:30,770 --> 00:09:35,630
will automatically return<font color="#CCCCCC"> quad-a and a</font>

197
00:09:32,899 --> 00:09:39,080
records so v6 or before is automatic

198
00:09:35,630 --> 00:09:41,060
with one code base and<font color="#CCCCCC"> inet</font><font color="#E5E5E5"> m2p needs</font>

199
00:09:39,080 --> 00:09:44,930
the helper function that was discussed

200
00:09:41,060 --> 00:09:47,599
earlier so before we move on to<font color="#CCCCCC"> Pearl</font>

201
00:09:44,930 --> 00:09:50,510
you know what happens if we aren't ready

202
00:09:47,600 --> 00:09:53,330
well this is<font color="#CCCCCC"> probably a little more</font>

203
00:09:50,510 --> 00:09:55,220
graphic than what happens but it's

204
00:09:53,330 --> 00:09:57,709
something<font color="#CCCCCC"> like that your ipv4 client</font>

205
00:09:55,220 --> 00:09:59,149
your ipv6 home we clients are going to

206
00:09:57,709 --> 00:10:02,469
have a hard time talking to<font color="#E5E5E5"> your ipv4</font>

207
00:09:59,149 --> 00:10:02,470
only servers

208
00:10:03,980 --> 00:10:10,270
moving on to pearl any questions so far

209
00:10:06,800 --> 00:10:12,530
on see I went<font color="#CCCCCC"> through that kind of quick</font>

210
00:10:10,270 --> 00:10:16,780
<font color="#E5E5E5">okay either everybody's lost or they</font>

211
00:10:12,530 --> 00:10:16,780
don't<font color="#CCCCCC"> care or it's all working out well</font>

212
00:10:17,660 --> 00:10:24,240
refer to<font color="#E5E5E5"> the source code examples again</font>

213
00:10:20,550 --> 00:10:25,740
same spiel<font color="#CCCCCC"> in the pearl case I didn't</font>

214
00:10:24,240 --> 00:10:27,450
<font color="#E5E5E5">bother retaining</font><font color="#CCCCCC"> most of the variables</font>

215
00:10:25,740 --> 00:10:31,800
it's a pretty<font color="#CCCCCC"> small code base and it's</font>

216
00:10:27,450 --> 00:10:33,630
not that<font color="#E5E5E5"> important add socket</font><font color="#CCCCCC"> six to the</font>

217
00:10:31,800 --> 00:10:38,130
<font color="#E5E5E5">modules used you still need</font><font color="#CCCCCC"> to call the</font>

218
00:10:33,630 --> 00:10:39,839
socket module as<font color="#CCCCCC"> well but the</font><font color="#E5E5E5"> other</font>

219
00:10:38,130 --> 00:10:42,870
<font color="#CCCCCC">problem is that the Pearl documentation</font>

220
00:10:39,839 --> 00:10:44,700
for socket<font color="#E5E5E5"> six is pretty minimal and</font>

221
00:10:42,870 --> 00:10:46,470
<font color="#E5E5E5">assumes that you just sort of magically</font>

222
00:10:44,700 --> 00:10:51,630
understand it's mostly sort of like

223
00:10:46,470 --> 00:10:53,190
socket but not completely<font color="#CCCCCC"> there are some</font>

224
00:10:51,630 --> 00:10:54,779
<font color="#CCCCCC">good examples out on the web and</font>

225
00:10:53,190 --> 00:10:56,100
hopefully by referring to<font color="#E5E5E5"> this code</font>

226
00:10:54,779 --> 00:10:59,640
you'll have the rest of the puzzle

227
00:10:56,100 --> 00:11:01,950
<font color="#E5E5E5">pieces if you need them gut and replace</font>

228
00:10:59,640 --> 00:11:06,089
the yet star by name calls no surprise

229
00:11:01,950 --> 00:11:07,680
there with get a tour info change the

230
00:11:06,089 --> 00:11:10,680
protocol and address families in the

231
00:11:07,680 --> 00:11:12,959
socket and buying calls and some minor

232
00:11:10,680 --> 00:11:15,930
changes to processing how incoming

233
00:11:12,960 --> 00:11:17,580
connections are handled the biggest

234
00:11:15,930 --> 00:11:21,839
change<font color="#E5E5E5"> is the get star by name to get</font><font color="#CCCCCC"> a</font>

235
00:11:17,580 --> 00:11:23,730
tour info process similar changes to

236
00:11:21,839 --> 00:11:26,240
what was done in the<font color="#E5E5E5"> seaport because</font>

237
00:11:23,730 --> 00:11:28,920
underlying it is the same<font color="#CCCCCC"> see libraries</font>

238
00:11:26,240 --> 00:11:32,490
see get a tour info returns a linked

239
00:11:28,920 --> 00:11:35,520
list the<font color="#E5E5E5"> Pearl version does</font><font color="#CCCCCC"> not return a</font>

240
00:11:32,490 --> 00:11:38,550
linked list instead it returns a single

241
00:11:35,520 --> 00:11:41,640
list and you're expected to know that

242
00:11:38,550 --> 00:11:46,439
every fifth element in the list starts a

243
00:11:41,640 --> 00:11:50,170
new set of items

244
00:11:46,440 --> 00:11:52,240
in the list this actually turns out to

245
00:11:50,170 --> 00:11:53,439
be pretty easy to park parse in<font color="#CCCCCC"> Perl</font>

246
00:11:52,240 --> 00:11:57,700
i'll<font color="#E5E5E5"> show you how that's done</font><font color="#CCCCCC"> on the</font>

247
00:11:53,440 --> 00:12:00,700
next slide one other gotcha i ran into

248
00:11:57,700 --> 00:12:04,480
<font color="#CCCCCC">in Perl is if you call get a tour info</font>

249
00:12:00,700 --> 00:12:07,030
within<font color="#CCCCCC"> 6</font><font color="#E5E5E5"> adder any as the argument the</font>

250
00:12:04,480 --> 00:12:09,010
return value you get does not<font color="#E5E5E5"> include in</font>

251
00:12:07,030 --> 00:12:11,470
<font color="#E5E5E5">six at or any as what you're going to</font>

252
00:12:09,010 --> 00:12:15,670
bind to and instead it gives you back

253
00:12:11,470 --> 00:12:18,070
localhost so unless<font color="#E5E5E5"> you are intending to</font>

254
00:12:15,670 --> 00:12:21,459
bind to local host of local host<font color="#E5E5E5"> only</font>

255
00:12:18,070 --> 00:12:25,140
you will want to change that in the

256
00:12:21,460 --> 00:12:28,720
return structure before you call buying

257
00:12:25,140 --> 00:12:30,040
that wasn't a problem<font color="#E5E5E5"> in</font><font color="#CCCCCC"> c by the way so</font>

258
00:12:28,720 --> 00:12:31,320
<font color="#E5E5E5">i don't know why curl does that</font>

259
00:12:30,040 --> 00:12:35,370
differently

260
00:12:31,320 --> 00:12:36,840
so the parsing routine it's so a little

261
00:12:35,370 --> 00:12:39,630
bit<font color="#E5E5E5"> of an eye chart but you can see in</font>

262
00:12:36,840 --> 00:12:43,980
the second line<font color="#CCCCCC"> of the new way of doing</font>

263
00:12:39,630 --> 00:12:48,450
this at res equals get a tour info blah

264
00:12:43,980 --> 00:12:51,540
blah blah then we'll step through at res

265
00:12:48,450 --> 00:12:53,370
using basically you know the five

266
00:12:51,540 --> 00:12:58,319
variables we want to stick the tuple

267
00:12:53,370 --> 00:13:01,200
<font color="#E5E5E5">into comma at res equals at res well fam</font>

268
00:12:58,320 --> 00:13:02,820
does not equal a a fine at six the

269
00:13:01,200 --> 00:13:05,790
reason<font color="#E5E5E5"> I skip everything that's not an</font>

270
00:13:02,820 --> 00:13:07,770
AF inet<font color="#E5E5E5"> six entry is because I want to</font>

271
00:13:05,790 --> 00:13:11,610
provide<font color="#E5E5E5"> dual-stack services with this</font>

272
00:13:07,770 --> 00:13:15,689
one code base so I want<font color="#E5E5E5"> to only bind to</font>

273
00:13:11,610 --> 00:13:17,580
the v6 address and<font color="#E5E5E5"> that way I'm binding</font>

274
00:13:15,690 --> 00:13:20,400
actually to support mapped before

275
00:13:17,580 --> 00:13:22,730
clients as well as v6 clients on the<font color="#CCCCCC"> one</font>

276
00:13:20,400 --> 00:13:22,730
Sokka

277
00:13:23,150 --> 00:13:26,930
you don't have to actually create

278
00:13:24,530 --> 00:13:28,550
multiple sockets and all<font color="#E5E5E5"> that on most</font>

279
00:13:26,930 --> 00:13:31,120
systems there<font color="#CCCCCC"> are a few systems where</font>

280
00:13:28,550 --> 00:13:31,120
that doesn't<font color="#CCCCCC"> work</font>

281
00:13:31,850 --> 00:13:37,069
unpack sockaddr in<font color="#E5E5E5"> six is pretty</font>

282
00:13:34,279 --> 00:13:43,540
straightforward and very similar to the

283
00:13:37,069 --> 00:13:46,939
before<font color="#E5E5E5"> stuff any questions on</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> okay</font>

284
00:13:43,540 --> 00:13:49,639
ipv4 only version we call socket and

285
00:13:46,940 --> 00:13:52,190
<font color="#CCCCCC">call buying guess what the ipv6 dual</font>

286
00:13:49,639 --> 00:13:56,180
<font color="#CCCCCC">stack version same thing except we have</font>

287
00:13:52,190 --> 00:14:01,819
to use PFI at six instead of PFI net big

288
00:13:56,180 --> 00:14:07,130
whopping change their ipv4 only<font color="#CCCCCC"> two dual</font>

289
00:14:01,819 --> 00:14:11,079
stack additional code changes this is

290
00:14:07,130 --> 00:14:11,079
how we how we accept a new connection

291
00:14:12,720 --> 00:14:17,910
unpack the the address pretty much the

292
00:14:15,660 --> 00:14:21,350
same process<font color="#E5E5E5"> we use get name n fo</font>

293
00:14:17,910 --> 00:14:21,350
instead of get host by adder

294
00:14:22,350 --> 00:14:27,840
<font color="#E5E5E5">I net into P instead of into a for the</font>

295
00:14:25,140 --> 00:14:32,250
for the logging information formatted

296
00:14:27,840 --> 00:14:35,310
the client migration very similar to the

297
00:14:32,250 --> 00:14:37,950
server<font color="#CCCCCC"> and even more similar to the sea</font>

298
00:14:35,310 --> 00:14:40,800
client had the same module rearrange the

299
00:14:37,950 --> 00:14:42,750
address resolution stuff add some

300
00:14:40,800 --> 00:14:45,689
handling for AF inet<font color="#CCCCCC"> 62 the</font><font color="#E5E5E5"> connection</font>

301
00:14:42,750 --> 00:14:48,690
loop and convert<font color="#CCCCCC"> inet into a 2 i knit</font>

302
00:14:45,690 --> 00:14:51,230
into p and protocol family stuff for the

303
00:14:48,690 --> 00:14:51,230
socket call

304
00:14:56,160 --> 00:15:01,250
code changes same stuff

305
00:15:01,320 --> 00:15:07,740
this is pretty straightforward<font color="#E5E5E5"> you get</font>

306
00:15:05,010 --> 00:15:09,240
at our info thing now we're actually

307
00:15:07,740 --> 00:15:11,340
going to just parse through it and

308
00:15:09,240 --> 00:15:13,770
connect to the first one<font color="#CCCCCC"> that works we</font>

309
00:15:11,340 --> 00:15:17,550
don't care whether it's v4 or v6 as long

310
00:15:13,770 --> 00:15:20,400
as it just works but in the loop where

311
00:15:17,550 --> 00:15:22,170
you're trying<font color="#E5E5E5"> to connect an ipv4 the</font>

312
00:15:20,400 --> 00:15:24,689
socket can be recycled for multiple

313
00:15:22,170 --> 00:15:26,250
connections but with dual stack you

314
00:15:24,690 --> 00:15:29,340
again need to move the creation of the

315
00:15:26,250 --> 00:15:31,470
socket inside the loop so<font color="#CCCCCC"> that you can</font>

316
00:15:29,340 --> 00:15:35,610
create<font color="#E5E5E5"> an inet Orion at six socket as</font>

317
00:15:31,470 --> 00:15:39,110
needed same stuff as the others the ipv4

318
00:15:35,610 --> 00:15:39,110
only version of the connection loop

319
00:15:40,810 --> 00:15:45,189
clearly I'm spending too<font color="#CCCCCC"> much time on</font>

320
00:15:42,430 --> 00:15:47,290
some of<font color="#CCCCCC"> these slides the ipv4 only</font>

321
00:15:45,190 --> 00:15:49,750
version of the connection loop and the

322
00:15:47,290 --> 00:15:51,699
ipv4 v6<font color="#E5E5E5"> dual stack version the</font>

323
00:15:49,750 --> 00:15:53,350
connection loop as you<font color="#E5E5E5"> can see there's a</font>

324
00:15:51,700 --> 00:15:56,410
lot more<font color="#E5E5E5"> content inside the connection</font>

325
00:15:53,350 --> 00:15:58,990
loop it's not as<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> as it looks mostly</font>

326
00:15:56,410 --> 00:16:01,449
it's stuff that was outside got moved

327
00:15:58,990 --> 00:16:02,830
inside the loop because you don't know

328
00:16:01,450 --> 00:16:06,670
ahead<font color="#CCCCCC"> of time which kind you're trying</font>

329
00:16:02,830 --> 00:16:08,830
<font color="#E5E5E5">so before</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> get into Python a more</font>

330
00:16:06,670 --> 00:16:10,449
realistic<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> what's really going to</font>

331
00:16:08,830 --> 00:16:12,790
happen if<font color="#E5E5E5"> people's applications aren't</font>

332
00:16:10,450 --> 00:16:16,360
ready for dual stack it'll be one or

333
00:16:12,790 --> 00:16:19,750
more of these<font color="#E5E5E5"> situations where you</font><font color="#CCCCCC"> end</font>

334
00:16:16,360 --> 00:16:24,100
<font color="#E5E5E5">up with translating routers or multiple</font>

335
00:16:19,750 --> 00:16:27,279
layers<font color="#CCCCCC"> of</font><font color="#E5E5E5"> map or TCP relays or this DS</font>

336
00:16:24,100 --> 00:16:29,740
Lite thing that<font color="#CCCCCC"> Comcast and</font><font color="#E5E5E5"> a couple of</font>

337
00:16:27,279 --> 00:16:32,110
other people have been working on which

338
00:16:29,740 --> 00:16:34,590
actually is one of the more promising

339
00:16:32,110 --> 00:16:37,500
one so far

340
00:16:34,590 --> 00:16:40,440
how to do this if<font color="#CCCCCC"> we don't have content</font>

341
00:16:37,500 --> 00:16:43,110
on the<font color="#CCCCCC"> six</font><font color="#E5E5E5"> better already</font>

342
00:16:40,440 --> 00:16:47,400
<font color="#E5E5E5">Python actually Python was the easiest</font>

343
00:16:43,110 --> 00:16:48,750
language to do the<font color="#CCCCCC"> port in which pains</font>

344
00:16:47,400 --> 00:16:51,050
me to say because<font color="#E5E5E5"> it's not my favorite</font>

345
00:16:48,750 --> 00:16:51,050
language

346
00:16:52,080 --> 00:16:57,920
but mostly it's a matter of getting

347
00:16:54,030 --> 00:17:00,120
replaced the the get star by name calls

348
00:16:57,920 --> 00:17:03,750
replacing the default fatal error

349
00:17:00,120 --> 00:17:07,240
process with a try process that iterates

350
00:17:03,750 --> 00:17:09,280
through different possibilities

351
00:17:07,240 --> 00:17:10,780
and some minor changes to how we handle

352
00:17:09,280 --> 00:17:13,059
incoming connections because it starts

353
00:17:10,780 --> 00:17:15,689
returning the fort opal instead of a two

354
00:17:13,059 --> 00:17:15,689
item tuple

355
00:17:16,150 --> 00:17:23,370
get served by name to get<font color="#E5E5E5"> at our info</font>

356
00:17:19,380 --> 00:17:23,370
still pretty<font color="#E5E5E5"> much straightforward</font>

357
00:17:24,000 --> 00:17:29,640
listening it's still<font color="#E5E5E5"> straightforward but</font>

358
00:17:27,869 --> 00:17:35,179
we have to do this iterative process now

359
00:17:29,640 --> 00:17:35,180
instead of the original single attempt

360
00:17:35,350 --> 00:17:40,689
there's your two<font color="#E5E5E5"> people versus four</font>

361
00:17:37,570 --> 00:17:44,168
people change for the parsing the

362
00:17:40,690 --> 00:17:46,419
address that gets returned by connect

363
00:17:44,169 --> 00:17:48,009
this is to use to make the address

364
00:17:46,419 --> 00:17:53,019
presentable in debug output user

365
00:17:48,009 --> 00:17:57,009
messages client migration pretty

366
00:17:53,019 --> 00:17:58,869
straightforward<font color="#E5E5E5"> get out our info again a</font>

367
00:17:57,009 --> 00:18:01,600
little bit of handling for AF inet<font color="#CCCCCC"> 6 in</font>

368
00:17:58,869 --> 00:18:05,039
the connection loop and<font color="#CCCCCC"> I knit into a</font>

369
00:18:01,600 --> 00:18:07,238
10-2 p protocol family in the socket

370
00:18:05,039 --> 00:18:11,908
this is the way we<font color="#CCCCCC"> used to try and</font>

371
00:18:07,239 --> 00:18:15,279
connect this<font color="#E5E5E5"> is what we</font><font color="#CCCCCC"> have to do now</font>

372
00:18:11,909 --> 00:18:17,169
<font color="#E5E5E5">primarily this expanded due to having to</font>

373
00:18:15,279 --> 00:18:23,730
handle the two different<font color="#E5E5E5"> families as</font>

374
00:18:17,169 --> 00:18:23,730
possible returns from the resolution

375
00:18:24,730 --> 00:18:29,140
there's minor modifications required in

376
00:18:27,669 --> 00:18:31,330
the successful connection message

377
00:18:29,140 --> 00:18:33,040
because the variable names changed in

378
00:18:31,330 --> 00:18:37,360
the print arguments do the<font color="#E5E5E5"> family</font>

379
00:18:33,040 --> 00:18:40,389
changes and not a lot<font color="#CCCCCC"> else needed the</font>

380
00:18:37,360 --> 00:18:42,969
slides are<font color="#E5E5E5"> online at on the agenda now</font>

381
00:18:40,390 --> 00:18:44,950
as I understand it there's a handy

382
00:18:42,970 --> 00:18:47,340
<font color="#CCCCCC">function</font><font color="#E5E5E5"> replacement guide that pretty</font>

383
00:18:44,950 --> 00:18:49,540
much maps to all of the languages and

384
00:18:47,340 --> 00:18:51,939
there's also a structure replacement

385
00:18:49,540 --> 00:18:54,879
guide at the end so it's going to<font color="#E5E5E5"> add</font>

386
00:18:51,940 --> 00:18:57,070
those to your<font color="#E5E5E5"> toolkit for your</font>

387
00:18:54,880 --> 00:19:04,030
applications hope it works<font color="#E5E5E5"> out well for</font>

388
00:18:57,070 --> 00:19:07,310
<font color="#CCCCCC">you feedback is welcome at that address</font>

389
00:19:04,030 --> 00:19:09,550
presentation all the resources are also

390
00:19:07,310 --> 00:19:09,550
available

391
00:19:10,970 --> 00:19:17,350
so seriously questions comments

392
00:19:13,309 --> 00:19:19,309
discussion we've got it's 220 and

393
00:19:17,350 --> 00:19:22,120
tutorial that was supposed<font color="#E5E5E5"> to take 90</font>

394
00:19:19,309 --> 00:19:22,120
minutes from two o'clock

395
00:19:22,669 --> 00:19:26,529
yes come on<font color="#CCCCCC"> up to the mic</font>

396
00:19:30,000 --> 00:19:33,660
and I<font color="#CCCCCC"> don't have to be porting related</font>

397
00:19:31,770 --> 00:19:37,110
questions if you've got questions about

398
00:19:33,660 --> 00:19:40,470
implementing d6 deploying v6 we're here

399
00:19:37,110 --> 00:19:43,050
<font color="#E5E5E5">to help</font><font color="#CCCCCC"> hi larissa Shapiro and from ISC</font>

400
00:19:40,470 --> 00:19:43,920
and I just wanted<font color="#CCCCCC"> to say that the thing</font>

401
00:19:43,050 --> 00:19:46,399
that you were talking about the

402
00:19:43,920 --> 00:19:46,400
carrier-grade NAT

403
00:19:48,190 --> 00:19:51,120
upon my

404
00:19:53,280 --> 00:19:57,428
it's actually<font color="#E5E5E5"> a pretty good stuff</font><font color="#CCCCCC"> I</font>

405
00:19:55,840 --> 00:19:59,678
think<font color="#CCCCCC"> I think it's the</font><font color="#E5E5E5"> most promising</font>

406
00:19:57,429 --> 00:20:02,080
thing short of dual stack that that's

407
00:19:59,679 --> 00:20:05,190
out there hey I mean isn't it's an<font color="#CCCCCC"> early</font>

408
00:20:02,080 --> 00:20:05,189
version but

409
00:20:11,710 --> 00:20:16,390
it still breaks most of the<font color="#E5E5E5"> things that</font>

410
00:20:13,480 --> 00:20:18,820
nap breaks but it doesn't break all of

411
00:20:16,390 --> 00:20:22,690
<font color="#CCCCCC">the</font><font color="#E5E5E5"> things that double Matt breaks so</font>

412
00:20:18,820 --> 00:20:23,740
it's better than double map which is

413
00:20:22,690 --> 00:20:27,730
what most<font color="#E5E5E5"> of the carrier-grade NAT</font>

414
00:20:23,740 --> 00:20:30,630
amounts to any<font color="#E5E5E5"> other questions concerns</font>

415
00:20:27,730 --> 00:20:30,630
comments thoughts

416
00:20:33,400 --> 00:20:37,750
can you go<font color="#E5E5E5"> into a bit more detail on the</font>

417
00:20:35,470 --> 00:20:38,950
you had talked about matching against<font color="#CCCCCC"> a</font>

418
00:20:37,750 --> 00:20:40,960
database structure and things like that

419
00:20:38,950 --> 00:20:43,360
when it comes from storing on the ipv4

420
00:20:40,960 --> 00:20:46,840
and destroying both ipv4 and ipv6 how

421
00:20:43,360 --> 00:20:48,129
you actually well I didn't approach that

422
00:20:46,840 --> 00:20:51,399
in my designs because I wasn't<font color="#CCCCCC"> actually</font>

423
00:20:48,130 --> 00:20:54,790
storing those things but<font color="#E5E5E5"> in</font><font color="#CCCCCC"> general and</font>

424
00:20:51,400 --> 00:20:56,950
ipv4 address is this big and so you can

425
00:20:54,790 --> 00:20:59,379
store it for example<font color="#CCCCCC"> in a var char 15 if</font>

426
00:20:56,950 --> 00:21:02,050
<font color="#E5E5E5">you really</font><font color="#CCCCCC"> wanted to or you can store it</font>

427
00:20:59,380 --> 00:21:05,590
as a 32-bit integer and ipv6 addresses

428
00:21:02,050 --> 00:21:08,590
this big and so you need to at least

429
00:21:05,590 --> 00:21:10,629
<font color="#E5E5E5">widen the fields and you need to at</font>

430
00:21:08,590 --> 00:21:12,669
<font color="#CCCCCC">least allow for the fact that the</font>

431
00:21:10,630 --> 00:21:15,400
content may be in a different format if

432
00:21:12,670 --> 00:21:17,290
you're<font color="#E5E5E5"> storing it as a string and if</font>

433
00:21:15,400 --> 00:21:19,600
you've got any routines to do parsing on

434
00:21:17,290 --> 00:21:22,540
that and if you're doing<font color="#CCCCCC"> a dress mask</font>

435
00:21:19,600 --> 00:21:24,399
notation or things like that you may

436
00:21:22,540 --> 00:21:26,350
need<font color="#E5E5E5"> to update your parsing routines to</font>

437
00:21:24,400 --> 00:21:27,910
allow for<font color="#CCCCCC"> that or make sure that you're</font>

438
00:21:26,350 --> 00:21:30,149
using<font color="#E5E5E5"> a parsing library that already</font>

439
00:21:27,910 --> 00:21:30,150
does

440
00:21:34,820 --> 00:21:40,519
I can you quickly comment on any changes

441
00:21:38,570 --> 00:21:43,129
that you need to make for like putting

442
00:21:40,519 --> 00:21:45,740
any<font color="#E5E5E5"> kinda where applications because I</font>

443
00:21:43,130 --> 00:21:47,360
heard<font color="#CCCCCC"> like ipv6 actually has is doing</font>

444
00:21:45,740 --> 00:21:50,480
<font color="#E5E5E5">something different out for any kinds of</font>

445
00:21:47,360 --> 00:21:52,370
<font color="#CCCCCC">I would love to unfortunately I have not</font>

446
00:21:50,480 --> 00:21:54,620
gotten completely up to speed on ipv6

447
00:21:52,370 --> 00:21:58,000
any cast as yet so I<font color="#CCCCCC"> don't actually</font><font color="#E5E5E5"> know</font>

448
00:21:54,620 --> 00:22:03,459
that I will try and research that and

449
00:21:58,000 --> 00:22:03,460
know for<font color="#E5E5E5"> next time yeah the others</font>

450
00:22:04,880 --> 00:22:10,390
okay I guess everybody has lots of free

451
00:22:07,460 --> 00:22:10,390
time they weren't planning on having

452
00:22:11,470 --> 00:22:23,620
thank you all for attending and I hope

453
00:22:20,150 --> 00:22:23,620
you enjoyed the tie line pictures

454
00:22:37,789 --> 00:22:43,509
ok come play trying to turn<font color="#E5E5E5"> it off for</font>

455
00:22:41,210 --> 00:22:43,509
you

456
00:22:45,210 --> 00:22:50,059
see it's<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> was</font>

457
00:23:33,880 --> 00:23:37,200
Safari Firefox

458
00:23:42,590 --> 00:23:52,279
everyone in a lot of microsoft stuff

459
00:23:47,309 --> 00:23:52,279
yeah yes<font color="#E5E5E5"> I believe</font>

460
00:24:10,320 --> 00:24:14,149
so sorry i didn't<font color="#CCCCCC"> have a better answer</font>

461
00:24:11,970 --> 00:24:14,149
for

