1
00:00:12,130 --> 00:00:20,100
hello thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for being here</font>

2
00:00:14,620 --> 00:00:22,180
today my name is<font color="#CCCCCC"> athanasius do it sees I</font>

3
00:00:20,100 --> 00:00:24,279
<font color="#E5E5E5">work</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> National Technical</font>

4
00:00:22,180 --> 00:00:27,849
University of Athens network operations

5
00:00:24,279 --> 00:00:29,079
center and I'm here to tell<font color="#CCCCCC"> you about a</font>

6
00:00:27,849 --> 00:00:31,419
couple of projects<font color="#E5E5E5"> that have been</font>

7
00:00:29,079 --> 00:00:34,420
working on for the last two years and

8
00:00:31,419 --> 00:00:37,989
are related with the assignment<font color="#E5E5E5"> of</font>

9
00:00:34,420 --> 00:00:42,220
persistent ipv6 addresses<font color="#E5E5E5"> in broadband</font>

10
00:00:37,989 --> 00:00:44,169
access networks so here's how we will

11
00:00:42,220 --> 00:00:47,980
proceed<font color="#CCCCCC"> I'm going to go basically</font>

12
00:00:44,170 --> 00:00:49,840
through two separate case studies the

13
00:00:47,980 --> 00:00:51,610
first the first<font color="#E5E5E5"> case studies about the</font>

14
00:00:49,840 --> 00:00:52,960
<font color="#E5E5E5">Greek student network and the second</font>

15
00:00:51,610 --> 00:00:56,230
case studies about the Greek school

16
00:00:52,960 --> 00:00:59,200
network on both of those cases i'm gonna

17
00:00:56,230 --> 00:01:02,440
go i'm gonna<font color="#CCCCCC"> pre briefly describe the</font>

18
00:00:59,200 --> 00:01:05,740
previous ipv6<font color="#CCCCCC"> setup and and then</font><font color="#E5E5E5"> i'm</font>

19
00:01:02,440 --> 00:01:09,548
going<font color="#E5E5E5"> to describe the work that we've</font>

20
00:01:05,740 --> 00:01:11,320
done all we are doing at<font color="#E5E5E5"> this point most</font>

21
00:01:09,549 --> 00:01:14,259
of what you<font color="#CCCCCC"> are going to hear has</font>

22
00:01:11,320 --> 00:01:16,949
already been implemented a good portion

23
00:01:14,259 --> 00:01:20,530
of it is<font color="#CCCCCC"> already in production and</font>

24
00:01:16,950 --> 00:01:26,289
another good portion of it<font color="#CCCCCC"> is moving</font>

25
00:01:20,530 --> 00:01:29,619
fast toward towards production so and we

26
00:01:26,289 --> 00:01:32,740
will going to conclude with some remarks

27
00:01:29,619 --> 00:01:36,159
and some best practices that we've come

28
00:01:32,740 --> 00:01:37,899
up with so but<font color="#E5E5E5"> before we proceed just a</font>

29
00:01:36,159 --> 00:01:39,850
trifle of orientation<font color="#E5E5E5"> I'm going to be</font>

30
00:01:37,899 --> 00:01:43,719
referring to broadband access networks

31
00:01:39,850 --> 00:01:48,130
where the the user is connected to a

32
00:01:43,719 --> 00:01:50,579
whole method net land which is connected

33
00:01:48,130 --> 00:01:54,068
to<font color="#E5E5E5"> a cpe the CP establishes a</font>

34
00:01:50,579 --> 00:01:56,889
point-to-point link to an aggregator and

35
00:01:54,069 --> 00:01:59,649
LNS if you like which communicates with

36
00:01:56,889 --> 00:02:02,439
a radius server the point point link is

37
00:01:59,649 --> 00:02:05,439
enumerated as usual with<font color="#E5E5E5"> stateless</font>

38
00:02:02,439 --> 00:02:08,799
address auto-configuration and and then

39
00:02:05,439 --> 00:02:12,160
the homeland is enumerated with dhcpv6

40
00:02:08,800 --> 00:02:14,580
prefix delegation the the ipv6 graphics

41
00:02:12,160 --> 00:02:17,680
ago that goes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the point-to-point link</font>

42
00:02:14,580 --> 00:02:20,680
comes from the radios via the framed

43
00:02:17,680 --> 00:02:23,470
ipv6 prefix radius attribute ITF radius

44
00:02:20,680 --> 00:02:24,610
attribute and then the the ipv6 traffic

45
00:02:23,470 --> 00:02:26,440
that goes to

46
00:02:24,610 --> 00:02:29,410
the<font color="#CCCCCC"> numerator homeland then the homeland</font>

47
00:02:26,440 --> 00:02:31,480
is related with a prefix that<font color="#E5E5E5"> comes from</font>

48
00:02:29,410 --> 00:02:34,450
the delegated<font color="#E5E5E5"> I will be</font><font color="#CCCCCC"> six graphics</font>

49
00:02:31,480 --> 00:02:36,310
<font color="#CCCCCC">radio savvy pair so basically</font><font color="#E5E5E5"> in this</font>

50
00:02:34,450 --> 00:02:38,679
<font color="#CCCCCC">setup that I'm describing you can see</font>

51
00:02:36,310 --> 00:02:43,150
that<font color="#CCCCCC"> the non-local pools on our on</font><font color="#E5E5E5"> the</font>

52
00:02:38,680 --> 00:02:44,530
aggregator this is<font color="#CCCCCC"> a this</font><font color="#E5E5E5"> means that</font><font color="#CCCCCC"> the</font>

53
00:02:43,150 --> 00:02:47,770
configuration of the aggregator is

54
00:02:44,530 --> 00:02:50,700
rather simple non-local pools which is

55
00:02:47,770 --> 00:02:54,250
basically a vendor dependent solution

56
00:02:50,700 --> 00:02:56,799
but obviously this means that your

57
00:02:54,250 --> 00:03:00,190
radius must be slightly a little bit

58
00:02:56,800 --> 00:03:03,790
<font color="#E5E5E5">smarter especially in the case where you</font>

59
00:03:00,190 --> 00:03:06,489
have multiple illnesses but not what but

60
00:03:03,790 --> 00:03:08,709
not too much smarter so on to the first

61
00:03:06,489 --> 00:03:10,600
case study which<font color="#CCCCCC"> is about the Greek</font>

62
00:03:08,709 --> 00:03:12,250
student<font color="#E5E5E5"> network the Greek student</font>

63
00:03:10,600 --> 00:03:15,690
network is basically a network that

64
00:03:12,250 --> 00:03:18,910
provides a net connectivity to

65
00:03:15,690 --> 00:03:21,640
university students throughout Greece

66
00:03:18,910 --> 00:03:24,190
the Greek scooter<font color="#E5E5E5"> network is operated by</font>

67
00:03:21,640 --> 00:03:26,708
<font color="#E5E5E5">the Greek research</font><font color="#CCCCCC"> network we have like</font>

68
00:03:24,190 --> 00:03:30,370
50 institutions<font color="#E5E5E5"> involved at this point</font>

69
00:03:26,709 --> 00:03:35,470
we<font color="#CCCCCC"> have like 50 or more 50,000 or most</font>

70
00:03:30,370 --> 00:03:38,890
students we do oh no<font color="#E5E5E5"> we have we do our</font>

71
00:03:35,470 --> 00:03:41,950
own ipv6 and ipv4 address assignment but

72
00:03:38,890 --> 00:03:43,298
we outsource all the user billing and<font color="#CCCCCC"> on</font>

73
00:03:41,950 --> 00:03:45,280
the phone<font color="#E5E5E5"> front-facing and the</font>

74
00:03:43,299 --> 00:03:48,209
registration to a couple of commercial

75
00:03:45,280 --> 00:03:54,340
airspace which incidentally do the

76
00:03:48,209 --> 00:03:56,980
authentication so our our proxy radius

77
00:03:54,340 --> 00:03:59,860
does the does the ipv4 and ipv6 address

78
00:03:56,980 --> 00:04:02,470
assignment but then proxies the

79
00:03:59,860 --> 00:04:05,799
authentication<font color="#E5E5E5"> web but but then proxies</font>

80
00:04:02,470 --> 00:04:07,480
the olive but he proxes the

81
00:04:05,799 --> 00:04:08,830
authentication<font color="#CCCCCC"> requests to a couple of</font>

82
00:04:07,480 --> 00:04:12,310
home radishes belonging to the

83
00:04:08,830 --> 00:04:16,299
commercial I space which has some

84
00:04:12,310 --> 00:04:19,209
peculiar ramifications because since the

85
00:04:16,298 --> 00:04:20,890
<font color="#E5E5E5">user data bases are on the ISPs the</font>

86
00:04:19,209 --> 00:04:23,860
account usernames are unknown to us

87
00:04:20,890 --> 00:04:26,650
until<font color="#CCCCCC"> the time the users log in for the</font>

88
00:04:23,860 --> 00:04:28,990
first time and more so the deleted

89
00:04:26,650 --> 00:04:31,419
account accounts are unknown to us and

90
00:04:28,990 --> 00:04:33,490
the time of the deletion is unknown so

91
00:04:31,419 --> 00:04:34,960
when an account connects actually

92
00:04:33,490 --> 00:04:35,849
connects for the last time we don't<font color="#E5E5E5"> know</font>

93
00:04:34,960 --> 00:04:37,529
whether<font color="#CCCCCC"> it's</font>

94
00:04:35,849 --> 00:04:39,929
this is actually the last<font color="#E5E5E5"> time so we</font>

95
00:04:37,529 --> 00:04:46,520
<font color="#CCCCCC">have very limited view into a user</font>

96
00:04:39,929 --> 00:04:52,438
database so we had ipv6 from like 2009

97
00:04:46,520 --> 00:04:55,229
yes from ya late 2009 this is how we

98
00:04:52,439 --> 00:04:57,709
used to do it we were using a night

99
00:04:55,229 --> 00:05:01,199
before based method which means that

100
00:04:57,709 --> 00:05:03,509
since<font color="#CCCCCC"> its time the user connects</font><font color="#E5E5E5"> it the</font>

101
00:05:01,199 --> 00:05:06,029
user<font color="#E5E5E5"> gets a random ipv4 address from an</font>

102
00:05:03,509 --> 00:05:09,050
ipv4 space by calculating<font color="#E5E5E5"> the relative</font>

103
00:05:06,029 --> 00:05:11,699
position of the<font color="#E5E5E5"> I before I address</font>

104
00:05:09,050 --> 00:05:13,919
relative<font color="#CCCCCC"> to the master died before space</font>

105
00:05:11,699 --> 00:05:15,569
we<font color="#CCCCCC"> can calculate an address offset and</font>

106
00:05:13,919 --> 00:05:20,279
then we can use<font color="#CCCCCC"> that offset in Reverse</font>

107
00:05:15,569 --> 00:05:22,439
with a couple with two ipv6 prefixes to

108
00:05:20,279 --> 00:05:24,149
enumerate to enumerate them and come

109
00:05:22,439 --> 00:05:26,610
with the final frame<font color="#E5E5E5"> that will be</font><font color="#CCCCCC"> 6</font>

110
00:05:24,149 --> 00:05:29,639
graphics and delegated ipv6 graphics so

111
00:05:26,610 --> 00:05:31,979
this<font color="#E5E5E5"> is a this is simple and efficient</font>

112
00:05:29,639 --> 00:05:34,439
and in<font color="#CCCCCC"> its stateless because I mean</font>

113
00:05:31,979 --> 00:05:36,330
since you have the idea for<font color="#E5E5E5"> a dress you</font>

114
00:05:34,439 --> 00:05:38,819
can come<font color="#E5E5E5"> up with the ipv6 address</font>

115
00:05:36,330 --> 00:05:42,990
without having to actually store

116
00:05:38,819 --> 00:05:44,849
anything but of course<font color="#CCCCCC"> cindy since its</font>

117
00:05:42,990 --> 00:05:47,849
time the user connects the ipv4 address

118
00:05:44,849 --> 00:05:51,899
changes this means that also the the

119
00:05:47,849 --> 00:05:54,990
ipv6 prefixes change and you know one of

120
00:05:51,899 --> 00:05:56,610
the one of<font color="#E5E5E5"> the constant requests that</font>

121
00:05:54,990 --> 00:05:59,789
we've been getting from multiple sighs

122
00:05:56,610 --> 00:06:04,919
was that people were asking for static

123
00:05:59,789 --> 00:06:07,229
prefixes static prefixes per user so we

124
00:06:04,919 --> 00:06:10,679
sat down and<font color="#E5E5E5"> so and thought how about</font>

125
00:06:07,229 --> 00:06:12,748
how could we play meant a static framed

126
00:06:10,679 --> 00:06:15,599
ipv6 graphics and the static delegated

127
00:06:12,749 --> 00:06:17,639
ipv6 prefix per user well well we

128
00:06:15,599 --> 00:06:20,519
thought we could just randomly choose

129
00:06:17,639 --> 00:06:22,709
two of the framed ipv6 prophets and the

130
00:06:20,519 --> 00:06:24,240
delegate<font color="#E5E5E5"> live right</font><font color="#CCCCCC"> per usual meaning</font>

131
00:06:22,709 --> 00:06:26,339
<font color="#E5E5E5">that it's not deterministic from the</font>

132
00:06:24,240 --> 00:06:27,899
<font color="#CCCCCC">user name the the perfect the practice</font>

133
00:06:26,339 --> 00:06:30,419
are not deterministic from a user name

134
00:06:27,899 --> 00:06:31,919
we'll just make that they always<font color="#CCCCCC"> stay</font>

135
00:06:30,419 --> 00:06:33,990
the same the<font color="#E5E5E5"> stay persistent track</font>

136
00:06:31,919 --> 00:06:36,479
across changes across reloads across

137
00:06:33,990 --> 00:06:38,789
whatever changes and of<font color="#E5E5E5"> course at some</font>

138
00:06:36,479 --> 00:06:40,919
point we're going to run out of prefixes

139
00:06:38,789 --> 00:06:44,188
obviously so we need to come<font color="#E5E5E5"> up with a</font>

140
00:06:40,919 --> 00:06:47,099
way to at some point start to recycle

141
00:06:44,189 --> 00:06:48,479
our prefixes so<font color="#E5E5E5"> basically here are the</font>

142
00:06:47,099 --> 00:06:49,128
requirements that<font color="#E5E5E5"> the detailed</font>

143
00:06:48,479 --> 00:06:53,449
requirements

144
00:06:49,129 --> 00:06:56,989
without we set out for ourselves I'll go

145
00:06:53,449 --> 00:07:00,139
through them as fast<font color="#E5E5E5"> as I can newly</font>

146
00:06:56,989 --> 00:07:03,378
appealing usernames get assigned<font color="#CCCCCC"> an ipv6</font>

147
00:07:00,139 --> 00:07:05,809
<font color="#E5E5E5">graphics on the fly subsequent versions</font>

148
00:07:03,379 --> 00:07:08,029
of the same already seen username will

149
00:07:05,809 --> 00:07:11,360
get always we will always yield the same

150
00:07:08,029 --> 00:07:13,159
ipv6 prefix obviously we<font color="#E5E5E5"> will try to</font>

151
00:07:11,360 --> 00:07:15,050
retain the<font color="#E5E5E5"> prefixes we have already</font>

152
00:07:13,159 --> 00:07:17,629
assigned for as long as<font color="#E5E5E5"> possible and</font>

153
00:07:15,050 --> 00:07:20,149
maybe we can<font color="#CCCCCC"> even set up a guaranteed</font>

154
00:07:17,629 --> 00:07:22,159
beard for example<font color="#E5E5E5"> six months at least</font>

155
00:07:20,149 --> 00:07:24,289
six<font color="#CCCCCC"> months before</font><font color="#E5E5E5"> a prefix becomes</font>

156
00:07:22,159 --> 00:07:26,629
candidate for recycling and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> lawn</font>

157
00:07:24,289 --> 00:07:30,409
which we try to recycle the least

158
00:07:26,629 --> 00:07:31,879
recently used prefix<font color="#E5E5E5"> that we have this</font>

159
00:07:30,409 --> 00:07:37,248
whole process must work very fast

160
00:07:31,879 --> 00:07:39,559
because as you can from what I've

161
00:07:37,249 --> 00:07:41,779
described previously this all happens on

162
00:07:39,559 --> 00:07:43,399
the fly during the triple a request so

163
00:07:41,779 --> 00:07:46,669
we are<font color="#E5E5E5"> actually boiling down the</font>

164
00:07:43,399 --> 00:07:49,369
authentication<font color="#CCCCCC"> request so we need to</font>

165
00:07:46,669 --> 00:07:52,459
come up with a sub second response to

166
00:07:49,369 --> 00:07:55,039
this problem and we obviously need<font color="#CCCCCC"> to</font>

167
00:07:52,459 --> 00:07:58,099
have a way to monitor performances with

168
00:07:55,039 --> 00:08:01,009
as detailed a way as possible<font color="#E5E5E5"> obviously</font>

169
00:07:58,099 --> 00:08:03,469
I mean we maybe<font color="#E5E5E5"> we'll have different</font>

170
00:08:01,009 --> 00:08:05,029
subscriber groups drawing<font color="#CCCCCC"> from different</font>

171
00:08:03,469 --> 00:08:07,219
prefix pools and of course<font color="#E5E5E5"> for law</font>

172
00:08:05,029 --> 00:08:09,709
enforcement purposes and the audit

173
00:08:07,219 --> 00:08:11,860
purposes<font color="#E5E5E5"> we'll need to have a way to log</font>

174
00:08:09,709 --> 00:08:14,209
all the past actions that have happened

175
00:08:11,860 --> 00:08:19,519
all the past actions that have happened

176
00:08:14,209 --> 00:08:23,240
so here's our approach so here's our

177
00:08:19,519 --> 00:08:26,389
approach for each user<font color="#E5E5E5"> will elect we</font>

178
00:08:23,240 --> 00:08:29,240
elect a one unique static non-negative

179
00:08:26,389 --> 00:08:31,669
integer which is the offset which is the

180
00:08:29,240 --> 00:08:34,969
offset and which we are going to<font color="#CCCCCC"> use in</font>

181
00:08:31,669 --> 00:08:37,698
the same way that you use in the in<font color="#E5E5E5"> the</font>

182
00:08:34,969 --> 00:08:40,610
previous ipv6 atop that I've<font color="#E5E5E5"> seen we use</font>

183
00:08:37,698 --> 00:08:43,429
this offset to enumerate the framed<font color="#E5E5E5"> end</font>

184
00:08:40,610 --> 00:08:45,139
the delegated prefixes for example if we

185
00:08:43,429 --> 00:08:47,540
<font color="#CCCCCC">have a pool size that having the size of</font>

186
00:08:45,139 --> 00:08:50,420
<font color="#E5E5E5">8,000 96 we'll have to come up with</font>

187
00:08:47,540 --> 00:08:52,519
offsets from zero to eight thousand 95

188
00:08:50,420 --> 00:08:55,069
to assign when there is a new user name

189
00:08:52,519 --> 00:08:58,420
appearing if there is<font color="#E5E5E5"> an unusual offset</font>

190
00:08:55,069 --> 00:09:00,910
then<font color="#E5E5E5"> we'll create a new record with that</font>

191
00:08:58,420 --> 00:09:02,709
<font color="#CCCCCC">is a name</font><font color="#E5E5E5"> and offset pair at some point</font>

192
00:09:00,910 --> 00:09:05,199
there will be no or<font color="#E5E5E5"> three offsets</font>

193
00:09:02,709 --> 00:09:07,089
available so at some point we'll start

194
00:09:05,200 --> 00:09:09,220
<font color="#CCCCCC">finding</font><font color="#E5E5E5"> always finding the record with</font>

195
00:09:07,089 --> 00:09:11,589
the oldest offset which is not in use

196
00:09:09,220 --> 00:09:13,120
and then in that<font color="#E5E5E5"> record will replace the</font>

197
00:09:11,589 --> 00:09:16,720
<font color="#CCCCCC">username of course before</font><font color="#E5E5E5"> we do that</font>

198
00:09:13,120 --> 00:09:21,040
will store the old username offset pair

199
00:09:16,720 --> 00:09:23,170
in a in some form of log and of<font color="#CCCCCC"> course</font>

200
00:09:21,040 --> 00:09:24,550
if there is an existing user name as

201
00:09:23,170 --> 00:09:26,920
user name that we've seen before we'll

202
00:09:24,550 --> 00:09:29,349
just retrieve the offset the offset user

203
00:09:26,920 --> 00:09:33,099
name pair and then return the offset so

204
00:09:29,350 --> 00:09:35,139
basically here's how it works for an

205
00:09:33,100 --> 00:09:37,449
example you have<font color="#CCCCCC"> on the on the leftmost</font>

206
00:09:35,139 --> 00:09:39,970
box we have the delegated pool space

207
00:09:37,449 --> 00:09:42,339
with from which all the users draw draw

208
00:09:39,970 --> 00:09:46,630
their prefixes you have a stored off set

209
00:09:42,339 --> 00:09:48,820
for<font color="#CCCCCC"> a for example</font><font color="#E5E5E5"> a one user and then on</font>

210
00:09:46,630 --> 00:09:51,130
the on the rightmost box you have<font color="#CCCCCC"> the</font>

211
00:09:48,820 --> 00:09:54,959
final delegated prefix which is as last

212
00:09:51,130 --> 00:09:59,380
56 this means that we can have like

213
00:09:54,959 --> 00:10:02,890
<font color="#CCCCCC">65,536 final delegated prefixes with an</font>

214
00:09:59,380 --> 00:10:05,170
equal amount of users what's<font color="#E5E5E5"> interesting</font>

215
00:10:02,890 --> 00:10:07,540
is that all the prefix is the

216
00:10:05,170 --> 00:10:10,750
non-negative integers get stored in an

217
00:10:07,540 --> 00:10:13,029
ordinary relational database and I mean

218
00:10:10,750 --> 00:10:15,190
integers are very easy to sort them it's

219
00:10:13,029 --> 00:10:17,740
<font color="#E5E5E5">very short in today's visit it's very</font>

220
00:10:15,190 --> 00:10:20,230
easy to count integers and there's an

221
00:10:17,740 --> 00:10:22,720
added benefit before if we<font color="#E5E5E5"> it if at some</font>

222
00:10:20,230 --> 00:10:25,750
point we<font color="#CCCCCC"> need to do a some sort</font><font color="#E5E5E5"> of real</font>

223
00:10:22,720 --> 00:10:27,880
number<font color="#E5E5E5"> or something similar we'll just</font>

224
00:10:25,750 --> 00:10:31,180
replace<font color="#E5E5E5"> the delegated pool space on the</font>

225
00:10:27,880 --> 00:10:34,390
leftmost box and everything else is

226
00:10:31,180 --> 00:10:37,180
going to happen automatically so this<font color="#E5E5E5"> is</font>

227
00:10:34,390 --> 00:10:38,920
an added benefit it took<font color="#CCCCCC"> me about a</font>

228
00:10:37,180 --> 00:10:41,229
month to come up with an implementation

229
00:10:38,920 --> 00:10:43,839
for what I've just described it's a perl

230
00:10:41,230 --> 00:10:46,600
module that<font color="#E5E5E5"> is actually integrated with</font>

231
00:10:43,839 --> 00:10:50,380
the<font color="#CCCCCC"> free radius server through the rlm</font>

232
00:10:46,600 --> 00:10:53,649
perl module and<font color="#E5E5E5"> as a as a storage it</font>

233
00:10:50,380 --> 00:10:56,199
uses<font color="#CCCCCC"> aim icicle relational database a</font>

234
00:10:53,649 --> 00:10:58,630
couple of tables there is<font color="#E5E5E5"> a ipv6 perfect</font>

235
00:10:56,199 --> 00:11:00,969
pool table will which will contains you

236
00:10:58,630 --> 00:11:02,680
know the<font color="#E5E5E5"> master pools from which we draw</font>

237
00:11:00,970 --> 00:11:04,029
the prefixes there is the static

238
00:11:02,680 --> 00:11:06,939
addresses table which contains<font color="#E5E5E5"> the</font>

239
00:11:04,029 --> 00:11:08,260
offsets and the<font color="#CCCCCC"> usernames and there are</font>

240
00:11:06,940 --> 00:11:11,150
a couple of log tables for<font color="#E5E5E5"> other</font>

241
00:11:08,260 --> 00:11:14,480
<font color="#E5E5E5">purposes as I've described before</font>

242
00:11:11,150 --> 00:11:17,390
the entire code is as you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font>

243
00:11:14,480 --> 00:11:19,160
available on my github page some

244
00:11:17,390 --> 00:11:21,890
<font color="#E5E5E5">features which might be of interest is</font>

245
00:11:19,160 --> 00:11:23,540
that like I<font color="#E5E5E5"> said we have the ability to</font>

246
00:11:21,890 --> 00:11:26,300
group our users into many different

247
00:11:23,540 --> 00:11:29,030
groups we have the ability to keep track

248
00:11:26,300 --> 00:11:32,209
of our online<font color="#E5E5E5"> users and if we like we</font>

249
00:11:29,030 --> 00:11:38,959
can detect w genes and similar

250
00:11:32,210 --> 00:11:40,850
situations we<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are able</font><font color="#CCCCCC"> to configure</font><font color="#E5E5E5"> a</font>

251
00:11:38,960 --> 00:11:43,490
guaranteed inactive address retention

252
00:11:40,850 --> 00:11:45,560
meaning that<font color="#E5E5E5"> since you</font><font color="#CCCCCC"> can't assign the</font>

253
00:11:43,490 --> 00:11:48,980
prefix you<font color="#E5E5E5"> cannot lose it if you if you</font>

254
00:11:45,560 --> 00:11:51,709
stay inactive for up to five months

255
00:11:48,980 --> 00:11:53,780
<font color="#E5E5E5">after</font><font color="#CCCCCC"> that period is elapsed you don't</font>

256
00:11:51,710 --> 00:11:56,060
you don't automatically lose the prefix

257
00:11:53,780 --> 00:11:59,439
but you<font color="#E5E5E5"> lose it when you're prefix code</font>

258
00:11:56,060 --> 00:12:03,010
becomes the least recently used and

259
00:11:59,440 --> 00:12:06,380
lastly we took all the<font color="#E5E5E5"> all the care to</font>

260
00:12:03,010 --> 00:12:08,390
to make our system I mean so<font color="#CCCCCC"> that our</font>

261
00:12:06,380 --> 00:12:10,100
system can be operated by multiple

262
00:12:08,390 --> 00:12:12,020
radius<font color="#E5E5E5"> demons which are which which</font>

263
00:12:10,100 --> 00:12:13,490
operate on<font color="#E5E5E5"> the same database so we took</font>

264
00:12:12,020 --> 00:12:15,340
all the expertise to implement all<font color="#CCCCCC"> the</font>

265
00:12:13,490 --> 00:12:20,030
locks<font color="#E5E5E5"> and all the necessary features</font>

266
00:12:15,340 --> 00:12:22,430
that we that we<font color="#CCCCCC"> should do so like</font><font color="#E5E5E5"> I said</font>

267
00:12:20,030 --> 00:12:24,050
we are<font color="#CCCCCC"> very interested in monitoring the</font>

268
00:12:22,430 --> 00:12:26,689
performance because as I said we're

269
00:12:24,050 --> 00:12:30,349
boarding down the<font color="#E5E5E5"> triple a process so we</font>

270
00:12:26,690 --> 00:12:32,480
have a very we've taken extra care to

271
00:12:30,350 --> 00:12:34,340
implement all this performance counter

272
00:12:32,480 --> 00:12:36,470
inside our code we can measure the

273
00:12:34,340 --> 00:12:39,770
average duration for its different case

274
00:12:36,470 --> 00:12:41,770
create record retrieve existing record

275
00:12:39,770 --> 00:12:44,569
replace the offsetting the record<font color="#E5E5E5"> logout</font>

276
00:12:41,770 --> 00:12:47,090
we keep counters for it of our<font color="#CCCCCC"> different</font>

277
00:12:44,570 --> 00:12:49,040
cases and we also even have drilled down

278
00:12:47,090 --> 00:12:53,210
<font color="#E5E5E5">diamonds for its of our different types</font>

279
00:12:49,040 --> 00:12:54,949
of SQL queries a sequel queries<font color="#E5E5E5"> so as</font>

280
00:12:53,210 --> 00:12:58,520
<font color="#E5E5E5">you can as you can see we have</font><font color="#CCCCCC"> a very</font>

281
00:12:54,950 --> 00:13:01,520
very detailed sense of where as where

282
00:12:58,520 --> 00:13:03,319
our system spends its time so this

283
00:13:01,520 --> 00:13:07,069
system has<font color="#E5E5E5"> been in production for almost</font>

284
00:13:03,320 --> 00:13:09,050
two years now it's very fast the

285
00:13:07,070 --> 00:13:11,420
actually<font color="#CCCCCC"> the 50 millisecond amount is</font>

286
00:13:09,050 --> 00:13:14,329
slightly exaggerated<font color="#CCCCCC"> and most most of</font>

287
00:13:11,420 --> 00:13:17,180
the most<font color="#E5E5E5"> of the requests complete in</font>

288
00:13:14,330 --> 00:13:19,250
less than 10<font color="#CCCCCC"> milliseconds initially we</font>

289
00:13:17,180 --> 00:13:20,329
had one<font color="#CCCCCC"> or one and only initial master</font>

290
00:13:19,250 --> 00:13:23,000
pool but at this point<font color="#E5E5E5"> we have</font>

291
00:13:20,330 --> 00:13:24,100
<font color="#E5E5E5">segregated and users into one big master</font>

292
00:13:23,000 --> 00:13:26,470
full sense and son

293
00:13:24,100 --> 00:13:29,170
users how also<font color="#CCCCCC"> located in a second</font>

294
00:13:26,470 --> 00:13:34,240
address pool so all in all were very

295
00:13:29,170 --> 00:13:36,969
happy with<font color="#CCCCCC"> it so</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the second case</font>

296
00:13:34,240 --> 00:13:44,110
study and it's<font color="#E5E5E5"> about the Greek school</font>

297
00:13:36,970 --> 00:13:47,110
network the Greek school network is a is

298
00:13:44,110 --> 00:13:48,970
a country why the broadband access

299
00:13:47,110 --> 00:13:53,050
network in<font color="#E5E5E5"> Greece that provides network</font>

300
00:13:48,970 --> 00:13:55,180
access to<font color="#E5E5E5"> 18 almost 18,000 schools and</font>

301
00:13:53,050 --> 00:13:58,660
administrative units belonging to the

302
00:13:55,180 --> 00:14:01,779
<font color="#E5E5E5">Ministry of Education in Greece apart</font>

303
00:13:58,660 --> 00:14:03,639
<font color="#E5E5E5">from providing access we do we have a</font>

304
00:14:01,779 --> 00:14:06,189
<font color="#E5E5E5">very sophisticated content filtering</font>

305
00:14:03,639 --> 00:14:08,709
system we provide information services

306
00:14:06,190 --> 00:14:12,399
to schools and<font color="#E5E5E5"> teachers web</font><font color="#CCCCCC"> hosting</font>

307
00:14:08,709 --> 00:14:15,550
email everything we have liked more than

308
00:14:12,399 --> 00:14:18,310
10,000<font color="#E5E5E5"> CPS we have at this point we</font><font color="#CCCCCC"> have</font>

309
00:14:15,550 --> 00:14:20,560
six router L&S aggregators we have to

310
00:14:18,310 --> 00:14:25,569
radio service and the multi multi

311
00:14:20,560 --> 00:14:28,420
replica directory we had died<font color="#CCCCCC"> pv 64 for</font>

312
00:14:25,569 --> 00:14:34,569
<font color="#CCCCCC">ten years</font><font color="#E5E5E5"> now in the Greek school</font>

313
00:14:28,420 --> 00:14:36,490
network in fact we at the Greek school

314
00:14:34,569 --> 00:14:38,649
network ipv6 setup is mentioned as a

315
00:14:36,490 --> 00:14:41,139
case study in<font color="#E5E5E5"> the book from cisco press</font>

316
00:14:38,649 --> 00:14:42,819
global ipv6 strategies from business

317
00:14:41,139 --> 00:14:44,170
analysis to operation platinum planning

318
00:14:42,819 --> 00:14:46,930
so if you have the book you might as

319
00:14:44,170 --> 00:14:49,420
well take a look<font color="#CCCCCC"> at sub turf I've where</font>

320
00:14:46,930 --> 00:14:52,120
I think<font color="#CCCCCC"> we are mentioned all the units</font>

321
00:14:49,420 --> 00:14:54,610
used to get the other units views we

322
00:14:52,120 --> 00:14:59,110
have to get private<font color="#CCCCCC"> seized from the same</font>

323
00:14:54,610 --> 00:15:01,810
prefix pool as last 63 was assigned per

324
00:14:59,110 --> 00:15:04,060
unit and it was split into<font color="#CCCCCC"> a / 64 for</font>

325
00:15:01,810 --> 00:15:06,489
the point-to-point and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last 64 for</font>

326
00:15:04,060 --> 00:15:08,199
the DCP v6 prefix delegation the

327
00:15:06,490 --> 00:15:12,160
assignment of prefixes would it used to

328
00:15:08,199 --> 00:15:14,349
be semi manual and so it<font color="#E5E5E5"> was you</font><font color="#CCCCCC"> know</font>

329
00:15:12,160 --> 00:15:17,829
obviously an error-prone and cumbersome

330
00:15:14,350 --> 00:15:21,370
procedure so and one more thing the the

331
00:15:17,829 --> 00:15:25,540
the ipv6 prefix is werster were stored

332
00:15:21,370 --> 00:15:29,079
as in the directory as<font color="#E5E5E5"> verbatim ipv6</font>

333
00:15:25,540 --> 00:15:30,730
radius attribute so<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a radius reply</font>

334
00:15:29,079 --> 00:15:35,829
items for those of you who are more

335
00:15:30,730 --> 00:15:36,740
familiar with<font color="#CCCCCC"> the with this</font><font color="#E5E5E5"> type of av</font>

336
00:15:35,829 --> 00:15:38,260
pair

337
00:15:36,740 --> 00:15:41,360
so basically we sat down and<font color="#CCCCCC"> thought</font>

338
00:15:38,260 --> 00:15:43,069
let's design the ipv6<font color="#E5E5E5"> setup that we are</font>

339
00:15:41,360 --> 00:15:44,540
going<font color="#E5E5E5"> to have on the Greek school on</font><font color="#CCCCCC"> the</font>

340
00:15:43,070 --> 00:15:47,899
Greek school network for the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> 10</font>

341
00:15:44,540 --> 00:15:50,719
years so we'll try to design for<font color="#E5E5E5"> the</font>

342
00:15:47,899 --> 00:15:53,360
next year<font color="#E5E5E5"> 10 years ahead we'll assign</font>

343
00:15:50,720 --> 00:15:55,459
this time we'll assign a static / 56

344
00:15:53,360 --> 00:15:58,060
<font color="#CCCCCC">passcode which means that</font><font color="#E5E5E5"> it's cooler</font>

345
00:15:55,459 --> 00:16:03,859
administrative unit unit will<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font>

346
00:15:58,060 --> 00:16:05,810
enumerate a maximum of 256 villains this

347
00:16:03,860 --> 00:16:08,779
time we're gonna we're gonna<font color="#E5E5E5"> start clear</font>

348
00:16:05,810 --> 00:16:10,369
ipv6 prefixes in a directory with more

349
00:16:08,779 --> 00:16:12,560
vendor neutral solution we're not

350
00:16:10,370 --> 00:16:15,260
storing VSA is in the in the directory

351
00:16:12,560 --> 00:16:17,630
and this time we'll extend the directory

352
00:16:15,260 --> 00:16:19,970
schema with a couple of dedicated ipv6

353
00:16:17,630 --> 00:16:21,770
attributes which makes sense<font color="#E5E5E5"> and of</font>

354
00:16:19,970 --> 00:16:24,020
course if necessary we'll have the

355
00:16:21,770 --> 00:16:26,300
radius translate to those via 22

356
00:16:24,020 --> 00:16:28,339
whatever vs a's we need to use only if

357
00:16:26,300 --> 00:16:31,069
necessary so this is a very this is a

358
00:16:28,339 --> 00:16:34,220
smarter<font color="#CCCCCC"> setup and this time we'll grupa</font>

359
00:16:31,070 --> 00:16:35,750
are our units into three categories high

360
00:16:34,220 --> 00:16:37,610
schools elementary schools and

361
00:16:35,750 --> 00:16:40,390
administrative units and we'll assign

362
00:16:37,610 --> 00:16:43,760
from different prefix pools per category

363
00:16:40,390 --> 00:16:47,180
this is going<font color="#E5E5E5"> to come very handy this</font>

364
00:16:43,760 --> 00:16:49,399
guy become very very honey in the case

365
00:16:47,180 --> 00:16:51,140
of policy enforcement<font color="#E5E5E5"> and content</font>

366
00:16:49,399 --> 00:16:52,690
filtering as<font color="#E5E5E5"> I have</font><font color="#CCCCCC"> said we have a</font><font color="#E5E5E5"> very</font>

367
00:16:51,140 --> 00:16:56,630
sophisticated content filtering and

368
00:16:52,690 --> 00:16:58,670
being able to enforce our policy is very

369
00:16:56,630 --> 00:17:00,380
<font color="#E5E5E5">important as you can see especially for</font>

370
00:16:58,670 --> 00:17:03,439
the elemental category which<font color="#CCCCCC"> is full of</font>

371
00:17:00,380 --> 00:17:07,490
underage minors so we took extra care to

372
00:17:03,440 --> 00:17:08,839
make sure<font color="#E5E5E5"> that we have all we make at</font>

373
00:17:07,490 --> 00:17:11,870
least<font color="#CCCCCC"> we're trying to make all</font><font color="#E5E5E5"> the right</font>

374
00:17:08,839 --> 00:17:14,119
choices in that regard<font color="#E5E5E5"> so about the ipv6</font>

375
00:17:11,869 --> 00:17:16,069
pool dimensioning will assume a double

376
00:17:14,119 --> 00:17:17,510
that will have double the units in like

377
00:17:16,069 --> 00:17:19,849
ten years<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is not going to happen</font>

378
00:17:17,510 --> 00:17:23,260
so I think<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> pretty safe from that</font>

379
00:17:19,849 --> 00:17:25,760
regard for the directory services we are

380
00:17:23,260 --> 00:17:27,829
for the directory we are coming<font color="#CCCCCC"> up</font><font color="#E5E5E5"> with</font>

381
00:17:25,760 --> 00:17:29,540
two new attributes their strings and

382
00:17:27,829 --> 00:17:31,490
<font color="#E5E5E5">their the frame type of six prefix and</font>

383
00:17:29,540 --> 00:17:33,290
the delegated<font color="#E5E5E5"> I v6 profits as you might</font>

384
00:17:31,490 --> 00:17:35,780
<font color="#CCCCCC">have guessed and they are translated</font>

385
00:17:33,290 --> 00:17:37,790
obviously to by the radius to the framed

386
00:17:35,780 --> 00:17:39,879
ipv6 prefix radius attribute and the

387
00:17:37,790 --> 00:17:44,240
delegated I bc i<font color="#E5E5E5"> will be six prefix and</font>

388
00:17:39,880 --> 00:17:46,040
some more AV pairs that<font color="#E5E5E5"> we're still</font>

389
00:17:44,240 --> 00:17:49,630
considering how are going to be

390
00:17:46,040 --> 00:17:49,629
<font color="#CCCCCC">generated or statically allocated</font>

391
00:17:49,960 --> 00:17:54,000
the goals that we set out for<font color="#CCCCCC"> the</font>

392
00:17:51,789 --> 00:17:56,669
software<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> going to be using is</font>

393
00:17:54,000 --> 00:18:00,970
obviously the operation must be as

394
00:17:56,669 --> 00:18:03,159
automated as possible we would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to</font>

395
00:18:00,970 --> 00:18:04,330
<font color="#CCCCCC">have two modes of operation first we'd</font>

396
00:18:03,159 --> 00:18:07,570
like<font color="#CCCCCC"> to have a batch mode of operation</font>

397
00:18:04,330 --> 00:18:09,460
which means going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the directory yet</font>

398
00:18:07,570 --> 00:18:12,100
all the units assign prefixes to every

399
00:18:09,460 --> 00:18:15,490
to every unit and we'd also like to have

400
00:18:12,100 --> 00:18:17,889
a single unit mode which means go to the

401
00:18:15,490 --> 00:18:21,059
director get that specific unit assigned

402
00:18:17,890 --> 00:18:23,169
prefix only to<font color="#E5E5E5"> that specific unit unit</font>

403
00:18:21,059 --> 00:18:26,500
obviously like we had on the<font color="#E5E5E5"> Greek</font>

404
00:18:23,169 --> 00:18:28,029
student<font color="#E5E5E5"> network</font><font color="#CCCCCC"> we're very very much</font>

405
00:18:26,500 --> 00:18:31,510
likely ability to<font color="#CCCCCC"> do on</font><font color="#E5E5E5"> the fly</font>

406
00:18:28,029 --> 00:18:35,110
renumbering without much hassle and as

407
00:18:31,510 --> 00:18:37,000
you can probably imagine the units are

408
00:18:35,110 --> 00:18:40,270
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to get you know created and delete</font>

409
00:18:37,000 --> 00:18:42,159
it all the time so we need to come up

410
00:18:40,270 --> 00:18:44,830
with a general way to have a sort of

411
00:18:42,159 --> 00:18:46,419
<font color="#CCCCCC">liza lifecycle automation with the</font>

412
00:18:44,830 --> 00:18:50,168
automatic detection of creative the

413
00:18:46,419 --> 00:18:52,179
creation and deletion of units so the

414
00:18:50,169 --> 00:18:57,190
the requirements for the software are

415
00:18:52,179 --> 00:18:59,049
pretty much obvious obviously the

416
00:18:57,190 --> 00:19:02,470
software must be able to update the

417
00:18:59,049 --> 00:19:04,450
directory entries like<font color="#E5E5E5"> I said it must</font>

418
00:19:02,470 --> 00:19:08,559
have multiple configurable group groups

419
00:19:04,450 --> 00:19:11,380
and fools and possibly with different

420
00:19:08,559 --> 00:19:14,020
delegated prefix length per group and of

421
00:19:11,380 --> 00:19:15,730
<font color="#CCCCCC">course it will have to be able</font><font color="#E5E5E5"> to assign</font>

422
00:19:14,020 --> 00:19:20,139
the frame the delegated prefixes per

423
00:19:15,730 --> 00:19:22,240
unit and the the algorithm that<font color="#E5E5E5"> we're</font>

424
00:19:20,140 --> 00:19:23,710
using is pretty much the same with the

425
00:19:22,240 --> 00:19:25,870
Greek student network that I've

426
00:19:23,710 --> 00:19:28,419
described before which means a new unit

427
00:19:25,870 --> 00:19:30,610
gets assigned<font color="#E5E5E5"> new free prefix an</font>

428
00:19:28,419 --> 00:19:33,070
existing unit always retains the same

429
00:19:30,610 --> 00:19:34,899
prefix and a deleted unit causes the

430
00:19:33,070 --> 00:19:38,230
prefix<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> recycled and everything</font>

431
00:19:34,899 --> 00:19:40,330
<font color="#E5E5E5">gets logged of course so here's the</font>

432
00:19:38,230 --> 00:19:43,120
previous slide in more and more color

433
00:19:40,330 --> 00:19:45,010
the the big circle the big<font color="#CCCCCC"> goal and</font>

434
00:19:43,120 --> 00:19:47,529
<font color="#CCCCCC">circle on the on the left is our</font>

435
00:19:45,010 --> 00:19:49,629
software the software reads the units

436
00:19:47,529 --> 00:19:51,820
from the directory one by one also reads

437
00:19:49,630 --> 00:19:53,620
the offsets from the pool and address

438
00:19:51,820 --> 00:19:55,570
offset DB if there's a new unit it

439
00:19:53,620 --> 00:19:58,120
creates a new offsetting the ddb or

440
00:19:55,570 --> 00:19:59,950
recycles as necessary classifies the

441
00:19:58,120 --> 00:20:01,389
unique to its category gets a pool for

442
00:19:59,950 --> 00:20:03,369
<font color="#CCCCCC">the for the</font><font color="#E5E5E5"> category</font>

443
00:20:01,389 --> 00:20:05,199
yet she offered offset for for the unit

444
00:20:03,369 --> 00:20:08,499
<font color="#E5E5E5">and then finally calculates the perfect</font>

445
00:20:05,200 --> 00:20:13,329
from<font color="#CCCCCC"> the offset and then stores the</font><font color="#E5E5E5"> the</font>

446
00:20:08,499 --> 00:20:14,859
<font color="#E5E5E5">result into the pair of directory</font>

447
00:20:13,329 --> 00:20:19,389
attributes that<font color="#E5E5E5"> I have shown you before</font>

448
00:20:14,859 --> 00:20:21,428
that<font color="#E5E5E5"> I've shown you before the</font><font color="#CCCCCC"> the</font>

449
00:20:19,389 --> 00:20:23,829
software code we were able<font color="#E5E5E5"> to use a good</font>

450
00:20:21,429 --> 00:20:26,259
portion of our of the code that<font color="#E5E5E5"> we've</font>

451
00:20:23,829 --> 00:20:28,209
written for the Greek student<font color="#E5E5E5"> network we</font>

452
00:20:26,259 --> 00:20:30,219
were able<font color="#E5E5E5"> to use it</font><font color="#CCCCCC"> for the Greek school</font>

453
00:20:28,209 --> 00:20:32,499
network but this<font color="#E5E5E5"> time this this piece of</font>

454
00:20:30,219 --> 00:20:34,929
<font color="#E5E5E5">software is standalone so we had a</font>

455
00:20:32,499 --> 00:20:36,669
considerable more leeway in order to

456
00:20:34,929 --> 00:20:38,769
<font color="#E5E5E5">make it more modern we were able to use</font>

457
00:20:36,669 --> 00:20:42,219
a modern version of Perl with all the

458
00:20:38,769 --> 00:20:43,659
new features that<font color="#E5E5E5"> are on the syntax we</font>

459
00:20:42,219 --> 00:20:47,139
were able to<font color="#E5E5E5"> use whatever sip and</font>

460
00:20:43,659 --> 00:20:49,119
modules will I we liked obviously<font color="#CCCCCC"> our</font>

461
00:20:47,139 --> 00:20:53,708
software now can communicate with<font color="#CCCCCC"> the</font>

462
00:20:49,119 --> 00:20:54,999
database and<font color="#E5E5E5"> the directory and and of</font>

463
00:20:53,709 --> 00:20:59,200
<font color="#E5E5E5">course we're using a modern person</font>

464
00:20:54,999 --> 00:21:01,479
modern version<font color="#E5E5E5"> of my secret and of</font>

465
00:20:59,200 --> 00:21:04,359
course contrast this piece of software

466
00:21:01,479 --> 00:21:06,190
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the with the one we had on the</font>

467
00:21:04,359 --> 00:21:07,899
<font color="#E5E5E5">Greek student</font><font color="#CCCCCC"> network where we got</font>

468
00:21:06,190 --> 00:21:10,119
integrated into the radius this is a

469
00:21:07,899 --> 00:21:12,668
standalone software so for example<font color="#E5E5E5"> we</font>

470
00:21:10,119 --> 00:21:17,139
can we can run it once per day or

471
00:21:12,669 --> 00:21:20,979
<font color="#E5E5E5">something like that so some final slides</font>

472
00:21:17,139 --> 00:21:23,708
before<font color="#E5E5E5"> I finish as you can see in both</font>

473
00:21:20,979 --> 00:21:27,009
in both<font color="#CCCCCC"> our</font><font color="#E5E5E5"> cases the cases I've shown</font>

474
00:21:23,709 --> 00:21:29,709
you we are storing offset<font color="#CCCCCC"> non negative</font>

475
00:21:27,009 --> 00:21:33,729
integers instead of full prefixes in the

476
00:21:29,709 --> 00:21:35,919
directory we<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> very happy with this</font>

477
00:21:33,729 --> 00:21:37,989
decision because when indexed properly

478
00:21:35,919 --> 00:21:40,059
we can get a very very fast response

479
00:21:37,989 --> 00:21:42,909
from the relational database so we are

480
00:21:40,059 --> 00:21:45,309
<font color="#E5E5E5">very happy with this choice and like I</font>

481
00:21:42,909 --> 00:21:47,229
said in both<font color="#E5E5E5"> cases we use different</font>

482
00:21:45,309 --> 00:21:50,229
prefix pools to group our subscribers

483
00:21:47,229 --> 00:21:54,159
obviously we use a relational database

484
00:21:50,229 --> 00:21:56,200
and on the Greeks school network case on

485
00:21:54,159 --> 00:21:58,989
<font color="#E5E5E5">this which is which was the second case</font>

486
00:21:56,200 --> 00:22:01,239
study we use a database as the primary

487
00:21:58,989 --> 00:22:03,549
storage for the offset and then we copy

488
00:22:01,239 --> 00:22:06,759
the full prefixes in the directory so if

489
00:22:03,549 --> 00:22:10,479
<font color="#E5E5E5">we were I mean if hypothetically we were</font>

490
00:22:06,759 --> 00:22:12,309
to delete all the prefixes from the

491
00:22:10,479 --> 00:22:13,959
directory we could recreate all the

492
00:22:12,309 --> 00:22:14,590
information from<font color="#E5E5E5"> the database and</font>

493
00:22:13,959 --> 00:22:17,080
storage again

494
00:22:14,590 --> 00:22:19,840
directory I'll<font color="#E5E5E5"> get to smash mapping</font>

495
00:22:17,080 --> 00:22:22,870
shortly and<font color="#CCCCCC"> they while developing this</font>

496
00:22:19,840 --> 00:22:25,480
piece of<font color="#E5E5E5"> software I came it came about</font>

497
00:22:22,870 --> 00:22:27,010
that<font color="#E5E5E5"> the single user mode is equally as</font>

498
00:22:25,480 --> 00:22:29,919
important as the bat mo but small

499
00:22:27,010 --> 00:22:33,158
because it really enables you to test

500
00:22:29,919 --> 00:22:35,110
the software in a in a sane way instead

501
00:22:33,159 --> 00:22:38,470
of<font color="#E5E5E5"> having to run the bats mode each time</font>

502
00:22:35,110 --> 00:22:39,969
so some shoots of directors that we're

503
00:22:38,470 --> 00:22:41,799
going<font color="#E5E5E5"> to be taking especially for the</font>

504
00:22:39,970 --> 00:22:44,860
Greek school network<font color="#E5E5E5"> case with still</font>

505
00:22:41,799 --> 00:22:47,740
ongoing we'd like<font color="#CCCCCC"> to have the ability to</font>

506
00:22:44,860 --> 00:22:50,080
add and<font color="#E5E5E5"> we'll probably do it some way</font>

507
00:22:47,740 --> 00:22:52,809
the ability<font color="#CCCCCC"> to add triggers so instead</font>

508
00:22:50,080 --> 00:22:55,330
of<font color="#CCCCCC"> having to write to you know use the</font>

509
00:22:52,809 --> 00:22:57,250
<font color="#E5E5E5">software once per day we could have</font>

510
00:22:55,330 --> 00:22:59,020
external tools that are related with the

511
00:22:57,250 --> 00:23:02,440
creation<font color="#E5E5E5"> and deletion of schools and</font>

512
00:22:59,020 --> 00:23:05,408
units able to trigger our you know our

513
00:23:02,440 --> 00:23:08,110
software by an API and then our software

514
00:23:05,409 --> 00:23:11,289
will come up<font color="#CCCCCC"> with a prefix at the point</font>

515
00:23:08,110 --> 00:23:14,549
of unit creation or deletion of course

516
00:23:11,289 --> 00:23:17,140
in both cases<font color="#CCCCCC"> we are using offsets so</font>

517
00:23:14,549 --> 00:23:19,450
not<font color="#E5E5E5"> only we can do I believe six and a</font>

518
00:23:17,140 --> 00:23:23,409
Malaysian but we could also do static IP

519
00:23:19,450 --> 00:23:25,690
before enumeration quite possibly at

520
00:23:23,409 --> 00:23:28,029
some points our code needs some sort of

521
00:23:25,690 --> 00:23:30,659
clean up a one remark that I'd like<font color="#E5E5E5"> to</font>

522
00:23:28,029 --> 00:23:33,399
make it that all these systems are very

523
00:23:30,659 --> 00:23:36,130
<font color="#CCCCCC">okay they have the complexity that they</font>

524
00:23:33,399 --> 00:23:38,439
they get integrated inside radius demons

525
00:23:36,130 --> 00:23:42,610
they talk to directories they talk to

526
00:23:38,440 --> 00:23:44,409
databases so it's it's easy to test the

527
00:23:42,610 --> 00:23:46,809
individual pieces of those<font color="#E5E5E5"> pieces of</font>

528
00:23:44,409 --> 00:23:48,549
<font color="#E5E5E5">software one by one but it's very act</font>

529
00:23:46,809 --> 00:23:52,360
it's<font color="#E5E5E5"> actually very difficult to actually</font>

530
00:23:48,549 --> 00:23:55,059
test the whole system as a whole so the

531
00:23:52,360 --> 00:23:57,729
need for more rigorous testing is is

532
00:23:55,059 --> 00:24:00,970
always there and<font color="#E5E5E5"> of course there is</font>

533
00:23:57,730 --> 00:24:02,649
there<font color="#CCCCCC"> is documentation but in an ideal</font>

534
00:24:00,970 --> 00:24:05,470
world I'd<font color="#CCCCCC"> like to write much more</font>

535
00:24:02,649 --> 00:24:06,820
documentation about it specification of

536
00:24:05,470 --> 00:24:09,309
offset as you

537
00:24:06,820 --> 00:24:12,730
as you've seen<font color="#E5E5E5"> we are allocating offsets</font>

538
00:24:09,309 --> 00:24:14,590
<font color="#CCCCCC">non-negative integers one by one so one</font>

539
00:24:12,730 --> 00:24:18,340
of one idea that<font color="#E5E5E5"> we've been</font><font color="#CCCCCC"> toying with</font>

540
00:24:14,590 --> 00:24:20,949
was like instead<font color="#CCCCCC"> of assigning the</font>

541
00:24:18,340 --> 00:24:23,379
offsets in a linear fashion meaning 0

542
00:24:20,950 --> 00:24:27,970
then 1 and 2 and<font color="#CCCCCC"> 3 and so on we could</font>

543
00:24:23,380 --> 00:24:30,190
allocate them in a fashion like 0 0 then

544
00:24:27,970 --> 00:24:33,279
four then<font color="#E5E5E5"> 2 then 6 and so on in a</font>

545
00:24:30,190 --> 00:24:35,320
modular fashion so this is described and

546
00:24:33,279 --> 00:24:37,690
this is a very<font color="#E5E5E5"> good practice obviously</font>

547
00:24:35,320 --> 00:24:40,178
for a high for higher levels of ipv6

548
00:24:37,690 --> 00:24:42,809
address pools but in our case since we

549
00:24:40,179 --> 00:24:45,960
are doing the final level of offset

550
00:24:42,809 --> 00:24:48,490
allocation obviously I mean after

551
00:24:45,960 --> 00:24:51,389
considerable offset recycling units or

552
00:24:48,490 --> 00:24:54,220
users will come and go all the time are

553
00:24:51,389 --> 00:24:56,529
offset pool<font color="#E5E5E5"> will all will anyway get</font>

554
00:24:54,220 --> 00:25:00,850
fragmented so doing the space allocation

555
00:24:56,529 --> 00:25:03,669
seems like it doesn't heal any results

556
00:25:00,850 --> 00:25:07,330
that I can that<font color="#E5E5E5"> I can identify as useful</font>

557
00:25:03,669 --> 00:25:09,429
so maybe we could be could be able to

558
00:25:07,330 --> 00:25:11,710
defragment<font color="#E5E5E5"> but I mean this would mean</font>

559
00:25:09,429 --> 00:25:14,889
that the users will get assigned

560
00:25:11,710 --> 00:25:17,440
different prefixes so this is<font color="#E5E5E5"> okay kind</font>

561
00:25:14,889 --> 00:25:21,820
of defeats the whole purpose if you ask

562
00:25:17,440 --> 00:25:23,409
me so<font color="#E5E5E5"> okay so anyway I think that we</font>

563
00:25:21,820 --> 00:25:25,539
have like five minutes thank you<font color="#CCCCCC"> very</font>

564
00:25:23,409 --> 00:25:28,299
<font color="#CCCCCC">much for</font><font color="#E5E5E5"> your attention and I think that</font>

565
00:25:25,539 --> 00:25:30,570
we can take a couple<font color="#E5E5E5"> of questions thank</font>

566
00:25:28,299 --> 00:25:30,570
you very much

567
00:25:39,610 --> 00:25:46,209
any questions Mike<font color="#CCCCCC"> Joseph google this</font><font color="#E5E5E5"> is</font>

568
00:25:44,860 --> 00:25:49,780
an interesting approach given your

569
00:25:46,210 --> 00:25:51,520
sparse allocation policy<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> wondering</font>

570
00:25:49,780 --> 00:25:54,340
if you had<font color="#E5E5E5"> considered something simple</font>

571
00:25:51,520 --> 00:25:55,780
like hashing the<font color="#CCCCCC"> username to determine</font>

572
00:25:54,340 --> 00:25:57,610
the offset so that you could be

573
00:25:55,780 --> 00:25:59,740
relatively stateless in the radius

574
00:25:57,610 --> 00:26:02,350
server you still probably would need to

575
00:25:59,740 --> 00:26:03,790
log it anyway for auditing but it would

576
00:26:02,350 --> 00:26:06,070
mean<font color="#E5E5E5"> that your use case for example</font>

577
00:26:03,790 --> 00:26:07,780
where you<font color="#E5E5E5"> were rebuilding ldap from the</font>

578
00:26:06,070 --> 00:26:10,960
database may become even easier because

579
00:26:07,780 --> 00:26:13,149
you<font color="#CCCCCC"> would potentially ish reissue the</font>

580
00:26:10,960 --> 00:26:17,140
same prefixes to the same user accounts

581
00:26:13,150 --> 00:26:19,000
even across loss of all data<font color="#CCCCCC"> ok I it's</font>

582
00:26:17,140 --> 00:26:20,470
very difficult to hear but I think<font color="#CCCCCC"> that</font>

583
00:26:19,000 --> 00:26:22,990
you are<font color="#CCCCCC"> asking whether hassing the</font>

584
00:26:20,470 --> 00:26:24,700
username has in the user name<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

585
00:26:22,990 --> 00:26:26,470
trying<font color="#E5E5E5"> to come up with completely random</font>

586
00:26:24,700 --> 00:26:29,169
offsets per user name is<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> makes</font>

587
00:26:26,470 --> 00:26:31,750
sense<font color="#E5E5E5"> well to be perfectly honest that</font>

588
00:26:29,169 --> 00:26:33,820
<font color="#CCCCCC">was the like two years ago or more that</font>

589
00:26:31,750 --> 00:26:36,360
was the the initial idea that I have and

590
00:26:33,820 --> 00:26:39,220
it's it's I mean it's<font color="#E5E5E5"> the most obvious</font>

591
00:26:36,360 --> 00:26:42,428
solution<font color="#CCCCCC"> and I agree with</font><font color="#E5E5E5"> you if there</font>

592
00:26:39,220 --> 00:26:45,910
was<font color="#E5E5E5"> a big enough if well there was a big</font>

593
00:26:42,429 --> 00:26:48,130
enough ipv6 address<font color="#E5E5E5"> Paul it could be</font>

594
00:26:45,910 --> 00:26:49,929
conceivable that we could come up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a</font>

595
00:26:48,130 --> 00:26:54,549
hash function but you know if we have

596
00:26:49,929 --> 00:26:57,610
very little bits available eventually we

597
00:26:54,549 --> 00:27:00,460
will run into<font color="#E5E5E5"> collisions it doesn't have</font>

598
00:26:57,610 --> 00:27:03,370
<font color="#E5E5E5">to be collision proof because as long as</font>

599
00:27:00,460 --> 00:27:05,559
you have a collision rate that's

600
00:27:03,370 --> 00:27:07,830
relatively low the majority of your

601
00:27:05,559 --> 00:27:10,149
users will still benefit from getting

602
00:27:07,830 --> 00:27:11,740
deterministic addresses and the ones

603
00:27:10,150 --> 00:27:15,790
which do collide would simply then

604
00:27:11,740 --> 00:27:17,350
depend on state so you would you would

605
00:27:15,790 --> 00:27:18,970
solve<font color="#E5E5E5"> the problem nicely for the</font>

606
00:27:17,350 --> 00:27:21,159
majority of your user base and reduce

607
00:27:18,970 --> 00:27:23,130
the churn particularly<font color="#CCCCCC"> on the prefix</font>

608
00:27:21,160 --> 00:27:25,330
delegation which is the<font color="#E5E5E5"> hardest on</font>

609
00:27:23,130 --> 00:27:28,110
customer networks because it means that

610
00:27:25,330 --> 00:27:31,389
devices on the land have to<font color="#CCCCCC"> time out</font>

611
00:27:28,110 --> 00:27:34,600
perhaps perhaps yeah<font color="#CCCCCC"> ok I mean maybe</font>

612
00:27:31,390 --> 00:27:38,490
maybe<font color="#E5E5E5"> just a thought yeah maybe we could</font>

613
00:27:34,600 --> 00:27:41,889
discuss<font color="#CCCCCC"> this further afterwards sure</font>

614
00:27:38,490 --> 00:27:45,549
thanks it's not a it's not a it's a nice

615
00:27:41,890 --> 00:27:49,080
<font color="#E5E5E5">I mean it's it's a valid idea I mean</font>

616
00:27:45,549 --> 00:27:49,080
yeah thank you

617
00:27:51,600 --> 00:27:58,529
any other questions nope<font color="#E5E5E5"> okay well thank</font>

618
00:27:56,109 --> 00:27:58,529
you<font color="#E5E5E5"> very much</font>

619
00:28:11,450 --> 00:28:13,510
you

