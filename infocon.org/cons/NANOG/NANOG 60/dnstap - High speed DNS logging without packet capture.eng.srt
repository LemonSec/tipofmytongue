1
00:00:09,519 --> 00:00:13,570
<font color="#E5E5E5">alright</font>

2
00:00:11,590 --> 00:00:15,550
come back from lunch thanks to nanog for

3
00:00:13,570 --> 00:00:19,240
sponsoring<font color="#CCCCCC"> that lunch and welcome back</font>

4
00:00:15,550 --> 00:00:21,040
<font color="#CCCCCC">to the 60th Hunger Games will be kicking</font>

5
00:00:19,240 --> 00:00:23,009
<font color="#E5E5E5">off this afternoon with Robert Edmunds</font>

6
00:00:21,040 --> 00:00:27,880
talking about high speed DNS logging

7
00:00:23,010 --> 00:00:30,460
Robert I am Robert<font color="#E5E5E5"> Edmunds from fresh</font>

8
00:00:27,880 --> 00:00:32,650
night security it's actually high speed

9
00:00:30,460 --> 00:00:38,440
blogging I speed DNS logging without

10
00:00:32,650 --> 00:00:41,199
packet capture first off here's the<font color="#E5E5E5"> URL</font>

11
00:00:38,440 --> 00:00:44,320
to our website dns tapped out info it's

12
00:00:41,199 --> 00:00:46,720
got all<font color="#CCCCCC"> the information or links to all</font>

13
00:00:44,320 --> 00:00:49,690
<font color="#CCCCCC">the information about Dino's taps of</font>

14
00:00:46,720 --> 00:00:53,350
documentation presentations tutorials

15
00:00:49,690 --> 00:00:55,680
code everything is on this one site or

16
00:00:53,350 --> 00:01:00,160
linked from it so here's at URL

17
00:00:55,680 --> 00:01:05,800
including this this slide deck so here's

18
00:01:00,160 --> 00:01:09,520
our simplified RFC style dns overview we

19
00:01:05,800 --> 00:01:11,590
have some dns protocol in points these

20
00:01:09,520 --> 00:01:13,780
stub resolver is recursive servers as

21
00:01:11,590 --> 00:01:15,580
the rotative name servers then we then

22
00:01:13,780 --> 00:01:18,310
on the bottom we<font color="#CCCCCC"> have these applications</font>

23
00:01:15,580 --> 00:01:21,550
and caches and zone and zone data and

24
00:01:18,310 --> 00:01:23,860
basically you know an application wants

25
00:01:21,550 --> 00:01:26,890
to do a<font color="#CCCCCC"> dns lookup so it talks</font><font color="#E5E5E5"> to its</font>

26
00:01:23,860 --> 00:01:29,500
local stub resolver stub resolver then

27
00:01:26,890 --> 00:01:31,090
talks to recursive server and if it

28
00:01:29,500 --> 00:01:33,009
<font color="#CCCCCC">doesn't have that</font><font color="#E5E5E5"> information needs in</font>

29
00:01:31,090 --> 00:01:34,920
its cash talks to one or more

30
00:01:33,009 --> 00:01:37,869
<font color="#E5E5E5">authoritative name servers and the</font>

31
00:01:34,920 --> 00:01:39,819
servers have the zone day that's needed

32
00:01:37,869 --> 00:01:42,819
insurance to the cursive servers to the

33
00:01:39,819 --> 00:01:45,369
recursive takes a copy for its cash

34
00:01:42,819 --> 00:01:47,050
returns the result to the start resolver

35
00:01:45,369 --> 00:01:51,690
which returns it to the application so

36
00:01:47,050 --> 00:01:55,119
we have this fairly complex flow of data

37
00:01:51,690 --> 00:01:56,630
between these network these protocol

38
00:01:55,119 --> 00:02:00,159
elements

39
00:01:56,630 --> 00:02:06,380
and the network and the applications and

40
00:02:00,159 --> 00:02:10,910
data and that's the<font color="#E5E5E5"> simplified DNS</font>

41
00:02:06,380 --> 00:02:14,900
overview right there and one<font color="#E5E5E5"> of the</font>

42
00:02:10,910 --> 00:02:19,550
first to<font color="#CCCCCC"> use cases that</font><font color="#E5E5E5"> motivates DNS</font>

43
00:02:14,900 --> 00:02:24,200
tap<font color="#E5E5E5"> its query logging and we zoom in on</font>

44
00:02:19,550 --> 00:02:27,099
this<font color="#E5E5E5"> DNS overview and we focus just on</font>

45
00:02:24,200 --> 00:02:29,660
the the green the queries between

46
00:02:27,099 --> 00:02:32,450
clients and servers as can be between a

47
00:02:29,660 --> 00:02:35,510
stub resolver and a recursive server or

48
00:02:32,450 --> 00:02:39,768
between<font color="#CCCCCC"> a recursive server run</font><font color="#E5E5E5"> and</font>

49
00:02:35,510 --> 00:02:41,989
authoritative name server and in that<font color="#E5E5E5"> in</font>

50
00:02:39,769 --> 00:02:45,730
that case<font color="#CCCCCC"> the recursive server can</font>

51
00:02:41,989 --> 00:02:49,489
function as both the<font color="#E5E5E5"> client and a server</font>

52
00:02:45,730 --> 00:02:51,910
so here's the query log in<font color="#E5E5E5"> this case we</font>

53
00:02:49,489 --> 00:02:55,489
basically just logging information about

54
00:02:51,910 --> 00:02:57,590
the queries themselves so the IP address

55
00:02:55,489 --> 00:03:01,340
of the initiator the client<font color="#CCCCCC"> that's empty</font>

56
00:02:57,590 --> 00:03:05,239
query question<font color="#E5E5E5"> and question type basic</font>

57
00:03:01,340 --> 00:03:07,040
information and there's more other

58
00:03:05,239 --> 00:03:09,290
related information it<font color="#E5E5E5"> could possibly be</font>

59
00:03:07,040 --> 00:03:13,340
logged about queries like<font color="#E5E5E5"> EAS options</font>

60
00:03:09,290 --> 00:03:16,940
DNS SEC information performance

61
00:03:13,340 --> 00:03:19,880
information like whether the hit a you

62
00:03:16,940 --> 00:03:22,160
know cash or if it had<font color="#CCCCCC"> to do a cash</font>

63
00:03:19,880 --> 00:03:27,350
filled in order to respond to<font color="#CCCCCC"> the query</font>

64
00:03:22,160 --> 00:03:31,130
and that<font color="#E5E5E5"> that last question actually</font>

65
00:03:27,350 --> 00:03:33,350
requires more detailed information so we

66
00:03:31,130 --> 00:03:37,000
may have to look at both queries and

67
00:03:33,350 --> 00:03:40,819
responses so the name<font color="#E5E5E5"> may</font><font color="#CCCCCC"> be a misnomer</font>

68
00:03:37,000 --> 00:03:44,989
depending<font color="#CCCCCC"> on whether you're actually</font>

69
00:03:40,819 --> 00:03:46,880
logging that kind of information and the

70
00:03:44,989 --> 00:03:49,209
typical information implementation of

71
00:03:46,880 --> 00:03:51,650
<font color="#E5E5E5">Korea logging the in server</font>

72
00:03:49,209 --> 00:03:54,049
implementation is that the server itself

73
00:03:51,650 --> 00:03:55,940
generates log messages as it's going

74
00:03:54,049 --> 00:03:58,340
about its normal course of processing

75
00:03:55,940 --> 00:04:00,880
requests and this is generally route has

76
00:03:58,340 --> 00:04:02,350
been reputed over the over the<font color="#E5E5E5"> years to</font>

77
00:04:00,880 --> 00:04:05,859
the performance<font color="#E5E5E5"> of the dns server</font>

78
00:04:02,350 --> 00:04:08,170
significantly so the default is off and

79
00:04:05,860 --> 00:04:10,840
you have to go and explicitly turn it on

80
00:04:08,170 --> 00:04:13,600
if you want<font color="#E5E5E5"> to enable this feature and</font>

81
00:04:10,840 --> 00:04:17,200
the typical implementation inside the

82
00:04:13,600 --> 00:04:20,409
server is to parse the person request

83
00:04:17,200 --> 00:04:23,050
form it into into a text string and some

84
00:04:20,410 --> 00:04:27,640
ad hoc form and<font color="#E5E5E5"> then sent it to a syslog</font>

85
00:04:23,050 --> 00:04:31,360
or write it to a blog file and this

86
00:04:27,640 --> 00:04:34,150
tends<font color="#E5E5E5"> to impact performance for a</font>

87
00:04:31,360 --> 00:04:36,760
variety of reasons<font color="#E5E5E5"> and most most these</font>

88
00:04:34,150 --> 00:04:39,460
are implementation issues I actually

89
00:04:36,760 --> 00:04:42,490
transform the query into a text string

90
00:04:39,460 --> 00:04:44,229
takes time you know parsing format

91
00:04:42,490 --> 00:04:46,960
strings copying data all that and then

92
00:04:44,230 --> 00:04:50,530
<font color="#E5E5E5">taking that text format log message and</font>

93
00:04:46,960 --> 00:04:53,500
writing it using synchronous i/o and

94
00:04:50,530 --> 00:04:56,440
your your worker thread obviously has

95
00:04:53,500 --> 00:04:59,620
the potential to block progress inside

96
00:04:56,440 --> 00:05:02,650
the inside the worker thread if you're

97
00:04:59,620 --> 00:05:05,860
using syslog instead of writing log

98
00:05:02,650 --> 00:05:09,099
files directly that Excel you know locks

99
00:05:05,860 --> 00:05:13,660
and does blocking rights for every log

100
00:05:09,100 --> 00:05:15,220
message so<font color="#E5E5E5"> usually DNS servers will</font>

101
00:05:13,660 --> 00:05:17,590
implement their own log file rider

102
00:05:15,220 --> 00:05:20,050
actually many different types of servers

103
00:05:17,590 --> 00:05:23,500
not just DNS servers have their own log

104
00:05:20,050 --> 00:05:25,840
file implementations but<font color="#E5E5E5"> even then if</font>

105
00:05:23,500 --> 00:05:28,780
you're using you<font color="#CCCCCC"> know a pent after</font><font color="#E5E5E5"> F</font>

106
00:05:25,840 --> 00:05:30,669
right style function that can take out a

107
00:05:28,780 --> 00:05:34,929
lock on the<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the output stream so it's</font>

108
00:05:30,670 --> 00:05:37,750
still not ideal so the usual response to

109
00:05:34,930 --> 00:05:39,670
all these performance issues with pretty

110
00:05:37,750 --> 00:05:42,160
logins to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> outside of</font><font color="#E5E5E5"> the DNS you ever</font>

111
00:05:39,670 --> 00:05:46,360
do with packet capture instead you<font color="#CCCCCC"> know</font>

112
00:05:42,160 --> 00:05:48,580
in TCP dump or some other special packet

113
00:05:46,360 --> 00:05:51,400
capture software the problem with this

114
00:05:48,580 --> 00:05:53,800
is that performs great because it you

115
00:05:51,400 --> 00:05:54,440
can do it completely outside<font color="#E5E5E5"> of the the</font>

116
00:05:53,800 --> 00:05:56,120
<font color="#CCCCCC">DNS server</font>

117
00:05:54,440 --> 00:05:59,930
even on you know separate hardware if

118
00:05:56,120 --> 00:06:01,190
you have the right architecture but it

119
00:05:59,930 --> 00:06:03,790
can't replicate state that appears

120
00:06:01,190 --> 00:06:06,290
directly inside the packet so stuff<font color="#CCCCCC"> like</font>

121
00:06:03,790 --> 00:06:09,500
the request was here from the<font color="#CCCCCC"> cache well</font>

122
00:06:06,290 --> 00:06:11,990
there's<font color="#CCCCCC"> nothing on the in the in the</font>

123
00:06:09,500 --> 00:06:14,660
network packets that explicitly

124
00:06:11,990 --> 00:06:17,120
indicates whether it was served from the

125
00:06:14,660 --> 00:06:18,470
cache or not so the<font color="#E5E5E5"> big question is if</font>

126
00:06:17,120 --> 00:06:20,630
we could fix all these performance

127
00:06:18,470 --> 00:06:23,840
issues in the server software could we

128
00:06:20,630 --> 00:06:27,320
rely less on<font color="#E5E5E5"> on packet capture for this</font>

129
00:06:23,840 --> 00:06:29,659
particular use case and this<font color="#E5E5E5"> brings us</font>

130
00:06:27,320 --> 00:06:32,540
to<font color="#CCCCCC"> the second motivating goose case for</font>

131
00:06:29,660 --> 00:06:35,600
DNS tap which is passive DNS replication

132
00:06:32,540 --> 00:06:38,270
which in many ways is almost the

133
00:06:35,600 --> 00:06:41,600
complete opposite of<font color="#E5E5E5"> Korea logging so</font>

134
00:06:38,270 --> 00:06:43,700
we're looking at not<font color="#E5E5E5"> the queries from</font>

135
00:06:41,600 --> 00:06:47,240
the clients towards the<font color="#CCCCCC"> servers rather</font>

136
00:06:43,700 --> 00:06:50,770
the responses from the authoritative

137
00:06:47,240 --> 00:06:54,830
name servers to the recursive servers

138
00:06:50,770 --> 00:06:57,140
and we're focusing<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> briefest</font>

139
00:06:54,830 --> 00:07:01,450
record content rather than<font color="#E5E5E5"> the question</font>

140
00:06:57,140 --> 00:07:05,000
<font color="#E5E5E5">being asked by a particular client and</font>

141
00:07:01,450 --> 00:07:06,500
there's usually I<font color="#E5E5E5"> I divide passive DNS</font>

142
00:07:05,000 --> 00:07:09,560
replication is a few<font color="#CCCCCC"> different</font>

143
00:07:06,500 --> 00:07:13,040
deployment options which could have time

144
00:07:09,560 --> 00:07:18,350
to go into in detail but there's<font color="#E5E5E5"> one</font>

145
00:07:13,040 --> 00:07:21,650
which is blow the recursive but the up

146
00:07:18,350 --> 00:07:24,430
by the arrows by number one and then

147
00:07:21,650 --> 00:07:27,919
there's the above the recursive

148
00:07:24,430 --> 00:07:30,770
these two<font color="#CCCCCC"> different vantage points have</font>

149
00:07:27,919 --> 00:07:35,599
very different characteristics and

150
00:07:30,770 --> 00:07:37,719
trade-offs but the basic<font color="#CCCCCC"> idea is that we</font>

151
00:07:35,599 --> 00:07:42,259
want<font color="#CCCCCC"> to log information about the</font>

152
00:07:37,719 --> 00:07:44,659
content of zones you know the resource

153
00:07:42,259 --> 00:07:47,210
records the owner name type and data<font color="#E5E5E5"> and</font>

154
00:07:44,659 --> 00:07:51,229
potentially the IP address of the name

155
00:07:47,210 --> 00:07:54,849
server and it is to replicate<font color="#E5E5E5"> this zone</font>

156
00:07:51,229 --> 00:08:00,068
content usually for anti-abuse purposes

157
00:07:54,849 --> 00:08:02,539
and your typical passive DNS replication

158
00:08:00,069 --> 00:08:03,919
implementation is going to know it's

159
00:08:02,539 --> 00:08:07,818
going to be packet capture based<font color="#E5E5E5"> it's</font>

160
00:08:03,919 --> 00:08:10,099
going to capture the response packets at

161
00:08:07,819 --> 00:08:13,879
your recursive DNS server reassemble

162
00:08:10,099 --> 00:08:15,860
these packets into messages and then

163
00:08:13,879 --> 00:08:17,810
extract the resource records that are

164
00:08:15,860 --> 00:08:20,089
contained inside the messages and this

165
00:08:17,810 --> 00:08:23,150
because<font color="#E5E5E5"> it's packet capture based has</font>

166
00:08:20,089 --> 00:08:27,080
very little to zero impact on the

167
00:08:23,150 --> 00:08:33,819
performance of the recursive DNS service

168
00:08:27,080 --> 00:08:37,269
itself unfortunately there's a number<font color="#E5E5E5"> of</font>

169
00:08:33,820 --> 00:08:41,089
<font color="#CCCCCC">issues with passive DNS replication</font>

170
00:08:37,269 --> 00:08:43,519
because you're<font color="#E5E5E5"> doing packet capture you</font>

171
00:08:41,089 --> 00:08:46,190
don't have<font color="#E5E5E5"> access to certain information</font>

172
00:08:43,519 --> 00:08:50,329
inside the inside the server so you have

173
00:08:46,190 --> 00:08:53,360
to come<font color="#E5E5E5"> up with a way to discard out of</font>

174
00:08:50,329 --> 00:08:55,819
bailiwick records which occur quite

175
00:08:53,360 --> 00:08:59,329
frequently in<font color="#E5E5E5"> the DNS you need to be</font>

176
00:08:55,820 --> 00:09:01,750
resilient against spoof UDP responses so

177
00:08:59,329 --> 00:09:04,540
for<font color="#E5E5E5"> instance you you don't want your</font>

178
00:09:01,750 --> 00:09:08,839
passive DNS replication system to

179
00:09:04,540 --> 00:09:11,329
blindly accept any<font color="#E5E5E5"> the UDP response</font>

180
00:09:08,839 --> 00:09:17,029
message simply because it was captured

181
00:09:11,329 --> 00:09:21,709
<font color="#CCCCCC">on the wire and</font><font color="#E5E5E5"> then you have to deal</font>

182
00:09:17,029 --> 00:09:23,420
with fragmented UDP packets and TCP

183
00:09:21,709 --> 00:09:28,310
streams you<font color="#E5E5E5"> have to reassemble those</font>

184
00:09:23,420 --> 00:09:30,589
into the<font color="#CCCCCC"> constituent messages and stuff</font>

185
00:09:28,310 --> 00:09:35,510
like UDP checks and verification<font color="#CCCCCC"> see of</font>

186
00:09:30,589 --> 00:09:37,339
all these data issues when you do

187
00:09:35,510 --> 00:09:40,870
passive DNS replication with packet

188
00:09:37,339 --> 00:09:44,240
capture and<font color="#E5E5E5"> Anderson thing is that the</font>

189
00:09:40,870 --> 00:09:45,199
recursive DNS server and the colonel<font color="#CCCCCC"> and</font>

190
00:09:44,240 --> 00:09:46,970
networking stack is running on

191
00:09:45,199 --> 00:09:49,670
everything<font color="#E5E5E5"> or actually already doing</font>

192
00:09:46,970 --> 00:09:52,370
these things and so if there were some

193
00:09:49,670 --> 00:09:55,699
way<font color="#CCCCCC"> we could be inside</font><font color="#E5E5E5"> the DNS here</font>

194
00:09:52,370 --> 00:10:00,290
where we could avoid almost all<font color="#E5E5E5"> these</font>

195
00:09:55,699 --> 00:10:03,800
issues<font color="#E5E5E5"> so</font><font color="#CCCCCC"> here's our key insights for</font>

196
00:10:00,290 --> 00:10:05,750
these two use cases<font color="#E5E5E5"> career logging could</font>

197
00:10:03,800 --> 00:10:08,500
potentially make it<font color="#E5E5E5"> a lot faster by</font>

198
00:10:05,750 --> 00:10:11,240
eliminating all these bottlenecks

199
00:10:08,500 --> 00:10:14,810
formatting into text strings and doing

200
00:10:11,240 --> 00:10:18,500
synchronous logging and for passive DNS

201
00:10:14,810 --> 00:10:22,339
replication we can avoid<font color="#E5E5E5"> all these state</font>

202
00:10:18,500 --> 00:10:25,490
reconstruction issues at the<font color="#E5E5E5"> network</font>

203
00:10:22,339 --> 00:10:27,380
level I capturing messages from inside

204
00:10:25,490 --> 00:10:30,579
the DNS server rather than capturing

205
00:10:27,380 --> 00:10:34,819
packets outside<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> Danish server and</font>

206
00:10:30,579 --> 00:10:37,489
ideally since these use cases as a peer

207
00:10:34,819 --> 00:10:39,979
like they would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> implemented fairly</font>

208
00:10:37,490 --> 00:10:42,380
similarly when you're doing this type of

209
00:10:39,980 --> 00:10:44,990
logging inside the DNS server we should

210
00:10:42,380 --> 00:10:48,529
be able to<font color="#E5E5E5"> support both</font><font color="#CCCCCC"> of these use</font>

211
00:10:44,990 --> 00:10:53,000
cases with a you know a generic flexible

212
00:10:48,529 --> 00:10:55,420
mechanism just brings us to DNS tap

213
00:10:53,000 --> 00:10:55,420
itself

214
00:11:00,769 --> 00:11:06,509
basically we're going to add a

215
00:11:03,060 --> 00:11:08,849
lightweight message duplication facility

216
00:11:06,509 --> 00:11:12,230
directly inside the DNS server

217
00:11:08,850 --> 00:11:15,120
implementation and not going<font color="#E5E5E5"> to do any</font>

218
00:11:12,230 --> 00:11:17,519
reinterpretation or reformatting of the

219
00:11:15,120 --> 00:11:20,790
original wire format das message is

220
00:11:17,519 --> 00:11:24,290
going<font color="#CCCCCC"> to take the verbatim wire format</font>

221
00:11:20,790 --> 00:11:27,380
<font color="#E5E5E5">DNS messages and just encode them</font>

222
00:11:24,290 --> 00:11:31,139
potentially annotate them with context

223
00:11:27,380 --> 00:11:33,930
use a we're going<font color="#CCCCCC"> to use a fast logging</font>

224
00:11:31,139 --> 00:11:36,389
implementation so that we don't degrade

225
00:11:33,930 --> 00:11:38,729
the performance of the of the dns

226
00:11:36,389 --> 00:11:40,769
service so we're going<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> various</font>

227
00:11:38,730 --> 00:11:45,480
implementation tricks like now per

228
00:11:40,769 --> 00:11:47,069
thread circular<font color="#CCCCCC"> cues for</font><font color="#E5E5E5"> each worker</font>

229
00:11:45,480 --> 00:11:51,089
thread<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> asynchronous</font>

230
00:11:47,069 --> 00:11:54,300
<font color="#CCCCCC">buffer do</font><font color="#E5E5E5"> so we don't block any threads</font>

231
00:11:51,089 --> 00:11:57,810
from from making progress doing their

232
00:11:54,300 --> 00:12:00,500
real job which is to you know actually

233
00:11:57,810 --> 00:12:04,949
respond to clients and<font color="#E5E5E5"> we're going to</font>

234
00:12:00,500 --> 00:12:07,290
prefer to drop logging payloads instead

235
00:12:04,949 --> 00:12:11,758
of<font color="#E5E5E5"> blocking the server if we're under</font>

236
00:12:07,290 --> 00:12:17,240
high load and have an excessive amount

237
00:12:11,759 --> 00:12:20,819
of work to<font color="#E5E5E5"> do as compared to a</font>

238
00:12:17,240 --> 00:12:22,949
synchronous system where that can

239
00:12:20,819 --> 00:12:28,500
potentially plot the server from making

240
00:12:22,949 --> 00:12:32,300
progress so basically a<font color="#CCCCCC"> DNS server has</font>

241
00:12:28,500 --> 00:12:34,709
these internal message buffers for

242
00:12:32,300 --> 00:12:37,050
processing queries and response messages

243
00:12:34,709 --> 00:12:39,689
and sending sending and receiving query

244
00:12:37,050 --> 00:12:41,120
you sending and receiving responses so

245
00:12:39,689 --> 00:12:44,009
the basic<font color="#CCCCCC"> idea is that we should</font>

246
00:12:41,120 --> 00:12:47,250
instrument<font color="#E5E5E5"> this call site the code sites</font>

247
00:12:44,009 --> 00:12:48,170
and the code where these buffers are

248
00:12:47,250 --> 00:12:51,200
manipulated

249
00:12:48,170 --> 00:12:53,689
once we have<font color="#CCCCCC"> a full message buffer with</font>

250
00:12:51,200 --> 00:12:56,959
the complete<font color="#E5E5E5"> DNS message in we should</font>

251
00:12:53,690 --> 00:13:00,560
<font color="#CCCCCC">just duplicate it and export it outside</font>

252
00:12:56,959 --> 00:13:02,569
<font color="#CCCCCC">of the server process and it and we</font>

253
00:13:00,560 --> 00:13:05,719
should<font color="#E5E5E5"> be able to enable and disable</font>

254
00:13:02,570 --> 00:13:08,690
each logging site independently evolved

255
00:13:05,720 --> 00:13:13,610
the other sites so we can support

256
00:13:08,690 --> 00:13:18,550
different<font color="#CCCCCC"> use cases so there's currently</font>

257
00:13:13,610 --> 00:13:21,589
one top-level message type and that type

258
00:13:18,550 --> 00:13:25,399
has<font color="#CCCCCC"> ten different subtypes corresponding</font>

259
00:13:21,589 --> 00:13:30,170
<font color="#CCCCCC">to these different code sites for these</font>

260
00:13:25,399 --> 00:13:33,649
always different roles in the medinas

261
00:13:30,170 --> 00:13:36,199
products we have authority<font color="#E5E5E5"> to servers</font>

262
00:13:33,649 --> 00:13:40,040
they can receive queries and send

263
00:13:36,199 --> 00:13:42,469
responses and resolvers can send out

264
00:13:40,040 --> 00:13:44,300
queries and get responses back from the

265
00:13:42,470 --> 00:13:47,709
authoritative name servers and there's

266
00:13:44,300 --> 00:13:49,569
the clients forwarders and<font color="#CCCCCC"> stubbs</font>

267
00:13:47,709 --> 00:13:55,010
corresponding to all these<font color="#CCCCCC"> different</font>

268
00:13:49,570 --> 00:13:58,190
arrows in the<font color="#CCCCCC"> DNS architecture so you</font>

269
00:13:55,010 --> 00:14:00,920
have these red and green arrows and at

270
00:13:58,190 --> 00:14:02,329
each end of the arrow there's a

271
00:14:00,920 --> 00:14:04,870
different piece of software and these

272
00:14:02,329 --> 00:14:10,420
all correspond to the different types of

273
00:14:04,870 --> 00:14:13,610
messages in<font color="#CCCCCC"> DNS tab here's</font><font color="#E5E5E5"> the</font>

274
00:14:10,420 --> 00:14:17,540
architectural overview of a DNS tap

275
00:14:13,610 --> 00:14:20,360
enable DNS server so<font color="#CCCCCC"> you have this top</font>

276
00:14:17,540 --> 00:14:24,560
block with the dotted lines around it

277
00:14:20,360 --> 00:14:26,220
<font color="#E5E5E5">that's the DNS name server process</font>

278
00:14:24,560 --> 00:14:31,800
actually running on

279
00:14:26,220 --> 00:14:34,340
on your hardware and it's got these red

280
00:14:31,800 --> 00:14:36,630
and green arrows these are the network

281
00:14:34,340 --> 00:14:39,120
messages coming in coming into and out

282
00:14:36,630 --> 00:14:42,360
of the the server process through the

283
00:14:39,120 --> 00:14:44,100
the kernel and the sockets layer and

284
00:14:42,360 --> 00:14:48,420
then<font color="#E5E5E5"> they talked to individual worker</font>

285
00:14:44,100 --> 00:14:53,370
threads inside the DNS server process

286
00:14:48,420 --> 00:14:54,959
and in a non DNS tap enable DNS server

287
00:14:53,370 --> 00:14:56,700
that would be<font color="#CCCCCC"> a notice of these worker</font>

288
00:14:54,960 --> 00:15:01,170
threads inside the process answering

289
00:14:56,700 --> 00:15:04,860
answering queries sending responses then

290
00:15:01,170 --> 00:15:08,610
we but then<font color="#CCCCCC"> we add</font><font color="#E5E5E5"> DNS tap support to</font>

291
00:15:04,860 --> 00:15:11,640
this DNS server and basically we<font color="#CCCCCC"> have</font>

292
00:15:08,610 --> 00:15:14,820
this the brown arrow<font color="#E5E5E5"> the DNS tab payload</font>

293
00:15:11,640 --> 00:15:19,170
comes out of the worker thread goes on

294
00:15:14,820 --> 00:15:23,220
to a circular queue and then there<font color="#CCCCCC"> is a</font>

295
00:15:19,170 --> 00:15:26,099
at<font color="#E5E5E5"> the far right of the diagram there is</font>

296
00:15:23,220 --> 00:15:27,960
a dedicated<font color="#E5E5E5"> io thread that pulls down</font>

297
00:15:26,100 --> 00:15:32,150
the payloads off of the circular<font color="#E5E5E5"> queues</font>

298
00:15:27,960 --> 00:15:35,010
and actually takes care of sending those

299
00:15:32,150 --> 00:15:39,240
messaging exporting those log messages

300
00:15:35,010 --> 00:15:46,430
over a over a socket to a dedicated

301
00:15:39,240 --> 00:15:49,560
capture process so this gets the<font color="#E5E5E5"> task of</font>

302
00:15:46,430 --> 00:15:53,949
sending these log messages out of<font color="#E5E5E5"> the</font>

303
00:15:49,560 --> 00:15:59,050
main the main flow

304
00:15:53,950 --> 00:16:01,090
of the of the worker thread then we have

305
00:15:59,050 --> 00:16:04,689
this stream of log<font color="#E5E5E5"> messages coming over</font>

306
00:16:01,090 --> 00:16:07,990
this by stream socket into a dedicated

307
00:16:04,690 --> 00:16:10,900
capture process this receiver process

308
00:16:07,990 --> 00:16:14,320
gets the log messages in a particular

309
00:16:10,900 --> 00:16:16,270
format and processes it does whatever it

310
00:16:14,320 --> 00:16:19,390
needs to do well<font color="#E5E5E5"> and here it's</font><font color="#CCCCCC"> just</font>

311
00:16:16,270 --> 00:16:22,060
right in<font color="#CCCCCC"> devout</font><font color="#E5E5E5"> to a log file so instead</font>

312
00:16:19,390 --> 00:16:25,240
of having<font color="#E5E5E5"> the dns server be responsible</font>

313
00:16:22,060 --> 00:16:27,430
for writing out for log messages to disk

314
00:16:25,240 --> 00:16:32,680
we've sent it to a separate process

315
00:16:27,430 --> 00:16:34,060
that's now responsible for this so

316
00:16:32,680 --> 00:16:36,550
here's what query logging looks like

317
00:16:34,060 --> 00:16:39,609
with<font color="#CCCCCC"> dns tap we just turn on</font><font color="#E5E5E5"> the right</font>

318
00:16:36,550 --> 00:16:42,120
knobs for the whatever other query

319
00:16:39,610 --> 00:16:45,010
messages that were interested in

320
00:16:42,120 --> 00:16:47,740
optionally we could turn on response

321
00:16:45,010 --> 00:16:50,290
message logging as well if we were

322
00:16:47,740 --> 00:16:52,740
interests in that kind of data then we

323
00:16:50,290 --> 00:16:56,020
just<font color="#E5E5E5"> connected</font><font color="#CCCCCC"> inas tap receiver to the</font>

324
00:16:52,740 --> 00:16:59,740
<font color="#E5E5E5">dns server does whatever it needs to</font>

325
00:16:56,020 --> 00:17:01,860
with that that data formats impact

326
00:16:59,740 --> 00:17:04,270
should be minimal due to all the

327
00:17:01,860 --> 00:17:07,870
implementation tricks and now we<font color="#CCCCCC"> have</font>

328
00:17:04,270 --> 00:17:12,369
this this full rich<font color="#E5E5E5"> verbatim message</font>

329
00:17:07,869 --> 00:17:15,189
content with annotations and metadata is

330
00:17:12,369 --> 00:17:16,810
now available we don't have to person

331
00:17:15,190 --> 00:17:21,820
<font color="#E5E5E5">the text format logs or anything like</font>

332
00:17:16,810 --> 00:17:23,649
that in order to consume it then there's

333
00:17:21,819 --> 00:17:26,109
the<font color="#E5E5E5"> second use case passive DNS</font>

334
00:17:23,650 --> 00:17:28,900
replication is just to turn on a

335
00:17:26,109 --> 00:17:32,860
different knob that duplicates<font color="#E5E5E5"> the other</font>

336
00:17:28,900 --> 00:17:35,320
type of<font color="#CCCCCC"> DNS messages that we need what I</font>

337
00:17:32,860 --> 00:17:38,639
use case likewise just<font color="#E5E5E5"> connect</font>

338
00:17:35,320 --> 00:17:42,519
seizure up to the the<font color="#E5E5E5"> DNS tap socket and</font>

339
00:17:38,639 --> 00:17:46,600
<font color="#CCCCCC">that said and now that once we're inside</font>

340
00:17:42,519 --> 00:17:49,750
the<font color="#E5E5E5"> DNS server process and doing passive</font>

341
00:17:46,600 --> 00:17:51,908
DNS replication inside the<font color="#E5E5E5"> DNS server</font>

342
00:17:49,750 --> 00:17:54,519
all these problems<font color="#CCCCCC"> that we identified</font>

343
00:17:51,909 --> 00:17:57,669
earlier suddenly they just disappear so

344
00:17:54,519 --> 00:18:00,309
out of bailiwick records we can since

345
00:17:57,669 --> 00:18:02,139
the dns server re knows which name

346
00:18:00,309 --> 00:18:05,590
servers responsibilities owns it can

347
00:18:02,139 --> 00:18:07,178
annotate the<font color="#E5E5E5"> the message with the with</font>

348
00:18:05,590 --> 00:18:11,889
<font color="#CCCCCC">that information so we don't have</font><font color="#E5E5E5"> to</font>

349
00:18:07,179 --> 00:18:14,340
reconstruct that after the<font color="#CCCCCC"> fact spoofing</font>

350
00:18:11,889 --> 00:18:16,360
the<font color="#CCCCCC"> dns server it's already been</font>

351
00:18:14,340 --> 00:18:20,379
hardened as much as it can against

352
00:18:16,360 --> 00:18:22,719
spoofing so we we know that you know

353
00:18:20,379 --> 00:18:27,158
it's past<font color="#E5E5E5"> estate table pasty know all</font>

354
00:18:22,720 --> 00:18:28,809
the anti spoofing stuff that the server

355
00:18:27,159 --> 00:18:33,610
does we know that that's been guaranteed

356
00:18:28,809 --> 00:18:36,279
for a particular response message that

357
00:18:33,610 --> 00:18:39,549
comes out of<font color="#E5E5E5"> this mechanism and other</font>

358
00:18:36,279 --> 00:18:41,799
various<font color="#CCCCCC"> TCP UDP reconstruction issues</font>

359
00:18:39,549 --> 00:18:44,230
those are already completely handled by

360
00:18:41,799 --> 00:18:47,759
the<font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> novena server and we're</font>

361
00:18:44,230 --> 00:18:50,649
just duplicating the already reassembled

362
00:18:47,759 --> 00:18:55,149
<font color="#CCCCCC">DNS messages so we completely avoid</font>

363
00:18:50,649 --> 00:19:01,149
having to implement any of those<font color="#CCCCCC"> IDs</font>

364
00:18:55,149 --> 00:19:04,989
style reconstruction algorithms this is

365
00:19:01,149 --> 00:19:08,559
a fair amount of different components<font color="#CCCCCC"> so</font>

366
00:19:04,990 --> 00:19:11,529
there's we have the log format itself<font color="#CCCCCC"> or</font>

367
00:19:08,559 --> 00:19:14,440
DNS tab we have some different helper

368
00:19:11,529 --> 00:19:17,950
libraries for adding support you know

369
00:19:14,440 --> 00:19:19,690
generating consuming or parsing and

370
00:19:17,950 --> 00:19:22,090
generating sending and receive

371
00:19:19,690 --> 00:19:24,820
these these log messages then we have

372
00:19:22,090 --> 00:19:26,470
patched sets that integrate<font color="#E5E5E5"> DN a--</font>

373
00:19:24,820 --> 00:19:28,029
support into the existing DN a--

374
00:19:26,470 --> 00:19:30,360
software so it's basically you know

375
00:19:28,029 --> 00:19:34,419
patches to you know call the right

376
00:19:30,360 --> 00:19:38,500
library routines construct the log

377
00:19:34,419 --> 00:19:40,860
messages and have them sent<font color="#E5E5E5"> to a dentist</font>

378
00:19:38,500 --> 00:19:43,750
appt receiver and then we<font color="#E5E5E5"> have</font>

379
00:19:40,860 --> 00:19:45,668
individual capture tools that you know

380
00:19:43,750 --> 00:19:49,169
we actually<font color="#E5E5E5"> do there was</font><font color="#CCCCCC"> a reception of</font>

381
00:19:45,669 --> 00:19:53,559
<font color="#CCCCCC">dns tap messages and do whatever</font>

382
00:19:49,169 --> 00:19:58,750
processing or analysis based on on that

383
00:19:53,559 --> 00:20:02,080
the loggia that's been generated<font color="#CCCCCC"> i can</font>

384
00:19:58,750 --> 00:20:06,580
go<font color="#E5E5E5"> into too many details not the log</font>

385
00:20:02,080 --> 00:20:08,529
format but<font color="#E5E5E5"> it's think we use protocol</font>

386
00:20:06,580 --> 00:20:10,539
buffers not<font color="#E5E5E5"> group and the group of</font>

387
00:20:08,529 --> 00:20:14,470
protocol buffers format for encoding

388
00:20:10,539 --> 00:20:17,320
which is you know<font color="#E5E5E5"> not quite a standard</font>

389
00:20:14,470 --> 00:20:19,389
but it's fairly widespread there's

390
00:20:17,320 --> 00:20:22,960
implementations<font color="#E5E5E5"> for just about every</font>

391
00:20:19,389 --> 00:20:28,658
<font color="#CCCCCC">pregnant language it's very compact it</font>

392
00:20:22,960 --> 00:20:32,169
allows binary clean feels to be encoded

393
00:20:28,659 --> 00:20:37,090
so we can you know put the gas messages

394
00:20:32,169 --> 00:20:40,450
verbatim into a protocol buffer message

395
00:20:37,090 --> 00:20:42,370
and it's got explicit support for

396
00:20:40,450 --> 00:20:44,679
backwards and forwards compatibility so

397
00:20:42,370 --> 00:20:48,989
again i'll start you can add new types

398
00:20:44,679 --> 00:20:53,259
of dns tap logging events without

399
00:20:48,990 --> 00:20:56,919
requiring upgrades to all the deployed

400
00:20:53,259 --> 00:20:59,320
software there are a couple<font color="#E5E5E5"> of different</font>

401
00:20:56,919 --> 00:21:02,169
helper libraries which I'm mostly going

402
00:20:59,320 --> 00:21:05,200
to skip<font color="#E5E5E5"> over basically there's</font><font color="#CCCCCC"> uh</font>

403
00:21:02,169 --> 00:21:08,070
there's<font color="#CCCCCC"> an encoding agnostic transport</font>

404
00:21:05,200 --> 00:21:11,769
and a transport agnostic encoding

405
00:21:08,070 --> 00:21:13,570
whatever<font color="#CCCCCC"> that</font><font color="#E5E5E5"> means that adds a few</font>

406
00:21:11,769 --> 00:21:17,950
thousand lines of code

407
00:21:13,570 --> 00:21:20,020
the<font color="#E5E5E5"> DNS server since this is a visitor</font>

408
00:21:17,950 --> 00:21:24,700
libraries are being directly cold by the

409
00:21:20,020 --> 00:21:27,850
the<font color="#E5E5E5"> DNS server process there's Anna DNS</font>

410
00:21:24,700 --> 00:21:30,610
tab integration itself we<font color="#E5E5E5"> have plans to</font>

411
00:21:27,850 --> 00:21:32,770
fairly ambitious plans a DNS tab support

412
00:21:30,610 --> 00:21:35,320
to a variety of different software that

413
00:21:32,770 --> 00:21:40,360
handles das messages you have dns

414
00:21:35,320 --> 00:21:42,750
servers your bind unbound cannot you

415
00:21:40,360 --> 00:21:44,860
have the analysis tools like Wireshark

416
00:21:42,750 --> 00:21:49,540
you know the<font color="#E5E5E5"> various command line</font>

417
00:21:44,860 --> 00:21:51,699
utilities dig k dick drill benchmarking

418
00:21:49,540 --> 00:21:54,730
tools like<font color="#E5E5E5"> dns prepared from reza</font>

419
00:21:51,700 --> 00:21:58,120
pahlavi might be interesting to<font color="#E5E5E5"> add</font><font color="#CCCCCC"> this</font>

420
00:21:54,730 --> 00:22:01,540
support<font color="#E5E5E5"> for this interchange format to</font>

421
00:21:58,120 --> 00:22:05,790
all of these different tools obviously

422
00:22:01,540 --> 00:22:10,360
it could<font color="#CCCCCC"> potentially enable more</font>

423
00:22:05,790 --> 00:22:14,920
applications by having this interchange

424
00:22:10,360 --> 00:22:18,310
format available so this is<font color="#CCCCCC"> a hyperlink</font>

425
00:22:14,920 --> 00:22:21,250
to directly to the<font color="#E5E5E5"> the github repository</font>

426
00:22:18,310 --> 00:22:24,250
we have a<font color="#CCCCCC"> proof of concept</font>

427
00:22:21,250 --> 00:22:28,000
implementation for the unbound<font color="#CCCCCC"> dns</font>

428
00:22:24,250 --> 00:22:32,290
server which is a recursive DNS server

429
00:22:28,000 --> 00:22:34,710
so it supports the subset of message

430
00:22:32,290 --> 00:22:37,870
types that are relevant<font color="#E5E5E5"> try that at home</font>

431
00:22:34,710 --> 00:22:39,850
for that type of server room adds less

432
00:22:37,870 --> 00:22:42,760
than a thousand lines of code that

433
00:22:39,850 --> 00:22:45,100
<font color="#E5E5E5">server and that's that's working there's</font>

434
00:22:42,760 --> 00:22:49,840
a<font color="#E5E5E5"> proof of concept implementation for</font>

435
00:22:45,100 --> 00:22:55,120
that not yet production ready we're

436
00:22:49,840 --> 00:22:58,870
working<font color="#CCCCCC"> on that there's a DNS tap</font>

437
00:22:55,120 --> 00:23:01,629
capture tool you know it's it's similar

438
00:22:58,870 --> 00:23:02,418
role to something like tcp down persists

439
00:23:01,630 --> 00:23:04,850
<font color="#CCCCCC">log D or</font>

440
00:23:02,419 --> 00:23:08,929
a flow collector something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that you</font>

441
00:23:04,850 --> 00:23:11,149
know<font color="#E5E5E5"> just receives the log payloads and</font>

442
00:23:08,929 --> 00:23:15,739
can<font color="#CCCCCC"> print them save them to a file do</font>

443
00:23:11,149 --> 00:23:19,729
that kind of stuff with the log messages

444
00:23:15,739 --> 00:23:22,639
that<font color="#E5E5E5"> I received we've done various sort</font>

445
00:23:19,730 --> 00:23:25,580
of micro benchmarks to validate this

446
00:23:22,639 --> 00:23:29,449
architectural approach and there's a

447
00:23:25,580 --> 00:23:31,609
massive disclaimer<font color="#E5E5E5"> in that this is not</font>

448
00:23:29,450 --> 00:23:34,399
intended to be<font color="#E5E5E5"> an accurate</font>

449
00:23:31,609 --> 00:23:36,230
characterization of<font color="#CCCCCC"> the performance</font><font color="#E5E5E5"> you</font>

450
00:23:34,399 --> 00:23:38,090
<font color="#E5E5E5">could get out out of the DNS to have</font>

451
00:23:36,230 --> 00:23:44,600
been able dns server around you know

452
00:23:38,090 --> 00:23:48,529
production realistic load various

453
00:23:44,600 --> 00:23:50,959
hardware details did did you know fairly

454
00:23:48,529 --> 00:23:54,320
intelligent things you know disabling

455
00:23:50,960 --> 00:24:00,070
various things that<font color="#E5E5E5"> might affect</font><font color="#CCCCCC"> the</font>

456
00:23:54,320 --> 00:24:03,220
result used a whole bunch of software

457
00:24:00,070 --> 00:24:05,629
various tools through control and the

458
00:24:03,220 --> 00:24:09,619
<font color="#CCCCCC">generated traffic controlling it and</font>

459
00:24:05,629 --> 00:24:13,549
measuring the performance basically we

460
00:24:09,619 --> 00:24:16,939
just ran you know 30 or so data points

461
00:24:13,549 --> 00:24:19,389
you know incrementing that sending<font color="#E5E5E5"> a</font>

462
00:24:16,940 --> 00:24:22,179
particular DNS query load

463
00:24:19,389 --> 00:24:25,149
and 25<font color="#E5E5E5"> mega vet steps all the way from</font>

464
00:24:22,179 --> 00:24:27,959
<font color="#CCCCCC">20 of a</font><font color="#E5E5E5"> megabit saw all the way up to to</font>

465
00:24:25,149 --> 00:24:30,609
you know do quarters of<font color="#E5E5E5"> the gig and</font>

466
00:24:27,959 --> 00:24:33,489
basically we do just<font color="#E5E5E5"> measure the total</font>

467
00:24:30,609 --> 00:24:36,609
system load and the number of responses

468
00:24:33,489 --> 00:24:40,599
per second that the DNS tap enabled

469
00:24:36,609 --> 00:24:43,149
server is generating to entertain the

470
00:24:40,599 --> 00:24:44,979
<font color="#E5E5E5">most</font><font color="#CCCCCC"> Guinness benchmarks plot queries</font>

471
00:24:43,149 --> 00:24:46,869
per second<font color="#E5E5E5"> because they're interested in</font>

472
00:24:44,979 --> 00:24:50,979
characterizing in the drop rate here

473
00:24:46,869 --> 00:24:54,158
we're more interested in determining how

474
00:24:50,979 --> 00:24:57,669
much additional load that adding this

475
00:24:54,159 --> 00:25:01,029
DNS tap support adds to adds to the

476
00:24:57,669 --> 00:25:03,570
<font color="#CCCCCC">servers</font><font color="#E5E5E5"> can still reveal interesting</font>

477
00:25:01,029 --> 00:25:03,570
bottlenecks

478
00:25:10,980 --> 00:25:18,870
so just orient things this<font color="#E5E5E5"> is what a</font>

479
00:25:15,200 --> 00:25:21,330
hypothetical good result and

480
00:25:18,870 --> 00:25:27,600
hypothetical bad result looks like any

481
00:25:21,330 --> 00:25:30,389
of your purple plot your x axis which<font color="#CCCCCC"> is</font>

482
00:25:27,600 --> 00:25:33,120
the number of queries answered per

483
00:25:30,390 --> 00:25:37,830
second and<font color="#E5E5E5"> we range from</font><font color="#CCCCCC"> zero all the</font>

484
00:25:33,120 --> 00:25:41,370
way up to a million responses per second

485
00:25:37,830 --> 00:25:44,820
and then system utilization ranges from

486
00:25:41,370 --> 00:25:46,799
0 to 1 1 meaning that all<font color="#E5E5E5"> of the cores</font>

487
00:25:44,820 --> 00:25:48,720
in the system<font color="#E5E5E5"> are being occupied</font><font color="#CCCCCC"> zero</font>

488
00:25:46,799 --> 00:25:53,309
means obviously just as completely idle

489
00:25:48,720 --> 00:25:56,340
so you're completely good hypothetical

490
00:25:53,309 --> 00:25:58,678
server consumes absolutely no cpu and

491
00:25:56,340 --> 00:26:01,470
answers every single query and then

492
00:25:58,679 --> 00:26:04,620
you're very bad server answer's no

493
00:26:01,470 --> 00:26:06,750
queries and consumes all of your<font color="#E5E5E5"> CPU so</font>

494
00:26:04,620 --> 00:26:10,340
<font color="#E5E5E5">those your that's the way the piece plus</font>

495
00:26:06,750 --> 00:26:15,179
are oriented here are<font color="#CCCCCC"> our</font><font color="#E5E5E5"> base lines</font>

496
00:26:10,340 --> 00:26:18,899
with this system for unbound one point

497
00:26:15,179 --> 00:26:23,660
<font color="#E5E5E5">for point 21 and unbound</font><font color="#CCCCCC"> nine point nine</font>

498
00:26:18,900 --> 00:26:27,150
<font color="#E5E5E5">point for this graph is kind of awkward</font>

499
00:26:23,660 --> 00:26:29,400
to explain since obviously you know one

500
00:26:27,150 --> 00:26:31,980
server appears to be performing you know

501
00:26:29,400 --> 00:26:40,230
about<font color="#E5E5E5"> twice as as as good as the other</font>

502
00:26:31,980 --> 00:26:43,440
one but so we see a fairly nice linear

503
00:26:40,230 --> 00:26:47,630
behavior from both<font color="#CCCCCC"> of these servers or</font>

504
00:26:43,440 --> 00:26:56,450
obviously different slopes to

505
00:26:47,630 --> 00:26:58,670
those plots so the actual query is just

506
00:26:56,450 --> 00:27:00,950
the query load is to simply repeat the

507
00:26:58,670 --> 00:27:05,780
<font color="#CCCCCC">same query over and over again when I</font>

508
00:27:00,950 --> 00:27:13,460
<font color="#E5E5E5">suspect this may be more optimal for</font>

509
00:27:05,780 --> 00:27:17,660
unbound than buying to answer here's

510
00:27:13,460 --> 00:27:20,990
what happens with by nine the purple

511
00:27:17,660 --> 00:27:26,060
purple plot is the<font color="#CCCCCC"> baseline from</font><font color="#E5E5E5"> the</font>

512
00:27:20,990 --> 00:27:28,490
previous previous graph and the<font color="#E5E5E5"> the red</font>

513
00:27:26,060 --> 00:27:30,260
is what happens when you turn on query

514
00:27:28,490 --> 00:27:35,480
logging and tell it to write to a file

515
00:27:30,260 --> 00:27:38,300
on your desk at all the data points are

516
00:27:35,480 --> 00:27:40,490
concentrated towards the upper left of

517
00:27:38,300 --> 00:27:44,169
the graph so it's you know it's shifting

518
00:27:40,490 --> 00:27:47,870
the performance in that direction and

519
00:27:44,170 --> 00:27:50,930
<font color="#CCCCCC">obviously it's dropping a lot of queries</font>

520
00:27:47,870 --> 00:27:54,229
under under load compared to the

521
00:27:50,930 --> 00:28:01,810
baseline case where we're not<font color="#E5E5E5"> doing any</font>

522
00:27:54,230 --> 00:28:05,930
logging here here's unbound it it's

523
00:28:01,810 --> 00:28:09,889
performs basically how about the same as

524
00:28:05,930 --> 00:28:13,690
<font color="#CCCCCC">as x 9 did it you know it has a steeper</font>

525
00:28:09,890 --> 00:28:17,900
plot and it's a performance barrier and

526
00:28:13,690 --> 00:28:21,080
I think<font color="#E5E5E5"> the</font><font color="#CCCCCC"> reason for the behavior in</font>

527
00:28:17,900 --> 00:28:24,860
both of these plots is simply that

528
00:28:21,080 --> 00:28:28,699
they're<font color="#CCCCCC"> doing synchronous logging and</font>

529
00:28:24,860 --> 00:28:31,879
they're blocking the individual worker

530
00:28:28,700 --> 00:28:35,120
threads when they perform this<font color="#E5E5E5"> miss</font>

531
00:28:31,880 --> 00:28:37,870
logging and that's<font color="#CCCCCC"> the specifically</font>

532
00:28:35,120 --> 00:28:43,100
<font color="#E5E5E5">meant to address those points with the</font>

533
00:28:37,870 --> 00:28:46,729
DNS tap implementation here's<font color="#E5E5E5"> our plot</font>

534
00:28:43,100 --> 00:28:50,240
for unbound the<font color="#E5E5E5"> DNS tap branch we added</font>

535
00:28:46,730 --> 00:28:52,490
DNS tap support the purple<font color="#CCCCCC"> blood</font><font color="#E5E5E5"> is the</font>

536
00:28:50,240 --> 00:28:56,480
original baseline and

537
00:28:52,490 --> 00:29:00,140
the sort of teal colored is very close

538
00:28:56,480 --> 00:29:02,720
<font color="#CCCCCC">to it that's with</font><font color="#E5E5E5"> DNS tap compiled in</font>

539
00:29:00,140 --> 00:29:06,440
but disabled and then the one right

540
00:29:02,720 --> 00:29:10,760
above<font color="#E5E5E5"> that is compiled in and enabled</font>

541
00:29:06,440 --> 00:29:12,950
but discarding all the log messages that

542
00:29:10,760 --> 00:29:17,480
are<font color="#CCCCCC"> being there being generated in</font><font color="#E5E5E5"> only</font>

543
00:29:12,950 --> 00:29:21,520
<font color="#E5E5E5">the top one is enabled and generated log</font>

544
00:29:17,480 --> 00:29:23,750
messages and there's a separate process

545
00:29:21,520 --> 00:29:26,960
receiving the DNS tab mysticism and

546
00:29:23,750 --> 00:29:35,050
writing on the disk and in contrast<font color="#CCCCCC"> to</font>

547
00:29:26,960 --> 00:29:38,570
the query logging plots it's mostly

548
00:29:35,050 --> 00:29:42,710
manages to deliver you know similar

549
00:29:38,570 --> 00:29:47,300
performance but with additional CPU

550
00:29:42,710 --> 00:29:51,230
usage there's no so that<font color="#E5E5E5"> this behavior</font>

551
00:29:47,300 --> 00:29:54,110
<font color="#CCCCCC">is much closer to the base case it's</font>

552
00:29:51,230 --> 00:29:56,750
this implementation so here's our

553
00:29:54,110 --> 00:29:59,689
summary we<font color="#E5E5E5"> tested three different</font>

554
00:29:56,750 --> 00:30:02,750
recursive servers original buying

555
00:29:59,690 --> 00:30:05,240
original on bound and unbound with a

556
00:30:02,750 --> 00:30:10,250
with this patch set that we've developed

557
00:30:05,240 --> 00:30:13,040
the implements DNS tap support unbound

558
00:30:10,250 --> 00:30:14,720
generally skilled better than by nine in

559
00:30:13,040 --> 00:30:17,360
this particular benchmark on this

560
00:30:14,720 --> 00:30:20,029
particular hardware but both servers

561
00:30:17,360 --> 00:30:22,218
implemented we're logging in a way that

562
00:30:20,029 --> 00:30:26,090
at significant impacts<font color="#E5E5E5"> of performance</font>

563
00:30:22,219 --> 00:30:30,249
<font color="#CCCCCC">and we did a stop at at some</font><font color="#E5E5E5"> cpu / hen</font>

564
00:30:26,090 --> 00:30:34,099
but it tended to scale pretty well and

565
00:30:30,249 --> 00:30:36,440
we have a certain<font color="#E5E5E5"> amount of future work</font>

566
00:30:34,099 --> 00:30:39,529
to do we want to<font color="#E5E5E5"> add additional pelo</font>

567
00:30:36,440 --> 00:30:41,629
types like<font color="#CCCCCC"> i want</font><font color="#E5E5E5"> to be able to trace</font>

568
00:30:39,529 --> 00:30:44,359
cache events that are occurring inside a

569
00:30:41,629 --> 00:30:47,178
recursive DNS server when i add<font color="#CCCCCC"> Dina's</font>

570
00:30:44,359 --> 00:30:50,090
tap support to more software obviously

571
00:30:47,179 --> 00:30:52,419
have better documentation more tools and

572
00:30:50,090 --> 00:30:55,309
more benchmarks and actual

573
00:30:52,419 --> 00:30:59,809
specifications so that other people can

574
00:30:55,309 --> 00:31:02,149
<font color="#CCCCCC">glint this stuff as well and that's</font><font color="#E5E5E5"> it</font>

575
00:30:59,809 --> 00:31:04,339
we examine these two<font color="#CCCCCC"> different use cases</font>

576
00:31:02,149 --> 00:31:06,168
and we introduce this new technology

577
00:31:04,339 --> 00:31:09,799
that<font color="#E5E5E5"> can support both</font><font color="#CCCCCC"> of these use cases</font>

578
00:31:06,169 --> 00:31:13,070
with this message duplication facility

579
00:31:09,799 --> 00:31:18,289
and that's all I have looks like a lot

580
00:31:13,070 --> 00:31:20,619
<font color="#CCCCCC">of</font><font color="#E5E5E5"> time we have time for one quick</font>

581
00:31:18,289 --> 00:31:24,859
question you brought you the mic there

582
00:31:20,619 --> 00:31:28,369
<font color="#CCCCCC">okay I my</font><font color="#E5E5E5"> name is Tanya come back</font><font color="#CCCCCC"> i'm a</font>

583
00:31:24,859 --> 00:31:33,228
<font color="#E5E5E5">dns operator and measurer thank you for</font>

584
00:31:28,369 --> 00:31:37,428
<font color="#CCCCCC">the talk i think this has some potential</font>

585
00:31:33,229 --> 00:31:39,769
to finally establish a common log in

586
00:31:37,429 --> 00:31:43,009
format across different dns software and

587
00:31:39,769 --> 00:31:46,909
that's why<font color="#CCCCCC"> i like</font><font color="#E5E5E5"> it yeah so</font><font color="#CCCCCC"> i would</font>

588
00:31:43,009 --> 00:31:51,979
encourage you to work hard<font color="#CCCCCC"> to get it</font>

589
00:31:46,909 --> 00:31:55,190
incorporated in many<font color="#E5E5E5"> dns servers in</font><font color="#CCCCCC"> the</font>

590
00:31:51,979 --> 00:31:57,649
first instance and i noticed this

591
00:31:55,190 --> 00:32:01,909
conspicuously absent from your list on

592
00:31:57,649 --> 00:32:04,908
like five six lights back was NSD the

593
00:32:01,909 --> 00:32:06,589
authoritative server from an undead<font color="#E5E5E5"> labs</font>

594
00:32:04,909 --> 00:32:10,639
is the reason for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> or is that an</font>

595
00:32:06,589 --> 00:32:13,158
oversight it's mostly a man power issue

596
00:32:10,639 --> 00:32:14,658
it just<font color="#E5E5E5"> so happens that we looked at</font>

597
00:32:13,159 --> 00:32:17,090
<font color="#E5E5E5">richard's of dns servers</font>

598
00:32:14,659 --> 00:32:20,389
first and out of recursive DNS servers

599
00:32:17,090 --> 00:32:22,939
we look at unbound first but it is our

600
00:32:20,389 --> 00:32:24,498
intention to add authoritative<font color="#E5E5E5"> DNS</font>

601
00:32:22,940 --> 00:32:26,330
<font color="#CCCCCC">server rooms at support for</font>

602
00:32:24,499 --> 00:32:31,639
authoritative DNS servers including an

603
00:32:26,330 --> 00:32:32,869
NS d<font color="#E5E5E5"> I'm sorry do the time</font>

604
00:32:31,639 --> 00:32:35,178
considerations I actually have to ask

605
00:32:32,869 --> 00:32:39,279
further questions to take off line sorry

606
00:32:35,179 --> 00:32:39,279
about<font color="#CCCCCC"> that okay thanks</font><font color="#E5E5E5"> Robert</font>

607
00:32:48,830 --> 00:32:50,889
you

