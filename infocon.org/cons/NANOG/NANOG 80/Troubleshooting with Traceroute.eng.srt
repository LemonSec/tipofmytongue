1
00:00:01,640 --> 00:00:05,939
[Music]

2
00:00:06,720 --> 00:00:09,280
so

3
00:00:07,200 --> 00:00:11,200
my name is richard steenbergen and we're

4
00:00:09,280 --> 00:00:13,200
here today or not here today as the case

5
00:00:11,200 --> 00:00:16,079
may be to talk about a practical guide

6
00:00:13,200 --> 00:00:18,000
to correctly troubleshooting with tracer

7
00:00:16,079 --> 00:00:19,439
so you have a problem on the internet

8
00:00:18,000 --> 00:00:20,640
something isn't behaving right something

9
00:00:19,439 --> 00:00:22,560
isn't performing right

10
00:00:20,640 --> 00:00:24,160
the number one go-to tool for network

11
00:00:22,560 --> 00:00:25,919
people is traceroute

12
00:00:24,160 --> 00:00:27,680
basically every operating system on the

13
00:00:25,920 --> 00:00:28,640
planet comes with a traceroute tool of

14
00:00:27,680 --> 00:00:30,320
some kind

15
00:00:28,640 --> 00:00:31,760
and there's lots of websites where you

16
00:00:30,320 --> 00:00:33,520
can run there's lots of looking glasses

17
00:00:31,760 --> 00:00:35,360
there's lots of public traceroute tools

18
00:00:33,520 --> 00:00:36,960
and there's a lot of visual traceroute

19
00:00:35,360 --> 00:00:38,480
tools there's things that try to make it

20
00:00:36,960 --> 00:00:40,239
really simple and easy and paint a

21
00:00:38,480 --> 00:00:42,398
picture for the end user

22
00:00:40,239 --> 00:00:44,718
it seems like such a really easy simple

23
00:00:42,399 --> 00:00:46,559
tool to use i mean all you do is type in

24
00:00:44,719 --> 00:00:48,239
an ip address and it shows you

25
00:00:46,559 --> 00:00:49,760
every router op along the way in a

26
00:00:48,239 --> 00:00:52,160
latency measurement and

27
00:00:49,760 --> 00:00:54,000
the the naive assumption is that if you

28
00:00:52,160 --> 00:00:55,760
look at where the traceroute stops or

29
00:00:54,000 --> 00:00:57,199
where the latency jumps up a lot that's

30
00:00:55,760 --> 00:00:59,760
where the problem is

31
00:00:57,199 --> 00:01:00,719
and turns out that tends not to be the

32
00:00:59,760 --> 00:01:02,960
case

33
00:01:00,719 --> 00:01:04,239
well why is that modern networks are

34
00:01:02,960 --> 00:01:07,119
actually pretty

35
00:01:04,239 --> 00:01:08,159
well run so the simple issues routing

36
00:01:07,119 --> 00:01:10,840
loops congestion

37
00:01:08,159 --> 00:01:13,520
things that we used to see a lot in the

38
00:01:10,840 --> 00:01:15,840
past that were really easy to diagnose

39
00:01:13,520 --> 00:01:17,600
those are pretty rare these days

40
00:01:15,840 --> 00:01:19,040
so there's there's really a few people

41
00:01:17,600 --> 00:01:20,240
that are skilled at interpreting

42
00:01:19,040 --> 00:01:22,080
traceroute out there

43
00:01:20,240 --> 00:01:23,280
and i know it looks really simple and

44
00:01:22,080 --> 00:01:25,200
easy to use

45
00:01:23,280 --> 00:01:26,640
and it tends to give most people the

46
00:01:25,200 --> 00:01:28,799
impression that they're qualified to

47
00:01:26,640 --> 00:01:30,960
interpret it and locate the fault but

48
00:01:28,799 --> 00:01:32,320
in reality most knox and in my

49
00:01:30,960 --> 00:01:34,640
experience even most

50
00:01:32,320 --> 00:01:36,720
uh junior and mid-level ip engineers

51
00:01:34,640 --> 00:01:38,720
aren't actually qualified to interpret

52
00:01:36,720 --> 00:01:40,479
a complex trace route it's a very very

53
00:01:38,720 --> 00:01:41,119
difficult thing it's a lot of subtle

54
00:01:40,479 --> 00:01:42,720
things

55
00:01:41,119 --> 00:01:45,040
that you have to know about to do it

56
00:01:42,720 --> 00:01:46,798
right so what ends up happening

57
00:01:45,040 --> 00:01:48,640
is you end up with this huge number of

58
00:01:46,799 --> 00:01:49,439
bogus traceroute complaints anyone who's

59
00:01:48,640 --> 00:01:51,360
ever

60
00:01:49,439 --> 00:01:53,119
worked the knock or looked at tickets

61
00:01:51,360 --> 00:01:55,600
that come in from end users gets

62
00:01:53,119 --> 00:01:58,000
traceroute tickets and they'll be

63
00:01:55,600 --> 00:02:01,520
screenshots and a word document in a zip

64
00:01:58,000 --> 00:02:03,439
file of someone's traceart.exe window

65
00:02:01,520 --> 00:02:04,960
and they'll say hey my game isn't

66
00:02:03,439 --> 00:02:06,639
working right this isn't working help

67
00:02:04,960 --> 00:02:08,799
me fix it and it turns out that it's

68
00:02:06,640 --> 00:02:11,680
it's really very difficult

69
00:02:08,800 --> 00:02:13,440
to get anything looked at if you have a

70
00:02:11,680 --> 00:02:15,120
real problem because there's so many

71
00:02:13,440 --> 00:02:16,959
false complaints out there so

72
00:02:15,120 --> 00:02:18,480
the goal of this talk is to to kind of

73
00:02:16,959 --> 00:02:20,000
improve everyone's knowledge of how to

74
00:02:18,480 --> 00:02:22,000
interpret traceroute

75
00:02:20,000 --> 00:02:23,280
and hopefully get the false issues down

76
00:02:22,000 --> 00:02:25,760
a lot

77
00:02:23,280 --> 00:02:27,760
so here's an example traceroute output

78
00:02:25,760 --> 00:02:29,519
and the implementations really vary a

79
00:02:27,760 --> 00:02:31,040
lot but at a basic level every

80
00:02:29,520 --> 00:02:31,920
traceroute looks a little bit something

81
00:02:31,040 --> 00:02:34,959
like this

82
00:02:31,920 --> 00:02:37,359
so there's a hop number there's the

83
00:02:34,959 --> 00:02:39,120
router ip that you're showing so that's

84
00:02:37,360 --> 00:02:40,480
going to show you the ip address and

85
00:02:39,120 --> 00:02:42,879
it's going to do a reverse lookup

86
00:02:40,480 --> 00:02:43,679
and figure out the dns and then there's

87
00:02:42,879 --> 00:02:45,518
going to be some

88
00:02:43,680 --> 00:02:47,599
latency measurements so in this example

89
00:02:45,519 --> 00:02:48,800
each router hop has three separate

90
00:02:47,599 --> 00:02:50,399
latency probes

91
00:02:48,800 --> 00:02:53,040
and it does the three probes and then

92
00:02:50,400 --> 00:02:54,640
then iterates to the next hop

93
00:02:53,040 --> 00:02:56,959
but here's what this looks like at a

94
00:02:54,640 --> 00:02:58,958
packet level so the first thing we do

95
00:02:56,959 --> 00:03:01,200
is we launch a pro packet towards the

96
00:02:58,959 --> 00:03:03,120
destination we set our ttl our time to

97
00:03:01,200 --> 00:03:05,119
live value at one

98
00:03:03,120 --> 00:03:07,519
and every router that forwards the

99
00:03:05,120 --> 00:03:09,920
packet by by definition of how routing

100
00:03:07,519 --> 00:03:11,760
works will decrement the ttl by one

101
00:03:09,920 --> 00:03:13,359
and then when the ttl hits zero the

102
00:03:11,760 --> 00:03:16,799
router drops the packet

103
00:03:13,360 --> 00:03:19,440
and it returns an icmp ttl exceed

104
00:03:16,800 --> 00:03:21,120
is the name of the protocol type and it

105
00:03:19,440 --> 00:03:21,760
sends it back to the source that sent

106
00:03:21,120 --> 00:03:23,920
the packet

107
00:03:21,760 --> 00:03:25,599
so that source receives that icp message

108
00:03:23,920 --> 00:03:26,399
and now it calculates a time difference

109
00:03:25,599 --> 00:03:28,159
so it says

110
00:03:26,400 --> 00:03:29,760
i sent this one out at this micro

111
00:03:28,159 --> 00:03:31,040
seconds and i received the reply at this

112
00:03:29,760 --> 00:03:33,280
microseconds and

113
00:03:31,040 --> 00:03:35,200
here's what we think the the total time

114
00:03:33,280 --> 00:03:36,319
difference is and it displays that value

115
00:03:35,200 --> 00:03:39,119
as a as a hop

116
00:03:36,319 --> 00:03:40,319
and a pro so then we go back to step one

117
00:03:39,120 --> 00:03:43,680
now we increment so we

118
00:03:40,319 --> 00:03:45,280
we launch with a ttl of two uh so as it

119
00:03:43,680 --> 00:03:47,440
as it goes further along

120
00:03:45,280 --> 00:03:49,360
every router that it that goes towards

121
00:03:47,440 --> 00:03:52,079
the destination will get

122
00:03:49,360 --> 00:03:53,120
exposed to this packet will drop it will

123
00:03:52,080 --> 00:03:55,599
send an icmp

124
00:03:53,120 --> 00:03:56,799
back and eventually when you hit the

125
00:03:55,599 --> 00:03:59,518
host

126
00:03:56,799 --> 00:04:00,640
you return an icmp unreachable uh so

127
00:03:59,519 --> 00:04:02,480
that'll either be

128
00:04:00,640 --> 00:04:04,079
a network unreachable or destination

129
00:04:02,480 --> 00:04:05,200
unreachable that you've hit a port that

130
00:04:04,080 --> 00:04:07,120
doesn't listen to

131
00:04:05,200 --> 00:04:09,119
and when the source receives that icmp

132
00:04:07,120 --> 00:04:10,959
unreachable then the traceroute is it

133
00:04:09,120 --> 00:04:13,840
knows that it's complete

134
00:04:10,959 --> 00:04:16,320
so most implementations send multiple

135
00:04:13,840 --> 00:04:18,880
probes per hop so for example the vast

136
00:04:16,320 --> 00:04:21,199
majority of tools that are out there

137
00:04:18,880 --> 00:04:22,800
send three separate probes so for every

138
00:04:21,199 --> 00:04:23,840
hop for every ttl increment you're

139
00:04:22,800 --> 00:04:26,880
looking at three

140
00:04:23,840 --> 00:04:28,000
totally separate measurements and every

141
00:04:26,880 --> 00:04:29,520
probe packet is

142
00:04:28,000 --> 00:04:32,320
completely unique so it's its own

143
00:04:29,520 --> 00:04:34,240
independent trial uh so each pro packet

144
00:04:32,320 --> 00:04:36,000
uses some kind of a unique key to

145
00:04:34,240 --> 00:04:37,919
identify itself so

146
00:04:36,000 --> 00:04:39,520
a lot of very common unix

147
00:04:37,919 --> 00:04:41,680
implementations and router

148
00:04:39,520 --> 00:04:43,680
implementations are based on udp

149
00:04:41,680 --> 00:04:45,280
and they use incrementing ports so

150
00:04:43,680 --> 00:04:47,360
they'll set uh

151
00:04:45,280 --> 00:04:48,960
source ports and destination ports in a

152
00:04:47,360 --> 00:04:50,479
way that it can identify itself when it

153
00:04:48,960 --> 00:04:52,960
comes all the way back

154
00:04:50,479 --> 00:04:53,919
but there's other examples of tools that

155
00:04:52,960 --> 00:04:55,440
use icmp

156
00:04:53,919 --> 00:04:56,960
so for example windows traceroute

157
00:04:55,440 --> 00:04:58,800
defaults to icmp

158
00:04:56,960 --> 00:05:00,719
uh there's a lot of tools out there

159
00:04:58,800 --> 00:05:01,360
that'll let you use tcp and other things

160
00:05:00,720 --> 00:05:03,280
to try and

161
00:05:01,360 --> 00:05:04,960
work around firewalls and do other kinds

162
00:05:03,280 --> 00:05:07,359
of measurements but like i said every

163
00:05:04,960 --> 00:05:09,599
probe is a completely independent trial

164
00:05:07,360 --> 00:05:10,880
so each packet may be forwarded down a

165
00:05:09,600 --> 00:05:13,440
completely different path

166
00:05:10,880 --> 00:05:16,080
um and this may be visible to the end

167
00:05:13,440 --> 00:05:18,160
user or it may not be

168
00:05:16,080 --> 00:05:20,000
so the latency calculation is really

169
00:05:18,160 --> 00:05:21,360
simple like i said we take a time stamp

170
00:05:20,000 --> 00:05:23,199
of when we launch the probe

171
00:05:21,360 --> 00:05:25,199
and we take a time stamp of when we get

172
00:05:23,199 --> 00:05:26,400
the icmp packet back

173
00:05:25,199 --> 00:05:28,400
and you subtract the difference and

174
00:05:26,400 --> 00:05:31,359
there's your round trip time so

175
00:05:28,400 --> 00:05:31,919
routers along the path don't actually do

176
00:05:31,360 --> 00:05:34,960
anything

177
00:05:31,919 --> 00:05:38,479
to a to the to the packet

178
00:05:34,960 --> 00:05:39,919
they don't do anything other than

179
00:05:38,479 --> 00:05:41,359
they're not involved in time calculation

180
00:05:39,919 --> 00:05:42,799
i should say so they are involved in

181
00:05:41,360 --> 00:05:45,360
generating the icmp

182
00:05:42,800 --> 00:05:47,039
but they don't do any time processing uh

183
00:05:45,360 --> 00:05:48,560
there's some implementations that will

184
00:05:47,039 --> 00:05:50,080
encode the

185
00:05:48,560 --> 00:05:53,520
in the payload of the packet they'll

186
00:05:50,080 --> 00:05:55,120
encode some like very accurate timestamp

187
00:05:53,520 --> 00:05:56,880
but the reported latency that you're

188
00:05:55,120 --> 00:05:59,120
looking at is actually the sum

189
00:05:56,880 --> 00:06:00,000
of the total time taken to forward the

190
00:05:59,120 --> 00:06:03,120
packet

191
00:06:00,000 --> 00:06:05,280
to the router that dropped it the time

192
00:06:03,120 --> 00:06:08,479
for the router to generate the icmp

193
00:06:05,280 --> 00:06:09,919
response and the time for the icmp

194
00:06:08,479 --> 00:06:11,680
packet to reach the center so you're

195
00:06:09,919 --> 00:06:12,639
looking at a complete round trip to come

196
00:06:11,680 --> 00:06:15,360
all the way back

197
00:06:12,639 --> 00:06:16,319
and that's what you're viewing so let's

198
00:06:15,360 --> 00:06:18,400
take a little more

199
00:06:16,319 --> 00:06:20,080
look in more detail as to what hops

200
00:06:18,400 --> 00:06:22,719
you're actually seeing

201
00:06:20,080 --> 00:06:24,479
so here we start with the pro packet

202
00:06:22,720 --> 00:06:26,479
entering router one

203
00:06:24,479 --> 00:06:29,440
the ttl hit zero and the packet is

204
00:06:26,479 --> 00:06:31,280
dropped so router one generates its icmp

205
00:06:29,440 --> 00:06:34,319
ttl exceed and it sends it back to

206
00:06:31,280 --> 00:06:36,318
source and it sets a source address

207
00:06:34,319 --> 00:06:38,080
based on so what it what it says is the

208
00:06:36,319 --> 00:06:39,039
source address for the icmp message that

209
00:06:38,080 --> 00:06:41,039
it sends

210
00:06:39,039 --> 00:06:42,080
is going to be what shows up in your

211
00:06:41,039 --> 00:06:44,960
tracero

212
00:06:42,080 --> 00:06:45,359
so by convention what it does is it sets

213
00:06:44,960 --> 00:06:48,318
the

214
00:06:45,360 --> 00:06:49,039
source to the ingress interface so if we

215
00:06:48,319 --> 00:06:51,800
look at the

216
00:06:49,039 --> 00:06:52,960
trace route above we're going to see

217
00:06:51,800 --> 00:06:54,080
172.162.1

218
00:06:52,960 --> 00:06:56,159
so we're going to see that ingress

219
00:06:54,080 --> 00:06:58,000
interface coming into router 1

220
00:06:56,160 --> 00:07:00,080
and we're going to see the ingress

221
00:06:58,000 --> 00:07:02,000
interface coming into router 2.

222
00:07:00,080 --> 00:07:04,318
what you're not going to see is the

223
00:07:02,000 --> 00:07:06,160
egress interface or the egress path you

224
00:07:04,319 --> 00:07:08,080
know nothing about that so the return

225
00:07:06,160 --> 00:07:10,639
path coming back to you is effectively

226
00:07:08,080 --> 00:07:12,159
invisible so all those 192.168 addresses

227
00:07:10,639 --> 00:07:14,000
on those return interfaces

228
00:07:12,160 --> 00:07:15,199
you don't see you have no visibility

229
00:07:14,000 --> 00:07:17,440
into so

230
00:07:15,199 --> 00:07:18,639
a little random factoid about traceroute

231
00:07:17,440 --> 00:07:21,280
if you actually go

232
00:07:18,639 --> 00:07:22,240
read the rfcs that should govern how all

233
00:07:21,280 --> 00:07:24,880
this works

234
00:07:22,240 --> 00:07:27,440
traceroute is actually non-standard so

235
00:07:24,880 --> 00:07:29,840
rfc 1812 says that icmp

236
00:07:27,440 --> 00:07:30,719
source must be generated from the egress

237
00:07:29,840 --> 00:07:32,400
interface

238
00:07:30,720 --> 00:07:34,720
and if this were to be obeyed traceroute

239
00:07:32,400 --> 00:07:36,638
would effectively be non-functional

240
00:07:34,720 --> 00:07:38,080
but through convention everyone has

241
00:07:36,639 --> 00:07:40,639
managed to implement this correctly so

242
00:07:38,080 --> 00:07:42,719
that traceroute works

243
00:07:40,639 --> 00:07:45,199
so now we're going to talk about how do

244
00:07:42,720 --> 00:07:47,360
we interpret dns in traceroute

245
00:07:45,199 --> 00:07:49,280
so you don't read a traceroute by ip

246
00:07:47,360 --> 00:07:50,960
alone it's it's really painful if you

247
00:07:49,280 --> 00:07:52,638
run across a network who doesn't provide

248
00:07:50,960 --> 00:07:54,479
any reverse dns but

249
00:07:52,639 --> 00:07:56,720
most operators are nice enough to do

250
00:07:54,479 --> 00:07:57,440
that for you and correctly interpreting

251
00:07:56,720 --> 00:07:59,280
the dns

252
00:07:57,440 --> 00:08:00,719
is pretty much one of the most important

253
00:07:59,280 --> 00:08:02,799
things about

254
00:08:00,720 --> 00:08:04,720
successfully reading the traceroute so

255
00:08:02,800 --> 00:08:06,000
the things that you can gather from dns

256
00:08:04,720 --> 00:08:07,360
you're going to get your geographic

257
00:08:06,000 --> 00:08:07,919
locations you're going to know something

258
00:08:07,360 --> 00:08:09,759
about

259
00:08:07,919 --> 00:08:11,359
where the router is you're going to

260
00:08:09,759 --> 00:08:13,120
learn something about the interface

261
00:08:11,360 --> 00:08:14,479
types and capacities

262
00:08:13,120 --> 00:08:16,720
you're gonna learn something about the

263
00:08:14,479 --> 00:08:18,240
router types and roles and you'll learn

264
00:08:16,720 --> 00:08:19,919
something about where the network

265
00:08:18,240 --> 00:08:22,240
boundaries are where the relationships

266
00:08:19,919 --> 00:08:25,520
are between providers

267
00:08:22,240 --> 00:08:27,360
so let's look at location data so

268
00:08:25,520 --> 00:08:29,280
knowing the geographic location is

269
00:08:27,360 --> 00:08:32,240
pretty much the the most important

270
00:08:29,280 --> 00:08:32,799
thing to understanding what's going on

271
00:08:32,240 --> 00:08:34,640
uh so

272
00:08:32,799 --> 00:08:36,319
it'll help you figure out if there's

273
00:08:34,640 --> 00:08:37,039
some kind of incorrect or sub-optimal

274
00:08:36,320 --> 00:08:38,880
routing

275
00:08:37,039 --> 00:08:40,640
if you're you're bouncing from new york

276
00:08:38,880 --> 00:08:42,640
to london to come back to chicago for

277
00:08:40,640 --> 00:08:45,519
example that's not going to be

278
00:08:42,640 --> 00:08:46,959
ideal by any stretch of the imagination

279
00:08:45,519 --> 00:08:48,959
it's going to help you understand

280
00:08:46,959 --> 00:08:50,640
where the network interconnections are

281
00:08:48,959 --> 00:08:52,479
and even if you don't know there's a

282
00:08:50,640 --> 00:08:54,399
problem

283
00:08:52,480 --> 00:08:56,399
you'll still see you'll be able to

284
00:08:54,399 --> 00:08:58,080
figure out if the high latency is

285
00:08:56,399 --> 00:09:01,839
justified or or not

286
00:08:58,080 --> 00:09:04,959
so the most common used locations

287
00:09:01,839 --> 00:09:09,040
are location identifiers are the iata

288
00:09:04,959 --> 00:09:11,599
airport codes the silly code cll codes

289
00:09:09,040 --> 00:09:13,199
uh some abbreviation of the city name

290
00:09:11,600 --> 00:09:14,240
and then sometimes you just have to

291
00:09:13,200 --> 00:09:16,720
guess because people

292
00:09:14,240 --> 00:09:17,600
make up random things so let's talk

293
00:09:16,720 --> 00:09:20,560
about the

294
00:09:17,600 --> 00:09:21,600
airport code so there is a international

295
00:09:20,560 --> 00:09:23,599
standard

296
00:09:21,600 --> 00:09:24,720
body called the iata that publishes

297
00:09:23,600 --> 00:09:26,560
airport codes

298
00:09:24,720 --> 00:09:28,640
and this works really well because it

299
00:09:26,560 --> 00:09:31,920
covers pretty much every large

300
00:09:28,640 --> 00:09:33,519
metropolitan city region in the world

301
00:09:31,920 --> 00:09:35,040
has an airport in it and so there's an

302
00:09:33,519 --> 00:09:37,440
airport code

303
00:09:35,040 --> 00:09:39,360
so you end up with this works really

304
00:09:37,440 --> 00:09:42,240
well for people who have a large number

305
00:09:39,360 --> 00:09:45,680
of fewer pop so for example if you're a

306
00:09:42,240 --> 00:09:46,080
global backbone provider with capacity

307
00:09:45,680 --> 00:09:47,760
in

308
00:09:46,080 --> 00:09:49,760
major cities you're in london you're in

309
00:09:47,760 --> 00:09:52,959
frankfort you're in paris

310
00:09:49,760 --> 00:09:55,040
it works really well if you are

311
00:09:52,959 --> 00:09:57,199
someone with a large number of locations

312
00:09:55,040 --> 00:09:58,800
imagine if you're a telco and you have

313
00:09:57,200 --> 00:10:00,560
thousands and thousands of pops and you

314
00:09:58,800 --> 00:10:03,040
cover all these little small cities

315
00:10:00,560 --> 00:10:04,560
it tends not to work very well for that

316
00:10:03,040 --> 00:10:07,760
uh so some examples

317
00:10:04,560 --> 00:10:09,599
sdq santa domingo uh well you can tell

318
00:10:07,760 --> 00:10:10,880
the slide was my i wrote this was the

319
00:10:09,600 --> 00:10:13,760
original nanag

320
00:10:10,880 --> 00:10:15,120
in san domingo uh san jose california's

321
00:10:13,760 --> 00:10:16,880
sjc so there's

322
00:10:15,120 --> 00:10:18,399
there's pretty much a major airport code

323
00:10:16,880 --> 00:10:20,240
everywhere

324
00:10:18,399 --> 00:10:22,399
sometimes you'll see this represented by

325
00:10:20,240 --> 00:10:24,000
the metropolitan area codes so

326
00:10:22,399 --> 00:10:26,240
this happens when you've got multiple

327
00:10:24,000 --> 00:10:29,200
airports that service the same region

328
00:10:26,240 --> 00:10:30,880
and sometimes this can be helpful and be

329
00:10:29,200 --> 00:10:32,399
more intuitive and sometimes it can be a

330
00:10:30,880 --> 00:10:35,839
little less intuitive

331
00:10:32,399 --> 00:10:37,920
so for example new york new york city

332
00:10:35,839 --> 00:10:39,040
is serviced by three major airports so

333
00:10:37,920 --> 00:10:41,279
you've got jfk

334
00:10:39,040 --> 00:10:42,480
out in long island you've got laguardia

335
00:10:41,279 --> 00:10:46,320
lga and you've got

336
00:10:42,480 --> 00:10:49,600
newark over the border in new jersey ewr

337
00:10:46,320 --> 00:10:50,160
as there is a code nyc that is used to

338
00:10:49,600 --> 00:10:52,720
represent

339
00:10:50,160 --> 00:10:54,560
all three so you might be perfectly

340
00:10:52,720 --> 00:10:57,360
within your your rights to pick

341
00:10:54,560 --> 00:10:59,680
nyc as the name of your pop code to kind

342
00:10:57,360 --> 00:11:01,839
of cover the entire geographic region

343
00:10:59,680 --> 00:11:03,760
without having to nitpick over whether

344
00:11:01,839 --> 00:11:06,560
you're closer to lga or jfk

345
00:11:03,760 --> 00:11:07,519
and kind of improve communication

346
00:11:06,560 --> 00:11:10,640
another example

347
00:11:07,519 --> 00:11:12,240
is northern virginia is serviced by ied

348
00:11:10,640 --> 00:11:13,120
that's the dulles that's the closest

349
00:11:12,240 --> 00:11:15,519
airport

350
00:11:13,120 --> 00:11:18,240
but you might also see dca that's the

351
00:11:15,519 --> 00:11:20,959
one in downtown dc oregon national

352
00:11:18,240 --> 00:11:22,959
um there's a there's a metro code that

353
00:11:20,959 --> 00:11:25,359
covers all those was

354
00:11:22,959 --> 00:11:27,040
uh but it also represents bwi baltimore

355
00:11:25,360 --> 00:11:28,800
which is actually a pretty good distance

356
00:11:27,040 --> 00:11:31,279
away from northern virginia

357
00:11:28,800 --> 00:11:33,760
so you can win or lose on these codes

358
00:11:31,279 --> 00:11:35,279
sometimes you you see them used

359
00:11:33,760 --> 00:11:38,079
and sometimes they can be a little more

360
00:11:35,279 --> 00:11:40,839
confusing sometimes a little less

361
00:11:38,079 --> 00:11:43,199
silly codes are what's called the common

362
00:11:40,839 --> 00:11:44,240
location the common language location

363
00:11:43,200 --> 00:11:46,800
identifier

364
00:11:44,240 --> 00:11:47,440
so these are codes that are maintained

365
00:11:46,800 --> 00:11:50,399
and sold

366
00:11:47,440 --> 00:11:51,519
by telecordia and it's really for north

367
00:11:50,399 --> 00:11:54,079
american telco

368
00:11:51,519 --> 00:11:55,200
so here's an example of a code and this

369
00:11:54,079 --> 00:11:58,079
identifies

370
00:11:55,200 --> 00:11:58,959
a particular co or something along those

371
00:11:58,079 --> 00:12:00,959
lines

372
00:11:58,959 --> 00:12:03,199
and what you'll typically see in a

373
00:12:00,959 --> 00:12:05,920
non-telco role is you'll pull out

374
00:12:03,200 --> 00:12:08,800
just the city and state identifiers so

375
00:12:05,920 --> 00:12:11,839
houston texas might be hstntx ashford

376
00:12:08,800 --> 00:12:14,959
virginia might be asbn va

377
00:12:11,839 --> 00:12:15,519
ntt is probably the biggest notable user

378
00:12:14,959 --> 00:12:18,560
of this

379
00:12:15,519 --> 00:12:20,399
as global tier ones go but there's a

380
00:12:18,560 --> 00:12:22,880
well-defined standard

381
00:12:20,399 --> 00:12:23,600
for all north american cities so every

382
00:12:22,880 --> 00:12:26,399
telco

383
00:12:23,600 --> 00:12:27,760
everyone who has assets in the field

384
00:12:26,399 --> 00:12:29,360
that is managing large numbers of

385
00:12:27,760 --> 00:12:32,000
locations tends to follow

386
00:12:29,360 --> 00:12:34,000
this standard uh problem is it's not an

387
00:12:32,000 --> 00:12:35,040
actual standard outside of north america

388
00:12:34,000 --> 00:12:37,519
so like i said

389
00:12:35,040 --> 00:12:39,439
uh ntt being an example of a major

390
00:12:37,519 --> 00:12:41,680
global provider that uses this

391
00:12:39,440 --> 00:12:42,800
they made up their own that fit in the

392
00:12:41,680 --> 00:12:44,560
same format

393
00:12:42,800 --> 00:12:46,160
so if you're in north america there's a

394
00:12:44,560 --> 00:12:46,800
database you can look up but if you're

395
00:12:46,160 --> 00:12:49,279
not you

396
00:12:46,800 --> 00:12:50,959
you pretty much have to guess and then

397
00:12:49,279 --> 00:12:52,800
sometimes people just use arbitrary

398
00:12:50,959 --> 00:12:55,920
values so here's an example

399
00:12:52,800 --> 00:12:56,560
of one where you might use an arbitrary

400
00:12:55,920 --> 00:13:00,560
value

401
00:12:56,560 --> 00:13:02,160
toronto ontario in canada the iata

402
00:13:00,560 --> 00:13:04,399
airport code so there's there's two

403
00:13:02,160 --> 00:13:07,439
there's yyz which is the big one

404
00:13:04,399 --> 00:13:08,800
and ytc which is the smaller airport

405
00:13:07,440 --> 00:13:10,959
downtown

406
00:13:08,800 --> 00:13:13,040
but the metro code for both of those is

407
00:13:10,959 --> 00:13:14,959
yto and you could look at those and

408
00:13:13,040 --> 00:13:18,000
think that none of those are

409
00:13:14,959 --> 00:13:20,160
terribly convenient for an end user to

410
00:13:18,000 --> 00:13:22,639
know what the heck that means

411
00:13:20,160 --> 00:13:24,240
so sometimes people just use the code

412
00:13:22,639 --> 00:13:26,000
tor

413
00:13:24,240 --> 00:13:27,519
typically this happens when you've got

414
00:13:26,000 --> 00:13:28,079
really good intentions you're trying to

415
00:13:27,519 --> 00:13:31,200
make things

416
00:13:28,079 --> 00:13:32,880
readable for for english users

417
00:13:31,200 --> 00:13:34,959
but the problem is it doesn't follow a

418
00:13:32,880 --> 00:13:36,639
known standard so sometimes these can be

419
00:13:34,959 --> 00:13:39,199
pretty difficult to reverse engineer

420
00:13:36,639 --> 00:13:39,680
what they actually meant when you uh

421
00:13:39,199 --> 00:13:42,719
when you

422
00:13:39,680 --> 00:13:43,920
when you actually go to read it so

423
00:13:42,720 --> 00:13:46,720
here's a little

424
00:13:43,920 --> 00:13:48,399
table of the major u.s cities that

425
00:13:46,720 --> 00:13:50,880
you'll typically see pop up

426
00:13:48,399 --> 00:13:52,720
in tracer out because these are the

427
00:13:50,880 --> 00:13:53,760
primary interconnection hubs this is

428
00:13:52,720 --> 00:13:56,000
where most traffic

429
00:13:53,760 --> 00:13:57,839
will be exchanged or routed where the

430
00:13:56,000 --> 00:14:00,079
core routers will be located

431
00:13:57,839 --> 00:14:00,880
uh so you can look at this for for handy

432
00:14:00,079 --> 00:14:03,120
reference

433
00:14:00,880 --> 00:14:05,199
and here's the same thing on the major

434
00:14:03,120 --> 00:14:07,360
global cities these are the the big big

435
00:14:05,199 --> 00:14:09,199
locations that you'll often see

436
00:14:07,360 --> 00:14:11,440
traffic rounded through and here's the

437
00:14:09,199 --> 00:14:13,279
airport codes the metro codes

438
00:14:11,440 --> 00:14:14,639
the silly codes and then some other

439
00:14:13,279 --> 00:14:17,839
codes that people will

440
00:14:14,639 --> 00:14:20,320
will use uh the next thing we look at

441
00:14:17,839 --> 00:14:21,120
is how do we interpret uh interface

442
00:14:20,320 --> 00:14:23,279
types

443
00:14:21,120 --> 00:14:24,959
so most networks will be nice enough to

444
00:14:23,279 --> 00:14:27,600
put their interface information

445
00:14:24,959 --> 00:14:29,279
in dns and the real question is whether

446
00:14:27,600 --> 00:14:31,600
it's up to date or not so if you've got

447
00:14:29,279 --> 00:14:32,800
a really well-run network they have an

448
00:14:31,600 --> 00:14:35,680
automated tool

449
00:14:32,800 --> 00:14:36,639
and it generates automatic dns so if a

450
00:14:35,680 --> 00:14:39,359
router config

451
00:14:36,639 --> 00:14:41,040
gets moved to a new port sometime like

452
00:14:39,360 --> 00:14:43,120
within 24 hours it'll get pushed and

453
00:14:41,040 --> 00:14:44,560
updated and everything will be known

454
00:14:43,120 --> 00:14:46,399
and there's some other networks that are

455
00:14:44,560 --> 00:14:47,119
shockingly bad at keeping their dns up

456
00:14:46,399 --> 00:14:49,519
to date so

457
00:14:47,120 --> 00:14:51,440
the the larger or more telco like they

458
00:14:49,519 --> 00:14:53,120
are the more i tend to find that they're

459
00:14:51,440 --> 00:14:53,600
really really bad at keeping them up to

460
00:14:53,120 --> 00:14:56,399
date

461
00:14:53,600 --> 00:14:58,079
and i've i've seen some dns pop up it's

462
00:14:56,399 --> 00:15:00,000
like wow that company's been bankrupt

463
00:14:58,079 --> 00:15:01,760
for like 15 years there's still a dns

464
00:15:00,000 --> 00:15:03,760
entry for it

465
00:15:01,760 --> 00:15:06,079
but assuming the dns is up to date this

466
00:15:03,760 --> 00:15:08,319
can really help you identify

467
00:15:06,079 --> 00:15:10,319
what type of interface as well as the

468
00:15:08,320 --> 00:15:11,440
capacity and maybe even the maker model

469
00:15:10,320 --> 00:15:13,839
of the router so

470
00:15:11,440 --> 00:15:16,320
here's an example of a level three this

471
00:15:13,839 --> 00:15:17,600
is quite old but an example of a hop

472
00:15:16,320 --> 00:15:20,160
from level three

473
00:15:17,600 --> 00:15:22,480
uh so when you see xe dash you know that

474
00:15:20,160 --> 00:15:24,880
that's a juniper 10 gig port

475
00:15:22,480 --> 00:15:26,880
so you know by the slot naming that it

476
00:15:24,880 --> 00:15:27,600
has at least 12 slots and there's at

477
00:15:26,880 --> 00:15:30,480
least four

478
00:15:27,600 --> 00:15:32,320
pick slots for this to be a tangent so

479
00:15:30,480 --> 00:15:34,320
it's highly likely this is a juniper

480
00:15:32,320 --> 00:15:35,360
mx-960 it could be some other device

481
00:15:34,320 --> 00:15:37,360
there's been

482
00:15:35,360 --> 00:15:38,720
a lot of different permutations of this

483
00:15:37,360 --> 00:15:42,160
out there uh

484
00:15:38,720 --> 00:15:43,759
since then but it gives you an idea of

485
00:15:42,160 --> 00:15:45,759
what kind of device you're looking at

486
00:15:43,759 --> 00:15:47,839
and if you start to look at

487
00:15:45,759 --> 00:15:49,440
the other side of the slash 30 things

488
00:15:47,839 --> 00:15:52,000
like that or 31

489
00:15:49,440 --> 00:15:53,199
you'll be able to figure out more date

490
00:15:52,000 --> 00:15:56,320
more details

491
00:15:53,199 --> 00:15:58,800
so here's a little database of

492
00:15:56,320 --> 00:16:00,079
common naming conventions so this shows

493
00:15:58,800 --> 00:16:04,319
you what it looks like

494
00:16:00,079 --> 00:16:05,758
in classic ios in ios xr which has a

495
00:16:04,320 --> 00:16:08,000
different naming scheme

496
00:16:05,759 --> 00:16:09,199
and then juniper convention which is is

497
00:16:08,000 --> 00:16:11,360
very different then

498
00:16:09,199 --> 00:16:13,040
you can see kind of the basics for all

499
00:16:11,360 --> 00:16:15,839
of them

500
00:16:13,040 --> 00:16:17,519
uh so now we're going to look at knowing

501
00:16:15,839 --> 00:16:19,360
the role of the router so

502
00:16:17,519 --> 00:16:20,959
remember every network is different but

503
00:16:19,360 --> 00:16:23,519
they all generally have

504
00:16:20,959 --> 00:16:25,040
some kind of a naming convention but

505
00:16:23,519 --> 00:16:27,360
just to be extra confusing sometimes

506
00:16:25,040 --> 00:16:30,240
they don't always follow their own rules

507
00:16:27,360 --> 00:16:31,839
so you can usually guess the context so

508
00:16:30,240 --> 00:16:35,199
an example of a core router

509
00:16:31,839 --> 00:16:39,600
cr core router core bb for backbone

510
00:16:35,199 --> 00:16:41,680
ccr for core bbr for backbone router

511
00:16:39,600 --> 00:16:42,959
uh peering routers you tend to see

512
00:16:41,680 --> 00:16:46,000
things that are named like

513
00:16:42,959 --> 00:16:48,719
br border router border edge

514
00:16:46,000 --> 00:16:50,320
interconnection router or pier uh those

515
00:16:48,720 --> 00:16:52,399
are some really common ones customer

516
00:16:50,320 --> 00:16:56,320
routers tend to have names like

517
00:16:52,399 --> 00:16:58,079
aggregation or customer ar or or car

518
00:16:56,320 --> 00:17:01,199
customer aggregation router or

519
00:16:58,079 --> 00:17:03,120
hsi hsa high speed access or gw

520
00:17:01,199 --> 00:17:04,559
gateway these are some very common

521
00:17:03,120 --> 00:17:05,919
conventions that you see in

522
00:17:04,559 --> 00:17:07,839
a lot of the major backbones that are

523
00:17:05,919 --> 00:17:10,319
out there so

524
00:17:07,839 --> 00:17:11,280
the reason you care is you want to be

525
00:17:10,319 --> 00:17:13,359
able to identify

526
00:17:11,280 --> 00:17:15,359
a network boundary so the network

527
00:17:13,359 --> 00:17:16,559
boundaries matter because this is where

528
00:17:15,359 --> 00:17:19,198
the routing policy

529
00:17:16,559 --> 00:17:19,839
changes tend to occur so for example uh

530
00:17:19,199 --> 00:17:22,000
a different

531
00:17:19,839 --> 00:17:24,319
return path based on local craft you

532
00:17:22,000 --> 00:17:26,000
might local prep appear above a transit

533
00:17:24,319 --> 00:17:27,918
provider or you might local perfect

534
00:17:26,000 --> 00:17:29,280
customer above a peer

535
00:17:27,919 --> 00:17:32,000
in fact you pretty much are always

536
00:17:29,280 --> 00:17:34,399
almost always guaranteed to do that so

537
00:17:32,000 --> 00:17:36,640
these tend to be the places where the

538
00:17:34,400 --> 00:17:39,520
routing changes because of that

539
00:17:36,640 --> 00:17:40,880
or because the capacity or the routing

540
00:17:39,520 --> 00:17:43,600
is the most difficult so

541
00:17:40,880 --> 00:17:45,120
any kind of a network border between two

542
00:17:43,600 --> 00:17:46,159
peers you might be seeing peering

543
00:17:45,120 --> 00:17:47,678
congestion or

544
00:17:46,160 --> 00:17:49,200
transit congestion driving customer

545
00:17:47,679 --> 00:17:51,520
congestion so

546
00:17:49,200 --> 00:17:52,720
identifying the relationship typically

547
00:17:51,520 --> 00:17:54,639
you want to figure out

548
00:17:52,720 --> 00:17:56,480
the three major relationships are

549
00:17:54,640 --> 00:17:58,480
there's either a transit relationship

550
00:17:56,480 --> 00:18:00,640
a peer relationship or a customer

551
00:17:58,480 --> 00:18:02,320
relationship and customer and transit

552
00:18:00,640 --> 00:18:05,039
being the adverse of each other so

553
00:18:02,320 --> 00:18:05,600
one transit provider is the the customer

554
00:18:05,039 --> 00:18:07,120
is a

555
00:18:05,600 --> 00:18:08,639
customer of a transit provider they go

556
00:18:07,120 --> 00:18:10,959
back and forth

557
00:18:08,640 --> 00:18:12,320
so many networks will try to indicate

558
00:18:10,960 --> 00:18:14,320
this in their dns

559
00:18:12,320 --> 00:18:16,080
and it's really helpful for knowing

560
00:18:14,320 --> 00:18:19,039
where that that is

561
00:18:16,080 --> 00:18:19,360
so clear names like networkname.customer

562
00:18:19,039 --> 00:18:21,360
or

563
00:18:19,360 --> 00:18:24,000
always landing customers on some kind of

564
00:18:21,360 --> 00:18:26,479
a router like name gw

565
00:18:24,000 --> 00:18:28,080
knowing where the customer dmarc is in

566
00:18:26,480 --> 00:18:30,559
my experience tends to be the

567
00:18:28,080 --> 00:18:32,000
most important because customers tend to

568
00:18:30,559 --> 00:18:34,080
be the ones who

569
00:18:32,000 --> 00:18:35,679
screw up their routing or screw up their

570
00:18:34,080 --> 00:18:38,799
network in some way

571
00:18:35,679 --> 00:18:39,919
and you can usually pass the blame from

572
00:18:38,799 --> 00:18:42,799
the network provider

573
00:18:39,919 --> 00:18:44,240
onto the in network and kind of have the

574
00:18:42,799 --> 00:18:44,879
the person submitting the tracer i'll

575
00:18:44,240 --> 00:18:47,200
take it

576
00:18:44,880 --> 00:18:49,440
talk to the person who's better able to

577
00:18:47,200 --> 00:18:51,200
respond to the issue

578
00:18:49,440 --> 00:18:54,000
so it's pretty easy to spot where the

579
00:18:51,200 --> 00:18:56,720
dns changes uh here's an example where

580
00:18:54,000 --> 00:18:57,840
you're going along and hop 4 says global

581
00:18:56,720 --> 00:19:01,760
crossing well that's

582
00:18:57,840 --> 00:19:03,600
defunct and hop5 says sprint

583
00:19:01,760 --> 00:19:05,679
another thing that you'll see pop up is

584
00:19:03,600 --> 00:19:06,719
when you see the remote party in the dns

585
00:19:05,679 --> 00:19:09,520
name so

586
00:19:06,720 --> 00:19:10,240
here you see hop 4 was clearly global

587
00:19:09,520 --> 00:19:13,520
crossing

588
00:19:10,240 --> 00:19:16,400
and top five is the cogent side

589
00:19:13,520 --> 00:19:17,200
of the global crossing where you see

590
00:19:16,400 --> 00:19:19,440
that happen

591
00:19:17,200 --> 00:19:20,559
is where one side or the other provides

592
00:19:19,440 --> 00:19:22,720
the slash 30

593
00:19:20,559 --> 00:19:24,000
and they get too lazy to go ask the

594
00:19:22,720 --> 00:19:24,880
other party hey what do you want your

595
00:19:24,000 --> 00:19:26,960
dns to be

596
00:19:24,880 --> 00:19:28,799
so they just set it to this convention

597
00:19:26,960 --> 00:19:31,200
and a really easy way to look that up is

598
00:19:28,799 --> 00:19:34,160
to go to the other side and slash 30. so

599
00:19:31,200 --> 00:19:36,720
here if we you know uh 107.90 the other

600
00:19:34,160 --> 00:19:39,600
side of that slash 30 would have been.89

601
00:19:36,720 --> 00:19:40,320
so you go do a dns lookup on that and

602
00:19:39,600 --> 00:19:42,879
you can see

603
00:19:40,320 --> 00:19:44,960
that that's the other side of the global

604
00:19:42,880 --> 00:19:48,559
crossing interface so you see that

605
00:19:44,960 --> 00:19:52,000
it came in uh po2 and it went out

606
00:19:48,559 --> 00:19:53,520
10g 2 3.

607
00:19:52,000 --> 00:19:55,520
now we're going to talk about network

608
00:19:53,520 --> 00:19:57,760
latency so

609
00:19:55,520 --> 00:19:59,360
there's three primary causes of network

610
00:19:57,760 --> 00:20:01,840
induced latency that we care about

611
00:19:59,360 --> 00:20:03,678
uh the first is serialization delay so

612
00:20:01,840 --> 00:20:05,760
basically that's caused by the

613
00:20:03,679 --> 00:20:06,960
packetization of data as we take data

614
00:20:05,760 --> 00:20:08,080
and break it up into little chunks it

615
00:20:06,960 --> 00:20:09,679
has to be sent

616
00:20:08,080 --> 00:20:11,439
that way and that causes serialization

617
00:20:09,679 --> 00:20:13,679
delay uh number two is

618
00:20:11,440 --> 00:20:15,919
queuing delay so this is caused whenever

619
00:20:13,679 --> 00:20:16,559
the router or switch has to buffer the

620
00:20:15,919 --> 00:20:18,080
packet

621
00:20:16,559 --> 00:20:20,080
while waiting for an opportunity to

622
00:20:18,080 --> 00:20:22,639
transmit it and the third

623
00:20:20,080 --> 00:20:24,000
is propagation delay so this is pure

624
00:20:22,640 --> 00:20:26,080
distance related

625
00:20:24,000 --> 00:20:29,280
electromagnetic propagation you know

626
00:20:26,080 --> 00:20:31,120
light only moves so fast

627
00:20:29,280 --> 00:20:33,918
so let's talk about serialization delay

628
00:20:31,120 --> 00:20:35,918
so a packet moves through the network as

629
00:20:33,919 --> 00:20:36,880
an atomic unit so you you can't do

630
00:20:35,919 --> 00:20:38,960
something like

631
00:20:36,880 --> 00:20:40,960
transmit half a packet and finish it

632
00:20:38,960 --> 00:20:44,400
later it would be dropped it would be a

633
00:20:40,960 --> 00:20:45,120
bad packet so generally speaking nor can

634
00:20:44,400 --> 00:20:47,360
you start

635
00:20:45,120 --> 00:20:48,879
transmitting a packet until you finish

636
00:20:47,360 --> 00:20:50,399
receiving it

637
00:20:48,880 --> 00:20:52,000
there's some exceptions to this there

638
00:20:50,400 --> 00:20:54,240
are some devices that do what's called

639
00:20:52,000 --> 00:20:55,679
cut through switching but this is pretty

640
00:20:54,240 --> 00:20:58,000
rare the reason being

641
00:20:55,679 --> 00:20:59,440
it requires every network interface to

642
00:20:58,000 --> 00:21:01,360
be exactly the same so

643
00:20:59,440 --> 00:21:03,520
you would have to have a 10 gig and a 10

644
00:21:01,360 --> 00:21:04,158
gig out to do that kind of a cut through

645
00:21:03,520 --> 00:21:05,840
switch

646
00:21:04,159 --> 00:21:07,840
where it starts to transmit the packet

647
00:21:05,840 --> 00:21:10,399
before it's fully received

648
00:21:07,840 --> 00:21:11,760
but generally speaking every major

649
00:21:10,400 --> 00:21:13,360
device that you run into

650
00:21:11,760 --> 00:21:14,640
is what's called store and forward so it

651
00:21:13,360 --> 00:21:15,360
actually waits until it gets the whole

652
00:21:14,640 --> 00:21:17,600
packet

653
00:21:15,360 --> 00:21:19,199
doesn't look up and then sends it to its

654
00:21:17,600 --> 00:21:21,600
destination

655
00:21:19,200 --> 00:21:22,640
so serialization is the process where

656
00:21:21,600 --> 00:21:25,360
the data is actually

657
00:21:22,640 --> 00:21:27,120
written onto the wire so the faster an

658
00:21:25,360 --> 00:21:27,600
interface is the quicker this process

659
00:21:27,120 --> 00:21:30,320
occurs

660
00:21:27,600 --> 00:21:32,000
the math is really simple the delay is

661
00:21:30,320 --> 00:21:32,960
the packet size divided by the link

662
00:21:32,000 --> 00:21:35,679
speed so

663
00:21:32,960 --> 00:21:38,320
here's an example where you send a 1500

664
00:21:35,679 --> 00:21:40,480
byte packet over a one megabit link

665
00:21:38,320 --> 00:21:41,600
so one megabit per second is a thousand

666
00:21:40,480 --> 00:21:45,360
kilobits per second

667
00:21:41,600 --> 00:21:49,120
is 125 kilobytes per second

668
00:21:45,360 --> 00:21:52,799
which is 125 000 bytes per second

669
00:21:49,120 --> 00:21:53,760
so if you do 1500 bytes divided by 125

670
00:21:52,799 --> 00:21:56,240
000 bytes

671
00:21:53,760 --> 00:21:58,400
you end up with a total transmit time of

672
00:21:56,240 --> 00:22:01,360
0.012 seconds which is

673
00:21:58,400 --> 00:22:02,480
12 milliseconds remember that networking

674
00:22:01,360 --> 00:22:05,039
uses the true

675
00:22:02,480 --> 00:22:06,400
si definition so when we say kilobit or

676
00:22:05,039 --> 00:22:08,080
kilobyte we mean

677
00:22:06,400 --> 00:22:09,440
a thousand we do not mean a thousand

678
00:22:08,080 --> 00:22:11,600
twenty four that's a

679
00:22:09,440 --> 00:22:12,960
kibi byte and that's only used in some

680
00:22:11,600 --> 00:22:16,320
applications on

681
00:22:12,960 --> 00:22:19,039
host devices so remember

682
00:22:16,320 --> 00:22:19,918
every single time a packet aware device

683
00:22:19,039 --> 00:22:23,120
every time you do

684
00:22:19,919 --> 00:22:26,559
a routing lookup or a switching lookup

685
00:22:23,120 --> 00:22:29,520
you're adding a new serialization delay

686
00:22:26,559 --> 00:22:31,360
um don't forget about layer 2 overhead

687
00:22:29,520 --> 00:22:31,918
in this so when i said a 1500 byte

688
00:22:31,360 --> 00:22:34,399
packet

689
00:22:31,919 --> 00:22:35,679
that's what we think of at an ip layer

690
00:22:34,400 --> 00:22:37,600
but here's what happens when you

691
00:22:35,679 --> 00:22:38,240
actually go to transmitted over the wire

692
00:22:37,600 --> 00:22:39,918
so

693
00:22:38,240 --> 00:22:42,400
the preamble and the starter frame

694
00:22:39,919 --> 00:22:44,799
delimiter consumes eight bytes of of

695
00:22:42,400 --> 00:22:46,720
wire space you have to put an ethernet

696
00:22:44,799 --> 00:22:48,480
header on it that's 14 bytes

697
00:22:46,720 --> 00:22:50,240
you have to put our payload and if for

698
00:22:48,480 --> 00:22:52,400
whatever reason our payload if our ip

699
00:22:50,240 --> 00:22:54,559
packet was smaller than 46 bytes

700
00:22:52,400 --> 00:22:56,720
ethernet requires you to pad it to 46

701
00:22:54,559 --> 00:22:58,320
bytes then you have to put a frame check

702
00:22:56,720 --> 00:23:00,159
sum that's another four bytes and then

703
00:22:58,320 --> 00:23:03,280
you have to have an inner frame gap

704
00:23:00,159 --> 00:23:05,120
and that's 12 bytes of wire time so when

705
00:23:03,280 --> 00:23:07,600
you send a 1500 byte

706
00:23:05,120 --> 00:23:10,479
ip packet a really common ip packet it

707
00:23:07,600 --> 00:23:11,280
actually consumes 1538 bytes across the

708
00:23:10,480 --> 00:23:13,200
wire

709
00:23:11,280 --> 00:23:15,360
and don't forget there might be vlan

710
00:23:13,200 --> 00:23:17,280
tags there might be mpls shims

711
00:23:15,360 --> 00:23:18,879
these might be stacked multiple times

712
00:23:17,280 --> 00:23:19,678
you might be inside of a tunnel you

713
00:23:18,880 --> 00:23:21,200
might be in

714
00:23:19,679 --> 00:23:23,600
inside of more things that are adding

715
00:23:21,200 --> 00:23:24,400
more overhead but if you were to look at

716
00:23:23,600 --> 00:23:26,158
a pure

717
00:23:24,400 --> 00:23:28,799
symbol ethernet link the actual

718
00:23:26,159 --> 00:23:31,200
serialization instead of 12 milliseconds

719
00:23:28,799 --> 00:23:32,720
12.3 milliseconds because of the extra

720
00:23:31,200 --> 00:23:36,080
overhead that we've added

721
00:23:32,720 --> 00:23:37,840
during the layer two so fortunately this

722
00:23:36,080 --> 00:23:40,080
is less of an issue on high speed

723
00:23:37,840 --> 00:23:42,000
networks and the reason for that is

724
00:23:40,080 --> 00:23:44,639
interface speeds have increased by many

725
00:23:42,000 --> 00:23:46,960
orders of magnitudes over the year

726
00:23:44,640 --> 00:23:48,880
over the the many years since data and

727
00:23:46,960 --> 00:23:50,960
packet networking has been a thing

728
00:23:48,880 --> 00:23:52,640
but the packet sizes have stayed

729
00:23:50,960 --> 00:23:55,440
essentially fixed

730
00:23:52,640 --> 00:23:57,360
so if you talking about ethernet a 1500

731
00:23:55,440 --> 00:23:59,360
byte packet that's been the same

732
00:23:57,360 --> 00:24:00,959
from the beginnings of ethernet all the

733
00:23:59,360 --> 00:24:03,199
way up until 100 gig

734
00:24:00,960 --> 00:24:05,360
and 400 gig ethernet so the

735
00:24:03,200 --> 00:24:06,320
serialization delay has gone down quite

736
00:24:05,360 --> 00:24:09,520
a bit so

737
00:24:06,320 --> 00:24:10,799
what what would have been a 1.23

738
00:24:09,520 --> 00:24:14,080
millisecond delay over

739
00:24:10,799 --> 00:24:14,960
10 meg ethernet is now a 0.00123 it

740
00:24:14,080 --> 00:24:18,000
becomes

741
00:24:14,960 --> 00:24:20,159
unnoticeable at 10 gig ethernet but

742
00:24:18,000 --> 00:24:22,080
this is still a problem when you run

743
00:24:20,159 --> 00:24:23,200
across low speed interfaces that are out

744
00:24:22,080 --> 00:24:24,960
there

745
00:24:23,200 --> 00:24:26,559
and it's it's an interesting counter

746
00:24:24,960 --> 00:24:28,159
argument to the widespread deployment of

747
00:24:26,559 --> 00:24:30,960
jumbo frames so we actually get

748
00:24:28,159 --> 00:24:32,000
some benefit to having small packets

749
00:24:30,960 --> 00:24:34,480
relative to the bandwidth

750
00:24:32,000 --> 00:24:36,559
size is that serialization delay becomes

751
00:24:34,480 --> 00:24:38,400
less of an issue

752
00:24:36,559 --> 00:24:40,080
so the next thing that comes up is

753
00:24:38,400 --> 00:24:41,200
queuing delay so what do i mean by

754
00:24:40,080 --> 00:24:43,840
queuing delay

755
00:24:41,200 --> 00:24:44,480
cueing is anytime the device is holding

756
00:24:43,840 --> 00:24:47,120
the packet

757
00:24:44,480 --> 00:24:48,080
in memory waiting for an opportunity to

758
00:24:47,120 --> 00:24:50,559
transmit it

759
00:24:48,080 --> 00:24:52,320
so every moment that a router is holding

760
00:24:50,559 --> 00:24:54,720
onto a packet without transmitting it

761
00:24:52,320 --> 00:24:57,200
the overall latency is going up

762
00:24:54,720 --> 00:24:58,960
um why so why do we need queuing in the

763
00:24:57,200 --> 00:25:01,679
first place well let's talk about

764
00:24:58,960 --> 00:25:03,200
what our concepts of utilization are so

765
00:25:01,679 --> 00:25:05,840
if we've got a 10 gig

766
00:25:03,200 --> 00:25:06,960
port and it's doing 5 gigabits per

767
00:25:05,840 --> 00:25:09,279
second of traffic

768
00:25:06,960 --> 00:25:11,679
you might say that it's being 50

769
00:25:09,279 --> 00:25:14,400
utilized but that's actually not correct

770
00:25:11,679 --> 00:25:17,200
so at any given instant the device is

771
00:25:14,400 --> 00:25:18,960
either transmitting so it's 100 utilized

772
00:25:17,200 --> 00:25:20,880
or it's not transmitting it's zero

773
00:25:18,960 --> 00:25:21,840
percent realized so what you actually

774
00:25:20,880 --> 00:25:25,919
meant when you said

775
00:25:21,840 --> 00:25:28,480
50 utilized was the average utilization

776
00:25:25,919 --> 00:25:30,080
over some time period so you might say

777
00:25:28,480 --> 00:25:31,919
fifty percent utilized over

778
00:25:30,080 --> 00:25:33,439
one second or thirty seconds or even

779
00:25:31,919 --> 00:25:34,880
five minutes if you have a really old

780
00:25:33,440 --> 00:25:37,919
graphing system

781
00:25:34,880 --> 00:25:38,320
so some level of queuing is necessary

782
00:25:37,919 --> 00:25:40,320
for

783
00:25:38,320 --> 00:25:42,000
any device to function and if you doubt

784
00:25:40,320 --> 00:25:44,399
that ask anybody who's ever bought

785
00:25:42,000 --> 00:25:46,640
an underbuffered switch the top of rack

786
00:25:44,400 --> 00:25:48,320
switches that are really cheap

787
00:25:46,640 --> 00:25:49,919
also tend to have very very small

788
00:25:48,320 --> 00:25:51,600
buffers and you figure out very quickly

789
00:25:49,919 --> 00:25:54,240
that you start dropping packets way

790
00:25:51,600 --> 00:25:57,360
ahead of line rate because you you need

791
00:25:54,240 --> 00:26:00,960
some buffer to handle a normal normal uh

792
00:25:57,360 --> 00:26:01,678
routing so here's when cueing is a good

793
00:26:00,960 --> 00:26:04,080
thing

794
00:26:01,679 --> 00:26:05,919
uh you really need it when you have

795
00:26:04,080 --> 00:26:07,600
mismatched interface speeds

796
00:26:05,919 --> 00:26:09,039
so remember that packets are actually

797
00:26:07,600 --> 00:26:09,600
going to serialize they're going to

798
00:26:09,039 --> 00:26:12,480
arrive

799
00:26:09,600 --> 00:26:13,918
faster so if you have a 100 gig uplink

800
00:26:12,480 --> 00:26:15,760
and a 10 gig down link

801
00:26:13,919 --> 00:26:17,760
that packet is physically going to come

802
00:26:15,760 --> 00:26:19,760
across the wire faster

803
00:26:17,760 --> 00:26:21,200
on the 100 gig length than it is on the

804
00:26:19,760 --> 00:26:21,919
10 so you're going to need to buffer

805
00:26:21,200 --> 00:26:24,559
that packet

806
00:26:21,919 --> 00:26:26,080
while you do that transmit uh you also

807
00:26:24,559 --> 00:26:28,000
see this come up when you have a lot of

808
00:26:26,080 --> 00:26:30,559
talkers so for example if you've got

809
00:26:28,000 --> 00:26:32,559
40 gig ports that are sending to a very

810
00:26:30,559 --> 00:26:35,039
small number of four by

811
00:26:32,559 --> 00:26:36,559
10 gig uplink ports you're gonna need

812
00:26:35,039 --> 00:26:38,960
more buffering

813
00:26:36,559 --> 00:26:40,960
and technically speaking queuing always

814
00:26:38,960 --> 00:26:42,000
increases throughput so if you think

815
00:26:40,960 --> 00:26:44,000
about it like this

816
00:26:42,000 --> 00:26:45,919
the longer you hold on to that packet

817
00:26:44,000 --> 00:26:46,799
the more opportunity you have to

818
00:26:45,919 --> 00:26:48,960
transmit it

819
00:26:46,799 --> 00:26:49,918
so then the question becomes how long

820
00:26:48,960 --> 00:26:52,480
should you hold it

821
00:26:49,919 --> 00:26:54,080
so if it cost you an extra two

822
00:26:52,480 --> 00:26:57,279
milliseconds to get from

823
00:26:54,080 --> 00:26:59,120
80 utilization to 90 utilization

824
00:26:57,279 --> 00:27:01,120
that might be worth it but if your

825
00:26:59,120 --> 00:27:01,918
application is very latency sensitive it

826
00:27:01,120 --> 00:27:04,320
might not be

827
00:27:01,919 --> 00:27:06,080
so what you typically see is people who

828
00:27:04,320 --> 00:27:07,918
are building qos

829
00:27:06,080 --> 00:27:09,279
they'll build different cue profiles and

830
00:27:07,919 --> 00:27:12,559
they would rather drop

831
00:27:09,279 --> 00:27:15,520
a packet early than hold on to it for

832
00:27:12,559 --> 00:27:17,200
10 20 30 milliseconds to get it through

833
00:27:15,520 --> 00:27:21,039
for a lot of interactive

834
00:27:17,200 --> 00:27:23,279
video and voice applications so

835
00:27:21,039 --> 00:27:24,399
when queuing is a bad thing is when the

836
00:27:23,279 --> 00:27:26,320
interface becomes

837
00:27:24,399 --> 00:27:28,399
more and more full the amount of time

838
00:27:26,320 --> 00:27:29,600
that you need to hold on to it increases

839
00:27:28,399 --> 00:27:31,120
exponentially

840
00:27:29,600 --> 00:27:33,520
so you like i said you might be able to

841
00:27:31,120 --> 00:27:36,000
successfully deliver that packet

842
00:27:33,520 --> 00:27:37,600
but you had to buffer it for 5000

843
00:27:36,000 --> 00:27:38,799
milliseconds to do it that's probably a

844
00:27:37,600 --> 00:27:40,240
bad thing

845
00:27:38,799 --> 00:27:41,760
it's probably not what your application

846
00:27:40,240 --> 00:27:43,679
wants so beyond a certain point it

847
00:27:41,760 --> 00:27:45,679
becomes very counterproductive

848
00:27:43,679 --> 00:27:47,440
uh so yeah like i said getting from 98

849
00:27:45,679 --> 00:27:49,360
to 98 utilization

850
00:27:47,440 --> 00:27:50,799
if you had to cue every packet by 5 000

851
00:27:49,360 --> 00:27:52,240
milliseconds to do it you probably don't

852
00:27:50,799 --> 00:27:54,559
want to do it so

853
00:27:52,240 --> 00:27:56,000
as a rule what what tends to be

854
00:27:54,559 --> 00:27:59,200
noticeable if you look at it

855
00:27:56,000 --> 00:28:00,080
on a one second average is most users

856
00:27:59,200 --> 00:28:02,960
start to notice

857
00:28:00,080 --> 00:28:04,240
a serious problem at around 95

858
00:28:02,960 --> 00:28:06,480
utilization so you

859
00:28:04,240 --> 00:28:08,399
you really want to keep it below that

860
00:28:06,480 --> 00:28:10,720
level because at that point it's it's

861
00:28:08,399 --> 00:28:12,559
become bad for everyone

862
00:28:10,720 --> 00:28:14,960
and most routers actually have very bad

863
00:28:12,559 --> 00:28:17,279
defaults for their interface cues too so

864
00:28:14,960 --> 00:28:19,039
if you search for the term buffer bloat

865
00:28:17,279 --> 00:28:19,919
there's a lot of other presentations

866
00:28:19,039 --> 00:28:22,080
that talk about this

867
00:28:19,919 --> 00:28:23,520
and what the default value should be and

868
00:28:22,080 --> 00:28:24,559
what values you might want to change it

869
00:28:23,520 --> 00:28:26,320
to

870
00:28:24,559 --> 00:28:28,480
so here's an example of kind of what

871
00:28:26,320 --> 00:28:31,039
that looks like

872
00:28:28,480 --> 00:28:31,520
the the actual latency and the actual

873
00:28:31,039 --> 00:28:33,520
curve

874
00:28:31,520 --> 00:28:35,120
varies depending on the interface speed

875
00:28:33,520 --> 00:28:37,918
and the packet type but this is

876
00:28:35,120 --> 00:28:40,479
this is pretty good example you see

877
00:28:37,919 --> 00:28:44,080
there's like extreme cliff as you get

878
00:28:40,480 --> 00:28:45,919
beyond 95 you you're queuing effectively

879
00:28:44,080 --> 00:28:48,559
becomes infinite as you approach 100

880
00:28:45,919 --> 00:28:49,520
so you you want to keep it at 90 or

881
00:28:48,559 --> 00:28:52,799
ideally 80

882
00:28:49,520 --> 00:28:55,918
or lower um across that that

883
00:28:52,799 --> 00:28:58,960
average to avoid impacting

884
00:28:55,919 --> 00:29:00,480
customers and avoid impacting traffic

885
00:28:58,960 --> 00:29:02,399
the next thing we look at is the

886
00:29:00,480 --> 00:29:03,840
propagation way so this is effectively

887
00:29:02,399 --> 00:29:06,879
if you think about it as the time

888
00:29:03,840 --> 00:29:09,360
spent on the wire so

889
00:29:06,880 --> 00:29:10,320
simple math a speed of light in a vacuum

890
00:29:09,360 --> 00:29:13,520
is about

891
00:29:10,320 --> 00:29:16,399
300 000 kilometers per second

892
00:29:13,520 --> 00:29:18,080
so if we look at that across fiber so

893
00:29:16,399 --> 00:29:21,279
fiber is actually made of glass

894
00:29:18,080 --> 00:29:24,480
and it has a refractive index of 1.48

895
00:29:21,279 --> 00:29:29,039
smf-28 so that means that light

896
00:29:24,480 --> 00:29:31,760
propagates across fiber at about 0.67 c

897
00:29:29,039 --> 00:29:32,399
so only about two thirds the speed of a

898
00:29:31,760 --> 00:29:35,120
vacuum

899
00:29:32,399 --> 00:29:37,039
or an rf signal uh when you transmit it

900
00:29:35,120 --> 00:29:40,719
across fiber it moves at about

901
00:29:37,039 --> 00:29:42,000
200 000 kilometers per second so 200 000

902
00:29:40,720 --> 00:29:45,279
kilometers per second

903
00:29:42,000 --> 00:29:47,520
is 200 kilometers per millisecond

904
00:29:45,279 --> 00:29:48,799
and then yeah then if you are looking at

905
00:29:47,520 --> 00:29:50,639
it the way that you look at it and trace

906
00:29:48,799 --> 00:29:53,679
it out you have to divide that in half

907
00:29:50,640 --> 00:29:54,000
to account for the round trip time so a

908
00:29:53,679 --> 00:29:56,320
good

909
00:29:54,000 --> 00:29:57,279
ballpark is that you should see one

910
00:29:56,320 --> 00:30:00,080
millisecond of

911
00:29:57,279 --> 00:30:00,640
round trip time propagation latency show

912
00:30:00,080 --> 00:30:04,559
up

913
00:30:00,640 --> 00:30:06,880
per 100 kilometers of fiber that

914
00:30:04,559 --> 00:30:09,039
you've spanned so as an example if you

915
00:30:06,880 --> 00:30:11,279
were to go all the way around the world

916
00:30:09,039 --> 00:30:12,720
at the equator all the way around and

917
00:30:11,279 --> 00:30:14,559
then come all the way back from a

918
00:30:12,720 --> 00:30:16,880
perfectly straight fiber out that would

919
00:30:14,559 --> 00:30:18,879
take about 400 milliseconds so

920
00:30:16,880 --> 00:30:21,520
it becomes pretty significant across

921
00:30:18,880 --> 00:30:23,760
large distances

922
00:30:21,520 --> 00:30:26,399
so now we need to identify if the

923
00:30:23,760 --> 00:30:28,399
latency is affecting us or not

924
00:30:26,399 --> 00:30:30,239
um so how do you determine if that's

925
00:30:28,399 --> 00:30:31,678
normal well we start by looking at the

926
00:30:30,240 --> 00:30:33,840
location identifiers

927
00:30:31,679 --> 00:30:36,000
uh so we have some idea of where these

928
00:30:33,840 --> 00:30:38,000
things are are geographically located

929
00:30:36,000 --> 00:30:39,360
and then we kind of see if it fits the

930
00:30:38,000 --> 00:30:42,159
expected profile

931
00:30:39,360 --> 00:30:43,439
so here's an example uh going from new

932
00:30:42,159 --> 00:30:46,760
york city to

933
00:30:43,440 --> 00:30:50,000
london uh and the total time is about

934
00:30:46,760 --> 00:30:53,120
67.6 milliseconds so you can

935
00:30:50,000 --> 00:30:54,960
go to any great circle tool and you can

936
00:30:53,120 --> 00:30:57,678
see that if it was a perfectly straight

937
00:30:54,960 --> 00:30:59,919
fiber path it would be about 3 500 miles

938
00:30:57,679 --> 00:31:01,919
which would be about 56 milliseconds if

939
00:30:59,919 --> 00:31:04,399
you were absolutely perfect

940
00:31:01,919 --> 00:31:06,080
we're actually running about 67 so that

941
00:31:04,399 --> 00:31:08,000
actually is pretty normal and if you

942
00:31:06,080 --> 00:31:09,199
you end up spending any amount of time

943
00:31:08,000 --> 00:31:11,279
with the cables you can look at it and

944
00:31:09,200 --> 00:31:12,960
go hmm that's ac1 you end up knowing

945
00:31:11,279 --> 00:31:15,679
what all the cable systems are

946
00:31:12,960 --> 00:31:17,360
by their propagation latency here's

947
00:31:15,679 --> 00:31:20,080
another example

948
00:31:17,360 --> 00:31:21,600
traffic is coming from a t and that's in

949
00:31:20,080 --> 00:31:24,320
washington dc

950
00:31:21,600 --> 00:31:25,039
uh and it goes to a cogent interface and

951
00:31:24,320 --> 00:31:27,279
that's also

952
00:31:25,039 --> 00:31:28,879
in washington dc so ied being dallas

953
00:31:27,279 --> 00:31:32,320
northern virginia

954
00:31:28,880 --> 00:31:35,840
and you see the the latency jump

955
00:31:32,320 --> 00:31:37,439
from 8 milliseconds to 228 milliseconds

956
00:31:35,840 --> 00:31:38,320
and you're washington dc to washington

957
00:31:37,440 --> 00:31:40,159
dc so

958
00:31:38,320 --> 00:31:41,519
is that normal absolutely not there's

959
00:31:40,159 --> 00:31:43,039
there's something we need to take a look

960
00:31:41,519 --> 00:31:44,320
at

961
00:31:43,039 --> 00:31:46,799
now we're going to talk about

962
00:31:44,320 --> 00:31:49,120
prioritization and rate

963
00:31:46,799 --> 00:31:51,039
so remember when i said at the beginning

964
00:31:49,120 --> 00:31:54,320
traceroute latency is the sum

965
00:31:51,039 --> 00:31:56,640
of the time required to get the packet

966
00:31:54,320 --> 00:31:58,639
to the hop you're looking at the time

967
00:31:56,640 --> 00:32:00,720
required for that router to drop the

968
00:31:58,640 --> 00:32:02,720
packet and to generate an icmp

969
00:32:00,720 --> 00:32:04,720
back to the source and then the time

970
00:32:02,720 --> 00:32:07,279
required for that icp to travel

971
00:32:04,720 --> 00:32:08,640
all the way back to the source so number

972
00:32:07,279 --> 00:32:10,640
one and number three

973
00:32:08,640 --> 00:32:12,080
come from real network characteristics

974
00:32:10,640 --> 00:32:14,240
these are things that are affecting

975
00:32:12,080 --> 00:32:15,120
every packet that you send but number

976
00:32:14,240 --> 00:32:16,799
two actually has

977
00:32:15,120 --> 00:32:18,639
nothing to do with forwarding conditions

978
00:32:16,799 --> 00:32:21,120
this is something that affects

979
00:32:18,640 --> 00:32:22,880
only your traceroute packets and there's

980
00:32:21,120 --> 00:32:24,320
a wide variety of conditions that can

981
00:32:22,880 --> 00:32:27,120
cause the routers to either

982
00:32:24,320 --> 00:32:28,480
not send the icmp packet creating

983
00:32:27,120 --> 00:32:30,719
artificial loss

984
00:32:28,480 --> 00:32:34,399
or to be slow in the generation of the

985
00:32:30,720 --> 00:32:36,720
icp and this causes artificial latency

986
00:32:34,399 --> 00:32:38,320
so what you really need to understand

987
00:32:36,720 --> 00:32:39,600
here is there's a big difference in

988
00:32:38,320 --> 00:32:42,720
routers between

989
00:32:39,600 --> 00:32:43,439
to it and through it so most modern

990
00:32:42,720 --> 00:32:46,080
routers

991
00:32:43,440 --> 00:32:48,080
have these distinct processing paths so

992
00:32:46,080 --> 00:32:50,080
we have what's called the control plane

993
00:32:48,080 --> 00:32:52,080
this is packets that are deliberately

994
00:32:50,080 --> 00:32:52,799
being forwarded to the router so for

995
00:32:52,080 --> 00:32:55,120
example

996
00:32:52,799 --> 00:32:58,559
your bgp protocol your is-is or your

997
00:32:55,120 --> 00:33:01,518
ospf your snmp or even your cli access

998
00:32:58,559 --> 00:33:03,360
your telnet and ssh of the device and

999
00:33:01,519 --> 00:33:06,399
any pings if you were to ping an

1000
00:33:03,360 --> 00:33:08,240
interface or send any packet to a local

1001
00:33:06,399 --> 00:33:10,158
ip address of the router that is going

1002
00:33:08,240 --> 00:33:11,679
to go to its control plane

1003
00:33:10,159 --> 00:33:13,360
then you have what's called the data

1004
00:33:11,679 --> 00:33:14,240
plane and this is for packets that are

1005
00:33:13,360 --> 00:33:17,199
being forwarded

1006
00:33:14,240 --> 00:33:18,080
through the router so inside of the data

1007
00:33:17,200 --> 00:33:20,000
plane you have

1008
00:33:18,080 --> 00:33:22,399
a fast path and a slow path the fast

1009
00:33:20,000 --> 00:33:23,760
path is something that is hardware

1010
00:33:22,399 --> 00:33:25,840
accelerated so

1011
00:33:23,760 --> 00:33:27,679
you've got asic based forwarding for

1012
00:33:25,840 --> 00:33:30,158
almost every packet under normal

1013
00:33:27,679 --> 00:33:32,399
conditions that you want to send

1014
00:33:30,159 --> 00:33:34,080
and then you have the slow path so this

1015
00:33:32,399 --> 00:33:35,600
is where you go outside of something

1016
00:33:34,080 --> 00:33:36,960
that can be handled by the asic and it

1017
00:33:35,600 --> 00:33:39,360
has to be processed by

1018
00:33:36,960 --> 00:33:40,559
software so these tend to be exception

1019
00:33:39,360 --> 00:33:43,039
packets so for example

1020
00:33:40,559 --> 00:33:44,240
ip options icmp generation which is the

1021
00:33:43,039 --> 00:33:46,799
one we care about

1022
00:33:44,240 --> 00:33:47,760
if you do any kind of logging any kind

1023
00:33:46,799 --> 00:33:50,320
of exception

1024
00:33:47,760 --> 00:33:53,200
to the normal rule can cause a packet to

1025
00:33:50,320 --> 00:33:55,600
be punted to the slow path processor

1026
00:33:53,200 --> 00:33:56,640
and the router cpus that are out there

1027
00:33:55,600 --> 00:33:59,519
it's it's they're

1028
00:33:56,640 --> 00:34:01,679
still absolutely deployed in this world

1029
00:33:59,519 --> 00:34:03,919
320 to 620

1030
00:34:01,679 --> 00:34:06,159
gigabit per second devices that have a

1031
00:34:03,919 --> 00:34:09,679
600 megahertz mips processor they're

1032
00:34:06,159 --> 00:34:11,440
very very slow and icp generation is not

1033
00:34:09,679 --> 00:34:13,760
a priority for your router so

1034
00:34:11,440 --> 00:34:15,119
this is where you tend to see false

1035
00:34:13,760 --> 00:34:17,040
things pop up

1036
00:34:15,119 --> 00:34:19,599
so on a lot of platforms that are out

1037
00:34:17,040 --> 00:34:22,079
there especially legacy platforms

1038
00:34:19,599 --> 00:34:22,800
what you have is the slow path data

1039
00:34:22,079 --> 00:34:24,800
plane

1040
00:34:22,800 --> 00:34:26,800
and the control plane actually share the

1041
00:34:24,800 --> 00:34:30,000
exact same resource

1042
00:34:26,800 --> 00:34:31,760
so historically what's happened is

1043
00:34:30,000 --> 00:34:33,918
especially if you look at older ios

1044
00:34:31,760 --> 00:34:35,280
devices they haven't had the best

1045
00:34:33,918 --> 00:34:36,960
software they haven't had the best

1046
00:34:35,280 --> 00:34:38,960
process scheduler so they're not very

1047
00:34:36,960 --> 00:34:40,480
precise in how they switch back and

1048
00:34:38,960 --> 00:34:44,159
forth between process

1049
00:34:40,480 --> 00:34:46,240
so what you would see is if you have bgp

1050
00:34:44,159 --> 00:34:48,399
terms so for example you flap a bgp

1051
00:34:46,239 --> 00:34:51,199
session or you bring up a new session

1052
00:34:48,399 --> 00:34:52,879
or you use cli so you you run a command

1053
00:34:51,199 --> 00:34:54,319
that takes a lot of resources and

1054
00:34:52,879 --> 00:34:56,560
generates a lot of output

1055
00:34:54,320 --> 00:34:58,640
this can slow the generation of your

1056
00:34:56,560 --> 00:35:00,799
icmp ttl exceeds

1057
00:34:58,640 --> 00:35:02,640
and this will result in random spikes in

1058
00:35:00,800 --> 00:35:04,560
traceroute latency that can often be

1059
00:35:02,640 --> 00:35:07,118
misinterpreted as a network issue

1060
00:35:04,560 --> 00:35:09,200
so a really famous example of this was

1061
00:35:07,119 --> 00:35:11,040
classic cisco ios

1062
00:35:09,200 --> 00:35:12,720
there was a process called bgp scanner

1063
00:35:11,040 --> 00:35:14,000
that would run every 60 seconds it would

1064
00:35:12,720 --> 00:35:15,118
walk the entire table

1065
00:35:14,000 --> 00:35:17,440
just checking to make sure everything

1066
00:35:15,119 --> 00:35:20,000
was normal and when it would do this

1067
00:35:17,440 --> 00:35:22,800
it would cause these periodic spikes and

1068
00:35:20,000 --> 00:35:24,720
traceroute performance

1069
00:35:22,800 --> 00:35:27,280
so the other thing you have to worry

1070
00:35:24,720 --> 00:35:29,839
about is rate limits so remember

1071
00:35:27,280 --> 00:35:31,200
that icmp generation through the slow

1072
00:35:29,839 --> 00:35:33,520
path data plane

1073
00:35:31,200 --> 00:35:34,640
there's a lot of reasons that icmp

1074
00:35:33,520 --> 00:35:39,200
generation could occur

1075
00:35:34,640 --> 00:35:39,200
so for example it could be

1076
00:35:39,280 --> 00:35:43,520
a routing loop if someone sets a variety

1077
00:35:41,599 --> 00:35:46,160
loop that's going to cause a huge flood

1078
00:35:43,520 --> 00:35:48,240
of ttl0 icp generation

1079
00:35:46,160 --> 00:35:50,078
so you wouldn't want your device to fall

1080
00:35:48,240 --> 00:35:50,879
over in the case of a routing loop you

1081
00:35:50,079 --> 00:35:53,520
would want it to

1082
00:35:50,880 --> 00:35:55,119
rate limit its ttl generation and stop

1083
00:35:53,520 --> 00:35:56,800
when it when it hits a certain point

1084
00:35:55,119 --> 00:35:58,560
that it would be problematic

1085
00:35:56,800 --> 00:36:01,119
so what tends to happen is there's

1086
00:35:58,560 --> 00:36:02,960
there's not really any commercial router

1087
00:36:01,119 --> 00:36:04,079
with a hardware assisted traceroute

1088
00:36:02,960 --> 00:36:07,599
function

1089
00:36:04,079 --> 00:36:09,680
it falls back to the general purpose cpu

1090
00:36:07,599 --> 00:36:11,200
and there's a rate limit on that the

1091
00:36:09,680 --> 00:36:13,839
really tricky part is

1092
00:36:11,200 --> 00:36:14,560
the rate limits vary wildly not only by

1093
00:36:13,839 --> 00:36:17,599
vendor

1094
00:36:14,560 --> 00:36:19,359
by platform by software revision by

1095
00:36:17,599 --> 00:36:20,640
different types of hardware revisions so

1096
00:36:19,359 --> 00:36:22,078
you might have one line card that

1097
00:36:20,640 --> 00:36:23,598
performs differently than a different

1098
00:36:22,079 --> 00:36:25,599
line card

1099
00:36:23,599 --> 00:36:26,800
and these are often not configurable and

1100
00:36:25,599 --> 00:36:29,520
not locked

1101
00:36:26,800 --> 00:36:30,960
so all it takes is a few users running a

1102
00:36:29,520 --> 00:36:33,040
tool called mtr

1103
00:36:30,960 --> 00:36:34,800
that just runs a lot of a lot of

1104
00:36:33,040 --> 00:36:36,000
traceroute over and over all it takes is

1105
00:36:34,800 --> 00:36:38,960
a few users

1106
00:36:36,000 --> 00:36:40,800
to really hit that limit and cause all

1107
00:36:38,960 --> 00:36:43,839
kinds of drops

1108
00:36:40,800 --> 00:36:45,359
so how do you know if it's cosmetic loss

1109
00:36:43,839 --> 00:36:48,560
or latency or how do you know

1110
00:36:45,359 --> 00:36:50,720
if it's a real issue well the trick is

1111
00:36:48,560 --> 00:36:52,880
if there's an actual forwarding issue

1112
00:36:50,720 --> 00:36:53,520
the loss or latency is going to persist

1113
00:36:52,880 --> 00:36:56,320
across

1114
00:36:53,520 --> 00:36:56,960
all future packets so here's an example

1115
00:36:56,320 --> 00:36:58,960
where we

1116
00:36:56,960 --> 00:37:00,720
we see you know zero point some

1117
00:36:58,960 --> 00:37:02,000
milliseconds and we go up to 18

1118
00:37:00,720 --> 00:37:04,879
milliseconds

1119
00:37:02,000 --> 00:37:06,480
uh to go from dc to chicago so that's a

1120
00:37:04,880 --> 00:37:08,960
that's a normal hybrid path

1121
00:37:06,480 --> 00:37:11,359
and then we go to 53 milliseconds to go

1122
00:37:08,960 --> 00:37:15,119
from chicago to salt lake city

1123
00:37:11,359 --> 00:37:16,160
so on hop 2 we see this this jump to 68

1124
00:37:15,119 --> 00:37:18,160
milliseconds

1125
00:37:16,160 --> 00:37:19,279
and you might naively look at that and

1126
00:37:18,160 --> 00:37:20,720
think well there's something wrong

1127
00:37:19,280 --> 00:37:21,520
there's there's something congested or

1128
00:37:20,720 --> 00:37:24,879
some

1129
00:37:21,520 --> 00:37:26,720
number of packets occasionally uh are

1130
00:37:24,880 --> 00:37:28,800
are being queued or there's some kind of

1131
00:37:26,720 --> 00:37:29,839
an issue but it turns out that if you

1132
00:37:28,800 --> 00:37:32,000
look at hop three

1133
00:37:29,839 --> 00:37:33,440
you see that that issue didn't persist

1134
00:37:32,000 --> 00:37:35,200
it didn't carry forward

1135
00:37:33,440 --> 00:37:36,880
into the next hot well that means the

1136
00:37:35,200 --> 00:37:38,160
issue was cosmetic that means it was

1137
00:37:36,880 --> 00:37:42,079
caused by

1138
00:37:38,160 --> 00:37:44,399
the icmp generation function of hot 2.

1139
00:37:42,079 --> 00:37:45,359
so latency spikes in the middle of a

1140
00:37:44,400 --> 00:37:46,960
traceroute mean

1141
00:37:45,359 --> 00:37:48,799
absolutely nothing if they don't

1142
00:37:46,960 --> 00:37:50,320
continue forward that's

1143
00:37:48,800 --> 00:37:51,920
first thing to tell people when they

1144
00:37:50,320 --> 00:37:54,560
look at a tracer out

1145
00:37:51,920 --> 00:37:56,000
um at worst it could be the result of an

1146
00:37:54,560 --> 00:37:58,560
asymmetric path it could be

1147
00:37:56,000 --> 00:38:00,160
a an ac asymmetric path combined with

1148
00:37:58,560 --> 00:38:01,200
multi-path we'll talk more about that in

1149
00:38:00,160 --> 00:38:03,598
a minute but

1150
00:38:01,200 --> 00:38:05,520
uh more often than not this is an

1151
00:38:03,599 --> 00:38:08,079
indication of an artificial rate limit

1152
00:38:05,520 --> 00:38:10,720
or a prioritization issue

1153
00:38:08,079 --> 00:38:13,280
so a good way to test that might be to

1154
00:38:10,720 --> 00:38:14,240
try something that's not ttl expiring so

1155
00:38:13,280 --> 00:38:16,880
for example

1156
00:38:14,240 --> 00:38:17,439
ping that router interface that shows up

1157
00:38:16,880 --> 00:38:20,560
and

1158
00:38:17,440 --> 00:38:22,720
see if you see the same issue

1159
00:38:20,560 --> 00:38:24,078
because you fall into a different kind

1160
00:38:22,720 --> 00:38:26,799
of a rate limit

1161
00:38:24,079 --> 00:38:28,480
uh with that ping directly to our router

1162
00:38:26,800 --> 00:38:29,760
interface and some people will allow

1163
00:38:28,480 --> 00:38:32,880
that in their filters

1164
00:38:29,760 --> 00:38:34,400
and some some networks won't so now

1165
00:38:32,880 --> 00:38:35,359
we're going to talk about asymmetric

1166
00:38:34,400 --> 00:38:38,000
paths

1167
00:38:35,359 --> 00:38:40,319
so remember what i showed you before

1168
00:38:38,000 --> 00:38:41,119
traceroute only shows you the forward

1169
00:38:40,320 --> 00:38:44,160
path

1170
00:38:41,119 --> 00:38:45,440
but half at least half of the time that

1171
00:38:44,160 --> 00:38:48,640
you're seeing

1172
00:38:45,440 --> 00:38:50,880
is composed of the return path and

1173
00:38:48,640 --> 00:38:53,200
it's completely invisible we we don't

1174
00:38:50,880 --> 00:38:56,720
see it but that's contributing at least

1175
00:38:53,200 --> 00:38:58,640
half of or right about half of the

1176
00:38:56,720 --> 00:39:00,000
the total round trip time that we're

1177
00:38:58,640 --> 00:39:02,160
looking at

1178
00:39:00,000 --> 00:39:03,680
so not only is this path hidden but

1179
00:39:02,160 --> 00:39:05,759
there's no guarantee

1180
00:39:03,680 --> 00:39:06,879
that it is the same path as the forward

1181
00:39:05,760 --> 00:39:09,839
path and in fact

1182
00:39:06,880 --> 00:39:11,280
in a lot of major networks it's pretty

1183
00:39:09,839 --> 00:39:11,920
much a guarantee that it's not going to

1184
00:39:11,280 --> 00:39:13,839
be

1185
00:39:11,920 --> 00:39:16,079
the same path so the only way to

1186
00:39:13,839 --> 00:39:18,160
confidently analyze a tracer out

1187
00:39:16,079 --> 00:39:19,280
is to have trace routes in both

1188
00:39:18,160 --> 00:39:21,359
directions

1189
00:39:19,280 --> 00:39:22,960
and even then you can't catch all of the

1190
00:39:21,359 --> 00:39:24,720
asymmetric paths that are out there but

1191
00:39:22,960 --> 00:39:25,760
that that does a really good job of

1192
00:39:24,720 --> 00:39:28,399
eliminating

1193
00:39:25,760 --> 00:39:30,880
the first level of just blatant bad

1194
00:39:28,400 --> 00:39:33,280
misinterpreted things

1195
00:39:30,880 --> 00:39:34,880
so another thing you care about is

1196
00:39:33,280 --> 00:39:37,599
asymmetric paths

1197
00:39:34,880 --> 00:39:39,440
and how they hit network boundaries and

1198
00:39:37,599 --> 00:39:40,800
why do we care about network boundaries

1199
00:39:39,440 --> 00:39:43,040
because like i said before

1200
00:39:40,800 --> 00:39:44,000
that's where the administrative policies

1201
00:39:43,040 --> 00:39:47,119
change

1202
00:39:44,000 --> 00:39:49,920
so here's an example where between

1203
00:39:47,119 --> 00:39:50,880
dca so that's a washington dc area

1204
00:39:49,920 --> 00:39:52,800
router and

1205
00:39:50,880 --> 00:39:55,280
ash so that's ashburn virginia that's

1206
00:39:52,800 --> 00:39:57,520
another washington dc area router

1207
00:39:55,280 --> 00:39:59,280
we see the latency jump up to 100

1208
00:39:57,520 --> 00:40:00,000
milliseconds and you you look at that

1209
00:39:59,280 --> 00:40:02,880
and you say

1210
00:40:00,000 --> 00:40:04,240
well what's wrong with this path so it

1211
00:40:02,880 --> 00:40:07,040
could be congestion

1212
00:40:04,240 --> 00:40:07,919
but congestion tends not to be so

1213
00:40:07,040 --> 00:40:10,880
precise

1214
00:40:07,920 --> 00:40:11,599
you see how it stays almost exactly 100

1215
00:40:10,880 --> 00:40:13,760
milliseconds

1216
00:40:11,599 --> 00:40:15,760
all the way through congestion tends to

1217
00:40:13,760 --> 00:40:18,079
be a lot more random than that

1218
00:40:15,760 --> 00:40:19,440
uh it could be an asymmetric reverse

1219
00:40:18,079 --> 00:40:22,079
path

1220
00:40:19,440 --> 00:40:24,240
so at this particular boundary the

1221
00:40:22,079 --> 00:40:26,240
reverse path policy changes

1222
00:40:24,240 --> 00:40:27,520
and where you really see this come into

1223
00:40:26,240 --> 00:40:30,078
play is in multi-home

1224
00:40:27,520 --> 00:40:32,160
networks so for example the network that

1225
00:40:30,079 --> 00:40:34,240
was sending this original packet

1226
00:40:32,160 --> 00:40:35,520
wasn't single home to global crossing it

1227
00:40:34,240 --> 00:40:37,839
was multi-homed

1228
00:40:35,520 --> 00:40:39,920
so as soon as the packet crossed the

1229
00:40:37,839 --> 00:40:41,920
border as soon as it hit sprint

1230
00:40:39,920 --> 00:40:43,359
sprint now looked at it and said well

1231
00:40:41,920 --> 00:40:44,160
what's the path that i prefer and it

1232
00:40:43,359 --> 00:40:46,640
preferred a

1233
00:40:44,160 --> 00:40:48,399
non-global crossing path so it preferred

1234
00:40:46,640 --> 00:40:49,598
a completely different path that we

1235
00:40:48,400 --> 00:40:51,440
don't see here

1236
00:40:49,599 --> 00:40:52,880
and that's the cause of the latency but

1237
00:40:51,440 --> 00:40:56,160
it's invisible to us

1238
00:40:52,880 --> 00:40:57,680
from only this route so there's some

1239
00:40:56,160 --> 00:40:59,920
tricks you can use

1240
00:40:57,680 --> 00:41:01,118
you can use source addressings to kind

1241
00:40:59,920 --> 00:41:03,839
of trick around

1242
00:41:01,119 --> 00:41:04,880
the asymmetric path issue so in our

1243
00:41:03,839 --> 00:41:06,960
previous example

1244
00:41:04,880 --> 00:41:08,480
let's assume that you're the the end

1245
00:41:06,960 --> 00:41:10,000
user you're sending that traffic and

1246
00:41:08,480 --> 00:41:12,560
you're multi-home to

1247
00:41:10,000 --> 00:41:14,079
global crossing and level three so

1248
00:41:12,560 --> 00:41:15,279
obviously global crossing reaches you

1249
00:41:14,079 --> 00:41:17,119
via global crossing

1250
00:41:15,280 --> 00:41:18,480
but in this example what happened was

1251
00:41:17,119 --> 00:41:21,520
sprint came back to you

1252
00:41:18,480 --> 00:41:24,240
via level three uh so

1253
00:41:21,520 --> 00:41:25,040
the only way to know what the problem is

1254
00:41:24,240 --> 00:41:27,200
assuming

1255
00:41:25,040 --> 00:41:28,960
if you had a person on the other end and

1256
00:41:27,200 --> 00:41:30,319
you could run a reverse tracer out

1257
00:41:28,960 --> 00:41:31,839
and look at it on the other end that

1258
00:41:30,319 --> 00:41:32,400
would be great but assuming you don't

1259
00:41:31,839 --> 00:41:35,759
have that

1260
00:41:32,400 --> 00:41:37,520
so here's some tricks you can use if you

1261
00:41:35,760 --> 00:41:38,480
ran a tracer out from your network

1262
00:41:37,520 --> 00:41:41,520
device and you

1263
00:41:38,480 --> 00:41:44,319
sourced the packet from

1264
00:41:41,520 --> 00:41:46,240
your side of the global crossing issued

1265
00:41:44,319 --> 00:41:47,599
30. so they've issued you for

1266
00:41:46,240 --> 00:41:49,680
interconnection purposes

1267
00:41:47,599 --> 00:41:50,640
they slash 30 out of their ip space

1268
00:41:49,680 --> 00:41:53,680
that's going to follow

1269
00:41:50,640 --> 00:41:55,440
their routing policies so now you see

1270
00:41:53,680 --> 00:41:56,640
that when you run that tracer outsourced

1271
00:41:55,440 --> 00:41:59,119
from global crossing

1272
00:41:56,640 --> 00:42:00,078
it doesn't persist it tells you

1273
00:41:59,119 --> 00:42:02,079
something about

1274
00:42:00,079 --> 00:42:03,119
the reverse path it tells you that it

1275
00:42:02,079 --> 00:42:04,560
wasn't coming

1276
00:42:03,119 --> 00:42:07,280
through global crossing it was how

1277
00:42:04,560 --> 00:42:09,920
sprint reaches you back via level three

1278
00:42:07,280 --> 00:42:11,280
and this kind of trial and error method

1279
00:42:09,920 --> 00:42:14,960
is what you can use

1280
00:42:11,280 --> 00:42:17,520
to eliminate a lot of issues

1281
00:42:14,960 --> 00:42:19,280
so here's an example of what happens

1282
00:42:17,520 --> 00:42:19,839
with asymmetric paths with multiple

1283
00:42:19,280 --> 00:42:22,240
exits

1284
00:42:19,839 --> 00:42:22,880
so remember asymmetric paths can and

1285
00:42:22,240 --> 00:42:26,319
usually do

1286
00:42:22,880 --> 00:42:28,480
happen anywhere here's an example of

1287
00:42:26,319 --> 00:42:30,160
a network that interconnects to another

1288
00:42:28,480 --> 00:42:31,760
network in three places and this is

1289
00:42:30,160 --> 00:42:33,359
about as simple as it can get

1290
00:42:31,760 --> 00:42:35,200
because most networks interconnected

1291
00:42:33,359 --> 00:42:37,759
large networks interconnected dozens and

1292
00:42:35,200 --> 00:42:40,640
dozens of places all around the world

1293
00:42:37,760 --> 00:42:42,160
but so hop one we send our packet and

1294
00:42:40,640 --> 00:42:44,480
it's going

1295
00:42:42,160 --> 00:42:46,240
directly across our washington dc to our

1296
00:42:44,480 --> 00:42:47,599
washington dc interconnection so it's

1297
00:42:46,240 --> 00:42:48,319
pretty straightforward we know what it

1298
00:42:47,599 --> 00:42:52,079
is

1299
00:42:48,319 --> 00:42:52,480
hop 2 uh goes all the way out to chicago

1300
00:42:52,079 --> 00:42:54,400
so

1301
00:42:52,480 --> 00:42:56,079
now when it sends it back it doesn't

1302
00:42:54,400 --> 00:42:57,839
come back via the

1303
00:42:56,079 --> 00:42:59,440
the same path that it went at all it

1304
00:42:57,839 --> 00:43:02,560
comes back via

1305
00:42:59,440 --> 00:43:04,960
a hot potato to the the network

1306
00:43:02,560 --> 00:43:05,839
and then back via its return path in the

1307
00:43:04,960 --> 00:43:07,599
top three

1308
00:43:05,839 --> 00:43:09,680
we see that it's changed again because

1309
00:43:07,599 --> 00:43:11,440
it goes all the way out to san jose

1310
00:43:09,680 --> 00:43:12,720
now it comes back via the san jose

1311
00:43:11,440 --> 00:43:15,839
interconnection so

1312
00:43:12,720 --> 00:43:19,118
you typically see this whenever

1313
00:43:15,839 --> 00:43:22,000
there's a multi-homes multi-peer

1314
00:43:19,119 --> 00:43:24,319
network most networks use what's called

1315
00:43:22,000 --> 00:43:25,839
closest exit or hot potato routing

1316
00:43:24,319 --> 00:43:28,079
so you're going to see this kind of

1317
00:43:25,839 --> 00:43:32,000
asymmetric path every time you

1318
00:43:28,079 --> 00:43:34,240
you cross those boundaries

1319
00:43:32,000 --> 00:43:35,599
so what happens if the slash 30 is

1320
00:43:34,240 --> 00:43:37,520
numbered out of myspace

1321
00:43:35,599 --> 00:43:39,359
uh so in the case you're a customer or

1322
00:43:37,520 --> 00:43:42,960
potentially a peer

1323
00:43:39,359 --> 00:43:42,960
you can still benefit

1324
00:43:43,119 --> 00:43:46,480
from setting source addresses so

1325
00:43:45,040 --> 00:43:48,079
consider that

1326
00:43:46,480 --> 00:43:49,839
you're trying to examine the reverse

1327
00:43:48,079 --> 00:43:52,000
path of a peer who you have multiple

1328
00:43:49,839 --> 00:43:55,119
interconnection points with you can set

1329
00:43:52,000 --> 00:43:56,960
the tracer outsource to your ip address

1330
00:43:55,119 --> 00:43:58,160
such as your loopback and then you can

1331
00:43:56,960 --> 00:44:01,200
set it to

1332
00:43:58,160 --> 00:44:02,879
the slash 30. and what you'll see in a

1333
00:44:01,200 --> 00:44:05,759
lot of networks that are out there

1334
00:44:02,880 --> 00:44:07,359
is they carry those 30s they carry that

1335
00:44:05,760 --> 00:44:10,640
either in their igp

1336
00:44:07,359 --> 00:44:12,560
or in bgp preference higher such that

1337
00:44:10,640 --> 00:44:15,118
that will trump the normal

1338
00:44:12,560 --> 00:44:16,799
interconnection policy so you can see

1339
00:44:15,119 --> 00:44:18,880
if the traffic comes back over their

1340
00:44:16,800 --> 00:44:19,280
backbone versus the interconnection

1341
00:44:18,880 --> 00:44:21,359
point

1342
00:44:19,280 --> 00:44:23,040
and the other networks back mode it can

1343
00:44:21,359 --> 00:44:25,200
give you different viewpoints and

1344
00:44:23,040 --> 00:44:26,640
really what you're trying to do is come

1345
00:44:25,200 --> 00:44:27,680
at it from many different viewpoints

1346
00:44:26,640 --> 00:44:31,680
until you eventually

1347
00:44:27,680 --> 00:44:33,040
find the the cause of the problem

1348
00:44:31,680 --> 00:44:35,440
another thing to keep in mind when

1349
00:44:33,040 --> 00:44:37,279
tracerouting from a router is that most

1350
00:44:35,440 --> 00:44:38,560
routers default to using the source

1351
00:44:37,280 --> 00:44:40,960
address of the

1352
00:44:38,560 --> 00:44:41,839
egress interface so it's where the probe

1353
00:44:40,960 --> 00:44:43,920
leaves from

1354
00:44:41,839 --> 00:44:45,040
and that may or may not be what you want

1355
00:44:43,920 --> 00:44:46,560
to see so

1356
00:44:45,040 --> 00:44:48,240
for some platforms there is a

1357
00:44:46,560 --> 00:44:48,799
configuration that you can set so for

1358
00:44:48,240 --> 00:44:51,040
example

1359
00:44:48,800 --> 00:44:52,720
you can set system default address

1360
00:44:51,040 --> 00:44:54,880
selection and then it'll make it source

1361
00:44:52,720 --> 00:44:56,319
from the loopback always

1362
00:44:54,880 --> 00:44:57,920
but you you can play around with this

1363
00:44:56,319 --> 00:44:59,839
you can set traceroute source and you

1364
00:44:57,920 --> 00:45:01,440
can use that to narrow down what you

1365
00:44:59,839 --> 00:45:03,119
want to see

1366
00:45:01,440 --> 00:45:04,800
so now i'm going to talk a little bit

1367
00:45:03,119 --> 00:45:08,240
about multiple paths

1368
00:45:04,800 --> 00:45:11,280
and load balancing so remember

1369
00:45:08,240 --> 00:45:14,560
every probe is an independent trial

1370
00:45:11,280 --> 00:45:17,920
so if you are using udp

1371
00:45:14,560 --> 00:45:20,240
or tcp what's happening typically is the

1372
00:45:17,920 --> 00:45:22,240
port the source and the destination port

1373
00:45:20,240 --> 00:45:23,439
are being incremented as you move

1374
00:45:22,240 --> 00:45:25,359
through the network

1375
00:45:23,440 --> 00:45:27,680
and they will use this information to

1376
00:45:25,359 --> 00:45:30,799
identify which probe was which

1377
00:45:27,680 --> 00:45:32,640
so what happens in a lot of ecmp equal

1378
00:45:30,800 --> 00:45:34,079
calls multi-path setups where you're

1379
00:45:32,640 --> 00:45:35,680
trying to improve

1380
00:45:34,079 --> 00:45:37,760
performance of the hash by looking at

1381
00:45:35,680 --> 00:45:39,680
layer 4 data is that will

1382
00:45:37,760 --> 00:45:41,040
force it to take a different path so

1383
00:45:39,680 --> 00:45:43,759
here's an example

1384
00:45:41,040 --> 00:45:45,759
where you see ecmp all the way through

1385
00:45:43,760 --> 00:45:46,800
so here's a pair of routers a bb-1 and a

1386
00:45:45,760 --> 00:45:49,280
bb2

1387
00:45:46,800 --> 00:45:50,880
right next to each other and they go to

1388
00:45:49,280 --> 00:45:51,359
another pair of routers they go from

1389
00:45:50,880 --> 00:45:54,240
london

1390
00:45:51,359 --> 00:45:56,880
to another pair of routers to another

1391
00:45:54,240 --> 00:45:59,040
pair of routers

1392
00:45:56,880 --> 00:46:00,560
but i guess that eighth hop isn't uh but

1393
00:45:59,040 --> 00:46:02,560
it's it's actually the same device

1394
00:46:00,560 --> 00:46:05,279
that's come over different links

1395
00:46:02,560 --> 00:46:07,359
um of these three probes two go over one

1396
00:46:05,280 --> 00:46:09,920
path one goes over the other so

1397
00:46:07,359 --> 00:46:11,279
how do you you know what you're looking

1398
00:46:09,920 --> 00:46:13,440
for when you see that so

1399
00:46:11,280 --> 00:46:16,400
here's a here's an example of a slightly

1400
00:46:13,440 --> 00:46:20,240
more complex issue

1401
00:46:16,400 --> 00:46:21,599
this is ecmp between two parallel but

1402
00:46:20,240 --> 00:46:24,000
different paths so

1403
00:46:21,599 --> 00:46:24,640
one path is ashburton to new york to

1404
00:46:24,000 --> 00:46:27,119
seattle

1405
00:46:24,640 --> 00:46:28,160
and the other path is ashburn to chicago

1406
00:46:27,119 --> 00:46:31,119
to seattle

1407
00:46:28,160 --> 00:46:32,078
so it's completely harmless but if you

1408
00:46:31,119 --> 00:46:33,680
were to look at that

1409
00:46:32,079 --> 00:46:35,599
not knowing what's going on you might

1410
00:46:33,680 --> 00:46:37,200
think well how did the packet go from

1411
00:46:35,599 --> 00:46:40,480
ashburn to new york to chicago

1412
00:46:37,200 --> 00:46:42,480
to seattle and that may or may not be

1413
00:46:40,480 --> 00:46:44,400
what's actually happening

1414
00:46:42,480 --> 00:46:46,480
so the most confusing scenario the one

1415
00:46:44,400 --> 00:46:48,480
that trips people up the most

1416
00:46:46,480 --> 00:46:50,319
is when you have multiple paths that are

1417
00:46:48,480 --> 00:46:53,520
of unequal length

1418
00:46:50,319 --> 00:46:54,960
so in this example abcde is your

1419
00:46:53,520 --> 00:46:58,000
forwarding path

1420
00:46:54,960 --> 00:47:01,839
but another equal cost path is from a

1421
00:46:58,000 --> 00:47:04,880
to x to b so what you end up having

1422
00:47:01,839 --> 00:47:08,640
is something that looks like b x b c b

1423
00:47:04,880 --> 00:47:09,200
c d c d and it looks like at every level

1424
00:47:08,640 --> 00:47:12,720
that it's

1425
00:47:09,200 --> 00:47:15,200
jumping back and forth so when in doubt

1426
00:47:12,720 --> 00:47:18,000
the really easy way to work around that

1427
00:47:15,200 --> 00:47:20,799
is just to send one probe so for example

1428
00:47:18,000 --> 00:47:21,599
your your basic unix implementation it's

1429
00:47:20,800 --> 00:47:25,520
going to be dash

1430
00:47:21,599 --> 00:47:26,720
q1 um junos for whatever reason the last

1431
00:47:25,520 --> 00:47:28,640
time i wrote the slide

1432
00:47:26,720 --> 00:47:31,200
lacked that but you could do it from cli

1433
00:47:28,640 --> 00:47:33,520
from the unix shell

1434
00:47:31,200 --> 00:47:35,279
that gets you one particular path so you

1435
00:47:33,520 --> 00:47:36,000
know that all the way through from one

1436
00:47:35,280 --> 00:47:40,160
to the other

1437
00:47:36,000 --> 00:47:42,240
you're looking at one ecmp path um

1438
00:47:40,160 --> 00:47:44,160
but be aware that it might not be the

1439
00:47:42,240 --> 00:47:45,919
path over which your actual traffic is

1440
00:47:44,160 --> 00:47:49,520
forwarding

1441
00:47:45,920 --> 00:47:52,640
um let's see another issue

1442
00:47:49,520 --> 00:47:56,240
is mpls and traceroute

1443
00:47:52,640 --> 00:47:57,520
so many large networks operate an mpls

1444
00:47:56,240 --> 00:47:58,479
based core it's pretty much a

1445
00:47:57,520 --> 00:48:01,520
requirement

1446
00:47:58,480 --> 00:48:03,680
for major networks of some form to

1447
00:48:01,520 --> 00:48:06,800
run mpls to do traffic engineering to do

1448
00:48:03,680 --> 00:48:08,558
things that a simple ip network can

1449
00:48:06,800 --> 00:48:10,559
uh and in a lot of cases what you'll

1450
00:48:08,559 --> 00:48:13,440
find is that some of those core networks

1451
00:48:10,559 --> 00:48:16,079
don't even carry an ip routing table

1452
00:48:13,440 --> 00:48:18,079
so that's fine for all the packets that

1453
00:48:16,079 --> 00:48:20,160
are switched through mpls

1454
00:48:18,079 --> 00:48:22,079
but it presents a real problem when you

1455
00:48:20,160 --> 00:48:25,359
need to generate icmp

1456
00:48:22,079 --> 00:48:28,400
so how does an mpls only router

1457
00:48:25,359 --> 00:48:29,920
deliver an icmp message so

1458
00:48:28,400 --> 00:48:31,520
one of the solutions that's been

1459
00:48:29,920 --> 00:48:32,559
implemented is something called icp

1460
00:48:31,520 --> 00:48:35,119
tunneling so

1461
00:48:32,559 --> 00:48:36,960
what happens here is if your device ends

1462
00:48:35,119 --> 00:48:38,079
up generating an icmp packet for

1463
00:48:36,960 --> 00:48:40,240
whatever reason

1464
00:48:38,079 --> 00:48:42,160
that packet gets put back inside the

1465
00:48:40,240 --> 00:48:45,359
same lsp that it used

1466
00:48:42,160 --> 00:48:46,799
that it was going on originally and that

1467
00:48:45,359 --> 00:48:48,400
works for delivering the message but it

1468
00:48:46,800 --> 00:48:51,040
makes the traceroute look really

1469
00:48:48,400 --> 00:48:52,559
weird so here's an example throw out

1470
00:48:51,040 --> 00:48:53,599
everything that we talked about before

1471
00:48:52,559 --> 00:48:57,119
about how

1472
00:48:53,599 --> 00:49:00,480
it comes back from hops1234

1473
00:48:57,119 --> 00:49:02,400
and now as it's generating a packet from

1474
00:49:00,480 --> 00:49:04,240
router 1 and from pat router 2 and from

1475
00:49:02,400 --> 00:49:05,920
router 3 and from router 4

1476
00:49:04,240 --> 00:49:07,359
every single one of those things gets

1477
00:49:05,920 --> 00:49:10,319
carried to router 4

1478
00:49:07,359 --> 00:49:10,880
before coming back to you and if you

1479
00:49:10,319 --> 00:49:13,279
don't

1480
00:49:10,880 --> 00:49:14,480
hide the hops in the side of mpls if you

1481
00:49:13,280 --> 00:49:17,119
expose the hops

1482
00:49:14,480 --> 00:49:17,839
but you use ictp talent what it does is

1483
00:49:17,119 --> 00:49:20,640
it makes

1484
00:49:17,839 --> 00:49:23,359
every hop along the path because it have

1485
00:49:20,640 --> 00:49:26,799
the same latency as the the endpoint

1486
00:49:23,359 --> 00:49:27,119
so here's an example of that across atm

1487
00:49:26,800 --> 00:49:29,520
t

1488
00:49:27,119 --> 00:49:30,319
so we're going from san francisco

1489
00:49:29,520 --> 00:49:33,599
through chicago

1490
00:49:30,319 --> 00:49:35,040
to new york uh but if you were

1491
00:49:33,599 --> 00:49:36,640
naive and you were just looking at this

1492
00:49:35,040 --> 00:49:39,119
going well how does it

1493
00:49:36,640 --> 00:49:40,480
jump from three milliseconds to 74

1494
00:49:39,119 --> 00:49:42,839
milliseconds

1495
00:49:40,480 --> 00:49:45,040
without going from palo alto to san

1496
00:49:42,839 --> 00:49:48,160
francisco probably congestion

1497
00:49:45,040 --> 00:49:50,000
on the the interconnection if you look

1498
00:49:48,160 --> 00:49:50,799
at it you notice that the latency stays

1499
00:49:50,000 --> 00:49:52,640
persistent

1500
00:49:50,800 --> 00:49:55,839
all the way through all the way to the

1501
00:49:52,640 --> 00:49:59,200
end it's actually a function of at t

1502
00:49:55,839 --> 00:50:02,880
doing icmp tunneling inside of mpls

1503
00:49:59,200 --> 00:50:05,279
but also exposing their mpls hops

1504
00:50:02,880 --> 00:50:08,000
uh and some final thoughts uh before you

1505
00:50:05,280 --> 00:50:10,960
begin any kind of a trace route analysis

1506
00:50:08,000 --> 00:50:12,160
you should always ask for traceroute in

1507
00:50:10,960 --> 00:50:14,000
both directions

1508
00:50:12,160 --> 00:50:15,279
so if someone sent you a tracer out or

1509
00:50:14,000 --> 00:50:16,480
if you're sending a tracer out to

1510
00:50:15,280 --> 00:50:18,400
someone else

1511
00:50:16,480 --> 00:50:20,400
see if you can get that reverse path see

1512
00:50:18,400 --> 00:50:23,200
if you can can take a look at that

1513
00:50:20,400 --> 00:50:25,280
and always use your send your real

1514
00:50:23,200 --> 00:50:27,200
source and destination ips so

1515
00:50:25,280 --> 00:50:28,640
what tends to happen in a lot of cases

1516
00:50:27,200 --> 00:50:30,078
is people send

1517
00:50:28,640 --> 00:50:31,598
only the section in the middle that they

1518
00:50:30,079 --> 00:50:34,079
think is the problem and they leave out

1519
00:50:31,599 --> 00:50:35,839
the source and they leave out the dust

1520
00:50:34,079 --> 00:50:37,200
and then when an engineer goes to look

1521
00:50:35,839 --> 00:50:39,200
at it they have no way to

1522
00:50:37,200 --> 00:50:41,118
tell what's actually happening because

1523
00:50:39,200 --> 00:50:41,759
they've only gotten a snippet of that

1524
00:50:41,119 --> 00:50:45,040
information

1525
00:50:41,760 --> 00:50:46,640
so as a best policy always ask for

1526
00:50:45,040 --> 00:50:49,119
traceroute in both directions and the

1527
00:50:46,640 --> 00:50:54,879
real source and destination ips

1528
00:50:49,119 --> 00:50:59,179
and that is it thank you for your time

1529
00:50:54,880 --> 00:50:59,179
[Music]

1530
00:51:00,079 --> 00:51:05,760
well richard thank you very much as

1531
00:51:03,280 --> 00:51:08,640
always that is one of the two most

1532
00:51:05,760 --> 00:51:10,240
informative tutorials we get at nanog

1533
00:51:08,640 --> 00:51:13,118
i think you know what the other one i'm

1534
00:51:10,240 --> 00:51:13,118
talking about is

1535
00:51:14,480 --> 00:51:19,760
quickly going to the questions and

1536
00:51:18,160 --> 00:51:23,200
reading a little between the lines i'm

1537
00:51:19,760 --> 00:51:26,559
going to pull some out of the chat

1538
00:51:23,200 --> 00:51:26,558
first question from

1539
00:51:27,599 --> 00:51:35,599
i'm sorry i'm going to badly follow

1540
00:51:30,640 --> 00:51:39,200
your name kanan katherine driverman

1541
00:51:35,599 --> 00:51:42,720
question is icmp versus udp

1542
00:51:39,200 --> 00:51:44,558
versus tcp when is each probe method

1543
00:51:42,720 --> 00:51:48,000
recommended

1544
00:51:44,559 --> 00:51:50,559
well ultimately which pro packet you use

1545
00:51:48,000 --> 00:51:52,160
is whichever one gets delivered to the

1546
00:51:50,559 --> 00:51:55,599
destination so the

1547
00:51:52,160 --> 00:51:58,078
the reason for picking udp is it's

1548
00:51:55,599 --> 00:51:59,599
historically unfiltered kind of gets

1549
00:51:58,079 --> 00:52:02,319
through everything

1550
00:51:59,599 --> 00:52:04,640
um you can do it with icmp and what

1551
00:52:02,319 --> 00:52:06,720
you'll run across is a lot of networks

1552
00:52:04,640 --> 00:52:08,558
especially enterprise networks with

1553
00:52:06,720 --> 00:52:10,879
with without people with experience will

1554
00:52:08,559 --> 00:52:12,720
do really bad things like oh

1555
00:52:10,880 --> 00:52:14,160
uh icmp that sounds like the security

1556
00:52:12,720 --> 00:52:16,640
risk we should block all of it

1557
00:52:14,160 --> 00:52:17,839
uh or tcp uh we have a firewall that's

1558
00:52:16,640 --> 00:52:20,078
sitting there and that's going to block

1559
00:52:17,839 --> 00:52:22,720
everything but udp was historically

1560
00:52:20,079 --> 00:52:23,599
kind of left open by those people but

1561
00:52:22,720 --> 00:52:25,759
ultimately

1562
00:52:23,599 --> 00:52:27,280
start with if you try shout out to let

1563
00:52:25,760 --> 00:52:30,319
you do it start with whatever

1564
00:52:27,280 --> 00:52:32,000
it sends and if you suspect that there's

1565
00:52:30,319 --> 00:52:35,839
something being blocked or filtered try

1566
00:52:32,000 --> 00:52:39,760
changing the protocol okay thank you

1567
00:52:35,839 --> 00:52:41,279
um and the follow-up questions that

1568
00:52:39,760 --> 00:52:43,760
probably really adjusted the answer is

1569
00:52:41,280 --> 00:52:44,720
our so-called tcp trace routes better i

1570
00:52:43,760 --> 00:52:47,680
think

1571
00:52:44,720 --> 00:52:48,319
yeah it's it's the exact same thing it's

1572
00:52:47,680 --> 00:52:50,000
just a

1573
00:52:48,319 --> 00:52:51,759
a packet header that gets through a

1574
00:52:50,000 --> 00:52:53,839
firewall yeah

1575
00:52:51,760 --> 00:52:56,960
um and then of course there's always our

1576
00:52:53,839 --> 00:53:00,640
friends the http traceroute

1577
00:52:56,960 --> 00:53:04,960
twitch um so

1578
00:53:00,640 --> 00:53:08,078
the next question is um

1579
00:53:04,960 --> 00:53:09,040
the return path you mentioned is half is

1580
00:53:08,079 --> 00:53:10,880
that the return

1581
00:53:09,040 --> 00:53:13,040
executes the same process as the

1582
00:53:10,880 --> 00:53:14,800
outbound and if so wouldn't that

1583
00:53:13,040 --> 00:53:18,319
incorporate the information

1584
00:53:14,800 --> 00:53:22,000
that a reverse trace route would

1585
00:53:18,319 --> 00:53:22,000
um let's see if i entered that question

1586
00:53:23,359 --> 00:53:26,640
um what would be really nice what i

1587
00:53:25,760 --> 00:53:30,400
would love to

1588
00:53:26,640 --> 00:53:32,319
see created is a kind of a trace route a

1589
00:53:30,400 --> 00:53:35,599
remote tracer outstander

1590
00:53:32,319 --> 00:53:36,400
where people who are willing to put this

1591
00:53:35,599 --> 00:53:39,359
up can can

1592
00:53:36,400 --> 00:53:40,400
run a host and it could be a known

1593
00:53:39,359 --> 00:53:42,319
endpoint we can

1594
00:53:40,400 --> 00:53:43,440
connect to it and we can say i want to

1595
00:53:42,319 --> 00:53:45,759
trace her out back

1596
00:53:43,440 --> 00:53:47,440
from you uh obviously there's a lot of

1597
00:53:45,760 --> 00:53:49,280
denial of service applications with that

1598
00:53:47,440 --> 00:53:50,960
so you would need to almost like a speed

1599
00:53:49,280 --> 00:53:51,520
test service i think this will be really

1600
00:53:50,960 --> 00:53:54,480
helpful

1601
00:53:51,520 --> 00:53:56,079
for debugging a lot of internet issues

1602
00:53:54,480 --> 00:53:59,359
is that there was a simple

1603
00:53:56,079 --> 00:54:02,400
easy rate limited way where when we do

1604
00:53:59,359 --> 00:54:04,000
the trace route we could get the return

1605
00:54:02,400 --> 00:54:05,680
sent to us as well

1606
00:54:04,000 --> 00:54:08,079
um but there's there's really nothing

1607
00:54:05,680 --> 00:54:11,919
that does that that i've seen today

1608
00:54:08,079 --> 00:54:14,800
it would be lovely thank you

1609
00:54:11,920 --> 00:54:16,079
uh two follow-up questions coming from

1610
00:54:14,800 --> 00:54:19,200
kanan

1611
00:54:16,079 --> 00:54:20,480
uh first of which is is paris traceroute

1612
00:54:19,200 --> 00:54:22,078
the most efficient what are your

1613
00:54:20,480 --> 00:54:24,720
thoughts

1614
00:54:22,079 --> 00:54:26,240
um it's been a really long time since

1615
00:54:24,720 --> 00:54:29,439
i've looked at that one

1616
00:54:26,240 --> 00:54:31,759
um nothing in particular

1617
00:54:29,440 --> 00:54:33,920
i'll say this there's nothing really

1618
00:54:31,760 --> 00:54:35,760
efficient or inefficient about it it's

1619
00:54:33,920 --> 00:54:37,440
just a matter of how many probes you

1620
00:54:35,760 --> 00:54:38,480
want to make and what kind of analysis

1621
00:54:37,440 --> 00:54:41,920
you want to get

1622
00:54:38,480 --> 00:54:44,240
from the data there's

1623
00:54:41,920 --> 00:54:45,599
things that i've done in previous

1624
00:54:44,240 --> 00:54:49,359
careers i actually

1625
00:54:45,599 --> 00:54:51,760
built a a massive topology

1626
00:54:49,359 --> 00:54:53,440
builder by kind of a distributed

1627
00:54:51,760 --> 00:54:55,359
parallel traceroute system

1628
00:54:53,440 --> 00:54:56,960
uh there's there's really fancy things

1629
00:54:55,359 --> 00:55:00,240
that you can do with this

1630
00:54:56,960 --> 00:55:01,839
um i i don't really recommend one tool

1631
00:55:00,240 --> 00:55:04,319
above another it's whatever tool you

1632
00:55:01,839 --> 00:55:07,839
have available as long as it gives you

1633
00:55:04,319 --> 00:55:07,839
uh decent results

1634
00:55:07,920 --> 00:55:11,760
okay thank you unfortunately we're

1635
00:55:10,400 --> 00:55:13,200
getting a little bit of echo in the

1636
00:55:11,760 --> 00:55:17,119
system

1637
00:55:13,200 --> 00:55:19,200
um the

1638
00:55:17,119 --> 00:55:20,240
oh questions are coming in fast and

1639
00:55:19,200 --> 00:55:22,640
furious

1640
00:55:20,240 --> 00:55:23,359
um how many packets sent for four is

1641
00:55:22,640 --> 00:55:25,040
ideal

1642
00:55:23,359 --> 00:55:26,558
default is three i believe you covered

1643
00:55:25,040 --> 00:55:30,079
that

1644
00:55:26,559 --> 00:55:32,240
um let me flip you to the next one is

1645
00:55:30,079 --> 00:55:33,520
how is traceroute running the data

1646
00:55:32,240 --> 00:55:36,319
center different

1647
00:55:33,520 --> 00:55:37,759
what are things to take care traceroute

1648
00:55:36,319 --> 00:55:41,119
in the data center

1649
00:55:37,760 --> 00:55:45,599
um so

1650
00:55:41,119 --> 00:55:45,599
some examples of things that i've seen

1651
00:55:46,079 --> 00:55:50,720
i'll just give an example random example

1652
00:55:48,400 --> 00:55:54,480
uh juniper qfx 10k

1653
00:55:50,720 --> 00:55:57,919
as a platform when this first came out

1654
00:55:54,480 --> 00:56:01,200
uh they they had a little bit of a lag

1655
00:55:57,920 --> 00:56:04,079
between what you actually sent out of

1656
00:56:01,200 --> 00:56:05,359
the virtual machine that was running

1657
00:56:04,079 --> 00:56:07,440
inside the routing engine as they're

1658
00:56:05,359 --> 00:56:08,319
trying to move to a to a more kind of

1659
00:56:07,440 --> 00:56:11,839
modern

1660
00:56:08,319 --> 00:56:13,599
vm based system so it would create these

1661
00:56:11,839 --> 00:56:15,759
artificial i want to say it was at 10

1662
00:56:13,599 --> 00:56:18,720
milliseconds and artificially add

1663
00:56:15,760 --> 00:56:20,720
10 milliseconds to it and i've seen

1664
00:56:18,720 --> 00:56:23,520
similar kinds of things

1665
00:56:20,720 --> 00:56:24,319
out of data center gear because maybe

1666
00:56:23,520 --> 00:56:26,960
people aren't

1667
00:56:24,319 --> 00:56:28,558
thinking about it it's much easier to

1668
00:56:26,960 --> 00:56:31,599
debug a data center ultimately

1669
00:56:28,559 --> 00:56:32,880
the data center is probably yours and if

1670
00:56:31,599 --> 00:56:34,400
it's not then you probably can't do

1671
00:56:32,880 --> 00:56:36,400
anything about it unless you're talking

1672
00:56:34,400 --> 00:56:38,000
to someone who does own it so

1673
00:56:36,400 --> 00:56:39,200
they do know the topology they do know

1674
00:56:38,000 --> 00:56:41,440
where things are going they do have

1675
00:56:39,200 --> 00:56:43,759
access to internal tools and

1676
00:56:41,440 --> 00:56:46,240
and tracer out reverse dns things like

1677
00:56:43,760 --> 00:56:50,240
that that might not be exposed

1678
00:56:46,240 --> 00:56:52,640
um but always remember to

1679
00:56:50,240 --> 00:56:54,160
if you do want to use those kind of data

1680
00:56:52,640 --> 00:56:57,279
center boxes make sure

1681
00:56:54,160 --> 00:56:58,399
that you're testing for what that

1682
00:56:57,280 --> 00:56:59,839
tracible occupation

1683
00:56:58,400 --> 00:57:01,520
will look like and how end users are

1684
00:56:59,839 --> 00:57:04,078
going to see if they try to

1685
00:57:01,520 --> 00:57:04,079
trace your outlook

1686
00:57:05,359 --> 00:57:13,279
um okay a comment that came in on

1687
00:57:09,280 --> 00:57:16,160
remote trace route remote trace route

1688
00:57:13,280 --> 00:57:19,680
saku itai had an idea like that perhaps

1689
00:57:16,160 --> 00:57:19,680
an rfc needs to be drafted

1690
00:57:20,160 --> 00:57:26,240
next question in the stack

1691
00:57:23,200 --> 00:57:27,200
is is trace route output enough to

1692
00:57:26,240 --> 00:57:30,479
identify

1693
00:57:27,200 --> 00:57:35,200
cgmat properly

1694
00:57:30,480 --> 00:57:35,200
um no

1695
00:57:35,920 --> 00:57:41,760
i can't think so that's never one that

1696
00:57:39,200 --> 00:57:45,839
i've tried to do

1697
00:57:41,760 --> 00:57:49,200
sorry okay um

1698
00:57:45,839 --> 00:57:51,839
next question coming in is um

1699
00:57:49,200 --> 00:57:52,640
oh from one of our pc members uh you

1700
00:57:51,839 --> 00:57:55,200
only mentioned

1701
00:57:52,640 --> 00:57:57,839
mtr once in the presentation not a

1702
00:57:55,200 --> 00:58:01,279
preferred tool in your opinion

1703
00:57:57,839 --> 00:58:02,960
um so mtr is a tool i think it was

1704
00:58:01,280 --> 00:58:04,799
what matt's traceroute or something like

1705
00:58:02,960 --> 00:58:07,440
that that just

1706
00:58:04,799 --> 00:58:09,520
ran traceroute in a kind of a top

1707
00:58:07,440 --> 00:58:12,000
fashion continuous loop and

1708
00:58:09,520 --> 00:58:12,880
what tends to happen is somebody fires

1709
00:58:12,000 --> 00:58:14,480
this up and

1710
00:58:12,880 --> 00:58:16,000
walks you know looks and walks away from

1711
00:58:14,480 --> 00:58:17,280
their computer and so this thing is is

1712
00:58:16,000 --> 00:58:19,200
out here sending

1713
00:58:17,280 --> 00:58:20,480
a few packets per second and that might

1714
00:58:19,200 --> 00:58:23,118
not be that big a deal but

1715
00:58:20,480 --> 00:58:24,799
a few people start doing that across a

1716
00:58:23,119 --> 00:58:25,839
large enough network and all of a sudden

1717
00:58:24,799 --> 00:58:28,079
you are

1718
00:58:25,839 --> 00:58:30,160
absolutely bumping your hard-coded rate

1719
00:58:28,079 --> 00:58:33,440
limits on what you will generate for

1720
00:58:30,160 --> 00:58:35,279
for trace routes it was kind of

1721
00:58:33,440 --> 00:58:36,000
notorious for causing those problems

1722
00:58:35,280 --> 00:58:37,839
when it first came

1723
00:58:36,000 --> 00:58:39,520
out i i honestly haven't looked at it in

1724
00:58:37,839 --> 00:58:40,319
a long long time so i'm not sure if

1725
00:58:39,520 --> 00:58:42,720
they've

1726
00:58:40,319 --> 00:58:44,480
done anything differently but um that's

1727
00:58:42,720 --> 00:58:46,558
that's about it it's a it's a

1728
00:58:44,480 --> 00:58:49,440
traceroute in a top-like interface where

1729
00:58:46,559 --> 00:58:51,040
you can see continuous refresh

1730
00:58:49,440 --> 00:58:53,040
does this come into the editorial

1731
00:58:51,040 --> 00:58:54,400
comment of your management traffic

1732
00:58:53,040 --> 00:59:04,640
shouldn't exceed your

1733
00:58:54,400 --> 00:59:07,599
payload for revenue

1734
00:59:04,640 --> 00:59:09,520
uh next question coming in uh running

1735
00:59:07,599 --> 00:59:12,000
traceroute from source to several

1736
00:59:09,520 --> 00:59:14,880
destinations simultaneously

1737
00:59:12,000 --> 00:59:18,000
is that a good idea or should you run

1738
00:59:14,880 --> 00:59:20,960
one destination at a time

1739
00:59:18,000 --> 00:59:21,280
um so there's there's two parts of this

1740
00:59:20,960 --> 00:59:24,160
right

1741
00:59:21,280 --> 00:59:25,440
one is how do you send the packets and

1742
00:59:24,160 --> 00:59:29,040
the other is how do you

1743
00:59:25,440 --> 00:59:31,280
interpret the data and

1744
00:59:29,040 --> 00:59:33,040
the way that so one of the problems with

1745
00:59:31,280 --> 00:59:34,960
the default trade show so if you run it

1746
00:59:33,040 --> 00:59:38,000
you send a query of three

1747
00:59:34,960 --> 00:59:40,000
and you see one view one list of hops

1748
00:59:38,000 --> 00:59:42,160
of three separate probes and in reality

1749
00:59:40,000 --> 00:59:42,960
those three probes can be completely

1750
00:59:42,160 --> 00:59:46,000
different

1751
00:59:42,960 --> 00:59:48,000
so it would actually be more useful if

1752
00:59:46,000 --> 00:59:49,920
you had

1753
00:59:48,000 --> 00:59:51,839
one query all the way through and then

1754
00:59:49,920 --> 00:59:54,000
you repeated it another one query

1755
00:59:51,839 --> 00:59:56,960
all the way through and what i would

1756
00:59:54,000 --> 00:59:59,599
actually want to see if i was to build a

1757
00:59:56,960 --> 01:00:00,559
better analysis tool would be one that

1758
00:59:59,599 --> 01:00:03,119
does that

1759
01:00:00,559 --> 01:00:04,960
does that again does that again and then

1760
01:00:03,119 --> 01:00:05,440
maps out at what point do these change

1761
01:00:04,960 --> 01:00:06,880
so

1762
01:00:05,440 --> 01:00:08,640
here's the view one that we got here's

1763
01:00:06,880 --> 01:00:09,359
you two here's view three and here's the

1764
01:00:08,640 --> 01:00:12,240
differences

1765
01:00:09,359 --> 01:00:14,400
i think that would be a more useful view

1766
01:00:12,240 --> 01:00:17,200
for troubleshooting advanced issues

1767
01:00:14,400 --> 01:00:18,319
than uh the the traditional traceroute

1768
01:00:17,200 --> 01:00:20,640
so that's why i say

1769
01:00:18,319 --> 01:00:22,079
if in doubt go back to one query look at

1770
01:00:20,640 --> 01:00:24,160
that one path all the way through

1771
01:00:22,079 --> 01:00:24,480
because you have at least some idea that

1772
01:00:24,160 --> 01:00:26,399
the

1773
01:00:24,480 --> 01:00:27,760
only thing you're changing about this is

1774
01:00:26,400 --> 01:00:30,160
the ttl so

1775
01:00:27,760 --> 01:00:32,319
ideally and what should be happening is

1776
01:00:30,160 --> 01:00:35,040
that should be following the same ecmp

1777
01:00:32,319 --> 01:00:37,200
the same flow hash the same everything

1778
01:00:35,040 --> 01:00:38,960
uh because i you can end up with really

1779
01:00:37,200 --> 01:00:41,680
complex situations i've i've

1780
01:00:38,960 --> 01:00:42,720
absolutely known people who have done 16

1781
01:00:41,680 --> 01:00:45,040
way ecmp

1782
01:00:42,720 --> 01:00:45,759
of 32 by 10 gig bundles and so you've

1783
01:00:45,040 --> 01:00:47,920
got

1784
01:00:45,760 --> 01:00:49,599
one little little thing out of all these

1785
01:00:47,920 --> 01:00:51,359
different flows that could be causing

1786
01:00:49,599 --> 01:00:52,799
the problem and it's really difficult to

1787
01:00:51,359 --> 01:00:55,200
pin that down

1788
01:00:52,799 --> 01:00:56,160
um to the other part of the of the

1789
01:00:55,200 --> 01:00:57,919
question which would be

1790
01:00:56,160 --> 01:00:59,680
how you generate the packets and how you

1791
01:00:57,920 --> 01:01:02,559
deliver it

1792
01:00:59,680 --> 01:01:02,960
there's nothing inherently that stops

1793
01:01:02,559 --> 01:01:06,559
you

1794
01:01:02,960 --> 01:01:08,319
from making a map so traceroute as a

1795
01:01:06,559 --> 01:01:10,240
denial of service is actually a

1796
01:01:08,319 --> 01:01:11,599
potential vector right you can you can

1797
01:01:10,240 --> 01:01:13,520
send a whole bunch of packets

1798
01:01:11,599 --> 01:01:15,440
with a ttl that's going to expire

1799
01:01:13,520 --> 01:01:17,440
exactly the target that you want then

1800
01:01:15,440 --> 01:01:19,359
and cause excessive cpu use that's why

1801
01:01:17,440 --> 01:01:21,040
people have those rate limits

1802
01:01:19,359 --> 01:01:22,960
uh but there's nothing that stops you

1803
01:01:21,040 --> 01:01:24,480
from making a multi-million packet per

1804
01:01:22,960 --> 01:01:27,200
second traceroute

1805
01:01:24,480 --> 01:01:28,079
finger so long as you distribute the

1806
01:01:27,200 --> 01:01:30,640
probes

1807
01:01:28,079 --> 01:01:32,400
evenly because there's a lot of

1808
01:01:30,640 --> 01:01:33,920
hard-coded i mean things like 100

1809
01:01:32,400 --> 01:01:35,839
packets per second a thousand packets

1810
01:01:33,920 --> 01:01:36,640
per second that you can very easily bump

1811
01:01:35,839 --> 01:01:38,960
very quickly

1812
01:01:36,640 --> 01:01:39,759
and again it depends on the vendor the

1813
01:01:38,960 --> 01:01:42,319
code

1814
01:01:39,760 --> 01:01:44,079
um the the particular line card so

1815
01:01:42,319 --> 01:01:44,400
different generations of line cards may

1816
01:01:44,079 --> 01:01:46,559
have

1817
01:01:44,400 --> 01:01:47,599
different levels of hard-coded rate

1818
01:01:46,559 --> 01:01:49,359
limits in there

1819
01:01:47,599 --> 01:01:52,160
and a lot of these are not configurable

1820
01:01:49,359 --> 01:01:52,480
so it's really more a question of are

1821
01:01:52,160 --> 01:01:54,960
you

1822
01:01:52,480 --> 01:01:56,559
going to bump up against those those of

1823
01:01:54,960 --> 01:01:58,960
those false things because you're

1824
01:01:56,559 --> 01:02:02,240
sending too much too fast

1825
01:01:58,960 --> 01:02:05,520
okay so we probably don't want to crash

1826
01:02:02,240 --> 01:02:07,200
somebody's network by diagnostics

1827
01:02:05,520 --> 01:02:08,720
what's happening well ideally what we

1828
01:02:07,200 --> 01:02:09,520
want is for people to leave those

1829
01:02:08,720 --> 01:02:12,240
diagnostics

1830
01:02:09,520 --> 01:02:12,880
open and a lot of times what you see is

1831
01:02:12,240 --> 01:02:15,279
is people

1832
01:02:12,880 --> 01:02:17,200
get oh we want to be extra sure we want

1833
01:02:15,280 --> 01:02:17,920
to put lots of rate limits on this we

1834
01:02:17,200 --> 01:02:20,000
want to block

1835
01:02:17,920 --> 01:02:21,839
icmp and we want to block everything

1836
01:02:20,000 --> 01:02:23,760
directly to our slash 30s and

1837
01:02:21,839 --> 01:02:25,520
that cuts out a really valuable

1838
01:02:23,760 --> 01:02:27,039
diagnostic tool that people on the

1839
01:02:25,520 --> 01:02:28,000
internet can use to figure out what's

1840
01:02:27,039 --> 01:02:30,160
going on so

1841
01:02:28,000 --> 01:02:32,000
we we want to make this as low impact

1842
01:02:30,160 --> 01:02:35,440
and as beneficial to everyone as

1843
01:02:32,000 --> 01:02:37,599
we can yeah well i editorially speaking

1844
01:02:35,440 --> 01:02:39,920
my personal soapbox is people who block

1845
01:02:37,599 --> 01:02:41,200
icmp and v6 environments because it just

1846
01:02:39,920 --> 01:02:44,240
breaks things

1847
01:02:41,200 --> 01:02:46,480
yep um next question

1848
01:02:44,240 --> 01:02:48,640
is there a way to optimize the protocol

1849
01:02:46,480 --> 01:02:52,160
based on traceroute result

1850
01:02:48,640 --> 01:02:55,520
when tcp and gdp do not work the icmp is

1851
01:02:52,160 --> 01:02:55,520
chosen intelligently

1852
01:02:55,760 --> 01:03:00,160
interesting thought yeah that's

1853
01:02:58,079 --> 01:03:02,880
theoretically possible

1854
01:03:00,160 --> 01:03:03,200
i find that one relatively rare i mean

1855
01:03:02,880 --> 01:03:04,720
it's

1856
01:03:03,200 --> 01:03:06,160
it's pretty obvious if you're trying to

1857
01:03:04,720 --> 01:03:07,598
run a tracer out and hey this isn't

1858
01:03:06,160 --> 01:03:08,480
getting through well maybe i should try

1859
01:03:07,599 --> 01:03:10,480
icmp

1860
01:03:08,480 --> 01:03:12,640
um you could you could bake that kind of

1861
01:03:10,480 --> 01:03:16,880
a basic thing in there

1862
01:03:12,640 --> 01:03:20,000
um but that's that's pretty rare

1863
01:03:16,880 --> 01:03:23,200
um okay uh we're starting to actually

1864
01:03:20,000 --> 01:03:26,960
get to the bottom of the question barrel

1865
01:03:23,200 --> 01:03:28,879
we do still have some time left um

1866
01:03:26,960 --> 01:03:32,079
is there anything you would like to put

1867
01:03:28,880 --> 01:03:35,920
in as sage advice

1868
01:03:32,079 --> 01:03:35,920
wearing your ancient sage hat

1869
01:03:37,119 --> 01:03:42,839
at which point we will put in a last

1870
01:03:40,720 --> 01:03:45,919
call for

1871
01:03:42,839 --> 01:03:46,720
questions my state advice related to

1872
01:03:45,920 --> 01:03:50,480
traceroute

1873
01:03:46,720 --> 01:03:52,799
um let's see here

1874
01:03:50,480 --> 01:03:54,960
as i said in the very beginning the the

1875
01:03:52,799 --> 01:03:58,720
thing for me for traceroute is about

1876
01:03:54,960 --> 01:04:00,400
using it as a diagnostic tool and it's

1877
01:03:58,720 --> 01:04:01,680
when you're running a network you're

1878
01:04:00,400 --> 01:04:02,880
talking to someone else who's running a

1879
01:04:01,680 --> 01:04:03,440
network you've got to figure out what's

1880
01:04:02,880 --> 01:04:05,359
going on

1881
01:04:03,440 --> 01:04:07,680
who to talk to who will bring the issue

1882
01:04:05,359 --> 01:04:08,078
to and there's a lot of situations where

1883
01:04:07,680 --> 01:04:09,759
people

1884
01:04:08,079 --> 01:04:11,200
aren't monitoring their own networks

1885
01:04:09,760 --> 01:04:13,280
they aren't discovering these things and

1886
01:04:11,200 --> 01:04:16,399
they're relying on customers

1887
01:04:13,280 --> 01:04:18,960
to to to send that out so you want

1888
01:04:16,400 --> 01:04:19,599
to make sure when you're you're

1889
01:04:18,960 --> 01:04:21,039
submitting a

1890
01:04:19,599 --> 01:04:22,319
traceroute when you're complaining about

1891
01:04:21,039 --> 01:04:23,599
a traceroute when you're trying to talk

1892
01:04:22,319 --> 01:04:26,880
to someone else

1893
01:04:23,599 --> 01:04:28,880
be as accurate as possible and include

1894
01:04:26,880 --> 01:04:31,440
as much information as possible

1895
01:04:28,880 --> 01:04:32,559
um the the when people take a snippet of

1896
01:04:31,440 --> 01:04:34,000
the middle of the traceroute and they

1897
01:04:32,559 --> 01:04:34,480
don't include source they don't include

1898
01:04:34,000 --> 01:04:35,839
the desk

1899
01:04:34,480 --> 01:04:38,400
and then there's nothing about what's

1900
01:04:35,839 --> 01:04:39,119
happening it's almost useless to debug

1901
01:04:38,400 --> 01:04:41,039
that

1902
01:04:39,119 --> 01:04:42,720
unless you're running a very very broken

1903
01:04:41,039 --> 01:04:44,240
network and you just you miss something

1904
01:04:42,720 --> 01:04:46,640
completely obvious

1905
01:04:44,240 --> 01:04:48,879
uh include the source include the desk

1906
01:04:46,640 --> 01:04:51,279
include the entire traceroute

1907
01:04:48,880 --> 01:04:52,720
if at all possible i mean really just

1908
01:04:51,280 --> 01:04:54,079
the path that it came in and not just

1909
01:04:52,720 --> 01:04:55,038
the one hop that you think is the

1910
01:04:54,079 --> 01:04:58,160
problem

1911
01:04:55,039 --> 01:05:00,640
um and that's that's about it i

1912
01:04:58,160 --> 01:05:01,440
the more that we can make that kind of

1913
01:05:00,640 --> 01:05:04,160
traceroute

1914
01:05:01,440 --> 01:05:05,039
analysis accurate and helpful the more

1915
01:05:04,160 --> 01:05:06,799
we can get

1916
01:05:05,039 --> 01:05:08,640
every network who has to look at a

1917
01:05:06,799 --> 01:05:10,319
traceroute issue and then determine if

1918
01:05:08,640 --> 01:05:12,240
it's a real issue or not

1919
01:05:10,319 --> 01:05:13,839
take it seriously put weltering people

1920
01:05:12,240 --> 01:05:16,558
in front of it and make sure that it

1921
01:05:13,839 --> 01:05:20,319
gets resolved correctly

1922
01:05:16,559 --> 01:05:24,559
okay um that was

1923
01:05:20,319 --> 01:05:27,119
very very good as always is there

1924
01:05:24,559 --> 01:05:28,240
one oh there's one last question just

1925
01:05:27,119 --> 01:05:32,559
came in

1926
01:05:28,240 --> 01:05:35,279
um you presented once in 2016

1927
01:05:32,559 --> 01:05:38,559
and now in 2020 what are your new

1928
01:05:35,280 --> 01:05:38,559
wordings on traceroute

1929
01:05:38,960 --> 01:05:43,039
there really hasn't been much uh the the

1930
01:05:41,520 --> 01:05:44,880
ironic thing about

1931
01:05:43,039 --> 01:05:46,480
the traceroute presentation is if you go

1932
01:05:44,880 --> 01:05:47,440
look in there you can see traceroutes

1933
01:05:46,480 --> 01:05:51,039
that i i ran

1934
01:05:47,440 --> 01:05:55,039
in 2014 or whatever this thing was

1935
01:05:51,039 --> 01:05:55,039
from the original nanog and the dr

1936
01:05:55,280 --> 01:05:59,039
it's one of those things that doesn't

1937
01:05:57,039 --> 01:06:01,119
change it's

1938
01:05:59,039 --> 01:06:03,520
the same issues affect the same devices

1939
01:06:01,119 --> 01:06:06,559
in the same way

1940
01:06:03,520 --> 01:06:08,720
really not much has changed

1941
01:06:06,559 --> 01:06:10,000
the the interface speeds have changed um

1942
01:06:08,720 --> 01:06:12,558
you know there's there's a lot of 100

1943
01:06:10,000 --> 01:06:12,559
gig out there

1944
01:06:13,680 --> 01:06:16,960
some of the interface names are less

1945
01:06:15,280 --> 01:06:20,160
easy to decode because people

1946
01:06:16,960 --> 01:06:21,920
have switched to very uninformative

1947
01:06:20,160 --> 01:06:23,440
names so for example jupiter switched

1948
01:06:21,920 --> 01:06:24,480
everything to et which tells us

1949
01:06:23,440 --> 01:06:25,599
absolutely nothing except for this

1950
01:06:24,480 --> 01:06:27,280
ethernet

1951
01:06:25,599 --> 01:06:28,960
that's that's about it it's really the

1952
01:06:27,280 --> 01:06:32,160
same issues

1953
01:06:28,960 --> 01:06:34,400
yes e.t and it still has trouble phoning

1954
01:06:32,160 --> 01:06:34,399
home

1955
01:06:35,039 --> 01:06:39,359
yeah i did notice that your trace routes

1956
01:06:37,440 --> 01:06:40,880
were from the network which um

1957
01:06:39,359 --> 01:06:43,119
has changed names a couple of times

1958
01:06:40,880 --> 01:06:45,599
since then

1959
01:06:43,119 --> 01:06:47,200
thank you very much for this it's been

1960
01:06:45,599 --> 01:06:48,799
most informative as always

1961
01:06:47,200 --> 01:06:50,960
and we do look forward to seeing you in

1962
01:06:48,799 --> 01:06:51,759
person again the next time we see you in

1963
01:06:50,960 --> 01:07:01,839
person

1964
01:06:51,760 --> 01:07:01,839
definitely mission stay safe we miss you

1965
01:07:02,960 --> 01:07:05,039
you

