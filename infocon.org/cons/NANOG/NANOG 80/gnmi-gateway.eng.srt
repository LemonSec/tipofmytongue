1
00:00:01,640 --> 00:00:06,879
[Music]

2
00:00:05,839 --> 00:00:08,480
hi everyone

3
00:00:06,879 --> 00:00:10,080
i'm colin mcintosh and i'm a software

4
00:00:08,480 --> 00:00:11,599
engineer working on network automation

5
00:00:10,080 --> 00:00:13,360
and tooling at netflix

6
00:00:11,599 --> 00:00:14,639
for a few years now we've all heard

7
00:00:13,360 --> 00:00:16,320
about the great things that streaming

8
00:00:14,639 --> 00:00:17,759
telemetry can offer but

9
00:00:16,320 --> 00:00:19,840
if you've ever tried to use streaming

10
00:00:17,760 --> 00:00:22,000
telemetry you may have found that

11
00:00:19,840 --> 00:00:23,600
there aren't many resource resources

12
00:00:22,000 --> 00:00:25,039
available to get started

13
00:00:23,600 --> 00:00:26,560
today i'm going to be talking about a

14
00:00:25,039 --> 00:00:27,920
new piece of software in the network

15
00:00:26,560 --> 00:00:30,080
automation ecosystem

16
00:00:27,920 --> 00:00:31,840
which is used in netflix to stream state

17
00:00:30,080 --> 00:00:32,800
and configuration telemetry from network

18
00:00:31,840 --> 00:00:36,719
devices

19
00:00:32,800 --> 00:00:38,640
it's called gnmi gateway

20
00:00:36,719 --> 00:00:40,160
but before i dive into the details of

21
00:00:38,640 --> 00:00:42,000
gnmy gateway i want to give everyone

22
00:00:40,160 --> 00:00:44,480
some background on streaming telemetry

23
00:00:42,000 --> 00:00:46,559
and gnmi

24
00:00:44,480 --> 00:00:48,078
gnmi is the google network management

25
00:00:46,559 --> 00:00:50,000
interface which is an open source

26
00:00:48,079 --> 00:00:51,840
protocol that is used to stream state

27
00:00:50,000 --> 00:00:55,039
and configuration to and from

28
00:00:51,840 --> 00:00:57,360
gnmi targets in this case gmi targets

29
00:00:55,039 --> 00:01:00,160
are network devices

30
00:00:57,360 --> 00:01:00,399
gmi provides four rpc mechanisms which

31
00:01:00,160 --> 00:01:04,238
are

32
00:01:00,399 --> 00:01:06,400
subscribe get set and capabilities

33
00:01:04,239 --> 00:01:07,600
subscribe is the rpc which we primarily

34
00:01:06,400 --> 00:01:09,680
use where our network tooling

35
00:01:07,600 --> 00:01:11,199
sends a subscribe request to our network

36
00:01:09,680 --> 00:01:13,040
devices and in return

37
00:01:11,200 --> 00:01:14,799
receives a stream of updates about the

38
00:01:13,040 --> 00:01:16,400
state of the device

39
00:01:14,799 --> 00:01:17,680
get and set provide the functionality

40
00:01:16,400 --> 00:01:19,600
that you would expect getting and

41
00:01:17,680 --> 00:01:21,759
setting specific pieces of data

42
00:01:19,600 --> 00:01:23,520
and capabilities describes the services

43
00:01:21,759 --> 00:01:25,600
and data models supported by the target

44
00:01:23,520 --> 00:01:28,000
device

45
00:01:25,600 --> 00:01:29,360
gmi is defined as a specification and a

46
00:01:28,000 --> 00:01:30,960
protobuf model both of which are

47
00:01:29,360 --> 00:01:34,079
available on github and i've linked out

48
00:01:30,960 --> 00:01:36,399
to them here from my slides as well

49
00:01:34,079 --> 00:01:38,000
while gmi is used to stream the data to

50
00:01:36,400 --> 00:01:38,960
and from targets the data itself is

51
00:01:38,000 --> 00:01:42,320
structured using

52
00:01:38,960 --> 00:01:42,320
open config data models

53
00:01:43,600 --> 00:01:47,280
openconfig is a working group of

54
00:01:45,439 --> 00:01:49,199
operators and vendors that have defined

55
00:01:47,280 --> 00:01:51,040
a set of data models that describe the

56
00:01:49,200 --> 00:01:51,920
state and configuration of network

57
00:01:51,040 --> 00:01:53,680
devices

58
00:01:51,920 --> 00:01:55,840
these models are defined in yang which

59
00:01:53,680 --> 00:01:59,040
is a data modeling language defined by

60
00:01:55,840 --> 00:02:01,360
by the itf in rfc 6020

61
00:01:59,040 --> 00:02:03,280
and these models are organized into a

62
00:02:01,360 --> 00:02:05,200
tree of various leaves

63
00:02:03,280 --> 00:02:07,280
here i've included a small excerpt of

64
00:02:05,200 --> 00:02:08,959
the opening of the open config tree

65
00:02:07,280 --> 00:02:11,280
and what some of those leaves may look

66
00:02:08,959 --> 00:02:12,640
like no this is this is only a small

67
00:02:11,280 --> 00:02:15,680
portion of the tree it's actually much

68
00:02:12,640 --> 00:02:15,679
larger than this

69
00:02:17,840 --> 00:02:21,280
at netflix gmi is the protocol for

70
00:02:20,000 --> 00:02:22,000
streaming telemetry that we have chosen

71
00:02:21,280 --> 00:02:24,239
to focus on

72
00:02:22,000 --> 00:02:25,280
and feel best suits our needs but there

73
00:02:24,239 --> 00:02:26,959
are others too

74
00:02:25,280 --> 00:02:28,080
you may also be familiar with netcomp

75
00:02:26,959 --> 00:02:29,280
which provides some support for

76
00:02:28,080 --> 00:02:31,519
streaming telemetry

77
00:02:29,280 --> 00:02:33,280
or you may be familiar with s flow which

78
00:02:31,519 --> 00:02:35,680
is another streaming telemetry protocol

79
00:02:33,280 --> 00:02:37,840
that streams flow data from routers

80
00:02:35,680 --> 00:02:40,800
or even syslog which uses a similar

81
00:02:37,840 --> 00:02:42,800
push-based mechanism

82
00:02:40,800 --> 00:02:44,800
this is a contrast to more traditional

83
00:02:42,800 --> 00:02:47,920
polling telemetry systems such as

84
00:02:44,800 --> 00:02:50,000
snmp screen scraping or proprietary

85
00:02:47,920 --> 00:02:51,839
vendor apis that many network operators

86
00:02:50,000 --> 00:02:53,599
use today

87
00:02:51,840 --> 00:02:55,519
additionally we use openconfig data

88
00:02:53,599 --> 00:02:56,799
models at netflix and encourage our

89
00:02:55,519 --> 00:02:58,800
vendors to do the same

90
00:02:56,800 --> 00:03:01,519
but there are other models available as

91
00:02:58,800 --> 00:03:03,280
well such as ietf models or proprietary

92
00:03:01,519 --> 00:03:05,840
models that are specific to a single

93
00:03:03,280 --> 00:03:05,840
vendor

94
00:03:06,400 --> 00:03:10,560
this diagram gives you a picture of how

95
00:03:08,640 --> 00:03:12,399
all of these pieces fit together

96
00:03:10,560 --> 00:03:13,599
at the bottom is a normal grpc

97
00:03:12,400 --> 00:03:17,519
connection that runs over

98
00:03:13,599 --> 00:03:19,839
http 2 and tls the grpc code is

99
00:03:17,519 --> 00:03:22,879
auto-generated from the gmi pro

100
00:03:19,840 --> 00:03:24,239
buff model and gnmi carries data that is

101
00:03:22,879 --> 00:03:27,200
modeled in open config

102
00:03:24,239 --> 00:03:28,640
and has some encoding when we talk about

103
00:03:27,200 --> 00:03:29,920
streaming telemetry at netflix we're

104
00:03:28,640 --> 00:03:33,839
typically talking about all of the

105
00:03:29,920 --> 00:03:33,839
components in this stack

106
00:03:35,519 --> 00:03:38,799
so going back about two years at netflix

107
00:03:37,920 --> 00:03:40,238
like many here

108
00:03:38,799 --> 00:03:41,920
we heard about all of the great things

109
00:03:40,239 --> 00:03:43,920
that streaming telemetry can offer

110
00:03:41,920 --> 00:03:45,839
we saw it as an excellent option for

111
00:03:43,920 --> 00:03:46,879
managing our network with progressively

112
00:03:45,840 --> 00:03:49,760
more structured data

113
00:03:46,879 --> 00:03:51,518
and more real-time data as we we began

114
00:03:49,760 --> 00:03:52,079
to investigate streaming telemetry we

115
00:03:51,519 --> 00:03:54,080
found that

116
00:03:52,080 --> 00:03:56,159
open config and gnmi provided the

117
00:03:54,080 --> 00:03:58,400
functionality that we were looking for

118
00:03:56,159 --> 00:04:00,239
but at the time we found that there were

119
00:03:58,400 --> 00:04:00,879
few existing systems and they were

120
00:04:00,239 --> 00:04:03,360
somewhat

121
00:04:00,879 --> 00:04:05,120
limited in their offerings most of the

122
00:04:03,360 --> 00:04:07,200
services that we investigated lacked

123
00:04:05,120 --> 00:04:08,720
support for many dynamic connections to

124
00:04:07,200 --> 00:04:10,319
our ever-evolving network

125
00:04:08,720 --> 00:04:12,799
and some only supported a single

126
00:04:10,319 --> 00:04:14,159
connection to a single device

127
00:04:12,799 --> 00:04:16,239
none of the services that we

128
00:04:14,159 --> 00:04:16,560
investigated provided high availability

129
00:04:16,238 --> 00:04:19,039
or

130
00:04:16,560 --> 00:04:20,639
failover for gmy connections and many of

131
00:04:19,040 --> 00:04:21,759
the services only focused on the

132
00:04:20,639 --> 00:04:24,720
subscribe rpc

133
00:04:21,759 --> 00:04:25,040
with no plans to add support for get set

134
00:04:24,720 --> 00:04:27,919
or

135
00:04:25,040 --> 00:04:29,440
capabilities in the future what we did

136
00:04:27,919 --> 00:04:31,120
find it was an extensive

137
00:04:29,440 --> 00:04:32,560
an extensive collection of reference

138
00:04:31,120 --> 00:04:35,280
work for gnmi

139
00:04:32,560 --> 00:04:36,720
on the open config github but while

140
00:04:35,280 --> 00:04:38,320
there were lots of individual components

141
00:04:36,720 --> 00:04:43,840
there was really no robust system that

142
00:04:38,320 --> 00:04:43,840
was production ready for us

143
00:04:44,240 --> 00:04:48,160
so following this survey of existing

144
00:04:46,160 --> 00:04:49,919
systems we we came to the conclusion

145
00:04:48,160 --> 00:04:51,840
that none of them fit our needs and we

146
00:04:49,919 --> 00:04:53,680
decided to build our own

147
00:04:51,840 --> 00:04:55,520
with this new system we wanted a service

148
00:04:53,680 --> 00:04:58,800
that would provide highly available

149
00:04:55,520 --> 00:05:00,320
gmi streams to consumers with clustering

150
00:04:58,800 --> 00:05:01,680
as i mentioned our network is ever

151
00:05:00,320 --> 00:05:03,280
evolving and so is our network

152
00:05:01,680 --> 00:05:05,440
automation and tooling

153
00:05:03,280 --> 00:05:07,359
to accommodate this we wanted to allow

154
00:05:05,440 --> 00:05:09,360
for dynamic target target loading so

155
00:05:07,360 --> 00:05:11,600
that gmi targets and consumers

156
00:05:09,360 --> 00:05:15,520
are able to come and go without needing

157
00:05:11,600 --> 00:05:15,520
to redeploy or reconfigure the service

158
00:05:15,600 --> 00:05:20,479
much of our existing infrastructure is

159
00:05:18,320 --> 00:05:21,759
gmi unaware today so we also needed to

160
00:05:20,479 --> 00:05:24,400
be able to export our streaming

161
00:05:21,759 --> 00:05:25,919
telemetry data to non-gmi services such

162
00:05:24,400 --> 00:05:28,960
as our time series database

163
00:05:25,919 --> 00:05:30,560
or our big data platform we also wanted

164
00:05:28,960 --> 00:05:31,440
to reuse as much of the existing

165
00:05:30,560 --> 00:05:33,199
reference work

166
00:05:31,440 --> 00:05:35,199
as possible and we wanted to plan to

167
00:05:33,199 --> 00:05:37,199
support all of the rpcs

168
00:05:35,199 --> 00:05:39,280
that are provided by gmi as well as

169
00:05:37,199 --> 00:05:41,120
future extensibility

170
00:05:39,280 --> 00:05:42,960
lastly we wanted to help the community

171
00:05:41,120 --> 00:05:44,000
ease their way into gmi and streaming

172
00:05:42,960 --> 00:05:45,758
telemetry

173
00:05:44,000 --> 00:05:48,160
by providing a way to get up and running

174
00:05:45,759 --> 00:05:49,680
without needing to write any code

175
00:05:48,160 --> 00:05:52,080
to that end we built a service at

176
00:05:49,680 --> 00:05:53,759
netflix called gnmi gateway

177
00:05:52,080 --> 00:05:55,758
and we've recently open sourced it as a

178
00:05:53,759 --> 00:05:56,400
contribution to the open config working

179
00:05:55,759 --> 00:05:57,919
group

180
00:05:56,400 --> 00:06:01,840
and we hope that in doing so we can help

181
00:05:57,919 --> 00:06:03,440
to enable easier adoption of gnmi

182
00:06:01,840 --> 00:06:05,520
while you couldn't before run a single

183
00:06:03,440 --> 00:06:06,319
tool to integrate gmi into all of your

184
00:06:05,520 --> 00:06:09,680
existing

185
00:06:06,319 --> 00:06:11,520
network automation now you can

186
00:06:09,680 --> 00:06:12,400
while we also understand that not

187
00:06:11,520 --> 00:06:13,840
everyone builds their tooling

188
00:06:12,400 --> 00:06:15,758
infrastructure the same as us so we

189
00:06:13,840 --> 00:06:18,840
wanted to provide further flexibility by

190
00:06:15,759 --> 00:06:20,800
enabling a few different deployment

191
00:06:18,840 --> 00:06:22,000
scenarios

192
00:06:20,800 --> 00:06:23,360
to start out with the simplest

193
00:06:22,000 --> 00:06:24,479
deployment scenario we have just a

194
00:06:23,360 --> 00:06:27,280
single instance of

195
00:06:24,479 --> 00:06:28,560
gnmi gateway with no clustering enabled

196
00:06:27,280 --> 00:06:30,239
this is useful for

197
00:06:28,560 --> 00:06:32,560
testing the service out or for

198
00:06:30,240 --> 00:06:33,759
situations where high availability just

199
00:06:32,560 --> 00:06:35,919
isn't required

200
00:06:33,759 --> 00:06:37,680
here we have a single instance of gmi

201
00:06:35,919 --> 00:06:40,159
gateway that uses a target loader to

202
00:06:37,680 --> 00:06:41,680
pull in a list of targets to connect to

203
00:06:40,160 --> 00:06:43,680
gmi gateway will make all the

204
00:06:41,680 --> 00:06:44,479
connections to the gmi targets that are

205
00:06:43,680 --> 00:06:45,759
on the right

206
00:06:44,479 --> 00:06:48,400
that are on the left hand side of this

207
00:06:45,759 --> 00:06:50,639
diagram on the right hand side gmi

208
00:06:48,400 --> 00:06:53,198
gateway serves a gmi subscribe interface

209
00:06:50,639 --> 00:06:56,240
that other gmi clients can connect to

210
00:06:53,199 --> 00:06:58,160
gmi clients for example may be tools

211
00:06:56,240 --> 00:07:00,840
with native gmi support or

212
00:06:58,160 --> 00:07:04,479
it could be a network operators running

213
00:07:00,840 --> 00:07:07,039
gmi from a cli on their laptop

214
00:07:04,479 --> 00:07:09,120
also on the right hand side we have gmi

215
00:07:07,039 --> 00:07:09,759
gateway forwarding data to non-gmi

216
00:07:09,120 --> 00:07:12,720
services

217
00:07:09,759 --> 00:07:12,720
via exporters

218
00:07:14,880 --> 00:07:18,560
this second deployment scenario is the

219
00:07:16,639 --> 00:07:20,560
more typical scenario where you require

220
00:07:18,560 --> 00:07:22,319
clustering and high availability

221
00:07:20,560 --> 00:07:23,919
here there are multiple gmi gateway

222
00:07:22,319 --> 00:07:25,840
instances that are all coordinating

223
00:07:23,919 --> 00:07:27,919
target connections amongst themselves

224
00:07:25,840 --> 00:07:29,280
as well as replicating gmi data to each

225
00:07:27,919 --> 00:07:31,840
other

226
00:07:29,280 --> 00:07:33,520
in this diagram the gmi clients on the

227
00:07:31,840 --> 00:07:34,318
right hand side make connections through

228
00:07:33,520 --> 00:07:36,159
an nlb

229
00:07:34,319 --> 00:07:37,759
or a network load balancer that will

230
00:07:36,160 --> 00:07:39,599
distribute client connections amongst

231
00:07:37,759 --> 00:07:41,680
the cluster instances

232
00:07:39,599 --> 00:07:43,039
this nlb could be a layer 4 load

233
00:07:41,680 --> 00:07:45,440
balancer such as we use

234
00:07:43,039 --> 00:07:47,280
a layer 7 load balancer or anything else

235
00:07:45,440 --> 00:07:49,199
that fits your needs such as dns load

236
00:07:47,280 --> 00:07:51,280
balancing

237
00:07:49,199 --> 00:07:53,360
in a practical deployment the gmi

238
00:07:51,280 --> 00:07:55,119
gateway instances in this diagram

239
00:07:53,360 --> 00:07:57,440
could be docker containers cloud

240
00:07:55,120 --> 00:07:59,039
instances or servers in a data center

241
00:07:57,440 --> 00:08:01,599
whichever is most appropriate for your

242
00:07:59,039 --> 00:08:01,599
situation

243
00:08:07,120 --> 00:08:10,720
so going back to a scenario without

244
00:08:08,720 --> 00:08:13,039
clustering you also have the ability to

245
00:08:10,720 --> 00:08:14,400
detach the exporter components from gmi

246
00:08:13,039 --> 00:08:16,159
gateway and run them on a separate

247
00:08:14,400 --> 00:08:18,239
server

248
00:08:16,160 --> 00:08:20,400
we find this useful in situations where

249
00:08:18,240 --> 00:08:22,000
an exporter is performing a non-trivial

250
00:08:20,400 --> 00:08:23,198
workload that requires dedicated

251
00:08:22,000 --> 00:08:25,599
resources or

252
00:08:23,199 --> 00:08:27,280
where we want to separate gmi gateway

253
00:08:25,599 --> 00:08:28,960
and an exporter for fine deployment

254
00:08:27,280 --> 00:08:30,559
control

255
00:08:28,960 --> 00:08:32,718
in this case the exporter on the right

256
00:08:30,560 --> 00:08:34,719
hand side forms a gmi connection

257
00:08:32,719 --> 00:08:36,560
into the gnmi gateway instance on the

258
00:08:34,719 --> 00:08:37,360
left to subscribe to the telemetry

259
00:08:36,559 --> 00:08:39,679
stream

260
00:08:37,360 --> 00:08:42,080
the exporter then forwards that data to

261
00:08:39,679 --> 00:08:43,838
the non-gmi services

262
00:08:42,080 --> 00:08:45,920
other gmi clients can still form

263
00:08:43,839 --> 00:08:48,640
connections to the gmi gateway instance

264
00:08:45,920 --> 00:08:48,640
on the left as well

265
00:08:49,920 --> 00:08:52,560
in this fourth and final deployment

266
00:08:51,279 --> 00:08:54,720
scenario we expand on the last

267
00:08:52,560 --> 00:08:57,119
deployment but now with clustering

268
00:08:54,720 --> 00:08:58,720
here we have a cluster of gnmi gateway

269
00:08:57,120 --> 00:09:00,800
instances on the left that form

270
00:08:58,720 --> 00:09:02,240
connections to gmi targets

271
00:09:00,800 --> 00:09:04,240
and on the right hand side there are one

272
00:09:02,240 --> 00:09:05,680
or more exporter clusters that form

273
00:09:04,240 --> 00:09:08,080
their upstream connections

274
00:09:05,680 --> 00:09:09,680
through an nlb this scenario is a very

275
00:09:08,080 --> 00:09:11,680
close model for what our real world

276
00:09:09,680 --> 00:09:14,640
deployment at netflix looks like for

277
00:09:11,680 --> 00:09:14,640
gnmi gateway

278
00:09:17,680 --> 00:09:21,279
to enable these clustering features in

279
00:09:19,279 --> 00:09:23,600
gmi gateway we chose to integrate with

280
00:09:21,279 --> 00:09:25,200
apache zookeeper for coordination and

281
00:09:23,600 --> 00:09:26,959
leader election

282
00:09:25,200 --> 00:09:28,640
apache zookeeper is a distributed

283
00:09:26,959 --> 00:09:29,760
configuration service that provides

284
00:09:28,640 --> 00:09:32,080
strong consistency

285
00:09:29,760 --> 00:09:33,760
and service synchronization we chose

286
00:09:32,080 --> 00:09:34,240
zookeeper because the service was from

287
00:09:33,760 --> 00:09:36,480
was

288
00:09:34,240 --> 00:09:38,720
familiar to us and provided all the

289
00:09:36,480 --> 00:09:40,240
features that we that we required

290
00:09:38,720 --> 00:09:41,680
if you're unfamiliar with apache

291
00:09:40,240 --> 00:09:44,000
zookeeper please be sure to check out

292
00:09:41,680 --> 00:09:45,760
the gmi gateway readme on github which

293
00:09:44,000 --> 00:09:47,519
includes some further details

294
00:09:45,760 --> 00:09:51,439
as well as a command to get started with

295
00:09:47,519 --> 00:09:53,760
the development instance of zookeeper

296
00:09:51,440 --> 00:09:55,040
gmi gateway does provide an interface to

297
00:09:53,760 --> 00:09:56,080
extend all of these clustering

298
00:09:55,040 --> 00:09:58,079
capabilities to

299
00:09:56,080 --> 00:09:59,680
other services for example there have

300
00:09:58,080 --> 00:10:01,680
been some discussions about adding

301
00:09:59,680 --> 00:10:02,479
support for etcd which we may consider

302
00:10:01,680 --> 00:10:04,319
in the future

303
00:10:02,480 --> 00:10:07,519
but you're also welcome to add your own

304
00:10:04,320 --> 00:10:07,519
clustering services as well

305
00:10:09,839 --> 00:10:13,440
i won't go over everything in this

306
00:10:11,279 --> 00:10:14,800
diagram but this is a short overview of

307
00:10:13,440 --> 00:10:17,279
how the clustering works

308
00:10:14,800 --> 00:10:19,040
within the connection manager thread

309
00:10:17,279 --> 00:10:20,160
target connection metadata is received

310
00:10:19,040 --> 00:10:22,000
from a target loader

311
00:10:20,160 --> 00:10:24,000
which is in the upper right hand corner

312
00:10:22,000 --> 00:10:25,279
and that starts the process of gmi

313
00:10:24,000 --> 00:10:27,760
gateway acquiring

314
00:10:25,279 --> 00:10:29,839
the lock for a target once a walk is

315
00:10:27,760 --> 00:10:31,439
acquired a connection to a gmi target is

316
00:10:29,839 --> 00:10:32,000
formed and messages are forwarded to the

317
00:10:31,440 --> 00:10:34,640
gmi

318
00:10:32,000 --> 00:10:35,200
cache in memory additionally connections

319
00:10:34,640 --> 00:10:36,880
are formed

320
00:10:35,200 --> 00:10:38,880
other gmi gateway instances to

321
00:10:36,880 --> 00:10:39,680
facilitate the r to facilitate the

322
00:10:38,880 --> 00:10:42,959
replication

323
00:10:39,680 --> 00:10:42,959
of received telemetry

324
00:10:44,560 --> 00:10:48,800
so in order to form these connections to

325
00:10:46,640 --> 00:10:51,120
the gmi targets we require

326
00:10:48,800 --> 00:10:52,640
metadata about the target so such as its

327
00:10:51,120 --> 00:10:56,160
address credentials

328
00:10:52,640 --> 00:10:58,000
tls certificates etc target loaders are

329
00:10:56,160 --> 00:11:00,079
a plug-in component that allows gmi

330
00:10:58,000 --> 00:11:02,800
gateway to load this required metadata

331
00:11:00,079 --> 00:11:04,719
for each target connection for example

332
00:11:02,800 --> 00:11:05,439
target loaders can watch an nms such as

333
00:11:04,720 --> 00:11:08,800
nat box

334
00:11:05,440 --> 00:11:10,560
for devices with a specific tag or

335
00:11:08,800 --> 00:11:12,800
a target loader could form connections

336
00:11:10,560 --> 00:11:14,560
to other automation services that expose

337
00:11:12,800 --> 00:11:18,000
a gmi subscribe interface

338
00:11:14,560 --> 00:11:18,000
such as an snmp polar

339
00:11:18,640 --> 00:11:22,240
to get you started we've included a few

340
00:11:20,640 --> 00:11:23,519
target loaders that can be used directly

341
00:11:22,240 --> 00:11:24,320
from the command line if you don't want

342
00:11:23,519 --> 00:11:26,959
to build your own

343
00:11:24,320 --> 00:11:29,440
but if you do want to build your own

344
00:11:26,959 --> 00:11:32,160
there is a going interface pictured here

345
00:11:29,440 --> 00:11:33,519
that you can extend fairly easily

346
00:11:32,160 --> 00:11:36,319
the target loaders that we've included

347
00:11:33,519 --> 00:11:37,120
so far are for a watch text file as well

348
00:11:36,320 --> 00:11:42,160
as

349
00:11:37,120 --> 00:11:44,320
netbox like i mentioned

350
00:11:42,160 --> 00:11:45,760
this diagram shows the inner workings of

351
00:11:44,320 --> 00:11:47,279
the target loader thread which is the

352
00:11:45,760 --> 00:11:48,399
input to the clustering thread that you

353
00:11:47,279 --> 00:11:49,920
just saw

354
00:11:48,399 --> 00:11:51,440
here the target loader collects the

355
00:11:49,920 --> 00:11:52,880
necessary data for each

356
00:11:51,440 --> 00:11:54,639
connection and then forwards new

357
00:11:52,880 --> 00:11:55,360
connections to the connection manager

358
00:11:54,639 --> 00:11:58,880
thread

359
00:11:55,360 --> 00:11:58,880
that you saw on the previous diagram

360
00:12:00,880 --> 00:12:04,880
on the other side of gnmi gateway we

361
00:12:02,959 --> 00:12:06,638
have exporters which forward data to

362
00:12:04,880 --> 00:12:08,720
non-gmi services

363
00:12:06,639 --> 00:12:10,639
for example exporters can forward data

364
00:12:08,720 --> 00:12:12,800
to your nms to keep collected state

365
00:12:10,639 --> 00:12:14,959
up to date or forward metrics to a time

366
00:12:12,800 --> 00:12:16,560
series database

367
00:12:14,959 --> 00:12:18,399
as with target loaders we've included a

368
00:12:16,560 --> 00:12:20,319
few exporters to help get you started

369
00:12:18,399 --> 00:12:20,880
from the command line such as prometheus

370
00:12:20,320 --> 00:12:23,760
atlas

371
00:12:20,880 --> 00:12:25,519
and kafka but like target loaders

372
00:12:23,760 --> 00:12:28,800
exporters are extendable as well with a

373
00:12:25,519 --> 00:12:28,800
simple go buying interface

374
00:12:29,839 --> 00:12:32,959
and this is just a quick example of some

375
00:12:31,440 --> 00:12:34,959
of the data that you might see in

376
00:12:32,959 --> 00:12:36,319
another system as it was collected with

377
00:12:34,959 --> 00:12:38,239
gnmi gateway

378
00:12:36,320 --> 00:12:39,839
here we have a graph of a port channel's

379
00:12:38,240 --> 00:12:43,360
transmitted bits per second

380
00:12:39,839 --> 00:12:43,360
over time in prometheus

381
00:12:47,120 --> 00:12:51,040
and this diagram shows the flow of

382
00:12:48,959 --> 00:12:52,000
messages from the gmi cache to the

383
00:12:51,040 --> 00:12:54,160
subscribe server

384
00:12:52,000 --> 00:12:55,760
and exporters this is a fairly

385
00:12:54,160 --> 00:12:57,279
straightforward process so i won't go

386
00:12:55,760 --> 00:12:59,680
over it here but i did include it for

387
00:12:57,279 --> 00:12:59,680
reference

388
00:13:02,639 --> 00:13:06,000
in addition to all the benefits that

389
00:13:04,000 --> 00:13:08,079
come with clustering target loaders and

390
00:13:06,000 --> 00:13:10,240
exporters we've included a few extras to

391
00:13:08,079 --> 00:13:11,599
help ease the deployment of gmi gateway

392
00:13:10,240 --> 00:13:14,079
such as a docker file

393
00:13:11,600 --> 00:13:15,600
for easy testing and deployment we've

394
00:13:14,079 --> 00:13:17,839
also included some examples in the

395
00:13:15,600 --> 00:13:19,519
github repo for various gnmi gateway

396
00:13:17,839 --> 00:13:20,000
configurations as well as how to get

397
00:13:19,519 --> 00:13:23,680
started

398
00:13:20,000 --> 00:13:25,040
with gnmi gateway and prometheus

399
00:13:23,680 --> 00:13:26,880
we've also included the design

400
00:13:25,040 --> 00:13:28,800
documentations and diagram

401
00:13:26,880 --> 00:13:30,560
and diagrams in the github repo that we

402
00:13:28,800 --> 00:13:34,719
used while building gnmi gateway for

403
00:13:30,560 --> 00:13:36,800
others to reference

404
00:13:34,720 --> 00:13:38,480
so while we're very happy with how far

405
00:13:36,800 --> 00:13:38,800
we've come with gmi gateway we still

406
00:13:38,480 --> 00:13:40,800
have

407
00:13:38,800 --> 00:13:43,120
a lot of work planned while we plan to

408
00:13:40,800 --> 00:13:45,519
support for all four gmi rpcs we

409
00:13:43,120 --> 00:13:47,120
currently only use the subscribe rpc

410
00:13:45,519 --> 00:13:49,440
so building out functionality for the

411
00:13:47,120 --> 00:13:50,880
set rpc is up next

412
00:13:49,440 --> 00:13:52,800
we also want to develop additional

413
00:13:50,880 --> 00:13:53,680
exporters to help drive the integration

414
00:13:52,800 --> 00:13:55,599
of gnmi

415
00:13:53,680 --> 00:13:57,199
into more traditional automation tools

416
00:13:55,600 --> 00:13:59,760
and infrastructure

417
00:13:57,199 --> 00:14:00,800
finally docs and examples can always be

418
00:13:59,760 --> 00:14:02,639
improved and that's something that we

419
00:14:00,800 --> 00:14:04,399
want to add more of we hope to soon have

420
00:14:02,639 --> 00:14:06,320
more configuration examples

421
00:14:04,399 --> 00:14:07,839
as well as a more extensive deployment

422
00:14:06,320 --> 00:14:11,040
guide that goes beyond what's currently

423
00:14:07,839 --> 00:14:11,040
available in the readme

424
00:14:12,880 --> 00:14:17,120
to help you get up and running here's a

425
00:14:14,720 --> 00:14:18,639
quick demo of gmi gateway being started

426
00:14:17,120 --> 00:14:21,199
along with prometheus that i hope you

427
00:14:18,639 --> 00:14:21,199
find useful

428
00:14:23,040 --> 00:14:28,319
here i'm going to show you how to get

429
00:14:24,720 --> 00:14:29,760
started with gnmi gateway and prometheus

430
00:14:28,320 --> 00:14:31,519
first thing you'll want to do is head

431
00:14:29,760 --> 00:14:35,600
over to github and grab

432
00:14:31,519 --> 00:14:35,600
the url to git clone the repo

433
00:14:37,600 --> 00:14:41,199
you'll need to have git installed for

434
00:14:42,839 --> 00:14:46,959
this

435
00:14:44,480 --> 00:14:48,240
you can change directory into the gnmi

436
00:14:46,959 --> 00:14:50,638
gateway

437
00:14:48,240 --> 00:14:50,639
folder

438
00:14:52,320 --> 00:14:59,279
here we have an examples directory

439
00:14:55,760 --> 00:15:01,439
that contains a gnmi prometheus example

440
00:14:59,279 --> 00:15:02,959
within there there is a readme that

441
00:15:01,440 --> 00:15:05,199
contains instructions on how to get

442
00:15:02,959 --> 00:15:07,279
started

443
00:15:05,199 --> 00:15:08,279
the first thing you want to do is copy

444
00:15:07,279 --> 00:15:11,040
the target

445
00:15:08,279 --> 00:15:12,880
example.json file into the example

446
00:15:11,040 --> 00:15:14,160
directory and modify it to match the

447
00:15:12,880 --> 00:15:18,720
details of your

448
00:15:14,160 --> 00:15:18,719
network router let's do that now

449
00:15:23,839 --> 00:15:27,279
you'll want to name the file

450
00:15:25,480 --> 00:15:28,959
targets.json so that way

451
00:15:27,279 --> 00:15:31,680
you don't have to modify the docker file

452
00:15:28,959 --> 00:15:31,680
to get started

453
00:15:33,279 --> 00:15:41,839
go ahead and open that file for editing

454
00:15:42,320 --> 00:15:47,600
so at the top you'll notice that we have

455
00:15:44,880 --> 00:15:48,880
one request here named default

456
00:15:47,600 --> 00:15:50,639
this request contains a single

457
00:15:48,880 --> 00:15:53,680
subscription for the path

458
00:15:50,639 --> 00:15:54,160
interfaces this will return all of the

459
00:15:53,680 --> 00:15:56,319
data

460
00:15:54,160 --> 00:15:57,360
that is contained under the interfaces

461
00:15:56,320 --> 00:16:00,079
portion of the tree

462
00:15:57,360 --> 00:16:00,079
on our router

463
00:16:00,959 --> 00:16:04,560
if you move down to the bottom of the

464
00:16:02,160 --> 00:16:06,639
file you can begin to configure your

465
00:16:04,560 --> 00:16:07,839
target

466
00:16:06,639 --> 00:16:11,279
the first thing you'll want to do is

467
00:16:07,839 --> 00:16:11,279
give the target a unique name

468
00:16:20,720 --> 00:16:24,959
next you'll want to put in the address

469
00:16:22,399 --> 00:16:24,959
of the router

470
00:16:33,680 --> 00:16:38,079
along with the port that gmi runs on

471
00:16:38,560 --> 00:16:50,959
next you'll need to supply the

472
00:16:39,759 --> 00:16:54,639
credentials for the router

473
00:16:50,959 --> 00:16:54,638
be sure to keep your password secret

474
00:16:54,880 --> 00:16:58,800
next you'll see that we have a request

475
00:16:57,199 --> 00:17:00,319
listed as default

476
00:16:58,800 --> 00:17:02,160
if we head back up to the top you'll

477
00:17:00,320 --> 00:17:05,839
notice that that is the name of

478
00:17:02,160 --> 00:17:05,839
the first request

479
00:17:07,520 --> 00:17:10,879
this example assumes that your router

480
00:17:09,119 --> 00:17:12,559
does not have tls enabled if it does

481
00:17:10,880 --> 00:17:13,439
have tls you'll need to remove this no

482
00:17:12,559 --> 00:17:15,520
tls field

483
00:17:13,439 --> 00:17:16,720
as well as add tls certificates into the

484
00:17:15,520 --> 00:17:19,918
docker file

485
00:17:16,720 --> 00:17:23,439
we won't be covering that in this demo

486
00:17:19,919 --> 00:17:23,439
let's go ahead and save that file

487
00:17:30,720 --> 00:17:35,120
next we'll want to grab the commands

488
00:17:32,400 --> 00:17:35,120
that we need to run

489
00:17:43,919 --> 00:17:48,400
first thing we want to do is build the

490
00:17:45,600 --> 00:17:48,399
docker container

491
00:17:51,919 --> 00:17:55,520
we do include the docker file with the

492
00:17:53,679 --> 00:17:56,960
example

493
00:17:55,520 --> 00:17:59,200
in order to build it you need to be at

494
00:17:56,960 --> 00:17:59,520
the root of the gnmi gateway directory

495
00:17:59,200 --> 00:18:01,520
as

496
00:17:59,520 --> 00:18:02,960
docker imposes restrictions that prevent

497
00:18:01,520 --> 00:18:05,360
you from building from within the

498
00:18:02,960 --> 00:18:07,280
examples directory

499
00:18:05,360 --> 00:18:15,840
i can run the file from run the command

500
00:18:07,280 --> 00:18:15,840
from the readme now

501
00:18:18,160 --> 00:18:22,240
next we'll want to create a network that

502
00:18:20,400 --> 00:18:25,120
will allow two docker containers to

503
00:18:22,240 --> 00:18:26,240
communicate with each other

504
00:18:25,120 --> 00:18:29,360
we'll be setting up two docker

505
00:18:26,240 --> 00:18:32,559
containers next one runs gmi gateway

506
00:18:29,360 --> 00:18:43,840
and the other one runs prometheus let's

507
00:18:32,559 --> 00:18:43,840
create that network now

508
00:18:50,000 --> 00:18:53,919
you can go ahead and start the first

509
00:18:51,440 --> 00:18:53,919
container

510
00:18:54,640 --> 00:18:58,080
this command will start our gnmi gateway

511
00:18:57,039 --> 00:18:59,400
instance

512
00:18:58,080 --> 00:19:01,678
and it will point it at that

513
00:18:59,400 --> 00:19:04,240
targets.json file in our examples

514
00:19:01,679 --> 00:19:04,240
directory

515
00:19:04,799 --> 00:19:08,840
additionally this will expose the port

516
00:19:06,799 --> 00:19:11,679
that the prometheus exporter is running

517
00:19:08,840 --> 00:19:13,760
on here you can see that gmi gateway

518
00:19:11,679 --> 00:19:15,440
has started without clustering enabled

519
00:19:13,760 --> 00:19:17,280
we don't need clustering here because

520
00:19:15,440 --> 00:19:19,039
there's only a single instance of gnmy

521
00:19:17,280 --> 00:19:20,080
gateway running

522
00:19:19,039 --> 00:19:22,080
you can see that it starts the

523
00:19:20,080 --> 00:19:22,720
connection manager as well as the gmi

524
00:19:22,080 --> 00:19:25,840
server

525
00:19:22,720 --> 00:19:25,840
and the prometheus exporter

526
00:19:26,559 --> 00:19:29,918
down below you'll see that our target

527
00:19:28,880 --> 00:19:32,080
demo gmi

528
00:19:29,919 --> 00:19:33,520
router connecting and subscribing and

529
00:19:32,080 --> 00:19:36,399
then it connects

530
00:19:33,520 --> 00:19:38,960
during this process gmi gateway begins

531
00:19:36,400 --> 00:19:42,880
to sync with the router and

532
00:19:38,960 --> 00:19:42,880
populate its initial cache with data

533
00:19:43,039 --> 00:19:47,840
as you can see after a few seconds our

534
00:19:45,200 --> 00:19:50,400
demo gmi router is synced

535
00:19:47,840 --> 00:19:51,360
after the router is synced gmi gateway

536
00:19:50,400 --> 00:19:54,960
will only receive

537
00:19:51,360 --> 00:20:07,840
updates from the gmi target

538
00:19:54,960 --> 00:20:07,840
i can go ahead and open a new window

539
00:20:07,919 --> 00:20:11,440
and we'll grab the last command run

540
00:20:13,200 --> 00:20:16,640
this command will go ahead and start

541
00:20:14,799 --> 00:20:19,840
prometheus

542
00:20:16,640 --> 00:20:22,000
you'll notice that we already supply the

543
00:20:19,840 --> 00:20:24,879
prometheus config file so you don't have

544
00:20:22,000 --> 00:20:24,880
to create one yourself

545
00:20:27,520 --> 00:20:31,280
there we go and now you can see that

546
00:20:29,360 --> 00:20:35,840
prometheus has started

547
00:20:31,280 --> 00:20:35,840
you can head on over to a web browser

548
00:20:37,600 --> 00:20:41,439
and we can pull up the prometheus web

549
00:20:39,039 --> 00:20:44,480
interface

550
00:20:41,440 --> 00:20:45,039
if you go into the targets page under

551
00:20:44,480 --> 00:20:46,720
status

552
00:20:45,039 --> 00:20:48,080
you can see that we have one endpoint

553
00:20:46,720 --> 00:20:51,200
for gnmi gateway

554
00:20:48,080 --> 00:20:51,918
and it is up the last scrape was five

555
00:20:51,200 --> 00:20:55,919
seconds ago

556
00:20:51,919 --> 00:20:55,919
and the scrape took about two seconds

557
00:20:56,000 --> 00:20:59,520
if we head over the graph tab you can

558
00:20:59,120 --> 00:21:02,080
see

559
00:20:59,520 --> 00:21:03,280
within the metrics list that all of our

560
00:21:02,080 --> 00:21:05,439
interfaces paths

561
00:21:03,280 --> 00:21:07,840
from open config and gmi have begun to

562
00:21:05,440 --> 00:21:09,440
populate here

563
00:21:07,840 --> 00:21:11,039
these are all of the automatically

564
00:21:09,440 --> 00:21:14,559
converted path names

565
00:21:11,039 --> 00:21:17,440
from the open config tree we can select

566
00:21:14,559 --> 00:21:18,399
interfaces interface state counters out

567
00:21:17,440 --> 00:21:21,280
octets

568
00:21:18,400 --> 00:21:24,559
in order to get to get the interface

569
00:21:21,280 --> 00:21:24,559
transmit bits per second

570
00:21:29,200 --> 00:21:33,200
you can get the rate over one minute

571
00:21:33,600 --> 00:21:38,320
and we can multiply that by eight

572
00:21:35,360 --> 00:21:40,879
because we want bits and not octanes

573
00:21:38,320 --> 00:21:43,200
so if we run that you'll see that we can

574
00:21:40,880 --> 00:21:46,080
begin to get values out

575
00:21:43,200 --> 00:21:47,039
if we head on over to the graph you can

576
00:21:46,080 --> 00:21:49,439
see data begin

577
00:21:47,039 --> 00:21:51,200
beginning to populate here if we run

578
00:21:49,440 --> 00:21:52,880
this

579
00:21:51,200 --> 00:21:59,840
you'll see that data is slowly beginning

580
00:21:52,880 --> 00:21:59,840
to filter in

581
00:22:02,559 --> 00:22:07,520
if we let this run for a while you'll

582
00:22:04,240 --> 00:22:09,280
see that data will continue to populate

583
00:22:07,520 --> 00:22:10,840
down below you'll see a list of all of

584
00:22:09,280 --> 00:22:12,879
the interfaces that are being graphed

585
00:22:10,840 --> 00:22:14,799
currently

586
00:22:12,880 --> 00:22:27,840
if we want to select just one of them we

587
00:22:14,799 --> 00:22:27,840
can do that too

588
00:22:28,880 --> 00:22:34,159
and there we go we have the graph for a

589
00:22:30,960 --> 00:22:34,159
single port channel interface

590
00:22:35,440 --> 00:22:41,679
and that's it that's all you need to get

591
00:22:37,440 --> 00:22:43,600
started with gmi gateway and prometheus

592
00:22:41,679 --> 00:22:44,640
that's all i have for today i'm glad

593
00:22:43,600 --> 00:22:46,399
that i was able to share this

594
00:22:44,640 --> 00:22:47,840
information about streaming telemetry

595
00:22:46,400 --> 00:22:49,440
and gmi with you

596
00:22:47,840 --> 00:22:51,199
as you've seen it's easy to get up and

597
00:22:49,440 --> 00:22:53,120
running with gmi and i encourage you to

598
00:22:51,200 --> 00:22:55,120
go try it on your network too

599
00:22:53,120 --> 00:22:56,959
here's the ur the url for the code on

600
00:22:55,120 --> 00:22:58,719
github please do check it out

601
00:22:56,960 --> 00:23:00,400
if anyone has any questions or feedback

602
00:22:58,720 --> 00:23:01,120
after today please feel free to shoot me

603
00:23:00,400 --> 00:23:03,520
an email

604
00:23:01,120 --> 00:23:06,840
or open an issue on github we do have

605
00:23:03,520 --> 00:23:09,840
some time now for questions if there are

606
00:23:06,840 --> 00:23:09,840
any

607
00:23:13,919 --> 00:23:18,640
excellent once again my name is michael

608
00:23:16,240 --> 00:23:20,559
voidy i'm with the

609
00:23:18,640 --> 00:23:22,720
lordy with the program committee and i

610
00:23:20,559 --> 00:23:25,440
have the

611
00:23:22,720 --> 00:23:28,320
pleasure of having colin mcintyre from

612
00:23:25,440 --> 00:23:32,080
netflix here with us

613
00:23:28,320 --> 00:23:36,399
there are two questions posted

614
00:23:32,080 --> 00:23:38,960
you go ahead cohen

615
00:23:36,400 --> 00:23:41,360
so it looks like we have uh two

616
00:23:38,960 --> 00:23:44,799
questions so far

617
00:23:41,360 --> 00:23:46,959
uh the first one from uh rita

618
00:23:44,799 --> 00:23:49,279
is uh can i talk about the scaling

619
00:23:46,960 --> 00:23:53,039
numbers for uh gmi gateway so

620
00:23:49,279 --> 00:23:54,559
um uh

621
00:23:53,039 --> 00:23:56,559
to give you an idea of what our

622
00:23:54,559 --> 00:24:00,399
deployment of gmi

623
00:23:56,559 --> 00:24:04,158
gateway looks like at netflix uh we have

624
00:24:00,400 --> 00:24:08,080
um about a few hundred devices

625
00:24:04,159 --> 00:24:08,080
running on our uh

626
00:24:08,799 --> 00:24:13,520
we have a few hundred devices running in

627
00:24:11,440 --> 00:24:17,120
our deployment of gmi gateway

628
00:24:13,520 --> 00:24:20,320
we have uh typically three

629
00:24:17,120 --> 00:24:22,879
instances running in a single cluster

630
00:24:20,320 --> 00:24:25,360
um handling those hundred devices uh in

631
00:24:22,880 --> 00:24:29,360
our test deployment we have

632
00:24:25,360 --> 00:24:30,959
um a few

633
00:24:29,360 --> 00:24:34,240
hundred devices running on a single

634
00:24:30,960 --> 00:24:34,240
instance of gmi gateway

635
00:24:34,720 --> 00:24:42,080
so we find that the uh

636
00:24:37,919 --> 00:24:44,400
um uh that really a single instance of

637
00:24:42,080 --> 00:24:48,080
jmi gateway can handle

638
00:24:44,400 --> 00:24:50,000
all of our devices we haven't done any

639
00:24:48,080 --> 00:24:50,960
testing on the upper limit for gmi

640
00:24:50,000 --> 00:24:52,159
gateway

641
00:24:50,960 --> 00:24:54,400
but that's definitely something i want

642
00:24:52,159 --> 00:24:54,400
to do

643
00:24:57,360 --> 00:25:02,879
tony asked what os's and vendors have

644
00:25:00,559 --> 00:25:04,240
been able to use with gmi gateway i will

645
00:25:02,880 --> 00:25:06,159
mention that one of the great benefits

646
00:25:04,240 --> 00:25:06,960
of gmi is that it's based on a protobuf

647
00:25:06,159 --> 00:25:11,520
model that

648
00:25:06,960 --> 00:25:11,520
has code generated for

649
00:25:11,600 --> 00:25:16,799
lots of different programming languages

650
00:25:14,640 --> 00:25:18,240
and it's therefore supported on lots of

651
00:25:16,799 --> 00:25:20,639
uh platforms

652
00:25:18,240 --> 00:25:21,919
um so really any implementation of gmi

653
00:25:20,640 --> 00:25:24,240
should be supported with

654
00:25:21,919 --> 00:25:26,480
uh any implementation of gmail and open

655
00:25:24,240 --> 00:25:27,600
config should be supported by gmi

656
00:25:26,480 --> 00:25:30,559
gateway

657
00:25:27,600 --> 00:25:33,760
we specifically have primarily used gmi

658
00:25:30,559 --> 00:25:37,520
gateway with our aristo devices

659
00:25:33,760 --> 00:25:42,158
and we've done some testing with

660
00:25:37,520 --> 00:25:45,520
at least one um

661
00:25:42,159 --> 00:25:48,080
one wi-fi vendor who provides a cloud

662
00:25:45,520 --> 00:25:50,158
implementation of gmi gateway uh to

663
00:25:48,080 --> 00:25:52,480
allow us to access our devices

664
00:25:50,159 --> 00:25:53,440
uh and we also have a few internal

665
00:25:52,480 --> 00:25:56,640
services that

666
00:25:53,440 --> 00:25:59,840
uh run gmi gateway as well

667
00:25:56,640 --> 00:26:01,440
um i'm sorry that run the gm

668
00:25:59,840 --> 00:26:03,360
gmi subscribe interface as well that we

669
00:26:01,440 --> 00:26:06,880
connect gm gateway to

670
00:26:03,360 --> 00:26:06,879
uh in addition to our devices

671
00:26:09,039 --> 00:26:15,679
um barry asked uh

672
00:26:13,760 --> 00:26:17,840
are these examples for that clustering

673
00:26:15,679 --> 00:26:19,440
case or are there some simpler ones

674
00:26:17,840 --> 00:26:21,199
i'll need to rewatch it because it was

675
00:26:19,440 --> 00:26:24,559
going fast uh

676
00:26:21,200 --> 00:26:27,600
so um there are the four examples there

677
00:26:24,559 --> 00:26:30,480
uh there's the first example was

678
00:26:27,600 --> 00:26:31,840
uh for a setup without clustering so you

679
00:26:30,480 --> 00:26:32,480
don't need an instance of zookeeper

680
00:26:31,840 --> 00:26:34,639
setup

681
00:26:32,480 --> 00:26:36,880
um so if you just want to go try out gmi

682
00:26:34,640 --> 00:26:40,320
gateway uh you can basically do

683
00:26:36,880 --> 00:26:43,360
set up an instance the same as i just

684
00:26:40,320 --> 00:26:43,918
did in the demo uh where you have a

685
00:26:43,360 --> 00:26:47,600
single

686
00:26:43,919 --> 00:26:50,080
uh instance running somewhere

687
00:26:47,600 --> 00:26:51,279
um so that tends to be pretty simple and

688
00:26:50,080 --> 00:26:52,320
you can just run that as a single

689
00:26:51,279 --> 00:26:53,919
command uh

690
00:26:52,320 --> 00:26:55,918
if you do want to start to scale up

691
00:26:53,919 --> 00:26:58,400
you'll need an instance of zookeeper

692
00:26:55,919 --> 00:27:00,400
and uh basically just point all of the

693
00:26:58,400 --> 00:27:02,720
gm iqa instances

694
00:27:00,400 --> 00:27:04,880
for instance and they will all begin to

695
00:27:02,720 --> 00:27:06,320
coordinate with each other

696
00:27:04,880 --> 00:27:08,000
but there's also more details on engine

697
00:27:06,320 --> 00:27:10,399
on my gateway readme uh but

698
00:27:08,000 --> 00:27:11,200
also feel free to open an issue if you

699
00:27:10,400 --> 00:27:13,360
have any

700
00:27:11,200 --> 00:27:14,559
uh additional questions or send me an

701
00:27:13,360 --> 00:27:17,600
email

702
00:27:14,559 --> 00:27:21,039
um do you have an api that follows open

703
00:27:17,600 --> 00:27:24,559
api standards um

704
00:27:21,039 --> 00:27:26,960
so uh gmi gateway is uh gmi

705
00:27:24,559 --> 00:27:27,760
and in gmi out which is based on product

706
00:27:26,960 --> 00:27:31,360
uh so

707
00:27:27,760 --> 00:27:32,559
i don't i'm not super familiar with open

708
00:27:31,360 --> 00:27:36,080
api so i'm gonna say

709
00:27:32,559 --> 00:27:39,760
no but i can follow up on that

710
00:27:36,080 --> 00:27:39,760
if you want to shoot me an email travis

711
00:27:42,960 --> 00:27:47,600
oleg asks uh prometheus is a pulling

712
00:27:45,840 --> 00:27:50,399
system how do you stream to one

713
00:27:47,600 --> 00:27:51,199
so uh urane prometheus actually is

714
00:27:50,399 --> 00:27:52,639
pulling uh

715
00:27:51,200 --> 00:27:54,240
which is what the exporter is doing so

716
00:27:52,640 --> 00:27:56,399
when gmy gateway starts up the

717
00:27:54,240 --> 00:27:59,919
prometheus exporter

718
00:27:56,399 --> 00:28:03,678
uh what's happening is uh

719
00:27:59,919 --> 00:28:08,159
the gmi gateway serves a um

720
00:28:03,679 --> 00:28:10,880
prometheus uh uh

721
00:28:08,159 --> 00:28:12,640
exporter web page that then prometheus

722
00:28:10,880 --> 00:28:14,000
is pointed at the gmi gateway instance

723
00:28:12,640 --> 00:28:16,159
and scrapes

724
00:28:14,000 --> 00:28:17,520
i will say that the prometheus example

725
00:28:16,159 --> 00:28:20,480
is just something that i kind of

726
00:28:17,520 --> 00:28:21,760
added in to use as a proof of concept we

727
00:28:20,480 --> 00:28:24,080
don't actually use

728
00:28:21,760 --> 00:28:25,200
uh prometheus at netflix uh or at least

729
00:28:24,080 --> 00:28:28,480
within the network space

730
00:28:25,200 --> 00:28:30,240
uh we primarily use a netflix build

731
00:28:28,480 --> 00:28:34,399
service called atlas

732
00:28:30,240 --> 00:28:37,760
um but yeah so prometheus pulls the

733
00:28:34,399 --> 00:28:37,760
metrics from gm gateway

734
00:28:38,559 --> 00:28:42,240
and oleg also asks do we have we

735
00:28:40,320 --> 00:28:46,080
consider telegraph influx db

736
00:28:42,240 --> 00:28:48,159
combination uh so uh

737
00:28:46,080 --> 00:28:49,520
there's i i think there's probably two

738
00:28:48,159 --> 00:28:51,919
questions there or maybe

739
00:28:49,520 --> 00:28:52,960
there are um so one was do we consider

740
00:28:51,919 --> 00:28:55,679
using telegraph

741
00:28:52,960 --> 00:28:57,679
uh instead of gmi gateway uh we did a

742
00:28:55,679 --> 00:28:58,080
look at telegraph and being able to send

743
00:28:57,679 --> 00:29:01,919
data

744
00:28:58,080 --> 00:29:05,199
to influx db um one of the

745
00:29:01,919 --> 00:29:08,240
uh i believe the telegraph

746
00:29:05,200 --> 00:29:08,240
gmi uh

747
00:29:09,520 --> 00:29:13,200
plugin was contributed by some folks at

748
00:29:12,480 --> 00:29:16,240
cisco

749
00:29:13,200 --> 00:29:17,200
uh and uses the same gmi library as gmai

750
00:29:16,240 --> 00:29:19,679
gateway

751
00:29:17,200 --> 00:29:21,840
the issue with telegraph was that there

752
00:29:19,679 --> 00:29:25,120
was no high availability and it only

753
00:29:21,840 --> 00:29:26,399
supported a uh basically like a static

754
00:29:25,120 --> 00:29:29,199
config file and

755
00:29:26,399 --> 00:29:31,760
it found it difficult to uh basically

756
00:29:29,200 --> 00:29:34,320
like dynamically load our targets and

757
00:29:31,760 --> 00:29:36,240
also it didn't really provide us uh

758
00:29:34,320 --> 00:29:37,520
inability to serve at the gmy subscribe

759
00:29:36,240 --> 00:29:39,120
interface so we could have

760
00:29:37,520 --> 00:29:41,840
various dynamic clients being able to

761
00:29:39,120 --> 00:29:41,840
connect and

762
00:29:42,399 --> 00:29:46,479
ask for data so that was one reason why

763
00:29:44,960 --> 00:29:47,279
we didn't go with telegraph and then we

764
00:29:46,480 --> 00:29:50,320
also

765
00:29:47,279 --> 00:29:52,320
uh have considered uh making a gmi

766
00:29:50,320 --> 00:29:53,520
gateway exporter for influx db it's just

767
00:29:52,320 --> 00:29:54,240
not something that we've gotten around

768
00:29:53,520 --> 00:29:55,440
to so

769
00:29:54,240 --> 00:29:58,080
hopefully we'll be able to connect you

770
00:29:55,440 --> 00:30:01,279
my gateway to the box tv

771
00:29:58,080 --> 00:30:03,678
um i think that's it so

772
00:30:01,279 --> 00:30:05,279
uh yeah if there are no more questions

773
00:30:03,679 --> 00:30:07,760
uh thank you everyone for the time and

774
00:30:05,279 --> 00:30:10,320
for tuning in

775
00:30:07,760 --> 00:30:10,799
uh please feel free to shoot me an email

776
00:30:10,320 --> 00:30:12,799
uh

777
00:30:10,799 --> 00:30:14,080
colin netflix.com if there are any

778
00:30:12,799 --> 00:30:18,158
questions uh

779
00:30:14,080 --> 00:30:18,158
or you can open an issue on github uh

780
00:30:18,919 --> 00:30:23,520
github.comgmygay

781
00:30:20,480 --> 00:30:26,320
thanks everyone thank you very much on

782
00:30:23,520 --> 00:30:26,320
behalf of the program

783
00:30:28,240 --> 00:30:34,480
[Music]

784
00:30:31,480 --> 00:30:34,480
committee

