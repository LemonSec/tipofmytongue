1
00:00:01,640 --> 00:00:06,080
[Music]

2
00:00:05,279 --> 00:00:08,160
hi

3
00:00:06,080 --> 00:00:09,599
i'm michael costello speaking on behalf

4
00:00:08,160 --> 00:00:11,120
of the program committee

5
00:00:09,599 --> 00:00:14,160
and i'm here to tell you about what took

6
00:00:11,120 --> 00:00:16,560
place at the most recent nadal hackathon

7
00:00:14,160 --> 00:00:17,760
this is actually the 11th nano hackathon

8
00:00:16,560 --> 00:00:19,520
but the very first one that we've

9
00:00:17,760 --> 00:00:22,000
conducted all virtually

10
00:00:19,520 --> 00:00:23,198
participants worked all weekend both

11
00:00:22,000 --> 00:00:24,800
saturday and sunday

12
00:00:23,199 --> 00:00:26,320
on a variety of projects of their

13
00:00:24,800 --> 00:00:27,920
choosing and we have

14
00:00:26,320 --> 00:00:30,400
participants ranging from across the

15
00:00:27,920 --> 00:00:34,000
united states as well as from canada

16
00:00:30,400 --> 00:00:36,000
and south africa the reason that we have

17
00:00:34,000 --> 00:00:37,920
the nylon hackathon is in support of

18
00:00:36,000 --> 00:00:40,079
nano's educational mission

19
00:00:37,920 --> 00:00:41,680
we aim to share knowledge and to develop

20
00:00:40,079 --> 00:00:43,040
the next generation of networking

21
00:00:41,680 --> 00:00:45,360
professionals

22
00:00:43,040 --> 00:00:47,120
it's organized by the program committee

23
00:00:45,360 --> 00:00:48,719
and takes place the weekend before the

24
00:00:47,120 --> 00:00:51,760
general conference

25
00:00:48,719 --> 00:00:53,760
part participants work individually or

26
00:00:51,760 --> 00:00:55,440
self-organize into groups

27
00:00:53,760 --> 00:00:58,640
and they work on projects of their own

28
00:00:55,440 --> 00:01:01,280
choosing we had a variety of projects

29
00:00:58,640 --> 00:01:03,280
this time around we had a from scratch

30
00:01:01,280 --> 00:01:04,799
bgp damon

31
00:01:03,280 --> 00:01:07,119
another team did a performance

32
00:01:04,799 --> 00:01:08,640
monitoring and notifications using home

33
00:01:07,119 --> 00:01:10,640
control systems

34
00:01:08,640 --> 00:01:12,479
while another group worked on simulating

35
00:01:10,640 --> 00:01:14,320
traffic and visualize it with streaming

36
00:01:12,479 --> 00:01:15,840
telemetry data

37
00:01:14,320 --> 00:01:18,158
earlier in the week you saw a

38
00:01:15,840 --> 00:01:19,840
presentation on gmi gateway

39
00:01:18,159 --> 00:01:21,840
and the author of that took the time

40
00:01:19,840 --> 00:01:24,159
over the weekend to develop a kafka

41
00:01:21,840 --> 00:01:24,880
exporter and a netbox target loader for

42
00:01:24,159 --> 00:01:26,640
it

43
00:01:24,880 --> 00:01:30,320
and finally another person worked on a

44
00:01:26,640 --> 00:01:31,520
modern net news client library in rust

45
00:01:30,320 --> 00:01:33,758
we're not going to be giving

46
00:01:31,520 --> 00:01:36,240
presentations on those topics today

47
00:01:33,759 --> 00:01:38,079
instead we're going to focus on a rip on

48
00:01:36,240 --> 00:01:40,720
you doing rip compliance

49
00:01:38,079 --> 00:01:42,960
using model driven telemetry another

50
00:01:40,720 --> 00:01:43,759
group worked on a fully automated data

51
00:01:42,960 --> 00:01:46,158
center uh

52
00:01:43,759 --> 00:01:47,840
proof of concept and finally we have a

53
00:01:46,159 --> 00:01:48,159
last project that we're going to go over

54
00:01:47,840 --> 00:01:50,159
on

55
00:01:48,159 --> 00:01:51,920
a simple automated and easy to deploy

56
00:01:50,159 --> 00:01:53,920
sdn solution

57
00:01:51,920 --> 00:01:55,119
so thanks mike um yeah my name is

58
00:01:53,920 --> 00:01:57,200
laurence bird um

59
00:01:55,119 --> 00:01:58,479
on the screen you can see uh i was part

60
00:01:57,200 --> 00:02:00,159
of a team of four

61
00:01:58,479 --> 00:02:01,840
uh we're all network engineers from a

62
00:02:00,159 --> 00:02:04,320
company called shlomoje and

63
00:02:01,840 --> 00:02:06,240
the project we looked at was bgp rib

64
00:02:04,320 --> 00:02:09,359
compliance using mdt or

65
00:02:06,240 --> 00:02:10,959
model driven telemetry so really um the

66
00:02:09,360 --> 00:02:12,720
goal of our project was to

67
00:02:10,959 --> 00:02:14,160
evaluate various different technology

68
00:02:12,720 --> 00:02:16,720
stacks we wanted to use this as an

69
00:02:14,160 --> 00:02:18,959
opportunity to look at some of the newer

70
00:02:16,720 --> 00:02:20,640
technologies out there for managerial

71
00:02:18,959 --> 00:02:21,520
sorry for managing and administering

72
00:02:20,640 --> 00:02:22,958
networks

73
00:02:21,520 --> 00:02:24,400
and so we looked at various different

74
00:02:22,959 --> 00:02:25,440
technology stacks which you'll see in

75
00:02:24,400 --> 00:02:27,840
the presentation

76
00:02:25,440 --> 00:02:30,319
we also wanted to look at specifically

77
00:02:27,840 --> 00:02:32,720
the capabilities of network telemetry

78
00:02:30,319 --> 00:02:34,799
and how we can use that in a real-time

79
00:02:32,720 --> 00:02:36,160
kind of evaluation scenario as opposed

80
00:02:34,800 --> 00:02:38,080
to the traditional

81
00:02:36,160 --> 00:02:40,239
push-pull type of situations we have

82
00:02:38,080 --> 00:02:41,920
with things like snmp

83
00:02:40,239 --> 00:02:43,200
so in order to achieve that we developed

84
00:02:41,920 --> 00:02:44,000
a network which was capable of

85
00:02:43,200 --> 00:02:45,760
showcasing

86
00:02:44,000 --> 00:02:47,040
uh various different uh routing

87
00:02:45,760 --> 00:02:48,840
scenarios and

88
00:02:47,040 --> 00:02:52,079
the main ones we wanted to try and

89
00:02:48,840 --> 00:02:54,959
detect were poorly configured route maps

90
00:02:52,080 --> 00:02:56,239
incorrect provider policies such as mpls

91
00:02:54,959 --> 00:02:57,840
providers and things like that

92
00:02:56,239 --> 00:02:59,440
and then see if we could try and

93
00:02:57,840 --> 00:03:02,879
simulate and detect

94
00:02:59,440 --> 00:03:05,200
route hijacking bgp root hijacking

95
00:03:02,879 --> 00:03:06,799
so in order to achieve this um we use

96
00:03:05,200 --> 00:03:08,879
the following technology stack so

97
00:03:06,800 --> 00:03:11,040
uh the devices that we were configuring

98
00:03:08,879 --> 00:03:13,120
maintaining were all based on cisco so

99
00:03:11,040 --> 00:03:14,640
we used the csr 1000b if anyone's

100
00:03:13,120 --> 00:03:16,159
familiar with that which is

101
00:03:14,640 --> 00:03:17,839
um you know one of the the latest

102
00:03:16,159 --> 00:03:19,599
products that cisco offer and we use

103
00:03:17,840 --> 00:03:21,599
cisco's modeling labs as our

104
00:03:19,599 --> 00:03:23,200
virtualization environment to build and

105
00:03:21,599 --> 00:03:25,280
deploy our network

106
00:03:23,200 --> 00:03:26,798
um we use docker as a service

107
00:03:25,280 --> 00:03:27,440
provisioning and service training for

108
00:03:26,799 --> 00:03:30,480
the actual

109
00:03:27,440 --> 00:03:32,480
um tooling that would be built on top of

110
00:03:30,480 --> 00:03:35,119
it and do the evaluation

111
00:03:32,480 --> 00:03:36,399
and we use the influx suite of tools if

112
00:03:35,120 --> 00:03:38,560
you like so influx db

113
00:03:36,400 --> 00:03:40,319
telegraph and chronograph to provide us

114
00:03:38,560 --> 00:03:42,640
with the real time metrics

115
00:03:40,319 --> 00:03:44,480
and storage of that telemetry um and

116
00:03:42,640 --> 00:03:46,000
then finally we use python to do all of

117
00:03:44,480 --> 00:03:48,399
the policy processing

118
00:03:46,000 --> 00:03:49,040
do the notification handling and we

119
00:03:48,400 --> 00:03:50,560
began

120
00:03:49,040 --> 00:03:52,480
uh it wasn't part of the project but we

121
00:03:50,560 --> 00:03:54,480
began to create a websocket manager for

122
00:03:52,480 --> 00:03:57,040
that as well so other consumers could

123
00:03:54,480 --> 00:03:59,760
subscribe to that information and use it

124
00:03:57,040 --> 00:04:00,959
as they see fit

125
00:03:59,760 --> 00:04:02,480
so just quickly let's have a look at the

126
00:04:00,959 --> 00:04:04,640
lab setup i'm not gonna go into detail

127
00:04:02,480 --> 00:04:06,000
of how the network was deployed but um

128
00:04:04,640 --> 00:04:06,480
on the right-hand side of the screen you

129
00:04:06,000 --> 00:04:08,799
can see

130
00:04:06,480 --> 00:04:10,319
the overall kind of architecture of it

131
00:04:08,799 --> 00:04:12,319
and what we wanted to do was simulate

132
00:04:10,319 --> 00:04:12,720
both an internal corporate network which

133
00:04:12,319 --> 00:04:14,079
is

134
00:04:12,720 --> 00:04:16,880
which you see towards the bottom of the

135
00:04:14,080 --> 00:04:19,120
screen with you know a virtualized or

136
00:04:16,880 --> 00:04:22,320
emulated mpls network and various

137
00:04:19,120 --> 00:04:25,280
hub and spoke type uh scenarios

138
00:04:22,320 --> 00:04:26,960
and then also connecting that out to a

139
00:04:25,280 --> 00:04:28,799
regional ifp

140
00:04:26,960 --> 00:04:30,400
and a third party provider and seeing if

141
00:04:28,800 --> 00:04:32,560
we can introduce a hacker in there

142
00:04:30,400 --> 00:04:34,080
somewhere to do some pgp hijacking

143
00:04:32,560 --> 00:04:35,199
so as a reminder the challenges that we

144
00:04:34,080 --> 00:04:36,560
were trying to overcome with this

145
00:04:35,199 --> 00:04:39,040
specific topology

146
00:04:36,560 --> 00:04:40,960
were to validate if the regional route

147
00:04:39,040 --> 00:04:43,199
preferences we have were being ordered

148
00:04:40,960 --> 00:04:44,239
um specifically in this case the default

149
00:04:43,199 --> 00:04:46,479
route so

150
00:04:44,240 --> 00:04:48,160
the default route in europe should go by

151
00:04:46,479 --> 00:04:49,919
the european data center versus in

152
00:04:48,160 --> 00:04:50,720
america it should go via the america one

153
00:04:49,919 --> 00:04:52,400
so can we

154
00:04:50,720 --> 00:04:55,120
validate that that's happening and

155
00:04:52,400 --> 00:04:57,120
secondly is traffic to off from

156
00:04:55,120 --> 00:04:58,160
our providers in this case the example

157
00:04:57,120 --> 00:05:00,160
here is microsoft

158
00:04:58,160 --> 00:05:01,280
being hijacked at any point so this is

159
00:05:00,160 --> 00:05:02,800
the network topology and

160
00:05:01,280 --> 00:05:05,119
as i mentioned this is built in cisco

161
00:05:02,800 --> 00:05:06,639
modeling labs

162
00:05:05,120 --> 00:05:08,800
in terms of data collection how would

163
00:05:06,639 --> 00:05:10,960
how did we do that we built

164
00:05:08,800 --> 00:05:12,880
we had a simple python script that would

165
00:05:10,960 --> 00:05:15,280
connect out to our devices

166
00:05:12,880 --> 00:05:16,080
um that we identified in the yaml file

167
00:05:15,280 --> 00:05:19,359
and using

168
00:05:16,080 --> 00:05:21,680
uh resconf with a render ginger template

169
00:05:19,360 --> 00:05:23,440
we would push down the telemetry config

170
00:05:21,680 --> 00:05:24,960
which would basically allow the device

171
00:05:23,440 --> 00:05:27,680
to start start

172
00:05:24,960 --> 00:05:29,198
streaming bgp events um to our uh

173
00:05:27,680 --> 00:05:30,639
telegraph collector

174
00:05:29,199 --> 00:05:32,880
so that was the first part of the setup

175
00:05:30,639 --> 00:05:33,840
and this gets triggered uh when we bring

176
00:05:32,880 --> 00:05:35,600
up the

177
00:05:33,840 --> 00:05:37,599
the docker environment so this script

178
00:05:35,600 --> 00:05:38,960
runs we have our inventory file

179
00:05:37,600 --> 00:05:40,639
and all of the devices will be

180
00:05:38,960 --> 00:05:42,799
configured with the appropriate

181
00:05:40,639 --> 00:05:44,400
um with the appropriate exporter shall

182
00:05:42,800 --> 00:05:46,560
we say

183
00:05:44,400 --> 00:05:48,400
then in terms of policy evaluation we

184
00:05:46,560 --> 00:05:50,400
wanted to make this

185
00:05:48,400 --> 00:05:51,599
more of a framework than something very

186
00:05:50,400 --> 00:05:54,479
specific right so

187
00:05:51,600 --> 00:05:55,919
we were looking at um trying to detect

188
00:05:54,479 --> 00:05:57,520
certain events but really what we wanted

189
00:05:55,919 --> 00:05:59,520
to do is build something that could be

190
00:05:57,520 --> 00:06:01,758
reused in various different scenarios

191
00:05:59,520 --> 00:06:02,639
so on the left hand side here um using

192
00:06:01,759 --> 00:06:04,400
uh yaml

193
00:06:02,639 --> 00:06:06,240
um just because it was easy and we could

194
00:06:04,400 --> 00:06:08,560
do that in the timeframe we had

195
00:06:06,240 --> 00:06:09,759
we built a sample policy of what we

196
00:06:08,560 --> 00:06:11,919
might want to look at

197
00:06:09,759 --> 00:06:13,759
so firstly under regions we're able to

198
00:06:11,919 --> 00:06:14,719
split devices up into regions which

199
00:06:13,759 --> 00:06:17,199
gives us our

200
00:06:14,720 --> 00:06:18,800
regional kind of diversification and

201
00:06:17,199 --> 00:06:19,600
that helps us on our first point of

202
00:06:18,800 --> 00:06:21,840
looking at

203
00:06:19,600 --> 00:06:23,520
group preferencing in different regions

204
00:06:21,840 --> 00:06:25,280
and then the the most interesting piece

205
00:06:23,520 --> 00:06:26,159
here is from line 15 onwards which is

206
00:06:25,280 --> 00:06:28,719
the policy

207
00:06:26,160 --> 00:06:30,479
and this is where we can start to match

208
00:06:28,720 --> 00:06:31,680
uh various policies against the data

209
00:06:30,479 --> 00:06:32,960
we're seeing to decide if they're

210
00:06:31,680 --> 00:06:37,120
compliant or not

211
00:06:32,960 --> 00:06:38,960
so each policy has uh is pre begins with

212
00:06:37,120 --> 00:06:41,360
the root or the prefix i should say that

213
00:06:38,960 --> 00:06:43,120
we're interested in and it's evaluated

214
00:06:41,360 --> 00:06:44,319
in a top-down approach so when we see

215
00:06:43,120 --> 00:06:45,759
the first match

216
00:06:44,319 --> 00:06:47,360
um if there's a match at the top it will

217
00:06:45,759 --> 00:06:49,280
honor that one instead of any

218
00:06:47,360 --> 00:06:51,039
any that come below it so in this first

219
00:06:49,280 --> 00:06:52,400
case you can see we're our match for the

220
00:06:51,039 --> 00:06:54,240
default route here

221
00:06:52,400 --> 00:06:55,840
in the region of america so we're

222
00:06:54,240 --> 00:06:57,759
looking specifically at these routes

223
00:06:55,840 --> 00:06:58,719
that appear on routers in the americas

224
00:06:57,759 --> 00:07:00,479
region

225
00:06:58,720 --> 00:07:01,919
we have different types of match

226
00:07:00,479 --> 00:07:03,758
criteria you can have so in this case

227
00:07:01,919 --> 00:07:05,599
it's explicit but you see down here on

228
00:07:03,759 --> 00:07:07,120
some of the others the match type is any

229
00:07:05,599 --> 00:07:09,360
and this means that we can match

230
00:07:07,120 --> 00:07:12,080
explicitly on this exact prefix

231
00:07:09,360 --> 00:07:13,599
or on nested or child prefixes so for

232
00:07:12,080 --> 00:07:16,000
the explicit prefix

233
00:07:13,599 --> 00:07:18,000
the the prefix we see in our bgp update

234
00:07:16,000 --> 00:07:19,759
must match us exactly so we must

235
00:07:18,000 --> 00:07:22,319
we must see zero zero zero zero slash

236
00:07:19,759 --> 00:07:24,639
there um for any type matches though we

237
00:07:22,319 --> 00:07:27,599
can match either on this on the prefix

238
00:07:24,639 --> 00:07:29,280
exactly so a slash 16 or any networks

239
00:07:27,599 --> 00:07:31,440
that fall within that boundary so if we

240
00:07:29,280 --> 00:07:32,880
had one nine two one six eight zero zero

241
00:07:31,440 --> 00:07:34,240
slash 24 for example

242
00:07:32,880 --> 00:07:35,680
we would see that would be matched by

243
00:07:34,240 --> 00:07:36,880
this policy here so what we're trying to

244
00:07:35,680 --> 00:07:39,120
do is build something that was very

245
00:07:36,880 --> 00:07:40,639
extensive or very um dynamic and that

246
00:07:39,120 --> 00:07:41,840
people can use in their own environments

247
00:07:40,639 --> 00:07:42,960
if they want to

248
00:07:41,840 --> 00:07:45,280
and then the interesting piece here is

249
00:07:42,960 --> 00:07:47,359
the attributes key which basically

250
00:07:45,280 --> 00:07:48,799
allows us to define one or more bgp

251
00:07:47,360 --> 00:07:50,960
attributes that we want to

252
00:07:48,800 --> 00:07:53,199
evaluate and the value that we expect

253
00:07:50,960 --> 00:07:55,520
them to be so just as an example with

254
00:07:53,199 --> 00:07:56,400
this default route in america's we would

255
00:07:55,520 --> 00:07:59,198
expect to see

256
00:07:56,400 --> 00:08:00,799
a community value of 100 column 1 for

257
00:07:59,199 --> 00:08:02,800
this specific network

258
00:08:00,800 --> 00:08:04,879
on the right hand side this is the

259
00:08:02,800 --> 00:08:06,240
script that is doing the actual policy

260
00:08:04,879 --> 00:08:07,759
evaluation

261
00:08:06,240 --> 00:08:09,360
so like i mentioned it's a top-down

262
00:08:07,759 --> 00:08:10,240
approach so when we see the first match

263
00:08:09,360 --> 00:08:11,919
we use that

264
00:08:10,240 --> 00:08:13,599
as the criterion we we stop the

265
00:08:11,919 --> 00:08:16,080
processing and basically

266
00:08:13,599 --> 00:08:18,159
the way the system is working is data is

267
00:08:16,080 --> 00:08:20,240
being streamed in from the devices

268
00:08:18,160 --> 00:08:21,759
uh when we see that data come in we run

269
00:08:20,240 --> 00:08:24,639
this evaluate function

270
00:08:21,759 --> 00:08:26,160
which takes uh takes the values that we

271
00:08:24,639 --> 00:08:26,879
see in the update and compares them

272
00:08:26,160 --> 00:08:29,280
against

273
00:08:26,879 --> 00:08:30,639
the matched criteria in this yaml file

274
00:08:29,280 --> 00:08:32,559
if the values match

275
00:08:30,639 --> 00:08:33,839
exactly then we classify it as a

276
00:08:32,559 --> 00:08:35,518
compliant route

277
00:08:33,839 --> 00:08:37,680
so if the community did match this

278
00:08:35,519 --> 00:08:40,000
exactly then this would be compliant

279
00:08:37,679 --> 00:08:40,958
whereas if it was something else like um

280
00:08:40,000 --> 00:08:42,640
a hundred dash

281
00:08:40,958 --> 00:08:44,079
a coin two or maybe it was missing

282
00:08:42,640 --> 00:08:44,959
entirely we would mark it as

283
00:08:44,080 --> 00:08:46,480
non-compliant

284
00:08:44,959 --> 00:08:48,000
and we can do that in real time and

285
00:08:46,480 --> 00:08:49,519
present that through some type of

286
00:08:48,000 --> 00:08:51,920
visualization tool

287
00:08:49,519 --> 00:08:53,600
to be able to allow network engineers

288
00:08:51,920 --> 00:08:55,519
and network administrators to see where

289
00:08:53,600 --> 00:08:57,360
there might be some kind of issue

290
00:08:55,519 --> 00:08:58,720
so on the next slide here we can see we

291
00:08:57,360 --> 00:09:00,720
played around with a couple of different

292
00:08:58,720 --> 00:09:02,640
visualization tools to see

293
00:09:00,720 --> 00:09:03,760
what was the best mechanism to kind of

294
00:09:02,640 --> 00:09:05,600
get that data out

295
00:09:03,760 --> 00:09:07,200
and visualize it so in the background

296
00:09:05,600 --> 00:09:10,160
here this is a tool we built

297
00:09:07,200 --> 00:09:11,360
using a python flask app and plotly as a

298
00:09:10,160 --> 00:09:13,279
library

299
00:09:11,360 --> 00:09:14,560
it's just taking the data as we see it

300
00:09:13,279 --> 00:09:16,240
from influx db so

301
00:09:14,560 --> 00:09:18,239
i should mention when we've done that

302
00:09:16,240 --> 00:09:19,920
policy evaluation we actually dump that

303
00:09:18,240 --> 00:09:22,480
into a time series database so that we

304
00:09:19,920 --> 00:09:24,640
can track the compliance over time

305
00:09:22,480 --> 00:09:26,080
this visualization is taking the data

306
00:09:24,640 --> 00:09:28,240
from that database

307
00:09:26,080 --> 00:09:29,839
and just visualizing it in in a couple

308
00:09:28,240 --> 00:09:31,279
of different forms right so

309
00:09:29,839 --> 00:09:33,440
in this case we were looking at origin

310
00:09:31,279 --> 00:09:35,200
compliance and as path compliance

311
00:09:33,440 --> 00:09:36,480
same information is available here in

312
00:09:35,200 --> 00:09:38,320
the second screenshot which is the

313
00:09:36,480 --> 00:09:39,440
chronograph screenshot but probably a

314
00:09:38,320 --> 00:09:41,279
little bit neater

315
00:09:39,440 --> 00:09:42,959
um you can see on the left here these

316
00:09:41,279 --> 00:09:44,399
are the count of bgp events by the

317
00:09:42,959 --> 00:09:46,160
router name because

318
00:09:44,399 --> 00:09:48,560
our environment was virtualized it's not

319
00:09:46,160 --> 00:09:50,480
really um doing anything exciting so

320
00:09:48,560 --> 00:09:52,399
it's relatively static in the number of

321
00:09:50,480 --> 00:09:53,920
updates we're receiving any one time

322
00:09:52,399 --> 00:09:55,839
but on the right hand side here you can

323
00:09:53,920 --> 00:09:57,199
see as we were playing around with some

324
00:09:55,839 --> 00:09:58,000
of the routing and some of the policies

325
00:09:57,200 --> 00:10:00,000
you can see

326
00:09:58,000 --> 00:10:01,920
the count of non-compliance is over time

327
00:10:00,000 --> 00:10:04,320
so the higher the bar here the more

328
00:10:01,920 --> 00:10:05,040
non-compliance of an ncc so we were able

329
00:10:04,320 --> 00:10:08,720
to

330
00:10:05,040 --> 00:10:09,839
start to visualize this and start to

331
00:10:08,720 --> 00:10:12,000
look into it and see

332
00:10:09,839 --> 00:10:13,440
how useful this was and what i can do

333
00:10:12,000 --> 00:10:15,040
very quickly just in case this isn't

334
00:10:13,440 --> 00:10:18,640
very clear is just

335
00:10:15,040 --> 00:10:21,920
show a zoomed in version of it in our

336
00:10:18,640 --> 00:10:23,680
policy here we can see um

337
00:10:21,920 --> 00:10:25,519
from the 18 so this is from the

338
00:10:23,680 --> 00:10:27,439
hackathon yesterday we were seeing at

339
00:10:25,519 --> 00:10:29,120
one point um up to you know 40

340
00:10:27,440 --> 00:10:30,720
40 of those prefixes were not complying

341
00:10:29,120 --> 00:10:31,360
any one time as we were playing around

342
00:10:30,720 --> 00:10:33,920
with it

343
00:10:31,360 --> 00:10:36,079
so to summarize what we were really able

344
00:10:33,920 --> 00:10:38,719
to do we were able to in real time

345
00:10:36,079 --> 00:10:39,760
stream telemetry out of our of our

346
00:10:38,720 --> 00:10:41,760
network

347
00:10:39,760 --> 00:10:43,360
um this is our network in cml that's

348
00:10:41,760 --> 00:10:45,040
running now we're able to

349
00:10:43,360 --> 00:10:46,959
stream data out in real time as we

350
00:10:45,040 --> 00:10:47,920
receive as the router received the bgp

351
00:10:46,959 --> 00:10:50,079
rib update

352
00:10:47,920 --> 00:10:51,599
we were then able to take a static

353
00:10:50,079 --> 00:10:53,359
policy file which could be

354
00:10:51,600 --> 00:10:55,440
um developed in the future to be you

355
00:10:53,360 --> 00:10:56,880
know an api api driven or configured

356
00:10:55,440 --> 00:10:59,120
through ansible or something like that

357
00:10:56,880 --> 00:11:01,839
take that static policy file match the

358
00:10:59,120 --> 00:11:03,920
prefix against a predefined policy

359
00:11:01,839 --> 00:11:05,360
do a real-time evaluation to see if it's

360
00:11:03,920 --> 00:11:07,360
compliant or not and then

361
00:11:05,360 --> 00:11:08,399
save that into a time series database so

362
00:11:07,360 --> 00:11:10,399
that we then have

363
00:11:08,399 --> 00:11:11,680
we can then visualize that in one or

364
00:11:10,399 --> 00:11:13,360
several different tools

365
00:11:11,680 --> 00:11:14,959
to allow network engineers and network

366
00:11:13,360 --> 00:11:16,720
managers to basically

367
00:11:14,959 --> 00:11:18,399
see in real time the policy compliance

368
00:11:16,720 --> 00:11:18,720
of their network and see if we start to

369
00:11:18,399 --> 00:11:20,399
see

370
00:11:18,720 --> 00:11:21,839
changes that are maybe not quite right

371
00:11:20,399 --> 00:11:24,640
so if we see you know

372
00:11:21,839 --> 00:11:25,680
as as origin changes obviously root

373
00:11:24,640 --> 00:11:26,959
preference changes

374
00:11:25,680 --> 00:11:29,519
it could be an early sign or something

375
00:11:26,959 --> 00:11:32,000
going well so i'm glad to say

376
00:11:29,519 --> 00:11:33,920
we got it working uh it it's running now

377
00:11:32,000 --> 00:11:35,360
or was running uh yesterday and we're

378
00:11:33,920 --> 00:11:36,000
pretty pleased with it it was a great

379
00:11:35,360 --> 00:11:37,519
event

380
00:11:36,000 --> 00:11:39,360
and um and that's all we have to show

381
00:11:37,519 --> 00:11:42,640
for you so um i'll hand it over to the

382
00:11:39,360 --> 00:11:45,920
next presenter thank you very much

383
00:11:42,640 --> 00:11:48,880
um so hello everyone my name is akash

384
00:11:45,920 --> 00:11:50,560
and i'm a student at the university of

385
00:11:48,880 --> 00:11:53,839
colorado boulder and

386
00:11:50,560 --> 00:11:54,319
we did a proof of concept here to data

387
00:11:53,839 --> 00:11:57,279
center

388
00:11:54,320 --> 00:11:57,839
automated deployment and configuration

389
00:11:57,279 --> 00:12:01,839
so

390
00:11:57,839 --> 00:12:05,360
our proposal is fully automated tier 2

391
00:12:01,839 --> 00:12:06,240
data center with automated deployment

392
00:12:05,360 --> 00:12:09,120
and monitoring

393
00:12:06,240 --> 00:12:09,600
so why did we do this from this we

394
00:12:09,120 --> 00:12:11,200
achieve

395
00:12:09,600 --> 00:12:13,360
centralized control and monitoring of

396
00:12:11,200 --> 00:12:16,000
the network we get

397
00:12:13,360 --> 00:12:17,680
cost effectiveness in terms of reduced

398
00:12:16,000 --> 00:12:19,600
operation expenses

399
00:12:17,680 --> 00:12:20,719
um one click configuration and

400
00:12:19,600 --> 00:12:22,399
deployment of

401
00:12:20,720 --> 00:12:25,040
the whole data center and any new

402
00:12:22,399 --> 00:12:27,360
devices that would save a lot of time

403
00:12:25,040 --> 00:12:29,360
and reduction in human configuration

404
00:12:27,360 --> 00:12:31,680
errors

405
00:12:29,360 --> 00:12:32,800
so this is a high level diagram of what

406
00:12:31,680 --> 00:12:35,120
we try to do

407
00:12:32,800 --> 00:12:36,560
so we have a administrator who creates

408
00:12:35,120 --> 00:12:39,519
python scripts and

409
00:12:36,560 --> 00:12:41,439
features for our front-end web interface

410
00:12:39,519 --> 00:12:42,880
which the operations team or the user

411
00:12:41,440 --> 00:12:45,279
can

412
00:12:42,880 --> 00:12:48,480
use to interact with the network over

413
00:12:45,279 --> 00:12:48,480
the management network

414
00:12:48,720 --> 00:12:52,399
and any data that is fetched from the

415
00:12:51,600 --> 00:12:55,600
front-end

416
00:12:52,399 --> 00:12:58,240
interface could is stored directly

417
00:12:55,600 --> 00:12:58,639
um to a public cloud which is in our

418
00:12:58,240 --> 00:13:02,000
case

419
00:12:58,639 --> 00:13:04,560
amazon s3 bucket so

420
00:13:02,000 --> 00:13:07,600
um this is the topology that we use so

421
00:13:04,560 --> 00:13:10,000
as100 and es200 are the two

422
00:13:07,600 --> 00:13:10,639
data centers which are on different

423
00:13:10,000 --> 00:13:13,680
sites

424
00:13:10,639 --> 00:13:16,079
and as10 is a tier one isp who

425
00:13:13,680 --> 00:13:16,880
um provides internet to both of these

426
00:13:16,079 --> 00:13:21,279
sites and we

427
00:13:16,880 --> 00:13:24,560
talk uh from es100 to as200 via

428
00:13:21,279 --> 00:13:24,880
ipsec tunnel and in the bottom you could

429
00:13:24,560 --> 00:13:27,199
see

430
00:13:24,880 --> 00:13:29,040
there's a customer uh who could be a

431
00:13:27,200 --> 00:13:30,639
tier 3 isp or

432
00:13:29,040 --> 00:13:33,920
directly a customer who just wants to

433
00:13:30,639 --> 00:13:36,959
use the internet and

434
00:13:33,920 --> 00:13:39,839
this is the web interfaces screenshot

435
00:13:36,959 --> 00:13:41,199
as you can see we have lots of um

436
00:13:39,839 --> 00:13:43,680
features here we could

437
00:13:41,199 --> 00:13:46,319
uh create configuration files we could

438
00:13:43,680 --> 00:13:49,199
push configuration files to devices

439
00:13:46,320 --> 00:13:49,920
we could monitor the network um and we

440
00:13:49,199 --> 00:13:52,240
could

441
00:13:49,920 --> 00:13:53,599
also get configuration files for each

442
00:13:52,240 --> 00:13:56,480
router

443
00:13:53,600 --> 00:13:56,959
for troubleshooting purposes and lastly

444
00:13:56,480 --> 00:13:59,680
we could

445
00:13:56,959 --> 00:14:00,239
store and compare the configurations

446
00:13:59,680 --> 00:14:02,000
with

447
00:14:00,240 --> 00:14:04,800
what we have as a network source of

448
00:14:02,000 --> 00:14:08,320
truth um that is also on

449
00:14:04,800 --> 00:14:10,079
amazon s3 and

450
00:14:08,320 --> 00:14:13,040
yeah so this is just a recap of what i

451
00:14:10,079 --> 00:14:15,359
said um

452
00:14:13,040 --> 00:14:17,120
and the technologies that we are using

453
00:14:15,360 --> 00:14:20,240
um is basically we are creating

454
00:14:17,120 --> 00:14:22,880
python scripts for all of our

455
00:14:20,240 --> 00:14:24,720
automation and we're using jinja

456
00:14:22,880 --> 00:14:26,800
templates to create

457
00:14:24,720 --> 00:14:28,399
configuration files that will be posted

458
00:14:26,800 --> 00:14:30,880
onto the devices

459
00:14:28,399 --> 00:14:32,399
and for communicating with the network

460
00:14:30,880 --> 00:14:35,279
devices we're using

461
00:14:32,399 --> 00:14:37,920
uh python modules like netmeco and apam

462
00:14:35,279 --> 00:14:41,120
and for the front end we're using flask

463
00:14:37,920 --> 00:14:44,240
um we're also using multi-setting for

464
00:14:41,120 --> 00:14:48,320
effective and fast deployment of

465
00:14:44,240 --> 00:14:51,199
the configurations so here you can see

466
00:14:48,320 --> 00:14:53,440
we have uh the ginger templates on the

467
00:14:51,199 --> 00:14:55,920
right you could see there is a

468
00:14:53,440 --> 00:14:57,120
dji tablet for ospf configuration on the

469
00:14:55,920 --> 00:15:01,519
left there is a

470
00:14:57,120 --> 00:15:04,160
nat configuration data template and

471
00:15:01,519 --> 00:15:06,480
the user will provide the the

472
00:15:04,160 --> 00:15:10,079
configuration details on the

473
00:15:06,480 --> 00:15:12,000
info file as you can see on the left

474
00:15:10,079 --> 00:15:13,920
the user provides interfaces and ip

475
00:15:12,000 --> 00:15:17,199
addresses that need to be configured

476
00:15:13,920 --> 00:15:18,959
and on the right you could see the uh

477
00:15:17,199 --> 00:15:21,359
configuration file that is generated

478
00:15:18,959 --> 00:15:24,638
from those in their templates

479
00:15:21,360 --> 00:15:29,120
so this is a screenshot of

480
00:15:24,639 --> 00:15:31,279
running the country the like pushing the

481
00:15:29,120 --> 00:15:32,160
configuration files from the templates

482
00:15:31,279 --> 00:15:34,880
um and

483
00:15:32,160 --> 00:15:35,360
here i'd like to show a small video of

484
00:15:34,880 --> 00:15:38,839
our

485
00:15:35,360 --> 00:15:41,279
web of our code running so this is the

486
00:15:38,839 --> 00:15:44,320
topology and

487
00:15:41,279 --> 00:15:46,320
this is the as you can see we do not

488
00:15:44,320 --> 00:15:55,839
have any configurations on any of the

489
00:15:46,320 --> 00:15:55,839
routers right now

490
00:15:56,480 --> 00:16:09,839
now we run the script um

491
00:16:14,880 --> 00:16:19,530
so as you can see the files have been

492
00:16:16,720 --> 00:16:20,839
created successfully

493
00:16:19,530 --> 00:16:23,839
[Music]

494
00:16:20,839 --> 00:16:23,839
and

495
00:16:28,079 --> 00:16:32,000
successfully loaded into the routers

496
00:16:29,680 --> 00:16:34,839
also as we have pushed the configuration

497
00:16:32,000 --> 00:16:37,519
from the web interface

498
00:16:34,839 --> 00:16:39,519
um

499
00:16:37,519 --> 00:16:41,040
so as you can see on the running config

500
00:16:39,519 --> 00:16:45,199
we can see all the

501
00:16:41,040 --> 00:16:48,319
configurations on on the devices

502
00:16:45,199 --> 00:16:51,359
and quickly i would like to

503
00:16:48,320 --> 00:16:53,920
show you um we have configured nat using

504
00:16:51,360 --> 00:16:55,120
uh this method we've used uh configured

505
00:16:53,920 --> 00:16:59,360
ipsec

506
00:16:55,120 --> 00:17:00,720
um ospf bgp um and six to four tunneling

507
00:16:59,360 --> 00:17:02,399
for uh

508
00:17:00,720 --> 00:17:04,559
are talking to the other side which is

509
00:17:02,399 --> 00:17:06,799
using ipv6 addresses

510
00:17:04,559 --> 00:17:08,559
and so uh for monitoring individual

511
00:17:06,799 --> 00:17:11,359
devices uh we could

512
00:17:08,559 --> 00:17:12,319
monitor the interfaces uh we could see

513
00:17:11,359 --> 00:17:14,719
the neighborship

514
00:17:12,319 --> 00:17:16,399
and ospf and bgp and we could see

515
00:17:14,720 --> 00:17:20,240
running configurations on

516
00:17:16,400 --> 00:17:22,559
all the devices and we can also see any

517
00:17:20,240 --> 00:17:23,599
we can also run any of the show commands

518
00:17:22,559 --> 00:17:26,480
for any of the

519
00:17:23,599 --> 00:17:26,958
routers to get any extra data that is

520
00:17:26,480 --> 00:17:30,160
not

521
00:17:26,959 --> 00:17:32,160
provided via the web interface um as you

522
00:17:30,160 --> 00:17:35,600
can see we could just enter the command

523
00:17:32,160 --> 00:17:36,480
um in here and then we can see the

524
00:17:35,600 --> 00:17:39,520
output

525
00:17:36,480 --> 00:17:41,200
and lastly i'd like to show uh

526
00:17:39,520 --> 00:17:43,760
how we're comparing the running

527
00:17:41,200 --> 00:17:45,360
configuration with golden configurations

528
00:17:43,760 --> 00:17:47,120
which are stored in the network source

529
00:17:45,360 --> 00:17:49,760
of truth

530
00:17:47,120 --> 00:17:50,320
so as we didn't have to we didn't change

531
00:17:49,760 --> 00:17:52,000
anything

532
00:17:50,320 --> 00:17:53,918
and there was no difference found in the

533
00:17:52,000 --> 00:17:57,120
configurations um

534
00:17:53,919 --> 00:17:59,840
and this is a screenshot of the

535
00:17:57,120 --> 00:18:01,439
uh the files getting stored onto the s3

536
00:17:59,840 --> 00:18:03,840
bucket

537
00:18:01,440 --> 00:18:04,720
and for future enhancement on this

538
00:18:03,840 --> 00:18:07,918
project

539
00:18:04,720 --> 00:18:11,200
um we plan to implement

540
00:18:07,919 --> 00:18:14,000
zero does provisioning um

541
00:18:11,200 --> 00:18:16,080
for the management network setup so that

542
00:18:14,000 --> 00:18:18,960
um the python script can directly

543
00:18:16,080 --> 00:18:21,280
uh configure the new devices that come

544
00:18:18,960 --> 00:18:23,520
in and we wouldn't have to manually

545
00:18:21,280 --> 00:18:24,879
log in in any of the devices to set up

546
00:18:23,520 --> 00:18:26,559
anything

547
00:18:24,880 --> 00:18:28,880
then we would like to do automated

548
00:18:26,559 --> 00:18:32,320
device backup

549
00:18:28,880 --> 00:18:32,960
and a security is a big aspect so we'd

550
00:18:32,320 --> 00:18:35,200
like to

551
00:18:32,960 --> 00:18:36,720
include firewall accesses on the edge of

552
00:18:35,200 --> 00:18:39,600
the network so that

553
00:18:36,720 --> 00:18:40,880
nobody can get in and for redundancy we

554
00:18:39,600 --> 00:18:44,240
can have

555
00:18:40,880 --> 00:18:46,240
vrrp running on the s devices so that

556
00:18:44,240 --> 00:18:47,919
uh we have increased redundancy and

557
00:18:46,240 --> 00:18:51,039
availability um

558
00:18:47,919 --> 00:18:53,679
and more of time so um yeah that was it

559
00:18:51,039 --> 00:18:55,600
and i'd like to uh switch over to the

560
00:18:53,679 --> 00:18:58,320
next host who's gonna present

561
00:18:55,600 --> 00:18:59,120
uh hi i'm ronnie mukherjee i'm pursuing

562
00:18:58,320 --> 00:19:02,480
masters at

563
00:18:59,120 --> 00:19:04,959
seo boulder uh and i'll be presenting uh

564
00:19:02,480 --> 00:19:05,600
the project a simple automated and easy

565
00:19:04,960 --> 00:19:08,799
to deploy

566
00:19:05,600 --> 00:19:10,080
sdn solution first of all i'd like to

567
00:19:08,799 --> 00:19:13,600
give an overview of why

568
00:19:10,080 --> 00:19:16,159
sdn is uh so important sdn

569
00:19:13,600 --> 00:19:18,240
leveraging sdn we can reduce a lot of

570
00:19:16,160 --> 00:19:21,280
kpix and optics uh

571
00:19:18,240 --> 00:19:23,440
our expenses that that goes in

572
00:19:21,280 --> 00:19:25,678
to the network production so we can move

573
00:19:23,440 --> 00:19:28,400
the control away from the devices

574
00:19:25,679 --> 00:19:28,880
and we can uh use only the applications

575
00:19:28,400 --> 00:19:31,760
that are

576
00:19:28,880 --> 00:19:33,360
relevant to us uh by using stm and also

577
00:19:31,760 --> 00:19:36,080
we can troubleshoot a lot

578
00:19:33,360 --> 00:19:37,439
faster which i have uh demonstrated in

579
00:19:36,080 --> 00:19:40,320
this solution

580
00:19:37,440 --> 00:19:42,000
so the question appears uh while having

581
00:19:40,320 --> 00:19:42,879
the traditional part of our network can

582
00:19:42,000 --> 00:19:45,679
we still leverage

583
00:19:42,880 --> 00:19:47,280
sdn and the answer to that is yes you

584
00:19:45,679 --> 00:19:48,960
can still have a combination of

585
00:19:47,280 --> 00:19:50,960
traditional routing and switching and a

586
00:19:48,960 --> 00:19:51,760
branch which is starting with sdn and

587
00:19:50,960 --> 00:19:54,880
check the

588
00:19:51,760 --> 00:19:56,160
efficiency of it and think about moving

589
00:19:54,880 --> 00:19:58,160
towards that direction

590
00:19:56,160 --> 00:20:00,640
only thing that is uh important in this

591
00:19:58,160 --> 00:20:03,360
case is the ip connectivity between

592
00:20:00,640 --> 00:20:05,280
the controller and the sdn environment

593
00:20:03,360 --> 00:20:06,959
that we have

594
00:20:05,280 --> 00:20:08,960
this is the network topology that i have

595
00:20:06,960 --> 00:20:12,000
used which i will demonstrate uh

596
00:20:08,960 --> 00:20:15,679
more on the demo video

597
00:20:12,000 --> 00:20:16,720
and uh the sdn uh network comes up as

598
00:20:15,679 --> 00:20:19,440
any other host it

599
00:20:16,720 --> 00:20:20,640
uses a dhcp so it gets its address from

600
00:20:19,440 --> 00:20:22,400
bhp uh

601
00:20:20,640 --> 00:20:24,480
and then everything happens so i have

602
00:20:22,400 --> 00:20:26,799
created a python script which

603
00:20:24,480 --> 00:20:27,919
does everything automatically uh the

604
00:20:26,799 --> 00:20:30,559
routing and

605
00:20:27,919 --> 00:20:31,280
uh anything is not enabled when the host

606
00:20:30,559 --> 00:20:32,720
boots up

607
00:20:31,280 --> 00:20:34,639
but everything is done through the

608
00:20:32,720 --> 00:20:36,320
python code

609
00:20:34,640 --> 00:20:38,240
the advantages of the solution that i

610
00:20:36,320 --> 00:20:39,840
have proposed in here is that it is

611
00:20:38,240 --> 00:20:41,280
easy to deploy using the automated

612
00:20:39,840 --> 00:20:45,039
script everything is done

613
00:20:41,280 --> 00:20:47,120
using one single script and uh using sdn

614
00:20:45,039 --> 00:20:48,640
gives definitely the advantages that

615
00:20:47,120 --> 00:20:51,199
comes with it the light centralized

616
00:20:48,640 --> 00:20:53,840
control global view and the

617
00:20:51,200 --> 00:20:55,840
reaction in capex and optics and also i

618
00:20:53,840 --> 00:20:58,320
have used apis which make it a

619
00:20:55,840 --> 00:21:00,158
better solution in terms of speed and

620
00:20:58,320 --> 00:21:03,760
human variability

621
00:21:00,159 --> 00:21:06,559
and this can be reused and made

622
00:21:03,760 --> 00:21:08,640
and repurposed for uh your own usage i

623
00:21:06,559 --> 00:21:09,200
have created a sdn gui through this

624
00:21:08,640 --> 00:21:12,240
project

625
00:21:09,200 --> 00:21:14,159
which uh which shows the

626
00:21:12,240 --> 00:21:16,480
graphical statistics for the network

627
00:21:14,159 --> 00:21:17,919
real time and which uh increases the

628
00:21:16,480 --> 00:21:21,039
troubleshooting efficiency

629
00:21:17,919 --> 00:21:23,280
uh in many many times

630
00:21:21,039 --> 00:21:25,120
the sdn gui that we have created in this

631
00:21:23,280 --> 00:21:27,520
uh that i have created in this

632
00:21:25,120 --> 00:21:28,239
is a purpose built for this network but

633
00:21:27,520 --> 00:21:31,280
it can be

634
00:21:28,240 --> 00:21:32,000
customized for your own needs and this

635
00:21:31,280 --> 00:21:34,799
gives a real

636
00:21:32,000 --> 00:21:36,000
real-time stats of the network and the

637
00:21:34,799 --> 00:21:39,120
graphical plots

638
00:21:36,000 --> 00:21:40,960
is a great tool to troubleshoot uh much

639
00:21:39,120 --> 00:21:43,280
faster

640
00:21:40,960 --> 00:21:44,559
so this is the topology inside the sdn

641
00:21:43,280 --> 00:21:46,799
network uh the

642
00:21:44,559 --> 00:21:47,678
sd network that is shown as a cloud has

643
00:21:46,799 --> 00:21:50,480
the controller

644
00:21:47,679 --> 00:21:51,200
and four hosts connecting to the switch

645
00:21:50,480 --> 00:21:54,240
one of which

646
00:21:51,200 --> 00:21:57,600
is serving as a web server

647
00:21:54,240 --> 00:21:58,240
and uh coming to the sdn gui i i will

648
00:21:57,600 --> 00:22:00,639
show these

649
00:21:58,240 --> 00:22:02,400
more in details in the uh demo video so

650
00:22:00,640 --> 00:22:04,400
this is the console logs one part of the

651
00:22:02,400 --> 00:22:04,960
sdn gui is the console logs wherein we

652
00:22:04,400 --> 00:22:07,360
can

653
00:22:04,960 --> 00:22:09,520
constantly monitor different parameters

654
00:22:07,360 --> 00:22:12,158
in the network like txrx

655
00:22:09,520 --> 00:22:12,559
packets and pack it into the controller

656
00:22:12,159 --> 00:22:14,960
and

657
00:22:12,559 --> 00:22:16,559
uh firewall rule violation uh this kind

658
00:22:14,960 --> 00:22:18,640
of things

659
00:22:16,559 --> 00:22:19,918
and this is a picture from the sdn web

660
00:22:18,640 --> 00:22:22,240
gui and you can see

661
00:22:19,919 --> 00:22:23,200
that we we can match on any of the

662
00:22:22,240 --> 00:22:25,520
traffic patterns

663
00:22:23,200 --> 00:22:27,120
uh like for a switch we have a

664
00:22:25,520 --> 00:22:28,720
particular port we want to monitor the

665
00:22:27,120 --> 00:22:31,600
txrx on that

666
00:22:28,720 --> 00:22:33,200
and you can have custom traffic traffic

667
00:22:31,600 --> 00:22:34,719
definition of your own you can have

668
00:22:33,200 --> 00:22:36,320
firewall rules you can have

669
00:22:34,720 --> 00:22:38,159
web traffic there are 40 different

670
00:22:36,320 --> 00:22:41,360
fields to match on in

671
00:22:38,159 --> 00:22:43,360
open flow and leveraging that you can

672
00:22:41,360 --> 00:22:43,840
create your own custom rules from this

673
00:22:43,360 --> 00:22:47,120
uh

674
00:22:43,840 --> 00:22:50,320
python script so

675
00:22:47,120 --> 00:22:51,439
i would like to uh touch on the several

676
00:22:50,320 --> 00:22:54,720
fields that i have

677
00:22:51,440 --> 00:22:57,600
shown in this uh purpose uh one of

678
00:22:54,720 --> 00:22:58,720
which is txrx and those were tailor-made

679
00:22:57,600 --> 00:23:02,240
for the troubleshooting

680
00:22:58,720 --> 00:23:05,120
aspects of the networking uh so we

681
00:23:02,240 --> 00:23:06,000
we want to be able to uh closely monitor

682
00:23:05,120 --> 00:23:09,120
switch ports

683
00:23:06,000 --> 00:23:11,440
and having a closer look at the txrx

684
00:23:09,120 --> 00:23:12,158
graphical interface real time would give

685
00:23:11,440 --> 00:23:15,520
a

686
00:23:12,159 --> 00:23:18,880
much higher chance to troubleshoot any

687
00:23:15,520 --> 00:23:21,520
specific issue much faster and then

688
00:23:18,880 --> 00:23:22,080
i have created a specific firewall rule

689
00:23:21,520 --> 00:23:24,720
to block

690
00:23:22,080 --> 00:23:25,280
traffic for a particular host and we may

691
00:23:24,720 --> 00:23:27,600
want to

692
00:23:25,280 --> 00:23:28,639
uh constantly monitor if traffic is

693
00:23:27,600 --> 00:23:31,760
coming for the

694
00:23:28,640 --> 00:23:34,000
uh rule that is blocked and this is uh

695
00:23:31,760 --> 00:23:36,080
refreshed every five seconds so in the

696
00:23:34,000 --> 00:23:38,480
real time graphical data we can

697
00:23:36,080 --> 00:23:40,639
have a clear idea of when the traffic

698
00:23:38,480 --> 00:23:43,039
violation is happening

699
00:23:40,640 --> 00:23:44,400
then there is a web traffic monitor

700
00:23:43,039 --> 00:23:47,360
wherein we monitor the

701
00:23:44,400 --> 00:23:49,600
web requests and also i have created

702
00:23:47,360 --> 00:23:50,639
specific match pattern traffic wherein

703
00:23:49,600 --> 00:23:52,399
you can say uh

704
00:23:50,640 --> 00:23:54,080
there are two important hosts in your

705
00:23:52,400 --> 00:23:57,120
network and you wanna

706
00:23:54,080 --> 00:23:58,879
monitor the traffic between them so for

707
00:23:57,120 --> 00:24:01,039
that uh we have created a pattern

708
00:23:58,880 --> 00:24:03,520
traffic monitor

709
00:24:01,039 --> 00:24:04,559
and uh the open flow packaging monitor

710
00:24:03,520 --> 00:24:06,720
is uh

711
00:24:04,559 --> 00:24:08,320
the indicator for how many packets are

712
00:24:06,720 --> 00:24:10,159
coming from the switch to the sdn

713
00:24:08,320 --> 00:24:13,279
controller

714
00:24:10,159 --> 00:24:15,279
so uh if there is a violation uh

715
00:24:13,279 --> 00:24:16,559
in in the account so for example the

716
00:24:15,279 --> 00:24:19,760
firewall rules if there is

717
00:24:16,559 --> 00:24:20,720
a violation more than say 20 number of

718
00:24:19,760 --> 00:24:24,000
times

719
00:24:20,720 --> 00:24:25,440
it shoots an email to the administrator

720
00:24:24,000 --> 00:24:27,360
and the tools that i've used for this

721
00:24:25,440 --> 00:24:30,240
purpose are dns 3

722
00:24:27,360 --> 00:24:31,039
cisco i have used mininet for my sd

723
00:24:30,240 --> 00:24:33,760
network

724
00:24:31,039 --> 00:24:35,440
review as my 10 controller i've used

725
00:24:33,760 --> 00:24:38,080
flash for the web application

726
00:24:35,440 --> 00:24:38,559
and match content made me go to access

727
00:24:38,080 --> 00:24:40,240
the

728
00:24:38,559 --> 00:24:43,200
routers and switches configuration and i

729
00:24:40,240 --> 00:24:45,919
have used python for the scripting

730
00:24:43,200 --> 00:24:48,240
uh to conclude uh what we have achieved

731
00:24:45,919 --> 00:24:50,159
is we have uh demonstrated that we can

732
00:24:48,240 --> 00:24:51,919
easily spin up a sdn network

733
00:24:50,159 --> 00:24:53,760
which can coexist with the traditional

734
00:24:51,919 --> 00:24:56,640
routing and switching environment

735
00:24:53,760 --> 00:24:58,400
and we can uh measure that advantages

736
00:24:56,640 --> 00:25:00,559
and the

737
00:24:58,400 --> 00:25:02,799
efficiency that we received from that

738
00:25:00,559 --> 00:25:04,480
and we have created a sdn gui purpose

739
00:25:02,799 --> 00:25:05,840
built for that network to constantly

740
00:25:04,480 --> 00:25:07,919
monitor the network

741
00:25:05,840 --> 00:25:10,799
and uh the automated deployment of the

742
00:25:07,919 --> 00:25:13,279
solution makes it easy to deploy and

743
00:25:10,799 --> 00:25:14,080
build in your network this is the github

744
00:25:13,279 --> 00:25:17,200
page that you can

745
00:25:14,080 --> 00:25:19,918
uh find all my codes in so i'll uh i'd

746
00:25:17,200 --> 00:25:22,960
like to show a short video for the

747
00:25:19,919 --> 00:25:22,960
demo that i have created

748
00:25:23,279 --> 00:25:26,880
so this is uh when the sdn network is

749
00:25:26,080 --> 00:25:28,960
getting booted up

750
00:25:26,880 --> 00:25:30,320
uh the rear controller is running this

751
00:25:28,960 --> 00:25:33,520
is the new controller

752
00:25:30,320 --> 00:25:35,039
running in the background and now the

753
00:25:33,520 --> 00:25:38,000
topology and the gns3

754
00:25:35,039 --> 00:25:39,760
uh so you can see that the sd network is

755
00:25:38,000 --> 00:25:40,240
in a completely different subnet than

756
00:25:39,760 --> 00:25:43,360
the

757
00:25:40,240 --> 00:25:47,919
sdn controller so and there is no routes

758
00:25:43,360 --> 00:25:47,918
enabled right now and uh

759
00:25:48,080 --> 00:25:51,760
so i have used ospf for the routing and

760
00:25:50,960 --> 00:25:53,039
if you see

761
00:25:51,760 --> 00:25:54,879
none of the routers are currently

762
00:25:53,039 --> 00:25:58,400
running ospf

763
00:25:54,880 --> 00:26:01,520
and the controller cannot

764
00:25:58,400 --> 00:26:03,760
be reached from the unit as can be seen

765
00:26:01,520 --> 00:26:03,760
here

766
00:26:05,279 --> 00:26:09,600
so uh now i'm executing the sdn spin-up

767
00:26:08,159 --> 00:26:14,000
code

768
00:26:09,600 --> 00:26:14,000
from my network admin pc

769
00:26:22,080 --> 00:26:25,918
as can be seen here the atm network has

770
00:26:24,320 --> 00:26:28,960
taken an ip address for

771
00:26:25,919 --> 00:26:29,760
just like a dhcp host and the routing is

772
00:26:28,960 --> 00:26:32,080
enabled in

773
00:26:29,760 --> 00:26:34,320
the router selling the path open flow is

774
00:26:32,080 --> 00:26:34,960
configured for the obs and controller is

775
00:26:34,320 --> 00:26:37,120
connected

776
00:26:34,960 --> 00:26:38,880
uh after the configuration is done so

777
00:26:37,120 --> 00:26:42,158
this is how the network is put up

778
00:26:38,880 --> 00:26:43,120
and we can uh check the wireshark

779
00:26:42,159 --> 00:26:46,000
messages for

780
00:26:43,120 --> 00:26:46,320
open flow hello as as can be seen that

781
00:26:46,000 --> 00:26:48,640
we

782
00:26:46,320 --> 00:26:50,080
we are seeing messages from back and

783
00:26:48,640 --> 00:26:52,400
forth from the controller

784
00:26:50,080 --> 00:26:54,080
to the switch so this is for the network

785
00:26:52,400 --> 00:26:57,120
boot up and i have

786
00:26:54,080 --> 00:27:00,559
another for

787
00:26:57,120 --> 00:27:02,639
uh the gui as well so

788
00:27:00,559 --> 00:27:06,240
this is when the gui code is executed

789
00:27:02,640 --> 00:27:08,240
and uh

790
00:27:06,240 --> 00:27:10,559
so as you can see the gui is running in

791
00:27:08,240 --> 00:27:10,559
here

792
00:27:10,880 --> 00:27:14,720
and i am thinking the h1 and h2 that

793
00:27:13,200 --> 00:27:15,120
there is a match traffic pattern that i

794
00:27:14,720 --> 00:27:16,480
have

795
00:27:15,120 --> 00:27:18,879
custom traffic pattern that i have

796
00:27:16,480 --> 00:27:20,240
created and the tx rx also is connecting

797
00:27:18,880 --> 00:27:22,159
to the h1 so

798
00:27:20,240 --> 00:27:24,320
as expected the match static pattern is

799
00:27:22,159 --> 00:27:25,279
increasing as well as the tx rx for the

800
00:27:24,320 --> 00:27:28,480
switch uh

801
00:27:25,279 --> 00:27:31,679
1.1 so as you can see we are seeing

802
00:27:28,480 --> 00:27:34,640
uh increased car for uh match traffic

803
00:27:31,679 --> 00:27:36,240
and txrx the next thing that i'm

804
00:27:34,640 --> 00:27:38,960
matching on is the firewall

805
00:27:36,240 --> 00:27:39,600
uh so i'm blocking traffic to h4 so in

806
00:27:38,960 --> 00:27:41,760
this case

807
00:27:39,600 --> 00:27:44,959
uh if this is more than 20 it will shoot

808
00:27:41,760 --> 00:27:44,960
an email to the administrator

809
00:27:45,120 --> 00:27:51,439
and so as you can see i'm currently

810
00:27:48,159 --> 00:27:55,200
pinging h4 which is not thinking because

811
00:27:51,440 --> 00:27:55,200
i have a firewall rule set in there

812
00:27:55,679 --> 00:27:59,600
and uh as as you can see that the in the

813
00:27:58,000 --> 00:28:01,679
console logs it shows the

814
00:27:59,600 --> 00:28:04,879
firewall rule violation is increasing

815
00:28:01,679 --> 00:28:04,880
from 7 to 17

816
00:28:05,200 --> 00:28:11,440
and the carb for final traffic monitor

817
00:28:07,840 --> 00:28:11,439
is also starting to increase in this

818
00:28:12,320 --> 00:28:16,399
so after the final traffic count is more

819
00:28:14,399 --> 00:28:18,799
than 20 so as you can see right now it

820
00:28:16,399 --> 00:28:22,158
is 52 so it should send me an email

821
00:28:18,799 --> 00:28:23,918
as it does yeah so

822
00:28:22,159 --> 00:28:26,399
i have received an email from the fire

823
00:28:23,919 --> 00:28:26,399
account

824
00:28:26,720 --> 00:28:31,360
and now i'll show the web traffic count

825
00:28:28,799 --> 00:28:34,320
so if if the web traffic uh

826
00:28:31,360 --> 00:28:35,279
is constantly monitored i i just did a

827
00:28:34,320 --> 00:28:39,520
call for the

828
00:28:35,279 --> 00:28:39,520
server and the web traffic

829
00:28:40,159 --> 00:28:45,840
starts increasing as expected yeah

830
00:28:46,559 --> 00:28:50,559
so uh this is how the sdn gui works uh

831
00:28:49,039 --> 00:28:53,520
so we have demonstrated that

832
00:28:50,559 --> 00:28:54,720
uh we can achieve uh the sda network

833
00:28:53,520 --> 00:28:56,399
with ease with that

834
00:28:54,720 --> 00:28:57,919
automated deployment and the sdn gui

835
00:28:56,399 --> 00:28:59,520
gives so much flexibility to

836
00:28:57,919 --> 00:29:01,360
troubleshoot and customize

837
00:28:59,520 --> 00:29:03,760
and with that i would like to conclude

838
00:29:01,360 --> 00:29:05,840
thank you so much

839
00:29:03,760 --> 00:29:07,279
thank you to our presenters and to all

840
00:29:05,840 --> 00:29:08,720
of our participants

841
00:29:07,279 --> 00:29:10,159
we're about to begin planning our next

842
00:29:08,720 --> 00:29:13,039
hackathon and we're looking for

843
00:29:10,159 --> 00:29:15,120
participants mentors and sponsors

844
00:29:13,039 --> 00:29:16,640
help inform us in our planning please

845
00:29:15,120 --> 00:29:18,000
make sure to fill out your surveys

846
00:29:16,640 --> 00:29:19,919
and let us know what you think about the

847
00:29:18,000 --> 00:29:21,840
hackathon format and themes

848
00:29:19,919 --> 00:29:27,840
please be on the lookout for updates and

849
00:29:21,840 --> 00:29:27,840
we can't wait to see you in february

850
00:29:29,679 --> 00:29:31,760
you

