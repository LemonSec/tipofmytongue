1
00:00:00,000 --> 00:00:04,890
fine another resource so everything the

2
00:00:03,330 --> 00:00:07,020
whole mechanism the whole deal should

3
00:00:04,890 --> 00:00:10,170
happen in 50<font color="#E5E5E5"> milliseconds so this is</font>

4
00:00:07,020 --> 00:00:14,340
<font color="#CCCCCC">something which is never in existent in</font>

5
00:00:10,170 --> 00:00:16,770
mpls right the the third<font color="#E5E5E5"> thing is a</font>

6
00:00:14,340 --> 00:00:19,980
bi-directional mechanism<font color="#E5E5E5"> because if you</font>

7
00:00:16,770 --> 00:00:22,650
look at<font color="#CCCCCC"> it most of the LS space as I</font>

8
00:00:19,980 --> 00:00:25,320
<font color="#E5E5E5">said our unidirectional but in the case</font>

9
00:00:22,650 --> 00:00:28,470
of PPE you want to have bi-directional

10
00:00:25,320 --> 00:00:31,340
so point A to point B you want to have a

11
00:00:28,470 --> 00:00:35,550
to be as well as B to a so

12
00:00:31,340 --> 00:00:39,030
bi-directional LSP is by default and it

13
00:00:35,550 --> 00:00:41,099
those could be signaled or they could be

14
00:00:39,030 --> 00:00:43,020
associated so you set up then you

15
00:00:41,100 --> 00:00:46,430
associate saying that these two

16
00:00:43,020 --> 00:00:49,800
directions are associated together then

17
00:00:46,430 --> 00:00:52,410
not only<font color="#E5E5E5"> third you want to interoperate</font>

18
00:00:49,800 --> 00:00:55,649
with existing mpls technologies<font color="#CCCCCC"> you do</font>

19
00:00:52,410 --> 00:00:58,828
not want to come<font color="#CCCCCC"> up with whole new mpls</font>

20
00:00:55,649 --> 00:01:01,590
paradigm and say that this is the

21
00:00:58,829 --> 00:01:04,890
mpls-tp for you so you want to work work

22
00:01:01,590 --> 00:01:06,689
within the constraints of mpls-tp then

23
00:01:04,890 --> 00:01:09,869
whatever the protocol extensions you are

24
00:01:06,689 --> 00:01:12,658
doing it has to be transport agnostic so

25
00:01:09,869 --> 00:01:14,610
you cannot define for ATM this is the

26
00:01:12,659 --> 00:01:17,700
transport technology for<font color="#E5E5E5"> Ethernet this</font>

27
00:01:14,610 --> 00:01:20,189
is the type<font color="#CCCCCC"> unit</font><font color="#E5E5E5"> use so irrespective of</font>

28
00:01:17,700 --> 00:01:24,000
what payload you're carrying everything

29
00:01:20,189 --> 00:01:29,070
should remain the same<font color="#E5E5E5"> so if you see I</font>

30
00:01:24,000 --> 00:01:32,340
put mpls-tp with in mpls so what it

31
00:01:29,070 --> 00:01:37,139
convinces mpls-tp is not a new

32
00:01:32,340 --> 00:01:39,810
technology it is stripped off mpls so in

33
00:01:37,140 --> 00:01:43,049
other words you took<font color="#E5E5E5"> up a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font>

34
00:01:39,810 --> 00:01:45,780
which were added in mpls by taking<font color="#CCCCCC"> away</font>

35
00:01:43,049 --> 00:01:49,799
the control plane requirement and all

36
00:01:45,780 --> 00:01:53,729
that stuff and made a vanilla kind of

37
00:01:49,799 --> 00:01:59,579
mpls so mpls-tp is a subset of the whole

38
00:01:53,729 --> 00:02:03,450
mpls by the way if you look at it<font color="#E5E5E5"> in any</font>

39
00:01:59,579 --> 00:02:07,979
of the mpls-tp rfcs there is you don't

40
00:02:03,450 --> 00:02:10,289
<font color="#E5E5E5">find any new thing defined for mpls mpls</font>

41
00:02:07,979 --> 00:02:12,420
so there is<font color="#E5E5E5"> no protocol extension as</font>

42
00:02:10,288 --> 00:02:13,559
such most of the<font color="#E5E5E5"> things which were</font>

43
00:02:12,420 --> 00:02:18,569
defined

44
00:02:13,560 --> 00:02:20,280
where to how to make the<font color="#CCCCCC"> mpls work for</font>

45
00:02:18,569 --> 00:02:25,260
transport requirements that's<font color="#E5E5E5"> pretty</font>

46
00:02:20,280 --> 00:02:28,800
<font color="#E5E5E5">much it</font><font color="#CCCCCC"> so what exactly is being</font><font color="#E5E5E5"> solved</font>

47
00:02:25,260 --> 00:02:30,569
by mpls-tp it is<font color="#CCCCCC"> primarily replacing the</font>

48
00:02:28,800 --> 00:02:33,390
traditional TDM networks with packet

49
00:02:30,569 --> 00:02:40,649
<font color="#CCCCCC">switched networks and at the same time</font>

50
00:02:33,390 --> 00:02:43,339
<font color="#E5E5E5">providing the same set of needs and the</font>

51
00:02:40,650 --> 00:02:47,880
wants of transport networks and

52
00:02:43,340 --> 00:02:50,640
providing bigger pipe tunnels then it

53
00:02:47,880 --> 00:02:52,920
also the primary<font color="#E5E5E5"> thing is you</font><font color="#CCCCCC"> are</font>

54
00:02:50,640 --> 00:02:54,929
bringing<font color="#E5E5E5"> down the optics and capex how</font>

55
00:02:52,920 --> 00:02:57,200
do<font color="#E5E5E5"> you bring topics and carpets when you</font>

56
00:02:54,930 --> 00:03:01,319
are introducing<font color="#E5E5E5"> all new technology</font>

57
00:02:57,200 --> 00:03:03,119
asking for whole new tool sets and to do

58
00:03:01,319 --> 00:03:07,130
maintain to maintain order to maintain

59
00:03:03,120 --> 00:03:11,360
mpls-tp so how it is doing is the whole

60
00:03:07,130 --> 00:03:13,920
mpls-tp paradigm or the technology

61
00:03:11,360 --> 00:03:17,480
should fit into the<font color="#CCCCCC"> existing transport</font>

62
00:03:13,920 --> 00:03:22,980
technology so if you are having the

63
00:03:17,480 --> 00:03:25,078
<font color="#E5E5E5">stadium based you know nms or</font><font color="#CCCCCC"> EMS the</font>

64
00:03:22,980 --> 00:03:27,238
whole thing should fit into that so you

65
00:03:25,079 --> 00:03:29,910
should be the the network administrator

66
00:03:27,239 --> 00:03:33,269
should be<font color="#CCCCCC"> able to set up the paths just</font>

67
00:03:29,910 --> 00:03:35,760
like you used to set up all of the SONET

68
00:03:33,269 --> 00:03:38,160
SDH paths so that means the interface

69
00:03:35,760 --> 00:03:40,078
should<font color="#E5E5E5"> be able to provide the similar</font>

70
00:03:38,160 --> 00:03:43,980
interface in order for you to set up<font color="#E5E5E5"> and</font>

71
00:03:40,079 --> 00:03:46,680
underneath of it sets up is nothing of a

72
00:03:43,980 --> 00:03:50,548
concern to the administrator you know in

73
00:03:46,680 --> 00:03:52,680
a sense the Oyam capabilities though all

74
00:03:50,549 --> 00:03:54,959
of<font color="#CCCCCC"> the Oyam capabilities present in</font>

75
00:03:52,680 --> 00:03:57,900
existing transport network should be in

76
00:03:54,959 --> 00:04:00,030
existence in mpls-tp as well then fault

77
00:03:57,900 --> 00:04:02,730
detection and the recovery<font color="#CCCCCC"> mechanism</font>

78
00:04:00,030 --> 00:04:05,549
should be the same means it should be

79
00:04:02,730 --> 00:04:08,730
the<font color="#CCCCCC"> same requirements and path</font>

80
00:04:05,549 --> 00:04:12,710
computation and also the SLA

81
00:04:08,730 --> 00:04:15,799
requirements should be provided as well

82
00:04:12,710 --> 00:04:17,120
so if you look at<font color="#CCCCCC"> it there</font><font color="#E5E5E5"> are three</font>

83
00:04:15,800 --> 00:04:20,000
different categories you could

84
00:04:17,120 --> 00:04:23,920
categorize what mpls-tp is bringing to

85
00:04:20,000 --> 00:04:25,970
<font color="#CCCCCC">the mpls is from operations perspective</font>

86
00:04:23,920 --> 00:04:29,690
previously it was all control plane

87
00:04:25,970 --> 00:04:31,340
driven nowadays<font color="#E5E5E5"> nms driven that means</font>

88
00:04:29,690 --> 00:04:35,570
<font color="#CCCCCC">anima</font><font color="#E5E5E5"> should be able to drive the whole</font>

89
00:04:31,340 --> 00:04:38,570
establishment of LSP to maintenance to

90
00:04:35,570 --> 00:04:42,159
troubleshoot and all that stuff then in

91
00:04:38,570 --> 00:04:45,560
the<font color="#CCCCCC"> OEM category you're in the packet</font>

92
00:04:42,160 --> 00:04:48,080
accounting and you know all those all

93
00:04:45,560 --> 00:04:51,800
those metrics including SLO metrics but

94
00:04:48,080 --> 00:04:54,680
not mandatory in the packet<font color="#CCCCCC"> or IP mpls</font>

95
00:04:51,800 --> 00:04:57,380
networks now it is mandatory in mpls-tp

96
00:04:54,680 --> 00:05:00,260
network so if you take an mpls-tp LSB

97
00:04:57,380 --> 00:05:04,520
you should be able to find out the whole

98
00:05:00,260 --> 00:05:07,490
count of packets with specific intervals

99
00:05:04,520 --> 00:05:10,070
and the response times<font color="#E5E5E5"> and all that</font>

100
00:05:07,490 --> 00:05:12,830
stuff<font color="#E5E5E5"> so those things are all mandatory</font>

101
00:05:10,070 --> 00:05:15,080
of course the reliability it should be

102
00:05:12,830 --> 00:05:18,349
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> support all types of topologies</font>

103
00:05:15,080 --> 00:05:20,510
linear ring shade mesh protection with

104
00:05:18,350 --> 00:05:23,030
all protection schemes then switch over

105
00:05:20,510 --> 00:05:25,039
should be there then also the

106
00:05:23,030 --> 00:05:32,030
requirement of 50 millisecond<font color="#CCCCCC"> switch</font>

107
00:05:25,040 --> 00:05:36,820
<font color="#CCCCCC">over any</font><font color="#E5E5E5"> questions thus far Before we</font>

108
00:05:32,030 --> 00:05:36,820
<font color="#E5E5E5">jump into some of the tools</font>

109
00:05:39,210 --> 00:05:46,020
okay either you're not able to follow or

110
00:05:43,180 --> 00:05:48,820
you're totally understood everything

111
00:05:46,020 --> 00:05:54,070
okay I take<font color="#E5E5E5"> it as you understood</font>

112
00:05:48,820 --> 00:05:56,380
everything troubleshooting mpls so<font color="#E5E5E5"> I</font>

113
00:05:54,070 --> 00:05:59,860
have explained this what are the

114
00:05:56,380 --> 00:06:02,889
problems and mpls networks some of the

115
00:05:59,860 --> 00:06:07,150
things which<font color="#E5E5E5"> haven't covered mentioned</font>

116
00:06:02,889 --> 00:06:11,740
word the there is a problem which is

117
00:06:07,150 --> 00:06:14,138
<font color="#E5E5E5">called black holing where you you see</font>

118
00:06:11,740 --> 00:06:17,800
packets being sent from the ingress

119
00:06:14,139 --> 00:06:20,889
outer but you never see<font color="#CCCCCC"> them out the</font>

120
00:06:17,800 --> 00:06:22,990
egress router so that means that being

121
00:06:20,889 --> 00:06:25,090
black holes somewhere that means<font color="#E5E5E5"> that</font>

122
00:06:22,990 --> 00:06:28,650
they're getting dropped they could be

123
00:06:25,090 --> 00:06:32,739
dropped either because there was no path

124
00:06:28,650 --> 00:06:35,770
from some<font color="#E5E5E5"> path in the mean between as</font>

125
00:06:32,740 --> 00:06:38,530
broken it could be due to control plane

126
00:06:35,770 --> 00:06:40,060
and data plane mismatch like control

127
00:06:38,530 --> 00:06:42,638
plane could have signal saying that you

128
00:06:40,060 --> 00:06:46,870
take this path but later plane might be

129
00:06:42,639 --> 00:06:49,449
doing forwarding may be forwarding based

130
00:06:46,870 --> 00:06:52,320
on its own forwarding table which is not

131
00:06:49,449 --> 00:06:55,780
in sync with control plane and somewhere

132
00:06:52,320 --> 00:06:58,570
the whole thing broke and the packets

133
00:06:55,780 --> 00:07:00,880
were being dropped then the other

134
00:06:58,570 --> 00:07:03,340
problem which I explained is if<font color="#E5E5E5"> you</font>

135
00:07:00,880 --> 00:07:07,780
disable mpls between<font color="#CCCCCC"> collective might</font>

136
00:07:03,340 --> 00:07:10,750
hop and<font color="#CCCCCC"> and pl ultimate have the you may</font>

137
00:07:07,780 --> 00:07:14,080
<font color="#E5E5E5">not be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to figure out major mpls is</font>

138
00:07:10,750 --> 00:07:19,270
enabled or not because the the packets

139
00:07:14,080 --> 00:07:22,359
could be you know about<font color="#E5E5E5"> it from multi</font><font color="#CCCCCC"> my</font>

140
00:07:19,270 --> 00:07:24,400
<font color="#CCCCCC">penultimate hot pile ultimate hob but</font>

141
00:07:22,360 --> 00:07:26,320
they're not nebulus is not really

142
00:07:24,400 --> 00:07:29,489
enabled so in some cases<font color="#E5E5E5"> it may be</font>

143
00:07:26,320 --> 00:07:32,620
passing some cases it may be failing and

144
00:07:29,490 --> 00:07:36,400
some<font color="#E5E5E5"> of the MTU issues which is very</font>

145
00:07:32,620 --> 00:07:38,800
<font color="#CCCCCC">very critical thing in mpls networks</font>

146
00:07:36,400 --> 00:07:42,250
because you could have hierarchical is

147
00:07:38,800 --> 00:07:45,039
peace and the the MTU size could be

148
00:07:42,250 --> 00:07:47,210
decreasing and if you are trying to send

149
00:07:45,039 --> 00:07:49,960
<font color="#E5E5E5">say larger pocket</font>

150
00:07:47,210 --> 00:07:53,599
it could be dropped or you could<font color="#CCCCCC"> have a</font>

151
00:07:49,960 --> 00:07:56,599
defragmented packet and you may have out

152
00:07:53,600 --> 00:07:59,720
of<font color="#CCCCCC"> sync issues then of</font><font color="#E5E5E5"> course as</font>

153
00:07:56,599 --> 00:08:03,259
explained ecmp problem which is tougher

154
00:07:59,720 --> 00:08:06,919
problem to solve so the primitive

155
00:08:03,259 --> 00:08:10,400
debugging methods were just use ICMP to

156
00:08:06,919 --> 00:08:12,770
verify to peer out bitten the path

157
00:08:10,400 --> 00:08:16,159
between two P router so that means you

158
00:08:12,770 --> 00:08:18,440
are emulating the data packet by sending

159
00:08:16,160 --> 00:08:21,889
icmp that means ICMP packet will be a

160
00:08:18,440 --> 00:08:26,180
label packet and it will be sent the

161
00:08:21,889 --> 00:08:32,060
other mechanism to use is worth of a

162
00:08:26,180 --> 00:08:36,130
ping so you actually specify a ping

163
00:08:32,059 --> 00:08:42,348
packet to take a specific LSB by

164
00:08:36,130 --> 00:08:44,570
specifying that worth then the you could

165
00:08:42,349 --> 00:08:49,149
go<font color="#E5E5E5"> actually go and figure out in each of</font>

166
00:08:44,570 --> 00:08:52,190
the device using CLI or SNMP or whatever

167
00:08:49,149 --> 00:08:54,589
by checking<font color="#E5E5E5"> the forwarding tables and</font>

168
00:08:52,190 --> 00:08:58,010
see whether forwarding table entry

169
00:08:54,589 --> 00:09:00,529
exists or not then you could check each

170
00:08:58,010 --> 00:09:02,959
of the interfaces saying that whether

171
00:09:00,529 --> 00:09:06,980
this interface mpls is enabled or not

172
00:09:02,959 --> 00:09:11,359
then check the the MTU size and all that

173
00:09:06,980 --> 00:09:13,760
stuff right then you could also see

174
00:09:11,360 --> 00:09:16,399
whether control plane protocol is

175
00:09:13,760 --> 00:09:19,430
existing and it is working<font color="#E5E5E5"> and the</font>

176
00:09:16,399 --> 00:09:22,250
various mechanisms to do that as well<font color="#E5E5E5"> so</font>

177
00:09:19,430 --> 00:09:25,510
what<font color="#E5E5E5"> is the problem with icmp ping see</font>

178
00:09:22,250 --> 00:09:28,279
icmp ping yeah you could encapsulate

179
00:09:25,510 --> 00:09:30,560
have then I simply packet and capsulated

180
00:09:28,279 --> 00:09:33,649
and send it<font color="#CCCCCC"> just like it get up get a</font>

181
00:09:30,560 --> 00:09:37,819
frame but what<font color="#E5E5E5"> if the LSP between p2 and</font>

182
00:09:33,649 --> 00:09:40,880
p3 is broken right so what usually what

183
00:09:37,820 --> 00:09:43,970
happens is the pitot will pop the labels

184
00:09:40,880 --> 00:09:48,260
and it funds and it it does a IP lookup

185
00:09:43,970 --> 00:09:50,990
and if IP route is I existing it

186
00:09:48,260 --> 00:09:52,689
forwards the packet to PA to most<font color="#CCCCCC"> likely</font>

187
00:09:50,990 --> 00:09:56,329
the IP route will exist so<font color="#CCCCCC"> that means</font>

188
00:09:52,690 --> 00:09:58,170
ICMP will not indicate an LSP failure

189
00:09:56,329 --> 00:10:01,560
between p2 and p3

190
00:09:58,170 --> 00:10:05,279
then as I said it cannot verify ecmp

191
00:10:01,560 --> 00:10:07,290
paths as well so i simpiy you cannot

192
00:10:05,279 --> 00:10:11,910
<font color="#E5E5E5">really use in all the cases or majority</font>

193
00:10:07,290 --> 00:10:16,939
<font color="#CCCCCC">of the mpls cases in the case of VPN</font>

194
00:10:11,910 --> 00:10:21,149
aware ping so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the next level of</font>

195
00:10:16,940 --> 00:10:24,300
debugging so it actually emulates<font color="#E5E5E5"> a VPN</font>

196
00:10:21,149 --> 00:10:29,250
traffic so encapsulate the<font color="#E5E5E5"> back packet</font>

197
00:10:24,300 --> 00:10:32,599
with the same label stack of VPN and in

198
00:10:29,250 --> 00:10:35,850
this case when in<font color="#E5E5E5"> this example if the</font>

199
00:10:32,600 --> 00:10:40,410
LSP between p 3 and p 2 our penultimate

200
00:10:35,850 --> 00:10:42,449
hop and ultimate hop is broken you

201
00:10:40,410 --> 00:10:45,360
cannot detect in that case<font color="#E5E5E5"> as well</font>

202
00:10:42,449 --> 00:10:49,079
<font color="#E5E5E5">because it will just for the package and</font>

203
00:10:45,360 --> 00:10:51,360
you<font color="#E5E5E5"> get the response but the LSP is</font>

204
00:10:49,079 --> 00:10:54,449
actually broken so those corner cases

205
00:10:51,360 --> 00:10:59,250
you cannot figure<font color="#E5E5E5"> out with air escaping</font>

206
00:10:54,449 --> 00:11:04,790
now with<font color="#CCCCCC"> the VPN ping then it also</font>

207
00:10:59,250 --> 00:11:07,829
cannot do ecmp and it cannot detect

208
00:11:04,790 --> 00:11:10,980
control plane to data play in this match

209
00:11:07,829 --> 00:11:14,430
for example if control plane says you

210
00:11:10,980 --> 00:11:16,940
take<font color="#E5E5E5"> Ethan X 0 / 0 but the actual data</font>

211
00:11:14,430 --> 00:11:21,719
plane<font color="#E5E5E5"> or the forwarding employees</font>

212
00:11:16,940 --> 00:11:24,510
<font color="#E5E5E5">Ethernet 0 / 1 so there is</font><font color="#CCCCCC"> a mismatch</font>

213
00:11:21,720 --> 00:11:27,540
and the packet is going with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> different</font>

214
00:11:24,510 --> 00:11:33,959
label and you cannot really identify

215
00:11:27,540 --> 00:11:35,490
that so mpls<font color="#E5E5E5"> OEM so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the actual</font>

216
00:11:33,959 --> 00:11:39,959
mpls sodium which<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to talk</font>

217
00:11:35,490 --> 00:11:43,319
<font color="#E5E5E5">about this deals with how to measure how</font>

218
00:11:39,959 --> 00:11:47,310
to perform various<font color="#CCCCCC"> oi'm operations on</font>

219
00:11:43,319 --> 00:11:53,209
this mpls networks and so it should be

220
00:11:47,310 --> 00:11:58,138
<font color="#CCCCCC">able to do proactive as well as reactive</font>

221
00:11:53,209 --> 00:12:02,930
based OEM so proactive means i should be

222
00:11:58,139 --> 00:12:05,310
<font color="#CCCCCC">able to continuously check a given LSP</font>

223
00:12:02,930 --> 00:12:09,300
before<font color="#E5E5E5"> i realized there was a breakage</font>

224
00:12:05,310 --> 00:12:10,579
and reactive is if there is a breakage<font color="#CCCCCC"> i</font>

225
00:12:09,300 --> 00:12:13,368
found

226
00:12:10,579 --> 00:12:16,689
using<font color="#E5E5E5"> some proactive tools the</font>

227
00:12:13,369 --> 00:12:19,160
<font color="#E5E5E5">subsequent action of how do I know next</font>

228
00:12:16,689 --> 00:12:21,679
<font color="#E5E5E5">what to do in other words how do I</font>

229
00:12:19,160 --> 00:12:23,629
figure where exactly the problem is what

230
00:12:21,679 --> 00:12:28,579
is the problem and what is a quick fix i

231
00:12:23,629 --> 00:12:36,699
could do right then it should have<font color="#CCCCCC"> the</font>

232
00:12:28,579 --> 00:12:40,248
ability<font color="#CCCCCC"> to you know diagnose a specific</font>

233
00:12:36,699 --> 00:12:41,660
error and convey the message so that is

234
00:12:40,249 --> 00:12:44,540
another critical thing yes you could

235
00:12:41,660 --> 00:12:47,360
diagnose but how do I aggregate multiple

236
00:12:44,540 --> 00:12:49,839
letters into single error so that that

237
00:12:47,360 --> 00:12:52,160
is what it is or how do we derive

238
00:12:49,839 --> 00:12:54,079
multiple ways from multiple<font color="#E5E5E5"> because you</font>

239
00:12:52,160 --> 00:12:58,269
could have like<font color="#CCCCCC"> timeout</font><font color="#E5E5E5"> you could have</font>

240
00:12:54,079 --> 00:13:00,290
like you know label mismatch and

241
00:12:58,269 --> 00:13:02,809
different kinds<font color="#E5E5E5"> of errors at the same</font>

242
00:13:00,290 --> 00:13:05,389
time but how exactly you can figure<font color="#E5E5E5"> out</font>

243
00:13:02,809 --> 00:13:07,670
<font color="#E5E5E5">a grating all those errors then of</font>

244
00:13:05,389 --> 00:13:11,660
course provide the<font color="#CCCCCC"> correct class toolset</font>

245
00:13:07,670 --> 00:13:13,988
not<font color="#CCCCCC"> just a simple tool set so what is</font>

246
00:13:11,660 --> 00:13:19,179
<font color="#CCCCCC">Ellis beeping error sweeping is based on</font>

247
00:13:13,989 --> 00:13:22,850
UDP based mechanism and it is to detect

248
00:13:19,179 --> 00:13:25,689
different LSP failures label mismatches

249
00:13:22,850 --> 00:13:29,569
control plane to get a plane mismatch

250
00:13:25,689 --> 00:13:33,049
then also it actually figures out what

251
00:13:29,569 --> 00:13:35,660
exactly<font color="#E5E5E5"> the problem is and it can tell</font>

252
00:13:33,049 --> 00:13:41,149
you what the<font color="#CCCCCC"> problem is and also it</font>

253
00:13:35,660 --> 00:13:45,049
tells you<font color="#CCCCCC"> the mru not just the MTU so</font><font color="#E5E5E5"> mr</font>

254
00:13:41,149 --> 00:13:49,129
<font color="#E5E5E5">you MTU is what is a the transmittable</font>

255
00:13:45,049 --> 00:13:52,879
size whereas mr you is which actually

256
00:13:49,129 --> 00:13:55,399
tells you what is the payload size so

257
00:13:52,879 --> 00:13:59,559
<font color="#E5E5E5">you could have like four labels of Phi</font>

258
00:13:55,399 --> 00:14:02,269
labels so a more empty you will only

259
00:13:59,559 --> 00:14:04,610
account for all of but you could on that

260
00:14:02,269 --> 00:14:07,429
LSP you could have like three labels sew

261
00:14:04,610 --> 00:14:09,799
amar'e will tell what is exact payload

262
00:14:07,429 --> 00:14:11,988
you could send with those three<font color="#E5E5E5"> label</font>

263
00:14:09,799 --> 00:14:16,309
<font color="#E5E5E5">stack so that way you could figure out</font>

264
00:14:11,989 --> 00:14:18,649
how to deploy my network based on the

265
00:14:16,309 --> 00:14:22,219
hierarchical SP model so which is<font color="#E5E5E5"> very</font>

266
00:14:18,649 --> 00:14:23,779
<font color="#E5E5E5">very useful then it should be standard</font>

267
00:14:22,220 --> 00:14:25,220
because

268
00:14:23,779 --> 00:14:27,499
you need to interoperate with multiple

269
00:14:25,220 --> 00:14:29,779
vendors if it is single vendor I'm okay

270
00:14:27,499 --> 00:14:32,389
<font color="#CCCCCC">I could design</font><font color="#E5E5E5"> whatever I want but if I</font>

271
00:14:29,779 --> 00:14:34,459
have mix of different devices I should

272
00:14:32,389 --> 00:14:36,470
be<font color="#CCCCCC"> able to interoperate with different</font>

273
00:14:34,459 --> 00:14:38,899
vendor devices so that means it should

274
00:14:36,470 --> 00:14:41,959
be a standard and it should be<font color="#E5E5E5"> able to</font>

275
00:14:38,899 --> 00:14:45,709
verify all the different type of mpls

276
00:14:41,959 --> 00:14:50,029
effects so it could be ipv4<font color="#E5E5E5"> ldp</font><font color="#CCCCCC"> feck or</font>

277
00:14:45,709 --> 00:14:52,849
it could be ipv6<font color="#CCCCCC"> ldp perfect or it could</font>

278
00:14:50,029 --> 00:14:55,339
be te or it could be bgp or it could be

279
00:14:52,850 --> 00:14:57,910
pseudowire anything else so<font color="#CCCCCC"> I should be</font>

280
00:14:55,339 --> 00:15:01,459
<font color="#E5E5E5">able to verify each fact type and</font>

281
00:14:57,910 --> 00:15:06,290
determine the problems with a proactive

282
00:15:01,459 --> 00:15:11,989
or reactive then of<font color="#CCCCCC"> course it has to</font><font color="#E5E5E5"> do</font>

283
00:15:06,290 --> 00:15:14,569
multicast as well not just unicast so

284
00:15:11,990 --> 00:15:17,269
the function is to work<font color="#E5E5E5"> just like I see</font>

285
00:15:14,569 --> 00:15:19,729
in pipping so we do not want<font color="#E5E5E5"> to have a</font>

286
00:15:17,269 --> 00:15:22,399
totally different tool set we just want

287
00:15:19,730 --> 00:15:24,110
to extend the existing ping but<font color="#E5E5E5"> add</font>

288
00:15:22,399 --> 00:15:26,600
<font color="#E5E5E5">extensions to that so that you could</font>

289
00:15:24,110 --> 00:15:29,959
<font color="#CCCCCC">perform just like how</font><font color="#E5E5E5"> we use to ICM</font>

290
00:15:26,600 --> 00:15:34,670
pipping and you should be<font color="#CCCCCC"> able to</font>

291
00:15:29,959 --> 00:15:36,859
specify what feck + TTL options and you

292
00:15:34,670 --> 00:15:40,809
<font color="#CCCCCC">know all that</font><font color="#E5E5E5"> how to encapsulate label</font>

293
00:15:36,860 --> 00:15:44,089
and all that stuff then when you do that

294
00:15:40,809 --> 00:15:47,029
when you issue<font color="#E5E5E5"> that command the package</font>

295
00:15:44,089 --> 00:15:53,480
should be encapsulated accordingly and

296
00:15:47,029 --> 00:15:56,660
<font color="#CCCCCC">send from point a to point be the</font>

297
00:15:53,480 --> 00:15:59,689
primary requirement is that unlike

298
00:15:56,660 --> 00:16:02,269
regular packets the<font color="#CCCCCC"> OEM packets cannot</font>

299
00:15:59,689 --> 00:16:06,259
link into customer networks this will

300
00:16:02,269 --> 00:16:09,860
cause multiple issues one is security

301
00:16:06,259 --> 00:16:16,939
issue customers good folks could misuse

302
00:16:09,860 --> 00:16:21,139
by you know emulating the OEM packets

303
00:16:16,939 --> 00:16:23,120
and sending a boss attack or like you

304
00:16:21,139 --> 00:16:25,040
know disruptive packet attack you into

305
00:16:23,120 --> 00:16:28,309
the customer networks so that means i

306
00:16:25,040 --> 00:16:31,099
have to terminate no matter what at the

307
00:16:28,309 --> 00:16:33,079
egress of the network mpls networks it

308
00:16:31,100 --> 00:16:37,220
cannot get into the customer networks

309
00:16:33,079 --> 00:16:39,529
and the response<font color="#CCCCCC"> packet</font><font color="#E5E5E5"> should convey</font>

310
00:16:37,220 --> 00:16:43,819
all of the<font color="#E5E5E5"> details what it's supposed to</font>

311
00:16:39,529 --> 00:16:45,889
tell you and the other thing<font color="#E5E5E5"> is the</font>

312
00:16:43,819 --> 00:16:49,310
packet cannot be routable the main

313
00:16:45,889 --> 00:16:52,720
reason is if it is routable packet if

314
00:16:49,310 --> 00:16:55,790
there<font color="#E5E5E5"> is an MPLS failure most likely in</font>

315
00:16:52,720 --> 00:16:58,970
majority<font color="#E5E5E5"> of the vendor devices the</font>

316
00:16:55,790 --> 00:17:01,339
packet will be<font color="#E5E5E5"> processed at the upper</font>

317
00:16:58,970 --> 00:17:04,309
layer if it is an IP packet the<font color="#CCCCCC"> Nike</font>

318
00:17:01,339 --> 00:17:06,319
processing will happen and the IP route

319
00:17:04,309 --> 00:17:08,359
lookup will be done and if there<font color="#CCCCCC"> is</font>

320
00:17:06,319 --> 00:17:09,918
another out entry it automatically

321
00:17:08,359 --> 00:17:12,889
routes so that means you will<font color="#CCCCCC"> not be</font>

322
00:17:09,919 --> 00:17:15,829
able<font color="#E5E5E5"> to find out there is an MPLS</font>

323
00:17:12,890 --> 00:17:20,449
failure so the packet cannot have

324
00:17:15,829 --> 00:17:23,359
routable IP address so what it can

325
00:17:20,449 --> 00:17:24,799
verify so these are as of now these are

326
00:17:23,359 --> 00:17:28,099
the<font color="#CCCCCC"> different effect types which were</font>

327
00:17:24,799 --> 00:17:32,360
<font color="#E5E5E5">defined not necessary that this is the</font>

328
00:17:28,099 --> 00:17:34,939
<font color="#CCCCCC">feck</font><font color="#E5E5E5"> types only there will be more fact</font>

329
00:17:32,360 --> 00:17:37,158
types which gets added as and when new

330
00:17:34,940 --> 00:17:39,500
technologies get developed so as<font color="#E5E5E5"> you can</font>

331
00:17:37,159 --> 00:17:44,919
see pretty<font color="#E5E5E5"> much covers</font><font color="#CCCCCC"> the length and</font>

332
00:17:39,500 --> 00:17:44,919
breadth of the<font color="#CCCCCC"> effect types</font>

333
00:17:47,160 --> 00:17:54,810
so<font color="#E5E5E5"> LSP constructs there are two types</font>

334
00:17:51,600 --> 00:17:57,419
one is request request packet and the

335
00:17:54,810 --> 00:18:00,270
response packet and within the packet

336
00:17:57,420 --> 00:18:04,200
you should be able to specify what

337
00:18:00,270 --> 00:18:06,870
it is and the package<font color="#E5E5E5"> should be able to</font>

338
00:18:04,200 --> 00:18:10,590
be encapsulated with the same<font color="#E5E5E5"> exact</font>

339
00:18:06,870 --> 00:18:13,889
label stack as the data packet for

340
00:18:10,590 --> 00:18:17,129
example if<font color="#E5E5E5"> I am sending from Vancouver</font>

341
00:18:13,890 --> 00:18:19,940
to San Francisco and there is an MPLS

342
00:18:17,130 --> 00:18:22,350
LSP from Vancouver to a San Francisco

343
00:18:19,940 --> 00:18:24,960
when<font color="#E5E5E5"> the data packet is sent from</font>

344
00:18:22,350 --> 00:18:28,290
Vancouver to San Francisco<font color="#E5E5E5"> it will be</font>

345
00:18:24,960 --> 00:18:31,230
encapsulated with label let's take 20 so

346
00:18:28,290 --> 00:18:34,500
when<font color="#E5E5E5"> I send OEM packet the volume packet</font>

347
00:18:31,230 --> 00:18:38,490
also should have labeled 20 because this

348
00:18:34,500 --> 00:18:41,520
package should go just like any other

349
00:18:38,490 --> 00:18:43,080
data packet so it cannot be a separate

350
00:18:41,520 --> 00:18:45,780
packet because the behavior if<font color="#E5E5E5"> you</font>

351
00:18:43,080 --> 00:18:47,939
encapsulate with label 21<font color="#E5E5E5"> the behavior</font>

352
00:18:45,780 --> 00:18:51,050
could change and it may not<font color="#E5E5E5"> really able</font>

353
00:18:47,940 --> 00:18:53,280
to<font color="#E5E5E5"> test the existing exact level path</font>

354
00:18:51,050 --> 00:18:55,950
then the package should be able to

355
00:18:53,280 --> 00:18:57,720
convey the interface information so<font color="#E5E5E5"> you</font>

356
00:18:55,950 --> 00:19:02,660
could actually verify interface

357
00:18:57,720 --> 00:19:06,180
information then of<font color="#E5E5E5"> course different</font>

358
00:19:02,660 --> 00:19:10,320
label stock analyst stuff and this<font color="#E5E5E5"> is</font>

359
00:19:06,180 --> 00:19:12,660
the response codes so as you<font color="#E5E5E5"> can see in</font>

360
00:19:10,320 --> 00:19:15,240
if you look at ICM pipping right when

361
00:19:12,660 --> 00:19:17,490
you do ping the response you get this

362
00:19:15,240 --> 00:19:20,250
timeout or a bank sign which is<font color="#E5E5E5"> which</font>

363
00:19:17,490 --> 00:19:22,560
means it has received right but but in

364
00:19:20,250 --> 00:19:26,850
the case of<font color="#E5E5E5"> fellis whipping it is not</font>

365
00:19:22,560 --> 00:19:29,940
just<font color="#E5E5E5"> one value we have</font><font color="#CCCCCC"> young number of</font>

366
00:19:26,850 --> 00:19:36,090
values so if<font color="#E5E5E5"> we take for example number</font>

367
00:19:29,940 --> 00:19:38,460
three is the return code you see that

368
00:19:36,090 --> 00:19:40,290
means if you receive when you send a on

369
00:19:38,460 --> 00:19:43,410
packet and you receive<font color="#E5E5E5"> a response code</font>

370
00:19:40,290 --> 00:19:47,490
of three that means the response is sent

371
00:19:43,410 --> 00:19:50,040
by the egress router that is the foreign

372
00:19:47,490 --> 00:19:52,200
but if for example an intermediate node

373
00:19:50,040 --> 00:19:54,450
has sent that means you are doing like

374
00:19:52,200 --> 00:19:58,200
TTL three or something out<font color="#CCCCCC"> of twenty two</font>

375
00:19:54,450 --> 00:20:00,240
halves you will you may receive number

376
00:19:58,200 --> 00:20:03,480
eight where

377
00:20:00,240 --> 00:20:07,290
it says label switched at<font color="#CCCCCC"> stag depth so</font>

378
00:20:03,480 --> 00:20:09,510
that means you're terminating at hop

379
00:20:07,290 --> 00:20:13,770
number two or three based on what label

380
00:20:09,510 --> 00:20:15,780
what TTL hope you<font color="#CCCCCC"> specify so it is not</font>

381
00:20:13,770 --> 00:20:17,850
<font color="#CCCCCC">an egress of the fact but it</font><font color="#E5E5E5"> is a</font>

382
00:20:15,780 --> 00:20:21,120
transit device which is label switch and

383
00:20:17,850 --> 00:20:24,389
it also tells in the written<font color="#CCCCCC"> sub-code</font>

384
00:20:21,120 --> 00:20:28,409
saying that to<font color="#CCCCCC"> what stag depth you could</font>

385
00:20:24,390 --> 00:20:31,770
have like five labels but on the top it

386
00:20:28,410 --> 00:20:33,330
<font color="#E5E5E5">is doing only two labels you know two</font>

387
00:20:31,770 --> 00:20:35,639
labels were popped or something like

388
00:20:33,330 --> 00:20:38,879
that<font color="#CCCCCC"> so it is switching at this fact</font>

389
00:20:35,640 --> 00:20:41,309
depth of<font color="#E5E5E5"> two so even the</font><font color="#CCCCCC"> sub-code it is</font>

390
00:20:38,880 --> 00:20:43,230
called<font color="#CCCCCC"> RAC is called written sub-code we</font>

391
00:20:41,309 --> 00:20:45,389
will tell you<font color="#E5E5E5"> what is the stag depth it</font>

392
00:20:43,230 --> 00:20:49,020
is switching it and if there are<font color="#E5E5E5"> errors</font>

393
00:20:45,390 --> 00:20:51,270
like BF map mismatch where you you are

394
00:20:49,020 --> 00:20:53,429
expecting the packet to receive on

395
00:20:51,270 --> 00:20:55,110
interface yay but you are receiving on

396
00:20:53,429 --> 00:20:59,130
interface be that means there is a

397
00:20:55,110 --> 00:21:01,320
mismatch of the path so you may receive

398
00:20:59,130 --> 00:21:03,690
number<font color="#E5E5E5"> five and if there is no level</font>

399
00:21:01,320 --> 00:21:06,030
entry you may receive number<font color="#E5E5E5"> eleven and</font>

400
00:21:03,690 --> 00:21:09,300
those<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> things so it gives</font>

401
00:21:06,030 --> 00:21:14,010
complete information not just whether

402
00:21:09,300 --> 00:21:16,559
connectivity exists or not so the label

403
00:21:14,010 --> 00:21:18,300
and capsulation we have in the case of

404
00:21:16,559 --> 00:21:20,340
5p encapsulation you have<font color="#CCCCCC"> five</font>

405
00:21:18,300 --> 00:21:23,428
encapsulation along with<font color="#E5E5E5"> mpls</font>

406
00:21:20,340 --> 00:21:25,590
encapsulation so these<font color="#E5E5E5"> are the default</font>

407
00:21:23,429 --> 00:21:29,550
values like in the case of TTL you have

408
00:21:25,590 --> 00:21:32,309
255 and for the case<font color="#CCCCCC"> of IP encapsulation</font>

409
00:21:29,550 --> 00:21:34,830
IP TTL will be<font color="#CCCCCC"> one and that</font><font color="#E5E5E5"> that's a UDP</font>

410
00:21:32,309 --> 00:21:37,200
destination port and the<font color="#CCCCCC"> source address</font>

411
00:21:34,830 --> 00:21:40,919
<font color="#E5E5E5">and the destination address is always</font>

412
00:21:37,200 --> 00:21:44,160
localhost address the reason is if it is

413
00:21:40,920 --> 00:21:48,630
popped at intermediate router it will

414
00:21:44,160 --> 00:21:50,809
not be able<font color="#E5E5E5"> to IP forward I or IP route</font>

415
00:21:48,630 --> 00:21:55,340
rather it will be punted so that local

416
00:21:50,809 --> 00:21:58,410
host will only process that packet and

417
00:21:55,340 --> 00:21:59,549
this is the reply much similar for lack

418
00:21:58,410 --> 00:22:02,129
of time value

419
00:21:59,549 --> 00:22:05,070
pass through and this is the down stream

420
00:22:02,129 --> 00:22:06,899
mapping there is one of the TL ways this

421
00:22:05,070 --> 00:22:09,210
is the older version that is a newer

422
00:22:06,899 --> 00:22:11,939
version your version<font color="#CCCCCC"> is supported</font>

423
00:22:09,210 --> 00:22:16,769
because the LSP originally when<font color="#E5E5E5"> we</font>

424
00:22:11,940 --> 00:22:21,440
designed to the we always<font color="#E5E5E5"> assumed the</font>

425
00:22:16,769 --> 00:22:25,379
same<font color="#CCCCCC"> type from point A to point B but</font>

426
00:22:21,440 --> 00:22:28,889
you could<font color="#CCCCCC"> have like a</font><font color="#E5E5E5"> tunnel model where</font>

427
00:22:25,379 --> 00:22:31,738
the label stack could change so we came

428
00:22:28,889 --> 00:22:33,840
up<font color="#CCCCCC"> with much extensible model but both</font>

429
00:22:31,739 --> 00:22:36,539
conveys the same so the<font color="#E5E5E5"> primary</font><font color="#CCCCCC"> thing</font>

430
00:22:33,840 --> 00:22:39,509
which it conveys is when you in the echo

431
00:22:36,539 --> 00:22:41,970
request you send saying that this is the

432
00:22:39,509 --> 00:22:44,039
downstream information that means the

433
00:22:41,970 --> 00:22:46,019
very downstream router I know what is

434
00:22:44,039 --> 00:22:49,799
<font color="#CCCCCC">into interface information what is the</font>

435
00:22:46,019 --> 00:22:52,230
label stack of the downstream router so

436
00:22:49,799 --> 00:22:55,019
when<font color="#E5E5E5"> I send the package I should be able</font>

437
00:22:52,230 --> 00:22:59,100
to put that<font color="#E5E5E5"> payload in here and send it</font>

438
00:22:55,019 --> 00:23:01,259
there and on the<font color="#E5E5E5"> receiving router it</font>

439
00:22:59,100 --> 00:23:03,238
<font color="#E5E5E5">validates whether it is</font><font color="#CCCCCC"> the information</font>

440
00:23:01,259 --> 00:23:05,759
<font color="#E5E5E5">it received in the payload versus the</font>

441
00:23:03,239 --> 00:23:09,809
actual interface information and

442
00:23:05,759 --> 00:23:12,119
compares and if<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> okay it</font><font color="#E5E5E5"> sends</font><font color="#CCCCCC"> back</font>

443
00:23:09,809 --> 00:23:14,549
the subsequent downstream router

444
00:23:12,119 --> 00:23:17,908
information so that every hop you could

445
00:23:14,549 --> 00:23:19,619
verify for the downstream information so

446
00:23:17,909 --> 00:23:22,230
<font color="#E5E5E5">you could verify label stack you could</font>

447
00:23:19,619 --> 00:23:25,230
verify interface information you could

448
00:23:22,230 --> 00:23:28,799
verify MTU you could verify a module and

449
00:23:25,230 --> 00:23:30,359
you can also query the multipath

450
00:23:28,799 --> 00:23:33,989
information for example from

451
00:23:30,359 --> 00:23:37,739
intermediate router one I have six paths

452
00:23:33,989 --> 00:23:41,100
so<font color="#CCCCCC"> that means in the multipath</font>

453
00:23:37,739 --> 00:23:43,139
information I'll have 60 lbs saying that

454
00:23:41,100 --> 00:23:45,869
these are the pl different type of

455
00:23:43,139 --> 00:23:49,320
information so that means<font color="#E5E5E5"> 6 down stream</font>

456
00:23:45,869 --> 00:23:51,988
PL<font color="#E5E5E5"> v's I package and send it back</font><font color="#CCCCCC"> to the</font>

457
00:23:49,320 --> 00:23:54,749
source saying that you can in order to

458
00:23:51,989 --> 00:23:57,720
verify this is the information<font color="#E5E5E5"> so that</font>

459
00:23:54,749 --> 00:24:00,090
if i want to have out of<font color="#CCCCCC"> six parts</font><font color="#E5E5E5"> i</font>

460
00:23:57,720 --> 00:24:02,970
want to verify one path I know how to

461
00:24:00,090 --> 00:24:05,609
get to one part because the router which

462
00:24:02,970 --> 00:24:07,980
is sending that information the 65

463
00:24:05,609 --> 00:24:11,100
information will tell you this is the

464
00:24:07,980 --> 00:24:12,559
how this is how I do the hashing so if

465
00:24:11,100 --> 00:24:15,408
you format

466
00:24:12,559 --> 00:24:17,418
the packet with this<font color="#CCCCCC"> so-and-so</font>

467
00:24:15,409 --> 00:24:23,240
encapsulation you should be able to hash

468
00:24:17,419 --> 00:24:24,919
on to that specific path so this is<font color="#E5E5E5"> what</font>

469
00:24:23,240 --> 00:24:27,230
<font color="#E5E5E5">I was explaining you could send the</font>

470
00:24:24,919 --> 00:24:29,509
downstream router information and the

471
00:24:27,230 --> 00:24:31,549
receiving router will send back after

472
00:24:29,509 --> 00:24:33,409
verification so like that you can

473
00:24:31,549 --> 00:24:38,570
validate each of the hop all the way

474
00:24:33,409 --> 00:24:43,249
till<font color="#CCCCCC"> the end similarly trace route uses</font>

475
00:24:38,570 --> 00:24:45,799
this be downstream information so<font color="#CCCCCC"> in</font>

476
00:24:43,249 --> 00:24:47,749
<font color="#CCCCCC">place out in</font><font color="#E5E5E5"> regular ICMP you just send</font>

477
00:24:45,799 --> 00:24:50,720
a packet to each hop and each hop will

478
00:24:47,749 --> 00:24:53,240
respond back in this case we sent to

479
00:24:50,720 --> 00:24:56,029
each hop along with the loud downstream

480
00:24:53,240 --> 00:24:58,429
information so<font color="#E5E5E5"> you not only sent to the</font>

481
00:24:56,029 --> 00:25:01,429
downstream route or each hop in the LSP

482
00:24:58,429 --> 00:25:04,429
you<font color="#E5E5E5"> actually validate each of the</font>

483
00:25:01,429 --> 00:25:07,460
routers information and send the

484
00:25:04,429 --> 00:25:11,090
response back so it is<font color="#E5E5E5"> much heavy weight</font>

485
00:25:07,460 --> 00:25:17,080
than what you<font color="#E5E5E5"> experience with the ICMP</font>

486
00:25:11,090 --> 00:25:20,769
threshold so easy MP troubleshooting

487
00:25:17,080 --> 00:25:23,210
which I wanted<font color="#E5E5E5"> to cover a little bit so</font>

488
00:25:20,769 --> 00:25:25,279
ecmp how<font color="#CCCCCC"> I am going to do is simply</font>

489
00:25:23,210 --> 00:25:28,820
troubleshooting like in this simple

490
00:25:25,279 --> 00:25:34,460
topology right I have paths from p1 to

491
00:25:28,820 --> 00:25:38,619
p2 I could take p1 p2 p3 or I could take

492
00:25:34,460 --> 00:25:41,330
<font color="#CCCCCC">P 1</font><font color="#E5E5E5"> p-4 p 3 or</font><font color="#CCCCCC"> I could</font><font color="#E5E5E5"> take p1 p4 p5</font>

493
00:25:38,619 --> 00:25:45,039
right so there<font color="#E5E5E5"> are three different paths</font>

494
00:25:41,330 --> 00:25:47,418
I could<font color="#E5E5E5"> take in order to reach p1 to p2</font>

495
00:25:45,039 --> 00:25:51,619
so but how i am going<font color="#CCCCCC"> to verify</font>

496
00:25:47,419 --> 00:25:53,090
specifically p1 p2 p3<font color="#CCCCCC"> i want to verify</font>

497
00:25:51,619 --> 00:25:55,699
only that part i do not want<font color="#E5E5E5"> to verify</font>

498
00:25:53,090 --> 00:25:57,830
all of those paths because<font color="#CCCCCC"> i</font><font color="#E5E5E5"> just want</font>

499
00:25:55,700 --> 00:26:01,970
<font color="#CCCCCC">to make sure those things are working so</font>

500
00:25:57,830 --> 00:26:06,158
first pe1<font color="#E5E5E5"> will send a request with this</font>

501
00:26:01,970 --> 00:26:08,690
downstream information this<font color="#E5E5E5"> is only</font>

502
00:26:06,159 --> 00:26:12,799
information not enter information just

503
00:26:08,690 --> 00:26:15,980
for the context<font color="#E5E5E5"> I put it so the bitmap</font>

504
00:26:12,799 --> 00:26:18,710
is the one which is<font color="#E5E5E5"> used to identify</font><font color="#CCCCCC"> the</font>

505
00:26:15,980 --> 00:26:23,070
pool of addresses so in this case let's

506
00:26:18,710 --> 00:26:29,100
take<font color="#E5E5E5"> I use 4 f's which is like 32 bits</font>

507
00:26:23,070 --> 00:26:31,500
then p1 will receive that request and it

508
00:26:29,100 --> 00:26:38,340
a process that request and tells that

509
00:26:31,500 --> 00:26:41,279
there are two paths from p1 and the

510
00:26:38,340 --> 00:26:45,178
bitmap so i have to tlv s the first

511
00:26:41,279 --> 00:26:49,200
bitmap is<font color="#CCCCCC"> Ethernet 0 first path is even</font>

512
00:26:45,179 --> 00:26:54,750
at<font color="#CCCCCC"> 0-0 and the second one is Ethernet 20</font>

513
00:26:49,200 --> 00:26:57,840
and the bitmap is 0 0 FF and bitmap this

514
00:26:54,750 --> 00:26:59,759
for the second one it is bitmap FF 0 so

515
00:26:57,840 --> 00:27:03,240
what exactly is this bitmap it is not

516
00:26:59,759 --> 00:27:07,529
like<font color="#E5E5E5"> some ad hoc number I choose so what</font>

517
00:27:03,240 --> 00:27:10,740
I do is when i receive fun p 1 when i

518
00:27:07,529 --> 00:27:14,730
send this from p1 when i receive on p1<font color="#E5E5E5"> i</font>

519
00:27:10,740 --> 00:27:18,629
receive a bitmap of FF FF right so each

520
00:27:14,730 --> 00:27:22,049
big corresponds to 1 127 address so in

521
00:27:18,629 --> 00:27:26,250
this case the starting address is 127 00

522
00:27:22,049 --> 00:27:28,860
0 so<font color="#CCCCCC"> that means in a bit map of 32 I</font>

523
00:27:26,250 --> 00:27:35,190
have all the 32 address this available

524
00:27:28,860 --> 00:27:37,049
that means 127 00 02 127 00 0 31 so all

525
00:27:35,190 --> 00:27:40,470
the 31 addresses<font color="#CCCCCC"> I should be</font><font color="#E5E5E5"> able t</font>

526
00:27:37,049 --> 00:27:44,009
should be able<font color="#E5E5E5"> to be used by p1 so on p1</font>

527
00:27:40,470 --> 00:27:48,269
it queries for each of those 127 address

528
00:27:44,009 --> 00:27:51,509
and the<font color="#CCCCCC"> label stack to figure out which</font>

529
00:27:48,269 --> 00:27:54,480
hatching will it goes on to eat even<font color="#CCCCCC"> at</font>

530
00:27:51,509 --> 00:27:57,509
0 / 0 and which fashion goes on<font color="#CCCCCC"> Ethernet</font>

531
00:27:54,480 --> 00:28:00,539
tous les 0 so<font color="#CCCCCC"> it figures out the</font>

532
00:27:57,509 --> 00:28:02,159
combination<font color="#CCCCCC"> of all the source address in</font>

533
00:28:00,539 --> 00:28:05,009
this case destination address is each

534
00:28:02,159 --> 00:28:08,399
bitmap address or 1.7 address and the

535
00:28:05,009 --> 00:28:12,360
label<font color="#E5E5E5"> stack candid queries so once it</font>

536
00:28:08,399 --> 00:28:16,320
figures out<font color="#CCCCCC"> okay these addresses goes to</font>

537
00:28:12,360 --> 00:28:18,600
0 / 0 and these addresses goes to 20 it

538
00:28:16,320 --> 00:28:21,299
combines and forms another big map site

539
00:28:18,600 --> 00:28:26,100
like that so in this case<font color="#CCCCCC"> I simplified</font>

540
00:28:21,299 --> 00:28:28,500
saying that ff-friend<font color="#E5E5E5"> 00 FF but then</font>

541
00:28:26,100 --> 00:28:33,779
usually it could be random based on how

542
00:28:28,500 --> 00:28:36,630
it does the hashing so next one p1 will

543
00:28:33,779 --> 00:28:42,390
send a third request because the

544
00:28:36,630 --> 00:28:45,360
ethernet g 0 / 0 has 0 FF so it sends

545
00:28:42,390 --> 00:28:48,780
with 0 FF so on p 1 it automatically

546
00:28:45,360 --> 00:28:51,330
goes<font color="#E5E5E5"> to because</font><font color="#CCCCCC"> i send with TTL to it</font>

547
00:28:48,780 --> 00:28:53,220
goes to p2 so now p 2 is receiving

548
00:28:51,330 --> 00:28:56,909
<font color="#E5E5E5">because that's how the load balancing</font>

549
00:28:53,220 --> 00:28:59,010
happens and<font color="#E5E5E5"> peter will respond saying</font>

550
00:28:56,910 --> 00:29:01,680
that there is<font color="#CCCCCC"> only one path and all of</font>

551
00:28:59,010 --> 00:29:06,270
the<font color="#E5E5E5"> addresses will hash on to ethernet 0</font>

552
00:29:01,680 --> 00:29:08,840
/ 0 similarly next in the next

553
00:29:06,270 --> 00:29:13,320
subsequent<font color="#CCCCCC"> requests pe1 will send to p3</font>

554
00:29:08,840 --> 00:29:16,919
then p 3 will send it back then<font color="#E5E5E5"> p 1 will</font>

555
00:29:13,320 --> 00:29:20,790
send to the three TTL for then it

556
00:29:16,920 --> 00:29:22,830
automatically goes p1 p2 p3 so it takes

557
00:29:20,790 --> 00:29:26,850
only that path because<font color="#E5E5E5"> i have verified</font>

558
00:29:22,830 --> 00:29:30,750
at each Hall so similarly I then I come

559
00:29:26,850 --> 00:29:32,669
back and verify each of<font color="#CCCCCC"> those hob I do I</font>

560
00:29:30,750 --> 00:29:36,120
took a simple<font color="#CCCCCC"> example of</font><font color="#E5E5E5"> depth-first</font>

561
00:29:32,670 --> 00:29:41,520
algorithm you could employ the first or

562
00:29:36,120 --> 00:29:43,199
you could employ different algorithms

563
00:29:41,520 --> 00:29:46,050
but I choose a simple algorithm from

564
00:29:43,200 --> 00:29:48,360
<font color="#CCCCCC">explanations sake and so you could you</font>

565
00:29:46,050 --> 00:29:51,419
have to query each hop in order to

566
00:29:48,360 --> 00:29:55,709
figure out what of the equal cost path

567
00:29:51,420 --> 00:29:58,680
exists and what hashing my<font color="#CCCCCC"> labels tag</font>

568
00:29:55,710 --> 00:30:00,930
place addresses and interface

569
00:29:58,680 --> 00:30:03,690
information and other things will take

570
00:30:00,930 --> 00:30:05,760
that's how<font color="#E5E5E5"> I query so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the ECM</font>

571
00:30:03,690 --> 00:30:08,610
<font color="#CCCCCC">p-bass tracer so it is</font><font color="#E5E5E5"> very complex but</font>

572
00:30:05,760 --> 00:30:11,250
what you're getting out<font color="#E5E5E5"> of it is you</font>

573
00:30:08,610 --> 00:30:13,919
should<font color="#E5E5E5"> be able to map out your whole</font>

574
00:30:11,250 --> 00:30:16,350
topology you should be able to verify

575
00:30:13,920 --> 00:30:19,170
<font color="#E5E5E5">your whole topology you should be able</font>

576
00:30:16,350 --> 00:30:21,990
to verify a specific path in the whole

577
00:30:19,170 --> 00:30:24,420
topology then you can also troubleshoot

578
00:30:21,990 --> 00:30:27,930
any of the problem in<font color="#E5E5E5"> the whole topology</font>

579
00:30:24,420 --> 00:30:31,290
and this is not just the theory part

580
00:30:27,930 --> 00:30:35,370
this<font color="#CCCCCC"> is actually in working this is</font>

581
00:30:31,290 --> 00:30:38,960
deployed and widely used in majority of

582
00:30:35,370 --> 00:30:42,080
the customer large network devices like

583
00:30:38,960 --> 00:30:44,210
one of my customers

584
00:30:42,080 --> 00:30:48,080
having 800 peas and they were actually

585
00:30:44,210 --> 00:30:51,649
<font color="#E5E5E5">and each it's fully meshed 800</font><font color="#CCCCCC"> peas with</font>

586
00:30:48,080 --> 00:30:56,990
80 simply paths and this works perfectly

587
00:30:51,649 --> 00:30:58,309
for them so<font color="#E5E5E5"> and it it requires a little</font>

588
00:30:56,990 --> 00:30:59,840
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> of fast forward but there are</font>

589
00:30:58,309 --> 00:31:02,990
multiple ways you could do you<font color="#E5E5E5"> could do</font>

590
00:30:59,840 --> 00:31:07,010
proxy based model you<font color="#E5E5E5"> could buy a bigger</font>

591
00:31:02,990 --> 00:31:09,049
box and use it or you could buy<font color="#CCCCCC"> a</font>

592
00:31:07,010 --> 00:31:12,169
smaller box dedicated box just to do

593
00:31:09,049 --> 00:31:19,149
proxy for you and you<font color="#E5E5E5"> could do all</font><font color="#CCCCCC"> those</font>

594
00:31:12,169 --> 00:31:21,799
techniques so the the ecmp is good but

595
00:31:19,149 --> 00:31:24,229
unfortunately not a less<font color="#CCCCCC"> p-type support</font>

596
00:31:21,799 --> 00:31:28,610
ecmp like<font color="#E5E5E5"> traffic engineering do not</font>

597
00:31:24,230 --> 00:31:32,830
support ecmp then some of the VPNs do

598
00:31:28,610 --> 00:31:38,620
not support ecmp so most likely only IP

599
00:31:32,830 --> 00:31:42,730
v4<font color="#CCCCCC"> ldp is in existence</font><font color="#E5E5E5"> supporting ecmp</font>

600
00:31:38,620 --> 00:31:45,709
but things could change in the future so

601
00:31:42,730 --> 00:31:47,419
but this technology is extensible this

602
00:31:45,710 --> 00:31:50,919
tool set is accessible nothing is

603
00:31:47,419 --> 00:31:54,289
stopping from it to perform those things

604
00:31:50,919 --> 00:31:59,269
but this is<font color="#E5E5E5"> this is the these</font><font color="#CCCCCC"> are the</font>

605
00:31:54,289 --> 00:32:02,809
set of<font color="#CCCCCC"> effect types and what tools in</font>

606
00:31:59,269 --> 00:32:05,049
existence supporting each of the spec

607
00:32:02,809 --> 00:32:05,049
types

608
00:32:07,240 --> 00:32:14,210
so this why i put a separate for the

609
00:32:11,809 --> 00:32:17,330
<font color="#E5E5E5">seuda Wi-Fi case it is little bit</font>

610
00:32:14,210 --> 00:32:19,190
<font color="#CCCCCC">different in the case of pseudo wires it</font>

611
00:32:17,330 --> 00:32:22,309
is not running natively to use<font color="#E5E5E5"> as a</font>

612
00:32:19,190 --> 00:32:25,880
control channel which is VCC<font color="#CCCCCC"> V so Alice</font>

613
00:32:22,309 --> 00:32:27,980
big thing is extended for VC C V so that

614
00:32:25,880 --> 00:32:30,230
you could actually<font color="#E5E5E5"> verify the pseudo</font>

615
00:32:27,980 --> 00:32:32,720
wires and this is very very<font color="#CCCCCC"> useful</font>

616
00:32:30,230 --> 00:32:34,730
because in this case IP is not present

617
00:32:32,720 --> 00:32:38,410
you could<font color="#E5E5E5"> be running just a pseudowire</font>

618
00:32:34,730 --> 00:32:41,780
or tea pls be you<font color="#E5E5E5"> should be able to run</font>

619
00:32:38,410 --> 00:32:44,330
verify pseudowire so indeed if the IP is

620
00:32:41,780 --> 00:32:49,220
not<font color="#E5E5E5"> enabled you cannot really use all</font>

621
00:32:44,330 --> 00:32:53,178
the IP based tooling like I is ICMP ping

622
00:32:49,220 --> 00:32:57,320
and all that stuff so<font color="#CCCCCC"> you have to use LS</font>

623
00:32:53,179 --> 00:32:59,990
pipping for that and this is our bfp<font color="#E5E5E5"> to</font>

624
00:32:57,320 --> 00:33:03,050
<font color="#E5E5E5">very further and there are different</font>

625
00:32:59,990 --> 00:33:06,350
type of pseudo words if you could signal

626
00:33:03,050 --> 00:33:08,510
pseudo words dynamically or you could

627
00:33:06,350 --> 00:33:11,719
establish statically and you could

628
00:33:08,510 --> 00:33:14,480
stitch pseudo whites dynamically or you

629
00:33:11,720 --> 00:33:18,460
could stitch manually as well so

630
00:33:14,480 --> 00:33:20,840
signaling both automatic and manual and

631
00:33:18,460 --> 00:33:26,360
stitching automatic and manual for

632
00:33:20,840 --> 00:33:29,780
multi-segment photo waves so bfp<font color="#CCCCCC"> I'll</font>

633
00:33:26,360 --> 00:33:33,110
give a simple to slide overview BFD is a

634
00:33:29,780 --> 00:33:37,040
very<font color="#E5E5E5"> very simple lightweight mechanism</font>

635
00:33:33,110 --> 00:33:40,719
to do liveness detection so you that is

636
00:33:37,040 --> 00:33:45,920
CC continuity check so you keep rapidly

637
00:33:40,720 --> 00:33:48,320
doing keep alives kind of thing and you

638
00:33:45,920 --> 00:33:50,809
should<font color="#CCCCCC"> be able to figure out whether the</font>

639
00:33:48,320 --> 00:33:55,159
particular interface or path has

640
00:33:50,809 --> 00:33:59,090
likeness or not it is<font color="#E5E5E5"> the inverse of</font>

641
00:33:55,160 --> 00:34:01,210
thing why you say that is ping is you

642
00:33:59,090 --> 00:34:04,699
send a request and you<font color="#E5E5E5"> expect a response</font>

643
00:34:01,210 --> 00:34:07,760
whereas BFD works opposite you negotiate

644
00:34:04,700 --> 00:34:09,500
between when you establish a<font color="#E5E5E5"> BFD session</font>

645
00:34:07,760 --> 00:34:11,690
you negotiate between point A and point

646
00:34:09,500 --> 00:34:15,290
B saying that I<font color="#E5E5E5"> am going to send you</font>

647
00:34:11,690 --> 00:34:19,010
package within this time so that means

648
00:34:15,290 --> 00:34:19,759
within 10<font color="#CCCCCC"> milliseconds you should expect</font>

649
00:34:19,010 --> 00:34:24,620
pepper

650
00:34:19,760 --> 00:34:26,600
for me and the other side could tell

651
00:34:24,620 --> 00:34:29,029
this side saying that<font color="#E5E5E5"> okay 10</font>

652
00:34:26,600 --> 00:34:32,299
milliseconds is tolerable so you keep

653
00:34:29,030 --> 00:34:36,740
sending 10 millisecond interval packets

654
00:34:32,300 --> 00:34:39,830
so then once it receives acknowledgement

655
00:34:36,739 --> 00:34:42,979
<font color="#CCCCCC">pointer will keep sending packets under</font>

656
00:34:39,830 --> 00:34:46,190
10 milliseconds or at 10<font color="#E5E5E5"> milliseconds by</font>

657
00:34:42,980 --> 00:34:48,620
any chance if the packet is not received

658
00:34:46,190 --> 00:34:51,168
within<font color="#E5E5E5"> 10 milliseconds that means there</font>

659
00:34:48,620 --> 00:34:56,000
is some<font color="#CCCCCC"> problem so it assumes there is a</font>

660
00:34:51,168 --> 00:34:59,029
breakage so standing package<font color="#E5E5E5"> sees like</font>

661
00:34:56,000 --> 00:35:01,370
you expect because that's how<font color="#E5E5E5"> you</font>

662
00:34:59,030 --> 00:35:03,650
negotiate but if you don't receive the

663
00:35:01,370 --> 00:35:09,880
disgusted as a<font color="#E5E5E5"> failure so that's why it</font>

664
00:35:03,650 --> 00:35:13,010
is<font color="#E5E5E5"> inverse of ping model and you could</font>

665
00:35:09,880 --> 00:35:20,660
establish two ways one is synchronous

666
00:35:13,010 --> 00:35:22,550
model where you signal saying that point

667
00:35:20,660 --> 00:35:25,040
A to point B one session and point B to

668
00:35:22,550 --> 00:35:27,890
Point a and the session<font color="#E5E5E5"> and each could</font>

669
00:35:25,040 --> 00:35:30,680
be a different time intervals and there

670
00:35:27,890 --> 00:35:32,779
is loopback<font color="#E5E5E5"> we're like you just send a</font>

671
00:35:30,680 --> 00:35:34,819
packet and it will loop back to you so

672
00:35:32,780 --> 00:35:37,610
that means you are<font color="#CCCCCC"> establishing just</font><font color="#E5E5E5"> a</font>

673
00:35:34,820 --> 00:35:40,340
loopback session so there are different

674
00:35:37,610 --> 00:35:42,800
<font color="#E5E5E5">modes of operation and people have come</font>

675
00:35:40,340 --> 00:35:45,710
<font color="#CCCCCC">up with you FB also unidirectional</font>

676
00:35:42,800 --> 00:35:50,480
protection as well I mean<font color="#E5E5E5"> because in</font>

677
00:35:45,710 --> 00:35:52,700
some cases<font color="#E5E5E5"> that is very useful and it is</font>

678
00:35:50,480 --> 00:35:58,280
a typical hollow protocol it is also

679
00:35:52,700 --> 00:36:01,939
designed to use UDP or even if Phi P is

680
00:35:58,280 --> 00:36:05,450
not there it uses to DP format in some

681
00:36:01,940 --> 00:36:07,840
cases sick need not use UDP format but

682
00:36:05,450 --> 00:36:14,080
it is also designed to work in non IP

683
00:36:07,840 --> 00:36:19,490
mechanism and it is supporting all

684
00:36:14,080 --> 00:36:23,150
majority of the MPLS LSP types and it is

685
00:36:19,490 --> 00:36:25,430
<font color="#E5E5E5">supported at IP level also and even</font>

686
00:36:23,150 --> 00:36:27,380
transport level so it is<font color="#E5E5E5"> very</font>

687
00:36:25,430 --> 00:36:29,629
lightweight so<font color="#E5E5E5"> them you could argue</font>

688
00:36:27,380 --> 00:36:31,490
saying that if you have BF<font color="#E5E5E5"> d why do I</font>

689
00:36:29,630 --> 00:36:32,820
need<font color="#E5E5E5"> a less be paying or you could argue</font>

690
00:36:31,490 --> 00:36:36,600
if I have a less<font color="#CCCCCC"> 50</font>

691
00:36:32,820 --> 00:36:38,580
y-dna<font color="#CCCCCC"> bmd so these are</font><font color="#E5E5E5"> not to completing</font>

692
00:36:36,600 --> 00:36:41,460
protocols or to company completing

693
00:36:38,580 --> 00:36:45,540
mechanisms but rather these are two

694
00:36:41,460 --> 00:36:47,550
<font color="#CCCCCC">different types</font><font color="#E5E5E5"> complementing each other</font>

695
00:36:45,540 --> 00:36:50,970
so the way some of the customers

696
00:36:47,550 --> 00:36:52,830
actually deployed it is you use BFD for

697
00:36:50,970 --> 00:36:57,540
faster detection so because you could

698
00:36:52,830 --> 00:37:00,630
ride run in might even to the level of

699
00:36:57,540 --> 00:37:03,240
microseconds you could run very fast<font color="#E5E5E5"> BFD</font>

700
00:37:00,630 --> 00:37:07,560
to detect failures once you encountered

701
00:37:03,240 --> 00:37:10,830
failure it automatically triggers<font color="#E5E5E5"> an LS</font>

702
00:37:07,560 --> 00:37:13,470
beeping thing and one<font color="#E5E5E5"> celeste beeping</font>

703
00:37:10,830 --> 00:37:16,950
detects a failure it triggers route

704
00:37:13,470 --> 00:37:20,189
trace then so on and so forth so the

705
00:37:16,950 --> 00:37:25,500
hierarchy model was built around BFD and

706
00:37:20,190 --> 00:37:28,880
LSP and they<font color="#CCCCCC"> never compete in a way but</font>

707
00:37:25,500 --> 00:37:32,100
rather they complement in many ways and

708
00:37:28,880 --> 00:37:36,450
<font color="#CCCCCC">BFD is primarily designed from point to</font>

709
00:37:32,100 --> 00:37:40,080
<font color="#E5E5E5">point there is a weight being developed</font>

710
00:37:36,450 --> 00:37:43,439
to deploy in multiple networks also but

711
00:37:40,080 --> 00:37:46,230
that<font color="#CCCCCC"> it still</font><font color="#E5E5E5"> works and which is</font>

712
00:37:43,440 --> 00:37:49,200
<font color="#CCCCCC">happening right now so this is what</font><font color="#E5E5E5"> I</font>

713
00:37:46,230 --> 00:37:50,940
explained you have two<font color="#E5E5E5"> different ports</font>

714
00:37:49,200 --> 00:37:53,759
one to negotiate and one to exchange

715
00:37:50,940 --> 00:37:56,400
data data packets and you could

716
00:37:53,760 --> 00:37:59,340
negotiate the rate between a to b and<font color="#E5E5E5"> b</font>

717
00:37:56,400 --> 00:38:02,760
ta at then both could be<font color="#CCCCCC"> a synchronous</font>

718
00:37:59,340 --> 00:38:04,500
and need not be synchronous or you could

719
00:38:02,760 --> 00:38:09,300
design<font color="#E5E5E5"> in such a way that it could be</font>

720
00:38:04,500 --> 00:38:13,830
<font color="#E5E5E5">synchronous as well so</font><font color="#CCCCCC"> i have covered</font>

721
00:38:09,300 --> 00:38:17,730
most of the points here it is the de

722
00:38:13,830 --> 00:38:21,390
facto poem protocol which is used to

723
00:38:17,730 --> 00:38:23,550
trigger any faults so that the

724
00:38:21,390 --> 00:38:26,190
subsequent<font color="#E5E5E5"> action like switch over for a</font>

725
00:38:23,550 --> 00:38:29,280
<font color="#CCCCCC">far</font><font color="#E5E5E5"> our art production in the mpls-tp</font>

726
00:38:26,190 --> 00:38:33,210
case and it is also extended to carry

727
00:38:29,280 --> 00:38:36,930
some of<font color="#E5E5E5"> the remote defects like kar di</font>

728
00:38:33,210 --> 00:38:39,780
and a s and those kind of things<font color="#E5E5E5"> and it</font>

729
00:38:36,930 --> 00:38:41,399
is<font color="#E5E5E5"> definitely a very very useful</font>

730
00:38:39,780 --> 00:38:44,040
protocol and use

731
00:38:41,400 --> 00:38:48,570
mechanism which is deployed in mpls

732
00:38:44,040 --> 00:38:52,560
networks so this<font color="#E5E5E5"> is what I was</font>

733
00:38:48,570 --> 00:38:57,450
explaining in ping<font color="#CCCCCC"> Alice whipping and</font>

734
00:38:52,560 --> 00:39:00,150
BFD they are used in mpls-tp where IP is

735
00:38:57,450 --> 00:39:02,730
not present so it uses<font color="#CCCCCC"> a gal gash</font>

736
00:39:00,150 --> 00:39:06,720
mechanism a specific label is identified

737
00:39:02,730 --> 00:39:08,880
to process the package and when our that

738
00:39:06,720 --> 00:39:11,819
gal label which is the label 13 is

739
00:39:08,880 --> 00:39:17,220
present the subsequent payload which is

740
00:39:11,820 --> 00:39:19,800
called cash gal ACH which will identify

741
00:39:17,220 --> 00:39:21,569
what type of payload it is and based on

742
00:39:19,800 --> 00:39:24,300
that it could be<font color="#E5E5E5"> elastic ping payload or</font>

743
00:39:21,570 --> 00:39:26,670
it could be a payload and that the

744
00:39:24,300 --> 00:39:29,370
payload is the same it's only<font color="#E5E5E5"> the header</font>

745
00:39:26,670 --> 00:39:31,290
which is different<font color="#E5E5E5"> so everything else</font>

746
00:39:29,370 --> 00:39:33,750
<font color="#E5E5E5">remains the same so the extension for</font>

747
00:39:31,290 --> 00:39:37,290
inspecting and<font color="#CCCCCC"> VFD was pretty seamless</font>

748
00:39:33,750 --> 00:39:45,830
even for mpls-tp where there is no IP

749
00:39:37,290 --> 00:39:49,440
present at all so having<font color="#CCCCCC"> said that tools</font>

750
00:39:45,830 --> 00:39:53,009
most of the<font color="#E5E5E5"> vendors and most of the</font>

751
00:39:49,440 --> 00:39:56,670
third party OEM tool providers have

752
00:39:53,010 --> 00:40:01,350
tools which involves all of these

753
00:39:56,670 --> 00:40:03,780
mechanisms and even some of<font color="#CCCCCC"> the ethernet</font>

754
00:40:01,350 --> 00:40:06,960
OEM tools because you could see<font color="#E5E5E5"> lot of</font>

755
00:40:03,780 --> 00:40:08,820
<font color="#E5E5E5">merge between metro and core networks</font>

756
00:40:06,960 --> 00:40:12,990
where like you know<font color="#E5E5E5"> when you want to</font>

757
00:40:08,820 --> 00:40:15,750
bring access aggregation and core into

758
00:40:12,990 --> 00:40:18,779
the mixer<font color="#CCCCCC"> establish seamless mpls you</font>

759
00:40:15,750 --> 00:40:24,000
need a common set of tool set all the

760
00:40:18,780 --> 00:40:25,770
way<font color="#CCCCCC"> n to n and by establishing one</font>

761
00:40:24,000 --> 00:40:28,050
framework you should be able to provide

762
00:40:25,770 --> 00:40:30,780
all these mechanisms like<font color="#E5E5E5"> cv</font>

763
00:40:28,050 --> 00:40:33,360
verification CC verification fault

764
00:40:30,780 --> 00:40:35,730
isolation and you know supporting

765
00:40:33,360 --> 00:40:38,330
different type of effect types and the

766
00:40:35,730 --> 00:40:42,480
beauty of it<font color="#CCCCCC"> is once you get</font><font color="#E5E5E5"> actually</font>

767
00:40:38,330 --> 00:40:44,640
got used to these tools you will see

768
00:40:42,480 --> 00:40:47,190
that<font color="#E5E5E5"> you really don't need much of</font>

769
00:40:44,640 --> 00:40:49,080
expertise in a sense like you don't<font color="#E5E5E5"> I'm</font>

770
00:40:47,190 --> 00:40:52,530
<font color="#E5E5E5">not saying that ccas are not required</font>

771
00:40:49,080 --> 00:40:54,250
but in order to manage mpls networks you

772
00:40:52,530 --> 00:40:57,920
really don't need

773
00:40:54,250 --> 00:41:00,440
all of the intelligence to do small

774
00:40:57,920 --> 00:41:03,560
defect identification you should be able

775
00:41:00,440 --> 00:41:06,650
to do some<font color="#CCCCCC"> criminal investigation as</font>

776
00:41:03,560 --> 00:41:09,620
much as you can using these tools once

777
00:41:06,650 --> 00:41:13,460
after those things are available you

778
00:41:09,620 --> 00:41:15,680
could actually use your expertise to go

779
00:41:13,460 --> 00:41:21,590
and figure out<font color="#CCCCCC"> how to rectify the</font>

780
00:41:15,680 --> 00:41:23,390
problem but this these tool sets or

781
00:41:21,590 --> 00:41:25,670
these mechanisms actually provide you

782
00:41:23,390 --> 00:41:29,270
much much advance so that you could

783
00:41:25,670 --> 00:41:31,880
<font color="#E5E5E5">actually fix some of these problems in</font>

784
00:41:29,270 --> 00:41:34,070
much much shorter span than you used to

785
00:41:31,880 --> 00:41:36,550
<font color="#E5E5E5">because many cases</font><font color="#CCCCCC"> you may</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> even have</font>

786
00:41:34,070 --> 00:41:39,980
access<font color="#CCCCCC"> to some of the code devices and</font>

787
00:41:36,550 --> 00:41:41,930
the information on those the

788
00:41:39,980 --> 00:41:45,080
configuration details and all those

789
00:41:41,930 --> 00:41:48,259
<font color="#E5E5E5">things on those devices so somebody of</font>

790
00:41:45,080 --> 00:41:50,660
folium tools this is a simple table

791
00:41:48,260 --> 00:41:52,940
which i have put things could change

792
00:41:50,660 --> 00:41:55,640
this is not a static a lot of<font color="#E5E5E5"> things</font>

793
00:41:52,940 --> 00:41:59,810
have<font color="#CCCCCC"> changed even when i first started</font>

794
00:41:55,640 --> 00:42:01,930
trying to populate this table so I ppm

795
00:41:59,810 --> 00:42:08,240
is one of the mechanism but not many

796
00:42:01,930 --> 00:42:11,359
tools in mpls uses because mpls-tp has

797
00:42:08,240 --> 00:42:14,649
already defined some of the metric

798
00:42:11,360 --> 00:42:19,400
mechanisms to be done in mpls networks

799
00:42:14,650 --> 00:42:26,990
so yeah this is just an<font color="#CCCCCC"> top level</font>

800
00:42:19,400 --> 00:42:30,530
picture so in summary mpls OEM covers

801
00:42:26,990 --> 00:42:35,870
almost all of the mpls networks as of

802
00:42:30,530 --> 00:42:43,910
mouth and really to manage the idea of

803
00:42:35,870 --> 00:42:46,359
just<font color="#CCCCCC"> CC is is not a thing but you</font><font color="#E5E5E5"> should</font>

804
00:42:43,910 --> 00:42:50,270
everyone<font color="#E5E5E5"> should be able to use</font><font color="#CCCCCC"> it so</font><font color="#E5E5E5"> and</font>

805
00:42:46,360 --> 00:42:54,140
you could<font color="#E5E5E5"> check on your device cialis or</font>

806
00:42:50,270 --> 00:42:55,430
your<font color="#E5E5E5"> EMS</font><font color="#CCCCCC"> animas softwares most</font><font color="#E5E5E5"> of the</font>

807
00:42:54,140 --> 00:42:57,710
<font color="#E5E5E5">things are already present so start</font>

808
00:42:55,430 --> 00:42:59,330
using it there is no harm it's not going

809
00:42:57,710 --> 00:43:02,810
to bring down the network<font color="#E5E5E5"> after all this</font>

810
00:42:59,330 --> 00:43:05,150
<font color="#E5E5E5">is an oem</font><font color="#CCCCCC"> toolset you know it may</font>

811
00:43:02,810 --> 00:43:06,680
provide saying that<font color="#CCCCCC"> too</font><font color="#E5E5E5"> I cannot do that</font>

812
00:43:05,150 --> 00:43:07,190
or something but that's<font color="#E5E5E5"> pretty much it</font>

813
00:43:06,680 --> 00:43:10,250
could do

814
00:43:07,190 --> 00:43:13,300
and this is owen pallett so I it should

815
00:43:10,250 --> 00:43:15,680
never<font color="#E5E5E5"> ever bring down a device and</font>

816
00:43:13,300 --> 00:43:18,170
majority of the customers<font color="#E5E5E5"> actually our</font>

817
00:43:15,680 --> 00:43:20,690
vendors support these technologies and

818
00:43:18,170 --> 00:43:25,400
there were there were many drops even I

819
00:43:20,690 --> 00:43:28,099
participated which uses different vendor

820
00:43:25,400 --> 00:43:30,109
devices to verify these things and

821
00:43:28,099 --> 00:43:35,000
pretty<font color="#CCCCCC"> much every device actually works</font>

822
00:43:30,109 --> 00:43:38,869
and mpls-tp is also good technology we

823
00:43:35,000 --> 00:43:40,940
<font color="#E5E5E5">have done quite a few</font><font color="#CCCCCC"> interop sessions</font>

824
00:43:38,869 --> 00:43:43,310
and things work as well but there's a

825
00:43:40,940 --> 00:43:45,319
lot of<font color="#E5E5E5"> things which are evolving maybe</font>

826
00:43:43,310 --> 00:43:49,160
in a matter of year or two things<font color="#E5E5E5"> will</font>

827
00:43:45,319 --> 00:43:54,460
solidify there as well that concludes my

828
00:43:49,160 --> 00:43:54,460
<font color="#E5E5E5">tutorial have any questions</font>

829
00:43:58,250 --> 00:44:05,580
well if<font color="#E5E5E5"> not now feel free</font><font color="#CCCCCC"> to ask me I'll</font>

830
00:44:03,120 --> 00:44:08,100
be in a conference of any time of your

831
00:44:05,580 --> 00:44:11,100
choice any questions if you<font color="#CCCCCC"> need to</font>

832
00:44:08,100 --> 00:44:14,009
email me feel free to email as well and

833
00:44:11,100 --> 00:44:16,980
these lights are present<font color="#E5E5E5"> they're</font>

834
00:44:14,010 --> 00:44:19,310
available<font color="#E5E5E5"> in the non oxide so if it were</font>

835
00:44:16,980 --> 00:44:19,310
down low

