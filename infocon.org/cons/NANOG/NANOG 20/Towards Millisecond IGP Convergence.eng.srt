1
00:00:00,000 --> 00:00:04,890
others<font color="#E5E5E5"> okay my great pleasure to</font>

2
00:00:02,550 --> 00:00:15,139
introduce pan Jacobson was talking about

3
00:00:04,890 --> 00:00:17,698
<font color="#E5E5E5">IG IG evening convergence</font><font color="#CCCCCC"> ban hello I</font>

4
00:00:15,139 --> 00:00:20,970
didn't actually do much<font color="#CCCCCC"> of this project</font>

5
00:00:17,699 --> 00:00:25,099
it was done primarily by jingoes a lot

6
00:00:20,970 --> 00:00:28,019
<font color="#CCCCCC">NOLA he's in Australia talking at APNIC</font>

7
00:00:25,099 --> 00:00:34,910
so I got delegated to come here and talk

8
00:00:28,019 --> 00:00:38,040
<font color="#CCCCCC">to nu nog what this is about is our</font>

9
00:00:34,910 --> 00:00:44,010
company is doing some interesting<font color="#E5E5E5"> stuff</font>

10
00:00:38,040 --> 00:00:45,629
<font color="#CCCCCC">that sits on top of IP routing and the</font>

11
00:00:44,010 --> 00:00:48,329
process of going<font color="#E5E5E5"> around and talking to</font>

12
00:00:45,629 --> 00:00:50,250
some ISPs about what<font color="#CCCCCC"> exactly the</font>

13
00:00:48,329 --> 00:00:54,000
problems were and would they be

14
00:00:50,250 --> 00:00:56,250
interested many of them said but we

15
00:00:54,000 --> 00:00:58,289
don't<font color="#E5E5E5"> trust IP routing it looks like</font>

16
00:00:56,250 --> 00:01:00,120
it's not<font color="#E5E5E5"> stable enough and it's not fast</font>

17
00:00:58,289 --> 00:01:03,000
enough and we're thinking<font color="#E5E5E5"> about</font>

18
00:01:00,120 --> 00:01:08,280
replacing it with things like mpls fast

19
00:01:03,000 --> 00:01:10,590
right rear out and this gave us some

20
00:01:08,280 --> 00:01:12,540
worry you can't base products on

21
00:01:10,590 --> 00:01:13,860
something<font color="#CCCCCC"> that people don't trust so we</font>

22
00:01:12,540 --> 00:01:17,009
<font color="#E5E5E5">thought we'd go do some measurements on</font>

23
00:01:13,860 --> 00:01:19,549
IP routing and this is the results of

24
00:01:17,009 --> 00:01:19,549
those measurements

25
00:01:20,140 --> 00:01:26,290
this works<font color="#CCCCCC"> now place we're trying to get</font>

26
00:01:23,020 --> 00:01:29,399
is seriously sub-second rear out times

27
00:01:26,290 --> 00:01:32,350
down to basically the propagation time

28
00:01:29,400 --> 00:01:34,810
which transcontinental backbone should

29
00:01:32,350 --> 00:01:36,339
be around hundred milliseconds if you

30
00:01:34,810 --> 00:01:39,790
can do that you<font color="#E5E5E5"> get better network</font>

31
00:01:36,340 --> 00:01:42,460
reliability your wing failures he'll a

32
00:01:39,790 --> 00:01:44,320
lot<font color="#E5E5E5"> faster you get good support for</font>

33
00:01:42,460 --> 00:01:46,419
multi-service traffic you can handle

34
00:01:44,320 --> 00:01:49,830
things<font color="#E5E5E5"> like voice and video with very</font>

35
00:01:46,420 --> 00:01:53,830
minor glitches and you can get<font color="#E5E5E5"> a lot of</font>

36
00:01:49,830 --> 00:01:56,440
a very<font color="#E5E5E5"> expensive very complex layer to</font>

37
00:01:53,830 --> 00:01:58,539
gear like sonnet rings out<font color="#CCCCCC"> of your</font>

38
00:01:56,440 --> 00:02:00,670
<font color="#E5E5E5">network because you can trust IP to do</font>

39
00:01:58,539 --> 00:02:06,820
the job that right now they're trying to

40
00:02:00,670 --> 00:02:09,190
do but if you look at where IP routing

41
00:02:06,820 --> 00:02:12,640
is today it's like nowhere near a

42
00:02:09,190 --> 00:02:14,440
millisecond rear out times typically

43
00:02:12,640 --> 00:02:17,980
<font color="#E5E5E5">we're seeing convergence times of</font>

44
00:02:14,440 --> 00:02:20,650
seconds to<font color="#E5E5E5"> tens of seconds and if you're</font>

45
00:02:17,980 --> 00:02:22,810
going<font color="#CCCCCC"> to have IP do the job that right</font>

46
00:02:20,650 --> 00:02:25,480
now you're doing it<font color="#E5E5E5"> layer to you need to</font>

47
00:02:22,810 --> 00:02:30,070
do a lot better you've got two choices

48
00:02:25,480 --> 00:02:32,170
in this you can toss IP routing people

49
00:02:30,070 --> 00:02:34,540
who are<font color="#CCCCCC"> trying to sell and pls have made</font>

50
00:02:32,170 --> 00:02:36,700
the claim it's inherently impossible for

51
00:02:34,540 --> 00:02:38,679
IP routing to convergence of second x

52
00:02:36,700 --> 00:02:43,238
and therefore you need something else

53
00:02:38,680 --> 00:02:46,299
like mpls<font color="#CCCCCC"> ffr or you</font><font color="#E5E5E5"> can figure out what</font>

54
00:02:43,239 --> 00:02:48,549
was<font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> with IP routing and try to fix</font>

55
00:02:46,299 --> 00:02:51,190
it<font color="#E5E5E5"> and at the end at</font><font color="#CCCCCC"> least you will have</font>

56
00:02:48,549 --> 00:02:54,970
<font color="#E5E5E5">figured out what's wrong now it's really</font>

57
00:02:51,190 --> 00:02:56,829
hard it's<font color="#CCCCCC"> easy to replace something it's</font>

58
00:02:54,970 --> 00:02:58,630
hard to replace it<font color="#CCCCCC"> with something better</font>

59
00:02:56,829 --> 00:03:02,260
unless you understand what the problems

60
00:02:58,630 --> 00:03:03,519
were in the first thing so we figure no

61
00:03:02,260 --> 00:03:06,730
matter what<font color="#E5E5E5"> you need to go down the</font>

62
00:03:03,519 --> 00:03:10,590
second path if something an IP routing

63
00:03:06,730 --> 00:03:10,590
is broken you need to understand what

64
00:03:11,709 --> 00:03:19,660
now if you're doing rerouting for is is

65
00:03:16,880 --> 00:03:21,560
or ospf we're not<font color="#E5E5E5"> even going to look at</font>

66
00:03:19,660 --> 00:03:24,410
distance vector routing because

67
00:03:21,560 --> 00:03:27,830
everybody knows it's junk but links<font color="#E5E5E5"> de</font>

68
00:03:24,410 --> 00:03:30,859
<font color="#E5E5E5">writing like is is orc ospf theory says</font>

69
00:03:27,830 --> 00:03:33,380
it should be<font color="#CCCCCC"> very good that since</font>

70
00:03:30,860 --> 00:03:35,330
everybody has got a copy of the topology

71
00:03:33,380 --> 00:03:37,430
their own local copy and the same

72
00:03:35,330 --> 00:03:40,540
everywhere it's<font color="#E5E5E5"> very hard to tell lies</font>

73
00:03:37,430 --> 00:03:43,100
and the rerouting should happen

74
00:03:40,540 --> 00:03:45,410
<font color="#E5E5E5">basically as fast as everybody gets the</font>

75
00:03:43,100 --> 00:03:50,480
link state packets and it should be

76
00:03:45,410 --> 00:03:52,010
<font color="#E5E5E5">moved three in order to</font><font color="#CCCCCC"> do the rerouting</font>

77
00:03:50,480 --> 00:03:53,420
you've got to detect that there was a

78
00:03:52,010 --> 00:03:56,120
failure find out that something went

79
00:03:53,420 --> 00:03:58,010
wrong you've got to tell your<font color="#CCCCCC"> friends</font>

80
00:03:56,120 --> 00:03:59,630
that you detected a failure so you're

81
00:03:58,010 --> 00:04:02,030
going to flood a link-state packet and

82
00:03:59,630 --> 00:04:05,450
then you're going to compute<font color="#E5E5E5"> your new</font>

83
00:04:02,030 --> 00:04:08,630
distribution trees based on the new link

84
00:04:05,450 --> 00:04:10,760
state after that failure so we did

85
00:04:08,630 --> 00:04:11,900
experiments to measure each of these

86
00:04:10,760 --> 00:04:16,180
times since they're completely

87
00:04:11,900 --> 00:04:19,660
independent on cisco 72 hundreds the

88
00:04:16,180 --> 00:04:24,410
<font color="#E5E5E5">highest-end</font><font color="#CCCCCC"> 7209 forget the model number</font>

89
00:04:19,660 --> 00:04:27,979
it was<font color="#E5E5E5"> running both 12 @ OS and the most</font>

90
00:04:24,410 --> 00:04:29,840
<font color="#E5E5E5">recent version of 12 1</font><font color="#CCCCCC"> p</font><font color="#E5E5E5"> and juniper m</font>

91
00:04:27,979 --> 00:04:35,510
<font color="#E5E5E5">forties that were running for that one</font>

92
00:04:29,840 --> 00:04:39,440
so all of the we believe<font color="#CCCCCC"> that high-end</font>

93
00:04:35,510 --> 00:04:42,260
routing engines 72 hundreds<font color="#CCCCCC"> are I think</font>

94
00:04:39,440 --> 00:04:45,440
<font color="#CCCCCC">the same route indigenous used in gs</font>

95
00:04:42,260 --> 00:04:46,880
ours and other<font color="#CCCCCC"> cisco platforms so what</font>

96
00:04:45,440 --> 00:04:51,080
we measure here for riding<font color="#E5E5E5"> performance</font>

97
00:04:46,880 --> 00:04:53,690
should map across the product line and<font color="#CCCCCC"> I</font>

98
00:04:51,080 --> 00:04:56,890
think the<font color="#CCCCCC"> m40 is</font><font color="#E5E5E5"> junipers</font><font color="#CCCCCC"> top-end</font>

99
00:04:53,690 --> 00:05:00,410
routing engine but<font color="#E5E5E5"> I'm not sure</font>

100
00:04:56,890 --> 00:05:02,330
<font color="#E5E5E5">okay so detection there's two ways you</font>

101
00:05:00,410 --> 00:05:06,320
can find out<font color="#CCCCCC"> about a failure the link</font>

102
00:05:02,330 --> 00:05:07,940
level can tell you or a protocol can be

103
00:05:06,320 --> 00:05:09,950
talking to his peers and<font color="#E5E5E5"> if that</font>

104
00:05:07,940 --> 00:05:12,050
communication stops for a<font color="#CCCCCC"> while it can</font>

105
00:05:09,950 --> 00:05:16,219
say oh my<font color="#CCCCCC"> god I've lost appear where</font>

106
00:05:12,050 --> 00:05:18,680
I've lost a link the is is<font color="#CCCCCC"> spec allows</font>

107
00:05:16,220 --> 00:05:20,810
both of these the link level detection

108
00:05:18,680 --> 00:05:22,790
should be the fastest at least in theory

109
00:05:20,810 --> 00:05:24,620
there's some places where it won't<font color="#E5E5E5"> work</font>

110
00:05:22,790 --> 00:05:27,230
at all like if you've got<font color="#E5E5E5"> two hose</font>

111
00:05:24,620 --> 00:05:29,420
connected to an Ethernet switch you

112
00:05:27,230 --> 00:05:31,280
disconnect one<font color="#E5E5E5"> of the hosts the switch</font>

113
00:05:29,420 --> 00:05:34,700
<font color="#CCCCCC">knows is gone but</font><font color="#E5E5E5"> as pure doesn't know</font>

114
00:05:31,280 --> 00:05:37,039
it's gone nothing upstream of the<font color="#CCCCCC"> wire</font>

115
00:05:34,700 --> 00:05:40,070
where it connects<font color="#E5E5E5"> to the switch gets the</font>

116
00:05:37,040 --> 00:05:41,630
failure indication propagated so you've

117
00:05:40,070 --> 00:05:45,170
got<font color="#E5E5E5"> to have something like a</font><font color="#CCCCCC"> Hello</font>

118
00:05:41,630 --> 00:05:47,120
mechanism and<font color="#E5E5E5"> it turned out since the</font>

119
00:05:45,170 --> 00:05:50,180
vendors know you've got<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have hellos</font>

120
00:05:47,120 --> 00:05:53,810
it looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> the link level detection</font>

121
00:05:50,180 --> 00:05:56,000
is implemented sort of<font color="#CCCCCC"> Spada lee we saw</font>

122
00:05:53,810 --> 00:05:58,000
on several links where it didn't happen

123
00:05:56,000 --> 00:06:01,190
at all we could unplug the link and

124
00:05:58,000 --> 00:06:04,930
nothing happened in is is until the

125
00:06:01,190 --> 00:06:07,490
hellos timed out or we'd unplug the link

126
00:06:04,930 --> 00:06:10,040
the carrier light would go out and<font color="#CCCCCC"> in 15</font>

127
00:06:07,490 --> 00:06:11,600
seconds later the process would get told

128
00:06:10,040 --> 00:06:16,889
oh by the way this link just<font color="#E5E5E5"> went down</font>

129
00:06:11,600 --> 00:06:20,340
so now

130
00:06:16,889 --> 00:06:23,020
given that spot<font color="#E5E5E5"> eNOS it looks in the</font>

131
00:06:20,340 --> 00:06:28,030
scenarios where link level detection

132
00:06:23,020 --> 00:06:30,219
doesn't work your main source of

133
00:06:28,030 --> 00:06:33,099
detection is going to be hellos how well

134
00:06:30,220 --> 00:06:36,220
<font color="#CCCCCC">can you do on hellos well the ice is</font>

135
00:06:33,100 --> 00:06:40,150
<font color="#E5E5E5">spec says that rather send a packet to</font>

136
00:06:36,220 --> 00:06:44,949
each other by default<font color="#E5E5E5"> every five to ten</font>

137
00:06:40,150 --> 00:06:47,020
seconds and at most every second<font color="#E5E5E5"> and</font>

138
00:06:44,949 --> 00:06:48,310
when you lose three<font color="#CCCCCC"> of those packets you</font>

139
00:06:47,020 --> 00:06:52,870
should declare that your neighbor is

140
00:06:48,310 --> 00:06:54,430
gone so that's just a bound on you can't

141
00:06:52,870 --> 00:06:55,840
find out that there's a<font color="#E5E5E5"> problem in your</font>

142
00:06:54,430 --> 00:06:57,460
network for at least three seconds

143
00:06:55,840 --> 00:07:00,070
because<font color="#E5E5E5"> the minimum you</font><font color="#CCCCCC"> can set the time</font>

144
00:06:57,460 --> 00:07:01,120
is a second and you've got<font color="#E5E5E5"> to lose three</font>

145
00:07:00,070 --> 00:07:08,169
<font color="#E5E5E5">of these packets before</font><font color="#CCCCCC"> you know</font>

146
00:07:01,120 --> 00:07:11,650
something's gone so we did a test on the

147
00:07:08,169 --> 00:07:15,698
details of detection just hook up three

148
00:07:11,650 --> 00:07:19,090
routers in a triangle picture this on

149
00:07:15,699 --> 00:07:22,300
the<font color="#CCCCCC"> Left we bias the metrics so that we</font>

150
00:07:19,090 --> 00:07:25,270
could send pings from a<font color="#E5E5E5"> workstation they</font>

151
00:07:22,300 --> 00:07:26,830
go clockwise around the circle and<font color="#E5E5E5"> then</font>

152
00:07:25,270 --> 00:07:29,560
we turn the power off on that router

153
00:07:26,830 --> 00:07:31,270
that's in the upper<font color="#CCCCCC"> left-hand corner</font>

154
00:07:29,560 --> 00:07:34,680
that<font color="#E5E5E5"> one this yellow in the second</font>

155
00:07:31,270 --> 00:07:37,948
picture and the picture at the bottom is

156
00:07:34,680 --> 00:07:41,740
the packet trace that we got from the

157
00:07:37,949 --> 00:07:44,370
workstation watching traffic between

158
00:07:41,740 --> 00:07:49,180
these three routers so at the beginning

159
00:07:44,370 --> 00:07:52,620
<font color="#CCCCCC">you see the ping vehicle replies coming</font>

160
00:07:49,180 --> 00:07:56,889
back they're<font color="#CCCCCC"> coming back once a second</font>

161
00:07:52,620 --> 00:08:01,360
times zero on this trace is where we

162
00:07:56,889 --> 00:08:03,940
unplugged the router that blue packet a

163
00:08:01,360 --> 00:08:06,789
few seconds before x 0<font color="#CCCCCC"> is the hello that</font>

164
00:08:03,940 --> 00:08:08,080
happened happening on some random clock

165
00:08:06,789 --> 00:08:10,810
it happened a little bit before<font color="#CCCCCC"> we</font>

166
00:08:08,080 --> 00:08:14,020
unplug the router but dotted lines that

167
00:08:10,810 --> 00:08:15,550
you see in the middle are where hellos

168
00:08:14,020 --> 00:08:18,909
would have been had the router<font color="#CCCCCC"> still</font>

169
00:08:15,550 --> 00:08:20,660
been alive so as soon<font color="#E5E5E5"> as we unplug at</font>

170
00:08:18,909 --> 00:08:24,409
the pink stop

171
00:08:20,660 --> 00:08:28,310
because<font color="#CCCCCC"> no hellos those that line is</font>

172
00:08:24,410 --> 00:08:29,870
<font color="#CCCCCC">Sovine</font><font color="#E5E5E5"> right about 26 seconds and I'm</font>

173
00:08:28,310 --> 00:08:35,000
unfortunately<font color="#E5E5E5"> colorblind and no</font><font color="#CCCCCC"> nose</font>

174
00:08:29,870 --> 00:08:39,370
colors red or green<font color="#E5E5E5"> probably is the link</font>

175
00:08:35,000 --> 00:08:43,340
state update packet when router<font color="#CCCCCC"> too has</font>

176
00:08:39,370 --> 00:08:45,050
kind out the third hello the LSP appears

177
00:08:43,340 --> 00:08:48,200
<font color="#E5E5E5">right where the third hello packet would</font>

178
00:08:45,050 --> 00:08:50,780
have been so it's three<font color="#E5E5E5"> times five</font>

179
00:08:48,200 --> 00:08:54,680
seconds the default timeout on this

180
00:08:50,780 --> 00:08:59,390
particular router so since an LSP saying

181
00:08:54,680 --> 00:09:02,390
oh by the way this link is gone its peer

182
00:08:59,390 --> 00:09:05,480
also sends an LSP there because trying

183
00:09:02,390 --> 00:09:08,510
to figure<font color="#CCCCCC"> out who should own the virtual</font>

184
00:09:05,480 --> 00:09:10,970
note for the network<font color="#CCCCCC"> and then there's a</font>

185
00:09:08,510 --> 00:09:13,580
<font color="#E5E5E5">little bit of delay they finally do the</font>

186
00:09:10,970 --> 00:09:16,160
SPF calculation and then the<font color="#E5E5E5"> pings start</font>

187
00:09:13,580 --> 00:09:20,270
coming<font color="#CCCCCC"> back again so the total time</font>

188
00:09:16,160 --> 00:09:21,620
there was about 33 seconds from when we

189
00:09:20,270 --> 00:09:25,670
cut the power to when we got the rear

190
00:09:21,620 --> 00:09:29,150
out there were no surprises<font color="#E5E5E5"> happened</font>

191
00:09:25,670 --> 00:09:32,599
exactly according<font color="#E5E5E5"> to spec say well if</font>

192
00:09:29,150 --> 00:09:35,030
the spec didn't say one second is<font color="#CCCCCC"> the</font>

193
00:09:32,600 --> 00:09:36,500
minimum hello time and we could crank it

194
00:09:35,030 --> 00:09:40,310
down to whatever<font color="#E5E5E5"> we want to crank it</font>

195
00:09:36,500 --> 00:09:44,240
down two microseconds what would be<font color="#E5E5E5"> the</font>

196
00:09:40,310 --> 00:09:46,359
real physical constraints on the hello

197
00:09:44,240 --> 00:09:50,000
packets how fast could you send them

198
00:09:46,360 --> 00:09:51,500
clearly<font color="#E5E5E5"> you can't send them any faster</font>

199
00:09:50,000 --> 00:09:53,090
than<font color="#CCCCCC"> the link bandwidth allows you to if</font>

200
00:09:51,500 --> 00:09:54,770
you fill the link with hellos and laws

201
00:09:53,090 --> 00:09:57,710
are going to get discarded and you lose

202
00:09:54,770 --> 00:10:00,439
your adjacency but there's a question

203
00:09:57,710 --> 00:10:02,720
<font color="#E5E5E5">about if there's other traffic on the</font>

204
00:10:00,440 --> 00:10:07,220
link at what load do you start losing

205
00:10:02,720 --> 00:10:10,460
the significant number of hellos and we

206
00:10:07,220 --> 00:10:12,290
did how<font color="#CCCCCC"> about the other author on this</font>

207
00:10:10,460 --> 00:10:14,840
paper did a set of simulations looking

208
00:10:12,290 --> 00:10:16,610
at<font color="#E5E5E5"> that with crop tailgate ways and</font>

209
00:10:14,840 --> 00:10:18,710
priority queuing of the hellos and<font color="#E5E5E5"> red</font>

210
00:10:16,610 --> 00:10:20,480
gateways pretty much all<font color="#E5E5E5"> the parameters</font>

211
00:10:18,710 --> 00:10:23,570
we could think<font color="#E5E5E5"> of for doing to</font><font color="#CCCCCC"> iran</font>

212
00:10:20,480 --> 00:10:24,890
hellos and the answer was you don't get

213
00:10:23,570 --> 00:10:26,810
<font color="#E5E5E5">into any trouble until you fill the link</font>

214
00:10:24,890 --> 00:10:27,790
with hellos the other traffic doesn't

215
00:10:26,810 --> 00:10:31,660
matter

216
00:10:27,790 --> 00:10:34,180
all that matters is the intensity<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

217
00:10:31,660 --> 00:10:35,230
hellos and by the time you get<font color="#E5E5E5"> to the</font>

218
00:10:34,180 --> 00:10:37,060
point where you're filling the link with

219
00:10:35,230 --> 00:10:39,760
them and you<font color="#E5E5E5"> start to lose a lot</font><font color="#CCCCCC"> of them</font>

220
00:10:37,060 --> 00:10:43,349
and that's what this 3d curve says one

221
00:10:39,760 --> 00:10:46,090
axis of it is the total load on<font color="#CCCCCC"> the link</font>

222
00:10:43,350 --> 00:10:48,700
when<font color="#E5E5E5"> access is how much of that total</font>

223
00:10:46,090 --> 00:10:50,020
load is hellos and the vertical scale is

224
00:10:48,700 --> 00:10:54,130
how many<font color="#E5E5E5"> of those hellos you're dropping</font>

225
00:10:50,020 --> 00:10:56,110
and it turns up just when you fill a

226
00:10:54,130 --> 00:10:57,610
link with hellos and it doesn't really

227
00:10:56,110 --> 00:11:00,930
<font color="#E5E5E5">matter what the other traffic is doing</font>

228
00:10:57,610 --> 00:11:03,370
that says that you can<font color="#E5E5E5"> run the detection</font>

229
00:11:00,930 --> 00:11:04,989
pretty much as<font color="#E5E5E5"> fast as the bandwidth of</font>

230
00:11:03,370 --> 00:11:08,680
<font color="#E5E5E5">the link allows you to run the detection</font>

231
00:11:04,990 --> 00:11:11,290
you'll get if you keep the hello

232
00:11:08,680 --> 00:11:13,510
bandwidth to a negligible fraction of

233
00:11:11,290 --> 00:11:14,980
the data traffic like hellos or<font color="#E5E5E5"> one</font>

234
00:11:13,510 --> 00:11:16,330
<font color="#E5E5E5">percent of the data traffic so you're</font>

235
00:11:14,980 --> 00:11:19,570
<font color="#E5E5E5">not taking your revenue away with this</font>

236
00:11:16,330 --> 00:11:21,010
routing<font color="#E5E5E5"> correct then you're not</font><font color="#CCCCCC"> going to</font>

237
00:11:19,570 --> 00:11:23,410
lose<font color="#CCCCCC"> any significant number of the</font>

238
00:11:21,010 --> 00:11:26,730
hellos and so you<font color="#E5E5E5"> should just detect</font>

239
00:11:23,410 --> 00:11:29,170
real errors and not false packet drops

240
00:11:26,730 --> 00:11:31,829
<font color="#E5E5E5">okay</font>

241
00:11:29,170 --> 00:11:31,829
so

242
00:11:31,980 --> 00:11:37,470
in terms of designing the protocol the

243
00:11:35,460 --> 00:11:42,570
ultimate limit on the hellos is just the

244
00:11:37,470 --> 00:11:44,010
link bandwidth and the only thing that

245
00:11:42,570 --> 00:11:47,430
stopping us from doing fast detection

246
00:11:44,010 --> 00:11:52,380
right now is the protocol spec has

247
00:11:47,430 --> 00:11:56,640
limited it of one second if we<font color="#CCCCCC"> change</font>

248
00:11:52,380 --> 00:12:00,330
that limit in the<font color="#E5E5E5"> spec and we should be</font>

249
00:11:56,640 --> 00:12:03,270
<font color="#E5E5E5">able to do detection as fast as physical</font>

250
00:12:00,330 --> 00:12:05,310
law allows us to do detection that

251
00:12:03,270 --> 00:12:08,370
doesn't mean that<font color="#E5E5E5"> you can set the</font>

252
00:12:05,310 --> 00:12:12,209
detection time down to say a microsecond

253
00:12:08,370 --> 00:12:13,890
an OC 192 link there's physical laws

254
00:12:12,210 --> 00:12:17,040
that limit the protection they have to

255
00:12:13,890 --> 00:12:18,990
do with the<font color="#E5E5E5"> noise on</font><font color="#CCCCCC"> the link and</font><font color="#E5E5E5"> the</font>

256
00:12:17,040 --> 00:12:21,839
delays imposed by various processes as

257
00:12:18,990 --> 00:12:24,030
you're going through your router the

258
00:12:21,840 --> 00:12:25,620
issue in the protocol design is to make

259
00:12:24,030 --> 00:12:27,780
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that you're constrained only by</font>

260
00:12:25,620 --> 00:12:29,130
those physical laws and not by<font color="#CCCCCC"> some</font>

261
00:12:27,780 --> 00:12:31,439
number that somebody pulled out of a hat

262
00:12:29,130 --> 00:12:35,520
saying oh I should hello should only

263
00:12:31,440 --> 00:12:37,620
happen one second so you<font color="#E5E5E5"> still have to</font>

264
00:12:35,520 --> 00:12:40,230
do engineering to pick the right<font color="#E5E5E5"> time</font>

265
00:12:37,620 --> 00:12:42,630
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> times you know a few tens of</font>

266
00:12:40,230 --> 00:12:46,230
milliseconds generally set by the noise

267
00:12:42,630 --> 00:12:48,390
spectrum but that time should be<font color="#E5E5E5"> a</font>

268
00:12:46,230 --> 00:12:51,140
property of your<font color="#CCCCCC"> networks not a property</font>

269
00:12:48,390 --> 00:12:51,140
of the protocol

270
00:12:52,810 --> 00:12:59,709
<font color="#CCCCCC">Kring Kring there's another issue if</font>

271
00:12:56,620 --> 00:13:02,770
you're doing fast detection in you

272
00:12:59,710 --> 00:13:05,830
contract transients if the telco is

273
00:13:02,770 --> 00:13:07,300
decided to<font color="#E5E5E5"> yo-yo your link if your</font>

274
00:13:05,830 --> 00:13:08,890
<font color="#CCCCCC">sonnet muxes having a little trouble</font>

275
00:13:07,300 --> 00:13:11,949
getting<font color="#CCCCCC"> its phase lock and so it's</font>

276
00:13:08,890 --> 00:13:13,600
coming<font color="#E5E5E5"> and going at half a second</font>

277
00:13:11,950 --> 00:13:16,630
intervals you don't want to be

278
00:13:13,600 --> 00:13:19,960
generating LSPs routing changes through

279
00:13:16,630 --> 00:13:21,400
your network at a very high rate now the

280
00:13:19,960 --> 00:13:23,850
usual way<font color="#CCCCCC"> of dealing</font><font color="#E5E5E5"> with this for</font>

281
00:13:21,400 --> 00:13:26,470
example<font color="#CCCCCC"> the way is dealt with in ospf is</font>

282
00:13:23,850 --> 00:13:28,540
you make the detection of bad news be

283
00:13:26,470 --> 00:13:30,670
very fast so you're aggressive and

284
00:13:28,540 --> 00:13:32,680
saying a link has gone away you make the

285
00:13:30,670 --> 00:13:36,069
detection of good news be very slow if

286
00:13:32,680 --> 00:13:39,660
you've got a<font color="#CCCCCC"> working path because you</font>

287
00:13:36,070 --> 00:13:42,160
rerouted around some failure you're

288
00:13:39,660 --> 00:13:44,620
reluctant to change from<font color="#E5E5E5"> that working</font>

289
00:13:42,160 --> 00:13:45,850
path back to a better path unless the

290
00:13:44,620 --> 00:13:50,710
better path has been there<font color="#CCCCCC"> for a little</font>

291
00:13:45,850 --> 00:13:52,779
while<font color="#E5E5E5"> and so the current spec for is is</font>

292
00:13:50,710 --> 00:13:56,320
says the good news<font color="#CCCCCC"> and bad news should</font>

293
00:13:52,779 --> 00:13:59,170
be treated exactly the same detecting a

294
00:13:56,320 --> 00:14:00,910
link<font color="#E5E5E5"> coming up you treat with the same</font>

295
00:13:59,170 --> 00:14:02,770
filtering the same<font color="#CCCCCC"> three-second weight</font>

296
00:14:00,910 --> 00:14:07,360
or three hello eight that you do with a

297
00:14:02,770 --> 00:14:10,030
link going down should be relatively

298
00:14:07,360 --> 00:14:13,600
trivial to change that part of the spec

299
00:14:10,030 --> 00:14:15,730
so that you treat down much faster than

300
00:14:13,600 --> 00:14:17,500
up when you do that you can dial with

301
00:14:15,730 --> 00:14:19,450
stability you know in much the way that

302
00:14:17,500 --> 00:14:21,220
we can tell the stability of ospf in

303
00:14:19,450 --> 00:14:27,520
spite of having<font color="#CCCCCC"> fast detection of</font>

304
00:14:21,220 --> 00:14:29,680
failures<font color="#CCCCCC"> okay next step in routing is</font>

305
00:14:27,520 --> 00:14:32,770
propagation you found out that<font color="#E5E5E5"> something</font>

306
00:14:29,680 --> 00:14:35,020
has gone south the guy who originally

307
00:14:32,770 --> 00:14:38,620
detects the failure turns that<font color="#CCCCCC"> into a</font>

308
00:14:35,020 --> 00:14:40,689
link-state packet he floods it to his

309
00:14:38,620 --> 00:14:42,700
adjacent neighbors and then they take

310
00:14:40,690 --> 00:14:45,370
<font color="#CCCCCC">that packet absolutely unmodified</font>

311
00:14:42,700 --> 00:14:46,839
they're not allowed<font color="#CCCCCC"> to touch it and they</font>

312
00:14:45,370 --> 00:14:47,800
flooded to their neighbors on and on

313
00:14:46,839 --> 00:14:49,290
until it's gone through<font color="#E5E5E5"> the entire</font>

314
00:14:47,800 --> 00:14:53,189
network

315
00:14:49,290 --> 00:14:54,839
since nobody but the guy who originated

316
00:14:53,190 --> 00:14:58,860
that package is allowed<font color="#CCCCCC"> to do anything</font>

317
00:14:54,839 --> 00:15:00,269
to<font color="#CCCCCC"> it the flooding should go at speed of</font>

318
00:14:58,860 --> 00:15:02,220
light plus store-and-forward delays so

319
00:15:00,269 --> 00:15:03,690
as one packet time perhaps oh it's a

320
00:15:02,220 --> 00:15:07,259
pack of time times the diameter of your

321
00:15:03,690 --> 00:15:09,800
<font color="#E5E5E5">network should be fraction above</font>

322
00:15:07,259 --> 00:15:09,800
millisecond

323
00:15:11,600 --> 00:15:17,779
so we set<font color="#CCCCCC"> up a test to measure this one</font>

324
00:15:14,329 --> 00:15:19,790
I consisted of a workstation with for

325
00:15:17,779 --> 00:15:23,120
Ethernet interfaces and we hooked up

326
00:15:19,790 --> 00:15:24,980
three routers basically with three

327
00:15:23,120 --> 00:15:27,980
point-to-point ethernet between them and

328
00:15:24,980 --> 00:15:29,569
the workstation could look at all four

329
00:15:27,980 --> 00:15:31,759
of the ethernet involved in this

330
00:15:29,569 --> 00:15:35,269
experiment and on the port labeled zero

331
00:15:31,759 --> 00:15:38,240
there it could inject LS piece so<font color="#CCCCCC"> it</font>

332
00:15:35,269 --> 00:15:40,100
could inject an is is<font color="#CCCCCC"> link state change</font>

333
00:15:38,240 --> 00:15:46,310
which we can watch propagate through

334
00:15:40,100 --> 00:15:50,380
those three routers now back on<font color="#E5E5E5"> this</font>

335
00:15:46,310 --> 00:15:56,479
picture remember<font color="#E5E5E5"> back at the gap between</font>

336
00:15:50,380 --> 00:15:59,870
time 26 and time 33 the LSP has gone out

337
00:15:56,480 --> 00:16:04,130
at time 26 but that rerouting

338
00:15:59,870 --> 00:16:08,660
calculation doesn't happen until time 33

339
00:16:04,130 --> 00:16:13,579
and we said this is going to limit<font color="#E5E5E5"> our</font>

340
00:16:08,660 --> 00:16:15,670
convergence to we can detect it things

341
00:16:13,579 --> 00:16:18,050
happening<font color="#E5E5E5"> to at most five seconds</font>

342
00:16:15,670 --> 00:16:21,290
because there's this artificial delay

343
00:16:18,050 --> 00:16:24,019
says lay that's put in there to account

344
00:16:21,290 --> 00:16:27,099
for<font color="#E5E5E5"> the cost</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> SPF calculation</font>

345
00:16:24,019 --> 00:16:31,040
which is a significant load on<font color="#CCCCCC"> the cpu</font>

346
00:16:27,100 --> 00:16:33,139
which<font color="#E5E5E5"> i'll talk about next but we wanted</font>

347
00:16:31,040 --> 00:16:34,910
to<font color="#E5E5E5"> set that too late is</font><font color="#CCCCCC"> zero to see what</font>

348
00:16:33,139 --> 00:16:38,470
was the best we could do on propagation

349
00:16:34,910 --> 00:16:43,490
of the<font color="#E5E5E5"> failure so we set the delay 20</font>

350
00:16:38,470 --> 00:16:47,000
<font color="#CCCCCC">okay this picture the bottom axis is the</font>

351
00:16:43,490 --> 00:16:50,660
hop the<font color="#CCCCCC"> y-axis is the time at which we</font>

352
00:16:47,000 --> 00:16:56,569
see the LSP go through so we injected at

353
00:16:50,660 --> 00:17:00,350
router 0 at time<font color="#E5E5E5"> 0 it pops out about 300</font>

354
00:16:56,569 --> 00:17:02,449
milliseconds later at router1 and about

355
00:17:00,350 --> 00:17:06,740
300 milliseconds after that at router<font color="#E5E5E5"> to</font>

356
00:17:02,449 --> 00:17:08,530
so on and the time scaled according<font color="#E5E5E5"> to</font>

357
00:17:06,740 --> 00:17:10,939
the size of<font color="#E5E5E5"> the topology we injected</font>

358
00:17:08,530 --> 00:17:13,819
typologies of<font color="#E5E5E5"> five hundred eight hundred</font>

359
00:17:10,939 --> 00:17:15,829
and<font color="#CCCCCC"> a thousand notes and the amount of</font>

360
00:17:13,819 --> 00:17:17,190
time for<font color="#CCCCCC"> hop was linear in the size of</font>

361
00:17:15,829 --> 00:17:26,790
his apology

362
00:17:17,190 --> 00:17:30,390
so what this had said was this SPF

363
00:17:26,790 --> 00:17:38,129
calculation computing a new tree is a

364
00:17:30,390 --> 00:17:40,470
major hit on the cpu people<font color="#CCCCCC"> the</font><font color="#E5E5E5"> router</font>

365
00:17:38,130 --> 00:17:42,570
vendors know this they don't<font color="#CCCCCC"> want to do</font>

366
00:17:40,470 --> 00:17:44,400
it any more<font color="#E5E5E5"> times than they have to when</font>

367
00:17:42,570 --> 00:17:45,929
you get a<font color="#CCCCCC"> link state change there's</font>

368
00:17:44,400 --> 00:17:49,470
usually a bunch of links take changes

369
00:17:45,930 --> 00:17:51,510
that are close to it so in order to only

370
00:17:49,470 --> 00:17:54,840
do the calculation once and get good

371
00:17:51,510 --> 00:17:56,370
convergence they delay the initial

372
00:17:54,840 --> 00:17:59,220
calculation until you've connected

373
00:17:56,370 --> 00:18:02,250
collected several<font color="#E5E5E5"> LSPs but that can</font>

374
00:17:59,220 --> 00:18:06,420
delay the propagation of your LSPs if

375
00:18:02,250 --> 00:18:08,670
you change that time 20 say oh these are

376
00:18:06,420 --> 00:18:10,890
really fast boxes I'm going<font color="#E5E5E5"> to let them</font>

377
00:18:08,670 --> 00:18:13,380
compute the new topology as soon as they

378
00:18:10,890 --> 00:18:16,410
<font color="#CCCCCC">can come and I want them to flood as</font>

379
00:18:13,380 --> 00:18:18,210
fast as they can well the spec doesn't

380
00:18:16,410 --> 00:18:21,290
call out the timing between the

381
00:18:18,210 --> 00:18:25,800
propagation and the SPF calculation and

382
00:18:21,290 --> 00:18:29,159
if you implement the router as say

383
00:18:25,800 --> 00:18:30,750
single non-preemptive all process that

384
00:18:29,160 --> 00:18:32,640
pulls off an event and does something

385
00:18:30,750 --> 00:18:35,190
ones back<font color="#E5E5E5"> pulls off another event and</font>

386
00:18:32,640 --> 00:18:38,220
does something it can get<font color="#E5E5E5"> the LSP do the</font>

387
00:18:35,190 --> 00:18:40,200
SPF calculation only after<font color="#CCCCCC"> the SPF</font>

388
00:18:38,220 --> 00:18:43,650
calculation can go back and<font color="#CCCCCC"> say oh now i</font>

389
00:18:40,200 --> 00:18:46,680
need to flood the LSP but what<font color="#E5E5E5"> you want</font>

390
00:18:43,650 --> 00:18:48,780
to<font color="#E5E5E5"> do in</font><font color="#CCCCCC"> link state routing is flood as</font>

391
00:18:46,680 --> 00:18:51,030
soon as possible but your network<font color="#E5E5E5"> is</font>

392
00:18:48,780 --> 00:18:52,379
this massive distributed computer and

393
00:18:51,030 --> 00:18:54,750
what you would like to<font color="#CCCCCC"> do would be to</font>

394
00:18:52,380 --> 00:18:56,790
get<font color="#E5E5E5"> it all computing at the same time</font><font color="#CCCCCC"> as</font>

395
00:18:54,750 --> 00:18:58,350
can we give<font color="#CCCCCC"> you the quickest convergence</font>

396
00:18:56,790 --> 00:19:01,409
if you can get everybody working at the

397
00:18:58,350 --> 00:19:03,149
<font color="#E5E5E5">same time as opposed to I work and then</font>

398
00:19:01,410 --> 00:19:04,530
I tell the next guy upstream to work and

399
00:19:03,150 --> 00:19:07,370
<font color="#E5E5E5">then he tells the next guy upstream to</font>

400
00:19:04,530 --> 00:19:10,110
work if you do that second then you get

401
00:19:07,370 --> 00:19:12,780
this convergence picture and by<font color="#E5E5E5"> the time</font>

402
00:19:10,110 --> 00:19:15,780
you've gone three hops you've waited a

403
00:19:12,780 --> 00:19:17,100
second for your writing to converge just

404
00:19:15,780 --> 00:19:19,500
because you're waiting for<font color="#E5E5E5"> everybody to</font>

405
00:19:17,100 --> 00:19:22,080
do their calculation and you can end up

406
00:19:19,500 --> 00:19:24,120
<font color="#E5E5E5">with significant typologies of being the</font>

407
00:19:22,080 --> 00:19:26,790
diameter times whatever<font color="#E5E5E5"> time it takes to</font>

408
00:19:24,120 --> 00:19:31,360
do the SPF

409
00:19:26,790 --> 00:19:34,540
the issue here is the spec needs to call

410
00:19:31,360 --> 00:19:38,260
out explicitly what<font color="#E5E5E5"> you do when and what</font>

411
00:19:34,540 --> 00:19:39,820
the priorities are and it's basically do

412
00:19:38,260 --> 00:19:41,890
the hellos because if you<font color="#E5E5E5"> don't do the</font>

413
00:19:39,820 --> 00:19:44,950
hellos you lose your adjacencies then

414
00:19:41,890 --> 00:19:47,760
your network gets unstable and dies do

415
00:19:44,950 --> 00:19:50,320
the SPF flooding or do the LSP flooding

416
00:19:47,760 --> 00:19:51,820
because<font color="#CCCCCC"> if you don't</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> that the other</font>

417
00:19:50,320 --> 00:19:53,110
guys won't hear about the problems<font color="#E5E5E5"> until</font>

418
00:19:51,820 --> 00:19:54,790
you're done with your computing and

419
00:19:53,110 --> 00:19:57,669
finally when you've got time left over

420
00:19:54,790 --> 00:19:59,200
do your computing spec come up as

421
00:19:57,670 --> 00:20:03,250
priorities and so you<font color="#E5E5E5"> can get some weird</font>

422
00:19:59,200 --> 00:20:05,800
pictures and some long delays<font color="#CCCCCC"> okay</font>

423
00:20:03,250 --> 00:20:08,260
lastly<font color="#CCCCCC"> the previous experiment the</font>

424
00:20:05,800 --> 00:20:11,559
propagation experiment showed that the

425
00:20:08,260 --> 00:20:13,450
shortest path computation was huge as

426
00:20:11,559 --> 00:20:18,190
hundreds of milliseconds going up two

427
00:20:13,450 --> 00:20:20,340
seconds so jenga's developed some

428
00:20:18,190 --> 00:20:23,290
software that<font color="#E5E5E5"> would let</font><font color="#CCCCCC"> us check</font>

429
00:20:20,340 --> 00:20:25,840
topologies of arbitrary size inject them

430
00:20:23,290 --> 00:20:29,379
into a real network with real routers

431
00:20:25,840 --> 00:20:31,780
and look at how the SPF scale there's a

432
00:20:29,380 --> 00:20:35,530
<font color="#E5E5E5">function of various parameters of the</font>

433
00:20:31,780 --> 00:20:38,110
topology nodes edges like so we hooked

434
00:20:35,530 --> 00:20:41,110
<font color="#E5E5E5">up all of the router boxes that we could</font>

435
00:20:38,110 --> 00:20:43,300
<font color="#CCCCCC">find into a real topology we hooked a</font>

436
00:20:41,110 --> 00:20:47,500
workstation up to them running his is

437
00:20:43,300 --> 00:20:49,899
talk software generated synthetic

438
00:20:47,500 --> 00:20:52,030
realistic topologies using the Georgia

439
00:20:49,900 --> 00:20:55,360
Tech topology generator generated them

440
00:20:52,030 --> 00:20:57,280
on that workstation<font color="#E5E5E5"> and then injected</font>

441
00:20:55,360 --> 00:21:00,459
them from that workstation into the

442
00:20:57,280 --> 00:21:02,920
router farm and then measured what the

443
00:21:00,460 --> 00:21:07,660
SPF calculation costs on the various

444
00:21:02,920 --> 00:21:12,940
<font color="#E5E5E5">routers so this is injecting random</font>

445
00:21:07,660 --> 00:21:15,190
topologies of average degree 5 which is

446
00:21:12,940 --> 00:21:19,260
consistent with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> measurements that</font>

447
00:21:15,190 --> 00:21:22,929
we've got of physical backbones the

448
00:21:19,260 --> 00:21:26,800
bottom blue line there was<font color="#CCCCCC"> we wanted to</font>

449
00:21:22,929 --> 00:21:29,590
have<font color="#E5E5E5"> an idea of what was reasonable to</font>

450
00:21:26,800 --> 00:21:32,110
<font color="#E5E5E5">expect from these routers so habo</font><font color="#CCCCCC"> coated</font>

451
00:21:29,590 --> 00:21:33,949
up the best<font color="#E5E5E5"> Dykstra heap</font><font color="#CCCCCC"> diced your</font>

452
00:21:32,110 --> 00:21:37,549
<font color="#E5E5E5">algorithm that he could</font>

453
00:21:33,950 --> 00:21:39,200
and ran it on his laptop using the same

454
00:21:37,549 --> 00:21:42,408
topologies that we were injecting into

455
00:21:39,200 --> 00:21:46,490
these routers<font color="#CCCCCC"> a</font><font color="#E5E5E5"> blue line is</font><font color="#CCCCCC"> cabos heap</font>

456
00:21:42,409 --> 00:21:48,500
Dykstra running on his<font color="#E5E5E5"> laptop next three</font>

457
00:21:46,490 --> 00:21:52,460
lines are measurements of<font color="#E5E5E5"> the various</font>

458
00:21:48,500 --> 00:21:54,620
routers it's sort of uninteresting which

459
00:21:52,460 --> 00:21:56,570
router in which OS what's<font color="#E5E5E5"> interesting is</font>

460
00:21:54,620 --> 00:21:58,820
there's a huge variation in times that

461
00:21:56,570 --> 00:22:03,379
<font color="#CCCCCC">by the time you get up 2,000 node</font>

462
00:21:58,820 --> 00:22:05,809
topologies the vendor implementations

463
00:22:03,380 --> 00:22:08,450
<font color="#CCCCCC">can take between 10 milliseconds and</font>

464
00:22:05,809 --> 00:22:11,178
half a second in order to<font color="#E5E5E5"> do a single</font>

465
00:22:08,450 --> 00:22:21,159
<font color="#E5E5E5">tree calculation single SPF calculation</font>

466
00:22:11,179 --> 00:22:23,570
on the topology now this may look like

467
00:22:21,159 --> 00:22:25,730
<font color="#CCCCCC">Cabo is doing some wonderful code and</font>

468
00:22:23,570 --> 00:22:29,178
you just need<font color="#E5E5E5"> to move it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> routers and</font>

469
00:22:25,730 --> 00:22:31,700
we solve all the problems that vanishes

470
00:22:29,179 --> 00:22:34,100
if you put this on a log scale pretty

471
00:22:31,700 --> 00:22:39,470
much everybody's got the same shape

472
00:22:34,100 --> 00:22:42,199
except see we fit curves to all this

473
00:22:39,470 --> 00:22:44,779
data the top one there is N squared

474
00:22:42,200 --> 00:22:48,799
which is<font color="#E5E5E5"> if you implement Dykstra in the</font>

475
00:22:44,779 --> 00:22:51,710
naive way it iterates over all the nodes

476
00:22:48,799 --> 00:22:54,019
and in each iteration iterates over all

477
00:22:51,710 --> 00:22:56,299
the other nodes looking for the lowest

478
00:22:54,019 --> 00:22:59,630
<font color="#E5E5E5">cost one and so it's basically an N</font>

479
00:22:56,299 --> 00:23:03,730
squared algorithm if you implement it

480
00:22:59,630 --> 00:23:06,320
sort of the smart way you iterate over

481
00:23:03,730 --> 00:23:10,669
all the nodes but you do the search by a

482
00:23:06,320 --> 00:23:14,480
heap so it's an<font color="#CCCCCC"> N log</font><font color="#E5E5E5"> n algorithm so the</font>

483
00:23:10,669 --> 00:23:16,279
two lower vendor curves are clearly heap

484
00:23:14,480 --> 00:23:20,690
Dykstra they fit in n log n curve the

485
00:23:16,279 --> 00:23:23,630
upper curve is an N squared curve you

486
00:23:20,690 --> 00:23:25,460
<font color="#E5E5E5">can see that</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> this picture that the</font>

487
00:23:23,630 --> 00:23:26,750
shape of the<font color="#E5E5E5"> upper one if you look at</font>

488
00:23:25,460 --> 00:23:29,360
<font color="#CCCCCC">the bottom of it it's seriously</font>

489
00:23:26,750 --> 00:23:31,549
different than the other three we didn't

490
00:23:29,360 --> 00:23:36,590
one vendor sky we didn't measure all the

491
00:23:31,549 --> 00:23:38,240
way down and<font color="#CCCCCC"> ha</font><font color="#E5E5E5"> bows which was an N log</font>

492
00:23:36,590 --> 00:23:40,070
<font color="#E5E5E5">n implementation had the same shape of</font>

493
00:23:38,240 --> 00:23:41,539
everybody else problem these<font color="#E5E5E5"> guises</font>

494
00:23:40,070 --> 00:23:44,510
they're all going up they're<font color="#E5E5E5"> all fairly</font>

495
00:23:41,539 --> 00:23:48,200
steep and it<font color="#E5E5E5"> doesn't take much to go to</font>

496
00:23:44,510 --> 00:23:51,470
a topology we're even<font color="#CCCCCC"> good tuning is</font>

497
00:23:48,200 --> 00:23:53,690
going to kill you and in terms<font color="#E5E5E5"> of that</font>

498
00:23:51,470 --> 00:23:57,620
<font color="#E5E5E5">doesn't take much for reasons that</font>

499
00:23:53,690 --> 00:24:01,519
aren't entirely clear most isp's don't

500
00:23:57,620 --> 00:24:04,639
run the most of the tier ones that we

501
00:24:01,519 --> 00:24:06,830
found don't run the protocol on the real

502
00:24:04,639 --> 00:24:10,879
topology they construct a virtual full

503
00:24:06,830 --> 00:24:13,908
mesh topology using ATM or some other

504
00:24:10,879 --> 00:24:17,658
pathology and then they run routing over

505
00:24:13,909 --> 00:24:20,090
that full mesh well the full mesh bumps

506
00:24:17,659 --> 00:24:22,159
the number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> edges up to N squared</font>

507
00:24:20,090 --> 00:24:24,740
right since every notice to talk to

508
00:24:22,159 --> 00:24:27,830
<font color="#E5E5E5">every other node and routing a sensitive</font>

509
00:24:24,740 --> 00:24:29,870
to that so this<font color="#CCCCCC"> is looking</font><font color="#E5E5E5"> at the time</font>

510
00:24:27,830 --> 00:24:35,500
scaling for full meshes

511
00:24:29,870 --> 00:24:35,500
running up to about degree 300 300 notes

512
00:24:36,160 --> 00:24:42,200
heap Dykstra tends to do badly on full

513
00:24:39,410 --> 00:24:43,910
mesh<font color="#CCCCCC"> topologies so the second line there</font>

514
00:24:42,200 --> 00:24:45,860
is actually the N squared algorithm the

515
00:24:43,910 --> 00:24:48,430
top line is the<font color="#E5E5E5"> N log n algorithm and</font>

516
00:24:45,860 --> 00:24:50,209
then one of the other<font color="#E5E5E5"> vendre</font>

517
00:24:48,430 --> 00:24:52,100
implementations and down the bottom of

518
00:24:50,210 --> 00:24:57,410
glue is Pablo's algorithm for reference

519
00:24:52,100 --> 00:24:59,030
again on these now 300 is smaller than

520
00:24:57,410 --> 00:25:01,340
<font color="#CCCCCC">the smallest here one that we know about</font>

521
00:24:59,030 --> 00:25:04,730
the<font color="#E5E5E5"> smallest</font><font color="#CCCCCC"> Tier one</font><font color="#E5E5E5"> that we've talked</font>

522
00:25:01,340 --> 00:25:08,570
to is a measure of 400 notes or 16,000

523
00:25:04,730 --> 00:25:11,030
tunnels but 300 you're<font color="#E5E5E5"> already to a</font>

524
00:25:08,570 --> 00:25:20,000
second of<font color="#CCCCCC"> CPU time for every routing</font>

525
00:25:11,030 --> 00:25:21,230
calculation so every time<font color="#E5E5E5"> you get a</font>

526
00:25:20,000 --> 00:25:23,179
state change you've got to do<font color="#E5E5E5"> this</font>

527
00:25:21,230 --> 00:25:27,520
calculation you blow a hundred percent

528
00:25:23,179 --> 00:25:29,660
<font color="#CCCCCC">of your CPU for a second at every hot</font>

529
00:25:27,520 --> 00:25:31,760
that means you can take a hell of a long

530
00:25:29,660 --> 00:25:34,400
<font color="#CCCCCC">time to converge at least a second</font>

531
00:25:31,760 --> 00:25:35,870
because<font color="#E5E5E5"> of this calculation and it means</font>

532
00:25:34,400 --> 00:25:38,000
that<font color="#E5E5E5"> your network is a lot</font><font color="#CCCCCC"> more brittle</font>

533
00:25:35,870 --> 00:25:39,678
because your routers have gone away if

534
00:25:38,000 --> 00:25:41,720
you're getting<font color="#E5E5E5"> changes in your topology</font>

535
00:25:39,679 --> 00:25:44,090
once a second if link state changes and

536
00:25:41,720 --> 00:25:45,679
you've got no writer CPU cycles left so

537
00:25:44,090 --> 00:25:50,658
they can't do SNMP or anything else

538
00:25:45,679 --> 00:25:53,539
useful fixing it

539
00:25:50,659 --> 00:25:55,759
is probably<font color="#E5E5E5"> not a matter of code tuning</font>

540
00:25:53,539 --> 00:25:58,869
<font color="#CCCCCC">okay so the top we've got the four</font>

541
00:25:55,759 --> 00:26:03,529
graphs that I saw<font color="#E5E5E5"> in a previous picture</font>

542
00:25:58,869 --> 00:26:06,499
at the bottom is a different way of

543
00:26:03,529 --> 00:26:10,159
<font color="#E5E5E5">doing the SPF calculation the Dijkstra</font>

544
00:26:06,499 --> 00:26:13,669
calculation was originated in 1964 it's

545
00:26:10,159 --> 00:26:14,960
a wonderful algorithm but in 40 years

546
00:26:13,669 --> 00:26:17,479
we've actually come up<font color="#E5E5E5"> with some</font>

547
00:26:14,960 --> 00:26:18,919
improvements to it and<font color="#CCCCCC"> have 0</font>

548
00:26:17,479 --> 00:26:20,720
implemented one of those published

549
00:26:18,919 --> 00:26:22,879
improvements some incremental Dijkstra

550
00:26:20,720 --> 00:26:25,879
algorithm<font color="#E5E5E5"> it's scaling rather than being</font>

551
00:26:22,879 --> 00:26:27,649
n log in is log in and it really does

552
00:26:25,879 --> 00:26:29,509
scale like that as your network gets

553
00:26:27,649 --> 00:26:31,488
bigger it gets<font color="#E5E5E5"> faster because you're</font>

554
00:26:29,509 --> 00:26:33,919
more connected it can find<font color="#E5E5E5"> an alternate</font>

555
00:26:31,489 --> 00:26:38,590
path and<font color="#CCCCCC"> one-hop for the most part and</font>

556
00:26:33,919 --> 00:26:42,830
so is convergence gets a lot<font color="#CCCCCC"> faster if</font>

557
00:26:38,590 --> 00:26:45,019
you move to this style algorithm then

558
00:26:42,830 --> 00:26:46,999
the calculation time<font color="#E5E5E5"> immediately goes</font>

559
00:26:45,019 --> 00:26:51,979
from seconds down<font color="#CCCCCC"> to micro seconds and</font>

560
00:26:46,999 --> 00:26:53,749
it stays at microseconds and that's<font color="#E5E5E5"> true</font>

561
00:26:51,979 --> 00:26:59,200
independent of the size of<font color="#E5E5E5"> the network</font>

562
00:26:53,749 --> 00:27:02,090
login what grows very very slowly so

563
00:26:59,200 --> 00:27:04,220
<font color="#E5E5E5">almost to the summary a final note one</font>

564
00:27:02,090 --> 00:27:05,988
thing we were looking for<font color="#E5E5E5"> was some</font>

565
00:27:04,220 --> 00:27:08,419
support for the rumors that we heard

566
00:27:05,989 --> 00:27:10,399
about routing is unstable we were just

567
00:27:08,419 --> 00:27:12,499
beating<font color="#CCCCCC"> the hell out of these routers we</font>

568
00:27:10,399 --> 00:27:15,649
were injecting topologies with 50,000

569
00:27:12,499 --> 00:27:17,570
nodes and edges all the routers were

570
00:27:15,649 --> 00:27:19,969
running hundred percent CPU saturation

571
00:27:17,570 --> 00:27:21,320
we were giving them LSPs a hundred times

572
00:27:19,970 --> 00:27:23,509
the rate that<font color="#CCCCCC"> they could process them</font>

573
00:27:21,320 --> 00:27:24,979
and<font color="#CCCCCC"> then we were just randomly</font>

574
00:27:23,509 --> 00:27:28,190
unplugging links and powering off

575
00:27:24,979 --> 00:27:30,109
routers we never saw anything that

576
00:27:28,190 --> 00:27:33,739
looked like instability<font color="#E5E5E5"> I mean</font>

577
00:27:30,109 --> 00:27:35,449
everything<font color="#CCCCCC"> just ran rock solid slow slow</font>

578
00:27:33,739 --> 00:27:39,080
as molasses all of ours were saturated

579
00:27:35,450 --> 00:27:41,179
but absolutely<font color="#E5E5E5"> solid topologies were</font>

580
00:27:39,080 --> 00:27:44,359
always reasonable things never bounced

581
00:27:41,179 --> 00:27:46,309
around and when we started<font color="#CCCCCC"> looking for</font>

582
00:27:44,359 --> 00:27:48,519
why is it so<font color="#CCCCCC"> good we found various</font>

583
00:27:46,309 --> 00:27:50,720
things that<font color="#CCCCCC"> the vendors were doing like</font>

584
00:27:48,519 --> 00:27:52,999
generating hellos at very high priority

585
00:27:50,720 --> 00:27:55,820
so that<font color="#CCCCCC"> you don't lose adjacencies when</font>

586
00:27:52,999 --> 00:27:57,950
you're loading up the routers a lot of

587
00:27:55,820 --> 00:27:59,980
little clever things that made it

588
00:27:57,950 --> 00:28:02,200
absolutely<font color="#E5E5E5"> rock-solid</font>

589
00:27:59,980 --> 00:28:04,419
we talked<font color="#E5E5E5"> to Dave test about some of</font>

590
00:28:02,200 --> 00:28:06,669
this he said well yeah you know people

591
00:28:04,419 --> 00:28:08,740
have spent the last<font color="#CCCCCC"> decade beating on my</font>

592
00:28:06,669 --> 00:28:10,179
software with baseball bats<font color="#E5E5E5"> and you know</font>

593
00:28:08,740 --> 00:28:13,299
it gets<font color="#E5E5E5"> a little bit tough after that</font>

594
00:28:10,179 --> 00:28:16,630
and you know this stuff the routing

595
00:28:13,299 --> 00:28:18,309
software has really profited from the

596
00:28:16,630 --> 00:28:20,590
decade worth a very large scale

597
00:28:18,309 --> 00:28:21,940
experience in the internet generally the

598
00:28:20,590 --> 00:28:23,649
bugs that have been found in the

599
00:28:21,940 --> 00:28:29,500
meltdowns that have happened the<font color="#CCCCCC"> vendors</font>

600
00:28:23,650 --> 00:28:31,630
have put in fixes for them so given<font color="#CCCCCC"> that</font>

601
00:28:29,500 --> 00:28:33,429
we've got some pretty<font color="#E5E5E5"> good stuff and</font>

602
00:28:31,630 --> 00:28:35,549
we've got some measurements to say the

603
00:28:33,429 --> 00:28:39,460
real<font color="#E5E5E5"> problem here is basically</font>

604
00:28:35,549 --> 00:28:43,168
granularity of timers and the<font color="#E5E5E5"> cost of</font>

605
00:28:39,460 --> 00:28:45,880
doing this nice vintage 1964 algorithm

606
00:28:43,169 --> 00:28:47,650
it's<font color="#E5E5E5"> actually not a very big deal to</font>

607
00:28:45,880 --> 00:28:49,690
evolve the stuff that we've got which

608
00:28:47,650 --> 00:28:52,559
works pretty good to something<font color="#CCCCCC"> that</font>

609
00:28:49,690 --> 00:28:55,960
works pretty good in<font color="#E5E5E5"> sub-second times</font>

610
00:28:52,559 --> 00:28:58,840
and we didn't<font color="#E5E5E5"> see anything that said</font>

611
00:28:55,960 --> 00:29:01,210
<font color="#CCCCCC">that we couldn't do IP routing at the</font>

612
00:28:58,840 --> 00:29:04,770
theoretical minimum time for doing

613
00:29:01,210 --> 00:29:07,000
rerouting which is the propagation<font color="#E5E5E5"> time</font>

614
00:29:04,770 --> 00:29:09,010
there<font color="#E5E5E5"> are some things you need to do to</font>

615
00:29:07,000 --> 00:29:10,510
<font color="#E5E5E5">get there which is switched to a modern</font>

616
00:29:09,010 --> 00:29:12,129
algorithm it's the<font color="#E5E5E5"> biggest thing which</font>

617
00:29:10,510 --> 00:29:14,559
is<font color="#E5E5E5"> a small thing is replaced a little</font>

618
00:29:12,130 --> 00:29:16,360
tiny can piece of<font color="#E5E5E5"> code inside the</font>

619
00:29:14,559 --> 00:29:20,260
writing implementation change the

620
00:29:16,360 --> 00:29:23,709
granularity of the timer a<font color="#E5E5E5"> hello timer</font>

621
00:29:20,260 --> 00:29:25,780
and change the<font color="#E5E5E5"> spec so it allows</font>

622
00:29:23,710 --> 00:29:28,150
different detentions for up and down

623
00:29:25,780 --> 00:29:31,090
<font color="#E5E5E5">events none</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these are completely</font>

624
00:29:28,150 --> 00:29:34,780
trivial but all of them are pretty small

625
00:29:31,090 --> 00:29:37,178
pieces and at that point you've<font color="#E5E5E5"> got IP</font>

626
00:29:34,780 --> 00:29:40,270
routing regular vanilla robust IP

627
00:29:37,179 --> 00:29:44,169
routing that does rerouting as fast as

628
00:29:40,270 --> 00:29:46,960
any physical system can do it that's the

629
00:29:44,169 --> 00:29:49,179
<font color="#E5E5E5">end so if I'd like to acknowledge we got</font>

630
00:29:46,960 --> 00:29:52,960
<font color="#E5E5E5">a lot of help</font><font color="#CCCCCC"> from the Global Crossing</font>

631
00:29:49,179 --> 00:29:54,970
production testing lab in doing some of

632
00:29:52,960 --> 00:29:57,940
the initial measurements<font color="#E5E5E5"> both cisco and</font>

633
00:29:54,970 --> 00:30:00,880
juniper helped out with<font color="#E5E5E5"> equivalents on</font>

634
00:29:57,940 --> 00:30:02,380
doing the testing and thing that we

635
00:30:00,880 --> 00:30:04,570
haven't<font color="#E5E5E5"> been able to do but would very</font>

636
00:30:02,380 --> 00:30:07,830
much like to do is measure routing

637
00:30:04,570 --> 00:30:11,439
inside of realized peace

638
00:30:07,830 --> 00:30:13,360
if I mean this is interesting<font color="#CCCCCC"> Browdy</font>

639
00:30:11,440 --> 00:30:15,610
takes a long time to converge but if you

640
00:30:13,360 --> 00:30:20,169
get one<font color="#CCCCCC"> Rob flap a week who gives a damn</font>

641
00:30:15,610 --> 00:30:22,300
it's not worth fixing we don't know

642
00:30:20,170 --> 00:30:23,860
we've talked to people who<font color="#CCCCCC"> say well I</font>

643
00:30:22,300 --> 00:30:26,320
don't<font color="#CCCCCC"> think it's very bad but they don't</font>

644
00:30:23,860 --> 00:30:27,879
know how bad it is so if you're

645
00:30:26,320 --> 00:30:29,710
<font color="#CCCCCC">interested in</font><font color="#E5E5E5"> working with us and doing</font>

646
00:30:27,880 --> 00:30:32,010
some testing if you could contact<font color="#E5E5E5"> tengas</font>

647
00:30:29,710 --> 00:30:36,090
that package design we'd be grateful

648
00:30:32,010 --> 00:30:36,090
that's it any questions

