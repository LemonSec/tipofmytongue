1
00:00:01,610 --> 00:00:05,069
<font color="#CCCCCC">okay now i'm</font><font color="#E5E5E5"> going to go into</font><font color="#CCCCCC"> the second</font>

2
00:00:03,689 --> 00:00:06,689
<font color="#CCCCCC">tour totally</font><font color="#E5E5E5"> different topic and this is</font>

3
00:00:05,069 --> 00:00:07,710
kind of my favorite topic so please ask

4
00:00:06,690 --> 00:00:10,620
questions on this it's<font color="#CCCCCC"> about</font>

5
00:00:07,710 --> 00:00:12,660
synchronizing<font color="#CCCCCC"> your</font><font color="#E5E5E5"> clocks obviously a</font>

6
00:00:10,620 --> 00:00:14,610
software clock is essential to just

7
00:00:12,660 --> 00:00:16,379
about everything first of all we need<font color="#CCCCCC"> a</font>

8
00:00:14,610 --> 00:00:17,850
fundamental hardware support for example

9
00:00:16,379 --> 00:00:19,529
the timer chip we need to be able<font color="#E5E5E5"> to</font>

10
00:00:17,850 --> 00:00:21,029
synchronize the clock and of course time

11
00:00:19,529 --> 00:00:24,060
stamping which is a separate issue is

12
00:00:21,029 --> 00:00:25,439
also essential we need inexpensive start

13
00:00:24,060 --> 00:00:27,209
we want it to<font color="#E5E5E5"> be inexpensive in terms of</font>

14
00:00:25,439 --> 00:00:29,698
hardware<font color="#E5E5E5"> inexpensive and especially</font>

15
00:00:27,210 --> 00:00:31,349
convenient in terms of synchronization

16
00:00:29,699 --> 00:00:35,190
and of<font color="#CCCCCC"> course we want</font><font color="#E5E5E5"> it to be accurate</font>

17
00:00:31,349 --> 00:00:36,870
and robust the current solution is ntp

18
00:00:35,190 --> 00:00:38,519
based synchronization of the standard

19
00:00:36,870 --> 00:00:40,890
software clock it's really not good

20
00:00:38,520 --> 00:00:42,780
enough in two important ways first of

21
00:00:40,890 --> 00:00:44,520
all this solution does not care about

22
00:00:42,780 --> 00:00:46,410
the rate of the clock in fact<font color="#E5E5E5"> it</font>

23
00:00:44,520 --> 00:00:48,030
deliberately varies the rate in order to

24
00:00:46,410 --> 00:00:50,640
track the error that<font color="#CCCCCC"> is called the</font>

25
00:00:48,030 --> 00:00:52,649
offset of the clock<font color="#CCCCCC"> to zero but</font><font color="#E5E5E5"> in fact</font>

26
00:00:50,640 --> 00:00:54,719
a smooth rate of a clock<font color="#CCCCCC"> is an essential</font>

27
00:00:52,649 --> 00:00:56,969
requirement to be<font color="#CCCCCC"> able to measure Delta</font>

28
00:00:54,719 --> 00:00:58,559
T's and Delta T's in fact is what you do

29
00:00:56,969 --> 00:01:00,629
<font color="#E5E5E5">most of the time in</font><font color="#CCCCCC"> rigid</font><font color="#E5E5E5"> time you want</font>

30
00:00:58,559 --> 00:01:03,419
<font color="#E5E5E5">to measure</font><font color="#CCCCCC"> Delta time it's also not</font>

31
00:01:00,629 --> 00:01:05,610
robust in terms of shifts sometimes

32
00:01:03,420 --> 00:01:07,740
ships as large as one second offset

33
00:01:05,610 --> 00:01:09,479
adjustments are made and that<font color="#E5E5E5"> can really</font>

34
00:01:07,740 --> 00:01:11,520
do horrible things especially to network

35
00:01:09,479 --> 00:01:13,080
measurement we can do better because in

36
00:01:11,520 --> 00:01:14,670
the past that the current philosophy is

37
00:01:13,080 --> 00:01:16,439
based on the<font color="#CCCCCC"> idea that the the local</font>

38
00:01:14,670 --> 00:01:18,750
clock is terrible so we must ask the

39
00:01:16,439 --> 00:01:21,839
expert but the reality today is that the

40
00:01:18,750 --> 00:01:23,250
local hardware is excellent and we

41
00:01:21,840 --> 00:01:25,320
should be trusting it and using it we

42
00:01:23,250 --> 00:01:26,670
<font color="#E5E5E5">simply have to calibrate it we still</font>

43
00:01:25,320 --> 00:01:30,210
<font color="#CCCCCC">need a reference source we're</font><font color="#E5E5E5"> still</font>

44
00:01:26,670 --> 00:01:32,100
going<font color="#E5E5E5"> to be using</font><font color="#CCCCCC"> NTP servers and using</font>

45
00:01:30,210 --> 00:01:33,899
the interview protocol to communicate

46
00:01:32,100 --> 00:01:36,539
<font color="#CCCCCC">with them to get timestamp information</font>

47
00:01:33,900 --> 00:01:38,400
but now but now we recognize that the

48
00:01:36,540 --> 00:01:40,619
local clock hardware is fundamentally

49
00:01:38,400 --> 00:01:42,180
good and the idea<font color="#CCCCCC"> that rate is important</font>

50
00:01:40,619 --> 00:01:43,890
not just offset it can changes

51
00:01:42,180 --> 00:01:46,829
everything in terms of filtering and how

52
00:01:43,890 --> 00:01:48,149
accurate and robust we can be so in this

53
00:01:46,829 --> 00:01:51,380
talk I'll tell you<font color="#E5E5E5"> about how we can</font>

54
00:01:48,149 --> 00:01:54,479
define both rate and offset arm

55
00:01:51,380 --> 00:01:56,280
synchronization the sympathy idea is

56
00:01:54,479 --> 00:01:58,409
extremely simple<font color="#CCCCCC"> we use a cpu oscillator</font>

57
00:01:56,280 --> 00:02:01,020
as a clock we have<font color="#E5E5E5"> at esc register which</font>

58
00:01:58,409 --> 00:02:03,270
counts<font color="#E5E5E5"> cpu cycles so we need the idea is</font>

59
00:02:01,020 --> 00:02:05,158
<font color="#CCCCCC">to different clocks based on</font><font color="#E5E5E5"> this very</font>

60
00:02:03,270 --> 00:02:07,530
<font color="#CCCCCC">simple idea that we have a pure</font>

61
00:02:05,159 --> 00:02:09,869
frequency get out the simple<font color="#E5E5E5"> skew model</font>

62
00:02:07,530 --> 00:02:11,910
first<font color="#E5E5E5"> idea is a difference clock for</font>

63
00:02:09,869 --> 00:02:12,960
measuring Delta T's you simply take<font color="#CCCCCC"> the</font>

64
00:02:11,910 --> 00:02:15,510
<font color="#E5E5E5">Delta reference about</font>

65
00:02:12,960 --> 00:02:17,100
register value<font color="#CCCCCC"> multiplied by the</font><font color="#E5E5E5"> period</font>

66
00:02:15,510 --> 00:02:18,989
of the of the oscillator and that

67
00:02:17,100 --> 00:02:20,670
becomes a delta T simple for the

68
00:02:18,990 --> 00:02:22,470
absolute<font color="#E5E5E5"> clock you need to add in a</font>

69
00:02:20,670 --> 00:02:25,829
constant to correct that value up to

70
00:02:22,470 --> 00:02:27,390
real-time fundamental advantages are you

71
00:02:25,830 --> 00:02:29,490
have registered<font color="#CCCCCC"> that's already up to</font>

72
00:02:27,390 --> 00:02:31,739
counting cycles and hardware extremely

73
00:02:29,490 --> 00:02:33,360
fast to read it naturally I'm a<font color="#CCCCCC"> high</font>

74
00:02:31,740 --> 00:02:35,790
<font color="#CCCCCC">resolution</font><font color="#E5E5E5"> like one nanosecond for a</font>

75
00:02:33,360 --> 00:02:37,590
gigahertz processor you get those for

76
00:02:35,790 --> 00:02:39,810
free the catch is you have to measure

77
00:02:37,590 --> 00:02:42,180
that p<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> theorem not of course</font>

78
00:02:39,810 --> 00:02:44,310
and the real catch is<font color="#E5E5E5"> theta naught is</font>

79
00:02:42,180 --> 00:02:46,850
not is in fact not a constant that is

80
00:02:44,310 --> 00:02:48,720
time varying we need to track the drift

81
00:02:46,850 --> 00:02:50,460
<font color="#E5E5E5">everything is based on the quality of</font>

82
00:02:48,720 --> 00:02:52,350
the hardware as<font color="#CCCCCC"> I said just to cut a</font>

83
00:02:50,460 --> 00:02:53,970
long story short<font color="#E5E5E5"> this idea are having a</font>

84
00:02:52,350 --> 00:02:56,310
pure frequency for the oscillator<font color="#E5E5E5"> it</font>

85
00:02:53,970 --> 00:02:58,380
works incredibly well over periods of

86
00:02:56,310 --> 00:03:00,810
<font color="#CCCCCC">1,000 seconds it works extremely well</font>

87
00:02:58,380 --> 00:03:02,700
and<font color="#E5E5E5"> for periods below that the relative</font>

88
00:03:00,810 --> 00:03:05,210
error the variability in the<font color="#E5E5E5"> rate is</font>

89
00:03:02,700 --> 00:03:07,980
still only one part in 10 to the minus 7

90
00:03:05,210 --> 00:03:09,750
so what we have is extremely smooth rate

91
00:03:07,980 --> 00:03:12,030
of our<font color="#E5E5E5"> hardware of is oscillator and</font>

92
00:03:09,750 --> 00:03:14,430
we've got to take<font color="#E5E5E5"> advantage</font><font color="#CCCCCC"> of that the</font>

93
00:03:12,030 --> 00:03:16,410
basic scenario is<font color="#E5E5E5"> to get the timing</font>

94
00:03:14,430 --> 00:03:18,630
information we have<font color="#CCCCCC"> NTV packet that's</font>

95
00:03:16,410 --> 00:03:20,520
sent when it leaves<font color="#E5E5E5"> the host we read the</font>

96
00:03:18,630 --> 00:03:22,320
TC register it goes to the server a

97
00:03:20,520 --> 00:03:24,030
<font color="#E5E5E5">timestamp in seconds is put in it leaves</font>

98
00:03:22,320 --> 00:03:26,250
a server another time stamp in seconds

99
00:03:24,030 --> 00:03:28,650
returns to the host another time stamp

100
00:03:26,250 --> 00:03:31,050
in TC register value so that's four

101
00:03:28,650 --> 00:03:34,020
numbers for each packet that's the raw

102
00:03:31,050 --> 00:03:35,550
data but we<font color="#E5E5E5"> need to assess when of those</font>

103
00:03:34,020 --> 00:03:37,440
when are the<font color="#E5E5E5"> timestamps they're reliable</font>

104
00:03:35,550 --> 00:03:39,210
and when are<font color="#CCCCCC"> they not reliable we do</font>

105
00:03:37,440 --> 00:03:41,609
that using round-trip time based

106
00:03:39,210 --> 00:03:43,290
filtering here we see a time series of

107
00:03:41,610 --> 00:03:44,910
round trip times we see they have<font color="#E5E5E5"> some</font>

108
00:03:43,290 --> 00:03:47,010
<font color="#E5E5E5">kind of common minimum level with</font>

109
00:03:44,910 --> 00:03:49,230
occasional positive excursions those

110
00:03:47,010 --> 00:03:51,359
excursions are due to delay in switching

111
00:03:49,230 --> 00:03:53,760
elements and other effects basically our

112
00:03:51,360 --> 00:03:56,880
filtering idea is based on measuring to

113
00:03:53,760 --> 00:03:59,299
what extent they do they fit those round

114
00:03:56,880 --> 00:04:01,590
trip times are above the<font color="#E5E5E5"> minimum value</font>

115
00:03:59,300 --> 00:04:03,600
now let's go<font color="#CCCCCC"> ahead and try</font><font color="#E5E5E5"> and measure</font>

116
00:04:01,590 --> 00:04:05,310
that<font color="#E5E5E5"> p using that basic relationship</font>

117
00:04:03,600 --> 00:04:07,440
with the deltas we invert that to get a

118
00:04:05,310 --> 00:04:09,240
measurement for<font color="#E5E5E5"> p recall that the naive</font>

119
00:04:07,440 --> 00:04:12,210
estimate and<font color="#CCCCCC"> i've got that</font><font color="#E5E5E5"> in green</font>

120
00:04:09,240 --> 00:04:14,040
there we see do very quickly it closes

121
00:04:12,210 --> 00:04:16,170
in it becomes very close to the<font color="#E5E5E5"> black</font>

122
00:04:14,040 --> 00:04:18,310
reference values you notice<font color="#CCCCCC"> that the</font>

123
00:04:16,170 --> 00:04:19,690
scale there is already<font color="#E5E5E5"> only on one part</font>

124
00:04:18,310 --> 00:04:23,110
10 to the minus<font color="#E5E5E5"> 7</font><font color="#CCCCCC"> so we're looking at</font>

125
00:04:19,690 --> 00:04:24,219
small variations but we see spikes and

126
00:04:23,110 --> 00:04:26,080
those spikes are due to network

127
00:04:24,220 --> 00:04:27,490
congestion and they can<font color="#CCCCCC"> be really</font>

128
00:04:26,080 --> 00:04:29,800
problematic we need to<font color="#E5E5E5"> get rid of them</font>

129
00:04:27,490 --> 00:04:31,210
how do<font color="#E5E5E5"> we do that what we do is we take</font>

130
00:04:29,800 --> 00:04:33,070
we look at those night we look at the

131
00:04:31,210 --> 00:04:34,239
packets and if the quality is good with

132
00:04:33,070 --> 00:04:35,710
respect to that round trip time

133
00:04:34,240 --> 00:04:37,450
filtering then we use them in the

134
00:04:35,710 --> 00:04:38,888
estimate and if they're<font color="#CCCCCC"> not then we</font>

135
00:04:37,450 --> 00:04:40,690
don't<font color="#E5E5E5"> we're just patient and we don't</font>

136
00:04:38,889 --> 00:04:43,240
the result is we see there that the

137
00:04:40,690 --> 00:04:44,800
errors trend quickly below the dash line

138
00:04:43,240 --> 00:04:47,410
the dash line is<font color="#CCCCCC"> at one part in 10 to</font>

139
00:04:44,800 --> 00:04:49,900
the minus<font color="#E5E5E5"> 7 and it never returns now to</font>

140
00:04:47,410 --> 00:04:52,330
put this in perspective in only 10

141
00:04:49,900 --> 00:04:54,310
<font color="#CCCCCC">minutes of calibration you have a value</font>

142
00:04:52,330 --> 00:04:56,229
<font color="#CCCCCC">of P that's</font><font color="#E5E5E5"> accurate enough to</font><font color="#CCCCCC"> make</font>

143
00:04:54,310 --> 00:04:58,780
delta T measurements over small

144
00:04:56,229 --> 00:05:00,729
intervals more accurate or as accurate

145
00:04:58,780 --> 00:05:03,729
as if you had have had GPS directly

146
00:05:00,729 --> 00:05:05,380
attached and if you then<font color="#E5E5E5"> remove</font>

147
00:05:03,729 --> 00:05:07,860
connectivity from the server for a week

148
00:05:05,380 --> 00:05:10,240
it would make absolutely no difference

149
00:05:07,860 --> 00:05:12,310
so this basically eliminates the need

150
00:05:10,240 --> 00:05:14,979
for gps for delta T completely for delta

151
00:05:12,310 --> 00:05:17,260
T measurements now for the much harder

152
00:05:14,979 --> 00:05:19,150
problem of absolute synchronization

153
00:05:17,260 --> 00:05:20,979
again we can come up<font color="#E5E5E5"> with some naive</font>

154
00:05:19,150 --> 00:05:23,049
estimates which disregard the effects of

155
00:05:20,979 --> 00:05:25,150
network congestion again we see<font color="#CCCCCC"> that the</font>

156
00:05:23,050 --> 00:05:26,560
green naive estimates are pretty close

157
00:05:25,150 --> 00:05:28,120
to the<font color="#E5E5E5"> black I</font><font color="#CCCCCC"> hope you can see the</font>

158
00:05:26,560 --> 00:05:29,680
black that black line is tracing through

159
00:05:28,120 --> 00:05:31,750
the middle of<font color="#E5E5E5"> the green net but again</font>

160
00:05:29,680 --> 00:05:33,160
<font color="#E5E5E5">whenever a congestion events occur we</font>

161
00:05:31,750 --> 00:05:35,229
get these spikes and we want to<font color="#E5E5E5"> get</font><font color="#CCCCCC"> rid</font>

162
00:05:33,160 --> 00:05:37,570
of those how do we do that what if<font color="#CCCCCC"> we</font>

163
00:05:35,229 --> 00:05:39,789
<font color="#CCCCCC">want to measure at a given time T what</font>

164
00:05:37,570 --> 00:05:42,460
we do is we look back in the past for

165
00:05:39,789 --> 00:05:43,990
some windows say 1000 seconds and we

166
00:05:42,460 --> 00:05:46,239
look at the naive<font color="#CCCCCC"> estimate</font><font color="#E5E5E5"> in there and</font>

167
00:05:43,990 --> 00:05:47,950
we wait them according<font color="#CCCCCC"> to the round-trip</font>

168
00:05:46,240 --> 00:05:49,630
time based quality and<font color="#E5E5E5"> then we take a</font>

169
00:05:47,950 --> 00:05:51,789
weighted average that's what we do

170
00:05:49,630 --> 00:05:53,200
that's the the basic algorithm now<font color="#E5E5E5"> I'm</font>

171
00:05:51,789 --> 00:05:55,450
going<font color="#E5E5E5"> to show you a close-up of the</font>

172
00:05:53,200 --> 00:05:58,000
results the green<font color="#CCCCCC"> of the naive estimates</font>

173
00:05:55,450 --> 00:05:59,620
the black are<font color="#CCCCCC"> the true error of the</font>

174
00:05:58,000 --> 00:06:01,539
clock<font color="#CCCCCC"> measured with our reference system</font>

175
00:05:59,620 --> 00:06:03,850
we have<font color="#E5E5E5"> a GPS synchronized reference</font>

176
00:06:01,539 --> 00:06:05,979
system hardware based and the blue are

177
00:06:03,850 --> 00:06:07,720
the is the output of<font color="#E5E5E5"> the algorithm we</font>

178
00:06:05,979 --> 00:06:10,030
see that the blue tracks the black very

179
00:06:07,720 --> 00:06:11,740
well in fact it maintains pretty much a

180
00:06:10,030 --> 00:06:13,929
constant distance and that distance is

181
00:06:11,740 --> 00:06:15,880
only 30 micro seconds now the fact that

182
00:06:13,930 --> 00:06:18,669
distance is constant is very significant

183
00:06:15,880 --> 00:06:20,620
and points to a key issue in<font color="#E5E5E5"> this whole</font>

184
00:06:18,669 --> 00:06:22,780
synchronization game and it's the path

185
00:06:20,620 --> 00:06:24,070
asymmetry the<font color="#E5E5E5"> part asymmetry is simply</font>

186
00:06:22,780 --> 00:06:25,799
the difference with<font color="#E5E5E5"> the want the delay</font>

187
00:06:24,070 --> 00:06:28,539
to the<font color="#E5E5E5"> server and the delay coming back</font>

188
00:06:25,800 --> 00:06:31,570
in practice you cannot measure this

189
00:06:28,539 --> 00:06:32,150
<font color="#E5E5E5">Delta and so we assume it to be 0 but if</font>

190
00:06:31,570 --> 00:06:35,930
it's not

191
00:06:32,150 --> 00:06:37,969
zero that creates a problem but it is

192
00:06:35,930 --> 00:06:40,010
bounded<font color="#CCCCCC"> by the round-trip time so in</font>

193
00:06:37,970 --> 00:06:41,720
this particular case of the in server

194
00:06:40,010 --> 00:06:43,070
int we use three different servers but

195
00:06:41,720 --> 00:06:44,630
the results are showed you were from the

196
00:06:43,070 --> 00:06:46,490
server int which was only<font color="#E5E5E5"> one</font>

197
00:06:44,630 --> 00:06:49,219
millisecond away on campus at the

198
00:06:46,490 --> 00:06:51,410
University of Melbourne it's<font color="#CCCCCC"> Delta its</font>

199
00:06:49,220 --> 00:06:53,750
path asymmetry was only 50 microseconds

200
00:06:51,410 --> 00:06:56,600
this means that the the best we can

201
00:06:53,750 --> 00:06:58,580
possibly<font color="#E5E5E5"> do by any algorithm this is</font>

202
00:06:56,600 --> 00:07:00,320
fundamental this is not our algorithm

203
00:06:58,580 --> 00:07:01,880
this is any algorithm the best any

204
00:07:00,320 --> 00:07:05,300
algorithm can do is to measure the

205
00:07:01,880 --> 00:07:06,980
offset to 25 microseconds and our median

206
00:07:05,300 --> 00:07:09,050
error it was twenty eight microseconds

207
00:07:06,980 --> 00:07:10,790
so we see<font color="#CCCCCC"> that in terms of filtering of</font>

208
00:07:09,050 --> 00:07:12,380
being extremely successful but we

209
00:07:10,790 --> 00:07:13,910
couldn't get<font color="#E5E5E5"> around this fundamental</font>

210
00:07:12,380 --> 00:07:16,190
problem which all methods would suffer

211
00:07:13,910 --> 00:07:17,960
from the only way to get around that is

212
00:07:16,190 --> 00:07:19,790
through the choice of server you<font color="#E5E5E5"> want</font>

213
00:07:17,960 --> 00:07:22,580
the server to have a small round trip

214
00:07:19,790 --> 00:07:25,640
time and especially you wanted to have a

215
00:07:22,580 --> 00:07:27,770
symmetric path now in a full robust

216
00:07:25,640 --> 00:07:30,110
system needs to be robust too many many

217
00:07:27,770 --> 00:07:32,180
factors a key motivation was to be truly

218
00:07:30,110 --> 00:07:34,040
robust in the real world we need

219
00:07:32,180 --> 00:07:36,410
robustness<font color="#E5E5E5"> and we have robustness to</font>

220
00:07:34,040 --> 00:07:38,300
changes of<font color="#CCCCCC"> the oscillator over time</font>

221
00:07:36,410 --> 00:07:39,860
changes in temperature it's extremely

222
00:07:38,300 --> 00:07:41,870
robust a packet<font color="#CCCCCC"> loss and never</font>

223
00:07:39,860 --> 00:07:45,020
congestion as we've seen even time

224
00:07:41,870 --> 00:07:46,660
stamping errors and in servers<font color="#E5E5E5"> a server</font>

225
00:07:45,020 --> 00:07:49,039
errors which are the most serious<font color="#CCCCCC"> of all</font>

226
00:07:46,660 --> 00:07:50,630
we also have<font color="#CCCCCC"> some nice a very nice way</font>

227
00:07:49,040 --> 00:07:53,300
to get around the problem of level

228
00:07:50,630 --> 00:07:55,040
shifts in round trip times this can

229
00:07:53,300 --> 00:07:56,660
occur for example if there's a<font color="#CCCCCC"> rap</font>

230
00:07:55,040 --> 00:07:58,700
change to the server since that

231
00:07:56,660 --> 00:08:00,260
filtering is based on round trip time is

232
00:07:58,700 --> 00:08:01,580
<font color="#CCCCCC">extremely important to</font><font color="#E5E5E5"> be able to take</font>

233
00:08:00,260 --> 00:08:03,380
<font color="#CCCCCC">that into account efficiently and we've</font>

234
00:08:01,580 --> 00:08:05,240
been managed to achieve that here's<font color="#E5E5E5"> some</font>

235
00:08:03,380 --> 00:08:07,159
examples on<font color="#CCCCCC"> the left hand side appalling</font>

236
00:08:05,240 --> 00:08:10,130
p with<font color="#CCCCCC"> the polling period of 64 seconds</font>

237
00:08:07,160 --> 00:08:12,950
so the<font color="#CCCCCC"> NTP packet one every 64 seconds</font>

238
00:08:10,130 --> 00:08:14,900
this is the histogram showing<font color="#E5E5E5"> 99 percent</font>

239
00:08:12,950 --> 00:08:17,210
of all values this is over a three-month

240
00:08:14,900 --> 00:08:18,500
period and in<font color="#E5E5E5"> this period some nasty</font>

241
00:08:17,210 --> 00:08:20,960
<font color="#E5E5E5">things happen for example there's a</font>

242
00:08:18,500 --> 00:08:23,270
<font color="#E5E5E5">period of three entire days where we</font>

243
00:08:20,960 --> 00:08:26,060
didn't collect data and that's included

244
00:08:23,270 --> 00:08:27,620
here despite<font color="#CCCCCC"> that the median error that</font>

245
00:08:26,060 --> 00:08:31,580
we<font color="#E5E5E5"> may be making a measurement for every</font>

246
00:08:27,620 --> 00:08:33,320
packet is only 31 microseconds and the

247
00:08:31,580 --> 00:08:36,590
interquartile range there is only about

248
00:08:33,320 --> 00:08:39,200
15 micro seconds so this<font color="#CCCCCC"> is a pretty</font>

249
00:08:36,590 --> 00:08:41,690
robust on the<font color="#E5E5E5"> right hand side we get</font>

250
00:08:39,200 --> 00:08:43,370
similar meeting error with but

251
00:08:41,690 --> 00:08:47,750
a bit more<font color="#E5E5E5"> spread when the polling</font>

252
00:08:43,370 --> 00:08:49,130
period goes up by a factor of four the

253
00:08:47,750 --> 00:08:50,870
algorithm of course has some parameters

254
00:08:49,130 --> 00:08:52,370
in it we<font color="#E5E5E5"> want the performance to be</font>

255
00:08:50,870 --> 00:08:53,810
<font color="#E5E5E5">insensitive to those parameters here's</font>

256
00:08:52,370 --> 00:08:55,670
an example here this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the main</font>

257
00:08:53,810 --> 00:08:58,579
parameter that window size<font color="#E5E5E5"> I mentioned</font>

258
00:08:55,670 --> 00:09:00,319
here it varies along the x-axis quite a

259
00:08:58,580 --> 00:09:02,360
bit but the median error which<font color="#CCCCCC"> is that</font>

260
00:09:00,320 --> 00:09:03,950
line in the center the median stays

261
00:09:02,360 --> 00:09:05,870
pretty much nailed at twenty eight

262
00:09:03,950 --> 00:09:07,700
microseconds regardless of the change in

263
00:09:05,870 --> 00:09:09,740
parameter and the interquartile range

264
00:09:07,700 --> 00:09:12,650
which are the lines above and below it

265
00:09:09,740 --> 00:09:15,590
similarly change very little and even

266
00:09:12,650 --> 00:09:17,060
the outliers which is the first<font color="#E5E5E5"> and 99th</font>

267
00:09:15,590 --> 00:09:20,630
percentile<font color="#CCCCCC"> which is the top and bottom</font>

268
00:09:17,060 --> 00:09:22,609
curves also change very little as a

269
00:09:20,630 --> 00:09:24,350
function of the window size similarly

270
00:09:22,610 --> 00:09:25,310
the polling rate it's important

271
00:09:24,350 --> 00:09:28,040
parameter we don't want to be

272
00:09:25,310 --> 00:09:29,900
overloading<font color="#E5E5E5"> ntp servers nor the network</font>

273
00:09:28,040 --> 00:09:31,640
so<font color="#CCCCCC"> we can't can't be polling too</font>

274
00:09:29,900 --> 00:09:33,949
frequently we see a range of polling

275
00:09:31,640 --> 00:09:36,860
periods here the standard range is 64 to

276
00:09:33,950 --> 00:09:39,250
256 again we see the median error which

277
00:09:36,860 --> 00:09:43,550
that black line is pretty<font color="#E5E5E5"> much nailed at</font>

278
00:09:39,250 --> 00:09:46,520
minus twenty eight microseconds so what

279
00:09:43,550 --> 00:09:48,640
we've<font color="#CCCCCC"> got here is a</font><font color="#E5E5E5"> CPU based oscillator</font>

280
00:09:46,520 --> 00:09:51,439
base clock in terms of an absolute

281
00:09:48,640 --> 00:09:53,780
absolute clock it's more much more

282
00:09:51,440 --> 00:09:56,270
accurate than<font color="#CCCCCC"> the current software based</font>

283
00:09:53,780 --> 00:09:58,640
ntp based software synchronization and

284
00:09:56,270 --> 00:10:00,319
it's far more robust<font color="#CCCCCC"> I would have liked</font>

285
00:09:58,640 --> 00:10:01,640
<font color="#CCCCCC">to showing</font><font color="#E5E5E5"> you lots of other proofs of</font>

286
00:10:00,320 --> 00:10:03,790
the robustness but they haven't got time

287
00:10:01,640 --> 00:10:06,319
<font color="#CCCCCC">for that in terms of a difference clock</font>

288
00:10:03,790 --> 00:10:08,360
that wasn't<font color="#E5E5E5"> even available before and</font>

289
00:10:06,320 --> 00:10:09,710
now we<font color="#E5E5E5"> have a different stock which were</font>

290
00:10:08,360 --> 00:10:11,420
used for measuring time differences

291
00:10:09,710 --> 00:10:13,310
which is more accurate than<font color="#E5E5E5"> if you had</font>

292
00:10:11,420 --> 00:10:16,400
GPS<font color="#E5E5E5"> actually physically attached and</font>

293
00:10:13,310 --> 00:10:18,140
it's extremely robust it's very

294
00:10:16,400 --> 00:10:20,449
important to recognize the need for

295
00:10:18,140 --> 00:10:21,830
those two separate clocks if you want to

296
00:10:20,450 --> 00:10:24,080
take<font color="#CCCCCC"> advantage of that beautiful smooth</font>

297
00:10:21,830 --> 00:10:26,089
rate you must have<font color="#CCCCCC"> a separate clock it</font>

298
00:10:24,080 --> 00:10:28,339
still has low computational requirements

299
00:10:26,089 --> 00:10:29,630
and could be used<font color="#CCCCCC"> it's ideal for network</font>

300
00:10:28,339 --> 00:10:31,160
measurement but I believe<font color="#E5E5E5"> this is really</font>

301
00:10:29,630 --> 00:10:34,280
the way to go as a generator<font color="#E5E5E5"> replacement</font>

302
00:10:31,160 --> 00:10:36,410
for the current solution as well here we

303
00:10:34,280 --> 00:10:37,850
have some<font color="#E5E5E5"> rev resources for</font><font color="#CCCCCC"> it as an old</font>

304
00:10:36,410 --> 00:10:39,560
version<font color="#E5E5E5"> of the stuff which does not do</font>

305
00:10:37,850 --> 00:10:42,110
<font color="#CCCCCC">the absolute synchronization but does</font>

306
00:10:39,560 --> 00:10:44,089
the clock and the rate synchronization

307
00:10:42,110 --> 00:10:46,550
for Delta T's that's available right<font color="#CCCCCC"> now</font>

308
00:10:44,089 --> 00:10:47,870
into Linux and we're<font color="#E5E5E5"> working on VSD</font>

309
00:10:46,550 --> 00:10:51,620
implementation for this new work

310
00:10:47,870 --> 00:10:54,010
including the absolute clock as well any

311
00:10:51,620 --> 00:10:54,010
questions

312
00:11:00,170 --> 00:11:04,459
the question was does<font color="#CCCCCC"> jitter effect this</font>

313
00:11:02,209 --> 00:11:06,619
I guess you're talking about changes in

314
00:11:04,459 --> 00:11:07,939
network delays right so<font color="#CCCCCC"> or when I say</font>

315
00:11:06,620 --> 00:11:10,010
congestion before<font color="#E5E5E5"> it's exactly what I</font>

316
00:11:07,940 --> 00:11:12,260
was talking about so if we can filter

317
00:11:10,010 --> 00:11:14,389
that very successfully we also looked

318
00:11:12,260 --> 00:11:15,560
we've<font color="#E5E5E5"> tried it with other servers</font>

319
00:11:14,389 --> 00:11:17,570
including a server which was

320
00:11:15,560 --> 00:11:19,399
ridiculously far away in another state

321
00:11:17,570 --> 00:11:21,050
which you don't<font color="#E5E5E5"> have to go to a server</font>

322
00:11:19,399 --> 00:11:23,660
that's a long way away like that whether

323
00:11:21,050 --> 00:11:25,969
you have many more hops and much more do

324
00:11:23,660 --> 00:11:29,779
too much more network delay and it still

325
00:11:25,970 --> 00:11:31,959
performs very robustly thank you<font color="#CCCCCC"> very</font>

326
00:11:29,779 --> 00:11:31,959
<font color="#E5E5E5">much</font>

