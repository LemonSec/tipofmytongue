1
00:00:00,000 --> 00:00:03,030
Hey

2
00:00:00,990 --> 00:00:03,030
[Music]

3
00:00:03,460 --> 00:00:07,659
you

4
00:00:04,360 --> 00:00:07,659
[Music]

5
00:00:09,600 --> 00:00:14,460
Oh ladies and gentlemen be my great

6
00:00:12,420 --> 00:00:16,950
pleasure to introduce to you our speaker

7
00:00:14,460 --> 00:00:19,500
for the sessions things J Collins he's a

8
00:00:16,950 --> 00:00:22,110
software or historically spectrans

9
00:00:19,500 --> 00:00:23,790
sufferer engineering now as a principal

10
00:00:22,110 --> 00:00:27,330
architect with Akamai think he's going

11
00:00:23,790 --> 00:00:29,939
to talk to us about IP multicast next

12
00:00:27,330 --> 00:00:30,479
steps to make it real Jake if you would

13
00:00:29,940 --> 00:00:34,620
take it away

14
00:00:30,480 --> 00:00:37,050
great thanks John yeah so I'm gonna be

15
00:00:34,620 --> 00:00:43,650
talking about IP multicast I've been

16
00:00:37,050 --> 00:00:45,360
working on it at ITF lately this is some

17
00:00:43,650 --> 00:00:48,210
of the work that we've done and we're

18
00:00:45,360 --> 00:00:51,180
gonna be building this out and trying to

19
00:00:48,210 --> 00:00:54,540
make it actually you know deployable and

20
00:00:51,180 --> 00:00:55,739
in fact deployed and that's what I'm

21
00:00:54,540 --> 00:00:57,629
doing here today we want to make sure

22
00:00:55,739 --> 00:01:00,150
that this actually works when it's

23
00:00:57,629 --> 00:01:02,099
rolled out and and in order to do that

24
00:01:00,150 --> 00:01:03,540
we think we need to you know talk to

25
00:01:02,100 --> 00:01:05,600
some network operators and make sure

26
00:01:03,540 --> 00:01:08,520
it's going to meet their needs make sure

27
00:01:05,600 --> 00:01:10,649
you know we understand if there's parts

28
00:01:08,520 --> 00:01:12,899
that are blockers in what we have not

29
00:01:10,650 --> 00:01:17,369
solved yet and that we address them if

30
00:01:12,900 --> 00:01:21,869
that happens our plan is to get this

31
00:01:17,369 --> 00:01:26,789
rolled out in a browser API as sort of

32
00:01:21,869 --> 00:01:29,250
the main receiver path and that's going

33
00:01:26,789 --> 00:01:31,310
to open up a whole lot of content for us

34
00:01:29,250 --> 00:01:34,500
to use and probably other people as well

35
00:01:31,310 --> 00:01:37,109
that is underway now we've just filed

36
00:01:34,500 --> 00:01:39,869
our our intent to prototype and chromium

37
00:01:37,109 --> 00:01:42,630
then and you know that's going to take a

38
00:01:39,869 --> 00:01:45,840
little while but this is the sort of

39
00:01:42,630 --> 00:01:48,869
early engagement phase where we make

40
00:01:45,840 --> 00:01:51,420
sure that that as we get the the browser

41
00:01:48,869 --> 00:01:54,149
implementation rolling that it actually

42
00:01:51,420 --> 00:01:55,229
you know is going to work in the network

43
00:01:54,149 --> 00:01:58,259
as well

44
00:01:55,229 --> 00:02:01,079
and we think we've defined an open

45
00:01:58,259 --> 00:02:05,399
standards-based approach that that

46
00:02:01,079 --> 00:02:09,419
should be you know repeatable and not

47
00:02:05,399 --> 00:02:11,590
any provider specific implementation so

48
00:02:09,419 --> 00:02:15,040
we think that this is going to

49
00:02:11,590 --> 00:02:17,860
okay as best we can tell but obviously

50
00:02:15,040 --> 00:02:20,290
this is early days and we want to make

51
00:02:17,860 --> 00:02:21,879
sure that we get we get the good

52
00:02:20,290 --> 00:02:23,590
engagement feedback that can really make

53
00:02:21,879 --> 00:02:26,890
this successful and that's what I'm

54
00:02:23,590 --> 00:02:30,310
doing here so I'm looking for review on

55
00:02:26,890 --> 00:02:33,040
our specs looking for you know feedback

56
00:02:30,310 --> 00:02:35,200
and to just sort of get this idea out

57
00:02:33,040 --> 00:02:38,019
there and get people thinking about it

58
00:02:35,200 --> 00:02:41,920
and and looking into the future to make

59
00:02:38,019 --> 00:02:46,150
it happen and hopefully I would love to

60
00:02:41,920 --> 00:02:49,179
find a few brave souls visionary forward

61
00:02:46,150 --> 00:02:50,380
thinkers who are willing to do some

62
00:02:49,180 --> 00:02:51,790
trials with us this year

63
00:02:50,380 --> 00:02:54,549
and make sure we can really test these

64
00:02:51,790 --> 00:02:56,620
things out and and make sure that they

65
00:02:54,549 --> 00:02:58,299
would actually work in at least in your

66
00:02:56,620 --> 00:03:04,200
networks and that we can do what we

67
00:02:58,299 --> 00:03:06,819
think we can do so I'm gonna go through

68
00:03:04,200 --> 00:03:09,339
and I spend a decent amount of time on

69
00:03:06,819 --> 00:03:10,780
motivations here like what we're trying

70
00:03:09,340 --> 00:03:12,489
to accomplish and why we're trying to

71
00:03:10,780 --> 00:03:15,280
accomplish it and why we're focusing on

72
00:03:12,489 --> 00:03:18,310
multicast for this effort I'm gonna give

73
00:03:15,280 --> 00:03:23,410
a super fast run-through of what we're

74
00:03:18,310 --> 00:03:26,829
proposing and and why we think it's

75
00:03:23,410 --> 00:03:29,590
something that can solve the the

76
00:03:26,829 --> 00:03:31,680
challenges that we know of with with

77
00:03:29,590 --> 00:03:34,900
multicast deployments between domains

78
00:03:31,680 --> 00:03:37,030
and go over like what we're gonna do in

79
00:03:34,900 --> 00:03:41,049
the trials and what we're looking for in

80
00:03:37,030 --> 00:03:44,230
these trial partners we're we're also

81
00:03:41,049 --> 00:03:49,239
offering to share some some data

82
00:03:44,230 --> 00:03:53,230
personalized to your AAS about about

83
00:03:49,239 --> 00:03:54,639
what the traffic mix that we send looks

84
00:03:53,230 --> 00:03:57,668
like so that you can make an informed

85
00:03:54,639 --> 00:03:59,919
decision about about whether the traffic

86
00:03:57,669 --> 00:04:02,349
that we're providing can provide a good

87
00:03:59,919 --> 00:04:04,329
business reason to to get this working

88
00:04:02,349 --> 00:04:06,638
on the kind of timeline that we're

89
00:04:04,329 --> 00:04:09,040
looking at for rolling out the the

90
00:04:06,639 --> 00:04:10,870
browser capabilities and and perhaps

91
00:04:09,040 --> 00:04:12,160
other receivers too but the browser we

92
00:04:10,870 --> 00:04:16,000
think is is going to be a real

93
00:04:12,160 --> 00:04:20,409
game-changer in this and make it make it

94
00:04:16,000 --> 00:04:24,990
viable in the receiver side and so we're

95
00:04:20,409 --> 00:04:24,990
digging in on that quite hard

96
00:04:25,050 --> 00:04:32,560
so I'll jump into the weii multicast

97
00:04:28,330 --> 00:04:36,550
first here part of it you may have seen

98
00:04:32,560 --> 00:04:38,170
this is a couple of messages from the

99
00:04:36,550 --> 00:04:40,600
nanog list in the last few months I'm

100
00:04:38,170 --> 00:04:45,160
talking about just you know some of our

101
00:04:40,600 --> 00:04:47,320
relatively high traffic days these you

102
00:04:45,160 --> 00:04:49,090
know these can be disruptive for you

103
00:04:47,320 --> 00:04:52,960
know for lots of people we understand

104
00:04:49,090 --> 00:04:55,450
that and it's you know it's it happens

105
00:04:52,960 --> 00:04:57,820
and I'll go through a little bit of you

106
00:04:55,450 --> 00:05:00,940
know what's going on when that happens

107
00:04:57,820 --> 00:05:04,210
and talk about why multicast rally we

108
00:05:00,940 --> 00:05:07,480
think can help here when you just do the

109
00:05:04,210 --> 00:05:10,390
math it turns out to get pretty clear so

110
00:05:07,480 --> 00:05:13,090
I picked 167 terabits per second here

111
00:05:10,390 --> 00:05:15,550
because that's our that's our currently

112
00:05:13,090 --> 00:05:20,169
published record for the amount of

113
00:05:15,550 --> 00:05:22,870
traffic delivered to end-user at peak so

114
00:05:20,170 --> 00:05:24,960
that's a you know that goes up every

115
00:05:22,870 --> 00:05:28,440
year we're always rolling out new

116
00:05:24,960 --> 00:05:32,200
capacity like everybody else right but

117
00:05:28,440 --> 00:05:34,120
when you consider things like there are

118
00:05:32,200 --> 00:05:37,090
popular games today that have 100

119
00:05:34,120 --> 00:05:39,340
million users and some of those popular

120
00:05:37,090 --> 00:05:42,429
games sometimes they ship an update that

121
00:05:39,340 --> 00:05:44,289
is like 65 gigabytes and when you just

122
00:05:42,430 --> 00:05:47,500
multiply those bits together and you

123
00:05:44,290 --> 00:05:48,730
divide by the by our record traffic and

124
00:05:47,500 --> 00:05:52,600
you say well what if we serve that

125
00:05:48,730 --> 00:05:53,860
traffic at our record rate as best we

126
00:05:52,600 --> 00:05:56,260
could and did nothing else with our

127
00:05:53,860 --> 00:05:58,060
platform which by the way that if that

128
00:05:56,260 --> 00:06:00,150
would be an upper bound on on what you

129
00:05:58,060 --> 00:06:02,530
could have expected to see in the past

130
00:06:00,150 --> 00:06:03,789
when you just do that division it turns

131
00:06:02,530 --> 00:06:07,299
out to take three and a half days to

132
00:06:03,790 --> 00:06:10,300
deliver all that and this is a big

133
00:06:07,300 --> 00:06:12,540
mismatch like an order of magnitude at

134
00:06:10,300 --> 00:06:15,280
least over what a user would expect

135
00:06:12,540 --> 00:06:17,530
because like if they're looking at a 50

136
00:06:15,280 --> 00:06:19,260
megabit network that they're paying for

137
00:06:17,530 --> 00:06:21,369
and they're thinking it's a 65 gig

138
00:06:19,260 --> 00:06:24,430
download then they're looking for a

139
00:06:21,370 --> 00:06:26,740
three hour download all right so this is

140
00:06:24,430 --> 00:06:28,060
the mismatch in between supply and

141
00:06:26,740 --> 00:06:30,400
demand that we're trying to address with

142
00:06:28,060 --> 00:06:32,380
our multicast capabilities and it's not

143
00:06:30,400 --> 00:06:34,349
just like the game downloads I mean the

144
00:06:32,380 --> 00:06:37,270
OS updates have the same kind of trouble

145
00:06:34,350 --> 00:06:37,750
you know that is the same exact bits has

146
00:06:37,270 --> 00:06:40,390
to get

147
00:06:37,750 --> 00:06:44,650
- like everybody who has that kind of

148
00:06:40,390 --> 00:06:46,330
computer right and it's it's really

149
00:06:44,650 --> 00:06:49,260
inefficient to do this with unicast and

150
00:06:46,330 --> 00:06:52,030
it really shows when you do that math

151
00:06:49,260 --> 00:06:54,700
you know and likewise the the kind of

152
00:06:52,030 --> 00:06:56,109
traditional use case for multicast this

153
00:06:54,700 --> 00:06:57,520
is another one that we think we can

154
00:06:56,110 --> 00:06:59,440
address we have a product that does this

155
00:06:57,520 --> 00:07:03,010
today but I'm not here to talk about

156
00:06:59,440 --> 00:07:05,920
that it's but that that would be the

157
00:07:03,010 --> 00:07:07,810
sort of early version of the trial the

158
00:07:05,920 --> 00:07:09,820
traffic will be running is the is the

159
00:07:07,810 --> 00:07:11,919
live video but we do want to get to that

160
00:07:09,820 --> 00:07:14,620
you know get to that download because we

161
00:07:11,919 --> 00:07:16,060
think it's really important but when you

162
00:07:14,620 --> 00:07:19,050
look at the same story on live video

163
00:07:16,060 --> 00:07:21,810
like you know okay we we sometimes ship

164
00:07:19,050 --> 00:07:23,980
167 terabits per second at our peak load

165
00:07:21,810 --> 00:07:26,440
what can that accomplish if we're

166
00:07:23,980 --> 00:07:28,360
looking at like 4k traffic right well 4k

167
00:07:26,440 --> 00:07:30,730
typical there is about 40 megabits per

168
00:07:28,360 --> 00:07:34,900
second that's like YouTube guidelines

169
00:07:30,730 --> 00:07:37,000
and when you just multiply that out or

170
00:07:34,900 --> 00:07:40,630
divide that out then you end up with

171
00:07:37,000 --> 00:07:44,620
like for 4.2 million viewers is how much

172
00:07:40,630 --> 00:07:46,810
4k traffic we can search you know like

173
00:07:44,620 --> 00:07:49,479
how much is that well it's not actually

174
00:07:46,810 --> 00:07:54,970
that much it's like 117th most popular

175
00:07:49,479 --> 00:07:56,260
TV show from 2018 you know it I mean the

176
00:07:54,970 --> 00:07:59,470
Superbowl is like a hundred million

177
00:07:56,260 --> 00:08:01,539
people right it even if we only have a

178
00:07:59,470 --> 00:08:03,250
small portion of that traffic if people

179
00:08:01,540 --> 00:08:05,050
are trying to watch in 4k it just

180
00:08:03,250 --> 00:08:07,120
there's this giant mismatch we put

181
00:08:05,050 --> 00:08:10,030
between you know even what a major

182
00:08:07,120 --> 00:08:13,780
content provider or content delivery

183
00:08:10,030 --> 00:08:15,219
system and they can do and what the

184
00:08:13,780 --> 00:08:18,549
demand is especially as more and more

185
00:08:15,220 --> 00:08:20,290
devices go online and it only gets worse

186
00:08:18,550 --> 00:08:21,910
from there right I mean more and more 4k

187
00:08:20,290 --> 00:08:23,680
TVs or better getting rolled out and

188
00:08:21,910 --> 00:08:25,419
there's not a K TVs rolling out and

189
00:08:23,680 --> 00:08:28,030
there's you know talk of doing VR

190
00:08:25,419 --> 00:08:30,039
there's like some prototype stuff that's

191
00:08:28,030 --> 00:08:32,530
essentially 12 K at 400 megabits per

192
00:08:30,040 --> 00:08:34,650
stream you know you look at the Cisco

193
00:08:32,530 --> 00:08:39,218
reports and they're they're predicting

194
00:08:34,650 --> 00:08:41,140
have been for years 20 percent your year

195
00:08:39,219 --> 00:08:43,539
growth for the demand and in per

196
00:08:41,140 --> 00:08:46,300
household traffic and a whole lot of

197
00:08:43,539 --> 00:08:47,560
this is just addressable by dealing with

198
00:08:46,300 --> 00:08:50,719
multicast so this is what we're looking

199
00:08:47,560 --> 00:08:56,239
at for what we think we can address

200
00:08:50,720 --> 00:09:01,280
this is traffic from from January 2019

201
00:08:56,240 --> 00:09:03,740
and this is kind of the traffic mix that

202
00:09:01,280 --> 00:09:06,140
we see it's pretty typical this varies a

203
00:09:03,740 --> 00:09:08,120
little bit but we think that the

204
00:09:06,140 --> 00:09:10,760
software traffic a whole lot of it is

205
00:09:08,120 --> 00:09:13,700
addressable and we think the live video

206
00:09:10,760 --> 00:09:16,270
is is almost entirely addressable for

207
00:09:13,700 --> 00:09:18,740
anything that's that's widely shared

208
00:09:16,270 --> 00:09:21,650
even though it's a relatively small

209
00:09:18,740 --> 00:09:25,550
portion of the overall traffic you know

210
00:09:21,650 --> 00:09:27,319
it's it works very efficiently that in

211
00:09:25,550 --> 00:09:29,839
the software do it does but we also

212
00:09:27,320 --> 00:09:31,940
think we can address a lot of the a lot

213
00:09:29,840 --> 00:09:35,090
of the we call this the nix live and

214
00:09:31,940 --> 00:09:36,230
video-on-demand and this is the video on

215
00:09:35,090 --> 00:09:40,640
demand that's actually being

216
00:09:36,230 --> 00:09:44,030
concurrently consumed right so you know

217
00:09:40,640 --> 00:09:46,370
even though we the multicast can't you

218
00:09:44,030 --> 00:09:48,589
know easily necessarily address

219
00:09:46,370 --> 00:09:52,340
on-demand video that's truly on demand

220
00:09:48,590 --> 00:09:54,440
the mix the the video on demand that's

221
00:09:52,340 --> 00:09:56,750
like when the new show comes out and

222
00:09:54,440 --> 00:09:59,450
people happen to demand it within the

223
00:09:56,750 --> 00:10:01,370
same 15 minutes for like 80 or 90% of

224
00:09:59,450 --> 00:10:03,470
the downloads well that actually is

225
00:10:01,370 --> 00:10:05,650
pretty addressable and that's something

226
00:10:03,470 --> 00:10:07,970
that you can do just by like offsetting

227
00:10:05,650 --> 00:10:10,400
when you start your you know have a

228
00:10:07,970 --> 00:10:13,010
different carousel so depending like

229
00:10:10,400 --> 00:10:14,740
which five minute or one minute section

230
00:10:13,010 --> 00:10:18,110
they they happen to start watching in

231
00:10:14,740 --> 00:10:19,730
they can get most of that traffic with

232
00:10:18,110 --> 00:10:21,440
multicast if we just set it up right

233
00:10:19,730 --> 00:10:23,390
like it's not as efficient as live video

234
00:10:21,440 --> 00:10:27,980
but it's far far more efficient than

235
00:10:23,390 --> 00:10:29,150
unicast so you know our overall targets

236
00:10:27,980 --> 00:10:31,220
what we think would make this worthwhile

237
00:10:29,150 --> 00:10:33,140
for us and what we're aiming to be able

238
00:10:31,220 --> 00:10:36,230
to achieve with any networks that can do

239
00:10:33,140 --> 00:10:38,780
the delivery is to reduce our peak load

240
00:10:36,230 --> 00:10:43,310
by 50% and to reduce our day-to-day of

241
00:10:38,780 --> 00:10:46,400
bandwidth load by by 20% overall traffic

242
00:10:43,310 --> 00:10:49,040
so that's a you know based on sort of

243
00:10:46,400 --> 00:10:51,050
what we deliver today and what we think

244
00:10:49,040 --> 00:10:52,400
we can change into multicast in the

245
00:10:51,050 --> 00:10:55,969
future going forward as this becomes

246
00:10:52,400 --> 00:10:57,590
more more widely available you know

247
00:10:55,970 --> 00:10:59,390
under the assumption we're except we're

248
00:10:57,590 --> 00:11:01,070
successful that's where we're aiming to

249
00:10:59,390 --> 00:11:03,130
get to so just to give that kind of

250
00:11:01,070 --> 00:11:05,330
background

251
00:11:03,130 --> 00:11:07,160
so now I'll talk a little bit about what

252
00:11:05,330 --> 00:11:10,760
we're actually trying to accomplish and

253
00:11:07,160 --> 00:11:14,360
why we think it's going to it's going to

254
00:11:10,760 --> 00:11:16,790
work the way we why we think it'll be

255
00:11:14,360 --> 00:11:18,620
doable or at least we hope it'll be

256
00:11:16,790 --> 00:11:22,730
doable and that's what we're looking for

257
00:11:18,620 --> 00:11:23,870
feedback here from you guys on so this

258
00:11:22,730 --> 00:11:26,150
is a network diagram from our

259
00:11:23,870 --> 00:11:28,160
architecture deck that we that we go

260
00:11:26,150 --> 00:11:29,660
through with with people who are

261
00:11:28,160 --> 00:11:37,480
interested in talking about this further

262
00:11:29,660 --> 00:11:41,510
with us and what's happening here is the

263
00:11:37,480 --> 00:11:44,630
multicast traffic gets ingested as as a

264
00:11:41,510 --> 00:11:47,470
unicast tunnel so this uses AMT which is

265
00:11:44,630 --> 00:11:53,360
which is a proposed standard RFC it's

266
00:11:47,470 --> 00:11:57,200
7450 and he gets unwrapped as generic

267
00:11:53,360 --> 00:11:59,270
UDP traffic inside the multicast capable

268
00:11:57,200 --> 00:12:02,240
portion of your network so you can run

269
00:11:59,270 --> 00:12:03,620
these ingest points you know in a place

270
00:12:02,240 --> 00:12:07,280
that makes sense for your network it can

271
00:12:03,620 --> 00:12:08,900
be right near right near you know you're

272
00:12:07,280 --> 00:12:10,939
pairing points or it can be a little

273
00:12:08,900 --> 00:12:14,600
further down where there's actually like

274
00:12:10,940 --> 00:12:17,870
a bottleneck that you'd like to to get

275
00:12:14,600 --> 00:12:19,850
traffic shared on you know and that that

276
00:12:17,870 --> 00:12:21,650
can be kind of different networks have a

277
00:12:19,850 --> 00:12:24,200
different different places that make

278
00:12:21,650 --> 00:12:26,030
sense for where to deploy this and that

279
00:12:24,200 --> 00:12:27,920
you know any any location that makes

280
00:12:26,030 --> 00:12:29,750
sense for you you should be it should

281
00:12:27,920 --> 00:12:30,800
work essentially the same this like I

282
00:12:29,750 --> 00:12:34,060
said this is supposed to be open

283
00:12:30,800 --> 00:12:36,829
standards not provider specific and just

284
00:12:34,060 --> 00:12:39,920
make make the whole thing work

285
00:12:36,830 --> 00:12:42,380
automatically and what happens is that

286
00:12:39,920 --> 00:12:45,229
we we're planning at least for the

287
00:12:42,380 --> 00:12:46,420
traffic we're delivering for you know

288
00:12:45,230 --> 00:12:49,040
the foreseeable future

289
00:12:46,420 --> 00:12:51,439
all the traffic is going to be available

290
00:12:49,040 --> 00:12:53,060
over unicast and using unicast whenever

291
00:12:51,440 --> 00:12:54,170
multicast is not available because we

292
00:12:53,060 --> 00:12:55,520
think we're going to have to operate in

293
00:12:54,170 --> 00:12:57,729
networks where multicast is not

294
00:12:55,520 --> 00:13:00,350
available for you know some time to come

295
00:12:57,730 --> 00:13:07,490
so anywhere that unicast is being used

296
00:13:00,350 --> 00:13:10,340
then the the receivers when we notice

297
00:13:07,490 --> 00:13:12,200
that the traffic is popular enough then

298
00:13:10,340 --> 00:13:13,850
we start sending headers to the

299
00:13:12,200 --> 00:13:15,440
receivers to tell them hey by the way

300
00:13:13,850 --> 00:13:16,160
there's some multicast available here

301
00:13:15,440 --> 00:13:19,550
too

302
00:13:16,160 --> 00:13:23,509
and the receivers will just go ahead and

303
00:13:19,550 --> 00:13:25,008
try to do that do the join that our

304
00:13:23,509 --> 00:13:26,959
architectural eyes on source-specific

305
00:13:25,009 --> 00:13:30,440
multicast so it's going to be an SSM

306
00:13:26,959 --> 00:13:34,849
join using a GMP b3 or MLD 2 if you're

307
00:13:30,440 --> 00:13:39,589
using IP 6 and and after doing that

308
00:13:34,850 --> 00:13:43,600
SSM join from inside devices in the in

309
00:13:39,589 --> 00:13:48,649
the consumers home like like browsers or

310
00:13:43,600 --> 00:13:51,920
you know the or the set-top TV boxes or

311
00:13:48,649 --> 00:13:53,089
the Smart TVs then that join propagates

312
00:13:51,920 --> 00:13:55,128
through the network you get to decide

313
00:13:53,089 --> 00:13:58,430
you know are you going to allow this or

314
00:13:55,129 --> 00:13:59,810
not and we published a bunch of metadata

315
00:13:58,430 --> 00:14:02,628
so this is part of the specs that were

316
00:13:59,810 --> 00:14:04,069
that we're building out now we published

317
00:14:02,629 --> 00:14:06,199
some metadata to make it a bit to make

318
00:14:04,069 --> 00:14:09,439
information available to you about what

319
00:14:06,199 --> 00:14:11,329
is going to be inside that that stream

320
00:14:09,439 --> 00:14:13,099
that you're going to be deciding whether

321
00:14:11,329 --> 00:14:14,388
to allow through your network or not how

322
00:14:13,100 --> 00:14:19,220
much bandwidth is it going to be in

323
00:14:14,389 --> 00:14:20,660
particular and this is these respects

324
00:14:19,220 --> 00:14:22,790
that are under development and can be

325
00:14:20,660 --> 00:14:26,029
extended at this point so this is a good

326
00:14:22,790 --> 00:14:27,529
time to you know to articulate what has

327
00:14:26,029 --> 00:14:28,610
to be there for this to work for you

328
00:14:27,529 --> 00:14:32,959
right

329
00:14:28,610 --> 00:14:34,339
but the metadata that exposes how much

330
00:14:32,959 --> 00:14:37,250
bandwidth is going to be used by the

331
00:14:34,339 --> 00:14:38,839
stream is can be used as part of the

332
00:14:37,250 --> 00:14:40,250
decision for whether to allow the stream

333
00:14:38,839 --> 00:14:43,160
in to make sure you're not getting over

334
00:14:40,250 --> 00:14:45,470
subscribed you can couple that with like

335
00:14:43,160 --> 00:14:47,660
how many users are trying to join it

336
00:14:45,470 --> 00:14:49,339
right now and make an intelligent

337
00:14:47,660 --> 00:14:51,620
decision for your network as to whether

338
00:14:49,339 --> 00:14:57,170
this multicast traffic should should be

339
00:14:51,620 --> 00:14:59,600
propagated through this network other

340
00:14:57,170 --> 00:15:02,449
providers can use the same kinds of

341
00:14:59,600 --> 00:15:03,980
techniques you know will be we're

342
00:15:02,449 --> 00:15:06,769
focusing on the traffic that we want to

343
00:15:03,980 --> 00:15:10,639
run but the architecture is intended to

344
00:15:06,769 --> 00:15:13,730
support whoever wants to set up the same

345
00:15:10,639 --> 00:15:16,970
kinds of metadata publishing the system

346
00:15:13,730 --> 00:15:20,329
that we expect out in this work that

347
00:15:16,970 --> 00:15:22,790
we're doing so as the signal propagates

348
00:15:20,329 --> 00:15:24,709
back to the ingest point wherever it's

349
00:15:22,790 --> 00:15:27,019
located in your network the ingest can

350
00:15:24,709 --> 00:15:28,619
automatically discover the the right

351
00:15:27,019 --> 00:15:30,870
place to connect

352
00:15:28,620 --> 00:15:33,060
a unicast tunnel and then pull that

353
00:15:30,870 --> 00:15:35,100
multicast traffic into the network and

354
00:15:33,060 --> 00:15:37,199
then from there as forward it is native

355
00:15:35,100 --> 00:15:38,460
multicast traffic within the network as

356
00:15:37,200 --> 00:15:40,770
long as the users start getting that

357
00:15:38,460 --> 00:15:43,710
traffic then they'll stop using the

358
00:15:40,770 --> 00:15:46,290
unicast to perform the download and will

359
00:15:43,710 --> 00:15:48,150
favor the multicast instead all right so

360
00:15:46,290 --> 00:15:50,069
that's the basic outline of the idea and

361
00:15:48,150 --> 00:15:52,680
this can be used for many different use

362
00:15:50,070 --> 00:15:55,050
cases not only the download and the live

363
00:15:52,680 --> 00:15:58,199
video but also future use cases such as

364
00:15:55,050 --> 00:16:00,089
VR that may not get the flash down or

365
00:15:58,200 --> 00:16:02,550
you know we're not sure if other use

366
00:16:00,090 --> 00:16:04,440
cases will come up I think once this is

367
00:16:02,550 --> 00:16:07,290
available assuming it it becomes

368
00:16:04,440 --> 00:16:09,690
available then people will find all

369
00:16:07,290 --> 00:16:11,010
kinds of good reasons to use it but but

370
00:16:09,690 --> 00:16:14,600
we have certainly a few things that we

371
00:16:11,010 --> 00:16:17,430
want to do with it that we know upfront

372
00:16:14,600 --> 00:16:19,020
so thanks to John for pointing out this

373
00:16:17,430 --> 00:16:23,670
is a really useful information for

374
00:16:19,020 --> 00:16:25,740
network operators this is this is the

375
00:16:23,670 --> 00:16:28,430
net the network changes that we think

376
00:16:25,740 --> 00:16:31,020
need to happen to make this possible so

377
00:16:28,430 --> 00:16:36,390
at the ingest points you need to deploy

378
00:16:31,020 --> 00:16:37,949
an empty gateway and the the discovery

379
00:16:36,390 --> 00:16:40,980
that lets you automatically discover

380
00:16:37,950 --> 00:16:44,640
where the right amt connection you

381
00:16:40,980 --> 00:16:46,410
should open up you know where that AMT

382
00:16:44,640 --> 00:16:48,449
connects to to open up the connection to

383
00:16:46,410 --> 00:16:53,069
access the traffic that you're trying to

384
00:16:48,450 --> 00:16:56,490
join at the at the choke points in your

385
00:16:53,070 --> 00:16:59,340
network there's these are the these are

386
00:16:56,490 --> 00:17:01,710
some of the drafts that that are there

387
00:16:59,340 --> 00:17:03,870
this is how the metadata gets published

388
00:17:01,710 --> 00:17:08,280
and what is inside the metadata to

389
00:17:03,870 --> 00:17:10,950
expose the bitrate that the the traffic

390
00:17:08,280 --> 00:17:12,270
will be consuming and that would plug

391
00:17:10,950 --> 00:17:14,010
into whatever kind of bandwidth

392
00:17:12,270 --> 00:17:16,680
provisioning and safety mechanisms

393
00:17:14,010 --> 00:17:18,210
you've gotten inside your network and

394
00:17:16,680 --> 00:17:19,620
this is this is the part that would be

395
00:17:18,210 --> 00:17:23,610
fleshed out during trials what we'd like

396
00:17:19,619 --> 00:17:25,199
to do that's a big part of it obviously

397
00:17:23,609 --> 00:17:27,329
within the network you're going to have

398
00:17:25,200 --> 00:17:29,160
to you know get those packets delivered

399
00:17:27,329 --> 00:17:31,740
to the end-users and that would be you

400
00:17:29,160 --> 00:17:34,470
know however you do your delivery we we

401
00:17:31,740 --> 00:17:36,030
recommend that we have some

402
00:17:34,470 --> 00:17:37,470
recommendations in our architecture deck

403
00:17:36,030 --> 00:17:40,590
and we can walk through that if you're

404
00:17:37,470 --> 00:17:42,480
interested in following up further and

405
00:17:40,590 --> 00:17:44,070
then the other big piece is the CP

406
00:17:42,480 --> 00:17:46,830
and this might be the heaviest lift

407
00:17:44,070 --> 00:17:50,250
depending kind of where you where you

408
00:17:46,830 --> 00:17:52,470
are on this kind of a system like in

409
00:17:50,250 --> 00:17:53,970
Europe right now you you know when I

410
00:17:52,470 --> 00:17:57,270
went and bought some of the

411
00:17:53,970 --> 00:17:59,190
off-the-shelf home Wi-Fi routers and by

412
00:17:57,270 --> 00:18:02,668
CFE here I mostly mean the home Wi-Fi

413
00:17:59,190 --> 00:18:03,540
routers they had both of these pieces

414
00:18:02,669 --> 00:18:06,179
already there

415
00:18:03,540 --> 00:18:08,399
like the IGMP if you do a join from

416
00:18:06,179 --> 00:18:09,900
inside that Wi-Fi router that router

417
00:18:08,400 --> 00:18:11,790
would just propagate it right on through

418
00:18:09,900 --> 00:18:14,090
and you can handle it as the network

419
00:18:11,790 --> 00:18:16,649
that's upstream of that and and

420
00:18:14,090 --> 00:18:19,709
propagate the joint or not according to

421
00:18:16,650 --> 00:18:22,380
what your network logic is and then also

422
00:18:19,710 --> 00:18:25,200
the multicast unicast conversion is

423
00:18:22,380 --> 00:18:28,970
another piece of this it's important for

424
00:18:25,200 --> 00:18:31,950
the Wi-Fi connected devices and that's

425
00:18:28,970 --> 00:18:34,500
that is there's not a standard about

426
00:18:31,950 --> 00:18:36,480
this but it's interestingly part of a

427
00:18:34,500 --> 00:18:38,940
default part of the Linux kernel and

428
00:18:36,480 --> 00:18:42,360
available by default in at least the

429
00:18:38,940 --> 00:18:43,470
open wrt based systems and and we think

430
00:18:42,360 --> 00:18:46,469
a bunch of the other ones although it's

431
00:18:43,470 --> 00:18:49,679
hard to be exactly sure but the point is

432
00:18:46,470 --> 00:18:52,410
that when and what it does is it makes

433
00:18:49,679 --> 00:18:55,530
it so that the at the Wi-Fi layer is

434
00:18:52,410 --> 00:18:58,410
going to be sending unicast packets to

435
00:18:55,530 --> 00:19:03,440
the end devices because of the troubles

436
00:18:58,410 --> 00:19:07,440
with Wi-Fi multi casting so the point of

437
00:19:03,440 --> 00:19:09,630
highlighting the CPE parts is that if

438
00:19:07,440 --> 00:19:10,650
that is the heavy lift for your network

439
00:19:09,630 --> 00:19:13,169
and it's something you might want to

440
00:19:10,650 --> 00:19:15,960
start looking into now like the pieces

441
00:19:13,169 --> 00:19:19,200
are available but you may need to apply

442
00:19:15,960 --> 00:19:23,150
the appropriate sort of incentives to

443
00:19:19,200 --> 00:19:26,760
the vendors as as you might be able to

444
00:19:23,150 --> 00:19:29,070
to you know make sure that that that

445
00:19:26,760 --> 00:19:31,290
feature is there for the routers that

446
00:19:29,070 --> 00:19:34,350
you're approving for you know going

447
00:19:31,290 --> 00:19:36,870
forward in the future for use in your

448
00:19:34,350 --> 00:19:38,699
network and and maybe the ones and the

449
00:19:36,870 --> 00:19:40,949
ones that you're providing to people who

450
00:19:38,700 --> 00:19:43,799
do the upgrades if you're if you're

451
00:19:40,950 --> 00:19:45,780
managing their upgrades so that might be

452
00:19:43,799 --> 00:19:48,129
a disqualifier for some networks and I

453
00:19:45,780 --> 00:19:49,720
want to make sure to

454
00:19:48,130 --> 00:19:52,450
or it might make it you know excessively

455
00:19:49,720 --> 00:19:54,640
hard for some networks and we we know

456
00:19:52,450 --> 00:19:55,840
that and that's you know why we want to

457
00:19:54,640 --> 00:19:58,000
point it out to you and make sure we're

458
00:19:55,840 --> 00:20:00,220
not wasting your time but but if you

459
00:19:58,000 --> 00:20:01,510
think you can address this then it we

460
00:20:00,220 --> 00:20:05,530
think that there might be some value in

461
00:20:01,510 --> 00:20:07,240
doing so as you go forward there's also

462
00:20:05,530 --> 00:20:08,740
some changes we'll have to put up to

463
00:20:07,240 --> 00:20:11,620
make this all all work and we're

464
00:20:08,740 --> 00:20:14,110
planning to do all this you know the big

465
00:20:11,620 --> 00:20:16,360
one is getting the SDK delivered and

466
00:20:14,110 --> 00:20:18,100
I'll go into a little bit more of our

467
00:20:16,360 --> 00:20:20,800
plans there obviously the browser is a

468
00:20:18,100 --> 00:20:22,780
is a big part of that but you know

469
00:20:20,800 --> 00:20:26,080
something on the receive side needs to

470
00:20:22,780 --> 00:20:27,850
be able to receive that traffic and turn

471
00:20:26,080 --> 00:20:29,290
it into the thing that's actually being

472
00:20:27,850 --> 00:20:31,659
delivered whether that's a software

473
00:20:29,290 --> 00:20:33,820
download or playing the video feed and

474
00:20:31,660 --> 00:20:35,770
they have to understand the contents of

475
00:20:33,820 --> 00:20:38,710
that UDP traffic but part of the point

476
00:20:35,770 --> 00:20:40,840
of this kind of architecture is to make

477
00:20:38,710 --> 00:20:46,630
that not be your problem as the network

478
00:20:40,840 --> 00:20:49,000
right as compared to to you know like

479
00:20:46,630 --> 00:20:53,170
the IPTV systems that you might see used

480
00:20:49,000 --> 00:20:56,260
with the multicast today and we need to

481
00:20:53,170 --> 00:20:57,850
you know publish the information that

482
00:20:56,260 --> 00:21:02,200
you guys would be using to make sure

483
00:20:57,850 --> 00:21:03,879
that the that the that the tunnels can

484
00:21:02,200 --> 00:21:04,990
get set up that you've got access to the

485
00:21:03,880 --> 00:21:06,910
metadata that you need to make

486
00:21:04,990 --> 00:21:09,070
intelligent decisions about whether the

487
00:21:06,910 --> 00:21:13,240
traffic should be forwarded in your

488
00:21:09,070 --> 00:21:15,399
network but we think that that's all we

489
00:21:13,240 --> 00:21:17,530
know of so far that needs to happen for

490
00:21:15,400 --> 00:21:19,390
this to actually work out ok and and we

491
00:21:17,530 --> 00:21:22,870
think we can handle all this this is a

492
00:21:19,390 --> 00:21:23,980
quite tractable from our side and it's

493
00:21:22,870 --> 00:21:25,689
worth highlighting some things that

494
00:21:23,980 --> 00:21:28,120
don't need changing here right we don't

495
00:21:25,690 --> 00:21:30,340
need any like special peering or SLA is

496
00:21:28,120 --> 00:21:33,340
about this the idea is to do this more

497
00:21:30,340 --> 00:21:35,169
like the way that web site traffic is

498
00:21:33,340 --> 00:21:38,020
delivered right your users have asked

499
00:21:35,170 --> 00:21:40,000
for something and the thing that they've

500
00:21:38,020 --> 00:21:42,910
asked for is freely available on the

501
00:21:40,000 --> 00:21:46,420
Internet and you know according to

502
00:21:42,910 --> 00:21:49,030
whatever they've signed up for and you

503
00:21:46,420 --> 00:21:52,570
know by just passing that through and

504
00:21:49,030 --> 00:21:54,780
getting the packets to them if you if

505
00:21:52,570 --> 00:21:56,950
you can hook up this multicast capable

506
00:21:54,780 --> 00:21:58,620
scenario then you can really save a lot

507
00:21:56,950 --> 00:22:01,630
of the traffic that has to be delivered

508
00:21:58,620 --> 00:22:03,699
and it can be a really

509
00:22:01,630 --> 00:22:05,170
Yuval win-win for everybody and make

510
00:22:03,700 --> 00:22:09,160
your users happier make our users

511
00:22:05,170 --> 00:22:11,530
happier and this is all provider neutral

512
00:22:09,160 --> 00:22:13,210
so that you know if it meets with

513
00:22:11,530 --> 00:22:15,460
success then other people can start

514
00:22:13,210 --> 00:22:17,770
using it too and more offload can happen

515
00:22:15,460 --> 00:22:20,320
that way all the tunnels get auto

516
00:22:17,770 --> 00:22:22,330
established and and work that which i'll

517
00:22:20,320 --> 00:22:24,189
point you to the specs on how that works

518
00:22:22,330 --> 00:22:28,720
and I can walk you through it if you if

519
00:22:24,190 --> 00:22:31,620
you choose to dig in on this further and

520
00:22:28,720 --> 00:22:33,550
the other thing is that that there's no

521
00:22:31,620 --> 00:22:36,780
encoding that's happening within the

522
00:22:33,550 --> 00:22:39,909
network so by contrast with the IPTV

523
00:22:36,780 --> 00:22:41,950
you know multicast based TV systems or

524
00:22:39,910 --> 00:22:43,780
something where what you do is you

525
00:22:41,950 --> 00:22:45,900
ingest video and then you take that

526
00:22:43,780 --> 00:22:48,910
video and you turn it in your own

527
00:22:45,900 --> 00:22:50,800
vendors way into like the packets that

528
00:22:48,910 --> 00:22:52,210
get forwarded on the network and you

529
00:22:50,800 --> 00:22:54,270
forward those packets down through the

530
00:22:52,210 --> 00:22:56,440
network and now you you have to have a

531
00:22:54,270 --> 00:22:59,200
thing that you're maintaining that's

532
00:22:56,440 --> 00:23:00,970
that's sitting somewhere that receives

533
00:22:59,200 --> 00:23:03,340
those packets and turns it into actually

534
00:23:00,970 --> 00:23:05,260
video right and that has to be either on

535
00:23:03,340 --> 00:23:07,000
your set-top box but like do you want to

536
00:23:05,260 --> 00:23:08,860
put it on all the Smart TVs and do you

537
00:23:07,000 --> 00:23:11,980
want to put it on your phones like maybe

538
00:23:08,860 --> 00:23:13,860
you do and that's that's fine but the

539
00:23:11,980 --> 00:23:16,780
same kind of architecture can be used to

540
00:23:13,860 --> 00:23:18,280
to deliver that as to deliver some of

541
00:23:16,780 --> 00:23:21,730
these other kinds of use cases that we'd

542
00:23:18,280 --> 00:23:24,970
like to to achieve and other video

543
00:23:21,730 --> 00:23:26,560
that's not necessarily sourced directly

544
00:23:24,970 --> 00:23:28,450
from the content owner into the network

545
00:23:26,560 --> 00:23:34,120
like with the with the triple play a

546
00:23:28,450 --> 00:23:36,010
solutions you know so and it allows you

547
00:23:34,120 --> 00:23:37,810
to treat all the different use cases as

548
00:23:36,010 --> 00:23:41,350
the same kind of thing where it's just

549
00:23:37,810 --> 00:23:42,820
you know UDP traffic that you don't know

550
00:23:41,350 --> 00:23:44,980
you don't have to worry about exactly

551
00:23:42,820 --> 00:23:46,360
what's inside there you just like as

552
00:23:44,980 --> 00:23:46,810
long as it gets shipped to the right

553
00:23:46,360 --> 00:23:48,850
place

554
00:23:46,810 --> 00:23:50,669
then that's somebody else's problem as

555
00:23:48,850 --> 00:23:53,409
to whether it can be decoded properly

556
00:23:50,670 --> 00:23:56,950
it's you know UDP multicast just

557
00:23:53,410 --> 00:23:59,200
delivered all the way through the

558
00:23:56,950 --> 00:24:02,860
receiver join logic in this scenario is

559
00:23:59,200 --> 00:24:05,740
that you know like I said it'll be will

560
00:24:02,860 --> 00:24:07,179
be monitoring as a CDN for the traffic

561
00:24:05,740 --> 00:24:10,540
that we're delivering

562
00:24:07,180 --> 00:24:12,730
whether this will be whether this is

563
00:24:10,540 --> 00:24:15,430
sort of sufficiently popular to justify

564
00:24:12,730 --> 00:24:18,790
creating a multicast source for it and

565
00:24:15,430 --> 00:24:20,770
if it if it is then we will start off

566
00:24:18,790 --> 00:24:22,120
our source will populate all the things

567
00:24:20,770 --> 00:24:24,690
that need to be there to make the

568
00:24:22,120 --> 00:24:28,659
connection successful according to this

569
00:24:24,690 --> 00:24:29,800
delivery architecture and then the the

570
00:24:28,660 --> 00:24:33,820
headers will start coming to the

571
00:24:29,800 --> 00:24:35,620
receiver to tell it that there's there's

572
00:24:33,820 --> 00:24:37,389
multicast traffic that you can use to

573
00:24:35,620 --> 00:24:39,820
get this instead they'll join those

574
00:24:37,390 --> 00:24:43,210
flows and if it does start getting the

575
00:24:39,820 --> 00:24:46,090
multicast traffic after that then then

576
00:24:43,210 --> 00:24:48,990
it will stop using the unicast this

577
00:24:46,090 --> 00:24:51,209
requires putting out an SDK of some sort

578
00:24:48,990 --> 00:24:53,890
something on the receive side at least

579
00:24:51,210 --> 00:24:56,640
so for the trials that we're talking

580
00:24:53,890 --> 00:25:00,190
about we would be and perhaps some

581
00:24:56,640 --> 00:25:02,140
especially early side deployments we

582
00:25:00,190 --> 00:25:04,150
would be doing this with an SDK that we

583
00:25:02,140 --> 00:25:06,130
built into the content owners app or

584
00:25:04,150 --> 00:25:08,080
perhaps and have distributed by us if

585
00:25:06,130 --> 00:25:12,730
that turns out to be the better way to

586
00:25:08,080 --> 00:25:14,639
do it and it would be interoperable with

587
00:25:12,730 --> 00:25:16,900
the traffic that we would be generating

588
00:25:14,640 --> 00:25:19,060
we think we need to do this because

589
00:25:16,900 --> 00:25:21,160
there's not like there's like a

590
00:25:19,060 --> 00:25:23,830
different protocols that people use for

591
00:25:21,160 --> 00:25:25,480
delivering the traffic you know broad

592
00:25:23,830 --> 00:25:30,460
peak has a proprietary one we have a

593
00:25:25,480 --> 00:25:32,110
proprietary one there's a you know a few

594
00:25:30,460 --> 00:25:36,550
other competitor I think ramp was

595
00:25:32,110 --> 00:25:39,219
mentioned there's a you know the MPEG

596
00:25:36,550 --> 00:25:42,940
encoded TS and a few different versions

597
00:25:39,220 --> 00:25:46,240
of flute and norm that are used by some

598
00:25:42,940 --> 00:25:47,710
DDB systems so there's there's several

599
00:25:46,240 --> 00:25:49,560
different systems they're in active use

600
00:25:47,710 --> 00:25:52,000
today and we don't think there's enough

601
00:25:49,560 --> 00:25:52,210
cohesion to just pick one and run with

602
00:25:52,000 --> 00:25:55,510
it

603
00:25:52,210 --> 00:25:58,030
so we're trying to make this we're

604
00:25:55,510 --> 00:25:59,980
plugging in at the generic UDP level and

605
00:25:58,030 --> 00:26:01,720
what that means is that there has to be

606
00:25:59,980 --> 00:26:04,390
something that receives that traffic and

607
00:26:01,720 --> 00:26:07,060
interprets it properly and that's where

608
00:26:04,390 --> 00:26:09,940
the SDK comes in and the the

609
00:26:07,060 --> 00:26:13,510
browser-based API is the next step of

610
00:26:09,940 --> 00:26:16,150
that where the browser would would if

611
00:26:13,510 --> 00:26:20,430
we're successful in that rollout would

612
00:26:16,150 --> 00:26:24,260
gain a w3c standardized API

613
00:26:20,430 --> 00:26:27,600
can receive authenticated multicast

614
00:26:24,260 --> 00:26:29,940
payloads that that arrived by native

615
00:26:27,600 --> 00:26:32,399
multicast to the to the browser and

616
00:26:29,940 --> 00:26:34,650
deliver that into a JavaScript based

617
00:26:32,400 --> 00:26:36,240
program or a web assembly based program

618
00:26:34,650 --> 00:26:38,970
and then the web assembly can be

619
00:26:36,240 --> 00:26:40,590
delivered on an ordinary web page so

620
00:26:38,970 --> 00:26:41,610
that's the way we're we're trying to

621
00:26:40,590 --> 00:26:43,439
roll that out and we think that

622
00:26:41,610 --> 00:26:45,270
eventually you might be able to get some

623
00:26:43,440 --> 00:26:46,830
efficiency gains by standardizing the

624
00:26:45,270 --> 00:26:50,070
actual transports that are used and

625
00:26:46,830 --> 00:26:52,020
putting that into the you know deeper

626
00:26:50,070 --> 00:26:54,000
into the browser and and integrating at

627
00:26:52,020 --> 00:26:55,710
a lower level then at the web assembly

628
00:26:54,000 --> 00:26:57,300
we're not sure if it'll be necessary or

629
00:26:55,710 --> 00:27:00,780
not but that's kind of the longer-term

630
00:26:57,300 --> 00:27:02,700
way this might this might fall out as we

631
00:27:00,780 --> 00:27:04,920
get some cohesion in the various

632
00:27:02,700 --> 00:27:06,570
standards but we also think that that it

633
00:27:04,920 --> 00:27:08,130
can work for quite a long time with just

634
00:27:06,570 --> 00:27:11,220
doing web assembly and handling whatever

635
00:27:08,130 --> 00:27:15,150
kind of traffic both the sender and the

636
00:27:11,220 --> 00:27:18,540
receiver can can agree on the way the

637
00:27:15,150 --> 00:27:22,650
ingest works is spelled out in in these

638
00:27:18,540 --> 00:27:26,399
two specs the the AMT establishes a

639
00:27:22,650 --> 00:27:29,700
unicast udp-based multicast udp-based

640
00:27:26,400 --> 00:27:34,470
tunnel that contains native multicast

641
00:27:29,700 --> 00:27:36,560
traffic so you know you you receive this

642
00:27:34,470 --> 00:27:38,460
join as you're propagating the join

643
00:27:36,560 --> 00:27:44,820
backwards in the network along the

644
00:27:38,460 --> 00:27:50,280
reverse path and and the multicast

645
00:27:44,820 --> 00:27:52,439
routing table would direct that into the

646
00:27:50,280 --> 00:27:54,420
into the ingest router if it's traffic

647
00:27:52,440 --> 00:27:56,220
from outside of your network so that's

648
00:27:54,420 --> 00:27:58,110
the part that you would set up and then

649
00:27:56,220 --> 00:28:00,420
that ingest router would take care are

650
00:27:58,110 --> 00:28:01,889
the the set of ingest routers perhaps if

651
00:28:00,420 --> 00:28:04,460
you want to shard it according to the

652
00:28:01,890 --> 00:28:04,460
different sources

653
00:28:04,700 --> 00:28:09,710
and what that multi-cat what that ingest

654
00:28:06,620 --> 00:28:13,429
router would do is is discover the right

655
00:28:09,710 --> 00:28:14,900
tunnel to connect to open that tunnel

656
00:28:13,430 --> 00:28:17,060
send the join through the tunnel and

657
00:28:14,900 --> 00:28:17,810
then it starts receiving this this UT

658
00:28:17,060 --> 00:28:20,570
this

659
00:28:17,810 --> 00:28:22,550
unicast encapsulated traffic that is

660
00:28:20,570 --> 00:28:24,919
native multicast and then it forwards it

661
00:28:22,550 --> 00:28:28,669
from there within the network as native

662
00:28:24,920 --> 00:28:31,490
multicast UDP traffic and and Dryad is a

663
00:28:28,670 --> 00:28:33,500
piece of the that that's our sort of

664
00:28:31,490 --> 00:28:38,060
first step along this architecture path

665
00:28:33,500 --> 00:28:41,240
that was recently finalized as an RFC

666
00:28:38,060 --> 00:28:43,100
and is published now and what this buys

667
00:28:41,240 --> 00:28:44,570
you is this is this is the part that

668
00:28:43,100 --> 00:28:46,040
means that you don't have any explicit

669
00:28:44,570 --> 00:28:49,370
peering but you can do a provider

670
00:28:46,040 --> 00:28:54,560
neutral ingested of arbitrary UDP

671
00:28:49,370 --> 00:29:00,350
traffic here and and it also means that

672
00:28:54,560 --> 00:29:02,810
the location both for the AMT relay and

673
00:29:00,350 --> 00:29:05,919
for the MT gateway that does the ingest

674
00:29:02,810 --> 00:29:08,120
can be flexible according to a you know

675
00:29:05,920 --> 00:29:10,610
where makes sense within your network

676
00:29:08,120 --> 00:29:13,850
and where it makes sense for the

677
00:29:10,610 --> 00:29:16,659
provider of the traffic to to run those

678
00:29:13,850 --> 00:29:16,659
those tunnels

679
00:29:18,160 --> 00:29:23,950
now maybe this all sounds kind of

680
00:29:20,050 --> 00:29:26,139
pie-in-the-sky and maybe it is but we we

681
00:29:23,950 --> 00:29:28,650
do think we do recognize that there are

682
00:29:26,140 --> 00:29:31,300
challenges in making sure you don't get

683
00:29:28,650 --> 00:29:34,210
over-provisioned and we've tried and

684
00:29:31,300 --> 00:29:37,149
that the traffic delivery needs all the

685
00:29:34,210 --> 00:29:38,980
right safety standards and this is what

686
00:29:37,150 --> 00:29:40,930
we've tried to outline in in these

687
00:29:38,980 --> 00:29:42,280
documents so far and this is where we're

688
00:29:40,930 --> 00:29:43,660
really looking for feedback as to

689
00:29:42,280 --> 00:29:45,399
whether this is enough whether this

690
00:29:43,660 --> 00:29:46,690
works well there's other pieces that we

691
00:29:45,400 --> 00:29:49,060
really need to address so that we can

692
00:29:46,690 --> 00:29:51,280
get on that and make sure that this this

693
00:29:49,060 --> 00:29:52,690
rolls out successfully I mean there's no

694
00:29:51,280 --> 00:29:55,210
point in writing these specs if it

695
00:29:52,690 --> 00:29:58,000
doesn't get deployed so and we will walk

696
00:29:55,210 --> 00:29:59,770
away if really nobody is interested at

697
00:29:58,000 --> 00:30:02,890
all in this but we think that this can

698
00:29:59,770 --> 00:30:05,530
really provide a major win for everybody

699
00:30:02,890 --> 00:30:09,730
who engages with it so um so we're

700
00:30:05,530 --> 00:30:14,139
trying to make it happen so these are

701
00:30:09,730 --> 00:30:16,000
the specs the the dorm spec is how how

702
00:30:14,140 --> 00:30:18,400
the metadata is discovered it's adopted

703
00:30:16,000 --> 00:30:21,460
by M Bundy is and and it's a work in

704
00:30:18,400 --> 00:30:24,970
progress now targeted to become a

705
00:30:21,460 --> 00:30:27,160
proposed standard RFC you know when we

706
00:30:24,970 --> 00:30:30,460
when we are done and ready to nail it

707
00:30:27,160 --> 00:30:33,040
down and what this does is this is the

708
00:30:30,460 --> 00:30:36,400
generic way to discover the metadata

709
00:30:33,040 --> 00:30:38,440
this actually defines a yang model the

710
00:30:36,400 --> 00:30:40,660
the runs in a rest comp server and

711
00:30:38,440 --> 00:30:43,120
that's the API that we're using to

712
00:30:40,660 --> 00:30:45,010
publish a standardized set of metadata

713
00:30:43,120 --> 00:30:49,959
and lay out exactly what's going to be

714
00:30:45,010 --> 00:30:51,610
inside there and then Seebeck is a

715
00:30:49,960 --> 00:30:53,260
circuit breaker assisted congestion

716
00:30:51,610 --> 00:30:56,709
control and what that does is to find

717
00:30:53,260 --> 00:30:58,240
the circuit breaker behavior to do if

718
00:30:56,710 --> 00:30:59,890
you realize that you've been

719
00:30:58,240 --> 00:31:01,510
oversubscribed that your network has

720
00:30:59,890 --> 00:31:04,660
become oversubscribed or is

721
00:31:01,510 --> 00:31:07,000
prospectively oversubscribed to cut it

722
00:31:04,660 --> 00:31:08,920
off and make sure that that the traffic

723
00:31:07,000 --> 00:31:10,360
you're forwarding fits within the amount

724
00:31:08,920 --> 00:31:15,310
of bandwidth provisioning that you want

725
00:31:10,360 --> 00:31:17,350
to dedicate to multicast traffic so

726
00:31:15,310 --> 00:31:20,649
that's the and that's an extension to

727
00:31:17,350 --> 00:31:23,939
the metadata defined in dorms so it adds

728
00:31:20,650 --> 00:31:27,550
into that into the tree the dorms

729
00:31:23,940 --> 00:31:30,070
defines the yang tree the dorms defines

730
00:31:27,550 --> 00:31:32,169
it adds in the bandwidth information and

731
00:31:30,070 --> 00:31:34,810
and perhaps a few other thing

732
00:31:32,170 --> 00:31:37,500
such as MSS to make sure your MT is okay

733
00:31:34,810 --> 00:31:37,500
things like this

734
00:31:37,650 --> 00:31:43,390
there's also we've worked on transport

735
00:31:41,290 --> 00:31:46,510
authentication so this provides per

736
00:31:43,390 --> 00:31:50,220
packet authentication of the UDP data

737
00:31:46,510 --> 00:31:52,750
that we're sending and this is

738
00:31:50,220 --> 00:31:55,210
authenticating the UDP payloads we think

739
00:31:52,750 --> 00:31:56,800
this is a necessary component in the

740
00:31:55,210 --> 00:31:57,880
browser so we're doing it for the

741
00:31:56,800 --> 00:32:00,879
browser usage

742
00:31:57,880 --> 00:32:02,350
regardless you can also use it to detect

743
00:32:00,880 --> 00:32:03,880
loss so even though you don't know the

744
00:32:02,350 --> 00:32:06,939
protocol of what's being transported

745
00:32:03,880 --> 00:32:10,000
inside UDP you can still determine

746
00:32:06,940 --> 00:32:13,020
whether there was lost whether there

747
00:32:10,000 --> 00:32:16,270
were lost packets by plugging into this

748
00:32:13,020 --> 00:32:19,000
specification and you can determine that

749
00:32:16,270 --> 00:32:20,410
the packets that are that you're

750
00:32:19,000 --> 00:32:22,990
receiving to forward through your

751
00:32:20,410 --> 00:32:24,850
network are exactly the packets that

752
00:32:22,990 --> 00:32:26,290
were being sent by the sender so in the

753
00:32:24,850 --> 00:32:27,969
network this is optional the browser is

754
00:32:26,290 --> 00:32:30,090
going to be doing it anyway

755
00:32:27,970 --> 00:32:32,410
but if you wanted to add this kind of a

756
00:32:30,090 --> 00:32:35,020
firewall a behavior to try and protect

757
00:32:32,410 --> 00:32:39,400
your users then this is an option to do

758
00:32:35,020 --> 00:32:41,560
as well and then like what are we

759
00:32:39,400 --> 00:32:43,320
looking for and who do we think can be

760
00:32:41,560 --> 00:32:45,429
involved as as I said this is like

761
00:32:43,320 --> 00:32:49,149
trying to be a standards-based and

762
00:32:45,430 --> 00:32:50,920
repeatable it's it's a open standards

763
00:32:49,150 --> 00:32:54,310
approach so anyone who can make it work

764
00:32:50,920 --> 00:32:56,830
and can get involved in this and you

765
00:32:54,310 --> 00:32:59,320
know we do expect to see if it's

766
00:32:56,830 --> 00:33:01,540
successful competitors of ours join in

767
00:32:59,320 --> 00:33:05,139
and and deliver some of their traffic in

768
00:33:01,540 --> 00:33:07,960
this way too you know if you choose not

769
00:33:05,140 --> 00:33:10,240
to do it well that's fine if traffic

770
00:33:07,960 --> 00:33:13,450
starts getting cheaper that might be

771
00:33:10,240 --> 00:33:16,900
something to consider because like you

772
00:33:13,450 --> 00:33:19,210
know some people do pick it up might

773
00:33:16,900 --> 00:33:21,220
might be able to get some gains out of

774
00:33:19,210 --> 00:33:22,810
out of it and make it easier to deliver

775
00:33:21,220 --> 00:33:25,090
this traffic so that's kind of where we

776
00:33:22,810 --> 00:33:27,700
see this going if we can get any

777
00:33:25,090 --> 00:33:30,040
traction anywhere and so we think it

778
00:33:27,700 --> 00:33:31,870
really does represent a good opportunity

779
00:33:30,040 --> 00:33:33,820
to get into this and start doing stuff

780
00:33:31,870 --> 00:33:36,639
and you also might see content owners

781
00:33:33,820 --> 00:33:39,129
directly running their own sources for

782
00:33:36,640 --> 00:33:41,980
some of this kind of traffic we think

783
00:33:39,130 --> 00:33:44,050
you know we provide a good service but

784
00:33:41,980 --> 00:33:44,360
we we might lose some business to the

785
00:33:44,050 --> 00:33:46,669
kinds

786
00:33:44,360 --> 00:33:48,219
that are gonna tech look technically

787
00:33:46,670 --> 00:33:51,170
savvy enough to bring this up themselves

788
00:33:48,220 --> 00:33:53,780
because it does reduce the amount of

789
00:33:51,170 --> 00:33:56,720
load we do think we've got plenty to do

790
00:33:53,780 --> 00:33:58,460
with our networks or not you know NOC

791
00:33:56,720 --> 00:34:02,150
would hopefully worried about going out

792
00:33:58,460 --> 00:34:04,130
of business over this but but you know

793
00:34:02,150 --> 00:34:07,760
really we have more traffic to deliver

794
00:34:04,130 --> 00:34:11,179
then then is sustainable to keep doing

795
00:34:07,760 --> 00:34:15,070
as unicast honestly so that's kind of

796
00:34:11,179 --> 00:34:19,639
why we're trying to get this to to work

797
00:34:15,070 --> 00:34:21,350
so during trials and and as we move

798
00:34:19,639 --> 00:34:25,850
forward with this we've still got a lot

799
00:34:21,350 --> 00:34:28,449
of work to do to make this reality we've

800
00:34:25,850 --> 00:34:32,560
got an open source system here you can

801
00:34:28,449 --> 00:34:37,118
pull it up and play with it that has a

802
00:34:32,560 --> 00:34:40,190
basic implementation of the AMT ingest

803
00:34:37,119 --> 00:34:46,429
router with the with the Dryad look up

804
00:34:40,190 --> 00:34:48,409
from RFC's 74 50 and 80 777 and then

805
00:34:46,429 --> 00:34:51,830
some further development would be needed

806
00:34:48,409 --> 00:34:54,169
on the on the dorms and Seebeck approach

807
00:34:51,830 --> 00:34:56,239
to make sure that this can actually

808
00:34:54,168 --> 00:34:57,890
integrate with any reasonable bandwidth

809
00:34:56,239 --> 00:34:59,540
controllers that are out there and if we

810
00:34:57,890 --> 00:35:01,040
need to iterate on that then we're

811
00:34:59,540 --> 00:35:02,690
totally willing to get rid of that this

812
00:35:01,040 --> 00:35:04,640
is part of why we're trying to engage

813
00:35:02,690 --> 00:35:05,660
here and make sure we get the make sure

814
00:35:04,640 --> 00:35:08,480
we get this right so it's actually

815
00:35:05,660 --> 00:35:11,299
deploy able and then the browser API of

816
00:35:08,480 --> 00:35:13,820
course is is in progress we've issued

817
00:35:11,300 --> 00:35:16,550
our intent to implement and our intent

818
00:35:13,820 --> 00:35:17,720
to prototype rather and that's going to

819
00:35:16,550 --> 00:35:19,760
be a process and it's going to take a

820
00:35:17,720 --> 00:35:21,910
little while and it's going to rely on

821
00:35:19,760 --> 00:35:24,770
on forward progress on the

822
00:35:21,910 --> 00:35:26,810
specifications that it's built on which

823
00:35:24,770 --> 00:35:29,630
are these same specs that are under

824
00:35:26,810 --> 00:35:31,310
development and ITF but that's something

825
00:35:29,630 --> 00:35:33,880
that's coming down the pipe and we hope

826
00:35:31,310 --> 00:35:37,130
to be done with that within you know

827
00:35:33,880 --> 00:35:39,680
let's say 2 or 3 years and to start

828
00:35:37,130 --> 00:35:41,000
having like once that rolls out then all

829
00:35:39,680 --> 00:35:43,609
of a sudden there will be a bunch of

830
00:35:41,000 --> 00:35:45,590
traffic available that if the four

831
00:35:43,609 --> 00:35:48,259
networks they can deliver it it'll use

832
00:35:45,590 --> 00:35:49,850
multicast by preference for you know as

833
00:35:48,260 --> 00:35:53,000
much traffic as we can start putting on

834
00:35:49,850 --> 00:35:55,130
there in terms of

835
00:35:53,000 --> 00:35:56,990
the the trial that we want to do for

836
00:35:55,130 --> 00:35:58,220
this year for for ourselves and our

837
00:35:56,990 --> 00:36:00,740
partners we want to walk out of that

838
00:35:58,220 --> 00:36:03,740
thing knowing what the actual cost is to

839
00:36:00,740 --> 00:36:05,930
get this fleshed out and done in an

840
00:36:03,740 --> 00:36:09,379
actual deployable setup so we're gonna

841
00:36:05,930 --> 00:36:11,540
you know dummy things up and and

842
00:36:09,380 --> 00:36:13,940
hackathon it to make sure that the proof

843
00:36:11,540 --> 00:36:16,130
of concepts work and make sure that it

844
00:36:13,940 --> 00:36:18,260
kind of does what it needs to discover

845
00:36:16,130 --> 00:36:20,510
and fill any of the holes that we find

846
00:36:18,260 --> 00:36:22,250
along the way and make sure that when

847
00:36:20,510 --> 00:36:24,680
it's all done it's actually going to be

848
00:36:22,250 --> 00:36:26,720
there and and you know get the

849
00:36:24,680 --> 00:36:29,450
information that we need to commit to a

850
00:36:26,720 --> 00:36:32,270
multi-million dollar investment to you

851
00:36:29,450 --> 00:36:33,859
know to actually do the entire job of

852
00:36:32,270 --> 00:36:37,550
the engineering work that that needs to

853
00:36:33,860 --> 00:36:39,620
happen and if it means we need to update

854
00:36:37,550 --> 00:36:42,500
the standards and even develop new ones

855
00:36:39,620 --> 00:36:45,620
we are willing to do that this is it's

856
00:36:42,500 --> 00:36:47,870
that important to us so um you know the

857
00:36:45,620 --> 00:36:49,130
the question for you then on on would

858
00:36:47,870 --> 00:36:51,140
you want to participate in this trial

859
00:36:49,130 --> 00:36:53,690
like especially if you've already got

860
00:36:51,140 --> 00:36:55,730
any kind of multicast IPTV system we

861
00:36:53,690 --> 00:36:58,720
think we can probably work on the same

862
00:36:55,730 --> 00:37:02,810
infrastructure with some with some work

863
00:36:58,720 --> 00:37:05,180
especially if it's already going over

864
00:37:02,810 --> 00:37:08,390
the in-home Network to Wi-Fi devices we

865
00:37:05,180 --> 00:37:09,859
think that that CPE part is for some

866
00:37:08,390 --> 00:37:12,170
networks quite likely to be the heaviest

867
00:37:09,860 --> 00:37:17,000
lifts so if anybody has already done

868
00:37:12,170 --> 00:37:18,530
that is like practically finished and it

869
00:37:17,000 --> 00:37:21,560
all you need to do is the ingest we

870
00:37:18,530 --> 00:37:25,190
think and and we'd love to work with you

871
00:37:21,560 --> 00:37:27,380
and make this super easy and you know

872
00:37:25,190 --> 00:37:30,530
what what we think you get is like if

873
00:37:27,380 --> 00:37:33,080
you can actually stop having quite so

874
00:37:30,530 --> 00:37:35,690
much unicast bandwidth growing at quite

875
00:37:33,080 --> 00:37:37,520
such a rate then maybe you'll be able to

876
00:37:35,690 --> 00:37:40,310
delay a bandwidth upgrade that you would

877
00:37:37,520 --> 00:37:41,840
otherwise need to do and we're very much

878
00:37:40,310 --> 00:37:43,480
looking for feedback at this point in

879
00:37:41,840 --> 00:37:47,660
the process and trying to get the

880
00:37:43,480 --> 00:37:49,720
standards really fleshed out so here's

881
00:37:47,660 --> 00:37:52,730
our contact information that's me and my

882
00:37:49,720 --> 00:37:54,379
my colleague the business director on

883
00:37:52,730 --> 00:37:56,120
the that would be called the disrupt

884
00:37:54,380 --> 00:37:58,910
project we think it's a disruptive

885
00:37:56,120 --> 00:38:01,850
technology and what we want to do is

886
00:37:58,910 --> 00:38:03,830
just start with a one-hour walkthrough

887
00:38:01,850 --> 00:38:05,750
of the architecture give you all the

888
00:38:03,830 --> 00:38:11,029
pieces so you can you read it review

889
00:38:05,750 --> 00:38:12,590
at your leisure and and give you a you

890
00:38:11,030 --> 00:38:14,630
know answer any questions you might have

891
00:38:12,590 --> 00:38:16,100
really dig into the nitty gritty and the

892
00:38:14,630 --> 00:38:19,220
details and see if this makes sense for

893
00:38:16,100 --> 00:38:23,200
you to do and give you the information I

894
00:38:19,220 --> 00:38:25,910
mentioned before about the a s specific

895
00:38:23,200 --> 00:38:27,470
traffic mix that you see in how much of

896
00:38:25,910 --> 00:38:28,879
what we're doing today would be

897
00:38:27,470 --> 00:38:31,100
offloaded well if this kind of an

898
00:38:28,880 --> 00:38:32,540
architecture were available so you can

899
00:38:31,100 --> 00:38:33,770
make an informed decision about whether

900
00:38:32,540 --> 00:38:35,060
this makes sense for you we don't want

901
00:38:33,770 --> 00:38:37,850
to waste your time we don't want you

902
00:38:35,060 --> 00:38:39,560
waste our time if if if you're not

903
00:38:37,850 --> 00:38:41,660
getting a lot of traffic then we don't

904
00:38:39,560 --> 00:38:44,330
really care if you deploy this or not

905
00:38:41,660 --> 00:38:46,100
right but if you are getting a lot of

906
00:38:44,330 --> 00:38:48,680
traffic then we kind of do and we'd love

907
00:38:46,100 --> 00:38:50,839
to have this work so and after that we

908
00:38:48,680 --> 00:38:52,879
would just follow up as as needed so

909
00:38:50,840 --> 00:38:55,070
that's kind of what we'd like to achieve

910
00:38:52,880 --> 00:38:56,620
and I hope to hear back from you and

911
00:38:55,070 --> 00:38:59,620
I'll take any questions you got now

912
00:38:56,620 --> 00:38:59,620
Thanks

913
00:39:01,339 --> 00:39:03,400
you

914
00:39:05,560 --> 00:39:13,000
Oh Jake thank you very much that was

915
00:39:10,060 --> 00:39:16,240
very very interesting and yes I did

916
00:39:13,000 --> 00:39:20,170
watch the preview of it so great stuff

917
00:39:16,240 --> 00:39:21,810
multicast is on its way again I hope we

918
00:39:20,170 --> 00:39:25,780
do have some questioners

919
00:39:21,810 --> 00:39:28,900
first question we have comes from Kevin

920
00:39:25,780 --> 00:39:30,850
Perry what protections could be put in

921
00:39:28,900 --> 00:39:38,530
place to prevent this from getting used

922
00:39:30,850 --> 00:39:40,960
for DDoS attacks the the feedback spec

923
00:39:38,530 --> 00:39:44,680
if you check that out there was a link

924
00:39:40,960 --> 00:39:47,500
to that from the first place first early

925
00:39:44,680 --> 00:39:49,120
early in the side deck that is circuit

926
00:39:47,500 --> 00:39:51,370
breaker assisted congestion control and

927
00:39:49,120 --> 00:39:57,819
it's intended to address that sort of

928
00:39:51,370 --> 00:40:00,460
classes of issues in general the idea is

929
00:39:57,820 --> 00:40:02,440
that you've got some network protections

930
00:40:00,460 --> 00:40:05,350
to prevent you from getting

931
00:40:02,440 --> 00:40:08,110
oversubscribed this requires some some

932
00:40:05,350 --> 00:40:12,279
amount of implementation and integration

933
00:40:08,110 --> 00:40:14,200
with your with whatever you can you

934
00:40:12,280 --> 00:40:19,500
would use for bandwidth provisioning to

935
00:40:14,200 --> 00:40:22,029
to assign multicast bandwidth space but

936
00:40:19,500 --> 00:40:23,290
and and this is a key part of what we'd

937
00:40:22,030 --> 00:40:26,500
like to develop during the trials would

938
00:40:23,290 --> 00:40:28,600
like to to run this year and hopefully

939
00:40:26,500 --> 00:40:30,730
we'll get like good vendor support going

940
00:40:28,600 --> 00:40:32,410
forward we think that that's a critical

941
00:40:30,730 --> 00:40:37,810
piece of getting this whole thing to

942
00:40:32,410 --> 00:40:38,890
work and we're in general the idea is

943
00:40:37,810 --> 00:40:43,230
that it prevents you from over

944
00:40:38,890 --> 00:40:46,350
subscribing and if you can get the

945
00:40:43,230 --> 00:40:49,810
there's a an experimental PIM extension

946
00:40:46,350 --> 00:40:53,589
in I think it's our se 6807 is

947
00:40:49,810 --> 00:40:56,470
referenced in the Seebeck draft that can

948
00:40:53,590 --> 00:40:58,960
provide a population count so and and

949
00:40:56,470 --> 00:41:01,810
there's a formula there for how it's

950
00:40:58,960 --> 00:41:04,420
recommended to to prioritize the traffic

951
00:41:01,810 --> 00:41:05,920
if you need to do that very good thank

952
00:41:04,420 --> 00:41:08,890
you

953
00:41:05,920 --> 00:41:12,850
our next question comes from John

954
00:41:08,890 --> 00:41:15,580
Kristoff and this is one that I was

955
00:41:12,850 --> 00:41:18,400
thinking of myself support for inter

956
00:41:15,580 --> 00:41:19,140
domain I P multicast from source to end

957
00:41:18,400 --> 00:41:21,359
hosts

958
00:41:19,140 --> 00:41:23,430
strikes fear and loathing for some of us

959
00:41:21,359 --> 00:41:26,430
who have sustained battle scars

960
00:41:23,430 --> 00:41:29,460
is it possible to multicast to local

961
00:41:26,430 --> 00:41:31,200
caches and let clients unicast locally

962
00:41:29,460 --> 00:41:33,749
from there to reduce the deployment

963
00:41:31,200 --> 00:41:35,989
burdens and limit security concerns of

964
00:41:33,749 --> 00:41:40,709
receiver directed state complexities

965
00:41:35,989 --> 00:41:44,970
that's a mouthful yeah so I'm

966
00:41:40,710 --> 00:41:47,970
sympathetic in some sense I mean

967
00:41:44,970 --> 00:41:52,200
possible is a funny term right yeah sure

968
00:41:47,970 --> 00:41:54,988
it's sort of possible and I'm not

969
00:41:52,200 --> 00:41:57,689
opposed to to getting that in also the

970
00:41:54,989 --> 00:41:58,799
architecture or instead even the

971
00:41:57,690 --> 00:42:02,970
architecture that we're putting forward

972
00:41:58,799 --> 00:42:07,019
here asks for connectivity to the end

973
00:42:02,970 --> 00:42:08,450
hosts and then provides protections I

974
00:42:07,019 --> 00:42:14,308
could just mention it would see back to

975
00:42:08,450 --> 00:42:16,589
to try to make it not not the kind of

976
00:42:14,309 --> 00:42:19,920
thing that would that would inspire fear

977
00:42:16,589 --> 00:42:21,869
and loathing hopefully you know we're

978
00:42:19,920 --> 00:42:24,569
providing the metadata and giving you

979
00:42:21,869 --> 00:42:26,849
the tools to to ensure that there's

980
00:42:24,569 --> 00:42:29,099
safety that doesn't cause the kinds of

981
00:42:26,849 --> 00:42:30,799
problems that you may have experienced

982
00:42:29,099 --> 00:42:35,910
before

983
00:42:30,799 --> 00:42:37,799
you know if it doesn't work I mean if we

984
00:42:35,910 --> 00:42:40,019
can't get any traction on this then we

985
00:42:37,799 --> 00:42:41,160
are prepared to sort of fail over that

986
00:42:40,019 --> 00:42:43,529
but it has some different kinds of

987
00:42:41,160 --> 00:42:46,170
complications and some of the advantages

988
00:42:43,529 --> 00:42:48,180
we think are would be missing from a

989
00:42:46,170 --> 00:42:49,319
solution based on that because now

990
00:42:48,180 --> 00:42:50,700
you're going to have to maintain this

991
00:42:49,319 --> 00:42:54,569
cache you're going to have to have

992
00:42:50,700 --> 00:42:56,129
end-users that can you know reach that

993
00:42:54,569 --> 00:42:59,910
directly and you're gonna have to like

994
00:42:56,130 --> 00:43:01,440
have some decoder that's that's deployed

995
00:42:59,910 --> 00:43:03,029
on these gateways that has to

996
00:43:01,440 --> 00:43:05,819
interoperate with the sending side so

997
00:43:03,029 --> 00:43:09,210
there's a different set of complications

998
00:43:05,819 --> 00:43:11,700
that comes into play and it also has to

999
00:43:09,210 --> 00:43:12,960
be in homes if you're gonna save the the

1000
00:43:11,700 --> 00:43:16,038
bandwidth space across the access

1001
00:43:12,960 --> 00:43:20,279
network which is its own sort of

1002
00:43:16,039 --> 00:43:22,980
complexity introducing problem so we've

1003
00:43:20,279 --> 00:43:25,589
looked at that a bit and we we've come

1004
00:43:22,980 --> 00:43:27,089
down tentatively on the side that we

1005
00:43:25,589 --> 00:43:29,160
would like to see this deployed to

1006
00:43:27,089 --> 00:43:31,019
end-user devices and we're trying to

1007
00:43:29,160 --> 00:43:32,490
kick-start that by getting it into

1008
00:43:31,019 --> 00:43:37,259
browsers

1009
00:43:32,490 --> 00:43:41,189
as I talked about but and and other apps

1010
00:43:37,260 --> 00:43:45,060
that can do the native receive but you

1011
00:43:41,190 --> 00:43:46,640
know so that's our first choice and you

1012
00:43:45,060 --> 00:43:49,890
know we're sticking with it for now but

1013
00:43:46,640 --> 00:43:51,960
but if we if we do fail there then then

1014
00:43:49,890 --> 00:43:53,400
look for me to introduce a solution like

1015
00:43:51,960 --> 00:43:57,660
that because we get us all the scale

1016
00:43:53,400 --> 00:43:59,730
problem somehow well I think we have

1017
00:43:57,660 --> 00:44:02,390
time for one last quick question and

1018
00:43:59,730 --> 00:44:04,920
this is from Patrick Gilmore

1019
00:44:02,390 --> 00:44:08,100
not sure where he's working it doesn't

1020
00:44:04,920 --> 00:44:12,300
say up here how does the CDN bill for

1021
00:44:08,100 --> 00:44:14,759
this so are we're looking at this at

1022
00:44:12,300 --> 00:44:17,750
least for the near and probably

1023
00:44:14,760 --> 00:44:20,310
foreseeable future as a you know

1024
00:44:17,750 --> 00:44:21,900
evolution of our current building so we

1025
00:44:20,310 --> 00:44:26,070
we are offering a service to deliver

1026
00:44:21,900 --> 00:44:28,290
traffic and you know in in the limit it

1027
00:44:26,070 --> 00:44:30,510
might make no change at all but we think

1028
00:44:28,290 --> 00:44:33,300
that we this would enable us to offer a

1029
00:44:30,510 --> 00:44:35,910
discount on traffic that is successfully

1030
00:44:33,300 --> 00:44:38,790
delivered over multicast so that it can

1031
00:44:35,910 --> 00:44:40,890
be you know obviously if it reduces our

1032
00:44:38,790 --> 00:44:43,650
costs then we love to pass that on to

1033
00:44:40,890 --> 00:44:45,319
our customers in some form very good

1034
00:44:43,650 --> 00:44:47,520
thank you

1035
00:44:45,320 --> 00:44:51,240
well that's all we have time for

1036
00:44:47,520 --> 00:44:52,200
unfortunately excellent talk appreciate

1037
00:44:51,240 --> 00:44:54,899
it

1038
00:44:52,200 --> 00:44:57,390
two things coming out at the end the

1039
00:44:54,900 --> 00:45:00,120
Women in Technology lunch starts in

1040
00:44:57,390 --> 00:45:01,859
about 30 seconds go to your agenda and

1041
00:45:00,120 --> 00:45:05,430
click on the length is plenty of space

1042
00:45:01,860 --> 00:45:07,640
and there will be a poll this afternoon

1043
00:45:05,430 --> 00:45:10,470
asking what people want to do for

1044
00:45:07,640 --> 00:45:13,500
breakout Sambhav which is a new feature

1045
00:45:10,470 --> 00:45:15,839
for virtual Nanak thank you very much

1046
00:45:13,500 --> 00:45:18,899
have a good day all right thank you

1047
00:45:15,840 --> 00:45:18,899
[Music]

1048
00:45:19,450 --> 00:45:23,520
you

1049
00:45:20,220 --> 00:45:23,520
[Music]

