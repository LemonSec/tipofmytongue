1
00:00:00,000 --> 00:00:04,720
[Music]

2
00:00:04,720 --> 00:00:06,399
hi everyone i'm mike valentine from

3
00:00:06,399 --> 00:00:08,400
goldman sachs i'm here to introduce pass

4
00:00:08,400 --> 00:00:10,880
tracing for ipv6 uh show you the

5
00:00:10,880 --> 00:00:12,480
problems that it's called how we solve

6
00:00:12,480 --> 00:00:14,639
them and just to mention here this is a

7
00:00:14,639 --> 00:00:16,720
new itf draft

8
00:00:16,720 --> 00:00:19,760
for v6 there will be an mpls draft to

9
00:00:19,760 --> 00:00:20,880
follow

10
00:00:20,880 --> 00:00:22,480
and that's it and

11
00:00:22,480 --> 00:00:24,800
interesting note this is my first nano

12
00:00:24,800 --> 00:00:26,400
and i'm presenting and presenting

13
00:00:26,400 --> 00:00:27,760
virtually so

14
00:00:27,760 --> 00:00:29,679
uh hi everybody

15
00:00:29,679 --> 00:00:31,760
so here we have massive ecmp network

16
00:00:31,760 --> 00:00:32,960
right something everybody here is

17
00:00:32,960 --> 00:00:35,280
familiar with um we all build them like

18
00:00:35,280 --> 00:00:36,960
this for lots of different reasons some

19
00:00:36,960 --> 00:00:38,879
people build them for blast radius

20
00:00:38,879 --> 00:00:41,120
bandwidth some people want to use switch

21
00:00:41,120 --> 00:00:43,040
on chips to avoid chassis so they have a

22
00:00:43,040 --> 00:00:44,559
lot of sprawl

23
00:00:44,559 --> 00:00:46,640
or you do what the vendor told you to do

24
00:00:46,640 --> 00:00:48,559
um so we're all familiar with these

25
00:00:48,559 --> 00:00:50,559
networks this network could be

26
00:00:50,559 --> 00:00:53,120
simplistic for some people out there

27
00:00:53,120 --> 00:00:55,840
you know vendor support 32 and 64-way

28
00:00:55,840 --> 00:00:57,120
ecmp

29
00:00:57,120 --> 00:00:58,399
you know they're only doing it because

30
00:00:58,399 --> 00:01:00,239
someone asked them to so i can imagine

31
00:01:00,239 --> 00:01:02,399
that this network may be simplistic for

32
00:01:02,399 --> 00:01:03,600
some people

33
00:01:03,600 --> 00:01:06,240
um but we all wear ecmp it's a fact of

34
00:01:06,240 --> 00:01:09,040
life right and we don't know

35
00:01:09,040 --> 00:01:10,799
how traffic is going to go

36
00:01:10,799 --> 00:01:13,600
from a to m there's seven possible valid

37
00:01:13,600 --> 00:01:15,600
ecmp pads

38
00:01:15,600 --> 00:01:18,000
and when you look at this

39
00:01:18,000 --> 00:01:20,159
there's seven possible pads

40
00:01:20,159 --> 00:01:22,080
but remember we're hashing on source

41
00:01:22,080 --> 00:01:24,400
destination ip and source port and

42
00:01:24,400 --> 00:01:27,040
destination port and source ports are

43
00:01:27,040 --> 00:01:28,159
ephemeral

44
00:01:28,159 --> 00:01:30,640
for applications so the reality is

45
00:01:30,640 --> 00:01:32,640
your application traffic from am is

46
00:01:32,640 --> 00:01:34,479
taking all of those pads more than

47
00:01:34,479 --> 00:01:35,680
likely right

48
00:01:35,680 --> 00:01:36,720
and um

49
00:01:36,720 --> 00:01:38,079
if you ever troubleshoot it with

50
00:01:38,079 --> 00:01:40,720
somebody before you know

51
00:01:40,720 --> 00:01:42,399
they're not going to know their source

52
00:01:42,399 --> 00:01:44,799
port or something like that so

53
00:01:44,799 --> 00:01:47,439
there's a lot of different pads here

54
00:01:47,439 --> 00:01:49,920
imagine we had corruption at router b

55
00:01:49,920 --> 00:01:51,200
and in this case we'll say there's food

56
00:01:51,200 --> 00:01:53,200
corruption right

57
00:01:53,200 --> 00:01:54,880
how do we troubleshoot this you know

58
00:01:54,880 --> 00:01:56,880
some people have over-the-top probes

59
00:01:56,880 --> 00:01:58,640
right but they can't tell you where the

60
00:01:58,640 --> 00:02:00,240
issue is they just say there's an issue

61
00:02:00,240 --> 00:02:02,079
on the network you don't know where the

62
00:02:02,079 --> 00:02:04,399
issue occurred and frankly you know

63
00:02:04,399 --> 00:02:06,000
sometimes i don't find them very helpful

64
00:02:06,000 --> 00:02:07,520
the over-the-top probes you know i know

65
00:02:07,520 --> 00:02:08,639
there's an issue because i'm on the

66
00:02:08,639 --> 00:02:11,360
phone with you um and i need to figure

67
00:02:11,360 --> 00:02:12,319
it out

68
00:02:12,319 --> 00:02:14,000
what happens if we had this corruption

69
00:02:14,000 --> 00:02:16,800
of b and b was sending packets to e

70
00:02:16,800 --> 00:02:18,640
right so now our path

71
00:02:18,640 --> 00:02:21,360
is a b e l g m

72
00:02:21,360 --> 00:02:23,200
you know nobody would ever expect that

73
00:02:23,200 --> 00:02:24,640
you would never look to troubleshoot

74
00:02:24,640 --> 00:02:26,400
that right so we don't know where

75
00:02:26,400 --> 00:02:28,640
packets are going here introducing pad

76
00:02:28,640 --> 00:02:30,879
tracing so now that we know the seven

77
00:02:30,879 --> 00:02:33,840
possible ecmpp pads from the prior slide

78
00:02:33,840 --> 00:02:35,360
we know exactly where the packets could

79
00:02:35,360 --> 00:02:36,879
be going in the network

80
00:02:36,879 --> 00:02:38,800
so what we want to do is monitor the

81
00:02:38,800 --> 00:02:41,440
hardware pipeline for how these packets

82
00:02:41,440 --> 00:02:42,959
are treated so

83
00:02:42,959 --> 00:02:45,360
by doing everything in hardware we're

84
00:02:45,360 --> 00:02:46,720
seeing the normal

85
00:02:46,720 --> 00:02:49,360
data path of a customer or application

86
00:02:49,360 --> 00:02:51,599
traffic so there's no pumping to the cpu

87
00:02:51,599 --> 00:02:54,000
no offload to code processors the other

88
00:02:54,000 --> 00:02:56,319
goal we have here is ultra efficiency

89
00:02:56,319 --> 00:02:58,080
for mtu's we're adding three bytes for

90
00:02:58,080 --> 00:03:01,120
hop there's a 12-bit interface id an

91
00:03:01,120 --> 00:03:03,760
8-bit time stamp and a 4-bit load as i

92
00:03:03,760 --> 00:03:06,159
mentioned before this is about ipv6 with

93
00:03:06,159 --> 00:03:08,720
native srv6 support there is an mpls

94
00:03:08,720 --> 00:03:10,319
design available as well that we will

95
00:03:10,319 --> 00:03:11,840
not be going over

96
00:03:11,840 --> 00:03:13,120
and the other important thing is with

97
00:03:13,120 --> 00:03:15,200
anything you're introduced

98
00:03:15,200 --> 00:03:16,480
it has to work with what you have

99
00:03:16,480 --> 00:03:18,879
deployed so a legacy node in this we

100
00:03:18,879 --> 00:03:20,800
don't only see this as a v6 packet it

101
00:03:20,800 --> 00:03:22,800
won't have to do any of these hair

102
00:03:22,800 --> 00:03:25,280
tracing features and you can you know

103
00:03:25,280 --> 00:03:27,200
fill in the gap so

104
00:03:27,200 --> 00:03:28,319
time right

105
00:03:28,319 --> 00:03:30,319
how do we spend time from a to m because

106
00:03:30,319 --> 00:03:32,159
it's all we assume we solved the first

107
00:03:32,159 --> 00:03:34,799
question the path is abgm how are we

108
00:03:34,799 --> 00:03:37,120
spending that time a thing to note here

109
00:03:37,120 --> 00:03:39,280
and it's totally out of scope is we're

110
00:03:39,280 --> 00:03:40,879
assuming we're keeping accurate time in

111
00:03:40,879 --> 00:03:42,799
our network i think most of us today are

112
00:03:42,799 --> 00:03:44,560
using pcp

113
00:03:44,560 --> 00:03:47,040
to get uh accurate network time and

114
00:03:47,040 --> 00:03:48,799
we're just taking for granted that you

115
00:03:48,799 --> 00:03:50,720
have ptp otherwise

116
00:03:50,720 --> 00:03:52,239
you know if the timing's off

117
00:03:52,239 --> 00:03:54,000
everything's over so what patch racing

118
00:03:54,000 --> 00:03:55,439
can do is

119
00:03:55,439 --> 00:03:57,439
look at the time and put a time stamp

120
00:03:57,439 --> 00:03:59,599
around so how is the time spent to get

121
00:03:59,599 --> 00:04:01,599
from router a to router m and we're

122
00:04:01,599 --> 00:04:03,120
going to do that at every hop so at

123
00:04:03,120 --> 00:04:05,120
router b we'll record the time and

124
00:04:05,120 --> 00:04:06,959
router g remote all the time and we'll

125
00:04:06,959 --> 00:04:09,599
record the time it comes in on router m

126
00:04:09,599 --> 00:04:12,000
so what about the load at each hop so

127
00:04:12,000 --> 00:04:13,439
we're going to monitor the interface

128
00:04:13,439 --> 00:04:16,000
load each hub so on router b you can see

129
00:04:16,000 --> 00:04:18,079
the interface load is roughly one

130
00:04:18,079 --> 00:04:20,079
quarter our router g the interface load

131
00:04:20,079 --> 00:04:22,560
is roughly three quarters so

132
00:04:22,560 --> 00:04:24,479
along with the time stamping at every

133
00:04:24,479 --> 00:04:26,639
hop we're gonna need interface load

134
00:04:26,639 --> 00:04:29,680
so load before we mention that there's a

135
00:04:29,680 --> 00:04:32,880
four bit load ide field um and i know

136
00:04:32,880 --> 00:04:34,560
most you think what can i do with four

137
00:04:34,560 --> 00:04:37,440
bits right i get a measly 16 values

138
00:04:37,440 --> 00:04:40,479
we limit this logarithmically so

139
00:04:40,479 --> 00:04:42,720
we're gonna add emphasis on the higher

140
00:04:42,720 --> 00:04:44,400
values right we're looking at things in

141
00:04:44,400 --> 00:04:46,000
the 80s and 90 percents that have

142
00:04:46,000 --> 00:04:47,199
smaller

143
00:04:47,199 --> 00:04:48,960
intervals between the buckets whereas

144
00:04:48,960 --> 00:04:52,400
between your lows between 10 and 15

145
00:04:52,400 --> 00:04:53,759
we really don't care

146
00:04:53,759 --> 00:04:54,560
so

147
00:04:54,560 --> 00:04:56,800
what we're looking at today is every x

148
00:04:56,800 --> 00:04:58,880
seconds a line card cpu is going to

149
00:04:58,880 --> 00:05:00,800
compute the average load

150
00:05:00,800 --> 00:05:02,320
he's going to translate that into the

151
00:05:02,320 --> 00:05:04,720
4-bit representation and together he's

152
00:05:04,720 --> 00:05:06,479
going to write that with the outbound

153
00:05:06,479 --> 00:05:07,840
interface

154
00:05:07,840 --> 00:05:10,160
um this behavior is simple in the data

155
00:05:10,160 --> 00:05:12,800
plane everything we do here is optimized

156
00:05:12,800 --> 00:05:14,639
for hardware so we're riding at a fixed

157
00:05:14,639 --> 00:05:16,400
offset and that fixed offset we're going

158
00:05:16,400 --> 00:05:18,800
to put the load variable in

159
00:05:18,800 --> 00:05:20,560
so from a hardware perspective this is

160
00:05:20,560 --> 00:05:22,400
constant it's easy to do and the

161
00:05:22,400 --> 00:05:24,639
linecard cpu would update this every few

162
00:05:24,639 --> 00:05:25,759
seconds

163
00:05:25,759 --> 00:05:29,120
um and the future generations of mpus a6

164
00:05:29,120 --> 00:05:31,280
you know this can be done at

165
00:05:31,280 --> 00:05:33,759
milliseconds a microsecond speed so

166
00:05:33,759 --> 00:05:35,280
here's a super

167
00:05:35,280 --> 00:05:37,120
high level hop i hop overview of what

168
00:05:37,120 --> 00:05:39,120
we're going to do right so we have your

169
00:05:39,120 --> 00:05:42,240
standard ip6 header right on router a

170
00:05:42,240 --> 00:05:44,080
then we have this hop by hop pad tracing

171
00:05:44,080 --> 00:05:45,520
option which we'll go over in greater

172
00:05:45,520 --> 00:05:48,160
detail in a few slides

173
00:05:48,160 --> 00:05:49,280
we have

174
00:05:49,280 --> 00:05:51,199
the loaded router a the latency of

175
00:05:51,199 --> 00:05:54,560
router a and next top is router b router

176
00:05:54,560 --> 00:05:56,400
b we have the same information we still

177
00:05:56,400 --> 00:05:57,520
have the id

178
00:05:57,520 --> 00:06:00,880
b6 header we have the loaded b

179
00:06:00,880 --> 00:06:03,199
um the latency of the b the next top of

180
00:06:03,199 --> 00:06:06,479
g et cetera et g so this is a super high

181
00:06:06,479 --> 00:06:08,960
level overview and the following slides

182
00:06:08,960 --> 00:06:10,720
will get into greater detail these are

183
00:06:10,720 --> 00:06:12,800
some of the design objectives what goals

184
00:06:12,800 --> 00:06:14,479
we were after when we were putting this

185
00:06:14,479 --> 00:06:15,360
together

186
00:06:15,360 --> 00:06:17,120
number one goal get the most out of your

187
00:06:17,120 --> 00:06:18,560
router right

188
00:06:18,560 --> 00:06:21,520
no too little extra processing done

189
00:06:21,520 --> 00:06:23,039
use the same forwarding plane as

190
00:06:23,039 --> 00:06:25,039
application traffic your customer

191
00:06:25,039 --> 00:06:26,800
traffic we don't want to be special we

192
00:06:26,800 --> 00:06:28,560
don't want to punch the cpu because

193
00:06:28,560 --> 00:06:30,160
that's not the data point right we want

194
00:06:30,160 --> 00:06:32,479
to experience what everybody experiences

195
00:06:32,479 --> 00:06:34,160
there's various vendors involved here

196
00:06:34,160 --> 00:06:35,680
we're working with all of them to make

197
00:06:35,680 --> 00:06:37,919
sure this is all true so

198
00:06:37,919 --> 00:06:39,680
that is a key thing here these

199
00:06:39,680 --> 00:06:41,199
statements we want

200
00:06:41,199 --> 00:06:42,960
everything to be true everything should

201
00:06:42,960 --> 00:06:44,479
be done in hardware and the things are

202
00:06:44,479 --> 00:06:46,720
optimizing for now or mpu processing

203
00:06:46,720 --> 00:06:48,880
right minimize the number of rewrites

204
00:06:48,880 --> 00:06:51,280
minimize the depth of the read writes

205
00:06:51,280 --> 00:06:53,440
maximize rewrite fixed positions right

206
00:06:53,440 --> 00:06:54,880
we want to know where in that packet

207
00:06:54,880 --> 00:06:57,680
we're writing stuff avoid header insert

208
00:06:57,680 --> 00:07:00,319
and resize and as stated before

209
00:07:00,319 --> 00:07:02,560
minimizing that mtu right if we're

210
00:07:02,560 --> 00:07:03,919
clogging

211
00:07:03,919 --> 00:07:05,919
the network with all these frames and

212
00:07:05,919 --> 00:07:07,919
packets it's not trapped that your

213
00:07:07,919 --> 00:07:11,039
customers can use or your applications

214
00:07:11,039 --> 00:07:12,880
and then we have the hopfi hop collected

215
00:07:12,880 --> 00:07:15,280
data we call this mcd and it's highly

216
00:07:15,280 --> 00:07:17,039
compressed right i mentioned before is

217
00:07:17,039 --> 00:07:19,120
three bytes per hop

218
00:07:19,120 --> 00:07:20,560
and then the other thing we want to do

219
00:07:20,560 --> 00:07:22,880
is minimize hardware complexity by

220
00:07:22,880 --> 00:07:24,960
leveraging stn

221
00:07:24,960 --> 00:07:27,039
so we're looking here at node m the

222
00:07:27,039 --> 00:07:29,280
package traversed from a b the g we've

223
00:07:29,280 --> 00:07:30,400
collected

224
00:07:30,400 --> 00:07:32,400
all the data in the packet and from node

225
00:07:32,400 --> 00:07:34,479
n's perspective we want to get the most

226
00:07:34,479 --> 00:07:36,000
out of the router right he should

227
00:07:36,000 --> 00:07:38,000
encapsulate this in hardware and send it

228
00:07:38,000 --> 00:07:40,639
to your you know sdn app or you know

229
00:07:40,639 --> 00:07:42,080
collector or whatever you want to call

230
00:07:42,080 --> 00:07:42,880
it

231
00:07:42,880 --> 00:07:45,680
this isn't my ips la we're not

232
00:07:45,680 --> 00:07:47,440
looking to do any computation on the

233
00:07:47,440 --> 00:07:49,680
router the router you know the cpu has

234
00:07:49,680 --> 00:07:51,599
more important things to do than that

235
00:07:51,599 --> 00:07:54,479
because we quickly overload the cpu here

236
00:07:54,479 --> 00:07:56,720
so the goal is to get everything off of

237
00:07:56,720 --> 00:07:58,400
the router so when you get into the

238
00:07:58,400 --> 00:08:00,800
analytics engine right he can do this

239
00:08:00,800 --> 00:08:03,280
data he has a list of collected ids in

240
00:08:03,280 --> 00:08:04,479
the path

241
00:08:04,479 --> 00:08:06,720
timing the history of each op you can

242
00:08:06,720 --> 00:08:08,400
highlight hotspots

243
00:08:08,400 --> 00:08:10,560
and the beauty of this being in a time

244
00:08:10,560 --> 00:08:12,479
series databases you can highlight hot

245
00:08:12,479 --> 00:08:15,440
spots from an hour ago two hours ago so

246
00:08:15,440 --> 00:08:18,240
if you were in a more reactive

247
00:08:18,240 --> 00:08:20,240
position and someone called you up and

248
00:08:20,240 --> 00:08:22,000
said an hour ago my application had a

249
00:08:22,000 --> 00:08:24,160
hiccup you can go back in time and look

250
00:08:24,160 --> 00:08:26,080
right and say oh there was a hot spot an

251
00:08:26,080 --> 00:08:27,280
hour ago

252
00:08:27,280 --> 00:08:30,639
you know in this particular queue

253
00:08:30,639 --> 00:08:33,200
and um yeah it did impact you other

254
00:08:33,200 --> 00:08:34,640
things you can do your consistency

255
00:08:34,640 --> 00:08:36,958
checks right you have expected pads you

256
00:08:36,958 --> 00:08:40,000
know via pc versus the actual path but

257
00:08:40,000 --> 00:08:41,360
are they different

258
00:08:41,360 --> 00:08:43,679
and once you have this information

259
00:08:43,679 --> 00:08:45,040
what can you do with it you could

260
00:08:45,040 --> 00:08:47,120
trigger a change of path and segment

261
00:08:47,120 --> 00:08:49,279
routing or mtcp

262
00:08:49,279 --> 00:08:51,600
anything think of closed loop you know

263
00:08:51,600 --> 00:08:53,360
automation i tell

264
00:08:53,360 --> 00:08:56,000
you know engineers that i work with

265
00:08:56,000 --> 00:08:56,959
you know

266
00:08:56,959 --> 00:08:59,360
now that we have the data

267
00:08:59,360 --> 00:09:01,120
what can we do with it right because

268
00:09:01,120 --> 00:09:02,880
data is key we didn't have this

269
00:09:02,880 --> 00:09:04,720
information in the past to this level of

270
00:09:04,720 --> 00:09:06,720
detail and granularity now that we do

271
00:09:06,720 --> 00:09:08,480
what can we do with it so

272
00:09:08,480 --> 00:09:10,640
having the data is key and the sky's the

273
00:09:10,640 --> 00:09:12,720
limit once you have it you can easily

274
00:09:12,720 --> 00:09:14,080
write application or close your

275
00:09:14,080 --> 00:09:15,200
automation

276
00:09:15,200 --> 00:09:16,880
um

277
00:09:16,880 --> 00:09:18,640
and the other thing here is you know

278
00:09:18,640 --> 00:09:21,279
just to reiterate again radaram is doing

279
00:09:21,279 --> 00:09:23,839
this in hardware at line rate is you

280
00:09:23,839 --> 00:09:25,680
know sending to the sdn app there is

281
00:09:25,680 --> 00:09:26,640
nothing

282
00:09:26,640 --> 00:09:28,480
software here now we're getting into

283
00:09:28,480 --> 00:09:30,720
more detail about everything

284
00:09:30,720 --> 00:09:32,800
these are roles in the data model uh

285
00:09:32,800 --> 00:09:33,680
more

286
00:09:33,680 --> 00:09:35,839
down to the packet level so here we have

287
00:09:35,839 --> 00:09:38,000
this resource and the main thing off of

288
00:09:38,000 --> 00:09:40,080
this slide the source is originating the

289
00:09:40,080 --> 00:09:42,000
probe the probe is not coming from the

290
00:09:42,000 --> 00:09:43,920
analytics engine right

291
00:09:43,920 --> 00:09:47,200
this the probe is originated in hardware

292
00:09:47,200 --> 00:09:48,880
at the source and at the source he's

293
00:09:48,880 --> 00:09:50,560
going to collect the data

294
00:09:50,560 --> 00:09:52,560
he's going to connect the timestamp the

295
00:09:52,560 --> 00:09:54,880
outbound interface the interface load

296
00:09:54,880 --> 00:09:57,360
and send it on its way some interesting

297
00:09:57,360 --> 00:09:59,360
things you can do you can set a range of

298
00:09:59,360 --> 00:10:02,640
sizes for packets dhcp values

299
00:10:02,640 --> 00:10:04,160
on these things so you can look at

300
00:10:04,160 --> 00:10:06,560
individual queues right you can do

301
00:10:06,560 --> 00:10:09,200
packet sizes for your probes so here's

302
00:10:09,200 --> 00:10:10,720
an example of the packet generated by

303
00:10:10,720 --> 00:10:11,839
the source

304
00:10:11,839 --> 00:10:13,760
you have your standard ipv6 center like

305
00:10:13,760 --> 00:10:15,440
i mentioned before you have

306
00:10:15,440 --> 00:10:17,360
a dcp value which

307
00:10:17,360 --> 00:10:20,320
i believe will come in handy flow labels

308
00:10:20,320 --> 00:10:22,000
etc your standard source address

309
00:10:22,000 --> 00:10:23,920
destination address then we go to the

310
00:10:23,920 --> 00:10:26,079
hop by hop header and we have a new pad

311
00:10:26,079 --> 00:10:28,000
tracing option type here and then we

312
00:10:28,000 --> 00:10:30,000
have this mcd that bitcoin compressed

313
00:10:30,000 --> 00:10:32,880
data stack so the new piece is the pt

314
00:10:32,880 --> 00:10:34,720
option and then we have our segment

315
00:10:34,720 --> 00:10:35,920
rounding header where we have our sid

316
00:10:35,920 --> 00:10:37,360
list and then we have a new segment

317
00:10:37,360 --> 00:10:40,000
routing at our ad tracing tlv and that's

318
00:10:40,000 --> 00:10:42,000
where we're going to put the time stamp

319
00:10:42,000 --> 00:10:43,920
the outbound interface id

320
00:10:43,920 --> 00:10:45,920
and the outbound load so that's this

321
00:10:45,920 --> 00:10:47,920
source router

322
00:10:47,920 --> 00:10:49,600
right that you can see in the packet

323
00:10:49,600 --> 00:10:52,320
here we have the 64-bit timestamp of the

324
00:10:52,320 --> 00:10:54,160
source node we have the session id and

325
00:10:54,160 --> 00:10:56,959
we have a sequence number session id

326
00:10:56,959 --> 00:10:59,040
it's that probe series of data so right

327
00:10:59,040 --> 00:11:00,959
so that session id will remain u

328
00:11:00,959 --> 00:11:04,560
constant for a probe's lifetime of this

329
00:11:04,560 --> 00:11:06,079
one sequence number would be the

330
00:11:06,079 --> 00:11:08,240
sequence number of a packet right and

331
00:11:08,240 --> 00:11:09,279
you can imagine when you get the

332
00:11:09,279 --> 00:11:10,800
analytics you can do some good things if

333
00:11:10,800 --> 00:11:12,959
you have sequence numbers um but note

334
00:11:12,959 --> 00:11:15,040
the 64-bit timestamp we'll get back to

335
00:11:15,040 --> 00:11:15,920
that

336
00:11:15,920 --> 00:11:17,040
on uh

337
00:11:17,040 --> 00:11:19,040
the following slides so now we have the

338
00:11:19,040 --> 00:11:21,279
midpoint and that midpoint is collecting

339
00:11:21,279 --> 00:11:23,200
that data then mcd and as we mentioned

340
00:11:23,200 --> 00:11:25,279
earlier it's three bytes per hop you

341
00:11:25,279 --> 00:11:28,000
have that 12-bit interface id which is

342
00:11:28,000 --> 00:11:30,079
not globally unique it can be repeated

343
00:11:30,079 --> 00:11:32,399
on each router because the analytics

344
00:11:32,399 --> 00:11:33,360
engine

345
00:11:33,360 --> 00:11:35,279
knows the router that it's collecting

346
00:11:35,279 --> 00:11:37,839
from because via the mcd field he knows

347
00:11:37,839 --> 00:11:40,160
which router that stamped it therefore

348
00:11:40,160 --> 00:11:42,160
he knows the interface id is on that

349
00:11:42,160 --> 00:11:44,079
router right we have that four bit

350
00:11:44,079 --> 00:11:45,519
interface load that we talked about

351
00:11:45,519 --> 00:11:47,519
before and we have that eight bit

352
00:11:47,519 --> 00:11:49,519
timestamp and what's that eight-bit

353
00:11:49,519 --> 00:11:51,200
timestamp if you notice the previous

354
00:11:51,200 --> 00:11:53,360
live we have a 64-bit timestamp at the

355
00:11:53,360 --> 00:11:55,360
beginning now we can use the truncated

356
00:11:55,360 --> 00:11:57,040
timestamp because we know the starting

357
00:11:57,040 --> 00:11:58,480
time

358
00:11:58,480 --> 00:12:01,200
we can use this truncated timestamp

359
00:12:01,200 --> 00:12:03,600
to represent various possibilities for

360
00:12:03,600 --> 00:12:06,240
example if you had an intercontinental

361
00:12:06,240 --> 00:12:08,320
backbone you were looking at here you

362
00:12:08,320 --> 00:12:10,959
could say i want to use seven bits for

363
00:12:10,959 --> 00:12:12,240
milliseconds and one bits per

364
00:12:12,240 --> 00:12:13,920
microsecond or if you're in a data

365
00:12:13,920 --> 00:12:15,600
center you could do

366
00:12:15,600 --> 00:12:18,000
two bits per millisecond and two for

367
00:12:18,000 --> 00:12:20,639
micro and six for microseconds um and

368
00:12:20,639 --> 00:12:22,959
remember as you said before goal is

369
00:12:22,959 --> 00:12:24,880
hardware friendly shift and stamp

370
00:12:24,880 --> 00:12:27,680
behavior at line rate so everything here

371
00:12:27,680 --> 00:12:29,920
will be done at line rig and then we

372
00:12:29,920 --> 00:12:32,480
have shift and stamp and b so

373
00:12:32,480 --> 00:12:35,120
this is the ncd section under the up by

374
00:12:35,120 --> 00:12:36,800
hop header

375
00:12:36,800 --> 00:12:38,320
and as i said before everything is a

376
00:12:38,320 --> 00:12:39,839
fixed offset so we're going to move

377
00:12:39,839 --> 00:12:42,079
three bikes to the right

378
00:12:42,079 --> 00:12:43,680
right we're going to stamp mcd in the

379
00:12:43,680 --> 00:12:46,399
first three bytes so right now in mcdb

380
00:12:46,399 --> 00:12:48,480
we're stamping the interface id the load

381
00:12:48,480 --> 00:12:50,000
and the timestamp

382
00:12:50,000 --> 00:12:51,680
right now we get the g

383
00:12:51,680 --> 00:12:54,240
you can see we have the mcd for router b

384
00:12:54,240 --> 00:12:56,320
it's already in the field down right

385
00:12:56,320 --> 00:12:58,560
we're going to shift again to the right

386
00:12:58,560 --> 00:13:01,040
we free up our three bytes

387
00:13:01,040 --> 00:13:04,079
we insert our mcd for router g

388
00:13:04,079 --> 00:13:06,320
we send it on its way to the sync once

389
00:13:06,320 --> 00:13:07,519
we get to the sync we're going to

390
00:13:07,519 --> 00:13:09,760
timestamp encapsulate and forward it and

391
00:13:09,760 --> 00:13:12,240
record perception data so

392
00:13:12,240 --> 00:13:14,480
you know we are not doing any analytics

393
00:13:14,480 --> 00:13:18,160
here hardware friendly i use the ipl sla

394
00:13:18,160 --> 00:13:20,160
example no computation is done on the

395
00:13:20,160 --> 00:13:22,240
box we just say

396
00:13:22,240 --> 00:13:24,079
go to the uh

397
00:13:24,079 --> 00:13:25,200
collection

398
00:13:25,200 --> 00:13:27,040
engine and take it from there right

399
00:13:27,040 --> 00:13:29,920
analytics are all done off the box

400
00:13:29,920 --> 00:13:31,600
i'm in the packet ported by the sink

401
00:13:31,600 --> 00:13:32,399
right

402
00:13:32,399 --> 00:13:34,880
we have the ip6 center destination is

403
00:13:34,880 --> 00:13:36,959
the original collector or collector

404
00:13:36,959 --> 00:13:39,120
here's the segment routing header

405
00:13:39,120 --> 00:13:41,360
as well just from before uh from all the

406
00:13:41,360 --> 00:13:42,720
packages

407
00:13:42,720 --> 00:13:45,040
if you notice this is very similar to

408
00:13:45,040 --> 00:13:47,600
the packet generated by the source it'll

409
00:13:47,600 --> 00:13:49,839
have the 64-bit transit timestamp so

410
00:13:49,839 --> 00:13:52,079
we'll have the starting time and 64

411
00:13:52,079 --> 00:13:54,079
truncated time in the middle and the

412
00:13:54,079 --> 00:13:56,880
64-bit times f at the end

413
00:13:56,880 --> 00:13:59,120
the session id and sequence number are

414
00:13:59,120 --> 00:14:01,519
going to be zeroed out right that data

415
00:14:01,519 --> 00:14:03,199
is already in the packet so he doesn't

416
00:14:03,199 --> 00:14:04,720
have to collect it he doesn't we don't

417
00:14:04,720 --> 00:14:05,920
want him reading further into the

418
00:14:05,920 --> 00:14:08,560
package than he has to remember hardware

419
00:14:08,560 --> 00:14:10,560
friendly key goal right

420
00:14:10,560 --> 00:14:12,639
um and then we're taking that original

421
00:14:12,639 --> 00:14:15,519
pad tracing packet in its entirety

422
00:14:15,519 --> 00:14:17,920
encapsulating it in this and sending it

423
00:14:17,920 --> 00:14:19,839
um to the regional collective so all

424
00:14:19,839 --> 00:14:20,639
that

425
00:14:20,639 --> 00:14:22,480
data from before

426
00:14:22,480 --> 00:14:24,240
is already in this packet so we're

427
00:14:24,240 --> 00:14:25,839
putting this new header on it this new

428
00:14:25,839 --> 00:14:27,680
segment routing header

429
00:14:27,680 --> 00:14:29,360
the patrice tlb

430
00:14:29,360 --> 00:14:31,680
encoding this data at the sync

431
00:14:31,680 --> 00:14:33,760
encapsulating the old packet and sending

432
00:14:33,760 --> 00:14:36,560
it out but just a note here

433
00:14:36,560 --> 00:14:38,639
we're not looking at the

434
00:14:38,639 --> 00:14:40,399
outgoing interface and load it's the

435
00:14:40,399 --> 00:14:42,639
incoming interface we're looking at on

436
00:14:42,639 --> 00:14:44,639
the sync right outgoing interface is

437
00:14:44,639 --> 00:14:46,720
going to be the interface to the

438
00:14:46,720 --> 00:14:48,800
collector and we don't really care about

439
00:14:48,800 --> 00:14:50,399
that right then you get to the regional

440
00:14:50,399 --> 00:14:52,320
collector and what his what he's doing

441
00:14:52,320 --> 00:14:54,160
is just ingesting these probes in the

442
00:14:54,160 --> 00:14:55,920
time series database

443
00:14:55,920 --> 00:14:57,519
and then this is an example of all the

444
00:14:57,519 --> 00:15:00,399
collected data right so at the source we

445
00:15:00,399 --> 00:15:03,360
have the 12 bits for interface id

446
00:15:03,360 --> 00:15:06,320
four bits for interface load the 64-bit

447
00:15:06,320 --> 00:15:08,959
ptp timestamp midpoint is the three

448
00:15:08,959 --> 00:15:10,320
bytes right

449
00:15:10,320 --> 00:15:13,440
call for interface uh four for load

450
00:15:13,440 --> 00:15:15,440
eight for time truncated timestamp and

451
00:15:15,440 --> 00:15:17,680
the sync is pretty much the same as the

452
00:15:17,680 --> 00:15:20,800
source i showed this slide earlier

453
00:15:20,800 --> 00:15:22,959
but i just want to reiterate

454
00:15:22,959 --> 00:15:24,320
you know now that you know the things

455
00:15:24,320 --> 00:15:26,240
you can you're going to gather you can

456
00:15:26,240 --> 00:15:28,639
do a lot more analytics than you thought

457
00:15:28,639 --> 00:15:30,399
because we're tracking sequence numbers

458
00:15:30,399 --> 00:15:33,279
and we can send packets of varying sizes

459
00:15:33,279 --> 00:15:35,360
and at varying speeds

460
00:15:35,360 --> 00:15:36,959
uh frequencies

461
00:15:36,959 --> 00:15:39,440
we can deduct packet levels right you

462
00:15:39,440 --> 00:15:41,519
can do the packet loss in a queue

463
00:15:41,519 --> 00:15:44,480
you can see time you know one queue is

464
00:15:44,480 --> 00:15:46,880
congested over another q

465
00:15:46,880 --> 00:15:49,600
you can now take right actions based on

466
00:15:49,600 --> 00:15:50,800
those you know

467
00:15:50,800 --> 00:15:53,440
this q is congested move my you know

468
00:15:53,440 --> 00:15:56,560
srte path this queue is congested put in

469
00:15:56,560 --> 00:15:58,399
a ticket to add interface bandwidth

470
00:15:58,399 --> 00:16:00,320
right an automatic ticket to add more

471
00:16:00,320 --> 00:16:02,480
ecmp links which is you know kind of why

472
00:16:02,480 --> 00:16:04,240
we're here

473
00:16:04,240 --> 00:16:05,920
the sky's the limit you know whatever

474
00:16:05,920 --> 00:16:08,079
you can think of you can do and now we

475
00:16:08,079 --> 00:16:10,240
look at pad tracing versus alternatives

476
00:16:10,240 --> 00:16:11,600
what's out there right because i know

477
00:16:11,600 --> 00:16:12,720
everybody

478
00:16:12,720 --> 00:16:14,880
is like oh we've done this you know why

479
00:16:14,880 --> 00:16:17,279
reinvent the wheel and

480
00:16:17,279 --> 00:16:18,160
you know

481
00:16:18,160 --> 00:16:19,360
i think

482
00:16:19,360 --> 00:16:20,880
in the previous slides we kind of

483
00:16:20,880 --> 00:16:23,199
explained what the benefits are but here

484
00:16:23,199 --> 00:16:24,720
if you want to compare

485
00:16:24,720 --> 00:16:27,199
tetrising is a much smaller overhead

486
00:16:27,199 --> 00:16:29,600
you know than int ifa and iom right

487
00:16:29,600 --> 00:16:33,279
they're 20 32 and 20 bytes respectively

488
00:16:33,279 --> 00:16:35,600
header processing is much simpler

489
00:16:35,600 --> 00:16:37,600
the alternatives adjust the header size

490
00:16:37,600 --> 00:16:39,839
at every hop you all sets are at

491
00:16:39,839 --> 00:16:41,920
different locations right so this is not

492
00:16:41,920 --> 00:16:43,839
as hardware friendly whereas in pad

493
00:16:43,839 --> 00:16:45,360
tracing

494
00:16:45,360 --> 00:16:48,240
is hardware optimized everything is in a

495
00:16:48,240 --> 00:16:50,480
fixed position header offset's always

496
00:16:50,480 --> 00:16:52,560
the same right

497
00:16:52,560 --> 00:16:54,399
reiterate right hardware line rate

498
00:16:54,399 --> 00:16:55,680
because we know these things are in

499
00:16:55,680 --> 00:16:58,240
fixed positions etc

500
00:16:58,240 --> 00:17:00,320
we can do this in hardware you know

501
00:17:00,320 --> 00:17:01,360
today

502
00:17:01,360 --> 00:17:03,440
we've been working with cisco broadcom

503
00:17:03,440 --> 00:17:05,679
marvel others to do this

504
00:17:05,679 --> 00:17:07,919
in hardware at line rate

505
00:17:07,919 --> 00:17:09,280
other options you know they're not

506
00:17:09,280 --> 00:17:11,280
widely deployed possibly because they're

507
00:17:11,280 --> 00:17:13,520
not you know done at line rate

508
00:17:13,520 --> 00:17:15,760
um the other thing we're doing right

509
00:17:15,760 --> 00:17:17,919
we're looking at the true path of a

510
00:17:17,919 --> 00:17:20,480
packet in hardware we want to experience

511
00:17:20,480 --> 00:17:23,439
what our applications or our customers

512
00:17:23,439 --> 00:17:25,119
are experiencing we don't want to be

513
00:17:25,119 --> 00:17:28,000
pumped into a cpu or anything or oem

514
00:17:28,000 --> 00:17:30,400
assist we want the true data path we

515
00:17:30,400 --> 00:17:33,600
want the real value and the other

516
00:17:33,600 --> 00:17:35,840
is a smoother deployment right if a hop

517
00:17:35,840 --> 00:17:37,200
in the middle doesn't understand this

518
00:17:37,200 --> 00:17:39,120
it's a visions packet

519
00:17:39,120 --> 00:17:41,679
so that's the beauty insertion is quite

520
00:17:41,679 --> 00:17:44,000
easy in the network um so where are we

521
00:17:44,000 --> 00:17:46,720
today what's the ecosystem you know

522
00:17:46,720 --> 00:17:48,640
what's going on how's standardization

523
00:17:48,640 --> 00:17:51,200
going ecosystem so

524
00:17:51,200 --> 00:17:53,039
there's a broad ecosystem here right

525
00:17:53,039 --> 00:17:55,760
we've mentioned broad.com cisco marvel

526
00:17:55,760 --> 00:17:58,080
others broadcom has the jericho 2

527
00:17:58,080 --> 00:18:00,400
implementation today it's actually in

528
00:18:00,400 --> 00:18:02,480
shipping microcode

529
00:18:02,480 --> 00:18:03,679
so

530
00:18:03,679 --> 00:18:05,360
you could call up your favorite vendor

531
00:18:05,360 --> 00:18:07,200
and say please implement this or if you

532
00:18:07,200 --> 00:18:08,799
write your own software you can do it

533
00:18:08,799 --> 00:18:11,280
yourself cisco has this in the silicon

534
00:18:11,280 --> 00:18:12,240
one

535
00:18:12,240 --> 00:18:14,799
and the asr 9k light speed a6 and

536
00:18:14,799 --> 00:18:17,760
marbell in their crystal line um

537
00:18:17,760 --> 00:18:20,640
there's strong interest from operators

538
00:18:20,640 --> 00:18:23,600
this is currently being looked at uh in

539
00:18:23,600 --> 00:18:25,840
the labs by several large operators

540
00:18:25,840 --> 00:18:27,360
they're keen to get this

541
00:18:27,360 --> 00:18:30,160
moving and the open source community

542
00:18:30,160 --> 00:18:32,880
is you know out there that's p4 so

543
00:18:32,880 --> 00:18:34,880
there's actually p4 implementation of

544
00:18:34,880 --> 00:18:37,760
this so you can do this if you use p4

545
00:18:37,760 --> 00:18:39,679
there's a pd4 implementation today

546
00:18:39,679 --> 00:18:41,760
there's linux fdio

547
00:18:41,760 --> 00:18:43,440
wireshark wireshark could see these

548
00:18:43,440 --> 00:18:45,039
packets and tell you what it is today

549
00:18:45,039 --> 00:18:48,240
tcp dump et cetera so there's broad

550
00:18:48,240 --> 00:18:49,840
industry support for this people are

551
00:18:49,840 --> 00:18:50,960
behind it

552
00:18:50,960 --> 00:18:53,039
um and standardization so this was

553
00:18:53,039 --> 00:18:56,799
submitted to the itf in march 22.

554
00:18:56,799 --> 00:18:59,039
this is the ipv6 version

555
00:18:59,039 --> 00:19:00,960
um and

556
00:19:00,960 --> 00:19:02,240
you know by the time you see this i

557
00:19:02,240 --> 00:19:04,160
believe the mpls draft should be

558
00:19:04,160 --> 00:19:06,160
actually submitted as well so that's

559
00:19:06,160 --> 00:19:08,240
where standardization is so in

560
00:19:08,240 --> 00:19:10,240
conclusion with patricia right so we

561
00:19:10,240 --> 00:19:12,039
have now we have the capability to

562
00:19:12,039 --> 00:19:15,200
deterministically detect ecmd pads right

563
00:19:15,200 --> 00:19:17,120
we're implementing this set line rate in

564
00:19:17,120 --> 00:19:19,200
the hardware based pipeline

565
00:19:19,200 --> 00:19:21,440
and ultra mtu efficiency it's got three

566
00:19:21,440 --> 00:19:23,200
pipes in every hop

567
00:19:23,200 --> 00:19:25,760
so if you take away two things from this

568
00:19:25,760 --> 00:19:28,720
it's that this is hardware friendly done

569
00:19:28,720 --> 00:19:29,919
at line rate

570
00:19:29,919 --> 00:19:32,080
and it's ultra efficient

571
00:19:32,080 --> 00:19:34,080
in terms of mtu right we don't want to

572
00:19:34,080 --> 00:19:35,600
fill our links

573
00:19:35,600 --> 00:19:37,760
with power traffic we want our customer

574
00:19:37,760 --> 00:19:39,520
or our application traffic to be on

575
00:19:39,520 --> 00:19:41,600
those links so the ecosystem has

576
00:19:41,600 --> 00:19:42,880
mentioned before

577
00:19:42,880 --> 00:19:45,039
it's rich right we have broadcom cisco

578
00:19:45,039 --> 00:19:47,200
and marvel and others

579
00:19:47,200 --> 00:19:48,559
since the beginning

580
00:19:48,559 --> 00:19:50,320
you know we've always wanted this is

581
00:19:50,320 --> 00:19:52,400
done in hardware at line rate the

582
00:19:52,400 --> 00:19:54,080
hardware vendors have evolved since the

583
00:19:54,080 --> 00:19:55,039
beginning

584
00:19:55,039 --> 00:19:57,919
strong operator just right i mentioned

585
00:19:57,919 --> 00:20:00,240
this prior people are using this testing

586
00:20:00,240 --> 00:20:02,240
it out now the open source is there the

587
00:20:02,240 --> 00:20:04,159
code is written it's out and it's

588
00:20:04,159 --> 00:20:06,799
currently being standardized by the ietf

589
00:20:06,799 --> 00:20:08,799
thank you very much and if you have any

590
00:20:08,799 --> 00:20:10,000
questions

591
00:20:10,000 --> 00:20:12,880
please let me know

592
00:20:13,520 --> 00:20:15,440
anyone locally has any questions you can

593
00:20:15,440 --> 00:20:17,760
step up to the microphone or use the

594
00:20:17,760 --> 00:20:19,120
chat

595
00:20:19,120 --> 00:20:21,039
um

596
00:20:21,039 --> 00:20:22,960
we do have a

597
00:20:22,960 --> 00:20:26,400
couple questions remotely

598
00:20:29,440 --> 00:20:32,480
see matthew pitak asks

599
00:20:32,480 --> 00:20:34,320
how does your time series database keep

600
00:20:34,320 --> 00:20:37,120
track of changes in interface ids when

601
00:20:37,120 --> 00:20:40,240
cards are inserted or removed in devices

602
00:20:40,240 --> 00:20:41,760
along the path

603
00:20:41,760 --> 00:20:44,000
or are interface ids generated at

604
00:20:44,000 --> 00:20:46,000
startup for every possible interface

605
00:20:46,000 --> 00:20:47,360
that can be

606
00:20:47,360 --> 00:20:50,080
put into every device at any point in

607
00:20:50,080 --> 00:20:52,559
its life

608
00:20:52,960 --> 00:20:55,679
so there's two questions there

609
00:20:55,679 --> 00:20:56,880
um

610
00:20:56,880 --> 00:21:00,600
say the first one again

611
00:21:03,840 --> 00:21:06,000
so

612
00:21:06,240 --> 00:21:08,400
if a new interface

613
00:21:08,400 --> 00:21:10,880
if a new live card was put in

614
00:21:10,880 --> 00:21:11,840
right

615
00:21:11,840 --> 00:21:13,919
so this is more like a configuration

616
00:21:13,919 --> 00:21:16,240
thing a template you could have but you

617
00:21:16,240 --> 00:21:18,320
could use the same value

618
00:21:18,320 --> 00:21:21,120
as before right that was in there if you

619
00:21:21,120 --> 00:21:23,440
swap like for like if you had a new line

620
00:21:23,440 --> 00:21:26,240
card um with new

621
00:21:26,240 --> 00:21:28,480
with more importance or something

622
00:21:28,480 --> 00:21:30,880
right you have to adjust the values in

623
00:21:30,880 --> 00:21:32,159
the node

624
00:21:32,159 --> 00:21:34,799
that's an implementation thing or like

625
00:21:34,799 --> 00:21:37,039
your

626
00:21:38,000 --> 00:21:40,240
you know how the interfaces are numbered

627
00:21:40,240 --> 00:21:42,400
etc they don't have to be sequential

628
00:21:42,400 --> 00:21:45,280
they can be anything but you would if a

629
00:21:45,280 --> 00:21:48,000
session was using an id for an interface

630
00:21:48,000 --> 00:21:50,000
and you used id1 and you put in

631
00:21:50,000 --> 00:21:52,080
something and changed it to two

632
00:21:52,080 --> 00:21:55,120
right that particular session would

633
00:21:55,120 --> 00:21:58,240
essentially be restarted you couldn't on

634
00:21:58,240 --> 00:22:00,320
the fly that's not going to change right

635
00:22:00,320 --> 00:22:02,080
so

636
00:22:02,080 --> 00:22:04,240
if a new line card is the blind car gets

637
00:22:04,240 --> 00:22:06,240
put in or anything like that

638
00:22:06,240 --> 00:22:08,240
a new session and session id would have

639
00:22:08,240 --> 00:22:10,159
to start

640
00:22:10,159 --> 00:22:11,919
but that's an implementation specific

641
00:22:11,919 --> 00:22:13,760
thing i suspect

642
00:22:13,760 --> 00:22:15,600
you know some vendors may have a crafty

643
00:22:15,600 --> 00:22:17,280
way around that

644
00:22:17,280 --> 00:22:20,760
i'm not a vendor

645
00:22:26,320 --> 00:22:29,679
any other questions locally

646
00:22:29,679 --> 00:22:32,880
uh we do have a

647
00:22:32,960 --> 00:22:34,320
um

648
00:22:34,320 --> 00:22:37,600
comment remotely from steve rodriguez

649
00:22:37,600 --> 00:22:40,400
uh he just comments that this is another

650
00:22:40,400 --> 00:22:42,080
type of packet to block at the edge of

651
00:22:42,080 --> 00:22:43,760
the network we don't want to be flooded

652
00:22:43,760 --> 00:22:44,559
with

653
00:22:44,559 --> 00:22:48,480
by fake path tracing packets

654
00:22:50,159 --> 00:22:53,159
okay

655
00:23:00,159 --> 00:23:03,440
is that a question or a comment

656
00:23:03,440 --> 00:23:04,640
i

657
00:23:04,640 --> 00:23:06,480
don't think we have any other questions

658
00:23:06,480 --> 00:23:08,559
remotely right now

659
00:23:08,559 --> 00:23:12,158
so any questions locally

660
00:23:18,480 --> 00:23:20,080
all right i'd like to thank you again

661
00:23:20,080 --> 00:23:22,000
for presenting

662
00:23:22,000 --> 00:23:25,049
[Music]

663
00:23:28,080 --> 00:23:31,960
thank you thanks everybody

664
00:23:32,870 --> 00:23:37,189
[Music]

