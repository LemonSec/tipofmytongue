1
00:00:00,000 --> 00:00:04,960
[Music]

2
00:00:04,960 --> 00:00:07,520
hello my name is ron bonica from juniper

3
00:00:07,520 --> 00:00:08,639
networks

4
00:00:08,639 --> 00:00:10,080
and today we're going to go over the

5
00:00:10,080 --> 00:00:13,040
fundamentals of ipv6

6
00:00:13,040 --> 00:00:15,200
i understand that some of you

7
00:00:15,200 --> 00:00:17,199
are new to ipv6 some of you are

8
00:00:17,199 --> 00:00:19,359
considering deployment some of you are

9
00:00:19,359 --> 00:00:22,400
ipv6 experts so i'll try to talk to the

10
00:00:22,400 --> 00:00:23,920
entire audience

11
00:00:23,920 --> 00:00:27,680
first what's the motivation for ipv6

12
00:00:27,680 --> 00:00:30,960
when ipv6 was first conceived 27 years

13
00:00:30,960 --> 00:00:33,840
ago the motivation was big address base

14
00:00:33,840 --> 00:00:35,760
and a few other things we're going to

15
00:00:35,760 --> 00:00:39,920
take a look at a few aspects of ipv6

16
00:00:39,920 --> 00:00:41,440
and the first is the addressing

17
00:00:41,440 --> 00:00:43,600
architecture clearly the motivation was

18
00:00:43,600 --> 00:00:45,360
big addresses so let's take a look at

19
00:00:45,360 --> 00:00:47,039
those big addresses

20
00:00:47,039 --> 00:00:51,199
an ipv6 address is a 128-bit identifier

21
00:00:51,199 --> 00:00:54,079
for an interface or a set of interfaces

22
00:00:54,079 --> 00:00:56,320
this definition is frequently

23
00:00:56,320 --> 00:00:58,000
stretched by encoding other things in

24
00:00:58,000 --> 00:01:00,640
the address for instance i've seen

25
00:01:00,640 --> 00:01:02,879
diffserv uh additional diffserv code

26
00:01:02,879 --> 00:01:04,640
points addressed uh encoded in an

27
00:01:04,640 --> 00:01:05,760
address

28
00:01:05,760 --> 00:01:07,520
we've seen um

29
00:01:07,520 --> 00:01:09,439
segment routing functions and arguments

30
00:01:09,439 --> 00:01:11,119
included in the address

31
00:01:11,119 --> 00:01:13,840
but the canonical definition

32
00:01:13,840 --> 00:01:15,280
is

33
00:01:15,280 --> 00:01:16,720
um

34
00:01:16,720 --> 00:01:18,560
an identifier for an interface or a set

35
00:01:18,560 --> 00:01:20,799
of interfaces

36
00:01:20,799 --> 00:01:22,400
now

37
00:01:22,400 --> 00:01:27,040
128-bit address is pretty intimidating

38
00:01:27,040 --> 00:01:29,040
how do we write them down

39
00:01:29,040 --> 00:01:31,040
how do we remember them

40
00:01:31,040 --> 00:01:33,360
well the preferred format

41
00:01:33,360 --> 00:01:35,600
is in the first bullet point here

42
00:01:35,600 --> 00:01:38,159
x colon the x colon x equals an x square

43
00:01:38,159 --> 00:01:40,400
and x square when x cool and x

44
00:01:40,400 --> 00:01:43,119
where each x is

45
00:01:43,119 --> 00:01:46,159
one to four hexadecimal digits

46
00:01:46,159 --> 00:01:48,640
uh eight 16 bit pieces of the address

47
00:01:48,640 --> 00:01:50,560
it's even hard to say that so let's take

48
00:01:50,560 --> 00:01:52,479
a look at some examples

49
00:01:52,479 --> 00:01:54,479
a b c d e f

50
00:01:54,479 --> 00:01:56,479
o 1 2 3 4

51
00:01:56,479 --> 00:01:59,920
what you're seeing here is that

52
00:01:59,920 --> 00:02:02,719
between each colon

53
00:02:02,719 --> 00:02:04,880
you're seeing something that represents

54
00:02:04,880 --> 00:02:07,840
16 bits

55
00:02:07,840 --> 00:02:09,199
letter

56
00:02:09,199 --> 00:02:10,959
represents four

57
00:02:10,959 --> 00:02:13,360
so the letter a represents the hex that

58
00:02:13,360 --> 00:02:15,040
uh

59
00:02:15,040 --> 00:02:18,319
represents four bits those letter b d

60
00:02:18,319 --> 00:02:20,560
now

61
00:02:20,560 --> 00:02:23,280
it's not necessary

62
00:02:23,280 --> 00:02:26,160
to write the leading zeros uh

63
00:02:26,160 --> 00:02:27,599
in each field

64
00:02:27,599 --> 00:02:29,520
but there must be at least one numeral

65
00:02:29,520 --> 00:02:31,760
in each field so let's take a look at

66
00:02:31,760 --> 00:02:34,959
this address the second one here 201 dba

67
00:02:34,959 --> 00:02:36,959
0 0 8

68
00:02:36,959 --> 00:02:39,440
800

69
00:02:39,680 --> 00:02:42,239
200 c and so on

70
00:02:42,239 --> 00:02:44,640
well if you take a look at the zeros we

71
00:02:44,640 --> 00:02:48,000
didn't have to write 0 0 0 0

72
00:02:48,000 --> 00:02:49,040
um

73
00:02:49,040 --> 00:02:51,840
only have to write the most significant

74
00:02:51,840 --> 00:02:53,280
uh

75
00:02:53,280 --> 00:02:54,800
the most significant bits and make sure

76
00:02:54,800 --> 00:02:57,680
that there's at least one digit in there

77
00:02:57,680 --> 00:03:00,000
now let's say for a moment that you have

78
00:03:00,000 --> 00:03:02,239
a long run of zeros

79
00:03:02,239 --> 00:03:05,280
for instance you have something like

80
00:03:05,280 --> 00:03:08,800
um 201 dv8008

81
00:03:08,800 --> 00:03:11,440
800 200

82
00:03:11,440 --> 00:03:12,480
well

83
00:03:12,480 --> 00:03:14,879
you can compress those two zeros with

84
00:03:14,879 --> 00:03:16,840
two colons

85
00:03:16,840 --> 00:03:22,159
so 201 dba colon colon 8 800

86
00:03:22,159 --> 00:03:28,159
uh 200 c 401 uh 417 a

87
00:03:28,159 --> 00:03:30,080
is exactly the same address as the one

88
00:03:30,080 --> 00:03:31,440
above it

89
00:03:31,440 --> 00:03:34,000
um that makes writing the addresses much

90
00:03:34,000 --> 00:03:36,239
much easier because you'll frequently

91
00:03:36,239 --> 00:03:38,959
find long runs of zeros in an ipv6

92
00:03:38,959 --> 00:03:40,080
address

93
00:03:40,080 --> 00:03:41,920
now you'll notice as i stumbled trying

94
00:03:41,920 --> 00:03:43,680
to pronounce the addresses

95
00:03:43,680 --> 00:03:45,200
that yeah they're still long they're

96
00:03:45,200 --> 00:03:48,080
still hard to talk about but

97
00:03:48,080 --> 00:03:51,040
using this double colon uh strategy

98
00:03:51,040 --> 00:03:53,280
really does help

99
00:03:53,280 --> 00:03:55,760
there's an alternative form to represent

100
00:03:55,760 --> 00:03:58,480
a ipv6 address

101
00:03:58,480 --> 00:04:01,360
that's useful when you're embedding ipv4

102
00:04:01,360 --> 00:04:04,959
addresses inside an ipv6 address

103
00:04:04,959 --> 00:04:06,799
um if you take a look at the address in

104
00:04:06,799 --> 00:04:08,239
the first bullet

105
00:04:08,239 --> 00:04:11,599
x colon x colon x colon x colon x

106
00:04:11,599 --> 00:04:12,560
colon

107
00:04:12,560 --> 00:04:16,320
d period d period d period d

108
00:04:16,320 --> 00:04:18,798
well what you're actually seeing

109
00:04:18,798 --> 00:04:21,040
is the high order bits

110
00:04:21,040 --> 00:04:24,080
are just plain old

111
00:04:24,080 --> 00:04:26,880
ipv6 addressing where each x represents

112
00:04:26,880 --> 00:04:28,639
16 bits

113
00:04:28,639 --> 00:04:31,199
and the low order bits are plain old

114
00:04:31,199 --> 00:04:33,360
ipv4 addressing

115
00:04:33,360 --> 00:04:35,520
where each d

116
00:04:35,520 --> 00:04:37,120
represents

117
00:04:37,120 --> 00:04:38,400
eight bits

118
00:04:38,400 --> 00:04:41,040
and that's you know very convenient in

119
00:04:41,040 --> 00:04:43,120
environments where you're

120
00:04:43,120 --> 00:04:44,479
using some

121
00:04:44,479 --> 00:04:47,040
transition mechanisms to make ipv4 and

122
00:04:47,040 --> 00:04:50,400
ipv6 interoperate

123
00:04:50,400 --> 00:04:52,240
as it turns out there are many ways to

124
00:04:52,240 --> 00:04:55,280
represent some ipv6 addresses the rules

125
00:04:55,280 --> 00:04:56,960
that i just gave you

126
00:04:56,960 --> 00:04:59,360
really aren't enough to give you a

127
00:04:59,360 --> 00:05:01,360
common way to represent everything for

128
00:05:01,360 --> 00:05:02,479
instance

129
00:05:02,479 --> 00:05:05,199
let's say an address has

130
00:05:05,199 --> 00:05:07,120
four zeros in it

131
00:05:07,120 --> 00:05:08,720
two of them are

132
00:05:08,720 --> 00:05:10,479
adjacent to each other

133
00:05:10,479 --> 00:05:12,560
another two are adjacent to each other

134
00:05:12,560 --> 00:05:14,560
where do you put the cold uh code

135
00:05:14,560 --> 00:05:16,400
because you can only have one call where

136
00:05:16,400 --> 00:05:18,000
you put the double goal in

137
00:05:18,000 --> 00:05:19,759
because you can only have one double

138
00:05:19,759 --> 00:05:20,880
colon

139
00:05:20,880 --> 00:05:22,240
in an address

140
00:05:22,240 --> 00:05:26,400
well crfc 59 25 for reference

141
00:05:26,400 --> 00:05:27,759
recommendations

142
00:05:27,759 --> 00:05:29,520
it's really a good thing if everybody

143
00:05:29,520 --> 00:05:32,800
abides by 59.25

144
00:05:32,800 --> 00:05:34,639
because then repping

145
00:05:34,639 --> 00:05:39,840
on an ipv6 address becomes

146
00:05:40,000 --> 00:05:42,160
a tractable problem

147
00:05:42,160 --> 00:05:45,280
so now that we've talked about these uh

148
00:05:45,280 --> 00:05:47,520
big tongue twisters of addresses let's

149
00:05:47,520 --> 00:05:49,600
talk a little bit about ipv6 address

150
00:05:49,600 --> 00:05:50,960
types

151
00:05:50,960 --> 00:05:53,600
we have unicast anycast

152
00:05:53,600 --> 00:05:55,759
and multicast

153
00:05:55,759 --> 00:05:58,000
a unicast address identifies a single

154
00:05:58,000 --> 00:05:59,280
interface

155
00:05:59,280 --> 00:06:00,960
and when a packet is sent to a uni

156
00:06:00,960 --> 00:06:03,440
unicast address it's delivered to the

157
00:06:03,440 --> 00:06:07,039
interface identified by that address

158
00:06:07,039 --> 00:06:09,840
and anycast address

159
00:06:09,840 --> 00:06:13,440
um identifies a set of interfaces

160
00:06:13,440 --> 00:06:15,440
and when a packet is sent

161
00:06:15,440 --> 00:06:16,880
to an anycast

162
00:06:16,880 --> 00:06:19,280
address it's delivered to one of those

163
00:06:19,280 --> 00:06:21,759
uh one of those interfaces but only one

164
00:06:21,759 --> 00:06:22,639
of them

165
00:06:22,639 --> 00:06:25,120
now generally it's delivered

166
00:06:25,120 --> 00:06:26,560
to

167
00:06:26,560 --> 00:06:29,840
the interface that is closest as defined

168
00:06:29,840 --> 00:06:31,919
by a routing protocol

169
00:06:31,919 --> 00:06:34,080
and then there's a multicast address a

170
00:06:34,080 --> 00:06:37,440
multicast address is an address that

171
00:06:37,440 --> 00:06:39,600
identifies a set of interfaces

172
00:06:39,600 --> 00:06:41,759
when a packet sent to a multicast

173
00:06:41,759 --> 00:06:43,759
address it's delivered to all of the

174
00:06:43,759 --> 00:06:45,680
interfaces

175
00:06:45,680 --> 00:06:47,120
that's the big difference between any

176
00:06:47,120 --> 00:06:48,800
cast and multicast

177
00:06:48,800 --> 00:06:50,800
any cache was set to one of many

178
00:06:50,800 --> 00:06:51,919
addresses

179
00:06:51,919 --> 00:06:53,919
multicast was sent to many of many

180
00:06:53,919 --> 00:06:55,360
addresses

181
00:06:55,360 --> 00:06:57,759
there are no broadcast addresses in ipv6

182
00:06:57,759 --> 00:06:59,440
that functionality has been

183
00:06:59,440 --> 00:07:01,280
subsumed by multicast

184
00:07:01,280 --> 00:07:04,240
now like ipv4 we have this concept of

185
00:07:04,240 --> 00:07:07,759
address scopes in ipv6

186
00:07:07,759 --> 00:07:09,599
a globally unique

187
00:07:09,599 --> 00:07:12,000
address is called a

188
00:07:12,000 --> 00:07:15,120
global unicast address the gua

189
00:07:15,120 --> 00:07:17,039
it's globally unique there's only one of

190
00:07:17,039 --> 00:07:18,800
them around the whole planet or the

191
00:07:18,800 --> 00:07:20,080
whole galaxy if you're doing

192
00:07:20,080 --> 00:07:22,000
interplanetary stuff

193
00:07:22,000 --> 00:07:24,400
um and it's fully routable a router will

194
00:07:24,400 --> 00:07:25,759
route a packet

195
00:07:25,759 --> 00:07:26,960
that has

196
00:07:26,960 --> 00:07:31,360
a gua source and a gua destination

197
00:07:31,360 --> 00:07:34,720
the next is a link local address

198
00:07:34,720 --> 00:07:38,080
the linked local address is unique to a

199
00:07:38,080 --> 00:07:38,880
link

200
00:07:38,880 --> 00:07:40,639
now what does that mean

201
00:07:40,639 --> 00:07:41,599
well

202
00:07:41,599 --> 00:07:44,080
let's say you have

203
00:07:44,080 --> 00:07:47,759
a node with five interfaces

204
00:07:47,759 --> 00:07:49,680
um

205
00:07:49,680 --> 00:07:51,280
it has

206
00:07:51,280 --> 00:07:54,560
it's connected to five uh interface on

207
00:07:54,560 --> 00:07:56,800
interfaces on their neighbors and they

208
00:07:56,800 --> 00:07:59,759
may all have the same address

209
00:07:59,759 --> 00:08:01,120
now

210
00:08:01,120 --> 00:08:02,479
does that mean they're all the same

211
00:08:02,479 --> 00:08:04,319
interface does it mean they're multicast

212
00:08:04,319 --> 00:08:06,800
any cast no it doesn't

213
00:08:06,800 --> 00:08:08,960
what it means is the scope of that

214
00:08:08,960 --> 00:08:12,639
address is limited to the interface

215
00:08:12,639 --> 00:08:14,479
when you when you see a link local

216
00:08:14,479 --> 00:08:16,400
address

217
00:08:16,400 --> 00:08:18,720
you know that it is unique only to the

218
00:08:18,720 --> 00:08:19,599
link

219
00:08:19,599 --> 00:08:21,759
routers won't forward packets that have

220
00:08:21,759 --> 00:08:24,160
link local source or

221
00:08:24,160 --> 00:08:25,680
destination addresses what does that

222
00:08:25,680 --> 00:08:26,400
mean

223
00:08:26,400 --> 00:08:29,120
a router can originate a packet with a

224
00:08:29,120 --> 00:08:31,919
link local source or destination

225
00:08:31,919 --> 00:08:34,719
and send it to a neighbor

226
00:08:34,719 --> 00:08:37,760
but if it receives a packet

227
00:08:37,760 --> 00:08:39,919
with a link local source or destination

228
00:08:39,919 --> 00:08:42,799
it will not forward it on to a new

229
00:08:42,799 --> 00:08:44,320
um because

230
00:08:44,320 --> 00:08:47,279
there's just not enough context to know

231
00:08:47,279 --> 00:08:48,720
which neighbor there is and even if

232
00:08:48,720 --> 00:08:50,080
there were

233
00:08:50,080 --> 00:08:52,000
how would the neighbor ever get a packet

234
00:08:52,000 --> 00:08:54,080
back to the source because the address

235
00:08:54,080 --> 00:08:55,440
is always global

236
00:08:55,440 --> 00:08:56,959
now these link locals you'll see that

237
00:08:56,959 --> 00:08:58,800
they're very useful for long-linked

238
00:08:58,800 --> 00:09:01,200
protocols like neighbor discovery we'll

239
00:09:01,200 --> 00:09:03,760
talk about that in a little while

240
00:09:03,760 --> 00:09:07,120
we have a couple more scopes

241
00:09:07,440 --> 00:09:10,000
one is called the unique local unicast

242
00:09:10,000 --> 00:09:11,279
address

243
00:09:11,279 --> 00:09:13,440
it's guaranteed to be unique within its

244
00:09:13,440 --> 00:09:15,120
uh domain

245
00:09:15,120 --> 00:09:17,440
it might even be unique globally but

246
00:09:17,440 --> 00:09:19,120
there are no guarantees

247
00:09:19,120 --> 00:09:21,200
and it's used to isolate sub-networks

248
00:09:21,200 --> 00:09:23,200
from the global internet

249
00:09:23,200 --> 00:09:25,279
now when people see ula they tend to say

250
00:09:25,279 --> 00:09:27,920
oh yeah this is just like an rfc 1918

251
00:09:27,920 --> 00:09:28,959
address

252
00:09:28,959 --> 00:09:32,320
well yes but not exactly

253
00:09:32,320 --> 00:09:33,920
almost and we'll talk about the

254
00:09:33,920 --> 00:09:36,399
differences between ula and

255
00:09:36,399 --> 00:09:39,279
rfc 1918 later

256
00:09:39,279 --> 00:09:42,320
finally we have an unspecified address

257
00:09:42,320 --> 00:09:44,959
that addresses zero zero zero zero zero

258
00:09:44,959 --> 00:09:46,320
or wall zero

259
00:09:46,320 --> 00:09:47,760
um

260
00:09:47,760 --> 00:09:50,240
it indicates that the node that is

261
00:09:50,240 --> 00:09:51,279
speaking

262
00:09:51,279 --> 00:09:53,920
uh has not yet been assigned an address

263
00:09:53,920 --> 00:09:56,080
it's used in neighbor discovery

264
00:09:56,080 --> 00:09:58,080
and of course a router won't afford a

265
00:09:58,080 --> 00:10:00,880
packet that has an unspecified

266
00:10:00,880 --> 00:10:04,399
source or destination um

267
00:10:04,399 --> 00:10:06,720
for fairly obvious reason

268
00:10:06,720 --> 00:10:08,800
uh one final scope is the loopback

269
00:10:08,800 --> 00:10:10,160
address

270
00:10:10,160 --> 00:10:11,760
golden golden one

271
00:10:11,760 --> 00:10:14,560
uh you should never see this

272
00:10:14,560 --> 00:10:18,880
on on the wire loopbacks are used

273
00:10:18,880 --> 00:10:22,160
for sending when when devices send

274
00:10:22,160 --> 00:10:23,920
packets to themselves

275
00:10:23,920 --> 00:10:26,240
they'll use this loopback address

276
00:10:26,240 --> 00:10:29,600
but except in one funny exception case

277
00:10:29,600 --> 00:10:32,399
uh that being mpls ping

278
00:10:32,399 --> 00:10:34,070
you won't see a

279
00:10:34,070 --> 00:10:35,600
[Music]

280
00:10:35,600 --> 00:10:36,800
loopback

281
00:10:36,800 --> 00:10:38,480
address on the wire

282
00:10:38,480 --> 00:10:39,519
and

283
00:10:39,519 --> 00:10:42,399
an mpls ping when you see it in the wire

284
00:10:42,399 --> 00:10:44,839
it will be encapsulated in something

285
00:10:44,839 --> 00:10:48,000
else okay let's talk about what these

286
00:10:48,000 --> 00:10:50,480
addresses look like

287
00:10:50,480 --> 00:10:51,519
well

288
00:10:51,519 --> 00:10:54,560
a gui a global unicast address

289
00:10:54,560 --> 00:10:57,200
a standard one

290
00:10:57,200 --> 00:10:59,519
has a global routing prefix

291
00:10:59,519 --> 00:11:01,120
and this

292
00:11:01,120 --> 00:11:04,640
a subnet network and this

293
00:11:04,640 --> 00:11:06,079
and an interface

294
00:11:06,079 --> 00:11:10,240
that is 128 minus n minus m bits

295
00:11:10,240 --> 00:11:15,200
um and in this case n plus m must be 64

296
00:11:15,200 --> 00:11:16,640
and the interface

297
00:11:16,640 --> 00:11:19,040
must also equal 64.

298
00:11:19,040 --> 00:11:21,120
but there are exceptions

299
00:11:21,120 --> 00:11:22,800
um

300
00:11:22,800 --> 00:11:24,640
there's an exception for point-to-point

301
00:11:24,640 --> 00:11:26,000
interfaces

302
00:11:26,000 --> 00:11:29,040
rfc 61-60

303
00:11:29,040 --> 00:11:31,600
um and when other things are encoded in

304
00:11:31,600 --> 00:11:34,079
the low order bits of the

305
00:11:34,079 --> 00:11:35,839
ipv6 address

306
00:11:35,839 --> 00:11:38,640
you will also see um

307
00:11:38,640 --> 00:11:40,079
you know this rule

308
00:11:40,079 --> 00:11:42,320
bent a little bit

309
00:11:42,320 --> 00:11:45,680
we also have uh ipv4 mapped ipv6

310
00:11:45,680 --> 00:11:47,279
addresses

311
00:11:47,279 --> 00:11:50,000
they start off with 80 bits of

312
00:11:50,000 --> 00:11:50,959
um

313
00:11:50,959 --> 00:11:52,880
zeros

314
00:11:52,880 --> 00:11:55,279
16 bits of ones

315
00:11:55,279 --> 00:12:00,880
and finally 32 bits of an ipv4 address

316
00:12:00,880 --> 00:12:02,880
um ulas

317
00:12:02,880 --> 00:12:05,200
start with fc 0 0

318
00:12:05,200 --> 00:12:06,720
7 bits

319
00:12:06,720 --> 00:12:09,839
and ldit that talks about how the global

320
00:12:09,839 --> 00:12:12,320
id was generated

321
00:12:12,320 --> 00:12:14,320
and right now there's only one way to do

322
00:12:14,320 --> 00:12:15,760
it i think with a pseudomorph

323
00:12:15,760 --> 00:12:17,200
pseudorandom number generator or

324
00:12:17,200 --> 00:12:18,720
something like that

325
00:12:18,720 --> 00:12:20,639
then there's 40 bits

326
00:12:20,639 --> 00:12:22,720
that

327
00:12:22,720 --> 00:12:25,279
has this global id

328
00:12:25,279 --> 00:12:28,320
the global id identifies the sub uh the

329
00:12:28,320 --> 00:12:29,839
sub network

330
00:12:29,839 --> 00:12:30,639
now

331
00:12:30,639 --> 00:12:32,320
one thing that

332
00:12:32,320 --> 00:12:34,480
we might note here is global id is a bit

333
00:12:34,480 --> 00:12:36,160
of a misnomer

334
00:12:36,160 --> 00:12:39,839
it was generated by some random method

335
00:12:39,839 --> 00:12:41,920
how do you know that it's global well

336
00:12:41,920 --> 00:12:43,680
you really don't

337
00:12:43,680 --> 00:12:44,639
um

338
00:12:44,639 --> 00:12:46,480
you just know that 2 to the 40th is a

339
00:12:46,480 --> 00:12:49,360
really big number and it probably is

340
00:12:49,360 --> 00:12:52,720
and then an interface i need 64 bits

341
00:12:52,720 --> 00:12:56,320
link local starts with fe-8 0 10 bits

342
00:12:56,320 --> 00:13:00,399
54 zeros and 64-bit

343
00:13:00,399 --> 00:13:03,279
64-bit interface id

344
00:13:03,279 --> 00:13:04,079
now

345
00:13:04,079 --> 00:13:05,760
you might be seeing a pattern here

346
00:13:05,760 --> 00:13:09,040
everybody has a 64-bit interface id

347
00:13:09,040 --> 00:13:10,959
and some protocols you're going to see

348
00:13:10,959 --> 00:13:12,800
at the end of the presentation actually

349
00:13:12,800 --> 00:13:14,720
rely on that

350
00:13:14,720 --> 00:13:16,880
we'll talk about those when we get there

351
00:13:16,880 --> 00:13:18,399
a couple more

352
00:13:18,399 --> 00:13:20,560
special unicast addresses

353
00:13:20,560 --> 00:13:22,639
uh the loopback golden colon one

354
00:13:22,639 --> 00:13:25,920
unspecified colon colon zero

355
00:13:25,920 --> 00:13:27,440
let's talk about multicast address

356
00:13:27,440 --> 00:13:28,800
formats

357
00:13:28,800 --> 00:13:31,760
they always start out with eight bits of

358
00:13:31,760 --> 00:13:33,120
ff

359
00:13:33,120 --> 00:13:35,519
flags four bits um three of them are

360
00:13:35,519 --> 00:13:37,120
used

361
00:13:37,120 --> 00:13:41,199
uh one talks about roundy rendezvous uh

362
00:13:41,199 --> 00:13:43,760
addresses being embedded in the address

363
00:13:43,760 --> 00:13:46,000
how the prefix is assigned transient and

364
00:13:46,000 --> 00:13:47,600
we won't go into those in any great

365
00:13:47,600 --> 00:13:49,600
detail today because

366
00:13:49,600 --> 00:13:51,519
you know multitask is almost beyond the

367
00:13:51,519 --> 00:13:53,920
scope of this uh conversation i just

368
00:13:53,920 --> 00:13:54,959
want you to know that there is a

369
00:13:54,959 --> 00:13:56,880
multicast address

370
00:13:56,880 --> 00:13:58,639
and we have some well-known multicast

371
00:13:58,639 --> 00:14:02,480
addresses all nodes all routers

372
00:14:02,480 --> 00:14:04,320
now let's talk about the addressing

373
00:14:04,320 --> 00:14:05,360
model

374
00:14:05,360 --> 00:14:07,360
this may seem obvious but it's really

375
00:14:07,360 --> 00:14:08,720
important

376
00:14:08,720 --> 00:14:11,040
ipv6 addresses of all types were

377
00:14:11,040 --> 00:14:14,000
assigned to interfaces not nodes

378
00:14:14,000 --> 00:14:16,880
that includes the loopback interface

379
00:14:16,880 --> 00:14:18,959
it's in it's assigned

380
00:14:18,959 --> 00:14:22,720
to the interface and not the mode uh no

381
00:14:22,720 --> 00:14:24,959
all interfaces are required to have at

382
00:14:24,959 --> 00:14:28,320
least one link local unicap address

383
00:14:28,320 --> 00:14:30,959
so no matter what an interface is

384
00:14:30,959 --> 00:14:33,519
it's got a link local

385
00:14:33,519 --> 00:14:35,920
a single interface may also have

386
00:14:35,920 --> 00:14:39,839
multiple ipv6 addresses of any type

387
00:14:39,839 --> 00:14:43,199
unicast any cast multicast uh or of any

388
00:14:43,199 --> 00:14:45,120
scope

389
00:14:45,120 --> 00:14:46,079
so

390
00:14:46,079 --> 00:14:48,079
an interface might have

391
00:14:48,079 --> 00:14:50,079
a unique you know three unicast

392
00:14:50,079 --> 00:14:51,279
addresses

393
00:14:51,279 --> 00:14:53,120
one of which is link local one of which

394
00:14:53,120 --> 00:14:56,160
is global one of which is ula

395
00:14:56,160 --> 00:14:58,480
it may subscribe to a few multicast

396
00:14:58,480 --> 00:15:00,320
groups so it has a couple multicast

397
00:15:00,320 --> 00:15:02,480
addresses and it might have an anycast

398
00:15:02,480 --> 00:15:05,040
address too

399
00:15:05,040 --> 00:15:07,760
uh unicast addresses with a scope

400
00:15:07,760 --> 00:15:09,920
greater than link local

401
00:15:09,920 --> 00:15:12,720
are not needed for interfaces that did

402
00:15:12,720 --> 00:15:15,199
not originate or consume packets on

403
00:15:15,199 --> 00:15:16,320
their own

404
00:15:16,320 --> 00:15:18,480
so let's say for a minute

405
00:15:18,480 --> 00:15:22,079
let's say for a minute you have

406
00:15:22,079 --> 00:15:25,040
a router and the router has a loopback

407
00:15:25,040 --> 00:15:28,320
address it consumes packets so it needs

408
00:15:28,320 --> 00:15:29,759
a

409
00:15:29,759 --> 00:15:31,920
say a gua address

410
00:15:31,920 --> 00:15:32,959
but

411
00:15:32,959 --> 00:15:35,199
all of its interfaces they can actually

412
00:15:35,199 --> 00:15:38,160
get away with having just

413
00:15:38,160 --> 00:15:39,759
there's an exception here for link

414
00:15:39,759 --> 00:15:41,199
average group

415
00:15:41,199 --> 00:15:43,920
sometimes two or three interfaces behave

416
00:15:43,920 --> 00:15:45,839
as one then they all need their own

417
00:15:45,839 --> 00:15:47,120
address

418
00:15:47,120 --> 00:15:49,279
so let's talk a little bit

419
00:15:49,279 --> 00:15:51,040
the amazing thing is the motivation for

420
00:15:51,040 --> 00:15:52,839
ipv6 here

421
00:15:52,839 --> 00:15:56,399
was to have big addresses

422
00:15:56,399 --> 00:15:58,720
and we spent a good

423
00:15:58,720 --> 00:16:00,800
half of this presentation

424
00:16:00,800 --> 00:16:02,959
talking about what an address looks like

425
00:16:02,959 --> 00:16:04,880
and how it's built and

426
00:16:04,880 --> 00:16:07,040
what its semantics are now let's talk a

427
00:16:07,040 --> 00:16:09,120
little bit about the ipv6 protocol

428
00:16:09,120 --> 00:16:10,639
itself

429
00:16:10,639 --> 00:16:11,839
well

430
00:16:11,839 --> 00:16:14,399
the protocol like any other protocol

431
00:16:14,399 --> 00:16:16,160
provides services

432
00:16:16,160 --> 00:16:18,880
and in ipv6 we can talk about basic

433
00:16:18,880 --> 00:16:20,079
services

434
00:16:20,079 --> 00:16:23,519
and extended services the basic ones are

435
00:16:23,519 --> 00:16:25,839
next stop identification and forwarding

436
00:16:25,839 --> 00:16:27,600
get a packet look at it decide where to

437
00:16:27,600 --> 00:16:28,880
send it

438
00:16:28,880 --> 00:16:30,160
if servant

439
00:16:30,160 --> 00:16:31,519
once you've found the interface you want

440
00:16:31,519 --> 00:16:32,800
to send it on

441
00:16:32,800 --> 00:16:34,800
what cue do you want to put it in

442
00:16:34,800 --> 00:16:36,480
uh ecken you want to have any kind of

443
00:16:36,480 --> 00:16:39,199
explicit congestion notification

444
00:16:39,199 --> 00:16:41,680
flow identification important for equal

445
00:16:41,680 --> 00:16:43,279
cost multipath we'll talk about that

446
00:16:43,279 --> 00:16:44,800
later

447
00:16:44,800 --> 00:16:46,079
loop well it's not so much loop

448
00:16:46,079 --> 00:16:48,160
prevention it's

449
00:16:48,160 --> 00:16:49,920
a certain amount of looping can go on in

450
00:16:49,920 --> 00:16:52,560
either ipv4 or ipv6 but it can't go on

451
00:16:52,560 --> 00:16:54,079
forever so we'll solve it with

452
00:16:54,079 --> 00:16:55,440
preventive

453
00:16:55,440 --> 00:16:58,240
um and delivery to upper layer protocol

454
00:16:58,240 --> 00:17:00,800
those are all the basic services

455
00:17:00,800 --> 00:17:03,519
um there are also some extended services

456
00:17:03,519 --> 00:17:05,439
traffic steering fragmentation

457
00:17:05,439 --> 00:17:07,280
authentication encryption

458
00:17:07,280 --> 00:17:08,400
and

459
00:17:08,400 --> 00:17:10,640
extensions that make them in the future

460
00:17:10,640 --> 00:17:13,119
these are all optional um

461
00:17:13,119 --> 00:17:14,400
every package

462
00:17:14,400 --> 00:17:16,880
ipv6 will deliver

463
00:17:16,880 --> 00:17:19,119
basic services to every packet but

464
00:17:19,119 --> 00:17:21,520
extended services only to the ones that

465
00:17:21,520 --> 00:17:23,679
have extensions in their header

466
00:17:23,679 --> 00:17:26,079
to request them so let's take a look at

467
00:17:26,079 --> 00:17:28,559
these basic services we said there's a

468
00:17:28,559 --> 00:17:31,120
basic ipv6 header

469
00:17:31,120 --> 00:17:33,679
it has a version it has toss bits and

470
00:17:33,679 --> 00:17:36,320
the toss bits are diff serve and ecken

471
00:17:36,320 --> 00:17:38,400
it has a flow label that identifies

472
00:17:38,400 --> 00:17:39,679
clothes

473
00:17:39,679 --> 00:17:42,000
a payload length the next header

474
00:17:42,000 --> 00:17:44,160
a hop limit which is what we call the

475
00:17:44,160 --> 00:17:45,520
ttl now

476
00:17:45,520 --> 00:17:47,120
source address then a destination

477
00:17:47,120 --> 00:17:48,240
address

478
00:17:48,240 --> 00:17:48,960
so

479
00:17:48,960 --> 00:17:50,960
let's talk a little bit

480
00:17:50,960 --> 00:17:52,160
about

481
00:17:52,160 --> 00:17:54,240
some of the advantages of this

482
00:17:54,240 --> 00:17:55,840
actually let's go back to this slide a

483
00:17:55,840 --> 00:17:56,640
bit

484
00:17:56,640 --> 00:17:59,039
you'll find that there are fewer fields

485
00:17:59,039 --> 00:18:01,039
in the ipv6 center than there were on

486
00:18:01,039 --> 00:18:02,960
the ipv4 header

487
00:18:02,960 --> 00:18:07,360
well how can the ipv how can ipv6

488
00:18:07,360 --> 00:18:09,760
be an improvement on ipv4

489
00:18:09,760 --> 00:18:12,640
that has fewer fields and etc well we'll

490
00:18:12,640 --> 00:18:14,960
see in just a second

491
00:18:14,960 --> 00:18:16,640
but before we go there

492
00:18:16,640 --> 00:18:17,919
let's talk about

493
00:18:17,919 --> 00:18:20,640
ipv section icm uh

494
00:18:20,640 --> 00:18:24,000
and ecmp load balancing

495
00:18:24,000 --> 00:18:26,400
there's a three tuple that provides

496
00:18:26,400 --> 00:18:29,760
enough entropy for ecmp load balancing

497
00:18:29,760 --> 00:18:31,520
the source address the destination

498
00:18:31,520 --> 00:18:34,320
address flow label

499
00:18:34,320 --> 00:18:36,320
these three can be found in fixed

500
00:18:36,320 --> 00:18:39,039
positions in the ipv6 better

501
00:18:39,039 --> 00:18:40,960
they're in that basic header

502
00:18:40,960 --> 00:18:43,360
so if you're going to do load balancing

503
00:18:43,360 --> 00:18:45,280
on those three it's really nice to have

504
00:18:45,280 --> 00:18:46,640
them in a fixed position at the

505
00:18:46,640 --> 00:18:48,799
beginning of the back end

506
00:18:48,799 --> 00:18:50,640
now an implementation may also load

507
00:18:50,640 --> 00:18:53,360
balance using a five top that includes

508
00:18:53,360 --> 00:18:55,760
the source and destination

509
00:18:55,760 --> 00:18:57,600
this requires the implementation to

510
00:18:57,600 --> 00:18:59,440
parse more of the header

511
00:18:59,440 --> 00:19:01,280
of the header chain to get out to see

512
00:19:01,280 --> 00:19:03,679
what the source and destination port is

513
00:19:03,679 --> 00:19:05,600
sometimes this is possible sometimes

514
00:19:05,600 --> 00:19:07,919
it's not depending on the hardware but

515
00:19:07,919 --> 00:19:11,200
in most cases it is possible

516
00:19:11,200 --> 00:19:13,600
now let's talk about this extension

517
00:19:13,600 --> 00:19:15,039
header chain

518
00:19:15,039 --> 00:19:17,039
let's say for a minute

519
00:19:17,039 --> 00:19:18,960
we have a packet

520
00:19:18,960 --> 00:19:20,240
that

521
00:19:20,240 --> 00:19:23,280
needs basic ipv6 services it needs to be

522
00:19:23,280 --> 00:19:27,600
ported it needs to have its uh up limit

523
00:19:27,600 --> 00:19:28,880
constraint

524
00:19:28,880 --> 00:19:30,960
but it needs a few other things

525
00:19:30,960 --> 00:19:31,919
let's say

526
00:19:31,919 --> 00:19:34,559
this one also needs

527
00:19:34,559 --> 00:19:37,200
a little traffic steering

528
00:19:37,200 --> 00:19:38,960
and

529
00:19:38,960 --> 00:19:40,559
a little special

530
00:19:40,559 --> 00:19:43,520
treatment at its ultimate destination

531
00:19:43,520 --> 00:19:45,440
well what we do in this case

532
00:19:45,440 --> 00:19:49,200
is we put ipv6 extension headers

533
00:19:49,200 --> 00:19:50,720
between

534
00:19:50,720 --> 00:19:53,200
the basic ipv6 header

535
00:19:53,200 --> 00:19:55,200
and the upper layer header in this case

536
00:19:55,200 --> 00:19:57,440
the upper layer is tcp so we put a

537
00:19:57,440 --> 00:19:58,880
routing header

538
00:19:58,880 --> 00:20:00,880
right after the

539
00:20:00,880 --> 00:20:04,559
ipv6 header so in 1986 you look at the

540
00:20:04,559 --> 00:20:07,520
next header type it'll be routed

541
00:20:07,520 --> 00:20:09,120
and if you look at the routing it has a

542
00:20:09,120 --> 00:20:11,919
next better type it'll be destination

543
00:20:11,919 --> 00:20:14,559
and destinations next header will be the

544
00:20:14,559 --> 00:20:17,679
tcp header so what you do is let's say

545
00:20:17,679 --> 00:20:20,559
you need some service that is

546
00:20:20,559 --> 00:20:22,880
an extension service fragmentation

547
00:20:22,880 --> 00:20:24,159
something like that

548
00:20:24,159 --> 00:20:26,080
well then you insert the fragmentation

549
00:20:26,080 --> 00:20:27,200
header

550
00:20:27,200 --> 00:20:28,960
between the base header and the upper

551
00:20:28,960 --> 00:20:29,919
layer

552
00:20:29,919 --> 00:20:31,440
but you only do it when you need

553
00:20:31,440 --> 00:20:32,960
fragmentation

554
00:20:32,960 --> 00:20:35,039
you don't carry that weight

555
00:20:35,039 --> 00:20:37,360
in the base header for every packet

556
00:20:37,360 --> 00:20:38,880
even though very few packets are

557
00:20:38,880 --> 00:20:41,200
fragmented so let's take a look at some

558
00:20:41,200 --> 00:20:43,600
of these extension headers two of them

559
00:20:43,600 --> 00:20:45,520
are the hop by hop and destination

560
00:20:45,520 --> 00:20:48,000
extension competitors

561
00:20:48,000 --> 00:20:51,120
the hop by hop extension header

562
00:20:51,120 --> 00:20:55,440
comes right after the base ipv6 header

563
00:20:55,440 --> 00:20:58,559
if it's in the header chain it must be

564
00:20:58,559 --> 00:21:01,440
right after the basic header

565
00:21:01,440 --> 00:21:02,559
and

566
00:21:02,559 --> 00:21:05,039
the destination options well you can

567
00:21:05,039 --> 00:21:06,640
have two of them

568
00:21:06,640 --> 00:21:08,799
one before the routing header if there

569
00:21:08,799 --> 00:21:11,360
is a routing header and the other at the

570
00:21:11,360 --> 00:21:13,760
absolute end of the extension header

571
00:21:13,760 --> 00:21:16,880
chain right before the upper leg there

572
00:21:16,880 --> 00:21:19,600
now what does this option look like

573
00:21:19,600 --> 00:21:20,320
well

574
00:21:20,320 --> 00:21:22,559
it has a pointer to the next header

575
00:21:22,559 --> 00:21:25,280
it tells you how long it is

576
00:21:25,280 --> 00:21:27,760
and it has a list of options that it

577
00:21:27,760 --> 00:21:29,600
carries

578
00:21:29,600 --> 00:21:30,640
now

579
00:21:30,640 --> 00:21:33,200
the length is computed kind of strange

580
00:21:33,200 --> 00:21:34,640
the length is

581
00:21:34,640 --> 00:21:37,120
the number of eight bit chunks in the

582
00:21:37,120 --> 00:21:38,000
header

583
00:21:38,000 --> 00:21:39,440
including the next center and the

584
00:21:39,440 --> 00:21:41,360
extension at a length

585
00:21:41,360 --> 00:21:43,280
minus one

586
00:21:43,280 --> 00:21:46,960
so if you have an eight byte

587
00:21:46,960 --> 00:21:49,360
pop by hop extension header the header

588
00:21:49,360 --> 00:21:51,520
extension length will be zero

589
00:21:51,520 --> 00:21:53,919
which is a little bit counter-intuitive

590
00:21:53,919 --> 00:21:56,480
but we've all gotten used to it

591
00:21:56,480 --> 00:21:58,640
um another interesting thing

592
00:21:58,640 --> 00:22:00,080
the maximum length of these two

593
00:22:00,080 --> 00:22:01,919
extension headers

594
00:22:01,919 --> 00:22:03,520
the extension header length is eight

595
00:22:03,520 --> 00:22:05,840
bits long so theoretically the extension

596
00:22:05,840 --> 00:22:08,320
header can be 2k long

597
00:22:08,320 --> 00:22:10,960
now the extension header

598
00:22:10,960 --> 00:22:12,799
uh the hop by hop and destination

599
00:22:12,799 --> 00:22:14,480
extension headers

600
00:22:14,480 --> 00:22:15,440
carry

601
00:22:15,440 --> 00:22:18,080
one or more options and this is what an

602
00:22:18,080 --> 00:22:19,600
option looks like

603
00:22:19,600 --> 00:22:21,679
it has an option type

604
00:22:21,679 --> 00:22:24,720
an option length measured invites

605
00:22:24,720 --> 00:22:26,799
and option data

606
00:22:26,799 --> 00:22:28,240
and there are

607
00:22:28,240 --> 00:22:31,600
a couple dozen of these

608
00:22:31,600 --> 00:22:33,360
this format

609
00:22:33,360 --> 00:22:35,520
by hop in destination option center and

610
00:22:35,520 --> 00:22:36,960
the options

611
00:22:36,960 --> 00:22:40,080
you'll see it uh it's identical for the

612
00:22:40,080 --> 00:22:40,799
two

613
00:22:40,799 --> 00:22:44,080
they are both a bundle of options

614
00:22:44,080 --> 00:22:46,400
if you take a look at the option type

615
00:22:46,400 --> 00:22:48,559
um you'll see the first two bits they're

616
00:22:48,559 --> 00:22:50,240
called the act bits

617
00:22:50,240 --> 00:22:52,400
indicate the required behavior

618
00:22:52,400 --> 00:22:53,919
when the processing node doesn't

619
00:22:53,919 --> 00:22:56,159
recognize the option

620
00:22:56,159 --> 00:22:57,600
and the

621
00:22:57,600 --> 00:22:59,840
required behavior might be zero zero

622
00:22:59,840 --> 00:23:01,840
skip and process the next

623
00:23:01,840 --> 00:23:04,320
option in the option header

624
00:23:04,320 --> 00:23:06,640
uh discard the packet

625
00:23:06,640 --> 00:23:09,360
discard it and send an icmp message

626
00:23:09,360 --> 00:23:12,000
or discard it and if the destination

627
00:23:12,000 --> 00:23:14,640
address was not multitasked then send an

628
00:23:14,640 --> 00:23:16,799
icmp message

629
00:23:16,799 --> 00:23:19,039
the third bit the change bit indicates

630
00:23:19,039 --> 00:23:21,039
whether the option data can change on

631
00:23:21,039 --> 00:23:23,200
route to the packet's destination

632
00:23:23,200 --> 00:23:24,960
normally there are very few fields in an

633
00:23:24,960 --> 00:23:26,720
ip header that can change on route to a

634
00:23:26,720 --> 00:23:28,000
destination

635
00:23:28,000 --> 00:23:30,240
maybe dipser maybe i can

636
00:23:30,240 --> 00:23:32,080
certainly hop count

637
00:23:32,080 --> 00:23:33,280
but here

638
00:23:33,280 --> 00:23:35,280
um you're finding options with this

639
00:23:35,280 --> 00:23:37,039
change bit set

640
00:23:37,039 --> 00:23:40,159
are allowed to have their values changed

641
00:23:40,159 --> 00:23:42,720
now this was fairly simple

642
00:23:42,720 --> 00:23:43,600
until

643
00:23:43,600 --> 00:23:46,880
rfc 8200 was published

644
00:23:46,880 --> 00:23:50,720
when our well rfc 8200 is an update to

645
00:23:50,720 --> 00:23:53,200
the original ipv6

646
00:23:53,200 --> 00:23:55,520
specification it brought it up to full

647
00:23:55,520 --> 00:23:56,799
standard

648
00:23:56,799 --> 00:23:57,840
and

649
00:23:57,840 --> 00:24:00,400
you'll find an 8200

650
00:24:00,400 --> 00:24:04,400
while rfc 2460 required all nodes must

651
00:24:04,400 --> 00:24:05,520
examine

652
00:24:05,520 --> 00:24:08,080
and process the option uh up by hop

653
00:24:08,080 --> 00:24:09,360
option center

654
00:24:09,360 --> 00:24:11,200
now it's expected that nodes along the

655
00:24:11,200 --> 00:24:12,799
packets delivery

656
00:24:12,799 --> 00:24:15,200
will only examine and process the

657
00:24:15,200 --> 00:24:16,960
op option center if explicitly

658
00:24:16,960 --> 00:24:19,120
configured so

659
00:24:19,120 --> 00:24:20,799
now what does that mean

660
00:24:20,799 --> 00:24:22,799
well it means that

661
00:24:22,799 --> 00:24:26,320
the act bits of

662
00:24:26,320 --> 00:24:27,919
a

663
00:24:27,919 --> 00:24:30,320
option may be 0 1

664
00:24:30,320 --> 00:24:32,000
which means if you don't understand this

665
00:24:32,000 --> 00:24:34,000
option please drop the packet

666
00:24:34,000 --> 00:24:35,360
but

667
00:24:35,360 --> 00:24:37,440
you don't have to drop the packet

668
00:24:37,440 --> 00:24:40,159
if you are not explicitly configured to

669
00:24:40,159 --> 00:24:42,320
process off by hop options

670
00:24:42,320 --> 00:24:43,679
so

671
00:24:43,679 --> 00:24:47,279
you know i guess the the meaning of that

672
00:24:47,279 --> 00:24:50,880
act bit of those act bits

673
00:24:50,880 --> 00:24:53,600
is well specified we understand what it

674
00:24:53,600 --> 00:24:56,159
means it's just a bit convoluted

675
00:24:56,159 --> 00:24:57,600
let's talk next about the routing

676
00:24:57,600 --> 00:24:59,440
extension header

677
00:24:59,440 --> 00:25:00,640
um

678
00:25:00,640 --> 00:25:02,559
let's say for a moment you have a packet

679
00:25:02,559 --> 00:25:04,960
and you do not want it to travel the

680
00:25:04,960 --> 00:25:07,440
routing least cost path from source to

681
00:25:07,440 --> 00:25:08,799
destination

682
00:25:08,799 --> 00:25:10,400
you think there are a few nodes that it

683
00:25:10,400 --> 00:25:12,159
must visit on the way

684
00:25:12,159 --> 00:25:13,600
you want it taking some traffic

685
00:25:13,600 --> 00:25:15,440
engineers back

686
00:25:15,440 --> 00:25:17,360
well we have this routing extension

687
00:25:17,360 --> 00:25:19,279
header it comes

688
00:25:19,279 --> 00:25:20,320
um

689
00:25:20,320 --> 00:25:22,480
after the hop by hop

690
00:25:22,480 --> 00:25:24,080
after a destination if there are

691
00:25:24,080 --> 00:25:26,840
destination options to be processed any

692
00:25:26,840 --> 00:25:30,480
job but before all the others

693
00:25:30,480 --> 00:25:32,640
it has a next header

694
00:25:32,640 --> 00:25:35,200
a header extension length which

695
00:25:35,200 --> 00:25:36,880
is calculated the same way as all the

696
00:25:36,880 --> 00:25:38,880
others so this can be a very long

697
00:25:38,880 --> 00:25:40,720
extension header

698
00:25:40,720 --> 00:25:43,600
a routing type and there are uh

699
00:25:43,600 --> 00:25:45,679
oh maybe three or four

700
00:25:45,679 --> 00:25:47,520
different maybe five

701
00:25:47,520 --> 00:25:49,600
different routing types

702
00:25:49,600 --> 00:25:51,120
um

703
00:25:51,120 --> 00:25:53,279
there used to be an rh0 which was the

704
00:25:53,279 --> 00:25:54,720
generic one

705
00:25:54,720 --> 00:25:56,559
i think there is there's certainly one

706
00:25:56,559 --> 00:25:59,440
for segment routing

707
00:25:59,440 --> 00:26:01,440
there are a few others floating around

708
00:26:01,440 --> 00:26:03,039
but it tells you how to interpret the

709
00:26:03,039 --> 00:26:04,799
type specific data

710
00:26:04,799 --> 00:26:06,559
and there's also some segments left the

711
00:26:06,559 --> 00:26:08,159
number of segments that

712
00:26:08,159 --> 00:26:10,720
that still need to be visited along the

713
00:26:10,720 --> 00:26:12,720
traffic engineered path

714
00:26:12,720 --> 00:26:14,720
so it's used for traffic steering many

715
00:26:14,720 --> 00:26:16,559
routing types defined

716
00:26:16,559 --> 00:26:18,320
segments left indicates the number of

717
00:26:18,320 --> 00:26:20,480
segments yet to be visited

718
00:26:20,480 --> 00:26:22,799
and the type specific data includes a

719
00:26:22,799 --> 00:26:25,120
list of addresses to be copied for the

720
00:26:25,120 --> 00:26:28,000
basic ipv6 better destination address so

721
00:26:28,000 --> 00:26:30,240
how do we process this thing a packet

722
00:26:30,240 --> 00:26:31,679
reaches

723
00:26:31,679 --> 00:26:34,000
the address

724
00:26:34,000 --> 00:26:36,480
in its destination address

725
00:26:36,480 --> 00:26:38,559
it starts processing extension headers

726
00:26:38,559 --> 00:26:40,559
it sees this one

727
00:26:40,559 --> 00:26:43,600
if segments left is zero

728
00:26:43,600 --> 00:26:46,559
it just goes past it because

729
00:26:46,559 --> 00:26:47,679
you've done

730
00:26:47,679 --> 00:26:49,600
you're now at your ultimate destination

731
00:26:49,600 --> 00:26:51,279
but if segments left is greater than

732
00:26:51,279 --> 00:26:52,799
zero

733
00:26:52,799 --> 00:26:55,520
you decrement segments left

734
00:26:55,520 --> 00:26:57,840
take something out of the type specific

735
00:26:57,840 --> 00:26:58,720
data

736
00:26:58,720 --> 00:27:00,960
put it in the destination address and

737
00:27:00,960 --> 00:27:02,000
forward

738
00:27:02,000 --> 00:27:04,480
so this is actually a list of waypoints

739
00:27:04,480 --> 00:27:06,320
encoded in some way or other depending

740
00:27:06,320 --> 00:27:07,919
on the routing

741
00:27:07,919 --> 00:27:10,400
next we have a fragment header

742
00:27:10,400 --> 00:27:13,360
and you'll recognize the fields in this

743
00:27:13,360 --> 00:27:15,039
they are the fields that used to be in

744
00:27:15,039 --> 00:27:17,039
the base ipv4 header

745
00:27:17,039 --> 00:27:18,399
that were

746
00:27:18,399 --> 00:27:20,399
required for

747
00:27:20,399 --> 00:27:22,240
packet reassembly

748
00:27:22,240 --> 00:27:23,120
now

749
00:27:23,120 --> 00:27:24,399
we have some bad news about

750
00:27:24,399 --> 00:27:27,600
fragmentation ipv6 makes fragmentation

751
00:27:27,600 --> 00:27:31,279
um a little more fragile than ipv4

752
00:27:31,279 --> 00:27:34,640
in ipv4 we had a df bit that told you

753
00:27:34,640 --> 00:27:36,799
whether or not downstream nodes could

754
00:27:36,799 --> 00:27:38,559
fragment the packet

755
00:27:38,559 --> 00:27:41,360
so if a packet left the source uh too

756
00:27:41,360 --> 00:27:43,039
large to be

757
00:27:43,039 --> 00:27:44,799
sent without fragmentation it might be

758
00:27:44,799 --> 00:27:46,720
fragmented downstream

759
00:27:46,720 --> 00:27:48,000
if the df

760
00:27:48,000 --> 00:27:49,679
bit was zero

761
00:27:49,679 --> 00:27:52,559
well in ipv6 only the source

762
00:27:52,559 --> 00:27:55,039
node can fragment packet

763
00:27:55,039 --> 00:27:57,919
the source node relies on pmtud to

764
00:27:57,919 --> 00:27:59,919
determine whether fragmentation is

765
00:27:59,919 --> 00:28:00,960
required

766
00:28:00,960 --> 00:28:03,200
pmt ud

767
00:28:03,200 --> 00:28:06,080
tells the source node what what the path

768
00:28:06,080 --> 00:28:07,600
mtu is

769
00:28:07,600 --> 00:28:11,760
well pmtud is itself a little fragile

770
00:28:11,760 --> 00:28:14,840
um it relies on ipv6 packet two big

771
00:28:14,840 --> 00:28:18,000
messages making it from the point where

772
00:28:18,000 --> 00:28:20,000
fragmentation is needed

773
00:28:20,000 --> 00:28:21,279
to the source

774
00:28:21,279 --> 00:28:24,159
well icmp v6 packets can be lost they

775
00:28:24,159 --> 00:28:25,600
can be filtered

776
00:28:25,600 --> 00:28:26,720
so

777
00:28:26,720 --> 00:28:29,360
there is some chance that a source will

778
00:28:29,360 --> 00:28:31,840
be boarding packets into a black hole

779
00:28:31,840 --> 00:28:33,760
and not know it until some upper layer

780
00:28:33,760 --> 00:28:35,520
of complaints

781
00:28:35,520 --> 00:28:37,520
so what workarounds of people found in

782
00:28:37,520 --> 00:28:39,120
ipv6

783
00:28:39,120 --> 00:28:42,880
well an ipv6 link is required to support

784
00:28:42,880 --> 00:28:46,399
1200 byte mdu

785
00:28:46,399 --> 00:28:48,480
most generally refrain from sending

786
00:28:48,480 --> 00:28:50,799
packets larger than that the

787
00:28:50,799 --> 00:28:53,919
fragmentation was rarely really required

788
00:28:53,919 --> 00:28:55,760
now where did we come up with this magic

789
00:28:55,760 --> 00:28:58,960
number 1280 well

790
00:28:58,960 --> 00:29:01,840
1500 is um

791
00:29:01,840 --> 00:29:04,480
a common ethernet limit

792
00:29:04,480 --> 00:29:07,799
from that they subtracted

793
00:29:07,799 --> 00:29:09,600
220

794
00:29:09,600 --> 00:29:11,760
or whatever kind of that encapsulation

795
00:29:11,760 --> 00:29:13,520
anybody dreamed up

796
00:29:13,520 --> 00:29:15,520
and assumed that you would never get in

797
00:29:15,520 --> 00:29:18,559
a situation where you need fragmentation

798
00:29:18,559 --> 00:29:21,039
now inside a limited domain you can send

799
00:29:21,039 --> 00:29:22,640
larger packets

800
00:29:22,640 --> 00:29:24,720
but in fact you can even send larger

801
00:29:24,720 --> 00:29:26,960
packets on the global internet

802
00:29:26,960 --> 00:29:29,279
if you don't mind taking the risk of

803
00:29:29,279 --> 00:29:31,279
empty blackboard

804
00:29:31,279 --> 00:29:32,799
let's talk about extension header

805
00:29:32,799 --> 00:29:35,440
placement for a while

806
00:29:35,440 --> 00:29:37,200
extension headers are arranged in an

807
00:29:37,200 --> 00:29:39,440
order that minimizes the resources

808
00:29:39,440 --> 00:29:42,799
required to process it

809
00:29:42,799 --> 00:29:44,799
and here's the order that they should

810
00:29:44,799 --> 00:29:47,840
appear in a packet hph

811
00:29:47,840 --> 00:29:49,279
destination

812
00:29:49,279 --> 00:29:52,640
but only if there is a routing at well

813
00:29:52,640 --> 00:29:54,640
destination before routing

814
00:29:54,640 --> 00:29:57,520
routing fragment authentication

815
00:29:57,520 --> 00:29:58,799
esp

816
00:29:58,799 --> 00:30:01,120
and destination again

817
00:30:01,120 --> 00:30:01,919
um

818
00:30:01,919 --> 00:30:04,320
hph is processed by every node along the

819
00:30:04,320 --> 00:30:05,919
packet's path

820
00:30:05,919 --> 00:30:09,440
so when you're processing an ipv6 packet

821
00:30:09,440 --> 00:30:11,840
if there is a

822
00:30:11,840 --> 00:30:14,320
hph coming right after it

823
00:30:14,320 --> 00:30:16,399
it's going to be processed

824
00:30:16,399 --> 00:30:18,640
the next thing you will do

825
00:30:18,640 --> 00:30:21,520
is look for a destination option

826
00:30:21,520 --> 00:30:23,840
that one is to be processed

827
00:30:23,840 --> 00:30:25,679
by every node

828
00:30:25,679 --> 00:30:28,080
that's listed in the routing header

829
00:30:28,080 --> 00:30:29,919
now destination options and routing are

830
00:30:29,919 --> 00:30:32,240
both irrelevant there's no routing

831
00:30:32,240 --> 00:30:34,000
then finally when you read that reach

832
00:30:34,000 --> 00:30:36,399
the packets ultimate destination

833
00:30:36,399 --> 00:30:38,320
you reassemble it that's where you

834
00:30:38,320 --> 00:30:40,240
process the fragment header

835
00:30:40,240 --> 00:30:41,840
you authenticate it that's where you

836
00:30:41,840 --> 00:30:43,840
process the uh

837
00:30:43,840 --> 00:30:45,679
authentication header

838
00:30:45,679 --> 00:30:47,760
uh you decrypt it if you need to that's

839
00:30:47,760 --> 00:30:49,039
the esp

840
00:30:49,039 --> 00:30:50,720
and any additional options for the

841
00:30:50,720 --> 00:30:52,640
ultimate destination that's the last

842
00:30:52,640 --> 00:30:55,279
destination on option center

843
00:30:55,279 --> 00:30:58,159
now let's talk about ipv6 extensibility

844
00:30:58,159 --> 00:30:59,360
for a second

845
00:30:59,360 --> 00:31:02,000
and first we'll look at the bright side

846
00:31:02,000 --> 00:31:04,320
in theory ipv6 can be extended to

847
00:31:04,320 --> 00:31:06,880
accommodate any future requirement

848
00:31:06,880 --> 00:31:09,039
just add existing uh to existing

849
00:31:09,039 --> 00:31:10,559
extension headers

850
00:31:10,559 --> 00:31:12,960
you don't even need to add to uh more

851
00:31:12,960 --> 00:31:15,039
extension headers you just add more

852
00:31:15,039 --> 00:31:17,120
options for the hop by hop or the

853
00:31:17,120 --> 00:31:19,360
destination header you have a way to get

854
00:31:19,360 --> 00:31:20,720
something to either

855
00:31:20,720 --> 00:31:22,799
every node along the path

856
00:31:22,799 --> 00:31:24,480
every node in the routing extension

857
00:31:24,480 --> 00:31:27,840
header or the ultimate destination

858
00:31:27,840 --> 00:31:30,000
and because of this there may never be a

859
00:31:30,000 --> 00:31:32,640
next version of the internet protocol

860
00:31:32,640 --> 00:31:35,600
because ipv6 is extensible so there may

861
00:31:35,600 --> 00:31:39,679
never be an ip15 ip15 or whatever

862
00:31:39,679 --> 00:31:41,679
whatever's after that

863
00:31:41,679 --> 00:31:43,840
now let's talk about ipv6

864
00:31:43,840 --> 00:31:46,799
extensibilities dark side

865
00:31:46,799 --> 00:31:49,200
most reverb limitations can't process

866
00:31:49,200 --> 00:31:51,440
extension headers on the fast path

867
00:31:51,440 --> 00:31:53,039
you know especially considering the fact

868
00:31:53,039 --> 00:31:53,919
that

869
00:31:53,919 --> 00:31:55,679
you know the destination and hop by hop

870
00:31:55,679 --> 00:31:58,000
extension headers as they're defined now

871
00:31:58,000 --> 00:32:00,000
can be 2k long you know who can do that

872
00:32:00,000 --> 00:32:02,240
on the best path so what they do is pump

873
00:32:02,240 --> 00:32:03,600
to the slow path

874
00:32:03,600 --> 00:32:05,440
this becomes a denial of service and

875
00:32:05,440 --> 00:32:06,799
vulnerability

876
00:32:06,799 --> 00:32:10,320
um it's a dos attack against the phone

877
00:32:10,320 --> 00:32:12,480
many operators block packets with

878
00:32:12,480 --> 00:32:14,240
extension headers for this reason you'll

879
00:32:14,240 --> 00:32:18,880
see a study of that in rfc 7872

880
00:32:18,880 --> 00:32:21,600
um the ietf is currently redefining the

881
00:32:21,600 --> 00:32:24,080
hop by hop options extension header to

882
00:32:24,080 --> 00:32:26,000
overcome this vulnerability

883
00:32:26,000 --> 00:32:28,640
stay tuned for more and finally we're

884
00:32:28,640 --> 00:32:31,360
going to talk about icmt v6

885
00:32:31,360 --> 00:32:34,320
it hasn't changed too terribly from ipv4

886
00:32:34,320 --> 00:32:36,080
there are many holdovers destination

887
00:32:36,080 --> 00:32:38,559
unreachable

888
00:32:38,960 --> 00:32:40,320
but there are some new messages to

889
00:32:40,320 --> 00:32:43,279
support neighbor discovery ipv6

890
00:32:43,279 --> 00:32:44,480
mobility

891
00:32:44,480 --> 00:32:46,720
and other stuff

892
00:32:46,720 --> 00:32:48,559
okay next we'll talk a little bit about

893
00:32:48,559 --> 00:32:50,080
neighbor discovery

894
00:32:50,080 --> 00:32:53,679
um this is new in ipv6

895
00:32:53,679 --> 00:32:55,039
and

896
00:32:55,039 --> 00:32:57,279
the big takeaway is that neighbor

897
00:32:57,279 --> 00:33:00,320
discovery replaces

898
00:33:00,320 --> 00:33:01,840
when you wanted to find a mapping

899
00:33:01,840 --> 00:33:05,039
between a mac address and

900
00:33:05,039 --> 00:33:06,480
an ip address

901
00:33:06,480 --> 00:33:08,880
in ipv4 you use the protocol called dark

902
00:33:08,880 --> 00:33:10,960
and ipd6 you're going to do it

903
00:33:10,960 --> 00:33:12,799
with neighbor discovery and it's

904
00:33:12,799 --> 00:33:15,840
basically built on five new icmpb6

905
00:33:15,840 --> 00:33:16,880
messages

906
00:33:16,880 --> 00:33:19,120
let's talk about what those router what

907
00:33:19,120 --> 00:33:21,360
those messages are

908
00:33:21,360 --> 00:33:22,840
there's a router

909
00:33:22,840 --> 00:33:25,919
solicitation that solicits a router

910
00:33:25,919 --> 00:33:28,399
advertisement from whatever router is

911
00:33:28,399 --> 00:33:32,240
online these are all unlinked messages

912
00:33:32,240 --> 00:33:34,559
they'll never be forwarded offline so

913
00:33:34,559 --> 00:33:36,720
you send a router solicitation hoping to

914
00:33:36,720 --> 00:33:39,279
get a router advertisement back so

915
00:33:39,279 --> 00:33:42,399
you'll know the address and

916
00:33:42,399 --> 00:33:44,960
the address and mac address of uh local

917
00:33:44,960 --> 00:33:45,840
router

918
00:33:45,840 --> 00:33:48,240
the advertisement gives you exactly

919
00:33:48,240 --> 00:33:50,240
you know what you'll ask from the router

920
00:33:50,240 --> 00:33:51,519
solicitation

921
00:33:51,519 --> 00:33:54,159
it advertises an unlinked router or two

922
00:33:54,159 --> 00:33:56,240
or three or however many there are and

923
00:33:56,240 --> 00:33:58,000
their attributes

924
00:33:58,000 --> 00:34:00,640
there's a neighbor solicitation

925
00:34:00,640 --> 00:34:01,919
and

926
00:34:01,919 --> 00:34:03,200
it's a parallel to the router

927
00:34:03,200 --> 00:34:06,240
solicitation it's soliciting a neighbor

928
00:34:06,240 --> 00:34:08,159
advertisement message

929
00:34:08,159 --> 00:34:10,159
there's a neighbor advertisement

930
00:34:10,159 --> 00:34:11,918
that advertises

931
00:34:11,918 --> 00:34:14,800
an unlinked neighbor and it's attributes

932
00:34:14,800 --> 00:34:16,560
and finally a redirect message that's

933
00:34:16,560 --> 00:34:19,280
pretty much the same as it was in ipv4

934
00:34:19,280 --> 00:34:21,280
so let's talk about this router

935
00:34:21,280 --> 00:34:23,280
solicitation message

936
00:34:23,280 --> 00:34:26,560
it has ipv6 fields of things in the ipv6

937
00:34:26,560 --> 00:34:29,119
header and icmp fields the things that

938
00:34:29,119 --> 00:34:32,639
are in the payload the source address is

939
00:34:32,639 --> 00:34:34,879
an ip address signed to the sending

940
00:34:34,879 --> 00:34:38,239
interface or the unspecified address no

941
00:34:38,239 --> 00:34:40,159
address has been sent yet

942
00:34:40,159 --> 00:34:40,879
so

943
00:34:40,879 --> 00:34:42,960
let's say for a minute that

944
00:34:42,960 --> 00:34:45,679
the node has just come up it has no idea

945
00:34:45,679 --> 00:34:49,199
what its id address is because

946
00:34:49,199 --> 00:34:50,800
it hasn't

947
00:34:50,800 --> 00:34:53,199
it hasn't talked to dhcp yet it hasn't

948
00:34:53,199 --> 00:34:55,040
talked to anybody yet well actually

949
00:34:55,040 --> 00:34:58,160
there may not even be a dhcp

950
00:34:58,160 --> 00:34:59,599
that's another big difference between

951
00:34:59,599 --> 00:35:01,680
ipv6 and

952
00:35:01,680 --> 00:35:03,599
you have many ways to configure your

953
00:35:03,599 --> 00:35:04,480
node

954
00:35:04,480 --> 00:35:05,680
but

955
00:35:05,680 --> 00:35:07,760
it just woke up it was just booted has

956
00:35:07,760 --> 00:35:10,079
no idea what it suppresses so it sends

957
00:35:10,079 --> 00:35:12,720
one of these router solicitations

958
00:35:12,720 --> 00:35:14,839
with the unassigned

959
00:35:14,839 --> 00:35:17,680
address typically the destination is all

960
00:35:17,680 --> 00:35:19,839
routers multicast address well-known

961
00:35:19,839 --> 00:35:21,040
address

962
00:35:21,040 --> 00:35:24,240
and the hop count is 255.

963
00:35:24,240 --> 00:35:26,320
now there's a reason for this

964
00:35:26,320 --> 00:35:28,880
this is another security thing

965
00:35:28,880 --> 00:35:30,800
you don't want

966
00:35:30,800 --> 00:35:32,240
a

967
00:35:32,240 --> 00:35:35,359
router solicitation message getting onto

968
00:35:35,359 --> 00:35:36,960
your link

969
00:35:36,960 --> 00:35:39,200
that originated many hops away

970
00:35:39,200 --> 00:35:41,200
so if the hop count isn't high enough

971
00:35:41,200 --> 00:35:43,119
you will drop the message

972
00:35:43,119 --> 00:35:46,320
then the icmp uh fields there's a type

973
00:35:46,320 --> 00:35:47,920
133

974
00:35:47,920 --> 00:35:50,079
a source link player address and that's

975
00:35:50,079 --> 00:35:51,920
the link layer address of the sender if

976
00:35:51,920 --> 00:35:53,040
known

977
00:35:53,040 --> 00:35:55,200
uh and generally it is known

978
00:35:55,200 --> 00:35:57,280
and that's your router solicitation

979
00:35:57,280 --> 00:35:59,839
message it gets back a router

980
00:35:59,839 --> 00:36:01,839
advertisement message

981
00:36:01,839 --> 00:36:04,160
and the router advertisement message

982
00:36:04,160 --> 00:36:06,800
like the router solicitation has ipv6

983
00:36:06,800 --> 00:36:07,839
fields

984
00:36:07,839 --> 00:36:08,960
and

985
00:36:08,960 --> 00:36:11,839
icmp v6 fields

986
00:36:11,839 --> 00:36:13,520
source address is the lincoln local

987
00:36:13,520 --> 00:36:15,280
address assigned to the interface from

988
00:36:15,280 --> 00:36:17,200
which the message is sent

989
00:36:17,200 --> 00:36:20,160
so the router has a link local it sends

990
00:36:20,160 --> 00:36:22,240
the message and says

991
00:36:22,240 --> 00:36:24,240
this is my source

992
00:36:24,240 --> 00:36:27,040
the destination address is the source

993
00:36:27,040 --> 00:36:28,800
address of the invoking router

994
00:36:28,800 --> 00:36:30,320
solicitation

995
00:36:30,320 --> 00:36:33,839
or the all nodes multicast uh address

996
00:36:33,839 --> 00:36:34,640
so

997
00:36:34,640 --> 00:36:36,960
if the router solicitation had a real

998
00:36:36,960 --> 00:36:38,400
address on it

999
00:36:38,400 --> 00:36:40,960
local you send it just to the station

1000
00:36:40,960 --> 00:36:42,400
that's asking

1001
00:36:42,400 --> 00:36:44,720
if it didn't know its own address yet

1002
00:36:44,720 --> 00:36:47,920
you blasted out the whole link

1003
00:36:47,920 --> 00:36:50,400
and again hop count is 255 for security

1004
00:36:50,400 --> 00:36:51,440
reasons

1005
00:36:51,440 --> 00:36:53,839
and the router advertisement message has

1006
00:36:53,839 --> 00:36:55,839
a lot of payload

1007
00:36:55,839 --> 00:36:59,119
it has a type a current top limit

1008
00:36:59,119 --> 00:37:01,119
which is the default value that should

1009
00:37:01,119 --> 00:37:04,000
be placed in the top account field type

1010
00:37:04,000 --> 00:37:06,160
header for outgoing packets

1011
00:37:06,160 --> 00:37:08,880
an mbit and an obit

1012
00:37:08,880 --> 00:37:11,200
that tell you whether additional

1013
00:37:11,200 --> 00:37:12,800
information

1014
00:37:12,800 --> 00:37:13,839
is

1015
00:37:13,839 --> 00:37:18,480
available from dhcp uh v6 or if dhcp is

1016
00:37:18,480 --> 00:37:22,880
running at all these are a bit difficult

1017
00:37:22,880 --> 00:37:24,800
to interpret different implementations

1018
00:37:24,800 --> 00:37:26,640
interpret them differently

1019
00:37:26,640 --> 00:37:28,720
and i won't get go down that

1020
00:37:28,720 --> 00:37:31,440
rabbit hole right now because

1021
00:37:31,440 --> 00:37:34,320
it's the kind of a long story

1022
00:37:34,320 --> 00:37:36,000
a rather lifetime and that's the

1023
00:37:36,000 --> 00:37:37,839
lifetime associated with a default

1024
00:37:37,839 --> 00:37:40,720
router uh zero if this router doesn't

1025
00:37:40,720 --> 00:37:42,880
claim to be the default router

1026
00:37:42,880 --> 00:37:44,880
uh so if you're the default router you

1027
00:37:44,880 --> 00:37:46,400
say how long you want to be the default

1028
00:37:46,400 --> 00:37:49,200
color if not you just say zero

1029
00:37:49,200 --> 00:37:53,359
a reachability time a retransmit timer

1030
00:37:53,359 --> 00:37:54,960
here's the important part the source

1031
00:37:54,960 --> 00:37:56,640
link layer address and that's the link

1032
00:37:56,640 --> 00:37:58,880
layer address of the interface

1033
00:37:58,880 --> 00:38:00,720
from which the router advertisement was

1034
00:38:00,720 --> 00:38:02,000
sent so

1035
00:38:02,000 --> 00:38:04,880
now the recipient of this message

1036
00:38:04,880 --> 00:38:08,400
can send a message to this router

1037
00:38:08,400 --> 00:38:10,480
uh a point-to-point message or a

1038
00:38:10,480 --> 00:38:12,480
unicast message

1039
00:38:12,480 --> 00:38:14,880
an mtu and that's the mtu of the link

1040
00:38:14,880 --> 00:38:16,640
that the router is speaking on

1041
00:38:16,640 --> 00:38:18,640
and prefix information

1042
00:38:18,640 --> 00:38:21,760
that we'll see later used for slack

1043
00:38:21,760 --> 00:38:24,800
for stateless auto address configuration

1044
00:38:24,800 --> 00:38:26,480
i probably should have mentioned that

1045
00:38:26,480 --> 00:38:28,480
there are two ways to get addresses to

1046
00:38:28,480 --> 00:38:30,400
ipv6 nodes

1047
00:38:30,400 --> 00:38:34,480
dhcp v6 which feels a lot like dhcp v4

1048
00:38:34,480 --> 00:38:36,079
and flac

1049
00:38:36,079 --> 00:38:38,960
there are neighbor solicitation messages

1050
00:38:38,960 --> 00:38:40,560
and

1051
00:38:40,560 --> 00:38:42,480
um here i won't read the slide to you

1052
00:38:42,480 --> 00:38:44,640
but you'll see that there's a

1053
00:38:44,640 --> 00:38:46,800
parallel between neighbor solicitation

1054
00:38:46,800 --> 00:38:49,359
and router solicitation

1055
00:38:49,359 --> 00:38:52,079
and neighbor advertisement message and

1056
00:38:52,079 --> 00:38:54,079
here the

1057
00:38:54,079 --> 00:38:56,800
ipv6 fields are actually important the

1058
00:38:56,800 --> 00:38:58,400
source address is the address of the

1059
00:38:58,400 --> 00:39:00,400
interface from which the advertisements

1060
00:39:00,400 --> 00:39:03,119
sent as a link local address

1061
00:39:03,119 --> 00:39:05,119
the destination address

1062
00:39:05,119 --> 00:39:08,720
for solicited advertisements um

1063
00:39:08,720 --> 00:39:11,599
or is either the invoking

1064
00:39:11,599 --> 00:39:13,520
neighbors address the one he sent in the

1065
00:39:13,520 --> 00:39:15,200
neighbor solicitation

1066
00:39:15,200 --> 00:39:18,480
for the all nodes multicast address

1067
00:39:18,480 --> 00:39:20,640
again a boatload of payload that tells

1068
00:39:20,640 --> 00:39:23,200
you about the neighbor a router flag

1069
00:39:23,200 --> 00:39:25,040
that tells you whether the neighbor is a

1070
00:39:25,040 --> 00:39:27,760
router a solicited flag

1071
00:39:27,760 --> 00:39:29,839
that tells you whether the

1072
00:39:29,839 --> 00:39:31,440
advertisement was

1073
00:39:31,440 --> 00:39:32,640
sent in response to a neighbor

1074
00:39:32,640 --> 00:39:34,400
solicitation

1075
00:39:34,400 --> 00:39:36,320
a target address

1076
00:39:36,320 --> 00:39:38,640
and for solicited advertisements

1077
00:39:38,640 --> 00:39:40,079
the target address field in the

1078
00:39:40,079 --> 00:39:42,400
neighbors solicitation message

1079
00:39:42,400 --> 00:39:45,119
it's the target address in the

1080
00:39:45,119 --> 00:39:46,720
neighbor solicitation

1081
00:39:46,720 --> 00:39:49,359
message that prompted the advertisement

1082
00:39:49,359 --> 00:39:51,920
for unsolicited it's the address of the

1083
00:39:51,920 --> 00:39:53,680
link the address whose link layer

1084
00:39:53,680 --> 00:39:55,760
address has changed

1085
00:39:55,760 --> 00:39:57,440
basically a neighbor advertisement you

1086
00:39:57,440 --> 00:39:59,839
would send in two cases if it was

1087
00:39:59,839 --> 00:40:02,320
solicited or if you were renumbering and

1088
00:40:02,320 --> 00:40:04,480
you changed your own address

1089
00:40:04,480 --> 00:40:07,119
and finally the redirect message

1090
00:40:07,119 --> 00:40:09,200
and that is the one that hasn't changed

1091
00:40:09,200 --> 00:40:10,720
very much

1092
00:40:10,720 --> 00:40:12,319
you know you can now see how this might

1093
00:40:12,319 --> 00:40:13,280
work

1094
00:40:13,280 --> 00:40:16,079
um a router comes up on a link

1095
00:40:16,079 --> 00:40:16,880
it

1096
00:40:16,880 --> 00:40:19,359
sent it might send out gratuitous ras

1097
00:40:19,359 --> 00:40:20,640
might not

1098
00:40:20,640 --> 00:40:22,560
a node comes up

1099
00:40:22,560 --> 00:40:25,440
it sends a router solicitation

1100
00:40:25,440 --> 00:40:28,079
gets a router advertisement

1101
00:40:28,079 --> 00:40:30,160
so now it knows the mac address of the

1102
00:40:30,160 --> 00:40:32,079
router it can talk to it

1103
00:40:32,079 --> 00:40:34,400
it knows which of the responders is the

1104
00:40:34,400 --> 00:40:37,200
default router and for how long

1105
00:40:37,200 --> 00:40:39,280
and it also knows some things about

1106
00:40:39,280 --> 00:40:41,200
prefixes that can use

1107
00:40:41,200 --> 00:40:44,079
now it wants to give itself

1108
00:40:44,079 --> 00:40:45,520
an address

1109
00:40:45,520 --> 00:40:47,680
and let's talk about

1110
00:40:47,680 --> 00:40:50,560
the slack process

1111
00:40:50,560 --> 00:40:52,800
well a node can be configured by a slack

1112
00:40:52,800 --> 00:40:55,440
or dhcp or both

1113
00:40:55,440 --> 00:40:58,800
let's assume for a moment it's just fact

1114
00:40:58,800 --> 00:41:01,680
what's the concept of operation here

1115
00:41:01,680 --> 00:41:05,119
well a node forms a linked local address

1116
00:41:05,119 --> 00:41:06,640
by appending

1117
00:41:06,640 --> 00:41:08,720
an interface to the well-known link

1118
00:41:08,720 --> 00:41:10,440
local prefix

1119
00:41:10,440 --> 00:41:12,000
fe-800

1120
00:41:12,000 --> 00:41:14,640
colon colon 64.

1121
00:41:14,640 --> 00:41:16,160
so

1122
00:41:16,160 --> 00:41:18,400
it knows that all link local addresses

1123
00:41:18,400 --> 00:41:22,000
start with fe800

1124
00:41:22,000 --> 00:41:26,079
it then picks 64 digits at uh 64 bits at

1125
00:41:26,079 --> 00:41:27,680
random

1126
00:41:27,680 --> 00:41:30,160
and forms an address and it says

1127
00:41:30,160 --> 00:41:32,560
i would like to be this address

1128
00:41:32,560 --> 00:41:34,880
now the odds are very strong

1129
00:41:34,880 --> 00:41:35,920
that

1130
00:41:35,920 --> 00:41:37,760
there is not another node on length with

1131
00:41:37,760 --> 00:41:39,200
the same address

1132
00:41:39,200 --> 00:41:41,520
because 2 to the 64th is a really big

1133
00:41:41,520 --> 00:41:43,760
number then it performs something called

1134
00:41:43,760 --> 00:41:44,880
duplicative

1135
00:41:44,880 --> 00:41:47,119
duplicate address detection

1136
00:41:47,119 --> 00:41:49,760
it sends an ns message

1137
00:41:49,760 --> 00:41:52,240
with the target equal to the link local

1138
00:41:52,240 --> 00:41:53,440
address

1139
00:41:53,440 --> 00:41:54,400
that

1140
00:41:54,400 --> 00:41:56,079
it just picked

1141
00:41:56,079 --> 00:41:58,560
so what it's doing is saying

1142
00:41:58,560 --> 00:42:00,480
is there anybody else on this lan

1143
00:42:00,480 --> 00:42:01,520
segment

1144
00:42:01,520 --> 00:42:03,599
who's got the address that i've just

1145
00:42:03,599 --> 00:42:04,880
picked

1146
00:42:04,880 --> 00:42:06,800
if there's no response

1147
00:42:06,800 --> 00:42:08,880
that's good news that means

1148
00:42:08,880 --> 00:42:10,000
that

1149
00:42:10,000 --> 00:42:11,680
there is no other

1150
00:42:11,680 --> 00:42:13,920
node with this address it can use

1151
00:42:13,920 --> 00:42:16,240
then the node sends if the node receives

1152
00:42:16,240 --> 00:42:17,839
an rs message

1153
00:42:17,839 --> 00:42:19,920
then there's an issue you know he's he's

1154
00:42:19,920 --> 00:42:22,560
picked another address and you need to

1155
00:42:22,560 --> 00:42:24,720
go and manually

1156
00:42:24,720 --> 00:42:26,560
configure it with a link local but the

1157
00:42:26,560 --> 00:42:28,800
odds of that happen happening are very

1158
00:42:28,800 --> 00:42:31,680
very slim the node forms

1159
00:42:31,680 --> 00:42:33,920
a gua by attending

1160
00:42:33,920 --> 00:42:36,079
an interface identifier the prefix that

1161
00:42:36,079 --> 00:42:39,040
it receives in the rra mess called the

1162
00:42:39,040 --> 00:42:40,720
gua address

1163
00:42:40,720 --> 00:42:43,520
that received in the rs ra message

1164
00:42:43,520 --> 00:42:45,440
and then it does the exact same thing

1165
00:42:45,440 --> 00:42:48,640
find out if there's another node on link

1166
00:42:48,640 --> 00:42:50,720
that is also using that address

1167
00:42:50,720 --> 00:42:51,680
if not

1168
00:42:51,680 --> 00:42:54,400
it's good to go when it has an address

1169
00:42:54,400 --> 00:42:55,200
well

1170
00:42:55,200 --> 00:42:57,680
thank you very much and i'm looking

1171
00:42:57,680 --> 00:43:00,640
forward to your questions

1172
00:43:01,520 --> 00:43:03,200
yay ron

1173
00:43:03,200 --> 00:43:04,560
thank you

1174
00:43:04,560 --> 00:43:06,880
uh

1175
00:43:06,880 --> 00:43:10,400
we don't have anything in the

1176
00:43:10,400 --> 00:43:11,760
no we don't have anything online yet

1177
00:43:11,760 --> 00:43:15,839
does anybody want to come up to the mics

1178
00:43:16,240 --> 00:43:17,520
going once

1179
00:43:17,520 --> 00:43:20,000
uh ron is joining us by telephone from

1180
00:43:20,000 --> 00:43:20,880
uh

1181
00:43:20,880 --> 00:43:23,359
sterling virginia i think

1182
00:43:23,359 --> 00:43:25,119
um

1183
00:43:25,119 --> 00:43:28,960
so does anybody have anything

1184
00:43:29,119 --> 00:43:30,800
bueller

1185
00:43:30,800 --> 00:43:35,040
everybody understands v6 that well

1186
00:43:35,760 --> 00:43:38,000
great uh who'd like to volunteer to

1187
00:43:38,000 --> 00:43:41,839
teach the second half of this

1188
00:43:44,800 --> 00:43:46,160
is that somebody walking up to the mic

1189
00:43:46,160 --> 00:43:49,200
in the back no

1190
00:43:49,359 --> 00:43:50,400
um

1191
00:43:50,400 --> 00:43:51,920
ron do you have any parting comments

1192
00:43:51,920 --> 00:43:53,280
since there's nobody at the mics and

1193
00:43:53,280 --> 00:43:55,839
nobody online do you have any questions

1194
00:43:55,839 --> 00:43:57,599
if you do have any questions feel free

1195
00:43:57,599 --> 00:44:02,560
to email me barbonica juniper.net

1196
00:44:06,319 --> 00:44:07,599
i

1197
00:44:07,599 --> 00:44:09,200
run where i am i'm having trouble

1198
00:44:09,200 --> 00:44:12,240
hearing you with the background echo so

1199
00:44:12,240 --> 00:44:14,560
um

1200
00:44:14,640 --> 00:44:16,720
i'm sorry if you do have any questions

1201
00:44:16,720 --> 00:44:19,160
feel free to email me at arbonica

1202
00:44:19,160 --> 00:44:22,560
juniper.net yeah uh please

1203
00:44:22,560 --> 00:44:27,359
mail ron uh arbonica juniper.net

1204
00:44:29,680 --> 00:44:31,359
uh anybody somebody coming to the mic

1205
00:44:31,359 --> 00:44:32,800
now

1206
00:44:32,800 --> 00:44:33,520
no

1207
00:44:33,520 --> 00:44:36,800
not somebody leaving uh okay ron thank

1208
00:44:36,800 --> 00:44:39,119
you for the presentation as always

1209
00:44:39,119 --> 00:44:41,200
wonderfully done

1210
00:44:41,200 --> 00:44:42,720
looking forward to seeing you as soon as

1211
00:44:42,720 --> 00:44:45,919
i can in person

1212
00:44:46,240 --> 00:44:47,760
and

1213
00:44:47,760 --> 00:44:50,560
on that note i think i'm going to say

1214
00:44:50,560 --> 00:44:52,400
thank you that closes the morning

1215
00:44:52,400 --> 00:44:54,790
session

1216
00:44:54,790 --> 00:44:59,110
[Music]

