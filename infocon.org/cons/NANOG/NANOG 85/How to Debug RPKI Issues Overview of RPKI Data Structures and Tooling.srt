1
00:00:00,000 --> 00:00:04,880
[Music]

2
00:00:04,880 --> 00:00:06,720
i'd like to introduce joe snyder as

3
00:00:06,720 --> 00:00:08,960
we'll be presenting how to debug rpkii

4
00:00:08,960 --> 00:00:11,679
issues overview of rpki data structures

5
00:00:11,679 --> 00:00:13,679
and tooling now stick with me this is a

6
00:00:13,679 --> 00:00:15,040
long introduction

7
00:00:15,040 --> 00:00:17,520
job is a principal engineer at fastly

8
00:00:17,520 --> 00:00:20,160
co-chair of the itf grow working group

9
00:00:20,160 --> 00:00:22,080
co-chair of the ripe routing working

10
00:00:22,080 --> 00:00:24,560
group vice president of peering db

11
00:00:24,560 --> 00:00:26,240
director of the route service support

12
00:00:26,240 --> 00:00:29,279
foundation manager of the irrd

13
00:00:29,279 --> 00:00:32,000
v4 project member of the ripe ncc

14
00:00:32,000 --> 00:00:33,840
executive board and art director most

15
00:00:33,840 --> 00:00:36,000
importantly for the open bsd project

16
00:00:36,000 --> 00:00:38,320
this is job's 15th time presenting at

17
00:00:38,320 --> 00:00:41,200
anag job's first talk was nanag was

18
00:00:41,200 --> 00:00:43,760
called nldog ring network debugging

19
00:00:43,760 --> 00:00:45,200
never was easier

20
00:00:45,200 --> 00:00:48,640
at nanon 56 in dallas 10 years ago

21
00:00:48,640 --> 00:00:50,320
welcome back to nano job it's a pleasure

22
00:00:50,320 --> 00:00:53,120
to have you back with us today

23
00:00:53,120 --> 00:00:56,360
thank you

24
00:00:58,800 --> 00:01:01,039
wow that was a much longer introduction

25
00:01:01,039 --> 00:01:03,120
than i anticipated

26
00:01:03,120 --> 00:01:06,000
um i'm joe snyder's uh thank you for

27
00:01:06,000 --> 00:01:07,680
having me here

28
00:01:07,680 --> 00:01:08,560
i

29
00:01:08,560 --> 00:01:10,720
first would like to appreciate apprecia

30
00:01:10,720 --> 00:01:13,840
express appreciation to uh the nanok uh

31
00:01:13,840 --> 00:01:16,240
staff and nanak volunteers i think it's

32
00:01:16,240 --> 00:01:18,000
really cool you brought all of us

33
00:01:18,000 --> 00:01:20,400
together in this beautiful city uh i've

34
00:01:20,400 --> 00:01:21,840
had a fantastic

35
00:01:21,840 --> 00:01:24,720
time the last few days and i hope we

36
00:01:24,720 --> 00:01:26,159
will come back to montreal at some

37
00:01:26,159 --> 00:01:28,880
future points

38
00:01:29,920 --> 00:01:32,159
today we're going to talk about rpki

39
00:01:32,159 --> 00:01:36,320
debugging and my agenda is as following

40
00:01:36,320 --> 00:01:38,079
we're going to discuss

41
00:01:38,079 --> 00:01:41,680
what are rpki signed objects exactly

42
00:01:41,680 --> 00:01:44,000
uh in the presentation i'm sharing an

43
00:01:44,000 --> 00:01:45,520
overview of

44
00:01:45,520 --> 00:01:47,439
what kind of objects exist and what

45
00:01:47,439 --> 00:01:49,439
their function is and

46
00:01:49,439 --> 00:01:52,560
give examples of human readable outputs

47
00:01:52,560 --> 00:01:55,759
i'll cover a little bit how rpki objects

48
00:01:55,759 --> 00:01:58,880
are discovered by rpki validators

49
00:01:58,880 --> 00:02:02,240
uh and and cover how various timers in

50
00:02:02,240 --> 00:02:04,560
this system interact with each other

51
00:02:04,560 --> 00:02:06,719
and then finally there's of course room

52
00:02:06,719 --> 00:02:10,639
for questions comments remarks

53
00:02:10,800 --> 00:02:13,360
so what's an rpki signed object you can

54
00:02:13,360 --> 00:02:16,560
use the unix utility cat to

55
00:02:16,560 --> 00:02:19,520
view a binary blob and

56
00:02:19,520 --> 00:02:21,360
if this is hard to read for you you're

57
00:02:21,360 --> 00:02:23,360
not the only one it is also hard to read

58
00:02:23,360 --> 00:02:25,280
for me

59
00:02:25,280 --> 00:02:29,680
the rpki signed objects are der encoded

60
00:02:29,680 --> 00:02:32,959
binary strings that contain a number of

61
00:02:32,959 --> 00:02:34,239
digital

62
00:02:34,239 --> 00:02:37,040
sub-objects and this is a departure from

63
00:02:37,040 --> 00:02:38,959
the model we had

64
00:02:38,959 --> 00:02:41,599
in say whois or irr

65
00:02:41,599 --> 00:02:43,360
if you look at other technologies such

66
00:02:43,360 --> 00:02:46,080
as internet routing registry uh with

67
00:02:46,080 --> 00:02:49,200
command line utilities you you would see

68
00:02:49,200 --> 00:02:51,519
human readable text that that is also

69
00:02:51,519 --> 00:02:53,360
mostly computer parsable

70
00:02:53,360 --> 00:02:55,200
and with the rpgi

71
00:02:55,200 --> 00:02:56,560
system we

72
00:02:56,560 --> 00:02:58,560
left that behind

73
00:02:58,560 --> 00:03:01,360
we sacrificed the degree of readability

74
00:03:01,360 --> 00:03:03,519
but we we did gain a cryptographic

75
00:03:03,519 --> 00:03:06,239
assurances

76
00:03:06,239 --> 00:03:07,680
so

77
00:03:07,680 --> 00:03:10,959
science objects are files

78
00:03:10,959 --> 00:03:12,879
on the file system

79
00:03:12,879 --> 00:03:15,599
and the the files are encoded following

80
00:03:15,599 --> 00:03:17,840
a serialization format

81
00:03:17,840 --> 00:03:21,440
that is formally notated in asn.1

82
00:03:21,440 --> 00:03:23,280
and if you want headache or have trouble

83
00:03:23,280 --> 00:03:26,400
sleeping that is the niche i would

84
00:03:26,400 --> 00:03:30,000
recommend you to to go towards

85
00:03:30,000 --> 00:03:31,760
each of these files

86
00:03:31,760 --> 00:03:36,239
is identifiable by the sha-256 of the

87
00:03:36,239 --> 00:03:37,760
file contents

88
00:03:37,760 --> 00:03:40,560
rpki objects are not malleable

89
00:03:40,560 --> 00:03:42,400
and this is a great property because

90
00:03:42,400 --> 00:03:45,440
this allows rpi objects to reference

91
00:03:45,440 --> 00:03:48,159
other rpki objects and we'll cover that

92
00:03:48,159 --> 00:03:49,920
later in the presentation

93
00:03:49,920 --> 00:03:52,239
but also from an auditing and debugging

94
00:03:52,239 --> 00:03:55,040
perspective it is a really cool property

95
00:03:55,040 --> 00:03:58,480
that each and every file in the rpki

96
00:03:58,480 --> 00:04:01,519
is is unique

97
00:04:01,519 --> 00:04:04,319
the signed objects are structured

98
00:04:04,319 --> 00:04:06,720
according to the cryptographic message

99
00:04:06,720 --> 00:04:09,040
syntax cms

100
00:04:09,040 --> 00:04:11,040
and cms is

101
00:04:11,040 --> 00:04:14,000
what you can think of as a envelope and

102
00:04:14,000 --> 00:04:16,478
on the outside of the envelope

103
00:04:16,478 --> 00:04:17,440
you have

104
00:04:17,440 --> 00:04:19,440
hints about what the contents of the

105
00:04:19,440 --> 00:04:20,798
envelope are

106
00:04:20,798 --> 00:04:23,120
and this allows software to

107
00:04:23,120 --> 00:04:25,600
layer by layer peel back

108
00:04:25,600 --> 00:04:29,520
these objects and parse them

109
00:04:29,520 --> 00:04:30,400
so

110
00:04:30,400 --> 00:04:32,240
inside the envelope

111
00:04:32,240 --> 00:04:33,360
there are

112
00:04:33,360 --> 00:04:34,240
two

113
00:04:34,240 --> 00:04:36,000
major components

114
00:04:36,000 --> 00:04:38,320
there's the so-called e-content or

115
00:04:38,320 --> 00:04:40,240
encapsulated content

116
00:04:40,240 --> 00:04:43,040
and that's the payload of an rpki signed

117
00:04:43,040 --> 00:04:45,840
object so for instance in the case of a

118
00:04:45,840 --> 00:04:46,880
roam

119
00:04:46,880 --> 00:04:50,479
the payload of the roa is a single asn

120
00:04:50,479 --> 00:04:53,120
that is authorized to originate a set of

121
00:04:53,120 --> 00:04:54,639
prefixes

122
00:04:54,639 --> 00:04:57,759
and additionally a set of one or more

123
00:04:57,759 --> 00:05:00,400
prefixes is listed and those together

124
00:05:00,400 --> 00:05:03,360
for the payload the rest of the object

125
00:05:03,360 --> 00:05:04,190
is uh

126
00:05:04,190 --> 00:05:05,759
[Music]

127
00:05:05,759 --> 00:05:08,639
the ee certificate that can be used to

128
00:05:08,639 --> 00:05:12,080
verify the cryptographic chain

129
00:05:12,080 --> 00:05:15,520
the x-519e certificate contains pointers

130
00:05:15,520 --> 00:05:18,400
to where you kind where you can find its

131
00:05:18,400 --> 00:05:20,560
cryptographic parents

132
00:05:20,560 --> 00:05:23,199
what the key identifier of the parent is

133
00:05:23,199 --> 00:05:25,600
what certificate refocation list applies

134
00:05:25,600 --> 00:05:26,320
to

135
00:05:26,320 --> 00:05:27,520
the object

136
00:05:27,520 --> 00:05:30,159
and so on

137
00:05:31,440 --> 00:05:32,639
now

138
00:05:32,639 --> 00:05:36,400
you can visualize the rpki as a

139
00:05:36,400 --> 00:05:39,759
a tree shape the root is

140
00:05:39,759 --> 00:05:42,080
the trust anchor

141
00:05:42,080 --> 00:05:43,280
and

142
00:05:43,280 --> 00:05:45,120
what we do with trust anchors is a thing

143
00:05:45,120 --> 00:05:47,440
called assumed trust

144
00:05:47,440 --> 00:05:50,240
a a trust anchor is a self-signed

145
00:05:50,240 --> 00:05:52,240
certificate and each operator that

146
00:05:52,240 --> 00:05:55,360
deploys rpki origin validation

147
00:05:55,360 --> 00:05:58,080
chooses which of the trust anchors they

148
00:05:58,080 --> 00:06:01,759
want to use in their network deployment

149
00:06:01,759 --> 00:06:04,160
and they in loading those trust anchor

150
00:06:04,160 --> 00:06:07,280
locators you you make a sort of a leap

151
00:06:07,280 --> 00:06:09,280
of faith that the operator of the trust

152
00:06:09,280 --> 00:06:10,479
anchor

153
00:06:10,479 --> 00:06:13,919
is acting in your your best interest

154
00:06:13,919 --> 00:06:15,280
now

155
00:06:15,280 --> 00:06:17,680
there are uh if you view

156
00:06:17,680 --> 00:06:20,560
this in your mind as a graph you have

157
00:06:20,560 --> 00:06:22,800
the root the trust anchor

158
00:06:22,800 --> 00:06:24,880
there are intermediate nodes these are

159
00:06:24,880 --> 00:06:27,280
called certificate authorities

160
00:06:27,280 --> 00:06:29,440
and then at finally at the edges of the

161
00:06:29,440 --> 00:06:31,840
graph or the leaves you have objects

162
00:06:31,840 --> 00:06:34,639
like roas manifests

163
00:06:34,639 --> 00:06:36,639
ghostbuster records or

164
00:06:36,639 --> 00:06:39,120
bgp set keys

165
00:06:39,120 --> 00:06:40,240
and

166
00:06:40,240 --> 00:06:42,639
the the arcs of trust that you follow

167
00:06:42,639 --> 00:06:44,319
towards those

168
00:06:44,319 --> 00:06:46,240
notes at the

169
00:06:46,240 --> 00:06:47,600
those leaves

170
00:06:47,600 --> 00:06:51,280
that's called derived trust

171
00:06:51,919 --> 00:06:55,360
so the procedure roughly is uh you have

172
00:06:55,360 --> 00:06:58,319
a trust anchor locator in hand this is a

173
00:06:58,319 --> 00:07:02,319
small file that contains a uri and a

174
00:07:02,319 --> 00:07:03,919
public key

175
00:07:03,919 --> 00:07:05,840
you fetch the certificate that is

176
00:07:05,840 --> 00:07:08,800
located at the uri you can verify that

177
00:07:08,800 --> 00:07:10,800
it's the correct one by comparing the

178
00:07:10,800 --> 00:07:12,880
public key

179
00:07:12,880 --> 00:07:15,360
and that certificate contains

180
00:07:15,360 --> 00:07:17,759
additional pointers where to find more

181
00:07:17,759 --> 00:07:19,759
rpki information so it contains a

182
00:07:19,759 --> 00:07:21,280
pointer to

183
00:07:21,280 --> 00:07:24,800
a manifest to a ca repository

184
00:07:24,800 --> 00:07:28,160
and so on you download the objects

185
00:07:28,160 --> 00:07:29,199
behind

186
00:07:29,199 --> 00:07:31,680
those pointers so you download the

187
00:07:31,680 --> 00:07:33,199
manifest

188
00:07:33,199 --> 00:07:35,520
you open this manifest you find a

189
00:07:35,520 --> 00:07:37,759
listing of files and you download each

190
00:07:37,759 --> 00:07:40,560
one of those and you verify all of these

191
00:07:40,560 --> 00:07:41,680
as you go

192
00:07:41,680 --> 00:07:44,720
now in reality validators will

193
00:07:44,720 --> 00:07:47,759
sweep in all the data in a bulk

194
00:07:47,759 --> 00:07:50,160
consumption fashion

195
00:07:50,160 --> 00:07:53,840
so it's not that validators step by step

196
00:07:53,840 --> 00:07:56,319
walk through the tree and every time

197
00:07:56,319 --> 00:07:59,840
initiate a download action to to up

198
00:07:59,840 --> 00:08:02,479
fetch the next objects but conceptually

199
00:08:02,479 --> 00:08:04,080
this is how

200
00:08:04,080 --> 00:08:08,479
validators approach the rpki tree

201
00:08:09,039 --> 00:08:11,360
i made a beautiful drawing it's not

202
00:08:11,360 --> 00:08:13,680
available as nft

203
00:08:13,680 --> 00:08:16,400
you can have it for free

204
00:08:16,400 --> 00:08:18,319
and what i try to express in this

205
00:08:18,319 --> 00:08:22,000
drawing is uh the the pink lines is the

206
00:08:22,000 --> 00:08:25,440
the discovery of aspects in this

207
00:08:25,440 --> 00:08:29,120
and the the black pointers are how you

208
00:08:29,120 --> 00:08:30,479
verify

209
00:08:30,479 --> 00:08:33,839
trust up to the trust anchor

210
00:08:33,839 --> 00:08:36,080
so at the top you see a

211
00:08:36,080 --> 00:08:38,799
and this pattern of a group of

212
00:08:38,799 --> 00:08:40,399
certificates certificate a manifest a

213
00:08:40,399 --> 00:08:43,519
crl and one or more roas

214
00:08:43,519 --> 00:08:44,320
this

215
00:08:44,320 --> 00:08:47,040
small molecule or pattern is repeated

216
00:08:47,040 --> 00:08:50,000
over and over all through the rpki

217
00:08:50,000 --> 00:08:52,480
data structures in the global rpi

218
00:08:52,480 --> 00:08:54,160
database

219
00:08:54,160 --> 00:08:55,519
so a

220
00:08:55,519 --> 00:08:57,360
certificate

221
00:08:57,360 --> 00:09:00,560
can be recognized by its ski

222
00:09:00,560 --> 00:09:03,120
this is the subject key identifier you

223
00:09:03,120 --> 00:09:06,839
can think of this as the reference to

224
00:09:06,839 --> 00:09:11,600
itself and the aki and the aki is uh

225
00:09:11,600 --> 00:09:12,720
the hash

226
00:09:12,720 --> 00:09:14,320
of uh

227
00:09:14,320 --> 00:09:17,120
the public key of the

228
00:09:17,120 --> 00:09:19,600
parent of this object

229
00:09:19,600 --> 00:09:23,120
and that tuple together is

230
00:09:23,120 --> 00:09:25,440
an important combination to start

231
00:09:25,440 --> 00:09:29,760
building a chain to to validate objects

232
00:09:29,760 --> 00:09:31,440
now a certificate

233
00:09:31,440 --> 00:09:34,160
also contains a pointer to a manifest

234
00:09:34,160 --> 00:09:36,800
and a manifest is a listing of files

235
00:09:36,800 --> 00:09:39,360
that belong together and the manifest

236
00:09:39,360 --> 00:09:40,959
itself also has

237
00:09:40,959 --> 00:09:45,279
uh an ee x 509 certificate so all these

238
00:09:45,279 --> 00:09:47,040
signed objects the reason they're called

239
00:09:47,040 --> 00:09:48,720
signed is that all of them carry

240
00:09:48,720 --> 00:09:51,519
signatures that you can validate in

241
00:09:51,519 --> 00:09:53,839
relationship to to other objects in the

242
00:09:53,839 --> 00:09:56,560
rpki ecosystem

243
00:09:56,560 --> 00:09:58,160
the the manifest

244
00:09:58,160 --> 00:10:01,440
has a ski a reference to itself

245
00:10:01,440 --> 00:10:04,320
it has a pointer to what its parent is

246
00:10:04,320 --> 00:10:06,320
it will point out what the certificate

247
00:10:06,320 --> 00:10:08,959
revocation list is that must be checked

248
00:10:08,959 --> 00:10:09,920
to

249
00:10:09,920 --> 00:10:12,640
confirm that none of the certificates in

250
00:10:12,640 --> 00:10:13,440
this

251
00:10:13,440 --> 00:10:14,399
small

252
00:10:14,399 --> 00:10:18,680
grouping of objects is revoked

253
00:10:18,800 --> 00:10:20,079
and so on

254
00:10:20,079 --> 00:10:21,360
so

255
00:10:21,360 --> 00:10:22,800
validators

256
00:10:22,800 --> 00:10:24,800
discover

257
00:10:24,800 --> 00:10:26,720
new objects

258
00:10:26,720 --> 00:10:29,120
following various pointers

259
00:10:29,120 --> 00:10:32,560
in the ee certificates

260
00:10:32,560 --> 00:10:34,800
and then you walk back up the chain to

261
00:10:34,800 --> 00:10:37,040
to validate whether everything is

262
00:10:37,040 --> 00:10:40,640
cryptographically intact

263
00:10:42,000 --> 00:10:45,360
as i mentioned before this tuple of uh

264
00:10:45,360 --> 00:10:48,160
the key pair identifier of the parent

265
00:10:48,160 --> 00:10:49,839
and the key pair identifier of the

266
00:10:49,839 --> 00:10:51,279
object itself

267
00:10:51,279 --> 00:10:54,079
the aki and the ski

268
00:10:54,079 --> 00:10:56,720
they are accompanied with

269
00:10:56,720 --> 00:10:58,480
information access

270
00:10:58,480 --> 00:11:00,800
extensions so there's an authority

271
00:11:00,800 --> 00:11:02,560
information

272
00:11:02,560 --> 00:11:04,800
information access extension that

273
00:11:04,800 --> 00:11:07,600
contains a uri where exactly the parent

274
00:11:07,600 --> 00:11:09,519
can be downloaded

275
00:11:09,519 --> 00:11:11,279
and similar there's a subject

276
00:11:11,279 --> 00:11:14,640
information access which is a uri where

277
00:11:14,640 --> 00:11:17,920
on the internet the

278
00:11:18,399 --> 00:11:20,720
object is

279
00:11:20,720 --> 00:11:22,880
so you you

280
00:11:22,880 --> 00:11:25,120
to confirm the validity of a given

281
00:11:25,120 --> 00:11:26,160
object

282
00:11:26,160 --> 00:11:27,600
you have to

283
00:11:27,600 --> 00:11:30,959
also obtain the parents to

284
00:11:30,959 --> 00:11:33,440
see if if the parent actually signed the

285
00:11:33,440 --> 00:11:35,279
object you're trying to validate all the

286
00:11:35,279 --> 00:11:38,160
way up to the self-signed trust anchor

287
00:11:38,160 --> 00:11:42,000
loop transdenker certificate

288
00:11:42,000 --> 00:11:42,959
so

289
00:11:42,959 --> 00:11:45,279
let's get into debugging

290
00:11:45,279 --> 00:11:47,040
from the same group of people that

291
00:11:47,040 --> 00:11:50,160
brought you open ssh libra ssl and open

292
00:11:50,160 --> 00:11:51,279
bgpd

293
00:11:51,279 --> 00:11:52,720
there is a

294
00:11:52,720 --> 00:11:56,560
magnificent tool called rpki clients and

295
00:11:56,560 --> 00:11:59,519
rpki clients not only runs on open bsd

296
00:11:59,519 --> 00:12:02,079
but also on all flavors of linux and

297
00:12:02,079 --> 00:12:06,000
unix it's very portable software

298
00:12:06,000 --> 00:12:09,920
and rpki client is sort of the tcp dump

299
00:12:09,920 --> 00:12:14,319
of the rpki technology stack

300
00:12:14,480 --> 00:12:16,240
this

301
00:12:16,240 --> 00:12:19,040
slide shows how you can install rpki

302
00:12:19,040 --> 00:12:21,760
clients on debian unstable

303
00:12:21,760 --> 00:12:24,240
in yellow and black you see what i type

304
00:12:24,240 --> 00:12:26,399
into the command line

305
00:12:26,399 --> 00:12:28,560
and the white on black

306
00:12:28,560 --> 00:12:30,800
text is what the command line will

307
00:12:30,800 --> 00:12:32,480
likely show you

308
00:12:32,480 --> 00:12:34,560
so step one is to just install the

309
00:12:34,560 --> 00:12:37,360
software using apt install

310
00:12:37,360 --> 00:12:39,760
rpi clients it will pull in the required

311
00:12:39,760 --> 00:12:41,680
dependencies and

312
00:12:41,680 --> 00:12:43,920
i do not recommend people to compile

313
00:12:43,920 --> 00:12:47,040
cryptographic software themselves

314
00:12:47,040 --> 00:12:49,440
make your life easier use pre-packaged

315
00:12:49,440 --> 00:12:52,000
pre-compiled

316
00:12:52,000 --> 00:12:54,480
distributions of cryptographic software

317
00:12:54,480 --> 00:12:56,720
do not compile things yourself

318
00:12:56,720 --> 00:12:57,839
anyway

319
00:12:57,839 --> 00:13:00,639
you you install rpki clients

320
00:13:00,639 --> 00:13:04,160
you start it so that the

321
00:13:04,160 --> 00:13:06,800
the process connects to the internet and

322
00:13:06,800 --> 00:13:09,519
fetches all the rpki objects that can be

323
00:13:09,519 --> 00:13:11,920
reached through the trust anchor

324
00:13:11,920 --> 00:13:14,720
that you configured on the system

325
00:13:14,720 --> 00:13:17,120
and once that's done you can change

326
00:13:17,120 --> 00:13:20,959
directory into the so-called cache there

327
00:13:20,959 --> 00:13:23,360
the cache directory is where the rpki

328
00:13:23,360 --> 00:13:27,040
client utility on the file system stores

329
00:13:27,040 --> 00:13:27,920
all

330
00:13:27,920 --> 00:13:30,240
signed objects that it discovered and

331
00:13:30,240 --> 00:13:32,000
considered valid

332
00:13:32,000 --> 00:13:34,480
the cache directory does not contain

333
00:13:34,480 --> 00:13:37,200
objects that are invalid invalid objects

334
00:13:37,200 --> 00:13:39,680
are moved out of the way

335
00:13:39,680 --> 00:13:41,600
or deleted

336
00:13:41,600 --> 00:13:44,240
so if you're inside the cache directory

337
00:13:44,240 --> 00:13:48,000
you can issue the command ls listing and

338
00:13:48,000 --> 00:13:50,399
it shows you a number of

339
00:13:50,399 --> 00:13:52,720
directories each of these directories

340
00:13:52,720 --> 00:13:57,360
represents a rpki publication point

341
00:13:58,480 --> 00:14:00,880
i guess i cannot use the pointer around

342
00:14:00,880 --> 00:14:02,399
the corner

343
00:14:02,399 --> 00:14:04,399
but if you squint your eyes a little bit

344
00:14:04,399 --> 00:14:06,240
you can see in the upper

345
00:14:06,240 --> 00:14:07,920
right of the listing

346
00:14:07,920 --> 00:14:10,480
rpki.erin.net

347
00:14:10,480 --> 00:14:12,720
and if you would change directory into

348
00:14:12,720 --> 00:14:15,360
that location you would be inside

349
00:14:15,360 --> 00:14:18,079
aaron's rpki repository

350
00:14:18,079 --> 00:14:20,000
and able to inspect

351
00:14:20,000 --> 00:14:23,360
all signed objects there

352
00:14:23,360 --> 00:14:24,320
now

353
00:14:24,320 --> 00:14:28,079
how do you actually inspect a object

354
00:14:28,079 --> 00:14:31,600
rpki client has a command line option

355
00:14:31,600 --> 00:14:33,440
dash f

356
00:14:33,440 --> 00:14:36,480
that stands for file mode

357
00:14:36,480 --> 00:14:40,240
i hope i'm pronouncing that correctly

358
00:14:40,240 --> 00:14:42,160
in file mode uh

359
00:14:42,160 --> 00:14:44,880
you you do not uh

360
00:14:44,880 --> 00:14:47,040
instruct a program to to fetch all

361
00:14:47,040 --> 00:14:50,720
objects and validate uh uh everything

362
00:14:50,720 --> 00:14:54,720
but you ask it to parse a single object

363
00:14:54,720 --> 00:14:56,160
and its parent

364
00:14:56,160 --> 00:14:58,000
and the serial that is associated with

365
00:14:58,000 --> 00:14:59,680
it and its parent's parent and the

366
00:14:59,680 --> 00:15:01,760
serial that is associated with that all

367
00:15:01,760 --> 00:15:03,760
the way up to the trust anchor so

368
00:15:03,760 --> 00:15:06,800
instead of uh validating uh

369
00:15:06,800 --> 00:15:08,079
uh

370
00:15:08,079 --> 00:15:10,240
more than a hundred thousand objects in

371
00:15:10,240 --> 00:15:12,880
file mode you zoom in on exactly one

372
00:15:12,880 --> 00:15:14,560
object

373
00:15:14,560 --> 00:15:17,680
and it will in human readable format

374
00:15:17,680 --> 00:15:18,560
print

375
00:15:18,560 --> 00:15:21,040
the the encapsulated content

376
00:15:21,040 --> 00:15:23,920
and various other attributes of the ee

377
00:15:23,920 --> 00:15:26,240
certificate

378
00:15:26,240 --> 00:15:29,519
and in in the the pink background is

379
00:15:29,519 --> 00:15:32,000
what signifies the the encapsulated

380
00:15:32,000 --> 00:15:34,480
content the white text on black

381
00:15:34,480 --> 00:15:37,279
backgrounds is what comes from the x 509

382
00:15:37,279 --> 00:15:39,759
ee certificate

383
00:15:39,759 --> 00:15:42,639
then the blue

384
00:15:42,880 --> 00:15:44,240
colored text

385
00:15:44,240 --> 00:15:45,920
is hashes

386
00:15:45,920 --> 00:15:48,079
earlier on i mentioned that

387
00:15:48,079 --> 00:15:51,120
rpki signed objects are non-malleable

388
00:15:51,120 --> 00:15:54,399
and this property is important because

389
00:15:54,399 --> 00:15:57,120
each manifest contains a listing of

390
00:15:57,120 --> 00:15:59,199
files that belong together

391
00:15:59,199 --> 00:16:00,880
and it lists

392
00:16:00,880 --> 00:16:02,079
file name

393
00:16:02,079 --> 00:16:05,519
and the sha-256 hash of the file

394
00:16:05,519 --> 00:16:06,720
contents

395
00:16:06,720 --> 00:16:09,199
and this is how you can verify as

396
00:16:09,199 --> 00:16:11,360
validator whether you have the correct

397
00:16:11,360 --> 00:16:15,120
files uh together or maybe you somehow

398
00:16:15,120 --> 00:16:19,120
ended up downloading a partial set

399
00:16:19,120 --> 00:16:22,320
so manifests are

400
00:16:22,320 --> 00:16:25,440
of critical importance in the rpki

401
00:16:25,440 --> 00:16:28,240
it is a really cool innovation compared

402
00:16:28,240 --> 00:16:31,440
to the x509 framework on which the rpki

403
00:16:31,440 --> 00:16:32,800
was built

404
00:16:32,800 --> 00:16:35,440
and manifests allow us to detect replay

405
00:16:35,440 --> 00:16:36,399
attacks

406
00:16:36,399 --> 00:16:38,639
because each manifest contains a

407
00:16:38,639 --> 00:16:41,279
so-called manifest number and those can

408
00:16:41,279 --> 00:16:44,000
only monotonically increase

409
00:16:44,000 --> 00:16:46,399
and this means that every manifest that

410
00:16:46,399 --> 00:16:48,959
you you fetch you can compare the

411
00:16:48,959 --> 00:16:51,279
manifest number and you will use the

412
00:16:51,279 --> 00:16:52,399
higher one

413
00:16:52,399 --> 00:16:55,199
and if a repository is presenting a

414
00:16:55,199 --> 00:16:56,720
manifest to you

415
00:16:56,720 --> 00:16:58,959
with a manifest number that is lower

416
00:16:58,959 --> 00:17:01,680
than what you already locally had cached

417
00:17:01,680 --> 00:17:02,839
you know that the

418
00:17:02,839 --> 00:17:06,880
repository you're connecting to is is

419
00:17:06,880 --> 00:17:08,880
malfunctioning

420
00:17:08,880 --> 00:17:11,599
replay attacks

421
00:17:11,599 --> 00:17:14,000
not only happen because evil hackers

422
00:17:14,000 --> 00:17:16,240
want to give you a bad day but they can

423
00:17:16,240 --> 00:17:19,119
also quite easily happen

424
00:17:19,119 --> 00:17:22,000
if for instance

425
00:17:22,000 --> 00:17:25,039
a cdn cache delivery system is somewhat

426
00:17:25,039 --> 00:17:26,240
out of sync

427
00:17:26,240 --> 00:17:28,079
and you ended up

428
00:17:28,079 --> 00:17:31,200
connecting to a node that has older rpki

429
00:17:31,200 --> 00:17:33,520
data than the origin

430
00:17:33,520 --> 00:17:34,559
so

431
00:17:34,559 --> 00:17:36,400
replay attacks can also happen by

432
00:17:36,400 --> 00:17:37,679
accident

433
00:17:37,679 --> 00:17:40,160
if if the cdn

434
00:17:40,160 --> 00:17:42,480
if there is a cdn in the middle or some

435
00:17:42,480 --> 00:17:46,320
other apparatus that is was intended to

436
00:17:46,320 --> 00:17:49,120
help distribution of objects but

437
00:17:49,120 --> 00:17:52,480
somehow is malfunctioning

438
00:17:52,480 --> 00:17:56,960
manifests also help to detect whether

439
00:17:56,960 --> 00:17:59,120
the repository is

440
00:17:59,120 --> 00:18:01,840
providing you with a a

441
00:18:01,840 --> 00:18:04,640
coherent set of objects uh and that they

442
00:18:04,640 --> 00:18:06,880
were not altered because the manifest

443
00:18:06,880 --> 00:18:10,080
lists the sha-256 hashes of the the

444
00:18:10,080 --> 00:18:12,720
objects that that belong together

445
00:18:12,720 --> 00:18:16,080
uh and if an object is corrupted through

446
00:18:16,080 --> 00:18:17,120
some way

447
00:18:17,120 --> 00:18:19,360
maybe there's a bit flip maybe there's

448
00:18:19,360 --> 00:18:20,880
uh

449
00:18:20,880 --> 00:18:23,360
gamma radiation from space doing

450
00:18:23,360 --> 00:18:25,600
something

451
00:18:25,600 --> 00:18:27,039
you can

452
00:18:27,039 --> 00:18:30,400
confirm the the the sha256 hash of what

453
00:18:30,400 --> 00:18:33,280
you retrieved with what is listed on the

454
00:18:33,280 --> 00:18:36,080
manifest and if they match you know that

455
00:18:36,080 --> 00:18:36,799
you

456
00:18:36,799 --> 00:18:40,080
uh up to each individual bit uh have to

457
00:18:40,080 --> 00:18:42,400
correct uh

458
00:18:42,400 --> 00:18:43,600
file

459
00:18:43,600 --> 00:18:45,679
it also detects you to

460
00:18:45,679 --> 00:18:48,000
allows you to detect whether files have

461
00:18:48,000 --> 00:18:50,960
been deleted

462
00:18:51,039 --> 00:18:53,919
so if a file is listed on a manifest but

463
00:18:53,919 --> 00:18:54,840
in

464
00:18:54,840 --> 00:18:57,440
retrieving files from the publication

465
00:18:57,440 --> 00:19:00,799
point either via rdp or rsync

466
00:19:00,799 --> 00:19:02,799
and for some reason you you didn't

467
00:19:02,799 --> 00:19:05,440
receive information about that file

468
00:19:05,440 --> 00:19:07,600
then you know that you have an

469
00:19:07,600 --> 00:19:10,480
incomplete set of data

470
00:19:10,480 --> 00:19:12,720
and this brings us to

471
00:19:12,720 --> 00:19:15,360
that manifests are a

472
00:19:15,360 --> 00:19:18,000
robust mechanism to bundle robas

473
00:19:18,000 --> 00:19:19,039
together

474
00:19:19,039 --> 00:19:22,400
now why is this important

475
00:19:22,559 --> 00:19:25,679
if i create a robot covering a slash 16

476
00:19:25,679 --> 00:19:29,440
and additionally i create a roa

477
00:19:29,440 --> 00:19:32,720
for say a slash 24 that i assigned to to

478
00:19:32,720 --> 00:19:35,600
a different asn

479
00:19:35,600 --> 00:19:38,000
i will be announcing the slash 16 from

480
00:19:38,000 --> 00:19:39,679
my asn

481
00:19:39,679 --> 00:19:41,840
the other entity is announcing the the

482
00:19:41,840 --> 00:19:44,960
slash 24 a more specific ofsted

483
00:19:44,960 --> 00:19:46,559
16.

484
00:19:46,559 --> 00:19:48,640
and if two the two rows

485
00:19:48,640 --> 00:19:51,120
coexist and all validators have access

486
00:19:51,120 --> 00:19:54,160
to those two roas both our announcements

487
00:19:54,160 --> 00:19:56,240
will be valid

488
00:19:56,240 --> 00:19:58,160
but the moment

489
00:19:58,160 --> 00:20:00,400
if for one reason or another

490
00:20:00,400 --> 00:20:03,200
a validator only sees the robot covering

491
00:20:03,200 --> 00:20:05,200
the slash 16

492
00:20:05,200 --> 00:20:07,280
the bhp announcement covering the slash

493
00:20:07,280 --> 00:20:10,559
24 will be considered invalid because

494
00:20:10,559 --> 00:20:12,960
it's rpki invalid

495
00:20:12,960 --> 00:20:15,360
and in such scenarios

496
00:20:15,360 --> 00:20:19,120
it's better to discard both roas if one

497
00:20:19,120 --> 00:20:21,280
of the two is missing rather than to

498
00:20:21,280 --> 00:20:23,120
proceed and use

499
00:20:23,120 --> 00:20:26,320
as many rows as you could get access to

500
00:20:26,320 --> 00:20:27,840
so manifests

501
00:20:27,840 --> 00:20:30,720
are are the mechanism to tell the world

502
00:20:30,720 --> 00:20:32,640
use these robots together

503
00:20:32,640 --> 00:20:34,960
or don't use them at all and that is

504
00:20:34,960 --> 00:20:37,360
what allows us to to

505
00:20:37,360 --> 00:20:40,720
create a very fine-grained

506
00:20:40,720 --> 00:20:43,039
robot configurations that match up with

507
00:20:43,039 --> 00:20:46,640
the reality of our business

508
00:20:47,440 --> 00:20:50,240
um let's take a look at another object

509
00:20:50,240 --> 00:20:53,200
that is used throughout the rpki

510
00:20:53,200 --> 00:20:57,520
crls certificate refocation lists

511
00:20:57,520 --> 00:21:01,440
crls are used to tell the world well

512
00:21:01,440 --> 00:21:02,720
previously

513
00:21:02,720 --> 00:21:03,919
i

514
00:21:03,919 --> 00:21:06,640
signed so and so object

515
00:21:06,640 --> 00:21:08,960
but that's no longer the case

516
00:21:08,960 --> 00:21:10,960
you should if you encounter that

517
00:21:10,960 --> 00:21:12,480
particular

518
00:21:12,480 --> 00:21:14,000
certificate

519
00:21:14,000 --> 00:21:16,400
you should consider it invalid

520
00:21:16,400 --> 00:21:17,520
even though

521
00:21:17,520 --> 00:21:20,320
it might not have expired yet even

522
00:21:20,320 --> 00:21:21,440
though

523
00:21:21,440 --> 00:21:23,760
the signature matches up to the the

524
00:21:23,760 --> 00:21:26,159
parent and the parents signature matches

525
00:21:26,159 --> 00:21:28,960
up to their parents

526
00:21:28,960 --> 00:21:31,520
crls are the mechanism to

527
00:21:31,520 --> 00:21:32,640
pull back

528
00:21:32,640 --> 00:21:34,559
uh uh uh

529
00:21:34,559 --> 00:21:37,039
to signal to the world that

530
00:21:37,039 --> 00:21:38,720
the information that was previously

531
00:21:38,720 --> 00:21:40,159
distributed

532
00:21:40,159 --> 00:21:42,960
is no longer as valid

533
00:21:42,960 --> 00:21:44,799
there's thousands of serials throughout

534
00:21:44,799 --> 00:21:46,960
the rpki ecosystem

535
00:21:46,960 --> 00:21:51,360
uh on average each uh crl lists about 12

536
00:21:51,360 --> 00:21:53,360
revoked certificates

537
00:21:53,360 --> 00:21:55,919
and they also are a critical component

538
00:21:55,919 --> 00:21:56,799
of

539
00:21:56,799 --> 00:22:01,679
the the integrity that rpki can offer us

540
00:22:01,679 --> 00:22:02,799
crls

541
00:22:02,799 --> 00:22:04,960
generally are short-lived

542
00:22:04,960 --> 00:22:07,760
uh because if you

543
00:22:07,760 --> 00:22:09,679
want to tell the world this is the list

544
00:22:09,679 --> 00:22:12,400
of things that no longer is valid it of

545
00:22:12,400 --> 00:22:14,320
course makes a lot of sense that that

546
00:22:14,320 --> 00:22:18,159
list is periodically refreshed

547
00:22:18,159 --> 00:22:19,360
and this is

548
00:22:19,360 --> 00:22:20,880
uh forced

549
00:22:20,880 --> 00:22:23,600
by setting the expiration time of crls

550
00:22:23,600 --> 00:22:26,880
fairly short so in the order of say

551
00:22:26,880 --> 00:22:28,159
8 to

552
00:22:28,159 --> 00:22:30,480
32 hours

553
00:22:30,480 --> 00:22:31,760
and this

554
00:22:31,760 --> 00:22:34,240
forces validators to periodically

555
00:22:34,240 --> 00:22:35,679
refresh

556
00:22:35,679 --> 00:22:38,559
between say once an hour up to once

557
00:22:38,559 --> 00:22:40,960
every 10 minutes uh

558
00:22:40,960 --> 00:22:41,840
the

559
00:22:41,840 --> 00:22:44,880
the serials to confirm whether uh things

560
00:22:44,880 --> 00:22:47,039
have been revoked or not

561
00:22:47,039 --> 00:22:49,520
so crls are really what drive the the

562
00:22:49,520 --> 00:22:52,240
sort of speed of the rpki ecosystem

563
00:22:52,240 --> 00:22:53,039
because

564
00:22:53,039 --> 00:22:55,440
i think those of you that have created

565
00:22:55,440 --> 00:22:56,480
aroma

566
00:22:56,480 --> 00:22:58,640
you generally see in the roha

567
00:22:58,640 --> 00:23:01,520
web uis that that the expiration date is

568
00:23:01,520 --> 00:23:03,760
i don't know 10 years from now or two

569
00:23:03,760 --> 00:23:06,480
years from now

570
00:23:06,480 --> 00:23:09,360
those expiration dates are long lived

571
00:23:09,360 --> 00:23:13,520
crls are on the short left side

572
00:23:13,840 --> 00:23:15,760
another cool object that exists in the

573
00:23:15,760 --> 00:23:19,360
rpki is called a ghostbuster records

574
00:23:19,360 --> 00:23:21,600
who you gonna call

575
00:23:21,600 --> 00:23:25,600
ghostbus directors exist to

576
00:23:25,600 --> 00:23:28,799
to drop contact information in the rpk

577
00:23:28,799 --> 00:23:30,480
system itself

578
00:23:30,480 --> 00:23:32,720
so that if there is some kind of issue

579
00:23:32,720 --> 00:23:35,520
with a publication point or a set of

580
00:23:35,520 --> 00:23:38,640
signatures or or objects

581
00:23:38,640 --> 00:23:40,720
that it's it's like a business card

582
00:23:40,720 --> 00:23:42,640
inside the rpk

583
00:23:42,640 --> 00:23:43,760
and

584
00:23:43,760 --> 00:23:47,120
i've created a gbr record

585
00:23:47,120 --> 00:23:49,279
referring to my contact details and i

586
00:23:49,279 --> 00:23:51,679
put this on my personal publication

587
00:23:51,679 --> 00:23:52,799
point

588
00:23:52,799 --> 00:23:54,960
so if there's anything wrong with that

589
00:23:54,960 --> 00:23:56,880
publication point

590
00:23:56,880 --> 00:23:59,360
you can look at my vcard and then send

591
00:23:59,360 --> 00:24:02,720
me an email or maybe call me

592
00:24:02,720 --> 00:24:03,520
or

593
00:24:03,520 --> 00:24:06,400
send me candy up to you guys

594
00:24:06,400 --> 00:24:08,640
um

595
00:24:09,279 --> 00:24:10,960
it might seem

596
00:24:10,960 --> 00:24:13,120
awkward to have

597
00:24:13,120 --> 00:24:16,320
v cards in the rpki ecosystem in the

598
00:24:16,320 --> 00:24:17,279
current

599
00:24:17,279 --> 00:24:19,919
stage of rpki deployments

600
00:24:19,919 --> 00:24:22,080
because if there's an issue with an

601
00:24:22,080 --> 00:24:26,240
object on say rpki.eran.net

602
00:24:26,240 --> 00:24:28,559
obviously you're going to call aaron

603
00:24:28,559 --> 00:24:30,240
because

604
00:24:30,240 --> 00:24:33,520
the the the domain name is a strong

605
00:24:33,520 --> 00:24:35,840
suggestion where to go

606
00:24:35,840 --> 00:24:36,640
but

607
00:24:36,640 --> 00:24:40,159
we're moving towards a world uh where a

608
00:24:40,159 --> 00:24:42,640
technology called publish in parent is

609
00:24:42,640 --> 00:24:43,919
used

610
00:24:43,919 --> 00:24:46,159
and the mechanism is that the the

611
00:24:46,159 --> 00:24:48,799
cryptographic operations happen

612
00:24:48,799 --> 00:24:50,400
on premise

613
00:24:50,400 --> 00:24:52,799
but the publication of the objects

614
00:24:52,799 --> 00:24:55,520
happens in the parent

615
00:24:55,520 --> 00:24:58,559
so the the cryptographic delegation

616
00:24:58,559 --> 00:25:01,039
is towards your own uh certificate

617
00:25:01,039 --> 00:25:03,039
authority that that you run on your

618
00:25:03,039 --> 00:25:05,279
computing equipment and once you've

619
00:25:05,279 --> 00:25:08,240
signed and created objects you send them

620
00:25:08,240 --> 00:25:10,320
over to aaron and they appear on the

621
00:25:10,320 --> 00:25:11,919
errand server

622
00:25:11,919 --> 00:25:15,200
so in such instances you'll have objects

623
00:25:15,200 --> 00:25:17,440
that were not created by aaron but are

624
00:25:17,440 --> 00:25:20,080
hosted on the errand server

625
00:25:20,080 --> 00:25:23,360
for such scenarios it is super useful if

626
00:25:23,360 --> 00:25:25,919
people leave behind business cards

627
00:25:25,919 --> 00:25:28,640
because the location of the signed

628
00:25:28,640 --> 00:25:32,240
object is not a good hint who

629
00:25:32,240 --> 00:25:34,159
to call when there is an issue with the

630
00:25:34,159 --> 00:25:35,600
object

631
00:25:35,600 --> 00:25:36,799
um

632
00:25:36,799 --> 00:25:38,000
additionally

633
00:25:38,000 --> 00:25:40,000
new technologies are coming out of the

634
00:25:40,000 --> 00:25:43,679
ietf cytops group such as resource

635
00:25:43,679 --> 00:25:45,760
science checklists

636
00:25:45,760 --> 00:25:47,440
i'm going to tell you all about that in

637
00:25:47,440 --> 00:25:49,440
a different presentation

638
00:25:49,440 --> 00:25:51,600
but it's a mechanism where we

639
00:25:51,600 --> 00:25:52,799
can use

640
00:25:52,799 --> 00:25:55,600
rpki signatures to facilitate bring your

641
00:25:55,600 --> 00:25:57,279
own ip address

642
00:25:57,279 --> 00:26:00,159
movement into cloud providers

643
00:26:00,159 --> 00:26:01,279
and

644
00:26:01,279 --> 00:26:04,400
those objects are distributed outside

645
00:26:04,400 --> 00:26:07,120
the rpki publication system so this

646
00:26:07,120 --> 00:26:09,440
means that the location of the object no

647
00:26:09,440 --> 00:26:13,039
longer exists uh in the sense that you

648
00:26:13,039 --> 00:26:14,799
cannot derive

649
00:26:14,799 --> 00:26:18,400
from the location identifier

650
00:26:18,400 --> 00:26:20,159
who the publisher is

651
00:26:20,159 --> 00:26:22,559
and this makes it more important to to

652
00:26:22,559 --> 00:26:25,039
keep dropping business cards over the

653
00:26:25,039 --> 00:26:28,240
place to to help people understand

654
00:26:28,240 --> 00:26:30,320
who to contact if there is an issue with

655
00:26:30,320 --> 00:26:32,640
an rc object

656
00:26:32,640 --> 00:26:34,080
so there's not a lot of ghostbuster

657
00:26:34,080 --> 00:26:37,120
records currently in the ecosystem i may

658
00:26:37,120 --> 00:26:39,200
be the only person on the planet

659
00:26:39,200 --> 00:26:42,000
publishing them but i encourage people

660
00:26:42,000 --> 00:26:45,520
to ask their rpki service providers for

661
00:26:45,520 --> 00:26:47,679
ghostbuster record publication

662
00:26:47,679 --> 00:26:49,200
capabilities

663
00:26:49,200 --> 00:26:51,200
because i think this will greatly help

664
00:26:51,200 --> 00:26:54,480
in future debugging

665
00:26:54,640 --> 00:26:56,159
now

666
00:26:56,159 --> 00:26:59,679
another application of the rpki is route

667
00:26:59,679 --> 00:27:01,760
origin authorizations

668
00:27:01,760 --> 00:27:03,200
and this is what a route origin

669
00:27:03,200 --> 00:27:05,279
authorization looks

670
00:27:05,279 --> 00:27:06,480
like on a

671
00:27:06,480 --> 00:27:08,640
more technical level

672
00:27:08,640 --> 00:27:11,279
you point rpki client in file mode

673
00:27:11,279 --> 00:27:14,240
towards a given roba file

674
00:27:14,240 --> 00:27:17,760
it will print in the text on the black

675
00:27:17,760 --> 00:27:20,159
background information from the ee

676
00:27:20,159 --> 00:27:21,360
certificate

677
00:27:21,360 --> 00:27:24,159
and in purple you see the e-content the

678
00:27:24,159 --> 00:27:26,559
encapsulated payload

679
00:27:26,559 --> 00:27:29,200
that is the the meat of the roa

680
00:27:29,200 --> 00:27:31,120
so there will be a single

681
00:27:31,120 --> 00:27:35,200
as identifier that is authorized to

682
00:27:35,200 --> 00:27:38,960
originate the prefixes that then follow

683
00:27:38,960 --> 00:27:40,320
and for each

684
00:27:40,320 --> 00:27:42,880
prefix there optionally can be a max

685
00:27:42,880 --> 00:27:44,720
length

686
00:27:44,720 --> 00:27:46,399
field filled in

687
00:27:46,399 --> 00:27:48,640
so this is what a robot looks like on a

688
00:27:48,640 --> 00:27:51,039
on a more zoomed in level

689
00:27:51,039 --> 00:27:53,520
and every robot contains expiration

690
00:27:53,520 --> 00:27:54,399
dates

691
00:27:54,399 --> 00:27:58,559
the utility will show those as well

692
00:27:58,720 --> 00:28:01,120
finally there is an object called the

693
00:28:01,120 --> 00:28:04,320
btp seg router key

694
00:28:04,320 --> 00:28:06,480
in the bgpseg model

695
00:28:06,480 --> 00:28:08,480
every bhp update that you send to your

696
00:28:08,480 --> 00:28:12,880
neighbors you sign with an ecdsa

697
00:28:12,880 --> 00:28:14,000
key

698
00:28:14,000 --> 00:28:16,880
and the public components of those ecdsa

699
00:28:16,880 --> 00:28:18,000
keys

700
00:28:18,000 --> 00:28:19,440
you can publish

701
00:28:19,440 --> 00:28:22,080
inside the rpki system and those are

702
00:28:22,080 --> 00:28:23,919
called router keys

703
00:28:23,919 --> 00:28:27,520
so by publishing the public key

704
00:28:27,520 --> 00:28:29,600
of of the key pair with which i'm

705
00:28:29,600 --> 00:28:32,080
signing my bgp updates into the global

706
00:28:32,080 --> 00:28:33,440
system

707
00:28:33,440 --> 00:28:36,399
all the world's routers can can retrieve

708
00:28:36,399 --> 00:28:40,000
that public key to verify the signatures

709
00:28:40,000 --> 00:28:44,080
i put on the bgp updates

710
00:28:44,080 --> 00:28:46,960
bhp sync is not yet super popular again

711
00:28:46,960 --> 00:28:49,279
i might be the only person on the planet

712
00:28:49,279 --> 00:28:51,760
publishing bgp sec router keys

713
00:28:51,760 --> 00:28:54,399
but i do encourage this community to

714
00:28:54,399 --> 00:28:57,760
investigate bgp sec and

715
00:28:57,760 --> 00:29:00,000
help the global deployment

716
00:29:00,000 --> 00:29:04,080
of this technology in the years to come

717
00:29:05,679 --> 00:29:06,799
we're almost at the end of the

718
00:29:06,799 --> 00:29:08,640
presentation

719
00:29:08,640 --> 00:29:11,360
what i want to cover is

720
00:29:11,360 --> 00:29:13,440
timers

721
00:29:13,440 --> 00:29:15,840
if you contrast rpki

722
00:29:15,840 --> 00:29:18,880
to ir or who is

723
00:29:18,880 --> 00:29:21,600
irr records do not have any expiration

724
00:29:21,600 --> 00:29:24,320
dates they are plain text blobs that can

725
00:29:24,320 --> 00:29:27,440
exist for decades on end

726
00:29:27,440 --> 00:29:30,000
and this this has happened in in many

727
00:29:30,000 --> 00:29:32,559
occasions especially in third party

728
00:29:32,559 --> 00:29:33,840
databases

729
00:29:33,840 --> 00:29:35,679
with third party i mean

730
00:29:35,679 --> 00:29:39,039
non-rer operated databases like ldb and

731
00:29:39,039 --> 00:29:42,240
redb and nct com

732
00:29:42,240 --> 00:29:44,240
and if once an object has been created

733
00:29:44,240 --> 00:29:46,240
in such a database

734
00:29:46,240 --> 00:29:47,679
unless somebody

735
00:29:47,679 --> 00:29:50,320
removes it it will be there forever and

736
00:29:50,320 --> 00:29:52,320
ever and ever until the heat depth of

737
00:29:52,320 --> 00:29:55,679
the universe now this is not possible in

738
00:29:55,679 --> 00:29:58,720
the rpki ecosystem because each and

739
00:29:58,720 --> 00:30:01,600
every signed object contains an ee

740
00:30:01,600 --> 00:30:04,399
certificate and every ee certificate

741
00:30:04,399 --> 00:30:06,960
contains a not before

742
00:30:06,960 --> 00:30:07,760
a

743
00:30:07,760 --> 00:30:08,640
date

744
00:30:08,640 --> 00:30:11,120
and a not after date

745
00:30:11,120 --> 00:30:13,039
and the not after date should really be

746
00:30:13,039 --> 00:30:14,240
considered

747
00:30:14,240 --> 00:30:16,799
like the expiration date on your carton

748
00:30:16,799 --> 00:30:19,120
box of milk

749
00:30:19,120 --> 00:30:21,520
you don't want to consume spoiled milk

750
00:30:21,520 --> 00:30:22,880
you don't want to

751
00:30:22,880 --> 00:30:26,880
use expired rpki objects

752
00:30:26,880 --> 00:30:29,279
now there's a lot of timers in this

753
00:30:29,279 --> 00:30:30,240
system

754
00:30:30,240 --> 00:30:32,159
there is the not after

755
00:30:32,159 --> 00:30:34,720
on the ee certificate itself

756
00:30:34,720 --> 00:30:36,720
there's the expiration time on the

757
00:30:36,720 --> 00:30:39,600
serial associated with that particular

758
00:30:39,600 --> 00:30:41,440
ee certificate

759
00:30:41,440 --> 00:30:44,720
the manifest e-content has a expiration

760
00:30:44,720 --> 00:30:46,000
date

761
00:30:46,000 --> 00:30:48,960
then the parent of all this has or not

762
00:30:48,960 --> 00:30:51,440
after the parent has a serial that has a

763
00:30:51,440 --> 00:30:54,880
not after and so on so if you look at a

764
00:30:54,880 --> 00:30:56,000
particular

765
00:30:56,000 --> 00:30:59,919
uh a given rowa there might easily be

766
00:30:59,919 --> 00:31:03,360
between 10 and 15 timers in play that

767
00:31:03,360 --> 00:31:05,760
dictates the validity window in which

768
00:31:05,760 --> 00:31:08,240
that robot can be used

769
00:31:08,240 --> 00:31:10,399
and

770
00:31:10,399 --> 00:31:13,679
since crls are on a relatively short

771
00:31:13,679 --> 00:31:16,559
refresh timer those generally are what

772
00:31:16,559 --> 00:31:18,559
is called the transitive expiration

773
00:31:18,559 --> 00:31:21,200
moment uh trigger

774
00:31:21,200 --> 00:31:22,559
and this means

775
00:31:22,559 --> 00:31:27,679
you gotta refresh uh rpki data uh every

776
00:31:27,679 --> 00:31:31,519
hour uh you gotta reissue rpki

777
00:31:31,519 --> 00:31:33,679
signed objects

778
00:31:33,679 --> 00:31:35,440
maybe once a day

779
00:31:35,440 --> 00:31:38,480
so it's a system that that is hot it

780
00:31:38,480 --> 00:31:41,440
requires constant resigning

781
00:31:41,440 --> 00:31:43,360
and i think this is a very good property

782
00:31:43,360 --> 00:31:45,360
of the system because

783
00:31:45,360 --> 00:31:47,200
the irr system where there is no

784
00:31:47,200 --> 00:31:49,919
expiration date timers whatsoever

785
00:31:49,919 --> 00:31:52,799
has arguably led to two issues

786
00:31:52,799 --> 00:31:55,279
uh and this to some degree is mitigated

787
00:31:55,279 --> 00:31:58,559
in the rpi ecosystem by by associating

788
00:31:58,559 --> 00:32:02,960
expiration moments with with everything

789
00:32:03,279 --> 00:32:04,720
um

790
00:32:04,720 --> 00:32:06,880
quick references you can find rpki

791
00:32:06,880 --> 00:32:09,919
clients on on the rpki client.org

792
00:32:09,919 --> 00:32:12,559
website but as i mentioned don't compile

793
00:32:12,559 --> 00:32:14,640
it yourself just install packages that

794
00:32:14,640 --> 00:32:16,799
come with your favorite linux or unix

795
00:32:16,799 --> 00:32:19,120
distribution

796
00:32:19,120 --> 00:32:22,240
if you want to play with rpki data in a

797
00:32:22,240 --> 00:32:23,840
way that is

798
00:32:23,840 --> 00:32:26,880
more accessible than the binary encoded

799
00:32:26,880 --> 00:32:28,640
rendition of it

800
00:32:28,640 --> 00:32:31,279
there's a json file of about 130

801
00:32:31,279 --> 00:32:35,120
megabytes that i refresh every few hours

802
00:32:35,120 --> 00:32:37,120
and this allows you to inspect the

803
00:32:37,120 --> 00:32:39,840
current global rpki database uh with

804
00:32:39,840 --> 00:32:42,960
with python or node.js or whatever your

805
00:32:42,960 --> 00:32:45,679
favorite language is

806
00:32:45,679 --> 00:32:47,600
and then finally

807
00:32:47,600 --> 00:32:50,399
if you have any questions about rpki or

808
00:32:50,399 --> 00:32:53,200
bgp or how bgp and rpki interact with

809
00:32:53,200 --> 00:32:54,240
each other

810
00:32:54,240 --> 00:32:55,600
email me

811
00:32:55,600 --> 00:32:57,440
joebedfastly.com

812
00:32:57,440 --> 00:33:00,080
uh and i'm also happy to help any

813
00:33:00,080 --> 00:33:02,159
parties that fuel their competitors

814
00:33:02,159 --> 00:33:04,240
because it is together that we make the

815
00:33:04,240 --> 00:33:06,720
internet uh so anybody can email me

816
00:33:06,720 --> 00:33:08,880
about rpki

817
00:33:08,880 --> 00:33:11,120
that's it for today thank you for your

818
00:33:11,120 --> 00:33:13,600
attention

819
00:33:21,039 --> 00:33:22,880
okay time for questions and answers

820
00:33:22,880 --> 00:33:25,760
anyone have any questions

821
00:33:25,760 --> 00:33:28,480
we have one

822
00:33:36,480 --> 00:33:38,159
hello my name is angel i'm a security

823
00:33:38,159 --> 00:33:40,399
researcher for beanfield i just wanted

824
00:33:40,399 --> 00:33:43,279
to say that since yesterday rpko client

825
00:33:43,279 --> 00:33:46,559
has been pushed to back ports the recent

826
00:33:46,559 --> 00:33:49,600
version and an older version is already

827
00:33:49,600 --> 00:33:51,600
in stable so

828
00:33:51,600 --> 00:33:53,120
running unstable is not always

829
00:33:53,120 --> 00:33:55,039
recommended i know it's probably just an

830
00:33:55,039 --> 00:33:56,320
example but

831
00:33:56,320 --> 00:33:58,240
yeah it's available in backboards now so

832
00:33:58,240 --> 00:34:00,720
it's way easier to install

833
00:34:00,720 --> 00:34:03,120
angel thank you for your comments

834
00:34:03,120 --> 00:34:04,880
and i appreciate the efforts of the

835
00:34:04,880 --> 00:34:07,679
debian community to make rpki clients

836
00:34:07,679 --> 00:34:11,280
easily available to to admins

837
00:34:11,280 --> 00:34:13,599
your your comment

838
00:34:13,599 --> 00:34:15,520
reminds me of a recommendation that i

839
00:34:15,520 --> 00:34:17,359
want to express towards everybody in

840
00:34:17,359 --> 00:34:18,639
this room

841
00:34:18,639 --> 00:34:21,359
always run the latest version of the

842
00:34:21,359 --> 00:34:24,159
rpki validator you've chosen

843
00:34:24,159 --> 00:34:27,119
there never ever is a valid reason to

844
00:34:27,119 --> 00:34:29,040
run an older version of an rpki

845
00:34:29,040 --> 00:34:31,839
validator never

846
00:34:31,839 --> 00:34:34,879
rpki validators are security software

847
00:34:34,879 --> 00:34:36,000
much like

848
00:34:36,000 --> 00:34:38,639
your browser like chrome or firefox

849
00:34:38,639 --> 00:34:41,440
and with security software you you have

850
00:34:41,440 --> 00:34:44,239
to run the latest version it's kind of a

851
00:34:44,239 --> 00:34:46,560
race between attackers that could

852
00:34:46,560 --> 00:34:48,800
potentially give you a bad day by

853
00:34:48,800 --> 00:34:52,239
disrupting uh your rpki system

854
00:34:52,239 --> 00:34:54,560
uh and and progressive insights from

855
00:34:54,560 --> 00:34:57,359
researchers or rpki software developers

856
00:34:57,359 --> 00:34:58,640
themselves

857
00:34:58,640 --> 00:35:00,480
but the latest version is what you have

858
00:35:00,480 --> 00:35:01,440
to run

859
00:35:01,440 --> 00:35:04,400
and i recommend everybody to to put like

860
00:35:04,400 --> 00:35:07,920
a recurring event in their their agenda

861
00:35:07,920 --> 00:35:10,400
uh to at least once a month you know the

862
00:35:10,400 --> 00:35:11,839
first of the month

863
00:35:11,839 --> 00:35:13,359
confirm that what you're running in

864
00:35:13,359 --> 00:35:16,560
production is the latest release of the

865
00:35:16,560 --> 00:35:18,560
the validator of choice

866
00:35:18,560 --> 00:35:20,720
uh so when people ask me what are you

867
00:35:20,720 --> 00:35:25,118
running the answer is the latest version

868
00:35:25,680 --> 00:35:27,359
thank you

869
00:35:27,359 --> 00:35:31,799
any other questions comments

870
00:35:33,599 --> 00:35:34,480
hey

871
00:35:34,480 --> 00:35:35,359
uh

872
00:35:35,359 --> 00:35:38,320
guy tall with lehman technologies

873
00:35:38,320 --> 00:35:41,040
uh i had a question maybe i misheard or

874
00:35:41,040 --> 00:35:42,720
misunderstood

875
00:35:42,720 --> 00:35:44,960
when you're talking about the manifests

876
00:35:44,960 --> 00:35:48,560
um think of a slide 13 or 14

877
00:35:48,560 --> 00:35:51,040
and you said that um

878
00:35:51,040 --> 00:35:54,480
you had like a a valid 20

879
00:35:54,480 --> 00:35:57,359
and then an invalid 24

880
00:35:57,359 --> 00:35:59,839
and in that situation both the 24 and

881
00:35:59,839 --> 00:36:02,560
the 20 would be withdrawn is that did i

882
00:36:02,560 --> 00:36:04,320
mishear that or misunderstand what you

883
00:36:04,320 --> 00:36:06,720
were saying

884
00:36:06,800 --> 00:36:07,920
the

885
00:36:07,920 --> 00:36:10,079
example is is

886
00:36:10,079 --> 00:36:12,640
two bhp announcements slash 16 coming

887
00:36:12,640 --> 00:36:16,320
from as1 slash 24 coming from as2

888
00:36:16,320 --> 00:36:18,160
and because the slash 24 is a more

889
00:36:18,160 --> 00:36:21,520
specific of of the slash 16

890
00:36:21,520 --> 00:36:23,839
if you want to create roas you have to

891
00:36:23,839 --> 00:36:26,480
create two rows because per robot you

892
00:36:26,480 --> 00:36:28,240
can only list one

893
00:36:28,240 --> 00:36:29,680
origin as

894
00:36:29,680 --> 00:36:31,119
so you have to create a robot for the

895
00:36:31,119 --> 00:36:34,400
slash 24 and one for the 16.

896
00:36:34,400 --> 00:36:36,480
and you have to

897
00:36:36,480 --> 00:36:38,880
consider them both

898
00:36:38,880 --> 00:36:41,119
because if if you have one of the two if

899
00:36:41,119 --> 00:36:42,800
you only have the rowa covering the

900
00:36:42,800 --> 00:36:44,160
slash 16

901
00:36:44,160 --> 00:36:46,320
you might consider the slash 24 invalid

902
00:36:46,320 --> 00:36:49,200
so you need both rows together

903
00:36:49,200 --> 00:36:52,400
uh to to have both php announcements be

904
00:36:52,400 --> 00:36:54,880
considered valid and what manifests

905
00:36:54,880 --> 00:36:57,200
allow you to do is to confirm that you

906
00:36:57,200 --> 00:37:00,160
have all the robots that belong together

907
00:37:00,160 --> 00:37:02,800
that you actually have all that belong

908
00:37:02,800 --> 00:37:05,839
together and if one of them is missing

909
00:37:05,839 --> 00:37:06,960
you would not

910
00:37:06,960 --> 00:37:09,440
consider any of the roads listed on that

911
00:37:09,440 --> 00:37:11,040
manifest

912
00:37:11,040 --> 00:37:13,200
which would mean that the routes flip to

913
00:37:13,200 --> 00:37:16,079
not found which is preferable to routes

914
00:37:16,079 --> 00:37:17,599
flipping to

915
00:37:17,599 --> 00:37:20,560
invalid simply because a few objects

916
00:37:20,560 --> 00:37:23,680
were missing from the publication point

917
00:37:23,680 --> 00:37:24,480
so

918
00:37:24,480 --> 00:37:28,560
i hope my reiteration helped clarify

919
00:37:28,560 --> 00:37:31,280
but i'm also happy to to send

920
00:37:31,280 --> 00:37:34,079
a link to to the nanak mailing list with

921
00:37:34,079 --> 00:37:37,520
a blog post i wrote a while back that

922
00:37:37,520 --> 00:37:39,440
instead of me verbally trying to to

923
00:37:39,440 --> 00:37:41,440
explain uh what are those

924
00:37:41,440 --> 00:37:44,000
writes down in text how manifests work

925
00:37:44,000 --> 00:37:46,640
and why they are important

926
00:37:46,640 --> 00:37:48,320
well yeah i mean

927
00:37:48,320 --> 00:37:51,280
i guess if it goes to

928
00:37:51,280 --> 00:37:54,720
you know not found versus invalid that's

929
00:37:54,720 --> 00:37:57,119
better but the question just is

930
00:37:57,119 --> 00:37:59,040
does that open up a vector of attack

931
00:37:59,040 --> 00:38:01,440
where somebody can try to create a slash

932
00:38:01,440 --> 00:38:03,040
24

933
00:38:03,040 --> 00:38:04,720
knowing it's invalid

934
00:38:04,720 --> 00:38:07,200
and then go and you know

935
00:38:07,200 --> 00:38:10,160
knock the validity off of uh you know

936
00:38:10,160 --> 00:38:12,400
supernet that's

937
00:38:12,400 --> 00:38:15,359
you know covering it

938
00:38:15,359 --> 00:38:17,200
um

939
00:38:17,200 --> 00:38:19,839
i'm i'm not sure we have enough time to

940
00:38:19,839 --> 00:38:22,640
to go through this example but the way

941
00:38:22,640 --> 00:38:23,920
rpki

942
00:38:23,920 --> 00:38:26,240
is structured and and why manifests are

943
00:38:26,240 --> 00:38:29,200
important is to resolve issues like this

944
00:38:29,200 --> 00:38:31,599
and to prevent

945
00:38:31,599 --> 00:38:34,720
attackers from being able to to flip

946
00:38:34,720 --> 00:38:36,640
otherwise valid announcements into

947
00:38:36,640 --> 00:38:38,079
invalid

948
00:38:38,079 --> 00:38:40,000
so one example is uh

949
00:38:40,000 --> 00:38:42,000
if an attacker

950
00:38:42,000 --> 00:38:44,160
sits between you and the repository

951
00:38:44,160 --> 00:38:46,079
somehow a man in the middle attack of

952
00:38:46,079 --> 00:38:46,960
sorts

953
00:38:46,960 --> 00:38:49,599
and hides a few objects

954
00:38:49,599 --> 00:38:52,800
or a cdn somehow is only passing on an

955
00:38:52,800 --> 00:38:55,760
incomplete set of objects

956
00:38:55,760 --> 00:38:58,000
the manifest allows you to

957
00:38:58,000 --> 00:38:59,760
confirm the completeness

958
00:38:59,760 --> 00:39:01,359
and in doing so

959
00:39:01,359 --> 00:39:03,920
you can avoid that slash 24 being

960
00:39:03,920 --> 00:39:06,560
rendered invalid because the robot was

961
00:39:06,560 --> 00:39:08,400
hidden because you

962
00:39:08,400 --> 00:39:10,720
the manifest allows you to detect that

963
00:39:10,720 --> 00:39:14,800
rova is is missing um yeah let's let's

964
00:39:14,800 --> 00:39:17,280
take it offline uh yeah yeah no wearing

965
00:39:17,280 --> 00:39:18,800
a white hat yeah that definitely makes

966
00:39:18,800 --> 00:39:20,640
sense but wearing a black hat i'm like

967
00:39:20,640 --> 00:39:22,480
hmm i could kind of

968
00:39:22,480 --> 00:39:24,400
cause problems with that so i don't know

969
00:39:24,400 --> 00:39:25,760
just

970
00:39:25,760 --> 00:39:27,760
but it sounds like it's more complicated

971
00:39:27,760 --> 00:39:30,480
answer so we'll we'll talk later

972
00:39:30,480 --> 00:39:31,359
yeah

973
00:39:31,359 --> 00:39:34,160
in rpg context the answer often is it's

974
00:39:34,160 --> 00:39:36,160
it's complicated

975
00:39:36,160 --> 00:39:38,720
okay we have time for one more question

976
00:39:38,720 --> 00:39:40,839
uh rob robertson

977
00:39:40,839 --> 00:39:42,880
um uh and

978
00:39:42,880 --> 00:39:45,599
i've been trying to push out uh rpk onto

979
00:39:45,599 --> 00:39:46,720
our network

980
00:39:46,720 --> 00:39:47,599
uh

981
00:39:47,599 --> 00:39:50,720
for a little bit um and i wanna get to

982
00:39:50,720 --> 00:39:52,480
the point of like running the latest

983
00:39:52,480 --> 00:39:54,240
versions uh

984
00:39:54,240 --> 00:39:56,000
we have been running the latest versions

985
00:39:56,000 --> 00:39:59,680
of like the rtr software from nlabs and

986
00:39:59,680 --> 00:40:01,760
encountered a bug where

987
00:40:01,760 --> 00:40:03,280
all of our nokia has stopped loading

988
00:40:03,280 --> 00:40:04,960
their databases

989
00:40:04,960 --> 00:40:06,720
um

990
00:40:06,720 --> 00:40:08,880
so there's a little caveat with running

991
00:40:08,880 --> 00:40:11,839
the latest software

992
00:40:11,839 --> 00:40:13,440
and the the second

993
00:40:13,440 --> 00:40:16,880
question i have is

994
00:40:16,880 --> 00:40:19,599
validator diversity is there any benefit

995
00:40:19,599 --> 00:40:20,400
to

996
00:40:20,400 --> 00:40:22,000
possibly running

997
00:40:22,000 --> 00:40:23,760
the ford validator and the route nader

998
00:40:23,760 --> 00:40:24,960
together

999
00:40:24,960 --> 00:40:26,079
and then

1000
00:40:26,079 --> 00:40:30,400
having that serve as the basis of of

1001
00:40:30,400 --> 00:40:31,520
your truth

1002
00:40:31,520 --> 00:40:33,359
uh and then having a caching server and

1003
00:40:33,359 --> 00:40:36,480
then defeating your routers

1004
00:40:36,480 --> 00:40:39,599
it's complicated it is

1005
00:40:39,599 --> 00:40:41,040
diversity

1006
00:40:41,040 --> 00:40:44,480
is is a very very interesting

1007
00:40:44,480 --> 00:40:46,960
topic to study because uh in a system

1008
00:40:46,960 --> 00:40:48,800
like rpki

1009
00:40:48,800 --> 00:40:51,680
the system is as strong as the weakest

1010
00:40:51,680 --> 00:40:53,599
link in the chain

1011
00:40:53,599 --> 00:40:56,240
so if you're running a rootinator and

1012
00:40:56,240 --> 00:40:58,800
rpki client next to each other and an

1013
00:40:58,800 --> 00:41:01,359
exploit is discovered in rutinator

1014
00:41:01,359 --> 00:41:03,440
it somewhat nullifies

1015
00:41:03,440 --> 00:41:06,319
the the efforts of the other validator

1016
00:41:06,319 --> 00:41:08,000
but on the flip side

1017
00:41:08,000 --> 00:41:10,960
if the rpki developers rpki client

1018
00:41:10,960 --> 00:41:12,079
developers

1019
00:41:12,079 --> 00:41:14,079
you know make a mistake a bug is

1020
00:41:14,079 --> 00:41:15,920
introduced

1021
00:41:15,920 --> 00:41:18,319
maybe it takes a few days to fix

1022
00:41:18,319 --> 00:41:20,720
meanwhile you have the other system

1023
00:41:20,720 --> 00:41:21,680
and

1024
00:41:21,680 --> 00:41:24,400
it's it's it it's much like are you

1025
00:41:24,400 --> 00:41:25,760
running a network

1026
00:41:25,760 --> 00:41:28,560
where you use both cisco and juniper

1027
00:41:28,560 --> 00:41:31,920
for either negotiation power or or

1028
00:41:31,920 --> 00:41:35,520
resiliency to but you also know that

1029
00:41:35,520 --> 00:41:37,119
there's a cost associated with that

1030
00:41:37,119 --> 00:41:38,880
because your staff needs to be familiar

1031
00:41:38,880 --> 00:41:41,920
with both systems both uis uh both

1032
00:41:41,920 --> 00:41:45,200
support chains uh and so on so it's

1033
00:41:45,200 --> 00:41:46,400
really a

1034
00:41:46,400 --> 00:41:48,720
per organization decision that you must

1035
00:41:48,720 --> 00:41:51,760
make whether you you trust a validator

1036
00:41:51,760 --> 00:41:54,079
to the degree that you that's the only

1037
00:41:54,079 --> 00:41:55,359
one you use

1038
00:41:55,359 --> 00:41:57,359
uh or that you want multiple different

1039
00:41:57,359 --> 00:41:59,760
implementations from different teams

1040
00:41:59,760 --> 00:42:02,720
uh that's i i don't have

1041
00:42:02,720 --> 00:42:05,040
a best current practice to to share with

1042
00:42:05,040 --> 00:42:07,040
you i think this is something uh people

1043
00:42:07,040 --> 00:42:08,880
must consider themselves

1044
00:42:08,880 --> 00:42:10,880
i can say however

1045
00:42:10,880 --> 00:42:13,920
always run multiple validators

1046
00:42:13,920 --> 00:42:16,800
oh yeah yeah yeah that's a given so if

1047
00:42:16,800 --> 00:42:19,920
like in in fastly we we uh use multiple

1048
00:42:19,920 --> 00:42:22,319
uh validator instances from from a

1049
00:42:22,319 --> 00:42:23,680
single fender

1050
00:42:23,680 --> 00:42:26,240
uh but that that part is critical

1051
00:42:26,240 --> 00:42:28,560
don't run with one instance make sure

1052
00:42:28,560 --> 00:42:30,560
you have a few instances and whether you

1053
00:42:30,560 --> 00:42:32,560
want them to be diverse or not that's

1054
00:42:32,560 --> 00:42:34,640
that's a consideration geographically

1055
00:42:34,640 --> 00:42:37,440
diverse yep absolutely thank you thank

1056
00:42:37,440 --> 00:42:38,720
you

1057
00:42:38,720 --> 00:42:41,070
great thank you very much

1058
00:42:41,070 --> 00:42:44,950
[Applause]

1059
00:42:44,950 --> 00:42:48,079
[Music]

1060
00:42:48,079 --> 00:42:50,160
you

