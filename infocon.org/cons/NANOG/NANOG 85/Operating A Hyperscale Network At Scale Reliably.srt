1
00:00:00,000 --> 00:00:05,279
[Music]

2
00:00:05,279 --> 00:00:07,839
hi everyone great to be here at nunc 85

3
00:00:07,839 --> 00:00:09,519
unfortunately we're surely but still

4
00:00:09,519 --> 00:00:12,320
with you uh my name is jeff tantura i'm

5
00:00:12,320 --> 00:00:14,960
with microsoft senior principal network

6
00:00:14,960 --> 00:00:18,080
architect at azure networking working on

7
00:00:18,080 --> 00:00:20,560
nexon data centers networking machine

8
00:00:20,560 --> 00:00:22,640
learning clusters and such

9
00:00:22,640 --> 00:00:25,199
uh i would like to shed some light on

10
00:00:25,199 --> 00:00:28,320
how we operate our data center networks

11
00:00:28,320 --> 00:00:31,599
we are performing thousands of changes

12
00:00:31,599 --> 00:00:34,480
every day pretty much every minute there

13
00:00:34,480 --> 00:00:37,680
is there is a change so i would like to

14
00:00:37,680 --> 00:00:39,920
kind of show you or guide you through

15
00:00:39,920 --> 00:00:42,000
how we manage to build most reliable

16
00:00:42,000 --> 00:00:43,760
network

17
00:00:43,760 --> 00:00:46,000
so reliability is a struggle for

18
00:00:46,000 --> 00:00:48,399
everyone at particular

19
00:00:48,399 --> 00:00:49,360
size

20
00:00:49,360 --> 00:00:51,760
at particular skill

21
00:00:51,760 --> 00:00:54,399
stuff starts breaking no one is safe

22
00:00:54,399 --> 00:00:55,360
from it

23
00:00:55,360 --> 00:00:58,399
but it's our job as network architects

24
00:00:58,399 --> 00:01:01,120
data center architect to make sure that

25
00:01:01,120 --> 00:01:03,920
our changes can go ahead that they don't

26
00:01:03,920 --> 00:01:05,760
affect each other

27
00:01:05,760 --> 00:01:08,560
and that our customers most importantly

28
00:01:08,560 --> 00:01:10,799
are not affected by them

29
00:01:10,799 --> 00:01:13,680
so the agenda for today talks is really

30
00:01:13,680 --> 00:01:15,840
to show you how

31
00:01:15,840 --> 00:01:17,840
large azure really is so you understand

32
00:01:17,840 --> 00:01:20,080
the problem with the skill

33
00:01:20,080 --> 00:01:21,040
and

34
00:01:21,040 --> 00:01:23,439
guide you through the change procedure

35
00:01:23,439 --> 00:01:25,600
how do you do changes at scale

36
00:01:25,600 --> 00:01:27,759
and without really any negative impact

37
00:01:27,759 --> 00:01:30,240
obviously there's always

38
00:01:30,240 --> 00:01:34,640
problem and unexpected consequences but

39
00:01:34,640 --> 00:01:36,799
normally we perform sounds changes a day

40
00:01:36,799 --> 00:01:38,960
without any negative impact

41
00:01:38,960 --> 00:01:41,759
and we will go through

42
00:01:41,759 --> 00:01:44,000
different stages and how we achieve the

43
00:01:44,000 --> 00:01:46,640
state so number one is obviously you

44
00:01:46,640 --> 00:01:49,520
need to obstruct and contain the change

45
00:01:49,520 --> 00:01:51,119
so change in one place doesn't affect

46
00:01:51,119 --> 00:01:52,479
another one

47
00:01:52,479 --> 00:01:54,720
i'll show you how we simulate emulate

48
00:01:54,720 --> 00:01:56,719
and at the end obviously validate what

49
00:01:56,719 --> 00:01:58,079
we've done

50
00:01:58,079 --> 00:02:00,560
so azure is one of the biggest networks

51
00:02:00,560 --> 00:02:01,920
in the world

52
00:02:01,920 --> 00:02:04,640
before we go further i would like really

53
00:02:04,640 --> 00:02:06,840
to focus what does it mean to be hyper

54
00:02:06,840 --> 00:02:10,479
skill its ability of architecture to

55
00:02:10,479 --> 00:02:13,680
scale with increasing demand and do so

56
00:02:13,680 --> 00:02:16,160
over common infrastructure

57
00:02:16,160 --> 00:02:19,200
and we achieve this by

58
00:02:19,200 --> 00:02:21,360
really adhering to hyperscale design

59
00:02:21,360 --> 00:02:22,720
principle

60
00:02:22,720 --> 00:02:25,760
we have fully used this aggregated

61
00:02:25,760 --> 00:02:28,480
hardware from software now networking so

62
00:02:28,480 --> 00:02:31,120
we choose best hardware where it should

63
00:02:31,120 --> 00:02:33,360
be and then we decide which software to

64
00:02:33,360 --> 00:02:36,000
run on it as you know microsoft started

65
00:02:36,000 --> 00:02:38,640
sonic effort which is today

66
00:02:38,640 --> 00:02:40,319
one of the

67
00:02:40,319 --> 00:02:43,440
best available choices in open source

68
00:02:43,440 --> 00:02:44,640
world

69
00:02:44,640 --> 00:02:47,360
we also use vendor software

70
00:02:47,360 --> 00:02:48,800
and all of this could be done

71
00:02:48,800 --> 00:02:51,840
interchangeable on top of hardware we

72
00:02:51,840 --> 00:02:54,720
decide to use number two principle all

73
00:02:54,720 --> 00:02:57,200
complexity is moved to the edge

74
00:02:57,200 --> 00:02:59,360
all complex encapsulation

75
00:02:59,360 --> 00:03:02,319
firewalling enforcements are done at the

76
00:03:02,319 --> 00:03:04,800
host network is kept simple to provide

77
00:03:04,800 --> 00:03:07,360
reachability and this allows to scale to

78
00:03:07,360 --> 00:03:09,440
pretty much any size

79
00:03:09,440 --> 00:03:11,280
number three and we'll focus to some

80
00:03:11,280 --> 00:03:15,120
degree on that we follow strictly follow

81
00:03:15,120 --> 00:03:18,080
both principle so when there's a new

82
00:03:18,080 --> 00:03:20,000
change it's always within the pod

83
00:03:20,000 --> 00:03:21,920
there's rushing between ports this

84
00:03:21,920 --> 00:03:23,599
allows to build

85
00:03:23,599 --> 00:03:26,239
a network of pretty much any size

86
00:03:26,239 --> 00:03:28,000
because the complexity is always

87
00:03:28,000 --> 00:03:31,120
contained within the pod

88
00:03:31,360 --> 00:03:33,200
just to give you some impression this is

89
00:03:33,200 --> 00:03:35,360
how large we are

90
00:03:35,360 --> 00:03:37,680
61 regions uh

91
00:03:37,680 --> 00:03:40,159
thousands of miles of fiber

92
00:03:40,159 --> 00:03:42,799
many many many pairings

93
00:03:42,799 --> 00:03:43,840
and

94
00:03:43,840 --> 00:03:46,879
it keeps growing and it grows like crazy

95
00:03:46,879 --> 00:03:49,120
every day every month every year

96
00:03:49,120 --> 00:03:51,360
to give some impression this is how

97
00:03:51,360 --> 00:03:53,599
single building within data center block

98
00:03:53,599 --> 00:03:55,840
looks like

99
00:03:55,840 --> 00:03:58,720
this is how block looks like

100
00:03:58,720 --> 00:04:00,959
this is how data center with all the

101
00:04:00,959 --> 00:04:03,920
auxiliary things looks like

102
00:04:03,920 --> 00:04:06,959
and so forth what you see here is not

103
00:04:06,959 --> 00:04:08,400
the biggest one

104
00:04:08,400 --> 00:04:10,319
the biggest one one gigabyte plus are

105
00:04:10,319 --> 00:04:13,200
yet to come so the infrastructure is

106
00:04:13,200 --> 00:04:16,320
growing at huge tempo and without

107
00:04:16,320 --> 00:04:19,279
automation without ability to obstruct

108
00:04:19,279 --> 00:04:21,680
and perform changes every second of the

109
00:04:21,680 --> 00:04:24,160
day you wouldn't be able to do so

110
00:04:24,160 --> 00:04:27,280
and challenges cause outages it's well

111
00:04:27,280 --> 00:04:29,199
known this information facebook but it's

112
00:04:29,199 --> 00:04:31,919
somewhat similar everywhere where

113
00:04:31,919 --> 00:04:34,560
there's a lot of state a lot of changes

114
00:04:34,560 --> 00:04:37,120
and large infrastructure so how do we

115
00:04:37,120 --> 00:04:39,680
build and operate the most reliable you

116
00:04:39,680 --> 00:04:42,479
might argue with my statement but we are

117
00:04:42,479 --> 00:04:44,560
very very reliable

118
00:04:44,560 --> 00:04:46,479
number one and probably the most

119
00:04:46,479 --> 00:04:49,840
important point here is to build right

120
00:04:49,840 --> 00:04:53,280
foundation so ability to abstract

121
00:04:53,280 --> 00:04:55,040
and self-contain

122
00:04:55,040 --> 00:04:57,040
different building blocks

123
00:04:57,040 --> 00:04:59,199
how do we build data center and we are

124
00:04:59,199 --> 00:05:01,520
not really unique here it's how any

125
00:05:01,520 --> 00:05:04,320
large data center pretty much looks like

126
00:05:04,320 --> 00:05:08,000
it's what you do with the state and data

127
00:05:08,000 --> 00:05:11,440
rack is a unit that has reachability to

128
00:05:11,440 --> 00:05:14,400
all the compute or storage or

129
00:05:14,400 --> 00:05:16,880
any other device that needs to be

130
00:05:16,880 --> 00:05:19,120
accessed throughout the network and

131
00:05:19,120 --> 00:05:21,039
reachable there's full reachability with

132
00:05:21,039 --> 00:05:22,880
interrupt

133
00:05:22,880 --> 00:05:25,520
rock makes a pod

134
00:05:25,520 --> 00:05:28,240
again there's full reachability between

135
00:05:28,240 --> 00:05:30,639
different rex and the pot however any

136
00:05:30,639 --> 00:05:32,320
change within the rack is invisible

137
00:05:32,320 --> 00:05:34,639
within the pattern

138
00:05:34,639 --> 00:05:36,639
within data center we follow exactly

139
00:05:36,639 --> 00:05:38,400
same approach

140
00:05:38,400 --> 00:05:41,039
reps are fully reachable from data

141
00:05:41,039 --> 00:05:42,880
center perspective however all the

142
00:05:42,880 --> 00:05:44,960
changes within the racks are absolutely

143
00:05:44,960 --> 00:05:47,440
invisible within the data center they're

144
00:05:47,440 --> 00:05:49,199
completely obstructed

145
00:05:49,199 --> 00:05:51,520
and from routing perspective aggregated

146
00:05:51,520 --> 00:05:53,919
if you wish

147
00:05:53,919 --> 00:05:56,639
same goes when we start going out of

148
00:05:56,639 --> 00:05:59,280
data center again all the data that is

149
00:05:59,280 --> 00:06:01,520
within data center

150
00:06:01,520 --> 00:06:03,440
is aggregated all the changes are

151
00:06:03,440 --> 00:06:05,840
completely hidden and all the changes

152
00:06:05,840 --> 00:06:08,240
also contain

153
00:06:08,240 --> 00:06:10,160
and finally this is how region looks

154
00:06:10,160 --> 00:06:12,639
like that connects to microsoft one that

155
00:06:12,639 --> 00:06:15,840
provides reachability across the world

156
00:06:15,840 --> 00:06:18,000
the basic foundation layer here is

157
00:06:18,000 --> 00:06:20,000
self-contained as you could see

158
00:06:20,000 --> 00:06:22,880
self-contained boundaries are wrecked

159
00:06:22,880 --> 00:06:26,720
so there's single v4 single v6 subnet

160
00:06:26,720 --> 00:06:28,479
and all the changes within subnet are

161
00:06:28,479 --> 00:06:30,560
not propagated up

162
00:06:30,560 --> 00:06:32,720
within the exact same story there are

163
00:06:32,720 --> 00:06:35,919
subnets that attached or assigned to a

164
00:06:35,919 --> 00:06:38,000
port that doesn't change

165
00:06:38,000 --> 00:06:40,560
any changes same goes for data center

166
00:06:40,560 --> 00:06:42,560
this allows us to perform different

167
00:06:42,560 --> 00:06:44,960
changes within reacts within same port

168
00:06:44,960 --> 00:06:47,280
slots to perform changes within ports

169
00:06:47,280 --> 00:06:50,639
within data center and in data centers

170
00:06:50,639 --> 00:06:53,280
practically one change should never

171
00:06:53,280 --> 00:06:56,479
interact in any way with other changes

172
00:06:56,479 --> 00:06:58,240
let's touch upon routing

173
00:06:58,240 --> 00:07:00,319
within routing that adheres to the same

174
00:07:00,319 --> 00:07:03,440
principle it is impossible to provide

175
00:07:03,440 --> 00:07:05,039
self-containment

176
00:07:05,039 --> 00:07:06,479
what are the requirements for routing

177
00:07:06,479 --> 00:07:08,080
its large scale

178
00:07:08,080 --> 00:07:09,680
obviously is to reduce number of routes

179
00:07:09,680 --> 00:07:12,319
is really necessary minimum tecom is

180
00:07:12,319 --> 00:07:15,919
finite we would like to be able to grow

181
00:07:15,919 --> 00:07:18,560
number of devices within data center

182
00:07:18,560 --> 00:07:20,319
without replacing switches every six

183
00:07:20,319 --> 00:07:21,199
months

184
00:07:21,199 --> 00:07:22,160
so

185
00:07:22,160 --> 00:07:24,880
we are trying to keep number of routes

186
00:07:24,880 --> 00:07:26,800
as small as possible

187
00:07:26,800 --> 00:07:28,800
on another site we would like to keep

188
00:07:28,800 --> 00:07:30,560
enough details to prevent black calling

189
00:07:30,560 --> 00:07:33,520
because when we remove too many details

190
00:07:33,520 --> 00:07:35,520
it inevitably

191
00:07:35,520 --> 00:07:38,720
leads to in best case very very

192
00:07:38,720 --> 00:07:40,479
ineffective routing in worst case to

193
00:07:40,479 --> 00:07:41,840
block calling

194
00:07:41,840 --> 00:07:42,800
two more

195
00:07:42,800 --> 00:07:45,440
very important steps here is that as any

196
00:07:45,440 --> 00:07:47,759
large data center or multi-planner the

197
00:07:47,759 --> 00:07:50,160
plants are massively distributed to

198
00:07:50,160 --> 00:07:51,280
provide

199
00:07:51,280 --> 00:07:53,680
reachability that is contained within

200
00:07:53,680 --> 00:07:55,039
the plane

201
00:07:55,039 --> 00:07:56,479
right so uh

202
00:07:56,479 --> 00:07:57,599
while

203
00:07:57,599 --> 00:07:59,759
there is kind of rule of thumb to use

204
00:07:59,759 --> 00:08:01,599
well if you're routing

205
00:08:01,599 --> 00:08:02,720
because

206
00:08:02,720 --> 00:08:06,479
we care about amount of time it takes

207
00:08:06,479 --> 00:08:09,599
traffic to take from one

208
00:08:09,599 --> 00:08:12,879
point to another when there's a failure

209
00:08:12,879 --> 00:08:15,840
we implemented so called

210
00:08:15,840 --> 00:08:17,840
uh bonds and we'll go through it while

211
00:08:17,840 --> 00:08:20,720
we do it so a naive approach is really

212
00:08:20,720 --> 00:08:23,199
summarize everything it's not too little

213
00:08:23,199 --> 00:08:24,560
information

214
00:08:24,560 --> 00:08:25,759
the problem

215
00:08:25,759 --> 00:08:28,000
it is uh

216
00:08:28,000 --> 00:08:30,240
preventing us of understanding next step

217
00:08:30,240 --> 00:08:33,519
failure and can lead to black hauling

218
00:08:33,519 --> 00:08:36,240
and when playing gets disconnected in

219
00:08:36,240 --> 00:08:39,679
order to get to through another plane

220
00:08:39,679 --> 00:08:42,399
it has to go outside of data center

221
00:08:42,399 --> 00:08:45,600
which brings latency and plane failure

222
00:08:45,600 --> 00:08:47,120
and while

223
00:08:47,120 --> 00:08:49,600
not very significant for regular tcp

224
00:08:49,600 --> 00:08:51,040
traffic

225
00:08:51,040 --> 00:08:54,480
uh really reduce performance of

226
00:08:54,480 --> 00:08:56,160
storage

227
00:08:56,160 --> 00:08:57,519
anything that relates to email and

228
00:08:57,519 --> 00:09:00,000
redeeming traffic another new approach

229
00:09:00,000 --> 00:09:01,360
is to deploy

230
00:09:01,360 --> 00:09:03,120
an igp

231
00:09:03,120 --> 00:09:04,880
we know there's a lot of work going on

232
00:09:04,880 --> 00:09:06,839
on flood reduction

233
00:09:06,839 --> 00:09:09,279
on making

234
00:09:09,279 --> 00:09:11,360
igps more suitable for data center

235
00:09:11,360 --> 00:09:13,920
however basically agp uh floods

236
00:09:13,920 --> 00:09:16,000
extensively which is a problem as large

237
00:09:16,000 --> 00:09:20,240
scale last radius is a whole igp domain

238
00:09:20,240 --> 00:09:22,800
so we are not using a gp either

239
00:09:22,800 --> 00:09:24,399
the pragmatic approach we have taken is

240
00:09:24,399 --> 00:09:26,720
pass vector it's well known we are big

241
00:09:26,720 --> 00:09:29,839
bgp user however rather than using value

242
00:09:29,839 --> 00:09:33,120
free we also want bonds this allows to

243
00:09:33,120 --> 00:09:36,560
have backup always available

244
00:09:36,560 --> 00:09:39,680
and when plan is failing

245
00:09:39,680 --> 00:09:41,519
or connectivity the plane from outside

246
00:09:41,519 --> 00:09:44,720
is failing there's always longer route

247
00:09:44,720 --> 00:09:46,800
through bounds available and this is

248
00:09:46,800 --> 00:09:49,120
with minimum pass hunting because

249
00:09:49,120 --> 00:09:51,519
as i said it's only allowed to bounce

250
00:09:51,519 --> 00:09:54,800
once so this is how we provide

251
00:09:54,800 --> 00:09:56,640
self-contained

252
00:09:56,640 --> 00:09:58,959
complexity this is how we provide

253
00:09:58,959 --> 00:10:02,959
ability to implement changes at any

254
00:10:02,959 --> 00:10:05,120
point at any time without affecting

255
00:10:05,120 --> 00:10:07,040
customers

256
00:10:07,040 --> 00:10:09,040
how do you perform without having any

257
00:10:09,040 --> 00:10:10,959
negative impact

258
00:10:10,959 --> 00:10:13,279
we start with simulation

259
00:10:13,279 --> 00:10:15,600
i'll guide you through the change

260
00:10:15,600 --> 00:10:19,839
verification system process we create a

261
00:10:19,839 --> 00:10:21,920
manual operation procedure mob that is

262
00:10:21,920 --> 00:10:23,600
really intent

263
00:10:23,600 --> 00:10:26,800
definition of change to be performed

264
00:10:26,800 --> 00:10:28,560
using metadata

265
00:10:28,560 --> 00:10:31,680
it derives topology and devices involved

266
00:10:31,680 --> 00:10:34,079
and all the information about devices

267
00:10:34,079 --> 00:10:37,279
creates configuration and also stages

268
00:10:37,279 --> 00:10:39,839
simulation enumeration after simulation

269
00:10:39,839 --> 00:10:41,120
is done

270
00:10:41,120 --> 00:10:44,480
and routing tables both change

271
00:10:44,480 --> 00:10:48,079
are retrieved they're being validated by

272
00:10:48,079 --> 00:10:49,120
our

273
00:10:49,120 --> 00:10:50,959
spock system which i'll describe in more

274
00:10:50,959 --> 00:10:52,560
details

275
00:10:52,560 --> 00:10:53,600
if

276
00:10:53,600 --> 00:10:55,519
result is positive

277
00:10:55,519 --> 00:10:57,200
change will go into the system and be

278
00:10:57,200 --> 00:11:00,079
performed if it's negative it's rollback

279
00:11:00,079 --> 00:11:02,480
actually it hasn't been performed yet it

280
00:11:02,480 --> 00:11:05,519
just it stopped and goes back to either

281
00:11:05,519 --> 00:11:08,160
manual validation or drought some system

282
00:11:08,160 --> 00:11:10,399
validations that are performed here so

283
00:11:10,399 --> 00:11:12,640
what is the difference between emulation

284
00:11:12,640 --> 00:11:16,160
and simulation emulation

285
00:11:16,160 --> 00:11:19,360
is one vm parameter

286
00:11:19,360 --> 00:11:22,160
simulation is one vm for all the routers

287
00:11:22,160 --> 00:11:24,320
so the scale is completely different

288
00:11:24,320 --> 00:11:26,880
when we emulate we can emulate subset of

289
00:11:26,880 --> 00:11:29,120
a data center we can build network of

290
00:11:29,120 --> 00:11:31,200
thousands of switches and routers

291
00:11:31,200 --> 00:11:33,839
however not larger than that

292
00:11:33,839 --> 00:11:35,360
simulation

293
00:11:35,360 --> 00:11:37,920
could easily simulate entire azure

294
00:11:37,920 --> 00:11:41,120
region or entire azure if needed speed

295
00:11:41,120 --> 00:11:43,120
is very different too

296
00:11:43,120 --> 00:11:44,000
the

297
00:11:44,000 --> 00:11:46,320
uh emulation is non-interactive it's

298
00:11:46,320 --> 00:11:48,480
actually required to build

299
00:11:48,480 --> 00:11:50,320
actually to fetch the images that are

300
00:11:50,320 --> 00:11:51,839
used in production that's the

301
00:11:51,839 --> 00:11:54,000
configurations that used in production

302
00:11:54,000 --> 00:11:57,519
and spin out vms that will run it

303
00:11:57,519 --> 00:11:59,120
while simulation

304
00:11:59,120 --> 00:12:01,200
is very very lightweight it's in

305
00:12:01,200 --> 00:12:02,720
container level

306
00:12:02,720 --> 00:12:04,000
uh

307
00:12:04,000 --> 00:12:06,880
deployment that can build thousands of

308
00:12:06,880 --> 00:12:08,480
nodes in minutes

309
00:12:08,480 --> 00:12:10,480
what's also important and the difference

310
00:12:10,480 --> 00:12:11,279
here

311
00:12:11,279 --> 00:12:14,079
from fidelity perspective we make a big

312
00:12:14,079 --> 00:12:16,720
point that the virtual hardware that

313
00:12:16,720 --> 00:12:18,480
used in emulation

314
00:12:18,480 --> 00:12:20,959
is really provide exactly the same

315
00:12:20,959 --> 00:12:23,200
functionality as real hardware used on

316
00:12:23,200 --> 00:12:24,800
the devices

317
00:12:24,800 --> 00:12:27,120
while on simulation it's just an

318
00:12:27,120 --> 00:12:29,839
adolescent production reads so again it

319
00:12:29,839 --> 00:12:31,839
doesn't require any forwarding plane

320
00:12:31,839 --> 00:12:35,360
involvement here so simulation

321
00:12:35,360 --> 00:12:37,760
before you go and build

322
00:12:37,760 --> 00:12:39,519
very very complex

323
00:12:39,519 --> 00:12:41,600
plane you are trying to test it we are

324
00:12:41,600 --> 00:12:44,560
doing exactly the same

325
00:12:45,040 --> 00:12:48,560
so network logic solver is modeling

326
00:12:48,560 --> 00:12:51,360
behavior of routing protocol so bgp in

327
00:12:51,360 --> 00:12:52,560
this case

328
00:12:52,560 --> 00:12:54,800
if you look at changes

329
00:12:54,800 --> 00:12:57,600
at large scale very often they require

330
00:12:57,600 --> 00:13:00,720
change in routing policies

331
00:13:00,720 --> 00:13:03,120
and this is what's exactly modeled so

332
00:13:03,120 --> 00:13:07,680
what we can do is to change the intent

333
00:13:07,680 --> 00:13:09,680
run the bgp

334
00:13:09,680 --> 00:13:11,120
processes

335
00:13:11,120 --> 00:13:14,000
get the routing table and compare

336
00:13:14,000 --> 00:13:17,760
operational state of post

337
00:13:17,760 --> 00:13:18,800
test

338
00:13:18,800 --> 00:13:21,680
routing tables to the intended ones

339
00:13:21,680 --> 00:13:24,160
it's very efficient it's very fast

340
00:13:24,160 --> 00:13:25,920
and allows to

341
00:13:25,920 --> 00:13:28,240
at least figure out that our changes to

342
00:13:28,240 --> 00:13:30,079
the routing policies

343
00:13:30,079 --> 00:13:34,320
aren't in conflict with intent emulation

344
00:13:34,320 --> 00:13:37,760
after mop is being applied to the system

345
00:13:37,760 --> 00:13:41,120
metadata provides us topology

346
00:13:41,120 --> 00:13:42,880
devices

347
00:13:42,880 --> 00:13:44,079
vendors

348
00:13:44,079 --> 00:13:45,920
and all the information that's needed to

349
00:13:45,920 --> 00:13:51,120
build a twin so emulation factually

350
00:13:51,120 --> 00:13:53,279
builds exactly the same network

351
00:13:53,279 --> 00:13:56,880
virtualized as in real data center

352
00:13:56,880 --> 00:13:58,560
so uh

353
00:13:58,560 --> 00:14:00,800
exactly same image is taken with regards

354
00:14:00,800 --> 00:14:03,440
to software exactly same configuration

355
00:14:03,440 --> 00:14:05,600
is taken as run on the device the only

356
00:14:05,600 --> 00:14:07,360
difference is that we are running them

357
00:14:07,360 --> 00:14:09,279
in vm so it's virtualized hardware

358
00:14:09,279 --> 00:14:11,199
versus real hardware and production

359
00:14:11,199 --> 00:14:14,000
however again we make a point to work

360
00:14:14,000 --> 00:14:17,040
with our vendors to work on site

361
00:14:17,040 --> 00:14:19,440
to make sure that virtualized hardware

362
00:14:19,440 --> 00:14:21,440
exhibit exactly the same behavior as

363
00:14:21,440 --> 00:14:22,959
real hardware

364
00:14:22,959 --> 00:14:26,560
and we run hundreds of millions of hours

365
00:14:26,560 --> 00:14:27,839
on azure

366
00:14:27,839 --> 00:14:31,600
every year to validate so typical

367
00:14:31,600 --> 00:14:33,760
usage scenario

368
00:14:33,760 --> 00:14:36,480
after mop is done and there is intent

369
00:14:36,480 --> 00:14:39,839
based definition of a change

370
00:14:39,839 --> 00:14:42,000
we create an emulated replica so it's

371
00:14:42,000 --> 00:14:44,000
fully automated there's nothing needed

372
00:14:44,000 --> 00:14:45,920
to be done manually

373
00:14:45,920 --> 00:14:48,000
then change is applied to emulated

374
00:14:48,000 --> 00:14:50,480
replicas so the end result is exactly

375
00:14:50,480 --> 00:14:52,720
the same as we would apply as if we

376
00:14:52,720 --> 00:14:54,639
would apply same change to the

377
00:14:54,639 --> 00:14:56,079
production network

378
00:14:56,079 --> 00:15:00,000
the end result of replica is then run

379
00:15:00,000 --> 00:15:01,120
through our

380
00:15:01,120 --> 00:15:02,720
gg

381
00:15:02,720 --> 00:15:05,440
verifier and the end result is positive

382
00:15:05,440 --> 00:15:08,000
failed if it's passed we can proceed

383
00:15:08,000 --> 00:15:10,480
with the change if it fails it goes back

384
00:15:10,480 --> 00:15:12,480
the validation is very interesting point

385
00:15:12,480 --> 00:15:14,000
right you can simulate and emulate as

386
00:15:14,000 --> 00:15:15,760
much as you want we all know that

387
00:15:15,760 --> 00:15:17,839
networks are not

388
00:15:17,839 --> 00:15:20,320
always predictable

389
00:15:20,320 --> 00:15:22,720
there are inconsistencies between ribs

390
00:15:22,720 --> 00:15:23,920
and fields between what's routing

391
00:15:23,920 --> 00:15:26,720
protocol cs versus forwarding sys so

392
00:15:26,720 --> 00:15:29,920
ability to validate at scale and

393
00:15:29,920 --> 00:15:32,720
continuously is as important as ability

394
00:15:32,720 --> 00:15:34,560
to simulate and emulate

395
00:15:34,560 --> 00:15:36,639
so what we do we use

396
00:15:36,639 --> 00:15:39,839
what's known as formal method

397
00:15:39,839 --> 00:15:42,720
and in order to do so we pull forwarding

398
00:15:42,720 --> 00:15:44,720
table from all our devices into the

399
00:15:44,720 --> 00:15:46,880
network on regular basis

400
00:15:46,880 --> 00:15:49,759
and then they are compared to intended

401
00:15:49,759 --> 00:15:50,720
state

402
00:15:50,720 --> 00:15:53,680
there is also configurational retrievals

403
00:15:53,680 --> 00:15:55,360
that compare

404
00:15:55,360 --> 00:15:57,600
configurational state to operational

405
00:15:57,600 --> 00:16:00,079
state to fips

406
00:16:00,079 --> 00:16:02,800
to state of routing protocols

407
00:16:02,800 --> 00:16:06,959
so all of this changes are done on

408
00:16:06,959 --> 00:16:09,600
pretty much 5 10 15 minutes basis

409
00:16:09,600 --> 00:16:11,360
depending where you are and when it's

410
00:16:11,360 --> 00:16:14,000
needed so and last is overview of spock

411
00:16:14,000 --> 00:16:16,079
which is our system that actually does

412
00:16:16,079 --> 00:16:18,639
verification validation it's a testing

413
00:16:18,639 --> 00:16:20,160
framework we've written internally in

414
00:16:20,160 --> 00:16:23,120
microsoft it uses assertions and

415
00:16:23,120 --> 00:16:24,480
invariants

416
00:16:24,480 --> 00:16:28,160
so you could see here an example of code

417
00:16:28,160 --> 00:16:30,880
and the specification as a test

418
00:16:30,880 --> 00:16:33,279
anytime there's any change there's

419
00:16:33,279 --> 00:16:36,320
always test code that's applied to it if

420
00:16:36,320 --> 00:16:38,959
there is none it's not allowed actually

421
00:16:38,959 --> 00:16:40,880
change cannot be performed

422
00:16:40,880 --> 00:16:43,199
so when there is a change

423
00:16:43,199 --> 00:16:45,519
for example we want to validate that

424
00:16:45,519 --> 00:16:49,440
every door router has a default route

425
00:16:49,440 --> 00:16:52,480
it needs to be present in

426
00:16:52,480 --> 00:16:55,920
bgp rip it needs to be present in reap

427
00:16:55,920 --> 00:16:59,360
it needs to be present in fib

428
00:16:59,360 --> 00:17:00,079
so

429
00:17:00,079 --> 00:17:02,959
when we retrieve the flip state

430
00:17:02,959 --> 00:17:04,799
we have the intended state that

431
00:17:04,799 --> 00:17:06,480
transfers this code through every

432
00:17:06,480 --> 00:17:08,559
statement that should be present and

433
00:17:08,559 --> 00:17:09,839
validates

434
00:17:09,839 --> 00:17:11,839
if everything that's

435
00:17:11,839 --> 00:17:14,720
present in feed is available on one side

436
00:17:14,720 --> 00:17:17,119
on another side that everything is

437
00:17:17,119 --> 00:17:18,799
available and fib should actually be

438
00:17:18,799 --> 00:17:19,599
there

439
00:17:19,599 --> 00:17:24,160
and this is done at scale of azure so

440
00:17:24,160 --> 00:17:25,919
after changes the certification is

441
00:17:25,919 --> 00:17:29,280
mandatory between changes it's run on

442
00:17:29,280 --> 00:17:30,960
continuous basis

443
00:17:30,960 --> 00:17:32,799
this is how we ensure

444
00:17:32,799 --> 00:17:35,440
the changes we perform don't affect our

445
00:17:35,440 --> 00:17:36,880
customers

446
00:17:36,880 --> 00:17:39,360
so to summarize

447
00:17:39,360 --> 00:17:42,000
we abstract simulate emulate and

448
00:17:42,000 --> 00:17:43,120
validate

449
00:17:43,120 --> 00:17:45,679
and this allows to grow at really really

450
00:17:45,679 --> 00:17:46,960
high speed

451
00:17:46,960 --> 00:17:48,960
we perform as i said thousands of

452
00:17:48,960 --> 00:17:50,320
changes a day

453
00:17:50,320 --> 00:17:52,720
everywhere in the network

454
00:17:52,720 --> 00:17:53,760
and

455
00:17:53,760 --> 00:17:56,720
it doesn't affect our reliability

456
00:17:56,720 --> 00:17:58,720
it doesn't affect our agility so we

457
00:17:58,720 --> 00:18:01,919
could go as fast as business require us

458
00:18:01,919 --> 00:18:04,880
without affecting our customers

459
00:18:04,880 --> 00:18:07,600
and we are hiring everywhere microsoft

460
00:18:07,600 --> 00:18:09,600
if you are interested you see we are

461
00:18:09,600 --> 00:18:10,960
solving really really interesting

462
00:18:10,960 --> 00:18:12,720
problems you are more than welcome to

463
00:18:12,720 --> 00:18:13,679
join us

464
00:18:13,679 --> 00:18:16,350
thank you so much

465
00:18:16,350 --> 00:18:20,669
[Music]

