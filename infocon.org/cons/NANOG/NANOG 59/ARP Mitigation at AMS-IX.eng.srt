1
00:00:10,150 --> 00:00:15,830
<font color="#E5E5E5">alright we're going to go ahead and get</font>

2
00:00:11,990 --> 00:00:18,890
started first things<font color="#CCCCCC"> first the survey</font>

3
00:00:15,830 --> 00:00:22,250
gift which as I mentioned<font color="#E5E5E5"> yesterday</font>

4
00:00:18,890 --> 00:00:25,340
we've had a fantastic turnout for is

5
00:00:22,250 --> 00:00:28,190
Ronald Spencer in the room all right

6
00:00:25,340 --> 00:00:33,920
Ronald Spencer you in a an ipad mini on

7
00:00:28,190 --> 00:00:37,250
behalf to not come grab<font color="#CCCCCC"> it if you'd like</font>

8
00:00:33,920 --> 00:00:38,989
and<font color="#E5E5E5"> I'd like to invite Martin hell's up</font>

9
00:00:37,250 --> 00:00:55,219
so you tell us about art mitigation and

10
00:00:38,989 --> 00:00:57,739
am sex thank you so hi I'm Martin I work

11
00:00:55,219 --> 00:01:00,460
for m6 and I like to talk a little bit

12
00:00:57,739 --> 00:01:03,500
about what we've been doing at<font color="#CCCCCC"> mjx to</font>

13
00:01:00,460 --> 00:01:09,350
reduce the amount of our broadcast on

14
00:01:03,500 --> 00:01:13,000
our network so the m6<font color="#CCCCCC"> is P pairing</font>

15
00:01:09,350 --> 00:01:15,798
villain is is elated to broadcast domain

16
00:01:13,000 --> 00:01:18,740
implemented as a vpls instance on top of

17
00:01:15,799 --> 00:01:22,909
an MPLS Network we<font color="#E5E5E5"> currently connect</font>

18
00:01:18,740 --> 00:01:24,740
over 700 welders through this and this

19
00:01:22,909 --> 00:01:28,640
number<font color="#E5E5E5"> keeps on growing we added about</font>

20
00:01:24,740 --> 00:01:31,280
90 last year currently we're at we were

21
00:01:28,640 --> 00:01:34,060
at 75 in<font color="#E5E5E5"> August so we expect to have</font><font color="#CCCCCC"> a</font>

22
00:01:31,280 --> 00:01:36,380
<font color="#E5E5E5">hundred new routers for this year and</font>

23
00:01:34,060 --> 00:01:39,020
obviously all these routers need to talk

24
00:01:36,380 --> 00:01:41,750
to<font color="#CCCCCC"> each other and for that they use arc</font>

25
00:01:39,020 --> 00:01:45,590
so we see quite a bit of<font color="#E5E5E5"> our broadcast</font>

26
00:01:41,750 --> 00:01:49,100
traffic on the exchange the base rate is

27
00:01:45,590 --> 00:01:51,439
about<font color="#E5E5E5"> 60 kilobits per second but that is</font>

28
00:01:49,100 --> 00:01:54,589
with our arc sponge activated which<font color="#E5E5E5"> I</font>

29
00:01:51,439 --> 00:02:00,289
will talk about if in case of an outage

30
00:01:54,590 --> 00:02:03,560
it might be even more so the issue is

31
00:02:00,290 --> 00:02:06,369
with all these routers that the moment a

32
00:02:03,560 --> 00:02:09,829
rather goes down everybody will start

33
00:02:06,369 --> 00:02:12,260
seeing<font color="#E5E5E5"> this router disappear and mac</font>

34
00:02:09,829 --> 00:02:14,780
address will disappear from<font color="#E5E5E5"> their up</font>

35
00:02:12,260 --> 00:02:17,359
cash and they will start sending up

36
00:02:14,780 --> 00:02:20,120
<font color="#E5E5E5">requests for it and if you have a lot of</font>

37
00:02:17,360 --> 00:02:21,860
peers for this router you will get a lot

38
00:02:20,120 --> 00:02:24,170
<font color="#E5E5E5">of ARP requests so</font>

39
00:02:21,860 --> 00:02:28,190
<font color="#CCCCCC">or peers</font><font color="#E5E5E5"> you add this will increase</font>

40
00:02:24,170 --> 00:02:30,440
exponentially so to reduce the amount of

41
00:02:28,190 --> 00:02:33,170
broadcast art we implemented a tool

42
00:02:30,440 --> 00:02:36,470
called the arch punch and this is a

43
00:02:33,170 --> 00:02:39,410
<font color="#E5E5E5">little piece</font><font color="#CCCCCC"> of pro software that runs</font>

44
00:02:36,470 --> 00:02:43,040
on a device attached to the platform<font color="#E5E5E5"> and</font>

45
00:02:39,410 --> 00:02:45,140
what it does<font color="#CCCCCC"> is it listens to to our</font>

46
00:02:43,040 --> 00:02:48,380
requests<font color="#E5E5E5"> coming in from other members</font>

47
00:02:45,140 --> 00:02:50,839
for IP addresses and when it sees a lot

48
00:02:48,380 --> 00:02:53,540
<font color="#E5E5E5">of hype up requests for a certain IP it</font>

49
00:02:50,840 --> 00:02:57,820
will start answering for this IP address

50
00:02:53,540 --> 00:03:01,489
and take<font color="#E5E5E5"> off or it's it's I peerless</font>

51
00:02:57,820 --> 00:03:03,709
then once the the down router comes back

52
00:03:01,489 --> 00:03:07,220
it will start answering for itself again

53
00:03:03,709 --> 00:03:08,900
<font color="#CCCCCC">and then the options</font><font color="#E5E5E5"> will stop this</font>

54
00:03:07,220 --> 00:03:11,090
makes a lot<font color="#CCCCCC"> of difference if you</font><font color="#E5E5E5"> look at</font>

55
00:03:08,900 --> 00:03:13,760
the<font color="#E5E5E5"> previous slides you can see the</font>

56
00:03:11,090 --> 00:03:16,459
spike this is when the<font color="#E5E5E5"> apps punch was</font>

57
00:03:13,760 --> 00:03:18,920
down for for a maintenance and you can

58
00:03:16,459 --> 00:03:24,010
see that<font color="#E5E5E5"> the amount of</font><font color="#CCCCCC"> ARP is a lot</font>

59
00:03:18,920 --> 00:03:27,260
higher another thing that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> do with the</font>

60
00:03:24,010 --> 00:03:29,120
<font color="#CCCCCC">sponges we don't just sponge the appeal</font>

61
00:03:27,260 --> 00:03:32,870
dresses that are<font color="#E5E5E5"> assigned to customers</font>

62
00:03:29,120 --> 00:03:37,850
if they are down we sponge the entire /

63
00:03:32,870 --> 00:03:40,610
20 22 subnet and this is so that we also

64
00:03:37,850 --> 00:03:46,640
catch<font color="#CCCCCC"> up requests for other IP addresses</font>

65
00:03:40,610 --> 00:03:48,380
in case of things like pink sweeps now

66
00:03:46,640 --> 00:03:50,660
the out sponge works pretty well for us

67
00:03:48,380 --> 00:03:53,720
it allowed us to scale the platform to

68
00:03:50,660 --> 00:03:56,690
what it is now but<font color="#E5E5E5"> we run into a couple</font>

69
00:03:53,720 --> 00:04:02,600
of challenges first of all the<font color="#E5E5E5"> CPU use</font>

70
00:03:56,690 --> 00:04:06,170
of customer routers the baseline CPUs is

71
00:04:02,600 --> 00:04:08,060
an issue because<font color="#CCCCCC"> while the more</font>

72
00:04:06,170 --> 00:04:09,738
relatives you add the more ARP<font color="#E5E5E5"> and our</font>

73
00:04:08,060 --> 00:04:14,540
baquet's process by these rather sea

74
00:04:09,739 --> 00:04:19,130
views then then there's<font color="#E5E5E5"> the ARP cache of</font>

75
00:04:14,540 --> 00:04:23,240
these of the customer others we will be

76
00:04:19,130 --> 00:04:25,040
migrating to a / 21 in a year or so this

77
00:04:23,240 --> 00:04:28,190
will mean that the<font color="#CCCCCC"> archons will start</font>

78
00:04:25,040 --> 00:04:30,979
answering for<font color="#CCCCCC"> 2,000 IP addresses which</font>

79
00:04:28,190 --> 00:04:34,050
is about half of the<font color="#E5E5E5"> next hub table in</font>

80
00:04:30,979 --> 00:04:37,000
some some router implementation

81
00:04:34,050 --> 00:04:38,890
we could of course fix this by not

82
00:04:37,000 --> 00:04:41,170
answering for our<font color="#E5E5E5"> dealers is that we</font>

83
00:04:38,890 --> 00:04:43,719
didn't assign but that means<font color="#E5E5E5"> we will get</font>

84
00:04:41,170 --> 00:04:47,620
more our broadcast for pink slips which

85
00:04:43,720 --> 00:04:50,020
will again cause more<font color="#E5E5E5"> CPU load then</font>

86
00:04:47,620 --> 00:04:52,420
there's a cpu using our own piece that

87
00:04:50,020 --> 00:04:56,770
we want<font color="#E5E5E5"> to limit because they are also</font>

88
00:04:52,420 --> 00:05:00,220
process broadcast on their<font color="#CCCCCC"> CPUs and we'd</font>

89
00:04:56,770 --> 00:05:02,080
like to prevent our spoofing we do not

90
00:05:00,220 --> 00:05:04,720
see any intentional are moving on our

91
00:05:02,080 --> 00:05:08,859
<font color="#CCCCCC">platform but we do see the occasional</font>

92
00:05:04,720 --> 00:05:11,410
software bug so how do<font color="#E5E5E5"> we do this well</font>

93
00:05:08,860 --> 00:05:15,840
as the end oppa flow can fix everything

94
00:05:11,410 --> 00:05:15,840
so we figured we could try<font color="#E5E5E5"> it with that</font>

95
00:05:16,440 --> 00:05:23,740
but we had a number of requirements here

96
00:05:20,280 --> 00:05:26,140
we wanted this to be implemented<font color="#E5E5E5"> as a as</font>

97
00:05:23,740 --> 00:05:28,300
an addition to our<font color="#E5E5E5"> existing network we</font>

98
00:05:26,140 --> 00:05:29,950
have an existing MPLS Network we don't

99
00:05:28,300 --> 00:05:32,980
want to completely replace that with<font color="#E5E5E5"> on</font>

100
00:05:29,950 --> 00:05:35,140
flow because if we would do<font color="#CCCCCC"> that we</font>

101
00:05:32,980 --> 00:05:38,860
would use<font color="#CCCCCC"> I'll lose our kind of features</font>

102
00:05:35,140 --> 00:05:42,520
that<font color="#CCCCCC"> we use now and that would be more</font>

103
00:05:38,860 --> 00:05:46,630
<font color="#CCCCCC">of a</font><font color="#E5E5E5"> step back we also wanted it to be</font>

104
00:05:42,520 --> 00:05:50,770
scalable of course with the growth of

105
00:05:46,630 --> 00:05:52,570
our of our platform and it has to<font color="#E5E5E5"> be</font>

106
00:05:50,770 --> 00:05:54,760
stable we don't want to introduce any

107
00:05:52,570 --> 00:05:58,510
single points of failures and we don't

108
00:05:54,760 --> 00:06:01,719
<font color="#E5E5E5">want the traffic the</font><font color="#CCCCCC"> user-generated</font>

109
00:05:58,510 --> 00:06:05,260
traffic to<font color="#E5E5E5"> have an impact on</font><font color="#CCCCCC"> own control</font>

110
00:06:01,720 --> 00:06:08,050
functions on the routers so the work we

111
00:06:05,260 --> 00:06:11,710
did is based on open floor version 1 at

112
00:06:08,050 --> 00:06:15,010
0 as implemented by brocade our entire

113
00:06:11,710 --> 00:06:19,030
platform is based on brocade<font color="#CCCCCC"> mlx and we</font>

114
00:06:15,010 --> 00:06:22,200
tested with with a 55 better release of

115
00:06:19,030 --> 00:06:22,200
their software

116
00:06:22,880 --> 00:06:30,020
so the<font color="#E5E5E5"> first thing we looked at is how</font>

117
00:06:25,070 --> 00:06:33,020
<font color="#E5E5E5">can we implement urban flow as as a as a</font>

118
00:06:30,020 --> 00:06:37,070
feature in<font color="#CCCCCC"> our existing network and for</font>

119
00:06:33,020 --> 00:06:39,590
this the<font color="#E5E5E5"> OpenFlow spec defines something</font>

120
00:06:37,070 --> 00:06:42,409
called open flow hybrid which you can

121
00:06:39,590 --> 00:06:45,400
use to either route traffic to your open

122
00:06:42,410 --> 00:06:48,980
flow pipeline or to your normal pipeline

123
00:06:45,400 --> 00:06:50,989
how this classification is done is not

124
00:06:48,980 --> 00:06:53,810
actually standardized it is up<font color="#CCCCCC"> to the</font>

125
00:06:50,990 --> 00:06:56,420
vendors implementation and in the<font color="#CCCCCC"> case</font>

126
00:06:53,810 --> 00:07:00,200
of brocade this was done pretty neatly

127
00:06:56,420 --> 00:07:01,940
what you can do purport is say if<font color="#CCCCCC"> you</font>

128
00:07:00,200 --> 00:07:03,590
have traffic that matches an open flow

129
00:07:01,940 --> 00:07:05,990
rule you send it into the open floor

130
00:07:03,590 --> 00:07:08,409
pipeline and if the traffic doesn't

131
00:07:05,990 --> 00:07:12,200
match you send it into the normal

132
00:07:08,410 --> 00:07:15,530
pipeline so what we<font color="#E5E5E5"> can do in this case</font>

133
00:07:12,200 --> 00:07:18,280
is set a very simple open flow rule

134
00:07:15,530 --> 00:07:21,770
saying for example sent all the

135
00:07:18,280 --> 00:07:24,260
broadcast traffic with either type of

136
00:07:21,770 --> 00:07:27,469
ARP sent it all to the controller and

137
00:07:24,260 --> 00:07:30,349
forward all<font color="#CCCCCC"> the normal traffic that</font>

138
00:07:27,470 --> 00:07:36,380
doesn't hit the<font color="#E5E5E5"> open flow rule in</font>

139
00:07:30,350 --> 00:07:38,360
<font color="#CCCCCC">Hardware using a normal mpls pipeline so</font>

140
00:07:36,380 --> 00:07:40,700
once you do that there's a couple of

141
00:07:38,360 --> 00:07:42,800
ways you can handle this this<font color="#E5E5E5"> broadcast</font>

142
00:07:40,700 --> 00:07:45,349
traffic we've looked at<font color="#E5E5E5"> solutions with</font>

143
00:07:42,800 --> 00:07:47,690
controllers we've looked at<font color="#E5E5E5"> solutions</font>

144
00:07:45,350 --> 00:07:51,020
with the arcs ones that we already have

145
00:07:47,690 --> 00:07:53,870
and there's also a way to do this by

146
00:07:51,020 --> 00:07:58,340
directly forward to the red customer

147
00:07:53,870 --> 00:08:03,230
router by modifying it so the<font color="#E5E5E5"> most</font>

148
00:07:58,340 --> 00:08:06,530
easiest solution is easy take you<font color="#E5E5E5"> sent</font>

149
00:08:03,230 --> 00:08:09,290
everything to the controller we already

150
00:08:06,530 --> 00:08:12,320
<font color="#CCCCCC">have database of all the IP addresses we</font>

151
00:08:09,290 --> 00:08:15,230
assign to customers obviously we also

152
00:08:12,320 --> 00:08:17,870
have in our database all the MAC

153
00:08:15,230 --> 00:08:19,940
addresses of every customer because we

154
00:08:17,870 --> 00:08:26,740
use that<font color="#CCCCCC"> for our eight</font><font color="#E5E5E5"> and layer to a</font>

155
00:08:19,940 --> 00:08:29,660
sales so what we can very easily do is

156
00:08:26,740 --> 00:08:33,830
just have a table<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the open flow in</font>

157
00:08:29,660 --> 00:08:35,590
the controller and that has a mapping of

158
00:08:33,830 --> 00:08:37,630
all IP addresses to mac addresses

159
00:08:35,590 --> 00:08:39,610
then if there is an ARP request coming

160
00:08:37,630 --> 00:08:42,640
in we just answer I have the controller

161
00:08:39,610 --> 00:08:46,240
answer it and then<font color="#E5E5E5"> everything functions</font>

162
00:08:42,640 --> 00:08:49,750
normally there are<font color="#E5E5E5"> a couple of issues</font>

163
00:08:46,240 --> 00:08:51,640
with<font color="#CCCCCC"> this one of this</font><font color="#E5E5E5"> is that when a</font>

164
00:08:49,750 --> 00:08:54,910
router groves down the controller will

165
00:08:51,640 --> 00:08:57,250
still answer for it and we cannot take

166
00:08:54,910 --> 00:08:58,990
into account migration scenarios where

167
00:08:57,250 --> 00:09:02,350
there might be two outdoor sofa

168
00:08:58,990 --> 00:09:07,720
customers connected and we don't know

169
00:09:02,350 --> 00:09:10,780
which IP address the on which router the

170
00:09:07,720 --> 00:09:13,030
<font color="#CCCCCC">Epirus is configured so in that case the</font>

171
00:09:10,780 --> 00:09:16,120
controller window with which mac address

172
00:09:13,030 --> 00:09:18,480
to answer so we can<font color="#E5E5E5"> just extend this a</font>

173
00:09:16,120 --> 00:09:22,150
little bit<font color="#E5E5E5"> further by having the</font>

174
00:09:18,480 --> 00:09:24,370
controller act as a sort of proxy by

175
00:09:22,150 --> 00:09:27,250
having a controller for<font color="#E5E5E5"> the ARP request</font>

176
00:09:24,370 --> 00:09:29,080
as unicast to the to<font color="#CCCCCC"> the right customer</font>

177
00:09:27,250 --> 00:09:31,930
it knows the mac address so it can send

178
00:09:29,080 --> 00:09:34,150
<font color="#CCCCCC">that as unicast and then have the</font>

179
00:09:31,930 --> 00:09:38,739
customer answer to the controller and

180
00:09:34,150 --> 00:09:42,459
the controller to<font color="#CCCCCC"> the to the party yet</font>

181
00:09:38,740 --> 00:09:44,410
<font color="#E5E5E5">send the original</font><font color="#CCCCCC"> request then if we</font>

182
00:09:42,460 --> 00:09:48,280
take it another step further we can<font color="#E5E5E5"> have</font>

183
00:09:44,410 --> 00:09:50,290
the ash ponds forward the or the sorry

184
00:09:48,280 --> 00:09:54,459
the<font color="#E5E5E5"> controller for the request to</font><font color="#CCCCCC"> the</font>

185
00:09:50,290 --> 00:09:57,339
right customer and set the<font color="#E5E5E5"> ARP sender</font>

186
00:09:54,460 --> 00:10:01,000
hardware address to the mac address of

187
00:09:57,340 --> 00:10:04,360
the original requester thereby causing

188
00:10:01,000 --> 00:10:09,190
the destination to answer on the ARP

189
00:10:04,360 --> 00:10:12,240
<font color="#E5E5E5">request directly to the request or so</font>

190
00:10:09,190 --> 00:10:14,890
you think well then that's pretty<font color="#CCCCCC"> easy</font>

191
00:10:12,240 --> 00:10:17,830
it's a simple<font color="#CCCCCC"> solution it removes all</font>

192
00:10:14,890 --> 00:10:20,530
broadcast traffic from the<font color="#CCCCCC"> platform we</font>

193
00:10:17,830 --> 00:10:24,460
build a proof of concept using the

194
00:10:20,530 --> 00:10:27,610
implementation it worked until we

195
00:10:24,460 --> 00:10:30,640
started looking<font color="#E5E5E5"> at what it actually</font>

196
00:10:27,610 --> 00:10:34,600
means if you do that for<font color="#CCCCCC"> 700 routers on</font>

197
00:10:30,640 --> 00:10:37,330
<font color="#E5E5E5">platform so the issues that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> found is</font>

198
00:10:34,600 --> 00:10:39,730
that first of all you need<font color="#E5E5E5"> an always</font>

199
00:10:37,330 --> 00:10:41,620
active controller that you can<font color="#E5E5E5"> solve</font>

200
00:10:39,730 --> 00:10:44,470
with having multiple controllers and

201
00:10:41,620 --> 00:10:47,250
having<font color="#E5E5E5"> them both answer or having the</font>

202
00:10:44,470 --> 00:10:51,580
active one answer and<font color="#E5E5E5"> doing a fallback</font>

203
00:10:47,250 --> 00:10:53,830
but a bigger problem is that at least on

204
00:10:51,580 --> 00:10:56,500
<font color="#CCCCCC">Burkett controller traffic is CPU</font>

205
00:10:53,830 --> 00:10:59,350
forwarded and in practice that means if

206
00:10:56,500 --> 00:11:01,840
you have a thousand frames per<font color="#CCCCCC"> seconds</font>

207
00:10:59,350 --> 00:11:04,090
coming in from a customer that<font color="#CCCCCC"> have to</font>

208
00:11:01,840 --> 00:11:07,860
go to the controller your management CPU

209
00:11:04,090 --> 00:11:11,890
will go to eighty percent which is not

210
00:11:07,860 --> 00:11:13,810
<font color="#E5E5E5">really acceptable and in addition to</font>

211
00:11:11,890 --> 00:11:16,900
that we didn't<font color="#CCCCCC"> have any</font><font color="#E5E5E5"> way to rate</font>

212
00:11:13,810 --> 00:11:19,180
limit traffic central city controller so

213
00:11:16,900 --> 00:11:21,600
we couldn't<font color="#E5E5E5"> say per customer how many</font>

214
00:11:19,180 --> 00:11:26,680
how many broadcast packets they could

215
00:11:21,600 --> 00:11:33,010
throw to the controller so this<font color="#E5E5E5"> is</font>

216
00:11:26,680 --> 00:11:34,750
pretty<font color="#CCCCCC"> much ruled out this solution then</font>

217
00:11:33,010 --> 00:11:38,140
we looked at other ways to do this and

218
00:11:34,750 --> 00:11:39,790
<font color="#E5E5E5">obviously we already have the</font><font color="#CCCCCC"> options so</font>

219
00:11:38,140 --> 00:11:42,100
one thing<font color="#CCCCCC"> we have thought of is well</font>

220
00:11:39,790 --> 00:11:44,140
then let's use forward all the broadcast

221
00:11:42,100 --> 00:11:47,260
traffic with the<font color="#E5E5E5"> flow rule to the art</font>

222
00:11:44,140 --> 00:11:53,380
sponge and have the options reply to to

223
00:11:47,260 --> 00:11:55,930
all the ARP requests and this has a

224
00:11:53,380 --> 00:11:58,860
<font color="#E5E5E5">couple of benefits we have no longer</font>

225
00:11:55,930 --> 00:12:01,120
have any<font color="#E5E5E5"> CPU forwarding on the PE we do</font>

226
00:11:58,860 --> 00:12:03,130
forwarding with the flow rule so<font color="#CCCCCC"> there</font>

227
00:12:01,120 --> 00:12:06,000
<font color="#CCCCCC">is no dependency on the controller</font>

228
00:12:03,130 --> 00:12:08,439
except for programming this flow rule of

229
00:12:06,000 --> 00:12:10,750
course it requires the app sponge to

230
00:12:08,440 --> 00:12:15,730
always be active but<font color="#CCCCCC"> again you can have</font>

231
00:12:10,750 --> 00:12:18,190
multiple ones it also requires routers

232
00:12:15,730 --> 00:12:20,470
to ignore the source MAC address in the

233
00:12:18,190 --> 00:12:21,850
ethernet header because<font color="#CCCCCC"> it will be</font>

234
00:12:20,470 --> 00:12:25,240
different from the source hardware

235
00:12:21,850 --> 00:12:28,260
address inside the arc<font color="#E5E5E5"> request we are</font>

236
00:12:25,240 --> 00:12:31,270
not aware<font color="#E5E5E5"> of any implementations that</font>

237
00:12:28,260 --> 00:12:32,830
that have a problem with<font color="#E5E5E5"> this but this</font>

238
00:12:31,270 --> 00:12:37,270
<font color="#CCCCCC">is something we</font><font color="#E5E5E5"> need to do more research</font>

239
00:12:32,830 --> 00:12:40,150
on it always also<font color="#E5E5E5"> requires support for</font>

240
00:12:37,270 --> 00:12:42,250
the normal virtual output queue this is

241
00:12:40,150 --> 00:12:46,150
an open flow feature where you can take

242
00:12:42,250 --> 00:12:48,160
packets send it into<font color="#CCCCCC"> open flow modify it</font>

243
00:12:46,150 --> 00:12:52,810
and then send<font color="#E5E5E5"> it back into your normal</font>

244
00:12:48,160 --> 00:12:55,449
pipeline that way we could<font color="#E5E5E5"> have we could</font>

245
00:12:52,810 --> 00:12:57,829
modify<font color="#E5E5E5"> the destination MAC address to</font>

246
00:12:55,450 --> 00:12:59,810
that of<font color="#CCCCCC"> the out sponge</font><font color="#E5E5E5"> and</font>

247
00:12:57,830 --> 00:13:02,570
we could send it back into<font color="#E5E5E5"> our normal</font>

248
00:12:59,810 --> 00:13:06,109
mpls pipeline and have it forwarded like

249
00:13:02,570 --> 00:13:08,450
any<font color="#E5E5E5"> other packets and here it would be</font>

250
00:13:06,110 --> 00:13:13,220
nice to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> open flow metering to</font>

251
00:13:08,450 --> 00:13:16,580
rate limiting the<font color="#E5E5E5"> OP traffic then a last</font>

252
00:13:13,220 --> 00:13:18,890
<font color="#E5E5E5">solution we thought of is instead</font><font color="#CCCCCC"> of</font>

253
00:13:16,580 --> 00:13:21,140
sending everything to the art sponge as

254
00:13:18,890 --> 00:13:23,540
i<font color="#CCCCCC"> said we know the IP addresses and we</font>

255
00:13:21,140 --> 00:13:25,730
know the MAC addresses so what we might

256
00:13:23,540 --> 00:13:28,910
as well<font color="#E5E5E5"> do is take flow rules for every</font>

257
00:13:25,730 --> 00:13:32,000
single<font color="#E5E5E5"> customer and once we get an ARP</font>

258
00:13:28,910 --> 00:13:33,560
request take the destination ethernet

259
00:13:32,000 --> 00:13:36,110
address replace it with the right

260
00:13:33,560 --> 00:13:38,140
unicast address and forward the request

261
00:13:36,110 --> 00:13:41,990
immediately to the right customer and

262
00:13:38,140 --> 00:13:46,640
then that<font color="#E5E5E5"> customer replies and we will</font>

263
00:13:41,990 --> 00:13:48,590
be done<font color="#E5E5E5"> with all broadcast traffic we</font>

264
00:13:46,640 --> 00:13:51,380
think this is solution<font color="#CCCCCC"> is the most</font>

265
00:13:48,590 --> 00:13:54,130
simple it requires no dependency on the

266
00:13:51,380 --> 00:13:57,580
controller except to program flow rule

267
00:13:54,130 --> 00:14:00,590
we won't need the<font color="#CCCCCC"> art sponge anymore and</font>

268
00:13:57,580 --> 00:14:03,350
we could extend<font color="#E5E5E5"> this to also set flow</font>

269
00:14:00,590 --> 00:14:05,990
rules that allow certain up replies and

270
00:14:03,350 --> 00:14:11,060
thereby we can prevent things like up

271
00:14:05,990 --> 00:14:14,360
spoofing there are a couple<font color="#CCCCCC"> of caveats</font>

272
00:14:11,060 --> 00:14:17,900
here<font color="#E5E5E5"> requests for routers that are down</font>

273
00:14:14,360 --> 00:14:20,390
are still flooded because well it will

274
00:14:17,900 --> 00:14:22,430
be converted<font color="#CCCCCC"> to the mac address the</font>

275
00:14:20,390 --> 00:14:24,650
packet will be converted<font color="#E5E5E5"> and sent in the</font>

276
00:14:22,430 --> 00:14:27,890
mac address of this router that is no

277
00:14:24,650 --> 00:14:29,959
longer<font color="#E5E5E5"> available and one advantage is</font>

278
00:14:27,890 --> 00:14:33,560
<font color="#E5E5E5">that</font><font color="#CCCCCC"> the packets will before their zone</font>

279
00:14:29,960 --> 00:14:36,920
unicast that means that routers for

280
00:14:33,560 --> 00:14:39,290
which the packet is not the mint will be

281
00:14:36,920 --> 00:14:42,310
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> blow and drop it in art where</font>

282
00:14:39,290 --> 00:14:45,199
they don't<font color="#E5E5E5"> have to process it on the cpu</font>

283
00:14:42,310 --> 00:14:48,140
what we could also do is disable the

284
00:14:45,200 --> 00:14:52,550
hardware aging on our platform which

285
00:14:48,140 --> 00:14:55,130
would allow<font color="#CCCCCC"> us to to always keep the mac</font>

286
00:14:52,550 --> 00:14:59,170
address entries in<font color="#E5E5E5"> in the cam tables and</font>

287
00:14:55,130 --> 00:15:01,820
if a customer router goes down these

288
00:14:59,170 --> 00:15:04,130
broadcasts requests to onion unicast

289
00:15:01,820 --> 00:15:06,630
destinations won't be forwarded over the

290
00:15:04,130 --> 00:15:09,850
<font color="#E5E5E5">entire platform</font>

291
00:15:06,630 --> 00:15:12,280
we would still need to use broadcast

292
00:15:09,850 --> 00:15:14,530
sometimes in case of migration scenarios

293
00:15:12,280 --> 00:15:17,709
when we don't know which customer router

294
00:15:14,530 --> 00:15:21,339
and IP address is tied to we can remove

295
00:15:17,710 --> 00:15:26,200
the macro flow entry for<font color="#E5E5E5"> this particular</font>

296
00:15:21,340 --> 00:15:29,260
<font color="#E5E5E5">router and then have that our request</font>

297
00:15:26,200 --> 00:15:31,180
forwarded as normal broadcast but since

298
00:15:29,260 --> 00:15:32,890
we<font color="#CCCCCC"> don't have</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of migrations going</font>

299
00:15:31,180 --> 00:15:38,079
on at<font color="#CCCCCC"> the same time this will be</font><font color="#E5E5E5"> very</font>

300
00:15:32,890 --> 00:15:42,100
limited this<font color="#E5E5E5"> particular implementation</font>

301
00:15:38,080 --> 00:15:44,290
does require a couple of features from

302
00:15:42,100 --> 00:15:46,720
the<font color="#CCCCCC"> openflow implementation it requires</font>

303
00:15:44,290 --> 00:15:49,089
support for the normal output queue it

304
00:15:46,720 --> 00:15:52,240
requires<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> able to match on the</font>

305
00:15:49,090 --> 00:15:56,710
layer to header as well as the IP

306
00:15:52,240 --> 00:15:58,690
addresses inside our packets and it

307
00:15:56,710 --> 00:16:02,100
would be<font color="#E5E5E5"> nice to have metering in order</font>

308
00:15:58,690 --> 00:16:05,350
to prevent software bugs from causing

309
00:16:02,100 --> 00:16:08,890
broadcast storms directed at individual

310
00:16:05,350 --> 00:16:12,160
customers I sorry unicast storms in this

311
00:16:08,890 --> 00:16:14,140
case all of these are<font color="#CCCCCC"> features that are</font>

312
00:16:12,160 --> 00:16:19,780
not available<font color="#E5E5E5"> in our current</font>

313
00:16:14,140 --> 00:16:24,939
implementation so to conclude we can

314
00:16:19,780 --> 00:16:26,380
<font color="#CCCCCC">actually do this</font><font color="#E5E5E5"> in theory but what we</font>

315
00:16:24,940 --> 00:16:28,390
can actually do in practice really

316
00:16:26,380 --> 00:16:31,720
depends on<font color="#E5E5E5"> the on the actual</font>

317
00:16:28,390 --> 00:16:34,900
implementation the overflow spec defines

318
00:16:31,720 --> 00:16:37,660
a lot of very useful features but most

319
00:16:34,900 --> 00:16:39,640
of them are defined as optional so if a

320
00:16:37,660 --> 00:16:43,390
vendor tells you they implement overflow

321
00:16:39,640 --> 00:16:45,910
10 or 12 2 or 1 2 3 you still don't<font color="#E5E5E5"> know</font>

322
00:16:43,390 --> 00:16:51,310
anything because most of the stuff is

323
00:16:45,910 --> 00:16:53,020
<font color="#CCCCCC">it's optional to implement we would like</font>

324
00:16:51,310 --> 00:16:54,640
<font color="#CCCCCC">to extend this further we're working</font>

325
00:16:53,020 --> 00:16:57,400
with our vendor to get some<font color="#E5E5E5"> of the</font>

326
00:16:54,640 --> 00:17:00,310
missing features implemented we're also

327
00:16:57,400 --> 00:17:04,240
looking at ipv6 because some of these

328
00:17:00,310 --> 00:17:08,520
<font color="#CCCCCC">issues like the spoofing problem also</font>

329
00:17:04,240 --> 00:17:11,730
<font color="#E5E5E5">applied to ipv6 so we would like to</font>

330
00:17:08,520 --> 00:17:15,510
implement the<font color="#E5E5E5"> similar solution for ipv6</font>

331
00:17:11,730 --> 00:17:15,510
we also look at

332
00:17:15,900 --> 00:17:20,560
implementing<font color="#CCCCCC"> open flow for all our</font>

333
00:17:18,099 --> 00:17:23,829
traffic streams so have layer to flow

334
00:17:20,560 --> 00:17:27,669
rules for all traffic<font color="#E5E5E5"> macro</font><font color="#CCCCCC"> thurston mac</font>

335
00:17:23,829 --> 00:17:31,480
address we've seen<font color="#E5E5E5"> some designs of</font>

336
00:17:27,670 --> 00:17:34,680
internet exchanges we're<font color="#E5E5E5"> open flow rules</font>

337
00:17:31,480 --> 00:17:38,740
were set for all layer<font color="#E5E5E5"> three put flows</font>

338
00:17:34,680 --> 00:17:40,930
we don't believe<font color="#E5E5E5"> that scales so we would</font>

339
00:17:38,740 --> 00:17:42,910
only<font color="#E5E5E5"> be looking at the layer to</font><font color="#CCCCCC"> Heather</font>

340
00:17:40,930 --> 00:17:46,390
and implement flow rules based on that

341
00:17:42,910 --> 00:17:49,930
and lastly we're also looking at some

342
00:17:46,390 --> 00:17:52,240
alternatives such as EV p.m. which would

343
00:17:49,930 --> 00:17:56,650
offer similar functionality just

344
00:17:52,240 --> 00:17:59,980
implement it in a different<font color="#E5E5E5"> way I'd like</font>

345
00:17:56,650 --> 00:18:02,100
to<font color="#E5E5E5"> close off with some tips for people</font>

346
00:17:59,980 --> 00:18:06,190
that are starting to look at open flow

347
00:18:02,100 --> 00:18:08,980
if you're an operator and your want to

348
00:18:06,190 --> 00:18:13,630
run open<font color="#E5E5E5"> flow in your network be sure to</font>

349
00:18:08,980 --> 00:18:16,900
limit control traffic<font color="#CCCCCC"> there</font><font color="#E5E5E5"> usually this</font>

350
00:18:13,630 --> 00:18:20,290
traffic is<font color="#E5E5E5"> CPU forwarded so if you have</font>

351
00:18:16,900 --> 00:18:23,380
a lot of traffic from users that will be

352
00:18:20,290 --> 00:18:25,389
forwarded to the controller you assume

353
00:18:23,380 --> 00:18:30,670
run into trouble if you try to scale

354
00:18:25,390 --> 00:18:34,540
this another thing we've thought of is

355
00:18:30,670 --> 00:18:36,130
controller placement if you place your

356
00:18:34,540 --> 00:18:38,710
controller in your management<font color="#CCCCCC"> network</font>

357
00:18:36,130 --> 00:18:41,500
used and you actually<font color="#CCCCCC"> use it to forward</font>

358
00:18:38,710 --> 00:18:43,360
traffic and then you suddenly get a

359
00:18:41,500 --> 00:18:45,310
dependency of your management network on

360
00:18:43,360 --> 00:18:48,149
your production<font color="#E5E5E5"> network any other way</font>

361
00:18:45,310 --> 00:18:51,520
around which is not really desirable and

362
00:18:48,150 --> 00:18:53,410
if you put it in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> production</font><font color="#CCCCCC"> network</font>

363
00:18:51,520 --> 00:18:55,990
you have<font color="#CCCCCC"> to be careful</font><font color="#E5E5E5"> not to create</font><font color="#CCCCCC"> a</font>

364
00:18:53,410 --> 00:18:58,300
feedback loop situation where you would

365
00:18:55,990 --> 00:19:02,260
actually require a flow rule in order to

366
00:18:58,300 --> 00:19:06,210
reach your controller then if you're a

367
00:19:02,260 --> 00:19:10,840
vendor please design your

368
00:19:06,210 --> 00:19:14,170
implementations for use in line I think

369
00:19:10,840 --> 00:19:16,449
<font color="#E5E5E5">many operators at least we won't be</font>

370
00:19:14,170 --> 00:19:18,640
replacing our entire network with open

371
00:19:16,450 --> 00:19:21,640
flow so we really<font color="#E5E5E5"> see it as an</font>

372
00:19:18,640 --> 00:19:23,730
additional feature in a network and so

373
00:19:21,640 --> 00:19:27,370
we'd like<font color="#E5E5E5"> to see it implemented that way</font>

374
00:19:23,730 --> 00:19:30,120
sort of like a ACL on steroids or flows

375
00:19:27,370 --> 00:19:34,570
back on steroids

376
00:19:30,120 --> 00:19:37,239
and please if you implement it implement

377
00:19:34,570 --> 00:19:39,429
as many fields as you can the whole

378
00:19:37,240 --> 00:19:42,220
promise of open flow was that it would

379
00:19:39,430 --> 00:19:46,060
give operators the flexibility to do

380
00:19:42,220 --> 00:19:49,350
everything<font color="#E5E5E5"> they wanted and well if you</font>

381
00:19:46,060 --> 00:19:51,970
only implement the very basic part of

382
00:19:49,350 --> 00:19:55,800
both the spec then<font color="#E5E5E5"> there's very little</font>

383
00:19:51,970 --> 00:20:00,190
we as operators can do with it and

384
00:19:55,800 --> 00:20:06,510
finally make sure to protect<font color="#E5E5E5"> the control</font>

385
00:20:00,190 --> 00:20:08,980
functions of the of the router of the<font color="#CCCCCC"> PE</font>

386
00:20:06,510 --> 00:20:10,629
make<font color="#CCCCCC"> sure you forward control the</font>

387
00:20:08,980 --> 00:20:16,150
traffic in hardware or at least rate

388
00:20:10,630 --> 00:20:18,700
limited and that's all I had this work

389
00:20:16,150 --> 00:20:20,740
is building on<font color="#E5E5E5"> a paper by two students</font>

390
00:20:18,700 --> 00:20:23,770
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> university of amsterdam on ebay</font>

391
00:20:20,740 --> 00:20:26,020
gary and picked up boo to know if you're

392
00:20:23,770 --> 00:20:32,040
interested<font color="#CCCCCC"> in reading more i recommend</font>

393
00:20:26,020 --> 00:20:32,040
you look at their paper any questions

394
00:20:36,029 --> 00:20:39,559
no one good thank you

395
00:20:51,230 --> 00:20:53,290
you

