1
00:00:01,040 --> 00:00:06,000
hello thanks for hanging out so late I

2
00:00:04,110 --> 00:00:08,760
guess we're<font color="#E5E5E5"> going to go from weather</font>

3
00:00:06,000 --> 00:00:12,030
layer 9 all the way to layer<font color="#E5E5E5"> 1 with this</font>

4
00:00:08,760 --> 00:00:14,070
fog so it's going to<font color="#E5E5E5"> be an</font><font color="#CCCCCC"> interesting</font>

5
00:00:12,030 --> 00:00:17,730
transition but<font color="#E5E5E5"> basically this work is</font>

6
00:00:14,070 --> 00:00:19,500
supported by<font color="#CCCCCC"> the NSF and Rome</font>

7
00:00:17,730 --> 00:00:22,380
laboratories and has to do with

8
00:00:19,500 --> 00:00:24,539
designing and implementing a high-speed

9
00:00:22,380 --> 00:00:30,869
programmable hardware right now we're

10
00:00:24,539 --> 00:00:33,390
working<font color="#CCCCCC"> on thanagar be per second so let</font>

11
00:00:30,869 --> 00:00:36,570
<font color="#E5E5E5">me give you a little brief history so I</font>

12
00:00:33,390 --> 00:00:38,940
was<font color="#CCCCCC"> a DARPA p I in the active networks</font>

13
00:00:36,570 --> 00:00:42,719
program which was<font color="#CCCCCC"> a</font><font color="#E5E5E5"> program that was</font>

14
00:00:38,940 --> 00:00:46,920
designed to improve the<font color="#E5E5E5"> program ability</font>

15
00:00:42,719 --> 00:00:48,480
of networks and allow the the<font color="#CCCCCC"> networks</font>

16
00:00:46,920 --> 00:00:52,379
to adapt to new protocols new flow

17
00:00:48,480 --> 00:00:54,930
control mechanisms adopt monitoring sort

18
00:00:52,379 --> 00:00:57,089
of applications there were two<font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of</font>

19
00:00:54,930 --> 00:00:59,879
acting networks you know more sort of

20
00:00:57,090 --> 00:01:02,100
<font color="#CCCCCC">discreet where it was actually the depth</font>

21
00:00:59,879 --> 00:01:04,979
ability was performed through management

22
00:01:02,100 --> 00:01:06,240
<font color="#E5E5E5">operations that are separate from the</font>

23
00:01:04,979 --> 00:01:08,369
data flow and then there<font color="#CCCCCC"> was an</font>

24
00:01:06,240 --> 00:01:10,619
integrated version where instead the

25
00:01:08,369 --> 00:01:12,210
packets himself brought the the updates

26
00:01:10,619 --> 00:01:15,390
to the network in sort<font color="#E5E5E5"> of like a very</font>

27
00:01:12,210 --> 00:01:17,970
sort of fine grain and and dynamic way

28
00:01:15,390 --> 00:01:20,280
so the broad scope of this research

29
00:01:17,970 --> 00:01:23,009
program did not really result in a wide

30
00:01:20,280 --> 00:01:25,770
industry adoption of although there has

31
00:01:23,009 --> 00:01:27,270
been a very very good the research that

32
00:01:25,770 --> 00:01:31,530
came out of this<font color="#E5E5E5"> very fundamental</font>

33
00:01:27,270 --> 00:01:34,170
researching how to design for<font color="#CCCCCC"> a safe</font>

34
00:01:31,530 --> 00:01:38,250
programming languages for<font color="#CCCCCC"> Network sort</font>

35
00:01:34,170 --> 00:01:41,430
of applications of hardware prototypes

36
00:01:38,250 --> 00:01:47,430
and so forth so meta networks which

37
00:01:41,430 --> 00:01:50,460
basically I started after that it

38
00:01:47,430 --> 00:01:55,320
basically has the the same goal but

39
00:01:50,460 --> 00:01:57,000
we're trying to be more pragmatic and we

40
00:01:55,320 --> 00:01:59,789
try<font color="#E5E5E5"> to do a bottom-up approach where we</font>

41
00:01:57,000 --> 00:02:00,640
want<font color="#E5E5E5"> to achieve the programmability but</font>

42
00:01:59,790 --> 00:02:02,470
we want to

43
00:02:00,640 --> 00:02:05,320
not<font color="#E5E5E5"> being lazy or not having to change</font>

44
00:02:02,470 --> 00:02:08,169
the routers and the network<font color="#CCCCCC"> components</font>

45
00:02:05,320 --> 00:02:09,788
in<font color="#CCCCCC"> the network and also we're going to</font>

46
00:02:08,169 --> 00:02:13,480
be<font color="#E5E5E5"> application</font><font color="#CCCCCC"> dreamin rather than</font>

47
00:02:09,788 --> 00:02:15,458
<font color="#CCCCCC">design driven and lately we've been</font>

48
00:02:13,480 --> 00:02:18,609
actually revisiting the computational

49
00:02:15,459 --> 00:02:20,830
model for specific applications in our

50
00:02:18,610 --> 00:02:23,620
case is a network security application

51
00:02:20,830 --> 00:02:26,170
in the<font color="#E5E5E5"> IDS</font><font color="#CCCCCC"> a key aspects</font><font color="#E5E5E5"> and this talk</font>

52
00:02:23,620 --> 00:02:29,680
is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be about exactly this last</font>

53
00:02:26,170 --> 00:02:32,470
bullet the design guidelines that we

54
00:02:29,680 --> 00:02:35,650
have sort of<font color="#CCCCCC"> mine</font><font color="#E5E5E5"> are basically to be</font>

55
00:02:32,470 --> 00:02:39,220
open source so that we can reuse the

56
00:02:35,650 --> 00:02:42,040
<font color="#CCCCCC">open source sort of have the open</font><font color="#E5E5E5"> source</font>

57
00:02:39,220 --> 00:02:43,840
model where we<font color="#CCCCCC"> think it's the tobin</font>

58
00:02:42,040 --> 00:02:45,880
sourcing in general provide more

59
00:02:43,840 --> 00:02:52,000
flexible more more robust sort of

60
00:02:45,880 --> 00:02:53,980
software sort of applications and so in

61
00:02:52,000 --> 00:02:55,720
order to do this we directly support

62
00:02:53,980 --> 00:02:58,720
currently<font color="#E5E5E5"> there's North signatures and</font>

63
00:02:55,720 --> 00:03:01,780
also we abstract our hardware system

64
00:02:58,720 --> 00:03:03,640
from as a pci card that looks like a

65
00:03:01,780 --> 00:03:07,450
network interface<font color="#E5E5E5"> card so you</font><font color="#CCCCCC"> can put</font><font color="#E5E5E5"> it</font>

66
00:03:03,640 --> 00:03:09,518
in any<font color="#E5E5E5"> pc or you know into</font><font color="#CCCCCC"> base machine</font>

67
00:03:07,450 --> 00:03:14,980
and it appears<font color="#CCCCCC"> to be a network</font><font color="#E5E5E5"> interface</font>

68
00:03:09,519 --> 00:03:16,360
<font color="#E5E5E5">card and the basic also we want to</font>

69
00:03:14,980 --> 00:03:20,709
<font color="#E5E5E5">retain high degree of programmability</font>

70
00:03:16,360 --> 00:03:23,350
and line speed and sort of<font color="#E5E5E5"> we'll get</font>

71
00:03:20,709 --> 00:03:26,290
into more of the programmability aspect

72
00:03:23,350 --> 00:03:28,269
of the other hardware so what it looks

73
00:03:26,290 --> 00:03:36,700
like is basically as<font color="#CCCCCC"> i said a pci card</font>

74
00:03:28,269 --> 00:03:40,030
and on the left side of<font color="#CCCCCC"> the on the left</font>

75
00:03:36,700 --> 00:03:43,238
side of<font color="#CCCCCC"> the of this this</font><font color="#E5E5E5"> slide</font><font color="#CCCCCC"> you'll</font>

76
00:03:40,030 --> 00:03:44,680
see<font color="#CCCCCC"> there is a a basically a layer 140</font>

77
00:03:43,239 --> 00:03:47,560
mechanism that's why I'm talking<font color="#CCCCCC"> about</font>

78
00:03:44,680 --> 00:03:50,380
layer 1 this is essentially acts like a

79
00:03:47,560 --> 00:03:51,970
tap it<font color="#E5E5E5"> basically has two ports and the</font>

80
00:03:50,380 --> 00:03:56,049
packets just go through this layer<font color="#CCCCCC"> one</font>

81
00:03:51,970 --> 00:03:58,120
<font color="#E5E5E5">system completely transparent Lee at</font>

82
00:03:56,049 --> 00:04:00,310
line speed and<font color="#E5E5E5"> their translate it</font>

83
00:03:58,120 --> 00:04:01,959
doesn't care what probabilities you know

84
00:04:00,310 --> 00:04:04,510
protocol is being transmitted it just

85
00:04:01,959 --> 00:04:07,120
line speed with the clock is basically

86
00:04:04,510 --> 00:04:09,340
forward in the packet back and forth<font color="#CCCCCC"> the</font>

87
00:04:07,120 --> 00:04:13,390
as this is<font color="#CCCCCC"> happening</font>

88
00:04:09,340 --> 00:04:15,700
some packets are also copied to our own

89
00:04:13,390 --> 00:04:16,988
version<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> natural processor and the</font>

90
00:04:15,700 --> 00:04:19,389
<font color="#E5E5E5">rest of the</font><font color="#CCCCCC"> talk is really</font><font color="#E5E5E5"> going to be</font>

91
00:04:16,988 --> 00:04:22,270
about this piece of the oil architecture

92
00:04:19,389 --> 00:04:25,180
the this network processor has some

93
00:04:22,270 --> 00:04:27,070
memory to which it can keep stateful

94
00:04:25,180 --> 00:04:29,169
sort of information<font color="#CCCCCC"> about the packets</font>

95
00:04:27,070 --> 00:04:32,080
and the result of<font color="#E5E5E5"> the matching that</font>

96
00:04:29,169 --> 00:04:34,840
happens in here you can have packets

97
00:04:32,080 --> 00:04:37,300
being copied through the pci card to the

98
00:04:34,840 --> 00:04:39,340
host as if we're coming<font color="#E5E5E5"> from a regular</font>

99
00:04:37,300 --> 00:04:41,020
network interface card so it's like<font color="#E5E5E5"> if</font>

100
00:04:39,340 --> 00:04:42,609
you had<font color="#E5E5E5"> a network</font><font color="#CCCCCC"> interface card in</font>

101
00:04:41,020 --> 00:04:45,549
promiscuous mode you will see packets

102
00:04:42,610 --> 00:04:47,710
coming to the host and or can be blocked

103
00:04:45,550 --> 00:04:49,540
so there's a<font color="#E5E5E5"> single coming back here to</font>

104
00:04:47,710 --> 00:04:53,049
the layer<font color="#E5E5E5"> one which basically gates the</font>

105
00:04:49,540 --> 00:04:55,169
forward in other packets so in essence

106
00:04:53,050 --> 00:05:01,030
this becomes a sort<font color="#E5E5E5"> of like an IDs</font>

107
00:04:55,169 --> 00:05:03,000
accelerator or an IPS system so<font color="#CCCCCC"> I'm</font>

108
00:05:01,030 --> 00:05:07,239
<font color="#CCCCCC">going to be talking about what's in here</font>

109
00:05:03,000 --> 00:05:10,360
and i'm going<font color="#E5E5E5"> to start from a so high</font>

110
00:05:07,240 --> 00:05:12,880
level view<font color="#E5E5E5"> of what's called a fling</font>

111
00:05:10,360 --> 00:05:15,520
computer taxonomy which basically tells

112
00:05:12,880 --> 00:05:18,219
you the all possible ways that you can

113
00:05:15,520 --> 00:05:21,039
do computation fling came up with these

114
00:05:18,220 --> 00:05:23,770
this district<font color="#E5E5E5"> sauna me as i am not</font>

115
00:05:21,039 --> 00:05:25,510
<font color="#CCCCCC">directly toward e the what's currently</font>

116
00:05:23,770 --> 00:05:26,799
being done today well what we're doing

117
00:05:25,510 --> 00:05:29,020
different so basically this is a

118
00:05:26,800 --> 00:05:32,919
simplest type of taxonomy where you have

119
00:05:29,020 --> 00:05:34,900
just a one data flow and an instruction

120
00:05:32,919 --> 00:05:37,120
flow and the process combines the data

121
00:05:34,900 --> 00:05:40,419
flow and instruction flow to come out

122
00:05:37,120 --> 00:05:42,820
with the computation the parallel

123
00:05:40,419 --> 00:05:45,039
version of that is called mimd multiple

124
00:05:42,820 --> 00:05:47,380
instruction multiple data which takes

125
00:05:45,039 --> 00:05:49,240
multiple data flows and multiple

126
00:05:47,380 --> 00:05:52,030
instruction flows and has several

127
00:05:49,240 --> 00:05:55,000
processors that<font color="#CCCCCC"> they compute in parallel</font>

128
00:05:52,030 --> 00:05:56,500
on this multiple flows this is basically

129
00:05:55,000 --> 00:06:00,580
<font color="#E5E5E5">what is being used today in most</font>

130
00:05:56,500 --> 00:06:02,889
processors both superscalar processors

131
00:06:00,580 --> 00:06:07,120
like your Pentiums and you're you know

132
00:06:02,889 --> 00:06:10,419
processes in your<font color="#E5E5E5"> modern computers and</font>

133
00:06:07,120 --> 00:06:13,240
network processors so this model applies

134
00:06:10,419 --> 00:06:15,070
well to network processors because<font color="#CCCCCC"> when</font>

135
00:06:13,240 --> 00:06:17,220
network processors do exploit what<font color="#E5E5E5"> is</font>

136
00:06:15,070 --> 00:06:19,530
called the packet level parallel

137
00:06:17,220 --> 00:06:22,980
so they see each packet as an

138
00:06:19,530 --> 00:06:24,960
independent event and assign each packet

139
00:06:22,980 --> 00:06:27,330
to sort of one of these processors and

140
00:06:24,960 --> 00:06:30,030
they have multiple threads all working

141
00:06:27,330 --> 00:06:31,740
concurrently<font color="#E5E5E5"> to process each packet</font>

142
00:06:30,030 --> 00:06:33,570
concurrently<font color="#E5E5E5"> and so the overall</font>

143
00:06:31,740 --> 00:06:36,330
throughput of the processor increases

144
00:06:33,570 --> 00:06:38,460
because of this parallelism the resort

145
00:06:36,330 --> 00:06:40,560
to other not so well<font color="#CCCCCC"> known types of</font>

146
00:06:38,460 --> 00:06:42,930
computational models there is the single

147
00:06:40,560 --> 00:06:46,350
instructional structure multiple data or

148
00:06:42,930 --> 00:06:48,360
SIMD which is mostly<font color="#E5E5E5"> it's basically</font>

149
00:06:46,350 --> 00:06:51,060
having all the processors getting the

150
00:06:48,360 --> 00:06:52,980
same instruction but each<font color="#CCCCCC"> Kanaan a</font>

151
00:06:51,060 --> 00:06:54,540
different data stream this is the kind

152
00:06:52,980 --> 00:06:55,610
of processors that will be used for

153
00:06:54,540 --> 00:06:58,020
example for image processing

154
00:06:55,610 --> 00:07:00,240
<font color="#CCCCCC">applications where you have a large</font>

155
00:06:58,020 --> 00:07:02,789
screen in each processor gets a portion

156
00:07:00,240 --> 00:07:04,620
of the screen and all processes are

157
00:07:02,790 --> 00:07:07,140
given the same instruction to do say

158
00:07:04,620 --> 00:07:09,660
interpolate and all the processors each

159
00:07:07,140 --> 00:07:12,840
<font color="#E5E5E5">takes a region of the screen to to do</font>

160
00:07:09,660 --> 00:07:15,210
the processing so this<font color="#E5E5E5"> is used in some</font>

161
00:07:12,840 --> 00:07:16,500
special purpose sort of processing

162
00:07:15,210 --> 00:07:18,659
applications today but it's not as

163
00:07:16,500 --> 00:07:20,940
popular as listed and that is<font color="#E5E5E5"> this</font>

164
00:07:18,660 --> 00:07:22,740
fourth one which is<font color="#E5E5E5"> the multiple</font>

165
00:07:20,940 --> 00:07:25,110
instruction single data and that's

166
00:07:22,740 --> 00:07:30,440
actually<font color="#CCCCCC"> the one that we feel is</font>

167
00:07:25,110 --> 00:07:33,180
<font color="#E5E5E5">advanced best suited architecture for</font>

168
00:07:30,440 --> 00:07:39,060
security applications<font color="#CCCCCC"> natural security</font>

169
00:07:33,180 --> 00:07:40,830
<font color="#CCCCCC">issues</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I gotta hurry so the so this</font>

170
00:07:39,060 --> 00:07:42,720
<font color="#E5E5E5">is the association of that architecture</font>

171
00:07:40,830 --> 00:07:45,419
where you have a data stream that<font color="#E5E5E5"> is</font>

172
00:07:42,720 --> 00:07:47,520
broadcast inside an FPGA and each

173
00:07:45,419 --> 00:07:50,310
basically<font color="#CCCCCC"> there is a number of small</font>

174
00:07:47,520 --> 00:07:52,680
processors inside<font color="#E5E5E5"> its fpga which each</font>

175
00:07:50,310 --> 00:07:54,600
implements a rule so basically if you're

176
00:07:52,680 --> 00:07:57,060
trying<font color="#E5E5E5"> to look for about you know</font><font color="#CCCCCC"> 1500</font>

177
00:07:54,600 --> 00:07:59,220
attacks each one of these will be

178
00:07:57,060 --> 00:08:00,930
responsible for looking for that

179
00:07:59,220 --> 00:08:03,570
specific attack then there is a

180
00:08:00,930 --> 00:08:05,190
reduction<font color="#E5E5E5"> network which takes that the</font>

181
00:08:03,570 --> 00:08:07,200
result of<font color="#E5E5E5"> all these processors and</font>

182
00:08:05,190 --> 00:08:09,690
combines the result goes through a

183
00:08:07,200 --> 00:08:14,060
stateful analysis stage and then back

184
00:08:09,690 --> 00:08:16,110
out to the to the host processor and the

185
00:08:14,060 --> 00:08:17,700
<font color="#E5E5E5">visit the interface between this</font>

186
00:08:16,110 --> 00:08:20,030
processor and<font color="#CCCCCC"> the host is basically the</font>

187
00:08:17,700 --> 00:08:20,030
<font color="#E5E5E5">pci</font>

188
00:08:20,140 --> 00:08:25,190
and this can be done basically

189
00:08:23,060 --> 00:08:29,330
synchronously with the receive clock of

190
00:08:25,190 --> 00:08:31,520
<font color="#CCCCCC">the data</font><font color="#E5E5E5"> stream so line speed so an</font>

191
00:08:29,330 --> 00:08:33,740
interesting problem is you know given an

192
00:08:31,520 --> 00:08:36,530
<font color="#CCCCCC">FPGA you have say a large number of</font>

193
00:08:33,740 --> 00:08:38,900
<font color="#E5E5E5">snort rules you know how do you make</font>

194
00:08:36,530 --> 00:08:41,569
best use of your logic inside the FPGA

195
00:08:38,900 --> 00:08:43,549
to be able<font color="#E5E5E5"> to fit as many in our rules</font>

196
00:08:41,570 --> 00:08:46,820
as<font color="#CCCCCC"> you can inside a given amount of</font>

197
00:08:43,549 --> 00:08:49,189
logic and one way we do one of<font color="#E5E5E5"> the</font>

198
00:08:46,820 --> 00:08:51,980
techniques we<font color="#E5E5E5"> use is basically share</font>

199
00:08:49,190 --> 00:08:53,990
comparison logic among multiple rules so

200
00:08:51,980 --> 00:08:56,120
here I have you know trying<font color="#CCCCCC"> to look for</font>

201
00:08:53,990 --> 00:08:58,340
a string called match this into the

202
00:08:56,120 --> 00:09:01,190
payload and then I have another<font color="#E5E5E5"> string</font>

203
00:08:58,340 --> 00:09:04,220
that says catch this one but there<font color="#E5E5E5"> is an</font>

204
00:09:01,190 --> 00:09:07,220
overlap between<font color="#CCCCCC"> these two strings and so</font>

205
00:09:04,220 --> 00:09:10,190
are we have basically a compilation

206
00:09:07,220 --> 00:09:12,410
technique which allows you to encode

207
00:09:10,190 --> 00:09:16,250
these two strings by reusing some of the

208
00:09:12,410 --> 00:09:20,120
comparison logic this case tcht and a

209
00:09:16,250 --> 00:09:22,070
chart then the the actual FPGA synthesis

210
00:09:20,120 --> 00:09:28,490
tool will take this and further<font color="#E5E5E5"> optimize</font>

211
00:09:22,070 --> 00:09:31,100
<font color="#E5E5E5">to achieve further optimizations so this</font>

212
00:09:28,490 --> 00:09:34,100
this<font color="#E5E5E5"> basically shows you what happens if</font>

213
00:09:31,100 --> 00:09:35,540
you grow the number of rules so here's

214
00:09:34,100 --> 00:09:37,310
the number of rules and here's our many

215
00:09:35,540 --> 00:09:39,020
components you haven't appreciate to

216
00:09:37,310 --> 00:09:41,000
implement them and the growth is

217
00:09:39,020 --> 00:09:42,800
sublinear so because<font color="#CCCCCC"> of this technique</font>

218
00:09:41,000 --> 00:09:45,080
basically if you increase the number of

219
00:09:42,800 --> 00:09:47,420
rules<font color="#CCCCCC"> the number of components is not</font>

220
00:09:45,080 --> 00:09:50,960
going<font color="#E5E5E5"> to increase linearly what increase</font>

221
00:09:47,420 --> 00:09:53,479
you know what increases the number of

222
00:09:50,960 --> 00:09:54,860
connections within the<font color="#CCCCCC"> beer pga so</font>

223
00:09:53,480 --> 00:09:57,710
basically you're going to have a highly

224
00:09:54,860 --> 00:10:08,230
connected system but with fewer logic

225
00:09:57,710 --> 00:10:08,230
which is really what you<font color="#E5E5E5"> want so</font>

226
00:10:08,440 --> 00:10:13,310
<font color="#CCCCCC">okay so the</font><font color="#E5E5E5"> one of the problems are</font>

227
00:10:11,990 --> 00:10:15,590
<font color="#CCCCCC">think you can be per second is that</font>

228
00:10:13,310 --> 00:10:18,319
you're now approaching a bandwidth in

229
00:10:15,590 --> 00:10:21,350
which the bandwidth at your monitoring

230
00:10:18,320 --> 00:10:22,910
is approximately ten hundred times the

231
00:10:21,350 --> 00:10:26,840
bandwidth that you have to be able to

232
00:10:22,910 --> 00:10:29,240
report information to the host so the

233
00:10:26,840 --> 00:10:32,270
nice thing about being<font color="#E5E5E5"> a wire speed is</font>

234
00:10:29,240 --> 00:10:35,180
that flooding you know if you flood the

235
00:10:32,270 --> 00:10:37,460
line you cannot compromise the blocking

236
00:10:35,180 --> 00:10:39,130
capability so these are<font color="#CCCCCC"> good you know an</font>

237
00:10:37,460 --> 00:10:41,840
essential characteristic however

238
00:10:39,130 --> 00:10:47,270
obviously by flooding and also reduce

239
00:10:41,840 --> 00:10:48,710
the efficacy of the reporting mechanism

240
00:10:47,270 --> 00:10:51,560
because the host now is going<font color="#E5E5E5"> to be</font>

241
00:10:48,710 --> 00:10:53,810
overwhelmed with with reports if you're

242
00:10:51,560 --> 00:10:57,949
<font color="#E5E5E5">getting flooded with malicious Packers</font>

243
00:10:53,810 --> 00:11:02,449
so to speak or packets that are deemed

244
00:10:57,950 --> 00:11:03,470
to<font color="#CCCCCC"> be to</font><font color="#E5E5E5"> be bad so</font><font color="#CCCCCC"> it is in you know the</font>

245
00:11:02,450 --> 00:11:05,120
<font color="#E5E5E5">problem is that you want to find a</font>

246
00:11:03,470 --> 00:11:07,460
needle<font color="#E5E5E5"> in a haystack when you have so</font>

247
00:11:05,120 --> 00:11:09,920
much bandwidth and three techniques that

248
00:11:07,460 --> 00:11:12,380
we're looking<font color="#CCCCCC"> at is stateful which you</font>

249
00:11:09,920 --> 00:11:14,060
really<font color="#CCCCCC"> do then what I called intelligent</font>

250
00:11:12,380 --> 00:11:15,800
monitoring and application level

251
00:11:14,060 --> 00:11:18,140
programmability and I'm just<font color="#E5E5E5"> going to be</font>

252
00:11:15,800 --> 00:11:20,390
really quick about this<font color="#E5E5E5"> because I don't</font>

253
00:11:18,140 --> 00:11:23,390
<font color="#E5E5E5">have time but we're just going to</font>

254
00:11:20,390 --> 00:11:25,610
outline very briefly<font color="#E5E5E5"> something this last</font>

255
00:11:23,390 --> 00:11:27,980
two techniques so intelligent monitoring

256
00:11:25,610 --> 00:11:30,710
is basically assigning a leaky bucket to

257
00:11:27,980 --> 00:11:32,360
each<font color="#E5E5E5"> rule so you have say 1500 rules in</font>

258
00:11:30,710 --> 00:11:35,000
your<font color="#CCCCCC"> either you're trying to monitor</font>

259
00:11:32,360 --> 00:11:38,420
that you know indicate 1500 different

260
00:11:35,000 --> 00:11:40,910
types of attacks or 1500 types of things

261
00:11:38,420 --> 00:11:42,620
<font color="#E5E5E5">that you're looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> and each link</font>

262
00:11:40,910 --> 00:11:44,600
back at measures basically the arrival

263
00:11:42,620 --> 00:11:48,830
rate of the matches of that specific

264
00:11:44,600 --> 00:11:50,720
rule then what you do you sum all the

265
00:11:48,830 --> 00:11:52,820
outputs of those<font color="#CCCCCC"> liggett packets and</font>

266
00:11:50,720 --> 00:11:55,280
compare it<font color="#E5E5E5"> to a general threshold that</font>

267
00:11:52,820 --> 00:11:57,500
says this is the amount of reporting

268
00:11:55,280 --> 00:11:59,959
bandwidth that<font color="#E5E5E5"> I am willing</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> accept on</font>

269
00:11:57,500 --> 00:12:01,460
<font color="#CCCCCC">this specific</font><font color="#E5E5E5"> application and then if</font>

270
00:11:59,960 --> 00:12:03,920
you exceed that threshold what you do

271
00:12:01,460 --> 00:12:06,230
you switch the modality on some of the

272
00:12:03,920 --> 00:12:08,360
rules instead<font color="#CCCCCC"> of reporting the packets</font>

273
00:12:06,230 --> 00:12:09,860
now you start reporting the occurrences

274
00:12:08,360 --> 00:12:12,830
of the<font color="#E5E5E5"> matches and so you basically</font>

275
00:12:09,860 --> 00:12:14,930
switch some of the rules off the ones

276
00:12:12,830 --> 00:12:16,529
that are causing the most bandwidth

277
00:12:14,930 --> 00:12:21,329
reporting bandwidth

278
00:12:16,529 --> 00:12:24,930
sort of use and therefore you leave

279
00:12:21,329 --> 00:12:26,998
those those rules that are useful to

280
00:12:24,930 --> 00:12:29,519
find very specific detailed information

281
00:12:26,999 --> 00:12:30,990
in place but you switch off<font color="#E5E5E5"> the ones</font>

282
00:12:29,519 --> 00:12:35,309
that are<font color="#E5E5E5"> actually causing you to lose</font>

283
00:12:30,990 --> 00:12:38,579
bandwidth we haven't implemented that

284
00:12:35,309 --> 00:12:40,670
but you know<font color="#E5E5E5"> we look before feedback to</font>

285
00:12:38,579 --> 00:12:44,579
see whether that seems<font color="#E5E5E5"> like a good idea</font>

286
00:12:40,670 --> 00:12:46,170
the other sort<font color="#E5E5E5"> of approach is</font><font color="#CCCCCC"> that when</font>

287
00:12:44,579 --> 00:12:48,029
you<font color="#E5E5E5"> are</font><font color="#CCCCCC"> thinking a bit per second you</font>

288
00:12:46,170 --> 00:12:49,979
may<font color="#E5E5E5"> want to be very specific about what</font>

289
00:12:48,029 --> 00:12:51,809
you're looking for and in fact it cannot

290
00:12:49,980 --> 00:12:55,610
it may be that is not it's not rule may

291
00:12:51,809 --> 00:12:58,259
not be enough to really be<font color="#CCCCCC"> able to</font>

292
00:12:55,610 --> 00:13:00,149
specify what you're looking for in fact

293
00:12:58,259 --> 00:13:02,939
it could be a<font color="#E5E5E5"> very complex type of</font>

294
00:13:00,149 --> 00:13:04,980
inspection and monitoring sort of

295
00:13:02,939 --> 00:13:07,498
algorithm that somebody may come up with

296
00:13:04,980 --> 00:13:09,990
that may want<font color="#E5E5E5"> to offload most of the</font>

297
00:13:07,499 --> 00:13:12,720
computation in the processor itself at

298
00:13:09,990 --> 00:13:16,189
wire speed and so what we want<font color="#E5E5E5"> to do is</font>

299
00:13:12,720 --> 00:13:18,930
basically allow users to instantiate

300
00:13:16,189 --> 00:13:21,059
application specific modules within the

301
00:13:18,930 --> 00:13:24,959
processor they can take the wire speed

302
00:13:21,059 --> 00:13:26,370
data do processing and then reuse some

303
00:13:24,959 --> 00:13:29,189
of the common functionality into the

304
00:13:26,370 --> 00:13:32,339
processors but basically<font color="#E5E5E5"> allow</font><font color="#CCCCCC"> user to</font>

305
00:13:29,189 --> 00:13:34,829
be very<font color="#E5E5E5"> specific about what they want</font><font color="#CCCCCC"> to</font>

306
00:13:32,339 --> 00:13:36,269
do near the wire and therefore reduce

307
00:13:34,829 --> 00:13:40,829
the amount<font color="#E5E5E5"> of bandwidth that is</font>

308
00:13:36,269 --> 00:13:43,459
necessary to report this information one

309
00:13:40,829 --> 00:13:45,540
of the nice things about this

310
00:13:43,459 --> 00:13:49,800
computational model that we're<font color="#E5E5E5"> using and</font>

311
00:13:45,540 --> 00:13:51,449
the use of fpgas is that the this is an

312
00:13:49,800 --> 00:13:54,410
active networks that yet I mean this<font color="#CCCCCC"> is</font>

313
00:13:51,449 --> 00:13:57,240
not new however active networks was

314
00:13:54,410 --> 00:13:59,059
mostly based on<font color="#E5E5E5"> the idea of using</font>

315
00:13:57,240 --> 00:14:02,639
natural processors to do this and

316
00:13:59,059 --> 00:14:06,120
natural processes of the<font color="#E5E5E5"> problem that</font>

317
00:14:02,639 --> 00:14:07,769
they it's very<font color="#E5E5E5"> hard to predict once you</font>

318
00:14:06,120 --> 00:14:10,290
add a user thread inside a network

319
00:14:07,769 --> 00:14:12,629
processors what is that process is going

320
00:14:10,290 --> 00:14:14,279
<font color="#E5E5E5">to do in an operational environment you</font>

321
00:14:12,629 --> 00:14:17,009
don't have the abilities of the<font color="#E5E5E5"> tools</font>

322
00:14:14,279 --> 00:14:19,800
today to be<font color="#E5E5E5"> able to predict that with</font>

323
00:14:17,009 --> 00:14:22,860
this paradigm you<font color="#CCCCCC"> actually can encode</font>

324
00:14:19,800 --> 00:14:26,490
some user-defined applications in<font color="#CCCCCC"> the</font>

325
00:14:22,860 --> 00:14:29,070
<font color="#E5E5E5">FPGA and because the mapping is static</font>

326
00:14:26,490 --> 00:14:31,670
is done through the<font color="#E5E5E5"> logic synthesis</font>

327
00:14:29,070 --> 00:14:34,770
be able<font color="#CCCCCC"> to predict before you even</font>

328
00:14:31,670 --> 00:14:37,110
instantiate the design in a network that

329
00:14:34,770 --> 00:14:38,520
it meets the timing requirements if it

330
00:14:37,110 --> 00:14:40,410
meets the timing requirements during the

331
00:14:38,520 --> 00:14:43,020
logic synthesis you guarantee<font color="#CCCCCC"> that is</font>

332
00:14:40,410 --> 00:14:44,550
not going to<font color="#E5E5E5"> sort of affect all the</font>

333
00:14:43,020 --> 00:14:47,090
functions<font color="#E5E5E5"> that are within the same</font>

334
00:14:44,550 --> 00:14:50,939
processor so that's a nice sort<font color="#E5E5E5"> of</font>

335
00:14:47,090 --> 00:14:54,330
property that allows you to have much

336
00:14:50,940 --> 00:14:59,340
<font color="#CCCCCC">more</font><font color="#E5E5E5"> high-level confidence of basically</font>

337
00:14:54,330 --> 00:15:01,620
in the adaptability of your system<font color="#E5E5E5"> so</font>

338
00:14:59,340 --> 00:15:03,660
this<font color="#E5E5E5"> is a summary is that you know</font>

339
00:15:01,620 --> 00:15:09,120
<font color="#CCCCCC">you're doing this bottom-up design is</font>

340
00:15:03,660 --> 00:15:14,069
promising so in bringing line speed

341
00:15:09,120 --> 00:15:16,950
acceleration the very low latency seems

342
00:15:14,070 --> 00:15:19,560
to be a<font color="#E5E5E5"> very good feature because allows</font>

343
00:15:16,950 --> 00:15:21,360
this to be<font color="#E5E5E5"> inserted internet in a</font>

344
00:15:19,560 --> 00:15:25,530
network without really limiting the

345
00:15:21,360 --> 00:15:29,010
performance it allows you to easily be

346
00:15:25,530 --> 00:15:31,350
completely transparent and the very

347
00:15:29,010 --> 00:15:34,740
surprising fact about this research that

348
00:15:31,350 --> 00:15:37,710
the 10<font color="#E5E5E5"> Gigabit Ethernet board is not</font><font color="#CCCCCC"> ten</font>

349
00:15:34,740 --> 00:15:41,010
times more<font color="#E5E5E5"> expensive than</font><font color="#CCCCCC"> a 1 gigabit in</font>

350
00:15:37,710 --> 00:15:45,300
terms of computational resources the

351
00:15:41,010 --> 00:15:46,650
scalability of this architecture is much

352
00:15:45,300 --> 00:15:52,010
much better than<font color="#E5E5E5"> I expected when I</font>

353
00:15:46,650 --> 00:15:54,780
started this so it's a very good sort<font color="#E5E5E5"> of</font>

354
00:15:52,010 --> 00:15:57,600
thing that<font color="#CCCCCC"> came</font><font color="#E5E5E5"> out in fact we're</font>

355
00:15:54,780 --> 00:15:59,610
building something a bit for today even

356
00:15:57,600 --> 00:16:03,720
though we<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have limited funds but</font>

357
00:15:59,610 --> 00:16:06,960
since they're the the fabrication and

358
00:16:03,720 --> 00:16:09,540
the components are pretty cheap we're

359
00:16:06,960 --> 00:16:14,970
you know we're you<font color="#CCCCCC"> know with the</font>

360
00:16:09,540 --> 00:16:18,230
resources<font color="#E5E5E5"> to do it basically one of</font><font color="#CCCCCC"> the</font>

361
00:16:14,970 --> 00:16:21,000
big<font color="#E5E5E5"> nut to crack in this research is the</font>

362
00:16:18,230 --> 00:16:23,580
<font color="#CCCCCC">compatibility issue so once you have</font>

363
00:16:21,000 --> 00:16:25,230
<font color="#E5E5E5">people developing different modules that</font>

364
00:16:23,580 --> 00:16:28,560
you<font color="#E5E5E5"> can instantiate in these processors</font>

365
00:16:25,230 --> 00:16:31,830
be an you know natural processor<font color="#E5E5E5"> base or</font>

366
00:16:28,560 --> 00:16:32,920
fpga-based real hard part that<font color="#CCCCCC"> that I'm</font>

367
00:16:31,830 --> 00:16:34,600
interested in

368
00:16:32,920 --> 00:16:36,899
really have an answer<font color="#E5E5E5"> yet is how to</font>

369
00:16:34,600 --> 00:16:38,740
support the composability of different

370
00:16:36,899 --> 00:16:40,240
modules that may interact with each

371
00:16:38,740 --> 00:16:41,889
other so you don't have to reinvent the

372
00:16:40,240 --> 00:16:45,910
wheel every time but<font color="#E5E5E5"> you can reuse we</font>

373
00:16:41,889 --> 00:16:47,889
know<font color="#E5E5E5"> each other's sort of code and and</font>

374
00:16:45,910 --> 00:16:50,500
sort<font color="#E5E5E5"> of composed system much like it</font>

375
00:16:47,889 --> 00:16:53,050
happens in<font color="#E5E5E5"> UNIX you know you have a very</font>

376
00:16:50,500 --> 00:16:58,019
very nice read a compressibility model

377
00:16:53,050 --> 00:17:01,569
which allows you to share different

378
00:16:58,019 --> 00:17:03,070
server applications and and and really

379
00:17:01,570 --> 00:17:05,520
increases productivity and the

380
00:17:03,070 --> 00:17:07,630
scalability of the system anyway I'm

381
00:17:05,520 --> 00:17:09,760
didn't have much time to<font color="#CCCCCC"> go into the</font>

382
00:17:07,630 --> 00:17:11,079
details<font color="#E5E5E5"> but you know please contact me</font>

383
00:17:09,760 --> 00:17:14,079
<font color="#CCCCCC">if you want more information you can</font>

384
00:17:11,079 --> 00:17:16,149
discuss is give<font color="#CCCCCC"> me feedback if you have</font>

385
00:17:14,079 --> 00:17:20,309
ideas what you<font color="#E5E5E5"> want to do with this in</font>

386
00:17:16,150 --> 00:17:20,309
terms of your specific<font color="#E5E5E5"> applications</font>

387
00:17:21,780 --> 00:17:28,168
thank you um we have some time for maybe

388
00:17:24,819 --> 00:17:28,168
a few<font color="#CCCCCC"> questions if there are any</font>

389
00:17:33,000 --> 00:17:37,490
no I Susan yeah thank you

