1
00:00:05,640 --> 00:00:12,219
so in a kind of<font color="#E5E5E5"> analog to lost stars</font>

2
00:00:09,880 --> 00:00:14,980
<font color="#E5E5E5">there's been on the attendee mailing</font>

3
00:00:12,219 --> 00:00:17,590
list some talk<font color="#E5E5E5"> about morning running or</font>

4
00:00:14,980 --> 00:00:19,119
I guess running<font color="#CCCCCC"> anytime I can attest</font>

5
00:00:17,590 --> 00:00:22,210
that it's very beautiful outside<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a</font>

6
00:00:19,119 --> 00:00:25,240
great place<font color="#CCCCCC"> to run so hopefully</font><font color="#E5E5E5"> there'll</font>

7
00:00:22,210 --> 00:00:26,619
be more<font color="#CCCCCC"> I didn't actually pony up I did</font>

8
00:00:25,240 --> 00:00:28,180
go running today<font color="#E5E5E5"> but I didn't say that</font><font color="#CCCCCC"> I</font>

9
00:00:26,619 --> 00:00:30,698
<font color="#CCCCCC">would so I don't know if people did it</font>

10
00:00:28,180 --> 00:00:34,330
and they didn't and<font color="#E5E5E5"> they they</font><font color="#CCCCCC"> organized</font>

11
00:00:30,699 --> 00:00:37,210
separately but I'd say you know<font color="#E5E5E5"> let's</font>

12
00:00:34,330 --> 00:00:39,519
<font color="#E5E5E5">try and keep the outdoor activity going</font>

13
00:00:37,210 --> 00:00:42,160
and<font color="#E5E5E5"> and you know they won't be penalized</font>

14
00:00:39,520 --> 00:00:43,989
<font color="#E5E5E5">or lost stars if you if you don't end up</font>

15
00:00:42,160 --> 00:00:45,279
doing it but if<font color="#E5E5E5"> if</font><font color="#CCCCCC"> people are game</font><font color="#E5E5E5"> for</font>

16
00:00:43,989 --> 00:00:47,500
that there's also a great bike riding

17
00:00:45,280 --> 00:00:49,680
<font color="#CCCCCC">with those kind</font><font color="#E5E5E5"> of rental bikes</font>

18
00:00:47,500 --> 00:00:52,480
<font color="#CCCCCC">stationed right nearby where you can</font>

19
00:00:49,680 --> 00:00:53,110
rent for an hour or<font color="#E5E5E5"> two and drop it off</font>

20
00:00:52,480 --> 00:00:58,660
<font color="#CCCCCC">somewhere else</font>

21
00:00:53,110 --> 00:01:01,149
<font color="#E5E5E5">and anyway</font><font color="#CCCCCC"> next talk is a Peter</font><font color="#E5E5E5"> lock off</font>

22
00:00:58,660 --> 00:01:02,620
talking about<font color="#E5E5E5"> unbreaking things which</font><font color="#CCCCCC"> I</font>

23
00:01:01,149 --> 00:01:10,600
think<font color="#E5E5E5"> everyone here would like to</font>

24
00:01:02,620 --> 00:01:13,000
unbreak something thank you<font color="#E5E5E5"> good morning</font>

25
00:01:10,600 --> 00:01:15,309
<font color="#CCCCCC">one I'm</font><font color="#E5E5E5"> Peter not going to here at</font>

26
00:01:13,000 --> 00:01:19,929
<font color="#E5E5E5">Facebook and the topic of my talk is</font>

27
00:01:15,310 --> 00:01:22,330
debugging<font color="#E5E5E5"> large-scale</font><font color="#CCCCCC"> networks before I</font>

28
00:01:19,929 --> 00:01:25,090
start I'd like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> thank you thank those</font>

29
00:01:22,330 --> 00:01:28,330
people<font color="#E5E5E5"> who maybe start possible</font><font color="#CCCCCC"> the hard</font>

30
00:01:25,090 --> 00:01:32,170
work coding and operations<font color="#E5E5E5"> drop a system</font>

31
00:01:28,330 --> 00:01:34,300
for<font color="#E5E5E5"> the past two years we first</font><font color="#CCCCCC"> started</font>

32
00:01:32,170 --> 00:01:37,090
by<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at the process but people</font>

33
00:01:34,300 --> 00:01:41,500
commonly use to<font color="#CCCCCC"> debug the other issues</font>

34
00:01:37,090 --> 00:01:44,369
in their networks but first let's take a

35
00:01:41,500 --> 00:01:47,860
<font color="#E5E5E5">look at Facebook's network architecture</font>

36
00:01:44,369 --> 00:01:50,200
first one is data center<font color="#CCCCCC"> out at</font><font color="#E5E5E5"> the</font>

37
00:01:47,860 --> 00:01:53,380
center is based<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a cross topology</font>

38
00:01:50,200 --> 00:01:56,560
multiple stages<font color="#E5E5E5"> as you can imagine it</font>

39
00:01:53,380 --> 00:01:58,420
has lots of links and devices<font color="#E5E5E5"> but</font>

40
00:01:56,560 --> 00:02:01,959
<font color="#E5E5E5">otherwise it's a very</font><font color="#CCCCCC"> well-known and</font>

41
00:01:58,420 --> 00:02:05,050
common topology<font color="#E5E5E5"> our specifics is the</font>

42
00:02:01,959 --> 00:02:07,929
fact that the<font color="#CCCCCC"> u.s. BGP for</font><font color="#E5E5E5"> routing only</font>

43
00:02:05,050 --> 00:02:13,629
BGP nothing else and that majority<font color="#E5E5E5"> of</font>

44
00:02:07,929 --> 00:02:16,329
<font color="#CCCCCC">all traffic over 95% is a</font><font color="#E5E5E5"> v6 the things</font>

45
00:02:13,629 --> 00:02:19,299
that make this rock hard to debug<font color="#E5E5E5"> is</font>

46
00:02:16,329 --> 00:02:23,670
very large<font color="#E5E5E5"> equal cost multi pair phenol</font>

47
00:02:19,300 --> 00:02:28,720
at some cases the fan-out<font color="#E5E5E5"> is as large as</font>

48
00:02:23,670 --> 00:02:31,720
120 devices we also have a mix<font color="#E5E5E5"> of</font><font color="#CCCCCC"> LED 2</font>

49
00:02:28,720 --> 00:02:35,440
and layer 3<font color="#CCCCCC"> ecmp</font><font color="#E5E5E5"> together which makes</font>

50
00:02:31,720 --> 00:02:37,990
things<font color="#CCCCCC"> even harder</font><font color="#E5E5E5"> to isolate the</font>

51
00:02:35,440 --> 00:02:40,390
penguin<font color="#E5E5E5"> Network the backbone has much</font>

52
00:02:37,990 --> 00:02:44,020
less devices<font color="#CCCCCC"> from data center but runs</font>

53
00:02:40,390 --> 00:02:46,839
much more<font color="#E5E5E5"> protocols at the heart with</font>

54
00:02:44,020 --> 00:02:51,450
<font color="#CCCCCC">the MPLS for which runs on the backbone</font>

55
00:02:46,840 --> 00:02:54,010
devices these guys run the<font color="#E5E5E5"> ISAs</font><font color="#CCCCCC"> rstp</font>

56
00:02:51,450 --> 00:02:56,799
always protocols you typically expect<font color="#E5E5E5"> in</font>

57
00:02:54,010 --> 00:03:00,239
the backbone<font color="#E5E5E5"> and they</font><font color="#CCCCCC"> use the outer</font>

58
00:02:56,800 --> 00:03:03,130
bandwidth to do traffic<font color="#E5E5E5"> engineering at</font>

59
00:03:00,240 --> 00:03:06,370
the edge of<font color="#CCCCCC"> a</font><font color="#E5E5E5"> network or data center</font>

60
00:03:03,130 --> 00:03:08,980
routers these guys<font color="#E5E5E5"> serve as the IP to</font>

61
00:03:06,370 --> 00:03:13,000
MPLS edge and they connect the<font color="#E5E5E5"> data</font>

62
00:03:08,980 --> 00:03:15,220
centers to<font color="#E5E5E5"> our backbone be two major</font>

63
00:03:13,000 --> 00:03:18,400
challenges<font color="#CCCCCC"> that</font><font color="#E5E5E5"> make this other hard to</font>

64
00:03:15,220 --> 00:03:20,770
debug<font color="#E5E5E5"> is the auto bandwidth which which</font>

65
00:03:18,400 --> 00:03:23,470
keeps changing<font color="#E5E5E5"> the paths</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> LSP</font>

66
00:03:20,770 --> 00:03:26,050
<font color="#E5E5E5">stake in the core and second one the</font>

67
00:03:23,470 --> 00:03:28,930
fact<font color="#CCCCCC"> is we have to</font><font color="#E5E5E5"> use the equal cost</font>

68
00:03:26,050 --> 00:03:31,470
multi path at the edge of<font color="#CCCCCC"> a network when</font>

69
00:03:28,930 --> 00:03:35,020
<font color="#CCCCCC">they place the traffic on</font><font color="#E5E5E5"> the LS</font><font color="#CCCCCC"> piece</font>

70
00:03:31,470 --> 00:03:39,250
<font color="#CCCCCC">all right so how do you commonly debug</font>

71
00:03:35,020 --> 00:03:40,980
<font color="#CCCCCC">these problems well usually we use SNMP</font>

72
00:03:39,250 --> 00:03:44,110
to pull the counters<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the boxes</font>

73
00:03:40,980 --> 00:03:47,560
<font color="#CCCCCC">counters like bucket drops interface</font>

74
00:03:44,110 --> 00:03:50,350
rates<font color="#E5E5E5"> always usual things in cases when</font>

75
00:03:47,560 --> 00:03:52,540
you<font color="#CCCCCC"> can't pull</font><font color="#E5E5E5"> certain or SNMP</font><font color="#CCCCCC"> we have</font>

76
00:03:50,350 --> 00:03:55,390
to use screen scraping<font color="#E5E5E5"> and pull the</font>

77
00:03:52,540 --> 00:03:58,750
unknown counters say internal fabric

78
00:03:55,390 --> 00:04:01,200
drops<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the novel devices</font><font color="#E5E5E5"> but it's</font>

79
00:03:58,750 --> 00:04:05,080
two major problems<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> approach</font>

80
00:04:01,200 --> 00:04:08,739
<font color="#E5E5E5">first of all SNMP</font><font color="#CCCCCC"> NLCS</font><font color="#E5E5E5"> scraping is slow</font>

81
00:04:05,080 --> 00:04:12,250
at the very best we can<font color="#E5E5E5"> get the data at</font>

82
00:04:08,740 --> 00:04:15,459
<font color="#CCCCCC">the periods of</font><font color="#E5E5E5"> 30 seconds and secondly</font>

83
00:04:12,250 --> 00:04:18,040
<font color="#E5E5E5">is not reliable we used to have lots of</font>

84
00:04:15,459 --> 00:04:20,410
issues<font color="#CCCCCC"> that don't</font><font color="#E5E5E5"> show up in the</font>

85
00:04:18,040 --> 00:04:24,850
<font color="#E5E5E5">counters nor SNMP</font>

86
00:04:20,410 --> 00:04:27,010
nor CLI<font color="#E5E5E5"> in cases like this the</font><font color="#CCCCCC"> human</font>

87
00:04:24,850 --> 00:04:30,630
being has<font color="#CCCCCC"> to resort</font><font color="#E5E5E5"> to an end-to-end</font>

88
00:04:27,010 --> 00:04:32,889
<font color="#E5E5E5">buggin we have to run the on host</font><font color="#CCCCCC"> Tools</font>

89
00:04:30,630 --> 00:04:34,210
<font color="#E5E5E5">HP or anything</font>

90
00:04:32,889 --> 00:04:36,819
which allow us<font color="#CCCCCC"> to simulate the</font>

91
00:04:34,210 --> 00:04:39,188
application traffic<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> a h</font>

92
00:04:36,819 --> 00:04:43,180
<font color="#CCCCCC">peeing allows you to inject the spit</font>

93
00:04:39,189 --> 00:04:46,240
bucket<font color="#E5E5E5"> we have to run these</font><font color="#CCCCCC"> guys with a</font>

94
00:04:43,180 --> 00:04:48,400
<font color="#E5E5E5">varying source ports this way</font><font color="#CCCCCC"> you can</font>

95
00:04:46,240 --> 00:04:51,520
explore<font color="#CCCCCC"> the multiple paths of a network</font>

96
00:04:48,400 --> 00:04:52,090
and be overcome with problems<font color="#E5E5E5"> with the</font>

97
00:04:51,520 --> 00:04:56,349
<font color="#E5E5E5">ecmp</font>

98
00:04:52,090 --> 00:04:59,438
<font color="#E5E5E5">and lastly once you see the broken path</font>

99
00:04:56,349 --> 00:05:02,319
<font color="#E5E5E5">you can run a traceroute and isolate the</font>

100
00:04:59,439 --> 00:05:04,810
fault point<font color="#E5E5E5"> and the key conclusion from</font>

101
00:05:02,319 --> 00:05:07,419
this is that<font color="#E5E5E5"> pink and traceroute are</font>

102
00:05:04,810 --> 00:05:10,990
still<font color="#E5E5E5"> very important tools in other</font>

103
00:05:07,419 --> 00:05:13,688
debugging so let's see how these

104
00:05:10,990 --> 00:05:16,629
principles generalize to larger scale<font color="#CCCCCC"> in</font>

105
00:05:13,689 --> 00:05:19,090
this section<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can't talk about net</font>

106
00:05:16,629 --> 00:05:22,449
door<font color="#CCCCCC"> add the system for automatic</font>

107
00:05:19,090 --> 00:05:26,049
end-to-end<font color="#CCCCCC"> fault detection</font><font color="#E5E5E5"> but it's very</font>

108
00:05:22,449 --> 00:05:28,810
hard<font color="#E5E5E5"> the idea is very simple</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have all</font>

109
00:05:26,050 --> 00:05:32,069
the<font color="#E5E5E5"> shares of Facebook</font><font color="#CCCCCC"> and we make</font><font color="#E5E5E5"> some</font>

110
00:05:28,810 --> 00:05:34,960
<font color="#E5E5E5">of his machines run the pinger processes</font>

111
00:05:32,069 --> 00:05:37,779
every machine<font color="#CCCCCC"> Facebook also runs the</font>

112
00:05:34,960 --> 00:05:39,878
<font color="#E5E5E5">special responder process and these guys</font>

113
00:05:37,779 --> 00:05:42,419
work together<font color="#CCCCCC"> by sending the probe</font>

114
00:05:39,879 --> 00:05:46,199
packets across the network<font color="#E5E5E5"> and</font>

115
00:05:42,419 --> 00:05:49,060
collecting be a loss and<font color="#E5E5E5"> round-trip time</font>

116
00:05:46,199 --> 00:05:51,969
once I have<font color="#CCCCCC"> his data</font><font color="#E5E5E5"> while</font><font color="#CCCCCC"> bamboo runs</font>

117
00:05:49,060 --> 00:05:55,960
some<font color="#E5E5E5"> sort of analysis to extract and try</font>

118
00:05:51,969 --> 00:05:59,490
to find the faulty locations<font color="#E5E5E5"> now a few</font>

119
00:05:55,960 --> 00:06:02,799
words<font color="#E5E5E5"> on system evolution it all began</font>

120
00:05:59,490 --> 00:06:04,569
<font color="#E5E5E5">slightly over two years</font><font color="#CCCCCC"> ago and first</font>

121
00:06:02,800 --> 00:06:06,699
implementation<font color="#E5E5E5"> was a very simple</font><font color="#CCCCCC"> python</font>

122
00:06:04,569 --> 00:06:10,629
<font color="#CCCCCC">script which</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the servers and</font>

123
00:06:06,699 --> 00:06:13,330
<font color="#E5E5E5">involved it in command the primary goal</font>

124
00:06:10,629 --> 00:06:16,539
was<font color="#E5E5E5"> to detect the round-trip time</font>

125
00:06:13,330 --> 00:06:19,120
<font color="#E5E5E5">between data centers the second version</font>

126
00:06:16,539 --> 00:06:22,419
<font color="#CCCCCC">was slightly</font><font color="#E5E5E5"> more advanced was a actuate</font>

127
00:06:19,120 --> 00:06:25,509
lynsee and using raw sockets<font color="#E5E5E5"> to inject</font>

128
00:06:22,419 --> 00:06:28,539
asleep packets the idea here<font color="#CCCCCC"> was to</font>

129
00:06:25,509 --> 00:06:31,419
collect packet loss<font color="#E5E5E5"> in the network not</font>

130
00:06:28,539 --> 00:06:34,089
just latencies<font color="#E5E5E5"> we hit some issues with</font>

131
00:06:31,419 --> 00:06:36,370
approach<font color="#E5E5E5"> specifically if used to CP</font>

132
00:06:34,089 --> 00:06:41,080
probing<font color="#E5E5E5"> you have to reset the server</font>

133
00:06:36,370 --> 00:06:42,819
state to avoid via<font color="#CCCCCC"> Sinfonia attack</font><font color="#E5E5E5"> what</font>

134
00:06:41,080 --> 00:06:45,279
happened in this<font color="#E5E5E5"> case is the superior</font>

135
00:06:42,819 --> 00:06:46,240
set was<font color="#CCCCCC"> poking via host monitoring</font>

136
00:06:45,279 --> 00:06:49,930
systems

137
00:06:46,240 --> 00:06:52,150
and had to resort<font color="#CCCCCC"> to using ICMP so IC</font>

138
00:06:49,930 --> 00:06:54,940
was pretty good<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> very</font>

139
00:06:52,150 --> 00:06:56,500
efficient the<font color="#CCCCCC"> kernel response</font><font color="#E5E5E5"> you can</font>

140
00:06:54,940 --> 00:06:58,960
<font color="#E5E5E5">embed</font><font color="#CCCCCC"> timestamps and all those things</font>

141
00:06:56,500 --> 00:07:00,090
<font color="#E5E5E5">but we hit some problems</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> explain</font>

142
00:06:58,960 --> 00:07:03,599
<font color="#E5E5E5">later</font>

143
00:07:00,090 --> 00:07:07,719
<font color="#E5E5E5">the current implementation is udp-based</font>

144
00:07:03,599 --> 00:07:10,659
<font color="#E5E5E5">in this in this approach we have finger</font>

145
00:07:07,720 --> 00:07:13,720
and exponent processes which use UDP<font color="#E5E5E5"> to</font>

146
00:07:10,660 --> 00:07:16,300
attack<font color="#CCCCCC"> end to end packet loss so let's</font>

147
00:07:13,720 --> 00:07:19,120
<font color="#CCCCCC">read</font><font color="#E5E5E5"> these guys as you can expect the</font>

148
00:07:16,300 --> 00:07:23,380
pinger injects probes and responder

149
00:07:19,120 --> 00:07:25,720
<font color="#E5E5E5">replies them back both these guys in bed</font>

150
00:07:23,380 --> 00:07:27,340
time stamps in<font color="#CCCCCC"> the probes so you can</font>

151
00:07:25,720 --> 00:07:30,909
measure<font color="#CCCCCC"> be around 3 but it's a pretty</font>

152
00:07:27,340 --> 00:07:32,979
<font color="#E5E5E5">efficient thing the pinger has very</font>

153
00:07:30,909 --> 00:07:35,590
efficient<font color="#E5E5E5"> since we have much less</font>

154
00:07:32,979 --> 00:07:38,380
<font color="#E5E5E5">fingers and responders we have to pick</font>

155
00:07:35,590 --> 00:07:40,349
at a very high rate<font color="#CCCCCC"> in some cases this</font>

156
00:07:38,380 --> 00:07:43,150
goes up<font color="#E5E5E5"> to 1 million bucks per second</font>

157
00:07:40,349 --> 00:07:45,460
the responders on<font color="#E5E5E5"> the other hand don't</font>

158
00:07:43,150 --> 00:07:49,479
<font color="#CCCCCC">have to be as performant all we have</font><font color="#E5E5E5"> to</font>

159
00:07:45,460 --> 00:07:51,520
do is simply<font color="#E5E5E5"> reply back</font><font color="#CCCCCC"> we'll target we</font>

160
00:07:49,479 --> 00:07:54,070
<font color="#E5E5E5">have multiple traffic</font><font color="#CCCCCC"> classes in a</font>

161
00:07:51,520 --> 00:07:57,070
backbone<font color="#E5E5E5"> and data center so you have to</font>

162
00:07:54,070 --> 00:07:59,530
probe<font color="#E5E5E5"> every class separately that</font><font color="#CCCCCC"> is the</font>

163
00:07:57,070 --> 00:08:04,419
finger has to<font color="#E5E5E5"> inject probes for every</font>

164
00:07:59,530 --> 00:08:06,849
<font color="#E5E5E5">DCP value these guys have an open</font><font color="#CCCCCC"> source</font>

165
00:08:04,419 --> 00:08:10,180
<font color="#E5E5E5">today we hope you find the use of</font><font color="#CCCCCC"> all</font>

166
00:08:06,849 --> 00:08:18,520
<font color="#CCCCCC">it's in C++</font><font color="#E5E5E5"> but I hope you folks</font><font color="#CCCCCC"> like</font>

167
00:08:10,180 --> 00:08:20,919
this<font color="#E5E5E5"> language</font><font color="#CCCCCC"> I know I</font><font color="#E5E5E5"> got a lot</font><font color="#CCCCCC"> ok the</font>

168
00:08:18,520 --> 00:08:24,549
very important aspect<font color="#CCCCCC"> of a system is</font>

169
00:08:20,919 --> 00:08:26,590
placement of pingers and responders will

170
00:08:24,550 --> 00:08:28,659
have a special<font color="#E5E5E5"> Python script which</font><font color="#CCCCCC"> runs</font>

171
00:08:26,590 --> 00:08:31,419
every<font color="#CCCCCC"> five minutes</font><font color="#E5E5E5"> and allocates</font>

172
00:08:28,659 --> 00:08:33,059
machines to be<font color="#E5E5E5"> used as fingers at the</font>

173
00:08:31,419 --> 00:08:37,449
very least<font color="#E5E5E5"> would</font><font color="#CCCCCC"> have to pick up</font><font color="#E5E5E5"> a</font>

174
00:08:33,059 --> 00:08:40,109
cluster<font color="#E5E5E5"> in this data center and allocate</font>

175
00:08:37,450 --> 00:08:42,520
at least<font color="#CCCCCC"> 10 iraq's and</font><font color="#E5E5E5"> every cluster</font>

176
00:08:40,110 --> 00:08:45,070
<font color="#E5E5E5">inside every cluster will pick up</font><font color="#CCCCCC"> sorry</font>

177
00:08:42,520 --> 00:08:48,010
inside every rack will pick at least<font color="#CCCCCC"> two</font>

178
00:08:45,070 --> 00:08:50,860
machines for pinging the idea here is<font color="#CCCCCC"> to</font>

179
00:08:48,010 --> 00:08:53,319
have<font color="#CCCCCC"> a good striping so we don't have a</font>

180
00:08:50,860 --> 00:08:56,589
single rack or<font color="#E5E5E5"> single machine affecting</font>

181
00:08:53,320 --> 00:08:58,430
our<font color="#CCCCCC"> probing the types</font><font color="#E5E5E5"> are easier</font><font color="#CCCCCC"> for</font>

182
00:08:56,589 --> 00:09:01,400
targets<font color="#CCCCCC"> we'll have to pick up</font>

183
00:08:58,430 --> 00:09:04,880
at least two machines for every rack of

184
00:09:01,400 --> 00:09:07,610
servers<font color="#E5E5E5"> at Facebook to pick up targets</font>

185
00:09:04,880 --> 00:09:10,100
<font color="#CCCCCC">we have to consult the host monitoring</font>

186
00:09:07,610 --> 00:09:12,850
system just to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure we don't pick</font>

187
00:09:10,100 --> 00:09:16,280
up machines of low<font color="#E5E5E5"> memory or high CPU or</font>

188
00:09:12,850 --> 00:09:20,050
<font color="#E5E5E5">some other issues this allows us to</font>

189
00:09:16,280 --> 00:09:22,520
<font color="#CCCCCC">reduce the</font><font color="#E5E5E5"> amount of false positives</font>

190
00:09:20,050 --> 00:09:25,609
time stamping is very important part of

191
00:09:22,520 --> 00:09:28,550
<font color="#CCCCCC">nanorod as I mentioned we are in</font><font color="#E5E5E5"> bed</font>

192
00:09:25,610 --> 00:09:31,490
<font color="#E5E5E5">time</font><font color="#CCCCCC"> destiny probes we use your time</font>

193
00:09:28,550 --> 00:09:34,729
stamping<font color="#E5E5E5"> because in UDP you have the</font>

194
00:09:31,490 --> 00:09:36,860
packets<font color="#CCCCCC"> going from app to app and cron</font>

195
00:09:34,730 --> 00:09:40,340
<font color="#CCCCCC">timestamps allow you to</font><font color="#E5E5E5"> eliminate the</font>

196
00:09:36,860 --> 00:09:42,920
delays caused by socket buffers this

197
00:09:40,340 --> 00:09:46,070
data is not<font color="#CCCCCC"> only used for a measuring</font>

198
00:09:42,920 --> 00:09:48,860
<font color="#E5E5E5">pav stretch or congestions but is also</font>

199
00:09:46,070 --> 00:09:51,500
<font color="#CCCCCC">used to outta tune the application</font>

200
00:09:48,860 --> 00:09:53,660
timeouts we collect the samples<font color="#E5E5E5"> every</font>

201
00:09:51,500 --> 00:09:57,530
<font color="#E5E5E5">five minutes</font><font color="#CCCCCC"> and feed them into</font><font color="#E5E5E5"> the</font>

202
00:09:53,660 --> 00:09:59,420
<font color="#CCCCCC">system that tells</font><font color="#E5E5E5"> our apps how soon we</font>

203
00:09:57,530 --> 00:10:05,780
should<font color="#CCCCCC"> timeout</font><font color="#E5E5E5"> when connection doesn't</font>

204
00:09:59,420 --> 00:10:09,410
succeed very often were being asked why

205
00:10:05,780 --> 00:10:11,720
use UDP for<font color="#E5E5E5"> protein indeed majority for</font>

206
00:10:09,410 --> 00:10:13,939
traffic is TCP probably<font color="#E5E5E5"> ninety-nine</font>

207
00:10:11,720 --> 00:10:16,010
<font color="#E5E5E5">point eight percent however as I</font>

208
00:10:13,940 --> 00:10:18,080
<font color="#CCCCCC">mentioned we</font><font color="#E5E5E5"> hit this problem with</font>

209
00:10:16,010 --> 00:10:20,360
<font color="#E5E5E5">disputed sets causing the false</font>

210
00:10:18,080 --> 00:10:22,520
positives to the our management systems

211
00:10:20,360 --> 00:10:25,750
<font color="#E5E5E5">and ICMP</font>

212
00:10:22,520 --> 00:10:29,000
as I<font color="#E5E5E5"> explained</font><font color="#CCCCCC"> Ferber had other</font><font color="#E5E5E5"> issues</font>

213
00:10:25,750 --> 00:10:31,490
you'll be from a perspective of equal

214
00:10:29,000 --> 00:10:34,600
cost multi path<font color="#E5E5E5"> is being treated the</font>

215
00:10:31,490 --> 00:10:37,250
same way<font color="#CCCCCC"> this TCP</font><font color="#E5E5E5"> we use the source port</font>

216
00:10:34,600 --> 00:10:40,490
<font color="#CCCCCC">and so the psyche addresses</font><font color="#E5E5E5"> to load</font>

217
00:10:37,250 --> 00:10:43,460
sharing<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> networks</font><font color="#E5E5E5"> qdp it's very</font>

218
00:10:40,490 --> 00:10:45,470
good<font color="#E5E5E5"> on the host side</font><font color="#CCCCCC"> it's a receiver</font>

219
00:10:43,460 --> 00:10:47,000
<font color="#E5E5E5">size scaling friendly you can very</font>

220
00:10:45,470 --> 00:10:50,840
efficiently load<font color="#CCCCCC"> balance</font><font color="#E5E5E5"> the packets</font>

221
00:10:47,000 --> 00:10:53,480
<font color="#E5E5E5">across multiple</font><font color="#CCCCCC"> CPUs</font><font color="#E5E5E5"> and best of all UDP</font>

222
00:10:50,840 --> 00:10:55,610
allows you to have custom probe<font color="#E5E5E5"> you can</font>

223
00:10:53,480 --> 00:11:00,490
add more fields<font color="#E5E5E5"> and more data to a probe</font>

224
00:10:55,610 --> 00:11:00,490
and this allows for future extensibility

225
00:11:00,580 --> 00:11:06,500
so this<font color="#CCCCCC"> slide</font><font color="#E5E5E5"> some others few</font><font color="#CCCCCC"> issues we</font>

226
00:11:03,380 --> 00:11:09,830
<font color="#E5E5E5">hit while</font><font color="#CCCCCC"> deploying at NORAD first one</font>

227
00:11:06,500 --> 00:11:11,870
is the ICMP as I mentioned<font color="#CCCCCC"> ICT</font><font color="#E5E5E5"> was great</font>

228
00:11:09,830 --> 00:11:15,290
but a major problem<font color="#CCCCCC"> is polarized</font>

229
00:11:11,870 --> 00:11:18,320
in presence of ecmp<font color="#E5E5E5"> normally all</font>

230
00:11:15,290 --> 00:11:20,480
Tobias's<font color="#E5E5E5"> hash the ICMP packets using</font><font color="#CCCCCC"> the</font>

231
00:11:18,320 --> 00:11:23,230
source and destiny

232
00:11:20,480 --> 00:11:26,500
this means you can miss some paths and

233
00:11:23,230 --> 00:11:29,510
only probe a given host on a single path

234
00:11:26,500 --> 00:11:32,900
<font color="#CCCCCC">usage using a UDP</font><font color="#E5E5E5"> allows us to</font><font color="#CCCCCC"> animate</font>

235
00:11:29,510 --> 00:11:36,140
this problem secondly<font color="#E5E5E5"> and surprisingly</font>

236
00:11:32,900 --> 00:11:39,170
<font color="#E5E5E5">we hit some problems of ipv6</font><font color="#CCCCCC"> fee blocker</font>

237
00:11:36,140 --> 00:11:41,750
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> horse being slow in the older</font>

238
00:11:39,170 --> 00:11:44,599
total versions the code that handles<font color="#E5E5E5"> VIP</font>

239
00:11:41,750 --> 00:11:47,570
<font color="#E5E5E5">birkhoff's</font><font color="#CCCCCC"> was pretty inefficient</font><font color="#E5E5E5"> so we</font>

240
00:11:44,600 --> 00:11:49,160
had to move<font color="#CCCCCC"> up to a new kernel where our</font>

241
00:11:47,570 --> 00:11:51,050
engineers had<font color="#E5E5E5"> fixed this problem</font><font color="#CCCCCC"> and</font>

242
00:11:49,160 --> 00:11:54,829
this change<font color="#CCCCCC"> had</font><font color="#E5E5E5"> actually been up</font>

243
00:11:51,050 --> 00:11:57,050
streamed behind<font color="#E5E5E5"> the few boxes which we</font>

244
00:11:54,830 --> 00:11:59,390
have a lot especially<font color="#E5E5E5"> like in a Hadoop</font>

245
00:11:57,050 --> 00:12:01,459
clusters<font color="#CCCCCC"> use</font><font color="#E5E5E5"> the call source of pain</font>

246
00:11:59,390 --> 00:12:04,460
<font color="#E5E5E5">because</font><font color="#CCCCCC"> the responder used to drop</font>

247
00:12:01,460 --> 00:12:06,110
packets<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of hi</font><font color="#E5E5E5"> world however</font><font color="#CCCCCC"> a</font>

248
00:12:04,460 --> 00:12:08,740
<font color="#E5E5E5">very simple fix in responder</font>

249
00:12:06,110 --> 00:12:12,400
specifically using multiple threads and

250
00:12:08,740 --> 00:12:15,290
<font color="#CCCCCC">pinning BAM to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> our assess</font><font color="#E5E5E5"> abuse</font>

251
00:12:12,400 --> 00:12:18,560
practically removed this<font color="#E5E5E5"> obstacle from</font>

252
00:12:15,290 --> 00:12:21,680
<font color="#E5E5E5">production</font><font color="#CCCCCC"> chuck some</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> laudrinha</font><font color="#E5E5E5"> some</font>

253
00:12:18,560 --> 00:12:24,050
<font color="#CCCCCC">leaks braum to be</font><font color="#E5E5E5"> painful since we</font><font color="#CCCCCC"> use</font>

254
00:12:21,680 --> 00:12:26,239
raw sockets for packet injection some

255
00:12:24,050 --> 00:12:27,680
drivers and some<font color="#CCCCCC"> Nix firmware were</font>

256
00:12:26,240 --> 00:12:30,650
started dropping these packets in

257
00:12:27,680 --> 00:12:33,439
transit this caused<font color="#CCCCCC"> us a</font><font color="#E5E5E5"> few very</font>

258
00:12:30,650 --> 00:12:35,420
painful hours<font color="#CCCCCC"> of debugging but</font><font color="#E5E5E5"> in the</font>

259
00:12:33,440 --> 00:12:37,750
end<font color="#CCCCCC"> we simply disable the checksum of</font>

260
00:12:35,420 --> 00:12:39,650
loading<font color="#CCCCCC"> of machines</font><font color="#E5E5E5"> with do pinging</font>

261
00:12:37,750 --> 00:12:42,110
since you only have<font color="#CCCCCC"> a few hundred</font>

262
00:12:39,650 --> 00:12:46,459
<font color="#E5E5E5">machines</font><font color="#CCCCCC"> with ping it doesn't</font><font color="#E5E5E5"> affect the</font>

263
00:12:42,110 --> 00:12:49,760
<font color="#CCCCCC">general with performance alright so now</font>

264
00:12:46,460 --> 00:12:53,330
you see how we produce<font color="#CCCCCC"> probes let's see</font>

265
00:12:49,760 --> 00:12:56,630
how<font color="#E5E5E5"> it process the data for a few major</font>

266
00:12:53,330 --> 00:12:59,270
<font color="#CCCCCC">changes here the total aggregate</font><font color="#E5E5E5"> traffic</font>

267
00:12:56,630 --> 00:13:02,150
from pinging<font color="#E5E5E5"> is on the scale of multiple</font>

268
00:12:59,270 --> 00:13:05,449
<font color="#CCCCCC">honda surgeries per second</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> all</font>

269
00:13:02,150 --> 00:13:09,230
<font color="#CCCCCC">these fingers we have tens of</font><font color="#E5E5E5"> hours of</font>

270
00:13:05,450 --> 00:13:11,450
<font color="#E5E5E5">targets and hundreds of pingers together</font>

271
00:13:09,230 --> 00:13:14,450
this generates very large volume of time

272
00:13:11,450 --> 00:13:17,060
series<font color="#CCCCCC"> to analyze the key inside to</font>

273
00:13:14,450 --> 00:13:20,450
scale this was realizing we don't<font color="#E5E5E5"> really</font>

274
00:13:17,060 --> 00:13:22,760
<font color="#E5E5E5">care about a single host health we</font>

275
00:13:20,450 --> 00:13:25,550
mostly care about a cluster health

276
00:13:22,760 --> 00:13:28,430
to better understand this<font color="#CCCCCC"> let's look</font><font color="#E5E5E5"> at</font>

277
00:13:25,550 --> 00:13:31,189
<font color="#E5E5E5">Facebook sniper here our game at the</font>

278
00:13:28,430 --> 00:13:32,930
front<font color="#E5E5E5"> of</font><font color="#CCCCCC"> a network is our backbone</font><font color="#E5E5E5"> the</font>

279
00:13:31,190 --> 00:13:34,820
backbone connects together of<font color="#CCCCCC"> regions</font>

280
00:13:32,930 --> 00:13:37,550
the region could<font color="#E5E5E5"> be something like</font>

281
00:13:34,820 --> 00:13:39,980
primal<font color="#E5E5E5"> Oregon will have</font><font color="#CCCCCC"> mouths both</font>

282
00:13:37,550 --> 00:13:42,020
physical data centers and also connects

283
00:13:39,980 --> 00:13:45,350
the multiple points of presence<font color="#CCCCCC"> pops</font>

284
00:13:42,020 --> 00:13:47,329
<font color="#E5E5E5">which</font><font color="#CCCCCC"> we have all</font><font color="#E5E5E5"> over the globe in</font>

285
00:13:45,350 --> 00:13:49,910
every region<font color="#E5E5E5"> there are multiple</font>

286
00:13:47,330 --> 00:13:52,820
buildings<font color="#CCCCCC"> or data centers inside</font><font color="#E5E5E5"> each</font>

287
00:13:49,910 --> 00:13:57,050
data center<font color="#CCCCCC"> you have clusters clusters</font>

288
00:13:52,820 --> 00:13:59,060
<font color="#CCCCCC">grouped the racks</font><font color="#E5E5E5"> of servers</font><font color="#CCCCCC"> together as</font>

289
00:13:57,050 --> 00:14:02,300
you<font color="#E5E5E5"> can see the same structure repeats</font>

290
00:13:59,060 --> 00:14:05,989
inside the pub in this design<font color="#E5E5E5"> the</font>

291
00:14:02,300 --> 00:14:10,490
cluster is logical unit<font color="#E5E5E5"> which really</font>

292
00:14:05,990 --> 00:14:12,650
care about so first of all I<font color="#CCCCCC"> mentioned</font>

293
00:14:10,490 --> 00:14:15,380
<font color="#E5E5E5">we don't really care about machine</font>

294
00:14:12,650 --> 00:14:18,680
inside the cluster<font color="#E5E5E5"> but we'll still keep</font>

295
00:14:15,380 --> 00:14:20,750
track of our<font color="#E5E5E5"> health</font><font color="#CCCCCC"> this picture shows</font>

296
00:14:18,680 --> 00:14:23,420
you bail out<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> single cluster with</font>

297
00:14:20,750 --> 00:14:26,450
<font color="#CCCCCC">four</font><font color="#E5E5E5"> cluster switches and</font><font color="#CCCCCC"> non-spell rack</font>

298
00:14:23,420 --> 00:14:29,959
switches inside each cluster we run

299
00:14:26,450 --> 00:14:33,050
<font color="#CCCCCC">pingu</font><font color="#E5E5E5"> processes on some machines but</font><font color="#CCCCCC"> we</font>

300
00:14:29,960 --> 00:14:36,110
actually probe every machine in this

301
00:14:33,050 --> 00:14:38,660
cluster<font color="#E5E5E5"> what this gives us is time</font>

302
00:14:36,110 --> 00:14:41,720
<font color="#E5E5E5">series of packet loss for machine and</font>

303
00:14:38,660 --> 00:14:44,660
per rack<font color="#E5E5E5"> if it's a very</font><font color="#CCCCCC"> large form of</font>

304
00:14:41,720 --> 00:14:48,230
data and this gets stored<font color="#E5E5E5"> into the HBase</font>

305
00:14:44,660 --> 00:14:50,990
<font color="#E5E5E5">back-end this data isn't real-time it</font>

306
00:14:48,230 --> 00:14:53,180
labs it by probably<font color="#E5E5E5"> a few minutes but we</font>

307
00:14:50,990 --> 00:14:56,510
mostly<font color="#CCCCCC"> use this for our historical</font>

308
00:14:53,180 --> 00:15:00,140
investigations now the heart of<font color="#CCCCCC"> the</font>

309
00:14:56,510 --> 00:15:02,750
<font color="#E5E5E5">system building the time series about</font>

310
00:15:00,140 --> 00:15:05,960
cluster<font color="#E5E5E5"> health so imagine you have</font><font color="#CCCCCC"> a</font>

311
00:15:02,750 --> 00:15:09,320
cluster<font color="#E5E5E5"> of machines</font><font color="#CCCCCC"> it's probably tens</font>

312
00:15:05,960 --> 00:15:11,690
of<font color="#CCCCCC"> thousands in one cluster</font><font color="#E5E5E5"> and for each</font>

313
00:15:09,320 --> 00:15:14,630
cluster we<font color="#E5E5E5"> built three separate time</font>

314
00:15:11,690 --> 00:15:17,270
series the first<font color="#E5E5E5"> time series comes from</font>

315
00:15:14,630 --> 00:15:20,660
the data from<font color="#CCCCCC"> pingos in the same data</font>

316
00:15:17,270 --> 00:15:24,050
center<font color="#E5E5E5"> the second time series comes from</font>

317
00:15:20,660 --> 00:15:26,150
<font color="#CCCCCC">a</font><font color="#E5E5E5"> fingers which probe our cluster within</font>

318
00:15:24,050 --> 00:15:29,030
<font color="#CCCCCC">the same region</font><font color="#E5E5E5"> but different at the</font>

319
00:15:26,150 --> 00:15:31,819
center and the for advice time series

320
00:15:29,030 --> 00:15:35,150
comes from the fingers which are<font color="#E5E5E5"> outside</font>

321
00:15:31,820 --> 00:15:36,230
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> region of</font><font color="#E5E5E5"> this cluster so this</font>

322
00:15:35,150 --> 00:15:38,689
gives us 3d

323
00:15:36,230 --> 00:15:41,900
points of view on the given clusters

324
00:15:38,690 --> 00:15:46,220
health<font color="#CCCCCC"> similar the</font><font color="#E5E5E5"> center same region</font>

325
00:15:41,900 --> 00:15:49,310
and from<font color="#CCCCCC"> outside</font><font color="#E5E5E5"> of origin so</font><font color="#CCCCCC"> this</font>

326
00:15:46,220 --> 00:15:52,190
allows us<font color="#CCCCCC"> to perform</font><font color="#E5E5E5"> a very coarse form</font>

327
00:15:49,310 --> 00:15:55,670
of for tessellation<font color="#E5E5E5"> for data which comes</font>

328
00:15:52,190 --> 00:15:58,160
<font color="#E5E5E5">from outside</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> region we measure the</font>

329
00:15:55,670 --> 00:16:00,530
packet loss<font color="#CCCCCC"> end to end and this includes</font>

330
00:15:58,160 --> 00:16:04,310
the loss in<font color="#E5E5E5"> the backbone and data</font>

331
00:16:00,530 --> 00:16:06,079
centers for data which we collect inside

332
00:16:04,310 --> 00:16:09,469
<font color="#E5E5E5">the same region who</font><font color="#CCCCCC"> mesh</font><font color="#E5E5E5"> will be</font>

333
00:16:06,080 --> 00:16:12,440
<font color="#E5E5E5">particles which only effects the</font><font color="#CCCCCC"> devices</font>

334
00:16:09,470 --> 00:16:14,540
in<font color="#CCCCCC"> the same region</font><font color="#E5E5E5"> and lastly to be</font>

335
00:16:12,440 --> 00:16:17,500
probes which come from pingers in same

336
00:16:14,540 --> 00:16:23,630
data center<font color="#CCCCCC"> we try to detect the loss</font>

337
00:16:17,500 --> 00:16:25,280
specifically in the cluster switches now

338
00:16:23,630 --> 00:16:28,189
that we have is<font color="#CCCCCC"> time series</font><font color="#E5E5E5"> the question</font>

339
00:16:25,280 --> 00:16:31,760
is how would<font color="#E5E5E5"> process them the heart of a</font>

340
00:16:28,190 --> 00:16:34,040
system<font color="#CCCCCC"> describe scribe is distribute</font>

341
00:16:31,760 --> 00:16:36,710
<font color="#CCCCCC">logging system but allows multiple</font>

342
00:16:34,040 --> 00:16:37,819
publishers and subscribers<font color="#E5E5E5"> to exchange</font>

343
00:16:36,710 --> 00:16:41,950
data in<font color="#CCCCCC"> real-time</font>

344
00:16:37,820 --> 00:16:44,630
a similar<font color="#E5E5E5"> open-source project is Kefka</font>

345
00:16:41,950 --> 00:16:46,730
<font color="#E5E5E5">Facebook used to have opposite version</font>

346
00:16:44,630 --> 00:16:50,480
of scribe as well but unfortunately<font color="#E5E5E5"> the</font>

347
00:16:46,730 --> 00:16:53,900
support<font color="#E5E5E5"> has been abandoned the pingers</font>

348
00:16:50,480 --> 00:16:56,180
<font color="#E5E5E5">write data to this pipeline and the data</font>

349
00:16:53,900 --> 00:16:58,819
in this<font color="#E5E5E5"> case is a</font><font color="#CCCCCC"> pocket lost time</font>

350
00:16:56,180 --> 00:17:01,420
series and the processors on the other

351
00:16:58,820 --> 00:17:05,180
side read the data<font color="#E5E5E5"> from shards and</font>

352
00:17:01,420 --> 00:17:08,420
process in<font color="#E5E5E5"> real time the most important</font>

353
00:17:05,180 --> 00:17:10,130
property is<font color="#E5E5E5"> that it takes</font><font color="#CCCCCC"> probably a few</font>

354
00:17:08,420 --> 00:17:13,760
seconds to publish and consume<font color="#CCCCCC"> data</font>

355
00:17:10,130 --> 00:17:15,770
inscribe worst case is 20 seconds<font color="#E5E5E5"> but an</font>

356
00:17:13,760 --> 00:17:18,859
average with<font color="#CCCCCC"> sevilla raised of 1/2</font>

357
00:17:15,770 --> 00:17:25,369
seconds<font color="#E5E5E5"> real time here</font><font color="#CCCCCC"> is very important</font>

358
00:17:18,859 --> 00:17:28,219
<font color="#E5E5E5">for a processing</font><font color="#CCCCCC"> ok so let's see how it</font>

359
00:17:25,369 --> 00:17:30,669
process<font color="#E5E5E5"> bulletins here is as I</font><font color="#CCCCCC"> mentioned</font>

360
00:17:28,220 --> 00:17:34,190
the processors are<font color="#E5E5E5"> the data consumers</font>

361
00:17:30,670 --> 00:17:36,770
<font color="#E5E5E5">they collect the packet loss samples</font>

362
00:17:34,190 --> 00:17:39,590
<font color="#E5E5E5">from fingers and for every cluster and</font>

363
00:17:36,770 --> 00:17:42,350
for every proximity scope we build a

364
00:17:39,590 --> 00:17:43,850
separate time series it's very important

365
00:17:42,350 --> 00:17:46,699
for<font color="#E5E5E5"> this time series</font><font color="#CCCCCC"> we don't track</font>

366
00:17:43,850 --> 00:17:49,879
average<font color="#E5E5E5"> we only track multi-person</font><font color="#CCCCCC"> cows</font>

367
00:17:46,700 --> 00:17:52,910
<font color="#E5E5E5">for example the 90 percentile</font>

368
00:17:49,880 --> 00:17:56,059
allows you to eliminate the<font color="#CCCCCC"> jeppesen</font>

369
00:17:52,910 --> 00:17:58,160
outliers<font color="#E5E5E5"> which have noisy data for every</font>

370
00:17:56,059 --> 00:18:01,460
time series<font color="#E5E5E5"> we define two thresholds</font>

371
00:17:58,160 --> 00:18:03,620
raising and falling<font color="#E5E5E5"> this allows you to</font>

372
00:18:01,460 --> 00:18:06,350
alarm<font color="#E5E5E5"> when the time series crosses the</font>

373
00:18:03,620 --> 00:18:08,059
<font color="#CCCCCC">reson threshold and clear belong with</font>

374
00:18:06,350 --> 00:18:10,340
time series goes below<font color="#E5E5E5"> before in</font>

375
00:18:08,059 --> 00:18:12,610
<font color="#CCCCCC">threshold the combination of</font><font color="#E5E5E5"> two</font>

376
00:18:10,340 --> 00:18:15,289
thresholds<font color="#E5E5E5"> allows to eliminate the</font>

377
00:18:12,610 --> 00:18:18,830
whiplash behavior which comes from<font color="#E5E5E5"> a</font>

378
00:18:15,289 --> 00:18:22,190
single<font color="#E5E5E5"> threshold</font><font color="#CCCCCC"> only with this</font><font color="#E5E5E5"> design</font>

379
00:18:18,830 --> 00:18:25,070
we<font color="#E5E5E5"> can detect pocket was a band in less</font>

380
00:18:22,190 --> 00:18:27,400
than 20 seconds average this<font color="#CCCCCC"> tact is</font>

381
00:18:25,070 --> 00:18:30,168
very important because for<font color="#CCCCCC"> operations</font>

382
00:18:27,400 --> 00:18:32,659
<font color="#E5E5E5">it's extremely important</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> able to</font>

383
00:18:30,169 --> 00:18:34,970
<font color="#E5E5E5">respond in</font><font color="#CCCCCC"> real-time I think if you</font>

384
00:18:32,659 --> 00:18:36,770
would actually delay<font color="#CCCCCC"> the alarm</font><font color="#E5E5E5"> by more</font>

385
00:18:34,970 --> 00:18:42,980
<font color="#E5E5E5">than 40 seconds what would be useless</font>

386
00:18:36,770 --> 00:18:46,030
for<font color="#E5E5E5"> our creations the next stop</font><font color="#CCCCCC"> for data</font>

387
00:18:42,980 --> 00:18:49,460
is scuba scuba is a in memory storage

388
00:18:46,030 --> 00:18:53,240
<font color="#E5E5E5">that allows you to process time series</font>

389
00:18:49,460 --> 00:18:55,340
<font color="#CCCCCC">slice-and-dice</font><font color="#E5E5E5"> graph it in</font><font color="#CCCCCC"> real-time</font><font color="#E5E5E5"> but</font>

390
00:18:53,240 --> 00:18:57,820
<font color="#E5E5E5">it's all interactive done by human the</font>

391
00:18:55,340 --> 00:18:59,780
<font color="#E5E5E5">open source equivalent is</font><font color="#CCCCCC"> in flux to be</font>

392
00:18:57,820 --> 00:19:02,510
if you care to use<font color="#E5E5E5"> it it's actually</font>

393
00:18:59,780 --> 00:19:05,178
<font color="#E5E5E5">pretty good</font><font color="#CCCCCC"> with a paper on Scoob</font>

394
00:19:02,510 --> 00:19:08,240
available online<font color="#E5E5E5"> but unfortunately scuba</font>

395
00:19:05,179 --> 00:19:10,400
is an open<font color="#CCCCCC"> source</font><font color="#E5E5E5"> however</font><font color="#CCCCCC"> we found we</font>

396
00:19:08,240 --> 00:19:11,870
found<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that visual analysis is</font>

397
00:19:10,400 --> 00:19:14,240
<font color="#CCCCCC">extremely important part</font><font color="#E5E5E5"> of our</font>

398
00:19:11,870 --> 00:19:16,189
experience<font color="#E5E5E5"> and scuba allows our</font>

399
00:19:14,240 --> 00:19:20,169
engineers<font color="#E5E5E5"> to</font><font color="#CCCCCC"> perform pretty</font>

400
00:19:16,190 --> 00:19:22,970
<font color="#E5E5E5">sophisticated data analysis in real time</font>

401
00:19:20,169 --> 00:19:25,970
<font color="#E5E5E5">false positives is a bane</font><font color="#CCCCCC"> of any</font>

402
00:19:22,970 --> 00:19:28,370
monitoring system in our case we

403
00:19:25,970 --> 00:19:30,679
<font color="#CCCCCC">experience few specific cases which are</font>

404
00:19:28,370 --> 00:19:33,620
<font color="#CCCCCC">probably</font><font color="#E5E5E5"> most important to review first</font>

405
00:19:30,679 --> 00:19:35,570
one is<font color="#E5E5E5"> bad targets or bad machines if</font>

406
00:19:33,620 --> 00:19:38,360
you track packet loss for a cluster of

407
00:19:35,570 --> 00:19:40,879
machines<font color="#E5E5E5"> a single machine which reboots</font>

408
00:19:38,360 --> 00:19:43,100
in this<font color="#CCCCCC"> cluster would cause you a spike</font>

409
00:19:40,880 --> 00:19:43,850
of<font color="#CCCCCC"> packet drops</font><font color="#E5E5E5"> and may cause</font><font color="#CCCCCC"> you a</font>

410
00:19:43,100 --> 00:19:46,879
false<font color="#E5E5E5"> alarm</font>

411
00:19:43,850 --> 00:19:49,549
<font color="#E5E5E5">from a whole</font><font color="#CCCCCC"> cluster this is why the</font>

412
00:19:46,880 --> 00:19:51,919
bigger process implements the outline

413
00:19:49,549 --> 00:19:54,710
filtering and eliminates the bad

414
00:19:51,919 --> 00:19:57,679
machines from<font color="#CCCCCC"> the population before</font><font color="#E5E5E5"> it</font>

415
00:19:54,710 --> 00:20:00,860
<font color="#CCCCCC">submissive analysis slightly more</font>

416
00:19:57,679 --> 00:20:03,770
complicated<font color="#CCCCCC"> is a bad finger problem if</font>

417
00:20:00,860 --> 00:20:06,409
you have a cluster which runs finger

418
00:20:03,770 --> 00:20:08,930
a failure in a faster switch will make

419
00:20:06,410 --> 00:20:11,540
all these guys think<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they see</font>

420
00:20:08,930 --> 00:20:13,760
bucket was everywhere<font color="#E5E5E5"> and it's hard to</font>

421
00:20:11,540 --> 00:20:15,980
remove this<font color="#CCCCCC"> because the population of</font>

422
00:20:13,760 --> 00:20:17,780
<font color="#E5E5E5">fingers is very small and you can't</font>

423
00:20:15,980 --> 00:20:22,040
really define a baseline of packet<font color="#CCCCCC"> loss</font>

424
00:20:17,780 --> 00:20:25,070
<font color="#E5E5E5">to</font><font color="#CCCCCC"> get rid of this wheel more data for</font>

425
00:20:22,040 --> 00:20:27,620
<font color="#E5E5E5">every cluster we collect the packet loss</font>

426
00:20:25,070 --> 00:20:29,740
<font color="#CCCCCC">into</font><font color="#E5E5E5"> this master from with pingers in</font>

427
00:20:27,620 --> 00:20:33,649
the same data<font color="#E5E5E5"> center and same region</font>

428
00:20:29,740 --> 00:20:36,050
this allows us<font color="#E5E5E5"> to</font><font color="#CCCCCC"> identify</font><font color="#E5E5E5"> the bed</font><font color="#CCCCCC"> pin</font>

429
00:20:33,650 --> 00:20:39,590
<font color="#CCCCCC">your clusters proactively and ignore all</font>

430
00:20:36,050 --> 00:20:41,780
data all this<font color="#CCCCCC"> logic is done only at</font>

431
00:20:39,590 --> 00:20:47,419
post-processing stage because a finger

432
00:20:41,780 --> 00:20:50,149
is not aware about<font color="#E5E5E5"> the surrounding quick</font>

433
00:20:47,420 --> 00:20:52,460
summary<font color="#CCCCCC"> botnet NORAD</font><font color="#E5E5E5"> so first of all the</font>

434
00:20:50,150 --> 00:20:54,350
pinger and responder asymmetry that<font color="#CCCCCC"> is</font>

435
00:20:52,460 --> 00:20:56,890
having much less<font color="#CCCCCC"> fingers</font><font color="#E5E5E5"> and responders</font>

436
00:20:54,350 --> 00:20:59,870
<font color="#E5E5E5">was critical to scale data processing</font>

437
00:20:56,890 --> 00:21:02,780
<font color="#E5E5E5">second one being real-time was probably</font>

438
00:20:59,870 --> 00:21:04,280
the most useful property<font color="#E5E5E5"> because</font>

439
00:21:02,780 --> 00:21:08,450
otherwise system would be useless<font color="#E5E5E5"> for</font>

440
00:21:04,280 --> 00:21:11,330
operations<font color="#CCCCCC"> we used the structure for</font>

441
00:21:08,450 --> 00:21:13,100
<font color="#E5E5E5">network to group its</font><font color="#CCCCCC"> Veloz samples in</font>

442
00:21:11,330 --> 00:21:14,960
three categories<font color="#E5E5E5"> which allowed us to</font>

443
00:21:13,100 --> 00:21:18,830
<font color="#E5E5E5">perform some sort of fault isolation</font>

444
00:21:14,960 --> 00:21:22,130
quickly and lastly we had to work out

445
00:21:18,830 --> 00:21:24,290
<font color="#CCCCCC">simple work a lot on removing false</font>

446
00:21:22,130 --> 00:21:28,160
positives<font color="#CCCCCC"> because initially this</font><font color="#E5E5E5"> used to</font>

447
00:21:24,290 --> 00:21:31,220
<font color="#E5E5E5">be a very noisy system okay so detection</font>

448
00:21:28,160 --> 00:21:33,440
is the<font color="#E5E5E5"> first stage by detection we only</font>

449
00:21:31,220 --> 00:21:37,220
know<font color="#CCCCCC"> was a problem but</font><font color="#E5E5E5"> we don't know</font>

450
00:21:33,440 --> 00:21:39,170
where it belongs<font color="#CCCCCC"> to as I mentioned by</font>

451
00:21:37,220 --> 00:21:41,960
using the proximity<font color="#E5E5E5"> scopes we can</font>

452
00:21:39,170 --> 00:21:45,440
already<font color="#E5E5E5"> identify the fault location some</font>

453
00:21:41,960 --> 00:21:48,020
approximation for example if we have a

454
00:21:45,440 --> 00:21:51,770
cluster<font color="#E5E5E5"> and opinions in</font><font color="#CCCCCC"> the Scimitar</font>

455
00:21:48,020 --> 00:21:54,770
<font color="#CCCCCC">Center report no loss while pingers in</font>

456
00:21:51,770 --> 00:21:57,710
the same region<font color="#E5E5E5"> and also the</font><font color="#CCCCCC"> for region</font>

457
00:21:54,770 --> 00:21:59,870
report<font color="#CCCCCC"> cutoff loss</font><font color="#E5E5E5"> we may conclude with</font>

458
00:21:57,710 --> 00:22:02,510
what<font color="#E5E5E5"> three packets are being dropped at</font>

459
00:21:59,870 --> 00:22:06,820
<font color="#CCCCCC">the central level</font><font color="#E5E5E5"> most likely in the</font>

460
00:22:02,510 --> 00:22:09,640
spine switches the next very helpful

461
00:22:06,820 --> 00:22:12,710
<font color="#E5E5E5">functionality is downstream suppression</font>

462
00:22:09,640 --> 00:22:15,920
if we have multiple clusters in same

463
00:22:12,710 --> 00:22:16,880
data center<font color="#CCCCCC"> all firing alarms and we</font>

464
00:22:15,920 --> 00:22:19,370
know they all belong

465
00:22:16,880 --> 00:22:21,350
<font color="#E5E5E5">- same data center</font><font color="#CCCCCC"> who</font><font color="#E5E5E5"> can simply add a</font>

466
00:22:19,370 --> 00:22:24,320
gate this allowed me<font color="#CCCCCC"> to a single folded</font>

467
00:22:21,350 --> 00:22:26,809
<font color="#E5E5E5">beagle our data center it was very</font>

468
00:22:24,320 --> 00:22:29,000
useful because otherwise for a single

469
00:22:26,809 --> 00:22:32,658
issue<font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably see 10x more alarms</font>

470
00:22:29,000 --> 00:22:35,509
we actually<font color="#E5E5E5"> need so combined these two</font>

471
00:22:32,659 --> 00:22:38,299
<font color="#CCCCCC">together</font><font color="#E5E5E5"> allow you to</font><font color="#CCCCCC"> identify the</font>

472
00:22:35,509 --> 00:22:40,639
approximate<font color="#E5E5E5"> fault</font><font color="#CCCCCC"> location for example</font>

473
00:22:38,299 --> 00:22:43,220
<font color="#CCCCCC">you can hear out oh where is a packet</font>

474
00:22:40,639 --> 00:22:46,459
loss probably<font color="#E5E5E5"> in cluster switches in</font>

475
00:22:43,220 --> 00:22:49,700
cluster X unfortunately<font color="#CCCCCC"> we're assuming</font>

476
00:22:46,460 --> 00:22:52,129
<font color="#E5E5E5">device something's left to analyze the</font>

477
00:22:49,700 --> 00:22:54,860
next usual step is going over device

478
00:22:52,129 --> 00:22:57,529
counters the same as an NPN CLI<font color="#CCCCCC"> stop I</font>

479
00:22:54,860 --> 00:23:00,799
mentioned and trying to see if with any

480
00:22:57,529 --> 00:23:02,990
obvious anomaly<font color="#CCCCCC"> bear if this doesn't</font>

481
00:23:00,799 --> 00:23:07,429
tell<font color="#E5E5E5"> you well you have to resort a trace</font>

482
00:23:02,990 --> 00:23:09,799
<font color="#E5E5E5">route in our case it's what usual trace</font>

483
00:23:07,429 --> 00:23:13,009
route<font color="#CCCCCC"> it's the tool we call a bit worse</font>

484
00:23:09,799 --> 00:23:15,740
RT<font color="#CCCCCC"> abt surtsey is a special version of</font>

485
00:23:13,009 --> 00:23:17,629
trace route<font color="#CCCCCC"> bro specifically to explore</font>

486
00:23:15,740 --> 00:23:20,679
multiple paths<font color="#CCCCCC"> and network in parallel</font>

487
00:23:17,629 --> 00:23:24,279
and the defined<font color="#CCCCCC"> falls across this pass</font>

488
00:23:20,679 --> 00:23:26,389
on this<font color="#CCCCCC"> diagram you can see two machines</font>

489
00:23:24,279 --> 00:23:29,679
which<font color="#E5E5E5"> are being connected by closed</font>

490
00:23:26,389 --> 00:23:31,879
networks<font color="#E5E5E5"> and numbered number devices and</font>

491
00:23:29,679 --> 00:23:35,000
with a single<font color="#E5E5E5"> link which has</font><font color="#CCCCCC"> packet</font>

492
00:23:31,879 --> 00:23:38,750
drops<font color="#E5E5E5"> our goal is</font><font color="#CCCCCC"> to identify his pocket</font>

493
00:23:35,000 --> 00:23:40,789
was able to<font color="#CCCCCC"> start C works by injecting</font>

494
00:23:38,750 --> 00:23:43,700
packets with<font color="#CCCCCC"> various source ports in</font>

495
00:23:40,789 --> 00:23:46,850
parallel<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> varying</font><font color="#E5E5E5"> TTL for this</font>

496
00:23:43,700 --> 00:23:49,789
packets as you can expect in a simple

497
00:23:46,850 --> 00:23:53,240
<font color="#CCCCCC">network this</font><font color="#E5E5E5"> packets</font><font color="#CCCCCC"> then out as we go</font>

498
00:23:49,789 --> 00:23:56,090
up a network<font color="#E5E5E5"> and then they fan back in</font>

499
00:23:53,240 --> 00:23:58,730
to a target<font color="#E5E5E5"> what's important is that</font>

500
00:23:56,090 --> 00:24:00,939
every port<font color="#CCCCCC"> takes its own path in the</font>

501
00:23:58,730 --> 00:24:03,860
network<font color="#E5E5E5"> based on the ecmp hashing and</font>

502
00:24:00,940 --> 00:24:07,309
since we<font color="#CCCCCC"> changed the GL we can also</font>

503
00:24:03,860 --> 00:24:09,008
collect packet<font color="#CCCCCC"> those stats</font><font color="#E5E5E5"> per lot for</font>

504
00:24:07,309 --> 00:24:13,519
<font color="#E5E5E5">example the</font><font color="#CCCCCC"> output from this command</font>

505
00:24:09,009 --> 00:24:15,740
would be<font color="#CCCCCC"> 4 different tables were just</font>

506
00:24:13,519 --> 00:24:18,919
two tables show packet loss after hop

507
00:24:15,740 --> 00:24:20,990
number<font color="#E5E5E5"> 10 by comparing this</font><font color="#CCCCCC"> work in</font>

508
00:24:18,919 --> 00:24:24,019
automatic<font color="#CCCCCC"> with pinpoint but a fold is</font>

509
00:24:20,990 --> 00:24:26,539
likely to be between<font color="#E5E5E5"> hops 8 and 10 and</font>

510
00:24:24,019 --> 00:24:30,210
this<font color="#E5E5E5"> is what a bitter salty out was you</font>

511
00:24:26,539 --> 00:24:33,120
<font color="#CCCCCC">of course this approach has limitations</font>

512
00:24:30,210 --> 00:24:36,210
first and major one is the fact that all

513
00:24:33,120 --> 00:24:38,820
<font color="#CCCCCC">devices</font><font color="#E5E5E5"> implement very heavy control</font>

514
00:24:36,210 --> 00:24:43,440
<font color="#E5E5E5">pain policing so you can only run as</font>

515
00:24:38,820 --> 00:24:47,310
much<font color="#E5E5E5"> I trace routes as</font><font color="#CCCCCC"> well just one</font><font color="#E5E5E5"> at</font>

516
00:24:43,440 --> 00:24:49,920
a given moment<font color="#E5E5E5"> secondly this does work</font>

517
00:24:47,310 --> 00:24:52,050
<font color="#E5E5E5">in the backbone</font><font color="#CCCCCC"> network you see in a bad</font>

518
00:24:49,920 --> 00:24:54,360
<font color="#CCCCCC">point we have Auto bandwidth which keeps</font>

519
00:24:52,050 --> 00:24:56,639
changing<font color="#E5E5E5"> the LSB paths and this is why</font>

520
00:24:54,360 --> 00:24:59,870
<font color="#E5E5E5">the Tresor</font><font color="#CCCCCC"> that isn't stable it's hard</font>

521
00:24:56,640 --> 00:25:03,090
to get a packet loss from these outputs

522
00:24:59,870 --> 00:25:06,000
also<font color="#CCCCCC"> in MPLS networks ICT responses</font>

523
00:25:03,090 --> 00:25:08,550
often get tunneled back to destination

524
00:25:06,000 --> 00:25:11,520
before<font color="#CCCCCC"> being sent of a source</font><font color="#E5E5E5"> this also</font>

525
00:25:08,550 --> 00:25:15,060
makes<font color="#E5E5E5"> up is more noisy and lastly we've</font>

526
00:25:11,520 --> 00:25:17,760
seen some important<font color="#CCCCCC"> issues in a trace</font>

527
00:25:15,060 --> 00:25:20,460
route<font color="#E5E5E5"> for example devices from some</font>

528
00:25:17,760 --> 00:25:23,490
vendors respond<font color="#E5E5E5"> with ICMP read messages</font>

529
00:25:20,460 --> 00:25:24,960
from wrong interfaces or replace the

530
00:25:23,490 --> 00:25:28,590
source address with<font color="#E5E5E5"> incorrect value</font>

531
00:25:24,960 --> 00:25:31,320
altogether<font color="#E5E5E5"> despite all of this</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> found</font>

532
00:25:28,590 --> 00:25:34,409
<font color="#E5E5E5">the business useful tool and just why we</font>

533
00:25:31,320 --> 00:25:36,450
decide to open source<font color="#E5E5E5"> as well and this</font>

534
00:25:34,410 --> 00:25:41,880
time it's<font color="#CCCCCC"> in a</font><font color="#E5E5E5"> go to some orphan</font>

535
00:25:36,450 --> 00:25:44,550
language<font color="#CCCCCC"> from C++ okay so the main</font>

536
00:25:41,880 --> 00:25:46,350
conclusion from<font color="#E5E5E5"> fault isolation area is</font>

537
00:25:44,550 --> 00:25:49,200
that it's still evolving<font color="#CCCCCC"> very</font><font color="#E5E5E5"> actively</font>

538
00:25:46,350 --> 00:25:51,600
<font color="#E5E5E5">we don't have full solution for</font><font color="#CCCCCC"> backbone</font>

539
00:25:49,200 --> 00:25:54,150
<font color="#CCCCCC">for tessellation we are actually pretty</font>

540
00:25:51,600 --> 00:25:57,000
<font color="#E5E5E5">good and fault</font><font color="#CCCCCC"> associate in data center</font>

541
00:25:54,150 --> 00:25:59,520
but backbone is still a problem<font color="#E5E5E5"> at the</font>

542
00:25:57,000 --> 00:26:02,940
<font color="#CCCCCC">same time the trace out approach since</font>

543
00:25:59,520 --> 00:26:05,670
<font color="#E5E5E5">they were generic and promising so as I</font>

544
00:26:02,940 --> 00:26:07,070
<font color="#E5E5E5">said still very very active area</font><font color="#CCCCCC"> of</font>

545
00:26:05,670 --> 00:26:09,660
development

546
00:26:07,070 --> 00:26:13,379
<font color="#CCCCCC">okay and last</font><font color="#E5E5E5"> few slides are about</font>

547
00:26:09,660 --> 00:26:15,990
future directions so first of all we<font color="#CCCCCC"> are</font>

548
00:26:13,380 --> 00:26:19,290
investing time in<font color="#E5E5E5"> being able to run our</font>

549
00:26:15,990 --> 00:26:21,120
code or networking boxes we want to run

550
00:26:19,290 --> 00:26:24,000
the same code<font color="#CCCCCC"> we have a new servers on</font>

551
00:26:21,120 --> 00:26:25,620
<font color="#E5E5E5">the devices in the</font><font color="#CCCCCC"> network for this to</font>

552
00:26:24,000 --> 00:26:28,080
happen we need<font color="#E5E5E5"> the box to provide the</font>

553
00:26:25,620 --> 00:26:31,739
POSIX API same sockets

554
00:26:28,080 --> 00:26:35,040
raw sockets<font color="#E5E5E5"> always always just of course</font>

555
00:26:31,740 --> 00:26:38,760
any our<font color="#E5E5E5"> form</font><font color="#CCCCCC"> SDK</font><font color="#E5E5E5"> is highly welcome we</font>

556
00:26:35,040 --> 00:26:40,470
encourage all vendors<font color="#E5E5E5"> to support this as</font>

557
00:26:38,760 --> 00:26:43,020
you<font color="#CCCCCC"> can imagine</font><font color="#E5E5E5"> where our vendors</font><font color="#CCCCCC"> work</font>

558
00:26:40,470 --> 00:26:44,549
<font color="#E5E5E5">already do this of course</font>

559
00:26:43,020 --> 00:26:47,520
the<font color="#CCCCCC"> f</font><font color="#E5E5E5"> boss</font><font color="#CCCCCC"> workers will</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> data</font>

560
00:26:44,549 --> 00:26:50,100
centers<font color="#E5E5E5"> allow</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to do the same</font><font color="#CCCCCC"> pretty</font>

561
00:26:47,520 --> 00:26:52,860
easily<font color="#E5E5E5"> but we still have none of those</font>

562
00:26:50,100 --> 00:26:55,860
devices will rely<font color="#CCCCCC"> on our vendors to</font>

563
00:26:52,860 --> 00:26:58,949
<font color="#E5E5E5">support its functionality the next</font>

564
00:26:55,860 --> 00:27:01,830
feature is streaming telemetry which is

565
00:26:58,950 --> 00:27:04,320
a recently recent innovation which

566
00:27:01,830 --> 00:27:07,230
allows you<font color="#CCCCCC"> to stream the counters from</font>

567
00:27:04,320 --> 00:27:09,270
<font color="#E5E5E5">device in real</font><font color="#CCCCCC"> time it supposed to</font>

568
00:27:07,230 --> 00:27:12,419
<font color="#CCCCCC">polling the device you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> subscribe and</font>

569
00:27:09,270 --> 00:27:14,610
pour time series in real time for

570
00:27:12,419 --> 00:27:17,880
encapsulation<font color="#CCCCCC"> people often use portable</font>

571
00:27:14,610 --> 00:27:20,789
<font color="#E5E5E5">thrift we are fine with fiber who can</font>

572
00:27:17,880 --> 00:27:23,399
pass any data<font color="#E5E5E5"> the key is just</font><font color="#CCCCCC"> to have</font>

573
00:27:20,789 --> 00:27:26,279
this<font color="#E5E5E5"> data</font><font color="#CCCCCC"> available</font><font color="#E5E5E5"> per of course some</font>

574
00:27:23,399 --> 00:27:28,668
limitations but<font color="#CCCCCC"> nonetheless this feature</font>

575
00:27:26,279 --> 00:27:32,549
allows us<font color="#E5E5E5"> to be much much faster in</font>

576
00:27:28,669 --> 00:27:35,580
analyzing the<font color="#E5E5E5"> counters from devices the</font>

577
00:27:32,549 --> 00:27:39,270
last and most exciting<font color="#CCCCCC"> technology is the</font>

578
00:27:35,580 --> 00:27:41,428
inventor<font color="#CCCCCC"> image faith some startups</font><font color="#E5E5E5"> work</font>

579
00:27:39,270 --> 00:27:44,360
<font color="#CCCCCC">on silicon but allows you to embed</font>

580
00:27:41,429 --> 00:27:48,029
device that in packets<font color="#E5E5E5"> is the go through</font>

581
00:27:44,360 --> 00:27:51,270
the great part in our case is being<font color="#CCCCCC"> able</font>

582
00:27:48,029 --> 00:27:53,640
to<font color="#E5E5E5"> capture device ID or a buffer size or</font>

583
00:27:51,270 --> 00:27:56,429
interface counter in a packet as<font color="#E5E5E5"> it</font>

584
00:27:53,640 --> 00:27:58,649
transfer Network<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is where the</font>

585
00:27:56,429 --> 00:28:01,350
UDP header<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> will be prob'ly use</font>

586
00:27:58,649 --> 00:28:04,729
comes really handy<font color="#E5E5E5"> it allows us</font><font color="#CCCCCC"> to</font>

587
00:28:01,350 --> 00:28:07,830
<font color="#CCCCCC">capture this data directly</font><font color="#E5E5E5"> payload and</font>

588
00:28:04,730 --> 00:28:09,929
let all device in app which supports

589
00:28:07,830 --> 00:28:13,949
<font color="#E5E5E5">this functionality report</font><font color="#CCCCCC"> the stats in</font>

590
00:28:09,929 --> 00:28:17,720
<font color="#E5E5E5">real time</font><font color="#CCCCCC"> our ultimate</font><font color="#E5E5E5"> goal is being</font>

591
00:28:13,950 --> 00:28:21,419
able to<font color="#CCCCCC"> detect false</font><font color="#E5E5E5"> in real time</font><font color="#CCCCCC"> and</font>

592
00:28:17,720 --> 00:28:25,039
with that I<font color="#CCCCCC"> compute representation and</font>

593
00:28:21,419 --> 00:28:25,039
reticle questions thank<font color="#E5E5E5"> you</font>

594
00:28:29,870 --> 00:28:35,610
hi Chris would be able<font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> curious</font>

595
00:28:33,270 --> 00:28:38,340
<font color="#E5E5E5">about this approach compared to</font>

596
00:28:35,610 --> 00:28:42,500
approaches where you<font color="#E5E5E5"> great gain</font>

597
00:28:38,340 --> 00:28:45,240
analytics on actual application traffic

598
00:28:42,500 --> 00:28:48,570
<font color="#CCCCCC">compared to generating arbitrary</font>

599
00:28:45,240 --> 00:28:50,910
performance measurement traffic<font color="#CCCCCC"> had you</font>

600
00:28:48,570 --> 00:28:53,250
had had there been in the efforts<font color="#E5E5E5"> to</font>

601
00:28:50,910 --> 00:28:57,390
look into an approach that<font color="#CCCCCC"> doesn't</font>

602
00:28:53,250 --> 00:29:00,870
require packet generation specifically

603
00:28:57,390 --> 00:29:02,820
for monitoring<font color="#E5E5E5"> yep so we do collect this</font>

604
00:29:00,870 --> 00:29:04,709
that's from applications<font color="#E5E5E5"> disappear stats</font>

605
00:29:02,820 --> 00:29:06,899
<font color="#E5E5E5">from every machine it's a little bit</font>

606
00:29:04,710 --> 00:29:08,820
hard to<font color="#E5E5E5"> analyze because it varies</font><font color="#CCCCCC"> with</font>

607
00:29:06,900 --> 00:29:11,190
traffic so<font color="#E5E5E5"> it pause the application</font>

608
00:29:08,820 --> 00:29:13,740
traffic<font color="#CCCCCC"> may</font><font color="#E5E5E5"> be high or low depending on</font>

609
00:29:11,190 --> 00:29:15,870
on the day<font color="#CCCCCC"> the nice part about the</font>

610
00:29:13,740 --> 00:29:17,880
active probing you inject the same

611
00:29:15,870 --> 00:29:20,820
traffic<font color="#E5E5E5"> at all times that</font><font color="#CCCCCC"> same baseline</font>

612
00:29:17,880 --> 00:29:23,100
<font color="#CCCCCC">so it's really easy to build</font><font color="#E5E5E5"> the like</font>

613
00:29:20,820 --> 00:29:26,490
absolute metrics<font color="#E5E5E5"> which is packet loss</font>

614
00:29:23,100 --> 00:29:29,129
which are universal and<font color="#CCCCCC"> III is defined</font>

615
00:29:26,490 --> 00:29:31,950
fresh orbital arms for the for<font color="#CCCCCC"> example</font>

616
00:29:29,130 --> 00:29:34,050
for<font color="#CCCCCC"> this</font><font color="#E5E5E5"> P transmits</font><font color="#CCCCCC"> it's sometimes hard</font>

617
00:29:31,950 --> 00:29:36,300
to<font color="#CCCCCC"> tell what's right fresh hole is</font>

618
00:29:34,050 --> 00:29:38,520
because in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> CB are with us miss</font>

619
00:29:36,300 --> 00:29:41,190
caused by the<font color="#E5E5E5"> application</font><font color="#CCCCCC"> wall or a</font>

620
00:29:38,520 --> 00:29:43,320
shape on the host<font color="#E5E5E5"> not necessarily packet</font>

621
00:29:41,190 --> 00:29:45,780
<font color="#E5E5E5">was in the network but</font><font color="#CCCCCC"> definitely</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font>

622
00:29:43,320 --> 00:29:48,389
looking<font color="#CCCCCC"> miss and often we actually</font>

623
00:29:45,780 --> 00:29:51,360
<font color="#E5E5E5">combine the alarms from our net north</font>

624
00:29:48,390 --> 00:29:52,830
<font color="#E5E5E5">valence from B host based systems just</font>

625
00:29:51,360 --> 00:29:55,070
<font color="#CCCCCC">to make sure this signal is reliable</font>

626
00:29:52,830 --> 00:29:58,889
<font color="#E5E5E5">okay thank you</font>

627
00:29:55,070 --> 00:30:00,629
hey<font color="#CCCCCC"> Eric Rosenberg</font><font color="#E5E5E5"> from n wax</font><font color="#CCCCCC"> I love</font>

628
00:29:58,890 --> 00:30:01,980
that<font color="#E5E5E5"> the tool you put together a</font>

629
00:30:00,630 --> 00:30:04,230
<font color="#CCCCCC">Facebook</font><font color="#E5E5E5"> trace route or whatever that</font>

630
00:30:01,980 --> 00:30:05,880
<font color="#E5E5E5">looks really cool</font><font color="#CCCCCC"> I've been kind of</font>

631
00:30:04,230 --> 00:30:07,680
fighting<font color="#E5E5E5"> some issues with my home ISP</font>

632
00:30:05,880 --> 00:30:09,060
<font color="#CCCCCC">that I could definitely</font><font color="#E5E5E5"> use something</font>

633
00:30:07,680 --> 00:30:12,440
that<font color="#E5E5E5"> changes the source port</font><font color="#CCCCCC"> and such</font>

634
00:30:09,060 --> 00:30:16,200
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I guess my question here is</font>

635
00:30:12,440 --> 00:30:17,940
when going across ecmp paths<font color="#E5E5E5"> let's say</font>

636
00:30:16,200 --> 00:30:19,980
that you're<font color="#E5E5E5"> going from host a to host B</font>

637
00:30:17,940 --> 00:30:22,020
across<font color="#E5E5E5"> just one path that maybe has four</font>

638
00:30:19,980 --> 00:30:24,000
links so<font color="#CCCCCC"> you could potentially hash to</font>

639
00:30:22,020 --> 00:30:26,550
have you found with the vendor

640
00:30:24,000 --> 00:30:28,620
temptations<font color="#E5E5E5"> that if you just use</font><font color="#CCCCCC"> four</font>

641
00:30:26,550 --> 00:30:30,720
different source ports sequentially<font color="#E5E5E5"> that</font>

642
00:30:28,620 --> 00:30:33,120
you'll find all four of those paths<font color="#E5E5E5"> or</font>

643
00:30:30,720 --> 00:30:35,130
do they sometimes use different hashing

644
00:30:33,120 --> 00:30:37,199
methods that you know may may<font color="#E5E5E5"> not you</font>

645
00:30:35,130 --> 00:30:38,520
might not find all the paths or if maybe

646
00:30:37,200 --> 00:30:39,929
you have two layers<font color="#E5E5E5"> deep like you have</font>

647
00:30:38,520 --> 00:30:42,620
one path that's<font color="#E5E5E5"> four links and then</font>

648
00:30:39,929 --> 00:30:45,110
another path deeper than<font color="#CCCCCC"> that that's</font>

649
00:30:42,620 --> 00:30:48,399
<font color="#E5E5E5">why'd how why'd you have to go on source</font>

650
00:30:45,110 --> 00:30:50,270
ports to find all the<font color="#CCCCCC"> different links</font>

651
00:30:48,400 --> 00:30:52,340
implementation on<font color="#E5E5E5"> silicon</font>

652
00:30:50,270 --> 00:30:54,889
implementations<font color="#E5E5E5"> but</font><font color="#CCCCCC"> in general would</font>

653
00:30:52,340 --> 00:30:57,470
have to use at least two<font color="#CCCCCC"> hundred six</font>

654
00:30:54,890 --> 00:31:00,470
ports source ports to explore attacks in

655
00:30:57,470 --> 00:31:03,650
some pretty poor cases with some vendors

656
00:31:00,470 --> 00:31:06,140
it was up<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 1000</font><font color="#E5E5E5"> and even then you</font>

657
00:31:03,650 --> 00:31:09,110
can't satisfy all the paths the sound

658
00:31:06,140 --> 00:31:11,060
<font color="#E5E5E5">platforms have very poor hashing or very</font>

659
00:31:09,110 --> 00:31:13,370
limited<font color="#E5E5E5"> hash</font><font color="#CCCCCC"> capabilities</font><font color="#E5E5E5"> so you</font>

660
00:31:11,060 --> 00:31:15,200
actually have a dead zone sometimes<font color="#E5E5E5"> but</font>

661
00:31:13,370 --> 00:31:18,379
we are<font color="#E5E5E5"> kind of getting rid</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this other</font>

662
00:31:15,200 --> 00:31:20,630
boxes<font color="#E5E5E5"> most of the modern silicon is</font>

663
00:31:18,380 --> 00:31:22,850
pretty good in data center in terms<font color="#E5E5E5"> of</font>

664
00:31:20,630 --> 00:31:25,340
hashing<font color="#E5E5E5"> so it's enough to have like have</font>

665
00:31:22,850 --> 00:31:28,520
a few hive ports to explore all the

666
00:31:25,340 --> 00:31:32,389
<font color="#CCCCCC">armed</font><font color="#E5E5E5"> overpass great thank you very much</font>

667
00:31:28,520 --> 00:31:34,100
thank<font color="#E5E5E5"> you Steve</font><font color="#CCCCCC"> Arak juniper networks</font>

668
00:31:32,390 --> 00:31:36,590
just a related question I was curious<font color="#E5E5E5"> as</font>

669
00:31:34,100 --> 00:31:38,899
to whether you were pre calculating the

670
00:31:36,590 --> 00:31:40,970
source ports<font color="#E5E5E5"> from your pingers or</font>

671
00:31:38,900 --> 00:31:44,180
whether you were just going wide with<font color="#CCCCCC"> a</font>

672
00:31:40,970 --> 00:31:46,640
lot<font color="#E5E5E5"> of source ports and then kind of how</font>

673
00:31:44,180 --> 00:31:50,000
did<font color="#CCCCCC"> you go about gleaning and detecting</font>

674
00:31:46,640 --> 00:31:52,490
the dead spots in<font color="#E5E5E5"> the ecmp path so I'll</font>

675
00:31:50,000 --> 00:31:54,860
be honest<font color="#CCCCCC"> for pingers and</font><font color="#E5E5E5"> net NORAD</font><font color="#CCCCCC"> we</font>

676
00:31:52,490 --> 00:31:56,960
<font color="#CCCCCC">seem to</font><font color="#E5E5E5"> use I'd say like 64</font><font color="#CCCCCC"> source</font><font color="#E5E5E5"> for</font>

677
00:31:54,860 --> 00:31:59,209
<font color="#E5E5E5">sport targets since we have so many</font>

678
00:31:56,960 --> 00:32:01,160
<font color="#CCCCCC">targets you actually explore every</font>

679
00:31:59,210 --> 00:32:03,830
possible path we haven't seen a case

680
00:32:01,160 --> 00:32:07,430
when was<font color="#CCCCCC"> a</font><font color="#E5E5E5"> failure and</font><font color="#CCCCCC"> net north haven't</font>

681
00:32:03,830 --> 00:32:09,949
seen it<font color="#CCCCCC"> the key once you have UDP and a</font>

682
00:32:07,430 --> 00:32:12,260
few pounds<font color="#E5E5E5"> of targets you don't have to</font>

683
00:32:09,950 --> 00:32:14,330
<font color="#E5E5E5">very</font><font color="#CCCCCC"> sore throat</font><font color="#E5E5E5"> very heavily only</font><font color="#CCCCCC"> in a</font>

684
00:32:12,260 --> 00:32:16,070
<font color="#CCCCCC">bitch way salty you have to since we</font>

685
00:32:14,330 --> 00:32:19,129
<font color="#E5E5E5">have only one target you have to have</font>

686
00:32:16,070 --> 00:32:21,530
very<font color="#E5E5E5"> very large</font><font color="#CCCCCC"> port port 10 out to test</font>

687
00:32:19,130 --> 00:32:23,870
every single path<font color="#E5E5E5"> and this gets worse</font><font color="#CCCCCC"> is</font>

688
00:32:21,530 --> 00:32:27,320
<font color="#CCCCCC">your dip in</font><font color="#E5E5E5"> the network but in most</font>

689
00:32:23,870 --> 00:32:29,179
cases UDP and<font color="#E5E5E5"> 64 source ports is pretty</font>

690
00:32:27,320 --> 00:32:29,750
much<font color="#E5E5E5"> enough to detect any path in</font>

691
00:32:29,180 --> 00:32:33,190
<font color="#E5E5E5">network</font>

692
00:32:29,750 --> 00:32:33,190
thank you thank you

693
00:32:34,770 --> 00:32:39,790
Jeff<font color="#E5E5E5"> Rizzo</font><font color="#CCCCCC"> currently unaffiliated so you</font>

694
00:32:37,660 --> 00:32:42,430
<font color="#E5E5E5">mentioned</font><font color="#CCCCCC"> uh one</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the one of the</font>

695
00:32:39,790 --> 00:32:43,960
<font color="#E5E5E5">issues that you had was</font><font color="#CCCCCC"> checksum offload</font>

696
00:32:42,430 --> 00:32:45,880
and<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> wondering</font><font color="#E5E5E5"> if you had any more</font>

697
00:32:43,960 --> 00:32:48,130
information<font color="#CCCCCC"> as to you'd</font><font color="#E5E5E5"> characterize</font>

698
00:32:45,880 --> 00:32:50,110
<font color="#E5E5E5">further was that I wasn't clear whether</font>

699
00:32:48,130 --> 00:32:51,880
<font color="#CCCCCC">that was on the the pingers or the</font>

700
00:32:50,110 --> 00:32:54,100
result boxes and whether there<font color="#CCCCCC"> was</font>

701
00:32:51,880 --> 00:32:56,500
specific<font color="#E5E5E5"> hardware or specific kernels</font>

702
00:32:54,100 --> 00:32:58,659
<font color="#E5E5E5">that gave you issues this was specific</font>

703
00:32:56,500 --> 00:32:59,470
vendor and<font color="#E5E5E5"> driver</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is only with</font>

704
00:32:58,660 --> 00:33:01,150
raw sockets

705
00:32:59,470 --> 00:33:02,980
you see people<font color="#CCCCCC"> know we</font><font color="#E5E5E5"> test this stuff</font>

706
00:33:01,150 --> 00:33:05,260
on normal<font color="#CCCCCC"> circuits it works good too</font>

707
00:33:02,980 --> 00:33:08,020
<font color="#E5E5E5">well once you grow up with raw sockets</font>

708
00:33:05,260 --> 00:33:10,570
<font color="#CCCCCC">you keep some beard</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> graze on people</font>

709
00:33:08,020 --> 00:33:12,280
don't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> test</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> in this</font>

710
00:33:10,570 --> 00:33:17,320
case this was just one<font color="#E5E5E5"> vendor and one</font>

711
00:33:12,280 --> 00:33:19,149
driver<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> great thanks thank you</font><font color="#CCCCCC"> Linux</font>

712
00:33:17,320 --> 00:33:22,960
<font color="#E5E5E5">so the solution that you're describing</font>

713
00:33:19,150 --> 00:33:24,820
seems to try to generate<font color="#CCCCCC"> the data</font><font color="#E5E5E5"> plane</font>

714
00:33:22,960 --> 00:33:28,930
payloads in order to exercise<font color="#E5E5E5"> all</font>

715
00:33:24,820 --> 00:33:30,550
possible paths<font color="#CCCCCC"> did you try looking</font><font color="#E5E5E5"> into</font>

716
00:33:28,930 --> 00:33:32,470
a possibility to export the topology

717
00:33:30,550 --> 00:33:34,990
data to for<font color="#CCCCCC"> example to</font><font color="#E5E5E5"> find out</font>

718
00:33:32,470 --> 00:33:38,770
underlying<font color="#CCCCCC"> ecmp</font><font color="#E5E5E5"> structure or use the</font>

719
00:33:34,990 --> 00:33:40,930
combine that together with certain oomf

720
00:33:38,770 --> 00:33:43,810
in isms another aspect is the overlay

721
00:33:40,930 --> 00:33:46,720
context in this<font color="#E5E5E5"> a correlation of that so</font>

722
00:33:43,810 --> 00:33:50,409
<font color="#CCCCCC">oh is this</font><font color="#E5E5E5"> something that you are</font>

723
00:33:46,720 --> 00:33:53,320
planning<font color="#CCCCCC"> for your far future so we're</font>

724
00:33:50,410 --> 00:33:56,560
definitely<font color="#E5E5E5"> looking to have</font><font color="#CCCCCC"> the deposit</font>

725
00:33:53,320 --> 00:33:58,750
data in the system<font color="#CCCCCC"> the downside is that</font>

726
00:33:56,560 --> 00:34:00,909
<font color="#CCCCCC">it have to</font><font color="#E5E5E5"> collect it right will this</font>

727
00:33:58,750 --> 00:34:02,920
end to an approach you<font color="#CCCCCC"> three got or</font><font color="#E5E5E5"> is a</font>

728
00:34:00,910 --> 00:34:05,320
black box<font color="#CCCCCC"> buts nice part because no</font><font color="#E5E5E5"> we</font>

729
00:34:02,920 --> 00:34:07,750
care about<font color="#E5E5E5"> apology it gives some rough</font>

730
00:34:05,320 --> 00:34:10,540
<font color="#E5E5E5">structure and then say a bitter salty</font>

731
00:34:07,750 --> 00:34:12,760
gives you the wife never topology

732
00:34:10,540 --> 00:34:15,310
it has downsides<font color="#CCCCCC"> right if you will have</font>

733
00:34:12,760 --> 00:34:17,560
a topology<font color="#E5E5E5"> the first hand for topology</font>

734
00:34:15,310 --> 00:34:19,870
<font color="#E5E5E5">would be much</font><font color="#CCCCCC"> easier to correlate for</font>

735
00:34:17,560 --> 00:34:22,570
<font color="#CCCCCC">worcester</font><font color="#E5E5E5"> paths</font><font color="#CCCCCC"> with satchel next step</font>

736
00:34:19,870 --> 00:34:25,480
is being able<font color="#E5E5E5"> to embed the</font><font color="#CCCCCC"> polity data</font>

737
00:34:22,570 --> 00:34:28,679
analysis<font color="#E5E5E5"> but so far just this end-to-end</font>

738
00:34:25,480 --> 00:34:34,690
approach has<font color="#E5E5E5"> been very very successful</font>

739
00:34:28,679 --> 00:34:37,750
<font color="#CCCCCC">thank you</font><font color="#E5E5E5"> he better</font><font color="#CCCCCC"> nicole microsoft</font>

740
00:34:34,690 --> 00:34:39,790
again<font color="#CCCCCC"> um so I wondered</font><font color="#E5E5E5"> I wasn't quite</font>

741
00:34:37,750 --> 00:34:41,590
clear<font color="#E5E5E5"> from your talk exactly how far</font>

742
00:34:39,790 --> 00:34:43,630
you've gone<font color="#CCCCCC"> down the path does it it</font>

743
00:34:41,590 --> 00:34:46,130
does<font color="#CCCCCC"> it say right now this router this</font>

744
00:34:43,630 --> 00:34:48,800
port is<font color="#CCCCCC"> broken or is it just</font>

745
00:34:46,130 --> 00:34:50,900
helps the human debugging right net<font color="#CCCCCC"> Nord</font>

746
00:34:48,800 --> 00:34:53,360
can tell you<font color="#E5E5E5"> we approximate location</font><font color="#CCCCCC"> I</font>

747
00:34:50,900 --> 00:34:55,880
<font color="#CCCCCC">say a spine layer work faster switches</font>

748
00:34:53,360 --> 00:34:58,130
you<font color="#E5E5E5"> have to once after that a</font><font color="#CCCCCC"> B to</font><font color="#E5E5E5"> SRT</font>

749
00:34:55,880 --> 00:35:00,830
to narrow down to a given<font color="#CCCCCC"> device and</font>

750
00:34:58,130 --> 00:35:02,750
<font color="#CCCCCC">link in most cases</font><font color="#E5E5E5"> it gives device</font>

751
00:35:00,830 --> 00:35:05,029
<font color="#E5E5E5">location</font><font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> pretty accurately</font><font color="#CCCCCC"> and</font>

752
00:35:02,750 --> 00:35:07,340
then<font color="#CCCCCC"> you have to look in a</font><font color="#E5E5E5"> box sick or</font>

753
00:35:05,030 --> 00:35:09,230
just<font color="#CCCCCC"> doing a box completely in most</font><font color="#E5E5E5"> case</font>

754
00:35:07,340 --> 00:35:11,600
we don't<font color="#E5E5E5"> even investigate much just</font>

755
00:35:09,230 --> 00:35:13,310
<font color="#CCCCCC">drain a box or replace it</font><font color="#E5E5E5"> because</font>

756
00:35:11,600 --> 00:35:15,860
<font color="#E5E5E5">sometimes debugging</font><font color="#CCCCCC"> base</font><font color="#E5E5E5"> lady</font><font color="#CCCCCC"> time</font>

757
00:35:13,310 --> 00:35:17,480
<font color="#CCCCCC">consuming</font><font color="#E5E5E5"> right it seems like it's on</font>

758
00:35:15,860 --> 00:35:18,950
<font color="#E5E5E5">the way to being a great general purpose</font>

759
00:35:17,480 --> 00:35:20,480
tool that anyone<font color="#E5E5E5"> could put on their</font>

760
00:35:18,950 --> 00:35:22,100
network if it could just<font color="#CCCCCC"> point</font><font color="#E5E5E5"> out oh</font>

761
00:35:20,480 --> 00:35:23,420
you need to<font color="#E5E5E5"> go look at this gift you</font>

762
00:35:22,100 --> 00:35:25,720
know if<font color="#E5E5E5"> trace health is working</font>

763
00:35:23,420 --> 00:35:27,950
perfectly you'll be ideal right

764
00:35:25,720 --> 00:35:29,620
<font color="#CCCCCC">unfortunately</font><font color="#E5E5E5"> implementations still kind</font>

765
00:35:27,950 --> 00:35:34,370
of suboptimal

766
00:35:29,620 --> 00:35:37,730
<font color="#CCCCCC">but we'll work on this thank you David</font>

767
00:35:34,370 --> 00:35:38,990
<font color="#CCCCCC">Barak AT&T</font><font color="#E5E5E5"> did did you restrict this to</font>

768
00:35:37,730 --> 00:35:41,240
<font color="#CCCCCC">unique astra did you consider</font><font color="#E5E5E5"> using</font>

769
00:35:38,990 --> 00:35:43,250
multicast<font color="#CCCCCC"> as a as an approach to explore</font>

770
00:35:41,240 --> 00:35:45,459
the network more yeah I think<font color="#E5E5E5"> sort of</font>

771
00:35:43,250 --> 00:35:47,900
research work<font color="#E5E5E5"> on using multicast for</font>

772
00:35:45,460 --> 00:35:50,180
<font color="#CCCCCC">setting the probes motility in</font><font color="#E5E5E5"> a</font>

773
00:35:47,900 --> 00:35:52,760
desolation unfortunately<font color="#E5E5E5"> unfortunately</font>

774
00:35:50,180 --> 00:35:54,710
we<font color="#E5E5E5"> don't as multicast at all at Facebook</font>

775
00:35:52,760 --> 00:35:56,870
because of complexities in data plane

776
00:35:54,710 --> 00:36:04,270
control plane so it's all unicast<font color="#E5E5E5"> only</font>

777
00:35:56,870 --> 00:36:04,270
thank you thank you thank you

778
00:36:09,780 --> 00:36:16,680
<font color="#CCCCCC">thanks Peter and all our morning</font>

779
00:36:12,400 --> 00:36:19,359
presenters<font color="#E5E5E5"> now</font><font color="#CCCCCC"> they'll</font><font color="#E5E5E5"> be lunches</font><font color="#CCCCCC"> the</font>

780
00:36:16,680 --> 00:36:21,640
<font color="#E5E5E5">newcomers which is an invitational lunch</font>

781
00:36:19,359 --> 00:36:24,460
I mean newcomers should<font color="#E5E5E5"> evolve got an</font>

782
00:36:21,640 --> 00:36:25,990
invitation<font color="#CCCCCC"> and some veterans</font><font color="#E5E5E5"> if you also</font>

783
00:36:24,460 --> 00:36:27,970
got an invitation please<font color="#E5E5E5"> join their</font>

784
00:36:25,990 --> 00:36:31,118
<font color="#CCCCCC">Harbour Island</font><font color="#E5E5E5"> room which i think is off</font>

785
00:36:27,970 --> 00:36:32,770
to<font color="#E5E5E5"> the left as you exit for the rest of</font>

786
00:36:31,119 --> 00:36:35,320
the folks<font color="#E5E5E5"> it's in the pavilion tent</font>

787
00:36:32,770 --> 00:36:39,160
which is outside to the right down a few

788
00:36:35,320 --> 00:36:41,080
stairs and<font color="#E5E5E5"> across a parking lot so we'll</font>

789
00:36:39,160 --> 00:36:44,069
reconvene at 1:30<font color="#E5E5E5"> and hope to</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> you</font>

790
00:36:41,080 --> 00:36:44,069
all soon

