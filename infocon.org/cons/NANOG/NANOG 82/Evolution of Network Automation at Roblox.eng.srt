1
00:00:00,000 --> 00:00:04,240
[Music]

2
00:00:04,240 --> 00:00:05,839
all right thanks everybody for joining

3
00:00:05,839 --> 00:00:06,560
today

4
00:00:06,560 --> 00:00:09,040
uh my name is mayuresh gayathande and

5
00:00:09,040 --> 00:00:11,120
i'm a network reliability engineer

6
00:00:11,120 --> 00:00:14,000
at roblox uh today's talk is gonna be

7
00:00:14,000 --> 00:00:15,360
about network automation

8
00:00:15,360 --> 00:00:17,279
and roblox but i'm gonna try and keep it

9
00:00:17,279 --> 00:00:18,960
a little bit different

10
00:00:18,960 --> 00:00:21,920
uh quite often we hear people coming in

11
00:00:21,920 --> 00:00:23,279
especially on this platform and

12
00:00:23,279 --> 00:00:25,519
showcasing all the awesome tools and

13
00:00:25,519 --> 00:00:28,000
technologies that they've implemented

14
00:00:28,000 --> 00:00:29,599
in order to solve their automation

15
00:00:29,599 --> 00:00:32,000
problems however i feel that there is

16
00:00:32,000 --> 00:00:34,480
generally a lack of conversation around

17
00:00:34,480 --> 00:00:36,480
uh some of the real world problems and

18
00:00:36,480 --> 00:00:37,680
challenges

19
00:00:37,680 --> 00:00:39,840
that one may face in today's production

20
00:00:39,840 --> 00:00:41,280
network environments

21
00:00:41,280 --> 00:00:43,440
and also discussions around some of the

22
00:00:43,440 --> 00:00:45,920
solutions to those problems

23
00:00:45,920 --> 00:00:48,559
so today's talk is not so much a deep

24
00:00:48,559 --> 00:00:50,000
dive into any specific

25
00:00:50,000 --> 00:00:52,239
technology or automation stack that

26
00:00:52,239 --> 00:00:53,840
we've implemented

27
00:00:53,840 --> 00:00:56,160
but it's more of an attempt to highlight

28
00:00:56,160 --> 00:00:58,079
how we and roblox have built

29
00:00:58,079 --> 00:00:59,920
and evolved our automation stack over

30
00:00:59,920 --> 00:01:01,600
the past few years

31
00:01:01,600 --> 00:01:03,520
uh hopefully giving you an understanding

32
00:01:03,520 --> 00:01:05,519
of how that has helped scale

33
00:01:05,519 --> 00:01:07,040
the roblox production network

34
00:01:07,040 --> 00:01:08,799
infrastructure as well

35
00:01:08,799 --> 00:01:11,040
so we will start off by looking at some

36
00:01:11,040 --> 00:01:12,479
of the background on the roblox

37
00:01:12,479 --> 00:01:13,439
infrastructure

38
00:01:13,439 --> 00:01:16,000
from a few years ago and some of our

39
00:01:16,000 --> 00:01:17,600
initial approaches towards getting some

40
00:01:17,600 --> 00:01:20,000
basic automation in place

41
00:01:20,000 --> 00:01:22,000
we will then discuss the problems and

42
00:01:22,000 --> 00:01:23,439
challenges that we faced

43
00:01:23,439 --> 00:01:26,560
with our automation stack

44
00:01:26,560 --> 00:01:28,560
over time as the network grew and the

45
00:01:28,560 --> 00:01:30,560
user demands increase

46
00:01:30,560 --> 00:01:32,880
so this increase in demands it caused us

47
00:01:32,880 --> 00:01:34,320
to rethink our approach

48
00:01:34,320 --> 00:01:37,360
in several key areas and to evolve the

49
00:01:37,360 --> 00:01:38,960
automation stack with the focus

50
00:01:38,960 --> 00:01:41,360
on improving reliability and scalability

51
00:01:41,360 --> 00:01:43,119
as well

52
00:01:43,119 --> 00:01:45,200
along the way we also learned several

53
00:01:45,200 --> 00:01:47,280
key things related to building and

54
00:01:47,280 --> 00:01:48,079
operating

55
00:01:48,079 --> 00:01:51,040
a robust and scalable network automation

56
00:01:51,040 --> 00:01:51,840
stack

57
00:01:51,840 --> 00:01:54,320
and some of these takeaways i'll try and

58
00:01:54,320 --> 00:01:56,479
share towards the end as well

59
00:01:56,479 --> 00:01:57,759
so let's start a little bit of

60
00:01:57,759 --> 00:01:59,520
introduction on what roblox is

61
00:01:59,520 --> 00:02:02,960
for those who don't know uh roblox is a

62
00:02:02,960 --> 00:02:05,200
massively multiplayer online game

63
00:02:05,200 --> 00:02:07,040
creation platform

64
00:02:07,040 --> 00:02:09,840
uh we're not so much a game as we are a

65
00:02:09,840 --> 00:02:10,639
platform

66
00:02:10,639 --> 00:02:13,599
uh and one that allows users to play a

67
00:02:13,599 --> 00:02:15,280
wide variety of

68
00:02:15,280 --> 00:02:17,760
games created by developers as well as

69
00:02:17,760 --> 00:02:19,040
other users

70
00:02:19,040 --> 00:02:22,800
as well the platform also has a a huge

71
00:02:22,800 --> 00:02:24,160
social aspect to it

72
00:02:24,160 --> 00:02:26,160
where friends can get together and host

73
00:02:26,160 --> 00:02:28,080
virtual parties and hangouts and stuff

74
00:02:28,080 --> 00:02:29,680
like that

75
00:02:29,680 --> 00:02:31,760
we have millions of monthly active

76
00:02:31,760 --> 00:02:33,920
players so it's imperative for us

77
00:02:33,920 --> 00:02:36,640
to design uh implement and optimize our

78
00:02:36,640 --> 00:02:38,480
infrastructure systems

79
00:02:38,480 --> 00:02:40,160
including our networks and the

80
00:02:40,160 --> 00:02:41,599
associated automation

81
00:02:41,599 --> 00:02:44,640
uh with scale in mind so

82
00:02:44,640 --> 00:02:46,000
just to start off with a little bit of

83
00:02:46,000 --> 00:02:48,000
background on where we where we started

84
00:02:48,000 --> 00:02:49,680
a few years ago

85
00:02:49,680 --> 00:02:52,959
back in late 2017

86
00:02:52,959 --> 00:02:55,840
2018 we basically operated out of a

87
00:02:55,840 --> 00:02:58,640
single data center in chicago

88
00:02:58,640 --> 00:03:01,440
the network there was built using legacy

89
00:03:01,440 --> 00:03:02,159
hardware

90
00:03:02,159 --> 00:03:04,159
and featured really outdated network

91
00:03:04,159 --> 00:03:05,200
designs

92
00:03:05,200 --> 00:03:08,879
they had one large flat layer 2 network

93
00:03:08,879 --> 00:03:11,040
and this network was really difficult to

94
00:03:11,040 --> 00:03:12,080
troubleshoot

95
00:03:12,080 --> 00:03:14,879
operate on day-to-day basis was hard to

96
00:03:14,879 --> 00:03:16,720
scale and grow this kind of network as

97
00:03:16,720 --> 00:03:17,680
well

98
00:03:17,680 --> 00:03:19,760
so the infrastructure team which was

99
00:03:19,760 --> 00:03:21,680
mainly comprised of just a handful of

100
00:03:21,680 --> 00:03:23,440
folks at that time

101
00:03:23,440 --> 00:03:26,000
was faced with the growing challenge of

102
00:03:26,000 --> 00:03:27,920
overhauling the existing network

103
00:03:27,920 --> 00:03:30,239
and building a more modern cost

104
00:03:30,239 --> 00:03:30,959
effective

105
00:03:30,959 --> 00:03:33,519
and scalable replacement to meet

106
00:03:33,519 --> 00:03:36,720
increased player demands

107
00:03:37,280 --> 00:03:40,400
so a decision was made to build

108
00:03:40,400 --> 00:03:43,040
the roblox cloud this cloud would

109
00:03:43,040 --> 00:03:44,799
initially be comprised of a new data

110
00:03:44,799 --> 00:03:45,280
center

111
00:03:45,280 --> 00:03:47,840
in chicago as well that would have

112
00:03:47,840 --> 00:03:48,959
in-house compute

113
00:03:48,959 --> 00:03:50,640
as well as all the supporting network

114
00:03:50,640 --> 00:03:52,720
infrastructure

115
00:03:52,720 --> 00:03:55,599
as you can see in the picture here

116
00:03:55,599 --> 00:03:57,040
initially we would be starting off with

117
00:03:57,040 --> 00:03:59,519
just a single data center in chicago

118
00:03:59,519 --> 00:04:01,519
and that would later expand out to

119
00:04:01,519 --> 00:04:03,200
multiple data centers

120
00:04:03,200 --> 00:04:05,760
in the u.s as well as several smaller

121
00:04:05,760 --> 00:04:07,680
data centers known as points of presence

122
00:04:07,680 --> 00:04:08,720
or pops

123
00:04:08,720 --> 00:04:10,799
all over the world by the end of

124
00:04:10,799 --> 00:04:13,280
december 2018.

125
00:04:13,280 --> 00:04:15,120
these paths would help us accommodate

126
00:04:15,120 --> 00:04:17,040
future growth and as well as improve

127
00:04:17,040 --> 00:04:19,120
player performance over time

128
00:04:19,120 --> 00:04:21,199
now in order to build and scale this new

129
00:04:21,199 --> 00:04:22,479
network it was

130
00:04:22,479 --> 00:04:24,560
imperative that we took an automation

131
00:04:24,560 --> 00:04:26,320
first approach

132
00:04:26,320 --> 00:04:27,680
the reasons for taking an automation

133
00:04:27,680 --> 00:04:29,360
first approach should be pretty apparent

134
00:04:29,360 --> 00:04:30,560
to most people here

135
00:04:30,560 --> 00:04:32,240
uh and this is because all of our data

136
00:04:32,240 --> 00:04:33,840
centers are going to be built with scale

137
00:04:33,840 --> 00:04:36,240
in mind as well as our pops as well

138
00:04:36,240 --> 00:04:38,000
so that's where the nre team was first

139
00:04:38,000 --> 00:04:39,840
established and our main goal

140
00:04:39,840 --> 00:04:41,840
was to build a scalable robust and

141
00:04:41,840 --> 00:04:44,080
reliable network automation stack

142
00:04:44,080 --> 00:04:46,400
that would facilitate network deployment

143
00:04:46,400 --> 00:04:48,080
as well as help with day-to-day

144
00:04:48,080 --> 00:04:50,240
operations and monitoring

145
00:04:50,240 --> 00:04:52,479
the primary focus was going to be

146
00:04:52,479 --> 00:04:53,280
reliability

147
00:04:53,280 --> 00:04:55,919
as the name suggests and building high

148
00:04:55,919 --> 00:04:58,000
fidelity monitoring and alerting systems

149
00:04:58,000 --> 00:05:01,120
was going to be our number one priority

150
00:05:01,120 --> 00:05:03,039
we also took a very customer-centric

151
00:05:03,039 --> 00:05:04,479
approach

152
00:05:04,479 --> 00:05:05,759
in which we would be working very

153
00:05:05,759 --> 00:05:07,680
closely with other teams inside of our

154
00:05:07,680 --> 00:05:09,680
network engineering organization

155
00:05:09,680 --> 00:05:11,199
in order to gather requirements and to

156
00:05:11,199 --> 00:05:13,440
implement the right solutions

157
00:05:13,440 --> 00:05:16,880
so let's uh discuss a little bit uh on

158
00:05:16,880 --> 00:05:18,240
our initial approach to network

159
00:05:18,240 --> 00:05:20,000
automation

160
00:05:20,000 --> 00:05:21,600
whenever we set out to build a network

161
00:05:21,600 --> 00:05:23,199
automation stack the first thing that

162
00:05:23,199 --> 00:05:24,800
usually needs to be implemented is

163
00:05:24,800 --> 00:05:26,800
what's called a source of truth

164
00:05:26,800 --> 00:05:29,120
it's not a must-have but over time the

165
00:05:29,120 --> 00:05:30,880
advantages of the source of truth

166
00:05:30,880 --> 00:05:33,520
become really apparent and pays off over

167
00:05:33,520 --> 00:05:34,880
time

168
00:05:34,880 --> 00:05:36,960
the source of truth as you most people

169
00:05:36,960 --> 00:05:38,800
already know is essentially a database

170
00:05:38,800 --> 00:05:40,800
that serves as the authority for what

171
00:05:40,800 --> 00:05:42,720
the network needs to look like

172
00:05:42,720 --> 00:05:44,800
the network is usually modeled into this

173
00:05:44,800 --> 00:05:47,120
database and the rest of the tooling

174
00:05:47,120 --> 00:05:49,199
and the framework plugs into this source

175
00:05:49,199 --> 00:05:51,360
of truth in some fashion

176
00:05:51,360 --> 00:05:53,360
so with that in mind we decided to

177
00:05:53,360 --> 00:05:55,840
implement a popular open source solution

178
00:05:55,840 --> 00:05:57,919
called netbox that would serve as a

179
00:05:57,919 --> 00:05:59,680
source of truth

180
00:05:59,680 --> 00:06:02,400
once netbox was stood up we needed a way

181
00:06:02,400 --> 00:06:04,479
for network engineers to express

182
00:06:04,479 --> 00:06:06,720
their network design in a user-friendly

183
00:06:06,720 --> 00:06:07,840
manner

184
00:06:07,840 --> 00:06:11,120
and also a way to translate that intent

185
00:06:11,120 --> 00:06:14,319
into objects inside of networks so with

186
00:06:14,319 --> 00:06:15,600
that in mind we wrote

187
00:06:15,600 --> 00:06:18,960
a tool called the net box builder

188
00:06:18,960 --> 00:06:21,919
it's this is a python tool that provides

189
00:06:21,919 --> 00:06:23,680
a declarative way or used to provide a

190
00:06:23,680 --> 00:06:24,960
declarative way

191
00:06:24,960 --> 00:06:28,639
to translate intent into netbox objects

192
00:06:28,639 --> 00:06:30,960
it also included a resource allocation

193
00:06:30,960 --> 00:06:31,759
engine

194
00:06:31,759 --> 00:06:33,520
that would be able to allocate different

195
00:06:33,520 --> 00:06:35,759
resources required to operate a given

196
00:06:35,759 --> 00:06:37,039
network element

197
00:06:37,039 --> 00:06:39,120
examples of these resources include

198
00:06:39,120 --> 00:06:41,440
autonomous system numbers interfaces ip

199
00:06:41,440 --> 00:06:43,120
addresses and so on

200
00:06:43,120 --> 00:06:44,880
like i mentioned before monitoring and

201
00:06:44,880 --> 00:06:46,960
alerting was the number one priority for

202
00:06:46,960 --> 00:06:47,680
us

203
00:06:47,680 --> 00:06:49,199
and we all know that network devices

204
00:06:49,199 --> 00:06:50,880
will typically expose a large number of

205
00:06:50,880 --> 00:06:51,919
metrics that

206
00:06:51,919 --> 00:06:54,240
need to be collected stored as well as

207
00:06:54,240 --> 00:06:57,280
visualize in a centralized fashion

208
00:06:57,280 --> 00:06:59,120
so we wrote a custom data collection

209
00:06:59,120 --> 00:07:01,039
script that would talk to

210
00:07:01,039 --> 00:07:03,120
network devices using whatever protocols

211
00:07:03,120 --> 00:07:04,960
they would support

212
00:07:04,960 --> 00:07:07,840
the base underlying code base was based

213
00:07:07,840 --> 00:07:08,240
out of

214
00:07:08,240 --> 00:07:11,120
or depend or derived from open source

215
00:07:11,120 --> 00:07:12,720
vendor libraries that were available to

216
00:07:12,720 --> 00:07:14,479
us at that time

217
00:07:14,479 --> 00:07:17,680
we leveraged the telemetry stack

218
00:07:17,680 --> 00:07:21,440
that was already being managed by our

219
00:07:21,440 --> 00:07:23,520
site reliability team uh in our

220
00:07:23,520 --> 00:07:24,880
organization

221
00:07:24,880 --> 00:07:26,639
and that was a big stack which which

222
00:07:26,639 --> 00:07:27,919
basically uh

223
00:07:27,919 --> 00:07:29,680
has different components that you can

224
00:07:29,680 --> 00:07:32,960
use to set up your telemetry pipeline

225
00:07:32,960 --> 00:07:34,800
influx database influx db was the one

226
00:07:34,800 --> 00:07:37,280
that was used for storage

227
00:07:37,280 --> 00:07:40,319
for alerting we generally used

228
00:07:40,319 --> 00:07:42,560
the tick stack as well and alerting was

229
00:07:42,560 --> 00:07:44,400
accomplished by writing text scripts

230
00:07:44,400 --> 00:07:44,960
using

231
00:07:44,960 --> 00:07:47,120
capacitor and dashboards were built

232
00:07:47,120 --> 00:07:49,120
using grafana

233
00:07:49,120 --> 00:07:51,599
the expertise of the sre team at that

234
00:07:51,599 --> 00:07:53,440
time greatly helped us in setting this

235
00:07:53,440 --> 00:07:54,960
up

236
00:07:54,960 --> 00:07:57,199
so besides this there were several other

237
00:07:57,199 --> 00:07:58,080
sources of network

238
00:07:58,080 --> 00:08:00,560
information that needed to be collected

239
00:08:00,560 --> 00:08:01,199
and

240
00:08:01,199 --> 00:08:04,720
stored as well and we used whatever

241
00:08:04,720 --> 00:08:06,960
stack was available to us at that time

242
00:08:06,960 --> 00:08:08,639
which the rest of the organization is

243
00:08:08,639 --> 00:08:09,759
also leveraging

244
00:08:09,759 --> 00:08:12,160
an example of that would be using the

245
00:08:12,160 --> 00:08:13,759
elk stack which is the elastic search

246
00:08:13,759 --> 00:08:14,400
stack for

247
00:08:14,400 --> 00:08:16,800
things like syslog now the second most

248
00:08:16,800 --> 00:08:18,639
important task for us was to implement

249
00:08:18,639 --> 00:08:20,000
a config management and device

250
00:08:20,000 --> 00:08:21,919
provisioning framework that would allow

251
00:08:21,919 --> 00:08:23,440
teams to rapidly deploy

252
00:08:23,440 --> 00:08:26,080
new networking gear as well as to manage

253
00:08:26,080 --> 00:08:27,919
their network device configurations on

254
00:08:27,919 --> 00:08:30,080
day-to-day basis

255
00:08:30,080 --> 00:08:31,759
so the first version of this framework

256
00:08:31,759 --> 00:08:33,919
use ansible which is another popular

257
00:08:33,919 --> 00:08:36,000
open source tool for net remote

258
00:08:36,000 --> 00:08:39,519
network device management network device

259
00:08:39,519 --> 00:08:42,320
properties were stored uh not only

260
00:08:42,320 --> 00:08:43,200
netbox but

261
00:08:43,200 --> 00:08:46,640
also in git this is because

262
00:08:46,640 --> 00:08:48,399
not all of the properties required to

263
00:08:48,399 --> 00:08:49,920
generate a device config would

264
00:08:49,920 --> 00:08:52,000
necessarily fit inside of netbox so as a

265
00:08:52,000 --> 00:08:53,040
result of that

266
00:08:53,040 --> 00:08:55,680
we organize these variables in the form

267
00:08:55,680 --> 00:08:57,200
of group and host variables

268
00:08:57,200 --> 00:08:59,200
for those familiar with ansible inside

269
00:08:59,200 --> 00:09:01,200
of a great repository

270
00:09:01,200 --> 00:09:05,279
and then these variables were used to

271
00:09:05,279 --> 00:09:07,440
create our templates that would be

272
00:09:07,440 --> 00:09:09,279
pushed to network devices for just for

273
00:09:09,279 --> 00:09:11,519
the config management

274
00:09:11,519 --> 00:09:14,000
we tried to use vendor provided and

275
00:09:14,000 --> 00:09:16,320
simple models wherever possible

276
00:09:16,320 --> 00:09:19,440
and we also stood up a open source awx

277
00:09:19,440 --> 00:09:21,519
which is a ui framework for running

278
00:09:21,519 --> 00:09:23,600
ansible jobs

279
00:09:23,600 --> 00:09:25,120
the second part of it was device

280
00:09:25,120 --> 00:09:26,720
provisioning and this was mainly

281
00:09:26,720 --> 00:09:28,480
accomplished at that time by also

282
00:09:28,480 --> 00:09:30,240
running ansible playbooks that would

283
00:09:30,240 --> 00:09:31,920
connect to devices or

284
00:09:31,920 --> 00:09:34,480
console terminals and push out conflicts

285
00:09:34,480 --> 00:09:36,240
that way

286
00:09:36,240 --> 00:09:38,640
the provisioning process also involved

287
00:09:38,640 --> 00:09:40,640
code upgrades or firmware upgrades but

288
00:09:40,640 --> 00:09:42,399
at that time these were mostly performed

289
00:09:42,399 --> 00:09:44,320
manually

290
00:09:44,320 --> 00:09:47,519
we also used a bunch of mostly older

291
00:09:47,519 --> 00:09:48,320
vendor source

292
00:09:48,320 --> 00:09:50,080
console modules to write some of these

293
00:09:50,080 --> 00:09:51,519
playbooks as well

294
00:09:51,519 --> 00:09:53,600
so the above stack it kind of served us

295
00:09:53,600 --> 00:09:55,519
well for the first eight to ten months

296
00:09:55,519 --> 00:09:58,560
in the beginning but as the network grew

297
00:09:58,560 --> 00:10:01,120
some challenges started to surface the

298
00:10:01,120 --> 00:10:02,560
biggest challenge at that time for us

299
00:10:02,560 --> 00:10:03,600
was the limited

300
00:10:03,600 --> 00:10:06,000
resources we had not just in our own

301
00:10:06,000 --> 00:10:06,640
team

302
00:10:06,640 --> 00:10:08,240
but also in some of the other parts

303
00:10:08,240 --> 00:10:10,079
inside of netensch such as the

304
00:10:10,079 --> 00:10:12,560
operations team for example

305
00:10:12,560 --> 00:10:14,560
so this meant that not only did we need

306
00:10:14,560 --> 00:10:16,320
to maintain our own code

307
00:10:16,320 --> 00:10:18,800
but also helps streamline the workflows

308
00:10:18,800 --> 00:10:20,399
of some of these other teams by making

309
00:10:20,399 --> 00:10:21,040
them more

310
00:10:21,040 --> 00:10:23,839
resource efficient so majority of our

311
00:10:23,839 --> 00:10:24,399
time

312
00:10:24,399 --> 00:10:27,200
was spent in keeping the lights on which

313
00:10:27,200 --> 00:10:27,519
meant

314
00:10:27,519 --> 00:10:29,200
fixing bugs and fighting other

315
00:10:29,200 --> 00:10:30,959
scalability issues

316
00:10:30,959 --> 00:10:33,360
in order to ensure that automation was

317
00:10:33,360 --> 00:10:36,399
not the blocker for scaling the network

318
00:10:36,399 --> 00:10:38,240
so at that point we decided to get

319
00:10:38,240 --> 00:10:39,760
together and to rethink the entire

320
00:10:39,760 --> 00:10:42,079
network automation stack

321
00:10:42,079 --> 00:10:43,680
which was to overcome the existing

322
00:10:43,680 --> 00:10:44,880
challenges some of which i'll be

323
00:10:44,880 --> 00:10:46,959
outlining next as well as to enable

324
00:10:46,959 --> 00:10:48,079
other teams

325
00:10:48,079 --> 00:10:50,399
to self-serve some of their basic needs

326
00:10:50,399 --> 00:10:53,279
as much as possible

327
00:10:53,360 --> 00:10:55,200
so let's look at some of the issues we

328
00:10:55,200 --> 00:10:57,040
face with our with our beginning

329
00:10:57,040 --> 00:10:59,519
stack at that time the first challenge

330
00:10:59,519 --> 00:11:02,160
we faced was with netbox itself

331
00:11:02,160 --> 00:11:03,760
so all of our monitoring and config

332
00:11:03,760 --> 00:11:05,920
management tooling was extracting info

333
00:11:05,920 --> 00:11:09,519
from netball using its basic rest apis

334
00:11:09,519 --> 00:11:11,760
the api itself has limited capabilities

335
00:11:11,760 --> 00:11:13,680
and we often found ourselves making

336
00:11:13,680 --> 00:11:14,480
multiple

337
00:11:14,480 --> 00:11:17,760
different api calls post processing and

338
00:11:17,760 --> 00:11:20,000
unifying all the data together inside of

339
00:11:20,000 --> 00:11:21,360
our tooling

340
00:11:21,360 --> 00:11:22,720
and then passing it over to our

341
00:11:22,720 --> 00:11:24,560
templating engine in order to generate

342
00:11:24,560 --> 00:11:27,040
device complaints

343
00:11:27,040 --> 00:11:29,839
secondly uh as the network grew the

344
00:11:29,839 --> 00:11:31,440
network builder that we wrote also

345
00:11:31,440 --> 00:11:33,760
started to show its age

346
00:11:33,760 --> 00:11:36,000
it lacked a proper schema based

347
00:11:36,000 --> 00:11:38,720
validation for expressing network intent

348
00:11:38,720 --> 00:11:40,480
and the code base also lacked any kind

349
00:11:40,480 --> 00:11:42,399
of unit tests

350
00:11:42,399 --> 00:11:45,440
also as the network grew and several new

351
00:11:45,440 --> 00:11:46,880
design revisions

352
00:11:46,880 --> 00:11:49,519
were needed to be maintained at that

353
00:11:49,519 --> 00:11:51,600
time for a given device role

354
00:11:51,600 --> 00:11:53,120
it led to a large number of different

355
00:11:53,120 --> 00:11:54,880
yaml templates and their variations

356
00:11:54,880 --> 00:11:56,399
which made the entire

357
00:11:56,399 --> 00:11:58,160
framework really error prone and very

358
00:11:58,160 --> 00:11:59,680
hard to manage

359
00:11:59,680 --> 00:12:01,839
so uh what did we do to overcome some of

360
00:12:01,839 --> 00:12:03,279
these problems

361
00:12:03,279 --> 00:12:06,560
to overcome the net box api limitations

362
00:12:06,560 --> 00:12:09,519
we built custom unified apis that would

363
00:12:09,519 --> 00:12:10,240
encompass

364
00:12:10,240 --> 00:12:11,920
all of the business logic that was

365
00:12:11,920 --> 00:12:13,519
required to generate the appropriate

366
00:12:13,519 --> 00:12:16,160
config template

367
00:12:16,160 --> 00:12:18,240
this was initially maintained as a

368
00:12:18,240 --> 00:12:21,120
plug-in inside of netbox itself

369
00:12:21,120 --> 00:12:23,360
but as the number of dependencies grew

370
00:12:23,360 --> 00:12:24,959
we quickly realized that the right

371
00:12:24,959 --> 00:12:25,680
approach

372
00:12:25,680 --> 00:12:28,160
was to abstract away some of this

373
00:12:28,160 --> 00:12:30,639
business logic into its own service

374
00:12:30,639 --> 00:12:33,120
that would then talk to networks and

375
00:12:33,120 --> 00:12:35,839
potentially other backends as well

376
00:12:35,839 --> 00:12:38,560
in one direction and on the southbound

377
00:12:38,560 --> 00:12:39,600
side would expose

378
00:12:39,600 --> 00:12:41,680
other pertinent apis for clients and

379
00:12:41,680 --> 00:12:44,320
applications to consume

380
00:12:44,320 --> 00:12:46,639
so this led to the creation of what we

381
00:12:46,639 --> 00:12:48,320
call the network api

382
00:12:48,320 --> 00:12:51,680
which is basically an overarching grpc

383
00:12:51,680 --> 00:12:52,000
based

384
00:12:52,000 --> 00:12:54,480
service that acts as the gateway into

385
00:12:54,480 --> 00:12:56,800
the network

386
00:12:56,800 --> 00:12:58,320
going forward we are hoping to make the

387
00:12:58,320 --> 00:13:00,880
network api the primary way of consuming

388
00:13:00,880 --> 00:13:02,800
any and all data about the roblox

389
00:13:02,800 --> 00:13:04,880
production network

390
00:13:04,880 --> 00:13:07,440
on the other hand we completely reload

391
00:13:07,440 --> 00:13:09,200
the net box builder to release

392
00:13:09,200 --> 00:13:12,639
version 2.0 this version includes a

393
00:13:12,639 --> 00:13:15,120
schema based templating engine

394
00:13:15,120 --> 00:13:17,600
which relies on the same prototype of

395
00:13:17,600 --> 00:13:19,440
schema that the network api service

396
00:13:19,440 --> 00:13:20,959
actually uses

397
00:13:20,959 --> 00:13:22,959
is a lot more simpler and scalable and

398
00:13:22,959 --> 00:13:25,200
manageable than the old one

399
00:13:25,200 --> 00:13:27,200
we also rewrote the resource manager

400
00:13:27,200 --> 00:13:28,959
completely and we added a bunch of

401
00:13:28,959 --> 00:13:30,639
different unit tests to cover the entire

402
00:13:30,639 --> 00:13:32,639
code base

403
00:13:32,639 --> 00:13:34,880
this network builder 2.0 has been

404
00:13:34,880 --> 00:13:36,800
instrumental in helping us build out

405
00:13:36,800 --> 00:13:38,959
some of our newer data centers

406
00:13:38,959 --> 00:13:41,120
and that has helped in our explosive

407
00:13:41,120 --> 00:13:42,959
growth especially last year with the

408
00:13:42,959 --> 00:13:45,599
pandemic

409
00:13:46,560 --> 00:13:48,800
so uh the next problem we had was with

410
00:13:48,800 --> 00:13:51,199
our config management framework

411
00:13:51,199 --> 00:13:53,360
over time we started encountering a lot

412
00:13:53,360 --> 00:13:55,120
of problems with our ansible-based

413
00:13:55,120 --> 00:13:58,800
mod uh models we routinely found

414
00:13:58,800 --> 00:14:01,040
ourselves having to push out configs

415
00:14:01,040 --> 00:14:03,680
to hundreds of devices at once and at

416
00:14:03,680 --> 00:14:05,680
that point ansible just would not scale

417
00:14:05,680 --> 00:14:06,320
for us

418
00:14:06,320 --> 00:14:08,480
especially during times of network

419
00:14:08,480 --> 00:14:10,000
outages when

420
00:14:10,000 --> 00:14:12,160
network engineers need to push out a fix

421
00:14:12,160 --> 00:14:14,079
as soon as possible to all of these

422
00:14:14,079 --> 00:14:17,440
problematic devices perhaps the biggest

423
00:14:17,440 --> 00:14:18,000
problem

424
00:14:18,000 --> 00:14:19,920
was that with just like any other

425
00:14:19,920 --> 00:14:21,760
framework things would break

426
00:14:21,760 --> 00:14:24,480
and ansibles cryptic internals and error

427
00:14:24,480 --> 00:14:25,600
messages

428
00:14:25,600 --> 00:14:28,639
such as the one you see pictured here it

429
00:14:28,639 --> 00:14:30,480
made it really hard for us to debug

430
00:14:30,480 --> 00:14:31,760
problems in production

431
00:14:31,760 --> 00:14:34,240
and this ended up slowing us down

432
00:14:34,240 --> 00:14:36,639
considerably

433
00:14:36,639 --> 00:14:40,000
the awx ui was also struggling to keep

434
00:14:40,000 --> 00:14:40,480
pace

435
00:14:40,480 --> 00:14:42,399
with our some of our more complicated

436
00:14:42,399 --> 00:14:44,639
workflows and job runs

437
00:14:44,639 --> 00:14:46,639
many of these workflows have become

438
00:14:46,639 --> 00:14:48,560
strategically crucial for us at this

439
00:14:48,560 --> 00:14:50,399
point

440
00:14:50,399 --> 00:14:52,399
secondly the console based device

441
00:14:52,399 --> 00:14:54,079
provisioning workflows

442
00:14:54,079 --> 00:14:56,800
which are mostly put together as a quick

443
00:14:56,800 --> 00:14:57,600
hack

444
00:14:57,600 --> 00:14:59,519
but also very bug written in error flow

445
00:14:59,519 --> 00:15:01,040
and they would only work about half of

446
00:15:01,040 --> 00:15:02,800
the times

447
00:15:02,800 --> 00:15:05,120
the code that was following the console

448
00:15:05,120 --> 00:15:07,120
playbooks was also written using

449
00:15:07,120 --> 00:15:09,120
the old like pxpect style shell

450
00:15:09,120 --> 00:15:10,720
interactions with the device as you can

451
00:15:10,720 --> 00:15:12,480
see pictured here

452
00:15:12,480 --> 00:15:16,079
which made it even more error-prone

453
00:15:16,240 --> 00:15:18,480
the device provisioning process it also

454
00:15:18,480 --> 00:15:19,920
lacked any kind of checks

455
00:15:19,920 --> 00:15:22,639
and validations and this ultimately

456
00:15:22,639 --> 00:15:24,480
started impacting the rate at which we

457
00:15:24,480 --> 00:15:24,880
could

458
00:15:24,880 --> 00:15:28,000
turn off new pops and new data center

459
00:15:28,000 --> 00:15:30,240
parts inside inside of a production

460
00:15:30,240 --> 00:15:32,639
network

461
00:15:33,360 --> 00:15:35,759
so to solve the ansible problem we moved

462
00:15:35,759 --> 00:15:37,600
to a pure python based framework called

463
00:15:37,600 --> 00:15:38,720
non-layer

464
00:15:38,720 --> 00:15:40,959
this provided us with basic inventory

465
00:15:40,959 --> 00:15:43,440
management capabilities

466
00:15:43,440 --> 00:15:45,279
the base functionality for us was not

467
00:15:45,279 --> 00:15:47,839
enough so we expanded on this base

468
00:15:47,839 --> 00:15:49,839
and built an entire operational tooling

469
00:15:49,839 --> 00:15:52,320
framework on top

470
00:15:52,320 --> 00:15:54,880
this would be a modular system that

471
00:15:54,880 --> 00:15:56,079
would be a collection of different

472
00:15:56,079 --> 00:15:57,120
python scripts

473
00:15:57,120 --> 00:15:58,720
that would help us with various

474
00:15:58,720 --> 00:16:00,320
operational needs including config

475
00:16:00,320 --> 00:16:03,360
management and device provisioning

476
00:16:03,360 --> 00:16:05,120
in order to maintain some of the

477
00:16:05,120 --> 00:16:07,600
familiar workflows as before

478
00:16:07,600 --> 00:16:09,600
we retain some of the good parts of

479
00:16:09,600 --> 00:16:10,800
ansible

480
00:16:10,800 --> 00:16:12,800
namely the same filtering and variable

481
00:16:12,800 --> 00:16:14,560
management capabilities that ansible

482
00:16:14,560 --> 00:16:16,480
provides

483
00:16:16,480 --> 00:16:18,560
for device provisioning we move to zero

484
00:16:18,560 --> 00:16:19,680
touch provisioning

485
00:16:19,680 --> 00:16:22,399
which is very similar to pixi booting it

486
00:16:22,399 --> 00:16:24,240
uses a dhcp-based bootstrapping

487
00:16:24,240 --> 00:16:27,279
mechanism for network devices

488
00:16:27,279 --> 00:16:29,839
we leveraged the non-new framework to

489
00:16:29,839 --> 00:16:30,320
build an

490
00:16:30,320 --> 00:16:32,560
entire end-to-end workflow for device

491
00:16:32,560 --> 00:16:33,680
provisioning

492
00:16:33,680 --> 00:16:35,199
that would stop that was complete with

493
00:16:35,199 --> 00:16:38,240
both pre and post validation checks

494
00:16:38,240 --> 00:16:41,120
and finally because the ui based push

495
00:16:41,120 --> 00:16:42,639
button workflows have become

496
00:16:42,639 --> 00:16:44,880
so crucial for us in enabling us to move

497
00:16:44,880 --> 00:16:46,079
fast

498
00:16:46,079 --> 00:16:48,800
we wrote a job runner system complete

499
00:16:48,800 --> 00:16:50,000
with the web ui that

500
00:16:50,000 --> 00:16:51,519
allowed running any of the non-new

501
00:16:51,519 --> 00:16:54,959
scripts using a web interface

502
00:16:54,959 --> 00:16:57,279
so this framework has also again helped

503
00:16:57,279 --> 00:16:58,000
us

504
00:16:58,000 --> 00:16:59,600
grow our scalar networks in a rapid

505
00:16:59,600 --> 00:17:01,040
place to accommodate

506
00:17:01,040 --> 00:17:04,160
their growth throughout the globe so as

507
00:17:04,160 --> 00:17:06,559
as you may have noticed the common theme

508
00:17:06,559 --> 00:17:07,919
so far has been that

509
00:17:07,919 --> 00:17:11,199
we regularly challenge the status quo

510
00:17:11,199 --> 00:17:13,839
we solicited regular customer feedback

511
00:17:13,839 --> 00:17:16,079
from all the stakeholders and consumers

512
00:17:16,079 --> 00:17:17,439
of our tooling

513
00:17:17,439 --> 00:17:19,359
and wherever necessary we came out with

514
00:17:19,359 --> 00:17:21,280
improved versions of these tools and

515
00:17:21,280 --> 00:17:22,480
frameworks

516
00:17:22,480 --> 00:17:25,359
that incorporated the best of the old by

517
00:17:25,359 --> 00:17:27,039
trimming out the worst of the old and

518
00:17:27,039 --> 00:17:29,440
adding new features as well

519
00:17:29,440 --> 00:17:30,799
now let's talk a little bit about

520
00:17:30,799 --> 00:17:33,200
monitoring and alerting

521
00:17:33,200 --> 00:17:35,440
our initial approach to alerting was

522
00:17:35,440 --> 00:17:36,320
simply sending

523
00:17:36,320 --> 00:17:38,000
everything down to a single slack

524
00:17:38,000 --> 00:17:39,520
channel all of our alerts would be

525
00:17:39,520 --> 00:17:41,760
dumped into a slack channel

526
00:17:41,760 --> 00:17:43,760
so needless to say as the network grew

527
00:17:43,760 --> 00:17:45,840
and the volume of alerts increased it

528
00:17:45,840 --> 00:17:47,919
became really hard for us to distinguish

529
00:17:47,919 --> 00:17:51,360
the noise from the legitimate alerts

530
00:17:51,360 --> 00:17:53,679
given that we had a very small team and

531
00:17:53,679 --> 00:17:55,840
a single person on call at any given

532
00:17:55,840 --> 00:17:56,960
time

533
00:17:56,960 --> 00:18:00,480
this quickly led to alert fatigue

534
00:18:00,480 --> 00:18:03,200
we also lack unified view of all of our

535
00:18:03,200 --> 00:18:04,960
alerts coming in from our different

536
00:18:04,960 --> 00:18:06,640
sources

537
00:18:06,640 --> 00:18:08,240
and we also lack the ability to take

538
00:18:08,240 --> 00:18:10,480
specific actions on alerts

539
00:18:10,480 --> 00:18:12,400
examples of these actions include

540
00:18:12,400 --> 00:18:14,720
acknowledging an alert clearing an alert

541
00:18:14,720 --> 00:18:17,919
suppressing an alert stuff like that

542
00:18:17,919 --> 00:18:19,760
at any given time the network also

543
00:18:19,760 --> 00:18:21,280
generates a very high volume of

544
00:18:21,280 --> 00:18:22,480
repetitive alerts

545
00:18:22,480 --> 00:18:24,320
that can easily be managed by using

546
00:18:24,320 --> 00:18:25,679
software

547
00:18:25,679 --> 00:18:27,919
so the need of the hour for us was a

548
00:18:27,919 --> 00:18:30,160
comprehensive alert management framework

549
00:18:30,160 --> 00:18:32,240
that would help make the on-call more

550
00:18:32,240 --> 00:18:34,240
manageable

551
00:18:34,240 --> 00:18:36,240
so with that in mind we created an

552
00:18:36,240 --> 00:18:39,360
in-house tool called alert manager

553
00:18:39,360 --> 00:18:40,960
the reason for going in-house at that

554
00:18:40,960 --> 00:18:42,880
time was because

555
00:18:42,880 --> 00:18:45,760
there was nothing out there in the wild

556
00:18:45,760 --> 00:18:46,160
that

557
00:18:46,160 --> 00:18:49,840
would uh satisfy all of our requirements

558
00:18:49,840 --> 00:18:52,960
that we had for this system

559
00:18:52,960 --> 00:18:54,640
so this alert manager it acts as a

560
00:18:54,640 --> 00:18:56,240
single pane of glass for all of our

561
00:18:56,240 --> 00:18:58,320
alerting needs

562
00:18:58,320 --> 00:19:00,160
users can visualize and interact with

563
00:19:00,160 --> 00:19:01,919
different alerts it provides features

564
00:19:01,919 --> 00:19:04,240
such as alert aggregation

565
00:19:04,240 --> 00:19:06,160
it's also able to automatically plug

566
00:19:06,160 --> 00:19:07,919
into our source of proof which is an

567
00:19:07,919 --> 00:19:08,720
inbox

568
00:19:08,720 --> 00:19:11,360
and automatically suppress alerts by

569
00:19:11,360 --> 00:19:12,960
fetching the operational state of

570
00:19:12,960 --> 00:19:16,400
devices and other network elements

571
00:19:16,400 --> 00:19:18,559
finally it also allows more advanced

572
00:19:18,559 --> 00:19:21,200
workflows such as auto remediation

573
00:19:21,200 --> 00:19:23,440
wherein we are able to offload trivial

574
00:19:23,440 --> 00:19:25,039
high volume alerts

575
00:19:25,039 --> 00:19:27,440
to a robot for initial triage and for

576
00:19:27,440 --> 00:19:30,000
possible remediation as well

577
00:19:30,000 --> 00:19:32,400
we recently wrote a tech blog about this

578
00:19:32,400 --> 00:19:33,760
entire framework

579
00:19:33,760 --> 00:19:35,600
and if you're interested i would

580
00:19:35,600 --> 00:19:37,440
encourage you to go out to the

581
00:19:37,440 --> 00:19:39,840
provided link here so you can read more

582
00:19:39,840 --> 00:19:41,760
about it offline

583
00:19:41,760 --> 00:19:44,559
the last piece i wanted to highlight is

584
00:19:44,559 --> 00:19:46,320
the challenge that we face with our

585
00:19:46,320 --> 00:19:48,880
monitoring stack

586
00:19:48,880 --> 00:19:51,280
so the data that we had collected it had

587
00:19:51,280 --> 00:19:53,600
to have a long retention time

588
00:19:53,600 --> 00:19:55,919
in order to comply with network

589
00:19:55,919 --> 00:19:59,679
analytics and forecasting requirements

590
00:19:59,679 --> 00:20:01,840
the version of influx vp we were using

591
00:20:01,840 --> 00:20:04,080
at that time it had a rather inefficient

592
00:20:04,080 --> 00:20:05,280
storage engine

593
00:20:05,280 --> 00:20:07,200
which meant that we had to constantly

594
00:20:07,200 --> 00:20:08,320
keep a track of

595
00:20:08,320 --> 00:20:11,600
storage and migrate to larger disks

596
00:20:11,600 --> 00:20:15,760
over time secondly writing alerts

597
00:20:15,760 --> 00:20:18,720
meant writing tick scripts these big

598
00:20:18,720 --> 00:20:19,600
scripts

599
00:20:19,600 --> 00:20:22,880
had really steep learning curves

600
00:20:22,880 --> 00:20:24,720
and were rather cumbersome to maintain

601
00:20:24,720 --> 00:20:27,679
and debug on a day-to-day basis

602
00:20:27,679 --> 00:20:30,080
our capacitor instances had also started

603
00:20:30,080 --> 00:20:32,000
hitting scaling issues as a number of

604
00:20:32,000 --> 00:20:34,880
increased alerts had increased and the

605
00:20:34,880 --> 00:20:38,320
network actually expanded as well

606
00:20:38,320 --> 00:20:40,400
finally the sql-like language that

607
00:20:40,400 --> 00:20:42,320
influx db used at that time

608
00:20:42,320 --> 00:20:44,559
also meant that the burden of creating

609
00:20:44,559 --> 00:20:46,840
dashboards it fell entirely on the nre

610
00:20:46,840 --> 00:20:48,240
team

611
00:20:48,240 --> 00:20:50,559
even for us complex dashboarding

612
00:20:50,559 --> 00:20:52,480
required some degree of trial and error

613
00:20:52,480 --> 00:20:54,880
before we could get it right

614
00:20:54,880 --> 00:20:56,640
so all of this meant that we could not

615
00:20:56,640 --> 00:20:59,200
safely transition to the self enablement

616
00:20:59,200 --> 00:21:00,000
model

617
00:21:00,000 --> 00:21:02,080
of empowering other teams to control the

618
00:21:02,080 --> 00:21:04,000
features that they wanted

619
00:21:04,000 --> 00:21:05,919
so the solution to this thankfully

620
00:21:05,919 --> 00:21:07,840
turned out to be pretty straightforward

621
00:21:07,840 --> 00:21:09,840
uh we migrated all of our monitoring

622
00:21:09,840 --> 00:21:11,919
over to prometheus which is another

623
00:21:11,919 --> 00:21:14,799
very popular time series database

624
00:21:14,799 --> 00:21:16,400
prometheus has been

625
00:21:16,400 --> 00:21:18,240
proven to be generally more efficient

626
00:21:18,240 --> 00:21:21,600
than influx db based on real world usage

627
00:21:21,600 --> 00:21:24,080
and personally we observed over a five

628
00:21:24,080 --> 00:21:24,640
time

629
00:21:24,640 --> 00:21:27,039
increase in disk efficiency for all of

630
00:21:27,039 --> 00:21:28,559
our metrics

631
00:21:28,559 --> 00:21:30,159
of course this differs based on

632
00:21:30,159 --> 00:21:33,280
cardinality and other things

633
00:21:33,280 --> 00:21:35,520
it is also orders of magnitude easier to

634
00:21:35,520 --> 00:21:36,559
learn and write

635
00:21:36,559 --> 00:21:39,520
prometheus query language or promql and

636
00:21:39,520 --> 00:21:40,880
this meant that with a little bit of

637
00:21:40,880 --> 00:21:41,520
guidance

638
00:21:41,520 --> 00:21:43,840
we could enable other engineers to write

639
00:21:43,840 --> 00:21:47,360
their own dashboards as well as queries

640
00:21:47,360 --> 00:21:49,760
finally prometheus also has a built-in

641
00:21:49,760 --> 00:21:50,799
alerting system

642
00:21:50,799 --> 00:21:53,200
that utilizes the same from ql query

643
00:21:53,200 --> 00:21:54,080
language

644
00:21:54,080 --> 00:21:56,559
to generate alerts which meant that we

645
00:21:56,559 --> 00:21:58,720
had one less component to manage and to

646
00:21:58,720 --> 00:22:00,000
take care of

647
00:22:00,000 --> 00:22:03,679
so uh with because we wrote much of our

648
00:22:03,679 --> 00:22:05,840
automation stack in-house

649
00:22:05,840 --> 00:22:07,679
this has allowed us to control our own

650
00:22:07,679 --> 00:22:09,440
destiny and to move

651
00:22:09,440 --> 00:22:12,640
fast while iterating over time this has

652
00:22:12,640 --> 00:22:13,679
allowed us to build

653
00:22:13,679 --> 00:22:17,039
what we call our self-service model

654
00:22:17,039 --> 00:22:18,640
one of our guiding principles for

655
00:22:18,640 --> 00:22:20,400
writing our tools has been to take the

656
00:22:20,400 --> 00:22:21,280
long view

657
00:22:21,280 --> 00:22:23,120
which meant that we've always tried to

658
00:22:23,120 --> 00:22:24,400
build extensible

659
00:22:24,400 --> 00:22:27,760
frameworks and not just ad hoc scripts

660
00:22:27,760 --> 00:22:29,760
this meant making software like alert

661
00:22:29,760 --> 00:22:31,280
manager non-near

662
00:22:31,280 --> 00:22:33,440
plug-in driven where new features and

663
00:22:33,440 --> 00:22:36,480
scripts can easily be added

664
00:22:36,480 --> 00:22:38,000
network engineers are able to write

665
00:22:38,000 --> 00:22:40,000
their own scripts audits

666
00:22:40,000 --> 00:22:41,120
as well as to create their own

667
00:22:41,120 --> 00:22:43,520
dashboards all of the heavy lifting

668
00:22:43,520 --> 00:22:46,880
is usually taken care of by us as owners

669
00:22:46,880 --> 00:22:48,159
of the framework

670
00:22:48,159 --> 00:22:49,679
and the network and operational

671
00:22:49,679 --> 00:22:51,600
engineers can then simply focus on the

672
00:22:51,600 --> 00:22:53,280
business logic when writing their

673
00:22:53,280 --> 00:22:55,360
scripts

674
00:22:55,360 --> 00:22:57,120
this also meant that we could extend

675
00:22:57,120 --> 00:22:58,720
some of our tools to

676
00:22:58,720 --> 00:23:01,600
more easily fit the use case of teams

677
00:23:01,600 --> 00:23:02,000
even

678
00:23:02,000 --> 00:23:03,919
outside of network engineering

679
00:23:03,919 --> 00:23:06,159
organization

680
00:23:06,159 --> 00:23:08,000
and finally incorporating a user

681
00:23:08,000 --> 00:23:09,360
interface has

682
00:23:09,360 --> 00:23:12,880
allowed teams uh that

683
00:23:12,880 --> 00:23:14,960
are outside of neteng to also assist in

684
00:23:14,960 --> 00:23:16,640
growing the network as needed

685
00:23:16,640 --> 00:23:18,559
and examples of these include people who

686
00:23:18,559 --> 00:23:21,200
actually work out of the data centers in

687
00:23:21,200 --> 00:23:22,159
chicago and

688
00:23:22,159 --> 00:23:23,840
some of the other locations around the

689
00:23:23,840 --> 00:23:26,320
world so these folks can actually help

690
00:23:26,320 --> 00:23:28,000
us in growing the network by

691
00:23:28,000 --> 00:23:30,400
running these workflows by simply

692
00:23:30,400 --> 00:23:32,720
pushing a button on a web ui

693
00:23:32,720 --> 00:23:34,480
and all this without requiring any

694
00:23:34,480 --> 00:23:36,240
knowledge of how the network works or

695
00:23:36,240 --> 00:23:38,159
what the software systems are that power

696
00:23:38,159 --> 00:23:40,000
the underlying network

697
00:23:40,000 --> 00:23:42,559
so finally i'd like to highlight some of

698
00:23:42,559 --> 00:23:43,679
the key takeaways

699
00:23:43,679 --> 00:23:46,720
for us from this journey so far

700
00:23:46,720 --> 00:23:48,720
first off network automation is

701
00:23:48,720 --> 00:23:50,559
definitely no longer nice to have

702
00:23:50,559 --> 00:23:52,720
especially in a fast-paced growing

703
00:23:52,720 --> 00:23:54,240
production network environment that

704
00:23:54,240 --> 00:23:56,640
needs to scale rapidly

705
00:23:56,640 --> 00:23:58,559
because network automation adds

706
00:23:58,559 --> 00:24:00,480
strategic value to your overall

707
00:24:00,480 --> 00:24:03,360
business plans it's really important to

708
00:24:03,360 --> 00:24:05,039
hire the right people to get the job

709
00:24:05,039 --> 00:24:06,480
done

710
00:24:06,480 --> 00:24:08,559
i would even go so far as to say that

711
00:24:08,559 --> 00:24:10,720
network automation needs

712
00:24:10,720 --> 00:24:12,720
to fit within the core business strategy

713
00:24:12,720 --> 00:24:15,600
of the organization as a whole

714
00:24:15,600 --> 00:24:18,320
secondly don't strive for perfection on

715
00:24:18,320 --> 00:24:21,120
the first attempt right the old adage of

716
00:24:21,120 --> 00:24:23,679
done is better than for perfect has

717
00:24:23,679 --> 00:24:25,679
proven to be true time and again

718
00:24:25,679 --> 00:24:28,000
as some of the real world examples in

719
00:24:28,000 --> 00:24:30,000
prominent companies

720
00:24:30,000 --> 00:24:32,720
across the world and even even at roblox

721
00:24:32,720 --> 00:24:35,200
has shown

722
00:24:35,679 --> 00:24:37,520
try to standardize some network designs

723
00:24:37,520 --> 00:24:38,880
wherever possible

724
00:24:38,880 --> 00:24:40,960
uh clean and robust network automation

725
00:24:40,960 --> 00:24:43,120
usually goes hand in hand with clean and

726
00:24:43,120 --> 00:24:45,360
standardized network designs

727
00:24:45,360 --> 00:24:47,600
however also be prepared to maintain and

728
00:24:47,600 --> 00:24:49,679
support multiple revisions of those

729
00:24:49,679 --> 00:24:51,440
designs

730
00:24:51,440 --> 00:24:53,039
in your tooling and all of your

731
00:24:53,039 --> 00:24:55,840
frameworks as well

732
00:24:55,919 --> 00:24:58,159
it also helps to carefully evaluate the

733
00:24:58,159 --> 00:24:59,520
functionality that comes

734
00:24:59,520 --> 00:25:01,919
out of the box with open source tools

735
00:25:01,919 --> 00:25:03,760
and frameworks

736
00:25:03,760 --> 00:25:05,760
chances are that as you grow these

737
00:25:05,760 --> 00:25:07,440
functionalities may not be enough for

738
00:25:07,440 --> 00:25:08,000
you and

739
00:25:08,000 --> 00:25:09,679
most likely you will need to add other

740
00:25:09,679 --> 00:25:12,240
features and functionality on top

741
00:25:12,240 --> 00:25:14,240
and as such it is imperative and

742
00:25:14,240 --> 00:25:16,000
important to choose solutions and

743
00:25:16,000 --> 00:25:18,080
products that allow for a seamless way

744
00:25:18,080 --> 00:25:18,799
to extend

745
00:25:18,799 --> 00:25:22,158
their base functionality

746
00:25:23,039 --> 00:25:25,279
also remember that open source is not

747
00:25:25,279 --> 00:25:27,360
always the right answer

748
00:25:27,360 --> 00:25:29,440
open source has its place but just

749
00:25:29,440 --> 00:25:31,120
because the repository has

750
00:25:31,120 --> 00:25:33,279
10 000 stars on github and serves the

751
00:25:33,279 --> 00:25:35,039
needs of others

752
00:25:35,039 --> 00:25:36,320
does not necessarily mean that it's

753
00:25:36,320 --> 00:25:38,720
going to serve you equally well

754
00:25:38,720 --> 00:25:40,480
like i mentioned before it is important

755
00:25:40,480 --> 00:25:42,720
to realize what tools and frameworks

756
00:25:42,720 --> 00:25:44,400
will add strategic value to the

757
00:25:44,400 --> 00:25:46,320
organization especially over the long

758
00:25:46,320 --> 00:25:46,880
run

759
00:25:46,880 --> 00:25:49,679
long run this means even though your

760
00:25:49,679 --> 00:25:50,400
team

761
00:25:50,400 --> 00:25:53,520
might run thin on resources dedicating

762
00:25:53,520 --> 00:25:55,200
whatever time is available to those

763
00:25:55,200 --> 00:25:56,960
strategic initiatives will

764
00:25:56,960 --> 00:26:00,400
definitely pay off in the long run

765
00:26:00,400 --> 00:26:02,320
there are also several different

766
00:26:02,320 --> 00:26:04,320
one-stop shop automation solutions that

767
00:26:04,320 --> 00:26:05,279
you might come across

768
00:26:05,279 --> 00:26:08,000
that may be tempting to avoid attempting

769
00:26:08,000 --> 00:26:08,400
to

770
00:26:08,400 --> 00:26:11,520
adopt in my personal experience over the

771
00:26:11,520 --> 00:26:12,159
years

772
00:26:12,159 --> 00:26:15,440
this is a pitfall that needs to be

773
00:26:15,440 --> 00:26:17,840
avoided as much as possible

774
00:26:17,840 --> 00:26:19,679
not only does this introduce vendor

775
00:26:19,679 --> 00:26:22,080
lock-in but a majority of your time

776
00:26:22,080 --> 00:26:25,039
would be spent focusing on what i call

777
00:26:25,039 --> 00:26:27,279
adapting your automation needs to fit

778
00:26:27,279 --> 00:26:28,559
the tool

779
00:26:28,559 --> 00:26:30,720
rather than adapting your tooling to fit

780
00:26:30,720 --> 00:26:32,080
your automation needs

781
00:26:32,080 --> 00:26:33,520
if you see if you see the difference

782
00:26:33,520 --> 00:26:35,200
there

783
00:26:35,200 --> 00:26:36,400
of course if you're really out of

784
00:26:36,400 --> 00:26:38,240
options it's fine to use something off

785
00:26:38,240 --> 00:26:38,880
the shelf

786
00:26:38,880 --> 00:26:40,799
until such time as when you can grow

787
00:26:40,799 --> 00:26:42,960
your team to be able to handle

788
00:26:42,960 --> 00:26:46,480
the problem on your own and finally

789
00:26:46,480 --> 00:26:48,559
it definitely pays to think of network

790
00:26:48,559 --> 00:26:49,919
automation as something that

791
00:26:49,919 --> 00:26:52,320
enables the production network to grow

792
00:26:52,320 --> 00:26:53,840
and scale

793
00:26:53,840 --> 00:26:55,840
which usually means empowering other

794
00:26:55,840 --> 00:26:57,120
engineers with

795
00:26:57,120 --> 00:26:59,360
tools and frameworks that they need to

796
00:26:59,360 --> 00:27:01,039
assist you in that mission of growing

797
00:27:01,039 --> 00:27:03,039
and scaling the network

798
00:27:03,039 --> 00:27:05,520
so things like auto remediation and ui

799
00:27:05,520 --> 00:27:07,600
based workflows they help lighten the

800
00:27:07,600 --> 00:27:10,480
operational burden on other engineers

801
00:27:10,480 --> 00:27:12,159
which means that they can now spend more

802
00:27:12,159 --> 00:27:14,159
time in helping you grow and scale the

803
00:27:14,159 --> 00:27:15,279
network

804
00:27:15,279 --> 00:27:18,840
which is ultimately a win-win for the

805
00:27:18,840 --> 00:27:20,720
organization

806
00:27:20,720 --> 00:27:23,200
and that's all i have for today and i'll

807
00:27:23,200 --> 00:27:25,039
be open to questions now with there any

808
00:27:25,039 --> 00:27:27,440
thank you

809
00:27:29,120 --> 00:27:31,919
thank you my rush so we have a few

810
00:27:31,919 --> 00:27:33,520
questions that have just come in

811
00:27:33,520 --> 00:27:35,360
um so let's uh let's let's go through

812
00:27:35,360 --> 00:27:37,360
them first question

813
00:27:37,360 --> 00:27:39,760
does the addition of graphql to netbox

814
00:27:39,760 --> 00:27:41,360
and next major release help you

815
00:27:41,360 --> 00:27:42,880
or do you just steam forward with the

816
00:27:42,880 --> 00:27:47,360
network api and current api stitching

817
00:27:47,600 --> 00:27:49,360
yeah great thanks for that question uh

818
00:27:49,360 --> 00:27:51,679
so for us the graphql edition is

819
00:27:51,679 --> 00:27:52,559
definitely

820
00:27:52,559 --> 00:27:55,120
a great feature to have uh because it

821
00:27:55,120 --> 00:27:57,039
expands the query capabilities of netbox

822
00:27:57,039 --> 00:27:58,399
but for us

823
00:27:58,399 --> 00:28:01,279
the overarching external api it allows

824
00:28:01,279 --> 00:28:02,159
us to abstract

825
00:28:02,159 --> 00:28:04,000
the business logic and decouple the

826
00:28:04,000 --> 00:28:05,440
business logic entirely from the

827
00:28:05,440 --> 00:28:07,120
underlying source of truth

828
00:28:07,120 --> 00:28:08,960
so our philosophy generally has been

829
00:28:08,960 --> 00:28:10,399
that the source of truth

830
00:28:10,399 --> 00:28:12,399
should be nothing but a plane monitor

831
00:28:12,399 --> 00:28:14,080
database with

832
00:28:14,080 --> 00:28:17,200
extensible query capabilities and all of

833
00:28:17,200 --> 00:28:18,720
the business logic should totally be

834
00:28:18,720 --> 00:28:21,200
abstracted out into its own service

835
00:28:21,200 --> 00:28:23,360
uh the leaner the database is kept the

836
00:28:23,360 --> 00:28:24,320
better it is

837
00:28:24,320 --> 00:28:27,279
the external api also allows us to plug

838
00:28:27,279 --> 00:28:28,080
into

839
00:28:28,080 --> 00:28:30,640
other organizational engines for

840
00:28:30,640 --> 00:28:32,320
authentication authorization and stuff

841
00:28:32,320 --> 00:28:32,960
like that

842
00:28:32,960 --> 00:28:35,120
without actually maintaining two

843
00:28:35,120 --> 00:28:36,880
separate you know components for for

844
00:28:36,880 --> 00:28:38,159
that specific use case

845
00:28:38,159 --> 00:28:40,159
so for us it is definitely going to be

846
00:28:40,159 --> 00:28:42,080
the external api which will be the way

847
00:28:42,080 --> 00:28:45,360
to move forward

848
00:28:45,360 --> 00:28:48,399
all right so next question

849
00:28:48,399 --> 00:28:51,279
is uh which metrics just for example um

850
00:28:51,279 --> 00:28:52,159
were stored in

851
00:28:52,159 --> 00:28:56,960
influx db and now move to prometheus

852
00:28:57,200 --> 00:28:59,360
so pretty much all of our uh network

853
00:28:59,360 --> 00:29:01,360
device metrics which includes like

854
00:29:01,360 --> 00:29:04,799
uh interface statistics bgp metrics uh

855
00:29:04,799 --> 00:29:07,679
you know uh other utilization issue uh

856
00:29:07,679 --> 00:29:09,039
counters and stuff like that we pretty

857
00:29:09,039 --> 00:29:09,840
much move

858
00:29:09,840 --> 00:29:12,799
entirely uh away from influx jb into

859
00:29:12,799 --> 00:29:15,440
prometheus

860
00:29:16,240 --> 00:29:19,279
okay um how is

861
00:29:19,279 --> 00:29:22,320
how does your existing automation deal

862
00:29:22,320 --> 00:29:25,200
with new device or new vendor

863
00:29:25,200 --> 00:29:28,240
intros into the network

864
00:29:28,320 --> 00:29:30,240
so whenever possible uh we try to

865
00:29:30,240 --> 00:29:31,600
leverage uh

866
00:29:31,600 --> 00:29:34,240
we got our core way of interacting with

867
00:29:34,240 --> 00:29:36,399
devices today is via nepal

868
00:29:36,399 --> 00:29:39,200
which uh fortunately brings in a lot of

869
00:29:39,200 --> 00:29:41,840
multi-vendor capabilities out of the box

870
00:29:41,840 --> 00:29:44,720
uh there have been devices for example

871
00:29:44,720 --> 00:29:45,039
uh

872
00:29:45,039 --> 00:29:46,720
we're building our own optical network

873
00:29:46,720 --> 00:29:48,640
so they've been like some optical

874
00:29:48,640 --> 00:29:50,320
devices which don't necessarily

875
00:29:50,320 --> 00:29:52,080
uh you know fit into the napalm

876
00:29:52,080 --> 00:29:53,600
framework so for that we've

877
00:29:53,600 --> 00:29:56,159
managed to because the architecture is

878
00:29:56,159 --> 00:29:57,919
so modular and plug-in driven we're

879
00:29:57,919 --> 00:29:59,120
easily able to

880
00:29:59,120 --> 00:30:01,760
uh you know use whatever libraries the

881
00:30:01,760 --> 00:30:03,360
vendors provide whatever apis they

882
00:30:03,360 --> 00:30:04,159
provide

883
00:30:04,159 --> 00:30:06,159
and to create modules that talk to these

884
00:30:06,159 --> 00:30:09,840
new networking vendors over time as well

885
00:30:10,720 --> 00:30:14,960
okay totally so um

886
00:30:14,960 --> 00:30:18,559
um so another question so

887
00:30:18,559 --> 00:30:19,679
and this is something that we all deal

888
00:30:19,679 --> 00:30:21,440
with when you have network engineers who

889
00:30:21,440 --> 00:30:22,640
write their own tools

890
00:30:22,640 --> 00:30:25,679
um like you or or me for that matter

891
00:30:25,679 --> 00:30:28,080
um how do you define what the ongoing

892
00:30:28,080 --> 00:30:29,200
support

893
00:30:29,200 --> 00:30:31,600
structure looks like because you have

894
00:30:31,600 --> 00:30:33,520
these tools and dashboards that

895
00:30:33,520 --> 00:30:36,000
you know are written and if the original

896
00:30:36,000 --> 00:30:36,559
engineer

897
00:30:36,559 --> 00:30:39,440
network engineer leaves what happens how

898
00:30:39,440 --> 00:30:41,120
do they get supported

899
00:30:41,120 --> 00:30:44,559
um you know how do you end up avoiding

900
00:30:44,559 --> 00:30:45,919
you know building up just another

901
00:30:45,919 --> 00:30:47,679
version of tech just another version of

902
00:30:47,679 --> 00:30:50,080
tech debt

903
00:30:50,080 --> 00:30:51,440
yeah that's a great question and to be

904
00:30:51,440 --> 00:30:53,279
honest uh we have struggled

905
00:30:53,279 --> 00:30:56,240
with that uh especially because our team

906
00:30:56,240 --> 00:30:57,519
has been

907
00:30:57,519 --> 00:31:00,640
uh you know kind of small uh and we

908
00:31:00,640 --> 00:31:02,880
haven't had a chance to grow the team as

909
00:31:02,880 --> 00:31:04,880
much as we would have liked

910
00:31:04,880 --> 00:31:07,679
but generally we try to uh you know

911
00:31:07,679 --> 00:31:08,399
provide

912
00:31:08,399 --> 00:31:11,679
a contract uh meaning that as long as

913
00:31:11,679 --> 00:31:13,679
network engineers adhere to the

914
00:31:13,679 --> 00:31:16,960
core underlying framework and how

915
00:31:16,960 --> 00:31:18,720
the core needs to be structured in a

916
00:31:18,720 --> 00:31:21,279
specific way and as long as they inherit

917
00:31:21,279 --> 00:31:22,720
certain libraries

918
00:31:22,720 --> 00:31:24,240
uh that bring in you know

919
00:31:24,240 --> 00:31:25,760
instrumentation capabilities

920
00:31:25,760 --> 00:31:27,600
uh centralized logging those kind of

921
00:31:27,600 --> 00:31:29,360
things it makes maintaining the code

922
00:31:29,360 --> 00:31:31,600
base and those scripts a lot easier

923
00:31:31,600 --> 00:31:33,600
uh pretty much for anybody else taking

924
00:31:33,600 --> 00:31:35,200
over the framework or after the awesome

925
00:31:35,200 --> 00:31:36,480
author leads as well

926
00:31:36,480 --> 00:31:38,480
so the trick for us has been to you know

927
00:31:38,480 --> 00:31:40,240
centralize things as much as possible to

928
00:31:40,240 --> 00:31:42,240
provide a common observability and

929
00:31:42,240 --> 00:31:43,760
monitoring framework not just for our

930
00:31:43,760 --> 00:31:45,279
network but also for our tooling and

931
00:31:45,279 --> 00:31:47,840
scripts as well

932
00:31:48,399 --> 00:31:52,320
all right um so uh last question here

933
00:31:52,320 --> 00:31:53,519
um actually no we got a couple of

934
00:31:53,519 --> 00:31:55,519
questions

935
00:31:55,519 --> 00:32:00,080
we get your questions um so

936
00:32:00,080 --> 00:32:02,399
context-aware learning context-aware

937
00:32:02,399 --> 00:32:03,120
alerting

938
00:32:03,120 --> 00:32:05,679
is huge and missing from nearly all

939
00:32:05,679 --> 00:32:07,679
traditional monitoring

940
00:32:07,679 --> 00:32:09,840
um at a previous firm we did some sort

941
00:32:09,840 --> 00:32:10,720
of consolidation

942
00:32:10,720 --> 00:32:12,720
related alerts are there any thoughts on

943
00:32:12,720 --> 00:32:14,080
contributing or open sourcing your

944
00:32:14,080 --> 00:32:16,960
approach unlock though

945
00:32:17,600 --> 00:32:20,880
definitely yes uh context of alerting is

946
00:32:20,880 --> 00:32:21,600
one of the

947
00:32:21,600 --> 00:32:23,360
core features of our alert manager

948
00:32:23,360 --> 00:32:25,279
framework uh it plugs directly into

949
00:32:25,279 --> 00:32:27,200
netbox it can also plug into any other

950
00:32:27,200 --> 00:32:28,000
source of truth

951
00:32:28,000 --> 00:32:30,640
to fetch metadata about alerting

952
00:32:30,640 --> 00:32:31,919
entities

953
00:32:31,919 --> 00:32:34,320
uh right now the system is kind of

954
00:32:34,320 --> 00:32:35,440
coupled into

955
00:32:35,440 --> 00:32:38,559
uh kind of tightly into the uh some

956
00:32:38,559 --> 00:32:39,200
other

957
00:32:39,200 --> 00:32:41,919
internal roblox systems so there is some

958
00:32:41,919 --> 00:32:43,760
work in progress to you know uh

959
00:32:43,760 --> 00:32:46,720
abstract out some of the uh logic into

960
00:32:46,720 --> 00:32:47,440
its own

961
00:32:47,440 --> 00:32:49,279
code base that we can eventually open

962
00:32:49,279 --> 00:32:50,960
source so yeah we definitely have plans

963
00:32:50,960 --> 00:32:53,360
of doing that in the near future

964
00:32:53,360 --> 00:32:56,720
great all right um this looks to be the

965
00:32:56,720 --> 00:32:58,240
last question

966
00:32:58,240 --> 00:32:59,760
um following up slightly on the

967
00:32:59,760 --> 00:33:01,600
prometheus question above

968
00:33:01,600 --> 00:33:03,840
do you store significant model driven

969
00:33:03,840 --> 00:33:05,440
streaming telemetry there

970
00:33:05,440 --> 00:33:10,399
and if so what's the retention period

971
00:33:10,399 --> 00:33:13,120
good question so we are not uh currently

972
00:33:13,120 --> 00:33:14,720
using streaming telemetry we are still

973
00:33:14,720 --> 00:33:15,200
using

974
00:33:15,200 --> 00:33:18,320
uh the pull model where we use uh

975
00:33:18,320 --> 00:33:21,440
either the json or netcon to pull data

976
00:33:21,440 --> 00:33:22,880
from the devices

977
00:33:22,880 --> 00:33:24,399
uh but yeah everything goes into

978
00:33:24,399 --> 00:33:26,320
prometheus our retention is mostly

979
00:33:26,320 --> 00:33:27,279
driven by

980
00:33:27,279 --> 00:33:28,880
uh forecasting and analytics

981
00:33:28,880 --> 00:33:30,399
requirements uh

982
00:33:30,399 --> 00:33:32,720
we have a high availability cluster

983
00:33:32,720 --> 00:33:34,080
setup we also have

984
00:33:34,080 --> 00:33:37,279
a long term storage engine uh that

985
00:33:37,279 --> 00:33:38,080
connects into

986
00:33:38,080 --> 00:33:40,640
our short-term prometheus instance so

987
00:33:40,640 --> 00:33:42,480
just we can horizontally scale that

988
00:33:42,480 --> 00:33:42,880
engine

989
00:33:42,880 --> 00:33:44,880
and we can add more machines into that

990
00:33:44,880 --> 00:33:45,919
cluster and

991
00:33:45,919 --> 00:33:48,799
grow the scaling and retention

992
00:33:48,799 --> 00:33:52,240
capabilities as we need

993
00:33:52,240 --> 00:33:54,799
okay great so thank you for your

994
00:33:54,799 --> 00:34:05,120
presentation and your time today

