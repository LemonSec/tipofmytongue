1
00:00:00,000 --> 00:00:05,680
[Music]

2
00:00:05,680 --> 00:00:07,759
hi everyone my name is cody ducette from

3
00:00:07,759 --> 00:00:09,040
raytheon bbn

4
00:00:09,040 --> 00:00:10,719
and i'm here today to introduce you to

5
00:00:10,719 --> 00:00:12,080
gatekeeper the first

6
00:00:12,080 --> 00:00:14,880
open source ddos protection system i'm

7
00:00:14,880 --> 00:00:16,480
filling in today for michelle machado

8
00:00:16,480 --> 00:00:17,279
from hostnet

9
00:00:17,279 --> 00:00:19,119
and also my colleagues xiaobinfoo from

10
00:00:19,119 --> 00:00:21,199
google and john buyers from boston

11
00:00:21,199 --> 00:00:22,400
university

12
00:00:22,400 --> 00:00:24,320
so our group started looking at this

13
00:00:24,320 --> 00:00:27,119
problem of ddos attacks around 2015

14
00:00:27,119 --> 00:00:28,720
and back then we kind of had this

15
00:00:28,720 --> 00:00:31,279
feeling that ddos attacks were rising in

16
00:00:31,279 --> 00:00:31,599
their

17
00:00:31,599 --> 00:00:34,880
complexity magnitude and frequency

18
00:00:34,880 --> 00:00:36,480
just from bits and pieces that we could

19
00:00:36,480 --> 00:00:38,160
find throughout public sharings on the

20
00:00:38,160 --> 00:00:39,680
internet

21
00:00:39,680 --> 00:00:41,360
last year we also found this image from

22
00:00:41,360 --> 00:00:44,079
google which shows a very clear

23
00:00:44,079 --> 00:00:47,200
trend in the largest known ddos attacks

24
00:00:47,200 --> 00:00:49,039
they break it down by bits per second

25
00:00:49,039 --> 00:00:51,199
attacks packets per second attacks

26
00:00:51,199 --> 00:00:53,840
and also http requests per second

27
00:00:53,840 --> 00:00:54,960
attacks

28
00:00:54,960 --> 00:00:58,559
and for each one of these metrics the

29
00:00:58,559 --> 00:01:00,399
largest known ddos attacks year over

30
00:01:00,399 --> 00:01:02,800
year is growing exponentially

31
00:01:02,800 --> 00:01:06,320
so we found that this is

32
00:01:06,320 --> 00:01:08,000
a large problem and it's it's a

33
00:01:08,000 --> 00:01:10,080
considerable concern for many network

34
00:01:10,080 --> 00:01:11,119
operators

35
00:01:11,119 --> 00:01:14,159
and in particular infrastructure layer

36
00:01:14,159 --> 00:01:16,400
or flooding attacks seem to be a big

37
00:01:16,400 --> 00:01:18,240
culprit here

38
00:01:18,240 --> 00:01:21,040
so over just the past year or so so

39
00:01:21,040 --> 00:01:22,560
these are the largest ddos attacks from

40
00:01:22,560 --> 00:01:24,080
2020

41
00:01:24,080 --> 00:01:26,159
three of the largest providers have seen

42
00:01:26,159 --> 00:01:28,159
very massive attacks

43
00:01:28,159 --> 00:01:31,360
amazon saw a 2.3 terabit attack

44
00:01:31,360 --> 00:01:33,600
last february which is close to the

45
00:01:33,600 --> 00:01:35,280
bandwidth record that's

46
00:01:35,280 --> 00:01:38,479
publicly known which was 2.54 terabits

47
00:01:38,479 --> 00:01:39,280
per second and

48
00:01:39,280 --> 00:01:43,360
back in 2017 and there's also been some

49
00:01:43,360 --> 00:01:47,280
very high packet per second

50
00:01:47,280 --> 00:01:49,680
metric attacks some measured by akamai

51
00:01:49,680 --> 00:01:51,280
and cloudflare that are reaching up to

52
00:01:51,280 --> 00:01:52,560
800 million

53
00:01:52,560 --> 00:01:56,079
millions of packets per second now

54
00:01:56,079 --> 00:01:58,799
so we're approaching the problem from

55
00:01:58,799 --> 00:01:59,439
these

56
00:01:59,439 --> 00:02:01,600
bandwidth flooding attacks uh

57
00:02:01,600 --> 00:02:03,520
infrastructure layer attacks

58
00:02:03,520 --> 00:02:05,600
and thought to ourselves how can we

59
00:02:05,600 --> 00:02:08,000
provide a solution for

60
00:02:08,000 --> 00:02:09,919
various companies maybe that are smaller

61
00:02:09,919 --> 00:02:11,038
or medium-sized

62
00:02:11,038 --> 00:02:13,120
to be able to defend themselves instead

63
00:02:13,120 --> 00:02:14,800
of maybe paying someone else to the

64
00:02:14,800 --> 00:02:16,319
defense

65
00:02:16,319 --> 00:02:17,840
in the solution that we came up with

66
00:02:17,840 --> 00:02:20,400
gatekeeper we think

67
00:02:20,400 --> 00:02:23,040
is is sort of a useful tool from three

68
00:02:23,040 --> 00:02:25,040
different perspectives

69
00:02:25,040 --> 00:02:26,879
the first is that we're offering what

70
00:02:26,879 --> 00:02:29,040
we're calling unparalleled multi-vector

71
00:02:29,040 --> 00:02:30,560
protection

72
00:02:30,560 --> 00:02:33,040
so at all times all the gatekeeper

73
00:02:33,040 --> 00:02:35,280
filters that are used are active

74
00:02:35,280 --> 00:02:37,040
and these monitor all flows in the

75
00:02:37,040 --> 00:02:38,480
system

76
00:02:38,480 --> 00:02:40,480
this is kind of a crucial point being

77
00:02:40,480 --> 00:02:41,760
able to keep state

78
00:02:41,760 --> 00:02:44,080
for every flow which we define as a

79
00:02:44,080 --> 00:02:45,599
source and destination ip

80
00:02:45,599 --> 00:02:47,840
pair because a lot of alternative

81
00:02:47,840 --> 00:02:49,040
solutions

82
00:02:49,040 --> 00:02:50,319
might be able to do some sort of

83
00:02:50,319 --> 00:02:52,000
filtering but only with a limited

84
00:02:52,000 --> 00:02:53,599
capacity

85
00:02:53,599 --> 00:02:55,760
and there's specific kind of attacks

86
00:02:55,760 --> 00:02:56,720
that

87
00:02:56,720 --> 00:02:58,800
make the defensive system kind of choose

88
00:02:58,800 --> 00:03:00,720
between implementing filters

89
00:03:00,720 --> 00:03:03,200
that are maybe too broad and induce

90
00:03:03,200 --> 00:03:04,640
collateral damage

91
00:03:04,640 --> 00:03:07,519
or are very specific and too narrow and

92
00:03:07,519 --> 00:03:08,159
avoid

93
00:03:08,159 --> 00:03:10,560
a risk not actually mitigating the

94
00:03:10,560 --> 00:03:12,400
attack

95
00:03:12,400 --> 00:03:14,400
along with that multi-vector protection

96
00:03:14,400 --> 00:03:17,040
gatekeeper is scalable

97
00:03:17,040 --> 00:03:18,480
many of these infrastructure layer

98
00:03:18,480 --> 00:03:21,200
attacks are in in relative terms

99
00:03:21,200 --> 00:03:23,440
fairly small right less than maybe 10

100
00:03:23,440 --> 00:03:25,360
gigabits per second

101
00:03:25,360 --> 00:03:28,400
but gatekeeper architecturally and with

102
00:03:28,400 --> 00:03:29,920
a lot of the optimizations that are

103
00:03:29,920 --> 00:03:32,080
built into it has the ability to

104
00:03:32,080 --> 00:03:36,159
scale so we actually have a partner

105
00:03:36,159 --> 00:03:37,599
deploying gatekeeper that's that's

106
00:03:37,599 --> 00:03:39,120
looking at a one terabit per second

107
00:03:39,120 --> 00:03:40,319
deployment

108
00:03:40,319 --> 00:03:43,519
and that partner is mailed at ru

109
00:03:43,519 --> 00:03:45,920
and the last component of gatekeeper

110
00:03:45,920 --> 00:03:46,799
that we think is

111
00:03:46,799 --> 00:03:48,480
especially useful is the fact that can

112
00:03:48,480 --> 00:03:51,040
mitigate attacks in seconds

113
00:03:51,040 --> 00:03:53,040
according to kaspersky more than 80

114
00:03:53,040 --> 00:03:54,799
percent of attacks in the internet

115
00:03:54,799 --> 00:03:56,959
last that last for less than four

116
00:03:56,959 --> 00:03:58,080
minutes

117
00:03:58,080 --> 00:04:00,319
and of course this is not much time for

118
00:04:00,319 --> 00:04:01,200
human

119
00:04:01,200 --> 00:04:02,720
intervention right being able to figure

120
00:04:02,720 --> 00:04:04,400
out what the attack is and where it's

121
00:04:04,400 --> 00:04:05,519
coming from

122
00:04:05,519 --> 00:04:06,959
as well as deploying mitigating

123
00:04:06,959 --> 00:04:09,360
maneuvers but for many attacks

124
00:04:09,360 --> 00:04:10,799
gatekeeper will mitigate those in

125
00:04:10,799 --> 00:04:11,680
seconds

126
00:04:11,680 --> 00:04:13,599
or instantly by virtue of the types of

127
00:04:13,599 --> 00:04:16,719
policies it enforces

128
00:04:18,880 --> 00:04:21,358
so that was just a brief view into why

129
00:04:21,358 --> 00:04:22,320
we're in this space

130
00:04:22,320 --> 00:04:24,320
and what gatekeeper can do now i'm going

131
00:04:24,320 --> 00:04:26,080
to get into more specifics about kind of

132
00:04:26,080 --> 00:04:27,680
the architecture of gatekeeper and how

133
00:04:27,680 --> 00:04:29,840
it works

134
00:04:32,639 --> 00:04:34,320
so the first main component of

135
00:04:34,320 --> 00:04:36,000
gatekeeper that you need to understand

136
00:04:36,000 --> 00:04:38,560
are vantage points vantage points are

137
00:04:38,560 --> 00:04:39,919
these well provisioned

138
00:04:39,919 --> 00:04:42,800
and geographically distributed points

139
00:04:42,800 --> 00:04:44,800
ideally in a global deployment

140
00:04:44,800 --> 00:04:46,320
located throughout the globe as you see

141
00:04:46,320 --> 00:04:48,240
here

142
00:04:48,240 --> 00:04:50,080
and these vantage points have four

143
00:04:50,080 --> 00:04:52,479
different requirements

144
00:04:52,479 --> 00:04:54,400
the first is that they need some kind of

145
00:04:54,400 --> 00:04:56,000
compute capacity

146
00:04:56,000 --> 00:04:58,960
so something like a bare metal server or

147
00:04:58,960 --> 00:05:00,720
perhaps even a vm

148
00:05:00,720 --> 00:05:02,960
but in order to run a ddos mitigation

149
00:05:02,960 --> 00:05:03,840
system

150
00:05:03,840 --> 00:05:05,759
it can't really be done in like a

151
00:05:05,759 --> 00:05:08,400
dedicated router or something like that

152
00:05:08,400 --> 00:05:10,160
the second requirement is that it needs

153
00:05:10,160 --> 00:05:12,240
cheap ingress bandwidth

154
00:05:12,240 --> 00:05:15,199
you need to be able to limit the the

155
00:05:15,199 --> 00:05:16,000
cost of the

156
00:05:16,000 --> 00:05:17,600
bandwidth that's coming into each one of

157
00:05:17,600 --> 00:05:19,199
these vantage points because if you

158
00:05:19,199 --> 00:05:20,160
don't

159
00:05:20,160 --> 00:05:21,360
you're going to give a lever to the

160
00:05:21,360 --> 00:05:22,960
attacker to be able to increase the

161
00:05:22,960 --> 00:05:25,840
price of your mitigation

162
00:05:26,240 --> 00:05:28,160
the third requirement is to create

163
00:05:28,160 --> 00:05:30,160
basically an anycast network

164
00:05:30,160 --> 00:05:32,080
so that all traffic that's going to your

165
00:05:32,080 --> 00:05:33,759
protected destination

166
00:05:33,759 --> 00:05:36,400
is funneled through these vps and the

167
00:05:36,400 --> 00:05:37,520
typical way of doing that

168
00:05:37,520 --> 00:05:40,639
is using bgp peering so all of these

169
00:05:40,639 --> 00:05:44,320
vantage points must support bgp sessions

170
00:05:44,320 --> 00:05:46,720
and finally the links between the

171
00:05:46,720 --> 00:05:47,600
vantage point

172
00:05:47,600 --> 00:05:48,960
all the way back to the protected

173
00:05:48,960 --> 00:05:51,199
destination as should be

174
00:05:51,199 --> 00:05:53,600
private in some way now this could be as

175
00:05:53,600 --> 00:05:54,800
simple as something like

176
00:05:54,800 --> 00:05:58,720
tunneling or as complex or costly

177
00:05:58,720 --> 00:06:01,199
as something like dark fiber but you

178
00:06:01,199 --> 00:06:02,880
want to be able to privatize

179
00:06:02,880 --> 00:06:04,960
that infrastructure between the vp and

180
00:06:04,960 --> 00:06:06,960
the destination network

181
00:06:06,960 --> 00:06:09,120
and that just helps mitigate attacks

182
00:06:09,120 --> 00:06:10,880
against the routers and links on that

183
00:06:10,880 --> 00:06:11,600
path

184
00:06:11,600 --> 00:06:13,919
so here in this picture we have a set of

185
00:06:13,919 --> 00:06:14,720
vantage points

186
00:06:14,720 --> 00:06:17,440
along with a particular client that's

187
00:06:17,440 --> 00:06:18,400
trying to access

188
00:06:18,400 --> 00:06:20,720
the services inside of this protected

189
00:06:20,720 --> 00:06:22,240
destination as

190
00:06:22,240 --> 00:06:24,000
each one of these vantage points we

191
00:06:24,000 --> 00:06:26,160
envision as being something like

192
00:06:26,160 --> 00:06:28,560
an internet exchange point a peering

193
00:06:28,560 --> 00:06:30,240
link or peering hotel

194
00:06:30,240 --> 00:06:32,560
or maybe even some cloud providers

195
00:06:32,560 --> 00:06:34,000
particularly the ones that support

196
00:06:34,000 --> 00:06:38,319
bgp this architecture is very similar to

197
00:06:38,319 --> 00:06:39,520
some of the solutions that are

198
00:06:39,520 --> 00:06:41,520
commercially available but those

199
00:06:41,520 --> 00:06:42,720
commercial solutions

200
00:06:42,720 --> 00:06:44,240
have their own infrastructure to be able

201
00:06:44,240 --> 00:06:45,840
to implement this right they have their

202
00:06:45,840 --> 00:06:46,400
own

203
00:06:46,400 --> 00:06:49,199
edge data centers and points of presence

204
00:06:49,199 --> 00:06:50,960
here we advocate for using

205
00:06:50,960 --> 00:06:53,440
shared infrastructure among you know the

206
00:06:53,440 --> 00:06:55,120
various stakeholders of the internet

207
00:06:55,120 --> 00:06:56,960
to be able to do ddos mitigation and

208
00:06:56,960 --> 00:06:59,120
share some of the costs

209
00:06:59,120 --> 00:07:01,440
so to deploy gatekeeper in each one of

210
00:07:01,440 --> 00:07:03,120
these vantage points there will be

211
00:07:03,120 --> 00:07:05,120
a physical presence of some gatekeeper

212
00:07:05,120 --> 00:07:06,560
components

213
00:07:06,560 --> 00:07:07,919
so for example this would require

214
00:07:07,919 --> 00:07:10,160
deploying a gatekeeper server

215
00:07:10,160 --> 00:07:13,120
and actually connecting it to the switch

216
00:07:13,120 --> 00:07:14,880
of an ixp for example

217
00:07:14,880 --> 00:07:16,560
and once that geekeeper server is

218
00:07:16,560 --> 00:07:18,720
connected it will announce the routes to

219
00:07:18,720 --> 00:07:20,960
the protected destination as

220
00:07:20,960 --> 00:07:23,039
so that all traffic is forwarded to a

221
00:07:23,039 --> 00:07:24,319
gatekeeper server

222
00:07:24,319 --> 00:07:26,000
so when a truck a client tries to

223
00:07:26,000 --> 00:07:28,160
connect or just send any traffic to the

224
00:07:28,160 --> 00:07:30,400
protected destination as

225
00:07:30,400 --> 00:07:32,080
the traffic is routed to the closest

226
00:07:32,080 --> 00:07:33,280
vantage point and that's where the

227
00:07:33,280 --> 00:07:35,520
traffic is first handled by gatekeeper

228
00:07:35,520 --> 00:07:37,599
so here we're showing three gatekeeper

229
00:07:37,599 --> 00:07:40,000
servers in parallel

230
00:07:40,000 --> 00:07:41,599
but it could be as little as one for

231
00:07:41,599 --> 00:07:43,840
each vantage point

232
00:07:43,840 --> 00:07:45,280
the main responsibility of these

233
00:07:45,280 --> 00:07:47,280
gatekeeper servers is to do

234
00:07:47,280 --> 00:07:50,160
upstream policy enforcement right so try

235
00:07:50,160 --> 00:07:51,680
to mitigate ddos attacks

236
00:07:51,680 --> 00:07:53,840
as close to the source of the traffic as

237
00:07:53,840 --> 00:07:55,360
possible

238
00:07:55,360 --> 00:07:57,520
so these responsibilities include

239
00:07:57,520 --> 00:07:59,280
forwarding requests

240
00:07:59,280 --> 00:08:01,520
and our system requests our first

241
00:08:01,520 --> 00:08:03,199
packets of new flows

242
00:08:03,199 --> 00:08:06,160
and those requests basically ask to

243
00:08:06,160 --> 00:08:07,360
allow this

244
00:08:07,360 --> 00:08:11,039
source destination flow to get some

245
00:08:11,039 --> 00:08:13,039
ability to just transmit packets to the

246
00:08:13,039 --> 00:08:14,560
destination as

247
00:08:14,560 --> 00:08:18,000
it's just requesting access

248
00:08:18,080 --> 00:08:20,160
the gatekeeper servers keep track of the

249
00:08:20,160 --> 00:08:21,919
decisions that are made

250
00:08:21,919 --> 00:08:24,479
about whether to allow this access and

251
00:08:24,479 --> 00:08:26,240
drop or rate limit traffic

252
00:08:26,240 --> 00:08:30,000
according to the decision that was made

253
00:08:30,000 --> 00:08:32,719
the decisions come in the form of bpf

254
00:08:32,719 --> 00:08:33,839
programs

255
00:08:33,839 --> 00:08:37,039
so each flow is assigned a bpf program

256
00:08:37,039 --> 00:08:39,360
and some small amount of state about 64

257
00:08:39,360 --> 00:08:40,559
bytes

258
00:08:40,559 --> 00:08:43,519
and with that state and bpf program we

259
00:08:43,519 --> 00:08:43,839
get

260
00:08:43,839 --> 00:08:47,760
flexible policies and software

261
00:08:47,920 --> 00:08:50,080
so if a gatekeeper server determines

262
00:08:50,080 --> 00:08:51,680
that the packets of a flow are allowed

263
00:08:51,680 --> 00:08:54,160
to be transmitted to the destination

264
00:08:54,160 --> 00:08:56,560
it will transmit them at the established

265
00:08:56,560 --> 00:08:58,640
rate limit but also encapsulate them

266
00:08:58,640 --> 00:09:01,519
along this path

267
00:09:02,240 --> 00:09:03,839
when the packets reach the destination

268
00:09:03,839 --> 00:09:05,839
as they're first picked up

269
00:09:05,839 --> 00:09:07,920
by our grantor server which is the

270
00:09:07,920 --> 00:09:10,000
complement to the gatekeeper server

271
00:09:10,000 --> 00:09:12,000
the grantor servers the centralized

272
00:09:12,000 --> 00:09:13,279
place where all of this

273
00:09:13,279 --> 00:09:15,519
policy decision making is done about

274
00:09:15,519 --> 00:09:16,959
which flows have access

275
00:09:16,959 --> 00:09:19,920
and at what rates so the grantor's

276
00:09:19,920 --> 00:09:21,440
responsibilities include

277
00:09:21,440 --> 00:09:23,839
making policy decisions about requests

278
00:09:23,839 --> 00:09:25,360
and installing those decisions at

279
00:09:25,360 --> 00:09:26,800
gatekeeper

280
00:09:26,800 --> 00:09:28,640
as well as decapsulating those

281
00:09:28,640 --> 00:09:30,880
encapsulated packets from gatekeeper

282
00:09:30,880 --> 00:09:32,480
and sending them to the ultimate

283
00:09:32,480 --> 00:09:35,440
destination server

284
00:09:35,600 --> 00:09:38,240
policies at grantor are written in lua

285
00:09:38,240 --> 00:09:40,000
so that you can more flexibly

286
00:09:40,000 --> 00:09:42,800
and software perform mappings between

287
00:09:42,800 --> 00:09:44,720
flows and what policies they should be

288
00:09:44,720 --> 00:09:45,680
enforced with

289
00:09:45,680 --> 00:09:50,160
at gatekeeper

290
00:09:50,160 --> 00:09:52,720
so to quickly summarize packets from

291
00:09:52,720 --> 00:09:55,680
clients are forwarded to the closest vps

292
00:09:55,680 --> 00:09:59,040
as a consequence of the anycast network

293
00:09:59,040 --> 00:10:00,720
gatekeeper servers then take those

294
00:10:00,720 --> 00:10:02,480
packets and forward them

295
00:10:02,480 --> 00:10:05,519
if they're new flows to grantor servers

296
00:10:05,519 --> 00:10:07,200
or if they're an established flow with

297
00:10:07,200 --> 00:10:08,880
the decision already made

298
00:10:08,880 --> 00:10:12,880
run a bpf program to decide what to do

299
00:10:12,880 --> 00:10:15,120
grantor servers for requests run a

300
00:10:15,120 --> 00:10:16,399
policy that maps

301
00:10:16,399 --> 00:10:19,519
flows to bpf programs and forwards

302
00:10:19,519 --> 00:10:22,240
granted packets to their destination

303
00:10:22,240 --> 00:10:24,320
and whenever grantor servers make those

304
00:10:24,320 --> 00:10:26,160
decisions about new flows

305
00:10:26,160 --> 00:10:28,240
they notify gatekeeper servers of what

306
00:10:28,240 --> 00:10:30,240
those policy decisions were

307
00:10:30,240 --> 00:10:31,600
then it's just up to the gatekeeper

308
00:10:31,600 --> 00:10:34,000
servers to enforce those the crux of the

309
00:10:34,000 --> 00:10:35,839
system though and what can really sort

310
00:10:35,839 --> 00:10:36,880
of make or break

311
00:10:36,880 --> 00:10:40,640
a gatekeeper deployment is the accuracy

312
00:10:40,640 --> 00:10:43,760
and the definition of these policies so

313
00:10:43,760 --> 00:10:45,200
next i'm going to spend a little bit

314
00:10:45,200 --> 00:10:48,240
more time kind of diving into

315
00:10:48,240 --> 00:10:49,600
what it would look like if you were to

316
00:10:49,600 --> 00:10:51,920
write a policy for your network

317
00:10:51,920 --> 00:10:54,720
so the first step in constructing

318
00:10:54,720 --> 00:10:56,880
policies for your own gatekeeper

319
00:10:56,880 --> 00:11:00,079
mitigation deployment is to identify all

320
00:11:00,079 --> 00:11:01,040
of the network

321
00:11:01,040 --> 00:11:04,640
profiles that you have by profile i mean

322
00:11:04,640 --> 00:11:07,440
some characteristics of a single server

323
00:11:07,440 --> 00:11:08,720
group of servers

324
00:11:08,720 --> 00:11:11,360
or just blocks of ip addresses that you

325
00:11:11,360 --> 00:11:12,399
can start to think

326
00:11:12,399 --> 00:11:14,000
you know what are the characteristics

327
00:11:14,000 --> 00:11:16,240
here and how can i define them

328
00:11:16,240 --> 00:11:19,760
so for example consider an outgoing

329
00:11:19,760 --> 00:11:21,600
email server

330
00:11:21,600 --> 00:11:23,279
something like that is going to have no

331
00:11:23,279 --> 00:11:25,360
listening sockets at least not once that

332
00:11:25,360 --> 00:11:26,079
should be

333
00:11:26,079 --> 00:11:28,640
exposed to the outside world and it's

334
00:11:28,640 --> 00:11:30,560
going to have a very small ingress

335
00:11:30,560 --> 00:11:32,959
traffic footprint

336
00:11:32,959 --> 00:11:35,120
so from this kind of high level

337
00:11:35,120 --> 00:11:36,399
description we can kind of

338
00:11:36,399 --> 00:11:38,640
start to put together what are the ports

339
00:11:38,640 --> 00:11:39,839
that should be allowed here what's the

340
00:11:39,839 --> 00:11:42,480
rate limit that should be allowed

341
00:11:42,480 --> 00:11:43,440
you might be able to pull this

342
00:11:43,440 --> 00:11:45,519
information from various configuration

343
00:11:45,519 --> 00:11:47,600
files that you already have

344
00:11:47,600 --> 00:11:49,680
the configuration of production servers

345
00:11:49,680 --> 00:11:51,200
or some other documentation

346
00:11:51,200 --> 00:11:54,079
in your organization

347
00:11:54,480 --> 00:11:55,600
once you've established what your

348
00:11:55,600 --> 00:11:58,480
network profiles are you can write bpf

349
00:11:58,480 --> 00:12:01,920
programs for each profile remember bpf

350
00:12:01,920 --> 00:12:02,880
programs are

351
00:12:02,880 --> 00:12:04,959
basically software defined policies that

352
00:12:04,959 --> 00:12:09,200
run upstream at gatekeeper servers

353
00:12:09,200 --> 00:12:11,120
we recommend that each one of these bpf

354
00:12:11,120 --> 00:12:13,120
programs classify packets

355
00:12:13,120 --> 00:12:16,320
into one of three different bins

356
00:12:16,320 --> 00:12:19,600
the first is a primary bin that has a

357
00:12:19,600 --> 00:12:21,839
kind of a baseline rate limit applied to

358
00:12:21,839 --> 00:12:22,800
it

359
00:12:22,800 --> 00:12:24,320
and this represents packets that are

360
00:12:24,320 --> 00:12:28,160
sort of the main purpose of the service

361
00:12:28,560 --> 00:12:30,160
aside from that though we also advocate

362
00:12:30,160 --> 00:12:32,079
for a secondary bin

363
00:12:32,079 --> 00:12:34,320
which consists of packets that are

364
00:12:34,320 --> 00:12:35,360
needed for the

365
00:12:35,360 --> 00:12:37,440
the service to operate but that

366
00:12:37,440 --> 00:12:39,200
shouldn't be present at the same

367
00:12:39,200 --> 00:12:41,440
kind of volume as the primary parts of

368
00:12:41,440 --> 00:12:42,800
the service

369
00:12:42,800 --> 00:12:44,800
so for example we need to allow tcp

370
00:12:44,800 --> 00:12:45,920
sends in

371
00:12:45,920 --> 00:12:48,560
but we shouldn't be allowing them in

372
00:12:48,560 --> 00:12:49,760
nearly at the rate as

373
00:12:49,760 --> 00:12:52,880
regular traffic or similarly

374
00:12:52,880 --> 00:12:55,040
we need to allow icmp in in order to

375
00:12:55,040 --> 00:12:57,040
diagnose problems with the network

376
00:12:57,040 --> 00:12:58,880
but again if we're seeing a large volume

377
00:12:58,880 --> 00:13:02,079
of that traffic that's something unusual

378
00:13:02,079 --> 00:13:04,240
so the secondary bin allows us to have a

379
00:13:04,240 --> 00:13:05,600
secondary rate limit

380
00:13:05,600 --> 00:13:08,720
for this other class of traffic and

381
00:13:08,720 --> 00:13:10,320
finally there's of course the bin

382
00:13:10,320 --> 00:13:13,440
of unwanted traffic this isn't just

383
00:13:13,440 --> 00:13:15,440
traffic that you have to do an explicit

384
00:13:15,440 --> 00:13:17,600
detection of an attack on

385
00:13:17,600 --> 00:13:19,440
this could be as simple as you know for

386
00:13:19,440 --> 00:13:21,600
this network profile

387
00:13:21,600 --> 00:13:24,000
i'm not allowing any of these ports or

388
00:13:24,000 --> 00:13:25,680
i'm only allowing port

389
00:13:25,680 --> 00:13:27,839
80. so anything beside that goes into

390
00:13:27,839 --> 00:13:30,720
the unwanted bin

391
00:13:31,279 --> 00:13:33,440
so the primary bandwidth limit for the

392
00:13:33,440 --> 00:13:34,800
primary bin

393
00:13:34,800 --> 00:13:36,800
that limit should be enforced before you

394
00:13:36,800 --> 00:13:38,560
try to classify the packet

395
00:13:38,560 --> 00:13:40,560
because that's always your baseline and

396
00:13:40,560 --> 00:13:42,240
then any secondary bandwidth limit

397
00:13:42,240 --> 00:13:42,959
happens

398
00:13:42,959 --> 00:13:46,240
after classification lastly

399
00:13:46,240 --> 00:13:49,360
we advocate for a negative bandwidth uh

400
00:13:49,360 --> 00:13:52,720
an enforcement policy so typically

401
00:13:52,720 --> 00:13:55,600
in a tip in a normal rate limit when a

402
00:13:55,600 --> 00:13:57,360
flow runs out of credits

403
00:13:57,360 --> 00:13:59,199
for whatever time interval it's

404
00:13:59,199 --> 00:14:00,399
currently in

405
00:14:00,399 --> 00:14:02,240
all of the packets will be dropped until

406
00:14:02,240 --> 00:14:03,680
the time interval is up and then its

407
00:14:03,680 --> 00:14:05,680
credits refill

408
00:14:05,680 --> 00:14:07,680
with gatekeeper you have the state to

409
00:14:07,680 --> 00:14:09,360
allow you to keep track of negative

410
00:14:09,360 --> 00:14:10,399
bandwidth

411
00:14:10,399 --> 00:14:12,560
in other words when a flow really

412
00:14:12,560 --> 00:14:14,639
misbehaves and send that sends it much

413
00:14:14,639 --> 00:14:15,519
past its allowed

414
00:14:15,519 --> 00:14:18,880
rate then you can keep track of that

415
00:14:18,880 --> 00:14:21,279
and continue to drop packets until the

416
00:14:21,279 --> 00:14:23,199
flow backs off enough

417
00:14:23,199 --> 00:14:24,959
for its credit level to become positive

418
00:14:24,959 --> 00:14:26,240
again

419
00:14:26,240 --> 00:14:28,079
this is a form of kind of real-time

420
00:14:28,079 --> 00:14:30,160
dynamic punishment

421
00:14:30,160 --> 00:14:32,720
of misbehaving flows that's all kept per

422
00:14:32,720 --> 00:14:33,440
state uh

423
00:14:33,440 --> 00:14:36,560
excuse me per flow

424
00:14:36,800 --> 00:14:38,480
so once you've defined these bpf

425
00:14:38,480 --> 00:14:40,639
programs then it's just a matter of

426
00:14:40,639 --> 00:14:41,279
mapping

427
00:14:41,279 --> 00:14:46,320
the flows to the bpf programs at grantor

428
00:14:46,320 --> 00:14:47,839
the simplest way of doing this is just

429
00:14:47,839 --> 00:14:50,079
to classify flows using the destination

430
00:14:50,079 --> 00:14:51,199
ip address

431
00:14:51,199 --> 00:14:53,760
so when grantor receives a new request

432
00:14:53,760 --> 00:14:55,040
for a new flow

433
00:14:55,040 --> 00:14:56,800
it looks at the destination ip address

434
00:14:56,800 --> 00:14:58,959
and decides well everything in this

435
00:14:58,959 --> 00:15:01,040
particular block that i know about

436
00:15:01,040 --> 00:15:03,519
like this slash 25 for example is for

437
00:15:03,519 --> 00:15:05,600
outgoing email servers

438
00:15:05,600 --> 00:15:07,519
so assign it the bpf program that i've

439
00:15:07,519 --> 00:15:11,120
written for outgoing email servers

440
00:15:11,120 --> 00:15:13,360
and remember that grantor servers run

441
00:15:13,360 --> 00:15:15,120
this as part of their policy

442
00:15:15,120 --> 00:15:17,040
and it's written in lua to be able to do

443
00:15:17,040 --> 00:15:18,880
things like keep track of

444
00:15:18,880 --> 00:15:21,839
longest prefix matching tables you could

445
00:15:21,839 --> 00:15:22,240
go

446
00:15:22,240 --> 00:15:24,480
beyond just destination ip addresses

447
00:15:24,480 --> 00:15:26,720
when trying to classify

448
00:15:26,720 --> 00:15:28,880
new flows you could also look at source

449
00:15:28,880 --> 00:15:30,639
ip addresses too

450
00:15:30,639 --> 00:15:32,639
this provides easy ways of rejecting

451
00:15:32,639 --> 00:15:34,399
bogons or well-known

452
00:15:34,399 --> 00:15:36,880
abusers and malware information that you

453
00:15:36,880 --> 00:15:39,279
could pull from various databases

454
00:15:39,279 --> 00:15:41,040
but it also allows you to tune the

455
00:15:41,040 --> 00:15:42,399
allotted bandwidth

456
00:15:42,399 --> 00:15:44,880
for particular partners or for specific

457
00:15:44,880 --> 00:15:47,199
countries or end users

458
00:15:47,199 --> 00:15:49,279
or return different profiles to entities

459
00:15:49,279 --> 00:15:50,639
like cdns

460
00:15:50,639 --> 00:15:53,040
or crawlers or particular offices in

461
00:15:53,040 --> 00:15:55,360
your organization

462
00:15:55,360 --> 00:15:56,800
if you want to get into this level of

463
00:15:56,800 --> 00:15:59,199
management we've provided this tool

464
00:15:59,199 --> 00:16:00,720
called drib

465
00:16:00,720 --> 00:16:02,720
which is also on github and just

466
00:16:02,720 --> 00:16:03,759
provides ways of

467
00:16:03,759 --> 00:16:05,440
kind of managing your ip address

468
00:16:05,440 --> 00:16:07,680
prefixes merging them

469
00:16:07,680 --> 00:16:10,240
prioritizing them just organizing them

470
00:16:10,240 --> 00:16:11,360
as a whole

471
00:16:11,360 --> 00:16:13,040
so you'd find it useful for your lua

472
00:16:13,040 --> 00:16:15,360
programs so that was a primer on how to

473
00:16:15,360 --> 00:16:15,680
write

474
00:16:15,680 --> 00:16:18,720
a destination policy let's now actually

475
00:16:18,720 --> 00:16:19,279
see

476
00:16:19,279 --> 00:16:22,320
kind of when you know the

477
00:16:22,320 --> 00:16:23,839
when all of this comes together how an

478
00:16:23,839 --> 00:16:27,440
actual attack would be mitigated

479
00:16:28,399 --> 00:16:30,240
although we do have a couple of ongoing

480
00:16:30,240 --> 00:16:31,440
deployments

481
00:16:31,440 --> 00:16:33,519
to evaluate this we just set up kind of

482
00:16:33,519 --> 00:16:36,160
an experimental testbed on

483
00:16:36,160 --> 00:16:39,519
aws because of some of the limitations

484
00:16:39,519 --> 00:16:40,480
of aws

485
00:16:40,480 --> 00:16:42,560
it's fairly small in general it just

486
00:16:42,560 --> 00:16:45,360
evaluates up to 10 gigabits per second

487
00:16:45,360 --> 00:16:47,040
and just has a couple of packet

488
00:16:47,040 --> 00:16:49,279
generators that are forging

489
00:16:49,279 --> 00:16:53,199
16 000 source ip addresses

490
00:16:53,199 --> 00:16:56,160
while all of these uh attack flows are

491
00:16:56,160 --> 00:16:57,680
occurring we also have a single

492
00:16:57,680 --> 00:16:59,600
legitimate client trying to upload

493
00:16:59,600 --> 00:17:03,120
a 20k file 50 times so this kind of

494
00:17:03,120 --> 00:17:05,119
represents the worst case scenario

495
00:17:05,119 --> 00:17:07,679
for a legitimate client right trying to

496
00:17:07,679 --> 00:17:08,799
upload a file

497
00:17:08,799 --> 00:17:10,720
when you're being bandwidth limited by a

498
00:17:10,720 --> 00:17:12,079
mitigation system

499
00:17:12,079 --> 00:17:14,720
during an attack and the other

500
00:17:14,720 --> 00:17:16,000
components that you would need right a

501
00:17:16,000 --> 00:17:17,359
gatekeeper server

502
00:17:17,359 --> 00:17:19,439
connected to a router that's connected

503
00:17:19,439 --> 00:17:20,799
to a grantor server

504
00:17:20,799 --> 00:17:22,559
and ultimately the destination web

505
00:17:22,559 --> 00:17:24,959
server

506
00:17:26,880 --> 00:17:29,039
so within this testbed we just wanted to

507
00:17:29,039 --> 00:17:31,120
run some kind of simple policy

508
00:17:31,120 --> 00:17:32,320
enforcement programs

509
00:17:32,320 --> 00:17:35,280
and see what the effect would be we

510
00:17:35,280 --> 00:17:37,120
found that even if we just do blind

511
00:17:37,120 --> 00:17:37,679
limits

512
00:17:37,679 --> 00:17:39,760
across attackers and across the

513
00:17:39,760 --> 00:17:40,960
legitimate client

514
00:17:40,960 --> 00:17:42,640
that's still effective in mitigating

515
00:17:42,640 --> 00:17:44,880
ddos attacks right we don't even have to

516
00:17:44,880 --> 00:17:45,679
try to

517
00:17:45,679 --> 00:17:48,160
pick out who the attacker is just by

518
00:17:48,160 --> 00:17:48,960
using

519
00:17:48,960 --> 00:17:51,520
kind of per flow rate limits it's enough

520
00:17:51,520 --> 00:17:53,039
to allow the legitimate client to get

521
00:17:53,039 --> 00:17:54,080
through

522
00:17:54,080 --> 00:17:57,280
let's look closer at the data so

523
00:17:57,280 --> 00:17:59,520
in the case where there's no defense at

524
00:17:59,520 --> 00:18:01,600
all the black line here

525
00:18:01,600 --> 00:18:02,799
the time that it takes for this

526
00:18:02,799 --> 00:18:05,679
legitimate client to upload that file

527
00:18:05,679 --> 00:18:08,799
increases exponentially even by around

528
00:18:08,799 --> 00:18:11,200
five or six gigabits per second

529
00:18:11,200 --> 00:18:12,960
it really it times out and is unable to

530
00:18:12,960 --> 00:18:14,960
upload the file

531
00:18:14,960 --> 00:18:16,960
so what happens if we put gatekeeper in

532
00:18:16,960 --> 00:18:19,200
the picture now and direct all attack

533
00:18:19,200 --> 00:18:20,400
and legitimate traffic through

534
00:18:20,400 --> 00:18:22,480
gatekeeper

535
00:18:22,480 --> 00:18:24,080
the blue line here shows what would

536
00:18:24,080 --> 00:18:26,480
happen if you enforced a 32

537
00:18:26,480 --> 00:18:30,480
k rate limit for all of these flows

538
00:18:30,480 --> 00:18:32,640
in that case now the legitimate client

539
00:18:32,640 --> 00:18:33,840
is able to have

540
00:18:33,840 --> 00:18:37,200
some kind of bounded expected time

541
00:18:37,200 --> 00:18:40,720
in actual real time to upload this file

542
00:18:40,720 --> 00:18:44,000
but it's limited by the bandwidth limit

543
00:18:44,000 --> 00:18:45,760
so if we increase that bandwidth limit a

544
00:18:45,760 --> 00:18:47,280
little bit to 64k

545
00:18:47,280 --> 00:18:49,679
or the red line the time for the

546
00:18:49,679 --> 00:18:51,679
legitimate client to transfer that file

547
00:18:51,679 --> 00:18:55,200
now goes down to four seconds

548
00:18:55,200 --> 00:18:57,039
of course if we keep increasing this

549
00:18:57,039 --> 00:18:59,200
limit eventually we're going to be able

550
00:18:59,200 --> 00:18:59,760
to let

551
00:18:59,760 --> 00:19:02,320
enough attack traffic in that it's going

552
00:19:02,320 --> 00:19:03,760
to start affecting the destination

553
00:19:03,760 --> 00:19:05,120
server

554
00:19:05,120 --> 00:19:06,880
so that's what you see with the green

555
00:19:06,880 --> 00:19:10,240
line at 128k

556
00:19:10,240 --> 00:19:12,720
now starting at around two gigabits per

557
00:19:12,720 --> 00:19:14,400
second of attack traffic

558
00:19:14,400 --> 00:19:16,080
enough is getting into overwhelm the

559
00:19:16,080 --> 00:19:18,080
destination server and drive up the

560
00:19:18,080 --> 00:19:19,200
legitimate client's

561
00:19:19,200 --> 00:19:22,320
file transfer time but

562
00:19:22,320 --> 00:19:24,960
remember that gatekeeper and its

563
00:19:24,960 --> 00:19:26,720
flexible software policies

564
00:19:26,720 --> 00:19:28,640
has the ability to enforce negative

565
00:19:28,640 --> 00:19:30,240
bandwidth

566
00:19:30,240 --> 00:19:33,600
so we also ran the 128 kilobit per

567
00:19:33,600 --> 00:19:34,640
second test

568
00:19:34,640 --> 00:19:36,840
but enforced that negative bandwidth

569
00:19:36,840 --> 00:19:39,200
constraint

570
00:19:39,200 --> 00:19:41,440
when this happens and attackers go

571
00:19:41,440 --> 00:19:44,080
beyond their credit limit

572
00:19:44,080 --> 00:19:46,559
and fall into credit debt then all of

573
00:19:46,559 --> 00:19:48,559
their packets are dropped indefinitely

574
00:19:48,559 --> 00:19:50,400
and the legitimate client is able to

575
00:19:50,400 --> 00:19:52,880
upload the file faster than in any of

576
00:19:52,880 --> 00:19:55,440
the cases that we measured

577
00:19:55,440 --> 00:19:57,120
we also tested what would happen during

578
00:19:57,120 --> 00:19:58,640
a sin flood

579
00:19:58,640 --> 00:20:01,120
so the syn flood test is a consequence

580
00:20:01,120 --> 00:20:03,440
of that secondary bandwidth limit

581
00:20:03,440 --> 00:20:05,360
so recall that we have a primary for

582
00:20:05,360 --> 00:20:06,720
most of your traffic

583
00:20:06,720 --> 00:20:08,720
and a secondary rate limit for things

584
00:20:08,720 --> 00:20:11,039
like tcp sends

585
00:20:11,039 --> 00:20:13,200
this is perfect for instantly mitigating

586
00:20:13,200 --> 00:20:15,120
a tcp syn attack

587
00:20:15,120 --> 00:20:18,159
because without a defense the the time

588
00:20:18,159 --> 00:20:19,679
that it takes for this legitimate client

589
00:20:19,679 --> 00:20:21,280
to upload a file

590
00:20:21,280 --> 00:20:24,159
increases exponentially but with that

591
00:20:24,159 --> 00:20:26,559
secondary limit applied

592
00:20:26,559 --> 00:20:28,799
most of the tcp syns from the attackers

593
00:20:28,799 --> 00:20:30,720
are now instantly dropped

594
00:20:30,720 --> 00:20:32,320
and the legitimate client is able to

595
00:20:32,320 --> 00:20:35,360
instantly connect and upload this file

596
00:20:35,360 --> 00:20:37,200
so now to conclude i just want to review

597
00:20:37,200 --> 00:20:38,640
some of the future work

598
00:20:38,640 --> 00:20:39,919
that we're planning on doing in our

599
00:20:39,919 --> 00:20:42,080
project so first

600
00:20:42,080 --> 00:20:44,640
in order to enable cheaper deployments

601
00:20:44,640 --> 00:20:45,200
right

602
00:20:45,200 --> 00:20:46,799
in order to kind of combine all of this

603
00:20:46,799 --> 00:20:48,559
ddos mitigation in as

604
00:20:48,559 --> 00:20:50,320
compact and as cheap of a package as

605
00:20:50,320 --> 00:20:53,200
possible we want to be able to support

606
00:20:53,200 --> 00:20:54,880
the nics with the highest capacity

607
00:20:54,880 --> 00:20:57,120
possible so we're working on supporting

608
00:20:57,120 --> 00:20:58,480
100 gigabit mix

609
00:20:58,480 --> 00:21:01,760
at line speed in order to

610
00:21:01,760 --> 00:21:04,080
enable a better return on investment for

611
00:21:04,080 --> 00:21:05,520
this kind of product

612
00:21:05,520 --> 00:21:07,280
we also want to support load balancing

613
00:21:07,280 --> 00:21:08,559
and policies

614
00:21:08,559 --> 00:21:11,360
we recognize that just having the

615
00:21:11,360 --> 00:21:13,360
resources try to manage

616
00:21:13,360 --> 00:21:15,039
what essentially boils down to just a

617
00:21:15,039 --> 00:21:18,080
single ddos mitigation service

618
00:21:18,080 --> 00:21:21,039
uh is is more management than you're

619
00:21:21,039 --> 00:21:21,840
currently doing

620
00:21:21,840 --> 00:21:23,760
so if we can include other applications

621
00:21:23,760 --> 00:21:25,200
like load balancing

622
00:21:25,200 --> 00:21:27,200
along with ddos mitigation inside of

623
00:21:27,200 --> 00:21:28,960
gatekeeper we think you'll get

624
00:21:28,960 --> 00:21:32,159
a better return on your investment and

625
00:21:32,159 --> 00:21:33,760
finally we're thinking to the future

626
00:21:33,760 --> 00:21:36,320
in terms of the end game for attackers

627
00:21:36,320 --> 00:21:38,400
in other words trying to overwhelm

628
00:21:38,400 --> 00:21:40,799
enough of the infrastructure that even

629
00:21:40,799 --> 00:21:42,240
systems like gatekeeper

630
00:21:42,240 --> 00:21:44,960
can't keep up with the number of flows

631
00:21:44,960 --> 00:21:46,240
in that case

632
00:21:46,240 --> 00:21:47,919
we're thinking of new ways of just

633
00:21:47,919 --> 00:21:49,600
trying to maintain some notion of

634
00:21:49,600 --> 00:21:50,480
fairness

635
00:21:50,480 --> 00:21:52,960
even when keeping track of state and

636
00:21:52,960 --> 00:21:54,559
rate limits these sorts of things

637
00:21:54,559 --> 00:21:57,600
isn't possible so to wrap up

638
00:21:57,600 --> 00:22:00,159
gatekeeper is an unparalleled

639
00:22:00,159 --> 00:22:01,120
multi-vector

640
00:22:01,120 --> 00:22:03,919
protection for ddos mitigation and this

641
00:22:03,919 --> 00:22:04,640
mitigation

642
00:22:04,640 --> 00:22:06,880
happens in seconds for an overwhelming

643
00:22:06,880 --> 00:22:08,720
majority of attacks

644
00:22:08,720 --> 00:22:11,360
it's also scalable and open source it's

645
00:22:11,360 --> 00:22:12,159
on github

646
00:22:12,159 --> 00:22:15,039
and it's ready for deployment finally we

647
00:22:15,039 --> 00:22:16,720
have some very impactful features

648
00:22:16,720 --> 00:22:19,679
in store for the future

649
00:22:20,159 --> 00:22:22,159
so please check us out on github it's at

650
00:22:22,159 --> 00:22:23,360
ultramyor

651
00:22:23,360 --> 00:22:25,440
gatekeeper or just search for gatekeeper

652
00:22:25,440 --> 00:22:26,400
ddos

653
00:22:26,400 --> 00:22:27,840
and with that we'd be happy to answer

654
00:22:27,840 --> 00:22:31,280
any questions you have thanks

655
00:22:33,039 --> 00:22:36,400
we have a few questions in the queue

656
00:22:36,400 --> 00:22:39,440
the first one first question how do we

657
00:22:39,440 --> 00:22:41,360
make sure these gatekeeper servers

658
00:22:41,360 --> 00:22:43,679
don't introduce more latency to the

659
00:22:43,679 --> 00:22:45,679
network

660
00:22:45,679 --> 00:22:47,840
yeah that's a great question so first of

661
00:22:47,840 --> 00:22:49,280
all we haven't measured this

662
00:22:49,280 --> 00:22:51,360
explicitly our deployments are sort of

663
00:22:51,360 --> 00:22:52,799
in their infancy

664
00:22:52,799 --> 00:22:54,880
but we actually went to sort of great

665
00:22:54,880 --> 00:22:56,880
lengths to make sure that gatekeepers

666
00:22:56,880 --> 00:22:58,559
performing and processing these packets

667
00:22:58,559 --> 00:23:01,600
quickly in particular we use dpdk

668
00:23:01,600 --> 00:23:04,320
right to bypass

669
00:23:06,480 --> 00:23:09,280
techniques pre-fetching batching we use

670
00:23:09,280 --> 00:23:10,720
co-routines

671
00:23:10,720 --> 00:23:12,880
to try to make this as fast as possible

672
00:23:12,880 --> 00:23:14,720
so like any on-path

673
00:23:14,720 --> 00:23:17,440
service it's going to add latency but

674
00:23:17,440 --> 00:23:19,039
we've tried to take steps to

675
00:23:19,039 --> 00:23:22,080
make that as small as possible

676
00:23:22,080 --> 00:23:25,280
you should expect a latency of uh less

677
00:23:25,280 --> 00:23:26,000
than 100

678
00:23:26,000 --> 00:23:29,200
microseconds so from what you use it

679
00:23:29,200 --> 00:23:32,159
won't be noticeable

680
00:23:34,320 --> 00:23:38,240
right great thank you for that um

681
00:23:38,240 --> 00:23:41,120
next question we have in the queue um

682
00:23:41,120 --> 00:23:42,159
what prevents

683
00:23:42,159 --> 00:23:44,880
the ddos attackers from simply targeting

684
00:23:44,880 --> 00:23:46,159
the grantor box

685
00:23:46,159 --> 00:23:48,320
itself as the weak link in the entire

686
00:23:48,320 --> 00:23:50,159
chain once that's down

687
00:23:50,159 --> 00:23:51,760
or can no longer communicate with the

688
00:23:51,760 --> 00:23:53,200
gatekeeper box these

689
00:23:53,200 --> 00:23:56,000
boxes no policy updates can happen to

690
00:23:56,000 --> 00:23:58,080
protect the target box

691
00:23:58,080 --> 00:24:00,159
yeah so the part of the architecture

692
00:24:00,159 --> 00:24:01,279
that's preventing that

693
00:24:01,279 --> 00:24:03,919
is the grantor servers in the protected

694
00:24:03,919 --> 00:24:05,919
destination network

695
00:24:05,919 --> 00:24:08,240
but since we created anycast network

696
00:24:08,240 --> 00:24:10,640
through bgp announcements at the edge

697
00:24:10,640 --> 00:24:13,840
all traffic even that's trying to get to

698
00:24:13,840 --> 00:24:15,600
grand tour servers is directed first

699
00:24:15,600 --> 00:24:16,880
through gatekeeper servers

700
00:24:16,880 --> 00:24:20,080
so it would be mitigated there

701
00:24:20,799 --> 00:24:22,559
we can also compliment that the grantor

702
00:24:22,559 --> 00:24:24,640
server is not accessible outside of your

703
00:24:24,640 --> 00:24:25,760
network

704
00:24:25,760 --> 00:24:29,760
so there is no way someone outside can

705
00:24:29,760 --> 00:24:32,159
send directly packaged to the grantor

706
00:24:32,159 --> 00:24:33,520
and on top of that there is

707
00:24:33,520 --> 00:24:35,279
one aspect that is not covered in this

708
00:24:35,279 --> 00:24:36,880
presentation for the time

709
00:24:36,880 --> 00:24:39,919
limitations is that only um

710
00:24:39,919 --> 00:24:42,640
typical only five percent of all the

711
00:24:42,640 --> 00:24:44,320
traffic

712
00:24:44,320 --> 00:24:47,919
goes to the and that includes all the

713
00:24:47,919 --> 00:24:50,400
new uh new flows that are being

714
00:24:50,400 --> 00:24:51,919
established once they are established

715
00:24:51,919 --> 00:24:53,600
there are they are not necessarily go to

716
00:24:53,600 --> 00:24:54,960
the grantor

717
00:24:54,960 --> 00:24:57,200
uh some of the the information the

718
00:24:57,200 --> 00:24:58,960
presentation has been simplified so you

719
00:24:58,960 --> 00:25:00,159
have a

720
00:25:00,159 --> 00:25:03,919
broad view of how the system works

721
00:25:05,279 --> 00:25:07,760
all right thank you for that uh we've

722
00:25:07,760 --> 00:25:09,760
got three questions in five minutes to

723
00:25:09,760 --> 00:25:10,799
go through them so

724
00:25:10,799 --> 00:25:12,960
uh unfortunately i don't i don't think

725
00:25:12,960 --> 00:25:14,480
we can take any more questions

726
00:25:14,480 --> 00:25:17,039
so i'll start with the remaining ones um

727
00:25:17,039 --> 00:25:18,240
the next question

728
00:25:18,240 --> 00:25:20,880
in your blind limit slide charts using

729
00:25:20,880 --> 00:25:22,320
negative credits

730
00:25:22,320 --> 00:25:24,640
would also degrade higher than typical

731
00:25:24,640 --> 00:25:26,320
client upload performance

732
00:25:26,320 --> 00:25:28,960
is that the correct read aka negative

733
00:25:28,960 --> 00:25:30,480
credits of the potential degrade

734
00:25:30,480 --> 00:25:32,880
performance outcomes for some clients

735
00:25:32,880 --> 00:25:35,919
and uses if not carefully managed not

736
00:25:35,919 --> 00:25:37,360
saying this is a big problem just a

737
00:25:37,360 --> 00:25:40,000
question to confirm

738
00:25:40,000 --> 00:25:42,080
yeah it's that's basically true although

739
00:25:42,080 --> 00:25:43,360
as the as you mentioned

740
00:25:43,360 --> 00:25:45,840
those are blind limits applied for

741
00:25:45,840 --> 00:25:47,520
everyone and there's there's nothing

742
00:25:47,520 --> 00:25:49,279
saying that those blind limits have to

743
00:25:49,279 --> 00:25:50,720
be applied that way

744
00:25:50,720 --> 00:25:52,960
um grantsor can make decisions about

745
00:25:52,960 --> 00:25:54,480
what traffic to grant

746
00:25:54,480 --> 00:25:56,400
and at what rates using anything it

747
00:25:56,400 --> 00:25:57,760
wants right it can pull from

748
00:25:57,760 --> 00:26:00,480
external databases it can do some kind

749
00:26:00,480 --> 00:26:01,360
of learning

750
00:26:01,360 --> 00:26:04,480
it can uh you know look at reputation

751
00:26:04,480 --> 00:26:07,520
and it can adjust uh in at runtime as

752
00:26:07,520 --> 00:26:08,000
well

753
00:26:08,000 --> 00:26:11,840
so uh those maybe lower limits would be

754
00:26:11,840 --> 00:26:13,440
applied to what it might perceive as

755
00:26:13,440 --> 00:26:14,640
attackers

756
00:26:14,640 --> 00:26:16,960
um but in the worst case yeah those

757
00:26:16,960 --> 00:26:18,159
kinds of limits might also hit

758
00:26:18,159 --> 00:26:20,960
legitimate clients

759
00:26:22,840 --> 00:26:26,159
okay thank you for that um

760
00:26:26,159 --> 00:26:29,279
next question how diversely do i have to

761
00:26:29,279 --> 00:26:29,840
deploy

762
00:26:29,840 --> 00:26:32,480
vps in order for in order to make the

763
00:26:32,480 --> 00:26:33,760
system useful

764
00:26:33,760 --> 00:26:35,919
for example does a single vp with a

765
00:26:35,919 --> 00:26:38,960
single grantor do me any good

766
00:26:38,960 --> 00:26:40,480
i think it can yeah michelle do you want

767
00:26:40,480 --> 00:26:42,799
to take that one yes

768
00:26:42,799 --> 00:26:45,919
it does help the need of

769
00:26:45,919 --> 00:26:48,480
a larger number of vp has to do with

770
00:26:48,480 --> 00:26:50,720
your user base

771
00:26:50,720 --> 00:26:53,039
there is one paper that hasn't been

772
00:26:53,039 --> 00:26:55,279
published here that we released

773
00:26:55,279 --> 00:26:59,200
that we were able to show that with 5vp

774
00:26:59,200 --> 00:27:03,440
not only you can have global coverage

775
00:27:03,440 --> 00:27:06,159
but it's large enough to protect even

776
00:27:06,159 --> 00:27:08,320
against very advanced attacks like

777
00:27:08,320 --> 00:27:11,679
crossfire so

778
00:27:11,679 --> 00:27:14,559
although that paperwork is very generic

779
00:27:14,559 --> 00:27:16,640
it points out that even a small number

780
00:27:16,640 --> 00:27:17,919
of vps

781
00:27:17,919 --> 00:27:21,279
has a very large impact in one of these

782
00:27:21,279 --> 00:27:22,960
model points that we have experienced

783
00:27:22,960 --> 00:27:23,919
with

784
00:27:23,919 --> 00:27:27,679
a single vp if it has significant part

785
00:27:27,679 --> 00:27:29,600
of your traffic it is still very impact

786
00:27:29,600 --> 00:27:35,840
for the overall

787
00:27:35,919 --> 00:27:38,960
okay thank you for that um

788
00:27:38,960 --> 00:27:41,200
and this is our last question and

789
00:27:41,200 --> 00:27:42,480
hopefully we'll be ending up right in

790
00:27:42,480 --> 00:27:43,919
time for next talk

791
00:27:43,919 --> 00:27:45,919
are there any concerns when traffic is

792
00:27:45,919 --> 00:27:47,760
asynchronous at a data center

793
00:27:47,760 --> 00:27:49,440
for example when it comes into data

794
00:27:49,440 --> 00:27:51,440
center a via anycast

795
00:27:51,440 --> 00:27:53,840
but the response comes from data center

796
00:27:53,840 --> 00:27:55,600
b

797
00:27:55,600 --> 00:27:57,440
gotcha great question so there's not

798
00:27:57,440 --> 00:27:59,039
really any concerns in that case

799
00:27:59,039 --> 00:28:01,279
because the architecture is really one

800
00:28:01,279 --> 00:28:02,159
way right the

801
00:28:02,159 --> 00:28:04,880
anycast traffic comes through the system

802
00:28:04,880 --> 00:28:06,240
but the reverse path

803
00:28:06,240 --> 00:28:08,080
it doesn't really matter uh which path

804
00:28:08,080 --> 00:28:09,919
it takes for practical reasons

805
00:28:09,919 --> 00:28:11,760
it's probably going to go back out

806
00:28:11,760 --> 00:28:13,679
through the same data center

807
00:28:13,679 --> 00:28:14,960
at least that's been our experience so

808
00:28:14,960 --> 00:28:16,720
far but there's no requirement for that

809
00:28:16,720 --> 00:28:17,279
to happen

810
00:28:17,279 --> 00:28:18,799
and the system doesn't change in any way

811
00:28:18,799 --> 00:28:21,520
if that doesn't happen

812
00:28:22,640 --> 00:28:25,360
i can compliment a little bit what code

813
00:28:25,360 --> 00:28:25,919
said

814
00:28:25,919 --> 00:28:28,960
about the system being one way is that

815
00:28:28,960 --> 00:28:29,360
um

816
00:28:29,360 --> 00:28:31,279
i would like to open your mind that the

817
00:28:31,279 --> 00:28:32,559
way the presentation

818
00:28:32,559 --> 00:28:35,520
was designed was to make it as simple as

819
00:28:35,520 --> 00:28:36,480
possible

820
00:28:36,480 --> 00:28:38,960
but if there is interest for example to

821
00:28:38,960 --> 00:28:39,600
protect

822
00:28:39,600 --> 00:28:41,520
the other way around meaning to your

823
00:28:41,520 --> 00:28:43,039
customers for example

824
00:28:43,039 --> 00:28:47,039
providing let's say a bandwidth

825
00:28:47,039 --> 00:28:50,320
for gamers they want to be protected as

826
00:28:50,320 --> 00:28:50,720
they

827
00:28:50,720 --> 00:28:53,520
declined not as the servers and

828
00:28:53,520 --> 00:28:55,120
gatekeeper could be deployed the other

829
00:28:55,120 --> 00:28:56,159
way around

830
00:28:56,159 --> 00:28:59,360
so you can have both ways production but

831
00:28:59,360 --> 00:29:02,080
if a size causes answer there is no

832
00:29:02,080 --> 00:29:03,520
requirements for

833
00:29:03,520 --> 00:29:06,240
from where the packets go out they could

834
00:29:06,240 --> 00:29:08,480
go through the same path

835
00:29:08,480 --> 00:29:13,840
reverse path or any other data center

836
00:29:15,919 --> 00:29:18,480
all right okay well thank you very much

837
00:29:18,480 --> 00:29:20,799
um

838
00:29:21,039 --> 00:29:24,320
that concludes your talk and thank you

839
00:29:24,320 --> 00:29:26,000
again for your time

840
00:29:26,000 --> 00:29:28,880
with cody michelle and john and uh

841
00:29:28,880 --> 00:29:29,840
appreciate the

842
00:29:29,840 --> 00:29:34,639
q a and the presentation

843
00:29:38,840 --> 00:29:40,960
thanks

844
00:29:40,960 --> 00:29:43,039
you

