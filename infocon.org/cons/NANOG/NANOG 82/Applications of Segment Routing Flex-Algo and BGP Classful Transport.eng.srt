1
00:00:00,000 --> 00:00:05,120
[Music]

2
00:00:05,120 --> 00:00:06,720
hi everyone welcome to this session

3
00:00:06,720 --> 00:00:08,960
which is on the topic of flex algo

4
00:00:08,960 --> 00:00:11,840
and bgp class 4 transport my name is

5
00:00:11,840 --> 00:00:14,320
julian bluchak

6
00:00:14,320 --> 00:00:17,279
so before we talk about the main part of

7
00:00:17,279 --> 00:00:18,000
the

8
00:00:18,000 --> 00:00:21,520
um talk here's a overview of the segment

9
00:00:21,520 --> 00:00:22,240
routing

10
00:00:22,240 --> 00:00:24,560
landscape as you know segment routing

11
00:00:24,560 --> 00:00:26,480
has been around for about eight years

12
00:00:26,480 --> 00:00:27,359
now in terms of

13
00:00:27,359 --> 00:00:30,240
ietf drafts and it's been deployed in

14
00:00:30,240 --> 00:00:31,599
many networks

15
00:00:31,599 --> 00:00:34,320
worldwide now if you look at the main

16
00:00:34,320 --> 00:00:36,640
branches of this

17
00:00:36,640 --> 00:00:39,040
layout then one of the branches on the

18
00:00:39,040 --> 00:00:41,440
right hand side is traffic engineering

19
00:00:41,440 --> 00:00:44,239
and people can do segment routing

20
00:00:44,239 --> 00:00:46,399
traffic engineering using distributed

21
00:00:46,399 --> 00:00:49,280
te but nowadays people increasingly are

22
00:00:49,280 --> 00:00:51,199
using central controllers and that lends

23
00:00:51,199 --> 00:00:52,960
itself very much to

24
00:00:52,960 --> 00:00:55,199
self-driving networks things like

25
00:00:55,199 --> 00:00:57,120
automated congestion avoidance

26
00:00:57,120 --> 00:01:00,800
automated self-healing and automated

27
00:01:00,800 --> 00:01:03,120
egress peering engineering and then the

28
00:01:03,120 --> 00:01:04,799
other branch on the left-hand side is

29
00:01:04,799 --> 00:01:05,600
shortest path

30
00:01:05,600 --> 00:01:08,640
routing and people often

31
00:01:08,640 --> 00:01:11,920
use sr as a vehicle for migrating away

32
00:01:11,920 --> 00:01:12,240
from

33
00:01:12,240 --> 00:01:14,880
ldp using the sr version of shortest

34
00:01:14,880 --> 00:01:15,920
path routing

35
00:01:15,920 --> 00:01:17,840
and also an aspect of shortest path

36
00:01:17,840 --> 00:01:19,840
routing is flex algo which we'll be

37
00:01:19,840 --> 00:01:20,799
talking about

38
00:01:20,799 --> 00:01:24,479
a lot during this session and then bgp

39
00:01:24,479 --> 00:01:25,439
class 4

40
00:01:25,439 --> 00:01:28,320
transport that's another topic for today

41
00:01:28,320 --> 00:01:29,200
but it's not

42
00:01:29,200 --> 00:01:31,200
in this diagram because this diagram is

43
00:01:31,200 --> 00:01:32,880
talking more about what happens

44
00:01:32,880 --> 00:01:35,759
within a given domain well egp

45
00:01:35,759 --> 00:01:37,280
classified transport is talking about

46
00:01:37,280 --> 00:01:37,920
how we

47
00:01:37,920 --> 00:01:41,439
glue different domains together

48
00:01:41,439 --> 00:01:44,640
so with that i'll go on to the first of

49
00:01:44,640 --> 00:01:45,280
the

50
00:01:45,280 --> 00:01:47,360
topics i'm going to cover which is

51
00:01:47,360 --> 00:01:48,399
applications

52
00:01:48,399 --> 00:01:51,920
of flex algo and what i'll be

53
00:01:51,920 --> 00:01:54,000
talking about in particular is the

54
00:01:54,000 --> 00:01:55,280
applications and

55
00:01:55,280 --> 00:01:57,840
use cases of flex algo if you want to

56
00:01:57,840 --> 00:01:59,360
know more about the underlying protocol

57
00:01:59,360 --> 00:02:00,399
machinery

58
00:02:00,399 --> 00:02:02,320
how flex algo definitions are

59
00:02:02,320 --> 00:02:04,479
communicated using the igp

60
00:02:04,479 --> 00:02:06,840
then i'd refer you to strada's talk from

61
00:02:06,840 --> 00:02:09,440
nanog81

62
00:02:09,440 --> 00:02:11,440
so let's have a look at this first

63
00:02:11,440 --> 00:02:12,720
example of

64
00:02:12,720 --> 00:02:16,080
flexalgo and so what we've got is

65
00:02:16,080 --> 00:02:19,280
a topology where i'm assuming that the

66
00:02:19,280 --> 00:02:22,080
metrics are the same on each link within

67
00:02:22,080 --> 00:02:23,760
the topology

68
00:02:23,760 --> 00:02:26,400
and we've got the normal igp topology

69
00:02:26,400 --> 00:02:28,080
which i call the

70
00:02:28,080 --> 00:02:30,480
gray topology and all of the nodes in

71
00:02:30,480 --> 00:02:31,440
the diagram

72
00:02:31,440 --> 00:02:34,959
are members of that and then we have two

73
00:02:34,959 --> 00:02:37,120
flex algos set up in this network we

74
00:02:37,120 --> 00:02:38,879
have the blue flex algo

75
00:02:38,879 --> 00:02:40,800
the routers on the top part of the

76
00:02:40,800 --> 00:02:42,319
diagram are members of that

77
00:02:42,319 --> 00:02:43,760
and then you've got the other routers

78
00:02:43,760 --> 00:02:45,760
which are members of the

79
00:02:45,760 --> 00:02:49,120
red flex algo and from the

80
00:02:49,120 --> 00:02:52,560
um said point of view um each node will

81
00:02:52,560 --> 00:02:54,000
have a different

82
00:02:54,000 --> 00:02:56,879
node sid for each topology that it's a

83
00:02:56,879 --> 00:02:57,920
member of

84
00:02:57,920 --> 00:03:00,000
and so by way of example we can look at

85
00:03:00,000 --> 00:03:01,599
pe3

86
00:03:01,599 --> 00:03:04,480
and it's a member of the default gray

87
00:03:04,480 --> 00:03:06,560
topology and so there's a sid associated

88
00:03:06,560 --> 00:03:07,440
with that

89
00:03:07,440 --> 00:03:11,200
the value 3003 um in this example

90
00:03:11,200 --> 00:03:13,200
and then it's a member of the blue flex

91
00:03:13,200 --> 00:03:15,360
algo and so it's got a sid associated

92
00:03:15,360 --> 00:03:16,480
with that with a value

93
00:03:16,480 --> 00:03:18,879
1003 and both of those are associated

94
00:03:18,879 --> 00:03:20,319
with its loot pack address which you can

95
00:03:20,319 --> 00:03:23,040
see is 10.0.0.3

96
00:03:23,040 --> 00:03:25,599
then in a similar vein pe 4 that's a

97
00:03:25,599 --> 00:03:27,440
member of the default great apology and

98
00:03:27,440 --> 00:03:28,319
it's sid

99
00:03:28,319 --> 00:03:31,519
associated with that is 3004 and then

100
00:03:31,519 --> 00:03:34,000
it's a member of the red flecks algo and

101
00:03:34,000 --> 00:03:35,120
so it has a sid

102
00:03:35,120 --> 00:03:38,159
associated with that which is 2004

103
00:03:38,159 --> 00:03:40,879
and all of the information necessary for

104
00:03:40,879 --> 00:03:41,680
the other nodes

105
00:03:41,680 --> 00:03:44,720
to know these sid values is communicated

106
00:03:44,720 --> 00:03:45,200
via

107
00:03:45,200 --> 00:03:47,120
igp extensions and so all of the nodes

108
00:03:47,120 --> 00:03:48,560
in the network will know these

109
00:03:48,560 --> 00:03:50,560
um different sid values and each of

110
00:03:50,560 --> 00:03:52,159
these nodes will also have

111
00:03:52,159 --> 00:03:53,680
different sid values as well but they're

112
00:03:53,680 --> 00:03:55,840
just not shown in the diagram

113
00:03:55,840 --> 00:03:58,400
for reasons of clarity and then what

114
00:03:58,400 --> 00:03:59,280
happens is

115
00:03:59,280 --> 00:04:02,400
that each node performs separate

116
00:04:02,400 --> 00:04:04,959
spf calculations shortest path first

117
00:04:04,959 --> 00:04:06,640
calculations

118
00:04:06,640 --> 00:04:09,599
for each topology that it's a member of

119
00:04:09,599 --> 00:04:12,480
and so if you take pe1 as an example

120
00:04:12,480 --> 00:04:15,280
it's doing one set of spf calculations

121
00:04:15,280 --> 00:04:16,880
as a consequence of its membership of

122
00:04:16,880 --> 00:04:18,399
the great topology

123
00:04:18,399 --> 00:04:20,560
and a completely separate set of spf

124
00:04:20,560 --> 00:04:21,680
calculations

125
00:04:21,680 --> 00:04:23,600
as a consequence of its membership of

126
00:04:23,600 --> 00:04:25,600
the blue and flex algo

127
00:04:25,600 --> 00:04:28,080
and in general or at least sometimes the

128
00:04:28,080 --> 00:04:30,479
outcomes of those calculations could be

129
00:04:30,479 --> 00:04:32,639
um different because the topologies are

130
00:04:32,639 --> 00:04:33,759
different

131
00:04:33,759 --> 00:04:35,919
so now we can look at an example of

132
00:04:35,919 --> 00:04:37,120
sending traffic

133
00:04:37,120 --> 00:04:40,080
across these various topologies so first

134
00:04:40,080 --> 00:04:41,759
of all let's have a look at an example

135
00:04:41,759 --> 00:04:42,080
where

136
00:04:42,080 --> 00:04:45,199
pe1 wants to send traffic using

137
00:04:45,199 --> 00:04:47,680
the vanilla great topology so you know

138
00:04:47,680 --> 00:04:49,520
we're not too fussed about what path

139
00:04:49,520 --> 00:04:52,800
this traffic takes across the network

140
00:04:52,800 --> 00:04:55,759
and so pe one launching traffic into

141
00:04:55,759 --> 00:04:56,000
this

142
00:04:56,000 --> 00:04:59,199
gray topology uses the um

143
00:04:59,199 --> 00:05:01,759
node sid associated with the destination

144
00:05:01,759 --> 00:05:03,680
node which for the great topology

145
00:05:03,680 --> 00:05:07,199
um is 3003 as you can see here

146
00:05:07,199 --> 00:05:09,440
and so pe1 when it did its spf

147
00:05:09,440 --> 00:05:10,720
calculations

148
00:05:10,720 --> 00:05:13,919
in the context of the grey um topology

149
00:05:13,919 --> 00:05:16,720
um realized that it has two shortest

150
00:05:16,720 --> 00:05:19,600
path neighbors towards destination pe3

151
00:05:19,600 --> 00:05:23,360
those being p1 and p2 and so ecmp is the

152
00:05:23,360 --> 00:05:24,160
traffic across

153
00:05:24,160 --> 00:05:27,440
those um two next hops likewise p2 can

154
00:05:27,440 --> 00:05:29,440
see p3 and p4 as

155
00:05:29,440 --> 00:05:32,479
um next neighbors as does p1 and so the

156
00:05:32,479 --> 00:05:35,360
ecmp across p3 and p4 so you can see the

157
00:05:35,360 --> 00:05:38,160
traffic makes its way from p1 to pe3

158
00:05:38,160 --> 00:05:40,000
across the network using these various

159
00:05:40,000 --> 00:05:41,280
ecmp

160
00:05:41,280 --> 00:05:45,039
paths so that's for the vanilla traffic

161
00:05:45,039 --> 00:05:46,720
now in contrast we can look at what

162
00:05:46,720 --> 00:05:48,560
happens if we launch traffic onto a

163
00:05:48,560 --> 00:05:51,440
flexalgo and so in this example pe1

164
00:05:51,440 --> 00:05:52,000
wants to send

165
00:05:52,000 --> 00:05:54,479
some other traffic to pe3 but it wants

166
00:05:54,479 --> 00:05:55,680
it to be confined

167
00:05:55,680 --> 00:05:59,440
to the blue flexalgo so what it does is

168
00:05:59,440 --> 00:06:01,360
to put onto the packets the

169
00:06:01,360 --> 00:06:05,280
sid associated with pe3's membership of

170
00:06:05,280 --> 00:06:08,000
the blue flecks algo 1003

171
00:06:08,000 --> 00:06:11,600
now when pe one did its spf calculations

172
00:06:11,600 --> 00:06:14,479
in the context of the blue um flex algo

173
00:06:14,479 --> 00:06:16,000
it realized that its

174
00:06:16,000 --> 00:06:19,199
only viable next top neighbor

175
00:06:19,199 --> 00:06:21,840
was p1 because p2 isn't even a member of

176
00:06:21,840 --> 00:06:23,360
the blue flex august that would have

177
00:06:23,360 --> 00:06:23,919
been

178
00:06:23,919 --> 00:06:27,840
automatically discounted and so p1 sends

179
00:06:27,840 --> 00:06:29,680
the traffic only to p1

180
00:06:29,680 --> 00:06:34,000
and p1 in turn realizes that only p3

181
00:06:34,000 --> 00:06:37,440
is the next top neighbor towards pe3 and

182
00:06:37,440 --> 00:06:39,120
sends it only to p3

183
00:06:39,120 --> 00:06:40,800
and so in that way it makes its way

184
00:06:40,800 --> 00:06:43,840
horizontally across the diagram to pe3

185
00:06:43,840 --> 00:06:46,720
in a similar vein um pe2 wants to send

186
00:06:46,720 --> 00:06:47,199
traffic

187
00:06:47,199 --> 00:06:50,400
to pe 4 using

188
00:06:50,400 --> 00:06:52,960
only the red fleck salgo and so it puts

189
00:06:52,960 --> 00:06:54,240
on the

190
00:06:54,240 --> 00:06:56,720
sid value associated with pe 4's

191
00:06:56,720 --> 00:06:57,919
loopback address

192
00:06:57,919 --> 00:07:01,039
2004 sensor traffic to p2

193
00:07:01,039 --> 00:07:02,960
only because that's the only viable

194
00:07:02,960 --> 00:07:04,479
neighbor in the context of the red fleck

195
00:07:04,479 --> 00:07:05,120
salgo

196
00:07:05,120 --> 00:07:07,199
and so in that way it makes its way to

197
00:07:07,199 --> 00:07:08,319
pe4

198
00:07:08,319 --> 00:07:11,039
as shown by those red arrows and so in

199
00:07:11,039 --> 00:07:11,440
fact

200
00:07:11,440 --> 00:07:13,440
this slide illustrates the very first

201
00:07:13,440 --> 00:07:14,560
use case of flex

202
00:07:14,560 --> 00:07:17,360
algo when flexag was first invented

203
00:07:17,360 --> 00:07:18,800
which was to

204
00:07:18,800 --> 00:07:20,639
achieve plane enforcement in a network

205
00:07:20,639 --> 00:07:21,919
where you've got two planes

206
00:07:21,919 --> 00:07:23,599
you put each plane into a different flex

207
00:07:23,599 --> 00:07:25,039
algo and if you want to

208
00:07:25,039 --> 00:07:27,680
define or if you want to confine traffic

209
00:07:27,680 --> 00:07:29,680
to a particular plane

210
00:07:29,680 --> 00:07:31,440
you make sure you launch it into the

211
00:07:31,440 --> 00:07:33,599
corresponding and flexagon that means

212
00:07:33,599 --> 00:07:35,919
there's no way that it can jump across

213
00:07:35,919 --> 00:07:37,599
one of those diagonal crosslinks to the

214
00:07:37,599 --> 00:07:39,680
other plane so this is very good for

215
00:07:39,680 --> 00:07:42,160
high availability services where you're

216
00:07:42,160 --> 00:07:43,919
deliberately sending duplicate traffic

217
00:07:43,919 --> 00:07:45,280
in a live live fashion

218
00:07:45,280 --> 00:07:46,960
across the network this is often used

219
00:07:46,960 --> 00:07:49,199
for um financial market data

220
00:07:49,199 --> 00:07:52,639
or broadcast videos it's a very neat

221
00:07:52,639 --> 00:07:53,919
application of

222
00:07:53,919 --> 00:07:57,919
flex algo now in this example

223
00:07:57,919 --> 00:08:00,160
each node was a member of only one flex

224
00:08:00,160 --> 00:08:01,599
hour ago in addition to

225
00:08:01,599 --> 00:08:04,879
the you know defaults great topology

226
00:08:04,879 --> 00:08:06,319
of course in general a node could be a

227
00:08:06,319 --> 00:08:08,400
member of multiple flicks algos

228
00:08:08,400 --> 00:08:10,080
so here's another example so you can see

229
00:08:10,080 --> 00:08:12,080
the physical topology shown in grey on

230
00:08:12,080 --> 00:08:13,680
the top half of the slide

231
00:08:13,680 --> 00:08:15,919
if you look at the red flecks algo on

232
00:08:15,919 --> 00:08:17,039
the bottom right

233
00:08:17,039 --> 00:08:19,280
you can see that only a subset of nodes

234
00:08:19,280 --> 00:08:21,680
and links are members of it and so

235
00:08:21,680 --> 00:08:25,440
for example p5 is not a member of the

236
00:08:25,440 --> 00:08:28,400
redflex algo while it is a member of the

237
00:08:28,400 --> 00:08:30,160
blueflex algo on the other hand some of

238
00:08:30,160 --> 00:08:31,280
the other nodes p1

239
00:08:31,280 --> 00:08:35,279
p2 p3 and p4 are members of both of the

240
00:08:35,279 --> 00:08:37,360
flex algos and some of the links are

241
00:08:37,360 --> 00:08:39,279
members of both flex algos and some are

242
00:08:39,279 --> 00:08:40,640
members of only

243
00:08:40,640 --> 00:08:42,479
one of the flex sagas you can see and so

244
00:08:42,479 --> 00:08:45,600
in general with flex algo you can

245
00:08:45,600 --> 00:08:48,240
have a subset of nodes and links being

246
00:08:48,240 --> 00:08:48,720
members

247
00:08:48,720 --> 00:08:51,279
of that particular flex algo according

248
00:08:51,279 --> 00:08:51,920
to your

249
00:08:51,920 --> 00:08:55,360
particular needs so now we're in a

250
00:08:55,360 --> 00:08:56,480
position where we can look at

251
00:08:56,480 --> 00:09:01,120
another example um in some cases

252
00:09:01,120 --> 00:09:03,600
you might have different types of

253
00:09:03,600 --> 00:09:04,320
traffic

254
00:09:04,320 --> 00:09:07,600
using your common network infrastructure

255
00:09:07,600 --> 00:09:09,279
and those different traffic types might

256
00:09:09,279 --> 00:09:11,040
have different goals in terms of what

257
00:09:11,040 --> 00:09:12,640
type of metric

258
00:09:12,640 --> 00:09:15,279
they need a classic example is where

259
00:09:15,279 --> 00:09:17,040
you've got some delay sensitive traffic

260
00:09:17,040 --> 00:09:18,240
and for that you'd

261
00:09:18,240 --> 00:09:20,640
want to use a metric proportional to the

262
00:09:20,640 --> 00:09:22,399
latency of the

263
00:09:22,399 --> 00:09:23,839
link on the other hand for things like

264
00:09:23,839 --> 00:09:25,760
bulk internet traffic you want the

265
00:09:25,760 --> 00:09:27,360
cheapest cost path which

266
00:09:27,360 --> 00:09:30,160
typically is um accordance to the

267
00:09:30,160 --> 00:09:31,120
bandwidth of the

268
00:09:31,120 --> 00:09:32,560
links you want a metric inversely

269
00:09:32,560 --> 00:09:34,560
proportional to the bandwidth of the

270
00:09:34,560 --> 00:09:36,720
link and so if you're perhaps merging

271
00:09:36,720 --> 00:09:37,920
networks um

272
00:09:37,920 --> 00:09:39,839
you know these two requirements might um

273
00:09:39,839 --> 00:09:41,760
conflict you know with a single

274
00:09:41,760 --> 00:09:45,279
igp topology you can't set a metric

275
00:09:45,279 --> 00:09:46,560
on each link in such a way that it

276
00:09:46,560 --> 00:09:48,480
satisfies both of these

277
00:09:48,480 --> 00:09:51,440
different styles of traffic and so this

278
00:09:51,440 --> 00:09:53,040
is where flex algo can help

279
00:09:53,040 --> 00:09:56,880
a lot and so in this diagram we've got

280
00:09:56,880 --> 00:09:59,120
a network and we've got these two

281
00:09:59,120 --> 00:10:00,880
different types of traffic

282
00:10:00,880 --> 00:10:04,640
and what's happening is that the

283
00:10:04,640 --> 00:10:07,040
bulk internet traffic which we want to

284
00:10:07,040 --> 00:10:08,480
try to make use

285
00:10:08,480 --> 00:10:11,360
um the high bandwidth links and that's

286
00:10:11,360 --> 00:10:11,839
mapped

287
00:10:11,839 --> 00:10:15,920
onto the default igp topology

288
00:10:15,920 --> 00:10:19,279
and that is

289
00:10:19,279 --> 00:10:22,320
actually subjected to the metrics shown

290
00:10:22,320 --> 00:10:23,200
in the blue colored

291
00:10:23,200 --> 00:10:25,839
font if you look at the diagram you can

292
00:10:25,839 --> 00:10:27,680
see that the high bandwidth links are

293
00:10:27,680 --> 00:10:28,800
shown with thicker

294
00:10:28,800 --> 00:10:30,640
lines those are the diagonal links

295
00:10:30,640 --> 00:10:32,640
across the core of the network

296
00:10:32,640 --> 00:10:34,560
while the horizontal and vertical links

297
00:10:34,560 --> 00:10:36,880
have lower bandwidth

298
00:10:36,880 --> 00:10:38,959
on the other hand we want delay

299
00:10:38,959 --> 00:10:40,720
sensitive traffic to follow the

300
00:10:40,720 --> 00:10:44,079
shortest possible path and so we map

301
00:10:44,079 --> 00:10:44,480
that

302
00:10:44,480 --> 00:10:47,600
onto the redflex argo in this example

303
00:10:47,600 --> 00:10:50,560
and the redflex saogo has metrics shown

304
00:10:50,560 --> 00:10:51,279
in this

305
00:10:51,279 --> 00:10:54,399
red colored font and so that means that

306
00:10:54,399 --> 00:10:55,920
in fact those two different types of

307
00:10:55,920 --> 00:10:57,600
traffic being mapped to

308
00:10:57,600 --> 00:10:59,040
different topologies with different

309
00:10:59,040 --> 00:11:00,720
metrics actually tend to follow

310
00:11:00,720 --> 00:11:02,000
different paths through the network

311
00:11:02,000 --> 00:11:03,200
which is exactly what we

312
00:11:03,200 --> 00:11:06,480
want and so if you look here um the

313
00:11:06,480 --> 00:11:07,279
traffic

314
00:11:07,279 --> 00:11:10,079
that's the latency sensitive traffic

315
00:11:10,079 --> 00:11:12,480
which is following the

316
00:11:12,480 --> 00:11:15,360
flexalgo um shown in red that passes

317
00:11:15,360 --> 00:11:16,880
straight across the top of the network

318
00:11:16,880 --> 00:11:20,160
p1 p1 p2 pe3

319
00:11:20,160 --> 00:11:21,839
while the bulk internet traffic which we

320
00:11:21,839 --> 00:11:23,120
wanted to follow the high bandwidth

321
00:11:23,120 --> 00:11:23,519
links

322
00:11:23,519 --> 00:11:25,920
follows this other path via p5 across

323
00:11:25,920 --> 00:11:27,519
the core of the network and so as you

324
00:11:27,519 --> 00:11:28,320
can see

325
00:11:28,320 --> 00:11:30,399
um flex algo is giving us this extra

326
00:11:30,399 --> 00:11:31,440
degree of freedom

327
00:11:31,440 --> 00:11:33,200
allowing us to map certain traffic to

328
00:11:33,200 --> 00:11:35,600
that flexalgo um such that it

329
00:11:35,600 --> 00:11:39,279
can benefit from a different igp metric

330
00:11:39,279 --> 00:11:43,440
setup and in general you can

331
00:11:43,440 --> 00:11:45,920
you know choose what style of metric you

332
00:11:45,920 --> 00:11:47,920
want for a given flex algo and so in

333
00:11:47,920 --> 00:11:48,800
this

334
00:11:48,800 --> 00:11:51,120
example this particular flex algo has

335
00:11:51,120 --> 00:11:52,079
been defined

336
00:11:52,079 --> 00:11:55,519
um such that it uses a delay metric

337
00:11:55,519 --> 00:11:57,920
and that delay metric can be either

338
00:11:57,920 --> 00:11:59,279
statically set

339
00:11:59,279 --> 00:12:01,120
if the delay of a given link isn't

340
00:12:01,120 --> 00:12:02,720
expected to change much

341
00:12:02,720 --> 00:12:05,279
or in fact it can be a dynamically

342
00:12:05,279 --> 00:12:06,639
changing metric

343
00:12:06,639 --> 00:12:09,519
according to t-wamp measurements and so

344
00:12:09,519 --> 00:12:10,639
the igp

345
00:12:10,639 --> 00:12:13,279
neighbors are sending timestamp um probe

346
00:12:13,279 --> 00:12:14,560
packets to each other

347
00:12:14,560 --> 00:12:17,760
and that determines the latency of the

348
00:12:17,760 --> 00:12:19,279
link and that's fed into the

349
00:12:19,279 --> 00:12:22,560
metric value that's advertised via the

350
00:12:22,560 --> 00:12:25,200
igp flooding for that particular link

351
00:12:25,200 --> 00:12:26,800
and so that can change as a function of

352
00:12:26,800 --> 00:12:27,360
time

353
00:12:27,360 --> 00:12:29,600
according to different metric conditions

354
00:12:29,600 --> 00:12:30,480
in general

355
00:12:30,480 --> 00:12:33,040
you can map a flex algo to use either a

356
00:12:33,040 --> 00:12:33,920
delay metric

357
00:12:33,920 --> 00:12:37,040
or a te metric or a normal igp metric

358
00:12:37,040 --> 00:12:38,639
according to your requirements

359
00:12:38,639 --> 00:12:39,839
and that gives you enough degrees of

360
00:12:39,839 --> 00:12:41,839
freedom normally to be able to have

361
00:12:41,839 --> 00:12:43,519
different topologies

362
00:12:43,519 --> 00:12:46,160
with different styles of metric sharing

363
00:12:46,160 --> 00:12:47,680
the same physical

364
00:12:47,680 --> 00:12:50,800
topology now i've been saying a lot

365
00:12:50,800 --> 00:12:52,399
about flex saga and

366
00:12:52,399 --> 00:12:53,920
i've been saying yeah we mapped this

367
00:12:53,920 --> 00:12:55,760
source of traffic to that flex salgo and

368
00:12:55,760 --> 00:12:56,639
so on

369
00:12:56,639 --> 00:12:58,560
um but haven't said specifically how you

370
00:12:58,560 --> 00:13:00,320
actually achieve that mapping so that's

371
00:13:00,320 --> 00:13:01,519
what i want to

372
00:13:01,519 --> 00:13:04,320
talk about next and so in fact the way

373
00:13:04,320 --> 00:13:06,000
we do this is using the property

374
00:13:06,000 --> 00:13:08,560
called colors and so a flex salgo is

375
00:13:08,560 --> 00:13:10,079
given a particular color

376
00:13:10,079 --> 00:13:12,959
which enables mapping of traffic to it

377
00:13:12,959 --> 00:13:14,959
in a similar vein actually

378
00:13:14,959 --> 00:13:17,200
it's not only used flex algo so te

379
00:13:17,200 --> 00:13:19,519
tunnels whether they're srt or rsvp

380
00:13:19,519 --> 00:13:21,360
tunnels can be given a colour

381
00:13:21,360 --> 00:13:23,040
to facilitate mapping of particular

382
00:13:23,040 --> 00:13:25,279
traffic to those as well

383
00:13:25,279 --> 00:13:28,240
also as we'll see later on um towards

384
00:13:28,240 --> 00:13:29,120
the end of the talk

385
00:13:29,120 --> 00:13:32,160
it's used again in bgp classical

386
00:13:32,160 --> 00:13:33,440
transport so we'll meet colors again

387
00:13:33,440 --> 00:13:34,000
when we get

388
00:13:34,000 --> 00:13:37,839
to that part of the session

389
00:13:37,839 --> 00:13:39,360
so let's have a look in more detail

390
00:13:39,360 --> 00:13:41,600
about how this auto mapping is working

391
00:13:41,600 --> 00:13:43,920
on the basis of colors and so in the

392
00:13:43,920 --> 00:13:44,959
example

393
00:13:44,959 --> 00:13:46,639
and we've got a network we're not

394
00:13:46,639 --> 00:13:48,560
showing the core routers

395
00:13:48,560 --> 00:13:50,560
we've got two flex algos in use we've

396
00:13:50,560 --> 00:13:51,920
got the red one which

397
00:13:51,920 --> 00:13:55,440
has color 100 ascribed to it

398
00:13:55,440 --> 00:13:57,360
and we've got the blue one which has got

399
00:13:57,360 --> 00:13:58,720
color 200

400
00:13:58,720 --> 00:14:02,639
ascribed to it and pey has advertised

401
00:14:02,639 --> 00:14:06,720
various prefixes to pex via bgp

402
00:14:06,720 --> 00:14:09,839
um those actually are tagged with color

403
00:14:09,839 --> 00:14:11,199
communities

404
00:14:11,199 --> 00:14:14,639
and so for example 10.1 and 10.2

405
00:14:14,639 --> 00:14:17,839
16 have color community 100 well

406
00:14:17,839 --> 00:14:21,760
11.1 11.2 16 have color community

407
00:14:21,760 --> 00:14:24,800
um 200 and these could be plain

408
00:14:24,800 --> 00:14:27,440
internet prefixes or could be vpn um

409
00:14:27,440 --> 00:14:28,480
prefixes

410
00:14:28,480 --> 00:14:30,639
and so what pex does is if it needs to

411
00:14:30,639 --> 00:14:31,920
send traffic to

412
00:14:31,920 --> 00:14:35,600
pey perhaps um a destination within that

413
00:14:35,600 --> 00:14:36,160
subnet

414
00:14:36,160 --> 00:14:39,519
10.1 16 because

415
00:14:39,519 --> 00:14:42,560
that prefix has got color community 100

416
00:14:42,560 --> 00:14:43,519
attached to it

417
00:14:43,519 --> 00:14:46,399
pex automatically launches the traffic

418
00:14:46,399 --> 00:14:48,480
onto the flex hourglass that also has

419
00:14:48,480 --> 00:14:50,480
color 100 so that traffic's launched

420
00:14:50,480 --> 00:14:51,279
onto the

421
00:14:51,279 --> 00:14:54,480
red flecks algo while traffic

422
00:14:54,480 --> 00:14:58,000
within the prefix let's say 11.1 16

423
00:14:58,000 --> 00:15:01,040
that's got color community 200

424
00:15:01,040 --> 00:15:02,399
attached to it and so that gets

425
00:15:02,399 --> 00:15:04,160
automatically mapped onto the blueflex

426
00:15:04,160 --> 00:15:06,079
algo because that's got color 200.

427
00:15:06,079 --> 00:15:07,600
so as you can see the colors are a

428
00:15:07,600 --> 00:15:10,399
convenient way of auto mapping

429
00:15:10,399 --> 00:15:12,079
traffic with a given color community is

430
00:15:12,079 --> 00:15:13,680
mapped onto the transport that's got

431
00:15:13,680 --> 00:15:14,399
that same

432
00:15:14,399 --> 00:15:18,000
color so with that we can look at a more

433
00:15:18,000 --> 00:15:21,760
elaborate example again using flexalgo

434
00:15:21,760 --> 00:15:24,320
and in this case we're using flexalgo

435
00:15:24,320 --> 00:15:26,000
within this transport network in the

436
00:15:26,000 --> 00:15:27,519
center of the diagram

437
00:15:27,519 --> 00:15:30,320
but also you've got some um data centers

438
00:15:30,320 --> 00:15:31,600
and so on the left-hand side you've got

439
00:15:31,600 --> 00:15:33,040
a regional data center

440
00:15:33,040 --> 00:15:34,480
on the right-hand side an edge data

441
00:15:34,480 --> 00:15:36,320
center this could be in a 5g

442
00:15:36,320 --> 00:15:38,560
deployment for example and then you've

443
00:15:38,560 --> 00:15:41,360
got overlay networks so you've got

444
00:15:41,360 --> 00:15:44,240
these overlays residing on compute

445
00:15:44,240 --> 00:15:46,800
resources within these data centers

446
00:15:46,800 --> 00:15:49,040
these can be containerized network

447
00:15:49,040 --> 00:15:50,079
functions

448
00:15:50,079 --> 00:15:53,040
um hosting things like distributed units

449
00:15:53,040 --> 00:15:54,720
and centralized units in a

450
00:15:54,720 --> 00:15:57,759
5g o-ran deployment and so

451
00:15:57,759 --> 00:16:01,120
each of these colored blobs represents a

452
00:16:01,120 --> 00:16:02,720
different slice a different

453
00:16:02,720 --> 00:16:05,839
you know tenant on this 5g network and

454
00:16:05,839 --> 00:16:06,880
each slice

455
00:16:06,880 --> 00:16:08,160
by the nature of the traffic it's

456
00:16:08,160 --> 00:16:11,440
carrying has different transport

457
00:16:11,440 --> 00:16:13,839
requirements and so in particular in

458
00:16:13,839 --> 00:16:15,600
this example traffic from the green and

459
00:16:15,600 --> 00:16:17,120
purple slices

460
00:16:17,120 --> 00:16:19,680
need minimum cost transport once they

461
00:16:19,680 --> 00:16:22,160
reach the core the minimum monetary cost

462
00:16:22,160 --> 00:16:23,839
and transport which is the blue flecks

463
00:16:23,839 --> 00:16:26,720
argo while traffic from the yellow slice

464
00:16:26,720 --> 00:16:28,160
that's carrying latency sensitive

465
00:16:28,160 --> 00:16:29,680
traffic and so that needs to be mapped

466
00:16:29,680 --> 00:16:31,040
on to the

467
00:16:31,040 --> 00:16:32,880
red flecks algo once the traffic hits

468
00:16:32,880 --> 00:16:34,320
the transport

469
00:16:34,320 --> 00:16:36,720
network and so the way we achieve this

470
00:16:36,720 --> 00:16:38,320
is by using color communities

471
00:16:38,320 --> 00:16:40,800
which i'll show in more detail in the

472
00:16:40,800 --> 00:16:41,920
next slide

473
00:16:41,920 --> 00:16:44,959
and then typically the data centers are

474
00:16:44,959 --> 00:16:48,000
um you know ethernet

475
00:16:48,000 --> 00:16:50,880
sorry they're ethernet switches um you

476
00:16:50,880 --> 00:16:51,519
know

477
00:16:51,519 --> 00:16:53,759
ip forwarding spine and leaf arrangement

478
00:16:53,759 --> 00:16:54,720
typically

479
00:16:54,720 --> 00:16:57,519
um lots of ecmp and so typically people

480
00:16:57,519 --> 00:16:58,880
don't want to extend

481
00:16:58,880 --> 00:17:01,519
the um transport like flex argo into the

482
00:17:01,519 --> 00:17:02,880
data centers they're just doing

483
00:17:02,880 --> 00:17:05,280
plain ip and forwarding and so what

484
00:17:05,280 --> 00:17:07,199
you'll have is an mpls civil udp tunnel

485
00:17:07,199 --> 00:17:08,000
carrying

486
00:17:08,000 --> 00:17:11,760
um you know layer 3 vpn labelled packets

487
00:17:11,760 --> 00:17:13,679
across the spine and leaf to the dc

488
00:17:13,679 --> 00:17:15,679
gateway so it's the dc gateway that's

489
00:17:15,679 --> 00:17:16,880
doing the mapping into the correct

490
00:17:16,880 --> 00:17:17,760
transport

491
00:17:17,760 --> 00:17:20,240
on the basis of color community and so

492
00:17:20,240 --> 00:17:21,839
we can zoom in and look at how that's

493
00:17:21,839 --> 00:17:23,599
working in more detail in this slide so

494
00:17:23,599 --> 00:17:25,119
this is a cross section through that

495
00:17:25,119 --> 00:17:25,760
same

496
00:17:25,760 --> 00:17:28,720
network where that data center on the

497
00:17:28,720 --> 00:17:30,480
right hand side we're zooming in on one

498
00:17:30,480 --> 00:17:31,679
compute resource

499
00:17:31,679 --> 00:17:34,960
we're zooming in on the

500
00:17:34,960 --> 00:17:38,400
green virtual overlay network and

501
00:17:38,400 --> 00:17:40,400
what you've got typically on the compute

502
00:17:40,400 --> 00:17:41,600
resources is

503
00:17:41,600 --> 00:17:44,559
a virtual router a software-based router

504
00:17:44,559 --> 00:17:45,280
which has

505
00:17:45,280 --> 00:17:48,480
um separate vrf's for each um slice um

506
00:17:48,480 --> 00:17:50,240
so we've got the green vrf highlighted

507
00:17:50,240 --> 00:17:50,880
here

508
00:17:50,880 --> 00:17:52,160
and you've got these containerized

509
00:17:52,160 --> 00:17:55,039
network functions which act as ces from

510
00:17:55,039 --> 00:17:55,440
this

511
00:17:55,440 --> 00:17:58,080
um you know layer 3 vpn point of view so

512
00:17:58,080 --> 00:17:59,520
they're the ces from the point of view

513
00:17:59,520 --> 00:18:00,080
of this

514
00:18:00,080 --> 00:18:02,000
green vrf and what you'll have is

515
00:18:02,000 --> 00:18:03,919
advertised using bgp

516
00:18:03,919 --> 00:18:05,919
is the prefixes pertaining to these

517
00:18:05,919 --> 00:18:07,840
containerized network functions so

518
00:18:07,840 --> 00:18:09,440
here in the example we've got the prefix

519
00:18:09,440 --> 00:18:11,039
associated with cnf

520
00:18:11,039 --> 00:18:13,679
2 and so you've got a layer 3 vpn label

521
00:18:13,679 --> 00:18:15,280
highlighted here v2

522
00:18:15,280 --> 00:18:16,640
you've got normal route targets

523
00:18:16,640 --> 00:18:18,400
associated with the

524
00:18:18,400 --> 00:18:20,799
vpn and then very importantly the color

525
00:18:20,799 --> 00:18:22,160
community

526
00:18:22,160 --> 00:18:25,039
200 an example and normally this

527
00:18:25,039 --> 00:18:26,880
advertisement is mediated by an sdn

528
00:18:26,880 --> 00:18:28,320
controller

529
00:18:28,320 --> 00:18:30,640
that's controlling the cloud overlay and

530
00:18:30,640 --> 00:18:32,320
the associated routing and so it's going

531
00:18:32,320 --> 00:18:33,679
to be advertising

532
00:18:33,679 --> 00:18:36,320
that prefix via bgp to the local dc

533
00:18:36,320 --> 00:18:37,280
gateway

534
00:18:37,280 --> 00:18:39,280
and that in turn will advertise it to

535
00:18:39,280 --> 00:18:40,720
other dc gateways in the network and

536
00:18:40,720 --> 00:18:42,960
then finally that prefix arrives in the

537
00:18:42,960 --> 00:18:43,760
green vrf

538
00:18:43,760 --> 00:18:46,559
on the left hand side and in so doing

539
00:18:46,559 --> 00:18:48,480
the bgp next hop is changing each time

540
00:18:48,480 --> 00:18:49,360
you hit a

541
00:18:49,360 --> 00:18:52,400
dc gateway and so suppose now

542
00:18:52,400 --> 00:18:54,400
in the forwarding plane we have a packet

543
00:18:54,400 --> 00:18:55,440
which is

544
00:18:55,440 --> 00:18:58,880
actually being sent by

545
00:18:58,880 --> 00:19:01,600
cf1 on the left-hand side its

546
00:19:01,600 --> 00:19:03,120
destination ip address

547
00:19:03,120 --> 00:19:05,679
is um that's associated with cnf2 on the

548
00:19:05,679 --> 00:19:06,960
right-hand side

549
00:19:06,960 --> 00:19:10,240
and so in the green vrf is the bgp

550
00:19:10,240 --> 00:19:11,919
advertisement that had been sent

551
00:19:11,919 --> 00:19:14,799
across the network from um right to left

552
00:19:14,799 --> 00:19:16,720
and so from the point of view

553
00:19:16,720 --> 00:19:19,760
of that green vrf on v router one

554
00:19:19,760 --> 00:19:22,160
um the bgp next top at that point is the

555
00:19:22,160 --> 00:19:24,000
local dc gateway dc gateway

556
00:19:24,000 --> 00:19:27,200
number one and so what will happen

557
00:19:27,200 --> 00:19:29,760
is that um onto the ip packet will be

558
00:19:29,760 --> 00:19:30,400
put

559
00:19:30,400 --> 00:19:32,880
the layer 3 vpn label which at this

560
00:19:32,880 --> 00:19:34,400
point has value v2

561
00:19:34,400 --> 00:19:36,559
um double prime and the packet will be

562
00:19:36,559 --> 00:19:38,559
placed onto the mpls ovp

563
00:19:38,559 --> 00:19:41,760
tunnel that goes from v router 1 to the

564
00:19:41,760 --> 00:19:42,799
local dc

565
00:19:42,799 --> 00:19:45,600
gateway dc gateway number one and you'll

566
00:19:45,600 --> 00:19:47,440
have the vpn label v2 double prime as

567
00:19:47,440 --> 00:19:48,080
you can see

568
00:19:48,080 --> 00:19:50,480
then udp header on top packet arrives at

569
00:19:50,480 --> 00:19:52,559
dc gateway 1 it will

570
00:19:52,559 --> 00:19:54,880
remove the udp encapsulation it sees

571
00:19:54,880 --> 00:19:56,960
this label v2 double prime

572
00:19:56,960 --> 00:19:59,919
and so it knows that the bgp next top

573
00:19:59,919 --> 00:20:02,400
for that is dc gateway number two

574
00:20:02,400 --> 00:20:05,280
because the bgp route had a color

575
00:20:05,280 --> 00:20:06,799
community 200.

576
00:20:06,799 --> 00:20:08,880
that triggers dc gateway one to put the

577
00:20:08,880 --> 00:20:10,320
packet onto

578
00:20:10,320 --> 00:20:12,799
the color 200 transport this might be a

579
00:20:12,799 --> 00:20:14,080
flex algorithm might be

580
00:20:14,080 --> 00:20:17,679
an srt lsp the one with color 200.

581
00:20:17,679 --> 00:20:20,640
and so um the packets launched with the

582
00:20:20,640 --> 00:20:22,400
label or labels associated with that

583
00:20:22,400 --> 00:20:23,919
transport

584
00:20:23,919 --> 00:20:27,360
the vpn label as well shown in green

585
00:20:27,360 --> 00:20:28,960
and so in that way the packet arrives at

586
00:20:28,960 --> 00:20:32,080
dc gateway 2 and dc8v2 does a lookup on

587
00:20:32,080 --> 00:20:33,520
that label and puts the packet into the

588
00:20:33,520 --> 00:20:35,120
mpls 3db tunnel

589
00:20:35,120 --> 00:20:37,280
that terminates at v router 2 it's sent

590
00:20:37,280 --> 00:20:39,120
to the green vrf and to the destination

591
00:20:39,120 --> 00:20:40,080
cnf2

592
00:20:40,080 --> 00:20:41,600
so overall you can see in a nutshell

593
00:20:41,600 --> 00:20:43,360
that simply by adding the correct color

594
00:20:43,360 --> 00:20:44,400
community

595
00:20:44,400 --> 00:20:48,400
to the prefix that triggers um

596
00:20:48,400 --> 00:20:51,520
dc gateway one to launch the packet onto

597
00:20:51,520 --> 00:20:52,240
the correct

598
00:20:52,240 --> 00:20:54,799
transport onto the correct and flex algo

599
00:20:54,799 --> 00:20:55,679
for example

600
00:20:55,679 --> 00:20:57,440
so you can see the color community

601
00:20:57,440 --> 00:20:59,120
mapping providing this convenient

602
00:20:59,120 --> 00:21:00,640
mechanism of ensuring that we're using

603
00:21:00,640 --> 00:21:01,840
the right

604
00:21:01,840 --> 00:21:03,919
transport even if the start of that

605
00:21:03,919 --> 00:21:05,440
transport is

606
00:21:05,440 --> 00:21:07,600
you know multiple hops away from where

607
00:21:07,600 --> 00:21:09,760
the traffic originated way back here on

608
00:21:09,760 --> 00:21:10,640
the compute

609
00:21:10,640 --> 00:21:13,120
resource in this data center on the left

610
00:21:13,120 --> 00:21:15,600
hand side

611
00:21:15,600 --> 00:21:18,000
so with that what i'd like to do is to

612
00:21:18,000 --> 00:21:19,360
talk about the

613
00:21:19,360 --> 00:21:22,400
final topic of today which is bgp class

614
00:21:22,400 --> 00:21:22,720
full

615
00:21:22,720 --> 00:21:25,760
transport or bgpct for short

616
00:21:25,760 --> 00:21:27,280
and first of all let's have a look at

617
00:21:27,280 --> 00:21:29,760
the problem statement underpinning this

618
00:21:29,760 --> 00:21:31,600
and so now we've got a setup we've got

619
00:21:31,600 --> 00:21:32,240
multiple

620
00:21:32,240 --> 00:21:34,799
ases we've got pe one on the left-hand

621
00:21:34,799 --> 00:21:35,919
side

622
00:21:35,919 --> 00:21:38,240
and it wants to send traffic to pe2

623
00:21:38,240 --> 00:21:39,840
which is several as's

624
00:21:39,840 --> 00:21:42,840
away on the right-hand side of the

625
00:21:42,840 --> 00:21:44,880
diagram and in each as

626
00:21:44,880 --> 00:21:47,280
we've got colored transport we've got

627
00:21:47,280 --> 00:21:50,159
color 100 transport and color 200

628
00:21:50,159 --> 00:21:52,720
transport where color 100 is cheapest

629
00:21:52,720 --> 00:21:54,880
cost and color 200 is minimum

630
00:21:54,880 --> 00:21:58,240
latency now and the thing is um

631
00:21:58,240 --> 00:22:00,400
this is the problem statement um when

632
00:22:00,400 --> 00:22:03,520
traffic goes from asbr 1 to asbr 2

633
00:22:03,520 --> 00:22:06,240
how does asbr 2 know what coloured

634
00:22:06,240 --> 00:22:07,600
transport is supposed to use

635
00:22:07,600 --> 00:22:10,400
for this traffic which originated back

636
00:22:10,400 --> 00:22:11,039
here on

637
00:22:11,039 --> 00:22:13,600
pe one if we're using bgplu between the

638
00:22:13,600 --> 00:22:15,840
ass which is typically used bgplu does

639
00:22:15,840 --> 00:22:18,000
not have any color awareness and so

640
00:22:18,000 --> 00:22:20,480
there's no way of conveying to asbr to

641
00:22:20,480 --> 00:22:21,039
um

642
00:22:21,039 --> 00:22:23,039
you know there's the desire to use let's

643
00:22:23,039 --> 00:22:24,960
say color 200

644
00:22:24,960 --> 00:22:27,840
for the um packets journey so this is

645
00:22:27,840 --> 00:22:29,840
where bgp classical transport

646
00:22:29,840 --> 00:22:32,880
comes in and so what that enables you to

647
00:22:32,880 --> 00:22:34,320
do is to actually extend the color

648
00:22:34,320 --> 00:22:36,080
mapping across multiple

649
00:22:36,080 --> 00:22:39,520
ases or other types of domain

650
00:22:39,520 --> 00:22:40,880
in such a way that you're not having to

651
00:22:40,880 --> 00:22:44,480
expose the internal topology of a domain

652
00:22:44,480 --> 00:22:48,000
to any other domain and like

653
00:22:48,000 --> 00:22:50,400
as a consequence of this each domain can

654
00:22:50,400 --> 00:22:52,159
make its own choice of transport

655
00:22:52,159 --> 00:22:54,720
technology and what the other domains

656
00:22:54,720 --> 00:22:56,080
are doing so when domain might be using

657
00:22:56,080 --> 00:22:57,440
a flex hourglass

658
00:22:57,440 --> 00:22:59,200
um setup and everyone might be using

659
00:22:59,200 --> 00:23:01,919
srte and one might be using rsvp

660
00:23:01,919 --> 00:23:04,080
mte and that's perfectly fine and

661
00:23:04,080 --> 00:23:06,320
regardless of what they've chosen to do

662
00:23:06,320 --> 00:23:09,919
and bgp ct acts as the glue

663
00:23:09,919 --> 00:23:13,039
between those domains

664
00:23:13,039 --> 00:23:15,280
now um as such is a very useful

665
00:23:15,280 --> 00:23:16,720
extension to bgp

666
00:23:16,720 --> 00:23:19,840
labeled unicast bgplu i mean bgplu has

667
00:23:19,840 --> 00:23:21,440
proven to be a very popular way of

668
00:23:21,440 --> 00:23:23,200
scaling networks

669
00:23:23,200 --> 00:23:25,760
people just use bgp lu between domains

670
00:23:25,760 --> 00:23:27,600
and no igp or anything

671
00:23:27,600 --> 00:23:30,960
like that attempting to cross domains

672
00:23:30,960 --> 00:23:32,640
sometimes this is called seamless mpls

673
00:23:32,640 --> 00:23:34,799
and it's quite widespread

674
00:23:34,799 --> 00:23:37,840
nowadays in terms of the um deployments

675
00:23:37,840 --> 00:23:40,320
and so bgpct is very similar in spirit

676
00:23:40,320 --> 00:23:42,080
uh bgplu

677
00:23:42,080 --> 00:23:44,480
except that it's got egress pe color

678
00:23:44,480 --> 00:23:45,200
comma

679
00:23:45,200 --> 00:23:47,600
um color um granularity rather than just

680
00:23:47,600 --> 00:23:48,720
egress pe

681
00:23:48,720 --> 00:23:51,679
and granularity and so bgpct is a very

682
00:23:51,679 --> 00:23:52,960
good upgrade to

683
00:23:52,960 --> 00:23:56,240
bgp lu in order to support color aware

684
00:23:56,240 --> 00:23:58,400
transport and so we can look at how this

685
00:23:58,400 --> 00:23:59,360
works so

686
00:23:59,360 --> 00:24:01,360
to give a concrete example we've got

687
00:24:01,360 --> 00:24:03,679
these two different colors of transport

688
00:24:03,679 --> 00:24:05,520
in use and so pe2

689
00:24:05,520 --> 00:24:07,520
associated with its loopback address

690
00:24:07,520 --> 00:24:09,520
will be two different labels

691
00:24:09,520 --> 00:24:12,240
one corresponding to color 100 the other

692
00:24:12,240 --> 00:24:13,760
corresponding to color

693
00:24:13,760 --> 00:24:18,640
200 and those percolate via bgp

694
00:24:18,640 --> 00:24:21,840
as shown by those dashed green lines

695
00:24:21,840 --> 00:24:24,720
um hopping from asbr to asbr across the

696
00:24:24,720 --> 00:24:25,440
network

697
00:24:25,440 --> 00:24:27,039
the sbrs are going to be changing next

698
00:24:27,039 --> 00:24:28,799
top to self which will change the label

699
00:24:28,799 --> 00:24:29,520
value

700
00:24:29,520 --> 00:24:31,360
um as well but that's fine at the end of

701
00:24:31,360 --> 00:24:32,880
the day pe1

702
00:24:32,880 --> 00:24:36,240
um sees two different label values for

703
00:24:36,240 --> 00:24:38,880
pe two um one corresponding to color one

704
00:24:38,880 --> 00:24:39,360
hundred

705
00:24:39,360 --> 00:24:40,720
the other corresponding to kind of two

706
00:24:40,720 --> 00:24:42,720
hundred from p e one's point of view the

707
00:24:42,720 --> 00:24:43,840
pgp next top is

708
00:24:43,840 --> 00:24:45,840
aspl one so let's suppose it wants to

709
00:24:45,840 --> 00:24:47,440
send traffic to pe one

710
00:24:47,440 --> 00:24:49,279
um it will have received um you know

711
00:24:49,279 --> 00:24:51,120
service level prefixes from

712
00:24:51,120 --> 00:24:53,760
pe two perhaps vpn prefixes with color

713
00:24:53,760 --> 00:24:54,799
200

714
00:24:54,799 --> 00:24:57,840
and so in to ensure that those do use

715
00:24:57,840 --> 00:25:00,799
the color 200 transport p1 first of all

716
00:25:00,799 --> 00:25:02,320
puts onto the packet the

717
00:25:02,320 --> 00:25:05,520
layer 3vpn label and then the

718
00:25:05,520 --> 00:25:10,000
bgpct label associated with color 200

719
00:25:10,000 --> 00:25:12,400
associated with pe 2's loopback address

720
00:25:12,400 --> 00:25:13,279
and then finally

721
00:25:13,279 --> 00:25:15,120
labels associated with the local

722
00:25:15,120 --> 00:25:16,640
transport which might be flex saga might

723
00:25:16,640 --> 00:25:19,120
be srt might be rsvpte

724
00:25:19,120 --> 00:25:22,480
terminating at the spl1 spr 1

725
00:25:22,480 --> 00:25:24,480
um hands over the packet at this point

726
00:25:24,480 --> 00:25:27,120
the top label will be the bgp ct label

727
00:25:27,120 --> 00:25:29,760
asbr 2 sees that knows that it's

728
00:25:29,760 --> 00:25:31,520
associated with color 200

729
00:25:31,520 --> 00:25:33,600
and so uses the color 200 transport to

730
00:25:33,600 --> 00:25:34,880
reach asbr3

731
00:25:34,880 --> 00:25:36,960
similarly color 200 will be used for

732
00:25:36,960 --> 00:25:38,720
this final as hop

733
00:25:38,720 --> 00:25:41,760
and so the packet consistently um

734
00:25:41,760 --> 00:25:44,240
as it travels between ascs and across

735
00:25:44,240 --> 00:25:45,440
ass we'll be

736
00:25:45,440 --> 00:25:49,279
using color 200 um transports

737
00:25:49,279 --> 00:25:52,480
finally let's have a look at some of the

738
00:25:52,480 --> 00:25:55,520
nuts and bolts behind bgp ct and so

739
00:25:55,520 --> 00:25:56,000
there's a new

740
00:25:56,000 --> 00:25:58,080
safety defined for it um regardless of

741
00:25:58,080 --> 00:25:59,039
whether you're talking about maybe

742
00:25:59,039 --> 00:26:00,960
version 4 or ipv6 the safety value is

743
00:26:00,960 --> 00:26:02,880
going to be 76

744
00:26:02,880 --> 00:26:05,120
because we are advertising the same

745
00:26:05,120 --> 00:26:06,080
address

746
00:26:06,080 --> 00:26:08,799
um with different um you know attributes

747
00:26:08,799 --> 00:26:10,559
we need to disambiguate

748
00:26:10,559 --> 00:26:12,720
those two um versions of that prefix and

749
00:26:12,720 --> 00:26:14,240
so round distinguishes are used to

750
00:26:14,240 --> 00:26:15,520
achieve that

751
00:26:15,520 --> 00:26:18,640
and then you've got um the label value

752
00:26:18,640 --> 00:26:21,919
um this is for the um you know red

753
00:26:21,919 --> 00:26:24,000
um you know the color 100 transports and

754
00:26:24,000 --> 00:26:25,840
then a different label value l2 for the

755
00:26:25,840 --> 00:26:26,720
color 200

756
00:26:26,720 --> 00:26:30,080
transport and in order to

757
00:26:30,080 --> 00:26:32,559
convey the actual color um there's a new

758
00:26:32,559 --> 00:26:34,080
flavor of route target

759
00:26:34,080 --> 00:26:36,320
um called the transport targets and the

760
00:26:36,320 --> 00:26:38,159
color is embedded within that so that's

761
00:26:38,159 --> 00:26:38,559
a

762
00:26:38,559 --> 00:26:41,919
you know flavor of how the bgpct

763
00:26:41,919 --> 00:26:44,960
um you know modifies be bgp to

764
00:26:44,960 --> 00:26:48,159
and carry this type of color information

765
00:26:48,159 --> 00:26:49,840
so that brings me to the end finally

766
00:26:49,840 --> 00:26:51,760
some references for

767
00:26:51,760 --> 00:26:54,080
further reading but thank you for your

768
00:26:54,080 --> 00:26:54,880
attention

769
00:26:54,880 --> 00:26:58,320
now we're open for questions

770
00:26:59,679 --> 00:27:02,000
well julian thank you for presenting and

771
00:27:02,000 --> 00:27:03,360
for joining us for this

772
00:27:03,360 --> 00:27:06,559
q a session and the first question from

773
00:27:06,559 --> 00:27:07,520
our community

774
00:27:07,520 --> 00:27:10,720
is um it's all fun

775
00:27:10,720 --> 00:27:12,640
everything works great but at some point

776
00:27:12,640 --> 00:27:14,640
things break

777
00:27:14,640 --> 00:27:16,960
specific to flex algo what operational

778
00:27:16,960 --> 00:27:20,159
tools are available for troubleshooting

779
00:27:20,159 --> 00:27:22,559
yeah it's a good question actually so um

780
00:27:22,559 --> 00:27:24,399
first of all there are cli commands

781
00:27:24,399 --> 00:27:27,360
where you can you know visualize um you

782
00:27:27,360 --> 00:27:28,640
know membership of a flex

783
00:27:28,640 --> 00:27:30,640
algo and you know what metric is

784
00:27:30,640 --> 00:27:32,720
associated with a flex algo you can see

785
00:27:32,720 --> 00:27:34,640
what other nodes

786
00:27:34,640 --> 00:27:36,480
are members of the flexile go you know

787
00:27:36,480 --> 00:27:38,640
when you're looking on the cli of one

788
00:27:38,640 --> 00:27:41,360
router but then another aspect which is

789
00:27:41,360 --> 00:27:42,880
very useful is that

790
00:27:42,880 --> 00:27:46,320
um bgpls has extensions

791
00:27:46,320 --> 00:27:49,200
for flexalgo so bgpls is the method

792
00:27:49,200 --> 00:27:50,159
whereby

793
00:27:50,159 --> 00:27:52,799
the topology of a network is reported to

794
00:27:52,799 --> 00:27:53,360
a

795
00:27:53,360 --> 00:27:56,000
um central um controller and then the

796
00:27:56,000 --> 00:27:57,440
user can

797
00:27:57,440 --> 00:27:59,840
visualize aspects of the topology you

798
00:27:59,840 --> 00:28:00,960
know at the controller

799
00:28:00,960 --> 00:28:03,279
level so bgpls has been used for quite a

800
00:28:03,279 --> 00:28:05,120
few years you know just for reporting

801
00:28:05,120 --> 00:28:05,840
the

802
00:28:05,840 --> 00:28:09,679
um you know topology of a network and

803
00:28:09,679 --> 00:28:12,559
um attributes of links such as the

804
00:28:12,559 --> 00:28:13,760
bandwidth of a link

805
00:28:13,760 --> 00:28:16,880
and so with the argo extensions to bgpls

806
00:28:16,880 --> 00:28:18,480
the controller knows

807
00:28:18,480 --> 00:28:21,279
what the flex algo membership is you

808
00:28:21,279 --> 00:28:22,640
know which nodes and links and members

809
00:28:22,640 --> 00:28:23,360
of a given

810
00:28:23,360 --> 00:28:25,600
flex hour go and then it can provide

811
00:28:25,600 --> 00:28:27,760
visualization on that basis

812
00:28:27,760 --> 00:28:30,880
um you know to the user in a graphical

813
00:28:30,880 --> 00:28:33,679
um form or it can um you know have a

814
00:28:33,679 --> 00:28:34,960
northbound rest api

815
00:28:34,960 --> 00:28:37,679
to you know report to you know an

816
00:28:37,679 --> 00:28:39,120
orchestrator or something like that if

817
00:28:39,120 --> 00:28:40,480
that's interested in

818
00:28:40,480 --> 00:28:42,559
what's going on at the flex algo level

819
00:28:42,559 --> 00:28:44,399
so the https extension is very

820
00:28:44,399 --> 00:28:46,320
useful ingredients as well for the

821
00:28:46,320 --> 00:28:49,120
visualization

822
00:28:49,200 --> 00:28:51,520
thank you our next question is how

823
00:28:51,520 --> 00:28:52,399
different is

824
00:28:52,399 --> 00:28:56,840
bgp class for transport compared to bgp

825
00:28:56,840 --> 00:28:59,840
srte yeah they're quite different beasts

826
00:28:59,840 --> 00:29:00,480
i would say

827
00:29:00,480 --> 00:29:04,000
because um srta is you know very much

828
00:29:04,000 --> 00:29:06,240
you know traffic engineering and further

829
00:29:06,240 --> 00:29:08,240
more controller driven so

830
00:29:08,240 --> 00:29:09,520
the usual model is that you've got

831
00:29:09,520 --> 00:29:12,000
controller you know computing a te

832
00:29:12,000 --> 00:29:15,039
path um you know across a network and

833
00:29:15,039 --> 00:29:15,520
then

834
00:29:15,520 --> 00:29:17,679
it imposes that path onto the ingress

835
00:29:17,679 --> 00:29:20,080
router by you know communicating it

836
00:29:20,080 --> 00:29:23,360
using the you know srt extensions for um

837
00:29:23,360 --> 00:29:26,480
you know bgp so it's traffic engineering

838
00:29:26,480 --> 00:29:30,000
orientated um bgpct is more

839
00:29:30,000 --> 00:29:33,279
um a case of providing glue between

840
00:29:33,279 --> 00:29:33,919
different

841
00:29:33,919 --> 00:29:37,600
um domains um with color

842
00:29:37,600 --> 00:29:40,240
awareness furthermore um you know for

843
00:29:40,240 --> 00:29:40,720
that

844
00:29:40,720 --> 00:29:42,159
um glue when you're sending traffic from

845
00:29:42,159 --> 00:29:44,640
one domain um to another

846
00:29:44,640 --> 00:29:47,200
um i mean whether or not an individual

847
00:29:47,200 --> 00:29:49,520
domain uses traffic engineering or not

848
00:29:49,520 --> 00:29:52,320
um is up to you and as i mentioned um

849
00:29:52,320 --> 00:29:53,679
you know people can make independent

850
00:29:53,679 --> 00:29:55,840
choices so the main one might be

851
00:29:55,840 --> 00:29:57,919
just using shortest path routing with

852
00:29:57,919 --> 00:30:00,240
flex algo another domain might be using

853
00:30:00,240 --> 00:30:03,039
you know traffic engineering and um so

854
00:30:03,039 --> 00:30:03,760
on so they're

855
00:30:03,760 --> 00:30:05,440
somewhat you know independent of each

856
00:30:05,440 --> 00:30:07,919
other i would say the bgp srt and the

857
00:30:07,919 --> 00:30:11,279
bgp um ct gotcha

858
00:30:11,279 --> 00:30:13,279
thank you our next question is could

859
00:30:13,279 --> 00:30:14,720
ibgb

860
00:30:14,720 --> 00:30:17,200
glasswood transport be used to add color

861
00:30:17,200 --> 00:30:18,159
awareness

862
00:30:18,159 --> 00:30:21,440
in an ibgp alu network and for example

863
00:30:21,440 --> 00:30:23,279
add color awareness without segment

864
00:30:23,279 --> 00:30:24,240
routing

865
00:30:24,240 --> 00:30:26,720
oh that's a good question actually um i

866
00:30:26,720 --> 00:30:27,520
should have said

867
00:30:27,520 --> 00:30:30,240
because um you know colors are not

868
00:30:30,240 --> 00:30:31,600
necessarily

869
00:30:31,600 --> 00:30:34,480
um associated with segment routing um

870
00:30:34,480 --> 00:30:35,120
per se

871
00:30:35,120 --> 00:30:37,919
and so in fact we recently added color

872
00:30:37,919 --> 00:30:38,799
awareness to

873
00:30:38,799 --> 00:30:42,799
rsvp so you can um create various rsvp

874
00:30:42,799 --> 00:30:45,600
te lsps and give um you know different

875
00:30:45,600 --> 00:30:46,399
colors

876
00:30:46,399 --> 00:30:50,000
um to them and so in a bgp

877
00:30:50,000 --> 00:30:53,360
ct um deployment um actually

878
00:30:53,360 --> 00:30:55,440
you know you could have rsvp in one or

879
00:30:55,440 --> 00:30:56,559
more domains you could have

880
00:30:56,559 --> 00:30:58,960
srt in of the domains as i mentioned

881
00:30:58,960 --> 00:31:00,240
flexago in

882
00:31:00,240 --> 00:31:03,519
um further domains and

883
00:31:03,519 --> 00:31:05,120
regardless of what people are doing

884
00:31:05,120 --> 00:31:06,640
within each domain

885
00:31:06,640 --> 00:31:10,080
um you know bgpct is providing the um

886
00:31:10,080 --> 00:31:11,840
glue with color awareness you know

887
00:31:11,840 --> 00:31:13,440
between those um

888
00:31:13,440 --> 00:31:16,720
domains yes so rsvp um coloring is

889
00:31:16,720 --> 00:31:17,440
something that we

890
00:31:17,440 --> 00:31:20,480
added actually in the um most recent

891
00:31:20,480 --> 00:31:22,360
release i mean people are interested in

892
00:31:22,360 --> 00:31:24,960
implementations actually bgpc tv added

893
00:31:24,960 --> 00:31:25,840
to

894
00:31:25,840 --> 00:31:30,159
um june ass 21.1 and also rsvp color

895
00:31:30,159 --> 00:31:31,519
awareness at the same time

896
00:31:31,519 --> 00:31:34,799
in fact got it

897
00:31:34,799 --> 00:31:38,720
um in your bgp uh classroom transport um

898
00:31:38,720 --> 00:31:40,240
part of the presentation you were

899
00:31:40,240 --> 00:31:41,760
referencing uh

900
00:31:41,760 --> 00:31:43,919
different autonomous systems where they

901
00:31:43,919 --> 00:31:44,960
all uh within a

902
00:31:44,960 --> 00:31:46,880
confederation managed by the same

903
00:31:46,880 --> 00:31:48,159
organization

904
00:31:48,159 --> 00:31:50,799
or perhaps they were across uh nni

905
00:31:50,799 --> 00:31:52,799
connected to a via ni or they were

906
00:31:52,799 --> 00:31:54,480
kind of independent autonomous systems

907
00:31:54,480 --> 00:31:55,919
oh right right sure

908
00:31:55,919 --> 00:31:58,000
um yeah not confederation in the sort of

909
00:31:58,000 --> 00:32:00,320
bgp confederation sense but i i know

910
00:32:00,320 --> 00:32:02,480
what you mean like belonging to the same

911
00:32:02,480 --> 00:32:05,600
um you know operator um in the main

912
00:32:05,600 --> 00:32:08,640
that would be the typical case like it

913
00:32:08,640 --> 00:32:10,240
has been for bgplu

914
00:32:10,240 --> 00:32:14,240
so if we look at how bgplu has been used

915
00:32:14,240 --> 00:32:15,440
that tends to be

916
00:32:15,440 --> 00:32:18,880
used in a single operator's network

917
00:32:18,880 --> 00:32:21,760
in order to give um some degree of scale

918
00:32:21,760 --> 00:32:22,480
so

919
00:32:22,480 --> 00:32:25,120
you might have a network with you know

920
00:32:25,120 --> 00:32:25,519
core

921
00:32:25,519 --> 00:32:28,960
and aggregation and access um domains

922
00:32:28,960 --> 00:32:31,279
and might be untenable to put them all

923
00:32:31,279 --> 00:32:32,320
into one

924
00:32:32,320 --> 00:32:35,360
um you know big igp and so what people

925
00:32:35,360 --> 00:32:36,240
tend to do is

926
00:32:36,240 --> 00:32:39,679
to have um you know

927
00:32:39,679 --> 00:32:42,240
in some implementation is you know for

928
00:32:42,240 --> 00:32:44,559
each aggregation you know each metro for

929
00:32:44,559 --> 00:32:45,679
example

930
00:32:45,679 --> 00:32:49,360
and then another as for the core

931
00:32:49,360 --> 00:32:52,320
and then between those asses they have

932
00:32:52,320 --> 00:32:52,640
um

933
00:32:52,640 --> 00:32:56,000
bgp lu and so by extension

934
00:32:56,000 --> 00:32:59,039
um people could use bgp um ct

935
00:32:59,039 --> 00:33:02,080
nowadays instead but for the same um

936
00:33:02,080 --> 00:33:04,799
overall use case of um you know this

937
00:33:04,799 --> 00:33:06,240
large network that

938
00:33:06,240 --> 00:33:08,399
is being um you know chopped up into

939
00:33:08,399 --> 00:33:10,000
these different asses for

940
00:33:10,000 --> 00:33:12,000
scaling reasons and once they have the

941
00:33:12,000 --> 00:33:14,159
bgp ct they have the color awareness

942
00:33:14,159 --> 00:33:16,159
you know between those two domains that

943
00:33:16,159 --> 00:33:17,519
said from the protocol point of view

944
00:33:17,519 --> 00:33:18,640
there's nothing

945
00:33:18,640 --> 00:33:20,880
stopping people using it between real

946
00:33:20,880 --> 00:33:23,279
you know separate asses belonging to

947
00:33:23,279 --> 00:33:25,279
different companies it's just something

948
00:33:25,279 --> 00:33:26,399
that's um

949
00:33:26,399 --> 00:33:28,399
not happens so much so certainly it

950
00:33:28,399 --> 00:33:30,159
tends to be you know within one

951
00:33:30,159 --> 00:33:31,760
organization that we see these sorts of

952
00:33:31,760 --> 00:33:32,480
things

953
00:33:32,480 --> 00:33:36,000
used you know more typically

954
00:33:36,000 --> 00:33:38,240
very good julian again thank you very

955
00:33:38,240 --> 00:33:39,760
much for joining us uh

956
00:33:39,760 --> 00:33:42,799
for um uh doing this q a uh we have

957
00:33:42,799 --> 00:33:44,080
really good questions actually there are

958
00:33:44,080 --> 00:33:45,440
more questions

959
00:33:45,440 --> 00:33:47,440
if you are you're welcome to answer the

960
00:33:47,440 --> 00:33:49,360
q a yep

961
00:33:49,360 --> 00:33:52,559
and tab and uh with that again thank you

962
00:33:52,559 --> 00:33:54,000
for joining us

963
00:33:54,000 --> 00:33:56,270
thank you very much jorgen thank you

964
00:33:56,270 --> 00:34:01,080
[Music]

965
00:34:01,080 --> 00:34:04,080
everybody

