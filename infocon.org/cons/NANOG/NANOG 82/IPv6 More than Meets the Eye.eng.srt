1
00:00:00,000 --> 00:00:05,759
[Music]

2
00:00:05,759 --> 00:00:06,560
hi everyone

3
00:00:06,560 --> 00:00:08,880
my name is nick russo and today we're

4
00:00:08,880 --> 00:00:09,599
going to talk about

5
00:00:09,599 --> 00:00:12,000
ipv6 but we're going to take a little

6
00:00:12,000 --> 00:00:13,200
bit different approach

7
00:00:13,200 --> 00:00:15,200
as a lot of other network people might

8
00:00:15,200 --> 00:00:16,720
take because i want to talk about some

9
00:00:16,720 --> 00:00:17,840
of the

10
00:00:17,840 --> 00:00:21,039
not necessarily niche features of ipv6

11
00:00:21,039 --> 00:00:22,560
but i want you to look at it in a

12
00:00:22,560 --> 00:00:23,600
different light

13
00:00:23,600 --> 00:00:25,359
so i am a technical leader at cisco

14
00:00:25,359 --> 00:00:27,199
there's a link to my website there

15
00:00:27,199 --> 00:00:30,320
and let's get started so i want to start

16
00:00:30,320 --> 00:00:32,159
with just a very basic

17
00:00:32,159 --> 00:00:35,040
somewhat boring overview of stuff that

18
00:00:35,040 --> 00:00:37,040
everyone or most people already know

19
00:00:37,040 --> 00:00:38,879
about ipv6

20
00:00:38,879 --> 00:00:41,360
these are the standard talking points or

21
00:00:41,360 --> 00:00:42,719
selling points that we've been hearing

22
00:00:42,719 --> 00:00:43,040
for

23
00:00:43,040 --> 00:00:45,520
probably close to 20 years about why

24
00:00:45,520 --> 00:00:47,120
ipv6 is better

25
00:00:47,120 --> 00:00:49,440
why you should migrate to it and a lot

26
00:00:49,440 --> 00:00:51,280
of the doom and gloom around if you

27
00:00:51,280 --> 00:00:53,039
don't migrate to ipv6 there's going to

28
00:00:53,039 --> 00:00:54,480
be all this horrible future

29
00:00:54,480 --> 00:00:56,879
for you and your company so a few of

30
00:00:56,879 --> 00:00:58,000
those kind of factors

31
00:00:58,000 --> 00:01:01,280
are ipv6 is bigger than ipv4 so when we

32
00:01:01,280 --> 00:01:02,160
think about

33
00:01:02,160 --> 00:01:04,959
why is this relevant probably the most

34
00:01:04,959 --> 00:01:06,640
the most important piece of this or at

35
00:01:06,640 --> 00:01:08,560
least the biggest selling point is that

36
00:01:08,560 --> 00:01:11,680
ipv4 exhaustion is upon us now

37
00:01:11,680 --> 00:01:14,000
there have been various ways of selling

38
00:01:14,000 --> 00:01:15,439
and trading ipv4

39
00:01:15,439 --> 00:01:17,439
you know buying ips by the dollar or

40
00:01:17,439 --> 00:01:18,640
whatever currency

41
00:01:18,640 --> 00:01:20,080
and redistributing them to different

42
00:01:20,080 --> 00:01:21,600
companies who are not ready to move to

43
00:01:21,600 --> 00:01:22,479
ipv6

44
00:01:22,479 --> 00:01:25,119
but broadly speaking ipv6 is nearly

45
00:01:25,119 --> 00:01:26,000
inexhaustible

46
00:01:26,000 --> 00:01:27,840
and people are generally quite wasteful

47
00:01:27,840 --> 00:01:30,159
when it comes to allocating ipv6

48
00:01:30,159 --> 00:01:31,840
because it was made to be so large in

49
00:01:31,840 --> 00:01:33,680
the first place so this gets around one

50
00:01:33,680 --> 00:01:36,079
of the biggest limitations with ipv4

51
00:01:36,079 --> 00:01:38,240
but a lot of people don't actually have

52
00:01:38,240 --> 00:01:39,280
this problem

53
00:01:39,280 --> 00:01:41,040
when we're talking about small companies

54
00:01:41,040 --> 00:01:43,040
that maybe only need basic internet

55
00:01:43,040 --> 00:01:43,759
access

56
00:01:43,759 --> 00:01:46,240
or they have some kind of ipsec based

57
00:01:46,240 --> 00:01:47,840
wan overlay and they're just trying to

58
00:01:47,840 --> 00:01:49,040
interconnect sites

59
00:01:49,040 --> 00:01:50,720
they may not need a whole lot of public

60
00:01:50,720 --> 00:01:52,799
ipv4 address space

61
00:01:52,799 --> 00:01:56,000
so this kind of fear point doesn't

62
00:01:56,000 --> 00:01:56,560
really

63
00:01:56,560 --> 00:01:58,719
strike fear into people as often as a

64
00:01:58,719 --> 00:02:01,200
lot of ipv6 pundits would like it to

65
00:02:01,200 --> 00:02:04,000
and for the record i am very pro ipv6

66
00:02:04,000 --> 00:02:05,040
but i think that

67
00:02:05,040 --> 00:02:07,040
the way that our community has gone

68
00:02:07,040 --> 00:02:08,239
about selling it

69
00:02:08,239 --> 00:02:10,560
and gone about promoting it and gone

70
00:02:10,560 --> 00:02:11,760
about demonstrating it

71
00:02:11,760 --> 00:02:14,879
has been not very good because we tend

72
00:02:14,879 --> 00:02:16,319
to focus on the points that you see here

73
00:02:16,319 --> 00:02:17,599
on the slide

74
00:02:17,599 --> 00:02:19,440
so there are some other basic technical

75
00:02:19,440 --> 00:02:21,120
details about ipv6

76
00:02:21,120 --> 00:02:23,520
that it can't be fragmented in transit

77
00:02:23,520 --> 00:02:25,520
so there are some complex mechanisms

78
00:02:25,520 --> 00:02:27,840
that ipv6 uses to ensure fragmentation

79
00:02:27,840 --> 00:02:30,239
only happens between the and hosts

80
00:02:30,239 --> 00:02:32,720
namely there are messages in icmp v6

81
00:02:32,720 --> 00:02:34,239
like the router advertisement that can

82
00:02:34,239 --> 00:02:35,360
carry the mtu

83
00:02:35,360 --> 00:02:37,519
to the end host so the end host can

84
00:02:37,519 --> 00:02:39,120
communicate that to the application

85
00:02:39,120 --> 00:02:41,200
and the application can fragment packets

86
00:02:41,200 --> 00:02:43,280
internally or whatever else needs to

87
00:02:43,280 --> 00:02:44,160
happen

88
00:02:44,160 --> 00:02:46,000
so fragmentation in the middle of the

89
00:02:46,000 --> 00:02:48,239
network which is generally a performance

90
00:02:48,239 --> 00:02:50,640
killer on various routers with ipv4

91
00:02:50,640 --> 00:02:52,080
that's not so much of a concern with

92
00:02:52,080 --> 00:02:54,239
ipv6 and these again are just minor

93
00:02:54,239 --> 00:02:56,080
advantages i think

94
00:02:56,080 --> 00:02:58,319
we also have just some more uh

95
00:02:58,319 --> 00:03:00,319
semantical type differences where we

96
00:03:00,319 --> 00:03:02,640
in ipv4 we had a variety of different

97
00:03:02,640 --> 00:03:03,519
protocols

98
00:03:03,519 --> 00:03:05,599
to handle some basic link layer

99
00:03:05,599 --> 00:03:06,560
communications

100
00:03:06,560 --> 00:03:09,440
for example to map ipv4 addresses and

101
00:03:09,440 --> 00:03:11,360
layer 2 ethernet mac addresses

102
00:03:11,360 --> 00:03:13,040
we typically use address resolution

103
00:03:13,040 --> 00:03:14,800
protocol or arp

104
00:03:14,800 --> 00:03:16,840
most engineers are familiar with how arp

105
00:03:16,840 --> 00:03:19,040
works we also have internet group

106
00:03:19,040 --> 00:03:21,040
management protocol or igmp

107
00:03:21,040 --> 00:03:23,200
also known as ip protocol number two in

108
00:03:23,200 --> 00:03:24,319
ipv4

109
00:03:24,319 --> 00:03:26,640
to signal between hosts and routers for

110
00:03:26,640 --> 00:03:28,159
a multicast group membership

111
00:03:28,159 --> 00:03:30,159
and it plays a role in just telling

112
00:03:30,159 --> 00:03:31,519
routers when hosts want to receive

113
00:03:31,519 --> 00:03:32,400
multicast

114
00:03:32,400 --> 00:03:35,200
pretty basic protocol there's also icmp

115
00:03:35,200 --> 00:03:36,560
router discovery protocol

116
00:03:36,560 --> 00:03:39,519
not very commonly used in ipv4 but it's

117
00:03:39,519 --> 00:03:40,480
somewhat like

118
00:03:40,480 --> 00:03:41,760
being able to communicate with your

119
00:03:41,760 --> 00:03:43,040
routers to learn their gateway

120
00:03:43,040 --> 00:03:43,840
information

121
00:03:43,840 --> 00:03:45,680
and discover who the routers are on the

122
00:03:45,680 --> 00:03:47,760
lan segment

123
00:03:47,760 --> 00:03:50,080
what we do in ipv6 is there was a desire

124
00:03:50,080 --> 00:03:52,000
to consolidate all those things together

125
00:03:52,000 --> 00:03:53,760
into icmp v6

126
00:03:53,760 --> 00:03:56,159
and this is a very broad and expansive

127
00:03:56,159 --> 00:03:57,040
and powerful

128
00:03:57,040 --> 00:03:58,879
protocol that can do a lot of different

129
00:03:58,879 --> 00:04:02,239
things in ipv4 when we think about icmp

130
00:04:02,239 --> 00:04:03,519
we generally think about it in the

131
00:04:03,519 --> 00:04:05,519
context of pings and replies

132
00:04:05,519 --> 00:04:07,599
and maybe some unreachable messages like

133
00:04:07,599 --> 00:04:09,120
administratively prohibited

134
00:04:09,120 --> 00:04:11,439
port unreachable host unreachable time

135
00:04:11,439 --> 00:04:12,159
exceeded

136
00:04:12,159 --> 00:04:14,959
a few of the basic ones but icmbv6 can

137
00:04:14,959 --> 00:04:15,920
do a lot more

138
00:04:15,920 --> 00:04:18,160
it can do all those things plus

139
00:04:18,160 --> 00:04:20,798
everything that arp igmp and irdp can do

140
00:04:20,798 --> 00:04:22,320
just with different names

141
00:04:22,320 --> 00:04:24,400
so the it encompasses a much broader

142
00:04:24,400 --> 00:04:26,560
scope so we've kind of consolidated the

143
00:04:26,560 --> 00:04:28,800
number of protocols needed into fewer

144
00:04:28,800 --> 00:04:31,040
but there is a lot of hidden capability

145
00:04:31,040 --> 00:04:32,880
within icmp v6 so i'm going to talk

146
00:04:32,880 --> 00:04:33,440
about

147
00:04:33,440 --> 00:04:35,520
some of those capabilities so this

148
00:04:35,520 --> 00:04:37,440
presentation isn't meant to be like some

149
00:04:37,440 --> 00:04:39,360
overly complicated discussion about all

150
00:04:39,360 --> 00:04:41,120
the ipv6 technologies

151
00:04:41,120 --> 00:04:42,960
but rather it is meant to be a

152
00:04:42,960 --> 00:04:44,960
discussion about

153
00:04:44,960 --> 00:04:46,720
how we can use these technologies to

154
00:04:46,720 --> 00:04:48,479
solve different business problems

155
00:04:48,479 --> 00:04:50,080
and then finally there are a few things

156
00:04:50,080 --> 00:04:52,160
that simply don't exist in ipv6

157
00:04:52,160 --> 00:04:54,400
we don't have any concept of statefulnet

158
00:04:54,400 --> 00:04:55,199
between

159
00:04:55,199 --> 00:04:58,160
ipv6 to ipv6 because that's generally

160
00:04:58,160 --> 00:04:58,639
seem

161
00:04:58,639 --> 00:05:01,600
seen as not useful and likewise for a

162
00:05:01,600 --> 00:05:03,360
multicast source discovery protocol or

163
00:05:03,360 --> 00:05:04,560
msdp

164
00:05:04,560 --> 00:05:06,560
that doesn't exist in ipv6 either there

165
00:05:06,560 --> 00:05:08,880
are other ways to do rendezvous point

166
00:05:08,880 --> 00:05:11,039
redundancy within ipv6 so some protocols

167
00:05:11,039 --> 00:05:13,120
were just overhauled entirely

168
00:05:13,120 --> 00:05:15,280
so that's just kind of a quick review on

169
00:05:15,280 --> 00:05:16,639
a few of the functional

170
00:05:16,639 --> 00:05:19,680
differences between v4 and v6 but what i

171
00:05:19,680 --> 00:05:21,440
think is more interesting is to point

172
00:05:21,440 --> 00:05:21,840
out

173
00:05:21,840 --> 00:05:25,120
things that v4 can't do at all or

174
00:05:25,120 --> 00:05:27,440
can't easily do without a whole bunch of

175
00:05:27,440 --> 00:05:29,360
extra unnecessary work

176
00:05:29,360 --> 00:05:31,360
and these are things that ipv6 can do

177
00:05:31,360 --> 00:05:32,720
relatively easy

178
00:05:32,720 --> 00:05:34,800
so i would challenge you to apply some

179
00:05:34,800 --> 00:05:35,919
creative thinking here

180
00:05:35,919 --> 00:05:38,560
and see how these can make your life a

181
00:05:38,560 --> 00:05:40,160
little bit easier

182
00:05:40,160 --> 00:05:43,199
so the first is there's not an easy way

183
00:05:43,199 --> 00:05:45,840
commonly in ipv4 to signal the time to

184
00:05:45,840 --> 00:05:46,400
live

185
00:05:46,400 --> 00:05:48,720
sometimes called the hop limit in ipv6

186
00:05:48,720 --> 00:05:50,560
from routers to clients

187
00:05:50,560 --> 00:05:52,160
so we have these other mechanisms like

188
00:05:52,160 --> 00:05:54,160
path mtu discovery and various other

189
00:05:54,160 --> 00:05:55,919
techniques of determining the mtu along

190
00:05:55,919 --> 00:05:56,560
the path

191
00:05:56,560 --> 00:05:58,400
but in ipv6 we can signal that to

192
00:05:58,400 --> 00:06:00,880
clients so that's a big advantage

193
00:06:00,880 --> 00:06:02,240
another one and this is one of my

194
00:06:02,240 --> 00:06:04,240
favorite things about ipv6 in general is

195
00:06:04,240 --> 00:06:05,759
that we can statelessly generate

196
00:06:05,759 --> 00:06:07,600
unique addresses and there's a we'll

197
00:06:07,600 --> 00:06:09,280
talk much more about that as we go and

198
00:06:09,280 --> 00:06:10,880
some of the use cases for this

199
00:06:10,880 --> 00:06:12,880
beyond just basic network management and

200
00:06:12,880 --> 00:06:15,199
network operations

201
00:06:15,199 --> 00:06:16,880
we can also statelessly communicate

202
00:06:16,880 --> 00:06:18,479
non-address information

203
00:06:18,479 --> 00:06:21,039
i think everyone in the ipv4 world has

204
00:06:21,039 --> 00:06:21,680
worked with

205
00:06:21,680 --> 00:06:24,080
dhcp dynamic host configuration protocol

206
00:06:24,080 --> 00:06:25,759
at some point in their careers

207
00:06:25,759 --> 00:06:27,280
most large enterprises use it quite

208
00:06:27,280 --> 00:06:29,120
extensively on their wired networks and

209
00:06:29,120 --> 00:06:29,840
it's pretty much

210
00:06:29,840 --> 00:06:32,240
a solid requirement for just about any

211
00:06:32,240 --> 00:06:33,680
modern wireless network

212
00:06:33,680 --> 00:06:36,160
so dhcp is pretty much everywhere but

213
00:06:36,160 --> 00:06:38,319
dhcp and ipv4 is

214
00:06:38,319 --> 00:06:40,479
pretty limited to just handing out an

215
00:06:40,479 --> 00:06:41,919
ipv4 address

216
00:06:41,919 --> 00:06:43,919
along with some extra information

217
00:06:43,919 --> 00:06:45,440
options as we call them like what is the

218
00:06:45,440 --> 00:06:46,479
default gateway

219
00:06:46,479 --> 00:06:48,080
what are the dns servers what's the

220
00:06:48,080 --> 00:06:50,560
domain name what are my ntp servers

221
00:06:50,560 --> 00:06:52,800
maybe a tftp server a few other basic

222
00:06:52,800 --> 00:06:54,000
details

223
00:06:54,000 --> 00:06:58,080
but in dhcp v6 we can hand out

224
00:06:58,080 --> 00:07:00,639
everything except in ip so we can hand

225
00:07:00,639 --> 00:07:02,000
out what is the domain

226
00:07:02,000 --> 00:07:04,400
name what are the dns servers etc and we

227
00:07:04,400 --> 00:07:05,759
can do that statelessly

228
00:07:05,759 --> 00:07:07,840
because that information isn't unique to

229
00:07:07,840 --> 00:07:09,360
a client and therefore

230
00:07:09,360 --> 00:07:11,520
doesn't need to be retained by a server

231
00:07:11,520 --> 00:07:13,120
there's a very huge advantage to doing

232
00:07:13,120 --> 00:07:14,800
that

233
00:07:14,800 --> 00:07:17,599
we can also allocate entire prefixes so

234
00:07:17,599 --> 00:07:19,759
in ipv4 there is technically a feature

235
00:07:19,759 --> 00:07:20,160
called

236
00:07:20,160 --> 00:07:23,120
on-demand access pool or odap i've been

237
00:07:23,120 --> 00:07:24,319
doing networking for

238
00:07:24,319 --> 00:07:25,840
at least a decade at this point in some

239
00:07:25,840 --> 00:07:27,440
pretty complex environments and i've not

240
00:07:27,440 --> 00:07:29,199
seen odap deployed in real life maybe

241
00:07:29,199 --> 00:07:30,319
some of you have

242
00:07:30,319 --> 00:07:32,319
but in ipv6 we have a feature called

243
00:07:32,319 --> 00:07:33,919
prefix delegation which we'll talk more

244
00:07:33,919 --> 00:07:34,720
about later

245
00:07:34,720 --> 00:07:37,039
so in ipv6 we can delegate entire

246
00:07:37,039 --> 00:07:38,000
prefixes

247
00:07:38,000 --> 00:07:40,400
to to like a router for example and then

248
00:07:40,400 --> 00:07:42,080
that router can distribute that prefixes

249
00:07:42,080 --> 00:07:43,440
amongst its interfaces

250
00:07:43,440 --> 00:07:46,560
effectively providing unique subnets to

251
00:07:46,560 --> 00:07:48,000
all of its different

252
00:07:48,000 --> 00:07:51,280
lan interfaces for example and in being

253
00:07:51,280 --> 00:07:52,960
able to basically provision a remote

254
00:07:52,960 --> 00:07:53,520
site

255
00:07:53,520 --> 00:07:56,800
using a built-in process to ipv6

256
00:07:56,800 --> 00:07:59,440
rather than having to do some convoluted

257
00:07:59,440 --> 00:08:01,039
zero touch provisioning system that a

258
00:08:01,039 --> 00:08:04,319
lot of vendors have have created

259
00:08:04,319 --> 00:08:06,319
there's also uh another thing we'll talk

260
00:08:06,319 --> 00:08:08,160
about this as we go but you can embed

261
00:08:08,160 --> 00:08:10,319
add information inside the addresses so

262
00:08:10,319 --> 00:08:12,160
if you've ever worked in a large scale

263
00:08:12,160 --> 00:08:13,919
ipv6 multicast environment

264
00:08:13,919 --> 00:08:16,319
maybe you've seen embedded rp where the

265
00:08:16,319 --> 00:08:18,000
rendezvous point can be carried

266
00:08:18,000 --> 00:08:20,560
in the ipv6 multicast group so we don't

267
00:08:20,560 --> 00:08:22,319
need some out of band protocol like

268
00:08:22,319 --> 00:08:23,440
bootstrap router

269
00:08:23,440 --> 00:08:25,280
to try to communicate that information

270
00:08:25,280 --> 00:08:26,720
so there's a lot of kind of cool

271
00:08:26,720 --> 00:08:28,800
advantages to ipv6 that i think some

272
00:08:28,800 --> 00:08:30,560
people look at these as just kind of

273
00:08:30,560 --> 00:08:33,279
silly tips and stuff but in this

274
00:08:33,279 --> 00:08:34,799
presentation we're going to talk about

275
00:08:34,799 --> 00:08:35,599
two

276
00:08:35,599 --> 00:08:38,640
real-life large-scale

277
00:08:38,640 --> 00:08:42,479
very well documented and well uh tested

278
00:08:42,479 --> 00:08:44,320
architectures that i've personally

279
00:08:44,320 --> 00:08:46,560
developed and in this presentation we'll

280
00:08:46,560 --> 00:08:47,920
talk kind of at a high level about how

281
00:08:47,920 --> 00:08:49,360
these architectures work

282
00:08:49,360 --> 00:08:50,959
but towards the end i'll give you

283
00:08:50,959 --> 00:08:52,800
references if you want to read the 30 or

284
00:08:52,800 --> 00:08:55,279
40 page write-ups i've done on each one

285
00:08:55,279 --> 00:08:57,920
so the first one is an unlimited scale

286
00:08:57,920 --> 00:08:58,640
wan

287
00:08:58,640 --> 00:08:59,920
all right so now i sound like a vendor

288
00:08:59,920 --> 00:09:01,040
i'm trying to sell something right

289
00:09:01,040 --> 00:09:02,080
unlimited scale no

290
00:09:02,080 --> 00:09:03,920
really it is and the reason it's on

291
00:09:03,920 --> 00:09:06,959
limited scale is because it's stateless

292
00:09:06,959 --> 00:09:08,640
so here are the requirements and i'm not

293
00:09:08,640 --> 00:09:10,480
going to get into the details and

294
00:09:10,480 --> 00:09:12,000
and where i got these requirements from

295
00:09:12,000 --> 00:09:13,600
which customer and which environment due

296
00:09:13,600 --> 00:09:14,160
to

297
00:09:14,160 --> 00:09:16,160
uh operational security reasons but this

298
00:09:16,160 --> 00:09:17,600
is a real life

299
00:09:17,600 --> 00:09:19,760
design that i put together for a

300
00:09:19,760 --> 00:09:21,120
customer environment where

301
00:09:21,120 --> 00:09:23,760
we were trying to solve a problem where

302
00:09:23,760 --> 00:09:24,320
we had an

303
00:09:24,320 --> 00:09:25,920
overlay network and an underlying

304
00:09:25,920 --> 00:09:28,000
network and you know you might think of

305
00:09:28,000 --> 00:09:31,200
common features like cisco's dmvpn or

306
00:09:31,200 --> 00:09:33,040
juniper's group vpn and there are a lot

307
00:09:33,040 --> 00:09:34,800
of other overlay type technologies that

308
00:09:34,800 --> 00:09:36,000
could solve this problem

309
00:09:36,000 --> 00:09:37,839
but none of them give the the scale that

310
00:09:37,839 --> 00:09:39,760
we needed for this design

311
00:09:39,760 --> 00:09:42,399
so we needed any to any connectivity not

312
00:09:42,399 --> 00:09:43,519
through a hub

313
00:09:43,519 --> 00:09:45,519
we wanted minimal maintenance so minimum

314
00:09:45,519 --> 00:09:46,720
operations administration and

315
00:09:46,720 --> 00:09:48,000
maintenance we wanted to

316
00:09:48,000 --> 00:09:49,760
put put the routers out in the in the

317
00:09:49,760 --> 00:09:51,760
network and have them generally operate

318
00:09:51,760 --> 00:09:53,440
without a whole lot of troubleshooting

319
00:09:53,440 --> 00:09:54,959
we wanted it to be easy to connect

320
00:09:54,959 --> 00:09:56,560
clients so like those laptops you see on

321
00:09:56,560 --> 00:09:58,000
the high level diagram we needed a way

322
00:09:58,000 --> 00:09:59,519
to connect them easily without a whole

323
00:09:59,519 --> 00:10:00,320
bunch of

324
00:10:00,320 --> 00:10:03,360
complex configuration on them we needed

325
00:10:03,360 --> 00:10:05,279
a way to optionally provide encryption

326
00:10:05,279 --> 00:10:06,320
because there were some parts of the

327
00:10:06,320 --> 00:10:07,839
network that simply didn't need it but

328
00:10:07,839 --> 00:10:09,040
others that did

329
00:10:09,040 --> 00:10:10,720
and of course the encryption is going to

330
00:10:10,720 --> 00:10:13,200
introduce some uh scaling limitations

331
00:10:13,200 --> 00:10:13,839
but

332
00:10:13,839 --> 00:10:16,079
you know that's neither here nor there

333
00:10:16,079 --> 00:10:17,600
and we also need a way

334
00:10:17,600 --> 00:10:20,720
to interwork from the ipv6 network to an

335
00:10:20,720 --> 00:10:22,399
existing ipv4 network

336
00:10:22,399 --> 00:10:24,480
so we can bolt on this new wan to the

337
00:10:24,480 --> 00:10:26,560
network and have all these clients run

338
00:10:26,560 --> 00:10:28,560
in a v6 only environment but they still

339
00:10:28,560 --> 00:10:30,839
need to communicate with legacy ipv6

340
00:10:30,839 --> 00:10:33,600
services so the broad solution here

341
00:10:33,600 --> 00:10:36,959
is to use 6rd so 6rd stands for 6 rapid

342
00:10:36,959 --> 00:10:37,600
deployment

343
00:10:37,600 --> 00:10:38,959
and it's typically used in service

344
00:10:38,959 --> 00:10:40,640
provider environments to extend

345
00:10:40,640 --> 00:10:43,760
ipv6 to customer routers typically in a

346
00:10:43,760 --> 00:10:44,959
residential setting

347
00:10:44,959 --> 00:10:47,279
and it works very well for that case if

348
00:10:47,279 --> 00:10:48,079
you're familiar

349
00:10:48,079 --> 00:10:50,320
with six to four automatic tunneling it

350
00:10:50,320 --> 00:10:51,600
uses the 2002

351
00:10:51,600 --> 00:10:54,640
colon colon 16 prefix then you know

352
00:10:54,640 --> 00:10:57,279
most of what 6rd is about 6rd just makes

353
00:10:57,279 --> 00:10:58,560
it a little bit more flexible on what

354
00:10:58,560 --> 00:10:59,839
address ranges you can use but the

355
00:10:59,839 --> 00:11:02,560
concept is the same

356
00:11:02,560 --> 00:11:04,399
the thing that makes this interesting is

357
00:11:04,399 --> 00:11:05,600
that you can apply

358
00:11:05,600 --> 00:11:08,160
get vpn or any other kind of underlay

359
00:11:08,160 --> 00:11:10,000
ipsec technology

360
00:11:10,000 --> 00:11:12,560
to perform an encryption of that

361
00:11:12,560 --> 00:11:13,519
underlay network

362
00:11:13,519 --> 00:11:15,120
we'll talk or the sorry of that overlay

363
00:11:15,120 --> 00:11:17,519
network and we'll talk through that

364
00:11:17,519 --> 00:11:20,720
to do the the uh connectivity for the

365
00:11:20,720 --> 00:11:21,600
clients

366
00:11:21,600 --> 00:11:24,800
we combine stateless dhcp v6

367
00:11:24,800 --> 00:11:28,240
and slack and slack stands for stateless

368
00:11:28,240 --> 00:11:30,720
automatic address configuration and what

369
00:11:30,720 --> 00:11:31,680
we do with that

370
00:11:31,680 --> 00:11:34,640
is the stateless dhcp v6 will hand out

371
00:11:34,640 --> 00:11:35,920
here's the domain name

372
00:11:35,920 --> 00:11:37,760
and here are the dns servers which don't

373
00:11:37,760 --> 00:11:39,519
change so we can pre-position that on

374
00:11:39,519 --> 00:11:40,480
all the routers

375
00:11:40,480 --> 00:11:42,480
all those edge drivers and then we can

376
00:11:42,480 --> 00:11:43,600
use slack

377
00:11:43,600 --> 00:11:47,040
to perform the allocation of the ipv6

378
00:11:47,040 --> 00:11:48,640
addresses to make sure that there is

379
00:11:48,640 --> 00:11:50,880
uniqueness across the network as well

380
00:11:50,880 --> 00:11:52,480
so to go into a little bit more

381
00:11:52,480 --> 00:11:54,079
technical detail here

382
00:11:54,079 --> 00:11:55,519
and again this is not meant to be a deep

383
00:11:55,519 --> 00:11:57,440
dive on 6rd because this is a pretty

384
00:11:57,440 --> 00:11:58,800
well-known technology

385
00:11:58,800 --> 00:12:00,079
even if it's new to you there's plenty

386
00:12:00,079 --> 00:12:02,160
of resources out there to explain it

387
00:12:02,160 --> 00:12:04,160
but broadly speaking suppose we have

388
00:12:04,160 --> 00:12:06,399
connectivity between these three sites

389
00:12:06,399 --> 00:12:09,440
over an ipv4 underlay network so you can

390
00:12:09,440 --> 00:12:11,360
see i've got some ipv4 addresses here

391
00:12:11,360 --> 00:12:12,720
like the 192.

392
00:12:12,720 --> 00:12:15,920
sorry the 198.51 is the prefix

393
00:12:15,920 --> 00:12:18,160
and then the individual subnets for them

394
00:12:18,160 --> 00:12:19,760
have the last two octets which may

395
00:12:19,760 --> 00:12:20,639
differ

396
00:12:20,639 --> 00:12:22,480
so i used easy numbers here just to make

397
00:12:22,480 --> 00:12:24,480
it a little bit easier to look at

398
00:12:24,480 --> 00:12:26,720
and the way 6rd works is that you

399
00:12:26,720 --> 00:12:27,920
specify

400
00:12:27,920 --> 00:12:30,800
what is my 6rd prefix first so maybe an

401
00:12:30,800 --> 00:12:32,720
isp hands this out or you get it

402
00:12:32,720 --> 00:12:34,480
allocated by your job environment

403
00:12:34,480 --> 00:12:36,160
and let's just say that we're using that

404
00:12:36,160 --> 00:12:38,480
common 2001 colon db8

405
00:12:38,480 --> 00:12:41,360
colon colon slash 32 ipv6 documentation

406
00:12:41,360 --> 00:12:43,680
prefix for this presentation

407
00:12:43,680 --> 00:12:46,880
and the prefix length allows us to

408
00:12:46,880 --> 00:12:49,760
answer the question how many bits of the

409
00:12:49,760 --> 00:12:52,079
ipv4 address are the same between

410
00:12:52,079 --> 00:12:54,639
sites so for example when we look at the

411
00:12:54,639 --> 00:12:57,519
32-bit ipv4 addresses from each sites

412
00:12:57,519 --> 00:12:59,440
in our particular environment we can say

413
00:12:59,440 --> 00:13:02,000
with confidence that the first 16 bits

414
00:13:02,000 --> 00:13:03,360
are the same on each

415
00:13:03,360 --> 00:13:05,760
which means we only care about the last

416
00:13:05,760 --> 00:13:06,959
16.

417
00:13:06,959 --> 00:13:09,440
therefore we don't need to encode the

418
00:13:09,440 --> 00:13:11,519
entire 32 bits into our

419
00:13:11,519 --> 00:13:13,920
ipv6 address we can only include the

420
00:13:13,920 --> 00:13:14,800
last

421
00:13:14,800 --> 00:13:17,920
16 bits the last two octets instead what

422
00:13:17,920 --> 00:13:19,120
this allows us to do

423
00:13:19,120 --> 00:13:20,800
is we can you look for example on the

424
00:13:20,800 --> 00:13:22,320
bottom left where it says site prefix

425
00:13:22,320 --> 00:13:22,800
for the

426
00:13:22,800 --> 00:13:25,200
the site labeled br for border relay

427
00:13:25,200 --> 00:13:28,000
like the internet gateway

428
00:13:28,000 --> 00:13:30,720
we can have hanging off of that site the

429
00:13:30,720 --> 00:13:33,120
prefix is 2001 colon db8

430
00:13:33,120 --> 00:13:37,279
colon 1 0a now really in ipv6 that's

431
00:13:37,279 --> 00:13:40,320
0 1 a so sorry

432
00:13:40,320 --> 00:13:43,360
0 1 0 a meaning 1 and 10

433
00:13:43,360 --> 00:13:45,519
in hexadecimal and what that allows us

434
00:13:45,519 --> 00:13:47,040
to do is it says we're only going to

435
00:13:47,040 --> 00:13:49,120
take those two attacks the last two

436
00:13:49,120 --> 00:13:52,160
embed them in band in the ipv6 prefix so

437
00:13:52,160 --> 00:13:54,399
now any traffic from the other sites

438
00:13:54,399 --> 00:13:57,440
destined to an ipv6 destination within

439
00:13:57,440 --> 00:13:58,079
that

440
00:13:58,079 --> 00:14:01,120
10a colon colon 48 prefix will be

441
00:14:01,120 --> 00:14:02,079
directed

442
00:14:02,079 --> 00:14:04,639
towards the vr so it's really cool and

443
00:14:04,639 --> 00:14:07,040
it works just like the stateless 6 to 4

444
00:14:07,040 --> 00:14:09,440
automatic tunneling just more flexible

445
00:14:09,440 --> 00:14:11,519
on your prefix sizes and the addresses

446
00:14:11,519 --> 00:14:12,240
you can use

447
00:14:12,240 --> 00:14:13,760
and the same is true for the two remote

448
00:14:13,760 --> 00:14:16,079
sites and as long as you do this carving

449
00:14:16,079 --> 00:14:18,560
ahead of time then the i and as long as

450
00:14:18,560 --> 00:14:20,880
you have unique ipv4 addresses on every

451
00:14:20,880 --> 00:14:21,360
site

452
00:14:21,360 --> 00:14:23,600
then this is going to work just fine and

453
00:14:23,600 --> 00:14:24,560
there's no

454
00:14:24,560 --> 00:14:26,720
overlay control plane there's no bgp

455
00:14:26,720 --> 00:14:28,000
there's no ospf

456
00:14:28,000 --> 00:14:30,160
it's just a static route that allows all

457
00:14:30,160 --> 00:14:31,040
these sites to

458
00:14:31,040 --> 00:14:33,519
interconnect with each other by saying

459
00:14:33,519 --> 00:14:34,560
any traffic

460
00:14:34,560 --> 00:14:38,399
for 2001 colon db8 colon colon slash 32

461
00:14:38,399 --> 00:14:40,880
can be sent into the 6rd tunnel and

462
00:14:40,880 --> 00:14:41,680
that's it

463
00:14:41,680 --> 00:14:44,079
6rd will then unpack from that prefix

464
00:14:44,079 --> 00:14:46,399
what the target destination needs to be

465
00:14:46,399 --> 00:14:48,959
in ipv4 you can see i have that little

466
00:14:48,959 --> 00:14:50,720
fabricated packet capture at the bottom

467
00:14:50,720 --> 00:14:52,160
to show what that might look like for

468
00:14:52,160 --> 00:14:52,800
traffic

469
00:14:52,800 --> 00:14:56,000
transiting from site on the left

470
00:14:56,000 --> 00:14:58,000
to the site on the right this is just

471
00:14:58,000 --> 00:15:00,800
kind of a high level example

472
00:15:00,800 --> 00:15:02,240
now if we want to talk security it gets

473
00:15:02,240 --> 00:15:04,560
a little more complex so get vpn

474
00:15:04,560 --> 00:15:07,680
is an any to any technology it's cisco

475
00:15:07,680 --> 00:15:08,800
based but it's based on

476
00:15:08,800 --> 00:15:10,480
the group domain of interpretation the

477
00:15:10,480 --> 00:15:12,959
gdoi i believe and the idea behind it

478
00:15:12,959 --> 00:15:14,399
without getting too much into it

479
00:15:14,399 --> 00:15:16,000
is that we will have these centralized

480
00:15:16,000 --> 00:15:17,440
key servers the

481
00:15:17,440 --> 00:15:19,199
group members at the remote end will

482
00:15:19,199 --> 00:15:20,720
register to the key servers

483
00:15:20,720 --> 00:15:22,560
we'll download the ipsec keying

484
00:15:22,560 --> 00:15:24,079
information and we'll be able to

485
00:15:24,079 --> 00:15:26,399
communicate in any to any fashion

486
00:15:26,399 --> 00:15:28,399
using a shared ip spec security

487
00:15:28,399 --> 00:15:30,399
association or sa

488
00:15:30,399 --> 00:15:32,079
basically all we need to do when we

489
00:15:32,079 --> 00:15:33,519
identify our

490
00:15:33,519 --> 00:15:35,920
proxy acl basically what is the ipsec

491
00:15:35,920 --> 00:15:37,519
traffic that is interesting to us to be

492
00:15:37,519 --> 00:15:38,320
encrypted

493
00:15:38,320 --> 00:15:40,880
all we need to do is specify what are

494
00:15:40,880 --> 00:15:41,680
the

495
00:15:41,680 --> 00:15:43,600
uh source and destinations within that

496
00:15:43,600 --> 00:15:45,600
ipv6 underlay prefix that we talked

497
00:15:45,600 --> 00:15:46,639
about earlier

498
00:15:46,639 --> 00:15:48,560
so i say ipv6 what i really meant was

499
00:15:48,560 --> 00:15:50,560
the ipv4 underlay prefix

500
00:15:50,560 --> 00:15:52,639
that we are using for the ipv6 overlay

501
00:15:52,639 --> 00:15:54,160
of 6rd

502
00:15:54,160 --> 00:15:55,440
so if you found this interesting i'll

503
00:15:55,440 --> 00:15:56,720
give you a link at the end of the

504
00:15:56,720 --> 00:15:58,000
presentation which will detail this

505
00:15:58,000 --> 00:15:59,600
architecture in much more depth

506
00:15:59,600 --> 00:16:01,759
but this allows us to have a wan that

507
00:16:01,759 --> 00:16:02,639
can scale

508
00:16:02,639 --> 00:16:04,720
to enormous size in an enterprise

509
00:16:04,720 --> 00:16:06,480
environment with security

510
00:16:06,480 --> 00:16:08,320
while also providing an ability for the

511
00:16:08,320 --> 00:16:09,600
clients to automatically get their

512
00:16:09,600 --> 00:16:11,040
address assignments

513
00:16:11,040 --> 00:16:12,399
now i'll talk more about the client

514
00:16:12,399 --> 00:16:14,079
addressing in this use case because i

515
00:16:14,079 --> 00:16:16,240
think this one is also very interesting

516
00:16:16,240 --> 00:16:18,079
so kind of similar to the first example

517
00:16:18,079 --> 00:16:19,839
this second architecture was

518
00:16:19,839 --> 00:16:21,519
from another customer request i had a

519
00:16:21,519 --> 00:16:22,880
few years back about

520
00:16:22,880 --> 00:16:25,839
we have all these vehicles in our fleet

521
00:16:25,839 --> 00:16:27,600
whether it's mail trucks or

522
00:16:27,600 --> 00:16:29,759
amazon trucks or military vehicles or

523
00:16:29,759 --> 00:16:31,680
first responders or whatever it may be

524
00:16:31,680 --> 00:16:33,920
some kind of vehicle and we want to have

525
00:16:33,920 --> 00:16:34,720
an uh

526
00:16:34,720 --> 00:16:36,639
you know a wireless connectivity point

527
00:16:36,639 --> 00:16:38,959
in them so they can reach back to our

528
00:16:38,959 --> 00:16:39,759
main

529
00:16:39,759 --> 00:16:42,480
headquarters while they're on the move

530
00:16:42,480 --> 00:16:43,120
and we have

531
00:16:43,120 --> 00:16:44,800
thousands of these vehicles potentially

532
00:16:44,800 --> 00:16:46,480
and we don't want to manage each router

533
00:16:46,480 --> 00:16:48,320
individually for the initial setup

534
00:16:48,320 --> 00:16:50,079
so it needs to be very low touch when we

535
00:16:50,079 --> 00:16:51,600
do our initial setup we basically want

536
00:16:51,600 --> 00:16:53,360
to load a config on the device

537
00:16:53,360 --> 00:16:55,199
ideally not having to create unique

538
00:16:55,199 --> 00:16:56,639
configs for each device

539
00:16:56,639 --> 00:16:58,240
and then install them in the vehicle and

540
00:16:58,240 --> 00:16:59,680
drive away

541
00:16:59,680 --> 00:17:02,399
so the broad approach here is kind of

542
00:17:02,399 --> 00:17:04,000
similar to this previous example where

543
00:17:04,000 --> 00:17:06,480
we're going to tunnel v6 over v4

544
00:17:06,480 --> 00:17:08,640
but in this particular environment we

545
00:17:08,640 --> 00:17:10,480
needed to provide an additional layer of

546
00:17:10,480 --> 00:17:11,679
security

547
00:17:11,679 --> 00:17:14,000
so the goal was we only needed hub and

548
00:17:14,000 --> 00:17:15,439
spoke access in this case

549
00:17:15,439 --> 00:17:17,280
so you look at the bottom there those

550
00:17:17,280 --> 00:17:19,679
two nodes those two laptops never need

551
00:17:19,679 --> 00:17:20,400
to communicate

552
00:17:20,400 --> 00:17:22,400
laterally directly and in fact that's

553
00:17:22,400 --> 00:17:24,079
actually prohibited by this design

554
00:17:24,079 --> 00:17:27,280
so they must be centrally terminated

555
00:17:27,280 --> 00:17:30,000
per the requirements here we also need

556
00:17:30,000 --> 00:17:31,280
the ability to support multiple

557
00:17:31,280 --> 00:17:32,080
transports so

558
00:17:32,080 --> 00:17:35,440
in this example i show a node that has a

559
00:17:35,440 --> 00:17:37,760
wired connection into a switch near to

560
00:17:37,760 --> 00:17:39,760
the left of where it says ipv4

561
00:17:39,760 --> 00:17:42,080
and i have a dotted line to a wireless

562
00:17:42,080 --> 00:17:43,679
access point so this device has a wired

563
00:17:43,679 --> 00:17:44,960
in a wireless connection that should be

564
00:17:44,960 --> 00:17:46,080
supported

565
00:17:46,080 --> 00:17:48,080
the site should be fully dynamic and by

566
00:17:48,080 --> 00:17:50,400
that i mean we load in a golden config

567
00:17:50,400 --> 00:17:51,600
on the router

568
00:17:51,600 --> 00:17:54,480
and walk away and that same exact config

569
00:17:54,480 --> 00:17:56,240
gets loaded on every other router

570
00:17:56,240 --> 00:17:58,640
and we can plug it in and it just works

571
00:17:58,640 --> 00:18:00,000
we also needed a way that

572
00:18:00,000 --> 00:18:02,400
once the sites are online the day zero

573
00:18:02,400 --> 00:18:03,600
work is done

574
00:18:03,600 --> 00:18:05,600
what if we want to do day one and day

575
00:18:05,600 --> 00:18:07,280
two plus provisioning

576
00:18:07,280 --> 00:18:09,120
from the top down using standard

577
00:18:09,120 --> 00:18:10,960
automation tools like ansible or python

578
00:18:10,960 --> 00:18:11,679
scripts or

579
00:18:11,679 --> 00:18:13,919
even basic stuff like snmp we need that

580
00:18:13,919 --> 00:18:14,960
too

581
00:18:14,960 --> 00:18:17,120
so the broad solution here was to use

582
00:18:17,120 --> 00:18:18,080
bgp

583
00:18:18,080 --> 00:18:20,559
over dmvpn now again it doesn't have to

584
00:18:20,559 --> 00:18:22,799
be cisco dmvpn it can be any

585
00:18:22,799 --> 00:18:25,840
hubspoke ipsec type technology but

586
00:18:25,840 --> 00:18:27,440
broadly speaking dmvpn

587
00:18:27,440 --> 00:18:30,880
is what we used here and ipv6 bgp

588
00:18:30,880 --> 00:18:32,880
allowed us to exchange bgp routing

589
00:18:32,880 --> 00:18:34,640
dynamically over that environment

590
00:18:34,640 --> 00:18:36,320
so that the spokes could communicate

591
00:18:36,320 --> 00:18:38,480
their prefixes back to the hub

592
00:18:38,480 --> 00:18:40,000
now on the surface that doesn't sound

593
00:18:40,000 --> 00:18:41,600
particularly interesting there are a lot

594
00:18:41,600 --> 00:18:42,960
of companies who do something very

595
00:18:42,960 --> 00:18:43,760
similar

596
00:18:43,760 --> 00:18:45,919
but what makes this interesting is that

597
00:18:45,919 --> 00:18:48,400
we used ipv6 for this

598
00:18:48,400 --> 00:18:51,200
and in order to provide unique ipv6

599
00:18:51,200 --> 00:18:52,480
addressing to each site

600
00:18:52,480 --> 00:18:55,760
we used dhcp v6 prefix delegation

601
00:18:55,760 --> 00:18:57,679
remember that every router has the exact

602
00:18:57,679 --> 00:18:58,799
same configuration

603
00:18:58,799 --> 00:19:00,320
so it's not like a template that we are

604
00:19:00,320 --> 00:19:02,240
just churning out different variables

605
00:19:02,240 --> 00:19:02,960
for each site

606
00:19:02,960 --> 00:19:05,520
no they're all exactly the same the

607
00:19:05,520 --> 00:19:07,360
device once it comes up online and it

608
00:19:07,360 --> 00:19:09,600
forms its dmvpn tunnel

609
00:19:09,600 --> 00:19:11,919
it will send a dhcp request to get a

610
00:19:11,919 --> 00:19:12,720
prefix

611
00:19:12,720 --> 00:19:14,960
delegated to it it will then assign that

612
00:19:14,960 --> 00:19:17,039
prefix to its local lion interface

613
00:19:17,039 --> 00:19:19,120
and then we'll use slack and stateless

614
00:19:19,120 --> 00:19:20,640
dhtp v6 again

615
00:19:20,640 --> 00:19:23,360
to provide addressing to the client the

616
00:19:23,360 --> 00:19:25,200
end goal of this design was for the

617
00:19:25,200 --> 00:19:26,320
client computer

618
00:19:26,320 --> 00:19:29,280
to form a vp of remote access vpn using

619
00:19:29,280 --> 00:19:30,640
something like open connect or

620
00:19:30,640 --> 00:19:31,440
anyconnect or

621
00:19:31,440 --> 00:19:34,640
strong swan or whatever vpn back in

622
00:19:34,640 --> 00:19:36,240
to another router at the other end of

623
00:19:36,240 --> 00:19:38,480
the network or a vpn concentrator

624
00:19:38,480 --> 00:19:41,280
to get ipv4 transport so it's kind of a

625
00:19:41,280 --> 00:19:42,000
weird

626
00:19:42,000 --> 00:19:45,679
v6 over v4 but then v4 over v6 a second

627
00:19:45,679 --> 00:19:46,240
time

628
00:19:46,240 --> 00:19:47,360
and if you look in the middle of the

629
00:19:47,360 --> 00:19:49,120
diagram you'll see a red tunnel inside

630
00:19:49,120 --> 00:19:50,400
of a green tunnel

631
00:19:50,400 --> 00:19:52,000
that's a double layer of encryption

632
00:19:52,000 --> 00:19:54,000
which was required for this design

633
00:19:54,000 --> 00:19:55,760
an ipv6 actually played a big role in

634
00:19:55,760 --> 00:19:57,039
making this possible

635
00:19:57,039 --> 00:19:58,720
so to broadly describe how does the

636
00:19:58,720 --> 00:20:00,320
prefix delegation work

637
00:20:00,320 --> 00:20:02,720
just like a lot of common dhcp exchanges

638
00:20:02,720 --> 00:20:04,960
you see in ipv4 there is a four message

639
00:20:04,960 --> 00:20:07,120
exchange we have a solicit message and

640
00:20:07,120 --> 00:20:08,640
then an advertise comes back with a

641
00:20:08,640 --> 00:20:10,320
prefix that came from a pool that you

642
00:20:10,320 --> 00:20:11,600
specify

643
00:20:11,600 --> 00:20:13,120
and then the device will request it and

644
00:20:13,120 --> 00:20:14,640
get an acknowledgement that's basically

645
00:20:14,640 --> 00:20:16,480
how it works

646
00:20:16,480 --> 00:20:19,120
the remote site will collect that prefix

647
00:20:19,120 --> 00:20:21,679
and then apply it to its lan interfaces

648
00:20:21,679 --> 00:20:23,360
and this response even though i don't

649
00:20:23,360 --> 00:20:24,880
show it here for friendliness

650
00:20:24,880 --> 00:20:26,640
also includes details like the domain

651
00:20:26,640 --> 00:20:28,559
name in the dns server

652
00:20:28,559 --> 00:20:30,799
this is useful because even though the

653
00:20:30,799 --> 00:20:32,320
router doesn't really care about those

654
00:20:32,320 --> 00:20:33,120
details

655
00:20:33,120 --> 00:20:35,360
it can do something really cool it can

656
00:20:35,360 --> 00:20:36,799
actually take that information and

657
00:20:36,799 --> 00:20:38,559
advertise it towards the clients

658
00:20:38,559 --> 00:20:41,919
statelessly so to ever so so now that

659
00:20:41,919 --> 00:20:43,679
we've got this prefix how do we handle

660
00:20:43,679 --> 00:20:44,799
the routing

661
00:20:44,799 --> 00:20:47,440
so just for the sake of this diagram

662
00:20:47,440 --> 00:20:49,039
suppose i have multiple sites that are

663
00:20:49,039 --> 00:20:50,480
now online

664
00:20:50,480 --> 00:20:53,360
the way i like to do this is we run bgp

665
00:20:53,360 --> 00:20:55,280
in a kind of half dynamic way

666
00:20:55,280 --> 00:20:57,280
so in cisco land we call this the bgp

667
00:20:57,280 --> 00:20:59,200
listen feature i know that in juniper

668
00:20:59,200 --> 00:21:00,640
and other vendors they have comparable

669
00:21:00,640 --> 00:21:02,320
features that have different names

670
00:21:02,320 --> 00:21:03,840
the idea is that the remote site will

671
00:21:03,840 --> 00:21:06,080
initiate the connection to the hub

672
00:21:06,080 --> 00:21:07,520
the remote site will then advertise

673
00:21:07,520 --> 00:21:10,000
whatever prefix was delegated from dhcp

674
00:21:10,000 --> 00:21:11,919
towards the hub and the hub will send

675
00:21:11,919 --> 00:21:13,520
down some kind of summary address like a

676
00:21:13,520 --> 00:21:14,240
default

677
00:21:14,240 --> 00:21:17,039
or maybe a summary covering all the vpn

678
00:21:17,039 --> 00:21:18,720
head ends to which the clients will form

679
00:21:18,720 --> 00:21:19,039
their

680
00:21:19,039 --> 00:21:21,200
remote access vpns towards there's a

681
00:21:21,200 --> 00:21:22,640
couple ways to handle the routing but

682
00:21:22,640 --> 00:21:24,000
this is broadly what the approach

683
00:21:24,000 --> 00:21:27,600
is this the advantage of this approach

684
00:21:27,600 --> 00:21:30,400
is that this tunnel formation and you

685
00:21:30,400 --> 00:21:31,919
can have multiple tunnels to multiple

686
00:21:31,919 --> 00:21:33,200
hubs if you have multiple different

687
00:21:33,200 --> 00:21:33,919
transports

688
00:21:33,919 --> 00:21:36,159
but this design still works the same way

689
00:21:36,159 --> 00:21:38,159
because the basics that you all likely

690
00:21:38,159 --> 00:21:39,760
already know about bgp

691
00:21:39,760 --> 00:21:42,000
manipulation through as path pre-pending

692
00:21:42,000 --> 00:21:44,480
longest match routing local preference

693
00:21:44,480 --> 00:21:47,200
med etc those all still apply so if you

694
00:21:47,200 --> 00:21:49,039
have multiple overlays with multiple

695
00:21:49,039 --> 00:21:50,240
routing exchanges

696
00:21:50,240 --> 00:21:52,159
it still will work the same way you just

697
00:21:52,159 --> 00:21:53,600
have to choose which you know do i

698
00:21:53,600 --> 00:21:55,039
prefer my wired connection over my

699
00:21:55,039 --> 00:21:57,039
wireless i prefer my wireless over my

700
00:21:57,039 --> 00:21:58,000
cellular backup

701
00:21:58,000 --> 00:21:59,919
or i prefer my cellular backup over my

702
00:21:59,919 --> 00:22:01,679
satellite communications or whatever it

703
00:22:01,679 --> 00:22:02,320
is

704
00:22:02,320 --> 00:22:04,320
and it's very easy to adjust those php

705
00:22:04,320 --> 00:22:06,240
policies from a centralized point at the

706
00:22:06,240 --> 00:22:07,760
hub

707
00:22:07,760 --> 00:22:08,960
so that we don't have to keep touching

708
00:22:08,960 --> 00:22:11,919
the spokes now how do we give addressing

709
00:22:11,919 --> 00:22:13,120
to the endpoints

710
00:22:13,120 --> 00:22:14,799
so the broad idea here is that the

711
00:22:14,799 --> 00:22:17,280
client will send a router solicitation

712
00:22:17,280 --> 00:22:19,520
now in arp we don't have a message like

713
00:22:19,520 --> 00:22:21,280
this because arp is just for basically

714
00:22:21,280 --> 00:22:22,640
neighbor solicitations and neighbor

715
00:22:22,640 --> 00:22:24,720
advertisements in the ipv6 world

716
00:22:24,720 --> 00:22:26,960
but within this environment or i should

717
00:22:26,960 --> 00:22:28,320
say within

718
00:22:28,320 --> 00:22:30,880
ipv6 the router solicitation is the

719
00:22:30,880 --> 00:22:31,919
device asking

720
00:22:31,919 --> 00:22:34,080
hey who are the routers on the segment

721
00:22:34,080 --> 00:22:35,760
router comes back and says hey i'm a

722
00:22:35,760 --> 00:22:36,720
router

723
00:22:36,720 --> 00:22:39,280
uh here's here's all the details the hop

724
00:22:39,280 --> 00:22:40,640
count the ttl

725
00:22:40,640 --> 00:22:42,880
my router preference uh and most

726
00:22:42,880 --> 00:22:44,559
importantly here's the prefix

727
00:22:44,559 --> 00:22:46,720
and that same prefix is the one that was

728
00:22:46,720 --> 00:22:47,679
delegated

729
00:22:47,679 --> 00:22:49,919
from the dmvpn tunnel ultimately coming

730
00:22:49,919 --> 00:22:51,120
from the hub site

731
00:22:51,120 --> 00:22:54,240
of the dhcp prefix delegation

732
00:22:54,240 --> 00:22:56,640
so we are advertising that to the client

733
00:22:56,640 --> 00:22:57,679
basically saying

734
00:22:57,679 --> 00:23:00,400
here's the prefix that you can use to

735
00:23:00,400 --> 00:23:02,880
statelessly generate an ipv6 address

736
00:23:02,880 --> 00:23:05,440
based on your mac address so this is a

737
00:23:05,440 --> 00:23:06,880
process known as slack and there are

738
00:23:06,880 --> 00:23:08,400
various ways of doing it

739
00:23:08,400 --> 00:23:10,880
the eui 64 approach is probably the most

740
00:23:10,880 --> 00:23:12,720
common this takes the mac address

741
00:23:12,720 --> 00:23:15,360
from the client it inserts a fixed

742
00:23:15,360 --> 00:23:17,840
number of bits in the middle the fffe

743
00:23:17,840 --> 00:23:19,679
part of it and then splits the mac in

744
00:23:19,679 --> 00:23:21,600
half with 24 bits on each side

745
00:23:21,600 --> 00:23:23,200
there are other ways to do this that are

746
00:23:23,200 --> 00:23:24,960
a little bit less identifiable different

747
00:23:24,960 --> 00:23:26,559
security extensions it doesn't really

748
00:23:26,559 --> 00:23:27,520
matter because there's going to be

749
00:23:27,520 --> 00:23:28,720
uniqueness

750
00:23:28,720 --> 00:23:30,799
but the client will get a unique address

751
00:23:30,799 --> 00:23:32,240
completely dynamically

752
00:23:32,240 --> 00:23:34,720
from a delegated prefix but then there's

753
00:23:34,720 --> 00:23:35,360
also

754
00:23:35,360 --> 00:23:37,760
extra information that dhcpv6 can

755
00:23:37,760 --> 00:23:39,280
collect from the router

756
00:23:39,280 --> 00:23:40,720
so when the router pulls down that

757
00:23:40,720 --> 00:23:42,720
delegated prefix it can also

758
00:23:42,720 --> 00:23:45,279
import other stateless details like the

759
00:23:45,279 --> 00:23:47,279
dns servers and the domain name

760
00:23:47,279 --> 00:23:48,640
and because that information can be

761
00:23:48,640 --> 00:23:50,320
stored on the router when

762
00:23:50,320 --> 00:23:52,159
the clients even if there's a hundred of

763
00:23:52,159 --> 00:23:53,440
them if they all need

764
00:23:53,440 --> 00:23:55,360
hey what's my dns server i need to go

765
00:23:55,360 --> 00:23:57,200
reach out to the vpn headend to for my

766
00:23:57,200 --> 00:23:58,400
vpn

767
00:23:58,400 --> 00:24:01,360
those can or though those when we ask

768
00:24:01,360 --> 00:24:02,559
dhcp for that

769
00:24:02,559 --> 00:24:04,320
those messages don't have to be relayed

770
00:24:04,320 --> 00:24:05,760
to the hub that can be answered directly

771
00:24:05,760 --> 00:24:06,720
from this device

772
00:24:06,720 --> 00:24:09,360
which will improve customer experience

773
00:24:09,360 --> 00:24:10,480
because they don't have to

774
00:24:10,480 --> 00:24:12,559
wait for those dhcp requests to go over

775
00:24:12,559 --> 00:24:15,120
what could be a very slow wan

776
00:24:15,120 --> 00:24:17,039
so ultimately this design allowed us to

777
00:24:17,039 --> 00:24:18,320
scale a large

778
00:24:18,320 --> 00:24:20,559
highly secure hubspoke network providing

779
00:24:20,559 --> 00:24:21,760
addressing to clients

780
00:24:21,760 --> 00:24:24,240
so they could form their ipv4 vpns back

781
00:24:24,240 --> 00:24:25,120
to a head end

782
00:24:25,120 --> 00:24:27,279
and use their applications normally so

783
00:24:27,279 --> 00:24:29,600
we used ipv6 as a highly dynamic

784
00:24:29,600 --> 00:24:30,400
transport

785
00:24:30,400 --> 00:24:32,080
in a high security environment and it

786
00:24:32,080 --> 00:24:34,320
worked quite well

787
00:24:34,320 --> 00:24:36,320
i want to talk briefly about automation

788
00:24:36,320 --> 00:24:37,520
this is a hot topic

789
00:24:37,520 --> 00:24:39,039
and oftentimes when we talk about

790
00:24:39,039 --> 00:24:41,039
automation we do so in kind of

791
00:24:41,039 --> 00:24:42,640
a context about features and we don't

792
00:24:42,640 --> 00:24:45,039
usually talk about ipv6 uniquely

793
00:24:45,039 --> 00:24:46,400
now we're not going to review the python

794
00:24:46,400 --> 00:24:47,600
code on the right this is just a

795
00:24:47,600 --> 00:24:49,039
snapshot of the code i've written and

796
00:24:49,039 --> 00:24:51,200
yes the code is available publicly

797
00:24:51,200 --> 00:24:52,480
but there are a few things that you

798
00:24:52,480 --> 00:24:54,159
might be wondering how i solved because

799
00:24:54,159 --> 00:24:55,679
if every single device has the same

800
00:24:55,679 --> 00:24:56,799
config

801
00:24:56,799 --> 00:24:58,559
how are we going to be able to

802
00:24:58,559 --> 00:25:00,559
differentiate between devices

803
00:25:00,559 --> 00:25:02,400
um how you know when they send an snmp

804
00:25:02,400 --> 00:25:04,000
trap or a log message

805
00:25:04,000 --> 00:25:05,120
they're just going to come from some

806
00:25:05,120 --> 00:25:07,200
giant ipv6 address and we're not going

807
00:25:07,200 --> 00:25:08,880
to know what device it is

808
00:25:08,880 --> 00:25:11,039
so a couple just basic local scripting

809
00:25:11,039 --> 00:25:13,279
on the device using cisco's eem or

810
00:25:13,279 --> 00:25:15,039
juniper slacks or whatever other

811
00:25:15,039 --> 00:25:15,919
language you like

812
00:25:15,919 --> 00:25:18,320
for your device i have two scripts one

813
00:25:18,320 --> 00:25:19,679
of them will automatically change the

814
00:25:19,679 --> 00:25:21,279
hostname to be equal to the serial

815
00:25:21,279 --> 00:25:23,360
number which is guaranteed to be unique

816
00:25:23,360 --> 00:25:25,360
and another that will automatically

817
00:25:25,360 --> 00:25:28,000
determine a loopback zero address which

818
00:25:28,000 --> 00:25:30,400
is a slash 128 that is advertised into

819
00:25:30,400 --> 00:25:31,440
bgp

820
00:25:31,440 --> 00:25:33,440
this way each device will have a fixed

821
00:25:33,440 --> 00:25:36,000
loopback even if the prefix delegation

822
00:25:36,000 --> 00:25:37,200
changes in the future

823
00:25:37,200 --> 00:25:39,120
there will be a fixed loopback from a

824
00:25:39,120 --> 00:25:40,640
management network that is carved up

825
00:25:40,640 --> 00:25:42,320
across all devices

826
00:25:42,320 --> 00:25:44,799
this way once the device comes online we

827
00:25:44,799 --> 00:25:46,559
can now reach that loop back and do

828
00:25:46,559 --> 00:25:47,840
top-down management

829
00:25:47,840 --> 00:25:49,120
without having to rely on prefix

830
00:25:49,120 --> 00:25:51,279
delegation that way prefix delegation

831
00:25:51,279 --> 00:25:53,279
just becomes an avenue for vpn clients

832
00:25:53,279 --> 00:25:54,559
to form connections

833
00:25:54,559 --> 00:25:56,400
not for operational management which is

834
00:25:56,400 --> 00:25:58,400
a huge advantage

835
00:25:58,400 --> 00:26:00,559
there's a few ways that we can continue

836
00:26:00,559 --> 00:26:02,480
our automation from here

837
00:26:02,480 --> 00:26:04,159
one approach which i think is kind of

838
00:26:04,159 --> 00:26:06,799
cool is that we can log into

839
00:26:06,799 --> 00:26:10,000
our hub router and say and log in and

840
00:26:10,000 --> 00:26:12,960
say show me your bgp table for all your

841
00:26:12,960 --> 00:26:14,400
slash 128s

842
00:26:14,400 --> 00:26:16,799
in the management subset their subnet

843
00:26:16,799 --> 00:26:18,720
once we find them we can parse out all

844
00:26:18,720 --> 00:26:19,919
those information

845
00:26:19,919 --> 00:26:21,919
lines and then build them into an

846
00:26:21,919 --> 00:26:23,279
ansible inventory file

847
00:26:23,279 --> 00:26:25,200
or if we don't want to use ansible we

848
00:26:25,200 --> 00:26:27,039
can just use them in our python program

849
00:26:27,039 --> 00:26:28,480
to perform some kind of automation on

850
00:26:28,480 --> 00:26:30,720
every host if we're doing some kind of

851
00:26:30,720 --> 00:26:31,679
offline approach

852
00:26:31,679 --> 00:26:34,159
for example our inventory specialists

853
00:26:34,159 --> 00:26:35,520
have gone and collected all the mac

854
00:26:35,520 --> 00:26:37,039
addresses from the box of all these

855
00:26:37,039 --> 00:26:38,559
thousand routers and here's this giant

856
00:26:38,559 --> 00:26:39,440
spreadsheet

857
00:26:39,440 --> 00:26:42,720
we can build uh from that from the mac

858
00:26:42,720 --> 00:26:44,240
addresses we can determine

859
00:26:44,240 --> 00:26:46,400
what the ipv6 address is going to be

860
00:26:46,400 --> 00:26:47,760
just by applying the

861
00:26:47,760 --> 00:26:50,880
the eui 64 logic so just to show an

862
00:26:50,880 --> 00:26:52,159
example of what these output

863
00:26:52,159 --> 00:26:55,520
outputs might look like um i have two

864
00:26:55,520 --> 00:26:56,159
scripts

865
00:26:56,159 --> 00:26:58,080
one of them is called ansible inventory

866
00:26:58,080 --> 00:26:59,760
from eui 64.

867
00:26:59,760 --> 00:27:01,600
and i don't show the inputs here because

868
00:27:01,600 --> 00:27:02,880
it's a little bit sloppy

869
00:27:02,880 --> 00:27:04,559
um it's just a it's just a row of mac or

870
00:27:04,559 --> 00:27:06,240
a column of mac addresses i should say

871
00:27:06,240 --> 00:27:07,679
but when you supply those

872
00:27:07,679 --> 00:27:10,400
macs the macs get retained as original

873
00:27:10,400 --> 00:27:10,880
mac

874
00:27:10,880 --> 00:27:12,880
but then for each individual node in

875
00:27:12,880 --> 00:27:14,559
there we're going to have

876
00:27:14,559 --> 00:27:16,960
the ansible hosts that are going to have

877
00:27:16,960 --> 00:27:18,720
the ipv6 addresses

878
00:27:18,720 --> 00:27:20,559
and then on the right this is where we

879
00:27:20,559 --> 00:27:21,919
actually log into the router to

880
00:27:21,919 --> 00:27:23,520
determine what are the loopback zero

881
00:27:23,520 --> 00:27:24,960
addresses that we want to manage and

882
00:27:24,960 --> 00:27:25,360
those

883
00:27:25,360 --> 00:27:26,640
could very well be different for

884
00:27:26,640 --> 00:27:28,559
different devices but in this case it's

885
00:27:28,559 --> 00:27:30,080
fully dynamic because we don't need to

886
00:27:30,080 --> 00:27:34,080
input any mac addresses

887
00:27:34,080 --> 00:27:35,840
so i realized that was a lot and i

888
00:27:35,840 --> 00:27:37,279
wanted this to be fun and kind of

889
00:27:37,279 --> 00:27:38,720
exciting to show you some of the new

890
00:27:38,720 --> 00:27:39,679
features about

891
00:27:39,679 --> 00:27:42,320
ipv6 and not even so much new features

892
00:27:42,320 --> 00:27:43,840
but new ways of thinking about how this

893
00:27:43,840 --> 00:27:45,600
technology can work

894
00:27:45,600 --> 00:27:47,039
so if you're interested in learning

895
00:27:47,039 --> 00:27:49,200
about those three things here are

896
00:27:49,200 --> 00:27:52,159
some links you may find useful the first

897
00:27:52,159 --> 00:27:54,000
is a link to the unlimited scale wan

898
00:27:54,000 --> 00:27:55,600
document and again these white papers

899
00:27:55,600 --> 00:27:56,159
are

900
00:27:56,159 --> 00:27:57,760
professionally written and reviewed

901
00:27:57,760 --> 00:27:59,760
they're about 30 to 40 pages long taking

902
00:27:59,760 --> 00:28:00,960
an hour or two to read it

903
00:28:00,960 --> 00:28:03,120
and it goes into much much deeper detail

904
00:28:03,120 --> 00:28:04,880
on how all the pieces fit

905
00:28:04,880 --> 00:28:06,640
including the details about the overlay

906
00:28:06,640 --> 00:28:07,919
the encapsulation

907
00:28:07,919 --> 00:28:11,440
qos concerns mtu concerns all kinds of

908
00:28:11,440 --> 00:28:12,480
things like that

909
00:28:12,480 --> 00:28:14,399
the second white paper there is on the

910
00:28:14,399 --> 00:28:16,000
second architecture i talked about the

911
00:28:16,000 --> 00:28:16,559
low touch

912
00:28:16,559 --> 00:28:18,640
mobile sites and all the considerations

913
00:28:18,640 --> 00:28:20,399
that go into it as well as a more

914
00:28:20,399 --> 00:28:22,000
detailed review of the automation we

915
00:28:22,000 --> 00:28:23,360
just discussed

916
00:28:23,360 --> 00:28:24,720
last if you want to get your hands on

917
00:28:24,720 --> 00:28:26,720
the code to see how it works or make

918
00:28:26,720 --> 00:28:28,240
modifications for your own environment

919
00:28:28,240 --> 00:28:29,600
you can go to that github link where i

920
00:28:29,600 --> 00:28:30,080
have

921
00:28:30,080 --> 00:28:32,640
a couple miscellaneous ipv6 related

922
00:28:32,640 --> 00:28:34,000
automation tools that you may find

923
00:28:34,000 --> 00:28:35,120
useful

924
00:28:35,120 --> 00:28:36,880
so thanks everyone for your time today

925
00:28:36,880 --> 00:28:38,320
hope you enjoyed the presentation and

926
00:28:38,320 --> 00:28:39,919
hope you have some new appreciation for

927
00:28:39,919 --> 00:28:41,360
what ipv6 can do

928
00:28:41,360 --> 00:28:43,039
it's my honor and privilege to share my

929
00:28:43,039 --> 00:28:44,960
knowledge with you today and does anyone

930
00:28:44,960 --> 00:28:46,480
have any questions or comments about

931
00:28:46,480 --> 00:28:47,919
what we've discussed i'm happy to answer

932
00:28:47,919 --> 00:28:50,080
them

933
00:28:51,120 --> 00:28:53,679
thank you nick that was an incredible

934
00:28:53,679 --> 00:28:55,840
presentation thank you so much for that

935
00:28:55,840 --> 00:28:57,440
so we do have a few questions coming

936
00:28:57,440 --> 00:29:00,320
through um so let's begin

937
00:29:00,320 --> 00:29:03,520
um uh here we are

938
00:29:03,520 --> 00:29:06,000
what is your opinion on how we address

939
00:29:06,000 --> 00:29:07,440
some network characters

940
00:29:07,440 --> 00:29:08,960
dropping extension headers which

941
00:29:08,960 --> 00:29:10,480
inherently breaks some of the functions

942
00:29:10,480 --> 00:29:12,559
of v6

943
00:29:12,559 --> 00:29:14,240
yeah so this is an interesting topic

944
00:29:14,240 --> 00:29:15,600
because

945
00:29:15,600 --> 00:29:18,880
i think a lot of companies in general

946
00:29:18,880 --> 00:29:20,399
when they think about extension headers

947
00:29:20,399 --> 00:29:22,880
i mean the word extension by itself

948
00:29:22,880 --> 00:29:24,640
implies something additional to a

949
00:29:24,640 --> 00:29:26,000
protocol but

950
00:29:26,000 --> 00:29:27,600
there was a cisco document i read a few

951
00:29:27,600 --> 00:29:28,960
years back and i don't have it

952
00:29:28,960 --> 00:29:30,720
immediately available but it stuck in my

953
00:29:30,720 --> 00:29:32,320
mind what the document said and it said

954
00:29:32,320 --> 00:29:32,960
that

955
00:29:32,960 --> 00:29:34,720
you shouldn't view extension headers as

956
00:29:34,720 --> 00:29:36,640
being some esoteric addition to the

957
00:29:36,640 --> 00:29:37,360
protocol

958
00:29:37,360 --> 00:29:40,159
but rather an intrinsic part of it and

959
00:29:40,159 --> 00:29:41,520
some of these extension headers are

960
00:29:41,520 --> 00:29:43,039
actually really important so

961
00:29:43,039 --> 00:29:45,520
things like the ipsec ah and esp

962
00:29:45,520 --> 00:29:46,559
extension headers

963
00:29:46,559 --> 00:29:48,640
uh fragmentation related headers yes

964
00:29:48,640 --> 00:29:50,799
it's true that routers don't fragment

965
00:29:50,799 --> 00:29:53,279
in the ipv6 path but the end hosts still

966
00:29:53,279 --> 00:29:55,279
do that's why the mtu is signaled in the

967
00:29:55,279 --> 00:29:56,799
router advertisement so

968
00:29:56,799 --> 00:29:59,919
extension headers broadly are important

969
00:29:59,919 --> 00:30:01,520
however carriers are concerned about the

970
00:30:01,520 --> 00:30:03,279
security impacts because

971
00:30:03,279 --> 00:30:05,440
some extension headers are almost the

972
00:30:05,440 --> 00:30:07,039
equivalent of ip options where you have

973
00:30:07,039 --> 00:30:08,880
like a router alert or source based

974
00:30:08,880 --> 00:30:10,960
routing hop by hop option destination

975
00:30:10,960 --> 00:30:13,039
options i say options really extension

976
00:30:13,039 --> 00:30:14,559
headers in this context

977
00:30:14,559 --> 00:30:16,399
but they look and feel like ip options

978
00:30:16,399 --> 00:30:18,000
and we've been trained as network people

979
00:30:18,000 --> 00:30:18,559
to

980
00:30:18,559 --> 00:30:20,960
to dislike ip options because of their

981
00:30:20,960 --> 00:30:22,080
impact on router control

982
00:30:22,080 --> 00:30:25,039
planes so my advice to carriers would be

983
00:30:25,039 --> 00:30:25,679
consider

984
00:30:25,679 --> 00:30:27,840
the the negative operational impacts of

985
00:30:27,840 --> 00:30:30,240
your customers before you cart launch

986
00:30:30,240 --> 00:30:32,640
stop supporting extension headers and be

987
00:30:32,640 --> 00:30:33,840
a little more precise

988
00:30:33,840 --> 00:30:35,520
in which headers are allowed through

989
00:30:35,520 --> 00:30:37,200
your network to allow customer networks

990
00:30:37,200 --> 00:30:38,559
to continue operating

991
00:30:38,559 --> 00:30:40,559
so again i don't know of any specific

992
00:30:40,559 --> 00:30:42,000
companies that have restricted this

993
00:30:42,000 --> 00:30:44,000
but just like most things you want to be

994
00:30:44,000 --> 00:30:46,080
intelligent and functional about what

995
00:30:46,080 --> 00:30:47,840
you allow and what you disallow

996
00:30:47,840 --> 00:30:49,200
balancing the security needs of a

997
00:30:49,200 --> 00:30:51,039
provider with the operating business

998
00:30:51,039 --> 00:30:54,399
needs of the various customers

999
00:30:54,399 --> 00:30:59,120
all right so great next question

1000
00:30:59,120 --> 00:31:01,760
since ipv6 hosts commonly have multiple

1001
00:31:01,760 --> 00:31:03,360
ipv6 addresses

1002
00:31:03,360 --> 00:31:04,720
is difficult for the device to choose

1003
00:31:04,720 --> 00:31:06,080
the source address when initiating

1004
00:31:06,080 --> 00:31:07,679
connection

1005
00:31:07,679 --> 00:31:10,000
yep so this there's an rfc that came out

1006
00:31:10,000 --> 00:31:11,679
it's 6724

1007
00:31:11,679 --> 00:31:13,120
and i had to look that up because i

1008
00:31:13,120 --> 00:31:14,960
didn't remember the number but the

1009
00:31:14,960 --> 00:31:17,279
old draft was called behave i don't

1010
00:31:17,279 --> 00:31:18,559
remember what it stands for but there

1011
00:31:18,559 --> 00:31:18,960
was a

1012
00:31:18,960 --> 00:31:21,519
there's an entire process from one to

1013
00:31:21,519 --> 00:31:23,519
ten or however many steps are in it

1014
00:31:23,519 --> 00:31:26,880
that describe how an ipv6 host

1015
00:31:26,880 --> 00:31:29,919
should select a source address when

1016
00:31:29,919 --> 00:31:32,159
sending traffic to a destination so for

1017
00:31:32,159 --> 00:31:33,840
example towards the top of the list

1018
00:31:33,840 --> 00:31:36,640
if you are uh for example pinging your

1019
00:31:36,640 --> 00:31:37,679
own address

1020
00:31:37,679 --> 00:31:39,200
then the source address is going to be

1021
00:31:39,200 --> 00:31:40,799
whatever the destination is so choose

1022
00:31:40,799 --> 00:31:42,720
your own address as number one

1023
00:31:42,720 --> 00:31:44,399
um as you make your way down i think

1024
00:31:44,399 --> 00:31:46,159
probably the most relevant one

1025
00:31:46,159 --> 00:31:47,600
at least in my opinion is that when

1026
00:31:47,600 --> 00:31:49,600
hosts have multiple addresses so suppose

1027
00:31:49,600 --> 00:31:51,120
i have one host with a

1028
00:31:51,120 --> 00:31:53,039
global unicast aggregate address that

1029
00:31:53,039 --> 00:31:54,880
can be routed on the internet

1030
00:31:54,880 --> 00:31:56,880
and that same host has some unique local

1031
00:31:56,880 --> 00:31:58,399
or ula addressing

1032
00:31:58,399 --> 00:31:59,919
and it wants to communicate with another

1033
00:31:59,919 --> 00:32:01,760
host that also has those two types of

1034
00:32:01,760 --> 00:32:02,799
addresses

1035
00:32:02,799 --> 00:32:05,919
well if the application is using the

1036
00:32:05,919 --> 00:32:08,960
uni the ula address um

1037
00:32:08,960 --> 00:32:10,640
to communicate then the device will

1038
00:32:10,640 --> 00:32:12,320
source its traffic from the ula

1039
00:32:12,320 --> 00:32:13,919
and if it's talking to a gua it'll

1040
00:32:13,919 --> 00:32:15,679
source from the from the gua

1041
00:32:15,679 --> 00:32:17,600
so if a host is trying to talk to

1042
00:32:17,600 --> 00:32:19,519
something on the on the land network or

1043
00:32:19,519 --> 00:32:20,640
within the enterprise

1044
00:32:20,640 --> 00:32:22,640
you could technically use either one but

1045
00:32:22,640 --> 00:32:23,919
if you're speaking to something on the

1046
00:32:23,919 --> 00:32:25,440
internet you're always going to use the

1047
00:32:25,440 --> 00:32:26,399
gua

1048
00:32:26,399 --> 00:32:28,240
so there is an rfc again it's i get the

1049
00:32:28,240 --> 00:32:30,080
number here 6724

1050
00:32:30,080 --> 00:32:31,919
there's a list that kind of illustrates

1051
00:32:31,919 --> 00:32:34,159
how those different addresses work

1052
00:32:34,159 --> 00:32:35,840
and there's even a command i don't

1053
00:32:35,840 --> 00:32:37,519
remember it within cisco at least where

1054
00:32:37,519 --> 00:32:39,039
you can turn on a debug for it

1055
00:32:39,039 --> 00:32:41,039
and it will tell you its thought process

1056
00:32:41,039 --> 00:32:42,799
and how it shows which address that it

1057
00:32:42,799 --> 00:32:43,440
did

1058
00:32:43,440 --> 00:32:45,519
so you can test this by just spinning up

1059
00:32:45,519 --> 00:32:47,039
a router putting some addresses sending

1060
00:32:47,039 --> 00:32:48,000
some pings

1061
00:32:48,000 --> 00:32:49,360
and you'll see the implementation of

1062
00:32:49,360 --> 00:32:51,039
that rfc if you'd like to verify it on

1063
00:32:51,039 --> 00:32:53,200
your own

1064
00:32:53,200 --> 00:32:56,559
all right um so

1065
00:32:56,559 --> 00:32:59,039
so we have time for looks like one more

1066
00:32:59,039 --> 00:32:59,679
question

1067
00:32:59,679 --> 00:33:03,279
so we'll just run through that um

1068
00:33:03,279 --> 00:33:07,919
so do network devices that run dhcp v6pd

1069
00:33:07,919 --> 00:33:09,679
automatically add routes to local tables

1070
00:33:09,679 --> 00:33:11,679
they assign v6 prefixes out of dhcp

1071
00:33:11,679 --> 00:33:12,399
clients

1072
00:33:12,399 --> 00:33:14,399
if so how do they appear in the local

1073
00:33:14,399 --> 00:33:15,440
red

1074
00:33:15,440 --> 00:33:18,240
they appear as static routes so by

1075
00:33:18,240 --> 00:33:19,039
default in the

1076
00:33:19,039 --> 00:33:20,960
in the example that i shown when the hub

1077
00:33:20,960 --> 00:33:24,399
is the dhcp relay for delegated prefix

1078
00:33:24,399 --> 00:33:26,559
that the hub will say okay i delegated

1079
00:33:26,559 --> 00:33:27,919
prefix x

1080
00:33:27,919 --> 00:33:30,320
64 to this client i'm going to install a

1081
00:33:30,320 --> 00:33:32,159
static route with a next top to that

1082
00:33:32,159 --> 00:33:34,080
dhcp client's link local address

1083
00:33:34,080 --> 00:33:38,320
for the x that or the x 64 prefix in my

1084
00:33:38,320 --> 00:33:40,000
specific design i disabled that

1085
00:33:40,000 --> 00:33:41,600
and again it is a static route so it's

1086
00:33:41,600 --> 00:33:43,039
relatively preferred over most

1087
00:33:43,039 --> 00:33:44,399
other route types in just about every

1088
00:33:44,399 --> 00:33:47,279
platform and i use bgp to govern the

1089
00:33:47,279 --> 00:33:48,799
downstream routing because remember i

1090
00:33:48,799 --> 00:33:50,080
had multiple hubs

1091
00:33:50,080 --> 00:33:52,080
and they both can relay the prefix

1092
00:33:52,080 --> 00:33:53,760
delegation and they can issue those

1093
00:33:53,760 --> 00:33:54,880
prefixes down

1094
00:33:54,880 --> 00:33:57,200
but if certain links fail for example if

1095
00:33:57,200 --> 00:33:59,120
hub1 delegates you prefix one

1096
00:33:59,120 --> 00:34:00,720
and prefix one is being used as the

1097
00:34:00,720 --> 00:34:03,039
source for your vpn across the network

1098
00:34:03,039 --> 00:34:04,399
and hub1 goes down

1099
00:34:04,399 --> 00:34:06,799
well hub2 should still know how to route

1100
00:34:06,799 --> 00:34:08,480
to prefix one that was allocated by the

1101
00:34:08,480 --> 00:34:09,918
other device otherwise your

1102
00:34:09,918 --> 00:34:11,679
your failover scheme is broken so you

1103
00:34:11,679 --> 00:34:13,440
can disable that on most platforms

1104
00:34:13,440 --> 00:34:15,040
it is installed by default as a static

1105
00:34:15,040 --> 00:34:16,960
route which makes rollout really simple

1106
00:34:16,960 --> 00:34:18,399
but if you have a complex high

1107
00:34:18,399 --> 00:34:21,119
availability multi-link multi-hub design

1108
00:34:21,119 --> 00:34:22,800
you may want to include some dynamic

1109
00:34:22,800 --> 00:34:24,879
routing protocol as i did with bgp

1110
00:34:24,879 --> 00:34:28,239
to govern that routing instead okay sure

1111
00:34:28,239 --> 00:34:30,000
that totally makes sense

1112
00:34:30,000 --> 00:34:32,079
so thank you that's all that's all the

1113
00:34:32,079 --> 00:34:33,359
time we have today

1114
00:34:33,359 --> 00:34:35,359
um thank you for your presentation and

1115
00:34:35,359 --> 00:34:36,560
thank you for your time nick this has

1116
00:34:36,560 --> 00:34:37,918
been incredibly enlightening

1117
00:34:37,918 --> 00:34:42,139
genuinely appreciate it thank you very

1118
00:34:42,139 --> 00:34:46,839
[Music]

1119
00:34:46,839 --> 00:34:48,000
much

1120
00:34:48,000 --> 00:34:50,079
you

