1
00:00:00,000 --> 00:00:05,200
[Music]

2
00:00:05,200 --> 00:00:07,600
my name is ron bonica

3
00:00:07,600 --> 00:00:10,080
and many years ago when i first started

4
00:00:10,080 --> 00:00:13,200
working as a network engineer i remember

5
00:00:13,200 --> 00:00:15,839
debugging them well many many times

6
00:00:15,839 --> 00:00:16,880
debugging

7
00:00:16,880 --> 00:00:18,560
network problems with ping and trace

8
00:00:18,560 --> 00:00:21,359
route and my boss used to say ping and

9
00:00:21,359 --> 00:00:23,600
trace route are your friends

10
00:00:23,600 --> 00:00:25,439
well yes they are my friends but there

11
00:00:25,439 --> 00:00:27,599
are some nuances of ping and trace route

12
00:00:27,599 --> 00:00:31,119
that we need to understand and

13
00:00:31,119 --> 00:00:32,320
and even address some of its

14
00:00:32,320 --> 00:00:33,440
shortcomings that's what we're going to

15
00:00:33,440 --> 00:00:34,719
talk about today

16
00:00:34,719 --> 00:00:38,239
ping is very good

17
00:00:38,239 --> 00:00:42,719
at determining the status of a reachable

18
00:00:42,719 --> 00:00:43,760
interface

19
00:00:43,760 --> 00:00:47,120
that is an interface that has an address

20
00:00:47,120 --> 00:00:49,280
a globally reachable address

21
00:00:49,280 --> 00:00:52,000
and that you can reach it's not very

22
00:00:52,000 --> 00:00:53,039
good

23
00:00:53,039 --> 00:00:55,440
at determining the status of unreachable

24
00:00:55,440 --> 00:00:56,160
interfaces

25
00:00:56,160 --> 00:00:58,879
say on numbered interfaces or interfaces

26
00:00:58,879 --> 00:01:01,039
that you don't have a route to

27
00:01:01,039 --> 00:01:02,879
traceroute is very good about telling

28
00:01:02,879 --> 00:01:04,959
you what nodes you

29
00:01:04,959 --> 00:01:07,840
visit along the packet's delivery path

30
00:01:07,840 --> 00:01:09,840
but it's not very good

31
00:01:09,840 --> 00:01:12,000
at telling you what interfaces you

32
00:01:12,000 --> 00:01:13,040
visited

33
00:01:13,040 --> 00:01:16,080
so um

34
00:01:16,080 --> 00:01:18,240
back a few years ago we did some work on

35
00:01:18,240 --> 00:01:20,400
each of them one was called probe

36
00:01:20,400 --> 00:01:24,720
rfc 8335 the other was called

37
00:01:24,720 --> 00:01:27,920
um extensions to uh

38
00:01:27,920 --> 00:01:30,640
icmp for unnumbered interfaces that's

39
00:01:30,640 --> 00:01:31,720
rfc

40
00:01:31,720 --> 00:01:35,040
5387. um

41
00:01:35,040 --> 00:01:37,200
we did that work we integrated it into

42
00:01:37,200 --> 00:01:38,560
junos

43
00:01:38,560 --> 00:01:40,079
and then we found that it was a great

44
00:01:40,079 --> 00:01:42,000
thing to have in junos

45
00:01:42,000 --> 00:01:44,799
but it really wasn't very useful unless

46
00:01:44,799 --> 00:01:45,520
there was

47
00:01:45,520 --> 00:01:48,799
support for it in in linux

48
00:01:48,799 --> 00:01:51,920
and wireshark and tcp dump

49
00:01:51,920 --> 00:01:54,560
so a group of students from harvey mudd

50
00:01:54,560 --> 00:01:56,159
university uh

51
00:01:56,159 --> 00:01:58,880
listed here ishaan andreas spencer and

52
00:01:58,880 --> 00:01:59,360
neck

53
00:01:59,360 --> 00:02:02,079
developed you know support for these two

54
00:02:02,079 --> 00:02:03,439
rfcs

55
00:02:03,439 --> 00:02:07,040
and a few open source projects linux

56
00:02:07,040 --> 00:02:09,758
wireshark tcp dump the mentors were

57
00:02:09,758 --> 00:02:10,318
myself

58
00:02:10,318 --> 00:02:14,000
and zach dodd in any event

59
00:02:14,000 --> 00:02:16,560
since these students from harvey mudd

60
00:02:16,560 --> 00:02:19,040
did most of the work

61
00:02:19,040 --> 00:02:22,000
i'm going to hand it over to andreas and

62
00:02:22,000 --> 00:02:23,680
let him talk about

63
00:02:23,680 --> 00:02:27,360
exactly what the team did andreas

64
00:02:27,360 --> 00:02:30,319
awesome thank you ron so as ron just

65
00:02:30,319 --> 00:02:30,720
said

66
00:02:30,720 --> 00:02:32,400
we're going to be talking about ping and

67
00:02:32,400 --> 00:02:34,000
traceroute which are the most commonly

68
00:02:34,000 --> 00:02:36,879
used tools in the ipom toolkit

69
00:02:36,879 --> 00:02:38,239
however as we'll see in this

70
00:02:38,239 --> 00:02:40,480
presentation they have some limitations

71
00:02:40,480 --> 00:02:41,920
and cannot always provide us the

72
00:02:41,920 --> 00:02:42,560
information

73
00:02:42,560 --> 00:02:45,280
about a network that we might want

74
00:02:45,280 --> 00:02:46,640
specifically there are many instances

75
00:02:46,640 --> 00:02:47,760
where these tools

76
00:02:47,760 --> 00:02:50,000
can only provide us information at the

77
00:02:50,000 --> 00:02:51,760
node level and not at the

78
00:02:51,760 --> 00:02:55,519
interface level where the node level is

79
00:02:55,519 --> 00:02:57,200
a node to something like a router or a

80
00:02:57,200 --> 00:02:59,519
host on a network that communicates to

81
00:02:59,519 --> 00:03:00,640
other nodes

82
00:03:00,640 --> 00:03:03,120
through its interfaces so for the rest

83
00:03:03,120 --> 00:03:04,319
of this presentation we're going to look

84
00:03:04,319 --> 00:03:04,800
at

85
00:03:04,800 --> 00:03:06,959
ping and trace route and follow the

86
00:03:06,959 --> 00:03:08,640
structure outlined here where we're

87
00:03:08,640 --> 00:03:10,319
going to examine what they do

88
00:03:10,319 --> 00:03:13,360
how they work what they can't do and

89
00:03:13,360 --> 00:03:15,040
how we've been working to enhance them

90
00:03:15,040 --> 00:03:16,480
this year

91
00:03:16,480 --> 00:03:19,840
so starting off with ping so ping tests

92
00:03:19,840 --> 00:03:21,440
the liveliness of a reachable

93
00:03:21,440 --> 00:03:24,000
interface and it does this by sending a

94
00:03:24,000 --> 00:03:24,720
message

95
00:03:24,720 --> 00:03:26,239
to the address that identifies that

96
00:03:26,239 --> 00:03:28,720
interface and by proxy

97
00:03:28,720 --> 00:03:30,400
you can test the liveliness of a

98
00:03:30,400 --> 00:03:32,080
reachable node

99
00:03:32,080 --> 00:03:34,239
and you do this by sending message to

100
00:03:34,239 --> 00:03:35,280
one of its reachable

101
00:03:35,280 --> 00:03:38,720
interfaces and when you get a message

102
00:03:38,720 --> 00:03:39,120
back

103
00:03:39,120 --> 00:03:42,640
you will then know that the node is up

104
00:03:42,640 --> 00:03:46,560
and ping does this by

105
00:03:46,560 --> 00:03:48,879
your probing node so your host the one

106
00:03:48,879 --> 00:03:50,319
where you are sending the message

107
00:03:50,319 --> 00:03:53,280
will send an icmp echo to a probed

108
00:03:53,280 --> 00:03:54,720
interface and that's the interface

109
00:03:54,720 --> 00:03:56,159
they're trying to learn about that lies

110
00:03:56,159 --> 00:03:56,480
on

111
00:03:56,480 --> 00:04:00,000
a proxy node and then the probe

112
00:04:00,000 --> 00:04:02,480
interface or the proxy node will send an

113
00:04:02,480 --> 00:04:04,239
icmp echo reply

114
00:04:04,239 --> 00:04:06,720
back to you the probing node and in the

115
00:04:06,720 --> 00:04:08,239
nerd notes section we're going to get a

116
00:04:08,239 --> 00:04:09,680
bit more technical

117
00:04:09,680 --> 00:04:12,879
and we can see with this command that if

118
00:04:12,879 --> 00:04:14,400
you want to learn about a specific

119
00:04:14,400 --> 00:04:16,000
interface on a node and determine if

120
00:04:16,000 --> 00:04:17,680
that interface is up

121
00:04:17,680 --> 00:04:19,600
we can run into problems with the

122
00:04:19,600 --> 00:04:21,279
current ping command because

123
00:04:21,279 --> 00:04:23,840
the icmp echo may enter the probe node

124
00:04:23,840 --> 00:04:25,440
through any of its interfaces

125
00:04:25,440 --> 00:04:26,960
and we might not know which one it

126
00:04:26,960 --> 00:04:30,160
enters through and similarly it can

127
00:04:30,160 --> 00:04:31,759
leave the probe node through any of its

128
00:04:31,759 --> 00:04:34,320
interfaces and there's no guarantee that

129
00:04:34,320 --> 00:04:36,880
either icmp message traverses the probe

130
00:04:36,880 --> 00:04:37,759
interface

131
00:04:37,759 --> 00:04:40,080
we would like to learn more about so

132
00:04:40,080 --> 00:04:41,360
what can't it do

133
00:04:41,360 --> 00:04:43,440
it can't test the liveliness of a less

134
00:04:43,440 --> 00:04:44,880
than reachable interface

135
00:04:44,880 --> 00:04:46,160
and an example of this would be

136
00:04:46,160 --> 00:04:47,919
something like an ipv4 unnumbered

137
00:04:47,919 --> 00:04:48,639
interface

138
00:04:48,639 --> 00:04:50,320
which are becoming a lot more popular

139
00:04:50,320 --> 00:04:51,919
and since they don't

140
00:04:51,919 --> 00:04:53,680
specifically have their own ip address

141
00:04:53,680 --> 00:04:54,960
you can't

142
00:04:54,960 --> 00:04:56,880
ping them directly and you couldn't

143
00:04:56,880 --> 00:04:58,639
learn of their status using

144
00:04:58,639 --> 00:05:02,560
the current tools similarly ipv6 unicast

145
00:05:02,560 --> 00:05:04,720
with linearly scoped addresses

146
00:05:04,720 --> 00:05:07,199
or any interface to which the probing

147
00:05:07,199 --> 00:05:08,880
node lacks a route

148
00:05:08,880 --> 00:05:12,080
cannot be queried with the conventional

149
00:05:12,080 --> 00:05:13,680
pink command

150
00:05:13,680 --> 00:05:16,000
and this often has a lot of information

151
00:05:16,000 --> 00:05:18,080
that we might want to know about

152
00:05:18,080 --> 00:05:22,840
so in order to enhance this rfc 8335 was

153
00:05:22,840 --> 00:05:25,360
published and what this rfc

154
00:05:25,360 --> 00:05:28,400
describes is an extension

155
00:05:28,400 --> 00:05:31,360
tacked onto the existing icmp echo

156
00:05:31,360 --> 00:05:32,720
messages

157
00:05:32,720 --> 00:05:35,680
and using this command a probing node

158
00:05:35,680 --> 00:05:36,960
will send an icmp

159
00:05:36,960 --> 00:05:38,960
extended echo request to a proxy

160
00:05:38,960 --> 00:05:40,960
interface

161
00:05:40,960 --> 00:05:44,639
and the echo request identifies the

162
00:05:44,639 --> 00:05:45,840
probed interface

163
00:05:45,840 --> 00:05:47,280
that you would like to learn more

164
00:05:47,280 --> 00:05:48,880
information about

165
00:05:48,880 --> 00:05:51,360
and the proxy interface then reads this

166
00:05:51,360 --> 00:05:52,080
identifier

167
00:05:52,080 --> 00:05:55,759
and responds with an icmp extended echo

168
00:05:55,759 --> 00:05:57,120
which tells us information about the

169
00:05:57,120 --> 00:05:59,520
probe node thus we can get a more

170
00:05:59,520 --> 00:06:00,319
specific

171
00:06:00,319 --> 00:06:02,000
information about the interface on a

172
00:06:02,000 --> 00:06:04,000
node and we can learn more about

173
00:06:04,000 --> 00:06:05,600
interfaces that we couldn't otherwise

174
00:06:05,600 --> 00:06:06,720
query

175
00:06:06,720 --> 00:06:08,880
so let's quickly look at a diagram of

176
00:06:08,880 --> 00:06:10,240
this in action

177
00:06:10,240 --> 00:06:12,160
in this example my colleague nick would

178
00:06:12,160 --> 00:06:13,680
like to learn about

179
00:06:13,680 --> 00:06:16,720
interface 3 that is on this proxy node

180
00:06:16,720 --> 00:06:20,000
however for whatever reason his messages

181
00:06:20,000 --> 00:06:21,759
are only getting to interface two on the

182
00:06:21,759 --> 00:06:23,280
proxy no this could because

183
00:06:23,280 --> 00:06:25,520
b because the network topology happens

184
00:06:25,520 --> 00:06:26,400
to direct

185
00:06:26,400 --> 00:06:29,039
his messages there it could be that um

186
00:06:29,039 --> 00:06:30,400
interface three is unnumbered and

187
00:06:30,400 --> 00:06:32,080
therefore it's impossible to direct

188
00:06:32,080 --> 00:06:34,880
directly query it and if you were using

189
00:06:34,880 --> 00:06:36,560
ping

190
00:06:36,560 --> 00:06:37,919
there would be no more information that

191
00:06:37,919 --> 00:06:40,080
you could actually gather at this point

192
00:06:40,080 --> 00:06:41,919
you would know that the node itself is

193
00:06:41,919 --> 00:06:42,160
up

194
00:06:42,160 --> 00:06:44,000
but we would have no idea how interface

195
00:06:44,000 --> 00:06:46,560
3 is doing what its status is

196
00:06:46,560 --> 00:06:49,680
but using probe you can specifically ask

197
00:06:49,680 --> 00:06:51,919
how is interface 3 and even though your

198
00:06:51,919 --> 00:06:52,800
messages

199
00:06:52,800 --> 00:06:54,720
are still only getting to interface 2 on

200
00:06:54,720 --> 00:06:56,800
the proxy node it will respond with the

201
00:06:56,800 --> 00:06:57,759
information

202
00:06:57,759 --> 00:07:00,479
telling you interface 3 is up so

203
00:07:00,479 --> 00:07:01,120
therefore

204
00:07:01,120 --> 00:07:02,800
you can learn about interface 3 without

205
00:07:02,800 --> 00:07:04,160
directly

206
00:07:04,160 --> 00:07:06,160
having access to that without your

207
00:07:06,160 --> 00:07:09,759
message directly going to that interface

208
00:07:09,759 --> 00:07:12,400
so from a more technical standpoint the

209
00:07:12,400 --> 00:07:13,599
proxy interface

210
00:07:13,599 --> 00:07:16,160
for pro or sorry proxy interface in

211
00:07:16,160 --> 00:07:17,199
general

212
00:07:17,199 --> 00:07:18,960
can be different than the probe

213
00:07:18,960 --> 00:07:20,240
interface the interface that you would

214
00:07:20,240 --> 00:07:22,080
like to know more about and in many

215
00:07:22,080 --> 00:07:22,720
cases

216
00:07:22,720 --> 00:07:26,000
it is different so

217
00:07:26,000 --> 00:07:30,080
similar to ping probe needs to

218
00:07:30,080 --> 00:07:32,880
or probe needs to have a connection to

219
00:07:32,880 --> 00:07:34,319
it needs to

220
00:07:34,319 --> 00:07:36,160
the proxy interface must be reachable

221
00:07:36,160 --> 00:07:38,240
from the probing node

222
00:07:38,240 --> 00:07:41,440
but probe also allows you to get

223
00:07:41,440 --> 00:07:43,280
cast a wider net essentially and gather

224
00:07:43,280 --> 00:07:44,479
more information because

225
00:07:44,479 --> 00:07:47,039
the proxy interface that you're trying

226
00:07:47,039 --> 00:07:48,479
to query may reside

227
00:07:48,479 --> 00:07:51,199
on the same node as the probe interface

228
00:07:51,199 --> 00:07:51,680
or

229
00:07:51,680 --> 00:07:53,199
it could be a node that is directly

230
00:07:53,199 --> 00:07:55,120
connected to the probe interface you

231
00:07:55,120 --> 00:07:55,919
kind of

232
00:07:55,919 --> 00:07:58,000
expand your range with probe as well so

233
00:07:58,000 --> 00:07:59,440
not only do you get more specified

234
00:07:59,440 --> 00:08:00,160
information

235
00:08:00,160 --> 00:08:02,960
you can also gather more information

236
00:08:02,960 --> 00:08:04,080
about nodes that

237
00:08:04,080 --> 00:08:07,199
are more difficult to reach

238
00:08:07,199 --> 00:08:08,560
so let's look at what this might look

239
00:08:08,560 --> 00:08:10,479
like if you were to use this command

240
00:08:10,479 --> 00:08:12,879
so this is a terminal output that might

241
00:08:12,879 --> 00:08:14,400
look familiar to many of you

242
00:08:14,400 --> 00:08:16,160
where we're using the ping command

243
00:08:16,160 --> 00:08:18,479
however in the command line at the very

244
00:08:18,479 --> 00:08:19,039
top

245
00:08:19,039 --> 00:08:21,520
we see this dash e and that is the

246
00:08:21,520 --> 00:08:22,960
functionality that we have added

247
00:08:22,960 --> 00:08:24,639
this year and that specifies we're using

248
00:08:24,639 --> 00:08:26,879
the extension structure

249
00:08:26,879 --> 00:08:30,080
and in this case we pass the name

250
00:08:30,080 --> 00:08:33,440
of an interface in this case ge hyphen 0

251
00:08:33,440 --> 00:08:36,880
0 0 to the extension structure

252
00:08:36,880 --> 00:08:39,760
and that interface is an interface that

253
00:08:39,760 --> 00:08:41,599
lies either on or is

254
00:08:41,599 --> 00:08:44,320
one hop away from the ip address

255
00:08:44,320 --> 00:08:45,279
specified

256
00:08:45,279 --> 00:08:48,959
starting with 10. and we get a normal

257
00:08:48,959 --> 00:08:51,279
output you still get your time

258
00:08:51,279 --> 00:08:53,920
your latency and everything but in the

259
00:08:53,920 --> 00:08:55,440
bottom right we now also have this

260
00:08:55,440 --> 00:08:56,959
additional field that tells us the

261
00:08:56,959 --> 00:08:57,760
status

262
00:08:57,760 --> 00:08:59,360
and this isn't the status of the node

263
00:08:59,360 --> 00:09:00,880
which is all ping can tell us this is

264
00:09:00,880 --> 00:09:01,760
the status

265
00:09:01,760 --> 00:09:05,279
of the interface ge000

266
00:09:05,279 --> 00:09:07,040
and this is telling us that is active

267
00:09:07,040 --> 00:09:09,040
and responding to both ipv4

268
00:09:09,040 --> 00:09:11,040
and ipv6 so we get a lot more

269
00:09:11,040 --> 00:09:12,080
information

270
00:09:12,080 --> 00:09:14,800
and in this instance we don't

271
00:09:14,800 --> 00:09:16,720
necessarily know if our messages are

272
00:09:16,720 --> 00:09:18,560
getting directly to that interface but

273
00:09:18,560 --> 00:09:20,959
we can still gather information about it

274
00:09:20,959 --> 00:09:24,160
so that is very useful now as with

275
00:09:24,160 --> 00:09:25,839
any time you give information about your

276
00:09:25,839 --> 00:09:27,440
network there are a couple security

277
00:09:27,440 --> 00:09:28,480
considerations

278
00:09:28,480 --> 00:09:31,519
that um might be alarming we were giving

279
00:09:31,519 --> 00:09:32,880
a lot of information

280
00:09:32,880 --> 00:09:34,720
not just about the topology but about

281
00:09:34,720 --> 00:09:36,640
specific interfaces

282
00:09:36,640 --> 00:09:38,480
inside of our network so to address

283
00:09:38,480 --> 00:09:40,399
these concerns

284
00:09:40,399 --> 00:09:42,800
we really have two approaches so first

285
00:09:42,800 --> 00:09:45,040
every implementation does not enable

286
00:09:45,040 --> 00:09:47,760
responding to probe messages by default

287
00:09:47,760 --> 00:09:48,560
and this

288
00:09:48,560 --> 00:09:51,600
allows you to when you have an error

289
00:09:51,600 --> 00:09:53,120
that you're trying to debug you can

290
00:09:53,120 --> 00:09:54,240
enable it

291
00:09:54,240 --> 00:09:56,080
query your own network and then disable

292
00:09:56,080 --> 00:09:57,440
it so

293
00:09:57,440 --> 00:10:00,160
um anyone else at any other time will

294
00:10:00,160 --> 00:10:01,440
not be able to gather this information

295
00:10:01,440 --> 00:10:02,880
about your network

296
00:10:02,880 --> 00:10:04,480
and only you can because you have that

297
00:10:04,480 --> 00:10:06,399
control

298
00:10:06,399 --> 00:10:09,200
as a fancier option you can also specify

299
00:10:09,200 --> 00:10:10,320
it that

300
00:10:10,320 --> 00:10:12,640
nodes will only respond to probe

301
00:10:12,640 --> 00:10:13,600
commands

302
00:10:13,600 --> 00:10:15,839
from specified source addresses so you

303
00:10:15,839 --> 00:10:18,000
can have your list of approved ip

304
00:10:18,000 --> 00:10:21,120
addresses or approved

305
00:10:21,120 --> 00:10:24,160
sets of ip addresses and

306
00:10:24,160 --> 00:10:28,160
when these nodes query your

307
00:10:28,160 --> 00:10:30,959
hosts then they will reply with the full

308
00:10:30,959 --> 00:10:32,000
probed information

309
00:10:32,000 --> 00:10:34,720
that we have been talking about but

310
00:10:34,720 --> 00:10:35,680
other nodes

311
00:10:35,680 --> 00:10:39,040
can there if it is an unrecognized

312
00:10:39,040 --> 00:10:41,279
source address the node can either

313
00:10:41,279 --> 00:10:42,959
respond with a generic ping request

314
00:10:42,959 --> 00:10:44,880
as it might now or it could just drop

315
00:10:44,880 --> 00:10:47,360
the message entirely

316
00:10:47,360 --> 00:10:49,760
so these are the things we have done to

317
00:10:49,760 --> 00:10:50,959
try to address these

318
00:10:50,959 --> 00:10:53,680
issues now there is a good amount of

319
00:10:53,680 --> 00:10:54,959
support for

320
00:10:54,959 --> 00:10:57,920
probe as of right now so juniper and its

321
00:10:57,920 --> 00:11:00,800
junos 20.3 r1 line which is currently

322
00:11:00,800 --> 00:11:01,519
deployed

323
00:11:01,519 --> 00:11:03,839
completely supports probe functionality

324
00:11:03,839 --> 00:11:04,880
and is up

325
00:11:04,880 --> 00:11:07,279
um similarly the linux kernel has just

326
00:11:07,279 --> 00:11:08,959
gotten approved

327
00:11:08,959 --> 00:11:12,079
probe functionality and 5 13 so that

328
00:11:12,079 --> 00:11:13,040
will be rolling out

329
00:11:13,040 --> 00:11:16,399
very soon and the iputils package

330
00:11:16,399 --> 00:11:19,600
which is installed on top of linux and

331
00:11:19,600 --> 00:11:20,959
is the one that actually sends the

332
00:11:20,959 --> 00:11:22,320
message the kernel is just the one that

333
00:11:22,320 --> 00:11:23,279
responds to

334
00:11:23,279 --> 00:11:25,519
requests um the maintainers of that

335
00:11:25,519 --> 00:11:27,680
package are currently reviewing our work

336
00:11:27,680 --> 00:11:30,560
and hopefully that will be accepted soon

337
00:11:30,560 --> 00:11:32,720
in terms of dissectors and other tools

338
00:11:32,720 --> 00:11:36,240
wireshark version 3.5 or

339
00:11:36,240 --> 00:11:40,079
newer can completely dissect and

340
00:11:40,079 --> 00:11:43,120
parse pro packets both replies and

341
00:11:43,120 --> 00:11:45,839
requests and tcp dump the maintainers

342
00:11:45,839 --> 00:11:47,920
similarly to the iputils package

343
00:11:47,920 --> 00:11:50,000
are currently reviewing our work so that

344
00:11:50,000 --> 00:11:51,279
is a brief look

345
00:11:51,279 --> 00:11:52,800
at probe and now we're going to switch

346
00:11:52,800 --> 00:11:55,360
gears to traceroute

347
00:11:55,360 --> 00:11:56,800
so this is going to have the same

348
00:11:56,800 --> 00:11:58,639
structure to what we just went through

349
00:11:58,639 --> 00:12:00,000
with pro we're going to talk about

350
00:12:00,000 --> 00:12:02,399
what traceroute does how it works what

351
00:12:02,399 --> 00:12:03,839
its limitations are

352
00:12:03,839 --> 00:12:05,360
and what we've been doing to address

353
00:12:05,360 --> 00:12:07,839
these issues so to begin with

354
00:12:07,839 --> 00:12:10,160
traceroute elicits feedback from each

355
00:12:10,160 --> 00:12:12,480
node along a delivery path between a

356
00:12:12,480 --> 00:12:13,519
probing interface

357
00:12:13,519 --> 00:12:16,399
and a destination interface so again it

358
00:12:16,399 --> 00:12:17,040
only answers

359
00:12:17,040 --> 00:12:19,440
it only gives you information at the

360
00:12:19,440 --> 00:12:21,200
node level it can only identify

361
00:12:21,200 --> 00:12:23,519
the nodes along the delivery path and

362
00:12:23,519 --> 00:12:25,200
this tool is commonly used to try to

363
00:12:25,200 --> 00:12:25,760
learn

364
00:12:25,760 --> 00:12:27,360
what path our messages are taking

365
00:12:27,360 --> 00:12:29,440
through a network to try to determine

366
00:12:29,440 --> 00:12:29,920
issues

367
00:12:29,920 --> 00:12:33,120
that way so traceroute works

368
00:12:33,120 --> 00:12:35,920
when your probing node your machine

369
00:12:35,920 --> 00:12:38,079
sends a series of udp packets to a

370
00:12:38,079 --> 00:12:39,440
destination interface

371
00:12:39,440 --> 00:12:41,600
and it sets the time to live or ttl to

372
00:12:41,600 --> 00:12:43,120
one on the first packet

373
00:12:43,120 --> 00:12:45,600
and when that packet gets to the first

374
00:12:45,600 --> 00:12:47,279
node along the delivery path

375
00:12:47,279 --> 00:12:50,000
that message will expire and that node

376
00:12:50,000 --> 00:12:51,519
the first node along the path

377
00:12:51,519 --> 00:12:54,560
will respond with an icmp time time

378
00:12:54,560 --> 00:12:55,839
expired message

379
00:12:55,839 --> 00:12:57,760
and that is how we gather information

380
00:12:57,760 --> 00:13:00,079
about the delivery path

381
00:13:00,079 --> 00:13:02,000
on the next iteration of the command it

382
00:13:02,000 --> 00:13:03,440
will increment the time to live

383
00:13:03,440 --> 00:13:06,000
so that it expires on the second node

384
00:13:06,000 --> 00:13:07,839
and then the third and so on until we

385
00:13:07,839 --> 00:13:10,959
reach our destination

386
00:13:11,200 --> 00:13:13,279
so to get a bit more technical for the

387
00:13:13,279 --> 00:13:15,680
udp probe messages that your machine

388
00:13:15,680 --> 00:13:19,600
sends by default the probing node sets

389
00:13:19,600 --> 00:13:21,440
the udp destination port

390
00:13:21,440 --> 00:13:24,639
to 33434 and

391
00:13:24,639 --> 00:13:26,639
increments that destination port on each

392
00:13:26,639 --> 00:13:28,320
subsequent packet

393
00:13:28,320 --> 00:13:30,880
for the icmp time expired message that

394
00:13:30,880 --> 00:13:31,440
the

395
00:13:31,440 --> 00:13:33,440
node on the delivery path sends back to

396
00:13:33,440 --> 00:13:35,519
us the source address

397
00:13:35,519 --> 00:13:38,160
that we get back might not identify the

398
00:13:38,160 --> 00:13:39,920
interface upon which the udp

399
00:13:39,920 --> 00:13:42,079
probe message arrived so it might not be

400
00:13:42,079 --> 00:13:43,760
telling us what interface our messages

401
00:13:43,760 --> 00:13:44,720
are getting to

402
00:13:44,720 --> 00:13:46,639
instead it will only tell us an

403
00:13:46,639 --> 00:13:48,800
interface on the node that is responding

404
00:13:48,800 --> 00:13:49,920
back to us

405
00:13:49,920 --> 00:13:52,720
which is a bit less useful and we might

406
00:13:52,720 --> 00:13:54,320
want to know exactly where our messages

407
00:13:54,320 --> 00:13:55,120
are going

408
00:13:55,120 --> 00:13:57,839
not just the nodes but the interface so

409
00:13:57,839 --> 00:13:59,279
for ipv4

410
00:13:59,279 --> 00:14:01,440
um the source address that we get back

411
00:14:01,440 --> 00:14:02,880
identifies the interface through which

412
00:14:02,880 --> 00:14:04,000
the icmp message

413
00:14:04,000 --> 00:14:06,560
left the reporting node so again it

414
00:14:06,560 --> 00:14:07,519
identifies

415
00:14:07,519 --> 00:14:09,120
an interface on the node but not

416
00:14:09,120 --> 00:14:10,959
necessarily one that our message is

417
00:14:10,959 --> 00:14:11,920
arriving at

418
00:14:11,920 --> 00:14:15,199
and for ibv6 there can be any you know

419
00:14:15,199 --> 00:14:15,680
like

420
00:14:15,680 --> 00:14:17,040
there there can be a wide range of

421
00:14:17,040 --> 00:14:19,040
responses and we don't necessarily know

422
00:14:19,040 --> 00:14:22,160
which one it is for more information um

423
00:14:22,160 --> 00:14:24,000
what it can respond with is defined in

424
00:14:24,000 --> 00:14:27,120
rfc 6724

425
00:14:27,120 --> 00:14:29,040
so what traceroute can't do is it can't

426
00:14:29,040 --> 00:14:31,199
identify the interfaces along the

427
00:14:31,199 --> 00:14:34,959
delivery path only the nodes

428
00:14:34,959 --> 00:14:38,600
and in order to enhance this um rfc

429
00:14:38,600 --> 00:14:42,160
5837 has been published and

430
00:14:42,160 --> 00:14:45,760
it tries to add an extension to the icmp

431
00:14:45,760 --> 00:14:47,360
time expired message

432
00:14:47,360 --> 00:14:49,440
that gives us interface level

433
00:14:49,440 --> 00:14:50,880
information

434
00:14:50,880 --> 00:14:53,279
about it and the great news about this

435
00:14:53,279 --> 00:14:54,240
specific command

436
00:14:54,240 --> 00:14:56,959
is that the udp probe message that we're

437
00:14:56,959 --> 00:14:58,000
sending out is actually

438
00:14:58,000 --> 00:14:59,440
unchanged we don't need to do anything

439
00:14:59,440 --> 00:15:01,680
to it the only thing that changes

440
00:15:01,680 --> 00:15:04,079
is the response message that is

441
00:15:04,079 --> 00:15:06,079
generated at the node on the delivery

442
00:15:06,079 --> 00:15:06,880
path

443
00:15:06,880 --> 00:15:10,240
so the icmp time expired message can

444
00:15:10,240 --> 00:15:12,360
contain this extension defined in rfc

445
00:15:12,360 --> 00:15:13,600
5837

446
00:15:13,600 --> 00:15:15,920
that identifies the interface upon which

447
00:15:15,920 --> 00:15:17,120
the udp probe message

448
00:15:17,120 --> 00:15:18,880
arrives so that's where we're actually

449
00:15:18,880 --> 00:15:20,639
reaching with our messages

450
00:15:20,639 --> 00:15:22,639
which is the most important thing when

451
00:15:22,639 --> 00:15:25,360
we're trying to determine traceroute

452
00:15:25,360 --> 00:15:27,920
or the delivery path and it can also

453
00:15:27,920 --> 00:15:29,279
tell us the interface through which the

454
00:15:29,279 --> 00:15:29,759
message

455
00:15:29,759 --> 00:15:31,680
would have been routed had the time to

456
00:15:31,680 --> 00:15:33,360
live not expired so this is

457
00:15:33,360 --> 00:15:35,120
not only telling us where our messages

458
00:15:35,120 --> 00:15:36,720
are arriving but also where they would

459
00:15:36,720 --> 00:15:37,199
go

460
00:15:37,199 --> 00:15:40,160
in the next hop which is very useful and

461
00:15:40,160 --> 00:15:41,600
the things that can tell us about those

462
00:15:41,600 --> 00:15:43,279
interfaces are the name

463
00:15:43,279 --> 00:15:44,959
the ip address and the maximum

464
00:15:44,959 --> 00:15:47,199
transmission unit

465
00:15:47,199 --> 00:15:49,839
so let's look at an example terminal

466
00:15:49,839 --> 00:15:51,360
output of what it might look like to use

467
00:15:51,360 --> 00:15:52,079
this

468
00:15:52,079 --> 00:15:55,040
so here we have a trace route output

469
00:15:55,040 --> 00:15:56,959
that might look very familiar where

470
00:15:56,959 --> 00:16:00,720
we have 12 hops on our delivery path

471
00:16:00,720 --> 00:16:02,160
but now we're adding these sections in

472
00:16:02,160 --> 00:16:04,800
the blue boxes so let's zoom into

473
00:16:04,800 --> 00:16:08,000
um the example number five on

474
00:16:08,000 --> 00:16:11,440
the list so here we see that the node

475
00:16:11,440 --> 00:16:14,240
that responded to us begins with has an

476
00:16:14,240 --> 00:16:16,480
ipv4 address that begins with 68

477
00:16:16,480 --> 00:16:18,480
and if we were using regular trace route

478
00:16:18,480 --> 00:16:20,800
without the 5837 extension

479
00:16:20,800 --> 00:16:22,079
this is all the information that we

480
00:16:22,079 --> 00:16:23,920
would receive however

481
00:16:23,920 --> 00:16:25,759
with this extension we get this

482
00:16:25,759 --> 00:16:27,279
additional printout that tells us our

483
00:16:27,279 --> 00:16:28,720
arrival interface

484
00:16:28,720 --> 00:16:31,360
is an interface with the name en2 on the

485
00:16:31,360 --> 00:16:32,639
node

486
00:16:32,639 --> 00:16:34,320
and its address actually begins with a

487
00:16:34,320 --> 00:16:37,600
38 so it's a very different

488
00:16:37,600 --> 00:16:39,600
ip address than the one is that is

489
00:16:39,600 --> 00:16:40,639
getting back to us

490
00:16:40,639 --> 00:16:42,800
so we can get a lot more fine grained

491
00:16:42,800 --> 00:16:44,240
information and we can learn where our

492
00:16:44,240 --> 00:16:45,920
messages are actually arriving on the

493
00:16:45,920 --> 00:16:47,759
nodes along the delivery path

494
00:16:47,759 --> 00:16:50,480
not just an ip address of an interface

495
00:16:50,480 --> 00:16:53,920
associated with that node

496
00:16:53,920 --> 00:16:56,720
now similar to pro it has a lot of this

497
00:16:56,720 --> 00:16:58,240
command can have a lot of security

498
00:16:58,240 --> 00:16:59,920
considerations because once again we are

499
00:16:59,920 --> 00:17:01,199
giving information

500
00:17:01,199 --> 00:17:04,240
about the network out so in order to

501
00:17:04,240 --> 00:17:06,160
address these we take the exact same

502
00:17:06,160 --> 00:17:09,919
steps that we did with pro so first we

503
00:17:09,919 --> 00:17:11,760
do not enable this by default um the

504
00:17:11,760 --> 00:17:13,199
default behavior is

505
00:17:13,199 --> 00:17:14,720
the same as the default traceroute

506
00:17:14,720 --> 00:17:17,359
behavior which can also be disabled

507
00:17:17,359 --> 00:17:19,919
and you can you can set it up so that it

508
00:17:19,919 --> 00:17:22,240
replies with this ex

509
00:17:22,240 --> 00:17:24,720
this extra interface information only

510
00:17:24,720 --> 00:17:26,000
with verified

511
00:17:26,000 --> 00:17:29,120
source addresses that are on a list

512
00:17:29,120 --> 00:17:31,679
and for everyone else it can either just

513
00:17:31,679 --> 00:17:33,360
drop the request or respond with a

514
00:17:33,360 --> 00:17:34,080
generic

515
00:17:34,080 --> 00:17:35,520
traceroute message that you might

516
00:17:35,520 --> 00:17:38,240
receive today

517
00:17:38,240 --> 00:17:40,480
for implementations there are a lot in

518
00:17:40,480 --> 00:17:41,840
progress it is not

519
00:17:41,840 --> 00:17:45,120
as deployed as the probe command is

520
00:17:45,120 --> 00:17:47,840
but there are many places where it's

521
00:17:47,840 --> 00:17:49,760
being worked on so for juniper

522
00:17:49,760 --> 00:17:51,440
in the junos line they are currently

523
00:17:51,440 --> 00:17:53,200
working on it and it will

524
00:17:53,200 --> 00:17:55,120
be deployed starting with the ex series

525
00:17:55,120 --> 00:17:56,720
of routers first

526
00:17:56,720 --> 00:17:58,400
the linux kernel maintainers are

527
00:17:58,400 --> 00:18:01,200
currently reviewing our code and

528
00:18:01,200 --> 00:18:03,679
um evaluating it to see if they would

529
00:18:03,679 --> 00:18:05,679
like to accept it into the linux kernel

530
00:18:05,679 --> 00:18:08,640
but the code itself is finished so it's

531
00:18:08,640 --> 00:18:09,600
more

532
00:18:09,600 --> 00:18:12,400
and the um in the process of being

533
00:18:12,400 --> 00:18:13,200
accepted

534
00:18:13,200 --> 00:18:15,760
and same thing for the ipu tools package

535
00:18:15,760 --> 00:18:16,559
in linux

536
00:18:16,559 --> 00:18:18,000
the code has been submitted and is

537
00:18:18,000 --> 00:18:20,080
currently under review

538
00:18:20,080 --> 00:18:23,280
and wireshark starting with version 3.5

539
00:18:23,280 --> 00:18:24,640
and newer can completely

540
00:18:24,640 --> 00:18:29,039
dissect and parse the rfc 5837

541
00:18:29,039 --> 00:18:29,679
extensions

542
00:18:29,679 --> 00:18:33,360
and that is currently up in the

543
00:18:33,360 --> 00:18:36,720
version of wireshark so that has been

544
00:18:36,720 --> 00:18:38,160
our presentation um thank you for

545
00:18:38,160 --> 00:18:39,520
listening and we are now opening the

546
00:18:39,520 --> 00:18:43,679
floor to any questions

547
00:18:43,679 --> 00:18:46,320
thank you ron and andreas for that

548
00:18:46,320 --> 00:18:47,919
wonderful presentation

549
00:18:47,919 --> 00:18:50,720
we've got a few questions for you and i

550
00:18:50,720 --> 00:18:52,320
believe that you both have the q

551
00:18:52,320 --> 00:18:55,440
a tab up and where our first question

552
00:18:55,440 --> 00:18:58,400
comes from matthew pitock

553
00:18:58,400 --> 00:19:01,840
would one of you be able to answer that

554
00:19:08,240 --> 00:19:09,919
hang on just a second so i can see the

555
00:19:09,919 --> 00:19:12,559
whole question

556
00:19:12,559 --> 00:19:14,559
all i see is a reference to a internet

557
00:19:14,559 --> 00:19:16,240
draft from matthew

558
00:19:16,240 --> 00:19:19,039
okay well it is when specifying the

559
00:19:19,039 --> 00:19:19,840
interface name

560
00:19:19,840 --> 00:19:22,640
are you going to give the dns name of

561
00:19:22,640 --> 00:19:23,679
the interface

562
00:19:23,679 --> 00:19:26,720
or is that the internal interface name

563
00:19:26,720 --> 00:19:30,080
as determined by the device being probed

564
00:19:30,080 --> 00:19:31,360
itself

565
00:19:31,360 --> 00:19:34,640
is the latter okay

566
00:19:34,640 --> 00:19:37,520
and then matthew also asks again for

567
00:19:37,520 --> 00:19:39,039
traceroute when you say

568
00:19:39,039 --> 00:19:42,000
the interface packet would have been

569
00:19:42,000 --> 00:19:43,840
routed out

570
00:19:43,840 --> 00:19:48,320
had the time to live not expired

571
00:19:48,320 --> 00:19:51,120
is that doing a simple rib lookup or

572
00:19:51,120 --> 00:19:53,280
does it do a layer two hatch

573
00:19:53,280 --> 00:19:56,880
calculation as well as

574
00:19:56,880 --> 00:20:00,160
when the outgoing interface is an

575
00:20:00,160 --> 00:20:02,240
aggregated interface

576
00:20:02,240 --> 00:20:05,600
i.e is it rib only lookup or rib

577
00:20:05,600 --> 00:20:09,280
to fib look up rib only rib only

578
00:20:09,280 --> 00:20:11,440
excellent matthew hopefully that was

579
00:20:11,440 --> 00:20:12,400
good for you

580
00:20:12,400 --> 00:20:15,280
uh the next question uh is from tony

581
00:20:15,280 --> 00:20:16,720
talber

582
00:20:16,720 --> 00:20:19,280
seeing that extra info in the trace

583
00:20:19,280 --> 00:20:20,640
route makes me

584
00:20:20,640 --> 00:20:24,480
yearn for more well-structured output eg

585
00:20:24,480 --> 00:20:28,000
josn any work

586
00:20:28,000 --> 00:20:31,520
in that vein or is it a client

587
00:20:31,520 --> 00:20:35,200
program issue

588
00:20:35,200 --> 00:20:37,120
you know tony i've never thought of that

589
00:20:37,120 --> 00:20:38,880
before um

590
00:20:38,880 --> 00:20:41,840
just because icmp messages are

591
00:20:41,840 --> 00:20:45,320
structured the way they were since

592
00:20:45,320 --> 00:20:48,240
1976 i just went on in that

593
00:20:48,240 --> 00:20:50,559
in that vein i never thought about a

594
00:20:50,559 --> 00:20:52,559
json output but that actually is a

595
00:20:52,559 --> 00:20:55,440
really good idea

596
00:20:55,760 --> 00:20:57,919
i feel like on the side of traceroute

597
00:20:57,919 --> 00:21:00,320
the command that would be handled

598
00:21:00,320 --> 00:21:03,919
by the program and not in the icmp

599
00:21:03,919 --> 00:21:05,520
message like the

600
00:21:05,520 --> 00:21:08,159
the parser for that would just format it

601
00:21:08,159 --> 00:21:09,840
as a json and then output it that way

602
00:21:09,840 --> 00:21:12,799
and that would not be on the command

603
00:21:12,799 --> 00:21:14,000
function

604
00:21:14,000 --> 00:21:17,280
any more questions out there tony brings

605
00:21:17,280 --> 00:21:20,559
up a really good point though

606
00:21:21,200 --> 00:21:24,559
many of the well many of the basic

607
00:21:24,559 --> 00:21:28,159
protocols in in the internet

608
00:21:28,159 --> 00:21:29,840
were designed the way they were as a

609
00:21:29,840 --> 00:21:31,360
matter of history you know we needed to

610
00:21:31,360 --> 00:21:33,039
save bytes back in the days when the

611
00:21:33,039 --> 00:21:35,280
network ran on t1s

612
00:21:35,280 --> 00:21:38,159
um now json really wouldn't be a bad

613
00:21:38,159 --> 00:21:40,559
idea

614
00:21:41,679 --> 00:21:44,080
michael dougherty says nice presentation

615
00:21:44,080 --> 00:21:45,679
and very interesting

616
00:21:45,679 --> 00:21:47,919
tony responds also given the interface

617
00:21:47,919 --> 00:21:48,960
specification

618
00:21:48,960 --> 00:21:51,520
is dependent on the device do you give

619
00:21:51,520 --> 00:21:52,960
an error if that's

620
00:21:52,960 --> 00:21:55,520
incorrect

621
00:21:56,000 --> 00:21:58,000
i'm sorry i'm not quite sure i

622
00:21:58,000 --> 00:22:00,159
understood the question

623
00:22:00,159 --> 00:22:02,640
i'll repeat it also given that the

624
00:22:02,640 --> 00:22:04,080
interface specification

625
00:22:04,080 --> 00:22:06,720
is dependent on the device do you give

626
00:22:06,720 --> 00:22:07,679
an error

627
00:22:07,679 --> 00:22:10,799
if that is incorrect ah okay i get it

628
00:22:10,799 --> 00:22:13,919
let's say you ask for um

629
00:22:13,919 --> 00:22:17,039
ge hyphen zero hyphen zero hyphen

630
00:22:17,039 --> 00:22:19,440
but on this device that's you know ge

631
00:22:19,440 --> 00:22:20,640
zero zero

632
00:22:20,640 --> 00:22:24,240
zero um the error you will get back

633
00:22:24,240 --> 00:22:27,280
is that there is no such interface

634
00:22:27,280 --> 00:22:29,120
if one character in the interface name

635
00:22:29,120 --> 00:22:33,120
is wrong there's no such interface

636
00:22:35,039 --> 00:22:38,080
okay uh kevin mccormick has just asked

637
00:22:38,080 --> 00:22:40,000
could you have a command

638
00:22:40,000 --> 00:22:43,360
option to output to output as

639
00:22:43,360 --> 00:22:46,720
josn yeah

640
00:22:46,720 --> 00:22:50,159
that would actually be easy um you get

641
00:22:50,159 --> 00:22:52,400
the icmp message back and

642
00:22:52,400 --> 00:22:55,440
rather than putting it out as you know

643
00:22:55,440 --> 00:22:56,799
the text that

644
00:22:56,799 --> 00:22:58,880
trade ping and traceroute put out today

645
00:22:58,880 --> 00:23:01,600
why not put it out as json

646
00:23:01,600 --> 00:23:05,120
that's actually a really good idea

647
00:23:06,240 --> 00:23:07,919
i wish we'd talk to you guys before we

648
00:23:07,919 --> 00:23:10,559
did the work

649
00:23:11,600 --> 00:23:14,799
uh matthew pitock uh asks again

650
00:23:14,799 --> 00:23:18,799
uh our interface our interface

651
00:23:18,799 --> 00:23:22,400
names case sensitive um

652
00:23:22,400 --> 00:23:24,720
i believe they are andreas you did the

653
00:23:24,720 --> 00:23:26,640
work are they

654
00:23:26,640 --> 00:23:30,640
um so the way that it's handled in linux

655
00:23:30,640 --> 00:23:32,480
is it just uses the default lookup for

656
00:23:32,480 --> 00:23:34,559
linux interfaces so it would depend on

657
00:23:34,559 --> 00:23:36,000
that functionality

658
00:23:36,000 --> 00:23:38,480
um so i'd off the top of my head i don't

659
00:23:38,480 --> 00:23:40,320
know if it's case specific we can we can

660
00:23:40,320 --> 00:23:42,799
test that

661
00:23:43,919 --> 00:23:46,559
james martin comments great presentation

662
00:23:46,559 --> 00:23:48,840
andreas

663
00:23:48,840 --> 00:23:51,840
thanks

664
00:23:52,640 --> 00:23:56,000
all right well we have four minutes

665
00:23:56,000 --> 00:23:59,039
left to our next presentation

666
00:23:59,039 --> 00:24:01,360
if we don't have any other comments or

667
00:24:01,360 --> 00:24:02,880
questions

668
00:24:02,880 --> 00:24:05,520
we're we're gonna pause for a brief

669
00:24:05,520 --> 00:24:07,039
moment

670
00:24:07,039 --> 00:24:10,240
until 12 30 when we resume our next

671
00:24:10,240 --> 00:24:12,400
presentation let me see if we have

672
00:24:12,400 --> 00:24:14,000
anything else

673
00:24:14,000 --> 00:24:17,360
once again i'd like to thank andreas

674
00:24:17,360 --> 00:24:21,360
and ron for presenting that uh today's

675
00:24:21,360 --> 00:24:25,039
second day of nanog82

676
00:24:25,039 --> 00:24:27,679
we are going to take a just got

677
00:24:27,679 --> 00:24:30,159
something in from tony

678
00:24:30,159 --> 00:24:33,840
again uh right the interface

679
00:24:33,840 --> 00:24:36,720
naming is not something that usually

680
00:24:36,720 --> 00:24:38,080
known without specific

681
00:24:38,080 --> 00:24:41,279
inside knowledge snmp queries can give

682
00:24:41,279 --> 00:24:41,919
you

683
00:24:41,919 --> 00:24:45,279
but they are usually not available from

684
00:24:45,279 --> 00:24:48,559
outside the operator so it looks like

685
00:24:48,559 --> 00:24:50,240
that's a comment not a question

686
00:24:50,240 --> 00:25:00,000
so excellent

687
00:25:00,000 --> 00:25:02,080
you

